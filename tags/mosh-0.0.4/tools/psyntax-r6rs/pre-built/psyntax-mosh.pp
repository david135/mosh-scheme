;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define g$111$12318 '#f) (define g$111$12315 '#f) ((lambda (g$111$12208 g$111$12295) (begin (set! g$111$12208 (lambda g$111$12311 ((lambda (g$111$12312) (if (= g$111$12312 '1) (apply (lambda (g$111$12297) (g$111$12208 g$111$12297 (lambda (g$111$12299) g$111$12299))) g$111$12311) (if (= g$111$12312 '2) (apply (lambda (g$111$12301 g$111$12302) (begin (if (procedure? g$111$12302) (void) (error 'assert '"assertion failed" '(procedure? fender))) ((lambda (g$111$12305) (lambda g$111$12309 ((lambda (g$111$12310) (if (= g$111$12310 '0) (apply (lambda () g$111$12305) g$111$12309) (if (= g$111$12310 '1) (apply (lambda (g$111$12307) (set! g$111$12305 (g$111$12302 g$111$12307))) g$111$12309) (error 'apply '"invalid arg count")))) (length g$111$12309)))) (g$111$12302 g$111$12301)))) g$111$12311) (error 'apply '"invalid arg count")))) (length g$111$12311)))) (set! g$111$12295 (lambda (g$111$12313) (error 'file-options-spec '"not implemented"))) (begin (set! g$111$12315 g$111$12295) (set! g$111$12318 g$111$12208)))) '#f '#f))


(begin (define g$111$12396 '#f) (define g$111$12395 '#f) (define g$111$12394 '#f) (define g$111$12393 '#f) (define g$111$12392 '#f) (define g$111$12391 '#f) ((lambda (g$111$12320 g$111$12322 g$111$12324 g$111$12326 g$111$12328 g$111$12330) (begin (set! g$111$12320 (g$111$12318 (lambda (g$111$12332) '#f) (lambda (g$111$12334) (begin (if (procedure? g$111$12334) (void) (error 'assert '"assertion failed" '(procedure? p))) g$111$12334)))) (set! g$111$12322 (lambda (g$111$12336) ((lambda (g$111$12338) (begin (set! g$111$12338 (lambda (g$111$12340) ((lambda (g$111$12342) (if g$111$12342 g$111$12342 ((lambda (g$111$12344) (if g$111$12344 g$111$12344 ((lambda (g$111$12346) (if g$111$12346 g$111$12346 ((lambda (g$111$12348) (if g$111$12348 g$111$12348 (begin '#f (number? g$111$12340)))) (boolean? g$111$12340)))) (symbol? g$111$12340)))) (char? g$111$12340)))) (null? g$111$12340)))) (not (g$111$12338 g$111$12336)))) '#f))) (set! g$111$12324 (lambda (g$111$12350) ((lambda (g$111$12352) (begin (set! g$111$12352 (lambda (g$111$12354) (if (pair? g$111$12354) ((lambda (g$111$12356) (if (memv g$111$12356 '(quote)) (if (if g$111$12350 (begin '#f (g$111$12322 (cadr g$111$12354))) '#f) ((lambda (g$111$12381) (begin (set-symbol-value! g$111$12381 (cadr g$111$12354)) g$111$12381)) (gensym)) g$111$12354) (if (memv g$111$12356 '(case-lambda)) (cons 'case-lambda (map (lambda (g$111$12379) (cons (car g$111$12379) (map g$111$12352 (cdr g$111$12379)))) (cdr g$111$12354))) (if (memv g$111$12356 '(lambda)) (cons* 'lambda (cadr g$111$12354) (map g$111$12352 (cddr g$111$12354))) (if (memv g$111$12356 '(letrec)) ((lambda (g$111$12371 g$111$12372) ((lambda (g$111$12375 g$111$12376) (cons* 'letrec (map list g$111$12375 (map g$111$12352 g$111$12376)) (map g$111$12352 g$111$12372))) (map car g$111$12371) (map cadr g$111$12371))) (cadr g$111$12354) (cddr g$111$12354)) (if (memv g$111$12356 '(letrec*)) ((lambda (g$111$12363 g$111$12364) ((lambda (g$111$12367 g$111$12368) (cons* 'letrec* (map list g$111$12367 (map g$111$12352 g$111$12368)) (map g$111$12352 g$111$12364))) (map car g$111$12363) (map cadr g$111$12363))) (cadr g$111$12354) (cddr g$111$12354)) (if (memv g$111$12356 '(begin)) (cons 'begin (map g$111$12352 (cdr g$111$12354))) (if (memv g$111$12356 '(set!)) (list 'set! (cadr g$111$12354) (g$111$12352 (caddr g$111$12354))) (if (memv g$111$12356 '(primitive)) ((lambda (g$111$12357) ((lambda (g$111$12359) (if g$111$12359 ((lambda (g$111$12361) g$111$12361) g$111$12359) g$111$12357)) ((g$111$12320) g$111$12357))) (cadr g$111$12354)) (if (memv g$111$12356 '(define)) g$111$12354 (if (list? g$111$12354) (map g$111$12352 g$111$12354) (error 'rewrite '"invalid form ~s ~s" g$111$12354 (list? g$111$12354))))))))))))) (car g$111$12354)) g$111$12354))) g$111$12352)) '#f))) (set! g$111$12326 ((lambda (g$111$12383) (not (eq? (eval-core (list 'quote g$111$12383)) (eval-core (list 'quote g$111$12383))))) (cons '1 '2))) (set! g$111$12328 (lambda (g$111$12385) ((g$111$12324 g$111$12326) g$111$12385))) (set! g$111$12330 (lambda (g$111$12387 g$111$12388) (begin (pretty-print ((g$111$12324 '#f) g$111$12387) g$111$12388) (newline g$111$12388)))) (begin (set! g$111$12391 g$111$12330) (set! g$111$12392 g$111$12328) (set! g$111$12393 g$111$12326) (set! g$111$12394 g$111$12324) (set! g$111$12395 g$111$12322) (set! g$111$12396 g$111$12320)))) '#f '#f '#f '#f '#f '#f))


(void)


(begin (define g$111$12874 '#f) (define g$111$12873 '#f) (define g$111$12872 '#f) (define g$111$12871 '#f) (define g$111$12870 '#f) (define g$111$12869 '#f) (define g$111$12868 '#f) (define g$111$12867 '#f) (define g$111$12866 '#f) (define g$111$12865 '#f) (define g$111$12864 '#f) (define g$111$12863 '#f) (define g$111$12862 '#f) (define g$111$12861 '#f) (define g$111$12860 '#f) (define g$111$12859 '#f) (define g$111$12858 '#f) (define g$111$12857 '#f) (define g$111$12856 '#f) (define g$111$12855 '#f) (define g$111$12854 '#f) (define g$111$12853 '#f) (define g$111$12852 '#f) (define g$111$12851 '#f) (define g$111$12850 '#f) (define g$111$12849 '#f) (define g$111$12848 '#f) (define g$111$12847 '#f) (define g$111$12846 '#f) (define g$111$12845 '#f) (define g$111$12844 '#f) (define g$111$12843 '#f) (define g$111$12842 '#f) (define g$111$12841 '#f) (define g$111$12840 '#f) (define g$111$12839 '#f) (define g$111$12838 '#f) (define g$111$12837 '#f) (define g$111$12836 '#f) (define g$111$12835 '#f) (define g$111$12834 '#f) (define g$111$12833 '#f) (define g$111$12832 '#f) (define g$111$12831 '#f) (define g$111$12830 '#f) (define g$111$12829 '#f) (define g$111$12828 '#f) (define g$111$12827 '#f) (define g$111$12826 '#f) ((lambda (g$111$12450 g$111$12452 g$111$12455 g$111$12457 g$111$12459 g$111$12461 g$111$12463 g$111$12465 g$111$12467 g$111$12469 g$111$12471 g$111$12473 g$111$12475 g$111$12477 g$111$12479 g$111$12481 g$111$12483 g$111$12485 g$111$12487 g$111$12489 g$111$12491 g$111$12493 g$111$12495 g$111$12497 g$111$12499 g$111$12501 g$111$12503 g$111$12505 g$111$12507 g$111$12509 g$111$12511 g$111$12513 g$111$12515 g$111$12517 g$111$12519 g$111$12521 g$111$12523 g$111$12525 g$111$12527 g$111$12529 g$111$12531 g$111$12533 g$111$12535 g$111$12537 g$111$12539 g$111$12541 g$111$12543 g$111$12545 g$111$12547) (begin (set! g$111$12450 (lambda () ((lambda (g$111$12549) ((lambda (g$111$12551) (begin (set! g$111$12551 (lambda (g$111$12553 g$111$12554) (if (memq g$111$12553 g$111$12554) g$111$12554 (cons g$111$12553 g$111$12554)))) (lambda g$111$12559 ((lambda (g$111$12560) (if (= g$111$12560 '0) (apply (lambda () g$111$12549) g$111$12559) (if (= g$111$12560 '1) (apply (lambda (g$111$12557) (set! g$111$12549 (g$111$12551 g$111$12557 g$111$12549))) g$111$12559) (error 'apply '"invalid arg count")))) (length g$111$12559))))) '#f)) '()))) (set! g$111$12452 (g$111$12318 (g$111$12450) (lambda (g$111$12561) (begin (if (procedure? g$111$12561) (void) (error 'current-library-collection '"not a procedure" g$111$12561)) g$111$12561)))) (set! g$111$12455 (lambda (g$111$12563 g$111$12564 g$111$12565 g$111$12566 g$111$12567 g$111$12568 g$111$12569 g$111$12570 g$111$12571 g$111$12572 g$111$12573) (vector 'g$111$12454 g$111$12563 g$111$12564 g$111$12565 g$111$12566 g$111$12567 g$111$12568 g$111$12569 g$111$12570 g$111$12571 g$111$12572 g$111$12573))) (set! g$111$12457 (lambda (g$111$12585) (if (vector? g$111$12585) (if (= (vector-length g$111$12585) (+ '1 (length '(id name version imp* vis* inv* subst env visit-state invoke-state visible?)))) (begin '#f (eq? (vector-ref g$111$12585 '0) 'g$111$12454)) '#f) '#f))) (set! g$111$12459 (lambda (g$111$12587) (if (g$111$12457 g$111$12587) (vector-ref g$111$12587 '1) (error 'library-id '"~s is not of type ~s" g$111$12587 'library)))) (set! g$111$12461 (lambda (g$111$12589) (if (g$111$12457 g$111$12589) (vector-ref g$111$12589 '2) (error 'library-name '"~s is not of type ~s" g$111$12589 'library)))) (set! g$111$12463 (lambda (g$111$12591) (if (g$111$12457 g$111$12591) (vector-ref g$111$12591 '3) (error 'library-version '"~s is not of type ~s" g$111$12591 'library)))) (set! g$111$12465 (lambda (g$111$12593) (if (g$111$12457 g$111$12593) (vector-ref g$111$12593 '4) (error 'library-imp* '"~s is not of type ~s" g$111$12593 'library)))) (set! g$111$12467 (lambda (g$111$12595) (if (g$111$12457 g$111$12595) (vector-ref g$111$12595 '5) (error 'library-vis* '"~s is not of type ~s" g$111$12595 'library)))) (set! g$111$12469 (lambda (g$111$12597) (if (g$111$12457 g$111$12597) (vector-ref g$111$12597 '6) (error 'library-inv* '"~s is not of type ~s" g$111$12597 'library)))) (set! g$111$12471 (lambda (g$111$12599) (if (g$111$12457 g$111$12599) (vector-ref g$111$12599 '7) (error 'library-subst '"~s is not of type ~s" g$111$12599 'library)))) (set! g$111$12473 (lambda (g$111$12601) (if (g$111$12457 g$111$12601) (vector-ref g$111$12601 '8) (error 'library-env '"~s is not of type ~s" g$111$12601 'library)))) (set! g$111$12475 (lambda (g$111$12603) (if (g$111$12457 g$111$12603) (vector-ref g$111$12603 '9) (error 'library-visit-state '"~s is not of type ~s" g$111$12603 'library)))) (set! g$111$12477 (lambda (g$111$12605) (if (g$111$12457 g$111$12605) (vector-ref g$111$12605 '10) (error 'library-invoke-state '"~s is not of type ~s" g$111$12605 'library)))) (set! g$111$12479 (lambda (g$111$12607) (if (g$111$12457 g$111$12607) (vector-ref g$111$12607 '11) (error 'library-visible? '"~s is not of type ~s" g$111$12607 'library)))) (set! g$111$12481 (lambda (g$111$12609 g$111$12610) (if (g$111$12457 g$111$12609) (vector-set! g$111$12609 '1 g$111$12610) (error 'set-library-id! '"~s is not of type ~s" g$111$12609 'library)))) (set! g$111$12483 (lambda (g$111$12613 g$111$12614) (if (g$111$12457 g$111$12613) (vector-set! g$111$12613 '2 g$111$12614) (error 'set-library-name! '"~s is not of type ~s" g$111$12613 'library)))) (set! g$111$12485 (lambda (g$111$12617 g$111$12618) (if (g$111$12457 g$111$12617) (vector-set! g$111$12617 '3 g$111$12618) (error 'set-library-version! '"~s is not of type ~s" g$111$12617 'library)))) (set! g$111$12487 (lambda (g$111$12621 g$111$12622) (if (g$111$12457 g$111$12621) (vector-set! g$111$12621 '4 g$111$12622) (error 'set-library-imp*! '"~s is not of type ~s" g$111$12621 'library)))) (set! g$111$12489 (lambda (g$111$12625 g$111$12626) (if (g$111$12457 g$111$12625) (vector-set! g$111$12625 '5 g$111$12626) (error 'set-library-vis*! '"~s is not of type ~s" g$111$12625 'library)))) (set! g$111$12491 (lambda (g$111$12629 g$111$12630) (if (g$111$12457 g$111$12629) (vector-set! g$111$12629 '6 g$111$12630) (error 'set-library-inv*! '"~s is not of type ~s" g$111$12629 'library)))) (set! g$111$12493 (lambda (g$111$12633 g$111$12634) (if (g$111$12457 g$111$12633) (vector-set! g$111$12633 '7 g$111$12634) (error 'set-library-subst! '"~s is not of type ~s" g$111$12633 'library)))) (set! g$111$12495 (lambda (g$111$12637 g$111$12638) (if (g$111$12457 g$111$12637) (vector-set! g$111$12637 '8 g$111$12638) (error 'set-library-env! '"~s is not of type ~s" g$111$12637 'library)))) (set! g$111$12497 (lambda (g$111$12641 g$111$12642) (if (g$111$12457 g$111$12641) (vector-set! g$111$12641 '9 g$111$12642) (error 'set-library-visit-state! '"~s is not of type ~s" g$111$12641 'library)))) (set! g$111$12499 (lambda (g$111$12645 g$111$12646) (if (g$111$12457 g$111$12645) (vector-set! g$111$12645 '10 g$111$12646) (error 'set-library-invoke-state! '"~s is not of type ~s" g$111$12645 'library)))) (set! g$111$12501 (lambda (g$111$12649 g$111$12650) (if (g$111$12457 g$111$12649) (vector-set! g$111$12649 '11 g$111$12650) (error 'set-library-visible?! '"~s is not of type ~s" g$111$12649 'library)))) (set! g$111$12503 (lambda (g$111$12653) (if (null? g$111$12653) '() (error 'find-dependencies '"cannot handle deps yet")))) (set! g$111$12505 (lambda (g$111$12655) (letrec ((g$111$12657 (lambda (g$111$12659) (if (null? g$111$12659) '#f (if (g$111$12655 (car g$111$12659)) (car g$111$12659) (g$111$12657 (cdr g$111$12659))))))) (g$111$12657 ((g$111$12452)))))) (set! g$111$12507 (g$111$12318 '(".") (lambda (g$111$12661) (if (if (list? g$111$12661) (begin '#f (for-all string? g$111$12661)) '#f) (map (lambda (g$111$12663) g$111$12663) g$111$12661) (error 'library-path '"not a list of strings" g$111$12661))))) (set! g$111$12509 (lambda (g$111$12665) (call-with-values (lambda () (open-string-output-port)) (lambda (g$111$12667 g$111$12668) ((lambda (g$111$12671) (begin (set! g$111$12671 (lambda (g$111$12673) (if (<= '0 g$111$12673 '9) (display g$111$12673 g$111$12667) (display (integer->char (+ (char->integer '#\A) (- g$111$12673 '10))) g$111$12667)))) (begin (letrec ((g$111$12675 (lambda (g$111$12677) (if (null? g$111$12677) (display '".ss" g$111$12667) (begin (display '"/" g$111$12667) (for-each (lambda (g$111$12679) (if ((lambda (g$111$12681) (if g$111$12681 g$111$12681 ((lambda (g$111$12683) (if g$111$12683 g$111$12683 ((lambda (g$111$12685) (if g$111$12685 g$111$12685 (begin '#f (memv g$111$12679 '(#\- #\. #\_ #\~))))) (char<=? '#\0 g$111$12679 '#\9)))) (char<=? '#\A g$111$12679 '#\Z)))) (char<=? '#\a g$111$12679 '#\z)) (display g$111$12679 g$111$12667) (begin (display '"%" g$111$12667) ((lambda (g$111$12687) (begin (g$111$12671 (quotient g$111$12687 '16)) (g$111$12671 (remainder g$111$12687 '16)))) (char->integer g$111$12679))))) (string->list (symbol->string (car g$111$12677)))) (g$111$12675 (cdr g$111$12677))))))) (g$111$12675 g$111$12665)) (g$111$12668)))) '#f))))) (set! g$111$12511 (g$111$12318 (lambda (g$111$12689) ((lambda (g$111$12691) (letrec ((g$111$12693 (lambda (g$111$12695) (if (pair? g$111$12695) (begin '#f ((lambda (g$111$12697) (if (file-exists? g$111$12697) g$111$12697 (g$111$12693 (cdr g$111$12695)))) (string-append (car g$111$12695) g$111$12691))) '#f)))) (g$111$12693 (g$111$12507)))) (g$111$12509 g$111$12689))) (lambda (g$111$12699) (if (procedure? g$111$12699) g$111$12699 (error 'file-locator '"not a procedure" g$111$12699))))) (set! g$111$12513 (g$111$12318 (lambda (g$111$12701) ((lambda (g$111$12703) (if (string? g$111$12703) (begin '#f (with-input-from-file g$111$12703 read)) '#f)) ((g$111$12511) g$111$12701))) (lambda (g$111$12705) (if (procedure? g$111$12705) g$111$12705 (error 'library-locator '"not a procedure" g$111$12705))))) (set! g$111$12515 (g$111$12318 (lambda (g$111$12707) (error 'library-expander '"not initialized")) (lambda (g$111$12709) (if (procedure? g$111$12709) g$111$12709 (error 'library-expander '"not a procedure" g$111$12709))))) (set! g$111$12517 (g$111$12318 '())) (set! g$111$12519 (lambda (g$111$12711) (begin (if (member g$111$12711 (g$111$12517)) (error '#f '"circular attempt to import library was detected" g$111$12711) (void)) ((lambda (g$111$12715 g$111$12716) ((lambda (g$111$12719) (dynamic-wind g$111$12719 (lambda () ((lambda (g$111$12721) (begin (if g$111$12721 (void) (error '#f '"cannot find library" g$111$12711)) ((g$111$12515) g$111$12721) ((lambda (g$111$12723) (if g$111$12723 g$111$12723 (begin '#f (error '#f '"handling external library did not yield the currect library" g$111$12711)))) (g$111$12505 (lambda (g$111$12725) (equal? (g$111$12461 g$111$12725) g$111$12711)))))) ((g$111$12513) g$111$12711))) g$111$12719)) (lambda () ((lambda (g$111$12727) (begin (g$111$12715 g$111$12716) (set! g$111$12716 g$111$12727))) (g$111$12715))))) g$111$12517 (cons g$111$12711 (g$111$12517)))))) (set! g$111$12521 (lambda (g$111$12729) ((lambda (g$111$12731) (if g$111$12731 g$111$12731 (begin '#f (g$111$12519 g$111$12729)))) (g$111$12505 (lambda (g$111$12733) (equal? (g$111$12461 g$111$12733) g$111$12729)))))) (set! g$111$12523 (lambda (g$111$12735) (if (g$111$12505 (lambda (g$111$12737) (equal? (g$111$12461 g$111$12737) g$111$12735))) (begin '#f '#t) '#f))) (set! g$111$12525 (lambda (g$111$12739) ((lambda (g$111$12741) ((lambda (g$111$12743) (if g$111$12743 g$111$12743 (begin '#f (error '#f '"cannot find library with required spec" g$111$12739)))) (g$111$12505 (lambda (g$111$12745) (eq? g$111$12741 (g$111$12459 g$111$12745)))))) (car g$111$12739)))) (set! g$111$12527 (make-eq-hashtable)) (set! g$111$12529 (lambda (g$111$12747) (begin ((lambda (g$111$12749) (for-each (lambda (g$111$12751) ((lambda (g$111$12753 g$111$12754) ((lambda (g$111$12757) (hashtable-set! g$111$12527 g$111$12753 g$111$12757)) ((lambda (g$111$12759) (if (memv g$111$12759 '(global)) (cons 'global (cons g$111$12747 (cdr g$111$12754))) (if (memv g$111$12759 '(global-macro)) (cons 'global-macro (cons g$111$12747 (cdr g$111$12754))) (if (memv g$111$12759 '(global-macro!)) (cons 'global-macro! (cons g$111$12747 (cdr g$111$12754))) g$111$12754)))) (car g$111$12754)))) (car g$111$12751) (cdr g$111$12751))) g$111$12749)) (g$111$12473 g$111$12747)) ((g$111$12452) g$111$12747)))) (set! g$111$12531 (lambda (g$111$12760 g$111$12761 g$111$12762 g$111$12763 g$111$12764 g$111$12765 g$111$12766 g$111$12767 g$111$12768 g$111$12769 g$111$12770) ((lambda (g$111$12782 g$111$12783 g$111$12784) (begin (if (if (symbol? g$111$12760) (if (list? g$111$12761) (begin '#f (list? g$111$12762)) '#f) '#f) (void) (error 'install-library '"invalid spec with id/name/ver" g$111$12760 g$111$12761 g$111$12762)) (if (g$111$12523 g$111$12761) (error 'install-library '"library is already installed" g$111$12761) (void)) ((lambda (g$111$12788) (g$111$12529 g$111$12788)) (g$111$12455 g$111$12760 g$111$12761 g$111$12762 g$111$12782 g$111$12783 g$111$12784 g$111$12766 g$111$12767 g$111$12768 g$111$12769 g$111$12770)))) (map g$111$12525 g$111$12763) (map g$111$12525 g$111$12764) (map g$111$12525 g$111$12765)))) (set! g$111$12533 (lambda (g$111$12790 g$111$12791 g$111$12792) (g$111$12493 g$111$12790 (cons (cons g$111$12791 g$111$12792) (g$111$12471 g$111$12790))))) (set! g$111$12535 (lambda (g$111$12796 g$111$12797 g$111$12798) (begin (g$111$12495 g$111$12796 (cons (cons g$111$12797 g$111$12798) (g$111$12473 g$111$12796))) (hashtable-set! g$111$12527 g$111$12797 g$111$12798)))) (set! g$111$12537 (lambda (g$111$12802) (hashtable-ref g$111$12527 g$111$12802 '#f))) (set! g$111$12539 (lambda (g$111$12804) ((lambda (g$111$12806) (if (procedure? g$111$12806) (begin (g$111$12499 g$111$12804 (lambda () (error 'invoke '"circularity detected" g$111$12804))) (for-each g$111$12539 (g$111$12469 g$111$12804)) (g$111$12499 g$111$12804 (lambda () (error 'invoke '"first invoke did not return" g$111$12804))) (g$111$12806) (g$111$12499 g$111$12804 '#t)) (void))) (g$111$12477 g$111$12804)))) (set! g$111$12541 (lambda (g$111$12808) ((lambda (g$111$12810) (if (procedure? g$111$12810) (begin (g$111$12497 g$111$12808 (lambda () (error 'visit '"circularity detected" g$111$12808))) (for-each g$111$12539 (g$111$12467 g$111$12808)) (g$111$12497 g$111$12808 (lambda () (error 'invoke '"first visit did not return" g$111$12808))) (g$111$12810) (g$111$12497 g$111$12808 '#t)) (void))) (g$111$12475 g$111$12808)))) (set! g$111$12543 (lambda (g$111$12812) (g$111$12539 (g$111$12525 g$111$12812)))) (set! g$111$12545 (lambda g$111$12822 ((lambda (g$111$12823) (if (= g$111$12823 '1) (apply (lambda (g$111$12814) (letrec ((g$111$12816 (lambda (g$111$12818) (if (null? g$111$12818) '() (if ((lambda (g$111$12820) (if g$111$12820 g$111$12820 (begin '#f (g$111$12479 (car g$111$12818))))) g$111$12814) (cons (car g$111$12818) (g$111$12816 (cdr g$111$12818))) (g$111$12816 (cdr g$111$12818))))))) (g$111$12816 ((g$111$12452))))) g$111$12822) (if (= g$111$12823 '0) (apply (lambda () (g$111$12545 '#f)) g$111$12822) (error 'apply '"invalid arg count")))) (length g$111$12822)))) (set! g$111$12547 (lambda (g$111$12824) (begin (if (g$111$12457 g$111$12824) (void) (error 'library-spec '"not a library" g$111$12824)) (list (g$111$12459 g$111$12824) (g$111$12461 g$111$12824) (g$111$12463 g$111$12824))))) (begin (set! g$111$12826 g$111$12547) (set! g$111$12827 g$111$12545) (set! g$111$12828 g$111$12543) (set! g$111$12829 g$111$12541) (set! g$111$12830 g$111$12539) (set! g$111$12831 g$111$12537) (set! g$111$12832 g$111$12535) (set! g$111$12833 g$111$12533) (set! g$111$12834 g$111$12531) (set! g$111$12835 g$111$12529) (set! g$111$12836 g$111$12527) (set! g$111$12837 g$111$12525) (set! g$111$12838 g$111$12523) (set! g$111$12839 g$111$12521) (set! g$111$12840 g$111$12519) (set! g$111$12841 g$111$12517) (set! g$111$12842 g$111$12515) (set! g$111$12843 g$111$12513) (set! g$111$12844 g$111$12511) (set! g$111$12845 g$111$12509) (set! g$111$12846 g$111$12507) (set! g$111$12847 g$111$12505) (set! g$111$12848 g$111$12503) (set! g$111$12849 g$111$12501) (set! g$111$12850 g$111$12499) (set! g$111$12851 g$111$12497) (set! g$111$12852 g$111$12495) (set! g$111$12853 g$111$12493) (set! g$111$12854 g$111$12491) (set! g$111$12855 g$111$12489) (set! g$111$12856 g$111$12487) (set! g$111$12857 g$111$12485) (set! g$111$12858 g$111$12483) (set! g$111$12859 g$111$12481) (set! g$111$12860 g$111$12479) (set! g$111$12861 g$111$12477) (set! g$111$12862 g$111$12475) (set! g$111$12863 g$111$12473) (set! g$111$12864 g$111$12471) (set! g$111$12865 g$111$12469) (set! g$111$12866 g$111$12467) (set! g$111$12867 g$111$12465) (set! g$111$12868 g$111$12463) (set! g$111$12869 g$111$12461) (set! g$111$12870 g$111$12459) (set! g$111$12871 g$111$12457) (set! g$111$12872 g$111$12455) (set! g$111$12873 g$111$12452) (set! g$111$12874 g$111$12450)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$111$13122 '#f) (define g$111$13114 '#f) (define g$111$13113 '#f) (define g$111$13112 '#f) (define g$111$13108 '#f) (define g$111$13107 '#f) (define g$111$13106 '#f) (define g$111$13105 '#f) ((lambda (g$111$12876 g$111$12953 g$111$12955 g$111$12957 g$111$12995 g$111$12997 g$111$12999 g$111$13001) (begin (set! g$111$12876 (lambda (g$111$13003) (cons 'define (cons g$111$13003 '('#f))))) (set! g$111$12953 (lambda (g$111$13005 g$111$13006 g$111$13007) (list 'lambda g$111$13006 g$111$13007))) (set! g$111$12955 (lambda (g$111$13011 g$111$13012 g$111$13013) ((lambda (g$111$13017 g$111$13019 g$111$13021 g$111$13023) (begin (set! g$111$13017 (lambda (g$111$13065) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! g$111$13019 (lambda (g$111$13049 g$111$13050 g$111$13051) (call-with-values (lambda () (letrec ((g$111$13055 (lambda (g$111$13057 g$111$13058) (if (pair? g$111$13057) (g$111$13055 (cdr g$111$13057) (+ g$111$13058 '1)) (if (null? g$111$13057) (values g$111$13058 '=) (values g$111$13058 '>=)))))) (g$111$13055 g$111$13051 '0))) (lambda (g$111$13061 g$111$13062) (list (list 'primitive g$111$13062) g$111$13050 (list 'quote g$111$13061)))))) (set! g$111$13021 (lambda (g$111$13041 g$111$13042 g$111$13043 g$111$13044) (list '(primitive apply) (g$111$12953 g$111$13041 g$111$13043 g$111$13044) g$111$13042))) (set! g$111$13023 (lambda (g$111$13025 g$111$13026 g$111$13027) ((lambda (g$111$13031 g$111$13032) (list 'lambda g$111$13031 (g$111$12957 g$111$13025 (list g$111$13032) (list (list '(primitive length) g$111$13031)) (letrec ((g$111$13035 (lambda (g$111$13037 g$111$13038) (if (null? g$111$13037) (g$111$13017 g$111$13025) (list 'if (g$111$13019 g$111$13025 g$111$13032 (car g$111$13037)) (g$111$13021 g$111$13025 g$111$13031 (car g$111$13037) (car g$111$13038)) (g$111$13035 (cdr g$111$13037) (cdr g$111$13038))))))) (g$111$13035 g$111$13012 g$111$13027))))) (gensym) (gensym)))) (if (= (length g$111$13013) '1) (g$111$12953 g$111$13011 (car g$111$13012) (car g$111$13013)) (g$111$13023 g$111$13011 g$111$13012 g$111$13013)))) '#f '#f '#f '#f))) (set! g$111$12957 (lambda (g$111$13067 g$111$13068 g$111$13069 g$111$13070) (cons (g$111$12953 g$111$13067 g$111$13068 g$111$13070) g$111$13069))) (set! g$111$12995 (lambda (g$111$13075 g$111$13076) (letrec ((g$111$13079 (lambda (g$111$13081) (if (null? (cdr g$111$13081)) (car g$111$13081) (if (equal? (car g$111$13081) (g$111$12997)) (g$111$13079 (cdr g$111$13081)) (cons 'begin g$111$13081)))))) (g$111$13079 g$111$13076)))) (set! g$111$12997 (lambda () '((primitive void)))) (set! g$111$12999 (lambda (g$111$13083 g$111$13084 g$111$13085 g$111$13086) (if (null? g$111$13084) g$111$13086 (list 'letrec (map list g$111$13084 g$111$13085) g$111$13086)))) (set! g$111$13001 (lambda (g$111$13091 g$111$13092 g$111$13093 g$111$13094) (if (null? g$111$13092) g$111$13094 (g$111$12957 g$111$13091 g$111$13092 (map (lambda (g$111$13099) (list 'quote '#f)) g$111$13092) (g$111$12995 g$111$13091 (append (map (lambda (g$111$13101 g$111$13102) (list 'set! g$111$13101 g$111$13102)) g$111$13092 g$111$13093) (list g$111$13094))))))) (begin (set! g$111$13105 g$111$13001) (set! g$111$13106 g$111$12999) (set! g$111$13107 g$111$12997) (set! g$111$13108 g$111$12995) (set! g$111$13112 g$111$12957) (set! g$111$13113 g$111$12955) (set! g$111$13114 g$111$12953) (set! g$111$13122 g$111$12876)))) '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$111$23359 '#f) (define g$111$23358 '#f) (define g$111$23356 '#f) (define g$111$23355 '#f) (define g$111$23354 '#f) (define g$111$23353 '#f) (define g$111$23352 '#f) (define g$111$23351 '#f) (define g$111$23350 '#f) (define g$111$23349 '#f) (define g$111$23348 '#f) (define g$111$23347 '#f) (define g$111$23346 '#f) (define g$111$23345 '#f) (define g$111$23344 '#f) (define g$111$23343 '#f) (define g$111$23342 '#f) (define g$111$23341 '#f) (define g$111$23340 '#f) (define g$111$23339 '#f) (define g$111$23338 '#f) (define g$111$23337 '#f) (define g$111$23336 '#f) (define g$111$23335 '#f) (define g$111$23334 '#f) (define g$111$23333 '#f) (define g$111$23332 '#f) (define g$111$23331 '#f) (define g$111$23330 '#f) (define g$111$23329 '#f) (define g$111$23328 '#f) (define g$111$23327 '#f) (define g$111$23326 '#f) (define g$111$23325 '#f) (define g$111$23324 '#f) (define g$111$23323 '#f) (define g$111$23322 '#f) (define g$111$23321 '#f) (define g$111$23320 '#f) (define g$111$23319 '#f) (define g$111$23318 '#f) (define g$111$23317 '#f) (define g$111$23316 '#f) (define g$111$23315 '#f) (define g$111$23314 '#f) (define g$111$23313 '#f) (define g$111$23312 '#f) (define g$111$23311 '#f) (define g$111$23310 '#f) (define g$111$23309 '#f) (define g$111$23308 '#f) (define g$111$23307 '#f) (define g$111$23306 '#f) (define g$111$23305 '#f) (define g$111$23304 '#f) (define g$111$23303 '#f) (define g$111$23302 '#f) (define g$111$23301 '#f) (define g$111$23300 '#f) (define g$111$23299 '#f) (define g$111$23298 '#f) (define g$111$23297 '#f) (define g$111$23296 '#f) (define g$111$23295 '#f) (define g$111$23294 '#f) (define g$111$23292 '#f) (define g$111$23291 '#f) (define g$111$23290 '#f) (define g$111$23288 '#f) (define g$111$23287 '#f) (define g$111$23286 '#f) (define g$111$23285 '#f) (define g$111$23284 '#f) (define g$111$23283 '#f) (define g$111$23282 '#f) (define g$111$23281 '#f) (define g$111$23280 '#f) (define g$111$23279 '#f) (define g$111$23278 '#f) (define g$111$23277 '#f) (define g$111$23276 '#f) (define g$111$23275 '#f) (define g$111$23274 '#f) (define g$111$23273 '#f) (define g$111$23272 '#f) (define g$111$23271 '#f) (define g$111$23270 '#f) (define g$111$23269 '#f) (define g$111$23268 '#f) (define g$111$23267 '#f) (define g$111$23266 '#f) (define g$111$23265 '#f) (define g$111$23264 '#f) (define g$111$23263 '#f) (define g$111$23262 '#f) (define g$111$23261 '#f) (define g$111$23260 '#f) (define g$111$23259 '#f) (define g$111$23258 '#f) (define g$111$23257 '#f) (define g$111$23256 '#f) (define g$111$23255 '#f) (define g$111$23254 '#f) (define g$111$23253 '#f) (define g$111$23252 '#f) (define g$111$23251 '#f) (define g$111$23250 '#f) (define g$111$23249 '#f) (define g$111$23248 '#f) (define g$111$23247 '#f) (define g$111$23246 '#f) (define g$111$23245 '#f) (define g$111$23244 '#f) (define g$111$23243 '#f) (define g$111$23242 '#f) (define g$111$23241 '#f) (define g$111$23240 '#f) (define g$111$23239 '#f) (define g$111$23238 '#f) (define g$111$23237 '#f) (define g$111$23236 '#f) (define g$111$23235 '#f) (define g$111$23234 '#f) (define g$111$23233 '#f) (define g$111$23232 '#f) (define g$111$23231 '#f) (define g$111$23230 '#f) (define g$111$23229 '#f) (define g$111$23228 '#f) (define g$111$23227 '#f) (define g$111$23226 '#f) (define g$111$23225 '#f) (define g$111$23224 '#f) (define g$111$23223 '#f) (define g$111$23222 '#f) (define g$111$23221 '#f) (define g$111$23220 '#f) (define g$111$23219 '#f) (define g$111$23218 '#f) (define g$111$23217 '#f) (define g$111$23216 '#f) (define g$111$23215 '#f) (define g$111$23214 '#f) (define g$111$23213 '#f) (define g$111$23212 '#f) (define g$111$23211 '#f) (define g$111$23210 '#f) (define g$111$23209 '#f) (define g$111$23208 '#f) (define g$111$23207 '#f) (define g$111$23206 '#f) (define g$111$23205 '#f) (define g$111$23204 '#f) (define g$111$23203 '#f) (define g$111$23202 '#f) (define g$111$23201 '#f) (define g$111$23200 '#f) (define g$111$23199 '#f) (define g$111$23198 '#f) (define g$111$23197 '#f) (define g$111$23196 '#f) (define g$111$23195 '#f) (define g$111$23194 '#f) (define g$111$23193 '#f) (define g$111$23192 '#f) (define g$111$23191 '#f) (define g$111$23190 '#f) (define g$111$23189 '#f) (define g$111$23188 '#f) (define g$111$23187 '#f) (define g$111$23186 '#f) (define g$111$23185 '#f) (define g$111$23184 '#f) (define g$111$23183 '#f) (define g$111$23182 '#f) (define g$111$23181 '#f) (define g$111$23180 '#f) (define g$111$23179 '#f) (define g$111$23178 '#f) (define g$111$23177 '#f) (define g$111$23176 '#f) (define g$111$23175 '#f) (define g$111$23174 '#f) (define g$111$23173 '#f) (define g$111$23172 '#f) (define g$111$23171 '#f) (define g$111$23170 '#f) (define g$111$23169 '#f) (define g$111$23168 '#f) ((lambda (g$111$13124 g$111$13126 g$111$13131 g$111$13133 g$111$13135 g$111$13137 g$111$13139 g$111$13142 g$111$13144 g$111$13146 g$111$13148 g$111$13150 g$111$13152 g$111$13154 g$111$13156 g$111$13158 g$111$13160 g$111$13162 g$111$13164 g$111$13166 g$111$13168 g$111$13170 g$111$13172 g$111$13175 g$111$13177 g$111$13179 g$111$13181 g$111$13183 g$111$13185 g$111$13187 g$111$13189 g$111$13191 g$111$13193 g$111$13195 g$111$13197 g$111$13199 g$111$13201 g$111$13203 g$111$13205 g$111$13207 g$111$13209 g$111$13211 g$111$13213 g$111$13215 g$111$13217 g$111$13219 g$111$13221 g$111$13223 g$111$13225 g$111$13227 g$111$13229 g$111$13231 g$111$13233 g$111$13235 g$111$13237 g$111$13239 g$111$13241 g$111$13243 g$111$13245 g$111$13247 g$111$13249 g$111$13251 g$111$13253 g$111$13255 g$111$13257 g$111$13271 g$111$13273 g$111$13275 g$111$13474 g$111$13476 g$111$13478 g$111$13480 g$111$13482 g$111$13484 g$111$13486 g$111$13488 g$111$13490 g$111$13492 g$111$13494 g$111$13496 g$111$13498 g$111$13500 g$111$13502 g$111$13504 g$111$13506 g$111$13508 g$111$13510 g$111$13512 g$111$13514 g$111$13516 g$111$13518 g$111$13520 g$111$13522 g$111$13524 g$111$13526 g$111$13528 g$111$13530 g$111$13532 g$111$13534 g$111$13536 g$111$13538 g$111$13540 g$111$13542 g$111$13544 g$111$13546 g$111$13548 g$111$13550 g$111$13552 g$111$13554 g$111$13556 g$111$13558 g$111$13560 g$111$13562 g$111$13564 g$111$13566 g$111$13568 g$111$13570 g$111$13572 g$111$13574 g$111$13576 g$111$13578 g$111$13580 g$111$13582 g$111$13584 g$111$13586 g$111$13588 g$111$13590 g$111$13592 g$111$13594 g$111$13596 g$111$13598 g$111$13600 g$111$13602 g$111$13604 g$111$13606 g$111$13608 g$111$13610 g$111$13612 g$111$13614 g$111$13616 g$111$13618 g$111$13620 g$111$13622 g$111$13624 g$111$13626 g$111$13628 g$111$13630 g$111$13632 g$111$13634 g$111$13636 g$111$13638 g$111$13640 g$111$13642 g$111$13644 g$111$13646 g$111$13648 g$111$13650 g$111$13652 g$111$13654 g$111$13656 g$111$13659 g$111$13661 g$111$13663 g$111$13665 g$111$13667 g$111$13669 g$111$13671 g$111$13673 g$111$13675 g$111$13677 g$111$13679 g$111$13681 g$111$13683 g$111$13685 g$111$13687 g$111$13689 g$111$13691 g$111$13693 g$111$13695 g$111$13697 g$111$13699 g$111$13701 g$111$13703 g$111$13705 g$111$13707 g$111$13709 g$111$13711 g$111$13713 g$111$13715) (begin (set! g$111$13124 (lambda (g$111$13717 g$111$13718) (if (memq g$111$13717 g$111$13718) g$111$13718 (cons g$111$13717 g$111$13718)))) (set! g$111$13126 (lambda (g$111$13721 g$111$13722) (if (null? g$111$13721) g$111$13722 (if (memq (car g$111$13721) g$111$13722) (g$111$13126 (cdr g$111$13721) g$111$13722) (cons (car g$111$13721) (g$111$13126 (cdr g$111$13721) g$111$13722)))))) (set! g$111$13131 '(top)) (set! g$111$13133 (lambda (g$111$13725) (memq 'top g$111$13725))) (set! g$111$13135 (lambda (g$111$13727) (if (symbol? g$111$13727) (gensym g$111$13727) (if (g$111$13177 g$111$13727) (g$111$13135 (g$111$13227 g$111$13727)) (error 'gen-lexical '"BUG: invalid arg" g$111$13727))))) (set! g$111$13137 (lambda (g$111$13729) (g$111$13135 g$111$13729))) (set! g$111$13139 (lambda (g$111$13731) (gensym))) (set! g$111$13142 (lambda (g$111$13733 g$111$13734 g$111$13735 g$111$13736) (vector 'g$111$13141 g$111$13733 g$111$13734 g$111$13735 g$111$13736))) (set! g$111$13144 (lambda (g$111$13741) (if (vector? g$111$13741) (if (= (vector-length g$111$13741) (+ '1 (length '(sym* mark** label* sealed/freq)))) (begin '#f (eq? (vector-ref g$111$13741 '0) 'g$111$13141)) '#f) '#f))) (set! g$111$13146 (lambda (g$111$13743) (if (g$111$13144 g$111$13743) (vector-ref g$111$13743 '1) (error 'rib-sym* '"~s is not of type ~s" g$111$13743 'rib)))) (set! g$111$13148 (lambda (g$111$13745) (if (g$111$13144 g$111$13745) (vector-ref g$111$13745 '2) (error 'rib-mark** '"~s is not of type ~s" g$111$13745 'rib)))) (set! g$111$13150 (lambda (g$111$13747) (if (g$111$13144 g$111$13747) (vector-ref g$111$13747 '3) (error 'rib-label* '"~s is not of type ~s" g$111$13747 'rib)))) (set! g$111$13152 (lambda (g$111$13749) (if (g$111$13144 g$111$13749) (vector-ref g$111$13749 '4) (error 'rib-sealed/freq '"~s is not of type ~s" g$111$13749 'rib)))) (set! g$111$13154 (lambda (g$111$13751 g$111$13752) (if (g$111$13144 g$111$13751) (vector-set! g$111$13751 '1 g$111$13752) (error 'set-rib-sym*! '"~s is not of type ~s" g$111$13751 'rib)))) (set! g$111$13156 (lambda (g$111$13755 g$111$13756) (if (g$111$13144 g$111$13755) (vector-set! g$111$13755 '2 g$111$13756) (error 'set-rib-mark**! '"~s is not of type ~s" g$111$13755 'rib)))) (set! g$111$13158 (lambda (g$111$13759 g$111$13760) (if (g$111$13144 g$111$13759) (vector-set! g$111$13759 '3 g$111$13760) (error 'set-rib-label*! '"~s is not of type ~s" g$111$13759 'rib)))) (set! g$111$13160 (lambda (g$111$13763 g$111$13764) (if (g$111$13144 g$111$13763) (vector-set! g$111$13763 '4 g$111$13764) (error 'set-rib-sealed/freq! '"~s is not of type ~s" g$111$13763 'rib)))) (set! g$111$13162 (lambda () (g$111$13142 '() '() '() '#f))) (set! g$111$13164 (lambda (g$111$13767 g$111$13768 g$111$13769) ((lambda (g$111$13773) (begin (set! g$111$13773 (lambda (g$111$13775 g$111$13776 g$111$13777 g$111$13778) (if (pair? g$111$13777) (begin '#f ((lambda (g$111$13783) (if g$111$13783 g$111$13783 (begin '#f (g$111$13773 g$111$13775 g$111$13776 (cdr g$111$13777) (cdr g$111$13778))))) (if (eq? g$111$13775 (car g$111$13777)) (begin '#f (g$111$13229 g$111$13776 (car g$111$13778))) '#f))) '#f))) (begin (if (g$111$13152 g$111$13767) (error 'extend-rib! '"rib is sealed" g$111$13767) (void)) ((lambda (g$111$13785 g$111$13786) ((lambda (g$111$13789) (begin (if (if (memq g$111$13785 (g$111$13146 g$111$13767)) (begin '#f (g$111$13773 g$111$13785 g$111$13786 g$111$13789 (g$111$13148 g$111$13767))) '#f) (error 'expander '"cannot redefine" (g$111$13243 g$111$13768 '())) (void)) (g$111$13154 g$111$13767 (cons g$111$13785 g$111$13789)) (g$111$13156 g$111$13767 (cons g$111$13786 (g$111$13148 g$111$13767))) (g$111$13158 g$111$13767 (cons g$111$13769 (g$111$13150 g$111$13767))))) (g$111$13146 g$111$13767))) (g$111$13227 g$111$13768) (g$111$13181 g$111$13768))))) '#f))) (set! g$111$13166 (lambda (g$111$13791) ((lambda (g$111$13793) (if (null? g$111$13793) (void) ((lambda (g$111$13795) (begin (g$111$13154 g$111$13791 g$111$13795) (g$111$13156 g$111$13791 (list->vector (g$111$13148 g$111$13791))) (g$111$13158 g$111$13791 (list->vector (g$111$13150 g$111$13791))) (g$111$13160 g$111$13791 (make-vector (vector-length g$111$13795) '0)))) (list->vector g$111$13793)))) (g$111$13146 g$111$13791)))) (set! g$111$13168 (lambda (g$111$13797) (if (g$111$13152 g$111$13797) (begin (g$111$13160 g$111$13797 '#f) (g$111$13154 g$111$13797 (vector->list (g$111$13146 g$111$13797))) (g$111$13156 g$111$13797 (vector->list (g$111$13148 g$111$13797))) (g$111$13158 g$111$13797 (vector->list (g$111$13150 g$111$13797)))) (void)))) (set! g$111$13170 (lambda (g$111$13799 g$111$13800) ((lambda (g$111$13803) ((lambda (g$111$13805) ((lambda (g$111$13807) (begin (vector-set! g$111$13803 g$111$13807 (+ g$111$13805 '1)) (if (= g$111$13807 g$111$13800) (void) ((lambda (g$111$13809 g$111$13810 g$111$13811) (begin ((lambda (g$111$13815) (begin (vector-set! g$111$13809 g$111$13800 (vector-ref g$111$13809 g$111$13807)) (vector-set! g$111$13809 g$111$13807 g$111$13815))) (vector-ref g$111$13809 g$111$13800)) ((lambda (g$111$13817) (begin (vector-set! g$111$13810 g$111$13800 (vector-ref g$111$13810 g$111$13807)) (vector-set! g$111$13810 g$111$13807 g$111$13817))) (vector-ref g$111$13810 g$111$13800)) ((lambda (g$111$13819) (begin (vector-set! g$111$13811 g$111$13800 (vector-ref g$111$13811 g$111$13807)) (vector-set! g$111$13811 g$111$13807 g$111$13819))) (vector-ref g$111$13811 g$111$13800)))) (g$111$13146 g$111$13799) (g$111$13148 g$111$13799) (g$111$13150 g$111$13799))))) (letrec ((g$111$13821 (lambda (g$111$13823) (if (zero? g$111$13823) '0 ((lambda (g$111$13825) (if (= g$111$13805 (vector-ref g$111$13803 g$111$13825)) (g$111$13821 g$111$13825) g$111$13823)) (- g$111$13823 '1)))))) (g$111$13821 g$111$13800)))) (vector-ref g$111$13803 g$111$13800))) (g$111$13152 g$111$13799)))) (set! g$111$13172 (lambda (g$111$13827 g$111$13828) (g$111$13142 (map g$111$13227 g$111$13827) (map g$111$13181 g$111$13827) g$111$13828 '#f))) (set! g$111$13175 (lambda (g$111$13831 g$111$13832 g$111$13833) (vector 'g$111$13174 g$111$13831 g$111$13832 g$111$13833))) (set! g$111$13177 (lambda (g$111$13837) (if (vector? g$111$13837) (if (= (vector-length g$111$13837) (+ '1 (length '(expr mark* subst*)))) (begin '#f (eq? (vector-ref g$111$13837 '0) 'g$111$13174)) '#f) '#f))) (set! g$111$13179 (lambda (g$111$13839) (if (g$111$13177 g$111$13839) (vector-ref g$111$13839 '1) (error 'stx-expr '"~s is not of type ~s" g$111$13839 'stx)))) (set! g$111$13181 (lambda (g$111$13841) (if (g$111$13177 g$111$13841) (vector-ref g$111$13841 '2) (error 'stx-mark* '"~s is not of type ~s" g$111$13841 'stx)))) (set! g$111$13183 (lambda (g$111$13843) (if (g$111$13177 g$111$13843) (vector-ref g$111$13843 '3) (error 'stx-subst* '"~s is not of type ~s" g$111$13843 'stx)))) (set! g$111$13185 (lambda (g$111$13845 g$111$13846) (if (g$111$13177 g$111$13845) (vector-set! g$111$13845 '1 g$111$13846) (error 'set-stx-expr! '"~s is not of type ~s" g$111$13845 'stx)))) (set! g$111$13187 (lambda (g$111$13849 g$111$13850) (if (g$111$13177 g$111$13849) (vector-set! g$111$13849 '2 g$111$13850) (error 'set-stx-mark*! '"~s is not of type ~s" g$111$13849 'stx)))) (set! g$111$13189 (lambda (g$111$13853 g$111$13854) (if (g$111$13177 g$111$13853) (vector-set! g$111$13853 '3 g$111$13854) (error 'set-stx-subst*! '"~s is not of type ~s" g$111$13853 'stx)))) (set! g$111$13191 (lambda (g$111$13857 g$111$13858) (g$111$13175 g$111$13858 (g$111$13181 g$111$13857) (g$111$13183 g$111$13857)))) (set! g$111$13193 (lambda () (string '#\m))) (set! g$111$13195 '#f) (set! g$111$13197 not) (set! g$111$13199 (lambda (g$111$13861 g$111$13862 g$111$13863) ((lambda (g$111$13867) (begin (set! g$111$13867 (lambda (g$111$13869 g$111$13870) (letrec ((g$111$13873 (lambda (g$111$13875 g$111$13876) (if (null? g$111$13876) (cdr g$111$13870) (cons g$111$13875 (g$111$13873 (car g$111$13876) (cdr g$111$13876))))))) (g$111$13873 (car g$111$13869) (cdr g$111$13869))))) ((lambda (g$111$13879 g$111$13880) (if (if (not (null? g$111$13861)) (if (not (null? g$111$13879)) (begin '#f (g$111$13197 (car g$111$13879))) '#f) '#f) (values (g$111$13867 g$111$13861 g$111$13879) (g$111$13867 g$111$13862 g$111$13880)) (values (append g$111$13861 g$111$13879) (append g$111$13862 g$111$13880)))) (g$111$13181 g$111$13863) (g$111$13183 g$111$13863)))) '#f))) (set! g$111$13201 (lambda (g$111$13883 g$111$13884 g$111$13885) (if (g$111$13177 g$111$13883) (call-with-values (lambda () (g$111$13199 g$111$13884 g$111$13885 g$111$13883)) (lambda (g$111$13889 g$111$13890) (g$111$13175 (g$111$13179 g$111$13883) g$111$13889 g$111$13890))) (g$111$13175 g$111$13883 g$111$13884 g$111$13885)))) (set! g$111$13203 (lambda (g$111$13893 g$111$13894) (g$111$13201 g$111$13894 (list g$111$13893) '(shift)))) (set! g$111$13205 (lambda (g$111$13897 g$111$13898) (g$111$13201 g$111$13898 '() (list g$111$13897)))) (set! g$111$13207 (lambda (g$111$13901 g$111$13902) (if (g$111$13177 g$111$13901) (g$111$13207 (g$111$13179 g$111$13901) g$111$13902) (g$111$13902 g$111$13901)))) (set! g$111$13209 (lambda (g$111$13905) (if (g$111$13177 g$111$13905) ((lambda (g$111$13907 g$111$13908 g$111$13909) (map (lambda (g$111$13913) (g$111$13201 g$111$13913 g$111$13908 g$111$13909)) g$111$13907)) (g$111$13209 (g$111$13179 g$111$13905)) (g$111$13181 g$111$13905) (g$111$13183 g$111$13905)) (if (vector? g$111$13905) (vector->list g$111$13905) (error 'syntax-vector->list '"not a syntax vector" g$111$13905))))) (set! g$111$13211 (lambda (g$111$13915) (g$111$13207 g$111$13915 pair?))) (set! g$111$13213 (lambda (g$111$13917) (g$111$13207 g$111$13917 vector?))) (set! g$111$13215 (lambda (g$111$13919) (g$111$13207 g$111$13919 null?))) (set! g$111$13217 (lambda (g$111$13921) ((lambda (g$111$13923) (if g$111$13923 g$111$13923 (begin '#f (if (g$111$13211 g$111$13921) (begin '#f (g$111$13217 (g$111$13223 g$111$13921))) '#f)))) (g$111$13215 g$111$13921)))) (set! g$111$13219 (lambda (g$111$13925) (if (g$111$13177 g$111$13925) (g$111$13201 (g$111$13219 (g$111$13179 g$111$13925)) (g$111$13181 g$111$13925) (g$111$13183 g$111$13925)) (if (pair? g$111$13925) (car g$111$13925) (error 'syntax-car '"not a pair" g$111$13925))))) (set! g$111$13221 (lambda (g$111$13927) (if (g$111$13211 g$111$13927) (cons (g$111$13219 g$111$13927) (g$111$13221 (g$111$13223 g$111$13927))) (if (g$111$13215 g$111$13927) '() (error 'syntax->list '"invalid argument" g$111$13927))))) (set! g$111$13223 (lambda (g$111$13929) (if (g$111$13177 g$111$13929) (g$111$13201 (g$111$13223 (g$111$13179 g$111$13929)) (g$111$13181 g$111$13929) (g$111$13183 g$111$13929)) (if (pair? g$111$13929) (cdr g$111$13929) (error 'syntax-cdr '"not a pair" g$111$13929))))) (set! g$111$13225 (lambda (g$111$13931) (g$111$13207 g$111$13931 symbol?))) (set! g$111$13227 (lambda (g$111$13933) (if (g$111$13177 g$111$13933) (g$111$13227 (g$111$13179 g$111$13933)) (if (symbol? g$111$13933) g$111$13933 (error 'id->sym '"not an id" g$111$13933))))) (set! g$111$13229 (lambda (g$111$13935 g$111$13936) ((lambda (g$111$13939) (if g$111$13939 g$111$13939 (begin '#f (if (pair? g$111$13935) (if (pair? g$111$13936) (if (eq? (car g$111$13935) (car g$111$13936)) (begin '#f (g$111$13229 (cdr g$111$13935) (cdr g$111$13936))) '#f) '#f) '#f)))) (if (null? g$111$13935) (begin '#f (null? g$111$13936)) '#f)))) (set! g$111$13231 (lambda (g$111$13941 g$111$13942) (if (eq? (g$111$13227 g$111$13941) (g$111$13227 g$111$13942)) (begin '#f (g$111$13229 (g$111$13181 g$111$13941) (g$111$13181 g$111$13942))) '#f))) (set! g$111$13233 (lambda (g$111$13945 g$111$13946) ((lambda (g$111$13949 g$111$13950) (if ((lambda (g$111$13953) (if g$111$13953 g$111$13953 (begin '#f g$111$13950))) g$111$13949) (eq? g$111$13949 g$111$13950) (eq? (g$111$13227 g$111$13945) (g$111$13227 g$111$13946)))) (g$111$13247 g$111$13945) (g$111$13247 g$111$13946)))) (set! g$111$13235 (lambda (g$111$13955) (if (for-all g$111$13225 g$111$13955) (begin '#f (g$111$13237 g$111$13955)) '#f))) (set! g$111$13237 (lambda (g$111$13957) ((lambda (g$111$13959) (if g$111$13959 g$111$13959 (begin '#f (if (not (g$111$13239 (car g$111$13957) (cdr g$111$13957))) (begin '#f (g$111$13237 (cdr g$111$13957))) '#f)))) (null? g$111$13957)))) (set! g$111$13239 (lambda (g$111$13961 g$111$13962) (if (pair? g$111$13962) (begin '#f ((lambda (g$111$13965) (if g$111$13965 g$111$13965 (begin '#f (g$111$13239 g$111$13961 (cdr g$111$13962))))) (g$111$13231 g$111$13961 (car g$111$13962)))) '#f))) (set! g$111$13241 (lambda (g$111$13967) ((lambda (g$111$13969) (if g$111$13969 g$111$13969 ((lambda (g$111$13971) (if g$111$13971 g$111$13971 ((lambda (g$111$13973) (if g$111$13973 g$111$13973 (begin '#f (boolean? g$111$13967)))) (char? g$111$13967)))) (string? g$111$13967)))) (number? g$111$13967)))) (set! g$111$13243 (lambda (g$111$13975 g$111$13976) (if (g$111$13133 g$111$13976) g$111$13975 (letrec ((g$111$13979 (lambda (g$111$13981) (if (g$111$13177 g$111$13981) (g$111$13243 (g$111$13179 g$111$13981) (g$111$13181 g$111$13981)) (if (pair? g$111$13981) ((lambda (g$111$13983 g$111$13984) (if (if (eq? g$111$13983 (car g$111$13981)) (begin '#f (eq? g$111$13984 (cdr g$111$13981))) '#f) g$111$13981 (cons g$111$13983 g$111$13984))) (g$111$13979 (car g$111$13981)) (g$111$13979 (cdr g$111$13981))) (if (vector? g$111$13981) ((lambda (g$111$13987) ((lambda (g$111$13989) (if (for-all eq? g$111$13987 g$111$13989) g$111$13981 (list->vector g$111$13989))) (map g$111$13979 g$111$13987))) (vector->list g$111$13981)) g$111$13981)))))) (g$111$13979 g$111$13975))))) (set! g$111$13245 (lambda (g$111$13991) (g$111$13243 g$111$13991 '()))) (set! g$111$13247 (lambda (g$111$13993) ((lambda (g$111$13995) (letrec ((g$111$13997 (lambda (g$111$13999 g$111$14000) (if (null? g$111$13999) (g$111$13713 g$111$13995) (if (eq? (car g$111$13999) 'shift) (g$111$13997 (cdr g$111$13999) (cdr g$111$14000)) ((lambda (g$111$14003) (if (g$111$13152 g$111$14003) ((lambda (g$111$14005) (letrec ((g$111$14007 (lambda (g$111$14009 g$111$14010) (if (= g$111$14009 g$111$14010) (g$111$13997 (cdr g$111$13999) g$111$14000) (if (if (eq? (vector-ref g$111$14005 g$111$14009) g$111$13995) (begin '#f (g$111$13229 g$111$14000 (vector-ref (g$111$13148 g$111$14003) g$111$14009))) '#f) ((lambda (g$111$14013) (begin (g$111$13170 g$111$14003 g$111$14009) g$111$14013)) (vector-ref (g$111$13150 g$111$14003) g$111$14009)) (g$111$14007 (+ g$111$14009 '1) g$111$14010)))))) (g$111$14007 '0 (vector-length g$111$14005)))) (g$111$13146 g$111$14003)) (letrec ((g$111$14015 (lambda (g$111$14017 g$111$14018 g$111$14019) (if (null? g$111$14017) (g$111$13997 (cdr g$111$13999) g$111$14000) (if (if (eq? (car g$111$14017) g$111$13995) (begin '#f (g$111$13229 (car g$111$14018) g$111$14000)) '#f) (car g$111$14019) (g$111$14015 (cdr g$111$14017) (cdr g$111$14018) (cdr g$111$14019))))))) (g$111$14015 (g$111$13146 g$111$14003) (g$111$13148 g$111$14003) (g$111$13150 g$111$14003))))) (car g$111$13999))))))) (g$111$13997 (g$111$13183 g$111$13993) (g$111$13181 g$111$13993)))) (g$111$13227 g$111$13993)))) (set! g$111$13249 (lambda (g$111$14023 g$111$14024) ((lambda (g$111$14027) (if g$111$14027 ((lambda (g$111$14029) (if (if (pair? g$111$14029) (begin '#f (eq? (car g$111$14029) '$core-rtd)) '#f) (cons '$rtd (map g$111$13512 (cdr g$111$14029))) g$111$14029)) g$111$14027) ((lambda (g$111$14031) (if g$111$14031 (cdr g$111$14031) '(displaced-lexical . #f))) (assq g$111$14023 g$111$14024)))) (g$111$12831 g$111$14023)))) (set! g$111$13251 cons) (set! g$111$13253 car) (set! g$111$13255 cdr) (set! g$111$13257 (lambda (g$111$14033 g$111$14034) (if (g$111$13225 g$111$14033) ((lambda (g$111$14037) ((lambda (g$111$14039) ((lambda (g$111$14041) ((lambda (g$111$14043) ((lambda () (begin (if g$111$14039 (void) (error 'expander '"unbound identifier" (g$111$13243 g$111$14033 '()))) ((lambda (g$111$14045) (if (memv g$111$14045 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd)) (values g$111$14043 (g$111$13255 g$111$14041) g$111$14037) (values 'other '#f '#f))) g$111$14043))))) (g$111$13253 g$111$14041))) (g$111$13249 g$111$14039 g$111$14034))) (g$111$13247 g$111$14037))) g$111$14033) (if (g$111$13211 g$111$14033) ((lambda (g$111$14046) (if (g$111$13225 g$111$14046) ((lambda (g$111$14048) ((lambda (g$111$14050) ((lambda (g$111$14052) ((lambda () (begin (if g$111$14048 (void) (error 'expander '"unbound identifier" (g$111$13243 g$111$14033 '()))) ((lambda (g$111$14054) (if (memv g$111$14054 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import $core-rtd)) (values g$111$14052 (g$111$13255 g$111$14050) g$111$14046) (values 'call '#f '#f))) g$111$14052))))) (g$111$13253 g$111$14050))) (g$111$13249 g$111$14048 g$111$14034))) (g$111$13247 g$111$14046)) (values 'call '#f '#f))) (g$111$13219 g$111$14033)) ((lambda (g$111$14055) (if (g$111$13241 g$111$14055) (values 'constant g$111$14055 '#f) (values 'other '#f '#f))) (g$111$13245 g$111$14033)))))) (set! g$111$13271 (lambda (g$111$14057 g$111$14058) (if (procedure? g$111$14057) (cons* 'local-macro g$111$14057 g$111$14058) (if (if (pair? g$111$14057) (if (eq? (car g$111$14057) 'macro!) (begin '#f (procedure? (cdr g$111$14057))) '#f) '#f) (cons* 'local-macro! (cdr g$111$14057) g$111$14058) (if (if (pair? g$111$14057) (begin '#f (eq? (car g$111$14057) '$rtd)) '#f) g$111$14057 (error 'expand '"invalid transformer" g$111$14057)))))) (set! g$111$13273 (lambda (g$111$14061) (if (procedure? g$111$14061) (cons 'macro! g$111$14061) (error 'make-variable-transformer '"not a procedure" g$111$14061)))) (set! g$111$13275 (lambda (g$111$14063) (g$111$13271 (eval-core (g$111$12392 g$111$14063)) g$111$14063))) (set! g$111$13474 (lambda (g$111$14065) ((lambda (g$111$14067) ((lambda (g$111$14069) (if (if g$111$14069 (begin '#f (apply (lambda (g$111$14071 g$111$14072 g$111$14073 g$111$14074) (g$111$13225 g$111$14071)) g$111$14069)) '#f) (apply (lambda (g$111$14079 g$111$14080 g$111$14081 g$111$14082) (values g$111$14079 (cons 'defun (cons g$111$14080 (cons g$111$14081 g$111$14082))))) g$111$14069) ((lambda (g$111$14087) ((lambda (g$111$14089) (if (if g$111$14089 (begin '#f (apply (lambda (g$111$14091 g$111$14092) (g$111$13225 g$111$14091)) g$111$14089)) '#f) (apply (lambda (g$111$14095 g$111$14096) (values g$111$14095 (cons 'expr g$111$14096))) g$111$14089) (error 'expander '"invalid syntax" (g$111$13243 g$111$14087 '())))) ((lambda (g$111$14099) (if (g$111$13211 g$111$14099) (begin '#f ((lambda (g$111$14101) (if g$111$14101 (begin '#f ((lambda (g$111$14103) (if g$111$14103 (begin '#f (append g$111$14101 g$111$14103)) '#f)) ((lambda (g$111$14105) (if (g$111$13211 g$111$14105) (begin '#f ((lambda (g$111$14107) (if g$111$14107 (begin '#f ((lambda (g$111$14109) (if g$111$14109 (begin '#f (append g$111$14107 g$111$14109)) '#f)) ((lambda (g$111$14111) (if (g$111$13211 g$111$14111) (begin '#f ((lambda (g$111$14113) (if g$111$14113 (begin '#f ((lambda (g$111$14115) (if g$111$14115 (begin '#f (append g$111$14113 g$111$14115)) '#f)) ((lambda (g$111$14117) (if (equal? (g$111$13245 g$111$14117) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$14111)))) '#f)) ((lambda (g$111$14119) (list g$111$14119)) (g$111$13219 g$111$14111)))) '#f)) (g$111$13223 g$111$14105)))) '#f)) ((lambda (g$111$14121) (list g$111$14121)) (g$111$13219 g$111$14105)))) '#f)) (g$111$13223 g$111$14099)))) '#f)) ((lambda (g$111$14123) '()) (g$111$13219 g$111$14099)))) '#f)) g$111$14087))) g$111$14067))) ((lambda (g$111$14125) (if (g$111$13211 g$111$14125) (begin '#f ((lambda (g$111$14127) (if g$111$14127 (begin '#f ((lambda (g$111$14129) (if g$111$14129 (begin '#f (append g$111$14127 g$111$14129)) '#f)) ((lambda (g$111$14131) (if (g$111$13211 g$111$14131) (begin '#f ((lambda (g$111$14133) (if g$111$14133 (begin '#f ((lambda (g$111$14135) (if g$111$14135 (begin '#f (append g$111$14133 g$111$14135)) '#f)) ((lambda (g$111$14137) (if (g$111$13211 g$111$14137) (begin '#f ((lambda (g$111$14139) (if g$111$14139 (begin '#f ((lambda (g$111$14141) (if g$111$14141 (begin '#f (append g$111$14139 g$111$14141)) '#f)) ((letrec ((g$111$14143 (lambda (g$111$14145) (if (g$111$13211 g$111$14145) ((lambda (g$111$14147) (if g$111$14147 (begin '#f ((lambda (g$111$14149) (if g$111$14149 (begin '#f (map cons g$111$14147 g$111$14149)) '#f)) (g$111$14143 (g$111$13223 g$111$14145)))) '#f)) ((lambda (g$111$14151) (list g$111$14151)) (g$111$13219 g$111$14145))) (if (g$111$13215 g$111$14145) (list (begin 'b* '())) '#f))))) g$111$14143) (g$111$13223 g$111$14137)))) '#f)) ((lambda (g$111$14153) (list g$111$14153)) (g$111$13219 g$111$14137)))) '#f)) (g$111$13223 g$111$14131)))) '#f)) ((lambda (g$111$14155) (if (g$111$13211 g$111$14155) (begin '#f ((lambda (g$111$14157) (if g$111$14157 (begin '#f ((lambda (g$111$14159) (if g$111$14159 (begin '#f (append g$111$14157 g$111$14159)) '#f)) ((lambda (g$111$14161) (list g$111$14161)) (g$111$13223 g$111$14155)))) '#f)) ((lambda (g$111$14163) (list g$111$14163)) (g$111$13219 g$111$14155)))) '#f)) (g$111$13219 g$111$14131)))) '#f)) (g$111$13223 g$111$14125)))) '#f)) ((lambda (g$111$14165) '()) (g$111$13219 g$111$14125)))) '#f)) g$111$14067))) g$111$14065))) (set! g$111$13476 (lambda (g$111$14167) ((lambda (g$111$14169) ((lambda (g$111$14171) (if (if g$111$14171 (begin '#f (apply (lambda (g$111$14173 g$111$14174) (g$111$13225 g$111$14173)) g$111$14171)) '#f) (apply (lambda (g$111$14177 g$111$14178) (values g$111$14177 g$111$14178)) g$111$14171) (error 'expander '"invalid syntax" (g$111$13243 g$111$14169 '())))) ((lambda (g$111$14181) (if (g$111$13211 g$111$14181) (begin '#f ((lambda (g$111$14183) (if g$111$14183 (begin '#f ((lambda (g$111$14185) (if g$111$14185 (begin '#f (append g$111$14183 g$111$14185)) '#f)) ((lambda (g$111$14187) (if (g$111$13211 g$111$14187) (begin '#f ((lambda (g$111$14189) (if g$111$14189 (begin '#f ((lambda (g$111$14191) (if g$111$14191 (begin '#f (append g$111$14189 g$111$14191)) '#f)) ((lambda (g$111$14193) (if (g$111$13211 g$111$14193) (begin '#f ((lambda (g$111$14195) (if g$111$14195 (begin '#f ((lambda (g$111$14197) (if g$111$14197 (begin '#f (append g$111$14195 g$111$14197)) '#f)) ((lambda (g$111$14199) (if (equal? (g$111$13245 g$111$14199) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$14193)))) '#f)) ((lambda (g$111$14201) (list g$111$14201)) (g$111$13219 g$111$14193)))) '#f)) (g$111$13223 g$111$14187)))) '#f)) ((lambda (g$111$14203) (list g$111$14203)) (g$111$13219 g$111$14187)))) '#f)) (g$111$13223 g$111$14181)))) '#f)) ((lambda (g$111$14205) '()) (g$111$13219 g$111$14181)))) '#f)) g$111$14169))) g$111$14167))) (set! g$111$13478 (lambda (g$111$14207) ((lambda (g$111$14209) ((lambda (g$111$14211) (if g$111$14211 ((lambda (g$111$14213) ((lambda (g$111$14215 g$111$14216) (g$111$13205 (g$111$13142 (list g$111$14215) (list g$111$13131) (list g$111$14216) '#f) (g$111$13201 g$111$14207 g$111$13131 '()))) (car g$111$14213) (cdr g$111$14213))) g$111$14211) (g$111$13201 g$111$14207 g$111$13131 '()))) (assq g$111$14207 g$111$14209))) (g$111$12864 (g$111$12839 '(psyntax system $all)))))) (set! g$111$13480 (lambda (g$111$14219 g$111$14220 g$111$14221) (cons (cons* g$111$14219 'lexical g$111$14220) g$111$14221))) (set! g$111$13482 (lambda (g$111$14225 g$111$14226 g$111$14227) (if (null? g$111$14225) g$111$14227 (g$111$13482 (cdr g$111$14225) (cdr g$111$14226) (g$111$13480 (car g$111$14225) (car g$111$14226) g$111$14227))))) (set! g$111$13484 (lambda (g$111$14231 g$111$14232 g$111$14233) ((lambda (g$111$14237) ((lambda (g$111$14239) (if (if g$111$14239 (begin '#f (apply (lambda (g$111$14241 g$111$14242 g$111$14243 g$111$14244) '#t) g$111$14239)) '#f) (apply (lambda (g$111$14249 g$111$14250 g$111$14251 g$111$14252) ((lambda (g$111$14257) ((lambda (g$111$14259 g$111$14260) ((lambda (g$111$14263 g$111$14264 g$111$14265) (letrec ((g$111$14269 (lambda (g$111$14271 g$111$14272) (if (null? g$111$14271) (g$111$13612 (g$111$13205 (g$111$13172 g$111$14263 g$111$14264) (cons g$111$14251 g$111$14252)) (g$111$13482 g$111$14264 g$111$14265 g$111$14232) g$111$14233) (list '(primitive call-with-values) (g$111$13114 '#f '() (car g$111$14272)) (g$111$13114 '#f (car g$111$14271) (g$111$14269 (cdr g$111$14271) (cdr g$111$14272)))))))) (g$111$14269 g$111$14259 g$111$14257))) (apply append g$111$14249) (apply append g$111$14260) (apply append g$111$14259))) (map (lambda (g$111$14275) (map g$111$13135 g$111$14275)) g$111$14249) (map (lambda (g$111$14277) (map g$111$13139 g$111$14277)) g$111$14249))) (g$111$13592 g$111$14250 g$111$14232 g$111$14233))) g$111$14239) (error 'expander '"invalid syntax" (g$111$13243 g$111$14237 '())))) ((lambda (g$111$14279) (if (g$111$13211 g$111$14279) (begin '#f ((lambda (g$111$14281) (if g$111$14281 (begin '#f ((lambda (g$111$14283) (if g$111$14283 (begin '#f (append g$111$14281 g$111$14283)) '#f)) ((lambda (g$111$14285) (if (g$111$13211 g$111$14285) (begin '#f ((lambda (g$111$14287) (if g$111$14287 (begin '#f ((lambda (g$111$14289) (if g$111$14289 (begin '#f (append g$111$14287 g$111$14289)) '#f)) ((lambda (g$111$14291) (if (g$111$13211 g$111$14291) (begin '#f ((lambda (g$111$14293) (if g$111$14293 (begin '#f ((lambda (g$111$14295) (if g$111$14295 (begin '#f (append g$111$14293 g$111$14295)) '#f)) ((letrec ((g$111$14297 (lambda (g$111$14299) (if (g$111$13211 g$111$14299) ((lambda (g$111$14301) (if g$111$14301 (begin '#f ((lambda (g$111$14303) (if g$111$14303 (begin '#f (map cons g$111$14301 g$111$14303)) '#f)) (g$111$14297 (g$111$13223 g$111$14299)))) '#f)) ((lambda (g$111$14305) (list g$111$14305)) (g$111$13219 g$111$14299))) (if (g$111$13215 g$111$14299) (list (begin 'b* '())) '#f))))) g$111$14297) (g$111$13223 g$111$14291)))) '#f)) ((lambda (g$111$14307) (list g$111$14307)) (g$111$13219 g$111$14291)))) '#f)) (g$111$13223 g$111$14285)))) '#f)) ((letrec ((g$111$14309 (lambda (g$111$14311) (if (g$111$13211 g$111$14311) ((lambda (g$111$14313) (if g$111$14313 (begin '#f ((lambda (g$111$14315) (if g$111$14315 (begin '#f (map cons g$111$14313 g$111$14315)) '#f)) (g$111$14309 (g$111$13223 g$111$14311)))) '#f)) ((lambda (g$111$14317) (if (g$111$13211 g$111$14317) (begin '#f ((lambda (g$111$14319) (if g$111$14319 (begin '#f ((lambda (g$111$14321) (if g$111$14321 (begin '#f (append g$111$14319 g$111$14321)) '#f)) ((lambda (g$111$14323) (if (g$111$13211 g$111$14323) (begin '#f ((lambda (g$111$14325) (if g$111$14325 (begin '#f ((lambda (g$111$14327) (if g$111$14327 (begin '#f (append g$111$14325 g$111$14327)) '#f)) ((lambda (g$111$14329) (if (equal? (g$111$13245 g$111$14329) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$14323)))) '#f)) ((lambda (g$111$14331) (list g$111$14331)) (g$111$13219 g$111$14323)))) '#f)) (g$111$13223 g$111$14317)))) '#f)) ((letrec ((g$111$14333 (lambda (g$111$14335) (if (g$111$13211 g$111$14335) ((lambda (g$111$14337) (if g$111$14337 (begin '#f ((lambda (g$111$14339) (if g$111$14339 (begin '#f (map cons g$111$14337 g$111$14339)) '#f)) (g$111$14333 (g$111$13223 g$111$14335)))) '#f)) ((lambda (g$111$14341) (list g$111$14341)) (g$111$13219 g$111$14335))) (if (g$111$13215 g$111$14335) (list (begin 'fml** '())) '#f))))) g$111$14333) (g$111$13219 g$111$14317)))) '#f)) (g$111$13219 g$111$14311))) (if (g$111$13215 g$111$14311) (list (begin 'fml** '()) (begin 'rhs* '())) '#f))))) g$111$14309) (g$111$13219 g$111$14285)))) '#f)) (g$111$13223 g$111$14279)))) '#f)) ((lambda (g$111$14343) '()) (g$111$13219 g$111$14279)))) '#f)) g$111$14237))) g$111$14231))) (set! g$111$13486 (lambda (g$111$14345 g$111$14346 g$111$14347 g$111$14348) ((lambda (g$111$14353) ((lambda (g$111$14355) (if (if g$111$14355 (begin '#f (apply (lambda (g$111$14357 g$111$14358 g$111$14359 g$111$14360) '#t) g$111$14355)) '#f) (apply (lambda (g$111$14365 g$111$14366 g$111$14367 g$111$14368) (if (not (g$111$13235 g$111$14365)) (error 'expander '"invalid identifiers" (g$111$13243 g$111$14345 '())) ((lambda (g$111$14373 g$111$14374) ((lambda (g$111$14377 g$111$14378) ((lambda (g$111$14381 g$111$14382) (g$111$14348 '#f g$111$14373 g$111$14382 g$111$14381)) (g$111$13612 (g$111$13205 g$111$14377 (cons g$111$14367 g$111$14368)) g$111$14378 g$111$14347) (g$111$13592 (map (lambda (g$111$14385) (g$111$13205 g$111$14377 g$111$14385)) g$111$14366) g$111$14378 g$111$14347))) (g$111$13172 g$111$14365 g$111$14374) (g$111$13482 g$111$14374 g$111$14373 g$111$14346))) (map g$111$13135 g$111$14365) (map g$111$13139 g$111$14365)))) g$111$14355) (error 'expander '"invalid syntax" (g$111$13243 g$111$14353 '())))) ((lambda (g$111$14387) (if (g$111$13211 g$111$14387) (begin '#f ((lambda (g$111$14389) (if g$111$14389 (begin '#f ((lambda (g$111$14391) (if g$111$14391 (begin '#f (append g$111$14389 g$111$14391)) '#f)) ((lambda (g$111$14393) (if (g$111$13211 g$111$14393) (begin '#f ((lambda (g$111$14395) (if g$111$14395 (begin '#f ((lambda (g$111$14397) (if g$111$14397 (begin '#f (append g$111$14395 g$111$14397)) '#f)) ((lambda (g$111$14399) (if (g$111$13211 g$111$14399) (begin '#f ((lambda (g$111$14401) (if g$111$14401 (begin '#f ((lambda (g$111$14403) (if g$111$14403 (begin '#f (append g$111$14401 g$111$14403)) '#f)) ((letrec ((g$111$14405 (lambda (g$111$14407) (if (g$111$13211 g$111$14407) ((lambda (g$111$14409) (if g$111$14409 (begin '#f ((lambda (g$111$14411) (if g$111$14411 (begin '#f (map cons g$111$14409 g$111$14411)) '#f)) (g$111$14405 (g$111$13223 g$111$14407)))) '#f)) ((lambda (g$111$14413) (list g$111$14413)) (g$111$13219 g$111$14407))) (if (g$111$13215 g$111$14407) (list (begin 'b* '())) '#f))))) g$111$14405) (g$111$13223 g$111$14399)))) '#f)) ((lambda (g$111$14415) (list g$111$14415)) (g$111$13219 g$111$14399)))) '#f)) (g$111$13223 g$111$14393)))) '#f)) ((letrec ((g$111$14417 (lambda (g$111$14419) (if (g$111$13211 g$111$14419) ((lambda (g$111$14421) (if g$111$14421 (begin '#f ((lambda (g$111$14423) (if g$111$14423 (begin '#f (map cons g$111$14421 g$111$14423)) '#f)) (g$111$14417 (g$111$13223 g$111$14419)))) '#f)) ((lambda (g$111$14425) (if (g$111$13211 g$111$14425) (begin '#f ((lambda (g$111$14427) (if g$111$14427 (begin '#f ((lambda (g$111$14429) (if g$111$14429 (begin '#f (append g$111$14427 g$111$14429)) '#f)) ((lambda (g$111$14431) (if (g$111$13211 g$111$14431) (begin '#f ((lambda (g$111$14433) (if g$111$14433 (begin '#f ((lambda (g$111$14435) (if g$111$14435 (begin '#f (append g$111$14433 g$111$14435)) '#f)) ((lambda (g$111$14437) (if (equal? (g$111$13245 g$111$14437) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$14431)))) '#f)) ((lambda (g$111$14439) (list g$111$14439)) (g$111$13219 g$111$14431)))) '#f)) (g$111$13223 g$111$14425)))) '#f)) ((lambda (g$111$14441) (list g$111$14441)) (g$111$13219 g$111$14425)))) '#f)) (g$111$13219 g$111$14419))) (if (g$111$13215 g$111$14419) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$111$14417) (g$111$13219 g$111$14393)))) '#f)) (g$111$13223 g$111$14387)))) '#f)) ((lambda (g$111$14443) '()) (g$111$13219 g$111$14387)))) '#f)) g$111$14353))) g$111$14345))) (set! g$111$13488 (lambda (g$111$14445 g$111$14446 g$111$14447) (g$111$13486 g$111$14445 g$111$14446 g$111$14447 g$111$13106))) (set! g$111$13490 (lambda (g$111$14451 g$111$14452 g$111$14453) (g$111$13486 g$111$14451 g$111$14452 g$111$14453 g$111$13105))) (set! g$111$13492 (lambda (g$111$14457 g$111$14458 g$111$14459) ((lambda (g$111$14463) ((lambda (g$111$14465) (if (if g$111$14465 (begin '#f (apply (lambda (g$111$14467) (g$111$13225 g$111$14467)) g$111$14465)) '#f) (apply (lambda (g$111$14469) ((lambda (g$111$14471) ((lambda (g$111$14473) ((lambda (g$111$14475) ((lambda () (begin (if g$111$14471 (void) (error 'expander '"unbound identifier" (g$111$13243 g$111$14457 '()))) (if (if (eq? g$111$14475 '$rtd) (begin '#f (not (list? (g$111$13255 g$111$14473)))) '#f) (void) (error 'expander '"invalid type" (g$111$13243 g$111$14457 '()))) (list 'quote (g$111$13255 g$111$14473)))))) (g$111$13253 g$111$14473))) (g$111$13249 g$111$14471 g$111$14458))) (g$111$13247 g$111$14469))) g$111$14465) (error 'expander '"invalid syntax" (g$111$13243 g$111$14463 '())))) ((lambda (g$111$14477) (if (g$111$13211 g$111$14477) (begin '#f ((lambda (g$111$14479) (if g$111$14479 (begin '#f ((lambda (g$111$14481) (if g$111$14481 (begin '#f (append g$111$14479 g$111$14481)) '#f)) ((lambda (g$111$14483) (if (g$111$13211 g$111$14483) (begin '#f ((lambda (g$111$14485) (if g$111$14485 (begin '#f ((lambda (g$111$14487) (if g$111$14487 (begin '#f (append g$111$14485 g$111$14487)) '#f)) ((lambda (g$111$14489) (if (equal? (g$111$13245 g$111$14489) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$14483)))) '#f)) ((lambda (g$111$14491) (list g$111$14491)) (g$111$13219 g$111$14483)))) '#f)) (g$111$13223 g$111$14477)))) '#f)) ((lambda (g$111$14493) '()) (g$111$13219 g$111$14477)))) '#f)) g$111$14463))) g$111$14457))) (set! g$111$13494 (lambda (g$111$14495 g$111$14496 g$111$14497) ((lambda (g$111$14501) ((lambda (g$111$14503) (if (if g$111$14503 (begin '#f (apply (lambda (g$111$14505) (g$111$13225 g$111$14505)) g$111$14503)) '#f) (apply (lambda (g$111$14507) ((lambda (g$111$14509) ((lambda (g$111$14511) ((lambda (g$111$14513) ((lambda () (begin (if g$111$14509 (void) (error 'expander '"unbound identifier" (g$111$13243 g$111$14495 '()))) (if (if (eq? g$111$14513 '$rtd) (begin '#f (list? (g$111$13255 g$111$14511))) '#f) (void) (error 'expander '"invalid type" (g$111$13243 g$111$14495 '()))) (g$111$13596 (car (g$111$13255 g$111$14511)) g$111$14496 g$111$14497))))) (g$111$13253 g$111$14511))) (g$111$13249 g$111$14509 g$111$14496))) (g$111$13247 g$111$14507))) g$111$14503) (error 'expander '"invalid syntax" (g$111$13243 g$111$14501 '())))) ((lambda (g$111$14515) (if (g$111$13211 g$111$14515) (begin '#f ((lambda (g$111$14517) (if g$111$14517 (begin '#f ((lambda (g$111$14519) (if g$111$14519 (begin '#f (append g$111$14517 g$111$14519)) '#f)) ((lambda (g$111$14521) (if (g$111$13211 g$111$14521) (begin '#f ((lambda (g$111$14523) (if g$111$14523 (begin '#f ((lambda (g$111$14525) (if g$111$14525 (begin '#f (append g$111$14523 g$111$14525)) '#f)) ((lambda (g$111$14527) (if (equal? (g$111$13245 g$111$14527) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$14521)))) '#f)) ((lambda (g$111$14529) (list g$111$14529)) (g$111$13219 g$111$14521)))) '#f)) (g$111$13223 g$111$14515)))) '#f)) ((lambda (g$111$14531) '()) (g$111$13219 g$111$14515)))) '#f)) g$111$14501))) g$111$14495))) (set! g$111$13496 (lambda (g$111$14533 g$111$14534 g$111$14535) ((lambda (g$111$14539) ((lambda (g$111$14541) (if (if g$111$14541 (begin '#f (apply (lambda (g$111$14543) (g$111$13225 g$111$14543)) g$111$14541)) '#f) (apply (lambda (g$111$14545) ((lambda (g$111$14547) ((lambda (g$111$14549) ((lambda (g$111$14551) ((lambda () (begin (if g$111$14547 (void) (error 'expander '"unbound identifier" (g$111$13243 g$111$14533 '()))) (if (if (eq? g$111$14551 '$rtd) (begin '#f (list? (g$111$13255 g$111$14549))) '#f) (void) (error 'expander '"invalid type" (g$111$13243 g$111$14533 '()))) (g$111$13596 (cadr (g$111$13255 g$111$14549)) g$111$14534 g$111$14535))))) (g$111$13253 g$111$14549))) (g$111$13249 g$111$14547 g$111$14534))) (g$111$13247 g$111$14545))) g$111$14541) (error 'expander '"invalid syntax" (g$111$13243 g$111$14539 '())))) ((lambda (g$111$14553) (if (g$111$13211 g$111$14553) (begin '#f ((lambda (g$111$14555) (if g$111$14555 (begin '#f ((lambda (g$111$14557) (if g$111$14557 (begin '#f (append g$111$14555 g$111$14557)) '#f)) ((lambda (g$111$14559) (if (g$111$13211 g$111$14559) (begin '#f ((lambda (g$111$14561) (if g$111$14561 (begin '#f ((lambda (g$111$14563) (if g$111$14563 (begin '#f (append g$111$14561 g$111$14563)) '#f)) ((lambda (g$111$14565) (if (equal? (g$111$13245 g$111$14565) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$14559)))) '#f)) ((lambda (g$111$14567) (list g$111$14567)) (g$111$13219 g$111$14559)))) '#f)) (g$111$13223 g$111$14553)))) '#f)) ((lambda (g$111$14569) '()) (g$111$13219 g$111$14553)))) '#f)) g$111$14539))) g$111$14533))) (set! g$111$13498 (lambda (g$111$14571 g$111$14572 g$111$14573) ((lambda (g$111$14577) ((lambda (g$111$14579) (if (if g$111$14579 (begin '#f (apply (lambda (g$111$14581 g$111$14582 g$111$14583) '#t) g$111$14579)) '#f) (apply (lambda (g$111$14587 g$111$14588 g$111$14589) (list 'if (g$111$13596 g$111$14587 g$111$14572 g$111$14573) (g$111$13108 '#f (g$111$13592 (cons g$111$14588 g$111$14589) g$111$14572 g$111$14573)) (g$111$13107))) g$111$14579) (error 'expander '"invalid syntax" (g$111$13243 g$111$14577 '())))) ((lambda (g$111$14593) (if (g$111$13211 g$111$14593) (begin '#f ((lambda (g$111$14595) (if g$111$14595 (begin '#f ((lambda (g$111$14597) (if g$111$14597 (begin '#f (append g$111$14595 g$111$14597)) '#f)) ((lambda (g$111$14599) (if (g$111$13211 g$111$14599) (begin '#f ((lambda (g$111$14601) (if g$111$14601 (begin '#f ((lambda (g$111$14603) (if g$111$14603 (begin '#f (append g$111$14601 g$111$14603)) '#f)) ((lambda (g$111$14605) (if (g$111$13211 g$111$14605) (begin '#f ((lambda (g$111$14607) (if g$111$14607 (begin '#f ((lambda (g$111$14609) (if g$111$14609 (begin '#f (append g$111$14607 g$111$14609)) '#f)) ((letrec ((g$111$14611 (lambda (g$111$14613) (if (g$111$13211 g$111$14613) ((lambda (g$111$14615) (if g$111$14615 (begin '#f ((lambda (g$111$14617) (if g$111$14617 (begin '#f (map cons g$111$14615 g$111$14617)) '#f)) (g$111$14611 (g$111$13223 g$111$14613)))) '#f)) ((lambda (g$111$14619) (list g$111$14619)) (g$111$13219 g$111$14613))) (if (g$111$13215 g$111$14613) (list (begin 'e* '())) '#f))))) g$111$14611) (g$111$13223 g$111$14605)))) '#f)) ((lambda (g$111$14621) (list g$111$14621)) (g$111$13219 g$111$14605)))) '#f)) (g$111$13223 g$111$14599)))) '#f)) ((lambda (g$111$14623) (list g$111$14623)) (g$111$13219 g$111$14599)))) '#f)) (g$111$13223 g$111$14593)))) '#f)) ((lambda (g$111$14625) '()) (g$111$13219 g$111$14593)))) '#f)) g$111$14577))) g$111$14571))) (set! g$111$13500 (lambda (g$111$14627 g$111$14628 g$111$14629) ((lambda (g$111$14633) ((lambda (g$111$14635) (if (if g$111$14635 (begin '#f (apply (lambda (g$111$14637 g$111$14638 g$111$14639) '#t) g$111$14635)) '#f) (apply (lambda (g$111$14643 g$111$14644 g$111$14645) (list 'if (g$111$13596 g$111$14643 g$111$14628 g$111$14629) (g$111$13107) (g$111$13108 '#f (g$111$13592 (cons g$111$14644 g$111$14645) g$111$14628 g$111$14629)))) g$111$14635) (error 'expander '"invalid syntax" (g$111$13243 g$111$14633 '())))) ((lambda (g$111$14649) (if (g$111$13211 g$111$14649) (begin '#f ((lambda (g$111$14651) (if g$111$14651 (begin '#f ((lambda (g$111$14653) (if g$111$14653 (begin '#f (append g$111$14651 g$111$14653)) '#f)) ((lambda (g$111$14655) (if (g$111$13211 g$111$14655) (begin '#f ((lambda (g$111$14657) (if g$111$14657 (begin '#f ((lambda (g$111$14659) (if g$111$14659 (begin '#f (append g$111$14657 g$111$14659)) '#f)) ((lambda (g$111$14661) (if (g$111$13211 g$111$14661) (begin '#f ((lambda (g$111$14663) (if g$111$14663 (begin '#f ((lambda (g$111$14665) (if g$111$14665 (begin '#f (append g$111$14663 g$111$14665)) '#f)) ((letrec ((g$111$14667 (lambda (g$111$14669) (if (g$111$13211 g$111$14669) ((lambda (g$111$14671) (if g$111$14671 (begin '#f ((lambda (g$111$14673) (if g$111$14673 (begin '#f (map cons g$111$14671 g$111$14673)) '#f)) (g$111$14667 (g$111$13223 g$111$14669)))) '#f)) ((lambda (g$111$14675) (list g$111$14675)) (g$111$13219 g$111$14669))) (if (g$111$13215 g$111$14669) (list (begin 'e* '())) '#f))))) g$111$14667) (g$111$13223 g$111$14661)))) '#f)) ((lambda (g$111$14677) (list g$111$14677)) (g$111$13219 g$111$14661)))) '#f)) (g$111$13223 g$111$14655)))) '#f)) ((lambda (g$111$14679) (list g$111$14679)) (g$111$13219 g$111$14655)))) '#f)) (g$111$13223 g$111$14649)))) '#f)) ((lambda (g$111$14681) '()) (g$111$13219 g$111$14649)))) '#f)) g$111$14633))) g$111$14627))) (set! g$111$13502 (lambda (g$111$14683 g$111$14684 g$111$14685) ((lambda (g$111$14689) ((lambda (g$111$14691) (if (if g$111$14691 (begin '#f (apply (lambda (g$111$14693 g$111$14694 g$111$14695) '#t) g$111$14691)) '#f) (apply (lambda (g$111$14699 g$111$14700 g$111$14701) (list 'if (g$111$13596 g$111$14699 g$111$14684 g$111$14685) (g$111$13596 g$111$14700 g$111$14684 g$111$14685) (g$111$13596 g$111$14701 g$111$14684 g$111$14685))) g$111$14691) ((lambda (g$111$14705) ((lambda (g$111$14707) (if (if g$111$14707 (begin '#f (apply (lambda (g$111$14709 g$111$14710) '#t) g$111$14707)) '#f) (apply (lambda (g$111$14713 g$111$14714) (list 'if (g$111$13596 g$111$14713 g$111$14684 g$111$14685) (g$111$13596 g$111$14714 g$111$14684 g$111$14685) (g$111$13107))) g$111$14707) (error 'expander '"invalid syntax" (g$111$13243 g$111$14705 '())))) ((lambda (g$111$14717) (if (g$111$13211 g$111$14717) (begin '#f ((lambda (g$111$14719) (if g$111$14719 (begin '#f ((lambda (g$111$14721) (if g$111$14721 (begin '#f (append g$111$14719 g$111$14721)) '#f)) ((lambda (g$111$14723) (if (g$111$13211 g$111$14723) (begin '#f ((lambda (g$111$14725) (if g$111$14725 (begin '#f ((lambda (g$111$14727) (if g$111$14727 (begin '#f (append g$111$14725 g$111$14727)) '#f)) ((lambda (g$111$14729) (if (g$111$13211 g$111$14729) (begin '#f ((lambda (g$111$14731) (if g$111$14731 (begin '#f ((lambda (g$111$14733) (if g$111$14733 (begin '#f (append g$111$14731 g$111$14733)) '#f)) ((lambda (g$111$14735) (if (equal? (g$111$13245 g$111$14735) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$14729)))) '#f)) ((lambda (g$111$14737) (list g$111$14737)) (g$111$13219 g$111$14729)))) '#f)) (g$111$13223 g$111$14723)))) '#f)) ((lambda (g$111$14739) (list g$111$14739)) (g$111$13219 g$111$14723)))) '#f)) (g$111$13223 g$111$14717)))) '#f)) ((lambda (g$111$14741) '()) (g$111$13219 g$111$14717)))) '#f)) g$111$14705))) g$111$14689))) ((lambda (g$111$14743) (if (g$111$13211 g$111$14743) (begin '#f ((lambda (g$111$14745) (if g$111$14745 (begin '#f ((lambda (g$111$14747) (if g$111$14747 (begin '#f (append g$111$14745 g$111$14747)) '#f)) ((lambda (g$111$14749) (if (g$111$13211 g$111$14749) (begin '#f ((lambda (g$111$14751) (if g$111$14751 (begin '#f ((lambda (g$111$14753) (if g$111$14753 (begin '#f (append g$111$14751 g$111$14753)) '#f)) ((lambda (g$111$14755) (if (g$111$13211 g$111$14755) (begin '#f ((lambda (g$111$14757) (if g$111$14757 (begin '#f ((lambda (g$111$14759) (if g$111$14759 (begin '#f (append g$111$14757 g$111$14759)) '#f)) ((lambda (g$111$14761) (if (g$111$13211 g$111$14761) (begin '#f ((lambda (g$111$14763) (if g$111$14763 (begin '#f ((lambda (g$111$14765) (if g$111$14765 (begin '#f (append g$111$14763 g$111$14765)) '#f)) ((lambda (g$111$14767) (if (equal? (g$111$13245 g$111$14767) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$14761)))) '#f)) ((lambda (g$111$14769) (list g$111$14769)) (g$111$13219 g$111$14761)))) '#f)) (g$111$13223 g$111$14755)))) '#f)) ((lambda (g$111$14771) (list g$111$14771)) (g$111$13219 g$111$14755)))) '#f)) (g$111$13223 g$111$14749)))) '#f)) ((lambda (g$111$14773) (list g$111$14773)) (g$111$13219 g$111$14749)))) '#f)) (g$111$13223 g$111$14743)))) '#f)) ((lambda (g$111$14775) '()) (g$111$13219 g$111$14743)))) '#f)) g$111$14689))) g$111$14683))) (set! g$111$13504 (lambda (g$111$14777 g$111$14778 g$111$14779) ((lambda (g$111$14783 g$111$14785) (begin (set! g$111$14783 (lambda (g$111$14893 g$111$14894 g$111$14895) ((lambda (g$111$14899) ((lambda (g$111$14901) (if (if g$111$14901 (begin '#f (apply (lambda (g$111$14903 g$111$14904 g$111$14905) '#t) g$111$14901)) '#f) (apply (lambda (g$111$14909 g$111$14910 g$111$14911) (list 'if (list '(primitive memv) g$111$14893 (list 'quote (g$111$13245 g$111$14909))) (g$111$13108 '#f (g$111$13592 (cons g$111$14910 g$111$14911) g$111$14778 g$111$14779)) g$111$14895)) g$111$14901) ((lambda (g$111$14915) ((lambda (g$111$14917) (if (if g$111$14917 (begin '#f (apply (lambda (g$111$14919) '#t) g$111$14917)) '#f) (apply (lambda (g$111$14921) (error 'expander '"invalid syntax" (g$111$13245 g$111$14777))) g$111$14917) (error 'expander '"invalid syntax" (g$111$13243 g$111$14915 '())))) ((lambda (g$111$14923) (list g$111$14923)) g$111$14915))) g$111$14899))) ((lambda (g$111$14925) (if (g$111$13211 g$111$14925) (begin '#f ((lambda (g$111$14927) (if g$111$14927 (begin '#f ((lambda (g$111$14929) (if g$111$14929 (begin '#f (append g$111$14927 g$111$14929)) '#f)) ((lambda (g$111$14931) (if (g$111$13211 g$111$14931) (begin '#f ((lambda (g$111$14933) (if g$111$14933 (begin '#f ((lambda (g$111$14935) (if g$111$14935 (begin '#f (append g$111$14933 g$111$14935)) '#f)) ((letrec ((g$111$14937 (lambda (g$111$14939) (if (g$111$13211 g$111$14939) ((lambda (g$111$14941) (if g$111$14941 (begin '#f ((lambda (g$111$14943) (if g$111$14943 (begin '#f (map cons g$111$14941 g$111$14943)) '#f)) (g$111$14937 (g$111$13223 g$111$14939)))) '#f)) ((lambda (g$111$14945) (list g$111$14945)) (g$111$13219 g$111$14939))) (if (g$111$13215 g$111$14939) (list (begin 'e* '())) '#f))))) g$111$14937) (g$111$13223 g$111$14931)))) '#f)) ((lambda (g$111$14947) (list g$111$14947)) (g$111$13219 g$111$14931)))) '#f)) (g$111$13223 g$111$14925)))) '#f)) ((letrec ((g$111$14949 (lambda (g$111$14951) (if (g$111$13211 g$111$14951) ((lambda (g$111$14953) (if g$111$14953 (begin '#f ((lambda (g$111$14955) (if g$111$14955 (begin '#f (map cons g$111$14953 g$111$14955)) '#f)) (g$111$14949 (g$111$13223 g$111$14951)))) '#f)) ((lambda (g$111$14957) (list g$111$14957)) (g$111$13219 g$111$14951))) (if (g$111$13215 g$111$14951) (list (begin 'd* '())) '#f))))) g$111$14949) (g$111$13219 g$111$14925)))) '#f)) g$111$14899))) g$111$14894))) (set! g$111$14785 (lambda (g$111$14787 g$111$14788) ((lambda (g$111$14791) ((lambda (g$111$14793) (if (if g$111$14793 (begin '#f (apply (lambda (g$111$14795 g$111$14796 g$111$14797) '#t) g$111$14793)) '#f) (apply (lambda (g$111$14801 g$111$14802 g$111$14803) (g$111$14783 g$111$14787 g$111$14788 (g$111$13107))) g$111$14793) ((lambda (g$111$14807) ((lambda (g$111$14809) (if (if g$111$14809 (begin '#f (apply (lambda (g$111$14811 g$111$14812 g$111$14813) '#t) g$111$14809)) '#f) (apply (lambda (g$111$14817 g$111$14818 g$111$14819) (if (if (g$111$13225 g$111$14817) (begin '#f (g$111$13233 g$111$14817 (g$111$13478 'else))) '#f) (g$111$13108 '#f (g$111$13592 (cons g$111$14818 g$111$14819) g$111$14778 g$111$14779)) (error 'expander '"invalid syntax" (g$111$13245 g$111$14777)))) g$111$14809) ((lambda (g$111$14823) ((lambda (g$111$14825) (if (if g$111$14825 (begin '#f (apply (lambda (g$111$14827) '#t) g$111$14825)) '#f) (apply (lambda (g$111$14829) (error 'expander '"invalid syntax" (g$111$13245 g$111$14777))) g$111$14825) (error 'expander '"invalid syntax" (g$111$13243 g$111$14823 '())))) ((lambda (g$111$14831) (list g$111$14831)) g$111$14823))) g$111$14807))) ((lambda (g$111$14833) (if (g$111$13211 g$111$14833) (begin '#f ((lambda (g$111$14835) (if g$111$14835 (begin '#f ((lambda (g$111$14837) (if g$111$14837 (begin '#f (append g$111$14835 g$111$14837)) '#f)) ((lambda (g$111$14839) (if (g$111$13211 g$111$14839) (begin '#f ((lambda (g$111$14841) (if g$111$14841 (begin '#f ((lambda (g$111$14843) (if g$111$14843 (begin '#f (append g$111$14841 g$111$14843)) '#f)) ((letrec ((g$111$14845 (lambda (g$111$14847) (if (g$111$13211 g$111$14847) ((lambda (g$111$14849) (if g$111$14849 (begin '#f ((lambda (g$111$14851) (if g$111$14851 (begin '#f (map cons g$111$14849 g$111$14851)) '#f)) (g$111$14845 (g$111$13223 g$111$14847)))) '#f)) ((lambda (g$111$14853) (list g$111$14853)) (g$111$13219 g$111$14847))) (if (g$111$13215 g$111$14847) (list (begin 'x* '())) '#f))))) g$111$14845) (g$111$13223 g$111$14839)))) '#f)) ((lambda (g$111$14855) (list g$111$14855)) (g$111$13219 g$111$14839)))) '#f)) (g$111$13223 g$111$14833)))) '#f)) ((lambda (g$111$14857) (list g$111$14857)) (g$111$13219 g$111$14833)))) '#f)) g$111$14807))) g$111$14791))) ((lambda (g$111$14859) (if (g$111$13211 g$111$14859) (begin '#f ((lambda (g$111$14861) (if g$111$14861 (begin '#f ((lambda (g$111$14863) (if g$111$14863 (begin '#f (append g$111$14861 g$111$14863)) '#f)) ((lambda (g$111$14865) (if (g$111$13211 g$111$14865) (begin '#f ((lambda (g$111$14867) (if g$111$14867 (begin '#f ((lambda (g$111$14869) (if g$111$14869 (begin '#f (append g$111$14867 g$111$14869)) '#f)) ((letrec ((g$111$14871 (lambda (g$111$14873) (if (g$111$13211 g$111$14873) ((lambda (g$111$14875) (if g$111$14875 (begin '#f ((lambda (g$111$14877) (if g$111$14877 (begin '#f (map cons g$111$14875 g$111$14877)) '#f)) (g$111$14871 (g$111$13223 g$111$14873)))) '#f)) ((lambda (g$111$14879) (list g$111$14879)) (g$111$13219 g$111$14873))) (if (g$111$13215 g$111$14873) (list (begin 'e* '())) '#f))))) g$111$14871) (g$111$13223 g$111$14865)))) '#f)) ((lambda (g$111$14881) (list g$111$14881)) (g$111$13219 g$111$14865)))) '#f)) (g$111$13223 g$111$14859)))) '#f)) ((letrec ((g$111$14883 (lambda (g$111$14885) (if (g$111$13211 g$111$14885) ((lambda (g$111$14887) (if g$111$14887 (begin '#f ((lambda (g$111$14889) (if g$111$14889 (begin '#f (map cons g$111$14887 g$111$14889)) '#f)) (g$111$14883 (g$111$13223 g$111$14885)))) '#f)) ((lambda (g$111$14891) (list g$111$14891)) (g$111$13219 g$111$14885))) (if (g$111$13215 g$111$14885) (list (begin 'd* '())) '#f))))) g$111$14883) (g$111$13219 g$111$14859)))) '#f)) g$111$14791))) g$111$14788))) ((lambda (g$111$14959) ((lambda (g$111$14961) (if (if g$111$14961 (begin '#f (apply (lambda (g$111$14963) '#t) g$111$14961)) '#f) (apply (lambda (g$111$14965) (g$111$13108 '#f (list (g$111$13596 g$111$14965 g$111$14778 g$111$14779) (g$111$13107)))) g$111$14961) ((lambda (g$111$14967) ((lambda (g$111$14969) (if (if g$111$14969 (begin '#f (apply (lambda (g$111$14971 g$111$14972 g$111$14973) '#t) g$111$14969)) '#f) (apply (lambda (g$111$14977 g$111$14978 g$111$14979) ((lambda (g$111$14983) (g$111$13112 '#f (list g$111$14983) (list (g$111$13596 g$111$14977 g$111$14778 g$111$14779)) (letrec ((g$111$14985 (lambda (g$111$14987 g$111$14988) (if (null? g$111$14988) (g$111$14785 g$111$14983 g$111$14987) (g$111$14783 g$111$14983 g$111$14987 (g$111$14985 (car g$111$14988) (cdr g$111$14988))))))) (g$111$14985 g$111$14978 g$111$14979)))) (g$111$13135 't))) g$111$14969) (error 'expander '"invalid syntax" (g$111$13243 g$111$14967 '())))) ((lambda (g$111$14991) (if (g$111$13211 g$111$14991) (begin '#f ((lambda (g$111$14993) (if g$111$14993 (begin '#f ((lambda (g$111$14995) (if g$111$14995 (begin '#f (append g$111$14993 g$111$14995)) '#f)) ((lambda (g$111$14997) (if (g$111$13211 g$111$14997) (begin '#f ((lambda (g$111$14999) (if g$111$14999 (begin '#f ((lambda (g$111$15001) (if g$111$15001 (begin '#f (append g$111$14999 g$111$15001)) '#f)) ((lambda (g$111$15003) (if (g$111$13211 g$111$15003) (begin '#f ((lambda (g$111$15005) (if g$111$15005 (begin '#f ((lambda (g$111$15007) (if g$111$15007 (begin '#f (append g$111$15005 g$111$15007)) '#f)) ((letrec ((g$111$15009 (lambda (g$111$15011) (if (g$111$13211 g$111$15011) ((lambda (g$111$15013) (if g$111$15013 (begin '#f ((lambda (g$111$15015) (if g$111$15015 (begin '#f (map cons g$111$15013 g$111$15015)) '#f)) (g$111$15009 (g$111$13223 g$111$15011)))) '#f)) ((lambda (g$111$15017) (list g$111$15017)) (g$111$13219 g$111$15011))) (if (g$111$13215 g$111$15011) (list (begin 'cls* '())) '#f))))) g$111$15009) (g$111$13223 g$111$15003)))) '#f)) ((lambda (g$111$15019) (list g$111$15019)) (g$111$13219 g$111$15003)))) '#f)) (g$111$13223 g$111$14997)))) '#f)) ((lambda (g$111$15021) (list g$111$15021)) (g$111$13219 g$111$14997)))) '#f)) (g$111$13223 g$111$14991)))) '#f)) ((lambda (g$111$15023) '()) (g$111$13219 g$111$14991)))) '#f)) g$111$14967))) g$111$14959))) ((lambda (g$111$15025) (if (g$111$13211 g$111$15025) (begin '#f ((lambda (g$111$15027) (if g$111$15027 (begin '#f ((lambda (g$111$15029) (if g$111$15029 (begin '#f (append g$111$15027 g$111$15029)) '#f)) ((lambda (g$111$15031) (if (g$111$13211 g$111$15031) (begin '#f ((lambda (g$111$15033) (if g$111$15033 (begin '#f ((lambda (g$111$15035) (if g$111$15035 (begin '#f (append g$111$15033 g$111$15035)) '#f)) ((lambda (g$111$15037) (if (equal? (g$111$13245 g$111$15037) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$15031)))) '#f)) ((lambda (g$111$15039) (list g$111$15039)) (g$111$13219 g$111$15031)))) '#f)) (g$111$13223 g$111$15025)))) '#f)) ((lambda (g$111$15041) '()) (g$111$13219 g$111$15025)))) '#f)) g$111$14959))) g$111$14777))) '#f '#f))) (set! g$111$13506 (lambda (g$111$15043 g$111$15044 g$111$15045) ((lambda (g$111$15049) ((lambda (g$111$15051) (if (if g$111$15051 (begin '#f (apply (lambda (g$111$15053) '#t) g$111$15051)) '#f) (apply (lambda (g$111$15055) (list 'quote (g$111$13245 g$111$15055))) g$111$15051) (error 'expander '"invalid syntax" (g$111$13243 g$111$15049 '())))) ((lambda (g$111$15057) (if (g$111$13211 g$111$15057) (begin '#f ((lambda (g$111$15059) (if g$111$15059 (begin '#f ((lambda (g$111$15061) (if g$111$15061 (begin '#f (append g$111$15059 g$111$15061)) '#f)) ((lambda (g$111$15063) (if (g$111$13211 g$111$15063) (begin '#f ((lambda (g$111$15065) (if g$111$15065 (begin '#f ((lambda (g$111$15067) (if g$111$15067 (begin '#f (append g$111$15065 g$111$15067)) '#f)) ((lambda (g$111$15069) (if (equal? (g$111$13245 g$111$15069) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$15063)))) '#f)) ((lambda (g$111$15071) (list g$111$15071)) (g$111$13219 g$111$15063)))) '#f)) (g$111$13223 g$111$15057)))) '#f)) ((lambda (g$111$15073) '()) (g$111$13219 g$111$15057)))) '#f)) g$111$15049))) g$111$15043))) (set! g$111$13508 (lambda (g$111$15075 g$111$15076 g$111$15077) ((lambda (g$111$15081) ((lambda (g$111$15083) (if (if g$111$15083 (begin '#f (apply (lambda (g$111$15085 g$111$15086 g$111$15087) '#t) g$111$15083)) '#f) (apply (lambda (g$111$15091 g$111$15092 g$111$15093) (call-with-values (lambda () (g$111$13602 g$111$15091 (map cons g$111$15092 g$111$15093) g$111$15076 g$111$15077)) (lambda (g$111$15097 g$111$15098) (g$111$13113 '#f g$111$15097 g$111$15098)))) g$111$15083) (error 'expander '"invalid syntax" (g$111$13243 g$111$15081 '())))) ((lambda (g$111$15101) (if (g$111$13211 g$111$15101) (begin '#f ((lambda (g$111$15103) (if g$111$15103 (begin '#f ((lambda (g$111$15105) (if g$111$15105 (begin '#f (append g$111$15103 g$111$15105)) '#f)) ((letrec ((g$111$15107 (lambda (g$111$15109) (if (g$111$13211 g$111$15109) ((lambda (g$111$15111) (if g$111$15111 (begin '#f ((lambda (g$111$15113) (if g$111$15113 (begin '#f (map cons g$111$15111 g$111$15113)) '#f)) (g$111$15107 (g$111$13223 g$111$15109)))) '#f)) ((lambda (g$111$15115) (if (g$111$13211 g$111$15115) (begin '#f ((lambda (g$111$15117) (if g$111$15117 (begin '#f ((lambda (g$111$15119) (if g$111$15119 (begin '#f (append g$111$15117 g$111$15119)) '#f)) ((lambda (g$111$15121) (if (g$111$13211 g$111$15121) (begin '#f ((lambda (g$111$15123) (if g$111$15123 (begin '#f ((lambda (g$111$15125) (if g$111$15125 (begin '#f (append g$111$15123 g$111$15125)) '#f)) ((letrec ((g$111$15127 (lambda (g$111$15129) (if (g$111$13211 g$111$15129) ((lambda (g$111$15131) (if g$111$15131 (begin '#f ((lambda (g$111$15133) (if g$111$15133 (begin '#f (map cons g$111$15131 g$111$15133)) '#f)) (g$111$15127 (g$111$13223 g$111$15129)))) '#f)) ((lambda (g$111$15135) (list g$111$15135)) (g$111$13219 g$111$15129))) (if (g$111$13215 g$111$15129) (list (begin 'b** '())) '#f))))) g$111$15127) (g$111$13223 g$111$15121)))) '#f)) ((lambda (g$111$15137) (list g$111$15137)) (g$111$13219 g$111$15121)))) '#f)) (g$111$13223 g$111$15115)))) '#f)) ((lambda (g$111$15139) (list g$111$15139)) (g$111$13219 g$111$15115)))) '#f)) (g$111$13219 g$111$15109))) (if (g$111$13215 g$111$15109) (list (begin 'fmls* '()) (begin 'b* '()) (begin 'b** '())) '#f))))) g$111$15107) (g$111$13223 g$111$15101)))) '#f)) ((lambda (g$111$15141) '()) (g$111$13219 g$111$15101)))) '#f)) g$111$15081))) g$111$15075))) (set! g$111$13510 (lambda (g$111$15143 g$111$15144 g$111$15145) ((lambda (g$111$15149) ((lambda (g$111$15151) (if (if g$111$15151 (begin '#f (apply (lambda (g$111$15153 g$111$15154 g$111$15155) '#t) g$111$15151)) '#f) (apply (lambda (g$111$15159 g$111$15160 g$111$15161) (call-with-values (lambda () (g$111$13600 g$111$15159 (cons g$111$15160 g$111$15161) g$111$15144 g$111$15145)) (lambda (g$111$15165 g$111$15166) (g$111$13114 '#f g$111$15165 g$111$15166)))) g$111$15151) (error 'expander '"invalid syntax" (g$111$13243 g$111$15149 '())))) ((lambda (g$111$15169) (if (g$111$13211 g$111$15169) (begin '#f ((lambda (g$111$15171) (if g$111$15171 (begin '#f ((lambda (g$111$15173) (if g$111$15173 (begin '#f (append g$111$15171 g$111$15173)) '#f)) ((lambda (g$111$15175) (if (g$111$13211 g$111$15175) (begin '#f ((lambda (g$111$15177) (if g$111$15177 (begin '#f ((lambda (g$111$15179) (if g$111$15179 (begin '#f (append g$111$15177 g$111$15179)) '#f)) ((lambda (g$111$15181) (if (g$111$13211 g$111$15181) (begin '#f ((lambda (g$111$15183) (if g$111$15183 (begin '#f ((lambda (g$111$15185) (if g$111$15185 (begin '#f (append g$111$15183 g$111$15185)) '#f)) ((letrec ((g$111$15187 (lambda (g$111$15189) (if (g$111$13211 g$111$15189) ((lambda (g$111$15191) (if g$111$15191 (begin '#f ((lambda (g$111$15193) (if g$111$15193 (begin '#f (map cons g$111$15191 g$111$15193)) '#f)) (g$111$15187 (g$111$13223 g$111$15189)))) '#f)) ((lambda (g$111$15195) (list g$111$15195)) (g$111$13219 g$111$15189))) (if (g$111$13215 g$111$15189) (list (begin 'b* '())) '#f))))) g$111$15187) (g$111$13223 g$111$15181)))) '#f)) ((lambda (g$111$15197) (list g$111$15197)) (g$111$13219 g$111$15181)))) '#f)) (g$111$13223 g$111$15175)))) '#f)) ((lambda (g$111$15199) (list g$111$15199)) (g$111$13219 g$111$15175)))) '#f)) (g$111$13223 g$111$15169)))) '#f)) ((lambda (g$111$15201) '()) (g$111$13219 g$111$15169)))) '#f)) g$111$15149))) g$111$15143))) (set! g$111$13512 (lambda (g$111$15203) (g$111$13201 (letrec ((g$111$15205 (lambda (g$111$15207) (if (g$111$13177 g$111$15207) g$111$15207 (if (pair? g$111$15207) (cons (g$111$15205 (car g$111$15207)) (g$111$15205 (cdr g$111$15207))) (if (symbol? g$111$15207) (g$111$13478 g$111$15207) (if (vector? g$111$15207) (list->vector (map g$111$15205 (vector->list g$111$15207))) g$111$15207))))))) (g$111$15205 g$111$15203)) '() '()))) (set! g$111$13514 (lambda (g$111$15209) ((lambda (g$111$15211) ((lambda (g$111$15213) (if (if g$111$15213 (begin '#f (apply (lambda (g$111$15215 g$111$15216 g$111$15217 g$111$15218) '#t) g$111$15213)) '#f) (apply (lambda (g$111$15223 g$111$15224 g$111$15225 g$111$15226) (g$111$13512 (list 'syntax-case (cons 'list g$111$15224) '() (list g$111$15223 (cons 'begin (cons g$111$15225 g$111$15226)))))) g$111$15213) (error 'expander '"invalid syntax" (g$111$13243 g$111$15211 '())))) ((lambda (g$111$15231) (if (g$111$13211 g$111$15231) (begin '#f ((lambda (g$111$15233) (if g$111$15233 (begin '#f ((lambda (g$111$15235) (if g$111$15235 (begin '#f (append g$111$15233 g$111$15235)) '#f)) ((lambda (g$111$15237) (if (g$111$13211 g$111$15237) (begin '#f ((lambda (g$111$15239) (if g$111$15239 (begin '#f ((lambda (g$111$15241) (if g$111$15241 (begin '#f (append g$111$15239 g$111$15241)) '#f)) ((lambda (g$111$15243) (if (g$111$13211 g$111$15243) (begin '#f ((lambda (g$111$15245) (if g$111$15245 (begin '#f ((lambda (g$111$15247) (if g$111$15247 (begin '#f (append g$111$15245 g$111$15247)) '#f)) ((letrec ((g$111$15249 (lambda (g$111$15251) (if (g$111$13211 g$111$15251) ((lambda (g$111$15253) (if g$111$15253 (begin '#f ((lambda (g$111$15255) (if g$111$15255 (begin '#f (map cons g$111$15253 g$111$15255)) '#f)) (g$111$15249 (g$111$13223 g$111$15251)))) '#f)) ((lambda (g$111$15257) (list g$111$15257)) (g$111$13219 g$111$15251))) (if (g$111$13215 g$111$15251) (list (begin 'b* '())) '#f))))) g$111$15249) (g$111$13223 g$111$15243)))) '#f)) ((lambda (g$111$15259) (list g$111$15259)) (g$111$13219 g$111$15243)))) '#f)) (g$111$13223 g$111$15237)))) '#f)) ((letrec ((g$111$15261 (lambda (g$111$15263) (if (g$111$13211 g$111$15263) ((lambda (g$111$15265) (if g$111$15265 (begin '#f ((lambda (g$111$15267) (if g$111$15267 (begin '#f (map cons g$111$15265 g$111$15267)) '#f)) (g$111$15261 (g$111$13223 g$111$15263)))) '#f)) ((lambda (g$111$15269) (if (g$111$13211 g$111$15269) (begin '#f ((lambda (g$111$15271) (if g$111$15271 (begin '#f ((lambda (g$111$15273) (if g$111$15273 (begin '#f (append g$111$15271 g$111$15273)) '#f)) ((lambda (g$111$15275) (if (g$111$13211 g$111$15275) (begin '#f ((lambda (g$111$15277) (if g$111$15277 (begin '#f ((lambda (g$111$15279) (if g$111$15279 (begin '#f (append g$111$15277 g$111$15279)) '#f)) ((lambda (g$111$15281) (if (equal? (g$111$13245 g$111$15281) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$15275)))) '#f)) ((lambda (g$111$15283) (list g$111$15283)) (g$111$13219 g$111$15275)))) '#f)) (g$111$13223 g$111$15269)))) '#f)) ((lambda (g$111$15285) (list g$111$15285)) (g$111$13219 g$111$15269)))) '#f)) (g$111$13219 g$111$15263))) (if (g$111$13215 g$111$15263) (list (begin 'fml* '()) (begin 'expr* '())) '#f))))) g$111$15261) (g$111$13219 g$111$15237)))) '#f)) (g$111$13223 g$111$15231)))) '#f)) ((lambda (g$111$15287) '()) (g$111$13219 g$111$15231)))) '#f)) g$111$15211))) g$111$15209))) (set! g$111$13516 (lambda (g$111$15289) ((lambda (g$111$15291) ((lambda (g$111$15293) (if (if g$111$15293 (begin '#f (apply (lambda (g$111$15295 g$111$15296 g$111$15297 g$111$15298) '#t) g$111$15293)) '#f) (apply (lambda (g$111$15303 g$111$15304 g$111$15305 g$111$15306) (if (g$111$13235 g$111$15303) (g$111$13512 (cons (cons 'lambda (cons g$111$15303 (cons g$111$15305 g$111$15306))) g$111$15304)) (error 'expander '"invalid bindings" (g$111$13243 g$111$15289 '())))) g$111$15293) ((lambda (g$111$15311) ((lambda (g$111$15313) (if (if g$111$15313 (begin '#f (apply (lambda (g$111$15315 g$111$15316 g$111$15317 g$111$15318 g$111$15319) (g$111$13225 g$111$15315)) g$111$15313)) '#f) (apply (lambda (g$111$15325 g$111$15326 g$111$15327 g$111$15328 g$111$15329) (if (g$111$13235 g$111$15326) (g$111$13512 (list 'letrec (list (list g$111$15325 (cons 'lambda (cons g$111$15326 (cons g$111$15328 g$111$15329))))) (cons g$111$15325 g$111$15327))) (error 'expander '"invalid syntax" (g$111$13243 g$111$15289 '())))) g$111$15313) (error 'expander '"invalid syntax" (g$111$13243 g$111$15311 '())))) ((lambda (g$111$15335) (if (g$111$13211 g$111$15335) (begin '#f ((lambda (g$111$15337) (if g$111$15337 (begin '#f ((lambda (g$111$15339) (if g$111$15339 (begin '#f (append g$111$15337 g$111$15339)) '#f)) ((lambda (g$111$15341) (if (g$111$13211 g$111$15341) (begin '#f ((lambda (g$111$15343) (if g$111$15343 (begin '#f ((lambda (g$111$15345) (if g$111$15345 (begin '#f (append g$111$15343 g$111$15345)) '#f)) ((lambda (g$111$15347) (if (g$111$13211 g$111$15347) (begin '#f ((lambda (g$111$15349) (if g$111$15349 (begin '#f ((lambda (g$111$15351) (if g$111$15351 (begin '#f (append g$111$15349 g$111$15351)) '#f)) ((lambda (g$111$15353) (if (g$111$13211 g$111$15353) (begin '#f ((lambda (g$111$15355) (if g$111$15355 (begin '#f ((lambda (g$111$15357) (if g$111$15357 (begin '#f (append g$111$15355 g$111$15357)) '#f)) ((letrec ((g$111$15359 (lambda (g$111$15361) (if (g$111$13211 g$111$15361) ((lambda (g$111$15363) (if g$111$15363 (begin '#f ((lambda (g$111$15365) (if g$111$15365 (begin '#f (map cons g$111$15363 g$111$15365)) '#f)) (g$111$15359 (g$111$13223 g$111$15361)))) '#f)) ((lambda (g$111$15367) (list g$111$15367)) (g$111$13219 g$111$15361))) (if (g$111$13215 g$111$15361) (list (begin 'b* '())) '#f))))) g$111$15359) (g$111$13223 g$111$15353)))) '#f)) ((lambda (g$111$15369) (list g$111$15369)) (g$111$13219 g$111$15353)))) '#f)) (g$111$13223 g$111$15347)))) '#f)) ((letrec ((g$111$15371 (lambda (g$111$15373) (if (g$111$13211 g$111$15373) ((lambda (g$111$15375) (if g$111$15375 (begin '#f ((lambda (g$111$15377) (if g$111$15377 (begin '#f (map cons g$111$15375 g$111$15377)) '#f)) (g$111$15371 (g$111$13223 g$111$15373)))) '#f)) ((lambda (g$111$15379) (if (g$111$13211 g$111$15379) (begin '#f ((lambda (g$111$15381) (if g$111$15381 (begin '#f ((lambda (g$111$15383) (if g$111$15383 (begin '#f (append g$111$15381 g$111$15383)) '#f)) ((lambda (g$111$15385) (if (g$111$13211 g$111$15385) (begin '#f ((lambda (g$111$15387) (if g$111$15387 (begin '#f ((lambda (g$111$15389) (if g$111$15389 (begin '#f (append g$111$15387 g$111$15389)) '#f)) ((lambda (g$111$15391) (if (equal? (g$111$13245 g$111$15391) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$15385)))) '#f)) ((lambda (g$111$15393) (list g$111$15393)) (g$111$13219 g$111$15385)))) '#f)) (g$111$13223 g$111$15379)))) '#f)) ((lambda (g$111$15395) (list g$111$15395)) (g$111$13219 g$111$15379)))) '#f)) (g$111$13219 g$111$15373))) (if (g$111$13215 g$111$15373) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$111$15371) (g$111$13219 g$111$15347)))) '#f)) (g$111$13223 g$111$15341)))) '#f)) ((lambda (g$111$15397) (list g$111$15397)) (g$111$13219 g$111$15341)))) '#f)) (g$111$13223 g$111$15335)))) '#f)) ((lambda (g$111$15399) '()) (g$111$13219 g$111$15335)))) '#f)) g$111$15311))) g$111$15291))) ((lambda (g$111$15401) (if (g$111$13211 g$111$15401) (begin '#f ((lambda (g$111$15403) (if g$111$15403 (begin '#f ((lambda (g$111$15405) (if g$111$15405 (begin '#f (append g$111$15403 g$111$15405)) '#f)) ((lambda (g$111$15407) (if (g$111$13211 g$111$15407) (begin '#f ((lambda (g$111$15409) (if g$111$15409 (begin '#f ((lambda (g$111$15411) (if g$111$15411 (begin '#f (append g$111$15409 g$111$15411)) '#f)) ((lambda (g$111$15413) (if (g$111$13211 g$111$15413) (begin '#f ((lambda (g$111$15415) (if g$111$15415 (begin '#f ((lambda (g$111$15417) (if g$111$15417 (begin '#f (append g$111$15415 g$111$15417)) '#f)) ((letrec ((g$111$15419 (lambda (g$111$15421) (if (g$111$13211 g$111$15421) ((lambda (g$111$15423) (if g$111$15423 (begin '#f ((lambda (g$111$15425) (if g$111$15425 (begin '#f (map cons g$111$15423 g$111$15425)) '#f)) (g$111$15419 (g$111$13223 g$111$15421)))) '#f)) ((lambda (g$111$15427) (list g$111$15427)) (g$111$13219 g$111$15421))) (if (g$111$13215 g$111$15421) (list (begin 'b* '())) '#f))))) g$111$15419) (g$111$13223 g$111$15413)))) '#f)) ((lambda (g$111$15429) (list g$111$15429)) (g$111$13219 g$111$15413)))) '#f)) (g$111$13223 g$111$15407)))) '#f)) ((letrec ((g$111$15431 (lambda (g$111$15433) (if (g$111$13211 g$111$15433) ((lambda (g$111$15435) (if g$111$15435 (begin '#f ((lambda (g$111$15437) (if g$111$15437 (begin '#f (map cons g$111$15435 g$111$15437)) '#f)) (g$111$15431 (g$111$13223 g$111$15433)))) '#f)) ((lambda (g$111$15439) (if (g$111$13211 g$111$15439) (begin '#f ((lambda (g$111$15441) (if g$111$15441 (begin '#f ((lambda (g$111$15443) (if g$111$15443 (begin '#f (append g$111$15441 g$111$15443)) '#f)) ((lambda (g$111$15445) (if (g$111$13211 g$111$15445) (begin '#f ((lambda (g$111$15447) (if g$111$15447 (begin '#f ((lambda (g$111$15449) (if g$111$15449 (begin '#f (append g$111$15447 g$111$15449)) '#f)) ((lambda (g$111$15451) (if (equal? (g$111$13245 g$111$15451) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$15445)))) '#f)) ((lambda (g$111$15453) (list g$111$15453)) (g$111$13219 g$111$15445)))) '#f)) (g$111$13223 g$111$15439)))) '#f)) ((lambda (g$111$15455) (list g$111$15455)) (g$111$13219 g$111$15439)))) '#f)) (g$111$13219 g$111$15433))) (if (g$111$13215 g$111$15433) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$111$15431) (g$111$13219 g$111$15407)))) '#f)) (g$111$13223 g$111$15401)))) '#f)) ((lambda (g$111$15457) '()) (g$111$13219 g$111$15401)))) '#f)) g$111$15291))) g$111$15289))) (set! g$111$13518 (lambda (g$111$15459) ((lambda (g$111$15461) ((lambda (g$111$15463) (if (if g$111$15463 (begin '#f (apply (lambda (g$111$15465 g$111$15466 g$111$15467 g$111$15468) '#t) g$111$15463)) '#f) (apply (lambda (g$111$15473 g$111$15474 g$111$15475 g$111$15476) (if (g$111$13235 g$111$15474) (g$111$13512 (list 'make-traced-procedure (list 'quote g$111$15473) (cons 'lambda (cons g$111$15474 (cons g$111$15475 g$111$15476))))) (error 'expander '"invalid formals" (g$111$13243 g$111$15459 '())))) g$111$15463) ((lambda (g$111$15481) ((lambda (g$111$15483) (if (if g$111$15483 (begin '#f (apply (lambda (g$111$15485 g$111$15486 g$111$15487 g$111$15488 g$111$15489) '#t) g$111$15483)) '#f) (apply (lambda (g$111$15495 g$111$15496 g$111$15497 g$111$15498 g$111$15499) (if (g$111$13235 (cons g$111$15497 g$111$15496)) (g$111$13512 (list 'make-traced-procedure (list 'quote g$111$15495) (cons 'lambda (cons (append g$111$15496 g$111$15497) (cons g$111$15498 g$111$15499))))) (error 'expander '"invalid formals" (g$111$13243 g$111$15459 '())))) g$111$15483) (error 'expander '"invalid syntax" (g$111$13243 g$111$15481 '())))) ((lambda (g$111$15505) (if (g$111$13211 g$111$15505) (begin '#f ((lambda (g$111$15507) (if g$111$15507 (begin '#f ((lambda (g$111$15509) (if g$111$15509 (begin '#f (append g$111$15507 g$111$15509)) '#f)) ((lambda (g$111$15511) (if (g$111$13211 g$111$15511) (begin '#f ((lambda (g$111$15513) (if g$111$15513 (begin '#f ((lambda (g$111$15515) (if g$111$15515 (begin '#f (append g$111$15513 g$111$15515)) '#f)) ((lambda (g$111$15517) (if (g$111$13211 g$111$15517) (begin '#f ((lambda (g$111$15519) (if g$111$15519 (begin '#f ((lambda (g$111$15521) (if g$111$15521 (begin '#f (append g$111$15519 g$111$15521)) '#f)) ((lambda (g$111$15523) (if (g$111$13211 g$111$15523) (begin '#f ((lambda (g$111$15525) (if g$111$15525 (begin '#f ((lambda (g$111$15527) (if g$111$15527 (begin '#f (append g$111$15525 g$111$15527)) '#f)) ((letrec ((g$111$15529 (lambda (g$111$15531) (if (g$111$13211 g$111$15531) ((lambda (g$111$15533) (if g$111$15533 (begin '#f ((lambda (g$111$15535) (if g$111$15535 (begin '#f (map cons g$111$15533 g$111$15535)) '#f)) (g$111$15529 (g$111$13223 g$111$15531)))) '#f)) ((lambda (g$111$15537) (list g$111$15537)) (g$111$13219 g$111$15531))) (if (g$111$13215 g$111$15531) (list (begin 'b* '())) '#f))))) g$111$15529) (g$111$13223 g$111$15523)))) '#f)) ((lambda (g$111$15539) (list g$111$15539)) (g$111$13219 g$111$15523)))) '#f)) (g$111$13223 g$111$15517)))) '#f)) ((letrec ((g$111$15541 (lambda (g$111$15547) (if (g$111$13211 g$111$15547) ((lambda (g$111$15549) (if g$111$15549 (begin '#f ((lambda (g$111$15551) (if g$111$15551 (begin '#f (cons (map cons g$111$15549 (car g$111$15551)) (cdr g$111$15551))) '#f)) (g$111$15541 (g$111$13223 g$111$15547)))) '#f)) ((lambda (g$111$15553) (list g$111$15553)) (g$111$13219 g$111$15547))) ((lambda (g$111$15555) (if g$111$15555 (begin '#f (cons (list (begin 'fmls '())) g$111$15555)) '#f)) ((lambda (g$111$15557) (list g$111$15557)) g$111$15547)))))) (lambda (g$111$15543) ((lambda (g$111$15545) (if g$111$15545 (begin '#f (append (car g$111$15545) (cdr g$111$15545))) '#f)) (g$111$15541 g$111$15543)))) (g$111$13219 g$111$15517)))) '#f)) (g$111$13223 g$111$15511)))) '#f)) ((lambda (g$111$15559) (list g$111$15559)) (g$111$13219 g$111$15511)))) '#f)) (g$111$13223 g$111$15505)))) '#f)) ((lambda (g$111$15561) '()) (g$111$13219 g$111$15505)))) '#f)) g$111$15481))) g$111$15461))) ((lambda (g$111$15563) (if (g$111$13211 g$111$15563) (begin '#f ((lambda (g$111$15565) (if g$111$15565 (begin '#f ((lambda (g$111$15567) (if g$111$15567 (begin '#f (append g$111$15565 g$111$15567)) '#f)) ((lambda (g$111$15569) (if (g$111$13211 g$111$15569) (begin '#f ((lambda (g$111$15571) (if g$111$15571 (begin '#f ((lambda (g$111$15573) (if g$111$15573 (begin '#f (append g$111$15571 g$111$15573)) '#f)) ((lambda (g$111$15575) (if (g$111$13211 g$111$15575) (begin '#f ((lambda (g$111$15577) (if g$111$15577 (begin '#f ((lambda (g$111$15579) (if g$111$15579 (begin '#f (append g$111$15577 g$111$15579)) '#f)) ((lambda (g$111$15581) (if (g$111$13211 g$111$15581) (begin '#f ((lambda (g$111$15583) (if g$111$15583 (begin '#f ((lambda (g$111$15585) (if g$111$15585 (begin '#f (append g$111$15583 g$111$15585)) '#f)) ((letrec ((g$111$15587 (lambda (g$111$15589) (if (g$111$13211 g$111$15589) ((lambda (g$111$15591) (if g$111$15591 (begin '#f ((lambda (g$111$15593) (if g$111$15593 (begin '#f (map cons g$111$15591 g$111$15593)) '#f)) (g$111$15587 (g$111$13223 g$111$15589)))) '#f)) ((lambda (g$111$15595) (list g$111$15595)) (g$111$13219 g$111$15589))) (if (g$111$13215 g$111$15589) (list (begin 'b* '())) '#f))))) g$111$15587) (g$111$13223 g$111$15581)))) '#f)) ((lambda (g$111$15597) (list g$111$15597)) (g$111$13219 g$111$15581)))) '#f)) (g$111$13223 g$111$15575)))) '#f)) ((letrec ((g$111$15599 (lambda (g$111$15601) (if (g$111$13211 g$111$15601) ((lambda (g$111$15603) (if g$111$15603 (begin '#f ((lambda (g$111$15605) (if g$111$15605 (begin '#f (map cons g$111$15603 g$111$15605)) '#f)) (g$111$15599 (g$111$13223 g$111$15601)))) '#f)) ((lambda (g$111$15607) (list g$111$15607)) (g$111$13219 g$111$15601))) (if (g$111$13215 g$111$15601) (list (begin 'fmls '())) '#f))))) g$111$15599) (g$111$13219 g$111$15575)))) '#f)) (g$111$13223 g$111$15569)))) '#f)) ((lambda (g$111$15609) (list g$111$15609)) (g$111$13219 g$111$15569)))) '#f)) (g$111$13223 g$111$15563)))) '#f)) ((lambda (g$111$15611) '()) (g$111$13219 g$111$15563)))) '#f)) g$111$15461))) g$111$15459))) (set! g$111$13520 (lambda (g$111$15613) ((lambda (g$111$15615) ((lambda (g$111$15617) (if (if g$111$15617 (begin '#f (apply (lambda (g$111$15619 g$111$15620 g$111$15621 g$111$15622) '#t) g$111$15617)) '#f) (apply (lambda (g$111$15627 g$111$15628 g$111$15629 g$111$15630) (if (g$111$13235 g$111$15628) (g$111$13512 (list 'define g$111$15627 (list 'make-traced-procedure (list 'quote g$111$15627) (cons 'lambda (cons g$111$15628 (cons g$111$15629 g$111$15630)))))) (error 'expander '"invalid formals" (g$111$13243 g$111$15613 '())))) g$111$15617) ((lambda (g$111$15635) ((lambda (g$111$15637) (if (if g$111$15637 (begin '#f (apply (lambda (g$111$15639 g$111$15640 g$111$15641 g$111$15642 g$111$15643) '#t) g$111$15637)) '#f) (apply (lambda (g$111$15649 g$111$15650 g$111$15651 g$111$15652 g$111$15653) (if (g$111$13235 (cons g$111$15651 g$111$15650)) (g$111$13512 (list 'define g$111$15649 (list 'make-traced-procedure (list 'quote g$111$15649) (cons 'lambda (cons (append g$111$15650 g$111$15651) (cons g$111$15652 g$111$15653)))))) (error 'expander '"invalid formals" (g$111$13243 g$111$15613 '())))) g$111$15637) ((lambda (g$111$15659) ((lambda (g$111$15661) (if (if g$111$15661 (begin '#f (apply (lambda (g$111$15663 g$111$15664) '#t) g$111$15661)) '#f) (apply (lambda (g$111$15667 g$111$15668) (if (g$111$13225 g$111$15667) (g$111$13512 (list 'define g$111$15667 (list 'let (list (list 'v g$111$15668)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$111$15667) '(v))) '((error 'trace-define "not a procedure" v)))))))) (error 'expander '"invalid formals" (g$111$13243 g$111$15613 '())))) g$111$15661) (error 'expander '"invalid syntax" (g$111$13243 g$111$15659 '())))) ((lambda (g$111$15671) (if (g$111$13211 g$111$15671) (begin '#f ((lambda (g$111$15673) (if g$111$15673 (begin '#f ((lambda (g$111$15675) (if g$111$15675 (begin '#f (append g$111$15673 g$111$15675)) '#f)) ((lambda (g$111$15677) (if (g$111$13211 g$111$15677) (begin '#f ((lambda (g$111$15679) (if g$111$15679 (begin '#f ((lambda (g$111$15681) (if g$111$15681 (begin '#f (append g$111$15679 g$111$15681)) '#f)) ((lambda (g$111$15683) (if (g$111$13211 g$111$15683) (begin '#f ((lambda (g$111$15685) (if g$111$15685 (begin '#f ((lambda (g$111$15687) (if g$111$15687 (begin '#f (append g$111$15685 g$111$15687)) '#f)) ((lambda (g$111$15689) (if (equal? (g$111$13245 g$111$15689) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$15683)))) '#f)) ((lambda (g$111$15691) (list g$111$15691)) (g$111$13219 g$111$15683)))) '#f)) (g$111$13223 g$111$15677)))) '#f)) ((lambda (g$111$15693) (list g$111$15693)) (g$111$13219 g$111$15677)))) '#f)) (g$111$13223 g$111$15671)))) '#f)) ((lambda (g$111$15695) '()) (g$111$13219 g$111$15671)))) '#f)) g$111$15659))) g$111$15635))) ((lambda (g$111$15697) (if (g$111$13211 g$111$15697) (begin '#f ((lambda (g$111$15699) (if g$111$15699 (begin '#f ((lambda (g$111$15701) (if g$111$15701 (begin '#f (append g$111$15699 g$111$15701)) '#f)) ((lambda (g$111$15703) (if (g$111$13211 g$111$15703) (begin '#f ((lambda (g$111$15705) (if g$111$15705 (begin '#f ((lambda (g$111$15707) (if g$111$15707 (begin '#f (append g$111$15705 g$111$15707)) '#f)) ((lambda (g$111$15709) (if (g$111$13211 g$111$15709) (begin '#f ((lambda (g$111$15711) (if g$111$15711 (begin '#f ((lambda (g$111$15713) (if g$111$15713 (begin '#f (append g$111$15711 g$111$15713)) '#f)) ((letrec ((g$111$15715 (lambda (g$111$15717) (if (g$111$13211 g$111$15717) ((lambda (g$111$15719) (if g$111$15719 (begin '#f ((lambda (g$111$15721) (if g$111$15721 (begin '#f (map cons g$111$15719 g$111$15721)) '#f)) (g$111$15715 (g$111$13223 g$111$15717)))) '#f)) ((lambda (g$111$15723) (list g$111$15723)) (g$111$13219 g$111$15717))) (if (g$111$13215 g$111$15717) (list (begin 'b* '())) '#f))))) g$111$15715) (g$111$13223 g$111$15709)))) '#f)) ((lambda (g$111$15725) (list g$111$15725)) (g$111$13219 g$111$15709)))) '#f)) (g$111$13223 g$111$15703)))) '#f)) ((lambda (g$111$15727) (if (g$111$13211 g$111$15727) (begin '#f ((lambda (g$111$15729) (if g$111$15729 (begin '#f ((lambda (g$111$15731) (if g$111$15731 (begin '#f (append g$111$15729 g$111$15731)) '#f)) ((letrec ((g$111$15733 (lambda (g$111$15739) (if (g$111$13211 g$111$15739) ((lambda (g$111$15741) (if g$111$15741 (begin '#f ((lambda (g$111$15743) (if g$111$15743 (begin '#f (cons (map cons g$111$15741 (car g$111$15743)) (cdr g$111$15743))) '#f)) (g$111$15733 (g$111$13223 g$111$15739)))) '#f)) ((lambda (g$111$15745) (list g$111$15745)) (g$111$13219 g$111$15739))) ((lambda (g$111$15747) (if g$111$15747 (begin '#f (cons (list (begin 'fmls '())) g$111$15747)) '#f)) ((lambda (g$111$15749) (list g$111$15749)) g$111$15739)))))) (lambda (g$111$15735) ((lambda (g$111$15737) (if g$111$15737 (begin '#f (append (car g$111$15737) (cdr g$111$15737))) '#f)) (g$111$15733 g$111$15735)))) (g$111$13223 g$111$15727)))) '#f)) ((lambda (g$111$15751) (list g$111$15751)) (g$111$13219 g$111$15727)))) '#f)) (g$111$13219 g$111$15703)))) '#f)) (g$111$13223 g$111$15697)))) '#f)) ((lambda (g$111$15753) '()) (g$111$13219 g$111$15697)))) '#f)) g$111$15635))) g$111$15615))) ((lambda (g$111$15755) (if (g$111$13211 g$111$15755) (begin '#f ((lambda (g$111$15757) (if g$111$15757 (begin '#f ((lambda (g$111$15759) (if g$111$15759 (begin '#f (append g$111$15757 g$111$15759)) '#f)) ((lambda (g$111$15761) (if (g$111$13211 g$111$15761) (begin '#f ((lambda (g$111$15763) (if g$111$15763 (begin '#f ((lambda (g$111$15765) (if g$111$15765 (begin '#f (append g$111$15763 g$111$15765)) '#f)) ((lambda (g$111$15767) (if (g$111$13211 g$111$15767) (begin '#f ((lambda (g$111$15769) (if g$111$15769 (begin '#f ((lambda (g$111$15771) (if g$111$15771 (begin '#f (append g$111$15769 g$111$15771)) '#f)) ((letrec ((g$111$15773 (lambda (g$111$15775) (if (g$111$13211 g$111$15775) ((lambda (g$111$15777) (if g$111$15777 (begin '#f ((lambda (g$111$15779) (if g$111$15779 (begin '#f (map cons g$111$15777 g$111$15779)) '#f)) (g$111$15773 (g$111$13223 g$111$15775)))) '#f)) ((lambda (g$111$15781) (list g$111$15781)) (g$111$13219 g$111$15775))) (if (g$111$13215 g$111$15775) (list (begin 'b* '())) '#f))))) g$111$15773) (g$111$13223 g$111$15767)))) '#f)) ((lambda (g$111$15783) (list g$111$15783)) (g$111$13219 g$111$15767)))) '#f)) (g$111$13223 g$111$15761)))) '#f)) ((lambda (g$111$15785) (if (g$111$13211 g$111$15785) (begin '#f ((lambda (g$111$15787) (if g$111$15787 (begin '#f ((lambda (g$111$15789) (if g$111$15789 (begin '#f (append g$111$15787 g$111$15789)) '#f)) ((letrec ((g$111$15791 (lambda (g$111$15793) (if (g$111$13211 g$111$15793) ((lambda (g$111$15795) (if g$111$15795 (begin '#f ((lambda (g$111$15797) (if g$111$15797 (begin '#f (map cons g$111$15795 g$111$15797)) '#f)) (g$111$15791 (g$111$13223 g$111$15793)))) '#f)) ((lambda (g$111$15799) (list g$111$15799)) (g$111$13219 g$111$15793))) (if (g$111$13215 g$111$15793) (list (begin 'fmls '())) '#f))))) g$111$15791) (g$111$13223 g$111$15785)))) '#f)) ((lambda (g$111$15801) (list g$111$15801)) (g$111$13219 g$111$15785)))) '#f)) (g$111$13219 g$111$15761)))) '#f)) (g$111$13223 g$111$15755)))) '#f)) ((lambda (g$111$15803) '()) (g$111$13219 g$111$15755)))) '#f)) g$111$15615))) g$111$15613))) (set! g$111$13522 (lambda (g$111$15805) ((lambda (g$111$15807) (begin (set! g$111$15807 (lambda (g$111$15809 g$111$15810 g$111$15811) ((lambda (g$111$15815 g$111$15817) (begin (set! g$111$15815 (lambda (g$111$15911 g$111$15912) ((lambda (g$111$15915) ((lambda (g$111$15917) (if (if g$111$15917 (begin '#f (apply (lambda (g$111$15919 g$111$15920) '#t) g$111$15917)) '#f) (apply (lambda (g$111$15923 g$111$15924) ((lambda (g$111$15927) (list 'let (list (list g$111$15927 g$111$15923)) (list 'if g$111$15927 (list g$111$15924 g$111$15927) g$111$15912))) (gensym))) g$111$15917) ((lambda (g$111$15929) ((lambda (g$111$15931) (if (if g$111$15931 (begin '#f (apply (lambda (g$111$15933) '#t) g$111$15931)) '#f) (apply (lambda (g$111$15935) ((lambda (g$111$15937) (list 'let (list (list g$111$15937 g$111$15935)) (list 'if g$111$15937 g$111$15937 g$111$15912))) (gensym))) g$111$15931) ((lambda (g$111$15939) ((lambda (g$111$15941) (if (if g$111$15941 (begin '#f (apply (lambda (g$111$15943 g$111$15944 g$111$15945) '#t) g$111$15941)) '#f) (apply (lambda (g$111$15949 g$111$15950 g$111$15951) (list 'if g$111$15949 (cons 'begin (cons g$111$15950 g$111$15951)) g$111$15912)) g$111$15941) ((lambda (g$111$15955) ((lambda (g$111$15957) (if (if g$111$15957 (begin '#f (apply (lambda () '#t) g$111$15957)) '#f) (apply (lambda () (error 'expander '"invalid guard clause" (g$111$13243 g$111$15911 '()))) g$111$15957) (error 'expander '"invalid syntax" (g$111$13243 g$111$15955 '())))) ((lambda (g$111$15959) '()) g$111$15955))) g$111$15939))) ((lambda (g$111$15961) (if (g$111$13211 g$111$15961) (begin '#f ((lambda (g$111$15963) (if g$111$15963 (begin '#f ((lambda (g$111$15965) (if g$111$15965 (begin '#f (append g$111$15963 g$111$15965)) '#f)) ((lambda (g$111$15967) (if (g$111$13211 g$111$15967) (begin '#f ((lambda (g$111$15969) (if g$111$15969 (begin '#f ((lambda (g$111$15971) (if g$111$15971 (begin '#f (append g$111$15969 g$111$15971)) '#f)) ((letrec ((g$111$15973 (lambda (g$111$15975) (if (g$111$13211 g$111$15975) ((lambda (g$111$15977) (if g$111$15977 (begin '#f ((lambda (g$111$15979) (if g$111$15979 (begin '#f (map cons g$111$15977 g$111$15979)) '#f)) (g$111$15973 (g$111$13223 g$111$15975)))) '#f)) ((lambda (g$111$15981) (list g$111$15981)) (g$111$13219 g$111$15975))) (if (g$111$13215 g$111$15975) (list (begin 'v* '())) '#f))))) g$111$15973) (g$111$13223 g$111$15967)))) '#f)) ((lambda (g$111$15983) (list g$111$15983)) (g$111$13219 g$111$15967)))) '#f)) (g$111$13223 g$111$15961)))) '#f)) ((lambda (g$111$15985) (list g$111$15985)) (g$111$13219 g$111$15961)))) '#f)) g$111$15939))) g$111$15929))) ((lambda (g$111$15987) (if (g$111$13211 g$111$15987) (begin '#f ((lambda (g$111$15989) (if g$111$15989 (begin '#f ((lambda (g$111$15991) (if g$111$15991 (begin '#f (append g$111$15989 g$111$15991)) '#f)) ((lambda (g$111$15993) (if (equal? (g$111$13245 g$111$15993) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$15987)))) '#f)) ((lambda (g$111$15995) (list g$111$15995)) (g$111$13219 g$111$15987)))) '#f)) g$111$15929))) g$111$15915))) ((lambda (g$111$15997) (if (g$111$13211 g$111$15997) (begin '#f ((lambda (g$111$15999) (if g$111$15999 (begin '#f ((lambda (g$111$16001) (if g$111$16001 (begin '#f (append g$111$15999 g$111$16001)) '#f)) ((lambda (g$111$16003) (if (g$111$13211 g$111$16003) (begin '#f ((lambda (g$111$16005) (if g$111$16005 (begin '#f ((lambda (g$111$16007) (if g$111$16007 (begin '#f (append g$111$16005 g$111$16007)) '#f)) ((lambda (g$111$16009) (if (g$111$13211 g$111$16009) (begin '#f ((lambda (g$111$16011) (if g$111$16011 (begin '#f ((lambda (g$111$16013) (if g$111$16013 (begin '#f (append g$111$16011 g$111$16013)) '#f)) ((lambda (g$111$16015) (if (equal? (g$111$13245 g$111$16015) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16009)))) '#f)) ((lambda (g$111$16017) (list g$111$16017)) (g$111$13219 g$111$16009)))) '#f)) (g$111$13223 g$111$16003)))) '#f)) ((lambda (g$111$16019) (if (g$111$13225 g$111$16019) (if (g$111$13233 g$111$16019 (g$111$13478 '=>)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$16003)))) '#f)) (g$111$13223 g$111$15997)))) '#f)) ((lambda (g$111$16021) (list g$111$16021)) (g$111$13219 g$111$15997)))) '#f)) g$111$15915))) g$111$15911))) (set! g$111$15817 (lambda (g$111$15819) ((lambda (g$111$15821) ((lambda (g$111$15823) (if (if g$111$15823 (begin '#f (apply (lambda () '#t) g$111$15823)) '#f) (apply (lambda () ((lambda (g$111$15825) (values (list g$111$15825 (list 'lambda '() (list 'raise g$111$15809))) g$111$15825)) (gensym))) g$111$15823) ((lambda (g$111$15827) ((lambda (g$111$15829) (if (if g$111$15829 (begin '#f (apply (lambda (g$111$15831 g$111$15832) '#t) g$111$15829)) '#f) (apply (lambda (g$111$15835 g$111$15836) (values (cons 'begin (cons g$111$15835 g$111$15836)) '#f)) g$111$15829) ((lambda (g$111$15839) ((lambda (g$111$15841) (if (if g$111$15841 (begin '#f (apply (lambda (g$111$15843 g$111$15844) '#t) g$111$15841)) '#f) (apply (lambda (g$111$15847 g$111$15848) (call-with-values (lambda () (g$111$15817 g$111$15848)) (lambda (g$111$15851 g$111$15852) (values (g$111$15815 g$111$15847 g$111$15851) g$111$15852)))) g$111$15841) ((lambda (g$111$15855) ((lambda (g$111$15857) (if (if g$111$15857 (begin '#f (apply (lambda (g$111$15859) '#t) g$111$15857)) '#f) (apply (lambda (g$111$15861) (error 'expander '"invalid guard clause" (g$111$13243 g$111$15861 '()))) g$111$15857) (error 'expander '"invalid syntax" (g$111$13243 g$111$15855 '())))) ((lambda (g$111$15863) (list g$111$15863)) g$111$15855))) g$111$15839))) ((lambda (g$111$15865) (if (g$111$13211 g$111$15865) (begin '#f ((lambda (g$111$15867) (if g$111$15867 (begin '#f ((lambda (g$111$15869) (if g$111$15869 (begin '#f (append g$111$15867 g$111$15869)) '#f)) ((lambda (g$111$15871) (list g$111$15871)) (g$111$13223 g$111$15865)))) '#f)) ((lambda (g$111$15873) (list g$111$15873)) (g$111$13219 g$111$15865)))) '#f)) g$111$15839))) g$111$15827))) ((lambda (g$111$15875) (if (g$111$13211 g$111$15875) (begin '#f ((lambda (g$111$15877) (if g$111$15877 (begin '#f ((lambda (g$111$15879) (if g$111$15879 (begin '#f (append g$111$15877 g$111$15879)) '#f)) ((lambda (g$111$15881) (if (equal? (g$111$13245 g$111$15881) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$15875)))) '#f)) ((lambda (g$111$15883) (if (g$111$13211 g$111$15883) (begin '#f ((lambda (g$111$15885) (if g$111$15885 (begin '#f ((lambda (g$111$15887) (if g$111$15887 (begin '#f (append g$111$15885 g$111$15887)) '#f)) ((lambda (g$111$15889) (if (g$111$13211 g$111$15889) (begin '#f ((lambda (g$111$15891) (if g$111$15891 (begin '#f ((lambda (g$111$15893) (if g$111$15893 (begin '#f (append g$111$15891 g$111$15893)) '#f)) ((letrec ((g$111$15895 (lambda (g$111$15897) (if (g$111$13211 g$111$15897) ((lambda (g$111$15899) (if g$111$15899 (begin '#f ((lambda (g$111$15901) (if g$111$15901 (begin '#f (map cons g$111$15899 g$111$15901)) '#f)) (g$111$15895 (g$111$13223 g$111$15897)))) '#f)) ((lambda (g$111$15903) (list g$111$15903)) (g$111$13219 g$111$15897))) (if (g$111$13215 g$111$15897) (list (begin 'e* '())) '#f))))) g$111$15895) (g$111$13223 g$111$15889)))) '#f)) ((lambda (g$111$15905) (list g$111$15905)) (g$111$13219 g$111$15889)))) '#f)) (g$111$13223 g$111$15883)))) '#f)) ((lambda (g$111$15907) (if (g$111$13225 g$111$15907) (if (g$111$13233 g$111$15907 (g$111$13478 'else)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$15883)))) '#f)) (g$111$13219 g$111$15875)))) '#f)) g$111$15827))) g$111$15821))) ((lambda (g$111$15909) (if (equal? (g$111$13245 g$111$15909) '()) (begin '#f '()) '#f)) g$111$15821))) g$111$15819))) (call-with-values (lambda () (g$111$15817 g$111$15811)) (lambda (g$111$16023 g$111$16024) (if g$111$16024 (list (list 'call/cc (list 'lambda (list g$111$16024) (list g$111$15810 (list 'lambda '() g$111$16023))))) (list g$111$15810 (list 'lambda '() g$111$16023))))))) '#f '#f))) ((lambda (g$111$16027) ((lambda (g$111$16029) (if (if g$111$16029 (begin '#f (apply (lambda (g$111$16031 g$111$16032 g$111$16033 g$111$16034) (g$111$13225 g$111$16031)) g$111$16029)) '#f) (apply (lambda (g$111$16039 g$111$16040 g$111$16041 g$111$16042) ((lambda (g$111$16047) (g$111$13512 (list (list 'call/cc (list 'lambda (list g$111$16047) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g$111$16039) (g$111$15807 g$111$16039 g$111$16047 g$111$16040)) (cons 'lambda (cons '() (cons '#f (cons g$111$16041 g$111$16042))))))))))) (gensym))) g$111$16029) (error 'expander '"invalid syntax" (g$111$13243 g$111$16027 '())))) ((lambda (g$111$16049) (if (g$111$13211 g$111$16049) (begin '#f ((lambda (g$111$16051) (if g$111$16051 (begin '#f ((lambda (g$111$16053) (if g$111$16053 (begin '#f (append g$111$16051 g$111$16053)) '#f)) ((lambda (g$111$16055) (if (g$111$13211 g$111$16055) (begin '#f ((lambda (g$111$16057) (if g$111$16057 (begin '#f ((lambda (g$111$16059) (if g$111$16059 (begin '#f (append g$111$16057 g$111$16059)) '#f)) ((lambda (g$111$16061) (if (g$111$13211 g$111$16061) (begin '#f ((lambda (g$111$16063) (if g$111$16063 (begin '#f ((lambda (g$111$16065) (if g$111$16065 (begin '#f (append g$111$16063 g$111$16065)) '#f)) ((letrec ((g$111$16067 (lambda (g$111$16069) (if (g$111$13211 g$111$16069) ((lambda (g$111$16071) (if g$111$16071 (begin '#f ((lambda (g$111$16073) (if g$111$16073 (begin '#f (map cons g$111$16071 g$111$16073)) '#f)) (g$111$16067 (g$111$13223 g$111$16069)))) '#f)) ((lambda (g$111$16075) (list g$111$16075)) (g$111$13219 g$111$16069))) (if (g$111$13215 g$111$16069) (list (begin 'b* '())) '#f))))) g$111$16067) (g$111$13223 g$111$16061)))) '#f)) ((lambda (g$111$16077) (list g$111$16077)) (g$111$13219 g$111$16061)))) '#f)) (g$111$13223 g$111$16055)))) '#f)) ((lambda (g$111$16079) (if (g$111$13211 g$111$16079) (begin '#f ((lambda (g$111$16081) (if g$111$16081 (begin '#f ((lambda (g$111$16083) (if g$111$16083 (begin '#f (append g$111$16081 g$111$16083)) '#f)) ((letrec ((g$111$16085 (lambda (g$111$16087) (if (g$111$13211 g$111$16087) ((lambda (g$111$16089) (if g$111$16089 (begin '#f ((lambda (g$111$16091) (if g$111$16091 (begin '#f (map cons g$111$16089 g$111$16091)) '#f)) (g$111$16085 (g$111$13223 g$111$16087)))) '#f)) ((lambda (g$111$16093) (list g$111$16093)) (g$111$13219 g$111$16087))) (if (g$111$13215 g$111$16087) (list (begin 'clause* '())) '#f))))) g$111$16085) (g$111$13223 g$111$16079)))) '#f)) ((lambda (g$111$16095) (list g$111$16095)) (g$111$13219 g$111$16079)))) '#f)) (g$111$13219 g$111$16055)))) '#f)) (g$111$13223 g$111$16049)))) '#f)) ((lambda (g$111$16097) '()) (g$111$13219 g$111$16049)))) '#f)) g$111$16027))) g$111$15805))) '#f))) (set! g$111$13524 (lambda (g$111$16099) ((lambda (g$111$16101) (begin (set! g$111$16101 (lambda (g$111$16103) ((lambda (g$111$16105) (if g$111$16105 g$111$16105 (begin '#f (if (not (memq (car g$111$16103) (cdr g$111$16103))) (begin '#f (g$111$16101 (cdr g$111$16103))) '#f)))) (null? g$111$16103)))) ((lambda (g$111$16107) ((lambda (g$111$16109) (if (if g$111$16109 (begin '#f (apply (lambda (g$111$16111 g$111$16112 g$111$16113) (if (g$111$13225 g$111$16111) (if (g$111$13225 g$111$16113) (begin '#f (for-all g$111$13225 g$111$16112)) '#f) '#f)) g$111$16109)) '#f) (apply (lambda (g$111$16117 g$111$16118 g$111$16119) ((lambda (g$111$16123 g$111$16124) (begin (if (g$111$16101 g$111$16123) (void) (error 'expander '"duplicate names in enumeration set" (g$111$13243 g$111$16099 '()))) (g$111$13512 (list 'begin (list 'define g$111$16124 (list 'enum-set-constructor (list 'make-enumeration (list 'quote g$111$16123)))) (list 'define-syntax g$111$16117 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g$111$16123)) '(syntax 'n) (list 'syntax-error 'x '"not a member of set" (list 'quote g$111$16123))))))) (list 'define-syntax g$111$16119 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* |...|) (list 'begin (cons 'for-each (cons (list 'lambda '(n) '(unless (identifier? n) (syntax-error x "non-identifier argument")) (cons 'unless (cons (list 'memq '(syntax->datum n) (list 'quote g$111$16123)) '((syntax-error n "not a member of set"))))) '((syntax (n* |...|))))) (list 'syntax (cons g$111$16124 '('(n* |...|))))))))))))) (g$111$13707 g$111$16118) (gensym))) g$111$16109) (error 'expander '"invalid syntax" (g$111$13243 g$111$16107 '())))) ((lambda (g$111$16127) (if (g$111$13211 g$111$16127) (begin '#f ((lambda (g$111$16129) (if g$111$16129 (begin '#f ((lambda (g$111$16131) (if g$111$16131 (begin '#f (append g$111$16129 g$111$16131)) '#f)) ((lambda (g$111$16133) (if (g$111$13211 g$111$16133) (begin '#f ((lambda (g$111$16135) (if g$111$16135 (begin '#f ((lambda (g$111$16137) (if g$111$16137 (begin '#f (append g$111$16135 g$111$16137)) '#f)) ((lambda (g$111$16139) (if (g$111$13211 g$111$16139) (begin '#f ((lambda (g$111$16141) (if g$111$16141 (begin '#f ((lambda (g$111$16143) (if g$111$16143 (begin '#f (append g$111$16141 g$111$16143)) '#f)) ((lambda (g$111$16145) (if (g$111$13211 g$111$16145) (begin '#f ((lambda (g$111$16147) (if g$111$16147 (begin '#f ((lambda (g$111$16149) (if g$111$16149 (begin '#f (append g$111$16147 g$111$16149)) '#f)) ((lambda (g$111$16151) (if (equal? (g$111$13245 g$111$16151) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16145)))) '#f)) ((lambda (g$111$16153) (list g$111$16153)) (g$111$13219 g$111$16145)))) '#f)) (g$111$13223 g$111$16139)))) '#f)) ((letrec ((g$111$16155 (lambda (g$111$16157) (if (g$111$13211 g$111$16157) ((lambda (g$111$16159) (if g$111$16159 (begin '#f ((lambda (g$111$16161) (if g$111$16161 (begin '#f (map cons g$111$16159 g$111$16161)) '#f)) (g$111$16155 (g$111$13223 g$111$16157)))) '#f)) ((lambda (g$111$16163) (list g$111$16163)) (g$111$13219 g$111$16157))) (if (g$111$13215 g$111$16157) (list (begin 'id* '())) '#f))))) g$111$16155) (g$111$13219 g$111$16139)))) '#f)) (g$111$13223 g$111$16133)))) '#f)) ((lambda (g$111$16165) (list g$111$16165)) (g$111$13219 g$111$16133)))) '#f)) (g$111$13223 g$111$16127)))) '#f)) ((lambda (g$111$16167) '()) (g$111$13219 g$111$16127)))) '#f)) g$111$16107))) g$111$16099))) '#f))) (set! g$111$13526 (lambda (g$111$16169) ((lambda (g$111$16171) ((lambda (g$111$16173) (if (if g$111$16173 (begin '#f (apply (lambda (g$111$16175) '#t) g$111$16173)) '#f) (apply (lambda (g$111$16177) (g$111$13512 (list 'time-it (list 'quote g$111$16177) (list 'lambda '() g$111$16177)))) g$111$16173) (error 'expander '"invalid syntax" (g$111$13243 g$111$16171 '())))) ((lambda (g$111$16179) (if (g$111$13211 g$111$16179) (begin '#f ((lambda (g$111$16181) (if g$111$16181 (begin '#f ((lambda (g$111$16183) (if g$111$16183 (begin '#f (append g$111$16181 g$111$16183)) '#f)) ((lambda (g$111$16185) (if (g$111$13211 g$111$16185) (begin '#f ((lambda (g$111$16187) (if g$111$16187 (begin '#f ((lambda (g$111$16189) (if g$111$16189 (begin '#f (append g$111$16187 g$111$16189)) '#f)) ((lambda (g$111$16191) (if (equal? (g$111$13245 g$111$16191) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16185)))) '#f)) ((lambda (g$111$16193) (list g$111$16193)) (g$111$13219 g$111$16185)))) '#f)) (g$111$13223 g$111$16179)))) '#f)) ((lambda (g$111$16195) '()) (g$111$13219 g$111$16179)))) '#f)) g$111$16171))) g$111$16169))) (set! g$111$13528 (lambda (g$111$16197) ((lambda (g$111$16199) ((lambda (g$111$16201) (if (if g$111$16201 (begin '#f (apply (lambda (g$111$16203) '#t) g$111$16201)) '#f) (apply (lambda (g$111$16205) (g$111$13512 (list 'make-promise (list 'lambda '() g$111$16205)))) g$111$16201) (error 'expander '"invalid syntax" (g$111$13243 g$111$16199 '())))) ((lambda (g$111$16207) (if (g$111$13211 g$111$16207) (begin '#f ((lambda (g$111$16209) (if g$111$16209 (begin '#f ((lambda (g$111$16211) (if g$111$16211 (begin '#f (append g$111$16209 g$111$16211)) '#f)) ((lambda (g$111$16213) (if (g$111$13211 g$111$16213) (begin '#f ((lambda (g$111$16215) (if g$111$16215 (begin '#f ((lambda (g$111$16217) (if g$111$16217 (begin '#f (append g$111$16215 g$111$16217)) '#f)) ((lambda (g$111$16219) (if (equal? (g$111$13245 g$111$16219) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16213)))) '#f)) ((lambda (g$111$16221) (list g$111$16221)) (g$111$13219 g$111$16213)))) '#f)) (g$111$13223 g$111$16207)))) '#f)) ((lambda (g$111$16223) '()) (g$111$13219 g$111$16207)))) '#f)) g$111$16199))) g$111$16197))) (set! g$111$13530 (lambda (g$111$16225) ((lambda (g$111$16227) ((lambda (g$111$16229) (if (if g$111$16229 (begin '#f (apply (lambda (g$111$16231) '#t) g$111$16229)) '#f) (apply (lambda (g$111$16233) (g$111$13512 (list 'unless g$111$16233 (list 'error ''assert '"assertion failed" (list 'quote g$111$16233))))) g$111$16229) (error 'expander '"invalid syntax" (g$111$13243 g$111$16227 '())))) ((lambda (g$111$16235) (if (g$111$13211 g$111$16235) (begin '#f ((lambda (g$111$16237) (if g$111$16237 (begin '#f ((lambda (g$111$16239) (if g$111$16239 (begin '#f (append g$111$16237 g$111$16239)) '#f)) ((lambda (g$111$16241) (if (g$111$13211 g$111$16241) (begin '#f ((lambda (g$111$16243) (if g$111$16243 (begin '#f ((lambda (g$111$16245) (if g$111$16245 (begin '#f (append g$111$16243 g$111$16245)) '#f)) ((lambda (g$111$16247) (if (equal? (g$111$13245 g$111$16247) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16241)))) '#f)) ((lambda (g$111$16249) (list g$111$16249)) (g$111$13219 g$111$16241)))) '#f)) (g$111$13223 g$111$16235)))) '#f)) ((lambda (g$111$16251) '()) (g$111$13219 g$111$16235)))) '#f)) g$111$16227))) g$111$16225))) (set! g$111$13532 (lambda (g$111$16253) ((lambda (g$111$16255) ((lambda (g$111$16257) (if (if g$111$16257 (begin '#f (apply (lambda (g$111$16259) '#t) g$111$16257)) '#f) (apply (lambda (g$111$16261) ((lambda (g$111$16263) (if (memv g$111$16263 '(little)) (g$111$13512 ''little) (if (memv g$111$16263 '(big)) (g$111$13512 ''big) (error 'expander '"endianness must be big or little" (g$111$13243 g$111$16253 '()))))) (g$111$13707 g$111$16261))) g$111$16257) (error 'expander '"invalid syntax" (g$111$13243 g$111$16255 '())))) ((lambda (g$111$16264) (if (g$111$13211 g$111$16264) (begin '#f ((lambda (g$111$16266) (if g$111$16266 (begin '#f ((lambda (g$111$16268) (if g$111$16268 (begin '#f (append g$111$16266 g$111$16268)) '#f)) ((lambda (g$111$16270) (if (g$111$13211 g$111$16270) (begin '#f ((lambda (g$111$16272) (if g$111$16272 (begin '#f ((lambda (g$111$16274) (if g$111$16274 (begin '#f (append g$111$16272 g$111$16274)) '#f)) ((lambda (g$111$16276) (if (equal? (g$111$13245 g$111$16276) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16270)))) '#f)) ((lambda (g$111$16278) (list g$111$16278)) (g$111$13219 g$111$16270)))) '#f)) (g$111$13223 g$111$16264)))) '#f)) ((lambda (g$111$16280) '()) (g$111$13219 g$111$16264)))) '#f)) g$111$16255))) g$111$16253))) (set! g$111$13534 (lambda (g$111$16282) ((lambda (g$111$16284) ((lambda (g$111$16286) (if (if g$111$16286 (begin '#f (apply (lambda (g$111$16288) '#t) g$111$16286)) '#f) (apply (lambda (g$111$16290) (g$111$13512 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g$111$16290)) (list '(id e* |...|) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g$111$16290) '((syntax (e* |...|)))))))))) g$111$16286) ((lambda (g$111$16292) ((lambda (g$111$16294) (if (if g$111$16294 (begin '#f (apply (lambda (g$111$16296 g$111$16297 g$111$16298 g$111$16299 g$111$16300) (if (g$111$13225 g$111$16296) (if (g$111$13225 g$111$16298) (begin '#f (g$111$13225 g$111$16299)) '#f) '#f)) g$111$16294)) '#f) (apply (lambda (g$111$16306 g$111$16307 g$111$16308 g$111$16309 g$111$16310) (g$111$13512 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g$111$16307)) (list (list 'set! 'id g$111$16309) (list 'syntax g$111$16310)) (list '(id e* |...|) '(identifier? (syntax id)) (list 'syntax (cons g$111$16307 '(e* |...|))))))))) g$111$16294) (error 'expander '"invalid syntax" (g$111$13243 g$111$16292 '())))) ((lambda (g$111$16316) (if (g$111$13211 g$111$16316) (begin '#f ((lambda (g$111$16318) (if g$111$16318 (begin '#f ((lambda (g$111$16320) (if g$111$16320 (begin '#f (append g$111$16318 g$111$16320)) '#f)) ((lambda (g$111$16322) (if (g$111$13211 g$111$16322) (begin '#f ((lambda (g$111$16324) (if g$111$16324 (begin '#f ((lambda (g$111$16326) (if g$111$16326 (begin '#f (append g$111$16324 g$111$16326)) '#f)) ((lambda (g$111$16328) (if (g$111$13211 g$111$16328) (begin '#f ((lambda (g$111$16330) (if g$111$16330 (begin '#f ((lambda (g$111$16332) (if g$111$16332 (begin '#f (append g$111$16330 g$111$16332)) '#f)) ((lambda (g$111$16334) (if (equal? (g$111$13245 g$111$16334) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16328)))) '#f)) ((lambda (g$111$16336) (if (g$111$13211 g$111$16336) (begin '#f ((lambda (g$111$16338) (if g$111$16338 (begin '#f ((lambda (g$111$16340) (if g$111$16340 (begin '#f (append g$111$16338 g$111$16340)) '#f)) ((lambda (g$111$16342) (if (g$111$13211 g$111$16342) (begin '#f ((lambda (g$111$16344) (if g$111$16344 (begin '#f ((lambda (g$111$16346) (if g$111$16346 (begin '#f (append g$111$16344 g$111$16346)) '#f)) ((lambda (g$111$16348) (if (equal? (g$111$13245 g$111$16348) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16342)))) '#f)) ((lambda (g$111$16350) (list g$111$16350)) (g$111$13219 g$111$16342)))) '#f)) (g$111$13223 g$111$16336)))) '#f)) ((lambda (g$111$16352) (if (g$111$13211 g$111$16352) (begin '#f ((lambda (g$111$16354) (if g$111$16354 (begin '#f ((lambda (g$111$16356) (if g$111$16356 (begin '#f (append g$111$16354 g$111$16356)) '#f)) ((lambda (g$111$16358) (if (g$111$13211 g$111$16358) (begin '#f ((lambda (g$111$16360) (if g$111$16360 (begin '#f ((lambda (g$111$16362) (if g$111$16362 (begin '#f (append g$111$16360 g$111$16362)) '#f)) ((lambda (g$111$16364) (if (g$111$13211 g$111$16364) (begin '#f ((lambda (g$111$16366) (if g$111$16366 (begin '#f ((lambda (g$111$16368) (if g$111$16368 (begin '#f (append g$111$16366 g$111$16368)) '#f)) ((lambda (g$111$16370) (if (equal? (g$111$13245 g$111$16370) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16364)))) '#f)) ((lambda (g$111$16372) (list g$111$16372)) (g$111$13219 g$111$16364)))) '#f)) (g$111$13223 g$111$16358)))) '#f)) ((lambda (g$111$16374) (list g$111$16374)) (g$111$13219 g$111$16358)))) '#f)) (g$111$13223 g$111$16352)))) '#f)) ((lambda (g$111$16376) (if (g$111$13225 g$111$16376) (if (g$111$13233 g$111$16376 (g$111$13478 'set!)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$16352)))) '#f)) (g$111$13219 g$111$16336)))) '#f)) (g$111$13219 g$111$16328)))) '#f)) (g$111$13223 g$111$16322)))) '#f)) ((lambda (g$111$16378) (if (g$111$13211 g$111$16378) (begin '#f ((lambda (g$111$16380) (if g$111$16380 (begin '#f ((lambda (g$111$16382) (if g$111$16382 (begin '#f (append g$111$16380 g$111$16382)) '#f)) ((lambda (g$111$16384) (if (g$111$13211 g$111$16384) (begin '#f ((lambda (g$111$16386) (if g$111$16386 (begin '#f ((lambda (g$111$16388) (if g$111$16388 (begin '#f (append g$111$16386 g$111$16388)) '#f)) ((lambda (g$111$16390) (if (equal? (g$111$13245 g$111$16390) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16384)))) '#f)) ((lambda (g$111$16392) (list g$111$16392)) (g$111$13219 g$111$16384)))) '#f)) (g$111$13223 g$111$16378)))) '#f)) ((lambda (g$111$16394) (list g$111$16394)) (g$111$13219 g$111$16378)))) '#f)) (g$111$13219 g$111$16322)))) '#f)) (g$111$13223 g$111$16316)))) '#f)) ((lambda (g$111$16396) '()) (g$111$13219 g$111$16316)))) '#f)) g$111$16292))) g$111$16284))) ((lambda (g$111$16398) (if (g$111$13211 g$111$16398) (begin '#f ((lambda (g$111$16400) (if g$111$16400 (begin '#f ((lambda (g$111$16402) (if g$111$16402 (begin '#f (append g$111$16400 g$111$16402)) '#f)) ((lambda (g$111$16404) (if (g$111$13211 g$111$16404) (begin '#f ((lambda (g$111$16406) (if g$111$16406 (begin '#f ((lambda (g$111$16408) (if g$111$16408 (begin '#f (append g$111$16406 g$111$16408)) '#f)) ((lambda (g$111$16410) (if (equal? (g$111$13245 g$111$16410) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16404)))) '#f)) ((lambda (g$111$16412) (list g$111$16412)) (g$111$13219 g$111$16404)))) '#f)) (g$111$13223 g$111$16398)))) '#f)) ((lambda (g$111$16414) '()) (g$111$13219 g$111$16398)))) '#f)) g$111$16284))) g$111$16282))) (set! g$111$13536 (lambda (g$111$16416) ((lambda (g$111$16418) (begin (set! g$111$16418 (lambda (g$111$16420) ((lambda (g$111$16422) ((lambda (g$111$16424) (if (if g$111$16424 (begin '#f (apply (lambda (g$111$16426 g$111$16427) '#t) g$111$16424)) '#f) (apply (lambda (g$111$16430 g$111$16431) (list g$111$16430 g$111$16431 g$111$16430)) g$111$16424) ((lambda (g$111$16434) ((lambda (g$111$16436) (if (if g$111$16436 (begin '#f (apply (lambda (g$111$16438 g$111$16439 g$111$16440) '#t) g$111$16436)) '#f) (apply (lambda (g$111$16444 g$111$16445 g$111$16446) (list g$111$16444 g$111$16445 g$111$16446)) g$111$16436) ((lambda (g$111$16450) ((lambda (g$111$16452) (if (if g$111$16452 (begin '#f (apply (lambda () '#t) g$111$16452)) '#f) (apply (lambda () (error 'expander '"invalid binding" (g$111$13243 g$111$16416 '()))) g$111$16452) (error 'expander '"invalid syntax" (g$111$13243 g$111$16450 '())))) ((lambda (g$111$16454) '()) g$111$16450))) g$111$16434))) ((lambda (g$111$16456) (if (g$111$13211 g$111$16456) (begin '#f ((lambda (g$111$16458) (if g$111$16458 (begin '#f ((lambda (g$111$16460) (if g$111$16460 (begin '#f (append g$111$16458 g$111$16460)) '#f)) ((lambda (g$111$16462) (if (g$111$13211 g$111$16462) (begin '#f ((lambda (g$111$16464) (if g$111$16464 (begin '#f ((lambda (g$111$16466) (if g$111$16466 (begin '#f (append g$111$16464 g$111$16466)) '#f)) ((lambda (g$111$16468) (if (g$111$13211 g$111$16468) (begin '#f ((lambda (g$111$16470) (if g$111$16470 (begin '#f ((lambda (g$111$16472) (if g$111$16472 (begin '#f (append g$111$16470 g$111$16472)) '#f)) ((lambda (g$111$16474) (if (equal? (g$111$13245 g$111$16474) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16468)))) '#f)) ((lambda (g$111$16476) (list g$111$16476)) (g$111$13219 g$111$16468)))) '#f)) (g$111$13223 g$111$16462)))) '#f)) ((lambda (g$111$16478) (list g$111$16478)) (g$111$13219 g$111$16462)))) '#f)) (g$111$13223 g$111$16456)))) '#f)) ((lambda (g$111$16480) (list g$111$16480)) (g$111$13219 g$111$16456)))) '#f)) g$111$16434))) g$111$16422))) ((lambda (g$111$16482) (if (g$111$13211 g$111$16482) (begin '#f ((lambda (g$111$16484) (if g$111$16484 (begin '#f ((lambda (g$111$16486) (if g$111$16486 (begin '#f (append g$111$16484 g$111$16486)) '#f)) ((lambda (g$111$16488) (if (g$111$13211 g$111$16488) (begin '#f ((lambda (g$111$16490) (if g$111$16490 (begin '#f ((lambda (g$111$16492) (if g$111$16492 (begin '#f (append g$111$16490 g$111$16492)) '#f)) ((lambda (g$111$16494) (if (equal? (g$111$13245 g$111$16494) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16488)))) '#f)) ((lambda (g$111$16496) (list g$111$16496)) (g$111$13219 g$111$16488)))) '#f)) (g$111$13223 g$111$16482)))) '#f)) ((lambda (g$111$16498) (list g$111$16498)) (g$111$13219 g$111$16482)))) '#f)) g$111$16422))) g$111$16420))) ((lambda (g$111$16500) ((lambda (g$111$16502) (if (if g$111$16502 (begin '#f (apply (lambda (g$111$16504 g$111$16505 g$111$16506 g$111$16507) '#t) g$111$16502)) '#f) (apply (lambda (g$111$16512 g$111$16513 g$111$16514 g$111$16515) ((lambda (g$111$16520) ((lambda (g$111$16522) (if (if g$111$16522 (begin '#f (apply (lambda (g$111$16524 g$111$16525 g$111$16526) '#t) g$111$16522)) '#f) (apply (lambda (g$111$16530 g$111$16531 g$111$16532) (if (g$111$13235 g$111$16530) (g$111$13512 (list 'letrec (list (list 'loop (list 'lambda g$111$16530 (list 'if g$111$16513 (cons 'begin (cons '(if #f #f) g$111$16514)) (cons 'begin (append g$111$16515 (list (cons 'loop g$111$16532)))))))) (cons 'loop g$111$16531))) (error 'expander '"invalid bindings" (g$111$13243 g$111$16416 '())))) g$111$16522) (error 'expander '"invalid syntax" (g$111$13243 g$111$16520 '())))) ((letrec ((g$111$16536 (lambda (g$111$16538) (if (g$111$13211 g$111$16538) ((lambda (g$111$16540) (if g$111$16540 (begin '#f ((lambda (g$111$16542) (if g$111$16542 (begin '#f (map cons g$111$16540 g$111$16542)) '#f)) (g$111$16536 (g$111$13223 g$111$16538)))) '#f)) ((lambda (g$111$16544) (if (g$111$13211 g$111$16544) (begin '#f ((lambda (g$111$16546) (if g$111$16546 (begin '#f ((lambda (g$111$16548) (if g$111$16548 (begin '#f (append g$111$16546 g$111$16548)) '#f)) ((lambda (g$111$16550) (if (g$111$13211 g$111$16550) (begin '#f ((lambda (g$111$16552) (if g$111$16552 (begin '#f ((lambda (g$111$16554) (if g$111$16554 (begin '#f (append g$111$16552 g$111$16554)) '#f)) ((lambda (g$111$16556) (if (g$111$13211 g$111$16556) (begin '#f ((lambda (g$111$16558) (if g$111$16558 (begin '#f ((lambda (g$111$16560) (if g$111$16560 (begin '#f (append g$111$16558 g$111$16560)) '#f)) ((lambda (g$111$16562) (if (equal? (g$111$13245 g$111$16562) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16556)))) '#f)) ((lambda (g$111$16564) (list g$111$16564)) (g$111$13219 g$111$16556)))) '#f)) (g$111$13223 g$111$16550)))) '#f)) ((lambda (g$111$16566) (list g$111$16566)) (g$111$13219 g$111$16550)))) '#f)) (g$111$13223 g$111$16544)))) '#f)) ((lambda (g$111$16568) (list g$111$16568)) (g$111$13219 g$111$16544)))) '#f)) (g$111$13219 g$111$16538))) (if (g$111$13215 g$111$16538) (list (begin 'x* '()) (begin 'init* '()) (begin 'step* '())) '#f))))) g$111$16536) g$111$16520))) (map g$111$16418 g$111$16512))) g$111$16502) (error 'expander '"invalid syntax" (g$111$13243 g$111$16500 '())))) ((lambda (g$111$16570) (if (g$111$13211 g$111$16570) (begin '#f ((lambda (g$111$16572) (if g$111$16572 (begin '#f ((lambda (g$111$16574) (if g$111$16574 (begin '#f (append g$111$16572 g$111$16574)) '#f)) ((lambda (g$111$16576) (if (g$111$13211 g$111$16576) (begin '#f ((lambda (g$111$16578) (if g$111$16578 (begin '#f ((lambda (g$111$16580) (if g$111$16580 (begin '#f (append g$111$16578 g$111$16580)) '#f)) ((lambda (g$111$16582) (if (g$111$13211 g$111$16582) (begin '#f ((lambda (g$111$16584) (if g$111$16584 (begin '#f ((lambda (g$111$16586) (if g$111$16586 (begin '#f (append g$111$16584 g$111$16586)) '#f)) ((letrec ((g$111$16588 (lambda (g$111$16590) (if (g$111$13211 g$111$16590) ((lambda (g$111$16592) (if g$111$16592 (begin '#f ((lambda (g$111$16594) (if g$111$16594 (begin '#f (map cons g$111$16592 g$111$16594)) '#f)) (g$111$16588 (g$111$13223 g$111$16590)))) '#f)) ((lambda (g$111$16596) (list g$111$16596)) (g$111$13219 g$111$16590))) (if (g$111$13215 g$111$16590) (list (begin 'command* '())) '#f))))) g$111$16588) (g$111$13223 g$111$16582)))) '#f)) ((lambda (g$111$16598) (if (g$111$13211 g$111$16598) (begin '#f ((lambda (g$111$16600) (if g$111$16600 (begin '#f ((lambda (g$111$16602) (if g$111$16602 (begin '#f (append g$111$16600 g$111$16602)) '#f)) ((letrec ((g$111$16604 (lambda (g$111$16606) (if (g$111$13211 g$111$16606) ((lambda (g$111$16608) (if g$111$16608 (begin '#f ((lambda (g$111$16610) (if g$111$16610 (begin '#f (map cons g$111$16608 g$111$16610)) '#f)) (g$111$16604 (g$111$13223 g$111$16606)))) '#f)) ((lambda (g$111$16612) (list g$111$16612)) (g$111$13219 g$111$16606))) (if (g$111$13215 g$111$16606) (list (begin 'expr* '())) '#f))))) g$111$16604) (g$111$13223 g$111$16598)))) '#f)) ((lambda (g$111$16614) (list g$111$16614)) (g$111$13219 g$111$16598)))) '#f)) (g$111$13219 g$111$16582)))) '#f)) (g$111$13223 g$111$16576)))) '#f)) ((letrec ((g$111$16616 (lambda (g$111$16618) (if (g$111$13211 g$111$16618) ((lambda (g$111$16620) (if g$111$16620 (begin '#f ((lambda (g$111$16622) (if g$111$16622 (begin '#f (map cons g$111$16620 g$111$16622)) '#f)) (g$111$16616 (g$111$13223 g$111$16618)))) '#f)) ((lambda (g$111$16624) (list g$111$16624)) (g$111$13219 g$111$16618))) (if (g$111$13215 g$111$16618) (list (begin 'binding* '())) '#f))))) g$111$16616) (g$111$13219 g$111$16576)))) '#f)) (g$111$13223 g$111$16570)))) '#f)) ((lambda (g$111$16626) '()) (g$111$13219 g$111$16570)))) '#f)) g$111$16500))) g$111$16416))) '#f))) (set! g$111$13538 (lambda (g$111$16628) ((lambda (g$111$16630) ((lambda (g$111$16632) (if (if g$111$16632 (begin '#f (apply (lambda (g$111$16634 g$111$16635 g$111$16636 g$111$16637) (for-all g$111$13225 g$111$16634)) g$111$16632)) '#f) (apply (lambda (g$111$16642 g$111$16643 g$111$16644 g$111$16645) (g$111$13512 (letrec ((g$111$16650 (lambda (g$111$16652) (if (null? g$111$16652) (cons 'let (cons '() (cons g$111$16644 g$111$16645))) (list 'let (list (car g$111$16652)) (g$111$16650 (cdr g$111$16652))))))) (g$111$16650 (map list g$111$16642 g$111$16643))))) g$111$16632) (error 'expander '"invalid syntax" (g$111$13243 g$111$16630 '())))) ((lambda (g$111$16654) (if (g$111$13211 g$111$16654) (begin '#f ((lambda (g$111$16656) (if g$111$16656 (begin '#f ((lambda (g$111$16658) (if g$111$16658 (begin '#f (append g$111$16656 g$111$16658)) '#f)) ((lambda (g$111$16660) (if (g$111$13211 g$111$16660) (begin '#f ((lambda (g$111$16662) (if g$111$16662 (begin '#f ((lambda (g$111$16664) (if g$111$16664 (begin '#f (append g$111$16662 g$111$16664)) '#f)) ((lambda (g$111$16666) (if (g$111$13211 g$111$16666) (begin '#f ((lambda (g$111$16668) (if g$111$16668 (begin '#f ((lambda (g$111$16670) (if g$111$16670 (begin '#f (append g$111$16668 g$111$16670)) '#f)) ((letrec ((g$111$16672 (lambda (g$111$16674) (if (g$111$13211 g$111$16674) ((lambda (g$111$16676) (if g$111$16676 (begin '#f ((lambda (g$111$16678) (if g$111$16678 (begin '#f (map cons g$111$16676 g$111$16678)) '#f)) (g$111$16672 (g$111$13223 g$111$16674)))) '#f)) ((lambda (g$111$16680) (list g$111$16680)) (g$111$13219 g$111$16674))) (if (g$111$13215 g$111$16674) (list (begin 'b* '())) '#f))))) g$111$16672) (g$111$13223 g$111$16666)))) '#f)) ((lambda (g$111$16682) (list g$111$16682)) (g$111$13219 g$111$16666)))) '#f)) (g$111$13223 g$111$16660)))) '#f)) ((letrec ((g$111$16684 (lambda (g$111$16686) (if (g$111$13211 g$111$16686) ((lambda (g$111$16688) (if g$111$16688 (begin '#f ((lambda (g$111$16690) (if g$111$16690 (begin '#f (map cons g$111$16688 g$111$16690)) '#f)) (g$111$16684 (g$111$13223 g$111$16686)))) '#f)) ((lambda (g$111$16692) (if (g$111$13211 g$111$16692) (begin '#f ((lambda (g$111$16694) (if g$111$16694 (begin '#f ((lambda (g$111$16696) (if g$111$16696 (begin '#f (append g$111$16694 g$111$16696)) '#f)) ((lambda (g$111$16698) (if (g$111$13211 g$111$16698) (begin '#f ((lambda (g$111$16700) (if g$111$16700 (begin '#f ((lambda (g$111$16702) (if g$111$16702 (begin '#f (append g$111$16700 g$111$16702)) '#f)) ((lambda (g$111$16704) (if (equal? (g$111$13245 g$111$16704) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16698)))) '#f)) ((lambda (g$111$16706) (list g$111$16706)) (g$111$13219 g$111$16698)))) '#f)) (g$111$13223 g$111$16692)))) '#f)) ((lambda (g$111$16708) (list g$111$16708)) (g$111$13219 g$111$16692)))) '#f)) (g$111$13219 g$111$16686))) (if (g$111$13215 g$111$16686) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$111$16684) (g$111$13219 g$111$16660)))) '#f)) (g$111$13223 g$111$16654)))) '#f)) ((lambda (g$111$16710) '()) (g$111$13219 g$111$16654)))) '#f)) g$111$16630))) g$111$16628))) (set! g$111$13540 (lambda (g$111$16712) ((lambda (g$111$16714) ((lambda (g$111$16716) (if (if g$111$16716 (begin '#f (apply (lambda () '#t) g$111$16716)) '#f) (apply (lambda () '#f) g$111$16716) ((lambda (g$111$16718) ((lambda (g$111$16720) (if (if g$111$16720 (begin '#f (apply (lambda (g$111$16722 g$111$16723) '#t) g$111$16720)) '#f) (apply (lambda (g$111$16726 g$111$16727) (g$111$13512 (letrec ((g$111$16730 (lambda (g$111$16732 g$111$16733) (if (null? g$111$16733) (list 'begin '#f g$111$16732) (list 'let (list (list 't g$111$16732)) (list 'if 't 't (g$111$16730 (car g$111$16733) (cdr g$111$16733)))))))) (g$111$16730 g$111$16726 g$111$16727)))) g$111$16720) (error 'expander '"invalid syntax" (g$111$13243 g$111$16718 '())))) ((lambda (g$111$16736) (if (g$111$13211 g$111$16736) (begin '#f ((lambda (g$111$16738) (if g$111$16738 (begin '#f ((lambda (g$111$16740) (if g$111$16740 (begin '#f (append g$111$16738 g$111$16740)) '#f)) ((lambda (g$111$16742) (if (g$111$13211 g$111$16742) (begin '#f ((lambda (g$111$16744) (if g$111$16744 (begin '#f ((lambda (g$111$16746) (if g$111$16746 (begin '#f (append g$111$16744 g$111$16746)) '#f)) ((letrec ((g$111$16748 (lambda (g$111$16750) (if (g$111$13211 g$111$16750) ((lambda (g$111$16752) (if g$111$16752 (begin '#f ((lambda (g$111$16754) (if g$111$16754 (begin '#f (map cons g$111$16752 g$111$16754)) '#f)) (g$111$16748 (g$111$13223 g$111$16750)))) '#f)) ((lambda (g$111$16756) (list g$111$16756)) (g$111$13219 g$111$16750))) (if (g$111$13215 g$111$16750) (list (begin 'e* '())) '#f))))) g$111$16748) (g$111$13223 g$111$16742)))) '#f)) ((lambda (g$111$16758) (list g$111$16758)) (g$111$13219 g$111$16742)))) '#f)) (g$111$13223 g$111$16736)))) '#f)) ((lambda (g$111$16760) '()) (g$111$13219 g$111$16736)))) '#f)) g$111$16718))) g$111$16714))) ((lambda (g$111$16762) (if (g$111$13211 g$111$16762) (begin '#f ((lambda (g$111$16764) (if g$111$16764 (begin '#f ((lambda (g$111$16766) (if g$111$16766 (begin '#f (append g$111$16764 g$111$16766)) '#f)) ((lambda (g$111$16768) (if (equal? (g$111$13245 g$111$16768) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16762)))) '#f)) ((lambda (g$111$16770) '()) (g$111$13219 g$111$16762)))) '#f)) g$111$16714))) g$111$16712))) (set! g$111$13542 (lambda (g$111$16772) ((lambda (g$111$16774) ((lambda (g$111$16776) (if (if g$111$16776 (begin '#f (apply (lambda () '#t) g$111$16776)) '#f) (apply (lambda () '#t) g$111$16776) ((lambda (g$111$16778) ((lambda (g$111$16780) (if (if g$111$16780 (begin '#f (apply (lambda (g$111$16782 g$111$16783) '#t) g$111$16780)) '#f) (apply (lambda (g$111$16786 g$111$16787) (g$111$13512 (letrec ((g$111$16790 (lambda (g$111$16792 g$111$16793) (if (null? g$111$16793) (list 'begin '#f g$111$16792) (cons 'if (cons g$111$16792 (cons (g$111$16790 (car g$111$16793) (cdr g$111$16793)) '(#f)))))))) (g$111$16790 g$111$16786 g$111$16787)))) g$111$16780) (error 'expander '"invalid syntax" (g$111$13243 g$111$16778 '())))) ((lambda (g$111$16796) (if (g$111$13211 g$111$16796) (begin '#f ((lambda (g$111$16798) (if g$111$16798 (begin '#f ((lambda (g$111$16800) (if g$111$16800 (begin '#f (append g$111$16798 g$111$16800)) '#f)) ((lambda (g$111$16802) (if (g$111$13211 g$111$16802) (begin '#f ((lambda (g$111$16804) (if g$111$16804 (begin '#f ((lambda (g$111$16806) (if g$111$16806 (begin '#f (append g$111$16804 g$111$16806)) '#f)) ((letrec ((g$111$16808 (lambda (g$111$16810) (if (g$111$13211 g$111$16810) ((lambda (g$111$16812) (if g$111$16812 (begin '#f ((lambda (g$111$16814) (if g$111$16814 (begin '#f (map cons g$111$16812 g$111$16814)) '#f)) (g$111$16808 (g$111$13223 g$111$16810)))) '#f)) ((lambda (g$111$16816) (list g$111$16816)) (g$111$13219 g$111$16810))) (if (g$111$13215 g$111$16810) (list (begin 'e* '())) '#f))))) g$111$16808) (g$111$13223 g$111$16802)))) '#f)) ((lambda (g$111$16818) (list g$111$16818)) (g$111$13219 g$111$16802)))) '#f)) (g$111$13223 g$111$16796)))) '#f)) ((lambda (g$111$16820) '()) (g$111$13219 g$111$16796)))) '#f)) g$111$16778))) g$111$16774))) ((lambda (g$111$16822) (if (g$111$13211 g$111$16822) (begin '#f ((lambda (g$111$16824) (if g$111$16824 (begin '#f ((lambda (g$111$16826) (if g$111$16826 (begin '#f (append g$111$16824 g$111$16826)) '#f)) ((lambda (g$111$16828) (if (equal? (g$111$13245 g$111$16828) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16822)))) '#f)) ((lambda (g$111$16830) '()) (g$111$13219 g$111$16822)))) '#f)) g$111$16774))) g$111$16772))) (set! g$111$13544 (lambda (g$111$16832) ((lambda (g$111$16834) ((lambda (g$111$16836) (if (if g$111$16836 (begin '#f (apply (lambda (g$111$16838 g$111$16839) '#t) g$111$16836)) '#f) (apply (lambda (g$111$16842 g$111$16843) (g$111$13512 (letrec ((g$111$16846 (lambda (g$111$16848 g$111$16849) (if (null? g$111$16849) ((lambda (g$111$16852) ((lambda (g$111$16854) (if (if g$111$16854 (begin '#f (apply (lambda (g$111$16856 g$111$16857) '#t) g$111$16854)) '#f) (apply (lambda (g$111$16860 g$111$16861) (cons 'begin (cons g$111$16860 g$111$16861))) g$111$16854) ((lambda (g$111$16864) ((lambda (g$111$16866) (if (if g$111$16866 (begin '#f (apply (lambda (g$111$16868 g$111$16869) '#t) g$111$16866)) '#f) (apply (lambda (g$111$16872 g$111$16873) (list 'let (list (list 't g$111$16872)) (list 'if 't (cons g$111$16873 '(t))))) g$111$16866) ((lambda (g$111$16876) ((lambda (g$111$16878) (if (if g$111$16878 (begin '#f (apply (lambda (g$111$16880) '#t) g$111$16878)) '#f) (apply (lambda (g$111$16882) (cons 'or (cons g$111$16882 '((if #f #f))))) g$111$16878) ((lambda (g$111$16884) ((lambda (g$111$16886) (if (if g$111$16886 (begin '#f (apply (lambda (g$111$16888 g$111$16889) '#t) g$111$16886)) '#f) (apply (lambda (g$111$16892 g$111$16893) (list 'if g$111$16892 (cons 'begin g$111$16893))) g$111$16886) ((lambda (g$111$16896) ((lambda (g$111$16898) (if (if g$111$16898 (begin '#f (apply (lambda () '#t) g$111$16898)) '#f) (apply (lambda () (error 'expander '"invalid last clause" (g$111$13243 g$111$16832 '()))) g$111$16898) (error 'expander '"invalid syntax" (g$111$13243 g$111$16896 '())))) ((lambda (g$111$16900) '()) g$111$16896))) g$111$16884))) ((lambda (g$111$16902) (if (g$111$13211 g$111$16902) (begin '#f ((lambda (g$111$16904) (if g$111$16904 (begin '#f ((lambda (g$111$16906) (if g$111$16906 (begin '#f (append g$111$16904 g$111$16906)) '#f)) ((letrec ((g$111$16908 (lambda (g$111$16910) (if (g$111$13211 g$111$16910) ((lambda (g$111$16912) (if g$111$16912 (begin '#f ((lambda (g$111$16914) (if g$111$16914 (begin '#f (map cons g$111$16912 g$111$16914)) '#f)) (g$111$16908 (g$111$13223 g$111$16910)))) '#f)) ((lambda (g$111$16916) (list g$111$16916)) (g$111$13219 g$111$16910))) (if (g$111$13215 g$111$16910) (list (begin 'e* '())) '#f))))) g$111$16908) (g$111$13223 g$111$16902)))) '#f)) ((lambda (g$111$16918) (list g$111$16918)) (g$111$13219 g$111$16902)))) '#f)) g$111$16884))) g$111$16876))) ((lambda (g$111$16920) (if (g$111$13211 g$111$16920) (begin '#f ((lambda (g$111$16922) (if g$111$16922 (begin '#f ((lambda (g$111$16924) (if g$111$16924 (begin '#f (append g$111$16922 g$111$16924)) '#f)) ((lambda (g$111$16926) (if (equal? (g$111$13245 g$111$16926) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16920)))) '#f)) ((lambda (g$111$16928) (list g$111$16928)) (g$111$13219 g$111$16920)))) '#f)) g$111$16876))) g$111$16864))) ((lambda (g$111$16930) (if (g$111$13211 g$111$16930) (begin '#f ((lambda (g$111$16932) (if g$111$16932 (begin '#f ((lambda (g$111$16934) (if g$111$16934 (begin '#f (append g$111$16932 g$111$16934)) '#f)) ((lambda (g$111$16936) (if (g$111$13211 g$111$16936) (begin '#f ((lambda (g$111$16938) (if g$111$16938 (begin '#f ((lambda (g$111$16940) (if g$111$16940 (begin '#f (append g$111$16938 g$111$16940)) '#f)) ((lambda (g$111$16942) (if (g$111$13211 g$111$16942) (begin '#f ((lambda (g$111$16944) (if g$111$16944 (begin '#f ((lambda (g$111$16946) (if g$111$16946 (begin '#f (append g$111$16944 g$111$16946)) '#f)) ((lambda (g$111$16948) (if (equal? (g$111$13245 g$111$16948) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$16942)))) '#f)) ((lambda (g$111$16950) (list g$111$16950)) (g$111$13219 g$111$16942)))) '#f)) (g$111$13223 g$111$16936)))) '#f)) ((lambda (g$111$16952) (if (g$111$13225 g$111$16952) (if (g$111$13233 g$111$16952 (g$111$13478 '=>)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$16936)))) '#f)) (g$111$13223 g$111$16930)))) '#f)) ((lambda (g$111$16954) (list g$111$16954)) (g$111$13219 g$111$16930)))) '#f)) g$111$16864))) g$111$16852))) ((lambda (g$111$16956) (if (g$111$13211 g$111$16956) (begin '#f ((lambda (g$111$16958) (if g$111$16958 (begin '#f ((lambda (g$111$16960) (if g$111$16960 (begin '#f (append g$111$16958 g$111$16960)) '#f)) ((lambda (g$111$16962) (if (g$111$13211 g$111$16962) (begin '#f ((lambda (g$111$16964) (if g$111$16964 (begin '#f ((lambda (g$111$16966) (if g$111$16966 (begin '#f (append g$111$16964 g$111$16966)) '#f)) ((letrec ((g$111$16968 (lambda (g$111$16970) (if (g$111$13211 g$111$16970) ((lambda (g$111$16972) (if g$111$16972 (begin '#f ((lambda (g$111$16974) (if g$111$16974 (begin '#f (map cons g$111$16972 g$111$16974)) '#f)) (g$111$16968 (g$111$13223 g$111$16970)))) '#f)) ((lambda (g$111$16976) (list g$111$16976)) (g$111$13219 g$111$16970))) (if (g$111$13215 g$111$16970) (list (begin 'e* '())) '#f))))) g$111$16968) (g$111$13223 g$111$16962)))) '#f)) ((lambda (g$111$16978) (list g$111$16978)) (g$111$13219 g$111$16962)))) '#f)) (g$111$13223 g$111$16956)))) '#f)) ((lambda (g$111$16980) (if (g$111$13225 g$111$16980) (if (g$111$13233 g$111$16980 (g$111$13478 'else)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$16956)))) '#f)) g$111$16852))) g$111$16848) ((lambda (g$111$16982) ((lambda (g$111$16984) (if (if g$111$16984 (begin '#f (apply (lambda (g$111$16986 g$111$16987) '#t) g$111$16984)) '#f) (apply (lambda (g$111$16990 g$111$16991) (error 'expander '"incorrect position of keyword else" (g$111$13243 g$111$16832 '()))) g$111$16984) ((lambda (g$111$16994) ((lambda (g$111$16996) (if (if g$111$16996 (begin '#f (apply (lambda (g$111$16998 g$111$16999) '#t) g$111$16996)) '#f) (apply (lambda (g$111$17002 g$111$17003) (list 'let (list (list 't g$111$17002)) (list 'if 't (cons g$111$17003 '(t)) (g$111$16846 (car g$111$16849) (cdr g$111$16849))))) g$111$16996) ((lambda (g$111$17006) ((lambda (g$111$17008) (if (if g$111$17008 (begin '#f (apply (lambda (g$111$17010) '#t) g$111$17008)) '#f) (apply (lambda (g$111$17012) (list 'or g$111$17012 (g$111$16846 (car g$111$16849) (cdr g$111$16849)))) g$111$17008) ((lambda (g$111$17014) ((lambda (g$111$17016) (if (if g$111$17016 (begin '#f (apply (lambda (g$111$17018 g$111$17019) '#t) g$111$17016)) '#f) (apply (lambda (g$111$17022 g$111$17023) (list 'if g$111$17022 (cons 'begin g$111$17023) (g$111$16846 (car g$111$16849) (cdr g$111$16849)))) g$111$17016) ((lambda (g$111$17026) ((lambda (g$111$17028) (if (if g$111$17028 (begin '#f (apply (lambda () '#t) g$111$17028)) '#f) (apply (lambda () (error 'expander '"invalid last clause" (g$111$13243 g$111$16832 '()))) g$111$17028) (error 'expander '"invalid syntax" (g$111$13243 g$111$17026 '())))) ((lambda (g$111$17030) '()) g$111$17026))) g$111$17014))) ((lambda (g$111$17032) (if (g$111$13211 g$111$17032) (begin '#f ((lambda (g$111$17034) (if g$111$17034 (begin '#f ((lambda (g$111$17036) (if g$111$17036 (begin '#f (append g$111$17034 g$111$17036)) '#f)) ((letrec ((g$111$17038 (lambda (g$111$17040) (if (g$111$13211 g$111$17040) ((lambda (g$111$17042) (if g$111$17042 (begin '#f ((lambda (g$111$17044) (if g$111$17044 (begin '#f (map cons g$111$17042 g$111$17044)) '#f)) (g$111$17038 (g$111$13223 g$111$17040)))) '#f)) ((lambda (g$111$17046) (list g$111$17046)) (g$111$13219 g$111$17040))) (if (g$111$13215 g$111$17040) (list (begin 'e* '())) '#f))))) g$111$17038) (g$111$13223 g$111$17032)))) '#f)) ((lambda (g$111$17048) (list g$111$17048)) (g$111$13219 g$111$17032)))) '#f)) g$111$17014))) g$111$17006))) ((lambda (g$111$17050) (if (g$111$13211 g$111$17050) (begin '#f ((lambda (g$111$17052) (if g$111$17052 (begin '#f ((lambda (g$111$17054) (if g$111$17054 (begin '#f (append g$111$17052 g$111$17054)) '#f)) ((lambda (g$111$17056) (if (equal? (g$111$13245 g$111$17056) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17050)))) '#f)) ((lambda (g$111$17058) (list g$111$17058)) (g$111$13219 g$111$17050)))) '#f)) g$111$17006))) g$111$16994))) ((lambda (g$111$17060) (if (g$111$13211 g$111$17060) (begin '#f ((lambda (g$111$17062) (if g$111$17062 (begin '#f ((lambda (g$111$17064) (if g$111$17064 (begin '#f (append g$111$17062 g$111$17064)) '#f)) ((lambda (g$111$17066) (if (g$111$13211 g$111$17066) (begin '#f ((lambda (g$111$17068) (if g$111$17068 (begin '#f ((lambda (g$111$17070) (if g$111$17070 (begin '#f (append g$111$17068 g$111$17070)) '#f)) ((lambda (g$111$17072) (if (g$111$13211 g$111$17072) (begin '#f ((lambda (g$111$17074) (if g$111$17074 (begin '#f ((lambda (g$111$17076) (if g$111$17076 (begin '#f (append g$111$17074 g$111$17076)) '#f)) ((lambda (g$111$17078) (if (equal? (g$111$13245 g$111$17078) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17072)))) '#f)) ((lambda (g$111$17080) (list g$111$17080)) (g$111$13219 g$111$17072)))) '#f)) (g$111$13223 g$111$17066)))) '#f)) ((lambda (g$111$17082) (if (g$111$13225 g$111$17082) (if (g$111$13233 g$111$17082 (g$111$13478 '=>)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17066)))) '#f)) (g$111$13223 g$111$17060)))) '#f)) ((lambda (g$111$17084) (list g$111$17084)) (g$111$13219 g$111$17060)))) '#f)) g$111$16994))) g$111$16982))) ((lambda (g$111$17086) (if (g$111$13211 g$111$17086) (begin '#f ((lambda (g$111$17088) (if g$111$17088 (begin '#f ((lambda (g$111$17090) (if g$111$17090 (begin '#f (append g$111$17088 g$111$17090)) '#f)) ((lambda (g$111$17092) (if (g$111$13211 g$111$17092) (begin '#f ((lambda (g$111$17094) (if g$111$17094 (begin '#f ((lambda (g$111$17096) (if g$111$17096 (begin '#f (append g$111$17094 g$111$17096)) '#f)) ((letrec ((g$111$17098 (lambda (g$111$17100) (if (g$111$13211 g$111$17100) ((lambda (g$111$17102) (if g$111$17102 (begin '#f ((lambda (g$111$17104) (if g$111$17104 (begin '#f (map cons g$111$17102 g$111$17104)) '#f)) (g$111$17098 (g$111$13223 g$111$17100)))) '#f)) ((lambda (g$111$17106) (list g$111$17106)) (g$111$13219 g$111$17100))) (if (g$111$13215 g$111$17100) (list (begin 'e* '())) '#f))))) g$111$17098) (g$111$13223 g$111$17092)))) '#f)) ((lambda (g$111$17108) (list g$111$17108)) (g$111$13219 g$111$17092)))) '#f)) (g$111$13223 g$111$17086)))) '#f)) ((lambda (g$111$17110) (if (g$111$13225 g$111$17110) (if (g$111$13233 g$111$17110 (g$111$13478 'else)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17086)))) '#f)) g$111$16982))) g$111$16848))))) (g$111$16846 g$111$16842 g$111$16843)))) g$111$16836) (error 'expander '"invalid syntax" (g$111$13243 g$111$16834 '())))) ((lambda (g$111$17112) (if (g$111$13211 g$111$17112) (begin '#f ((lambda (g$111$17114) (if g$111$17114 (begin '#f ((lambda (g$111$17116) (if g$111$17116 (begin '#f (append g$111$17114 g$111$17116)) '#f)) ((lambda (g$111$17118) (if (g$111$13211 g$111$17118) (begin '#f ((lambda (g$111$17120) (if g$111$17120 (begin '#f ((lambda (g$111$17122) (if g$111$17122 (begin '#f (append g$111$17120 g$111$17122)) '#f)) ((letrec ((g$111$17124 (lambda (g$111$17126) (if (g$111$13211 g$111$17126) ((lambda (g$111$17128) (if g$111$17128 (begin '#f ((lambda (g$111$17130) (if g$111$17130 (begin '#f (map cons g$111$17128 g$111$17130)) '#f)) (g$111$17124 (g$111$13223 g$111$17126)))) '#f)) ((lambda (g$111$17132) (list g$111$17132)) (g$111$13219 g$111$17126))) (if (g$111$13215 g$111$17126) (list (begin 'cls* '())) '#f))))) g$111$17124) (g$111$13223 g$111$17118)))) '#f)) ((lambda (g$111$17134) (list g$111$17134)) (g$111$13219 g$111$17118)))) '#f)) (g$111$13223 g$111$17112)))) '#f)) ((lambda (g$111$17136) '()) (g$111$13219 g$111$17112)))) '#f)) g$111$16834))) g$111$16832))) (set! g$111$13546 (lambda (g$111$17138) ((lambda (g$111$17140) ((lambda (g$111$17142) (if (if g$111$17142 (begin '#f (apply (lambda (g$111$17144 g$111$17145) '#t) g$111$17142)) '#f) (apply (lambda (g$111$17148 g$111$17149) ((lambda (g$111$17152) (begin (if (string? g$111$17152) (void) (error 'expander '"invalid syntax" (g$111$13245 g$111$17138))) (with-input-from-file g$111$17152 (lambda () (letrec ((g$111$17154 (lambda (g$111$17156) ((lambda (g$111$17158) (if (eof-object? g$111$17158) (cons (g$111$13512 'begin) (g$111$13191 g$111$17148 (reverse g$111$17156))) (g$111$17154 (cons g$111$17158 g$111$17156)))) (read))))) (g$111$17154 '())))))) (g$111$13245 g$111$17149))) g$111$17142) (error 'expander '"invalid syntax" (g$111$13243 g$111$17140 '())))) ((lambda (g$111$17160) (if (g$111$13211 g$111$17160) (begin '#f ((lambda (g$111$17162) (if g$111$17162 (begin '#f ((lambda (g$111$17164) (if g$111$17164 (begin '#f (append g$111$17162 g$111$17164)) '#f)) ((lambda (g$111$17166) (if (g$111$13211 g$111$17166) (begin '#f ((lambda (g$111$17168) (if g$111$17168 (begin '#f ((lambda (g$111$17170) (if g$111$17170 (begin '#f (append g$111$17168 g$111$17170)) '#f)) ((lambda (g$111$17172) (if (equal? (g$111$13245 g$111$17172) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17166)))) '#f)) ((lambda (g$111$17174) (list g$111$17174)) (g$111$13219 g$111$17166)))) '#f)) (g$111$13223 g$111$17160)))) '#f)) ((lambda (g$111$17176) (list g$111$17176)) (g$111$13219 g$111$17160)))) '#f)) g$111$17140))) g$111$17138))) (set! g$111$13548 (lambda (g$111$17178) ((lambda (g$111$17180) ((lambda (g$111$17182) (if (if g$111$17182 (begin '#f (apply (lambda (g$111$17184 g$111$17185 g$111$17186) '#t) g$111$17182)) '#f) (apply (lambda (g$111$17190 g$111$17191 g$111$17192) (begin (if (for-all (lambda (g$111$17196) (if (g$111$13225 g$111$17196) (if (not (g$111$13233 g$111$17196 (g$111$13478 '|...|))) (begin '#f (not (g$111$13233 g$111$17196 (g$111$13478 '_)))) '#f) '#f)) g$111$17190) (void) (error 'expander '"invalid literals" (g$111$13243 g$111$17178 '()))) (g$111$13512 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g$111$17190 (map (lambda (g$111$17198 g$111$17199) (list g$111$17198 (list 'syntax g$111$17199))) g$111$17191 g$111$17192)))))))) g$111$17182) (error 'expander '"invalid syntax" (g$111$13243 g$111$17180 '())))) ((lambda (g$111$17202) (if (g$111$13211 g$111$17202) (begin '#f ((lambda (g$111$17204) (if g$111$17204 (begin '#f ((lambda (g$111$17206) (if g$111$17206 (begin '#f (append g$111$17204 g$111$17206)) '#f)) ((lambda (g$111$17208) (if (g$111$13211 g$111$17208) (begin '#f ((lambda (g$111$17210) (if g$111$17210 (begin '#f ((lambda (g$111$17212) (if g$111$17212 (begin '#f (append g$111$17210 g$111$17212)) '#f)) ((letrec ((g$111$17214 (lambda (g$111$17216) (if (g$111$13211 g$111$17216) ((lambda (g$111$17218) (if g$111$17218 (begin '#f ((lambda (g$111$17220) (if g$111$17220 (begin '#f (map cons g$111$17218 g$111$17220)) '#f)) (g$111$17214 (g$111$13223 g$111$17216)))) '#f)) ((lambda (g$111$17222) (if (g$111$13211 g$111$17222) (begin '#f ((lambda (g$111$17224) (if g$111$17224 (begin '#f ((lambda (g$111$17226) (if g$111$17226 (begin '#f (append g$111$17224 g$111$17226)) '#f)) ((lambda (g$111$17228) (if (g$111$13211 g$111$17228) (begin '#f ((lambda (g$111$17230) (if g$111$17230 (begin '#f ((lambda (g$111$17232) (if g$111$17232 (begin '#f (append g$111$17230 g$111$17232)) '#f)) ((lambda (g$111$17234) (if (equal? (g$111$13245 g$111$17234) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17228)))) '#f)) ((lambda (g$111$17236) (list g$111$17236)) (g$111$13219 g$111$17228)))) '#f)) (g$111$13223 g$111$17222)))) '#f)) ((lambda (g$111$17238) (list g$111$17238)) (g$111$13219 g$111$17222)))) '#f)) (g$111$13219 g$111$17216))) (if (g$111$13215 g$111$17216) (list (begin 'pat* '()) (begin 'tmp* '())) '#f))))) g$111$17214) (g$111$13223 g$111$17208)))) '#f)) ((letrec ((g$111$17240 (lambda (g$111$17242) (if (g$111$13211 g$111$17242) ((lambda (g$111$17244) (if g$111$17244 (begin '#f ((lambda (g$111$17246) (if g$111$17246 (begin '#f (map cons g$111$17244 g$111$17246)) '#f)) (g$111$17240 (g$111$13223 g$111$17242)))) '#f)) ((lambda (g$111$17248) (list g$111$17248)) (g$111$13219 g$111$17242))) (if (g$111$13215 g$111$17242) (list (begin 'lits '())) '#f))))) g$111$17240) (g$111$13219 g$111$17208)))) '#f)) (g$111$13223 g$111$17202)))) '#f)) ((lambda (g$111$17250) '()) (g$111$13219 g$111$17202)))) '#f)) g$111$17180))) g$111$17178))) (set! g$111$13550 ((lambda () ((lambda (g$111$17274 g$111$17276 g$111$17278 g$111$17280 g$111$17282 g$111$17284) (begin (set! g$111$17274 (lambda (g$111$17896 g$111$17897) (letrec ((g$111$17900 (lambda (g$111$17902) (if (null? g$111$17902) g$111$17897 (g$111$17276 (car g$111$17902) (g$111$17900 (cdr g$111$17902))))))) (g$111$17900 g$111$17896)))) (set! g$111$17276 (lambda (g$111$17790 g$111$17791) ((lambda (g$111$17794) ((lambda (g$111$17796) (if (if g$111$17796 (begin '#f (apply (lambda (g$111$17798) '#t) g$111$17796)) '#f) (apply (lambda (g$111$17800) ((lambda (g$111$17802) ((lambda (g$111$17804) (if (if g$111$17804 (begin '#f (apply (lambda (g$111$17806) '#t) g$111$17804)) '#f) (apply (lambda (g$111$17808) (list (g$111$13478 'quote) (cons g$111$17808 g$111$17800))) g$111$17804) ((lambda (g$111$17810) ((lambda (g$111$17812) (if (if g$111$17812 (begin '#f (apply (lambda () '#t) g$111$17812)) '#f) (apply (lambda () ((lambda (g$111$17814) ((lambda (g$111$17816) (if (if g$111$17816 (begin '#f (apply (lambda () '#t) g$111$17816)) '#f) (apply (lambda () (list (g$111$13478 'list) g$111$17790)) g$111$17816) ((lambda (g$111$17818) ((lambda (g$111$17820) (if (if g$111$17820 (begin '#f (apply (lambda () '#t) g$111$17820)) '#f) (apply (lambda () (list (g$111$13478 'cons) g$111$17790 g$111$17791)) g$111$17820) (error 'expander '"invalid syntax" (g$111$13243 g$111$17818 '())))) ((lambda (g$111$17822) '()) g$111$17818))) g$111$17814))) ((lambda (g$111$17824) (if (equal? (g$111$13245 g$111$17824) '()) (begin '#f '()) '#f)) g$111$17814))) g$111$17800)) g$111$17812) (error 'expander '"invalid syntax" (g$111$13243 g$111$17810 '())))) ((lambda (g$111$17826) '()) g$111$17810))) g$111$17802))) ((lambda (g$111$17828) (if (g$111$13211 g$111$17828) (begin '#f ((lambda (g$111$17830) (if g$111$17830 (begin '#f ((lambda (g$111$17832) (if g$111$17832 (begin '#f (append g$111$17830 g$111$17832)) '#f)) ((lambda (g$111$17834) (if (g$111$13211 g$111$17834) (begin '#f ((lambda (g$111$17836) (if g$111$17836 (begin '#f ((lambda (g$111$17838) (if g$111$17838 (begin '#f (append g$111$17836 g$111$17838)) '#f)) ((lambda (g$111$17840) (if (equal? (g$111$13245 g$111$17840) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17834)))) '#f)) ((lambda (g$111$17842) (list g$111$17842)) (g$111$13219 g$111$17834)))) '#f)) (g$111$13223 g$111$17828)))) '#f)) ((lambda (g$111$17844) (if (g$111$13225 g$111$17844) (if (g$111$13233 g$111$17844 (g$111$13478 'quote)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17828)))) '#f)) g$111$17802))) g$111$17790)) g$111$17796) ((lambda (g$111$17846) ((lambda (g$111$17848) (if (if g$111$17848 (begin '#f (apply (lambda (g$111$17850) '#t) g$111$17848)) '#f) (apply (lambda (g$111$17852) (cons* (g$111$13478 'list) g$111$17790 g$111$17852)) g$111$17848) ((lambda (g$111$17854) ((lambda (g$111$17856) (if (if g$111$17856 (begin '#f (apply (lambda () '#t) g$111$17856)) '#f) (apply (lambda () (list (g$111$13478 'cons) g$111$17790 g$111$17791)) g$111$17856) (error 'expander '"invalid syntax" (g$111$13243 g$111$17854 '())))) ((lambda (g$111$17858) '()) g$111$17854))) g$111$17846))) ((lambda (g$111$17860) (if (g$111$13211 g$111$17860) (begin '#f ((lambda (g$111$17862) (if g$111$17862 (begin '#f ((lambda (g$111$17864) (if g$111$17864 (begin '#f (append g$111$17862 g$111$17864)) '#f)) ((letrec ((g$111$17866 (lambda (g$111$17868) (if (g$111$13211 g$111$17868) ((lambda (g$111$17870) (if g$111$17870 (begin '#f ((lambda (g$111$17872) (if g$111$17872 (begin '#f (map cons g$111$17870 g$111$17872)) '#f)) (g$111$17866 (g$111$13223 g$111$17868)))) '#f)) ((lambda (g$111$17874) (list g$111$17874)) (g$111$13219 g$111$17868))) (if (g$111$13215 g$111$17868) (list (begin 'stuff '())) '#f))))) g$111$17866) (g$111$13223 g$111$17860)))) '#f)) ((lambda (g$111$17876) (if (g$111$13225 g$111$17876) (if (g$111$13233 g$111$17876 (g$111$13478 'list)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17860)))) '#f)) g$111$17846))) g$111$17794))) ((lambda (g$111$17878) (if (g$111$13211 g$111$17878) (begin '#f ((lambda (g$111$17880) (if g$111$17880 (begin '#f ((lambda (g$111$17882) (if g$111$17882 (begin '#f (append g$111$17880 g$111$17882)) '#f)) ((lambda (g$111$17884) (if (g$111$13211 g$111$17884) (begin '#f ((lambda (g$111$17886) (if g$111$17886 (begin '#f ((lambda (g$111$17888) (if g$111$17888 (begin '#f (append g$111$17886 g$111$17888)) '#f)) ((lambda (g$111$17890) (if (equal? (g$111$13245 g$111$17890) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17884)))) '#f)) ((lambda (g$111$17892) (list g$111$17892)) (g$111$13219 g$111$17884)))) '#f)) (g$111$13223 g$111$17878)))) '#f)) ((lambda (g$111$17894) (if (g$111$13225 g$111$17894) (if (g$111$13233 g$111$17894 (g$111$13478 'quote)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17878)))) '#f)) g$111$17794))) g$111$17791))) (set! g$111$17278 (lambda (g$111$17724 g$111$17725) ((lambda (g$111$17728) (if (null? g$111$17728) (list (g$111$13478 'quote) '()) (if (null? (cdr g$111$17728)) (car g$111$17728) (cons* (g$111$13478 'append) g$111$17728)))) (letrec ((g$111$17730 (lambda (g$111$17732) (if (null? g$111$17732) ((lambda (g$111$17734) ((lambda (g$111$17736) (if (if g$111$17736 (begin '#f (apply (lambda () '#t) g$111$17736)) '#f) (apply (lambda () '()) g$111$17736) ((lambda (g$111$17738) ((lambda (g$111$17740) (if (if g$111$17740 (begin '#f (apply (lambda () '#t) g$111$17740)) '#f) (apply (lambda () (list g$111$17725)) g$111$17740) (error 'expander '"invalid syntax" (g$111$13243 g$111$17738 '())))) ((lambda (g$111$17742) '()) g$111$17738))) g$111$17734))) ((lambda (g$111$17744) (if (g$111$13211 g$111$17744) (begin '#f ((lambda (g$111$17746) (if g$111$17746 (begin '#f ((lambda (g$111$17748) (if g$111$17748 (begin '#f (append g$111$17746 g$111$17748)) '#f)) ((lambda (g$111$17750) (if (g$111$13211 g$111$17750) (begin '#f ((lambda (g$111$17752) (if g$111$17752 (begin '#f ((lambda (g$111$17754) (if g$111$17754 (begin '#f (append g$111$17752 g$111$17754)) '#f)) ((lambda (g$111$17756) (if (equal? (g$111$13245 g$111$17756) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17750)))) '#f)) ((lambda (g$111$17758) (if (equal? (g$111$13245 g$111$17758) '()) (begin '#f '()) '#f)) (g$111$13219 g$111$17750)))) '#f)) (g$111$13223 g$111$17744)))) '#f)) ((lambda (g$111$17760) (if (g$111$13225 g$111$17760) (if (g$111$13233 g$111$17760 (g$111$13478 'quote)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17744)))) '#f)) g$111$17734))) g$111$17725) ((lambda (g$111$17762) ((lambda (g$111$17764) (if (if g$111$17764 (begin '#f (apply (lambda () '#t) g$111$17764)) '#f) (apply (lambda () (g$111$17730 (cdr g$111$17732))) g$111$17764) ((lambda (g$111$17766) ((lambda (g$111$17768) (if (if g$111$17768 (begin '#f (apply (lambda () '#t) g$111$17768)) '#f) (apply (lambda () (cons (car g$111$17732) (g$111$17730 (cdr g$111$17732)))) g$111$17768) (error 'expander '"invalid syntax" (g$111$13243 g$111$17766 '())))) ((lambda (g$111$17770) '()) g$111$17766))) g$111$17762))) ((lambda (g$111$17772) (if (g$111$13211 g$111$17772) (begin '#f ((lambda (g$111$17774) (if g$111$17774 (begin '#f ((lambda (g$111$17776) (if g$111$17776 (begin '#f (append g$111$17774 g$111$17776)) '#f)) ((lambda (g$111$17778) (if (g$111$13211 g$111$17778) (begin '#f ((lambda (g$111$17780) (if g$111$17780 (begin '#f ((lambda (g$111$17782) (if g$111$17782 (begin '#f (append g$111$17780 g$111$17782)) '#f)) ((lambda (g$111$17784) (if (equal? (g$111$13245 g$111$17784) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17778)))) '#f)) ((lambda (g$111$17786) (if (equal? (g$111$13245 g$111$17786) '()) (begin '#f '()) '#f)) (g$111$13219 g$111$17778)))) '#f)) (g$111$13223 g$111$17772)))) '#f)) ((lambda (g$111$17788) (if (g$111$13225 g$111$17788) (if (g$111$13233 g$111$17788 (g$111$13478 'quote)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17772)))) '#f)) g$111$17762))) (car g$111$17732)))))) (g$111$17730 g$111$17724))))) (set! g$111$17280 (lambda (g$111$17564) ((lambda (g$111$17566) ((lambda (g$111$17568) ((lambda (g$111$17570) (if (if g$111$17570 (begin '#f (apply (lambda (g$111$17572) '#t) g$111$17570)) '#f) (apply (lambda (g$111$17574) (list (g$111$13478 'quote) (list->vector g$111$17574))) g$111$17570) ((lambda (g$111$17576) ((lambda (g$111$17578) (if (if g$111$17578 (begin '#f (apply (lambda () '#t) g$111$17578)) '#f) (apply (lambda () (letrec ((g$111$17580 (lambda (g$111$17584 g$111$17585) ((lambda (g$111$17588) ((lambda (g$111$17590) (if (if g$111$17590 (begin '#f (apply (lambda (g$111$17592) '#t) g$111$17590)) '#f) (apply (lambda (g$111$17594) (g$111$17585 (map (lambda (g$111$17596) (list (g$111$13478 'quote) g$111$17596)) g$111$17594))) g$111$17590) ((lambda (g$111$17598) ((lambda (g$111$17600) (if (if g$111$17600 (begin '#f (apply (lambda (g$111$17602) '#t) g$111$17600)) '#f) (apply (lambda (g$111$17604) (g$111$17585 g$111$17604)) g$111$17600) ((lambda (g$111$17606) ((lambda (g$111$17608) (if (if g$111$17608 (begin '#f (apply (lambda (g$111$17610 g$111$17611) '#t) g$111$17608)) '#f) (apply (lambda (g$111$17614 g$111$17615) (g$111$17580 g$111$17615 (lambda (g$111$17618) (g$111$17585 (cons g$111$17614 g$111$17618))))) g$111$17608) ((lambda (g$111$17620) ((lambda (g$111$17622) (if (if g$111$17622 (begin '#f (apply (lambda () '#t) g$111$17622)) '#f) (apply (lambda () (list (g$111$13478 'list->vector) g$111$17566)) g$111$17622) (error 'expander '"invalid syntax" (g$111$13243 g$111$17620 '())))) ((lambda (g$111$17624) '()) g$111$17620))) g$111$17606))) ((lambda (g$111$17626) (if (g$111$13211 g$111$17626) (begin '#f ((lambda (g$111$17628) (if g$111$17628 (begin '#f ((lambda (g$111$17630) (if g$111$17630 (begin '#f (append g$111$17628 g$111$17630)) '#f)) ((lambda (g$111$17632) (if (g$111$13211 g$111$17632) (begin '#f ((lambda (g$111$17634) (if g$111$17634 (begin '#f ((lambda (g$111$17636) (if g$111$17636 (begin '#f (append g$111$17634 g$111$17636)) '#f)) ((lambda (g$111$17638) (if (g$111$13211 g$111$17638) (begin '#f ((lambda (g$111$17640) (if g$111$17640 (begin '#f ((lambda (g$111$17642) (if g$111$17642 (begin '#f (append g$111$17640 g$111$17642)) '#f)) ((lambda (g$111$17644) (if (equal? (g$111$13245 g$111$17644) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17638)))) '#f)) ((lambda (g$111$17646) (list g$111$17646)) (g$111$13219 g$111$17638)))) '#f)) (g$111$13223 g$111$17632)))) '#f)) ((lambda (g$111$17648) (list g$111$17648)) (g$111$13219 g$111$17632)))) '#f)) (g$111$13223 g$111$17626)))) '#f)) ((lambda (g$111$17650) (if (g$111$13225 g$111$17650) (if (g$111$13233 g$111$17650 (g$111$13478 'cons)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17626)))) '#f)) g$111$17606))) g$111$17598))) ((lambda (g$111$17652) (if (g$111$13211 g$111$17652) (begin '#f ((lambda (g$111$17654) (if g$111$17654 (begin '#f ((lambda (g$111$17656) (if g$111$17656 (begin '#f (append g$111$17654 g$111$17656)) '#f)) ((letrec ((g$111$17658 (lambda (g$111$17660) (if (g$111$13211 g$111$17660) ((lambda (g$111$17662) (if g$111$17662 (begin '#f ((lambda (g$111$17664) (if g$111$17664 (begin '#f (map cons g$111$17662 g$111$17664)) '#f)) (g$111$17658 (g$111$13223 g$111$17660)))) '#f)) ((lambda (g$111$17666) (list g$111$17666)) (g$111$13219 g$111$17660))) (if (g$111$13215 g$111$17660) (list (begin 'x* '())) '#f))))) g$111$17658) (g$111$13223 g$111$17652)))) '#f)) ((lambda (g$111$17668) (if (g$111$13225 g$111$17668) (if (g$111$13233 g$111$17668 (g$111$13478 'list)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17652)))) '#f)) g$111$17598))) g$111$17588))) ((lambda (g$111$17670) (if (g$111$13211 g$111$17670) (begin '#f ((lambda (g$111$17672) (if g$111$17672 (begin '#f ((lambda (g$111$17674) (if g$111$17674 (begin '#f (append g$111$17672 g$111$17674)) '#f)) ((lambda (g$111$17676) (if (g$111$13211 g$111$17676) (begin '#f ((lambda (g$111$17678) (if g$111$17678 (begin '#f ((lambda (g$111$17680) (if g$111$17680 (begin '#f (append g$111$17678 g$111$17680)) '#f)) ((lambda (g$111$17682) (if (equal? (g$111$13245 g$111$17682) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17676)))) '#f)) ((letrec ((g$111$17684 (lambda (g$111$17686) (if (g$111$13211 g$111$17686) ((lambda (g$111$17688) (if g$111$17688 (begin '#f ((lambda (g$111$17690) (if g$111$17690 (begin '#f (map cons g$111$17688 g$111$17690)) '#f)) (g$111$17684 (g$111$13223 g$111$17686)))) '#f)) ((lambda (g$111$17692) (list g$111$17692)) (g$111$13219 g$111$17686))) (if (g$111$13215 g$111$17686) (list (begin 'x* '())) '#f))))) g$111$17684) (g$111$13219 g$111$17676)))) '#f)) (g$111$13223 g$111$17670)))) '#f)) ((lambda (g$111$17694) (if (g$111$13225 g$111$17694) (if (g$111$13233 g$111$17694 (g$111$13478 'quote)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17670)))) '#f)) g$111$17588))) g$111$17584)))) (g$111$17580 g$111$17564 (lambda (g$111$17582) (cons* (g$111$13478 'vector) g$111$17582))))) g$111$17578) (error 'expander '"invalid syntax" (g$111$13243 g$111$17576 '())))) ((lambda (g$111$17696) '()) g$111$17576))) g$111$17568))) ((lambda (g$111$17698) (if (g$111$13211 g$111$17698) (begin '#f ((lambda (g$111$17700) (if g$111$17700 (begin '#f ((lambda (g$111$17702) (if g$111$17702 (begin '#f (append g$111$17700 g$111$17702)) '#f)) ((lambda (g$111$17704) (if (g$111$13211 g$111$17704) (begin '#f ((lambda (g$111$17706) (if g$111$17706 (begin '#f ((lambda (g$111$17708) (if g$111$17708 (begin '#f (append g$111$17706 g$111$17708)) '#f)) ((lambda (g$111$17710) (if (equal? (g$111$13245 g$111$17710) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17704)))) '#f)) ((letrec ((g$111$17712 (lambda (g$111$17714) (if (g$111$13211 g$111$17714) ((lambda (g$111$17716) (if g$111$17716 (begin '#f ((lambda (g$111$17718) (if g$111$17718 (begin '#f (map cons g$111$17716 g$111$17718)) '#f)) (g$111$17712 (g$111$13223 g$111$17714)))) '#f)) ((lambda (g$111$17720) (list g$111$17720)) (g$111$13219 g$111$17714))) (if (g$111$13215 g$111$17714) (list (begin 'x* '())) '#f))))) g$111$17712) (g$111$13219 g$111$17704)))) '#f)) (g$111$13223 g$111$17698)))) '#f)) ((lambda (g$111$17722) (if (g$111$13225 g$111$17722) (if (g$111$13233 g$111$17722 (g$111$13478 'quote)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17698)))) '#f)) g$111$17568))) g$111$17566)) g$111$17564))) (set! g$111$17282 (lambda (g$111$17470 g$111$17471) ((lambda (g$111$17474) ((lambda (g$111$17476) (if (if g$111$17476 (begin '#f (apply (lambda (g$111$17478 g$111$17479) '#t) g$111$17476)) '#f) (apply (lambda (g$111$17482 g$111$17483) ((lambda (g$111$17486) ((lambda (g$111$17488) (if (if g$111$17488 (begin '#f (apply (lambda (g$111$17490) '#t) g$111$17488)) '#f) (apply (lambda (g$111$17492) (if (= g$111$17471 '0) (g$111$17274 g$111$17492 (g$111$17282 g$111$17483 g$111$17471)) (g$111$17276 (g$111$17276 (list (g$111$13478 'quote) 'unquote) (g$111$17284 g$111$17492 (- g$111$17471 '1))) (g$111$17282 g$111$17483 g$111$17471)))) g$111$17488) ((lambda (g$111$17494) ((lambda (g$111$17496) (if (if g$111$17496 (begin '#f (apply (lambda (g$111$17498) '#t) g$111$17496)) '#f) (apply (lambda (g$111$17500) (if (= g$111$17471 '0) (g$111$17278 g$111$17500 (g$111$17282 g$111$17483 g$111$17471)) (g$111$17276 (g$111$17276 (list (g$111$13478 'quote) 'unquote-splicing) (g$111$17284 g$111$17500 (- g$111$17471 '1))) (g$111$17282 g$111$17483 g$111$17471)))) g$111$17496) ((lambda (g$111$17502) ((lambda (g$111$17504) (if (if g$111$17504 (begin '#f (apply (lambda (g$111$17506) '#t) g$111$17504)) '#f) (apply (lambda (g$111$17508) (g$111$17276 (g$111$17284 g$111$17508 g$111$17471) (g$111$17282 g$111$17483 g$111$17471))) g$111$17504) (error 'expander '"invalid syntax" (g$111$13243 g$111$17502 '())))) ((lambda (g$111$17510) (list g$111$17510)) g$111$17502))) g$111$17494))) ((lambda (g$111$17512) (if (g$111$13211 g$111$17512) (begin '#f ((lambda (g$111$17514) (if g$111$17514 (begin '#f ((lambda (g$111$17516) (if g$111$17516 (begin '#f (append g$111$17514 g$111$17516)) '#f)) ((letrec ((g$111$17518 (lambda (g$111$17520) (if (g$111$13211 g$111$17520) ((lambda (g$111$17522) (if g$111$17522 (begin '#f ((lambda (g$111$17524) (if g$111$17524 (begin '#f (map cons g$111$17522 g$111$17524)) '#f)) (g$111$17518 (g$111$13223 g$111$17520)))) '#f)) ((lambda (g$111$17526) (list g$111$17526)) (g$111$13219 g$111$17520))) (if (g$111$13215 g$111$17520) (list (begin 'p '())) '#f))))) g$111$17518) (g$111$13223 g$111$17512)))) '#f)) ((lambda (g$111$17528) (if (g$111$13225 g$111$17528) (if (g$111$13233 g$111$17528 (g$111$13478 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17512)))) '#f)) g$111$17494))) g$111$17486))) ((lambda (g$111$17530) (if (g$111$13211 g$111$17530) (begin '#f ((lambda (g$111$17532) (if g$111$17532 (begin '#f ((lambda (g$111$17534) (if g$111$17534 (begin '#f (append g$111$17532 g$111$17534)) '#f)) ((letrec ((g$111$17536 (lambda (g$111$17538) (if (g$111$13211 g$111$17538) ((lambda (g$111$17540) (if g$111$17540 (begin '#f ((lambda (g$111$17542) (if g$111$17542 (begin '#f (map cons g$111$17540 g$111$17542)) '#f)) (g$111$17536 (g$111$13223 g$111$17538)))) '#f)) ((lambda (g$111$17544) (list g$111$17544)) (g$111$13219 g$111$17538))) (if (g$111$13215 g$111$17538) (list (begin 'p '())) '#f))))) g$111$17536) (g$111$13223 g$111$17530)))) '#f)) ((lambda (g$111$17546) (if (g$111$13225 g$111$17546) (if (g$111$13233 g$111$17546 (g$111$13478 'unquote)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17530)))) '#f)) g$111$17486))) g$111$17482)) g$111$17476) ((lambda (g$111$17548) ((lambda (g$111$17550) (if (if g$111$17550 (begin '#f (apply (lambda () '#t) g$111$17550)) '#f) (apply (lambda () (list (g$111$13478 'quote) '())) g$111$17550) (error 'expander '"invalid syntax" (g$111$13243 g$111$17548 '())))) ((lambda (g$111$17552) (if (equal? (g$111$13245 g$111$17552) '()) (begin '#f '()) '#f)) g$111$17548))) g$111$17474))) ((lambda (g$111$17554) (if (g$111$13211 g$111$17554) (begin '#f ((lambda (g$111$17556) (if g$111$17556 (begin '#f ((lambda (g$111$17558) (if g$111$17558 (begin '#f (append g$111$17556 g$111$17558)) '#f)) ((lambda (g$111$17560) (list g$111$17560)) (g$111$13223 g$111$17554)))) '#f)) ((lambda (g$111$17562) (list g$111$17562)) (g$111$13219 g$111$17554)))) '#f)) g$111$17474))) g$111$17470))) (set! g$111$17284 (lambda (g$111$17286 g$111$17287) ((lambda (g$111$17290) ((lambda (g$111$17292) (if (if g$111$17292 (begin '#f (apply (lambda (g$111$17294) '#t) g$111$17292)) '#f) (apply (lambda (g$111$17296) (if (= g$111$17287 '0) g$111$17296 (g$111$17276 (list (g$111$13478 'quote) 'unquote) (g$111$17284 (list g$111$17296) (- g$111$17287 '1))))) g$111$17292) ((lambda (g$111$17298) ((lambda (g$111$17300) (if (if g$111$17300 (begin '#f (apply (lambda (g$111$17302 g$111$17303) '#t) g$111$17300)) '#f) (apply (lambda (g$111$17306 g$111$17307) (if (= g$111$17287 '0) (g$111$17274 g$111$17306 (g$111$17284 g$111$17307 g$111$17287)) (g$111$17276 (g$111$17276 (list (g$111$13478 'quote) 'unquote) (g$111$17284 g$111$17306 (- g$111$17287 '1))) (g$111$17284 g$111$17307 g$111$17287)))) g$111$17300) ((lambda (g$111$17310) ((lambda (g$111$17312) (if (if g$111$17312 (begin '#f (apply (lambda (g$111$17314 g$111$17315) '#t) g$111$17312)) '#f) (apply (lambda (g$111$17318 g$111$17319) (if (= g$111$17287 '0) (g$111$17278 g$111$17318 (g$111$17284 g$111$17319 g$111$17287)) (g$111$17276 (g$111$17276 (list (g$111$13478 'quote) 'unquote-splicing) (g$111$17284 g$111$17318 (- g$111$17287 '1))) (g$111$17284 g$111$17319 g$111$17287)))) g$111$17312) ((lambda (g$111$17322) ((lambda (g$111$17324) (if (if g$111$17324 (begin '#f (apply (lambda (g$111$17326) '#t) g$111$17324)) '#f) (apply (lambda (g$111$17328) (g$111$17276 (list (g$111$13478 'quote) 'quasiquote) (g$111$17284 (list g$111$17328) (+ g$111$17287 '1)))) g$111$17324) ((lambda (g$111$17330) ((lambda (g$111$17332) (if (if g$111$17332 (begin '#f (apply (lambda (g$111$17334 g$111$17335) '#t) g$111$17332)) '#f) (apply (lambda (g$111$17338 g$111$17339) (g$111$17276 (g$111$17284 g$111$17338 g$111$17287) (g$111$17284 g$111$17339 g$111$17287))) g$111$17332) ((lambda (g$111$17342) ((lambda (g$111$17344) (if (if g$111$17344 (begin '#f (apply (lambda (g$111$17346) (not (g$111$13177 g$111$17346))) g$111$17344)) '#f) (apply (lambda (g$111$17348) (g$111$17280 (g$111$17282 g$111$17348 g$111$17287))) g$111$17344) ((lambda (g$111$17350) ((lambda (g$111$17352) (if (if g$111$17352 (begin '#f (apply (lambda (g$111$17354) '#t) g$111$17352)) '#f) (apply (lambda (g$111$17356) (list (g$111$13478 'quote) g$111$17356)) g$111$17352) (error 'expander '"invalid syntax" (g$111$13243 g$111$17350 '())))) ((lambda (g$111$17358) (list g$111$17358)) g$111$17350))) g$111$17342))) ((lambda (g$111$17360) (if (g$111$13213 g$111$17360) (begin '#f ((letrec ((g$111$17362 (lambda (g$111$17364) (if (g$111$13211 g$111$17364) ((lambda (g$111$17366) (if g$111$17366 (begin '#f ((lambda (g$111$17368) (if g$111$17368 (begin '#f (map cons g$111$17366 g$111$17368)) '#f)) (g$111$17362 (g$111$13223 g$111$17364)))) '#f)) ((lambda (g$111$17370) (list g$111$17370)) (g$111$13219 g$111$17364))) (if (g$111$13215 g$111$17364) (list (begin 'x '())) '#f))))) g$111$17362) (g$111$13209 g$111$17360))) '#f)) g$111$17342))) g$111$17330))) ((lambda (g$111$17372) (if (g$111$13211 g$111$17372) (begin '#f ((lambda (g$111$17374) (if g$111$17374 (begin '#f ((lambda (g$111$17376) (if g$111$17376 (begin '#f (append g$111$17374 g$111$17376)) '#f)) ((lambda (g$111$17378) (list g$111$17378)) (g$111$13223 g$111$17372)))) '#f)) ((lambda (g$111$17380) (list g$111$17380)) (g$111$13219 g$111$17372)))) '#f)) g$111$17330))) g$111$17322))) ((lambda (g$111$17382) (if (g$111$13211 g$111$17382) (begin '#f ((lambda (g$111$17384) (if g$111$17384 (begin '#f ((lambda (g$111$17386) (if g$111$17386 (begin '#f (append g$111$17384 g$111$17386)) '#f)) ((lambda (g$111$17388) (if (g$111$13211 g$111$17388) (begin '#f ((lambda (g$111$17390) (if g$111$17390 (begin '#f ((lambda (g$111$17392) (if g$111$17392 (begin '#f (append g$111$17390 g$111$17392)) '#f)) ((lambda (g$111$17394) (if (equal? (g$111$13245 g$111$17394) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17388)))) '#f)) ((lambda (g$111$17396) (list g$111$17396)) (g$111$13219 g$111$17388)))) '#f)) (g$111$13223 g$111$17382)))) '#f)) ((lambda (g$111$17398) (if (g$111$13225 g$111$17398) (if (g$111$13233 g$111$17398 (g$111$13478 'quasiquote)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17382)))) '#f)) g$111$17322))) g$111$17310))) ((lambda (g$111$17400) (if (g$111$13211 g$111$17400) (begin '#f ((lambda (g$111$17402) (if g$111$17402 (begin '#f ((lambda (g$111$17404) (if g$111$17404 (begin '#f (append g$111$17402 g$111$17404)) '#f)) ((lambda (g$111$17406) (list g$111$17406)) (g$111$13223 g$111$17400)))) '#f)) ((lambda (g$111$17408) (if (g$111$13211 g$111$17408) (begin '#f ((lambda (g$111$17410) (if g$111$17410 (begin '#f ((lambda (g$111$17412) (if g$111$17412 (begin '#f (append g$111$17410 g$111$17412)) '#f)) ((letrec ((g$111$17414 (lambda (g$111$17416) (if (g$111$13211 g$111$17416) ((lambda (g$111$17418) (if g$111$17418 (begin '#f ((lambda (g$111$17420) (if g$111$17420 (begin '#f (map cons g$111$17418 g$111$17420)) '#f)) (g$111$17414 (g$111$13223 g$111$17416)))) '#f)) ((lambda (g$111$17422) (list g$111$17422)) (g$111$13219 g$111$17416))) (if (g$111$13215 g$111$17416) (list (begin 'p '())) '#f))))) g$111$17414) (g$111$13223 g$111$17408)))) '#f)) ((lambda (g$111$17424) (if (g$111$13225 g$111$17424) (if (g$111$13233 g$111$17424 (g$111$13478 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17408)))) '#f)) (g$111$13219 g$111$17400)))) '#f)) g$111$17310))) g$111$17298))) ((lambda (g$111$17426) (if (g$111$13211 g$111$17426) (begin '#f ((lambda (g$111$17428) (if g$111$17428 (begin '#f ((lambda (g$111$17430) (if g$111$17430 (begin '#f (append g$111$17428 g$111$17430)) '#f)) ((lambda (g$111$17432) (list g$111$17432)) (g$111$13223 g$111$17426)))) '#f)) ((lambda (g$111$17434) (if (g$111$13211 g$111$17434) (begin '#f ((lambda (g$111$17436) (if g$111$17436 (begin '#f ((lambda (g$111$17438) (if g$111$17438 (begin '#f (append g$111$17436 g$111$17438)) '#f)) ((letrec ((g$111$17440 (lambda (g$111$17442) (if (g$111$13211 g$111$17442) ((lambda (g$111$17444) (if g$111$17444 (begin '#f ((lambda (g$111$17446) (if g$111$17446 (begin '#f (map cons g$111$17444 g$111$17446)) '#f)) (g$111$17440 (g$111$13223 g$111$17442)))) '#f)) ((lambda (g$111$17448) (list g$111$17448)) (g$111$13219 g$111$17442))) (if (g$111$13215 g$111$17442) (list (begin 'p '())) '#f))))) g$111$17440) (g$111$13223 g$111$17434)))) '#f)) ((lambda (g$111$17450) (if (g$111$13225 g$111$17450) (if (g$111$13233 g$111$17450 (g$111$13478 'unquote)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17434)))) '#f)) (g$111$13219 g$111$17426)))) '#f)) g$111$17298))) g$111$17290))) ((lambda (g$111$17452) (if (g$111$13211 g$111$17452) (begin '#f ((lambda (g$111$17454) (if g$111$17454 (begin '#f ((lambda (g$111$17456) (if g$111$17456 (begin '#f (append g$111$17454 g$111$17456)) '#f)) ((lambda (g$111$17458) (if (g$111$13211 g$111$17458) (begin '#f ((lambda (g$111$17460) (if g$111$17460 (begin '#f ((lambda (g$111$17462) (if g$111$17462 (begin '#f (append g$111$17460 g$111$17462)) '#f)) ((lambda (g$111$17464) (if (equal? (g$111$13245 g$111$17464) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17458)))) '#f)) ((lambda (g$111$17466) (list g$111$17466)) (g$111$13219 g$111$17458)))) '#f)) (g$111$13223 g$111$17452)))) '#f)) ((lambda (g$111$17468) (if (g$111$13225 g$111$17468) (if (g$111$13233 g$111$17468 (g$111$13478 'unquote)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$17452)))) '#f)) g$111$17290))) g$111$17286))) (lambda (g$111$17904) ((lambda (g$111$17906) ((lambda (g$111$17908) (if (if g$111$17908 (begin '#f (apply (lambda (g$111$17910) '#t) g$111$17908)) '#f) (apply (lambda (g$111$17912) (g$111$17284 g$111$17912 '0)) g$111$17908) (error 'expander '"invalid syntax" (g$111$13243 g$111$17906 '())))) ((lambda (g$111$17914) (if (g$111$13211 g$111$17914) (begin '#f ((lambda (g$111$17916) (if g$111$17916 (begin '#f ((lambda (g$111$17918) (if g$111$17918 (begin '#f (append g$111$17916 g$111$17918)) '#f)) ((lambda (g$111$17920) (if (g$111$13211 g$111$17920) (begin '#f ((lambda (g$111$17922) (if g$111$17922 (begin '#f ((lambda (g$111$17924) (if g$111$17924 (begin '#f (append g$111$17922 g$111$17924)) '#f)) ((lambda (g$111$17926) (if (equal? (g$111$13245 g$111$17926) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$17920)))) '#f)) ((lambda (g$111$17928) (list g$111$17928)) (g$111$13219 g$111$17920)))) '#f)) (g$111$13223 g$111$17914)))) '#f)) ((lambda (g$111$17930) '()) (g$111$13219 g$111$17914)))) '#f)) g$111$17906))) g$111$17904)))) '#f '#f '#f '#f '#f '#f)))) (set! g$111$13552 ((lambda () ((lambda (g$111$17932) (begin (set! g$111$17932 (lambda (g$111$17934 g$111$17935) ((lambda (g$111$17938) ((lambda (g$111$17940) (if (if g$111$17940 (begin '#f (apply (lambda (g$111$17942) '#t) g$111$17940)) '#f) (apply (lambda (g$111$17944) (if (= g$111$17935 '0) ((lambda (g$111$17946) (values (list g$111$17946) (list g$111$17944) g$111$17946)) (gensym)) (call-with-values (lambda () (g$111$17932 g$111$17944 (- g$111$17935 '1))) (lambda (g$111$17948 g$111$17949 g$111$17950) (values g$111$17948 g$111$17949 (list 'unsyntax g$111$17950)))))) g$111$17940) ((lambda (g$111$17954) ((lambda (g$111$17956) (if (if g$111$17956 (begin '#f (apply (lambda () (= g$111$17935 '0)) g$111$17956)) '#f) (apply (lambda () (error 'expander '"incorrect use of unsyntax" (g$111$13243 g$111$17934 '()))) g$111$17956) ((lambda (g$111$17958) ((lambda (g$111$17960) (if (if g$111$17960 (begin '#f (apply (lambda (g$111$17962 g$111$17963) '#t) g$111$17960)) '#f) (apply (lambda (g$111$17966 g$111$17967) (call-with-values (lambda () (g$111$17932 g$111$17967 g$111$17935)) (lambda (g$111$17970 g$111$17971 g$111$17972) (if (= g$111$17935 '0) ((lambda (g$111$17976) (values (cons (cons g$111$17976 '(|...|)) g$111$17970) (cons g$111$17966 g$111$17971) (cons g$111$17976 (cons '|...| g$111$17972)))) (gensym)) (call-with-values (lambda () (g$111$17932 g$111$17966 (- g$111$17935 '1))) (lambda (g$111$17978 g$111$17979 g$111$17980) (values (append g$111$17978 g$111$17970) (append g$111$17979 g$111$17971) (cons (list 'unsyntax-splicing g$111$17980) g$111$17972)))))))) g$111$17960) ((lambda (g$111$17984) ((lambda (g$111$17986) (if (if g$111$17986 (begin '#f (apply (lambda () (= g$111$17935 '0)) g$111$17986)) '#f) (apply (lambda () (error 'expander '"incorrect use of unsyntax-splicing" (g$111$13243 g$111$17934 '()))) g$111$17986) ((lambda (g$111$17988) ((lambda (g$111$17990) (if (if g$111$17990 (begin '#f (apply (lambda (g$111$17992) '#t) g$111$17990)) '#f) (apply (lambda (g$111$17994) (call-with-values (lambda () (g$111$17932 g$111$17994 (+ g$111$17935 '1))) (lambda (g$111$17996 g$111$17997 g$111$17998) (values g$111$17996 g$111$17997 (list 'quasisyntax g$111$17998))))) g$111$17990) ((lambda (g$111$18002) ((lambda (g$111$18004) (if (if g$111$18004 (begin '#f (apply (lambda (g$111$18006 g$111$18007) '#t) g$111$18004)) '#f) (apply (lambda (g$111$18010 g$111$18011) (call-with-values (lambda () (g$111$17932 g$111$18010 g$111$17935)) (lambda (g$111$18014 g$111$18015 g$111$18016) (call-with-values (lambda () (g$111$17932 g$111$18011 g$111$17935)) (lambda (g$111$18017 g$111$18018 g$111$18019) (values (append g$111$18017 g$111$18014) (append g$111$18018 g$111$18015) (cons g$111$18016 g$111$18019))))))) g$111$18004) ((lambda (g$111$18026) ((lambda (g$111$18028) (if (if g$111$18028 (begin '#f (apply (lambda (g$111$18030) (not (g$111$13177 g$111$17934))) g$111$18028)) '#f) (apply (lambda (g$111$18032) (call-with-values (lambda () (letrec ((g$111$18034 (lambda (g$111$18036) (if (null? g$111$18036) (values '() '() '()) (call-with-values (lambda () (g$111$17932 (car g$111$18036) g$111$17935)) (lambda (g$111$18038 g$111$18039 g$111$18040) (call-with-values (lambda () (g$111$18034 (cdr g$111$18036))) (lambda (g$111$18044 g$111$18045 g$111$18046) (values (append g$111$18038 g$111$18044) (append g$111$18039 g$111$18045) (cons g$111$18040 g$111$18046)))))))))) (g$111$18034 g$111$18032))) (lambda (g$111$18050 g$111$18051 g$111$18052) (values g$111$18050 g$111$18051 (list->vector g$111$18052))))) g$111$18028) ((lambda (g$111$18056) ((lambda (g$111$18058) (if (if g$111$18058 (begin '#f (apply (lambda () '#t) g$111$18058)) '#f) (apply (lambda () (values '() '() g$111$17934)) g$111$18058) (error 'expander '"invalid syntax" (g$111$13243 g$111$18056 '())))) ((lambda (g$111$18060) '()) g$111$18056))) g$111$18026))) ((lambda (g$111$18062) (if (g$111$13213 g$111$18062) (begin '#f ((letrec ((g$111$18064 (lambda (g$111$18066) (if (g$111$13211 g$111$18066) ((lambda (g$111$18068) (if g$111$18068 (begin '#f ((lambda (g$111$18070) (if g$111$18070 (begin '#f (map cons g$111$18068 g$111$18070)) '#f)) (g$111$18064 (g$111$13223 g$111$18066)))) '#f)) ((lambda (g$111$18072) (list g$111$18072)) (g$111$13219 g$111$18066))) (if (g$111$13215 g$111$18066) (list (begin 'x '())) '#f))))) g$111$18064) (g$111$13209 g$111$18062))) '#f)) g$111$18026))) g$111$18002))) ((lambda (g$111$18074) (if (g$111$13211 g$111$18074) (begin '#f ((lambda (g$111$18076) (if g$111$18076 (begin '#f ((lambda (g$111$18078) (if g$111$18078 (begin '#f (append g$111$18076 g$111$18078)) '#f)) ((lambda (g$111$18080) (list g$111$18080)) (g$111$13223 g$111$18074)))) '#f)) ((lambda (g$111$18082) (list g$111$18082)) (g$111$13219 g$111$18074)))) '#f)) g$111$18002))) g$111$17988))) ((lambda (g$111$18084) (if (g$111$13211 g$111$18084) (begin '#f ((lambda (g$111$18086) (if g$111$18086 (begin '#f ((lambda (g$111$18088) (if g$111$18088 (begin '#f (append g$111$18086 g$111$18088)) '#f)) ((lambda (g$111$18090) (if (g$111$13211 g$111$18090) (begin '#f ((lambda (g$111$18092) (if g$111$18092 (begin '#f ((lambda (g$111$18094) (if g$111$18094 (begin '#f (append g$111$18092 g$111$18094)) '#f)) ((lambda (g$111$18096) (if (equal? (g$111$13245 g$111$18096) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18090)))) '#f)) ((lambda (g$111$18098) (list g$111$18098)) (g$111$13219 g$111$18090)))) '#f)) (g$111$13223 g$111$18084)))) '#f)) ((lambda (g$111$18100) (if (g$111$13225 g$111$18100) (if (g$111$13233 g$111$18100 (g$111$13478 'quasisyntax)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18084)))) '#f)) g$111$17988))) g$111$17984))) ((lambda (g$111$18102) (if (g$111$13225 g$111$18102) (if (g$111$13233 g$111$18102 (g$111$13478 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) g$111$17984))) g$111$17958))) ((lambda (g$111$18104) (if (g$111$13211 g$111$18104) (begin '#f ((lambda (g$111$18106) (if g$111$18106 (begin '#f ((lambda (g$111$18108) (if g$111$18108 (begin '#f (append g$111$18106 g$111$18108)) '#f)) ((lambda (g$111$18110) (list g$111$18110)) (g$111$13223 g$111$18104)))) '#f)) ((lambda (g$111$18112) (if (g$111$13211 g$111$18112) (begin '#f ((lambda (g$111$18114) (if g$111$18114 (begin '#f ((lambda (g$111$18116) (if g$111$18116 (begin '#f (append g$111$18114 g$111$18116)) '#f)) ((lambda (g$111$18118) (if (g$111$13211 g$111$18118) (begin '#f ((lambda (g$111$18120) (if g$111$18120 (begin '#f ((lambda (g$111$18122) (if g$111$18122 (begin '#f (append g$111$18120 g$111$18122)) '#f)) ((lambda (g$111$18124) (if (equal? (g$111$13245 g$111$18124) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18118)))) '#f)) ((lambda (g$111$18126) (list g$111$18126)) (g$111$13219 g$111$18118)))) '#f)) (g$111$13223 g$111$18112)))) '#f)) ((lambda (g$111$18128) (if (g$111$13225 g$111$18128) (if (g$111$13233 g$111$18128 (g$111$13478 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18112)))) '#f)) (g$111$13219 g$111$18104)))) '#f)) g$111$17958))) g$111$17954))) ((lambda (g$111$18130) (if (g$111$13225 g$111$18130) (if (g$111$13233 g$111$18130 (g$111$13478 'unsyntax)) (begin '#f '()) '#f) '#f)) g$111$17954))) g$111$17938))) ((lambda (g$111$18132) (if (g$111$13211 g$111$18132) (begin '#f ((lambda (g$111$18134) (if g$111$18134 (begin '#f ((lambda (g$111$18136) (if g$111$18136 (begin '#f (append g$111$18134 g$111$18136)) '#f)) ((lambda (g$111$18138) (if (g$111$13211 g$111$18138) (begin '#f ((lambda (g$111$18140) (if g$111$18140 (begin '#f ((lambda (g$111$18142) (if g$111$18142 (begin '#f (append g$111$18140 g$111$18142)) '#f)) ((lambda (g$111$18144) (if (equal? (g$111$13245 g$111$18144) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18138)))) '#f)) ((lambda (g$111$18146) (list g$111$18146)) (g$111$13219 g$111$18138)))) '#f)) (g$111$13223 g$111$18132)))) '#f)) ((lambda (g$111$18148) (if (g$111$13225 g$111$18148) (if (g$111$13233 g$111$18148 (g$111$13478 'unsyntax)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18132)))) '#f)) g$111$17938))) g$111$17934))) (lambda (g$111$18150) ((lambda (g$111$18152) ((lambda (g$111$18154) (if (if g$111$18154 (begin '#f (apply (lambda (g$111$18156) '#t) g$111$18154)) '#f) (apply (lambda (g$111$18158) (call-with-values (lambda () (g$111$17932 g$111$18158 '0)) (lambda (g$111$18160 g$111$18161 g$111$18162) (g$111$13512 (list 'syntax-case (cons 'list g$111$18161) '() (list g$111$18160 (list 'syntax g$111$18162))))))) g$111$18154) (error 'expander '"invalid syntax" (g$111$13243 g$111$18152 '())))) ((lambda (g$111$18166) (if (g$111$13211 g$111$18166) (begin '#f ((lambda (g$111$18168) (if g$111$18168 (begin '#f ((lambda (g$111$18170) (if g$111$18170 (begin '#f (append g$111$18168 g$111$18170)) '#f)) ((lambda (g$111$18172) (if (g$111$13211 g$111$18172) (begin '#f ((lambda (g$111$18174) (if g$111$18174 (begin '#f ((lambda (g$111$18176) (if g$111$18176 (begin '#f (append g$111$18174 g$111$18176)) '#f)) ((lambda (g$111$18178) (if (equal? (g$111$13245 g$111$18178) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18172)))) '#f)) ((lambda (g$111$18180) (list g$111$18180)) (g$111$13219 g$111$18172)))) '#f)) (g$111$13223 g$111$18166)))) '#f)) ((lambda (g$111$18182) '()) (g$111$13219 g$111$18166)))) '#f)) g$111$18152))) g$111$18150)))) '#f)))) (set! g$111$13554 (lambda (g$111$18184) (error 'expander '"define-struct not supported" (g$111$13243 g$111$18184 '())))) (set! g$111$13556 (lambda (g$111$18186) ((lambda (g$111$18188 g$111$18190 g$111$18192 g$111$18194 g$111$18196 g$111$18198 g$111$18200 g$111$18202 g$111$18204 g$111$18206 g$111$18208 g$111$18210 g$111$18212 g$111$18214) (begin (set! g$111$18188 (lambda (g$111$19236 . g$111$19238) (g$111$13705 g$111$19236 (string->symbol (apply string-append (map (lambda (g$111$19240) (if (symbol? g$111$19240) (symbol->string g$111$19240) (if (string? g$111$19240) g$111$19240 (error 'define-record-type '"BUG")))) g$111$19238)))))) (set! g$111$18190 (lambda (g$111$19182) ((lambda (g$111$19184) ((lambda (g$111$19186) (if (if g$111$19186 (begin '#f (apply (lambda (g$111$19188 g$111$19189 g$111$19190) '#t) g$111$19186)) '#f) (apply (lambda (g$111$19194 g$111$19195 g$111$19196) g$111$19194) g$111$19186) ((lambda (g$111$19200) ((lambda (g$111$19202) (if (if g$111$19202 (begin '#f (apply (lambda (g$111$19204) '#t) g$111$19202)) '#f) (apply (lambda (g$111$19206) g$111$19206) g$111$19202) (error 'expander '"invalid syntax" (g$111$13243 g$111$19200 '())))) ((lambda (g$111$19208) (list g$111$19208)) g$111$19200))) g$111$19184))) ((lambda (g$111$19210) (if (g$111$13211 g$111$19210) (begin '#f ((lambda (g$111$19212) (if g$111$19212 (begin '#f ((lambda (g$111$19214) (if g$111$19214 (begin '#f (append g$111$19212 g$111$19214)) '#f)) ((lambda (g$111$19216) (if (g$111$13211 g$111$19216) (begin '#f ((lambda (g$111$19218) (if g$111$19218 (begin '#f ((lambda (g$111$19220) (if g$111$19220 (begin '#f (append g$111$19218 g$111$19220)) '#f)) ((lambda (g$111$19222) (if (g$111$13211 g$111$19222) (begin '#f ((lambda (g$111$19224) (if g$111$19224 (begin '#f ((lambda (g$111$19226) (if g$111$19226 (begin '#f (append g$111$19224 g$111$19226)) '#f)) ((lambda (g$111$19228) (if (equal? (g$111$13245 g$111$19228) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$19222)))) '#f)) ((lambda (g$111$19230) (list g$111$19230)) (g$111$13219 g$111$19222)))) '#f)) (g$111$13223 g$111$19216)))) '#f)) ((lambda (g$111$19232) (list g$111$19232)) (g$111$13219 g$111$19216)))) '#f)) (g$111$13223 g$111$19210)))) '#f)) ((lambda (g$111$19234) (list g$111$19234)) (g$111$13219 g$111$19210)))) '#f)) g$111$19184))) g$111$19182))) (set! g$111$18192 (lambda (g$111$19126 g$111$19127) ((lambda (g$111$19130) ((lambda (g$111$19132) (if (if g$111$19132 (begin '#f (apply (lambda (g$111$19134 g$111$19135 g$111$19136) '#t) g$111$19132)) '#f) (apply (lambda (g$111$19140 g$111$19141 g$111$19142) g$111$19141) g$111$19132) ((lambda (g$111$19146) ((lambda (g$111$19148) (if (if g$111$19148 (begin '#f (apply (lambda (g$111$19150) '#t) g$111$19148)) '#f) (apply (lambda (g$111$19152) (g$111$18188 g$111$19127 '"make-" (g$111$13245 g$111$19152))) g$111$19148) (error 'expander '"invalid syntax" (g$111$13243 g$111$19146 '())))) ((lambda (g$111$19154) (list g$111$19154)) g$111$19146))) g$111$19130))) ((lambda (g$111$19156) (if (g$111$13211 g$111$19156) (begin '#f ((lambda (g$111$19158) (if g$111$19158 (begin '#f ((lambda (g$111$19160) (if g$111$19160 (begin '#f (append g$111$19158 g$111$19160)) '#f)) ((lambda (g$111$19162) (if (g$111$13211 g$111$19162) (begin '#f ((lambda (g$111$19164) (if g$111$19164 (begin '#f ((lambda (g$111$19166) (if g$111$19166 (begin '#f (append g$111$19164 g$111$19166)) '#f)) ((lambda (g$111$19168) (if (g$111$13211 g$111$19168) (begin '#f ((lambda (g$111$19170) (if g$111$19170 (begin '#f ((lambda (g$111$19172) (if g$111$19172 (begin '#f (append g$111$19170 g$111$19172)) '#f)) ((lambda (g$111$19174) (if (equal? (g$111$13245 g$111$19174) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$19168)))) '#f)) ((lambda (g$111$19176) (list g$111$19176)) (g$111$13219 g$111$19168)))) '#f)) (g$111$13223 g$111$19162)))) '#f)) ((lambda (g$111$19178) (list g$111$19178)) (g$111$13219 g$111$19162)))) '#f)) (g$111$13223 g$111$19156)))) '#f)) ((lambda (g$111$19180) (list g$111$19180)) (g$111$13219 g$111$19156)))) '#f)) g$111$19130))) g$111$19126))) (set! g$111$18194 (lambda (g$111$19070 g$111$19071) ((lambda (g$111$19074) ((lambda (g$111$19076) (if (if g$111$19076 (begin '#f (apply (lambda (g$111$19078 g$111$19079 g$111$19080) '#t) g$111$19076)) '#f) (apply (lambda (g$111$19084 g$111$19085 g$111$19086) g$111$19086) g$111$19076) ((lambda (g$111$19090) ((lambda (g$111$19092) (if (if g$111$19092 (begin '#f (apply (lambda (g$111$19094) '#t) g$111$19092)) '#f) (apply (lambda (g$111$19096) (g$111$18188 g$111$19071 (g$111$13245 g$111$19096) '"?")) g$111$19092) (error 'expander '"invalid syntax" (g$111$13243 g$111$19090 '())))) ((lambda (g$111$19098) (list g$111$19098)) g$111$19090))) g$111$19074))) ((lambda (g$111$19100) (if (g$111$13211 g$111$19100) (begin '#f ((lambda (g$111$19102) (if g$111$19102 (begin '#f ((lambda (g$111$19104) (if g$111$19104 (begin '#f (append g$111$19102 g$111$19104)) '#f)) ((lambda (g$111$19106) (if (g$111$13211 g$111$19106) (begin '#f ((lambda (g$111$19108) (if g$111$19108 (begin '#f ((lambda (g$111$19110) (if g$111$19110 (begin '#f (append g$111$19108 g$111$19110)) '#f)) ((lambda (g$111$19112) (if (g$111$13211 g$111$19112) (begin '#f ((lambda (g$111$19114) (if g$111$19114 (begin '#f ((lambda (g$111$19116) (if g$111$19116 (begin '#f (append g$111$19114 g$111$19116)) '#f)) ((lambda (g$111$19118) (if (equal? (g$111$13245 g$111$19118) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$19112)))) '#f)) ((lambda (g$111$19120) (list g$111$19120)) (g$111$13219 g$111$19112)))) '#f)) (g$111$13223 g$111$19106)))) '#f)) ((lambda (g$111$19122) (list g$111$19122)) (g$111$13219 g$111$19106)))) '#f)) (g$111$13223 g$111$19100)))) '#f)) ((lambda (g$111$19124) (list g$111$19124)) (g$111$13219 g$111$19100)))) '#f)) g$111$19074))) g$111$19070))) (set! g$111$18196 (lambda (g$111$19026 g$111$19027) ((lambda (g$111$19030) ((lambda (g$111$19032) (if (if g$111$19032 (begin '#f (apply (lambda () '#t) g$111$19032)) '#f) (apply (lambda () '#f) g$111$19032) ((lambda (g$111$19034) ((lambda (g$111$19036) (if (if g$111$19036 (begin '#f (apply (lambda (g$111$19038 g$111$19039 g$111$19040) '#t) g$111$19036)) '#f) (apply (lambda (g$111$19044 g$111$19045 g$111$19046) (if (g$111$13233 (g$111$13512 g$111$19026) g$111$19044) (cons g$111$19044 g$111$19045) (g$111$18196 g$111$19026 g$111$19046))) g$111$19036) (error 'expander '"invalid syntax" (g$111$13243 g$111$19034 '())))) ((lambda (g$111$19050) (if (g$111$13211 g$111$19050) (begin '#f ((lambda (g$111$19052) (if g$111$19052 (begin '#f ((lambda (g$111$19054) (if g$111$19054 (begin '#f (append g$111$19052 g$111$19054)) '#f)) ((lambda (g$111$19056) (list g$111$19056)) (g$111$13223 g$111$19050)))) '#f)) ((lambda (g$111$19058) (if (g$111$13211 g$111$19058) (begin '#f ((lambda (g$111$19060) (if g$111$19060 (begin '#f ((lambda (g$111$19062) (if g$111$19062 (begin '#f (append g$111$19060 g$111$19062)) '#f)) ((lambda (g$111$19064) (list g$111$19064)) (g$111$13223 g$111$19058)))) '#f)) ((lambda (g$111$19066) (list g$111$19066)) (g$111$13219 g$111$19058)))) '#f)) (g$111$13219 g$111$19050)))) '#f)) g$111$19034))) g$111$19030))) ((lambda (g$111$19068) (if (equal? (g$111$13245 g$111$19068) '()) (begin '#f '()) '#f)) g$111$19030))) g$111$19027))) (set! g$111$18198 (lambda (g$111$18768 g$111$18769 g$111$18770) ((lambda (g$111$18774) (begin (set! g$111$18774 (lambda (g$111$18776) (list->vector (map (lambda (g$111$18778) ((lambda (g$111$18780) ((lambda (g$111$18782) (if (if g$111$18782 (begin '#f (apply (lambda (g$111$18784 g$111$18785) '#t) g$111$18782)) '#f) (apply (lambda (g$111$18788 g$111$18789) (list 'mutable g$111$18788)) g$111$18782) ((lambda (g$111$18792) ((lambda (g$111$18794) (if (if g$111$18794 (begin '#f (apply (lambda (g$111$18796 g$111$18797) '#t) g$111$18794)) '#f) (apply (lambda (g$111$18800 g$111$18801) (list 'immutable g$111$18800)) g$111$18794) ((lambda (g$111$18804) ((lambda (g$111$18806) (if (if g$111$18806 (begin '#f (apply (lambda (g$111$18808) '#t) g$111$18806)) '#f) (apply (lambda (g$111$18810) (list 'immutable g$111$18810)) g$111$18806) (error 'expander '"invalid syntax" (g$111$13243 g$111$18804 '())))) ((lambda (g$111$18812) (list g$111$18812)) g$111$18804))) g$111$18792))) ((lambda (g$111$18814) (if (g$111$13211 g$111$18814) (begin '#f ((lambda (g$111$18816) (if g$111$18816 (begin '#f ((lambda (g$111$18818) (if g$111$18818 (begin '#f (append g$111$18816 g$111$18818)) '#f)) ((lambda (g$111$18820) (if (g$111$13211 g$111$18820) (begin '#f ((lambda (g$111$18822) (if g$111$18822 (begin '#f ((lambda (g$111$18824) (if g$111$18824 (begin '#f (append g$111$18822 g$111$18824)) '#f)) ((lambda (g$111$18826) (list g$111$18826)) (g$111$13223 g$111$18820)))) '#f)) ((lambda (g$111$18828) (list g$111$18828)) (g$111$13219 g$111$18820)))) '#f)) (g$111$13223 g$111$18814)))) '#f)) ((lambda (g$111$18830) (if (g$111$13225 g$111$18830) (if (g$111$13233 g$111$18830 (g$111$13478 'immutable)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18814)))) '#f)) g$111$18792))) g$111$18780))) ((lambda (g$111$18832) (if (g$111$13211 g$111$18832) (begin '#f ((lambda (g$111$18834) (if g$111$18834 (begin '#f ((lambda (g$111$18836) (if g$111$18836 (begin '#f (append g$111$18834 g$111$18836)) '#f)) ((lambda (g$111$18838) (if (g$111$13211 g$111$18838) (begin '#f ((lambda (g$111$18840) (if g$111$18840 (begin '#f ((lambda (g$111$18842) (if g$111$18842 (begin '#f (append g$111$18840 g$111$18842)) '#f)) ((lambda (g$111$18844) (list g$111$18844)) (g$111$13223 g$111$18838)))) '#f)) ((lambda (g$111$18846) (list g$111$18846)) (g$111$13219 g$111$18838)))) '#f)) (g$111$13223 g$111$18832)))) '#f)) ((lambda (g$111$18848) (if (g$111$13225 g$111$18848) (if (g$111$13233 g$111$18848 (g$111$13478 'mutable)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18832)))) '#f)) g$111$18780))) g$111$18778)) g$111$18776)))) ((lambda (g$111$18850 g$111$18851 g$111$18852 g$111$18853 g$111$18854) (g$111$13512 (list 'make-record-type-descriptor (list 'quote g$111$18769) g$111$18850 g$111$18851 g$111$18852 g$111$18853 g$111$18854))) ((lambda (g$111$18860) ((lambda (g$111$18862) (if (if g$111$18862 (begin '#f (apply (lambda (g$111$18864) '#t) g$111$18862)) '#f) (apply (lambda (g$111$18866) (list 'record-type-descriptor g$111$18866)) g$111$18862) ((lambda (g$111$18868) ((lambda (g$111$18870) (if (if g$111$18870 (begin '#f (apply (lambda () '#t) g$111$18870)) '#f) (apply (lambda () '#f) g$111$18870) (error 'expander '"invalid syntax" (g$111$13243 g$111$18868 '())))) ((lambda (g$111$18872) '()) g$111$18868))) g$111$18860))) ((lambda (g$111$18874) (if (g$111$13211 g$111$18874) (begin '#f ((lambda (g$111$18876) (if g$111$18876 (begin '#f ((lambda (g$111$18878) (if g$111$18878 (begin '#f (append g$111$18876 g$111$18878)) '#f)) ((lambda (g$111$18880) (if (g$111$13211 g$111$18880) (begin '#f ((lambda (g$111$18882) (if g$111$18882 (begin '#f ((lambda (g$111$18884) (if g$111$18884 (begin '#f (append g$111$18882 g$111$18884)) '#f)) ((lambda (g$111$18886) (if (equal? (g$111$13245 g$111$18886) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18880)))) '#f)) ((lambda (g$111$18888) (list g$111$18888)) (g$111$13219 g$111$18880)))) '#f)) (g$111$13223 g$111$18874)))) '#f)) ((lambda (g$111$18890) '()) (g$111$13219 g$111$18874)))) '#f)) g$111$18860))) (g$111$18196 'parent g$111$18770)) ((lambda (g$111$18892) ((lambda (g$111$18894) (if (if g$111$18894 (begin '#f (apply (lambda () '#t) g$111$18894)) '#f) (apply (lambda () (list 'quote (gensym))) g$111$18894) ((lambda (g$111$18896) ((lambda (g$111$18898) (if (if g$111$18898 (begin '#f (apply (lambda (g$111$18900) '#t) g$111$18898)) '#f) (apply (lambda (g$111$18902) (list 'quote g$111$18902)) g$111$18898) ((lambda (g$111$18904) ((lambda (g$111$18906) (if (if g$111$18906 (begin '#f (apply (lambda () '#t) g$111$18906)) '#f) (apply (lambda () '#f) g$111$18906) (error 'expander '"invalid syntax" (g$111$13243 g$111$18904 '())))) ((lambda (g$111$18908) '()) g$111$18904))) g$111$18896))) ((lambda (g$111$18910) (if (g$111$13211 g$111$18910) (begin '#f ((lambda (g$111$18912) (if g$111$18912 (begin '#f ((lambda (g$111$18914) (if g$111$18914 (begin '#f (append g$111$18912 g$111$18914)) '#f)) ((lambda (g$111$18916) (if (g$111$13211 g$111$18916) (begin '#f ((lambda (g$111$18918) (if g$111$18918 (begin '#f ((lambda (g$111$18920) (if g$111$18920 (begin '#f (append g$111$18918 g$111$18920)) '#f)) ((lambda (g$111$18922) (if (equal? (g$111$13245 g$111$18922) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18916)))) '#f)) ((lambda (g$111$18924) (list g$111$18924)) (g$111$13219 g$111$18916)))) '#f)) (g$111$13223 g$111$18910)))) '#f)) ((lambda (g$111$18926) '()) (g$111$13219 g$111$18910)))) '#f)) g$111$18896))) g$111$18892))) ((lambda (g$111$18928) (if (g$111$13211 g$111$18928) (begin '#f ((lambda (g$111$18930) (if g$111$18930 (begin '#f ((lambda (g$111$18932) (if g$111$18932 (begin '#f (append g$111$18930 g$111$18932)) '#f)) ((lambda (g$111$18934) (if (equal? (g$111$13245 g$111$18934) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18928)))) '#f)) ((lambda (g$111$18936) '()) (g$111$13219 g$111$18928)))) '#f)) g$111$18892))) (g$111$18196 'nongenerative g$111$18770)) ((lambda (g$111$18938) ((lambda (g$111$18940) (if (if g$111$18940 (begin '#f (apply (lambda () '#t) g$111$18940)) '#f) (apply (lambda () '#t) g$111$18940) ((lambda (g$111$18942) ((lambda (g$111$18944) (if (if g$111$18944 (begin '#f (apply (lambda () '#t) g$111$18944)) '#f) (apply (lambda () '#f) g$111$18944) (error 'expander '"invalid syntax" (g$111$13243 g$111$18942 '())))) ((lambda (g$111$18946) '()) g$111$18942))) g$111$18938))) ((lambda (g$111$18948) (if (g$111$13211 g$111$18948) (begin '#f ((lambda (g$111$18950) (if g$111$18950 (begin '#f ((lambda (g$111$18952) (if g$111$18952 (begin '#f (append g$111$18950 g$111$18952)) '#f)) ((lambda (g$111$18954) (if (g$111$13211 g$111$18954) (begin '#f ((lambda (g$111$18956) (if g$111$18956 (begin '#f ((lambda (g$111$18958) (if g$111$18958 (begin '#f (append g$111$18956 g$111$18958)) '#f)) ((lambda (g$111$18960) (if (equal? (g$111$13245 g$111$18960) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18954)))) '#f)) ((lambda (g$111$18962) (if (equal? (g$111$13245 g$111$18962) '#t) (begin '#f '()) '#f)) (g$111$13219 g$111$18954)))) '#f)) (g$111$13223 g$111$18948)))) '#f)) ((lambda (g$111$18964) '()) (g$111$13219 g$111$18948)))) '#f)) g$111$18938))) (g$111$18196 'sealed? g$111$18770)) ((lambda (g$111$18966) ((lambda (g$111$18968) (if (if g$111$18968 (begin '#f (apply (lambda () '#t) g$111$18968)) '#f) (apply (lambda () '#t) g$111$18968) ((lambda (g$111$18970) ((lambda (g$111$18972) (if (if g$111$18972 (begin '#f (apply (lambda () '#t) g$111$18972)) '#f) (apply (lambda () '#f) g$111$18972) (error 'expander '"invalid syntax" (g$111$13243 g$111$18970 '())))) ((lambda (g$111$18974) '()) g$111$18970))) g$111$18966))) ((lambda (g$111$18976) (if (g$111$13211 g$111$18976) (begin '#f ((lambda (g$111$18978) (if g$111$18978 (begin '#f ((lambda (g$111$18980) (if g$111$18980 (begin '#f (append g$111$18978 g$111$18980)) '#f)) ((lambda (g$111$18982) (if (g$111$13211 g$111$18982) (begin '#f ((lambda (g$111$18984) (if g$111$18984 (begin '#f ((lambda (g$111$18986) (if g$111$18986 (begin '#f (append g$111$18984 g$111$18986)) '#f)) ((lambda (g$111$18988) (if (equal? (g$111$13245 g$111$18988) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18982)))) '#f)) ((lambda (g$111$18990) (if (equal? (g$111$13245 g$111$18990) '#t) (begin '#f '()) '#f)) (g$111$13219 g$111$18982)))) '#f)) (g$111$13223 g$111$18976)))) '#f)) ((lambda (g$111$18992) '()) (g$111$13219 g$111$18976)))) '#f)) g$111$18966))) (g$111$18196 'opaque? g$111$18770)) ((lambda (g$111$18994) ((lambda (g$111$18996) (if (if g$111$18996 (begin '#f (apply (lambda (g$111$18998) '#t) g$111$18996)) '#f) (apply (lambda (g$111$19000) (list 'quote (g$111$18774 g$111$19000))) g$111$18996) ((lambda (g$111$19002) ((lambda (g$111$19004) (if (if g$111$19004 (begin '#f (apply (lambda () '#t) g$111$19004)) '#f) (apply (lambda () ''#()) g$111$19004) (error 'expander '"invalid syntax" (g$111$13243 g$111$19002 '())))) ((lambda (g$111$19006) '()) g$111$19002))) g$111$18994))) ((lambda (g$111$19008) (if (g$111$13211 g$111$19008) (begin '#f ((lambda (g$111$19010) (if g$111$19010 (begin '#f ((lambda (g$111$19012) (if g$111$19012 (begin '#f (append g$111$19010 g$111$19012)) '#f)) ((letrec ((g$111$19014 (lambda (g$111$19016) (if (g$111$13211 g$111$19016) ((lambda (g$111$19018) (if g$111$19018 (begin '#f ((lambda (g$111$19020) (if g$111$19020 (begin '#f (map cons g$111$19018 g$111$19020)) '#f)) (g$111$19014 (g$111$13223 g$111$19016)))) '#f)) ((lambda (g$111$19022) (list g$111$19022)) (g$111$13219 g$111$19016))) (if (g$111$13215 g$111$19016) (list (begin 'field-spec* '())) '#f))))) g$111$19014) (g$111$13223 g$111$19008)))) '#f)) ((lambda (g$111$19024) '()) (g$111$13219 g$111$19008)))) '#f)) g$111$18994))) (g$111$18196 'fields g$111$18770))))) '#f))) (set! g$111$18200 (lambda (g$111$18728 g$111$18729 g$111$18730) ((lambda (g$111$18734) (list 'make-record-constructor-descriptor g$111$18729 g$111$18734 g$111$18730)) ((lambda (g$111$18736) ((lambda (g$111$18738) (if (if g$111$18738 (begin '#f (apply (lambda (g$111$18740) '#t) g$111$18738)) '#f) (apply (lambda (g$111$18742) (list 'record-constructor-descriptor g$111$18742)) g$111$18738) ((lambda (g$111$18744) ((lambda (g$111$18746) (if (if g$111$18746 (begin '#f (apply (lambda () '#t) g$111$18746)) '#f) (apply (lambda () '#f) g$111$18746) (error 'expander '"invalid syntax" (g$111$13243 g$111$18744 '())))) ((lambda (g$111$18748) '()) g$111$18744))) g$111$18736))) ((lambda (g$111$18750) (if (g$111$13211 g$111$18750) (begin '#f ((lambda (g$111$18752) (if g$111$18752 (begin '#f ((lambda (g$111$18754) (if g$111$18754 (begin '#f (append g$111$18752 g$111$18754)) '#f)) ((lambda (g$111$18756) (if (g$111$13211 g$111$18756) (begin '#f ((lambda (g$111$18758) (if g$111$18758 (begin '#f ((lambda (g$111$18760) (if g$111$18760 (begin '#f (append g$111$18758 g$111$18760)) '#f)) ((lambda (g$111$18762) (if (equal? (g$111$13245 g$111$18762) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18756)))) '#f)) ((lambda (g$111$18764) (list g$111$18764)) (g$111$13219 g$111$18756)))) '#f)) (g$111$13223 g$111$18750)))) '#f)) ((lambda (g$111$18766) '()) (g$111$13219 g$111$18750)))) '#f)) g$111$18736))) (g$111$18196 'parent g$111$18728))))) (set! g$111$18202 (lambda (g$111$18694) ((lambda (g$111$18696) ((lambda (g$111$18698) (if (if g$111$18698 (begin '#f (apply (lambda (g$111$18700) '#t) g$111$18698)) '#f) (apply (lambda (g$111$18702) g$111$18702) g$111$18698) ((lambda (g$111$18704) ((lambda (g$111$18706) (if (if g$111$18706 (begin '#f (apply (lambda () '#t) g$111$18706)) '#f) (apply (lambda () '#f) g$111$18706) (error 'expander '"invalid syntax" (g$111$13243 g$111$18704 '())))) ((lambda (g$111$18708) '()) g$111$18704))) g$111$18696))) ((lambda (g$111$18710) (if (g$111$13211 g$111$18710) (begin '#f ((lambda (g$111$18712) (if g$111$18712 (begin '#f ((lambda (g$111$18714) (if g$111$18714 (begin '#f (append g$111$18712 g$111$18714)) '#f)) ((lambda (g$111$18716) (if (g$111$13211 g$111$18716) (begin '#f ((lambda (g$111$18718) (if g$111$18718 (begin '#f ((lambda (g$111$18720) (if g$111$18720 (begin '#f (append g$111$18718 g$111$18720)) '#f)) ((lambda (g$111$18722) (if (equal? (g$111$13245 g$111$18722) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18716)))) '#f)) ((lambda (g$111$18724) (list g$111$18724)) (g$111$13219 g$111$18716)))) '#f)) (g$111$13223 g$111$18710)))) '#f)) ((lambda (g$111$18726) '()) (g$111$13219 g$111$18710)))) '#f)) g$111$18696))) (g$111$18196 'protocol g$111$18694)))) (set! g$111$18204 (lambda (g$111$18634) ((lambda (g$111$18636) ((lambda (g$111$18638) (if (if g$111$18638 (begin '#f (apply (lambda () '#t) g$111$18638)) '#f) (apply (lambda () '()) g$111$18638) ((lambda (g$111$18640) ((lambda (g$111$18642) (if (if g$111$18642 (begin '#f (apply (lambda (g$111$18644) '#t) g$111$18642)) '#f) (apply (lambda (g$111$18646) g$111$18646) g$111$18642) ((lambda (g$111$18648) ((lambda (g$111$18650) (if (if g$111$18650 (begin '#f (apply (lambda (g$111$18652) '#t) g$111$18650)) '#f) (apply (lambda (g$111$18654) (g$111$18204 g$111$18654)) g$111$18650) (error 'expander '"invalid syntax" (g$111$13243 g$111$18648 '())))) ((lambda (g$111$18656) (if (g$111$13211 g$111$18656) (begin '#f ((lambda (g$111$18658) (if g$111$18658 (begin '#f ((lambda (g$111$18660) (if g$111$18660 (begin '#f (append g$111$18658 g$111$18660)) '#f)) ((lambda (g$111$18662) (list g$111$18662)) (g$111$13223 g$111$18656)))) '#f)) ((lambda (g$111$18664) '()) (g$111$13219 g$111$18656)))) '#f)) g$111$18648))) g$111$18640))) ((lambda (g$111$18666) (if (g$111$13211 g$111$18666) (begin '#f ((lambda (g$111$18668) (if g$111$18668 (begin '#f ((lambda (g$111$18670) (if g$111$18670 (begin '#f (append g$111$18668 g$111$18670)) '#f)) ((lambda (g$111$18672) '()) (g$111$13223 g$111$18666)))) '#f)) ((lambda (g$111$18674) (if (g$111$13211 g$111$18674) (begin '#f ((lambda (g$111$18676) (if g$111$18676 (begin '#f ((lambda (g$111$18678) (if g$111$18678 (begin '#f (append g$111$18676 g$111$18678)) '#f)) ((letrec ((g$111$18680 (lambda (g$111$18682) (if (g$111$13211 g$111$18682) ((lambda (g$111$18684) (if g$111$18684 (begin '#f ((lambda (g$111$18686) (if g$111$18686 (begin '#f (map cons g$111$18684 g$111$18686)) '#f)) (g$111$18680 (g$111$13223 g$111$18682)))) '#f)) ((lambda (g$111$18688) (list g$111$18688)) (g$111$13219 g$111$18682))) (if (g$111$13215 g$111$18682) (list (begin 'f* '())) '#f))))) g$111$18680) (g$111$13223 g$111$18674)))) '#f)) ((lambda (g$111$18690) (if (g$111$13225 g$111$18690) (if (g$111$13233 g$111$18690 (g$111$13478 'fields)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18674)))) '#f)) (g$111$13219 g$111$18666)))) '#f)) g$111$18640))) g$111$18636))) ((lambda (g$111$18692) (if (equal? (g$111$13245 g$111$18692) '()) (begin '#f '()) '#f)) g$111$18636))) g$111$18634))) (set! g$111$18206 (lambda (g$111$18576) (letrec ((g$111$18578 (lambda (g$111$18580 g$111$18581) ((lambda (g$111$18584) ((lambda (g$111$18586) (if (if g$111$18586 (begin '#f (apply (lambda () '#t) g$111$18586)) '#f) (apply (lambda () '()) g$111$18586) ((lambda (g$111$18588) ((lambda (g$111$18590) (if (if g$111$18590 (begin '#f (apply (lambda (g$111$18592) '#t) g$111$18590)) '#f) (apply (lambda (g$111$18594) (cons g$111$18581 (g$111$18578 g$111$18594 (+ g$111$18581 '1)))) g$111$18590) ((lambda (g$111$18596) ((lambda (g$111$18598) (if (if g$111$18598 (begin '#f (apply (lambda (g$111$18600) '#t) g$111$18598)) '#f) (apply (lambda (g$111$18602) (g$111$18578 g$111$18602 (+ g$111$18581 '1))) g$111$18598) (error 'expander '"invalid syntax" (g$111$13243 g$111$18596 '())))) ((lambda (g$111$18604) (if (g$111$13211 g$111$18604) (begin '#f ((lambda (g$111$18606) (if g$111$18606 (begin '#f ((lambda (g$111$18608) (if g$111$18608 (begin '#f (append g$111$18606 g$111$18608)) '#f)) ((lambda (g$111$18610) (list g$111$18610)) (g$111$13223 g$111$18604)))) '#f)) ((lambda (g$111$18612) '()) (g$111$13219 g$111$18604)))) '#f)) g$111$18596))) g$111$18588))) ((lambda (g$111$18614) (if (g$111$13211 g$111$18614) (begin '#f ((lambda (g$111$18616) (if g$111$18616 (begin '#f ((lambda (g$111$18618) (if g$111$18618 (begin '#f (append g$111$18616 g$111$18618)) '#f)) ((lambda (g$111$18620) (list g$111$18620)) (g$111$13223 g$111$18614)))) '#f)) ((lambda (g$111$18622) (if (g$111$13211 g$111$18622) (begin '#f ((lambda (g$111$18624) (if g$111$18624 (begin '#f ((lambda (g$111$18626) (if g$111$18626 (begin '#f (append g$111$18624 g$111$18626)) '#f)) ((lambda (g$111$18628) '()) (g$111$13223 g$111$18622)))) '#f)) ((lambda (g$111$18630) (if (g$111$13225 g$111$18630) (if (g$111$13233 g$111$18630 (g$111$13478 'mutable)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18622)))) '#f)) (g$111$13219 g$111$18614)))) '#f)) g$111$18588))) g$111$18584))) ((lambda (g$111$18632) (if (equal? (g$111$13245 g$111$18632) '()) (begin '#f '()) '#f)) g$111$18584))) g$111$18580)))) (g$111$18578 g$111$18576 '0)))) (set! g$111$18208 (lambda (g$111$18438 g$111$18439 g$111$18440) ((lambda (g$111$18444) (begin (set! g$111$18444 (lambda (g$111$18446) (g$111$13705 g$111$18440 (string->symbol (string-append '"set-" (symbol->string (g$111$13707 g$111$18438)) '"-" (symbol->string (g$111$13707 g$111$18446)) '"!"))))) (letrec ((g$111$18448 (lambda (g$111$18450) ((lambda (g$111$18452) ((lambda (g$111$18454) (if (if g$111$18454 (begin '#f (apply (lambda () '#t) g$111$18454)) '#f) (apply (lambda () '()) g$111$18454) ((lambda (g$111$18456) ((lambda (g$111$18458) (if (if g$111$18458 (begin '#f (apply (lambda (g$111$18460 g$111$18461 g$111$18462 g$111$18463) '#t) g$111$18458)) '#f) (apply (lambda (g$111$18468 g$111$18469 g$111$18470 g$111$18471) (cons g$111$18470 (g$111$18448 g$111$18471))) g$111$18458) ((lambda (g$111$18476) ((lambda (g$111$18478) (if (if g$111$18478 (begin '#f (apply (lambda (g$111$18480 g$111$18481) '#t) g$111$18478)) '#f) (apply (lambda (g$111$18484 g$111$18485) (cons (g$111$18444 g$111$18484) (g$111$18448 g$111$18485))) g$111$18478) ((lambda (g$111$18488) ((lambda (g$111$18490) (if (if g$111$18490 (begin '#f (apply (lambda (g$111$18492) '#t) g$111$18490)) '#f) (apply (lambda (g$111$18494) (g$111$18448 g$111$18494)) g$111$18490) (error 'expander '"invalid syntax" (g$111$13243 g$111$18488 '())))) ((lambda (g$111$18496) (if (g$111$13211 g$111$18496) (begin '#f ((lambda (g$111$18498) (if g$111$18498 (begin '#f ((lambda (g$111$18500) (if g$111$18500 (begin '#f (append g$111$18498 g$111$18500)) '#f)) ((lambda (g$111$18502) (list g$111$18502)) (g$111$13223 g$111$18496)))) '#f)) ((lambda (g$111$18504) '()) (g$111$13219 g$111$18496)))) '#f)) g$111$18488))) g$111$18476))) ((lambda (g$111$18506) (if (g$111$13211 g$111$18506) (begin '#f ((lambda (g$111$18508) (if g$111$18508 (begin '#f ((lambda (g$111$18510) (if g$111$18510 (begin '#f (append g$111$18508 g$111$18510)) '#f)) ((lambda (g$111$18512) (list g$111$18512)) (g$111$13223 g$111$18506)))) '#f)) ((lambda (g$111$18514) (if (g$111$13211 g$111$18514) (begin '#f ((lambda (g$111$18516) (if g$111$18516 (begin '#f ((lambda (g$111$18518) (if g$111$18518 (begin '#f (append g$111$18516 g$111$18518)) '#f)) ((lambda (g$111$18520) (if (g$111$13211 g$111$18520) (begin '#f ((lambda (g$111$18522) (if g$111$18522 (begin '#f ((lambda (g$111$18524) (if g$111$18524 (begin '#f (append g$111$18522 g$111$18524)) '#f)) ((lambda (g$111$18526) (if (equal? (g$111$13245 g$111$18526) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18520)))) '#f)) ((lambda (g$111$18528) (list g$111$18528)) (g$111$13219 g$111$18520)))) '#f)) (g$111$13223 g$111$18514)))) '#f)) ((lambda (g$111$18530) (if (g$111$13225 g$111$18530) (if (g$111$13233 g$111$18530 (g$111$13478 'mutable)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18514)))) '#f)) (g$111$13219 g$111$18506)))) '#f)) g$111$18476))) g$111$18456))) ((lambda (g$111$18532) (if (g$111$13211 g$111$18532) (begin '#f ((lambda (g$111$18534) (if g$111$18534 (begin '#f ((lambda (g$111$18536) (if g$111$18536 (begin '#f (append g$111$18534 g$111$18536)) '#f)) ((lambda (g$111$18538) (list g$111$18538)) (g$111$13223 g$111$18532)))) '#f)) ((lambda (g$111$18540) (if (g$111$13211 g$111$18540) (begin '#f ((lambda (g$111$18542) (if g$111$18542 (begin '#f ((lambda (g$111$18544) (if g$111$18544 (begin '#f (append g$111$18542 g$111$18544)) '#f)) ((lambda (g$111$18546) (if (g$111$13211 g$111$18546) (begin '#f ((lambda (g$111$18548) (if g$111$18548 (begin '#f ((lambda (g$111$18550) (if g$111$18550 (begin '#f (append g$111$18548 g$111$18550)) '#f)) ((lambda (g$111$18552) (if (g$111$13211 g$111$18552) (begin '#f ((lambda (g$111$18554) (if g$111$18554 (begin '#f ((lambda (g$111$18556) (if g$111$18556 (begin '#f (append g$111$18554 g$111$18556)) '#f)) ((lambda (g$111$18558) (if (g$111$13211 g$111$18558) (begin '#f ((lambda (g$111$18560) (if g$111$18560 (begin '#f ((lambda (g$111$18562) (if g$111$18562 (begin '#f (append g$111$18560 g$111$18562)) '#f)) ((lambda (g$111$18564) (if (equal? (g$111$13245 g$111$18564) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18558)))) '#f)) ((lambda (g$111$18566) (list g$111$18566)) (g$111$13219 g$111$18558)))) '#f)) (g$111$13223 g$111$18552)))) '#f)) ((lambda (g$111$18568) (list g$111$18568)) (g$111$13219 g$111$18552)))) '#f)) (g$111$13223 g$111$18546)))) '#f)) ((lambda (g$111$18570) (list g$111$18570)) (g$111$13219 g$111$18546)))) '#f)) (g$111$13223 g$111$18540)))) '#f)) ((lambda (g$111$18572) (if (g$111$13225 g$111$18572) (if (g$111$13233 g$111$18572 (g$111$13478 'mutable)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18540)))) '#f)) (g$111$13219 g$111$18532)))) '#f)) g$111$18456))) g$111$18452))) ((lambda (g$111$18574) (if (equal? (g$111$13245 g$111$18574) '()) (begin '#f '()) '#f)) g$111$18452))) g$111$18450)))) (g$111$18448 g$111$18439)))) '#f))) (set! g$111$18210 (lambda (g$111$18266 g$111$18267 g$111$18268) ((lambda (g$111$18272) (begin (set! g$111$18272 (lambda (g$111$18274) (g$111$13705 g$111$18268 (string->symbol (string-append (symbol->string (g$111$13707 g$111$18266)) '"-" (symbol->string (g$111$13707 g$111$18274))))))) (map (lambda (g$111$18276) ((lambda (g$111$18278) ((lambda (g$111$18280) (if (if g$111$18280 (begin '#f (apply (lambda (g$111$18282 g$111$18283 g$111$18284) (g$111$13225 g$111$18283)) g$111$18280)) '#f) (apply (lambda (g$111$18288 g$111$18289 g$111$18290) g$111$18289) g$111$18280) ((lambda (g$111$18294) ((lambda (g$111$18296) (if (if g$111$18296 (begin '#f (apply (lambda (g$111$18298 g$111$18299) (g$111$13225 g$111$18299)) g$111$18296)) '#f) (apply (lambda (g$111$18302 g$111$18303) g$111$18303) g$111$18296) ((lambda (g$111$18306) ((lambda (g$111$18308) (if (if g$111$18308 (begin '#f (apply (lambda (g$111$18310) (g$111$13225 g$111$18310)) g$111$18308)) '#f) (apply (lambda (g$111$18312) (g$111$18272 g$111$18312)) g$111$18308) ((lambda (g$111$18314) ((lambda (g$111$18316) (if (if g$111$18316 (begin '#f (apply (lambda (g$111$18318) (g$111$13225 g$111$18318)) g$111$18316)) '#f) (apply (lambda (g$111$18320) (g$111$18272 g$111$18320)) g$111$18316) ((lambda (g$111$18322) ((lambda (g$111$18324) (if (if g$111$18324 (begin '#f (apply (lambda (g$111$18326) (g$111$13225 g$111$18326)) g$111$18324)) '#f) (apply (lambda (g$111$18328) (g$111$18272 g$111$18328)) g$111$18324) ((lambda (g$111$18330) ((lambda (g$111$18332) (if (if g$111$18332 (begin '#f (apply (lambda (g$111$18334) '#t) g$111$18332)) '#f) (apply (lambda (g$111$18336) (error 'expander '"invalid field spec" (g$111$13243 g$111$18276 '()))) g$111$18332) (error 'expander '"invalid syntax" (g$111$13243 g$111$18330 '())))) ((lambda (g$111$18338) (list g$111$18338)) g$111$18330))) g$111$18322))) ((lambda (g$111$18340) (list g$111$18340)) g$111$18322))) g$111$18314))) ((lambda (g$111$18342) (if (g$111$13211 g$111$18342) (begin '#f ((lambda (g$111$18344) (if g$111$18344 (begin '#f ((lambda (g$111$18346) (if g$111$18346 (begin '#f (append g$111$18344 g$111$18346)) '#f)) ((lambda (g$111$18348) (if (g$111$13211 g$111$18348) (begin '#f ((lambda (g$111$18350) (if g$111$18350 (begin '#f ((lambda (g$111$18352) (if g$111$18352 (begin '#f (append g$111$18350 g$111$18352)) '#f)) ((lambda (g$111$18354) (if (equal? (g$111$13245 g$111$18354) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18348)))) '#f)) ((lambda (g$111$18356) (list g$111$18356)) (g$111$13219 g$111$18348)))) '#f)) (g$111$13223 g$111$18342)))) '#f)) ((lambda (g$111$18358) (if (g$111$13225 g$111$18358) (if (g$111$13233 g$111$18358 (g$111$13478 'immutable)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18342)))) '#f)) g$111$18314))) g$111$18306))) ((lambda (g$111$18360) (if (g$111$13211 g$111$18360) (begin '#f ((lambda (g$111$18362) (if g$111$18362 (begin '#f ((lambda (g$111$18364) (if g$111$18364 (begin '#f (append g$111$18362 g$111$18364)) '#f)) ((lambda (g$111$18366) (if (g$111$13211 g$111$18366) (begin '#f ((lambda (g$111$18368) (if g$111$18368 (begin '#f ((lambda (g$111$18370) (if g$111$18370 (begin '#f (append g$111$18368 g$111$18370)) '#f)) ((lambda (g$111$18372) (if (equal? (g$111$13245 g$111$18372) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18366)))) '#f)) ((lambda (g$111$18374) (list g$111$18374)) (g$111$13219 g$111$18366)))) '#f)) (g$111$13223 g$111$18360)))) '#f)) ((lambda (g$111$18376) (if (g$111$13225 g$111$18376) (if (g$111$13233 g$111$18376 (g$111$13478 'mutable)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18360)))) '#f)) g$111$18306))) g$111$18294))) ((lambda (g$111$18378) (if (g$111$13211 g$111$18378) (begin '#f ((lambda (g$111$18380) (if g$111$18380 (begin '#f ((lambda (g$111$18382) (if g$111$18382 (begin '#f (append g$111$18380 g$111$18382)) '#f)) ((lambda (g$111$18384) (if (g$111$13211 g$111$18384) (begin '#f ((lambda (g$111$18386) (if g$111$18386 (begin '#f ((lambda (g$111$18388) (if g$111$18388 (begin '#f (append g$111$18386 g$111$18388)) '#f)) ((lambda (g$111$18390) (if (g$111$13211 g$111$18390) (begin '#f ((lambda (g$111$18392) (if g$111$18392 (begin '#f ((lambda (g$111$18394) (if g$111$18394 (begin '#f (append g$111$18392 g$111$18394)) '#f)) ((lambda (g$111$18396) (if (equal? (g$111$13245 g$111$18396) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18390)))) '#f)) ((lambda (g$111$18398) (list g$111$18398)) (g$111$13219 g$111$18390)))) '#f)) (g$111$13223 g$111$18384)))) '#f)) ((lambda (g$111$18400) (list g$111$18400)) (g$111$13219 g$111$18384)))) '#f)) (g$111$13223 g$111$18378)))) '#f)) ((lambda (g$111$18402) (if (g$111$13225 g$111$18402) (if (g$111$13233 g$111$18402 (g$111$13478 'immutable)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18378)))) '#f)) g$111$18294))) g$111$18278))) ((lambda (g$111$18404) (if (g$111$13211 g$111$18404) (begin '#f ((lambda (g$111$18406) (if g$111$18406 (begin '#f ((lambda (g$111$18408) (if g$111$18408 (begin '#f (append g$111$18406 g$111$18408)) '#f)) ((lambda (g$111$18410) (if (g$111$13211 g$111$18410) (begin '#f ((lambda (g$111$18412) (if g$111$18412 (begin '#f ((lambda (g$111$18414) (if g$111$18414 (begin '#f (append g$111$18412 g$111$18414)) '#f)) ((lambda (g$111$18416) (if (g$111$13211 g$111$18416) (begin '#f ((lambda (g$111$18418) (if g$111$18418 (begin '#f ((lambda (g$111$18420) (if g$111$18420 (begin '#f (append g$111$18418 g$111$18420)) '#f)) ((lambda (g$111$18422) (if (g$111$13211 g$111$18422) (begin '#f ((lambda (g$111$18424) (if g$111$18424 (begin '#f ((lambda (g$111$18426) (if g$111$18426 (begin '#f (append g$111$18424 g$111$18426)) '#f)) ((lambda (g$111$18428) (if (equal? (g$111$13245 g$111$18428) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$18422)))) '#f)) ((lambda (g$111$18430) (list g$111$18430)) (g$111$13219 g$111$18422)))) '#f)) (g$111$13223 g$111$18416)))) '#f)) ((lambda (g$111$18432) (list g$111$18432)) (g$111$13219 g$111$18416)))) '#f)) (g$111$13223 g$111$18410)))) '#f)) ((lambda (g$111$18434) (list g$111$18434)) (g$111$13219 g$111$18410)))) '#f)) (g$111$13223 g$111$18404)))) '#f)) ((lambda (g$111$18436) (if (g$111$13225 g$111$18436) (if (g$111$13233 g$111$18436 (g$111$13478 'mutable)) (begin '#f '()) '#f) '#f)) (g$111$13219 g$111$18404)))) '#f)) g$111$18278))) g$111$18276)) g$111$18267))) '#f))) (set! g$111$18212 (lambda (g$111$18258) (letrec ((g$111$18260 (lambda (g$111$18262 g$111$18263) (if (null? g$111$18262) '() (cons g$111$18263 (g$111$18260 (cdr g$111$18262) (+ g$111$18263 '1))))))) (g$111$18260 g$111$18258 '0)))) (set! g$111$18214 (lambda (g$111$18216 g$111$18217 g$111$18218) ((lambda (g$111$18222) ((lambda (g$111$18224) ((lambda (g$111$18226) ((lambda (g$111$18228) ((lambda (g$111$18230) ((lambda (g$111$18232) ((lambda (g$111$18234) ((lambda (g$111$18236) ((lambda (g$111$18238) ((lambda (g$111$18240) ((lambda (g$111$18242) ((lambda (g$111$18244) ((lambda (g$111$18246) ((lambda (g$111$18248) ((lambda () (g$111$13512 (cons 'begin (cons (list 'define g$111$18224 g$111$18244) (cons (list 'define g$111$18228 g$111$18248) (cons (list 'define g$111$18226 g$111$18246) (cons (list 'define-syntax g$111$18222 (list 'list ''$rtd (list 'syntax g$111$18224) (list 'syntax g$111$18226))) (cons (list 'define g$111$18242 (list 'record-predicate g$111$18224)) (cons (list 'define g$111$18230 (list 'record-constructor g$111$18226)) (append (map (lambda (g$111$18250 g$111$18251) (list 'define g$111$18250 (list 'record-accessor g$111$18224 g$111$18251))) g$111$18236 g$111$18234) (map (lambda (g$111$18254 g$111$18255) (list 'define g$111$18254 (list 'record-mutator g$111$18224 g$111$18255))) g$111$18238 g$111$18240))))))))))))) (g$111$18202 g$111$18218))) (g$111$18200 g$111$18218 g$111$18224 g$111$18228))) (g$111$18198 g$111$18216 g$111$18222 g$111$18218))) (g$111$18194 g$111$18217 g$111$18216))) (g$111$18206 g$111$18232))) (g$111$18208 g$111$18222 g$111$18232 g$111$18216))) (g$111$18210 g$111$18222 g$111$18232 g$111$18216))) (g$111$18212 g$111$18232))) (g$111$18204 g$111$18218))) (g$111$18192 g$111$18217 g$111$18216))) (gensym))) (gensym))) (gensym))) (g$111$18190 g$111$18217)))) ((lambda (g$111$19242) ((lambda (g$111$19244) (if (if g$111$19244 (begin '#f (apply (lambda (g$111$19246 g$111$19247 g$111$19248) '#t) g$111$19244)) '#f) (apply (lambda (g$111$19252 g$111$19253 g$111$19254) (g$111$18214 g$111$19252 g$111$19253 g$111$19254)) g$111$19244) (error 'expander '"invalid syntax" (g$111$13243 g$111$19242 '())))) ((lambda (g$111$19258) (if (g$111$13211 g$111$19258) (begin '#f ((lambda (g$111$19260) (if g$111$19260 (begin '#f ((lambda (g$111$19262) (if g$111$19262 (begin '#f (append g$111$19260 g$111$19262)) '#f)) ((lambda (g$111$19264) (if (g$111$13211 g$111$19264) (begin '#f ((lambda (g$111$19266) (if g$111$19266 (begin '#f ((lambda (g$111$19268) (if g$111$19268 (begin '#f (append g$111$19266 g$111$19268)) '#f)) ((letrec ((g$111$19270 (lambda (g$111$19272) (if (g$111$13211 g$111$19272) ((lambda (g$111$19274) (if g$111$19274 (begin '#f ((lambda (g$111$19276) (if g$111$19276 (begin '#f (map cons g$111$19274 g$111$19276)) '#f)) (g$111$19270 (g$111$13223 g$111$19272)))) '#f)) ((lambda (g$111$19278) (list g$111$19278)) (g$111$13219 g$111$19272))) (if (g$111$13215 g$111$19272) (list (begin 'clause* '())) '#f))))) g$111$19270) (g$111$13223 g$111$19264)))) '#f)) ((lambda (g$111$19280) (list g$111$19280)) (g$111$13219 g$111$19264)))) '#f)) (g$111$13223 g$111$19258)))) '#f)) ((lambda (g$111$19282) (list g$111$19282)) (g$111$13219 g$111$19258)))) '#f)) g$111$19242))) g$111$18186))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$111$13558 (lambda (g$111$19284) ((lambda (g$111$19286) (begin (set! g$111$19286 (lambda (g$111$19288 g$111$19289) (g$111$13705 g$111$19288 (string->symbol (string-append (symbol->string (g$111$13707 g$111$19288)) g$111$19289))))) ((lambda (g$111$19292) ((lambda (g$111$19294) (if (if g$111$19294 (begin '#f (apply (lambda (g$111$19296 g$111$19297 g$111$19298 g$111$19299 g$111$19300 g$111$19301 g$111$19302) (if (g$111$13225 g$111$19297) (if (g$111$13225 g$111$19298) (if (g$111$13225 g$111$19299) (if (g$111$13225 g$111$19300) (if (for-all g$111$13225 g$111$19301) (begin '#f (for-all g$111$13225 g$111$19302)) '#f) '#f) '#f) '#f) '#f)) g$111$19294)) '#f) (apply (lambda (g$111$19310 g$111$19311 g$111$19312 g$111$19313 g$111$19314 g$111$19315 g$111$19316) ((lambda (g$111$19324) (g$111$13512 (cons 'begin (cons (cons 'define-record-type (cons (list g$111$19311 g$111$19313 (gensym)) (cons (list 'parent g$111$19312) (cons (cons 'fields (map (lambda (g$111$19326 g$111$19327) (list 'immutable g$111$19326 g$111$19327)) g$111$19315 g$111$19324)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g$111$19314 (list 'condition-predicate (list 'record-type-descriptor g$111$19311))) (map (lambda (g$111$19330 g$111$19331) (list 'define g$111$19330 (list 'condition-accessor (list 'record-type-descriptor g$111$19311) g$111$19331))) g$111$19316 g$111$19324)))))) (map (lambda (g$111$19334) (gensym)) g$111$19316))) g$111$19294) (error 'expander '"invalid syntax" (g$111$13243 g$111$19292 '())))) ((lambda (g$111$19336) (if (g$111$13211 g$111$19336) (begin '#f ((lambda (g$111$19338) (if g$111$19338 (begin '#f ((lambda (g$111$19340) (if g$111$19340 (begin '#f (append g$111$19338 g$111$19340)) '#f)) ((lambda (g$111$19342) (if (g$111$13211 g$111$19342) (begin '#f ((lambda (g$111$19344) (if g$111$19344 (begin '#f ((lambda (g$111$19346) (if g$111$19346 (begin '#f (append g$111$19344 g$111$19346)) '#f)) ((lambda (g$111$19348) (if (g$111$13211 g$111$19348) (begin '#f ((lambda (g$111$19350) (if g$111$19350 (begin '#f ((lambda (g$111$19352) (if g$111$19352 (begin '#f (append g$111$19350 g$111$19352)) '#f)) ((lambda (g$111$19354) (if (g$111$13211 g$111$19354) (begin '#f ((lambda (g$111$19356) (if g$111$19356 (begin '#f ((lambda (g$111$19358) (if g$111$19358 (begin '#f (append g$111$19356 g$111$19358)) '#f)) ((lambda (g$111$19360) (if (g$111$13211 g$111$19360) (begin '#f ((lambda (g$111$19362) (if g$111$19362 (begin '#f ((lambda (g$111$19364) (if g$111$19364 (begin '#f (append g$111$19362 g$111$19364)) '#f)) ((letrec ((g$111$19366 (lambda (g$111$19368) (if (g$111$13211 g$111$19368) ((lambda (g$111$19370) (if g$111$19370 (begin '#f ((lambda (g$111$19372) (if g$111$19372 (begin '#f (map cons g$111$19370 g$111$19372)) '#f)) (g$111$19366 (g$111$13223 g$111$19368)))) '#f)) ((lambda (g$111$19374) (if (g$111$13211 g$111$19374) (begin '#f ((lambda (g$111$19376) (if g$111$19376 (begin '#f ((lambda (g$111$19378) (if g$111$19378 (begin '#f (append g$111$19376 g$111$19378)) '#f)) ((lambda (g$111$19380) (if (g$111$13211 g$111$19380) (begin '#f ((lambda (g$111$19382) (if g$111$19382 (begin '#f ((lambda (g$111$19384) (if g$111$19384 (begin '#f (append g$111$19382 g$111$19384)) '#f)) ((lambda (g$111$19386) (if (equal? (g$111$13245 g$111$19386) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$19380)))) '#f)) ((lambda (g$111$19388) (list g$111$19388)) (g$111$13219 g$111$19380)))) '#f)) (g$111$13223 g$111$19374)))) '#f)) ((lambda (g$111$19390) (list g$111$19390)) (g$111$13219 g$111$19374)))) '#f)) (g$111$13219 g$111$19368))) (if (g$111$13215 g$111$19368) (list (begin 'field* '()) (begin 'accessor* '())) '#f))))) g$111$19366) (g$111$13223 g$111$19360)))) '#f)) ((lambda (g$111$19392) (list g$111$19392)) (g$111$13219 g$111$19360)))) '#f)) (g$111$13223 g$111$19354)))) '#f)) ((lambda (g$111$19394) (list g$111$19394)) (g$111$13219 g$111$19354)))) '#f)) (g$111$13223 g$111$19348)))) '#f)) ((lambda (g$111$19396) (list g$111$19396)) (g$111$13219 g$111$19348)))) '#f)) (g$111$13223 g$111$19342)))) '#f)) ((lambda (g$111$19398) (list g$111$19398)) (g$111$13219 g$111$19342)))) '#f)) (g$111$13223 g$111$19336)))) '#f)) ((lambda (g$111$19400) (list g$111$19400)) (g$111$13219 g$111$19336)))) '#f)) g$111$19292))) g$111$19284))) '#f))) (set! g$111$13560 (lambda (g$111$19402) (error 'expander '"incorrect usage of auxilary keyword" (g$111$13243 g$111$19402 '())))) (set! g$111$13562 (lambda (g$111$19404 g$111$19405 g$111$19406) ((lambda (g$111$19410) ((lambda (g$111$19412) (if (if g$111$19412 (begin '#f (apply (lambda (g$111$19414 g$111$19415) '#t) g$111$19412)) '#f) (apply (lambda (g$111$19418 g$111$19419) (g$111$13612 (cons g$111$19418 g$111$19419) g$111$19405 g$111$19406)) g$111$19412) ((lambda (g$111$19422) ((lambda (g$111$19424) (if (if g$111$19424 (begin '#f (apply (lambda (g$111$19426 g$111$19427 g$111$19428 g$111$19429) '#t) g$111$19424)) '#f) (apply (lambda (g$111$19434 g$111$19435 g$111$19436 g$111$19437) ((lambda (g$111$19442 g$111$19443 g$111$19444 g$111$19445) (g$111$13112 '#f (append g$111$19442 g$111$19443) (append (g$111$13592 g$111$19434 g$111$19405 g$111$19406) (g$111$13592 g$111$19435 g$111$19405 g$111$19406)) (g$111$13112 '#f (list g$111$19445) (list (g$111$13114 '#f '() (g$111$13108 '#f (map (lambda (g$111$19450 g$111$19451 g$111$19452) (g$111$13112 '#f (list g$111$19450) (list (list g$111$19451)) (g$111$13108 '#f (list (list g$111$19451 g$111$19452) (list 'set! g$111$19452 g$111$19450))))) g$111$19444 g$111$19442 g$111$19443)))) (list '(primitive dynamic-wind) g$111$19445 (g$111$13114 '#f '() (g$111$13612 (cons g$111$19436 g$111$19437) g$111$19405 g$111$19406)) g$111$19445)))) (map (lambda (g$111$19456) (g$111$13135 'lhs)) g$111$19434) (map (lambda (g$111$19458) (g$111$13135 'rhs)) g$111$19434) (map (lambda (g$111$19460) (g$111$13135 't)) g$111$19434) (g$111$13135 'swap))) g$111$19424) (error 'expander '"invalid syntax" (g$111$13243 g$111$19422 '())))) ((lambda (g$111$19462) (if (g$111$13211 g$111$19462) (begin '#f ((lambda (g$111$19464) (if g$111$19464 (begin '#f ((lambda (g$111$19466) (if g$111$19466 (begin '#f (append g$111$19464 g$111$19466)) '#f)) ((lambda (g$111$19468) (if (g$111$13211 g$111$19468) (begin '#f ((lambda (g$111$19470) (if g$111$19470 (begin '#f ((lambda (g$111$19472) (if g$111$19472 (begin '#f (append g$111$19470 g$111$19472)) '#f)) ((lambda (g$111$19474) (if (g$111$13211 g$111$19474) (begin '#f ((lambda (g$111$19476) (if g$111$19476 (begin '#f ((lambda (g$111$19478) (if g$111$19478 (begin '#f (append g$111$19476 g$111$19478)) '#f)) ((letrec ((g$111$19480 (lambda (g$111$19482) (if (g$111$13211 g$111$19482) ((lambda (g$111$19484) (if g$111$19484 (begin '#f ((lambda (g$111$19486) (if g$111$19486 (begin '#f (map cons g$111$19484 g$111$19486)) '#f)) (g$111$19480 (g$111$13223 g$111$19482)))) '#f)) ((lambda (g$111$19488) (list g$111$19488)) (g$111$13219 g$111$19482))) (if (g$111$13215 g$111$19482) (list (begin 'b* '())) '#f))))) g$111$19480) (g$111$13223 g$111$19474)))) '#f)) ((lambda (g$111$19490) (list g$111$19490)) (g$111$13219 g$111$19474)))) '#f)) (g$111$13223 g$111$19468)))) '#f)) ((letrec ((g$111$19492 (lambda (g$111$19494) (if (g$111$13211 g$111$19494) ((lambda (g$111$19496) (if g$111$19496 (begin '#f ((lambda (g$111$19498) (if g$111$19498 (begin '#f (map cons g$111$19496 g$111$19498)) '#f)) (g$111$19492 (g$111$13223 g$111$19494)))) '#f)) ((lambda (g$111$19500) (if (g$111$13211 g$111$19500) (begin '#f ((lambda (g$111$19502) (if g$111$19502 (begin '#f ((lambda (g$111$19504) (if g$111$19504 (begin '#f (append g$111$19502 g$111$19504)) '#f)) ((lambda (g$111$19506) (if (g$111$13211 g$111$19506) (begin '#f ((lambda (g$111$19508) (if g$111$19508 (begin '#f ((lambda (g$111$19510) (if g$111$19510 (begin '#f (append g$111$19508 g$111$19510)) '#f)) ((lambda (g$111$19512) (if (equal? (g$111$13245 g$111$19512) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$19506)))) '#f)) ((lambda (g$111$19514) (list g$111$19514)) (g$111$13219 g$111$19506)))) '#f)) (g$111$13223 g$111$19500)))) '#f)) ((lambda (g$111$19516) (list g$111$19516)) (g$111$13219 g$111$19500)))) '#f)) (g$111$13219 g$111$19494))) (if (g$111$13215 g$111$19494) (list (begin 'olhs* '()) (begin 'orhs* '())) '#f))))) g$111$19492) (g$111$13219 g$111$19468)))) '#f)) (g$111$13223 g$111$19462)))) '#f)) ((lambda (g$111$19518) '()) (g$111$13219 g$111$19462)))) '#f)) g$111$19422))) g$111$19410))) ((lambda (g$111$19520) (if (g$111$13211 g$111$19520) (begin '#f ((lambda (g$111$19522) (if g$111$19522 (begin '#f ((lambda (g$111$19524) (if g$111$19524 (begin '#f (append g$111$19522 g$111$19524)) '#f)) ((lambda (g$111$19526) (if (g$111$13211 g$111$19526) (begin '#f ((lambda (g$111$19528) (if g$111$19528 (begin '#f ((lambda (g$111$19530) (if g$111$19530 (begin '#f (append g$111$19528 g$111$19530)) '#f)) ((lambda (g$111$19532) (if (g$111$13211 g$111$19532) (begin '#f ((lambda (g$111$19534) (if g$111$19534 (begin '#f ((lambda (g$111$19536) (if g$111$19536 (begin '#f (append g$111$19534 g$111$19536)) '#f)) ((letrec ((g$111$19538 (lambda (g$111$19540) (if (g$111$13211 g$111$19540) ((lambda (g$111$19542) (if g$111$19542 (begin '#f ((lambda (g$111$19544) (if g$111$19544 (begin '#f (map cons g$111$19542 g$111$19544)) '#f)) (g$111$19538 (g$111$13223 g$111$19540)))) '#f)) ((lambda (g$111$19546) (list g$111$19546)) (g$111$13219 g$111$19540))) (if (g$111$13215 g$111$19540) (list (begin 'b* '())) '#f))))) g$111$19538) (g$111$13223 g$111$19532)))) '#f)) ((lambda (g$111$19548) (list g$111$19548)) (g$111$13219 g$111$19532)))) '#f)) (g$111$13223 g$111$19526)))) '#f)) ((lambda (g$111$19550) (if (equal? (g$111$13245 g$111$19550) '()) (begin '#f '()) '#f)) (g$111$13219 g$111$19526)))) '#f)) (g$111$13223 g$111$19520)))) '#f)) ((lambda (g$111$19552) '()) (g$111$13219 g$111$19520)))) '#f)) g$111$19410))) g$111$19404))) (set! g$111$13564 (lambda (g$111$19554 g$111$19555 g$111$19556) ((lambda (g$111$19560) ((lambda (g$111$19562) (if (if g$111$19562 (begin '#f (apply (lambda (g$111$19564 g$111$19565) '#t) g$111$19562)) '#f) (apply (lambda (g$111$19568 g$111$19569) (cons 'foreign-call (cons (g$111$13596 g$111$19568 g$111$19555 g$111$19556) (g$111$13592 g$111$19569 g$111$19555 g$111$19556)))) g$111$19562) (error 'expander '"invalid syntax" (g$111$13243 g$111$19560 '())))) ((lambda (g$111$19572) (if (g$111$13211 g$111$19572) (begin '#f ((lambda (g$111$19574) (if g$111$19574 (begin '#f ((lambda (g$111$19576) (if g$111$19576 (begin '#f (append g$111$19574 g$111$19576)) '#f)) ((lambda (g$111$19578) (if (g$111$13211 g$111$19578) (begin '#f ((lambda (g$111$19580) (if g$111$19580 (begin '#f ((lambda (g$111$19582) (if g$111$19582 (begin '#f (append g$111$19580 g$111$19582)) '#f)) ((letrec ((g$111$19584 (lambda (g$111$19586) (if (g$111$13211 g$111$19586) ((lambda (g$111$19588) (if g$111$19588 (begin '#f ((lambda (g$111$19590) (if g$111$19590 (begin '#f (map cons g$111$19588 g$111$19590)) '#f)) (g$111$19584 (g$111$13223 g$111$19586)))) '#f)) ((lambda (g$111$19592) (list g$111$19592)) (g$111$13219 g$111$19586))) (if (g$111$13215 g$111$19586) (list (begin 'arg* '())) '#f))))) g$111$19584) (g$111$13223 g$111$19578)))) '#f)) ((lambda (g$111$19594) (list g$111$19594)) (g$111$13219 g$111$19578)))) '#f)) (g$111$13223 g$111$19572)))) '#f)) ((lambda (g$111$19596) '()) (g$111$13219 g$111$19572)))) '#f)) g$111$19560))) g$111$19554))) (set! g$111$13566 (lambda (g$111$19598 g$111$19599) ((lambda (g$111$19602 g$111$19604) (begin (set! g$111$19602 (lambda (g$111$19792 g$111$19793 g$111$19794) (if (null? g$111$19792) (values '() g$111$19794) (call-with-values (lambda () (g$111$19602 (cdr g$111$19792) g$111$19793 g$111$19794)) (lambda (g$111$19798 g$111$19799) (call-with-values (lambda () (g$111$19604 (car g$111$19792) g$111$19793 g$111$19799)) (lambda (g$111$19802 g$111$19803) (values (cons g$111$19802 g$111$19798) g$111$19803)))))))) (set! g$111$19604 (lambda (g$111$19606 g$111$19607 g$111$19608) ((lambda (g$111$19612) ((lambda (g$111$19614) (if (if g$111$19614 (begin '#f (apply (lambda (g$111$19616) (g$111$13225 g$111$19616)) g$111$19614)) '#f) (apply (lambda (g$111$19618) (if (g$111$13239 g$111$19606 g$111$19599) (values (vector 'free-id g$111$19606) g$111$19608) (if (g$111$13233 g$111$19606 (g$111$13478 '_)) (values '_ g$111$19608) (values 'any (cons (cons g$111$19606 g$111$19607) g$111$19608))))) g$111$19614) ((lambda (g$111$19620) ((lambda (g$111$19622) (if (if g$111$19622 (begin '#f (apply (lambda (g$111$19624 g$111$19625) (g$111$13570 g$111$19625)) g$111$19622)) '#f) (apply (lambda (g$111$19628 g$111$19629) (call-with-values (lambda () (g$111$19604 g$111$19628 (+ g$111$19607 '1) g$111$19608)) (lambda (g$111$19632 g$111$19633) (values (if (eq? g$111$19632 'any) 'each-any (vector 'each g$111$19632)) g$111$19633)))) g$111$19622) ((lambda (g$111$19636) ((lambda (g$111$19638) (if (if g$111$19638 (begin '#f (apply (lambda (g$111$19640 g$111$19641 g$111$19642 g$111$19643) (g$111$13570 g$111$19641)) g$111$19638)) '#f) (apply (lambda (g$111$19648 g$111$19649 g$111$19650 g$111$19651) (call-with-values (lambda () (g$111$19604 g$111$19651 g$111$19607 g$111$19608)) (lambda (g$111$19656 g$111$19657) (call-with-values (lambda () (g$111$19602 g$111$19650 g$111$19607 g$111$19657)) (lambda (g$111$19660 g$111$19661) (call-with-values (lambda () (g$111$19604 g$111$19648 (+ g$111$19607 '1) g$111$19661)) (lambda (g$111$19664 g$111$19665) (values (vector 'each+ g$111$19664 (reverse g$111$19660) g$111$19656) g$111$19665)))))))) g$111$19638) ((lambda (g$111$19668) ((lambda (g$111$19670) (if (if g$111$19670 (begin '#f (apply (lambda (g$111$19672 g$111$19673) '#t) g$111$19670)) '#f) (apply (lambda (g$111$19676 g$111$19677) (call-with-values (lambda () (g$111$19604 g$111$19677 g$111$19607 g$111$19608)) (lambda (g$111$19680 g$111$19681) (call-with-values (lambda () (g$111$19604 g$111$19676 g$111$19607 g$111$19681)) (lambda (g$111$19684 g$111$19685) (values (cons g$111$19684 g$111$19680) g$111$19685)))))) g$111$19670) ((lambda (g$111$19688) ((lambda (g$111$19690) (if (if g$111$19690 (begin '#f (apply (lambda () '#t) g$111$19690)) '#f) (apply (lambda () (values '() g$111$19608)) g$111$19690) ((lambda (g$111$19692) ((lambda (g$111$19694) (if (if g$111$19694 (begin '#f (apply (lambda (g$111$19696) (not (g$111$13177 g$111$19696))) g$111$19694)) '#f) (apply (lambda (g$111$19698) (call-with-values (lambda () (g$111$19604 g$111$19698 g$111$19607 g$111$19608)) (lambda (g$111$19700 g$111$19701) (values (vector 'vector g$111$19700) g$111$19701)))) g$111$19694) ((lambda (g$111$19704) ((lambda (g$111$19706) (if (if g$111$19706 (begin '#f (apply (lambda (g$111$19708) '#t) g$111$19706)) '#f) (apply (lambda (g$111$19710) (values (vector 'atom (g$111$13245 g$111$19710)) g$111$19608)) g$111$19706) (error 'expander '"invalid syntax" (g$111$13243 g$111$19704 '())))) ((lambda (g$111$19712) (list g$111$19712)) g$111$19704))) g$111$19692))) ((lambda (g$111$19714) (if (g$111$13213 g$111$19714) (begin '#f ((letrec ((g$111$19716 (lambda (g$111$19718) (if (g$111$13211 g$111$19718) ((lambda (g$111$19720) (if g$111$19720 (begin '#f ((lambda (g$111$19722) (if g$111$19722 (begin '#f (map cons g$111$19720 g$111$19722)) '#f)) (g$111$19716 (g$111$13223 g$111$19718)))) '#f)) ((lambda (g$111$19724) (list g$111$19724)) (g$111$13219 g$111$19718))) (if (g$111$13215 g$111$19718) (list (begin 'p '())) '#f))))) g$111$19716) (g$111$13209 g$111$19714))) '#f)) g$111$19692))) g$111$19688))) ((lambda (g$111$19726) (if (equal? (g$111$13245 g$111$19726) '()) (begin '#f '()) '#f)) g$111$19688))) g$111$19668))) ((lambda (g$111$19728) (if (g$111$13211 g$111$19728) (begin '#f ((lambda (g$111$19730) (if g$111$19730 (begin '#f ((lambda (g$111$19732) (if g$111$19732 (begin '#f (append g$111$19730 g$111$19732)) '#f)) ((lambda (g$111$19734) (list g$111$19734)) (g$111$13223 g$111$19728)))) '#f)) ((lambda (g$111$19736) (list g$111$19736)) (g$111$13219 g$111$19728)))) '#f)) g$111$19668))) g$111$19636))) ((lambda (g$111$19738) (if (g$111$13211 g$111$19738) (begin '#f ((lambda (g$111$19740) (if g$111$19740 (begin '#f ((lambda (g$111$19742) (if g$111$19742 (begin '#f (append g$111$19740 g$111$19742)) '#f)) ((lambda (g$111$19744) (if (g$111$13211 g$111$19744) (begin '#f ((lambda (g$111$19746) (if g$111$19746 (begin '#f ((lambda (g$111$19748) (if g$111$19748 (begin '#f (append g$111$19746 g$111$19748)) '#f)) ((letrec ((g$111$19750 (lambda (g$111$19756) (if (g$111$13211 g$111$19756) ((lambda (g$111$19758) (if g$111$19758 (begin '#f ((lambda (g$111$19760) (if g$111$19760 (begin '#f (cons (map cons g$111$19758 (car g$111$19760)) (cdr g$111$19760))) '#f)) (g$111$19750 (g$111$13223 g$111$19756)))) '#f)) ((lambda (g$111$19762) (list g$111$19762)) (g$111$13219 g$111$19756))) ((lambda (g$111$19764) (if g$111$19764 (begin '#f (cons (list (begin 'ys '())) g$111$19764)) '#f)) ((lambda (g$111$19766) (list g$111$19766)) g$111$19756)))))) (lambda (g$111$19752) ((lambda (g$111$19754) (if g$111$19754 (begin '#f (append (car g$111$19754) (cdr g$111$19754))) '#f)) (g$111$19750 g$111$19752)))) (g$111$13223 g$111$19744)))) '#f)) ((lambda (g$111$19768) (list g$111$19768)) (g$111$13219 g$111$19744)))) '#f)) (g$111$13223 g$111$19738)))) '#f)) ((lambda (g$111$19770) (list g$111$19770)) (g$111$13219 g$111$19738)))) '#f)) g$111$19636))) g$111$19620))) ((lambda (g$111$19772) (if (g$111$13211 g$111$19772) (begin '#f ((lambda (g$111$19774) (if g$111$19774 (begin '#f ((lambda (g$111$19776) (if g$111$19776 (begin '#f (append g$111$19774 g$111$19776)) '#f)) ((lambda (g$111$19778) (if (g$111$13211 g$111$19778) (begin '#f ((lambda (g$111$19780) (if g$111$19780 (begin '#f ((lambda (g$111$19782) (if g$111$19782 (begin '#f (append g$111$19780 g$111$19782)) '#f)) ((lambda (g$111$19784) (if (equal? (g$111$13245 g$111$19784) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$19778)))) '#f)) ((lambda (g$111$19786) (list g$111$19786)) (g$111$13219 g$111$19778)))) '#f)) (g$111$13223 g$111$19772)))) '#f)) ((lambda (g$111$19788) (list g$111$19788)) (g$111$13219 g$111$19772)))) '#f)) g$111$19620))) g$111$19612))) ((lambda (g$111$19790) (list g$111$19790)) g$111$19612))) g$111$19606))) (g$111$19604 g$111$19598 '0 '()))) '#f '#f))) (set! g$111$13568 (lambda (g$111$19806 g$111$19807) ((lambda (g$111$19810 g$111$19812 g$111$19814 g$111$19816 g$111$19818 g$111$19820 g$111$19822 g$111$19824) (begin (set! g$111$19810 (lambda (g$111$19932 g$111$19933 g$111$19934) (if (if (null? g$111$19933) (begin '#f (null? g$111$19934)) '#f) g$111$19932 (g$111$13201 g$111$19932 g$111$19933 g$111$19934)))) (set! g$111$19812 (lambda (g$111$19916 g$111$19917 g$111$19918 g$111$19919) (if (pair? g$111$19916) ((lambda (g$111$19924) (if g$111$19924 (begin '#f ((lambda (g$111$19926) (if g$111$19926 (begin '#f (cons g$111$19924 g$111$19926)) '#f)) (g$111$19812 (cdr g$111$19916) g$111$19917 g$111$19918 g$111$19919))) '#f)) (g$111$19824 (car g$111$19916) g$111$19917 g$111$19918 g$111$19919 '())) (if (null? g$111$19916) '() (if (g$111$13177 g$111$19916) (call-with-values (lambda () (g$111$13199 g$111$19918 g$111$19919 g$111$19916)) (lambda (g$111$19928 g$111$19929) (g$111$19812 (g$111$13179 g$111$19916) g$111$19917 g$111$19928 g$111$19929))) '#f))))) (set! g$111$19814 (lambda (g$111$19882 g$111$19883 g$111$19884 g$111$19885 g$111$19886 g$111$19887 g$111$19888) (letrec ((g$111$19896 (lambda (g$111$19898 g$111$19899 g$111$19900) (if (pair? g$111$19898) (call-with-values (lambda () (g$111$19896 (cdr g$111$19898) g$111$19899 g$111$19900)) (lambda (g$111$19904 g$111$19905 g$111$19906) (if g$111$19906 (if (null? g$111$19905) ((lambda (g$111$19910) (if g$111$19910 (values (cons g$111$19910 g$111$19904) g$111$19905 g$111$19906) (values '#f '#f '#f))) (g$111$19824 (car g$111$19898) g$111$19883 g$111$19899 g$111$19900 '())) (values '() (cdr g$111$19905) (g$111$19824 (car g$111$19898) (car g$111$19905) g$111$19899 g$111$19900 g$111$19906))) (values '#f '#f '#f)))) (if (g$111$13177 g$111$19898) (call-with-values (lambda () (g$111$13199 g$111$19899 g$111$19900 g$111$19898)) (lambda (g$111$19912 g$111$19913) (g$111$19896 (g$111$13179 g$111$19898) g$111$19912 g$111$19913))) (values '() g$111$19884 (g$111$19824 g$111$19898 g$111$19885 g$111$19899 g$111$19900 g$111$19888))))))) (g$111$19896 g$111$19882 g$111$19886 g$111$19887)))) (set! g$111$19816 (lambda (g$111$19870 g$111$19871 g$111$19872) (if (pair? g$111$19870) ((lambda (g$111$19876) (if g$111$19876 (begin '#f (cons (g$111$19810 (car g$111$19870) g$111$19871 g$111$19872) g$111$19876)) '#f)) (g$111$19816 (cdr g$111$19870) g$111$19871 g$111$19872)) (if (null? g$111$19870) '() (if (g$111$13177 g$111$19870) (call-with-values (lambda () (g$111$13199 g$111$19871 g$111$19872 g$111$19870)) (lambda (g$111$19878 g$111$19879) (g$111$19816 (g$111$13179 g$111$19870) g$111$19878 g$111$19879))) '#f))))) (set! g$111$19818 (lambda (g$111$19865 g$111$19866) (if (null? g$111$19865) g$111$19866 (if (eq? g$111$19865 '_) g$111$19866 (if (eq? g$111$19865 'any) (cons '() g$111$19866) (if (pair? g$111$19865) (g$111$19818 (car g$111$19865) (g$111$19818 (cdr g$111$19865) g$111$19866)) (if (eq? g$111$19865 'each-any) (cons '() g$111$19866) ((lambda (g$111$19869) (if (memv g$111$19869 '(each)) (g$111$19818 (vector-ref g$111$19865 '1) g$111$19866) (if (memv g$111$19869 '(each+)) (g$111$19818 (vector-ref g$111$19865 '1) (g$111$19818 (reverse (vector-ref g$111$19865 '2)) (g$111$19818 (vector-ref g$111$19865 '3) g$111$19866))) (if (memv g$111$19869 '(free-id atom)) g$111$19866 (if (memv g$111$19869 '(vector)) (g$111$19818 (vector-ref g$111$19865 '1) g$111$19866) (error 'syntax-dispatch '"invalid pattern" g$111$19865)))))) (vector-ref g$111$19865 '0))))))))) (set! g$111$19820 (lambda (g$111$19861 g$111$19862) (if (null? (car g$111$19861)) g$111$19862 (cons (map car g$111$19861) (g$111$19820 (map cdr g$111$19861) g$111$19862))))) (set! g$111$19822 (lambda (g$111$19840 g$111$19841 g$111$19842 g$111$19843 g$111$19844) (if (null? g$111$19841) (if (null? g$111$19840) (begin '#f g$111$19844) '#f) (if (pair? g$111$19841) (if (pair? g$111$19840) (begin '#f (g$111$19824 (car g$111$19840) (car g$111$19841) g$111$19842 g$111$19843 (g$111$19824 (cdr g$111$19840) (cdr g$111$19841) g$111$19842 g$111$19843 g$111$19844))) '#f) (if (eq? g$111$19841 'each-any) ((lambda (g$111$19850) (if g$111$19850 (begin '#f (cons g$111$19850 g$111$19844)) '#f)) (g$111$19816 g$111$19840 g$111$19842 g$111$19843)) ((lambda (g$111$19852) (if (memv g$111$19852 '(each)) (if (null? g$111$19840) (g$111$19818 (vector-ref g$111$19841 '1) g$111$19844) ((lambda (g$111$19859) (if g$111$19859 (begin '#f (g$111$19820 g$111$19859 g$111$19844)) '#f)) (g$111$19812 g$111$19840 (vector-ref g$111$19841 '1) g$111$19842 g$111$19843))) (if (memv g$111$19852 '(free-id)) (if (symbol? g$111$19840) (if (g$111$13233 (g$111$19810 g$111$19840 g$111$19842 g$111$19843) (vector-ref g$111$19841 '1)) (begin '#f g$111$19844) '#f) '#f) (if (memv g$111$19852 '(each+)) (call-with-values (lambda () (g$111$19814 g$111$19840 (vector-ref g$111$19841 '1) (vector-ref g$111$19841 '2) (vector-ref g$111$19841 '3) g$111$19842 g$111$19843 g$111$19844)) (lambda (g$111$19853 g$111$19854 g$111$19855) (if g$111$19855 (if (null? g$111$19854) (begin '#f (if (null? g$111$19853) (g$111$19818 (vector-ref g$111$19841 '1) g$111$19855) (g$111$19820 g$111$19853 g$111$19855))) '#f) '#f))) (if (memv g$111$19852 '(atom)) (if (equal? (vector-ref g$111$19841 '1) (g$111$13243 g$111$19840 g$111$19842)) (begin '#f g$111$19844) '#f) (if (memv g$111$19852 '(vector)) (if (vector? g$111$19840) (begin '#f (g$111$19824 (vector->list g$111$19840) (vector-ref g$111$19841 '1) g$111$19842 g$111$19843 g$111$19844)) '#f) (error 'syntax-dispatch '"invalid pattern" g$111$19841))))))) (vector-ref g$111$19841 '0))))))) (set! g$111$19824 (lambda (g$111$19826 g$111$19827 g$111$19828 g$111$19829 g$111$19830) (if (not g$111$19830) '#f (if (eq? g$111$19827 '_) g$111$19830 (if (eq? g$111$19827 'any) (cons (g$111$19810 g$111$19826 g$111$19828 g$111$19829) g$111$19830) (if (g$111$13177 g$111$19826) (call-with-values (lambda () (g$111$13199 g$111$19828 g$111$19829 g$111$19826)) (lambda (g$111$19836 g$111$19837) (g$111$19824 (g$111$13179 g$111$19826) g$111$19827 g$111$19836 g$111$19837 g$111$19830))) (g$111$19822 g$111$19826 g$111$19827 g$111$19828 g$111$19829 g$111$19830))))))) (g$111$19824 g$111$19806 g$111$19807 '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$111$13570 (lambda (g$111$19938) (if (g$111$13225 g$111$19938) (begin '#f (g$111$13233 g$111$19938 (g$111$13478 '|...|))) '#f))) (set! g$111$13572 ((lambda () ((lambda (g$111$19940 g$111$19942 g$111$19944 g$111$19946) (begin (set! g$111$19940 (lambda (g$111$20080 g$111$20081 g$111$20082 g$111$20083 g$111$20084) ((lambda (g$111$20090 g$111$20091) ((lambda (g$111$20094 g$111$20095) ((lambda (g$111$20098) (list '(primitive apply) (g$111$13114 '#f g$111$20095 g$111$20098) g$111$20082)) (g$111$13596 (g$111$13205 (g$111$13172 g$111$20090 g$111$20094) g$111$20081) (append (map (lambda (g$111$20100 g$111$20101 g$111$20102) (cons g$111$20100 (g$111$13251 'syntax (cons g$111$20101 g$111$20102)))) g$111$20094 g$111$20095 (map cdr g$111$20080)) g$111$20083) g$111$20084))) (map g$111$13139 g$111$20090) (map g$111$13135 g$111$20090))) (map car g$111$20080) (map cdr g$111$20080)))) (set! g$111$19942 (lambda (g$111$20068 g$111$20069 g$111$20070) (letrec ((g$111$20074 (lambda (g$111$20076 g$111$20077) (if (null? g$111$20076) (error 'expander '"invalid syntax" (g$111$13245 g$111$20069)) (if (g$111$13225 (car g$111$20076)) (if (g$111$13239 (car g$111$20076) g$111$20077) (g$111$13701 (car g$111$20076) '"duplicate " g$111$20070) (g$111$20074 (cdr g$111$20076) (cons (car g$111$20076) g$111$20077))) (g$111$13701 (car g$111$20076) '"invalid " g$111$20070)))))) (g$111$20074 g$111$20068 '())))) (set! g$111$19944 (lambda (g$111$20036 g$111$20037 g$111$20038 g$111$20039 g$111$20040 g$111$20041 g$111$20042 g$111$20043) (call-with-values (lambda () (g$111$13566 g$111$20041 g$111$20037)) (lambda (g$111$20052 g$111$20053) (if (not (g$111$13237 (map car g$111$20053))) (g$111$19942 (map car g$111$20053) g$111$20041 '"pattern variable") (if (not (for-all (lambda (g$111$20056) (not (g$111$13570 (car g$111$20056)))) g$111$20053)) (error 'expander '"misplaced ellipsis in syntax-case pattern" (g$111$13243 g$111$20041 '())) ((lambda (g$111$20058) ((lambda (g$111$20060) ((lambda (g$111$20062) ((lambda (g$111$20064) (list (g$111$13114 '#f (list g$111$20058) (list 'if g$111$20060 g$111$20062 g$111$20064)) (list '(primitive syntax-dispatch) g$111$20036 (list 'quote g$111$20052)))) (g$111$19946 g$111$20036 g$111$20037 g$111$20038 g$111$20039 g$111$20040))) (g$111$19940 g$111$20053 g$111$20043 g$111$20058 g$111$20039 g$111$20040))) (if (eq? g$111$20042 '#t) g$111$20058 ((lambda (g$111$20066) (list 'if g$111$20058 g$111$20066 (list 'quote '#f))) (g$111$19940 g$111$20053 g$111$20042 g$111$20058 g$111$20039 g$111$20040))))) (g$111$13135 'tmp)))))))) (set! g$111$19946 (lambda (g$111$19948 g$111$19949 g$111$19950 g$111$19951 g$111$19952) (if (null? g$111$19950) (list '(primitive syntax-error) g$111$19948) ((lambda (g$111$19958) ((lambda (g$111$19960) (if (if g$111$19960 (begin '#f (apply (lambda (g$111$19962 g$111$19963) '#t) g$111$19960)) '#f) (apply (lambda (g$111$19966 g$111$19967) (if (if (g$111$13225 g$111$19966) (if (not (g$111$13239 g$111$19966 g$111$19949)) (begin '#f (not (g$111$13570 g$111$19966))) '#f) '#f) (if (g$111$13233 g$111$19966 (g$111$13478 '_)) (g$111$13596 g$111$19967 g$111$19951 g$111$19952) ((lambda (g$111$19970 g$111$19971) ((lambda (g$111$19974) (list (g$111$13114 '#f (list g$111$19971) g$111$19974) g$111$19948)) (g$111$13596 (g$111$13205 (g$111$13172 (list g$111$19966) (list g$111$19970)) g$111$19967) (cons (cons g$111$19970 (g$111$13251 'syntax (cons g$111$19971 '0))) g$111$19951) g$111$19952))) (g$111$13139 g$111$19966) (g$111$13135 g$111$19966))) (g$111$19944 g$111$19948 g$111$19949 (cdr g$111$19950) g$111$19951 g$111$19952 g$111$19966 '#t g$111$19967))) g$111$19960) ((lambda (g$111$19976) ((lambda (g$111$19978) (if (if g$111$19978 (begin '#f (apply (lambda (g$111$19980 g$111$19981 g$111$19982) '#t) g$111$19978)) '#f) (apply (lambda (g$111$19986 g$111$19987 g$111$19988) (g$111$19944 g$111$19948 g$111$19949 (cdr g$111$19950) g$111$19951 g$111$19952 g$111$19986 g$111$19987 g$111$19988)) g$111$19978) (error 'expander '"invalid syntax" (g$111$13243 g$111$19976 '())))) ((lambda (g$111$19992) (if (g$111$13211 g$111$19992) (begin '#f ((lambda (g$111$19994) (if g$111$19994 (begin '#f ((lambda (g$111$19996) (if g$111$19996 (begin '#f (append g$111$19994 g$111$19996)) '#f)) ((lambda (g$111$19998) (if (g$111$13211 g$111$19998) (begin '#f ((lambda (g$111$20000) (if g$111$20000 (begin '#f ((lambda (g$111$20002) (if g$111$20002 (begin '#f (append g$111$20000 g$111$20002)) '#f)) ((lambda (g$111$20004) (if (g$111$13211 g$111$20004) (begin '#f ((lambda (g$111$20006) (if g$111$20006 (begin '#f ((lambda (g$111$20008) (if g$111$20008 (begin '#f (append g$111$20006 g$111$20008)) '#f)) ((lambda (g$111$20010) (if (equal? (g$111$13245 g$111$20010) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$20004)))) '#f)) ((lambda (g$111$20012) (list g$111$20012)) (g$111$13219 g$111$20004)))) '#f)) (g$111$13223 g$111$19998)))) '#f)) ((lambda (g$111$20014) (list g$111$20014)) (g$111$13219 g$111$19998)))) '#f)) (g$111$13223 g$111$19992)))) '#f)) ((lambda (g$111$20016) (list g$111$20016)) (g$111$13219 g$111$19992)))) '#f)) g$111$19976))) g$111$19958))) ((lambda (g$111$20018) (if (g$111$13211 g$111$20018) (begin '#f ((lambda (g$111$20020) (if g$111$20020 (begin '#f ((lambda (g$111$20022) (if g$111$20022 (begin '#f (append g$111$20020 g$111$20022)) '#f)) ((lambda (g$111$20024) (if (g$111$13211 g$111$20024) (begin '#f ((lambda (g$111$20026) (if g$111$20026 (begin '#f ((lambda (g$111$20028) (if g$111$20028 (begin '#f (append g$111$20026 g$111$20028)) '#f)) ((lambda (g$111$20030) (if (equal? (g$111$13245 g$111$20030) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$20024)))) '#f)) ((lambda (g$111$20032) (list g$111$20032)) (g$111$13219 g$111$20024)))) '#f)) (g$111$13223 g$111$20018)))) '#f)) ((lambda (g$111$20034) (list g$111$20034)) (g$111$13219 g$111$20018)))) '#f)) g$111$19958))) (car g$111$19950))))) (lambda (g$111$20106 g$111$20107 g$111$20108) ((lambda (g$111$20112) ((lambda (g$111$20114) (if (if g$111$20114 (begin '#f (apply (lambda (g$111$20116 g$111$20117 g$111$20118) '#t) g$111$20114)) '#f) (apply (lambda (g$111$20122 g$111$20123 g$111$20124) (begin (if (for-all (lambda (g$111$20128) (if (g$111$13225 g$111$20128) (begin '#f (not (g$111$13570 g$111$20128))) '#f)) g$111$20123) (void) (error 'expander '"invalid literals" (g$111$13243 g$111$20106 '()))) ((lambda (g$111$20130) ((lambda (g$111$20132) (list (g$111$13114 '#f (list g$111$20130) g$111$20132) (g$111$13596 g$111$20122 g$111$20107 g$111$20108))) (g$111$19946 g$111$20130 g$111$20123 g$111$20124 g$111$20107 g$111$20108))) (g$111$13135 'tmp)))) g$111$20114) (error 'expander '"invalid syntax" (g$111$13243 g$111$20112 '())))) ((lambda (g$111$20134) (if (g$111$13211 g$111$20134) (begin '#f ((lambda (g$111$20136) (if g$111$20136 (begin '#f ((lambda (g$111$20138) (if g$111$20138 (begin '#f (append g$111$20136 g$111$20138)) '#f)) ((lambda (g$111$20140) (if (g$111$13211 g$111$20140) (begin '#f ((lambda (g$111$20142) (if g$111$20142 (begin '#f ((lambda (g$111$20144) (if g$111$20144 (begin '#f (append g$111$20142 g$111$20144)) '#f)) ((lambda (g$111$20146) (if (g$111$13211 g$111$20146) (begin '#f ((lambda (g$111$20148) (if g$111$20148 (begin '#f ((lambda (g$111$20150) (if g$111$20150 (begin '#f (append g$111$20148 g$111$20150)) '#f)) ((letrec ((g$111$20152 (lambda (g$111$20154) (if (g$111$13211 g$111$20154) ((lambda (g$111$20156) (if g$111$20156 (begin '#f ((lambda (g$111$20158) (if g$111$20158 (begin '#f (map cons g$111$20156 g$111$20158)) '#f)) (g$111$20152 (g$111$13223 g$111$20154)))) '#f)) ((lambda (g$111$20160) (list g$111$20160)) (g$111$13219 g$111$20154))) (if (g$111$13215 g$111$20154) (list (begin 'clauses '())) '#f))))) g$111$20152) (g$111$13223 g$111$20146)))) '#f)) ((letrec ((g$111$20162 (lambda (g$111$20164) (if (g$111$13211 g$111$20164) ((lambda (g$111$20166) (if g$111$20166 (begin '#f ((lambda (g$111$20168) (if g$111$20168 (begin '#f (map cons g$111$20166 g$111$20168)) '#f)) (g$111$20162 (g$111$13223 g$111$20164)))) '#f)) ((lambda (g$111$20170) (list g$111$20170)) (g$111$13219 g$111$20164))) (if (g$111$13215 g$111$20164) (list (begin 'keys '())) '#f))))) g$111$20162) (g$111$13219 g$111$20146)))) '#f)) (g$111$13223 g$111$20140)))) '#f)) ((lambda (g$111$20172) (list g$111$20172)) (g$111$13219 g$111$20140)))) '#f)) (g$111$13223 g$111$20134)))) '#f)) ((lambda (g$111$20174) '()) (g$111$13219 g$111$20134)))) '#f)) g$111$20112))) g$111$20106)))) '#f '#f '#f '#f)))) (set! g$111$13574 ((lambda () ((lambda (g$111$20176 g$111$20178 g$111$20180 g$111$20182 g$111$20184 g$111$20186 g$111$20188 g$111$20190) (begin (set! g$111$20176 (lambda (g$111$20262 g$111$20263 g$111$20264 g$111$20265 g$111$20266 g$111$20267) ((lambda (g$111$20274) ((lambda (g$111$20276) (if (if g$111$20276 (begin '#f (apply (lambda (g$111$20278) (g$111$20266 g$111$20278)) g$111$20276)) '#f) (apply (lambda (g$111$20280) (error 'expander '"misplaced ellipsis in syntax form" (g$111$13243 g$111$20262 '()))) g$111$20276) ((lambda (g$111$20282) ((lambda (g$111$20284) (if (if g$111$20284 (begin '#f (apply (lambda (g$111$20286) (g$111$13225 g$111$20286)) g$111$20284)) '#f) (apply (lambda (g$111$20288) ((lambda (g$111$20290) ((lambda (g$111$20292) ((lambda () (if (eq? (g$111$13253 g$111$20292) 'syntax) (call-with-values (lambda () ((lambda (g$111$20294) (g$111$20178 g$111$20262 (car g$111$20294) (cdr g$111$20294) g$111$20265)) (g$111$13255 g$111$20292))) (lambda (g$111$20296 g$111$20297) (values (list 'ref g$111$20296) g$111$20297))) (values (list 'quote g$111$20263) g$111$20265))))) (g$111$13249 g$111$20290 g$111$20264))) (g$111$13247 g$111$20263))) g$111$20284) ((lambda (g$111$20300) ((lambda (g$111$20302) (if (if g$111$20302 (begin '#f (apply (lambda (g$111$20304 g$111$20305) (g$111$20266 g$111$20304)) g$111$20302)) '#f) (apply (lambda (g$111$20308 g$111$20309) (if g$111$20267 (error 'expander '"misplaced ellipsis in syntax form" (g$111$13243 g$111$20262 '())) (g$111$20176 g$111$20262 g$111$20309 g$111$20264 g$111$20265 (lambda (g$111$20312) '#f) '#f))) g$111$20302) ((lambda (g$111$20314) ((lambda (g$111$20316) (if (if g$111$20316 (begin '#f (apply (lambda (g$111$20318 g$111$20319 g$111$20320) (g$111$20266 g$111$20319)) g$111$20316)) '#f) (apply (lambda (g$111$20324 g$111$20325 g$111$20326) (letrec ((g$111$20330 (lambda (g$111$20338 g$111$20339) ((lambda (g$111$20342) ((lambda (g$111$20344) (if (if g$111$20344 (begin '#f (apply (lambda () '#t) g$111$20344)) '#f) (apply (lambda () (g$111$20339 g$111$20265)) g$111$20344) ((lambda (g$111$20346) ((lambda (g$111$20348) (if (if g$111$20348 (begin '#f (apply (lambda (g$111$20350 g$111$20351) (g$111$20266 g$111$20350)) g$111$20348)) '#f) (apply (lambda (g$111$20354 g$111$20355) (g$111$20330 g$111$20355 (lambda (g$111$20358) (call-with-values (lambda () (g$111$20339 (cons '() g$111$20358))) (lambda (g$111$20360 g$111$20361) (if (null? (car g$111$20361)) (error 'expander '"extra ellipsis in syntax form" (g$111$13243 g$111$20262 '())) (values (g$111$20182 g$111$20360 (car g$111$20361)) (cdr g$111$20361)))))))) g$111$20348) ((lambda (g$111$20364) ((lambda (g$111$20366) (if (if g$111$20366 (begin '#f (apply (lambda () '#t) g$111$20366)) '#f) (apply (lambda () (call-with-values (lambda () (g$111$20176 g$111$20262 g$111$20338 g$111$20264 g$111$20265 g$111$20266 g$111$20267)) (lambda (g$111$20368 g$111$20369) (call-with-values (lambda () (g$111$20339 g$111$20369)) (lambda (g$111$20372 g$111$20373) (values (g$111$20180 g$111$20372 g$111$20368) g$111$20373)))))) g$111$20366) (error 'expander '"invalid syntax" (g$111$13243 g$111$20364 '())))) ((lambda (g$111$20376) '()) g$111$20364))) g$111$20346))) ((lambda (g$111$20378) (if (g$111$13211 g$111$20378) (begin '#f ((lambda (g$111$20380) (if g$111$20380 (begin '#f ((lambda (g$111$20382) (if g$111$20382 (begin '#f (append g$111$20380 g$111$20382)) '#f)) ((lambda (g$111$20384) (list g$111$20384)) (g$111$13223 g$111$20378)))) '#f)) ((lambda (g$111$20386) (list g$111$20386)) (g$111$13219 g$111$20378)))) '#f)) g$111$20346))) g$111$20342))) ((lambda (g$111$20388) (if (equal? (g$111$13245 g$111$20388) '()) (begin '#f '()) '#f)) g$111$20342))) g$111$20338)))) (g$111$20330 g$111$20326 (lambda (g$111$20332) (call-with-values (lambda () (g$111$20176 g$111$20262 g$111$20324 g$111$20264 (cons '() g$111$20332) g$111$20266 '#f)) (lambda (g$111$20334 g$111$20335) (if (null? (car g$111$20335)) (error 'expander '"extra ellipsis in syntax form" (g$111$13243 g$111$20262 '())) (values (g$111$20184 g$111$20334 (car g$111$20335)) (cdr g$111$20335))))))))) g$111$20316) ((lambda (g$111$20390) ((lambda (g$111$20392) (if (if g$111$20392 (begin '#f (apply (lambda (g$111$20394 g$111$20395) '#t) g$111$20392)) '#f) (apply (lambda (g$111$20398 g$111$20399) (call-with-values (lambda () (g$111$20176 g$111$20262 g$111$20398 g$111$20264 g$111$20265 g$111$20266 '#f)) (lambda (g$111$20402 g$111$20403) (call-with-values (lambda () (g$111$20176 g$111$20262 g$111$20399 g$111$20264 g$111$20403 g$111$20266 g$111$20267)) (lambda (g$111$20406 g$111$20407) (values (g$111$20186 g$111$20263 g$111$20398 g$111$20399 g$111$20402 g$111$20406) g$111$20407)))))) g$111$20392) ((lambda (g$111$20410) ((lambda (g$111$20412) (if (if g$111$20412 (begin '#f (apply (lambda (g$111$20414) (not (g$111$13177 g$111$20263))) g$111$20412)) '#f) (apply (lambda (g$111$20416) (call-with-values (lambda () (g$111$20176 g$111$20262 g$111$20416 g$111$20264 g$111$20265 g$111$20266 '#t)) (lambda (g$111$20418 g$111$20419) (values (g$111$20188 g$111$20263 g$111$20416 g$111$20418) g$111$20419)))) g$111$20412) ((lambda (g$111$20422) ((lambda (g$111$20424) (if (if g$111$20424 (begin '#f (apply (lambda () '#t) g$111$20424)) '#f) (apply (lambda () (values (list 'quote g$111$20263) g$111$20265)) g$111$20424) (error 'expander '"invalid syntax" (g$111$13243 g$111$20422 '())))) ((lambda (g$111$20426) '()) g$111$20422))) g$111$20410))) ((lambda (g$111$20428) (if (g$111$13213 g$111$20428) (begin '#f ((letrec ((g$111$20430 (lambda (g$111$20432) (if (g$111$13211 g$111$20432) ((lambda (g$111$20434) (if g$111$20434 (begin '#f ((lambda (g$111$20436) (if g$111$20436 (begin '#f (map cons g$111$20434 g$111$20436)) '#f)) (g$111$20430 (g$111$13223 g$111$20432)))) '#f)) ((lambda (g$111$20438) (list g$111$20438)) (g$111$13219 g$111$20432))) (if (g$111$13215 g$111$20432) (list (begin 'ls '())) '#f))))) g$111$20430) (g$111$13209 g$111$20428))) '#f)) g$111$20410))) g$111$20390))) ((lambda (g$111$20440) (if (g$111$13211 g$111$20440) (begin '#f ((lambda (g$111$20442) (if g$111$20442 (begin '#f ((lambda (g$111$20444) (if g$111$20444 (begin '#f (append g$111$20442 g$111$20444)) '#f)) ((lambda (g$111$20446) (list g$111$20446)) (g$111$13223 g$111$20440)))) '#f)) ((lambda (g$111$20448) (list g$111$20448)) (g$111$13219 g$111$20440)))) '#f)) g$111$20390))) g$111$20314))) ((lambda (g$111$20450) (if (g$111$13211 g$111$20450) (begin '#f ((lambda (g$111$20452) (if g$111$20452 (begin '#f ((lambda (g$111$20454) (if g$111$20454 (begin '#f (append g$111$20452 g$111$20454)) '#f)) ((lambda (g$111$20456) (if (g$111$13211 g$111$20456) (begin '#f ((lambda (g$111$20458) (if g$111$20458 (begin '#f ((lambda (g$111$20460) (if g$111$20460 (begin '#f (append g$111$20458 g$111$20460)) '#f)) ((lambda (g$111$20462) (list g$111$20462)) (g$111$13223 g$111$20456)))) '#f)) ((lambda (g$111$20464) (list g$111$20464)) (g$111$13219 g$111$20456)))) '#f)) (g$111$13223 g$111$20450)))) '#f)) ((lambda (g$111$20466) (list g$111$20466)) (g$111$13219 g$111$20450)))) '#f)) g$111$20314))) g$111$20300))) ((lambda (g$111$20468) (if (g$111$13211 g$111$20468) (begin '#f ((lambda (g$111$20470) (if g$111$20470 (begin '#f ((lambda (g$111$20472) (if g$111$20472 (begin '#f (append g$111$20470 g$111$20472)) '#f)) ((lambda (g$111$20474) (if (g$111$13211 g$111$20474) (begin '#f ((lambda (g$111$20476) (if g$111$20476 (begin '#f ((lambda (g$111$20478) (if g$111$20478 (begin '#f (append g$111$20476 g$111$20478)) '#f)) ((lambda (g$111$20480) (if (equal? (g$111$13245 g$111$20480) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$20474)))) '#f)) ((lambda (g$111$20482) (list g$111$20482)) (g$111$13219 g$111$20474)))) '#f)) (g$111$13223 g$111$20468)))) '#f)) ((lambda (g$111$20484) (list g$111$20484)) (g$111$13219 g$111$20468)))) '#f)) g$111$20300))) g$111$20282))) ((lambda (g$111$20486) (list g$111$20486)) g$111$20282))) g$111$20274))) ((lambda (g$111$20488) (list g$111$20488)) g$111$20274))) g$111$20263))) (set! g$111$20178 (lambda (g$111$20244 g$111$20245 g$111$20246 g$111$20247) (if (= g$111$20246 '0) (values g$111$20245 g$111$20247) (if (null? g$111$20247) (error 'expander '"missing ellipsis in syntax form" (g$111$13243 g$111$20244 '())) (call-with-values (lambda () (g$111$20178 g$111$20244 g$111$20245 (- g$111$20246 '1) (cdr g$111$20247))) (lambda (g$111$20252 g$111$20253) ((lambda (g$111$20256) (if g$111$20256 ((lambda (g$111$20258) (values (cdr g$111$20258) g$111$20247)) g$111$20256) ((lambda (g$111$20260) (values g$111$20260 (cons (cons (cons g$111$20252 g$111$20260) (car g$111$20247)) g$111$20253))) (g$111$13135 'tmp)))) (assq g$111$20252 (car g$111$20247))))))))) (set! g$111$20180 (lambda (g$111$20240 g$111$20241) (if (equal? g$111$20241 ''()) g$111$20240 (list 'append g$111$20240 g$111$20241)))) (set! g$111$20182 (lambda (g$111$20236 g$111$20237) (list 'apply '(primitive append) (g$111$20184 g$111$20236 g$111$20237)))) (set! g$111$20184 (lambda (g$111$20218 g$111$20219) ((lambda (g$111$20222 g$111$20223) (if (eq? (car g$111$20218) 'ref) (car g$111$20223) (if (for-all (lambda (g$111$20226) (if (eq? (car g$111$20226) 'ref) (begin '#f (memq (cadr g$111$20226) g$111$20222)) '#f)) (cdr g$111$20218)) ((lambda (g$111$20228) (cons 'map (cons (list 'primitive (car g$111$20218)) g$111$20228))) (map ((lambda (g$111$20230) (lambda (g$111$20232) (cdr (assq (cadr g$111$20232) g$111$20230)))) (map cons g$111$20222 g$111$20223)) (cdr g$111$20218))) (cons* 'map (list 'lambda g$111$20222 g$111$20218) g$111$20223)))) (map cdr g$111$20219) (map (lambda (g$111$20234) (list 'ref (car g$111$20234))) g$111$20219)))) (set! g$111$20186 (lambda (g$111$20203 g$111$20204 g$111$20205 g$111$20206 g$111$20207) ((lambda (g$111$20213) (if (memv g$111$20213 '(quote)) (if (eq? (car g$111$20206) 'quote) ((lambda (g$111$20214 g$111$20215) (if (if (eq? g$111$20214 g$111$20204) (begin '#f (eq? g$111$20215 g$111$20205)) '#f) (list 'quote g$111$20203) (list 'quote (cons g$111$20214 g$111$20215)))) (cadr g$111$20206) (cadr g$111$20207)) (if (null? (cadr g$111$20207)) (list 'list g$111$20206) (list 'cons g$111$20206 g$111$20207))) (if (memv g$111$20213 '(list)) (cons 'list (cons g$111$20206 (cdr g$111$20207))) (list 'cons g$111$20206 g$111$20207)))) (car g$111$20207)))) (set! g$111$20188 (lambda (g$111$20197 g$111$20198 g$111$20199) (if (eq? (car g$111$20199) 'quote) (if (eq? (cadr g$111$20199) g$111$20198) (list 'quote g$111$20197) (list 'quote (list->vector (cadr g$111$20199)))) (if (eq? (car g$111$20199) 'list) (cons 'vector (cdr g$111$20199)) (list 'list->vector g$111$20199))))) (set! g$111$20190 (lambda (g$111$20192) ((lambda (g$111$20194) (if (memv g$111$20194 '(ref)) (cadr g$111$20192) (if (memv g$111$20194 '(primitive)) (list 'primitive (cadr g$111$20192)) (if (memv g$111$20194 '(quote)) (list 'quote (cadr g$111$20192)) (if (memv g$111$20194 '(lambda)) (g$111$13114 '#f (cadr g$111$20192) (g$111$20190 (caddr g$111$20192))) (if (memv g$111$20194 '(map)) ((lambda (g$111$20195) (cons '(primitive map) g$111$20195)) (map g$111$20190 (cdr g$111$20192))) (cons (list 'primitive (car g$111$20192)) (map g$111$20190 (cdr g$111$20192))))))))) (car g$111$20192)))) (lambda (g$111$20490 g$111$20491 g$111$20492) ((lambda (g$111$20496) ((lambda (g$111$20498) (if (if g$111$20498 (begin '#f (apply (lambda (g$111$20500) '#t) g$111$20498)) '#f) (apply (lambda (g$111$20502) (call-with-values (lambda () (g$111$20176 g$111$20490 g$111$20502 g$111$20491 '() g$111$13570 '#f)) (lambda (g$111$20504 g$111$20505) (g$111$20190 g$111$20504)))) g$111$20498) (error 'expander '"invalid syntax" (g$111$13243 g$111$20496 '())))) ((lambda (g$111$20508) (if (g$111$13211 g$111$20508) (begin '#f ((lambda (g$111$20510) (if g$111$20510 (begin '#f ((lambda (g$111$20512) (if g$111$20512 (begin '#f (append g$111$20510 g$111$20512)) '#f)) ((lambda (g$111$20514) (if (g$111$13211 g$111$20514) (begin '#f ((lambda (g$111$20516) (if g$111$20516 (begin '#f ((lambda (g$111$20518) (if g$111$20518 (begin '#f (append g$111$20516 g$111$20518)) '#f)) ((lambda (g$111$20520) (if (equal? (g$111$13245 g$111$20520) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$20514)))) '#f)) ((lambda (g$111$20522) (list g$111$20522)) (g$111$13219 g$111$20514)))) '#f)) (g$111$13223 g$111$20508)))) '#f)) ((lambda (g$111$20524) '()) (g$111$13219 g$111$20508)))) '#f)) g$111$20496))) g$111$20490)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g$111$13576 (lambda (g$111$20526) ((lambda (g$111$20528) (if (memv g$111$20528 '(quote)) g$111$13506 (if (memv g$111$20528 '(lambda)) g$111$13510 (if (memv g$111$20528 '(case-lambda)) g$111$13508 (if (memv g$111$20528 '(let-values)) g$111$13484 (if (memv g$111$20528 '(letrec)) g$111$13488 (if (memv g$111$20528 '(letrec*)) g$111$13490 (if (memv g$111$20528 '(case)) g$111$13504 (if (memv g$111$20528 '(if)) g$111$13502 (if (memv g$111$20528 '(when)) g$111$13498 (if (memv g$111$20528 '(unless)) g$111$13500 (if (memv g$111$20528 '(parameterize)) g$111$13562 (if (memv g$111$20528 '(foreign-call)) g$111$13564 (if (memv g$111$20528 '(syntax-case)) g$111$13572 (if (memv g$111$20528 '(syntax)) g$111$13574 (if (memv g$111$20528 '(type-descriptor)) g$111$13492 (if (memv g$111$20528 '(record-type-descriptor)) g$111$13494 (if (memv g$111$20528 '(record-constructor-descriptor)) g$111$13496 (error 'macro-transformer '"cannot find transformer" g$111$20526))))))))))))))))))) g$111$20526))) (set! g$111$13578 (lambda (g$111$20529) ((lambda (g$111$20531) ((lambda (g$111$20533) (if (if g$111$20533 (begin '#f (apply (lambda (g$111$20535) (if (for-all g$111$13225 g$111$20535) (begin '#f (g$111$12315 (map g$111$13227 g$111$20535))) '#f)) g$111$20533)) '#f) (apply (lambda (g$111$20537) (g$111$13512 (list 'quote (g$111$12315 (map g$111$13227 g$111$20537))))) g$111$20533) (error 'expander '"invalid syntax" (g$111$13243 g$111$20531 '())))) ((lambda (g$111$20539) (if (g$111$13211 g$111$20539) (begin '#f ((lambda (g$111$20541) (if g$111$20541 (begin '#f ((lambda (g$111$20543) (if g$111$20543 (begin '#f (append g$111$20541 g$111$20543)) '#f)) ((letrec ((g$111$20545 (lambda (g$111$20547) (if (g$111$13211 g$111$20547) ((lambda (g$111$20549) (if g$111$20549 (begin '#f ((lambda (g$111$20551) (if g$111$20551 (begin '#f (map cons g$111$20549 g$111$20551)) '#f)) (g$111$20545 (g$111$13223 g$111$20547)))) '#f)) ((lambda (g$111$20553) (list g$111$20553)) (g$111$13219 g$111$20547))) (if (g$111$13215 g$111$20547) (list (begin 'opt* '())) '#f))))) g$111$20545) (g$111$13223 g$111$20539)))) '#f)) ((lambda (g$111$20555) '()) (g$111$13219 g$111$20539)))) '#f)) g$111$20531))) g$111$20529))) (set! g$111$13580 (lambda (g$111$20557 g$111$20558) ((lambda (g$111$20561) ((lambda (g$111$20563) (if (if g$111$20563 (begin '#f (apply (lambda (g$111$20565) (if (g$111$13225 g$111$20565) (begin '#f (memq (g$111$13227 g$111$20565) g$111$20558)) '#f)) g$111$20563)) '#f) (apply (lambda (g$111$20567) (g$111$13512 (list 'quote g$111$20567))) g$111$20563) (error 'expander '"invalid syntax" (g$111$13243 g$111$20561 '())))) ((lambda (g$111$20569) (if (g$111$13211 g$111$20569) (begin '#f ((lambda (g$111$20571) (if g$111$20571 (begin '#f ((lambda (g$111$20573) (if g$111$20573 (begin '#f (append g$111$20571 g$111$20573)) '#f)) ((lambda (g$111$20575) (if (g$111$13211 g$111$20575) (begin '#f ((lambda (g$111$20577) (if g$111$20577 (begin '#f ((lambda (g$111$20579) (if g$111$20579 (begin '#f (append g$111$20577 g$111$20579)) '#f)) ((lambda (g$111$20581) (if (equal? (g$111$13245 g$111$20581) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$20575)))) '#f)) ((lambda (g$111$20583) (list g$111$20583)) (g$111$13219 g$111$20575)))) '#f)) (g$111$13223 g$111$20569)))) '#f)) ((lambda (g$111$20585) '()) (g$111$13219 g$111$20569)))) '#f)) g$111$20561))) g$111$20557))) (set! g$111$13582 (lambda (g$111$20587) (if (procedure? g$111$20587) g$111$20587 (if (symbol? g$111$20587) ((lambda (g$111$20589) (if (memv g$111$20589 '(define-record-type)) g$111$13556 (if (memv g$111$20589 '(define-struct)) g$111$13554 (if (memv g$111$20589 '(include)) g$111$13546 (if (memv g$111$20589 '(cond)) g$111$13544 (if (memv g$111$20589 '(let)) g$111$13516 (if (memv g$111$20589 '(do)) g$111$13536 (if (memv g$111$20589 '(or)) g$111$13540 (if (memv g$111$20589 '(and)) g$111$13542 (if (memv g$111$20589 '(let*)) g$111$13538 (if (memv g$111$20589 '(syntax-rules)) g$111$13548 (if (memv g$111$20589 '(quasiquote)) g$111$13550 (if (memv g$111$20589 '(quasisyntax)) g$111$13552 (if (memv g$111$20589 '(with-syntax)) g$111$13514 (if (memv g$111$20589 '(identifier-syntax)) g$111$13534 (if (memv g$111$20589 '(time)) g$111$13526 (if (memv g$111$20589 '(delay)) g$111$13528 (if (memv g$111$20589 '(assert)) g$111$13530 (if (memv g$111$20589 '(endianness)) g$111$13532 (if (memv g$111$20589 '(guard)) g$111$13522 (if (memv g$111$20589 '(define-enumeration)) g$111$13524 (if (memv g$111$20589 '(trace-lambda)) g$111$13518 (if (memv g$111$20589 '(trace-define)) g$111$13520 (if (memv g$111$20589 '(define-condition-type)) g$111$13558 (if (memv g$111$20589 '(eol-style)) (lambda (g$111$20594) (g$111$13580 g$111$20594 '(none lf cr crlf nel crnel ls))) (if (memv g$111$20589 '(error-handling-mode)) (lambda (g$111$20592) (g$111$13580 g$111$20592 '(ignore raise replace))) (if (memv g$111$20589 '(buffer-mode)) (lambda (g$111$20590) (g$111$13580 g$111$20590 '(none line block))) (if (memv g$111$20589 '(file-options)) g$111$13578 (if (memv g$111$20589 '(|...| => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g$111$13560 (error 'macro-transformer '"invalid macro" g$111$20587)))))))))))))))))))))))))))))) g$111$20587) (error 'core-macro-transformer '"invalid macro" g$111$20587))))) (set! g$111$13584 (lambda (g$111$20596) (car g$111$20596))) (set! g$111$13586 (lambda (g$111$20598 g$111$20599) ((lambda (g$111$20602) (g$111$13203 (g$111$13193) g$111$20602)) ((g$111$13582 g$111$20598) (g$111$13203 g$111$13195 g$111$20599))))) (set! g$111$13588 (lambda (g$111$20604 g$111$20605) ((lambda (g$111$20608) (g$111$13203 (g$111$13193) g$111$20608)) ((g$111$13584 g$111$20604) (g$111$13203 g$111$13195 g$111$20605))))) (set! g$111$13590 (lambda (g$111$20610 g$111$20611) ((lambda (g$111$20614 g$111$20615) (begin (g$111$12829 g$111$20614) ((lambda (g$111$20618) ((lambda (g$111$20620) ((lambda (g$111$20622) (g$111$13203 (g$111$13193) g$111$20622)) (g$111$20620 (g$111$13203 g$111$13195 g$111$20611)))) (if (procedure? g$111$20618) g$111$20618 (error 'chi-global-macro '"not a procedure")))) (symbol-value g$111$20615)))) (car g$111$20610) (cdr g$111$20610)))) (set! g$111$13592 (lambda (g$111$20624 g$111$20625 g$111$20626) (if (null? g$111$20624) '() ((lambda (g$111$20630) (cons g$111$20630 (g$111$13592 (cdr g$111$20624) g$111$20625 g$111$20626))) (g$111$13596 (car g$111$20624) g$111$20625 g$111$20626))))) (set! g$111$13594 (lambda (g$111$20632 g$111$20633 g$111$20634) ((lambda (g$111$20638) ((lambda (g$111$20640) (if (if g$111$20640 (begin '#f (apply (lambda (g$111$20642 g$111$20643) '#t) g$111$20640)) '#f) (apply (lambda (g$111$20646 g$111$20647) ((lambda (g$111$20650) (cons g$111$20650 (g$111$13592 g$111$20647 g$111$20633 g$111$20634))) (g$111$13596 g$111$20646 g$111$20633 g$111$20634))) g$111$20640) (error 'expander '"invalid syntax" (g$111$13243 g$111$20638 '())))) ((lambda (g$111$20652) (if (g$111$13211 g$111$20652) (begin '#f ((lambda (g$111$20654) (if g$111$20654 (begin '#f ((lambda (g$111$20656) (if g$111$20656 (begin '#f (append g$111$20654 g$111$20656)) '#f)) ((letrec ((g$111$20658 (lambda (g$111$20660) (if (g$111$13211 g$111$20660) ((lambda (g$111$20662) (if g$111$20662 (begin '#f ((lambda (g$111$20664) (if g$111$20664 (begin '#f (map cons g$111$20662 g$111$20664)) '#f)) (g$111$20658 (g$111$13223 g$111$20660)))) '#f)) ((lambda (g$111$20666) (list g$111$20666)) (g$111$13219 g$111$20660))) (if (g$111$13215 g$111$20660) (list (begin 'rands '())) '#f))))) g$111$20658) (g$111$13223 g$111$20652)))) '#f)) ((lambda (g$111$20668) (list g$111$20668)) (g$111$13219 g$111$20652)))) '#f)) g$111$20638))) g$111$20632))) (set! g$111$13596 (lambda (g$111$20670 g$111$20671 g$111$20672) (call-with-values (lambda () (g$111$13257 g$111$20670 g$111$20671)) (lambda (g$111$20676 g$111$20677 g$111$20678) ((lambda (g$111$20682) (if (memv g$111$20682 '(core-macro)) ((lambda (g$111$20819) (g$111$20819 g$111$20670 g$111$20671 g$111$20672)) (g$111$13576 g$111$20677)) (if (memv g$111$20682 '(global)) ((lambda (g$111$20815) ((lambda (g$111$20817) ((lambda () (begin ((g$111$13644) g$111$20815) g$111$20817)))) (cdr g$111$20677))) (car g$111$20677)) (if (memv g$111$20682 '(core-prim)) ((lambda (g$111$20813) (list 'primitive g$111$20813)) g$111$20677) (if (memv g$111$20682 '(call)) (g$111$13594 g$111$20670 g$111$20671 g$111$20672) (if (memv g$111$20682 '(lexical)) ((lambda (g$111$20811) g$111$20811) g$111$20677) (if (memv g$111$20682 '(global-macro global-macro!)) (g$111$13596 (g$111$13590 g$111$20677 g$111$20670) g$111$20671 g$111$20672) (if (memv g$111$20682 '(local-macro local-macro!)) (g$111$13596 (g$111$13588 g$111$20677 g$111$20670) g$111$20671 g$111$20672) (if (memv g$111$20682 '(macro macro!)) (g$111$13596 (g$111$13586 g$111$20677 g$111$20670) g$111$20671 g$111$20672) (if (memv g$111$20682 '(constant)) ((lambda (g$111$20809) (list 'quote g$111$20809)) g$111$20677) (if (memv g$111$20682 '(set!)) (g$111$13598 g$111$20670 g$111$20671 g$111$20672) (if (memv g$111$20682 '(begin)) ((lambda (g$111$20771) ((lambda (g$111$20773) (if (if g$111$20773 (begin '#f (apply (lambda (g$111$20775 g$111$20776) '#t) g$111$20773)) '#f) (apply (lambda (g$111$20779 g$111$20780) (g$111$13108 '#f (g$111$13592 (cons g$111$20779 g$111$20780) g$111$20671 g$111$20672))) g$111$20773) (error 'expander '"invalid syntax" (g$111$13243 g$111$20771 '())))) ((lambda (g$111$20783) (if (g$111$13211 g$111$20783) (begin '#f ((lambda (g$111$20785) (if g$111$20785 (begin '#f ((lambda (g$111$20787) (if g$111$20787 (begin '#f (append g$111$20785 g$111$20787)) '#f)) ((lambda (g$111$20789) (if (g$111$13211 g$111$20789) (begin '#f ((lambda (g$111$20791) (if g$111$20791 (begin '#f ((lambda (g$111$20793) (if g$111$20793 (begin '#f (append g$111$20791 g$111$20793)) '#f)) ((letrec ((g$111$20795 (lambda (g$111$20797) (if (g$111$13211 g$111$20797) ((lambda (g$111$20799) (if g$111$20799 (begin '#f ((lambda (g$111$20801) (if g$111$20801 (begin '#f (map cons g$111$20799 g$111$20801)) '#f)) (g$111$20795 (g$111$13223 g$111$20797)))) '#f)) ((lambda (g$111$20803) (list g$111$20803)) (g$111$13219 g$111$20797))) (if (g$111$13215 g$111$20797) (list (begin 'x* '())) '#f))))) g$111$20795) (g$111$13223 g$111$20789)))) '#f)) ((lambda (g$111$20805) (list g$111$20805)) (g$111$13219 g$111$20789)))) '#f)) (g$111$13223 g$111$20783)))) '#f)) ((lambda (g$111$20807) '()) (g$111$13219 g$111$20783)))) '#f)) g$111$20771))) g$111$20670) (if (memv g$111$20682 '(let-syntax letrec-syntax)) ((lambda (g$111$20683) ((lambda (g$111$20685) (if (if g$111$20685 (begin '#f (apply (lambda (g$111$20687 g$111$20688 g$111$20689 g$111$20690) (if (g$111$13235 g$111$20687) (void) (error 'expander '"invalid identifiers" (g$111$13243 g$111$20670 '())))) g$111$20685)) '#f) (apply (lambda (g$111$20695 g$111$20696 g$111$20697 g$111$20698) ((lambda (g$111$20703) ((lambda (g$111$20705) ((lambda (g$111$20707) ((lambda () (g$111$13108 '#f (g$111$13592 (map (lambda (g$111$20709) (g$111$13205 g$111$20705 g$111$20709)) (cons g$111$20697 g$111$20698)) (append (map cons g$111$20703 g$111$20707) g$111$20671) (append (map cons g$111$20703 g$111$20707) g$111$20672)))))) (map (lambda (g$111$20711) (g$111$13275 (g$111$13630 (if (eq? g$111$20676 'let-syntax) g$111$20711 (g$111$13205 g$111$20705 g$111$20711)) g$111$20672))) g$111$20696))) (g$111$13172 g$111$20695 g$111$20703))) (map g$111$13139 g$111$20695))) g$111$20685) (error 'expander '"invalid syntax" (g$111$13243 g$111$20683 '())))) ((lambda (g$111$20713) (if (g$111$13211 g$111$20713) (begin '#f ((lambda (g$111$20715) (if g$111$20715 (begin '#f ((lambda (g$111$20717) (if g$111$20717 (begin '#f (append g$111$20715 g$111$20717)) '#f)) ((lambda (g$111$20719) (if (g$111$13211 g$111$20719) (begin '#f ((lambda (g$111$20721) (if g$111$20721 (begin '#f ((lambda (g$111$20723) (if g$111$20723 (begin '#f (append g$111$20721 g$111$20723)) '#f)) ((lambda (g$111$20725) (if (g$111$13211 g$111$20725) (begin '#f ((lambda (g$111$20727) (if g$111$20727 (begin '#f ((lambda (g$111$20729) (if g$111$20729 (begin '#f (append g$111$20727 g$111$20729)) '#f)) ((letrec ((g$111$20731 (lambda (g$111$20733) (if (g$111$13211 g$111$20733) ((lambda (g$111$20735) (if g$111$20735 (begin '#f ((lambda (g$111$20737) (if g$111$20737 (begin '#f (map cons g$111$20735 g$111$20737)) '#f)) (g$111$20731 (g$111$13223 g$111$20733)))) '#f)) ((lambda (g$111$20739) (list g$111$20739)) (g$111$13219 g$111$20733))) (if (g$111$13215 g$111$20733) (list (begin 'xbody* '())) '#f))))) g$111$20731) (g$111$13223 g$111$20725)))) '#f)) ((lambda (g$111$20741) (list g$111$20741)) (g$111$13219 g$111$20725)))) '#f)) (g$111$13223 g$111$20719)))) '#f)) ((letrec ((g$111$20743 (lambda (g$111$20745) (if (g$111$13211 g$111$20745) ((lambda (g$111$20747) (if g$111$20747 (begin '#f ((lambda (g$111$20749) (if g$111$20749 (begin '#f (map cons g$111$20747 g$111$20749)) '#f)) (g$111$20743 (g$111$13223 g$111$20745)))) '#f)) ((lambda (g$111$20751) (if (g$111$13211 g$111$20751) (begin '#f ((lambda (g$111$20753) (if g$111$20753 (begin '#f ((lambda (g$111$20755) (if g$111$20755 (begin '#f (append g$111$20753 g$111$20755)) '#f)) ((lambda (g$111$20757) (if (g$111$13211 g$111$20757) (begin '#f ((lambda (g$111$20759) (if g$111$20759 (begin '#f ((lambda (g$111$20761) (if g$111$20761 (begin '#f (append g$111$20759 g$111$20761)) '#f)) ((lambda (g$111$20763) (if (equal? (g$111$13245 g$111$20763) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$20757)))) '#f)) ((lambda (g$111$20765) (list g$111$20765)) (g$111$13219 g$111$20757)))) '#f)) (g$111$13223 g$111$20751)))) '#f)) ((lambda (g$111$20767) (list g$111$20767)) (g$111$13219 g$111$20751)))) '#f)) (g$111$13219 g$111$20745))) (if (g$111$13215 g$111$20745) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$111$20743) (g$111$13219 g$111$20719)))) '#f)) (g$111$13223 g$111$20713)))) '#f)) ((lambda (g$111$20769) '()) (g$111$13219 g$111$20713)))) '#f)) g$111$20683))) g$111$20670) (if (memv g$111$20682 '(displaced-lexical)) (error 'expander '"identifier out of context" (g$111$13243 g$111$20670 '())) (if (memv g$111$20682 '(syntax)) (error 'expander '"reference to pattern variable outside a syntax form" (g$111$13243 g$111$20670 '())) (if (memv g$111$20682 '(define define-syntax module import)) (error 'expander '"invalid expression" (g$111$13243 g$111$20670 '())) (error 'expander '"invalid expression" (g$111$13243 g$111$20670 '())))))))))))))))))) g$111$20676))))) (set! g$111$13598 (lambda (g$111$20821 g$111$20822 g$111$20823) ((lambda (g$111$20827) ((lambda (g$111$20829) (if (if g$111$20829 (begin '#f (apply (lambda (g$111$20831 g$111$20832) (g$111$13225 g$111$20831)) g$111$20829)) '#f) (apply (lambda (g$111$20835 g$111$20836) (call-with-values (lambda () (g$111$13257 g$111$20835 g$111$20822)) (lambda (g$111$20839 g$111$20840 g$111$20841) ((lambda (g$111$20845) (if (memv g$111$20845 '(lexical)) (list 'set! g$111$20840 (g$111$13596 g$111$20836 g$111$20822 g$111$20823)) (if (memv g$111$20845 '(global core-prim)) (error 'expander '"cannot modify imported identifier in" (g$111$13243 g$111$20821 '())) (if (memv g$111$20845 '(global-macro!)) (g$111$13596 (g$111$13590 g$111$20840 g$111$20821) g$111$20822 g$111$20823) (if (memv g$111$20845 '(local-macro!)) (g$111$13596 (g$111$13588 g$111$20840 g$111$20821) g$111$20822 g$111$20823) (error 'expander '"invalid syntax" (g$111$13245 g$111$20821))))))) g$111$20839)))) g$111$20829) (error 'expander '"invalid syntax" (g$111$13243 g$111$20827 '())))) ((lambda (g$111$20846) (if (g$111$13211 g$111$20846) (begin '#f ((lambda (g$111$20848) (if g$111$20848 (begin '#f ((lambda (g$111$20850) (if g$111$20850 (begin '#f (append g$111$20848 g$111$20850)) '#f)) ((lambda (g$111$20852) (if (g$111$13211 g$111$20852) (begin '#f ((lambda (g$111$20854) (if g$111$20854 (begin '#f ((lambda (g$111$20856) (if g$111$20856 (begin '#f (append g$111$20854 g$111$20856)) '#f)) ((lambda (g$111$20858) (if (g$111$13211 g$111$20858) (begin '#f ((lambda (g$111$20860) (if g$111$20860 (begin '#f ((lambda (g$111$20862) (if g$111$20862 (begin '#f (append g$111$20860 g$111$20862)) '#f)) ((lambda (g$111$20864) (if (equal? (g$111$13245 g$111$20864) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$20858)))) '#f)) ((lambda (g$111$20866) (list g$111$20866)) (g$111$13219 g$111$20858)))) '#f)) (g$111$13223 g$111$20852)))) '#f)) ((lambda (g$111$20868) (list g$111$20868)) (g$111$13219 g$111$20852)))) '#f)) (g$111$13223 g$111$20846)))) '#f)) ((lambda (g$111$20870) '()) (g$111$13219 g$111$20846)))) '#f)) g$111$20827))) g$111$20821))) (set! g$111$13600 (lambda (g$111$20872 g$111$20873 g$111$20874 g$111$20875) ((lambda (g$111$20880) ((lambda (g$111$20882) (if (if g$111$20882 (begin '#f (apply (lambda (g$111$20884) '#t) g$111$20882)) '#f) (apply (lambda (g$111$20886) (if (g$111$13235 g$111$20886) ((lambda (g$111$20888 g$111$20889) (values g$111$20888 (g$111$13612 (g$111$13205 (g$111$13172 g$111$20886 g$111$20889) g$111$20873) (g$111$13482 g$111$20889 g$111$20888 g$111$20874) g$111$20875))) (map g$111$13135 g$111$20886) (map g$111$13139 g$111$20886)) (error 'expander '"invalid fmls" (g$111$13243 g$111$20872 '())))) g$111$20882) ((lambda (g$111$20892) ((lambda (g$111$20894) (if (if g$111$20894 (begin '#f (apply (lambda (g$111$20896 g$111$20897) '#t) g$111$20894)) '#f) (apply (lambda (g$111$20900 g$111$20901) (if (g$111$13235 (cons g$111$20901 g$111$20900)) ((lambda (g$111$20904 g$111$20905 g$111$20906 g$111$20907) (values (append g$111$20904 g$111$20906) (g$111$13612 (g$111$13205 (g$111$13172 (cons g$111$20901 g$111$20900) (cons g$111$20907 g$111$20905)) g$111$20873) (g$111$13482 (cons g$111$20907 g$111$20905) (cons g$111$20906 g$111$20904) g$111$20874) g$111$20875))) (map g$111$13135 g$111$20900) (map g$111$13139 g$111$20900) (g$111$13135 g$111$20901) (g$111$13139 g$111$20901)) (error 'expander '"invalid fmls" (g$111$13243 g$111$20872 '())))) g$111$20894) ((lambda (g$111$20912) ((lambda (g$111$20914) (if (if g$111$20914 (begin '#f (apply (lambda () '#t) g$111$20914)) '#f) (apply (lambda () (error 'expander '"invalid fmls" (g$111$13243 g$111$20872 '()))) g$111$20914) (error 'expander '"invalid syntax" (g$111$13243 g$111$20912 '())))) ((lambda (g$111$20916) '()) g$111$20912))) g$111$20892))) ((letrec ((g$111$20918 (lambda (g$111$20924) (if (g$111$13211 g$111$20924) ((lambda (g$111$20926) (if g$111$20926 (begin '#f ((lambda (g$111$20928) (if g$111$20928 (begin '#f (cons (map cons g$111$20926 (car g$111$20928)) (cdr g$111$20928))) '#f)) (g$111$20918 (g$111$13223 g$111$20924)))) '#f)) ((lambda (g$111$20930) (list g$111$20930)) (g$111$13219 g$111$20924))) ((lambda (g$111$20932) (if g$111$20932 (begin '#f (cons (list (begin 'x* '())) g$111$20932)) '#f)) ((lambda (g$111$20934) (list g$111$20934)) g$111$20924)))))) (lambda (g$111$20920) ((lambda (g$111$20922) (if g$111$20922 (begin '#f (append (car g$111$20922) (cdr g$111$20922))) '#f)) (g$111$20918 g$111$20920)))) g$111$20892))) g$111$20880))) ((letrec ((g$111$20936 (lambda (g$111$20938) (if (g$111$13211 g$111$20938) ((lambda (g$111$20940) (if g$111$20940 (begin '#f ((lambda (g$111$20942) (if g$111$20942 (begin '#f (map cons g$111$20940 g$111$20942)) '#f)) (g$111$20936 (g$111$13223 g$111$20938)))) '#f)) ((lambda (g$111$20944) (list g$111$20944)) (g$111$13219 g$111$20938))) (if (g$111$13215 g$111$20938) (list (begin 'x* '())) '#f))))) g$111$20936) g$111$20880))) g$111$20872))) (set! g$111$13602 (lambda (g$111$20946 g$111$20947 g$111$20948 g$111$20949) (if (null? g$111$20946) (values '() '()) (call-with-values (lambda () (g$111$13600 (car g$111$20946) (car g$111$20947) g$111$20948 g$111$20949)) (lambda (g$111$20954 g$111$20955) (call-with-values (lambda () (g$111$13602 (cdr g$111$20946) (cdr g$111$20947) g$111$20948 g$111$20949)) (lambda (g$111$20958 g$111$20959) (values (cons g$111$20954 g$111$20958) (cons g$111$20955 g$111$20959))))))))) (set! g$111$13604 (lambda (g$111$20962 g$111$20963 g$111$20964) ((lambda (g$111$20968) (if (memv g$111$20968 '(defun)) ((lambda (g$111$20973) ((lambda (g$111$20975 g$111$20976) (call-with-values (lambda () (g$111$13600 g$111$20975 g$111$20976 g$111$20963 g$111$20964)) (lambda (g$111$20979 g$111$20980) (g$111$13114 '#f g$111$20979 g$111$20980)))) (car g$111$20973) (cdr g$111$20973))) (cdr g$111$20962)) (if (memv g$111$20968 '(expr)) ((lambda (g$111$20971) (g$111$13596 g$111$20971 g$111$20963 g$111$20964)) (cdr g$111$20962)) (if (memv g$111$20968 '(top-expr)) ((lambda (g$111$20969) (g$111$13108 '#f (list (g$111$13596 g$111$20969 g$111$20963 g$111$20964) (g$111$13107)))) (cdr g$111$20962)) (error 'chi-rhs '"invalid rhs" g$111$20962))))) (car g$111$20962)))) (set! g$111$13606 (lambda (g$111$20983 g$111$20984 g$111$20985) (letrec ((g$111$20989 (lambda (g$111$20991) (if (null? g$111$20991) '() ((lambda (g$111$20993) (cons g$111$20993 (g$111$20989 (cdr g$111$20991)))) (g$111$13604 (car g$111$20991) g$111$20984 g$111$20985)))))) (g$111$20989 g$111$20983)))) (set! g$111$13608 (lambda (g$111$20995 g$111$20996 g$111$20997) (if (null? g$111$20996) '#f (if (g$111$13231 g$111$20995 (car g$111$20996)) (car g$111$20997) (g$111$13608 g$111$20995 (cdr g$111$20996) (cdr g$111$20997)))))) (set! g$111$13610 (lambda (g$111$21001) (letrec ((g$111$21003 (lambda (g$111$21005 g$111$21006) (if (null? g$111$21005) g$111$21006 ((lambda (g$111$21009) (if g$111$21009 ((lambda (g$111$21011) (g$111$21003 (cdr g$111$21005) (cons (list (car g$111$21005) g$111$21011) g$111$21006))) g$111$21009) (g$111$21003 (cdr g$111$21005) g$111$21006))) (g$111$13608 (car g$111$21005) (cdr g$111$21005) (cdr g$111$21005))))))) (g$111$21003 g$111$21001 '())))) (set! g$111$13612 (lambda (g$111$21013 g$111$21014 g$111$21015) ((lambda (g$111$21019) (call-with-values (lambda () (g$111$13618 (map (lambda (g$111$21021) (g$111$13205 g$111$21019 g$111$21021)) (g$111$13221 g$111$21013)) g$111$21014 g$111$21015 '() '() '() '() g$111$21019 '#f)) (lambda (g$111$21023 g$111$21024 g$111$21025 g$111$21026 g$111$21027 g$111$21028 g$111$21029) (begin (if (null? g$111$21023) (error 'expander '"no expression in body" (g$111$13243 g$111$21023 '())) (void)) ((lambda (g$111$21037 g$111$21038) (g$111$13105 '#f (reverse g$111$21026) (reverse g$111$21037) (g$111$13108 '#f g$111$21038))) (g$111$13606 g$111$21027 g$111$21024 g$111$21025) (g$111$13592 (append (apply append (reverse g$111$21028)) g$111$21023) g$111$21024 g$111$21025)))))) (g$111$13162)))) (set! g$111$13614 (lambda (g$111$21041) ((lambda (g$111$21043) ((lambda (g$111$21045) (if (if g$111$21045 (begin '#f (apply (lambda (g$111$21047 g$111$21048) '#t) g$111$21045)) '#f) (apply (lambda (g$111$21051 g$111$21052) (begin (if (for-all g$111$13225 g$111$21051) (void) (error 'expander '"module exports must be identifiers" (g$111$13243 g$111$21041 '()))) (values '#f g$111$21051 g$111$21052))) g$111$21045) ((lambda (g$111$21055) ((lambda (g$111$21057) (if (if g$111$21057 (begin '#f (apply (lambda (g$111$21059 g$111$21060 g$111$21061) '#t) g$111$21057)) '#f) (apply (lambda (g$111$21065 g$111$21066 g$111$21067) (begin (if (g$111$13225 g$111$21065) (void) (error 'expander '"module name must be an identifier" (g$111$13243 g$111$21041 '()))) (if (for-all g$111$13225 g$111$21066) (void) (error 'expander '"module exports must be identifiers" (g$111$13243 g$111$21041 '()))) (values g$111$21065 g$111$21066 g$111$21067))) g$111$21057) (error 'expander '"invalid syntax" (g$111$13243 g$111$21055 '())))) ((lambda (g$111$21071) (if (g$111$13211 g$111$21071) (begin '#f ((lambda (g$111$21073) (if g$111$21073 (begin '#f ((lambda (g$111$21075) (if g$111$21075 (begin '#f (append g$111$21073 g$111$21075)) '#f)) ((lambda (g$111$21077) (if (g$111$13211 g$111$21077) (begin '#f ((lambda (g$111$21079) (if g$111$21079 (begin '#f ((lambda (g$111$21081) (if g$111$21081 (begin '#f (append g$111$21079 g$111$21081)) '#f)) ((lambda (g$111$21083) (if (g$111$13211 g$111$21083) (begin '#f ((lambda (g$111$21085) (if g$111$21085 (begin '#f ((lambda (g$111$21087) (if g$111$21087 (begin '#f (append g$111$21085 g$111$21087)) '#f)) ((letrec ((g$111$21089 (lambda (g$111$21091) (if (g$111$13211 g$111$21091) ((lambda (g$111$21093) (if g$111$21093 (begin '#f ((lambda (g$111$21095) (if g$111$21095 (begin '#f (map cons g$111$21093 g$111$21095)) '#f)) (g$111$21089 (g$111$13223 g$111$21091)))) '#f)) ((lambda (g$111$21097) (list g$111$21097)) (g$111$13219 g$111$21091))) (if (g$111$13215 g$111$21091) (list (begin 'b* '())) '#f))))) g$111$21089) (g$111$13223 g$111$21083)))) '#f)) ((letrec ((g$111$21099 (lambda (g$111$21101) (if (g$111$13211 g$111$21101) ((lambda (g$111$21103) (if g$111$21103 (begin '#f ((lambda (g$111$21105) (if g$111$21105 (begin '#f (map cons g$111$21103 g$111$21105)) '#f)) (g$111$21099 (g$111$13223 g$111$21101)))) '#f)) ((lambda (g$111$21107) (list g$111$21107)) (g$111$13219 g$111$21101))) (if (g$111$13215 g$111$21101) (list (begin 'export* '())) '#f))))) g$111$21099) (g$111$13219 g$111$21083)))) '#f)) (g$111$13223 g$111$21077)))) '#f)) ((lambda (g$111$21109) (list g$111$21109)) (g$111$13219 g$111$21077)))) '#f)) (g$111$13223 g$111$21071)))) '#f)) ((lambda (g$111$21111) '()) (g$111$13219 g$111$21071)))) '#f)) g$111$21055))) g$111$21043))) ((lambda (g$111$21113) (if (g$111$13211 g$111$21113) (begin '#f ((lambda (g$111$21115) (if g$111$21115 (begin '#f ((lambda (g$111$21117) (if g$111$21117 (begin '#f (append g$111$21115 g$111$21117)) '#f)) ((lambda (g$111$21119) (if (g$111$13211 g$111$21119) (begin '#f ((lambda (g$111$21121) (if g$111$21121 (begin '#f ((lambda (g$111$21123) (if g$111$21123 (begin '#f (append g$111$21121 g$111$21123)) '#f)) ((letrec ((g$111$21125 (lambda (g$111$21127) (if (g$111$13211 g$111$21127) ((lambda (g$111$21129) (if g$111$21129 (begin '#f ((lambda (g$111$21131) (if g$111$21131 (begin '#f (map cons g$111$21129 g$111$21131)) '#f)) (g$111$21125 (g$111$13223 g$111$21127)))) '#f)) ((lambda (g$111$21133) (list g$111$21133)) (g$111$13219 g$111$21127))) (if (g$111$13215 g$111$21127) (list (begin 'b* '())) '#f))))) g$111$21125) (g$111$13223 g$111$21119)))) '#f)) ((letrec ((g$111$21135 (lambda (g$111$21137) (if (g$111$13211 g$111$21137) ((lambda (g$111$21139) (if g$111$21139 (begin '#f ((lambda (g$111$21141) (if g$111$21141 (begin '#f (map cons g$111$21139 g$111$21141)) '#f)) (g$111$21135 (g$111$13223 g$111$21137)))) '#f)) ((lambda (g$111$21143) (list g$111$21143)) (g$111$13219 g$111$21137))) (if (g$111$13215 g$111$21137) (list (begin 'export* '())) '#f))))) g$111$21135) (g$111$13219 g$111$21119)))) '#f)) (g$111$13223 g$111$21113)))) '#f)) ((lambda (g$111$21145) '()) (g$111$13219 g$111$21113)))) '#f)) g$111$21043))) g$111$21041))) (set! g$111$13616 (lambda (g$111$21147 g$111$21148 g$111$21149 g$111$21150 g$111$21151 g$111$21152 g$111$21153) (call-with-values (lambda () (g$111$13614 g$111$21147)) (lambda (g$111$21161 g$111$21162 g$111$21163) ((lambda (g$111$21167) ((lambda (g$111$21169) ((lambda () (call-with-values (lambda () (g$111$13618 g$111$21169 g$111$21148 g$111$21149 g$111$21150 g$111$21151 g$111$21152 g$111$21153 g$111$21167 '#f)) (lambda (g$111$21171 g$111$21172 g$111$21173 g$111$21174 g$111$21175 g$111$21176 g$111$21177) ((lambda (g$111$21185 g$111$21186) (if (not g$111$21161) (values g$111$21174 g$111$21175 g$111$21162 g$111$21185 g$111$21172 g$111$21173 g$111$21186 g$111$21177) ((lambda (g$111$21189 g$111$21190) (values g$111$21174 g$111$21175 (list g$111$21161) (list g$111$21189) (cons (cons g$111$21189 (cons '$module g$111$21190)) g$111$21172) (cons (cons g$111$21189 (cons '$module g$111$21190)) g$111$21173) g$111$21186 g$111$21177)) (g$111$13139 'module) (cons g$111$21162 g$111$21185)))) (map (lambda (g$111$21193) ((lambda (g$111$21195) (if g$111$21195 g$111$21195 (begin '#f (error 'expander '"cannot find module export" (g$111$13243 g$111$21193 '()))))) (g$111$13247 (g$111$13201 (g$111$13227 g$111$21193) (g$111$13181 g$111$21193) (list g$111$21167))))) g$111$21162) (cons g$111$21171 g$111$21176))))))) (map (lambda (g$111$21197) (g$111$13205 g$111$21167 g$111$21197)) (g$111$13221 g$111$21163)))) (g$111$13162)))))) (set! g$111$13618 (lambda (g$111$21199 g$111$21200 g$111$21201 g$111$21202 g$111$21203 g$111$21204 g$111$21205 g$111$21206 g$111$21207) (if (null? g$111$21199) (values g$111$21199 g$111$21200 g$111$21201 g$111$21202 g$111$21203 g$111$21204 g$111$21205) ((lambda (g$111$21217) (call-with-values (lambda () (g$111$13257 g$111$21217 g$111$21200)) (lambda (g$111$21219 g$111$21220 g$111$21221) ((lambda (g$111$21225) ((lambda (g$111$21227) (if (memv g$111$21227 '(define)) (call-with-values (lambda () (g$111$13474 g$111$21217)) (lambda (g$111$21413 g$111$21414) (begin (if (g$111$13239 g$111$21413 g$111$21225) (error 'expander '"cannot redefine keyword" (g$111$13243 g$111$21217 '())) (void)) ((lambda (g$111$21417 g$111$21418) (begin (g$111$13164 g$111$21206 g$111$21413 g$111$21418) (g$111$13618 (cdr g$111$21199) (g$111$13480 g$111$21418 g$111$21417 g$111$21200) g$111$21201 (cons g$111$21417 g$111$21202) (cons g$111$21414 g$111$21203) g$111$21204 g$111$21225 g$111$21206 g$111$21207))) (g$111$13135 g$111$21413) (g$111$13139 g$111$21413))))) (if (memv g$111$21227 '(define-syntax)) (call-with-values (lambda () (g$111$13476 g$111$21217)) (lambda (g$111$21403 g$111$21404) (begin (if (g$111$13239 g$111$21403 g$111$21225) (error 'expander '"cannot redefine keyword" (g$111$13243 g$111$21217 '())) (void)) ((lambda (g$111$21407 g$111$21408) (begin (g$111$13164 g$111$21206 g$111$21403 g$111$21407) ((lambda (g$111$21411) (g$111$13618 (cdr g$111$21199) (cons (cons g$111$21407 g$111$21411) g$111$21200) (cons (cons g$111$21407 g$111$21411) g$111$21201) g$111$21202 g$111$21203 g$111$21204 g$111$21225 g$111$21206 g$111$21207)) (g$111$13275 g$111$21408)))) (g$111$13139 g$111$21403) (g$111$13630 g$111$21404 g$111$21201))))) (if (memv g$111$21227 '(let-syntax letrec-syntax)) ((lambda (g$111$21327) ((lambda (g$111$21329) (if (if g$111$21329 (begin '#f (apply (lambda (g$111$21331 g$111$21332 g$111$21333) (if (g$111$13235 g$111$21331) (void) (error 'expander '"invalid identifiers" (g$111$13243 g$111$21217 '())))) g$111$21329)) '#f) (apply (lambda (g$111$21337 g$111$21338 g$111$21339) ((lambda (g$111$21343) ((lambda (g$111$21345) ((lambda (g$111$21347) ((lambda () (g$111$13618 (append (map (lambda (g$111$21349) (g$111$13205 g$111$21345 g$111$21349)) g$111$21339) (cdr g$111$21199)) (append (map cons g$111$21343 g$111$21347) g$111$21200) (append (map cons g$111$21343 g$111$21347) g$111$21201) g$111$21202 g$111$21203 g$111$21204 g$111$21225 g$111$21206 g$111$21207)))) (map (lambda (g$111$21351) (g$111$13275 (g$111$13630 (if (eq? g$111$21219 'let-syntax) g$111$21351 (g$111$13205 g$111$21345 g$111$21351)) g$111$21201))) g$111$21338))) (g$111$13172 g$111$21337 g$111$21343))) (map g$111$13139 g$111$21337))) g$111$21329) (error 'expander '"invalid syntax" (g$111$13243 g$111$21327 '())))) ((lambda (g$111$21353) (if (g$111$13211 g$111$21353) (begin '#f ((lambda (g$111$21355) (if g$111$21355 (begin '#f ((lambda (g$111$21357) (if g$111$21357 (begin '#f (append g$111$21355 g$111$21357)) '#f)) ((lambda (g$111$21359) (if (g$111$13211 g$111$21359) (begin '#f ((lambda (g$111$21361) (if g$111$21361 (begin '#f ((lambda (g$111$21363) (if g$111$21363 (begin '#f (append g$111$21361 g$111$21363)) '#f)) ((letrec ((g$111$21365 (lambda (g$111$21367) (if (g$111$13211 g$111$21367) ((lambda (g$111$21369) (if g$111$21369 (begin '#f ((lambda (g$111$21371) (if g$111$21371 (begin '#f (map cons g$111$21369 g$111$21371)) '#f)) (g$111$21365 (g$111$13223 g$111$21367)))) '#f)) ((lambda (g$111$21373) (list g$111$21373)) (g$111$13219 g$111$21367))) (if (g$111$13215 g$111$21367) (list (begin 'xbody* '())) '#f))))) g$111$21365) (g$111$13223 g$111$21359)))) '#f)) ((letrec ((g$111$21375 (lambda (g$111$21377) (if (g$111$13211 g$111$21377) ((lambda (g$111$21379) (if g$111$21379 (begin '#f ((lambda (g$111$21381) (if g$111$21381 (begin '#f (map cons g$111$21379 g$111$21381)) '#f)) (g$111$21375 (g$111$13223 g$111$21377)))) '#f)) ((lambda (g$111$21383) (if (g$111$13211 g$111$21383) (begin '#f ((lambda (g$111$21385) (if g$111$21385 (begin '#f ((lambda (g$111$21387) (if g$111$21387 (begin '#f (append g$111$21385 g$111$21387)) '#f)) ((lambda (g$111$21389) (if (g$111$13211 g$111$21389) (begin '#f ((lambda (g$111$21391) (if g$111$21391 (begin '#f ((lambda (g$111$21393) (if g$111$21393 (begin '#f (append g$111$21391 g$111$21393)) '#f)) ((lambda (g$111$21395) (if (equal? (g$111$13245 g$111$21395) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$21389)))) '#f)) ((lambda (g$111$21397) (list g$111$21397)) (g$111$13219 g$111$21389)))) '#f)) (g$111$13223 g$111$21383)))) '#f)) ((lambda (g$111$21399) (list g$111$21399)) (g$111$13219 g$111$21383)))) '#f)) (g$111$13219 g$111$21377))) (if (g$111$13215 g$111$21377) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$111$21375) (g$111$13219 g$111$21359)))) '#f)) (g$111$13223 g$111$21353)))) '#f)) ((lambda (g$111$21401) '()) (g$111$13219 g$111$21353)))) '#f)) g$111$21327))) g$111$21217) (if (memv g$111$21227 '(begin)) ((lambda (g$111$21301) ((lambda (g$111$21303) (if (if g$111$21303 (begin '#f (apply (lambda (g$111$21305) '#t) g$111$21303)) '#f) (apply (lambda (g$111$21307) (g$111$13618 (append g$111$21307 (cdr g$111$21199)) g$111$21200 g$111$21201 g$111$21202 g$111$21203 g$111$21204 g$111$21225 g$111$21206 g$111$21207)) g$111$21303) (error 'expander '"invalid syntax" (g$111$13243 g$111$21301 '())))) ((lambda (g$111$21309) (if (g$111$13211 g$111$21309) (begin '#f ((lambda (g$111$21311) (if g$111$21311 (begin '#f ((lambda (g$111$21313) (if g$111$21313 (begin '#f (append g$111$21311 g$111$21313)) '#f)) ((letrec ((g$111$21315 (lambda (g$111$21317) (if (g$111$13211 g$111$21317) ((lambda (g$111$21319) (if g$111$21319 (begin '#f ((lambda (g$111$21321) (if g$111$21321 (begin '#f (map cons g$111$21319 g$111$21321)) '#f)) (g$111$21315 (g$111$13223 g$111$21317)))) '#f)) ((lambda (g$111$21323) (list g$111$21323)) (g$111$13219 g$111$21317))) (if (g$111$13215 g$111$21317) (list (begin 'x* '())) '#f))))) g$111$21315) (g$111$13223 g$111$21309)))) '#f)) ((lambda (g$111$21325) '()) (g$111$13219 g$111$21309)))) '#f)) g$111$21301))) g$111$21217) (if (memv g$111$21227 '(global-macro global-macro!)) (g$111$13618 (cons (g$111$13205 g$111$21206 (g$111$13590 g$111$21220 g$111$21217)) (cdr g$111$21199)) g$111$21200 g$111$21201 g$111$21202 g$111$21203 g$111$21204 g$111$21225 g$111$21206 g$111$21207) (if (memv g$111$21227 '(local-macro local-macro!)) (g$111$13618 (cons (g$111$13205 g$111$21206 (g$111$13588 g$111$21220 g$111$21217)) (cdr g$111$21199)) g$111$21200 g$111$21201 g$111$21202 g$111$21203 g$111$21204 g$111$21225 g$111$21206 g$111$21207) (if (memv g$111$21227 '(macro macro!)) (g$111$13618 (cons (g$111$13205 g$111$21206 (g$111$13586 g$111$21220 g$111$21217)) (cdr g$111$21199)) g$111$21200 g$111$21201 g$111$21202 g$111$21203 g$111$21204 g$111$21225 g$111$21206 g$111$21207) (if (memv g$111$21227 '(module)) (call-with-values (lambda () (g$111$13616 g$111$21217 g$111$21200 g$111$21201 g$111$21202 g$111$21203 g$111$21204 g$111$21225)) (lambda (g$111$21281 g$111$21282 g$111$21283 g$111$21284 g$111$21285 g$111$21286 g$111$21287 g$111$21288) (begin (for-each (lambda (g$111$21297 g$111$21298) (g$111$13164 g$111$21206 g$111$21297 g$111$21298)) g$111$21283 g$111$21284) (g$111$13618 (cdr g$111$21199) g$111$21285 g$111$21286 g$111$21281 g$111$21282 g$111$21287 g$111$21288 g$111$21206 g$111$21207)))) (if (memv g$111$21227 '(import)) (begin ((lambda () ((lambda (g$111$21228) (begin (set! g$111$21228 (lambda (g$111$21230 g$111$21231) ((lambda (g$111$21234) ((lambda (g$111$21236) (if (if g$111$21236 (begin '#f (apply (lambda (g$111$21238) (g$111$13225 g$111$21238)) g$111$21236)) '#f) (apply (lambda (g$111$21240) (call-with-values (lambda () (g$111$13257 g$111$21240 g$111$21231)) (lambda (g$111$21242 g$111$21243 g$111$21244) ((lambda (g$111$21248) (if (memv g$111$21248 '($module)) ((lambda (g$111$21249) ((lambda (g$111$21251 g$111$21252) (values g$111$21251 g$111$21252)) (car g$111$21249) (cdr g$111$21249))) g$111$21243) (error 'expander '"invalid import" (g$111$13243 g$111$21230 '())))) g$111$21242)))) g$111$21236) (error 'expander '"invalid syntax" (g$111$13243 g$111$21234 '())))) ((lambda (g$111$21255) (if (g$111$13211 g$111$21255) (begin '#f ((lambda (g$111$21257) (if g$111$21257 (begin '#f ((lambda (g$111$21259) (if g$111$21259 (begin '#f (append g$111$21257 g$111$21259)) '#f)) ((lambda (g$111$21261) (if (g$111$13211 g$111$21261) (begin '#f ((lambda (g$111$21263) (if g$111$21263 (begin '#f ((lambda (g$111$21265) (if g$111$21265 (begin '#f (append g$111$21263 g$111$21265)) '#f)) ((lambda (g$111$21267) (if (equal? (g$111$13245 g$111$21267) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$21261)))) '#f)) ((lambda (g$111$21269) (list g$111$21269)) (g$111$13219 g$111$21261)))) '#f)) (g$111$13223 g$111$21255)))) '#f)) ((lambda (g$111$21271) '()) (g$111$13219 g$111$21255)))) '#f)) g$111$21234))) g$111$21230))) (call-with-values (lambda () (g$111$21228 g$111$21217 g$111$21200)) (lambda (g$111$21273 g$111$21274) (for-each (lambda (g$111$21277 g$111$21278) (g$111$13164 g$111$21206 g$111$21277 g$111$21278)) g$111$21273 g$111$21274))))) '#f))) (g$111$13618 (cdr g$111$21199) g$111$21200 g$111$21201 g$111$21202 g$111$21203 g$111$21204 g$111$21225 g$111$21206 g$111$21207)) (if g$111$21207 (g$111$13618 (cdr g$111$21199) g$111$21200 g$111$21201 (cons (g$111$13135 'dummy) g$111$21202) (cons (cons 'top-expr g$111$21217) g$111$21203) g$111$21204 g$111$21225 g$111$21206 g$111$21207) (values g$111$21199 g$111$21200 g$111$21201 g$111$21202 g$111$21203 g$111$21204 g$111$21225)))))))))))) g$111$21219)) (if (g$111$13225 g$111$21221) (cons g$111$21221 g$111$21205) g$111$21205))))) (car g$111$21199))))) (set! g$111$13620 (lambda (g$111$21421 g$111$21422 g$111$21423) (begin (g$111$12833 (g$111$13711) g$111$21421 g$111$21422) (g$111$12832 (g$111$13711) g$111$21422 g$111$21423)))) (set! g$111$13622 (lambda (g$111$21427 g$111$21428) (g$111$13624 g$111$21427 g$111$21428))) (set! g$111$13624 (lambda (g$111$21431 g$111$21432) ((lambda (g$111$21435) ((lambda (g$111$21437) ((lambda (g$111$21439) (if (memv g$111$21439 '(global)) ((lambda (g$111$21440) ((lambda (g$111$21442 g$111$21443) (if (eq? g$111$21442 (g$111$13711)) g$111$21443 (error 'expander '"cannot modify imported binding" (g$111$13243 g$111$21432 '())))) (car g$111$21440) (cdr g$111$21440))) (g$111$13255 g$111$21437)) (error 'expander '"cannot modify binding in" (g$111$13243 g$111$21432 '())))) (g$111$13253 g$111$21437))) (g$111$12831 g$111$21435))) (g$111$13247 g$111$21431)))) (set! g$111$13626 (lambda (g$111$21446) ((lambda (g$111$21448) ((lambda (g$111$21450) (if (if g$111$21450 (begin '#f (apply (lambda (g$111$21452 g$111$21453) (g$111$13225 g$111$21452)) g$111$21450)) '#f) (apply (lambda (g$111$21456 g$111$21457) ((lambda (g$111$21460) ((lambda (g$111$21462) (values g$111$21460 g$111$21462)) (g$111$13596 g$111$21457 '() '()))) (g$111$13624 g$111$21456 g$111$21446))) g$111$21450) (error 'expander '"invalid syntax" (g$111$13243 g$111$21448 '())))) ((lambda (g$111$21464) (if (g$111$13211 g$111$21464) (begin '#f ((lambda (g$111$21466) (if g$111$21466 (begin '#f ((lambda (g$111$21468) (if g$111$21468 (begin '#f (append g$111$21466 g$111$21468)) '#f)) ((lambda (g$111$21470) (if (g$111$13211 g$111$21470) (begin '#f ((lambda (g$111$21472) (if g$111$21472 (begin '#f ((lambda (g$111$21474) (if g$111$21474 (begin '#f (append g$111$21472 g$111$21474)) '#f)) ((lambda (g$111$21476) (if (g$111$13211 g$111$21476) (begin '#f ((lambda (g$111$21478) (if g$111$21478 (begin '#f ((lambda (g$111$21480) (if g$111$21480 (begin '#f (append g$111$21478 g$111$21480)) '#f)) ((lambda (g$111$21482) (if (equal? (g$111$13245 g$111$21482) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$21476)))) '#f)) ((lambda (g$111$21484) (list g$111$21484)) (g$111$13219 g$111$21476)))) '#f)) (g$111$13223 g$111$21470)))) '#f)) ((lambda (g$111$21486) (list g$111$21486)) (g$111$13219 g$111$21470)))) '#f)) (g$111$13223 g$111$21464)))) '#f)) ((lambda (g$111$21488) '()) (g$111$13219 g$111$21464)))) '#f)) g$111$21448))) g$111$21446))) (set! g$111$13628 (lambda (g$111$21490 g$111$21491) (if (null? g$111$21490) g$111$21491 ((lambda (g$111$21494) (call-with-values (lambda () (g$111$13257 g$111$21494 '())) (lambda (g$111$21496 g$111$21497 g$111$21498) ((lambda (g$111$21502) (if (memv g$111$21502 '(define)) (call-with-values (lambda () (g$111$13474 g$111$21494)) (lambda (g$111$21543 g$111$21544) ((lambda (g$111$21547) ((lambda (g$111$21549) (g$111$13628 (cdr g$111$21490) (cons (cons g$111$21547 g$111$21549) g$111$21491))) (g$111$13604 g$111$21544 '() '()))) (g$111$13624 g$111$21543 g$111$21494)))) (if (memv g$111$21502 '(set!)) (call-with-values (lambda () (g$111$13626 g$111$21494)) (lambda (g$111$21539 g$111$21540) (g$111$13628 (cdr g$111$21490) (cons (cons g$111$21539 g$111$21540) g$111$21491)))) (if (memv g$111$21502 '(define-syntax)) (call-with-values (lambda () (g$111$13476 g$111$21494)) (lambda (g$111$21529 g$111$21530) ((lambda (g$111$21533) ((lambda (g$111$21535) ((lambda (g$111$21537) (begin (g$111$13620 (g$111$13227 g$111$21529) g$111$21533 g$111$21537) (g$111$13628 (cdr g$111$21490) g$111$21491))) (g$111$13275 g$111$21535))) (g$111$13630 g$111$21530 '()))) (g$111$13622 g$111$21529 g$111$21494)))) (if (memv g$111$21502 '(let-syntax letrec-syntax)) (error 'chi-top* '"not supported yet at top level" g$111$21496) (if (memv g$111$21502 '(begin)) ((lambda (g$111$21503) ((lambda (g$111$21505) (if (if g$111$21505 (begin '#f (apply (lambda (g$111$21507) '#t) g$111$21505)) '#f) (apply (lambda (g$111$21509) (g$111$13628 (append g$111$21509 (cdr g$111$21490)) g$111$21491)) g$111$21505) (error 'expander '"invalid syntax" (g$111$13243 g$111$21503 '())))) ((lambda (g$111$21511) (if (g$111$13211 g$111$21511) (begin '#f ((lambda (g$111$21513) (if g$111$21513 (begin '#f ((lambda (g$111$21515) (if g$111$21515 (begin '#f (append g$111$21513 g$111$21515)) '#f)) ((letrec ((g$111$21517 (lambda (g$111$21519) (if (g$111$13211 g$111$21519) ((lambda (g$111$21521) (if g$111$21521 (begin '#f ((lambda (g$111$21523) (if g$111$21523 (begin '#f (map cons g$111$21521 g$111$21523)) '#f)) (g$111$21517 (g$111$13223 g$111$21519)))) '#f)) ((lambda (g$111$21525) (list g$111$21525)) (g$111$13219 g$111$21519))) (if (g$111$13215 g$111$21519) (list (begin 'x* '())) '#f))))) g$111$21517) (g$111$13223 g$111$21511)))) '#f)) ((lambda (g$111$21527) '()) (g$111$13219 g$111$21511)))) '#f)) g$111$21503))) g$111$21494) (if (memv g$111$21502 '(global-macro global-macro!)) (g$111$13628 (cons (g$111$13590 g$111$21497 g$111$21494) (cdr g$111$21490)) g$111$21491) (if (memv g$111$21502 '(local-macro local-macro!)) (g$111$13628 (cons (g$111$13588 g$111$21497 g$111$21494) (cdr g$111$21490)) g$111$21491) (if (memv g$111$21502 '(macro macro!)) (g$111$13628 (cons (g$111$13586 g$111$21497 g$111$21494) (cdr g$111$21490)) g$111$21491) (g$111$13628 (cdr g$111$21490) (cons (cons '#f (g$111$13596 g$111$21494 '() '())) g$111$21491))))))))))) g$111$21496)))) (car g$111$21490))))) (set! g$111$13630 (lambda (g$111$21551 g$111$21552) ((lambda (g$111$21555) ((lambda (g$111$21557) (begin (for-each ((lambda (g$111$21559) (lambda (g$111$21561) (begin (g$111$12830 g$111$21561) (g$111$21559 g$111$21561)))) (g$111$13646)) (g$111$21555)) g$111$21557)) ((lambda (g$111$21567 g$111$21568 g$111$21569 g$111$21570) ((lambda (g$111$21575) (dynamic-wind g$111$21575 (lambda () (g$111$13596 g$111$21551 g$111$21552 g$111$21552)) g$111$21575)) (lambda () (begin ((lambda (g$111$21577) (begin (g$111$21567 g$111$21569) (set! g$111$21569 g$111$21577))) (g$111$21567)) ((lambda (g$111$21579) (begin (g$111$21568 g$111$21570) (set! g$111$21570 g$111$21579))) (g$111$21568)))))) g$111$13644 g$111$13646 g$111$21555 (lambda (g$111$21581) (values))))) (g$111$13642)))) (set! g$111$13632 (lambda (g$111$21583) (letrec ((g$111$21585 (lambda (g$111$21587 g$111$21588 g$111$21589) (if (null? g$111$21587) (begin ((lambda (g$111$21593) (if (g$111$13235 g$111$21593) (void) (error 'expander '"invalid exports" (g$111$13610 g$111$21593)))) (map (lambda (g$111$21595) (g$111$13201 g$111$21595 g$111$13131 '())) g$111$21589)) (values g$111$21588 g$111$21589)) ((lambda (g$111$21597) ((lambda (g$111$21599) (if (if g$111$21599 (begin '#f (apply (lambda (g$111$21601 g$111$21602 g$111$21603) '#t) g$111$21599)) '#f) (apply (lambda (g$111$21607 g$111$21608 g$111$21609) (begin (if (if (eq? g$111$21607 'rename) (if (for-all symbol? g$111$21608) (begin '#f (for-all symbol? g$111$21609)) '#f) '#f) (void) (error 'expander '"invalid export specifier" (car g$111$21587))) (g$111$21585 (cdr g$111$21587) (append g$111$21608 g$111$21588) (append g$111$21609 g$111$21589)))) g$111$21599) ((lambda (g$111$21613) ((lambda (g$111$21615) (if (if g$111$21615 (begin '#f (apply (lambda (g$111$21617) '#t) g$111$21615)) '#f) (apply (lambda (g$111$21619) (begin (if (symbol? g$111$21619) (void) (error 'expander '"invalid export" g$111$21619)) (g$111$21585 (cdr g$111$21587) (cons g$111$21619 g$111$21588) (cons g$111$21619 g$111$21589)))) g$111$21615) (error 'expander '"invalid syntax" (g$111$13243 g$111$21613 '())))) ((lambda (g$111$21621) (list g$111$21621)) g$111$21613))) g$111$21597))) ((lambda (g$111$21623) (if (g$111$13211 g$111$21623) (begin '#f ((lambda (g$111$21625) (if g$111$21625 (begin '#f ((lambda (g$111$21627) (if g$111$21627 (begin '#f (append g$111$21625 g$111$21627)) '#f)) ((letrec ((g$111$21629 (lambda (g$111$21631) (if (g$111$13211 g$111$21631) ((lambda (g$111$21633) (if g$111$21633 (begin '#f ((lambda (g$111$21635) (if g$111$21635 (begin '#f (map cons g$111$21633 g$111$21635)) '#f)) (g$111$21629 (g$111$13223 g$111$21631)))) '#f)) ((lambda (g$111$21637) (if (g$111$13211 g$111$21637) (begin '#f ((lambda (g$111$21639) (if g$111$21639 (begin '#f ((lambda (g$111$21641) (if g$111$21641 (begin '#f (append g$111$21639 g$111$21641)) '#f)) ((lambda (g$111$21643) (if (g$111$13211 g$111$21643) (begin '#f ((lambda (g$111$21645) (if g$111$21645 (begin '#f ((lambda (g$111$21647) (if g$111$21647 (begin '#f (append g$111$21645 g$111$21647)) '#f)) ((lambda (g$111$21649) (if (equal? (g$111$13245 g$111$21649) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$21643)))) '#f)) ((lambda (g$111$21651) (list g$111$21651)) (g$111$13219 g$111$21643)))) '#f)) (g$111$13223 g$111$21637)))) '#f)) ((lambda (g$111$21653) (list g$111$21653)) (g$111$13219 g$111$21637)))) '#f)) (g$111$13219 g$111$21631))) (if (g$111$13215 g$111$21631) (list (begin 'i* '()) (begin 'e* '())) '#f))))) g$111$21629) (g$111$13223 g$111$21623)))) '#f)) ((lambda (g$111$21655) (list g$111$21655)) (g$111$13219 g$111$21623)))) '#f)) g$111$21597))) (car g$111$21587)))))) (g$111$21585 g$111$21583 '() '())))) (set! g$111$13634 (lambda (g$111$21657) ((lambda (g$111$21659) (begin (set! g$111$21659 (lambda (g$111$21661) ((lambda (g$111$21663) ((lambda (g$111$21665) (if (if g$111$21665 (begin '#f (apply (lambda (g$111$21667) (for-all (lambda (g$111$21669) (if (integer? g$111$21669) (begin '#f (exact? g$111$21669)) '#f)) g$111$21667)) g$111$21665)) '#f) (apply (lambda (g$111$21671) (values '() g$111$21671)) g$111$21665) ((lambda (g$111$21673) ((lambda (g$111$21675) (if (if g$111$21675 (begin '#f (apply (lambda (g$111$21677 g$111$21678) (symbol? g$111$21677)) g$111$21675)) '#f) (apply (lambda (g$111$21681 g$111$21682) (call-with-values (lambda () (g$111$21659 g$111$21682)) (lambda (g$111$21685 g$111$21686) (values (cons g$111$21681 g$111$21685) g$111$21686)))) g$111$21675) ((lambda (g$111$21689) ((lambda (g$111$21691) (if (if g$111$21691 (begin '#f (apply (lambda () '#t) g$111$21691)) '#f) (apply (lambda () (values '() '())) g$111$21691) ((lambda (g$111$21693) ((lambda (g$111$21695) (if (if g$111$21695 (begin '#f (apply (lambda () '#t) g$111$21695)) '#f) (apply (lambda () (error 'expander '"invalid library name" (g$111$13243 g$111$21657 '()))) g$111$21695) (error 'expander '"invalid syntax" (g$111$13243 g$111$21693 '())))) ((lambda (g$111$21697) '()) g$111$21693))) g$111$21689))) ((lambda (g$111$21699) (if (equal? (g$111$13245 g$111$21699) '()) (begin '#f '()) '#f)) g$111$21689))) g$111$21673))) ((lambda (g$111$21701) (if (g$111$13211 g$111$21701) (begin '#f ((lambda (g$111$21703) (if g$111$21703 (begin '#f ((lambda (g$111$21705) (if g$111$21705 (begin '#f (append g$111$21703 g$111$21705)) '#f)) ((lambda (g$111$21707) (list g$111$21707)) (g$111$13223 g$111$21701)))) '#f)) ((lambda (g$111$21709) (list g$111$21709)) (g$111$13219 g$111$21701)))) '#f)) g$111$21673))) g$111$21663))) ((lambda (g$111$21711) (if (g$111$13211 g$111$21711) (begin '#f ((lambda (g$111$21713) (if g$111$21713 (begin '#f ((lambda (g$111$21715) (if g$111$21715 (begin '#f (append g$111$21713 g$111$21715)) '#f)) ((lambda (g$111$21717) (if (equal? (g$111$13245 g$111$21717) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$21711)))) '#f)) ((letrec ((g$111$21719 (lambda (g$111$21721) (if (g$111$13211 g$111$21721) ((lambda (g$111$21723) (if g$111$21723 (begin '#f ((lambda (g$111$21725) (if g$111$21725 (begin '#f (map cons g$111$21723 g$111$21725)) '#f)) (g$111$21719 (g$111$13223 g$111$21721)))) '#f)) ((lambda (g$111$21727) (list g$111$21727)) (g$111$13219 g$111$21721))) (if (g$111$13215 g$111$21721) (list (begin 'v* '())) '#f))))) g$111$21719) (g$111$13219 g$111$21711)))) '#f)) g$111$21663))) g$111$21661))) (call-with-values (lambda () (g$111$21659 g$111$21657)) (lambda (g$111$21729 g$111$21730) (begin (if (null? g$111$21729) (error 'expander '"empty library name" (g$111$13243 g$111$21657 '())) (void)) (values g$111$21729 g$111$21730)))))) '#f))) (set! g$111$13636 (lambda (g$111$21733) ((lambda (g$111$21735) ((lambda (g$111$21737) (if (if g$111$21737 (begin '#f (apply (lambda (g$111$21739 g$111$21740 g$111$21741 g$111$21742 g$111$21743 g$111$21744 g$111$21745) (if (eq? g$111$21741 'export) (if (eq? g$111$21743 'import) (begin '#f (eq? g$111$21739 'library)) '#f) '#f)) g$111$21737)) '#f) (apply (lambda (g$111$21753 g$111$21754 g$111$21755 g$111$21756 g$111$21757 g$111$21758 g$111$21759) (values g$111$21754 g$111$21756 g$111$21758 g$111$21759)) g$111$21737) ((lambda (g$111$21767) ((lambda (g$111$21769) (if (if g$111$21769 (begin '#f (apply (lambda () '#t) g$111$21769)) '#f) (apply (lambda () (error 'expander '"malformed library" (g$111$13243 g$111$21733 '()))) g$111$21769) (error 'expander '"invalid syntax" (g$111$13243 g$111$21767 '())))) ((lambda (g$111$21771) '()) g$111$21767))) g$111$21735))) ((lambda (g$111$21773) (if (g$111$13211 g$111$21773) (begin '#f ((lambda (g$111$21775) (if g$111$21775 (begin '#f ((lambda (g$111$21777) (if g$111$21777 (begin '#f (append g$111$21775 g$111$21777)) '#f)) ((lambda (g$111$21779) (if (g$111$13211 g$111$21779) (begin '#f ((lambda (g$111$21781) (if g$111$21781 (begin '#f ((lambda (g$111$21783) (if g$111$21783 (begin '#f (append g$111$21781 g$111$21783)) '#f)) ((lambda (g$111$21785) (if (g$111$13211 g$111$21785) (begin '#f ((lambda (g$111$21787) (if g$111$21787 (begin '#f ((lambda (g$111$21789) (if g$111$21789 (begin '#f (append g$111$21787 g$111$21789)) '#f)) ((lambda (g$111$21791) (if (g$111$13211 g$111$21791) (begin '#f ((lambda (g$111$21793) (if g$111$21793 (begin '#f ((lambda (g$111$21795) (if g$111$21795 (begin '#f (append g$111$21793 g$111$21795)) '#f)) ((letrec ((g$111$21797 (lambda (g$111$21799) (if (g$111$13211 g$111$21799) ((lambda (g$111$21801) (if g$111$21801 (begin '#f ((lambda (g$111$21803) (if g$111$21803 (begin '#f (map cons g$111$21801 g$111$21803)) '#f)) (g$111$21797 (g$111$13223 g$111$21799)))) '#f)) ((lambda (g$111$21805) (list g$111$21805)) (g$111$13219 g$111$21799))) (if (g$111$13215 g$111$21799) (list (begin 'b* '())) '#f))))) g$111$21797) (g$111$13223 g$111$21791)))) '#f)) ((lambda (g$111$21807) (if (g$111$13211 g$111$21807) (begin '#f ((lambda (g$111$21809) (if g$111$21809 (begin '#f ((lambda (g$111$21811) (if g$111$21811 (begin '#f (append g$111$21809 g$111$21811)) '#f)) ((letrec ((g$111$21813 (lambda (g$111$21815) (if (g$111$13211 g$111$21815) ((lambda (g$111$21817) (if g$111$21817 (begin '#f ((lambda (g$111$21819) (if g$111$21819 (begin '#f (map cons g$111$21817 g$111$21819)) '#f)) (g$111$21813 (g$111$13223 g$111$21815)))) '#f)) ((lambda (g$111$21821) (list g$111$21821)) (g$111$13219 g$111$21815))) (if (g$111$13215 g$111$21815) (list (begin 'imp* '())) '#f))))) g$111$21813) (g$111$13223 g$111$21807)))) '#f)) ((lambda (g$111$21823) (list g$111$21823)) (g$111$13219 g$111$21807)))) '#f)) (g$111$13219 g$111$21791)))) '#f)) (g$111$13223 g$111$21785)))) '#f)) ((lambda (g$111$21825) (if (g$111$13211 g$111$21825) (begin '#f ((lambda (g$111$21827) (if g$111$21827 (begin '#f ((lambda (g$111$21829) (if g$111$21829 (begin '#f (append g$111$21827 g$111$21829)) '#f)) ((letrec ((g$111$21831 (lambda (g$111$21833) (if (g$111$13211 g$111$21833) ((lambda (g$111$21835) (if g$111$21835 (begin '#f ((lambda (g$111$21837) (if g$111$21837 (begin '#f (map cons g$111$21835 g$111$21837)) '#f)) (g$111$21831 (g$111$13223 g$111$21833)))) '#f)) ((lambda (g$111$21839) (list g$111$21839)) (g$111$13219 g$111$21833))) (if (g$111$13215 g$111$21833) (list (begin 'exp* '())) '#f))))) g$111$21831) (g$111$13223 g$111$21825)))) '#f)) ((lambda (g$111$21841) (list g$111$21841)) (g$111$13219 g$111$21825)))) '#f)) (g$111$13219 g$111$21785)))) '#f)) (g$111$13223 g$111$21779)))) '#f)) ((letrec ((g$111$21843 (lambda (g$111$21845) (if (g$111$13211 g$111$21845) ((lambda (g$111$21847) (if g$111$21847 (begin '#f ((lambda (g$111$21849) (if g$111$21849 (begin '#f (map cons g$111$21847 g$111$21849)) '#f)) (g$111$21843 (g$111$13223 g$111$21845)))) '#f)) ((lambda (g$111$21851) (list g$111$21851)) (g$111$13219 g$111$21845))) (if (g$111$13215 g$111$21845) (list (begin 'name* '())) '#f))))) g$111$21843) (g$111$13219 g$111$21779)))) '#f)) (g$111$13223 g$111$21773)))) '#f)) ((lambda (g$111$21853) (list g$111$21853)) (g$111$13219 g$111$21773)))) '#f)) g$111$21735))) g$111$21733))) (set! g$111$13638 (lambda (g$111$21855) ((lambda (g$111$21857 g$111$21859 g$111$21861 g$111$21863 g$111$21865 g$111$21867 g$111$21869 g$111$21871) (begin (set! g$111$21857 (g$111$13642)) (set! g$111$21859 (lambda (g$111$22627 g$111$22628) ((lambda (g$111$22631) (begin (set! g$111$22631 (lambda (g$111$22633 g$111$22634) ((lambda (g$111$22637 g$111$22638) ((lambda (g$111$22641) (if g$111$22641 ((lambda (g$111$22643) (if (eq? (cdr g$111$22643) g$111$22638) g$111$22634 (error 'import '"two imports with different bindings" g$111$22637))) g$111$22641) (cons g$111$22633 g$111$22634))) (assq g$111$22637 g$111$22634))) (car g$111$22633) (cdr g$111$22633)))) (if (null? g$111$22627) g$111$22628 (g$111$22631 (car g$111$22627) (g$111$21859 (cdr g$111$22627) g$111$22628))))) '#f))) (set! g$111$21861 (lambda (g$111$22603 g$111$22604) ((lambda (g$111$22607) (begin (set! g$111$22607 (lambda (g$111$22609 g$111$22610) (if (null? g$111$22610) (error 'import '"cannot rename unbound identifier" g$111$22609) (if (eq? g$111$22609 (caar g$111$22610)) (values (cdar g$111$22610) (cdr g$111$22610)) ((lambda (g$111$22613) (call-with-values (lambda () (g$111$22607 g$111$22609 (cdr g$111$22610))) (lambda (g$111$22615 g$111$22616) (values g$111$22615 (cons g$111$22613 g$111$22616))))) (car g$111$22610)))))) (if (null? g$111$22603) (values '() g$111$22604) (call-with-values (lambda () (g$111$22607 (car g$111$22603) g$111$22604)) (lambda (g$111$22619 g$111$22620) (call-with-values (lambda () (g$111$21861 (cdr g$111$22603) g$111$22620)) (lambda (g$111$22623 g$111$22624) (values (cons g$111$22619 g$111$22623) g$111$22624)))))))) '#f))) (set! g$111$21863 (lambda (g$111$22595 g$111$22596) (map (lambda (g$111$22599) ((lambda (g$111$22601) (if g$111$22601 (cdr g$111$22601) (error 'import '"cannot find identifier" g$111$22599))) (assq g$111$22599 g$111$22596))) g$111$22595))) (set! g$111$21865 (lambda (g$111$22587 g$111$22588) (letrec ((g$111$22591 (lambda (g$111$22593) (if (null? g$111$22593) '() (if (memq (caar g$111$22593) g$111$22587) (g$111$22591 (cdr g$111$22593)) (cons (car g$111$22593) (g$111$22591 (cdr g$111$22593)))))))) (g$111$22591 g$111$22588)))) (set! g$111$21867 (lambda (g$111$22585) (if (null? g$111$22585) '() (if (memq (car g$111$22585) (cdr g$111$22585)) (g$111$21867 (cdr g$111$22585)) (cons (car g$111$22585) (g$111$21867 (cdr g$111$22585))))))) (set! g$111$21869 (lambda (g$111$22165) ((lambda (g$111$22167 g$111$22169 g$111$22171) (begin (set! g$111$22167 (lambda (g$111$22513) (if (integer? g$111$22513) (if (exact? g$111$22513) (begin '#f (>= g$111$22513 '0)) '#f) '#f))) (set! g$111$22169 (lambda (g$111$22323) ((lambda (g$111$22325) ((lambda (g$111$22327) (if (if g$111$22327 (begin '#f (apply (lambda (g$111$22329) (g$111$22167 g$111$22329)) g$111$22327)) '#f) (apply (lambda (g$111$22331) (lambda (g$111$22333) (= g$111$22333 g$111$22331))) g$111$22327) ((lambda (g$111$22335) ((lambda (g$111$22337) (if (if g$111$22337 (begin '#f (apply (lambda (g$111$22339 g$111$22340) (eq? g$111$22339 'and)) g$111$22337)) '#f) (apply (lambda (g$111$22343 g$111$22344) ((lambda (g$111$22347) (lambda (g$111$22349) (for-all (lambda (g$111$22351) (g$111$22351 g$111$22349)) g$111$22347))) (map g$111$22169 g$111$22344))) g$111$22337) ((lambda (g$111$22353) ((lambda (g$111$22355) (if (if g$111$22355 (begin '#f (apply (lambda (g$111$22357 g$111$22358) (eq? g$111$22357 'or)) g$111$22355)) '#f) (apply (lambda (g$111$22361 g$111$22362) ((lambda (g$111$22365) (lambda (g$111$22367) (exists (lambda (g$111$22369) (g$111$22369 g$111$22367)) g$111$22365))) (map g$111$22169 g$111$22362))) g$111$22355) ((lambda (g$111$22371) ((lambda (g$111$22373) (if (if g$111$22373 (begin '#f (apply (lambda (g$111$22375 g$111$22376) (eq? g$111$22375 'not)) g$111$22373)) '#f) (apply (lambda (g$111$22379 g$111$22380) ((lambda (g$111$22383) (lambda (g$111$22385) (not (g$111$22383 g$111$22385)))) (g$111$22169 g$111$22380))) g$111$22373) ((lambda (g$111$22387) ((lambda (g$111$22389) (if (if g$111$22389 (begin '#f (apply (lambda (g$111$22391 g$111$22392) (if (eq? g$111$22391 '<=) (begin '#f (g$111$22167 g$111$22392)) '#f)) g$111$22389)) '#f) (apply (lambda (g$111$22395 g$111$22396) (lambda (g$111$22399) (<= g$111$22399 g$111$22396))) g$111$22389) ((lambda (g$111$22401) ((lambda (g$111$22403) (if (if g$111$22403 (begin '#f (apply (lambda (g$111$22405 g$111$22406) (if (eq? g$111$22405 '>=) (begin '#f (g$111$22167 g$111$22406)) '#f)) g$111$22403)) '#f) (apply (lambda (g$111$22409 g$111$22410) (lambda (g$111$22413) (>= g$111$22413 g$111$22410))) g$111$22403) ((lambda (g$111$22415) ((lambda (g$111$22417) (if (if g$111$22417 (begin '#f (apply (lambda () '#t) g$111$22417)) '#f) (apply (lambda () (error 'import '"invalid sub-version spec" g$111$22323 g$111$22165)) g$111$22417) (error 'expander '"invalid syntax" (g$111$13243 g$111$22415 '())))) ((lambda (g$111$22419) '()) g$111$22415))) g$111$22401))) ((lambda (g$111$22421) (if (g$111$13211 g$111$22421) (begin '#f ((lambda (g$111$22423) (if g$111$22423 (begin '#f ((lambda (g$111$22425) (if g$111$22425 (begin '#f (append g$111$22423 g$111$22425)) '#f)) ((lambda (g$111$22427) (if (g$111$13211 g$111$22427) (begin '#f ((lambda (g$111$22429) (if g$111$22429 (begin '#f ((lambda (g$111$22431) (if g$111$22431 (begin '#f (append g$111$22429 g$111$22431)) '#f)) ((lambda (g$111$22433) (if (equal? (g$111$13245 g$111$22433) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$22427)))) '#f)) ((lambda (g$111$22435) (list g$111$22435)) (g$111$13219 g$111$22427)))) '#f)) (g$111$13223 g$111$22421)))) '#f)) ((lambda (g$111$22437) (list g$111$22437)) (g$111$13219 g$111$22421)))) '#f)) g$111$22401))) g$111$22387))) ((lambda (g$111$22439) (if (g$111$13211 g$111$22439) (begin '#f ((lambda (g$111$22441) (if g$111$22441 (begin '#f ((lambda (g$111$22443) (if g$111$22443 (begin '#f (append g$111$22441 g$111$22443)) '#f)) ((lambda (g$111$22445) (if (g$111$13211 g$111$22445) (begin '#f ((lambda (g$111$22447) (if g$111$22447 (begin '#f ((lambda (g$111$22449) (if g$111$22449 (begin '#f (append g$111$22447 g$111$22449)) '#f)) ((lambda (g$111$22451) (if (equal? (g$111$13245 g$111$22451) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$22445)))) '#f)) ((lambda (g$111$22453) (list g$111$22453)) (g$111$13219 g$111$22445)))) '#f)) (g$111$13223 g$111$22439)))) '#f)) ((lambda (g$111$22455) (list g$111$22455)) (g$111$13219 g$111$22439)))) '#f)) g$111$22387))) g$111$22371))) ((lambda (g$111$22457) (if (g$111$13211 g$111$22457) (begin '#f ((lambda (g$111$22459) (if g$111$22459 (begin '#f ((lambda (g$111$22461) (if g$111$22461 (begin '#f (append g$111$22459 g$111$22461)) '#f)) ((lambda (g$111$22463) (if (g$111$13211 g$111$22463) (begin '#f ((lambda (g$111$22465) (if g$111$22465 (begin '#f ((lambda (g$111$22467) (if g$111$22467 (begin '#f (append g$111$22465 g$111$22467)) '#f)) ((lambda (g$111$22469) (if (equal? (g$111$13245 g$111$22469) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$22463)))) '#f)) ((lambda (g$111$22471) (list g$111$22471)) (g$111$13219 g$111$22463)))) '#f)) (g$111$13223 g$111$22457)))) '#f)) ((lambda (g$111$22473) (list g$111$22473)) (g$111$13219 g$111$22457)))) '#f)) g$111$22371))) g$111$22353))) ((lambda (g$111$22475) (if (g$111$13211 g$111$22475) (begin '#f ((lambda (g$111$22477) (if g$111$22477 (begin '#f ((lambda (g$111$22479) (if g$111$22479 (begin '#f (append g$111$22477 g$111$22479)) '#f)) ((letrec ((g$111$22481 (lambda (g$111$22483) (if (g$111$13211 g$111$22483) ((lambda (g$111$22485) (if g$111$22485 (begin '#f ((lambda (g$111$22487) (if g$111$22487 (begin '#f (map cons g$111$22485 g$111$22487)) '#f)) (g$111$22481 (g$111$13223 g$111$22483)))) '#f)) ((lambda (g$111$22489) (list g$111$22489)) (g$111$13219 g$111$22483))) (if (g$111$13215 g$111$22483) (list (begin 'sub* '())) '#f))))) g$111$22481) (g$111$13223 g$111$22475)))) '#f)) ((lambda (g$111$22491) (list g$111$22491)) (g$111$13219 g$111$22475)))) '#f)) g$111$22353))) g$111$22335))) ((lambda (g$111$22493) (if (g$111$13211 g$111$22493) (begin '#f ((lambda (g$111$22495) (if g$111$22495 (begin '#f ((lambda (g$111$22497) (if g$111$22497 (begin '#f (append g$111$22495 g$111$22497)) '#f)) ((letrec ((g$111$22499 (lambda (g$111$22501) (if (g$111$13211 g$111$22501) ((lambda (g$111$22503) (if g$111$22503 (begin '#f ((lambda (g$111$22505) (if g$111$22505 (begin '#f (map cons g$111$22503 g$111$22505)) '#f)) (g$111$22499 (g$111$13223 g$111$22501)))) '#f)) ((lambda (g$111$22507) (list g$111$22507)) (g$111$13219 g$111$22501))) (if (g$111$13215 g$111$22501) (list (begin 'sub* '())) '#f))))) g$111$22499) (g$111$13223 g$111$22493)))) '#f)) ((lambda (g$111$22509) (list g$111$22509)) (g$111$13219 g$111$22493)))) '#f)) g$111$22335))) g$111$22325))) ((lambda (g$111$22511) (list g$111$22511)) g$111$22325))) g$111$22323))) (set! g$111$22171 (lambda (g$111$22173) ((lambda (g$111$22175) ((lambda (g$111$22177) (if (if g$111$22177 (begin '#f (apply (lambda () '#t) g$111$22177)) '#f) (apply (lambda () (lambda (g$111$22179) '#t)) g$111$22177) ((lambda (g$111$22181) ((lambda (g$111$22183) (if (if g$111$22183 (begin '#f (apply (lambda (g$111$22185 g$111$22186) (eq? g$111$22185 'and)) g$111$22183)) '#f) (apply (lambda (g$111$22189 g$111$22190) ((lambda (g$111$22193) (lambda (g$111$22195) (for-all (lambda (g$111$22197) (g$111$22197 g$111$22195)) g$111$22193))) (map g$111$22171 g$111$22190))) g$111$22183) ((lambda (g$111$22199) ((lambda (g$111$22201) (if (if g$111$22201 (begin '#f (apply (lambda (g$111$22203 g$111$22204) (eq? g$111$22203 'or)) g$111$22201)) '#f) (apply (lambda (g$111$22207 g$111$22208) ((lambda (g$111$22211) (lambda (g$111$22213) (exists (lambda (g$111$22215) (g$111$22215 g$111$22213)) g$111$22211))) (map g$111$22171 g$111$22208))) g$111$22201) ((lambda (g$111$22217) ((lambda (g$111$22219) (if (if g$111$22219 (begin '#f (apply (lambda (g$111$22221 g$111$22222) (eq? g$111$22221 'not)) g$111$22219)) '#f) (apply (lambda (g$111$22225 g$111$22226) ((lambda (g$111$22229) (lambda (g$111$22231) (not (g$111$22229 g$111$22231)))) (g$111$22171 g$111$22226))) g$111$22219) ((lambda (g$111$22233) ((lambda (g$111$22235) (if (if g$111$22235 (begin '#f (apply (lambda (g$111$22237) '#t) g$111$22235)) '#f) (apply (lambda (g$111$22239) ((lambda (g$111$22241) (lambda (g$111$22243) (letrec ((g$111$22245 (lambda (g$111$22247 g$111$22248) (if (null? g$111$22247) '#t (if (null? g$111$22248) '#f (if ((car g$111$22247) (car g$111$22248)) (begin '#f (g$111$22245 (cdr g$111$22247) (cdr g$111$22173))) '#f)))))) (g$111$22245 g$111$22241 g$111$22243)))) (map g$111$22169 g$111$22239))) g$111$22235) ((lambda (g$111$22251) ((lambda (g$111$22253) (if (if g$111$22253 (begin '#f (apply (lambda () '#t) g$111$22253)) '#f) (apply (lambda () (error 'import '"invalid version spec" g$111$22173 g$111$22165)) g$111$22253) (error 'expander '"invalid syntax" (g$111$13243 g$111$22251 '())))) ((lambda (g$111$22255) '()) g$111$22251))) g$111$22233))) ((letrec ((g$111$22257 (lambda (g$111$22259) (if (g$111$13211 g$111$22259) ((lambda (g$111$22261) (if g$111$22261 (begin '#f ((lambda (g$111$22263) (if g$111$22263 (begin '#f (map cons g$111$22261 g$111$22263)) '#f)) (g$111$22257 (g$111$13223 g$111$22259)))) '#f)) ((lambda (g$111$22265) (list g$111$22265)) (g$111$13219 g$111$22259))) (if (g$111$13215 g$111$22259) (list (begin 'sub* '())) '#f))))) g$111$22257) g$111$22233))) g$111$22217))) ((lambda (g$111$22267) (if (g$111$13211 g$111$22267) (begin '#f ((lambda (g$111$22269) (if g$111$22269 (begin '#f ((lambda (g$111$22271) (if g$111$22271 (begin '#f (append g$111$22269 g$111$22271)) '#f)) ((lambda (g$111$22273) (if (g$111$13211 g$111$22273) (begin '#f ((lambda (g$111$22275) (if g$111$22275 (begin '#f ((lambda (g$111$22277) (if g$111$22277 (begin '#f (append g$111$22275 g$111$22277)) '#f)) ((lambda (g$111$22279) (if (equal? (g$111$13245 g$111$22279) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$22273)))) '#f)) ((lambda (g$111$22281) (list g$111$22281)) (g$111$13219 g$111$22273)))) '#f)) (g$111$13223 g$111$22267)))) '#f)) ((lambda (g$111$22283) (list g$111$22283)) (g$111$13219 g$111$22267)))) '#f)) g$111$22217))) g$111$22199))) ((lambda (g$111$22285) (if (g$111$13211 g$111$22285) (begin '#f ((lambda (g$111$22287) (if g$111$22287 (begin '#f ((lambda (g$111$22289) (if g$111$22289 (begin '#f (append g$111$22287 g$111$22289)) '#f)) ((letrec ((g$111$22291 (lambda (g$111$22293) (if (g$111$13211 g$111$22293) ((lambda (g$111$22295) (if g$111$22295 (begin '#f ((lambda (g$111$22297) (if g$111$22297 (begin '#f (map cons g$111$22295 g$111$22297)) '#f)) (g$111$22291 (g$111$13223 g$111$22293)))) '#f)) ((lambda (g$111$22299) (list g$111$22299)) (g$111$13219 g$111$22293))) (if (g$111$13215 g$111$22293) (list (begin 'ver* '())) '#f))))) g$111$22291) (g$111$13223 g$111$22285)))) '#f)) ((lambda (g$111$22301) (list g$111$22301)) (g$111$13219 g$111$22285)))) '#f)) g$111$22199))) g$111$22181))) ((lambda (g$111$22303) (if (g$111$13211 g$111$22303) (begin '#f ((lambda (g$111$22305) (if g$111$22305 (begin '#f ((lambda (g$111$22307) (if g$111$22307 (begin '#f (append g$111$22305 g$111$22307)) '#f)) ((letrec ((g$111$22309 (lambda (g$111$22311) (if (g$111$13211 g$111$22311) ((lambda (g$111$22313) (if g$111$22313 (begin '#f ((lambda (g$111$22315) (if g$111$22315 (begin '#f (map cons g$111$22313 g$111$22315)) '#f)) (g$111$22309 (g$111$13223 g$111$22311)))) '#f)) ((lambda (g$111$22317) (list g$111$22317)) (g$111$13219 g$111$22311))) (if (g$111$13215 g$111$22311) (list (begin 'ver* '())) '#f))))) g$111$22309) (g$111$13223 g$111$22303)))) '#f)) ((lambda (g$111$22319) (list g$111$22319)) (g$111$13219 g$111$22303)))) '#f)) g$111$22181))) g$111$22175))) ((lambda (g$111$22321) (if (equal? (g$111$13245 g$111$22321) '()) (begin '#f '()) '#f)) g$111$22175))) g$111$22173))) (letrec ((g$111$22515 (lambda (g$111$22517) ((lambda (g$111$22519) ((lambda (g$111$22521) (if (if g$111$22521 (begin '#f (apply (lambda (g$111$22523) '#t) g$111$22521)) '#f) (apply (lambda (g$111$22525) (values '() (g$111$22171 g$111$22525))) g$111$22521) ((lambda (g$111$22527) ((lambda (g$111$22529) (if (if g$111$22529 (begin '#f (apply (lambda (g$111$22531 g$111$22532) (symbol? g$111$22531)) g$111$22529)) '#f) (apply (lambda (g$111$22535 g$111$22536) (call-with-values (lambda () (g$111$22515 g$111$22536)) (lambda (g$111$22539 g$111$22540) (values (cons g$111$22535 g$111$22539) g$111$22540)))) g$111$22529) ((lambda (g$111$22543) ((lambda (g$111$22545) (if (if g$111$22545 (begin '#f (apply (lambda () '#t) g$111$22545)) '#f) (apply (lambda () (values '() (lambda (g$111$22547) '#t))) g$111$22545) ((lambda (g$111$22549) ((lambda (g$111$22551) (if (if g$111$22551 (begin '#f (apply (lambda () '#t) g$111$22551)) '#f) (apply (lambda () (error 'expander '"invalid import spec" (g$111$13243 g$111$22165 '()))) g$111$22551) (error 'expander '"invalid syntax" (g$111$13243 g$111$22549 '())))) ((lambda (g$111$22553) '()) g$111$22549))) g$111$22543))) ((lambda (g$111$22555) (if (equal? (g$111$13245 g$111$22555) '()) (begin '#f '()) '#f)) g$111$22543))) g$111$22527))) ((lambda (g$111$22557) (if (g$111$13211 g$111$22557) (begin '#f ((lambda (g$111$22559) (if g$111$22559 (begin '#f ((lambda (g$111$22561) (if g$111$22561 (begin '#f (append g$111$22559 g$111$22561)) '#f)) ((lambda (g$111$22563) (list g$111$22563)) (g$111$13223 g$111$22557)))) '#f)) ((lambda (g$111$22565) (list g$111$22565)) (g$111$13219 g$111$22557)))) '#f)) g$111$22527))) g$111$22519))) ((lambda (g$111$22567) (if (g$111$13211 g$111$22567) (begin '#f ((lambda (g$111$22569) (if g$111$22569 (begin '#f ((lambda (g$111$22571) (if g$111$22571 (begin '#f (append g$111$22569 g$111$22571)) '#f)) ((lambda (g$111$22573) (if (equal? (g$111$13245 g$111$22573) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$22567)))) '#f)) ((letrec ((g$111$22575 (lambda (g$111$22577) (if (g$111$13211 g$111$22577) ((lambda (g$111$22579) (if g$111$22579 (begin '#f ((lambda (g$111$22581) (if g$111$22581 (begin '#f (map cons g$111$22579 g$111$22581)) '#f)) (g$111$22575 (g$111$13223 g$111$22577)))) '#f)) ((lambda (g$111$22583) (list g$111$22583)) (g$111$13219 g$111$22577))) (if (g$111$13215 g$111$22577) (list (begin 'version-spec* '())) '#f))))) g$111$22575) (g$111$13219 g$111$22567)))) '#f)) g$111$22519))) g$111$22517)))) (g$111$22515 g$111$22165)))) '#f '#f '#f))) (set! g$111$21871 (lambda (g$111$21873) ((lambda (g$111$21875) ((lambda (g$111$21877) (if (if g$111$21877 (begin '#f (apply (lambda (g$111$21879 g$111$21880 g$111$21881 g$111$21882) (if (eq? g$111$21879 'rename) (if (for-all symbol? g$111$21881) (begin '#f (for-all symbol? g$111$21882)) '#f) '#f)) g$111$21877)) '#f) (apply (lambda (g$111$21887 g$111$21888 g$111$21889 g$111$21890) ((lambda (g$111$21895) ((lambda (g$111$21897) ((lambda (g$111$21899) (g$111$21859 (map cons g$111$21890 g$111$21897) g$111$21899)) (g$111$21865 g$111$21889 g$111$21895))) (g$111$21863 g$111$21889 g$111$21895))) (g$111$21871 g$111$21888))) g$111$21877) ((lambda (g$111$21901) ((lambda (g$111$21903) (if (if g$111$21903 (begin '#f (apply (lambda (g$111$21905 g$111$21906 g$111$21907) (if (eq? g$111$21905 'except) (begin '#f (for-all symbol? g$111$21907)) '#f)) g$111$21903)) '#f) (apply (lambda (g$111$21911 g$111$21912 g$111$21913) ((lambda (g$111$21917) (g$111$21865 g$111$21913 g$111$21917)) (g$111$21871 g$111$21912))) g$111$21903) ((lambda (g$111$21919) ((lambda (g$111$21921) (if (if g$111$21921 (begin '#f (apply (lambda (g$111$21923 g$111$21924 g$111$21925) (if (eq? g$111$21923 'only) (begin '#f (for-all symbol? g$111$21925)) '#f)) g$111$21921)) '#f) (apply (lambda (g$111$21929 g$111$21930 g$111$21931) ((lambda (g$111$21935) ((lambda (g$111$21937) ((lambda (g$111$21939) (map cons g$111$21937 g$111$21939)) (g$111$21863 g$111$21937 g$111$21935))) (g$111$21867 g$111$21931))) (g$111$21871 g$111$21930))) g$111$21921) ((lambda (g$111$21941) ((lambda (g$111$21943) (if (if g$111$21943 (begin '#f (apply (lambda (g$111$21945 g$111$21946 g$111$21947) (if (eq? g$111$21945 'prefix) (begin '#f (symbol? g$111$21947)) '#f)) g$111$21943)) '#f) (apply (lambda (g$111$21951 g$111$21952 g$111$21953) ((lambda (g$111$21957) (map (lambda (g$111$21959) (cons (string->symbol (string-append (symbol->string g$111$21953) (symbol->string (car g$111$21959)))) (cdr g$111$21959))) g$111$21957)) (g$111$21871 g$111$21952))) g$111$21943) ((lambda (g$111$21961) ((lambda (g$111$21963) (if (if g$111$21963 (begin '#f (apply (lambda (g$111$21965 g$111$21966) (eq? g$111$21965 'library)) g$111$21963)) '#f) (apply (lambda (g$111$21969 g$111$21970) (call-with-values (lambda () (g$111$21869 g$111$21970)) (lambda (g$111$21973 g$111$21974) (begin (if (null? g$111$21973) (error 'import '"empty library name" g$111$21970) (void)) ((lambda (g$111$21977) (begin (if g$111$21977 (void) (error 'import '"cannot find library with required name" g$111$21973)) (if (g$111$21974 (g$111$12868 g$111$21977)) (void) (error 'import '"library does not satisfy version specification" g$111$21977 g$111$21970)) (g$111$21857 g$111$21977) (g$111$12864 g$111$21977))) (g$111$12839 g$111$21973)))))) g$111$21963) ((lambda (g$111$21979) ((lambda (g$111$21981) (if (if g$111$21981 (begin '#f (apply (lambda (g$111$21983 g$111$21984) (not (memq g$111$21983 '(rename except only prefix library)))) g$111$21981)) '#f) (apply (lambda (g$111$21987 g$111$21988) (g$111$21871 (list 'library (cons g$111$21987 g$111$21988)))) g$111$21981) ((lambda (g$111$21991) ((lambda (g$111$21993) (if (if g$111$21993 (begin '#f (apply (lambda (g$111$21995) '#t) g$111$21993)) '#f) (apply (lambda (g$111$21997) (error 'import '"invalid import spec" g$111$21997)) g$111$21993) (error 'expander '"invalid syntax" (g$111$13243 g$111$21991 '())))) ((lambda (g$111$21999) (list g$111$21999)) g$111$21991))) g$111$21979))) ((lambda (g$111$22001) (if (g$111$13211 g$111$22001) (begin '#f ((lambda (g$111$22003) (if g$111$22003 (begin '#f ((lambda (g$111$22005) (if g$111$22005 (begin '#f (append g$111$22003 g$111$22005)) '#f)) ((letrec ((g$111$22007 (lambda (g$111$22009) (if (g$111$13211 g$111$22009) ((lambda (g$111$22011) (if g$111$22011 (begin '#f ((lambda (g$111$22013) (if g$111$22013 (begin '#f (map cons g$111$22011 g$111$22013)) '#f)) (g$111$22007 (g$111$13223 g$111$22009)))) '#f)) ((lambda (g$111$22015) (list g$111$22015)) (g$111$13219 g$111$22009))) (if (g$111$13215 g$111$22009) (list (begin 'x* '())) '#f))))) g$111$22007) (g$111$13223 g$111$22001)))) '#f)) ((lambda (g$111$22017) (list g$111$22017)) (g$111$13219 g$111$22001)))) '#f)) g$111$21979))) g$111$21961))) ((lambda (g$111$22019) (if (g$111$13211 g$111$22019) (begin '#f ((lambda (g$111$22021) (if g$111$22021 (begin '#f ((lambda (g$111$22023) (if g$111$22023 (begin '#f (append g$111$22021 g$111$22023)) '#f)) ((lambda (g$111$22025) (if (g$111$13211 g$111$22025) (begin '#f ((lambda (g$111$22027) (if g$111$22027 (begin '#f ((lambda (g$111$22029) (if g$111$22029 (begin '#f (append g$111$22027 g$111$22029)) '#f)) ((lambda (g$111$22031) (if (equal? (g$111$13245 g$111$22031) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$22025)))) '#f)) ((letrec ((g$111$22033 (lambda (g$111$22035) (if (g$111$13211 g$111$22035) ((lambda (g$111$22037) (if g$111$22037 (begin '#f ((lambda (g$111$22039) (if g$111$22039 (begin '#f (map cons g$111$22037 g$111$22039)) '#f)) (g$111$22033 (g$111$13223 g$111$22035)))) '#f)) ((lambda (g$111$22041) (list g$111$22041)) (g$111$13219 g$111$22035))) (if (g$111$13215 g$111$22035) (list (begin 'spec* '())) '#f))))) g$111$22033) (g$111$13219 g$111$22025)))) '#f)) (g$111$13223 g$111$22019)))) '#f)) ((lambda (g$111$22043) (list g$111$22043)) (g$111$13219 g$111$22019)))) '#f)) g$111$21961))) g$111$21941))) ((lambda (g$111$22045) (if (g$111$13211 g$111$22045) (begin '#f ((lambda (g$111$22047) (if g$111$22047 (begin '#f ((lambda (g$111$22049) (if g$111$22049 (begin '#f (append g$111$22047 g$111$22049)) '#f)) ((lambda (g$111$22051) (if (g$111$13211 g$111$22051) (begin '#f ((lambda (g$111$22053) (if g$111$22053 (begin '#f ((lambda (g$111$22055) (if g$111$22055 (begin '#f (append g$111$22053 g$111$22055)) '#f)) ((lambda (g$111$22057) (if (g$111$13211 g$111$22057) (begin '#f ((lambda (g$111$22059) (if g$111$22059 (begin '#f ((lambda (g$111$22061) (if g$111$22061 (begin '#f (append g$111$22059 g$111$22061)) '#f)) ((lambda (g$111$22063) (if (equal? (g$111$13245 g$111$22063) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$22057)))) '#f)) ((lambda (g$111$22065) (list g$111$22065)) (g$111$13219 g$111$22057)))) '#f)) (g$111$13223 g$111$22051)))) '#f)) ((lambda (g$111$22067) (list g$111$22067)) (g$111$13219 g$111$22051)))) '#f)) (g$111$13223 g$111$22045)))) '#f)) ((lambda (g$111$22069) (list g$111$22069)) (g$111$13219 g$111$22045)))) '#f)) g$111$21941))) g$111$21919))) ((lambda (g$111$22071) (if (g$111$13211 g$111$22071) (begin '#f ((lambda (g$111$22073) (if g$111$22073 (begin '#f ((lambda (g$111$22075) (if g$111$22075 (begin '#f (append g$111$22073 g$111$22075)) '#f)) ((lambda (g$111$22077) (if (g$111$13211 g$111$22077) (begin '#f ((lambda (g$111$22079) (if g$111$22079 (begin '#f ((lambda (g$111$22081) (if g$111$22081 (begin '#f (append g$111$22079 g$111$22081)) '#f)) ((letrec ((g$111$22083 (lambda (g$111$22085) (if (g$111$13211 g$111$22085) ((lambda (g$111$22087) (if g$111$22087 (begin '#f ((lambda (g$111$22089) (if g$111$22089 (begin '#f (map cons g$111$22087 g$111$22089)) '#f)) (g$111$22083 (g$111$13223 g$111$22085)))) '#f)) ((lambda (g$111$22091) (list g$111$22091)) (g$111$13219 g$111$22085))) (if (g$111$13215 g$111$22085) (list (begin 'sym* '())) '#f))))) g$111$22083) (g$111$13223 g$111$22077)))) '#f)) ((lambda (g$111$22093) (list g$111$22093)) (g$111$13219 g$111$22077)))) '#f)) (g$111$13223 g$111$22071)))) '#f)) ((lambda (g$111$22095) (list g$111$22095)) (g$111$13219 g$111$22071)))) '#f)) g$111$21919))) g$111$21901))) ((lambda (g$111$22097) (if (g$111$13211 g$111$22097) (begin '#f ((lambda (g$111$22099) (if g$111$22099 (begin '#f ((lambda (g$111$22101) (if g$111$22101 (begin '#f (append g$111$22099 g$111$22101)) '#f)) ((lambda (g$111$22103) (if (g$111$13211 g$111$22103) (begin '#f ((lambda (g$111$22105) (if g$111$22105 (begin '#f ((lambda (g$111$22107) (if g$111$22107 (begin '#f (append g$111$22105 g$111$22107)) '#f)) ((letrec ((g$111$22109 (lambda (g$111$22111) (if (g$111$13211 g$111$22111) ((lambda (g$111$22113) (if g$111$22113 (begin '#f ((lambda (g$111$22115) (if g$111$22115 (begin '#f (map cons g$111$22113 g$111$22115)) '#f)) (g$111$22109 (g$111$13223 g$111$22111)))) '#f)) ((lambda (g$111$22117) (list g$111$22117)) (g$111$13219 g$111$22111))) (if (g$111$13215 g$111$22111) (list (begin 'sym* '())) '#f))))) g$111$22109) (g$111$13223 g$111$22103)))) '#f)) ((lambda (g$111$22119) (list g$111$22119)) (g$111$13219 g$111$22103)))) '#f)) (g$111$13223 g$111$22097)))) '#f)) ((lambda (g$111$22121) (list g$111$22121)) (g$111$13219 g$111$22097)))) '#f)) g$111$21901))) g$111$21875))) ((lambda (g$111$22123) (if (g$111$13211 g$111$22123) (begin '#f ((lambda (g$111$22125) (if g$111$22125 (begin '#f ((lambda (g$111$22127) (if g$111$22127 (begin '#f (append g$111$22125 g$111$22127)) '#f)) ((lambda (g$111$22129) (if (g$111$13211 g$111$22129) (begin '#f ((lambda (g$111$22131) (if g$111$22131 (begin '#f ((lambda (g$111$22133) (if g$111$22133 (begin '#f (append g$111$22131 g$111$22133)) '#f)) ((letrec ((g$111$22135 (lambda (g$111$22137) (if (g$111$13211 g$111$22137) ((lambda (g$111$22139) (if g$111$22139 (begin '#f ((lambda (g$111$22141) (if g$111$22141 (begin '#f (map cons g$111$22139 g$111$22141)) '#f)) (g$111$22135 (g$111$13223 g$111$22137)))) '#f)) ((lambda (g$111$22143) (if (g$111$13211 g$111$22143) (begin '#f ((lambda (g$111$22145) (if g$111$22145 (begin '#f ((lambda (g$111$22147) (if g$111$22147 (begin '#f (append g$111$22145 g$111$22147)) '#f)) ((lambda (g$111$22149) (if (g$111$13211 g$111$22149) (begin '#f ((lambda (g$111$22151) (if g$111$22151 (begin '#f ((lambda (g$111$22153) (if g$111$22153 (begin '#f (append g$111$22151 g$111$22153)) '#f)) ((lambda (g$111$22155) (if (equal? (g$111$13245 g$111$22155) '()) (begin '#f '()) '#f)) (g$111$13223 g$111$22149)))) '#f)) ((lambda (g$111$22157) (list g$111$22157)) (g$111$13219 g$111$22149)))) '#f)) (g$111$13223 g$111$22143)))) '#f)) ((lambda (g$111$22159) (list g$111$22159)) (g$111$13219 g$111$22143)))) '#f)) (g$111$13219 g$111$22137))) (if (g$111$13215 g$111$22137) (list (begin 'old* '()) (begin 'new* '())) '#f))))) g$111$22135) (g$111$13223 g$111$22129)))) '#f)) ((lambda (g$111$22161) (list g$111$22161)) (g$111$13219 g$111$22129)))) '#f)) (g$111$13223 g$111$22123)))) '#f)) ((lambda (g$111$22163) (list g$111$22163)) (g$111$13219 g$111$22123)))) '#f)) g$111$21875))) g$111$21873))) (letrec ((g$111$22645 (lambda (g$111$22647 g$111$22648) (if (null? g$111$22647) (values g$111$22648 (g$111$21857)) (g$111$22645 (cdr g$111$22647) (g$111$21859 (g$111$21871 (car g$111$22647)) g$111$22648)))))) (g$111$22645 g$111$21855 '())))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$111$13640 (lambda (g$111$22651) ((lambda (g$111$22653) (begin (for-each (lambda (g$111$22655) ((lambda (g$111$22657 g$111$22658) (g$111$13164 g$111$22653 (g$111$13201 g$111$22657 g$111$13131 '()) g$111$22658)) (car g$111$22655) (cdr g$111$22655))) g$111$22651) g$111$22653)) (g$111$13162)))) (set! g$111$13642 (lambda () ((lambda (g$111$22661) (lambda g$111$22665 ((lambda (g$111$22666) (if (= g$111$22666 '0) (apply (lambda () g$111$22661) g$111$22665) (if (= g$111$22666 '1) (apply (lambda (g$111$22663) (set! g$111$22661 (g$111$13124 g$111$22663 g$111$22661))) g$111$22665) (error 'apply '"invalid arg count")))) (length g$111$22665)))) '()))) (set! g$111$13644 (g$111$12318 (lambda g$111$22667 (error 'inv-collector '"not initialized")) (lambda (g$111$22669) (begin (if (procedure? g$111$22669) (void) (error 'inv-collector '"not a procedure" g$111$22669)) g$111$22669)))) (set! g$111$13646 (g$111$12318 (lambda g$111$22671 (error 'vis-collector '"not initialized")) (lambda (g$111$22673) (begin (if (procedure? g$111$22673) (void) (error 'vis-collector '"not a procedure" g$111$22673)) g$111$22673)))) (set! g$111$13648 (lambda (g$111$22675 g$111$22676 g$111$22677) (call-with-values (lambda () (g$111$13618 g$111$22675 '() '() '() '() '() '() g$111$22676 g$111$22677)) (lambda (g$111$22681 g$111$22682 g$111$22683 g$111$22684 g$111$22685 g$111$22686 g$111$22687) (values (append (apply append (reverse g$111$22686)) g$111$22681) g$111$22682 g$111$22683 (reverse g$111$22684) (reverse g$111$22685)))))) (set! g$111$13650 (lambda (g$111$22695 g$111$22696 g$111$22697) (call-with-values (lambda () (g$111$13632 g$111$22695)) (lambda (g$111$22701 g$111$22702) (call-with-values (lambda () (g$111$13638 g$111$22696)) (lambda (g$111$22703 g$111$22704) ((lambda (g$111$22709) ((lambda (g$111$22711 g$111$22712 g$111$22713) ((lambda (g$111$22721 g$111$22722 g$111$22723 g$111$22724) ((lambda (g$111$22729) (dynamic-wind g$111$22729 (lambda () (call-with-values (lambda () (g$111$13648 g$111$22711 g$111$22709 '#f)) (lambda (g$111$22731 g$111$22732 g$111$22733 g$111$22734 g$111$22735) (begin (g$111$13166 g$111$22709) ((lambda (g$111$22741 g$111$22742) (begin (g$111$13168 g$111$22709) ((lambda (g$111$22745) (call-with-values (lambda () (g$111$13693 g$111$22732)) (lambda (g$111$22747 g$111$22748 g$111$22749) ((lambda (g$111$22753 g$111$22754) (values g$111$22704 (g$111$22712) (g$111$22713) (g$111$13108 '#f (append g$111$22754 (list g$111$22753))) g$111$22749 g$111$22745 g$111$22747)) (g$111$13105 '#f g$111$22734 g$111$22741 (g$111$13689 g$111$22748 g$111$22742)) (map g$111$13122 (map cdr g$111$22748)))))) (g$111$13691 g$111$22701 g$111$22702 g$111$22709)))) (g$111$13606 g$111$22735 g$111$22732 g$111$22733) (g$111$13592 g$111$22731 g$111$22732 g$111$22733)))))) g$111$22729)) (lambda () (begin ((lambda (g$111$22757) (begin (g$111$22721 g$111$22723) (set! g$111$22723 g$111$22757))) (g$111$22721)) ((lambda (g$111$22759) (begin (g$111$22722 g$111$22724) (set! g$111$22724 g$111$22759))) (g$111$22722)))))) g$111$13644 g$111$13646 g$111$22712 g$111$22713)) (map (lambda (g$111$22761) (g$111$13201 g$111$22761 g$111$13131 (list g$111$22709))) g$111$22697) (g$111$13642) (g$111$13642))) (g$111$13640 g$111$22703)))))))) (set! g$111$13652 (lambda (g$111$22763) (call-with-values (lambda () (g$111$13636 g$111$22763)) (lambda (g$111$22765 g$111$22766 g$111$22767 g$111$22768) (call-with-values (lambda () (g$111$13634 g$111$22765)) (lambda (g$111$22773 g$111$22774) (call-with-values (lambda () (g$111$13650 g$111$22766 g$111$22767 g$111$22768)) (lambda (g$111$22777 g$111$22778 g$111$22779 g$111$22780 g$111$22781 g$111$22782 g$111$22783) (values g$111$22773 g$111$22774 g$111$22777 g$111$22778 g$111$22779 g$111$22780 g$111$22781 g$111$22782 g$111$22783))))))))) (set! g$111$13654 (lambda (g$111$22791) (begin (write g$111$22791) ((lambda (g$111$22793) ((lambda (g$111$22795) (if (if g$111$22795 (begin '#f (apply (lambda (g$111$22797 g$111$22798 g$111$22799) (eq? g$111$22797 'import)) g$111$22795)) '#f) (apply (lambda (g$111$22803 g$111$22804 g$111$22805) (values g$111$22804 g$111$22805)) g$111$22795) ((lambda (g$111$22809) ((lambda (g$111$22811) (if (if g$111$22811 (begin '#f (apply (lambda () '#t) g$111$22811)) '#f) (apply (lambda () (error '"invalid syntax of top-level program")) g$111$22811) (error 'expander '"invalid syntax" (g$111$13243 g$111$22809 '())))) ((lambda (g$111$22813) '()) g$111$22809))) g$111$22793))) ((lambda (g$111$22815) (if (g$111$13211 g$111$22815) (begin '#f ((lambda (g$111$22817) (if g$111$22817 (begin '#f ((lambda (g$111$22819) (if g$111$22819 (begin '#f (append g$111$22817 g$111$22819)) '#f)) ((letrec ((g$111$22821 (lambda (g$111$22823) (if (g$111$13211 g$111$22823) ((lambda (g$111$22825) (if g$111$22825 (begin '#f ((lambda (g$111$22827) (if g$111$22827 (begin '#f (map cons g$111$22825 g$111$22827)) '#f)) (g$111$22821 (g$111$13223 g$111$22823)))) '#f)) ((lambda (g$111$22829) (list g$111$22829)) (g$111$13219 g$111$22823))) (if (g$111$13215 g$111$22823) (list (begin 'b* '())) '#f))))) g$111$22821) (g$111$13223 g$111$22815)))) '#f)) ((lambda (g$111$22831) (if (g$111$13211 g$111$22831) (begin '#f ((lambda (g$111$22833) (if g$111$22833 (begin '#f ((lambda (g$111$22835) (if g$111$22835 (begin '#f (append g$111$22833 g$111$22835)) '#f)) ((letrec ((g$111$22837 (lambda (g$111$22839) (if (g$111$13211 g$111$22839) ((lambda (g$111$22841) (if g$111$22841 (begin '#f ((lambda (g$111$22843) (if g$111$22843 (begin '#f (map cons g$111$22841 g$111$22843)) '#f)) (g$111$22837 (g$111$13223 g$111$22839)))) '#f)) ((lambda (g$111$22845) (list g$111$22845)) (g$111$13219 g$111$22839))) (if (g$111$13215 g$111$22839) (list (begin 'imp* '())) '#f))))) g$111$22837) (g$111$13223 g$111$22831)))) '#f)) ((lambda (g$111$22847) (list g$111$22847)) (g$111$13219 g$111$22831)))) '#f)) (g$111$13219 g$111$22815)))) '#f)) g$111$22793))) g$111$22791)))) (set! g$111$13656 (lambda (g$111$22849) (call-with-values (lambda () (g$111$13654 g$111$22849)) (lambda (g$111$22851 g$111$22852) (call-with-values (lambda () (g$111$13650 '() g$111$22851 g$111$22852)) (lambda (g$111$22855 g$111$22856 g$111$22857 g$111$22858 g$111$22859 g$111$22860 g$111$22861) (values g$111$22856 g$111$22858))))))) (set! g$111$13659 (lambda (g$111$22869 g$111$22870) (vector 'g$111$13658 g$111$22869 g$111$22870))) (set! g$111$13661 (lambda (g$111$22873) (if (vector? g$111$22873) (if (= (vector-length g$111$22873) (+ '1 (length '(subst imp*)))) (begin '#f (eq? (vector-ref g$111$22873 '0) 'g$111$13658)) '#f) '#f))) (set! g$111$13663 (lambda (g$111$22875) (if (g$111$13661 g$111$22875) (vector-ref g$111$22875 '1) (error 'env-subst '"~s is not of type ~s" g$111$22875 'env)))) (set! g$111$13665 (lambda (g$111$22877) (if (g$111$13661 g$111$22877) (vector-ref g$111$22877 '2) (error 'env-imp* '"~s is not of type ~s" g$111$22877 'env)))) (set! g$111$13667 (lambda (g$111$22879 g$111$22880) (if (g$111$13661 g$111$22879) (vector-set! g$111$22879 '1 g$111$22880) (error 'set-env-subst! '"~s is not of type ~s" g$111$22879 'env)))) (set! g$111$13669 (lambda (g$111$22883 g$111$22884) (if (g$111$13661 g$111$22883) (vector-set! g$111$22883 '2 g$111$22884) (error 'set-env-imp*! '"~s is not of type ~s" g$111$22883 'env)))) (set! g$111$13671 (lambda (g$111$22887) (g$111$13661 g$111$22887))) (set! g$111$13673 (lambda g$111$22889 (call-with-values (lambda () (g$111$13638 g$111$22889)) (lambda (g$111$22891 g$111$22892) (g$111$13659 g$111$22891 g$111$22892))))) (set! g$111$13675 (lambda (g$111$22895) (begin (if (eqv? g$111$22895 '5) (void) (error 'null-environment '"not 5" g$111$22895)) (g$111$13673 '(psyntax null-environment-5))))) (set! g$111$13677 (lambda (g$111$22897) (begin (if (eqv? g$111$22897 '5) (void) (error 'scheme-report-environment '"not 5" g$111$22897)) (g$111$13673 '(psyntax scheme-report-environment-5))))) (set! g$111$13679 (lambda (g$111$22899 g$111$22900) (begin (if (g$111$13661 g$111$22900) (void) (error 'expand '"not an environment" g$111$22900)) ((lambda (g$111$22903) ((lambda (g$111$22905) ((lambda (g$111$22907 g$111$22908 g$111$22909) ((lambda (g$111$22913) (begin (g$111$13166 g$111$22905) (values g$111$22913 (g$111$22908)))) ((lambda (g$111$22919 g$111$22920 g$111$22921 g$111$22922) ((lambda (g$111$22927) (dynamic-wind g$111$22927 (lambda () (g$111$13596 g$111$22907 '() '())) g$111$22927)) (lambda () (begin ((lambda (g$111$22929) (begin (g$111$22919 g$111$22921) (set! g$111$22921 g$111$22929))) (g$111$22919)) ((lambda (g$111$22931) (begin (g$111$22920 g$111$22922) (set! g$111$22922 g$111$22931))) (g$111$22920)))))) g$111$13644 g$111$13646 g$111$22908 g$111$22909))) (g$111$13201 g$111$22899 g$111$13131 (list g$111$22905)) (g$111$13642) (g$111$13642))) (g$111$13640 g$111$22903))) (g$111$13663 g$111$22900))))) (set! g$111$13681 (lambda (g$111$22933 g$111$22934) (begin (if (g$111$13661 g$111$22934) (void) (error 'eval '"not an environment" g$111$22934)) (call-with-values (lambda () (g$111$13679 g$111$22933 g$111$22934)) (lambda (g$111$22937 g$111$22938) (begin (for-each g$111$12830 g$111$22938) (eval-core (g$111$12392 g$111$22937)))))))) (set! g$111$13683 (lambda (g$111$22941) ((lambda (g$111$22943 g$111$22945) (begin (set! g$111$22943 (lambda (g$111$22955) (if (null? g$111$22955) (g$111$13107) (g$111$13108 '#f (map (lambda (g$111$22957) ((lambda (g$111$22959 g$111$22960) (list 'set! g$111$22959 g$111$22960)) (car g$111$22957) (cddr g$111$22957))) g$111$22955))))) (set! g$111$22945 (lambda (g$111$22947) (for-each (lambda (g$111$22949) ((lambda (g$111$22951 g$111$22952) (set-symbol-value! g$111$22951 g$111$22952)) (car g$111$22949) (cadr g$111$22949))) g$111$22947))) (call-with-values (lambda () (g$111$13652 g$111$22941)) (lambda (g$111$22963 g$111$22964 g$111$22965 g$111$22966 g$111$22967 g$111$22968 g$111$22969 g$111$22970 g$111$22971) ((lambda (g$111$22981 g$111$22982 g$111$22983 g$111$22984 g$111$22985 g$111$22986) (begin (g$111$12834 g$111$22981 g$111$22982 g$111$22983 g$111$22984 g$111$22985 g$111$22986 g$111$22970 g$111$22971 (lambda () (g$111$22945 g$111$22969)) (lambda () (eval-core (g$111$12392 g$111$22968))) '#t) (values g$111$22968 (g$111$22943 g$111$22969) g$111$22970 g$111$22971))) (gensym) g$111$22963 g$111$22964 (map g$111$12826 g$111$22965) (map g$111$12826 g$111$22967) (map g$111$12826 g$111$22966)))))) '#f '#f))) (set! g$111$13685 (lambda (g$111$22993) (call-with-values (lambda () (g$111$13683 g$111$22993)) (lambda (g$111$22995 g$111$22996 g$111$22997 g$111$22998) (values g$111$22995 g$111$22997 g$111$22998))))) (set! g$111$13687 (lambda (g$111$23003 g$111$23004 g$111$23005) (if (null? g$111$23004) g$111$23005 (g$111$13687 g$111$23003 (cdr g$111$23004) (cons (g$111$23003 (car g$111$23004)) g$111$23005))))) (set! g$111$13689 (lambda (g$111$23009 g$111$23010) (g$111$13108 '#f (cons (g$111$13107) (g$111$13687 (lambda (g$111$23013) (list 'set! (cdr g$111$23013) (car g$111$23013))) g$111$23009 g$111$23010))))) (set! g$111$13691 (lambda (g$111$23015 g$111$23016 g$111$23017) (map (lambda (g$111$23021 g$111$23022) ((lambda (g$111$23025) ((lambda (g$111$23027) ((lambda () (begin (if g$111$23027 (void) (error 'expander '"cannot export unbound identifier" (g$111$13243 g$111$23025 '()))) (cons g$111$23022 g$111$23027))))) (g$111$13247 g$111$23025))) (g$111$13201 g$111$23021 g$111$13131 (list g$111$23017)))) g$111$23015 g$111$23016))) (set! g$111$13693 (lambda (g$111$23029) (letrec ((g$111$23031 (lambda (g$111$23033 g$111$23034 g$111$23035 g$111$23036) (if (null? g$111$23033) (values g$111$23034 g$111$23035 g$111$23036) ((lambda (g$111$23041) ((lambda (g$111$23043 g$111$23044) ((lambda (g$111$23047) (if (memv g$111$23047 '(lexical)) ((lambda (g$111$23052) (g$111$23031 (cdr g$111$23033) (cons (cons* g$111$23043 'global g$111$23052) g$111$23034) (cons (cons (g$111$13255 g$111$23044) g$111$23052) g$111$23035) g$111$23036)) (g$111$13137 (g$111$13255 g$111$23044))) (if (memv g$111$23047 '(local-macro)) ((lambda (g$111$23050) (g$111$23031 (cdr g$111$23033) (cons (cons* g$111$23043 'global-macro g$111$23050) g$111$23034) g$111$23035 (cons (cons g$111$23050 (g$111$13255 g$111$23044)) g$111$23036))) (gensym)) (if (memv g$111$23047 '(local-macro!)) ((lambda (g$111$23048) (g$111$23031 (cdr g$111$23033) (cons (cons* g$111$23043 'global-macro! g$111$23048) g$111$23034) g$111$23035 (cons (cons g$111$23048 (g$111$13255 g$111$23044)) g$111$23036))) (gensym)) (if (memv g$111$23047 '($rtd $module)) (g$111$23031 (cdr g$111$23033) (cons g$111$23041 g$111$23034) g$111$23035 g$111$23036) (error 'expander '"BUG: do not know how to export" (g$111$13253 g$111$23044) (g$111$13255 g$111$23044))))))) (g$111$13253 g$111$23044))) (car g$111$23041) (cdr g$111$23041))) (car g$111$23033)))))) (g$111$23031 g$111$23029 '() '() '())))) (set! g$111$13695 (lambda (g$111$23054) ((lambda (g$111$23056) ((lambda (g$111$23058) (if (if g$111$23058 (begin '#f (apply (lambda (g$111$23060) '#t) g$111$23058)) '#f) (apply (lambda (g$111$23062) (map (lambda (g$111$23064) (g$111$13175 (gensym 't) g$111$13131 '())) g$111$23062)) g$111$23058) ((lambda (g$111$23066) ((lambda (g$111$23068) (if (if g$111$23068 (begin '#f (apply (lambda () '#t) g$111$23068)) '#f) (apply (lambda () (error 'generate-temporaries '"not a list")) g$111$23068) (error 'expander '"invalid syntax" (g$111$13243 g$111$23066 '())))) ((lambda (g$111$23070) '()) g$111$23066))) g$111$23056))) ((letrec ((g$111$23072 (lambda (g$111$23074) (if (g$111$13211 g$111$23074) ((lambda (g$111$23076) (if g$111$23076 (begin '#f ((lambda (g$111$23078) (if g$111$23078 (begin '#f (map cons g$111$23076 g$111$23078)) '#f)) (g$111$23072 (g$111$13223 g$111$23074)))) '#f)) ((lambda (g$111$23080) (list g$111$23080)) (g$111$13219 g$111$23074))) (if (g$111$13215 g$111$23074) (list (begin 'ls '())) '#f))))) g$111$23072) g$111$23056))) g$111$23054))) (set! g$111$13697 (lambda (g$111$23082 g$111$23083) (if (g$111$13225 g$111$23082) (if (g$111$13225 g$111$23083) (g$111$13233 g$111$23082 g$111$23083) (error 'free-identifier=? '"not an identifier" g$111$23083)) (error 'free-identifier=? '"not an identifier" g$111$23082)))) (set! g$111$13699 (lambda (g$111$23086 g$111$23087) (if (g$111$13225 g$111$23086) (if (g$111$13225 g$111$23087) (g$111$13231 g$111$23086 g$111$23087) (error 'bound-identifier=? '"not an identifier" g$111$23087)) (error 'bound-identifier=? '"not an identifier" g$111$23086)))) (set! g$111$13701 (lambda (g$111$23090 . g$111$23092) (begin (if (for-all string? g$111$23092) (void) (error 'syntax-error '"invalid argument" g$111$23092)) (error 'expander '"invalid syntax" (g$111$13245 g$111$23090) (apply string-append g$111$23092))))) (set! g$111$13703 (lambda (g$111$23094) (g$111$13225 g$111$23094))) (set! g$111$13705 (lambda (g$111$23096 g$111$23097) (if (g$111$13225 g$111$23096) (g$111$13191 g$111$23096 g$111$23097) (error 'datum->syntax '"not an identifier" g$111$23096)))) (set! g$111$13707 (lambda (g$111$23100) (g$111$13245 g$111$23100))) (set! g$111$13709 (lambda (g$111$23102) (call-with-values (lambda () (g$111$13656 g$111$23102)) (lambda (g$111$23104 g$111$23105) (begin (for-each g$111$12830 g$111$23104) (eval-core (g$111$12392 g$111$23105))))))) (set! g$111$13711 (g$111$12318 '#f)) (set! g$111$13713 (lambda (g$111$23108) ((lambda (g$111$23110) (if g$111$23110 ((lambda (g$111$23112) ((lambda (g$111$23114) (if g$111$23114 (cdr g$111$23114) ((lambda (g$111$23116) ((lambda (g$111$23118) (if g$111$23118 ((lambda (g$111$23120) ((lambda (g$111$23122) (begin (g$111$12833 g$111$23112 g$111$23108 g$111$23122) g$111$23122)) (cdr g$111$23120))) g$111$23118) ((lambda (g$111$23124) (begin (g$111$12833 g$111$23112 g$111$23108 g$111$23124) (g$111$12832 g$111$23112 g$111$23124 (cons 'global (cons g$111$23112 (g$111$13137 g$111$23108)))) g$111$23124)) (g$111$13139 g$111$23108)))) (assq g$111$23108 g$111$23116))) (if (g$111$12838 '(ikarus)) (g$111$12864 (g$111$12839 '(ikarus))) '())))) (assq g$111$23108 (g$111$12864 g$111$23112)))) g$111$23110) '#f)) (g$111$13711)))) (set! g$111$13715 (lambda (g$111$23126) ((lambda (g$111$23128) (begin (set! g$111$23128 (lambda (g$111$23130) ((lambda (g$111$23132 g$111$23133) (if g$111$23132 (set-symbol-value! g$111$23132 (eval-core (g$111$12392 g$111$23133))) (eval-core (g$111$12392 g$111$23133)))) (car g$111$23130) (cdr g$111$23130)))) ((lambda (g$111$23136 g$111$23137) ((lambda (g$111$23140) (begin (for-each g$111$12830 (g$111$23136)) (if (null? g$111$23140) (void) (begin (for-each g$111$23128 (reverse (cdr g$111$23140))) (g$111$23128 (car g$111$23140)))))) ((lambda (g$111$23148 g$111$23149 g$111$23150 g$111$23151 g$111$23152 g$111$23153) ((lambda (g$111$23160) (dynamic-wind g$111$23160 (lambda () (g$111$13628 (list (g$111$13201 g$111$23126 g$111$13131 '())) '())) g$111$23160)) (lambda () (begin ((lambda (g$111$23162) (begin (g$111$23148 g$111$23151) (set! g$111$23151 g$111$23162))) (g$111$23148)) ((lambda (g$111$23164) (begin (g$111$23149 g$111$23152) (set! g$111$23152 g$111$23164))) (g$111$23149)) ((lambda (g$111$23166) (begin (g$111$23150 g$111$23153) (set! g$111$23153 g$111$23166))) (g$111$23150)))))) g$111$13644 g$111$13646 g$111$13711 g$111$23136 g$111$23137 (g$111$12839 '(ikarus interaction))))) (g$111$13642) (g$111$13642)))) '#f))) (begin (set! g$111$23168 g$111$13715) (set! g$111$23169 g$111$13713) (set! g$111$23170 g$111$13711) (set! g$111$23171 g$111$13709) (set! g$111$23172 g$111$13707) (set! g$111$23173 g$111$13705) (set! g$111$23174 g$111$13703) (set! g$111$23175 g$111$13701) (set! g$111$23176 g$111$13699) (set! g$111$23177 g$111$13697) (set! g$111$23178 g$111$13695) (set! g$111$23179 g$111$13693) (set! g$111$23180 g$111$13691) (set! g$111$23181 g$111$13689) (set! g$111$23182 g$111$13687) (set! g$111$23183 g$111$13685) (set! g$111$23184 g$111$13683) (set! g$111$23185 g$111$13681) (set! g$111$23186 g$111$13679) (set! g$111$23187 g$111$13677) (set! g$111$23188 g$111$13675) (set! g$111$23189 g$111$13673) (set! g$111$23190 g$111$13671) (set! g$111$23191 g$111$13669) (set! g$111$23192 g$111$13667) (set! g$111$23193 g$111$13665) (set! g$111$23194 g$111$13663) (set! g$111$23195 g$111$13661) (set! g$111$23196 g$111$13659) (set! g$111$23197 g$111$13656) (set! g$111$23198 g$111$13654) (set! g$111$23199 g$111$13652) (set! g$111$23200 g$111$13650) (set! g$111$23201 g$111$13648) (set! g$111$23202 g$111$13646) (set! g$111$23203 g$111$13644) (set! g$111$23204 g$111$13642) (set! g$111$23205 g$111$13640) (set! g$111$23206 g$111$13638) (set! g$111$23207 g$111$13636) (set! g$111$23208 g$111$13634) (set! g$111$23209 g$111$13632) (set! g$111$23210 g$111$13630) (set! g$111$23211 g$111$13628) (set! g$111$23212 g$111$13626) (set! g$111$23213 g$111$13624) (set! g$111$23214 g$111$13622) (set! g$111$23215 g$111$13620) (set! g$111$23216 g$111$13618) (set! g$111$23217 g$111$13616) (set! g$111$23218 g$111$13614) (set! g$111$23219 g$111$13612) (set! g$111$23220 g$111$13610) (set! g$111$23221 g$111$13608) (set! g$111$23222 g$111$13606) (set! g$111$23223 g$111$13604) (set! g$111$23224 g$111$13602) (set! g$111$23225 g$111$13600) (set! g$111$23226 g$111$13598) (set! g$111$23227 g$111$13596) (set! g$111$23228 g$111$13594) (set! g$111$23229 g$111$13592) (set! g$111$23230 g$111$13590) (set! g$111$23231 g$111$13588) (set! g$111$23232 g$111$13586) (set! g$111$23233 g$111$13584) (set! g$111$23234 g$111$13582) (set! g$111$23235 g$111$13580) (set! g$111$23236 g$111$13578) (set! g$111$23237 g$111$13576) (set! g$111$23238 g$111$13574) (set! g$111$23239 g$111$13572) (set! g$111$23240 g$111$13570) (set! g$111$23241 g$111$13568) (set! g$111$23242 g$111$13566) (set! g$111$23243 g$111$13564) (set! g$111$23244 g$111$13562) (set! g$111$23245 g$111$13560) (set! g$111$23246 g$111$13558) (set! g$111$23247 g$111$13556) (set! g$111$23248 g$111$13554) (set! g$111$23249 g$111$13552) (set! g$111$23250 g$111$13550) (set! g$111$23251 g$111$13548) (set! g$111$23252 g$111$13546) (set! g$111$23253 g$111$13544) (set! g$111$23254 g$111$13542) (set! g$111$23255 g$111$13540) (set! g$111$23256 g$111$13538) (set! g$111$23257 g$111$13536) (set! g$111$23258 g$111$13534) (set! g$111$23259 g$111$13532) (set! g$111$23260 g$111$13530) (set! g$111$23261 g$111$13528) (set! g$111$23262 g$111$13526) (set! g$111$23263 g$111$13524) (set! g$111$23264 g$111$13522) (set! g$111$23265 g$111$13520) (set! g$111$23266 g$111$13518) (set! g$111$23267 g$111$13516) (set! g$111$23268 g$111$13514) (set! g$111$23269 g$111$13512) (set! g$111$23270 g$111$13510) (set! g$111$23271 g$111$13508) (set! g$111$23272 g$111$13506) (set! g$111$23273 g$111$13504) (set! g$111$23274 g$111$13502) (set! g$111$23275 g$111$13500) (set! g$111$23276 g$111$13498) (set! g$111$23277 g$111$13496) (set! g$111$23278 g$111$13494) (set! g$111$23279 g$111$13492) (set! g$111$23280 g$111$13490) (set! g$111$23281 g$111$13488) (set! g$111$23282 g$111$13486) (set! g$111$23283 g$111$13484) (set! g$111$23284 g$111$13482) (set! g$111$23285 g$111$13480) (set! g$111$23286 g$111$13478) (set! g$111$23287 g$111$13476) (set! g$111$23288 g$111$13474) (set! g$111$23290 g$111$13275) (set! g$111$23291 g$111$13273) (set! g$111$23292 g$111$13271) (set! g$111$23294 g$111$13257) (set! g$111$23295 g$111$13255) (set! g$111$23296 g$111$13253) (set! g$111$23297 g$111$13251) (set! g$111$23298 g$111$13249) (set! g$111$23299 g$111$13247) (set! g$111$23300 g$111$13245) (set! g$111$23301 g$111$13243) (set! g$111$23302 g$111$13241) (set! g$111$23303 g$111$13239) (set! g$111$23304 g$111$13237) (set! g$111$23305 g$111$13235) (set! g$111$23306 g$111$13233) (set! g$111$23307 g$111$13231) (set! g$111$23308 g$111$13229) (set! g$111$23309 g$111$13227) (set! g$111$23310 g$111$13225) (set! g$111$23311 g$111$13223) (set! g$111$23312 g$111$13221) (set! g$111$23313 g$111$13219) (set! g$111$23314 g$111$13217) (set! g$111$23315 g$111$13215) (set! g$111$23316 g$111$13213) (set! g$111$23317 g$111$13211) (set! g$111$23318 g$111$13209) (set! g$111$23319 g$111$13207) (set! g$111$23320 g$111$13205) (set! g$111$23321 g$111$13203) (set! g$111$23322 g$111$13201) (set! g$111$23323 g$111$13199) (set! g$111$23324 g$111$13197) (set! g$111$23325 g$111$13195) (set! g$111$23326 g$111$13193) (set! g$111$23327 g$111$13191) (set! g$111$23328 g$111$13189) (set! g$111$23329 g$111$13187) (set! g$111$23330 g$111$13185) (set! g$111$23331 g$111$13183) (set! g$111$23332 g$111$13181) (set! g$111$23333 g$111$13179) (set! g$111$23334 g$111$13177) (set! g$111$23335 g$111$13175) (set! g$111$23336 g$111$13172) (set! g$111$23337 g$111$13170) (set! g$111$23338 g$111$13168) (set! g$111$23339 g$111$13166) (set! g$111$23340 g$111$13164) (set! g$111$23341 g$111$13162) (set! g$111$23342 g$111$13160) (set! g$111$23343 g$111$13158) (set! g$111$23344 g$111$13156) (set! g$111$23345 g$111$13154) (set! g$111$23346 g$111$13152) (set! g$111$23347 g$111$13150) (set! g$111$23348 g$111$13148) (set! g$111$23349 g$111$13146) (set! g$111$23350 g$111$13144) (set! g$111$23351 g$111$13142) (set! g$111$23352 g$111$13139) (set! g$111$23353 g$111$13137) (set! g$111$23354 g$111$13135) (set! g$111$23355 g$111$13133) (set! g$111$23356 g$111$13131) (set! g$111$23358 g$111$13126) (set! g$111$23359 g$111$13124) (g$111$12842 g$111$13683)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (g$111$12396 (lambda (g$111$24122) ((lambda (g$111$24124) (if g$111$24124 (cdr g$111$24124) '#f)) (assq g$111$24122 '((syntax-error . g$111$23175) (syntax-dispatch . g$111$23241) (make-variable-transformer . g$111$23291) (identifier? . g$111$23174) (generate-temporaries . g$111$23178) (free-identifier=? . g$111$23177) (syntax->datum . g$111$23172) (datum->syntax . g$111$23173) (bound-identifier=? . g$111$23176) (null-environment . g$111$23188) (eval . g$111$23185) (environment . g$111$23189)))))) (g$111$12834 'g$111$24089 '(ikarus interaction) '() '() '() '() '() '() values values '#t) (g$111$12834 'g$111$24090 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . g$111$23426) (unquote . g$111$23425) (delay . g$111$23418) (or . g$111$23416) (and . g$111$23415) (do . g$111$23414) (cond . g$111$23413) (let* . g$111$23412) (let . g$111$23411) (quasiquote . g$111$23407) (syntax-rules . g$111$23406) (case . g$111$23400) (if . g$111$23396) (letrec . g$111$23394) (lambda . g$111$23391) (quote . g$111$23388) (letrec-syntax . g$111$23386) (let-syntax . g$111$23385) (set! . g$111$23384) (begin . g$111$23382) (define-syntax . g$111$23380) (define . g$111$23379)) '() values values '#t) (g$111$12834 'g$111$24091 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . g$111$24071) (string-ci>=? . g$111$24070) (string-ci=? . g$111$24069) (string-ci<? . g$111$24068) (string-ci<=? . g$111$24067) (char-whitespace? . g$111$24066) (char-upper-case? . g$111$24065) (char-numeric? . g$111$24063) (char-lower-case? . g$111$24062) (char-upcase . g$111$24060) (char-downcase . g$111$24057) (char-ci>? . g$111$24056) (char-ci>=? . g$111$24055) (char-ci=? . g$111$24054) (char-ci<? . g$111$24053) (char-ci<=? . g$111$24052) (char-alphabetic? . g$111$24051) (call-with-output-file . g$111$24007) (call-with-input-file . g$111$24006) (write-char . g$111$24005) (write . g$111$24004) (with-output-to-file . g$111$24003) (with-input-from-file . g$111$24002) (read-char . g$111$24001) (read . g$111$24000) (peek-char . g$111$23999) (open-output-file . g$111$23998) (open-input-file . g$111$23997) (newline . g$111$23996) (display . g$111$23995) (close-output-port . g$111$23994) (close-input-port . g$111$23993) (eof-object . g$111$23991) (current-output-port . g$111$23989) (current-input-port . g$111$23988) (output-port? . g$111$23987) (input-port? . g$111$23986) (scheme-report-environment . g$111$23901) (quotient . g$111$23900) (null-environment . g$111$13676) (remainder . g$111$23899) (modulo . g$111$23898) (inexact->exact . g$111$23897) (force . g$111$23896) (exact->inexact . g$111$23895) (string-fill! . g$111$23892) (string-set! . g$111$23891) (set-cdr! . g$111$23890) (set-car! . g$111$23889) (memv . g$111$23883) (memq . g$111$23882) (member . g$111$23880) (assv . g$111$23872) (assq . g$111$23871) (assoc . g$111$23869) (eval . g$111$13682) (zero? . g$111$23638) (vector? . g$111$23637) (vector-set! . g$111$23636) (vector-ref . g$111$23635) (vector-length . g$111$23633) (vector-fill! . g$111$23631) (vector->list . g$111$23630) (vector . g$111$23629) (values . g$111$23628) (truncate . g$111$23627) (tan . g$111$23626) (symbol? . g$111$23625) (symbol->string . g$111$23623) (substring . g$111$23622) (string? . g$111$23621) (string>? . g$111$23620) (string>=? . g$111$23619) (string=? . g$111$23618) (string<? . g$111$23617) (string<=? . g$111$23616) (string-ref . g$111$23615) (string-length . g$111$23614) (string-copy . g$111$23612) (string-append . g$111$23611) (string->symbol . g$111$23610) (string->number . g$111$23609) (string->list . g$111$23608) (string . g$111$23607) (sqrt . g$111$23606) (sin . g$111$23605) (round . g$111$23604) (reverse . g$111$23603) (real? . g$111$23602) (real-part . g$111$23600) (rationalize . g$111$23599) (rational? . g$111$23598) (procedure? . g$111$23596) (positive? . g$111$23595) (pair? . g$111$23594) (odd? . g$111$23593) (numerator . g$111$23592) (number? . g$111$23591) (number->string . g$111$23590) (not . g$111$23588) (negative? . g$111$23587) (min . g$111$23585) (max . g$111$23584) (map . g$111$23583) (make-vector . g$111$23582) (make-string . g$111$23581) (make-rectangular . g$111$23580) (make-polar . g$111$23579) (magnitude . g$111$23578) (log . g$111$23577) (list? . g$111$23576) (list-tail . g$111$23575) (list-ref . g$111$23574) (list->vector . g$111$23573) (list->string . g$111$23572) (list . g$111$23571) (length . g$111$23570) (lcm . g$111$23569) (integer? . g$111$23568) (integer->char . g$111$23566) (inexact? . g$111$23564) (imag-part . g$111$23562) (gcd . g$111$23561) (for-each . g$111$23560) (floor . g$111$23559) (expt . g$111$23557) (exp . g$111$23556) (exact? . g$111$23555) (even? . g$111$23552) (eqv? . g$111$23550) (equal? . g$111$23549) (eq? . g$111$23548) (dynamic-wind . g$111$23547) (denominator . g$111$23540) (cos . g$111$23539) (cons . g$111$23538) (complex? . g$111$23537) (char? . g$111$23536) (char>? . g$111$23535) (char>=? . g$111$23534) (char=? . g$111$23533) (char<? . g$111$23532) (char<=? . g$111$23531) (char->integer . g$111$23530) (ceiling . g$111$23529) (call-with-values . g$111$23528) (call-with-current-continuation . g$111$23526) (cddddr . g$111$23525) (cdddar . g$111$23524) (cddadr . g$111$23523) (cddaar . g$111$23522) (cdaddr . g$111$23521) (cdadar . g$111$23520) (cdaadr . g$111$23519) (cdaaar . g$111$23518) (cadddr . g$111$23517) (caddar . g$111$23516) (cadadr . g$111$23515) (cadaar . g$111$23514) (caaddr . g$111$23513) (caadar . g$111$23512) (caaadr . g$111$23511) (caaaar . g$111$23510) (cdddr . g$111$23509) (cddar . g$111$23508) (cdadr . g$111$23507) (cdaar . g$111$23506) (caddr . g$111$23505) (cadar . g$111$23504) (caadr . g$111$23503) (caaar . g$111$23502) (cddr . g$111$23501) (cdar . g$111$23500) (cadr . g$111$23499) (caar . g$111$23498) (cdr . g$111$23497) (car . g$111$23496) (boolean? . g$111$23495) (atan . g$111$23493) (asin . g$111$23491) (apply . g$111$23490) (append . g$111$23489) (angle . g$111$23488) (acos . g$111$23487) (abs . g$111$23486) (/ . g$111$23485) (* . g$111$23484) (- . g$111$23483) (+ . g$111$23482) (>= . g$111$23481) (> . g$111$23480) (= . g$111$23479) (<= . g$111$23478) (< . g$111$23477) (unquote-splicing . g$111$23426) (unquote . g$111$23425) (delay . g$111$23418) (or . g$111$23416) (and . g$111$23415) (do . g$111$23414) (cond . g$111$23413) (let* . g$111$23412) (let . g$111$23411) (quasiquote . g$111$23407) (syntax-rules . g$111$23406) (case . g$111$23400) (if . g$111$23396) (letrec . g$111$23394) (lambda . g$111$23391) (quote . g$111$23388) (letrec-syntax . g$111$23386) (let-syntax . g$111$23385) (set! . g$111$23384) (begin . g$111$23382) (define-syntax . g$111$23380) (define . g$111$23379)) '() values values '#t) (g$111$12834 'g$111$24092 '(psyntax modules) '() '() '() '() '((module . g$111$23381)) '() values values '#t) (g$111$12834 'g$111$24093 '(chez parameters) '() '() '() '() '() '() values values '#t) (g$111$12834 'g$111$24094 '(rnrs) '(6) '() '() '() '((string-upcase . g$111$24079) (string-titlecase . g$111$24078) (string-normalize-nfkd . g$111$24077) (string-normalize-nfkc . g$111$24076) (string-normalize-nfd . g$111$24075) (string-normalize-nfc . g$111$24074) (string-foldcase . g$111$24073) (string-downcase . g$111$24072) (string-ci>? . g$111$24071) (string-ci>=? . g$111$24070) (string-ci=? . g$111$24069) (string-ci<? . g$111$24068) (string-ci<=? . g$111$24067) (char-whitespace? . g$111$24066) (char-upper-case? . g$111$24065) (char-title-case? . g$111$24064) (char-numeric? . g$111$24063) (char-lower-case? . g$111$24062) (char-general-category . g$111$24061) (char-upcase . g$111$24060) (char-titlecase . g$111$24059) (char-foldcase . g$111$24058) (char-downcase . g$111$24057) (char-ci>? . g$111$24056) (char-ci>=? . g$111$24055) (char-ci=? . g$111$24054) (char-ci<? . g$111$24053) (char-ci<=? . g$111$24052) (char-alphabetic? . g$111$24051) (make-variable-transformer . g$111$13274) (identifier? . g$111$13704) (generate-temporaries . g$111$13696) (free-identifier=? . g$111$13698) (syntax->datum . g$111$13708) (datum->syntax . g$111$13706) (bound-identifier=? . g$111$13700) (record-type-descriptor? . g$111$24050) (record-predicate . g$111$24049) (record-mutator . g$111$24048) (record-constructor . g$111$24047) (record-accessor . g$111$24046) (make-record-type-descriptor . g$111$24045) (make-record-constructor-descriptor . g$111$24044) (record? . g$111$24043) (record-type-uid . g$111$24042) (record-type-sealed? . g$111$24041) (record-type-parent . g$111$24040) (record-type-opaque? . g$111$24039) (record-type-name . g$111$24038) (record-type-generative? . g$111$24037) (record-type-field-names . g$111$24036) (record-rtd . g$111$24035) (record-field-mutable? . g$111$24034) (delete-file . g$111$24033) (file-exists? . g$111$24032) (vector-sort! . g$111$24031) (vector-sort . g$111$24030) (list-sort . g$111$24029) (symbol-hash . g$111$24028) (string-ci-hash . g$111$24027) (string-hash . g$111$24026) (equal-hash . g$111$24025) (hashtable-equivalence-function . g$111$24024) (make-hashtable . g$111$24023) (hashtable-hash-function . g$111$24022) (make-eqv-hashtable . g$111$24021) (make-eq-hashtable . g$111$24020) (hashtable? . g$111$24019) (hashtable-update! . g$111$24018) (hashtable-size . g$111$24017) (hashtable-set! . g$111$24016) (hashtable-ref . g$111$24015) (hashtable-mutable? . g$111$24014) (hashtable-keys . g$111$24013) (hashtable-entries . g$111$24012) (hashtable-delete! . g$111$24011) (hashtable-copy . g$111$24010) (hashtable-contains? . g$111$24009) (hashtable-clear! . g$111$24008) (call-with-output-file . g$111$24007) (call-with-input-file . g$111$24006) (write-char . g$111$24005) (write . g$111$24004) (with-output-to-file . g$111$24003) (with-input-from-file . g$111$24002) (read-char . g$111$24001) (read . g$111$24000) (peek-char . g$111$23999) (open-output-file . g$111$23998) (open-input-file . g$111$23997) (newline . g$111$23996) (display . g$111$23995) (close-output-port . g$111$23994) (close-input-port . g$111$23993) (eof-object? . g$111$23992) (eof-object . g$111$23991) (current-error-port . g$111$23990) (current-output-port . g$111$23989) (current-input-port . g$111$23988) (output-port? . g$111$23987) (input-port? . g$111$23986) (utf-8-codec . g$111$23985) (utf-16-codec . g$111$23984) (transcoder-error-handling-mode . g$111$23983) (transcoder-eol-style . g$111$23982) (transcoder-codec . g$111$23981) (transcoded-port . g$111$23980) (textual-port? . g$111$23979) (string->bytevector . g$111$23978) (standard-output-port . g$111$23977) (standard-input-port . g$111$23976) (standard-error-port . g$111$23975) (set-port-position! . g$111$23974) (put-u8 . g$111$23973) (put-string . g$111$23972) (put-datum . g$111$23971) (put-char . g$111$23970) (put-bytevector . g$111$23969) (port? . g$111$23968) (port-transcoder . g$111$23967) (port-position . g$111$23966) (port-has-set-port-position!? . g$111$23965) (port-has-port-position? . g$111$23964) (port-eof? . g$111$23963) (output-port-buffer-mode . g$111$23962) (open-string-output-port . g$111$23961) (open-string-input-port . g$111$23960) (open-file-output-port . g$111$23959) (open-file-input/output-port . g$111$23958) (open-file-input-port . g$111$23957) (open-bytevector-output-port . g$111$23956) (open-bytevector-input-port . g$111$23955) (native-transcoder . g$111$23954) (native-eol-style . g$111$23953) (make-transcoder . g$111$23952) (latin-1-codec . g$111$23951) (make-i/o-write-error . g$111$23950) (make-i/o-read-error . g$111$23949) (make-i/o-port-error . g$111$23948) (make-i/o-invalid-position-error . g$111$23947) (make-i/o-filename-error . g$111$23946) (make-i/o-file-protection-error . g$111$23945) (make-i/o-file-is-read-only-error . g$111$23944) (make-i/o-file-does-not-exist-error . g$111$23943) (make-i/o-file-already-exists-error . g$111$23942) (make-i/o-error . g$111$23941) (make-i/o-encoding-error . g$111$23940) (make-i/o-decoding-error . g$111$23939) (make-custom-textual-output-port . g$111$23938) (make-custom-textual-input/output-port . g$111$23937) (make-custom-textual-input-port . g$111$23936) (make-custom-binary-output-port . g$111$23935) (make-custom-binary-input/output-port . g$111$23934) (make-custom-binary-input-port . g$111$23933) (make-bytevector . g$111$23932) (lookahead-u8 . g$111$23931) (lookahead-char . g$111$23930) (i/o-write-error? . g$111$23929) (i/o-read-error? . g$111$23928) (i/o-port-error? . g$111$23927) (i/o-invalid-position-error? . g$111$23926) (i/o-filename-error? . g$111$23925) (i/o-file-protection-error? . g$111$23924) (i/o-file-is-read-only-error? . g$111$23923) (i/o-file-does-not-exist-error? . g$111$23922) (i/o-file-already-exists-error? . g$111$23921) (i/o-error? . g$111$23920) (i/o-error-port . g$111$23919) (i/o-error-filename . g$111$23918) (i/o-encoding-error? . g$111$23917) (i/o-encoding-error-char . g$111$23916) (i/o-decoding-error? . g$111$23915) (get-u8 . g$111$23914) (get-string-n! . g$111$23913) (get-string-n . g$111$23912) (get-string-all . g$111$23911) (get-line . g$111$23910) (get-datum . g$111$23909) (get-char . g$111$23908) (get-bytevector-some . g$111$23907) (get-bytevector-n! . g$111$23906) (get-bytevector-n . g$111$23905) (get-bytevector-all . g$111$23904) (flush-output-port . g$111$23903) (close-port . g$111$23902) (exit . g$111$23894) (command-line . g$111$23893) (remove . g$111$23888) (remv . g$111$23887) (remp . g$111$23886) (remq . g$111$23885) (partition . g$111$23884) (memv . g$111$23883) (memq . g$111$23882) (memp . g$111$23881) (member . g$111$23880) (exists . g$111$23879) (for-all . g$111$23878) (fold-right . g$111$23877) (fold-left . g$111$23876) (find . g$111$23875) (filter . g$111$23874) (cons* . g$111$23873) (assv . g$111$23872) (assq . g$111$23871) (assp . g$111$23870) (assoc . g$111$23869) (call-with-string-output-port . g$111$23868) (call-with-port . g$111$23867) (call-with-bytevector-output-port . g$111$23866) (bytevector->string . g$111$23865) (buffer-mode? . g$111$23864) (binary-port? . g$111$23863) (with-exception-handler . g$111$23862) (raise-continuable . g$111$23861) (raise . g$111$23860) (make-enumeration . g$111$23859) (enum-set=? . g$111$23858) (enum-set-universe . g$111$23857) (enum-set-union . g$111$23856) (enum-set-subset? . g$111$23855) (enum-set-projection . g$111$23854) (enum-set-member? . g$111$23853) (enum-set-intersection . g$111$23852) (enum-set-indexer . g$111$23851) (enum-set-difference . g$111$23850) (enum-set-constructor . g$111$23849) (enum-set-complement . g$111$23848) (enum-set->list . g$111$23847) (who-condition? . g$111$23846) (warning? . g$111$23845) (violation? . g$111$23844) (undefined-violation? . g$111$23843) (syntax-violation? . g$111$23842) (syntax-violation-subform . g$111$23841) (syntax-violation-form . g$111$23840) (syntax-violation . g$111$23839) (simple-conditions . g$111$23838) (serious-condition? . g$111$23837) (non-continuable-violation? . g$111$23836) (&non-continuable . g$111$23835) (message-condition? . g$111$23834) (make-who-condition . g$111$23833) (make-warning . g$111$23832) (make-violation . g$111$23831) (make-undefined-violation . g$111$23830) (make-syntax-violation . g$111$23829) (make-serious-condition . g$111$23828) (make-non-continuable-violation . g$111$23827) (make-message-condition . g$111$23826) (make-lexical-violation . g$111$23825) (make-irritants-condition . g$111$23824) (make-implementation-restriction-violation . g$111$23823) (make-error . g$111$23822) (make-assertion-violation . g$111$23821) (lexical-violation? . g$111$23820) (irritants-condition? . g$111$23819) (implementation-restriction-violation? . g$111$23818) (&implementation-restriction . g$111$23817) (error? . g$111$23816) (condition-who . g$111$23815) (condition-predicate . g$111$23814) (condition-message . g$111$23813) (condition-irritants . g$111$23812) (condition-accessor . g$111$23811) (condition . g$111$23810) (assertion-violation? . g$111$23809) (condition? . g$111$23808) (utf32->string . g$111$23807) (utf16->string . g$111$23806) (utf8->string . g$111$23805) (uint-list->bytevector . g$111$23804) (u8-list->bytevector . g$111$23803) (string->utf8 . g$111$23802) (string->utf32 . g$111$23801) (string->utf16 . g$111$23800) (sint-list->bytevector . g$111$23799) (native-endianness . g$111$23798) (bytevector? . g$111$23797) (bytevector=? . g$111$23796) (bytevector-uint-set! . g$111$23795) (bytevector-uint-ref . g$111$23794) (bytevector-u8-set! . g$111$23793) (bytevector-u8-ref . g$111$23792) (bytevector-u64-set! . g$111$23791) (bytevector-u64-ref . g$111$23790) (bytevector-u64-native-set! . g$111$23789) (bytevector-u64-native-ref . g$111$23788) (bytevector-u32-set! . g$111$23787) (bytevector-u32-ref . g$111$23786) (bytevector-u32-native-set! . g$111$23785) (bytevector-u32-native-ref . g$111$23784) (bytevector-u16-set! . g$111$23783) (bytevector-u16-ref . g$111$23782) (bytevector-u16-native-set! . g$111$23781) (bytevector-u16-native-ref . g$111$23780) (bytevector-sint-set! . g$111$23779) (bytevector-sint-ref . g$111$23778) (bytevector-s8-set! . g$111$23777) (bytevector-s8-ref . g$111$23776) (bytevector-s64-set! . g$111$23775) (bytevector-s64-ref . g$111$23774) (bytevector-s64-native-set! . g$111$23773) (bytevector-s64-native-ref . g$111$23772) (bytevector-s32-set! . g$111$23771) (bytevector-s32-ref . g$111$23770) (bytevector-s32-native-set! . g$111$23769) (bytevector-s32-native-ref . g$111$23768) (bytevector-s16-set! . g$111$23767) (bytevector-s16-ref . g$111$23766) (bytevector-s16-native-set! . g$111$23765) (bytevector-s16-native-ref . g$111$23764) (bytevector-length . g$111$23763) (bytevector-ieee-single-ref . g$111$23762) (bytevector-ieee-single-native-set! . g$111$23761) (bytevector-ieee-single-native-ref . g$111$23760) (bytevector-ieee-double-ref . g$111$23759) (bytevector-ieee-double-native-set! . g$111$23758) (bytevector-ieee-double-native-ref . g$111$23757) (bytevector-fill! . g$111$23756) (bytevector-copy! . g$111$23755) (bytevector-copy . g$111$23754) (bytevector->uint-list . g$111$23753) (bytevector->u8-list . g$111$23752) (bytevector->sint-list . g$111$23751) (no-nans-violation? . g$111$23750) (no-infinities-violation? . g$111$23749) (make-no-nans-violation . g$111$23748) (make-no-infinities-violation . g$111$23747) (real->flonum . g$111$23746) (flzero? . g$111$23745) (fltruncate . g$111$23744) (fltan . g$111$23743) (flsqrt . g$111$23742) (flsin . g$111$23741) (flround . g$111$23740) (flpositive? . g$111$23739) (flonum? . g$111$23738) (flodd? . g$111$23737) (flnumerator . g$111$23736) (flnegative? . g$111$23735) (flnan? . g$111$23734) (flmod0 . g$111$23733) (flmod . g$111$23732) (flmin . g$111$23731) (flmax . g$111$23730) (fllog . g$111$23729) (flinteger? . g$111$23728) (flinfinite? . g$111$23727) (flfloor . g$111$23726) (flfinite? . g$111$23725) (flexpt . g$111$23724) (flexp . g$111$23723) (fleven? . g$111$23722) (fldiv0-and-mod0 . g$111$23721) (fldiv0 . g$111$23720) (fldiv-and-mod . g$111$23719) (fldiv . g$111$23718) (fldenominator . g$111$23717) (flcos . g$111$23716) (flceiling . g$111$23715) (flatan . g$111$23714) (flasin . g$111$23713) (flacos . g$111$23712) (flabs . g$111$23711) (fl>? . g$111$23710) (fl>=? . g$111$23709) (fl=? . g$111$23708) (fl<? . g$111$23707) (fl<=? . g$111$23706) (fl/ . g$111$23705) (fl- . g$111$23704) (fl+ . g$111$23703) (fl* . g$111$23702) (fixnum->flonum . g$111$23701) (fxzero? . g$111$23700) (fxxor . g$111$23699) (fxrotate-bit-field . g$111$23698) (fxreverse-bit-field . g$111$23697) (fxpositive? . g$111$23696) (fxodd? . g$111$23695) (fxnot . g$111$23694) (fxnegative? . g$111$23693) (fxmod0 . g$111$23692) (fxmod . g$111$23691) (fxmin . g$111$23690) (fxmax . g$111$23689) (fxlength . g$111$23688) (fxior . g$111$23687) (fxif . g$111$23686) (fxfirst-bit-set . g$111$23685) (fxeven? . g$111$23684) (fxdiv0-and-mod0 . g$111$23683) (fxdiv0 . g$111$23682) (fxdiv-and-mod . g$111$23681) (fxdiv . g$111$23680) (fxcopy-bit-field . g$111$23679) (fxcopy-bit . g$111$23678) (fxbit-set? . g$111$23677) (fxbit-field . g$111$23676) (fxbit-count . g$111$23675) (fxarithmetic-shift-right . g$111$23674) (fxarithmetic-shift-left . g$111$23673) (fxarithmetic-shift . g$111$23672) (fxand . g$111$23671) (fx>? . g$111$23670) (fx>=? . g$111$23669) (fx=? . g$111$23668) (fx<? . g$111$23667) (fx<=? . g$111$23666) (fx-/carry . g$111$23665) (fx- . g$111$23664) (fx+/carry . g$111$23663) (fx+ . g$111$23662) (fx*/carry . g$111$23661) (fx* . g$111$23660) (greatest-fixnum . g$111$23659) (least-fixnum . g$111$23658) (fixnum-width . g$111$23657) (fixnum? . g$111$23656) (bitwise-rotate-bit-field . g$111$23655) (bitwise-reverse-bit-field . g$111$23654) (bitwise-length . g$111$23653) (bitwise-if . g$111$23652) (bitwise-first-bit-set . g$111$23651) (bitwise-copy-bit-field . g$111$23650) (bitwise-copy-bit . g$111$23649) (bitwise-bit-set? . g$111$23648) (bitwise-bit-field . g$111$23647) (bitwise-bit-count . g$111$23646) (bitwise-xor . g$111$23645) (bitwise-ior . g$111$23644) (bitwise-and . g$111$23643) (bitwise-not . g$111$23642) (bitwise-arithmetic-shift-right . g$111$23641) (bitwise-arithmetic-shift-left . g$111$23640) (bitwise-arithmetic-shift . g$111$23639) (zero? . g$111$23638) (vector? . g$111$23637) (vector-set! . g$111$23636) (vector-ref . g$111$23635) (vector-map . g$111$23634) (vector-length . g$111$23633) (vector-for-each . g$111$23632) (vector-fill! . g$111$23631) (vector->list . g$111$23630) (vector . g$111$23629) (values . g$111$23628) (truncate . g$111$23627) (tan . g$111$23626) (symbol? . g$111$23625) (symbol=? . g$111$23624) (symbol->string . g$111$23623) (substring . g$111$23622) (string? . g$111$23621) (string>? . g$111$23620) (string>=? . g$111$23619) (string=? . g$111$23618) (string<? . g$111$23617) (string<=? . g$111$23616) (string-ref . g$111$23615) (string-length . g$111$23614) (string-for-each . g$111$23613) (string-copy . g$111$23612) (string-append . g$111$23611) (string->symbol . g$111$23610) (string->number . g$111$23609) (string->list . g$111$23608) (string . g$111$23607) (sqrt . g$111$23606) (sin . g$111$23605) (round . g$111$23604) (reverse . g$111$23603) (real? . g$111$23602) (real-valued? . g$111$23601) (real-part . g$111$23600) (rationalize . g$111$23599) (rational? . g$111$23598) (rational-valued? . g$111$23597) (procedure? . g$111$23596) (positive? . g$111$23595) (pair? . g$111$23594) (odd? . g$111$23593) (numerator . g$111$23592) (number? . g$111$23591) (number->string . g$111$23590) (null? . g$111$23589) (not . g$111$23588) (negative? . g$111$23587) (nan? . g$111$23586) (min . g$111$23585) (max . g$111$23584) (map . g$111$23583) (make-vector . g$111$23582) (make-string . g$111$23581) (make-rectangular . g$111$23580) (make-polar . g$111$23579) (magnitude . g$111$23578) (log . g$111$23577) (list? . g$111$23576) (list-tail . g$111$23575) (list-ref . g$111$23574) (list->vector . g$111$23573) (list->string . g$111$23572) (list . g$111$23571) (length . g$111$23570) (lcm . g$111$23569) (integer? . g$111$23568) (integer-valued? . g$111$23567) (integer->char . g$111$23566) (infinite? . g$111$23565) (inexact? . g$111$23564) (inexact . g$111$23563) (imag-part . g$111$23562) (gcd . g$111$23561) (for-each . g$111$23560) (floor . g$111$23559) (finite? . g$111$23558) (expt . g$111$23557) (exp . g$111$23556) (exact? . g$111$23555) (exact-integer-sqrt . g$111$23554) (exact . g$111$23553) (even? . g$111$23552) (error . g$111$23551) (eqv? . g$111$23550) (equal? . g$111$23549) (eq? . g$111$23548) (dynamic-wind . g$111$23547) (div0-and-mod0 . g$111$23546) (mod0 . g$111$23545) (div0 . g$111$23544) (div-and-mod . g$111$23543) (mod . g$111$23542) (div . g$111$23541) (denominator . g$111$23540) (cos . g$111$23539) (cons . g$111$23538) (complex? . g$111$23537) (char? . g$111$23536) (char>? . g$111$23535) (char>=? . g$111$23534) (char=? . g$111$23533) (char<? . g$111$23532) (char<=? . g$111$23531) (char->integer . g$111$23530) (ceiling . g$111$23529) (call-with-values . g$111$23528) (call/cc . g$111$23527) (call-with-current-continuation . g$111$23526) (cddddr . g$111$23525) (cdddar . g$111$23524) (cddadr . g$111$23523) (cddaar . g$111$23522) (cdaddr . g$111$23521) (cdadar . g$111$23520) (cdaadr . g$111$23519) (cdaaar . g$111$23518) (cadddr . g$111$23517) (caddar . g$111$23516) (cadadr . g$111$23515) (cadaar . g$111$23514) (caaddr . g$111$23513) (caadar . g$111$23512) (caaadr . g$111$23511) (caaaar . g$111$23510) (cdddr . g$111$23509) (cddar . g$111$23508) (cdadr . g$111$23507) (cdaar . g$111$23506) (caddr . g$111$23505) (cadar . g$111$23504) (caadr . g$111$23503) (caaar . g$111$23502) (cddr . g$111$23501) (cdar . g$111$23500) (cadr . g$111$23499) (caar . g$111$23498) (cdr . g$111$23497) (car . g$111$23496) (boolean? . g$111$23495) (boolean=? . g$111$23494) (atan . g$111$23493) (assertion-violation . g$111$23492) (asin . g$111$23491) (apply . g$111$23490) (append . g$111$23489) (angle . g$111$23488) (acos . g$111$23487) (abs . g$111$23486) (/ . g$111$23485) (* . g$111$23484) (- . g$111$23483) (+ . g$111$23482) (>= . g$111$23481) (> . g$111$23480) (= . g$111$23479) (<= . g$111$23478) (< . g$111$23477) (let*-values . g$111$23476) (&no-nans . g$111$23475) (&no-infinities . g$111$23474) (&i/o-encoding . g$111$23473) (&i/o-decoding . g$111$23472) (&i/o-port . g$111$23471) (&i/o-file-does-not-exist . g$111$23470) (&i/o-file-already-exists . g$111$23469) (&i/o-file-is-read-only . g$111$23468) (&i/o-file-protection . g$111$23467) (&i/o-filename . g$111$23466) (&i/o-invalid-position . g$111$23465) (&i/o-write . g$111$23464) (&i/o-read . g$111$23463) (&i/o . g$111$23462) (&undefined . g$111$23461) (&syntax . g$111$23460) (&lexical . g$111$23459) (&who . g$111$23456) (&irritants . g$111$23455) (&assertion . g$111$23454) (&violation . g$111$23453) (&error . g$111$23452) (&serious . g$111$23451) (&warning . g$111$23450) (&message . g$111$23449) (&condition . g$111$23448) (define-condition-type . g$111$23447) (define-enumeration . g$111$23446) (define-record-type . g$111$23445) (parent-rtd . g$111$23444) (nongenerative . g$111$23443) (opaque . g$111$23442) (sealed . g$111$23441) (protocol . g$111$23440) (parent . g$111$23439) (immutable . g$111$23438) (mutable . g$111$23437) (fields . g$111$23436) (error-handling-mode . g$111$23435) (file-options . g$111$23434) (buffer-mode . g$111$23433) (eol-style . g$111$23432) (guard . g$111$23431) (unsyntax-splicing . g$111$23428) (unsyntax . g$111$23427) (unquote-splicing . g$111$23426) (unquote . g$111$23425) (_ . g$111$23424) (else . g$111$23423) (=> . g$111$23422) (|...| . g$111$23421) (assert . g$111$23420) (endianness . g$111$23419) (or . g$111$23416) (and . g$111$23415) (do . g$111$23414) (cond . g$111$23413) (let* . g$111$23412) (let . g$111$23411) (identifier-syntax . g$111$23410) (with-syntax . g$111$23409) (quasisyntax . g$111$23408) (quasiquote . g$111$23407) (syntax-rules . g$111$23406) (record-constructor-descriptor . g$111$23403) (record-type-descriptor . g$111$23402) (let-values . g$111$23401) (case . g$111$23400) (unless . g$111$23398) (when . g$111$23397) (if . g$111$23396) (letrec* . g$111$23395) (letrec . g$111$23394) (case-lambda . g$111$23392) (lambda . g$111$23391) (syntax . g$111$23390) (syntax-case . g$111$23389) (quote . g$111$23388) (letrec-syntax . g$111$23386) (let-syntax . g$111$23385) (set! . g$111$23384) (begin . g$111$23382) (define-syntax . g$111$23380) (define . g$111$23379)) '() values values '#t) (g$111$12834 'g$111$24095 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . g$111$23901) (quotient . g$111$23900) (null-environment . g$111$13676) (remainder . g$111$23899) (modulo . g$111$23898) (inexact->exact . g$111$23897) (force . g$111$23896) (exact->inexact . g$111$23895) (delay . g$111$23418)) '() values values '#t) (g$111$12834 'g$111$24096 '(rnrs control) '(6) '() '() '() '((do . g$111$23414) (unless . g$111$23398) (when . g$111$23397) (case-lambda . g$111$23392)) '() values values '#t) (g$111$12834 'g$111$24097 '(rnrs eval) '(6) '() '() '() '((eval . g$111$13682) (environment . g$111$13674)) '() values values '#t) (g$111$12834 'g$111$24098 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g$111$23890) (set-car! . g$111$23889)) '() values values '#t) (g$111$12834 'g$111$24099 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g$111$23892) (string-set! . g$111$23891)) '() values values '#t) (g$111$12834 'g$111$24100 '(rnrs programs) '(6) '() '() '() '((exit . g$111$23894) (command-line . g$111$23893)) '() values values '#t) (g$111$12834 'g$111$24101 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g$111$13274) (identifier? . g$111$13704) (generate-temporaries . g$111$13696) (free-identifier=? . g$111$13698) (syntax->datum . g$111$13708) (datum->syntax . g$111$13706) (bound-identifier=? . g$111$13700) (syntax-violation . g$111$23839) (unsyntax-splicing . g$111$23428) (unsyntax . g$111$23427) (_ . g$111$23424) (|...| . g$111$23421) (with-syntax . g$111$23409) (quasisyntax . g$111$23408) (syntax . g$111$23390) (syntax-case . g$111$23389)) '() values values '#t) (g$111$12834 'g$111$24102 '(rnrs files) '(6) '() '() '() '((delete-file . g$111$24033) (file-exists? . g$111$24032) (make-i/o-write-error . g$111$23950) (make-i/o-read-error . g$111$23949) (make-i/o-port-error . g$111$23948) (make-i/o-invalid-position-error . g$111$23947) (make-i/o-filename-error . g$111$23946) (make-i/o-file-protection-error . g$111$23945) (make-i/o-file-is-read-only-error . g$111$23944) (make-i/o-file-does-not-exist-error . g$111$23943) (make-i/o-file-already-exists-error . g$111$23942) (make-i/o-error . g$111$23941) (i/o-write-error? . g$111$23929) (i/o-read-error? . g$111$23928) (i/o-port-error? . g$111$23927) (i/o-invalid-position-error? . g$111$23926) (i/o-filename-error? . g$111$23925) (i/o-file-protection-error? . g$111$23924) (i/o-file-is-read-only-error? . g$111$23923) (i/o-file-does-not-exist-error? . g$111$23922) (i/o-file-already-exists-error? . g$111$23921) (i/o-error? . g$111$23920) (i/o-error-port . g$111$23919) (i/o-error-filename . g$111$23918) (&i/o-port . g$111$23471) (&i/o-file-does-not-exist . g$111$23470) (&i/o-file-already-exists . g$111$23469) (&i/o-file-is-read-only . g$111$23468) (&i/o-file-protection . g$111$23467) (&i/o-filename . g$111$23466) (&i/o-invalid-position . g$111$23465) (&i/o-write . g$111$23464) (&i/o-read . g$111$23463) (&i/o . g$111$23462)) '() values values '#t) (g$111$12834 'g$111$24103 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g$111$24031) (vector-sort . g$111$24030) (list-sort . g$111$24029)) '() values values '#t) (g$111$12834 'g$111$24104 '(rnrs base) '(6) '() '() '() '((zero? . g$111$23638) (vector? . g$111$23637) (vector-set! . g$111$23636) (vector-ref . g$111$23635) (vector-map . g$111$23634) (vector-length . g$111$23633) (vector-for-each . g$111$23632) (vector-fill! . g$111$23631) (vector->list . g$111$23630) (vector . g$111$23629) (values . g$111$23628) (truncate . g$111$23627) (tan . g$111$23626) (symbol? . g$111$23625) (symbol=? . g$111$23624) (symbol->string . g$111$23623) (substring . g$111$23622) (string? . g$111$23621) (string>? . g$111$23620) (string>=? . g$111$23619) (string=? . g$111$23618) (string<? . g$111$23617) (string<=? . g$111$23616) (string-ref . g$111$23615) (string-length . g$111$23614) (string-for-each . g$111$23613) (string-copy . g$111$23612) (string-append . g$111$23611) (string->symbol . g$111$23610) (string->number . g$111$23609) (string->list . g$111$23608) (string . g$111$23607) (sqrt . g$111$23606) (sin . g$111$23605) (round . g$111$23604) (reverse . g$111$23603) (real? . g$111$23602) (real-valued? . g$111$23601) (real-part . g$111$23600) (rationalize . g$111$23599) (rational? . g$111$23598) (rational-valued? . g$111$23597) (procedure? . g$111$23596) (positive? . g$111$23595) (pair? . g$111$23594) (odd? . g$111$23593) (numerator . g$111$23592) (number? . g$111$23591) (number->string . g$111$23590) (null? . g$111$23589) (not . g$111$23588) (negative? . g$111$23587) (nan? . g$111$23586) (min . g$111$23585) (max . g$111$23584) (map . g$111$23583) (make-vector . g$111$23582) (make-string . g$111$23581) (make-rectangular . g$111$23580) (make-polar . g$111$23579) (magnitude . g$111$23578) (log . g$111$23577) (list? . g$111$23576) (list-tail . g$111$23575) (list-ref . g$111$23574) (list->vector . g$111$23573) (list->string . g$111$23572) (list . g$111$23571) (length . g$111$23570) (lcm . g$111$23569) (integer? . g$111$23568) (integer-valued? . g$111$23567) (integer->char . g$111$23566) (infinite? . g$111$23565) (inexact? . g$111$23564) (inexact . g$111$23563) (imag-part . g$111$23562) (gcd . g$111$23561) (for-each . g$111$23560) (floor . g$111$23559) (finite? . g$111$23558) (expt . g$111$23557) (exp . g$111$23556) (exact? . g$111$23555) (exact-integer-sqrt . g$111$23554) (exact . g$111$23553) (even? . g$111$23552) (error . g$111$23551) (eqv? . g$111$23550) (equal? . g$111$23549) (eq? . g$111$23548) (dynamic-wind . g$111$23547) (div0-and-mod0 . g$111$23546) (mod0 . g$111$23545) (div0 . g$111$23544) (div-and-mod . g$111$23543) (mod . g$111$23542) (div . g$111$23541) (denominator . g$111$23540) (cos . g$111$23539) (cons . g$111$23538) (complex? . g$111$23537) (char? . g$111$23536) (char>? . g$111$23535) (char>=? . g$111$23534) (char=? . g$111$23533) (char<? . g$111$23532) (char<=? . g$111$23531) (char->integer . g$111$23530) (ceiling . g$111$23529) (call-with-values . g$111$23528) (call/cc . g$111$23527) (call-with-current-continuation . g$111$23526) (cddddr . g$111$23525) (cdddar . g$111$23524) (cddadr . g$111$23523) (cddaar . g$111$23522) (cdaddr . g$111$23521) (cdadar . g$111$23520) (cdaadr . g$111$23519) (cdaaar . g$111$23518) (cadddr . g$111$23517) (caddar . g$111$23516) (cadadr . g$111$23515) (cadaar . g$111$23514) (caaddr . g$111$23513) (caadar . g$111$23512) (caaadr . g$111$23511) (caaaar . g$111$23510) (cdddr . g$111$23509) (cddar . g$111$23508) (cdadr . g$111$23507) (cdaar . g$111$23506) (caddr . g$111$23505) (cadar . g$111$23504) (caadr . g$111$23503) (caaar . g$111$23502) (cddr . g$111$23501) (cdar . g$111$23500) (cadr . g$111$23499) (caar . g$111$23498) (cdr . g$111$23497) (car . g$111$23496) (boolean? . g$111$23495) (boolean=? . g$111$23494) (atan . g$111$23493) (assertion-violation . g$111$23492) (asin . g$111$23491) (apply . g$111$23490) (append . g$111$23489) (angle . g$111$23488) (acos . g$111$23487) (abs . g$111$23486) (/ . g$111$23485) (* . g$111$23484) (- . g$111$23483) (+ . g$111$23482) (>= . g$111$23481) (> . g$111$23480) (= . g$111$23479) (<= . g$111$23478) (< . g$111$23477) (let*-values . g$111$23476) (unquote-splicing . g$111$23426) (unquote . g$111$23425) (_ . g$111$23424) (else . g$111$23423) (=> . g$111$23422) (|...| . g$111$23421) (assert . g$111$23420) (or . g$111$23416) (and . g$111$23415) (cond . g$111$23413) (let* . g$111$23412) (let . g$111$23411) (identifier-syntax . g$111$23410) (quasiquote . g$111$23407) (syntax-rules . g$111$23406) (let-values . g$111$23401) (case . g$111$23400) (if . g$111$23396) (letrec* . g$111$23395) (letrec . g$111$23394) (lambda . g$111$23391) (quote . g$111$23388) (letrec-syntax . g$111$23386) (let-syntax . g$111$23385) (set! . g$111$23384) (begin . g$111$23382) (define-syntax . g$111$23380) (define . g$111$23379)) '() values values '#t) (g$111$12834 'g$111$24105 '(rnrs lists) '(6) '() '() '() '((remove . g$111$23888) (remv . g$111$23887) (remp . g$111$23886) (remq . g$111$23885) (partition . g$111$23884) (memv . g$111$23883) (memq . g$111$23882) (memp . g$111$23881) (member . g$111$23880) (exists . g$111$23879) (for-all . g$111$23878) (fold-right . g$111$23877) (fold-left . g$111$23876) (find . g$111$23875) (filter . g$111$23874) (cons* . g$111$23873) (assv . g$111$23872) (assq . g$111$23871) (assp . g$111$23870) (assoc . g$111$23869)) '() values values '#t) (g$111$12834 'g$111$24106 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . g$111$24007) (call-with-input-file . g$111$24006) (write-char . g$111$24005) (write . g$111$24004) (with-output-to-file . g$111$24003) (with-input-from-file . g$111$24002) (read-char . g$111$24001) (read . g$111$24000) (peek-char . g$111$23999) (open-output-file . g$111$23998) (open-input-file . g$111$23997) (newline . g$111$23996) (display . g$111$23995) (close-output-port . g$111$23994) (close-input-port . g$111$23993) (eof-object? . g$111$23992) (eof-object . g$111$23991) (current-error-port . g$111$23990) (current-output-port . g$111$23989) (current-input-port . g$111$23988) (output-port? . g$111$23987) (input-port? . g$111$23986) (make-i/o-write-error . g$111$23950) (make-i/o-read-error . g$111$23949) (make-i/o-port-error . g$111$23948) (make-i/o-invalid-position-error . g$111$23947) (make-i/o-filename-error . g$111$23946) (make-i/o-file-protection-error . g$111$23945) (make-i/o-file-is-read-only-error . g$111$23944) (make-i/o-file-does-not-exist-error . g$111$23943) (make-i/o-file-already-exists-error . g$111$23942) (make-i/o-error . g$111$23941) (i/o-write-error? . g$111$23929) (i/o-read-error? . g$111$23928) (i/o-port-error? . g$111$23927) (i/o-invalid-position-error? . g$111$23926) (i/o-filename-error? . g$111$23925) (i/o-file-protection-error? . g$111$23924) (i/o-file-is-read-only-error? . g$111$23923) (i/o-file-does-not-exist-error? . g$111$23922) (i/o-file-already-exists-error? . g$111$23921) (i/o-error? . g$111$23920) (i/o-error-port . g$111$23919) (i/o-error-filename . g$111$23918) (&i/o-port . g$111$23471) (&i/o-file-does-not-exist . g$111$23470) (&i/o-file-already-exists . g$111$23469) (&i/o-file-is-read-only . g$111$23468) (&i/o-file-protection . g$111$23467) (&i/o-filename . g$111$23466) (&i/o-invalid-position . g$111$23465) (&i/o-write . g$111$23464) (&i/o-read . g$111$23463) (&i/o . g$111$23462)) '() values values '#t) (g$111$12834 'g$111$24107 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g$111$23932) (utf32->string . g$111$23807) (utf16->string . g$111$23806) (utf8->string . g$111$23805) (uint-list->bytevector . g$111$23804) (u8-list->bytevector . g$111$23803) (string->utf8 . g$111$23802) (string->utf32 . g$111$23801) (string->utf16 . g$111$23800) (sint-list->bytevector . g$111$23799) (native-endianness . g$111$23798) (bytevector? . g$111$23797) (bytevector=? . g$111$23796) (bytevector-uint-set! . g$111$23795) (bytevector-uint-ref . g$111$23794) (bytevector-u8-set! . g$111$23793) (bytevector-u8-ref . g$111$23792) (bytevector-u64-set! . g$111$23791) (bytevector-u64-ref . g$111$23790) (bytevector-u64-native-set! . g$111$23789) (bytevector-u64-native-ref . g$111$23788) (bytevector-u32-set! . g$111$23787) (bytevector-u32-ref . g$111$23786) (bytevector-u32-native-set! . g$111$23785) (bytevector-u32-native-ref . g$111$23784) (bytevector-u16-set! . g$111$23783) (bytevector-u16-ref . g$111$23782) (bytevector-u16-native-set! . g$111$23781) (bytevector-u16-native-ref . g$111$23780) (bytevector-sint-set! . g$111$23779) (bytevector-sint-ref . g$111$23778) (bytevector-s8-set! . g$111$23777) (bytevector-s8-ref . g$111$23776) (bytevector-s64-set! . g$111$23775) (bytevector-s64-ref . g$111$23774) (bytevector-s64-native-set! . g$111$23773) (bytevector-s64-native-ref . g$111$23772) (bytevector-s32-set! . g$111$23771) (bytevector-s32-ref . g$111$23770) (bytevector-s32-native-set! . g$111$23769) (bytevector-s32-native-ref . g$111$23768) (bytevector-s16-set! . g$111$23767) (bytevector-s16-ref . g$111$23766) (bytevector-s16-native-set! . g$111$23765) (bytevector-s16-native-ref . g$111$23764) (bytevector-length . g$111$23763) (bytevector-ieee-single-ref . g$111$23762) (bytevector-ieee-single-native-set! . g$111$23761) (bytevector-ieee-single-native-ref . g$111$23760) (bytevector-ieee-double-ref . g$111$23759) (bytevector-ieee-double-native-set! . g$111$23758) (bytevector-ieee-double-native-ref . g$111$23757) (bytevector-fill! . g$111$23756) (bytevector-copy! . g$111$23755) (bytevector-copy . g$111$23754) (bytevector->uint-list . g$111$23753) (bytevector->u8-list . g$111$23752) (bytevector->sint-list . g$111$23751) (endianness . g$111$23419)) '() values values '#t) (g$111$12834 'g$111$24108 '(rnrs unicode) '(6) '() '() '() '((string-upcase . g$111$24079) (string-titlecase . g$111$24078) (string-normalize-nfkd . g$111$24077) (string-normalize-nfkc . g$111$24076) (string-normalize-nfd . g$111$24075) (string-normalize-nfc . g$111$24074) (string-foldcase . g$111$24073) (string-downcase . g$111$24072) (string-ci>? . g$111$24071) (string-ci>=? . g$111$24070) (string-ci=? . g$111$24069) (string-ci<? . g$111$24068) (string-ci<=? . g$111$24067) (char-whitespace? . g$111$24066) (char-upper-case? . g$111$24065) (char-title-case? . g$111$24064) (char-numeric? . g$111$24063) (char-lower-case? . g$111$24062) (char-general-category . g$111$24061) (char-upcase . g$111$24060) (char-titlecase . g$111$24059) (char-foldcase . g$111$24058) (char-downcase . g$111$24057) (char-ci>? . g$111$24056) (char-ci>=? . g$111$24055) (char-ci=? . g$111$24054) (char-ci<? . g$111$24053) (char-ci<=? . g$111$24052) (char-alphabetic? . g$111$24051)) '() values values '#t) (g$111$12834 'g$111$24109 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g$111$23862) (raise-continuable . g$111$23861) (raise . g$111$23860) (guard . g$111$23431) (else . g$111$23423) (=> . g$111$23422)) '() values values '#t) (g$111$12834 'g$111$24110 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g$111$23655) (bitwise-reverse-bit-field . g$111$23654) (bitwise-length . g$111$23653) (bitwise-if . g$111$23652) (bitwise-first-bit-set . g$111$23651) (bitwise-copy-bit-field . g$111$23650) (bitwise-copy-bit . g$111$23649) (bitwise-bit-set? . g$111$23648) (bitwise-bit-field . g$111$23647) (bitwise-bit-count . g$111$23646) (bitwise-xor . g$111$23645) (bitwise-ior . g$111$23644) (bitwise-and . g$111$23643) (bitwise-not . g$111$23642) (bitwise-arithmetic-shift-right . g$111$23641) (bitwise-arithmetic-shift-left . g$111$23640) (bitwise-arithmetic-shift . g$111$23639)) '() values values '#t) (g$111$12834 'g$111$24111 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g$111$23700) (fxxor . g$111$23699) (fxrotate-bit-field . g$111$23698) (fxreverse-bit-field . g$111$23697) (fxpositive? . g$111$23696) (fxodd? . g$111$23695) (fxnot . g$111$23694) (fxnegative? . g$111$23693) (fxmod0 . g$111$23692) (fxmod . g$111$23691) (fxmin . g$111$23690) (fxmax . g$111$23689) (fxlength . g$111$23688) (fxior . g$111$23687) (fxif . g$111$23686) (fxfirst-bit-set . g$111$23685) (fxeven? . g$111$23684) (fxdiv0-and-mod0 . g$111$23683) (fxdiv0 . g$111$23682) (fxdiv-and-mod . g$111$23681) (fxdiv . g$111$23680) (fxcopy-bit-field . g$111$23679) (fxcopy-bit . g$111$23678) (fxbit-set? . g$111$23677) (fxbit-field . g$111$23676) (fxbit-count . g$111$23675) (fxarithmetic-shift-right . g$111$23674) (fxarithmetic-shift-left . g$111$23673) (fxarithmetic-shift . g$111$23672) (fxand . g$111$23671) (fx>? . g$111$23670) (fx>=? . g$111$23669) (fx=? . g$111$23668) (fx<? . g$111$23667) (fx<=? . g$111$23666) (fx-/carry . g$111$23665) (fx- . g$111$23664) (fx+/carry . g$111$23663) (fx+ . g$111$23662) (fx*/carry . g$111$23661) (fx* . g$111$23660) (greatest-fixnum . g$111$23659) (least-fixnum . g$111$23658) (fixnum-width . g$111$23657) (fixnum? . g$111$23656)) '() values values '#t) (g$111$12834 'g$111$24112 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g$111$23750) (no-infinities-violation? . g$111$23749) (make-no-nans-violation . g$111$23748) (make-no-infinities-violation . g$111$23747) (real->flonum . g$111$23746) (flzero? . g$111$23745) (fltruncate . g$111$23744) (fltan . g$111$23743) (flsqrt . g$111$23742) (flsin . g$111$23741) (flround . g$111$23740) (flpositive? . g$111$23739) (flonum? . g$111$23738) (flodd? . g$111$23737) (flnumerator . g$111$23736) (flnegative? . g$111$23735) (flnan? . g$111$23734) (flmod0 . g$111$23733) (flmod . g$111$23732) (flmin . g$111$23731) (flmax . g$111$23730) (fllog . g$111$23729) (flinteger? . g$111$23728) (flinfinite? . g$111$23727) (flfloor . g$111$23726) (flfinite? . g$111$23725) (flexpt . g$111$23724) (flexp . g$111$23723) (fleven? . g$111$23722) (fldiv0-and-mod0 . g$111$23721) (fldiv0 . g$111$23720) (fldiv-and-mod . g$111$23719) (fldiv . g$111$23718) (fldenominator . g$111$23717) (flcos . g$111$23716) (flceiling . g$111$23715) (flatan . g$111$23714) (flasin . g$111$23713) (flacos . g$111$23712) (flabs . g$111$23711) (fl>? . g$111$23710) (fl>=? . g$111$23709) (fl=? . g$111$23708) (fl<? . g$111$23707) (fl<=? . g$111$23706) (fl/ . g$111$23705) (fl- . g$111$23704) (fl+ . g$111$23703) (fl* . g$111$23702) (fixnum->flonum . g$111$23701) (&no-nans . g$111$23475) (&no-infinities . g$111$23474)) '() values values '#t) (g$111$12834 'g$111$24113 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g$111$24028) (string-ci-hash . g$111$24027) (string-hash . g$111$24026) (equal-hash . g$111$24025) (hashtable-equivalence-function . g$111$24024) (make-hashtable . g$111$24023) (hashtable-hash-function . g$111$24022) (make-eqv-hashtable . g$111$24021) (make-eq-hashtable . g$111$24020) (hashtable? . g$111$24019) (hashtable-update! . g$111$24018) (hashtable-size . g$111$24017) (hashtable-set! . g$111$24016) (hashtable-ref . g$111$24015) (hashtable-mutable? . g$111$24014) (hashtable-keys . g$111$24013) (hashtable-entries . g$111$24012) (hashtable-delete! . g$111$24011) (hashtable-copy . g$111$24010) (hashtable-contains? . g$111$24009) (hashtable-clear! . g$111$24008)) '() values values '#t) (g$111$12834 'g$111$24114 '(rnrs io ports) '(6) '() '() '() '((eof-object? . g$111$23992) (eof-object . g$111$23991) (current-error-port . g$111$23990) (current-output-port . g$111$23989) (current-input-port . g$111$23988) (output-port? . g$111$23987) (input-port? . g$111$23986) (utf-8-codec . g$111$23985) (utf-16-codec . g$111$23984) (transcoder-error-handling-mode . g$111$23983) (transcoder-eol-style . g$111$23982) (transcoder-codec . g$111$23981) (transcoded-port . g$111$23980) (textual-port? . g$111$23979) (string->bytevector . g$111$23978) (standard-output-port . g$111$23977) (standard-input-port . g$111$23976) (standard-error-port . g$111$23975) (set-port-position! . g$111$23974) (put-u8 . g$111$23973) (put-string . g$111$23972) (put-datum . g$111$23971) (put-char . g$111$23970) (put-bytevector . g$111$23969) (port? . g$111$23968) (port-transcoder . g$111$23967) (port-position . g$111$23966) (port-has-set-port-position!? . g$111$23965) (port-has-port-position? . g$111$23964) (port-eof? . g$111$23963) (output-port-buffer-mode . g$111$23962) (open-string-output-port . g$111$23961) (open-string-input-port . g$111$23960) (open-file-output-port . g$111$23959) (open-file-input/output-port . g$111$23958) (open-file-input-port . g$111$23957) (open-bytevector-output-port . g$111$23956) (open-bytevector-input-port . g$111$23955) (native-transcoder . g$111$23954) (native-eol-style . g$111$23953) (make-transcoder . g$111$23952) (latin-1-codec . g$111$23951) (make-i/o-write-error . g$111$23950) (make-i/o-read-error . g$111$23949) (make-i/o-port-error . g$111$23948) (make-i/o-invalid-position-error . g$111$23947) (make-i/o-filename-error . g$111$23946) (make-i/o-file-protection-error . g$111$23945) (make-i/o-file-is-read-only-error . g$111$23944) (make-i/o-file-does-not-exist-error . g$111$23943) (make-i/o-file-already-exists-error . g$111$23942) (make-i/o-error . g$111$23941) (make-i/o-encoding-error . g$111$23940) (make-i/o-decoding-error . g$111$23939) (make-custom-textual-output-port . g$111$23938) (make-custom-textual-input/output-port . g$111$23937) (make-custom-textual-input-port . g$111$23936) (make-custom-binary-output-port . g$111$23935) (make-custom-binary-input/output-port . g$111$23934) (make-custom-binary-input-port . g$111$23933) (lookahead-u8 . g$111$23931) (lookahead-char . g$111$23930) (i/o-write-error? . g$111$23929) (i/o-read-error? . g$111$23928) (i/o-port-error? . g$111$23927) (i/o-invalid-position-error? . g$111$23926) (i/o-filename-error? . g$111$23925) (i/o-file-protection-error? . g$111$23924) (i/o-file-is-read-only-error? . g$111$23923) (i/o-file-does-not-exist-error? . g$111$23922) (i/o-file-already-exists-error? . g$111$23921) (i/o-error? . g$111$23920) (i/o-error-port . g$111$23919) (i/o-error-filename . g$111$23918) (i/o-encoding-error? . g$111$23917) (i/o-encoding-error-char . g$111$23916) (i/o-decoding-error? . g$111$23915) (get-u8 . g$111$23914) (get-string-n! . g$111$23913) (get-string-n . g$111$23912) (get-string-all . g$111$23911) (get-line . g$111$23910) (get-datum . g$111$23909) (get-char . g$111$23908) (get-bytevector-some . g$111$23907) (get-bytevector-n! . g$111$23906) (get-bytevector-n . g$111$23905) (get-bytevector-all . g$111$23904) (flush-output-port . g$111$23903) (close-port . g$111$23902) (call-with-string-output-port . g$111$23868) (call-with-port . g$111$23867) (call-with-bytevector-output-port . g$111$23866) (bytevector->string . g$111$23865) (buffer-mode? . g$111$23864) (binary-port? . g$111$23863) (&i/o-encoding . g$111$23473) (&i/o-decoding . g$111$23472) (&i/o-port . g$111$23471) (&i/o-file-does-not-exist . g$111$23470) (&i/o-file-already-exists . g$111$23469) (&i/o-file-is-read-only . g$111$23468) (&i/o-file-protection . g$111$23467) (&i/o-filename . g$111$23466) (&i/o-invalid-position . g$111$23465) (&i/o-write . g$111$23464) (&i/o-read . g$111$23463) (&i/o . g$111$23462) (error-handling-mode . g$111$23435) (file-options . g$111$23434) (buffer-mode . g$111$23433) (eol-style . g$111$23432)) '() values values '#t) (g$111$12834 'g$111$24115 '(rnrs enums) '(6) '() '() '() '((make-enumeration . g$111$23859) (enum-set=? . g$111$23858) (enum-set-universe . g$111$23857) (enum-set-union . g$111$23856) (enum-set-subset? . g$111$23855) (enum-set-projection . g$111$23854) (enum-set-member? . g$111$23853) (enum-set-intersection . g$111$23852) (enum-set-indexer . g$111$23851) (enum-set-difference . g$111$23850) (enum-set-constructor . g$111$23849) (enum-set-complement . g$111$23848) (enum-set->list . g$111$23847) (define-enumeration . g$111$23446)) '() values values '#t) (g$111$12834 'g$111$24116 '(rnrs conditions) '(6) '() '() '() '((who-condition? . g$111$23846) (warning? . g$111$23845) (violation? . g$111$23844) (undefined-violation? . g$111$23843) (syntax-violation? . g$111$23842) (syntax-violation-subform . g$111$23841) (syntax-violation-form . g$111$23840) (syntax-violation . g$111$23839) (simple-conditions . g$111$23838) (serious-condition? . g$111$23837) (non-continuable-violation? . g$111$23836) (&non-continuable . g$111$23835) (message-condition? . g$111$23834) (make-who-condition . g$111$23833) (make-warning . g$111$23832) (make-violation . g$111$23831) (make-undefined-violation . g$111$23830) (make-syntax-violation . g$111$23829) (make-serious-condition . g$111$23828) (make-non-continuable-violation . g$111$23827) (make-message-condition . g$111$23826) (make-lexical-violation . g$111$23825) (make-irritants-condition . g$111$23824) (make-implementation-restriction-violation . g$111$23823) (make-error . g$111$23822) (make-assertion-violation . g$111$23821) (lexical-violation? . g$111$23820) (irritants-condition? . g$111$23819) (implementation-restriction-violation? . g$111$23818) (&implementation-restriction . g$111$23817) (error? . g$111$23816) (condition-who . g$111$23815) (condition-predicate . g$111$23814) (condition-message . g$111$23813) (condition-irritants . g$111$23812) (condition-accessor . g$111$23811) (condition . g$111$23810) (assertion-violation? . g$111$23809) (condition? . g$111$23808) (&undefined . g$111$23461) (&syntax . g$111$23460) (&lexical . g$111$23459) (&who . g$111$23456) (&irritants . g$111$23455) (&assertion . g$111$23454) (&violation . g$111$23453) (&error . g$111$23452) (&serious . g$111$23451) (&warning . g$111$23450) (&message . g$111$23449) (&condition . g$111$23448) (define-condition-type . g$111$23447)) '() values values '#t) (g$111$12834 'g$111$24117 '(rnrs records inspection) '(6) '() '() '() '((record? . g$111$24043) (record-type-uid . g$111$24042) (record-type-sealed? . g$111$24041) (record-type-parent . g$111$24040) (record-type-opaque? . g$111$24039) (record-type-name . g$111$24038) (record-type-generative? . g$111$24037) (record-type-field-names . g$111$24036) (record-rtd . g$111$24035) (record-field-mutable? . g$111$24034)) '() values values '#t) (g$111$12834 'g$111$24118 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g$111$24050) (record-predicate . g$111$24049) (record-mutator . g$111$24048) (record-constructor . g$111$24047) (record-accessor . g$111$24046) (make-record-type-descriptor . g$111$24045) (make-record-constructor-descriptor . g$111$24044)) '() values values '#t) (g$111$12834 'g$111$24119 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g$111$23445) (parent-rtd . g$111$23444) (nongenerative . g$111$23443) (opaque . g$111$23442) (sealed . g$111$23441) (protocol . g$111$23440) (parent . g$111$23439) (immutable . g$111$23438) (mutable . g$111$23437) (fields . g$111$23436) (record-constructor-descriptor . g$111$23403) (record-type-descriptor . g$111$23402)) '() values values '#t) (g$111$12834 'g$111$24120 '(psyntax system $all) '() '() '() '() '((syntax-error . g$111$13702) (syntax-dispatch . g$111$13569) (pretty-print . g$111$24088) (eval-core . g$111$24087) (set-symbol-value! . g$111$24086) (symbol-value . g$111$24085) (gensym . g$111$24084) (void . g$111$24083) (load . g$111$24082) (interaction-environment . g$111$24081) (char-ready? . g$111$24080) (string-upcase . g$111$24079) (string-titlecase . g$111$24078) (string-normalize-nfkd . g$111$24077) (string-normalize-nfkc . g$111$24076) (string-normalize-nfd . g$111$24075) (string-normalize-nfc . g$111$24074) (string-foldcase . g$111$24073) (string-downcase . g$111$24072) (string-ci>? . g$111$24071) (string-ci>=? . g$111$24070) (string-ci=? . g$111$24069) (string-ci<? . g$111$24068) (string-ci<=? . g$111$24067) (char-whitespace? . g$111$24066) (char-upper-case? . g$111$24065) (char-title-case? . g$111$24064) (char-numeric? . g$111$24063) (char-lower-case? . g$111$24062) (char-general-category . g$111$24061) (char-upcase . g$111$24060) (char-titlecase . g$111$24059) (char-foldcase . g$111$24058) (char-downcase . g$111$24057) (char-ci>? . g$111$24056) (char-ci>=? . g$111$24055) (char-ci=? . g$111$24054) (char-ci<? . g$111$24053) (char-ci<=? . g$111$24052) (char-alphabetic? . g$111$24051) (make-variable-transformer . g$111$13274) (identifier? . g$111$13704) (generate-temporaries . g$111$13696) (free-identifier=? . g$111$13698) (syntax->datum . g$111$13708) (datum->syntax . g$111$13706) (bound-identifier=? . g$111$13700) (record-type-descriptor? . g$111$24050) (record-predicate . g$111$24049) (record-mutator . g$111$24048) (record-constructor . g$111$24047) (record-accessor . g$111$24046) (make-record-type-descriptor . g$111$24045) (make-record-constructor-descriptor . g$111$24044) (record? . g$111$24043) (record-type-uid . g$111$24042) (record-type-sealed? . g$111$24041) (record-type-parent . g$111$24040) (record-type-opaque? . g$111$24039) (record-type-name . g$111$24038) (record-type-generative? . g$111$24037) (record-type-field-names . g$111$24036) (record-rtd . g$111$24035) (record-field-mutable? . g$111$24034) (delete-file . g$111$24033) (file-exists? . g$111$24032) (vector-sort! . g$111$24031) (vector-sort . g$111$24030) (list-sort . g$111$24029) (symbol-hash . g$111$24028) (string-ci-hash . g$111$24027) (string-hash . g$111$24026) (equal-hash . g$111$24025) (hashtable-equivalence-function . g$111$24024) (make-hashtable . g$111$24023) (hashtable-hash-function . g$111$24022) (make-eqv-hashtable . g$111$24021) (make-eq-hashtable . g$111$24020) (hashtable? . g$111$24019) (hashtable-update! . g$111$24018) (hashtable-size . g$111$24017) (hashtable-set! . g$111$24016) (hashtable-ref . g$111$24015) (hashtable-mutable? . g$111$24014) (hashtable-keys . g$111$24013) (hashtable-entries . g$111$24012) (hashtable-delete! . g$111$24011) (hashtable-copy . g$111$24010) (hashtable-contains? . g$111$24009) (hashtable-clear! . g$111$24008) (call-with-output-file . g$111$24007) (call-with-input-file . g$111$24006) (write-char . g$111$24005) (write . g$111$24004) (with-output-to-file . g$111$24003) (with-input-from-file . g$111$24002) (read-char . g$111$24001) (read . g$111$24000) (peek-char . g$111$23999) (open-output-file . g$111$23998) (open-input-file . g$111$23997) (newline . g$111$23996) (display . g$111$23995) (close-output-port . g$111$23994) (close-input-port . g$111$23993) (eof-object? . g$111$23992) (eof-object . g$111$23991) (current-error-port . g$111$23990) (current-output-port . g$111$23989) (current-input-port . g$111$23988) (output-port? . g$111$23987) (input-port? . g$111$23986) (utf-8-codec . g$111$23985) (utf-16-codec . g$111$23984) (transcoder-error-handling-mode . g$111$23983) (transcoder-eol-style . g$111$23982) (transcoder-codec . g$111$23981) (transcoded-port . g$111$23980) (textual-port? . g$111$23979) (string->bytevector . g$111$23978) (standard-output-port . g$111$23977) (standard-input-port . g$111$23976) (standard-error-port . g$111$23975) (set-port-position! . g$111$23974) (put-u8 . g$111$23973) (put-string . g$111$23972) (put-datum . g$111$23971) (put-char . g$111$23970) (put-bytevector . g$111$23969) (port? . g$111$23968) (port-transcoder . g$111$23967) (port-position . g$111$23966) (port-has-set-port-position!? . g$111$23965) (port-has-port-position? . g$111$23964) (port-eof? . g$111$23963) (output-port-buffer-mode . g$111$23962) (open-string-output-port . g$111$23961) (open-string-input-port . g$111$23960) (open-file-output-port . g$111$23959) (open-file-input/output-port . g$111$23958) (open-file-input-port . g$111$23957) (open-bytevector-output-port . g$111$23956) (open-bytevector-input-port . g$111$23955) (native-transcoder . g$111$23954) (native-eol-style . g$111$23953) (make-transcoder . g$111$23952) (latin-1-codec . g$111$23951) (make-i/o-write-error . g$111$23950) (make-i/o-read-error . g$111$23949) (make-i/o-port-error . g$111$23948) (make-i/o-invalid-position-error . g$111$23947) (make-i/o-filename-error . g$111$23946) (make-i/o-file-protection-error . g$111$23945) (make-i/o-file-is-read-only-error . g$111$23944) (make-i/o-file-does-not-exist-error . g$111$23943) (make-i/o-file-already-exists-error . g$111$23942) (make-i/o-error . g$111$23941) (make-i/o-encoding-error . g$111$23940) (make-i/o-decoding-error . g$111$23939) (make-custom-textual-output-port . g$111$23938) (make-custom-textual-input/output-port . g$111$23937) (make-custom-textual-input-port . g$111$23936) (make-custom-binary-output-port . g$111$23935) (make-custom-binary-input/output-port . g$111$23934) (make-custom-binary-input-port . g$111$23933) (make-bytevector . g$111$23932) (lookahead-u8 . g$111$23931) (lookahead-char . g$111$23930) (i/o-write-error? . g$111$23929) (i/o-read-error? . g$111$23928) (i/o-port-error? . g$111$23927) (i/o-invalid-position-error? . g$111$23926) (i/o-filename-error? . g$111$23925) (i/o-file-protection-error? . g$111$23924) (i/o-file-is-read-only-error? . g$111$23923) (i/o-file-does-not-exist-error? . g$111$23922) (i/o-file-already-exists-error? . g$111$23921) (i/o-error? . g$111$23920) (i/o-error-port . g$111$23919) (i/o-error-filename . g$111$23918) (i/o-encoding-error? . g$111$23917) (i/o-encoding-error-char . g$111$23916) (i/o-decoding-error? . g$111$23915) (get-u8 . g$111$23914) (get-string-n! . g$111$23913) (get-string-n . g$111$23912) (get-string-all . g$111$23911) (get-line . g$111$23910) (get-datum . g$111$23909) (get-char . g$111$23908) (get-bytevector-some . g$111$23907) (get-bytevector-n! . g$111$23906) (get-bytevector-n . g$111$23905) (get-bytevector-all . g$111$23904) (flush-output-port . g$111$23903) (close-port . g$111$23902) (scheme-report-environment . g$111$23901) (quotient . g$111$23900) (null-environment . g$111$13676) (remainder . g$111$23899) (modulo . g$111$23898) (inexact->exact . g$111$23897) (force . g$111$23896) (exact->inexact . g$111$23895) (exit . g$111$23894) (command-line . g$111$23893) (string-fill! . g$111$23892) (string-set! . g$111$23891) (set-cdr! . g$111$23890) (set-car! . g$111$23889) (remove . g$111$23888) (remv . g$111$23887) (remp . g$111$23886) (remq . g$111$23885) (partition . g$111$23884) (memv . g$111$23883) (memq . g$111$23882) (memp . g$111$23881) (member . g$111$23880) (exists . g$111$23879) (for-all . g$111$23878) (fold-right . g$111$23877) (fold-left . g$111$23876) (find . g$111$23875) (filter . g$111$23874) (cons* . g$111$23873) (assv . g$111$23872) (assq . g$111$23871) (assp . g$111$23870) (assoc . g$111$23869) (call-with-string-output-port . g$111$23868) (call-with-port . g$111$23867) (call-with-bytevector-output-port . g$111$23866) (bytevector->string . g$111$23865) (buffer-mode? . g$111$23864) (binary-port? . g$111$23863) (with-exception-handler . g$111$23862) (raise-continuable . g$111$23861) (raise . g$111$23860) (eval . g$111$13682) (environment . g$111$13674) (make-enumeration . g$111$23859) (enum-set=? . g$111$23858) (enum-set-universe . g$111$23857) (enum-set-union . g$111$23856) (enum-set-subset? . g$111$23855) (enum-set-projection . g$111$23854) (enum-set-member? . g$111$23853) (enum-set-intersection . g$111$23852) (enum-set-indexer . g$111$23851) (enum-set-difference . g$111$23850) (enum-set-constructor . g$111$23849) (enum-set-complement . g$111$23848) (enum-set->list . g$111$23847) (who-condition? . g$111$23846) (warning? . g$111$23845) (violation? . g$111$23844) (undefined-violation? . g$111$23843) (syntax-violation? . g$111$23842) (syntax-violation-subform . g$111$23841) (syntax-violation-form . g$111$23840) (syntax-violation . g$111$23839) (simple-conditions . g$111$23838) (serious-condition? . g$111$23837) (non-continuable-violation? . g$111$23836) (&non-continuable . g$111$23835) (message-condition? . g$111$23834) (make-who-condition . g$111$23833) (make-warning . g$111$23832) (make-violation . g$111$23831) (make-undefined-violation . g$111$23830) (make-syntax-violation . g$111$23829) (make-serious-condition . g$111$23828) (make-non-continuable-violation . g$111$23827) (make-message-condition . g$111$23826) (make-lexical-violation . g$111$23825) (make-irritants-condition . g$111$23824) (make-implementation-restriction-violation . g$111$23823) (make-error . g$111$23822) (make-assertion-violation . g$111$23821) (lexical-violation? . g$111$23820) (irritants-condition? . g$111$23819) (implementation-restriction-violation? . g$111$23818) (&implementation-restriction . g$111$23817) (error? . g$111$23816) (condition-who . g$111$23815) (condition-predicate . g$111$23814) (condition-message . g$111$23813) (condition-irritants . g$111$23812) (condition-accessor . g$111$23811) (condition . g$111$23810) (assertion-violation? . g$111$23809) (condition? . g$111$23808) (utf32->string . g$111$23807) (utf16->string . g$111$23806) (utf8->string . g$111$23805) (uint-list->bytevector . g$111$23804) (u8-list->bytevector . g$111$23803) (string->utf8 . g$111$23802) (string->utf32 . g$111$23801) (string->utf16 . g$111$23800) (sint-list->bytevector . g$111$23799) (native-endianness . g$111$23798) (bytevector? . g$111$23797) (bytevector=? . g$111$23796) (bytevector-uint-set! . g$111$23795) (bytevector-uint-ref . g$111$23794) (bytevector-u8-set! . g$111$23793) (bytevector-u8-ref . g$111$23792) (bytevector-u64-set! . g$111$23791) (bytevector-u64-ref . g$111$23790) (bytevector-u64-native-set! . g$111$23789) (bytevector-u64-native-ref . g$111$23788) (bytevector-u32-set! . g$111$23787) (bytevector-u32-ref . g$111$23786) (bytevector-u32-native-set! . g$111$23785) (bytevector-u32-native-ref . g$111$23784) (bytevector-u16-set! . g$111$23783) (bytevector-u16-ref . g$111$23782) (bytevector-u16-native-set! . g$111$23781) (bytevector-u16-native-ref . g$111$23780) (bytevector-sint-set! . g$111$23779) (bytevector-sint-ref . g$111$23778) (bytevector-s8-set! . g$111$23777) (bytevector-s8-ref . g$111$23776) (bytevector-s64-set! . g$111$23775) (bytevector-s64-ref . g$111$23774) (bytevector-s64-native-set! . g$111$23773) (bytevector-s64-native-ref . g$111$23772) (bytevector-s32-set! . g$111$23771) (bytevector-s32-ref . g$111$23770) (bytevector-s32-native-set! . g$111$23769) (bytevector-s32-native-ref . g$111$23768) (bytevector-s16-set! . g$111$23767) (bytevector-s16-ref . g$111$23766) (bytevector-s16-native-set! . g$111$23765) (bytevector-s16-native-ref . g$111$23764) (bytevector-length . g$111$23763) (bytevector-ieee-single-ref . g$111$23762) (bytevector-ieee-single-native-set! . g$111$23761) (bytevector-ieee-single-native-ref . g$111$23760) (bytevector-ieee-double-ref . g$111$23759) (bytevector-ieee-double-native-set! . g$111$23758) (bytevector-ieee-double-native-ref . g$111$23757) (bytevector-fill! . g$111$23756) (bytevector-copy! . g$111$23755) (bytevector-copy . g$111$23754) (bytevector->uint-list . g$111$23753) (bytevector->u8-list . g$111$23752) (bytevector->sint-list . g$111$23751) (no-nans-violation? . g$111$23750) (no-infinities-violation? . g$111$23749) (make-no-nans-violation . g$111$23748) (make-no-infinities-violation . g$111$23747) (real->flonum . g$111$23746) (flzero? . g$111$23745) (fltruncate . g$111$23744) (fltan . g$111$23743) (flsqrt . g$111$23742) (flsin . g$111$23741) (flround . g$111$23740) (flpositive? . g$111$23739) (flonum? . g$111$23738) (flodd? . g$111$23737) (flnumerator . g$111$23736) (flnegative? . g$111$23735) (flnan? . g$111$23734) (flmod0 . g$111$23733) (flmod . g$111$23732) (flmin . g$111$23731) (flmax . g$111$23730) (fllog . g$111$23729) (flinteger? . g$111$23728) (flinfinite? . g$111$23727) (flfloor . g$111$23726) (flfinite? . g$111$23725) (flexpt . g$111$23724) (flexp . g$111$23723) (fleven? . g$111$23722) (fldiv0-and-mod0 . g$111$23721) (fldiv0 . g$111$23720) (fldiv-and-mod . g$111$23719) (fldiv . g$111$23718) (fldenominator . g$111$23717) (flcos . g$111$23716) (flceiling . g$111$23715) (flatan . g$111$23714) (flasin . g$111$23713) (flacos . g$111$23712) (flabs . g$111$23711) (fl>? . g$111$23710) (fl>=? . g$111$23709) (fl=? . g$111$23708) (fl<? . g$111$23707) (fl<=? . g$111$23706) (fl/ . g$111$23705) (fl- . g$111$23704) (fl+ . g$111$23703) (fl* . g$111$23702) (fixnum->flonum . g$111$23701) (fxzero? . g$111$23700) (fxxor . g$111$23699) (fxrotate-bit-field . g$111$23698) (fxreverse-bit-field . g$111$23697) (fxpositive? . g$111$23696) (fxodd? . g$111$23695) (fxnot . g$111$23694) (fxnegative? . g$111$23693) (fxmod0 . g$111$23692) (fxmod . g$111$23691) (fxmin . g$111$23690) (fxmax . g$111$23689) (fxlength . g$111$23688) (fxior . g$111$23687) (fxif . g$111$23686) (fxfirst-bit-set . g$111$23685) (fxeven? . g$111$23684) (fxdiv0-and-mod0 . g$111$23683) (fxdiv0 . g$111$23682) (fxdiv-and-mod . g$111$23681) (fxdiv . g$111$23680) (fxcopy-bit-field . g$111$23679) (fxcopy-bit . g$111$23678) (fxbit-set? . g$111$23677) (fxbit-field . g$111$23676) (fxbit-count . g$111$23675) (fxarithmetic-shift-right . g$111$23674) (fxarithmetic-shift-left . g$111$23673) (fxarithmetic-shift . g$111$23672) (fxand . g$111$23671) (fx>? . g$111$23670) (fx>=? . g$111$23669) (fx=? . g$111$23668) (fx<? . g$111$23667) (fx<=? . g$111$23666) (fx-/carry . g$111$23665) (fx- . g$111$23664) (fx+/carry . g$111$23663) (fx+ . g$111$23662) (fx*/carry . g$111$23661) (fx* . g$111$23660) (greatest-fixnum . g$111$23659) (least-fixnum . g$111$23658) (fixnum-width . g$111$23657) (fixnum? . g$111$23656) (bitwise-rotate-bit-field . g$111$23655) (bitwise-reverse-bit-field . g$111$23654) (bitwise-length . g$111$23653) (bitwise-if . g$111$23652) (bitwise-first-bit-set . g$111$23651) (bitwise-copy-bit-field . g$111$23650) (bitwise-copy-bit . g$111$23649) (bitwise-bit-set? . g$111$23648) (bitwise-bit-field . g$111$23647) (bitwise-bit-count . g$111$23646) (bitwise-xor . g$111$23645) (bitwise-ior . g$111$23644) (bitwise-and . g$111$23643) (bitwise-not . g$111$23642) (bitwise-arithmetic-shift-right . g$111$23641) (bitwise-arithmetic-shift-left . g$111$23640) (bitwise-arithmetic-shift . g$111$23639) (zero? . g$111$23638) (vector? . g$111$23637) (vector-set! . g$111$23636) (vector-ref . g$111$23635) (vector-map . g$111$23634) (vector-length . g$111$23633) (vector-for-each . g$111$23632) (vector-fill! . g$111$23631) (vector->list . g$111$23630) (vector . g$111$23629) (values . g$111$23628) (truncate . g$111$23627) (tan . g$111$23626) (symbol? . g$111$23625) (symbol=? . g$111$23624) (symbol->string . g$111$23623) (substring . g$111$23622) (string? . g$111$23621) (string>? . g$111$23620) (string>=? . g$111$23619) (string=? . g$111$23618) (string<? . g$111$23617) (string<=? . g$111$23616) (string-ref . g$111$23615) (string-length . g$111$23614) (string-for-each . g$111$23613) (string-copy . g$111$23612) (string-append . g$111$23611) (string->symbol . g$111$23610) (string->number . g$111$23609) (string->list . g$111$23608) (string . g$111$23607) (sqrt . g$111$23606) (sin . g$111$23605) (round . g$111$23604) (reverse . g$111$23603) (real? . g$111$23602) (real-valued? . g$111$23601) (real-part . g$111$23600) (rationalize . g$111$23599) (rational? . g$111$23598) (rational-valued? . g$111$23597) (procedure? . g$111$23596) (positive? . g$111$23595) (pair? . g$111$23594) (odd? . g$111$23593) (numerator . g$111$23592) (number? . g$111$23591) (number->string . g$111$23590) (null? . g$111$23589) (not . g$111$23588) (negative? . g$111$23587) (nan? . g$111$23586) (min . g$111$23585) (max . g$111$23584) (map . g$111$23583) (make-vector . g$111$23582) (make-string . g$111$23581) (make-rectangular . g$111$23580) (make-polar . g$111$23579) (magnitude . g$111$23578) (log . g$111$23577) (list? . g$111$23576) (list-tail . g$111$23575) (list-ref . g$111$23574) (list->vector . g$111$23573) (list->string . g$111$23572) (list . g$111$23571) (length . g$111$23570) (lcm . g$111$23569) (integer? . g$111$23568) (integer-valued? . g$111$23567) (integer->char . g$111$23566) (infinite? . g$111$23565) (inexact? . g$111$23564) (inexact . g$111$23563) (imag-part . g$111$23562) (gcd . g$111$23561) (for-each . g$111$23560) (floor . g$111$23559) (finite? . g$111$23558) (expt . g$111$23557) (exp . g$111$23556) (exact? . g$111$23555) (exact-integer-sqrt . g$111$23554) (exact . g$111$23553) (even? . g$111$23552) (error . g$111$23551) (eqv? . g$111$23550) (equal? . g$111$23549) (eq? . g$111$23548) (dynamic-wind . g$111$23547) (div0-and-mod0 . g$111$23546) (mod0 . g$111$23545) (div0 . g$111$23544) (div-and-mod . g$111$23543) (mod . g$111$23542) (div . g$111$23541) (denominator . g$111$23540) (cos . g$111$23539) (cons . g$111$23538) (complex? . g$111$23537) (char? . g$111$23536) (char>? . g$111$23535) (char>=? . g$111$23534) (char=? . g$111$23533) (char<? . g$111$23532) (char<=? . g$111$23531) (char->integer . g$111$23530) (ceiling . g$111$23529) (call-with-values . g$111$23528) (call/cc . g$111$23527) (call-with-current-continuation . g$111$23526) (cddddr . g$111$23525) (cdddar . g$111$23524) (cddadr . g$111$23523) (cddaar . g$111$23522) (cdaddr . g$111$23521) (cdadar . g$111$23520) (cdaadr . g$111$23519) (cdaaar . g$111$23518) (cadddr . g$111$23517) (caddar . g$111$23516) (cadadr . g$111$23515) (cadaar . g$111$23514) (caaddr . g$111$23513) (caadar . g$111$23512) (caaadr . g$111$23511) (caaaar . g$111$23510) (cdddr . g$111$23509) (cddar . g$111$23508) (cdadr . g$111$23507) (cdaar . g$111$23506) (caddr . g$111$23505) (cadar . g$111$23504) (caadr . g$111$23503) (caaar . g$111$23502) (cddr . g$111$23501) (cdar . g$111$23500) (cadr . g$111$23499) (caar . g$111$23498) (cdr . g$111$23497) (car . g$111$23496) (boolean? . g$111$23495) (boolean=? . g$111$23494) (atan . g$111$23493) (assertion-violation . g$111$23492) (asin . g$111$23491) (apply . g$111$23490) (append . g$111$23489) (angle . g$111$23488) (acos . g$111$23487) (abs . g$111$23486) (/ . g$111$23485) (* . g$111$23484) (- . g$111$23483) (+ . g$111$23482) (>= . g$111$23481) (> . g$111$23480) (= . g$111$23479) (<= . g$111$23478) (< . g$111$23477) (let*-values . g$111$23476) (&no-nans . g$111$23475) (&no-infinities . g$111$23474) (&i/o-encoding . g$111$23473) (&i/o-decoding . g$111$23472) (&i/o-port . g$111$23471) (&i/o-file-does-not-exist . g$111$23470) (&i/o-file-already-exists . g$111$23469) (&i/o-file-is-read-only . g$111$23468) (&i/o-file-protection . g$111$23467) (&i/o-filename . g$111$23466) (&i/o-invalid-position . g$111$23465) (&i/o-write . g$111$23464) (&i/o-read . g$111$23463) (&i/o . g$111$23462) (&undefined . g$111$23461) (&syntax . g$111$23460) (&lexical . g$111$23459) (&implementation . g$111$23458) (&non . g$111$23457) (&who . g$111$23456) (&irritants . g$111$23455) (&assertion . g$111$23454) (&violation . g$111$23453) (&error . g$111$23452) (&serious . g$111$23451) (&warning . g$111$23450) (&message . g$111$23449) (&condition . g$111$23448) (define-condition-type . g$111$23447) (define-enumeration . g$111$23446) (define-record-type . g$111$23445) (parent-rtd . g$111$23444) (nongenerative . g$111$23443) (opaque . g$111$23442) (sealed . g$111$23441) (protocol . g$111$23440) (parent . g$111$23439) (immutable . g$111$23438) (mutable . g$111$23437) (fields . g$111$23436) (error-handling-mode . g$111$23435) (file-options . g$111$23434) (buffer-mode . g$111$23433) (eol-style . g$111$23432) (guard . g$111$23431) (trace-define . g$111$23430) (trace-lambda . g$111$23429) (unsyntax-splicing . g$111$23428) (unsyntax . g$111$23427) (unquote-splicing . g$111$23426) (unquote . g$111$23425) (_ . g$111$23424) (else . g$111$23423) (=> . g$111$23422) (|...| . g$111$23421) (assert . g$111$23420) (endianness . g$111$23419) (delay . g$111$23418) (time . g$111$23417) (or . g$111$23416) (and . g$111$23415) (do . g$111$23414) (cond . g$111$23413) (let* . g$111$23412) (let . g$111$23411) (identifier-syntax . g$111$23410) (with-syntax . g$111$23409) (quasisyntax . g$111$23408) (quasiquote . g$111$23407) (syntax-rules . g$111$23406) (include . g$111$23405) (define-struct . g$111$23404) (record-constructor-descriptor . g$111$23403) (record-type-descriptor . g$111$23402) (let-values . g$111$23401) (case . g$111$23400) (parameterize . g$111$23399) (unless . g$111$23398) (when . g$111$23397) (if . g$111$23396) (letrec* . g$111$23395) (letrec . g$111$23394) (type-descriptor . g$111$23393) (case-lambda . g$111$23392) (lambda . g$111$23391) (syntax . g$111$23390) (syntax-case . g$111$23389) (quote . g$111$23388) (foreign-call . g$111$23387) (letrec-syntax . g$111$23386) (let-syntax . g$111$23385) (set! . g$111$23384) (import . g$111$23383) (begin . g$111$23382) (module . g$111$23381) (define-syntax . g$111$23380) (define . g$111$23379)) '((g$111$13702 core-prim . syntax-error) (g$111$13569 core-prim . syntax-dispatch) (g$111$24088 core-prim . pretty-print) (g$111$24087 core-prim . eval-core) (g$111$24086 core-prim . set-symbol-value!) (g$111$24085 core-prim . symbol-value) (g$111$24084 core-prim . gensym) (g$111$24083 core-prim . void) (g$111$24082 core-prim . load) (g$111$24081 core-prim . interaction-environment) (g$111$24080 core-prim . char-ready?) (g$111$24079 core-prim . string-upcase) (g$111$24078 core-prim . string-titlecase) (g$111$24077 core-prim . string-normalize-nfkd) (g$111$24076 core-prim . string-normalize-nfkc) (g$111$24075 core-prim . string-normalize-nfd) (g$111$24074 core-prim . string-normalize-nfc) (g$111$24073 core-prim . string-foldcase) (g$111$24072 core-prim . string-downcase) (g$111$24071 core-prim . string-ci>?) (g$111$24070 core-prim . string-ci>=?) (g$111$24069 core-prim . string-ci=?) (g$111$24068 core-prim . string-ci<?) (g$111$24067 core-prim . string-ci<=?) (g$111$24066 core-prim . char-whitespace?) (g$111$24065 core-prim . char-upper-case?) (g$111$24064 core-prim . char-title-case?) (g$111$24063 core-prim . char-numeric?) (g$111$24062 core-prim . char-lower-case?) (g$111$24061 core-prim . char-general-category) (g$111$24060 core-prim . char-upcase) (g$111$24059 core-prim . char-titlecase) (g$111$24058 core-prim . char-foldcase) (g$111$24057 core-prim . char-downcase) (g$111$24056 core-prim . char-ci>?) (g$111$24055 core-prim . char-ci>=?) (g$111$24054 core-prim . char-ci=?) (g$111$24053 core-prim . char-ci<?) (g$111$24052 core-prim . char-ci<=?) (g$111$24051 core-prim . char-alphabetic?) (g$111$13274 core-prim . make-variable-transformer) (g$111$13704 core-prim . identifier?) (g$111$13696 core-prim . generate-temporaries) (g$111$13698 core-prim . free-identifier=?) (g$111$13708 core-prim . syntax->datum) (g$111$13706 core-prim . datum->syntax) (g$111$13700 core-prim . bound-identifier=?) (g$111$24050 core-prim . record-type-descriptor?) (g$111$24049 core-prim . record-predicate) (g$111$24048 core-prim . record-mutator) (g$111$24047 core-prim . record-constructor) (g$111$24046 core-prim . record-accessor) (g$111$24045 core-prim . make-record-type-descriptor) (g$111$24044 core-prim . make-record-constructor-descriptor) (g$111$24043 core-prim . record?) (g$111$24042 core-prim . record-type-uid) (g$111$24041 core-prim . record-type-sealed?) (g$111$24040 core-prim . record-type-parent) (g$111$24039 core-prim . record-type-opaque?) (g$111$24038 core-prim . record-type-name) (g$111$24037 core-prim . record-type-generative?) (g$111$24036 core-prim . record-type-field-names) (g$111$24035 core-prim . record-rtd) (g$111$24034 core-prim . record-field-mutable?) (g$111$24033 core-prim . delete-file) (g$111$24032 core-prim . file-exists?) (g$111$24031 core-prim . vector-sort!) (g$111$24030 core-prim . vector-sort) (g$111$24029 core-prim . list-sort) (g$111$24028 core-prim . symbol-hash) (g$111$24027 core-prim . string-ci-hash) (g$111$24026 core-prim . string-hash) (g$111$24025 core-prim . equal-hash) (g$111$24024 core-prim . hashtable-equivalence-function) (g$111$24023 core-prim . make-hashtable) (g$111$24022 core-prim . hashtable-hash-function) (g$111$24021 core-prim . make-eqv-hashtable) (g$111$24020 core-prim . make-eq-hashtable) (g$111$24019 core-prim . hashtable?) (g$111$24018 core-prim . hashtable-update!) (g$111$24017 core-prim . hashtable-size) (g$111$24016 core-prim . hashtable-set!) (g$111$24015 core-prim . hashtable-ref) (g$111$24014 core-prim . hashtable-mutable?) (g$111$24013 core-prim . hashtable-keys) (g$111$24012 core-prim . hashtable-entries) (g$111$24011 core-prim . hashtable-delete!) (g$111$24010 core-prim . hashtable-copy) (g$111$24009 core-prim . hashtable-contains?) (g$111$24008 core-prim . hashtable-clear!) (g$111$24007 core-prim . call-with-output-file) (g$111$24006 core-prim . call-with-input-file) (g$111$24005 core-prim . write-char) (g$111$24004 core-prim . write) (g$111$24003 core-prim . with-output-to-file) (g$111$24002 core-prim . with-input-from-file) (g$111$24001 core-prim . read-char) (g$111$24000 core-prim . read) (g$111$23999 core-prim . peek-char) (g$111$23998 core-prim . open-output-file) (g$111$23997 core-prim . open-input-file) (g$111$23996 core-prim . newline) (g$111$23995 core-prim . display) (g$111$23994 core-prim . close-output-port) (g$111$23993 core-prim . close-input-port) (g$111$23992 core-prim . eof-object?) (g$111$23991 core-prim . eof-object) (g$111$23990 core-prim . current-error-port) (g$111$23989 core-prim . current-output-port) (g$111$23988 core-prim . current-input-port) (g$111$23987 core-prim . output-port?) (g$111$23986 core-prim . input-port?) (g$111$23985 core-prim . utf-8-codec) (g$111$23984 core-prim . utf-16-codec) (g$111$23983 core-prim . transcoder-error-handling-mode) (g$111$23982 core-prim . transcoder-eol-style) (g$111$23981 core-prim . transcoder-codec) (g$111$23980 core-prim . transcoded-port) (g$111$23979 core-prim . textual-port?) (g$111$23978 core-prim . string->bytevector) (g$111$23977 core-prim . standard-output-port) (g$111$23976 core-prim . standard-input-port) (g$111$23975 core-prim . standard-error-port) (g$111$23974 core-prim . set-port-position!) (g$111$23973 core-prim . put-u8) (g$111$23972 core-prim . put-string) (g$111$23971 core-prim . put-datum) (g$111$23970 core-prim . put-char) (g$111$23969 core-prim . put-bytevector) (g$111$23968 core-prim . port?) (g$111$23967 core-prim . port-transcoder) (g$111$23966 core-prim . port-position) (g$111$23965 core-prim . port-has-set-port-position!?) (g$111$23964 core-prim . port-has-port-position?) (g$111$23963 core-prim . port-eof?) (g$111$23962 core-prim . output-port-buffer-mode) (g$111$23961 core-prim . open-string-output-port) (g$111$23960 core-prim . open-string-input-port) (g$111$23959 core-prim . open-file-output-port) (g$111$23958 core-prim . open-file-input/output-port) (g$111$23957 core-prim . open-file-input-port) (g$111$23956 core-prim . open-bytevector-output-port) (g$111$23955 core-prim . open-bytevector-input-port) (g$111$23954 core-prim . native-transcoder) (g$111$23953 core-prim . native-eol-style) (g$111$23952 core-prim . make-transcoder) (g$111$23951 core-prim . latin-1-codec) (g$111$23950 core-prim . make-i/o-write-error) (g$111$23949 core-prim . make-i/o-read-error) (g$111$23948 core-prim . make-i/o-port-error) (g$111$23947 core-prim . make-i/o-invalid-position-error) (g$111$23946 core-prim . make-i/o-filename-error) (g$111$23945 core-prim . make-i/o-file-protection-error) (g$111$23944 core-prim . make-i/o-file-is-read-only-error) (g$111$23943 core-prim . make-i/o-file-does-not-exist-error) (g$111$23942 core-prim . make-i/o-file-already-exists-error) (g$111$23941 core-prim . make-i/o-error) (g$111$23940 core-prim . make-i/o-encoding-error) (g$111$23939 core-prim . make-i/o-decoding-error) (g$111$23938 core-prim . make-custom-textual-output-port) (g$111$23937 core-prim . make-custom-textual-input/output-port) (g$111$23936 core-prim . make-custom-textual-input-port) (g$111$23935 core-prim . make-custom-binary-output-port) (g$111$23934 core-prim . make-custom-binary-input/output-port) (g$111$23933 core-prim . make-custom-binary-input-port) (g$111$23932 core-prim . make-bytevector) (g$111$23931 core-prim . lookahead-u8) (g$111$23930 core-prim . lookahead-char) (g$111$23929 core-prim . i/o-write-error?) (g$111$23928 core-prim . i/o-read-error?) (g$111$23927 core-prim . i/o-port-error?) (g$111$23926 core-prim . i/o-invalid-position-error?) (g$111$23925 core-prim . i/o-filename-error?) (g$111$23924 core-prim . i/o-file-protection-error?) (g$111$23923 core-prim . i/o-file-is-read-only-error?) (g$111$23922 core-prim . i/o-file-does-not-exist-error?) (g$111$23921 core-prim . i/o-file-already-exists-error?) (g$111$23920 core-prim . i/o-error?) (g$111$23919 core-prim . i/o-error-port) (g$111$23918 core-prim . i/o-error-filename) (g$111$23917 core-prim . i/o-encoding-error?) (g$111$23916 core-prim . i/o-encoding-error-char) (g$111$23915 core-prim . i/o-decoding-error?) (g$111$23914 core-prim . get-u8) (g$111$23913 core-prim . get-string-n!) (g$111$23912 core-prim . get-string-n) (g$111$23911 core-prim . get-string-all) (g$111$23910 core-prim . get-line) (g$111$23909 core-prim . get-datum) (g$111$23908 core-prim . get-char) (g$111$23907 core-prim . get-bytevector-some) (g$111$23906 core-prim . get-bytevector-n!) (g$111$23905 core-prim . get-bytevector-n) (g$111$23904 core-prim . get-bytevector-all) (g$111$23903 core-prim . flush-output-port) (g$111$23902 core-prim . close-port) (g$111$23901 core-prim . scheme-report-environment) (g$111$23900 core-prim . quotient) (g$111$13676 core-prim . null-environment) (g$111$23899 core-prim . remainder) (g$111$23898 core-prim . modulo) (g$111$23897 core-prim . inexact->exact) (g$111$23896 core-prim . force) (g$111$23895 core-prim . exact->inexact) (g$111$23894 core-prim . exit) (g$111$23893 core-prim . command-line) (g$111$23892 core-prim . string-fill!) (g$111$23891 core-prim . string-set!) (g$111$23890 core-prim . set-cdr!) (g$111$23889 core-prim . set-car!) (g$111$23888 core-prim . remove) (g$111$23887 core-prim . remv) (g$111$23886 core-prim . remp) (g$111$23885 core-prim . remq) (g$111$23884 core-prim . partition) (g$111$23883 core-prim . memv) (g$111$23882 core-prim . memq) (g$111$23881 core-prim . memp) (g$111$23880 core-prim . member) (g$111$23879 core-prim . exists) (g$111$23878 core-prim . for-all) (g$111$23877 core-prim . fold-right) (g$111$23876 core-prim . fold-left) (g$111$23875 core-prim . find) (g$111$23874 core-prim . filter) (g$111$23873 core-prim . cons*) (g$111$23872 core-prim . assv) (g$111$23871 core-prim . assq) (g$111$23870 core-prim . assp) (g$111$23869 core-prim . assoc) (g$111$23868 core-prim . call-with-string-output-port) (g$111$23867 core-prim . call-with-port) (g$111$23866 core-prim . call-with-bytevector-output-port) (g$111$23865 core-prim . bytevector->string) (g$111$23864 core-prim . buffer-mode?) (g$111$23863 core-prim . binary-port?) (g$111$23862 core-prim . with-exception-handler) (g$111$23861 core-prim . raise-continuable) (g$111$23860 core-prim . raise) (g$111$13682 core-prim . eval) (g$111$13674 core-prim . environment) (g$111$23859 core-prim . make-enumeration) (g$111$23858 core-prim . enum-set=?) (g$111$23857 core-prim . enum-set-universe) (g$111$23856 core-prim . enum-set-union) (g$111$23855 core-prim . enum-set-subset?) (g$111$23854 core-prim . enum-set-projection) (g$111$23853 core-prim . enum-set-member?) (g$111$23852 core-prim . enum-set-intersection) (g$111$23851 core-prim . enum-set-indexer) (g$111$23850 core-prim . enum-set-difference) (g$111$23849 core-prim . enum-set-constructor) (g$111$23848 core-prim . enum-set-complement) (g$111$23847 core-prim . enum-set->list) (g$111$23846 core-prim . who-condition?) (g$111$23845 core-prim . warning?) (g$111$23844 core-prim . violation?) (g$111$23843 core-prim . undefined-violation?) (g$111$23842 core-prim . syntax-violation?) (g$111$23841 core-prim . syntax-violation-subform) (g$111$23840 core-prim . syntax-violation-form) (g$111$23839 core-prim . syntax-violation) (g$111$23838 core-prim . simple-conditions) (g$111$23837 core-prim . serious-condition?) (g$111$23836 core-prim . non-continuable-violation?) (g$111$23835 core-prim . &non-continuable) (g$111$23834 core-prim . message-condition?) (g$111$23833 core-prim . make-who-condition) (g$111$23832 core-prim . make-warning) (g$111$23831 core-prim . make-violation) (g$111$23830 core-prim . make-undefined-violation) (g$111$23829 core-prim . make-syntax-violation) (g$111$23828 core-prim . make-serious-condition) (g$111$23827 core-prim . make-non-continuable-violation) (g$111$23826 core-prim . make-message-condition) (g$111$23825 core-prim . make-lexical-violation) (g$111$23824 core-prim . make-irritants-condition) (g$111$23823 core-prim . make-implementation-restriction-violation) (g$111$23822 core-prim . make-error) (g$111$23821 core-prim . make-assertion-violation) (g$111$23820 core-prim . lexical-violation?) (g$111$23819 core-prim . irritants-condition?) (g$111$23818 core-prim . implementation-restriction-violation?) (g$111$23817 core-prim . &implementation-restriction) (g$111$23816 core-prim . error?) (g$111$23815 core-prim . condition-who) (g$111$23814 core-prim . condition-predicate) (g$111$23813 core-prim . condition-message) (g$111$23812 core-prim . condition-irritants) (g$111$23811 core-prim . condition-accessor) (g$111$23810 core-prim . condition) (g$111$23809 core-prim . assertion-violation?) (g$111$23808 core-prim . condition?) (g$111$23807 core-prim . utf32->string) (g$111$23806 core-prim . utf16->string) (g$111$23805 core-prim . utf8->string) (g$111$23804 core-prim . uint-list->bytevector) (g$111$23803 core-prim . u8-list->bytevector) (g$111$23802 core-prim . string->utf8) (g$111$23801 core-prim . string->utf32) (g$111$23800 core-prim . string->utf16) (g$111$23799 core-prim . sint-list->bytevector) (g$111$23798 core-prim . native-endianness) (g$111$23797 core-prim . bytevector?) (g$111$23796 core-prim . bytevector=?) (g$111$23795 core-prim . bytevector-uint-set!) (g$111$23794 core-prim . bytevector-uint-ref) (g$111$23793 core-prim . bytevector-u8-set!) (g$111$23792 core-prim . bytevector-u8-ref) (g$111$23791 core-prim . bytevector-u64-set!) (g$111$23790 core-prim . bytevector-u64-ref) (g$111$23789 core-prim . bytevector-u64-native-set!) (g$111$23788 core-prim . bytevector-u64-native-ref) (g$111$23787 core-prim . bytevector-u32-set!) (g$111$23786 core-prim . bytevector-u32-ref) (g$111$23785 core-prim . bytevector-u32-native-set!) (g$111$23784 core-prim . bytevector-u32-native-ref) (g$111$23783 core-prim . bytevector-u16-set!) (g$111$23782 core-prim . bytevector-u16-ref) (g$111$23781 core-prim . bytevector-u16-native-set!) (g$111$23780 core-prim . bytevector-u16-native-ref) (g$111$23779 core-prim . bytevector-sint-set!) (g$111$23778 core-prim . bytevector-sint-ref) (g$111$23777 core-prim . bytevector-s8-set!) (g$111$23776 core-prim . bytevector-s8-ref) (g$111$23775 core-prim . bytevector-s64-set!) (g$111$23774 core-prim . bytevector-s64-ref) (g$111$23773 core-prim . bytevector-s64-native-set!) (g$111$23772 core-prim . bytevector-s64-native-ref) (g$111$23771 core-prim . bytevector-s32-set!) (g$111$23770 core-prim . bytevector-s32-ref) (g$111$23769 core-prim . bytevector-s32-native-set!) (g$111$23768 core-prim . bytevector-s32-native-ref) (g$111$23767 core-prim . bytevector-s16-set!) (g$111$23766 core-prim . bytevector-s16-ref) (g$111$23765 core-prim . bytevector-s16-native-set!) (g$111$23764 core-prim . bytevector-s16-native-ref) (g$111$23763 core-prim . bytevector-length) (g$111$23762 core-prim . bytevector-ieee-single-ref) (g$111$23761 core-prim . bytevector-ieee-single-native-set!) (g$111$23760 core-prim . bytevector-ieee-single-native-ref) (g$111$23759 core-prim . bytevector-ieee-double-ref) (g$111$23758 core-prim . bytevector-ieee-double-native-set!) (g$111$23757 core-prim . bytevector-ieee-double-native-ref) (g$111$23756 core-prim . bytevector-fill!) (g$111$23755 core-prim . bytevector-copy!) (g$111$23754 core-prim . bytevector-copy) (g$111$23753 core-prim . bytevector->uint-list) (g$111$23752 core-prim . bytevector->u8-list) (g$111$23751 core-prim . bytevector->sint-list) (g$111$23750 core-prim . no-nans-violation?) (g$111$23749 core-prim . no-infinities-violation?) (g$111$23748 core-prim . make-no-nans-violation) (g$111$23747 core-prim . make-no-infinities-violation) (g$111$23746 core-prim . real->flonum) (g$111$23745 core-prim . flzero?) (g$111$23744 core-prim . fltruncate) (g$111$23743 core-prim . fltan) (g$111$23742 core-prim . flsqrt) (g$111$23741 core-prim . flsin) (g$111$23740 core-prim . flround) (g$111$23739 core-prim . flpositive?) (g$111$23738 core-prim . flonum?) (g$111$23737 core-prim . flodd?) (g$111$23736 core-prim . flnumerator) (g$111$23735 core-prim . flnegative?) (g$111$23734 core-prim . flnan?) (g$111$23733 core-prim . flmod0) (g$111$23732 core-prim . flmod) (g$111$23731 core-prim . flmin) (g$111$23730 core-prim . flmax) (g$111$23729 core-prim . fllog) (g$111$23728 core-prim . flinteger?) (g$111$23727 core-prim . flinfinite?) (g$111$23726 core-prim . flfloor) (g$111$23725 core-prim . flfinite?) (g$111$23724 core-prim . flexpt) (g$111$23723 core-prim . flexp) (g$111$23722 core-prim . fleven?) (g$111$23721 core-prim . fldiv0-and-mod0) (g$111$23720 core-prim . fldiv0) (g$111$23719 core-prim . fldiv-and-mod) (g$111$23718 core-prim . fldiv) (g$111$23717 core-prim . fldenominator) (g$111$23716 core-prim . flcos) (g$111$23715 core-prim . flceiling) (g$111$23714 core-prim . flatan) (g$111$23713 core-prim . flasin) (g$111$23712 core-prim . flacos) (g$111$23711 core-prim . flabs) (g$111$23710 core-prim . fl>?) (g$111$23709 core-prim . fl>=?) (g$111$23708 core-prim . fl=?) (g$111$23707 core-prim . fl<?) (g$111$23706 core-prim . fl<=?) (g$111$23705 core-prim . fl/) (g$111$23704 core-prim . fl-) (g$111$23703 core-prim . fl+) (g$111$23702 core-prim . fl*) (g$111$23701 core-prim . fixnum->flonum) (g$111$23700 core-prim . fxzero?) (g$111$23699 core-prim . fxxor) (g$111$23698 core-prim . fxrotate-bit-field) (g$111$23697 core-prim . fxreverse-bit-field) (g$111$23696 core-prim . fxpositive?) (g$111$23695 core-prim . fxodd?) (g$111$23694 core-prim . fxnot) (g$111$23693 core-prim . fxnegative?) (g$111$23692 core-prim . fxmod0) (g$111$23691 core-prim . fxmod) (g$111$23690 core-prim . fxmin) (g$111$23689 core-prim . fxmax) (g$111$23688 core-prim . fxlength) (g$111$23687 core-prim . fxior) (g$111$23686 core-prim . fxif) (g$111$23685 core-prim . fxfirst-bit-set) (g$111$23684 core-prim . fxeven?) (g$111$23683 core-prim . fxdiv0-and-mod0) (g$111$23682 core-prim . fxdiv0) (g$111$23681 core-prim . fxdiv-and-mod) (g$111$23680 core-prim . fxdiv) (g$111$23679 core-prim . fxcopy-bit-field) (g$111$23678 core-prim . fxcopy-bit) (g$111$23677 core-prim . fxbit-set?) (g$111$23676 core-prim . fxbit-field) (g$111$23675 core-prim . fxbit-count) (g$111$23674 core-prim . fxarithmetic-shift-right) (g$111$23673 core-prim . fxarithmetic-shift-left) (g$111$23672 core-prim . fxarithmetic-shift) (g$111$23671 core-prim . fxand) (g$111$23670 core-prim . fx>?) (g$111$23669 core-prim . fx>=?) (g$111$23668 core-prim . fx=?) (g$111$23667 core-prim . fx<?) (g$111$23666 core-prim . fx<=?) (g$111$23665 core-prim . fx-/carry) (g$111$23664 core-prim . fx-) (g$111$23663 core-prim . fx+/carry) (g$111$23662 core-prim . fx+) (g$111$23661 core-prim . fx*/carry) (g$111$23660 core-prim . fx*) (g$111$23659 core-prim . greatest-fixnum) (g$111$23658 core-prim . least-fixnum) (g$111$23657 core-prim . fixnum-width) (g$111$23656 core-prim . fixnum?) (g$111$23655 core-prim . bitwise-rotate-bit-field) (g$111$23654 core-prim . bitwise-reverse-bit-field) (g$111$23653 core-prim . bitwise-length) (g$111$23652 core-prim . bitwise-if) (g$111$23651 core-prim . bitwise-first-bit-set) (g$111$23650 core-prim . bitwise-copy-bit-field) (g$111$23649 core-prim . bitwise-copy-bit) (g$111$23648 core-prim . bitwise-bit-set?) (g$111$23647 core-prim . bitwise-bit-field) (g$111$23646 core-prim . bitwise-bit-count) (g$111$23645 core-prim . bitwise-xor) (g$111$23644 core-prim . bitwise-ior) (g$111$23643 core-prim . bitwise-and) (g$111$23642 core-prim . bitwise-not) (g$111$23641 core-prim . bitwise-arithmetic-shift-right) (g$111$23640 core-prim . bitwise-arithmetic-shift-left) (g$111$23639 core-prim . bitwise-arithmetic-shift) (g$111$23638 core-prim . zero?) (g$111$23637 core-prim . vector?) (g$111$23636 core-prim . vector-set!) (g$111$23635 core-prim . vector-ref) (g$111$23634 core-prim . vector-map) (g$111$23633 core-prim . vector-length) (g$111$23632 core-prim . vector-for-each) (g$111$23631 core-prim . vector-fill!) (g$111$23630 core-prim . vector->list) (g$111$23629 core-prim . vector) (g$111$23628 core-prim . values) (g$111$23627 core-prim . truncate) (g$111$23626 core-prim . tan) (g$111$23625 core-prim . symbol?) (g$111$23624 core-prim . symbol=?) (g$111$23623 core-prim . symbol->string) (g$111$23622 core-prim . substring) (g$111$23621 core-prim . string?) (g$111$23620 core-prim . string>?) (g$111$23619 core-prim . string>=?) (g$111$23618 core-prim . string=?) (g$111$23617 core-prim . string<?) (g$111$23616 core-prim . string<=?) (g$111$23615 core-prim . string-ref) (g$111$23614 core-prim . string-length) (g$111$23613 core-prim . string-for-each) (g$111$23612 core-prim . string-copy) (g$111$23611 core-prim . string-append) (g$111$23610 core-prim . string->symbol) (g$111$23609 core-prim . string->number) (g$111$23608 core-prim . string->list) (g$111$23607 core-prim . string) (g$111$23606 core-prim . sqrt) (g$111$23605 core-prim . sin) (g$111$23604 core-prim . round) (g$111$23603 core-prim . reverse) (g$111$23602 core-prim . real?) (g$111$23601 core-prim . real-valued?) (g$111$23600 core-prim . real-part) (g$111$23599 core-prim . rationalize) (g$111$23598 core-prim . rational?) (g$111$23597 core-prim . rational-valued?) (g$111$23596 core-prim . procedure?) (g$111$23595 core-prim . positive?) (g$111$23594 core-prim . pair?) (g$111$23593 core-prim . odd?) (g$111$23592 core-prim . numerator) (g$111$23591 core-prim . number?) (g$111$23590 core-prim . number->string) (g$111$23589 core-prim . null?) (g$111$23588 core-prim . not) (g$111$23587 core-prim . negative?) (g$111$23586 core-prim . nan?) (g$111$23585 core-prim . min) (g$111$23584 core-prim . max) (g$111$23583 core-prim . map) (g$111$23582 core-prim . make-vector) (g$111$23581 core-prim . make-string) (g$111$23580 core-prim . make-rectangular) (g$111$23579 core-prim . make-polar) (g$111$23578 core-prim . magnitude) (g$111$23577 core-prim . log) (g$111$23576 core-prim . list?) (g$111$23575 core-prim . list-tail) (g$111$23574 core-prim . list-ref) (g$111$23573 core-prim . list->vector) (g$111$23572 core-prim . list->string) (g$111$23571 core-prim . list) (g$111$23570 core-prim . length) (g$111$23569 core-prim . lcm) (g$111$23568 core-prim . integer?) (g$111$23567 core-prim . integer-valued?) (g$111$23566 core-prim . integer->char) (g$111$23565 core-prim . infinite?) (g$111$23564 core-prim . inexact?) (g$111$23563 core-prim . inexact) (g$111$23562 core-prim . imag-part) (g$111$23561 core-prim . gcd) (g$111$23560 core-prim . for-each) (g$111$23559 core-prim . floor) (g$111$23558 core-prim . finite?) (g$111$23557 core-prim . expt) (g$111$23556 core-prim . exp) (g$111$23555 core-prim . exact?) (g$111$23554 core-prim . exact-integer-sqrt) (g$111$23553 core-prim . exact) (g$111$23552 core-prim . even?) (g$111$23551 core-prim . error) (g$111$23550 core-prim . eqv?) (g$111$23549 core-prim . equal?) (g$111$23548 core-prim . eq?) (g$111$23547 core-prim . dynamic-wind) (g$111$23546 core-prim . div0-and-mod0) (g$111$23545 core-prim . mod0) (g$111$23544 core-prim . div0) (g$111$23543 core-prim . div-and-mod) (g$111$23542 core-prim . mod) (g$111$23541 core-prim . div) (g$111$23540 core-prim . denominator) (g$111$23539 core-prim . cos) (g$111$23538 core-prim . cons) (g$111$23537 core-prim . complex?) (g$111$23536 core-prim . char?) (g$111$23535 core-prim . char>?) (g$111$23534 core-prim . char>=?) (g$111$23533 core-prim . char=?) (g$111$23532 core-prim . char<?) (g$111$23531 core-prim . char<=?) (g$111$23530 core-prim . char->integer) (g$111$23529 core-prim . ceiling) (g$111$23528 core-prim . call-with-values) (g$111$23527 core-prim . call/cc) (g$111$23526 core-prim . call-with-current-continuation) (g$111$23525 core-prim . cddddr) (g$111$23524 core-prim . cdddar) (g$111$23523 core-prim . cddadr) (g$111$23522 core-prim . cddaar) (g$111$23521 core-prim . cdaddr) (g$111$23520 core-prim . cdadar) (g$111$23519 core-prim . cdaadr) (g$111$23518 core-prim . cdaaar) (g$111$23517 core-prim . cadddr) (g$111$23516 core-prim . caddar) (g$111$23515 core-prim . cadadr) (g$111$23514 core-prim . cadaar) (g$111$23513 core-prim . caaddr) (g$111$23512 core-prim . caadar) (g$111$23511 core-prim . caaadr) (g$111$23510 core-prim . caaaar) (g$111$23509 core-prim . cdddr) (g$111$23508 core-prim . cddar) (g$111$23507 core-prim . cdadr) (g$111$23506 core-prim . cdaar) (g$111$23505 core-prim . caddr) (g$111$23504 core-prim . cadar) (g$111$23503 core-prim . caadr) (g$111$23502 core-prim . caaar) (g$111$23501 core-prim . cddr) (g$111$23500 core-prim . cdar) (g$111$23499 core-prim . cadr) (g$111$23498 core-prim . caar) (g$111$23497 core-prim . cdr) (g$111$23496 core-prim . car) (g$111$23495 core-prim . boolean?) (g$111$23494 core-prim . boolean=?) (g$111$23493 core-prim . atan) (g$111$23492 core-prim . assertion-violation) (g$111$23491 core-prim . asin) (g$111$23490 core-prim . apply) (g$111$23489 core-prim . append) (g$111$23488 core-prim . angle) (g$111$23487 core-prim . acos) (g$111$23486 core-prim . abs) (g$111$23485 core-prim . /) (g$111$23484 core-prim . *) (g$111$23483 core-prim . -) (g$111$23482 core-prim . +) (g$111$23481 core-prim . >=) (g$111$23480 core-prim . >) (g$111$23479 core-prim . =) (g$111$23478 core-prim . <=) (g$111$23477 core-prim . <) (g$111$23476 core-prim . let*-values) (g$111$23475 $core-rtd &no-nans-rtd &no-nans-rcd) (g$111$23474 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$111$23473 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$111$23472 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$111$23471 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$111$23470 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$111$23469 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$111$23468 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$111$23467 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$111$23466 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$111$23465 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$111$23464 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$111$23463 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$111$23462 $core-rtd &i/o-rtd &i/o-rcd) (g$111$23461 $core-rtd &undefined-rtd &undefined-rcd) (g$111$23460 $core-rtd &syntax-rtd &syntax-rcd) (g$111$23459 $core-rtd &lexical-rtd &lexical-rcd) (g$111$23458 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$111$23457 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$111$23456 $core-rtd &who-rtd &who-rcd) (g$111$23455 $core-rtd &irritants-rtd &irritants-rcd) (g$111$23454 $core-rtd &assertion-rtd &assertion-rcd) (g$111$23453 $core-rtd &violation-rtd &violation-rcd) (g$111$23452 $core-rtd &error-rtd &error-rcd) (g$111$23451 $core-rtd &serious-rtd &serious-rcd) (g$111$23450 $core-rtd &warning-rtd &warning-rcd) (g$111$23449 $core-rtd &message-rtd &message-rcd) (g$111$23448 $core-rtd &condition-rtd &condition-rcd) (g$111$23447 macro . define-condition-type) (g$111$23446 macro . define-enumeration) (g$111$23445 macro . define-record-type) (g$111$23444 macro . parent-rtd) (g$111$23443 macro . nongenerative) (g$111$23442 macro . opaque) (g$111$23441 macro . sealed) (g$111$23440 macro . protocol) (g$111$23439 macro . parent) (g$111$23438 macro . immutable) (g$111$23437 macro . mutable) (g$111$23436 macro . fields) (g$111$23435 macro . error-handling-mode) (g$111$23434 macro . file-options) (g$111$23433 macro . buffer-mode) (g$111$23432 macro . eol-style) (g$111$23431 macro . guard) (g$111$23430 macro . trace-define) (g$111$23429 macro . trace-lambda) (g$111$23428 macro . unsyntax-splicing) (g$111$23427 macro . unsyntax) (g$111$23426 macro . unquote-splicing) (g$111$23425 macro . unquote) (g$111$23424 macro . _) (g$111$23423 macro . else) (g$111$23422 macro . =>) (g$111$23421 macro . |...|) (g$111$23420 macro . assert) (g$111$23419 macro . endianness) (g$111$23418 macro . delay) (g$111$23417 macro . time) (g$111$23416 macro . or) (g$111$23415 macro . and) (g$111$23414 macro . do) (g$111$23413 macro . cond) (g$111$23412 macro . let*) (g$111$23411 macro . let) (g$111$23410 macro . identifier-syntax) (g$111$23409 macro . with-syntax) (g$111$23408 macro . quasisyntax) (g$111$23407 macro . quasiquote) (g$111$23406 macro . syntax-rules) (g$111$23405 macro . include) (g$111$23404 macro . define-struct) (g$111$23403 core-macro . record-constructor-descriptor) (g$111$23402 core-macro . record-type-descriptor) (g$111$23401 core-macro . let-values) (g$111$23400 core-macro . case) (g$111$23399 core-macro . parameterize) (g$111$23398 core-macro . unless) (g$111$23397 core-macro . when) (g$111$23396 core-macro . if) (g$111$23395 core-macro . letrec*) (g$111$23394 core-macro . letrec) (g$111$23393 core-macro . type-descriptor) (g$111$23392 core-macro . case-lambda) (g$111$23391 core-macro . lambda) (g$111$23390 core-macro . syntax) (g$111$23389 core-macro . syntax-case) (g$111$23388 core-macro . quote) (g$111$23387 core-macro . foreign-call) (g$111$23386 letrec-syntax) (g$111$23385 let-syntax) (g$111$23384 set!) (g$111$23383 import) (g$111$23382 begin) (g$111$23381 module) (g$111$23380 define-syntax) (g$111$23379 define)) values values '#f) (g$111$12834 'g$111$24121 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . g$111$24088) (eval-core . g$111$24087) (set-symbol-value! . g$111$24086) (symbol-value . g$111$24085) (gensym . g$111$24084) (void . g$111$24083)) '() values values '#f))


(begin (define g$111$23377 '#f) ((lambda (g$111$23361) (begin (set! g$111$23361 (lambda (g$111$23363) ((lambda (g$111$23365) (g$111$23171 g$111$23365)) (with-input-from-file g$111$23363 (lambda () (letrec ((g$111$23367 (lambda () ((lambda (g$111$23369) (if (eof-object? g$111$23369) '() (cons g$111$23369 (g$111$23367)))) (read))))) (g$111$23367))))))) (begin (set! g$111$23377 g$111$23361) (display '"r6rs psyntax ready\n") ((lambda (g$111$23371) (begin (if (= (length g$111$23371) '2) (void) (begin (display '"provide a script name argument\n") (exit '17))) ((lambda (g$111$23373 g$111$23374) (g$111$23361 (car g$111$23374))) (car g$111$23371) (cdr g$111$23371)))) (command-line)) (exit '0)))) '#f))


