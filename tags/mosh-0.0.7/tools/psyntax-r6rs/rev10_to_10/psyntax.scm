;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2886@read-annotated G2888@annotation-stripped G288a@annotation? G288c@annotation-source G288e@annotation-expression G2890@scm->fasl G2892@fasl-save G2894@fasl-load G2896@serialize-library G2898@load-serialized-library G289a@make-record-printer G289c@compile-core G289e@read-library-source-file G28a0@make-parameter G293a@file-options-spec) (begin (set! G2886@read-annotated read) (set! G2888@annotation-stripped (lambda (G293b@x) (G288e@annotation-expression G293b@x))) (set! G288a@annotation? (lambda (G293d@x) (source-info G293d@x))) (set! G288c@annotation-source (lambda (G293f@x) (source-info G293f@x))) (set! G288e@annotation-expression (lambda (G2941@x) (if (pair? G2941@x) (cons (car G2941@x) (cdr G2941@x)) (display '"line:46\n")))) (set! G2890@scm->fasl (lambda (G2943@filename) (string-append G2943@filename '".fasl"))) (set! G2892@fasl-save (lambda (G2945@filename G2946@obj) (call-with-port (open-file-output-port G2945@filename) (lambda (G2949@port) ((symbol-value 'fasl-write!) G2946@obj G2949@port))))) (set! G2894@fasl-load (lambda (G294b@filename) (call-with-port (open-file-input-port G294b@filename) (symbol-value 'fasl-read!)))) (set! G2896@serialize-library (lambda (G294d@filename G294e@obj) (begin (format '#t '"serialize-library ~a\n..." G294d@filename) ((lambda (G2951@fasl-file) (begin (if (file-exists? G2951@fasl-file) (delete-file G2951@fasl-file) (void)) (call/cc (lambda (G2954@G2953) (with-exception-handler (lambda (G2956@c) (G2954@G2953 (if '#t (begin (format '#t '"Warning:serialize-library failed " G294d@filename) (if (file-exists? G2951@fasl-file) (delete-file G2951@fasl-file) (void)) '#f) (raise G2956@c)))) (lambda () (begin '#f (G2892@fasl-save G2951@fasl-file G294e@obj) (display '"OK\n")))))))) (G2890@scm->fasl G294d@filename))))) (set! G2898@load-serialized-library (lambda (G2958@filename G2959@obj) ((lambda (G295c@fasl-file) (if (if (file-exists? G295c@fasl-file) (begin '#f ((symbol-value 'file-newer?) G295c@fasl-file G2958@filename)) '#f) ((lambda (G295e@expanded2core) ((lambda (G2960@code) ((lambda (G2962@pivot) ((lambda (G2964@visit) ((lambda (G2966@visit-proc) ((lambda () (begin (set-car! G2962@pivot G2966@visit-proc) ((lambda (G2968@pivot) ((lambda (G296a@invoke) ((lambda () (begin (set-car! G2968@pivot (lambda () (eval-core G296a@invoke))) (apply G2959@obj G2960@code))))) (G295e@expanded2core (car G2968@pivot)))) (cdr G2962@pivot)) '#t)))) (lambda () (eval-core G2964@visit)))) (G295e@expanded2core (car G2962@pivot)))) (cddddr (cddddr G2960@code)))) (G2894@fasl-load G295c@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2890@scm->fasl G2958@filename)))) (set! G289a@make-record-printer (lambda (G296c@name G296d@printer) (lambda G2970@x (begin (display '"record printer") (for-each display G2970@x))))) (set! G289c@compile-core (lambda G2972@x (apply error 'comile-core '"not implementated" G2972@x))) (set! G289e@read-library-source-file (lambda (G2974@file-name) (with-input-from-file G2974@file-name G2886@read-annotated))) (set! G28a0@make-parameter (lambda G2984 ((lambda (G2985) (if (= G2985 '1) (apply (lambda (G2976@x) (G28a0@make-parameter G2976@x (lambda (G2978@x) G2978@x))) G2984) (if (= G2985 '2) (apply (lambda (G297a@x G297b@fender) ((lambda (G297e@x) (lambda G2982 ((lambda (G2983) (if (= G2983 '0) (apply (lambda () G297e@x) G2982) (if (= G2983 '1) (apply (lambda (G2980@v) (set! G297e@x (G297b@fender G2980@v))) G2982) (error 'apply '"invalid arg count")))) (length G2982)))) (G297b@fender G297a@x))) G2984) (error 'apply '"invalid arg count")))) (length G2984)))) (set! G293a@file-options-spec (lambda (G2986@x) G2986@x)) (begin (set! G2996@G293a@file-options-spec G293a@file-options-spec) (set! G2995@G28a0@make-parameter G28a0@make-parameter) (set! G2994@G289e@read-library-source-file G289e@read-library-source-file) (set! G2993@G289c@compile-core G289c@compile-core) (set! G2992@G289a@make-record-printer G289a@make-record-printer) (set! G2991@G2898@load-serialized-library G2898@load-serialized-library) (set! G2990@G2896@serialize-library G2896@serialize-library) (set! G298f@G2894@fasl-load G2894@fasl-load) (set! G298e@G2892@fasl-save G2892@fasl-save) (set! G298d@G2890@scm->fasl G2890@scm->fasl) (set! G298c@G288e@annotation-expression G288e@annotation-expression) (set! G298b@G288c@annotation-source G288c@annotation-source) (set! G298a@G288a@annotation? G288a@annotation?) (set! G2989@G2888@annotation-stripped G2888@annotation-stripped) (set! G2988@G2886@read-annotated G2886@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G299b@current-primitive-locations G299d@mutable? G299f@rewriter G29a1@expanded->core G29a3@compile-core-expr G29a5@pretty-print G29a7@compile-core-expr-to-port) (begin (set! G299b@current-primitive-locations (G2995@G28a0@make-parameter (lambda (G29a8@x) '#f) (lambda (G29aa@p) G29aa@p))) (set! G299d@mutable? (lambda (G29ac@x) ((lambda (G29af@simple?) (begin (set! G29af@simple? (lambda (G29b0@x) ((lambda (G29b2@t) (if G29b2@t G29b2@t ((lambda (G29b4@t) (if G29b4@t G29b4@t ((lambda (G29b6@t) (if G29b6@t G29b6@t ((lambda (G29b8@t) (if G29b8@t G29b8@t ((lambda (G29ba@t) (if G29ba@t G29ba@t ((lambda (G29bc@t) (if G29bc@t G29bc@t (begin '#f (number? G29b0@x)))) (bytevector? G29b0@x)))) (string? G29b0@x)))) (boolean? G29b0@x)))) (symbol? G29b0@x)))) (char? G29b0@x)))) (null? G29b0@x)))) (not (G29af@simple? G29ac@x)))) '#f))) (set! G299f@rewriter (lambda (G29be@quote-hack?) ((lambda (G29c1@f) (begin (set! G29c1@f (lambda (G29c2@x) (if (pair? G29c2@x) ((lambda (G29c4@t) (if (memv G29c4@t '(quote)) (if (if G29be@quote-hack? (begin '#f (G299d@mutable? (cadr G29c2@x))) '#f) ((lambda (G29c6@g) (begin (set-symbol-value! G29c6@g (cadr G29c2@x)) G29c6@g)) (gensym)) G29c2@x) (if (memv G29c4@t '(case-lambda)) (cons 'case-lambda (map (lambda (G29c8@x) (cons (car G29c8@x) (map G29c1@f (cdr G29c8@x)))) (cdr G29c2@x))) (if (memv G29c4@t '(lambda)) (cons* 'lambda (cadr G29c2@x) (map G29c1@f (cddr G29c2@x))) (if (memv G29c4@t '(letrec)) ((lambda (G29ca@bindings G29cb@body*) ((lambda (G29ce@lhs* G29cf@rhs*) (cons* 'letrec (map list G29ce@lhs* (map G29c1@f G29cf@rhs*)) (map G29c1@f G29cb@body*))) (map car G29ca@bindings) (map cadr G29ca@bindings))) (cadr G29c2@x) (cddr G29c2@x)) (if (memv G29c4@t '(letrec*)) ((lambda (G29d2@bindings G29d3@body*) ((lambda (G29d6@lhs* G29d7@rhs*) (cons* 'letrec* (map list G29d6@lhs* (map G29c1@f G29d7@rhs*)) (map G29c1@f G29d3@body*))) (map car G29d2@bindings) (map cadr G29d2@bindings))) (cadr G29c2@x) (cddr G29c2@x)) (if (memv G29c4@t '(library-letrec*)) ((lambda (G29da@name G29db@x) ((lambda (G29de@bindings G29df@body*) ((lambda (G29e2@lhs* G29e3@lhs** G29e4@rhs*) (cons* 'library-letrec* G29da@name (map list G29e2@lhs* G29e3@lhs** (map G29c1@f G29e4@rhs*)) (map G29c1@f G29df@body*))) (map car G29de@bindings) (map cadr G29de@bindings) (map caddr G29de@bindings))) (cadr G29db@x) (cddr G29db@x))) (cadr G29c2@x) (cdr G29c2@x)) (if (memv G29c4@t '(begin)) (cons 'begin (map G29c1@f (cdr G29c2@x))) (if (memv G29c4@t '(set!)) (list 'set! (cadr G29c2@x) (G29c1@f (caddr G29c2@x))) (if (memv G29c4@t '(primitive)) ((lambda (G29e8@op) ((lambda (G29ea@t) (if G29ea@t ((lambda (G29ec@loc) G29ec@loc) G29ea@t) G29e8@op)) ((G299b@current-primitive-locations) G29e8@op))) (cadr G29c2@x)) (if (memv G29c4@t '(define)) G29c2@x (if (list? G29c2@x) (map G29c1@f G29c2@x) (error 'rewrite '"invalid form ~s ~s" G29c2@x (list? G29c2@x)))))))))))))) (car G29c2@x)) G29c2@x))) G29c1@f)) '#f))) (set! G29a1@expanded->core (lambda (G29ee@x) ((G299f@rewriter '#t) G29ee@x))) (set! G29a3@compile-core-expr (lambda (G29f0@x) ((G299f@rewriter '#f) G29f0@x))) (set! G29a5@pretty-print write) (set! G29a7@compile-core-expr-to-port (lambda (G29f2@x G29f3@p) (G29a5@pretty-print ((G299f@rewriter '#f) G29f2@x) G29f3@p))) (begin (set! G29fc@G29a7@compile-core-expr-to-port G29a7@compile-core-expr-to-port) (set! G29fb@G29a5@pretty-print G29a5@pretty-print) (set! G29fa@G29a3@compile-core-expr G29a3@compile-core-expr) (set! G29f9@G29a1@expanded->core G29a1@expanded->core) (set! G29f8@G299f@rewriter G299f@rewriter) (set! G29f7@G299d@mutable? G299d@mutable?) (set! G29f6@G299b@current-primitive-locations G299b@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a56@make-collection G2a58@current-library-collection G2a5e@G2a59 G2a60@G2a5b G2a62@G2a5a G2a67@library? G2a69@make-library G2a6b@library-id G2a6d@library-name G2a6f@library-version G2a71@library-imp* G2a73@library-vis* G2a75@library-inv* G2a77@library-subst G2a79@library-env G2a7b@library-visit-state G2a7d@library-invoke-state G2a7f@library-visit-code G2a81@library-invoke-code G2a83@library-visible? G2a85@library-source-file-name G2a87@set-library-id! G2a89@set-library-name! G2a8b@set-library-version! G2a8d@set-library-imp*! G2a8f@set-library-vis*! G2a91@set-library-inv*! G2a93@set-library-subst! G2a95@set-library-env! G2a97@set-library-visit-state! G2a99@set-library-invoke-state! G2a9b@set-library-visit-code! G2a9d@set-library-invoke-code! G2a9f@set-library-visible?! G2aa1@set-library-source-file-name! G2aa3@rp G2aa5@find-dependencies G2aa7@find-library-by G2aa9@library-path G2aab@library-extensions G2aad@library-name->file-name G2aaf@file-locator G2ab1@serialize-all G2ab3@current-precompiled-library-loader G2ab5@try-load-from-file G2ab7@library-loader G2ab9@current-library-expander G2abb@external-pending-libraries G2abd@find-external-library G2abf@find-library-by-name G2ac1@library-exists? G2ac3@find-library-by-spec/die G2ac5@label->binding-table G2ac7@install-library-record G2ac9@install-library G2acb@imported-label->binding G2acd@invoke-library G2acf@visit-library G2ad1@invoke-library-by-spec G2ad3@installed-libraries G2ad5@library-spec) (begin (set! G2a56@make-collection (lambda () ((lambda (G2ad6@set) ((lambda (G2ad9@set-cons) (begin (set! G2ad9@set-cons (lambda (G2ade@x G2adf@ls) (if (memq G2ade@x G2adf@ls) G2adf@ls (cons G2ade@x G2adf@ls)))) (lambda G2adc ((lambda (G2add) (if (= G2add '0) (apply (lambda () G2ad6@set) G2adc) (if (= G2add '1) (apply (lambda (G2ada@x) (set! G2ad6@set (G2ad9@set-cons G2ada@x G2ad6@set))) G2adc) (error 'apply '"invalid arg count")))) (length G2adc))))) '#f)) '()))) (set! G2a58@current-library-collection (G2995@G28a0@make-parameter (G2a56@make-collection) (lambda (G2ae2@x) (begin (if (not (procedure? G2ae2@x)) (assertion-violation 'current-library-collection '"not a procedure" G2ae2@x) (void)) G2ae2@x)))) (set! G2a5e@G2a59 (make-record-type-descriptor 'library '#f 'G2a5c '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a60@G2a5b '#f) (set! G2a62@G2a5a (make-record-constructor-descriptor G2a5e@G2a59 '#f G2a60@G2a5b)) (set! G2a67@library? (record-predicate G2a5e@G2a59)) (set! G2a69@make-library (record-constructor G2a62@G2a5a)) (set! G2a6b@library-id (record-accessor G2a5e@G2a59 '0)) (set! G2a6d@library-name (record-accessor G2a5e@G2a59 '1)) (set! G2a6f@library-version (record-accessor G2a5e@G2a59 '2)) (set! G2a71@library-imp* (record-accessor G2a5e@G2a59 '3)) (set! G2a73@library-vis* (record-accessor G2a5e@G2a59 '4)) (set! G2a75@library-inv* (record-accessor G2a5e@G2a59 '5)) (set! G2a77@library-subst (record-accessor G2a5e@G2a59 '6)) (set! G2a79@library-env (record-accessor G2a5e@G2a59 '7)) (set! G2a7b@library-visit-state (record-accessor G2a5e@G2a59 '8)) (set! G2a7d@library-invoke-state (record-accessor G2a5e@G2a59 '9)) (set! G2a7f@library-visit-code (record-accessor G2a5e@G2a59 '10)) (set! G2a81@library-invoke-code (record-accessor G2a5e@G2a59 '11)) (set! G2a83@library-visible? (record-accessor G2a5e@G2a59 '12)) (set! G2a85@library-source-file-name (record-accessor G2a5e@G2a59 '13)) (set! G2a87@set-library-id! (record-mutator G2a5e@G2a59 '0)) (set! G2a89@set-library-name! (record-mutator G2a5e@G2a59 '1)) (set! G2a8b@set-library-version! (record-mutator G2a5e@G2a59 '2)) (set! G2a8d@set-library-imp*! (record-mutator G2a5e@G2a59 '3)) (set! G2a8f@set-library-vis*! (record-mutator G2a5e@G2a59 '4)) (set! G2a91@set-library-inv*! (record-mutator G2a5e@G2a59 '5)) (set! G2a93@set-library-subst! (record-mutator G2a5e@G2a59 '6)) (set! G2a95@set-library-env! (record-mutator G2a5e@G2a59 '7)) (set! G2a97@set-library-visit-state! (record-mutator G2a5e@G2a59 '8)) (set! G2a99@set-library-invoke-state! (record-mutator G2a5e@G2a59 '9)) (set! G2a9b@set-library-visit-code! (record-mutator G2a5e@G2a59 '10)) (set! G2a9d@set-library-invoke-code! (record-mutator G2a5e@G2a59 '11)) (set! G2a9f@set-library-visible?! (record-mutator G2a5e@G2a59 '12)) (set! G2aa1@set-library-source-file-name! (record-mutator G2a5e@G2a59 '13)) (set! G2aa3@rp (G2992@G289a@make-record-printer 'library (lambda (G2ae4@x G2ae5@p G2ae6@wr) (begin (if (not (G2a67@library? G2ae4@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a6f@library-version G2ae4@x)) (G2a6d@library-name G2ae4@x) (append (G2a6d@library-name G2ae4@x) (list (G2a6f@library-version G2ae4@x))))) G2ae5@p))))) (set! G2aa5@find-dependencies (lambda (G2aea@ls) (if (null? G2aea@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2aa7@find-library-by (lambda (G2aec@pred) ((letrec ((G2aee@f (lambda (G2af0@ls) (if (null? G2af0@ls) '#f (if (G2aec@pred (car G2af0@ls)) (car G2af0@ls) (G2aee@f (cdr G2af0@ls))))))) G2aee@f) ((G2a58@current-library-collection))))) (set! G2aa9@library-path (G2995@G28a0@make-parameter '(".") (lambda (G2af2@x) (if (if (list? G2af2@x) (begin '#f (for-all string? G2af2@x)) '#f) (map (lambda (G2af4@x) G2af4@x) G2af2@x) (assertion-violation 'library-path '"not a list of strings" G2af2@x))))) (set! G2aab@library-extensions (G2995@G28a0@make-parameter '(".sls" ".ss" ".scm") (lambda (G2af6@x) (if (if (list? G2af6@x) (begin '#f (for-all string? G2af6@x)) '#f) (map (lambda (G2af8@x) G2af8@x) G2af6@x) (assertion-violation 'library-extensions '"not a list of strings" G2af6@x))))) (set! G2aad@library-name->file-name (lambda (G2afa@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2afe@G2afc G2aff@G2afd) ((lambda (G2b02@extract G2b03@p) ((lambda (G2b07@display-hex) (begin (set! G2b07@display-hex (lambda (G2b16@n) (if (<= '0 G2b16@n '9) (display G2b16@n G2b03@p) (display (integer->char (+ (char->integer '#\A) (- G2b16@n '10))) G2b03@p)))) (begin ((letrec ((G2b08@f (lambda (G2b0a@ls) (if (not (null? G2b0a@ls)) (begin (display '"/" G2b03@p) (for-each (lambda (G2b0c@c) (if ((lambda (G2b0e@t) (if G2b0e@t G2b0e@t ((lambda (G2b10@t) (if G2b10@t G2b10@t ((lambda (G2b12@t) (if G2b12@t G2b12@t (begin '#f (memv G2b0c@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2b0c@c '#\9)))) (char<=? '#\A G2b0c@c '#\Z)))) (char<=? '#\a G2b0c@c '#\z)) (display G2b0c@c G2b03@p) (begin (display '"%" G2b03@p) ((lambda (G2b14@n) (begin (G2b07@display-hex (quotient G2b14@n '16)) (G2b07@display-hex (remainder G2b14@n '16)))) (char->integer G2b0c@c))))) (string->list (symbol->string (car G2b0a@ls)))) (G2b08@f (cdr G2b0a@ls))) (void))))) G2b08@f) G2afa@x) (G2b02@extract)))) '#f)) G2aff@G2afd G2afe@G2afc))))) (set! G2aaf@file-locator (G2995@G28a0@make-parameter (lambda (G2b18@x) ((lambda (G2b1a@str) ((letrec ((G2b1c@f (lambda (G2b1e@ls G2b1f@exts G2b20@failed-list) (if (null? G2b1e@ls) ((lambda () ((lambda (G2b2c@G2b27 G2b2e@G2b29 G2b30@G2b28 G2b35@G2b26 G2b37@make-library-resolution-condition G2b39@G2b24 G2b3b@G2b25 G2b3d@library-resolution-condition? G2b3f@condition-library G2b41@condition-files) (begin (set! G2b2c@G2b27 (make-record-type-descriptor '&library-resolution &condition-rtd 'G2b2a '#f '#f '#((immutable library) (immutable files)))) (set! G2b2e@G2b29 '#f) (set! G2b30@G2b28 (make-record-constructor-descriptor G2b2c@G2b27 &condition-rcd G2b2e@G2b29)) (set! G2b35@G2b26 (record-predicate G2b2c@G2b27)) (set! G2b37@make-library-resolution-condition (record-constructor G2b30@G2b28)) (set! G2b39@G2b24 (record-accessor G2b2c@G2b27 '0)) (set! G2b3b@G2b25 (record-accessor G2b2c@G2b27 '1)) (set! G2b3d@library-resolution-condition? (condition-predicate G2b2c@G2b27)) (set! G2b3f@condition-library (condition-accessor G2b2c@G2b27 G2b39@G2b24)) (set! G2b41@condition-files (condition-accessor G2b2c@G2b27 G2b3b@G2b25)) (raise (condition (G4c1a@G4b30@make-error) (G4c34@G4b86@make-who-condition 'expander) (G4c06@G4af0@make-message-condition '"cannot locate library in library-path") (G2b37@make-library-resolution-condition G2b18@x (reverse G2b20@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2b1f@exts) (G2b1c@f (cdr G2b1e@ls) (G2aab@library-extensions) G2b20@failed-list) ((lambda (G2b42@name) (if (file-exists? G2b42@name) G2b42@name (G2b1c@f G2b1e@ls (cdr G2b1f@exts) (cons G2b42@name G2b20@failed-list)))) (string-append (car G2b1e@ls) G2b1a@str (car G2b1f@exts)))))))) G2b1c@f) (G2aa9@library-path) (G2aab@library-extensions) '())) (G2aad@library-name->file-name G2b18@x))) (lambda (G2b44@f) (if (procedure? G2b44@f) G2b44@f (assertion-violation 'file-locator '"not a procedure" G2b44@f))))) (set! G2ab1@serialize-all (lambda (G2b46@serialize G2b47@compile) ((lambda (G2b4b@library-desc) (begin (set! G2b4b@library-desc (lambda (G2b4e@x) (list (G2a6b@library-id G2b4e@x) (G2a6d@library-name G2b4e@x)))) (for-each (lambda (G2b4c@x) (if (G2a85@library-source-file-name G2b4c@x) (G2b46@serialize (G2a85@library-source-file-name G2b4c@x) (list (G2a6b@library-id G2b4c@x) (G2a6d@library-name G2b4c@x) (G2a6f@library-version G2b4c@x) (map G2b4b@library-desc (G2a71@library-imp* G2b4c@x)) (map G2b4b@library-desc (G2a73@library-vis* G2b4c@x)) (map G2b4b@library-desc (G2a75@library-inv* G2b4c@x)) (G2a77@library-subst G2b4c@x) (G2a79@library-env G2b4c@x) (G2b47@compile (G2a7f@library-visit-code G2b4c@x)) (G2b47@compile (G2a81@library-invoke-code G2b4c@x)) (G2a83@library-visible? G2b4c@x))) (void))) ((G2a58@current-library-collection))))) '#f))) (set! G2ab3@current-precompiled-library-loader (G2995@G28a0@make-parameter (lambda (G2b50@filename G2b51@sk) '#f))) (set! G2ab5@try-load-from-file (lambda (G2b54@filename) ((G2ab3@current-precompiled-library-loader) G2b54@filename (lambda G2b7a ((lambda (G2b7b) (if (= G2b7b '11) (apply (lambda (G2b56@id G2b57@name G2b58@ver G2b59@imp* G2b5a@vis* G2b5b@inv* G2b5c@exp-subst G2b5d@exp-env G2b5e@visit-proc G2b5f@invoke-proc G2b60@visible?) ((letrec ((G2b6c@f (lambda (G2b6e@deps) (if (null? G2b6e@deps) (begin (G2ac9@install-library G2b56@id G2b57@name G2b58@ver G2b59@imp* G2b5a@vis* G2b5b@inv* G2b5c@exp-subst G2b5d@exp-env G2b5e@visit-proc G2b5f@invoke-proc '#f '#f G2b60@visible? '#f) '#t) ((lambda (G2b70@d) ((lambda (G2b72@label G2b73@dname) ((lambda (G2b76@l) (if (if (G2a67@library? G2b76@l) (begin '#f (eq? G2b72@label (G2a6b@library-id G2b76@l))) '#f) (G2b6c@f (cdr G2b6e@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b57@name G2b73@dname G2b54@filename G2b76@l G2b72@label (G2a6b@library-id G2b76@l)) '#f))) (G2abf@find-library-by-name G2b73@dname))) (car G2b70@d) (cadr G2b70@d))) (car G2b6e@deps)))))) G2b6c@f) (append G2b59@imp* G2b5a@vis* G2b5b@inv*))) G2b7a) (if (>= G2b7b '0) (apply (lambda G2b78@others '#f) G2b7a) (error 'apply '"invalid arg count")))) (length G2b7a)))))) (set! G2ab7@library-loader (G2995@G28a0@make-parameter (lambda (G2b7c@x) ((lambda (G2b7e@file-name) (if (not G2b7e@file-name) (assertion-violation '#f '"cannot file library" G2b7c@x) ((lambda (G2b80@t) (if G2b80@t G2b80@t (begin '#f ((G2ab9@current-library-expander) (G2994@G289e@read-library-source-file G2b7e@file-name) G2b7e@file-name (lambda (G2b82@name) (if (not (equal? G2b82@name G2b7c@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b86@G2b84 G2b87@G2b85) ((lambda (G2b8a@e G2b8b@p) (begin (display '"expected to find library " G2b8b@p) (write G2b7c@x G2b8b@p) (display '" in file " G2b8b@p) (display G2b7e@file-name G2b8b@p) (display '", found " G2b8b@p) (write G2b82@name G2b8b@p) (display '" instead" G2b8b@p) (G2b8a@e))) G2b87@G2b85 G2b86@G2b84)))) (void))))))) (G2ab5@try-load-from-file G2b7e@file-name)))) ((G2aaf@file-locator) G2b7c@x))) (lambda (G2b8e@f) (if (procedure? G2b8e@f) G2b8e@f (assertion-violation 'library-locator '"not a procedure" G2b8e@f))))) (set! G2ab9@current-library-expander (G2995@G28a0@make-parameter (lambda (G2b90@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b92@f) (if (procedure? G2b92@f) G2b92@f (assertion-violation 'library-expander '"not a procedure" G2b92@f))))) (set! G2abb@external-pending-libraries (G2995@G28a0@make-parameter '())) (set! G2abd@find-external-library (lambda (G2b94@name) (begin (if (member G2b94@name (G2abb@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b94@name) (void)) ((lambda (G2b98@G2b96@external-pending-libraries G2b99@G2b97@external-pending-libraries) ((lambda (G2b9c@swap) (dynamic-wind G2b9c@swap (lambda () (begin ((G2ab7@library-loader) G2b94@name) ((lambda (G2b9e@t) (if G2b9e@t G2b9e@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b94@name)))) (G2aa7@find-library-by (lambda (G2ba0@x) (equal? (G2a6d@library-name G2ba0@x) G2b94@name)))))) G2b9c@swap)) (lambda () ((lambda (G2ba2@t) (begin (G2b98@G2b96@external-pending-libraries G2b99@G2b97@external-pending-libraries) (set! G2b99@G2b97@external-pending-libraries G2ba2@t))) (G2b98@G2b96@external-pending-libraries))))) G2abb@external-pending-libraries (cons G2b94@name (G2abb@external-pending-libraries)))))) (set! G2abf@find-library-by-name (lambda (G2ba4@name) ((lambda (G2ba6@t) (if G2ba6@t G2ba6@t (begin '#f (G2abd@find-external-library G2ba4@name)))) (G2aa7@find-library-by (lambda (G2ba8@x) (equal? (G2a6d@library-name G2ba8@x) G2ba4@name)))))) (set! G2ac1@library-exists? (lambda (G2baa@name) (if (G2aa7@find-library-by (lambda (G2bac@x) (equal? (G2a6d@library-name G2bac@x) G2baa@name))) (begin '#f '#t) '#f))) (set! G2ac3@find-library-by-spec/die (lambda (G2bae@spec) ((lambda (G2bb0@id) ((lambda (G2bb2@t) (if G2bb2@t G2bb2@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2bae@spec)))) (G2aa7@find-library-by (lambda (G2bb4@x) (eq? G2bb0@id (G2a6b@library-id G2bb4@x)))))) (car G2bae@spec)))) (set! G2ac5@label->binding-table (make-eq-hashtable)) (set! G2ac7@install-library-record (lambda (G2bb6@lib) (begin ((lambda (G2bb8@exp-env) (for-each (lambda (G2bba@x) ((lambda (G2bbc@label G2bbd@binding) ((lambda (G2bc0@binding) (hashtable-set! G2ac5@label->binding-table G2bbc@label G2bc0@binding)) ((lambda (G2bc2@t) (if (memv G2bc2@t '(global)) (cons 'global (cons G2bb6@lib (cdr G2bbd@binding))) (if (memv G2bc2@t '(global-macro)) (cons 'global-macro (cons G2bb6@lib (cdr G2bbd@binding))) (if (memv G2bc2@t '(global-macro!)) (cons 'global-macro! (cons G2bb6@lib (cdr G2bbd@binding))) G2bbd@binding)))) (car G2bbd@binding)))) (car G2bba@x) (cdr G2bba@x))) G2bb8@exp-env)) (G2a79@library-env G2bb6@lib)) ((G2a58@current-library-collection) G2bb6@lib)))) (set! G2ac9@install-library (lambda (G2bc4@id G2bc5@name G2bc6@ver G2bc7@imp* G2bc8@vis* G2bc9@inv* G2bca@exp-subst G2bcb@exp-env G2bcc@visit-proc G2bcd@invoke-proc G2bce@visit-code G2bcf@invoke-code G2bd0@visible? G2bd1@source-file-name) ((lambda (G2be0@imp-lib* G2be1@vis-lib* G2be2@inv-lib*) (begin (if (not (if (symbol? G2bc4@id) (if (list? G2bc5@name) (begin '#f (list? G2bc6@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2bc4@id G2bc5@name G2bc6@ver) (void)) (if (G2ac1@library-exists? G2bc5@name) (assertion-violation 'install-library '"library is already installed" G2bc5@name) (void)) ((lambda (G2be6@lib) (G2ac7@install-library-record G2be6@lib)) (G2a69@make-library G2bc4@id G2bc5@name G2bc6@ver G2be0@imp-lib* G2be1@vis-lib* G2be2@inv-lib* G2bca@exp-subst G2bcb@exp-env G2bcc@visit-proc G2bcd@invoke-proc G2bce@visit-code G2bcf@invoke-code G2bd0@visible? G2bd1@source-file-name)))) (map G2ac3@find-library-by-spec/die G2bc7@imp*) (map G2ac3@find-library-by-spec/die G2bc8@vis*) (map G2ac3@find-library-by-spec/die G2bc9@inv*)))) (set! G2acb@imported-label->binding (lambda (G2be8@lab) (hashtable-ref G2ac5@label->binding-table G2be8@lab '#f))) (set! G2acd@invoke-library (lambda (G2bea@lib) ((lambda (G2bec@invoke) (if (procedure? G2bec@invoke) (begin (G2a99@set-library-invoke-state! G2bea@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2bea@lib))) (for-each G2acd@invoke-library (G2a75@library-inv* G2bea@lib)) (G2a99@set-library-invoke-state! G2bea@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2bea@lib))) (G2bec@invoke) (G2a99@set-library-invoke-state! G2bea@lib '#t)) (void))) (G2a7d@library-invoke-state G2bea@lib)))) (set! G2acf@visit-library (lambda (G2bee@lib) ((lambda (G2bf0@visit) (if (procedure? G2bf0@visit) (begin (G2a97@set-library-visit-state! G2bee@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bee@lib))) (for-each G2acd@invoke-library (G2a73@library-vis* G2bee@lib)) (G2a97@set-library-visit-state! G2bee@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bee@lib))) (G2bf0@visit) (G2a97@set-library-visit-state! G2bee@lib '#t)) (void))) (G2a7b@library-visit-state G2bee@lib)))) (set! G2ad1@invoke-library-by-spec (lambda (G2bf2@spec) (G2acd@invoke-library (G2ac3@find-library-by-spec/die G2bf2@spec)))) (set! G2ad3@installed-libraries (lambda G2bfc ((lambda (G2bfd) (if (= G2bfd '1) (apply (lambda (G2bf4@all?) ((letrec ((G2bf6@f (lambda (G2bf8@ls) (if (null? G2bf8@ls) '() (if ((lambda (G2bfa@t) (if G2bfa@t G2bfa@t (begin '#f (G2a83@library-visible? (car G2bf8@ls))))) G2bf4@all?) (cons (car G2bf8@ls) (G2bf6@f (cdr G2bf8@ls))) (G2bf6@f (cdr G2bf8@ls))))))) G2bf6@f) ((G2a58@current-library-collection)))) G2bfc) (if (= G2bfd '0) (apply (lambda () (G2ad3@installed-libraries '#f)) G2bfc) (error 'apply '"invalid arg count")))) (length G2bfc)))) (set! G2ad5@library-spec (lambda (G2bfe@x) (begin (if (not (G2a67@library? G2bfe@x)) (assertion-violation 'library-spec '"not a library" G2bfe@x) (void)) (list (G2a6b@library-id G2bfe@x) (G2a6d@library-name G2bfe@x) (G2a6f@library-version G2bfe@x))))) (begin (set! G2c3c@G2ad5@library-spec G2ad5@library-spec) (set! G2c3b@G2ad3@installed-libraries G2ad3@installed-libraries) (set! G2c3a@G2ad1@invoke-library-by-spec G2ad1@invoke-library-by-spec) (set! G2c39@G2acf@visit-library G2acf@visit-library) (set! G2c38@G2acd@invoke-library G2acd@invoke-library) (set! G2c37@G2acb@imported-label->binding G2acb@imported-label->binding) (set! G2c36@G2ac9@install-library G2ac9@install-library) (set! G2c35@G2ac7@install-library-record G2ac7@install-library-record) (set! G2c34@G2ac5@label->binding-table G2ac5@label->binding-table) (set! G2c33@G2ac3@find-library-by-spec/die G2ac3@find-library-by-spec/die) (set! G2c32@G2ac1@library-exists? G2ac1@library-exists?) (set! G2c31@G2abf@find-library-by-name G2abf@find-library-by-name) (set! G2c30@G2abd@find-external-library G2abd@find-external-library) (set! G2c2f@G2abb@external-pending-libraries G2abb@external-pending-libraries) (set! G2c2e@G2ab9@current-library-expander G2ab9@current-library-expander) (set! G2c2d@G2ab7@library-loader G2ab7@library-loader) (set! G2c2c@G2ab5@try-load-from-file G2ab5@try-load-from-file) (set! G2c2b@G2ab3@current-precompiled-library-loader G2ab3@current-precompiled-library-loader) (set! G2c2a@G2ab1@serialize-all G2ab1@serialize-all) (set! G2c29@G2aaf@file-locator G2aaf@file-locator) (set! G2c28@G2aad@library-name->file-name G2aad@library-name->file-name) (set! G2c27@G2aab@library-extensions G2aab@library-extensions) (set! G2c26@G2aa9@library-path G2aa9@library-path) (set! G2c25@G2aa7@find-library-by G2aa7@find-library-by) (set! G2c24@G2aa5@find-dependencies G2aa5@find-dependencies) (set! G2c23@G2aa3@rp G2aa3@rp) (set! G2c22@G2aa1@set-library-source-file-name! G2aa1@set-library-source-file-name!) (set! G2c21@G2a9f@set-library-visible?! G2a9f@set-library-visible?!) (set! G2c20@G2a9d@set-library-invoke-code! G2a9d@set-library-invoke-code!) (set! G2c1f@G2a9b@set-library-visit-code! G2a9b@set-library-visit-code!) (set! G2c1e@G2a99@set-library-invoke-state! G2a99@set-library-invoke-state!) (set! G2c1d@G2a97@set-library-visit-state! G2a97@set-library-visit-state!) (set! G2c1c@G2a95@set-library-env! G2a95@set-library-env!) (set! G2c1b@G2a93@set-library-subst! G2a93@set-library-subst!) (set! G2c1a@G2a91@set-library-inv*! G2a91@set-library-inv*!) (set! G2c19@G2a8f@set-library-vis*! G2a8f@set-library-vis*!) (set! G2c18@G2a8d@set-library-imp*! G2a8d@set-library-imp*!) (set! G2c17@G2a8b@set-library-version! G2a8b@set-library-version!) (set! G2c16@G2a89@set-library-name! G2a89@set-library-name!) (set! G2c15@G2a87@set-library-id! G2a87@set-library-id!) (set! G2c14@G2a85@library-source-file-name G2a85@library-source-file-name) (set! G2c13@G2a83@library-visible? G2a83@library-visible?) (set! G2c12@G2a81@library-invoke-code G2a81@library-invoke-code) (set! G2c11@G2a7f@library-visit-code G2a7f@library-visit-code) (set! G2c10@G2a7d@library-invoke-state G2a7d@library-invoke-state) (set! G2c0f@G2a7b@library-visit-state G2a7b@library-visit-state) (set! G2c0e@G2a79@library-env G2a79@library-env) (set! G2c0d@G2a77@library-subst G2a77@library-subst) (set! G2c0c@G2a75@library-inv* G2a75@library-inv*) (set! G2c0b@G2a73@library-vis* G2a73@library-vis*) (set! G2c0a@G2a71@library-imp* G2a71@library-imp*) (set! G2c09@G2a6f@library-version G2a6f@library-version) (set! G2c08@G2a6d@library-name G2a6d@library-name) (set! G2c07@G2a6b@library-id G2a6b@library-id) (set! G2c06@G2a69@make-library G2a69@make-library) (set! G2c05@G2a67@library? G2a67@library?) (set! G2c04@G2a62@G2a5a G2a62@G2a5a) (set! G2c03@G2a60@G2a5b G2a60@G2a5b) (set! G2c02@G2a5e@G2a59 G2a5e@G2a59) (set! G2c01@G2a58@current-library-collection G2a58@current-library-collection) (set! G2c00@G2a56@make-collection G2a56@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2c3f@build-global-define G2cc3@build-lambda G2cc5@build-case-lambda G2cc7@build-let G2d0f@build-sequence G2d11@build-void G2d13@build-letrec G2d15@build-letrec* G2d17@build-library-letrec* G2d19@build-receive) (begin (set! G2c3f@build-global-define (lambda (G2d1a@x) (G2d11@build-void))) (set! G2cc3@build-lambda (lambda (G2d1c@ae G2d1d@vars G2d1e@exp) (list 'lambda G2d1d@vars G2d1e@exp))) (set! G2cc5@build-case-lambda (lambda (G2d22@ae G2d23@vars* G2d24@exp*) ((lambda (G2d29@build-error G2d2b@build-pred G2d2d@build-apply G2d2f@expand-case-lambda) (begin (set! G2d29@build-error (lambda (G2d5e@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2d2b@build-pred (lambda (G2d48@ae G2d49@n G2d4a@vars) (call-with-values (lambda () ((letrec ((G2d50@f (lambda (G2d52@vars G2d53@count) (if (pair? G2d52@vars) (G2d50@f (cdr G2d52@vars) (+ G2d53@count '1)) (if (null? G2d52@vars) (values G2d53@count '=) (values G2d53@count '>=)))))) G2d50@f) G2d4a@vars '0)) (lambda (G2d56@G2d4e G2d57@G2d4f) ((lambda (G2d5a@pred G2d5b@count) (list (list 'primitive G2d5a@pred) G2d49@n (list 'quote G2d5b@count))) G2d57@G2d4f G2d56@G2d4e))))) (set! G2d2d@build-apply (lambda (G2d40@ae G2d41@g G2d42@vars G2d43@exp) (list '(primitive apply) (G2cc3@build-lambda G2d40@ae G2d42@vars G2d43@exp) G2d41@g))) (set! G2d2f@expand-case-lambda (lambda (G2d30@ae G2d31@vars G2d32@exp*) ((lambda (G2d36@g G2d37@n) (list 'lambda G2d36@g (G2cc7@build-let G2d30@ae (list G2d37@n) (list (list '(primitive length) G2d36@g)) ((letrec ((G2d3a@f (lambda (G2d3c@vars* G2d3d@exp*) (if (null? G2d3c@vars*) (G2d29@build-error G2d30@ae) (list 'if (G2d2b@build-pred G2d30@ae G2d37@n (car G2d3c@vars*)) (G2d2d@build-apply G2d30@ae G2d36@g (car G2d3c@vars*) (car G2d3d@exp*)) (G2d3a@f (cdr G2d3c@vars*) (cdr G2d3d@exp*))))))) G2d3a@f) G2d23@vars* G2d32@exp*)))) (gensym) (gensym)))) (if (= (length G2d24@exp*) '1) (G2cc3@build-lambda G2d22@ae (car G2d23@vars*) (car G2d24@exp*)) (G2d2f@expand-case-lambda G2d22@ae G2d23@vars* G2d24@exp*)))) '#f '#f '#f '#f))) (set! G2cc7@build-let (lambda (G2d60@ae G2d61@lhs* G2d62@rhs* G2d63@body) (cons (G2cc3@build-lambda G2d60@ae G2d61@lhs* G2d63@body) G2d62@rhs*))) (set! G2d0f@build-sequence (lambda (G2d68@ae G2d69@exps) ((letrec ((G2d6c@loop (lambda (G2d6e@exps) (if (null? (cdr G2d6e@exps)) (car G2d6e@exps) (if (equal? (car G2d6e@exps) (G2d11@build-void)) (G2d6c@loop (cdr G2d6e@exps)) (cons 'begin G2d6e@exps)))))) G2d6c@loop) G2d69@exps))) (set! G2d11@build-void (lambda () '((primitive void)))) (set! G2d13@build-letrec (lambda (G2d70@ae G2d71@vars G2d72@val-exps G2d73@body-exp) (if (null? G2d71@vars) G2d73@body-exp (list 'letrec (map list G2d71@vars G2d72@val-exps) G2d73@body-exp)))) (set! G2d15@build-letrec* (lambda (G2d78@ae G2d79@vars G2d7a@val-exps G2d7b@body-exp) (if (null? G2d79@vars) G2d7b@body-exp (G2cc7@build-let G2d78@ae G2d79@vars (map (lambda (G2d80@x) (list 'quote '#f)) G2d79@vars) (G2d0f@build-sequence G2d78@ae (append (map (lambda (G2d82@lhs G2d83@rhs) (list 'set! G2d82@lhs G2d83@rhs)) G2d79@vars G2d7a@val-exps) (list G2d7b@body-exp))))))) (set! G2d17@build-library-letrec* (lambda (G2d86@ae G2d87@name G2d88@vars G2d89@locs G2d8a@val-exps G2d8b@body-exp) (list 'library-letrec* G2d87@name (map list G2d88@vars G2d89@locs G2d8a@val-exps) G2d8b@body-exp))) (set! G2d19@build-receive (lambda (G2d92@ae G2d93@vars G2d94@producer G2d95@body*) (begin (display '"************** in ") (cons 'receive (cons G2d93@vars (cons G2d94@producer G2d95@body*)))))) (begin (set! G2da3@G2d19@build-receive G2d19@build-receive) (set! G2da2@G2d17@build-library-letrec* G2d17@build-library-letrec*) (set! G2da1@G2d15@build-letrec* G2d15@build-letrec*) (set! G2da0@G2d13@build-letrec G2d13@build-letrec) (set! G2d9f@G2d11@build-void G2d11@build-void) (set! G2d9e@G2d0f@build-sequence G2d0f@build-sequence) (set! G2d9d@G2cc7@build-let G2cc7@build-let) (set! G2d9c@G2cc5@build-case-lambda G2cc5@build-case-lambda) (set! G2d9b@G2cc3@build-lambda G2cc3@build-lambda) (set! G2d9a@G2c3f@build-global-define G2c3f@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2db0@set-cons G2db2@set-union G2db7@top-mark* G2db9@top-marked? G2dbb@gen-lexical G2dbd@gen-global G2dbf@gen-label G2dc1@gen-top-level-label G2dc3@gen-define-label+loc G2dc5@gen-define-label G2dcb@G2dc6 G2dcd@G2dc8 G2dcf@G2dc7 G2dd4@rib? G2dd6@make-rib G2dd8@rib-sym* G2dda@rib-mark** G2ddc@rib-label* G2dde@rib-sealed/freq G2de0@rib-cache G2de2@set-rib-sym*! G2de4@set-rib-mark**! G2de6@set-rib-label*! G2de8@set-rib-sealed/freq! G2dea@set-rib-cache! G2dec@make-empty-rib G2dee@make-cache-rib G2df0@find-label G2df2@extend-rib! G2df4@extend-rib/nc! G2df6@make-rib-map G2df8@seal-rib! G2dfa@unseal-rib! G2dfc@make-full-rib G2e02@G2dfd G2e04@G2dff G2e06@G2dfe G2e0b@stx? G2e0d@make-stx G2e0f@stx-expr G2e11@stx-mark* G2e13@stx-subst* G2e15@stx-ae* G2e17@set-stx-expr! G2e19@set-stx-mark*! G2e1b@set-stx-subst*! G2e1d@set-stx-ae*! G2e1f@rp G2e21@datum->stx G2e23@gen-mark G2e25@anti-mark G2e27@anti-mark? G2e29@join-wraps G2e2b@mkstx G2e2d@add-mark G2e2f@add-subst G2e31@syntax-kind? G2e33@syntax-vector->list G2e35@syntax-pair? G2e37@syntax-vector? G2e39@syntax-null? G2e3b@syntax-list? G2e3d@syntax-car G2e3f@syntax-cdr G2e41@syntax->list G2e43@id? G2e45@id->sym G2e47@same-marks? G2e49@bound-id=? G2e4b@free-id=? G2e4d@valid-bound-ids? G2e4f@distinct-bound-ids? G2e51@bound-id-member? G2e53@self-evaluating? G2e55@strip-annotations G2e57@strip G2e59@stx->datum G2e5b@same-marks*? G2e5d@id->label G2e5f@id->real-label G2e61@label->binding G2e63@make-binding G2e65@binding-type G2e67@binding-value G2e69@raise-unbound-error G2e6b@syntax-type G2e82@sanitize-binding G2e84@make-variable-transformer G2e86@variable-transformer? G2e88@variable-transformer-procedure G2e8a@make-eval-transformer G300e@parse-define G3010@parse-define-syntax G3012@scheme-stx-hashtable G3014@scheme-stx G3016@lexical-var G3018@lexical-mutable? G301a@set-lexical-mutable! G301c@add-lexical G301e@add-lexicals G3020@letrec-helper G3022@letrec-transformer G3024@letrec*-transformer G3026@fluid-let-syntax-transformer G3028@type-descriptor-transformer G302a@record-type-descriptor-transformer G302c@record-constructor-descriptor-transformer G302e@when-macro G3030@unless-macro G3032@if-transformer G3034@case-macro G3036@quote-transformer G3038@case-lambda-transformer G303a@lambda-transformer G303c@bless G303e@with-syntax-macro G3040@invalid-fmls-error G3042@let-macro G3044@let-values-macro G3046@let*-values-macro G3048@trace-lambda-macro G304a@trace-define-macro G304c@trace-define-syntax-macro G304e@trace-let/rec-syntax G3050@trace-let-syntax-macro G3052@trace-letrec-syntax-macro G3054@guard-macro G3056@define-enumeration-macro G3058@time-macro G305a@delay-macro G305c@assert-macro G305e@endianness-macro G3060@identifier-syntax-macro G3062@do-macro G3064@let*-macro G3066@or-macro G3068@and-macro G306a@cond-macro G306c@do-include G306e@include-macro G3070@include-into-macro G3072@syntax-rules-macro G3074@quasiquote-macro G3076@quasisyntax-macro G3078@define-struct-macro G307a@define-record-type-macro G307c@define-condition-type-macro G307e@incorrect-usage-macro G3080@parameterize-macro G3082@foreign-call-transformer G3084@convert-pattern G3086@syntax-dispatch G3088@ellipsis? G308a@underscore? G308c@verify-literals G308e@syntax-case-transformer G3090@ellipsis-map G3092@syntax-transformer G3094@core-macro-transformer G3096@file-options-macro G3098@symbol-macro G309a@macro-transformer G309c@local-macro-transformer G309e@do-macro-call G30a0@chi-macro G30a2@chi-local-macro G30a4@chi-global-macro G30a6@chi-expr* G30a8@chi-application G30aa@chi-expr G30ac@chi-set! G30ae@verify-formals G30b0@chi-lambda-clause G30b2@chi-lambda-clause* G30b4@chi-defun G30b6@chi-rhs G30b8@expand-interaction-rhs*/init* G30ba@chi-rhs* G30bc@find-bound=? G30be@find-dups G30c0@chi-internal G30c2@parse-module G30c8@G30c3 G30ca@G30c5 G30cc@G30c4 G30d1@module-interface? G30d3@make-module-interface G30d5@module-interface-first-mark G30d7@module-interface-exp-id-vec G30d9@module-interface-exp-lab-vec G30db@set-module-interface-first-mark! G30dd@set-module-interface-exp-id-vec! G30df@set-module-interface-exp-lab-vec! G30e1@module-interface-exp-id* G30e3@chi-internal-module G30e5@chi-body* G30e7@expand-transformer G30e9@parse-exports G30eb@parse-library-name G30ed@parse-library G30ef@parse-import-spec* G30f1@make-top-rib G30f3@make-collector G30f5@inv-collector G30f7@vis-collector G30f9@imp-collector G30fb@chi-library-internal G30fd@chi-interaction-expr G30ff@library-body-expander G3101@core-library-expander G3103@parse-top-level-program G3105@top-level-expander G310b@G3106 G310d@G3108 G310f@G3107 G3114@env? G3116@make-env G3118@env-names G311a@env-labels G311c@env-itc G311e@set-env-names! G3120@set-env-labels! G3122@set-env-itc! G3124@rp G312a@G3125 G312c@G3127 G312e@G3126 G3133@interaction-env? G3135@make-interaction-env G3137@interaction-env-rib G3139@interaction-env-r G313b@interaction-env-locs G313d@set-interaction-env-rib! G313f@set-interaction-env-r! G3141@set-interaction-env-locs! G3143@rp G3145@interaction-environment-symbols G3147@environment-bindings G3149@parse-binding G314b@environment? G314d@environment-symbols G314f@environment G3151@null-environment G3153@scheme-report-environment G3155@expand G3157@eval G3159@library-expander G315b@boot-library-expand G315d@rev-map-append G315f@build-exports G3161@make-export-subst G3163@make-export-env/macros G3165@generate-temporaries G3167@free-identifier=? G3169@bound-identifier=? G316b@make-source-condition G316d@extract-position-condition G316f@expression-position G3171@assertion-error G3173@syntax-error G3175@extract-trace G3177@syntax-violation* G3179@syntax-violation G317b@identifier? G317d@datum->syntax G317f@syntax->datum G3181@compile-r6rs-top-level G3183@pre-compile-r6rs-top-level G3185@interaction-environment G3187@top-level-context) (begin (set! G2db0@set-cons (lambda (G3188@x G3189@ls) (if (memq G3188@x G3189@ls) G3189@ls (cons G3188@x G3189@ls)))) (set! G2db2@set-union (lambda (G318c@ls1 G318d@ls2) (if (null? G318c@ls1) G318d@ls2 (if (memq (car G318c@ls1) G318d@ls2) (G2db2@set-union (cdr G318c@ls1) G318d@ls2) (cons (car G318c@ls1) (G2db2@set-union (cdr G318c@ls1) G318d@ls2)))))) (set! G2db7@top-mark* '(top)) (set! G2db9@top-marked? (lambda (G3190@m*) (memq 'top G3190@m*))) (set! G2dbb@gen-lexical (lambda (G3192@sym) (if (symbol? G3192@sym) (gensym G3192@sym) (if (G2e0b@stx? G3192@sym) (G2dbb@gen-lexical (G2e45@id->sym G3192@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3192@sym))))) (set! G2dbd@gen-global (lambda (G3194@x) (G2dbb@gen-lexical G3194@x))) (set! G2dbf@gen-label (lambda (G3196@_) (gensym))) (set! G2dc1@gen-top-level-label (lambda (G3198@id G3199@rib) ((lambda (G319d@find) (begin (set! G319d@find (lambda (G31a8@sym G31a9@mark* G31aa@sym* G31ab@mark** G31ac@label*) (if (pair? G31aa@sym*) (begin '#f (if (if (eq? G31a8@sym (car G31aa@sym*)) (begin '#f (G2e47@same-marks? G31a9@mark* (car G31ab@mark**))) '#f) (car G31ac@label*) (G319d@find G31a8@sym G31a9@mark* (cdr G31aa@sym*) (cdr G31ab@mark**) (cdr G31ac@label*)))) '#f))) ((lambda (G319e@sym G319f@mark*) ((lambda (G31a2@sym*) ((lambda (G31a4@t) (if G31a4@t ((lambda (G31a6@label) (if (G2c37@G2acb@imported-label->binding G31a6@label) (gensym) G31a6@label)) G31a4@t) (gensym))) (if (memq G319e@sym (G2dd8@rib-sym* G3199@rib)) (begin '#f (G319d@find G319e@sym G319f@mark* G31a2@sym* (G2dda@rib-mark** G3199@rib) (G2ddc@rib-label* G3199@rib))) '#f))) (G2dd8@rib-sym* G3199@rib))) (G2e45@id->sym G3198@id) (G2e11@stx-mark* G3198@id)))) '#f))) (set! G2dc3@gen-define-label+loc (lambda (G31b2@id G31b3@rib) ((lambda (G31b6@t) (if G31b6@t ((lambda (G31b8@env) ((lambda (G31ba@label G31bb@locs) (values G31ba@label ((lambda (G31be@t) (if G31be@t (cdr G31be@t) ((lambda (G31c0@loc) (begin (G3141@set-interaction-env-locs! G31b8@env (cons (cons G31ba@label G31c0@loc) G31bb@locs)) G31c0@loc)) (G2dbb@gen-lexical G31b2@id)))) (assq G31ba@label G31bb@locs)))) (G2dc1@gen-top-level-label G31b2@id G31b3@rib) (G313b@interaction-env-locs G31b8@env))) G31b6@t) (values (gensym) (G2dbb@gen-lexical G31b2@id)))) (G3187@top-level-context)))) (set! G2dc5@gen-define-label (lambda (G31c2@id G31c3@rib) (if (G3187@top-level-context) (G2dc1@gen-top-level-label G31c2@id G31c3@rib) (gensym)))) (set! G2dcb@G2dc6 (make-record-type-descriptor 'rib '#f 'G2dc9 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2dcd@G2dc8 '#f) (set! G2dcf@G2dc7 (make-record-constructor-descriptor G2dcb@G2dc6 '#f G2dcd@G2dc8)) (set! G2dd4@rib? (record-predicate G2dcb@G2dc6)) (set! G2dd6@make-rib (record-constructor G2dcf@G2dc7)) (set! G2dd8@rib-sym* (record-accessor G2dcb@G2dc6 '0)) (set! G2dda@rib-mark** (record-accessor G2dcb@G2dc6 '1)) (set! G2ddc@rib-label* (record-accessor G2dcb@G2dc6 '2)) (set! G2dde@rib-sealed/freq (record-accessor G2dcb@G2dc6 '3)) (set! G2de0@rib-cache (record-accessor G2dcb@G2dc6 '4)) (set! G2de2@set-rib-sym*! (record-mutator G2dcb@G2dc6 '0)) (set! G2de4@set-rib-mark**! (record-mutator G2dcb@G2dc6 '1)) (set! G2de6@set-rib-label*! (record-mutator G2dcb@G2dc6 '2)) (set! G2de8@set-rib-sealed/freq! (record-mutator G2dcb@G2dc6 '3)) (set! G2dea@set-rib-cache! (record-mutator G2dcb@G2dc6 '4)) (set! G2dec@make-empty-rib (lambda () (G2dd6@make-rib '() '() '() '#f '#f))) (set! G2dee@make-cache-rib (lambda () (G2dd6@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2df0@find-label (lambda (G31c6@rib G31c7@sym G31c8@mark*) ((lambda (G31cc@ht) (if G31cc@ht (begin '#f ((lambda (G31ce@cv) ((lambda (G31d0@t) (if G31d0@t (cdr G31d0@t) '#f)) (if G31ce@cv (begin '#f (assp (lambda (G31d2@m) (G2e47@same-marks? G31c8@mark* G31d2@m)) G31ce@cv)) '#f))) (hashtable-ref G31cc@ht G31c7@sym '#f))) '#f)) (G2de0@rib-cache G31c6@rib)))) (set! G2df2@extend-rib! (lambda (G31d4@rib G31d5@id G31d6@label) ((lambda (G31db@find) (begin (set! G31db@find (lambda (G31ec@sym G31ed@mark* G31ee@sym* G31ef@mark** G31f0@label*) (if (pair? G31ee@sym*) (begin '#f (if (if (eq? G31ec@sym (car G31ee@sym*)) (begin '#f (G2e47@same-marks? G31ed@mark* (car G31ef@mark**))) '#f) G31f0@label* (G31db@find G31ec@sym G31ed@mark* (cdr G31ee@sym*) (cdr G31ef@mark**) (cdr G31f0@label*)))) '#f))) (begin (if (G2dde@rib-sealed/freq G31d4@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G31d4@rib) (void)) ((lambda (G31dc@sym G31dd@mark*) ((lambda (G31e0@sym*) ((lambda (G31e2@t) (if G31e2@t ((lambda (G31e4@p) (if (not (eq? G31d6@label G31e4@p)) (G3179@syntax-violation '#f '"multiple definitions of identifier" G31d5@id) (void))) G31e2@t) ((lambda (G31e6@t) (if G31e6@t ((lambda (G31e8@p) (if (not (eq? G31d6@label (car G31e8@p))) (if (G3187@top-level-context) (set-car! G31e8@p G31d6@label) (G3179@syntax-violation '#f '"multiple definitions of identifier" G31d5@id)) (void))) G31e6@t) (begin (if (G2de0@rib-cache G31d4@rib) (hashtable-update! (G2de0@rib-cache G31d4@rib) G31dc@sym (lambda (G31ea@e) (cons (cons G31dd@mark* G31d6@label) G31ea@e)) '()) (void)) (G2de2@set-rib-sym*! G31d4@rib (cons G31dc@sym G31e0@sym*)) (G2de4@set-rib-mark**! G31d4@rib (cons G31dd@mark* (G2dda@rib-mark** G31d4@rib))) (G2de6@set-rib-label*! G31d4@rib (cons G31d6@label (G2ddc@rib-label* G31d4@rib)))))) (if (memq G31dc@sym (G2dd8@rib-sym* G31d4@rib)) (begin '#f (G31db@find G31dc@sym G31dd@mark* G31e0@sym* (G2dda@rib-mark** G31d4@rib) (G2ddc@rib-label* G31d4@rib))) '#f)))) (G2df0@find-label G31d4@rib G31dc@sym G31dd@mark*))) (G2dd8@rib-sym* G31d4@rib))) (G2e45@id->sym G31d5@id) (G2e11@stx-mark* G31d5@id))))) '#f))) (set! G2df4@extend-rib/nc! (lambda (G31f6@rib G31f7@id G31f8@label) ((lambda (G31fc@sym G31fd@mark*) ((lambda (G3200@sym*) (begin (if (G2de0@rib-cache G31f6@rib) (hashtable-update! (G2de0@rib-cache G31f6@rib) G31fc@sym (lambda (G3202@e) (cons (cons G31fd@mark* G31f8@label) G3202@e)) '()) (void)) (G2de2@set-rib-sym*! G31f6@rib (cons G31fc@sym G3200@sym*)) (G2de4@set-rib-mark**! G31f6@rib (cons G31fd@mark* (G2dda@rib-mark** G31f6@rib))) (G2de6@set-rib-label*! G31f6@rib (cons G31f8@label (G2ddc@rib-label* G31f6@rib))))) (G2dd8@rib-sym* G31f6@rib))) (G2e45@id->sym G31f7@id) (G2e11@stx-mark* G31f7@id)))) (set! G2df6@make-rib-map (lambda (G3204@sym*) ((lambda (G3206@ht) ((letrec ((G3208@f (lambda (G320a@i G320b@sym*) (if (null? G320b@sym*) G3206@ht (begin (hashtable-update! G3206@ht (car G320b@sym*) (lambda (G320e@x) (cons G320a@i G320e@x)) '()) (G3208@f (+ G320a@i '1) (cdr G320b@sym*))))))) G3208@f) '0 G3204@sym*)) (make-eq-hashtable)))) (set! G2df8@seal-rib! (lambda (G3210@rib) ((lambda (G3212@sym*) (if (not (null? G3212@sym*)) (begin (G2de2@set-rib-sym*! G3210@rib (list->vector G3212@sym*)) (G2de4@set-rib-mark**! G3210@rib (list->vector (G2dda@rib-mark** G3210@rib))) (G2de6@set-rib-label*! G3210@rib (list->vector (G2ddc@rib-label* G3210@rib))) (G2de8@set-rib-sealed/freq! G3210@rib (G2df6@make-rib-map G3212@sym*))) (void))) (G2dd8@rib-sym* G3210@rib)))) (set! G2dfa@unseal-rib! (lambda (G3214@rib) (if (G2dde@rib-sealed/freq G3214@rib) (begin (G2de8@set-rib-sealed/freq! G3214@rib '#f) (G2de2@set-rib-sym*! G3214@rib (vector->list (G2dd8@rib-sym* G3214@rib))) (G2de4@set-rib-mark**! G3214@rib (vector->list (G2dda@rib-mark** G3214@rib))) (G2de6@set-rib-label*! G3214@rib (vector->list (G2ddc@rib-label* G3214@rib)))) (void)))) (set! G2dfc@make-full-rib (lambda (G3216@id* G3217@label*) ((lambda (G321a@r) (begin (G2df8@seal-rib! G321a@r) G321a@r)) (G2dd6@make-rib (map G2e45@id->sym G3216@id*) (map G2e11@stx-mark* G3216@id*) G3217@label* '#f '#f)))) (set! G2e02@G2dfd (make-record-type-descriptor 'stx '#f 'G2e00 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2e04@G2dff '#f) (set! G2e06@G2dfe (make-record-constructor-descriptor G2e02@G2dfd '#f G2e04@G2dff)) (set! G2e0b@stx? (record-predicate G2e02@G2dfd)) (set! G2e0d@make-stx (record-constructor G2e06@G2dfe)) (set! G2e0f@stx-expr (record-accessor G2e02@G2dfd '0)) (set! G2e11@stx-mark* (record-accessor G2e02@G2dfd '1)) (set! G2e13@stx-subst* (record-accessor G2e02@G2dfd '2)) (set! G2e15@stx-ae* (record-accessor G2e02@G2dfd '3)) (set! G2e17@set-stx-expr! (record-mutator G2e02@G2dfd '0)) (set! G2e19@set-stx-mark*! (record-mutator G2e02@G2dfd '1)) (set! G2e1b@set-stx-subst*! (record-mutator G2e02@G2dfd '2)) (set! G2e1d@set-stx-ae*! (record-mutator G2e02@G2dfd '3)) (set! G2e1f@rp (G2992@G289a@make-record-printer 'stx (lambda (G321c@x G321d@p G321e@wr) (begin (display '"#<syntax " G321d@p) (write (G2e59@stx->datum G321c@x) G321d@p) ((lambda (G3222@expr) (if (G298a@G288a@annotation? G3222@expr) ((lambda (G3224@src) (if (pair? G3224@src) (begin (display '" [" G321d@p) (display (cdr G3224@src) G321d@p) (display '" of " G321d@p) (display (car G3224@src) G321d@p) (display '"]" G321d@p)) (void))) (G298b@G288c@annotation-source G3222@expr)) (void))) (G2e0f@stx-expr G321c@x)) (display '">" G321d@p))))) (set! G2e21@datum->stx (lambda (G3226@id G3227@datum) (G2e0d@make-stx G3227@datum (G2e11@stx-mark* G3226@id) (G2e13@stx-subst* G3226@id) (G2e15@stx-ae* G3226@id)))) (set! G2e23@gen-mark (lambda () (string '#\m))) (set! G2e25@anti-mark '#f) (set! G2e27@anti-mark? not) (set! G2e29@join-wraps (lambda (G322a@m1* G322b@s1* G322c@ae1* G322d@e) ((lambda (G3233@cancel) (begin (set! G3233@cancel (lambda (G323a@ls1 G323b@ls2) ((letrec ((G323e@f (lambda (G3240@x G3241@ls1) (if (null? G3241@ls1) (cdr G323b@ls2) (cons G3240@x (G323e@f (car G3241@ls1) (cdr G3241@ls1))))))) G323e@f) (car G323a@ls1) (cdr G323a@ls1)))) ((lambda (G3234@m2* G3235@s2* G3236@ae2*) (if (if (not (null? G322a@m1*)) (if (not (null? G3234@m2*)) (begin '#f (G2e27@anti-mark? (car G3234@m2*))) '#f) '#f) (values (G3233@cancel G322a@m1* G3234@m2*) (G3233@cancel G322b@s1* G3235@s2*) (G3233@cancel G322c@ae1* G3236@ae2*)) (values (append G322a@m1* G3234@m2*) (append G322b@s1* G3235@s2*) (append G322c@ae1* G3236@ae2*)))) (G2e11@stx-mark* G322d@e) (G2e13@stx-subst* G322d@e) (G2e15@stx-ae* G322d@e)))) '#f))) (set! G2e2b@mkstx (lambda (G3244@e G3245@m* G3246@s* G3247@ae*) (if (if (G2e0b@stx? G3244@e) (begin '#f (not (G2db9@top-marked? G3245@m*))) '#f) (call-with-values (lambda () (G2e29@join-wraps G3245@m* G3246@s* G3247@ae* G3244@e)) (lambda (G324f@G324c G3250@G324d G3251@G324e) ((lambda (G3255@ae* G3256@s* G3257@m*) (G2e0d@make-stx (G2e0f@stx-expr G3244@e) G3257@m* G3256@s* G3255@ae*)) G3251@G324e G3250@G324d G324f@G324c))) (G2e0d@make-stx G3244@e G3245@m* G3246@s* G3247@ae*)))) (set! G2e2d@add-mark (lambda (G325b@m G325c@e G325d@ae) (G2e2b@mkstx G325c@e (list G325b@m) '(shift) (list G325d@ae)))) (set! G2e2f@add-subst (lambda (G3261@subst G3262@e) (G2e2b@mkstx G3262@e '() (list G3261@subst) '()))) (set! G2e31@syntax-kind? (lambda (G3265@x G3266@p?) (if (G2e0b@stx? G3265@x) (G2e31@syntax-kind? (G2e0f@stx-expr G3265@x) G3266@p?) (if (G298a@G288a@annotation? G3265@x) (G2e31@syntax-kind? (G298c@G288e@annotation-expression G3265@x) G3266@p?) (G3266@p? G3265@x))))) (set! G2e33@syntax-vector->list (lambda (G3269@x) (if (G2e0b@stx? G3269@x) ((lambda (G326b@ls G326c@m* G326d@s* G326e@ae*) (map (lambda (G3273@x) (G2e2b@mkstx G3273@x G326c@m* G326d@s* G326e@ae*)) G326b@ls)) (G2e33@syntax-vector->list (G2e0f@stx-expr G3269@x)) (G2e11@stx-mark* G3269@x) (G2e13@stx-subst* G3269@x) (G2e15@stx-ae* G3269@x)) (if (G298a@G288a@annotation? G3269@x) (G2e33@syntax-vector->list (G298c@G288e@annotation-expression G3269@x)) (if (vector? G3269@x) (vector->list G3269@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3269@x)))))) (set! G2e35@syntax-pair? (lambda (G3275@x) (G2e31@syntax-kind? G3275@x pair?))) (set! G2e37@syntax-vector? (lambda (G3277@x) (G2e31@syntax-kind? G3277@x vector?))) (set! G2e39@syntax-null? (lambda (G3279@x) (G2e31@syntax-kind? G3279@x null?))) (set! G2e3b@syntax-list? (lambda (G327b@x) ((lambda (G327d@t) (if G327d@t G327d@t (begin '#f (if (G2e35@syntax-pair? G327b@x) (begin '#f (G2e3b@syntax-list? (G2e3f@syntax-cdr G327b@x))) '#f)))) (G2e39@syntax-null? G327b@x)))) (set! G2e3d@syntax-car (lambda (G327f@x) (if (G2e0b@stx? G327f@x) (G2e2b@mkstx (G2e3d@syntax-car (G2e0f@stx-expr G327f@x)) (G2e11@stx-mark* G327f@x) (G2e13@stx-subst* G327f@x) (G2e15@stx-ae* G327f@x)) (if (G298a@G288a@annotation? G327f@x) (G2e3d@syntax-car (G298c@G288e@annotation-expression G327f@x)) (if (pair? G327f@x) (car G327f@x) (assertion-violation 'syntax-car '"BUG: not a pair" G327f@x)))))) (set! G2e3f@syntax-cdr (lambda (G3281@x) (if (G2e0b@stx? G3281@x) (G2e2b@mkstx (G2e3f@syntax-cdr (G2e0f@stx-expr G3281@x)) (G2e11@stx-mark* G3281@x) (G2e13@stx-subst* G3281@x) (G2e15@stx-ae* G3281@x)) (if (G298a@G288a@annotation? G3281@x) (G2e3f@syntax-cdr (G298c@G288e@annotation-expression G3281@x)) (if (pair? G3281@x) (cdr G3281@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3281@x)))))) (set! G2e41@syntax->list (lambda (G3283@x) (if (G2e35@syntax-pair? G3283@x) (cons (G2e3d@syntax-car G3283@x) (G2e41@syntax->list (G2e3f@syntax-cdr G3283@x))) (if (G2e39@syntax-null? G3283@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3283@x))))) (set! G2e43@id? (lambda (G3285@x) (if (G2e0b@stx? G3285@x) (begin '#f ((lambda (G3287@expr) (symbol? (if (G298a@G288a@annotation? G3287@expr) (G2989@G2888@annotation-stripped G3287@expr) G3287@expr))) (G2e0f@stx-expr G3285@x))) '#f))) (set! G2e45@id->sym (lambda (G3289@x) (begin (if (not (G2e0b@stx? G3289@x)) (error 'id->sym '"BUG in ikarus: not an id" G3289@x) (void)) ((lambda (G328b@expr) ((lambda (G328d@sym) (if (symbol? G328d@sym) G328d@sym (error 'id->sym '"BUG in ikarus: not an id" G3289@x))) (if (G298a@G288a@annotation? G328b@expr) (G2989@G2888@annotation-stripped G328b@expr) G328b@expr))) (G2e0f@stx-expr G3289@x))))) (set! G2e47@same-marks? (lambda (G328f@x G3290@y) ((lambda (G3293@t) (if G3293@t G3293@t (begin '#f (if (pair? G328f@x) (if (pair? G3290@y) (if (eq? (car G328f@x) (car G3290@y)) (begin '#f (G2e47@same-marks? (cdr G328f@x) (cdr G3290@y))) '#f) '#f) '#f)))) (if (null? G328f@x) (begin '#f (null? G3290@y)) '#f)))) (set! G2e49@bound-id=? (lambda (G3295@x G3296@y) (if (eq? (G2e45@id->sym G3295@x) (G2e45@id->sym G3296@y)) (begin '#f (G2e47@same-marks? (G2e11@stx-mark* G3295@x) (G2e11@stx-mark* G3296@y))) '#f))) (set! G2e4b@free-id=? (lambda (G3299@i G329a@j) ((lambda (G329d@t0 G329e@t1) (if ((lambda (G32a1@t) (if G32a1@t G32a1@t (begin '#f G329e@t1))) G329d@t0) (eq? G329d@t0 G329e@t1) (eq? (G2e45@id->sym G3299@i) (G2e45@id->sym G329a@j)))) (G2e5f@id->real-label G3299@i) (G2e5f@id->real-label G329a@j)))) (set! G2e4d@valid-bound-ids? (lambda (G32a3@id*) (if (for-all G2e43@id? G32a3@id*) (begin '#f (G2e4f@distinct-bound-ids? G32a3@id*)) '#f))) (set! G2e4f@distinct-bound-ids? (lambda (G32a5@id*) ((lambda (G32a7@t) (if G32a7@t G32a7@t (begin '#f (if (not (G2e51@bound-id-member? (car G32a5@id*) (cdr G32a5@id*))) (begin '#f (G2e4f@distinct-bound-ids? (cdr G32a5@id*))) '#f)))) (null? G32a5@id*)))) (set! G2e51@bound-id-member? (lambda (G32a9@id G32aa@id*) (if (pair? G32aa@id*) (begin '#f ((lambda (G32ad@t) (if G32ad@t G32ad@t (begin '#f (G2e51@bound-id-member? G32a9@id (cdr G32aa@id*))))) (G2e49@bound-id=? G32a9@id (car G32aa@id*)))) '#f))) (set! G2e53@self-evaluating? (lambda (G32af@x) ((lambda (G32b1@t) (if G32b1@t G32b1@t ((lambda (G32b3@t) (if G32b3@t G32b3@t ((lambda (G32b5@t) (if G32b5@t G32b5@t ((lambda (G32b7@t) (if G32b7@t G32b7@t ((lambda (G32b9@t) (if G32b9@t G32b9@t (begin '#f (bytevector? G32af@x)))) (regexp? G32af@x)))) (boolean? G32af@x)))) (char? G32af@x)))) (string? G32af@x)))) (number? G32af@x)))) (set! G2e55@strip-annotations (lambda (G32bb@x) (if (pair? G32bb@x) (cons (G2e55@strip-annotations (car G32bb@x)) (G2e55@strip-annotations (cdr G32bb@x))) (if (vector? G32bb@x) (vector-map G2e55@strip-annotations G32bb@x) (if (G298a@G288a@annotation? G32bb@x) (G2989@G2888@annotation-stripped G32bb@x) G32bb@x))))) (set! G2e57@strip (lambda (G32bd@x G32be@m*) (if (G2db9@top-marked? G32be@m*) (if ((lambda (G32c1@t) (if G32c1@t G32c1@t ((lambda (G32c3@t) (if G32c3@t G32c3@t (begin '#f (if (vector? G32bd@x) (if (> (vector-length G32bd@x) '0) (begin '#f (G298a@G288a@annotation? (vector-ref G32bd@x '0))) '#f) '#f)))) (if (pair? G32bd@x) (begin '#f (G298a@G288a@annotation? (car G32bd@x))) '#f)))) (G298a@G288a@annotation? G32bd@x)) (G2e55@strip-annotations G32bd@x) G32bd@x) ((letrec ((G32c5@f (lambda (G32c7@x) (if (G2e0b@stx? G32c7@x) (G2e57@strip (G2e0f@stx-expr G32c7@x) (G2e11@stx-mark* G32c7@x)) (if (G298a@G288a@annotation? G32c7@x) (G2989@G2888@annotation-stripped G32c7@x) (if (pair? G32c7@x) ((lambda (G32c9@a G32ca@d) (if (if (eq? G32c9@a (car G32c7@x)) (begin '#f (eq? G32ca@d (cdr G32c7@x))) '#f) G32c7@x (cons G32c9@a G32ca@d))) (G32c5@f (car G32c7@x)) (G32c5@f (cdr G32c7@x))) (if (vector? G32c7@x) ((lambda (G32cd@old) ((lambda (G32cf@new) (if (for-all eq? G32cd@old G32cf@new) G32c7@x (list->vector G32cf@new))) (map G32c5@f G32cd@old))) (vector->list G32c7@x)) G32c7@x))))))) G32c5@f) G32bd@x)))) (set! G2e59@stx->datum (lambda (G32d1@x) (G2e57@strip G32d1@x '()))) (set! G2e5b@same-marks*? (lambda (G32d3@mark* G32d4@mark** G32d5@si) (if (null? G32d5@si) '#f (if (G2e47@same-marks? G32d3@mark* (vector-ref G32d4@mark** (car G32d5@si))) (car G32d5@si) (G2e5b@same-marks*? G32d3@mark* G32d4@mark** (cdr G32d5@si)))))) (set! G2e5d@id->label (lambda (G32d9@id) ((lambda (G32db@t) (if G32db@t G32db@t (begin '#f ((lambda (G32dd@t) (if G32dd@t ((lambda (G32df@env) ((lambda (G32e1@rib) (call-with-values (lambda () (G2dc3@gen-define-label+loc G32d9@id G32e1@rib)) (lambda (G32e5@G32e3 G32e6@G32e4) ((lambda (G32e9@loc_ G32ea@lab) (begin (G2df2@extend-rib! G32e1@rib G32d9@id G32ea@lab) G32ea@lab)) G32e6@G32e4 G32e5@G32e3)))) (G3137@interaction-env-rib G32df@env))) G32dd@t) '#f)) (G3187@top-level-context))))) (G2e5f@id->real-label G32d9@id)))) (set! G2e5f@id->real-label (lambda (G32ed@id) ((lambda (G32ef@sym) ((letrec ((G32f1@search (lambda (G32f3@subst* G32f4@mark*) (if (null? G32f3@subst*) '#f (if (eq? (car G32f3@subst*) 'shift) (G32f1@search (cdr G32f3@subst*) (cdr G32f4@mark*)) ((lambda (G32f7@rib) ((lambda (G32f9@t) (if G32f9@t ((lambda (G32fb@ht) ((lambda (G32fd@si) ((lambda (G32ff@i) (if G32ff@i (vector-ref (G2ddc@rib-label* G32f7@rib) G32ff@i) (G32f1@search (cdr G32f3@subst*) G32f4@mark*))) (if G32fd@si (begin '#f (G2e5b@same-marks*? G32f4@mark* (G2dda@rib-mark** G32f7@rib) (reverse G32fd@si))) '#f))) (hashtable-ref G32fb@ht G32ef@sym '#f))) G32f9@t) ((lambda (G3301@t) (if G3301@t G3301@t (begin '#f ((letrec ((G3303@f (lambda (G3305@sym* G3306@mark** G3307@label*) (if (null? G3305@sym*) (G32f1@search (cdr G32f3@subst*) G32f4@mark*) (if (if (eq? (car G3305@sym*) G32ef@sym) (begin '#f (G2e47@same-marks? (car G3306@mark**) G32f4@mark*)) '#f) (car G3307@label*) (G3303@f (cdr G3305@sym*) (cdr G3306@mark**) (cdr G3307@label*))))))) G3303@f) (G2dd8@rib-sym* G32f7@rib) (G2dda@rib-mark** G32f7@rib) (G2ddc@rib-label* G32f7@rib))))) (G2df0@find-label G32f7@rib G32ef@sym G32f4@mark*)))) (G2dde@rib-sealed/freq G32f7@rib))) (car G32f3@subst*))))))) G32f1@search) (G2e13@stx-subst* G32ed@id) (G2e11@stx-mark* G32ed@id))) (G2e45@id->sym G32ed@id)))) (set! G2e61@label->binding (lambda (G330b@x G330c@r) ((lambda (G330f@t) (if G330f@t ((lambda (G3311@b) (if (if (pair? G3311@b) (begin '#f (eq? (car G3311@b) '$core-rtd)) '#f) (cons '$rtd (map G303c@bless (cdr G3311@b))) (if (if (pair? G3311@b) (begin '#f (eq? (car G3311@b) 'global-rtd)) '#f) ((lambda (G3313@lib G3314@loc) (cons '$rtd (symbol-value G3314@loc))) (cadr G3311@b) (cddr G3311@b)) G3311@b))) G330f@t) ((lambda (G3317@t) (if G3317@t (cdr G3317@t) ((lambda (G3319@t) (if G3319@t ((lambda (G331b@env) ((lambda (G331d@t) (if G331d@t ((lambda (G331f@p) (cons* 'lexical (cdr G331f@p) '#f)) G331d@t) '(displaced-lexical . #f))) (assq G330b@x (G313b@interaction-env-locs G331b@env)))) G3319@t) '(displaced-lexical . #f))) (G3187@top-level-context)))) (assq G330b@x G330c@r)))) (G2c37@G2acb@imported-label->binding G330b@x)))) (set! G2e63@make-binding cons) (set! G2e65@binding-type car) (set! G2e67@binding-value cdr) (set! G2e69@raise-unbound-error (lambda (G3321@id) (G3177@syntax-violation* '#f '"unbound identifier" G3321@id (G4c58@G4bf8@make-undefined-violation)))) (set! G2e6b@syntax-type (lambda (G3323@e G3324@r) (if (G2e43@id? G3323@e) ((lambda (G3327@id) ((lambda (G3329@label) ((lambda (G332b@b) ((lambda (G332d@type) ((lambda () (begin (if (not G3329@label) (G2e69@raise-unbound-error G3327@id) (void)) ((lambda (G332f@t) (if (memv G332f@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G332d@type (G2e67@binding-value G332b@b) G3327@id) (values 'other '#f '#f))) G332d@type))))) (G2e65@binding-type G332b@b))) (G2e61@label->binding G3329@label G3324@r))) (G2e5d@id->label G3327@id))) G3323@e) (if (G2e35@syntax-pair? G3323@e) ((lambda (G3331@id) (if (G2e43@id? G3331@id) ((lambda (G3333@label) ((lambda (G3335@b) ((lambda (G3337@type) ((lambda () (begin (if (not G3333@label) (G2e69@raise-unbound-error G3331@id) (void)) ((lambda (G3339@t) (if (memv G3339@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G3337@type (G2e67@binding-value G3335@b) G3331@id) (values 'call '#f '#f))) G3337@type))))) (G2e65@binding-type G3335@b))) (G2e61@label->binding G3333@label G3324@r))) (G2e5d@id->label G3331@id)) (values 'call '#f '#f))) (G2e3d@syntax-car G3323@e)) ((lambda (G333b@d) (if (G2e53@self-evaluating? G333b@d) (values 'constant G333b@d '#f) (values 'other '#f '#f))) (G2e59@stx->datum G3323@e)))))) (set! G2e82@sanitize-binding (lambda (G333d@x G333e@src) (if (procedure? G333d@x) (cons* 'local-macro G333d@x G333e@src) (if (if (pair? G333d@x) (if (eq? (car G333d@x) 'macro!) (begin '#f (procedure? (cdr G333d@x))) '#f) '#f) (cons* 'local-macro! (cdr G333d@x) G333e@src) (if (if (pair? G333d@x) (begin '#f (eq? (car G333d@x) '$rtd)) '#f) G333d@x (assertion-violation 'expand '"invalid transformer" G333d@x)))))) (set! G2e84@make-variable-transformer (lambda (G3341@x) (if (procedure? G3341@x) (cons 'macro! G3341@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3341@x)))) (set! G2e86@variable-transformer? (lambda (G3343@x) (if (pair? G3343@x) (if (eq? (car G3343@x) 'macro!) (begin '#f (procedure? (cdr G3343@x))) '#f) '#f))) (set! G2e88@variable-transformer-procedure (lambda (G3345@x) (if (G2e86@variable-transformer? G3345@x) (cdr G3345@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G3345@x)))) (set! G2e8a@make-eval-transformer (lambda (G3347@x) (G2e82@sanitize-binding (eval-core (G29f9@G29a1@expanded->core G3347@x)) G3347@x))) (set! G300e@parse-define (lambda (G3349@x) ((lambda (G334b@t) ((lambda (G334d@ls/false) (if (if G334d@ls/false (begin '#f (apply (lambda (G334f@id G3350@fmls G3351@b G3352@b*) (G2e43@id? G334f@id)) G334d@ls/false)) '#f) (apply (lambda (G3357@id G3358@fmls G3359@b G335a@b*) (begin (G30ae@verify-formals G3358@fmls G3349@x) (values G3357@id (cons 'defun (cons G3358@fmls (cons G3359@b G335a@b*)))))) G334d@ls/false) ((lambda (G335f@t) ((lambda (G3361@ls/false) (if (if G3361@ls/false (begin '#f (apply (lambda (G3363@id G3364@val) (G2e43@id? G3363@id)) G3361@ls/false)) '#f) (apply (lambda (G3367@id G3368@val) (values G3367@id (cons 'expr G3368@val))) G3361@ls/false) ((lambda (G336b@t) ((lambda (G336d@ls/false) (if (if G336d@ls/false (begin '#f (apply (lambda (G336f@id) (G2e43@id? G336f@id)) G336d@ls/false)) '#f) (apply (lambda (G3371@id) (values G3371@id (cons 'expr (G303c@bless '(void))))) G336d@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G336b@t))) (G3086@syntax-dispatch G336b@t '(_ any)))) G335f@t))) (G3086@syntax-dispatch G335f@t '(_ any any)))) G334b@t))) (G3086@syntax-dispatch G334b@t '(_ (any . any) any . each-any)))) G3349@x))) (set! G3010@parse-define-syntax (lambda (G3373@x) ((lambda (G3375@t) ((lambda (G3377@ls/false) (if (if G3377@ls/false (begin '#f (apply (lambda (G3379@id G337a@val) (G2e43@id? G3379@id)) G3377@ls/false)) '#f) (apply (lambda (G337d@id G337e@val) (values G337d@id G337e@val)) G3377@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3375@t))) (G3086@syntax-dispatch G3375@t '(_ any any)))) G3373@x))) (set! G3012@scheme-stx-hashtable (make-eq-hashtable)) (set! G3014@scheme-stx (lambda (G3381@sym) ((lambda (G3383@t) (if G3383@t G3383@t (begin '#f ((lambda (G3385@subst) ((lambda (G3387@stx) ((lambda (G3389@stx) ((lambda () (begin (hashtable-set! G3012@scheme-stx-hashtable G3381@sym G3389@stx) G3389@stx)))) ((lambda (G338b@t) (if G338b@t ((lambda (G338d@x) ((lambda (G338f@name G3390@label) (G2e2f@add-subst (G2dd6@make-rib (list G338f@name) (list G2db7@top-mark*) (list G3390@label) '#f '#f) G3387@stx)) (car G338d@x) (cdr G338d@x))) G338b@t) G3387@stx)) (assq G3381@sym G3385@subst)))) (G2e0d@make-stx G3381@sym G2db7@top-mark* '() '()))) (G2c0d@G2a77@library-subst (G2c31@G2abf@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G3012@scheme-stx-hashtable G3381@sym '#f)))) (set! G3016@lexical-var car) (set! G3018@lexical-mutable? cdr) (set! G301a@set-lexical-mutable! set-cdr!) (set! G301c@add-lexical (lambda (G3393@lab G3394@lex G3395@r) (cons (cons* G3393@lab 'lexical G3394@lex '#f) G3395@r))) (set! G301e@add-lexicals (lambda (G3399@lab* G339a@lex* G339b@r) (if (null? G3399@lab*) G339b@r (G301e@add-lexicals (cdr G3399@lab*) (cdr G339a@lex*) (G301c@add-lexical (car G3399@lab*) (car G339a@lex*) G339b@r))))) (set! G3020@letrec-helper (lambda (G339f@e G33a0@r G33a1@mr G33a2@build) ((lambda (G33a7@t) ((lambda (G33a9@ls/false) (if G33a9@ls/false (apply (lambda (G33ab@lhs* G33ac@rhs* G33ad@b G33ae@b*) (if (not (G2e4d@valid-bound-ids? G33ab@lhs*)) (G3040@invalid-fmls-error G339f@e G33ab@lhs*) ((lambda (G33b3@lex* G33b4@lab*) ((lambda (G33b7@rib G33b8@r) ((lambda (G33bb@body G33bc@rhs*) (G33a2@build '#f G33b3@lex* G33bc@rhs* G33bb@body)) (G30c0@chi-internal (G2e2f@add-subst G33b7@rib (cons G33ad@b G33ae@b*)) G33b8@r G33a1@mr) (G30a6@chi-expr* (map (lambda (G33bf@x) (G2e2f@add-subst G33b7@rib G33bf@x)) G33ac@rhs*) G33b8@r G33a1@mr))) (G2dfc@make-full-rib G33ab@lhs* G33b4@lab*) (G301e@add-lexicals G33b4@lab* G33b3@lex* G33a0@r))) (map G2dbb@gen-lexical G33ab@lhs*) (map G2dbf@gen-label G33ab@lhs*)))) G33a9@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G33a7@t))) (G3086@syntax-dispatch G33a7@t '(_ #(each (any any)) any . each-any)))) G339f@e))) (set! G3022@letrec-transformer (lambda (G33c1@e G33c2@r G33c3@mr) (G3020@letrec-helper G33c1@e G33c2@r G33c3@mr G2da0@G2d13@build-letrec))) (set! G3024@letrec*-transformer (lambda (G33c7@e G33c8@r G33c9@mr) (G3020@letrec-helper G33c7@e G33c8@r G33c9@mr G2da1@G2d15@build-letrec*))) (set! G3026@fluid-let-syntax-transformer (lambda (G33cd@e G33ce@r G33cf@mr) ((lambda (G33d4@lookup) (begin (set! G33d4@lookup (lambda (G33e7@x) ((lambda (G33e9@t) (if G33e9@t G33e9@t (begin '#f (G3179@syntax-violation '#f '"unbound identifier" G33cd@e G33e7@x)))) (G2e5d@id->label G33e7@x)))) ((lambda (G33d5@t) ((lambda (G33d7@ls/false) (if G33d7@ls/false (apply (lambda (G33d9@lhs* G33da@rhs* G33db@b G33dc@b*) (if (not (G2e4d@valid-bound-ids? G33d9@lhs*)) (G3040@invalid-fmls-error G33cd@e G33d9@lhs*) ((lambda (G33e1@lab* G33e2@rhs*) (G30c0@chi-internal (cons G33db@b G33dc@b*) (append (map cons G33e1@lab* G33e2@rhs*) G33ce@r) (append (map cons G33e1@lab* G33e2@rhs*) G33cf@mr))) (map G33d4@lookup G33d9@lhs*) (map (lambda (G33e5@x) (G2e8a@make-eval-transformer (G30e7@expand-transformer G33e5@x G33cf@mr))) G33da@rhs*)))) G33d7@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G33d5@t))) (G3086@syntax-dispatch G33d5@t '(_ #(each (any any)) any . each-any)))) G33cd@e))) '#f))) (set! G3028@type-descriptor-transformer (lambda (G33eb@e G33ec@r G33ed@mr) ((lambda (G33f1@t) ((lambda (G33f3@ls/false) (if (if G33f3@ls/false (begin '#f (apply (lambda (G33f5@id) (G2e43@id? G33f5@id)) G33f3@ls/false)) '#f) (apply (lambda (G33f7@id) ((lambda (G33f9@lab) ((lambda (G33fb@b) ((lambda (G33fd@type) ((lambda () (begin (if (not G33f9@lab) (G2e69@raise-unbound-error G33f7@id) (void)) (if (not (if (eq? G33fd@type '$rtd) (begin '#f (not (list? (G2e67@binding-value G33fb@b)))) '#f)) (G3179@syntax-violation '#f '"not a record type" G33eb@e) (void)) (list 'quote (G2e67@binding-value G33fb@b)))))) (G2e65@binding-type G33fb@b))) (G2e61@label->binding G33f9@lab G33ec@r))) (G2e5d@id->label G33f7@id))) G33f3@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G33f1@t))) (G3086@syntax-dispatch G33f1@t '(_ any)))) G33eb@e))) (set! G302a@record-type-descriptor-transformer (lambda (G33ff@e G3400@r G3401@mr) ((lambda (G3405@t) ((lambda (G3407@ls/false) (if (if G3407@ls/false (begin '#f (apply (lambda (G3409@id) (G2e43@id? G3409@id)) G3407@ls/false)) '#f) (apply (lambda (G340b@id) ((lambda (G340d@lab) ((lambda (G340f@b) ((lambda (G3411@type) ((lambda () (begin (if (not G340d@lab) (G2e69@raise-unbound-error G340b@id) (void)) (if (not (if (eq? G3411@type '$rtd) (begin '#f (list? (G2e67@binding-value G340f@b))) '#f)) (G3179@syntax-violation '#f '"not a record type" G33ff@e) (void)) (G30aa@chi-expr (car (G2e67@binding-value G340f@b)) G3400@r G3401@mr))))) (G2e65@binding-type G340f@b))) (G2e61@label->binding G340d@lab G3400@r))) (G2e5d@id->label G340b@id))) G3407@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3405@t))) (G3086@syntax-dispatch G3405@t '(_ any)))) G33ff@e))) (set! G302c@record-constructor-descriptor-transformer (lambda (G3413@e G3414@r G3415@mr) ((lambda (G3419@t) ((lambda (G341b@ls/false) (if (if G341b@ls/false (begin '#f (apply (lambda (G341d@id) (G2e43@id? G341d@id)) G341b@ls/false)) '#f) (apply (lambda (G341f@id) ((lambda (G3421@lab) ((lambda (G3423@b) ((lambda (G3425@type) ((lambda () (begin (if (not G3421@lab) (G2e69@raise-unbound-error G341f@id) (void)) (if (not (if (eq? G3425@type '$rtd) (begin '#f (list? (G2e67@binding-value G3423@b))) '#f)) (G3179@syntax-violation '#f '"invalid type" G3413@e) (void)) (G30aa@chi-expr (cadr (G2e67@binding-value G3423@b)) G3414@r G3415@mr))))) (G2e65@binding-type G3423@b))) (G2e61@label->binding G3421@lab G3414@r))) (G2e5d@id->label G341f@id))) G341b@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3419@t))) (G3086@syntax-dispatch G3419@t '(_ any)))) G3413@e))) (set! G302e@when-macro (lambda (G3427@e) ((lambda (G3429@t) ((lambda (G342b@ls/false) (if G342b@ls/false (apply (lambda (G342d@test G342e@e G342f@e*) (G303c@bless (list 'if G342d@test (cons 'begin (cons G342e@e G342f@e*))))) G342b@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3429@t))) (G3086@syntax-dispatch G3429@t '(_ any any . each-any)))) G3427@e))) (set! G3030@unless-macro (lambda (G3433@e) ((lambda (G3435@t) ((lambda (G3437@ls/false) (if G3437@ls/false (apply (lambda (G3439@test G343a@e G343b@e*) (G303c@bless (list 'if (list 'not G3439@test) (cons 'begin (cons G343a@e G343b@e*))))) G3437@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3435@t))) (G3086@syntax-dispatch G3435@t '(_ any any . each-any)))) G3433@e))) (set! G3032@if-transformer (lambda (G343f@e G3440@r G3441@mr) ((lambda (G3445@t) ((lambda (G3447@ls/false) (if G3447@ls/false (apply (lambda (G3449@e0 G344a@e1 G344b@e2) (list 'if (G30aa@chi-expr G3449@e0 G3440@r G3441@mr) (G30aa@chi-expr G344a@e1 G3440@r G3441@mr) (G30aa@chi-expr G344b@e2 G3440@r G3441@mr))) G3447@ls/false) ((lambda (G344f@t) ((lambda (G3451@ls/false) (if G3451@ls/false (apply (lambda (G3453@e0 G3454@e1) (list 'if (G30aa@chi-expr G3453@e0 G3440@r G3441@mr) (G30aa@chi-expr G3454@e1 G3440@r G3441@mr) (G2d9f@G2d11@build-void))) G3451@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G344f@t))) (G3086@syntax-dispatch G344f@t '(_ any any)))) G3445@t))) (G3086@syntax-dispatch G3445@t '(_ any any any)))) G343f@e))) (set! G3034@case-macro (lambda (G3457@e) ((lambda (G345a@build-last G345c@build-one) (begin (set! G345a@build-last (lambda (G3481@cls) ((lambda (G3483@t) ((lambda (G3485@ls/false) (if G3485@ls/false (apply (lambda (G3487@e G3488@e*) (cons 'begin (cons G3487@e G3488@e*))) G3485@ls/false) ((lambda (G348b@t) ((lambda (G348d@ls/false) (if G348d@ls/false (apply (lambda () (G345c@build-one G3481@cls '(if #f #f))) G348d@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G348b@t))) (G3086@syntax-dispatch G348b@t '_))) G3483@t))) (G3086@syntax-dispatch G3483@t '(#(scheme-id else) any . each-any)))) G3481@cls))) (set! G345c@build-one (lambda (G3473@cls G3474@k) ((lambda (G3477@t) ((lambda (G3479@ls/false) (if G3479@ls/false (apply (lambda (G347b@d* G347c@e G347d@e*) (list 'if (list 'memv 't (list 'quote G347b@d*)) (cons 'begin (cons G347c@e G347d@e*)) G3474@k)) G3479@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3477@t))) (G3086@syntax-dispatch G3477@t '(each-any any . each-any)))) G3473@cls))) ((lambda (G345d@t) ((lambda (G345f@ls/false) (if G345f@ls/false (apply (lambda (G3461@expr) (G303c@bless (cons 'let (cons (list (list 't G3461@expr)) '((if #f #f)))))) G345f@ls/false) ((lambda (G3463@t) ((lambda (G3465@ls/false) (if G3465@ls/false (apply (lambda (G3467@expr G3468@cls G3469@cls*) (G303c@bless (list 'let (list (list 't G3467@expr)) ((letrec ((G346d@f (lambda (G346f@cls G3470@cls*) (if (null? G3470@cls*) (G345a@build-last G346f@cls) (G345c@build-one G346f@cls (G346d@f (car G3470@cls*) (cdr G3470@cls*))))))) G346d@f) G3468@cls G3469@cls*)))) G3465@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3463@t))) (G3086@syntax-dispatch G3463@t '(_ any any . each-any)))) G345d@t))) (G3086@syntax-dispatch G345d@t '(_ any)))) G3457@e))) '#f '#f))) (set! G3036@quote-transformer (lambda (G348f@e G3490@r G3491@mr) ((lambda (G3495@t) ((lambda (G3497@ls/false) (if G3497@ls/false (apply (lambda (G3499@datum) (list 'quote (G2e59@stx->datum G3499@datum))) G3497@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3495@t))) (G3086@syntax-dispatch G3495@t '(_ any)))) G348f@e))) (set! G3038@case-lambda-transformer (lambda (G349b@e G349c@r G349d@mr) ((lambda (G34a1@t) ((lambda (G34a3@ls/false) (if G34a3@ls/false (apply (lambda (G34a5@fmls* G34a6@b* G34a7@b**) (call-with-values (lambda () (G30b2@chi-lambda-clause* G349b@e G34a5@fmls* (map cons G34a6@b* G34a7@b**) G349c@r G349d@mr)) (lambda (G34ad@G34ab G34ae@G34ac) ((lambda (G34b1@body* G34b2@fmls*) (G2d9c@G2cc5@build-case-lambda '#f G34b2@fmls* G34b1@body*)) G34ae@G34ac G34ad@G34ab)))) G34a3@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G34a1@t))) (G3086@syntax-dispatch G34a1@t '(_ . #(each (any any . each-any)))))) G349b@e))) (set! G303a@lambda-transformer (lambda (G34b5@e G34b6@r G34b7@mr) ((lambda (G34bb@t) ((lambda (G34bd@ls/false) (if G34bd@ls/false (apply (lambda (G34bf@fmls G34c0@b G34c1@b*) (call-with-values (lambda () (G30b0@chi-lambda-clause G34b5@e G34bf@fmls (cons G34c0@b G34c1@b*) G34b6@r G34b7@mr)) (lambda (G34c7@G34c5 G34c8@G34c6) ((lambda (G34cb@body G34cc@fmls) (G2d9b@G2cc3@build-lambda '#f G34cc@fmls G34cb@body)) G34c8@G34c6 G34c7@G34c5)))) G34bd@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G34bb@t))) (G3086@syntax-dispatch G34bb@t '(_ any any . each-any)))) G34b5@e))) (set! G303c@bless (lambda (G34cf@x) (G2e2b@mkstx ((letrec ((G34d1@f (lambda (G34d3@x) (if (G2e0b@stx? G34d3@x) G34d3@x (if (pair? G34d3@x) (cons (G34d1@f (car G34d3@x)) (G34d1@f (cdr G34d3@x))) (if (symbol? G34d3@x) (G3014@scheme-stx G34d3@x) (if (vector? G34d3@x) (vector-map G34d1@f G34d3@x) G34d3@x))))))) G34d1@f) G34cf@x) '() '() '()))) (set! G303e@with-syntax-macro (lambda (G34d5@e) ((lambda (G34d7@t) ((lambda (G34d9@ls/false) (if G34d9@ls/false (apply (lambda (G34db@pat* G34dc@expr* G34dd@b G34de@b*) ((lambda (G34e3@idn*) (begin (G30ae@verify-formals (map car G34e3@idn*) G34d5@e) ((lambda (G34e5@t*) (G303c@bless (list 'let (map list G34e5@t* G34dc@expr*) ((letrec ((G34e7@f (lambda (G34e9@pat* G34ea@t*) (if (null? G34e9@pat*) (cons 'begin (cons '#f (cons G34dd@b G34de@b*))) (list 'syntax-case (car G34ea@t*) '() (list (car G34e9@pat*) (G34e7@f (cdr G34e9@pat*) (cdr G34ea@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G34e9@pat*)) (car G34ea@t*)))))))) G34e7@f) G34db@pat* G34e5@t*)))) (G3165@generate-temporaries G34dc@expr*)))) ((letrec ((G34ed@f (lambda (G34ef@pat*) (if (null? G34ef@pat*) '() (call-with-values (lambda () (G3084@convert-pattern (car G34ef@pat*) '())) (lambda (G34f3@G34f1 G34f4@G34f2) ((lambda (G34f7@idn* G34f8@pat) (append G34f7@idn* (G34ed@f (cdr G34ef@pat*)))) G34f4@G34f2 G34f3@G34f1))))))) G34ed@f) G34db@pat*))) G34d9@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G34d7@t))) (G3086@syntax-dispatch G34d7@t '(_ #(each (any any)) any . each-any)))) G34d5@e))) (set! G3040@invalid-fmls-error (lambda (G34fb@stx G34fc@fmls) ((lambda (G34ff@t) ((lambda (G3501@ls/false) (if G3501@ls/false (apply (lambda (G3503@id* G3504@last) ((letrec ((G3507@f (lambda (G3509@id*) (if (null? G3509@id*) (values) (if (not (G2e43@id? (car G3509@id*))) (G3179@syntax-violation '#f '"not an identifier" G34fb@stx (car G3509@id*)) (begin (G3507@f (cdr G3509@id*)) (if (G2e51@bound-id-member? (car G3509@id*) (cdr G3509@id*)) (G3179@syntax-violation '#f '"duplicate binding" G34fb@stx (car G3509@id*)) (void)))))))) G3507@f) (if (G2e43@id? G3504@last) (cons G3504@last G3503@id*) (if (G2e39@syntax-null? G3504@last) G3503@id* (G3179@syntax-violation '#f '"not an identifier" G34fb@stx G3504@last))))) G3501@ls/false) ((lambda (G350b@t) ((lambda (G350d@ls/false) (if G350d@ls/false (apply (lambda () (G3179@syntax-violation '#f '"malformed binding form" G34fb@stx G34fc@fmls)) G350d@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G350b@t))) (G3086@syntax-dispatch G350b@t '_))) G34ff@t))) (G3086@syntax-dispatch G34ff@t '#(each+ any () any)))) G34fc@fmls))) (set! G3042@let-macro (lambda (G350f@stx) ((lambda (G3511@t) ((lambda (G3513@ls/false) (if G3513@ls/false (apply (lambda (G3515@lhs* G3516@rhs* G3517@b G3518@b*) (if (G2e4d@valid-bound-ids? G3515@lhs*) (G303c@bless (cons (cons 'lambda (cons G3515@lhs* (cons G3517@b G3518@b*))) G3516@rhs*)) (G3040@invalid-fmls-error G350f@stx G3515@lhs*))) G3513@ls/false) ((lambda (G351d@t) ((lambda (G351f@ls/false) (if (if G351f@ls/false (begin '#f (apply (lambda (G3521@f G3522@lhs* G3523@rhs* G3524@b G3525@b*) (G2e43@id? G3521@f)) G351f@ls/false)) '#f) (apply (lambda (G352b@f G352c@lhs* G352d@rhs* G352e@b G352f@b*) (if (G2e4d@valid-bound-ids? G352c@lhs*) (G303c@bless (cons (list 'letrec (list (list G352b@f (cons 'lambda (cons G352c@lhs* (cons G352e@b G352f@b*))))) G352b@f) G352d@rhs*)) (G3040@invalid-fmls-error G350f@stx G352c@lhs*))) G351f@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G351d@t))) (G3086@syntax-dispatch G351d@t '(_ any #(each (any any)) any . each-any)))) G3511@t))) (G3086@syntax-dispatch G3511@t '(_ #(each (any any)) any . each-any)))) G350f@stx))) (set! G3044@let-values-macro (lambda (G3535@stx) ((lambda (G3538@rename G353a@rename*) (begin (set! G3538@rename (lambda (G359a@x G359b@old* G359c@new*) (begin (if (not (G2e43@id? G359a@x)) (G3179@syntax-violation '#f '"not an indentifier" G3535@stx G359a@x) (void)) (if (G2e51@bound-id-member? G359a@x G359b@old*) (G3179@syntax-violation '#f '"duplicate binding" G3535@stx G359a@x) (void)) ((lambda (G35a0@y) (values G35a0@y (cons G359a@x G359b@old*) (cons G35a0@y G359c@new*))) (gensym (G317f@syntax->datum G359a@x)))))) (set! G353a@rename* (lambda (G3588@x* G3589@old* G358a@new*) (if (null? G3588@x*) (values '() G3589@old* G358a@new*) (call-with-values (lambda () (G3538@rename (car G3588@x*) G3589@old* G358a@new*)) (lambda (G358e@x G358f@old* G3590@new*) (call-with-values (lambda () (G353a@rename* (cdr G3588@x*) G358f@old* G3590@new*)) (lambda (G3594@x* G3595@old* G3596@new*) (values (cons G358e@x G3594@x*) G3595@old* G3596@new*)))))))) ((lambda (G353b@t) ((lambda (G353d@ls/false) (if G353d@ls/false (apply (lambda (G353f@b G3540@b*) (cons* (G303c@bless 'let) '() G353f@b G3540@b*)) G353d@ls/false) ((lambda (G3543@t) ((lambda (G3545@ls/false) (if G3545@ls/false (apply (lambda (G3547@lhs* G3548@rhs* G3549@b G354a@b*) (G303c@bless ((letrec ((G354f@f (lambda (G3551@lhs* G3552@rhs* G3553@old* G3554@new*) (if (null? G3551@lhs*) (cons 'let (cons (map list G3553@old* G3554@new*) (cons G3549@b G354a@b*))) ((lambda (G3559@t) ((lambda (G355b@ls/false) (if G355b@ls/false (apply (lambda (G355d@x*) (call-with-values (lambda () (G353a@rename* G355d@x* G3553@old* G3554@new*)) (lambda (G3562@G355f G3563@G3560 G3564@G3561) ((lambda (G3568@new* G3569@old* G356a@y*) (list 'call-with-values (list 'lambda '() (car G3552@rhs*)) (list 'lambda G356a@y* (G354f@f (cdr G3551@lhs*) (cdr G3552@rhs*) G3569@old* G3568@new*)))) G3564@G3561 G3563@G3560 G3562@G355f)))) G355b@ls/false) ((lambda (G356e@t) ((lambda (G3570@ls/false) (if G3570@ls/false (apply (lambda (G3572@x* G3573@x) (call-with-values (lambda () (G3538@rename G3573@x G3553@old* G3554@new*)) (lambda (G3576@y G3577@old* G3578@new*) (call-with-values (lambda () (G353a@rename* G3572@x* G3577@old* G3578@new*)) (lambda (G357c@y* G357d@old* G357e@new*) (list 'call-with-values (list 'lambda '() (car G3552@rhs*)) (list 'lambda (append G357c@y* G3576@y) (G354f@f (cdr G3551@lhs*) (cdr G3552@rhs*) G357d@old* G357e@new*)))))))) G3570@ls/false) ((lambda (G3582@t) ((lambda (G3584@ls/false) (if G3584@ls/false (apply (lambda (G3586@others) (G3179@syntax-violation '#f '"malformed bindings" G3535@stx G3586@others)) G3584@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3582@t))) (G3086@syntax-dispatch G3582@t 'any))) G356e@t))) (G3086@syntax-dispatch G356e@t '#(each+ any () any)))) G3559@t))) (G3086@syntax-dispatch G3559@t 'each-any))) (car G3551@lhs*)))))) G354f@f) G3547@lhs* G3548@rhs* '() '()))) G3545@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3543@t))) (G3086@syntax-dispatch G3543@t '(_ #(each (any any)) any . each-any)))) G353b@t))) (G3086@syntax-dispatch G353b@t '(_ () any . each-any)))) G3535@stx))) '#f '#f))) (set! G3046@let*-values-macro (lambda (G35a2@stx) ((lambda (G35a5@check) (begin (set! G35a5@check (lambda (G35d4@x*) (if (not (null? G35d4@x*)) ((lambda (G35d6@x) (begin (if (not (G2e43@id? G35d6@x)) (G3179@syntax-violation '#f '"not an identifier" G35a2@stx G35d6@x) (void)) (G35a5@check (cdr G35d4@x*)) (if (G2e51@bound-id-member? G35d6@x (cdr G35d4@x*)) (G3179@syntax-violation '#f '"duplicate identifier" G35a2@stx G35d6@x) (void)))) (car G35d4@x*)) (void)))) ((lambda (G35a6@t) ((lambda (G35a8@ls/false) (if G35a8@ls/false (apply (lambda (G35aa@b G35ab@b*) (cons* (G303c@bless 'let) '() G35aa@b G35ab@b*)) G35a8@ls/false) ((lambda (G35ae@t) ((lambda (G35b0@ls/false) (if G35b0@ls/false (apply (lambda (G35b2@lhs* G35b3@rhs* G35b4@b G35b5@b*) (G303c@bless ((letrec ((G35ba@f (lambda (G35bc@lhs* G35bd@rhs*) (if (null? G35bc@lhs*) (cons 'begin (cons G35b4@b G35b5@b*)) ((lambda (G35c0@t) ((lambda (G35c2@ls/false) (if G35c2@ls/false (apply (lambda (G35c4@x*) (begin (G35a5@check G35c4@x*) (list 'call-with-values (list 'lambda '() (car G35bd@rhs*)) (list 'lambda G35c4@x* (G35ba@f (cdr G35bc@lhs*) (cdr G35bd@rhs*)))))) G35c2@ls/false) ((lambda (G35c6@t) ((lambda (G35c8@ls/false) (if G35c8@ls/false (apply (lambda (G35ca@x* G35cb@x) (begin (G35a5@check (cons G35cb@x G35ca@x*)) (list 'call-with-values (list 'lambda '() (car G35bd@rhs*)) (list 'lambda (append G35ca@x* G35cb@x) (G35ba@f (cdr G35bc@lhs*) (cdr G35bd@rhs*)))))) G35c8@ls/false) ((lambda (G35ce@t) ((lambda (G35d0@ls/false) (if G35d0@ls/false (apply (lambda (G35d2@others) (G3179@syntax-violation '#f '"malformed bindings" G35a2@stx G35d2@others)) G35d0@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G35ce@t))) (G3086@syntax-dispatch G35ce@t 'any))) G35c6@t))) (G3086@syntax-dispatch G35c6@t '#(each+ any () any)))) G35c0@t))) (G3086@syntax-dispatch G35c0@t 'each-any))) (car G35bc@lhs*)))))) G35ba@f) G35b2@lhs* G35b3@rhs*))) G35b0@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G35ae@t))) (G3086@syntax-dispatch G35ae@t '(_ #(each (any any)) any . each-any)))) G35a6@t))) (G3086@syntax-dispatch G35a6@t '(_ () any . each-any)))) G35a2@stx))) '#f))) (set! G3048@trace-lambda-macro (lambda (G35d8@stx) ((lambda (G35da@t) ((lambda (G35dc@ls/false) (if G35dc@ls/false (apply (lambda (G35de@who G35df@fmls G35e0@b G35e1@b*) (if (G2e4d@valid-bound-ids? G35df@fmls) (G303c@bless (list 'make-traced-procedure (list 'quote G35de@who) (cons 'lambda (cons G35df@fmls (cons G35e0@b G35e1@b*))))) (G3040@invalid-fmls-error G35d8@stx G35df@fmls))) G35dc@ls/false) ((lambda (G35e6@t) ((lambda (G35e8@ls/false) (if G35e8@ls/false (apply (lambda (G35ea@who G35eb@fmls G35ec@last G35ed@b G35ee@b*) (if (G2e4d@valid-bound-ids? (cons G35ec@last G35eb@fmls)) (G303c@bless (list 'make-traced-procedure (list 'quote G35ea@who) (cons 'lambda (cons (append G35eb@fmls G35ec@last) (cons G35ed@b G35ee@b*))))) (G3040@invalid-fmls-error G35d8@stx (append G35eb@fmls G35ec@last)))) G35e8@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G35e6@t))) (G3086@syntax-dispatch G35e6@t '(_ any #(each+ any () any) any . each-any)))) G35da@t))) (G3086@syntax-dispatch G35da@t '(_ any each-any any . each-any)))) G35d8@stx))) (set! G304a@trace-define-macro (lambda (G35f4@stx) ((lambda (G35f6@t) ((lambda (G35f8@ls/false) (if G35f8@ls/false (apply (lambda (G35fa@who G35fb@fmls G35fc@b G35fd@b*) (if (G2e4d@valid-bound-ids? G35fb@fmls) (G303c@bless (list 'define G35fa@who (list 'make-traced-procedure (list 'quote G35fa@who) (cons 'lambda (cons G35fb@fmls (cons G35fc@b G35fd@b*)))))) (G3040@invalid-fmls-error G35f4@stx G35fb@fmls))) G35f8@ls/false) ((lambda (G3602@t) ((lambda (G3604@ls/false) (if G3604@ls/false (apply (lambda (G3606@who G3607@fmls G3608@last G3609@b G360a@b*) (if (G2e4d@valid-bound-ids? (cons G3608@last G3607@fmls)) (G303c@bless (list 'define G3606@who (list 'make-traced-procedure (list 'quote G3606@who) (cons 'lambda (cons (append G3607@fmls G3608@last) (cons G3609@b G360a@b*)))))) (G3040@invalid-fmls-error G35f4@stx (append G3607@fmls G3608@last)))) G3604@ls/false) ((lambda (G3610@t) ((lambda (G3612@ls/false) (if G3612@ls/false (apply (lambda (G3614@who G3615@expr) (if (G2e43@id? G3614@who) (G303c@bless (list 'define G3614@who (list 'let (list (list 'v G3615@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G3614@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3179@syntax-violation '#f '"invalid name" G35f4@stx))) G3612@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3610@t))) (G3086@syntax-dispatch G3610@t '(_ any any)))) G3602@t))) (G3086@syntax-dispatch G3602@t '(_ (any . #(each+ any () any)) any . each-any)))) G35f6@t))) (G3086@syntax-dispatch G35f6@t '(_ (any . each-any) any . each-any)))) G35f4@stx))) (set! G304c@trace-define-syntax-macro (lambda (G3618@stx) ((lambda (G361a@t) ((lambda (G361c@ls/false) (if G361c@ls/false (apply (lambda (G361e@who G361f@expr) (if (G2e43@id? G361e@who) (G303c@bless (list 'define-syntax G361e@who (list 'make-traced-macro (list 'quote G361e@who) G361f@expr))) (G3179@syntax-violation '#f '"invalid name" G3618@stx))) G361c@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G361a@t))) (G3086@syntax-dispatch G361a@t '(_ any any)))) G3618@stx))) (set! G304e@trace-let/rec-syntax (lambda (G3622@who) (lambda (G3624@stx) ((lambda (G3626@t) ((lambda (G3628@ls/false) (if G3628@ls/false (apply (lambda (G362a@lhs* G362b@rhs* G362c@b G362d@b*) (if (G2e4d@valid-bound-ids? G362a@lhs*) ((lambda (G3632@rhs*) (G303c@bless (cons G3622@who (cons (map list G362a@lhs* G3632@rhs*) (cons G362c@b G362d@b*))))) (map (lambda (G3634@lhs G3635@rhs) (list 'make-traced-macro (list 'quote G3634@lhs) G3635@rhs)) G362a@lhs* G362b@rhs*)) (G3040@invalid-fmls-error G3624@stx G362a@lhs*))) G3628@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3626@t))) (G3086@syntax-dispatch G3626@t '(_ #(each (any any)) any . each-any)))) G3624@stx)))) (set! G3050@trace-let-syntax-macro (G304e@trace-let/rec-syntax 'let-syntax)) (set! G3052@trace-letrec-syntax-macro (G304e@trace-let/rec-syntax 'letrec-syntax)) (set! G3054@guard-macro (lambda (G3638@x) ((lambda (G363b@gen-clauses) (begin (set! G363b@gen-clauses (lambda (G3652@con G3653@outerk G3654@clause*) ((lambda (G3659@f G365b@f*) (begin (set! G3659@f (lambda (G368c@x G368d@k) ((lambda (G3690@t) ((lambda (G3692@ls/false) (if G3692@ls/false (apply (lambda (G3694@e G3695@p) ((lambda (G3698@t) (list 'let (list (list G3698@t G3694@e)) (list 'if G3698@t (list G3695@p G3698@t) G368d@k))) (gensym))) G3692@ls/false) ((lambda (G369a@t) ((lambda (G369c@ls/false) (if G369c@ls/false (apply (lambda (G369e@e) ((lambda (G36a0@t) (list 'let (list (list G36a0@t G369e@e)) (list 'if G36a0@t G36a0@t G368d@k))) (gensym))) G369c@ls/false) ((lambda (G36a2@t) ((lambda (G36a4@ls/false) (if G36a4@ls/false (apply (lambda (G36a6@e G36a7@v G36a8@v*) (list 'if G36a6@e (cons 'begin (cons G36a7@v G36a8@v*)) G368d@k)) G36a4@ls/false) ((lambda (G36ac@t) ((lambda (G36ae@ls/false) (if G36ae@ls/false (apply (lambda () (G3179@syntax-violation '#f '"invalid guard clause" G368c@x)) G36ae@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G36ac@t))) (G3086@syntax-dispatch G36ac@t '_))) G36a2@t))) (G3086@syntax-dispatch G36a2@t '(any any . each-any)))) G369a@t))) (G3086@syntax-dispatch G369a@t '(any)))) G3690@t))) (G3086@syntax-dispatch G3690@t '(any #(scheme-id =>) any)))) G368c@x))) (set! G365b@f* (lambda (G3666@x*) ((lambda (G3668@t) ((lambda (G366a@ls/false) (if G366a@ls/false (apply (lambda () (values (list 'raise G3652@con) '#t)) G366a@ls/false) ((lambda (G366c@t) ((lambda (G366e@ls/false) (if G366e@ls/false (apply (lambda (G3670@e G3671@e*) (values (cons 'begin (cons G3670@e G3671@e*)) '#f)) G366e@ls/false) ((lambda (G3674@t) ((lambda (G3676@ls/false) (if G3676@ls/false (apply (lambda (G3678@cls G3679@cls*) (call-with-values (lambda () (G365b@f* G3679@cls*)) (lambda (G367e@G367c G367f@G367d) ((lambda (G3682@g G3683@e) (values (G3659@f G3678@cls G3683@e) G3682@g)) G367f@G367d G367e@G367c)))) G3676@ls/false) ((lambda (G3686@t) ((lambda (G3688@ls/false) (if G3688@ls/false (apply (lambda (G368a@others) (G3179@syntax-violation '#f '"invalid guard clause" G368a@others)) G3688@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3686@t))) (G3086@syntax-dispatch G3686@t 'any))) G3674@t))) (G3086@syntax-dispatch G3674@t '(any . any)))) G366c@t))) (G3086@syntax-dispatch G366c@t '((#(scheme-id else) any . each-any))))) G3668@t))) (G3086@syntax-dispatch G3668@t '()))) G3666@x*))) (call-with-values (lambda () (G365b@f* G3654@clause*)) (lambda (G365e@G365c G365f@G365d) ((lambda (G3662@raisek G3663@code) (if G3662@raisek (list G3653@outerk G3663@code) G3663@code)) G365f@G365d G365e@G365c))))) '#f '#f))) ((lambda (G363c@t) ((lambda (G363e@ls/false) (if (if G363e@ls/false (begin '#f (apply (lambda (G3640@con G3641@clause* G3642@b G3643@b*) (G2e43@id? G3640@con)) G363e@ls/false)) '#f) (apply (lambda (G3648@con G3649@clause* G364a@b G364b@b*) ((lambda (G3650@outerk) (G303c@bless (list 'call/cc (list 'lambda (list G3650@outerk) (list 'with-exception-handler (list 'lambda (list G3648@con) (G363b@gen-clauses G3648@con G3650@outerk G3649@clause*)) (cons 'lambda (cons '() (cons '#f (cons G364a@b G364b@b*))))))))) (gensym))) G363e@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G363c@t))) (G3086@syntax-dispatch G363c@t '(_ (any . each-any) any . each-any)))) G3638@x))) '#f))) (set! G3056@define-enumeration-macro (lambda (G36b0@stx) ((lambda (G36b3@set? G36b5@remove-dups) (begin (set! G36b3@set? (lambda (G36cc@x) ((lambda (G36ce@t) (if G36ce@t G36ce@t (begin '#f (if (not (memq (car G36cc@x) (cdr G36cc@x))) (begin '#f (G36b3@set? (cdr G36cc@x))) '#f)))) (null? G36cc@x)))) (set! G36b5@remove-dups (lambda (G36ca@ls) (if (null? G36ca@ls) '() (cons (car G36ca@ls) (G36b5@remove-dups (remq (car G36ca@ls) (cdr G36ca@ls))))))) ((lambda (G36b6@t) ((lambda (G36b8@ls/false) (if (if G36b8@ls/false (begin '#f (apply (lambda (G36ba@name G36bb@id* G36bc@maker) (if (G2e43@id? G36ba@name) (if (G2e43@id? G36bc@maker) (begin '#f (for-all G2e43@id? G36bb@id*)) '#f) '#f)) G36b8@ls/false)) '#f) (apply (lambda (G36c0@name G36c1@id* G36c2@maker) ((lambda (G36c6@name* G36c7@mk) (G303c@bless (list 'begin (list 'define G36c7@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G36c6@name*)))) (list 'define-syntax G36c0@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G36c6@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G36c0@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G36c2@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G36c2@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G36c6@name*)) (cons 'syntax-violation (cons (list 'quote G36c2@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G36c7@mk '('(n* ...)))))))))))) (G36b5@remove-dups (G317f@syntax->datum G36c1@id*)) (gensym))) G36b8@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G36b6@t))) (G3086@syntax-dispatch G36b6@t '(_ any each-any any)))) G36b0@stx))) '#f '#f))) (set! G3058@time-macro (lambda (G36d0@stx) ((lambda (G36d2@t) ((lambda (G36d4@ls/false) (if G36d4@ls/false (apply (lambda (G36d6@expr) ((lambda (G36d8@str) (G303c@bless (list 'time-it G36d8@str (list 'lambda '() G36d6@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G36dc@G36da G36dd@G36db) ((lambda (G36e0@e G36e1@p) (begin (write (G317f@syntax->datum G36d6@expr) G36e1@p) (G36e0@e))) G36dd@G36db G36dc@G36da))))) G36d4@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G36d2@t))) (G3086@syntax-dispatch G36d2@t '(_ any)))) G36d0@stx))) (set! G305a@delay-macro (lambda (G36e4@stx) ((lambda (G36e6@t) ((lambda (G36e8@ls/false) (if G36e8@ls/false (apply (lambda (G36ea@expr) (G303c@bless (list 'make-promise (list 'lambda '() G36ea@expr)))) G36e8@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G36e6@t))) (G3086@syntax-dispatch G36e6@t '(_ any)))) G36e4@stx))) (set! G305c@assert-macro (lambda (G36ec@stx) ((lambda (G36ee@t) ((lambda (G36f0@ls/false) (if G36f0@ls/false (apply (lambda (G36f2@expr) ((lambda (G36f4@pos) (G303c@bless (list 'unless G36f2@expr (list 'assertion-error (list 'quote G36f2@expr) (list 'quote G36f4@pos))))) ((lambda (G36f6@t) (if G36f6@t G36f6@t (begin '#f (G316f@expression-position G36f2@expr)))) (G316f@expression-position G36ec@stx)))) G36f0@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G36ee@t))) (G3086@syntax-dispatch G36ee@t '(_ any)))) G36ec@stx))) (set! G305e@endianness-macro (lambda (G36f8@stx) ((lambda (G36fa@t) ((lambda (G36fc@ls/false) (if G36fc@ls/false (apply (lambda (G36fe@e) ((lambda (G3700@t) (if (memv G3700@t '(little)) (G303c@bless ''little) (if (memv G3700@t '(big)) (G303c@bless ''big) (G3179@syntax-violation '#f '"endianness must be big or little" G36f8@stx)))) (G317f@syntax->datum G36fe@e))) G36fc@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G36fa@t))) (G3086@syntax-dispatch G36fa@t '(_ any)))) G36f8@stx))) (set! G3060@identifier-syntax-macro (lambda (G3702@stx) ((lambda (G3704@t) ((lambda (G3706@ls/false) (if G3706@ls/false (apply (lambda (G3708@expr) (G303c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G3708@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G3708@expr) '((syntax (e* ...)))))))))) G3706@ls/false) ((lambda (G370a@t) ((lambda (G370c@ls/false) (if (if G370c@ls/false (begin '#f (apply (lambda (G370e@id1 G370f@expr1 G3710@id2 G3711@expr2 G3712@expr3) (if (G2e43@id? G370e@id1) (if (G2e43@id? G3710@id2) (begin '#f (G2e43@id? G3711@expr2)) '#f) '#f)) G370c@ls/false)) '#f) (apply (lambda (G3718@id1 G3719@expr1 G371a@id2 G371b@expr2 G371c@expr3) (G303c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G3719@expr1)) (list (list 'set! 'id G371b@expr2) (list 'syntax G371c@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G3719@expr1 '(e* ...))))))))) G370c@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G370a@t))) (G3086@syntax-dispatch G370a@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G3704@t))) (G3086@syntax-dispatch G3704@t '(_ any)))) G3702@stx))) (set! G3062@do-macro (lambda (G3722@stx) ((lambda (G3725@bind) (begin (set! G3725@bind (lambda (G373c@x) ((lambda (G373e@t) ((lambda (G3740@ls/false) (if G3740@ls/false (apply (lambda (G3742@x G3743@init) (list G3742@x G3743@init G3742@x)) G3740@ls/false) ((lambda (G3746@t) ((lambda (G3748@ls/false) (if G3748@ls/false (apply (lambda (G374a@x G374b@init G374c@step) (list G374a@x G374b@init G374c@step)) G3748@ls/false) ((lambda (G3750@t) ((lambda (G3752@ls/false) (if G3752@ls/false (apply (lambda () (G3179@syntax-violation '#f '"invalid binding" G3722@stx)) G3752@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3750@t))) (G3086@syntax-dispatch G3750@t '_))) G3746@t))) (G3086@syntax-dispatch G3746@t '(any any any)))) G373e@t))) (G3086@syntax-dispatch G373e@t '(any any)))) G373c@x))) ((lambda (G3726@t) ((lambda (G3728@ls/false) (if G3728@ls/false (apply (lambda (G372a@binding* G372b@test G372c@expr* G372d@command*) ((lambda (G3732@t) ((lambda (G3734@ls/false) (if G3734@ls/false (apply (lambda (G3736@x* G3737@init* G3738@step*) (if (G2e4d@valid-bound-ids? G3736@x*) (G303c@bless (list 'letrec (list (list 'loop (list 'lambda G3736@x* (list 'if G372b@test (cons 'begin (cons '(if #f #f) G372c@expr*)) (cons 'begin (append G372d@command* (list (cons 'loop G3738@step*)))))))) (cons 'loop G3737@init*))) (G3179@syntax-violation '#f '"invalid bindings" G3722@stx))) G3734@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3732@t))) (G3086@syntax-dispatch G3732@t '#(each (any any any))))) (map G3725@bind G372a@binding*))) G3728@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3726@t))) (G3086@syntax-dispatch G3726@t '(_ each-any (any . each-any) . each-any)))) G3722@stx))) '#f))) (set! G3064@let*-macro (lambda (G3754@stx) ((lambda (G3756@t) ((lambda (G3758@ls/false) (if (if G3758@ls/false (begin '#f (apply (lambda (G375a@lhs* G375b@rhs* G375c@b G375d@b*) (for-all G2e43@id? G375a@lhs*)) G3758@ls/false)) '#f) (apply (lambda (G3762@lhs* G3763@rhs* G3764@b G3765@b*) (G303c@bless ((letrec ((G376a@f (lambda (G376c@x*) (if (null? G376c@x*) (cons 'let (cons '() (cons G3764@b G3765@b*))) (list 'let (list (car G376c@x*)) (G376a@f (cdr G376c@x*))))))) G376a@f) (map list G3762@lhs* G3763@rhs*)))) G3758@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3756@t))) (G3086@syntax-dispatch G3756@t '(_ #(each (any any)) any . each-any)))) G3754@stx))) (set! G3066@or-macro (lambda (G376e@stx) ((lambda (G3770@t) ((lambda (G3772@ls/false) (if G3772@ls/false (apply (lambda () '#f) G3772@ls/false) ((lambda (G3774@t) ((lambda (G3776@ls/false) (if G3776@ls/false (apply (lambda (G3778@e G3779@e*) (G303c@bless ((letrec ((G377c@f (lambda (G377e@e G377f@e*) (if (null? G377f@e*) (list 'begin '#f G377e@e) (list 'let (list (list 't G377e@e)) (list 'if 't 't (G377c@f (car G377f@e*) (cdr G377f@e*)))))))) G377c@f) G3778@e G3779@e*))) G3776@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3774@t))) (G3086@syntax-dispatch G3774@t '(_ any . each-any)))) G3770@t))) (G3086@syntax-dispatch G3770@t '(_)))) G376e@stx))) (set! G3068@and-macro (lambda (G3782@stx) ((lambda (G3784@t) ((lambda (G3786@ls/false) (if G3786@ls/false (apply (lambda () '#t) G3786@ls/false) ((lambda (G3788@t) ((lambda (G378a@ls/false) (if G378a@ls/false (apply (lambda (G378c@e G378d@e*) (G303c@bless ((letrec ((G3790@f (lambda (G3792@e G3793@e*) (if (null? G3793@e*) (list 'begin '#f G3792@e) (cons 'if (cons G3792@e (cons (G3790@f (car G3793@e*) (cdr G3793@e*)) '(#f)))))))) G3790@f) G378c@e G378d@e*))) G378a@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3788@t))) (G3086@syntax-dispatch G3788@t '(_ any . each-any)))) G3784@t))) (G3086@syntax-dispatch G3784@t '(_)))) G3782@stx))) (set! G306a@cond-macro (lambda (G3796@stx) ((lambda (G3798@t) ((lambda (G379a@ls/false) (if G379a@ls/false (apply (lambda (G379c@cls G379d@cls*) (G303c@bless ((letrec ((G37a0@f (lambda (G37a2@cls G37a3@cls*) (if (null? G37a3@cls*) ((lambda (G37a6@t) ((lambda (G37a8@ls/false) (if G37a8@ls/false (apply (lambda (G37aa@e G37ab@e*) (cons 'begin (cons G37aa@e G37ab@e*))) G37a8@ls/false) ((lambda (G37ae@t) ((lambda (G37b0@ls/false) (if G37b0@ls/false (apply (lambda (G37b2@e G37b3@p) (list 'let (list (list 't G37b2@e)) (list 'if 't (cons G37b3@p '(t))))) G37b0@ls/false) ((lambda (G37b6@t) ((lambda (G37b8@ls/false) (if G37b8@ls/false (apply (lambda (G37ba@e) (cons 'or (cons G37ba@e '((if #f #f))))) G37b8@ls/false) ((lambda (G37bc@t) ((lambda (G37be@ls/false) (if G37be@ls/false (apply (lambda (G37c0@e G37c1@e*) (list 'if G37c0@e (cons 'begin G37c1@e*))) G37be@ls/false) ((lambda (G37c4@t) ((lambda (G37c6@ls/false) (if G37c6@ls/false (apply (lambda () (G3179@syntax-violation '#f '"invalid last clause" G3796@stx)) G37c6@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G37c4@t))) (G3086@syntax-dispatch G37c4@t '_))) G37bc@t))) (G3086@syntax-dispatch G37bc@t '(any . each-any)))) G37b6@t))) (G3086@syntax-dispatch G37b6@t '(any)))) G37ae@t))) (G3086@syntax-dispatch G37ae@t '(any #(scheme-id =>) any)))) G37a6@t))) (G3086@syntax-dispatch G37a6@t '(#(scheme-id else) any . each-any)))) G37a2@cls) ((lambda (G37c8@t) ((lambda (G37ca@ls/false) (if G37ca@ls/false (apply (lambda (G37cc@e G37cd@e*) (G3179@syntax-violation '#f '"incorrect position of keyword else" G3796@stx)) G37ca@ls/false) ((lambda (G37d0@t) ((lambda (G37d2@ls/false) (if G37d2@ls/false (apply (lambda (G37d4@e G37d5@p) (list 'let (list (list 't G37d4@e)) (list 'if 't (cons G37d5@p '(t)) (G37a0@f (car G37a3@cls*) (cdr G37a3@cls*))))) G37d2@ls/false) ((lambda (G37d8@t) ((lambda (G37da@ls/false) (if G37da@ls/false (apply (lambda (G37dc@e) (list 'or G37dc@e (G37a0@f (car G37a3@cls*) (cdr G37a3@cls*)))) G37da@ls/false) ((lambda (G37de@t) ((lambda (G37e0@ls/false) (if G37e0@ls/false (apply (lambda (G37e2@e G37e3@e*) (list 'if G37e2@e (cons 'begin G37e3@e*) (G37a0@f (car G37a3@cls*) (cdr G37a3@cls*)))) G37e0@ls/false) ((lambda (G37e6@t) ((lambda (G37e8@ls/false) (if G37e8@ls/false (apply (lambda () (G3179@syntax-violation '#f '"invalid last clause" G3796@stx)) G37e8@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G37e6@t))) (G3086@syntax-dispatch G37e6@t '_))) G37de@t))) (G3086@syntax-dispatch G37de@t '(any . each-any)))) G37d8@t))) (G3086@syntax-dispatch G37d8@t '(any)))) G37d0@t))) (G3086@syntax-dispatch G37d0@t '(any #(scheme-id =>) any)))) G37c8@t))) (G3086@syntax-dispatch G37c8@t '(#(scheme-id else) any . each-any)))) G37a2@cls))))) G37a0@f) G379c@cls G379d@cls*))) G379a@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3798@t))) (G3086@syntax-dispatch G3798@t '(_ any . each-any)))) G3796@stx))) (set! G306c@do-include (lambda (G37ea@stx G37eb@id G37ec@filename) ((lambda (G37f0@filename) (begin (if (not (if (string? G37f0@filename) (begin '#f (G2e43@id? G37eb@id)) '#f)) (G3179@syntax-violation '#f '"invalid syntax" G37ea@stx) (void)) (cons (G303c@bless 'begin) (with-input-from-file G37f0@filename (lambda () ((letrec ((G37f2@f (lambda (G37f4@ls) ((lambda (G37f6@x) (if (eof-object? G37f6@x) (reverse G37f4@ls) (G37f2@f (cons (G2e21@datum->stx G37eb@id G37f6@x) G37f4@ls)))) (G2988@G2886@read-annotated))))) G37f2@f) '())))))) (G2e59@stx->datum G37ec@filename)))) (set! G306e@include-macro (lambda (G37f8@e) ((lambda (G37fa@t) ((lambda (G37fc@ls/false) (if G37fc@ls/false (apply (lambda (G37fe@id G37ff@filename) (G306c@do-include G37f8@e G37fe@id G37ff@filename)) G37fc@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G37fa@t))) (G3086@syntax-dispatch G37fa@t '(any any)))) G37f8@e))) (set! G3070@include-into-macro (lambda (G3802@e) ((lambda (G3804@t) ((lambda (G3806@ls/false) (if G3806@ls/false (apply (lambda (G3808@id G3809@filename) (G306c@do-include G3802@e G3808@id G3809@filename)) G3806@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3804@t))) (G3086@syntax-dispatch G3804@t '(_ any any)))) G3802@e))) (set! G3072@syntax-rules-macro (lambda (G380c@e) ((lambda (G380e@t) ((lambda (G3810@ls/false) (if G3810@ls/false (apply (lambda (G3812@lits G3813@pat* G3814@tmp*) (begin (G308c@verify-literals G3812@lits G380c@e) (G303c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3812@lits (map (lambda (G3818@pat G3819@tmp) ((lambda (G381c@t) ((lambda (G381e@ls/false) (if G381e@ls/false (apply (lambda (G3820@rest) (list (cons 'g G3820@rest) (list 'syntax G3819@tmp))) G381e@ls/false) ((lambda (G3822@t) ((lambda (G3824@ls/false) (if G3824@ls/false (apply (lambda () (G3179@syntax-violation '#f '"invalid syntax-rules pattern" G380c@e G3818@pat)) G3824@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3822@t))) (G3086@syntax-dispatch G3822@t '_))) G381c@t))) (G3086@syntax-dispatch G381c@t '(_ . any)))) G3818@pat)) G3813@pat* G3814@tmp*)))))))) G3810@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G380e@t))) (G3086@syntax-dispatch G380e@t '(_ each-any . #(each (any any)))))) G380c@e))) (set! G3074@quasiquote-macro ((lambda () ((lambda (G3827@datum G3850@quasicons* G3852@quasicons G3854@quasiappend G3856@quasivector G3858@vquasi G385a@quasi) (begin (set! G3827@datum (lambda (G3935@x) (list (G3014@scheme-stx 'quote) (G2e2b@mkstx G3935@x '() '() '())))) (set! G3850@quasicons* (lambda (G392d@x G392e@y) ((letrec ((G3931@f (lambda (G3933@x) (if (null? G3933@x) G392e@y (G3852@quasicons (car G3933@x) (G3931@f (cdr G3933@x))))))) G3931@f) G392d@x))) (set! G3852@quasicons (lambda (G3907@x G3908@y) ((lambda (G390b@t) ((lambda (G390d@ls/false) (if G390d@ls/false (apply (lambda (G390f@dy) ((lambda (G3911@t) ((lambda (G3913@ls/false) (if G3913@ls/false (apply (lambda (G3915@dx) (list (G3014@scheme-stx 'quote) (cons G3915@dx G390f@dy))) G3913@ls/false) ((lambda (G3917@t) ((lambda (G3919@ls/false) (if G3919@ls/false (apply (lambda () ((lambda (G391b@t) ((lambda (G391d@ls/false) (if G391d@ls/false (apply (lambda () (list (G3014@scheme-stx 'list) G3907@x)) G391d@ls/false) ((lambda (G391f@t) ((lambda (G3921@ls/false) (if G3921@ls/false (apply (lambda () (list (G3014@scheme-stx 'cons) G3907@x G3908@y)) G3921@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G391f@t))) (G3086@syntax-dispatch G391f@t '_))) G391b@t))) (G3086@syntax-dispatch G391b@t '()))) G390f@dy)) G3919@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3917@t))) (G3086@syntax-dispatch G3917@t '_))) G3911@t))) (G3086@syntax-dispatch G3911@t '(#(scheme-id quote) any)))) G3907@x)) G390d@ls/false) ((lambda (G3923@t) ((lambda (G3925@ls/false) (if G3925@ls/false (apply (lambda (G3927@stuff) (cons* (G3014@scheme-stx 'list) G3907@x G3927@stuff)) G3925@ls/false) ((lambda (G3929@t) ((lambda (G392b@ls/false) (if G392b@ls/false (apply (lambda () (list (G3014@scheme-stx 'cons) G3907@x G3908@y)) G392b@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3929@t))) (G3086@syntax-dispatch G3929@t '_))) G3923@t))) (G3086@syntax-dispatch G3923@t '(#(scheme-id list) . each-any)))) G390b@t))) (G3086@syntax-dispatch G390b@t '(#(scheme-id quote) any)))) G3908@y))) (set! G3854@quasiappend (lambda (G38ed@x G38ee@y) ((lambda (G38f1@ls) (if (null? G38f1@ls) (list (G3014@scheme-stx 'quote) '()) (if (null? (cdr G38f1@ls)) (car G38f1@ls) (cons* (G3014@scheme-stx 'append) G38f1@ls)))) ((letrec ((G38f3@f (lambda (G38f5@x) (if (null? G38f5@x) ((lambda (G38f7@t) ((lambda (G38f9@ls/false) (if G38f9@ls/false (apply (lambda () '()) G38f9@ls/false) ((lambda (G38fb@t) ((lambda (G38fd@ls/false) (if G38fd@ls/false (apply (lambda () (list G38ee@y)) G38fd@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G38fb@t))) (G3086@syntax-dispatch G38fb@t '_))) G38f7@t))) (G3086@syntax-dispatch G38f7@t '(#(scheme-id quote) ())))) G38ee@y) ((lambda (G38ff@t) ((lambda (G3901@ls/false) (if G3901@ls/false (apply (lambda () (G38f3@f (cdr G38f5@x))) G3901@ls/false) ((lambda (G3903@t) ((lambda (G3905@ls/false) (if G3905@ls/false (apply (lambda () (cons (car G38f5@x) (G38f3@f (cdr G38f5@x)))) G3905@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3903@t))) (G3086@syntax-dispatch G3903@t '_))) G38ff@t))) (G3086@syntax-dispatch G38ff@t '(#(scheme-id quote) ())))) (car G38f5@x)))))) G38f3@f) G38ed@x)))) (set! G3856@quasivector (lambda (G38bb@x) ((lambda (G38bd@pat-x) ((lambda (G38bf@t) ((lambda (G38c1@ls/false) (if G38c1@ls/false (apply (lambda (G38c3@x*) (list (G3014@scheme-stx 'quote) (list->vector G38c3@x*))) G38c1@ls/false) ((lambda (G38c5@t) ((lambda (G38c7@ls/false) (if G38c7@ls/false (apply (lambda () ((letrec ((G38c9@f (lambda (G38cb@x G38cc@k) ((lambda (G38cf@t) ((lambda (G38d1@ls/false) (if G38d1@ls/false (apply (lambda (G38d3@x*) (G38cc@k (map (lambda (G38d5@x) (list (G3014@scheme-stx 'quote) G38d5@x)) G38d3@x*))) G38d1@ls/false) ((lambda (G38d7@t) ((lambda (G38d9@ls/false) (if G38d9@ls/false (apply (lambda (G38db@x*) (G38cc@k G38db@x*)) G38d9@ls/false) ((lambda (G38dd@t) ((lambda (G38df@ls/false) (if G38df@ls/false (apply (lambda (G38e1@x G38e2@y) (G38c9@f G38e2@y (lambda (G38e5@ls) (G38cc@k (cons G38e1@x G38e5@ls))))) G38df@ls/false) ((lambda (G38e7@t) ((lambda (G38e9@ls/false) (if G38e9@ls/false (apply (lambda () (list (G3014@scheme-stx 'list->vector) G38bd@pat-x)) G38e9@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G38e7@t))) (G3086@syntax-dispatch G38e7@t '_))) G38dd@t))) (G3086@syntax-dispatch G38dd@t '(#(scheme-id cons) any any)))) G38d7@t))) (G3086@syntax-dispatch G38d7@t '(#(scheme-id list) . each-any)))) G38cf@t))) (G3086@syntax-dispatch G38cf@t '(#(scheme-id quote) each-any)))) G38cb@x)))) G38c9@f) G38bb@x (lambda (G38eb@ls) (cons* (G3014@scheme-stx 'vector) G38eb@ls)))) G38c7@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G38c5@t))) (G3086@syntax-dispatch G38c5@t '_))) G38bf@t))) (G3086@syntax-dispatch G38bf@t '(#(scheme-id quote) each-any)))) G38bd@pat-x)) G38bb@x))) (set! G3858@vquasi (lambda (G3899@p G389a@lev) ((lambda (G389d@t) ((lambda (G389f@ls/false) (if G389f@ls/false (apply (lambda (G38a1@p G38a2@q) ((lambda (G38a5@t) ((lambda (G38a7@ls/false) (if G38a7@ls/false (apply (lambda (G38a9@p) (if (= G389a@lev '0) (G3850@quasicons* G38a9@p (G3858@vquasi G38a2@q G389a@lev)) (G3852@quasicons (G3852@quasicons (G3827@datum 'unquote) (G385a@quasi G38a9@p (- G389a@lev '1))) (G3858@vquasi G38a2@q G389a@lev)))) G38a7@ls/false) ((lambda (G38ab@t) ((lambda (G38ad@ls/false) (if G38ad@ls/false (apply (lambda (G38af@p) (if (= G389a@lev '0) (G3854@quasiappend G38af@p (G3858@vquasi G38a2@q G389a@lev)) (G3852@quasicons (G3852@quasicons (G3827@datum 'unquote-splicing) (G385a@quasi G38af@p (- G389a@lev '1))) (G3858@vquasi G38a2@q G389a@lev)))) G38ad@ls/false) ((lambda (G38b1@t) ((lambda (G38b3@ls/false) (if G38b3@ls/false (apply (lambda (G38b5@p) (G3852@quasicons (G385a@quasi G38b5@p G389a@lev) (G3858@vquasi G38a2@q G389a@lev))) G38b3@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G38b1@t))) (G3086@syntax-dispatch G38b1@t 'any))) G38ab@t))) (G3086@syntax-dispatch G38ab@t '(#(scheme-id unquote-splicing) . each-any)))) G38a5@t))) (G3086@syntax-dispatch G38a5@t '(#(scheme-id unquote) . each-any)))) G38a1@p)) G389f@ls/false) ((lambda (G38b7@t) ((lambda (G38b9@ls/false) (if G38b9@ls/false (apply (lambda () (list (G3014@scheme-stx 'quote) '())) G38b9@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G38b7@t))) (G3086@syntax-dispatch G38b7@t '()))) G389d@t))) (G3086@syntax-dispatch G389d@t '(any . any)))) G3899@p))) (set! G385a@quasi (lambda (G3863@p G3864@lev) ((lambda (G3867@t) ((lambda (G3869@ls/false) (if G3869@ls/false (apply (lambda (G386b@p) (if (= G3864@lev '0) G386b@p (G3852@quasicons (G3827@datum 'unquote) (G385a@quasi (list G386b@p) (- G3864@lev '1))))) G3869@ls/false) ((lambda (G386d@t) ((lambda (G386f@ls/false) (if G386f@ls/false (apply (lambda (G3871@p G3872@q) (if (= G3864@lev '0) (G3850@quasicons* G3871@p (G385a@quasi G3872@q G3864@lev)) (G3852@quasicons (G3852@quasicons (G3827@datum 'unquote) (G385a@quasi G3871@p (- G3864@lev '1))) (G385a@quasi G3872@q G3864@lev)))) G386f@ls/false) ((lambda (G3875@t) ((lambda (G3877@ls/false) (if G3877@ls/false (apply (lambda (G3879@p G387a@q) (if (= G3864@lev '0) (G3854@quasiappend G3879@p (G385a@quasi G387a@q G3864@lev)) (G3852@quasicons (G3852@quasicons (G3827@datum 'unquote-splicing) (G385a@quasi G3879@p (- G3864@lev '1))) (G385a@quasi G387a@q G3864@lev)))) G3877@ls/false) ((lambda (G387d@t) ((lambda (G387f@ls/false) (if G387f@ls/false (apply (lambda (G3881@p) (G3852@quasicons (G3827@datum 'quasiquote) (G385a@quasi (list G3881@p) (+ G3864@lev '1)))) G387f@ls/false) ((lambda (G3883@t) ((lambda (G3885@ls/false) (if G3885@ls/false (apply (lambda (G3887@p G3888@q) (G3852@quasicons (G385a@quasi G3887@p G3864@lev) (G385a@quasi G3888@q G3864@lev))) G3885@ls/false) ((lambda (G388b@t) ((lambda (G388d@ls/false) (if (if G388d@ls/false (begin '#f (apply (lambda (G388f@x) (not (G2e0b@stx? G388f@x))) G388d@ls/false)) '#f) (apply (lambda (G3891@x) (G3856@quasivector (G3858@vquasi G3891@x G3864@lev))) G388d@ls/false) ((lambda (G3893@t) ((lambda (G3895@ls/false) (if G3895@ls/false (apply (lambda (G3897@p) (list (G3014@scheme-stx 'quote) G3897@p)) G3895@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3893@t))) (G3086@syntax-dispatch G3893@t 'any))) G388b@t))) (G3086@syntax-dispatch G388b@t '#(vector each-any)))) G3883@t))) (G3086@syntax-dispatch G3883@t '(any . any)))) G387d@t))) (G3086@syntax-dispatch G387d@t '(#(scheme-id quasiquote) any)))) G3875@t))) (G3086@syntax-dispatch G3875@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G386d@t))) (G3086@syntax-dispatch G386d@t '((#(scheme-id unquote) . each-any) . any)))) G3867@t))) (G3086@syntax-dispatch G3867@t '(#(scheme-id unquote) any)))) G3863@p))) (lambda (G385b@x) ((lambda (G385d@t) ((lambda (G385f@ls/false) (if G385f@ls/false (apply (lambda (G3861@e) (G385a@quasi G3861@e '0)) G385f@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G385d@t))) (G3086@syntax-dispatch G385d@t '(_ any)))) G385b@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G3076@quasisyntax-macro ((lambda () ((lambda (G3938@quasi) (begin (set! G3938@quasi (lambda (G3950@p G3951@lev) ((lambda (G3954@t) ((lambda (G3956@ls/false) (if G3956@ls/false (apply (lambda (G3958@p) (if (= G3951@lev '0) ((lambda (G395a@g) (values (list G395a@g) (list G3958@p) G395a@g)) (gensym)) (call-with-values (lambda () (G3938@quasi G3958@p (- G3951@lev '1))) (lambda (G395f@G395c G3960@G395d G3961@G395e) ((lambda (G3965@p G3966@rhs* G3967@lhs*) (values G3967@lhs* G3966@rhs* (list 'unsyntax G3965@p))) G3961@G395e G3960@G395d G395f@G395c))))) G3956@ls/false) ((lambda (G396b@t) ((lambda (G396d@ls/false) (if (if G396d@ls/false (begin '#f (apply (lambda () (= G3951@lev '0)) G396d@ls/false)) '#f) (apply (lambda () (G3179@syntax-violation '#f '"incorrect use of unsyntax" G3950@p)) G396d@ls/false) ((lambda (G396f@t) ((lambda (G3971@ls/false) (if G3971@ls/false (apply (lambda (G3973@p* G3974@q) (call-with-values (lambda () (G3938@quasi G3974@q G3951@lev)) (lambda (G397a@G3977 G397b@G3978 G397c@G3979) ((lambda (G3980@q G3981@rhs* G3982@lhs*) (if (= G3951@lev '0) ((lambda (G3986@g*) (values (append G3986@g* G3982@lhs*) (append G3973@p* G3981@rhs*) (append G3986@g* G3980@q))) (map (lambda (G3988@x) (gensym)) G3973@p*)) (call-with-values (lambda () (G3938@quasi G3973@p* (- G3951@lev '1))) (lambda (G398d@G398a G398e@G398b G398f@G398c) ((lambda (G3993@p* G3994@rhs2* G3995@lhs2*) (values (append G3995@lhs2* G3982@lhs*) (append G3994@rhs2* G3981@rhs*) (cons (cons 'unsyntax G3993@p*) G3980@q))) G398f@G398c G398e@G398b G398d@G398a))))) G397c@G3979 G397b@G3978 G397a@G3977)))) G3971@ls/false) ((lambda (G3999@t) ((lambda (G399b@ls/false) (if G399b@ls/false (apply (lambda (G399d@p* G399e@q) (call-with-values (lambda () (G3938@quasi G399e@q G3951@lev)) (lambda (G39a4@G39a1 G39a5@G39a2 G39a6@G39a3) ((lambda (G39aa@q G39ab@rhs* G39ac@lhs*) (if (= G3951@lev '0) ((lambda (G39b0@g*) (values (append (map (lambda (G39b2@g) (cons G39b2@g '(...))) G39b0@g*) G39ac@lhs*) (append G399d@p* G39ab@rhs*) (append (apply append (map (lambda (G39b4@g) (cons G39b4@g '(...))) G39b0@g*)) G39aa@q))) (map (lambda (G39b6@x) (gensym)) G399d@p*)) (call-with-values (lambda () (G3938@quasi G399d@p* (- G3951@lev '1))) (lambda (G39bb@G39b8 G39bc@G39b9 G39bd@G39ba) ((lambda (G39c1@p* G39c2@rhs2* G39c3@lhs2*) (values (append G39c3@lhs2* G39ac@lhs*) (append G39c2@rhs2* G39ab@rhs*) (cons (cons 'unsyntax-splicing G39c1@p*) G39aa@q))) G39bd@G39ba G39bc@G39b9 G39bb@G39b8))))) G39a6@G39a3 G39a5@G39a2 G39a4@G39a1)))) G399b@ls/false) ((lambda (G39c7@t) ((lambda (G39c9@ls/false) (if (if G39c9@ls/false (begin '#f (apply (lambda () (= G3951@lev '0)) G39c9@ls/false)) '#f) (apply (lambda () (G3179@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3950@p)) G39c9@ls/false) ((lambda (G39cb@t) ((lambda (G39cd@ls/false) (if G39cd@ls/false (apply (lambda (G39cf@p) (call-with-values (lambda () (G3938@quasi G39cf@p (+ G3951@lev '1))) (lambda (G39d4@G39d1 G39d5@G39d2 G39d6@G39d3) ((lambda (G39da@p G39db@rhs* G39dc@lhs*) (values G39dc@lhs* G39db@rhs* (list 'quasisyntax G39da@p))) G39d6@G39d3 G39d5@G39d2 G39d4@G39d1)))) G39cd@ls/false) ((lambda (G39e0@t) ((lambda (G39e2@ls/false) (if G39e2@ls/false (apply (lambda (G39e4@p G39e5@q) (call-with-values (lambda () (G3938@quasi G39e4@p G3951@lev)) (lambda (G39ee@G39e8 G39ef@G39e9 G39f0@G39ea) (call-with-values (lambda () (G3938@quasi G39e5@q G3951@lev)) (lambda (G39f4@G39eb G39f5@G39ec G39f6@G39ed) ((lambda (G39fa@q G39fb@rhs2* G39fc@lhs2* G39fd@p G39fe@rhs* G39ff@lhs*) (values (append G39fc@lhs2* G39ff@lhs*) (append G39fb@rhs2* G39fe@rhs*) (cons G39fd@p G39fa@q))) G39f6@G39ed G39f5@G39ec G39f4@G39eb G39f0@G39ea G39ef@G39e9 G39ee@G39e8)))))) G39e2@ls/false) ((lambda (G3a06@t) ((lambda (G3a08@ls/false) (if G3a08@ls/false (apply (lambda (G3a0a@x*) (call-with-values (lambda () (G3938@quasi G3a0a@x* G3951@lev)) (lambda (G3a0f@G3a0c G3a10@G3a0d G3a11@G3a0e) ((lambda (G3a15@x* G3a16@rhs* G3a17@lhs*) (values G3a17@lhs* G3a16@rhs* (list->vector G3a15@x*))) G3a11@G3a0e G3a10@G3a0d G3a0f@G3a0c)))) G3a08@ls/false) ((lambda (G3a1b@t) ((lambda (G3a1d@ls/false) (if G3a1d@ls/false (apply (lambda () (values '() '() G3950@p)) G3a1d@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3a1b@t))) (G3086@syntax-dispatch G3a1b@t '_))) G3a06@t))) (G3086@syntax-dispatch G3a06@t '#(vector each-any)))) G39e0@t))) (G3086@syntax-dispatch G39e0@t '(any . any)))) G39cb@t))) (G3086@syntax-dispatch G39cb@t '(#(scheme-id quasisyntax) any)))) G39c7@t))) (G3086@syntax-dispatch G39c7@t '#(scheme-id unsyntax-splicing)))) G3999@t))) (G3086@syntax-dispatch G3999@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G396f@t))) (G3086@syntax-dispatch G396f@t '((#(scheme-id unsyntax) . each-any) . any)))) G396b@t))) (G3086@syntax-dispatch G396b@t '#(scheme-id unsyntax)))) G3954@t))) (G3086@syntax-dispatch G3954@t '(#(scheme-id unsyntax) any)))) G3950@p))) (lambda (G3939@x) ((lambda (G393b@t) ((lambda (G393d@ls/false) (if G393d@ls/false (apply (lambda (G393f@e) (call-with-values (lambda () (G3938@quasi G393f@e '0)) (lambda (G3944@G3941 G3945@G3942 G3946@G3943) ((lambda (G394a@v G394b@rhs* G394c@lhs*) (G303c@bless (list 'syntax-case (cons 'list G394b@rhs*) '() (list G394c@lhs* (list 'syntax G394a@v))))) G3946@G3943 G3945@G3942 G3944@G3941)))) G393d@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G393b@t))) (G3086@syntax-dispatch G393b@t '(_ any)))) G3939@x)))) '#f)))) (set! G3078@define-struct-macro (lambda (G3a1f@stx) (G3179@syntax-violation '#f '"define-struct not supported" G3a1f@stx))) (set! G307a@define-record-type-macro (lambda (G3a21@x) ((lambda (G3a24@id G3a26@get-record-name G3a28@get-record-constructor-name G3a2a@get-record-predicate-name G3a2c@get-clause G3a2e@foo-rtd-code G3a30@parent-rtd-code G3a32@parent-rcd-code G3a34@foo-rcd-code G3a36@get-protocol-code G3a38@get-fields G3a3a@get-mutator-indices G3a3c@get-mutators G3a3e@get-accessors G3a40@enumerate G3a42@do-define-record G3a44@verify-clauses) (begin (set! G3a24@id (lambda (G3c1b@ctxt . G3c1d@str*) (G317d@datum->syntax G3c1b@ctxt (string->symbol (apply string-append (map (lambda (G3c1f@x) (if (symbol? G3c1f@x) (symbol->string G3c1f@x) (if (string? G3c1f@x) G3c1f@x (assertion-violation 'define-record-type '"BUG")))) G3c1d@str*)))))) (set! G3a26@get-record-name (lambda (G3c09@spec) ((lambda (G3c0b@t) ((lambda (G3c0d@ls/false) (if G3c0d@ls/false (apply (lambda (G3c0f@foo G3c10@make-foo G3c11@foo?) G3c0f@foo) G3c0d@ls/false) ((lambda (G3c15@t) ((lambda (G3c17@ls/false) (if G3c17@ls/false (apply (lambda (G3c19@foo) G3c19@foo) G3c17@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3c15@t))) (G3086@syntax-dispatch G3c15@t 'any))) G3c0b@t))) (G3086@syntax-dispatch G3c0b@t '(any any any)))) G3c09@spec))) (set! G3a28@get-record-constructor-name (lambda (G3bf5@spec) ((lambda (G3bf7@t) ((lambda (G3bf9@ls/false) (if G3bf9@ls/false (apply (lambda (G3bfb@foo G3bfc@make-foo G3bfd@foo?) G3bfc@make-foo) G3bf9@ls/false) ((lambda (G3c01@t) ((lambda (G3c03@ls/false) (if (if G3c03@ls/false (begin '#f (apply (lambda (G3c05@foo) (G2e43@id? G3c05@foo)) G3c03@ls/false)) '#f) (apply (lambda (G3c07@foo) (G3a24@id G3c07@foo '"make-" (G2e59@stx->datum G3c07@foo))) G3c03@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3c01@t))) (G3086@syntax-dispatch G3c01@t 'any))) G3bf7@t))) (G3086@syntax-dispatch G3bf7@t '(any any any)))) G3bf5@spec))) (set! G3a2a@get-record-predicate-name (lambda (G3be1@spec) ((lambda (G3be3@t) ((lambda (G3be5@ls/false) (if G3be5@ls/false (apply (lambda (G3be7@foo G3be8@make-foo G3be9@foo?) G3be9@foo?) G3be5@ls/false) ((lambda (G3bed@t) ((lambda (G3bef@ls/false) (if (if G3bef@ls/false (begin '#f (apply (lambda (G3bf1@foo) (G2e43@id? G3bf1@foo)) G3bef@ls/false)) '#f) (apply (lambda (G3bf3@foo) (G3a24@id G3bf3@foo (G2e59@stx->datum G3bf3@foo) '"?")) G3bef@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3bed@t))) (G3086@syntax-dispatch G3bed@t 'any))) G3be3@t))) (G3086@syntax-dispatch G3be3@t '(any any any)))) G3be1@spec))) (set! G3a2c@get-clause (lambda (G3bcf@id G3bd0@ls) ((lambda (G3bd3@t) ((lambda (G3bd5@ls/false) (if G3bd5@ls/false (apply (lambda () '#f) G3bd5@ls/false) ((lambda (G3bd7@t) ((lambda (G3bd9@ls/false) (if G3bd9@ls/false (apply (lambda (G3bdb@x G3bdc@rest G3bdd@ls) (if (G2e4b@free-id=? (G303c@bless G3bcf@id) G3bdb@x) (cons G3bdb@x G3bdc@rest) (G3a2c@get-clause G3bcf@id G3bdd@ls))) G3bd9@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3bd7@t))) (G3086@syntax-dispatch G3bd7@t '((any . any) . any)))) G3bd3@t))) (G3086@syntax-dispatch G3bd3@t '()))) G3bd0@ls))) (set! G3a2e@foo-rtd-code (lambda (G3b7d@name G3b7e@clause* G3b7f@parent-rtd-code) ((lambda (G3b84@convert-field-spec*) (begin (set! G3b84@convert-field-spec* (lambda (G3bb5@ls) (list->vector (map (lambda (G3bb7@x) ((lambda (G3bb9@t) ((lambda (G3bbb@ls/false) (if G3bbb@ls/false (apply (lambda (G3bbd@name G3bbe@rest) (list 'mutable G3bbd@name)) G3bbb@ls/false) ((lambda (G3bc1@t) ((lambda (G3bc3@ls/false) (if G3bc3@ls/false (apply (lambda (G3bc5@name G3bc6@rest) (list 'immutable G3bc5@name)) G3bc3@ls/false) ((lambda (G3bc9@t) ((lambda (G3bcb@ls/false) (if G3bcb@ls/false (apply (lambda (G3bcd@name) (list 'immutable G3bcd@name)) G3bcb@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3bc9@t))) (G3086@syntax-dispatch G3bc9@t 'any))) G3bc1@t))) (G3086@syntax-dispatch G3bc1@t '(#(scheme-id immutable) any . any)))) G3bb9@t))) (G3086@syntax-dispatch G3bb9@t '(#(scheme-id mutable) any . any)))) G3bb7@x)) G3bb5@ls)))) ((lambda (G3b85@uid-code G3b86@sealed? G3b87@opaque? G3b88@fields) (G303c@bless (list 'make-record-type-descriptor (list 'quote G3b7d@name) G3b7f@parent-rtd-code G3b85@uid-code G3b86@sealed? G3b87@opaque? G3b88@fields))) ((lambda (G3b8d@t) ((lambda (G3b8f@ls/false) (if G3b8f@ls/false (apply (lambda () (list 'quote (gensym))) G3b8f@ls/false) ((lambda (G3b91@t) ((lambda (G3b93@ls/false) (if G3b93@ls/false (apply (lambda (G3b95@uid) (list 'quote G3b95@uid)) G3b93@ls/false) ((lambda (G3b97@t) ((lambda (G3b99@ls/false) (if G3b99@ls/false (apply (lambda () '#f) G3b99@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3b97@t))) (G3086@syntax-dispatch G3b97@t '_))) G3b91@t))) (G3086@syntax-dispatch G3b91@t '(_ any)))) G3b8d@t))) (G3086@syntax-dispatch G3b8d@t '(_)))) (G3a2c@get-clause 'nongenerative G3b7e@clause*)) ((lambda (G3b9b@t) ((lambda (G3b9d@ls/false) (if G3b9d@ls/false (apply (lambda () '#t) G3b9d@ls/false) ((lambda (G3b9f@t) ((lambda (G3ba1@ls/false) (if G3ba1@ls/false (apply (lambda () '#f) G3ba1@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3b9f@t))) (G3086@syntax-dispatch G3b9f@t '_))) G3b9b@t))) (G3086@syntax-dispatch G3b9b@t '(_ #(atom #t))))) (G3a2c@get-clause 'sealed G3b7e@clause*)) ((lambda (G3ba3@t) ((lambda (G3ba5@ls/false) (if G3ba5@ls/false (apply (lambda () '#t) G3ba5@ls/false) ((lambda (G3ba7@t) ((lambda (G3ba9@ls/false) (if G3ba9@ls/false (apply (lambda () '#f) G3ba9@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3ba7@t))) (G3086@syntax-dispatch G3ba7@t '_))) G3ba3@t))) (G3086@syntax-dispatch G3ba3@t '(_ #(atom #t))))) (G3a2c@get-clause 'opaque G3b7e@clause*)) ((lambda (G3bab@t) ((lambda (G3bad@ls/false) (if G3bad@ls/false (apply (lambda (G3baf@field-spec*) (list 'quote (G3b84@convert-field-spec* G3baf@field-spec*))) G3bad@ls/false) ((lambda (G3bb1@t) ((lambda (G3bb3@ls/false) (if G3bb3@ls/false (apply (lambda () ''#()) G3bb3@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3bb1@t))) (G3086@syntax-dispatch G3bb1@t '_))) G3bab@t))) (G3086@syntax-dispatch G3bab@t '(_ . each-any)))) (G3a2c@get-clause 'fields G3b7e@clause*))))) '#f))) (set! G3a30@parent-rtd-code (lambda (G3b65@clause*) ((lambda (G3b67@t) ((lambda (G3b69@ls/false) (if G3b69@ls/false (apply (lambda (G3b6b@name) (list 'record-type-descriptor G3b6b@name)) G3b69@ls/false) ((lambda (G3b6d@t) ((lambda (G3b6f@ls/false) (if G3b6f@ls/false (apply (lambda () ((lambda (G3b71@t) ((lambda (G3b73@ls/false) (if G3b73@ls/false (apply (lambda (G3b75@rtd G3b76@rcd) G3b75@rtd) G3b73@ls/false) ((lambda (G3b79@t) ((lambda (G3b7b@ls/false) (if G3b7b@ls/false (apply (lambda () '#f) G3b7b@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3b79@t))) (G3086@syntax-dispatch G3b79@t '#(atom #f)))) G3b71@t))) (G3086@syntax-dispatch G3b71@t '(_ any any)))) (G3a2c@get-clause 'parent-rtd G3b65@clause*))) G3b6f@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3b6d@t))) (G3086@syntax-dispatch G3b6d@t '#(atom #f)))) G3b67@t))) (G3086@syntax-dispatch G3b67@t '(_ any)))) (G3a2c@get-clause 'parent G3b65@clause*)))) (set! G3a32@parent-rcd-code (lambda (G3b4d@clause*) ((lambda (G3b4f@t) ((lambda (G3b51@ls/false) (if G3b51@ls/false (apply (lambda (G3b53@name) (list 'record-constructor-descriptor G3b53@name)) G3b51@ls/false) ((lambda (G3b55@t) ((lambda (G3b57@ls/false) (if G3b57@ls/false (apply (lambda () ((lambda (G3b59@t) ((lambda (G3b5b@ls/false) (if G3b5b@ls/false (apply (lambda (G3b5d@rtd G3b5e@rcd) G3b5e@rcd) G3b5b@ls/false) ((lambda (G3b61@t) ((lambda (G3b63@ls/false) (if G3b63@ls/false (apply (lambda () '#f) G3b63@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3b61@t))) (G3086@syntax-dispatch G3b61@t '#(atom #f)))) G3b59@t))) (G3086@syntax-dispatch G3b59@t '(_ any any)))) (G3a2c@get-clause 'parent-rtd G3b4d@clause*))) G3b57@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3b55@t))) (G3086@syntax-dispatch G3b55@t '#(atom #f)))) G3b4f@t))) (G3086@syntax-dispatch G3b4f@t '(_ any)))) (G3a2c@get-clause 'parent G3b4d@clause*)))) (set! G3a34@foo-rcd-code (lambda (G3b45@clause* G3b46@foo-rtd G3b47@protocol G3b48@parent-rcd-code) (list 'make-record-constructor-descriptor G3b46@foo-rtd G3b48@parent-rcd-code G3b47@protocol))) (set! G3a36@get-protocol-code (lambda (G3b39@clause*) ((lambda (G3b3b@t) ((lambda (G3b3d@ls/false) (if G3b3d@ls/false (apply (lambda (G3b3f@expr) G3b3f@expr) G3b3d@ls/false) ((lambda (G3b41@t) ((lambda (G3b43@ls/false) (if G3b43@ls/false (apply (lambda () '#f) G3b43@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3b41@t))) (G3086@syntax-dispatch G3b41@t '_))) G3b3b@t))) (G3086@syntax-dispatch G3b3b@t '(_ any)))) (G3a2c@get-clause 'protocol G3b39@clause*)))) (set! G3a38@get-fields (lambda (G3b27@clause*) ((lambda (G3b29@t) ((lambda (G3b2b@ls/false) (if G3b2b@ls/false (apply (lambda () '()) G3b2b@ls/false) ((lambda (G3b2d@t) ((lambda (G3b2f@ls/false) (if G3b2f@ls/false (apply (lambda (G3b31@f*) G3b31@f*) G3b2f@ls/false) ((lambda (G3b33@t) ((lambda (G3b35@ls/false) (if G3b35@ls/false (apply (lambda (G3b37@rest) (G3a38@get-fields G3b37@rest)) G3b35@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3b33@t))) (G3086@syntax-dispatch G3b33@t '(_ . any)))) G3b2d@t))) (G3086@syntax-dispatch G3b2d@t '((#(scheme-id fields) . each-any) . _)))) G3b29@t))) (G3086@syntax-dispatch G3b29@t '()))) G3b27@clause*))) (set! G3a3a@get-mutator-indices (lambda (G3b0f@fields) ((letrec ((G3b11@f (lambda (G3b13@fields G3b14@i) ((lambda (G3b17@t) ((lambda (G3b19@ls/false) (if G3b19@ls/false (apply (lambda () '()) G3b19@ls/false) ((lambda (G3b1b@t) ((lambda (G3b1d@ls/false) (if G3b1d@ls/false (apply (lambda (G3b1f@rest) (cons G3b14@i (G3b11@f G3b1f@rest (+ G3b14@i '1)))) G3b1d@ls/false) ((lambda (G3b21@t) ((lambda (G3b23@ls/false) (if G3b23@ls/false (apply (lambda (G3b25@rest) (G3b11@f G3b25@rest (+ G3b14@i '1))) G3b23@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3b21@t))) (G3086@syntax-dispatch G3b21@t '(_ . any)))) G3b1b@t))) (G3086@syntax-dispatch G3b1b@t '((#(scheme-id mutable) . _) . any)))) G3b17@t))) (G3086@syntax-dispatch G3b17@t '()))) G3b13@fields)))) G3b11@f) G3b0f@fields '0))) (set! G3a3c@get-mutators (lambda (G3ae5@foo G3ae6@fields) ((lambda (G3aea@gen-name) (begin (set! G3aea@gen-name (lambda (G3b0d@x) (G317d@datum->syntax G3ae5@foo (string->symbol (string-append (symbol->string (G317f@syntax->datum G3ae5@foo)) '"-" (symbol->string (G317f@syntax->datum G3b0d@x)) '"-set!"))))) ((letrec ((G3aeb@f (lambda (G3aed@fields) ((lambda (G3aef@t) ((lambda (G3af1@ls/false) (if G3af1@ls/false (apply (lambda () '()) G3af1@ls/false) ((lambda (G3af3@t) ((lambda (G3af5@ls/false) (if G3af5@ls/false (apply (lambda (G3af7@name G3af8@accessor G3af9@mutator G3afa@rest) (cons G3af9@mutator (G3aeb@f G3afa@rest))) G3af5@ls/false) ((lambda (G3aff@t) ((lambda (G3b01@ls/false) (if G3b01@ls/false (apply (lambda (G3b03@name G3b04@rest) (cons (G3aea@gen-name G3b03@name) (G3aeb@f G3b04@rest))) G3b01@ls/false) ((lambda (G3b07@t) ((lambda (G3b09@ls/false) (if G3b09@ls/false (apply (lambda (G3b0b@rest) (G3aeb@f G3b0b@rest)) G3b09@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3b07@t))) (G3086@syntax-dispatch G3b07@t '(_ . any)))) G3aff@t))) (G3086@syntax-dispatch G3aff@t '((#(scheme-id mutable) any) . any)))) G3af3@t))) (G3086@syntax-dispatch G3af3@t '((#(scheme-id mutable) any any any) . any)))) G3aef@t))) (G3086@syntax-dispatch G3aef@t '()))) G3aed@fields)))) G3aeb@f) G3ae6@fields))) '#f))) (set! G3a3e@get-accessors (lambda (G3aa1@foo G3aa2@fields) ((lambda (G3aa6@gen-name) (begin (set! G3aa6@gen-name (lambda (G3ae3@x) (G317d@datum->syntax G3aa1@foo (string->symbol (string-append (symbol->string (G317f@syntax->datum G3aa1@foo)) '"-" (symbol->string (G317f@syntax->datum G3ae3@x))))))) (map (lambda (G3aa7@field) ((lambda (G3aa9@t) ((lambda (G3aab@ls/false) (if (if G3aab@ls/false (begin '#f (apply (lambda (G3aad@name G3aae@accessor G3aaf@mutator) (G2e43@id? G3aae@accessor)) G3aab@ls/false)) '#f) (apply (lambda (G3ab3@name G3ab4@accessor G3ab5@mutator) G3ab4@accessor) G3aab@ls/false) ((lambda (G3ab9@t) ((lambda (G3abb@ls/false) (if (if G3abb@ls/false (begin '#f (apply (lambda (G3abd@name G3abe@accessor) (G2e43@id? G3abe@accessor)) G3abb@ls/false)) '#f) (apply (lambda (G3ac1@name G3ac2@accessor) G3ac2@accessor) G3abb@ls/false) ((lambda (G3ac5@t) ((lambda (G3ac7@ls/false) (if (if G3ac7@ls/false (begin '#f (apply (lambda (G3ac9@name) (G2e43@id? G3ac9@name)) G3ac7@ls/false)) '#f) (apply (lambda (G3acb@name) (G3aa6@gen-name G3acb@name)) G3ac7@ls/false) ((lambda (G3acd@t) ((lambda (G3acf@ls/false) (if (if G3acf@ls/false (begin '#f (apply (lambda (G3ad1@name) (G2e43@id? G3ad1@name)) G3acf@ls/false)) '#f) (apply (lambda (G3ad3@name) (G3aa6@gen-name G3ad3@name)) G3acf@ls/false) ((lambda (G3ad5@t) ((lambda (G3ad7@ls/false) (if (if G3ad7@ls/false (begin '#f (apply (lambda (G3ad9@name) (G2e43@id? G3ad9@name)) G3ad7@ls/false)) '#f) (apply (lambda (G3adb@name) (G3aa6@gen-name G3adb@name)) G3ad7@ls/false) ((lambda (G3add@t) ((lambda (G3adf@ls/false) (if G3adf@ls/false (apply (lambda (G3ae1@others) (G3179@syntax-violation '#f '"invalid field spec" G3aa7@field)) G3adf@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3add@t))) (G3086@syntax-dispatch G3add@t 'any))) G3ad5@t))) (G3086@syntax-dispatch G3ad5@t 'any))) G3acd@t))) (G3086@syntax-dispatch G3acd@t '(#(scheme-id immutable) any)))) G3ac5@t))) (G3086@syntax-dispatch G3ac5@t '(#(scheme-id mutable) any)))) G3ab9@t))) (G3086@syntax-dispatch G3ab9@t '(#(scheme-id immutable) any any)))) G3aa9@t))) (G3086@syntax-dispatch G3aa9@t '(#(scheme-id mutable) any any any)))) G3aa7@field)) G3aa2@fields))) '#f))) (set! G3a40@enumerate (lambda (G3a99@ls) ((letrec ((G3a9b@f (lambda (G3a9d@ls G3a9e@i) (if (null? G3a9d@ls) '() (cons G3a9e@i (G3a9b@f (cdr G3a9d@ls) (+ G3a9e@i '1))))))) G3a9b@f) G3a99@ls '0))) (set! G3a42@do-define-record (lambda (G3a71@namespec G3a72@clause*) ((lambda (G3a75@foo) ((lambda (G3a77@foo-rtd) ((lambda (G3a79@foo-rcd) ((lambda (G3a7b@protocol) ((lambda (G3a7d@make-foo) ((lambda (G3a7f@fields) ((lambda (G3a81@idx*) ((lambda (G3a83@foo-x*) ((lambda (G3a85@set-foo-x!*) ((lambda (G3a87@set-foo-idx*) ((lambda (G3a89@foo?) ((lambda (G3a8b@foo-rtd-code) ((lambda (G3a8d@foo-rcd-code) ((lambda (G3a8f@protocol-code) ((lambda () (G303c@bless (cons 'begin (cons (list 'define G3a77@foo-rtd G3a8b@foo-rtd-code) (cons (list 'define G3a7b@protocol G3a8f@protocol-code) (cons (list 'define G3a79@foo-rcd G3a8d@foo-rcd-code) (cons (list 'define-syntax G3a75@foo (list 'list ''$rtd (list 'syntax G3a77@foo-rtd) (list 'syntax G3a79@foo-rcd))) (cons (list 'define G3a89@foo? (list 'record-predicate G3a77@foo-rtd)) (cons (list 'define G3a7d@make-foo (list 'record-constructor G3a79@foo-rcd)) (append (map (lambda (G3a91@foo-x G3a92@idx) (list 'define G3a91@foo-x (list 'record-accessor G3a77@foo-rtd G3a92@idx))) G3a83@foo-x* G3a81@idx*) (map (lambda (G3a95@set-foo-x! G3a96@idx) (list 'define G3a95@set-foo-x! (list 'record-mutator G3a77@foo-rtd G3a96@idx))) G3a85@set-foo-x!* G3a87@set-foo-idx*))))))))))))) (G3a36@get-protocol-code G3a72@clause*))) (G3a34@foo-rcd-code G3a72@clause* G3a77@foo-rtd G3a7b@protocol (G3a32@parent-rcd-code G3a72@clause*)))) (G3a2e@foo-rtd-code G3a75@foo G3a72@clause* (G3a30@parent-rtd-code G3a72@clause*)))) (G3a2a@get-record-predicate-name G3a71@namespec))) (G3a3a@get-mutator-indices G3a7f@fields))) (G3a3c@get-mutators G3a75@foo G3a7f@fields))) (G3a3e@get-accessors G3a75@foo G3a7f@fields))) (G3a40@enumerate G3a7f@fields))) (G3a38@get-fields G3a72@clause*))) (G3a28@get-record-constructor-name G3a71@namespec))) (gensym))) (gensym))) (gensym))) (G3a26@get-record-name G3a71@namespec)))) (set! G3a44@verify-clauses (lambda (G3a4d@x G3a4e@cls*) ((lambda (G3a52@valid-kwds G3a54@free-id-member?) (begin (set! G3a52@valid-kwds (map G303c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3a54@free-id-member? (lambda (G3a6b@x G3a6c@ls) (if (pair? G3a6c@ls) (begin '#f ((lambda (G3a6f@t) (if G3a6f@t G3a6f@t (begin '#f (G3a54@free-id-member? G3a6b@x (cdr G3a6c@ls))))) (G2e4b@free-id=? G3a6b@x (car G3a6c@ls)))) '#f))) ((letrec ((G3a55@f (lambda (G3a57@cls* G3a58@seen*) (if (not (null? G3a57@cls*)) ((lambda (G3a5b@t) ((lambda (G3a5d@ls/false) (if G3a5d@ls/false (apply (lambda (G3a5f@kwd G3a60@rest) (if ((lambda (G3a63@t) (if G3a63@t G3a63@t (begin '#f (not (G3a54@free-id-member? G3a5f@kwd G3a52@valid-kwds))))) (not (G2e43@id? G3a5f@kwd))) (G3179@syntax-violation '#f '"not a valid define-record-type keyword" G3a5f@kwd) (if (G2e51@bound-id-member? G3a5f@kwd G3a58@seen*) (G3179@syntax-violation '#f '"duplicate use of keyword " G3a4d@x G3a5f@kwd) (G3a55@f (cdr G3a57@cls*) (cons G3a5f@kwd G3a58@seen*))))) G3a5d@ls/false) ((lambda (G3a65@t) ((lambda (G3a67@ls/false) (if G3a67@ls/false (apply (lambda (G3a69@cls) (G3179@syntax-violation '#f '"malformed define-record-type clause" G3a69@cls)) G3a67@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3a65@t))) (G3086@syntax-dispatch G3a65@t 'any))) G3a5b@t))) (G3086@syntax-dispatch G3a5b@t '(any . any)))) (car G3a57@cls*)) (void))))) G3a55@f) G3a4e@cls* '()))) '#f '#f))) ((lambda (G3a45@t) ((lambda (G3a47@ls/false) (if G3a47@ls/false (apply (lambda (G3a49@namespec G3a4a@clause*) (begin (G3a44@verify-clauses G3a21@x G3a4a@clause*) (G3a42@do-define-record G3a49@namespec G3a4a@clause*))) G3a47@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3a45@t))) (G3086@syntax-dispatch G3a45@t '(_ any . each-any)))) G3a21@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G307c@define-condition-type-macro (lambda (G3c21@x) ((lambda (G3c24@mkname) (begin (set! G3c24@mkname (lambda (G3c51@name G3c52@suffix) (G317d@datum->syntax G3c51@name (string->symbol (string-append (symbol->string (G317f@syntax->datum G3c51@name)) G3c52@suffix))))) ((lambda (G3c25@t) ((lambda (G3c27@ls/false) (if (if G3c27@ls/false (begin '#f (apply (lambda (G3c29@ctxt G3c2a@name G3c2b@super G3c2c@constructor G3c2d@predicate G3c2e@field* G3c2f@accessor*) (if (G2e43@id? G3c2a@name) (if (G2e43@id? G3c2b@super) (if (G2e43@id? G3c2c@constructor) (if (G2e43@id? G3c2d@predicate) (if (for-all G2e43@id? G3c2e@field*) (begin '#f (for-all G2e43@id? G3c2f@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3c27@ls/false)) '#f) (apply (lambda (G3c37@ctxt G3c38@name G3c39@super G3c3a@constructor G3c3b@predicate G3c3c@field* G3c3d@accessor*) ((lambda (G3c45@aux-accessor*) (G303c@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3c38@name G3c3a@constructor (gensym)) (cons (list 'parent G3c39@super) (cons (cons 'fields (map (lambda (G3c47@field G3c48@aux) (list 'immutable G3c47@field G3c48@aux)) G3c3c@field* G3c45@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3c3b@predicate (list 'condition-predicate (list 'record-type-descriptor G3c38@name))) (map (lambda (G3c4b@accessor G3c4c@aux) (list 'define G3c4b@accessor (list 'condition-accessor (list 'record-type-descriptor G3c38@name) G3c4c@aux))) G3c3d@accessor* G3c45@aux-accessor*)))))) (map (lambda (G3c4f@x) (gensym)) G3c3d@accessor*))) G3c27@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3c25@t))) (G3086@syntax-dispatch G3c25@t '(any any any any any . #(each (any any)))))) G3c21@x))) '#f))) (set! G307e@incorrect-usage-macro (lambda (G3c55@e) (G3179@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3c55@e))) (set! G3080@parameterize-macro (lambda (G3c57@e) ((lambda (G3c59@t) ((lambda (G3c5b@ls/false) (if G3c5b@ls/false (apply (lambda (G3c5d@b G3c5e@b*) (G303c@bless (cons 'let (cons '() (cons G3c5d@b G3c5e@b*))))) G3c5b@ls/false) ((lambda (G3c61@t) ((lambda (G3c63@ls/false) (if G3c63@ls/false (apply (lambda (G3c65@olhs* G3c66@orhs* G3c67@b G3c68@b*) ((lambda (G3c6d@lhs* G3c6e@rhs*) (G303c@bless (cons (list 'lambda (append G3c6d@lhs* G3c6e@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3c71@lhs G3c72@rhs) (list 'let (list (list 't (list G3c71@lhs))) (list G3c71@lhs G3c72@rhs) (cons 'set! (cons G3c72@rhs '(t))))) G3c6d@lhs* G3c6e@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3c67@b G3c68@b*))) '(swap)))))) (append G3c65@olhs* G3c66@orhs*)))) (G3165@generate-temporaries G3c65@olhs*) (G3165@generate-temporaries G3c66@orhs*))) G3c63@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3c61@t))) (G3086@syntax-dispatch G3c61@t '(_ #(each (any any)) any . each-any)))) G3c59@t))) (G3086@syntax-dispatch G3c59@t '(_ () any . each-any)))) G3c57@e))) (set! G3082@foreign-call-transformer (lambda (G3c75@e G3c76@r G3c77@mr) ((lambda (G3c7b@t) ((lambda (G3c7d@ls/false) (if G3c7d@ls/false (apply (lambda (G3c7f@name G3c80@arg*) (cons 'foreign-call (cons (G30aa@chi-expr G3c7f@name G3c76@r G3c77@mr) (G30a6@chi-expr* G3c80@arg* G3c76@r G3c77@mr)))) G3c7d@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3c7b@t))) (G3086@syntax-dispatch G3c7b@t '(_ any . each-any)))) G3c75@e))) (set! G3084@convert-pattern (lambda (G3c83@pattern G3c84@keys) ((lambda (G3c88@cvt* G3c8a@cvt) (begin (set! G3c88@cvt* (lambda (G3d19@p* G3d1a@n G3d1b@ids) (if (null? G3d19@p*) (values '() G3d1b@ids) (call-with-values (lambda () (G3c88@cvt* (cdr G3d19@p*) G3d1a@n G3d1b@ids)) (lambda (G3d21@G3d1f G3d22@G3d20) ((lambda (G3d25@ids G3d26@y) (call-with-values (lambda () (G3c8a@cvt (car G3d19@p*) G3d1a@n G3d25@ids)) (lambda (G3d2b@G3d29 G3d2c@G3d2a) ((lambda (G3d2f@ids G3d30@x) (values (cons G3d30@x G3d26@y) G3d2f@ids)) G3d2c@G3d2a G3d2b@G3d29)))) G3d22@G3d20 G3d21@G3d1f)))))) (set! G3c8a@cvt (lambda (G3c8b@p G3c8c@n G3c8d@ids) ((lambda (G3c91@t) ((lambda (G3c93@ls/false) (if (if G3c93@ls/false (begin '#f (apply (lambda (G3c95@id) (G2e43@id? G3c95@id)) G3c93@ls/false)) '#f) (apply (lambda (G3c97@id) (if (G2e51@bound-id-member? G3c8b@p G3c84@keys) (values (vector 'free-id G3c8b@p) G3c8d@ids) (if (G2e4b@free-id=? G3c8b@p (G3014@scheme-stx '_)) (values '_ G3c8d@ids) (values 'any (cons (cons G3c8b@p G3c8c@n) G3c8d@ids))))) G3c93@ls/false) ((lambda (G3c99@t) ((lambda (G3c9b@ls/false) (if (if G3c9b@ls/false (begin '#f (apply (lambda (G3c9d@p G3c9e@dots) (G3088@ellipsis? G3c9e@dots)) G3c9b@ls/false)) '#f) (apply (lambda (G3ca1@p G3ca2@dots) (call-with-values (lambda () (G3c8a@cvt G3ca1@p (+ G3c8c@n '1) G3c8d@ids)) (lambda (G3ca7@G3ca5 G3ca8@G3ca6) ((lambda (G3cab@ids G3cac@p) (values (if (eq? G3cac@p 'any) 'each-any (vector 'each G3cac@p)) G3cab@ids)) G3ca8@G3ca6 G3ca7@G3ca5)))) G3c9b@ls/false) ((lambda (G3caf@t) ((lambda (G3cb1@ls/false) (if (if G3cb1@ls/false (begin '#f (apply (lambda (G3cb3@x G3cb4@dots G3cb5@ys G3cb6@z) (G3088@ellipsis? G3cb4@dots)) G3cb1@ls/false)) '#f) (apply (lambda (G3cbb@x G3cbc@dots G3cbd@ys G3cbe@z) (call-with-values (lambda () (G3c8a@cvt G3cbe@z G3c8c@n G3c8d@ids)) (lambda (G3cc5@G3cc3 G3cc6@G3cc4) ((lambda (G3cc9@ids G3cca@z) (call-with-values (lambda () (G3c88@cvt* G3cbd@ys G3c8c@n G3cc9@ids)) (lambda (G3ccf@G3ccd G3cd0@G3cce) ((lambda (G3cd3@ids G3cd4@ys) (call-with-values (lambda () (G3c8a@cvt G3cbb@x (+ G3c8c@n '1) G3cd3@ids)) (lambda (G3cd9@G3cd7 G3cda@G3cd8) ((lambda (G3cdd@ids G3cde@x) (values (vector 'each+ G3cde@x (reverse G3cd4@ys) G3cca@z) G3cdd@ids)) G3cda@G3cd8 G3cd9@G3cd7)))) G3cd0@G3cce G3ccf@G3ccd)))) G3cc6@G3cc4 G3cc5@G3cc3)))) G3cb1@ls/false) ((lambda (G3ce1@t) ((lambda (G3ce3@ls/false) (if G3ce3@ls/false (apply (lambda (G3ce5@x G3ce6@y) (call-with-values (lambda () (G3c8a@cvt G3ce6@y G3c8c@n G3c8d@ids)) (lambda (G3ceb@G3ce9 G3cec@G3cea) ((lambda (G3cef@ids G3cf0@y) (call-with-values (lambda () (G3c8a@cvt G3ce5@x G3c8c@n G3cef@ids)) (lambda (G3cf5@G3cf3 G3cf6@G3cf4) ((lambda (G3cf9@ids G3cfa@x) (values (cons G3cfa@x G3cf0@y) G3cf9@ids)) G3cf6@G3cf4 G3cf5@G3cf3)))) G3cec@G3cea G3ceb@G3ce9)))) G3ce3@ls/false) ((lambda (G3cfd@t) ((lambda (G3cff@ls/false) (if G3cff@ls/false (apply (lambda () (values '() G3c8d@ids)) G3cff@ls/false) ((lambda (G3d01@t) ((lambda (G3d03@ls/false) (if (if G3d03@ls/false (begin '#f (apply (lambda (G3d05@p) (not (G2e0b@stx? G3d05@p))) G3d03@ls/false)) '#f) (apply (lambda (G3d07@p) (call-with-values (lambda () (G3c8a@cvt G3d07@p G3c8c@n G3c8d@ids)) (lambda (G3d0b@G3d09 G3d0c@G3d0a) ((lambda (G3d0f@ids G3d10@p) (values (vector 'vector G3d10@p) G3d0f@ids)) G3d0c@G3d0a G3d0b@G3d09)))) G3d03@ls/false) ((lambda (G3d13@t) ((lambda (G3d15@ls/false) (if G3d15@ls/false (apply (lambda (G3d17@datum) (values (vector 'atom (G2e59@stx->datum G3d17@datum)) G3c8d@ids)) G3d15@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3d13@t))) (G3086@syntax-dispatch G3d13@t 'any))) G3d01@t))) (G3086@syntax-dispatch G3d01@t '#(vector each-any)))) G3cfd@t))) (G3086@syntax-dispatch G3cfd@t '()))) G3ce1@t))) (G3086@syntax-dispatch G3ce1@t '(any . any)))) G3caf@t))) (G3086@syntax-dispatch G3caf@t '(any any . #(each+ any () any))))) G3c99@t))) (G3086@syntax-dispatch G3c99@t '(any any)))) G3c91@t))) (G3086@syntax-dispatch G3c91@t 'any))) G3c8b@p))) (G3c8a@cvt G3c83@pattern '0 '()))) '#f '#f))) (set! G3086@syntax-dispatch ((lambda () ((lambda (G3d34@stx^ G3d36@match-each G3d38@match-each+ G3d3a@match-each-any G3d3c@match-empty G3d3e@combine G3d40@match* G3d42@match) (begin (set! G3d34@stx^ (lambda (G3dfd@e G3dfe@m* G3dff@s* G3e00@ae*) (if (if (null? G3dfe@m*) (if (null? G3dff@s*) (begin '#f (null? G3e00@ae*)) '#f) '#f) G3dfd@e (G2e2b@mkstx G3dfd@e G3dfe@m* G3dff@s* G3e00@ae*)))) (set! G3d36@match-each (lambda (G3de0@e G3de1@p G3de2@m* G3de3@s* G3de4@ae*) (if (pair? G3de0@e) ((lambda (G3dea@first) (if G3dea@first (begin '#f ((lambda (G3dec@rest) (if G3dec@rest (begin '#f (cons G3dea@first G3dec@rest)) '#f)) (G3d36@match-each (cdr G3de0@e) G3de1@p G3de2@m* G3de3@s* G3de4@ae*))) '#f)) (G3d42@match (car G3de0@e) G3de1@p G3de2@m* G3de3@s* G3de4@ae* '())) (if (null? G3de0@e) '() (if (G2e0b@stx? G3de0@e) (if (not (G2db9@top-marked? G3de2@m*)) (begin '#f (call-with-values (lambda () (G2e29@join-wraps G3de2@m* G3de3@s* G3de4@ae* G3de0@e)) (lambda (G3df1@G3dee G3df2@G3def G3df3@G3df0) ((lambda (G3df7@ae* G3df8@s* G3df9@m*) (G3d36@match-each (G2e0f@stx-expr G3de0@e) G3de1@p G3df9@m* G3df8@s* G3df7@ae*)) G3df3@G3df0 G3df2@G3def G3df1@G3dee)))) '#f) (if (G298a@G288a@annotation? G3de0@e) (G3d36@match-each (G298c@G288e@annotation-expression G3de0@e) G3de1@p G3de2@m* G3de3@s* G3de4@ae*) '#f)))))) (set! G3d38@match-each+ (lambda (G3da6@e G3da7@x-pat G3da8@y-pat G3da9@z-pat G3daa@m* G3dab@s* G3dac@ae* G3dad@r) ((letrec ((G3db6@f (lambda (G3db8@e G3db9@m* G3dba@s* G3dbb@ae*) (if (pair? G3db8@e) (call-with-values (lambda () (G3db6@f (cdr G3db8@e) G3db9@m* G3dba@s* G3dbb@ae*)) (lambda (G3dc3@G3dc0 G3dc4@G3dc1 G3dc5@G3dc2) ((lambda (G3dc9@r G3dca@y-pat G3dcb@xr*) (if G3dc9@r (if (null? G3dca@y-pat) ((lambda (G3dcf@xr) (if G3dcf@xr (values (cons G3dcf@xr G3dcb@xr*) G3dca@y-pat G3dc9@r) (values '#f '#f '#f))) (G3d42@match (car G3db8@e) G3da7@x-pat G3db9@m* G3dba@s* G3dbb@ae* '())) (values '() (cdr G3dca@y-pat) (G3d42@match (car G3db8@e) (car G3dca@y-pat) G3db9@m* G3dba@s* G3dbb@ae* G3dc9@r))) (values '#f '#f '#f))) G3dc5@G3dc2 G3dc4@G3dc1 G3dc3@G3dc0))) (if (G2e0b@stx? G3db8@e) (if (G2db9@top-marked? G3db9@m*) (values '() G3da8@y-pat (G3d42@match G3db8@e G3da9@z-pat G3db9@m* G3dba@s* G3dbb@ae* G3dad@r)) (call-with-values (lambda () (G2e29@join-wraps G3db9@m* G3dba@s* G3dbb@ae* G3db8@e)) (lambda (G3dd4@G3dd1 G3dd5@G3dd2 G3dd6@G3dd3) ((lambda (G3dda@ae* G3ddb@s* G3ddc@m*) (G3db6@f (G2e0f@stx-expr G3db8@e) G3ddc@m* G3ddb@s* G3dda@ae*)) G3dd6@G3dd3 G3dd5@G3dd2 G3dd4@G3dd1)))) (if (G298a@G288a@annotation? G3db8@e) (G3db6@f (G298c@G288e@annotation-expression G3db8@e) G3db9@m* G3dba@s* G3dbb@ae*) (values '() G3da8@y-pat (G3d42@match G3db8@e G3da9@z-pat G3db9@m* G3dba@s* G3dbb@ae* G3dad@r)))))))) G3db6@f) G3da6@e G3daa@m* G3dab@s* G3dac@ae*))) (set! G3d3a@match-each-any (lambda (G3d8d@e G3d8e@m* G3d8f@s* G3d90@ae*) (if (pair? G3d8d@e) ((lambda (G3d95@l) (if G3d95@l (begin '#f (cons (G3d34@stx^ (car G3d8d@e) G3d8e@m* G3d8f@s* G3d90@ae*) G3d95@l)) '#f)) (G3d3a@match-each-any (cdr G3d8d@e) G3d8e@m* G3d8f@s* G3d90@ae*)) (if (null? G3d8d@e) '() (if (G2e0b@stx? G3d8d@e) (if (not (G2db9@top-marked? G3d8e@m*)) (begin '#f (call-with-values (lambda () (G2e29@join-wraps G3d8e@m* G3d8f@s* G3d90@ae* G3d8d@e)) (lambda (G3d9a@G3d97 G3d9b@G3d98 G3d9c@G3d99) ((lambda (G3da0@ae* G3da1@s* G3da2@m*) (G3d3a@match-each-any (G2e0f@stx-expr G3d8d@e) G3da2@m* G3da1@s* G3da0@ae*)) G3d9c@G3d99 G3d9b@G3d98 G3d9a@G3d97)))) '#f) (if (G298a@G288a@annotation? G3d8d@e) (G3d3a@match-each-any (G298c@G288e@annotation-expression G3d8d@e) G3d8e@m* G3d8f@s* G3d90@ae*) '#f)))))) (set! G3d3c@match-empty (lambda (G3d87@p G3d88@r) (if (null? G3d87@p) G3d88@r (if (eq? G3d87@p '_) G3d88@r (if (eq? G3d87@p 'any) (cons '() G3d88@r) (if (pair? G3d87@p) (G3d3c@match-empty (car G3d87@p) (G3d3c@match-empty (cdr G3d87@p) G3d88@r)) (if (eq? G3d87@p 'each-any) (cons '() G3d88@r) ((lambda (G3d8b@t) (if (memv G3d8b@t '(each)) (G3d3c@match-empty (vector-ref G3d87@p '1) G3d88@r) (if (memv G3d8b@t '(each+)) (G3d3c@match-empty (vector-ref G3d87@p '1) (G3d3c@match-empty (reverse (vector-ref G3d87@p '2)) (G3d3c@match-empty (vector-ref G3d87@p '3) G3d88@r))) (if (memv G3d8b@t '(free-id atom)) G3d88@r (if (memv G3d8b@t '(scheme-id atom)) G3d88@r (if (memv G3d8b@t '(vector)) (G3d3c@match-empty (vector-ref G3d87@p '1) G3d88@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d87@p))))))) (vector-ref G3d87@p '0))))))))) (set! G3d3e@combine (lambda (G3d83@r* G3d84@r) (if (null? (car G3d83@r*)) G3d84@r (cons (map car G3d83@r*) (G3d3e@combine (map cdr G3d83@r*) G3d84@r))))) (set! G3d40@match* (lambda (G3d62@e G3d63@p G3d64@m* G3d65@s* G3d66@ae* G3d67@r) (if (null? G3d63@p) (if (null? G3d62@e) (begin '#f G3d67@r) '#f) (if (pair? G3d63@p) (if (pair? G3d62@e) (begin '#f (G3d42@match (car G3d62@e) (car G3d63@p) G3d64@m* G3d65@s* G3d66@ae* (G3d42@match (cdr G3d62@e) (cdr G3d63@p) G3d64@m* G3d65@s* G3d66@ae* G3d67@r))) '#f) (if (eq? G3d63@p 'each-any) ((lambda (G3d6e@l) (if G3d6e@l (begin '#f (cons G3d6e@l G3d67@r)) '#f)) (G3d3a@match-each-any G3d62@e G3d64@m* G3d65@s* G3d66@ae*)) ((lambda (G3d70@t) (if (memv G3d70@t '(each)) (if (null? G3d62@e) (G3d3c@match-empty (vector-ref G3d63@p '1) G3d67@r) ((lambda (G3d72@r*) (if G3d72@r* (begin '#f (G3d3e@combine G3d72@r* G3d67@r)) '#f)) (G3d36@match-each G3d62@e (vector-ref G3d63@p '1) G3d64@m* G3d65@s* G3d66@ae*))) (if (memv G3d70@t '(free-id)) (if (symbol? G3d62@e) (if (G2db9@top-marked? G3d64@m*) (if (G2e4b@free-id=? (G3d34@stx^ G3d62@e G3d64@m* G3d65@s* G3d66@ae*) (vector-ref G3d63@p '1)) (begin '#f G3d67@r) '#f) '#f) '#f) (if (memv G3d70@t '(scheme-id)) (if (symbol? G3d62@e) (if (G2db9@top-marked? G3d64@m*) (if (G2e4b@free-id=? (G3d34@stx^ G3d62@e G3d64@m* G3d65@s* G3d66@ae*) (G3014@scheme-stx (vector-ref G3d63@p '1))) (begin '#f G3d67@r) '#f) '#f) '#f) (if (memv G3d70@t '(each+)) (call-with-values (lambda () (G3d38@match-each+ G3d62@e (vector-ref G3d63@p '1) (vector-ref G3d63@p '2) (vector-ref G3d63@p '3) G3d64@m* G3d65@s* G3d66@ae* G3d67@r)) (lambda (G3d77@G3d74 G3d78@G3d75 G3d79@G3d76) ((lambda (G3d7d@r G3d7e@y-pat G3d7f@xr*) (if G3d7d@r (if (null? G3d7e@y-pat) (begin '#f (if (null? G3d7f@xr*) (G3d3c@match-empty (vector-ref G3d63@p '1) G3d7d@r) (G3d3e@combine G3d7f@xr* G3d7d@r))) '#f) '#f)) G3d79@G3d76 G3d78@G3d75 G3d77@G3d74))) (if (memv G3d70@t '(atom)) (if (equal? (vector-ref G3d63@p '1) (G2e57@strip G3d62@e G3d64@m*)) (begin '#f G3d67@r) '#f) (if (memv G3d70@t '(vector)) (if (vector? G3d62@e) (begin '#f (G3d42@match (vector->list G3d62@e) (vector-ref G3d63@p '1) G3d64@m* G3d65@s* G3d66@ae* G3d67@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d63@p)))))))) (vector-ref G3d63@p '0))))))) (set! G3d42@match (lambda (G3d47@e G3d48@p G3d49@m* G3d4a@s* G3d4b@ae* G3d4c@r) (if (not G3d4c@r) '#f (if (eq? G3d48@p '_) G3d4c@r (if (eq? G3d48@p 'any) (cons (G3d34@stx^ G3d47@e G3d49@m* G3d4a@s* G3d4b@ae*) G3d4c@r) (if (G2e0b@stx? G3d47@e) (if (not (G2db9@top-marked? G3d49@m*)) (begin '#f (call-with-values (lambda () (G2e29@join-wraps G3d49@m* G3d4a@s* G3d4b@ae* G3d47@e)) (lambda (G3d56@G3d53 G3d57@G3d54 G3d58@G3d55) ((lambda (G3d5c@ae* G3d5d@s* G3d5e@m*) (G3d42@match (G2e0f@stx-expr G3d47@e) G3d48@p G3d5e@m* G3d5d@s* G3d5c@ae* G3d4c@r)) G3d58@G3d55 G3d57@G3d54 G3d56@G3d53)))) '#f) (if (G298a@G288a@annotation? G3d47@e) (G3d42@match (G298c@G288e@annotation-expression G3d47@e) G3d48@p G3d49@m* G3d4a@s* G3d4b@ae* G3d4c@r) (G3d40@match* G3d47@e G3d48@p G3d49@m* G3d4a@s* G3d4b@ae* G3d4c@r)))))))) (lambda (G3d43@e G3d44@p) (G3d42@match G3d43@e G3d44@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3088@ellipsis? (lambda (G3e05@x) (if (G2e43@id? G3e05@x) (begin '#f (G2e4b@free-id=? G3e05@x (G3014@scheme-stx '...))) '#f))) (set! G308a@underscore? (lambda (G3e07@x) (if (G2e43@id? G3e07@x) (begin '#f (G2e4b@free-id=? G3e07@x (G3014@scheme-stx '_))) '#f))) (set! G308c@verify-literals (lambda (G3e09@lits G3e0a@expr) (for-each (lambda (G3e0d@x) (if ((lambda (G3e0f@t) (if G3e0f@t G3e0f@t ((lambda (G3e11@t) (if G3e11@t G3e11@t (begin '#f (G308a@underscore? G3e0d@x)))) (G3088@ellipsis? G3e0d@x)))) (not (G2e43@id? G3e0d@x))) (G3179@syntax-violation '#f '"invalid literal" G3e0a@expr G3e0d@x) (void))) G3e09@lits))) (set! G308e@syntax-case-transformer ((lambda () ((lambda (G3e14@build-dispatch-call G3e16@invalid-ids-error G3e18@gen-clause G3e1a@gen-syntax-case) (begin (set! G3e14@build-dispatch-call (lambda (G3e83@pvars G3e84@expr G3e85@y G3e86@r G3e87@mr) ((lambda (G3e8d@ids G3e8e@levels) ((lambda (G3e91@labels G3e92@new-vars) ((lambda (G3e95@body) (list '(primitive apply) (G2d9b@G2cc3@build-lambda '#f G3e92@new-vars G3e95@body) G3e85@y)) (G30aa@chi-expr (G2e2f@add-subst (G2dfc@make-full-rib G3e8d@ids G3e91@labels) G3e84@expr) (append (map (lambda (G3e97@label G3e98@var G3e99@level) (cons G3e97@label (G2e63@make-binding 'syntax (cons G3e98@var G3e99@level)))) G3e91@labels G3e92@new-vars (map cdr G3e83@pvars)) G3e86@r) G3e87@mr))) (map G2dbf@gen-label G3e8d@ids) (map G2dbb@gen-lexical G3e8d@ids))) (map car G3e83@pvars) (map cdr G3e83@pvars)))) (set! G3e16@invalid-ids-error (lambda (G3e77@id* G3e78@e G3e79@class) ((letrec ((G3e7d@find (lambda (G3e7f@id* G3e80@ok*) (if (null? G3e7f@id*) (G3179@syntax-violation '#f '"invalid syntax" G3e78@e) (if (G2e43@id? (car G3e7f@id*)) (if (G2e51@bound-id-member? (car G3e7f@id*) G3e80@ok*) (G3173@syntax-error (car G3e7f@id*) '"duplicate " G3e79@class) (G3e7d@find (cdr G3e7f@id*) (cons (car G3e7f@id*) G3e80@ok*))) (G3173@syntax-error (car G3e7f@id*) '"invalid " G3e79@class)))))) G3e7d@find) G3e77@id* '()))) (set! G3e18@gen-clause (lambda (G3e51@x G3e52@keys G3e53@clauses G3e54@r G3e55@mr G3e56@pat G3e57@fender G3e58@expr) (call-with-values (lambda () (G3084@convert-pattern G3e56@pat G3e52@keys)) (lambda (G3e63@G3e61 G3e64@G3e62) ((lambda (G3e67@pvars G3e68@p) (if (not (G2e4f@distinct-bound-ids? (map car G3e67@pvars))) (G3e16@invalid-ids-error (map car G3e67@pvars) G3e56@pat '"pattern variable") (if (not (for-all (lambda (G3e6b@x) (not (G3088@ellipsis? (car G3e6b@x)))) G3e67@pvars)) (G3179@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3e56@pat) ((lambda (G3e6d@y) ((lambda (G3e6f@test) ((lambda (G3e71@conseq) ((lambda (G3e73@altern) (list (G2d9b@G2cc3@build-lambda '#f (list G3e6d@y) (list 'if G3e6f@test G3e71@conseq G3e73@altern)) (list '(primitive syntax-dispatch) G3e51@x (list 'quote G3e68@p)))) (G3e1a@gen-syntax-case G3e51@x G3e52@keys G3e53@clauses G3e54@r G3e55@mr))) (G3e14@build-dispatch-call G3e67@pvars G3e58@expr G3e6d@y G3e54@r G3e55@mr))) (if (eq? G3e57@fender '#t) G3e6d@y ((lambda (G3e75@call) (list 'if G3e6d@y G3e75@call (list 'quote '#f))) (G3e14@build-dispatch-call G3e67@pvars G3e57@fender G3e6d@y G3e54@r G3e55@mr))))) (G2dbb@gen-lexical 'tmp))))) G3e64@G3e62 G3e63@G3e61))))) (set! G3e1a@gen-syntax-case (lambda (G3e2f@x G3e30@keys G3e31@clauses G3e32@r G3e33@mr) (if (null? G3e31@clauses) (list '(primitive syntax-error) G3e2f@x) ((lambda (G3e39@t) ((lambda (G3e3b@ls/false) (if G3e3b@ls/false (apply (lambda (G3e3d@pat G3e3e@expr) (if (if (G2e43@id? G3e3d@pat) (if (not (G2e51@bound-id-member? G3e3d@pat G3e30@keys)) (begin '#f (not (G3088@ellipsis? G3e3d@pat))) '#f) '#f) (if (G2e4b@free-id=? G3e3d@pat (G3014@scheme-stx '_)) (G30aa@chi-expr G3e3e@expr G3e32@r G3e33@mr) ((lambda (G3e41@lab G3e42@lex) ((lambda (G3e45@body) (list (G2d9b@G2cc3@build-lambda '#f (list G3e42@lex) G3e45@body) G3e2f@x)) (G30aa@chi-expr (G2e2f@add-subst (G2dfc@make-full-rib (list G3e3d@pat) (list G3e41@lab)) G3e3e@expr) (cons (cons G3e41@lab (G2e63@make-binding 'syntax (cons G3e42@lex '0))) G3e32@r) G3e33@mr))) (G2dbf@gen-label G3e3d@pat) (G2dbb@gen-lexical G3e3d@pat))) (G3e18@gen-clause G3e2f@x G3e30@keys (cdr G3e31@clauses) G3e32@r G3e33@mr G3e3d@pat '#t G3e3e@expr))) G3e3b@ls/false) ((lambda (G3e47@t) ((lambda (G3e49@ls/false) (if G3e49@ls/false (apply (lambda (G3e4b@pat G3e4c@fender G3e4d@expr) (G3e18@gen-clause G3e2f@x G3e30@keys (cdr G3e31@clauses) G3e32@r G3e33@mr G3e4b@pat G3e4c@fender G3e4d@expr)) G3e49@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3e47@t))) (G3086@syntax-dispatch G3e47@t '(any any any)))) G3e39@t))) (G3086@syntax-dispatch G3e39@t '(any any)))) (car G3e31@clauses))))) (lambda (G3e1b@e G3e1c@r G3e1d@mr) ((lambda (G3e21@t) ((lambda (G3e23@ls/false) (if G3e23@ls/false (apply (lambda (G3e25@expr G3e26@keys G3e27@clauses) (begin (G308c@verify-literals G3e26@keys G3e1b@e) ((lambda (G3e2b@x) ((lambda (G3e2d@body) (list (G2d9b@G2cc3@build-lambda '#f (list G3e2b@x) G3e2d@body) (G30aa@chi-expr G3e25@expr G3e1c@r G3e1d@mr))) (G3e1a@gen-syntax-case G3e2b@x G3e26@keys G3e27@clauses G3e1c@r G3e1d@mr))) (G2dbb@gen-lexical 'tmp)))) G3e23@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3e21@t))) (G3086@syntax-dispatch G3e21@t '(_ any each-any . each-any)))) G3e1b@e)))) '#f '#f '#f '#f)))) (set! G3090@ellipsis-map (lambda (G3e9d@proc G3e9e@ls . G3ea1@ls*) ((lambda (G3ea4@who) (begin (set! G3ea4@who '...) (begin (if (not (list? G3e9e@ls)) (assertion-violation G3ea4@who '"not a list" G3e9e@ls) (void)) (if (not (null? G3ea1@ls*)) ((lambda (G3ea5@n) (for-each (lambda (G3ea7@x) (begin (if (not (list? G3ea7@x)) (assertion-violation G3ea4@who '"not a list" G3ea7@x) (void)) (if (not (= (length G3ea7@x) G3ea5@n)) (assertion-violation G3ea4@who '"length mismatch" G3e9e@ls G3ea7@x) (void)))) G3ea1@ls*)) (length G3e9e@ls)) (void)) (apply map G3e9d@proc G3e9e@ls G3ea1@ls*)))) '#f))) (set! G3092@syntax-transformer ((lambda () ((lambda (G3eaa@gen-syntax G3eac@gen-ref G3eae@gen-append G3eb0@gen-mappend G3eb2@gen-map G3eb4@gen-cons G3eb6@gen-vector G3eb8@regen) (begin (set! G3eaa@gen-syntax (lambda (G3f1d@src G3f1e@e G3f1f@r G3f20@maps G3f21@ellipsis? G3f22@vec?) ((lambda (G3f29@t) ((lambda (G3f2b@ls/false) (if (if G3f2b@ls/false (begin '#f (apply (lambda (G3f2d@dots) (G3f21@ellipsis? G3f2d@dots)) G3f2b@ls/false)) '#f) (apply (lambda (G3f2f@dots) (G3179@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f1d@src)) G3f2b@ls/false) ((lambda (G3f31@t) ((lambda (G3f33@ls/false) (if (if G3f33@ls/false (begin '#f (apply (lambda (G3f35@id) (G2e43@id? G3f35@id)) G3f33@ls/false)) '#f) (apply (lambda (G3f37@id) ((lambda (G3f39@label) ((lambda (G3f3b@b) ((lambda () (if (eq? (G2e65@binding-type G3f3b@b) 'syntax) (call-with-values (lambda () ((lambda (G3f3f@var.lev) (G3eac@gen-ref G3f1d@src (car G3f3f@var.lev) (cdr G3f3f@var.lev) G3f20@maps)) (G2e67@binding-value G3f3b@b))) (lambda (G3f41@G3f3d G3f42@G3f3e) ((lambda (G3f45@maps G3f46@var) (values (list 'ref G3f46@var) G3f45@maps)) G3f42@G3f3e G3f41@G3f3d))) (values (list 'quote G3f1e@e) G3f20@maps))))) (G2e61@label->binding G3f39@label G3f1f@r))) (G2e5d@id->label G3f1e@e))) G3f33@ls/false) ((lambda (G3f49@t) ((lambda (G3f4b@ls/false) (if (if G3f4b@ls/false (begin '#f (apply (lambda (G3f4d@dots G3f4e@e) (G3f21@ellipsis? G3f4d@dots)) G3f4b@ls/false)) '#f) (apply (lambda (G3f51@dots G3f52@e) (if G3f22@vec? (G3179@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f1d@src) (G3eaa@gen-syntax G3f1d@src G3f52@e G3f1f@r G3f20@maps (lambda (G3f55@x) '#f) '#f))) G3f4b@ls/false) ((lambda (G3f57@t) ((lambda (G3f59@ls/false) (if (if G3f59@ls/false (begin '#f (apply (lambda (G3f5b@x G3f5c@dots G3f5d@y) (G3f21@ellipsis? G3f5c@dots)) G3f59@ls/false)) '#f) (apply (lambda (G3f61@x G3f62@dots G3f63@y) ((letrec ((G3f67@f (lambda (G3f69@y G3f6a@k) ((lambda (G3f6d@t) ((lambda (G3f6f@ls/false) (if G3f6f@ls/false (apply (lambda () (G3f6a@k G3f20@maps)) G3f6f@ls/false) ((lambda (G3f71@t) ((lambda (G3f73@ls/false) (if (if G3f73@ls/false (begin '#f (apply (lambda (G3f75@dots G3f76@y) (G3f21@ellipsis? G3f75@dots)) G3f73@ls/false)) '#f) (apply (lambda (G3f79@dots G3f7a@y) (G3f67@f G3f7a@y (lambda (G3f7d@maps) (call-with-values (lambda () (G3f6a@k (cons '() G3f7d@maps))) (lambda (G3f81@G3f7f G3f82@G3f80) ((lambda (G3f85@maps G3f86@x) (if (null? (car G3f85@maps)) (G3179@syntax-violation '#f '"extra ellipsis in syntax form" G3f1d@src) (values (G3eb0@gen-mappend G3f86@x (car G3f85@maps)) (cdr G3f85@maps)))) G3f82@G3f80 G3f81@G3f7f)))))) G3f73@ls/false) ((lambda (G3f89@t) ((lambda (G3f8b@ls/false) (if G3f8b@ls/false (apply (lambda () (call-with-values (lambda () (G3eaa@gen-syntax G3f1d@src G3f69@y G3f1f@r G3f20@maps G3f21@ellipsis? G3f22@vec?)) (lambda (G3f8f@G3f8d G3f90@G3f8e) ((lambda (G3f93@maps G3f94@y) (call-with-values (lambda () (G3f6a@k G3f93@maps)) (lambda (G3f99@G3f97 G3f9a@G3f98) ((lambda (G3f9d@maps G3f9e@x) (values (G3eae@gen-append G3f9e@x G3f94@y) G3f9d@maps)) G3f9a@G3f98 G3f99@G3f97)))) G3f90@G3f8e G3f8f@G3f8d)))) G3f8b@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3f89@t))) (G3086@syntax-dispatch G3f89@t '_))) G3f71@t))) (G3086@syntax-dispatch G3f71@t '(any . any)))) G3f6d@t))) (G3086@syntax-dispatch G3f6d@t '()))) G3f69@y)))) G3f67@f) G3f63@y (lambda (G3fa1@maps) (call-with-values (lambda () (G3eaa@gen-syntax G3f1d@src G3f61@x G3f1f@r (cons '() G3fa1@maps) G3f21@ellipsis? '#f)) (lambda (G3fa5@G3fa3 G3fa6@G3fa4) ((lambda (G3fa9@maps G3faa@x) (if (null? (car G3fa9@maps)) (G3179@syntax-violation '#f '"extra ellipsis in syntax form" G3f1d@src) (values (G3eb2@gen-map G3faa@x (car G3fa9@maps)) (cdr G3fa9@maps)))) G3fa6@G3fa4 G3fa5@G3fa3)))))) G3f59@ls/false) ((lambda (G3fad@t) ((lambda (G3faf@ls/false) (if G3faf@ls/false (apply (lambda (G3fb1@x G3fb2@y) (call-with-values (lambda () (G3eaa@gen-syntax G3f1d@src G3fb1@x G3f1f@r G3f20@maps G3f21@ellipsis? '#f)) (lambda (G3fb7@G3fb5 G3fb8@G3fb6) ((lambda (G3fbb@maps G3fbc@xnew) (call-with-values (lambda () (G3eaa@gen-syntax G3f1d@src G3fb2@y G3f1f@r G3fbb@maps G3f21@ellipsis? G3f22@vec?)) (lambda (G3fc1@G3fbf G3fc2@G3fc0) ((lambda (G3fc5@maps G3fc6@ynew) (values (G3eb4@gen-cons G3f1e@e G3fb1@x G3fb2@y G3fbc@xnew G3fc6@ynew) G3fc5@maps)) G3fc2@G3fc0 G3fc1@G3fbf)))) G3fb8@G3fb6 G3fb7@G3fb5)))) G3faf@ls/false) ((lambda (G3fc9@t) ((lambda (G3fcb@ls/false) (if G3fcb@ls/false (apply (lambda (G3fcd@ls) (call-with-values (lambda () (G3eaa@gen-syntax G3f1d@src G3fcd@ls G3f1f@r G3f20@maps G3f21@ellipsis? '#t)) (lambda (G3fd1@G3fcf G3fd2@G3fd0) ((lambda (G3fd5@maps G3fd6@lsnew) (values (G3eb6@gen-vector G3f1e@e G3fcd@ls G3fd6@lsnew) G3fd5@maps)) G3fd2@G3fd0 G3fd1@G3fcf)))) G3fcb@ls/false) ((lambda (G3fd9@t) ((lambda (G3fdb@ls/false) (if G3fdb@ls/false (apply (lambda () (values (list 'quote G3f1e@e) G3f20@maps)) G3fdb@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3fd9@t))) (G3086@syntax-dispatch G3fd9@t '_))) G3fc9@t))) (G3086@syntax-dispatch G3fc9@t '#(vector each-any)))) G3fad@t))) (G3086@syntax-dispatch G3fad@t '(any . any)))) G3f57@t))) (G3086@syntax-dispatch G3f57@t '(any any . any)))) G3f49@t))) (G3086@syntax-dispatch G3f49@t '(any any)))) G3f31@t))) (G3086@syntax-dispatch G3f31@t 'any))) G3f29@t))) (G3086@syntax-dispatch G3f29@t 'any))) G3f1e@e))) (set! G3eac@gen-ref (lambda (G3f05@src G3f06@var G3f07@level G3f08@maps) (if (= G3f07@level '0) (values G3f06@var G3f08@maps) (if (null? G3f08@maps) (G3179@syntax-violation '#f '"missing ellipsis in syntax form" G3f05@src) (call-with-values (lambda () (G3eac@gen-ref G3f05@src G3f06@var (- G3f07@level '1) (cdr G3f08@maps))) (lambda (G3f0f@G3f0d G3f10@G3f0e) ((lambda (G3f13@outer-maps G3f14@outer-var) ((lambda (G3f17@t) (if G3f17@t ((lambda (G3f19@b) (values (cdr G3f19@b) G3f08@maps)) G3f17@t) ((lambda (G3f1b@inner-var) (values G3f1b@inner-var (cons (cons (cons G3f14@outer-var G3f1b@inner-var) (car G3f08@maps)) G3f13@outer-maps))) (G2dbb@gen-lexical 'tmp)))) (assq G3f14@outer-var (car G3f08@maps)))) G3f10@G3f0e G3f0f@G3f0d))))))) (set! G3eae@gen-append (lambda (G3f01@x G3f02@y) (if (equal? G3f02@y ''()) G3f01@x (list 'append G3f01@x G3f02@y)))) (set! G3eb0@gen-mappend (lambda (G3efd@e G3efe@map-env) (list 'apply '(primitive append) (G3eb2@gen-map G3efd@e G3efe@map-env)))) (set! G3eb2@gen-map (lambda (G3eeb@e G3eec@map-env) ((lambda (G3eef@formals G3ef0@actuals) (if (eq? (car G3eeb@e) 'ref) (car G3ef0@actuals) (if (for-all (lambda (G3ef3@x) (if (eq? (car G3ef3@x) 'ref) (begin '#f (memq (cadr G3ef3@x) G3eef@formals)) '#f)) (cdr G3eeb@e)) ((lambda (G3ef5@args) (cons 'map (cons (list 'primitive (car G3eeb@e)) G3ef5@args))) (map ((lambda (G3ef7@r) (lambda (G3ef9@x) (cdr (assq (cadr G3ef9@x) G3ef7@r)))) (map cons G3eef@formals G3ef0@actuals)) (cdr G3eeb@e))) (cons* 'map (list 'lambda G3eef@formals G3eeb@e) G3ef0@actuals)))) (map cdr G3eec@map-env) (map (lambda (G3efb@x) (list 'ref (car G3efb@x))) G3eec@map-env)))) (set! G3eb4@gen-cons (lambda (G3edb@e G3edc@x G3edd@y G3ede@xnew G3edf@ynew) ((lambda (G3ee5@t) (if (memv G3ee5@t '(quote)) (if (eq? (car G3ede@xnew) 'quote) ((lambda (G3ee7@xnew G3ee8@ynew) (if (if (eq? G3ee7@xnew G3edc@x) (begin '#f (eq? G3ee8@ynew G3edd@y)) '#f) (list 'quote G3edb@e) (list 'quote (cons G3ee7@xnew G3ee8@ynew)))) (cadr G3ede@xnew) (cadr G3edf@ynew)) (if (null? (cadr G3edf@ynew)) (list 'list G3ede@xnew) (list 'cons G3ede@xnew G3edf@ynew))) (if (memv G3ee5@t '(list)) (cons 'list (cons G3ede@xnew (cdr G3edf@ynew))) (list 'cons G3ede@xnew G3edf@ynew)))) (car G3edf@ynew)))) (set! G3eb6@gen-vector (lambda (G3ed5@e G3ed6@ls G3ed7@lsnew) (if (eq? (car G3ed7@lsnew) 'quote) (if (eq? (cadr G3ed7@lsnew) G3ed6@ls) (list 'quote G3ed5@e) (list 'quote (list->vector (cadr G3ed7@lsnew)))) (if (eq? (car G3ed7@lsnew) 'list) (cons 'vector (cdr G3ed7@lsnew)) (list 'list->vector G3ed7@lsnew))))) (set! G3eb8@regen (lambda (G3ecf@x) ((lambda (G3ed1@t) (if (memv G3ed1@t '(ref)) (cadr G3ecf@x) (if (memv G3ed1@t '(primitive)) (list 'primitive (cadr G3ecf@x)) (if (memv G3ed1@t '(quote)) (list 'quote (cadr G3ecf@x)) (if (memv G3ed1@t '(lambda)) (G2d9b@G2cc3@build-lambda '#f (cadr G3ecf@x) (G3eb8@regen (caddr G3ecf@x))) (if (memv G3ed1@t '(map)) ((lambda (G3ed3@ls) (cons '(primitive ellipsis-map) G3ed3@ls)) (map G3eb8@regen (cdr G3ecf@x))) (cons (list 'primitive (car G3ecf@x)) (map G3eb8@regen (cdr G3ecf@x))))))))) (car G3ecf@x)))) (lambda (G3eb9@e G3eba@r G3ebb@mr) ((lambda (G3ebf@t) ((lambda (G3ec1@ls/false) (if G3ec1@ls/false (apply (lambda (G3ec3@x) (call-with-values (lambda () (G3eaa@gen-syntax G3eb9@e G3ec3@x G3eba@r '() G3088@ellipsis? '#f)) (lambda (G3ec7@G3ec5 G3ec8@G3ec6) ((lambda (G3ecb@maps G3ecc@e) (G3eb8@regen G3ecc@e)) G3ec8@G3ec6 G3ec7@G3ec5)))) G3ec1@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3ebf@t))) (G3086@syntax-dispatch G3ebf@t '(_ any)))) G3eb9@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3094@core-macro-transformer (lambda (G3fdd@name) ((lambda (G3fdf@t) (if (memv G3fdf@t '(quote)) G3036@quote-transformer (if (memv G3fdf@t '(lambda)) G303a@lambda-transformer (if (memv G3fdf@t '(case-lambda)) G3038@case-lambda-transformer (if (memv G3fdf@t '(letrec)) G3022@letrec-transformer (if (memv G3fdf@t '(letrec*)) G3024@letrec*-transformer (if (memv G3fdf@t '(if)) G3032@if-transformer (if (memv G3fdf@t '(foreign-call)) G3082@foreign-call-transformer (if (memv G3fdf@t '(syntax-case)) G308e@syntax-case-transformer (if (memv G3fdf@t '(syntax)) G3092@syntax-transformer (if (memv G3fdf@t '(type-descriptor)) G3028@type-descriptor-transformer (if (memv G3fdf@t '(record-type-descriptor)) G302a@record-type-descriptor-transformer (if (memv G3fdf@t '(record-constructor-descriptor)) G302c@record-constructor-descriptor-transformer (if (memv G3fdf@t '(fluid-let-syntax)) G3026@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3fdd@name))))))))))))))) G3fdd@name))) (set! G3096@file-options-macro (lambda (G3fe1@x) ((lambda (G3fe4@valid-option?) (begin (set! G3fe4@valid-option? (lambda (G3fed@x) (if (G2e43@id? G3fed@x) (begin '#f (memq (G2e45@id->sym G3fed@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3fe5@t) ((lambda (G3fe7@ls/false) (if (if G3fe7@ls/false (begin '#f (apply (lambda (G3fe9@opt*) (if (for-all G3fe4@valid-option? G3fe9@opt*) (begin '#f (G2996@G293a@file-options-spec (map G2e45@id->sym G3fe9@opt*))) '#f)) G3fe7@ls/false)) '#f) (apply (lambda (G3feb@opt*) (G303c@bless (list 'quote (G2996@G293a@file-options-spec (map G2e45@id->sym G3feb@opt*))))) G3fe7@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3fe5@t))) (G3086@syntax-dispatch G3fe5@t '(_ . each-any)))) G3fe1@x))) '#f))) (set! G3098@symbol-macro (lambda (G3fef@x G3ff0@set) ((lambda (G3ff3@t) ((lambda (G3ff5@ls/false) (if (if G3ff5@ls/false (begin '#f (apply (lambda (G3ff7@name) (if (G2e43@id? G3ff7@name) (begin '#f (memq (G2e45@id->sym G3ff7@name) G3ff0@set)) '#f)) G3ff5@ls/false)) '#f) (apply (lambda (G3ff9@name) (G303c@bless (list 'quote G3ff9@name))) G3ff5@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G3ff3@t))) (G3086@syntax-dispatch G3ff3@t '(_ any)))) G3fef@x))) (set! G309a@macro-transformer (lambda (G3ffb@x) (if (procedure? G3ffb@x) G3ffb@x (if (symbol? G3ffb@x) ((lambda (G3ffd@t) (if (memv G3ffd@t '(define-record-type)) G307a@define-record-type-macro (if (memv G3ffd@t '(define-struct)) G3078@define-struct-macro (if (memv G3ffd@t '(include)) G306e@include-macro (if (memv G3ffd@t '(cond)) G306a@cond-macro (if (memv G3ffd@t '(let)) G3042@let-macro (if (memv G3ffd@t '(do)) G3062@do-macro (if (memv G3ffd@t '(or)) G3066@or-macro (if (memv G3ffd@t '(and)) G3068@and-macro (if (memv G3ffd@t '(let*)) G3064@let*-macro (if (memv G3ffd@t '(let-values)) G3044@let-values-macro (if (memv G3ffd@t '(let*-values)) G3046@let*-values-macro (if (memv G3ffd@t '(syntax-rules)) G3072@syntax-rules-macro (if (memv G3ffd@t '(quasiquote)) G3074@quasiquote-macro (if (memv G3ffd@t '(quasisyntax)) G3076@quasisyntax-macro (if (memv G3ffd@t '(with-syntax)) G303e@with-syntax-macro (if (memv G3ffd@t '(when)) G302e@when-macro (if (memv G3ffd@t '(unless)) G3030@unless-macro (if (memv G3ffd@t '(case)) G3034@case-macro (if (memv G3ffd@t '(identifier-syntax)) G3060@identifier-syntax-macro (if (memv G3ffd@t '(time)) G3058@time-macro (if (memv G3ffd@t '(delay)) G305a@delay-macro (if (memv G3ffd@t '(assert)) G305c@assert-macro (if (memv G3ffd@t '(endianness)) G305e@endianness-macro (if (memv G3ffd@t '(guard)) G3054@guard-macro (if (memv G3ffd@t '(define-enumeration)) G3056@define-enumeration-macro (if (memv G3ffd@t '(trace-lambda)) G3048@trace-lambda-macro (if (memv G3ffd@t '(trace-define)) G304a@trace-define-macro (if (memv G3ffd@t '(trace-define-syntax)) G304c@trace-define-syntax-macro (if (memv G3ffd@t '(trace-let-syntax)) G3050@trace-let-syntax-macro (if (memv G3ffd@t '(trace-letrec-syntax)) G3052@trace-letrec-syntax-macro (if (memv G3ffd@t '(define-condition-type)) G307c@define-condition-type-macro (if (memv G3ffd@t '(parameterize)) G3080@parameterize-macro (if (memv G3ffd@t '(include-into)) G3070@include-into-macro (if (memv G3ffd@t '(eol-style)) (lambda (G3fff@x) (G3098@symbol-macro G3fff@x '(none lf cr crlf nel crnel ls))) (if (memv G3ffd@t '(error-handling-mode)) (lambda (G4001@x) (G3098@symbol-macro G4001@x '(ignore raise replace))) (if (memv G3ffd@t '(buffer-mode)) (lambda (G4003@x) (G3098@symbol-macro G4003@x '(none line block))) (if (memv G3ffd@t '(file-options)) G3096@file-options-macro (if (memv G3ffd@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G307e@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3ffb@x)))))))))))))))))))))))))))))))))))))))) G3ffb@x) (error 'core-macro-transformer '"BUG: invalid macro" G3ffb@x))))) (set! G309c@local-macro-transformer (lambda (G4005@x) (car G4005@x))) (set! G309e@do-macro-call (lambda (G4007@transformer G4008@expr) ((lambda (G400b@out) (begin ((letrec ((G400d@f (lambda (G400f@x) (if (not (G2e0b@stx? G400f@x)) (if (pair? G400f@x) (begin (G400d@f (car G400f@x)) (G400d@f (cdr G400f@x))) (if (vector? G400f@x) (vector-for-each G400d@f G400f@x) (if (symbol? G400f@x) (G3179@syntax-violation '#f '"raw symbol encountered in output of macro" G4008@expr G400f@x) (void)))) (void))))) G400d@f) G400b@out) (G2e2d@add-mark (G2e23@gen-mark) G400b@out G4008@expr))) (G4007@transformer (G2e2d@add-mark G2e25@anti-mark G4008@expr '#f))))) (set! G30a0@chi-macro (lambda (G4011@p G4012@e) (G309e@do-macro-call (G309a@macro-transformer G4011@p) G4012@e))) (set! G30a2@chi-local-macro (lambda (G4015@p G4016@e) (G309e@do-macro-call (G309c@local-macro-transformer G4015@p) G4016@e))) (set! G30a4@chi-global-macro (lambda (G4019@p G401a@e) ((lambda (G401d@lib G401e@loc) (begin (G2c39@G2acf@visit-library G401d@lib) ((lambda (G4021@x) ((lambda (G4023@transformer) (G309e@do-macro-call G4023@transformer G401a@e)) (if (procedure? G4021@x) G4021@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G4021@x)))) (symbol-value G401e@loc)))) (car G4019@p) (cdr G4019@p)))) (set! G30a6@chi-expr* (lambda (G4025@e* G4026@r G4027@mr) (if (null? G4025@e*) '() ((lambda (G402b@e) (cons G402b@e (G30a6@chi-expr* (cdr G4025@e*) G4026@r G4027@mr))) (G30aa@chi-expr (car G4025@e*) G4026@r G4027@mr))))) (set! G30a8@chi-application (lambda (G402d@e G402e@r G402f@mr) ((lambda (G4033@t) ((lambda (G4035@ls/false) (if G4035@ls/false (apply (lambda (G4037@rator G4038@rands) ((lambda (G403b@rator) (cons G403b@rator (G30a6@chi-expr* G4038@rands G402e@r G402f@mr))) (G30aa@chi-expr G4037@rator G402e@r G402f@mr))) G4035@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G4033@t))) (G3086@syntax-dispatch G4033@t '(any . each-any)))) G402d@e))) (set! G30aa@chi-expr (lambda (G403d@e G403e@r G403f@mr) (call-with-values (lambda () (G2e6b@syntax-type G403d@e G403e@r)) (lambda (G4046@G4043 G4047@G4044 G4048@G4045) ((lambda (G404c@kwd G404d@value G404e@type) ((lambda (G4052@t) (if (memv G4052@t '(core-macro)) ((lambda (G4054@transformer) (G4054@transformer G403d@e G403e@r G403f@mr)) (G3094@core-macro-transformer G404d@value)) (if (memv G4052@t '(global)) ((lambda (G4056@lib) ((lambda (G4058@loc) ((lambda () (begin ((G30f5@inv-collector) G4056@lib) G4058@loc)))) (cdr G404d@value))) (car G404d@value)) (if (memv G4052@t '(core-prim)) ((lambda (G405a@name) (list 'primitive G405a@name)) G404d@value) (if (memv G4052@t '(call)) (G30a8@chi-application G403d@e G403e@r G403f@mr) (if (memv G4052@t '(lexical)) ((lambda (G405c@lex) G405c@lex) (G3016@lexical-var G404d@value)) (if (memv G4052@t '(global-macro global-macro!)) (G30aa@chi-expr (G30a4@chi-global-macro G404d@value G403d@e) G403e@r G403f@mr) (if (memv G4052@t '(local-macro local-macro!)) (G30aa@chi-expr (G30a2@chi-local-macro G404d@value G403d@e) G403e@r G403f@mr) (if (memv G4052@t '(macro macro!)) (G30aa@chi-expr (G30a0@chi-macro G404d@value G403d@e) G403e@r G403f@mr) (if (memv G4052@t '(constant)) ((lambda (G405e@datum) (list 'quote G405e@datum)) G404d@value) (if (memv G4052@t '(set!)) (G30ac@chi-set! G403d@e G403e@r G403f@mr) (if (memv G4052@t '(begin)) ((lambda (G4060@t) ((lambda (G4062@ls/false) (if G4062@ls/false (apply (lambda (G4064@x G4065@x*) (G2d9e@G2d0f@build-sequence '#f (G30a6@chi-expr* (cons G4064@x G4065@x*) G403e@r G403f@mr))) G4062@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G4060@t))) (G3086@syntax-dispatch G4060@t '(_ any . each-any)))) G403d@e) (if (memv G4052@t '(let-syntax letrec-syntax)) ((lambda (G4068@t) ((lambda (G406a@ls/false) (if (if G406a@ls/false (begin '#f (apply (lambda (G406c@xlhs* G406d@xrhs* G406e@xbody G406f@xbody*) (if (not (G2e4d@valid-bound-ids? G406c@xlhs*)) (G3179@syntax-violation '#f '"invalid identifiers" G403d@e) (void))) G406a@ls/false)) '#f) (apply (lambda (G4074@xlhs* G4075@xrhs* G4076@xbody G4077@xbody*) ((lambda (G407c@xlab*) ((lambda (G407e@xrib) ((lambda (G4080@xb*) ((lambda () (G2d9e@G2d0f@build-sequence '#f (G30a6@chi-expr* (map (lambda (G4082@x) (G2e2f@add-subst G407e@xrib G4082@x)) (cons G4076@xbody G4077@xbody*)) (append (map cons G407c@xlab* G4080@xb*) G403e@r) (append (map cons G407c@xlab* G4080@xb*) G403f@mr)))))) (map (lambda (G4084@x) (G2e8a@make-eval-transformer (G30e7@expand-transformer (if (eq? G404e@type 'let-syntax) G4084@x (G2e2f@add-subst G407e@xrib G4084@x)) G403f@mr))) G4075@xrhs*))) (G2dfc@make-full-rib G4074@xlhs* G407c@xlab*))) (map G2dbf@gen-label G4074@xlhs*))) G406a@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G4068@t))) (G3086@syntax-dispatch G4068@t '(_ #(each (any any)) any . each-any)))) G403d@e) (if (memv G4052@t '(displaced-lexical)) (G3179@syntax-violation '#f '"identifier out of context" G403d@e) (if (memv G4052@t '(syntax)) (G3179@syntax-violation '#f '"reference to pattern variable outside a syntax form" G403d@e) (if (memv G4052@t '(define define-syntax module import library)) (G3179@syntax-violation '#f (string-append ((lambda (G4086@t) (if (memv G4086@t '(define)) '"a definition" (if (memv G4086@t '(define-syntax)) '"a define-syntax" (if (memv G4086@t '(module)) '"a module definition" (if (memv G4086@t '(library)) '"a library definition" (if (memv G4086@t '(import)) '"an import declaration" (if (memv G4086@t '(export)) '"an export declaration" '"a non-expression"))))))) G404e@type) '" was found where an expression was expected") G403d@e) (if (memv G4052@t '(mutable)) (G3179@syntax-violation '#f '"attempt to reference an unexportable variable" G403d@e) (G3179@syntax-violation '#f '"invalid expression" G403d@e)))))))))))))))))) G404e@type)) G4048@G4045 G4047@G4044 G4046@G4043))))) (set! G30ac@chi-set! (lambda (G4088@e G4089@r G408a@mr) ((lambda (G408e@t) ((lambda (G4090@ls/false) (if (if G4090@ls/false (begin '#f (apply (lambda (G4092@x G4093@v) (G2e43@id? G4092@x)) G4090@ls/false)) '#f) (apply (lambda (G4096@x G4097@v) (call-with-values (lambda () (G2e6b@syntax-type G4096@x G4089@r)) (lambda (G409d@G409a G409e@G409b G409f@G409c) ((lambda (G40a3@kwd G40a4@value G40a5@type) ((lambda (G40a9@t) (if (memv G40a9@t '(lexical)) (begin (G301a@set-lexical-mutable! G40a4@value '#t) (list 'set! (G3016@lexical-var G40a4@value) (G30aa@chi-expr G4097@v G4089@r G408a@mr))) (if (memv G40a9@t '(core-prim)) (G3179@syntax-violation '#f '"cannot modify imported core primitive" G4088@e) (if (memv G40a9@t '(global)) (G3179@syntax-violation '#f '"attempt to modify imported binding" G4088@e) (if (memv G40a9@t '(global-macro!)) (G30aa@chi-expr (G30a4@chi-global-macro G40a4@value G4088@e) G4089@r G408a@mr) (if (memv G40a9@t '(local-macro!)) (G30aa@chi-expr (G30a2@chi-local-macro G40a4@value G4088@e) G4089@r G408a@mr) (if (memv G40a9@t '(mutable)) (G3179@syntax-violation '#f '"attempt to assign to an unexportable variable" G4088@e) (G3179@syntax-violation '#f '"invalid syntax" G4088@e)))))))) G40a5@type)) G409f@G409c G409e@G409b G409d@G409a)))) G4090@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G408e@t))) (G3086@syntax-dispatch G408e@t '(_ any any)))) G4088@e))) (set! G30ae@verify-formals (lambda (G40ab@fmls G40ac@stx) ((lambda (G40af@t) ((lambda (G40b1@ls/false) (if G40b1@ls/false (apply (lambda (G40b3@x*) (if (not (G2e4d@valid-bound-ids? G40b3@x*)) (G3040@invalid-fmls-error G40ac@stx G40ab@fmls) (void))) G40b1@ls/false) ((lambda (G40b5@t) ((lambda (G40b7@ls/false) (if G40b7@ls/false (apply (lambda (G40b9@x* G40ba@x) (if (not (G2e4d@valid-bound-ids? (cons G40ba@x G40b9@x*))) (G3040@invalid-fmls-error G40ac@stx G40ab@fmls) (void))) G40b7@ls/false) ((lambda (G40bd@t) ((lambda (G40bf@ls/false) (if G40bf@ls/false (apply (lambda () (G3179@syntax-violation '#f '"invalid syntax" G40ac@stx)) G40bf@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G40bd@t))) (G3086@syntax-dispatch G40bd@t '_))) G40b5@t))) (G3086@syntax-dispatch G40b5@t '#(each+ any () any)))) G40af@t))) (G3086@syntax-dispatch G40af@t 'each-any))) G40ab@fmls))) (set! G30b0@chi-lambda-clause (lambda (G40c1@stx G40c2@fmls G40c3@body* G40c4@r G40c5@mr) ((lambda (G40cb@t) ((lambda (G40cd@ls/false) (if G40cd@ls/false (apply (lambda (G40cf@x*) (begin (G30ae@verify-formals G40c2@fmls G40c1@stx) ((lambda (G40d1@lex* G40d2@lab*) (values G40d1@lex* (G30c0@chi-internal (G2e2f@add-subst (G2dfc@make-full-rib G40cf@x* G40d2@lab*) G40c3@body*) (G301e@add-lexicals G40d2@lab* G40d1@lex* G40c4@r) G40c5@mr))) (map G2dbb@gen-lexical G40cf@x*) (map G2dbf@gen-label G40cf@x*)))) G40cd@ls/false) ((lambda (G40d5@t) ((lambda (G40d7@ls/false) (if G40d7@ls/false (apply (lambda (G40d9@x* G40da@x) (begin (G30ae@verify-formals G40c2@fmls G40c1@stx) ((lambda (G40dd@lex* G40de@lab* G40df@lex G40e0@lab) (values (append G40dd@lex* G40df@lex) (G30c0@chi-internal (G2e2f@add-subst (G2dfc@make-full-rib (cons G40da@x G40d9@x*) (cons G40e0@lab G40de@lab*)) G40c3@body*) (G301e@add-lexicals (cons G40e0@lab G40de@lab*) (cons G40df@lex G40dd@lex*) G40c4@r) G40c5@mr))) (map G2dbb@gen-lexical G40d9@x*) (map G2dbf@gen-label G40d9@x*) (G2dbb@gen-lexical G40da@x) (G2dbf@gen-label G40da@x)))) G40d7@ls/false) ((lambda (G40e5@t) ((lambda (G40e7@ls/false) (if G40e7@ls/false (apply (lambda () (G3179@syntax-violation '#f '"invalid syntax" G40c2@fmls)) G40e7@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G40e5@t))) (G3086@syntax-dispatch G40e5@t '_))) G40d5@t))) (G3086@syntax-dispatch G40d5@t '#(each+ any () any)))) G40cb@t))) (G3086@syntax-dispatch G40cb@t 'each-any))) G40c2@fmls))) (set! G30b2@chi-lambda-clause* (lambda (G40e9@stx G40ea@fmls* G40eb@body** G40ec@r G40ed@mr) (if (null? G40ea@fmls*) (values '() '()) (call-with-values (lambda () (G30b0@chi-lambda-clause G40e9@stx (car G40ea@fmls*) (car G40eb@body**) G40ec@r G40ed@mr)) (lambda (G40f5@G40f3 G40f6@G40f4) ((lambda (G40f9@b G40fa@a) (call-with-values (lambda () (G30b2@chi-lambda-clause* G40e9@stx (cdr G40ea@fmls*) (cdr G40eb@body**) G40ec@r G40ed@mr)) (lambda (G40ff@G40fd G4100@G40fe) ((lambda (G4103@b* G4104@a*) (values (cons G40fa@a G4104@a*) (cons G40f9@b G4103@b*))) G4100@G40fe G40ff@G40fd)))) G40f6@G40f4 G40f5@G40f3)))))) (set! G30b4@chi-defun (lambda (G4107@x G4108@r G4109@mr) ((lambda (G410d@fmls G410e@body*) (call-with-values (lambda () (G30b0@chi-lambda-clause G410d@fmls G410d@fmls G410e@body* G4108@r G4109@mr)) (lambda (G4113@G4111 G4114@G4112) ((lambda (G4117@body G4118@fmls) (G2d9b@G2cc3@build-lambda '#f G4118@fmls G4117@body)) G4114@G4112 G4113@G4111)))) (car G4107@x) (cdr G4107@x)))) (set! G30b6@chi-rhs (lambda (G411b@rhs G411c@r G411d@mr) ((lambda (G4121@t) (if (memv G4121@t '(defun)) (G30b4@chi-defun (cdr G411b@rhs) G411c@r G411d@mr) (if (memv G4121@t '(expr)) ((lambda (G4123@expr) (G30aa@chi-expr G4123@expr G411c@r G411d@mr)) (cdr G411b@rhs)) (if (memv G4121@t '(top-expr)) ((lambda (G4125@expr) (G2d9e@G2d0f@build-sequence '#f (list (G30aa@chi-expr G4125@expr G411c@r G411d@mr) (G2d9f@G2d11@build-void)))) (cdr G411b@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G411b@rhs))))) (car G411b@rhs)))) (set! G30b8@expand-interaction-rhs*/init* (lambda (G4127@lhs* G4128@rhs* G4129@init* G412a@r G412b@mr) ((letrec ((G4131@f (lambda (G4133@lhs* G4134@rhs*) (if (null? G4133@lhs*) (map (lambda (G4137@x) (G30aa@chi-expr G4137@x G412a@r G412b@mr)) G4129@init*) ((lambda (G4139@lhs G413a@rhs) ((lambda (G413d@t) (if (memv G413d@t '(defun)) ((lambda (G413f@rhs) (cons (list 'set! G4139@lhs G413f@rhs) (G4131@f (cdr G4133@lhs*) (cdr G4134@rhs*)))) (G30b4@chi-defun (cdr G413a@rhs) G412a@r G412b@mr)) (if (memv G413d@t '(expr)) ((lambda (G4141@rhs) (cons (list 'set! G4139@lhs G4141@rhs) (G4131@f (cdr G4133@lhs*) (cdr G4134@rhs*)))) (G30aa@chi-expr (cdr G413a@rhs) G412a@r G412b@mr)) (if (memv G413d@t '(top-expr)) ((lambda (G4143@e) (cons G4143@e (G4131@f (cdr G4133@lhs*) (cdr G4134@rhs*)))) (G30aa@chi-expr (cdr G413a@rhs) G412a@r G412b@mr)) (error 'expand-interaction '"invallid" G413a@rhs))))) (car G413a@rhs))) (car G4133@lhs*) (car G4134@rhs*)))))) G4131@f) G4127@lhs* G4128@rhs*))) (set! G30ba@chi-rhs* (lambda (G4145@rhs* G4146@r G4147@mr) ((letrec ((G414b@f (lambda (G414d@ls) (if (null? G414d@ls) '() ((lambda (G414f@a) (cons G414f@a (G414b@f (cdr G414d@ls)))) (G30b6@chi-rhs (car G414d@ls) G4146@r G4147@mr)))))) G414b@f) G4145@rhs*))) (set! G30bc@find-bound=? (lambda (G4151@x G4152@lhs* G4153@rhs*) (if (null? G4152@lhs*) '#f (if (G2e49@bound-id=? G4151@x (car G4152@lhs*)) (car G4153@rhs*) (G30bc@find-bound=? G4151@x (cdr G4152@lhs*) (cdr G4153@rhs*)))))) (set! G30be@find-dups (lambda (G4157@ls) ((letrec ((G4159@f (lambda (G415b@ls G415c@dups) (if (null? G415b@ls) G415c@dups ((lambda (G415f@t) (if G415f@t ((lambda (G4161@x) (G4159@f (cdr G415b@ls) (cons (list (car G415b@ls) G4161@x) G415c@dups))) G415f@t) (G4159@f (cdr G415b@ls) G415c@dups))) (G30bc@find-bound=? (car G415b@ls) (cdr G415b@ls) (cdr G415b@ls))))))) G4159@f) G4157@ls '()))) (set! G30c0@chi-internal (lambda (G4163@e* G4164@r G4165@mr) ((lambda (G4169@rib) (call-with-values (lambda () (G30e5@chi-body* (map (lambda (G4173@x) (G2e2f@add-subst G4169@rib G4173@x)) (G2e41@syntax->list G4163@e*)) G4164@r G4165@mr '() '() '() '() '() G4169@rib '#f)) (lambda (G4175@G416b G4176@G416c G4177@G416d G4178@G416e G4179@G416f G417a@G4170 G417b@G4171 G417c@G4172) ((lambda (G4185@_exp* G4186@kwd* G4187@mod** G4188@rhs* G4189@lex* G418a@mr G418b@r G418c@e*) (begin (if (null? G418c@e*) (G3179@syntax-violation '#f '"no expression in body" G418c@e*) (void)) ((lambda (G4195@init*) ((lambda (G4197@rhs*) ((lambda () (G2da1@G2d15@build-letrec* '#f (reverse G4189@lex*) (reverse G4197@rhs*) (G2d9e@G2d0f@build-sequence '#f G4195@init*))))) (G30ba@chi-rhs* G4188@rhs* G418b@r G418a@mr))) (G30a6@chi-expr* (append (apply append (reverse G4187@mod**)) G418c@e*) G418b@r G418a@mr)))) G417c@G4172 G417b@G4171 G417a@G4170 G4179@G416f G4178@G416e G4177@G416d G4176@G416c G4175@G416b)))) (G2dec@make-empty-rib)))) (set! G30c2@parse-module (lambda (G4199@e) ((lambda (G419b@t) ((lambda (G419d@ls/false) (if G419d@ls/false (apply (lambda (G419f@export* G41a0@b*) (begin (if (not (for-all G2e43@id? G419f@export*)) (G3179@syntax-violation '#f '"module exports must be identifiers" G4199@e) (void)) (values '#f (list->vector G419f@export*) G41a0@b*))) G419d@ls/false) ((lambda (G41a3@t) ((lambda (G41a5@ls/false) (if G41a5@ls/false (apply (lambda (G41a7@name G41a8@export* G41a9@b*) (begin (if (not (G2e43@id? G41a7@name)) (G3179@syntax-violation '#f '"module name must be an identifier" G4199@e) (void)) (if (not (for-all G2e43@id? G41a8@export*)) (G3179@syntax-violation '#f '"module exports must be identifiers" G4199@e) (void)) (values G41a7@name (list->vector G41a8@export*) G41a9@b*))) G41a5@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G41a3@t))) (G3086@syntax-dispatch G41a3@t '(_ any each-any . each-any)))) G419b@t))) (G3086@syntax-dispatch G419b@t '(_ each-any . each-any)))) G4199@e))) (set! G30c8@G30c3 (make-record-type-descriptor 'module-interface '#f 'G30c6 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G30ca@G30c5 '#f) (set! G30cc@G30c4 (make-record-constructor-descriptor G30c8@G30c3 '#f G30ca@G30c5)) (set! G30d1@module-interface? (record-predicate G30c8@G30c3)) (set! G30d3@make-module-interface (record-constructor G30cc@G30c4)) (set! G30d5@module-interface-first-mark (record-accessor G30c8@G30c3 '0)) (set! G30d7@module-interface-exp-id-vec (record-accessor G30c8@G30c3 '1)) (set! G30d9@module-interface-exp-lab-vec (record-accessor G30c8@G30c3 '2)) (set! G30db@set-module-interface-first-mark! (record-mutator G30c8@G30c3 '0)) (set! G30dd@set-module-interface-exp-id-vec! (record-mutator G30c8@G30c3 '1)) (set! G30df@set-module-interface-exp-lab-vec! (record-mutator G30c8@G30c3 '2)) (set! G30e1@module-interface-exp-id* (lambda (G41ad@iface G41ae@id) ((lambda (G41b2@diff-marks) (begin (set! G41b2@diff-marks (lambda (G41b9@ls G41ba@x) (begin (if (null? G41b9@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G41bd@a) (if (eq? G41bd@a G41ba@x) '() (cons G41bd@a (G41b2@diff-marks (cdr G41b9@ls) G41ba@x)))) (car G41b9@ls))))) ((lambda (G41b3@diff G41b4@id-vec) (if (null? G41b3@diff) G41b4@id-vec (vector-map (lambda (G41b7@x) (G2e0d@make-stx (G2e0f@stx-expr G41b7@x) (append G41b3@diff (G2e11@stx-mark* G41b7@x)) '() '())) G41b4@id-vec))) (G41b2@diff-marks (G2e11@stx-mark* G41ae@id) (G30d5@module-interface-first-mark G41ad@iface)) (G30d7@module-interface-exp-id-vec G41ad@iface)))) '#f))) (set! G30e3@chi-internal-module (lambda (G41bf@e G41c0@r G41c1@mr G41c2@lex* G41c3@rhs* G41c4@mod** G41c5@kwd*) (call-with-values (lambda () (G30c2@parse-module G41bf@e)) (lambda (G41d0@G41cd G41d1@G41ce G41d2@G41cf) ((lambda (G41d6@e* G41d7@exp-id* G41d8@name) ((lambda (G41dc@rib) ((lambda (G41de@e*) ((lambda () (call-with-values (lambda () (G30e5@chi-body* G41de@e* G41c0@r G41c1@mr G41c2@lex* G41c3@rhs* G41c4@mod** G41c5@kwd* '() G41dc@rib '#f)) (lambda (G41e8@G41e0 G41e9@G41e1 G41ea@G41e2 G41eb@G41e3 G41ec@G41e4 G41ed@G41e5 G41ee@G41e6 G41ef@G41e7) ((lambda (G41f8@_exp* G41f9@kwd* G41fa@mod** G41fb@rhs* G41fc@lex* G41fd@mr G41fe@r G41ff@e*) ((lambda (G4208@exp-lab* G4209@mod**) (if (not G41d8@name) (values G41fc@lex* G41fb@rhs* G41d7@exp-id* G4208@exp-lab* G41fe@r G41fd@mr G4209@mod** G41f9@kwd*) ((lambda (G420c@lab G420d@iface) (values G41fc@lex* G41fb@rhs* (vector G41d8@name) (vector G420c@lab) (cons (cons G420c@lab (cons '$module G420d@iface)) G41fe@r) (cons (cons G420c@lab (cons '$module G420d@iface)) G41fd@mr) G4209@mod** G41f9@kwd*)) (G2dbf@gen-label 'module) (G30d3@make-module-interface (car (G2e11@stx-mark* G41d8@name)) (vector-map (lambda (G4210@x) (G2e0d@make-stx (G2e0f@stx-expr G4210@x) (G2e11@stx-mark* G4210@x) '() '())) G41d7@exp-id*) G4208@exp-lab*)))) (vector-map (lambda (G4212@x) ((lambda (G4214@t) (if G4214@t G4214@t (begin '#f (G3179@syntax-violation '#f '"cannot find module export" G4212@x)))) (G2e5d@id->label (G2e0d@make-stx (G2e45@id->sym G4212@x) (G2e11@stx-mark* G4212@x) (list G41dc@rib) '())))) G41d7@exp-id*) (cons G41ff@e* G41fa@mod**))) G41ef@G41e7 G41ee@G41e6 G41ed@G41e5 G41ec@G41e4 G41eb@G41e3 G41ea@G41e2 G41e9@G41e1 G41e8@G41e0)))))) (map (lambda (G4216@x) (G2e2f@add-subst G41dc@rib G4216@x)) (G2e41@syntax->list G41d6@e*)))) (G2dec@make-empty-rib))) G41d2@G41cf G41d1@G41ce G41d0@G41cd))))) (set! G30e5@chi-body* (lambda (G4218@e* G4219@r G421a@mr G421b@lex* G421c@rhs* G421d@mod** G421e@kwd* G421f@exp* G4220@rib G4221@top?) (if (null? G4218@e*) (values G4218@e* G4219@r G421a@mr G421b@lex* G421c@rhs* G421d@mod** G421e@kwd* G421f@exp*) ((lambda (G422c@e) (call-with-values (lambda () (G2e6b@syntax-type G422c@e G4219@r)) (lambda (G4231@G422e G4232@G422f G4233@G4230) ((lambda (G4237@kwd G4238@value G4239@type) ((lambda (G423d@kwd*) ((lambda (G423f@t) (if (memv G423f@t '(define)) (call-with-values (lambda () (G300e@parse-define G422c@e)) (lambda (G4243@G4241 G4244@G4242) ((lambda (G4247@rhs G4248@id) (begin (if (G2e51@bound-id-member? G4248@id G423d@kwd*) (G3179@syntax-violation '#f '"cannot redefine keyword" G422c@e) (void)) (call-with-values (lambda () (G2dc3@gen-define-label+loc G4248@id G4220@rib)) (lambda (G424d@G424b G424e@G424c) ((lambda (G4251@lex G4252@lab) (begin (G2df2@extend-rib! G4220@rib G4248@id G4252@lab) (G30e5@chi-body* (cdr G4218@e*) (G301c@add-lexical G4252@lab G4251@lex G4219@r) G421a@mr (cons G4251@lex G421b@lex*) (cons G4247@rhs G421c@rhs*) G421d@mod** G423d@kwd* G421f@exp* G4220@rib G4221@top?))) G424e@G424c G424d@G424b))))) G4244@G4242 G4243@G4241))) (if (memv G423f@t '(define-syntax)) (call-with-values (lambda () (G3010@parse-define-syntax G422c@e)) (lambda (G4257@G4255 G4258@G4256) ((lambda (G425b@rhs G425c@id) (begin (if (G2e51@bound-id-member? G425c@id G423d@kwd*) (G3179@syntax-violation '#f '"cannot redefine keyword" G422c@e) (void)) ((lambda (G425f@lab G4260@expanded-rhs) (begin (G2df2@extend-rib! G4220@rib G425c@id G425f@lab) ((lambda (G4263@b) (G30e5@chi-body* (cdr G4218@e*) (cons (cons G425f@lab G4263@b) G4219@r) (cons (cons G425f@lab G4263@b) G421a@mr) G421b@lex* G421c@rhs* G421d@mod** G423d@kwd* G421f@exp* G4220@rib G4221@top?)) (G2e8a@make-eval-transformer G4260@expanded-rhs)))) (G2dc5@gen-define-label G425c@id G4220@rib) (G30e7@expand-transformer G425b@rhs G421a@mr)))) G4258@G4256 G4257@G4255))) (if (memv G423f@t '(let-syntax letrec-syntax)) ((lambda (G4265@t) ((lambda (G4267@ls/false) (if (if G4267@ls/false (begin '#f (apply (lambda (G4269@xlhs* G426a@xrhs* G426b@xbody*) (if (not (G2e4d@valid-bound-ids? G4269@xlhs*)) (G3179@syntax-violation '#f '"invalid identifiers" G422c@e) (void))) G4267@ls/false)) '#f) (apply (lambda (G426f@xlhs* G4270@xrhs* G4271@xbody*) ((lambda (G4275@xlab*) ((lambda (G4277@xrib) ((lambda (G4279@xb*) ((lambda () (G30e5@chi-body* (append (map (lambda (G427b@x) (G2e2f@add-subst G4277@xrib G427b@x)) G4271@xbody*) (cdr G4218@e*)) (append (map cons G4275@xlab* G4279@xb*) G4219@r) (append (map cons G4275@xlab* G4279@xb*) G421a@mr) G421b@lex* G421c@rhs* G421d@mod** G423d@kwd* G421f@exp* G4220@rib G4221@top?)))) (map (lambda (G427d@x) (G2e8a@make-eval-transformer (G30e7@expand-transformer (if (eq? G4239@type 'let-syntax) G427d@x (G2e2f@add-subst G4277@xrib G427d@x)) G421a@mr))) G4270@xrhs*))) (G2dfc@make-full-rib G426f@xlhs* G4275@xlab*))) (map G2dbf@gen-label G426f@xlhs*))) G4267@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G4265@t))) (G3086@syntax-dispatch G4265@t '(_ #(each (any any)) . each-any)))) G422c@e) (if (memv G423f@t '(begin)) ((lambda (G427f@t) ((lambda (G4281@ls/false) (if G4281@ls/false (apply (lambda (G4283@x*) (G30e5@chi-body* (append G4283@x* (cdr G4218@e*)) G4219@r G421a@mr G421b@lex* G421c@rhs* G421d@mod** G423d@kwd* G421f@exp* G4220@rib G4221@top?)) G4281@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G427f@t))) (G3086@syntax-dispatch G427f@t '(_ . each-any)))) G422c@e) (if (memv G423f@t '(global-macro global-macro!)) (G30e5@chi-body* (cons (G2e2f@add-subst G4220@rib (G30a4@chi-global-macro G4238@value G422c@e)) (cdr G4218@e*)) G4219@r G421a@mr G421b@lex* G421c@rhs* G421d@mod** G423d@kwd* G421f@exp* G4220@rib G4221@top?) (if (memv G423f@t '(local-macro local-macro!)) (G30e5@chi-body* (cons (G2e2f@add-subst G4220@rib (G30a2@chi-local-macro G4238@value G422c@e)) (cdr G4218@e*)) G4219@r G421a@mr G421b@lex* G421c@rhs* G421d@mod** G423d@kwd* G421f@exp* G4220@rib G4221@top?) (if (memv G423f@t '(macro macro!)) (G30e5@chi-body* (cons (G2e2f@add-subst G4220@rib (G30a0@chi-macro G4238@value G422c@e)) (cdr G4218@e*)) G4219@r G421a@mr G421b@lex* G421c@rhs* G421d@mod** G423d@kwd* G421f@exp* G4220@rib G4221@top?) (if (memv G423f@t '(module)) (call-with-values (lambda () (G30e3@chi-internal-module G422c@e G4219@r G421a@mr G421b@lex* G421c@rhs* G421d@mod** G423d@kwd*)) (lambda (G428d@G4285 G428e@G4286 G428f@G4287 G4290@G4288 G4291@G4289 G4292@G428a G4293@G428b G4294@G428c) ((lambda (G429d@kwd* G429e@mod** G429f@mr G42a0@r G42a1@m-exp-lab* G42a2@m-exp-id* G42a3@rhs* G42a4@lex*) (begin (vector-for-each (lambda (G42ad@id G42ae@lab) (G2df2@extend-rib! G4220@rib G42ad@id G42ae@lab)) G42a2@m-exp-id* G42a1@m-exp-lab*) (G30e5@chi-body* (cdr G4218@e*) G42a0@r G429f@mr G42a4@lex* G42a3@rhs* G429e@mod** G429d@kwd* G421f@exp* G4220@rib G4221@top?))) G4294@G428c G4293@G428b G4292@G428a G4291@G4289 G4290@G4288 G428f@G4287 G428e@G4286 G428d@G4285))) (if (memv G423f@t '(library)) (begin (G3159@library-expander (G2e59@stx->datum G422c@e)) (G30e5@chi-body* (cdr G4218@e*) G4219@r G421a@mr G421b@lex* G421c@rhs* G421d@mod** G423d@kwd* G421f@exp* G4220@rib G4221@top?)) (if (memv G423f@t '(export)) ((lambda (G42b1@t) ((lambda (G42b3@ls/false) (if G42b3@ls/false (apply (lambda (G42b5@exp-decl*) (G30e5@chi-body* (cdr G4218@e*) G4219@r G421a@mr G421b@lex* G421c@rhs* G421d@mod** G423d@kwd* (append G42b5@exp-decl* G421f@exp*) G4220@rib G4221@top?)) G42b3@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G42b1@t))) (G3086@syntax-dispatch G42b1@t '(_ . each-any)))) G422c@e) (if (memv G423f@t '(import)) ((lambda () ((lambda (G42b8@module-import? G42ba@module-import G42bc@library-import) (begin (set! G42b8@module-import? (lambda (G4304@e) ((lambda (G4306@t) ((lambda (G4308@ls/false) (if (if G4308@ls/false (begin '#f (apply (lambda (G430a@id) (G2e43@id? G430a@id)) G4308@ls/false)) '#f) (apply (lambda (G430c@id) '#t) G4308@ls/false) ((lambda (G430e@t) ((lambda (G4310@ls/false) (if G4310@ls/false (apply (lambda (G4312@imp*) '#f) G4310@ls/false) ((lambda (G4314@t) ((lambda (G4316@ls/false) (if G4316@ls/false (apply (lambda () (G3179@syntax-violation '#f '"malformed import form" G4304@e)) G4316@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G4314@t))) (G3086@syntax-dispatch G4314@t '_))) G430e@t))) (G3086@syntax-dispatch G430e@t '(_ . each-any)))) G4306@t))) (G3086@syntax-dispatch G4306@t '(_ any)))) G4304@e))) (set! G42ba@module-import (lambda (G42e5@e G42e6@r) ((lambda (G42e9@t) ((lambda (G42eb@ls/false) (if (if G42eb@ls/false (begin '#f (apply (lambda (G42ed@id) (G2e43@id? G42ed@id)) G42eb@ls/false)) '#f) (apply (lambda (G42ef@id) (call-with-values (lambda () (G2e6b@syntax-type G42ef@id G42e6@r)) (lambda (G42f4@G42f1 G42f5@G42f2 G42f6@G42f3) ((lambda (G42fa@kwd G42fb@value G42fc@type) ((lambda (G4300@t) (if (memv G4300@t '($module)) ((lambda (G4302@iface) (values (G30e1@module-interface-exp-id* G4302@iface G42ef@id) (G30d9@module-interface-exp-lab-vec G4302@iface))) G42fb@value) (G3179@syntax-violation '#f '"invalid import" G42e5@e))) G42fc@type)) G42f6@G42f3 G42f5@G42f2 G42f4@G42f1)))) G42eb@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G42e9@t))) (G3086@syntax-dispatch G42e9@t '(_ any)))) G42e5@e))) (set! G42bc@library-import (lambda (G42cb@e) ((lambda (G42cd@t) ((lambda (G42cf@ls/false) (if G42cf@ls/false (apply (lambda (G42d1@ctxt G42d2@imp*) (call-with-values (lambda () (G30ef@parse-import-spec* (G317f@syntax->datum G42d2@imp*))) (lambda (G42d7@G42d5 G42d8@G42d6) ((lambda (G42db@subst-labels G42dc@subst-names) (values (vector-map (lambda (G42df@name) (G2e21@datum->stx G42d1@ctxt G42df@name)) G42dc@subst-names) G42db@subst-labels)) G42d8@G42d6 G42d7@G42d5)))) G42cf@ls/false) ((lambda (G42e1@t) ((lambda (G42e3@ls/false) (if G42e3@ls/false (apply (lambda () (G3179@syntax-violation '#f '"invalid import form" G42cb@e)) G42e3@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G42e1@t))) (G3086@syntax-dispatch G42e1@t '_))) G42cd@t))) (G3086@syntax-dispatch G42cd@t '(any . each-any)))) G42cb@e))) (begin (call-with-values (lambda () (if (G42b8@module-import? G422c@e) (G42ba@module-import G422c@e G4219@r) (G42bc@library-import G422c@e))) (lambda (G42bf@G42bd G42c0@G42be) ((lambda (G42c3@lab* G42c4@id*) (vector-for-each (lambda (G42c7@id G42c8@lab) (G2df2@extend-rib! G4220@rib G42c7@id G42c8@lab)) G42c4@id* G42c3@lab*)) G42c0@G42be G42bf@G42bd))) (G30e5@chi-body* (cdr G4218@e*) G4219@r G421a@mr G421b@lex* G421c@rhs* G421d@mod** G423d@kwd* G421f@exp* G4220@rib G4221@top?)))) '#f '#f '#f))) (if G4221@top? (G30e5@chi-body* (cdr G4218@e*) G4219@r G421a@mr (cons (G2dbb@gen-lexical 'dummy) G421b@lex*) (cons (cons 'top-expr G422c@e) G421c@rhs*) G421d@mod** G423d@kwd* G421f@exp* G4220@rib G4221@top?) (values G4218@e* G4219@r G421a@mr G421b@lex* G421c@rhs* G421d@mod** G423d@kwd* G421f@exp*)))))))))))))) G4239@type)) (if (G2e43@id? G4237@kwd) (cons G4237@kwd G421e@kwd*) G421e@kwd*))) G4233@G4230 G4232@G422f G4231@G422e)))) (car G4218@e*))))) (set! G30e7@expand-transformer (lambda (G4318@expr G4319@r) ((lambda (G431c@rtc) ((lambda (G431e@expanded-rhs) (begin (for-each ((lambda (G4320@mark-visit) (lambda (G4322@x) (begin (G2c38@G2acd@invoke-library G4322@x) (G4320@mark-visit G4322@x)))) (G30f7@vis-collector)) (G431c@rtc)) G431e@expanded-rhs)) ((lambda (G4328@G4324@inv-collector G4329@G4325@vis-collector G432a@G4326@inv-collector G432b@G4327@vis-collector) ((lambda (G4330@swap) (dynamic-wind G4330@swap (lambda () (G30aa@chi-expr G4318@expr G4319@r G4319@r)) G4330@swap)) (lambda () (begin ((lambda (G4332@t) (begin (G4328@G4324@inv-collector G432a@G4326@inv-collector) (set! G432a@G4326@inv-collector G4332@t))) (G4328@G4324@inv-collector)) ((lambda (G4334@t) (begin (G4329@G4325@vis-collector G432b@G4327@vis-collector) (set! G432b@G4327@vis-collector G4334@t))) (G4329@G4325@vis-collector)))))) G30f5@inv-collector G30f7@vis-collector G431c@rtc (lambda (G4336@x) (values))))) (G30f3@make-collector)))) (set! G30e9@parse-exports (lambda (G4338@exp*) ((letrec ((G433a@f (lambda (G433c@exp* G433d@int* G433e@ext*) (if (null? G433c@exp*) (begin (if (not (G2e4d@valid-bound-ids? G433e@ext*)) (G3179@syntax-violation 'export '"invalid exports" (G30be@find-dups G433e@ext*)) (void)) (values (map G317f@syntax->datum G433e@ext*) G433d@int*)) ((lambda (G4342@t) ((lambda (G4344@ls/false) (if G4344@ls/false (apply (lambda (G4346@rename G4347@i* G4348@e*) (begin (if (not (if (eq? (G317f@syntax->datum G4346@rename) 'rename) (if (for-all G2e43@id? G4347@i*) (begin '#f (for-all G2e43@id? G4348@e*)) '#f) '#f)) (G3179@syntax-violation 'export '"invalid export specifier" (car G433c@exp*)) (void)) (G433a@f (cdr G433c@exp*) (append G4347@i* G433d@int*) (append G4348@e* G433e@ext*)))) G4344@ls/false) ((lambda (G434c@t) ((lambda (G434e@ls/false) (if G434e@ls/false (apply (lambda (G4350@ie) (begin (if (not (G2e43@id? G4350@ie)) (G3179@syntax-violation 'export '"invalid export" G4350@ie) (void)) (G433a@f (cdr G433c@exp*) (cons G4350@ie G433d@int*) (cons G4350@ie G433e@ext*)))) G434e@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G434c@t))) (G3086@syntax-dispatch G434c@t 'any))) G4342@t))) (G3086@syntax-dispatch G4342@t '(any . #(each (any any)))))) (car G433c@exp*)))))) G433a@f) G4338@exp* '() '()))) (set! G30eb@parse-library-name (lambda (G4352@spec) ((lambda (G4355@parse) (begin (set! G4355@parse (lambda (G4360@x) ((lambda (G4362@t) ((lambda (G4364@ls/false) (if (if G4364@ls/false (begin '#f (apply (lambda (G4366@v*) (for-all (lambda (G4368@x) ((lambda (G436a@x) (if (integer? G436a@x) (begin '#f (exact? G436a@x)) '#f)) (G317f@syntax->datum G4368@x))) G4366@v*)) G4364@ls/false)) '#f) (apply (lambda (G436c@v*) (values '() (map G317f@syntax->datum G436c@v*))) G4364@ls/false) ((lambda (G436e@t) ((lambda (G4370@ls/false) (if (if G4370@ls/false (begin '#f (apply (lambda (G4372@x G4373@rest) (symbol? (G317f@syntax->datum G4372@x))) G4370@ls/false)) '#f) (apply (lambda (G4376@x G4377@rest) (call-with-values (lambda () (G4355@parse G4377@rest)) (lambda (G437c@G437a G437d@G437b) ((lambda (G4380@v* G4381@x*) (values (cons (G317f@syntax->datum G4376@x) G4381@x*) G4380@v*)) G437d@G437b G437c@G437a)))) G4370@ls/false) ((lambda (G4384@t) ((lambda (G4386@ls/false) (if G4386@ls/false (apply (lambda () (values '() '())) G4386@ls/false) ((lambda (G4388@t) ((lambda (G438a@ls/false) (if G438a@ls/false (apply (lambda () (G3179@syntax-violation '#f '"invalid library name" G4352@spec)) G438a@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G4388@t))) (G3086@syntax-dispatch G4388@t '_))) G4384@t))) (G3086@syntax-dispatch G4384@t '()))) G436e@t))) (G3086@syntax-dispatch G436e@t '(any . any)))) G4362@t))) (G3086@syntax-dispatch G4362@t '(each-any)))) G4360@x))) (call-with-values (lambda () (G4355@parse G4352@spec)) (lambda (G4358@G4356 G4359@G4357) ((lambda (G435c@ver* G435d@name*) (begin (if (null? G435d@name*) (G3179@syntax-violation '#f '"empty library name" G4352@spec) (void)) (values G435d@name* G435c@ver*))) G4359@G4357 G4358@G4356))))) '#f))) (set! G30ed@parse-library (lambda (G438c@e) ((lambda (G438e@t) ((lambda (G4390@ls/false) (if (if G4390@ls/false (begin '#f (apply (lambda (G4392@library G4393@name* G4394@export G4395@exp* G4396@import G4397@imp* G4398@b*) (if (eq? (G317f@syntax->datum G4394@export) 'export) (if (eq? (G317f@syntax->datum G4396@import) 'import) (begin '#f (eq? (G317f@syntax->datum G4392@library) 'library)) '#f) '#f)) G4390@ls/false)) '#f) (apply (lambda (G43a0@library G43a1@name* G43a2@export G43a3@exp* G43a4@import G43a5@imp* G43a6@b*) (values G43a1@name* G43a3@exp* G43a5@imp* G43a6@b*)) G4390@ls/false) ((lambda (G43ae@t) ((lambda (G43b0@ls/false) (if G43b0@ls/false (apply (lambda () (G3179@syntax-violation '#f '"malformed library" G438c@e)) G43b0@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G43ae@t))) (G3086@syntax-dispatch G43ae@t '_))) G438e@t))) (G3086@syntax-dispatch G438e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G438c@e))) (set! G30ef@parse-import-spec* ((lambda () ((lambda (G43b3@idsyn? G43b5@dup-error G43b7@merge-substs G43b9@exclude* G43bb@find* G43bd@rem* G43bf@remove-dups G43c1@parse-library-name G43c3@import-library G43c5@get-import G43c7@add-imports!) (begin (set! G43b3@idsyn? (lambda (G45b2@x) (symbol? (G317f@syntax->datum G45b2@x)))) (set! G43b5@dup-error (lambda (G45b0@name) (G3179@syntax-violation 'import '"two imports with different bindings" G45b0@name))) (set! G43b7@merge-substs (lambda (G459e@s G459f@subst) ((lambda (G45a3@insert-to-subst) (begin (set! G45a3@insert-to-subst (lambda (G45a4@a G45a5@subst) ((lambda (G45a8@name G45a9@label) ((lambda (G45ac@t) (if G45ac@t ((lambda (G45ae@x) (if (eq? (cdr G45ae@x) G45a9@label) G45a5@subst (G43b5@dup-error G45a8@name))) G45ac@t) (cons G45a4@a G45a5@subst))) (assq G45a8@name G45a5@subst))) (car G45a4@a) (cdr G45a4@a)))) (if (null? G459e@s) G459f@subst (G45a3@insert-to-subst (car G459e@s) (G43b7@merge-substs (cdr G459e@s) G459f@subst))))) '#f))) (set! G43b9@exclude* (lambda (G4574@sym* G4575@subst) ((lambda (G4579@exclude) (begin (set! G4579@exclude (lambda (G458e@sym G458f@subst) (if (null? G458f@subst) (G3179@syntax-violation 'import '"cannot rename unbound identifier" G458e@sym) (if (eq? G458e@sym (caar G458f@subst)) (values (cdar G458f@subst) (cdr G458f@subst)) ((lambda (G4592@a) (call-with-values (lambda () (G4579@exclude G458e@sym (cdr G458f@subst))) (lambda (G4596@G4594 G4597@G4595) ((lambda (G459a@subst G459b@old) (values G459b@old (cons G4592@a G459a@subst))) G4597@G4595 G4596@G4594)))) (car G458f@subst)))))) (if (null? G4574@sym*) (values '() G4575@subst) (call-with-values (lambda () (G4579@exclude (car G4574@sym*) G4575@subst)) (lambda (G457c@G457a G457d@G457b) ((lambda (G4580@subst G4581@old) (call-with-values (lambda () (G43b9@exclude* (cdr G4574@sym*) G4580@subst)) (lambda (G4586@G4584 G4587@G4585) ((lambda (G458a@subst G458b@old*) (values (cons G4581@old G458b@old*) G458a@subst)) G4587@G4585 G4586@G4584)))) G457d@G457b G457c@G457a)))))) '#f))) (set! G43bb@find* (lambda (G456c@sym* G456d@subst) (map (lambda (G4570@x) ((lambda (G4572@t) (if G4572@t (cdr G4572@t) (G3179@syntax-violation 'import '"cannot find identifier" G4570@x))) (assq G4570@x G456d@subst))) G456c@sym*))) (set! G43bd@rem* (lambda (G4564@sym* G4565@subst) ((letrec ((G4568@f (lambda (G456a@subst) (if (null? G456a@subst) '() (if (memq (caar G456a@subst) G4564@sym*) (G4568@f (cdr G456a@subst)) (cons (car G456a@subst) (G4568@f (cdr G456a@subst)))))))) G4568@f) G4565@subst))) (set! G43bf@remove-dups (lambda (G4562@ls) (if (null? G4562@ls) '() (if (memq (car G4562@ls) (cdr G4562@ls)) (G43bf@remove-dups (cdr G4562@ls)) (cons (car G4562@ls) (G43bf@remove-dups (cdr G4562@ls))))))) (set! G43c1@parse-library-name (lambda (G447c@spec) ((lambda (G447f@subversion? G4481@subversion-pred G4483@version-pred) (begin (set! G447f@subversion? (lambda (G455e@x) ((lambda (G4560@x) (if (integer? G4560@x) (if (exact? G4560@x) (begin '#f (>= G4560@x '0)) '#f) '#f)) (G317f@syntax->datum G455e@x)))) (set! G4481@subversion-pred (lambda (G44fe@x*) ((lambda (G4500@t) ((lambda (G4502@ls/false) (if (if G4502@ls/false (begin '#f (apply (lambda (G4504@n) (G447f@subversion? G4504@n)) G4502@ls/false)) '#f) (apply (lambda (G4506@n) (lambda (G4508@x) (= G4508@x (G317f@syntax->datum G4506@n)))) G4502@ls/false) ((lambda (G450a@t) ((lambda (G450c@ls/false) (if (if G450c@ls/false (begin '#f (apply (lambda (G450e@p? G450f@sub*) (eq? (G317f@syntax->datum G450e@p?) 'and)) G450c@ls/false)) '#f) (apply (lambda (G4512@p? G4513@sub*) ((lambda (G4516@p*) (lambda (G4518@x) (for-all (lambda (G451a@p) (G451a@p G4518@x)) G4516@p*))) (map G4481@subversion-pred G4513@sub*))) G450c@ls/false) ((lambda (G451c@t) ((lambda (G451e@ls/false) (if (if G451e@ls/false (begin '#f (apply (lambda (G4520@p? G4521@sub*) (eq? (G317f@syntax->datum G4520@p?) 'or)) G451e@ls/false)) '#f) (apply (lambda (G4524@p? G4525@sub*) ((lambda (G4528@p*) (lambda (G452a@x) (exists (lambda (G452c@p) (G452c@p G452a@x)) G4528@p*))) (map G4481@subversion-pred G4525@sub*))) G451e@ls/false) ((lambda (G452e@t) ((lambda (G4530@ls/false) (if (if G4530@ls/false (begin '#f (apply (lambda (G4532@p? G4533@sub) (eq? (G317f@syntax->datum G4532@p?) 'not)) G4530@ls/false)) '#f) (apply (lambda (G4536@p? G4537@sub) ((lambda (G453a@p) (lambda (G453c@x) (not (G453a@p G453c@x)))) (G4481@subversion-pred G4537@sub))) G4530@ls/false) ((lambda (G453e@t) ((lambda (G4540@ls/false) (if (if G4540@ls/false (begin '#f (apply (lambda (G4542@p? G4543@n) (if (eq? (G317f@syntax->datum G4542@p?) '<=) (begin '#f (G447f@subversion? G4543@n)) '#f)) G4540@ls/false)) '#f) (apply (lambda (G4546@p? G4547@n) (lambda (G454a@x) (<= G454a@x (G317f@syntax->datum G4547@n)))) G4540@ls/false) ((lambda (G454c@t) ((lambda (G454e@ls/false) (if (if G454e@ls/false (begin '#f (apply (lambda (G4550@p? G4551@n) (if (eq? (G317f@syntax->datum G4550@p?) '>=) (begin '#f (G447f@subversion? G4551@n)) '#f)) G454e@ls/false)) '#f) (apply (lambda (G4554@p? G4555@n) (lambda (G4558@x) (>= G4558@x (G317f@syntax->datum G4555@n)))) G454e@ls/false) ((lambda (G455a@t) ((lambda (G455c@ls/false) (if G455c@ls/false (apply (lambda () (G3179@syntax-violation 'import '"invalid sub-version spec" G447c@spec G44fe@x*)) G455c@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G455a@t))) (G3086@syntax-dispatch G455a@t '_))) G454c@t))) (G3086@syntax-dispatch G454c@t '(any any)))) G453e@t))) (G3086@syntax-dispatch G453e@t '(any any)))) G452e@t))) (G3086@syntax-dispatch G452e@t '(any any)))) G451c@t))) (G3086@syntax-dispatch G451c@t '(any . each-any)))) G450a@t))) (G3086@syntax-dispatch G450a@t '(any . each-any)))) G4500@t))) (G3086@syntax-dispatch G4500@t 'any))) G44fe@x*))) (set! G4483@version-pred (lambda (G44ae@x*) ((lambda (G44b0@t) ((lambda (G44b2@ls/false) (if G44b2@ls/false (apply (lambda () (lambda (G44b4@x) '#t)) G44b2@ls/false) ((lambda (G44b6@t) ((lambda (G44b8@ls/false) (if (if G44b8@ls/false (begin '#f (apply (lambda (G44ba@c G44bb@ver*) (eq? (G317f@syntax->datum G44ba@c) 'and)) G44b8@ls/false)) '#f) (apply (lambda (G44be@c G44bf@ver*) ((lambda (G44c2@p*) (lambda (G44c4@x) (for-all (lambda (G44c6@p) (G44c6@p G44c4@x)) G44c2@p*))) (map G4483@version-pred G44bf@ver*))) G44b8@ls/false) ((lambda (G44c8@t) ((lambda (G44ca@ls/false) (if (if G44ca@ls/false (begin '#f (apply (lambda (G44cc@c G44cd@ver*) (eq? (G317f@syntax->datum G44cc@c) 'or)) G44ca@ls/false)) '#f) (apply (lambda (G44d0@c G44d1@ver*) ((lambda (G44d4@p*) (lambda (G44d6@x) (exists (lambda (G44d8@p) (G44d8@p G44d6@x)) G44d4@p*))) (map G4483@version-pred G44d1@ver*))) G44ca@ls/false) ((lambda (G44da@t) ((lambda (G44dc@ls/false) (if (if G44dc@ls/false (begin '#f (apply (lambda (G44de@c G44df@ver) (eq? (G317f@syntax->datum G44de@c) 'not)) G44dc@ls/false)) '#f) (apply (lambda (G44e2@c G44e3@ver) ((lambda (G44e6@p) (lambda (G44e8@x) (not (G44e6@p G44e8@x)))) (G4483@version-pred G44e3@ver))) G44dc@ls/false) ((lambda (G44ea@t) ((lambda (G44ec@ls/false) (if G44ec@ls/false (apply (lambda (G44ee@sub*) ((lambda (G44f0@p*) (lambda (G44f2@x) ((letrec ((G44f4@f (lambda (G44f6@p* G44f7@x) (if (null? G44f6@p*) '#t (if (null? G44f7@x) '#f (if ((car G44f6@p*) (car G44f7@x)) (begin '#f (G44f4@f (cdr G44f6@p*) (cdr G44f7@x))) '#f)))))) G44f4@f) G44f0@p* G44f2@x))) (map G4481@subversion-pred G44ee@sub*))) G44ec@ls/false) ((lambda (G44fa@t) ((lambda (G44fc@ls/false) (if G44fc@ls/false (apply (lambda () (G3179@syntax-violation 'import '"invalid version spec" G447c@spec G44ae@x*)) G44fc@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G44fa@t))) (G3086@syntax-dispatch G44fa@t '_))) G44ea@t))) (G3086@syntax-dispatch G44ea@t 'each-any))) G44da@t))) (G3086@syntax-dispatch G44da@t '(any any)))) G44c8@t))) (G3086@syntax-dispatch G44c8@t '(any . each-any)))) G44b6@t))) (G3086@syntax-dispatch G44b6@t '(any . each-any)))) G44b0@t))) (G3086@syntax-dispatch G44b0@t '()))) G44ae@x*))) ((letrec ((G4484@f (lambda (G4486@x) ((lambda (G4488@t) ((lambda (G448a@ls/false) (if G448a@ls/false (apply (lambda (G448c@version-spec*) (values '() (G4483@version-pred G448c@version-spec*))) G448a@ls/false) ((lambda (G448e@t) ((lambda (G4490@ls/false) (if (if G4490@ls/false (begin '#f (apply (lambda (G4492@x G4493@x*) (G43b3@idsyn? G4492@x)) G4490@ls/false)) '#f) (apply (lambda (G4496@x G4497@x*) (call-with-values (lambda () (G4484@f G4497@x*)) (lambda (G449c@G449a G449d@G449b) ((lambda (G44a0@pred G44a1@name) (values (cons (G317f@syntax->datum G4496@x) G44a1@name) G44a0@pred)) G449d@G449b G449c@G449a)))) G4490@ls/false) ((lambda (G44a4@t) ((lambda (G44a6@ls/false) (if G44a6@ls/false (apply (lambda () (values '() (lambda (G44a8@x) '#t))) G44a6@ls/false) ((lambda (G44aa@t) ((lambda (G44ac@ls/false) (if G44ac@ls/false (apply (lambda () (G3179@syntax-violation '#f '"invalid import spec" G447c@spec)) G44ac@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G44aa@t))) (G3086@syntax-dispatch G44aa@t '_))) G44a4@t))) (G3086@syntax-dispatch G44a4@t '()))) G448e@t))) (G3086@syntax-dispatch G448e@t '(any . any)))) G4488@t))) (G3086@syntax-dispatch G4488@t '(each-any)))) G4486@x)))) G4484@f) G447c@spec))) '#f '#f '#f))) (set! G43c3@import-library (lambda (G446e@spec*) (call-with-values (lambda () (G43c1@parse-library-name G446e@spec*)) (lambda (G4472@G4470 G4473@G4471) ((lambda (G4476@pred G4477@name) (begin (if (null? G4477@name) (G3179@syntax-violation 'import '"empty library name" G446e@spec*) (void)) ((lambda (G447a@lib) (begin (if (not G447a@lib) (G3179@syntax-violation 'import '"cannot find library with required name" G4477@name) (void)) (if (not (G4476@pred (G2c09@G2a6f@library-version G447a@lib))) (G3179@syntax-violation 'import '"library does not satisfy version specification" G446e@spec* G447a@lib) (void)) ((G30f9@imp-collector) G447a@lib) (G2c0d@G2a77@library-subst G447a@lib))) (G2c31@G2abf@find-library-by-name G4477@name)))) G4473@G4471 G4472@G4470))))) (set! G43c5@get-import (lambda (G43e0@spec) ((lambda (G43e2@t) ((lambda (G43e4@ls/false) (if (if G43e4@ls/false (begin '#f (apply (lambda (G43e6@x G43e7@x*) (not (memq (G317f@syntax->datum G43e6@x) '(for rename except only prefix library)))) G43e4@ls/false)) '#f) (apply (lambda (G43ea@x G43eb@x*) (G43c3@import-library (cons G43ea@x G43eb@x*))) G43e4@ls/false) ((lambda (G43ee@t) ((lambda (G43f0@ls/false) (if (if G43f0@ls/false (begin '#f (apply (lambda (G43f2@rename G43f3@isp G43f4@old* G43f5@new*) (if (eq? (G317f@syntax->datum G43f2@rename) 'rename) (if (for-all G43b3@idsyn? G43f4@old*) (begin '#f (for-all G43b3@idsyn? G43f5@new*)) '#f) '#f)) G43f0@ls/false)) '#f) (apply (lambda (G43fa@rename G43fb@isp G43fc@old* G43fd@new*) ((lambda (G4402@subst G4403@old* G4404@new*) ((lambda (G4408@old-label*) ((lambda (G440a@subst) (G43b7@merge-substs (map cons G4404@new* G4408@old-label*) G440a@subst)) (G43bd@rem* G4403@old* G4402@subst))) (G43bb@find* G4403@old* G4402@subst))) (G43c5@get-import G43fb@isp) (map G317f@syntax->datum G43fc@old*) (map G317f@syntax->datum G43fd@new*))) G43f0@ls/false) ((lambda (G440c@t) ((lambda (G440e@ls/false) (if (if G440e@ls/false (begin '#f (apply (lambda (G4410@except G4411@isp G4412@sym*) (if (eq? (G317f@syntax->datum G4410@except) 'except) (begin '#f (for-all G43b3@idsyn? G4412@sym*)) '#f)) G440e@ls/false)) '#f) (apply (lambda (G4416@except G4417@isp G4418@sym*) ((lambda (G441c@subst) (G43bd@rem* (map G317f@syntax->datum G4418@sym*) G441c@subst)) (G43c5@get-import G4417@isp))) G440e@ls/false) ((lambda (G441e@t) ((lambda (G4420@ls/false) (if (if G4420@ls/false (begin '#f (apply (lambda (G4422@only G4423@isp G4424@sym*) (if (eq? (G317f@syntax->datum G4422@only) 'only) (begin '#f (for-all G43b3@idsyn? G4424@sym*)) '#f)) G4420@ls/false)) '#f) (apply (lambda (G4428@only G4429@isp G442a@sym*) ((lambda (G442e@subst G442f@sym*) ((lambda (G4432@sym*) ((lambda (G4434@lab*) (map cons G4432@sym* G4434@lab*)) (G43bb@find* G4432@sym* G442e@subst))) (G43bf@remove-dups G442f@sym*))) (G43c5@get-import G4429@isp) (map G317f@syntax->datum G442a@sym*))) G4420@ls/false) ((lambda (G4436@t) ((lambda (G4438@ls/false) (if (if G4438@ls/false (begin '#f (apply (lambda (G443a@prefix G443b@isp G443c@p) (if (eq? (G317f@syntax->datum G443a@prefix) 'prefix) (begin '#f (G43b3@idsyn? G443c@p)) '#f)) G4438@ls/false)) '#f) (apply (lambda (G4440@prefix G4441@isp G4442@p) ((lambda (G4446@subst G4447@prefix) (map (lambda (G444a@x) (cons (string->symbol (string-append G4447@prefix (symbol->string (car G444a@x)))) (cdr G444a@x))) G4446@subst)) (G43c5@get-import G4441@isp) (symbol->string (G317f@syntax->datum G4442@p)))) G4438@ls/false) ((lambda (G444c@t) ((lambda (G444e@ls/false) (if (if G444e@ls/false (begin '#f (apply (lambda (G4450@library G4451@spec*) (eq? (G317f@syntax->datum G4450@library) 'library)) G444e@ls/false)) '#f) (apply (lambda (G4454@library G4455@spec*) (G43c3@import-library G4455@spec*)) G444e@ls/false) ((lambda (G4458@t) ((lambda (G445a@ls/false) (if (if G445a@ls/false (begin '#f (apply (lambda (G445c@for G445d@isp G445e@rest) (eq? (G317f@syntax->datum G445c@for) 'for)) G445a@ls/false)) '#f) (apply (lambda (G4462@for G4463@isp G4464@rest) (G43c5@get-import G4463@isp)) G445a@ls/false) ((lambda (G4468@t) ((lambda (G446a@ls/false) (if G446a@ls/false (apply (lambda (G446c@spec) (G3179@syntax-violation 'import '"invalid import spec" G446c@spec)) G446a@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G4468@t))) (G3086@syntax-dispatch G4468@t 'any))) G4458@t))) (G3086@syntax-dispatch G4458@t '(any any . any)))) G444c@t))) (G3086@syntax-dispatch G444c@t '(any each-any)))) G4436@t))) (G3086@syntax-dispatch G4436@t '(any any any)))) G441e@t))) (G3086@syntax-dispatch G441e@t '(any any . each-any)))) G440c@t))) (G3086@syntax-dispatch G440c@t '(any any . each-any)))) G43ee@t))) (G3086@syntax-dispatch G43ee@t '(any any . #(each (any any)))))) G43e2@t))) (G3086@syntax-dispatch G43e2@t '(any . each-any)))) G43e0@spec))) (set! G43c7@add-imports! (lambda (G43d0@imp G43d1@h) ((lambda (G43d4@subst) (for-each (lambda (G43d6@x) ((lambda (G43d8@name G43d9@label) ((lambda (G43dc@t) (if G43dc@t ((lambda (G43de@l) (if (not (eq? G43de@l G43d9@label)) (G43b5@dup-error G43d8@name) (void))) G43dc@t) (hashtable-set! G43d1@h G43d8@name G43d9@label))) (hashtable-ref G43d1@h G43d8@name '#f))) (car G43d6@x) (cdr G43d6@x))) G43d4@subst)) (G43c5@get-import G43d0@imp)))) (lambda (G43c8@imp*) ((letrec ((G43ca@f (lambda (G43cc@imp* G43cd@h) (if (null? G43cc@imp*) (hashtable-entries G43cd@h) (begin (G43c7@add-imports! (car G43cc@imp*) G43cd@h) (G43ca@f (cdr G43cc@imp*) G43cd@h)))))) G43ca@f) G43c8@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G30f1@make-top-rib (lambda (G45b4@names G45b5@labels) ((lambda (G45b8@rib) (begin (vector-for-each (lambda (G45ba@name G45bb@label) (begin (if (not (symbol? G45ba@name)) (error 'make-top-rib '"BUG: not a symbol" G45ba@name) (void)) (G2df4@extend-rib/nc! G45b8@rib (G2e0d@make-stx G45ba@name G2db7@top-mark* '() '()) G45bb@label))) G45b4@names G45b5@labels) G45b8@rib)) (G2dee@make-cache-rib)))) (set! G30f3@make-collector (lambda () ((lambda (G45be@ls) (lambda G45c2 ((lambda (G45c3) (if (= G45c3 '0) (apply (lambda () G45be@ls) G45c2) (if (= G45c3 '1) (apply (lambda (G45c0@x) (set! G45be@ls (G2db0@set-cons G45c0@x G45be@ls))) G45c2) (error 'apply '"invalid arg count")))) (length G45c2)))) '()))) (set! G30f5@inv-collector (G2995@G28a0@make-parameter (lambda G45c4@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G45c6@x) (begin (if (not (procedure? G45c6@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G45c6@x) (void)) G45c6@x)))) (set! G30f7@vis-collector (G2995@G28a0@make-parameter (lambda G45c8@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G45ca@x) (begin (if (not (procedure? G45ca@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G45ca@x) (void)) G45ca@x)))) (set! G30f9@imp-collector (G2995@G28a0@make-parameter (lambda G45cc@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G45ce@x) (begin (if (not (procedure? G45ce@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G45ce@x) (void)) G45ce@x)))) (set! G30fb@chi-library-internal (lambda (G45d0@e* G45d1@rib G45d2@top?) (call-with-values (lambda () (G30e5@chi-body* G45d0@e* '() '() '() '() '() '() '() G45d1@rib G45d2@top?)) (lambda (G45de@G45d6 G45df@G45d7 G45e0@G45d8 G45e1@G45d9 G45e2@G45da G45e3@G45db G45e4@G45dc G45e5@G45dd) ((lambda (G45ee@exp* G45ef@_kwd* G45f0@mod** G45f1@rhs* G45f2@lex* G45f3@mr G45f4@r G45f5@e*) (values (append (apply append (reverse G45f0@mod**)) G45f5@e*) G45f4@r G45f3@mr (reverse G45f2@lex*) (reverse G45f1@rhs*) G45ee@exp*)) G45e5@G45dd G45e4@G45dc G45e3@G45db G45e2@G45da G45e1@G45d9 G45e0@G45d8 G45df@G45d7 G45de@G45d6))))) (set! G30fd@chi-interaction-expr (lambda (G45fe@e G45ff@rib G4600@r) (call-with-values (lambda () (G30e5@chi-body* (list G45fe@e) G4600@r G4600@r '() '() '() '() '() G45ff@rib '#t)) (lambda (G460c@G4604 G460d@G4605 G460e@G4606 G460f@G4607 G4610@G4608 G4611@G4609 G4612@G460a G4613@G460b) ((lambda (G461c@_exp* G461d@_kwd* G461e@mod** G461f@rhs* G4620@lex* G4621@mr G4622@r G4623@e*) ((lambda (G462c@e*) ((lambda (G462e@e) (values G462e@e G4622@r)) (if (null? G462c@e*) (G2d9f@G2d11@build-void) (if (null? (cdr G462c@e*)) (car G462c@e*) (G2d9e@G2d0f@build-sequence '#f G462c@e*))))) (G30b8@expand-interaction-rhs*/init* (reverse G4620@lex*) (reverse G461f@rhs*) (append (apply append (reverse G461e@mod**)) G4623@e*) G4622@r G4621@mr))) G4613@G460b G4612@G460a G4611@G4609 G4610@G4608 G460f@G4607 G460e@G4606 G460d@G4605 G460c@G4604))))) (set! G30ff@library-body-expander (lambda (G4630@name G4631@main-exp* G4632@imp* G4633@b* G4634@top?) ((lambda (G463b@itc) (begin (set! G463b@itc (G30f3@make-collector)) ((lambda (G4640@G463c@imp-collector G4641@G463d@top-level-context G4642@G463e@imp-collector G4643@G463f@top-level-context) ((lambda (G4648@swap) (dynamic-wind G4648@swap (lambda () (call-with-values (lambda () (G30ef@parse-import-spec* G4632@imp*)) (lambda (G464c@G464a G464d@G464b) ((lambda (G4650@subst-labels G4651@subst-names) ((lambda (G4654@rib) ((lambda (G4657@wrap) (begin (set! G4657@wrap (lambda (G46c3@x) (G2e0d@make-stx G46c3@x G2db7@top-mark* (list G4654@rib) '()))) ((lambda (G4658@b* G4659@main-exp* G465a@rtc G465b@vtc) ((lambda (G4664@G4660@inv-collector G4665@G4661@vis-collector G4666@G4662@inv-collector G4667@G4663@vis-collector) ((lambda (G466c@swap) (dynamic-wind G466c@swap (lambda () (call-with-values (lambda () (G30fb@chi-library-internal G4658@b* G4654@rib G4634@top?)) (lambda (G4674@G466e G4675@G466f G4676@G4670 G4677@G4671 G4678@G4672 G4679@G4673) ((lambda (G4680@internal-exp* G4681@rhs* G4682@lex* G4683@mr G4684@r G4685@init*) (call-with-values (lambda () (G30e9@parse-exports (append G4659@main-exp* G4680@internal-exp*))) (lambda (G468e@G468c G468f@G468d) ((lambda (G4692@exp-id* G4693@exp-name*) (begin (G2df8@seal-rib! G4654@rib) ((lambda (G4696@init*) ((lambda (G4698@rhs*) ((lambda () (begin (G2dfa@unseal-rib! G4654@rib) ((lambda (G469a@loc* G469b@export-subst) ((lambda (G469f@errstr) (begin (set! G469f@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3163@make-export-env/macros G4682@lex* G469a@loc* G4684@r)) (lambda (G46a3@G46a0 G46a4@G46a1 G46a5@G46a2) ((lambda (G46a9@macro* G46aa@global* G46ab@export-env) (begin (for-each (lambda (G46af@s) ((lambda (G46b1@name G46b2@label) ((lambda (G46b5@p) (if G46b5@p ((lambda (G46b7@b) ((lambda (G46b9@type) (if (eq? G46b9@type 'mutable) (G3179@syntax-violation 'export G469f@errstr G46b1@name) (void))) (car G46b7@b))) (cdr G46b5@p)) (void))) (assq G46b2@label G46ab@export-env))) (car G46af@s) (cdr G46af@s))) G469b@export-subst) ((lambda (G46bb@invoke-body G46bc@invoke-definitions) (values (G463b@itc) (G465a@rtc) (G465b@vtc) (G2d9e@G2d0f@build-sequence '#f (append G46bc@invoke-definitions (list G46bb@invoke-body))) G46a9@macro* G469b@export-subst G46ab@export-env)) (G2da1@G2d15@build-letrec* '#f G4682@lex* G4698@rhs* (G315f@build-exports G46aa@global* G4696@init*)) (map G2d9a@G2c3f@build-global-define (map cdr G46aa@global*))))) G46a5@G46a2 G46a4@G46a1 G46a3@G46a0))))) '#f)) (map G2dbd@gen-global G4682@lex*) (G3161@make-export-subst G4693@exp-name* G4692@exp-id*)))))) (G30ba@chi-rhs* G4681@rhs* G4684@r G4683@mr))) (G30a6@chi-expr* G4685@init* G4684@r G4683@mr)))) G468f@G468d G468e@G468c)))) G4679@G4673 G4678@G4672 G4677@G4671 G4676@G4670 G4675@G466f G4674@G466e)))) G466c@swap)) (lambda () (begin ((lambda (G46bf@t) (begin (G4664@G4660@inv-collector G4666@G4662@inv-collector) (set! G4666@G4662@inv-collector G46bf@t))) (G4664@G4660@inv-collector)) ((lambda (G46c1@t) (begin (G4665@G4661@vis-collector G4667@G4663@vis-collector) (set! G4667@G4663@vis-collector G46c1@t))) (G4665@G4661@vis-collector)))))) G30f5@inv-collector G30f7@vis-collector G465a@rtc G465b@vtc)) (map G4657@wrap G4633@b*) (map G4657@wrap G4631@main-exp*) (G30f3@make-collector) (G30f3@make-collector)))) '#f)) (G30f1@make-top-rib G4651@subst-names G4650@subst-labels))) G464d@G464b G464c@G464a)))) G4648@swap)) (lambda () (begin ((lambda (G46c5@t) (begin (G4640@G463c@imp-collector G4642@G463e@imp-collector) (set! G4642@G463e@imp-collector G46c5@t))) (G4640@G463c@imp-collector)) ((lambda (G46c7@t) (begin (G4641@G463d@top-level-context G4643@G463f@top-level-context) (set! G4643@G463f@top-level-context G46c7@t))) (G4641@G463d@top-level-context)))))) G30f9@imp-collector G3187@top-level-context G463b@itc '#f))) '#f))) (set! G3101@core-library-expander (lambda (G46c9@e G46ca@verify-name) (call-with-values (lambda () (G30ed@parse-library G46c9@e)) (lambda (G46d1@G46cd G46d2@G46ce G46d3@G46cf G46d4@G46d0) ((lambda (G46d9@b* G46da@imp* G46db@exp* G46dc@name*) (call-with-values (lambda () (G30eb@parse-library-name G46dc@name*)) (lambda (G46e3@G46e1 G46e4@G46e2) ((lambda (G46e7@ver G46e8@name) (begin (G46ca@verify-name G46e8@name) (call-with-values (lambda () (G30ff@library-body-expander G46e8@name G46db@exp* G46da@imp* G46d9@b* '#f)) (lambda (G46f2@G46eb G46f3@G46ec G46f4@G46ed G46f5@G46ee G46f6@G46ef G46f7@G46f0 G46f8@G46f1) ((lambda (G4700@export-env G4701@export-subst G4702@visit-code G4703@invoke-code G4704@visit-req* G4705@invoke-req* G4706@imp*) (values G46e8@name G46e7@ver G4706@imp* G4705@invoke-req* G4704@visit-req* G4703@invoke-code G4702@visit-code G4701@export-subst G4700@export-env)) G46f8@G46f1 G46f7@G46f0 G46f6@G46ef G46f5@G46ee G46f4@G46ed G46f3@G46ec G46f2@G46eb))))) G46e4@G46e2 G46e3@G46e1)))) G46d4@G46d0 G46d3@G46cf G46d2@G46ce G46d1@G46cd))))) (set! G3103@parse-top-level-program (lambda (G470e@e*) ((lambda (G4710@t) ((lambda (G4712@ls/false) (if (if G4712@ls/false (begin '#f (apply (lambda (G4714@import G4715@imp* G4716@b*) (eq? (G317f@syntax->datum G4714@import) 'import)) G4712@ls/false)) '#f) (apply (lambda (G471a@import G471b@imp* G471c@b*) (values G471b@imp* G471c@b*)) G4712@ls/false) ((lambda (G4720@t) ((lambda (G4722@ls/false) (if (if G4722@ls/false (begin '#f (apply (lambda (G4724@import G4725@x G4726@y) (eq? (G317f@syntax->datum G4724@import) 'import)) G4722@ls/false)) '#f) (apply (lambda (G472a@import G472b@x G472c@y) (G3179@syntax-violation 'expander '"invalid syntax of top-level program" (G2e3d@syntax-car G470e@e*))) G4722@ls/false) ((lambda (G4730@t) ((lambda (G4732@ls/false) (if G4732@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G4732@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G4730@t))) (G3086@syntax-dispatch G4730@t '_))) G4720@t))) (G3086@syntax-dispatch G4720@t '((any . any) . any)))) G4710@t))) (G3086@syntax-dispatch G4710@t '((any . each-any) . each-any)))) G470e@e*))) (set! G3105@top-level-expander (lambda (G4734@e*) (call-with-values (lambda () (G3103@parse-top-level-program G4734@e*)) (lambda (G4738@G4736 G4739@G4737) ((lambda (G473c@b* G473d@imp*) (call-with-values (lambda () (G30ff@library-body-expander '() '() G473d@imp* G473c@b* '#t)) (lambda (G4747@G4740 G4748@G4741 G4749@G4742 G474a@G4743 G474b@G4744 G474c@G4745 G474d@G4746) ((lambda (G4755@export-env G4756@export-subst G4757@visit-code G4758@invoke-code G4759@visit-req* G475a@invoke-req* G475b@imp*) (values G475a@invoke-req* G4758@invoke-code)) G474d@G4746 G474c@G4745 G474b@G4744 G474a@G4743 G4749@G4742 G4748@G4741 G4747@G4740)))) G4739@G4737 G4738@G4736))))) (set! G310b@G3106 (make-record-type-descriptor 'env '#f 'G3109 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G310d@G3108 '#f) (set! G310f@G3107 (make-record-constructor-descriptor G310b@G3106 '#f G310d@G3108)) (set! G3114@env? (record-predicate G310b@G3106)) (set! G3116@make-env (record-constructor G310f@G3107)) (set! G3118@env-names (record-accessor G310b@G3106 '0)) (set! G311a@env-labels (record-accessor G310b@G3106 '1)) (set! G311c@env-itc (record-accessor G310b@G3106 '2)) (set! G311e@set-env-names! (record-mutator G310b@G3106 '0)) (set! G3120@set-env-labels! (record-mutator G310b@G3106 '1)) (set! G3122@set-env-itc! (record-mutator G310b@G3106 '2)) (set! G3124@rp (G2992@G289a@make-record-printer 'env (lambda (G4763@x G4764@p G4765@wr) (display '"#<environment>" G4764@p)))) (set! G312a@G3125 (make-record-type-descriptor 'interaction-env '#f 'G3128 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G312c@G3127 '#f) (set! G312e@G3126 (make-record-constructor-descriptor G312a@G3125 '#f G312c@G3127)) (set! G3133@interaction-env? (record-predicate G312a@G3125)) (set! G3135@make-interaction-env (record-constructor G312e@G3126)) (set! G3137@interaction-env-rib (record-accessor G312a@G3125 '0)) (set! G3139@interaction-env-r (record-accessor G312a@G3125 '1)) (set! G313b@interaction-env-locs (record-accessor G312a@G3125 '2)) (set! G313d@set-interaction-env-rib! (record-mutator G312a@G3125 '0)) (set! G313f@set-interaction-env-r! (record-mutator G312a@G3125 '1)) (set! G3141@set-interaction-env-locs! (record-mutator G312a@G3125 '2)) (set! G3143@rp (G2992@G289a@make-record-printer 'interaction-env (lambda (G4769@x G476a@p G476b@wr) (display '"#<environment>" G476a@p)))) (set! G3145@interaction-environment-symbols (lambda () (G314d@environment-symbols (G3185@interaction-environment)))) (set! G3147@environment-bindings (lambda (G476f@e) (vector->list (vector-map (lambda (G4771@name G4772@label) (G3149@parse-binding (cons G4771@name (G2c37@G2acb@imported-label->binding G4772@label)))) (G3118@env-names G476f@e) (G311a@env-labels G476f@e))))) (set! G3149@parse-binding (lambda (G4775@b) (cons (car G4775@b) ((lambda (G4777@t) (if (memv G4777@t '(core-prim global)) 'procedure (if (memv G4777@t '(core-macro macro global-macro)) 'syntax (if (memv G4777@t '($core-rtd)) 'record (if (eq? (car G4775@b) (cadr G4775@b)) 'syntax 'unknown))))) (cadr G4775@b))))) (set! G314b@environment? (lambda (G4779@x) ((lambda (G477b@t) (if G477b@t G477b@t (begin '#f (G3133@interaction-env? G4779@x)))) (G3114@env? G4779@x)))) (set! G314d@environment-symbols (lambda (G477d@x) (if (G3114@env? G477d@x) (vector->list (G3118@env-names G477d@x)) (if (G3133@interaction-env? G477d@x) (map values (G2dd8@rib-sym* (G3137@interaction-env-rib G477d@x))) (assertion-violation 'environment-symbols '"not an environment" G477d@x))))) (set! G314f@environment (lambda G477f@imp* ((lambda (G4781@itc) ((lambda (G4785@G4783@imp-collector G4786@G4784@imp-collector) ((lambda (G4789@swap) (dynamic-wind G4789@swap (lambda () (call-with-values (lambda () (G30ef@parse-import-spec* G477f@imp*)) (lambda (G478d@G478b G478e@G478c) ((lambda (G4791@subst-labels G4792@subst-names) (G3116@make-env G4792@subst-names G4791@subst-labels G4781@itc)) G478e@G478c G478d@G478b)))) G4789@swap)) (lambda () ((lambda (G4795@t) (begin (G4785@G4783@imp-collector G4786@G4784@imp-collector) (set! G4786@G4784@imp-collector G4795@t))) (G4785@G4783@imp-collector))))) G30f9@imp-collector G4781@itc)) (G30f3@make-collector)))) (set! G3151@null-environment (lambda (G4797@n) (begin (if (not (eqv? G4797@n '5)) (assertion-violation 'null-environment '"not 5" G4797@n) (void)) (G314f@environment '(psyntax null-environment-5))))) (set! G3153@scheme-report-environment (lambda (G4799@n) (begin (if (not (eqv? G4799@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4799@n) (void)) (G314f@environment '(psyntax scheme-report-environment-5))))) (set! G3155@expand (lambda (G479b@x G479c@env) (if (G3114@env? G479c@env) ((lambda (G479f@rib) ((lambda (G47a1@x G47a2@itc G47a3@rtc G47a4@vtc) ((lambda (G47a9@x) (begin (G2df8@seal-rib! G479f@rib) (values G47a9@x (G47a3@rtc)))) ((lambda (G47b3@G47ab@top-level-context G47b4@G47ac@inv-collector G47b5@G47ad@vis-collector G47b6@G47ae@imp-collector G47b7@G47af@top-level-context G47b8@G47b0@inv-collector G47b9@G47b1@vis-collector G47ba@G47b2@imp-collector) ((lambda (G47c3@swap) (dynamic-wind G47c3@swap (lambda () (G30aa@chi-expr G47a1@x '() '())) G47c3@swap)) (lambda () (begin ((lambda (G47c5@t) (begin (G47b3@G47ab@top-level-context G47b7@G47af@top-level-context) (set! G47b7@G47af@top-level-context G47c5@t))) (G47b3@G47ab@top-level-context)) ((lambda (G47c7@t) (begin (G47b4@G47ac@inv-collector G47b8@G47b0@inv-collector) (set! G47b8@G47b0@inv-collector G47c7@t))) (G47b4@G47ac@inv-collector)) ((lambda (G47c9@t) (begin (G47b5@G47ad@vis-collector G47b9@G47b1@vis-collector) (set! G47b9@G47b1@vis-collector G47c9@t))) (G47b5@G47ad@vis-collector)) ((lambda (G47cb@t) (begin (G47b6@G47ae@imp-collector G47ba@G47b2@imp-collector) (set! G47ba@G47b2@imp-collector G47cb@t))) (G47b6@G47ae@imp-collector)))))) G3187@top-level-context G30f5@inv-collector G30f7@vis-collector G30f9@imp-collector '#f G47a3@rtc G47a4@vtc G47a2@itc))) (G2e0d@make-stx G479b@x G2db7@top-mark* (list G479f@rib) '()) (G311c@env-itc G479c@env) (G30f3@make-collector) (G30f3@make-collector))) (G30f1@make-top-rib (G3118@env-names G479c@env) (G311a@env-labels G479c@env))) (if (G3133@interaction-env? G479c@env) ((lambda (G47cd@rib G47ce@r G47cf@rtc) ((lambda (G47d3@x) (call-with-values (lambda () ((lambda (G47df@G47d7@top-level-context G47e0@G47d8@inv-collector G47e1@G47d9@vis-collector G47e2@G47da@imp-collector G47e3@G47db@top-level-context G47e4@G47dc@inv-collector G47e5@G47dd@vis-collector G47e6@G47de@imp-collector) ((lambda (G47ef@swap) (dynamic-wind G47ef@swap (lambda () (G30fd@chi-interaction-expr G47d3@x G47cd@rib G47ce@r)) G47ef@swap)) (lambda () (begin ((lambda (G47f1@t) (begin (G47df@G47d7@top-level-context G47e3@G47db@top-level-context) (set! G47e3@G47db@top-level-context G47f1@t))) (G47df@G47d7@top-level-context)) ((lambda (G47f3@t) (begin (G47e0@G47d8@inv-collector G47e4@G47dc@inv-collector) (set! G47e4@G47dc@inv-collector G47f3@t))) (G47e0@G47d8@inv-collector)) ((lambda (G47f5@t) (begin (G47e1@G47d9@vis-collector G47e5@G47dd@vis-collector) (set! G47e5@G47dd@vis-collector G47f5@t))) (G47e1@G47d9@vis-collector)) ((lambda (G47f7@t) (begin (G47e2@G47da@imp-collector G47e6@G47de@imp-collector) (set! G47e6@G47de@imp-collector G47f7@t))) (G47e2@G47da@imp-collector)))))) G3187@top-level-context G30f5@inv-collector G30f7@vis-collector G30f9@imp-collector G479c@env G47cf@rtc (G30f3@make-collector) (G30f3@make-collector))) (lambda (G47f9@G47d5 G47fa@G47d6) ((lambda (G47fd@r^ G47fe@e) (begin (G313f@set-interaction-env-r! G479c@env G47fd@r^) (values G47fe@e (G47cf@rtc)))) G47fa@G47d6 G47f9@G47d5)))) (G2e0d@make-stx G479b@x G2db7@top-mark* (list G47cd@rib) '()))) (G3137@interaction-env-rib G479c@env) (G3139@interaction-env-r G479c@env) (G30f3@make-collector)) (assertion-violation 'expand '"not an environment" G479c@env))))) (set! G3157@eval (lambda (G4801@x G4802@env) (begin (if (not (G314b@environment? G4802@env)) (error 'eval '"not an environment" G4802@env) (void)) (call-with-values (lambda () (G3155@expand G4801@x G4802@env)) (lambda (G4807@G4805 G4808@G4806) ((lambda (G480b@invoke-req* G480c@x) (begin (for-each G2c38@G2acd@invoke-library G480b@invoke-req*) (eval-core (G29f9@G29a1@expanded->core G480c@x)))) G4808@G4806 G4807@G4805)))))) (set! G3159@library-expander (lambda G4874 ((lambda (G4875) (if (= G4875 '3) (apply (lambda (G480f@x G4810@filename G4811@verify-name) ((lambda (G4816@build-visit-code G4818@visit!) (begin (set! G4816@build-visit-code (lambda (G4862@macro*) (if (null? G4862@macro*) (G2d9f@G2d11@build-void) (G2d9e@G2d0f@build-sequence '#f (map (lambda (G4864@x) ((lambda (G4866@loc G4867@src) (list 'set! G4866@loc G4867@src)) (car G4864@x) (cddr G4864@x))) G4862@macro*))))) (set! G4818@visit! (lambda (G485a@macro*) (for-each (lambda (G485c@x) ((lambda (G485e@loc G485f@proc) (set-symbol-value! G485e@loc G485f@proc)) (car G485c@x) (cadr G485c@x))) G485a@macro*))) (call-with-values (lambda () (G3101@core-library-expander G480f@x G4811@verify-name)) (lambda (G4822@G4819 G4823@G481a G4824@G481b G4825@G481c G4826@G481d G4827@G481e G4828@G481f G4829@G4820 G482a@G4821) ((lambda (G4834@export-env G4835@export-subst G4836@macro* G4837@invoke-code G4838@vis* G4839@inv* G483a@imp* G483b@ver G483c@name) ((lambda (G4846@id G4847@name G4848@ver G4849@imp* G484a@vis* G484b@inv* G484c@visit-proc G484d@invoke-proc G484e@visit-code G484f@invoke-code) (begin (G2c36@G2ac9@install-library G4846@id G4847@name G4848@ver G4849@imp* G484a@vis* G484b@inv* G4835@export-subst G4834@export-env G484c@visit-proc G484d@invoke-proc G484e@visit-code G484f@invoke-code '#t G4810@filename) (values G4846@id G4847@name G4848@ver G4849@imp* G484a@vis* G484b@inv* G484f@invoke-code G484e@visit-code G4835@export-subst G4834@export-env))) (gensym) G483c@name G483b@ver (map G2c3c@G2ad5@library-spec G483a@imp*) (map G2c3c@G2ad5@library-spec G4838@vis*) (map G2c3c@G2ad5@library-spec G4839@inv*) (lambda () (G4818@visit! G4836@macro*)) (lambda () (eval-core (G29f9@G29a1@expanded->core G4837@invoke-code))) (G4816@build-visit-code G4836@macro*) G4837@invoke-code)) G482a@G4821 G4829@G4820 G4828@G481f G4827@G481e G4826@G481d G4825@G481c G4824@G481b G4823@G481a G4822@G4819))))) '#f '#f)) G4874) (if (= G4875 '2) (apply (lambda (G486a@x G486b@filename) (G3159@library-expander G486a@x G486b@filename (lambda (G486e@x) (values)))) G4874) (if (= G4875 '1) (apply (lambda (G4870@x) (G3159@library-expander G4870@x '#f (lambda (G4872@x) (values)))) G4874) (error 'apply '"invalid arg count"))))) (length G4874)))) (set! G315b@boot-library-expand (lambda (G4876@x) (call-with-values (lambda () (G3159@library-expander G4876@x)) (lambda (G4882@G4878 G4883@G4879 G4884@G487a G4885@G487b G4886@G487c G4887@G487d G4888@G487e G4889@G487f G488a@G4880 G488b@G4881) ((lambda (G4896@export-env G4897@export-subst G4898@visit-code G4899@invoke-code G489a@inv* G489b@vis* G489c@imp* G489d@ver G489e@name G489f@id) (values G489e@name G4899@invoke-code G4897@export-subst G4896@export-env)) G488b@G4881 G488a@G4880 G4889@G487f G4888@G487e G4887@G487d G4886@G487c G4885@G487b G4884@G487a G4883@G4879 G4882@G4878))))) (set! G315d@rev-map-append (lambda (G48aa@f G48ab@ls G48ac@ac) (if (null? G48ab@ls) G48ac@ac (G315d@rev-map-append G48aa@f (cdr G48ab@ls) (cons (G48aa@f (car G48ab@ls)) G48ac@ac))))) (set! G315f@build-exports (lambda (G48b0@lex*+loc* G48b1@init*) (G2d9e@G2d0f@build-sequence '#f (cons (G2d9f@G2d11@build-void) (G315d@rev-map-append (lambda (G48b4@x) (list 'set! (cdr G48b4@x) (car G48b4@x))) G48b0@lex*+loc* G48b1@init*))))) (set! G3161@make-export-subst (lambda (G48b6@name* G48b7@id*) (map (lambda (G48ba@name G48bb@id) ((lambda (G48be@label) (begin (if (not G48be@label) (G3179@syntax-violation '#f '"cannot export unbound identifier" G48bb@id) (void)) (cons G48ba@name G48be@label))) (G2e5d@id->label G48bb@id))) G48b6@name* G48b7@id*))) (set! G3163@make-export-env/macros (lambda (G48c0@lex* G48c1@loc* G48c2@r) ((lambda (G48c7@lookup) (begin (set! G48c7@lookup (lambda (G48e4@x) ((letrec ((G48e6@f (lambda (G48e8@x G48e9@lex* G48ea@loc*) (if (pair? G48e9@lex*) (if (eq? G48e8@x (car G48e9@lex*)) (car G48ea@loc*) (G48e6@f G48e8@x (cdr G48e9@lex*) (cdr G48ea@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G48e6@f) G48e4@x G48c0@lex* G48c1@loc*))) ((letrec ((G48c8@f (lambda (G48ca@r G48cb@env G48cc@global* G48cd@macro*) (if (null? G48ca@r) (values G48cb@env G48cc@global* G48cd@macro*) ((lambda (G48d2@x) ((lambda (G48d4@label G48d5@b) ((lambda (G48d8@t) (if (memv G48d8@t '(lexical)) ((lambda (G48da@v) ((lambda (G48dc@loc G48dd@type) (G48c8@f (cdr G48ca@r) (cons (cons* G48d4@label G48dd@type G48dc@loc) G48cb@env) (cons (cons (G3016@lexical-var G48da@v) G48dc@loc) G48cc@global*) G48cd@macro*)) (G48c7@lookup (G3016@lexical-var G48da@v)) (if (G3018@lexical-mutable? G48da@v) 'mutable 'global))) (G2e67@binding-value G48d5@b)) (if (memv G48d8@t '(local-macro)) ((lambda (G48e0@loc) (G48c8@f (cdr G48ca@r) (cons (cons* G48d4@label 'global-macro G48e0@loc) G48cb@env) G48cc@global* (cons (cons G48e0@loc (G2e67@binding-value G48d5@b)) G48cd@macro*))) (gensym)) (if (memv G48d8@t '(local-macro!)) ((lambda (G48e2@loc) (G48c8@f (cdr G48ca@r) (cons (cons* G48d4@label 'global-macro! G48e2@loc) G48cb@env) G48cc@global* (cons (cons G48e2@loc (G2e67@binding-value G48d5@b)) G48cd@macro*))) (gensym)) (if (memv G48d8@t '($rtd $module)) (G48c8@f (cdr G48ca@r) (cons G48d2@x G48cb@env) G48cc@global* G48cd@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2e65@binding-type G48d5@b) (G2e67@binding-value G48d5@b))))))) (G2e65@binding-type G48d5@b))) (car G48d2@x) (cdr G48d2@x))) (car G48ca@r)))))) G48c8@f) G48c2@r '() '() '()))) '#f))) (set! G3165@generate-temporaries (lambda (G48ee@ls) ((lambda (G48f0@t) ((lambda (G48f2@ls/false) (if G48f2@ls/false (apply (lambda (G48f4@ls) (map (lambda (G48f6@x) (G2e0d@make-stx ((lambda (G48f8@x) (if ((lambda (G48fa@t) (if G48fa@t G48fa@t (begin '#f (string? G48f8@x)))) (symbol? G48f8@x)) (gensym G48f8@x) (gensym 't))) (G317f@syntax->datum G48f6@x)) G2db7@top-mark* '() '())) G48f4@ls)) G48f2@ls/false) ((lambda (G48fc@t) ((lambda (G48fe@ls/false) (if G48fe@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G48fe@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G48fc@t))) (G3086@syntax-dispatch G48fc@t '_))) G48f0@t))) (G3086@syntax-dispatch G48f0@t 'each-any))) G48ee@ls))) (set! G3167@free-identifier=? (lambda (G4900@x G4901@y) (if (G2e43@id? G4900@x) (if (G2e43@id? G4901@y) (G2e4b@free-id=? G4900@x G4901@y) (assertion-violation 'free-identifier=? '"not an identifier" G4901@y)) (assertion-violation 'free-identifier=? '"not an identifier" G4900@x)))) (set! G3169@bound-identifier=? (lambda (G4904@x G4905@y) (if (G2e43@id? G4904@x) (if (G2e43@id? G4905@y) (G2e49@bound-id=? G4904@x G4905@y) (assertion-violation 'bound-identifier=? '"not an identifier" G4905@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G4904@x)))) (set! G316b@make-source-condition (lambda (G4908@x) ((lambda (G4912@G490d G4914@G490f G4916@G490e G491b@G490c G491d@make-source-condition G491f@G490a G4921@G490b G4923@source-condition? G4925@source-filename G4927@source-character) (begin (set! G4912@G490d (make-record-type-descriptor '&source-information &condition-rtd 'G4910 '#f '#f '#((immutable file-name) (immutable character)))) (set! G4914@G490f '#f) (set! G4916@G490e (make-record-constructor-descriptor G4912@G490d &condition-rcd G4914@G490f)) (set! G491b@G490c (record-predicate G4912@G490d)) (set! G491d@make-source-condition (record-constructor G4916@G490e)) (set! G491f@G490a (record-accessor G4912@G490d '0)) (set! G4921@G490b (record-accessor G4912@G490d '1)) (set! G4923@source-condition? (condition-predicate G4912@G490d)) (set! G4925@source-filename (condition-accessor G4912@G490d G491f@G490a)) (set! G4927@source-character (condition-accessor G4912@G490d G4921@G490b)) (if (pair? G4908@x) (G491d@make-source-condition (car G4908@x) (cdr G4908@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G316d@extract-position-condition (lambda (G4928@x) (G316b@make-source-condition (G316f@expression-position G4928@x)))) (set! G316f@expression-position (lambda (G492a@x) (if (G2e0b@stx? G492a@x) (begin '#f ((lambda (G492c@x) (if (G298a@G288a@annotation? G492c@x) (begin '#f (G298b@G288c@annotation-source G492c@x)) '#f)) (G2e0f@stx-expr G492a@x))) '#f))) (set! G3171@assertion-error (lambda (G492e@expr G492f@pos) (raise (condition (G4c26@G4b58@make-assertion-violation) (G4c34@G4b86@make-who-condition 'assert) (G4c06@G4af0@make-message-condition '"assertion failed") (G4c2c@G4b6d@make-irritants-condition (list G492e@expr)) (G316b@make-source-condition G492f@pos))))) (set! G3173@syntax-error (lambda (G4932@x . G4934@args) (begin (if (not (for-all string? G4934@args)) (assertion-violation 'syntax-error '"invalid argument" G4934@args) (void)) (raise (condition (G4c06@G4af0@make-message-condition (if (null? G4934@args) '"invalid syntax" (apply string-append G4934@args))) (G4c4e@G4bdc@make-syntax-violation (G317f@syntax->datum G4932@x) '#f) (G316d@extract-position-condition G4932@x) (G3175@extract-trace G4932@x)))))) (set! G3175@extract-trace (lambda (G4936@x) ((lambda (G493f@G493a G4941@G493c G4943@G493b G4948@G4939 G494a@make-trace G494c@G4938 G494e@trace? G4950@trace-form) (begin (set! G493f@G493a (make-record-type-descriptor '&trace &condition-rtd 'G493d '#f '#f '#((immutable form)))) (set! G4941@G493c '#f) (set! G4943@G493b (make-record-constructor-descriptor G493f@G493a &condition-rcd G4941@G493c)) (set! G4948@G4939 (record-predicate G493f@G493a)) (set! G494a@make-trace (record-constructor G4943@G493b)) (set! G494c@G4938 (record-accessor G493f@G493a '0)) (set! G494e@trace? (condition-predicate G493f@G493a)) (set! G4950@trace-form (condition-accessor G493f@G493a G494c@G4938)) ((letrec ((G4951@f (lambda (G4953@x) (if (G2e0b@stx? G4953@x) (apply condition (G494a@make-trace G4953@x) (map G4951@f (G2e15@stx-ae* G4953@x))) (if (G298a@G288a@annotation? G4953@x) (G494a@make-trace (G2e0d@make-stx G4953@x '() '() '())) (condition)))))) G4951@f) G4936@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3177@syntax-violation* (lambda (G4955@who G4956@msg G4957@form G4958@condition-object) (begin (if (not (string? G4956@msg)) (assertion-violation 'syntax-violation '"message is not a string" G4956@msg) (void)) ((lambda (G495d@who) (raise (condition (if G495d@who (G4c34@G4b86@make-who-condition G495d@who) (condition)) (G4c06@G4af0@make-message-condition G4956@msg) G4958@condition-object (G316d@extract-position-condition G4957@form) (G3175@extract-trace G4957@form)))) (if ((lambda (G495f@t) (if G495f@t G495f@t (begin '#f (symbol? G4955@who)))) (string? G4955@who)) G4955@who (if (not G4955@who) ((lambda (G4961@t) ((lambda (G4963@ls/false) (if (if G4963@ls/false (begin '#f (apply (lambda (G4965@id) (G2e43@id? G4965@id)) G4963@ls/false)) '#f) (apply (lambda (G4967@id) (G317f@syntax->datum G4967@id)) G4963@ls/false) ((lambda (G4969@t) ((lambda (G496b@ls/false) (if (if G496b@ls/false (begin '#f (apply (lambda (G496d@id G496e@rest) (G2e43@id? G496d@id)) G496b@ls/false)) '#f) (apply (lambda (G4971@id G4972@rest) (G317f@syntax->datum G4971@id)) G496b@ls/false) ((lambda (G4975@t) ((lambda (G4977@ls/false) (if G4977@ls/false (apply (lambda () '#f) G4977@ls/false) (G3179@syntax-violation '#f '"invalid syntax" G4975@t))) (G3086@syntax-dispatch G4975@t '_))) G4969@t))) (G3086@syntax-dispatch G4969@t '(any . any)))) G4961@t))) (G3086@syntax-dispatch G4961@t 'any))) G4957@form) (assertion-violation 'syntax-violation '"invalid who argument" G4955@who))))))) (set! G3179@syntax-violation (lambda G4987 ((lambda (G4988) (if (= G4988 '3) (apply (lambda (G4979@who G497a@msg G497b@form) (G3179@syntax-violation G4979@who G497a@msg G497b@form '#f)) G4987) (if (= G4988 '4) (apply (lambda (G497f@who G4980@msg G4981@form G4982@subform) (G3177@syntax-violation* G497f@who G4980@msg G4981@form (G4c4e@G4bdc@make-syntax-violation (G317f@syntax->datum G4981@form) (G317f@syntax->datum G4982@subform)))) G4987) (error 'apply '"invalid arg count")))) (length G4987)))) (set! G317b@identifier? (lambda (G4989@x) (G2e43@id? G4989@x))) (set! G317d@datum->syntax (lambda (G498b@id G498c@datum) (if (G2e43@id? G498b@id) (G2e21@datum->stx G498b@id G498c@datum) (assertion-violation 'datum->syntax '"not an identifier" G498b@id)))) (set! G317f@syntax->datum (lambda (G498f@x) (G2e59@stx->datum G498f@x))) (set! G3181@compile-r6rs-top-level (lambda (G4991@x*) (call-with-values (lambda () (G3105@top-level-expander G4991@x*)) (lambda (G4995@G4993 G4996@G4994) ((lambda (G4999@invoke-code G499a@lib*) (lambda () (begin (for-each G2c38@G2acd@invoke-library G499a@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G29f9@G29a1@expanded->core G4999@invoke-code)) (void)) (eval-core (G29f9@G29a1@expanded->core G4999@invoke-code))))) G4996@G4994 G4995@G4993))))) (set! G3183@pre-compile-r6rs-top-level (lambda (G499d@x*) (call-with-values (lambda () (G3105@top-level-expander G499d@x*)) (lambda (G49a1@G499f G49a2@G49a0) ((lambda (G49a5@invoke-code G49a6@lib*) (begin (for-each G2c38@G2acd@invoke-library G49a6@lib*) (G2993@G289c@compile-core (G29f9@G29a1@expanded->core G49a5@invoke-code)))) G49a2@G49a0 G49a1@G499f))))) (set! G3185@interaction-environment ((lambda (G49a9@the-env) (lambda () ((lambda (G49ab@t) (if G49ab@t G49ab@t (begin '#f ((lambda (G49ad@lib G49ae@rib) (begin ((lambda (G49b1@subst) (begin (G2de2@set-rib-sym*! G49ae@rib (map car G49b1@subst)) (G2de4@set-rib-mark**! G49ae@rib (map (lambda (G49b3@x) G2db7@top-mark*) G49b1@subst)) (G2de6@set-rib-label*! G49ae@rib (map cdr G49b1@subst)))) (G2c0d@G2a77@library-subst G49ad@lib)) ((lambda (G49b5@env) (begin (set! G49a9@the-env G49b5@env) G49b5@env)) (G3135@make-interaction-env G49ae@rib '() '())))) (G2c31@G2abf@find-library-by-name '(mosh interaction)) (G2dee@make-cache-rib))))) G49a9@the-env))) '#f)) (set! G3187@top-level-context (G2995@G28a0@make-parameter '#f)) (begin (set! G4ac4@G3187@top-level-context G3187@top-level-context) (set! G4ac3@G3185@interaction-environment G3185@interaction-environment) (set! G4ac2@G3183@pre-compile-r6rs-top-level G3183@pre-compile-r6rs-top-level) (set! G4ac1@G3181@compile-r6rs-top-level G3181@compile-r6rs-top-level) (set! G4ac0@G317f@syntax->datum G317f@syntax->datum) (set! G4abf@G317d@datum->syntax G317d@datum->syntax) (set! G4abe@G317b@identifier? G317b@identifier?) (set! G4abd@G3179@syntax-violation G3179@syntax-violation) (set! G4abc@G3177@syntax-violation* G3177@syntax-violation*) (set! G4abb@G3175@extract-trace G3175@extract-trace) (set! G4aba@G3173@syntax-error G3173@syntax-error) (set! G4ab9@G3171@assertion-error G3171@assertion-error) (set! G4ab8@G316f@expression-position G316f@expression-position) (set! G4ab7@G316d@extract-position-condition G316d@extract-position-condition) (set! G4ab6@G316b@make-source-condition G316b@make-source-condition) (set! G4ab5@G3169@bound-identifier=? G3169@bound-identifier=?) (set! G4ab4@G3167@free-identifier=? G3167@free-identifier=?) (set! G4ab3@G3165@generate-temporaries G3165@generate-temporaries) (set! G4ab2@G3163@make-export-env/macros G3163@make-export-env/macros) (set! G4ab1@G3161@make-export-subst G3161@make-export-subst) (set! G4ab0@G315f@build-exports G315f@build-exports) (set! G4aaf@G315d@rev-map-append G315d@rev-map-append) (set! G4aae@G315b@boot-library-expand G315b@boot-library-expand) (set! G4aad@G3159@library-expander G3159@library-expander) (set! G4aac@G3157@eval G3157@eval) (set! G4aab@G3155@expand G3155@expand) (set! G4aaa@G3153@scheme-report-environment G3153@scheme-report-environment) (set! G4aa9@G3151@null-environment G3151@null-environment) (set! G4aa8@G314f@environment G314f@environment) (set! G4aa7@G314d@environment-symbols G314d@environment-symbols) (set! G4aa6@G314b@environment? G314b@environment?) (set! G4aa5@G3149@parse-binding G3149@parse-binding) (set! G4aa4@G3147@environment-bindings G3147@environment-bindings) (set! G4aa3@G3145@interaction-environment-symbols G3145@interaction-environment-symbols) (set! G4aa2@G3143@rp G3143@rp) (set! G4aa1@G3141@set-interaction-env-locs! G3141@set-interaction-env-locs!) (set! G4aa0@G313f@set-interaction-env-r! G313f@set-interaction-env-r!) (set! G4a9f@G313d@set-interaction-env-rib! G313d@set-interaction-env-rib!) (set! G4a9e@G313b@interaction-env-locs G313b@interaction-env-locs) (set! G4a9d@G3139@interaction-env-r G3139@interaction-env-r) (set! G4a9c@G3137@interaction-env-rib G3137@interaction-env-rib) (set! G4a9b@G3135@make-interaction-env G3135@make-interaction-env) (set! G4a9a@G3133@interaction-env? G3133@interaction-env?) (set! G4a99@G312e@G3126 G312e@G3126) (set! G4a98@G312c@G3127 G312c@G3127) (set! G4a97@G312a@G3125 G312a@G3125) (set! G4a96@G3124@rp G3124@rp) (set! G4a95@G3122@set-env-itc! G3122@set-env-itc!) (set! G4a94@G3120@set-env-labels! G3120@set-env-labels!) (set! G4a93@G311e@set-env-names! G311e@set-env-names!) (set! G4a92@G311c@env-itc G311c@env-itc) (set! G4a91@G311a@env-labels G311a@env-labels) (set! G4a90@G3118@env-names G3118@env-names) (set! G4a8f@G3116@make-env G3116@make-env) (set! G4a8e@G3114@env? G3114@env?) (set! G4a8d@G310f@G3107 G310f@G3107) (set! G4a8c@G310d@G3108 G310d@G3108) (set! G4a8b@G310b@G3106 G310b@G3106) (set! G4a8a@G3105@top-level-expander G3105@top-level-expander) (set! G4a89@G3103@parse-top-level-program G3103@parse-top-level-program) (set! G4a88@G3101@core-library-expander G3101@core-library-expander) (set! G4a87@G30ff@library-body-expander G30ff@library-body-expander) (set! G4a86@G30fd@chi-interaction-expr G30fd@chi-interaction-expr) (set! G4a85@G30fb@chi-library-internal G30fb@chi-library-internal) (set! G4a84@G30f9@imp-collector G30f9@imp-collector) (set! G4a83@G30f7@vis-collector G30f7@vis-collector) (set! G4a82@G30f5@inv-collector G30f5@inv-collector) (set! G4a81@G30f3@make-collector G30f3@make-collector) (set! G4a80@G30f1@make-top-rib G30f1@make-top-rib) (set! G4a7f@G30ef@parse-import-spec* G30ef@parse-import-spec*) (set! G4a7e@G30ed@parse-library G30ed@parse-library) (set! G4a7d@G30eb@parse-library-name G30eb@parse-library-name) (set! G4a7c@G30e9@parse-exports G30e9@parse-exports) (set! G4a7b@G30e7@expand-transformer G30e7@expand-transformer) (set! G4a7a@G30e5@chi-body* G30e5@chi-body*) (set! G4a79@G30e3@chi-internal-module G30e3@chi-internal-module) (set! G4a78@G30e1@module-interface-exp-id* G30e1@module-interface-exp-id*) (set! G4a77@G30df@set-module-interface-exp-lab-vec! G30df@set-module-interface-exp-lab-vec!) (set! G4a76@G30dd@set-module-interface-exp-id-vec! G30dd@set-module-interface-exp-id-vec!) (set! G4a75@G30db@set-module-interface-first-mark! G30db@set-module-interface-first-mark!) (set! G4a74@G30d9@module-interface-exp-lab-vec G30d9@module-interface-exp-lab-vec) (set! G4a73@G30d7@module-interface-exp-id-vec G30d7@module-interface-exp-id-vec) (set! G4a72@G30d5@module-interface-first-mark G30d5@module-interface-first-mark) (set! G4a71@G30d3@make-module-interface G30d3@make-module-interface) (set! G4a70@G30d1@module-interface? G30d1@module-interface?) (set! G4a6f@G30cc@G30c4 G30cc@G30c4) (set! G4a6e@G30ca@G30c5 G30ca@G30c5) (set! G4a6d@G30c8@G30c3 G30c8@G30c3) (set! G4a6c@G30c2@parse-module G30c2@parse-module) (set! G4a6b@G30c0@chi-internal G30c0@chi-internal) (set! G4a6a@G30be@find-dups G30be@find-dups) (set! G4a69@G30bc@find-bound=? G30bc@find-bound=?) (set! G4a68@G30ba@chi-rhs* G30ba@chi-rhs*) (set! G4a67@G30b8@expand-interaction-rhs*/init* G30b8@expand-interaction-rhs*/init*) (set! G4a66@G30b6@chi-rhs G30b6@chi-rhs) (set! G4a65@G30b4@chi-defun G30b4@chi-defun) (set! G4a64@G30b2@chi-lambda-clause* G30b2@chi-lambda-clause*) (set! G4a63@G30b0@chi-lambda-clause G30b0@chi-lambda-clause) (set! G4a62@G30ae@verify-formals G30ae@verify-formals) (set! G4a61@G30ac@chi-set! G30ac@chi-set!) (set! G4a60@G30aa@chi-expr G30aa@chi-expr) (set! G4a5f@G30a8@chi-application G30a8@chi-application) (set! G4a5e@G30a6@chi-expr* G30a6@chi-expr*) (set! G4a5d@G30a4@chi-global-macro G30a4@chi-global-macro) (set! G4a5c@G30a2@chi-local-macro G30a2@chi-local-macro) (set! G4a5b@G30a0@chi-macro G30a0@chi-macro) (set! G4a5a@G309e@do-macro-call G309e@do-macro-call) (set! G4a59@G309c@local-macro-transformer G309c@local-macro-transformer) (set! G4a58@G309a@macro-transformer G309a@macro-transformer) (set! G4a57@G3098@symbol-macro G3098@symbol-macro) (set! G4a56@G3096@file-options-macro G3096@file-options-macro) (set! G4a55@G3094@core-macro-transformer G3094@core-macro-transformer) (set! G4a54@G3092@syntax-transformer G3092@syntax-transformer) (set! G4a53@G3090@ellipsis-map G3090@ellipsis-map) (set! G4a52@G308e@syntax-case-transformer G308e@syntax-case-transformer) (set! G4a51@G308c@verify-literals G308c@verify-literals) (set! G4a50@G308a@underscore? G308a@underscore?) (set! G4a4f@G3088@ellipsis? G3088@ellipsis?) (set! G4a4e@G3086@syntax-dispatch G3086@syntax-dispatch) (set! G4a4d@G3084@convert-pattern G3084@convert-pattern) (set! G4a4c@G3082@foreign-call-transformer G3082@foreign-call-transformer) (set! G4a4b@G3080@parameterize-macro G3080@parameterize-macro) (set! G4a4a@G307e@incorrect-usage-macro G307e@incorrect-usage-macro) (set! G4a49@G307c@define-condition-type-macro G307c@define-condition-type-macro) (set! G4a48@G307a@define-record-type-macro G307a@define-record-type-macro) (set! G4a47@G3078@define-struct-macro G3078@define-struct-macro) (set! G4a46@G3076@quasisyntax-macro G3076@quasisyntax-macro) (set! G4a45@G3074@quasiquote-macro G3074@quasiquote-macro) (set! G4a44@G3072@syntax-rules-macro G3072@syntax-rules-macro) (set! G4a43@G3070@include-into-macro G3070@include-into-macro) (set! G4a42@G306e@include-macro G306e@include-macro) (set! G4a41@G306c@do-include G306c@do-include) (set! G4a40@G306a@cond-macro G306a@cond-macro) (set! G4a3f@G3068@and-macro G3068@and-macro) (set! G4a3e@G3066@or-macro G3066@or-macro) (set! G4a3d@G3064@let*-macro G3064@let*-macro) (set! G4a3c@G3062@do-macro G3062@do-macro) (set! G4a3b@G3060@identifier-syntax-macro G3060@identifier-syntax-macro) (set! G4a3a@G305e@endianness-macro G305e@endianness-macro) (set! G4a39@G305c@assert-macro G305c@assert-macro) (set! G4a38@G305a@delay-macro G305a@delay-macro) (set! G4a37@G3058@time-macro G3058@time-macro) (set! G4a36@G3056@define-enumeration-macro G3056@define-enumeration-macro) (set! G4a35@G3054@guard-macro G3054@guard-macro) (set! G4a34@G3052@trace-letrec-syntax-macro G3052@trace-letrec-syntax-macro) (set! G4a33@G3050@trace-let-syntax-macro G3050@trace-let-syntax-macro) (set! G4a32@G304e@trace-let/rec-syntax G304e@trace-let/rec-syntax) (set! G4a31@G304c@trace-define-syntax-macro G304c@trace-define-syntax-macro) (set! G4a30@G304a@trace-define-macro G304a@trace-define-macro) (set! G4a2f@G3048@trace-lambda-macro G3048@trace-lambda-macro) (set! G4a2e@G3046@let*-values-macro G3046@let*-values-macro) (set! G4a2d@G3044@let-values-macro G3044@let-values-macro) (set! G4a2c@G3042@let-macro G3042@let-macro) (set! G4a2b@G3040@invalid-fmls-error G3040@invalid-fmls-error) (set! G4a2a@G303e@with-syntax-macro G303e@with-syntax-macro) (set! G4a29@G303c@bless G303c@bless) (set! G4a28@G303a@lambda-transformer G303a@lambda-transformer) (set! G4a27@G3038@case-lambda-transformer G3038@case-lambda-transformer) (set! G4a26@G3036@quote-transformer G3036@quote-transformer) (set! G4a25@G3034@case-macro G3034@case-macro) (set! G4a24@G3032@if-transformer G3032@if-transformer) (set! G4a23@G3030@unless-macro G3030@unless-macro) (set! G4a22@G302e@when-macro G302e@when-macro) (set! G4a21@G302c@record-constructor-descriptor-transformer G302c@record-constructor-descriptor-transformer) (set! G4a20@G302a@record-type-descriptor-transformer G302a@record-type-descriptor-transformer) (set! G4a1f@G3028@type-descriptor-transformer G3028@type-descriptor-transformer) (set! G4a1e@G3026@fluid-let-syntax-transformer G3026@fluid-let-syntax-transformer) (set! G4a1d@G3024@letrec*-transformer G3024@letrec*-transformer) (set! G4a1c@G3022@letrec-transformer G3022@letrec-transformer) (set! G4a1b@G3020@letrec-helper G3020@letrec-helper) (set! G4a1a@G301e@add-lexicals G301e@add-lexicals) (set! G4a19@G301c@add-lexical G301c@add-lexical) (set! G4a18@G301a@set-lexical-mutable! G301a@set-lexical-mutable!) (set! G4a17@G3018@lexical-mutable? G3018@lexical-mutable?) (set! G4a16@G3016@lexical-var G3016@lexical-var) (set! G4a15@G3014@scheme-stx G3014@scheme-stx) (set! G4a14@G3012@scheme-stx-hashtable G3012@scheme-stx-hashtable) (set! G4a13@G3010@parse-define-syntax G3010@parse-define-syntax) (set! G4a12@G300e@parse-define G300e@parse-define) (set! G4a11@G2e8a@make-eval-transformer G2e8a@make-eval-transformer) (set! G4a10@G2e88@variable-transformer-procedure G2e88@variable-transformer-procedure) (set! G4a0f@G2e86@variable-transformer? G2e86@variable-transformer?) (set! G4a0e@G2e84@make-variable-transformer G2e84@make-variable-transformer) (set! G4a0d@G2e82@sanitize-binding G2e82@sanitize-binding) (set! G4a0c@G2e6b@syntax-type G2e6b@syntax-type) (set! G4a0b@G2e69@raise-unbound-error G2e69@raise-unbound-error) (set! G4a0a@G2e67@binding-value G2e67@binding-value) (set! G4a09@G2e65@binding-type G2e65@binding-type) (set! G4a08@G2e63@make-binding G2e63@make-binding) (set! G4a07@G2e61@label->binding G2e61@label->binding) (set! G4a06@G2e5f@id->real-label G2e5f@id->real-label) (set! G4a05@G2e5d@id->label G2e5d@id->label) (set! G4a04@G2e5b@same-marks*? G2e5b@same-marks*?) (set! G4a03@G2e59@stx->datum G2e59@stx->datum) (set! G4a02@G2e57@strip G2e57@strip) (set! G4a01@G2e55@strip-annotations G2e55@strip-annotations) (set! G4a00@G2e53@self-evaluating? G2e53@self-evaluating?) (set! G49ff@G2e51@bound-id-member? G2e51@bound-id-member?) (set! G49fe@G2e4f@distinct-bound-ids? G2e4f@distinct-bound-ids?) (set! G49fd@G2e4d@valid-bound-ids? G2e4d@valid-bound-ids?) (set! G49fc@G2e4b@free-id=? G2e4b@free-id=?) (set! G49fb@G2e49@bound-id=? G2e49@bound-id=?) (set! G49fa@G2e47@same-marks? G2e47@same-marks?) (set! G49f9@G2e45@id->sym G2e45@id->sym) (set! G49f8@G2e43@id? G2e43@id?) (set! G49f7@G2e41@syntax->list G2e41@syntax->list) (set! G49f6@G2e3f@syntax-cdr G2e3f@syntax-cdr) (set! G49f5@G2e3d@syntax-car G2e3d@syntax-car) (set! G49f4@G2e3b@syntax-list? G2e3b@syntax-list?) (set! G49f3@G2e39@syntax-null? G2e39@syntax-null?) (set! G49f2@G2e37@syntax-vector? G2e37@syntax-vector?) (set! G49f1@G2e35@syntax-pair? G2e35@syntax-pair?) (set! G49f0@G2e33@syntax-vector->list G2e33@syntax-vector->list) (set! G49ef@G2e31@syntax-kind? G2e31@syntax-kind?) (set! G49ee@G2e2f@add-subst G2e2f@add-subst) (set! G49ed@G2e2d@add-mark G2e2d@add-mark) (set! G49ec@G2e2b@mkstx G2e2b@mkstx) (set! G49eb@G2e29@join-wraps G2e29@join-wraps) (set! G49ea@G2e27@anti-mark? G2e27@anti-mark?) (set! G49e9@G2e25@anti-mark G2e25@anti-mark) (set! G49e8@G2e23@gen-mark G2e23@gen-mark) (set! G49e7@G2e21@datum->stx G2e21@datum->stx) (set! G49e6@G2e1f@rp G2e1f@rp) (set! G49e5@G2e1d@set-stx-ae*! G2e1d@set-stx-ae*!) (set! G49e4@G2e1b@set-stx-subst*! G2e1b@set-stx-subst*!) (set! G49e3@G2e19@set-stx-mark*! G2e19@set-stx-mark*!) (set! G49e2@G2e17@set-stx-expr! G2e17@set-stx-expr!) (set! G49e1@G2e15@stx-ae* G2e15@stx-ae*) (set! G49e0@G2e13@stx-subst* G2e13@stx-subst*) (set! G49df@G2e11@stx-mark* G2e11@stx-mark*) (set! G49de@G2e0f@stx-expr G2e0f@stx-expr) (set! G49dd@G2e0d@make-stx G2e0d@make-stx) (set! G49dc@G2e0b@stx? G2e0b@stx?) (set! G49db@G2e06@G2dfe G2e06@G2dfe) (set! G49da@G2e04@G2dff G2e04@G2dff) (set! G49d9@G2e02@G2dfd G2e02@G2dfd) (set! G49d8@G2dfc@make-full-rib G2dfc@make-full-rib) (set! G49d7@G2dfa@unseal-rib! G2dfa@unseal-rib!) (set! G49d6@G2df8@seal-rib! G2df8@seal-rib!) (set! G49d5@G2df6@make-rib-map G2df6@make-rib-map) (set! G49d4@G2df4@extend-rib/nc! G2df4@extend-rib/nc!) (set! G49d3@G2df2@extend-rib! G2df2@extend-rib!) (set! G49d2@G2df0@find-label G2df0@find-label) (set! G49d1@G2dee@make-cache-rib G2dee@make-cache-rib) (set! G49d0@G2dec@make-empty-rib G2dec@make-empty-rib) (set! G49cf@G2dea@set-rib-cache! G2dea@set-rib-cache!) (set! G49ce@G2de8@set-rib-sealed/freq! G2de8@set-rib-sealed/freq!) (set! G49cd@G2de6@set-rib-label*! G2de6@set-rib-label*!) (set! G49cc@G2de4@set-rib-mark**! G2de4@set-rib-mark**!) (set! G49cb@G2de2@set-rib-sym*! G2de2@set-rib-sym*!) (set! G49ca@G2de0@rib-cache G2de0@rib-cache) (set! G49c9@G2dde@rib-sealed/freq G2dde@rib-sealed/freq) (set! G49c8@G2ddc@rib-label* G2ddc@rib-label*) (set! G49c7@G2dda@rib-mark** G2dda@rib-mark**) (set! G49c6@G2dd8@rib-sym* G2dd8@rib-sym*) (set! G49c5@G2dd6@make-rib G2dd6@make-rib) (set! G49c4@G2dd4@rib? G2dd4@rib?) (set! G49c3@G2dcf@G2dc7 G2dcf@G2dc7) (set! G49c2@G2dcd@G2dc8 G2dcd@G2dc8) (set! G49c1@G2dcb@G2dc6 G2dcb@G2dc6) (set! G49c0@G2dc5@gen-define-label G2dc5@gen-define-label) (set! G49bf@G2dc3@gen-define-label+loc G2dc3@gen-define-label+loc) (set! G49be@G2dc1@gen-top-level-label G2dc1@gen-top-level-label) (set! G49bd@G2dbf@gen-label G2dbf@gen-label) (set! G49bc@G2dbd@gen-global G2dbd@gen-global) (set! G49bb@G2dbb@gen-lexical G2dbb@gen-lexical) (set! G49ba@G2db9@top-marked? G2db9@top-marked?) (set! G49b9@G2db7@top-mark* G2db7@top-mark*) (set! G49b8@G2db2@set-union G2db2@set-union) (set! G49b7@G2db0@set-cons G2db0@set-cons) (G2c2e@G2ab9@current-library-expander G3159@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4ace@G4ac9 G4ad0@G4acb G4ad2@G4aca G4ad7@&condition? G4ad9@make-&condition G4adb@&condition-rtd G4add@&condition-rcd G4ae5@G4ae0 G4ae7@G4ae2 G4ae9@G4ae1 G4aee@G4adf G4af0@make-message-condition G4af2@G4ade G4af4@message-condition? G4af6@condition-message G4afd@G4af8 G4aff@G4afa G4b01@G4af9 G4b06@G4af7 G4b08@make-warning G4b0a@warning? G4b11@G4b0c G4b13@G4b0e G4b15@G4b0d G4b1a@G4b0b G4b1c@make-serious-condition G4b1e@serious-condition? G4b25@G4b20 G4b27@G4b22 G4b29@G4b21 G4b2e@G4b1f G4b30@make-error G4b32@error? G4b39@G4b34 G4b3b@G4b36 G4b3d@G4b35 G4b42@G4b33 G4b44@make-violation G4b46@violation? G4b4d@G4b48 G4b4f@G4b4a G4b51@G4b49 G4b56@G4b47 G4b58@make-assertion-violation G4b5a@assertion-violation? G4b62@G4b5d G4b64@G4b5f G4b66@G4b5e G4b6b@G4b5c G4b6d@make-irritants-condition G4b6f@G4b5b G4b71@irritants-condition? G4b73@condition-irritants G4b7b@G4b76 G4b7d@G4b78 G4b7f@G4b77 G4b84@G4b75 G4b86@make-who-condition G4b88@G4b74 G4b8a@who-condition? G4b8c@condition-who G4b93@G4b8e G4b95@G4b90 G4b97@G4b8f G4b9c@G4b8d G4b9e@make-non-continuable-violation G4ba0@non-continuable-violation? G4ba7@G4ba2 G4ba9@G4ba4 G4bab@G4ba3 G4bb0@G4ba1 G4bb2@make-implementation-restriction-violation G4bb4@implementation-restriction-violation? G4bbb@G4bb6 G4bbd@G4bb8 G4bbf@G4bb7 G4bc4@G4bb5 G4bc6@make-lexical-violation G4bc8@lexical-violation? G4bd1@G4bcc G4bd3@G4bce G4bd5@G4bcd G4bda@G4bcb G4bdc@make-syntax-violation G4bde@G4bc9 G4be0@G4bca G4be2@syntax-violation? G4be4@syntax-violation-form G4be6@syntax-violation-subform G4bed@G4be8 G4bef@G4bea G4bf1@G4be9 G4bf6@G4be7 G4bf8@make-undefined-violation G4bfa@undefined-violation?) (begin (set! G4ace@G4ac9 (make-record-type-descriptor '&condition '#f 'G4acc '#f '#f '#())) (set! G4ad0@G4acb '#f) (set! G4ad2@G4aca (make-record-constructor-descriptor G4ace@G4ac9 '#f G4ad0@G4acb)) (set! G4ad7@&condition? (record-predicate G4ace@G4ac9)) (set! G4ad9@make-&condition (record-constructor G4ad2@G4aca)) (set! G4adb@&condition-rtd G4ace@G4ac9) (set! G4add@&condition-rcd G4ad2@G4aca) (set! G4ae5@G4ae0 (make-record-type-descriptor '&message G4ace@G4ac9 'G4ae3 '#f '#f '#((immutable message)))) (set! G4ae7@G4ae2 '#f) (set! G4ae9@G4ae1 (make-record-constructor-descriptor G4ae5@G4ae0 G4ad2@G4aca G4ae7@G4ae2)) (set! G4aee@G4adf (record-predicate G4ae5@G4ae0)) (set! G4af0@make-message-condition (record-constructor G4ae9@G4ae1)) (set! G4af2@G4ade (record-accessor G4ae5@G4ae0 '0)) (set! G4af4@message-condition? (condition-predicate G4ae5@G4ae0)) (set! G4af6@condition-message (condition-accessor G4ae5@G4ae0 G4af2@G4ade)) (set! G4afd@G4af8 (make-record-type-descriptor '&warning G4ace@G4ac9 'G4afb '#f '#f '#())) (set! G4aff@G4afa '#f) (set! G4b01@G4af9 (make-record-constructor-descriptor G4afd@G4af8 G4ad2@G4aca G4aff@G4afa)) (set! G4b06@G4af7 (record-predicate G4afd@G4af8)) (set! G4b08@make-warning (record-constructor G4b01@G4af9)) (set! G4b0a@warning? (condition-predicate G4afd@G4af8)) (set! G4b11@G4b0c (make-record-type-descriptor '&serious G4ace@G4ac9 'G4b0f '#f '#f '#())) (set! G4b13@G4b0e '#f) (set! G4b15@G4b0d (make-record-constructor-descriptor G4b11@G4b0c G4ad2@G4aca G4b13@G4b0e)) (set! G4b1a@G4b0b (record-predicate G4b11@G4b0c)) (set! G4b1c@make-serious-condition (record-constructor G4b15@G4b0d)) (set! G4b1e@serious-condition? (condition-predicate G4b11@G4b0c)) (set! G4b25@G4b20 (make-record-type-descriptor '&error G4b11@G4b0c 'G4b23 '#f '#f '#())) (set! G4b27@G4b22 '#f) (set! G4b29@G4b21 (make-record-constructor-descriptor G4b25@G4b20 G4b15@G4b0d G4b27@G4b22)) (set! G4b2e@G4b1f (record-predicate G4b25@G4b20)) (set! G4b30@make-error (record-constructor G4b29@G4b21)) (set! G4b32@error? (condition-predicate G4b25@G4b20)) (set! G4b39@G4b34 (make-record-type-descriptor '&violation G4b11@G4b0c 'G4b37 '#f '#f '#())) (set! G4b3b@G4b36 '#f) (set! G4b3d@G4b35 (make-record-constructor-descriptor G4b39@G4b34 G4b15@G4b0d G4b3b@G4b36)) (set! G4b42@G4b33 (record-predicate G4b39@G4b34)) (set! G4b44@make-violation (record-constructor G4b3d@G4b35)) (set! G4b46@violation? (condition-predicate G4b39@G4b34)) (set! G4b4d@G4b48 (make-record-type-descriptor '&assertion G4b39@G4b34 'G4b4b '#f '#f '#())) (set! G4b4f@G4b4a '#f) (set! G4b51@G4b49 (make-record-constructor-descriptor G4b4d@G4b48 G4b3d@G4b35 G4b4f@G4b4a)) (set! G4b56@G4b47 (record-predicate G4b4d@G4b48)) (set! G4b58@make-assertion-violation (record-constructor G4b51@G4b49)) (set! G4b5a@assertion-violation? (condition-predicate G4b4d@G4b48)) (set! G4b62@G4b5d (make-record-type-descriptor '&irritants G4ace@G4ac9 'G4b60 '#f '#f '#((immutable irritants)))) (set! G4b64@G4b5f '#f) (set! G4b66@G4b5e (make-record-constructor-descriptor G4b62@G4b5d G4ad2@G4aca G4b64@G4b5f)) (set! G4b6b@G4b5c (record-predicate G4b62@G4b5d)) (set! G4b6d@make-irritants-condition (record-constructor G4b66@G4b5e)) (set! G4b6f@G4b5b (record-accessor G4b62@G4b5d '0)) (set! G4b71@irritants-condition? (condition-predicate G4b62@G4b5d)) (set! G4b73@condition-irritants (condition-accessor G4b62@G4b5d G4b6f@G4b5b)) (set! G4b7b@G4b76 (make-record-type-descriptor '&who G4ace@G4ac9 'G4b79 '#f '#f '#((immutable who)))) (set! G4b7d@G4b78 '#f) (set! G4b7f@G4b77 (make-record-constructor-descriptor G4b7b@G4b76 G4ad2@G4aca G4b7d@G4b78)) (set! G4b84@G4b75 (record-predicate G4b7b@G4b76)) (set! G4b86@make-who-condition (record-constructor G4b7f@G4b77)) (set! G4b88@G4b74 (record-accessor G4b7b@G4b76 '0)) (set! G4b8a@who-condition? (condition-predicate G4b7b@G4b76)) (set! G4b8c@condition-who (condition-accessor G4b7b@G4b76 G4b88@G4b74)) (set! G4b93@G4b8e (make-record-type-descriptor '&non-continuable G4b39@G4b34 'G4b91 '#f '#f '#())) (set! G4b95@G4b90 '#f) (set! G4b97@G4b8f (make-record-constructor-descriptor G4b93@G4b8e G4b3d@G4b35 G4b95@G4b90)) (set! G4b9c@G4b8d (record-predicate G4b93@G4b8e)) (set! G4b9e@make-non-continuable-violation (record-constructor G4b97@G4b8f)) (set! G4ba0@non-continuable-violation? (condition-predicate G4b93@G4b8e)) (set! G4ba7@G4ba2 (make-record-type-descriptor '&implementation-restriction G4b39@G4b34 'G4ba5 '#f '#f '#())) (set! G4ba9@G4ba4 '#f) (set! G4bab@G4ba3 (make-record-constructor-descriptor G4ba7@G4ba2 G4b3d@G4b35 G4ba9@G4ba4)) (set! G4bb0@G4ba1 (record-predicate G4ba7@G4ba2)) (set! G4bb2@make-implementation-restriction-violation (record-constructor G4bab@G4ba3)) (set! G4bb4@implementation-restriction-violation? (condition-predicate G4ba7@G4ba2)) (set! G4bbb@G4bb6 (make-record-type-descriptor '&lexical G4b39@G4b34 'G4bb9 '#f '#f '#())) (set! G4bbd@G4bb8 '#f) (set! G4bbf@G4bb7 (make-record-constructor-descriptor G4bbb@G4bb6 G4b3d@G4b35 G4bbd@G4bb8)) (set! G4bc4@G4bb5 (record-predicate G4bbb@G4bb6)) (set! G4bc6@make-lexical-violation (record-constructor G4bbf@G4bb7)) (set! G4bc8@lexical-violation? (condition-predicate G4bbb@G4bb6)) (set! G4bd1@G4bcc (make-record-type-descriptor '&syntax G4b39@G4b34 'G4bcf '#f '#f '#((immutable form) (immutable subform)))) (set! G4bd3@G4bce '#f) (set! G4bd5@G4bcd (make-record-constructor-descriptor G4bd1@G4bcc G4b3d@G4b35 G4bd3@G4bce)) (set! G4bda@G4bcb (record-predicate G4bd1@G4bcc)) (set! G4bdc@make-syntax-violation (record-constructor G4bd5@G4bcd)) (set! G4bde@G4bc9 (record-accessor G4bd1@G4bcc '0)) (set! G4be0@G4bca (record-accessor G4bd1@G4bcc '1)) (set! G4be2@syntax-violation? (condition-predicate G4bd1@G4bcc)) (set! G4be4@syntax-violation-form (condition-accessor G4bd1@G4bcc G4bde@G4bc9)) (set! G4be6@syntax-violation-subform (condition-accessor G4bd1@G4bcc G4be0@G4bca)) (set! G4bed@G4be8 (make-record-type-descriptor '&undefined G4b39@G4b34 'G4beb '#f '#f '#())) (set! G4bef@G4bea '#f) (set! G4bf1@G4be9 (make-record-constructor-descriptor G4bed@G4be8 G4b3d@G4b35 G4bef@G4bea)) (set! G4bf6@G4be7 (record-predicate G4bed@G4be8)) (set! G4bf8@make-undefined-violation (record-constructor G4bf1@G4be9)) (set! G4bfa@undefined-violation? (condition-predicate G4bed@G4be8)) (begin (set! G4c59@G4bfa@undefined-violation? G4bfa@undefined-violation?) (set! G4c58@G4bf8@make-undefined-violation G4bf8@make-undefined-violation) (set! G4c57@G4bf6@G4be7 G4bf6@G4be7) (set! G4c56@G4bf1@G4be9 G4bf1@G4be9) (set! G4c55@G4bef@G4bea G4bef@G4bea) (set! G4c54@G4bed@G4be8 G4bed@G4be8) (set! G4c53@G4be6@syntax-violation-subform G4be6@syntax-violation-subform) (set! G4c52@G4be4@syntax-violation-form G4be4@syntax-violation-form) (set! G4c51@G4be2@syntax-violation? G4be2@syntax-violation?) (set! G4c50@G4be0@G4bca G4be0@G4bca) (set! G4c4f@G4bde@G4bc9 G4bde@G4bc9) (set! G4c4e@G4bdc@make-syntax-violation G4bdc@make-syntax-violation) (set! G4c4d@G4bda@G4bcb G4bda@G4bcb) (set! G4c4c@G4bd5@G4bcd G4bd5@G4bcd) (set! G4c4b@G4bd3@G4bce G4bd3@G4bce) (set! G4c4a@G4bd1@G4bcc G4bd1@G4bcc) (set! G4c49@G4bc8@lexical-violation? G4bc8@lexical-violation?) (set! G4c48@G4bc6@make-lexical-violation G4bc6@make-lexical-violation) (set! G4c47@G4bc4@G4bb5 G4bc4@G4bb5) (set! G4c46@G4bbf@G4bb7 G4bbf@G4bb7) (set! G4c45@G4bbd@G4bb8 G4bbd@G4bb8) (set! G4c44@G4bbb@G4bb6 G4bbb@G4bb6) (set! G4c43@G4bb4@implementation-restriction-violation? G4bb4@implementation-restriction-violation?) (set! G4c42@G4bb2@make-implementation-restriction-violation G4bb2@make-implementation-restriction-violation) (set! G4c41@G4bb0@G4ba1 G4bb0@G4ba1) (set! G4c40@G4bab@G4ba3 G4bab@G4ba3) (set! G4c3f@G4ba9@G4ba4 G4ba9@G4ba4) (set! G4c3e@G4ba7@G4ba2 G4ba7@G4ba2) (set! G4c3d@G4ba0@non-continuable-violation? G4ba0@non-continuable-violation?) (set! G4c3c@G4b9e@make-non-continuable-violation G4b9e@make-non-continuable-violation) (set! G4c3b@G4b9c@G4b8d G4b9c@G4b8d) (set! G4c3a@G4b97@G4b8f G4b97@G4b8f) (set! G4c39@G4b95@G4b90 G4b95@G4b90) (set! G4c38@G4b93@G4b8e G4b93@G4b8e) (set! G4c37@G4b8c@condition-who G4b8c@condition-who) (set! G4c36@G4b8a@who-condition? G4b8a@who-condition?) (set! G4c35@G4b88@G4b74 G4b88@G4b74) (set! G4c34@G4b86@make-who-condition G4b86@make-who-condition) (set! G4c33@G4b84@G4b75 G4b84@G4b75) (set! G4c32@G4b7f@G4b77 G4b7f@G4b77) (set! G4c31@G4b7d@G4b78 G4b7d@G4b78) (set! G4c30@G4b7b@G4b76 G4b7b@G4b76) (set! G4c2f@G4b73@condition-irritants G4b73@condition-irritants) (set! G4c2e@G4b71@irritants-condition? G4b71@irritants-condition?) (set! G4c2d@G4b6f@G4b5b G4b6f@G4b5b) (set! G4c2c@G4b6d@make-irritants-condition G4b6d@make-irritants-condition) (set! G4c2b@G4b6b@G4b5c G4b6b@G4b5c) (set! G4c2a@G4b66@G4b5e G4b66@G4b5e) (set! G4c29@G4b64@G4b5f G4b64@G4b5f) (set! G4c28@G4b62@G4b5d G4b62@G4b5d) (set! G4c27@G4b5a@assertion-violation? G4b5a@assertion-violation?) (set! G4c26@G4b58@make-assertion-violation G4b58@make-assertion-violation) (set! G4c25@G4b56@G4b47 G4b56@G4b47) (set! G4c24@G4b51@G4b49 G4b51@G4b49) (set! G4c23@G4b4f@G4b4a G4b4f@G4b4a) (set! G4c22@G4b4d@G4b48 G4b4d@G4b48) (set! G4c21@G4b46@violation? G4b46@violation?) (set! G4c20@G4b44@make-violation G4b44@make-violation) (set! G4c1f@G4b42@G4b33 G4b42@G4b33) (set! G4c1e@G4b3d@G4b35 G4b3d@G4b35) (set! G4c1d@G4b3b@G4b36 G4b3b@G4b36) (set! G4c1c@G4b39@G4b34 G4b39@G4b34) (set! G4c1b@G4b32@error? G4b32@error?) (set! G4c1a@G4b30@make-error G4b30@make-error) (set! G4c19@G4b2e@G4b1f G4b2e@G4b1f) (set! G4c18@G4b29@G4b21 G4b29@G4b21) (set! G4c17@G4b27@G4b22 G4b27@G4b22) (set! G4c16@G4b25@G4b20 G4b25@G4b20) (set! G4c15@G4b1e@serious-condition? G4b1e@serious-condition?) (set! G4c14@G4b1c@make-serious-condition G4b1c@make-serious-condition) (set! G4c13@G4b1a@G4b0b G4b1a@G4b0b) (set! G4c12@G4b15@G4b0d G4b15@G4b0d) (set! G4c11@G4b13@G4b0e G4b13@G4b0e) (set! G4c10@G4b11@G4b0c G4b11@G4b0c) (set! G4c0f@G4b0a@warning? G4b0a@warning?) (set! G4c0e@G4b08@make-warning G4b08@make-warning) (set! G4c0d@G4b06@G4af7 G4b06@G4af7) (set! G4c0c@G4b01@G4af9 G4b01@G4af9) (set! G4c0b@G4aff@G4afa G4aff@G4afa) (set! G4c0a@G4afd@G4af8 G4afd@G4af8) (set! G4c09@G4af6@condition-message G4af6@condition-message) (set! G4c08@G4af4@message-condition? G4af4@message-condition?) (set! G4c07@G4af2@G4ade G4af2@G4ade) (set! G4c06@G4af0@make-message-condition G4af0@make-message-condition) (set! G4c05@G4aee@G4adf G4aee@G4adf) (set! G4c04@G4ae9@G4ae1 G4ae9@G4ae1) (set! G4c03@G4ae7@G4ae2 G4ae7@G4ae2) (set! G4c02@G4ae5@G4ae0 G4ae5@G4ae0) (set! G4c01@G4add@&condition-rcd G4add@&condition-rcd) (set! G4c00@G4adb@&condition-rtd G4adb@&condition-rtd) (set! G4bff@G4ad9@make-&condition G4ad9@make-&condition) (set! G4bfe@G4ad7@&condition? G4ad7@&condition?) (set! G4bfd@G4ad2@G4aca G4ad2@G4aca) (set! G4bfc@G4ad0@G4acb G4ad0@G4acb) (set! G4bfb@G4ace@G4ac9 G4ace@G4ac9)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4c61@G4c5c G4c63@G4c5e G4c65@G4c5d G4c6a@G4c5b G4c6c@make-i/o-error G4c6e@i/o-error? G4c75@G4c70 G4c77@G4c72 G4c79@G4c71 G4c7e@G4c6f G4c80@make-i/o-read-error G4c82@i/o-read-error? G4c89@G4c84 G4c8b@G4c86 G4c8d@G4c85 G4c92@G4c83 G4c94@make-i/o-write-error G4c96@i/o-write-error? G4c9e@G4c99 G4ca0@G4c9b G4ca2@G4c9a G4ca7@G4c98 G4ca9@make-i/o-invalid-position-error G4cab@G4c97 G4cad@i/o-invalid-position-error? G4caf@i/o-error-position G4cb7@G4cb2 G4cb9@G4cb4 G4cbb@G4cb3 G4cc0@G4cb1 G4cc2@make-i/o-filename-error G4cc4@G4cb0 G4cc6@i/o-filename-error? G4cc8@i/o-error-filename G4ccf@G4cca G4cd1@G4ccc G4cd3@G4ccb G4cd8@G4cc9 G4cda@make-i/o-file-protection-error G4cdc@i/o-file-protection-error? G4ce3@G4cde G4ce5@G4ce0 G4ce7@G4cdf G4cec@G4cdd G4cee@make-i/o-file-is-read-only-error G4cf0@i/o-file-is-read-only-error? G4cf7@G4cf2 G4cf9@G4cf4 G4cfb@G4cf3 G4d00@G4cf1 G4d02@make-i/o-file-already-exists-error G4d04@i/o-file-already-exists-error? G4d0b@G4d06 G4d0d@G4d08 G4d0f@G4d07 G4d14@G4d05 G4d16@make-i/o-file-does-not-exist-error G4d18@i/o-file-does-not-exist-error? G4d20@G4d1b G4d22@G4d1d G4d24@G4d1c G4d29@G4d1a G4d2b@make-i/o-port-error G4d2d@G4d19 G4d2f@i/o-port-error? G4d31@i/o-error-port G4d38@G4d33 G4d3a@G4d35 G4d3c@G4d34 G4d41@G4d32 G4d43@make-i/o-decoding-error G4d45@i/o-decoding-error? G4d4d@G4d48 G4d4f@G4d4a G4d51@G4d49 G4d56@G4d47 G4d58@make-i/o-encoding-error G4d5a@G4d46 G4d5c@i/o-encoding-error? G4d5e@i/o-encoding-error-char) (begin (set! G4c61@G4c5c (make-record-type-descriptor '&i/o &error-rtd 'G4c5f '#f '#f '#())) (set! G4c63@G4c5e '#f) (set! G4c65@G4c5d (make-record-constructor-descriptor G4c61@G4c5c &error-rcd G4c63@G4c5e)) (set! G4c6a@G4c5b (record-predicate G4c61@G4c5c)) (set! G4c6c@make-i/o-error (record-constructor G4c65@G4c5d)) (set! G4c6e@i/o-error? (condition-predicate G4c61@G4c5c)) (set! G4c75@G4c70 (make-record-type-descriptor '&i/o-read G4c61@G4c5c 'G4c73 '#f '#f '#())) (set! G4c77@G4c72 '#f) (set! G4c79@G4c71 (make-record-constructor-descriptor G4c75@G4c70 G4c65@G4c5d G4c77@G4c72)) (set! G4c7e@G4c6f (record-predicate G4c75@G4c70)) (set! G4c80@make-i/o-read-error (record-constructor G4c79@G4c71)) (set! G4c82@i/o-read-error? (condition-predicate G4c75@G4c70)) (set! G4c89@G4c84 (make-record-type-descriptor '&i/o-write G4c61@G4c5c 'G4c87 '#f '#f '#())) (set! G4c8b@G4c86 '#f) (set! G4c8d@G4c85 (make-record-constructor-descriptor G4c89@G4c84 G4c65@G4c5d G4c8b@G4c86)) (set! G4c92@G4c83 (record-predicate G4c89@G4c84)) (set! G4c94@make-i/o-write-error (record-constructor G4c8d@G4c85)) (set! G4c96@i/o-write-error? (condition-predicate G4c89@G4c84)) (set! G4c9e@G4c99 (make-record-type-descriptor '&i/o-invalid-position G4c61@G4c5c 'G4c9c '#f '#f '#((immutable position)))) (set! G4ca0@G4c9b '#f) (set! G4ca2@G4c9a (make-record-constructor-descriptor G4c9e@G4c99 G4c65@G4c5d G4ca0@G4c9b)) (set! G4ca7@G4c98 (record-predicate G4c9e@G4c99)) (set! G4ca9@make-i/o-invalid-position-error (record-constructor G4ca2@G4c9a)) (set! G4cab@G4c97 (record-accessor G4c9e@G4c99 '0)) (set! G4cad@i/o-invalid-position-error? (condition-predicate G4c9e@G4c99)) (set! G4caf@i/o-error-position (condition-accessor G4c9e@G4c99 G4cab@G4c97)) (set! G4cb7@G4cb2 (make-record-type-descriptor '&i/o-filename G4c61@G4c5c 'G4cb5 '#f '#f '#((immutable filename)))) (set! G4cb9@G4cb4 '#f) (set! G4cbb@G4cb3 (make-record-constructor-descriptor G4cb7@G4cb2 G4c65@G4c5d G4cb9@G4cb4)) (set! G4cc0@G4cb1 (record-predicate G4cb7@G4cb2)) (set! G4cc2@make-i/o-filename-error (record-constructor G4cbb@G4cb3)) (set! G4cc4@G4cb0 (record-accessor G4cb7@G4cb2 '0)) (set! G4cc6@i/o-filename-error? (condition-predicate G4cb7@G4cb2)) (set! G4cc8@i/o-error-filename (condition-accessor G4cb7@G4cb2 G4cc4@G4cb0)) (set! G4ccf@G4cca (make-record-type-descriptor '&i/o-file-protection G4c61@G4c5c 'G4ccd '#f '#f '#())) (set! G4cd1@G4ccc '#f) (set! G4cd3@G4ccb (make-record-constructor-descriptor G4ccf@G4cca G4c65@G4c5d G4cd1@G4ccc)) (set! G4cd8@G4cc9 (record-predicate G4ccf@G4cca)) (set! G4cda@make-i/o-file-protection-error (record-constructor G4cd3@G4ccb)) (set! G4cdc@i/o-file-protection-error? (condition-predicate G4ccf@G4cca)) (set! G4ce3@G4cde (make-record-type-descriptor '&i/o-file-is-read-only G4ccf@G4cca 'G4ce1 '#f '#f '#())) (set! G4ce5@G4ce0 '#f) (set! G4ce7@G4cdf (make-record-constructor-descriptor G4ce3@G4cde G4cd3@G4ccb G4ce5@G4ce0)) (set! G4cec@G4cdd (record-predicate G4ce3@G4cde)) (set! G4cee@make-i/o-file-is-read-only-error (record-constructor G4ce7@G4cdf)) (set! G4cf0@i/o-file-is-read-only-error? (condition-predicate G4ce3@G4cde)) (set! G4cf7@G4cf2 (make-record-type-descriptor '&i/o-file-already-exists G4cb7@G4cb2 'G4cf5 '#f '#f '#())) (set! G4cf9@G4cf4 '#f) (set! G4cfb@G4cf3 (make-record-constructor-descriptor G4cf7@G4cf2 G4cbb@G4cb3 G4cf9@G4cf4)) (set! G4d00@G4cf1 (record-predicate G4cf7@G4cf2)) (set! G4d02@make-i/o-file-already-exists-error (record-constructor G4cfb@G4cf3)) (set! G4d04@i/o-file-already-exists-error? (condition-predicate G4cf7@G4cf2)) (set! G4d0b@G4d06 (make-record-type-descriptor '&i/o-file-does-not-exist G4cb7@G4cb2 'G4d09 '#f '#f '#())) (set! G4d0d@G4d08 '#f) (set! G4d0f@G4d07 (make-record-constructor-descriptor G4d0b@G4d06 G4cbb@G4cb3 G4d0d@G4d08)) (set! G4d14@G4d05 (record-predicate G4d0b@G4d06)) (set! G4d16@make-i/o-file-does-not-exist-error (record-constructor G4d0f@G4d07)) (set! G4d18@i/o-file-does-not-exist-error? (condition-predicate G4d0b@G4d06)) (set! G4d20@G4d1b (make-record-type-descriptor '&i/o-port G4c61@G4c5c 'G4d1e '#f '#f '#((immutable port)))) (set! G4d22@G4d1d '#f) (set! G4d24@G4d1c (make-record-constructor-descriptor G4d20@G4d1b G4c65@G4c5d G4d22@G4d1d)) (set! G4d29@G4d1a (record-predicate G4d20@G4d1b)) (set! G4d2b@make-i/o-port-error (record-constructor G4d24@G4d1c)) (set! G4d2d@G4d19 (record-accessor G4d20@G4d1b '0)) (set! G4d2f@i/o-port-error? (condition-predicate G4d20@G4d1b)) (set! G4d31@i/o-error-port (condition-accessor G4d20@G4d1b G4d2d@G4d19)) (set! G4d38@G4d33 (make-record-type-descriptor '&i/o-decoding G4d20@G4d1b 'G4d36 '#f '#f '#())) (set! G4d3a@G4d35 '#f) (set! G4d3c@G4d34 (make-record-constructor-descriptor G4d38@G4d33 G4d24@G4d1c G4d3a@G4d35)) (set! G4d41@G4d32 (record-predicate G4d38@G4d33)) (set! G4d43@make-i/o-decoding-error (record-constructor G4d3c@G4d34)) (set! G4d45@i/o-decoding-error? (condition-predicate G4d38@G4d33)) (set! G4d4d@G4d48 (make-record-type-descriptor '&i/o-encoding G4d20@G4d1b 'G4d4b '#f '#f '#((immutable char)))) (set! G4d4f@G4d4a '#f) (set! G4d51@G4d49 (make-record-constructor-descriptor G4d4d@G4d48 G4d24@G4d1c G4d4f@G4d4a)) (set! G4d56@G4d47 (record-predicate G4d4d@G4d48)) (set! G4d58@make-i/o-encoding-error (record-constructor G4d51@G4d49)) (set! G4d5a@G4d46 (record-accessor G4d4d@G4d48 '0)) (set! G4d5c@i/o-encoding-error? (condition-predicate G4d4d@G4d48)) (set! G4d5e@i/o-encoding-error-char (condition-accessor G4d4d@G4d48 G4d5a@G4d46)) (begin (set! G4dae@G4d5e@i/o-encoding-error-char G4d5e@i/o-encoding-error-char) (set! G4dad@G4d5c@i/o-encoding-error? G4d5c@i/o-encoding-error?) (set! G4dac@G4d5a@G4d46 G4d5a@G4d46) (set! G4dab@G4d58@make-i/o-encoding-error G4d58@make-i/o-encoding-error) (set! G4daa@G4d56@G4d47 G4d56@G4d47) (set! G4da9@G4d51@G4d49 G4d51@G4d49) (set! G4da8@G4d4f@G4d4a G4d4f@G4d4a) (set! G4da7@G4d4d@G4d48 G4d4d@G4d48) (set! G4da6@G4d45@i/o-decoding-error? G4d45@i/o-decoding-error?) (set! G4da5@G4d43@make-i/o-decoding-error G4d43@make-i/o-decoding-error) (set! G4da4@G4d41@G4d32 G4d41@G4d32) (set! G4da3@G4d3c@G4d34 G4d3c@G4d34) (set! G4da2@G4d3a@G4d35 G4d3a@G4d35) (set! G4da1@G4d38@G4d33 G4d38@G4d33) (set! G4da0@G4d31@i/o-error-port G4d31@i/o-error-port) (set! G4d9f@G4d2f@i/o-port-error? G4d2f@i/o-port-error?) (set! G4d9e@G4d2d@G4d19 G4d2d@G4d19) (set! G4d9d@G4d2b@make-i/o-port-error G4d2b@make-i/o-port-error) (set! G4d9c@G4d29@G4d1a G4d29@G4d1a) (set! G4d9b@G4d24@G4d1c G4d24@G4d1c) (set! G4d9a@G4d22@G4d1d G4d22@G4d1d) (set! G4d99@G4d20@G4d1b G4d20@G4d1b) (set! G4d98@G4d18@i/o-file-does-not-exist-error? G4d18@i/o-file-does-not-exist-error?) (set! G4d97@G4d16@make-i/o-file-does-not-exist-error G4d16@make-i/o-file-does-not-exist-error) (set! G4d96@G4d14@G4d05 G4d14@G4d05) (set! G4d95@G4d0f@G4d07 G4d0f@G4d07) (set! G4d94@G4d0d@G4d08 G4d0d@G4d08) (set! G4d93@G4d0b@G4d06 G4d0b@G4d06) (set! G4d92@G4d04@i/o-file-already-exists-error? G4d04@i/o-file-already-exists-error?) (set! G4d91@G4d02@make-i/o-file-already-exists-error G4d02@make-i/o-file-already-exists-error) (set! G4d90@G4d00@G4cf1 G4d00@G4cf1) (set! G4d8f@G4cfb@G4cf3 G4cfb@G4cf3) (set! G4d8e@G4cf9@G4cf4 G4cf9@G4cf4) (set! G4d8d@G4cf7@G4cf2 G4cf7@G4cf2) (set! G4d8c@G4cf0@i/o-file-is-read-only-error? G4cf0@i/o-file-is-read-only-error?) (set! G4d8b@G4cee@make-i/o-file-is-read-only-error G4cee@make-i/o-file-is-read-only-error) (set! G4d8a@G4cec@G4cdd G4cec@G4cdd) (set! G4d89@G4ce7@G4cdf G4ce7@G4cdf) (set! G4d88@G4ce5@G4ce0 G4ce5@G4ce0) (set! G4d87@G4ce3@G4cde G4ce3@G4cde) (set! G4d86@G4cdc@i/o-file-protection-error? G4cdc@i/o-file-protection-error?) (set! G4d85@G4cda@make-i/o-file-protection-error G4cda@make-i/o-file-protection-error) (set! G4d84@G4cd8@G4cc9 G4cd8@G4cc9) (set! G4d83@G4cd3@G4ccb G4cd3@G4ccb) (set! G4d82@G4cd1@G4ccc G4cd1@G4ccc) (set! G4d81@G4ccf@G4cca G4ccf@G4cca) (set! G4d80@G4cc8@i/o-error-filename G4cc8@i/o-error-filename) (set! G4d7f@G4cc6@i/o-filename-error? G4cc6@i/o-filename-error?) (set! G4d7e@G4cc4@G4cb0 G4cc4@G4cb0) (set! G4d7d@G4cc2@make-i/o-filename-error G4cc2@make-i/o-filename-error) (set! G4d7c@G4cc0@G4cb1 G4cc0@G4cb1) (set! G4d7b@G4cbb@G4cb3 G4cbb@G4cb3) (set! G4d7a@G4cb9@G4cb4 G4cb9@G4cb4) (set! G4d79@G4cb7@G4cb2 G4cb7@G4cb2) (set! G4d78@G4caf@i/o-error-position G4caf@i/o-error-position) (set! G4d77@G4cad@i/o-invalid-position-error? G4cad@i/o-invalid-position-error?) (set! G4d76@G4cab@G4c97 G4cab@G4c97) (set! G4d75@G4ca9@make-i/o-invalid-position-error G4ca9@make-i/o-invalid-position-error) (set! G4d74@G4ca7@G4c98 G4ca7@G4c98) (set! G4d73@G4ca2@G4c9a G4ca2@G4c9a) (set! G4d72@G4ca0@G4c9b G4ca0@G4c9b) (set! G4d71@G4c9e@G4c99 G4c9e@G4c99) (set! G4d70@G4c96@i/o-write-error? G4c96@i/o-write-error?) (set! G4d6f@G4c94@make-i/o-write-error G4c94@make-i/o-write-error) (set! G4d6e@G4c92@G4c83 G4c92@G4c83) (set! G4d6d@G4c8d@G4c85 G4c8d@G4c85) (set! G4d6c@G4c8b@G4c86 G4c8b@G4c86) (set! G4d6b@G4c89@G4c84 G4c89@G4c84) (set! G4d6a@G4c82@i/o-read-error? G4c82@i/o-read-error?) (set! G4d69@G4c80@make-i/o-read-error G4c80@make-i/o-read-error) (set! G4d68@G4c7e@G4c6f G4c7e@G4c6f) (set! G4d67@G4c79@G4c71 G4c79@G4c71) (set! G4d66@G4c77@G4c72 G4c77@G4c72) (set! G4d65@G4c75@G4c70 G4c75@G4c70) (set! G4d64@G4c6e@i/o-error? G4c6e@i/o-error?) (set! G4d63@G4c6c@make-i/o-error G4c6c@make-i/o-error) (set! G4d62@G4c6a@G4c5b G4c6a@G4c5b) (set! G4d61@G4c65@G4c5d G4c65@G4c5d) (set! G4d60@G4c63@G4c5e G4c63@G4c5e) (set! G4d5f@G4c61@G4c5c G4c61@G4c5c)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G29f6@G299b@current-primitive-locations (lambda (G5180@x) ((lambda (G5182@t) (if G5182@t (cdr G5182@t) '#f)) (assq G5180@x '((syntax-error . G4aba@G3173@syntax-error) (syntax-dispatch . G4a4e@G3086@syntax-dispatch) (load . G4e4b@G4dbd@load) (interaction-environment . G4ac3@G3185@interaction-environment) (make-variable-transformer . G4a0e@G2e84@make-variable-transformer) (identifier? . G4abe@G317b@identifier?) (generate-temporaries . G4ab3@G3165@generate-temporaries) (free-identifier=? . G4ab4@G3167@free-identifier=?) (syntax->datum . G4ac0@G317f@syntax->datum) (datum->syntax . G4abf@G317d@datum->syntax) (bound-identifier=? . G4ab5@G3169@bound-identifier=?) (make-i/o-write-error . G4d6f@G4c94@make-i/o-write-error) (make-i/o-read-error . G4d69@G4c80@make-i/o-read-error) (make-i/o-port-error . G4d9d@G4d2b@make-i/o-port-error) (make-i/o-invalid-position-error . G4d75@G4ca9@make-i/o-invalid-position-error) (make-i/o-filename-error . G4d7d@G4cc2@make-i/o-filename-error) (make-i/o-file-protection-error . G4d85@G4cda@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4d8b@G4cee@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4d97@G4d16@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4d91@G4d02@make-i/o-file-already-exists-error) (make-i/o-error . G4d63@G4c6c@make-i/o-error) (make-i/o-encoding-error . G4dab@G4d58@make-i/o-encoding-error) (make-i/o-decoding-error . G4da5@G4d43@make-i/o-decoding-error) (i/o-write-error? . G4d70@G4c96@i/o-write-error?) (i/o-read-error? . G4d6a@G4c82@i/o-read-error?) (i/o-port-error? . G4d9f@G4d2f@i/o-port-error?) (i/o-invalid-position-error? . G4d77@G4cad@i/o-invalid-position-error?) (i/o-filename-error? . G4d7f@G4cc6@i/o-filename-error?) (i/o-file-protection-error? . G4d86@G4cdc@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4d8c@G4cf0@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4d98@G4d18@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4d92@G4d04@i/o-file-already-exists-error?) (i/o-error? . G4d64@G4c6e@i/o-error?) (i/o-error-port . G4da0@G4d31@i/o-error-port) (i/o-error-filename . G4d80@G4cc8@i/o-error-filename) (i/o-encoding-error? . G4dad@G4d5c@i/o-encoding-error?) (i/o-encoding-error-char . G4dae@G4d5e@i/o-encoding-error-char) (i/o-decoding-error? . G4da6@G4d45@i/o-decoding-error?) (scheme-report-environment . G4aaa@G3153@scheme-report-environment) (null-environment . G4aa9@G3151@null-environment) (command-line . G4e48@G4db7@command-line) (eval . G4aac@G3157@eval) (environment . G4aa8@G314f@environment) (who-condition? . G4c36@G4b8a@who-condition?) (warning? . G4c0f@G4b0a@warning?) (violation? . G4c21@G4b46@violation?) (undefined-violation? . G4c59@G4bfa@undefined-violation?) (syntax-violation? . G4c51@G4be2@syntax-violation?) (syntax-violation-subform . G4c53@G4be6@syntax-violation-subform) (syntax-violation-form . G4c52@G4be4@syntax-violation-form) (syntax-violation . G4abd@G3179@syntax-violation) (serious-condition? . G4c15@G4b1e@serious-condition?) (non-continuable-violation? . G4c3d@G4ba0@non-continuable-violation?) (message-condition? . G4c08@G4af4@message-condition?) (make-who-condition . G4c34@G4b86@make-who-condition) (make-warning . G4c0e@G4b08@make-warning) (make-violation . G4c20@G4b44@make-violation) (make-undefined-violation . G4c58@G4bf8@make-undefined-violation) (make-syntax-violation . G4c4e@G4bdc@make-syntax-violation) (make-serious-condition . G4c14@G4b1c@make-serious-condition) (make-non-continuable-violation . G4c3c@G4b9e@make-non-continuable-violation) (make-message-condition . G4c06@G4af0@make-message-condition) (make-lexical-violation . G4c48@G4bc6@make-lexical-violation) (make-irritants-condition . G4c2c@G4b6d@make-irritants-condition) (make-implementation-restriction-violation . G4c42@G4bb2@make-implementation-restriction-violation) (make-error . G4c1a@G4b30@make-error) (make-assertion-violation . G4c26@G4b58@make-assertion-violation) (lexical-violation? . G4c49@G4bc8@lexical-violation?) (irritants-condition? . G4c2e@G4b71@irritants-condition?) (implementation-restriction-violation? . G4c43@G4bb4@implementation-restriction-violation?) (error? . G4c1b@G4b32@error?) (condition-who . G4c37@G4b8c@condition-who) (condition-message . G4c09@G4af6@condition-message) (condition-irritants . G4c2f@G4b73@condition-irritants) (assertion-violation? . G4c27@G4b5a@assertion-violation?)))))) (G2c36@G2ac9@install-library 'G5154 '(mosh interaction) '() '() '() '() '((string-upcase . G50d4) (string-titlecase . G50d3) (string-normalize-nfkd . G50d2) (string-normalize-nfkc . G50d1) (string-normalize-nfd . G50d0) (string-normalize-nfc . G50cf) (string-foldcase . G50ce) (string-downcase . G50cd) (string-ci>? . G50cc) (string-ci>=? . G50cb) (string-ci=? . G50ca) (string-ci<? . G50c9) (string-ci<=? . G50c8) (char-whitespace? . G50c7) (char-upper-case? . G50c6) (char-title-case? . G50c5) (char-numeric? . G50c4) (char-lower-case? . G50c3) (char-general-category . G50c2) (char-upcase . G50c1) (char-titlecase . G50c0) (char-foldcase . G50bf) (char-downcase . G50be) (char-ci>? . G50bd) (char-ci>=? . G50bc) (char-ci=? . G50bb) (char-ci<? . G50ba) (char-ci<=? . G50b9) (char-alphabetic? . G50b8) (make-variable-transformer . G2e83) (identifier? . G317a) (generate-temporaries . G3164) (free-identifier=? . G3166) (syntax->datum . G317e) (datum->syntax . G317c) (bound-identifier=? . G3168) (record-type-descriptor? . G50b7) (record-predicate . G50b6) (record-mutator . G50b5) (record-constructor . G50b4) (record-accessor . G50b3) (make-record-type-descriptor . G50b2) (make-record-constructor-descriptor . G50b1) (record? . G50b0) (record-type-uid . G50af) (record-type-sealed? . G50ae) (record-type-parent . G50ad) (record-type-opaque? . G50ac) (record-type-name . G50ab) (record-type-generative? . G50aa) (record-type-field-names . G50a9) (record-rtd . G50a8) (record-field-mutable? . G50a7) (delete-file . G50a6) (file-exists? . G50a5) (vector-sort! . G50a4) (vector-sort . G50a3) (list-sort . G50a2) (symbol-hash . G50a1) (string-ci-hash . G50a0) (string-hash . G509f) (equal-hash . G509e) (hashtable-equivalence-function . G509d) (make-hashtable . G509c) (hashtable-hash-function . G509b) (make-eqv-hashtable . G509a) (make-eq-hashtable . G5099) (hashtable? . G5098) (hashtable-update! . G5097) (hashtable-size . G5096) (hashtable-set! . G5095) (hashtable-ref . G5094) (hashtable-mutable? . G5093) (hashtable-keys . G5092) (hashtable-entries . G5091) (hashtable-delete! . G5090) (hashtable-copy . G508f) (hashtable-contains? . G508e) (hashtable-clear! . G508d) (call-with-output-file . G508c) (call-with-input-file . G508b) (write-char . G508a) (write . G5089) (with-output-to-file . G5088) (with-input-from-file . G5087) (read-char . G5086) (read . G5085) (peek-char . G5084) (open-output-file . G5083) (open-input-file . G5082) (newline . G5081) (display . G5080) (close-output-port . G507f) (close-input-port . G507e) (eof-object? . G507d) (eof-object . G507c) (current-error-port . G507b) (current-output-port . G507a) (current-input-port . G5079) (output-port? . G5078) (input-port? . G5077) (utf-8-codec . G5076) (utf-16-codec . G5075) (transcoder-error-handling-mode . G5074) (transcoder-eol-style . G5073) (transcoder-codec . G5072) (transcoded-port . G5071) (textual-port? . G5070) (string->bytevector . G506f) (standard-output-port . G506e) (standard-input-port . G506d) (standard-error-port . G506c) (set-port-position! . G506b) (put-u8 . G506a) (put-string . G5069) (put-datum . G5068) (put-char . G5067) (put-bytevector . G5066) (port? . G5065) (port-transcoder . G5064) (port-position . G5063) (port-has-set-port-position!? . G5062) (port-has-port-position? . G5061) (port-eof? . G5060) (output-port-buffer-mode . G505f) (open-string-output-port . G505e) (open-string-input-port . G505d) (open-file-output-port . G505c) (open-file-input/output-port . G505b) (open-file-input-port . G505a) (open-bytevector-output-port . G5059) (open-bytevector-input-port . G5058) (native-transcoder . G5057) (native-eol-style . G5056) (make-transcoder . G5055) (latin-1-codec . G5054) (make-i/o-write-error . G4c93) (make-i/o-read-error . G4c7f) (make-i/o-port-error . G4d2a) (make-i/o-invalid-position-error . G4ca8) (make-i/o-filename-error . G4cc1) (make-i/o-file-protection-error . G4cd9) (make-i/o-file-is-read-only-error . G4ced) (make-i/o-file-does-not-exist-error . G4d15) (make-i/o-file-already-exists-error . G4d01) (make-i/o-error . G4c6b) (make-i/o-encoding-error . G4d57) (make-i/o-decoding-error . G4d42) (make-custom-textual-output-port . G5053) (make-custom-textual-input/output-port . G5052) (make-custom-textual-input-port . G5051) (make-custom-binary-output-port . G5050) (make-custom-binary-input/output-port . G504f) (make-custom-binary-input-port . G504e) (make-bytevector . G504d) (lookahead-u8 . G504c) (lookahead-char . G504b) (i/o-write-error? . G4c95) (i/o-read-error? . G4c81) (i/o-port-error? . G4d2e) (i/o-invalid-position-error? . G4cac) (i/o-filename-error? . G4cc5) (i/o-file-protection-error? . G4cdb) (i/o-file-is-read-only-error? . G4cef) (i/o-file-does-not-exist-error? . G4d17) (i/o-file-already-exists-error? . G4d03) (i/o-error? . G4c6d) (i/o-error-port . G4d30) (i/o-error-filename . G4cc7) (i/o-encoding-error? . G4d5b) (i/o-encoding-error-char . G4d5d) (i/o-decoding-error? . G4d44) (get-u8 . G504a) (get-string-n! . G5049) (get-string-n . G5048) (get-string-all . G5047) (get-line . G5046) (get-datum . G5045) (get-char . G5044) (get-bytevector-some . G5043) (get-bytevector-n! . G5042) (get-bytevector-n . G5041) (get-bytevector-all . G5040) (flush-output-port . G503f) (close-port . G503e) (exit . G5037) (command-line . G4db6) (string-fill! . G5036) (string-set! . G5035) (set-cdr! . G5034) (set-car! . G5033) (remove . G5032) (remv . G5031) (remp . G5030) (remq . G502f) (partition . G502e) (memv . G502d) (memq . G502c) (memp . G502b) (member . G502a) (exists . G5029) (for-all . G5028) (fold-right . G5027) (fold-left . G5026) (find . G5025) (filter . G5024) (cons* . G5023) (assv . G5022) (assq . G5021) (assp . G5020) (assoc . G501f) (call-with-string-output-port . G501e) (call-with-port . G501d) (call-with-bytevector-output-port . G501c) (bytevector->string . G501b) (buffer-mode? . G501a) (binary-port? . G5019) (with-exception-handler . G5018) (raise-continuable . G5017) (raise . G5016) (eval . G3156) (environment . G314e) (make-enumeration . G5015) (enum-set=? . G5014) (enum-set-universe . G5013) (enum-set-union . G5012) (enum-set-subset? . G5011) (enum-set-projection . G5010) (enum-set-member? . G500f) (enum-set-intersection . G500e) (enum-set-indexer . G500d) (enum-set-difference . G500c) (enum-set-constructor . G500b) (enum-set-complement . G500a) (enum-set->list . G5009) (who-condition? . G4b89) (warning? . G4b09) (violation? . G4b45) (undefined-violation? . G4bf9) (syntax-violation? . G4be1) (syntax-violation-subform . G4be5) (syntax-violation-form . G4be3) (syntax-violation . G3178) (simple-conditions . G5008) (serious-condition? . G4b1d) (non-continuable-violation? . G4b9f) (message-condition? . G4af3) (make-who-condition . G4b85) (make-warning . G4b07) (make-violation . G4b43) (make-undefined-violation . G4bf7) (make-syntax-violation . G4bdb) (make-serious-condition . G4b1b) (make-non-continuable-violation . G4b9d) (make-message-condition . G4aef) (make-lexical-violation . G4bc5) (make-irritants-condition . G4b6c) (make-implementation-restriction-violation . G4bb1) (make-error . G4b2f) (make-assertion-violation . G4b57) (lexical-violation? . G4bc7) (irritants-condition? . G4b70) (implementation-restriction-violation? . G4bb3) (error? . G4b31) (condition-who . G4b8b) (condition-predicate . G5007) (condition-message . G4af5) (condition-irritants . G4b72) (condition-accessor . G5006) (condition . G5005) (assertion-violation? . G4b59) (condition? . G5004) (utf32->string . G5003) (utf16->string . G5002) (utf8->string . G5001) (uint-list->bytevector . G5000) (u8-list->bytevector . G4fff) (string->utf8 . G4ffe) (string->utf32 . G4ffd) (string->utf16 . G4ffc) (sint-list->bytevector . G4ffb) (native-endianness . G4ffa) (bytevector? . G4ff9) (bytevector=? . G4ff8) (bytevector-uint-set! . G4ff7) (bytevector-uint-ref . G4ff6) (bytevector-u8-set! . G4ff5) (bytevector-u8-ref . G4ff4) (bytevector-u64-set! . G4ff3) (bytevector-u64-ref . G4ff2) (bytevector-u64-native-set! . G4ff1) (bytevector-u64-native-ref . G4ff0) (bytevector-u32-set! . G4fef) (bytevector-u32-ref . G4fee) (bytevector-u32-native-set! . G4fed) (bytevector-u32-native-ref . G4fec) (bytevector-u16-set! . G4feb) (bytevector-u16-ref . G4fea) (bytevector-u16-native-set! . G4fe9) (bytevector-u16-native-ref . G4fe8) (bytevector-sint-set! . G4fe7) (bytevector-sint-ref . G4fe6) (bytevector-s8-set! . G4fe5) (bytevector-s8-ref . G4fe4) (bytevector-s64-set! . G4fe3) (bytevector-s64-ref . G4fe2) (bytevector-s64-native-set! . G4fe1) (bytevector-s64-native-ref . G4fe0) (bytevector-s32-set! . G4fdf) (bytevector-s32-ref . G4fde) (bytevector-s32-native-set! . G4fdd) (bytevector-s32-native-ref . G4fdc) (bytevector-s16-set! . G4fdb) (bytevector-s16-ref . G4fda) (bytevector-s16-native-set! . G4fd9) (bytevector-s16-native-ref . G4fd8) (bytevector-length . G4fd7) (bytevector-ieee-single-ref . G4fd6) (bytevector-ieee-single-native-set! . G4fd5) (bytevector-ieee-single-native-ref . G4fd4) (bytevector-ieee-double-ref . G4fd3) (bytevector-ieee-double-native-set! . G4fd2) (bytevector-ieee-double-native-ref . G4fd1) (bytevector-fill! . G4fd0) (bytevector-copy! . G4fcf) (bytevector-copy . G4fce) (bytevector->uint-list . G4fcd) (bytevector->u8-list . G4fcc) (bytevector->sint-list . G4fcb) (no-nans-violation? . G4fca) (no-infinities-violation? . G4fc9) (make-no-nans-violation . G4fc8) (make-no-infinities-violation . G4fc7) (real->flonum . G4fc6) (flzero? . G4fc5) (fltruncate . G4fc4) (fltan . G4fc3) (flsqrt . G4fc2) (flsin . G4fc1) (flround . G4fc0) (flpositive? . G4fbf) (flonum? . G4fbe) (flodd? . G4fbd) (flnumerator . G4fbc) (flnegative? . G4fbb) (flnan? . G4fba) (flmod0 . G4fb9) (flmod . G4fb8) (flmin . G4fb7) (flmax . G4fb6) (fllog . G4fb5) (flinteger? . G4fb4) (flinfinite? . G4fb3) (flfloor . G4fb2) (flfinite? . G4fb1) (flexpt . G4fb0) (flexp . G4faf) (fleven? . G4fae) (fldiv0-and-mod0 . G4fad) (fldiv0 . G4fac) (fldiv-and-mod . G4fab) (fldiv . G4faa) (fldenominator . G4fa9) (flcos . G4fa8) (flceiling . G4fa7) (flatan . G4fa6) (flasin . G4fa5) (flacos . G4fa4) (flabs . G4fa3) (fl>? . G4fa2) (fl>=? . G4fa1) (fl=? . G4fa0) (fl<? . G4f9f) (fl<=? . G4f9e) (fl/ . G4f9d) (fl- . G4f9c) (fl+ . G4f9b) (fl* . G4f9a) (fixnum->flonum . G4f99) (fxzero? . G4f98) (fxxor . G4f97) (fxrotate-bit-field . G4f96) (fxreverse-bit-field . G4f95) (fxpositive? . G4f94) (fxodd? . G4f93) (fxnot . G4f92) (fxnegative? . G4f91) (fxmod0 . G4f90) (fxmod . G4f8f) (fxmin . G4f8e) (fxmax . G4f8d) (fxlength . G4f8c) (fxior . G4f8b) (fxif . G4f8a) (fxfirst-bit-set . G4f89) (fxeven? . G4f88) (fxdiv0-and-mod0 . G4f87) (fxdiv0 . G4f86) (fxdiv-and-mod . G4f85) (fxdiv . G4f84) (fxcopy-bit-field . G4f83) (fxcopy-bit . G4f82) (fxbit-set? . G4f81) (fxbit-field . G4f80) (fxbit-count . G4f7f) (fxarithmetic-shift-right . G4f7e) (fxarithmetic-shift-left . G4f7d) (fxarithmetic-shift . G4f7c) (fxand . G4f7b) (fx>? . G4f7a) (fx>=? . G4f79) (fx=? . G4f78) (fx<? . G4f77) (fx<=? . G4f76) (fx-/carry . G4f75) (fx- . G4f74) (fx+/carry . G4f73) (fx+ . G4f72) (fx*/carry . G4f71) (fx* . G4f70) (greatest-fixnum . G4f6f) (least-fixnum . G4f6e) (fixnum-width . G4f6d) (fixnum? . G4f6c) (bitwise-rotate-bit-field . G4f6b) (bitwise-reverse-bit-field . G4f6a) (bitwise-length . G4f69) (bitwise-if . G4f68) (bitwise-first-bit-set . G4f67) (bitwise-copy-bit-field . G4f66) (bitwise-copy-bit . G4f65) (bitwise-bit-set? . G4f64) (bitwise-bit-field . G4f63) (bitwise-bit-count . G4f62) (bitwise-xor . G4f61) (bitwise-ior . G4f60) (bitwise-and . G4f5f) (bitwise-not . G4f5e) (bitwise-arithmetic-shift-right . G4f5d) (bitwise-arithmetic-shift-left . G4f5c) (bitwise-arithmetic-shift . G4f5b) (zero? . G4f5a) (vector? . G4f59) (vector-set! . G4f58) (vector-ref . G4f57) (vector-map . G4f56) (vector-length . G4f55) (vector-for-each . G4f54) (vector-fill! . G4f53) (vector->list . G4f52) (vector . G4f51) (values . G4f50) (truncate . G4f4f) (tan . G4f4e) (symbol? . G4f4d) (symbol=? . G4f4c) (symbol->string . G4f4b) (substring . G4f4a) (string? . G4f49) (string>? . G4f48) (string>=? . G4f47) (string=? . G4f46) (string<? . G4f45) (string<=? . G4f44) (string-ref . G4f43) (string-length . G4f42) (string-for-each . G4f41) (string-copy . G4f40) (string-append . G4f3f) (string->symbol . G4f3e) (string->number . G4f3d) (string->list . G4f3c) (string . G4f3b) (sqrt . G4f3a) (sin . G4f39) (round . G4f38) (reverse . G4f37) (real? . G4f36) (real-valued? . G4f35) (real-part . G4f34) (rationalize . G4f33) (rational? . G4f32) (rational-valued? . G4f31) (procedure? . G4f30) (positive? . G4f2f) (pair? . G4f2e) (odd? . G4f2d) (numerator . G4f2c) (number? . G4f2b) (number->string . G4f2a) (null? . G4f29) (not . G4f28) (negative? . G4f27) (nan? . G4f26) (min . G4f25) (max . G4f24) (map . G4f23) (make-vector . G4f22) (make-string . G4f21) (make-rectangular . G4f20) (make-polar . G4f1f) (magnitude . G4f1e) (log . G4f1d) (list? . G4f1c) (list-tail . G4f1b) (list-ref . G4f1a) (list->vector . G4f19) (list->string . G4f18) (list . G4f17) (length . G4f16) (lcm . G4f15) (integer? . G4f14) (integer-valued? . G4f13) (integer->char . G4f12) (infinite? . G4f11) (inexact? . G4f10) (inexact . G4f0f) (imag-part . G4f0e) (gcd . G4f0d) (for-each . G4f0c) (floor . G4f0b) (finite? . G4f0a) (expt . G4f09) (exp . G4f08) (exact? . G4f07) (exact-integer-sqrt . G4f06) (exact . G4f05) (even? . G4f04) (error . G4f03) (eqv? . G4f02) (equal? . G4f01) (eq? . G4f00) (dynamic-wind . G4eff) (div0-and-mod0 . G4efe) (mod0 . G4efd) (div0 . G4efc) (div-and-mod . G4efb) (mod . G4efa) (div . G4ef9) (denominator . G4ef8) (cos . G4ef7) (cons . G4ef6) (complex? . G4ef5) (char? . G4ef4) (char>? . G4ef3) (char>=? . G4ef2) (char=? . G4ef1) (char<? . G4ef0) (char<=? . G4eef) (char->integer . G4eee) (ceiling . G4eed) (call-with-values . G4eec) (call/cc . G4eeb) (call-with-current-continuation . G4eea) (cddddr . G4ee9) (cdddar . G4ee8) (cddadr . G4ee7) (cddaar . G4ee6) (cdaddr . G4ee5) (cdadar . G4ee4) (cdaadr . G4ee3) (cdaaar . G4ee2) (cadddr . G4ee1) (caddar . G4ee0) (cadadr . G4edf) (cadaar . G4ede) (caaddr . G4edd) (caadar . G4edc) (caaadr . G4edb) (caaaar . G4eda) (cdddr . G4ed9) (cddar . G4ed8) (cdadr . G4ed7) (cdaar . G4ed6) (caddr . G4ed5) (cadar . G4ed4) (caadr . G4ed3) (caaar . G4ed2) (cddr . G4ed1) (cdar . G4ed0) (cadr . G4ecf) (caar . G4ece) (cdr . G4ecd) (car . G4ecc) (boolean? . G4ecb) (boolean=? . G4eca) (atan . G4ec9) (assertion-violation . G4ec8) (asin . G4ec7) (apply . G4ec6) (append . G4ec5) (angle . G4ec4) (acos . G4ec3) (abs . G4ec2) (/ . G4ec1) (* . G4ec0) (- . G4ebf) (+ . G4ebe) (>= . G4ebd) (> . G4ebc) (= . G4ebb) (<= . G4eba) (< . G4eb9) (library . G4eb8) (export . G4eb7) (&no-nans . G4eb6) (&no-infinities . G4eb5) (&i/o-encoding . G4eb4) (&i/o-decoding . G4eb3) (&i/o-port . G4eb2) (&i/o-file-does-not-exist . G4eb1) (&i/o-file-already-exists . G4eb0) (&i/o-file-is-read-only . G4eaf) (&i/o-file-protection . G4eae) (&i/o-filename . G4ead) (&i/o-invalid-position . G4eac) (&i/o-write . G4eab) (&i/o-read . G4eaa) (&i/o . G4ea9) (&undefined . G4ea8) (&syntax . G4ea7) (&lexical . G4ea6) (&implementation-restriction . G4ea5) (&non-continuable . G4ea4) (&who . G4ea3) (&irritants . G4ea2) (&assertion . G4ea1) (&violation . G4ea0) (&error . G4e9f) (&serious . G4e9e) (&warning . G4e9d) (&message . G4e9c) (&condition . G4e9b) (define-condition-type . G4e9a) (define-enumeration . G4e99) (define-record-type . G4e98) (parent-rtd . G4e97) (nongenerative . G4e96) (opaque . G4e95) (sealed . G4e94) (protocol . G4e93) (parent . G4e92) (immutable . G4e91) (mutable . G4e90) (fields . G4e8f) (error-handling-mode . G4e8e) (file-options . G4e8d) (buffer-mode . G4e8c) (eol-style . G4e8b) (guard . G4e8a) (unsyntax-splicing . G4e87) (unsyntax . G4e86) (unquote-splicing . G4e85) (unquote . G4e84) (_ . G4e83) (else . G4e82) (=> . G4e81) (... . G4e80) (assert . G4e7f) (endianness . G4e7e) (or . G4e7b) (and . G4e7a) (do . G4e79) (cond . G4e78) (let* . G4e77) (let . G4e76) (let*-values . G4e75) (let-values . G4e74) (identifier-syntax . G4e73) (with-syntax . G4e72) (quasisyntax . G4e71) (quasiquote . G4e70) (syntax-rules . G4e6f) (include . G4e6e) (record-constructor-descriptor . G4e6c) (record-type-descriptor . G4e6b) (case . G4e6a) (unless . G4e68) (when . G4e67) (if . G4e66) (letrec* . G4e65) (letrec . G4e64) (case-lambda . G4e62) (lambda . G4e61) (syntax . G4e60) (syntax-case . G4e5f) (quote . G4e5e) (letrec-syntax . G4e5c) (let-syntax . G4e5b) (set! . G4e5a) (import . G4e59) (begin . G4e58) (define-syntax . G4e56) (define . G4e55)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5155 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4e85) (unquote . G4e84) (delay . G4e7d) (or . G4e7b) (and . G4e7a) (do . G4e79) (cond . G4e78) (let* . G4e77) (let . G4e76) (quasiquote . G4e70) (syntax-rules . G4e6f) (case . G4e6a) (if . G4e66) (letrec . G4e64) (lambda . G4e61) (quote . G4e5e) (letrec-syntax . G4e5c) (let-syntax . G4e5b) (set! . G4e5a) (begin . G4e58) (define-syntax . G4e56) (define . G4e55)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5156 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G50cc) (string-ci>=? . G50cb) (string-ci=? . G50ca) (string-ci<? . G50c9) (string-ci<=? . G50c8) (char-whitespace? . G50c7) (char-upper-case? . G50c6) (char-numeric? . G50c4) (char-lower-case? . G50c3) (char-upcase . G50c1) (char-downcase . G50be) (char-ci>? . G50bd) (char-ci>=? . G50bc) (char-ci=? . G50bb) (char-ci<? . G50ba) (char-ci<=? . G50b9) (char-alphabetic? . G50b8) (call-with-output-file . G508c) (call-with-input-file . G508b) (write-char . G508a) (write . G5089) (with-output-to-file . G5088) (with-input-from-file . G5087) (read-char . G5086) (read . G5085) (peek-char . G5084) (open-output-file . G5083) (open-input-file . G5082) (newline . G5081) (display . G5080) (close-output-port . G507f) (close-input-port . G507e) (eof-object . G507c) (current-output-port . G507a) (current-input-port . G5079) (output-port? . G5078) (input-port? . G5077) (scheme-report-environment . G3152) (quotient . G503d) (null-environment . G3150) (remainder . G503c) (modulo . G503b) (inexact->exact . G503a) (force . G5039) (exact->inexact . G5038) (string-fill! . G5036) (string-set! . G5035) (set-cdr! . G5034) (set-car! . G5033) (memv . G502d) (memq . G502c) (member . G502a) (assv . G5022) (assq . G5021) (assoc . G501f) (eval . G3156) (zero? . G4f5a) (vector? . G4f59) (vector-set! . G4f58) (vector-ref . G4f57) (vector-length . G4f55) (vector-fill! . G4f53) (vector->list . G4f52) (vector . G4f51) (values . G4f50) (truncate . G4f4f) (tan . G4f4e) (symbol? . G4f4d) (symbol->string . G4f4b) (substring . G4f4a) (string? . G4f49) (string>? . G4f48) (string>=? . G4f47) (string=? . G4f46) (string<? . G4f45) (string<=? . G4f44) (string-ref . G4f43) (string-length . G4f42) (string-copy . G4f40) (string-append . G4f3f) (string->symbol . G4f3e) (string->number . G4f3d) (string->list . G4f3c) (string . G4f3b) (sqrt . G4f3a) (sin . G4f39) (round . G4f38) (reverse . G4f37) (real? . G4f36) (real-part . G4f34) (rationalize . G4f33) (rational? . G4f32) (procedure? . G4f30) (positive? . G4f2f) (pair? . G4f2e) (odd? . G4f2d) (numerator . G4f2c) (number? . G4f2b) (number->string . G4f2a) (not . G4f28) (negative? . G4f27) (min . G4f25) (max . G4f24) (map . G4f23) (make-vector . G4f22) (make-string . G4f21) (make-rectangular . G4f20) (make-polar . G4f1f) (magnitude . G4f1e) (log . G4f1d) (list? . G4f1c) (list-tail . G4f1b) (list-ref . G4f1a) (list->vector . G4f19) (list->string . G4f18) (list . G4f17) (length . G4f16) (lcm . G4f15) (integer? . G4f14) (integer->char . G4f12) (inexact? . G4f10) (imag-part . G4f0e) (gcd . G4f0d) (for-each . G4f0c) (floor . G4f0b) (expt . G4f09) (exp . G4f08) (exact? . G4f07) (even? . G4f04) (eqv? . G4f02) (equal? . G4f01) (eq? . G4f00) (dynamic-wind . G4eff) (denominator . G4ef8) (cos . G4ef7) (cons . G4ef6) (complex? . G4ef5) (char? . G4ef4) (char>? . G4ef3) (char>=? . G4ef2) (char=? . G4ef1) (char<? . G4ef0) (char<=? . G4eef) (char->integer . G4eee) (ceiling . G4eed) (call-with-values . G4eec) (call-with-current-continuation . G4eea) (cddddr . G4ee9) (cdddar . G4ee8) (cddadr . G4ee7) (cddaar . G4ee6) (cdaddr . G4ee5) (cdadar . G4ee4) (cdaadr . G4ee3) (cdaaar . G4ee2) (cadddr . G4ee1) (caddar . G4ee0) (cadadr . G4edf) (cadaar . G4ede) (caaddr . G4edd) (caadar . G4edc) (caaadr . G4edb) (caaaar . G4eda) (cdddr . G4ed9) (cddar . G4ed8) (cdadr . G4ed7) (cdaar . G4ed6) (caddr . G4ed5) (cadar . G4ed4) (caadr . G4ed3) (caaar . G4ed2) (cddr . G4ed1) (cdar . G4ed0) (cadr . G4ecf) (caar . G4ece) (cdr . G4ecd) (car . G4ecc) (boolean? . G4ecb) (atan . G4ec9) (asin . G4ec7) (apply . G4ec6) (append . G4ec5) (angle . G4ec4) (acos . G4ec3) (abs . G4ec2) (/ . G4ec1) (* . G4ec0) (- . G4ebf) (+ . G4ebe) (>= . G4ebd) (> . G4ebc) (= . G4ebb) (<= . G4eba) (< . G4eb9) (unquote-splicing . G4e85) (unquote . G4e84) (delay . G4e7d) (or . G4e7b) (and . G4e7a) (do . G4e79) (cond . G4e78) (let* . G4e77) (let . G4e76) (quasiquote . G4e70) (syntax-rules . G4e6f) (case . G4e6a) (if . G4e66) (letrec . G4e64) (lambda . G4e61) (quote . G4e5e) (letrec-syntax . G4e5c) (let-syntax . G4e5b) (set! . G4e5a) (begin . G4e58) (define-syntax . G4e56) (define . G4e55)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5157 '(psyntax modules) '() '() '() '() '((module . G4e57)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5158 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5159 '(rnrs) '(6) '() '() '() '((regexp? . G5114) (string-upcase . G50d4) (string-titlecase . G50d3) (string-normalize-nfkd . G50d2) (string-normalize-nfkc . G50d1) (string-normalize-nfd . G50d0) (string-normalize-nfc . G50cf) (string-foldcase . G50ce) (string-downcase . G50cd) (string-ci>? . G50cc) (string-ci>=? . G50cb) (string-ci=? . G50ca) (string-ci<? . G50c9) (string-ci<=? . G50c8) (char-whitespace? . G50c7) (char-upper-case? . G50c6) (char-title-case? . G50c5) (char-numeric? . G50c4) (char-lower-case? . G50c3) (char-general-category . G50c2) (char-upcase . G50c1) (char-titlecase . G50c0) (char-foldcase . G50bf) (char-downcase . G50be) (char-ci>? . G50bd) (char-ci>=? . G50bc) (char-ci=? . G50bb) (char-ci<? . G50ba) (char-ci<=? . G50b9) (char-alphabetic? . G50b8) (make-variable-transformer . G2e83) (identifier? . G317a) (generate-temporaries . G3164) (free-identifier=? . G3166) (syntax->datum . G317e) (datum->syntax . G317c) (bound-identifier=? . G3168) (record-type-descriptor? . G50b7) (record-predicate . G50b6) (record-mutator . G50b5) (record-constructor . G50b4) (record-accessor . G50b3) (make-record-type-descriptor . G50b2) (make-record-constructor-descriptor . G50b1) (record? . G50b0) (record-type-uid . G50af) (record-type-sealed? . G50ae) (record-type-parent . G50ad) (record-type-opaque? . G50ac) (record-type-name . G50ab) (record-type-generative? . G50aa) (record-type-field-names . G50a9) (record-rtd . G50a8) (record-field-mutable? . G50a7) (delete-file . G50a6) (file-exists? . G50a5) (vector-sort! . G50a4) (vector-sort . G50a3) (list-sort . G50a2) (symbol-hash . G50a1) (string-ci-hash . G50a0) (string-hash . G509f) (equal-hash . G509e) (hashtable-equivalence-function . G509d) (make-hashtable . G509c) (hashtable-hash-function . G509b) (make-eqv-hashtable . G509a) (make-eq-hashtable . G5099) (hashtable? . G5098) (hashtable-update! . G5097) (hashtable-size . G5096) (hashtable-set! . G5095) (hashtable-ref . G5094) (hashtable-mutable? . G5093) (hashtable-keys . G5092) (hashtable-entries . G5091) (hashtable-delete! . G5090) (hashtable-copy . G508f) (hashtable-contains? . G508e) (hashtable-clear! . G508d) (call-with-output-file . G508c) (call-with-input-file . G508b) (write-char . G508a) (write . G5089) (with-output-to-file . G5088) (with-input-from-file . G5087) (read-char . G5086) (read . G5085) (peek-char . G5084) (open-output-file . G5083) (open-input-file . G5082) (newline . G5081) (display . G5080) (close-output-port . G507f) (close-input-port . G507e) (eof-object? . G507d) (eof-object . G507c) (current-error-port . G507b) (current-output-port . G507a) (current-input-port . G5079) (output-port? . G5078) (input-port? . G5077) (utf-8-codec . G5076) (utf-16-codec . G5075) (transcoder-error-handling-mode . G5074) (transcoder-eol-style . G5073) (transcoder-codec . G5072) (transcoded-port . G5071) (textual-port? . G5070) (string->bytevector . G506f) (standard-output-port . G506e) (standard-input-port . G506d) (standard-error-port . G506c) (set-port-position! . G506b) (put-u8 . G506a) (put-string . G5069) (put-datum . G5068) (put-char . G5067) (put-bytevector . G5066) (port? . G5065) (port-transcoder . G5064) (port-position . G5063) (port-has-set-port-position!? . G5062) (port-has-port-position? . G5061) (port-eof? . G5060) (output-port-buffer-mode . G505f) (open-string-output-port . G505e) (open-string-input-port . G505d) (open-file-output-port . G505c) (open-file-input/output-port . G505b) (open-file-input-port . G505a) (open-bytevector-output-port . G5059) (open-bytevector-input-port . G5058) (native-transcoder . G5057) (native-eol-style . G5056) (make-transcoder . G5055) (latin-1-codec . G5054) (make-i/o-write-error . G4c93) (make-i/o-read-error . G4c7f) (make-i/o-port-error . G4d2a) (make-i/o-invalid-position-error . G4ca8) (make-i/o-filename-error . G4cc1) (make-i/o-file-protection-error . G4cd9) (make-i/o-file-is-read-only-error . G4ced) (make-i/o-file-does-not-exist-error . G4d15) (make-i/o-file-already-exists-error . G4d01) (make-i/o-error . G4c6b) (make-i/o-encoding-error . G4d57) (make-i/o-decoding-error . G4d42) (make-custom-textual-output-port . G5053) (make-custom-textual-input/output-port . G5052) (make-custom-textual-input-port . G5051) (make-custom-binary-output-port . G5050) (make-custom-binary-input/output-port . G504f) (make-custom-binary-input-port . G504e) (make-bytevector . G504d) (lookahead-u8 . G504c) (lookahead-char . G504b) (i/o-write-error? . G4c95) (i/o-read-error? . G4c81) (i/o-port-error? . G4d2e) (i/o-invalid-position-error? . G4cac) (i/o-filename-error? . G4cc5) (i/o-file-protection-error? . G4cdb) (i/o-file-is-read-only-error? . G4cef) (i/o-file-does-not-exist-error? . G4d17) (i/o-file-already-exists-error? . G4d03) (i/o-error? . G4c6d) (i/o-error-port . G4d30) (i/o-error-filename . G4cc7) (i/o-encoding-error? . G4d5b) (i/o-encoding-error-char . G4d5d) (i/o-decoding-error? . G4d44) (get-u8 . G504a) (get-string-n! . G5049) (get-string-n . G5048) (get-string-all . G5047) (get-line . G5046) (get-datum . G5045) (get-char . G5044) (get-bytevector-some . G5043) (get-bytevector-n! . G5042) (get-bytevector-n . G5041) (get-bytevector-all . G5040) (flush-output-port . G503f) (close-port . G503e) (exit . G5037) (command-line . G4db6) (remove . G5032) (remv . G5031) (remp . G5030) (remq . G502f) (partition . G502e) (memv . G502d) (memq . G502c) (memp . G502b) (member . G502a) (exists . G5029) (for-all . G5028) (fold-right . G5027) (fold-left . G5026) (find . G5025) (filter . G5024) (cons* . G5023) (assv . G5022) (assq . G5021) (assp . G5020) (assoc . G501f) (call-with-string-output-port . G501e) (call-with-port . G501d) (call-with-bytevector-output-port . G501c) (bytevector->string . G501b) (buffer-mode? . G501a) (binary-port? . G5019) (with-exception-handler . G5018) (raise-continuable . G5017) (raise . G5016) (make-enumeration . G5015) (enum-set=? . G5014) (enum-set-universe . G5013) (enum-set-union . G5012) (enum-set-subset? . G5011) (enum-set-projection . G5010) (enum-set-member? . G500f) (enum-set-intersection . G500e) (enum-set-indexer . G500d) (enum-set-difference . G500c) (enum-set-constructor . G500b) (enum-set-complement . G500a) (enum-set->list . G5009) (who-condition? . G4b89) (warning? . G4b09) (violation? . G4b45) (undefined-violation? . G4bf9) (syntax-violation? . G4be1) (syntax-violation-subform . G4be5) (syntax-violation-form . G4be3) (syntax-violation . G3178) (simple-conditions . G5008) (serious-condition? . G4b1d) (non-continuable-violation? . G4b9f) (message-condition? . G4af3) (make-who-condition . G4b85) (make-warning . G4b07) (make-violation . G4b43) (make-undefined-violation . G4bf7) (make-syntax-violation . G4bdb) (make-serious-condition . G4b1b) (make-non-continuable-violation . G4b9d) (make-message-condition . G4aef) (make-lexical-violation . G4bc5) (make-irritants-condition . G4b6c) (make-implementation-restriction-violation . G4bb1) (make-error . G4b2f) (make-assertion-violation . G4b57) (lexical-violation? . G4bc7) (irritants-condition? . G4b70) (implementation-restriction-violation? . G4bb3) (error? . G4b31) (condition-who . G4b8b) (condition-predicate . G5007) (condition-message . G4af5) (condition-irritants . G4b72) (condition-accessor . G5006) (condition . G5005) (assertion-violation? . G4b59) (condition? . G5004) (utf32->string . G5003) (utf16->string . G5002) (utf8->string . G5001) (uint-list->bytevector . G5000) (u8-list->bytevector . G4fff) (string->utf8 . G4ffe) (string->utf32 . G4ffd) (string->utf16 . G4ffc) (sint-list->bytevector . G4ffb) (native-endianness . G4ffa) (bytevector? . G4ff9) (bytevector=? . G4ff8) (bytevector-uint-set! . G4ff7) (bytevector-uint-ref . G4ff6) (bytevector-u8-set! . G4ff5) (bytevector-u8-ref . G4ff4) (bytevector-u64-set! . G4ff3) (bytevector-u64-ref . G4ff2) (bytevector-u64-native-set! . G4ff1) (bytevector-u64-native-ref . G4ff0) (bytevector-u32-set! . G4fef) (bytevector-u32-ref . G4fee) (bytevector-u32-native-set! . G4fed) (bytevector-u32-native-ref . G4fec) (bytevector-u16-set! . G4feb) (bytevector-u16-ref . G4fea) (bytevector-u16-native-set! . G4fe9) (bytevector-u16-native-ref . G4fe8) (bytevector-sint-set! . G4fe7) (bytevector-sint-ref . G4fe6) (bytevector-s8-set! . G4fe5) (bytevector-s8-ref . G4fe4) (bytevector-s64-set! . G4fe3) (bytevector-s64-ref . G4fe2) (bytevector-s64-native-set! . G4fe1) (bytevector-s64-native-ref . G4fe0) (bytevector-s32-set! . G4fdf) (bytevector-s32-ref . G4fde) (bytevector-s32-native-set! . G4fdd) (bytevector-s32-native-ref . G4fdc) (bytevector-s16-set! . G4fdb) (bytevector-s16-ref . G4fda) (bytevector-s16-native-set! . G4fd9) (bytevector-s16-native-ref . G4fd8) (bytevector-length . G4fd7) (bytevector-ieee-single-ref . G4fd6) (bytevector-ieee-single-native-set! . G4fd5) (bytevector-ieee-single-native-ref . G4fd4) (bytevector-ieee-double-ref . G4fd3) (bytevector-ieee-double-native-set! . G4fd2) (bytevector-ieee-double-native-ref . G4fd1) (bytevector-fill! . G4fd0) (bytevector-copy! . G4fcf) (bytevector-copy . G4fce) (bytevector->uint-list . G4fcd) (bytevector->u8-list . G4fcc) (bytevector->sint-list . G4fcb) (no-nans-violation? . G4fca) (no-infinities-violation? . G4fc9) (make-no-nans-violation . G4fc8) (make-no-infinities-violation . G4fc7) (real->flonum . G4fc6) (flzero? . G4fc5) (fltruncate . G4fc4) (fltan . G4fc3) (flsqrt . G4fc2) (flsin . G4fc1) (flround . G4fc0) (flpositive? . G4fbf) (flonum? . G4fbe) (flodd? . G4fbd) (flnumerator . G4fbc) (flnegative? . G4fbb) (flnan? . G4fba) (flmod0 . G4fb9) (flmod . G4fb8) (flmin . G4fb7) (flmax . G4fb6) (fllog . G4fb5) (flinteger? . G4fb4) (flinfinite? . G4fb3) (flfloor . G4fb2) (flfinite? . G4fb1) (flexpt . G4fb0) (flexp . G4faf) (fleven? . G4fae) (fldiv0-and-mod0 . G4fad) (fldiv0 . G4fac) (fldiv-and-mod . G4fab) (fldiv . G4faa) (fldenominator . G4fa9) (flcos . G4fa8) (flceiling . G4fa7) (flatan . G4fa6) (flasin . G4fa5) (flacos . G4fa4) (flabs . G4fa3) (fl>? . G4fa2) (fl>=? . G4fa1) (fl=? . G4fa0) (fl<? . G4f9f) (fl<=? . G4f9e) (fl/ . G4f9d) (fl- . G4f9c) (fl+ . G4f9b) (fl* . G4f9a) (fixnum->flonum . G4f99) (fxzero? . G4f98) (fxxor . G4f97) (fxrotate-bit-field . G4f96) (fxreverse-bit-field . G4f95) (fxpositive? . G4f94) (fxodd? . G4f93) (fxnot . G4f92) (fxnegative? . G4f91) (fxmod0 . G4f90) (fxmod . G4f8f) (fxmin . G4f8e) (fxmax . G4f8d) (fxlength . G4f8c) (fxior . G4f8b) (fxif . G4f8a) (fxfirst-bit-set . G4f89) (fxeven? . G4f88) (fxdiv0-and-mod0 . G4f87) (fxdiv0 . G4f86) (fxdiv-and-mod . G4f85) (fxdiv . G4f84) (fxcopy-bit-field . G4f83) (fxcopy-bit . G4f82) (fxbit-set? . G4f81) (fxbit-field . G4f80) (fxbit-count . G4f7f) (fxarithmetic-shift-right . G4f7e) (fxarithmetic-shift-left . G4f7d) (fxarithmetic-shift . G4f7c) (fxand . G4f7b) (fx>? . G4f7a) (fx>=? . G4f79) (fx=? . G4f78) (fx<? . G4f77) (fx<=? . G4f76) (fx-/carry . G4f75) (fx- . G4f74) (fx+/carry . G4f73) (fx+ . G4f72) (fx*/carry . G4f71) (fx* . G4f70) (greatest-fixnum . G4f6f) (least-fixnum . G4f6e) (fixnum-width . G4f6d) (fixnum? . G4f6c) (bitwise-rotate-bit-field . G4f6b) (bitwise-reverse-bit-field . G4f6a) (bitwise-length . G4f69) (bitwise-if . G4f68) (bitwise-first-bit-set . G4f67) (bitwise-copy-bit-field . G4f66) (bitwise-copy-bit . G4f65) (bitwise-bit-set? . G4f64) (bitwise-bit-field . G4f63) (bitwise-bit-count . G4f62) (bitwise-xor . G4f61) (bitwise-ior . G4f60) (bitwise-and . G4f5f) (bitwise-not . G4f5e) (bitwise-arithmetic-shift-right . G4f5d) (bitwise-arithmetic-shift-left . G4f5c) (bitwise-arithmetic-shift . G4f5b) (zero? . G4f5a) (vector? . G4f59) (vector-set! . G4f58) (vector-ref . G4f57) (vector-map . G4f56) (vector-length . G4f55) (vector-for-each . G4f54) (vector-fill! . G4f53) (vector->list . G4f52) (vector . G4f51) (values . G4f50) (truncate . G4f4f) (tan . G4f4e) (symbol? . G4f4d) (symbol=? . G4f4c) (symbol->string . G4f4b) (substring . G4f4a) (string? . G4f49) (string>? . G4f48) (string>=? . G4f47) (string=? . G4f46) (string<? . G4f45) (string<=? . G4f44) (string-ref . G4f43) (string-length . G4f42) (string-for-each . G4f41) (string-copy . G4f40) (string-append . G4f3f) (string->symbol . G4f3e) (string->number . G4f3d) (string->list . G4f3c) (string . G4f3b) (sqrt . G4f3a) (sin . G4f39) (round . G4f38) (reverse . G4f37) (real? . G4f36) (real-valued? . G4f35) (real-part . G4f34) (rationalize . G4f33) (rational? . G4f32) (rational-valued? . G4f31) (procedure? . G4f30) (positive? . G4f2f) (pair? . G4f2e) (odd? . G4f2d) (numerator . G4f2c) (number? . G4f2b) (number->string . G4f2a) (null? . G4f29) (not . G4f28) (negative? . G4f27) (nan? . G4f26) (min . G4f25) (max . G4f24) (map . G4f23) (make-vector . G4f22) (make-string . G4f21) (make-rectangular . G4f20) (make-polar . G4f1f) (magnitude . G4f1e) (log . G4f1d) (list? . G4f1c) (list-tail . G4f1b) (list-ref . G4f1a) (list->vector . G4f19) (list->string . G4f18) (list . G4f17) (length . G4f16) (lcm . G4f15) (integer? . G4f14) (integer-valued? . G4f13) (integer->char . G4f12) (infinite? . G4f11) (inexact? . G4f10) (inexact . G4f0f) (imag-part . G4f0e) (gcd . G4f0d) (for-each . G4f0c) (floor . G4f0b) (finite? . G4f0a) (expt . G4f09) (exp . G4f08) (exact? . G4f07) (exact-integer-sqrt . G4f06) (exact . G4f05) (even? . G4f04) (error . G4f03) (eqv? . G4f02) (equal? . G4f01) (eq? . G4f00) (dynamic-wind . G4eff) (div0-and-mod0 . G4efe) (mod0 . G4efd) (div0 . G4efc) (div-and-mod . G4efb) (mod . G4efa) (div . G4ef9) (denominator . G4ef8) (cos . G4ef7) (cons . G4ef6) (complex? . G4ef5) (char? . G4ef4) (char>? . G4ef3) (char>=? . G4ef2) (char=? . G4ef1) (char<? . G4ef0) (char<=? . G4eef) (char->integer . G4eee) (ceiling . G4eed) (call-with-values . G4eec) (call/cc . G4eeb) (call-with-current-continuation . G4eea) (cddddr . G4ee9) (cdddar . G4ee8) (cddadr . G4ee7) (cddaar . G4ee6) (cdaddr . G4ee5) (cdadar . G4ee4) (cdaadr . G4ee3) (cdaaar . G4ee2) (cadddr . G4ee1) (caddar . G4ee0) (cadadr . G4edf) (cadaar . G4ede) (caaddr . G4edd) (caadar . G4edc) (caaadr . G4edb) (caaaar . G4eda) (cdddr . G4ed9) (cddar . G4ed8) (cdadr . G4ed7) (cdaar . G4ed6) (caddr . G4ed5) (cadar . G4ed4) (caadr . G4ed3) (caaar . G4ed2) (cddr . G4ed1) (cdar . G4ed0) (cadr . G4ecf) (caar . G4ece) (cdr . G4ecd) (car . G4ecc) (boolean? . G4ecb) (boolean=? . G4eca) (atan . G4ec9) (assertion-violation . G4ec8) (asin . G4ec7) (apply . G4ec6) (append . G4ec5) (angle . G4ec4) (acos . G4ec3) (abs . G4ec2) (/ . G4ec1) (* . G4ec0) (- . G4ebf) (+ . G4ebe) (>= . G4ebd) (> . G4ebc) (= . G4ebb) (<= . G4eba) (< . G4eb9) (&no-nans . G4eb6) (&no-infinities . G4eb5) (&i/o-encoding . G4eb4) (&i/o-decoding . G4eb3) (&i/o-port . G4eb2) (&i/o-file-does-not-exist . G4eb1) (&i/o-file-already-exists . G4eb0) (&i/o-file-is-read-only . G4eaf) (&i/o-file-protection . G4eae) (&i/o-filename . G4ead) (&i/o-invalid-position . G4eac) (&i/o-write . G4eab) (&i/o-read . G4eaa) (&i/o . G4ea9) (&undefined . G4ea8) (&syntax . G4ea7) (&lexical . G4ea6) (&implementation-restriction . G4ea5) (&non-continuable . G4ea4) (&who . G4ea3) (&irritants . G4ea2) (&assertion . G4ea1) (&violation . G4ea0) (&error . G4e9f) (&serious . G4e9e) (&warning . G4e9d) (&message . G4e9c) (&condition . G4e9b) (define-condition-type . G4e9a) (define-enumeration . G4e99) (define-record-type . G4e98) (parent-rtd . G4e97) (nongenerative . G4e96) (opaque . G4e95) (sealed . G4e94) (protocol . G4e93) (parent . G4e92) (immutable . G4e91) (mutable . G4e90) (fields . G4e8f) (error-handling-mode . G4e8e) (file-options . G4e8d) (buffer-mode . G4e8c) (eol-style . G4e8b) (guard . G4e8a) (unsyntax-splicing . G4e87) (unsyntax . G4e86) (unquote-splicing . G4e85) (unquote . G4e84) (_ . G4e83) (else . G4e82) (=> . G4e81) (... . G4e80) (assert . G4e7f) (endianness . G4e7e) (or . G4e7b) (and . G4e7a) (do . G4e79) (cond . G4e78) (let* . G4e77) (let . G4e76) (let*-values . G4e75) (let-values . G4e74) (identifier-syntax . G4e73) (with-syntax . G4e72) (quasisyntax . G4e71) (quasiquote . G4e70) (syntax-rules . G4e6f) (record-constructor-descriptor . G4e6c) (record-type-descriptor . G4e6b) (case . G4e6a) (unless . G4e68) (when . G4e67) (if . G4e66) (letrec* . G4e65) (letrec . G4e64) (case-lambda . G4e62) (lambda . G4e61) (syntax . G4e60) (syntax-case . G4e5f) (quote . G4e5e) (letrec-syntax . G4e5c) (let-syntax . G4e5b) (set! . G4e5a) (begin . G4e58) (define-syntax . G4e56) (define . G4e55)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G515a '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3152) (quotient . G503d) (null-environment . G3150) (remainder . G503c) (modulo . G503b) (inexact->exact . G503a) (force . G5039) (exact->inexact . G5038) (delay . G4e7d)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G515b '(rnrs control) '(6) '() '() '() '((do . G4e79) (unless . G4e68) (when . G4e67) (case-lambda . G4e62)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G515c '(rnrs eval) '(6) '() '() '() '((eval . G3156) (environment . G314e)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G515d '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G5034) (set-car! . G5033)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G515e '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G5036) (string-set! . G5035)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G515f '(rnrs programs) '(6) '() '() '() '((exit . G5037) (command-line . G4db6)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5160 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2e83) (identifier? . G317a) (generate-temporaries . G3164) (free-identifier=? . G3166) (syntax->datum . G317e) (datum->syntax . G317c) (bound-identifier=? . G3168) (syntax-violation . G3178) (unsyntax-splicing . G4e87) (unsyntax . G4e86) (_ . G4e83) (... . G4e80) (with-syntax . G4e72) (quasisyntax . G4e71) (syntax . G4e60) (syntax-case . G4e5f)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5161 '(rnrs files) '(6) '() '() '() '((delete-file . G50a6) (file-exists? . G50a5) (make-i/o-write-error . G4c93) (make-i/o-read-error . G4c7f) (make-i/o-port-error . G4d2a) (make-i/o-invalid-position-error . G4ca8) (make-i/o-filename-error . G4cc1) (make-i/o-file-protection-error . G4cd9) (make-i/o-file-is-read-only-error . G4ced) (make-i/o-file-does-not-exist-error . G4d15) (make-i/o-file-already-exists-error . G4d01) (make-i/o-error . G4c6b) (i/o-write-error? . G4c95) (i/o-read-error? . G4c81) (i/o-port-error? . G4d2e) (i/o-invalid-position-error? . G4cac) (i/o-filename-error? . G4cc5) (i/o-file-protection-error? . G4cdb) (i/o-file-is-read-only-error? . G4cef) (i/o-file-does-not-exist-error? . G4d17) (i/o-file-already-exists-error? . G4d03) (i/o-error? . G4c6d) (i/o-error-port . G4d30) (i/o-error-filename . G4cc7) (&i/o-port . G4eb2) (&i/o-file-does-not-exist . G4eb1) (&i/o-file-already-exists . G4eb0) (&i/o-file-is-read-only . G4eaf) (&i/o-file-protection . G4eae) (&i/o-filename . G4ead) (&i/o-invalid-position . G4eac) (&i/o-write . G4eab) (&i/o-read . G4eaa) (&i/o . G4ea9)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5162 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G50a4) (vector-sort . G50a3) (list-sort . G50a2)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5163 '(rnrs base) '(6) '() '() '() '((zero? . G4f5a) (vector? . G4f59) (vector-set! . G4f58) (vector-ref . G4f57) (vector-map . G4f56) (vector-length . G4f55) (vector-for-each . G4f54) (vector-fill! . G4f53) (vector->list . G4f52) (vector . G4f51) (values . G4f50) (truncate . G4f4f) (tan . G4f4e) (symbol? . G4f4d) (symbol=? . G4f4c) (symbol->string . G4f4b) (substring . G4f4a) (string? . G4f49) (string>? . G4f48) (string>=? . G4f47) (string=? . G4f46) (string<? . G4f45) (string<=? . G4f44) (string-ref . G4f43) (string-length . G4f42) (string-for-each . G4f41) (string-copy . G4f40) (string-append . G4f3f) (string->symbol . G4f3e) (string->number . G4f3d) (string->list . G4f3c) (string . G4f3b) (sqrt . G4f3a) (sin . G4f39) (round . G4f38) (reverse . G4f37) (real? . G4f36) (real-valued? . G4f35) (real-part . G4f34) (rationalize . G4f33) (rational? . G4f32) (rational-valued? . G4f31) (procedure? . G4f30) (positive? . G4f2f) (pair? . G4f2e) (odd? . G4f2d) (numerator . G4f2c) (number? . G4f2b) (number->string . G4f2a) (null? . G4f29) (not . G4f28) (negative? . G4f27) (nan? . G4f26) (min . G4f25) (max . G4f24) (map . G4f23) (make-vector . G4f22) (make-string . G4f21) (make-rectangular . G4f20) (make-polar . G4f1f) (magnitude . G4f1e) (log . G4f1d) (list? . G4f1c) (list-tail . G4f1b) (list-ref . G4f1a) (list->vector . G4f19) (list->string . G4f18) (list . G4f17) (length . G4f16) (lcm . G4f15) (integer? . G4f14) (integer-valued? . G4f13) (integer->char . G4f12) (infinite? . G4f11) (inexact? . G4f10) (inexact . G4f0f) (imag-part . G4f0e) (gcd . G4f0d) (for-each . G4f0c) (floor . G4f0b) (finite? . G4f0a) (expt . G4f09) (exp . G4f08) (exact? . G4f07) (exact-integer-sqrt . G4f06) (exact . G4f05) (even? . G4f04) (error . G4f03) (eqv? . G4f02) (equal? . G4f01) (eq? . G4f00) (dynamic-wind . G4eff) (div0-and-mod0 . G4efe) (mod0 . G4efd) (div0 . G4efc) (div-and-mod . G4efb) (mod . G4efa) (div . G4ef9) (denominator . G4ef8) (cos . G4ef7) (cons . G4ef6) (complex? . G4ef5) (char? . G4ef4) (char>? . G4ef3) (char>=? . G4ef2) (char=? . G4ef1) (char<? . G4ef0) (char<=? . G4eef) (char->integer . G4eee) (ceiling . G4eed) (call-with-values . G4eec) (call/cc . G4eeb) (call-with-current-continuation . G4eea) (cddddr . G4ee9) (cdddar . G4ee8) (cddadr . G4ee7) (cddaar . G4ee6) (cdaddr . G4ee5) (cdadar . G4ee4) (cdaadr . G4ee3) (cdaaar . G4ee2) (cadddr . G4ee1) (caddar . G4ee0) (cadadr . G4edf) (cadaar . G4ede) (caaddr . G4edd) (caadar . G4edc) (caaadr . G4edb) (caaaar . G4eda) (cdddr . G4ed9) (cddar . G4ed8) (cdadr . G4ed7) (cdaar . G4ed6) (caddr . G4ed5) (cadar . G4ed4) (caadr . G4ed3) (caaar . G4ed2) (cddr . G4ed1) (cdar . G4ed0) (cadr . G4ecf) (caar . G4ece) (cdr . G4ecd) (car . G4ecc) (boolean? . G4ecb) (boolean=? . G4eca) (atan . G4ec9) (assertion-violation . G4ec8) (asin . G4ec7) (apply . G4ec6) (append . G4ec5) (angle . G4ec4) (acos . G4ec3) (abs . G4ec2) (/ . G4ec1) (* . G4ec0) (- . G4ebf) (+ . G4ebe) (>= . G4ebd) (> . G4ebc) (= . G4ebb) (<= . G4eba) (< . G4eb9) (unquote-splicing . G4e85) (unquote . G4e84) (_ . G4e83) (else . G4e82) (=> . G4e81) (... . G4e80) (assert . G4e7f) (or . G4e7b) (and . G4e7a) (cond . G4e78) (let* . G4e77) (let . G4e76) (let*-values . G4e75) (let-values . G4e74) (identifier-syntax . G4e73) (quasiquote . G4e70) (syntax-rules . G4e6f) (case . G4e6a) (if . G4e66) (letrec* . G4e65) (letrec . G4e64) (lambda . G4e61) (quote . G4e5e) (letrec-syntax . G4e5c) (let-syntax . G4e5b) (set! . G4e5a) (begin . G4e58) (define-syntax . G4e56) (define . G4e55)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5164 '(rnrs lists) '(6) '() '() '() '((remove . G5032) (remv . G5031) (remp . G5030) (remq . G502f) (partition . G502e) (memv . G502d) (memq . G502c) (memp . G502b) (member . G502a) (exists . G5029) (for-all . G5028) (fold-right . G5027) (fold-left . G5026) (find . G5025) (filter . G5024) (cons* . G5023) (assv . G5022) (assq . G5021) (assp . G5020) (assoc . G501f)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5165 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G508c) (call-with-input-file . G508b) (write-char . G508a) (write . G5089) (with-output-to-file . G5088) (with-input-from-file . G5087) (read-char . G5086) (read . G5085) (peek-char . G5084) (open-output-file . G5083) (open-input-file . G5082) (newline . G5081) (display . G5080) (close-output-port . G507f) (close-input-port . G507e) (eof-object? . G507d) (eof-object . G507c) (current-error-port . G507b) (current-output-port . G507a) (current-input-port . G5079) (output-port? . G5078) (input-port? . G5077) (make-i/o-write-error . G4c93) (make-i/o-read-error . G4c7f) (make-i/o-port-error . G4d2a) (make-i/o-invalid-position-error . G4ca8) (make-i/o-filename-error . G4cc1) (make-i/o-file-protection-error . G4cd9) (make-i/o-file-is-read-only-error . G4ced) (make-i/o-file-does-not-exist-error . G4d15) (make-i/o-file-already-exists-error . G4d01) (make-i/o-error . G4c6b) (i/o-write-error? . G4c95) (i/o-read-error? . G4c81) (i/o-port-error? . G4d2e) (i/o-invalid-position-error? . G4cac) (i/o-filename-error? . G4cc5) (i/o-file-protection-error? . G4cdb) (i/o-file-is-read-only-error? . G4cef) (i/o-file-does-not-exist-error? . G4d17) (i/o-file-already-exists-error? . G4d03) (i/o-error? . G4c6d) (i/o-error-port . G4d30) (i/o-error-filename . G4cc7) (&i/o-port . G4eb2) (&i/o-file-does-not-exist . G4eb1) (&i/o-file-already-exists . G4eb0) (&i/o-file-is-read-only . G4eaf) (&i/o-file-protection . G4eae) (&i/o-filename . G4ead) (&i/o-invalid-position . G4eac) (&i/o-write . G4eab) (&i/o-read . G4eaa) (&i/o . G4ea9)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5166 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G504d) (utf32->string . G5003) (utf16->string . G5002) (utf8->string . G5001) (uint-list->bytevector . G5000) (u8-list->bytevector . G4fff) (string->utf8 . G4ffe) (string->utf32 . G4ffd) (string->utf16 . G4ffc) (sint-list->bytevector . G4ffb) (native-endianness . G4ffa) (bytevector? . G4ff9) (bytevector=? . G4ff8) (bytevector-uint-set! . G4ff7) (bytevector-uint-ref . G4ff6) (bytevector-u8-set! . G4ff5) (bytevector-u8-ref . G4ff4) (bytevector-u64-set! . G4ff3) (bytevector-u64-ref . G4ff2) (bytevector-u64-native-set! . G4ff1) (bytevector-u64-native-ref . G4ff0) (bytevector-u32-set! . G4fef) (bytevector-u32-ref . G4fee) (bytevector-u32-native-set! . G4fed) (bytevector-u32-native-ref . G4fec) (bytevector-u16-set! . G4feb) (bytevector-u16-ref . G4fea) (bytevector-u16-native-set! . G4fe9) (bytevector-u16-native-ref . G4fe8) (bytevector-sint-set! . G4fe7) (bytevector-sint-ref . G4fe6) (bytevector-s8-set! . G4fe5) (bytevector-s8-ref . G4fe4) (bytevector-s64-set! . G4fe3) (bytevector-s64-ref . G4fe2) (bytevector-s64-native-set! . G4fe1) (bytevector-s64-native-ref . G4fe0) (bytevector-s32-set! . G4fdf) (bytevector-s32-ref . G4fde) (bytevector-s32-native-set! . G4fdd) (bytevector-s32-native-ref . G4fdc) (bytevector-s16-set! . G4fdb) (bytevector-s16-ref . G4fda) (bytevector-s16-native-set! . G4fd9) (bytevector-s16-native-ref . G4fd8) (bytevector-length . G4fd7) (bytevector-ieee-single-ref . G4fd6) (bytevector-ieee-single-native-set! . G4fd5) (bytevector-ieee-single-native-ref . G4fd4) (bytevector-ieee-double-ref . G4fd3) (bytevector-ieee-double-native-set! . G4fd2) (bytevector-ieee-double-native-ref . G4fd1) (bytevector-fill! . G4fd0) (bytevector-copy! . G4fcf) (bytevector-copy . G4fce) (bytevector->uint-list . G4fcd) (bytevector->u8-list . G4fcc) (bytevector->sint-list . G4fcb) (endianness . G4e7e)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5167 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G50d4) (string-titlecase . G50d3) (string-normalize-nfkd . G50d2) (string-normalize-nfkc . G50d1) (string-normalize-nfd . G50d0) (string-normalize-nfc . G50cf) (string-foldcase . G50ce) (string-downcase . G50cd) (string-ci>? . G50cc) (string-ci>=? . G50cb) (string-ci=? . G50ca) (string-ci<? . G50c9) (string-ci<=? . G50c8) (char-whitespace? . G50c7) (char-upper-case? . G50c6) (char-title-case? . G50c5) (char-numeric? . G50c4) (char-lower-case? . G50c3) (char-general-category . G50c2) (char-upcase . G50c1) (char-titlecase . G50c0) (char-foldcase . G50bf) (char-downcase . G50be) (char-ci>? . G50bd) (char-ci>=? . G50bc) (char-ci=? . G50bb) (char-ci<? . G50ba) (char-ci<=? . G50b9) (char-alphabetic? . G50b8)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5168 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G5018) (raise-continuable . G5017) (raise . G5016) (guard . G4e8a) (else . G4e82) (=> . G4e81)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5169 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4f6b) (bitwise-reverse-bit-field . G4f6a) (bitwise-length . G4f69) (bitwise-if . G4f68) (bitwise-first-bit-set . G4f67) (bitwise-copy-bit-field . G4f66) (bitwise-copy-bit . G4f65) (bitwise-bit-set? . G4f64) (bitwise-bit-field . G4f63) (bitwise-bit-count . G4f62) (bitwise-xor . G4f61) (bitwise-ior . G4f60) (bitwise-and . G4f5f) (bitwise-not . G4f5e) (bitwise-arithmetic-shift-right . G4f5d) (bitwise-arithmetic-shift-left . G4f5c) (bitwise-arithmetic-shift . G4f5b)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G516a '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f98) (fxxor . G4f97) (fxrotate-bit-field . G4f96) (fxreverse-bit-field . G4f95) (fxpositive? . G4f94) (fxodd? . G4f93) (fxnot . G4f92) (fxnegative? . G4f91) (fxmod0 . G4f90) (fxmod . G4f8f) (fxmin . G4f8e) (fxmax . G4f8d) (fxlength . G4f8c) (fxior . G4f8b) (fxif . G4f8a) (fxfirst-bit-set . G4f89) (fxeven? . G4f88) (fxdiv0-and-mod0 . G4f87) (fxdiv0 . G4f86) (fxdiv-and-mod . G4f85) (fxdiv . G4f84) (fxcopy-bit-field . G4f83) (fxcopy-bit . G4f82) (fxbit-set? . G4f81) (fxbit-field . G4f80) (fxbit-count . G4f7f) (fxarithmetic-shift-right . G4f7e) (fxarithmetic-shift-left . G4f7d) (fxarithmetic-shift . G4f7c) (fxand . G4f7b) (fx>? . G4f7a) (fx>=? . G4f79) (fx=? . G4f78) (fx<? . G4f77) (fx<=? . G4f76) (fx-/carry . G4f75) (fx- . G4f74) (fx+/carry . G4f73) (fx+ . G4f72) (fx*/carry . G4f71) (fx* . G4f70) (greatest-fixnum . G4f6f) (least-fixnum . G4f6e) (fixnum-width . G4f6d) (fixnum? . G4f6c)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G516b '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4fca) (no-infinities-violation? . G4fc9) (make-no-nans-violation . G4fc8) (make-no-infinities-violation . G4fc7) (real->flonum . G4fc6) (flzero? . G4fc5) (fltruncate . G4fc4) (fltan . G4fc3) (flsqrt . G4fc2) (flsin . G4fc1) (flround . G4fc0) (flpositive? . G4fbf) (flonum? . G4fbe) (flodd? . G4fbd) (flnumerator . G4fbc) (flnegative? . G4fbb) (flnan? . G4fba) (flmod0 . G4fb9) (flmod . G4fb8) (flmin . G4fb7) (flmax . G4fb6) (fllog . G4fb5) (flinteger? . G4fb4) (flinfinite? . G4fb3) (flfloor . G4fb2) (flfinite? . G4fb1) (flexpt . G4fb0) (flexp . G4faf) (fleven? . G4fae) (fldiv0-and-mod0 . G4fad) (fldiv0 . G4fac) (fldiv-and-mod . G4fab) (fldiv . G4faa) (fldenominator . G4fa9) (flcos . G4fa8) (flceiling . G4fa7) (flatan . G4fa6) (flasin . G4fa5) (flacos . G4fa4) (flabs . G4fa3) (fl>? . G4fa2) (fl>=? . G4fa1) (fl=? . G4fa0) (fl<? . G4f9f) (fl<=? . G4f9e) (fl/ . G4f9d) (fl- . G4f9c) (fl+ . G4f9b) (fl* . G4f9a) (fixnum->flonum . G4f99) (&no-nans . G4eb6) (&no-infinities . G4eb5)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G516c '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G50a1) (string-ci-hash . G50a0) (string-hash . G509f) (equal-hash . G509e) (hashtable-equivalence-function . G509d) (make-hashtable . G509c) (hashtable-hash-function . G509b) (make-eqv-hashtable . G509a) (make-eq-hashtable . G5099) (hashtable? . G5098) (hashtable-update! . G5097) (hashtable-size . G5096) (hashtable-set! . G5095) (hashtable-ref . G5094) (hashtable-mutable? . G5093) (hashtable-keys . G5092) (hashtable-entries . G5091) (hashtable-delete! . G5090) (hashtable-copy . G508f) (hashtable-contains? . G508e) (hashtable-clear! . G508d)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G516d '(rnrs io ports) '(6) '() '() '() '((eof-object? . G507d) (eof-object . G507c) (current-error-port . G507b) (current-output-port . G507a) (current-input-port . G5079) (output-port? . G5078) (input-port? . G5077) (utf-8-codec . G5076) (utf-16-codec . G5075) (transcoder-error-handling-mode . G5074) (transcoder-eol-style . G5073) (transcoder-codec . G5072) (transcoded-port . G5071) (textual-port? . G5070) (string->bytevector . G506f) (standard-output-port . G506e) (standard-input-port . G506d) (standard-error-port . G506c) (set-port-position! . G506b) (put-u8 . G506a) (put-string . G5069) (put-datum . G5068) (put-char . G5067) (put-bytevector . G5066) (port? . G5065) (port-transcoder . G5064) (port-position . G5063) (port-has-set-port-position!? . G5062) (port-has-port-position? . G5061) (port-eof? . G5060) (output-port-buffer-mode . G505f) (open-string-output-port . G505e) (open-string-input-port . G505d) (open-file-output-port . G505c) (open-file-input/output-port . G505b) (open-file-input-port . G505a) (open-bytevector-output-port . G5059) (open-bytevector-input-port . G5058) (native-transcoder . G5057) (native-eol-style . G5056) (make-transcoder . G5055) (latin-1-codec . G5054) (make-i/o-write-error . G4c93) (make-i/o-read-error . G4c7f) (make-i/o-port-error . G4d2a) (make-i/o-invalid-position-error . G4ca8) (make-i/o-filename-error . G4cc1) (make-i/o-file-protection-error . G4cd9) (make-i/o-file-is-read-only-error . G4ced) (make-i/o-file-does-not-exist-error . G4d15) (make-i/o-file-already-exists-error . G4d01) (make-i/o-error . G4c6b) (make-i/o-encoding-error . G4d57) (make-i/o-decoding-error . G4d42) (make-custom-textual-output-port . G5053) (make-custom-textual-input/output-port . G5052) (make-custom-textual-input-port . G5051) (make-custom-binary-output-port . G5050) (make-custom-binary-input/output-port . G504f) (make-custom-binary-input-port . G504e) (lookahead-u8 . G504c) (lookahead-char . G504b) (i/o-write-error? . G4c95) (i/o-read-error? . G4c81) (i/o-port-error? . G4d2e) (i/o-invalid-position-error? . G4cac) (i/o-filename-error? . G4cc5) (i/o-file-protection-error? . G4cdb) (i/o-file-is-read-only-error? . G4cef) (i/o-file-does-not-exist-error? . G4d17) (i/o-file-already-exists-error? . G4d03) (i/o-error? . G4c6d) (i/o-error-port . G4d30) (i/o-error-filename . G4cc7) (i/o-encoding-error? . G4d5b) (i/o-encoding-error-char . G4d5d) (i/o-decoding-error? . G4d44) (get-u8 . G504a) (get-string-n! . G5049) (get-string-n . G5048) (get-string-all . G5047) (get-line . G5046) (get-datum . G5045) (get-char . G5044) (get-bytevector-some . G5043) (get-bytevector-n! . G5042) (get-bytevector-n . G5041) (get-bytevector-all . G5040) (flush-output-port . G503f) (close-port . G503e) (call-with-string-output-port . G501e) (call-with-port . G501d) (call-with-bytevector-output-port . G501c) (bytevector->string . G501b) (buffer-mode? . G501a) (binary-port? . G5019) (&i/o-encoding . G4eb4) (&i/o-decoding . G4eb3) (&i/o-port . G4eb2) (&i/o-file-does-not-exist . G4eb1) (&i/o-file-already-exists . G4eb0) (&i/o-file-is-read-only . G4eaf) (&i/o-file-protection . G4eae) (&i/o-filename . G4ead) (&i/o-invalid-position . G4eac) (&i/o-write . G4eab) (&i/o-read . G4eaa) (&i/o . G4ea9) (error-handling-mode . G4e8e) (file-options . G4e8d) (buffer-mode . G4e8c) (eol-style . G4e8b)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G516e '(rnrs enums) '(6) '() '() '() '((make-enumeration . G5015) (enum-set=? . G5014) (enum-set-universe . G5013) (enum-set-union . G5012) (enum-set-subset? . G5011) (enum-set-projection . G5010) (enum-set-member? . G500f) (enum-set-intersection . G500e) (enum-set-indexer . G500d) (enum-set-difference . G500c) (enum-set-constructor . G500b) (enum-set-complement . G500a) (enum-set->list . G5009) (define-enumeration . G4e99)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G516f '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4b89) (warning? . G4b09) (violation? . G4b45) (undefined-violation? . G4bf9) (syntax-violation? . G4be1) (syntax-violation-subform . G4be5) (syntax-violation-form . G4be3) (syntax-violation . G3178) (simple-conditions . G5008) (serious-condition? . G4b1d) (non-continuable-violation? . G4b9f) (message-condition? . G4af3) (make-who-condition . G4b85) (make-warning . G4b07) (make-violation . G4b43) (make-undefined-violation . G4bf7) (make-syntax-violation . G4bdb) (make-serious-condition . G4b1b) (make-non-continuable-violation . G4b9d) (make-message-condition . G4aef) (make-lexical-violation . G4bc5) (make-irritants-condition . G4b6c) (make-implementation-restriction-violation . G4bb1) (make-error . G4b2f) (make-assertion-violation . G4b57) (lexical-violation? . G4bc7) (irritants-condition? . G4b70) (implementation-restriction-violation? . G4bb3) (error? . G4b31) (condition-who . G4b8b) (condition-predicate . G5007) (condition-message . G4af5) (condition-irritants . G4b72) (condition-accessor . G5006) (condition . G5005) (assertion-violation? . G4b59) (condition? . G5004) (&undefined . G4ea8) (&syntax . G4ea7) (&lexical . G4ea6) (&implementation-restriction . G4ea5) (&non-continuable . G4ea4) (&who . G4ea3) (&irritants . G4ea2) (&assertion . G4ea1) (&violation . G4ea0) (&error . G4e9f) (&serious . G4e9e) (&warning . G4e9d) (&message . G4e9c) (&condition . G4e9b) (define-condition-type . G4e9a)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5170 '(rnrs records inspection) '(6) '() '() '() '((record? . G50b0) (record-type-uid . G50af) (record-type-sealed? . G50ae) (record-type-parent . G50ad) (record-type-opaque? . G50ac) (record-type-name . G50ab) (record-type-generative? . G50aa) (record-type-field-names . G50a9) (record-rtd . G50a8) (record-field-mutable? . G50a7)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5171 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G50b7) (record-predicate . G50b6) (record-mutator . G50b5) (record-constructor . G50b4) (record-accessor . G50b3) (make-record-type-descriptor . G50b2) (make-record-constructor-descriptor . G50b1)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5172 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e98) (parent-rtd . G4e97) (nongenerative . G4e96) (opaque . G4e95) (sealed . G4e94) (protocol . G4e93) (parent . G4e92) (immutable . G4e91) (mutable . G4e90) (fields . G4e8f) (record-constructor-descriptor . G4e6c) (record-type-descriptor . G4e6b)) '() values values '#f '#f '#t '#f) (G2c36@G2ac9@install-library 'G5173 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G5153) (&no-nans-rtd . G5152) (&no-infinities-rcd . G5151) (&no-infinities-rtd . G5150) (&i/o-encoding-rcd . G514f) (&i/o-encoding-rtd . G514e) (&i/o-decoding-rcd . G514d) (&i/o-decoding-rtd . G514c) (&i/o-port-rcd . G514b) (&i/o-port-rtd . G514a) (&i/o-file-does-not-exist-rcd . G5149) (&i/o-file-does-not-exist-rtd . G5148) (&i/o-file-already-exists-rcd . G5147) (&i/o-file-already-exists-rtd . G5146) (&i/o-file-is-read-only-rcd . G5145) (&i/o-file-is-read-only-rtd . G5144) (&i/o-file-protection-rcd . G5143) (&i/o-file-protection-rtd . G5142) (&i/o-filename-rcd . G5141) (&i/o-filename-rtd . G5140) (&i/o-invalid-position-rcd . G513f) (&i/o-invalid-position-rtd . G513e) (&i/o-write-rcd . G513d) (&i/o-write-rtd . G513c) (&i/o-read-rcd . G513b) (&i/o-read-rtd . G513a) (&i/o-rcd . G5139) (&i/o-rtd . G5138) (&undefined-rcd . G5137) (&undefined-rtd . G5136) (&syntax-rcd . G5135) (&syntax-rtd . G5134) (&lexical-rcd . G5133) (&lexical-rtd . G5132) (&implementation-restriction-rcd . G5131) (&implementation-restriction-rtd . G5130) (&non-continuable-rcd . G512f) (&non-continuable-rtd . G512e) (&who-rcd . G512d) (&who-rtd . G512c) (&irritants-rcd . G512b) (&irritants-rtd . G512a) (&assertion-rcd . G5129) (&assertion-rtd . G5128) (&violation-rcd . G5127) (&violation-rtd . G5126) (&error-rcd . G5125) (&error-rtd . G5124) (&serious-rcd . G5123) (&serious-rtd . G5122) (&warning-rcd . G5121) (&warning-rtd . G5120) (&message-rcd . G511f) (&message-rtd . G511e) (&condition-rcd . G511d) (&condition-rtd . G511c) (syntax-error . G3172) (syntax-dispatch . G3085) (pretty-print . G511b) (eval-core . G511a) (set-symbol-value! . G5119) (symbol-value . G5118) (gensym . G5117) (void . G5116) (load . G4dbc) (interaction-environment . G3184) (char-ready? . G5115) (regexp? . G5114) (read-line . G5113) (dotted-list? . G5112) (circular-list? . G5111) (proper-list? . G5110) (circular-list . G510f) (last . G510e) (last-pair . G510d) (not-pair? . G510c) (split-at! . G510b) (split-at . G510a) (list= . G5109) (list-copy . G5108) (list-tabulate . G5107) (make-list . G5106) (xcons . G5105) (tenth . G5104) (ninth . G5103) (eighth . G5102) (seventh . G5101) (sixth . G5100) (fifth . G50ff) (drop-right! . G50fe) (drop-right . G50fd) (take-right . G50fc) (take! . G50fb) (drop . G50fa) (take . G50f9) (car+cdr . G50f8) (third . G50f7) (second . G50f6) (first . G50f5) (assoc-ref . G50f4) (alist-cons . G50f3) (print . G50f2) (format . G50f1) (standard-library-path . G50f0) (file-newer? . G50ef) (stat-mtime . G50ee) (current-directory . G50ed) (write-to-file . G50ec) (file->list . G50eb) (file->string . G50ea) (digit->integer . G50e9) (call-with-string-input-port . G50e8) (call-with-string-io . G50e7) (string-split . G50e6) (bytevector-for-each . G50e5) (string->regexp . G50e4) (rxmatch . G50e3) (regexp-replace-all . G50e2) (hashtable-for-each . G50e1) (readdir . G50e0) (get-environment-variables . G50df) (get-environment-variable . G50de) (get-command-line . G50dd) (sys-display . G50dc) (source-info . G50db) (make-compiler-instruction . G50da) (make-instruction . G50d9) (set-source-info! . G50d8) (fasl-read . G50d7) (fasl-write . G50d6) (receive . G50d5) (string-upcase . G50d4) (string-titlecase . G50d3) (string-normalize-nfkd . G50d2) (string-normalize-nfkc . G50d1) (string-normalize-nfd . G50d0) (string-normalize-nfc . G50cf) (string-foldcase . G50ce) (string-downcase . G50cd) (string-ci>? . G50cc) (string-ci>=? . G50cb) (string-ci=? . G50ca) (string-ci<? . G50c9) (string-ci<=? . G50c8) (char-whitespace? . G50c7) (char-upper-case? . G50c6) (char-title-case? . G50c5) (char-numeric? . G50c4) (char-lower-case? . G50c3) (char-general-category . G50c2) (char-upcase . G50c1) (char-titlecase . G50c0) (char-foldcase . G50bf) (char-downcase . G50be) (char-ci>? . G50bd) (char-ci>=? . G50bc) (char-ci=? . G50bb) (char-ci<? . G50ba) (char-ci<=? . G50b9) (char-alphabetic? . G50b8) (make-variable-transformer . G2e83) (identifier? . G317a) (generate-temporaries . G3164) (free-identifier=? . G3166) (syntax->datum . G317e) (datum->syntax . G317c) (bound-identifier=? . G3168) (record-type-descriptor? . G50b7) (record-predicate . G50b6) (record-mutator . G50b5) (record-constructor . G50b4) (record-accessor . G50b3) (make-record-type-descriptor . G50b2) (make-record-constructor-descriptor . G50b1) (record? . G50b0) (record-type-uid . G50af) (record-type-sealed? . G50ae) (record-type-parent . G50ad) (record-type-opaque? . G50ac) (record-type-name . G50ab) (record-type-generative? . G50aa) (record-type-field-names . G50a9) (record-rtd . G50a8) (record-field-mutable? . G50a7) (delete-file . G50a6) (file-exists? . G50a5) (vector-sort! . G50a4) (vector-sort . G50a3) (list-sort . G50a2) (symbol-hash . G50a1) (string-ci-hash . G50a0) (string-hash . G509f) (equal-hash . G509e) (hashtable-equivalence-function . G509d) (make-hashtable . G509c) (hashtable-hash-function . G509b) (make-eqv-hashtable . G509a) (make-eq-hashtable . G5099) (hashtable? . G5098) (hashtable-update! . G5097) (hashtable-size . G5096) (hashtable-set! . G5095) (hashtable-ref . G5094) (hashtable-mutable? . G5093) (hashtable-keys . G5092) (hashtable-entries . G5091) (hashtable-delete! . G5090) (hashtable-copy . G508f) (hashtable-contains? . G508e) (hashtable-clear! . G508d) (call-with-output-file . G508c) (call-with-input-file . G508b) (write-char . G508a) (write . G5089) (with-output-to-file . G5088) (with-input-from-file . G5087) (read-char . G5086) (read . G5085) (peek-char . G5084) (open-output-file . G5083) (open-input-file . G5082) (newline . G5081) (display . G5080) (close-output-port . G507f) (close-input-port . G507e) (eof-object? . G507d) (eof-object . G507c) (current-error-port . G507b) (current-output-port . G507a) (current-input-port . G5079) (output-port? . G5078) (input-port? . G5077) (utf-8-codec . G5076) (utf-16-codec . G5075) (transcoder-error-handling-mode . G5074) (transcoder-eol-style . G5073) (transcoder-codec . G5072) (transcoded-port . G5071) (textual-port? . G5070) (string->bytevector . G506f) (standard-output-port . G506e) (standard-input-port . G506d) (standard-error-port . G506c) (set-port-position! . G506b) (put-u8 . G506a) (put-string . G5069) (put-datum . G5068) (put-char . G5067) (put-bytevector . G5066) (port? . G5065) (port-transcoder . G5064) (port-position . G5063) (port-has-set-port-position!? . G5062) (port-has-port-position? . G5061) (port-eof? . G5060) (output-port-buffer-mode . G505f) (open-string-output-port . G505e) (open-string-input-port . G505d) (open-file-output-port . G505c) (open-file-input/output-port . G505b) (open-file-input-port . G505a) (open-bytevector-output-port . G5059) (open-bytevector-input-port . G5058) (native-transcoder . G5057) (native-eol-style . G5056) (make-transcoder . G5055) (latin-1-codec . G5054) (make-i/o-write-error . G4c93) (make-i/o-read-error . G4c7f) (make-i/o-port-error . G4d2a) (make-i/o-invalid-position-error . G4ca8) (make-i/o-filename-error . G4cc1) (make-i/o-file-protection-error . G4cd9) (make-i/o-file-is-read-only-error . G4ced) (make-i/o-file-does-not-exist-error . G4d15) (make-i/o-file-already-exists-error . G4d01) (make-i/o-error . G4c6b) (make-i/o-encoding-error . G4d57) (make-i/o-decoding-error . G4d42) (make-custom-textual-output-port . G5053) (make-custom-textual-input/output-port . G5052) (make-custom-textual-input-port . G5051) (make-custom-binary-output-port . G5050) (make-custom-binary-input/output-port . G504f) (make-custom-binary-input-port . G504e) (make-bytevector . G504d) (lookahead-u8 . G504c) (lookahead-char . G504b) (i/o-write-error? . G4c95) (i/o-read-error? . G4c81) (i/o-port-error? . G4d2e) (i/o-invalid-position-error? . G4cac) (i/o-filename-error? . G4cc5) (i/o-file-protection-error? . G4cdb) (i/o-file-is-read-only-error? . G4cef) (i/o-file-does-not-exist-error? . G4d17) (i/o-file-already-exists-error? . G4d03) (i/o-error? . G4c6d) (i/o-error-port . G4d30) (i/o-error-filename . G4cc7) (i/o-encoding-error? . G4d5b) (i/o-encoding-error-char . G4d5d) (i/o-decoding-error? . G4d44) (get-u8 . G504a) (get-string-n! . G5049) (get-string-n . G5048) (get-string-all . G5047) (get-line . G5046) (get-datum . G5045) (get-char . G5044) (get-bytevector-some . G5043) (get-bytevector-n! . G5042) (get-bytevector-n . G5041) (get-bytevector-all . G5040) (flush-output-port . G503f) (close-port . G503e) (scheme-report-environment . G3152) (quotient . G503d) (null-environment . G3150) (remainder . G503c) (modulo . G503b) (inexact->exact . G503a) (force . G5039) (exact->inexact . G5038) (exit . G5037) (command-line . G4db6) (string-fill! . G5036) (string-set! . G5035) (set-cdr! . G5034) (set-car! . G5033) (remove . G5032) (remv . G5031) (remp . G5030) (remq . G502f) (partition . G502e) (memv . G502d) (memq . G502c) (memp . G502b) (member . G502a) (exists . G5029) (for-all . G5028) (fold-right . G5027) (fold-left . G5026) (find . G5025) (filter . G5024) (cons* . G5023) (assv . G5022) (assq . G5021) (assp . G5020) (assoc . G501f) (call-with-string-output-port . G501e) (call-with-port . G501d) (call-with-bytevector-output-port . G501c) (bytevector->string . G501b) (buffer-mode? . G501a) (binary-port? . G5019) (with-exception-handler . G5018) (raise-continuable . G5017) (raise . G5016) (eval . G3156) (environment . G314e) (make-enumeration . G5015) (enum-set=? . G5014) (enum-set-universe . G5013) (enum-set-union . G5012) (enum-set-subset? . G5011) (enum-set-projection . G5010) (enum-set-member? . G500f) (enum-set-intersection . G500e) (enum-set-indexer . G500d) (enum-set-difference . G500c) (enum-set-constructor . G500b) (enum-set-complement . G500a) (enum-set->list . G5009) (who-condition? . G4b89) (warning? . G4b09) (violation? . G4b45) (undefined-violation? . G4bf9) (syntax-violation? . G4be1) (syntax-violation-subform . G4be5) (syntax-violation-form . G4be3) (syntax-violation . G3178) (simple-conditions . G5008) (serious-condition? . G4b1d) (non-continuable-violation? . G4b9f) (message-condition? . G4af3) (make-who-condition . G4b85) (make-warning . G4b07) (make-violation . G4b43) (make-undefined-violation . G4bf7) (make-syntax-violation . G4bdb) (make-serious-condition . G4b1b) (make-non-continuable-violation . G4b9d) (make-message-condition . G4aef) (make-lexical-violation . G4bc5) (make-irritants-condition . G4b6c) (make-implementation-restriction-violation . G4bb1) (make-error . G4b2f) (make-assertion-violation . G4b57) (lexical-violation? . G4bc7) (irritants-condition? . G4b70) (implementation-restriction-violation? . G4bb3) (error? . G4b31) (condition-who . G4b8b) (condition-predicate . G5007) (condition-message . G4af5) (condition-irritants . G4b72) (condition-accessor . G5006) (condition . G5005) (assertion-violation? . G4b59) (condition? . G5004) (utf32->string . G5003) (utf16->string . G5002) (utf8->string . G5001) (uint-list->bytevector . G5000) (u8-list->bytevector . G4fff) (string->utf8 . G4ffe) (string->utf32 . G4ffd) (string->utf16 . G4ffc) (sint-list->bytevector . G4ffb) (native-endianness . G4ffa) (bytevector? . G4ff9) (bytevector=? . G4ff8) (bytevector-uint-set! . G4ff7) (bytevector-uint-ref . G4ff6) (bytevector-u8-set! . G4ff5) (bytevector-u8-ref . G4ff4) (bytevector-u64-set! . G4ff3) (bytevector-u64-ref . G4ff2) (bytevector-u64-native-set! . G4ff1) (bytevector-u64-native-ref . G4ff0) (bytevector-u32-set! . G4fef) (bytevector-u32-ref . G4fee) (bytevector-u32-native-set! . G4fed) (bytevector-u32-native-ref . G4fec) (bytevector-u16-set! . G4feb) (bytevector-u16-ref . G4fea) (bytevector-u16-native-set! . G4fe9) (bytevector-u16-native-ref . G4fe8) (bytevector-sint-set! . G4fe7) (bytevector-sint-ref . G4fe6) (bytevector-s8-set! . G4fe5) (bytevector-s8-ref . G4fe4) (bytevector-s64-set! . G4fe3) (bytevector-s64-ref . G4fe2) (bytevector-s64-native-set! . G4fe1) (bytevector-s64-native-ref . G4fe0) (bytevector-s32-set! . G4fdf) (bytevector-s32-ref . G4fde) (bytevector-s32-native-set! . G4fdd) (bytevector-s32-native-ref . G4fdc) (bytevector-s16-set! . G4fdb) (bytevector-s16-ref . G4fda) (bytevector-s16-native-set! . G4fd9) (bytevector-s16-native-ref . G4fd8) (bytevector-length . G4fd7) (bytevector-ieee-single-ref . G4fd6) (bytevector-ieee-single-native-set! . G4fd5) (bytevector-ieee-single-native-ref . G4fd4) (bytevector-ieee-double-ref . G4fd3) (bytevector-ieee-double-native-set! . G4fd2) (bytevector-ieee-double-native-ref . G4fd1) (bytevector-fill! . G4fd0) (bytevector-copy! . G4fcf) (bytevector-copy . G4fce) (bytevector->uint-list . G4fcd) (bytevector->u8-list . G4fcc) (bytevector->sint-list . G4fcb) (no-nans-violation? . G4fca) (no-infinities-violation? . G4fc9) (make-no-nans-violation . G4fc8) (make-no-infinities-violation . G4fc7) (real->flonum . G4fc6) (flzero? . G4fc5) (fltruncate . G4fc4) (fltan . G4fc3) (flsqrt . G4fc2) (flsin . G4fc1) (flround . G4fc0) (flpositive? . G4fbf) (flonum? . G4fbe) (flodd? . G4fbd) (flnumerator . G4fbc) (flnegative? . G4fbb) (flnan? . G4fba) (flmod0 . G4fb9) (flmod . G4fb8) (flmin . G4fb7) (flmax . G4fb6) (fllog . G4fb5) (flinteger? . G4fb4) (flinfinite? . G4fb3) (flfloor . G4fb2) (flfinite? . G4fb1) (flexpt . G4fb0) (flexp . G4faf) (fleven? . G4fae) (fldiv0-and-mod0 . G4fad) (fldiv0 . G4fac) (fldiv-and-mod . G4fab) (fldiv . G4faa) (fldenominator . G4fa9) (flcos . G4fa8) (flceiling . G4fa7) (flatan . G4fa6) (flasin . G4fa5) (flacos . G4fa4) (flabs . G4fa3) (fl>? . G4fa2) (fl>=? . G4fa1) (fl=? . G4fa0) (fl<? . G4f9f) (fl<=? . G4f9e) (fl/ . G4f9d) (fl- . G4f9c) (fl+ . G4f9b) (fl* . G4f9a) (fixnum->flonum . G4f99) (fxzero? . G4f98) (fxxor . G4f97) (fxrotate-bit-field . G4f96) (fxreverse-bit-field . G4f95) (fxpositive? . G4f94) (fxodd? . G4f93) (fxnot . G4f92) (fxnegative? . G4f91) (fxmod0 . G4f90) (fxmod . G4f8f) (fxmin . G4f8e) (fxmax . G4f8d) (fxlength . G4f8c) (fxior . G4f8b) (fxif . G4f8a) (fxfirst-bit-set . G4f89) (fxeven? . G4f88) (fxdiv0-and-mod0 . G4f87) (fxdiv0 . G4f86) (fxdiv-and-mod . G4f85) (fxdiv . G4f84) (fxcopy-bit-field . G4f83) (fxcopy-bit . G4f82) (fxbit-set? . G4f81) (fxbit-field . G4f80) (fxbit-count . G4f7f) (fxarithmetic-shift-right . G4f7e) (fxarithmetic-shift-left . G4f7d) (fxarithmetic-shift . G4f7c) (fxand . G4f7b) (fx>? . G4f7a) (fx>=? . G4f79) (fx=? . G4f78) (fx<? . G4f77) (fx<=? . G4f76) (fx-/carry . G4f75) (fx- . G4f74) (fx+/carry . G4f73) (fx+ . G4f72) (fx*/carry . G4f71) (fx* . G4f70) (greatest-fixnum . G4f6f) (least-fixnum . G4f6e) (fixnum-width . G4f6d) (fixnum? . G4f6c) (bitwise-rotate-bit-field . G4f6b) (bitwise-reverse-bit-field . G4f6a) (bitwise-length . G4f69) (bitwise-if . G4f68) (bitwise-first-bit-set . G4f67) (bitwise-copy-bit-field . G4f66) (bitwise-copy-bit . G4f65) (bitwise-bit-set? . G4f64) (bitwise-bit-field . G4f63) (bitwise-bit-count . G4f62) (bitwise-xor . G4f61) (bitwise-ior . G4f60) (bitwise-and . G4f5f) (bitwise-not . G4f5e) (bitwise-arithmetic-shift-right . G4f5d) (bitwise-arithmetic-shift-left . G4f5c) (bitwise-arithmetic-shift . G4f5b) (zero? . G4f5a) (vector? . G4f59) (vector-set! . G4f58) (vector-ref . G4f57) (vector-map . G4f56) (vector-length . G4f55) (vector-for-each . G4f54) (vector-fill! . G4f53) (vector->list . G4f52) (vector . G4f51) (values . G4f50) (truncate . G4f4f) (tan . G4f4e) (symbol? . G4f4d) (symbol=? . G4f4c) (symbol->string . G4f4b) (substring . G4f4a) (string? . G4f49) (string>? . G4f48) (string>=? . G4f47) (string=? . G4f46) (string<? . G4f45) (string<=? . G4f44) (string-ref . G4f43) (string-length . G4f42) (string-for-each . G4f41) (string-copy . G4f40) (string-append . G4f3f) (string->symbol . G4f3e) (string->number . G4f3d) (string->list . G4f3c) (string . G4f3b) (sqrt . G4f3a) (sin . G4f39) (round . G4f38) (reverse . G4f37) (real? . G4f36) (real-valued? . G4f35) (real-part . G4f34) (rationalize . G4f33) (rational? . G4f32) (rational-valued? . G4f31) (procedure? . G4f30) (positive? . G4f2f) (pair? . G4f2e) (odd? . G4f2d) (numerator . G4f2c) (number? . G4f2b) (number->string . G4f2a) (null? . G4f29) (not . G4f28) (negative? . G4f27) (nan? . G4f26) (min . G4f25) (max . G4f24) (map . G4f23) (make-vector . G4f22) (make-string . G4f21) (make-rectangular . G4f20) (make-polar . G4f1f) (magnitude . G4f1e) (log . G4f1d) (list? . G4f1c) (list-tail . G4f1b) (list-ref . G4f1a) (list->vector . G4f19) (list->string . G4f18) (list . G4f17) (length . G4f16) (lcm . G4f15) (integer? . G4f14) (integer-valued? . G4f13) (integer->char . G4f12) (infinite? . G4f11) (inexact? . G4f10) (inexact . G4f0f) (imag-part . G4f0e) (gcd . G4f0d) (for-each . G4f0c) (floor . G4f0b) (finite? . G4f0a) (expt . G4f09) (exp . G4f08) (exact? . G4f07) (exact-integer-sqrt . G4f06) (exact . G4f05) (even? . G4f04) (error . G4f03) (eqv? . G4f02) (equal? . G4f01) (eq? . G4f00) (dynamic-wind . G4eff) (div0-and-mod0 . G4efe) (mod0 . G4efd) (div0 . G4efc) (div-and-mod . G4efb) (mod . G4efa) (div . G4ef9) (denominator . G4ef8) (cos . G4ef7) (cons . G4ef6) (complex? . G4ef5) (char? . G4ef4) (char>? . G4ef3) (char>=? . G4ef2) (char=? . G4ef1) (char<? . G4ef0) (char<=? . G4eef) (char->integer . G4eee) (ceiling . G4eed) (call-with-values . G4eec) (call/cc . G4eeb) (call-with-current-continuation . G4eea) (cddddr . G4ee9) (cdddar . G4ee8) (cddadr . G4ee7) (cddaar . G4ee6) (cdaddr . G4ee5) (cdadar . G4ee4) (cdaadr . G4ee3) (cdaaar . G4ee2) (cadddr . G4ee1) (caddar . G4ee0) (cadadr . G4edf) (cadaar . G4ede) (caaddr . G4edd) (caadar . G4edc) (caaadr . G4edb) (caaaar . G4eda) (cdddr . G4ed9) (cddar . G4ed8) (cdadr . G4ed7) (cdaar . G4ed6) (caddr . G4ed5) (cadar . G4ed4) (caadr . G4ed3) (caaar . G4ed2) (cddr . G4ed1) (cdar . G4ed0) (cadr . G4ecf) (caar . G4ece) (cdr . G4ecd) (car . G4ecc) (boolean? . G4ecb) (boolean=? . G4eca) (atan . G4ec9) (assertion-violation . G4ec8) (asin . G4ec7) (apply . G4ec6) (append . G4ec5) (angle . G4ec4) (acos . G4ec3) (abs . G4ec2) (/ . G4ec1) (* . G4ec0) (- . G4ebf) (+ . G4ebe) (>= . G4ebd) (> . G4ebc) (= . G4ebb) (<= . G4eba) (< . G4eb9) (library . G4eb8) (export . G4eb7) (&no-nans . G4eb6) (&no-infinities . G4eb5) (&i/o-encoding . G4eb4) (&i/o-decoding . G4eb3) (&i/o-port . G4eb2) (&i/o-file-does-not-exist . G4eb1) (&i/o-file-already-exists . G4eb0) (&i/o-file-is-read-only . G4eaf) (&i/o-file-protection . G4eae) (&i/o-filename . G4ead) (&i/o-invalid-position . G4eac) (&i/o-write . G4eab) (&i/o-read . G4eaa) (&i/o . G4ea9) (&undefined . G4ea8) (&syntax . G4ea7) (&lexical . G4ea6) (&implementation-restriction . G4ea5) (&non-continuable . G4ea4) (&who . G4ea3) (&irritants . G4ea2) (&assertion . G4ea1) (&violation . G4ea0) (&error . G4e9f) (&serious . G4e9e) (&warning . G4e9d) (&message . G4e9c) (&condition . G4e9b) (define-condition-type . G4e9a) (define-enumeration . G4e99) (define-record-type . G4e98) (parent-rtd . G4e97) (nongenerative . G4e96) (opaque . G4e95) (sealed . G4e94) (protocol . G4e93) (parent . G4e92) (immutable . G4e91) (mutable . G4e90) (fields . G4e8f) (error-handling-mode . G4e8e) (file-options . G4e8d) (buffer-mode . G4e8c) (eol-style . G4e8b) (guard . G4e8a) (trace-define . G4e89) (trace-lambda . G4e88) (unsyntax-splicing . G4e87) (unsyntax . G4e86) (unquote-splicing . G4e85) (unquote . G4e84) (_ . G4e83) (else . G4e82) (=> . G4e81) (... . G4e80) (assert . G4e7f) (endianness . G4e7e) (delay . G4e7d) (time . G4e7c) (or . G4e7b) (and . G4e7a) (do . G4e79) (cond . G4e78) (let* . G4e77) (let . G4e76) (let*-values . G4e75) (let-values . G4e74) (identifier-syntax . G4e73) (with-syntax . G4e72) (quasisyntax . G4e71) (quasiquote . G4e70) (syntax-rules . G4e6f) (include . G4e6e) (define-struct . G4e6d) (record-constructor-descriptor . G4e6c) (record-type-descriptor . G4e6b) (case . G4e6a) (parameterize . G4e69) (unless . G4e68) (when . G4e67) (if . G4e66) (letrec* . G4e65) (letrec . G4e64) (type-descriptor . G4e63) (case-lambda . G4e62) (lambda . G4e61) (syntax . G4e60) (syntax-case . G4e5f) (quote . G4e5e) (foreign-call . G4e5d) (letrec-syntax . G4e5c) (let-syntax . G4e5b) (set! . G4e5a) (import . G4e59) (begin . G4e58) (module . G4e57) (define-syntax . G4e56) (define . G4e55)) '((G5153 core-prim . &no-nans-rcd) (G5152 core-prim . &no-nans-rtd) (G5151 core-prim . &no-infinities-rcd) (G5150 core-prim . &no-infinities-rtd) (G514f core-prim . &i/o-encoding-rcd) (G514e core-prim . &i/o-encoding-rtd) (G514d core-prim . &i/o-decoding-rcd) (G514c core-prim . &i/o-decoding-rtd) (G514b core-prim . &i/o-port-rcd) (G514a core-prim . &i/o-port-rtd) (G5149 core-prim . &i/o-file-does-not-exist-rcd) (G5148 core-prim . &i/o-file-does-not-exist-rtd) (G5147 core-prim . &i/o-file-already-exists-rcd) (G5146 core-prim . &i/o-file-already-exists-rtd) (G5145 core-prim . &i/o-file-is-read-only-rcd) (G5144 core-prim . &i/o-file-is-read-only-rtd) (G5143 core-prim . &i/o-file-protection-rcd) (G5142 core-prim . &i/o-file-protection-rtd) (G5141 core-prim . &i/o-filename-rcd) (G5140 core-prim . &i/o-filename-rtd) (G513f core-prim . &i/o-invalid-position-rcd) (G513e core-prim . &i/o-invalid-position-rtd) (G513d core-prim . &i/o-write-rcd) (G513c core-prim . &i/o-write-rtd) (G513b core-prim . &i/o-read-rcd) (G513a core-prim . &i/o-read-rtd) (G5139 core-prim . &i/o-rcd) (G5138 core-prim . &i/o-rtd) (G5137 core-prim . &undefined-rcd) (G5136 core-prim . &undefined-rtd) (G5135 core-prim . &syntax-rcd) (G5134 core-prim . &syntax-rtd) (G5133 core-prim . &lexical-rcd) (G5132 core-prim . &lexical-rtd) (G5131 core-prim . &implementation-restriction-rcd) (G5130 core-prim . &implementation-restriction-rtd) (G512f core-prim . &non-continuable-rcd) (G512e core-prim . &non-continuable-rtd) (G512d core-prim . &who-rcd) (G512c core-prim . &who-rtd) (G512b core-prim . &irritants-rcd) (G512a core-prim . &irritants-rtd) (G5129 core-prim . &assertion-rcd) (G5128 core-prim . &assertion-rtd) (G5127 core-prim . &violation-rcd) (G5126 core-prim . &violation-rtd) (G5125 core-prim . &error-rcd) (G5124 core-prim . &error-rtd) (G5123 core-prim . &serious-rcd) (G5122 core-prim . &serious-rtd) (G5121 core-prim . &warning-rcd) (G5120 core-prim . &warning-rtd) (G511f core-prim . &message-rcd) (G511e core-prim . &message-rtd) (G511d core-prim . &condition-rcd) (G511c core-prim . &condition-rtd) (G3172 core-prim . syntax-error) (G3085 core-prim . syntax-dispatch) (G511b core-prim . pretty-print) (G511a core-prim . eval-core) (G5119 core-prim . set-symbol-value!) (G5118 core-prim . symbol-value) (G5117 core-prim . gensym) (G5116 core-prim . void) (G4dbc core-prim . load) (G3184 core-prim . interaction-environment) (G5115 core-prim . char-ready?) (G5114 core-prim . regexp?) (G5113 core-prim . read-line) (G5112 core-prim . dotted-list?) (G5111 core-prim . circular-list?) (G5110 core-prim . proper-list?) (G510f core-prim . circular-list) (G510e core-prim . last) (G510d core-prim . last-pair) (G510c core-prim . not-pair?) (G510b core-prim . split-at!) (G510a core-prim . split-at) (G5109 core-prim . list=) (G5108 core-prim . list-copy) (G5107 core-prim . list-tabulate) (G5106 core-prim . make-list) (G5105 core-prim . xcons) (G5104 core-prim . tenth) (G5103 core-prim . ninth) (G5102 core-prim . eighth) (G5101 core-prim . seventh) (G5100 core-prim . sixth) (G50ff core-prim . fifth) (G50fe core-prim . drop-right!) (G50fd core-prim . drop-right) (G50fc core-prim . take-right) (G50fb core-prim . take!) (G50fa core-prim . drop) (G50f9 core-prim . take) (G50f8 core-prim . car+cdr) (G50f7 core-prim . third) (G50f6 core-prim . second) (G50f5 core-prim . first) (G50f4 core-prim . assoc-ref) (G50f3 core-prim . alist-cons) (G50f2 core-prim . print) (G50f1 core-prim . format) (G50f0 core-prim . standard-library-path) (G50ef core-prim . file-newer?) (G50ee core-prim . stat-mtime) (G50ed core-prim . current-directory) (G50ec core-prim . write-to-file) (G50eb core-prim . file->list) (G50ea core-prim . file->string) (G50e9 core-prim . digit->integer) (G50e8 core-prim . call-with-string-input-port) (G50e7 core-prim . call-with-string-io) (G50e6 core-prim . string-split) (G50e5 core-prim . bytevector-for-each) (G50e4 core-prim . string->regexp) (G50e3 core-prim . rxmatch) (G50e2 core-prim . regexp-replace-all) (G50e1 core-prim . hashtable-for-each) (G50e0 core-prim . readdir) (G50df core-prim . get-environment-variables) (G50de core-prim . get-environment-variable) (G50dd core-prim . get-command-line) (G50dc core-prim . sys-display) (G50db core-prim . source-info) (G50da core-prim . make-compiler-instruction) (G50d9 core-prim . make-instruction) (G50d8 core-prim . set-source-info!) (G50d7 core-prim . fasl-read) (G50d6 core-prim . fasl-write) (G50d5 core-prim . receive) (G50d4 core-prim . string-upcase) (G50d3 core-prim . string-titlecase) (G50d2 core-prim . string-normalize-nfkd) (G50d1 core-prim . string-normalize-nfkc) (G50d0 core-prim . string-normalize-nfd) (G50cf core-prim . string-normalize-nfc) (G50ce core-prim . string-foldcase) (G50cd core-prim . string-downcase) (G50cc core-prim . string-ci>?) (G50cb core-prim . string-ci>=?) (G50ca core-prim . string-ci=?) (G50c9 core-prim . string-ci<?) (G50c8 core-prim . string-ci<=?) (G50c7 core-prim . char-whitespace?) (G50c6 core-prim . char-upper-case?) (G50c5 core-prim . char-title-case?) (G50c4 core-prim . char-numeric?) (G50c3 core-prim . char-lower-case?) (G50c2 core-prim . char-general-category) (G50c1 core-prim . char-upcase) (G50c0 core-prim . char-titlecase) (G50bf core-prim . char-foldcase) (G50be core-prim . char-downcase) (G50bd core-prim . char-ci>?) (G50bc core-prim . char-ci>=?) (G50bb core-prim . char-ci=?) (G50ba core-prim . char-ci<?) (G50b9 core-prim . char-ci<=?) (G50b8 core-prim . char-alphabetic?) (G2e83 core-prim . make-variable-transformer) (G317a core-prim . identifier?) (G3164 core-prim . generate-temporaries) (G3166 core-prim . free-identifier=?) (G317e core-prim . syntax->datum) (G317c core-prim . datum->syntax) (G3168 core-prim . bound-identifier=?) (G50b7 core-prim . record-type-descriptor?) (G50b6 core-prim . record-predicate) (G50b5 core-prim . record-mutator) (G50b4 core-prim . record-constructor) (G50b3 core-prim . record-accessor) (G50b2 core-prim . make-record-type-descriptor) (G50b1 core-prim . make-record-constructor-descriptor) (G50b0 core-prim . record?) (G50af core-prim . record-type-uid) (G50ae core-prim . record-type-sealed?) (G50ad core-prim . record-type-parent) (G50ac core-prim . record-type-opaque?) (G50ab core-prim . record-type-name) (G50aa core-prim . record-type-generative?) (G50a9 core-prim . record-type-field-names) (G50a8 core-prim . record-rtd) (G50a7 core-prim . record-field-mutable?) (G50a6 core-prim . delete-file) (G50a5 core-prim . file-exists?) (G50a4 core-prim . vector-sort!) (G50a3 core-prim . vector-sort) (G50a2 core-prim . list-sort) (G50a1 core-prim . symbol-hash) (G50a0 core-prim . string-ci-hash) (G509f core-prim . string-hash) (G509e core-prim . equal-hash) (G509d core-prim . hashtable-equivalence-function) (G509c core-prim . make-hashtable) (G509b core-prim . hashtable-hash-function) (G509a core-prim . make-eqv-hashtable) (G5099 core-prim . make-eq-hashtable) (G5098 core-prim . hashtable?) (G5097 core-prim . hashtable-update!) (G5096 core-prim . hashtable-size) (G5095 core-prim . hashtable-set!) (G5094 core-prim . hashtable-ref) (G5093 core-prim . hashtable-mutable?) (G5092 core-prim . hashtable-keys) (G5091 core-prim . hashtable-entries) (G5090 core-prim . hashtable-delete!) (G508f core-prim . hashtable-copy) (G508e core-prim . hashtable-contains?) (G508d core-prim . hashtable-clear!) (G508c core-prim . call-with-output-file) (G508b core-prim . call-with-input-file) (G508a core-prim . write-char) (G5089 core-prim . write) (G5088 core-prim . with-output-to-file) (G5087 core-prim . with-input-from-file) (G5086 core-prim . read-char) (G5085 core-prim . read) (G5084 core-prim . peek-char) (G5083 core-prim . open-output-file) (G5082 core-prim . open-input-file) (G5081 core-prim . newline) (G5080 core-prim . display) (G507f core-prim . close-output-port) (G507e core-prim . close-input-port) (G507d core-prim . eof-object?) (G507c core-prim . eof-object) (G507b core-prim . current-error-port) (G507a core-prim . current-output-port) (G5079 core-prim . current-input-port) (G5078 core-prim . output-port?) (G5077 core-prim . input-port?) (G5076 core-prim . utf-8-codec) (G5075 core-prim . utf-16-codec) (G5074 core-prim . transcoder-error-handling-mode) (G5073 core-prim . transcoder-eol-style) (G5072 core-prim . transcoder-codec) (G5071 core-prim . transcoded-port) (G5070 core-prim . textual-port?) (G506f core-prim . string->bytevector) (G506e core-prim . standard-output-port) (G506d core-prim . standard-input-port) (G506c core-prim . standard-error-port) (G506b core-prim . set-port-position!) (G506a core-prim . put-u8) (G5069 core-prim . put-string) (G5068 core-prim . put-datum) (G5067 core-prim . put-char) (G5066 core-prim . put-bytevector) (G5065 core-prim . port?) (G5064 core-prim . port-transcoder) (G5063 core-prim . port-position) (G5062 core-prim . port-has-set-port-position!?) (G5061 core-prim . port-has-port-position?) (G5060 core-prim . port-eof?) (G505f core-prim . output-port-buffer-mode) (G505e core-prim . open-string-output-port) (G505d core-prim . open-string-input-port) (G505c core-prim . open-file-output-port) (G505b core-prim . open-file-input/output-port) (G505a core-prim . open-file-input-port) (G5059 core-prim . open-bytevector-output-port) (G5058 core-prim . open-bytevector-input-port) (G5057 core-prim . native-transcoder) (G5056 core-prim . native-eol-style) (G5055 core-prim . make-transcoder) (G5054 core-prim . latin-1-codec) (G4c93 core-prim . make-i/o-write-error) (G4c7f core-prim . make-i/o-read-error) (G4d2a core-prim . make-i/o-port-error) (G4ca8 core-prim . make-i/o-invalid-position-error) (G4cc1 core-prim . make-i/o-filename-error) (G4cd9 core-prim . make-i/o-file-protection-error) (G4ced core-prim . make-i/o-file-is-read-only-error) (G4d15 core-prim . make-i/o-file-does-not-exist-error) (G4d01 core-prim . make-i/o-file-already-exists-error) (G4c6b core-prim . make-i/o-error) (G4d57 core-prim . make-i/o-encoding-error) (G4d42 core-prim . make-i/o-decoding-error) (G5053 core-prim . make-custom-textual-output-port) (G5052 core-prim . make-custom-textual-input/output-port) (G5051 core-prim . make-custom-textual-input-port) (G5050 core-prim . make-custom-binary-output-port) (G504f core-prim . make-custom-binary-input/output-port) (G504e core-prim . make-custom-binary-input-port) (G504d core-prim . make-bytevector) (G504c core-prim . lookahead-u8) (G504b core-prim . lookahead-char) (G4c95 core-prim . i/o-write-error?) (G4c81 core-prim . i/o-read-error?) (G4d2e core-prim . i/o-port-error?) (G4cac core-prim . i/o-invalid-position-error?) (G4cc5 core-prim . i/o-filename-error?) (G4cdb core-prim . i/o-file-protection-error?) (G4cef core-prim . i/o-file-is-read-only-error?) (G4d17 core-prim . i/o-file-does-not-exist-error?) (G4d03 core-prim . i/o-file-already-exists-error?) (G4c6d core-prim . i/o-error?) (G4d30 core-prim . i/o-error-port) (G4cc7 core-prim . i/o-error-filename) (G4d5b core-prim . i/o-encoding-error?) (G4d5d core-prim . i/o-encoding-error-char) (G4d44 core-prim . i/o-decoding-error?) (G504a core-prim . get-u8) (G5049 core-prim . get-string-n!) (G5048 core-prim . get-string-n) (G5047 core-prim . get-string-all) (G5046 core-prim . get-line) (G5045 core-prim . get-datum) (G5044 core-prim . get-char) (G5043 core-prim . get-bytevector-some) (G5042 core-prim . get-bytevector-n!) (G5041 core-prim . get-bytevector-n) (G5040 core-prim . get-bytevector-all) (G503f core-prim . flush-output-port) (G503e core-prim . close-port) (G3152 core-prim . scheme-report-environment) (G503d core-prim . quotient) (G3150 core-prim . null-environment) (G503c core-prim . remainder) (G503b core-prim . modulo) (G503a core-prim . inexact->exact) (G5039 core-prim . force) (G5038 core-prim . exact->inexact) (G5037 core-prim . exit) (G4db6 core-prim . command-line) (G5036 core-prim . string-fill!) (G5035 core-prim . string-set!) (G5034 core-prim . set-cdr!) (G5033 core-prim . set-car!) (G5032 core-prim . remove) (G5031 core-prim . remv) (G5030 core-prim . remp) (G502f core-prim . remq) (G502e core-prim . partition) (G502d core-prim . memv) (G502c core-prim . memq) (G502b core-prim . memp) (G502a core-prim . member) (G5029 core-prim . exists) (G5028 core-prim . for-all) (G5027 core-prim . fold-right) (G5026 core-prim . fold-left) (G5025 core-prim . find) (G5024 core-prim . filter) (G5023 core-prim . cons*) (G5022 core-prim . assv) (G5021 core-prim . assq) (G5020 core-prim . assp) (G501f core-prim . assoc) (G501e core-prim . call-with-string-output-port) (G501d core-prim . call-with-port) (G501c core-prim . call-with-bytevector-output-port) (G501b core-prim . bytevector->string) (G501a core-prim . buffer-mode?) (G5019 core-prim . binary-port?) (G5018 core-prim . with-exception-handler) (G5017 core-prim . raise-continuable) (G5016 core-prim . raise) (G3156 core-prim . eval) (G314e core-prim . environment) (G5015 core-prim . make-enumeration) (G5014 core-prim . enum-set=?) (G5013 core-prim . enum-set-universe) (G5012 core-prim . enum-set-union) (G5011 core-prim . enum-set-subset?) (G5010 core-prim . enum-set-projection) (G500f core-prim . enum-set-member?) (G500e core-prim . enum-set-intersection) (G500d core-prim . enum-set-indexer) (G500c core-prim . enum-set-difference) (G500b core-prim . enum-set-constructor) (G500a core-prim . enum-set-complement) (G5009 core-prim . enum-set->list) (G4b89 core-prim . who-condition?) (G4b09 core-prim . warning?) (G4b45 core-prim . violation?) (G4bf9 core-prim . undefined-violation?) (G4be1 core-prim . syntax-violation?) (G4be5 core-prim . syntax-violation-subform) (G4be3 core-prim . syntax-violation-form) (G3178 core-prim . syntax-violation) (G5008 core-prim . simple-conditions) (G4b1d core-prim . serious-condition?) (G4b9f core-prim . non-continuable-violation?) (G4af3 core-prim . message-condition?) (G4b85 core-prim . make-who-condition) (G4b07 core-prim . make-warning) (G4b43 core-prim . make-violation) (G4bf7 core-prim . make-undefined-violation) (G4bdb core-prim . make-syntax-violation) (G4b1b core-prim . make-serious-condition) (G4b9d core-prim . make-non-continuable-violation) (G4aef core-prim . make-message-condition) (G4bc5 core-prim . make-lexical-violation) (G4b6c core-prim . make-irritants-condition) (G4bb1 core-prim . make-implementation-restriction-violation) (G4b2f core-prim . make-error) (G4b57 core-prim . make-assertion-violation) (G4bc7 core-prim . lexical-violation?) (G4b70 core-prim . irritants-condition?) (G4bb3 core-prim . implementation-restriction-violation?) (G4b31 core-prim . error?) (G4b8b core-prim . condition-who) (G5007 core-prim . condition-predicate) (G4af5 core-prim . condition-message) (G4b72 core-prim . condition-irritants) (G5006 core-prim . condition-accessor) (G5005 core-prim . condition) (G4b59 core-prim . assertion-violation?) (G5004 core-prim . condition?) (G5003 core-prim . utf32->string) (G5002 core-prim . utf16->string) (G5001 core-prim . utf8->string) (G5000 core-prim . uint-list->bytevector) (G4fff core-prim . u8-list->bytevector) (G4ffe core-prim . string->utf8) (G4ffd core-prim . string->utf32) (G4ffc core-prim . string->utf16) (G4ffb core-prim . sint-list->bytevector) (G4ffa core-prim . native-endianness) (G4ff9 core-prim . bytevector?) (G4ff8 core-prim . bytevector=?) (G4ff7 core-prim . bytevector-uint-set!) (G4ff6 core-prim . bytevector-uint-ref) (G4ff5 core-prim . bytevector-u8-set!) (G4ff4 core-prim . bytevector-u8-ref) (G4ff3 core-prim . bytevector-u64-set!) (G4ff2 core-prim . bytevector-u64-ref) (G4ff1 core-prim . bytevector-u64-native-set!) (G4ff0 core-prim . bytevector-u64-native-ref) (G4fef core-prim . bytevector-u32-set!) (G4fee core-prim . bytevector-u32-ref) (G4fed core-prim . bytevector-u32-native-set!) (G4fec core-prim . bytevector-u32-native-ref) (G4feb core-prim . bytevector-u16-set!) (G4fea core-prim . bytevector-u16-ref) (G4fe9 core-prim . bytevector-u16-native-set!) (G4fe8 core-prim . bytevector-u16-native-ref) (G4fe7 core-prim . bytevector-sint-set!) (G4fe6 core-prim . bytevector-sint-ref) (G4fe5 core-prim . bytevector-s8-set!) (G4fe4 core-prim . bytevector-s8-ref) (G4fe3 core-prim . bytevector-s64-set!) (G4fe2 core-prim . bytevector-s64-ref) (G4fe1 core-prim . bytevector-s64-native-set!) (G4fe0 core-prim . bytevector-s64-native-ref) (G4fdf core-prim . bytevector-s32-set!) (G4fde core-prim . bytevector-s32-ref) (G4fdd core-prim . bytevector-s32-native-set!) (G4fdc core-prim . bytevector-s32-native-ref) (G4fdb core-prim . bytevector-s16-set!) (G4fda core-prim . bytevector-s16-ref) (G4fd9 core-prim . bytevector-s16-native-set!) (G4fd8 core-prim . bytevector-s16-native-ref) (G4fd7 core-prim . bytevector-length) (G4fd6 core-prim . bytevector-ieee-single-ref) (G4fd5 core-prim . bytevector-ieee-single-native-set!) (G4fd4 core-prim . bytevector-ieee-single-native-ref) (G4fd3 core-prim . bytevector-ieee-double-ref) (G4fd2 core-prim . bytevector-ieee-double-native-set!) (G4fd1 core-prim . bytevector-ieee-double-native-ref) (G4fd0 core-prim . bytevector-fill!) (G4fcf core-prim . bytevector-copy!) (G4fce core-prim . bytevector-copy) (G4fcd core-prim . bytevector->uint-list) (G4fcc core-prim . bytevector->u8-list) (G4fcb core-prim . bytevector->sint-list) (G4fca core-prim . no-nans-violation?) (G4fc9 core-prim . no-infinities-violation?) (G4fc8 core-prim . make-no-nans-violation) (G4fc7 core-prim . make-no-infinities-violation) (G4fc6 core-prim . real->flonum) (G4fc5 core-prim . flzero?) (G4fc4 core-prim . fltruncate) (G4fc3 core-prim . fltan) (G4fc2 core-prim . flsqrt) (G4fc1 core-prim . flsin) (G4fc0 core-prim . flround) (G4fbf core-prim . flpositive?) (G4fbe core-prim . flonum?) (G4fbd core-prim . flodd?) (G4fbc core-prim . flnumerator) (G4fbb core-prim . flnegative?) (G4fba core-prim . flnan?) (G4fb9 core-prim . flmod0) (G4fb8 core-prim . flmod) (G4fb7 core-prim . flmin) (G4fb6 core-prim . flmax) (G4fb5 core-prim . fllog) (G4fb4 core-prim . flinteger?) (G4fb3 core-prim . flinfinite?) (G4fb2 core-prim . flfloor) (G4fb1 core-prim . flfinite?) (G4fb0 core-prim . flexpt) (G4faf core-prim . flexp) (G4fae core-prim . fleven?) (G4fad core-prim . fldiv0-and-mod0) (G4fac core-prim . fldiv0) (G4fab core-prim . fldiv-and-mod) (G4faa core-prim . fldiv) (G4fa9 core-prim . fldenominator) (G4fa8 core-prim . flcos) (G4fa7 core-prim . flceiling) (G4fa6 core-prim . flatan) (G4fa5 core-prim . flasin) (G4fa4 core-prim . flacos) (G4fa3 core-prim . flabs) (G4fa2 core-prim . fl>?) (G4fa1 core-prim . fl>=?) (G4fa0 core-prim . fl=?) (G4f9f core-prim . fl<?) (G4f9e core-prim . fl<=?) (G4f9d core-prim . fl/) (G4f9c core-prim . fl-) (G4f9b core-prim . fl+) (G4f9a core-prim . fl*) (G4f99 core-prim . fixnum->flonum) (G4f98 core-prim . fxzero?) (G4f97 core-prim . fxxor) (G4f96 core-prim . fxrotate-bit-field) (G4f95 core-prim . fxreverse-bit-field) (G4f94 core-prim . fxpositive?) (G4f93 core-prim . fxodd?) (G4f92 core-prim . fxnot) (G4f91 core-prim . fxnegative?) (G4f90 core-prim . fxmod0) (G4f8f core-prim . fxmod) (G4f8e core-prim . fxmin) (G4f8d core-prim . fxmax) (G4f8c core-prim . fxlength) (G4f8b core-prim . fxior) (G4f8a core-prim . fxif) (G4f89 core-prim . fxfirst-bit-set) (G4f88 core-prim . fxeven?) (G4f87 core-prim . fxdiv0-and-mod0) (G4f86 core-prim . fxdiv0) (G4f85 core-prim . fxdiv-and-mod) (G4f84 core-prim . fxdiv) (G4f83 core-prim . fxcopy-bit-field) (G4f82 core-prim . fxcopy-bit) (G4f81 core-prim . fxbit-set?) (G4f80 core-prim . fxbit-field) (G4f7f core-prim . fxbit-count) (G4f7e core-prim . fxarithmetic-shift-right) (G4f7d core-prim . fxarithmetic-shift-left) (G4f7c core-prim . fxarithmetic-shift) (G4f7b core-prim . fxand) (G4f7a core-prim . fx>?) (G4f79 core-prim . fx>=?) (G4f78 core-prim . fx=?) (G4f77 core-prim . fx<?) (G4f76 core-prim . fx<=?) (G4f75 core-prim . fx-/carry) (G4f74 core-prim . fx-) (G4f73 core-prim . fx+/carry) (G4f72 core-prim . fx+) (G4f71 core-prim . fx*/carry) (G4f70 core-prim . fx*) (G4f6f core-prim . greatest-fixnum) (G4f6e core-prim . least-fixnum) (G4f6d core-prim . fixnum-width) (G4f6c core-prim . fixnum?) (G4f6b core-prim . bitwise-rotate-bit-field) (G4f6a core-prim . bitwise-reverse-bit-field) (G4f69 core-prim . bitwise-length) (G4f68 core-prim . bitwise-if) (G4f67 core-prim . bitwise-first-bit-set) (G4f66 core-prim . bitwise-copy-bit-field) (G4f65 core-prim . bitwise-copy-bit) (G4f64 core-prim . bitwise-bit-set?) (G4f63 core-prim . bitwise-bit-field) (G4f62 core-prim . bitwise-bit-count) (G4f61 core-prim . bitwise-xor) (G4f60 core-prim . bitwise-ior) (G4f5f core-prim . bitwise-and) (G4f5e core-prim . bitwise-not) (G4f5d core-prim . bitwise-arithmetic-shift-right) (G4f5c core-prim . bitwise-arithmetic-shift-left) (G4f5b core-prim . bitwise-arithmetic-shift) (G4f5a core-prim . zero?) (G4f59 core-prim . vector?) (G4f58 core-prim . vector-set!) (G4f57 core-prim . vector-ref) (G4f56 core-prim . vector-map) (G4f55 core-prim . vector-length) (G4f54 core-prim . vector-for-each) (G4f53 core-prim . vector-fill!) (G4f52 core-prim . vector->list) (G4f51 core-prim . vector) (G4f50 core-prim . values) (G4f4f core-prim . truncate) (G4f4e core-prim . tan) (G4f4d core-prim . symbol?) (G4f4c core-prim . symbol=?) (G4f4b core-prim . symbol->string) (G4f4a core-prim . substring) (G4f49 core-prim . string?) (G4f48 core-prim . string>?) (G4f47 core-prim . string>=?) (G4f46 core-prim . string=?) (G4f45 core-prim . string<?) (G4f44 core-prim . string<=?) (G4f43 core-prim . string-ref) (G4f42 core-prim . string-length) (G4f41 core-prim . string-for-each) (G4f40 core-prim . string-copy) (G4f3f core-prim . string-append) (G4f3e core-prim . string->symbol) (G4f3d core-prim . string->number) (G4f3c core-prim . string->list) (G4f3b core-prim . string) (G4f3a core-prim . sqrt) (G4f39 core-prim . sin) (G4f38 core-prim . round) (G4f37 core-prim . reverse) (G4f36 core-prim . real?) (G4f35 core-prim . real-valued?) (G4f34 core-prim . real-part) (G4f33 core-prim . rationalize) (G4f32 core-prim . rational?) (G4f31 core-prim . rational-valued?) (G4f30 core-prim . procedure?) (G4f2f core-prim . positive?) (G4f2e core-prim . pair?) (G4f2d core-prim . odd?) (G4f2c core-prim . numerator) (G4f2b core-prim . number?) (G4f2a core-prim . number->string) (G4f29 core-prim . null?) (G4f28 core-prim . not) (G4f27 core-prim . negative?) (G4f26 core-prim . nan?) (G4f25 core-prim . min) (G4f24 core-prim . max) (G4f23 core-prim . map) (G4f22 core-prim . make-vector) (G4f21 core-prim . make-string) (G4f20 core-prim . make-rectangular) (G4f1f core-prim . make-polar) (G4f1e core-prim . magnitude) (G4f1d core-prim . log) (G4f1c core-prim . list?) (G4f1b core-prim . list-tail) (G4f1a core-prim . list-ref) (G4f19 core-prim . list->vector) (G4f18 core-prim . list->string) (G4f17 core-prim . list) (G4f16 core-prim . length) (G4f15 core-prim . lcm) (G4f14 core-prim . integer?) (G4f13 core-prim . integer-valued?) (G4f12 core-prim . integer->char) (G4f11 core-prim . infinite?) (G4f10 core-prim . inexact?) (G4f0f core-prim . inexact) (G4f0e core-prim . imag-part) (G4f0d core-prim . gcd) (G4f0c core-prim . for-each) (G4f0b core-prim . floor) (G4f0a core-prim . finite?) (G4f09 core-prim . expt) (G4f08 core-prim . exp) (G4f07 core-prim . exact?) (G4f06 core-prim . exact-integer-sqrt) (G4f05 core-prim . exact) (G4f04 core-prim . even?) (G4f03 core-prim . error) (G4f02 core-prim . eqv?) (G4f01 core-prim . equal?) (G4f00 core-prim . eq?) (G4eff core-prim . dynamic-wind) (G4efe core-prim . div0-and-mod0) (G4efd core-prim . mod0) (G4efc core-prim . div0) (G4efb core-prim . div-and-mod) (G4efa core-prim . mod) (G4ef9 core-prim . div) (G4ef8 core-prim . denominator) (G4ef7 core-prim . cos) (G4ef6 core-prim . cons) (G4ef5 core-prim . complex?) (G4ef4 core-prim . char?) (G4ef3 core-prim . char>?) (G4ef2 core-prim . char>=?) (G4ef1 core-prim . char=?) (G4ef0 core-prim . char<?) (G4eef core-prim . char<=?) (G4eee core-prim . char->integer) (G4eed core-prim . ceiling) (G4eec core-prim . call-with-values) (G4eeb core-prim . call/cc) (G4eea core-prim . call-with-current-continuation) (G4ee9 core-prim . cddddr) (G4ee8 core-prim . cdddar) (G4ee7 core-prim . cddadr) (G4ee6 core-prim . cddaar) (G4ee5 core-prim . cdaddr) (G4ee4 core-prim . cdadar) (G4ee3 core-prim . cdaadr) (G4ee2 core-prim . cdaaar) (G4ee1 core-prim . cadddr) (G4ee0 core-prim . caddar) (G4edf core-prim . cadadr) (G4ede core-prim . cadaar) (G4edd core-prim . caaddr) (G4edc core-prim . caadar) (G4edb core-prim . caaadr) (G4eda core-prim . caaaar) (G4ed9 core-prim . cdddr) (G4ed8 core-prim . cddar) (G4ed7 core-prim . cdadr) (G4ed6 core-prim . cdaar) (G4ed5 core-prim . caddr) (G4ed4 core-prim . cadar) (G4ed3 core-prim . caadr) (G4ed2 core-prim . caaar) (G4ed1 core-prim . cddr) (G4ed0 core-prim . cdar) (G4ecf core-prim . cadr) (G4ece core-prim . caar) (G4ecd core-prim . cdr) (G4ecc core-prim . car) (G4ecb core-prim . boolean?) (G4eca core-prim . boolean=?) (G4ec9 core-prim . atan) (G4ec8 core-prim . assertion-violation) (G4ec7 core-prim . asin) (G4ec6 core-prim . apply) (G4ec5 core-prim . append) (G4ec4 core-prim . angle) (G4ec3 core-prim . acos) (G4ec2 core-prim . abs) (G4ec1 core-prim . /) (G4ec0 core-prim . *) (G4ebf core-prim . -) (G4ebe core-prim . +) (G4ebd core-prim . >=) (G4ebc core-prim . >) (G4ebb core-prim . =) (G4eba core-prim . <=) (G4eb9 core-prim . <) (G4eb8 core-prim . library) (G4eb7 core-prim . export) (G4eb6 $core-rtd &no-nans-rtd &no-nans-rcd) (G4eb5 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4eb4 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4eb3 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4eb2 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4eb1 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4eb0 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4eaf $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4eae $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4ead $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4eac $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4eab $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4eaa $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4ea9 $core-rtd &i/o-rtd &i/o-rcd) (G4ea8 $core-rtd &undefined-rtd &undefined-rcd) (G4ea7 $core-rtd &syntax-rtd &syntax-rcd) (G4ea6 $core-rtd &lexical-rtd &lexical-rcd) (G4ea5 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4ea4 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4ea3 $core-rtd &who-rtd &who-rcd) (G4ea2 $core-rtd &irritants-rtd &irritants-rcd) (G4ea1 $core-rtd &assertion-rtd &assertion-rcd) (G4ea0 $core-rtd &violation-rtd &violation-rcd) (G4e9f $core-rtd &error-rtd &error-rcd) (G4e9e $core-rtd &serious-rtd &serious-rcd) (G4e9d $core-rtd &warning-rtd &warning-rcd) (G4e9c $core-rtd &message-rtd &message-rcd) (G4e9b $core-rtd &condition-rtd &condition-rcd) (G4e9a macro . define-condition-type) (G4e99 macro . define-enumeration) (G4e98 macro . define-record-type) (G4e97 macro . parent-rtd) (G4e96 macro . nongenerative) (G4e95 macro . opaque) (G4e94 macro . sealed) (G4e93 macro . protocol) (G4e92 macro . parent) (G4e91 macro . immutable) (G4e90 macro . mutable) (G4e8f macro . fields) (G4e8e macro . error-handling-mode) (G4e8d macro . file-options) (G4e8c macro . buffer-mode) (G4e8b macro . eol-style) (G4e8a macro . guard) (G4e89 macro . trace-define) (G4e88 macro . trace-lambda) (G4e87 macro . unsyntax-splicing) (G4e86 macro . unsyntax) (G4e85 macro . unquote-splicing) (G4e84 macro . unquote) (G4e83 macro . _) (G4e82 macro . else) (G4e81 macro . =>) (G4e80 macro . ...) (G4e7f macro . assert) (G4e7e macro . endianness) (G4e7d macro . delay) (G4e7c macro . time) (G4e7b macro . or) (G4e7a macro . and) (G4e79 macro . do) (G4e78 macro . cond) (G4e77 macro . let*) (G4e76 macro . let) (G4e75 macro . let*-values) (G4e74 macro . let-values) (G4e73 macro . identifier-syntax) (G4e72 macro . with-syntax) (G4e71 macro . quasisyntax) (G4e70 macro . quasiquote) (G4e6f macro . syntax-rules) (G4e6e macro . include) (G4e6d macro . define-struct) (G4e6c core-macro . record-constructor-descriptor) (G4e6b core-macro . record-type-descriptor) (G4e6a macro . case) (G4e69 macro . parameterize) (G4e68 macro . unless) (G4e67 macro . when) (G4e66 core-macro . if) (G4e65 core-macro . letrec*) (G4e64 core-macro . letrec) (G4e63 core-macro . type-descriptor) (G4e62 core-macro . case-lambda) (G4e61 core-macro . lambda) (G4e60 core-macro . syntax) (G4e5f core-macro . syntax-case) (G4e5e core-macro . quote) (G4e5d core-macro . foreign-call) (G4e5c letrec-syntax) (G4e5b let-syntax) (G4e5a set!) (G4e59 import) (G4e58 begin) (G4e57 module) (G4e56 define-syntax) (G4e55 define)) values values '#f '#f '#f '#f) (G2c36@G2ac9@install-library 'G5174 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G511b) (eval-core . G511a) (set-symbol-value! . G5119) (symbol-value . G5118) (gensym . G5117) (void . G5116)) '() values values '#f '#f '#f '#f) (G2c36@G2ac9@install-library 'G5175 '(mosh) '() '() '() '() '((set-symbol-value! . G5119) (symbol-value . G5118) (standard-library-path . G50f0) (get-command-line . G50dd) (sys-display . G50dc) (source-info . G50db) (make-compiler-instruction . G50da) (make-instruction . G50d9) (set-source-info! . G50d8) (fasl-read . G50d7) (fasl-write . G50d6) (include . G4e6e)) '() values values '#f '#f '#f '#f) (G2c36@G2ac9@install-library 'G5176 '(mosh backend) '() '() '() '() '((receive . G50d5)) '() values values '#f '#f '#f '#f) (G2c36@G2ac9@install-library 'G5177 '(mosh file) '() '() '() '() '((read-line . G5113) (file-newer? . G50ef) (stat-mtime . G50ee) (current-directory . G50ed) (write-to-file . G50ec) (file->list . G50eb) (file->string . G50ea)) '() values values '#f '#f '#f '#f) (G2c36@G2ac9@install-library 'G5178 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G50e5)) '() values values '#f '#f '#f '#f) (G2c36@G2ac9@install-library 'G5179 '(mosh number) '() '() '() '() '((digit->integer . G50e9)) '() values values '#f '#f '#f '#f) (G2c36@G2ac9@install-library 'G517a '(mosh string) '() '() '() '() '((print . G50f2) (format . G50f1) (call-with-string-input-port . G50e8) (call-with-string-io . G50e7) (string-split . G50e6) (string->regexp . G50e4)) '() values values '#f '#f '#f '#f) (G2c36@G2ac9@install-library 'G517b '(mosh list) '() '() '() '() '((assoc-ref . G50f4)) '() values values '#f '#f '#f '#f) (G2c36@G2ac9@install-library 'G517c '(mosh regexp) '() '() '() '() '((rxmatch . G50e3) (regexp-replace-all . G50e2)) '() values values '#f '#f '#f '#f) (G2c36@G2ac9@install-library 'G517d '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G50e1)) '() values values '#f '#f '#f '#f) (G2c36@G2ac9@install-library 'G517e '(system) '() '() '() '() '((readdir . G50e0) (get-environment-variables . G50df) (get-environment-variable . G50de)) '() values values '#f '#f '#f '#f) (G2c36@G2ac9@install-library 'G517f '(srfi :1) '() '() '() '() '((dotted-list? . G5112) (circular-list? . G5111) (proper-list? . G5110) (circular-list . G510f) (last . G510e) (last-pair . G510d) (not-pair? . G510c) (split-at! . G510b) (split-at . G510a) (list= . G5109) (list-copy . G5108) (list-tabulate . G5107) (make-list . G5106) (xcons . G5105) (tenth . G5104) (ninth . G5103) (eighth . G5102) (seventh . G5101) (sixth . G5100) (fifth . G50ff) (drop-right! . G50fe) (drop-right . G50fd) (take-right . G50fc) (take! . G50fb) (drop . G50fa) (take . G50f9) (car+cdr . G50f8) (third . G50f7) (second . G50f6) (first . G50f5) (alist-cons . G50f3)) '() values values '#f '#f '#f '#f))
((lambda (G4db1@for-each-with-index G4db3@repl G4db5@trace-printer G4db7@command-line G4db9@local-library-path G4dbb@load/args G4dbd@load G4dbf@ironscheme-build G4dc1@eval-top-level G4dc3@compile-system-libraries G4dc5@compile G4dc7@compile->closure G4dc9@pre-compile-r6rs-file G4dcb@load-r6rs-top-level G4dcd@write-record) (begin (set! G4db1@for-each-with-index (lambda (G4de2@proc G4de3@lst) (letrec ((G4de6@loop (lambda (G4de8@i G4de9@lst) (if (null? G4de9@lst) (if '#f '#f (void)) (begin (G4de2@proc G4de8@i (car G4de9@lst)) (G4de6@loop (+ G4de8@i '1) (cdr G4de9@lst))))))) (G4de6@loop '1 G4de3@lst)))) (set! G4db3@repl (lambda G4dec@x ((lambda (G4def@rec) (begin (set! G4def@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4df1@G4df0) (with-exception-handler (lambda (G4df3@e) (G4df1@G4df0 (if '#t (G4db1@for-each-with-index (lambda (G4df5@i G4df6@x) ((lambda (G4df9@rtd) (begin (format '#t '"   ~d. ~a" G4df5@i (record-type-name G4df9@rtd)) ((lambda (G4dfb@v) ((lambda (G4dfd@t) (if (memv G4dfd@t '(0)) (newline) (if (memv G4dfd@t '(1)) (begin (display '": ") (write ((record-accessor G4df9@rtd '0) G4df6@x)) (newline)) (begin (display '":\n") ((letrec ((G4dff@f (lambda (G4e01@i) (if (not (= G4e01@i (vector-length G4dfb@v))) (begin (display '"       ") (display (vector-ref G4dfb@v G4e01@i)) (display '": ") (write ((record-accessor G4df9@rtd G4e01@i) G4df6@x)) (newline) (G4dff@f (+ G4e01@i '1))) (void))))) G4dff@f) '0))))) (vector-length G4dfb@v))) (record-type-field-names G4df9@rtd)))) (record-rtd G4df6@x))) (simple-conditions G4df3@e)) (raise G4df3@e)))) (lambda () (begin '#f ((lambda (G4e03@line) (if (eof-object? G4e03@line) (exit) (write (G4dc1@eval-top-level (call-with-port (open-string-input-port G4e03@line) read))))) (get-line (current-input-port)))))))) (newline) (G4def@rec)))) (G4def@rec))) '#f))) (set! G4db5@trace-printer (G2995@G28a0@make-parameter write)) (set! G4db7@command-line (G2995@G28a0@make-parameter (get-command-line))) (set! G4db9@local-library-path (lambda (G4e05@filename) (cons '"." (G2c26@G2aa9@library-path)))) (set! G4dbb@load/args (lambda (G4e07@filename . G4e09@args) (begin (apply G4dcb@load-r6rs-top-level G4e07@filename 'load G4e09@args) (void)))) (set! G4dbd@load (lambda (G4e0b@filename) (begin (apply G4dcb@load-r6rs-top-level G4e0b@filename 'load (G4db7@command-line)) (void)))) (set! G4dbf@ironscheme-build (lambda () (G4dbd@load '"ironscheme-buildscript.ss"))) (set! G4dc1@eval-top-level (lambda (G4e0d@x) (G4aac@G3157@eval G4e0d@x (G4ac3@G3185@interaction-environment)))) (set! G4dc3@compile-system-libraries (lambda () (G4dc1@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4dc5@compile (lambda (G4e0f@filename) (G4dcb@load-r6rs-top-level G4e0f@filename 'compile))) (set! G4dc7@compile->closure (lambda (G4e11@filename) (G4dcb@load-r6rs-top-level G4e11@filename 'closure))) (set! G4dc9@pre-compile-r6rs-file (lambda (G4e13@filename) (G4dcb@load-r6rs-top-level G4e13@filename 'compile))) (set! G4dcb@load-r6rs-top-level (lambda (G4e15@filename G4e16@how . G4e19@args) ((lambda (G4e1d@G4e1b@library-path G4e1e@G4e1c@library-path) ((lambda (G4e21@swap) (dynamic-wind G4e21@swap (lambda () ((lambda (G4e23@x*) ((lambda (G4e25@t) (if (memv G4e25@t '(closure)) (G4ac2@G3183@pre-compile-r6rs-top-level G4e23@x*) (if (memv G4e25@t '(load)) ((lambda (G4e29@G4e27@command-line G4e2a@G4e28@command-line) ((lambda (G4e2d@swap) (dynamic-wind G4e2d@swap (lambda () ((G4ac1@G3181@compile-r6rs-top-level G4e23@x*))) G4e2d@swap)) (lambda () ((lambda (G4e2f@t) (begin (G4e29@G4e27@command-line G4e2a@G4e28@command-line) (set! G4e2a@G4e28@command-line G4e2f@t))) (G4e29@G4e27@command-line))))) G4db7@command-line (cons G4e15@filename (car G4e19@args))) (if (memv G4e25@t '(compile)) (begin (G4ac1@G3181@compile-r6rs-top-level G4e23@x*) (G2c2a@G2ab1@serialize-all G2990@G2896@serialize-library G29fa@G29a3@compile-core-expr)) (if '#f '#f (void)))))) G4e16@how)) (with-input-from-file G4e15@filename (lambda () ((letrec ((G4e31@f (lambda () ((lambda (G4e33@x) (if (eof-object? G4e33@x) '() (cons G4e33@x (G4e31@f)))) (G2988@G2886@read-annotated))))) G4e31@f)))))) G4e21@swap)) (lambda () ((lambda (G4e35@t) (begin (G4e1d@G4e1b@library-path G4e1e@G4e1c@library-path) (set! G4e1e@G4e1c@library-path G4e35@t))) (G4e1d@G4e1b@library-path))))) G2c26@G2aa9@library-path (G4db9@local-library-path G4e15@filename)))) (set! G4dcd@write-record (lambda (G4e37@record G4e38@port) ((lambda (G4e3b@rtd) (begin (format G4e38@port '"    ~a" (record-type-name G4e3b@rtd)) ((lambda (G4e3d@v) ((lambda (G4e3f@t) (if (memv G4e3f@t '(0)) (newline) (if (memv G4e3f@t '(1)) (begin (display '": " G4e38@port) (write ((record-accessor G4e3b@rtd '0) G4e37@record) G4e38@port) (newline G4e38@port)) (begin (display '":\n") ((letrec ((G4e41@f (lambda (G4e43@i) (if (not (= G4e43@i (vector-length G4e3d@v))) (begin (display '"       " G4e38@port) (display (vector-ref G4e3d@v G4e43@i) G4e38@port) (display '": " G4e38@port) (write ((record-accessor G4e3b@rtd G4e43@i) G4e37@record) G4e38@port) (newline G4e38@port) (G4e41@f (+ G4e43@i '1))) (void))))) G4e41@f) '0))))) (vector-length G4e3d@v))) (record-type-field-names G4e3b@rtd)))) (record-rtd G4e37@record)))) (begin (set! G4e53@G4dcd@write-record G4dcd@write-record) (set! G4e52@G4dcb@load-r6rs-top-level G4dcb@load-r6rs-top-level) (set! G4e51@G4dc9@pre-compile-r6rs-file G4dc9@pre-compile-r6rs-file) (set! G4e50@G4dc7@compile->closure G4dc7@compile->closure) (set! G4e4f@G4dc5@compile G4dc5@compile) (set! G4e4e@G4dc3@compile-system-libraries G4dc3@compile-system-libraries) (set! G4e4d@G4dc1@eval-top-level G4dc1@eval-top-level) (set! G4e4c@G4dbf@ironscheme-build G4dbf@ironscheme-build) (set! G4e4b@G4dbd@load G4dbd@load) (set! G4e4a@G4dbb@load/args G4dbb@load/args) (set! G4e49@G4db9@local-library-path G4db9@local-library-path) (set! G4e48@G4db7@command-line G4db7@command-line) (set! G4e47@G4db5@trace-printer G4db5@trace-printer) (set! G4e46@G4db3@repl G4db3@repl) (set! G4e45@G4db1@for-each-with-index G4db1@for-each-with-index) (G2c2b@G2ab3@current-precompiled-library-loader G2991@G2898@load-serialized-library) (set-symbol-value! 'load G4dbd@load) (set-symbol-value! 'pre-compile-r6rs-file G4dc9@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4dc1@eval-top-level) (set-symbol-value! 'int-env-syms G4aa3@G3145@interaction-environment-symbols) (set-symbol-value! 'expanded2core G29f9@G29a1@expanded->core) (set-symbol-value! 'trace-printer G4db5@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2c26@G2aa9@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4dce@args G4dcf@port) (with-exception-handler (lambda (G4dd2@c) (begin (display '" Condition components:\n" G4dcf@port) (G4db1@for-each-with-index (lambda (G4dd4@i G4dd5@x) ((lambda (G4dd8@rtd) (begin (format G4dcf@port '"   ~d. ~a" G4dd4@i (record-type-name G4dd8@rtd)) ((lambda (G4dda@v) ((lambda (G4ddc@t) (if (memv G4ddc@t '(0)) (newline) (if (memv G4ddc@t '(1)) (begin (display '": ") (write ((record-accessor G4dd8@rtd '0) G4dd5@x)) (newline)) (begin (display '":\n") ((letrec ((G4dde@f (lambda (G4de0@i) (if (not (= G4de0@i (vector-length G4dda@v))) (begin (display '"       ") (display (vector-ref G4dda@v G4de0@i)) (display '": ") (write ((record-accessor G4dd8@rtd G4de0@i) G4dd5@x)) (newline) (G4dde@f (+ G4de0@i '1))) (void))))) G4dde@f) '0))))) (vector-length G4dda@v))) (record-type-field-names G4dd8@rtd)))) (record-rtd G4dd5@x))) (simple-conditions G4dd2@c)))) (lambda () (if (null? G4dce@args) (G4db3@repl) (G4dcb@load-r6rs-top-level (car G4dce@args) 'load (cdr G4dce@args)))))) (G4db7@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
