;;
;;   Copyright (c) 2008  Higepon(Taro Minowa)  <higepon@users.sourceforge.jp>
;;
;;   Redistribution and use in source and binary forms, with or without
;;   modification, are permitted provided that the following conditions
;;   are met:
;;
;;   1. Redistributions of source code must retain the above copyright
;;      notice, this list of conditions and the following disclaimer.
;;
;;   2. Redistributions in binary form must reproduce the above copyright
;;      notice, this list of conditions and the following disclaimer in the
;;      documentation and/or other materials provided with the distribution.
;;
;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
(import (rnrs)
        (mosh string)
        (srfi-1)
        (mosh file))

(define (compact-number-list lst)
  (define (exact-next-number? a b)
    (cond
     [(and (number? a) (number? b))
      (= (- b a) 1)]
     [(and (pair? a) (number? b))
      (exact-next-number? (cdr a) b)]))
  (define (make-range a b)
    (cond
     [(and (number? a) (number? b))
      (cons a b)]
     [(and (pair? a) (number? b))
      (cons (car a) b)]))
  (let loop ([numbers lst]
             [ret '()])
    (cond
     [(null? numbers) (reverse ret)]
     [(and (pair? ret) (exact-next-number? (car ret) (car numbers)))
      (loop (cdr numbers)
            (cons (make-range (car ret) (car numbers)) (cdr ret)))]
     [else
      (loop (cdr numbers) (cons (car numbers) ret))])))

(define (hashtable-for-each proc ht)
  (let ([keys (hashtable-keys ht)])
    (vector-for-each
     (lambda (key)
       (proc key (hashtable-ref ht key)))
     keys)))

(define (main args)
  (let ([hashtable (make-eq-hashtable)])
    (let loop ([lst (filter (lambda (x) x)
                            (map (lambda (line) (#/^0*(\w+)\;[^\;]+\;([^\;]+)\;\w+\;/ line))  (file->list  "data/UnicodeData.txt")))])
      (cond
       [(null? lst) '()]
       [else
        (hashtable-set! hashtable (string->symbol ((car lst) 2)) (append (hashtable-ref hashtable (string->symbol ((car lst) 2)) '())
                                                                         (list (string->number ((car lst) 1) 16))))
        (loop (cdr lst))]))
    (format #t ";; Do not edit this file generated by ~a.\n;;\n" (first args))
    (display "(define general-category-alist '(\n")
    (hashtable-for-each (lambda (key value)
                          (format #t "    (~a . ~a)\n" key (compact-number-list value)))
                         hashtable)
    (display "))")))

(main (command-line))
