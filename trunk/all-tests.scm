(newline)(define errors '())(define (add-error test expected got) (set! errors (append errors (list (list test expected got)))))(display "")(let1 val (begin #t) (if (equal? '#t val) (format #t " Running ~d/~d" 1 743) (begin (add-error '#t '#t val))))
(display "")(let1 val (begin (source-info '(3))) (if (equal? '("all-tests.scm" 2) val) (format #t " Running ~d/~d" 2 743) (add-error '(source-info '(3)) '("all-tests.scm" 2) val)))(display "")(let1 val (begin (and)) (if (equal? '#t val) (format #t " Running ~d/~d" 3 743) (begin (add-error '(and) '#t val))))
(display "")(let1 val (begin 3) (if (equal? '3 val) (format #t " Running ~d/~d" 4 743) (begin (add-error '3 '3 val))))
(display "")(let1 val (begin 4) (if (equal? '4 val) (format #t " Running ~d/~d" 5 743) (begin (add-error '4 '4 val))))
(display "")(let1 val (begin (if #f #f #t)) (if (equal? '#t val) (format #t " Running ~d/~d" 6 743) (begin (add-error '(if #f #f #t) '#t val))))
(display "")(let1 val (begin ((lambda (a) 3) 4)) (if (equal? '3 val) (format #t " Running ~d/~d" 7 743) (begin (add-error '((lambda (a) 3) 4) '3 val))))
(display "")(let1 val (begin ((lambda (a) (if 3 7 5)) 6)) (if (equal? '7 val) (format #t " Running ~d/~d" 8 743) (begin (add-error '((lambda (a) (if 3 7 5)) 6) '7 val))))
(display "")(let1 val (begin ((lambda () 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 9 743) (begin (add-error '((lambda () 3)) '3 val))))
(display "")(let1 val (begin ((lambda (a) a) 101)) (if (equal? '101 val) (format #t " Running ~d/~d" 10 743) (begin (add-error '((lambda (a) a) 101) '101 val))))
(display "")(let1 val (begin (((lambda () (lambda () 102))))) (if (equal? '102 val) (format #t " Running ~d/~d" 11 743) (begin (add-error '(((lambda () (lambda () 102)))) '102 val))))
(display "")(let1 val (begin (((lambda () (lambda (a) 102))) 101)) (if (equal? '102 val) (format #t " Running ~d/~d" 12 743) (begin (add-error '(((lambda () (lambda (a) 102))) 101) '102 val))))
(display "")(let1 val (begin (((lambda () (lambda (a) a))) 103)) (if (equal? '103 val) (format #t " Running ~d/~d" 13 743) (begin (add-error '(((lambda () (lambda (a) a))) 103) '103 val))))
(display "")(let1 val (begin (((lambda (a) (lambda () a)) 10))) (if (equal? '10 val) (format #t " Running ~d/~d" 14 743) (begin (add-error '(((lambda (a) (lambda () a)) 10)) '10 val))))
(display "")(let1 val (begin ((lambda (a) (set! a 12) a) 2)) (if (equal? '12 val) (format #t " Running ~d/~d" 15 743) (begin (add-error '((lambda (a) (set! a 12) a) 2) '12 val))))
(display "")(let1 val (begin ((lambda (a) ((lambda () (set! a 101)))) '())) (if (equal? '101 val) (format #t " Running ~d/~d" 16 743) (begin (add-error '((lambda (a) ((lambda () (set! a 101)))) '()) '101 val))))
(display "")(let1 val (begin (call/cc (lambda (c) (c 4)))) (if (equal? '4 val) (format #t " Running ~d/~d" 17 743) (begin (add-error '(call/cc (lambda (c) (c 4))) '4 val))))
(display "")(let1 val (begin (receive a (call/cc (lambda (c) (c 1 2 3))) a)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 18 743) (begin (add-error '(receive a (call/cc (lambda (c) (c 1 2 3))) a) '(1 2 3) val))))
(display "")(let1 val (begin (receive a (call/cc (lambda (c) (c 1 2))) a)) (if (equal? '(1 2) val) (format #t " Running ~d/~d" 19 743) (begin (add-error '(receive a (call/cc (lambda (c) (c 1 2))) a) '(1 2) val))))
(display "")(let1 val (begin (receive a (call/cc (lambda (c) (c 1))) a)) (if (equal? '(1) val) (format #t " Running ~d/~d" 20 743) (begin (add-error '(receive a (call/cc (lambda (c) (c 1))) a) '(1) val))))
(display "")(let1 val (begin ((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) (cont #f) 3)) '())) (if (equal? '3 val) (format #t " Running ~d/~d" 21 743) (begin (add-error '((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) (cont #f) 3)) '()) '3 val))))
(display "")(let1 val (begin ((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) ((lambda () ((lambda () (cont #f))))) 102)) '())) (if (equal? '102 val) (format #t " Running ~d/~d" 22 743) (begin (add-error '((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) ((lambda () ((lambda () (cont #f))))) 102)) '()) '102 val))))
(display "")(let1 val (begin ((lambda () 3 4 5))) (if (equal? '5 val) (format #t " Running ~d/~d" 23 743) (begin (add-error '((lambda () 3 4 5)) '5 val))))
(display "")(let1 val (begin (number? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 24 743) (begin (add-error '(number? 3) '#t val))))
(display "")(let1 val (begin (number? 'a)) (if (equal? '#f val) (format #t " Running ~d/~d" 25 743) (begin (add-error '(number? 'a) '#f val))))
(display "")(let1 val (begin (number? 'a)) (if (equal? '#f val) (format #t " Running ~d/~d" 26 743) (begin (add-error '(number? 'a) '#f val))))
(display "")(let1 val (begin (+ 4)) (if (equal? '4 val) (format #t " Running ~d/~d" 27 743) (begin (add-error '(+ 4) '4 val))))
(display "")(let1 val (begin (+ 4 3)) (if (equal? '7 val) (format #t " Running ~d/~d" 28 743) (begin (add-error '(+ 4 3) '7 val))))
(display "")(let1 val (begin (+ 4 3 10)) (if (equal? '17 val) (format #t " Running ~d/~d" 29 743) (begin (add-error '(+ 4 3 10) '17 val))))
(display "")(let1 val (begin (+ 1 1 1 1)) (if (equal? '4 val) (format #t " Running ~d/~d" 30 743) (begin (add-error '(+ 1 1 1 1) '4 val))))
(display "")(let1 val (begin (- 10 5)) (if (equal? '5 val) (format #t " Running ~d/~d" 31 743) (begin (add-error '(- 10 5) '5 val))))
(display "")(let1 val (begin (- 10 5 2)) (if (equal? '3 val) (format #t " Running ~d/~d" 32 743) (begin (add-error '(- 10 5 2) '3 val))))
(display "")(let1 val (begin (cons 'a 'b)) (if (equal? '(a . b) val) (format #t " Running ~d/~d" 33 743) (begin (add-error '(cons 'a 'b) '(a . b) val))))
(display "")(let1 val (begin (car (cons 2 3))) (if (equal? '2 val) (format #t " Running ~d/~d" 34 743) (begin (add-error '(car (cons 2 3)) '2 val))))
(display "")(let1 val (begin (cdr (cons 2 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 35 743) (begin (add-error '(cdr (cons 2 3)) '3 val))))
(display "")(let1 val (begin (cadr (cons 2 (cons 3 '())))) (if (equal? '3 val) (format #t " Running ~d/~d" 36 743) (begin (add-error '(cadr (cons 2 (cons 3 '()))) '3 val))))
(display "")(let1 val (begin (= 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 37 743) (begin (add-error '(= 3 3) '#t val))))
(display "")(let1 val (begin (= 3 4)) (if (equal? '#f val) (format #t " Running ~d/~d" 38 743) (begin (add-error '(= 3 4) '#f val))))
(display "")(let1 val (begin (let ((a 3)) a)) (if (equal? '3 val) (format #t " Running ~d/~d" 39 743) (begin (add-error '(let ((a 3)) a) '3 val))))
(display "")(let1 val (begin (let ((a 3) (b 1)) b)) (if (equal? '1 val) (format #t " Running ~d/~d" 40 743) (begin (add-error '(let ((a 3) (b 1)) b) '1 val))))
(display "")(let1 val (begin (let ((a 3) (b 1)) a)) (if (equal? '3 val) (format #t " Running ~d/~d" 41 743) (begin (add-error '(let ((a 3) (b 1)) a) '3 val))))
(display "")(let1 val (begin (let ((a 3) (b 1)) a b)) (if (equal? '1 val) (format #t " Running ~d/~d" 42 743) (begin (add-error '(let ((a 3) (b 1)) a b) '1 val))))
(display "")(let1 val (begin (let1 a 3 a)) (if (equal? '3 val) (format #t " Running ~d/~d" 43 743) (begin (add-error '(let1 a 3 a) '3 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b 4 b))) (if (equal? '4 val) (format #t " Running ~d/~d" 44 743) (begin (add-error '(let1 a 3 (let1 b 4 b)) '4 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b 4 a))) (if (equal? '3 val) (format #t " Running ~d/~d" 45 743) (begin (add-error '(let1 a 3 (let1 b 4 a)) '3 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b 4 (+ a b)))) (if (equal? '7 val) (format #t " Running ~d/~d" 46 743) (begin (add-error '(let1 a 3 (let1 b 4 (+ a b))) '7 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b 4 (let1 c 5 (+ a b c))))) (if (equal? '12 val) (format #t " Running ~d/~d" 47 743) (begin (add-error '(let1 a 3 (let1 b 4 (let1 c 5 (+ a b c)))) '12 val))))
(display "")(let1 val (begin (let ((a 3) (b 4)) (let1 c 5 (+ a b c)))) (if (equal? '12 val) (format #t " Running ~d/~d" 48 743) (begin (add-error '(let ((a 3) (b 4)) (let1 c 5 (+ a b c))) '12 val))))
(display "")(let1 val (begin (let ((a 3) (b 4)) (+ (let1 c 5 (+ a b c)) 1))) (if (equal? '13 val) (format #t " Running ~d/~d" 49 743) (begin (add-error '(let ((a 3) (b 4)) (+ (let1 c 5 (+ a b c)) 1)) '13 val))))
(display "")(let1 val (begin (let1 a 3 (let1 a 4 a))) (if (equal? '4 val) (format #t " Running ~d/~d" 50 743) (begin (add-error '(let1 a 3 (let1 a 4 a)) '4 val))))
(display "")(let1 val (begin (let1 a 3 (set! a (+ a 1)) (+ a 1))) (if (equal? '5 val) (format #t " Running ~d/~d" 51 743) (begin (add-error '(let1 a 3 (set! a (+ a 1)) (+ a 1)) '5 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b 4 (set! b a) b))) (if (equal? '3 val) (format #t " Running ~d/~d" 52 743) (begin (add-error '(let1 a 3 (let1 b 4 (set! b a) b)) '3 val))))
(display "")(let1 val (begin (let ((a 2) (b 3)) a)) (if (equal? '2 val) (format #t " Running ~d/~d" 53 743) (begin (add-error '(let ((a 2) (b 3)) a) '2 val))))
(display "")(let1 val (begin (let ((a 0) (b 1) (c 2)) c)) (if (equal? '2 val) (format #t " Running ~d/~d" 54 743) (begin (add-error '(let ((a 0) (b 1) (c 2)) c) '2 val))))
(display "")(let1 val (begin (let1 a 1 (let1 b 2 (let1 c a (+ a b c))))) (if (equal? '4 val) (format #t " Running ~d/~d" 55 743) (begin (add-error '(let1 a 1 (let1 b 2 (let1 c a (+ a b c)))) '4 val))))
(display "")(let1 val (begin (let ((a 3)) a)) (if (equal? '3 val) (format #t " Running ~d/~d" 56 743) (begin (add-error '(let ((a 3)) a) '3 val))))
(display "")(let1 val (begin (let ((a 3) (b 4)) (+ a b))) (if (equal? '7 val) (format #t " Running ~d/~d" 57 743) (begin (add-error '(let ((a 3) (b 4)) (+ a b)) '7 val))))
(display "")(let1 val (begin (let* ((a 3) (b (+ a 1))) b)) (if (equal? '4 val) (format #t " Running ~d/~d" 58 743) (begin (add-error '(let* ((a 3) (b (+ a 1))) b) '4 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b 4 (let1 c (lambda () b) (set! a c))) (a))) (if (equal? '4 val) (format #t " Running ~d/~d" 59 743) (begin (add-error '(let1 a 3 (let1 b 4 (let1 c (lambda () b) (set! a c))) (a)) '4 val))))
(display "")(let1 val (begin (let ((a 0) (b 1)) (let ((c (lambda () b))) (c)))) (if (equal? '1 val) (format #t " Running ~d/~d" 60 743) (begin (add-error '(let ((a 0) (b 1)) (let ((c (lambda () b))) (c))) '1 val))))
(display "")(let1 val (begin (let ((a 0) (b 1)) ((lambda () b)))) (if (equal? '1 val) (format #t " Running ~d/~d" 61 743) (begin (add-error '(let ((a 0) (b 1)) ((lambda () b))) '1 val))))
(display "")(let1 val (begin (let ((a 0) (b 1)) (let ((c (lambda () (set! b 3) b))) (c)))) (if (equal? '3 val) (format #t " Running ~d/~d" 62 743) (begin (add-error '(let ((a 0) (b 1)) (let ((c (lambda () (set! b 3) b))) (c))) '3 val))))
(display "")(let1 val (begin (let ((a 0) (b 1)) (let1 c (lambda () (set! b 3) b) (c)))) (if (equal? '3 val) (format #t " Running ~d/~d" 63 743) (begin (add-error '(let ((a 0) (b 1)) (let1 c (lambda () (set! b 3) b) (c))) '3 val))))
(display "")(let1 val (begin (let1 a 100 (let1 c (let1 d (lambda () a) d) (c)))) (if (equal? '100 val) (format #t " Running ~d/~d" 64 743) (begin (add-error '(let1 a 100 (let1 c (let1 d (lambda () a) d) (c))) '100 val))))
(display "")(let1 val (begin (let ((a '())) (let ((G68 (lambda (i) (if (>= i 1000) i (a (+ i 1)))))) (set! a G68) (a 0)))) (if (equal? '1000 val) (format #t " Running ~d/~d" 65 743) (begin (add-error '(let ((a '())) (let ((G68 (lambda (i) (if (>= i 1000) i (a (+ i 1)))))) (set! a G68) (a 0))) '1000 val))))
(display "")(let1 val (begin (letrec ((a (lambda (i) (if (>= i 1000) i (a (+ i 1)))))) (a 0))) (if (equal? '1000 val) (format #t " Running ~d/~d" 66 743) (begin (add-error '(letrec ((a (lambda (i) (if (>= i 1000) i (a (+ i 1)))))) (a 0)) '1000 val))))
(display "")(let1 val (begin (letrec ((a 1) (b (lambda () a))) (b))) (if (equal? '1 val) (format #t " Running ~d/~d" 67 743) (begin (add-error '(letrec ((a 1) (b (lambda () a))) (b)) '1 val))))
(display "")(let1 val (begin (letrec ((even? (lambda (n) (if (= 0 n) #t (odd? (- n 1))))) (odd? (lambda (n) (if (= 0 n) #f (even? (- n 1)))))) (cons (even? 88) (odd? 88)))) (if (equal? '(#t . #f) val) (format #t " Running ~d/~d" 68 743) (begin (add-error '(letrec ((even? (lambda (n) (if (= 0 n) #t (odd? (- n 1))))) (odd? (lambda (n) (if (= 0 n) #f (even? (- n 1)))))) (cons (even? 88) (odd? 88))) '(#t . #f) val))))
(display "")(let1 val (begin (letrec ((a (lambda (i) (if (= i 10) i (a (+ i 1)))))) (a 0))) (if (equal? '10 val) (format #t " Running ~d/~d" 69 743) (begin (add-error '(letrec ((a (lambda (i) (if (= i 10) i (a (+ i 1)))))) (a 0)) '10 val))))
(display "")(let1 val (begin ((lambda (a) (set! a 1000) a) '())) (if (equal? '1000 val) (format #t " Running ~d/~d" 70 743) (begin (add-error '((lambda (a) (set! a 1000) a) '()) '1000 val))))
(display "")(let1 val (begin ((lambda (a) (set! a (lambda (i) (if (= i 20) i (a (+ i 1))))) (a 0)) '())) (if (equal? '20 val) (format #t " Running ~d/~d" 71 743) (begin (add-error '((lambda (a) (set! a (lambda (i) (if (= i 20) i (a (+ i 1))))) (a 0)) '()) '20 val))))
(display "")(let1 val (begin (or #f 3 4)) (if (equal? '3 val) (format #t " Running ~d/~d" 72 743) (begin (add-error '(or #f 3 4) '3 val))))
(display "")(let1 val (begin (define a 3)) (if (equal? '3 val) (format #t " Running ~d/~d" 73 743) (begin (add-error '(define a 3) '3 val))))
(display "")(let1 val (begin a) (if (equal? '3 val) (format #t " Running ~d/~d" 74 743) (begin (add-error 'a '3 val))))
(display "")(let1 val (begin (= 3 4)) (if (equal? '#f val) (format #t " Running ~d/~d" 75 743) (begin (add-error '(= 3 4) '#f val))))
(display "")(let1 val (begin (= 3 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 76 743) (begin (add-error '(= 3 3 3) '#t val))))
(display "")(let1 val (begin (= 3 4 5)) (if (equal? '#f val) (format #t " Running ~d/~d" 77 743) (begin (add-error '(= 3 4 5) '#f val))))
(display "")(let1 val (begin (((lambda (a) (lambda () a)) 101))) (if (equal? '101 val) (format #t " Running ~d/~d" 78 743) (begin (add-error '(((lambda (a) (lambda () a)) 101)) '101 val))))
(display "")(let1 val (begin (((lambda (a) (lambda (b) (+ a b))) 101) 1)) (if (equal? '102 val) (format #t " Running ~d/~d" 79 743) (begin (add-error '(((lambda (a) (lambda (b) (+ a b))) 101) 1) '102 val))))
(display "")(let1 val (begin (null? '())) (if (equal? '#t val) (format #t " Running ~d/~d" 80 743) (begin (add-error '(null? '()) '#t val))))
(display "")(let1 val (begin (null? 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 81 743) (begin (add-error '(null? 3) '#f val))))
(display "")(let1 val (begin (cons 1 2)) (if (equal? '(1 . 2) val) (format #t " Running ~d/~d" 82 743) (begin (add-error '(cons 1 2) '(1 . 2) val))))
(display "")(let1 val (begin (cons 1 (cons 2 '()))) (if (equal? '(1 2) val) (format #t " Running ~d/~d" 83 743) (begin (add-error '(cons 1 (cons 2 '())) '(1 2) val))))
(display "")(let1 val (begin (begin 1 2 3)) (if (equal? '3 val) (format #t " Running ~d/~d" 84 743) (begin (add-error '(begin 1 2 3) '3 val))))
(display "")(let1 val (begin ((lambda () (set! a 4) a))) (if (equal? '4 val) (format #t " Running ~d/~d" 85 743) (begin (add-error '((lambda () (set! a 4) a)) '4 val))))
(display "")(let1 val (begin ((lambda () ((lambda () 3))))) (if (equal? '3 val) (format #t " Running ~d/~d" 86 743) (begin (add-error '((lambda () ((lambda () 3)))) '3 val))))
(display "")(let1 val (begin ((lambda () ((lambda (x) x) 3)))) (if (equal? '3 val) (format #t " Running ~d/~d" 87 743) (begin (add-error '((lambda () ((lambda (x) x) 3))) '3 val))))
(display "")(let1 val (begin ((lambda (y) ((lambda (x) x) 3)) 4)) (if (equal? '3 val) (format #t " Running ~d/~d" 88 743) (begin (add-error '((lambda (y) ((lambda (x) x) 3)) 4) '3 val))))
(display "")(let1 val (begin ((lambda () (let1 a 1 ((lambda () 3)))))) (if (equal? '3 val) (format #t " Running ~d/~d" 89 743) (begin (add-error '((lambda () (let1 a 1 ((lambda () 3))))) '3 val))))
(display "")(let1 val (begin ((lambda () (let1 b 2 (let1 a 1 ((lambda () 3))))))) (if (equal? '3 val) (format #t " Running ~d/~d" 90 743) (begin (add-error '((lambda () (let1 b 2 (let1 a 1 ((lambda () 3)))))) '3 val))))
(display "")(let1 val (begin ((lambda () (if 3 ((lambda () 3)))))) (if (equal? '3 val) (format #t " Running ~d/~d" 91 743) (begin (add-error '((lambda () (if 3 ((lambda () 3))))) '3 val))))
(display "")(let1 val (begin ((lambda () (if ((lambda () 3)) 4 5)))) (if (equal? '4 val) (format #t " Running ~d/~d" 92 743) (begin (add-error '((lambda () (if ((lambda () 3)) 4 5))) '4 val))))
(display "")(let1 val (begin (let loop ((i 0)) (if (= i 10) i (let1 a 1 (let1 b 0 (loop (+ i a b))))))) (if (equal? '10 val) (format #t " Running ~d/~d" 93 743) (begin (add-error '(let loop ((i 0)) (if (= i 10) i (let1 a 1 (let1 b 0 (loop (+ i a b)))))) '10 val))))
(display "")(let1 val (begin (let loop ((i 0)) (if (= i 10) i (let1 a 1 (let1 b 0 (loop (+ i a b))))))) (if (equal? '10 val) (format #t " Running ~d/~d" 94 743) (begin (add-error '(let loop ((i 0)) (if (= i 10) i (let1 a 1 (let1 b 0 (loop (+ i a b)))))) '10 val))))
(display "")(let1 val (begin ((lambda () (define d (lambda (x y z) (+ x y z))) (d 1 2 3)))) (if (equal? '6 val) (format #t " Running ~d/~d" 95 743) (begin (add-error '((lambda () (define d (lambda (x y z) (+ x y z))) (d 1 2 3))) '6 val))))
(display "")(let1 val (begin ((lambda () (define b (lambda () 3)) (b)))) (if (equal? '3 val) (format #t " Running ~d/~d" 96 743) (begin (add-error '((lambda () (define b (lambda () 3)) (b))) '3 val))))
(display "")(let1 val (begin (apply car '((3 2)))) (if (equal? '3 val) (format #t " Running ~d/~d" 97 743) (begin (add-error '(apply car '((3 2))) '3 val))))
(display "")(let1 val (begin ((lambda a a) 1 2 3)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 98 743) (begin (add-error '((lambda a a) 1 2 3) '(1 2 3) val))))
(display "")(let1 val (begin ((lambda (a . b) b) 1 2 3)) (if (equal? '(2 3) val) (format #t " Running ~d/~d" 99 743) (begin (add-error '((lambda (a . b) b) 1 2 3) '(2 3) val))))
(display "")(let1 val (begin ((lambda (a . b) b) 1 2 3 4)) (if (equal? '(2 3 4) val) (format #t " Running ~d/~d" 100 743) (begin (add-error '((lambda (a . b) b) 1 2 3 4) '(2 3 4) val))))
(display "")(let1 val (begin ((lambda (a b . c) c) 1 2 3 4)) (if (equal? '(3 4) val) (format #t " Running ~d/~d" 101 743) (begin (add-error '((lambda (a b . c) c) 1 2 3 4) '(3 4) val))))
(display "")(let1 val (begin ((lambda (a b c . d) d) 1 2 3 4)) (if (equal? '(4) val) (format #t " Running ~d/~d" 102 743) (begin (add-error '((lambda (a b c . d) d) 1 2 3 4) '(4) val))))
(display "")(let1 val (begin ((lambda (a b c . d) d) 1 2 3)) (if (equal? '() val) (format #t " Running ~d/~d" 103 743) (begin (add-error '((lambda (a b c . d) d) 1 2 3) '() val))))
(display "")(let1 val (begin ((lambda a a))) (if (equal? '() val) (format #t " Running ~d/~d" 104 743) (begin (add-error '((lambda a a)) '() val))))
(display "")(let1 val (begin ((lambda a a) 1)) (if (equal? '(1) val) (format #t " Running ~d/~d" 105 743) (begin (add-error '((lambda a a) 1) '(1) val))))
(display "")(let1 val (begin (when #t 1 2 34)) (if (equal? '34 val) (format #t " Running ~d/~d" 106 743) (begin (add-error '(when #t 1 2 34) '34 val))))
(display "")(let1 val (begin (not 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 107 743) (begin (add-error '(not 3) '#f val))))
(display "")(let1 val (begin (unless #f 1 2 48)) (if (equal? '48 val) (format #t " Running ~d/~d" 108 743) (begin (add-error '(unless #f 1 2 48) '48 val))))
(display "")(let1 val (begin (and 3 4 5)) (if (equal? '5 val) (format #t " Running ~d/~d" 109 743) (begin (add-error '(and 3 4 5) '5 val))))
(display "")(let1 val (begin (let1 a 0 (and (set! a (+ a 1))) a)) (if (equal? '1 val) (format #t " Running ~d/~d" 110 743) (begin (add-error '(let1 a 0 (and (set! a (+ a 1))) a) '1 val))))
(display "")(let1 val (begin (let1 a 0 (or (set! a (+ a 1))) a)) (if (equal? '1 val) (format #t " Running ~d/~d" 111 743) (begin (add-error '(let1 a 0 (or (set! a (+ a 1))) a) '1 val))))
(display "")(let1 val (begin (and 3 #f 5)) (if (equal? '#f val) (format #t " Running ~d/~d" 112 743) (begin (add-error '(and 3 #f 5) '#f val))))
(display "")(let1 val (begin (or 3 4 5)) (if (equal? '3 val) (format #t " Running ~d/~d" 113 743) (begin (add-error '(or 3 4 5) '3 val))))
(display "")(let1 val (begin (or #f #f #f)) (if (equal? '#f val) (format #t " Running ~d/~d" 114 743) (begin (add-error '(or #f #f #f) '#f val))))
(display "")(let1 val (begin (> 4 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 115 743) (begin (add-error '(> 4 3) '#t val))))
(display "")(let1 val (begin (> 4 3 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 116 743) (begin (add-error '(> 4 3 2) '#t val))))
(display "")(let1 val (begin (> 4 3 1 2)) (if (equal? '#f val) (format #t " Running ~d/~d" 117 743) (begin (add-error '(> 4 3 1 2) '#f val))))
(display "")(let1 val (begin (>= 3 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 118 743) (begin (add-error '(>= 3 3 3) '#t val))))
(display "")(let1 val (begin (>= 4 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 119 743) (begin (add-error '(>= 4 3 3) '#t val))))
(display "")(let1 val (begin (>= 4 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 120 743) (begin (add-error '(>= 4 3) '#t val))))
(display "")(let1 val (begin (< 1 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 121 743) (begin (add-error '(< 1 2) '#t val))))
(display "")(let1 val (begin (< 1 2 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 122 743) (begin (add-error '(< 1 2 3) '#t val))))
(display "")(let1 val (begin (< 1 5 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 123 743) (begin (add-error '(< 1 5 3) '#f val))))
(display "")(let1 val (begin (<= 1 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 124 743) (begin (add-error '(<= 1 2) '#t val))))
(display "")(let1 val (begin (<= 1 2 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 125 743) (begin (add-error '(<= 1 2 3) '#t val))))
(display "")(let1 val (begin (<= 1 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 126 743) (begin (add-error '(<= 1 3 3) '#t val))))
(display "")(let1 val (begin (<= 1 5 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 127 743) (begin (add-error '(<= 1 5 3) '#f val))))
(display "")(let1 val (begin (eq? #t #t)) (if (equal? '#t val) (format #t " Running ~d/~d" 128 743) (begin (add-error '(eq? #t #t) '#t val))))
(display "")(let1 val (begin (eq? #t #f)) (if (equal? '#f val) (format #t " Running ~d/~d" 129 743) (begin (add-error '(eq? #t #f) '#f val))))
(display "")(let1 val (begin (eq? 'a 'a)) (if (equal? '#t val) (format #t " Running ~d/~d" 130 743) (begin (add-error '(eq? 'a 'a) '#t val))))
(display "")(let1 val (begin (eq? 'a 'b)) (if (equal? '#f val) (format #t " Running ~d/~d" 131 743) (begin (add-error '(eq? 'a 'b) '#f val))))
(display "")(let1 val (begin (pair? (cons 1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 132 743) (begin (add-error '(pair? (cons 1 2)) '#t val))))
(display "")(let1 val (begin (pair? 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 133 743) (begin (add-error '(pair? 3) '#f val))))
(display "")(let1 val (begin (symbol? 'a)) (if (equal? '#t val) (format #t " Running ~d/~d" 134 743) (begin (add-error '(symbol? 'a) '#t val))))
(display "")(let1 val (begin (symbol? 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 135 743) (begin (add-error '(symbol? 3) '#f val))))
(display "")(let1 val (begin (cond (#f 1) (#t 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 136 743) (begin (add-error '(cond (#f 1) (#t 3)) '3 val))))
(display "")(let1 val (begin (cond (#f 1) (#f 2) (else 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 137 743) (begin (add-error '(cond (#f 1) (#f 2) (else 3)) '3 val))))
(display "")(let1 val (begin (cond (#t 3) (#f 2) (else 1))) (if (equal? '3 val) (format #t " Running ~d/~d" 138 743) (begin (add-error '(cond (#t 3) (#f 2) (else 1)) '3 val))))
(display "")(let1 val (begin (cond ((cons 1 2) => car) (#f 2) (else 3))) (if (equal? '1 val) (format #t " Running ~d/~d" 139 743) (begin (add-error '(cond ((cons 1 2) => car) (#f 2) (else 3)) '1 val))))
(display "")(let1 val (begin (apply (lambda (a) a) '(3))) (if (equal? '3 val) (format #t " Running ~d/~d" 140 743) (begin (add-error '(apply (lambda (a) a) '(3)) '3 val))))
(display "")(let1 val (begin (apply (lambda (a b) (+ a b)) '(5 2))) (if (equal? '7 val) (format #t " Running ~d/~d" 141 743) (begin (add-error '(apply (lambda (a b) (+ a b)) '(5 2)) '7 val))))
(display "")(let1 val (begin (apply (lambda (a b c) (+ a b c)) '(5 2 1))) (if (equal? '8 val) (format #t " Running ~d/~d" 142 743) (begin (add-error '(apply (lambda (a b c) (+ a b c)) '(5 2 1)) '8 val))))
(display "")(let1 val (begin (let ((a 0)) `(,a b c))) (if (equal? '(0 b c) val) (format #t " Running ~d/~d" 143 743) (begin (add-error '(let ((a 0)) `(,a b c)) '(0 b c) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(,a b c))) (if (equal? '((1 2 3) b c) val) (format #t " Running ~d/~d" 144 743) (begin (add-error '(let ((a '(1 2 3))) `(,a b c)) '((1 2 3) b c) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(,@a b c))) (if (equal? '(1 2 3 b c) val) (format #t " Running ~d/~d" 145 743) (begin (add-error '(let ((a '(1 2 3))) `(,@a b c)) '(1 2 3 b c) val))))
(display "")(let1 val (begin (let ((name 'a)) `(list ,name ',name))) (if (equal? '(list a 'a) val) (format #t " Running ~d/~d" 146 743) (begin (add-error '(let ((name 'a)) `(list ,name ',name)) '(list a 'a) val))))
(display "")(let1 val (begin `(list ,(+ 1 2) 4)) (if (equal? '(list 3 4) val) (format #t " Running ~d/~d" 147 743) (begin (add-error '`(list ,(+ 1 2) 4) '(list 3 4) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(1 unquote a))) (if (equal? '(1 1 2 3) val) (format #t " Running ~d/~d" 148 743) (begin (add-error '(let ((a '(1 2 3))) `(1 unquote a)) '(1 1 2 3) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `,a)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 149 743) (begin (add-error '(let ((a '(1 2 3))) `,a) '(1 2 3) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(,@a))) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 150 743) (begin (add-error '(let ((a '(1 2 3))) `(,@a)) '(1 2 3) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(0 ,@a))) (if (equal? '(0 1 2 3) val) (format #t " Running ~d/~d" 151 743) (begin (add-error '(let ((a '(1 2 3))) `(0 ,@a)) '(0 1 2 3) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(0 ,a 4))) (if (equal? '(0 (1 2 3) 4) val) (format #t " Running ~d/~d" 152 743) (begin (add-error '(let ((a '(1 2 3))) `(0 ,a 4)) '(0 (1 2 3) 4) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(,@a 4))) (if (equal? '(1 2 3 4) val) (format #t " Running ~d/~d" 153 743) (begin (add-error '(let ((a '(1 2 3))) `(,@a 4)) '(1 2 3 4) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `((,@a) 4))) (if (equal? '((1 2 3) 4) val) (format #t " Running ~d/~d" 154 743) (begin (add-error '(let ((a '(1 2 3))) `((,@a) 4)) '((1 2 3) 4) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `((,a) 4))) (if (equal? '(((1 2 3)) 4) val) (format #t " Running ~d/~d" 155 743) (begin (add-error '(let ((a '(1 2 3))) `((,a) 4)) '(((1 2 3)) 4) val))))
(display "")(let1 val (begin `b) (if (equal? 'b val) (format #t " Running ~d/~d" 156 743) (begin (add-error '`b 'b val))))
(display "")(let1 val (begin (list 1 2 3)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 157 743) (begin (add-error '(list 1 2 3) '(1 2 3) val))))
(display "")(let1 val (begin (aif (+ 1 2) it #f)) (if (equal? '3 val) (format #t " Running ~d/~d" 158 743) (begin (add-error '(aif (+ 1 2) it #f) '3 val))))
(display "")(let1 val (begin (string-length "abc")) (if (equal? '3 val) (format #t " Running ~d/~d" 159 743) (begin (add-error '(string-length "abc") '3 val))))
(display "")(let1 val (begin (string-length "あいう")) (if (equal? '3 val) (format #t " Running ~d/~d" 160 743) (begin (add-error '(string-length "あいう") '3 val))))
(display "")(let1 val (begin (string->symbol "abc")) (if (equal? 'abc val) (format #t " Running ~d/~d" 161 743) (begin (add-error '(string->symbol "abc") 'abc val))))
(display "")(let1 val (begin (number->string 123)) (if (equal? '"123" val) (format #t " Running ~d/~d" 162 743) (begin (add-error '(number->string 123) '"123" val))))
(display "")(let1 val (begin (begin (define (proc1 . a) a) (proc1 1 2 3 4))) (if (equal? '(1 2 3 4) val) (format #t " Running ~d/~d" 163 743) (begin (add-error '(begin (define (proc1 . a) a) (proc1 1 2 3 4)) '(1 2 3 4) val))))
(display "")(let1 val (begin ((lambda (a . b) b) 1 2 3)) (if (equal? '(2 3) val) (format #t " Running ~d/~d" 164 743) (begin (add-error '((lambda (a . b) b) 1 2 3) '(2 3) val))))
(display "")(let1 val (begin ((lambda (a . b) a) 1 2 3 4 5)) (if (equal? '1 val) (format #t " Running ~d/~d" 165 743) (begin (add-error '((lambda (a . b) a) 1 2 3 4 5) '1 val))))
(display "")(let1 val (begin ((lambda (a . b) b) 1 2 3 4 5)) (if (equal? '(2 3 4 5) val) (format #t " Running ~d/~d" 166 743) (begin (add-error '((lambda (a . b) b) 1 2 3 4 5) '(2 3 4 5) val))))
(display "")(let1 val (begin ((lambda (a b c d . e) e) 1 2 3 4)) (if (equal? '() val) (format #t " Running ~d/~d" 167 743) (begin (add-error '((lambda (a b c d . e) e) 1 2 3 4) '() val))))
(display "")(let1 val (begin ((lambda (a b c d . e) a) 1 2 3 4)) (if (equal? '1 val) (format #t " Running ~d/~d" 168 743) (begin (add-error '((lambda (a b c d . e) a) 1 2 3 4) '1 val))))
(display "")(let1 val (begin ((lambda (a b c d . e) b) 1 2 3 4)) (if (equal? '2 val) (format #t " Running ~d/~d" 169 743) (begin (add-error '((lambda (a b c d . e) b) 1 2 3 4) '2 val))))
(display "")(let1 val (begin ((lambda (a b c d . e) c) 1 2 3 4)) (if (equal? '3 val) (format #t " Running ~d/~d" 170 743) (begin (add-error '((lambda (a b c d . e) c) 1 2 3 4) '3 val))))
(display "")(let1 val (begin ((lambda (a b c d . e) d) 1 2 3 4)) (if (equal? '4 val) (format #t " Running ~d/~d" 171 743) (begin (add-error '((lambda (a b c d . e) d) 1 2 3 4) '4 val))))
(display "")(let1 val (begin (append '(1 2) '(3 4))) (if (equal? '(1 2 3 4) val) (format #t " Running ~d/~d" 172 743) (begin (add-error '(append '(1 2) '(3 4)) '(1 2 3 4) val))))
(display "")(let1 val (begin (begin (define x 3) x)) (if (equal? '3 val) (format #t " Running ~d/~d" 173 743) (begin (add-error '(begin (define x 3) x) '3 val))))
(display "")(let1 val (begin (begin (define (hoge . a) a) (hoge 1 2 3))) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 174 743) (begin (add-error '(begin (define (hoge . a) a) (hoge 1 2 3)) '(1 2 3) val))))
(display "")(let1 val (begin (begin (define (hige a . b) b) (hige 1 2 3))) (if (equal? '(2 3) val) (format #t " Running ~d/~d" 175 743) (begin (add-error '(begin (define (hige a . b) b) (hige 1 2 3)) '(2 3) val))))
(display "")(let1 val (begin (apply (lambda a a) '(3 2))) (if (equal? '(3 2) val) (format #t " Running ~d/~d" 176 743) (begin (add-error '(apply (lambda a a) '(3 2)) '(3 2) val))))
(display "")(let1 val (begin (equal? '(1 2 (3)) '(1 2 (3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 177 743) (begin (add-error '(equal? '(1 2 (3)) '(1 2 (3))) '#t val))))
(display "")(let1 val (begin (let ((a 3)) 3 2 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 178 743) (begin (add-error '(let ((a 3)) 3 2 1) '1 val))))
(display "")(let1 val (begin (make-string 3)) (if (equal? '"   " val) (format #t " Running ~d/~d" 179 743) (begin (add-error '(make-string 3) '"   " val))))
(display "")(let1 val (begin (make-string 3 #\c)) (if (equal? '"ccc" val) (format #t " Running ~d/~d" 180 743) (begin (add-error '(make-string 3 #\c) '"ccc" val))))
(display "")(let1 val (begin (apply car '((3)))) (if (equal? '3 val) (format #t " Running ~d/~d" 181 743) (begin (add-error '(apply car '((3))) '3 val))))
(display "")(let1 val (begin (apply (lambda (a) (car a)) '((3)))) (if (equal? '3 val) (format #t " Running ~d/~d" 182 743) (begin (add-error '(apply (lambda (a) (car a)) '((3))) '3 val))))
(display "")(let1 val (begin (apply (lambda (a . b) (+ a (car b))) '(1 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 183 743) (begin (add-error '(apply (lambda (a . b) (+ a (car b))) '(1 2)) '3 val))))
(display "")(let1 val (begin (string-append "12" "345" "6")) (if (equal? '"123456" val) (format #t " Running ~d/~d" 184 743) (begin (add-error '(string-append "12" "345" "6") '"123456" val))))
(display "")(let1 val (begin (find (lambda (e) (= e 3)) (list 1 2 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 185 743) (begin (add-error '(find (lambda (e) (= e 3)) (list 1 2 3)) '3 val))))
(display "")(let1 val (begin (string? "hige")) (if (equal? '#t val) (format #t " Running ~d/~d" 186 743) (begin (add-error '(string? "hige") '#t val))))
(display "")(let1 val (begin (assoc "key" '(("key" "value")))) (if (equal? '("key" "value") val) (format #t " Running ~d/~d" 187 743) (begin (add-error '(assoc "key" '(("key" "value"))) '("key" "value") val))))
(display "")(let1 val (begin (string-split "12\n34\n56" #\newline)) (if (equal? '("12" "34" "56") val) (format #t " Running ~d/~d" 188 743) (begin (add-error '(string-split "12\n34\n56" #\newline) '("12" "34" "56") val))))
(display "")(let1 val (begin (let ((p (open-string-input-port "12345"))) (read-char p) (read-char p))) (if (equal? '#\2 val) (format #t " Running ~d/~d" 189 743) (begin (add-error '(let ((p (open-string-input-port "12345"))) (read-char p) (read-char p)) '#\2 val))))
(display "")(let1 val (begin (eof-object? (let ((p (open-string-input-port "1"))) (read-char p) (read-char p)))) (if (equal? '#t val) (format #t " Running ~d/~d" 190 743) (begin (add-error '(eof-object? (let ((p (open-string-input-port "1"))) (read-char p) (read-char p))) '#t val))))
(display "")(let1 val (begin (let ((p (open-string-input-port "123 456"))) (read p))) (if (equal? '123 val) (format #t " Running ~d/~d" 191 743) (begin (add-error '(let ((p (open-string-input-port "123 456"))) (read p)) '123 val))))
(display "")(let1 val (begin (rxmatch #/123/ "12")) (if (equal? '#f val) (format #t " Running ~d/~d" 192 743) (begin (add-error '(rxmatch #/123/ "12") '#f val))))
(display "")(let1 val (begin (if (rxmatch #/123/ "123") #t #f)) (if (equal? '#t val) (format #t " Running ~d/~d" 193 743) (begin (add-error '(if (rxmatch #/123/ "123") #t #f) '#t val))))
(display "")(let1 val (begin (regexp? #/abc/)) (if (equal? '#t val) (format #t " Running ~d/~d" 194 743) (begin (add-error '(regexp? #/abc/) '#t val))))
(display "")(let1 val (begin (regexp? "abc")) (if (equal? '#f val) (format #t " Running ~d/~d" 195 743) (begin (add-error '(regexp? "abc") '#f val))))
(display "")(let1 val (begin (rxmatch-start (rxmatch #/\d+/ "a345a"))) (if (equal? '1 val) (format #t " Running ~d/~d" 196 743) (begin (add-error '(rxmatch-start (rxmatch #/\d+/ "a345a")) '1 val))))
(display "")(let1 val (begin (rxmatch-start (rxmatch #/\d+/ "ab345a"))) (if (equal? '2 val) (format #t " Running ~d/~d" 197 743) (begin (add-error '(rxmatch-start (rxmatch #/\d+/ "ab345a")) '2 val))))
(display "")(let1 val (begin (rxmatch-start (rxmatch #/\d+/ "abあ345a"))) (if (equal? '3 val) (format #t " Running ~d/~d" 198 743) (begin (add-error '(rxmatch-start (rxmatch #/\d+/ "abあ345a")) '3 val))))
(display "")(let1 val (begin (rxmatch-start (rxmatch #/(\d+)(a)/ "a345a") 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 199 743) (begin (add-error '(rxmatch-start (rxmatch #/(\d+)(a)/ "a345a") 1) '1 val))))
(display "")(let1 val (begin (rxmatch-start (rxmatch #/(\d+)(a)/ "a345a") 2)) (if (equal? '4 val) (format #t " Running ~d/~d" 200 743) (begin (add-error '(rxmatch-start (rxmatch #/(\d+)(a)/ "a345a") 2) '4 val))))
(display "")(let1 val (begin (rxmatch-end (rxmatch #/\d+/ "a345a"))) (if (equal? '4 val) (format #t " Running ~d/~d" 201 743) (begin (add-error '(rxmatch-end (rxmatch #/\d+/ "a345a")) '4 val))))
(display "")(let1 val (begin (rxmatch-end (rxmatch #/(\d+)(a)/ "a345a") 1)) (if (equal? '4 val) (format #t " Running ~d/~d" 202 743) (begin (add-error '(rxmatch-end (rxmatch #/(\d+)(a)/ "a345a") 1) '4 val))))
(display "")(let1 val (begin (rxmatch-end (rxmatch #/(\d+)(a)/ "a345a") 2)) (if (equal? '5 val) (format #t " Running ~d/~d" 203 743) (begin (add-error '(rxmatch-end (rxmatch #/(\d+)(a)/ "a345a") 2) '5 val))))
(display "")(let1 val (begin (rxmatch-end (rxmatch #/\d+/ "aaaa"))) (if (equal? '#f val) (format #t " Running ~d/~d" 204 743) (begin (add-error '(rxmatch-end (rxmatch #/\d+/ "aaaa")) '#f val))))
(display "")(let1 val (begin (#/123/ "12")) (if (equal? '#f val) (format #t " Running ~d/~d" 205 743) (begin (add-error '(#/123/ "12") '#f val))))
(display "")(let1 val (begin (rxmatch-start (#/\d+/ "a345a"))) (if (equal? '1 val) (format #t " Running ~d/~d" 206 743) (begin (add-error '(rxmatch-start (#/\d+/ "a345a")) '1 val))))
(display "")(let1 val (begin (rxmatch-start (#/\d+/ "ab345a"))) (if (equal? '2 val) (format #t " Running ~d/~d" 207 743) (begin (add-error '(rxmatch-start (#/\d+/ "ab345a")) '2 val))))
(display "")(let1 val (begin (rxmatch-start (#/\d+/ "abあ345a"))) (if (equal? '3 val) (format #t " Running ~d/~d" 208 743) (begin (add-error '(rxmatch-start (#/\d+/ "abあ345a")) '3 val))))
(display "")(let1 val (begin (rxmatch-start (#/(\d+)(a)/ "a345a") 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 209 743) (begin (add-error '(rxmatch-start (#/(\d+)(a)/ "a345a") 1) '1 val))))
(display "")(let1 val (begin (rxmatch-start (#/(\d+)(a)/ "a345a") 2)) (if (equal? '4 val) (format #t " Running ~d/~d" 210 743) (begin (add-error '(rxmatch-start (#/(\d+)(a)/ "a345a") 2) '4 val))))
(display "")(let1 val (begin (rxmatch-after (#/abc/ "123abcdef"))) (if (equal? '"def" val) (format #t " Running ~d/~d" 211 743) (begin (add-error '(rxmatch-after (#/abc/ "123abcdef")) '"def" val))))
(display "")(let1 val (begin (rxmatch-after (#/abc/ "123abcあいうえ"))) (if (equal? '"あいうえ" val) (format #t " Running ~d/~d" 212 743) (begin (add-error '(rxmatch-after (#/abc/ "123abcあいうえ")) '"あいうえ" val))))
(display "")(let1 val (begin (rxmatch-after (#/かきく/ "123かきくあいうえ"))) (if (equal? '"あいうえ" val) (format #t " Running ~d/~d" 213 743) (begin (add-error '(rxmatch-after (#/かきく/ "123かきくあいうえ")) '"あいうえ" val))))
(display "")(let1 val (begin (rxmatch-before (#/abc/ "123abcdef"))) (if (equal? '"123" val) (format #t " Running ~d/~d" 214 743) (begin (add-error '(rxmatch-before (#/abc/ "123abcdef")) '"123" val))))
(display "")(let1 val (begin ((#/abc/ "123abcdef") 0)) (if (equal? '"abc" val) (format #t " Running ~d/~d" 215 743) (begin (add-error '((#/abc/ "123abcdef") 0) '"abc" val))))
(display "")(let1 val (begin ((#/abc/ "123abcdef"))) (if (equal? '"abc" val) (format #t " Running ~d/~d" 216 743) (begin (add-error '((#/abc/ "123abcdef")) '"abc" val))))
(display "")(let1 val (begin ((#/abc/ "123abcdef") 'after)) (if (equal? '"def" val) (format #t " Running ~d/~d" 217 743) (begin (add-error '((#/abc/ "123abcdef") 'after) '"def" val))))
(display "")(let1 val (begin ((#/abc/ "123abcdef") 'before)) (if (equal? '"123" val) (format #t " Running ~d/~d" 218 743) (begin (add-error '((#/abc/ "123abcdef") 'before) '"123" val))))
(display "")(let1 val (begin (rxmatch #/123/ "12")) (if (equal? '#f val) (format #t " Running ~d/~d" 219 743) (begin (add-error '(rxmatch #/123/ "12") '#f val))))
(display "")(let1 val (begin (#/123/ "12")) (if (equal? '#f val) (format #t " Running ~d/~d" 220 743) (begin (add-error '(#/123/ "12") '#f val))))
(display "")(let1 val (begin (if (#/^abc/ "abc") #t #f)) (if (equal? '#t val) (format #t " Running ~d/~d" 221 743) (begin (add-error '(if (#/^abc/ "abc") #t #f) '#t val))))
(display "")(let1 val (begin (regexp->string #/abc/)) (if (equal? '"abc" val) (format #t " Running ~d/~d" 222 743) (begin (add-error '(regexp->string #/abc/) '"abc" val))))
(display "")(let1 val (begin (rxmatch-start (#/\d+/ "aaaa"))) (if (equal? '#f val) (format #t " Running ~d/~d" 223 743) (begin (add-error '(rxmatch-start (#/\d+/ "aaaa")) '#f val))))
(display "")(let1 val (begin (rxmatch-end (#/\d+/ "a345a"))) (if (equal? '4 val) (format #t " Running ~d/~d" 224 743) (begin (add-error '(rxmatch-end (#/\d+/ "a345a")) '4 val))))
(display "")(let1 val (begin (rxmatch-end (#/(\d+)(a)/ "a345a") 1)) (if (equal? '4 val) (format #t " Running ~d/~d" 225 743) (begin (add-error '(rxmatch-end (#/(\d+)(a)/ "a345a") 1) '4 val))))
(display "")(let1 val (begin (rxmatch-end (#/(\d+)(a)/ "a345a") 2)) (if (equal? '5 val) (format #t " Running ~d/~d" 226 743) (begin (add-error '(rxmatch-end (#/(\d+)(a)/ "a345a") 2) '5 val))))
(display "")(let1 val (begin (rxmatch-end (#/\d+/ "aaaa"))) (if (equal? '#f val) (format #t " Running ~d/~d" 227 743) (begin (add-error '(rxmatch-end (#/\d+/ "aaaa")) '#f val))))
(display "")(let1 val (begin (rxmatch #/123/ "12")) (if (equal? '#f val) (format #t " Running ~d/~d" 228 743) (begin (add-error '(rxmatch #/123/ "12") '#f val))))
(display "")(let1 val (begin (if (rxmatch #/123/ "123") #t #f)) (if (equal? '#t val) (format #t " Running ~d/~d" 229 743) (begin (add-error '(if (rxmatch #/123/ "123") #t #f) '#t val))))
(display "")(let1 val (begin (#/123/ "12")) (if (equal? '#f val) (format #t " Running ~d/~d" 230 743) (begin (add-error '(#/123/ "12") '#f val))))
(display "")(let1 val (begin (if (#/^abc/ "abc") #t #f)) (if (equal? '#t val) (format #t " Running ~d/~d" 231 743) (begin (add-error '(if (#/^abc/ "abc") #t #f) '#t val))))
(display "")(let1 val (begin (regexp? #/abc/)) (if (equal? '#t val) (format #t " Running ~d/~d" 232 743) (begin (add-error '(regexp? #/abc/) '#t val))))
(display "")(let1 val (begin (regexp? "abc")) (if (equal? '#f val) (format #t " Running ~d/~d" 233 743) (begin (add-error '(regexp? "abc") '#f val))))
(display "")(let1 val (begin (regexp->string #/abc/)) (if (equal? '"abc" val) (format #t " Running ~d/~d" 234 743) (begin (add-error '(regexp->string #/abc/) '"abc" val))))
(display "")(let1 val (begin (rxmatch-start (#/\d+/ "a345a"))) (if (equal? '1 val) (format #t " Running ~d/~d" 235 743) (begin (add-error '(rxmatch-start (#/\d+/ "a345a")) '1 val))))
(display "")(let1 val (begin (rxmatch-substring (#/\d+/ "a345a"))) (if (equal? '"345" val) (format #t " Running ~d/~d" 236 743) (begin (add-error '(rxmatch-substring (#/\d+/ "a345a")) '"345" val))))
(display "")(let1 val (begin (rxmatch-substring (#/(\d+)(a)/ "a345a") 1)) (if (equal? '"345" val) (format #t " Running ~d/~d" 237 743) (begin (add-error '(rxmatch-substring (#/(\d+)(a)/ "a345a") 1) '"345" val))))
(display "")(let1 val (begin (rxmatch-substring (#/(\d+)(a)/ "a345a") 2)) (if (equal? '"a" val) (format #t " Running ~d/~d" 238 743) (begin (add-error '(rxmatch-substring (#/(\d+)(a)/ "a345a") 2) '"a" val))))
(display "")(let1 val (begin (rxmatch-substring (#/\d+/ "aaaa"))) (if (equal? '#f val) (format #t " Running ~d/~d" 239 743) (begin (add-error '(rxmatch-substring (#/\d+/ "aaaa")) '#f val))))
(display "")(let1 val (begin ((#/あ/ "あ"))) (if (equal? '"あ" val) (format #t " Running ~d/~d" 240 743) (begin (add-error '((#/あ/ "あ")) '"あ" val))))
(display "")(let1 val (begin (string->regexp "abc")) (if (equal? '#/abc/ val) (format #t " Running ~d/~d" 241 743) (begin (add-error '(string->regexp "abc") '#/abc/ val))))
(display "")(let1 val (begin (let1 m (#/^#([^(^)^\s]+)(?:\(([^\)]+)\))?/ "#comment") (m 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 242 743) (begin (add-error '(let1 m (#/^#([^(^)^\s]+)(?:\(([^\)]+)\))?/ "#comment") (m 2)) '#f val))))
(display "")(let1 val (begin (begin (let ((xxx 'a)) (case xxx ((b) 'b) ((a) 'a))))) (if (equal? 'a val) (format #t " Running ~d/~d" 243 743) (begin (add-error '(begin (let ((xxx 'a)) (case xxx ((b) 'b) ((a) 'a)))) 'a val))))
(display "")(let1 val (begin (begin (let ((xxy 'a)) (case xxy ((b) 'b) ((c) 'c) (else 3))))) (if (equal? '3 val) (format #t " Running ~d/~d" 244 743) (begin (add-error '(begin (let ((xxy 'a)) (case xxy ((b) 'b) ((c) 'c) (else 3)))) '3 val))))
(display "")(let1 val (begin ((lambda (a) (call/cc (lambda (c) (c -1) 4))) 2)) (if (equal? '-1 val) (format #t " Running ~d/~d" 245 743) (begin (add-error '((lambda (a) (call/cc (lambda (c) (c -1) 4))) 2) '-1 val))))
(display "")(let1 val (begin (* 2 3)) (if (equal? '6 val) (format #t " Running ~d/~d" 246 743) (begin (add-error '(* 2 3) '6 val))))
(display "")(let1 val (begin (* 2 3 4)) (if (equal? '24 val) (format #t " Running ~d/~d" 247 743) (begin (add-error '(* 2 3 4) '24 val))))
(display "")(let1 val (begin (call/cc (lambda (c) (c 4)))) (if (equal? '4 val) (format #t " Running ~d/~d" 248 743) (begin (add-error '(call/cc (lambda (c) (c 4))) '4 val))))
(display "")(let1 val (begin (string->number "123")) (if (equal? '123 val) (format #t " Running ~d/~d" 249 743) (begin (add-error '(string->number "123") '123 val))))
(display "")(let1 val (begin (let ((p (open-string-input-port "123 456"))) (read p))) (if (equal? '123 val) (format #t " Running ~d/~d" 250 743) (begin (add-error '(let ((p (open-string-input-port "123 456"))) (read p)) '123 val))))
(display "")(let1 val (begin (let ((p (open-string-input-port "123 456"))) (read-char p))) (if (equal? '#\1 val) (format #t " Running ~d/~d" 251 743) (begin (add-error '(let ((p (open-string-input-port "123 456"))) (read-char p)) '#\1 val))))
(display "")(let1 val (begin (reverse '(1 2 3 4))) (if (equal? '(4 3 2 1) val) (format #t " Running ~d/~d" 252 743) (begin (add-error '(reverse '(1 2 3 4)) '(4 3 2 1) val))))
(display "")(let1 val (begin (string-split "wiki&cmd" #\&)) (if (equal? '("wiki" "cmd") val) (format #t " Running ~d/~d" 253 743) (begin (add-error '(string-split "wiki&cmd" #\&) '("wiki" "cmd") val))))
(display "")(let1 val (begin (begin (define str1 (make-string 3 #\c)) (string-set! str1 1 #\b) str1)) (if (equal? '"cbc" val) (format #t " Running ~d/~d" 254 743) (begin (add-error '(begin (define str1 (make-string 3 #\c)) (string-set! str1 1 #\b) str1) '"cbc" val))))
(display "")(let1 val (begin ((lambda (a) (call/cc (lambda (c) (c -1)))) 2)) (if (equal? '-1 val) (format #t " Running ~d/~d" 255 743) (begin (add-error '((lambda (a) (call/cc (lambda (c) (c -1)))) 2) '-1 val))))
(display "")(let1 val (begin (let* ((a 0) (b (lambda (x y) a))) (b (begin (set! a 1)) (begin (set! a 2))))) (if (equal? '2 val) (format #t " Running ~d/~d" 256 743) (begin (add-error '(let* ((a 0) (b (lambda (x y) a))) (b (begin (set! a 1)) (begin (set! a 2)))) '2 val))))
(display "")(let1 val (begin #\a) (if (equal? '#\a val) (format #t " Running ~d/~d" 257 743) (begin (add-error '#\a '#\a val))))
(display "")(let1 val (begin (eof-object? 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 258 743) (begin (add-error '(eof-object? 3) '#f val))))
(display "")(let1 val (begin 102) (if (equal? '102 val) (format #t " Running ~d/~d" 259 743) (begin (add-error '102 '102 val))))
(display "")(let1 val (begin (define val 3) (define (func8) (define val 4) val) (func8)) (if (equal? '4 val) (format #t " Running ~d/~d" 260 743) (begin (add-error '(define val 3) '4 val))))
(display "")(let1 val (begin ((lambda () (define p (cons 1 2)) (set-cdr! p 3) p))) (if (equal? '(1 . 3) val) (format #t " Running ~d/~d" 261 743) (begin (add-error '((lambda () (define p (cons 1 2)) (set-cdr! p 3) p)) '(1 . 3) val))))
(display "")(let1 val (begin ((lambda () (define q (cons 1 2)) (set-car! q 3) q))) (if (equal? '(3 . 2) val) (format #t " Running ~d/~d" 262 743) (begin (add-error '((lambda () (define q (cons 1 2)) (set-car! q 3) q)) '(3 . 2) val))))
(display "")(let1 val (begin (begin #f #t)) (if (equal? '#t val) (format #t " Running ~d/~d" 263 743) (begin (add-error '(begin #f #t) '#t val))))
(display "")(let1 val (begin (vector-length (make-vector 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 264 743) (begin (add-error '(vector-length (make-vector 3)) '3 val))))
(display "")(let1 val (begin (let loop ((i 0)) (if (= i 100) (+ i 1) (loop (+ i 1))))) (if (equal? '101 val) (format #t " Running ~d/~d" 265 743) (begin (add-error '(let loop ((i 0)) (if (= i 100) (+ i 1) (loop (+ i 1)))) '101 val))))
(display "")(let1 val (begin ((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) (cont #f) 3)) '())) (if (equal? '3 val) (format #t " Running ~d/~d" 266 743) (begin (add-error '((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) (cont #f) 3)) '()) '3 val))))
(display "")(let1 val (begin ((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) ((lambda () ((lambda () (cont #f))))) 102)) '())) (if (equal? '102 val) (format #t " Running ~d/~d" 267 743) (begin (add-error '((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) ((lambda () ((lambda () (cont #f))))) 102)) '()) '102 val))))
(display "")(let1 val (begin (let ((a 0)) (cond (#t (set! a (+ a 1)) (set! a (+ a 1)) a)))) (if (equal? '2 val) (format #t " Running ~d/~d" 268 743) (begin (add-error '(let ((a 0)) (cond (#t (set! a (+ a 1)) (set! a (+ a 1)) a))) '2 val))))
(display "")(let1 val (begin (char? #\あ)) (if (equal? '#t val) (format #t " Running ~d/~d" 269 743) (begin (add-error '(char? #\あ) '#t val))))
(display "")(let1 val (begin (eq? (list 'a) (list 'a))) (if (equal? '#f val) (format #t " Running ~d/~d" 270 743) (begin (add-error '(eq? (list 'a) (list 'a)) '#f val))))
(display "")(let1 val (begin (let ((x (list 'a))) (eq? x x))) (if (equal? '#t val) (format #t " Running ~d/~d" 271 743) (begin (add-error '(let ((x (list 'a))) (eq? x x)) '#t val))))
(display "")(let1 val (begin (map1 (lambda (s) (string-append s "123")) '("ABC" "DEF"))) (if (equal? '("ABC123" "DEF123") val) (format #t " Running ~d/~d" 272 743) (begin (add-error '(map1 (lambda (s) (string-append s "123")) '("ABC" "DEF")) '("ABC123" "DEF123") val))))
(display "")(let1 val (begin (map (lambda (s) (string-append s "123")) '("ABC" "DEF"))) (if (equal? '("ABC123" "DEF123") val) (format #t " Running ~d/~d" 273 743) (begin (add-error '(map (lambda (s) (string-append s "123")) '("ABC" "DEF")) '("ABC123" "DEF123") val))))
(display "")(let1 val (begin (map (lambda (a b) (string-append a b)) '("ABC" "DEF") '("GHI" "JKL"))) (if (equal? '("ABCGHI" "DEFJKL") val) (format #t " Running ~d/~d" 274 743) (begin (add-error '(map (lambda (a b) (string-append a b)) '("ABC" "DEF") '("GHI" "JKL")) '("ABCGHI" "DEFJKL") val))))
(display "")(let1 val (begin (map (lambda (a b) (* a b)) '(1 2 3) '(4 5 6))) (if (equal? '(4 10 18) val) (format #t " Running ~d/~d" 275 743) (begin (add-error '(map (lambda (a b) (* a b)) '(1 2 3) '(4 5 6)) '(4 10 18) val))))
(display "")(let1 val (begin (let1 a '() (let1 G68 (lambda (i) (if (>= i 10000) i (a (+ i 1)))) (set! a G68) (a 0)))) (if (equal? '10000 val) (format #t " Running ~d/~d" 276 743) (begin (add-error '(let1 a '() (let1 G68 (lambda (i) (if (>= i 10000) i (a (+ i 1)))) (set! a G68) (a 0))) '10000 val))))
(display "")(let1 val (begin `(list ,(+ 1 2) 4)) (if (equal? '(list 3 4) val) (format #t " Running ~d/~d" 277 743) (begin (add-error '`(list ,(+ 1 2) 4) '(list 3 4) val))))
(display "")(let1 val (begin (let ((name 'a)) `(list ,name ',name))) (if (equal? '(list a 'a) val) (format #t " Running ~d/~d" 278 743) (begin (add-error '(let ((name 'a)) `(list ,name ',name)) '(list a 'a) val))))
(display "")(let1 val (begin `(a ,(+ 1 2) ,@(map abs '(4 -5 6)) b)) (if (equal? '(a 3 4 5 6 b) val) (format #t " Running ~d/~d" 279 743) (begin (add-error '`(a ,(+ 1 2) ,@(map abs '(4 -5 6)) b) '(a 3 4 5 6 b) val))))
(display "")(let1 val (begin (vector? #(3))) (if (equal? '#t val) (format #t " Running ~d/~d" 280 743) (begin (add-error '(vector? #(3)) '#t val))))
(display "")(let1 val (begin (begin (define (proc-01) 3) (proc-01))) (if (equal? '3 val) (format #t " Running ~d/~d" 281 743) (begin (add-error '(begin (define (proc-01) 3) (proc-01)) '3 val))))
(display "")(let1 val (begin (begin (define (add3 a b) (+ a b)) (add3 1 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 282 743) (begin (add-error '(begin (define (add3 a b) (+ a b)) (add3 1 2)) '3 val))))
(display "")(let1 val (begin (begin (define add2 (lambda (a b) (+ a b))) (add2 1 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 283 743) (begin (add-error '(begin (define add2 (lambda (a b) (+ a b))) (add2 1 2)) '3 val))))
(display "")(let1 val (begin (begin (define z (make-vector 2)) (vector-set! z 0 1) (vector-set! z 1 2) (make-vector 3) (null? 3) (vector-set! z 1 3) (vector-ref z 1))) (if (equal? '3 val) (format #t " Running ~d/~d" 284 743) (begin (add-error '(begin (define z (make-vector 2)) (vector-set! z 0 1) (vector-set! z 1 2) (make-vector 3) (null? 3) (vector-set! z 1 3) (vector-ref z 1)) '3 val))))
(display "")(let1 val (begin (begin (define (proc-2) (define (rec) 3) (rec)) (proc-2))) (if (equal? '3 val) (format #t " Running ~d/~d" 285 743) (begin (add-error '(begin (define (proc-2) (define (rec) 3) (rec)) (proc-2)) '3 val))))
(display "")(let1 val (begin (begin (define (func2) (define val 4) val) (func2))) (if (equal? '4 val) (format #t " Running ~d/~d" 286 743) (begin (add-error '(begin (define (func2) (define val 4) val) (func2)) '4 val))))
(display "")(let1 val (begin (if (values 1 2 3) #t #f)) (if (equal? '#t val) (format #t " Running ~d/~d" 287 743) (begin (add-error '(if (values 1 2 3) #t #f) '#t val))))
(display "")(let1 val (begin (call-with-values (lambda () (values 4 5)) (lambda (a b) b))) (if (equal? '5 val) (format #t " Running ~d/~d" 288 743) (begin (add-error '(call-with-values (lambda () (values 4 5)) (lambda (a b) b)) '5 val))))
(display "")(let1 val (begin (call-with-values (lambda () (values 1 2 3)) (lambda (a b c) (+ a b c)))) (if (equal? '6 val) (format #t " Running ~d/~d" 289 743) (begin (add-error '(call-with-values (lambda () (values 1 2 3)) (lambda (a b c) (+ a b c))) '6 val))))
(display "")(let1 val (begin (call-with-values (lambda () (values 1 2 3)) list)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 290 743) (begin (add-error '(call-with-values (lambda () (values 1 2 3)) list) '(1 2 3) val))))
(display "")(let1 val (begin (call-with-values (lambda () 1) (lambda (x) (+ x 1234)))) (if (equal? '1235 val) (format #t " Running ~d/~d" 291 743) (begin (add-error '(call-with-values (lambda () 1) (lambda (x) (+ x 1234))) '1235 val))))
(display "")(let1 val (begin (receive (a b c) (values 1 2 3) (+ a b c))) (if (equal? '6 val) (format #t " Running ~d/~d" 292 743) (add-error '(receive (a b c) (values 1 2 3) (+ a b c)) '6 val)))(display "")(let1 val (begin (receive z (values 'x 'y) z)) (if (equal? '(x y) val) (format #t " Running ~d/~d" 293 743) (add-error '(receive z (values 'x 'y) z) '(x y) val)))(display "")(let1 val (begin (receive (a . b) (values 'x 'y 'z) b)) (if (equal? '(y z) val) (format #t " Running ~d/~d" 294 743) (add-error '(receive (a . b) (values 'x 'y 'z) b) '(y z) val)))(display "")(let1 val (begin (receive (a . b) (values 'x 'y 'z) a)) (if (equal? 'x val) (format #t " Running ~d/~d" 295 743) (add-error '(receive (a . b) (values 'x 'y 'z) a) 'x val)))(display "")(let1 val (begin (receive x (apply values '(1 2 3)) x)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 296 743) (add-error '(receive x (apply values '(1 2 3)) x) '(1 2 3) val)))(display "")(let1 val (begin (call-with-values (lambda () (values 1 2)) cons)) (if (equal? '(1 . 2) val) (format #t " Running ~d/~d" 297 743) (add-error '(call-with-values (lambda () (values 1 2)) cons) '(1 . 2) val)))(display "")(let1 val (begin (receive (port proc) (open-string-output-port) (display "hige" port) (display "pon" port) (proc))) (if (equal? '"higepon" val) (format #t " Running ~d/~d" 298 743) (add-error '(receive (port proc) (open-string-output-port) (display "hige" port) (display "pon" port) (proc)) '"higepon" val)))(display "")(let1 val (begin (call-with-string-output-port (lambda (port) (write "string" port)))) (if (equal? '"\"string\"" val) (format #t " Running ~d/~d" 299 743) (begin (add-error '(call-with-string-output-port (lambda (port) (write "string" port))) '"\"string\"" val))))
(display "")(let1 val (begin (regexp-replace #/abc/ "123abc456" "ABC")) (if (equal? '"123ABC456" val) (format #t " Running ~d/~d" 300 743) (begin (add-error '(regexp-replace #/abc/ "123abc456" "ABC") '"123ABC456" val))))
(display "")(let1 val (begin (cons 'a '())) (if (equal? '(a) val) (format #t " Running ~d/~d" 301 743) (begin (add-error '(cons 'a '()) '(a) val))))
(display "")(let1 val (begin (cons '(a) '(b c d))) (if (equal? '((a) b c d) val) (format #t " Running ~d/~d" 302 743) (begin (add-error '(cons '(a) '(b c d)) '((a) b c d) val))))
(display "")(let1 val (begin (cons "a" '(b c))) (if (equal? '("a" b c) val) (format #t " Running ~d/~d" 303 743) (begin (add-error '(cons "a" '(b c)) '("a" b c) val))))
(display "")(let1 val (begin (cons 'a 3)) (if (equal? '(a . 3) val) (format #t " Running ~d/~d" 304 743) (begin (add-error '(cons 'a 3) '(a . 3) val))))
(display "")(let1 val (begin (cons '(a b) 'c)) (if (equal? '((a b) . c) val) (format #t " Running ~d/~d" 305 743) (begin (add-error '(cons '(a b) 'c) '((a b) . c) val))))
(display "")(let1 val (begin (car '(a b c))) (if (equal? 'a val) (format #t " Running ~d/~d" 306 743) (begin (add-error '(car '(a b c)) 'a val))))
(display "")(let1 val (begin (car '((a) b c d))) (if (equal? '(a) val) (format #t " Running ~d/~d" 307 743) (begin (add-error '(car '((a) b c d)) '(a) val))))
(display "")(let1 val (begin (car '(1 . 2))) (if (equal? '1 val) (format #t " Running ~d/~d" 308 743) (begin (add-error '(car '(1 . 2)) '1 val))))
(display "")(let1 val (begin (cdr '((a) b c d))) (if (equal? '(b c d) val) (format #t " Running ~d/~d" 309 743) (begin (add-error '(cdr '((a) b c d)) '(b c d) val))))
(display "")(let1 val (begin (cdr '(1 . 2))) (if (equal? '2 val) (format #t " Running ~d/~d" 310 743) (begin (add-error '(cdr '(1 . 2)) '2 val))))
(display "")(let1 val (begin (reverse '(a b c))) (if (equal? '(c b a) val) (format #t " Running ~d/~d" 311 743) (begin (add-error '(reverse '(a b c)) '(c b a) val))))
(display "")(let1 val (begin (reverse '(a (b c) d (e (f))))) (if (equal? '((e (f)) d (b c) a) val) (format #t " Running ~d/~d" 312 743) (begin (add-error '(reverse '(a (b c) d (e (f)))) '((e (f)) d (b c) a) val))))
(display "")(let1 val (begin (equal? 'a 'a)) (if (equal? '#t val) (format #t " Running ~d/~d" 313 743) (begin (add-error '(equal? 'a 'a) '#t val))))
(display "")(let1 val (begin (equal? '(a) '(a))) (if (equal? '#t val) (format #t " Running ~d/~d" 314 743) (begin (add-error '(equal? '(a) '(a)) '#t val))))
(display "")(let1 val (begin (equal? '(a (b) c) '(a (b) c))) (if (equal? '#t val) (format #t " Running ~d/~d" 315 743) (begin (add-error '(equal? '(a (b) c) '(a (b) c)) '#t val))))
(display "")(let1 val (begin (equal? "abc" "abc")) (if (equal? '#t val) (format #t " Running ~d/~d" 316 743) (begin (add-error '(equal? "abc" "abc") '#t val))))
(display "")(let1 val (begin (equal? 2 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 317 743) (begin (add-error '(equal? 2 2) '#t val))))
(display "")(let1 val (begin (equal? (make-vector 5 'a) (make-vector 5 'a))) (if (equal? '#t val) (format #t " Running ~d/~d" 318 743) (begin (add-error '(equal? (make-vector 5 'a) (make-vector 5 'a)) '#t val))))
(display "")(let1 val (begin (eq? 'a 'a)) (if (equal? '#t val) (format #t " Running ~d/~d" 319 743) (begin (add-error '(eq? 'a 'a) '#t val))))
(display "")(let1 val (begin (eq? '(a) '(a))) (if (equal? '#f val) (format #t " Running ~d/~d" 320 743) (begin (add-error '(eq? '(a) '(a)) '#f val))))
(display "")(let1 val (begin (eq? (list 'a) (list 'a))) (if (equal? '#f val) (format #t " Running ~d/~d" 321 743) (add-error '(eq? (list 'a) (list 'a)) '#f val)))(display "")(let1 val (begin (eq? "a" "a")) (if (equal? '#f val) (format #t " Running ~d/~d" 322 743) (begin (add-error '(eq? "a" "a") '#f val))))
(display "")(let1 val (begin (eq? "" "")) (if (equal? '#f val) (format #t " Running ~d/~d" 323 743) (begin (add-error '(eq? "" "") '#f val))))
(display "")(let1 val (begin (eq? '() '())) (if (equal? '#t val) (format #t " Running ~d/~d" 324 743) (begin (add-error '(eq? '() '()) '#t val))))
(display "")(let1 val (begin (eq? 2 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 325 743) (begin (add-error '(eq? 2 2) '#t val))))
(display "")(let1 val (begin (eq? #\A #\A)) (if (equal? '#t val) (format #t " Running ~d/~d" 326 743) (begin (add-error '(eq? #\A #\A) '#t val))))
(display "")(let1 val (begin (eq? car car)) (if (equal? '#t val) (format #t " Running ~d/~d" 327 743) (begin (add-error '(eq? car car) '#t val))))
(display "")(let1 val (begin (let ((n (+ 2 3))) (eq? n n))) (if (equal? '#t val) (format #t " Running ~d/~d" 328 743) (begin (add-error '(let ((n (+ 2 3))) (eq? n n)) '#t val))))
(display "")(let1 val (begin (let ((x '(a))) (eq? x x))) (if (equal? '#t val) (format #t " Running ~d/~d" 329 743) (begin (add-error '(let ((x '(a))) (eq? x x)) '#t val))))
(display "")(let1 val (begin (let ((x '#())) (eq? x x))) (if (equal? '#t val) (format #t " Running ~d/~d" 330 743) (begin (add-error '(let ((x '#())) (eq? x x)) '#t val))))
(display "")(let1 val (begin (let ((p (lambda (x) x))) (eq? p p))) (if (equal? '#t val) (format #t " Running ~d/~d" 331 743) (begin (add-error '(let ((p (lambda (x) x))) (eq? p p)) '#t val))))
(display "")(let1 val (begin (- 3 4)) (if (equal? '-1 val) (format #t " Running ~d/~d" 332 743) (begin (add-error '(- 3 4) '-1 val))))
(display "")(let1 val (begin (- 3 4 5)) (if (equal? '-6 val) (format #t " Running ~d/~d" 333 743) (begin (add-error '(- 3 4 5) '-6 val))))
(display "")(let1 val (begin (- 3)) (if (equal? '-3 val) (format #t " Running ~d/~d" 334 743) (begin (add-error '(- 3) '-3 val))))
(display "")(let1 val (begin (cond ((> 3 2) 'greater) ((< 3 2) 'less))) (if (equal? 'greater val) (format #t " Running ~d/~d" 335 743) (begin (add-error '(cond ((> 3 2) 'greater) ((< 3 2) 'less)) 'greater val))))
(display "")(let1 val (begin (cond ((> 3 3) 'greater) ((< 3 3) 'less) (else 'equal))) (if (equal? 'equal val) (format #t " Running ~d/~d" 336 743) (begin (add-error '(cond ((> 3 3) 'greater) ((< 3 3) 'less) (else 'equal)) 'equal val))))
(display "")(let1 val (begin (cond ('(1 2 3) => cadr) (else #f))) (if (equal? '2 val) (format #t " Running ~d/~d" 337 743) (begin (add-error '(cond ('(1 2 3) => cadr) (else #f)) '2 val))))
(display "")(let1 val (begin (do ((vec (make-vector 5)) (i 0 (+ i 1))) ((= i 5) vec) (vector-set! vec i i))) (if (equal? '#(0 1 2 3 4) val) (format #t " Running ~d/~d" 338 743) (add-error '(do ((vec (make-vector 5)) (i 0 (+ i 1))) ((= i 5) vec) (vector-set! vec i i)) '#(0 1 2 3 4) val)))(display "")(let1 val (begin (let ((x '(1 3 5 7 9))) (do ((x x (cdr x)) (sum 0 (+ sum (car x)))) ((null? x) sum)))) (if (equal? '25 val) (format #t " Running ~d/~d" 339 743) (add-error '(let ((x '(1 3 5 7 9))) (do ((x x (cdr x)) (sum 0 (+ sum (car x)))) ((null? x) sum))) '25 val)))(display "")(let1 val (begin (let ((vec (vector 0 '(2 2 2 2) "Anna"))) (vector-set! vec 1 '("Sue" "Sue")) vec)) (if (equal? '#(0 ("Sue" "Sue") "Anna") val) (format #t " Running ~d/~d" 340 743) (begin (add-error '(let ((vec (vector 0 '(2 2 2 2) "Anna"))) (vector-set! vec 1 '("Sue" "Sue")) vec) '#(0 ("Sue" "Sue") "Anna") val))))
(display "")(let1 val (begin (vector-ref '#(1 1 2 3 5 8 13 21) 5)) (if (equal? '8 val) (format #t " Running ~d/~d" 341 743) (begin (add-error '(vector-ref '#(1 1 2 3 5 8 13 21) 5) '8 val))))
(display "")(let1 val (begin (or (= 2 2) (> 2 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 342 743) (begin (add-error '(or (= 2 2) (> 2 1)) '#t val))))
(display "")(let1 val (begin (or (= 2 2) (< 2 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 343 743) (begin (add-error '(or (= 2 2) (< 2 1)) '#t val))))
(display "")(let1 val (begin (or #f #f #f)) (if (equal? '#f val) (format #t " Running ~d/~d" 344 743) (begin (add-error '(or #f #f #f) '#f val))))
(display "")(let1 val (begin (or '(b c) (/ 3 0))) (if (equal? '(b c) val) (format #t " Running ~d/~d" 345 743) (begin (add-error '(or '(b c) (/ 3 0)) '(b c) val))))
(display "")(let1 val (begin (not #t)) (if (equal? '#f val) (format #t " Running ~d/~d" 346 743) (begin (add-error '(not #t) '#f val))))
(display "")(let1 val (begin (not 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 347 743) (begin (add-error '(not 3) '#f val))))
(display "")(let1 val (begin (not (list 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 348 743) (add-error '(not (list 3)) '#f val)))(display "")(let1 val (begin (not #f)) (if (equal? '#t val) (format #t " Running ~d/~d" 349 743) (begin (add-error '(not #f) '#t val))))
(display "")(let1 val (begin (not '())) (if (equal? '#f val) (format #t " Running ~d/~d" 350 743) (begin (add-error '(not '()) '#f val))))
(display "")(let1 val (begin (not (list))) (if (equal? '#f val) (format #t " Running ~d/~d" 351 743) (add-error '(not (list)) '#f val)))(display "")(let1 val (begin (not 'nil)) (if (equal? '#f val) (format #t " Running ~d/~d" 352 743) (begin (add-error '(not 'nil) '#f val))))
(display "")(let1 val (begin (let ((x 2) (y 3)) (* x y))) (if (equal? '6 val) (format #t " Running ~d/~d" 353 743) (begin (add-error '(let ((x 2) (y 3)) (* x y)) '6 val))))
(display "")(let1 val (begin (let ((x 2) (y 3)) (let ((x 7) (z (+ x y))) (* z x)))) (if (equal? '35 val) (format #t " Running ~d/~d" 354 743) (begin (add-error '(let ((x 2) (y 3)) (let ((x 7) (z (+ x y))) (* z x))) '35 val))))
(display "")(let1 val (begin (let ((x 2) (y 3)) (let* ((x 7) (z (+ x y))) (* z x)))) (if (equal? '70 val) (format #t " Running ~d/~d" 355 743) (begin (add-error '(let ((x 2) (y 3)) (let* ((x 7) (z (+ x y))) (* z x))) '70 val))))
(display "")(let1 val (begin (eqv? 'a 'a)) (if (equal? '#t val) (format #t " Running ~d/~d" 356 743) (begin (add-error '(eqv? 'a 'a) '#t val))))
(display "")(let1 val (begin (eqv? 'a 'b)) (if (equal? '#f val) (format #t " Running ~d/~d" 357 743) (begin (add-error '(eqv? 'a 'b) '#f val))))
(display "")(let1 val (begin (eqv? 2 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 358 743) (begin (add-error '(eqv? 2 2) '#t val))))
(display "")(let1 val (begin (eqv? '() '())) (if (equal? '#t val) (format #t " Running ~d/~d" 359 743) (begin (add-error '(eqv? '() '()) '#t val))))
(display "")(let1 val (begin (eqv? 100000000 100000000)) (if (equal? '#t val) (format #t " Running ~d/~d" 360 743) (begin (add-error '(eqv? 100000000 100000000) '#t val))))
(display "")(let1 val (begin (eqv? (cons 1 2) (cons 1 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 361 743) (begin (add-error '(eqv? (cons 1 2) (cons 1 2)) '#f val))))
(display "")(let1 val (begin (eqv? (lambda () 1) (lambda () 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 362 743) (begin (add-error '(eqv? (lambda () 1) (lambda () 2)) '#f val))))
(display "")(let1 val (begin (eqv? #f 'nil)) (if (equal? '#f val) (format #t " Running ~d/~d" 363 743) (begin (add-error '(eqv? #f 'nil) '#f val))))
(display "")(let1 val (begin (define (foo n) (let loop ((n n)) (cond ((null? n)) (else (loop (cdr n)))))) (and (foo '()) (foo '(1 2 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 364 743) (begin (add-error '(define (foo n) (let loop ((n n)) (cond ((null? n)) (else (loop (cdr n)))))) '#t val))))
(display "")(let1 val (begin (digit->integer #\3 10)) (if (equal? '3 val) (format #t " Running ~d/~d" 365 743) (begin (add-error '(digit->integer #\3 10) '3 val))))
(display "")(let1 val (begin (+)) (if (equal? '0 val) (format #t " Running ~d/~d" 366 743) (begin (add-error '(+) '0 val))))
(display "")(let1 val (begin (*)) (if (equal? '1 val) (format #t " Running ~d/~d" 367 743) (begin (add-error '(*) '1 val))))
(display "")(let1 val (begin (apply (lambda (a b c) (+ a b c)) 1 2 '(3))) (if (equal? '6 val) (format #t " Running ~d/~d" 368 743) (begin (add-error '(apply (lambda (a b c) (+ a b c)) 1 2 '(3)) '6 val))))
(display "")(let1 val (begin (apply (lambda (a b c) (+ a b c)) '(1 2 3))) (if (equal? '6 val) (format #t " Running ~d/~d" 369 743) (begin (add-error '(apply (lambda (a b c) (+ a b c)) '(1 2 3)) '6 val))))
(display "")(let1 val (begin (apply (lambda (a b c) (+ a b c)) 1 '(2 3))) (if (equal? '6 val) (format #t " Running ~d/~d" 370 743) (begin (add-error '(apply (lambda (a b c) (+ a b c)) 1 '(2 3)) '6 val))))
(display "")(let1 val (begin (apply (lambda (x y) (apply y '((3 2)))) `(,car ,cdr))) (if (equal? '(2) val) (format #t " Running ~d/~d" 371 743) (begin (add-error '(apply (lambda (x y) (apply y '((3 2)))) `(,car ,cdr)) '(2) val))))
(display "")(let1 val (begin (/ 6 2)) (if (equal? '3 val) (format #t " Running ~d/~d" 372 743) (begin (add-error '(/ 6 2) '3 val))))
(display "")(let1 val (begin (mod 23 10)) (if (equal? '3 val) (format #t " Running ~d/~d" 373 743) (add-error '(mod 23 10) '3 val)))(display "")(let1 val (begin (even? 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 374 743) (add-error '(even? 2) '#t val)))(display "")(let1 val (begin (even? 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 375 743) (add-error '(even? 3) '#f val)))(display "")(let1 val (begin (for-all even? '(3 1 4 1 5 9))) (if (equal? '#f val) (format #t " Running ~d/~d" 376 743) (add-error '(for-all even? '(3 1 4 1 5 9)) '#f val)))(display "")(let1 val (begin (for-all even? '(3 1 4 1 5 9 . 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 377 743) (add-error '(for-all even? '(3 1 4 1 5 9 . 2)) '#f val)))(display "")(let1 val (begin (for-all even? '(2 4 14))) (if (equal? '#t val) (format #t " Running ~d/~d" 378 743) (add-error '(for-all even? '(2 4 14)) '#t val)))(display "")(let1 val (begin (for-all (lambda (a b) (< a b)) '(1 2 3) '(2 3 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 379 743) (add-error '(for-all (lambda (a b) (< a b)) '(1 2 3) '(2 3 4)) '#t val)))(display "")(let1 val (begin (for-all (lambda (a b) (< a b)) '(1 2 4) '(2 3 4))) (if (equal? '#f val) (format #t " Running ~d/~d" 380 743) (add-error '(for-all (lambda (a b) (< a b)) '(1 2 4) '(2 3 4)) '#f val)))(display "")(let1 val (begin (+ (/ 2) (/ 4) (/ 4))) (if (equal? '1 val) (format #t " Running ~d/~d" 381 743) (add-error '(+ (/ 2) (/ 4) (/ 4)) '1 val)))(display "")(let1 val (begin (- (/ 1 2) (/ 1 4) (/ 1 4))) (if (equal? '0 val) (format #t " Running ~d/~d" 382 743) (add-error '(- (/ 1 2) (/ 1 4) (/ 1 4)) '0 val)))(display "")(let1 val (begin (= (/ 3 2) (+ (/ 1 2) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 383 743) (add-error '(= (/ 3 2) (+ (/ 1 2) 1)) '#t val)))(display "")(let1 val (begin (= (/ 5 2) (+ 1 (/ 1 2) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 384 743) (add-error '(= (/ 5 2) (+ 1 (/ 1 2) 1)) '#t val)))(display "")(let1 val (begin (= (/ 3 2) (- 3 (/ 1 2) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 385 743) (add-error '(= (/ 3 2) (- 3 (/ 1 2) 1)) '#t val)))(display "")(let1 val (begin (* (/ 3 2) 2)) (if (equal? '3 val) (format #t " Running ~d/~d" 386 743) (add-error '(* (/ 3 2) 2) '3 val)))(display "")(let1 val (begin (* 2 (/ 3 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 387 743) (add-error '(* 2 (/ 3 2)) '3 val)))(display "")(let1 val (begin (* (/ 4 2) (/ 3 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 388 743) (add-error '(* (/ 4 2) (/ 3 2)) '3 val)))(display "")(let1 val (begin (/ (/ 2 2) (/ 1 2))) (if (equal? '2 val) (format #t " Running ~d/~d" 389 743) (add-error '(/ (/ 2 2) (/ 1 2)) '2 val)))(display "")(let1 val (begin (/ (/ 4 2) 1)) (if (equal? '2 val) (format #t " Running ~d/~d" 390 743) (add-error '(/ (/ 4 2) 1) '2 val)))(display "")(if (equal? 'error (guard (con (#t 'error)) (/ 1 0))) (format #t " Running ~d/~d" 391 743) (add-error '(/ 1 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (/ 1 (* 0 (/ 1 2))))) (format #t " Running ~d/~d" 392 743) (add-error '(/ 1 (* 0 (/ 1 2))) 'error val))(display "")(let1 val (begin (> 1 (/ 1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 393 743) (add-error '(> 1 (/ 1 2)) '#t val)))(display "")(let1 val (begin (> (/ 1 2) 1)) (if (equal? '#f val) (format #t " Running ~d/~d" 394 743) (add-error '(> (/ 1 2) 1) '#f val)))(display "")(let1 val (begin (> 1 (/ 1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 395 743) (add-error '(> 1 (/ 1 2)) '#t val)))(display "")(let1 val (begin (> (/ 1 2) (/ 1 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 396 743) (add-error '(> (/ 1 2) (/ 1 3)) '#t val)))(display "")(let1 val (begin (<= (/ 1 2) 1)) (if (equal? '#t val) (format #t " Running ~d/~d" 397 743) (add-error '(<= (/ 1 2) 1) '#t val)))(display "")(let1 val (begin (>= 1 (/ 1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 398 743) (add-error '(>= 1 (/ 1 2)) '#t val)))(display "")(let1 val (begin (>= (/ 1 2) (/ 1 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 399 743) (add-error '(>= (/ 1 2) (/ 1 3)) '#t val)))(display "")(let1 val (begin (< (/ 1 2) 1)) (if (equal? '#t val) (format #t " Running ~d/~d" 400 743) (add-error '(< (/ 1 2) 1) '#t val)))(display "")(let1 val (begin (< 1 (/ 1 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 401 743) (add-error '(< 1 (/ 1 2)) '#f val)))(display "")(let1 val (begin (< (/ 1 2) (/ 1 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 402 743) (add-error '(< (/ 1 2) (/ 1 3)) '#f val)))(display "")(let1 val (begin (<= (/ 1 2) 1)) (if (equal? '#t val) (format #t " Running ~d/~d" 403 743) (add-error '(<= (/ 1 2) 1) '#t val)))(display "")(let1 val (begin (<= 1 (/ 1 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 404 743) (add-error '(<= 1 (/ 1 2)) '#f val)))(display "")(let1 val (begin (<= (/ 1 2) (/ 1 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 405 743) (add-error '(<= (/ 1 2) (/ 1 3)) '#f val)))(display "")(let1 val (begin (= (/ 2 2) 1)) (if (equal? '#t val) (format #t " Running ~d/~d" 406 743) (add-error '(= (/ 2 2) 1) '#t val)))(display "")(let1 val (begin (= 1 (/ 2 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 407 743) (add-error '(= 1 (/ 2 2)) '#t val)))(display "")(let1 val (begin (= (/ 1 2) (/ 2 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 408 743) (add-error '(= (/ 1 2) (/ 2 4)) '#t val)))(display "")(let1 val (begin (>= (/ 1 2) (inexact (/ 1 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 409 743) (add-error '(>= (/ 1 2) (inexact (/ 1 3))) '#t val)))(display "")(let1 val (begin (> (/ 3 2) (+ (inexact (/ 1 3)) (inexact (/ 1 3)) (inexact (/ 1 3))) (/ 99 100))) (if (equal? '#t val) (format #t " Running ~d/~d" 410 743) (add-error '(> (/ 3 2) (+ (inexact (/ 1 3)) (inexact (/ 1 3)) (inexact (/ 1 3))) (/ 99 100)) '#t val)))(display "")(let1 val (begin (> 1 (/ (inexact 98) 100) (/ 97 100))) (if (equal? '#t val) (format #t " Running ~d/~d" 411 743) (add-error '(> 1 (/ (inexact 98) 100) (/ 97 100)) '#t val)))(display "")(let1 val (begin (rational? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 412 743) (add-error '(rational? 3) '#t val)))(display "")(let1 val (begin (rational? (/ 1 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 413 743) (add-error '(rational? (/ 1 4)) '#t val)))(display "")(let1 val (begin (rational? (/ (/ 1 2) (+ (greatest-fixnum) 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 414 743) (add-error '(rational? (/ (/ 1 2) (+ (greatest-fixnum) 1))) '#t val)))(display "")(let1 val (begin (flonum? (/ (inexact (/ 1 3)) (+ (greatest-fixnum) 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 415 743) (add-error '(flonum? (/ (inexact (/ 1 3)) (+ (greatest-fixnum) 1))) '#t val)))(display "")(let1 val (begin (= (/ (+ (greatest-fixnum) 1) 1) (+ (greatest-fixnum) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 416 743) (add-error '(= (/ (+ (greatest-fixnum) 1) 1) (+ (greatest-fixnum) 1)) '#t val)))(display "")(let1 val (begin (rational? (/ (+ (greatest-fixnum) 1) (/ 1 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 417 743) (add-error '(rational? (/ (+ (greatest-fixnum) 1) (/ 1 3))) '#t val)))(display "")(let1 val (begin (flonum? (/ (+ (greatest-fixnum) 1) (inexact (/ 1 3))))) (if (equal? '#t val) (format #t " Running ~d/~d" 418 743) (add-error '(flonum? (/ (+ (greatest-fixnum) 1) (inexact (/ 1 3)))) '#t val)))(display "")(let1 val (begin (/ (+ (greatest-fixnum) 1) (+ (greatest-fixnum) 1))) (if (equal? '1 val) (format #t " Running ~d/~d" 419 743) (add-error '(/ (+ (greatest-fixnum) 1) (+ (greatest-fixnum) 1)) '1 val)))(display "")(let1 val (begin (fixnum? (/ (+ (greatest-fixnum) 1) (+ (greatest-fixnum) 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 420 743) (add-error '(fixnum? (/ (+ (greatest-fixnum) 1) (+ (greatest-fixnum) 1))) '#t val)))(display "")(let1 val (begin (fixnum? (least-fixnum))) (if (equal? '#t val) (format #t " Running ~d/~d" 421 743) (begin (add-error '(fixnum? (least-fixnum)) '#t val))))
(display "")(let1 val (begin (fixnum? (greatest-fixnum))) (if (equal? '#t val) (format #t " Running ~d/~d" 422 743) (begin (add-error '(fixnum? (greatest-fixnum)) '#t val))))
(display "")(let1 val (begin (fixnum? (+ (greatest-fixnum) 1))) (if (equal? '#f val) (format #t " Running ~d/~d" 423 743) (begin (add-error '(fixnum? (+ (greatest-fixnum) 1)) '#f val))))
(display "")(let1 val (begin (fixnum? (- (least-fixnum) 1))) (if (equal? '#f val) (format #t " Running ~d/~d" 424 743) (begin (add-error '(fixnum? (- (least-fixnum) 1)) '#f val))))
(display "")(let1 val (begin (number? (+ (greatest-fixnum) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 425 743) (begin (add-error '(number? (+ (greatest-fixnum) 1)) '#t val))))
(display "")(let1 val (begin (number? (- (least-fixnum) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 426 743) (begin (add-error '(number? (- (least-fixnum) 1)) '#t val))))
(display "")(let1 val (begin (> (+ (greatest-fixnum) 1) (greatest-fixnum))) (if (equal? '#t val) (format #t " Running ~d/~d" 427 743) (begin (add-error '(> (+ (greatest-fixnum) 1) (greatest-fixnum)) '#t val))))
(display "")(let1 val (begin (< (- (least-fixnum) 1) (least-fixnum))) (if (equal? '#t val) (format #t " Running ~d/~d" 428 743) (begin (add-error '(< (- (least-fixnum) 1) (least-fixnum)) '#t val))))
(display "")(let1 val (begin (fixnum? (- (+ (greatest-fixnum) 1) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 429 743) (begin (add-error '(fixnum? (- (+ (greatest-fixnum) 1) 1)) '#t val))))
(display "")(let1 val (begin (fixnum? (+ (- (least-fixnum) 1) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 430 743) (begin (add-error '(fixnum? (+ (- (least-fixnum) 1) 1)) '#t val))))
(display "")(let1 val (begin (number? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 431 743) (add-error '(number? 3) '#t val)))(display "")(let1 val (begin (number? (/ 1 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 432 743) (add-error '(number? (/ 1 4)) '#t val)))(display "")(let1 val (begin (mod 123 10)) (if (equal? '3 val) (format #t " Running ~d/~d" 433 743) (add-error '(mod 123 10) '3 val)))(display "")(let1 val (begin (mod 123 -10)) (if (equal? '3 val) (format #t " Running ~d/~d" 434 743) (add-error '(mod 123 -10) '3 val)))(display "")(let1 val (begin (mod -123 10)) (if (equal? '7 val) (format #t " Running ~d/~d" 435 743) (add-error '(mod -123 10) '7 val)))(display "")(let1 val (begin (mod -123 -10)) (if (equal? '7 val) (format #t " Running ~d/~d" 436 743) (add-error '(mod -123 -10) '7 val)))(display "")(let1 val (begin (div 123 10)) (if (equal? '12 val) (format #t " Running ~d/~d" 437 743) (add-error '(div 123 10) '12 val)))(display "")(let1 val (begin (div 123 -10)) (if (equal? '-12 val) (format #t " Running ~d/~d" 438 743) (add-error '(div 123 -10) '-12 val)))(display "")(let1 val (begin (div -123 10)) (if (equal? '-13 val) (format #t " Running ~d/~d" 439 743) (add-error '(div -123 10) '-13 val)))(display "")(let1 val (begin (div -123 -10)) (if (equal? '13 val) (format #t " Running ~d/~d" 440 743) (add-error '(div -123 -10) '13 val)))(display "")(let1 val (begin (string-ref "abc" 2)) (if (equal? '#\c val) (format #t " Running ~d/~d" 441 743) (begin (add-error '(string-ref "abc" 2) '#\c val))))
(display "")(let1 val (begin (list? '(a b c))) (if (equal? '#t val) (format #t " Running ~d/~d" 442 743) (begin (add-error '(list? '(a b c)) '#t val))))
(display "")(let1 val (begin (list? '())) (if (equal? '#t val) (format #t " Running ~d/~d" 443 743) (begin (add-error '(list? '()) '#t val))))
(display "")(let1 val (begin (list? '(a . b))) (if (equal? '#f val) (format #t " Running ~d/~d" 444 743) (begin (add-error '(list? '(a . b)) '#f val))))
(display "")(let1 val (begin "abc") (if (equal? '"abc" val) (format #t " Running ~d/~d" 445 743) (begin (add-error '"abc" '"abc" val))))
(display "")(let1 val (begin (match '(0 (1 2) (3 4 5)) ((a (b c) (d e f)) (list a b c d e f)))) (if (equal? '(0 1 2 3 4 5) val) (format #t " Running ~d/~d" 446 743) (add-error '(match '(0 (1 2) (3 4 5)) ((a (b c) (d e f)) (list a b c d e f))) '(0 1 2 3 4 5) val)))(display "")(let1 val (begin (match 123 ((? string? x) (list 'string x)) ((? number? x) (list 'number x)))) (if (equal? '(number 123) val) (format #t " Running ~d/~d" 447 743) (add-error '(match 123 ((? string? x) (list 'string x)) ((? number? x) (list 'number x))) '(number 123) val)))(display "")(let1 val (begin (define let-analyzer (match-lambda (('let (? symbol?) ((var expr) ...) body ...) (format "named let, vars=~s exprs=~s" var expr)) (('let ((var expr) ...) body ...) (format "normal let, vars=~s exprs=~s" var expr)) (_ (format "malformed let")))) (let-analyzer '(let ((a b) (c d)) e f g))) (if (equal? '"normal let, vars=(a c) exprs=(b d)" val) (format #t " Running ~d/~d" 448 743) (add-error '(define let-analyzer (match-lambda (('let (? symbol?) ((var expr) ...) body ...) (format "named let, vars=~s exprs=~s" var expr)) (('let ((var expr) ...) body ...) (format "normal let, vars=~s exprs=~s" var expr)) (_ (format "malformed let")))) '"normal let, vars=(a c) exprs=(b d)" val)))(display "")(let1 val (begin (let-analyzer '(let foo ((x (f a b)) (y (f c d))) e f g))) (if (equal? '"named let, vars=(x y) exprs=((f a b) (f c d))" val) (format #t " Running ~d/~d" 449 743) (add-error '(let-analyzer '(let foo ((x (f a b)) (y (f c d))) e f g)) '"named let, vars=(x y) exprs=((f a b) (f c d))" val)))(display "")(let1 val (begin (let-analyzer '(let (a) b c d))) (if (equal? '"malformed let" val) (format #t " Running ~d/~d" 450 743) (add-error '(let-analyzer '(let (a) b c d)) '"malformed let" val)))(display "")(let1 val (begin (match '(the answer is 42) (`(the answer is ,value) value) (else #f))) (if (equal? '42 val) (format #t " Running ~d/~d" 451 743) (add-error '(match '(the answer is 42) (`(the answer is ,value) value) (else #f)) '42 val)))(display "")(let1 val (begin (match '(the answer was 42) (`(the answer is ,value) value) (else #f))) (if (equal? '#f val) (format #t " Running ~d/~d" 452 743) (add-error '(match '(the answer was 42) (`(the answer is ,value) value) (else #f)) '#f val)))(display "")(let1 val (begin (match '(a b c d) ((the answer is value) value) (else #f))) (if (equal? 'd val) (format #t " Running ~d/~d" 453 743) (add-error '(match '(a b c d) ((the answer is value) value) (else #f)) 'd val)))(display "")(let1 val (begin (match "mosh.scm" ((? string? (= #/(.*)\.([^.]+)$/ m)) (format "base=~a suffix=~a" (m 1) (m 2))))) (if (equal? '"base=mosh suffix=scm" val) (format #t " Running ~d/~d" 454 743) (add-error '(match "mosh.scm" ((? string? (= #/(.*)\.([^.]+)$/ m)) (format "base=~a suffix=~a" (m 1) (m 2)))) '"base=mosh suffix=scm" val)))(display "")(let1 val (begin (do ((i 0) (j 0)) ((zero? j) (set! i 1) (set! i 2) i))) (if (equal? '2 val) (format #t " Running ~d/~d" 455 743) (add-error '(do ((i 0) (j 0)) ((zero? j) (set! i 1) (set! i 2) i)) '2 val)))(display "")(let1 val (begin (case (* 2 3) ((2 3 5 7) 'prime) ((1 4 6 8 9) 'composite))) (if (equal? 'composite val) (format #t " Running ~d/~d" 456 743) (begin (add-error '(case (* 2 3) ((2 3 5 7) 'prime) ((1 4 6 8 9) 'composite)) 'composite val))))
(display "")(let1 val (begin (case (car '(c d)) ((a e i o u) 'vowel) ((w y) 'semivowel) (else 'consonant))) (if (equal? 'consonant val) (format #t " Running ~d/~d" 457 743) (begin (add-error '(case (car '(c d)) ((a e i o u) 'vowel) ((w y) 'semivowel) (else 'consonant)) 'consonant val))))
(display "")(let1 val (begin (case 1 ((2 1) 0))) (if (equal? '0 val) (format #t " Running ~d/~d" 458 743) (begin (add-error '(case 1 ((2 1) 0)) '0 val))))
(display "")(let1 val (begin (case 2 ((2 1) 0))) (if (equal? '0 val) (format #t " Running ~d/~d" 459 743) (begin (add-error '(case 2 ((2 1) 0)) '0 val))))
(display "")(let1 val (begin (procedure? car)) (if (equal? '#t val) (format #t " Running ~d/~d" 460 743) (add-error '(procedure? car) '#t val)))(display "")(let1 val (begin (procedure? 'car)) (if (equal? '#f val) (format #t " Running ~d/~d" 461 743) (add-error '(procedure? 'car) '#f val)))(display "")(let1 val (begin (procedure? (lambda (x) (* x x)))) (if (equal? '#t val) (format #t " Running ~d/~d" 462 743) (add-error '(procedure? (lambda (x) (* x x))) '#t val)))(display "")(let1 val (begin (procedure? '(lambda (x) (* x x)))) (if (equal? '#f val) (format #t " Running ~d/~d" 463 743) (add-error '(procedure? '(lambda (x) (* x x))) '#f val)))(display "")(let1 val (begin (char>=? #\b #\a)) (if (equal? '#t val) (format #t " Running ~d/~d" 464 743) (begin (add-error '(char>=? #\b #\a) '#t val))))
(display "")(let1 val (begin (char>=? #\c #\b #\a)) (if (equal? '#t val) (format #t " Running ~d/~d" 465 743) (add-error '(char>=? #\c #\b #\a) '#t val)))(display "")(let1 val (begin (char>=? #\b #\b)) (if (equal? '#t val) (format #t " Running ~d/~d" 466 743) (begin (add-error '(char>=? #\b #\b) '#t val))))
(display "")(let1 val (begin (char>=? #\b #\c)) (if (equal? '#f val) (format #t " Running ~d/~d" 467 743) (begin (add-error '(char>=? #\b #\c) '#f val))))
(display "")(let1 val (begin (char>? #\b #\a)) (if (equal? '#t val) (format #t " Running ~d/~d" 468 743) (begin (add-error '(char>? #\b #\a) '#t val))))
(display "")(let1 val (begin (char>? #\b #\b)) (if (equal? '#f val) (format #t " Running ~d/~d" 469 743) (begin (add-error '(char>? #\b #\b) '#f val))))
(display "")(let1 val (begin (char>? #\b #\c)) (if (equal? '#f val) (format #t " Running ~d/~d" 470 743) (begin (add-error '(char>? #\b #\c) '#f val))))
(display "")(let1 val (begin (char<=? #\a #\b)) (if (equal? '#t val) (format #t " Running ~d/~d" 471 743) (begin (add-error '(char<=? #\a #\b) '#t val))))
(display "")(let1 val (begin (char<=? #\b #\b)) (if (equal? '#t val) (format #t " Running ~d/~d" 472 743) (begin (add-error '(char<=? #\b #\b) '#t val))))
(display "")(let1 val (begin (char<=? #\c #\b)) (if (equal? '#f val) (format #t " Running ~d/~d" 473 743) (begin (add-error '(char<=? #\c #\b) '#f val))))
(display "")(let1 val (begin (char<? #\a #\b)) (if (equal? '#t val) (format #t " Running ~d/~d" 474 743) (begin (add-error '(char<? #\a #\b) '#t val))))
(display "")(let1 val (begin (char<? #\b #\b)) (if (equal? '#f val) (format #t " Running ~d/~d" 475 743) (begin (add-error '(char<? #\b #\b) '#f val))))
(display "")(let1 val (begin (char<? #\c #\b)) (if (equal? '#f val) (format #t " Running ~d/~d" 476 743) (begin (add-error '(char<? #\c #\b) '#f val))))
(display "")(let1 val (begin (cons* 1 2 3 4)) (if (equal? '(1 2 3 . 4) val) (format #t " Running ~d/~d" 477 743) (add-error '(cons* 1 2 3 4) '(1 2 3 . 4) val)))(display "")(let1 val (begin (cons* 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 478 743) (add-error '(cons* 1) '1 val)))(display "")(let1 val (begin (receive (x y) (car+cdr '(1 . 3)) (cons x y))) (if (equal? '(1 . 3) val) (format #t " Running ~d/~d" 479 743) (add-error '(receive (x y) (car+cdr '(1 . 3)) (cons x y)) '(1 . 3) val)))(display "")(let1 val (begin (append 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 480 743) (begin (add-error '(append 1) '1 val))))
(display "")(let1 val (begin (append '(1) 2)) (if (equal? '(1 . 2) val) (format #t " Running ~d/~d" 481 743) (begin (add-error '(append '(1) 2) '(1 . 2) val))))
(display "")(let1 val (begin (append '(1 2) 3)) (if (equal? '(1 2 . 3) val) (format #t " Running ~d/~d" 482 743) (begin (add-error '(append '(1 2) 3) '(1 2 . 3) val))))
(display "")(let1 val (begin (append '(1 2) '(3))) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 483 743) (begin (add-error '(append '(1 2) '(3)) '(1 2 3) val))))
(display "")(let1 val (begin (append '(1 2) '(3) 4)) (if (equal? '(1 2 3 . 4) val) (format #t " Running ~d/~d" 484 743) (begin (add-error '(append '(1 2) '(3) 4) '(1 2 3 . 4) val))))
(display "")(let1 val (begin (append '(1 2) '(3) 4)) (if (equal? '(1 2 3 . 4) val) (format #t " Running ~d/~d" 485 743) (begin (add-error '(append '(1 2) '(3) 4) '(1 2 3 . 4) val))))
(display "")(let1 val (begin (append '() 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 486 743) (begin (add-error '(append '() 1) '1 val))))
(display "")(let1 val (begin (append '(1) '())) (if (equal? '(1) val) (format #t " Running ~d/~d" 487 743) (begin (add-error '(append '(1) '()) '(1) val))))
(display "")(let1 val (begin (append! 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 488 743) (begin (add-error '(append! 1) '1 val))))
(display "")(let1 val (begin (append! '(1) 2)) (if (equal? '(1 . 2) val) (format #t " Running ~d/~d" 489 743) (begin (add-error '(append! '(1) 2) '(1 . 2) val))))
(display "")(let1 val (begin (append! '(1 2) 3)) (if (equal? '(1 2 . 3) val) (format #t " Running ~d/~d" 490 743) (begin (add-error '(append! '(1 2) 3) '(1 2 . 3) val))))
(display "")(let1 val (begin (append! '(1 2) '(3))) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 491 743) (begin (add-error '(append! '(1 2) '(3)) '(1 2 3) val))))
(display "")(let1 val (begin (append! '(1 2) '(3) 4)) (if (equal? '(1 2 3 . 4) val) (format #t " Running ~d/~d" 492 743) (begin (add-error '(append! '(1 2) '(3) 4) '(1 2 3 . 4) val))))
(display "")(let1 val (begin (append! '(1 2) '(3) 4)) (if (equal? '(1 2 3 . 4) val) (format #t " Running ~d/~d" 493 743) (begin (add-error '(append! '(1 2) '(3) 4) '(1 2 3 . 4) val))))
(display "")(let1 val (begin (append! '() 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 494 743) (begin (add-error '(append! '() 1) '1 val))))
(display "")(let1 val (begin (append! '(1) '())) (if (equal? '(1) val) (format #t " Running ~d/~d" 495 743) (begin (add-error '(append! '(1) '()) '(1) val))))
(display "")(let1 val (begin (take '(a b c d e) 2)) (if (equal? '(a b) val) (format #t " Running ~d/~d" 496 743) (add-error '(take '(a b c d e) 2) '(a b) val)))(display "")(let1 val (begin (drop '(a b c d e) 2)) (if (equal? '(c d e) val) (format #t " Running ~d/~d" 497 743) (add-error '(drop '(a b c d e) 2) '(c d e) val)))(display "")(let1 val (begin (take '(1 2 3 . d) 2)) (if (equal? '(1 2) val) (format #t " Running ~d/~d" 498 743) (add-error '(take '(1 2 3 . d) 2) '(1 2) val)))(display "")(let1 val (begin (drop '(1 2 3 . d) 2)) (if (equal? '(3 . d) val) (format #t " Running ~d/~d" 499 743) (add-error '(drop '(1 2 3 . d) 2) '(3 . d) val)))(display "")(let1 val (begin (take '(1 2 3 . d) 3)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 500 743) (add-error '(take '(1 2 3 . d) 3) '(1 2 3) val)))(display "")(let1 val (begin (drop '(1 2 3 . d) 3)) (if (equal? 'd val) (format #t " Running ~d/~d" 501 743) (add-error '(drop '(1 2 3 . d) 3) 'd val)))(display "")(let1 val (begin (take-right '(a b c d e) 2)) (if (equal? '(d e) val) (format #t " Running ~d/~d" 502 743) (add-error '(take-right '(a b c d e) 2) '(d e) val)))(display "")(let1 val (begin (drop-right '(a b c d e) 2)) (if (equal? '(a b c) val) (format #t " Running ~d/~d" 503 743) (add-error '(drop-right '(a b c d e) 2) '(a b c) val)))(display "")(let1 val (begin (take-right '(1 2 3 . d) 2)) (if (equal? '(2 3 . d) val) (format #t " Running ~d/~d" 504 743) (add-error '(take-right '(1 2 3 . d) 2) '(2 3 . d) val)))(display "")(let1 val (begin (drop-right '(1 2 3 . d) 2)) (if (equal? '(1) val) (format #t " Running ~d/~d" 505 743) (add-error '(drop-right '(1 2 3 . d) 2) '(1) val)))(display "")(let1 val (begin (take-right '(1 2 3 . d) 0)) (if (equal? 'd val) (format #t " Running ~d/~d" 506 743) (add-error '(take-right '(1 2 3 . d) 0) 'd val)))(display "")(let1 val (begin (drop-right '(1 2 3 . d) 0)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 507 743) (add-error '(drop-right '(1 2 3 . d) 0) '(1 2 3) val)))(display "")(let1 val (begin (xcons '(b c) 'a)) (if (equal? '(a b c) val) (format #t " Running ~d/~d" 508 743) (add-error '(xcons '(b c) 'a) '(a b c) val)))(display "")(let1 val (begin (make-list 4 'c)) (if (equal? '(c c c c) val) (format #t " Running ~d/~d" 509 743) (add-error '(make-list 4 'c) '(c c c c) val)))(display "")(let1 val (begin (list-tabulate 4 values)) (if (equal? '(0 1 2 3) val) (format #t " Running ~d/~d" 510 743) (add-error '(list-tabulate 4 values) '(0 1 2 3) val)))(display "")(let1 val (begin (list-copy '(1 2 3 4))) (if (equal? '(1 2 3 4) val) (format #t " Running ~d/~d" 511 743) (add-error '(list-copy '(1 2 3 4)) '(1 2 3 4) val)))(display "")(let1 val (begin (let1 lst (circular-list 'z 'q) (and (eq? (first lst) 'z) (eq? (second lst) 'q) (third lst) 'z))) (if (equal? 'z val) (format #t " Running ~d/~d" 512 743) (add-error '(let1 lst (circular-list 'z 'q) (and (eq? (first lst) 'z) (eq? (second lst) 'q) (third lst) 'z)) 'z val)))(display "")(let1 val (begin (proper-list? '())) (if (equal? '#t val) (format #t " Running ~d/~d" 513 743) (add-error '(proper-list? '()) '#t val)))(display "")(let1 val (begin (proper-list? '(1 2 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 514 743) (add-error '(proper-list? '(1 2 3)) '#t val)))(display "")(let1 val (begin (proper-list? '(1 . 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 515 743) (add-error '(proper-list? '(1 . 3)) '#f val)))(display "")(let1 val (begin (dotted-list? '(1 2 . 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 516 743) (add-error '(dotted-list? '(1 2 . 3)) '#t val)))(display "")(let1 val (begin (dotted-list? '(1 2 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 517 743) (add-error '(dotted-list? '(1 2 3)) '#f val)))(display "")(let1 val (begin (last-pair '(a b c))) (if (equal? '(c) val) (format #t " Running ~d/~d" 518 743) (add-error '(last-pair '(a b c)) '(c) val)))(display "")(let1 val (begin (last '(a b c))) (if (equal? 'c val) (format #t " Running ~d/~d" 519 743) (add-error '(last '(a b c)) 'c val)))(display "")(let1 val (begin (not-pair? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 520 743) (add-error '(not-pair? 3) '#t val)))(display "")(let1 val (begin (not-pair? '(1 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 521 743) (add-error '(not-pair? '(1 2)) '#f val)))(display "")(let1 val (begin (list= eq?)) (if (equal? '#t val) (format #t " Running ~d/~d" 522 743) (add-error '(list= eq?) '#t val)))(display "")(let1 val (begin (list= eq? '(a))) (if (equal? '#t val) (format #t " Running ~d/~d" 523 743) (add-error '(list= eq? '(a)) '#t val)))(display "")(let1 val (begin (list= eq? '(a) '(a))) (if (equal? '#t val) (format #t " Running ~d/~d" 524 743) (add-error '(list= eq? '(a) '(a)) '#t val)))(display "")(let1 val (begin (list= eq? '(a) '(a b))) (if (equal? '#f val) (format #t " Running ~d/~d" 525 743) (add-error '(list= eq? '(a) '(a b)) '#f val)))(display "")(let1 val (begin (receive (x y) (split-at '(a b c d e f g h) 3) (cons x y))) (if (equal? '((a b c) d e f g h) val) (format #t " Running ~d/~d" 526 743) (add-error '(receive (x y) (split-at '(a b c d e f g h) 3) (cons x y)) '((a b c) d e f g h) val)))(display "")(let1 val (begin (string #\1 #\2 #\3)) (if (equal? '"123" val) (format #t " Running ~d/~d" 527 743) (begin (add-error '(string #\1 #\2 #\3) '"123" val))))
(display "")(let1 val (begin (regexp-replace-all #/&/ "taro&hanako" "&amp;")) (if (equal? '"taro&amp;hanako" val) (format #t " Running ~d/~d" 528 743) (begin (add-error '(regexp-replace-all #/&/ "taro&hanako" "&amp;") '"taro&amp;hanako" val))))
(display "")(let1 val (begin (let1 ht (make-hashtable (lambda (x) 2) (lambda (a b) #t)) (hashtable-set! ht 1 1) (hashtable-set! ht 2 2) (hashtable-ref ht 1))) (if (equal? '2 val) (format #t " Running ~d/~d" 529 743) (add-error '(let1 ht (make-hashtable (lambda (x) 2) (lambda (a b) #t)) (hashtable-set! ht 1 1) (hashtable-set! ht 2 2) (hashtable-ref ht 1)) '2 val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "my" "apple") (hashtable-set! ht "our" "water") (hashtable-ref ht "my"))) (if (equal? '"apple" val) (format #t " Running ~d/~d" 530 743) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "my" "apple") (hashtable-set! ht "our" "water") (hashtable-ref ht "my")) '"apple" val)))(display "")(let1 val (begin (hashtable? (make-hashtable string-hash string=?))) (if (equal? '#t val) (format #t " Running ~d/~d" 531 743) (add-error '(hashtable? (make-hashtable string-hash string=?)) '#t val)))(display "")(let1 val (begin (hashtable? (make-eq-hashtable))) (if (equal? '#t val) (format #t " Running ~d/~d" 532 743) (add-error '(hashtable? (make-eq-hashtable)) '#t val)))(display "")(let1 val (begin (hashtable? '(a . b))) (if (equal? '#f val) (format #t " Running ~d/~d" 533 743) (add-error '(hashtable? '(a . b)) '#f val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "my" "apple") (hashtable-set! ht "our" "water") (hashtable-size ht))) (if (equal? '2 val) (format #t " Running ~d/~d" 534 743) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "my" "apple") (hashtable-set! ht "our" "water") (hashtable-size ht)) '2 val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht "my" "apple") (hashtable-set! ht "my" "apple") (hashtable-size ht))) (if (equal? '2 val) (format #t " Running ~d/~d" 535 743) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht "my" "apple") (hashtable-set! ht "my" "apple") (hashtable-size ht)) '2 val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-delete! ht 1) (hashtable-ref ht 1 #f))) (if (equal? '#f val) (format #t " Running ~d/~d" 536 743) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-delete! ht 1) (hashtable-ref ht 1 #f)) '#f val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-delete! ht "one") (hashtable-ref ht "one" #f))) (if (equal? '#f val) (format #t " Running ~d/~d" 537 743) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-delete! ht "one") (hashtable-ref ht "one" #f)) '#f val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-contains? ht 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 538 743) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-contains? ht 2)) '#f val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-contains? ht 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 539 743) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-contains? ht 1)) '#t val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-contains? ht "two"))) (if (equal? '#f val) (format #t " Running ~d/~d" 540 743) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-contains? ht "two")) '#f val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-contains? ht "one"))) (if (equal? '#t val) (format #t " Running ~d/~d" 541 743) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-contains? ht "one")) '#t val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" "one") (hashtable-update! ht "one" (lambda (x) (string-append "!" x "!")) "hige") (hashtable-update! ht "two" (lambda (x) (string-append "!" x "!")) "hige") (string-append (hashtable-ref ht "one") (hashtable-ref ht "two")))) (if (equal? '"!one!!hige!" val) (format #t " Running ~d/~d" 542 743) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" "one") (hashtable-update! ht "one" (lambda (x) (string-append "!" x "!")) "hige") (hashtable-update! ht "two" (lambda (x) (string-append "!" x "!")) "hige") (string-append (hashtable-ref ht "one") (hashtable-ref ht "two"))) '"!one!!hige!" val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (let1 ht-copy (hashtable-copy ht) (and (string=? (hashtable-ref ht-copy 1) "one") (not (hashtable-mutable? ht-copy)))))) (if (equal? '#t val) (format #t " Running ~d/~d" 543 743) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (let1 ht-copy (hashtable-copy ht) (and (string=? (hashtable-ref ht-copy 1) "one") (not (hashtable-mutable? ht-copy))))) '#t val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (let1 ht-copy (hashtable-copy ht #t) (and (string=? (hashtable-ref ht-copy 1) "one") (hashtable-mutable? ht-copy))))) (if (equal? '#t val) (format #t " Running ~d/~d" 544 743) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (let1 ht-copy (hashtable-copy ht #t) (and (string=? (hashtable-ref ht-copy 1) "one") (hashtable-mutable? ht-copy)))) '#t val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" "one") (let1 ht-copy (hashtable-copy ht) (and (string=? (hashtable-ref ht-copy "one") "one") (not (hashtable-mutable? ht-copy)))))) (if (equal? '#t val) (format #t " Running ~d/~d" 545 743) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" "one") (let1 ht-copy (hashtable-copy ht) (and (string=? (hashtable-ref ht-copy "one") "one") (not (hashtable-mutable? ht-copy))))) '#t val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" "one") (let1 ht-copy (hashtable-copy ht #t) (and (string=? (hashtable-ref ht-copy "one") "one") (hashtable-mutable? ht-copy))))) (if (equal? '#t val) (format #t " Running ~d/~d" 546 743) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" "one") (let1 ht-copy (hashtable-copy ht #t) (and (string=? (hashtable-ref ht-copy "one") "one") (hashtable-mutable? ht-copy)))) '#t val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-set! ht 2 "two") (hashtable-clear! ht) (hashtable-size ht))) (if (equal? '0 val) (format #t " Running ~d/~d" 547 743) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-set! ht 2 "two") (hashtable-clear! ht) (hashtable-size ht)) '0 val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-set! ht "two" 2) (hashtable-clear! ht) (hashtable-size ht))) (if (equal? '0 val) (format #t " Running ~d/~d" 548 743) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-set! ht "two" 2) (hashtable-clear! ht) (hashtable-size ht)) '0 val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-set! ht 2 "two") (vector->list (hashtable-keys ht)))) (if (equal? '(1 2) val) (format #t " Running ~d/~d" 549 743) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-set! ht 2 "two") (vector->list (hashtable-keys ht))) '(1 2) val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-set! ht "two" 2) (let1 keys (vector->list (hashtable-keys ht)) (and (member "one" keys) (member "two" keys) (= 2 (length keys)))))) (if (equal? '#t val) (format #t " Running ~d/~d" 550 743) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-set! ht "two" 2) (let1 keys (vector->list (hashtable-keys ht)) (and (member "one" keys) (member "two" keys) (= 2 (length keys))))) '#t val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-set! ht "two" 2) (receive (keys vals) (hashtable-entries ht) (append (vector->list keys) (vector->list vals))))) (if (equal? '("two" "one" 2 1) val) (format #t " Running ~d/~d" 551 743) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-set! ht "two" 2) (receive (keys vals) (hashtable-entries ht) (append (vector->list keys) (vector->list vals)))) '("two" "one" 2 1) val)))(display "")(let1 val (begin (equal? eq? (hashtable-equivalence-function (make-eq-hashtable)))) (if (equal? '#t val) (format #t " Running ~d/~d" 552 743) (add-error '(equal? eq? (hashtable-equivalence-function (make-eq-hashtable))) '#t val)))(display "")(let1 val (begin (hashtable-hash-function (make-eq-hashtable))) (if (equal? '#f val) (format #t " Running ~d/~d" 553 743) (add-error '(hashtable-hash-function (make-eq-hashtable)) '#f val)))(display "")(let1 val (begin (equal? string=? (hashtable-equivalence-function (make-hashtable string-hash string=?)))) (if (equal? '#t val) (format #t " Running ~d/~d" 554 743) (add-error '(equal? string=? (hashtable-equivalence-function (make-hashtable string-hash string=?))) '#t val)))(display "")(let1 val (begin (equal? string-hash (hashtable-hash-function (make-hashtable string-hash string=?)))) (if (equal? '#t val) (format #t " Running ~d/~d" 555 743) (add-error '(equal? string-hash (hashtable-hash-function (make-hashtable string-hash string=?))) '#t val)))(display "")(let1 val (begin (= (string-ci-hash "abc") (string-ci-hash "AbC"))) (if (equal? '#t val) (format #t " Running ~d/~d" 556 743) (add-error '(= (string-ci-hash "abc") (string-ci-hash "AbC")) '#t val)))(display "")(let1 val (begin (= (symbol-hash 'abc) (symbol-hash 'abc))) (if (equal? '#t val) (format #t " Running ~d/~d" 557 743) (add-error '(= (symbol-hash 'abc) (symbol-hash 'abc)) '#t val)))(display "")(let1 val (begin (= (symbol-hash 'abc) (symbol-hash 'aBc))) (if (equal? '#f val) (format #t " Running ~d/~d" 558 743) (add-error '(= (symbol-hash 'abc) (symbol-hash 'aBc)) '#f val)))(display "")(let1 val (begin (= (equal-hash '(a b c)) (equal-hash '(a b c)))) (if (equal? '#t val) (format #t " Running ~d/~d" 559 743) (add-error '(= (equal-hash '(a b c)) (equal-hash '(a b c))) '#t val)))(display "")(let1 val (begin (equal? eqv? (hashtable-equivalence-function (make-eqv-hashtable)))) (if (equal? '#t val) (format #t " Running ~d/~d" 560 743) (add-error '(equal? eqv? (hashtable-equivalence-function (make-eqv-hashtable))) '#t val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (point? (record-predicate :point)) (point-x (record-accessor :point 0)) (point-y (record-accessor :point 1)) (point-x-set! (record-mutator :point 0)) (point-y-set! (record-mutator :point 1)) (p1 (make-point 1 2))) (and (point? p1) (record? p1) (= (point-x p1) 1) (= (point-y p1) 2) (point-x-set! p1 5) (= (point-x p1) 5)))) (if (equal? '#t val) (format #t " Running ~d/~d" 561 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (point? (record-predicate :point)) (point-x (record-accessor :point 0)) (point-y (record-accessor :point 1)) (point-x-set! (record-mutator :point 0)) (point-y-set! (record-mutator :point 1)) (p1 (make-point 1 2))) (and (point? p1) (record? p1) (= (point-x p1) 1) (= (point-y p1) 2) (point-x-set! p1 5) (= (point-x p1) 5))) '#t val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point2 :point #f #f #f '#((mutable x) (mutable y)))) (make-point2 (record-constructor (make-record-constructor-descriptor :point2 #f #f))) (point? (record-predicate :point)) (point-x (record-accessor :point 0)) (point-y (record-accessor :point 1)) (point-x-set! (record-mutator :point 0)) (point-y-set! (record-mutator :point 1)) (point2? (record-predicate :point2)) (point2-xx (record-accessor :point2 0)) (point2-yy (record-accessor :point2 1)) (point2-xx-set! (record-mutator :point2 0)) (point2-yy-set! (record-mutator :point2 1)) (p2 (make-point2 1 2 3 4))) (and (point? p2) (point2? p2) (record? p2) (= (point-x p2) 1) (= (point-y p2) 2) (= (point2-xx p2) 3) (= (point2-yy p2) 4) (point-x-set! p2 5) (= (point-x p2) 5) (point-y-set! p2 6) (= (point-y p2) 6) (point2-xx-set! p2 7) (= (point2-xx p2) 7) (point2-yy-set! p2 8) (= (point2-yy p2) 8)))) (if (equal? '#t val) (format #t " Running ~d/~d" 562 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point2 :point #f #f #f '#((mutable x) (mutable y)))) (make-point2 (record-constructor (make-record-constructor-descriptor :point2 #f #f))) (point? (record-predicate :point)) (point-x (record-accessor :point 0)) (point-y (record-accessor :point 1)) (point-x-set! (record-mutator :point 0)) (point-y-set! (record-mutator :point 1)) (point2? (record-predicate :point2)) (point2-xx (record-accessor :point2 0)) (point2-yy (record-accessor :point2 1)) (point2-xx-set! (record-mutator :point2 0)) (point2-yy-set! (record-mutator :point2 1)) (p2 (make-point2 1 2 3 4))) (and (point? p2) (point2? p2) (record? p2) (= (point-x p2) 1) (= (point-y p2) 2) (= (point2-xx p2) 3) (= (point2-yy p2) 4) (point-x-set! p2 5) (= (point-x p2) 5) (point-y-set! p2 6) (= (point-y p2) 6) (point2-xx-set! p2 7) (= (point2-xx p2) 7) (point2-yy-set! p2 8) (= (point2-yy p2) 8))) '#t val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd/abs (make-record-constructor-descriptor :point #f (lambda (new) (lambda (x y) (new (abs x) (abs y)))))) (point-x (record-accessor :point 0)) (point-y (record-accessor :point 1)) (make-point/abs (record-constructor :point-cd/abs))) (and (= (point-x (make-point/abs -1 -2)) 1) (= (point-y (make-point/abs -1 -2)) 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 563 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd/abs (make-record-constructor-descriptor :point #f (lambda (new) (lambda (x y) (new (abs x) (abs y)))))) (point-x (record-accessor :point 0)) (point-y (record-accessor :point 1)) (make-point/abs (record-constructor :point-cd/abs))) (and (= (point-x (make-point/abs -1 -2)) 1) (= (point-y (make-point/abs -1 -2)) 2))) '#t val)))(display "")(let1 val (begin (let* ((color->rgb (lambda (c) (cons 'rgb c))) (:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (:point-cd/abs (make-record-constructor-descriptor :point #f (lambda (new) (lambda (x y) (new (abs x) (abs y)))))) (point-x (record-accessor :point 0)) (:cpoint (make-record-type-descriptor 'cpoint :point #f #f #f '#((mutable rgb)))) (cpoint-rgb (record-accessor :cpoint 0)) (make-cpoint (record-constructor (make-record-constructor-descriptor :cpoint :point-cd (lambda (p) (lambda (x y c) ((p x y) (color->rgb c))))))) (make-cpoint/abs (record-constructor (make-record-constructor-descriptor :cpoint :point-cd/abs (lambda (p) (lambda (x y c) ((p x y) (color->rgb c)))))))) (and (equal? (cpoint-rgb (make-cpoint -1 -3 'red)) '(rgb . red)) (= (point-x (make-cpoint -1 -3 'red)) -1) (= (point-x (make-cpoint/abs -1 -3 'red)) 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 564 743) (add-error '(let* ((color->rgb (lambda (c) (cons 'rgb c))) (:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (:point-cd/abs (make-record-constructor-descriptor :point #f (lambda (new) (lambda (x y) (new (abs x) (abs y)))))) (point-x (record-accessor :point 0)) (:cpoint (make-record-type-descriptor 'cpoint :point #f #f #f '#((mutable rgb)))) (cpoint-rgb (record-accessor :cpoint 0)) (make-cpoint (record-constructor (make-record-constructor-descriptor :cpoint :point-cd (lambda (p) (lambda (x y c) ((p x y) (color->rgb c))))))) (make-cpoint/abs (record-constructor (make-record-constructor-descriptor :cpoint :point-cd/abs (lambda (p) (lambda (x y c) ((p x y) (color->rgb c)))))))) (and (equal? (cpoint-rgb (make-cpoint -1 -3 'red)) '(rgb . red)) (= (point-x (make-cpoint -1 -3 'red)) -1) (= (point-x (make-cpoint/abs -1 -3 'red)) 1))) '#t val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #t '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (p (make-point 1 2))) (record? p))) (if (equal? '#f val) (format #t " Running ~d/~d" 565 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #t '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (p (make-point 1 2))) (record? p)) '#f val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (p (make-point 1 2))) (eqv? :point (record-rtd p)))) (if (equal? '#t val) (format #t " Running ~d/~d" 566 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (p (make-point 1 2))) (eqv? :point (record-rtd p))) '#t val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (p (make-point 1 2))) (record-type-name (record-rtd p)))) (if (equal? 'point val) (format #t " Running ~d/~d" 567 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (p (make-point 1 2))) (record-type-name (record-rtd p))) 'point val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point2 :point #f #f #f '#((mutable x) (mutable y))))) (record-type-name (record-type-parent :point2)))) (if (equal? 'point val) (format #t " Running ~d/~d" 568 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point2 :point #f #f #f '#((mutable x) (mutable y))))) (record-type-name (record-type-parent :point2))) 'point val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (eq? :point :point2))) (if (equal? '#t val) (format #t " Running ~d/~d" 569 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (eq? :point :point2)) '#t val)))(display "")(let1 val (begin (let* ((:point2 (make-record-type-descriptor 'point2 #f #f #f #f '#((mutable x) (mutable y))))) (record-type-generative? :point2))) (if (equal? '#t val) (format #t " Running ~d/~d" 570 743) (add-error '(let* ((:point2 (make-record-type-descriptor 'point2 #f #f #f #f '#((mutable x) (mutable y))))) (record-type-generative? :point2)) '#t val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (record-type-generative? :point))) (if (equal? '#f val) (format #t " Running ~d/~d" 571 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (record-type-generative? :point)) '#f val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (record-type-field-names :point))) (if (equal? '#(x y) val) (format #t " Running ~d/~d" 572 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (record-type-field-names :point)) '#(x y) val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (record-field-mutable? :point 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 573 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (record-field-mutable? :point 1)) '#t val)))(display "")(let1 val (begin (let ((x '()) (c #f)) (dynamic-wind (lambda () (set! x (cons 'a x))) (lambda () (dynamic-wind (lambda () (set! x (cons 'b x))) (lambda () (dynamic-wind (lambda () (set! x (cons 'c x))) (lambda () (set! c (call/cc (lambda (x) x)))) (lambda () (set! x (cons 'd x))))) (lambda () (set! x (cons 'e x)))) (dynamic-wind (lambda () (set! x (cons 'f x))) (lambda () (when c (c #f))) (lambda () (set! x (cons 'g x))))) (lambda () (set! x (cons 'h x)))) (reverse x))) (if (equal? '(a b c d e f g b c d e f g h) val) (format #t " Running ~d/~d" 574 743) (add-error '(let ((x '()) (c #f)) (dynamic-wind (lambda () (set! x (cons 'a x))) (lambda () (dynamic-wind (lambda () (set! x (cons 'b x))) (lambda () (dynamic-wind (lambda () (set! x (cons 'c x))) (lambda () (set! c (call/cc (lambda (x) x)))) (lambda () (set! x (cons 'd x))))) (lambda () (set! x (cons 'e x)))) (dynamic-wind (lambda () (set! x (cons 'f x))) (lambda () (when c (c #f))) (lambda () (set! x (cons 'g x))))) (lambda () (set! x (cons 'h x)))) (reverse x)) '(a b c d e f g b c d e f g h) val)))(display "")(let1 val (begin ((lambda () (receive x (dynamic-wind (lambda () #f) (lambda () (values 'a 'b 'c)) (lambda () #f)) x)))) (if (equal? '(a b c) val) (format #t " Running ~d/~d" 575 743) (add-error '((lambda () (receive x (dynamic-wind (lambda () #f) (lambda () (values 'a 'b 'c)) (lambda () #f)) x))) '(a b c) val)))(display "")(let1 val (begin ((lambda () (receive x (dynamic-wind (lambda () #f) (lambda () (values)) (lambda () #f)) x)))) (if (equal? '() val) (format #t " Running ~d/~d" 576 743) (add-error '((lambda () (receive x (dynamic-wind (lambda () #f) (lambda () (values)) (lambda () #f)) x))) '() val)))(display "")(let1 val (begin (eval 3 '())) (if (equal? '3 val) (format #t " Running ~d/~d" 577 743) (add-error '(eval 3 '()) '3 val)))(display "")(let1 val (begin (equal? '(#(1 2 3) . #(one two three)) '(#(1 2 3) . #(one two three)))) (if (equal? '#t val) (format #t " Running ~d/~d" 578 743) (begin (add-error '(equal? '(#(1 2 3) . #(one two three)) '(#(1 2 3) . #(one two three))) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (call/cc (lambda (cont) (with-exception-handler (lambda (c) (cont 'error)) (lambda () (car 3))))))) (format #t " Running ~d/~d" 579 743) (add-error '(call/cc (lambda (cont) (with-exception-handler (lambda (c) (cont 'error)) (lambda () (car 3))))) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (car 3))) (format #t " Running ~d/~d" 580 743) (add-error '(car 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (cdr 3))) (format #t " Running ~d/~d" 581 743) (add-error '(cdr 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (cddr 3))) (format #t " Running ~d/~d" 582 743) (add-error '(cddr 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (cdar 3))) (format #t " Running ~d/~d" 583 743) (add-error '(cdar 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (cadr 3))) (format #t " Running ~d/~d" 584 743) (add-error '(cadr 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (caar 3))) (format #t " Running ~d/~d" 585 743) (add-error '(caar 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (values 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) (format #t " Running ~d/~d" 586 743) (add-error '(values 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (apply values '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))) (format #t " Running ~d/~d" 587 743) (add-error '(apply values '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (apply (lambda (s) (display s)) '(1 2)))) (format #t " Running ~d/~d" 588 743) (add-error '(apply (lambda (s) (display s)) '(1 2)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (number? 2 2))) (format #t " Running ~d/~d" 589 743) (add-error '(number? 2 2) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (make-record-constructor-descriptor))) (format #t " Running ~d/~d" 590 743) (add-error '(make-record-constructor-descriptor) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (hashtable-clear! 1 1 1))) (format #t " Running ~d/~d" 591 743) (add-error '(hashtable-clear! 1 1 1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (record-predicate 3))) (format #t " Running ~d/~d" 592 743) (add-error '(record-predicate 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (record-constructor 3))) (format #t " Running ~d/~d" 593 743) (add-error '(record-constructor 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (make-record-type-descriptor 'point 3 'uid #f #f #f))) (format #t " Running ~d/~d" 594 743) (add-error '(make-record-type-descriptor 'point 3 'uid #f #f #f) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (point-x (record-accessor :point 3))) #f))) (format #t " Running ~d/~d" 595 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (point-x (record-accessor :point 3))) #f) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((immutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (point-x (record-mutator :point 0))) #f))) (format #t " Running ~d/~d" 596 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((immutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (point-x (record-mutator :point 0))) #f) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((immutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point2 #f #f #f #f '#((immutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (:point2-cd (make-record-constructor-descriptor :point2 #f #f)) (make-point (record-constructor :point-cd)) (point2-x (record-accessor :point2 0))) (point2-x (make-point 1 2))))) (format #t " Running ~d/~d" 597 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((immutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point2 #f #f #f #f '#((immutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (:point2-cd (make-record-constructor-descriptor :point2 #f #f)) (make-point (record-constructor :point-cd)) (point2-x (record-accessor :point2 0))) (point2-x (make-point 1 2))) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (let* ((:point (make-record-type-descriptor 'point #f #f #t #t '#((immutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd))) (record-rtd (make-point 2 21))))) (format #t " Running ~d/~d" 598 743) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #t #t '#((immutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd))) (record-rtd (make-point 2 21))) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (apply read-char (current-input-port)))) (format #t " Running ~d/~d" 599 743) (add-error '(apply read-char (current-input-port)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (rxmatch-start (rxmatch #/\d+/ "a345a") 5))) (format #t " Running ~d/~d" 600 743) (add-error '(rxmatch-start (rxmatch #/\d+/ "a345a") 5) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (string-ref "hige" 5))) (format #t " Running ~d/~d" 601 743) (add-error '(string-ref "hige" 5) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (open-file-input-port "not-exist-path/////xxx"))) (format #t " Running ~d/~d" 602 743) (add-error '(open-file-input-port "not-exist-path/////xxx") 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (open-file-output-port "not-exist-path/////xxx"))) (format #t " Running ~d/~d" 603 743) (add-error '(open-file-output-port "not-exist-path/////xxx") 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (format "~a ~a" 1))) (format #t " Running ~d/~d" 604 743) (add-error '(format "~a ~a" 1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) my-unbound-variable)) (format #t " Running ~d/~d" 605 743) (add-error 'my-unbound-variable 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (my-unbound-variable))) (format #t " Running ~d/~d" 606 743) (add-error '(my-unbound-variable) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (vector-ref 'v 3))) (format #t " Running ~d/~d" 607 743) (add-error '(vector-ref 'v 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (receive (a) (values 1 2)))) (format #t " Running ~d/~d" 608 743) (add-error '(receive (a) (values 1 2)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (receive (a b) (values 1)))) (format #t " Running ~d/~d" 609 743) (add-error '(receive (a b) (values 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (3))) (format #t " Running ~d/~d" 610 743) (add-error '(3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (/ 3 0))) (format #t " Running ~d/~d" 611 743) (add-error '(/ 3 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (error "our" "message"))) (format #t " Running ~d/~d" 612 743) (add-error '(error "our" "message") 'error val))(display "")(let1 val (begin (let ((x (list 'a 'b 'c 'a)) (y (list 'a 'b 'c 'a 'b 'c 'a))) (set-cdr! (list-tail x 2) x) (set-cdr! (list-tail y 5) y) (equal? x y))) (if (equal? '#t val) (format #t " Running ~d/~d" 613 743) (begin (add-error '(let ((x (list 'a 'b 'c 'a)) (y (list 'a 'b 'c 'a 'b 'c 'a))) (set-cdr! (list-tail x 2) x) (set-cdr! (list-tail y 5) y) (equal? x y)) '#t val))))
(display "")(let1 val (begin (apply = '(3 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 614 743) (begin (add-error '(apply = '(3 3)) '#t val))))
(display "")(let1 val (begin (apply = '(3 4))) (if (equal? '#f val) (format #t " Running ~d/~d" 615 743) (begin (add-error '(apply = '(3 4)) '#f val))))
(display "")(let1 val (begin (apply = '(3 3 3 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 616 743) (begin (add-error '(apply = '(3 3 3 3)) '#t val))))
(display "")(let1 val (begin (apply = '(3 3 3 4))) (if (equal? '#f val) (format #t " Running ~d/~d" 617 743) (begin (add-error '(apply = '(3 3 3 4)) '#f val))))
(display "")(let1 val (begin (apply = '(4 3 3 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 618 743) (begin (add-error '(apply = '(4 3 3 3)) '#f val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (apply = '(4 'z 3 3)))) (format #t " Running ~d/~d" 619 743) (add-error '(apply = '(4 'z 3 3)) 'error val))(display "")(let1 val (begin (apply > '(4 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 620 743) (begin (add-error '(apply > '(4 3)) '#t val))))
(display "")(let1 val (begin (apply > '(4 3 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 621 743) (begin (add-error '(apply > '(4 3 2)) '#t val))))
(display "")(let1 val (begin (apply > '(4 3 1 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 622 743) (begin (add-error '(apply > '(4 3 1 2)) '#f val))))
(display "")(let1 val (begin (apply >= '(3 3 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 623 743) (begin (add-error '(apply >= '(3 3 3)) '#t val))))
(display "")(let1 val (begin (apply >= '(4 3 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 624 743) (begin (add-error '(apply >= '(4 3 3)) '#t val))))
(display "")(let1 val (begin (apply >= '(4 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 625 743) (begin (add-error '(apply >= '(4 3)) '#t val))))
(display "")(let1 val (begin (apply < '(1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 626 743) (begin (add-error '(apply < '(1 2)) '#t val))))
(display "")(let1 val (begin (apply < '(1 2 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 627 743) (begin (add-error '(apply < '(1 2 3)) '#t val))))
(display "")(let1 val (begin (apply < '(1 5 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 628 743) (begin (add-error '(apply < '(1 5 3)) '#f val))))
(display "")(let1 val (begin (apply <= '(1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 629 743) (begin (add-error '(apply <= '(1 2)) '#t val))))
(display "")(let1 val (begin (apply <= '(1 2 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 630 743) (begin (add-error '(apply <= '(1 2 3)) '#t val))))
(display "")(let1 val (begin (apply <= '(1 3 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 631 743) (begin (add-error '(apply <= '(1 3 3)) '#t val))))
(display "")(let1 val (begin (apply <= '(1 5 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 632 743) (begin (add-error '(apply <= '(1 5 3)) '#f val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (/ 1 0))) (format #t " Running ~d/~d" 633 743) (add-error '(/ 1 0) 'error val))(display "")(let1 val (begin (apply + '(4))) (if (equal? '4 val) (format #t " Running ~d/~d" 634 743) (begin (add-error '(apply + '(4)) '4 val))))
(display "")(let1 val (begin (apply + '(4 3))) (if (equal? '7 val) (format #t " Running ~d/~d" 635 743) (begin (add-error '(apply + '(4 3)) '7 val))))
(display "")(let1 val (begin (apply + '(4 3 10))) (if (equal? '17 val) (format #t " Running ~d/~d" 636 743) (begin (add-error '(apply + '(4 3 10)) '17 val))))
(display "")(let1 val (begin (apply + '(1 1 1 1))) (if (equal? '4 val) (format #t " Running ~d/~d" 637 743) (begin (add-error '(apply + '(1 1 1 1)) '4 val))))
(display "")(let1 val (begin (apply - '(10 5))) (if (equal? '5 val) (format #t " Running ~d/~d" 638 743) (begin (add-error '(apply - '(10 5)) '5 val))))
(display "")(let1 val (begin (apply - '(10 5 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 639 743) (begin (add-error '(apply - '(10 5 2)) '3 val))))
(display "")(let1 val (begin (apply * '(2 3))) (if (equal? '6 val) (format #t " Running ~d/~d" 640 743) (begin (add-error '(apply * '(2 3)) '6 val))))
(display "")(let1 val (begin (apply * '(2 3 4))) (if (equal? '24 val) (format #t " Running ~d/~d" 641 743) (begin (add-error '(apply * '(2 3 4)) '24 val))))
(display "")(let1 val (begin (apply / '(6 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 642 743) (begin (add-error '(apply / '(6 2)) '3 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (apply / '(6 0)))) (format #t " Running ~d/~d" 643 743) (add-error '(apply / '(6 0)) 'error val))(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (i (enum-set-indexer e))) (list (i 'red) (i 'green) (i 'blue) (i 'yellow)))) (if (equal? '(0 1 2 #f) val) (format #t " Running ~d/~d" 644 743) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (i (enum-set-indexer e))) (list (i 'red) (i 'green) (i 'blue) (i 'yellow))) '(0 1 2 #f) val))))
(display "")(let1 val (begin (enum-set->list (make-enumeration '(red green blue)))) (if (equal? '(red green blue) val) (format #t " Running ~d/~d" 645 743) (begin (add-error '(enum-set->list (make-enumeration '(red green blue))) '(red green blue) val))))
(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (enum-set->list (c '(blue red))))) (if (equal? '(red blue) val) (format #t " Running ~d/~d" 646 743) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (enum-set->list (c '(blue red)))) '(red blue) val))))
(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (list (enum-set-member? 'blue (c '(red blue))) (enum-set-member? 'green (c '(red blue))) (enum-set-subset? (c '(red blue)) e) (enum-set-subset? (c '(red blue)) (c '(blue red))) (enum-set-subset? (c '(red blue)) (c '(red))) (enum-set=? (c '(red blue)) (c '(blue red)))))) (if (equal? '(#t #f #t #t #f #t) val) (format #t " Running ~d/~d" 647 743) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (list (enum-set-member? 'blue (c '(red blue))) (enum-set-member? 'green (c '(red blue))) (enum-set-subset? (c '(red blue)) e) (enum-set-subset? (c '(red blue)) (c '(blue red))) (enum-set-subset? (c '(red blue)) (c '(red))) (enum-set=? (c '(red blue)) (c '(blue red))))) '(#t #f #t #t #f #t) val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (guard (c (#t 'error)) (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (c '(pink)))))) (format #t " Running ~d/~d" 648 743) (add-error '(guard (c (#t 'error)) (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (c '(pink)))) 'error val))(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (r ((enum-set-constructor e) '(red)))) (list (enum-set->list (enum-set-universe e)) (enum-set->list (enum-set-universe r)) ((enum-set-indexer ((enum-set-constructor e) '(red))) 'green) (enum-set-member? 'red e) (enum-set-member? 'black e) (enum-set-subset? e e) (enum-set-subset? r e) (enum-set-subset? e r) (enum-set-subset? e (make-enumeration '(blue green red))) (enum-set-subset? e (make-enumeration '(blue green red black))) (enum-set-subset? (make-enumeration '(blue green red black)) e) (enum-set-subset? ((enum-set-constructor (make-enumeration '(blue green red black))) '(red)) e) (enum-set-subset? ((enum-set-constructor (make-enumeration '(green red))) '(red)) e) (enum-set=? e e) (enum-set=? r e) (enum-set=? e r) (enum-set=? e (make-enumeration '(blue green red)))))) (if (equal? '((red green blue) (red green blue) 1 #t #f #t #t #f #t #t #f #f #t #t #f #f #t) val) (format #t " Running ~d/~d" 649 743) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (r ((enum-set-constructor e) '(red)))) (list (enum-set->list (enum-set-universe e)) (enum-set->list (enum-set-universe r)) ((enum-set-indexer ((enum-set-constructor e) '(red))) 'green) (enum-set-member? 'red e) (enum-set-member? 'black e) (enum-set-subset? e e) (enum-set-subset? r e) (enum-set-subset? e r) (enum-set-subset? e (make-enumeration '(blue green red))) (enum-set-subset? e (make-enumeration '(blue green red black))) (enum-set-subset? (make-enumeration '(blue green red black)) e) (enum-set-subset? ((enum-set-constructor (make-enumeration '(blue green red black))) '(red)) e) (enum-set-subset? ((enum-set-constructor (make-enumeration '(green red))) '(red)) e) (enum-set=? e e) (enum-set=? r e) (enum-set=? e r) (enum-set=? e (make-enumeration '(blue green red))))) '((red green blue) (red green blue) 1 #t #f #t #t #f #t #t #f #f #t #t #f #f #t) val))))
(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (list (enum-set-member? 'blue (c '(red blue))) (enum-set-member? 'green (c '(red blue))) (enum-set-subset? (c '(red blue)) e) (enum-set-subset? (c '(red blue)) (c '(blue red))) (enum-set-subset? (c '(red blue)) (c '(red))) (enum-set=? (c '(red blue)) (c '(blue red)))))) (if (equal? '(#t #f #t #t #f #t) val) (format #t " Running ~d/~d" 650 743) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (list (enum-set-member? 'blue (c '(red blue))) (enum-set-member? 'green (c '(red blue))) (enum-set-subset? (c '(red blue)) e) (enum-set-subset? (c '(red blue)) (c '(blue red))) (enum-set-subset? (c '(red blue)) (c '(red))) (enum-set=? (c '(red blue)) (c '(blue red))))) '(#t #f #t #t #f #t) val))))
(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (enum-set->list (c '(blue red))))) (if (equal? '(red blue) val) (format #t " Running ~d/~d" 651 743) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (enum-set->list (c '(blue red)))) '(red blue) val))))
(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (list (enum-set->list (enum-set-union (c '(blue)) (c '(red)))) (enum-set->list (enum-set-intersection (c '(red green)) (c '(red blue)))) (enum-set->list (enum-set-difference (c '(red green)) (c '(red blue))))))) (if (equal? '((red blue) (red) (green)) val) (format #t " Running ~d/~d" 652 743) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (list (enum-set->list (enum-set-union (c '(blue)) (c '(red)))) (enum-set->list (enum-set-intersection (c '(red green)) (c '(red blue)))) (enum-set->list (enum-set-difference (c '(red green)) (c '(red blue)))))) '((red blue) (red) (green)) val))))
(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (enum-set->list (enum-set-complement (c '(red)))))) (if (equal? '(green blue) val) (format #t " Running ~d/~d" 653 743) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (enum-set->list (enum-set-complement (c '(red))))) '(green blue) val))))
(display "")(let1 val (begin (let ((e1 (make-enumeration '(red green blue black))) (e2 (make-enumeration '(red black white)))) (enum-set->list (enum-set-projection e1 e2)))) (if (equal? '(red black) val) (format #t " Running ~d/~d" 654 743) (begin (add-error '(let ((e1 (make-enumeration '(red green blue black))) (e2 (make-enumeration '(red black white)))) (enum-set->list (enum-set-projection e1 e2))) '(red black) val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (call-with-string-input-port "(" (lambda (in) (read in))))) (format #t " Running ~d/~d" 655 743) (add-error '(call-with-string-input-port "(" (lambda (in) (read in))) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (call-with-string-input-port "(" (lambda (in) (apply read (list in)))))) (format #t " Running ~d/~d" 656 743) (add-error '(call-with-string-input-port "(" (lambda (in) (apply read (list in)))) 'error val))(display "")(let1 val (begin (eq? #\A #\A)) (if (equal? '#t val) (format #t " Running ~d/~d" 657 743) (begin (add-error '(eq? #\A #\A) '#t val))))
(display "")(let1 val (begin (bytevector-length (make-bytevector 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 658 743) (add-error '(bytevector-length (make-bytevector 3)) '3 val)))(display "")(let1 val (begin (make-bytevector 4 3)) (if (equal? '#vu8(3 3 3 3) val) (format #t " Running ~d/~d" 659 743) (add-error '(make-bytevector 4 3) '#vu8(3 3 3 3) val)))(display "")(let1 val (begin (bytevector=? #vu8(3 3 3) #vu8(3 3 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 660 743) (add-error '(bytevector=? #vu8(3 3 3) #vu8(3 3 3)) '#t val)))(display "")(let1 val (begin (bytevector=? #vu8(3 4 3) #vu8(3 3 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 661 743) (add-error '(bytevector=? #vu8(3 4 3) #vu8(3 3 3)) '#f val)))(display "")(let1 val (begin (let ((bytevector (make-bytevector 4))) (bytevector-fill! bytevector 3) bytevector)) (if (equal? '#vu8(3 3 3 3) val) (format #t " Running ~d/~d" 662 743) (add-error '(let ((bytevector (make-bytevector 4))) (bytevector-fill! bytevector 3) bytevector) '#vu8(3 3 3 3) val)))(display "")(let1 val (begin (let ((b #vu8(1 2 3 4 5 6 7 8))) (bytevector-copy! b 0 b 3 4) b)) (if (equal? '#vu8(1 2 3 1 2 3 4 8) val) (format #t " Running ~d/~d" 663 743) (begin (add-error '(let ((b #vu8(1 2 3 4 5 6 7 8))) (bytevector-copy! b 0 b 3 4) b) '#vu8(1 2 3 1 2 3 4 8) val))))
(display "")(let1 val (begin (bytevector-copy #vu8(1 2 3 4))) (if (equal? '#vu8(1 2 3 4) val) (format #t " Running ~d/~d" 664 743) (begin (add-error '(bytevector-copy #vu8(1 2 3 4)) '#vu8(1 2 3 4) val))))
(display "")(let1 val (begin (bytevector-u8-ref #vu8(255) 0)) (if (equal? '255 val) (format #t " Running ~d/~d" 665 743) (begin (add-error '(bytevector-u8-ref #vu8(255) 0) '255 val))))
(display "")(let1 val (begin (bytevector-u8-ref (make-bytevector 1 -1) 0)) (if (equal? '255 val) (format #t " Running ~d/~d" 666 743) (begin (add-error '(bytevector-u8-ref (make-bytevector 1 -1) 0) '255 val))))
(display "")(let1 val (begin (bytevector-u8-ref (make-bytevector 1 255) 0)) (if (equal? '255 val) (format #t " Running ~d/~d" 667 743) (begin (add-error '(bytevector-u8-ref (make-bytevector 1 255) 0) '255 val))))
(display "")(let1 val (begin (let ((bytevector (make-bytevector 1))) (bytevector-fill! bytevector -1) (bytevector-u8-ref bytevector 0))) (if (equal? '255 val) (format #t " Running ~d/~d" 668 743) (begin (add-error '(let ((bytevector (make-bytevector 1))) (bytevector-fill! bytevector -1) (bytevector-u8-ref bytevector 0)) '255 val))))
(display "")(let1 val (begin (bytevector-s8-ref #vu8(255) 0)) (if (equal? '-1 val) (format #t " Running ~d/~d" 669 743) (begin (add-error '(bytevector-s8-ref #vu8(255) 0) '-1 val))))
(display "")(let1 val (begin (bytevector-s8-ref (make-bytevector 1 -1) 0)) (if (equal? '-1 val) (format #t " Running ~d/~d" 670 743) (begin (add-error '(bytevector-s8-ref (make-bytevector 1 -1) 0) '-1 val))))
(display "")(let1 val (begin (bytevector-s8-ref (make-bytevector 1 255) 0)) (if (equal? '-1 val) (format #t " Running ~d/~d" 671 743) (begin (add-error '(bytevector-s8-ref (make-bytevector 1 255) 0) '-1 val))))
(display "")(let1 val (begin (let ((bytevector (make-bytevector 1))) (bytevector-fill! bytevector -1) (bytevector-s8-ref bytevector 0))) (if (equal? '-1 val) (format #t " Running ~d/~d" 672 743) (begin (add-error '(let ((bytevector (make-bytevector 1))) (bytevector-fill! bytevector -1) (bytevector-s8-ref bytevector 0)) '-1 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 1))) (bytevector-u8-set! b 0 255) (bytevector-u8-ref b 0))) (if (equal? '255 val) (format #t " Running ~d/~d" 673 743) (begin (add-error '(let ((b (make-bytevector 1))) (bytevector-u8-set! b 0 255) (bytevector-u8-ref b 0)) '255 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 1))) (bytevector-s8-set! b 0 -1) (bytevector-u8-ref b 0))) (if (equal? '255 val) (format #t " Running ~d/~d" 674 743) (begin (add-error '(let ((b (make-bytevector 1))) (bytevector-s8-set! b 0 -1) (bytevector-u8-ref b 0)) '255 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u8-ref 1 (make-bytevector 1)))) (format #t " Running ~d/~d" 675 743) (add-error '(bytevector-u8-ref 1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-s8-ref 1 (make-bytevector 1)))) (format #t " Running ~d/~d" 676 743) (add-error '(bytevector-s8-ref 1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u8-ref -1 (make-bytevector 1)))) (format #t " Running ~d/~d" 677 743) (add-error '(bytevector-u8-ref -1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-s8-ref -1 (make-bytevector 1)))) (format #t " Running ~d/~d" 678 743) (add-error '(bytevector-s8-ref -1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u8-set! 1 (make-bytevector 1)) 1)) (format #t " Running ~d/~d" 679 743) (add-error '(bytevector-u8-set! 1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-s8-set! 1 (make-bytevector 1)) 1)) (format #t " Running ~d/~d" 680 743) (add-error '(bytevector-s8-set! 1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u8-set! -1 (make-bytevector 1)) 1)) (format #t " Running ~d/~d" 681 743) (add-error '(bytevector-u8-set! -1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-s8-set! -1 (make-bytevector 1)) 1)) (format #t " Running ~d/~d" 682 743) (add-error '(bytevector-s8-set! -1 (make-bytevector 1)) 'error val))(display "")(let1 val (begin (u8-list->bytevector '(1 2 3 4))) (if (equal? '#vu8(1 2 3 4) val) (format #t " Running ~d/~d" 683 743) (begin (add-error '(u8-list->bytevector '(1 2 3 4)) '#vu8(1 2 3 4) val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (u8-list->bytevector '(1 2 3 -1 4)))) (format #t " Running ~d/~d" 684 743) (add-error '(u8-list->bytevector '(1 2 3 -1 4)) 'error val))(display "")(let1 val (begin (bytevector->u8-list #vu8(1 2 3 4))) (if (equal? '(1 2 3 4) val) (format #t " Running ~d/~d" 685 743) (begin (add-error '(bytevector->u8-list #vu8(1 2 3 4)) '(1 2 3 4) val))))
(display "")(let1 val (begin (bytevector-u16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'little)) (if (equal? '65023 val) (format #t " Running ~d/~d" 686 743) (begin (add-error '(bytevector-u16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'little) '65023 val))))
(display "")(let1 val (begin (bytevector-s16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'little)) (if (equal? '-513 val) (format #t " Running ~d/~d" 687 743) (begin (add-error '(bytevector-s16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'little) '-513 val))))
(display "")(let1 val (begin (bytevector-u16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'big)) (if (equal? '65533 val) (format #t " Running ~d/~d" 688 743) (begin (add-error '(bytevector-u16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'big) '65533 val))))
(display "")(let1 val (begin (bytevector-s16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'big)) (if (equal? '-3 val) (format #t " Running ~d/~d" 689 743) (begin (add-error '(bytevector-s16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'big) '-3 val))))
(display "")(let1 val (begin (bytevector-u16-ref #vu8(255 0) 0 'little)) (if (equal? '255 val) (format #t " Running ~d/~d" 690 743) (begin (add-error '(bytevector-u16-ref #vu8(255 0) 0 'little) '255 val))))
(display "")(let1 val (begin (bytevector-u16-ref #vu8(255 0) 0 'big)) (if (equal? '65280 val) (format #t " Running ~d/~d" 691 743) (begin (add-error '(bytevector-u16-ref #vu8(255 0) 0 'big) '65280 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u16-ref #vu8(255 0) 1 'little))) (format #t " Running ~d/~d" 692 743) (add-error '(bytevector-u16-ref #vu8(255 0) 1 'little) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u16-ref #vu8(255 0) 1 'big))) (format #t " Running ~d/~d" 693 743) (add-error '(bytevector-u16-ref #vu8(255 0) 1 'big) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u16-native-ref #vu8(255 0 1 2) 1))) (format #t " Running ~d/~d" 694 743) (add-error '(bytevector-u16-native-ref #vu8(255 0 1 2) 1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-s16-native-ref #vu8(255 0 1 2) 1))) (format #t " Running ~d/~d" 695 743) (add-error '(bytevector-s16-native-ref #vu8(255 0 1 2) 1) 'error val))(display "")(let1 val (begin (= (bytevector-u16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 (native-endianness)) (bytevector-u16-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14))) (if (equal? '#t val) (format #t " Running ~d/~d" 696 743) (begin (add-error '(= (bytevector-u16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 (native-endianness)) (bytevector-u16-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14)) '#t val))))
(display "")(let1 val (begin (= (bytevector-s16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 (native-endianness)) (bytevector-s16-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14))) (if (equal? '#t val) (format #t " Running ~d/~d" 697 743) (begin (add-error '(= (bytevector-s16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 (native-endianness)) (bytevector-s16-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14)) '#t val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0))) (bytevector-u16-set! b 0 12345 'little) (bytevector-u16-ref b 0 'little))) (if (equal? '12345 val) (format #t " Running ~d/~d" 698 743) (begin (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-u16-set! b 0 12345 'little) (bytevector-u16-ref b 0 'little)) '12345 val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0))) (bytevector-u16-set! b 0 12345 'big) (bytevector-u16-ref b 0 'big))) (if (equal? '12345 val) (format #t " Running ~d/~d" 699 743) (begin (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-u16-set! b 0 12345 'big) (bytevector-u16-ref b 0 'big)) '12345 val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0))) (bytevector-s16-set! b 0 12345 'little) (bytevector-s16-ref b 0 'little))) (if (equal? '12345 val) (format #t " Running ~d/~d" 700 743) (begin (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-s16-set! b 0 12345 'little) (bytevector-s16-ref b 0 'little)) '12345 val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0))) (bytevector-s16-set! b 0 12345 'big) (bytevector-s16-ref b 0 'big))) (if (equal? '12345 val) (format #t " Running ~d/~d" 701 743) (begin (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-s16-set! b 0 12345 'big) (bytevector-s16-ref b 0 'big)) '12345 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (let ((b #vu8(0 0 0 0 0))) (bytevector-s16-set! b 0 32768 'little) (bytevector-s16-ref b 0 'little)))) (format #t " Running ~d/~d" 702 743) (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-s16-set! b 0 32768 'little) (bytevector-s16-ref b 0 'little)) 'error val))(display "")(let1 val (begin (let ((b #vu8(0 0 0 0))) (bytevector-u16-set! b 0 12345 (native-endianness)) (bytevector-u16-native-set! b 2 12345) (= (bytevector-u16-native-ref b 0) (bytevector-u16-native-ref b 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 703 743) (begin (add-error '(let ((b #vu8(0 0 0 0))) (bytevector-u16-set! b 0 12345 (native-endianness)) (bytevector-u16-native-set! b 2 12345) (= (bytevector-u16-native-ref b 0) (bytevector-u16-native-ref b 2))) '#t val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0))) (bytevector-s16-set! b 0 12345 (native-endianness)) (bytevector-s16-native-set! b 2 12345) (= (bytevector-s16-native-ref b 0) (bytevector-s16-native-ref b 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 704 743) (begin (add-error '(let ((b #vu8(0 0 0 0))) (bytevector-s16-set! b 0 12345 (native-endianness)) (bytevector-s16-native-set! b 2 12345) (= (bytevector-s16-native-ref b 0) (bytevector-s16-native-ref b 2))) '#t val))))
(display "")(let1 val (begin (bytevector-u32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'little)) (if (equal? '-33554433 val) (format #t " Running ~d/~d" 705 743) (begin (add-error '(bytevector-u32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'little) '-33554433 val))))
(display "")(let1 val (begin (bytevector-s32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'little)) (if (equal? '-33554433 val) (format #t " Running ~d/~d" 706 743) (begin (add-error '(bytevector-s32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'little) '-33554433 val))))
(display "")(let1 val (begin (bytevector-u32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'big)) (if (equal? '-3 val) (format #t " Running ~d/~d" 707 743) (begin (add-error '(bytevector-u32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'big) '-3 val))))
(display "")(let1 val (begin (bytevector-s32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'big)) (if (equal? '-3 val) (format #t " Running ~d/~d" 708 743) (begin (add-error '(bytevector-s32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'big) '-3 val))))
(display "")(let1 val (begin (= (bytevector-u32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 (native-endianness)) (bytevector-u32-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12))) (if (equal? '#t val) (format #t " Running ~d/~d" 709 743) (begin (add-error '(= (bytevector-u32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 (native-endianness)) (bytevector-u32-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12)) '#t val))))
(display "")(let1 val (begin (= (bytevector-s32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 (native-endianness)) (bytevector-s32-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12))) (if (equal? '#t val) (format #t " Running ~d/~d" 710 743) (begin (add-error '(= (bytevector-s32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 (native-endianness)) (bytevector-s32-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12)) '#t val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0))) (bytevector-u32-set! b 0 12345 'little) (bytevector-u32-ref b 0 'little))) (if (equal? '12345 val) (format #t " Running ~d/~d" 711 743) (begin (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-u32-set! b 0 12345 'little) (bytevector-u32-ref b 0 'little)) '12345 val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0))) (bytevector-u32-set! b 0 12345 'big) (bytevector-u32-ref b 0 'big))) (if (equal? '12345 val) (format #t " Running ~d/~d" 712 743) (begin (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-u32-set! b 0 12345 'big) (bytevector-u32-ref b 0 'big)) '12345 val))))
(display "")(let1 val (begin (bytevector-u64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'little)) (if (equal? '-1 val) (format #t " Running ~d/~d" 713 743) (begin (add-error '(bytevector-u64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'little) '-1 val))))
(display "")(let1 val (begin (bytevector-s64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'little)) (if (equal? '-1 val) (format #t " Running ~d/~d" 714 743) (begin (add-error '(bytevector-s64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'little) '-1 val))))
(display "")(let1 val (begin (bytevector-s64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'big)) (if (equal? '-3 val) (format #t " Running ~d/~d" 715 743) (begin (add-error '(bytevector-s64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'big) '-3 val))))
(display "")(let1 val (begin (= (bytevector-u64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 (native-endianness)) (bytevector-u64-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8))) (if (equal? '#t val) (format #t " Running ~d/~d" 716 743) (begin (add-error '(= (bytevector-u64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 (native-endianness)) (bytevector-u64-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8)) '#t val))))
(display "")(let1 val (begin (= (bytevector-s64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 (native-endianness)) (bytevector-s64-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8))) (if (equal? '#t val) (format #t " Running ~d/~d" 717 743) (begin (add-error '(= (bytevector-s64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 (native-endianness)) (bytevector-s64-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8)) '#t val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0 0 0 0))) (bytevector-u64-set! b 0 12345 'little) (bytevector-u64-ref b 0 'little))) (if (equal? '12345 val) (format #t " Running ~d/~d" 718 743) (begin (add-error '(let ((b #vu8(0 0 0 0 0 0 0 0))) (bytevector-u64-set! b 0 12345 'little) (bytevector-u64-ref b 0 'little)) '12345 val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0 0 0 0))) (bytevector-u64-set! b 0 12345 'big) (bytevector-u64-ref b 0 'big))) (if (equal? '12345 val) (format #t " Running ~d/~d" 719 743) (begin (add-error '(let ((b #vu8(0 0 0 0 0 0 0 0))) (bytevector-u64-set! b 0 12345 'big) (bytevector-u64-ref b 0 'big)) '12345 val))))
(display "")(let1 val (begin (utf8->string #vu8(227 129 130 227 129 132 227 129 134))) (if (equal? '"あいう" val) (format #t " Running ~d/~d" 720 743) (begin (add-error '(utf8->string #vu8(227 129 130 227 129 132 227 129 134)) '"あいう" val))))
(display "")(let1 val (begin (bytevector->string #vu8(227 129 130 227 129 132 227 129 134) (make-transcoder (utf-8-codec)))) (if (equal? '"あいう" val) (format #t " Running ~d/~d" 721 743) (begin (add-error '(bytevector->string #vu8(227 129 130 227 129 132 227 129 134) (make-transcoder (utf-8-codec))) '"あいう" val))))
(display "")(let1 val (begin (string->bytevector "あいう" (make-transcoder (utf-8-codec)))) (if (equal? '#vu8(227 129 130 227 129 132 227 129 134) val) (format #t " Running ~d/~d" 722 743) (begin (add-error '(string->bytevector "あいう" (make-transcoder (utf-8-codec))) '#vu8(227 129 130 227 129 132 227 129 134) val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector->string #vu8(129 130 227 129 132 227 129 134) (make-transcoder (utf-8-codec))))) (format #t " Running ~d/~d" 723 743) (add-error '(bytevector->string #vu8(129 130 227 129 132 227 129 134) (make-transcoder (utf-8-codec))) 'error val))(display "")(let1 val (begin (string->utf8 "あいう")) (if (equal? '#vu8(227 129 130 227 129 132 227 129 134) val) (format #t " Running ~d/~d" 724 743) (begin (add-error '(string->utf8 "あいう") '#vu8(227 129 130 227 129 132 227 129 134) val))))
(display "")(let1 val (begin (string->utf32 "appλe" 'little)) (if (equal? '#vu8(97 0 0 0 112 0 0 0 112 0 0 0 187 3 0 0 101 0 0 0) val) (format #t " Running ~d/~d" 725 743) (begin (add-error '(string->utf32 "appλe" 'little) '#vu8(97 0 0 0 112 0 0 0 112 0 0 0 187 3 0 0 101 0 0 0) val))))
(display "")(let1 val (begin (string->utf32 "appλe" 'big)) (if (equal? '#vu8(0 0 0 97 0 0 0 112 0 0 0 112 0 0 3 187 0 0 0 101) val) (format #t " Running ~d/~d" 726 743) (begin (add-error '(string->utf32 "appλe" 'big) '#vu8(0 0 0 97 0 0 0 112 0 0 0 112 0 0 3 187 0 0 0 101) val))))
(display "")(let1 val (begin (string->utf32 "appλe")) (if (equal? '#vu8(0 0 0 97 0 0 0 112 0 0 0 112 0 0 3 187 0 0 0 101) val) (format #t " Running ~d/~d" 727 743) (begin (add-error '(string->utf32 "appλe") '#vu8(0 0 0 97 0 0 0 112 0 0 0 112 0 0 3 187 0 0 0 101) val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (string->utf32 "appλe" 'hoge))) (format #t " Running ~d/~d" 728 743) (add-error '(string->utf32 "appλe" 'hoge) 'error val))(display "")(let1 val (begin (and (let ((str "apple")) (string=? str (utf32->string (string->utf32 str 'big) 'big))) (let ((str "appλe")) (string=? str (utf32->string (string->utf32 str 'big) 'big))) (let ((str "")) (string=? str (utf32->string (string->utf32 str 'big) 'big))) #t)) (if (equal? '#t val) (format #t " Running ~d/~d" 729 743) (begin (add-error '(and (let ((str "apple")) (string=? str (utf32->string (string->utf32 str 'big) 'big))) (let ((str "appλe")) (string=? str (utf32->string (string->utf32 str 'big) 'big))) (let ((str "")) (string=? str (utf32->string (string->utf32 str 'big) 'big))) #t) '#t val))))
(display "")(let1 val (begin (and (let ((str "apple")) (string=? str (utf32->string (string->utf32 str 'little) 'little))) (let ((str "appλe")) (string=? str (utf32->string (string->utf32 str 'little) 'little))) (let ((str "")) (string=? str (utf32->string (string->utf32 str 'little) 'little))) #t)) (if (equal? '#t val) (format #t " Running ~d/~d" 730 743) (begin (add-error '(and (let ((str "apple")) (string=? str (utf32->string (string->utf32 str 'little) 'little))) (let ((str "appλe")) (string=? str (utf32->string (string->utf32 str 'little) 'little))) (let ((str "")) (string=? str (utf32->string (string->utf32 str 'little) 'little))) #t) '#t val))))
(display "")(let1 val (begin (let ((str "apple") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? str (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'big)) (string=? str (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'little)) #t))) (if (equal? '#t val) (format #t " Running ~d/~d" 731 743) (begin (add-error '(let ((str "apple") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? str (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'big)) (string=? str (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'little)) #t)) '#t val))))
(display "")(let1 val (begin (let ((str "appλe") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? str (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'big)) (string=? str (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'little)) #t))) (if (equal? '#t val) (format #t " Running ~d/~d" 732 743) (begin (add-error '(let ((str "appλe") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? str (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'big)) (string=? str (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'little)) #t)) '#t val))))
(display "")(let1 val (begin (let ((str "apple") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? str (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'big)) (string=? str (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'little))))) (if (equal? '#t val) (format #t " Running ~d/~d" 733 743) (begin (add-error '(let ((str "apple") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? str (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'big)) (string=? str (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'little)))) '#t val))))
(display "")(let1 val (begin (let ((str "appλe") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(254 255 0 0) (string->utf32 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(0 0 255 254) (string->utf32 str 'big)) 'big #t) (string-append "￾" str))))) (if (equal? '#t val) (format #t " Running ~d/~d" 734 743) (begin (add-error '(let ((str "appλe") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(254 255 0 0) (string->utf32 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(0 0 255 254) (string->utf32 str 'big)) 'big #t) (string-append "￾" str)))) '#t val))))
(display "")(let1 val (begin (let ((str "") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(254 255 0 0) (string->utf32 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(0 0 255 254) (string->utf32 str 'big)) 'big #t) (string-append "￾" str))))) (if (equal? '#t val) (format #t " Running ~d/~d" 735 743) (begin (add-error '(let ((str "") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(254 255 0 0) (string->utf32 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(0 0 255 254) (string->utf32 str 'big)) 'big #t) (string-append "￾" str)))) '#t val))))
(display "")(let1 val (begin (let ((str "") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(254 255 0 0) (string->utf32 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(0 0 255 254) (string->utf32 str 'big)) 'big #t) (string-append "￾" str))))) (if (equal? '#t val) (format #t " Running ~d/~d" 736 743) (begin (add-error '(let ((str "") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(254 255 0 0) (string->utf32 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(0 0 255 254) (string->utf32 str 'big)) 'big #t) (string-append "￾" str)))) '#t val))))
(display "")(let1 val (begin (string->utf16 "appλe" 'little)) (if (equal? '#vu8(97 0 112 0 112 0 187 3 101 0) val) (format #t " Running ~d/~d" 737 743) (begin (add-error '(string->utf16 "appλe" 'little) '#vu8(97 0 112 0 112 0 187 3 101 0) val))))
(display "")(let1 val (begin (string->utf16 "appλe" 'big)) (if (equal? '#vu8(0 97 0 112 0 112 3 187 0 101) val) (format #t " Running ~d/~d" 738 743) (begin (add-error '(string->utf16 "appλe" 'big) '#vu8(0 97 0 112 0 112 3 187 0 101) val))))
(display "")(let1 val (begin (string->utf16 "appλe")) (if (equal? '#vu8(0 97 0 112 0 112 3 187 0 101) val) (format #t " Running ~d/~d" 739 743) (begin (add-error '(string->utf16 "appλe") '#vu8(0 97 0 112 0 112 3 187 0 101) val))))
(display "")(let1 val (begin (and (let ((str "apple")) (string=? str (utf16->string (string->utf16 str 'big) 'big))) (let ((str "appλe")) (string=? str (utf16->string (string->utf16 str 'big) 'big))) (let ((str "")) (string=? str (utf16->string (string->utf16 str 'big) 'big))) #t)) (if (equal? '#t val) (format #t " Running ~d/~d" 740 743) (begin (add-error '(and (let ((str "apple")) (string=? str (utf16->string (string->utf16 str 'big) 'big))) (let ((str "appλe")) (string=? str (utf16->string (string->utf16 str 'big) 'big))) (let ((str "")) (string=? str (utf16->string (string->utf16 str 'big) 'big))) #t) '#t val))))
(display "")(let1 val (begin (let ((str "apple") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'big) str) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'little) str) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'big)) 'big #t) (string-append "￾" str))))) (if (equal? '#t val) (format #t " Running ~d/~d" 741 743) (begin (add-error '(let ((str "apple") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'big) str) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'little) str) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'big)) 'big #t) (string-append "￾" str)))) '#t val))))
(display "")(let1 val (begin (let ((str "appλe") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'big) str) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'little) str) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'big)) 'big #t) (string-append "￾" str))))) (if (equal? '#t val) (format #t " Running ~d/~d" 742 743) (begin (add-error '(let ((str "appλe") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'big) str) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'little) str) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'big)) 'big #t) (string-append "￾" str)))) '#t val))))
(display "")(let1 val (begin (let ((str "") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'big) str) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'little) str) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'big)) 'big #t) (string-append "￾" str))))) (if (equal? '#t val) (format #t " Running ~d/~d" 743 743) (begin (add-error '(let ((str "") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'big) str) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'little) str) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'big)) 'big #t) (string-append "￾" str)))) '#t val))))
(display "")(format #t " Running ~d/~d " (- 743 (length errors)) 743)(when (> (length errors) 0) (write '(newline)) (format #t "    === ~d error(s) =========\n" (length errors)) (for-each (lambda (error) (format #t "     ~a : expected ~a but got ~a.\n" (first error) (second error) (third error))) errors))(when (zero? (length errors)) (display "  \n ... passed"))(newline)(newline)