(define errors '())(define todo-num 0)(define (add-error test expected got) (set! errors (append errors (list (list test expected got)))))(display "")(let1 val (begin #t) (if (equal? '#t val) (format #t " Running ~d/~d" 1 1775) (begin (add-error '#t '#t val))))
(display "")(let1 val (begin (source-info '(3))) (if (equal? '("all-tests.scm" 2) val) (format #t " Running ~d/~d" 2 1775) (add-error '(source-info '(3)) '("all-tests.scm" 2) val)))(display "")(let1 val (begin (and)) (if (equal? '#t val) (format #t " Running ~d/~d" 3 1775) (begin (add-error '(and) '#t val))))
(display "")(let1 val (begin 3) (if (equal? '3 val) (format #t " Running ~d/~d" 4 1775) (begin (add-error '3 '3 val))))
(display "")(let1 val (begin 4) (if (equal? '4 val) (format #t " Running ~d/~d" 5 1775) (begin (add-error '4 '4 val))))
(display "")(let1 val (begin (if #f #f #t)) (if (equal? '#t val) (format #t " Running ~d/~d" 6 1775) (begin (add-error '(if #f #f #t) '#t val))))
(display "")(let1 val (begin ((lambda (a) 3) 4)) (if (equal? '3 val) (format #t " Running ~d/~d" 7 1775) (begin (add-error '((lambda (a) 3) 4) '3 val))))
(display "")(let1 val (begin ((lambda (a) (if 3 7 5)) 6)) (if (equal? '7 val) (format #t " Running ~d/~d" 8 1775) (begin (add-error '((lambda (a) (if 3 7 5)) 6) '7 val))))
(display "")(let1 val (begin ((lambda () 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 9 1775) (begin (add-error '((lambda () 3)) '3 val))))
(display "")(let1 val (begin ((lambda (a) a) 101)) (if (equal? '101 val) (format #t " Running ~d/~d" 10 1775) (begin (add-error '((lambda (a) a) 101) '101 val))))
(display "")(let1 val (begin (((lambda () (lambda () 102))))) (if (equal? '102 val) (format #t " Running ~d/~d" 11 1775) (begin (add-error '(((lambda () (lambda () 102)))) '102 val))))
(display "")(let1 val (begin (((lambda () (lambda (a) 102))) 101)) (if (equal? '102 val) (format #t " Running ~d/~d" 12 1775) (begin (add-error '(((lambda () (lambda (a) 102))) 101) '102 val))))
(display "")(let1 val (begin (((lambda () (lambda (a) a))) 103)) (if (equal? '103 val) (format #t " Running ~d/~d" 13 1775) (begin (add-error '(((lambda () (lambda (a) a))) 103) '103 val))))
(display "")(let1 val (begin (((lambda (a) (lambda () a)) 10))) (if (equal? '10 val) (format #t " Running ~d/~d" 14 1775) (begin (add-error '(((lambda (a) (lambda () a)) 10)) '10 val))))
(display "")(let1 val (begin ((lambda (a) (set! a 12) a) 2)) (if (equal? '12 val) (format #t " Running ~d/~d" 15 1775) (begin (add-error '((lambda (a) (set! a 12) a) 2) '12 val))))
(display "")(let1 val (begin ((lambda (a) ((lambda () (set! a 101)))) '())) (if (equal? '101 val) (format #t " Running ~d/~d" 16 1775) (begin (add-error '((lambda (a) ((lambda () (set! a 101)))) '()) '101 val))))
(set! todo-num (+ todo-num 1))(display "")(let1 val (begin (call/cc (lambda (c) (c 4)))) (if (equal? '4 val) (format #t " Running ~d/~d" 18 1775) (begin (add-error '(call/cc (lambda (c) (c 4))) '4 val))))
(display "")(let1 val (begin (receive a (call/cc (lambda (c) (c 1 2 3))) a)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 19 1775) (begin (add-error '(receive a (call/cc (lambda (c) (c 1 2 3))) a) '(1 2 3) val))))
(display "")(let1 val (begin (receive a (call/cc (lambda (c) (c 1 2))) a)) (if (equal? '(1 2) val) (format #t " Running ~d/~d" 20 1775) (begin (add-error '(receive a (call/cc (lambda (c) (c 1 2))) a) '(1 2) val))))
(display "")(let1 val (begin (receive a (call/cc (lambda (c) (c 1))) a)) (if (equal? '(1) val) (format #t " Running ~d/~d" 21 1775) (begin (add-error '(receive a (call/cc (lambda (c) (c 1))) a) '(1) val))))
(display "")(let1 val (begin ((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) (cont #f) 3)) '())) (if (equal? '3 val) (format #t " Running ~d/~d" 22 1775) (begin (add-error '((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) (cont #f) 3)) '()) '3 val))))
(display "")(let1 val (begin ((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) ((lambda () ((lambda () (cont #f))))) 102)) '())) (if (equal? '102 val) (format #t " Running ~d/~d" 23 1775) (begin (add-error '((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) ((lambda () ((lambda () (cont #f))))) 102)) '()) '102 val))))
(display "")(let1 val (begin ((lambda () 3 4 5))) (if (equal? '5 val) (format #t " Running ~d/~d" 24 1775) (begin (add-error '((lambda () 3 4 5)) '5 val))))
(display "")(let1 val (begin (number? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 25 1775) (begin (add-error '(number? 3) '#t val))))
(display "")(let1 val (begin (number? 'a)) (if (equal? '#f val) (format #t " Running ~d/~d" 26 1775) (begin (add-error '(number? 'a) '#f val))))
(display "")(let1 val (begin (number? 'a)) (if (equal? '#f val) (format #t " Running ~d/~d" 27 1775) (begin (add-error '(number? 'a) '#f val))))
(display "")(let1 val (begin (+ 4)) (if (equal? '4 val) (format #t " Running ~d/~d" 28 1775) (begin (add-error '(+ 4) '4 val))))
(display "")(let1 val (begin (+ 4 3)) (if (equal? '7 val) (format #t " Running ~d/~d" 29 1775) (begin (add-error '(+ 4 3) '7 val))))
(display "")(let1 val (begin (+ 4 3 10)) (if (equal? '17 val) (format #t " Running ~d/~d" 30 1775) (begin (add-error '(+ 4 3 10) '17 val))))
(display "")(let1 val (begin (+ 1 1 1 1)) (if (equal? '4 val) (format #t " Running ~d/~d" 31 1775) (begin (add-error '(+ 1 1 1 1) '4 val))))
(display "")(let1 val (begin (- 10 5)) (if (equal? '5 val) (format #t " Running ~d/~d" 32 1775) (begin (add-error '(- 10 5) '5 val))))
(display "")(let1 val (begin (- 10 5 2)) (if (equal? '3 val) (format #t " Running ~d/~d" 33 1775) (begin (add-error '(- 10 5 2) '3 val))))
(display "")(let1 val (begin (cons 'a 'b)) (if (equal? '(a . b) val) (format #t " Running ~d/~d" 34 1775) (begin (add-error '(cons 'a 'b) '(a . b) val))))
(display "")(let1 val (begin (car (cons 2 3))) (if (equal? '2 val) (format #t " Running ~d/~d" 35 1775) (begin (add-error '(car (cons 2 3)) '2 val))))
(display "")(let1 val (begin (cdr (cons 2 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 36 1775) (begin (add-error '(cdr (cons 2 3)) '3 val))))
(display "")(let1 val (begin (cadr (cons 2 (cons 3 '())))) (if (equal? '3 val) (format #t " Running ~d/~d" 37 1775) (begin (add-error '(cadr (cons 2 (cons 3 '()))) '3 val))))
(display "")(let1 val (begin (= 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 38 1775) (begin (add-error '(= 3 3) '#t val))))
(display "")(let1 val (begin (= 3 4)) (if (equal? '#f val) (format #t " Running ~d/~d" 39 1775) (begin (add-error '(= 3 4) '#f val))))
(display "")(let1 val (begin (let ((a 3)) a)) (if (equal? '3 val) (format #t " Running ~d/~d" 40 1775) (begin (add-error '(let ((a 3)) a) '3 val))))
(display "")(let1 val (begin (let ((a 3) (b 1)) b)) (if (equal? '1 val) (format #t " Running ~d/~d" 41 1775) (begin (add-error '(let ((a 3) (b 1)) b) '1 val))))
(display "")(let1 val (begin (let ((a 3) (b 1)) a)) (if (equal? '3 val) (format #t " Running ~d/~d" 42 1775) (begin (add-error '(let ((a 3) (b 1)) a) '3 val))))
(display "")(let1 val (begin (let ((a 3) (b 1)) a b)) (if (equal? '1 val) (format #t " Running ~d/~d" 43 1775) (begin (add-error '(let ((a 3) (b 1)) a b) '1 val))))
(display "")(let1 val (begin (let1 a 3 a)) (if (equal? '3 val) (format #t " Running ~d/~d" 44 1775) (begin (add-error '(let1 a 3 a) '3 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b 4 b))) (if (equal? '4 val) (format #t " Running ~d/~d" 45 1775) (begin (add-error '(let1 a 3 (let1 b 4 b)) '4 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b 4 a))) (if (equal? '3 val) (format #t " Running ~d/~d" 46 1775) (begin (add-error '(let1 a 3 (let1 b 4 a)) '3 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b 4 (+ a b)))) (if (equal? '7 val) (format #t " Running ~d/~d" 47 1775) (begin (add-error '(let1 a 3 (let1 b 4 (+ a b))) '7 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b 4 (let1 c 5 (+ a b c))))) (if (equal? '12 val) (format #t " Running ~d/~d" 48 1775) (begin (add-error '(let1 a 3 (let1 b 4 (let1 c 5 (+ a b c)))) '12 val))))
(display "")(let1 val (begin (let ((a 3) (b 4)) (let1 c 5 (+ a b c)))) (if (equal? '12 val) (format #t " Running ~d/~d" 49 1775) (begin (add-error '(let ((a 3) (b 4)) (let1 c 5 (+ a b c))) '12 val))))
(display "")(let1 val (begin (let ((a 3) (b 4)) (+ (let1 c 5 (+ a b c)) 1))) (if (equal? '13 val) (format #t " Running ~d/~d" 50 1775) (begin (add-error '(let ((a 3) (b 4)) (+ (let1 c 5 (+ a b c)) 1)) '13 val))))
(display "")(let1 val (begin (let1 a 3 (let1 a 4 a))) (if (equal? '4 val) (format #t " Running ~d/~d" 51 1775) (begin (add-error '(let1 a 3 (let1 a 4 a)) '4 val))))
(display "")(let1 val (begin (let1 a 3 (set! a (+ a 1)) (+ a 1))) (if (equal? '5 val) (format #t " Running ~d/~d" 52 1775) (begin (add-error '(let1 a 3 (set! a (+ a 1)) (+ a 1)) '5 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b 4 (set! b a) b))) (if (equal? '3 val) (format #t " Running ~d/~d" 53 1775) (begin (add-error '(let1 a 3 (let1 b 4 (set! b a) b)) '3 val))))
(display "")(let1 val (begin (let ((a 2) (b 3)) a)) (if (equal? '2 val) (format #t " Running ~d/~d" 54 1775) (begin (add-error '(let ((a 2) (b 3)) a) '2 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b (lambda () a) (b)))) (if (equal? '3 val) (format #t " Running ~d/~d" 55 1775) (begin (add-error '(let1 a 3 (let1 b (lambda () a) (b))) '3 val))))
(display "")(let1 val (begin (let ((a 3)) (let ((b (lambda () a))) (b)))) (if (equal? '3 val) (format #t " Running ~d/~d" 56 1775) (begin (add-error '(let ((a 3)) (let ((b (lambda () a))) (b))) '3 val))))
(display "")(let1 val (begin (let ((a 0) (b 1) (c 2)) c)) (if (equal? '2 val) (format #t " Running ~d/~d" 57 1775) (begin (add-error '(let ((a 0) (b 1) (c 2)) c) '2 val))))
(display "")(let1 val (begin (let1 a 1 (let1 b 2 (let1 c a (+ a b c))))) (if (equal? '4 val) (format #t " Running ~d/~d" 58 1775) (begin (add-error '(let1 a 1 (let1 b 2 (let1 c a (+ a b c)))) '4 val))))
(display "")(let1 val (begin (let ((a 3)) a)) (if (equal? '3 val) (format #t " Running ~d/~d" 59 1775) (begin (add-error '(let ((a 3)) a) '3 val))))
(display "")(let1 val (begin (let ((a 3) (b 4)) (+ a b))) (if (equal? '7 val) (format #t " Running ~d/~d" 60 1775) (begin (add-error '(let ((a 3) (b 4)) (+ a b)) '7 val))))
(display "")(let1 val (begin (let* ((a 3) (b (+ a 1))) b)) (if (equal? '4 val) (format #t " Running ~d/~d" 61 1775) (begin (add-error '(let* ((a 3) (b (+ a 1))) b) '4 val))))
(display "")(let1 val (begin (let1 a 3 (let1 b 4 (let1 c (lambda () b) (set! a c))) (a))) (if (equal? '4 val) (format #t " Running ~d/~d" 62 1775) (begin (add-error '(let1 a 3 (let1 b 4 (let1 c (lambda () b) (set! a c))) (a)) '4 val))))
(display "")(let1 val (begin (let ((a 0) (b 1)) (let ((c (lambda () b))) (c)))) (if (equal? '1 val) (format #t " Running ~d/~d" 63 1775) (begin (add-error '(let ((a 0) (b 1)) (let ((c (lambda () b))) (c))) '1 val))))
(display "")(let1 val (begin (let ((a 0) (b 1)) ((lambda () b)))) (if (equal? '1 val) (format #t " Running ~d/~d" 64 1775) (begin (add-error '(let ((a 0) (b 1)) ((lambda () b))) '1 val))))
(display "")(let1 val (begin (let ((a 0) (b 1)) (let ((c (lambda () (set! b 3) b))) (c)))) (if (equal? '3 val) (format #t " Running ~d/~d" 65 1775) (begin (add-error '(let ((a 0) (b 1)) (let ((c (lambda () (set! b 3) b))) (c))) '3 val))))
(display "")(let1 val (begin (let ((a 0) (b 1)) (let1 c (lambda () (set! b 3) b) (c)))) (if (equal? '3 val) (format #t " Running ~d/~d" 66 1775) (begin (add-error '(let ((a 0) (b 1)) (let1 c (lambda () (set! b 3) b) (c))) '3 val))))
(display "")(let1 val (begin (let1 a 100 (let1 c (let1 d (lambda () a) d) (c)))) (if (equal? '100 val) (format #t " Running ~d/~d" 67 1775) (begin (add-error '(let1 a 100 (let1 c (let1 d (lambda () a) d) (c))) '100 val))))
(display "")(let1 val (begin (let ((a '())) (let ((G68 (lambda (i) (if (>= i 1000) i (a (+ i 1)))))) (set! a G68) (a 0)))) (if (equal? '1000 val) (format #t " Running ~d/~d" 68 1775) (begin (add-error '(let ((a '())) (let ((G68 (lambda (i) (if (>= i 1000) i (a (+ i 1)))))) (set! a G68) (a 0))) '1000 val))))
(display "")(let1 val (begin (letrec ((a (lambda (i) (if (>= i 1000) i (a (+ i 1)))))) (a 0))) (if (equal? '1000 val) (format #t " Running ~d/~d" 69 1775) (begin (add-error '(letrec ((a (lambda (i) (if (>= i 1000) i (a (+ i 1)))))) (a 0)) '1000 val))))
(display "")(let1 val (begin (letrec ((a 1) (b (lambda () a))) (b))) (if (equal? '1 val) (format #t " Running ~d/~d" 70 1775) (begin (add-error '(letrec ((a 1) (b (lambda () a))) (b)) '1 val))))
(display "")(let1 val (begin (letrec ((even? (lambda (n) (if (= 0 n) #t (odd? (- n 1))))) (odd? (lambda (n) (if (= 0 n) #f (even? (- n 1)))))) (cons (even? 88) (odd? 88)))) (if (equal? '(#t . #f) val) (format #t " Running ~d/~d" 71 1775) (begin (add-error '(letrec ((even? (lambda (n) (if (= 0 n) #t (odd? (- n 1))))) (odd? (lambda (n) (if (= 0 n) #f (even? (- n 1)))))) (cons (even? 88) (odd? 88))) '(#t . #f) val))))
(display "")(let1 val (begin (letrec ((a (lambda (i) (if (= i 10) i (a (+ i 1)))))) (a 0))) (if (equal? '10 val) (format #t " Running ~d/~d" 72 1775) (begin (add-error '(letrec ((a (lambda (i) (if (= i 10) i (a (+ i 1)))))) (a 0)) '10 val))))
(display "")(let1 val (begin ((lambda (a) (set! a 1000) a) '())) (if (equal? '1000 val) (format #t " Running ~d/~d" 73 1775) (begin (add-error '((lambda (a) (set! a 1000) a) '()) '1000 val))))
(display "")(let1 val (begin ((lambda (a) (set! a (lambda (i) (if (= i 20) i (a (+ i 1))))) (a 0)) '())) (if (equal? '20 val) (format #t " Running ~d/~d" 74 1775) (begin (add-error '((lambda (a) (set! a (lambda (i) (if (= i 20) i (a (+ i 1))))) (a 0)) '()) '20 val))))
(display "")(let1 val (begin (or #f 3 4)) (if (equal? '3 val) (format #t " Running ~d/~d" 75 1775) (begin (add-error '(or #f 3 4) '3 val))))
(display "")(let1 val (begin (define a 3)) (if (equal? '3 val) (format #t " Running ~d/~d" 76 1775) (begin (add-error '(define a 3) '3 val))))
(display "")(let1 val (begin a) (if (equal? '3 val) (format #t " Running ~d/~d" 77 1775) (begin (add-error 'a '3 val))))
(display "")(let1 val (begin (= 3 4)) (if (equal? '#f val) (format #t " Running ~d/~d" 78 1775) (begin (add-error '(= 3 4) '#f val))))
(display "")(let1 val (begin (= 3 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 79 1775) (begin (add-error '(= 3 3 3) '#t val))))
(display "")(let1 val (begin (= 3 4 5)) (if (equal? '#f val) (format #t " Running ~d/~d" 80 1775) (begin (add-error '(= 3 4 5) '#f val))))
(display "")(let1 val (begin (((lambda (a) (lambda () a)) 101))) (if (equal? '101 val) (format #t " Running ~d/~d" 81 1775) (begin (add-error '(((lambda (a) (lambda () a)) 101)) '101 val))))
(display "")(let1 val (begin (((lambda (a) (lambda (b) (+ a b))) 101) 1)) (if (equal? '102 val) (format #t " Running ~d/~d" 82 1775) (begin (add-error '(((lambda (a) (lambda (b) (+ a b))) 101) 1) '102 val))))
(display "")(let1 val (begin (null? '())) (if (equal? '#t val) (format #t " Running ~d/~d" 83 1775) (begin (add-error '(null? '()) '#t val))))
(display "")(let1 val (begin (null? 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 84 1775) (begin (add-error '(null? 3) '#f val))))
(display "")(let1 val (begin (cons 1 2)) (if (equal? '(1 . 2) val) (format #t " Running ~d/~d" 85 1775) (begin (add-error '(cons 1 2) '(1 . 2) val))))
(display "")(let1 val (begin (cons 1 (cons 2 '()))) (if (equal? '(1 2) val) (format #t " Running ~d/~d" 86 1775) (begin (add-error '(cons 1 (cons 2 '())) '(1 2) val))))
(display "")(let1 val (begin (begin 1 2 3)) (if (equal? '3 val) (format #t " Running ~d/~d" 87 1775) (begin (add-error '(begin 1 2 3) '3 val))))
(display "")(let1 val (begin ((lambda () (set! a 4) a))) (if (equal? '4 val) (format #t " Running ~d/~d" 88 1775) (begin (add-error '((lambda () (set! a 4) a)) '4 val))))
(display "")(let1 val (begin ((lambda () ((lambda () 3))))) (if (equal? '3 val) (format #t " Running ~d/~d" 89 1775) (begin (add-error '((lambda () ((lambda () 3)))) '3 val))))
(display "")(let1 val (begin ((lambda () ((lambda (x) x) 3)))) (if (equal? '3 val) (format #t " Running ~d/~d" 90 1775) (begin (add-error '((lambda () ((lambda (x) x) 3))) '3 val))))
(display "")(let1 val (begin ((lambda (y) ((lambda (x) x) 3)) 4)) (if (equal? '3 val) (format #t " Running ~d/~d" 91 1775) (begin (add-error '((lambda (y) ((lambda (x) x) 3)) 4) '3 val))))
(display "")(let1 val (begin ((lambda () (let1 a 1 ((lambda () 3)))))) (if (equal? '3 val) (format #t " Running ~d/~d" 92 1775) (begin (add-error '((lambda () (let1 a 1 ((lambda () 3))))) '3 val))))
(display "")(let1 val (begin ((lambda () (let1 b 2 (let1 a 1 ((lambda () 3))))))) (if (equal? '3 val) (format #t " Running ~d/~d" 93 1775) (begin (add-error '((lambda () (let1 b 2 (let1 a 1 ((lambda () 3)))))) '3 val))))
(display "")(let1 val (begin ((lambda () (if 3 ((lambda () 3)))))) (if (equal? '3 val) (format #t " Running ~d/~d" 94 1775) (begin (add-error '((lambda () (if 3 ((lambda () 3))))) '3 val))))
(display "")(let1 val (begin ((lambda () (if ((lambda () 3)) 4 5)))) (if (equal? '4 val) (format #t " Running ~d/~d" 95 1775) (begin (add-error '((lambda () (if ((lambda () 3)) 4 5))) '4 val))))
(display "")(let1 val (begin (let loop ((i 0)) (if (= i 10) i (let1 a 1 (let1 b 0 (loop (+ i a b))))))) (if (equal? '10 val) (format #t " Running ~d/~d" 96 1775) (begin (add-error '(let loop ((i 0)) (if (= i 10) i (let1 a 1 (let1 b 0 (loop (+ i a b)))))) '10 val))))
(display "")(let1 val (begin (let loop ((i 0)) (if (= i 10) i (let1 a 1 (let1 b 0 (loop (+ i a b))))))) (if (equal? '10 val) (format #t " Running ~d/~d" 97 1775) (begin (add-error '(let loop ((i 0)) (if (= i 10) i (let1 a 1 (let1 b 0 (loop (+ i a b)))))) '10 val))))
(display "")(let1 val (begin ((lambda () (define d (lambda (x y z) (+ x y z))) (d 1 2 3)))) (if (equal? '6 val) (format #t " Running ~d/~d" 98 1775) (begin (add-error '((lambda () (define d (lambda (x y z) (+ x y z))) (d 1 2 3))) '6 val))))
(display "")(let1 val (begin ((lambda () (define b (lambda () 3)) (b)))) (if (equal? '3 val) (format #t " Running ~d/~d" 99 1775) (begin (add-error '((lambda () (define b (lambda () 3)) (b))) '3 val))))
(display "")(let1 val (begin (apply car '((3 2)))) (if (equal? '3 val) (format #t " Running ~d/~d" 100 1775) (begin (add-error '(apply car '((3 2))) '3 val))))
(display "")(let1 val (begin ((lambda a a) 1 2 3)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 101 1775) (begin (add-error '((lambda a a) 1 2 3) '(1 2 3) val))))
(display "")(let1 val (begin ((lambda (a . b) b) 1 2 3)) (if (equal? '(2 3) val) (format #t " Running ~d/~d" 102 1775) (begin (add-error '((lambda (a . b) b) 1 2 3) '(2 3) val))))
(display "")(let1 val (begin ((lambda (a . b) b) 1 2 3 4)) (if (equal? '(2 3 4) val) (format #t " Running ~d/~d" 103 1775) (begin (add-error '((lambda (a . b) b) 1 2 3 4) '(2 3 4) val))))
(display "")(let1 val (begin ((lambda (a b . c) c) 1 2 3 4)) (if (equal? '(3 4) val) (format #t " Running ~d/~d" 104 1775) (begin (add-error '((lambda (a b . c) c) 1 2 3 4) '(3 4) val))))
(display "")(let1 val (begin ((lambda (a b c . d) d) 1 2 3 4)) (if (equal? '(4) val) (format #t " Running ~d/~d" 105 1775) (begin (add-error '((lambda (a b c . d) d) 1 2 3 4) '(4) val))))
(display "")(let1 val (begin ((lambda (a b c . d) d) 1 2 3)) (if (equal? '() val) (format #t " Running ~d/~d" 106 1775) (begin (add-error '((lambda (a b c . d) d) 1 2 3) '() val))))
(display "")(let1 val (begin ((lambda a a))) (if (equal? '() val) (format #t " Running ~d/~d" 107 1775) (begin (add-error '((lambda a a)) '() val))))
(display "")(let1 val (begin ((lambda a a) 1)) (if (equal? '(1) val) (format #t " Running ~d/~d" 108 1775) (begin (add-error '((lambda a a) 1) '(1) val))))
(display "")(let1 val (begin (when #t 1 2 34)) (if (equal? '34 val) (format #t " Running ~d/~d" 109 1775) (begin (add-error '(when #t 1 2 34) '34 val))))
(display "")(let1 val (begin (not 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 110 1775) (begin (add-error '(not 3) '#f val))))
(display "")(let1 val (begin (unless #f 1 2 48)) (if (equal? '48 val) (format #t " Running ~d/~d" 111 1775) (begin (add-error '(unless #f 1 2 48) '48 val))))
(display "")(let1 val (begin (and 3 4 5)) (if (equal? '5 val) (format #t " Running ~d/~d" 112 1775) (begin (add-error '(and 3 4 5) '5 val))))
(display "")(let1 val (begin (let1 a 0 (and (set! a (+ a 1))) a)) (if (equal? '1 val) (format #t " Running ~d/~d" 113 1775) (begin (add-error '(let1 a 0 (and (set! a (+ a 1))) a) '1 val))))
(display "")(let1 val (begin (let1 a 0 (or (set! a (+ a 1))) a)) (if (equal? '1 val) (format #t " Running ~d/~d" 114 1775) (begin (add-error '(let1 a 0 (or (set! a (+ a 1))) a) '1 val))))
(display "")(let1 val (begin (and 3 #f 5)) (if (equal? '#f val) (format #t " Running ~d/~d" 115 1775) (begin (add-error '(and 3 #f 5) '#f val))))
(display "")(let1 val (begin (or 3 4 5)) (if (equal? '3 val) (format #t " Running ~d/~d" 116 1775) (begin (add-error '(or 3 4 5) '3 val))))
(display "")(let1 val (begin (or #f #f #f)) (if (equal? '#f val) (format #t " Running ~d/~d" 117 1775) (begin (add-error '(or #f #f #f) '#f val))))
(display "")(let1 val (begin (> 4 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 118 1775) (begin (add-error '(> 4 3) '#t val))))
(display "")(let1 val (begin (> 4 3 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 119 1775) (begin (add-error '(> 4 3 2) '#t val))))
(display "")(let1 val (begin (> 4 3 1 2)) (if (equal? '#f val) (format #t " Running ~d/~d" 120 1775) (begin (add-error '(> 4 3 1 2) '#f val))))
(display "")(let1 val (begin (>= 3 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 121 1775) (begin (add-error '(>= 3 3 3) '#t val))))
(display "")(let1 val (begin (>= 4 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 122 1775) (begin (add-error '(>= 4 3 3) '#t val))))
(display "")(let1 val (begin (>= 4 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 123 1775) (begin (add-error '(>= 4 3) '#t val))))
(display "")(let1 val (begin (< 1 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 124 1775) (begin (add-error '(< 1 2) '#t val))))
(display "")(let1 val (begin (< 1 2 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 125 1775) (begin (add-error '(< 1 2 3) '#t val))))
(display "")(let1 val (begin (< 1 5 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 126 1775) (begin (add-error '(< 1 5 3) '#f val))))
(display "")(let1 val (begin (<= 1 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 127 1775) (begin (add-error '(<= 1 2) '#t val))))
(display "")(let1 val (begin (<= 1 2 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 128 1775) (begin (add-error '(<= 1 2 3) '#t val))))
(display "")(let1 val (begin (<= 1 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 129 1775) (begin (add-error '(<= 1 3 3) '#t val))))
(display "")(let1 val (begin (<= 1 5 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 130 1775) (begin (add-error '(<= 1 5 3) '#f val))))
(display "")(let1 val (begin (eq? #t #t)) (if (equal? '#t val) (format #t " Running ~d/~d" 131 1775) (begin (add-error '(eq? #t #t) '#t val))))
(display "")(let1 val (begin (eq? #t #f)) (if (equal? '#f val) (format #t " Running ~d/~d" 132 1775) (begin (add-error '(eq? #t #f) '#f val))))
(display "")(let1 val (begin (eq? 'a 'a)) (if (equal? '#t val) (format #t " Running ~d/~d" 133 1775) (begin (add-error '(eq? 'a 'a) '#t val))))
(display "")(let1 val (begin (eq? 'a 'b)) (if (equal? '#f val) (format #t " Running ~d/~d" 134 1775) (begin (add-error '(eq? 'a 'b) '#f val))))
(display "")(let1 val (begin (pair? (cons 1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 135 1775) (begin (add-error '(pair? (cons 1 2)) '#t val))))
(display "")(let1 val (begin (pair? 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 136 1775) (begin (add-error '(pair? 3) '#f val))))
(display "")(let1 val (begin (symbol? 'a)) (if (equal? '#t val) (format #t " Running ~d/~d" 137 1775) (begin (add-error '(symbol? 'a) '#t val))))
(display "")(let1 val (begin (symbol? 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 138 1775) (begin (add-error '(symbol? 3) '#f val))))
(display "")(let1 val (begin (cond (#f 1) (#t 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 139 1775) (begin (add-error '(cond (#f 1) (#t 3)) '3 val))))
(display "")(let1 val (begin (cond (#f 1) (#f 2) (else 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 140 1775) (begin (add-error '(cond (#f 1) (#f 2) (else 3)) '3 val))))
(display "")(let1 val (begin (cond (#t 3) (#f 2) (else 1))) (if (equal? '3 val) (format #t " Running ~d/~d" 141 1775) (begin (add-error '(cond (#t 3) (#f 2) (else 1)) '3 val))))
(display "")(let1 val (begin (cond ((cons 1 2) => car) (#f 2) (else 3))) (if (equal? '1 val) (format #t " Running ~d/~d" 142 1775) (begin (add-error '(cond ((cons 1 2) => car) (#f 2) (else 3)) '1 val))))
(display "")(let1 val (begin (apply (lambda (a) a) '(3))) (if (equal? '3 val) (format #t " Running ~d/~d" 143 1775) (begin (add-error '(apply (lambda (a) a) '(3)) '3 val))))
(display "")(let1 val (begin (apply (lambda (a b) (+ a b)) '(5 2))) (if (equal? '7 val) (format #t " Running ~d/~d" 144 1775) (begin (add-error '(apply (lambda (a b) (+ a b)) '(5 2)) '7 val))))
(display "")(let1 val (begin (apply (lambda (a b c) (+ a b c)) '(5 2 1))) (if (equal? '8 val) (format #t " Running ~d/~d" 145 1775) (begin (add-error '(apply (lambda (a b c) (+ a b c)) '(5 2 1)) '8 val))))
(display "")(let1 val (begin (let ((a 0)) `(,a b c))) (if (equal? '(0 b c) val) (format #t " Running ~d/~d" 146 1775) (begin (add-error '(let ((a 0)) `(,a b c)) '(0 b c) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(,a b c))) (if (equal? '((1 2 3) b c) val) (format #t " Running ~d/~d" 147 1775) (begin (add-error '(let ((a '(1 2 3))) `(,a b c)) '((1 2 3) b c) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(,@a b c))) (if (equal? '(1 2 3 b c) val) (format #t " Running ~d/~d" 148 1775) (begin (add-error '(let ((a '(1 2 3))) `(,@a b c)) '(1 2 3 b c) val))))
(display "")(let1 val (begin (let ((name 'a)) `(list ,name ',name))) (if (equal? '(list a 'a) val) (format #t " Running ~d/~d" 149 1775) (begin (add-error '(let ((name 'a)) `(list ,name ',name)) '(list a 'a) val))))
(display "")(let1 val (begin `(list ,(+ 1 2) 4)) (if (equal? '(list 3 4) val) (format #t " Running ~d/~d" 150 1775) (begin (add-error '`(list ,(+ 1 2) 4) '(list 3 4) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(1 unquote a))) (if (equal? '(1 1 2 3) val) (format #t " Running ~d/~d" 151 1775) (begin (add-error '(let ((a '(1 2 3))) `(1 unquote a)) '(1 1 2 3) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `,a)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 152 1775) (begin (add-error '(let ((a '(1 2 3))) `,a) '(1 2 3) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(,@a))) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 153 1775) (begin (add-error '(let ((a '(1 2 3))) `(,@a)) '(1 2 3) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(0 ,@a))) (if (equal? '(0 1 2 3) val) (format #t " Running ~d/~d" 154 1775) (begin (add-error '(let ((a '(1 2 3))) `(0 ,@a)) '(0 1 2 3) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(0 ,a 4))) (if (equal? '(0 (1 2 3) 4) val) (format #t " Running ~d/~d" 155 1775) (begin (add-error '(let ((a '(1 2 3))) `(0 ,a 4)) '(0 (1 2 3) 4) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `(,@a 4))) (if (equal? '(1 2 3 4) val) (format #t " Running ~d/~d" 156 1775) (begin (add-error '(let ((a '(1 2 3))) `(,@a 4)) '(1 2 3 4) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `((,@a) 4))) (if (equal? '((1 2 3) 4) val) (format #t " Running ~d/~d" 157 1775) (begin (add-error '(let ((a '(1 2 3))) `((,@a) 4)) '((1 2 3) 4) val))))
(display "")(let1 val (begin (let ((a '(1 2 3))) `((,a) 4))) (if (equal? '(((1 2 3)) 4) val) (format #t " Running ~d/~d" 158 1775) (begin (add-error '(let ((a '(1 2 3))) `((,a) 4)) '(((1 2 3)) 4) val))))
(display "")(let1 val (begin `b) (if (equal? 'b val) (format #t " Running ~d/~d" 159 1775) (begin (add-error '`b 'b val))))
(display "")(let1 val (begin (list 1 2 3)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 160 1775) (begin (add-error '(list 1 2 3) '(1 2 3) val))))
(display "")(let1 val (begin (aif (+ 1 2) it #f)) (if (equal? '3 val) (format #t " Running ~d/~d" 161 1775) (begin (add-error '(aif (+ 1 2) it #f) '3 val))))
(display "")(let1 val (begin (string-length "abc")) (if (equal? '3 val) (format #t " Running ~d/~d" 162 1775) (begin (add-error '(string-length "abc") '3 val))))
(display "")(let1 val (begin (string-length "あいう")) (if (equal? '3 val) (format #t " Running ~d/~d" 163 1775) (begin (add-error '(string-length "あいう") '3 val))))
(display "")(let1 val (begin (string->symbol "abc")) (if (equal? 'abc val) (format #t " Running ~d/~d" 164 1775) (begin (add-error '(string->symbol "abc") 'abc val))))
(display "")(let1 val (begin (number->string 123)) (if (equal? '"123" val) (format #t " Running ~d/~d" 165 1775) (begin (add-error '(number->string 123) '"123" val))))
(display "")(let1 val (begin (begin (define (proc1 . a) a) (proc1 1 2 3 4))) (if (equal? '(1 2 3 4) val) (format #t " Running ~d/~d" 166 1775) (begin (add-error '(begin (define (proc1 . a) a) (proc1 1 2 3 4)) '(1 2 3 4) val))))
(display "")(let1 val (begin ((lambda (a . b) b) 1 2 3)) (if (equal? '(2 3) val) (format #t " Running ~d/~d" 167 1775) (begin (add-error '((lambda (a . b) b) 1 2 3) '(2 3) val))))
(display "")(let1 val (begin ((lambda (a . b) a) 1 2 3 4 5)) (if (equal? '1 val) (format #t " Running ~d/~d" 168 1775) (begin (add-error '((lambda (a . b) a) 1 2 3 4 5) '1 val))))
(display "")(let1 val (begin ((lambda (a . b) b) 1 2 3 4 5)) (if (equal? '(2 3 4 5) val) (format #t " Running ~d/~d" 169 1775) (begin (add-error '((lambda (a . b) b) 1 2 3 4 5) '(2 3 4 5) val))))
(display "")(let1 val (begin ((lambda (a b c d . e) e) 1 2 3 4)) (if (equal? '() val) (format #t " Running ~d/~d" 170 1775) (begin (add-error '((lambda (a b c d . e) e) 1 2 3 4) '() val))))
(display "")(let1 val (begin ((lambda (a b c d . e) a) 1 2 3 4)) (if (equal? '1 val) (format #t " Running ~d/~d" 171 1775) (begin (add-error '((lambda (a b c d . e) a) 1 2 3 4) '1 val))))
(display "")(let1 val (begin ((lambda (a b c d . e) b) 1 2 3 4)) (if (equal? '2 val) (format #t " Running ~d/~d" 172 1775) (begin (add-error '((lambda (a b c d . e) b) 1 2 3 4) '2 val))))
(display "")(let1 val (begin ((lambda (a b c d . e) c) 1 2 3 4)) (if (equal? '3 val) (format #t " Running ~d/~d" 173 1775) (begin (add-error '((lambda (a b c d . e) c) 1 2 3 4) '3 val))))
(display "")(let1 val (begin ((lambda (a b c d . e) d) 1 2 3 4)) (if (equal? '4 val) (format #t " Running ~d/~d" 174 1775) (begin (add-error '((lambda (a b c d . e) d) 1 2 3 4) '4 val))))
(display "")(let1 val (begin (append '(1 2) '(3 4))) (if (equal? '(1 2 3 4) val) (format #t " Running ~d/~d" 175 1775) (begin (add-error '(append '(1 2) '(3 4)) '(1 2 3 4) val))))
(display "")(let1 val (begin (begin (define x 3) x)) (if (equal? '3 val) (format #t " Running ~d/~d" 176 1775) (begin (add-error '(begin (define x 3) x) '3 val))))
(display "")(let1 val (begin (begin (define (hoge . a) a) (hoge 1 2 3))) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 177 1775) (begin (add-error '(begin (define (hoge . a) a) (hoge 1 2 3)) '(1 2 3) val))))
(display "")(let1 val (begin (begin (define (hige a . b) b) (hige 1 2 3))) (if (equal? '(2 3) val) (format #t " Running ~d/~d" 178 1775) (begin (add-error '(begin (define (hige a . b) b) (hige 1 2 3)) '(2 3) val))))
(display "")(let1 val (begin (apply (lambda a a) '(3 2))) (if (equal? '(3 2) val) (format #t " Running ~d/~d" 179 1775) (begin (add-error '(apply (lambda a a) '(3 2)) '(3 2) val))))
(display "")(let1 val (begin (equal? '(1 2 (3)) '(1 2 (3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 180 1775) (begin (add-error '(equal? '(1 2 (3)) '(1 2 (3))) '#t val))))
(display "")(let1 val (begin (let ((a 3)) 3 2 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 181 1775) (begin (add-error '(let ((a 3)) 3 2 1) '1 val))))
(display "")(let1 val (begin (make-string 3)) (if (equal? '"   " val) (format #t " Running ~d/~d" 182 1775) (begin (add-error '(make-string 3) '"   " val))))
(display "")(let1 val (begin (make-string 3 #\c)) (if (equal? '"ccc" val) (format #t " Running ~d/~d" 183 1775) (begin (add-error '(make-string 3 #\c) '"ccc" val))))
(display "")(let1 val (begin (apply car '((3)))) (if (equal? '3 val) (format #t " Running ~d/~d" 184 1775) (begin (add-error '(apply car '((3))) '3 val))))
(display "")(let1 val (begin (apply (lambda (a) (car a)) '((3)))) (if (equal? '3 val) (format #t " Running ~d/~d" 185 1775) (begin (add-error '(apply (lambda (a) (car a)) '((3))) '3 val))))
(display "")(let1 val (begin (apply (lambda (a . b) (+ a (car b))) '(1 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 186 1775) (begin (add-error '(apply (lambda (a . b) (+ a (car b))) '(1 2)) '3 val))))
(display "")(let1 val (begin (string-append "12" "345" "6")) (if (equal? '"123456" val) (format #t " Running ~d/~d" 187 1775) (begin (add-error '(string-append "12" "345" "6") '"123456" val))))
(display "")(let1 val (begin (find (lambda (e) (= e 3)) (list 1 2 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 188 1775) (begin (add-error '(find (lambda (e) (= e 3)) (list 1 2 3)) '3 val))))
(display "")(let1 val (begin (string? "hige")) (if (equal? '#t val) (format #t " Running ~d/~d" 189 1775) (begin (add-error '(string? "hige") '#t val))))
(display "")(let1 val (begin (assoc "key" '(("key" "value")))) (if (equal? '("key" "value") val) (format #t " Running ~d/~d" 190 1775) (begin (add-error '(assoc "key" '(("key" "value"))) '("key" "value") val))))
(display "")(let1 val (begin (string-split "12\n34\n56" #\newline)) (if (equal? '("12" "34" "56") val) (format #t " Running ~d/~d" 191 1775) (begin (add-error '(string-split "12\n34\n56" #\newline) '("12" "34" "56") val))))
(display "")(let1 val (begin (let ((p (open-string-input-port "12345"))) (read-char p) (read-char p))) (if (equal? '#\2 val) (format #t " Running ~d/~d" 192 1775) (begin (add-error '(let ((p (open-string-input-port "12345"))) (read-char p) (read-char p)) '#\2 val))))
(display "")(let1 val (begin (eof-object? (let ((p (open-string-input-port "1"))) (read-char p) (read-char p)))) (if (equal? '#t val) (format #t " Running ~d/~d" 193 1775) (begin (add-error '(eof-object? (let ((p (open-string-input-port "1"))) (read-char p) (read-char p))) '#t val))))
(display "")(let1 val (begin (let ((p (open-string-input-port "123 456"))) (read p))) (if (equal? '123 val) (format #t " Running ~d/~d" 194 1775) (begin (add-error '(let ((p (open-string-input-port "123 456"))) (read p)) '123 val))))
(display "")(let1 val (begin (rxmatch #/123/ "12")) (if (equal? '#f val) (format #t " Running ~d/~d" 195 1775) (begin (add-error '(rxmatch #/123/ "12") '#f val))))
(display "")(let1 val (begin (if (rxmatch #/123/ "123") #t #f)) (if (equal? '#t val) (format #t " Running ~d/~d" 196 1775) (begin (add-error '(if (rxmatch #/123/ "123") #t #f) '#t val))))
(display "")(let1 val (begin (regexp? #/abc/)) (if (equal? '#t val) (format #t " Running ~d/~d" 197 1775) (begin (add-error '(regexp? #/abc/) '#t val))))
(display "")(let1 val (begin (regexp? "abc")) (if (equal? '#f val) (format #t " Running ~d/~d" 198 1775) (begin (add-error '(regexp? "abc") '#f val))))
(display "")(let1 val (begin (rxmatch-start (rxmatch #/\d+/ "a345a"))) (if (equal? '1 val) (format #t " Running ~d/~d" 199 1775) (begin (add-error '(rxmatch-start (rxmatch #/\d+/ "a345a")) '1 val))))
(display "")(let1 val (begin (rxmatch-start (rxmatch #/\d+/ "ab345a"))) (if (equal? '2 val) (format #t " Running ~d/~d" 200 1775) (begin (add-error '(rxmatch-start (rxmatch #/\d+/ "ab345a")) '2 val))))
(display "")(let1 val (begin (rxmatch-start (rxmatch #/\d+/ "abあ345a"))) (if (equal? '3 val) (format #t " Running ~d/~d" 201 1775) (begin (add-error '(rxmatch-start (rxmatch #/\d+/ "abあ345a")) '3 val))))
(display "")(let1 val (begin (rxmatch-start (rxmatch #/(\d+)(a)/ "a345a") 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 202 1775) (begin (add-error '(rxmatch-start (rxmatch #/(\d+)(a)/ "a345a") 1) '1 val))))
(display "")(let1 val (begin (rxmatch-start (rxmatch #/(\d+)(a)/ "a345a") 2)) (if (equal? '4 val) (format #t " Running ~d/~d" 203 1775) (begin (add-error '(rxmatch-start (rxmatch #/(\d+)(a)/ "a345a") 2) '4 val))))
(display "")(let1 val (begin (rxmatch-end (rxmatch #/\d+/ "a345a"))) (if (equal? '4 val) (format #t " Running ~d/~d" 204 1775) (begin (add-error '(rxmatch-end (rxmatch #/\d+/ "a345a")) '4 val))))
(display "")(let1 val (begin (rxmatch-end (rxmatch #/(\d+)(a)/ "a345a") 1)) (if (equal? '4 val) (format #t " Running ~d/~d" 205 1775) (begin (add-error '(rxmatch-end (rxmatch #/(\d+)(a)/ "a345a") 1) '4 val))))
(display "")(let1 val (begin (rxmatch-end (rxmatch #/(\d+)(a)/ "a345a") 2)) (if (equal? '5 val) (format #t " Running ~d/~d" 206 1775) (begin (add-error '(rxmatch-end (rxmatch #/(\d+)(a)/ "a345a") 2) '5 val))))
(display "")(let1 val (begin (rxmatch-end (rxmatch #/\d+/ "aaaa"))) (if (equal? '#f val) (format #t " Running ~d/~d" 207 1775) (begin (add-error '(rxmatch-end (rxmatch #/\d+/ "aaaa")) '#f val))))
(display "")(let1 val (begin (#/123/ "12")) (if (equal? '#f val) (format #t " Running ~d/~d" 208 1775) (begin (add-error '(#/123/ "12") '#f val))))
(display "")(let1 val (begin (rxmatch-start (#/\d+/ "a345a"))) (if (equal? '1 val) (format #t " Running ~d/~d" 209 1775) (begin (add-error '(rxmatch-start (#/\d+/ "a345a")) '1 val))))
(display "")(let1 val (begin (rxmatch-start (#/\d+/ "ab345a"))) (if (equal? '2 val) (format #t " Running ~d/~d" 210 1775) (begin (add-error '(rxmatch-start (#/\d+/ "ab345a")) '2 val))))
(display "")(let1 val (begin (rxmatch-start (#/\d+/ "abあ345a"))) (if (equal? '3 val) (format #t " Running ~d/~d" 211 1775) (begin (add-error '(rxmatch-start (#/\d+/ "abあ345a")) '3 val))))
(display "")(let1 val (begin (rxmatch-start (#/(\d+)(a)/ "a345a") 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 212 1775) (begin (add-error '(rxmatch-start (#/(\d+)(a)/ "a345a") 1) '1 val))))
(display "")(let1 val (begin (rxmatch-start (#/(\d+)(a)/ "a345a") 2)) (if (equal? '4 val) (format #t " Running ~d/~d" 213 1775) (begin (add-error '(rxmatch-start (#/(\d+)(a)/ "a345a") 2) '4 val))))
(display "")(let1 val (begin (rxmatch-after (#/abc/ "123abcdef"))) (if (equal? '"def" val) (format #t " Running ~d/~d" 214 1775) (begin (add-error '(rxmatch-after (#/abc/ "123abcdef")) '"def" val))))
(display "")(let1 val (begin (rxmatch-after (#/abc/ "123abcあいうえ"))) (if (equal? '"あいうえ" val) (format #t " Running ~d/~d" 215 1775) (begin (add-error '(rxmatch-after (#/abc/ "123abcあいうえ")) '"あいうえ" val))))
(display "")(let1 val (begin (rxmatch-after (#/かきく/ "123かきくあいうえ"))) (if (equal? '"あいうえ" val) (format #t " Running ~d/~d" 216 1775) (begin (add-error '(rxmatch-after (#/かきく/ "123かきくあいうえ")) '"あいうえ" val))))
(display "")(let1 val (begin (rxmatch-before (#/abc/ "123abcdef"))) (if (equal? '"123" val) (format #t " Running ~d/~d" 217 1775) (begin (add-error '(rxmatch-before (#/abc/ "123abcdef")) '"123" val))))
(display "")(let1 val (begin ((#/abc/ "123abcdef") 0)) (if (equal? '"abc" val) (format #t " Running ~d/~d" 218 1775) (begin (add-error '((#/abc/ "123abcdef") 0) '"abc" val))))
(display "")(let1 val (begin ((#/abc/ "123abcdef"))) (if (equal? '"abc" val) (format #t " Running ~d/~d" 219 1775) (begin (add-error '((#/abc/ "123abcdef")) '"abc" val))))
(display "")(let1 val (begin ((#/abc/ "123abcdef") 'after)) (if (equal? '"def" val) (format #t " Running ~d/~d" 220 1775) (begin (add-error '((#/abc/ "123abcdef") 'after) '"def" val))))
(display "")(let1 val (begin ((#/abc/ "123abcdef") 'before)) (if (equal? '"123" val) (format #t " Running ~d/~d" 221 1775) (begin (add-error '((#/abc/ "123abcdef") 'before) '"123" val))))
(display "")(let1 val (begin (rxmatch #/123/ "12")) (if (equal? '#f val) (format #t " Running ~d/~d" 222 1775) (begin (add-error '(rxmatch #/123/ "12") '#f val))))
(display "")(let1 val (begin (#/123/ "12")) (if (equal? '#f val) (format #t " Running ~d/~d" 223 1775) (begin (add-error '(#/123/ "12") '#f val))))
(display "")(let1 val (begin (if (#/^abc/ "abc") #t #f)) (if (equal? '#t val) (format #t " Running ~d/~d" 224 1775) (begin (add-error '(if (#/^abc/ "abc") #t #f) '#t val))))
(display "")(let1 val (begin (regexp->string #/abc/)) (if (equal? '"abc" val) (format #t " Running ~d/~d" 225 1775) (begin (add-error '(regexp->string #/abc/) '"abc" val))))
(display "")(let1 val (begin (rxmatch-start (#/\d+/ "aaaa"))) (if (equal? '#f val) (format #t " Running ~d/~d" 226 1775) (begin (add-error '(rxmatch-start (#/\d+/ "aaaa")) '#f val))))
(display "")(let1 val (begin (rxmatch-end (#/\d+/ "a345a"))) (if (equal? '4 val) (format #t " Running ~d/~d" 227 1775) (begin (add-error '(rxmatch-end (#/\d+/ "a345a")) '4 val))))
(display "")(let1 val (begin (rxmatch-end (#/(\d+)(a)/ "a345a") 1)) (if (equal? '4 val) (format #t " Running ~d/~d" 228 1775) (begin (add-error '(rxmatch-end (#/(\d+)(a)/ "a345a") 1) '4 val))))
(display "")(let1 val (begin (rxmatch-end (#/(\d+)(a)/ "a345a") 2)) (if (equal? '5 val) (format #t " Running ~d/~d" 229 1775) (begin (add-error '(rxmatch-end (#/(\d+)(a)/ "a345a") 2) '5 val))))
(display "")(let1 val (begin (rxmatch-end (#/\d+/ "aaaa"))) (if (equal? '#f val) (format #t " Running ~d/~d" 230 1775) (begin (add-error '(rxmatch-end (#/\d+/ "aaaa")) '#f val))))
(display "")(let1 val (begin (rxmatch #/123/ "12")) (if (equal? '#f val) (format #t " Running ~d/~d" 231 1775) (begin (add-error '(rxmatch #/123/ "12") '#f val))))
(display "")(let1 val (begin (if (rxmatch #/123/ "123") #t #f)) (if (equal? '#t val) (format #t " Running ~d/~d" 232 1775) (begin (add-error '(if (rxmatch #/123/ "123") #t #f) '#t val))))
(display "")(let1 val (begin (#/123/ "12")) (if (equal? '#f val) (format #t " Running ~d/~d" 233 1775) (begin (add-error '(#/123/ "12") '#f val))))
(display "")(let1 val (begin (if (#/^abc/ "abc") #t #f)) (if (equal? '#t val) (format #t " Running ~d/~d" 234 1775) (begin (add-error '(if (#/^abc/ "abc") #t #f) '#t val))))
(display "")(let1 val (begin (regexp? #/abc/)) (if (equal? '#t val) (format #t " Running ~d/~d" 235 1775) (begin (add-error '(regexp? #/abc/) '#t val))))
(display "")(let1 val (begin (regexp? "abc")) (if (equal? '#f val) (format #t " Running ~d/~d" 236 1775) (begin (add-error '(regexp? "abc") '#f val))))
(display "")(let1 val (begin (regexp->string #/abc/)) (if (equal? '"abc" val) (format #t " Running ~d/~d" 237 1775) (begin (add-error '(regexp->string #/abc/) '"abc" val))))
(display "")(let1 val (begin (rxmatch-start (#/\d+/ "a345a"))) (if (equal? '1 val) (format #t " Running ~d/~d" 238 1775) (begin (add-error '(rxmatch-start (#/\d+/ "a345a")) '1 val))))
(display "")(let1 val (begin (rxmatch-substring (#/\d+/ "a345a"))) (if (equal? '"345" val) (format #t " Running ~d/~d" 239 1775) (begin (add-error '(rxmatch-substring (#/\d+/ "a345a")) '"345" val))))
(display "")(let1 val (begin (rxmatch-substring (#/(\d+)(a)/ "a345a") 1)) (if (equal? '"345" val) (format #t " Running ~d/~d" 240 1775) (begin (add-error '(rxmatch-substring (#/(\d+)(a)/ "a345a") 1) '"345" val))))
(display "")(let1 val (begin (rxmatch-substring (#/(\d+)(a)/ "a345a") 2)) (if (equal? '"a" val) (format #t " Running ~d/~d" 241 1775) (begin (add-error '(rxmatch-substring (#/(\d+)(a)/ "a345a") 2) '"a" val))))
(display "")(let1 val (begin (rxmatch-substring (#/\d+/ "aaaa"))) (if (equal? '#f val) (format #t " Running ~d/~d" 242 1775) (begin (add-error '(rxmatch-substring (#/\d+/ "aaaa")) '#f val))))
(display "")(let1 val (begin ((#/あ/ "あ"))) (if (equal? '"あ" val) (format #t " Running ~d/~d" 243 1775) (begin (add-error '((#/あ/ "あ")) '"あ" val))))
(display "")(let1 val (begin (string->regexp "abc")) (if (equal? '#/abc/ val) (format #t " Running ~d/~d" 244 1775) (begin (add-error '(string->regexp "abc") '#/abc/ val))))
(display "")(let1 val (begin (let1 m (#/^#([^(^)^\s]+)(?:\(([^\)]+)\))?/ "#comment") (m 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 245 1775) (begin (add-error '(let1 m (#/^#([^(^)^\s]+)(?:\(([^\)]+)\))?/ "#comment") (m 2)) '#f val))))
(display "")(let1 val (begin (begin (let ((xxx 'a)) (case xxx ((b) 'b) ((a) 'a))))) (if (equal? 'a val) (format #t " Running ~d/~d" 246 1775) (begin (add-error '(begin (let ((xxx 'a)) (case xxx ((b) 'b) ((a) 'a)))) 'a val))))
(display "")(let1 val (begin (begin (let ((xxy 'a)) (case xxy ((b) 'b) ((c) 'c) (else 3))))) (if (equal? '3 val) (format #t " Running ~d/~d" 247 1775) (begin (add-error '(begin (let ((xxy 'a)) (case xxy ((b) 'b) ((c) 'c) (else 3)))) '3 val))))
(display "")(let1 val (begin ((lambda (a) (call/cc (lambda (c) (c -1) 4))) 2)) (if (equal? '-1 val) (format #t " Running ~d/~d" 248 1775) (begin (add-error '((lambda (a) (call/cc (lambda (c) (c -1) 4))) 2) '-1 val))))
(display "")(let1 val (begin (* 2 3)) (if (equal? '6 val) (format #t " Running ~d/~d" 249 1775) (begin (add-error '(* 2 3) '6 val))))
(display "")(let1 val (begin (* 2 3 4)) (if (equal? '24 val) (format #t " Running ~d/~d" 250 1775) (begin (add-error '(* 2 3 4) '24 val))))
(display "")(let1 val (begin (call/cc (lambda (c) (c 4)))) (if (equal? '4 val) (format #t " Running ~d/~d" 251 1775) (begin (add-error '(call/cc (lambda (c) (c 4))) '4 val))))
(display "")(let1 val (begin (string->number "123")) (if (equal? '123 val) (format #t " Running ~d/~d" 252 1775) (begin (add-error '(string->number "123") '123 val))))
(display "")(let1 val (begin (let ((p (open-string-input-port "123 456"))) (read p))) (if (equal? '123 val) (format #t " Running ~d/~d" 253 1775) (begin (add-error '(let ((p (open-string-input-port "123 456"))) (read p)) '123 val))))
(display "")(let1 val (begin (let ((p (open-string-input-port "123 456"))) (read-char p))) (if (equal? '#\1 val) (format #t " Running ~d/~d" 254 1775) (begin (add-error '(let ((p (open-string-input-port "123 456"))) (read-char p)) '#\1 val))))
(display "")(let1 val (begin (reverse '(1 2 3 4))) (if (equal? '(4 3 2 1) val) (format #t " Running ~d/~d" 255 1775) (begin (add-error '(reverse '(1 2 3 4)) '(4 3 2 1) val))))
(display "")(let1 val (begin (string-split "wiki&cmd" #\&)) (if (equal? '("wiki" "cmd") val) (format #t " Running ~d/~d" 256 1775) (begin (add-error '(string-split "wiki&cmd" #\&) '("wiki" "cmd") val))))
(display "")(let1 val (begin (begin (define str1 (make-string 3 #\c)) (string-set! str1 1 #\b) str1)) (if (equal? '"cbc" val) (format #t " Running ~d/~d" 257 1775) (begin (add-error '(begin (define str1 (make-string 3 #\c)) (string-set! str1 1 #\b) str1) '"cbc" val))))
(display "")(let1 val (begin ((lambda (a) (call/cc (lambda (c) (c -1)))) 2)) (if (equal? '-1 val) (format #t " Running ~d/~d" 258 1775) (begin (add-error '((lambda (a) (call/cc (lambda (c) (c -1)))) 2) '-1 val))))
(display "")(let1 val (begin (let* ((a 0) (b (lambda (x y) a))) (b (begin (set! a 1)) (begin (set! a 2))))) (if (equal? '2 val) (format #t " Running ~d/~d" 259 1775) (begin (add-error '(let* ((a 0) (b (lambda (x y) a))) (b (begin (set! a 1)) (begin (set! a 2)))) '2 val))))
(display "")(let1 val (begin #\a) (if (equal? '#\a val) (format #t " Running ~d/~d" 260 1775) (begin (add-error '#\a '#\a val))))
(display "")(let1 val (begin (eof-object? 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 261 1775) (begin (add-error '(eof-object? 3) '#f val))))
(display "")(let1 val (begin 102) (if (equal? '102 val) (format #t " Running ~d/~d" 262 1775) (begin (add-error '102 '102 val))))
(display "")(let1 val (begin (define val 3) (define (func8) (define val 4) val) (func8)) (if (equal? '4 val) (format #t " Running ~d/~d" 263 1775) (begin (add-error '(define val 3) '4 val))))
(display "")(let1 val (begin ((lambda () (define p (cons 1 2)) (set-cdr! p 3) p))) (if (equal? '(1 . 3) val) (format #t " Running ~d/~d" 264 1775) (begin (add-error '((lambda () (define p (cons 1 2)) (set-cdr! p 3) p)) '(1 . 3) val))))
(display "")(let1 val (begin ((lambda () (define q (cons 1 2)) (set-car! q 3) q))) (if (equal? '(3 . 2) val) (format #t " Running ~d/~d" 265 1775) (begin (add-error '((lambda () (define q (cons 1 2)) (set-car! q 3) q)) '(3 . 2) val))))
(display "")(let1 val (begin (begin #f #t)) (if (equal? '#t val) (format #t " Running ~d/~d" 266 1775) (begin (add-error '(begin #f #t) '#t val))))
(display "")(let1 val (begin (vector-length (make-vector 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 267 1775) (begin (add-error '(vector-length (make-vector 3)) '3 val))))
(display "")(let1 val (begin (let loop ((i 0)) (if (= i 100) (+ i 1) (loop (+ i 1))))) (if (equal? '101 val) (format #t " Running ~d/~d" 268 1775) (begin (add-error '(let loop ((i 0)) (if (= i 100) (+ i 1) (loop (+ i 1)))) '101 val))))
(display "")(let1 val (begin ((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) (cont #f) 3)) '())) (if (equal? '3 val) (format #t " Running ~d/~d" 269 1775) (begin (add-error '((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) (cont #f) 3)) '()) '3 val))))
(display "")(let1 val (begin ((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) ((lambda () ((lambda () (cont #f))))) 102)) '())) (if (equal? '102 val) (format #t " Running ~d/~d" 270 1775) (begin (add-error '((lambda (cont) (if (call/cc (lambda (c) (set! cont c))) ((lambda () ((lambda () (cont #f))))) 102)) '()) '102 val))))
(display "")(let1 val (begin (let ((a 0)) (cond (#t (set! a (+ a 1)) (set! a (+ a 1)) a)))) (if (equal? '2 val) (format #t " Running ~d/~d" 271 1775) (begin (add-error '(let ((a 0)) (cond (#t (set! a (+ a 1)) (set! a (+ a 1)) a))) '2 val))))
(display "")(let1 val (begin (char? #\あ)) (if (equal? '#t val) (format #t " Running ~d/~d" 272 1775) (begin (add-error '(char? #\あ) '#t val))))
(display "")(let1 val (begin (eq? (list 'a) (list 'a))) (if (equal? '#f val) (format #t " Running ~d/~d" 273 1775) (begin (add-error '(eq? (list 'a) (list 'a)) '#f val))))
(display "")(let1 val (begin (let ((x (list 'a))) (eq? x x))) (if (equal? '#t val) (format #t " Running ~d/~d" 274 1775) (begin (add-error '(let ((x (list 'a))) (eq? x x)) '#t val))))
(display "")(let1 val (begin (map1 (lambda (s) (string-append s "123")) '("ABC" "DEF"))) (if (equal? '("ABC123" "DEF123") val) (format #t " Running ~d/~d" 275 1775) (begin (add-error '(map1 (lambda (s) (string-append s "123")) '("ABC" "DEF")) '("ABC123" "DEF123") val))))
(display "")(let1 val (begin (map (lambda (s) (string-append s "123")) '("ABC" "DEF"))) (if (equal? '("ABC123" "DEF123") val) (format #t " Running ~d/~d" 276 1775) (begin (add-error '(map (lambda (s) (string-append s "123")) '("ABC" "DEF")) '("ABC123" "DEF123") val))))
(display "")(let1 val (begin (map (lambda (a b) (string-append a b)) '("ABC" "DEF") '("GHI" "JKL"))) (if (equal? '("ABCGHI" "DEFJKL") val) (format #t " Running ~d/~d" 277 1775) (begin (add-error '(map (lambda (a b) (string-append a b)) '("ABC" "DEF") '("GHI" "JKL")) '("ABCGHI" "DEFJKL") val))))
(display "")(let1 val (begin (map (lambda (a b) (* a b)) '(1 2 3) '(4 5 6))) (if (equal? '(4 10 18) val) (format #t " Running ~d/~d" 278 1775) (begin (add-error '(map (lambda (a b) (* a b)) '(1 2 3) '(4 5 6)) '(4 10 18) val))))
(display "")(let1 val (begin (let1 a '() (let1 G68 (lambda (i) (if (>= i 10000) i (a (+ i 1)))) (set! a G68) (a 0)))) (if (equal? '10000 val) (format #t " Running ~d/~d" 279 1775) (begin (add-error '(let1 a '() (let1 G68 (lambda (i) (if (>= i 10000) i (a (+ i 1)))) (set! a G68) (a 0))) '10000 val))))
(display "")(let1 val (begin `(list ,(+ 1 2) 4)) (if (equal? '(list 3 4) val) (format #t " Running ~d/~d" 280 1775) (begin (add-error '`(list ,(+ 1 2) 4) '(list 3 4) val))))
(display "")(let1 val (begin (let ((name 'a)) `(list ,name ',name))) (if (equal? '(list a 'a) val) (format #t " Running ~d/~d" 281 1775) (begin (add-error '(let ((name 'a)) `(list ,name ',name)) '(list a 'a) val))))
(display "")(let1 val (begin `(a ,(+ 1 2) ,@(map abs '(4 -5 6)) b)) (if (equal? '(a 3 4 5 6 b) val) (format #t " Running ~d/~d" 282 1775) (begin (add-error '`(a ,(+ 1 2) ,@(map abs '(4 -5 6)) b) '(a 3 4 5 6 b) val))))
(display "")(let1 val (begin (vector? #(3))) (if (equal? '#t val) (format #t " Running ~d/~d" 283 1775) (begin (add-error '(vector? #(3)) '#t val))))
(display "")(let1 val (begin (begin (define (proc-01) 3) (proc-01))) (if (equal? '3 val) (format #t " Running ~d/~d" 284 1775) (begin (add-error '(begin (define (proc-01) 3) (proc-01)) '3 val))))
(display "")(let1 val (begin (begin (define (add3 a b) (+ a b)) (add3 1 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 285 1775) (begin (add-error '(begin (define (add3 a b) (+ a b)) (add3 1 2)) '3 val))))
(display "")(let1 val (begin (begin (define add2 (lambda (a b) (+ a b))) (add2 1 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 286 1775) (begin (add-error '(begin (define add2 (lambda (a b) (+ a b))) (add2 1 2)) '3 val))))
(display "")(let1 val (begin (begin (define z (make-vector 2)) (vector-set! z 0 1) (vector-set! z 1 2) (make-vector 3) (null? 3) (vector-set! z 1 3) (vector-ref z 1))) (if (equal? '3 val) (format #t " Running ~d/~d" 287 1775) (begin (add-error '(begin (define z (make-vector 2)) (vector-set! z 0 1) (vector-set! z 1 2) (make-vector 3) (null? 3) (vector-set! z 1 3) (vector-ref z 1)) '3 val))))
(display "")(let1 val (begin (begin (define (proc-2) (define (rec) 3) (rec)) (proc-2))) (if (equal? '3 val) (format #t " Running ~d/~d" 288 1775) (begin (add-error '(begin (define (proc-2) (define (rec) 3) (rec)) (proc-2)) '3 val))))
(display "")(let1 val (begin (begin (define (func2) (define val 4) val) (func2))) (if (equal? '4 val) (format #t " Running ~d/~d" 289 1775) (begin (add-error '(begin (define (func2) (define val 4) val) (func2)) '4 val))))
(display "")(let1 val (begin (if (values 1 2 3) #t #f)) (if (equal? '#t val) (format #t " Running ~d/~d" 290 1775) (begin (add-error '(if (values 1 2 3) #t #f) '#t val))))
(display "")(let1 val (begin (call-with-values (lambda () (values 4 5)) (lambda (a b) b))) (if (equal? '5 val) (format #t " Running ~d/~d" 291 1775) (begin (add-error '(call-with-values (lambda () (values 4 5)) (lambda (a b) b)) '5 val))))
(display "")(let1 val (begin (call-with-values (lambda () (values 1 2 3)) (lambda (a b c) (+ a b c)))) (if (equal? '6 val) (format #t " Running ~d/~d" 292 1775) (begin (add-error '(call-with-values (lambda () (values 1 2 3)) (lambda (a b c) (+ a b c))) '6 val))))
(display "")(let1 val (begin (call-with-values (lambda () (values 1 2 3)) list)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 293 1775) (begin (add-error '(call-with-values (lambda () (values 1 2 3)) list) '(1 2 3) val))))
(display "")(let1 val (begin (call-with-values (lambda () 1) (lambda (x) (+ x 1234)))) (if (equal? '1235 val) (format #t " Running ~d/~d" 294 1775) (begin (add-error '(call-with-values (lambda () 1) (lambda (x) (+ x 1234))) '1235 val))))
(display "")(let1 val (begin (receive (a b c) (values 1 2 3) (+ a b c))) (if (equal? '6 val) (format #t " Running ~d/~d" 295 1775) (add-error '(receive (a b c) (values 1 2 3) (+ a b c)) '6 val)))(display "")(let1 val (begin (receive z (values 'x 'y) z)) (if (equal? '(x y) val) (format #t " Running ~d/~d" 296 1775) (add-error '(receive z (values 'x 'y) z) '(x y) val)))(display "")(let1 val (begin (receive (a . b) (values 'x 'y 'z) b)) (if (equal? '(y z) val) (format #t " Running ~d/~d" 297 1775) (add-error '(receive (a . b) (values 'x 'y 'z) b) '(y z) val)))(display "")(let1 val (begin (receive (a . b) (values 'x 'y 'z) a)) (if (equal? 'x val) (format #t " Running ~d/~d" 298 1775) (add-error '(receive (a . b) (values 'x 'y 'z) a) 'x val)))(display "")(let1 val (begin (receive x (apply values '(1 2 3)) x)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 299 1775) (add-error '(receive x (apply values '(1 2 3)) x) '(1 2 3) val)))(display "")(let1 val (begin (call-with-values (lambda () (values 1 2)) cons)) (if (equal? '(1 . 2) val) (format #t " Running ~d/~d" 300 1775) (add-error '(call-with-values (lambda () (values 1 2)) cons) '(1 . 2) val)))(display "")(if (equal? 'error (guard (con (#t 'error)) (call-with-values (lambda () (values 1 2)) (lambda (a b c) (+ a b c))))) (format #t " Running ~d/~d" 301 1775) (add-error '(call-with-values (lambda () (values 1 2)) (lambda (a b c) (+ a b c))) 'error val))(display "")(let1 val (begin (receive (port proc) (open-string-output-port) (display "hige" port) (display "pon" port) (proc))) (if (equal? '"higepon" val) (format #t " Running ~d/~d" 302 1775) (add-error '(receive (port proc) (open-string-output-port) (display "hige" port) (display "pon" port) (proc)) '"higepon" val)))(display "")(let1 val (begin (call-with-string-output-port (lambda (port) (write "string" port)))) (if (equal? '"\"string\"" val) (format #t " Running ~d/~d" 303 1775) (begin (add-error '(call-with-string-output-port (lambda (port) (write "string" port))) '"\"string\"" val))))
(display "")(let1 val (begin (regexp-replace #/abc/ "123abc456" "ABC")) (if (equal? '"123ABC456" val) (format #t " Running ~d/~d" 304 1775) (begin (add-error '(regexp-replace #/abc/ "123abc456" "ABC") '"123ABC456" val))))
(display "")(let1 val (begin (cons 'a '())) (if (equal? '(a) val) (format #t " Running ~d/~d" 305 1775) (begin (add-error '(cons 'a '()) '(a) val))))
(display "")(let1 val (begin (cons '(a) '(b c d))) (if (equal? '((a) b c d) val) (format #t " Running ~d/~d" 306 1775) (begin (add-error '(cons '(a) '(b c d)) '((a) b c d) val))))
(display "")(let1 val (begin (cons "a" '(b c))) (if (equal? '("a" b c) val) (format #t " Running ~d/~d" 307 1775) (begin (add-error '(cons "a" '(b c)) '("a" b c) val))))
(display "")(let1 val (begin (cons 'a 3)) (if (equal? '(a . 3) val) (format #t " Running ~d/~d" 308 1775) (begin (add-error '(cons 'a 3) '(a . 3) val))))
(display "")(let1 val (begin (cons '(a b) 'c)) (if (equal? '((a b) . c) val) (format #t " Running ~d/~d" 309 1775) (begin (add-error '(cons '(a b) 'c) '((a b) . c) val))))
(display "")(let1 val (begin (car '(a b c))) (if (equal? 'a val) (format #t " Running ~d/~d" 310 1775) (begin (add-error '(car '(a b c)) 'a val))))
(display "")(let1 val (begin (car '((a) b c d))) (if (equal? '(a) val) (format #t " Running ~d/~d" 311 1775) (begin (add-error '(car '((a) b c d)) '(a) val))))
(display "")(let1 val (begin (car '(1 . 2))) (if (equal? '1 val) (format #t " Running ~d/~d" 312 1775) (begin (add-error '(car '(1 . 2)) '1 val))))
(display "")(let1 val (begin (cdr '((a) b c d))) (if (equal? '(b c d) val) (format #t " Running ~d/~d" 313 1775) (begin (add-error '(cdr '((a) b c d)) '(b c d) val))))
(display "")(let1 val (begin (cdr '(1 . 2))) (if (equal? '2 val) (format #t " Running ~d/~d" 314 1775) (begin (add-error '(cdr '(1 . 2)) '2 val))))
(display "")(let1 val (begin (reverse '(a b c))) (if (equal? '(c b a) val) (format #t " Running ~d/~d" 315 1775) (begin (add-error '(reverse '(a b c)) '(c b a) val))))
(display "")(let1 val (begin (reverse '(a (b c) d (e (f))))) (if (equal? '((e (f)) d (b c) a) val) (format #t " Running ~d/~d" 316 1775) (begin (add-error '(reverse '(a (b c) d (e (f)))) '((e (f)) d (b c) a) val))))
(display "")(let1 val (begin (equal? 'a 'a)) (if (equal? '#t val) (format #t " Running ~d/~d" 317 1775) (begin (add-error '(equal? 'a 'a) '#t val))))
(display "")(let1 val (begin (equal? '(a) '(a))) (if (equal? '#t val) (format #t " Running ~d/~d" 318 1775) (begin (add-error '(equal? '(a) '(a)) '#t val))))
(display "")(let1 val (begin (equal? '(a (b) c) '(a (b) c))) (if (equal? '#t val) (format #t " Running ~d/~d" 319 1775) (begin (add-error '(equal? '(a (b) c) '(a (b) c)) '#t val))))
(display "")(let1 val (begin (equal? "abc" "abc")) (if (equal? '#t val) (format #t " Running ~d/~d" 320 1775) (begin (add-error '(equal? "abc" "abc") '#t val))))
(display "")(let1 val (begin (equal? 2 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 321 1775) (begin (add-error '(equal? 2 2) '#t val))))
(display "")(let1 val (begin (equal? (make-vector 5 'a) (make-vector 5 'a))) (if (equal? '#t val) (format #t " Running ~d/~d" 322 1775) (begin (add-error '(equal? (make-vector 5 'a) (make-vector 5 'a)) '#t val))))
(display "")(let1 val (begin (eq? 'a 'a)) (if (equal? '#t val) (format #t " Running ~d/~d" 323 1775) (begin (add-error '(eq? 'a 'a) '#t val))))
(display "")(let1 val (begin (eq? '(a) '(a))) (if (equal? '#f val) (format #t " Running ~d/~d" 324 1775) (begin (add-error '(eq? '(a) '(a)) '#f val))))
(display "")(let1 val (begin (eq? (list 'a) (list 'a))) (if (equal? '#f val) (format #t " Running ~d/~d" 325 1775) (add-error '(eq? (list 'a) (list 'a)) '#f val)))(display "")(let1 val (begin (eq? "a" "a")) (if (equal? '#f val) (format #t " Running ~d/~d" 326 1775) (begin (add-error '(eq? "a" "a") '#f val))))
(display "")(let1 val (begin (eq? "" "")) (if (equal? '#f val) (format #t " Running ~d/~d" 327 1775) (begin (add-error '(eq? "" "") '#f val))))
(display "")(let1 val (begin (eq? '() '())) (if (equal? '#t val) (format #t " Running ~d/~d" 328 1775) (begin (add-error '(eq? '() '()) '#t val))))
(display "")(let1 val (begin (eq? 2 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 329 1775) (begin (add-error '(eq? 2 2) '#t val))))
(display "")(let1 val (begin (eq? #\A #\A)) (if (equal? '#t val) (format #t " Running ~d/~d" 330 1775) (begin (add-error '(eq? #\A #\A) '#t val))))
(display "")(let1 val (begin (eq? car car)) (if (equal? '#t val) (format #t " Running ~d/~d" 331 1775) (begin (add-error '(eq? car car) '#t val))))
(display "")(let1 val (begin (let ((n (+ 2 3))) (eq? n n))) (if (equal? '#t val) (format #t " Running ~d/~d" 332 1775) (begin (add-error '(let ((n (+ 2 3))) (eq? n n)) '#t val))))
(display "")(let1 val (begin (let ((x '(a))) (eq? x x))) (if (equal? '#t val) (format #t " Running ~d/~d" 333 1775) (begin (add-error '(let ((x '(a))) (eq? x x)) '#t val))))
(display "")(let1 val (begin (let ((x '#())) (eq? x x))) (if (equal? '#t val) (format #t " Running ~d/~d" 334 1775) (begin (add-error '(let ((x '#())) (eq? x x)) '#t val))))
(display "")(let1 val (begin (let ((p (lambda (x) x))) (eq? p p))) (if (equal? '#t val) (format #t " Running ~d/~d" 335 1775) (begin (add-error '(let ((p (lambda (x) x))) (eq? p p)) '#t val))))
(display "")(let1 val (begin (- 3 4)) (if (equal? '-1 val) (format #t " Running ~d/~d" 336 1775) (begin (add-error '(- 3 4) '-1 val))))
(display "")(let1 val (begin (- 3 4 5)) (if (equal? '-6 val) (format #t " Running ~d/~d" 337 1775) (begin (add-error '(- 3 4 5) '-6 val))))
(display "")(let1 val (begin (- 3)) (if (equal? '-3 val) (format #t " Running ~d/~d" 338 1775) (begin (add-error '(- 3) '-3 val))))
(display "")(let1 val (begin (cond ((> 3 2) 'greater) ((< 3 2) 'less))) (if (equal? 'greater val) (format #t " Running ~d/~d" 339 1775) (begin (add-error '(cond ((> 3 2) 'greater) ((< 3 2) 'less)) 'greater val))))
(display "")(let1 val (begin (cond ((> 3 3) 'greater) ((< 3 3) 'less) (else 'equal))) (if (equal? 'equal val) (format #t " Running ~d/~d" 340 1775) (begin (add-error '(cond ((> 3 3) 'greater) ((< 3 3) 'less) (else 'equal)) 'equal val))))
(display "")(let1 val (begin (cond ('(1 2 3) => cadr) (else #f))) (if (equal? '2 val) (format #t " Running ~d/~d" 341 1775) (begin (add-error '(cond ('(1 2 3) => cadr) (else #f)) '2 val))))
(display "")(let1 val (begin (do ((vec (make-vector 5)) (i 0 (+ i 1))) ((= i 5) vec) (vector-set! vec i i))) (if (equal? '#(0 1 2 3 4) val) (format #t " Running ~d/~d" 342 1775) (add-error '(do ((vec (make-vector 5)) (i 0 (+ i 1))) ((= i 5) vec) (vector-set! vec i i)) '#(0 1 2 3 4) val)))(display "")(let1 val (begin (let ((x '(1 3 5 7 9))) (do ((x x (cdr x)) (sum 0 (+ sum (car x)))) ((null? x) sum)))) (if (equal? '25 val) (format #t " Running ~d/~d" 343 1775) (add-error '(let ((x '(1 3 5 7 9))) (do ((x x (cdr x)) (sum 0 (+ sum (car x)))) ((null? x) sum))) '25 val)))(display "")(let1 val (begin (let ((vec (vector 0 '(2 2 2 2) "Anna"))) (vector-set! vec 1 '("Sue" "Sue")) vec)) (if (equal? '#(0 ("Sue" "Sue") "Anna") val) (format #t " Running ~d/~d" 344 1775) (begin (add-error '(let ((vec (vector 0 '(2 2 2 2) "Anna"))) (vector-set! vec 1 '("Sue" "Sue")) vec) '#(0 ("Sue" "Sue") "Anna") val))))
(display "")(let1 val (begin (vector-ref '#(1 1 2 3 5 8 13 21) 5)) (if (equal? '8 val) (format #t " Running ~d/~d" 345 1775) (begin (add-error '(vector-ref '#(1 1 2 3 5 8 13 21) 5) '8 val))))
(display "")(let1 val (begin (or (= 2 2) (> 2 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 346 1775) (begin (add-error '(or (= 2 2) (> 2 1)) '#t val))))
(display "")(let1 val (begin (or (= 2 2) (< 2 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 347 1775) (begin (add-error '(or (= 2 2) (< 2 1)) '#t val))))
(display "")(let1 val (begin (or #f #f #f)) (if (equal? '#f val) (format #t " Running ~d/~d" 348 1775) (begin (add-error '(or #f #f #f) '#f val))))
(display "")(let1 val (begin (or '(b c) (/ 3 0))) (if (equal? '(b c) val) (format #t " Running ~d/~d" 349 1775) (begin (add-error '(or '(b c) (/ 3 0)) '(b c) val))))
(display "")(let1 val (begin (not #t)) (if (equal? '#f val) (format #t " Running ~d/~d" 350 1775) (begin (add-error '(not #t) '#f val))))
(display "")(let1 val (begin (not 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 351 1775) (begin (add-error '(not 3) '#f val))))
(display "")(let1 val (begin (not (list 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 352 1775) (add-error '(not (list 3)) '#f val)))(display "")(let1 val (begin (not #f)) (if (equal? '#t val) (format #t " Running ~d/~d" 353 1775) (begin (add-error '(not #f) '#t val))))
(display "")(let1 val (begin (not '())) (if (equal? '#f val) (format #t " Running ~d/~d" 354 1775) (begin (add-error '(not '()) '#f val))))
(display "")(let1 val (begin (not (list))) (if (equal? '#f val) (format #t " Running ~d/~d" 355 1775) (add-error '(not (list)) '#f val)))(display "")(let1 val (begin (not 'nil)) (if (equal? '#f val) (format #t " Running ~d/~d" 356 1775) (begin (add-error '(not 'nil) '#f val))))
(display "")(let1 val (begin (let ((x 2) (y 3)) (* x y))) (if (equal? '6 val) (format #t " Running ~d/~d" 357 1775) (begin (add-error '(let ((x 2) (y 3)) (* x y)) '6 val))))
(display "")(let1 val (begin (let ((x 2) (y 3)) (let ((x 7) (z (+ x y))) (* z x)))) (if (equal? '35 val) (format #t " Running ~d/~d" 358 1775) (begin (add-error '(let ((x 2) (y 3)) (let ((x 7) (z (+ x y))) (* z x))) '35 val))))
(display "")(let1 val (begin (let ((x 2) (y 3)) (let* ((x 7) (z (+ x y))) (* z x)))) (if (equal? '70 val) (format #t " Running ~d/~d" 359 1775) (begin (add-error '(let ((x 2) (y 3)) (let* ((x 7) (z (+ x y))) (* z x))) '70 val))))
(display "")(let1 val (begin (eqv? 'a 'a)) (if (equal? '#t val) (format #t " Running ~d/~d" 360 1775) (begin (add-error '(eqv? 'a 'a) '#t val))))
(display "")(let1 val (begin (eqv? 'a 'b)) (if (equal? '#f val) (format #t " Running ~d/~d" 361 1775) (begin (add-error '(eqv? 'a 'b) '#f val))))
(display "")(let1 val (begin (eqv? 2 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 362 1775) (begin (add-error '(eqv? 2 2) '#t val))))
(display "")(let1 val (begin (eqv? '() '())) (if (equal? '#t val) (format #t " Running ~d/~d" 363 1775) (begin (add-error '(eqv? '() '()) '#t val))))
(display "")(let1 val (begin (eqv? 100000000 100000000)) (if (equal? '#t val) (format #t " Running ~d/~d" 364 1775) (begin (add-error '(eqv? 100000000 100000000) '#t val))))
(display "")(let1 val (begin (eqv? (cons 1 2) (cons 1 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 365 1775) (begin (add-error '(eqv? (cons 1 2) (cons 1 2)) '#f val))))
(display "")(let1 val (begin (eqv? (lambda () 1) (lambda () 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 366 1775) (begin (add-error '(eqv? (lambda () 1) (lambda () 2)) '#f val))))
(display "")(let1 val (begin (eqv? #f 'nil)) (if (equal? '#f val) (format #t " Running ~d/~d" 367 1775) (begin (add-error '(eqv? #f 'nil) '#f val))))
(display "")(let1 val (begin (define (foo n) (let loop ((n n)) (cond ((null? n)) (else (loop (cdr n)))))) (and (foo '()) (foo '(1 2 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 368 1775) (begin (add-error '(define (foo n) (let loop ((n n)) (cond ((null? n)) (else (loop (cdr n)))))) '#t val))))
(display "")(let1 val (begin (digit->integer #\3 10)) (if (equal? '3 val) (format #t " Running ~d/~d" 369 1775) (begin (add-error '(digit->integer #\3 10) '3 val))))
(display "")(let1 val (begin (+)) (if (equal? '0 val) (format #t " Running ~d/~d" 370 1775) (begin (add-error '(+) '0 val))))
(display "")(let1 val (begin (*)) (if (equal? '1 val) (format #t " Running ~d/~d" 371 1775) (begin (add-error '(*) '1 val))))
(display "")(let1 val (begin (with-exception-handler (lambda (e) "error") (lambda () "no-error"))) (if (equal? '"no-error" val) (format #t " Running ~d/~d" 372 1775) (add-error '(with-exception-handler (lambda (e) "error") (lambda () "no-error")) '"no-error" val)))(display "")(let1 val (begin (guard (con ((string? con) "error-is-string") (else "error-is-not-string")) (raise "raise"))) (if (equal? '"error-is-string" val) (format #t " Running ~d/~d" 373 1775) (add-error '(guard (con ((string? con) "error-is-string") (else "error-is-not-string")) (raise "raise")) '"error-is-string" val)))(display "")(let1 val (begin (guard (con ((string? con) "error-is-string") (else "error-is-not-string")) 3)) (if (equal? '3 val) (format #t " Running ~d/~d" 374 1775) (add-error '(guard (con ((string? con) "error-is-string") (else "error-is-not-string")) 3) '3 val)))(set! todo-num (+ todo-num 1))(set! todo-num (+ todo-num 1))(display "")(let1 val (begin (apply (lambda (a b c) (+ a b c)) 1 2 '(3))) (if (equal? '6 val) (format #t " Running ~d/~d" 377 1775) (begin (add-error '(apply (lambda (a b c) (+ a b c)) 1 2 '(3)) '6 val))))
(display "")(let1 val (begin (apply (lambda (a b c) (+ a b c)) '(1 2 3))) (if (equal? '6 val) (format #t " Running ~d/~d" 378 1775) (begin (add-error '(apply (lambda (a b c) (+ a b c)) '(1 2 3)) '6 val))))
(display "")(let1 val (begin (apply (lambda (a b c) (+ a b c)) 1 '(2 3))) (if (equal? '6 val) (format #t " Running ~d/~d" 379 1775) (begin (add-error '(apply (lambda (a b c) (+ a b c)) 1 '(2 3)) '6 val))))
(display "")(let1 val (begin (apply (lambda (x y) (apply y '((3 2)))) `(,car ,cdr))) (if (equal? '(2) val) (format #t " Running ~d/~d" 380 1775) (begin (add-error '(apply (lambda (x y) (apply y '((3 2)))) `(,car ,cdr)) '(2) val))))
(display "")(let1 val (begin (/ 6 2)) (if (equal? '3 val) (format #t " Running ~d/~d" 381 1775) (begin (add-error '(/ 6 2) '3 val))))
(display "")(let1 val (begin (mod 23 10)) (if (equal? '3 val) (format #t " Running ~d/~d" 382 1775) (add-error '(mod 23 10) '3 val)))(display "")(let1 val (begin (even? 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 383 1775) (add-error '(even? 2) '#t val)))(display "")(let1 val (begin (even? 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 384 1775) (add-error '(even? 3) '#f val)))(display "")(let1 val (begin (for-all even? '(3 1 4 1 5 9))) (if (equal? '#f val) (format #t " Running ~d/~d" 385 1775) (add-error '(for-all even? '(3 1 4 1 5 9)) '#f val)))(display "")(let1 val (begin (for-all even? '(3 1 4 1 5 9 . 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 386 1775) (add-error '(for-all even? '(3 1 4 1 5 9 . 2)) '#f val)))(display "")(let1 val (begin (for-all even? '(2 4 14))) (if (equal? '#t val) (format #t " Running ~d/~d" 387 1775) (add-error '(for-all even? '(2 4 14)) '#t val)))(display "")(let1 val (begin (for-all (lambda (n) (and (even? n) n)) '(2 4 14))) (if (equal? '14 val) (format #t " Running ~d/~d" 388 1775) (begin (add-error '(for-all (lambda (n) (and (even? n) n)) '(2 4 14)) '14 val))))
(display "")(let1 val (begin (for-all (lambda (a b) (< a b)) '(1 2 3) '(2 3 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 389 1775) (add-error '(for-all (lambda (a b) (< a b)) '(1 2 3) '(2 3 4)) '#t val)))(display "")(let1 val (begin (for-all (lambda (a b) (< a b)) '(1 2 4) '(2 3 4))) (if (equal? '#f val) (format #t " Running ~d/~d" 390 1775) (add-error '(for-all (lambda (a b) (< a b)) '(1 2 4) '(2 3 4)) '#f val)))(display "")(let1 val (begin (+ (/ 2) (/ 4) (/ 4))) (if (equal? '1 val) (format #t " Running ~d/~d" 391 1775) (add-error '(+ (/ 2) (/ 4) (/ 4)) '1 val)))(display "")(let1 val (begin (- (/ 1 2) (/ 1 4) (/ 1 4))) (if (equal? '0 val) (format #t " Running ~d/~d" 392 1775) (add-error '(- (/ 1 2) (/ 1 4) (/ 1 4)) '0 val)))(display "")(let1 val (begin (= (/ 3 2) (+ (/ 1 2) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 393 1775) (add-error '(= (/ 3 2) (+ (/ 1 2) 1)) '#t val)))(display "")(let1 val (begin (= (/ 5 2) (+ 1 (/ 1 2) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 394 1775) (add-error '(= (/ 5 2) (+ 1 (/ 1 2) 1)) '#t val)))(display "")(let1 val (begin (= (/ 3 2) (- 3 (/ 1 2) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 395 1775) (add-error '(= (/ 3 2) (- 3 (/ 1 2) 1)) '#t val)))(display "")(let1 val (begin (* (/ 3 2) 2)) (if (equal? '3 val) (format #t " Running ~d/~d" 396 1775) (add-error '(* (/ 3 2) 2) '3 val)))(display "")(let1 val (begin (* 2 (/ 3 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 397 1775) (add-error '(* 2 (/ 3 2)) '3 val)))(display "")(let1 val (begin (* (/ 4 2) (/ 3 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 398 1775) (add-error '(* (/ 4 2) (/ 3 2)) '3 val)))(display "")(let1 val (begin (/ (/ 2 2) (/ 1 2))) (if (equal? '2 val) (format #t " Running ~d/~d" 399 1775) (add-error '(/ (/ 2 2) (/ 1 2)) '2 val)))(display "")(let1 val (begin (/ (/ 4 2) 1)) (if (equal? '2 val) (format #t " Running ~d/~d" 400 1775) (add-error '(/ (/ 4 2) 1) '2 val)))(display "")(if (equal? 'error (guard (con (#t 'error)) (/ 1 0))) (format #t " Running ~d/~d" 401 1775) (add-error '(/ 1 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (/ 1 (* 0 (/ 1 2))))) (format #t " Running ~d/~d" 402 1775) (add-error '(/ 1 (* 0 (/ 1 2))) 'error val))(display "")(let1 val (begin (> 1 (/ 1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 403 1775) (add-error '(> 1 (/ 1 2)) '#t val)))(display "")(let1 val (begin (> (/ 1 2) 1)) (if (equal? '#f val) (format #t " Running ~d/~d" 404 1775) (add-error '(> (/ 1 2) 1) '#f val)))(display "")(let1 val (begin (> 1 (/ 1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 405 1775) (add-error '(> 1 (/ 1 2)) '#t val)))(display "")(let1 val (begin (> (/ 1 2) (/ 1 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 406 1775) (add-error '(> (/ 1 2) (/ 1 3)) '#t val)))(display "")(let1 val (begin (<= (/ 1 2) 1)) (if (equal? '#t val) (format #t " Running ~d/~d" 407 1775) (add-error '(<= (/ 1 2) 1) '#t val)))(display "")(let1 val (begin (>= 1 (/ 1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 408 1775) (add-error '(>= 1 (/ 1 2)) '#t val)))(display "")(let1 val (begin (>= (/ 1 2) (/ 1 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 409 1775) (add-error '(>= (/ 1 2) (/ 1 3)) '#t val)))(display "")(let1 val (begin (< (/ 1 2) 1)) (if (equal? '#t val) (format #t " Running ~d/~d" 410 1775) (add-error '(< (/ 1 2) 1) '#t val)))(display "")(let1 val (begin (< 1 (/ 1 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 411 1775) (add-error '(< 1 (/ 1 2)) '#f val)))(display "")(let1 val (begin (< (/ 1 2) (/ 1 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 412 1775) (add-error '(< (/ 1 2) (/ 1 3)) '#f val)))(display "")(let1 val (begin (<= (/ 1 2) 1)) (if (equal? '#t val) (format #t " Running ~d/~d" 413 1775) (add-error '(<= (/ 1 2) 1) '#t val)))(display "")(let1 val (begin (<= 1 (/ 1 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 414 1775) (add-error '(<= 1 (/ 1 2)) '#f val)))(display "")(let1 val (begin (<= (/ 1 2) (/ 1 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 415 1775) (add-error '(<= (/ 1 2) (/ 1 3)) '#f val)))(display "")(let1 val (begin (= (/ 2 2) 1)) (if (equal? '#t val) (format #t " Running ~d/~d" 416 1775) (add-error '(= (/ 2 2) 1) '#t val)))(display "")(let1 val (begin (= 1 (/ 2 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 417 1775) (add-error '(= 1 (/ 2 2)) '#t val)))(display "")(let1 val (begin (= (/ 1 2) (/ 2 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 418 1775) (add-error '(= (/ 1 2) (/ 2 4)) '#t val)))(display "")(let1 val (begin (>= (/ 1 2) (inexact (/ 1 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 419 1775) (add-error '(>= (/ 1 2) (inexact (/ 1 3))) '#t val)))(display "")(let1 val (begin (> (/ 3 2) (+ (inexact (/ 1 3)) (inexact (/ 1 3)) (inexact (/ 1 3))) (/ 99 100))) (if (equal? '#t val) (format #t " Running ~d/~d" 420 1775) (add-error '(> (/ 3 2) (+ (inexact (/ 1 3)) (inexact (/ 1 3)) (inexact (/ 1 3))) (/ 99 100)) '#t val)))(display "")(let1 val (begin (> 1 (/ (inexact 98) 100) (/ 97 100))) (if (equal? '#t val) (format #t " Running ~d/~d" 421 1775) (add-error '(> 1 (/ (inexact 98) 100) (/ 97 100)) '#t val)))(display "")(let1 val (begin (rational? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 422 1775) (add-error '(rational? 3) '#t val)))(display "")(let1 val (begin (rational? (/ 1 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 423 1775) (add-error '(rational? (/ 1 4)) '#t val)))(display "")(let1 val (begin (rational? (/ (/ 1 2) (+ (greatest-fixnum) 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 424 1775) (add-error '(rational? (/ (/ 1 2) (+ (greatest-fixnum) 1))) '#t val)))(display "")(let1 val (begin (flonum? (/ (inexact (/ 1 3)) (+ (greatest-fixnum) 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 425 1775) (add-error '(flonum? (/ (inexact (/ 1 3)) (+ (greatest-fixnum) 1))) '#t val)))(display "")(let1 val (begin (= (/ (+ (greatest-fixnum) 1) 1) (+ (greatest-fixnum) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 426 1775) (add-error '(= (/ (+ (greatest-fixnum) 1) 1) (+ (greatest-fixnum) 1)) '#t val)))(display "")(let1 val (begin (rational? (/ (+ (greatest-fixnum) 1) (/ 1 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 427 1775) (add-error '(rational? (/ (+ (greatest-fixnum) 1) (/ 1 3))) '#t val)))(display "")(let1 val (begin (flonum? (/ (+ (greatest-fixnum) 1) (inexact (/ 1 3))))) (if (equal? '#t val) (format #t " Running ~d/~d" 428 1775) (add-error '(flonum? (/ (+ (greatest-fixnum) 1) (inexact (/ 1 3)))) '#t val)))(display "")(let1 val (begin (/ (+ (greatest-fixnum) 1) (+ (greatest-fixnum) 1))) (if (equal? '1 val) (format #t " Running ~d/~d" 429 1775) (add-error '(/ (+ (greatest-fixnum) 1) (+ (greatest-fixnum) 1)) '1 val)))(display "")(let1 val (begin (fixnum? (/ (+ (greatest-fixnum) 1) (+ (greatest-fixnum) 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 430 1775) (add-error '(fixnum? (/ (+ (greatest-fixnum) 1) (+ (greatest-fixnum) 1))) '#t val)))(display "")(let1 val (begin (/ 2)) (if (equal? '1/2 val) (format #t " Running ~d/~d" 431 1775) (add-error '(/ 2) '1/2 val)))(display "")(let1 val (begin (/ 3)) (if (equal? '1/3 val) (format #t " Running ~d/~d" 432 1775) (add-error '(/ 3) '1/3 val)))(set! todo-num (+ todo-num 1))(display "")(display "")(display "")(display "")(display "")(let1 val (begin (fixnum? (least-fixnum))) (if (equal? '#t val) (format #t " Running ~d/~d" 438 1775) (begin (add-error '(fixnum? (least-fixnum)) '#t val))))
(display "")(let1 val (begin (fixnum? (greatest-fixnum))) (if (equal? '#t val) (format #t " Running ~d/~d" 439 1775) (begin (add-error '(fixnum? (greatest-fixnum)) '#t val))))
(display "")(let1 val (begin (fixnum? (+ (greatest-fixnum) 1))) (if (equal? '#f val) (format #t " Running ~d/~d" 440 1775) (begin (add-error '(fixnum? (+ (greatest-fixnum) 1)) '#f val))))
(display "")(let1 val (begin (fixnum? (- (least-fixnum) 1))) (if (equal? '#f val) (format #t " Running ~d/~d" 441 1775) (begin (add-error '(fixnum? (- (least-fixnum) 1)) '#f val))))
(display "")(let1 val (begin (number? (+ (greatest-fixnum) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 442 1775) (begin (add-error '(number? (+ (greatest-fixnum) 1)) '#t val))))
(display "")(let1 val (begin (number? (- (least-fixnum) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 443 1775) (begin (add-error '(number? (- (least-fixnum) 1)) '#t val))))
(display "")(let1 val (begin (> (+ (greatest-fixnum) 1) (greatest-fixnum))) (if (equal? '#t val) (format #t " Running ~d/~d" 444 1775) (begin (add-error '(> (+ (greatest-fixnum) 1) (greatest-fixnum)) '#t val))))
(display "")(let1 val (begin (< (- (least-fixnum) 1) (least-fixnum))) (if (equal? '#t val) (format #t " Running ~d/~d" 445 1775) (begin (add-error '(< (- (least-fixnum) 1) (least-fixnum)) '#t val))))
(display "")(let1 val (begin (fixnum? (- (+ (greatest-fixnum) 1) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 446 1775) (begin (add-error '(fixnum? (- (+ (greatest-fixnum) 1) 1)) '#t val))))
(display "")(let1 val (begin (fixnum? (+ (- (least-fixnum) 1) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 447 1775) (begin (add-error '(fixnum? (+ (- (least-fixnum) 1) 1)) '#t val))))
(display "")(let1 val (begin (number? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 448 1775) (add-error '(number? 3) '#t val)))(display "")(let1 val (begin (number? (/ 1 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 449 1775) (add-error '(number? (/ 1 4)) '#t val)))(display "")(let1 val (begin (mod 123 10)) (if (equal? '3 val) (format #t " Running ~d/~d" 450 1775) (add-error '(mod 123 10) '3 val)))(display "")(let1 val (begin (mod 123 -10)) (if (equal? '3 val) (format #t " Running ~d/~d" 451 1775) (add-error '(mod 123 -10) '3 val)))(display "")(let1 val (begin (mod -123 10)) (if (equal? '7 val) (format #t " Running ~d/~d" 452 1775) (add-error '(mod -123 10) '7 val)))(display "")(let1 val (begin (mod -123 -10)) (if (equal? '7 val) (format #t " Running ~d/~d" 453 1775) (add-error '(mod -123 -10) '7 val)))(display "")(let1 val (begin (div 123 10)) (if (equal? '12 val) (format #t " Running ~d/~d" 454 1775) (add-error '(div 123 10) '12 val)))(display "")(let1 val (begin (div 123 -10)) (if (equal? '-12 val) (format #t " Running ~d/~d" 455 1775) (add-error '(div 123 -10) '-12 val)))(display "")(let1 val (begin (div -123 10)) (if (equal? '-13 val) (format #t " Running ~d/~d" 456 1775) (add-error '(div -123 10) '-13 val)))(display "")(let1 val (begin (div -123 -10)) (if (equal? '13 val) (format #t " Running ~d/~d" 457 1775) (add-error '(div -123 -10) '13 val)))(display "")(let1 val (begin (string-ref "abc" 2)) (if (equal? '#\c val) (format #t " Running ~d/~d" 458 1775) (begin (add-error '(string-ref "abc" 2) '#\c val))))
(display "")(let1 val (begin (list? '(a b c))) (if (equal? '#t val) (format #t " Running ~d/~d" 459 1775) (begin (add-error '(list? '(a b c)) '#t val))))
(display "")(let1 val (begin (list? '())) (if (equal? '#t val) (format #t " Running ~d/~d" 460 1775) (begin (add-error '(list? '()) '#t val))))
(display "")(let1 val (begin (list? '(a . b))) (if (equal? '#f val) (format #t " Running ~d/~d" 461 1775) (begin (add-error '(list? '(a . b)) '#f val))))
(display "")(let1 val (begin "abc") (if (equal? '"abc" val) (format #t " Running ~d/~d" 462 1775) (begin (add-error '"abc" '"abc" val))))
(display "")(let1 val (begin (match '(0 (1 2) (3 4 5)) ((a (b c) (d e f)) (list a b c d e f)))) (if (equal? '(0 1 2 3 4 5) val) (format #t " Running ~d/~d" 463 1775) (add-error '(match '(0 (1 2) (3 4 5)) ((a (b c) (d e f)) (list a b c d e f))) '(0 1 2 3 4 5) val)))(display "")(let1 val (begin (match 123 ((? string? x) (list 'string x)) ((? number? x) (list 'number x)))) (if (equal? '(number 123) val) (format #t " Running ~d/~d" 464 1775) (add-error '(match 123 ((? string? x) (list 'string x)) ((? number? x) (list 'number x))) '(number 123) val)))(display "")(let1 val (begin (define let-analyzer (match-lambda (('let (? symbol?) ((var expr) ...) body ...) (format "named let, vars=~s exprs=~s" var expr)) (('let ((var expr) ...) body ...) (format "normal let, vars=~s exprs=~s" var expr)) (_ (format "malformed let")))) (let-analyzer '(let ((a b) (c d)) e f g))) (if (equal? '"normal let, vars=(a c) exprs=(b d)" val) (format #t " Running ~d/~d" 465 1775) (add-error '(define let-analyzer (match-lambda (('let (? symbol?) ((var expr) ...) body ...) (format "named let, vars=~s exprs=~s" var expr)) (('let ((var expr) ...) body ...) (format "normal let, vars=~s exprs=~s" var expr)) (_ (format "malformed let")))) '"normal let, vars=(a c) exprs=(b d)" val)))(display "")(let1 val (begin (let-analyzer '(let foo ((x (f a b)) (y (f c d))) e f g))) (if (equal? '"named let, vars=(x y) exprs=((f a b) (f c d))" val) (format #t " Running ~d/~d" 466 1775) (add-error '(let-analyzer '(let foo ((x (f a b)) (y (f c d))) e f g)) '"named let, vars=(x y) exprs=((f a b) (f c d))" val)))(display "")(let1 val (begin (let-analyzer '(let (a) b c d))) (if (equal? '"malformed let" val) (format #t " Running ~d/~d" 467 1775) (add-error '(let-analyzer '(let (a) b c d)) '"malformed let" val)))(display "")(let1 val (begin (match '(the answer is 42) (`(the answer is ,value) value) (else #f))) (if (equal? '42 val) (format #t " Running ~d/~d" 468 1775) (add-error '(match '(the answer is 42) (`(the answer is ,value) value) (else #f)) '42 val)))(display "")(let1 val (begin (match '(the answer was 42) (`(the answer is ,value) value) (else #f))) (if (equal? '#f val) (format #t " Running ~d/~d" 469 1775) (add-error '(match '(the answer was 42) (`(the answer is ,value) value) (else #f)) '#f val)))(display "")(let1 val (begin (match '(a b c d) ((the answer is value) value) (else #f))) (if (equal? 'd val) (format #t " Running ~d/~d" 470 1775) (add-error '(match '(a b c d) ((the answer is value) value) (else #f)) 'd val)))(display "")(let1 val (begin (match "mosh.scm" ((? string? (= #/(.*)\.([^.]+)$/ m)) (format "base=~a suffix=~a" (m 1) (m 2))))) (if (equal? '"base=mosh suffix=scm" val) (format #t " Running ~d/~d" 471 1775) (add-error '(match "mosh.scm" ((? string? (= #/(.*)\.([^.]+)$/ m)) (format "base=~a suffix=~a" (m 1) (m 2)))) '"base=mosh suffix=scm" val)))(display "")(let1 val (begin (do ((i 0) (j 0)) ((zero? j) (set! i 1) (set! i 2) i))) (if (equal? '2 val) (format #t " Running ~d/~d" 472 1775) (add-error '(do ((i 0) (j 0)) ((zero? j) (set! i 1) (set! i 2) i)) '2 val)))(display "")(let1 val (begin (case (* 2 3) ((2 3 5 7) 'prime) ((1 4 6 8 9) 'composite))) (if (equal? 'composite val) (format #t " Running ~d/~d" 473 1775) (begin (add-error '(case (* 2 3) ((2 3 5 7) 'prime) ((1 4 6 8 9) 'composite)) 'composite val))))
(display "")(let1 val (begin (case (car '(c d)) ((a e i o u) 'vowel) ((w y) 'semivowel) (else 'consonant))) (if (equal? 'consonant val) (format #t " Running ~d/~d" 474 1775) (begin (add-error '(case (car '(c d)) ((a e i o u) 'vowel) ((w y) 'semivowel) (else 'consonant)) 'consonant val))))
(display "")(let1 val (begin (case 1 ((2 1) 0))) (if (equal? '0 val) (format #t " Running ~d/~d" 475 1775) (begin (add-error '(case 1 ((2 1) 0)) '0 val))))
(display "")(let1 val (begin (case 2 ((2 1) 0))) (if (equal? '0 val) (format #t " Running ~d/~d" 476 1775) (begin (add-error '(case 2 ((2 1) 0)) '0 val))))
(display "")(let1 val (begin (procedure? car)) (if (equal? '#t val) (format #t " Running ~d/~d" 477 1775) (add-error '(procedure? car) '#t val)))(display "")(let1 val (begin (procedure? 'car)) (if (equal? '#f val) (format #t " Running ~d/~d" 478 1775) (add-error '(procedure? 'car) '#f val)))(display "")(let1 val (begin (procedure? (lambda (x) (* x x)))) (if (equal? '#t val) (format #t " Running ~d/~d" 479 1775) (add-error '(procedure? (lambda (x) (* x x))) '#t val)))(display "")(let1 val (begin (procedure? '(lambda (x) (* x x)))) (if (equal? '#f val) (format #t " Running ~d/~d" 480 1775) (add-error '(procedure? '(lambda (x) (* x x))) '#f val)))(display "")(let1 val (begin (char>=? #\b #\a)) (if (equal? '#t val) (format #t " Running ~d/~d" 481 1775) (begin (add-error '(char>=? #\b #\a) '#t val))))
(display "")(let1 val (begin (char>=? #\c #\b #\a)) (if (equal? '#t val) (format #t " Running ~d/~d" 482 1775) (add-error '(char>=? #\c #\b #\a) '#t val)))(display "")(let1 val (begin (char>=? #\b #\b)) (if (equal? '#t val) (format #t " Running ~d/~d" 483 1775) (begin (add-error '(char>=? #\b #\b) '#t val))))
(display "")(let1 val (begin (char>=? #\b #\c)) (if (equal? '#f val) (format #t " Running ~d/~d" 484 1775) (begin (add-error '(char>=? #\b #\c) '#f val))))
(display "")(let1 val (begin (char>? #\b #\a)) (if (equal? '#t val) (format #t " Running ~d/~d" 485 1775) (begin (add-error '(char>? #\b #\a) '#t val))))
(display "")(let1 val (begin (char>? #\b #\b)) (if (equal? '#f val) (format #t " Running ~d/~d" 486 1775) (begin (add-error '(char>? #\b #\b) '#f val))))
(display "")(let1 val (begin (char>? #\b #\c)) (if (equal? '#f val) (format #t " Running ~d/~d" 487 1775) (begin (add-error '(char>? #\b #\c) '#f val))))
(display "")(let1 val (begin (char<=? #\a #\b)) (if (equal? '#t val) (format #t " Running ~d/~d" 488 1775) (begin (add-error '(char<=? #\a #\b) '#t val))))
(display "")(let1 val (begin (char<=? #\b #\b)) (if (equal? '#t val) (format #t " Running ~d/~d" 489 1775) (begin (add-error '(char<=? #\b #\b) '#t val))))
(display "")(let1 val (begin (char<=? #\c #\b)) (if (equal? '#f val) (format #t " Running ~d/~d" 490 1775) (begin (add-error '(char<=? #\c #\b) '#f val))))
(display "")(let1 val (begin (char<? #\a #\b)) (if (equal? '#t val) (format #t " Running ~d/~d" 491 1775) (begin (add-error '(char<? #\a #\b) '#t val))))
(display "")(let1 val (begin (char<? #\b #\b)) (if (equal? '#f val) (format #t " Running ~d/~d" 492 1775) (begin (add-error '(char<? #\b #\b) '#f val))))
(display "")(let1 val (begin (char<? #\c #\b)) (if (equal? '#f val) (format #t " Running ~d/~d" 493 1775) (begin (add-error '(char<? #\c #\b) '#f val))))
(display "")(let1 val (begin (cons* 1 2 3 4)) (if (equal? '(1 2 3 . 4) val) (format #t " Running ~d/~d" 494 1775) (add-error '(cons* 1 2 3 4) '(1 2 3 . 4) val)))(display "")(let1 val (begin (cons* 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 495 1775) (add-error '(cons* 1) '1 val)))(display "")(let1 val (begin (receive (x y) (car+cdr '(1 . 3)) (cons x y))) (if (equal? '(1 . 3) val) (format #t " Running ~d/~d" 496 1775) (add-error '(receive (x y) (car+cdr '(1 . 3)) (cons x y)) '(1 . 3) val)))(display "")(let1 val (begin (append 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 497 1775) (begin (add-error '(append 1) '1 val))))
(display "")(let1 val (begin (append '(1) 2)) (if (equal? '(1 . 2) val) (format #t " Running ~d/~d" 498 1775) (begin (add-error '(append '(1) 2) '(1 . 2) val))))
(display "")(let1 val (begin (append '(1 2) 3)) (if (equal? '(1 2 . 3) val) (format #t " Running ~d/~d" 499 1775) (begin (add-error '(append '(1 2) 3) '(1 2 . 3) val))))
(display "")(let1 val (begin (append '(1 2) '(3))) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 500 1775) (begin (add-error '(append '(1 2) '(3)) '(1 2 3) val))))
(display "")(let1 val (begin (append '(1 2) '(3) 4)) (if (equal? '(1 2 3 . 4) val) (format #t " Running ~d/~d" 501 1775) (begin (add-error '(append '(1 2) '(3) 4) '(1 2 3 . 4) val))))
(display "")(let1 val (begin (append '(1 2) '(3) 4)) (if (equal? '(1 2 3 . 4) val) (format #t " Running ~d/~d" 502 1775) (begin (add-error '(append '(1 2) '(3) 4) '(1 2 3 . 4) val))))
(display "")(let1 val (begin (append '() 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 503 1775) (begin (add-error '(append '() 1) '1 val))))
(display "")(let1 val (begin (append '(1) '())) (if (equal? '(1) val) (format #t " Running ~d/~d" 504 1775) (begin (add-error '(append '(1) '()) '(1) val))))
(display "")(let1 val (begin (append! 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 505 1775) (begin (add-error '(append! 1) '1 val))))
(display "")(let1 val (begin (append! '(1) 2)) (if (equal? '(1 . 2) val) (format #t " Running ~d/~d" 506 1775) (begin (add-error '(append! '(1) 2) '(1 . 2) val))))
(display "")(let1 val (begin (append! '(1 2) 3)) (if (equal? '(1 2 . 3) val) (format #t " Running ~d/~d" 507 1775) (begin (add-error '(append! '(1 2) 3) '(1 2 . 3) val))))
(display "")(let1 val (begin (append! '(1 2) '(3))) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 508 1775) (begin (add-error '(append! '(1 2) '(3)) '(1 2 3) val))))
(display "")(let1 val (begin (append! '(1 2) '(3) 4)) (if (equal? '(1 2 3 . 4) val) (format #t " Running ~d/~d" 509 1775) (begin (add-error '(append! '(1 2) '(3) 4) '(1 2 3 . 4) val))))
(display "")(let1 val (begin (append! '(1 2) '(3) 4)) (if (equal? '(1 2 3 . 4) val) (format #t " Running ~d/~d" 510 1775) (begin (add-error '(append! '(1 2) '(3) 4) '(1 2 3 . 4) val))))
(display "")(let1 val (begin (append! '() 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 511 1775) (begin (add-error '(append! '() 1) '1 val))))
(display "")(let1 val (begin (append! '(1) '())) (if (equal? '(1) val) (format #t " Running ~d/~d" 512 1775) (begin (add-error '(append! '(1) '()) '(1) val))))
(display "")(let1 val (begin (take '(a b c d e) 2)) (if (equal? '(a b) val) (format #t " Running ~d/~d" 513 1775) (add-error '(take '(a b c d e) 2) '(a b) val)))(display "")(let1 val (begin (drop '(a b c d e) 2)) (if (equal? '(c d e) val) (format #t " Running ~d/~d" 514 1775) (add-error '(drop '(a b c d e) 2) '(c d e) val)))(display "")(let1 val (begin (take '(1 2 3 . d) 2)) (if (equal? '(1 2) val) (format #t " Running ~d/~d" 515 1775) (add-error '(take '(1 2 3 . d) 2) '(1 2) val)))(display "")(let1 val (begin (drop '(1 2 3 . d) 2)) (if (equal? '(3 . d) val) (format #t " Running ~d/~d" 516 1775) (add-error '(drop '(1 2 3 . d) 2) '(3 . d) val)))(display "")(let1 val (begin (take '(1 2 3 . d) 3)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 517 1775) (add-error '(take '(1 2 3 . d) 3) '(1 2 3) val)))(display "")(let1 val (begin (drop '(1 2 3 . d) 3)) (if (equal? 'd val) (format #t " Running ~d/~d" 518 1775) (add-error '(drop '(1 2 3 . d) 3) 'd val)))(display "")(let1 val (begin (take-right '(a b c d e) 2)) (if (equal? '(d e) val) (format #t " Running ~d/~d" 519 1775) (add-error '(take-right '(a b c d e) 2) '(d e) val)))(display "")(let1 val (begin (drop-right '(a b c d e) 2)) (if (equal? '(a b c) val) (format #t " Running ~d/~d" 520 1775) (add-error '(drop-right '(a b c d e) 2) '(a b c) val)))(display "")(let1 val (begin (take-right '(1 2 3 . d) 2)) (if (equal? '(2 3 . d) val) (format #t " Running ~d/~d" 521 1775) (add-error '(take-right '(1 2 3 . d) 2) '(2 3 . d) val)))(display "")(let1 val (begin (drop-right '(1 2 3 . d) 2)) (if (equal? '(1) val) (format #t " Running ~d/~d" 522 1775) (add-error '(drop-right '(1 2 3 . d) 2) '(1) val)))(display "")(let1 val (begin (take-right '(1 2 3 . d) 0)) (if (equal? 'd val) (format #t " Running ~d/~d" 523 1775) (add-error '(take-right '(1 2 3 . d) 0) 'd val)))(display "")(let1 val (begin (drop-right '(1 2 3 . d) 0)) (if (equal? '(1 2 3) val) (format #t " Running ~d/~d" 524 1775) (add-error '(drop-right '(1 2 3 . d) 0) '(1 2 3) val)))(display "")(let1 val (begin (xcons '(b c) 'a)) (if (equal? '(a b c) val) (format #t " Running ~d/~d" 525 1775) (add-error '(xcons '(b c) 'a) '(a b c) val)))(display "")(let1 val (begin (make-list 4 'c)) (if (equal? '(c c c c) val) (format #t " Running ~d/~d" 526 1775) (add-error '(make-list 4 'c) '(c c c c) val)))(display "")(let1 val (begin (list-tabulate 4 values)) (if (equal? '(0 1 2 3) val) (format #t " Running ~d/~d" 527 1775) (add-error '(list-tabulate 4 values) '(0 1 2 3) val)))(display "")(let1 val (begin (list-copy '(1 2 3 4))) (if (equal? '(1 2 3 4) val) (format #t " Running ~d/~d" 528 1775) (add-error '(list-copy '(1 2 3 4)) '(1 2 3 4) val)))(display "")(let1 val (begin (let1 lst (circular-list 'z 'q) (and (eq? (first lst) 'z) (eq? (second lst) 'q) (third lst) 'z))) (if (equal? 'z val) (format #t " Running ~d/~d" 529 1775) (add-error '(let1 lst (circular-list 'z 'q) (and (eq? (first lst) 'z) (eq? (second lst) 'q) (third lst) 'z)) 'z val)))(display "")(let1 val (begin (proper-list? '())) (if (equal? '#t val) (format #t " Running ~d/~d" 530 1775) (add-error '(proper-list? '()) '#t val)))(display "")(let1 val (begin (proper-list? '(1 2 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 531 1775) (add-error '(proper-list? '(1 2 3)) '#t val)))(display "")(let1 val (begin (proper-list? '(1 . 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 532 1775) (add-error '(proper-list? '(1 . 3)) '#f val)))(display "")(let1 val (begin (dotted-list? '(1 2 . 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 533 1775) (add-error '(dotted-list? '(1 2 . 3)) '#t val)))(display "")(let1 val (begin (dotted-list? '(1 2 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 534 1775) (add-error '(dotted-list? '(1 2 3)) '#f val)))(display "")(let1 val (begin (last-pair '(a b c))) (if (equal? '(c) val) (format #t " Running ~d/~d" 535 1775) (add-error '(last-pair '(a b c)) '(c) val)))(display "")(let1 val (begin (last '(a b c))) (if (equal? 'c val) (format #t " Running ~d/~d" 536 1775) (add-error '(last '(a b c)) 'c val)))(display "")(let1 val (begin (not-pair? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 537 1775) (add-error '(not-pair? 3) '#t val)))(display "")(let1 val (begin (not-pair? '(1 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 538 1775) (add-error '(not-pair? '(1 2)) '#f val)))(display "")(let1 val (begin (list= eq?)) (if (equal? '#t val) (format #t " Running ~d/~d" 539 1775) (add-error '(list= eq?) '#t val)))(display "")(let1 val (begin (list= eq? '(a))) (if (equal? '#t val) (format #t " Running ~d/~d" 540 1775) (add-error '(list= eq? '(a)) '#t val)))(display "")(let1 val (begin (list= eq? '(a) '(a))) (if (equal? '#t val) (format #t " Running ~d/~d" 541 1775) (add-error '(list= eq? '(a) '(a)) '#t val)))(display "")(let1 val (begin (list= eq? '(a) '(a b))) (if (equal? '#f val) (format #t " Running ~d/~d" 542 1775) (add-error '(list= eq? '(a) '(a b)) '#f val)))(display "")(let1 val (begin (receive (x y) (split-at '(a b c d e f g h) 3) (cons x y))) (if (equal? '((a b c) d e f g h) val) (format #t " Running ~d/~d" 543 1775) (add-error '(receive (x y) (split-at '(a b c d e f g h) 3) (cons x y)) '((a b c) d e f g h) val)))(display "")(let1 val (begin (string #\1 #\2 #\3)) (if (equal? '"123" val) (format #t " Running ~d/~d" 544 1775) (begin (add-error '(string #\1 #\2 #\3) '"123" val))))
(display "")(let1 val (begin (regexp-replace-all #/&/ "taro&hanako" "&amp;")) (if (equal? '"taro&amp;hanako" val) (format #t " Running ~d/~d" 545 1775) (begin (add-error '(regexp-replace-all #/&/ "taro&hanako" "&amp;") '"taro&amp;hanako" val))))
(display "")(let1 val (begin (let1 ht (make-hashtable (lambda (x) 2) (lambda (a b) #t)) (hashtable-set! ht 1 1) (hashtable-set! ht 2 2) (hashtable-ref ht 1))) (if (equal? '2 val) (format #t " Running ~d/~d" 546 1775) (add-error '(let1 ht (make-hashtable (lambda (x) 2) (lambda (a b) #t)) (hashtable-set! ht 1 1) (hashtable-set! ht 2 2) (hashtable-ref ht 1)) '2 val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "my" "apple") (hashtable-set! ht "our" "water") (hashtable-ref ht "my"))) (if (equal? '"apple" val) (format #t " Running ~d/~d" 547 1775) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "my" "apple") (hashtable-set! ht "our" "water") (hashtable-ref ht "my")) '"apple" val)))(display "")(let1 val (begin (hashtable? (make-hashtable string-hash string=?))) (if (equal? '#t val) (format #t " Running ~d/~d" 548 1775) (add-error '(hashtable? (make-hashtable string-hash string=?)) '#t val)))(display "")(let1 val (begin (hashtable? (make-eq-hashtable))) (if (equal? '#t val) (format #t " Running ~d/~d" 549 1775) (add-error '(hashtable? (make-eq-hashtable)) '#t val)))(display "")(let1 val (begin (hashtable? '(a . b))) (if (equal? '#f val) (format #t " Running ~d/~d" 550 1775) (add-error '(hashtable? '(a . b)) '#f val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "my" "apple") (hashtable-set! ht "our" "water") (hashtable-size ht))) (if (equal? '2 val) (format #t " Running ~d/~d" 551 1775) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "my" "apple") (hashtable-set! ht "our" "water") (hashtable-size ht)) '2 val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht "my" "apple") (hashtable-set! ht "my" "apple") (hashtable-size ht))) (if (equal? '2 val) (format #t " Running ~d/~d" 552 1775) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht "my" "apple") (hashtable-set! ht "my" "apple") (hashtable-size ht)) '2 val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-delete! ht 1) (hashtable-ref ht 1 #f))) (if (equal? '#f val) (format #t " Running ~d/~d" 553 1775) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-delete! ht 1) (hashtable-ref ht 1 #f)) '#f val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-delete! ht "one") (hashtable-ref ht "one" #f))) (if (equal? '#f val) (format #t " Running ~d/~d" 554 1775) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-delete! ht "one") (hashtable-ref ht "one" #f)) '#f val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-contains? ht 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 555 1775) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-contains? ht 2)) '#f val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-contains? ht 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 556 1775) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-contains? ht 1)) '#t val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-contains? ht "two"))) (if (equal? '#f val) (format #t " Running ~d/~d" 557 1775) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-contains? ht "two")) '#f val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-contains? ht "one"))) (if (equal? '#t val) (format #t " Running ~d/~d" 558 1775) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-contains? ht "one")) '#t val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" "one") (hashtable-update! ht "one" (lambda (x) (string-append "!" x "!")) "hige") (hashtable-update! ht "two" (lambda (x) (string-append "!" x "!")) "hige") (string-append (hashtable-ref ht "one") (hashtable-ref ht "two")))) (if (equal? '"!one!!hige!" val) (format #t " Running ~d/~d" 559 1775) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" "one") (hashtable-update! ht "one" (lambda (x) (string-append "!" x "!")) "hige") (hashtable-update! ht "two" (lambda (x) (string-append "!" x "!")) "hige") (string-append (hashtable-ref ht "one") (hashtable-ref ht "two"))) '"!one!!hige!" val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (let1 ht-copy (hashtable-copy ht) (and (string=? (hashtable-ref ht-copy 1) "one") (not (hashtable-mutable? ht-copy)))))) (if (equal? '#t val) (format #t " Running ~d/~d" 560 1775) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (let1 ht-copy (hashtable-copy ht) (and (string=? (hashtable-ref ht-copy 1) "one") (not (hashtable-mutable? ht-copy))))) '#t val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (let1 ht-copy (hashtable-copy ht #t) (and (string=? (hashtable-ref ht-copy 1) "one") (hashtable-mutable? ht-copy))))) (if (equal? '#t val) (format #t " Running ~d/~d" 561 1775) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (let1 ht-copy (hashtable-copy ht #t) (and (string=? (hashtable-ref ht-copy 1) "one") (hashtable-mutable? ht-copy)))) '#t val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" "one") (let1 ht-copy (hashtable-copy ht) (and (string=? (hashtable-ref ht-copy "one") "one") (not (hashtable-mutable? ht-copy)))))) (if (equal? '#t val) (format #t " Running ~d/~d" 562 1775) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" "one") (let1 ht-copy (hashtable-copy ht) (and (string=? (hashtable-ref ht-copy "one") "one") (not (hashtable-mutable? ht-copy))))) '#t val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" "one") (let1 ht-copy (hashtable-copy ht #t) (and (string=? (hashtable-ref ht-copy "one") "one") (hashtable-mutable? ht-copy))))) (if (equal? '#t val) (format #t " Running ~d/~d" 563 1775) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" "one") (let1 ht-copy (hashtable-copy ht #t) (and (string=? (hashtable-ref ht-copy "one") "one") (hashtable-mutable? ht-copy)))) '#t val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-set! ht 2 "two") (hashtable-clear! ht) (hashtable-size ht))) (if (equal? '0 val) (format #t " Running ~d/~d" 564 1775) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-set! ht 2 "two") (hashtable-clear! ht) (hashtable-size ht)) '0 val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-set! ht "two" 2) (hashtable-clear! ht) (hashtable-size ht))) (if (equal? '0 val) (format #t " Running ~d/~d" 565 1775) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-set! ht "two" 2) (hashtable-clear! ht) (hashtable-size ht)) '0 val)))(display "")(let1 val (begin (let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-set! ht 2 "two") (vector->list (hashtable-keys ht)))) (if (equal? '(1 2) val) (format #t " Running ~d/~d" 566 1775) (add-error '(let1 ht (make-eq-hashtable) (hashtable-set! ht 1 "one") (hashtable-set! ht 2 "two") (vector->list (hashtable-keys ht))) '(1 2) val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-set! ht "two" 2) (let1 keys (vector->list (hashtable-keys ht)) (and (member "one" keys) (member "two" keys) (= 2 (length keys)))))) (if (equal? '#t val) (format #t " Running ~d/~d" 567 1775) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-set! ht "two" 2) (let1 keys (vector->list (hashtable-keys ht)) (and (member "one" keys) (member "two" keys) (= 2 (length keys))))) '#t val)))(display "")(let1 val (begin (let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-set! ht "two" 2) (receive (keys vals) (hashtable-entries ht) (append (vector->list keys) (vector->list vals))))) (if (equal? '("two" "one" 2 1) val) (format #t " Running ~d/~d" 568 1775) (add-error '(let1 ht (make-hashtable string-hash string=?) (hashtable-set! ht "one" 1) (hashtable-set! ht "two" 2) (receive (keys vals) (hashtable-entries ht) (append (vector->list keys) (vector->list vals)))) '("two" "one" 2 1) val)))(display "")(let1 val (begin (equal? eq? (hashtable-equivalence-function (make-eq-hashtable)))) (if (equal? '#t val) (format #t " Running ~d/~d" 569 1775) (add-error '(equal? eq? (hashtable-equivalence-function (make-eq-hashtable))) '#t val)))(display "")(let1 val (begin (hashtable-hash-function (make-eq-hashtable))) (if (equal? '#f val) (format #t " Running ~d/~d" 570 1775) (add-error '(hashtable-hash-function (make-eq-hashtable)) '#f val)))(display "")(let1 val (begin (equal? string=? (hashtable-equivalence-function (make-hashtable string-hash string=?)))) (if (equal? '#t val) (format #t " Running ~d/~d" 571 1775) (add-error '(equal? string=? (hashtable-equivalence-function (make-hashtable string-hash string=?))) '#t val)))(display "")(let1 val (begin (equal? string-hash (hashtable-hash-function (make-hashtable string-hash string=?)))) (if (equal? '#t val) (format #t " Running ~d/~d" 572 1775) (add-error '(equal? string-hash (hashtable-hash-function (make-hashtable string-hash string=?))) '#t val)))(display "")(let1 val (begin (= (string-ci-hash "abc") (string-ci-hash "AbC"))) (if (equal? '#t val) (format #t " Running ~d/~d" 573 1775) (add-error '(= (string-ci-hash "abc") (string-ci-hash "AbC")) '#t val)))(display "")(let1 val (begin (= (symbol-hash 'abc) (symbol-hash 'abc))) (if (equal? '#t val) (format #t " Running ~d/~d" 574 1775) (add-error '(= (symbol-hash 'abc) (symbol-hash 'abc)) '#t val)))(display "")(let1 val (begin (= (symbol-hash 'abc) (symbol-hash 'aBc))) (if (equal? '#f val) (format #t " Running ~d/~d" 575 1775) (add-error '(= (symbol-hash 'abc) (symbol-hash 'aBc)) '#f val)))(display "")(let1 val (begin (= (equal-hash '(a b c)) (equal-hash '(a b c)))) (if (equal? '#t val) (format #t " Running ~d/~d" 576 1775) (add-error '(= (equal-hash '(a b c)) (equal-hash '(a b c))) '#t val)))(display "")(let1 val (begin (equal? eqv? (hashtable-equivalence-function (make-eqv-hashtable)))) (if (equal? '#t val) (format #t " Running ~d/~d" 577 1775) (add-error '(equal? eqv? (hashtable-equivalence-function (make-eqv-hashtable))) '#t val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (point? (record-predicate :point)) (point-x (record-accessor :point 0)) (point-y (record-accessor :point 1)) (point-x-set! (record-mutator :point 0)) (point-y-set! (record-mutator :point 1)) (p1 (make-point 1 2))) (and (point? p1) (record? p1) (= (point-x p1) 1) (= (point-y p1) 2) (point-x-set! p1 5) (= (point-x p1) 5)))) (if (equal? '#t val) (format #t " Running ~d/~d" 578 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (point? (record-predicate :point)) (point-x (record-accessor :point 0)) (point-y (record-accessor :point 1)) (point-x-set! (record-mutator :point 0)) (point-y-set! (record-mutator :point 1)) (p1 (make-point 1 2))) (and (point? p1) (record? p1) (= (point-x p1) 1) (= (point-y p1) 2) (point-x-set! p1 5) (= (point-x p1) 5))) '#t val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point2 :point #f #f #f '#((mutable x) (mutable y)))) (make-point2 (record-constructor (make-record-constructor-descriptor :point2 #f #f))) (point? (record-predicate :point)) (point-x (record-accessor :point 0)) (point-y (record-accessor :point 1)) (point-x-set! (record-mutator :point 0)) (point-y-set! (record-mutator :point 1)) (point2? (record-predicate :point2)) (point2-xx (record-accessor :point2 0)) (point2-yy (record-accessor :point2 1)) (point2-xx-set! (record-mutator :point2 0)) (point2-yy-set! (record-mutator :point2 1)) (p2 (make-point2 1 2 3 4))) (and (point? p2) (point2? p2) (record? p2) (= (point-x p2) 1) (= (point-y p2) 2) (= (point2-xx p2) 3) (= (point2-yy p2) 4) (point-x-set! p2 5) (= (point-x p2) 5) (point-y-set! p2 6) (= (point-y p2) 6) (point2-xx-set! p2 7) (= (point2-xx p2) 7) (point2-yy-set! p2 8) (= (point2-yy p2) 8)))) (if (equal? '#t val) (format #t " Running ~d/~d" 579 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point2 :point #f #f #f '#((mutable x) (mutable y)))) (make-point2 (record-constructor (make-record-constructor-descriptor :point2 #f #f))) (point? (record-predicate :point)) (point-x (record-accessor :point 0)) (point-y (record-accessor :point 1)) (point-x-set! (record-mutator :point 0)) (point-y-set! (record-mutator :point 1)) (point2? (record-predicate :point2)) (point2-xx (record-accessor :point2 0)) (point2-yy (record-accessor :point2 1)) (point2-xx-set! (record-mutator :point2 0)) (point2-yy-set! (record-mutator :point2 1)) (p2 (make-point2 1 2 3 4))) (and (point? p2) (point2? p2) (record? p2) (= (point-x p2) 1) (= (point-y p2) 2) (= (point2-xx p2) 3) (= (point2-yy p2) 4) (point-x-set! p2 5) (= (point-x p2) 5) (point-y-set! p2 6) (= (point-y p2) 6) (point2-xx-set! p2 7) (= (point2-xx p2) 7) (point2-yy-set! p2 8) (= (point2-yy p2) 8))) '#t val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd/abs (make-record-constructor-descriptor :point #f (lambda (new) (lambda (x y) (new (abs x) (abs y)))))) (point-x (record-accessor :point 0)) (point-y (record-accessor :point 1)) (make-point/abs (record-constructor :point-cd/abs))) (and (= (point-x (make-point/abs -1 -2)) 1) (= (point-y (make-point/abs -1 -2)) 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 580 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd/abs (make-record-constructor-descriptor :point #f (lambda (new) (lambda (x y) (new (abs x) (abs y)))))) (point-x (record-accessor :point 0)) (point-y (record-accessor :point 1)) (make-point/abs (record-constructor :point-cd/abs))) (and (= (point-x (make-point/abs -1 -2)) 1) (= (point-y (make-point/abs -1 -2)) 2))) '#t val)))(display "")(let1 val (begin (let* ((color->rgb (lambda (c) (cons 'rgb c))) (:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (:point-cd/abs (make-record-constructor-descriptor :point #f (lambda (new) (lambda (x y) (new (abs x) (abs y)))))) (point-x (record-accessor :point 0)) (:cpoint (make-record-type-descriptor 'cpoint :point #f #f #f '#((mutable rgb)))) (cpoint-rgb (record-accessor :cpoint 0)) (make-cpoint (record-constructor (make-record-constructor-descriptor :cpoint :point-cd (lambda (p) (lambda (x y c) ((p x y) (color->rgb c))))))) (make-cpoint/abs (record-constructor (make-record-constructor-descriptor :cpoint :point-cd/abs (lambda (p) (lambda (x y c) ((p x y) (color->rgb c)))))))) (and (equal? (cpoint-rgb (make-cpoint -1 -3 'red)) '(rgb . red)) (= (point-x (make-cpoint -1 -3 'red)) -1) (= (point-x (make-cpoint/abs -1 -3 'red)) 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 581 1775) (add-error '(let* ((color->rgb (lambda (c) (cons 'rgb c))) (:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (:point-cd/abs (make-record-constructor-descriptor :point #f (lambda (new) (lambda (x y) (new (abs x) (abs y)))))) (point-x (record-accessor :point 0)) (:cpoint (make-record-type-descriptor 'cpoint :point #f #f #f '#((mutable rgb)))) (cpoint-rgb (record-accessor :cpoint 0)) (make-cpoint (record-constructor (make-record-constructor-descriptor :cpoint :point-cd (lambda (p) (lambda (x y c) ((p x y) (color->rgb c))))))) (make-cpoint/abs (record-constructor (make-record-constructor-descriptor :cpoint :point-cd/abs (lambda (p) (lambda (x y c) ((p x y) (color->rgb c)))))))) (and (equal? (cpoint-rgb (make-cpoint -1 -3 'red)) '(rgb . red)) (= (point-x (make-cpoint -1 -3 'red)) -1) (= (point-x (make-cpoint/abs -1 -3 'red)) 1))) '#t val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #t '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (p (make-point 1 2))) (record? p))) (if (equal? '#f val) (format #t " Running ~d/~d" 582 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #t '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (p (make-point 1 2))) (record? p)) '#f val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (p (make-point 1 2))) (eqv? :point (record-rtd p)))) (if (equal? '#t val) (format #t " Running ~d/~d" 583 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (p (make-point 1 2))) (eqv? :point (record-rtd p))) '#t val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (p (make-point 1 2))) (record-type-name (record-rtd p)))) (if (equal? 'point val) (format #t " Running ~d/~d" 584 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (p (make-point 1 2))) (record-type-name (record-rtd p))) 'point val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point2 :point #f #f #f '#((mutable x) (mutable y))))) (record-type-name (record-type-parent :point2)))) (if (equal? 'point val) (format #t " Running ~d/~d" 585 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point2 :point #f #f #f '#((mutable x) (mutable y))))) (record-type-name (record-type-parent :point2))) 'point val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (eq? :point :point2))) (if (equal? '#t val) (format #t " Running ~d/~d" 586 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (eq? :point :point2)) '#t val)))(display "")(let1 val (begin (let* ((:point2 (make-record-type-descriptor 'point2 #f #f #f #f '#((mutable x) (mutable y))))) (record-type-generative? :point2))) (if (equal? '#t val) (format #t " Running ~d/~d" 587 1775) (add-error '(let* ((:point2 (make-record-type-descriptor 'point2 #f #f #f #f '#((mutable x) (mutable y))))) (record-type-generative? :point2)) '#t val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (record-type-generative? :point))) (if (equal? '#f val) (format #t " Running ~d/~d" 588 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (record-type-generative? :point)) '#f val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (record-type-field-names :point))) (if (equal? '#(x y) val) (format #t " Running ~d/~d" 589 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (record-type-field-names :point)) '#(x y) val)))(display "")(let1 val (begin (let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (record-field-mutable? :point 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 590 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f 'point-uid #f #f '#((mutable x) (mutable y))))) (record-field-mutable? :point 1)) '#t val)))(set! todo-num (+ todo-num 1))(set! todo-num (+ todo-num 1))(display "")(let1 val (begin (let ((x '()) (c #f)) (dynamic-wind (lambda () (set! x (cons 'a x))) (lambda () (dynamic-wind (lambda () (set! x (cons 'b x))) (lambda () (dynamic-wind (lambda () (set! x (cons 'c x))) (lambda () (set! c (call/cc (lambda (x) x)))) (lambda () (set! x (cons 'd x))))) (lambda () (set! x (cons 'e x)))) (dynamic-wind (lambda () (set! x (cons 'f x))) (lambda () (when c (c #f))) (lambda () (set! x (cons 'g x))))) (lambda () (set! x (cons 'h x)))) (reverse x))) (if (equal? '(a b c d e f g b c d e f g h) val) (format #t " Running ~d/~d" 593 1775) (add-error '(let ((x '()) (c #f)) (dynamic-wind (lambda () (set! x (cons 'a x))) (lambda () (dynamic-wind (lambda () (set! x (cons 'b x))) (lambda () (dynamic-wind (lambda () (set! x (cons 'c x))) (lambda () (set! c (call/cc (lambda (x) x)))) (lambda () (set! x (cons 'd x))))) (lambda () (set! x (cons 'e x)))) (dynamic-wind (lambda () (set! x (cons 'f x))) (lambda () (when c (c #f))) (lambda () (set! x (cons 'g x))))) (lambda () (set! x (cons 'h x)))) (reverse x)) '(a b c d e f g b c d e f g h) val)))(display "")(let1 val (begin ((lambda () (receive x (dynamic-wind (lambda () #f) (lambda () (values 'a 'b 'c)) (lambda () #f)) x)))) (if (equal? '(a b c) val) (format #t " Running ~d/~d" 594 1775) (add-error '((lambda () (receive x (dynamic-wind (lambda () #f) (lambda () (values 'a 'b 'c)) (lambda () #f)) x))) '(a b c) val)))(display "")(let1 val (begin ((lambda () (receive x (dynamic-wind (lambda () #f) (lambda () (values)) (lambda () #f)) x)))) (if (equal? '() val) (format #t " Running ~d/~d" 595 1775) (add-error '((lambda () (receive x (dynamic-wind (lambda () #f) (lambda () (values)) (lambda () #f)) x))) '() val)))(display "")(let1 val (begin (eval 3 '())) (if (equal? '3 val) (format #t " Running ~d/~d" 596 1775) (add-error '(eval 3 '()) '3 val)))(display "")(let1 val (begin (equal? '(#(1 2 3) . #(one two three)) '(#(1 2 3) . #(one two three)))) (if (equal? '#t val) (format #t " Running ~d/~d" 597 1775) (begin (add-error '(equal? '(#(1 2 3) . #(one two three)) '(#(1 2 3) . #(one two three))) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (call/cc (lambda (cont) (with-exception-handler (lambda (c) (cont 'error)) (lambda () (car 3))))))) (format #t " Running ~d/~d" 598 1775) (add-error '(call/cc (lambda (cont) (with-exception-handler (lambda (c) (cont 'error)) (lambda () (car 3))))) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (car 3))) (format #t " Running ~d/~d" 599 1775) (add-error '(car 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (cdr 3))) (format #t " Running ~d/~d" 600 1775) (add-error '(cdr 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (cddr 3))) (format #t " Running ~d/~d" 601 1775) (add-error '(cddr 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (cdar 3))) (format #t " Running ~d/~d" 602 1775) (add-error '(cdar 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (cadr 3))) (format #t " Running ~d/~d" 603 1775) (add-error '(cadr 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (caar 3))) (format #t " Running ~d/~d" 604 1775) (add-error '(caar 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (values 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) (format #t " Running ~d/~d" 605 1775) (add-error '(values 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (apply values '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))) (format #t " Running ~d/~d" 606 1775) (add-error '(apply values '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (apply (lambda (s) (display s)) '(1 2)))) (format #t " Running ~d/~d" 607 1775) (add-error '(apply (lambda (s) (display s)) '(1 2)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (number? 2 2))) (format #t " Running ~d/~d" 608 1775) (add-error '(number? 2 2) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (make-record-constructor-descriptor))) (format #t " Running ~d/~d" 609 1775) (add-error '(make-record-constructor-descriptor) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (hashtable-clear! 1 1 1))) (format #t " Running ~d/~d" 610 1775) (add-error '(hashtable-clear! 1 1 1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (record-predicate 3))) (format #t " Running ~d/~d" 611 1775) (add-error '(record-predicate 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (record-constructor 3))) (format #t " Running ~d/~d" 612 1775) (add-error '(record-constructor 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (make-record-type-descriptor 'point 3 'uid #f #f #f))) (format #t " Running ~d/~d" 613 1775) (add-error '(make-record-type-descriptor 'point 3 'uid #f #f #f) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (point-x (record-accessor :point 3))) #f))) (format #t " Running ~d/~d" 614 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (point-x (record-accessor :point 3))) #f) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((immutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (point-x (record-mutator :point 0))) #f))) (format #t " Running ~d/~d" 615 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((immutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd)) (point-x (record-mutator :point 0))) #f) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((immutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point2 #f #f #f #f '#((immutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (:point2-cd (make-record-constructor-descriptor :point2 #f #f)) (make-point (record-constructor :point-cd)) (point2-x (record-accessor :point2 0))) (point2-x (make-point 1 2))))) (format #t " Running ~d/~d" 616 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #f #f '#((immutable x) (mutable y)))) (:point2 (make-record-type-descriptor 'point2 #f #f #f #f '#((immutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (:point2-cd (make-record-constructor-descriptor :point2 #f #f)) (make-point (record-constructor :point-cd)) (point2-x (record-accessor :point2 0))) (point2-x (make-point 1 2))) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (let* ((:point (make-record-type-descriptor 'point #f #f #t #t '#((immutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd))) (record-rtd (make-point 2 21))))) (format #t " Running ~d/~d" 617 1775) (add-error '(let* ((:point (make-record-type-descriptor 'point #f #f #t #t '#((immutable x) (mutable y)))) (:point-cd (make-record-constructor-descriptor :point #f #f)) (make-point (record-constructor :point-cd))) (record-rtd (make-point 2 21))) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (apply read-char (current-input-port)))) (format #t " Running ~d/~d" 618 1775) (add-error '(apply read-char (current-input-port)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (rxmatch-start (rxmatch #/\d+/ "a345a") 5))) (format #t " Running ~d/~d" 619 1775) (add-error '(rxmatch-start (rxmatch #/\d+/ "a345a") 5) 'error val))(set! todo-num (+ todo-num 1))(display "")(if (equal? 'error (guard (con (#t 'error)) (string-ref "hige" 5))) (format #t " Running ~d/~d" 621 1775) (add-error '(string-ref "hige" 5) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (open-file-input-port "not-exist-path/////xxx"))) (format #t " Running ~d/~d" 622 1775) (add-error '(open-file-input-port "not-exist-path/////xxx") 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (open-file-output-port "not-exist-path/////xxx"))) (format #t " Running ~d/~d" 623 1775) (add-error '(open-file-output-port "not-exist-path/////xxx") 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (format "~a ~a" 1))) (format #t " Running ~d/~d" 624 1775) (add-error '(format "~a ~a" 1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) my-unbound-variable)) (format #t " Running ~d/~d" 625 1775) (add-error 'my-unbound-variable 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (my-unbound-variable))) (format #t " Running ~d/~d" 626 1775) (add-error '(my-unbound-variable) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (vector-ref 'v 3))) (format #t " Running ~d/~d" 627 1775) (add-error '(vector-ref 'v 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (receive (a) (values 1 2)))) (format #t " Running ~d/~d" 628 1775) (add-error '(receive (a) (values 1 2)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (receive (a b) (values 1)))) (format #t " Running ~d/~d" 629 1775) (add-error '(receive (a b) (values 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (3))) (format #t " Running ~d/~d" 630 1775) (add-error '(3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (/ 3 0))) (format #t " Running ~d/~d" 631 1775) (add-error '(/ 3 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (error "our" "message"))) (format #t " Running ~d/~d" 632 1775) (add-error '(error "our" "message") 'error val))(display "")(let1 val (begin (let ((x (list 'a 'b 'c 'a)) (y (list 'a 'b 'c 'a 'b 'c 'a))) (set-cdr! (list-tail x 2) x) (set-cdr! (list-tail y 5) y) (equal? x y))) (if (equal? '#t val) (format #t " Running ~d/~d" 633 1775) (begin (add-error '(let ((x (list 'a 'b 'c 'a)) (y (list 'a 'b 'c 'a 'b 'c 'a))) (set-cdr! (list-tail x 2) x) (set-cdr! (list-tail y 5) y) (equal? x y)) '#t val))))
(display "")(let1 val (begin (apply = '(3 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 634 1775) (begin (add-error '(apply = '(3 3)) '#t val))))
(display "")(let1 val (begin (apply = '(3 4))) (if (equal? '#f val) (format #t " Running ~d/~d" 635 1775) (begin (add-error '(apply = '(3 4)) '#f val))))
(display "")(let1 val (begin (apply = '(3 3 3 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 636 1775) (begin (add-error '(apply = '(3 3 3 3)) '#t val))))
(display "")(let1 val (begin (apply = '(3 3 3 4))) (if (equal? '#f val) (format #t " Running ~d/~d" 637 1775) (begin (add-error '(apply = '(3 3 3 4)) '#f val))))
(display "")(let1 val (begin (apply = '(4 3 3 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 638 1775) (begin (add-error '(apply = '(4 3 3 3)) '#f val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (apply = '(4 'z 3 3)))) (format #t " Running ~d/~d" 639 1775) (add-error '(apply = '(4 'z 3 3)) 'error val))(display "")(let1 val (begin (apply > '(4 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 640 1775) (begin (add-error '(apply > '(4 3)) '#t val))))
(display "")(let1 val (begin (apply > '(4 3 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 641 1775) (begin (add-error '(apply > '(4 3 2)) '#t val))))
(display "")(let1 val (begin (apply > '(4 3 1 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 642 1775) (begin (add-error '(apply > '(4 3 1 2)) '#f val))))
(display "")(let1 val (begin (apply >= '(3 3 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 643 1775) (begin (add-error '(apply >= '(3 3 3)) '#t val))))
(display "")(let1 val (begin (apply >= '(4 3 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 644 1775) (begin (add-error '(apply >= '(4 3 3)) '#t val))))
(display "")(let1 val (begin (apply >= '(4 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 645 1775) (begin (add-error '(apply >= '(4 3)) '#t val))))
(display "")(let1 val (begin (apply < '(1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 646 1775) (begin (add-error '(apply < '(1 2)) '#t val))))
(display "")(let1 val (begin (apply < '(1 2 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 647 1775) (begin (add-error '(apply < '(1 2 3)) '#t val))))
(display "")(let1 val (begin (apply < '(1 5 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 648 1775) (begin (add-error '(apply < '(1 5 3)) '#f val))))
(display "")(let1 val (begin (apply <= '(1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 649 1775) (begin (add-error '(apply <= '(1 2)) '#t val))))
(display "")(let1 val (begin (apply <= '(1 2 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 650 1775) (begin (add-error '(apply <= '(1 2 3)) '#t val))))
(display "")(let1 val (begin (apply <= '(1 3 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 651 1775) (begin (add-error '(apply <= '(1 3 3)) '#t val))))
(display "")(let1 val (begin (apply <= '(1 5 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 652 1775) (begin (add-error '(apply <= '(1 5 3)) '#f val))))
(set! todo-num (+ todo-num 1))(display "")(if (equal? 'error (guard (con (#t 'error)) (/ 1 0))) (format #t " Running ~d/~d" 654 1775) (add-error '(/ 1 0) 'error val))(display "")(let1 val (begin (apply + '(4))) (if (equal? '4 val) (format #t " Running ~d/~d" 655 1775) (begin (add-error '(apply + '(4)) '4 val))))
(display "")(let1 val (begin (apply + '(4 3))) (if (equal? '7 val) (format #t " Running ~d/~d" 656 1775) (begin (add-error '(apply + '(4 3)) '7 val))))
(display "")(let1 val (begin (apply + '(4 3 10))) (if (equal? '17 val) (format #t " Running ~d/~d" 657 1775) (begin (add-error '(apply + '(4 3 10)) '17 val))))
(display "")(let1 val (begin (apply + '(1 1 1 1))) (if (equal? '4 val) (format #t " Running ~d/~d" 658 1775) (begin (add-error '(apply + '(1 1 1 1)) '4 val))))
(display "")(let1 val (begin (apply - '(10 5))) (if (equal? '5 val) (format #t " Running ~d/~d" 659 1775) (begin (add-error '(apply - '(10 5)) '5 val))))
(display "")(let1 val (begin (apply - '(10 5 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 660 1775) (begin (add-error '(apply - '(10 5 2)) '3 val))))
(display "")(let1 val (begin (apply * '(2 3))) (if (equal? '6 val) (format #t " Running ~d/~d" 661 1775) (begin (add-error '(apply * '(2 3)) '6 val))))
(display "")(let1 val (begin (apply * '(2 3 4))) (if (equal? '24 val) (format #t " Running ~d/~d" 662 1775) (begin (add-error '(apply * '(2 3 4)) '24 val))))
(display "")(let1 val (begin (apply / '(6 2))) (if (equal? '3 val) (format #t " Running ~d/~d" 663 1775) (begin (add-error '(apply / '(6 2)) '3 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (apply / '(6 0)))) (format #t " Running ~d/~d" 664 1775) (add-error '(apply / '(6 0)) 'error val))(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (i (enum-set-indexer e))) (list (i 'red) (i 'green) (i 'blue) (i 'yellow)))) (if (equal? '(0 1 2 #f) val) (format #t " Running ~d/~d" 665 1775) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (i (enum-set-indexer e))) (list (i 'red) (i 'green) (i 'blue) (i 'yellow))) '(0 1 2 #f) val))))
(display "")(let1 val (begin (enum-set->list (make-enumeration '(red green blue)))) (if (equal? '(red green blue) val) (format #t " Running ~d/~d" 666 1775) (begin (add-error '(enum-set->list (make-enumeration '(red green blue))) '(red green blue) val))))
(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (enum-set->list (c '(blue red))))) (if (equal? '(red blue) val) (format #t " Running ~d/~d" 667 1775) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (enum-set->list (c '(blue red)))) '(red blue) val))))
(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (list (enum-set-member? 'blue (c '(red blue))) (enum-set-member? 'green (c '(red blue))) (enum-set-subset? (c '(red blue)) e) (enum-set-subset? (c '(red blue)) (c '(blue red))) (enum-set-subset? (c '(red blue)) (c '(red))) (enum-set=? (c '(red blue)) (c '(blue red)))))) (if (equal? '(#t #f #t #t #f #t) val) (format #t " Running ~d/~d" 668 1775) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (list (enum-set-member? 'blue (c '(red blue))) (enum-set-member? 'green (c '(red blue))) (enum-set-subset? (c '(red blue)) e) (enum-set-subset? (c '(red blue)) (c '(blue red))) (enum-set-subset? (c '(red blue)) (c '(red))) (enum-set=? (c '(red blue)) (c '(blue red))))) '(#t #f #t #t #f #t) val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (guard (c (#t 'error)) (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (c '(pink)))))) (format #t " Running ~d/~d" 669 1775) (add-error '(guard (c (#t 'error)) (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (c '(pink)))) 'error val))(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (r ((enum-set-constructor e) '(red)))) (list (enum-set->list (enum-set-universe e)) (enum-set->list (enum-set-universe r)) ((enum-set-indexer ((enum-set-constructor e) '(red))) 'green) (enum-set-member? 'red e) (enum-set-member? 'black e) (enum-set-subset? e e) (enum-set-subset? r e) (enum-set-subset? e r) (enum-set-subset? e (make-enumeration '(blue green red))) (enum-set-subset? e (make-enumeration '(blue green red black))) (enum-set-subset? (make-enumeration '(blue green red black)) e) (enum-set-subset? ((enum-set-constructor (make-enumeration '(blue green red black))) '(red)) e) (enum-set-subset? ((enum-set-constructor (make-enumeration '(green red))) '(red)) e) (enum-set=? e e) (enum-set=? r e) (enum-set=? e r) (enum-set=? e (make-enumeration '(blue green red)))))) (if (equal? '((red green blue) (red green blue) 1 #t #f #t #t #f #t #t #f #f #t #t #f #f #t) val) (format #t " Running ~d/~d" 670 1775) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (r ((enum-set-constructor e) '(red)))) (list (enum-set->list (enum-set-universe e)) (enum-set->list (enum-set-universe r)) ((enum-set-indexer ((enum-set-constructor e) '(red))) 'green) (enum-set-member? 'red e) (enum-set-member? 'black e) (enum-set-subset? e e) (enum-set-subset? r e) (enum-set-subset? e r) (enum-set-subset? e (make-enumeration '(blue green red))) (enum-set-subset? e (make-enumeration '(blue green red black))) (enum-set-subset? (make-enumeration '(blue green red black)) e) (enum-set-subset? ((enum-set-constructor (make-enumeration '(blue green red black))) '(red)) e) (enum-set-subset? ((enum-set-constructor (make-enumeration '(green red))) '(red)) e) (enum-set=? e e) (enum-set=? r e) (enum-set=? e r) (enum-set=? e (make-enumeration '(blue green red))))) '((red green blue) (red green blue) 1 #t #f #t #t #f #t #t #f #f #t #t #f #f #t) val))))
(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (list (enum-set-member? 'blue (c '(red blue))) (enum-set-member? 'green (c '(red blue))) (enum-set-subset? (c '(red blue)) e) (enum-set-subset? (c '(red blue)) (c '(blue red))) (enum-set-subset? (c '(red blue)) (c '(red))) (enum-set=? (c '(red blue)) (c '(blue red)))))) (if (equal? '(#t #f #t #t #f #t) val) (format #t " Running ~d/~d" 671 1775) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (list (enum-set-member? 'blue (c '(red blue))) (enum-set-member? 'green (c '(red blue))) (enum-set-subset? (c '(red blue)) e) (enum-set-subset? (c '(red blue)) (c '(blue red))) (enum-set-subset? (c '(red blue)) (c '(red))) (enum-set=? (c '(red blue)) (c '(blue red))))) '(#t #f #t #t #f #t) val))))
(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (enum-set->list (c '(blue red))))) (if (equal? '(red blue) val) (format #t " Running ~d/~d" 672 1775) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (enum-set->list (c '(blue red)))) '(red blue) val))))
(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (list (enum-set->list (enum-set-union (c '(blue)) (c '(red)))) (enum-set->list (enum-set-intersection (c '(red green)) (c '(red blue)))) (enum-set->list (enum-set-difference (c '(red green)) (c '(red blue))))))) (if (equal? '((red blue) (red) (green)) val) (format #t " Running ~d/~d" 673 1775) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (list (enum-set->list (enum-set-union (c '(blue)) (c '(red)))) (enum-set->list (enum-set-intersection (c '(red green)) (c '(red blue)))) (enum-set->list (enum-set-difference (c '(red green)) (c '(red blue)))))) '((red blue) (red) (green)) val))))
(display "")(let1 val (begin (let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (enum-set->list (enum-set-complement (c '(red)))))) (if (equal? '(green blue) val) (format #t " Running ~d/~d" 674 1775) (begin (add-error '(let* ((e (make-enumeration '(red green blue))) (c (enum-set-constructor e))) (enum-set->list (enum-set-complement (c '(red))))) '(green blue) val))))
(display "")(let1 val (begin (let ((e1 (make-enumeration '(red green blue black))) (e2 (make-enumeration '(red black white)))) (enum-set->list (enum-set-projection e1 e2)))) (if (equal? '(red black) val) (format #t " Running ~d/~d" 675 1775) (begin (add-error '(let ((e1 (make-enumeration '(red green blue black))) (e2 (make-enumeration '(red black white)))) (enum-set->list (enum-set-projection e1 e2))) '(red black) val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (call-with-string-input-port "(" (lambda (in) (read in))))) (format #t " Running ~d/~d" 676 1775) (add-error '(call-with-string-input-port "(" (lambda (in) (read in))) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (call-with-string-input-port "(" (lambda (in) (apply read (list in)))))) (format #t " Running ~d/~d" 677 1775) (add-error '(call-with-string-input-port "(" (lambda (in) (apply read (list in)))) 'error val))(display "")(let1 val (begin (eq? #\A #\A)) (if (equal? '#t val) (format #t " Running ~d/~d" 678 1775) (begin (add-error '(eq? #\A #\A) '#t val))))
(display "")(let1 val (begin (bytevector-length (make-bytevector 3))) (if (equal? '3 val) (format #t " Running ~d/~d" 679 1775) (add-error '(bytevector-length (make-bytevector 3)) '3 val)))(display "")(let1 val (begin (make-bytevector 4 3)) (if (equal? '#vu8(3 3 3 3) val) (format #t " Running ~d/~d" 680 1775) (add-error '(make-bytevector 4 3) '#vu8(3 3 3 3) val)))(display "")(let1 val (begin (bytevector=? #vu8(3 3 3) #vu8(3 3 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 681 1775) (add-error '(bytevector=? #vu8(3 3 3) #vu8(3 3 3)) '#t val)))(display "")(let1 val (begin (bytevector=? #vu8(3 4 3) #vu8(3 3 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 682 1775) (add-error '(bytevector=? #vu8(3 4 3) #vu8(3 3 3)) '#f val)))(display "")(let1 val (begin (let ((bytevector (make-bytevector 4))) (bytevector-fill! bytevector 3) bytevector)) (if (equal? '#vu8(3 3 3 3) val) (format #t " Running ~d/~d" 683 1775) (add-error '(let ((bytevector (make-bytevector 4))) (bytevector-fill! bytevector 3) bytevector) '#vu8(3 3 3 3) val)))(display "")(let1 val (begin (let ((b #vu8(1 2 3 4 5 6 7 8))) (bytevector-copy! b 0 b 3 4) b)) (if (equal? '#vu8(1 2 3 1 2 3 4 8) val) (format #t " Running ~d/~d" 684 1775) (begin (add-error '(let ((b #vu8(1 2 3 4 5 6 7 8))) (bytevector-copy! b 0 b 3 4) b) '#vu8(1 2 3 1 2 3 4 8) val))))
(display "")(let1 val (begin (bytevector-copy #vu8(1 2 3 4))) (if (equal? '#vu8(1 2 3 4) val) (format #t " Running ~d/~d" 685 1775) (begin (add-error '(bytevector-copy #vu8(1 2 3 4)) '#vu8(1 2 3 4) val))))
(display "")(let1 val (begin (bytevector-u8-ref #vu8(255) 0)) (if (equal? '255 val) (format #t " Running ~d/~d" 686 1775) (begin (add-error '(bytevector-u8-ref #vu8(255) 0) '255 val))))
(display "")(let1 val (begin (bytevector-u8-ref (make-bytevector 1 -1) 0)) (if (equal? '255 val) (format #t " Running ~d/~d" 687 1775) (begin (add-error '(bytevector-u8-ref (make-bytevector 1 -1) 0) '255 val))))
(display "")(let1 val (begin (bytevector-u8-ref (make-bytevector 1 255) 0)) (if (equal? '255 val) (format #t " Running ~d/~d" 688 1775) (begin (add-error '(bytevector-u8-ref (make-bytevector 1 255) 0) '255 val))))
(display "")(let1 val (begin (let ((bytevector (make-bytevector 1))) (bytevector-fill! bytevector -1) (bytevector-u8-ref bytevector 0))) (if (equal? '255 val) (format #t " Running ~d/~d" 689 1775) (begin (add-error '(let ((bytevector (make-bytevector 1))) (bytevector-fill! bytevector -1) (bytevector-u8-ref bytevector 0)) '255 val))))
(display "")(let1 val (begin (bytevector-s8-ref #vu8(255) 0)) (if (equal? '-1 val) (format #t " Running ~d/~d" 690 1775) (begin (add-error '(bytevector-s8-ref #vu8(255) 0) '-1 val))))
(display "")(let1 val (begin (bytevector-s8-ref (make-bytevector 1 -1) 0)) (if (equal? '-1 val) (format #t " Running ~d/~d" 691 1775) (begin (add-error '(bytevector-s8-ref (make-bytevector 1 -1) 0) '-1 val))))
(display "")(let1 val (begin (bytevector-s8-ref (make-bytevector 1 255) 0)) (if (equal? '-1 val) (format #t " Running ~d/~d" 692 1775) (begin (add-error '(bytevector-s8-ref (make-bytevector 1 255) 0) '-1 val))))
(display "")(let1 val (begin (let ((bytevector (make-bytevector 1))) (bytevector-fill! bytevector -1) (bytevector-s8-ref bytevector 0))) (if (equal? '-1 val) (format #t " Running ~d/~d" 693 1775) (begin (add-error '(let ((bytevector (make-bytevector 1))) (bytevector-fill! bytevector -1) (bytevector-s8-ref bytevector 0)) '-1 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 1))) (bytevector-u8-set! b 0 255) (bytevector-u8-ref b 0))) (if (equal? '255 val) (format #t " Running ~d/~d" 694 1775) (begin (add-error '(let ((b (make-bytevector 1))) (bytevector-u8-set! b 0 255) (bytevector-u8-ref b 0)) '255 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 1))) (bytevector-s8-set! b 0 -1) (bytevector-u8-ref b 0))) (if (equal? '255 val) (format #t " Running ~d/~d" 695 1775) (begin (add-error '(let ((b (make-bytevector 1))) (bytevector-s8-set! b 0 -1) (bytevector-u8-ref b 0)) '255 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u8-ref 1 (make-bytevector 1)))) (format #t " Running ~d/~d" 696 1775) (add-error '(bytevector-u8-ref 1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-s8-ref 1 (make-bytevector 1)))) (format #t " Running ~d/~d" 697 1775) (add-error '(bytevector-s8-ref 1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u8-ref -1 (make-bytevector 1)))) (format #t " Running ~d/~d" 698 1775) (add-error '(bytevector-u8-ref -1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-s8-ref -1 (make-bytevector 1)))) (format #t " Running ~d/~d" 699 1775) (add-error '(bytevector-s8-ref -1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u8-set! 1 (make-bytevector 1)) 1)) (format #t " Running ~d/~d" 700 1775) (add-error '(bytevector-u8-set! 1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-s8-set! 1 (make-bytevector 1)) 1)) (format #t " Running ~d/~d" 701 1775) (add-error '(bytevector-s8-set! 1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u8-set! -1 (make-bytevector 1)) 1)) (format #t " Running ~d/~d" 702 1775) (add-error '(bytevector-u8-set! -1 (make-bytevector 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-s8-set! -1 (make-bytevector 1)) 1)) (format #t " Running ~d/~d" 703 1775) (add-error '(bytevector-s8-set! -1 (make-bytevector 1)) 'error val))(display "")(let1 val (begin (u8-list->bytevector '(1 2 3 4))) (if (equal? '#vu8(1 2 3 4) val) (format #t " Running ~d/~d" 704 1775) (begin (add-error '(u8-list->bytevector '(1 2 3 4)) '#vu8(1 2 3 4) val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (u8-list->bytevector '(1 2 3 -1 4)))) (format #t " Running ~d/~d" 705 1775) (add-error '(u8-list->bytevector '(1 2 3 -1 4)) 'error val))(display "")(let1 val (begin (bytevector->u8-list #vu8(1 2 3 4))) (if (equal? '(1 2 3 4) val) (format #t " Running ~d/~d" 706 1775) (begin (add-error '(bytevector->u8-list #vu8(1 2 3 4)) '(1 2 3 4) val))))
(display "")(let1 val (begin (bytevector-u16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'little)) (if (equal? '65023 val) (format #t " Running ~d/~d" 707 1775) (begin (add-error '(bytevector-u16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'little) '65023 val))))
(display "")(let1 val (begin (bytevector-s16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'little)) (if (equal? '-513 val) (format #t " Running ~d/~d" 708 1775) (begin (add-error '(bytevector-s16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'little) '-513 val))))
(display "")(let1 val (begin (bytevector-u16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'big)) (if (equal? '65533 val) (format #t " Running ~d/~d" 709 1775) (begin (add-error '(bytevector-u16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'big) '65533 val))))
(display "")(let1 val (begin (bytevector-s16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'big)) (if (equal? '-3 val) (format #t " Running ~d/~d" 710 1775) (begin (add-error '(bytevector-s16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 'big) '-3 val))))
(display "")(let1 val (begin (bytevector-u16-ref #vu8(255 0) 0 'little)) (if (equal? '255 val) (format #t " Running ~d/~d" 711 1775) (begin (add-error '(bytevector-u16-ref #vu8(255 0) 0 'little) '255 val))))
(display "")(let1 val (begin (bytevector-u16-ref #vu8(255 0) 0 'big)) (if (equal? '65280 val) (format #t " Running ~d/~d" 712 1775) (begin (add-error '(bytevector-u16-ref #vu8(255 0) 0 'big) '65280 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u16-ref #vu8(255 0) 1 'little))) (format #t " Running ~d/~d" 713 1775) (add-error '(bytevector-u16-ref #vu8(255 0) 1 'little) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u16-ref #vu8(255 0) 1 'big))) (format #t " Running ~d/~d" 714 1775) (add-error '(bytevector-u16-ref #vu8(255 0) 1 'big) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-u16-native-ref #vu8(255 0 1 2) 1))) (format #t " Running ~d/~d" 715 1775) (add-error '(bytevector-u16-native-ref #vu8(255 0 1 2) 1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector-s16-native-ref #vu8(255 0 1 2) 1))) (format #t " Running ~d/~d" 716 1775) (add-error '(bytevector-s16-native-ref #vu8(255 0 1 2) 1) 'error val))(display "")(let1 val (begin (= (bytevector-u16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 (native-endianness)) (bytevector-u16-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14))) (if (equal? '#t val) (format #t " Running ~d/~d" 717 1775) (begin (add-error '(= (bytevector-u16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 (native-endianness)) (bytevector-u16-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14)) '#t val))))
(display "")(let1 val (begin (= (bytevector-s16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 (native-endianness)) (bytevector-s16-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14))) (if (equal? '#t val) (format #t " Running ~d/~d" 718 1775) (begin (add-error '(= (bytevector-s16-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14 (native-endianness)) (bytevector-s16-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 14)) '#t val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0))) (bytevector-u16-set! b 0 12345 'little) (bytevector-u16-ref b 0 'little))) (if (equal? '12345 val) (format #t " Running ~d/~d" 719 1775) (begin (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-u16-set! b 0 12345 'little) (bytevector-u16-ref b 0 'little)) '12345 val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0))) (bytevector-u16-set! b 0 12345 'big) (bytevector-u16-ref b 0 'big))) (if (equal? '12345 val) (format #t " Running ~d/~d" 720 1775) (begin (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-u16-set! b 0 12345 'big) (bytevector-u16-ref b 0 'big)) '12345 val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0))) (bytevector-s16-set! b 0 12345 'little) (bytevector-s16-ref b 0 'little))) (if (equal? '12345 val) (format #t " Running ~d/~d" 721 1775) (begin (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-s16-set! b 0 12345 'little) (bytevector-s16-ref b 0 'little)) '12345 val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0))) (bytevector-s16-set! b 0 12345 'big) (bytevector-s16-ref b 0 'big))) (if (equal? '12345 val) (format #t " Running ~d/~d" 722 1775) (begin (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-s16-set! b 0 12345 'big) (bytevector-s16-ref b 0 'big)) '12345 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (let ((b #vu8(0 0 0 0 0))) (bytevector-s16-set! b 0 32768 'little) (bytevector-s16-ref b 0 'little)))) (format #t " Running ~d/~d" 723 1775) (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-s16-set! b 0 32768 'little) (bytevector-s16-ref b 0 'little)) 'error val))(display "")(let1 val (begin (let ((b #vu8(0 0 0 0))) (bytevector-u16-set! b 0 12345 (native-endianness)) (bytevector-u16-native-set! b 2 12345) (= (bytevector-u16-native-ref b 0) (bytevector-u16-native-ref b 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 724 1775) (begin (add-error '(let ((b #vu8(0 0 0 0))) (bytevector-u16-set! b 0 12345 (native-endianness)) (bytevector-u16-native-set! b 2 12345) (= (bytevector-u16-native-ref b 0) (bytevector-u16-native-ref b 2))) '#t val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0))) (bytevector-s16-set! b 0 12345 (native-endianness)) (bytevector-s16-native-set! b 2 12345) (= (bytevector-s16-native-ref b 0) (bytevector-s16-native-ref b 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 725 1775) (begin (add-error '(let ((b #vu8(0 0 0 0))) (bytevector-s16-set! b 0 12345 (native-endianness)) (bytevector-s16-native-set! b 2 12345) (= (bytevector-s16-native-ref b 0) (bytevector-s16-native-ref b 2))) '#t val))))
(display "")(let1 val (begin (bytevector-u32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'little)) (if (equal? '4261412863 val) (format #t " Running ~d/~d" 726 1775) (begin (add-error '(bytevector-u32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'little) '4261412863 val))))
(display "")(let1 val (begin (bytevector-s32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'little)) (if (equal? '-33554433 val) (format #t " Running ~d/~d" 727 1775) (begin (add-error '(bytevector-s32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'little) '-33554433 val))))
(display "")(let1 val (begin (bytevector-u32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'big)) (if (equal? '4294967293 val) (format #t " Running ~d/~d" 728 1775) (begin (add-error '(bytevector-u32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'big) '4294967293 val))))
(display "")(let1 val (begin (bytevector-s32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'big)) (if (equal? '-3 val) (format #t " Running ~d/~d" 729 1775) (begin (add-error '(bytevector-s32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 'big) '-3 val))))
(display "")(let1 val (begin (= (bytevector-u32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 (native-endianness)) (bytevector-u32-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12))) (if (equal? '#t val) (format #t " Running ~d/~d" 730 1775) (begin (add-error '(= (bytevector-u32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 (native-endianness)) (bytevector-u32-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12)) '#t val))))
(display "")(let1 val (begin (= (bytevector-s32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 (native-endianness)) (bytevector-s32-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12))) (if (equal? '#t val) (format #t " Running ~d/~d" 731 1775) (begin (add-error '(= (bytevector-s32-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12 (native-endianness)) (bytevector-s32-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 12)) '#t val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0))) (bytevector-u32-set! b 0 12345 'little) (bytevector-u32-ref b 0 'little))) (if (equal? '12345 val) (format #t " Running ~d/~d" 732 1775) (begin (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-u32-set! b 0 12345 'little) (bytevector-u32-ref b 0 'little)) '12345 val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0))) (bytevector-u32-set! b 0 12345 'big) (bytevector-u32-ref b 0 'big))) (if (equal? '12345 val) (format #t " Running ~d/~d" 733 1775) (begin (add-error '(let ((b #vu8(0 0 0 0 0))) (bytevector-u32-set! b 0 12345 'big) (bytevector-u32-ref b 0 'big)) '12345 val))))
(display "")(let1 val (begin (let1 b (make-bytevector 8) (bytevector-u64-set! b 0 18302628885633695743 'little) b)) (if (equal? '#vu8(255 255 255 255 255 255 255 253) val) (format #t " Running ~d/~d" 734 1775) (begin (add-error '(let1 b (make-bytevector 8) (bytevector-u64-set! b 0 18302628885633695743 'little) b) '#vu8(255 255 255 255 255 255 255 253) val))))
(display "")(let1 val (begin (let1 b (make-bytevector 16 0) (bytevector-u64-set! b 8 18302628885633695743 'little) b)) (if (equal? '#vu8(0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 253) val) (format #t " Running ~d/~d" 735 1775) (begin (add-error '(let1 b (make-bytevector 16 0) (bytevector-u64-set! b 8 18302628885633695743 'little) b) '#vu8(0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 253) val))))
(display "")(let1 val (begin (let1 b (make-bytevector 8) (bytevector-s64-set! b 0 -144115188075855873 'little) b)) (if (equal? '#vu8(255 255 255 255 255 255 255 253) val) (format #t " Running ~d/~d" 736 1775) (begin (add-error '(let1 b (make-bytevector 8) (bytevector-s64-set! b 0 -144115188075855873 'little) b) '#vu8(255 255 255 255 255 255 255 253) val))))
(display "")(let1 val (begin (let1 b (make-bytevector 16 0) (bytevector-s64-set! b 8 -144115188075855873 'little) b)) (if (equal? '#vu8(0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 253) val) (format #t " Running ~d/~d" 737 1775) (begin (add-error '(let1 b (make-bytevector 16 0) (bytevector-s64-set! b 8 -144115188075855873 'little) b) '#vu8(0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 253) val))))
(display "")(let1 val (begin (bytevector-u64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'little)) (if (equal? '18302628885633695743 val) (format #t " Running ~d/~d" 738 1775) (begin (add-error '(bytevector-u64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'little) '18302628885633695743 val))))
(display "")(let1 val (begin (bytevector-s64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'little)) (if (equal? '-144115188075855873 val) (format #t " Running ~d/~d" 739 1775) (begin (add-error '(bytevector-s64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'little) '-144115188075855873 val))))
(display "")(let1 val (begin (bytevector-u64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'big)) (if (equal? '18446744073709551613 val) (format #t " Running ~d/~d" 740 1775) (begin (add-error '(bytevector-u64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'big) '18446744073709551613 val))))
(display "")(let1 val (begin (bytevector-s64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'big)) (if (equal? '-3 val) (format #t " Running ~d/~d" 741 1775) (begin (add-error '(bytevector-s64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 'big) '-3 val))))
(display "")(let1 val (begin (= (bytevector-u64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 (native-endianness)) (bytevector-u64-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8))) (if (equal? '#t val) (format #t " Running ~d/~d" 742 1775) (begin (add-error '(= (bytevector-u64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 (native-endianness)) (bytevector-u64-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8)) '#t val))))
(display "")(let1 val (begin (= (bytevector-s64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 (native-endianness)) (bytevector-s64-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8))) (if (equal? '#t val) (format #t " Running ~d/~d" 743 1775) (begin (add-error '(= (bytevector-s64-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8 (native-endianness)) (bytevector-s64-native-ref #vu8(255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253) 8)) '#t val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0 0 0 0))) (bytevector-u64-set! b 0 12345 'little) (bytevector-u64-ref b 0 'little))) (if (equal? '12345 val) (format #t " Running ~d/~d" 744 1775) (begin (add-error '(let ((b #vu8(0 0 0 0 0 0 0 0))) (bytevector-u64-set! b 0 12345 'little) (bytevector-u64-ref b 0 'little)) '12345 val))))
(display "")(let1 val (begin (let ((b #vu8(0 0 0 0 0 0 0 0))) (bytevector-u64-set! b 0 12345 'big) (bytevector-u64-ref b 0 'big))) (if (equal? '12345 val) (format #t " Running ~d/~d" 745 1775) (begin (add-error '(let ((b #vu8(0 0 0 0 0 0 0 0))) (bytevector-u64-set! b 0 12345 'big) (bytevector-u64-ref b 0 'big)) '12345 val))))
(display "")(let1 val (begin (utf8->string #vu8(227 129 130 227 129 132 227 129 134))) (if (equal? '"あいう" val) (format #t " Running ~d/~d" 746 1775) (begin (add-error '(utf8->string #vu8(227 129 130 227 129 132 227 129 134)) '"あいう" val))))
(display "")(let1 val (begin (bytevector->string #vu8(227 129 130 227 129 132 227 129 134) (make-transcoder (utf-8-codec)))) (if (equal? '"あいう" val) (format #t " Running ~d/~d" 747 1775) (begin (add-error '(bytevector->string #vu8(227 129 130 227 129 132 227 129 134) (make-transcoder (utf-8-codec))) '"あいう" val))))
(display "")(let1 val (begin (string->bytevector "あいう" (make-transcoder (utf-8-codec)))) (if (equal? '#vu8(227 129 130 227 129 132 227 129 134) val) (format #t " Running ~d/~d" 748 1775) (begin (add-error '(string->bytevector "あいう" (make-transcoder (utf-8-codec))) '#vu8(227 129 130 227 129 132 227 129 134) val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (bytevector->string #vu8(129 130 227 129 132 227 129 134) (make-transcoder (utf-8-codec))))) (format #t " Running ~d/~d" 749 1775) (add-error '(bytevector->string #vu8(129 130 227 129 132 227 129 134) (make-transcoder (utf-8-codec))) 'error val))(display "")(let1 val (begin (string->utf8 "あいう")) (if (equal? '#vu8(227 129 130 227 129 132 227 129 134) val) (format #t " Running ~d/~d" 750 1775) (begin (add-error '(string->utf8 "あいう") '#vu8(227 129 130 227 129 132 227 129 134) val))))
(display "")(let1 val (begin (string->utf32 "appλe" 'little)) (if (equal? '#vu8(97 0 0 0 112 0 0 0 112 0 0 0 187 3 0 0 101 0 0 0) val) (format #t " Running ~d/~d" 751 1775) (begin (add-error '(string->utf32 "appλe" 'little) '#vu8(97 0 0 0 112 0 0 0 112 0 0 0 187 3 0 0 101 0 0 0) val))))
(display "")(let1 val (begin (string->utf32 "appλe" 'big)) (if (equal? '#vu8(0 0 0 97 0 0 0 112 0 0 0 112 0 0 3 187 0 0 0 101) val) (format #t " Running ~d/~d" 752 1775) (begin (add-error '(string->utf32 "appλe" 'big) '#vu8(0 0 0 97 0 0 0 112 0 0 0 112 0 0 3 187 0 0 0 101) val))))
(display "")(let1 val (begin (string->utf32 "appλe")) (if (equal? '#vu8(0 0 0 97 0 0 0 112 0 0 0 112 0 0 3 187 0 0 0 101) val) (format #t " Running ~d/~d" 753 1775) (begin (add-error '(string->utf32 "appλe") '#vu8(0 0 0 97 0 0 0 112 0 0 0 112 0 0 3 187 0 0 0 101) val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (string->utf32 "appλe" 'hoge))) (format #t " Running ~d/~d" 754 1775) (add-error '(string->utf32 "appλe" 'hoge) 'error val))(display "")(let1 val (begin (and (let ((str "apple")) (string=? str (utf32->string (string->utf32 str 'big) 'big))) (let ((str "appλe")) (string=? str (utf32->string (string->utf32 str 'big) 'big))) (let ((str "")) (string=? str (utf32->string (string->utf32 str 'big) 'big))) #t)) (if (equal? '#t val) (format #t " Running ~d/~d" 755 1775) (begin (add-error '(and (let ((str "apple")) (string=? str (utf32->string (string->utf32 str 'big) 'big))) (let ((str "appλe")) (string=? str (utf32->string (string->utf32 str 'big) 'big))) (let ((str "")) (string=? str (utf32->string (string->utf32 str 'big) 'big))) #t) '#t val))))
(display "")(let1 val (begin (and (let ((str "apple")) (string=? str (utf32->string (string->utf32 str 'little) 'little))) (let ((str "appλe")) (string=? str (utf32->string (string->utf32 str 'little) 'little))) (let ((str "")) (string=? str (utf32->string (string->utf32 str 'little) 'little))) #t)) (if (equal? '#t val) (format #t " Running ~d/~d" 756 1775) (begin (add-error '(and (let ((str "apple")) (string=? str (utf32->string (string->utf32 str 'little) 'little))) (let ((str "appλe")) (string=? str (utf32->string (string->utf32 str 'little) 'little))) (let ((str "")) (string=? str (utf32->string (string->utf32 str 'little) 'little))) #t) '#t val))))
(display "")(let1 val (begin (let ((str "apple") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? str (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'big)) (string=? str (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'little)) #t))) (if (equal? '#t val) (format #t " Running ~d/~d" 757 1775) (begin (add-error '(let ((str "apple") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? str (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'big)) (string=? str (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'little)) #t)) '#t val))))
(display "")(let1 val (begin (let ((str "appλe") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? str (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'big)) (string=? str (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'little)) #t))) (if (equal? '#t val) (format #t " Running ~d/~d" 758 1775) (begin (add-error '(let ((str "appλe") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? str (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'big)) (string=? str (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'little)) #t)) '#t val))))
(display "")(let1 val (begin (let ((str "apple") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? str (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'big)) (string=? str (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'little))))) (if (equal? '#t val) (format #t " Running ~d/~d" 759 1775) (begin (add-error '(let ((str "apple") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? str (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'big)) (string=? str (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'little)))) '#t val))))
(display "")(let1 val (begin (let ((str "appλe") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(254 255 0 0) (string->utf32 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(0 0 255 254) (string->utf32 str 'big)) 'big #t) (string-append "￾" str))))) (if (equal? '#t val) (format #t " Running ~d/~d" 760 1775) (begin (add-error '(let ((str "appλe") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(254 255 0 0) (string->utf32 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(0 0 255 254) (string->utf32 str 'big)) 'big #t) (string-append "￾" str)))) '#t val))))
(display "")(let1 val (begin (let ((str "") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(254 255 0 0) (string->utf32 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(0 0 255 254) (string->utf32 str 'big)) 'big #t) (string-append "￾" str))))) (if (equal? '#t val) (format #t " Running ~d/~d" 761 1775) (begin (add-error '(let ((str "") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(254 255 0 0) (string->utf32 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(0 0 255 254) (string->utf32 str 'big)) 'big #t) (string-append "￾" str)))) '#t val))))
(display "")(let1 val (begin (let ((str "") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(254 255 0 0) (string->utf32 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(0 0 255 254) (string->utf32 str 'big)) 'big #t) (string-append "￾" str))))) (if (equal? '#t val) (format #t " Running ~d/~d" 762 1775) (begin (add-error '(let ((str "") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf32->string (bv-append #vu8(255 254 0 0) (string->utf32 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(254 255 0 0) (string->utf32 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf32->string (bv-append #vu8(0 0 254 255) (string->utf32 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf32->string (bv-append #vu8(0 0 255 254) (string->utf32 str 'big)) 'big #t) (string-append "￾" str)))) '#t val))))
(display "")(let1 val (begin (string->utf16 "appλe" 'little)) (if (equal? '#vu8(97 0 112 0 112 0 187 3 101 0) val) (format #t " Running ~d/~d" 763 1775) (begin (add-error '(string->utf16 "appλe" 'little) '#vu8(97 0 112 0 112 0 187 3 101 0) val))))
(display "")(let1 val (begin (string->utf16 "appλe" 'big)) (if (equal? '#vu8(0 97 0 112 0 112 3 187 0 101) val) (format #t " Running ~d/~d" 764 1775) (begin (add-error '(string->utf16 "appλe" 'big) '#vu8(0 97 0 112 0 112 3 187 0 101) val))))
(display "")(let1 val (begin (string->utf16 "appλe")) (if (equal? '#vu8(0 97 0 112 0 112 3 187 0 101) val) (format #t " Running ~d/~d" 765 1775) (begin (add-error '(string->utf16 "appλe") '#vu8(0 97 0 112 0 112 3 187 0 101) val))))
(display "")(let1 val (begin (and (let ((str "apple")) (string=? str (utf16->string (string->utf16 str 'big) 'big))) (let ((str "appλe")) (string=? str (utf16->string (string->utf16 str 'big) 'big))) (let ((str "")) (string=? str (utf16->string (string->utf16 str 'big) 'big))) #t)) (if (equal? '#t val) (format #t " Running ~d/~d" 766 1775) (begin (add-error '(and (let ((str "apple")) (string=? str (utf16->string (string->utf16 str 'big) 'big))) (let ((str "appλe")) (string=? str (utf16->string (string->utf16 str 'big) 'big))) (let ((str "")) (string=? str (utf16->string (string->utf16 str 'big) 'big))) #t) '#t val))))
(display "")(let1 val (begin (let ((str "apple") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'big) str) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'little) str) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'big)) 'big #t) (string-append "￾" str))))) (if (equal? '#t val) (format #t " Running ~d/~d" 767 1775) (begin (add-error '(let ((str "apple") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'big) str) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'little) str) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'big)) 'big #t) (string-append "￾" str)))) '#t val))))
(display "")(let1 val (begin (let ((str "appλe") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'big) str) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'little) str) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'big)) 'big #t) (string-append "￾" str))))) (if (equal? '#t val) (format #t " Running ~d/~d" 768 1775) (begin (add-error '(let ((str "appλe") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'big) str) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'little) str) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'big)) 'big #t) (string-append "￾" str)))) '#t val))))
(display "")(let1 val (begin (let ((str "") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'big) str) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'little) str) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'big)) 'big #t) (string-append "￾" str))))) (if (equal? '#t val) (format #t " Running ~d/~d" 769 1775) (begin (add-error '(let ((str "") (bv-append (lambda (bv1 bv2) (let ((bv (make-bytevector (+ (bytevector-length bv1) (bytevector-length bv2))))) (bytevector-copy! bv1 0 bv 0 (bytevector-length bv1)) (bytevector-copy! bv2 0 bv (bytevector-length bv1) (bytevector-length bv2)) bv)))) (and (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'big) str) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'little) str) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'little)) 'little #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'little)) 'little #t) (string-append "￾" str)) (string=? (utf16->string (bv-append #vu8(254 255) (string->utf16 str 'big)) 'big #t) (string-append "﻿" str)) (string=? (utf16->string (bv-append #vu8(255 254) (string->utf16 str 'big)) 'big #t) (string-append "￾" str)))) '#t val))))
(define (almost=? x y) (cond ((infinite? x) (= x (* t2.0 y))) ((infinite? y) (= (* t2.0 x) y)) ((nan? y) (nan? x)) ((> (flabs y) (inexact (/ 1 1000000))) (< (/ (flabs (- x y)) (flabs y)) (inexact (/ 1 1000)))) (else (< (flabs (- x y)) (inexact (/ 1 1000000))))))(define t7.389 (inexact (/ 7389 1000)))(define t1024.0 (inexact 1024))(define t1.570796 (inexact (/ 1570796 1000000)))(define t-1.570796 (inexact (/ -1570796 1000000)))(define t1.47113 (inexact (/ 147113 100000)))(define t0.1 (inexact (/ 1 10)))(define t8.0 (inexact 8))(define t1000.0 (inexact 1000))(define t0.0996687 (inexact (/ 996687 10000000)))(define t2.23607 (inexact (/ 223607 100000)))(display "")(let1 val (begin (almost=? 3.140000 (bytevector-ieee-single-ref #vu8(195 245 72 64) 0 'little))) (if (equal? '#t val) (format #t " Running ~d/~d" 771 1775) (begin (add-error '(almost=? 3.140000 (bytevector-ieee-single-ref #vu8(195 245 72 64) 0 'little)) '#t val))))
(display "")(let1 val (begin (almost=? 3.140000 (bytevector-ieee-single-ref #vu8(64 72 245 195) 0 'big))) (if (equal? '#t val) (format #t " Running ~d/~d" 772 1775) (begin (add-error '(almost=? 3.140000 (bytevector-ieee-single-ref #vu8(64 72 245 195) 0 'big)) '#t val))))
(display "")(let1 val (begin (almost=? 3.140000 (bytevector-ieee-double-ref #vu8(0 0 0 0 0 0 0 0 31 133 235 81 184 30 9 64) 8 'little))) (if (equal? '#t val) (format #t " Running ~d/~d" 773 1775) (begin (add-error '(almost=? 3.140000 (bytevector-ieee-double-ref #vu8(0 0 0 0 0 0 0 0 31 133 235 81 184 30 9 64) 8 'little)) '#t val))))
(display "")(let1 val (begin (almost=? 3.140000 (bytevector-ieee-double-ref #vu8(0 0 0 0 0 0 0 0 64 9 30 184 81 235 133 31) 8 'big))) (if (equal? '#t val) (format #t " Running ~d/~d" 774 1775) (begin (add-error '(almost=? 3.140000 (bytevector-ieee-double-ref #vu8(0 0 0 0 0 0 0 0 64 9 30 184 81 235 133 31) 8 'big)) '#t val))))
(display "")(let1 val (begin (almost=? 3.140000 (let ((b (make-bytevector 8))) (bytevector-ieee-single-native-set! b 4 3.140000) (bytevector-ieee-single-native-ref b 4)))) (if (equal? '#t val) (format #t " Running ~d/~d" 775 1775) (begin (add-error '(almost=? 3.140000 (let ((b (make-bytevector 8))) (bytevector-ieee-single-native-set! b 4 3.140000) (bytevector-ieee-single-native-ref b 4))) '#t val))))
(display "")(let1 val (begin (almost=? 3.140000 (let ((b (make-bytevector 8))) (bytevector-ieee-single-set! b 4 3.140000 'little) (bytevector-ieee-single-ref b 4 'little)))) (if (equal? '#t val) (format #t " Running ~d/~d" 776 1775) (begin (add-error '(almost=? 3.140000 (let ((b (make-bytevector 8))) (bytevector-ieee-single-set! b 4 3.140000 'little) (bytevector-ieee-single-ref b 4 'little))) '#t val))))
(display "")(let1 val (begin (almost=? 3.140000 (let ((b (make-bytevector 8))) (bytevector-ieee-single-set! b 4 3.140000 'big) (bytevector-ieee-single-ref b 4 'big)))) (if (equal? '#t val) (format #t " Running ~d/~d" 777 1775) (begin (add-error '(almost=? 3.140000 (let ((b (make-bytevector 8))) (bytevector-ieee-single-set! b 4 3.140000 'big) (bytevector-ieee-single-ref b 4 'big))) '#t val))))
(display "")(let1 val (begin (almost=? 3.140000 (let ((b (make-bytevector 16))) (bytevector-ieee-double-native-set! b 8 3.140000) (bytevector-ieee-double-native-ref b 8)))) (if (equal? '#t val) (format #t " Running ~d/~d" 778 1775) (begin (add-error '(almost=? 3.140000 (let ((b (make-bytevector 16))) (bytevector-ieee-double-native-set! b 8 3.140000) (bytevector-ieee-double-native-ref b 8))) '#t val))))
(display "")(let1 val (begin (almost=? 3.140000 (let ((b (make-bytevector 16))) (bytevector-ieee-double-set! b 8 3.140000 'little) (bytevector-ieee-double-ref b 8 'little)))) (if (equal? '#t val) (format #t " Running ~d/~d" 779 1775) (begin (add-error '(almost=? 3.140000 (let ((b (make-bytevector 16))) (bytevector-ieee-double-set! b 8 3.140000 'little) (bytevector-ieee-double-ref b 8 'little))) '#t val))))
(display "")(let1 val (begin (almost=? 3.140000 (let ((b (make-bytevector 16))) (bytevector-ieee-double-set! b 8 3.140000 'big) (bytevector-ieee-double-ref b 8 'big)))) (if (equal? '#t val) (format #t " Running ~d/~d" 780 1775) (begin (add-error '(almost=? 3.140000 (let ((b (make-bytevector 16))) (bytevector-ieee-double-set! b 8 3.140000 'big) (bytevector-ieee-double-ref b 8 'big))) '#t val))))
(display "")(let1 val (begin (let1 b (make-bytevector 16 -127) (bytevector-uint-set! b 0 (- (expt 2 128) 3) 'little 16) (and (= 340282366920938463463374607431768211453 (bytevector-uint-ref b 0 'little 16)) (= -3 (bytevector-sint-ref b 0 'little 16)) (equal? (bytevector->u8-list b) '(253 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255))))) (if (equal? '#t val) (format #t " Running ~d/~d" 781 1775) (begin (add-error '(let1 b (make-bytevector 16 -127) (bytevector-uint-set! b 0 (- (expt 2 128) 3) 'little 16) (and (= 340282366920938463463374607431768211453 (bytevector-uint-ref b 0 'little 16)) (= -3 (bytevector-sint-ref b 0 'little 16)) (equal? (bytevector->u8-list b) '(253 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255)))) '#t val))))
(display "")(let1 val (begin (bytevector? (make-bytevector 1))) (if (equal? #t val) (format #t " Running ~d/~d" 782 1775) (begin (add-error '(bytevector? (make-bytevector 1)) '#t val))))
(display "")(let1 val (begin (bytevector? (make-bytevector 1 17))) (if (equal? #t val) (format #t " Running ~d/~d" 783 1775) (begin (add-error '(bytevector? (make-bytevector 1 17)) '#t val))))
(display "")(let1 val (begin (bytevector? (make-bytevector 10 -17))) (if (equal? #t val) (format #t " Running ~d/~d" 784 1775) (begin (add-error '(bytevector? (make-bytevector 10 -17)) '#t val))))
(display "")(let1 val (begin (bytevector? 'foo)) (if (equal? #f val) (format #t " Running ~d/~d" 785 1775) (begin (add-error '(bytevector? 'foo) '#f val))))
(display "")(let1 val (begin (bytevector? "hey")) (if (equal? #f val) (format #t " Running ~d/~d" 786 1775) (begin (add-error '(bytevector? "hey") '#f val))))
(display "")(let1 val (begin (bytevector? '#(2837 2398 239))) (if (equal? #f val) (format #t " Running ~d/~d" 787 1775) (begin (add-error '(bytevector? '#(2837 2398 239)) '#f val))))
(display "")(let1 val (begin (bytevector-length (make-bytevector 0))) (if (equal? 0 val) (format #t " Running ~d/~d" 788 1775) (begin (add-error '(bytevector-length (make-bytevector 0)) '0 val))))
(display "")(let1 val (begin (bytevector-length (make-bytevector 100 -30))) (if (equal? 100 val) (format #t " Running ~d/~d" 789 1775) (begin (add-error '(bytevector-length (make-bytevector 100 -30)) '100 val))))
(display "")(let1 val (begin (let ((b (u8-list->bytevector '(1 2 3 4 5 6 7 8)))) (bytevector-copy! b 0 b 3 4) (bytevector->u8-list b))) (if (equal? '(1 2 3 1 2 3 4 8) val) (format #t " Running ~d/~d" 790 1775) (begin (add-error '(let ((b (u8-list->bytevector '(1 2 3 4 5 6 7 8)))) (bytevector-copy! b 0 b 3 4) (bytevector->u8-list b)) ''(1 2 3 1 2 3 4 8) val))))
(display "")(let1 val (begin (bytevector-uint-ref (u8-list->bytevector '(17)) 0 'little 1)) (if (equal? 17 val) (format #t " Running ~d/~d" 791 1775) (begin (add-error '(bytevector-uint-ref (u8-list->bytevector '(17)) 0 'little 1) '17 val))))
(display "")(let1 val (begin (bytevector-uint-ref (u8-list->bytevector '(17)) 0 'big 1)) (if (equal? 17 val) (format #t " Running ~d/~d" 792 1775) (begin (add-error '(bytevector-uint-ref (u8-list->bytevector '(17)) 0 'big 1) '17 val))))
(display "")(let1 val (begin (bytevector-uint-ref (u8-list->bytevector '(17 54)) 0 'little 2)) (if (equal? (+ 17 (* 54 256)) val) (format #t " Running ~d/~d" 793 1775) (begin (add-error '(bytevector-uint-ref (u8-list->bytevector '(17 54)) 0 'little 2) '(+ 17 (* 54 256)) val))))
(display "")(let1 val (begin (bytevector-uint-ref (u8-list->bytevector (reverse '(17 54))) 0 'big 2)) (if (equal? (+ 17 (* 54 256)) val) (format #t " Running ~d/~d" 794 1775) (begin (add-error '(bytevector-uint-ref (u8-list->bytevector (reverse '(17 54))) 0 'big 2) '(+ 17 (* 54 256)) val))))
(display "")(let1 val (begin (bytevector-uint-ref (u8-list->bytevector '(17 54 98)) 0 'little 3)) (if (equal? (+ 17 (* 54 256) (* 98 256 256)) val) (format #t " Running ~d/~d" 795 1775) (begin (add-error '(bytevector-uint-ref (u8-list->bytevector '(17 54 98)) 0 'little 3) '(+ 17 (* 54 256) (* 98 256 256)) val))))
(display "")(let1 val (begin (bytevector-uint-ref (u8-list->bytevector (reverse '(17 54 98))) 0 'big 3)) (if (equal? (+ 17 (* 54 256) (* 98 256 256)) val) (format #t " Running ~d/~d" 796 1775) (begin (add-error '(bytevector-uint-ref (u8-list->bytevector (reverse '(17 54 98))) 0 'big 3) '(+ 17 (* 54 256) (* 98 256 256)) val))))
(display "")(let1 val (begin (bytevector-uint-ref (u8-list->bytevector '(17 54 98 120)) 0 'little 4)) (if (equal? (+ 17 (* 54 256) (* 98 256 256) (* 120 256 256 256)) val) (format #t " Running ~d/~d" 797 1775) (begin (add-error '(bytevector-uint-ref (u8-list->bytevector '(17 54 98 120)) 0 'little 4) '(+ 17 (* 54 256) (* 98 256 256) (* 120 256 256 256)) val))))
(display "")(let1 val (begin (bytevector-uint-ref (u8-list->bytevector '(137 4 57 130 73 32 147 72 23 131 121 148 56 135 52 151 56 18)) 0 'little 18)) (if (equal? 1587277945488665183975335884020808421016713 val) (format #t " Running ~d/~d" 798 1775) (begin (add-error '(bytevector-uint-ref (u8-list->bytevector '(137 4 57 130 73 32 147 72 23 131 121 148 56 135 52 151 56 18)) 0 'little 18) '1587277945488665183975335884020808421016713 val))))
(display "")(let1 val (begin (bytevector-uint-ref (u8-list->bytevector (reverse '(137 4 57 130 73 32 147 72 23 131 121 148 56 135 52 151 56 18))) 0 'big 18)) (if (equal? 1587277945488665183975335884020808421016713 val) (format #t " Running ~d/~d" 799 1775) (begin (add-error '(bytevector-uint-ref (u8-list->bytevector (reverse '(137 4 57 130 73 32 147 72 23 131 121 148 56 135 52 151 56 18))) 0 'big 18) '1587277945488665183975335884020808421016713 val))))
(display "")(let1 val (begin (let ((b (u8-list->bytevector '(1 2 3 255 1 2 1 2)))) (bytevector->uint-list b 'little 2))) (if (equal? '(513 65283 513 513) val) (format #t " Running ~d/~d" 800 1775) (begin (add-error '(let ((b (u8-list->bytevector '(1 2 3 255 1 2 1 2)))) (bytevector->uint-list b 'little 2)) ''(513 65283 513 513) val))))
(display "")(let1 val (begin (bytevector->u8-list (uint-list->bytevector '(513 65283 513 513) 'little 2))) (if (equal? '(1 2 3 255 1 2 1 2) val) (format #t " Running ~d/~d" 801 1775) (begin (add-error '(bytevector->u8-list (uint-list->bytevector '(513 65283 513 513) 'little 2)) ''(1 2 3 255 1 2 1 2) val))))
(display "")(let1 val (begin (bytevector->u8-list (uint-list->bytevector '(513 65283 513 513) 'big 2))) (if (equal? '(2 1 255 3 2 1 2 1) val) (format #t " Running ~d/~d" 802 1775) (begin (add-error '(bytevector->u8-list (uint-list->bytevector '(513 65283 513 513) 'big 2)) ''(2 1 255 3 2 1 2 1) val))))
(display "")(let1 val (begin (let ((b (u8-list->bytevector '(1 2 3 255 1 2 1 2)))) (bytevector->sint-list b 'little 2))) (if (equal? '(513 -253 513 513) val) (format #t " Running ~d/~d" 803 1775) (begin (add-error '(let ((b (u8-list->bytevector '(1 2 3 255 1 2 1 2)))) (bytevector->sint-list b 'little 2)) ''(513 -253 513 513) val))))
(display "")(let1 val (begin (let ((b (u8-list->bytevector '(2 1 255 3 2 1 2 1)))) (bytevector->sint-list b 'big 2))) (if (equal? '(513 -253 513 513) val) (format #t " Running ~d/~d" 804 1775) (begin (add-error '(let ((b (u8-list->bytevector '(2 1 255 3 2 1 2 1)))) (bytevector->sint-list b 'big 2)) ''(513 -253 513 513) val))))
(display "")(let1 val (begin (bytevector->u8-list (sint-list->bytevector '(513 -253 513 513) 'little 2))) (if (equal? '(1 2 3 255 1 2 1 2) val) (format #t " Running ~d/~d" 805 1775) (begin (add-error '(bytevector->u8-list (sint-list->bytevector '(513 -253 513 513) 'little 2)) ''(1 2 3 255 1 2 1 2) val))))
(display "")(let1 val (begin (let ((b (u8-list->bytevector '(1 2 3 255 1 2 1 2)))) (bytevector->sint-list b 'little 2))) (if (equal? '(513 -253 513 513) val) (format #t " Running ~d/~d" 806 1775) (begin (add-error '(let ((b (u8-list->bytevector '(1 2 3 255 1 2 1 2)))) (bytevector->sint-list b 'little 2)) ''(513 -253 513 513) val))))
(display "")(let1 val (begin (let ((b (make-bytevector 16 -127))) (bytevector-uint-set! b 0 (- (expt 2 128) 3) 'little 16) (list (bytevector-uint-ref b 0 'little 16) (bytevector-sint-ref b 0 'little 16) (bytevector->u8-list b)))) (if (equal? '(340282366920938463463374607431768211453 -3 (253 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255)) val) (format #t " Running ~d/~d" 807 1775) (begin (add-error '(let ((b (make-bytevector 16 -127))) (bytevector-uint-set! b 0 (- (expt 2 128) 3) 'little 16) (list (bytevector-uint-ref b 0 'little 16) (bytevector-sint-ref b 0 'little 16) (bytevector->u8-list b))) ''(340282366920938463463374607431768211453 -3 (253 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255)) val))))
(display "")(let1 val (begin (let ((b (make-bytevector 16 -127))) (bytevector-uint-set! b 0 (- (expt 2 128) 3) 'big 16) (list (bytevector-uint-ref b 0 'big 16) (bytevector-sint-ref b 0 'big 16) (bytevector->u8-list b)))) (if (equal? '(340282366920938463463374607431768211453 -3 (255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253)) val) (format #t " Running ~d/~d" 808 1775) (begin (add-error '(let ((b (make-bytevector 16 -127))) (bytevector-uint-set! b 0 (- (expt 2 128) 3) 'big 16) (list (bytevector-uint-ref b 0 'big 16) (bytevector-sint-ref b 0 'big 16) (bytevector->u8-list b))) ''(340282366920938463463374607431768211453 -3 (255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253)) val))))
(display "")(let1 val (begin (bytevector->u8-list '#vu8(1 2 3 4))) (if (equal? '(1 2 3 4) val) (format #t " Running ~d/~d" 809 1775) (begin (add-error '(bytevector->u8-list '#vu8(1 2 3 4)) ''(1 2 3 4) val))))
(display "")(let1 val (begin (let ((b (make-bytevector 4 0))) (bytevector-sint-set! b 0 -1 'little 4) (bytevector-uint-ref b 0 'little 4))) (if (equal? 4294967295 val) (format #t " Running ~d/~d" 810 1775) (begin (add-error '(let ((b (make-bytevector 4 0))) (bytevector-sint-set! b 0 -1 'little 4) (bytevector-uint-ref b 0 'little 4)) '4294967295 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 4 0))) (bytevector-sint-set! b 0 -256 'little 4) (bytevector-uint-ref b 0 'little 4))) (if (equal? 4294967040 val) (format #t " Running ~d/~d" 811 1775) (begin (add-error '(let ((b (make-bytevector 4 0))) (bytevector-sint-set! b 0 -256 'little 4) (bytevector-uint-ref b 0 'little 4)) '4294967040 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 4 0))) (bytevector-sint-set! b 0 (- (expt 256 2)) 'little 4) (bytevector-uint-ref b 0 'little 4))) (if (equal? 4294901760 val) (format #t " Running ~d/~d" 812 1775) (begin (add-error '(let ((b (make-bytevector 4 0))) (bytevector-sint-set! b 0 (- (expt 256 2)) 'little 4) (bytevector-uint-ref b 0 'little 4)) '4294901760 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- (expt 256 2)) 'little 8) (bytevector-uint-ref b 0 'little 8))) (if (equal? 18446744073709486080 val) (format #t " Running ~d/~d" 813 1775) (begin (add-error '(let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- (expt 256 2)) 'little 8) (bytevector-uint-ref b 0 'little 8)) '18446744073709486080 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- (expt 256 4)) 'little 8) (bytevector-uint-ref b 0 'little 8))) (if (equal? 18446744069414584320 val) (format #t " Running ~d/~d" 814 1775) (begin (add-error '(let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- (expt 256 4)) 'little 8) (bytevector-uint-ref b 0 'little 8)) '18446744069414584320 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- (expt 256 7)) 'little 8) (bytevector-uint-ref b 0 'little 8))) (if (equal? 18374686479671623680 val) (format #t " Running ~d/~d" 815 1775) (begin (add-error '(let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- (expt 256 7)) 'little 8) (bytevector-uint-ref b 0 'little 8)) '18374686479671623680 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- 1 (expt 2 63)) 'little 8) (bytevector-sint-ref b 0 'little 8))) (if (equal? (- 1 (expt 2 63)) val) (format #t " Running ~d/~d" 816 1775) (begin (add-error '(let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- 1 (expt 2 63)) 'little 8) (bytevector-sint-ref b 0 'little 8)) '(- 1 (expt 2 63)) val))))
(display "")(let1 val (begin (let ((b (make-bytevector 4 38))) (bytevector-sint-set! b 0 (- (expt 2 31) 1) 'little 4) (bytevector-sint-ref b 0 'little 4))) (if (equal? 2147483647 val) (format #t " Running ~d/~d" 817 1775) (begin (add-error '(let ((b (make-bytevector 4 38))) (bytevector-sint-set! b 0 (- (expt 2 31) 1) 'little 4) (bytevector-sint-ref b 0 'little 4)) '2147483647 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 4 38))) (bytevector-sint-set! b 0 (- (expt 2 31)) 'little 4) (bytevector-sint-ref b 0 'little 4))) (if (equal? -2147483648 val) (format #t " Running ~d/~d" 818 1775) (begin (add-error '(let ((b (make-bytevector 4 38))) (bytevector-sint-set! b 0 (- (expt 2 31)) 'little 4) (bytevector-sint-ref b 0 'little 4)) '-2147483648 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 5 38))) (bytevector-sint-set! b 0 (- (expt 2 32)) 'little 5) (bytevector-sint-ref b 0 'little 5))) (if (equal? -4294967296 val) (format #t " Running ~d/~d" 819 1775) (begin (add-error '(let ((b (make-bytevector 5 38))) (bytevector-sint-set! b 0 (- (expt 2 32)) 'little 5) (bytevector-sint-ref b 0 'little 5)) '-4294967296 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 4 0))) (bytevector-sint-set! b 0 -1 'big 4) (bytevector-uint-ref b 0 'big 4))) (if (equal? 4294967295 val) (format #t " Running ~d/~d" 820 1775) (begin (add-error '(let ((b (make-bytevector 4 0))) (bytevector-sint-set! b 0 -1 'big 4) (bytevector-uint-ref b 0 'big 4)) '4294967295 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 4 0))) (bytevector-sint-set! b 0 -256 'big 4) (bytevector-uint-ref b 0 'big 4))) (if (equal? 4294967040 val) (format #t " Running ~d/~d" 821 1775) (begin (add-error '(let ((b (make-bytevector 4 0))) (bytevector-sint-set! b 0 -256 'big 4) (bytevector-uint-ref b 0 'big 4)) '4294967040 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 4 0))) (bytevector-sint-set! b 0 (- (expt 256 2)) 'big 4) (bytevector-uint-ref b 0 'big 4))) (if (equal? 4294901760 val) (format #t " Running ~d/~d" 822 1775) (begin (add-error '(let ((b (make-bytevector 4 0))) (bytevector-sint-set! b 0 (- (expt 256 2)) 'big 4) (bytevector-uint-ref b 0 'big 4)) '4294901760 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- (expt 256 2)) 'big 8) (bytevector-uint-ref b 0 'big 8))) (if (equal? 18446744073709486080 val) (format #t " Running ~d/~d" 823 1775) (begin (add-error '(let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- (expt 256 2)) 'big 8) (bytevector-uint-ref b 0 'big 8)) '18446744073709486080 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- (expt 256 4)) 'big 8) (bytevector-uint-ref b 0 'big 8))) (if (equal? 18446744069414584320 val) (format #t " Running ~d/~d" 824 1775) (begin (add-error '(let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- (expt 256 4)) 'big 8) (bytevector-uint-ref b 0 'big 8)) '18446744069414584320 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- (expt 256 7)) 'big 8) (bytevector-uint-ref b 0 'big 8))) (if (equal? 18374686479671623680 val) (format #t " Running ~d/~d" 825 1775) (begin (add-error '(let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- (expt 256 7)) 'big 8) (bytevector-uint-ref b 0 'big 8)) '18374686479671623680 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- 1 (expt 2 63)) 'big 8) (bytevector-sint-ref b 0 'big 8))) (if (equal? (- 1 (expt 2 63)) val) (format #t " Running ~d/~d" 826 1775) (begin (add-error '(let ((b (make-bytevector 8 0))) (bytevector-sint-set! b 0 (- 1 (expt 2 63)) 'big 8) (bytevector-sint-ref b 0 'big 8)) '(- 1 (expt 2 63)) val))))
(display "")(let1 val (begin (let ((b (make-bytevector 4 38))) (bytevector-sint-set! b 0 (- (expt 2 31) 1) 'big 4) (bytevector-sint-ref b 0 'big 4))) (if (equal? 2147483647 val) (format #t " Running ~d/~d" 827 1775) (begin (add-error '(let ((b (make-bytevector 4 38))) (bytevector-sint-set! b 0 (- (expt 2 31) 1) 'big 4) (bytevector-sint-ref b 0 'big 4)) '2147483647 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 4 38))) (bytevector-sint-set! b 0 (- (expt 2 31)) 'big 4) (bytevector-sint-ref b 0 'big 4))) (if (equal? -2147483648 val) (format #t " Running ~d/~d" 828 1775) (begin (add-error '(let ((b (make-bytevector 4 38))) (bytevector-sint-set! b 0 (- (expt 2 31)) 'big 4) (bytevector-sint-ref b 0 'big 4)) '-2147483648 val))))
(display "")(let1 val (begin (let ((b (make-bytevector 5 38))) (bytevector-sint-set! b 0 (- (expt 2 32)) 'big 5) (bytevector-sint-ref b 0 'big 5))) (if (equal? -4294967296 val) (format #t " Running ~d/~d" 829 1775) (begin (add-error '(let ((b (make-bytevector 5 38))) (bytevector-sint-set! b 0 (- (expt 2 32)) 'big 5) (bytevector-sint-ref b 0 'big 5)) '-4294967296 val))))
(display "")(let1 val (begin (bytevector-u16-ref '#vu8(255 253) 0 'little)) (if (equal? 65023 val) (format #t " Running ~d/~d" 830 1775) (begin (add-error '(bytevector-u16-ref '#vu8(255 253) 0 'little) '65023 val))))
(display "")(let1 val (begin (bytevector-u16-ref '#vu8(255 253) 0 'big)) (if (equal? 65533 val) (format #t " Running ~d/~d" 831 1775) (begin (add-error '(bytevector-u16-ref '#vu8(255 253) 0 'big) '65533 val))))
(display "")(let1 val (begin (bytevector-s16-ref '#vu8(255 253) 0 'little)) (if (equal? -513 val) (format #t " Running ~d/~d" 832 1775) (begin (add-error '(bytevector-s16-ref '#vu8(255 253) 0 'little) '-513 val))))
(display "")(let1 val (begin (bytevector-s16-ref '#vu8(255 253) 0 'big)) (if (equal? -3 val) (format #t " Running ~d/~d" 833 1775) (begin (add-error '(bytevector-s16-ref '#vu8(255 253) 0 'big) '-3 val))))
(display "")(let1 val (begin (let ((v (make-bytevector 2))) (bytevector-u16-native-set! v 0 12345) (bytevector-u16-native-ref v 0))) (if (equal? 12345 val) (format #t " Running ~d/~d" 834 1775) (begin (add-error '(let ((v (make-bytevector 2))) (bytevector-u16-native-set! v 0 12345) (bytevector-u16-native-ref v 0)) '12345 val))))
(display "")(let1 val (begin (let ((v (make-bytevector 2))) (bytevector-u16-set! v 0 12345 'little) (bytevector-u16-ref v 0 'little))) (if (equal? 12345 val) (format #t " Running ~d/~d" 835 1775) (begin (add-error '(let ((v (make-bytevector 2))) (bytevector-u16-set! v 0 12345 'little) (bytevector-u16-ref v 0 'little)) '12345 val))))
(display "")(let1 val (begin (let ((v (make-bytevector 2))) (bytevector-u16-set! v 0 12345 'big) (bytevector-u16-ref v 0 'big))) (if (equal? 12345 val) (format #t " Running ~d/~d" 836 1775) (begin (add-error '(let ((v (make-bytevector 2))) (bytevector-u16-set! v 0 12345 'big) (bytevector-u16-ref v 0 'big)) '12345 val))))
(display "")(let1 val (begin (= (make-rectangular 1 1) (make-rectangular 1 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 837 1775) (begin (add-error '(= (make-rectangular 1 1) (make-rectangular 1 1)) '#t val))))
(display "")(let1 val (begin (= 3 (make-rectangular 3 0))) (if (equal? '#t val) (format #t " Running ~d/~d" 838 1775) (begin (add-error '(= 3 (make-rectangular 3 0)) '#t val))))
(display "")(let1 val (begin (= (+ (greatest-fixnum) 1) (make-rectangular (+ (greatest-fixnum) 1) 0))) (if (equal? '#t val) (format #t " Running ~d/~d" 839 1775) (begin (add-error '(= (+ (greatest-fixnum) 1) (make-rectangular (+ (greatest-fixnum) 1) 0)) '#t val))))
(display "")(let1 val (begin (= (/ 1 3) (make-rectangular (/ 2 6) 0))) (if (equal? '#t val) (format #t " Running ~d/~d" 840 1775) (begin (add-error '(= (/ 1 3) (make-rectangular (/ 2 6) 0)) '#t val))))
(display "")(let1 val (begin (= (inexact (/ 1 3)) (make-rectangular (inexact (/ 2 6)) 0))) (if (equal? '#t val) (format #t " Running ~d/~d" 841 1775) (begin (add-error '(= (inexact (/ 1 3)) (make-rectangular (inexact (/ 2 6)) 0)) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 3 0) 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 842 1775) (begin (add-error '(= (make-rectangular 3 0) 3) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (+ (greatest-fixnum) 1) 0) (+ (greatest-fixnum) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 843 1775) (begin (add-error '(= (make-rectangular (+ (greatest-fixnum) 1) 0) (+ (greatest-fixnum) 1)) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (/ 2 6) 0) (/ 1 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 844 1775) (begin (add-error '(= (make-rectangular (/ 2 6) 0) (/ 1 3)) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (inexact (/ 2 6)) 0) (inexact (/ 1 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 845 1775) (begin (add-error '(= (make-rectangular (inexact (/ 2 6)) 0) (inexact (/ 1 3))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 2 3) (+ (make-rectangular 1 2) (make-rectangular 1 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 846 1775) (begin (add-error '(= (make-rectangular 2 3) (+ (make-rectangular 1 2) (make-rectangular 1 1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 0 1) (- (make-rectangular 1 2) (make-rectangular 1 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 847 1775) (begin (add-error '(= (make-rectangular 0 1) (- (make-rectangular 1 2) (make-rectangular 1 1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 0 -1) (- (make-rectangular 1 1) (make-rectangular 1 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 848 1775) (begin (add-error '(= (make-rectangular 0 -1) (- (make-rectangular 1 1) (make-rectangular 1 2))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular -5 10) (* (make-rectangular 1 2) (make-rectangular 3 4)))) (if (equal? '#t val) (format #t " Running ~d/~d" 849 1775) (begin (add-error '(= (make-rectangular -5 10) (* (make-rectangular 1 2) (make-rectangular 3 4))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 1 0) (/ (make-rectangular 1 2) (make-rectangular 1 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 850 1775) (begin (add-error '(= (make-rectangular 1 0) (/ (make-rectangular 1 2) (make-rectangular 1 2))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 1 1) (/ (make-rectangular 2 2) 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 851 1775) (begin (add-error '(= (make-rectangular 1 1) (/ (make-rectangular 2 2) 2)) '#t val))))
(display "")(let1 val (begin (/ (make-rectangular 1 2) (make-rectangular 1 2))) (if (equal? '1 val) (format #t " Running ~d/~d" 852 1775) (begin (add-error '(/ (make-rectangular 1 2) (make-rectangular 1 2)) '1 val))))
(display "")(let1 val (begin (+ (make-rectangular 1 -1) (make-rectangular 1 1))) (if (equal? '2 val) (format #t " Running ~d/~d" 853 1775) (begin (add-error '(+ (make-rectangular 1 -1) (make-rectangular 1 1)) '2 val))))
(display "")(let1 val (begin (= (make-rectangular (/ -1 2) (/ 3 2)) (/ (make-rectangular 1 2) (make-rectangular 1 -1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 854 1775) (begin (add-error '(= (make-rectangular (/ -1 2) (/ 3 2)) (/ (make-rectangular 1 2) (make-rectangular 1 -1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 2 1) (+ 1 (make-rectangular 1 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 855 1775) (begin (add-error '(= (make-rectangular 2 1) (+ 1 (make-rectangular 1 1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 3 1) (+ (make-rectangular 1 1) 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 856 1775) (begin (add-error '(= (make-rectangular 3 1) (+ (make-rectangular 1 1) 2)) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (+ (greatest-fixnum) 2) 1) (+ (+ (greatest-fixnum) 1) (make-rectangular 1 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 857 1775) (begin (add-error '(= (make-rectangular (+ (greatest-fixnum) 2) 1) (+ (+ (greatest-fixnum) 1) (make-rectangular 1 1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (+ (greatest-fixnum) 2) 1) (+ (make-rectangular 1 1) (+ (greatest-fixnum) 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 858 1775) (begin (add-error '(= (make-rectangular (+ (greatest-fixnum) 2) 1) (+ (make-rectangular 1 1) (+ (greatest-fixnum) 1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 1 3) (+ (/ 1 2) (make-rectangular (/ 1 2) 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 859 1775) (begin (add-error '(= (make-rectangular 1 3) (+ (/ 1 2) (make-rectangular (/ 1 2) 3))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 1 3) (+ (make-rectangular (/ 1 2) 3) (/ 1 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 860 1775) (begin (add-error '(= (make-rectangular 1 3) (+ (make-rectangular (/ 1 2) 3) (/ 1 2))) '#t val))))
(display "")(let1 val (begin (let1 sum (+ (make-rectangular 1 2) (inexact (/ 1 2))) (and (< (inexact (/ 2 2)) (real-part sum) (inexact (/ 4 2))) (= (imag-part sum) 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 861 1775) (begin (add-error '(let1 sum (+ (make-rectangular 1 2) (inexact (/ 1 2))) (and (< (inexact (/ 2 2)) (real-part sum) (inexact (/ 4 2))) (= (imag-part sum) 2))) '#t val))))
(display "")(let1 val (begin (let1 sum (+ (inexact (/ 1 2)) (make-rectangular 1 2)) (and (< (inexact (/ 2 2)) (real-part sum) (inexact (/ 4 2))) (= (imag-part sum) 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 862 1775) (begin (add-error '(let1 sum (+ (inexact (/ 1 2)) (make-rectangular 1 2)) (and (< (inexact (/ 2 2)) (real-part sum) (inexact (/ 4 2))) (= (imag-part sum) 2))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 3 3) (+ (make-rectangular 1 1) (make-rectangular 2 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 863 1775) (begin (add-error '(= (make-rectangular 3 3) (+ (make-rectangular 1 1) (make-rectangular 2 2))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 0 -1) (- 1 (make-rectangular 1 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 864 1775) (begin (add-error '(= (make-rectangular 0 -1) (- 1 (make-rectangular 1 1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular -1 1) (- (make-rectangular 1 1) 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 865 1775) (begin (add-error '(= (make-rectangular -1 1) (- (make-rectangular 1 1) 2)) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (+ (greatest-fixnum) 1) -1) (- (+ (greatest-fixnum) 2) (make-rectangular 1 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 866 1775) (begin (add-error '(= (make-rectangular (+ (greatest-fixnum) 1) -1) (- (+ (greatest-fixnum) 2) (make-rectangular 1 1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (least-fixnum) -1) (- (make-rectangular 1 1) (+ (greatest-fixnum) 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 867 1775) (begin (add-error '(= (make-rectangular (least-fixnum) -1) (- (make-rectangular 1 1) (+ (greatest-fixnum) 2))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 0 3) (- (/ 1 2) (make-rectangular (/ 1 2) 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 868 1775) (begin (add-error '(= (make-rectangular 0 3) (- (/ 1 2) (make-rectangular (/ 1 2) 3))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 0 3) (- (make-rectangular (/ 1 2) 3) (/ 1 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 869 1775) (begin (add-error '(= (make-rectangular 0 3) (- (make-rectangular (/ 1 2) 3) (/ 1 2))) '#t val))))
(display "")(let1 val (begin (let1 sum (- (make-rectangular 1 2) (inexact (/ 1 2))) (and (< (inexact (/ 1 4)) (real-part sum) (inexact (/ 2 3))) (= (imag-part sum) 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 870 1775) (begin (add-error '(let1 sum (- (make-rectangular 1 2) (inexact (/ 1 2))) (and (< (inexact (/ 1 4)) (real-part sum) (inexact (/ 2 3))) (= (imag-part sum) 2))) '#t val))))
(display "")(let1 val (begin (let1 sum (- (inexact (/ 1 2)) (make-rectangular 1 2)) (and (< (inexact (- 0 (/ 3 4))) (real-part sum) (inexact (- 0 (/ 1 4)))) (= (imag-part sum) -2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 871 1775) (begin (add-error '(let1 sum (- (inexact (/ 1 2)) (make-rectangular 1 2)) (and (< (inexact (- 0 (/ 3 4))) (real-part sum) (inexact (- 0 (/ 1 4)))) (= (imag-part sum) -2))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular -1 -1) (- (make-rectangular 1 1) (make-rectangular 2 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 872 1775) (begin (add-error '(= (make-rectangular -1 -1) (- (make-rectangular 1 1) (make-rectangular 2 2))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 6 3) (* 3 (make-rectangular 2 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 873 1775) (begin (add-error '(= (make-rectangular 6 3) (* 3 (make-rectangular 2 1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 6 3) (* (make-rectangular 2 1) 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 874 1775) (begin (add-error '(= (make-rectangular 6 3) (* (make-rectangular 2 1) 3)) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (+ (greatest-fixnum) (greatest-fixnum) 2) (+ 1 (greatest-fixnum))) (* (+ 1 (greatest-fixnum)) (make-rectangular 2 2)))) (if (equal? '#t val) (format #t " Running ~d/~d" 875 1775) (begin (add-error '(= (make-rectangular (+ (greatest-fixnum) (greatest-fixnum) 2) (+ 1 (greatest-fixnum))) (* (+ 1 (greatest-fixnum)) (make-rectangular 2 2))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (+ (greatest-fixnum) (greatest-fixnum) 2) (+ 1 (greatest-fixnum))) (* (make-rectangular 2 2) (+ 1 (greatest-fixnum))))) (if (equal? '#t val) (format #t " Running ~d/~d" 876 1775) (begin (add-error '(= (make-rectangular (+ (greatest-fixnum) (greatest-fixnum) 2) (+ 1 (greatest-fixnum))) (* (make-rectangular 2 2) (+ 1 (greatest-fixnum)))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (/ 1 3) (/ 2 6)) (* (/ 1 3) (make-rectangular 1 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 877 1775) (begin (add-error '(= (make-rectangular (/ 1 3) (/ 2 6)) (* (/ 1 3) (make-rectangular 1 1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (/ 1 3) (/ 2 6)) (* (make-rectangular 1 1) (/ 1 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 878 1775) (begin (add-error '(= (make-rectangular (/ 1 3) (/ 2 6)) (* (make-rectangular 1 1) (/ 1 3))) '#t val))))
(display "")(let1 val (begin (let1 val (* (make-rectangular 2 3) (inexact (/ 1 3))) (and (< (/ 1 4) (real-part val) 1) (< (/ 99 100) (imag-part val) (inexact (/ 101 100)))))) (if (equal? '#t val) (format #t " Running ~d/~d" 879 1775) (begin (add-error '(let1 val (* (make-rectangular 2 3) (inexact (/ 1 3))) (and (< (/ 1 4) (real-part val) 1) (< (/ 99 100) (imag-part val) (inexact (/ 101 100))))) '#t val))))
(display "")(let1 val (begin (let1 val (* (inexact (/ 1 3)) (make-rectangular 2 3)) (and (< (/ 1 4) (real-part val) 1) (< (/ 99 100) (imag-part val) (inexact (/ 101 100)))))) (if (equal? '#t val) (format #t " Running ~d/~d" 880 1775) (begin (add-error '(let1 val (* (inexact (/ 1 3)) (make-rectangular 2 3)) (and (< (/ 1 4) (real-part val) 1) (< (/ 99 100) (imag-part val) (inexact (/ 101 100))))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular -7 -27) (* (make-rectangular 2 3) (make-rectangular 4 5)))) (if (equal? '#t val) (format #t " Running ~d/~d" 881 1775) (begin (add-error '(= (make-rectangular -7 -27) (* (make-rectangular 2 3) (make-rectangular 4 5))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (/ 3 17) (/ 5 17)) (/ 2 (make-rectangular 3 5)))) (if (equal? '#t val) (format #t " Running ~d/~d" 882 1775) (begin (add-error '(= (make-rectangular (/ 3 17) (/ 5 17)) (/ 2 (make-rectangular 3 5))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (/ 3 2) (/ 5 2)) (/ (make-rectangular 3 5) 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 883 1775) (begin (add-error '(= (make-rectangular (/ 3 2) (/ 5 2)) (/ (make-rectangular 3 5) 2)) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (/ (+ 1 (greatest-fixnum)) 2) (- 0 (/ (+ 1 (greatest-fixnum)) 2))) (/ (+ (greatest-fixnum) 1) (make-rectangular 1 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 884 1775) (begin (add-error '(= (make-rectangular (/ (+ 1 (greatest-fixnum)) 2) (- 0 (/ (+ 1 (greatest-fixnum)) 2))) (/ (+ (greatest-fixnum) 1) (make-rectangular 1 1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 1 2) (/ (make-rectangular (+ (greatest-fixnum) 1) (* 2 (+ (greatest-fixnum) 1))) (+ (greatest-fixnum) 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 885 1775) (begin (add-error '(= (make-rectangular 1 2) (/ (make-rectangular (+ (greatest-fixnum) 1) (* 2 (+ (greatest-fixnum) 1))) (+ (greatest-fixnum) 1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (/ 1 6) (/ -1 6)) (/ (/ 1 3) (make-rectangular 1 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 886 1775) (begin (add-error '(= (make-rectangular (/ 1 6) (/ -1 6)) (/ (/ 1 3) (make-rectangular 1 1))) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 3 3) (/ (make-rectangular 1 1) (/ 1 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 887 1775) (begin (add-error '(= (make-rectangular 3 3) (/ (make-rectangular 1 1) (/ 1 3))) '#t val))))
(display "")(let1 val (begin (> (/ 7 2) (real-part (/ (make-rectangular 1 1) (inexact (/ 1 3)))) (/ 5 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 888 1775) (begin (add-error '(> (/ 7 2) (real-part (/ (make-rectangular 1 1) (inexact (/ 1 3)))) (/ 5 2)) '#t val))))
(display "")(let1 val (begin (> (/ 2 6) (real-part (/ (inexact (/ 1 3)) (make-rectangular 1 1))) (/ 1 7))) (if (equal? '#t val) (format #t " Running ~d/~d" 889 1775) (begin (add-error '(> (/ 2 6) (real-part (/ (inexact (/ 1 3)) (make-rectangular 1 1))) (/ 1 7)) '#t val))))
(display "")(let1 val (begin (= (make-rectangular (/ 5 13) (/ -1 13)) (/ (make-rectangular 1 1) (make-rectangular 2 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 890 1775) (begin (add-error '(= (make-rectangular (/ 5 13) (/ -1 13)) (/ (make-rectangular 1 1) (make-rectangular 2 3))) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (/ 1 0))) (format #t " Running ~d/~d" 891 1775) (add-error '(/ 1 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (/ (/ 1 3) 0))) (format #t " Running ~d/~d" 892 1775) (add-error '(/ (/ 1 3) 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (/ (+ (greatest-fixnum) 1) 0))) (format #t " Running ~d/~d" 893 1775) (add-error '(/ (+ (greatest-fixnum) 1) 0) 'error val))(display "")(let1 val (begin (/ (inexact (/ 1 3)) 0)) (if (equal? '+inf.0 val) (format #t " Running ~d/~d" 894 1775) (begin (add-error '(/ (inexact (/ 1 3)) 0) '+inf.0 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (/ (make-rectangular 1 1) 0))) (format #t " Running ~d/~d" 895 1775) (add-error '(/ (make-rectangular 1 1) 0) 'error val))(display "")(let1 val (begin (/ 3 (inexact 0))) (if (equal? '+inf.0 val) (format #t " Running ~d/~d" 896 1775) (begin (add-error '(/ 3 (inexact 0)) '+inf.0 val))))
(display "")(let1 val (begin (let1 v (make-rectangular 3 0) (and (fixnum? v) (= v 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 897 1775) (begin (add-error '(let1 v (make-rectangular 3 0) (and (fixnum? v) (= v 3))) '#t val))))
(display "")(let1 val (begin (number? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 898 1775) (begin (add-error '(number? 3) '#t val))))
(display "")(let1 val (begin (number? (/ 3 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 899 1775) (begin (add-error '(number? (/ 3 4)) '#t val))))
(display "")(let1 val (begin (number? (inexact (/ 3 4)))) (if (equal? '#t val) (format #t " Running ~d/~d" 900 1775) (begin (add-error '(number? (inexact (/ 3 4))) '#t val))))
(display "")(let1 val (begin (number? (+ (greatest-fixnum) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 901 1775) (begin (add-error '(number? (+ (greatest-fixnum) 1)) '#t val))))
(display "")(let1 val (begin (number? (make-rectangular 3 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 902 1775) (begin (add-error '(number? (make-rectangular 3 2)) '#t val))))
(display "")(let1 val (begin (number? "string")) (if (equal? '#f val) (format #t " Running ~d/~d" 903 1775) (begin (add-error '(number? "string") '#f val))))
(display "")(let1 val (begin (number? #vu8(1 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 904 1775) (begin (add-error '(number? #vu8(1 2)) '#f val))))
(display "")(let1 val (begin (exact? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 905 1775) (begin (add-error '(exact? 3) '#t val))))
(display "")(let1 val (begin (exact? (+ (greatest-fixnum) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 906 1775) (begin (add-error '(exact? (+ (greatest-fixnum) 1)) '#t val))))
(display "")(let1 val (begin (exact? (/ 1 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 907 1775) (begin (add-error '(exact? (/ 1 3)) '#t val))))
(display "")(let1 val (begin (exact? (inexact (/ 1 3)))) (if (equal? '#f val) (format #t " Running ~d/~d" 908 1775) (begin (add-error '(exact? (inexact (/ 1 3))) '#f val))))
(display "")(let1 val (begin (exact? (make-rectangular 1 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 909 1775) (begin (add-error '(exact? (make-rectangular 1 2)) '#t val))))
(display "")(let1 val (begin (exact? (make-rectangular (inexact (/ 1 3)) 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 910 1775) (begin (add-error '(exact? (make-rectangular (inexact (/ 1 3)) 3)) '#f val))))
(display "")(let1 val (begin (inexact? 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 911 1775) (begin (add-error '(inexact? 3) '#f val))))
(display "")(let1 val (begin (inexact? (+ (greatest-fixnum) 1))) (if (equal? '#f val) (format #t " Running ~d/~d" 912 1775) (begin (add-error '(inexact? (+ (greatest-fixnum) 1)) '#f val))))
(display "")(let1 val (begin (inexact? (/ 1 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 913 1775) (begin (add-error '(inexact? (/ 1 3)) '#f val))))
(display "")(let1 val (begin (inexact? (inexact (/ 1 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 914 1775) (begin (add-error '(inexact? (inexact (/ 1 3))) '#t val))))
(display "")(let1 val (begin (inexact? (make-rectangular 1 2))) (if (equal? '#f val) (format #t " Running ~d/~d" 915 1775) (begin (add-error '(inexact? (make-rectangular 1 2)) '#f val))))
(display "")(let1 val (begin (inexact? (make-rectangular (inexact (/ 1 3)) 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 916 1775) (begin (add-error '(inexact? (make-rectangular (inexact (/ 1 3)) 3)) '#t val))))
(display "")(let1 val (begin (exact 2)) (if (equal? '2 val) (format #t " Running ~d/~d" 917 1775) (begin (add-error '(exact 2) '2 val))))
(display "")(let1 val (begin (= (exact (+ (greatest-fixnum) 1)) (+ (greatest-fixnum) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 918 1775) (begin (add-error '(= (exact (+ (greatest-fixnum) 1)) (+ (greatest-fixnum) 1)) '#t val))))
(display "")(let1 val (begin (= (exact (/ 1 3)) (/ 1 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 919 1775) (begin (add-error '(= (exact (/ 1 3)) (/ 1 3)) '#t val))))
(display "")(let1 val (begin (= (make-rectangular 1 2) (make-rectangular 1 (inexact (/ 2 1))))) (if (equal? '#t val) (format #t " Running ~d/~d" 920 1775) (begin (add-error '(= (make-rectangular 1 2) (make-rectangular 1 (inexact (/ 2 1)))) '#t val))))
(display "")(let1 val (begin (exact (inexact (/ 4 2)))) (if (equal? '2 val) (format #t " Running ~d/~d" 921 1775) (begin (add-error '(exact (inexact (/ 4 2))) '2 val))))
(define my-nan (/ (inexact 0) (inexact 0)))(define minus-inf (/ (inexact -1) (inexact 0)))(define plus-inf (/ (inexact 1) (inexact 0)))(define t0.0 (inexact 0))(define t0.5 (inexact (/ 1 2)))(define t1.0 (inexact 1))(define t2.0 (inexact 2))(define t3.0 (inexact 3))(define t3.1 (inexact (/ 31 10)))(define t3.2 (inexact (/ 32 10)))(define t5.0 (inexact 5))(define t-5.0 (inexact -5))(define t-3.0 (inexact -3))(define t-2.0 (inexact -2))(define t-1.0 (inexact -1))(display "")(let1 val (begin (zero? 0)) (if (equal? '#t val) (format #t " Running ~d/~d" 923 1775) (begin (add-error '(zero? 0) '#t val))))
(display "")(let1 val (begin (zero? t0.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 924 1775) (begin (add-error '(zero? t0.0) '#t val))))
(display "")(let1 val (begin (zero? (make-rectangular 0 0))) (if (equal? '#t val) (format #t " Running ~d/~d" 925 1775) (begin (add-error '(zero? (make-rectangular 0 0)) '#t val))))
(display "")(let1 val (begin (let ((my-nan (/ t0.0 t0.0))) (zero? my-nan))) (if (equal? '#f val) (format #t " Running ~d/~d" 926 1775) (begin (add-error '(let ((my-nan (/ t0.0 t0.0))) (zero? my-nan)) '#f val))))
(display "")(let1 val (begin (positive? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 927 1775) (begin (add-error '(positive? 3) '#t val))))
(display "")(let1 val (begin (positive? (+ (greatest-fixnum) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 928 1775) (begin (add-error '(positive? (+ (greatest-fixnum) 1)) '#t val))))
(display "")(let1 val (begin (positive? (/ 1 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 929 1775) (begin (add-error '(positive? (/ 1 3)) '#t val))))
(display "")(let1 val (begin (positive? (inexact (/ 1 3)))) (if (equal? '#t val) (format #t " Running ~d/~d" 930 1775) (begin (add-error '(positive? (inexact (/ 1 3))) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (positive? (make-rectangular 1 1)))) (format #t " Running ~d/~d" 931 1775) (add-error '(positive? (make-rectangular 1 1)) 'error val))(display "")(let1 val (begin (negative? 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 932 1775) (begin (add-error '(negative? 3) '#f val))))
(display "")(let1 val (begin (negative? (+ (greatest-fixnum) 1))) (if (equal? '#f val) (format #t " Running ~d/~d" 933 1775) (begin (add-error '(negative? (+ (greatest-fixnum) 1)) '#f val))))
(display "")(let1 val (begin (negative? (/ 1 3))) (if (equal? '#f val) (format #t " Running ~d/~d" 934 1775) (begin (add-error '(negative? (/ 1 3)) '#f val))))
(display "")(let1 val (begin (negative? (inexact (/ 1 3)))) (if (equal? '#f val) (format #t " Running ~d/~d" 935 1775) (begin (add-error '(negative? (inexact (/ 1 3))) '#f val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (negative? (make-rectangular 1 1)))) (format #t " Running ~d/~d" 936 1775) (add-error '(negative? (make-rectangular 1 1)) 'error val))(display "")(let1 val (begin (negative? my-nan)) (if (equal? '#f val) (format #t " Running ~d/~d" 937 1775) (begin (add-error '(negative? my-nan) '#f val))))
(display "")(let1 val (begin (positive? my-nan)) (if (equal? '#f val) (format #t " Running ~d/~d" 938 1775) (begin (add-error '(positive? my-nan) '#f val))))
(display "")(let1 val (begin (positive? plus-inf)) (if (equal? '#t val) (format #t " Running ~d/~d" 939 1775) (begin (add-error '(positive? plus-inf) '#t val))))
(display "")(let1 val (begin (negative? minus-inf)) (if (equal? '#t val) (format #t " Running ~d/~d" 940 1775) (begin (add-error '(negative? minus-inf) '#t val))))
(display "")(let1 val (begin (nan? (/ t0.0 t0.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 941 1775) (begin (add-error '(nan? (/ t0.0 t0.0)) '#t val))))
(display "")(let1 val (begin (finite? 5)) (if (equal? '#t val) (format #t " Running ~d/~d" 942 1775) (begin (add-error '(finite? 5) '#t val))))
(display "")(let1 val (begin (finite? t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 943 1775) (begin (add-error '(finite? t3.0) '#t val))))
(display "")(let1 val (begin (infinite? t3.0)) (if (equal? '#f val) (format #t " Running ~d/~d" 944 1775) (begin (add-error '(infinite? t3.0) '#f val))))
(display "")(let1 val (begin (finite? plus-inf)) (if (equal? '#f val) (format #t " Running ~d/~d" 945 1775) (begin (add-error '(finite? plus-inf) '#f val))))
(display "")(let1 val (begin (infinite? plus-inf)) (if (equal? '#t val) (format #t " Running ~d/~d" 946 1775) (begin (add-error '(infinite? plus-inf) '#t val))))
(display "")(let1 val (begin (format "~a" plus-inf)) (if (equal? '"+inf.0" val) (format #t " Running ~d/~d" 947 1775) (begin (add-error '(format "~a" plus-inf) '"+inf.0" val))))
(display "")(let1 val (begin (format "~a" minus-inf)) (if (equal? '"-inf.0" val) (format #t " Running ~d/~d" 948 1775) (begin (add-error '(format "~a" minus-inf) '"-inf.0" val))))
(display "")(let1 val (begin (format "~a" my-nan)) (if (equal? '"+nan.0" val) (format #t " Running ~d/~d" 949 1775) (begin (add-error '(format "~a" my-nan) '"+nan.0" val))))
(display "")(let1 val (begin (numerator (/ 6 4))) (if (equal? '3 val) (format #t " Running ~d/~d" 950 1775) (begin (add-error '(numerator (/ 6 4)) '3 val))))
(display "")(let1 val (begin (denominator (/ 6 4))) (if (equal? '2 val) (format #t " Running ~d/~d" 951 1775) (begin (add-error '(denominator (/ 6 4)) '2 val))))
(display "")(let1 val (begin (= t2.0 (denominator (inexact (/ 6 4))))) (if (equal? '#t val) (format #t " Running ~d/~d" 952 1775) (begin (add-error '(= t2.0 (denominator (inexact (/ 6 4)))) '#t val))))
(display "")(let1 val (begin (denominator 0)) (if (equal? '1 val) (format #t " Running ~d/~d" 953 1775) (begin (add-error '(denominator 0) '1 val))))
(display "")(let1 val (begin (= t1.0 (denominator t0.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 954 1775) (begin (add-error '(= t1.0 (denominator t0.0)) '#t val))))
(display "")(let1 val (begin (= t3.0 (real->flonum 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 955 1775) (begin (add-error '(= t3.0 (real->flonum 3)) '#t val))))
(display "")(let1 val (begin (= t3.0 (real->flonum (/ 3 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 956 1775) (begin (add-error '(= t3.0 (real->flonum (/ 3 1))) '#t val))))
(display "")(let1 val (begin (= t3.0 (real->flonum t3.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 957 1775) (begin (add-error '(= t3.0 (real->flonum t3.0)) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (real->flonum (make-rectangular 1 1)))) (format #t " Running ~d/~d" 958 1775) (add-error '(real->flonum (make-rectangular 1 1)) 'error val))(display "")(let1 val (begin (fl=? t3.0 t3.0 t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 959 1775) (begin (add-error '(fl=? t3.0 t3.0 t3.0) '#t val))))
(display "")(let1 val (begin (fl=? t3.0 t3.1 t3.0)) (if (equal? '#f val) (format #t " Running ~d/~d" 960 1775) (begin (add-error '(fl=? t3.0 t3.1 t3.0) '#f val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fl=? t3.0 3 t3.0))) (format #t " Running ~d/~d" 961 1775) (add-error '(fl=? t3.0 3 t3.0) 'error val))(display "")(let1 val (begin (fl<? t3.0 t3.0 t3.0)) (if (equal? '#f val) (format #t " Running ~d/~d" 962 1775) (begin (add-error '(fl<? t3.0 t3.0 t3.0) '#f val))))
(display "")(let1 val (begin (fl<? t3.0 t3.1 t3.2)) (if (equal? '#t val) (format #t " Running ~d/~d" 963 1775) (begin (add-error '(fl<? t3.0 t3.1 t3.2) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fl<? t3.0 3 t3.0))) (format #t " Running ~d/~d" 964 1775) (add-error '(fl<? t3.0 3 t3.0) 'error val))(display "")(let1 val (begin (fl<=? t3.0 t3.0 t3.2)) (if (equal? '#t val) (format #t " Running ~d/~d" 965 1775) (begin (add-error '(fl<=? t3.0 t3.0 t3.2) '#t val))))
(display "")(let1 val (begin (fl<=? t3.0 t3.1 t3.2)) (if (equal? '#t val) (format #t " Running ~d/~d" 966 1775) (begin (add-error '(fl<=? t3.0 t3.1 t3.2) '#t val))))
(display "")(let1 val (begin (fl<=? t3.1 t3.0 t3.2)) (if (equal? '#f val) (format #t " Running ~d/~d" 967 1775) (begin (add-error '(fl<=? t3.1 t3.0 t3.2) '#f val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fl<=? t3.0 3 t3.0))) (format #t " Running ~d/~d" 968 1775) (add-error '(fl<=? t3.0 3 t3.0) 'error val))(display "")(let1 val (begin (fl>? t3.0 t3.0 t3.0)) (if (equal? '#f val) (format #t " Running ~d/~d" 969 1775) (begin (add-error '(fl>? t3.0 t3.0 t3.0) '#f val))))
(display "")(let1 val (begin (fl>? t3.2 t3.1 t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 970 1775) (begin (add-error '(fl>? t3.2 t3.1 t3.0) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fl>? t3.0 3 t3.0))) (format #t " Running ~d/~d" 971 1775) (add-error '(fl>? t3.0 3 t3.0) 'error val))(display "")(let1 val (begin (fl>=? t3.0 t3.0 t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 972 1775) (begin (add-error '(fl>=? t3.0 t3.0 t3.0) '#t val))))
(display "")(let1 val (begin (fl>=? t3.2 t3.1 t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 973 1775) (begin (add-error '(fl>=? t3.2 t3.1 t3.0) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fl>=? t3.0 3 t3.0))) (format #t " Running ~d/~d" 974 1775) (add-error '(fl>=? t3.0 3 t3.0) 'error val))(display "")(let1 val (begin (fl=? plus-inf plus-inf)) (if (equal? '#t val) (format #t " Running ~d/~d" 975 1775) (begin (add-error '(fl=? plus-inf plus-inf) '#t val))))
(display "")(let1 val (begin (fl=? minus-inf plus-inf)) (if (equal? '#f val) (format #t " Running ~d/~d" 976 1775) (begin (add-error '(fl=? minus-inf plus-inf) '#f val))))
(display "")(let1 val (begin (fl=? minus-inf minus-inf)) (if (equal? '#t val) (format #t " Running ~d/~d" 977 1775) (begin (add-error '(fl=? minus-inf minus-inf) '#t val))))
(display "")(let1 val (begin (fl=? my-nan t3.0)) (if (equal? '#f val) (format #t " Running ~d/~d" 978 1775) (begin (add-error '(fl=? my-nan t3.0) '#f val))))
(display "")(let1 val (begin (fl<? my-nan t3.0)) (if (equal? '#f val) (format #t " Running ~d/~d" 979 1775) (begin (add-error '(fl<? my-nan t3.0) '#f val))))
(display "")(let1 val (begin (flinteger? t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 980 1775) (begin (add-error '(flinteger? t3.0) '#t val))))
(display "")(let1 val (begin (flinteger? t3.1)) (if (equal? '#f val) (format #t " Running ~d/~d" 981 1775) (begin (add-error '(flinteger? t3.1) '#f val))))
(display "")(let1 val (begin (flzero? t0.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 982 1775) (begin (add-error '(flzero? t0.0) '#t val))))
(display "")(let1 val (begin (flpositive? t0.0)) (if (equal? '#f val) (format #t " Running ~d/~d" 983 1775) (begin (add-error '(flpositive? t0.0) '#f val))))
(display "")(let1 val (begin (flpositive? t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 984 1775) (begin (add-error '(flpositive? t3.0) '#t val))))
(display "")(let1 val (begin (flnegative? t0.0)) (if (equal? '#f val) (format #t " Running ~d/~d" 985 1775) (begin (add-error '(flnegative? t0.0) '#f val))))
(display "")(let1 val (begin (flnegative? t-3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 986 1775) (begin (add-error '(flnegative? t-3.0) '#t val))))
(display "")(let1 val (begin (flodd? t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 987 1775) (begin (add-error '(flodd? t3.0) '#t val))))
(display "")(let1 val (begin (fleven? t3.0)) (if (equal? '#f val) (format #t " Running ~d/~d" 988 1775) (begin (add-error '(fleven? t3.0) '#f val))))
(display "")(let1 val (begin (flodd? t2.0)) (if (equal? '#f val) (format #t " Running ~d/~d" 989 1775) (begin (add-error '(flodd? t2.0) '#f val))))
(display "")(let1 val (begin (fleven? t2.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 990 1775) (begin (add-error '(fleven? t2.0) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fleven? t3.1))) (format #t " Running ~d/~d" 991 1775) (add-error '(fleven? t3.1) 'error val))(display "")(let1 val (begin (flfinite? plus-inf)) (if (equal? '#f val) (format #t " Running ~d/~d" 992 1775) (begin (add-error '(flfinite? plus-inf) '#f val))))
(display "")(let1 val (begin (flfinite? t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 993 1775) (begin (add-error '(flfinite? t3.0) '#t val))))
(display "")(let1 val (begin (flinfinite? t3.0)) (if (equal? '#f val) (format #t " Running ~d/~d" 994 1775) (begin (add-error '(flinfinite? t3.0) '#f val))))
(display "")(let1 val (begin (flinfinite? plus-inf)) (if (equal? '#t val) (format #t " Running ~d/~d" 995 1775) (begin (add-error '(flinfinite? plus-inf) '#t val))))
(display "")(let1 val (begin (= t3.2 (flmax t3.1 t3.0 t3.2 t-3.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 996 1775) (begin (add-error '(= t3.2 (flmax t3.1 t3.0 t3.2 t-3.0)) '#t val))))
(display "")(let1 val (begin (nan? (flmax t3.1 t3.0 t3.2 my-nan t-3.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 997 1775) (begin (add-error '(nan? (flmax t3.1 t3.0 t3.2 my-nan t-3.0)) '#t val))))
(display "")(let1 val (begin (= t-3.0 (flmin t3.1 t3.0 t3.2 t-3.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 998 1775) (begin (add-error '(= t-3.0 (flmin t3.1 t3.0 t3.2 t-3.0)) '#t val))))
(display "")(let1 val (begin (nan? (flmin t3.1 t3.0 t3.2 my-nan t-3.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 999 1775) (begin (add-error '(nan? (flmin t3.1 t3.0 t3.2 my-nan t-3.0)) '#t val))))
(display "")(let1 val (begin (fl=? t0.0 (fl+))) (if (equal? '#t val) (format #t " Running ~d/~d" 1000 1775) (begin (add-error '(fl=? t0.0 (fl+)) '#t val))))
(display "")(let1 val (begin (fl=? t3.0 (fl+ t0.0 t1.0 t2.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1001 1775) (begin (add-error '(fl=? t3.0 (fl+ t0.0 t1.0 t2.0)) '#t val))))
(display "")(let1 val (begin (fl=? t1.0 (fl*))) (if (equal? '#t val) (format #t " Running ~d/~d" 1002 1775) (begin (add-error '(fl=? t1.0 (fl*)) '#t val))))
(display "")(let1 val (begin (fl=? t2.0 (fl* t1.0 t2.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1003 1775) (begin (add-error '(fl=? t2.0 (fl* t1.0 t2.0)) '#t val))))
(display "")(let1 val (begin (nan? (fl+ plus-inf minus-inf))) (if (equal? '#t val) (format #t " Running ~d/~d" 1004 1775) (begin (add-error '(nan? (fl+ plus-inf minus-inf)) '#t val))))
(display "")(let1 val (begin (nan? (fl+ my-nan t2.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1005 1775) (begin (add-error '(nan? (fl+ my-nan t2.0)) '#t val))))
(display "")(let1 val (begin (nan? (fl* my-nan t2.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1006 1775) (begin (add-error '(nan? (fl* my-nan t2.0)) '#t val))))
(display "")(let1 val (begin (fl=? t-3.0 (fl- t3.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1007 1775) (begin (add-error '(fl=? t-3.0 (fl- t3.0)) '#t val))))
(display "")(let1 val (begin (fl=? t2.0 (fl- t3.0 t1.0 t0.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1008 1775) (begin (add-error '(fl=? t2.0 (fl- t3.0 t1.0 t0.0)) '#t val))))
(display "")(let1 val (begin (nan? (fl- plus-inf plus-inf))) (if (equal? '#t val) (format #t " Running ~d/~d" 1009 1775) (begin (add-error '(nan? (fl- plus-inf plus-inf)) '#t val))))
(display "")(let1 val (begin (fl=? t1.0 (fl/ t1.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1010 1775) (begin (add-error '(fl=? t1.0 (fl/ t1.0)) '#t val))))
(display "")(let1 val (begin (fl=? t2.0 (fl/ t1.0 t0.5))) (if (equal? '#t val) (format #t " Running ~d/~d" 1011 1775) (begin (add-error '(fl=? t2.0 (fl/ t1.0 t0.5)) '#t val))))
(display "")(let1 val (begin (fl=? t2.0 (fl/ t1.0 t0.5 t1.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1012 1775) (begin (add-error '(fl=? t2.0 (fl/ t1.0 t0.5 t1.0)) '#t val))))
(display "")(let1 val (begin (fl=? plus-inf (fl/ t1.0 t0.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1013 1775) (begin (add-error '(fl=? plus-inf (fl/ t1.0 t0.0)) '#t val))))
(display "")(let1 val (begin (fl=? minus-inf (fl/ t-1.0 t0.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1014 1775) (begin (add-error '(fl=? minus-inf (fl/ t-1.0 t0.0)) '#t val))))
(display "")(let1 val (begin (nan? (fl/ t0.0 t0.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1015 1775) (begin (add-error '(nan? (fl/ t0.0 t0.0)) '#t val))))
(display "")(let1 val (begin (positive? (flabs t-3.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1016 1775) (begin (add-error '(positive? (flabs t-3.0)) '#t val))))
(display "")(let1 val (begin (fl=? t3.0 (flabs t-3.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1017 1775) (begin (add-error '(fl=? t3.0 (flabs t-3.0)) '#t val))))
(display "")(let1 val (begin (fl=? (fldiv t3.0 t2.0) t1.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1018 1775) (begin (add-error '(fl=? (fldiv t3.0 t2.0) t1.0) '#t val))))
(display "")(let1 val (begin (fl=? (flmod t3.0 t2.0) t1.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1019 1775) (begin (add-error '(fl=? (flmod t3.0 t2.0) t1.0) '#t val))))
(display "")(let1 val (begin (fl=? (fldiv t5.0 t-2.0) t-2.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1020 1775) (begin (add-error '(fl=? (fldiv t5.0 t-2.0) t-2.0) '#t val))))
(display "")(let1 val (begin (fl=? (flmod t5.0 t-2.0) t1.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1021 1775) (begin (add-error '(fl=? (flmod t5.0 t-2.0) t1.0) '#t val))))
(display "")(let1 val (begin (fl=? (fldiv t-5.0 t2.0) t-3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1022 1775) (begin (add-error '(fl=? (fldiv t-5.0 t2.0) t-3.0) '#t val))))
(display "")(let1 val (begin (fl=? (flmod t-5.0 t2.0) t1.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1023 1775) (begin (add-error '(fl=? (flmod t-5.0 t2.0) t1.0) '#t val))))
(display "")(let1 val (begin (fl=? (fldiv t-5.0 t-2.0) t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1024 1775) (begin (add-error '(fl=? (fldiv t-5.0 t-2.0) t3.0) '#t val))))
(display "")(let1 val (begin (fl=? (flmod t-5.0 t-2.0) t1.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1025 1775) (begin (add-error '(fl=? (flmod t-5.0 t-2.0) t1.0) '#t val))))
(display "")(let1 val (begin (receive (div mod) (fldiv-and-mod t5.0 t-2.0) (and (fl=? div t-2.0) (fl=? mod t1.0)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1026 1775) (begin (add-error '(receive (div mod) (fldiv-and-mod t5.0 t-2.0) (and (fl=? div t-2.0) (fl=? mod t1.0))) '#t val))))
(define t123.0 (inexact 123))(define t-123.0 (inexact -123))(define t10.0 (inexact 10))(define t-10.0 (inexact -10))(define t12.0 (inexact 12))(define t-12.0 (inexact -12))(display "")(let1 val (begin (fl=? (fldiv0 t123.0 t10.0) t12.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1028 1775) (begin (add-error '(fl=? (fldiv0 t123.0 t10.0) t12.0) '#t val))))
(display "")(let1 val (begin (fl=? (flmod0 t123.0 t10.0) t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1029 1775) (begin (add-error '(fl=? (flmod0 t123.0 t10.0) t3.0) '#t val))))
(display "")(let1 val (begin (fl=? (fldiv0 t123.0 t-10.0) t-12.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1030 1775) (begin (add-error '(fl=? (fldiv0 t123.0 t-10.0) t-12.0) '#t val))))
(display "")(let1 val (begin (fl=? (flmod0 t123.0 t-10.0) t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1031 1775) (begin (add-error '(fl=? (flmod0 t123.0 t-10.0) t3.0) '#t val))))
(display "")(let1 val (begin (fl=? (fldiv0 t-123.0 t10.0) t-12.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1032 1775) (begin (add-error '(fl=? (fldiv0 t-123.0 t10.0) t-12.0) '#t val))))
(display "")(let1 val (begin (fl=? (flmod0 t-123.0 t10.0) t-3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1033 1775) (begin (add-error '(fl=? (flmod0 t-123.0 t10.0) t-3.0) '#t val))))
(display "")(let1 val (begin (fl=? (fldiv0 t-123.0 t-10.0) t12.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1034 1775) (begin (add-error '(fl=? (fldiv0 t-123.0 t-10.0) t12.0) '#t val))))
(display "")(let1 val (begin (fl=? (flmod0 t-123.0 t-10.0) t-3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1035 1775) (begin (add-error '(fl=? (flmod0 t-123.0 t-10.0) t-3.0) '#t val))))
(display "")(let1 val (begin (receive (div mod) (fldiv0-and-mod0 t-123.0 t-10.0) (and (fl=? div t12.0) (fl=? mod t-3.0)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1036 1775) (begin (add-error '(receive (div mod) (fldiv0-and-mod0 t-123.0 t-10.0) (and (fl=? div t12.0) (fl=? mod t-3.0))) '#t val))))
(define t0.75 (inexact (/ 3 4)))(define t4.0 (inexact 4))(display "")(let1 val (begin (fl=? plus-inf (flnumerator plus-inf))) (if (equal? '#t val) (format #t " Running ~d/~d" 1038 1775) (begin (add-error '(fl=? plus-inf (flnumerator plus-inf)) '#t val))))
(display "")(let1 val (begin (fl=? minus-inf (flnumerator minus-inf))) (if (equal? '#t val) (format #t " Running ~d/~d" 1039 1775) (begin (add-error '(fl=? minus-inf (flnumerator minus-inf)) '#t val))))
(display "")(let1 val (begin (fl=? t1.0 (fldenominator plus-inf))) (if (equal? '#t val) (format #t " Running ~d/~d" 1040 1775) (begin (add-error '(fl=? t1.0 (fldenominator plus-inf)) '#t val))))
(display "")(let1 val (begin (fl=? t1.0 (fldenominator minus-inf))) (if (equal? '#t val) (format #t " Running ~d/~d" 1041 1775) (begin (add-error '(fl=? t1.0 (fldenominator minus-inf)) '#t val))))
(display "")(let1 val (begin (fl=? (flnumerator t0.75) t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1042 1775) (begin (add-error '(fl=? (flnumerator t0.75) t3.0) '#t val))))
(display "")(let1 val (begin (fl=? (fldenominator t0.75) t4.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1043 1775) (begin (add-error '(fl=? (fldenominator t0.75) t4.0) '#t val))))
(define t-3.1 (inexact (/ -31 10)))(define t3.8 (inexact (/ 38 10)))(define t-3.8 (inexact (/ -38 10)))(define t-4.0 (inexact -4))(display "")(let1 val (begin (fl=? (flfloor t3.1) t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1045 1775) (begin (add-error '(fl=? (flfloor t3.1) t3.0) '#t val))))
(display "")(let1 val (begin (fl=? (flfloor t-3.1) t-4.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1046 1775) (begin (add-error '(fl=? (flfloor t-3.1) t-4.0) '#t val))))
(display "")(let1 val (begin (fl=? (flceiling t3.1) t4.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1047 1775) (begin (add-error '(fl=? (flceiling t3.1) t4.0) '#t val))))
(display "")(let1 val (begin (fl=? (flceiling t-3.1) t-3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1048 1775) (begin (add-error '(fl=? (flceiling t-3.1) t-3.0) '#t val))))
(display "")(let1 val (begin (fl=? (fltruncate t3.1) t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1049 1775) (begin (add-error '(fl=? (fltruncate t3.1) t3.0) '#t val))))
(display "")(let1 val (begin (fl=? (fltruncate t-3.1) t-3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1050 1775) (begin (add-error '(fl=? (fltruncate t-3.1) t-3.0) '#t val))))
(display "")(let1 val (begin (fl=? (flround t3.1) t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1051 1775) (begin (add-error '(fl=? (flround t3.1) t3.0) '#t val))))
(display "")(let1 val (begin (fl=? (flround t-3.1) t-3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1052 1775) (begin (add-error '(fl=? (flround t-3.1) t-3.0) '#t val))))
(display "")(let1 val (begin (fl=? (flround t3.8) t4.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1053 1775) (begin (add-error '(fl=? (flround t3.8) t4.0) '#t val))))
(display "")(let1 val (begin (fl=? (flround t-3.8) t-4.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1054 1775) (begin (add-error '(fl=? (flround t-3.8) t-4.0) '#t val))))
(display "")(let1 val (begin (fl=? (flfloor plus-inf) plus-inf)) (if (equal? '#t val) (format #t " Running ~d/~d" 1055 1775) (begin (add-error '(fl=? (flfloor plus-inf) plus-inf) '#t val))))
(display "")(let1 val (begin (fl=? (flceiling minus-inf) minus-inf)) (if (equal? '#t val) (format #t " Running ~d/~d" 1056 1775) (begin (add-error '(fl=? (flceiling minus-inf) minus-inf) '#t val))))
(display "")(let1 val (begin (nan? (fltruncate my-nan))) (if (equal? '#t val) (format #t " Running ~d/~d" 1057 1775) (begin (add-error '(nan? (fltruncate my-nan)) '#t val))))
(display "")(let1 val (begin (almost=? (flexp t2.0) t7.389)) (if (equal? '#t val) (format #t " Running ~d/~d" 1058 1775) (begin (add-error '(almost=? (flexp t2.0) t7.389) '#t val))))
(display "")(let1 val (begin (almost=? (fllog t7.389) t2.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1059 1775) (begin (add-error '(almost=? (fllog t7.389) t2.0) '#t val))))
(display "")(let1 val (begin (almost=? (fllog t1024.0 t2.0) t10.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1060 1775) (begin (add-error '(almost=? (fllog t1024.0 t2.0) t10.0) '#t val))))
(display "")(let1 val (begin (almost=? (flsin t0.0) t0.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1061 1775) (begin (add-error '(almost=? (flsin t0.0) t0.0) '#t val))))
(display "")(let1 val (begin (almost=? (flsin t1.570796) t1.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1062 1775) (begin (add-error '(almost=? (flsin t1.570796) t1.0) '#t val))))
(display "")(let1 val (begin (almost=? (flcos t1.570796) t0.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1063 1775) (begin (add-error '(almost=? (flcos t1.570796) t0.0) '#t val))))
(display "")(let1 val (begin (almost=? (flcos t0.0) t1.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1064 1775) (begin (add-error '(almost=? (flcos t0.0) t1.0) '#t val))))
(display "")(let1 val (begin (almost=? (flatan t0.0 t1.0) t0.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1065 1775) (begin (add-error '(almost=? (flatan t0.0 t1.0) t0.0) '#t val))))
(display "")(let1 val (begin (almost=? (flatan t0.0 t-1.0) (* t1.570796 t2.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1066 1775) (begin (add-error '(almost=? (flatan t0.0 t-1.0) (* t1.570796 t2.0)) '#t val))))
(display "")(let1 val (begin (almost=? (flatan t1.0 t0.0) t1.570796)) (if (equal? '#t val) (format #t " Running ~d/~d" 1067 1775) (begin (add-error '(almost=? (flatan t1.0 t0.0) t1.570796) '#t val))))
(display "")(let1 val (begin (almost=? (flatan t-1.0 t0.0) t-1.570796)) (if (equal? '#t val) (format #t " Running ~d/~d" 1068 1775) (begin (add-error '(almost=? (flatan t-1.0 t0.0) t-1.570796) '#t val))))
(display "")(let1 val (begin (almost=? (flatan t1.0 t1.0) (/ t1.570796 t2.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1069 1775) (begin (add-error '(almost=? (flatan t1.0 t1.0) (/ t1.570796 t2.0)) '#t val))))
(display "")(let1 val (begin (almost=? (flatan t-1.0 t1.0) (/ t-1.570796 t2.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1070 1775) (begin (add-error '(almost=? (flatan t-1.0 t1.0) (/ t-1.570796 t2.0)) '#t val))))
(display "")(let1 val (begin (almost=? (flatan t0.0) t0.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1071 1775) (begin (add-error '(almost=? (flatan t0.0) t0.0) '#t val))))
(display "")(let1 val (begin (almost=? (flatan t1.0) (/ t1.570796 t2.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1072 1775) (begin (add-error '(almost=? (flatan t1.0) (/ t1.570796 t2.0)) '#t val))))
(display "")(let1 val (begin (almost=? (flatan t10.0) t1.47113)) (if (equal? '#t val) (format #t " Running ~d/~d" 1073 1775) (begin (add-error '(almost=? (flatan t10.0) t1.47113) '#t val))))
(display "")(let1 val (begin (almost=? (flatan t0.1) t0.0996687)) (if (equal? '#t val) (format #t " Running ~d/~d" 1074 1775) (begin (add-error '(almost=? (flatan t0.1) t0.0996687) '#t val))))
(display "")(let1 val (begin (almost=? (flsqrt t4.0) t2.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1075 1775) (begin (add-error '(almost=? (flsqrt t4.0) t2.0) '#t val))))
(display "")(let1 val (begin (almost=? (flsqrt t5.0) t2.23607)) (if (equal? '#t val) (format #t " Running ~d/~d" 1076 1775) (begin (add-error '(almost=? (flsqrt t5.0) t2.23607) '#t val))))
(display "")(let1 val (begin (almost=? (flexpt t2.0 t3.0) t8.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1077 1775) (begin (add-error '(almost=? (flexpt t2.0 t3.0) t8.0) '#t val))))
(display "")(let1 val (begin (almost=? (flexpt t10.0 t3.0) t1000.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1078 1775) (begin (add-error '(almost=? (flexpt t10.0 t3.0) t1000.0) '#t val))))
(display "")(let1 val (begin (fl=? t3.0 (fixnum->flonum 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 1079 1775) (begin (add-error '(fl=? t3.0 (fixnum->flonum 3)) '#t val))))
(display "")(let1 val (begin (bitwise-not 12)) (if (equal? '-13 val) (format #t " Running ~d/~d" 1080 1775) (begin (add-error '(bitwise-not 12) '-13 val))))
(display "")(let1 val (begin (bitwise-not -12)) (if (equal? '11 val) (format #t " Running ~d/~d" 1081 1775) (begin (add-error '(bitwise-not -12) '11 val))))
(display "")(let1 val (begin (bitwise-not -1)) (if (equal? '0 val) (format #t " Running ~d/~d" 1082 1775) (begin (add-error '(bitwise-not -1) '0 val))))
(display "")(let1 val (begin (bitwise-not 0)) (if (equal? '-1 val) (format #t " Running ~d/~d" 1083 1775) (begin (add-error '(bitwise-not 0) '-1 val))))
(display "")(let1 val (begin (= (least-fixnum) (bitwise-not (greatest-fixnum)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1084 1775) (begin (add-error '(= (least-fixnum) (bitwise-not (greatest-fixnum))) '#t val))))
(display "")(let1 val (begin (= (greatest-fixnum) (bitwise-not (least-fixnum)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1085 1775) (begin (add-error '(= (greatest-fixnum) (bitwise-not (least-fixnum))) '#t val))))
(display "")(let1 val (begin (bitwise-and 0 0)) (if (equal? '0 val) (format #t " Running ~d/~d" 1086 1775) (begin (add-error '(bitwise-and 0 0) '0 val))))
(display "")(let1 val (begin (bitwise-and 0 1)) (if (equal? '0 val) (format #t " Running ~d/~d" 1087 1775) (begin (add-error '(bitwise-and 0 1) '0 val))))
(display "")(let1 val (begin (bitwise-and 1 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 1088 1775) (begin (add-error '(bitwise-and 1 1) '1 val))))
(display "")(let1 val (begin (bitwise-and 7 3)) (if (equal? '3 val) (format #t " Running ~d/~d" 1089 1775) (begin (add-error '(bitwise-and 7 3) '3 val))))
(display "")(let1 val (begin (bitwise-and 7 3 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 1090 1775) (begin (add-error '(bitwise-and 7 3 1) '1 val))))
(display "")(let1 val (begin (bitwise-ior 0 0)) (if (equal? '0 val) (format #t " Running ~d/~d" 1091 1775) (begin (add-error '(bitwise-ior 0 0) '0 val))))
(display "")(let1 val (begin (bitwise-ior 0 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 1092 1775) (begin (add-error '(bitwise-ior 0 1) '1 val))))
(display "")(let1 val (begin (bitwise-ior 1 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 1093 1775) (begin (add-error '(bitwise-ior 1 1) '1 val))))
(display "")(let1 val (begin (bitwise-ior 7 3)) (if (equal? '7 val) (format #t " Running ~d/~d" 1094 1775) (begin (add-error '(bitwise-ior 7 3) '7 val))))
(display "")(let1 val (begin (bitwise-ior 7 3 1)) (if (equal? '7 val) (format #t " Running ~d/~d" 1095 1775) (begin (add-error '(bitwise-ior 7 3 1) '7 val))))
(display "")(let1 val (begin (bitwise-xor 0 0)) (if (equal? '0 val) (format #t " Running ~d/~d" 1096 1775) (begin (add-error '(bitwise-xor 0 0) '0 val))))
(display "")(let1 val (begin (bitwise-xor 0 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 1097 1775) (begin (add-error '(bitwise-xor 0 1) '1 val))))
(display "")(let1 val (begin (bitwise-xor 1 1)) (if (equal? '0 val) (format #t " Running ~d/~d" 1098 1775) (begin (add-error '(bitwise-xor 1 1) '0 val))))
(display "")(let1 val (begin (bitwise-xor 7 3)) (if (equal? '4 val) (format #t " Running ~d/~d" 1099 1775) (begin (add-error '(bitwise-xor 7 3) '4 val))))
(display "")(let1 val (begin (bitwise-xor 7 3 1)) (if (equal? '5 val) (format #t " Running ~d/~d" 1100 1775) (begin (add-error '(bitwise-xor 7 3 1) '5 val))))
(display "")(let1 val (begin (bitwise-if 9 15 0)) (if (equal? '9 val) (format #t " Running ~d/~d" 1101 1775) (begin (add-error '(bitwise-if 9 15 0) '9 val))))
(display "")(let1 val (begin (bitwise-bit-count 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 1102 1775) (begin (add-error '(bitwise-bit-count 1) '1 val))))
(display "")(let1 val (begin (bitwise-bit-count 3)) (if (equal? '2 val) (format #t " Running ~d/~d" 1103 1775) (begin (add-error '(bitwise-bit-count 3) '2 val))))
(display "")(let1 val (begin (bitwise-bit-count -1)) (if (equal? '-1 val) (format #t " Running ~d/~d" 1104 1775) (begin (add-error '(bitwise-bit-count -1) '-1 val))))
(display "")(let1 val (begin (bitwise-length 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 1105 1775) (begin (add-error '(bitwise-length 1) '1 val))))
(display "")(let1 val (begin (bitwise-length 3)) (if (equal? '2 val) (format #t " Running ~d/~d" 1106 1775) (begin (add-error '(bitwise-length 3) '2 val))))
(display "")(let1 val (begin (= (fixnum-width) (bitwise-length (+ (greatest-fixnum) 1)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1107 1775) (begin (add-error '(= (fixnum-width) (bitwise-length (+ (greatest-fixnum) 1))) '#t val))))
(display "")(let1 val (begin (bitwise-first-bit-set 2)) (if (equal? '1 val) (format #t " Running ~d/~d" 1108 1775) (begin (add-error '(bitwise-first-bit-set 2) '1 val))))
(display "")(let1 val (begin (bitwise-first-bit-set 4)) (if (equal? '2 val) (format #t " Running ~d/~d" 1109 1775) (begin (add-error '(bitwise-first-bit-set 4) '2 val))))
(display "")(let1 val (begin (bitwise-first-bit-set 0)) (if (equal? '-1 val) (format #t " Running ~d/~d" 1110 1775) (begin (add-error '(bitwise-first-bit-set 0) '-1 val))))
(display "")(let1 val (begin (bitwise-first-bit-set (* 256 256 256 256))) (if (equal? '32 val) (format #t " Running ~d/~d" 1111 1775) (begin (add-error '(bitwise-first-bit-set (* 256 256 256 256)) '32 val))))
(display "")(let1 val (begin (bitwise-first-bit-set (* 256 256 256 256 256))) (if (equal? '40 val) (format #t " Running ~d/~d" 1112 1775) (begin (add-error '(bitwise-first-bit-set (* 256 256 256 256 256)) '40 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (bitwise-arithmetic-shift-left 1 -1))) (format #t " Running ~d/~d" 1113 1775) (add-error '(bitwise-arithmetic-shift-left 1 -1) 'error val))(display "")(let1 val (begin (bitwise-arithmetic-shift-left 1 1)) (if (equal? '2 val) (format #t " Running ~d/~d" 1114 1775) (begin (add-error '(bitwise-arithmetic-shift-left 1 1) '2 val))))
(display "")(let1 val (begin (bitwise-arithmetic-shift-left 1 2)) (if (equal? '4 val) (format #t " Running ~d/~d" 1115 1775) (begin (add-error '(bitwise-arithmetic-shift-left 1 2) '4 val))))
(display "")(let1 val (begin (bitwise-arithmetic-shift-left 1 3)) (if (equal? '8 val) (format #t " Running ~d/~d" 1116 1775) (begin (add-error '(bitwise-arithmetic-shift-left 1 3) '8 val))))
(display "")(let1 val (begin (bitwise-arithmetic-shift-left 1 4)) (if (equal? '16 val) (format #t " Running ~d/~d" 1117 1775) (begin (add-error '(bitwise-arithmetic-shift-left 1 4) '16 val))))
(display "")(let1 val (begin (bitwise-arithmetic-shift-left 1 5)) (if (equal? '32 val) (format #t " Running ~d/~d" 1118 1775) (begin (add-error '(bitwise-arithmetic-shift-left 1 5) '32 val))))
(display "")(let1 val (begin (fixnum? (bitwise-arithmetic-shift-left 1 5))) (if (equal? '#t val) (format #t " Running ~d/~d" 1119 1775) (begin (add-error '(fixnum? (bitwise-arithmetic-shift-left 1 5)) '#t val))))
(display "")(let1 val (begin (= (bitwise-arithmetic-shift-left (* 256 256 256 256) 1) (* 256 256 256 256 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 1120 1775) (begin (add-error '(= (bitwise-arithmetic-shift-left (* 256 256 256 256) 1) (* 256 256 256 256 2)) '#t val))))
(display "")(let1 val (begin (bitwise-arithmetic-shift-right 32 5)) (if (equal? '1 val) (format #t " Running ~d/~d" 1121 1775) (begin (add-error '(bitwise-arithmetic-shift-right 32 5) '1 val))))
(display "")(let1 val (begin (= (bitwise-arithmetic-shift-right (* 256 256 256 256 2) 1) (* 256 256 256 256))) (if (equal? '#t val) (format #t " Running ~d/~d" 1122 1775) (begin (add-error '(= (bitwise-arithmetic-shift-right (* 256 256 256 256 2) 1) (* 256 256 256 256)) '#t val))))
(display "")(let1 val (begin (bitwise-arithmetic-shift -6 -1)) (if (equal? '-3 val) (format #t " Running ~d/~d" 1123 1775) (begin (add-error '(bitwise-arithmetic-shift -6 -1) '-3 val))))
(display "")(let1 val (begin (bitwise-arithmetic-shift -5 -1)) (if (equal? '-3 val) (format #t " Running ~d/~d" 1124 1775) (begin (add-error '(bitwise-arithmetic-shift -5 -1) '-3 val))))
(display "")(let1 val (begin (bitwise-arithmetic-shift -4 -1)) (if (equal? '-2 val) (format #t " Running ~d/~d" 1125 1775) (begin (add-error '(bitwise-arithmetic-shift -4 -1) '-2 val))))
(display "")(let1 val (begin (bitwise-arithmetic-shift -3 -1)) (if (equal? '-2 val) (format #t " Running ~d/~d" 1126 1775) (begin (add-error '(bitwise-arithmetic-shift -3 -1) '-2 val))))
(display "")(let1 val (begin (bitwise-arithmetic-shift -2 -1)) (if (equal? '-1 val) (format #t " Running ~d/~d" 1127 1775) (begin (add-error '(bitwise-arithmetic-shift -2 -1) '-1 val))))
(display "")(let1 val (begin (bitwise-arithmetic-shift -1 -1)) (if (equal? '-1 val) (format #t " Running ~d/~d" 1128 1775) (begin (add-error '(bitwise-arithmetic-shift -1 -1) '-1 val))))
(display "")(let1 val (begin (bitwise-reverse-bit-field 82 1 4)) (if (equal? '88 val) (format #t " Running ~d/~d" 1129 1775) (begin (add-error '(bitwise-reverse-bit-field 82 1 4) '88 val))))
(display "")(let1 val (begin (bitwise-bit-set? -1 300)) (if (equal? '#t val) (format #t " Running ~d/~d" 1130 1775) (begin (add-error '(bitwise-bit-set? -1 300) '#t val))))
(display "")(let1 val (begin (bitwise-bit-set? -1 0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1131 1775) (begin (add-error '(bitwise-bit-set? -1 0) '#t val))))
(display "")(let1 val (begin (bitwise-bit-set? -2 0)) (if (equal? '#f val) (format #t " Running ~d/~d" 1132 1775) (begin (add-error '(bitwise-bit-set? -2 0) '#f val))))
(display "")(let1 val (begin (complex? (make-rectangular 3 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 1133 1775) (begin (add-error '(complex? (make-rectangular 3 4)) '#t val))))
(display "")(let1 val (begin (complex? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 1134 1775) (begin (add-error '(complex? 3) '#t val))))
(display "")(let1 val (begin (real? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 1135 1775) (begin (add-error '(real? 3) '#t val))))
(display "")(let1 val (begin (real? (make-rectangular t3.1 t0.0))) (if (equal? '#f val) (format #t " Running ~d/~d" 1136 1775) (begin (add-error '(real? (make-rectangular t3.1 t0.0)) '#f val))))
(display "")(let1 val (begin (real? (make-rectangular t3.1 0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1137 1775) (begin (add-error '(real? (make-rectangular t3.1 0)) '#t val))))
(display "")(let1 val (begin (real? t-3.1)) (if (equal? '#t val) (format #t " Running ~d/~d" 1138 1775) (begin (add-error '(real? t-3.1) '#t val))))
(display "")(let1 val (begin (rational? (/ 6 10))) (if (equal? '#t val) (format #t " Running ~d/~d" 1139 1775) (begin (add-error '(rational? (/ 6 10)) '#t val))))
(display "")(let1 val (begin (rational? (/ 6 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 1140 1775) (begin (add-error '(rational? (/ 6 3)) '#t val))))
(display "")(let1 val (begin (rational? 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 1141 1775) (begin (add-error '(rational? 2) '#t val))))
(display "")(let1 val (begin (integer? (make-rectangular 3 0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1142 1775) (begin (add-error '(integer? (make-rectangular 3 0)) '#t val))))
(display "")(let1 val (begin (integer? t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1143 1775) (begin (add-error '(integer? t3.0) '#t val))))
(display "")(let1 val (begin (integer? (/ 8 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 1144 1775) (begin (add-error '(integer? (/ 8 4)) '#t val))))
(display "")(let1 val (begin (number? my-nan)) (if (equal? '#t val) (format #t " Running ~d/~d" 1145 1775) (begin (add-error '(number? my-nan) '#t val))))
(display "")(let1 val (begin (complex? my-nan)) (if (equal? '#t val) (format #t " Running ~d/~d" 1146 1775) (begin (add-error '(complex? my-nan) '#t val))))
(display "")(let1 val (begin (real? my-nan)) (if (equal? '#t val) (format #t " Running ~d/~d" 1147 1775) (begin (add-error '(real? my-nan) '#t val))))
(display "")(let1 val (begin (rational? my-nan)) (if (equal? '#f val) (format #t " Running ~d/~d" 1148 1775) (begin (add-error '(rational? my-nan) '#f val))))
(display "")(let1 val (begin (complex? plus-inf)) (if (equal? '#t val) (format #t " Running ~d/~d" 1149 1775) (begin (add-error '(complex? plus-inf) '#t val))))
(display "")(let1 val (begin (real? minus-inf)) (if (equal? '#t val) (format #t " Running ~d/~d" 1150 1775) (begin (add-error '(real? minus-inf) '#t val))))
(display "")(let1 val (begin (rational? minus-inf)) (if (equal? '#f val) (format #t " Running ~d/~d" 1151 1775) (begin (add-error '(rational? minus-inf) '#f val))))
(display "")(let1 val (begin (integer? minus-inf)) (if (equal? '#f val) (format #t " Running ~d/~d" 1152 1775) (begin (add-error '(integer? minus-inf) '#f val))))
(display "")(let1 val (begin (real-valued? my-nan)) (if (equal? '#t val) (format #t " Running ~d/~d" 1153 1775) (begin (add-error '(real-valued? my-nan) '#t val))))
(display "")(let1 val (begin (real-valued? (make-rectangular my-nan 0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1154 1775) (begin (add-error '(real-valued? (make-rectangular my-nan 0)) '#t val))))
(display "")(let1 val (begin (real-valued? minus-inf)) (if (equal? '#t val) (format #t " Running ~d/~d" 1155 1775) (begin (add-error '(real-valued? minus-inf) '#t val))))
(display "")(let1 val (begin (real-valued? 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 1156 1775) (begin (add-error '(real-valued? 3) '#t val))))
(display "")(let1 val (begin (real-valued? (make-rectangular t3.1 t0.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1157 1775) (begin (add-error '(real-valued? (make-rectangular t3.1 t0.0)) '#t val))))
(display "")(let1 val (begin (real-valued? (make-rectangular t3.1 0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1158 1775) (begin (add-error '(real-valued? (make-rectangular t3.1 0)) '#t val))))
(display "")(let1 val (begin (real-valued? t-3.1)) (if (equal? '#t val) (format #t " Running ~d/~d" 1159 1775) (begin (add-error '(real-valued? t-3.1) '#t val))))
(display "")(let1 val (begin (rational-valued? my-nan)) (if (equal? '#f val) (format #t " Running ~d/~d" 1160 1775) (begin (add-error '(rational-valued? my-nan) '#f val))))
(display "")(let1 val (begin (rational-valued? minus-inf)) (if (equal? '#f val) (format #t " Running ~d/~d" 1161 1775) (begin (add-error '(rational-valued? minus-inf) '#f val))))
(display "")(let1 val (begin (rational-valued? (/ 6 10))) (if (equal? '#t val) (format #t " Running ~d/~d" 1162 1775) (begin (add-error '(rational-valued? (/ 6 10)) '#t val))))
(display "")(let1 val (begin (rational-valued? (make-rectangular (/ 6 10) t0.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1163 1775) (begin (add-error '(rational-valued? (make-rectangular (/ 6 10) t0.0)) '#t val))))
(display "")(let1 val (begin (rational-valued? (make-rectangular (/ 6 10) t0.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1164 1775) (begin (add-error '(rational-valued? (make-rectangular (/ 6 10) t0.0)) '#t val))))
(display "")(let1 val (begin (rational-valued? (/ 6 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 1165 1775) (begin (add-error '(rational-valued? (/ 6 3)) '#t val))))
(display "")(let1 val (begin (integer-valued? (make-rectangular 3 0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1166 1775) (begin (add-error '(integer-valued? (make-rectangular 3 0)) '#t val))))
(display "")(let1 val (begin (integer-valued? (make-rectangular 3 t0.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1167 1775) (begin (add-error '(integer-valued? (make-rectangular 3 t0.0)) '#t val))))
(display "")(let1 val (begin (integer-valued? t3.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1168 1775) (begin (add-error '(integer-valued? t3.0) '#t val))))
(display "")(let1 val (begin (integer-valued? (make-rectangular t3.0 t0.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1169 1775) (begin (add-error '(integer-valued? (make-rectangular t3.0 t0.0)) '#t val))))
(display "")(let1 val (begin (integer-valued? (/ 8 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 1170 1775) (begin (add-error '(integer-valued? (/ 8 4)) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (max))) (format #t " Running ~d/~d" 1171 1775) (add-error '(max) 'error val))(display "")(let1 val (begin (max 3)) (if (equal? '3 val) (format #t " Running ~d/~d" 1172 1775) (begin (add-error '(max 3) '3 val))))
(display "")(let1 val (begin (max 3 4)) (if (equal? '4 val) (format #t " Running ~d/~d" 1173 1775) (begin (add-error '(max 3 4) '4 val))))
(display "")(let1 val (begin (max 3 5 4)) (if (equal? '5 val) (format #t " Running ~d/~d" 1174 1775) (begin (add-error '(max 3 5 4) '5 val))))
(display "")(let1 val (begin (max 1073741824 536870912 2147483648)) (if (equal? '2147483648 val) (format #t " Running ~d/~d" 1175 1775) (begin (add-error '(max 1073741824 536870912 2147483648) '2147483648 val))))
(display "")(let1 val (begin (- (/ 1 2) (max (/ 1 2) (/ 1 4) (/ 1 3)))) (if (equal? '0 val) (format #t " Running ~d/~d" 1176 1775) (begin (add-error '(- (/ 1 2) (max (/ 1 2) (/ 1 4) (/ 1 3))) '0 val))))
(display "")(let1 val (begin (= t4.0 (max t3.0 t-3.1 t4.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1177 1775) (begin (add-error '(= t4.0 (max t3.0 t-3.1 t4.0)) '#t val))))
(display "")(let1 val (begin (max 3.900000 4)) (if (equal? '4.000000 val) (format #t " Running ~d/~d" 1178 1775) (begin (add-error '(max 3.900000 4) '4.000000 val))))
(display "")(let1 val (begin (nan? (max my-nan 3.900000 4 (/ 1 2) t4.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1179 1775) (begin (add-error '(nan? (max my-nan 3.900000 4 (/ 1 2) t4.0)) '#t val))))
(display "")(let1 val (begin (fl=? plus-inf (max plus-inf my-nan))) (if (equal? '#f val) (format #t " Running ~d/~d" 1180 1775) (begin (add-error '(fl=? plus-inf (max plus-inf my-nan)) '#f val))))
(display "")(let1 val (begin (fl=? plus-inf (max plus-inf 3.900000 4 (/ 1 2) t4.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1181 1775) (begin (add-error '(fl=? plus-inf (max plus-inf 3.900000 4 (/ 1 2) t4.0)) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (min))) (format #t " Running ~d/~d" 1182 1775) (add-error '(min) 'error val))(display "")(let1 val (begin (min 3)) (if (equal? '3 val) (format #t " Running ~d/~d" 1183 1775) (begin (add-error '(min 3) '3 val))))
(display "")(let1 val (begin (min 3 4)) (if (equal? '3 val) (format #t " Running ~d/~d" 1184 1775) (begin (add-error '(min 3 4) '3 val))))
(display "")(let1 val (begin (min 3 5 4)) (if (equal? '3 val) (format #t " Running ~d/~d" 1185 1775) (begin (add-error '(min 3 5 4) '3 val))))
(display "")(let1 val (begin (min 1073741824 536870912 2147483648)) (if (equal? '536870912 val) (format #t " Running ~d/~d" 1186 1775) (begin (add-error '(min 1073741824 536870912 2147483648) '536870912 val))))
(display "")(let1 val (begin (- (/ 1 4) (min (/ 1 2) (/ 1 4) (/ 1 3)))) (if (equal? '0 val) (format #t " Running ~d/~d" 1187 1775) (begin (add-error '(- (/ 1 4) (min (/ 1 2) (/ 1 4) (/ 1 3))) '0 val))))
(display "")(let1 val (begin (= t-3.1 (min t3.0 t-3.1 t4.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1188 1775) (begin (add-error '(= t-3.1 (min t3.0 t-3.1 t4.0)) '#t val))))
(display "")(let1 val (begin (min 3.900000 4)) (if (equal? '3.900000 val) (format #t " Running ~d/~d" 1189 1775) (begin (add-error '(min 3.900000 4) '3.900000 val))))
(display "")(let1 val (begin (nan? (min my-nan 3.900000 4 (/ 1 2) t4.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1190 1775) (begin (add-error '(nan? (min my-nan 3.900000 4 (/ 1 2) t4.0)) '#t val))))
(display "")(let1 val (begin (fl=? minus-inf (min minus-inf my-nan))) (if (equal? '#f val) (format #t " Running ~d/~d" 1191 1775) (begin (add-error '(fl=? minus-inf (min minus-inf my-nan)) '#f val))))
(display "")(let1 val (begin (fl=? minus-inf (min minus-inf 3.900000 4 (/ 1 2) t4.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1192 1775) (begin (add-error '(fl=? minus-inf (min minus-inf 3.900000 4 (/ 1 2) t4.0)) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fx=?))) (format #t " Running ~d/~d" 1193 1775) (add-error '(fx=?) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx=? 3))) (format #t " Running ~d/~d" 1194 1775) (add-error '(fx=? 3) 'error val))(display "")(let1 val (begin (fx=? 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 1195 1775) (begin (add-error '(fx=? 3 3) '#t val))))
(display "")(let1 val (begin (fx=? 3 4)) (if (equal? '#f val) (format #t " Running ~d/~d" 1196 1775) (begin (add-error '(fx=? 3 4) '#f val))))
(display "")(let1 val (begin (fx=? 3 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 1197 1775) (begin (add-error '(fx=? 3 3 3) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fx=? 3.000000 3))) (format #t " Running ~d/~d" 1198 1775) (add-error '(fx=? 3.000000 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx=? (+ (greatest-fixnum) 1) (+ (greatest-fixnum) 1)))) (format #t " Running ~d/~d" 1199 1775) (add-error '(fx=? (+ (greatest-fixnum) 1) (+ (greatest-fixnum) 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx>?))) (format #t " Running ~d/~d" 1200 1775) (add-error '(fx>?) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx>? 3))) (format #t " Running ~d/~d" 1201 1775) (add-error '(fx>? 3) 'error val))(display "")(let1 val (begin (fx>? 4 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 1202 1775) (begin (add-error '(fx>? 4 3) '#t val))))
(display "")(let1 val (begin (fx>? 3 4)) (if (equal? '#f val) (format #t " Running ~d/~d" 1203 1775) (begin (add-error '(fx>? 3 4) '#f val))))
(display "")(let1 val (begin (fx>? 5 4 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 1204 1775) (begin (add-error '(fx>? 5 4 3) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fx>? 4.000000 3))) (format #t " Running ~d/~d" 1205 1775) (add-error '(fx>? 4.000000 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx>? (+ (greatest-fixnum) 1) (greatest-fixnum)))) (format #t " Running ~d/~d" 1206 1775) (add-error '(fx>? (+ (greatest-fixnum) 1) (greatest-fixnum)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx<?))) (format #t " Running ~d/~d" 1207 1775) (add-error '(fx<?) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx<? 3))) (format #t " Running ~d/~d" 1208 1775) (add-error '(fx<? 3) 'error val))(display "")(let1 val (begin (fx<? 3 4)) (if (equal? '#t val) (format #t " Running ~d/~d" 1209 1775) (begin (add-error '(fx<? 3 4) '#t val))))
(display "")(let1 val (begin (fx<? 4 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 1210 1775) (begin (add-error '(fx<? 4 3) '#f val))))
(display "")(let1 val (begin (fx<? 3 4 5)) (if (equal? '#t val) (format #t " Running ~d/~d" 1211 1775) (begin (add-error '(fx<? 3 4 5) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fx<? 3 4.000000))) (format #t " Running ~d/~d" 1212 1775) (add-error '(fx<? 3 4.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx<? (greatest-fixnum) (+ (greatest-fixnum) 1)))) (format #t " Running ~d/~d" 1213 1775) (add-error '(fx<? (greatest-fixnum) (+ (greatest-fixnum) 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx>=?))) (format #t " Running ~d/~d" 1214 1775) (add-error '(fx>=?) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx>=? 3))) (format #t " Running ~d/~d" 1215 1775) (add-error '(fx>=? 3) 'error val))(display "")(let1 val (begin (fx>=? 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 1216 1775) (begin (add-error '(fx>=? 3 3) '#t val))))
(display "")(let1 val (begin (fx>=? 4 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 1217 1775) (begin (add-error '(fx>=? 4 3) '#t val))))
(display "")(let1 val (begin (fx>=? 3 4)) (if (equal? '#f val) (format #t " Running ~d/~d" 1218 1775) (begin (add-error '(fx>=? 3 4) '#f val))))
(display "")(let1 val (begin (fx>=? 4 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 1219 1775) (begin (add-error '(fx>=? 4 3 3) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fx>=? 4 3.000000))) (format #t " Running ~d/~d" 1220 1775) (add-error '(fx>=? 4 3.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx>=? (+ (greatest-fixnum) 1) (greatest-fixnum)))) (format #t " Running ~d/~d" 1221 1775) (add-error '(fx>=? (+ (greatest-fixnum) 1) (greatest-fixnum)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx<=?))) (format #t " Running ~d/~d" 1222 1775) (add-error '(fx<=?) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx<=? 3))) (format #t " Running ~d/~d" 1223 1775) (add-error '(fx<=? 3) 'error val))(display "")(let1 val (begin (fx<=? 3 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 1224 1775) (begin (add-error '(fx<=? 3 3) '#t val))))
(display "")(let1 val (begin (fx<=? 3 4)) (if (equal? '#t val) (format #t " Running ~d/~d" 1225 1775) (begin (add-error '(fx<=? 3 4) '#t val))))
(display "")(let1 val (begin (fx<=? 4 3)) (if (equal? '#f val) (format #t " Running ~d/~d" 1226 1775) (begin (add-error '(fx<=? 4 3) '#f val))))
(display "")(let1 val (begin (fx<=? 3 3 4)) (if (equal? '#t val) (format #t " Running ~d/~d" 1227 1775) (begin (add-error '(fx<=? 3 3 4) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fx<=? 3.000000 4))) (format #t " Running ~d/~d" 1228 1775) (add-error '(fx<=? 3.000000 4) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx<=? (greatest-fixnum) (+ (greatest-fixnum) 1)))) (format #t " Running ~d/~d" 1229 1775) (add-error '(fx<=? (greatest-fixnum) (+ (greatest-fixnum) 1)) 'error val))(display "")(let1 val (begin (fxzero? -1)) (if (equal? '#f val) (format #t " Running ~d/~d" 1230 1775) (begin (add-error '(fxzero? -1) '#f val))))
(display "")(let1 val (begin (fxzero? 0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1231 1775) (begin (add-error '(fxzero? 0) '#t val))))
(display "")(let1 val (begin (fxzero? 1)) (if (equal? '#f val) (format #t " Running ~d/~d" 1232 1775) (begin (add-error '(fxzero? 1) '#f val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxzero?))) (format #t " Running ~d/~d" 1233 1775) (add-error '(fxzero?) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxzero? 0.000000))) (format #t " Running ~d/~d" 1234 1775) (add-error '(fxzero? 0.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxzero? 0 0))) (format #t " Running ~d/~d" 1235 1775) (add-error '(fxzero? 0 0) 'error val))(display "")(let1 val (begin (fxpositive? -1)) (if (equal? '#f val) (format #t " Running ~d/~d" 1236 1775) (begin (add-error '(fxpositive? -1) '#f val))))
(display "")(let1 val (begin (fxpositive? 0)) (if (equal? '#f val) (format #t " Running ~d/~d" 1237 1775) (begin (add-error '(fxpositive? 0) '#f val))))
(display "")(let1 val (begin (fxpositive? 1)) (if (equal? '#t val) (format #t " Running ~d/~d" 1238 1775) (begin (add-error '(fxpositive? 1) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxpositive?))) (format #t " Running ~d/~d" 1239 1775) (add-error '(fxpositive?) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxpositive? 1.000000))) (format #t " Running ~d/~d" 1240 1775) (add-error '(fxpositive? 1.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxpositive? (+ (greatest-fixnum) 1)))) (format #t " Running ~d/~d" 1241 1775) (add-error '(fxpositive? (+ (greatest-fixnum) 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxpositive? 1 2))) (format #t " Running ~d/~d" 1242 1775) (add-error '(fxpositive? 1 2) 'error val))(display "")(let1 val (begin (fxnegative? -1)) (if (equal? '#t val) (format #t " Running ~d/~d" 1243 1775) (begin (add-error '(fxnegative? -1) '#t val))))
(display "")(let1 val (begin (fxnegative? 0)) (if (equal? '#f val) (format #t " Running ~d/~d" 1244 1775) (begin (add-error '(fxnegative? 0) '#f val))))
(display "")(let1 val (begin (fxnegative? 1)) (if (equal? '#f val) (format #t " Running ~d/~d" 1245 1775) (begin (add-error '(fxnegative? 1) '#f val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxnegative?))) (format #t " Running ~d/~d" 1246 1775) (add-error '(fxnegative?) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxnegative? -1.000000))) (format #t " Running ~d/~d" 1247 1775) (add-error '(fxnegative? -1.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxnegative? (- (least-fixnum) 1)))) (format #t " Running ~d/~d" 1248 1775) (add-error '(fxnegative? (- (least-fixnum) 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxnegative? -1 -2))) (format #t " Running ~d/~d" 1249 1775) (add-error '(fxnegative? -1 -2) 'error val))(display "")(let1 val (begin (fxodd? -2)) (if (equal? '#f val) (format #t " Running ~d/~d" 1250 1775) (begin (add-error '(fxodd? -2) '#f val))))
(display "")(let1 val (begin (fxodd? -1)) (if (equal? '#t val) (format #t " Running ~d/~d" 1251 1775) (begin (add-error '(fxodd? -1) '#t val))))
(display "")(let1 val (begin (fxodd? 0)) (if (equal? '#f val) (format #t " Running ~d/~d" 1252 1775) (begin (add-error '(fxodd? 0) '#f val))))
(display "")(let1 val (begin (fxodd? 1)) (if (equal? '#t val) (format #t " Running ~d/~d" 1253 1775) (begin (add-error '(fxodd? 1) '#t val))))
(display "")(let1 val (begin (fxodd? 2)) (if (equal? '#f val) (format #t " Running ~d/~d" 1254 1775) (begin (add-error '(fxodd? 2) '#f val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxodd?))) (format #t " Running ~d/~d" 1255 1775) (add-error '(fxodd?) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxodd? -1 1))) (format #t " Running ~d/~d" 1256 1775) (add-error '(fxodd? -1 1) 'error val))(display "")(let1 val (begin (fxeven? -2)) (if (equal? '#t val) (format #t " Running ~d/~d" 1257 1775) (begin (add-error '(fxeven? -2) '#t val))))
(display "")(let1 val (begin (fxeven? -1)) (if (equal? '#f val) (format #t " Running ~d/~d" 1258 1775) (begin (add-error '(fxeven? -1) '#f val))))
(display "")(let1 val (begin (fxeven? 0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1259 1775) (begin (add-error '(fxeven? 0) '#t val))))
(display "")(let1 val (begin (fxeven? 1)) (if (equal? '#f val) (format #t " Running ~d/~d" 1260 1775) (begin (add-error '(fxeven? 1) '#f val))))
(display "")(let1 val (begin (fxeven? 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 1261 1775) (begin (add-error '(fxeven? 2) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxeven?))) (format #t " Running ~d/~d" 1262 1775) (add-error '(fxeven?) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxeven? -2 2))) (format #t " Running ~d/~d" 1263 1775) (add-error '(fxeven? -2 2) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmax))) (format #t " Running ~d/~d" 1264 1775) (add-error '(fxmax) 'error val))(display "")(let1 val (begin (fxmax 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 1265 1775) (begin (add-error '(fxmax 1) '1 val))))
(display "")(let1 val (begin (fxmax 1 -1)) (if (equal? '1 val) (format #t " Running ~d/~d" 1266 1775) (begin (add-error '(fxmax 1 -1) '1 val))))
(display "")(let1 val (begin (fxmax 1 2 -1)) (if (equal? '2 val) (format #t " Running ~d/~d" 1267 1775) (begin (add-error '(fxmax 1 2 -1) '2 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmax (+ (greatest-fixnum) 1)))) (format #t " Running ~d/~d" 1268 1775) (add-error '(fxmax (+ (greatest-fixnum) 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmax 1.000000))) (format #t " Running ~d/~d" 1269 1775) (add-error '(fxmax 1.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmin))) (format #t " Running ~d/~d" 1270 1775) (add-error '(fxmin) 'error val))(display "")(let1 val (begin (fxmin 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 1271 1775) (begin (add-error '(fxmin 1) '1 val))))
(display "")(let1 val (begin (fxmin 1 -1)) (if (equal? '-1 val) (format #t " Running ~d/~d" 1272 1775) (begin (add-error '(fxmin 1 -1) '-1 val))))
(display "")(let1 val (begin (fxmin 1 -1 2)) (if (equal? '-1 val) (format #t " Running ~d/~d" 1273 1775) (begin (add-error '(fxmin 1 -1 2) '-1 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmin (- (least-fixnum) 1)))) (format #t " Running ~d/~d" 1274 1775) (add-error '(fxmin (- (least-fixnum) 1)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmin 1.000000))) (format #t " Running ~d/~d" 1275 1775) (add-error '(fxmin 1.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx+))) (format #t " Running ~d/~d" 1276 1775) (add-error '(fx+) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx+ 1))) (format #t " Running ~d/~d" 1277 1775) (add-error '(fx+ 1) 'error val))(display "")(let1 val (begin (fx+ 2 3)) (if (equal? '5 val) (format #t " Running ~d/~d" 1278 1775) (begin (add-error '(fx+ 2 3) '5 val))))
(display "")(let1 val (begin (fx+ -2 -3)) (if (equal? '-5 val) (format #t " Running ~d/~d" 1279 1775) (begin (add-error '(fx+ -2 -3) '-5 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fx+ 4 5 6))) (format #t " Running ~d/~d" 1280 1775) (add-error '(fx+ 4 5 6) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx+ 2.000000 3))) (format #t " Running ~d/~d" 1281 1775) (add-error '(fx+ 2.000000 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx+ (greatest-fixnum) 1))) (format #t " Running ~d/~d" 1282 1775) (add-error '(fx+ (greatest-fixnum) 1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx+ (least-fixnum) -1))) (format #t " Running ~d/~d" 1283 1775) (add-error '(fx+ (least-fixnum) -1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx*))) (format #t " Running ~d/~d" 1284 1775) (add-error '(fx*) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx* 1))) (format #t " Running ~d/~d" 1285 1775) (add-error '(fx* 1) 'error val))(display "")(let1 val (begin (fx* 3 3)) (if (equal? '9 val) (format #t " Running ~d/~d" 1286 1775) (begin (add-error '(fx* 3 3) '9 val))))
(display "")(let1 val (begin (fx* -3 3)) (if (equal? '-9 val) (format #t " Running ~d/~d" 1287 1775) (begin (add-error '(fx* -3 3) '-9 val))))
(display "")(let1 val (begin (fx=? -268435456 (fx* -134217728 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 1288 1775) (begin (add-error '(fx=? -268435456 (fx* -134217728 2)) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fx* (greatest-fixnum) 2))) (format #t " Running ~d/~d" 1289 1775) (add-error '(fx* (greatest-fixnum) 2) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx* 3.000000 3))) (format #t " Running ~d/~d" 1290 1775) (add-error '(fx* 3.000000 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx-))) (format #t " Running ~d/~d" 1291 1775) (add-error '(fx-) 'error val))(display "")(let1 val (begin (fx- -3)) (if (equal? '3 val) (format #t " Running ~d/~d" 1292 1775) (begin (add-error '(fx- -3) '3 val))))
(display "")(let1 val (begin (fx- 7)) (if (equal? '-7 val) (format #t " Running ~d/~d" 1293 1775) (begin (add-error '(fx- 7) '-7 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fx- 1.000000))) (format #t " Running ~d/~d" 1294 1775) (add-error '(fx- 1.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx- (least-fixnum)))) (format #t " Running ~d/~d" 1295 1775) (add-error '(fx- (least-fixnum)) 'error val))(display "")(let1 val (begin (fx- 7 3)) (if (equal? '4 val) (format #t " Running ~d/~d" 1296 1775) (begin (add-error '(fx- 7 3) '4 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fx- 7 3.000000))) (format #t " Running ~d/~d" 1297 1775) (add-error '(fx- 7 3.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx- (least-fixnum) 1))) (format #t " Running ~d/~d" 1298 1775) (add-error '(fx- (least-fixnum) 1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv-and-mod))) (format #t " Running ~d/~d" 1299 1775) (add-error '(fxdiv-and-mod) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv-and-mod 123))) (format #t " Running ~d/~d" 1300 1775) (add-error '(fxdiv-and-mod 123) 'error val))(display "")(let1 val (begin (receive (a b) (fxdiv-and-mod 123 10) a)) (if (equal? '12 val) (format #t " Running ~d/~d" 1301 1775) (add-error '(receive (a b) (fxdiv-and-mod 123 10) a) '12 val)))(display "")(let1 val (begin (receive (a b) (fxdiv-and-mod 123 10) b)) (if (equal? '3 val) (format #t " Running ~d/~d" 1302 1775) (add-error '(receive (a b) (fxdiv-and-mod 123 10) b) '3 val)))(display "")(let1 val (begin (receive (a b) (fxdiv-and-mod 123 -10) a)) (if (equal? '-12 val) (format #t " Running ~d/~d" 1303 1775) (add-error '(receive (a b) (fxdiv-and-mod 123 -10) a) '-12 val)))(display "")(let1 val (begin (receive (a b) (fxdiv-and-mod 123 -10) b)) (if (equal? '3 val) (format #t " Running ~d/~d" 1304 1775) (add-error '(receive (a b) (fxdiv-and-mod 123 -10) b) '3 val)))(display "")(let1 val (begin (receive (a b) (fxdiv-and-mod -123 10) a)) (if (equal? '-13 val) (format #t " Running ~d/~d" 1305 1775) (add-error '(receive (a b) (fxdiv-and-mod -123 10) a) '-13 val)))(display "")(let1 val (begin (receive (a b) (fxdiv-and-mod -123 10) b)) (if (equal? '7 val) (format #t " Running ~d/~d" 1306 1775) (add-error '(receive (a b) (fxdiv-and-mod -123 10) b) '7 val)))(display "")(let1 val (begin (receive (a b) (fxdiv-and-mod -123 -10) a)) (if (equal? '13 val) (format #t " Running ~d/~d" 1307 1775) (add-error '(receive (a b) (fxdiv-and-mod -123 -10) a) '13 val)))(display "")(let1 val (begin (receive (a b) (fxdiv-and-mod -123 -10) b)) (if (equal? '7 val) (format #t " Running ~d/~d" 1308 1775) (add-error '(receive (a b) (fxdiv-and-mod -123 -10) b) '7 val)))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv-and-mod 123 0))) (format #t " Running ~d/~d" 1309 1775) (add-error '(fxdiv-and-mod 123 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv-and-mod 123.000000 10.000000))) (format #t " Running ~d/~d" 1310 1775) (add-error '(fxdiv-and-mod 123.000000 10.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv))) (format #t " Running ~d/~d" 1311 1775) (add-error '(fxdiv) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv 123))) (format #t " Running ~d/~d" 1312 1775) (add-error '(fxdiv 123) 'error val))(display "")(let1 val (begin (fxdiv 123 10)) (if (equal? '12 val) (format #t " Running ~d/~d" 1313 1775) (begin (add-error '(fxdiv 123 10) '12 val))))
(display "")(let1 val (begin (fxdiv 123 -10)) (if (equal? '-12 val) (format #t " Running ~d/~d" 1314 1775) (begin (add-error '(fxdiv 123 -10) '-12 val))))
(display "")(let1 val (begin (fxdiv -123 10)) (if (equal? '-13 val) (format #t " Running ~d/~d" 1315 1775) (begin (add-error '(fxdiv -123 10) '-13 val))))
(display "")(let1 val (begin (fxdiv -123 -10)) (if (equal? '13 val) (format #t " Running ~d/~d" 1316 1775) (begin (add-error '(fxdiv -123 -10) '13 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv 123 0))) (format #t " Running ~d/~d" 1317 1775) (add-error '(fxdiv 123 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv 123.000000 10.000000))) (format #t " Running ~d/~d" 1318 1775) (add-error '(fxdiv 123.000000 10.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmod))) (format #t " Running ~d/~d" 1319 1775) (add-error '(fxmod) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmod 123))) (format #t " Running ~d/~d" 1320 1775) (add-error '(fxmod 123) 'error val))(display "")(let1 val (begin (fxmod 123 10)) (if (equal? '3 val) (format #t " Running ~d/~d" 1321 1775) (begin (add-error '(fxmod 123 10) '3 val))))
(display "")(let1 val (begin (fxmod 123 -10)) (if (equal? '3 val) (format #t " Running ~d/~d" 1322 1775) (begin (add-error '(fxmod 123 -10) '3 val))))
(display "")(let1 val (begin (fxmod -123 10)) (if (equal? '7 val) (format #t " Running ~d/~d" 1323 1775) (begin (add-error '(fxmod -123 10) '7 val))))
(display "")(let1 val (begin (fxmod -123 -10)) (if (equal? '7 val) (format #t " Running ~d/~d" 1324 1775) (begin (add-error '(fxmod -123 -10) '7 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmod 123 0))) (format #t " Running ~d/~d" 1325 1775) (add-error '(fxmod 123 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmod 123.000000 10.000000))) (format #t " Running ~d/~d" 1326 1775) (add-error '(fxmod 123.000000 10.000000) 'error val))(display "")(let1 val (begin (receive (a b) (fxdiv0-and-mod0 123 10) a)) (if (equal? '12 val) (format #t " Running ~d/~d" 1327 1775) (add-error '(receive (a b) (fxdiv0-and-mod0 123 10) a) '12 val)))(display "")(let1 val (begin (receive (a b) (fxdiv0-and-mod0 123 10) b)) (if (equal? '3 val) (format #t " Running ~d/~d" 1328 1775) (add-error '(receive (a b) (fxdiv0-and-mod0 123 10) b) '3 val)))(display "")(let1 val (begin (receive (a b) (fxdiv0-and-mod0 123 -10) a)) (if (equal? '-12 val) (format #t " Running ~d/~d" 1329 1775) (add-error '(receive (a b) (fxdiv0-and-mod0 123 -10) a) '-12 val)))(display "")(let1 val (begin (receive (a b) (fxdiv0-and-mod0 123 -10) b)) (if (equal? '3 val) (format #t " Running ~d/~d" 1330 1775) (add-error '(receive (a b) (fxdiv0-and-mod0 123 -10) b) '3 val)))(display "")(let1 val (begin (receive (a b) (fxdiv0-and-mod0 -123 10) a)) (if (equal? '-12 val) (format #t " Running ~d/~d" 1331 1775) (add-error '(receive (a b) (fxdiv0-and-mod0 -123 10) a) '-12 val)))(display "")(let1 val (begin (receive (a b) (fxdiv0-and-mod0 -123 10) b)) (if (equal? '-3 val) (format #t " Running ~d/~d" 1332 1775) (add-error '(receive (a b) (fxdiv0-and-mod0 -123 10) b) '-3 val)))(display "")(let1 val (begin (receive (a b) (fxdiv0-and-mod0 -123 -10) a)) (if (equal? '12 val) (format #t " Running ~d/~d" 1333 1775) (add-error '(receive (a b) (fxdiv0-and-mod0 -123 -10) a) '12 val)))(display "")(let1 val (begin (receive (a b) (fxdiv0-and-mod0 -123 -10) b)) (if (equal? '-3 val) (format #t " Running ~d/~d" 1334 1775) (add-error '(receive (a b) (fxdiv0-and-mod0 -123 -10) b) '-3 val)))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv0-and-mod0 123 0))) (format #t " Running ~d/~d" 1335 1775) (add-error '(fxdiv0-and-mod0 123 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv0-and-mod0 123.000000 10.000000))) (format #t " Running ~d/~d" 1336 1775) (add-error '(fxdiv0-and-mod0 123.000000 10.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv0))) (format #t " Running ~d/~d" 1337 1775) (add-error '(fxdiv0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv0 123))) (format #t " Running ~d/~d" 1338 1775) (add-error '(fxdiv0 123) 'error val))(display "")(let1 val (begin (fxdiv0 123 10)) (if (equal? '12 val) (format #t " Running ~d/~d" 1339 1775) (begin (add-error '(fxdiv0 123 10) '12 val))))
(display "")(let1 val (begin (fxdiv0 123 -10)) (if (equal? '-12 val) (format #t " Running ~d/~d" 1340 1775) (begin (add-error '(fxdiv0 123 -10) '-12 val))))
(display "")(let1 val (begin (fxdiv0 -123 10)) (if (equal? '-12 val) (format #t " Running ~d/~d" 1341 1775) (begin (add-error '(fxdiv0 -123 10) '-12 val))))
(display "")(let1 val (begin (fxdiv0 -123 -10)) (if (equal? '12 val) (format #t " Running ~d/~d" 1342 1775) (begin (add-error '(fxdiv0 -123 -10) '12 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv0 123 0))) (format #t " Running ~d/~d" 1343 1775) (add-error '(fxdiv0 123 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxdiv0 123.000000 10.000000))) (format #t " Running ~d/~d" 1344 1775) (add-error '(fxdiv0 123.000000 10.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmod0))) (format #t " Running ~d/~d" 1345 1775) (add-error '(fxmod0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmod0 123))) (format #t " Running ~d/~d" 1346 1775) (add-error '(fxmod0 123) 'error val))(display "")(let1 val (begin (fxmod0 123 10)) (if (equal? '3 val) (format #t " Running ~d/~d" 1347 1775) (begin (add-error '(fxmod0 123 10) '3 val))))
(display "")(let1 val (begin (fxmod0 123 -10)) (if (equal? '3 val) (format #t " Running ~d/~d" 1348 1775) (begin (add-error '(fxmod0 123 -10) '3 val))))
(display "")(let1 val (begin (fxmod0 -123 10)) (if (equal? '-3 val) (format #t " Running ~d/~d" 1349 1775) (begin (add-error '(fxmod0 -123 10) '-3 val))))
(display "")(let1 val (begin (fxmod0 -123 -10)) (if (equal? '-3 val) (format #t " Running ~d/~d" 1350 1775) (begin (add-error '(fxmod0 -123 -10) '-3 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmod0 123 0))) (format #t " Running ~d/~d" 1351 1775) (add-error '(fxmod0 123 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxmod0 123.000000 10.000000))) (format #t " Running ~d/~d" 1352 1775) (add-error '(fxmod0 123.000000 10.000000) 'error val))(display "")(let1 val (begin (receive (a b) (fx+/carry (greatest-fixnum) (greatest-fixnum) 7) a)) (if (equal? '5 val) (format #t " Running ~d/~d" 1353 1775) (add-error '(receive (a b) (fx+/carry (greatest-fixnum) (greatest-fixnum) 7) a) '5 val)))(display "")(let1 val (begin (receive (a b) (fx+/carry (greatest-fixnum) (greatest-fixnum) 7) b)) (if (equal? '1 val) (format #t " Running ~d/~d" 1354 1775) (add-error '(receive (a b) (fx+/carry (greatest-fixnum) (greatest-fixnum) 7) b) '1 val)))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx+/carry 1.000000 2 3))) (format #t " Running ~d/~d" 1355 1775) (add-error '(fx+/carry 1.000000 2 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx+/carry 1 2+2i 3))) (format #t " Running ~d/~d" 1356 1775) (add-error '(fx+/carry 1 2+2i 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx+/carry 1 2 (/ 3 2)))) (format #t " Running ~d/~d" 1357 1775) (add-error '(fx+/carry 1 2 (/ 3 2)) 'error val))(display "")(let1 val (begin (receive (a b) (fx-/carry (least-fixnum) (greatest-fixnum) 6) a)) (if (equal? '-5 val) (format #t " Running ~d/~d" 1358 1775) (add-error '(receive (a b) (fx-/carry (least-fixnum) (greatest-fixnum) 6) a) '-5 val)))(display "")(let1 val (begin (receive (a b) (fx-/carry (least-fixnum) (greatest-fixnum) 6) b)) (if (equal? '-1 val) (format #t " Running ~d/~d" 1359 1775) (add-error '(receive (a b) (fx-/carry (least-fixnum) (greatest-fixnum) 6) b) '-1 val)))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx-/carry 1.000000 2 3))) (format #t " Running ~d/~d" 1360 1775) (add-error '(fx-/carry 1.000000 2 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx-/carry 1 2+2i 3))) (format #t " Running ~d/~d" 1361 1775) (add-error '(fx-/carry 1 2+2i 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx-/carry 1 2 (/ 3 2)))) (format #t " Running ~d/~d" 1362 1775) (add-error '(fx-/carry 1 2 (/ 3 2)) 'error val))(display "")(let1 val (begin (receive (a b) (fx*/carry 4 (greatest-fixnum) 7) a)) (if (equal? '3 val) (format #t " Running ~d/~d" 1363 1775) (add-error '(receive (a b) (fx*/carry 4 (greatest-fixnum) 7) a) '3 val)))(display "")(let1 val (begin (receive (a b) (fx*/carry 4 (greatest-fixnum) 7) b)) (if (equal? '2 val) (format #t " Running ~d/~d" 1364 1775) (add-error '(receive (a b) (fx*/carry 4 (greatest-fixnum) 7) b) '2 val)))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx*/carry 1.000000 2 3))) (format #t " Running ~d/~d" 1365 1775) (add-error '(fx*/carry 1.000000 2 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx*/carry 1 2+2i 3))) (format #t " Running ~d/~d" 1366 1775) (add-error '(fx*/carry 1 2+2i 3) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fx*/carry 1 2 (/ 3 2)))) (format #t " Running ~d/~d" 1367 1775) (add-error '(fx*/carry 1 2 (/ 3 2)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxnot))) (format #t " Running ~d/~d" 1368 1775) (add-error '(fxnot) 'error val))(display "")(let1 val (begin (fxnot 0)) (if (equal? '-1 val) (format #t " Running ~d/~d" 1369 1775) (begin (add-error '(fxnot 0) '-1 val))))
(display "")(let1 val (begin (fxnot -2)) (if (equal? '1 val) (format #t " Running ~d/~d" 1370 1775) (begin (add-error '(fxnot -2) '1 val))))
(display "")(let1 val (begin (fxnot 1)) (if (equal? '-2 val) (format #t " Running ~d/~d" 1371 1775) (begin (add-error '(fxnot 1) '-2 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxnot 1.000000))) (format #t " Running ~d/~d" 1372 1775) (add-error '(fxnot 1.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxnot 1 2))) (format #t " Running ~d/~d" 1373 1775) (add-error '(fxnot 1 2) 'error val))(display "")(let1 val (begin (fxand 7)) (if (equal? '7 val) (format #t " Running ~d/~d" 1374 1775) (begin (add-error '(fxand 7) '7 val))))
(display "")(let1 val (begin (fxand 7 0)) (if (equal? '0 val) (format #t " Running ~d/~d" 1375 1775) (begin (add-error '(fxand 7 0) '0 val))))
(display "")(let1 val (begin (fxand 7 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 1376 1775) (begin (add-error '(fxand 7 1) '1 val))))
(display "")(let1 val (begin (fxand 7 5)) (if (equal? '5 val) (format #t " Running ~d/~d" 1377 1775) (begin (add-error '(fxand 7 5) '5 val))))
(display "")(let1 val (begin (fxand 7 4 5)) (if (equal? '4 val) (format #t " Running ~d/~d" 1378 1775) (begin (add-error '(fxand 7 4 5) '4 val))))
(display "")(let1 val (begin (fxand 7 5 4)) (if (equal? '4 val) (format #t " Running ~d/~d" 1379 1775) (begin (add-error '(fxand 7 5 4) '4 val))))
(display "")(let1 val (begin (fx=? 4 (fxand (fxand) 7 5 4))) (if (equal? '#t val) (format #t " Running ~d/~d" 1380 1775) (begin (add-error '(fx=? 4 (fxand (fxand) 7 5 4)) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxand 7.000000))) (format #t " Running ~d/~d" 1381 1775) (add-error '(fxand 7.000000) 'error val))(display "")(let1 val (begin (fxior 7)) (if (equal? '7 val) (format #t " Running ~d/~d" 1382 1775) (begin (add-error '(fxior 7) '7 val))))
(display "")(let1 val (begin (fxior 7 0)) (if (equal? '7 val) (format #t " Running ~d/~d" 1383 1775) (begin (add-error '(fxior 7 0) '7 val))))
(display "")(let1 val (begin (fxior 5 4)) (if (equal? '5 val) (format #t " Running ~d/~d" 1384 1775) (begin (add-error '(fxior 5 4) '5 val))))
(display "")(let1 val (begin (fxior 5 3)) (if (equal? '7 val) (format #t " Running ~d/~d" 1385 1775) (begin (add-error '(fxior 5 3) '7 val))))
(display "")(let1 val (begin (fxior 5 3 32)) (if (equal? '39 val) (format #t " Running ~d/~d" 1386 1775) (begin (add-error '(fxior 5 3 32) '39 val))))
(display "")(let1 val (begin (fx=? 39 (fxior (fxior) 5 3 32))) (if (equal? '#t val) (format #t " Running ~d/~d" 1387 1775) (begin (add-error '(fx=? 39 (fxior (fxior) 5 3 32)) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxior 7.000000))) (format #t " Running ~d/~d" 1388 1775) (add-error '(fxior 7.000000) 'error val))(display "")(let1 val (begin (fxxor 7)) (if (equal? '7 val) (format #t " Running ~d/~d" 1389 1775) (begin (add-error '(fxxor 7) '7 val))))
(display "")(let1 val (begin (fxxor 7 0)) (if (equal? '7 val) (format #t " Running ~d/~d" 1390 1775) (begin (add-error '(fxxor 7 0) '7 val))))
(display "")(let1 val (begin (fxxor 5 4)) (if (equal? '1 val) (format #t " Running ~d/~d" 1391 1775) (begin (add-error '(fxxor 5 4) '1 val))))
(display "")(let1 val (begin (fxxor 5 3)) (if (equal? '6 val) (format #t " Running ~d/~d" 1392 1775) (begin (add-error '(fxxor 5 3) '6 val))))
(display "")(let1 val (begin (fxxor 5 1 32)) (if (equal? '36 val) (format #t " Running ~d/~d" 1393 1775) (begin (add-error '(fxxor 5 1 32) '36 val))))
(display "")(let1 val (begin (fx=? 36 (fxxor (fxxor) 5 1 32))) (if (equal? '#t val) (format #t " Running ~d/~d" 1394 1775) (begin (add-error '(fx=? 36 (fxxor (fxxor) 5 1 32)) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxxor 7.000000))) (format #t " Running ~d/~d" 1395 1775) (add-error '(fxxor 7.000000) 'error val))(display "")(let1 val (begin (fxif 5 15 0)) (if (equal? '5 val) (format #t " Running ~d/~d" 1396 1775) (begin (add-error '(fxif 5 15 0) '5 val))))
(display "")(let1 val (begin (fxif 5 0 15)) (if (equal? '10 val) (format #t " Running ~d/~d" 1397 1775) (begin (add-error '(fxif 5 0 15) '10 val))))
(display "")(let1 val (begin (fxif 5 0 1)) (if (equal? '0 val) (format #t " Running ~d/~d" 1398 1775) (begin (add-error '(fxif 5 0 1) '0 val))))
(display "")(let1 val (begin (fxif 5 0 3)) (if (equal? '2 val) (format #t " Running ~d/~d" 1399 1775) (begin (add-error '(fxif 5 0 3) '2 val))))
(display "")(let1 val (begin (fxif 5 3 0)) (if (equal? '1 val) (format #t " Running ~d/~d" 1400 1775) (begin (add-error '(fxif 5 3 0) '1 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxif 5 15))) (format #t " Running ~d/~d" 1401 1775) (add-error '(fxif 5 15) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxif 5 15 0.000000))) (format #t " Running ~d/~d" 1402 1775) (add-error '(fxif 5 15 0.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxbit-count))) (format #t " Running ~d/~d" 1403 1775) (add-error '(fxbit-count) 'error val))(display "")(let1 val (begin (fxbit-count 5)) (if (equal? '2 val) (format #t " Running ~d/~d" 1404 1775) (begin (add-error '(fxbit-count 5) '2 val))))
(display "")(let1 val (begin (fxbit-count 6)) (if (equal? '2 val) (format #t " Running ~d/~d" 1405 1775) (begin (add-error '(fxbit-count 6) '2 val))))
(display "")(let1 val (begin (fxbit-count 7)) (if (equal? '3 val) (format #t " Running ~d/~d" 1406 1775) (begin (add-error '(fxbit-count 7) '3 val))))
(display "")(let1 val (begin (fxbit-count -7)) (if (equal? '-3 val) (format #t " Running ~d/~d" 1407 1775) (begin (add-error '(fxbit-count -7) '-3 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxbit-count 5.000000))) (format #t " Running ~d/~d" 1408 1775) (add-error '(fxbit-count 5.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxlength))) (format #t " Running ~d/~d" 1409 1775) (add-error '(fxlength) 'error val))(display "")(let1 val (begin (fxlength 1)) (if (equal? '1 val) (format #t " Running ~d/~d" 1410 1775) (begin (add-error '(fxlength 1) '1 val))))
(display "")(let1 val (begin (fxlength 255)) (if (equal? '8 val) (format #t " Running ~d/~d" 1411 1775) (begin (add-error '(fxlength 255) '8 val))))
(display "")(let1 val (begin (fxlength 0)) (if (equal? '0 val) (format #t " Running ~d/~d" 1412 1775) (begin (add-error '(fxlength 0) '0 val))))
(display "")(let1 val (begin (fxlength -2)) (if (equal? '1 val) (format #t " Running ~d/~d" 1413 1775) (begin (add-error '(fxlength -2) '1 val))))
(display "")(let1 val (begin (fxlength -255)) (if (equal? '8 val) (format #t " Running ~d/~d" 1414 1775) (begin (add-error '(fxlength -255) '8 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxlength 1.000000))) (format #t " Running ~d/~d" 1415 1775) (add-error '(fxlength 1.000000) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxfirst-bit-set))) (format #t " Running ~d/~d" 1416 1775) (add-error '(fxfirst-bit-set) 'error val))(display "")(let1 val (begin (fxfirst-bit-set 0)) (if (equal? '-1 val) (format #t " Running ~d/~d" 1417 1775) (begin (add-error '(fxfirst-bit-set 0) '-1 val))))
(display "")(let1 val (begin (fxfirst-bit-set 1)) (if (equal? '0 val) (format #t " Running ~d/~d" 1418 1775) (begin (add-error '(fxfirst-bit-set 1) '0 val))))
(display "")(let1 val (begin (fxfirst-bit-set 16)) (if (equal? '4 val) (format #t " Running ~d/~d" 1419 1775) (begin (add-error '(fxfirst-bit-set 16) '4 val))))
(display "")(let1 val (begin (fxfirst-bit-set -2)) (if (equal? '1 val) (format #t " Running ~d/~d" 1420 1775) (begin (add-error '(fxfirst-bit-set -2) '1 val))))
(display "")(let1 val (begin (fxfirst-bit-set (expt 2 17))) (if (equal? '17 val) (format #t " Running ~d/~d" 1421 1775) (begin (add-error '(fxfirst-bit-set (expt 2 17)) '17 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxfirst-bit-set 4.000000))) (format #t " Running ~d/~d" 1422 1775) (add-error '(fxfirst-bit-set 4.000000) 'error val))(display "")(let1 val (begin (fxbit-set? 15 0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1423 1775) (begin (add-error '(fxbit-set? 15 0) '#t val))))
(display "")(let1 val (begin (fxbit-set? 14 0)) (if (equal? '#f val) (format #t " Running ~d/~d" 1424 1775) (begin (add-error '(fxbit-set? 14 0) '#f val))))
(display "")(let1 val (begin (fxbit-set? 14 3)) (if (equal? '#t val) (format #t " Running ~d/~d" 1425 1775) (begin (add-error '(fxbit-set? 14 3) '#t val))))
(display "")(let1 val (begin (fxbit-set? 14 10)) (if (equal? '#f val) (format #t " Running ~d/~d" 1426 1775) (begin (add-error '(fxbit-set? 14 10) '#f val))))
(display "")(let1 val (begin (fxbit-set? -1 10)) (if (equal? '#t val) (format #t " Running ~d/~d" 1427 1775) (begin (add-error '(fxbit-set? -1 10) '#t val))))
(display "")(let1 val (begin (fxbit-set? -1 (- (fixnum-width) 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1428 1775) (begin (add-error '(fxbit-set? -1 (- (fixnum-width) 1)) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (fxbit-set? -1 (fixnum-width)))) (format #t " Running ~d/~d" 1429 1775) (add-error '(fxbit-set? -1 (fixnum-width)) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (fxbit-set? 14 -3))) (format #t " Running ~d/~d" 1430 1775) (add-error '(fxbit-set? 14 -3) 'error val))(display "")(let1 val (begin 1) (if (equal? '1 val) (format #t " Running ~d/~d" 1431 1775) (begin (add-error '1 '1 val))))
(display "")(let1 val (begin 0) (if (equal? '0 val) (format #t " Running ~d/~d" 1432 1775) (begin (add-error '0 '0 val))))
(display "")(let1 val (begin 1) (if (equal? '1 val) (format #t " Running ~d/~d" 1433 1775) (begin (add-error '1 '1 val))))
(display "")(let1 val (begin 5) (if (equal? '5 val) (format #t " Running ~d/~d" 1434 1775) (begin (add-error '5 '5 val))))
(display "")(let1 val (begin 5) (if (equal? '5 val) (format #t " Running ~d/~d" 1435 1775) (begin (add-error '5 '5 val))))
(display "")(let1 val (begin (= (inexact 5) 5.000000)) (if (equal? '#t val) (format #t " Running ~d/~d" 1436 1775) (begin (add-error '(= (inexact 5) 5.000000) '#t val))))
(display "")(let1 val (begin -3) (if (equal? '-3 val) (format #t " Running ~d/~d" 1437 1775) (begin (add-error '-3 '-3 val))))
(display "")(let1 val (begin -3) (if (equal? '-3 val) (format #t " Running ~d/~d" 1438 1775) (begin (add-error '-3 '-3 val))))
(display "")(let1 val (begin (= (inexact -5) -5.000000)) (if (equal? '#t val) (format #t " Running ~d/~d" 1439 1775) (begin (add-error '(= (inexact -5) -5.000000) '#t val))))
(display "")(let1 val (begin (= (/ 3 2) 3/2)) (if (equal? '#t val) (format #t " Running ~d/~d" 1440 1775) (begin (add-error '(= (/ 3 2) 3/2) '#t val))))
(display "")(let1 val (begin (= 3+2i (make-rectangular 3 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 1441 1775) (begin (add-error '(= 3+2i (make-rectangular 3 2)) '#t val))))
(display "")(let1 val (begin (= 3-2i (make-rectangular 3 -2))) (if (equal? '#t val) (format #t " Running ~d/~d" 1442 1775) (begin (add-error '(= 3-2i (make-rectangular 3 -2)) '#t val))))
(display "")(let1 val (begin (= 3+1i (make-rectangular 3 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1443 1775) (begin (add-error '(= 3+1i (make-rectangular 3 1)) '#t val))))
(display "")(let1 val (begin (= +1i (make-rectangular 0 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1444 1775) (begin (add-error '(= +1i (make-rectangular 0 1)) '#t val))))
(display "")(let1 val (begin (= -1i (make-rectangular 0 -1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1445 1775) (begin (add-error '(= -1i (make-rectangular 0 -1)) '#t val))))
(display "")(let1 val (begin (and (nan? (imag-part 3+nan.0i)) (= 3 (real-part 3+nan.0i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1446 1775) (begin (add-error '(and (nan? (imag-part 3+nan.0i)) (= 3 (real-part 3+nan.0i))) '#t val))))
(display "")(let1 val (begin (and (nan? (imag-part +nan.0i)) (zero? (real-part +nan.0i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1447 1775) (begin (add-error '(and (nan? (imag-part +nan.0i)) (zero? (real-part +nan.0i))) '#t val))))
(display "")(let1 val (begin (almost=? (real-part 0.540302+0.841471i) (real-part 0.540302+0.841471i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1448 1775) (begin (add-error '(almost=? (real-part 0.540302+0.841471i) (real-part 0.540302+0.841471i)) '#t val))))
(display "")(let1 val (begin 1) (if (equal? '1 val) (format #t " Running ~d/~d" 1449 1775) (begin (add-error '1 '1 val))))
(display "")(let1 val (begin 0) (if (equal? '0 val) (format #t " Running ~d/~d" 1450 1775) (begin (add-error '0 '0 val))))
(display "")(let1 val (begin 1) (if (equal? '1 val) (format #t " Running ~d/~d" 1451 1775) (begin (add-error '1 '1 val))))
(display "")(let1 val (begin 65) (if (equal? '65 val) (format #t " Running ~d/~d" 1452 1775) (begin (add-error '65 '65 val))))
(display "")(let1 val (begin 65) (if (equal? '65 val) (format #t " Running ~d/~d" 1453 1775) (begin (add-error '65 '65 val))))
(display "")(let1 val (begin (= (inexact 65) 65.000000)) (if (equal? '#t val) (format #t " Running ~d/~d" 1454 1775) (begin (add-error '(= (inexact 65) 65.000000) '#t val))))
(display "")(let1 val (begin -9) (if (equal? '-9 val) (format #t " Running ~d/~d" 1455 1775) (begin (add-error '-9 '-9 val))))
(display "")(let1 val (begin -9) (if (equal? '-9 val) (format #t " Running ~d/~d" 1456 1775) (begin (add-error '-9 '-9 val))))
(display "")(let1 val (begin (= (inexact -65) -65.000000)) (if (equal? '#t val) (format #t " Running ~d/~d" 1457 1775) (begin (add-error '(= (inexact -65) -65.000000) '#t val))))
(display "")(let1 val (begin (= (/ 9 8) 9/8)) (if (equal? '#t val) (format #t " Running ~d/~d" 1458 1775) (begin (add-error '(= (/ 9 8) 9/8) '#t val))))
(display "")(let1 val (begin (= 9+8i (make-rectangular 9 8))) (if (equal? '#t val) (format #t " Running ~d/~d" 1459 1775) (begin (add-error '(= 9+8i (make-rectangular 9 8)) '#t val))))
(display "")(let1 val (begin (= 9-8i (make-rectangular 9 -8))) (if (equal? '#t val) (format #t " Running ~d/~d" 1460 1775) (begin (add-error '(= 9-8i (make-rectangular 9 -8)) '#t val))))
(display "")(let1 val (begin (= 9+1i (make-rectangular 9 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1461 1775) (begin (add-error '(= 9+1i (make-rectangular 9 1)) '#t val))))
(display "")(let1 val (begin (= +1i (make-rectangular 0 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1462 1775) (begin (add-error '(= +1i (make-rectangular 0 1)) '#t val))))
(display "")(let1 val (begin (= -1i (make-rectangular 0 -1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1463 1775) (begin (add-error '(= -1i (make-rectangular 0 -1)) '#t val))))
(display "")(let1 val (begin (and (nan? (imag-part 9+nan.0i)) (= 9 (real-part 9+nan.0i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1464 1775) (begin (add-error '(and (nan? (imag-part 9+nan.0i)) (= 9 (real-part 9+nan.0i))) '#t val))))
(display "")(let1 val (begin (and (nan? (imag-part +nan.0i)) (zero? (real-part +nan.0i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1465 1775) (begin (add-error '(and (nan? (imag-part +nan.0i)) (zero? (real-part +nan.0i))) '#t val))))
(display "")(let1 val (begin (almost=? (real-part 0.540302+0.841471i) (real-part 0.540302+0.841471i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1466 1775) (begin (add-error '(almost=? (real-part 0.540302+0.841471i) (real-part 0.540302+0.841471i)) '#t val))))
(display "")(let1 val (begin 101) (if (equal? '101 val) (format #t " Running ~d/~d" 1467 1775) (begin (add-error '101 '101 val))))
(display "")(let1 val (begin -101) (if (equal? '-101 val) (format #t " Running ~d/~d" 1468 1775) (begin (add-error '-101 '-101 val))))
(display "")(let1 val (begin -10000000000000001) (if (equal? '-10000000000000001 val) (format #t " Running ~d/~d" 1469 1775) (begin (add-error '-10000000000000001 '-10000000000000001 val))))
(display "")(let1 val (begin (nan? +nan.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1470 1775) (begin (add-error '(nan? +nan.0) '#t val))))
(display "")(let1 val (begin (infinite? +inf.0)) (if (equal? '#t val) (format #t " Running ~d/~d" 1471 1775) (begin (add-error '(infinite? +inf.0) '#t val))))
(display "")(let1 val (begin (/ 2 3)) (if (equal? '2/3 val) (format #t " Running ~d/~d" 1472 1775) (begin (add-error '(/ 2 3) '2/3 val))))
(display "")(let1 val (begin (almost=? 0.450000 (inexact 9/20))) (if (equal? '#t val) (format #t " Running ~d/~d" 1473 1775) (begin (add-error '(almost=? 0.450000 (inexact 9/20)) '#t val))))
(display "")(let1 val (begin (fl=? 0.450000 0.450000)) (if (equal? '#t val) (format #t " Running ~d/~d" 1474 1775) (begin (add-error '(fl=? 0.450000 0.450000) '#t val))))
(display "")(let1 val (begin 0.450000) (if (equal? '0.450000 val) (format #t " Running ~d/~d" 1475 1775) (begin (add-error '0.450000 '0.450000 val))))
(display "")(let1 val (begin (inexact 29/20)) (if (equal? '1.450000 val) (format #t " Running ~d/~d" 1476 1775) (begin (add-error '(inexact 29/20) '1.450000 val))))
(display "")(let1 val (begin (infinite? (imag-part +inf.0i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1477 1775) (begin (add-error '(infinite? (imag-part +inf.0i)) '#t val))))
(display "")(let1 val (begin (= 10+11i (make-rectangular 10 11))) (if (equal? '#t val) (format #t " Running ~d/~d" 1478 1775) (begin (add-error '(= 10+11i (make-rectangular 10 11)) '#t val))))
(display "")(let1 val (begin (= 10-11i (make-rectangular 10 -11))) (if (equal? '#t val) (format #t " Running ~d/~d" 1479 1775) (begin (add-error '(= 10-11i (make-rectangular 10 -11)) '#t val))))
(display "")(let1 val (begin (= 10+1i (make-rectangular 10 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1480 1775) (begin (add-error '(= 10+1i (make-rectangular 10 1)) '#t val))))
(display "")(let1 val (begin (= 10-1i (make-rectangular 10 -1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1481 1775) (begin (add-error '(= 10-1i (make-rectangular 10 -1)) '#t val))))
(display "")(let1 val (begin (= 3.100000+1i (make-rectangular 3.100000 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1482 1775) (begin (add-error '(= 3.100000+1i (make-rectangular 3.100000 1)) '#t val))))
(display "")(let1 val (begin (= 3.100000-1i (make-rectangular 3.100000 -1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1483 1775) (begin (add-error '(= 3.100000-1i (make-rectangular 3.100000 -1)) '#t val))))
(display "")(let1 val (begin (= +3.250000i (make-rectangular 0 3.250000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1484 1775) (begin (add-error '(= +3.250000i (make-rectangular 0 3.250000)) '#t val))))
(display "")(let1 val (begin (= -3.250000i (make-rectangular 0 -3.250000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1485 1775) (begin (add-error '(= -3.250000i (make-rectangular 0 -3.250000)) '#t val))))
(display "")(let1 val (begin (= +1i (make-rectangular 0 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1486 1775) (begin (add-error '(= +1i (make-rectangular 0 1)) '#t val))))
(display "")(let1 val (begin (= -1i (make-rectangular 0 -1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1487 1775) (begin (add-error '(= -1i (make-rectangular 0 -1)) '#t val))))
(display "")(let1 val (begin (nan? (imag-part 10+nan.0i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1488 1775) (begin (add-error '(nan? (imag-part 10+nan.0i)) '#t val))))
(display "")(let1 val (begin (real-part 10+nan.0i)) (if (equal? '10 val) (format #t " Running ~d/~d" 1489 1775) (begin (add-error '(real-part 10+nan.0i) '10 val))))
(display "")(let1 val (begin (nan? (imag-part 10+nan.0i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1490 1775) (begin (add-error '(nan? (imag-part 10+nan.0i)) '#t val))))
(display "")(let1 val (begin (real-part 10+nan.0i)) (if (equal? '10 val) (format #t " Running ~d/~d" 1491 1775) (begin (add-error '(real-part 10+nan.0i) '10 val))))
(display "")(let1 val (begin (nan? (imag-part +nan.0i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1492 1775) (begin (add-error '(nan? (imag-part +nan.0i)) '#t val))))
(display "")(let1 val (begin (real-part +nan.0i)) (if (equal? '0 val) (format #t " Running ~d/~d" 1493 1775) (begin (add-error '(real-part +nan.0i) '0 val))))
(display "")(let1 val (begin (nan? (imag-part +nan.0i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1494 1775) (begin (add-error '(nan? (imag-part +nan.0i)) '#t val))))
(display "")(let1 val (begin (real-part +nan.0i)) (if (equal? '0 val) (format #t " Running ~d/~d" 1495 1775) (begin (add-error '(real-part +nan.0i) '0 val))))
(display "")(let1 val (begin (nan? (imag-part 10.000000+nan.0i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1496 1775) (begin (add-error '(nan? (imag-part 10.000000+nan.0i)) '#t val))))
(display "")(let1 val (begin (real-part 10.000000+nan.0i)) (if (equal? '10.000000 val) (format #t " Running ~d/~d" 1497 1775) (begin (add-error '(real-part 10.000000+nan.0i) '10.000000 val))))
(display "")(let1 val (begin 320.000000) (if (equal? '320.000000 val) (format #t " Running ~d/~d" 1498 1775) (begin (add-error '320.000000 '320.000000 val))))
(display "")(let1 val (begin 0.320000) (if (equal? '0.320000 val) (format #t " Running ~d/~d" 1499 1775) (begin (add-error '0.320000 '0.320000 val))))
(display "")(let1 val (begin 20.000000) (if (equal? '20.000000 val) (format #t " Running ~d/~d" 1500 1775) (begin (add-error '20.000000 '20.000000 val))))
(display "")(let1 val (begin 0.020000) (if (equal? '0.020000 val) (format #t " Running ~d/~d" 1501 1775) (begin (add-error '0.020000 '0.020000 val))))
(display "")(let1 val (begin 50) (if (equal? '50 val) (format #t " Running ~d/~d" 1502 1775) (begin (add-error '50 '50 val))))
(display "")(let1 val (begin 500000000000) (if (equal? '500000000000 val) (format #t " Running ~d/~d" 1503 1775) (begin (add-error '500000000000 '500000000000 val))))
(display "")(let1 val (begin (format "~a" +1i)) (if (equal? '"+1i" val) (format #t " Running ~d/~d" 1504 1775) (begin (add-error '(format "~a" +1i) '"+1i" val))))
(display "")(let1 val (begin (format "~a" -1i)) (if (equal? '"-1i" val) (format #t " Running ~d/~d" 1505 1775) (begin (add-error '(format "~a" -1i) '"-1i" val))))
(display "")(let1 val (begin (format "~a" 1)) (if (equal? '"1" val) (format #t " Running ~d/~d" 1506 1775) (begin (add-error '(format "~a" 1) '"1" val))))
(display "")(let1 val (begin (format "~a" 1)) (if (equal? '"1" val) (format #t " Running ~d/~d" 1507 1775) (begin (add-error '(format "~a" 1) '"1" val))))
(display "")(let1 val (begin (format "~a" +1i)) (if (equal? '"+1i" val) (format #t " Running ~d/~d" 1508 1775) (begin (add-error '(format "~a" +1i) '"+1i" val))))
(display "")(let1 val (begin (format "~a" +inf.0i)) (if (equal? '"+inf.0i" val) (format #t " Running ~d/~d" 1509 1775) (begin (add-error '(format "~a" +inf.0i) '"+inf.0i" val))))
(display "")(let1 val (begin (almost=? 1 (real-part 1.000342+1.731853i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1510 1775) (begin (add-error '(almost=? 1 (real-part 1.000342+1.731853i)) '#t val))))
(display "")(let1 val (begin (almost=? -1 (real-part -0.999835+1.732146i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1511 1775) (begin (add-error '(almost=? -1 (real-part -0.999835+1.732146i)) '#t val))))
(display "")(let1 val (begin 1) (if (equal? '1 val) (format #t " Running ~d/~d" 1512 1775) (begin (add-error '1 '1 val))))
(display "")(let1 val (begin 0) (if (equal? '0 val) (format #t " Running ~d/~d" 1513 1775) (begin (add-error '0 '0 val))))
(display "")(let1 val (begin 1) (if (equal? '1 val) (format #t " Running ~d/~d" 1514 1775) (begin (add-error '1 '1 val))))
(display "")(let1 val (begin 257) (if (equal? '257 val) (format #t " Running ~d/~d" 1515 1775) (begin (add-error '257 '257 val))))
(display "")(let1 val (begin 257) (if (equal? '257 val) (format #t " Running ~d/~d" 1516 1775) (begin (add-error '257 '257 val))))
(display "")(let1 val (begin (= (inexact 257) 257.000000)) (if (equal? '#t val) (format #t " Running ~d/~d" 1517 1775) (begin (add-error '(= (inexact 257) 257.000000) '#t val))))
(display "")(let1 val (begin -17) (if (equal? '-17 val) (format #t " Running ~d/~d" 1518 1775) (begin (add-error '-17 '-17 val))))
(display "")(let1 val (begin -17) (if (equal? '-17 val) (format #t " Running ~d/~d" 1519 1775) (begin (add-error '-17 '-17 val))))
(display "")(let1 val (begin (= (inexact -257) -257.000000)) (if (equal? '#t val) (format #t " Running ~d/~d" 1520 1775) (begin (add-error '(= (inexact -257) -257.000000) '#t val))))
(display "")(let1 val (begin (= (/ 17 16) 17/16)) (if (equal? '#t val) (format #t " Running ~d/~d" 1521 1775) (begin (add-error '(= (/ 17 16) 17/16) '#t val))))
(display "")(let1 val (begin (= 17+16i (make-rectangular 17 16))) (if (equal? '#t val) (format #t " Running ~d/~d" 1522 1775) (begin (add-error '(= 17+16i (make-rectangular 17 16)) '#t val))))
(display "")(let1 val (begin (= 17-16i (make-rectangular 17 -16))) (if (equal? '#t val) (format #t " Running ~d/~d" 1523 1775) (begin (add-error '(= 17-16i (make-rectangular 17 -16)) '#t val))))
(display "")(let1 val (begin (= 17+1i (make-rectangular 17 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1524 1775) (begin (add-error '(= 17+1i (make-rectangular 17 1)) '#t val))))
(display "")(let1 val (begin (= +1i (make-rectangular 0 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1525 1775) (begin (add-error '(= +1i (make-rectangular 0 1)) '#t val))))
(display "")(let1 val (begin (= -1i (make-rectangular 0 -1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1526 1775) (begin (add-error '(= -1i (make-rectangular 0 -1)) '#t val))))
(display "")(let1 val (begin (and (nan? (imag-part 17+nan.0i)) (= 17 (real-part 17+nan.0i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1527 1775) (begin (add-error '(and (nan? (imag-part 17+nan.0i)) (= 17 (real-part 17+nan.0i))) '#t val))))
(display "")(let1 val (begin (and (nan? (imag-part +nan.0i)) (zero? (real-part +nan.0i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1528 1775) (begin (add-error '(and (nan? (imag-part +nan.0i)) (zero? (real-part +nan.0i))) '#t val))))
(display "")(let1 val (begin (almost=? (real-part 0.540302+0.841471i) (real-part 0.540302+0.841471i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1529 1775) (begin (add-error '(almost=? (real-part 0.540302+0.841471i) (real-part 0.540302+0.841471i)) '#t val))))
(display "")(let1 val (begin (even? 2)) (if (equal? '#t val) (format #t " Running ~d/~d" 1530 1775) (begin (add-error '(even? 2) '#t val))))
(display "")(let1 val (begin (even? 100000000000000000000000000000000000000000000000)) (if (equal? '#t val) (format #t " Running ~d/~d" 1531 1775) (begin (add-error '(even? 100000000000000000000000000000000000000000000000) '#t val))))
(display "")(let1 val (begin (even? 4)) (if (equal? '#t val) (format #t " Running ~d/~d" 1532 1775) (begin (add-error '(even? 4) '#t val))))
(display "")(let1 val (begin (even? 4.000000)) (if (equal? '#t val) (format #t " Running ~d/~d" 1533 1775) (begin (add-error '(even? 4.000000) '#t val))))
(display "")(let1 val (begin (odd? 2)) (if (equal? '#f val) (format #t " Running ~d/~d" 1534 1775) (begin (add-error '(odd? 2) '#f val))))
(display "")(let1 val (begin (odd? 100000000000000000000000000000000000000000000000)) (if (equal? '#f val) (format #t " Running ~d/~d" 1535 1775) (begin (add-error '(odd? 100000000000000000000000000000000000000000000000) '#f val))))
(display "")(let1 val (begin (odd? 4)) (if (equal? '#f val) (format #t " Running ~d/~d" 1536 1775) (begin (add-error '(odd? 4) '#f val))))
(display "")(let1 val (begin (odd? 4.000000)) (if (equal? '#f val) (format #t " Running ~d/~d" 1537 1775) (begin (add-error '(odd? 4.000000) '#f val))))
(display "")(let1 val (begin (apply + '(3333333333333333333333333333333333333))) (if (equal? '3333333333333333333333333333333333333 val) (format #t " Running ~d/~d" 1538 1775) (begin (add-error '(apply + '(3333333333333333333333333333333333333)) '3333333333333333333333333333333333333 val))))
(display "")(let1 val (begin (+ 3+1i 1+4i)) (if (equal? '4+5i val) (format #t " Running ~d/~d" 1539 1775) (begin (add-error '(+ 3+1i 1+4i) '4+5i val))))
(display "")(let1 val (begin (almost=? 3.450000 (+ 3.000000 0.450000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1540 1775) (begin (add-error '(almost=? 3.450000 (+ 3.000000 0.450000)) '#t val))))
(display "")(let1 val (begin (+ 1/2 1/2)) (if (equal? '1 val) (format #t " Running ~d/~d" 1541 1775) (begin (add-error '(+ 1/2 1/2) '1 val))))
(display "")(let1 val (begin (+ 1/3 1/3)) (if (equal? '2/3 val) (format #t " Running ~d/~d" 1542 1775) (begin (add-error '(+ 1/3 1/3) '2/3 val))))
(display "")(let1 val (begin (apply - '(3333333333333333333333333333333333333))) (if (equal? '-3333333333333333333333333333333333333 val) (format #t " Running ~d/~d" 1543 1775) (begin (add-error '(apply - '(3333333333333333333333333333333333333)) '-3333333333333333333333333333333333333 val))))
(display "")(let1 val (begin (- 3+1i 1+4i)) (if (equal? '2-3i val) (format #t " Running ~d/~d" 1544 1775) (begin (add-error '(- 3+1i 1+4i) '2-3i val))))
(display "")(let1 val (begin (almost=? 2.550000 (- 3.000000 0.450000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1545 1775) (begin (add-error '(almost=? 2.550000 (- 3.000000 0.450000)) '#t val))))
(display "")(let1 val (begin (- 1/2 1/2)) (if (equal? '0 val) (format #t " Running ~d/~d" 1546 1775) (begin (add-error '(- 1/2 1/2) '0 val))))
(display "")(let1 val (begin (- 2/3 1/3)) (if (equal? '1/3 val) (format #t " Running ~d/~d" 1547 1775) (begin (add-error '(- 2/3 1/3) '1/3 val))))
(display "")(let1 val (begin (apply / '(3333333333333333333333333333333333333))) (if (equal? '1/3333333333333333333333333333333333333 val) (format #t " Running ~d/~d" 1548 1775) (begin (add-error '(apply / '(3333333333333333333333333333333333333)) '1/3333333333333333333333333333333333333 val))))
(display "")(let1 val (begin (/ 3333333333333333333333333333333333333)) (if (equal? '1/3333333333333333333333333333333333333 val) (format #t " Running ~d/~d" 1549 1775) (begin (add-error '(/ 3333333333333333333333333333333333333) '1/3333333333333333333333333333333333333 val))))
(display "")(let1 val (begin (/ 3+1i 1+4i)) (if (equal? '7/17-11/17i val) (format #t " Running ~d/~d" 1550 1775) (begin (add-error '(/ 3+1i 1+4i) '7/17-11/17i val))))
(display "")(let1 val (begin (almost=? 6.666660 (/ 3.000000 0.450000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1551 1775) (begin (add-error '(almost=? 6.666660 (/ 3.000000 0.450000)) '#t val))))
(display "")(let1 val (begin (/ 1/2 1/2)) (if (equal? '1 val) (format #t " Running ~d/~d" 1552 1775) (begin (add-error '(/ 1/2 1/2) '1 val))))
(display "")(let1 val (begin (/ 2/3 1/3)) (if (equal? '2 val) (format #t " Running ~d/~d" 1553 1775) (begin (add-error '(/ 2/3 1/3) '2 val))))
(display "")(let1 val (begin (abs -7)) (if (equal? '7 val) (format #t " Running ~d/~d" 1554 1775) (begin (add-error '(abs -7) '7 val))))
(display "")(let1 val (begin (abs -inf.0)) (if (equal? '+inf.0 val) (format #t " Running ~d/~d" 1555 1775) (begin (add-error '(abs -inf.0) '+inf.0 val))))
(display "")(let1 val (begin (abs -33333333333333333333)) (if (equal? '33333333333333333333 val) (format #t " Running ~d/~d" 1556 1775) (begin (add-error '(abs -33333333333333333333) '33333333333333333333 val))))
(display "")(let1 val (begin (abs -0.350000)) (if (equal? '0.350000 val) (format #t " Running ~d/~d" 1557 1775) (begin (add-error '(abs -0.350000) '0.350000 val))))
(display "")(let1 val (begin (div 1000000000000000000 3)) (if (equal? '333333333333333333 val) (format #t " Running ~d/~d" 1558 1775) (begin (add-error '(div 1000000000000000000 3) '333333333333333333 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (div 10 0))) (format #t " Running ~d/~d" 1559 1775) (add-error '(div 10 0) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (div +inf.0 1))) (format #t " Running ~d/~d" 1560 1775) (add-error '(div +inf.0 1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (div -inf.0 1))) (format #t " Running ~d/~d" 1561 1775) (add-error '(div -inf.0 1) 'error val))(display "")(if (equal? 'error (guard (con (#t 'error)) (div +nan.0 1))) (format #t " Running ~d/~d" 1562 1775) (add-error '(div +nan.0 1) 'error val))(display "")(let1 val (begin (div 13.900000 3.500000)) (if (equal? '3.000000 val) (format #t " Running ~d/~d" 1563 1775) (begin (add-error '(div 13.900000 3.500000) '3.000000 val))))
(display "")(let1 val (begin (almost=? 3.400000 (mod 13.900000 3.500000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1564 1775) (begin (add-error '(almost=? 3.400000 (mod 13.900000 3.500000)) '#t val))))
(display "")(let1 val (begin (div0 13.900000 3.500000)) (if (equal? '4.000000 val) (format #t " Running ~d/~d" 1565 1775) (begin (add-error '(div0 13.900000 3.500000) '4.000000 val))))
(display "")(let1 val (begin (almost=? -0.100000 (mod0 13.900000 3.500000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1566 1775) (begin (add-error '(almost=? -0.100000 (mod0 13.900000 3.500000)) '#t val))))
(display "")(let1 val (begin (div 13.900000 -3.500000)) (if (equal? '-3.000000 val) (format #t " Running ~d/~d" 1567 1775) (begin (add-error '(div 13.900000 -3.500000) '-3.000000 val))))
(display "")(let1 val (begin (almost=? 3.400000 (mod 13.900000 -3.500000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1568 1775) (begin (add-error '(almost=? 3.400000 (mod 13.900000 -3.500000)) '#t val))))
(display "")(let1 val (begin (div0 13.900000 -3.500000)) (if (equal? '-4.000000 val) (format #t " Running ~d/~d" 1569 1775) (begin (add-error '(div0 13.900000 -3.500000) '-4.000000 val))))
(display "")(let1 val (begin (almost=? -0.100000 (mod0 13.900000 -3.500000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1570 1775) (begin (add-error '(almost=? -0.100000 (mod0 13.900000 -3.500000)) '#t val))))
(display "")(let1 val (begin (div -13.900000 -3.500000)) (if (equal? '4.000000 val) (format #t " Running ~d/~d" 1571 1775) (begin (add-error '(div -13.900000 -3.500000) '4.000000 val))))
(display "")(let1 val (begin (almost=? 0.100000 (mod -13.900000 -3.500000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1572 1775) (begin (add-error '(almost=? 0.100000 (mod -13.900000 -3.500000)) '#t val))))
(display "")(let1 val (begin (div0 -13.900000 -3.500000)) (if (equal? '4.000000 val) (format #t " Running ~d/~d" 1573 1775) (begin (add-error '(div0 -13.900000 -3.500000) '4.000000 val))))
(display "")(let1 val (begin (almost=? 0.100000 (mod0 -13.900000 -3.500000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1574 1775) (begin (add-error '(almost=? 0.100000 (mod0 -13.900000 -3.500000)) '#t val))))
(display "")(let1 val (begin (div -13.900000 3.500000)) (if (equal? '-4.000000 val) (format #t " Running ~d/~d" 1575 1775) (begin (add-error '(div -13.900000 3.500000) '-4.000000 val))))
(display "")(let1 val (begin (almost=? 0.100000 (mod -13.900000 3.500000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1576 1775) (begin (add-error '(almost=? 0.100000 (mod -13.900000 3.500000)) '#t val))))
(display "")(let1 val (begin (div0 -13.900000 3.500000)) (if (equal? '-4.000000 val) (format #t " Running ~d/~d" 1577 1775) (begin (add-error '(div0 -13.900000 3.500000) '-4.000000 val))))
(display "")(let1 val (begin (almost=? 0.100000 (mod0 -13.900000 3.500000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1578 1775) (begin (add-error '(almost=? 0.100000 (mod0 -13.900000 3.500000)) '#t val))))
(display "")(let1 val (begin (div 13900000000000000000000 3500000000000000000000)) (if (equal? '3 val) (format #t " Running ~d/~d" 1579 1775) (begin (add-error '(div 13900000000000000000000 3500000000000000000000) '3 val))))
(display "")(let1 val (begin (mod 13900000000000000000000 3500000000000000000000)) (if (equal? '3400000000000000000000 val) (format #t " Running ~d/~d" 1580 1775) (begin (add-error '(mod 13900000000000000000000 3500000000000000000000) '3400000000000000000000 val))))
(display "")(let1 val (begin (div0 13900000000000000000000 3500000000000000000000)) (if (equal? '4 val) (format #t " Running ~d/~d" 1581 1775) (begin (add-error '(div0 13900000000000000000000 3500000000000000000000) '4 val))))
(display "")(let1 val (begin (mod0 13900000000000000000000 3500000000000000000000)) (if (equal? '-100000000000000000000 val) (format #t " Running ~d/~d" 1582 1775) (begin (add-error '(mod0 13900000000000000000000 3500000000000000000000) '-100000000000000000000 val))))
(display "")(let1 val (begin (div 13900000000000000000000 -3500000000000000000000)) (if (equal? '-3 val) (format #t " Running ~d/~d" 1583 1775) (begin (add-error '(div 13900000000000000000000 -3500000000000000000000) '-3 val))))
(display "")(let1 val (begin (mod 13900000000000000000000 -3500000000000000000000)) (if (equal? '3400000000000000000000 val) (format #t " Running ~d/~d" 1584 1775) (begin (add-error '(mod 13900000000000000000000 -3500000000000000000000) '3400000000000000000000 val))))
(display "")(let1 val (begin (div0 13900000000000000000000 -3500000000000000000000)) (if (equal? '-4 val) (format #t " Running ~d/~d" 1585 1775) (begin (add-error '(div0 13900000000000000000000 -3500000000000000000000) '-4 val))))
(display "")(let1 val (begin (mod0 13900000000000000000000 -3500000000000000000000)) (if (equal? '-100000000000000000000 val) (format #t " Running ~d/~d" 1586 1775) (begin (add-error '(mod0 13900000000000000000000 -3500000000000000000000) '-100000000000000000000 val))))
(display "")(let1 val (begin (div -13900000000000000000000 -3500000000000000000000)) (if (equal? '4 val) (format #t " Running ~d/~d" 1587 1775) (begin (add-error '(div -13900000000000000000000 -3500000000000000000000) '4 val))))
(display "")(let1 val (begin (mod -13900000000000000000000 -3500000000000000000000)) (if (equal? '100000000000000000000 val) (format #t " Running ~d/~d" 1588 1775) (begin (add-error '(mod -13900000000000000000000 -3500000000000000000000) '100000000000000000000 val))))
(display "")(let1 val (begin (div0 -13900000000000000000000 -3500000000000000000000)) (if (equal? '4 val) (format #t " Running ~d/~d" 1589 1775) (begin (add-error '(div0 -13900000000000000000000 -3500000000000000000000) '4 val))))
(display "")(let1 val (begin (mod0 -13900000000000000000000 -3500000000000000000000)) (if (equal? '100000000000000000000 val) (format #t " Running ~d/~d" 1590 1775) (begin (add-error '(mod0 -13900000000000000000000 -3500000000000000000000) '100000000000000000000 val))))
(display "")(let1 val (begin (div -13900000000000000000000 3500000000000000000000)) (if (equal? '-4 val) (format #t " Running ~d/~d" 1591 1775) (begin (add-error '(div -13900000000000000000000 3500000000000000000000) '-4 val))))
(display "")(let1 val (begin (mod -13900000000000000000000 3500000000000000000000)) (if (equal? '100000000000000000000 val) (format #t " Running ~d/~d" 1592 1775) (begin (add-error '(mod -13900000000000000000000 3500000000000000000000) '100000000000000000000 val))))
(display "")(let1 val (begin (div0 -13900000000000000000000 3500000000000000000000)) (if (equal? '-4 val) (format #t " Running ~d/~d" 1593 1775) (begin (add-error '(div0 -13900000000000000000000 3500000000000000000000) '-4 val))))
(display "")(let1 val (begin (mod0 -13900000000000000000000 3500000000000000000000)) (if (equal? '100000000000000000000 val) (format #t " Running ~d/~d" 1594 1775) (begin (add-error '(mod0 -13900000000000000000000 3500000000000000000000) '100000000000000000000 val))))
(display "")(let1 val (begin (div 13900 3500)) (if (equal? '3 val) (format #t " Running ~d/~d" 1595 1775) (begin (add-error '(div 13900 3500) '3 val))))
(display "")(let1 val (begin (mod 13900 3500)) (if (equal? '3400 val) (format #t " Running ~d/~d" 1596 1775) (begin (add-error '(mod 13900 3500) '3400 val))))
(display "")(let1 val (begin (div0 13900 3500)) (if (equal? '4 val) (format #t " Running ~d/~d" 1597 1775) (begin (add-error '(div0 13900 3500) '4 val))))
(display "")(let1 val (begin (mod0 13900 3500)) (if (equal? '-100 val) (format #t " Running ~d/~d" 1598 1775) (begin (add-error '(mod0 13900 3500) '-100 val))))
(display "")(let1 val (begin (div 13900 -3500)) (if (equal? '-3 val) (format #t " Running ~d/~d" 1599 1775) (begin (add-error '(div 13900 -3500) '-3 val))))
(display "")(let1 val (begin (mod 13900 -3500)) (if (equal? '3400 val) (format #t " Running ~d/~d" 1600 1775) (begin (add-error '(mod 13900 -3500) '3400 val))))
(display "")(let1 val (begin (div0 13900 -3500)) (if (equal? '-4 val) (format #t " Running ~d/~d" 1601 1775) (begin (add-error '(div0 13900 -3500) '-4 val))))
(display "")(let1 val (begin (mod0 13900 -3500)) (if (equal? '-100 val) (format #t " Running ~d/~d" 1602 1775) (begin (add-error '(mod0 13900 -3500) '-100 val))))
(display "")(let1 val (begin (div -13900 -3500)) (if (equal? '4 val) (format #t " Running ~d/~d" 1603 1775) (begin (add-error '(div -13900 -3500) '4 val))))
(display "")(let1 val (begin (mod -13900 -3500)) (if (equal? '100 val) (format #t " Running ~d/~d" 1604 1775) (begin (add-error '(mod -13900 -3500) '100 val))))
(display "")(let1 val (begin (div0 -13900 -3500)) (if (equal? '4 val) (format #t " Running ~d/~d" 1605 1775) (begin (add-error '(div0 -13900 -3500) '4 val))))
(display "")(let1 val (begin (mod0 -13900 -3500)) (if (equal? '100 val) (format #t " Running ~d/~d" 1606 1775) (begin (add-error '(mod0 -13900 -3500) '100 val))))
(display "")(let1 val (begin (div -13900 3500)) (if (equal? '-4 val) (format #t " Running ~d/~d" 1607 1775) (begin (add-error '(div -13900 3500) '-4 val))))
(display "")(let1 val (begin (mod -13900 3500)) (if (equal? '100 val) (format #t " Running ~d/~d" 1608 1775) (begin (add-error '(mod -13900 3500) '100 val))))
(display "")(let1 val (begin (div0 -13900 3500)) (if (equal? '-4 val) (format #t " Running ~d/~d" 1609 1775) (begin (add-error '(div0 -13900 3500) '-4 val))))
(display "")(let1 val (begin (mod0 -13900 3500)) (if (equal? '100 val) (format #t " Running ~d/~d" 1610 1775) (begin (add-error '(mod0 -13900 3500) '100 val))))
(display "")(let1 val (begin (div 139/10 7/2)) (if (equal? '3 val) (format #t " Running ~d/~d" 1611 1775) (begin (add-error '(div 139/10 7/2) '3 val))))
(display "")(let1 val (begin (mod 139/10 7/2)) (if (equal? '17/5 val) (format #t " Running ~d/~d" 1612 1775) (begin (add-error '(mod 139/10 7/2) '17/5 val))))
(display "")(let1 val (begin (div0 139/10 7/2)) (if (equal? '4 val) (format #t " Running ~d/~d" 1613 1775) (begin (add-error '(div0 139/10 7/2) '4 val))))
(display "")(let1 val (begin (mod0 139/10 7/2)) (if (equal? '-1/10 val) (format #t " Running ~d/~d" 1614 1775) (begin (add-error '(mod0 139/10 7/2) '-1/10 val))))
(display "")(let1 val (begin (div 139/10 -7/2)) (if (equal? '-3 val) (format #t " Running ~d/~d" 1615 1775) (begin (add-error '(div 139/10 -7/2) '-3 val))))
(display "")(let1 val (begin (mod 139/10 -7/2)) (if (equal? '17/5 val) (format #t " Running ~d/~d" 1616 1775) (begin (add-error '(mod 139/10 -7/2) '17/5 val))))
(display "")(let1 val (begin (div0 139/10 -7/2)) (if (equal? '-4 val) (format #t " Running ~d/~d" 1617 1775) (begin (add-error '(div0 139/10 -7/2) '-4 val))))
(display "")(let1 val (begin (mod0 139/10 -7/2)) (if (equal? '-1/10 val) (format #t " Running ~d/~d" 1618 1775) (begin (add-error '(mod0 139/10 -7/2) '-1/10 val))))
(display "")(let1 val (begin (div -139/10 -7/2)) (if (equal? '4 val) (format #t " Running ~d/~d" 1619 1775) (begin (add-error '(div -139/10 -7/2) '4 val))))
(display "")(let1 val (begin (mod -139/10 -7/2)) (if (equal? '1/10 val) (format #t " Running ~d/~d" 1620 1775) (begin (add-error '(mod -139/10 -7/2) '1/10 val))))
(display "")(let1 val (begin (div0 -139/10 -7/2)) (if (equal? '4 val) (format #t " Running ~d/~d" 1621 1775) (begin (add-error '(div0 -139/10 -7/2) '4 val))))
(display "")(let1 val (begin (mod0 -139/10 -7/2)) (if (equal? '1/10 val) (format #t " Running ~d/~d" 1622 1775) (begin (add-error '(mod0 -139/10 -7/2) '1/10 val))))
(display "")(let1 val (begin (div -139/10 7/2)) (if (equal? '-4 val) (format #t " Running ~d/~d" 1623 1775) (begin (add-error '(div -139/10 7/2) '-4 val))))
(display "")(let1 val (begin (mod -139/10 7/2)) (if (equal? '1/10 val) (format #t " Running ~d/~d" 1624 1775) (begin (add-error '(mod -139/10 7/2) '1/10 val))))
(display "")(let1 val (begin (div0 -139/10 7/2)) (if (equal? '-4 val) (format #t " Running ~d/~d" 1625 1775) (begin (add-error '(div0 -139/10 7/2) '-4 val))))
(display "")(let1 val (begin (mod0 -139/10 7/2)) (if (equal? '1/10 val) (format #t " Running ~d/~d" 1626 1775) (begin (add-error '(mod0 -139/10 7/2) '1/10 val))))
(display "")(let1 val (begin (gcd 32 -36)) (if (equal? '4 val) (format #t " Running ~d/~d" 1627 1775) (begin (add-error '(gcd 32 -36) '4 val))))
(display "")(let1 val (begin (gcd)) (if (equal? '0 val) (format #t " Running ~d/~d" 1628 1775) (begin (add-error '(gcd) '0 val))))
(display "")(let1 val (begin (gcd -10)) (if (equal? '10 val) (format #t " Running ~d/~d" 1629 1775) (begin (add-error '(gcd -10) '10 val))))
(display "")(let1 val (begin (flonum? (gcd 9.000000 3))) (if (equal? '#t val) (format #t " Running ~d/~d" 1630 1775) (begin (add-error '(flonum? (gcd 9.000000 3)) '#t val))))
(display "")(let1 val (begin (lcm 32 -36)) (if (equal? '288 val) (format #t " Running ~d/~d" 1631 1775) (begin (add-error '(lcm 32 -36) '288 val))))
(display "")(let1 val (begin (lcm 32.000000 -36)) (if (equal? '288.000000 val) (format #t " Running ~d/~d" 1632 1775) (begin (add-error '(lcm 32.000000 -36) '288.000000 val))))
(display "")(let1 val (begin (lcm)) (if (equal? '1 val) (format #t " Running ~d/~d" 1633 1775) (begin (add-error '(lcm) '1 val))))
(display "")(let1 val (begin (numerator (/ 6 4))) (if (equal? '3 val) (format #t " Running ~d/~d" 1634 1775) (begin (add-error '(numerator (/ 6 4)) '3 val))))
(display "")(let1 val (begin (denominator (/ 6 4))) (if (equal? '2 val) (format #t " Running ~d/~d" 1635 1775) (begin (add-error '(denominator (/ 6 4)) '2 val))))
(display "")(let1 val (begin (denominator (inexact (/ 6 4)))) (if (equal? '2.000000 val) (format #t " Running ~d/~d" 1636 1775) (begin (add-error '(denominator (inexact (/ 6 4))) '2.000000 val))))
(display "")(let1 val (begin (floor -4.300000)) (if (equal? '-5.000000 val) (format #t " Running ~d/~d" 1637 1775) (begin (add-error '(floor -4.300000) '-5.000000 val))))
(display "")(let1 val (begin (ceiling -4.300000)) (if (equal? '-4.000000 val) (format #t " Running ~d/~d" 1638 1775) (begin (add-error '(ceiling -4.300000) '-4.000000 val))))
(display "")(let1 val (begin (truncate -4.300000)) (if (equal? '-4.000000 val) (format #t " Running ~d/~d" 1639 1775) (begin (add-error '(truncate -4.300000) '-4.000000 val))))
(display "")(let1 val (begin (round -4.300000)) (if (equal? '-4.000000 val) (format #t " Running ~d/~d" 1640 1775) (begin (add-error '(round -4.300000) '-4.000000 val))))
(display "")(let1 val (begin (floor 3.500000)) (if (equal? '3.000000 val) (format #t " Running ~d/~d" 1641 1775) (begin (add-error '(floor 3.500000) '3.000000 val))))
(display "")(let1 val (begin (ceiling 3.500000)) (if (equal? '4.000000 val) (format #t " Running ~d/~d" 1642 1775) (begin (add-error '(ceiling 3.500000) '4.000000 val))))
(display "")(let1 val (begin (truncate 3.500000)) (if (equal? '3.000000 val) (format #t " Running ~d/~d" 1643 1775) (begin (add-error '(truncate 3.500000) '3.000000 val))))
(display "")(let1 val (begin (round 3.500000)) (if (equal? '4.000000 val) (format #t " Running ~d/~d" 1644 1775) (begin (add-error '(round 3.500000) '4.000000 val))))
(display "")(let1 val (begin (round 7/2)) (if (equal? '4 val) (format #t " Running ~d/~d" 1645 1775) (begin (add-error '(round 7/2) '4 val))))
(display "")(let1 val (begin (round 7)) (if (equal? '7 val) (format #t " Running ~d/~d" 1646 1775) (begin (add-error '(round 7) '7 val))))
(display "")(let1 val (begin (floor +inf.0)) (if (equal? '+inf.0 val) (format #t " Running ~d/~d" 1647 1775) (begin (add-error '(floor +inf.0) '+inf.0 val))))
(display "")(let1 val (begin (ceiling -inf.0)) (if (equal? '-inf.0 val) (format #t " Running ~d/~d" 1648 1775) (begin (add-error '(ceiling -inf.0) '-inf.0 val))))
(display "")(let1 val (begin (nan? (round +nan.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1649 1775) (begin (add-error '(nan? (round +nan.0)) '#t val))))
(display "")(let1 val (begin (rationalize (exact 0.300000) 1/10)) (if (equal? '1/3 val) (format #t " Running ~d/~d" 1650 1775) (begin (add-error '(rationalize (exact 0.300000) 1/10) '1/3 val))))
(display "")(let1 val (begin (almost=? 0.333333 (rationalize 0.300000 1/10))) (if (equal? '#t val) (format #t " Running ~d/~d" 1651 1775) (begin (add-error '(almost=? 0.333333 (rationalize 0.300000 1/10)) '#t val))))
(display "")(let1 val (begin (rationalize +inf.0 3)) (if (equal? '+inf.0 val) (format #t " Running ~d/~d" 1652 1775) (begin (add-error '(rationalize +inf.0 3) '+inf.0 val))))
(display "")(let1 val (begin (nan? (rationalize +inf.0 +inf.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1653 1775) (begin (add-error '(nan? (rationalize +inf.0 +inf.0)) '#t val))))
(display "")(let1 val (begin (rationalize 3 +inf.0)) (if (equal? '0.000000 val) (format #t " Running ~d/~d" 1654 1775) (begin (add-error '(rationalize 3 +inf.0) '0.000000 val))))
(display "")(let1 val (begin (exp +inf.0)) (if (equal? '+inf.0 val) (format #t " Running ~d/~d" 1655 1775) (begin (add-error '(exp +inf.0) '+inf.0 val))))
(display "")(let1 val (begin (exp -inf.0)) (if (equal? '0.000000 val) (format #t " Running ~d/~d" 1656 1775) (begin (add-error '(exp -inf.0) '0.000000 val))))
(display "")(let1 val (begin (almost=? 2.718000 (exp 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1657 1775) (begin (add-error '(almost=? 2.718000 (exp 1)) '#t val))))
(display "")(let1 val (begin (almost=? 2.718000 (exp 1.000000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1658 1775) (begin (add-error '(almost=? 2.718000 (exp 1.000000)) '#t val))))
(display "")(let1 val (begin (log 0.000000)) (if (equal? '-inf.0 val) (format #t " Running ~d/~d" 1659 1775) (begin (add-error '(log 0.000000) '-inf.0 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (log 0))) (format #t " Running ~d/~d" 1660 1775) (add-error '(log 0) 'error val))(display "")(let1 val (begin (real-part (log -inf.0))) (if (equal? '+inf.0 val) (format #t " Running ~d/~d" 1661 1775) (begin (add-error '(real-part (log -inf.0)) '+inf.0 val))))
(display "")(let1 val (begin (almost=? 3.141500 (imag-part (log -inf.0)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1662 1775) (begin (add-error '(almost=? 3.141500 (imag-part (log -inf.0))) '#t val))))
(display "")(let1 val (begin (real-part (log -1.000000+0.000000i))) (if (equal? '0.000000 val) (format #t " Running ~d/~d" 1663 1775) (begin (add-error '(real-part (log -1.000000+0.000000i)) '0.000000 val))))
(display "")(let1 val (begin (almost=? 3.141500 (imag-part (log -1.000000+0.000000i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1664 1775) (begin (add-error '(almost=? 3.141500 (imag-part (log -1.000000+0.000000i))) '#t val))))
(display "")(let1 val (begin (real-part (log -1.000000-0.000000i))) (if (equal? '0.000000 val) (format #t " Running ~d/~d" 1665 1775) (begin (add-error '(real-part (log -1.000000-0.000000i)) '0.000000 val))))
(display "")(let1 val (begin (almost=? -3.141500 (imag-part (log -1.000000-0.000000i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1666 1775) (begin (add-error '(almost=? -3.141500 (imag-part (log -1.000000-0.000000i))) '#t val))))
(display "")(let1 val (begin (cos 0)) (if (equal? '1 val) (format #t " Running ~d/~d" 1667 1775) (begin (add-error '(cos 0) '1 val))))
(display "")(let1 val (begin (sin 0)) (if (equal? '0 val) (format #t " Running ~d/~d" 1668 1775) (begin (add-error '(sin 0) '0 val))))
(display "")(let1 val (begin (sin 0.000000)) (if (equal? '0.000000 val) (format #t " Running ~d/~d" 1669 1775) (begin (add-error '(sin 0.000000) '0.000000 val))))
(display "")(let1 val (begin (almost=? 1.000000 (sin 1.570796))) (if (equal? '#t val) (format #t " Running ~d/~d" 1670 1775) (begin (add-error '(almost=? 1.000000 (sin 1.570796)) '#t val))))
(display "")(let1 val (begin (almost=? 0.000000 (cos 1.570796))) (if (equal? '#t val) (format #t " Running ~d/~d" 1671 1775) (begin (add-error '(almost=? 0.000000 (cos 1.570796)) '#t val))))
(display "")(let1 val (begin (cos 0.000000)) (if (equal? '1.000000 val) (format #t " Running ~d/~d" 1672 1775) (begin (add-error '(cos 0.000000) '1.000000 val))))
(display "")(let1 val (begin (almost=? 1.298400 (real-part (sin 1+1i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1673 1775) (begin (add-error '(almost=? 1.298400 (real-part (sin 1+1i))) '#t val))))
(display "")(let1 val (begin (almost=? 0.634900 (imag-part (sin 1+1i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1674 1775) (begin (add-error '(almost=? 0.634900 (imag-part (sin 1+1i))) '#t val))))
(display "")(let1 val (begin (almost=? 1.092520 (real-part (cos 12.000000+3/4i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1675 1775) (begin (add-error '(almost=? 1.092520 (real-part (cos 12.000000+3/4i))) '#t val))))
(display "")(let1 val (begin (almost=? 0.441230 (imag-part (cos 12.000000+3/4i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1676 1775) (begin (add-error '(almost=? 0.441230 (imag-part (cos 12.000000+3/4i))) '#t val))))
(display "")(let1 val (begin (almost=? -0.080390 (real-part (tan 2+1.500000i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1677 1775) (begin (add-error '(almost=? -0.080390 (real-part (tan 2+1.500000i))) '#t val))))
(display "")(let1 val (begin (almost=? 1.064100 (imag-part (tan 2+1.500000i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1678 1775) (begin (add-error '(almost=? 1.064100 (imag-part (tan 2+1.500000i))) '#t val))))
(display "")(let1 val (begin (floor 123456789123456789123456789)) (if (equal? '123456789123456789123456789 val) (format #t " Running ~d/~d" 1679 1775) (begin (add-error '(floor 123456789123456789123456789) '123456789123456789123456789 val))))
(display "")(let1 val (begin (string->number "10")) (if (equal? '10 val) (format #t " Running ~d/~d" 1680 1775) (begin (add-error '(string->number "10") '10 val))))
(display "")(let1 val (begin (string->number "123456789123456789123456789")) (if (equal? '123456789123456789123456789 val) (format #t " Running ~d/~d" 1681 1775) (begin (add-error '(string->number "123456789123456789123456789") '123456789123456789123456789 val))))
(display "")(let1 val (begin (string->number "hige")) (if (equal? '#f val) (format #t " Running ~d/~d" 1682 1775) (begin (add-error '(string->number "hige") '#f val))))
(display "")(let1 val (begin (string->number "10" 10)) (if (equal? '10 val) (format #t " Running ~d/~d" 1683 1775) (begin (add-error '(string->number "10" 10) '10 val))))
(display "")(let1 val (begin (string->number "123456789123456789123456789" 10)) (if (equal? '123456789123456789123456789 val) (format #t " Running ~d/~d" 1684 1775) (begin (add-error '(string->number "123456789123456789123456789" 10) '123456789123456789123456789 val))))
(display "")(let1 val (begin (string->number "hige" 10)) (if (equal? '#f val) (format #t " Running ~d/~d" 1685 1775) (begin (add-error '(string->number "hige" 10) '#f val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (string->number "hige" 11))) (format #t " Running ~d/~d" 1686 1775) (add-error '(string->number "hige" 11) 'error val))(display "")(let1 val (begin (string->number "10" 2)) (if (equal? '2 val) (format #t " Running ~d/~d" 1687 1775) (begin (add-error '(string->number "10" 2) '2 val))))
(display "")(let1 val (begin (string->number "100")) (if (equal? '100 val) (format #t " Running ~d/~d" 1688 1775) (begin (add-error '(string->number "100") '100 val))))
(display "")(let1 val (begin (string->number "100" 16)) (if (equal? '256 val) (format #t " Running ~d/~d" 1689 1775) (begin (add-error '(string->number "100" 16) '256 val))))
(display "")(let1 val (begin (string->number "1e2")) (if (equal? '100.000000 val) (format #t " Running ~d/~d" 1690 1775) (begin (add-error '(string->number "1e2") '100.000000 val))))
(display "")(let1 val (begin (string->number "0/0")) (if (equal? '#f val) (format #t " Running ~d/~d" 1691 1775) (begin (add-error '(string->number "0/0") '#f val))))
(display "")(let1 val (begin (string->number "+inf.0")) (if (equal? '+inf.0 val) (format #t " Running ~d/~d" 1692 1775) (begin (add-error '(string->number "+inf.0") '+inf.0 val))))
(display "")(let1 val (begin (string->number "-inf.0")) (if (equal? '-inf.0 val) (format #t " Running ~d/~d" 1693 1775) (begin (add-error '(string->number "-inf.0") '-inf.0 val))))
(display "")(let1 val (begin (nan? (string->number "+nan.0"))) (if (equal? '#t val) (format #t " Running ~d/~d" 1694 1775) (begin (add-error '(nan? (string->number "+nan.0")) '#t val))))
(display "")(let1 val (begin (fl=? (inexact (expt 10 100)) (string->number "1.0e100"))) (if (equal? '#t val) (format #t " Running ~d/~d" 1695 1775) (begin (add-error '(fl=? (inexact (expt 10 100)) (string->number "1.0e100")) '#t val))))
(display "")(let1 val (begin (fl=? (inexact (expt 10 100)) (string->number "1.e100"))) (if (equal? '#t val) (format #t " Running ~d/~d" 1696 1775) (begin (add-error '(fl=? (inexact (expt 10 100)) (string->number "1.e100")) '#t val))))
(display "")(let1 val (begin (magnitude 10)) (if (equal? '10 val) (format #t " Running ~d/~d" 1697 1775) (begin (add-error '(magnitude 10) '10 val))))
(display "")(let1 val (begin (magnitude 10.000000)) (if (equal? '10.000000 val) (format #t " Running ~d/~d" 1698 1775) (begin (add-error '(magnitude 10.000000) '10.000000 val))))
(display "")(let1 val (begin (magnitude -10.000000)) (if (equal? '10.000000 val) (format #t " Running ~d/~d" 1699 1775) (begin (add-error '(magnitude -10.000000) '10.000000 val))))
(display "")(let1 val (begin (magnitude -2/3)) (if (equal? '2/3 val) (format #t " Running ~d/~d" 1700 1775) (begin (add-error '(magnitude -2/3) '2/3 val))))
(display "")(let1 val (begin (magnitude -4951760157141521099596496895)) (if (equal? '4951760157141521099596496895 val) (format #t " Running ~d/~d" 1701 1775) (begin (add-error '(magnitude -4951760157141521099596496895) '4951760157141521099596496895 val))))
(display "")(let1 val (begin (almost=? 5.385100 (magnitude 2+5i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1702 1775) (begin (add-error '(almost=? 5.385100 (magnitude 2+5i)) '#t val))))
(display "")(let1 val (begin (angle 0)) (if (equal? '0 val) (format #t " Running ~d/~d" 1703 1775) (begin (add-error '(angle 0) '0 val))))
(display "")(let1 val (begin (angle 0.000000)) (if (equal? '0.000000 val) (format #t " Running ~d/~d" 1704 1775) (begin (add-error '(angle 0.000000) '0.000000 val))))
(display "")(let1 val (begin (almost=? 3.141590 (angle -3))) (if (equal? '#t val) (format #t " Running ~d/~d" 1705 1775) (begin (add-error '(almost=? 3.141590 (angle -3)) '#t val))))
(display "")(let1 val (begin (almost=? (/ 3.141592 4) (angle 1+1i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1706 1775) (begin (add-error '(almost=? (/ 3.141592 4) (angle 1+1i)) '#t val))))
(display "")(let1 val (begin (sqrt 4)) (if (equal? '2 val) (format #t " Running ~d/~d" 1707 1775) (begin (add-error '(sqrt 4) '2 val))))
(display "")(let1 val (begin (sqrt 4.000000)) (if (equal? '2.000000 val) (format #t " Running ~d/~d" 1708 1775) (begin (add-error '(sqrt 4.000000) '2.000000 val))))
(display "")(let1 val (begin (sqrt 1/4)) (if (equal? '1/2 val) (format #t " Running ~d/~d" 1709 1775) (begin (add-error '(sqrt 1/4) '1/2 val))))
(display "")(let1 val (begin (almost=? 1.098600 (real-part (sqrt 1+1i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1710 1775) (begin (add-error '(almost=? 1.098600 (real-part (sqrt 1+1i))) '#t val))))
(display "")(let1 val (begin (almost=? 0.455000 (imag-part (sqrt 1+1i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1711 1775) (begin (add-error '(almost=? 0.455000 (imag-part (sqrt 1+1i))) '#t val))))
(display "")(let1 val (begin (almost=? 0.666239 (real-part (asin 1+1i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1712 1775) (begin (add-error '(almost=? 0.666239 (real-part (asin 1+1i))) '#t val))))
(display "")(let1 val (begin (almost=? 1.061275 (imag-part (asin 1+1i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1713 1775) (begin (add-error '(almost=? 1.061275 (imag-part (asin 1+1i))) '#t val))))
(display "")(let1 val (begin (almost=? 0.904557 (real-part (acos 1+1i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1714 1775) (begin (add-error '(almost=? 0.904557 (real-part (acos 1+1i))) '#t val))))
(display "")(let1 val (begin (almost=? -1.061275 (imag-part (acos 1+1i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1715 1775) (begin (add-error '(almost=? -1.061275 (imag-part (acos 1+1i))) '#t val))))
(display "")(let1 val (begin (almost=? 1.017222 (real-part (atan 1+1i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1716 1775) (begin (add-error '(almost=? 1.017222 (real-part (atan 1+1i))) '#t val))))
(display "")(let1 val (begin (almost=? 0.402359 (imag-part (atan 1+1i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1717 1775) (begin (add-error '(almost=? 0.402359 (imag-part (atan 1+1i))) '#t val))))
(display "")(let1 val (begin (atan 0 1)) (if (equal? '0 val) (format #t " Running ~d/~d" 1718 1775) (begin (add-error '(atan 0 1) '0 val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (atan 1+1i 3))) (format #t " Running ~d/~d" 1719 1775) (add-error '(atan 1+1i 3) 'error val))(display "")(let1 val (begin (almost=? 0.785398 (atan 1 1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1720 1775) (begin (add-error '(almost=? 0.785398 (atan 1 1)) '#t val))))
(display "")(let1 val (begin (let1 val 5 (receive (s r) (exact-integer-sqrt val) (= val (+ r (* s s)))))) (if (equal? '#t val) (format #t " Running ~d/~d" 1721 1775) (begin (add-error '(let1 val 5 (receive (s r) (exact-integer-sqrt val) (= val (+ r (* s s))))) '#t val))))
(display "")(let1 val (begin (let1 val 4 (receive (s r) (exact-integer-sqrt val) (= val (+ r (* s s)))))) (if (equal? '#t val) (format #t " Running ~d/~d" 1722 1775) (begin (add-error '(let1 val 4 (receive (s r) (exact-integer-sqrt val) (= val (+ r (* s s))))) '#t val))))
(display "")(let1 val (begin (let1 val 3 (receive (s r) (exact-integer-sqrt val) (= val (+ r (* s s)))))) (if (equal? '#t val) (format #t " Running ~d/~d" 1723 1775) (begin (add-error '(let1 val 3 (receive (s r) (exact-integer-sqrt val) (= val (+ r (* s s))))) '#t val))))
(define unspec (if #f #f))(define (unspec? x) (eq? unspec x))(display "")(let1 val (begin (expt 5 3)) (if (equal? '125 val) (format #t " Running ~d/~d" 1725 1775) (begin (add-error '(expt 5 3) '125 val))))
(display "")(let1 val (begin (expt 5 0)) (if (equal? '1 val) (format #t " Running ~d/~d" 1726 1775) (begin (add-error '(expt 5 0) '1 val))))
(display "")(let1 val (begin (expt 0 5)) (if (equal? '0 val) (format #t " Running ~d/~d" 1727 1775) (begin (add-error '(expt 0 5) '0 val))))
(display "")(let1 val (begin (expt 0 0)) (if (equal? '1 val) (format #t " Running ~d/~d" 1728 1775) (begin (add-error '(expt 0 0) '1 val))))
(display "")(let1 val (begin (unspec? (expt 0 -5))) (if (equal? '#t val) (format #t " Running ~d/~d" 1729 1775) (begin (add-error '(unspec? (expt 0 -5)) '#t val))))
(display "")(let1 val (begin (expt 5 -3)) (if (equal? '1/125 val) (format #t " Running ~d/~d" 1730 1775) (begin (add-error '(expt 5 -3) '1/125 val))))
(display "")(let1 val (begin (expt 2 33)) (if (equal? '8589934592 val) (format #t " Running ~d/~d" 1731 1775) (begin (add-error '(expt 2 33) '8589934592 val))))
(display "")(let1 val (begin (expt 2 -33)) (if (equal? '1/8589934592 val) (format #t " Running ~d/~d" 1732 1775) (begin (add-error '(expt 2 -33) '1/8589934592 val))))
(display "")(let1 val (begin (almost=? 2.000000 (expt 4 0.500000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1733 1775) (begin (add-error '(almost=? 2.000000 (expt 4 0.500000)) '#t val))))
(display "")(let1 val (begin (almost=? 0.250000 (expt 4 -1.000000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1734 1775) (begin (add-error '(almost=? 0.250000 (expt 4 -1.000000)) '#t val))))
(display "")(let1 val (begin (expt 0 5+0.000031i)) (if (equal? '0 val) (format #t " Running ~d/~d" 1735 1775) (begin (add-error '(expt 0 5+0.000031i) '0 val))))
(display "")(let1 val (begin (almost=? 0.000000 (expt 0.000000 5+0.000031i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1736 1775) (begin (add-error '(almost=? 0.000000 (expt 0.000000 5+0.000031i)) '#t val))))
(display "")(let1 val (begin (unspec? (expt 0 -5+0.000031i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1737 1775) (begin (add-error '(unspec? (expt 0 -5+0.000031i)) '#t val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (expt 2 (+ (greatest-fixnum) 1)))) (format #t " Running ~d/~d" 1738 1775) (add-error '(expt 2 (+ (greatest-fixnum) 1)) 'error val))(display "")(let1 val (begin (almost=? 2.000000 (expt 4 1/2))) (if (equal? '#t val) (format #t " Running ~d/~d" 1739 1775) (begin (add-error '(almost=? 2.000000 (expt 4 1/2)) '#t val))))
(display "")(let1 val (begin (almost=? -1.895800 (real-part (expt 2 1+5i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1740 1775) (begin (add-error '(almost=? -1.895800 (real-part (expt 2 1+5i))) '#t val))))
(display "")(let1 val (begin (almost=? -0.636900 (imag-part (expt 2 1+5i)))) (if (equal? '#t val) (format #t " Running ~d/~d" 1741 1775) (begin (add-error '(almost=? -0.636900 (imag-part (expt 2 1+5i))) '#t val))))
(display "")(let1 val (begin (expt 1 1+5i)) (if (equal? '1 val) (format #t " Running ~d/~d" 1742 1775) (begin (add-error '(expt 1 1+5i) '1 val))))
(display "")(let1 val (begin (expt 0.000000 0.000000)) (if (equal? '1.000000 val) (format #t " Running ~d/~d" 1743 1775) (begin (add-error '(expt 0.000000 0.000000) '1.000000 val))))
(display "")(let1 val (begin (almost=? 4.000000 (expt 2.000000 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 1744 1775) (begin (add-error '(almost=? 4.000000 (expt 2.000000 2)) '#t val))))
(display "")(let1 val (begin (almost=? 4.000000 (expt 2.000000 2.000000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1745 1775) (begin (add-error '(almost=? 4.000000 (expt 2.000000 2.000000)) '#t val))))
(display "")(let1 val (begin (almost=? 2.000000 (expt 4.000000 1/2))) (if (equal? '#t val) (format #t " Running ~d/~d" 1746 1775) (begin (add-error '(almost=? 2.000000 (expt 4.000000 1/2)) '#t val))))
(display "")(let1 val (begin (expt 100000000000000000000000000000 2)) (if (equal? '10000000000000000000000000000000000000000000000000000000000 val) (format #t " Running ~d/~d" 1747 1775) (begin (add-error '(expt 100000000000000000000000000000 2) '10000000000000000000000000000000000000000000000000000000000 val))))
(display "")(let1 val (begin (= (* (+ (greatest-fixnum) 1) (+ (greatest-fixnum) 1)) (expt (+ (greatest-fixnum) 1) 2))) (if (equal? '#t val) (format #t " Running ~d/~d" 1748 1775) (begin (add-error '(= (* (+ (greatest-fixnum) 1) (+ (greatest-fixnum) 1)) (expt (+ (greatest-fixnum) 1) 2)) '#t val))))
(display "")(let1 val (begin (expt 1/2 2)) (if (equal? '1/4 val) (format #t " Running ~d/~d" 1749 1775) (begin (add-error '(expt 1/2 2) '1/4 val))))
(display "")(let1 val (begin (expt 1/2 -2)) (if (equal? '4 val) (format #t " Running ~d/~d" 1750 1775) (begin (add-error '(expt 1/2 -2) '4 val))))
(define (complex-almost=? a b) (and (almost=? (real-part a) (real-part b)) (almost=? (imag-part a) (imag-part b))))(display "")(let1 val (begin (complex-almost=? 1.100000+2.200000i (make-rectangular 1.100000 2.200000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1752 1775) (begin (add-error '(complex-almost=? 1.100000+2.200000i (make-rectangular 1.100000 2.200000)) '#t val))))
(display "")(let1 val (begin (complex-almost=? -0.647351+0.889346i (make-polar 1.100000 2.200000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1753 1775) (begin (add-error '(complex-almost=? -0.647351+0.889346i (make-polar 1.100000 2.200000)) '#t val))))
(display "")(let1 val (begin (almost=? 1.100000 (real-part 1.100000+2.200000i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1754 1775) (begin (add-error '(almost=? 1.100000 (real-part 1.100000+2.200000i)) '#t val))))
(display "")(let1 val (begin (almost=? 2.200000 (imag-part 1.100000+2.200000i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1755 1775) (begin (add-error '(almost=? 2.200000 (imag-part 1.100000+2.200000i)) '#t val))))
(display "")(let1 val (begin (almost=? 1.100000 (magnitude -0.647351+0.889346i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1756 1775) (begin (add-error '(almost=? 1.100000 (magnitude -0.647351+0.889346i)) '#t val))))
(display "")(let1 val (begin (almost=? 2.200000 (angle -0.647351+0.889346i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1757 1775) (begin (add-error '(almost=? 2.200000 (angle -0.647351+0.889346i)) '#t val))))
(display "")(let1 val (begin (almost=? 3.141593 (angle -1))) (if (equal? '#t val) (format #t " Running ~d/~d" 1758 1775) (begin (add-error '(almost=? 3.141593 (angle -1)) '#t val))))
(display "")(let1 val (begin (almost=? 3.141593 (angle -1.000000))) (if (equal? '#t val) (format #t " Running ~d/~d" 1759 1775) (begin (add-error '(almost=? 3.141593 (angle -1.000000)) '#t val))))
(display "")(let1 val (begin (almost=? 3.141593 (angle -1.000000+0.000000i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1760 1775) (begin (add-error '(almost=? 3.141593 (angle -1.000000+0.000000i)) '#t val))))
(display "")(let1 val (begin (almost=? -3.141593 (angle -1.000000-0.000000i))) (if (equal? '#t val) (format #t " Running ~d/~d" 1761 1775) (begin (add-error '(almost=? -3.141593 (angle -1.000000-0.000000i)) '#t val))))
(display "")(let1 val (begin (almost=? 0.000000 (angle +inf.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1762 1775) (begin (add-error '(almost=? 0.000000 (angle +inf.0)) '#t val))))
(display "")(let1 val (begin (almost=? 3.141593 (angle -inf.0))) (if (equal? '#t val) (format #t " Running ~d/~d" 1763 1775) (begin (add-error '(almost=? 3.141593 (angle -inf.0)) '#t val))))
(display "")(let1 val (begin (number->string 123)) (if (equal? '"123" val) (format #t " Running ~d/~d" 1764 1775) (begin (add-error '(number->string 123) '"123" val))))
(display "")(let1 val (begin (number->string 123 10)) (if (equal? '"123" val) (format #t " Running ~d/~d" 1765 1775) (begin (add-error '(number->string 123 10) '"123" val))))
(display "")(let1 val (begin (number->string 2 2)) (if (equal? '"10" val) (format #t " Running ~d/~d" 1766 1775) (begin (add-error '(number->string 2 2) '"10" val))))
(display "")(let1 val (begin (number->string 2 16)) (if (equal? '"2" val) (format #t " Running ~d/~d" 1767 1775) (begin (add-error '(number->string 2 16) '"2" val))))
(display "")(let1 val (begin (number->string 10 16)) (if (equal? '"a" val) (format #t " Running ~d/~d" 1768 1775) (begin (add-error '(number->string 10 16) '"a" val))))
(display "")(let1 val (begin (number->string 10 8)) (if (equal? '"12" val) (format #t " Running ~d/~d" 1769 1775) (begin (add-error '(number->string 10 8) '"12" val))))
(display "")(if (equal? 'error (guard (con (#t 'error)) (number->string 1.000000 8))) (format #t " Running ~d/~d" 1770 1775) (add-error '(number->string 1.000000 8) 'error val))(display "")(let1 val (begin (number->string 1.000000)) (if (equal? '"1.000000" val) (format #t " Running ~d/~d" 1771 1775) (begin (add-error '(number->string 1.000000) '"1.000000" val))))
(display "")(let1 val (begin (number->string 1/10 16)) (if (equal? '"1/a" val) (format #t " Running ~d/~d" 1772 1775) (begin (add-error '(number->string 1/10 16) '"1/a" val))))
(display "")(let1 val (begin (number->string 1+1i)) (if (equal? '"1+1i" val) (format #t " Running ~d/~d" 1773 1775) (begin (add-error '(number->string 1+1i) '"1+1i" val))))
(display "")(let1 val (begin (string->number (number->string -5 16))) (if (equal? '-5 val) (format #t " Running ~d/~d" 1774 1775) (begin (add-error '(string->number (number->string -5 16)) '-5 val))))
(set! todo-num (+ todo-num 1))(display "")(format #t " Running ~d/~d ~a" (- 1775 (length errors) todo-num) 1775 (if (> todo-num 0) (format "(~d ToDo)" todo-num) ""))(when (> (length errors) 0) (newline) (format #t "    === ~d error(s) =========\n" (length errors)) (for-each (lambda (error) (format #t "     ~a : expected ~a but got ~a.\n" (first error) (second error) (third error))) errors))(when (zero? (length errors)) (display "  \n ... passed"))(newline)(newline)