;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define g$3372$12319 '#f) (define g$3372$12316 '#f) ((lambda (g$3372$12209 g$3372$12296) (begin (set! g$3372$12209 (lambda g$3372$12312 ((lambda (g$3372$12313) (if (= g$3372$12313 '1) (apply (lambda (g$3372$12298) (g$3372$12209 g$3372$12298 (lambda (g$3372$12300) g$3372$12300))) g$3372$12312) (if (= g$3372$12313 '2) (apply (lambda (g$3372$12302 g$3372$12303) (begin (if (procedure? g$3372$12303) (void) (error 'assert '"assertion failed" '(procedure? fender))) ((lambda (g$3372$12306) (lambda g$3372$12310 ((lambda (g$3372$12311) (if (= g$3372$12311 '0) (apply (lambda () g$3372$12306) g$3372$12310) (if (= g$3372$12311 '1) (apply (lambda (g$3372$12308) (set! g$3372$12306 (g$3372$12303 g$3372$12308))) g$3372$12310) (error 'apply '"invalid arg count")))) (length g$3372$12310)))) (g$3372$12303 g$3372$12302)))) g$3372$12312) (error 'apply '"invalid arg count")))) (length g$3372$12312)))) (set! g$3372$12296 (lambda (g$3372$12314) (error 'file-options-spec '"not implemented"))) (begin (set! g$3372$12316 g$3372$12296) (set! g$3372$12319 g$3372$12209)))) '#f '#f))


(begin (define g$3372$12397 '#f) (define g$3372$12396 '#f) (define g$3372$12395 '#f) (define g$3372$12394 '#f) (define g$3372$12393 '#f) (define g$3372$12392 '#f) ((lambda (g$3372$12321 g$3372$12323 g$3372$12325 g$3372$12327 g$3372$12329 g$3372$12331) (begin (set! g$3372$12321 (g$3372$12319 (lambda (g$3372$12333) '#f) (lambda (g$3372$12335) (begin (if (procedure? g$3372$12335) (void) (error 'assert '"assertion failed" '(procedure? p))) g$3372$12335)))) (set! g$3372$12323 (lambda (g$3372$12337) ((lambda (g$3372$12339) (begin (set! g$3372$12339 (lambda (g$3372$12341) ((lambda (g$3372$12343) (if g$3372$12343 g$3372$12343 ((lambda (g$3372$12345) (if g$3372$12345 g$3372$12345 ((lambda (g$3372$12347) (if g$3372$12347 g$3372$12347 ((lambda (g$3372$12349) (if g$3372$12349 g$3372$12349 (begin '#f (number? g$3372$12341)))) (boolean? g$3372$12341)))) (symbol? g$3372$12341)))) (char? g$3372$12341)))) (null? g$3372$12341)))) (not (g$3372$12339 g$3372$12337)))) '#f))) (set! g$3372$12325 (lambda (g$3372$12351) ((lambda (g$3372$12353) (begin (set! g$3372$12353 (lambda (g$3372$12355) (if (pair? g$3372$12355) ((lambda (g$3372$12357) (if (memv g$3372$12357 '(quote)) (if (if g$3372$12351 (begin '#f (g$3372$12323 (cadr g$3372$12355))) '#f) ((lambda (g$3372$12382) (begin (set-symbol-value! g$3372$12382 (cadr g$3372$12355)) g$3372$12382)) (gensym)) g$3372$12355) (if (memv g$3372$12357 '(case-lambda)) (cons 'case-lambda (map (lambda (g$3372$12380) (cons (car g$3372$12380) (map g$3372$12353 (cdr g$3372$12380)))) (cdr g$3372$12355))) (if (memv g$3372$12357 '(lambda)) (cons* 'lambda (cadr g$3372$12355) (map g$3372$12353 (cddr g$3372$12355))) (if (memv g$3372$12357 '(letrec)) ((lambda (g$3372$12372 g$3372$12373) ((lambda (g$3372$12376 g$3372$12377) (cons* 'letrec (map list g$3372$12376 (map g$3372$12353 g$3372$12377)) (map g$3372$12353 g$3372$12373))) (map car g$3372$12372) (map cadr g$3372$12372))) (cadr g$3372$12355) (cddr g$3372$12355)) (if (memv g$3372$12357 '(letrec*)) ((lambda (g$3372$12364 g$3372$12365) ((lambda (g$3372$12368 g$3372$12369) (cons* 'letrec* (map list g$3372$12368 (map g$3372$12353 g$3372$12369)) (map g$3372$12353 g$3372$12365))) (map car g$3372$12364) (map cadr g$3372$12364))) (cadr g$3372$12355) (cddr g$3372$12355)) (if (memv g$3372$12357 '(begin)) (cons 'begin (map g$3372$12353 (cdr g$3372$12355))) (if (memv g$3372$12357 '(set!)) (list 'set! (cadr g$3372$12355) (g$3372$12353 (caddr g$3372$12355))) (if (memv g$3372$12357 '(primitive)) ((lambda (g$3372$12358) ((lambda (g$3372$12360) (if g$3372$12360 ((lambda (g$3372$12362) g$3372$12362) g$3372$12360) g$3372$12358)) ((g$3372$12321) g$3372$12358))) (cadr g$3372$12355)) (if (memv g$3372$12357 '(define)) g$3372$12355 (if (list? g$3372$12355) (map g$3372$12353 g$3372$12355) (error 'rewrite '"invalid form ~s ~s" g$3372$12355 (list? g$3372$12355))))))))))))) (car g$3372$12355)) g$3372$12355))) g$3372$12353)) '#f))) (set! g$3372$12327 ((lambda (g$3372$12384) (not (eq? (eval-core (list 'quote g$3372$12384)) (eval-core (list 'quote g$3372$12384))))) (cons '1 '2))) (set! g$3372$12329 (lambda (g$3372$12386) ((g$3372$12325 g$3372$12327) g$3372$12386))) (set! g$3372$12331 (lambda (g$3372$12388 g$3372$12389) (begin (pretty-print ((g$3372$12325 '#f) g$3372$12388) g$3372$12389) (newline g$3372$12389)))) (begin (set! g$3372$12392 g$3372$12331) (set! g$3372$12393 g$3372$12329) (set! g$3372$12394 g$3372$12327) (set! g$3372$12395 g$3372$12325) (set! g$3372$12396 g$3372$12323) (set! g$3372$12397 g$3372$12321)))) '#f '#f '#f '#f '#f '#f))


(void)


(begin (define g$3372$12875 '#f) (define g$3372$12874 '#f) (define g$3372$12873 '#f) (define g$3372$12872 '#f) (define g$3372$12871 '#f) (define g$3372$12870 '#f) (define g$3372$12869 '#f) (define g$3372$12868 '#f) (define g$3372$12867 '#f) (define g$3372$12866 '#f) (define g$3372$12865 '#f) (define g$3372$12864 '#f) (define g$3372$12863 '#f) (define g$3372$12862 '#f) (define g$3372$12861 '#f) (define g$3372$12860 '#f) (define g$3372$12859 '#f) (define g$3372$12858 '#f) (define g$3372$12857 '#f) (define g$3372$12856 '#f) (define g$3372$12855 '#f) (define g$3372$12854 '#f) (define g$3372$12853 '#f) (define g$3372$12852 '#f) (define g$3372$12851 '#f) (define g$3372$12850 '#f) (define g$3372$12849 '#f) (define g$3372$12848 '#f) (define g$3372$12847 '#f) (define g$3372$12846 '#f) (define g$3372$12845 '#f) (define g$3372$12844 '#f) (define g$3372$12843 '#f) (define g$3372$12842 '#f) (define g$3372$12841 '#f) (define g$3372$12840 '#f) (define g$3372$12839 '#f) (define g$3372$12838 '#f) (define g$3372$12837 '#f) (define g$3372$12836 '#f) (define g$3372$12835 '#f) (define g$3372$12834 '#f) (define g$3372$12833 '#f) (define g$3372$12832 '#f) (define g$3372$12831 '#f) (define g$3372$12830 '#f) (define g$3372$12829 '#f) (define g$3372$12828 '#f) (define g$3372$12827 '#f) ((lambda (g$3372$12451 g$3372$12453 g$3372$12456 g$3372$12458 g$3372$12460 g$3372$12462 g$3372$12464 g$3372$12466 g$3372$12468 g$3372$12470 g$3372$12472 g$3372$12474 g$3372$12476 g$3372$12478 g$3372$12480 g$3372$12482 g$3372$12484 g$3372$12486 g$3372$12488 g$3372$12490 g$3372$12492 g$3372$12494 g$3372$12496 g$3372$12498 g$3372$12500 g$3372$12502 g$3372$12504 g$3372$12506 g$3372$12508 g$3372$12510 g$3372$12512 g$3372$12514 g$3372$12516 g$3372$12518 g$3372$12520 g$3372$12522 g$3372$12524 g$3372$12526 g$3372$12528 g$3372$12530 g$3372$12532 g$3372$12534 g$3372$12536 g$3372$12538 g$3372$12540 g$3372$12542 g$3372$12544 g$3372$12546 g$3372$12548) (begin (set! g$3372$12451 (lambda () ((lambda (g$3372$12550) ((lambda (g$3372$12552) (begin (set! g$3372$12552 (lambda (g$3372$12554 g$3372$12555) (if (memq g$3372$12554 g$3372$12555) g$3372$12555 (cons g$3372$12554 g$3372$12555)))) (lambda g$3372$12560 ((lambda (g$3372$12561) (if (= g$3372$12561 '0) (apply (lambda () g$3372$12550) g$3372$12560) (if (= g$3372$12561 '1) (apply (lambda (g$3372$12558) (set! g$3372$12550 (g$3372$12552 g$3372$12558 g$3372$12550))) g$3372$12560) (error 'apply '"invalid arg count")))) (length g$3372$12560))))) '#f)) '()))) (set! g$3372$12453 (g$3372$12319 (g$3372$12451) (lambda (g$3372$12562) (begin (if (procedure? g$3372$12562) (void) (error 'current-library-collection '"not a procedure" g$3372$12562)) g$3372$12562)))) (set! g$3372$12456 (lambda (g$3372$12564 g$3372$12565 g$3372$12566 g$3372$12567 g$3372$12568 g$3372$12569 g$3372$12570 g$3372$12571 g$3372$12572 g$3372$12573 g$3372$12574) (vector 'g$3372$12455 g$3372$12564 g$3372$12565 g$3372$12566 g$3372$12567 g$3372$12568 g$3372$12569 g$3372$12570 g$3372$12571 g$3372$12572 g$3372$12573 g$3372$12574))) (set! g$3372$12458 (lambda (g$3372$12586) (if (vector? g$3372$12586) (if (= (vector-length g$3372$12586) (+ '1 (length '(id name version imp* vis* inv* subst env visit-state invoke-state visible?)))) (begin '#f (eq? (vector-ref g$3372$12586 '0) 'g$3372$12455)) '#f) '#f))) (set! g$3372$12460 (lambda (g$3372$12588) (if (g$3372$12458 g$3372$12588) (vector-ref g$3372$12588 '1) (error 'library-id '"~s is not of type ~s" g$3372$12588 'library)))) (set! g$3372$12462 (lambda (g$3372$12590) (if (g$3372$12458 g$3372$12590) (vector-ref g$3372$12590 '2) (error 'library-name '"~s is not of type ~s" g$3372$12590 'library)))) (set! g$3372$12464 (lambda (g$3372$12592) (if (g$3372$12458 g$3372$12592) (vector-ref g$3372$12592 '3) (error 'library-version '"~s is not of type ~s" g$3372$12592 'library)))) (set! g$3372$12466 (lambda (g$3372$12594) (if (g$3372$12458 g$3372$12594) (vector-ref g$3372$12594 '4) (error 'library-imp* '"~s is not of type ~s" g$3372$12594 'library)))) (set! g$3372$12468 (lambda (g$3372$12596) (if (g$3372$12458 g$3372$12596) (vector-ref g$3372$12596 '5) (error 'library-vis* '"~s is not of type ~s" g$3372$12596 'library)))) (set! g$3372$12470 (lambda (g$3372$12598) (if (g$3372$12458 g$3372$12598) (vector-ref g$3372$12598 '6) (error 'library-inv* '"~s is not of type ~s" g$3372$12598 'library)))) (set! g$3372$12472 (lambda (g$3372$12600) (if (g$3372$12458 g$3372$12600) (vector-ref g$3372$12600 '7) (error 'library-subst '"~s is not of type ~s" g$3372$12600 'library)))) (set! g$3372$12474 (lambda (g$3372$12602) (if (g$3372$12458 g$3372$12602) (vector-ref g$3372$12602 '8) (error 'library-env '"~s is not of type ~s" g$3372$12602 'library)))) (set! g$3372$12476 (lambda (g$3372$12604) (if (g$3372$12458 g$3372$12604) (vector-ref g$3372$12604 '9) (error 'library-visit-state '"~s is not of type ~s" g$3372$12604 'library)))) (set! g$3372$12478 (lambda (g$3372$12606) (if (g$3372$12458 g$3372$12606) (vector-ref g$3372$12606 '10) (error 'library-invoke-state '"~s is not of type ~s" g$3372$12606 'library)))) (set! g$3372$12480 (lambda (g$3372$12608) (if (g$3372$12458 g$3372$12608) (vector-ref g$3372$12608 '11) (error 'library-visible? '"~s is not of type ~s" g$3372$12608 'library)))) (set! g$3372$12482 (lambda (g$3372$12610 g$3372$12611) (if (g$3372$12458 g$3372$12610) (vector-set! g$3372$12610 '1 g$3372$12611) (error 'set-library-id! '"~s is not of type ~s" g$3372$12610 'library)))) (set! g$3372$12484 (lambda (g$3372$12614 g$3372$12615) (if (g$3372$12458 g$3372$12614) (vector-set! g$3372$12614 '2 g$3372$12615) (error 'set-library-name! '"~s is not of type ~s" g$3372$12614 'library)))) (set! g$3372$12486 (lambda (g$3372$12618 g$3372$12619) (if (g$3372$12458 g$3372$12618) (vector-set! g$3372$12618 '3 g$3372$12619) (error 'set-library-version! '"~s is not of type ~s" g$3372$12618 'library)))) (set! g$3372$12488 (lambda (g$3372$12622 g$3372$12623) (if (g$3372$12458 g$3372$12622) (vector-set! g$3372$12622 '4 g$3372$12623) (error 'set-library-imp*! '"~s is not of type ~s" g$3372$12622 'library)))) (set! g$3372$12490 (lambda (g$3372$12626 g$3372$12627) (if (g$3372$12458 g$3372$12626) (vector-set! g$3372$12626 '5 g$3372$12627) (error 'set-library-vis*! '"~s is not of type ~s" g$3372$12626 'library)))) (set! g$3372$12492 (lambda (g$3372$12630 g$3372$12631) (if (g$3372$12458 g$3372$12630) (vector-set! g$3372$12630 '6 g$3372$12631) (error 'set-library-inv*! '"~s is not of type ~s" g$3372$12630 'library)))) (set! g$3372$12494 (lambda (g$3372$12634 g$3372$12635) (if (g$3372$12458 g$3372$12634) (vector-set! g$3372$12634 '7 g$3372$12635) (error 'set-library-subst! '"~s is not of type ~s" g$3372$12634 'library)))) (set! g$3372$12496 (lambda (g$3372$12638 g$3372$12639) (if (g$3372$12458 g$3372$12638) (vector-set! g$3372$12638 '8 g$3372$12639) (error 'set-library-env! '"~s is not of type ~s" g$3372$12638 'library)))) (set! g$3372$12498 (lambda (g$3372$12642 g$3372$12643) (if (g$3372$12458 g$3372$12642) (vector-set! g$3372$12642 '9 g$3372$12643) (error 'set-library-visit-state! '"~s is not of type ~s" g$3372$12642 'library)))) (set! g$3372$12500 (lambda (g$3372$12646 g$3372$12647) (if (g$3372$12458 g$3372$12646) (vector-set! g$3372$12646 '10 g$3372$12647) (error 'set-library-invoke-state! '"~s is not of type ~s" g$3372$12646 'library)))) (set! g$3372$12502 (lambda (g$3372$12650 g$3372$12651) (if (g$3372$12458 g$3372$12650) (vector-set! g$3372$12650 '11 g$3372$12651) (error 'set-library-visible?! '"~s is not of type ~s" g$3372$12650 'library)))) (set! g$3372$12504 (lambda (g$3372$12654) (if (null? g$3372$12654) '() (error 'find-dependencies '"cannot handle deps yet")))) (set! g$3372$12506 (lambda (g$3372$12656) (letrec ((g$3372$12658 (lambda (g$3372$12660) (if (null? g$3372$12660) '#f (if (g$3372$12656 (car g$3372$12660)) (car g$3372$12660) (g$3372$12658 (cdr g$3372$12660))))))) (g$3372$12658 ((g$3372$12453)))))) (set! g$3372$12508 (g$3372$12319 '(".") (lambda (g$3372$12662) (if (if (list? g$3372$12662) (begin '#f (for-all string? g$3372$12662)) '#f) (map (lambda (g$3372$12664) g$3372$12664) g$3372$12662) (error 'library-path '"not a list of strings" g$3372$12662))))) (set! g$3372$12510 (lambda (g$3372$12666) (call-with-values (lambda () (open-string-output-port)) (lambda (g$3372$12668 g$3372$12669) ((lambda (g$3372$12672) (begin (set! g$3372$12672 (lambda (g$3372$12674) (if (<= '0 g$3372$12674 '9) (display g$3372$12674 g$3372$12668) (display (integer->char (+ (char->integer '#\A) (- g$3372$12674 '10))) g$3372$12668)))) (begin (letrec ((g$3372$12676 (lambda (g$3372$12678) (if (null? g$3372$12678) (display '".ss" g$3372$12668) (begin (display '"/" g$3372$12668) (for-each (lambda (g$3372$12680) (if ((lambda (g$3372$12682) (if g$3372$12682 g$3372$12682 ((lambda (g$3372$12684) (if g$3372$12684 g$3372$12684 ((lambda (g$3372$12686) (if g$3372$12686 g$3372$12686 (begin '#f (memv g$3372$12680 '(#\- #\. #\_ #\~))))) (char<=? '#\0 g$3372$12680 '#\9)))) (char<=? '#\A g$3372$12680 '#\Z)))) (char<=? '#\a g$3372$12680 '#\z)) (display g$3372$12680 g$3372$12668) (begin (display '"%" g$3372$12668) ((lambda (g$3372$12688) (begin (g$3372$12672 (quotient g$3372$12688 '16)) (g$3372$12672 (remainder g$3372$12688 '16)))) (char->integer g$3372$12680))))) (string->list (symbol->string (car g$3372$12678)))) (g$3372$12676 (cdr g$3372$12678))))))) (g$3372$12676 g$3372$12666)) (g$3372$12669)))) '#f))))) (set! g$3372$12512 (g$3372$12319 (lambda (g$3372$12690) ((lambda (g$3372$12692) (letrec ((g$3372$12694 (lambda (g$3372$12696) (if (pair? g$3372$12696) (begin '#f ((lambda (g$3372$12698) (if (file-exists? g$3372$12698) g$3372$12698 (g$3372$12694 (cdr g$3372$12696)))) (string-append (car g$3372$12696) g$3372$12692))) '#f)))) (g$3372$12694 (g$3372$12508)))) (g$3372$12510 g$3372$12690))) (lambda (g$3372$12700) (if (procedure? g$3372$12700) g$3372$12700 (error 'file-locator '"not a procedure" g$3372$12700))))) (set! g$3372$12514 (g$3372$12319 (lambda (g$3372$12702) ((lambda (g$3372$12704) (if (string? g$3372$12704) (begin '#f (with-input-from-file g$3372$12704 read)) '#f)) ((g$3372$12512) g$3372$12702))) (lambda (g$3372$12706) (if (procedure? g$3372$12706) g$3372$12706 (error 'library-locator '"not a procedure" g$3372$12706))))) (set! g$3372$12516 (g$3372$12319 (lambda (g$3372$12708) (error 'library-expander '"not initialized")) (lambda (g$3372$12710) (if (procedure? g$3372$12710) g$3372$12710 (error 'library-expander '"not a procedure" g$3372$12710))))) (set! g$3372$12518 (g$3372$12319 '())) (set! g$3372$12520 (lambda (g$3372$12712) (begin (if (member g$3372$12712 (g$3372$12518)) (error '#f '"circular attempt to import library was detected" g$3372$12712) (void)) ((lambda (g$3372$12716 g$3372$12717) ((lambda (g$3372$12720) (dynamic-wind g$3372$12720 (lambda () ((lambda (g$3372$12722) (begin (if g$3372$12722 (void) (error '#f '"cannot find library" g$3372$12712)) ((g$3372$12516) g$3372$12722) ((lambda (g$3372$12724) (if g$3372$12724 g$3372$12724 (begin '#f (error '#f '"handling external library did not yield the currect library" g$3372$12712)))) (g$3372$12506 (lambda (g$3372$12726) (equal? (g$3372$12462 g$3372$12726) g$3372$12712)))))) ((g$3372$12514) g$3372$12712))) g$3372$12720)) (lambda () ((lambda (g$3372$12728) (begin (g$3372$12716 g$3372$12717) (set! g$3372$12717 g$3372$12728))) (g$3372$12716))))) g$3372$12518 (cons g$3372$12712 (g$3372$12518)))))) (set! g$3372$12522 (lambda (g$3372$12730) ((lambda (g$3372$12732) (if g$3372$12732 g$3372$12732 (begin '#f (g$3372$12520 g$3372$12730)))) (g$3372$12506 (lambda (g$3372$12734) (equal? (g$3372$12462 g$3372$12734) g$3372$12730)))))) (set! g$3372$12524 (lambda (g$3372$12736) (if (g$3372$12506 (lambda (g$3372$12738) (equal? (g$3372$12462 g$3372$12738) g$3372$12736))) (begin '#f '#t) '#f))) (set! g$3372$12526 (lambda (g$3372$12740) ((lambda (g$3372$12742) ((lambda (g$3372$12744) (if g$3372$12744 g$3372$12744 (begin '#f (error '#f '"cannot find library with required spec" g$3372$12740)))) (g$3372$12506 (lambda (g$3372$12746) (eq? g$3372$12742 (g$3372$12460 g$3372$12746)))))) (car g$3372$12740)))) (set! g$3372$12528 (make-eq-hashtable)) (set! g$3372$12530 (lambda (g$3372$12748) (begin ((lambda (g$3372$12750) (for-each (lambda (g$3372$12752) ((lambda (g$3372$12754 g$3372$12755) ((lambda (g$3372$12758) (hashtable-set! g$3372$12528 g$3372$12754 g$3372$12758)) ((lambda (g$3372$12760) (if (memv g$3372$12760 '(global)) (cons 'global (cons g$3372$12748 (cdr g$3372$12755))) (if (memv g$3372$12760 '(global-macro)) (cons 'global-macro (cons g$3372$12748 (cdr g$3372$12755))) (if (memv g$3372$12760 '(global-macro!)) (cons 'global-macro! (cons g$3372$12748 (cdr g$3372$12755))) g$3372$12755)))) (car g$3372$12755)))) (car g$3372$12752) (cdr g$3372$12752))) g$3372$12750)) (g$3372$12474 g$3372$12748)) ((g$3372$12453) g$3372$12748)))) (set! g$3372$12532 (lambda (g$3372$12761 g$3372$12762 g$3372$12763 g$3372$12764 g$3372$12765 g$3372$12766 g$3372$12767 g$3372$12768 g$3372$12769 g$3372$12770 g$3372$12771) ((lambda (g$3372$12783 g$3372$12784 g$3372$12785) (begin (if (if (symbol? g$3372$12761) (if (list? g$3372$12762) (begin '#f (list? g$3372$12763)) '#f) '#f) (void) (error 'install-library '"invalid spec with id/name/ver" g$3372$12761 g$3372$12762 g$3372$12763)) (if (g$3372$12524 g$3372$12762) (error 'install-library '"library is already installed" g$3372$12762) (void)) ((lambda (g$3372$12789) (g$3372$12530 g$3372$12789)) (g$3372$12456 g$3372$12761 g$3372$12762 g$3372$12763 g$3372$12783 g$3372$12784 g$3372$12785 g$3372$12767 g$3372$12768 g$3372$12769 g$3372$12770 g$3372$12771)))) (map g$3372$12526 g$3372$12764) (map g$3372$12526 g$3372$12765) (map g$3372$12526 g$3372$12766)))) (set! g$3372$12534 (lambda (g$3372$12791 g$3372$12792 g$3372$12793) (g$3372$12494 g$3372$12791 (cons (cons g$3372$12792 g$3372$12793) (g$3372$12472 g$3372$12791))))) (set! g$3372$12536 (lambda (g$3372$12797 g$3372$12798 g$3372$12799) (begin (g$3372$12496 g$3372$12797 (cons (cons g$3372$12798 g$3372$12799) (g$3372$12474 g$3372$12797))) (hashtable-set! g$3372$12528 g$3372$12798 g$3372$12799)))) (set! g$3372$12538 (lambda (g$3372$12803) (hashtable-ref g$3372$12528 g$3372$12803 '#f))) (set! g$3372$12540 (lambda (g$3372$12805) ((lambda (g$3372$12807) (if (procedure? g$3372$12807) (begin (g$3372$12500 g$3372$12805 (lambda () (error 'invoke '"circularity detected" g$3372$12805))) (for-each g$3372$12540 (g$3372$12470 g$3372$12805)) (g$3372$12500 g$3372$12805 (lambda () (error 'invoke '"first invoke did not return" g$3372$12805))) (g$3372$12807) (g$3372$12500 g$3372$12805 '#t)) (void))) (g$3372$12478 g$3372$12805)))) (set! g$3372$12542 (lambda (g$3372$12809) ((lambda (g$3372$12811) (if (procedure? g$3372$12811) (begin (g$3372$12498 g$3372$12809 (lambda () (error 'visit '"circularity detected" g$3372$12809))) (for-each g$3372$12540 (g$3372$12468 g$3372$12809)) (g$3372$12498 g$3372$12809 (lambda () (error 'invoke '"first visit did not return" g$3372$12809))) (g$3372$12811) (g$3372$12498 g$3372$12809 '#t)) (void))) (g$3372$12476 g$3372$12809)))) (set! g$3372$12544 (lambda (g$3372$12813) (g$3372$12540 (g$3372$12526 g$3372$12813)))) (set! g$3372$12546 (lambda g$3372$12823 ((lambda (g$3372$12824) (if (= g$3372$12824 '1) (apply (lambda (g$3372$12815) (letrec ((g$3372$12817 (lambda (g$3372$12819) (if (null? g$3372$12819) '() (if ((lambda (g$3372$12821) (if g$3372$12821 g$3372$12821 (begin '#f (g$3372$12480 (car g$3372$12819))))) g$3372$12815) (cons (car g$3372$12819) (g$3372$12817 (cdr g$3372$12819))) (g$3372$12817 (cdr g$3372$12819))))))) (g$3372$12817 ((g$3372$12453))))) g$3372$12823) (if (= g$3372$12824 '0) (apply (lambda () (g$3372$12546 '#f)) g$3372$12823) (error 'apply '"invalid arg count")))) (length g$3372$12823)))) (set! g$3372$12548 (lambda (g$3372$12825) (begin (if (g$3372$12458 g$3372$12825) (void) (error 'library-spec '"not a library" g$3372$12825)) (list (g$3372$12460 g$3372$12825) (g$3372$12462 g$3372$12825) (g$3372$12464 g$3372$12825))))) (begin (set! g$3372$12827 g$3372$12548) (set! g$3372$12828 g$3372$12546) (set! g$3372$12829 g$3372$12544) (set! g$3372$12830 g$3372$12542) (set! g$3372$12831 g$3372$12540) (set! g$3372$12832 g$3372$12538) (set! g$3372$12833 g$3372$12536) (set! g$3372$12834 g$3372$12534) (set! g$3372$12835 g$3372$12532) (set! g$3372$12836 g$3372$12530) (set! g$3372$12837 g$3372$12528) (set! g$3372$12838 g$3372$12526) (set! g$3372$12839 g$3372$12524) (set! g$3372$12840 g$3372$12522) (set! g$3372$12841 g$3372$12520) (set! g$3372$12842 g$3372$12518) (set! g$3372$12843 g$3372$12516) (set! g$3372$12844 g$3372$12514) (set! g$3372$12845 g$3372$12512) (set! g$3372$12846 g$3372$12510) (set! g$3372$12847 g$3372$12508) (set! g$3372$12848 g$3372$12506) (set! g$3372$12849 g$3372$12504) (set! g$3372$12850 g$3372$12502) (set! g$3372$12851 g$3372$12500) (set! g$3372$12852 g$3372$12498) (set! g$3372$12853 g$3372$12496) (set! g$3372$12854 g$3372$12494) (set! g$3372$12855 g$3372$12492) (set! g$3372$12856 g$3372$12490) (set! g$3372$12857 g$3372$12488) (set! g$3372$12858 g$3372$12486) (set! g$3372$12859 g$3372$12484) (set! g$3372$12860 g$3372$12482) (set! g$3372$12861 g$3372$12480) (set! g$3372$12862 g$3372$12478) (set! g$3372$12863 g$3372$12476) (set! g$3372$12864 g$3372$12474) (set! g$3372$12865 g$3372$12472) (set! g$3372$12866 g$3372$12470) (set! g$3372$12867 g$3372$12468) (set! g$3372$12868 g$3372$12466) (set! g$3372$12869 g$3372$12464) (set! g$3372$12870 g$3372$12462) (set! g$3372$12871 g$3372$12460) (set! g$3372$12872 g$3372$12458) (set! g$3372$12873 g$3372$12456) (set! g$3372$12874 g$3372$12453) (set! g$3372$12875 g$3372$12451)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$3372$13123 '#f) (define g$3372$13115 '#f) (define g$3372$13114 '#f) (define g$3372$13113 '#f) (define g$3372$13109 '#f) (define g$3372$13108 '#f) (define g$3372$13107 '#f) (define g$3372$13106 '#f) ((lambda (g$3372$12877 g$3372$12954 g$3372$12956 g$3372$12958 g$3372$12996 g$3372$12998 g$3372$13000 g$3372$13002) (begin (set! g$3372$12877 (lambda (g$3372$13004) (cons 'define (cons g$3372$13004 '('#f))))) (set! g$3372$12954 (lambda (g$3372$13006 g$3372$13007 g$3372$13008) (list 'lambda g$3372$13007 g$3372$13008))) (set! g$3372$12956 (lambda (g$3372$13012 g$3372$13013 g$3372$13014) ((lambda (g$3372$13018 g$3372$13020 g$3372$13022 g$3372$13024) (begin (set! g$3372$13018 (lambda (g$3372$13066) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! g$3372$13020 (lambda (g$3372$13050 g$3372$13051 g$3372$13052) (call-with-values (lambda () (letrec ((g$3372$13056 (lambda (g$3372$13058 g$3372$13059) (if (pair? g$3372$13058) (g$3372$13056 (cdr g$3372$13058) (+ g$3372$13059 '1)) (if (null? g$3372$13058) (values g$3372$13059 '=) (values g$3372$13059 '>=)))))) (g$3372$13056 g$3372$13052 '0))) (lambda (g$3372$13062 g$3372$13063) (list (list 'primitive g$3372$13063) g$3372$13051 (list 'quote g$3372$13062)))))) (set! g$3372$13022 (lambda (g$3372$13042 g$3372$13043 g$3372$13044 g$3372$13045) (list '(primitive apply) (g$3372$12954 g$3372$13042 g$3372$13044 g$3372$13045) g$3372$13043))) (set! g$3372$13024 (lambda (g$3372$13026 g$3372$13027 g$3372$13028) ((lambda (g$3372$13032 g$3372$13033) (list 'lambda g$3372$13032 (g$3372$12958 g$3372$13026 (list g$3372$13033) (list (list '(primitive length) g$3372$13032)) (letrec ((g$3372$13036 (lambda (g$3372$13038 g$3372$13039) (if (null? g$3372$13038) (g$3372$13018 g$3372$13026) (list 'if (g$3372$13020 g$3372$13026 g$3372$13033 (car g$3372$13038)) (g$3372$13022 g$3372$13026 g$3372$13032 (car g$3372$13038) (car g$3372$13039)) (g$3372$13036 (cdr g$3372$13038) (cdr g$3372$13039))))))) (g$3372$13036 g$3372$13013 g$3372$13028))))) (gensym) (gensym)))) (if (= (length g$3372$13014) '1) (g$3372$12954 g$3372$13012 (car g$3372$13013) (car g$3372$13014)) (g$3372$13024 g$3372$13012 g$3372$13013 g$3372$13014)))) '#f '#f '#f '#f))) (set! g$3372$12958 (lambda (g$3372$13068 g$3372$13069 g$3372$13070 g$3372$13071) (cons (g$3372$12954 g$3372$13068 g$3372$13069 g$3372$13071) g$3372$13070))) (set! g$3372$12996 (lambda (g$3372$13076 g$3372$13077) (letrec ((g$3372$13080 (lambda (g$3372$13082) (if (null? (cdr g$3372$13082)) (car g$3372$13082) (if (equal? (car g$3372$13082) (g$3372$12998)) (g$3372$13080 (cdr g$3372$13082)) (cons 'begin g$3372$13082)))))) (g$3372$13080 g$3372$13077)))) (set! g$3372$12998 (lambda () '((primitive void)))) (set! g$3372$13000 (lambda (g$3372$13084 g$3372$13085 g$3372$13086 g$3372$13087) (if (null? g$3372$13085) g$3372$13087 (list 'letrec (map list g$3372$13085 g$3372$13086) g$3372$13087)))) (set! g$3372$13002 (lambda (g$3372$13092 g$3372$13093 g$3372$13094 g$3372$13095) (if (null? g$3372$13093) g$3372$13095 (g$3372$12958 g$3372$13092 g$3372$13093 (map (lambda (g$3372$13100) (list 'quote '#f)) g$3372$13093) (g$3372$12996 g$3372$13092 (append (map (lambda (g$3372$13102 g$3372$13103) (list 'set! g$3372$13102 g$3372$13103)) g$3372$13093 g$3372$13094) (list g$3372$13095))))))) (begin (set! g$3372$13106 g$3372$13002) (set! g$3372$13107 g$3372$13000) (set! g$3372$13108 g$3372$12998) (set! g$3372$13109 g$3372$12996) (set! g$3372$13113 g$3372$12958) (set! g$3372$13114 g$3372$12956) (set! g$3372$13115 g$3372$12954) (set! g$3372$13123 g$3372$12877)))) '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$3372$23360 '#f) (define g$3372$23359 '#f) (define g$3372$23357 '#f) (define g$3372$23356 '#f) (define g$3372$23355 '#f) (define g$3372$23354 '#f) (define g$3372$23353 '#f) (define g$3372$23352 '#f) (define g$3372$23351 '#f) (define g$3372$23350 '#f) (define g$3372$23349 '#f) (define g$3372$23348 '#f) (define g$3372$23347 '#f) (define g$3372$23346 '#f) (define g$3372$23345 '#f) (define g$3372$23344 '#f) (define g$3372$23343 '#f) (define g$3372$23342 '#f) (define g$3372$23341 '#f) (define g$3372$23340 '#f) (define g$3372$23339 '#f) (define g$3372$23338 '#f) (define g$3372$23337 '#f) (define g$3372$23336 '#f) (define g$3372$23335 '#f) (define g$3372$23334 '#f) (define g$3372$23333 '#f) (define g$3372$23332 '#f) (define g$3372$23331 '#f) (define g$3372$23330 '#f) (define g$3372$23329 '#f) (define g$3372$23328 '#f) (define g$3372$23327 '#f) (define g$3372$23326 '#f) (define g$3372$23325 '#f) (define g$3372$23324 '#f) (define g$3372$23323 '#f) (define g$3372$23322 '#f) (define g$3372$23321 '#f) (define g$3372$23320 '#f) (define g$3372$23319 '#f) (define g$3372$23318 '#f) (define g$3372$23317 '#f) (define g$3372$23316 '#f) (define g$3372$23315 '#f) (define g$3372$23314 '#f) (define g$3372$23313 '#f) (define g$3372$23312 '#f) (define g$3372$23311 '#f) (define g$3372$23310 '#f) (define g$3372$23309 '#f) (define g$3372$23308 '#f) (define g$3372$23307 '#f) (define g$3372$23306 '#f) (define g$3372$23305 '#f) (define g$3372$23304 '#f) (define g$3372$23303 '#f) (define g$3372$23302 '#f) (define g$3372$23301 '#f) (define g$3372$23300 '#f) (define g$3372$23299 '#f) (define g$3372$23298 '#f) (define g$3372$23297 '#f) (define g$3372$23296 '#f) (define g$3372$23295 '#f) (define g$3372$23293 '#f) (define g$3372$23292 '#f) (define g$3372$23291 '#f) (define g$3372$23289 '#f) (define g$3372$23288 '#f) (define g$3372$23287 '#f) (define g$3372$23286 '#f) (define g$3372$23285 '#f) (define g$3372$23284 '#f) (define g$3372$23283 '#f) (define g$3372$23282 '#f) (define g$3372$23281 '#f) (define g$3372$23280 '#f) (define g$3372$23279 '#f) (define g$3372$23278 '#f) (define g$3372$23277 '#f) (define g$3372$23276 '#f) (define g$3372$23275 '#f) (define g$3372$23274 '#f) (define g$3372$23273 '#f) (define g$3372$23272 '#f) (define g$3372$23271 '#f) (define g$3372$23270 '#f) (define g$3372$23269 '#f) (define g$3372$23268 '#f) (define g$3372$23267 '#f) (define g$3372$23266 '#f) (define g$3372$23265 '#f) (define g$3372$23264 '#f) (define g$3372$23263 '#f) (define g$3372$23262 '#f) (define g$3372$23261 '#f) (define g$3372$23260 '#f) (define g$3372$23259 '#f) (define g$3372$23258 '#f) (define g$3372$23257 '#f) (define g$3372$23256 '#f) (define g$3372$23255 '#f) (define g$3372$23254 '#f) (define g$3372$23253 '#f) (define g$3372$23252 '#f) (define g$3372$23251 '#f) (define g$3372$23250 '#f) (define g$3372$23249 '#f) (define g$3372$23248 '#f) (define g$3372$23247 '#f) (define g$3372$23246 '#f) (define g$3372$23245 '#f) (define g$3372$23244 '#f) (define g$3372$23243 '#f) (define g$3372$23242 '#f) (define g$3372$23241 '#f) (define g$3372$23240 '#f) (define g$3372$23239 '#f) (define g$3372$23238 '#f) (define g$3372$23237 '#f) (define g$3372$23236 '#f) (define g$3372$23235 '#f) (define g$3372$23234 '#f) (define g$3372$23233 '#f) (define g$3372$23232 '#f) (define g$3372$23231 '#f) (define g$3372$23230 '#f) (define g$3372$23229 '#f) (define g$3372$23228 '#f) (define g$3372$23227 '#f) (define g$3372$23226 '#f) (define g$3372$23225 '#f) (define g$3372$23224 '#f) (define g$3372$23223 '#f) (define g$3372$23222 '#f) (define g$3372$23221 '#f) (define g$3372$23220 '#f) (define g$3372$23219 '#f) (define g$3372$23218 '#f) (define g$3372$23217 '#f) (define g$3372$23216 '#f) (define g$3372$23215 '#f) (define g$3372$23214 '#f) (define g$3372$23213 '#f) (define g$3372$23212 '#f) (define g$3372$23211 '#f) (define g$3372$23210 '#f) (define g$3372$23209 '#f) (define g$3372$23208 '#f) (define g$3372$23207 '#f) (define g$3372$23206 '#f) (define g$3372$23205 '#f) (define g$3372$23204 '#f) (define g$3372$23203 '#f) (define g$3372$23202 '#f) (define g$3372$23201 '#f) (define g$3372$23200 '#f) (define g$3372$23199 '#f) (define g$3372$23198 '#f) (define g$3372$23197 '#f) (define g$3372$23196 '#f) (define g$3372$23195 '#f) (define g$3372$23194 '#f) (define g$3372$23193 '#f) (define g$3372$23192 '#f) (define g$3372$23191 '#f) (define g$3372$23190 '#f) (define g$3372$23189 '#f) (define g$3372$23188 '#f) (define g$3372$23187 '#f) (define g$3372$23186 '#f) (define g$3372$23185 '#f) (define g$3372$23184 '#f) (define g$3372$23183 '#f) (define g$3372$23182 '#f) (define g$3372$23181 '#f) (define g$3372$23180 '#f) (define g$3372$23179 '#f) (define g$3372$23178 '#f) (define g$3372$23177 '#f) (define g$3372$23176 '#f) (define g$3372$23175 '#f) (define g$3372$23174 '#f) (define g$3372$23173 '#f) (define g$3372$23172 '#f) (define g$3372$23171 '#f) (define g$3372$23170 '#f) (define g$3372$23169 '#f) ((lambda (g$3372$13125 g$3372$13127 g$3372$13132 g$3372$13134 g$3372$13136 g$3372$13138 g$3372$13140 g$3372$13143 g$3372$13145 g$3372$13147 g$3372$13149 g$3372$13151 g$3372$13153 g$3372$13155 g$3372$13157 g$3372$13159 g$3372$13161 g$3372$13163 g$3372$13165 g$3372$13167 g$3372$13169 g$3372$13171 g$3372$13173 g$3372$13176 g$3372$13178 g$3372$13180 g$3372$13182 g$3372$13184 g$3372$13186 g$3372$13188 g$3372$13190 g$3372$13192 g$3372$13194 g$3372$13196 g$3372$13198 g$3372$13200 g$3372$13202 g$3372$13204 g$3372$13206 g$3372$13208 g$3372$13210 g$3372$13212 g$3372$13214 g$3372$13216 g$3372$13218 g$3372$13220 g$3372$13222 g$3372$13224 g$3372$13226 g$3372$13228 g$3372$13230 g$3372$13232 g$3372$13234 g$3372$13236 g$3372$13238 g$3372$13240 g$3372$13242 g$3372$13244 g$3372$13246 g$3372$13248 g$3372$13250 g$3372$13252 g$3372$13254 g$3372$13256 g$3372$13258 g$3372$13272 g$3372$13274 g$3372$13276 g$3372$13475 g$3372$13477 g$3372$13479 g$3372$13481 g$3372$13483 g$3372$13485 g$3372$13487 g$3372$13489 g$3372$13491 g$3372$13493 g$3372$13495 g$3372$13497 g$3372$13499 g$3372$13501 g$3372$13503 g$3372$13505 g$3372$13507 g$3372$13509 g$3372$13511 g$3372$13513 g$3372$13515 g$3372$13517 g$3372$13519 g$3372$13521 g$3372$13523 g$3372$13525 g$3372$13527 g$3372$13529 g$3372$13531 g$3372$13533 g$3372$13535 g$3372$13537 g$3372$13539 g$3372$13541 g$3372$13543 g$3372$13545 g$3372$13547 g$3372$13549 g$3372$13551 g$3372$13553 g$3372$13555 g$3372$13557 g$3372$13559 g$3372$13561 g$3372$13563 g$3372$13565 g$3372$13567 g$3372$13569 g$3372$13571 g$3372$13573 g$3372$13575 g$3372$13577 g$3372$13579 g$3372$13581 g$3372$13583 g$3372$13585 g$3372$13587 g$3372$13589 g$3372$13591 g$3372$13593 g$3372$13595 g$3372$13597 g$3372$13599 g$3372$13601 g$3372$13603 g$3372$13605 g$3372$13607 g$3372$13609 g$3372$13611 g$3372$13613 g$3372$13615 g$3372$13617 g$3372$13619 g$3372$13621 g$3372$13623 g$3372$13625 g$3372$13627 g$3372$13629 g$3372$13631 g$3372$13633 g$3372$13635 g$3372$13637 g$3372$13639 g$3372$13641 g$3372$13643 g$3372$13645 g$3372$13647 g$3372$13649 g$3372$13651 g$3372$13653 g$3372$13655 g$3372$13657 g$3372$13660 g$3372$13662 g$3372$13664 g$3372$13666 g$3372$13668 g$3372$13670 g$3372$13672 g$3372$13674 g$3372$13676 g$3372$13678 g$3372$13680 g$3372$13682 g$3372$13684 g$3372$13686 g$3372$13688 g$3372$13690 g$3372$13692 g$3372$13694 g$3372$13696 g$3372$13698 g$3372$13700 g$3372$13702 g$3372$13704 g$3372$13706 g$3372$13708 g$3372$13710 g$3372$13712 g$3372$13714 g$3372$13716) (begin (set! g$3372$13125 (lambda (g$3372$13718 g$3372$13719) (if (memq g$3372$13718 g$3372$13719) g$3372$13719 (cons g$3372$13718 g$3372$13719)))) (set! g$3372$13127 (lambda (g$3372$13722 g$3372$13723) (if (null? g$3372$13722) g$3372$13723 (if (memq (car g$3372$13722) g$3372$13723) (g$3372$13127 (cdr g$3372$13722) g$3372$13723) (cons (car g$3372$13722) (g$3372$13127 (cdr g$3372$13722) g$3372$13723)))))) (set! g$3372$13132 '(top)) (set! g$3372$13134 (lambda (g$3372$13726) (memq 'top g$3372$13726))) (set! g$3372$13136 (lambda (g$3372$13728) (if (symbol? g$3372$13728) (gensym g$3372$13728) (if (g$3372$13178 g$3372$13728) (g$3372$13136 (g$3372$13228 g$3372$13728)) (error 'gen-lexical '"BUG: invalid arg" g$3372$13728))))) (set! g$3372$13138 (lambda (g$3372$13730) (g$3372$13136 g$3372$13730))) (set! g$3372$13140 (lambda (g$3372$13732) (gensym))) (set! g$3372$13143 (lambda (g$3372$13734 g$3372$13735 g$3372$13736 g$3372$13737) (vector 'g$3372$13142 g$3372$13734 g$3372$13735 g$3372$13736 g$3372$13737))) (set! g$3372$13145 (lambda (g$3372$13742) (if (vector? g$3372$13742) (if (= (vector-length g$3372$13742) (+ '1 (length '(sym* mark** label* sealed/freq)))) (begin '#f (eq? (vector-ref g$3372$13742 '0) 'g$3372$13142)) '#f) '#f))) (set! g$3372$13147 (lambda (g$3372$13744) (if (g$3372$13145 g$3372$13744) (vector-ref g$3372$13744 '1) (error 'rib-sym* '"~s is not of type ~s" g$3372$13744 'rib)))) (set! g$3372$13149 (lambda (g$3372$13746) (if (g$3372$13145 g$3372$13746) (vector-ref g$3372$13746 '2) (error 'rib-mark** '"~s is not of type ~s" g$3372$13746 'rib)))) (set! g$3372$13151 (lambda (g$3372$13748) (if (g$3372$13145 g$3372$13748) (vector-ref g$3372$13748 '3) (error 'rib-label* '"~s is not of type ~s" g$3372$13748 'rib)))) (set! g$3372$13153 (lambda (g$3372$13750) (if (g$3372$13145 g$3372$13750) (vector-ref g$3372$13750 '4) (error 'rib-sealed/freq '"~s is not of type ~s" g$3372$13750 'rib)))) (set! g$3372$13155 (lambda (g$3372$13752 g$3372$13753) (if (g$3372$13145 g$3372$13752) (vector-set! g$3372$13752 '1 g$3372$13753) (error 'set-rib-sym*! '"~s is not of type ~s" g$3372$13752 'rib)))) (set! g$3372$13157 (lambda (g$3372$13756 g$3372$13757) (if (g$3372$13145 g$3372$13756) (vector-set! g$3372$13756 '2 g$3372$13757) (error 'set-rib-mark**! '"~s is not of type ~s" g$3372$13756 'rib)))) (set! g$3372$13159 (lambda (g$3372$13760 g$3372$13761) (if (g$3372$13145 g$3372$13760) (vector-set! g$3372$13760 '3 g$3372$13761) (error 'set-rib-label*! '"~s is not of type ~s" g$3372$13760 'rib)))) (set! g$3372$13161 (lambda (g$3372$13764 g$3372$13765) (if (g$3372$13145 g$3372$13764) (vector-set! g$3372$13764 '4 g$3372$13765) (error 'set-rib-sealed/freq! '"~s is not of type ~s" g$3372$13764 'rib)))) (set! g$3372$13163 (lambda () (g$3372$13143 '() '() '() '#f))) (set! g$3372$13165 (lambda (g$3372$13768 g$3372$13769 g$3372$13770) ((lambda (g$3372$13774) (begin (set! g$3372$13774 (lambda (g$3372$13776 g$3372$13777 g$3372$13778 g$3372$13779) (if (pair? g$3372$13778) (begin '#f ((lambda (g$3372$13784) (if g$3372$13784 g$3372$13784 (begin '#f (g$3372$13774 g$3372$13776 g$3372$13777 (cdr g$3372$13778) (cdr g$3372$13779))))) (if (eq? g$3372$13776 (car g$3372$13778)) (begin '#f (g$3372$13230 g$3372$13777 (car g$3372$13779))) '#f))) '#f))) (begin (if (g$3372$13153 g$3372$13768) (error 'extend-rib! '"rib is sealed" g$3372$13768) (void)) ((lambda (g$3372$13786 g$3372$13787) ((lambda (g$3372$13790) (begin (if (if (memq g$3372$13786 (g$3372$13147 g$3372$13768)) (begin '#f (g$3372$13774 g$3372$13786 g$3372$13787 g$3372$13790 (g$3372$13149 g$3372$13768))) '#f) (error 'expander '"cannot redefine" (g$3372$13244 g$3372$13769 '())) (void)) (g$3372$13155 g$3372$13768 (cons g$3372$13786 g$3372$13790)) (g$3372$13157 g$3372$13768 (cons g$3372$13787 (g$3372$13149 g$3372$13768))) (g$3372$13159 g$3372$13768 (cons g$3372$13770 (g$3372$13151 g$3372$13768))))) (g$3372$13147 g$3372$13768))) (g$3372$13228 g$3372$13769) (g$3372$13182 g$3372$13769))))) '#f))) (set! g$3372$13167 (lambda (g$3372$13792) ((lambda (g$3372$13794) (if (null? g$3372$13794) (void) ((lambda (g$3372$13796) (begin (g$3372$13155 g$3372$13792 g$3372$13796) (g$3372$13157 g$3372$13792 (list->vector (g$3372$13149 g$3372$13792))) (g$3372$13159 g$3372$13792 (list->vector (g$3372$13151 g$3372$13792))) (g$3372$13161 g$3372$13792 (make-vector (vector-length g$3372$13796) '0)))) (list->vector g$3372$13794)))) (g$3372$13147 g$3372$13792)))) (set! g$3372$13169 (lambda (g$3372$13798) (if (g$3372$13153 g$3372$13798) (begin (g$3372$13161 g$3372$13798 '#f) (g$3372$13155 g$3372$13798 (vector->list (g$3372$13147 g$3372$13798))) (g$3372$13157 g$3372$13798 (vector->list (g$3372$13149 g$3372$13798))) (g$3372$13159 g$3372$13798 (vector->list (g$3372$13151 g$3372$13798)))) (void)))) (set! g$3372$13171 (lambda (g$3372$13800 g$3372$13801) ((lambda (g$3372$13804) ((lambda (g$3372$13806) ((lambda (g$3372$13808) (begin (vector-set! g$3372$13804 g$3372$13808 (+ g$3372$13806 '1)) (if (= g$3372$13808 g$3372$13801) (void) ((lambda (g$3372$13810 g$3372$13811 g$3372$13812) (begin ((lambda (g$3372$13816) (begin (vector-set! g$3372$13810 g$3372$13801 (vector-ref g$3372$13810 g$3372$13808)) (vector-set! g$3372$13810 g$3372$13808 g$3372$13816))) (vector-ref g$3372$13810 g$3372$13801)) ((lambda (g$3372$13818) (begin (vector-set! g$3372$13811 g$3372$13801 (vector-ref g$3372$13811 g$3372$13808)) (vector-set! g$3372$13811 g$3372$13808 g$3372$13818))) (vector-ref g$3372$13811 g$3372$13801)) ((lambda (g$3372$13820) (begin (vector-set! g$3372$13812 g$3372$13801 (vector-ref g$3372$13812 g$3372$13808)) (vector-set! g$3372$13812 g$3372$13808 g$3372$13820))) (vector-ref g$3372$13812 g$3372$13801)))) (g$3372$13147 g$3372$13800) (g$3372$13149 g$3372$13800) (g$3372$13151 g$3372$13800))))) (letrec ((g$3372$13822 (lambda (g$3372$13824) (if (zero? g$3372$13824) '0 ((lambda (g$3372$13826) (if (= g$3372$13806 (vector-ref g$3372$13804 g$3372$13826)) (g$3372$13822 g$3372$13826) g$3372$13824)) (- g$3372$13824 '1)))))) (g$3372$13822 g$3372$13801)))) (vector-ref g$3372$13804 g$3372$13801))) (g$3372$13153 g$3372$13800)))) (set! g$3372$13173 (lambda (g$3372$13828 g$3372$13829) (g$3372$13143 (map g$3372$13228 g$3372$13828) (map g$3372$13182 g$3372$13828) g$3372$13829 '#f))) (set! g$3372$13176 (lambda (g$3372$13832 g$3372$13833 g$3372$13834) (vector 'g$3372$13175 g$3372$13832 g$3372$13833 g$3372$13834))) (set! g$3372$13178 (lambda (g$3372$13838) (if (vector? g$3372$13838) (if (= (vector-length g$3372$13838) (+ '1 (length '(expr mark* subst*)))) (begin '#f (eq? (vector-ref g$3372$13838 '0) 'g$3372$13175)) '#f) '#f))) (set! g$3372$13180 (lambda (g$3372$13840) (if (g$3372$13178 g$3372$13840) (vector-ref g$3372$13840 '1) (error 'stx-expr '"~s is not of type ~s" g$3372$13840 'stx)))) (set! g$3372$13182 (lambda (g$3372$13842) (if (g$3372$13178 g$3372$13842) (vector-ref g$3372$13842 '2) (error 'stx-mark* '"~s is not of type ~s" g$3372$13842 'stx)))) (set! g$3372$13184 (lambda (g$3372$13844) (if (g$3372$13178 g$3372$13844) (vector-ref g$3372$13844 '3) (error 'stx-subst* '"~s is not of type ~s" g$3372$13844 'stx)))) (set! g$3372$13186 (lambda (g$3372$13846 g$3372$13847) (if (g$3372$13178 g$3372$13846) (vector-set! g$3372$13846 '1 g$3372$13847) (error 'set-stx-expr! '"~s is not of type ~s" g$3372$13846 'stx)))) (set! g$3372$13188 (lambda (g$3372$13850 g$3372$13851) (if (g$3372$13178 g$3372$13850) (vector-set! g$3372$13850 '2 g$3372$13851) (error 'set-stx-mark*! '"~s is not of type ~s" g$3372$13850 'stx)))) (set! g$3372$13190 (lambda (g$3372$13854 g$3372$13855) (if (g$3372$13178 g$3372$13854) (vector-set! g$3372$13854 '3 g$3372$13855) (error 'set-stx-subst*! '"~s is not of type ~s" g$3372$13854 'stx)))) (set! g$3372$13192 (lambda (g$3372$13858 g$3372$13859) (g$3372$13176 g$3372$13859 (g$3372$13182 g$3372$13858) (g$3372$13184 g$3372$13858)))) (set! g$3372$13194 (lambda () (string '#\m))) (set! g$3372$13196 '#f) (set! g$3372$13198 not) (set! g$3372$13200 (lambda (g$3372$13862 g$3372$13863 g$3372$13864) ((lambda (g$3372$13868) (begin (set! g$3372$13868 (lambda (g$3372$13870 g$3372$13871) (letrec ((g$3372$13874 (lambda (g$3372$13876 g$3372$13877) (if (null? g$3372$13877) (cdr g$3372$13871) (cons g$3372$13876 (g$3372$13874 (car g$3372$13877) (cdr g$3372$13877))))))) (g$3372$13874 (car g$3372$13870) (cdr g$3372$13870))))) ((lambda (g$3372$13880 g$3372$13881) (if (if (not (null? g$3372$13862)) (if (not (null? g$3372$13880)) (begin '#f (g$3372$13198 (car g$3372$13880))) '#f) '#f) (values (g$3372$13868 g$3372$13862 g$3372$13880) (g$3372$13868 g$3372$13863 g$3372$13881)) (values (append g$3372$13862 g$3372$13880) (append g$3372$13863 g$3372$13881)))) (g$3372$13182 g$3372$13864) (g$3372$13184 g$3372$13864)))) '#f))) (set! g$3372$13202 (lambda (g$3372$13884 g$3372$13885 g$3372$13886) (if (g$3372$13178 g$3372$13884) (call-with-values (lambda () (g$3372$13200 g$3372$13885 g$3372$13886 g$3372$13884)) (lambda (g$3372$13890 g$3372$13891) (g$3372$13176 (g$3372$13180 g$3372$13884) g$3372$13890 g$3372$13891))) (g$3372$13176 g$3372$13884 g$3372$13885 g$3372$13886)))) (set! g$3372$13204 (lambda (g$3372$13894 g$3372$13895) (g$3372$13202 g$3372$13895 (list g$3372$13894) '(shift)))) (set! g$3372$13206 (lambda (g$3372$13898 g$3372$13899) (g$3372$13202 g$3372$13899 '() (list g$3372$13898)))) (set! g$3372$13208 (lambda (g$3372$13902 g$3372$13903) (if (g$3372$13178 g$3372$13902) (g$3372$13208 (g$3372$13180 g$3372$13902) g$3372$13903) (g$3372$13903 g$3372$13902)))) (set! g$3372$13210 (lambda (g$3372$13906) (if (g$3372$13178 g$3372$13906) ((lambda (g$3372$13908 g$3372$13909 g$3372$13910) (map (lambda (g$3372$13914) (g$3372$13202 g$3372$13914 g$3372$13909 g$3372$13910)) g$3372$13908)) (g$3372$13210 (g$3372$13180 g$3372$13906)) (g$3372$13182 g$3372$13906) (g$3372$13184 g$3372$13906)) (if (vector? g$3372$13906) (vector->list g$3372$13906) (error 'syntax-vector->list '"not a syntax vector" g$3372$13906))))) (set! g$3372$13212 (lambda (g$3372$13916) (g$3372$13208 g$3372$13916 pair?))) (set! g$3372$13214 (lambda (g$3372$13918) (g$3372$13208 g$3372$13918 vector?))) (set! g$3372$13216 (lambda (g$3372$13920) (g$3372$13208 g$3372$13920 null?))) (set! g$3372$13218 (lambda (g$3372$13922) ((lambda (g$3372$13924) (if g$3372$13924 g$3372$13924 (begin '#f (if (g$3372$13212 g$3372$13922) (begin '#f (g$3372$13218 (g$3372$13224 g$3372$13922))) '#f)))) (g$3372$13216 g$3372$13922)))) (set! g$3372$13220 (lambda (g$3372$13926) (if (g$3372$13178 g$3372$13926) (g$3372$13202 (g$3372$13220 (g$3372$13180 g$3372$13926)) (g$3372$13182 g$3372$13926) (g$3372$13184 g$3372$13926)) (if (pair? g$3372$13926) (car g$3372$13926) (error 'syntax-car '"not a pair" g$3372$13926))))) (set! g$3372$13222 (lambda (g$3372$13928) (if (g$3372$13212 g$3372$13928) (cons (g$3372$13220 g$3372$13928) (g$3372$13222 (g$3372$13224 g$3372$13928))) (if (g$3372$13216 g$3372$13928) '() (error 'syntax->list '"invalid argument" g$3372$13928))))) (set! g$3372$13224 (lambda (g$3372$13930) (if (g$3372$13178 g$3372$13930) (g$3372$13202 (g$3372$13224 (g$3372$13180 g$3372$13930)) (g$3372$13182 g$3372$13930) (g$3372$13184 g$3372$13930)) (if (pair? g$3372$13930) (cdr g$3372$13930) (error 'syntax-cdr '"not a pair" g$3372$13930))))) (set! g$3372$13226 (lambda (g$3372$13932) (g$3372$13208 g$3372$13932 symbol?))) (set! g$3372$13228 (lambda (g$3372$13934) (if (g$3372$13178 g$3372$13934) (g$3372$13228 (g$3372$13180 g$3372$13934)) (if (symbol? g$3372$13934) g$3372$13934 (error 'id->sym '"not an id" g$3372$13934))))) (set! g$3372$13230 (lambda (g$3372$13936 g$3372$13937) ((lambda (g$3372$13940) (if g$3372$13940 g$3372$13940 (begin '#f (if (pair? g$3372$13936) (if (pair? g$3372$13937) (if (eq? (car g$3372$13936) (car g$3372$13937)) (begin '#f (g$3372$13230 (cdr g$3372$13936) (cdr g$3372$13937))) '#f) '#f) '#f)))) (if (null? g$3372$13936) (begin '#f (null? g$3372$13937)) '#f)))) (set! g$3372$13232 (lambda (g$3372$13942 g$3372$13943) (if (eq? (g$3372$13228 g$3372$13942) (g$3372$13228 g$3372$13943)) (begin '#f (g$3372$13230 (g$3372$13182 g$3372$13942) (g$3372$13182 g$3372$13943))) '#f))) (set! g$3372$13234 (lambda (g$3372$13946 g$3372$13947) ((lambda (g$3372$13950 g$3372$13951) (if ((lambda (g$3372$13954) (if g$3372$13954 g$3372$13954 (begin '#f g$3372$13951))) g$3372$13950) (eq? g$3372$13950 g$3372$13951) (eq? (g$3372$13228 g$3372$13946) (g$3372$13228 g$3372$13947)))) (g$3372$13248 g$3372$13946) (g$3372$13248 g$3372$13947)))) (set! g$3372$13236 (lambda (g$3372$13956) (if (for-all g$3372$13226 g$3372$13956) (begin '#f (g$3372$13238 g$3372$13956)) '#f))) (set! g$3372$13238 (lambda (g$3372$13958) ((lambda (g$3372$13960) (if g$3372$13960 g$3372$13960 (begin '#f (if (not (g$3372$13240 (car g$3372$13958) (cdr g$3372$13958))) (begin '#f (g$3372$13238 (cdr g$3372$13958))) '#f)))) (null? g$3372$13958)))) (set! g$3372$13240 (lambda (g$3372$13962 g$3372$13963) (if (pair? g$3372$13963) (begin '#f ((lambda (g$3372$13966) (if g$3372$13966 g$3372$13966 (begin '#f (g$3372$13240 g$3372$13962 (cdr g$3372$13963))))) (g$3372$13232 g$3372$13962 (car g$3372$13963)))) '#f))) (set! g$3372$13242 (lambda (g$3372$13968) ((lambda (g$3372$13970) (if g$3372$13970 g$3372$13970 ((lambda (g$3372$13972) (if g$3372$13972 g$3372$13972 ((lambda (g$3372$13974) (if g$3372$13974 g$3372$13974 (begin '#f (boolean? g$3372$13968)))) (char? g$3372$13968)))) (string? g$3372$13968)))) (number? g$3372$13968)))) (set! g$3372$13244 (lambda (g$3372$13976 g$3372$13977) (if (g$3372$13134 g$3372$13977) g$3372$13976 (letrec ((g$3372$13980 (lambda (g$3372$13982) (if (g$3372$13178 g$3372$13982) (g$3372$13244 (g$3372$13180 g$3372$13982) (g$3372$13182 g$3372$13982)) (if (pair? g$3372$13982) ((lambda (g$3372$13984 g$3372$13985) (if (if (eq? g$3372$13984 (car g$3372$13982)) (begin '#f (eq? g$3372$13985 (cdr g$3372$13982))) '#f) g$3372$13982 (cons g$3372$13984 g$3372$13985))) (g$3372$13980 (car g$3372$13982)) (g$3372$13980 (cdr g$3372$13982))) (if (vector? g$3372$13982) ((lambda (g$3372$13988) ((lambda (g$3372$13990) (if (for-all eq? g$3372$13988 g$3372$13990) g$3372$13982 (list->vector g$3372$13990))) (map g$3372$13980 g$3372$13988))) (vector->list g$3372$13982)) g$3372$13982)))))) (g$3372$13980 g$3372$13976))))) (set! g$3372$13246 (lambda (g$3372$13992) (g$3372$13244 g$3372$13992 '()))) (set! g$3372$13248 (lambda (g$3372$13994) ((lambda (g$3372$13996) (letrec ((g$3372$13998 (lambda (g$3372$14000 g$3372$14001) (if (null? g$3372$14000) (g$3372$13714 g$3372$13996) (if (eq? (car g$3372$14000) 'shift) (g$3372$13998 (cdr g$3372$14000) (cdr g$3372$14001)) ((lambda (g$3372$14004) (if (g$3372$13153 g$3372$14004) ((lambda (g$3372$14006) (letrec ((g$3372$14008 (lambda (g$3372$14010 g$3372$14011) (if (= g$3372$14010 g$3372$14011) (g$3372$13998 (cdr g$3372$14000) g$3372$14001) (if (if (eq? (vector-ref g$3372$14006 g$3372$14010) g$3372$13996) (begin '#f (g$3372$13230 g$3372$14001 (vector-ref (g$3372$13149 g$3372$14004) g$3372$14010))) '#f) ((lambda (g$3372$14014) (begin (g$3372$13171 g$3372$14004 g$3372$14010) g$3372$14014)) (vector-ref (g$3372$13151 g$3372$14004) g$3372$14010)) (g$3372$14008 (+ g$3372$14010 '1) g$3372$14011)))))) (g$3372$14008 '0 (vector-length g$3372$14006)))) (g$3372$13147 g$3372$14004)) (letrec ((g$3372$14016 (lambda (g$3372$14018 g$3372$14019 g$3372$14020) (if (null? g$3372$14018) (g$3372$13998 (cdr g$3372$14000) g$3372$14001) (if (if (eq? (car g$3372$14018) g$3372$13996) (begin '#f (g$3372$13230 (car g$3372$14019) g$3372$14001)) '#f) (car g$3372$14020) (g$3372$14016 (cdr g$3372$14018) (cdr g$3372$14019) (cdr g$3372$14020))))))) (g$3372$14016 (g$3372$13147 g$3372$14004) (g$3372$13149 g$3372$14004) (g$3372$13151 g$3372$14004))))) (car g$3372$14000))))))) (g$3372$13998 (g$3372$13184 g$3372$13994) (g$3372$13182 g$3372$13994)))) (g$3372$13228 g$3372$13994)))) (set! g$3372$13250 (lambda (g$3372$14024 g$3372$14025) ((lambda (g$3372$14028) (if g$3372$14028 ((lambda (g$3372$14030) (if (if (pair? g$3372$14030) (begin '#f (eq? (car g$3372$14030) '$core-rtd)) '#f) (cons '$rtd (map g$3372$13513 (cdr g$3372$14030))) g$3372$14030)) g$3372$14028) ((lambda (g$3372$14032) (if g$3372$14032 (cdr g$3372$14032) '(displaced-lexical . #f))) (assq g$3372$14024 g$3372$14025)))) (g$3372$12832 g$3372$14024)))) (set! g$3372$13252 cons) (set! g$3372$13254 car) (set! g$3372$13256 cdr) (set! g$3372$13258 (lambda (g$3372$14034 g$3372$14035) (if (g$3372$13226 g$3372$14034) ((lambda (g$3372$14038) ((lambda (g$3372$14040) ((lambda (g$3372$14042) ((lambda (g$3372$14044) ((lambda () (begin (if g$3372$14040 (void) (error 'expander '"unbound identifier" (g$3372$13244 g$3372$14034 '()))) ((lambda (g$3372$14046) (if (memv g$3372$14046 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd)) (values g$3372$14044 (g$3372$13256 g$3372$14042) g$3372$14038) (values 'other '#f '#f))) g$3372$14044))))) (g$3372$13254 g$3372$14042))) (g$3372$13250 g$3372$14040 g$3372$14035))) (g$3372$13248 g$3372$14038))) g$3372$14034) (if (g$3372$13212 g$3372$14034) ((lambda (g$3372$14047) (if (g$3372$13226 g$3372$14047) ((lambda (g$3372$14049) ((lambda (g$3372$14051) ((lambda (g$3372$14053) ((lambda () (begin (if g$3372$14049 (void) (error 'expander '"unbound identifier" (g$3372$13244 g$3372$14034 '()))) ((lambda (g$3372$14055) (if (memv g$3372$14055 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import $core-rtd)) (values g$3372$14053 (g$3372$13256 g$3372$14051) g$3372$14047) (values 'call '#f '#f))) g$3372$14053))))) (g$3372$13254 g$3372$14051))) (g$3372$13250 g$3372$14049 g$3372$14035))) (g$3372$13248 g$3372$14047)) (values 'call '#f '#f))) (g$3372$13220 g$3372$14034)) ((lambda (g$3372$14056) (if (g$3372$13242 g$3372$14056) (values 'constant g$3372$14056 '#f) (values 'other '#f '#f))) (g$3372$13246 g$3372$14034)))))) (set! g$3372$13272 (lambda (g$3372$14058 g$3372$14059) (if (procedure? g$3372$14058) (cons* 'local-macro g$3372$14058 g$3372$14059) (if (if (pair? g$3372$14058) (if (eq? (car g$3372$14058) 'macro!) (begin '#f (procedure? (cdr g$3372$14058))) '#f) '#f) (cons* 'local-macro! (cdr g$3372$14058) g$3372$14059) (if (if (pair? g$3372$14058) (begin '#f (eq? (car g$3372$14058) '$rtd)) '#f) g$3372$14058 (error 'expand '"invalid transformer" g$3372$14058)))))) (set! g$3372$13274 (lambda (g$3372$14062) (if (procedure? g$3372$14062) (cons 'macro! g$3372$14062) (error 'make-variable-transformer '"not a procedure" g$3372$14062)))) (set! g$3372$13276 (lambda (g$3372$14064) (g$3372$13272 (eval-core (g$3372$12393 g$3372$14064)) g$3372$14064))) (set! g$3372$13475 (lambda (g$3372$14066) ((lambda (g$3372$14068) ((lambda (g$3372$14070) (if (if g$3372$14070 (begin '#f (apply (lambda (g$3372$14072 g$3372$14073 g$3372$14074 g$3372$14075) (g$3372$13226 g$3372$14072)) g$3372$14070)) '#f) (apply (lambda (g$3372$14080 g$3372$14081 g$3372$14082 g$3372$14083) (values g$3372$14080 (cons 'defun (cons g$3372$14081 (cons g$3372$14082 g$3372$14083))))) g$3372$14070) ((lambda (g$3372$14088) ((lambda (g$3372$14090) (if (if g$3372$14090 (begin '#f (apply (lambda (g$3372$14092 g$3372$14093) (g$3372$13226 g$3372$14092)) g$3372$14090)) '#f) (apply (lambda (g$3372$14096 g$3372$14097) (values g$3372$14096 (cons 'expr g$3372$14097))) g$3372$14090) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14088 '())))) ((lambda (g$3372$14100) (if (g$3372$13212 g$3372$14100) (begin '#f ((lambda (g$3372$14102) (if g$3372$14102 (begin '#f ((lambda (g$3372$14104) (if g$3372$14104 (begin '#f (append g$3372$14102 g$3372$14104)) '#f)) ((lambda (g$3372$14106) (if (g$3372$13212 g$3372$14106) (begin '#f ((lambda (g$3372$14108) (if g$3372$14108 (begin '#f ((lambda (g$3372$14110) (if g$3372$14110 (begin '#f (append g$3372$14108 g$3372$14110)) '#f)) ((lambda (g$3372$14112) (if (g$3372$13212 g$3372$14112) (begin '#f ((lambda (g$3372$14114) (if g$3372$14114 (begin '#f ((lambda (g$3372$14116) (if g$3372$14116 (begin '#f (append g$3372$14114 g$3372$14116)) '#f)) ((lambda (g$3372$14118) (if (equal? (g$3372$13246 g$3372$14118) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$14112)))) '#f)) ((lambda (g$3372$14120) (list g$3372$14120)) (g$3372$13220 g$3372$14112)))) '#f)) (g$3372$13224 g$3372$14106)))) '#f)) ((lambda (g$3372$14122) (list g$3372$14122)) (g$3372$13220 g$3372$14106)))) '#f)) (g$3372$13224 g$3372$14100)))) '#f)) ((lambda (g$3372$14124) '()) (g$3372$13220 g$3372$14100)))) '#f)) g$3372$14088))) g$3372$14068))) ((lambda (g$3372$14126) (if (g$3372$13212 g$3372$14126) (begin '#f ((lambda (g$3372$14128) (if g$3372$14128 (begin '#f ((lambda (g$3372$14130) (if g$3372$14130 (begin '#f (append g$3372$14128 g$3372$14130)) '#f)) ((lambda (g$3372$14132) (if (g$3372$13212 g$3372$14132) (begin '#f ((lambda (g$3372$14134) (if g$3372$14134 (begin '#f ((lambda (g$3372$14136) (if g$3372$14136 (begin '#f (append g$3372$14134 g$3372$14136)) '#f)) ((lambda (g$3372$14138) (if (g$3372$13212 g$3372$14138) (begin '#f ((lambda (g$3372$14140) (if g$3372$14140 (begin '#f ((lambda (g$3372$14142) (if g$3372$14142 (begin '#f (append g$3372$14140 g$3372$14142)) '#f)) ((letrec ((g$3372$14144 (lambda (g$3372$14146) (if (g$3372$13212 g$3372$14146) ((lambda (g$3372$14148) (if g$3372$14148 (begin '#f ((lambda (g$3372$14150) (if g$3372$14150 (begin '#f (map cons g$3372$14148 g$3372$14150)) '#f)) (g$3372$14144 (g$3372$13224 g$3372$14146)))) '#f)) ((lambda (g$3372$14152) (list g$3372$14152)) (g$3372$13220 g$3372$14146))) (if (g$3372$13216 g$3372$14146) (list (begin 'b* '())) '#f))))) g$3372$14144) (g$3372$13224 g$3372$14138)))) '#f)) ((lambda (g$3372$14154) (list g$3372$14154)) (g$3372$13220 g$3372$14138)))) '#f)) (g$3372$13224 g$3372$14132)))) '#f)) ((lambda (g$3372$14156) (if (g$3372$13212 g$3372$14156) (begin '#f ((lambda (g$3372$14158) (if g$3372$14158 (begin '#f ((lambda (g$3372$14160) (if g$3372$14160 (begin '#f (append g$3372$14158 g$3372$14160)) '#f)) ((lambda (g$3372$14162) (list g$3372$14162)) (g$3372$13224 g$3372$14156)))) '#f)) ((lambda (g$3372$14164) (list g$3372$14164)) (g$3372$13220 g$3372$14156)))) '#f)) (g$3372$13220 g$3372$14132)))) '#f)) (g$3372$13224 g$3372$14126)))) '#f)) ((lambda (g$3372$14166) '()) (g$3372$13220 g$3372$14126)))) '#f)) g$3372$14068))) g$3372$14066))) (set! g$3372$13477 (lambda (g$3372$14168) ((lambda (g$3372$14170) ((lambda (g$3372$14172) (if (if g$3372$14172 (begin '#f (apply (lambda (g$3372$14174 g$3372$14175) (g$3372$13226 g$3372$14174)) g$3372$14172)) '#f) (apply (lambda (g$3372$14178 g$3372$14179) (values g$3372$14178 g$3372$14179)) g$3372$14172) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14170 '())))) ((lambda (g$3372$14182) (if (g$3372$13212 g$3372$14182) (begin '#f ((lambda (g$3372$14184) (if g$3372$14184 (begin '#f ((lambda (g$3372$14186) (if g$3372$14186 (begin '#f (append g$3372$14184 g$3372$14186)) '#f)) ((lambda (g$3372$14188) (if (g$3372$13212 g$3372$14188) (begin '#f ((lambda (g$3372$14190) (if g$3372$14190 (begin '#f ((lambda (g$3372$14192) (if g$3372$14192 (begin '#f (append g$3372$14190 g$3372$14192)) '#f)) ((lambda (g$3372$14194) (if (g$3372$13212 g$3372$14194) (begin '#f ((lambda (g$3372$14196) (if g$3372$14196 (begin '#f ((lambda (g$3372$14198) (if g$3372$14198 (begin '#f (append g$3372$14196 g$3372$14198)) '#f)) ((lambda (g$3372$14200) (if (equal? (g$3372$13246 g$3372$14200) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$14194)))) '#f)) ((lambda (g$3372$14202) (list g$3372$14202)) (g$3372$13220 g$3372$14194)))) '#f)) (g$3372$13224 g$3372$14188)))) '#f)) ((lambda (g$3372$14204) (list g$3372$14204)) (g$3372$13220 g$3372$14188)))) '#f)) (g$3372$13224 g$3372$14182)))) '#f)) ((lambda (g$3372$14206) '()) (g$3372$13220 g$3372$14182)))) '#f)) g$3372$14170))) g$3372$14168))) (set! g$3372$13479 (lambda (g$3372$14208) ((lambda (g$3372$14210) ((lambda (g$3372$14212) (if g$3372$14212 ((lambda (g$3372$14214) ((lambda (g$3372$14216 g$3372$14217) (g$3372$13206 (g$3372$13143 (list g$3372$14216) (list g$3372$13132) (list g$3372$14217) '#f) (g$3372$13202 g$3372$14208 g$3372$13132 '()))) (car g$3372$14214) (cdr g$3372$14214))) g$3372$14212) (g$3372$13202 g$3372$14208 g$3372$13132 '()))) (assq g$3372$14208 g$3372$14210))) (g$3372$12865 (g$3372$12840 '(psyntax system $all)))))) (set! g$3372$13481 (lambda (g$3372$14220 g$3372$14221 g$3372$14222) (cons (cons* g$3372$14220 'lexical g$3372$14221) g$3372$14222))) (set! g$3372$13483 (lambda (g$3372$14226 g$3372$14227 g$3372$14228) (if (null? g$3372$14226) g$3372$14228 (g$3372$13483 (cdr g$3372$14226) (cdr g$3372$14227) (g$3372$13481 (car g$3372$14226) (car g$3372$14227) g$3372$14228))))) (set! g$3372$13485 (lambda (g$3372$14232 g$3372$14233 g$3372$14234) ((lambda (g$3372$14238) ((lambda (g$3372$14240) (if (if g$3372$14240 (begin '#f (apply (lambda (g$3372$14242 g$3372$14243 g$3372$14244 g$3372$14245) '#t) g$3372$14240)) '#f) (apply (lambda (g$3372$14250 g$3372$14251 g$3372$14252 g$3372$14253) ((lambda (g$3372$14258) ((lambda (g$3372$14260 g$3372$14261) ((lambda (g$3372$14264 g$3372$14265 g$3372$14266) (letrec ((g$3372$14270 (lambda (g$3372$14272 g$3372$14273) (if (null? g$3372$14272) (g$3372$13613 (g$3372$13206 (g$3372$13173 g$3372$14264 g$3372$14265) (cons g$3372$14252 g$3372$14253)) (g$3372$13483 g$3372$14265 g$3372$14266 g$3372$14233) g$3372$14234) (list '(primitive call-with-values) (g$3372$13115 '#f '() (car g$3372$14273)) (g$3372$13115 '#f (car g$3372$14272) (g$3372$14270 (cdr g$3372$14272) (cdr g$3372$14273)))))))) (g$3372$14270 g$3372$14260 g$3372$14258))) (apply append g$3372$14250) (apply append g$3372$14261) (apply append g$3372$14260))) (map (lambda (g$3372$14276) (map g$3372$13136 g$3372$14276)) g$3372$14250) (map (lambda (g$3372$14278) (map g$3372$13140 g$3372$14278)) g$3372$14250))) (g$3372$13593 g$3372$14251 g$3372$14233 g$3372$14234))) g$3372$14240) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14238 '())))) ((lambda (g$3372$14280) (if (g$3372$13212 g$3372$14280) (begin '#f ((lambda (g$3372$14282) (if g$3372$14282 (begin '#f ((lambda (g$3372$14284) (if g$3372$14284 (begin '#f (append g$3372$14282 g$3372$14284)) '#f)) ((lambda (g$3372$14286) (if (g$3372$13212 g$3372$14286) (begin '#f ((lambda (g$3372$14288) (if g$3372$14288 (begin '#f ((lambda (g$3372$14290) (if g$3372$14290 (begin '#f (append g$3372$14288 g$3372$14290)) '#f)) ((lambda (g$3372$14292) (if (g$3372$13212 g$3372$14292) (begin '#f ((lambda (g$3372$14294) (if g$3372$14294 (begin '#f ((lambda (g$3372$14296) (if g$3372$14296 (begin '#f (append g$3372$14294 g$3372$14296)) '#f)) ((letrec ((g$3372$14298 (lambda (g$3372$14300) (if (g$3372$13212 g$3372$14300) ((lambda (g$3372$14302) (if g$3372$14302 (begin '#f ((lambda (g$3372$14304) (if g$3372$14304 (begin '#f (map cons g$3372$14302 g$3372$14304)) '#f)) (g$3372$14298 (g$3372$13224 g$3372$14300)))) '#f)) ((lambda (g$3372$14306) (list g$3372$14306)) (g$3372$13220 g$3372$14300))) (if (g$3372$13216 g$3372$14300) (list (begin 'b* '())) '#f))))) g$3372$14298) (g$3372$13224 g$3372$14292)))) '#f)) ((lambda (g$3372$14308) (list g$3372$14308)) (g$3372$13220 g$3372$14292)))) '#f)) (g$3372$13224 g$3372$14286)))) '#f)) ((letrec ((g$3372$14310 (lambda (g$3372$14312) (if (g$3372$13212 g$3372$14312) ((lambda (g$3372$14314) (if g$3372$14314 (begin '#f ((lambda (g$3372$14316) (if g$3372$14316 (begin '#f (map cons g$3372$14314 g$3372$14316)) '#f)) (g$3372$14310 (g$3372$13224 g$3372$14312)))) '#f)) ((lambda (g$3372$14318) (if (g$3372$13212 g$3372$14318) (begin '#f ((lambda (g$3372$14320) (if g$3372$14320 (begin '#f ((lambda (g$3372$14322) (if g$3372$14322 (begin '#f (append g$3372$14320 g$3372$14322)) '#f)) ((lambda (g$3372$14324) (if (g$3372$13212 g$3372$14324) (begin '#f ((lambda (g$3372$14326) (if g$3372$14326 (begin '#f ((lambda (g$3372$14328) (if g$3372$14328 (begin '#f (append g$3372$14326 g$3372$14328)) '#f)) ((lambda (g$3372$14330) (if (equal? (g$3372$13246 g$3372$14330) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$14324)))) '#f)) ((lambda (g$3372$14332) (list g$3372$14332)) (g$3372$13220 g$3372$14324)))) '#f)) (g$3372$13224 g$3372$14318)))) '#f)) ((letrec ((g$3372$14334 (lambda (g$3372$14336) (if (g$3372$13212 g$3372$14336) ((lambda (g$3372$14338) (if g$3372$14338 (begin '#f ((lambda (g$3372$14340) (if g$3372$14340 (begin '#f (map cons g$3372$14338 g$3372$14340)) '#f)) (g$3372$14334 (g$3372$13224 g$3372$14336)))) '#f)) ((lambda (g$3372$14342) (list g$3372$14342)) (g$3372$13220 g$3372$14336))) (if (g$3372$13216 g$3372$14336) (list (begin 'fml** '())) '#f))))) g$3372$14334) (g$3372$13220 g$3372$14318)))) '#f)) (g$3372$13220 g$3372$14312))) (if (g$3372$13216 g$3372$14312) (list (begin 'fml** '()) (begin 'rhs* '())) '#f))))) g$3372$14310) (g$3372$13220 g$3372$14286)))) '#f)) (g$3372$13224 g$3372$14280)))) '#f)) ((lambda (g$3372$14344) '()) (g$3372$13220 g$3372$14280)))) '#f)) g$3372$14238))) g$3372$14232))) (set! g$3372$13487 (lambda (g$3372$14346 g$3372$14347 g$3372$14348 g$3372$14349) ((lambda (g$3372$14354) ((lambda (g$3372$14356) (if (if g$3372$14356 (begin '#f (apply (lambda (g$3372$14358 g$3372$14359 g$3372$14360 g$3372$14361) '#t) g$3372$14356)) '#f) (apply (lambda (g$3372$14366 g$3372$14367 g$3372$14368 g$3372$14369) (if (not (g$3372$13236 g$3372$14366)) (error 'expander '"invalid identifiers" (g$3372$13244 g$3372$14346 '())) ((lambda (g$3372$14374 g$3372$14375) ((lambda (g$3372$14378 g$3372$14379) ((lambda (g$3372$14382 g$3372$14383) (g$3372$14349 '#f g$3372$14374 g$3372$14383 g$3372$14382)) (g$3372$13613 (g$3372$13206 g$3372$14378 (cons g$3372$14368 g$3372$14369)) g$3372$14379 g$3372$14348) (g$3372$13593 (map (lambda (g$3372$14386) (g$3372$13206 g$3372$14378 g$3372$14386)) g$3372$14367) g$3372$14379 g$3372$14348))) (g$3372$13173 g$3372$14366 g$3372$14375) (g$3372$13483 g$3372$14375 g$3372$14374 g$3372$14347))) (map g$3372$13136 g$3372$14366) (map g$3372$13140 g$3372$14366)))) g$3372$14356) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14354 '())))) ((lambda (g$3372$14388) (if (g$3372$13212 g$3372$14388) (begin '#f ((lambda (g$3372$14390) (if g$3372$14390 (begin '#f ((lambda (g$3372$14392) (if g$3372$14392 (begin '#f (append g$3372$14390 g$3372$14392)) '#f)) ((lambda (g$3372$14394) (if (g$3372$13212 g$3372$14394) (begin '#f ((lambda (g$3372$14396) (if g$3372$14396 (begin '#f ((lambda (g$3372$14398) (if g$3372$14398 (begin '#f (append g$3372$14396 g$3372$14398)) '#f)) ((lambda (g$3372$14400) (if (g$3372$13212 g$3372$14400) (begin '#f ((lambda (g$3372$14402) (if g$3372$14402 (begin '#f ((lambda (g$3372$14404) (if g$3372$14404 (begin '#f (append g$3372$14402 g$3372$14404)) '#f)) ((letrec ((g$3372$14406 (lambda (g$3372$14408) (if (g$3372$13212 g$3372$14408) ((lambda (g$3372$14410) (if g$3372$14410 (begin '#f ((lambda (g$3372$14412) (if g$3372$14412 (begin '#f (map cons g$3372$14410 g$3372$14412)) '#f)) (g$3372$14406 (g$3372$13224 g$3372$14408)))) '#f)) ((lambda (g$3372$14414) (list g$3372$14414)) (g$3372$13220 g$3372$14408))) (if (g$3372$13216 g$3372$14408) (list (begin 'b* '())) '#f))))) g$3372$14406) (g$3372$13224 g$3372$14400)))) '#f)) ((lambda (g$3372$14416) (list g$3372$14416)) (g$3372$13220 g$3372$14400)))) '#f)) (g$3372$13224 g$3372$14394)))) '#f)) ((letrec ((g$3372$14418 (lambda (g$3372$14420) (if (g$3372$13212 g$3372$14420) ((lambda (g$3372$14422) (if g$3372$14422 (begin '#f ((lambda (g$3372$14424) (if g$3372$14424 (begin '#f (map cons g$3372$14422 g$3372$14424)) '#f)) (g$3372$14418 (g$3372$13224 g$3372$14420)))) '#f)) ((lambda (g$3372$14426) (if (g$3372$13212 g$3372$14426) (begin '#f ((lambda (g$3372$14428) (if g$3372$14428 (begin '#f ((lambda (g$3372$14430) (if g$3372$14430 (begin '#f (append g$3372$14428 g$3372$14430)) '#f)) ((lambda (g$3372$14432) (if (g$3372$13212 g$3372$14432) (begin '#f ((lambda (g$3372$14434) (if g$3372$14434 (begin '#f ((lambda (g$3372$14436) (if g$3372$14436 (begin '#f (append g$3372$14434 g$3372$14436)) '#f)) ((lambda (g$3372$14438) (if (equal? (g$3372$13246 g$3372$14438) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$14432)))) '#f)) ((lambda (g$3372$14440) (list g$3372$14440)) (g$3372$13220 g$3372$14432)))) '#f)) (g$3372$13224 g$3372$14426)))) '#f)) ((lambda (g$3372$14442) (list g$3372$14442)) (g$3372$13220 g$3372$14426)))) '#f)) (g$3372$13220 g$3372$14420))) (if (g$3372$13216 g$3372$14420) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$3372$14418) (g$3372$13220 g$3372$14394)))) '#f)) (g$3372$13224 g$3372$14388)))) '#f)) ((lambda (g$3372$14444) '()) (g$3372$13220 g$3372$14388)))) '#f)) g$3372$14354))) g$3372$14346))) (set! g$3372$13489 (lambda (g$3372$14446 g$3372$14447 g$3372$14448) (g$3372$13487 g$3372$14446 g$3372$14447 g$3372$14448 g$3372$13107))) (set! g$3372$13491 (lambda (g$3372$14452 g$3372$14453 g$3372$14454) (g$3372$13487 g$3372$14452 g$3372$14453 g$3372$14454 g$3372$13106))) (set! g$3372$13493 (lambda (g$3372$14458 g$3372$14459 g$3372$14460) ((lambda (g$3372$14464) ((lambda (g$3372$14466) (if (if g$3372$14466 (begin '#f (apply (lambda (g$3372$14468) (g$3372$13226 g$3372$14468)) g$3372$14466)) '#f) (apply (lambda (g$3372$14470) ((lambda (g$3372$14472) ((lambda (g$3372$14474) ((lambda (g$3372$14476) ((lambda () (begin (if g$3372$14472 (void) (error 'expander '"unbound identifier" (g$3372$13244 g$3372$14458 '()))) (if (if (eq? g$3372$14476 '$rtd) (begin '#f (not (list? (g$3372$13256 g$3372$14474)))) '#f) (void) (error 'expander '"invalid type" (g$3372$13244 g$3372$14458 '()))) (list 'quote (g$3372$13256 g$3372$14474)))))) (g$3372$13254 g$3372$14474))) (g$3372$13250 g$3372$14472 g$3372$14459))) (g$3372$13248 g$3372$14470))) g$3372$14466) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14464 '())))) ((lambda (g$3372$14478) (if (g$3372$13212 g$3372$14478) (begin '#f ((lambda (g$3372$14480) (if g$3372$14480 (begin '#f ((lambda (g$3372$14482) (if g$3372$14482 (begin '#f (append g$3372$14480 g$3372$14482)) '#f)) ((lambda (g$3372$14484) (if (g$3372$13212 g$3372$14484) (begin '#f ((lambda (g$3372$14486) (if g$3372$14486 (begin '#f ((lambda (g$3372$14488) (if g$3372$14488 (begin '#f (append g$3372$14486 g$3372$14488)) '#f)) ((lambda (g$3372$14490) (if (equal? (g$3372$13246 g$3372$14490) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$14484)))) '#f)) ((lambda (g$3372$14492) (list g$3372$14492)) (g$3372$13220 g$3372$14484)))) '#f)) (g$3372$13224 g$3372$14478)))) '#f)) ((lambda (g$3372$14494) '()) (g$3372$13220 g$3372$14478)))) '#f)) g$3372$14464))) g$3372$14458))) (set! g$3372$13495 (lambda (g$3372$14496 g$3372$14497 g$3372$14498) ((lambda (g$3372$14502) ((lambda (g$3372$14504) (if (if g$3372$14504 (begin '#f (apply (lambda (g$3372$14506) (g$3372$13226 g$3372$14506)) g$3372$14504)) '#f) (apply (lambda (g$3372$14508) ((lambda (g$3372$14510) ((lambda (g$3372$14512) ((lambda (g$3372$14514) ((lambda () (begin (if g$3372$14510 (void) (error 'expander '"unbound identifier" (g$3372$13244 g$3372$14496 '()))) (if (if (eq? g$3372$14514 '$rtd) (begin '#f (list? (g$3372$13256 g$3372$14512))) '#f) (void) (error 'expander '"invalid type" (g$3372$13244 g$3372$14496 '()))) (g$3372$13597 (car (g$3372$13256 g$3372$14512)) g$3372$14497 g$3372$14498))))) (g$3372$13254 g$3372$14512))) (g$3372$13250 g$3372$14510 g$3372$14497))) (g$3372$13248 g$3372$14508))) g$3372$14504) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14502 '())))) ((lambda (g$3372$14516) (if (g$3372$13212 g$3372$14516) (begin '#f ((lambda (g$3372$14518) (if g$3372$14518 (begin '#f ((lambda (g$3372$14520) (if g$3372$14520 (begin '#f (append g$3372$14518 g$3372$14520)) '#f)) ((lambda (g$3372$14522) (if (g$3372$13212 g$3372$14522) (begin '#f ((lambda (g$3372$14524) (if g$3372$14524 (begin '#f ((lambda (g$3372$14526) (if g$3372$14526 (begin '#f (append g$3372$14524 g$3372$14526)) '#f)) ((lambda (g$3372$14528) (if (equal? (g$3372$13246 g$3372$14528) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$14522)))) '#f)) ((lambda (g$3372$14530) (list g$3372$14530)) (g$3372$13220 g$3372$14522)))) '#f)) (g$3372$13224 g$3372$14516)))) '#f)) ((lambda (g$3372$14532) '()) (g$3372$13220 g$3372$14516)))) '#f)) g$3372$14502))) g$3372$14496))) (set! g$3372$13497 (lambda (g$3372$14534 g$3372$14535 g$3372$14536) ((lambda (g$3372$14540) ((lambda (g$3372$14542) (if (if g$3372$14542 (begin '#f (apply (lambda (g$3372$14544) (g$3372$13226 g$3372$14544)) g$3372$14542)) '#f) (apply (lambda (g$3372$14546) ((lambda (g$3372$14548) ((lambda (g$3372$14550) ((lambda (g$3372$14552) ((lambda () (begin (if g$3372$14548 (void) (error 'expander '"unbound identifier" (g$3372$13244 g$3372$14534 '()))) (if (if (eq? g$3372$14552 '$rtd) (begin '#f (list? (g$3372$13256 g$3372$14550))) '#f) (void) (error 'expander '"invalid type" (g$3372$13244 g$3372$14534 '()))) (g$3372$13597 (cadr (g$3372$13256 g$3372$14550)) g$3372$14535 g$3372$14536))))) (g$3372$13254 g$3372$14550))) (g$3372$13250 g$3372$14548 g$3372$14535))) (g$3372$13248 g$3372$14546))) g$3372$14542) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14540 '())))) ((lambda (g$3372$14554) (if (g$3372$13212 g$3372$14554) (begin '#f ((lambda (g$3372$14556) (if g$3372$14556 (begin '#f ((lambda (g$3372$14558) (if g$3372$14558 (begin '#f (append g$3372$14556 g$3372$14558)) '#f)) ((lambda (g$3372$14560) (if (g$3372$13212 g$3372$14560) (begin '#f ((lambda (g$3372$14562) (if g$3372$14562 (begin '#f ((lambda (g$3372$14564) (if g$3372$14564 (begin '#f (append g$3372$14562 g$3372$14564)) '#f)) ((lambda (g$3372$14566) (if (equal? (g$3372$13246 g$3372$14566) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$14560)))) '#f)) ((lambda (g$3372$14568) (list g$3372$14568)) (g$3372$13220 g$3372$14560)))) '#f)) (g$3372$13224 g$3372$14554)))) '#f)) ((lambda (g$3372$14570) '()) (g$3372$13220 g$3372$14554)))) '#f)) g$3372$14540))) g$3372$14534))) (set! g$3372$13499 (lambda (g$3372$14572 g$3372$14573 g$3372$14574) ((lambda (g$3372$14578) ((lambda (g$3372$14580) (if (if g$3372$14580 (begin '#f (apply (lambda (g$3372$14582 g$3372$14583 g$3372$14584) '#t) g$3372$14580)) '#f) (apply (lambda (g$3372$14588 g$3372$14589 g$3372$14590) (list 'if (g$3372$13597 g$3372$14588 g$3372$14573 g$3372$14574) (g$3372$13109 '#f (g$3372$13593 (cons g$3372$14589 g$3372$14590) g$3372$14573 g$3372$14574)) (g$3372$13108))) g$3372$14580) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14578 '())))) ((lambda (g$3372$14594) (if (g$3372$13212 g$3372$14594) (begin '#f ((lambda (g$3372$14596) (if g$3372$14596 (begin '#f ((lambda (g$3372$14598) (if g$3372$14598 (begin '#f (append g$3372$14596 g$3372$14598)) '#f)) ((lambda (g$3372$14600) (if (g$3372$13212 g$3372$14600) (begin '#f ((lambda (g$3372$14602) (if g$3372$14602 (begin '#f ((lambda (g$3372$14604) (if g$3372$14604 (begin '#f (append g$3372$14602 g$3372$14604)) '#f)) ((lambda (g$3372$14606) (if (g$3372$13212 g$3372$14606) (begin '#f ((lambda (g$3372$14608) (if g$3372$14608 (begin '#f ((lambda (g$3372$14610) (if g$3372$14610 (begin '#f (append g$3372$14608 g$3372$14610)) '#f)) ((letrec ((g$3372$14612 (lambda (g$3372$14614) (if (g$3372$13212 g$3372$14614) ((lambda (g$3372$14616) (if g$3372$14616 (begin '#f ((lambda (g$3372$14618) (if g$3372$14618 (begin '#f (map cons g$3372$14616 g$3372$14618)) '#f)) (g$3372$14612 (g$3372$13224 g$3372$14614)))) '#f)) ((lambda (g$3372$14620) (list g$3372$14620)) (g$3372$13220 g$3372$14614))) (if (g$3372$13216 g$3372$14614) (list (begin 'e* '())) '#f))))) g$3372$14612) (g$3372$13224 g$3372$14606)))) '#f)) ((lambda (g$3372$14622) (list g$3372$14622)) (g$3372$13220 g$3372$14606)))) '#f)) (g$3372$13224 g$3372$14600)))) '#f)) ((lambda (g$3372$14624) (list g$3372$14624)) (g$3372$13220 g$3372$14600)))) '#f)) (g$3372$13224 g$3372$14594)))) '#f)) ((lambda (g$3372$14626) '()) (g$3372$13220 g$3372$14594)))) '#f)) g$3372$14578))) g$3372$14572))) (set! g$3372$13501 (lambda (g$3372$14628 g$3372$14629 g$3372$14630) ((lambda (g$3372$14634) ((lambda (g$3372$14636) (if (if g$3372$14636 (begin '#f (apply (lambda (g$3372$14638 g$3372$14639 g$3372$14640) '#t) g$3372$14636)) '#f) (apply (lambda (g$3372$14644 g$3372$14645 g$3372$14646) (list 'if (g$3372$13597 g$3372$14644 g$3372$14629 g$3372$14630) (g$3372$13108) (g$3372$13109 '#f (g$3372$13593 (cons g$3372$14645 g$3372$14646) g$3372$14629 g$3372$14630)))) g$3372$14636) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14634 '())))) ((lambda (g$3372$14650) (if (g$3372$13212 g$3372$14650) (begin '#f ((lambda (g$3372$14652) (if g$3372$14652 (begin '#f ((lambda (g$3372$14654) (if g$3372$14654 (begin '#f (append g$3372$14652 g$3372$14654)) '#f)) ((lambda (g$3372$14656) (if (g$3372$13212 g$3372$14656) (begin '#f ((lambda (g$3372$14658) (if g$3372$14658 (begin '#f ((lambda (g$3372$14660) (if g$3372$14660 (begin '#f (append g$3372$14658 g$3372$14660)) '#f)) ((lambda (g$3372$14662) (if (g$3372$13212 g$3372$14662) (begin '#f ((lambda (g$3372$14664) (if g$3372$14664 (begin '#f ((lambda (g$3372$14666) (if g$3372$14666 (begin '#f (append g$3372$14664 g$3372$14666)) '#f)) ((letrec ((g$3372$14668 (lambda (g$3372$14670) (if (g$3372$13212 g$3372$14670) ((lambda (g$3372$14672) (if g$3372$14672 (begin '#f ((lambda (g$3372$14674) (if g$3372$14674 (begin '#f (map cons g$3372$14672 g$3372$14674)) '#f)) (g$3372$14668 (g$3372$13224 g$3372$14670)))) '#f)) ((lambda (g$3372$14676) (list g$3372$14676)) (g$3372$13220 g$3372$14670))) (if (g$3372$13216 g$3372$14670) (list (begin 'e* '())) '#f))))) g$3372$14668) (g$3372$13224 g$3372$14662)))) '#f)) ((lambda (g$3372$14678) (list g$3372$14678)) (g$3372$13220 g$3372$14662)))) '#f)) (g$3372$13224 g$3372$14656)))) '#f)) ((lambda (g$3372$14680) (list g$3372$14680)) (g$3372$13220 g$3372$14656)))) '#f)) (g$3372$13224 g$3372$14650)))) '#f)) ((lambda (g$3372$14682) '()) (g$3372$13220 g$3372$14650)))) '#f)) g$3372$14634))) g$3372$14628))) (set! g$3372$13503 (lambda (g$3372$14684 g$3372$14685 g$3372$14686) ((lambda (g$3372$14690) ((lambda (g$3372$14692) (if (if g$3372$14692 (begin '#f (apply (lambda (g$3372$14694 g$3372$14695 g$3372$14696) '#t) g$3372$14692)) '#f) (apply (lambda (g$3372$14700 g$3372$14701 g$3372$14702) (list 'if (g$3372$13597 g$3372$14700 g$3372$14685 g$3372$14686) (g$3372$13597 g$3372$14701 g$3372$14685 g$3372$14686) (g$3372$13597 g$3372$14702 g$3372$14685 g$3372$14686))) g$3372$14692) ((lambda (g$3372$14706) ((lambda (g$3372$14708) (if (if g$3372$14708 (begin '#f (apply (lambda (g$3372$14710 g$3372$14711) '#t) g$3372$14708)) '#f) (apply (lambda (g$3372$14714 g$3372$14715) (list 'if (g$3372$13597 g$3372$14714 g$3372$14685 g$3372$14686) (g$3372$13597 g$3372$14715 g$3372$14685 g$3372$14686) (g$3372$13108))) g$3372$14708) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14706 '())))) ((lambda (g$3372$14718) (if (g$3372$13212 g$3372$14718) (begin '#f ((lambda (g$3372$14720) (if g$3372$14720 (begin '#f ((lambda (g$3372$14722) (if g$3372$14722 (begin '#f (append g$3372$14720 g$3372$14722)) '#f)) ((lambda (g$3372$14724) (if (g$3372$13212 g$3372$14724) (begin '#f ((lambda (g$3372$14726) (if g$3372$14726 (begin '#f ((lambda (g$3372$14728) (if g$3372$14728 (begin '#f (append g$3372$14726 g$3372$14728)) '#f)) ((lambda (g$3372$14730) (if (g$3372$13212 g$3372$14730) (begin '#f ((lambda (g$3372$14732) (if g$3372$14732 (begin '#f ((lambda (g$3372$14734) (if g$3372$14734 (begin '#f (append g$3372$14732 g$3372$14734)) '#f)) ((lambda (g$3372$14736) (if (equal? (g$3372$13246 g$3372$14736) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$14730)))) '#f)) ((lambda (g$3372$14738) (list g$3372$14738)) (g$3372$13220 g$3372$14730)))) '#f)) (g$3372$13224 g$3372$14724)))) '#f)) ((lambda (g$3372$14740) (list g$3372$14740)) (g$3372$13220 g$3372$14724)))) '#f)) (g$3372$13224 g$3372$14718)))) '#f)) ((lambda (g$3372$14742) '()) (g$3372$13220 g$3372$14718)))) '#f)) g$3372$14706))) g$3372$14690))) ((lambda (g$3372$14744) (if (g$3372$13212 g$3372$14744) (begin '#f ((lambda (g$3372$14746) (if g$3372$14746 (begin '#f ((lambda (g$3372$14748) (if g$3372$14748 (begin '#f (append g$3372$14746 g$3372$14748)) '#f)) ((lambda (g$3372$14750) (if (g$3372$13212 g$3372$14750) (begin '#f ((lambda (g$3372$14752) (if g$3372$14752 (begin '#f ((lambda (g$3372$14754) (if g$3372$14754 (begin '#f (append g$3372$14752 g$3372$14754)) '#f)) ((lambda (g$3372$14756) (if (g$3372$13212 g$3372$14756) (begin '#f ((lambda (g$3372$14758) (if g$3372$14758 (begin '#f ((lambda (g$3372$14760) (if g$3372$14760 (begin '#f (append g$3372$14758 g$3372$14760)) '#f)) ((lambda (g$3372$14762) (if (g$3372$13212 g$3372$14762) (begin '#f ((lambda (g$3372$14764) (if g$3372$14764 (begin '#f ((lambda (g$3372$14766) (if g$3372$14766 (begin '#f (append g$3372$14764 g$3372$14766)) '#f)) ((lambda (g$3372$14768) (if (equal? (g$3372$13246 g$3372$14768) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$14762)))) '#f)) ((lambda (g$3372$14770) (list g$3372$14770)) (g$3372$13220 g$3372$14762)))) '#f)) (g$3372$13224 g$3372$14756)))) '#f)) ((lambda (g$3372$14772) (list g$3372$14772)) (g$3372$13220 g$3372$14756)))) '#f)) (g$3372$13224 g$3372$14750)))) '#f)) ((lambda (g$3372$14774) (list g$3372$14774)) (g$3372$13220 g$3372$14750)))) '#f)) (g$3372$13224 g$3372$14744)))) '#f)) ((lambda (g$3372$14776) '()) (g$3372$13220 g$3372$14744)))) '#f)) g$3372$14690))) g$3372$14684))) (set! g$3372$13505 (lambda (g$3372$14778 g$3372$14779 g$3372$14780) ((lambda (g$3372$14784 g$3372$14786) (begin (set! g$3372$14784 (lambda (g$3372$14894 g$3372$14895 g$3372$14896) ((lambda (g$3372$14900) ((lambda (g$3372$14902) (if (if g$3372$14902 (begin '#f (apply (lambda (g$3372$14904 g$3372$14905 g$3372$14906) '#t) g$3372$14902)) '#f) (apply (lambda (g$3372$14910 g$3372$14911 g$3372$14912) (list 'if (list '(primitive memv) g$3372$14894 (list 'quote (g$3372$13246 g$3372$14910))) (g$3372$13109 '#f (g$3372$13593 (cons g$3372$14911 g$3372$14912) g$3372$14779 g$3372$14780)) g$3372$14896)) g$3372$14902) ((lambda (g$3372$14916) ((lambda (g$3372$14918) (if (if g$3372$14918 (begin '#f (apply (lambda (g$3372$14920) '#t) g$3372$14918)) '#f) (apply (lambda (g$3372$14922) (error 'expander '"invalid syntax" (g$3372$13246 g$3372$14778))) g$3372$14918) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14916 '())))) ((lambda (g$3372$14924) (list g$3372$14924)) g$3372$14916))) g$3372$14900))) ((lambda (g$3372$14926) (if (g$3372$13212 g$3372$14926) (begin '#f ((lambda (g$3372$14928) (if g$3372$14928 (begin '#f ((lambda (g$3372$14930) (if g$3372$14930 (begin '#f (append g$3372$14928 g$3372$14930)) '#f)) ((lambda (g$3372$14932) (if (g$3372$13212 g$3372$14932) (begin '#f ((lambda (g$3372$14934) (if g$3372$14934 (begin '#f ((lambda (g$3372$14936) (if g$3372$14936 (begin '#f (append g$3372$14934 g$3372$14936)) '#f)) ((letrec ((g$3372$14938 (lambda (g$3372$14940) (if (g$3372$13212 g$3372$14940) ((lambda (g$3372$14942) (if g$3372$14942 (begin '#f ((lambda (g$3372$14944) (if g$3372$14944 (begin '#f (map cons g$3372$14942 g$3372$14944)) '#f)) (g$3372$14938 (g$3372$13224 g$3372$14940)))) '#f)) ((lambda (g$3372$14946) (list g$3372$14946)) (g$3372$13220 g$3372$14940))) (if (g$3372$13216 g$3372$14940) (list (begin 'e* '())) '#f))))) g$3372$14938) (g$3372$13224 g$3372$14932)))) '#f)) ((lambda (g$3372$14948) (list g$3372$14948)) (g$3372$13220 g$3372$14932)))) '#f)) (g$3372$13224 g$3372$14926)))) '#f)) ((letrec ((g$3372$14950 (lambda (g$3372$14952) (if (g$3372$13212 g$3372$14952) ((lambda (g$3372$14954) (if g$3372$14954 (begin '#f ((lambda (g$3372$14956) (if g$3372$14956 (begin '#f (map cons g$3372$14954 g$3372$14956)) '#f)) (g$3372$14950 (g$3372$13224 g$3372$14952)))) '#f)) ((lambda (g$3372$14958) (list g$3372$14958)) (g$3372$13220 g$3372$14952))) (if (g$3372$13216 g$3372$14952) (list (begin 'd* '())) '#f))))) g$3372$14950) (g$3372$13220 g$3372$14926)))) '#f)) g$3372$14900))) g$3372$14895))) (set! g$3372$14786 (lambda (g$3372$14788 g$3372$14789) ((lambda (g$3372$14792) ((lambda (g$3372$14794) (if (if g$3372$14794 (begin '#f (apply (lambda (g$3372$14796 g$3372$14797 g$3372$14798) '#t) g$3372$14794)) '#f) (apply (lambda (g$3372$14802 g$3372$14803 g$3372$14804) (g$3372$14784 g$3372$14788 g$3372$14789 (g$3372$13108))) g$3372$14794) ((lambda (g$3372$14808) ((lambda (g$3372$14810) (if (if g$3372$14810 (begin '#f (apply (lambda (g$3372$14812 g$3372$14813 g$3372$14814) '#t) g$3372$14810)) '#f) (apply (lambda (g$3372$14818 g$3372$14819 g$3372$14820) (if (if (g$3372$13226 g$3372$14818) (begin '#f (g$3372$13234 g$3372$14818 (g$3372$13479 'else))) '#f) (g$3372$13109 '#f (g$3372$13593 (cons g$3372$14819 g$3372$14820) g$3372$14779 g$3372$14780)) (error 'expander '"invalid syntax" (g$3372$13246 g$3372$14778)))) g$3372$14810) ((lambda (g$3372$14824) ((lambda (g$3372$14826) (if (if g$3372$14826 (begin '#f (apply (lambda (g$3372$14828) '#t) g$3372$14826)) '#f) (apply (lambda (g$3372$14830) (error 'expander '"invalid syntax" (g$3372$13246 g$3372$14778))) g$3372$14826) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14824 '())))) ((lambda (g$3372$14832) (list g$3372$14832)) g$3372$14824))) g$3372$14808))) ((lambda (g$3372$14834) (if (g$3372$13212 g$3372$14834) (begin '#f ((lambda (g$3372$14836) (if g$3372$14836 (begin '#f ((lambda (g$3372$14838) (if g$3372$14838 (begin '#f (append g$3372$14836 g$3372$14838)) '#f)) ((lambda (g$3372$14840) (if (g$3372$13212 g$3372$14840) (begin '#f ((lambda (g$3372$14842) (if g$3372$14842 (begin '#f ((lambda (g$3372$14844) (if g$3372$14844 (begin '#f (append g$3372$14842 g$3372$14844)) '#f)) ((letrec ((g$3372$14846 (lambda (g$3372$14848) (if (g$3372$13212 g$3372$14848) ((lambda (g$3372$14850) (if g$3372$14850 (begin '#f ((lambda (g$3372$14852) (if g$3372$14852 (begin '#f (map cons g$3372$14850 g$3372$14852)) '#f)) (g$3372$14846 (g$3372$13224 g$3372$14848)))) '#f)) ((lambda (g$3372$14854) (list g$3372$14854)) (g$3372$13220 g$3372$14848))) (if (g$3372$13216 g$3372$14848) (list (begin 'x* '())) '#f))))) g$3372$14846) (g$3372$13224 g$3372$14840)))) '#f)) ((lambda (g$3372$14856) (list g$3372$14856)) (g$3372$13220 g$3372$14840)))) '#f)) (g$3372$13224 g$3372$14834)))) '#f)) ((lambda (g$3372$14858) (list g$3372$14858)) (g$3372$13220 g$3372$14834)))) '#f)) g$3372$14808))) g$3372$14792))) ((lambda (g$3372$14860) (if (g$3372$13212 g$3372$14860) (begin '#f ((lambda (g$3372$14862) (if g$3372$14862 (begin '#f ((lambda (g$3372$14864) (if g$3372$14864 (begin '#f (append g$3372$14862 g$3372$14864)) '#f)) ((lambda (g$3372$14866) (if (g$3372$13212 g$3372$14866) (begin '#f ((lambda (g$3372$14868) (if g$3372$14868 (begin '#f ((lambda (g$3372$14870) (if g$3372$14870 (begin '#f (append g$3372$14868 g$3372$14870)) '#f)) ((letrec ((g$3372$14872 (lambda (g$3372$14874) (if (g$3372$13212 g$3372$14874) ((lambda (g$3372$14876) (if g$3372$14876 (begin '#f ((lambda (g$3372$14878) (if g$3372$14878 (begin '#f (map cons g$3372$14876 g$3372$14878)) '#f)) (g$3372$14872 (g$3372$13224 g$3372$14874)))) '#f)) ((lambda (g$3372$14880) (list g$3372$14880)) (g$3372$13220 g$3372$14874))) (if (g$3372$13216 g$3372$14874) (list (begin 'e* '())) '#f))))) g$3372$14872) (g$3372$13224 g$3372$14866)))) '#f)) ((lambda (g$3372$14882) (list g$3372$14882)) (g$3372$13220 g$3372$14866)))) '#f)) (g$3372$13224 g$3372$14860)))) '#f)) ((letrec ((g$3372$14884 (lambda (g$3372$14886) (if (g$3372$13212 g$3372$14886) ((lambda (g$3372$14888) (if g$3372$14888 (begin '#f ((lambda (g$3372$14890) (if g$3372$14890 (begin '#f (map cons g$3372$14888 g$3372$14890)) '#f)) (g$3372$14884 (g$3372$13224 g$3372$14886)))) '#f)) ((lambda (g$3372$14892) (list g$3372$14892)) (g$3372$13220 g$3372$14886))) (if (g$3372$13216 g$3372$14886) (list (begin 'd* '())) '#f))))) g$3372$14884) (g$3372$13220 g$3372$14860)))) '#f)) g$3372$14792))) g$3372$14789))) ((lambda (g$3372$14960) ((lambda (g$3372$14962) (if (if g$3372$14962 (begin '#f (apply (lambda (g$3372$14964) '#t) g$3372$14962)) '#f) (apply (lambda (g$3372$14966) (g$3372$13109 '#f (list (g$3372$13597 g$3372$14966 g$3372$14779 g$3372$14780) (g$3372$13108)))) g$3372$14962) ((lambda (g$3372$14968) ((lambda (g$3372$14970) (if (if g$3372$14970 (begin '#f (apply (lambda (g$3372$14972 g$3372$14973 g$3372$14974) '#t) g$3372$14970)) '#f) (apply (lambda (g$3372$14978 g$3372$14979 g$3372$14980) ((lambda (g$3372$14984) (g$3372$13113 '#f (list g$3372$14984) (list (g$3372$13597 g$3372$14978 g$3372$14779 g$3372$14780)) (letrec ((g$3372$14986 (lambda (g$3372$14988 g$3372$14989) (if (null? g$3372$14989) (g$3372$14786 g$3372$14984 g$3372$14988) (g$3372$14784 g$3372$14984 g$3372$14988 (g$3372$14986 (car g$3372$14989) (cdr g$3372$14989))))))) (g$3372$14986 g$3372$14979 g$3372$14980)))) (g$3372$13136 't))) g$3372$14970) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$14968 '())))) ((lambda (g$3372$14992) (if (g$3372$13212 g$3372$14992) (begin '#f ((lambda (g$3372$14994) (if g$3372$14994 (begin '#f ((lambda (g$3372$14996) (if g$3372$14996 (begin '#f (append g$3372$14994 g$3372$14996)) '#f)) ((lambda (g$3372$14998) (if (g$3372$13212 g$3372$14998) (begin '#f ((lambda (g$3372$15000) (if g$3372$15000 (begin '#f ((lambda (g$3372$15002) (if g$3372$15002 (begin '#f (append g$3372$15000 g$3372$15002)) '#f)) ((lambda (g$3372$15004) (if (g$3372$13212 g$3372$15004) (begin '#f ((lambda (g$3372$15006) (if g$3372$15006 (begin '#f ((lambda (g$3372$15008) (if g$3372$15008 (begin '#f (append g$3372$15006 g$3372$15008)) '#f)) ((letrec ((g$3372$15010 (lambda (g$3372$15012) (if (g$3372$13212 g$3372$15012) ((lambda (g$3372$15014) (if g$3372$15014 (begin '#f ((lambda (g$3372$15016) (if g$3372$15016 (begin '#f (map cons g$3372$15014 g$3372$15016)) '#f)) (g$3372$15010 (g$3372$13224 g$3372$15012)))) '#f)) ((lambda (g$3372$15018) (list g$3372$15018)) (g$3372$13220 g$3372$15012))) (if (g$3372$13216 g$3372$15012) (list (begin 'cls* '())) '#f))))) g$3372$15010) (g$3372$13224 g$3372$15004)))) '#f)) ((lambda (g$3372$15020) (list g$3372$15020)) (g$3372$13220 g$3372$15004)))) '#f)) (g$3372$13224 g$3372$14998)))) '#f)) ((lambda (g$3372$15022) (list g$3372$15022)) (g$3372$13220 g$3372$14998)))) '#f)) (g$3372$13224 g$3372$14992)))) '#f)) ((lambda (g$3372$15024) '()) (g$3372$13220 g$3372$14992)))) '#f)) g$3372$14968))) g$3372$14960))) ((lambda (g$3372$15026) (if (g$3372$13212 g$3372$15026) (begin '#f ((lambda (g$3372$15028) (if g$3372$15028 (begin '#f ((lambda (g$3372$15030) (if g$3372$15030 (begin '#f (append g$3372$15028 g$3372$15030)) '#f)) ((lambda (g$3372$15032) (if (g$3372$13212 g$3372$15032) (begin '#f ((lambda (g$3372$15034) (if g$3372$15034 (begin '#f ((lambda (g$3372$15036) (if g$3372$15036 (begin '#f (append g$3372$15034 g$3372$15036)) '#f)) ((lambda (g$3372$15038) (if (equal? (g$3372$13246 g$3372$15038) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$15032)))) '#f)) ((lambda (g$3372$15040) (list g$3372$15040)) (g$3372$13220 g$3372$15032)))) '#f)) (g$3372$13224 g$3372$15026)))) '#f)) ((lambda (g$3372$15042) '()) (g$3372$13220 g$3372$15026)))) '#f)) g$3372$14960))) g$3372$14778))) '#f '#f))) (set! g$3372$13507 (lambda (g$3372$15044 g$3372$15045 g$3372$15046) ((lambda (g$3372$15050) ((lambda (g$3372$15052) (if (if g$3372$15052 (begin '#f (apply (lambda (g$3372$15054) '#t) g$3372$15052)) '#f) (apply (lambda (g$3372$15056) (list 'quote (g$3372$13246 g$3372$15056))) g$3372$15052) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$15050 '())))) ((lambda (g$3372$15058) (if (g$3372$13212 g$3372$15058) (begin '#f ((lambda (g$3372$15060) (if g$3372$15060 (begin '#f ((lambda (g$3372$15062) (if g$3372$15062 (begin '#f (append g$3372$15060 g$3372$15062)) '#f)) ((lambda (g$3372$15064) (if (g$3372$13212 g$3372$15064) (begin '#f ((lambda (g$3372$15066) (if g$3372$15066 (begin '#f ((lambda (g$3372$15068) (if g$3372$15068 (begin '#f (append g$3372$15066 g$3372$15068)) '#f)) ((lambda (g$3372$15070) (if (equal? (g$3372$13246 g$3372$15070) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$15064)))) '#f)) ((lambda (g$3372$15072) (list g$3372$15072)) (g$3372$13220 g$3372$15064)))) '#f)) (g$3372$13224 g$3372$15058)))) '#f)) ((lambda (g$3372$15074) '()) (g$3372$13220 g$3372$15058)))) '#f)) g$3372$15050))) g$3372$15044))) (set! g$3372$13509 (lambda (g$3372$15076 g$3372$15077 g$3372$15078) ((lambda (g$3372$15082) ((lambda (g$3372$15084) (if (if g$3372$15084 (begin '#f (apply (lambda (g$3372$15086 g$3372$15087 g$3372$15088) '#t) g$3372$15084)) '#f) (apply (lambda (g$3372$15092 g$3372$15093 g$3372$15094) (call-with-values (lambda () (g$3372$13603 g$3372$15092 (map cons g$3372$15093 g$3372$15094) g$3372$15077 g$3372$15078)) (lambda (g$3372$15098 g$3372$15099) (g$3372$13114 '#f g$3372$15098 g$3372$15099)))) g$3372$15084) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$15082 '())))) ((lambda (g$3372$15102) (if (g$3372$13212 g$3372$15102) (begin '#f ((lambda (g$3372$15104) (if g$3372$15104 (begin '#f ((lambda (g$3372$15106) (if g$3372$15106 (begin '#f (append g$3372$15104 g$3372$15106)) '#f)) ((letrec ((g$3372$15108 (lambda (g$3372$15110) (if (g$3372$13212 g$3372$15110) ((lambda (g$3372$15112) (if g$3372$15112 (begin '#f ((lambda (g$3372$15114) (if g$3372$15114 (begin '#f (map cons g$3372$15112 g$3372$15114)) '#f)) (g$3372$15108 (g$3372$13224 g$3372$15110)))) '#f)) ((lambda (g$3372$15116) (if (g$3372$13212 g$3372$15116) (begin '#f ((lambda (g$3372$15118) (if g$3372$15118 (begin '#f ((lambda (g$3372$15120) (if g$3372$15120 (begin '#f (append g$3372$15118 g$3372$15120)) '#f)) ((lambda (g$3372$15122) (if (g$3372$13212 g$3372$15122) (begin '#f ((lambda (g$3372$15124) (if g$3372$15124 (begin '#f ((lambda (g$3372$15126) (if g$3372$15126 (begin '#f (append g$3372$15124 g$3372$15126)) '#f)) ((letrec ((g$3372$15128 (lambda (g$3372$15130) (if (g$3372$13212 g$3372$15130) ((lambda (g$3372$15132) (if g$3372$15132 (begin '#f ((lambda (g$3372$15134) (if g$3372$15134 (begin '#f (map cons g$3372$15132 g$3372$15134)) '#f)) (g$3372$15128 (g$3372$13224 g$3372$15130)))) '#f)) ((lambda (g$3372$15136) (list g$3372$15136)) (g$3372$13220 g$3372$15130))) (if (g$3372$13216 g$3372$15130) (list (begin 'b** '())) '#f))))) g$3372$15128) (g$3372$13224 g$3372$15122)))) '#f)) ((lambda (g$3372$15138) (list g$3372$15138)) (g$3372$13220 g$3372$15122)))) '#f)) (g$3372$13224 g$3372$15116)))) '#f)) ((lambda (g$3372$15140) (list g$3372$15140)) (g$3372$13220 g$3372$15116)))) '#f)) (g$3372$13220 g$3372$15110))) (if (g$3372$13216 g$3372$15110) (list (begin 'fmls* '()) (begin 'b* '()) (begin 'b** '())) '#f))))) g$3372$15108) (g$3372$13224 g$3372$15102)))) '#f)) ((lambda (g$3372$15142) '()) (g$3372$13220 g$3372$15102)))) '#f)) g$3372$15082))) g$3372$15076))) (set! g$3372$13511 (lambda (g$3372$15144 g$3372$15145 g$3372$15146) ((lambda (g$3372$15150) ((lambda (g$3372$15152) (if (if g$3372$15152 (begin '#f (apply (lambda (g$3372$15154 g$3372$15155 g$3372$15156) '#t) g$3372$15152)) '#f) (apply (lambda (g$3372$15160 g$3372$15161 g$3372$15162) (call-with-values (lambda () (g$3372$13601 g$3372$15160 (cons g$3372$15161 g$3372$15162) g$3372$15145 g$3372$15146)) (lambda (g$3372$15166 g$3372$15167) (g$3372$13115 '#f g$3372$15166 g$3372$15167)))) g$3372$15152) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$15150 '())))) ((lambda (g$3372$15170) (if (g$3372$13212 g$3372$15170) (begin '#f ((lambda (g$3372$15172) (if g$3372$15172 (begin '#f ((lambda (g$3372$15174) (if g$3372$15174 (begin '#f (append g$3372$15172 g$3372$15174)) '#f)) ((lambda (g$3372$15176) (if (g$3372$13212 g$3372$15176) (begin '#f ((lambda (g$3372$15178) (if g$3372$15178 (begin '#f ((lambda (g$3372$15180) (if g$3372$15180 (begin '#f (append g$3372$15178 g$3372$15180)) '#f)) ((lambda (g$3372$15182) (if (g$3372$13212 g$3372$15182) (begin '#f ((lambda (g$3372$15184) (if g$3372$15184 (begin '#f ((lambda (g$3372$15186) (if g$3372$15186 (begin '#f (append g$3372$15184 g$3372$15186)) '#f)) ((letrec ((g$3372$15188 (lambda (g$3372$15190) (if (g$3372$13212 g$3372$15190) ((lambda (g$3372$15192) (if g$3372$15192 (begin '#f ((lambda (g$3372$15194) (if g$3372$15194 (begin '#f (map cons g$3372$15192 g$3372$15194)) '#f)) (g$3372$15188 (g$3372$13224 g$3372$15190)))) '#f)) ((lambda (g$3372$15196) (list g$3372$15196)) (g$3372$13220 g$3372$15190))) (if (g$3372$13216 g$3372$15190) (list (begin 'b* '())) '#f))))) g$3372$15188) (g$3372$13224 g$3372$15182)))) '#f)) ((lambda (g$3372$15198) (list g$3372$15198)) (g$3372$13220 g$3372$15182)))) '#f)) (g$3372$13224 g$3372$15176)))) '#f)) ((lambda (g$3372$15200) (list g$3372$15200)) (g$3372$13220 g$3372$15176)))) '#f)) (g$3372$13224 g$3372$15170)))) '#f)) ((lambda (g$3372$15202) '()) (g$3372$13220 g$3372$15170)))) '#f)) g$3372$15150))) g$3372$15144))) (set! g$3372$13513 (lambda (g$3372$15204) (g$3372$13202 (letrec ((g$3372$15206 (lambda (g$3372$15208) (if (g$3372$13178 g$3372$15208) g$3372$15208 (if (pair? g$3372$15208) (cons (g$3372$15206 (car g$3372$15208)) (g$3372$15206 (cdr g$3372$15208))) (if (symbol? g$3372$15208) (g$3372$13479 g$3372$15208) (if (vector? g$3372$15208) (list->vector (map g$3372$15206 (vector->list g$3372$15208))) g$3372$15208))))))) (g$3372$15206 g$3372$15204)) '() '()))) (set! g$3372$13515 (lambda (g$3372$15210) ((lambda (g$3372$15212) ((lambda (g$3372$15214) (if (if g$3372$15214 (begin '#f (apply (lambda (g$3372$15216 g$3372$15217 g$3372$15218 g$3372$15219) '#t) g$3372$15214)) '#f) (apply (lambda (g$3372$15224 g$3372$15225 g$3372$15226 g$3372$15227) (g$3372$13513 (list 'syntax-case (cons 'list g$3372$15225) '() (list g$3372$15224 (cons 'begin (cons g$3372$15226 g$3372$15227)))))) g$3372$15214) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$15212 '())))) ((lambda (g$3372$15232) (if (g$3372$13212 g$3372$15232) (begin '#f ((lambda (g$3372$15234) (if g$3372$15234 (begin '#f ((lambda (g$3372$15236) (if g$3372$15236 (begin '#f (append g$3372$15234 g$3372$15236)) '#f)) ((lambda (g$3372$15238) (if (g$3372$13212 g$3372$15238) (begin '#f ((lambda (g$3372$15240) (if g$3372$15240 (begin '#f ((lambda (g$3372$15242) (if g$3372$15242 (begin '#f (append g$3372$15240 g$3372$15242)) '#f)) ((lambda (g$3372$15244) (if (g$3372$13212 g$3372$15244) (begin '#f ((lambda (g$3372$15246) (if g$3372$15246 (begin '#f ((lambda (g$3372$15248) (if g$3372$15248 (begin '#f (append g$3372$15246 g$3372$15248)) '#f)) ((letrec ((g$3372$15250 (lambda (g$3372$15252) (if (g$3372$13212 g$3372$15252) ((lambda (g$3372$15254) (if g$3372$15254 (begin '#f ((lambda (g$3372$15256) (if g$3372$15256 (begin '#f (map cons g$3372$15254 g$3372$15256)) '#f)) (g$3372$15250 (g$3372$13224 g$3372$15252)))) '#f)) ((lambda (g$3372$15258) (list g$3372$15258)) (g$3372$13220 g$3372$15252))) (if (g$3372$13216 g$3372$15252) (list (begin 'b* '())) '#f))))) g$3372$15250) (g$3372$13224 g$3372$15244)))) '#f)) ((lambda (g$3372$15260) (list g$3372$15260)) (g$3372$13220 g$3372$15244)))) '#f)) (g$3372$13224 g$3372$15238)))) '#f)) ((letrec ((g$3372$15262 (lambda (g$3372$15264) (if (g$3372$13212 g$3372$15264) ((lambda (g$3372$15266) (if g$3372$15266 (begin '#f ((lambda (g$3372$15268) (if g$3372$15268 (begin '#f (map cons g$3372$15266 g$3372$15268)) '#f)) (g$3372$15262 (g$3372$13224 g$3372$15264)))) '#f)) ((lambda (g$3372$15270) (if (g$3372$13212 g$3372$15270) (begin '#f ((lambda (g$3372$15272) (if g$3372$15272 (begin '#f ((lambda (g$3372$15274) (if g$3372$15274 (begin '#f (append g$3372$15272 g$3372$15274)) '#f)) ((lambda (g$3372$15276) (if (g$3372$13212 g$3372$15276) (begin '#f ((lambda (g$3372$15278) (if g$3372$15278 (begin '#f ((lambda (g$3372$15280) (if g$3372$15280 (begin '#f (append g$3372$15278 g$3372$15280)) '#f)) ((lambda (g$3372$15282) (if (equal? (g$3372$13246 g$3372$15282) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$15276)))) '#f)) ((lambda (g$3372$15284) (list g$3372$15284)) (g$3372$13220 g$3372$15276)))) '#f)) (g$3372$13224 g$3372$15270)))) '#f)) ((lambda (g$3372$15286) (list g$3372$15286)) (g$3372$13220 g$3372$15270)))) '#f)) (g$3372$13220 g$3372$15264))) (if (g$3372$13216 g$3372$15264) (list (begin 'fml* '()) (begin 'expr* '())) '#f))))) g$3372$15262) (g$3372$13220 g$3372$15238)))) '#f)) (g$3372$13224 g$3372$15232)))) '#f)) ((lambda (g$3372$15288) '()) (g$3372$13220 g$3372$15232)))) '#f)) g$3372$15212))) g$3372$15210))) (set! g$3372$13517 (lambda (g$3372$15290) ((lambda (g$3372$15292) ((lambda (g$3372$15294) (if (if g$3372$15294 (begin '#f (apply (lambda (g$3372$15296 g$3372$15297 g$3372$15298 g$3372$15299) '#t) g$3372$15294)) '#f) (apply (lambda (g$3372$15304 g$3372$15305 g$3372$15306 g$3372$15307) (if (g$3372$13236 g$3372$15304) (g$3372$13513 (cons (cons 'lambda (cons g$3372$15304 (cons g$3372$15306 g$3372$15307))) g$3372$15305)) (error 'expander '"invalid bindings" (g$3372$13244 g$3372$15290 '())))) g$3372$15294) ((lambda (g$3372$15312) ((lambda (g$3372$15314) (if (if g$3372$15314 (begin '#f (apply (lambda (g$3372$15316 g$3372$15317 g$3372$15318 g$3372$15319 g$3372$15320) (g$3372$13226 g$3372$15316)) g$3372$15314)) '#f) (apply (lambda (g$3372$15326 g$3372$15327 g$3372$15328 g$3372$15329 g$3372$15330) (if (g$3372$13236 g$3372$15327) (g$3372$13513 (list 'letrec (list (list g$3372$15326 (cons 'lambda (cons g$3372$15327 (cons g$3372$15329 g$3372$15330))))) (cons g$3372$15326 g$3372$15328))) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$15290 '())))) g$3372$15314) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$15312 '())))) ((lambda (g$3372$15336) (if (g$3372$13212 g$3372$15336) (begin '#f ((lambda (g$3372$15338) (if g$3372$15338 (begin '#f ((lambda (g$3372$15340) (if g$3372$15340 (begin '#f (append g$3372$15338 g$3372$15340)) '#f)) ((lambda (g$3372$15342) (if (g$3372$13212 g$3372$15342) (begin '#f ((lambda (g$3372$15344) (if g$3372$15344 (begin '#f ((lambda (g$3372$15346) (if g$3372$15346 (begin '#f (append g$3372$15344 g$3372$15346)) '#f)) ((lambda (g$3372$15348) (if (g$3372$13212 g$3372$15348) (begin '#f ((lambda (g$3372$15350) (if g$3372$15350 (begin '#f ((lambda (g$3372$15352) (if g$3372$15352 (begin '#f (append g$3372$15350 g$3372$15352)) '#f)) ((lambda (g$3372$15354) (if (g$3372$13212 g$3372$15354) (begin '#f ((lambda (g$3372$15356) (if g$3372$15356 (begin '#f ((lambda (g$3372$15358) (if g$3372$15358 (begin '#f (append g$3372$15356 g$3372$15358)) '#f)) ((letrec ((g$3372$15360 (lambda (g$3372$15362) (if (g$3372$13212 g$3372$15362) ((lambda (g$3372$15364) (if g$3372$15364 (begin '#f ((lambda (g$3372$15366) (if g$3372$15366 (begin '#f (map cons g$3372$15364 g$3372$15366)) '#f)) (g$3372$15360 (g$3372$13224 g$3372$15362)))) '#f)) ((lambda (g$3372$15368) (list g$3372$15368)) (g$3372$13220 g$3372$15362))) (if (g$3372$13216 g$3372$15362) (list (begin 'b* '())) '#f))))) g$3372$15360) (g$3372$13224 g$3372$15354)))) '#f)) ((lambda (g$3372$15370) (list g$3372$15370)) (g$3372$13220 g$3372$15354)))) '#f)) (g$3372$13224 g$3372$15348)))) '#f)) ((letrec ((g$3372$15372 (lambda (g$3372$15374) (if (g$3372$13212 g$3372$15374) ((lambda (g$3372$15376) (if g$3372$15376 (begin '#f ((lambda (g$3372$15378) (if g$3372$15378 (begin '#f (map cons g$3372$15376 g$3372$15378)) '#f)) (g$3372$15372 (g$3372$13224 g$3372$15374)))) '#f)) ((lambda (g$3372$15380) (if (g$3372$13212 g$3372$15380) (begin '#f ((lambda (g$3372$15382) (if g$3372$15382 (begin '#f ((lambda (g$3372$15384) (if g$3372$15384 (begin '#f (append g$3372$15382 g$3372$15384)) '#f)) ((lambda (g$3372$15386) (if (g$3372$13212 g$3372$15386) (begin '#f ((lambda (g$3372$15388) (if g$3372$15388 (begin '#f ((lambda (g$3372$15390) (if g$3372$15390 (begin '#f (append g$3372$15388 g$3372$15390)) '#f)) ((lambda (g$3372$15392) (if (equal? (g$3372$13246 g$3372$15392) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$15386)))) '#f)) ((lambda (g$3372$15394) (list g$3372$15394)) (g$3372$13220 g$3372$15386)))) '#f)) (g$3372$13224 g$3372$15380)))) '#f)) ((lambda (g$3372$15396) (list g$3372$15396)) (g$3372$13220 g$3372$15380)))) '#f)) (g$3372$13220 g$3372$15374))) (if (g$3372$13216 g$3372$15374) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$3372$15372) (g$3372$13220 g$3372$15348)))) '#f)) (g$3372$13224 g$3372$15342)))) '#f)) ((lambda (g$3372$15398) (list g$3372$15398)) (g$3372$13220 g$3372$15342)))) '#f)) (g$3372$13224 g$3372$15336)))) '#f)) ((lambda (g$3372$15400) '()) (g$3372$13220 g$3372$15336)))) '#f)) g$3372$15312))) g$3372$15292))) ((lambda (g$3372$15402) (if (g$3372$13212 g$3372$15402) (begin '#f ((lambda (g$3372$15404) (if g$3372$15404 (begin '#f ((lambda (g$3372$15406) (if g$3372$15406 (begin '#f (append g$3372$15404 g$3372$15406)) '#f)) ((lambda (g$3372$15408) (if (g$3372$13212 g$3372$15408) (begin '#f ((lambda (g$3372$15410) (if g$3372$15410 (begin '#f ((lambda (g$3372$15412) (if g$3372$15412 (begin '#f (append g$3372$15410 g$3372$15412)) '#f)) ((lambda (g$3372$15414) (if (g$3372$13212 g$3372$15414) (begin '#f ((lambda (g$3372$15416) (if g$3372$15416 (begin '#f ((lambda (g$3372$15418) (if g$3372$15418 (begin '#f (append g$3372$15416 g$3372$15418)) '#f)) ((letrec ((g$3372$15420 (lambda (g$3372$15422) (if (g$3372$13212 g$3372$15422) ((lambda (g$3372$15424) (if g$3372$15424 (begin '#f ((lambda (g$3372$15426) (if g$3372$15426 (begin '#f (map cons g$3372$15424 g$3372$15426)) '#f)) (g$3372$15420 (g$3372$13224 g$3372$15422)))) '#f)) ((lambda (g$3372$15428) (list g$3372$15428)) (g$3372$13220 g$3372$15422))) (if (g$3372$13216 g$3372$15422) (list (begin 'b* '())) '#f))))) g$3372$15420) (g$3372$13224 g$3372$15414)))) '#f)) ((lambda (g$3372$15430) (list g$3372$15430)) (g$3372$13220 g$3372$15414)))) '#f)) (g$3372$13224 g$3372$15408)))) '#f)) ((letrec ((g$3372$15432 (lambda (g$3372$15434) (if (g$3372$13212 g$3372$15434) ((lambda (g$3372$15436) (if g$3372$15436 (begin '#f ((lambda (g$3372$15438) (if g$3372$15438 (begin '#f (map cons g$3372$15436 g$3372$15438)) '#f)) (g$3372$15432 (g$3372$13224 g$3372$15434)))) '#f)) ((lambda (g$3372$15440) (if (g$3372$13212 g$3372$15440) (begin '#f ((lambda (g$3372$15442) (if g$3372$15442 (begin '#f ((lambda (g$3372$15444) (if g$3372$15444 (begin '#f (append g$3372$15442 g$3372$15444)) '#f)) ((lambda (g$3372$15446) (if (g$3372$13212 g$3372$15446) (begin '#f ((lambda (g$3372$15448) (if g$3372$15448 (begin '#f ((lambda (g$3372$15450) (if g$3372$15450 (begin '#f (append g$3372$15448 g$3372$15450)) '#f)) ((lambda (g$3372$15452) (if (equal? (g$3372$13246 g$3372$15452) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$15446)))) '#f)) ((lambda (g$3372$15454) (list g$3372$15454)) (g$3372$13220 g$3372$15446)))) '#f)) (g$3372$13224 g$3372$15440)))) '#f)) ((lambda (g$3372$15456) (list g$3372$15456)) (g$3372$13220 g$3372$15440)))) '#f)) (g$3372$13220 g$3372$15434))) (if (g$3372$13216 g$3372$15434) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$3372$15432) (g$3372$13220 g$3372$15408)))) '#f)) (g$3372$13224 g$3372$15402)))) '#f)) ((lambda (g$3372$15458) '()) (g$3372$13220 g$3372$15402)))) '#f)) g$3372$15292))) g$3372$15290))) (set! g$3372$13519 (lambda (g$3372$15460) ((lambda (g$3372$15462) ((lambda (g$3372$15464) (if (if g$3372$15464 (begin '#f (apply (lambda (g$3372$15466 g$3372$15467 g$3372$15468 g$3372$15469) '#t) g$3372$15464)) '#f) (apply (lambda (g$3372$15474 g$3372$15475 g$3372$15476 g$3372$15477) (if (g$3372$13236 g$3372$15475) (g$3372$13513 (list 'make-traced-procedure (list 'quote g$3372$15474) (cons 'lambda (cons g$3372$15475 (cons g$3372$15476 g$3372$15477))))) (error 'expander '"invalid formals" (g$3372$13244 g$3372$15460 '())))) g$3372$15464) ((lambda (g$3372$15482) ((lambda (g$3372$15484) (if (if g$3372$15484 (begin '#f (apply (lambda (g$3372$15486 g$3372$15487 g$3372$15488 g$3372$15489 g$3372$15490) '#t) g$3372$15484)) '#f) (apply (lambda (g$3372$15496 g$3372$15497 g$3372$15498 g$3372$15499 g$3372$15500) (if (g$3372$13236 (cons g$3372$15498 g$3372$15497)) (g$3372$13513 (list 'make-traced-procedure (list 'quote g$3372$15496) (cons 'lambda (cons (append g$3372$15497 g$3372$15498) (cons g$3372$15499 g$3372$15500))))) (error 'expander '"invalid formals" (g$3372$13244 g$3372$15460 '())))) g$3372$15484) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$15482 '())))) ((lambda (g$3372$15506) (if (g$3372$13212 g$3372$15506) (begin '#f ((lambda (g$3372$15508) (if g$3372$15508 (begin '#f ((lambda (g$3372$15510) (if g$3372$15510 (begin '#f (append g$3372$15508 g$3372$15510)) '#f)) ((lambda (g$3372$15512) (if (g$3372$13212 g$3372$15512) (begin '#f ((lambda (g$3372$15514) (if g$3372$15514 (begin '#f ((lambda (g$3372$15516) (if g$3372$15516 (begin '#f (append g$3372$15514 g$3372$15516)) '#f)) ((lambda (g$3372$15518) (if (g$3372$13212 g$3372$15518) (begin '#f ((lambda (g$3372$15520) (if g$3372$15520 (begin '#f ((lambda (g$3372$15522) (if g$3372$15522 (begin '#f (append g$3372$15520 g$3372$15522)) '#f)) ((lambda (g$3372$15524) (if (g$3372$13212 g$3372$15524) (begin '#f ((lambda (g$3372$15526) (if g$3372$15526 (begin '#f ((lambda (g$3372$15528) (if g$3372$15528 (begin '#f (append g$3372$15526 g$3372$15528)) '#f)) ((letrec ((g$3372$15530 (lambda (g$3372$15532) (if (g$3372$13212 g$3372$15532) ((lambda (g$3372$15534) (if g$3372$15534 (begin '#f ((lambda (g$3372$15536) (if g$3372$15536 (begin '#f (map cons g$3372$15534 g$3372$15536)) '#f)) (g$3372$15530 (g$3372$13224 g$3372$15532)))) '#f)) ((lambda (g$3372$15538) (list g$3372$15538)) (g$3372$13220 g$3372$15532))) (if (g$3372$13216 g$3372$15532) (list (begin 'b* '())) '#f))))) g$3372$15530) (g$3372$13224 g$3372$15524)))) '#f)) ((lambda (g$3372$15540) (list g$3372$15540)) (g$3372$13220 g$3372$15524)))) '#f)) (g$3372$13224 g$3372$15518)))) '#f)) ((letrec ((g$3372$15542 (lambda (g$3372$15548) (if (g$3372$13212 g$3372$15548) ((lambda (g$3372$15550) (if g$3372$15550 (begin '#f ((lambda (g$3372$15552) (if g$3372$15552 (begin '#f (cons (map cons g$3372$15550 (car g$3372$15552)) (cdr g$3372$15552))) '#f)) (g$3372$15542 (g$3372$13224 g$3372$15548)))) '#f)) ((lambda (g$3372$15554) (list g$3372$15554)) (g$3372$13220 g$3372$15548))) ((lambda (g$3372$15556) (if g$3372$15556 (begin '#f (cons (list (begin 'fmls '())) g$3372$15556)) '#f)) ((lambda (g$3372$15558) (list g$3372$15558)) g$3372$15548)))))) (lambda (g$3372$15544) ((lambda (g$3372$15546) (if g$3372$15546 (begin '#f (append (car g$3372$15546) (cdr g$3372$15546))) '#f)) (g$3372$15542 g$3372$15544)))) (g$3372$13220 g$3372$15518)))) '#f)) (g$3372$13224 g$3372$15512)))) '#f)) ((lambda (g$3372$15560) (list g$3372$15560)) (g$3372$13220 g$3372$15512)))) '#f)) (g$3372$13224 g$3372$15506)))) '#f)) ((lambda (g$3372$15562) '()) (g$3372$13220 g$3372$15506)))) '#f)) g$3372$15482))) g$3372$15462))) ((lambda (g$3372$15564) (if (g$3372$13212 g$3372$15564) (begin '#f ((lambda (g$3372$15566) (if g$3372$15566 (begin '#f ((lambda (g$3372$15568) (if g$3372$15568 (begin '#f (append g$3372$15566 g$3372$15568)) '#f)) ((lambda (g$3372$15570) (if (g$3372$13212 g$3372$15570) (begin '#f ((lambda (g$3372$15572) (if g$3372$15572 (begin '#f ((lambda (g$3372$15574) (if g$3372$15574 (begin '#f (append g$3372$15572 g$3372$15574)) '#f)) ((lambda (g$3372$15576) (if (g$3372$13212 g$3372$15576) (begin '#f ((lambda (g$3372$15578) (if g$3372$15578 (begin '#f ((lambda (g$3372$15580) (if g$3372$15580 (begin '#f (append g$3372$15578 g$3372$15580)) '#f)) ((lambda (g$3372$15582) (if (g$3372$13212 g$3372$15582) (begin '#f ((lambda (g$3372$15584) (if g$3372$15584 (begin '#f ((lambda (g$3372$15586) (if g$3372$15586 (begin '#f (append g$3372$15584 g$3372$15586)) '#f)) ((letrec ((g$3372$15588 (lambda (g$3372$15590) (if (g$3372$13212 g$3372$15590) ((lambda (g$3372$15592) (if g$3372$15592 (begin '#f ((lambda (g$3372$15594) (if g$3372$15594 (begin '#f (map cons g$3372$15592 g$3372$15594)) '#f)) (g$3372$15588 (g$3372$13224 g$3372$15590)))) '#f)) ((lambda (g$3372$15596) (list g$3372$15596)) (g$3372$13220 g$3372$15590))) (if (g$3372$13216 g$3372$15590) (list (begin 'b* '())) '#f))))) g$3372$15588) (g$3372$13224 g$3372$15582)))) '#f)) ((lambda (g$3372$15598) (list g$3372$15598)) (g$3372$13220 g$3372$15582)))) '#f)) (g$3372$13224 g$3372$15576)))) '#f)) ((letrec ((g$3372$15600 (lambda (g$3372$15602) (if (g$3372$13212 g$3372$15602) ((lambda (g$3372$15604) (if g$3372$15604 (begin '#f ((lambda (g$3372$15606) (if g$3372$15606 (begin '#f (map cons g$3372$15604 g$3372$15606)) '#f)) (g$3372$15600 (g$3372$13224 g$3372$15602)))) '#f)) ((lambda (g$3372$15608) (list g$3372$15608)) (g$3372$13220 g$3372$15602))) (if (g$3372$13216 g$3372$15602) (list (begin 'fmls '())) '#f))))) g$3372$15600) (g$3372$13220 g$3372$15576)))) '#f)) (g$3372$13224 g$3372$15570)))) '#f)) ((lambda (g$3372$15610) (list g$3372$15610)) (g$3372$13220 g$3372$15570)))) '#f)) (g$3372$13224 g$3372$15564)))) '#f)) ((lambda (g$3372$15612) '()) (g$3372$13220 g$3372$15564)))) '#f)) g$3372$15462))) g$3372$15460))) (set! g$3372$13521 (lambda (g$3372$15614) ((lambda (g$3372$15616) ((lambda (g$3372$15618) (if (if g$3372$15618 (begin '#f (apply (lambda (g$3372$15620 g$3372$15621 g$3372$15622 g$3372$15623) '#t) g$3372$15618)) '#f) (apply (lambda (g$3372$15628 g$3372$15629 g$3372$15630 g$3372$15631) (if (g$3372$13236 g$3372$15629) (g$3372$13513 (list 'define g$3372$15628 (list 'make-traced-procedure (list 'quote g$3372$15628) (cons 'lambda (cons g$3372$15629 (cons g$3372$15630 g$3372$15631)))))) (error 'expander '"invalid formals" (g$3372$13244 g$3372$15614 '())))) g$3372$15618) ((lambda (g$3372$15636) ((lambda (g$3372$15638) (if (if g$3372$15638 (begin '#f (apply (lambda (g$3372$15640 g$3372$15641 g$3372$15642 g$3372$15643 g$3372$15644) '#t) g$3372$15638)) '#f) (apply (lambda (g$3372$15650 g$3372$15651 g$3372$15652 g$3372$15653 g$3372$15654) (if (g$3372$13236 (cons g$3372$15652 g$3372$15651)) (g$3372$13513 (list 'define g$3372$15650 (list 'make-traced-procedure (list 'quote g$3372$15650) (cons 'lambda (cons (append g$3372$15651 g$3372$15652) (cons g$3372$15653 g$3372$15654)))))) (error 'expander '"invalid formals" (g$3372$13244 g$3372$15614 '())))) g$3372$15638) ((lambda (g$3372$15660) ((lambda (g$3372$15662) (if (if g$3372$15662 (begin '#f (apply (lambda (g$3372$15664 g$3372$15665) '#t) g$3372$15662)) '#f) (apply (lambda (g$3372$15668 g$3372$15669) (if (g$3372$13226 g$3372$15668) (g$3372$13513 (list 'define g$3372$15668 (list 'let (list (list 'v g$3372$15669)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$3372$15668) '(v))) '((error 'trace-define "not a procedure" v)))))))) (error 'expander '"invalid formals" (g$3372$13244 g$3372$15614 '())))) g$3372$15662) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$15660 '())))) ((lambda (g$3372$15672) (if (g$3372$13212 g$3372$15672) (begin '#f ((lambda (g$3372$15674) (if g$3372$15674 (begin '#f ((lambda (g$3372$15676) (if g$3372$15676 (begin '#f (append g$3372$15674 g$3372$15676)) '#f)) ((lambda (g$3372$15678) (if (g$3372$13212 g$3372$15678) (begin '#f ((lambda (g$3372$15680) (if g$3372$15680 (begin '#f ((lambda (g$3372$15682) (if g$3372$15682 (begin '#f (append g$3372$15680 g$3372$15682)) '#f)) ((lambda (g$3372$15684) (if (g$3372$13212 g$3372$15684) (begin '#f ((lambda (g$3372$15686) (if g$3372$15686 (begin '#f ((lambda (g$3372$15688) (if g$3372$15688 (begin '#f (append g$3372$15686 g$3372$15688)) '#f)) ((lambda (g$3372$15690) (if (equal? (g$3372$13246 g$3372$15690) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$15684)))) '#f)) ((lambda (g$3372$15692) (list g$3372$15692)) (g$3372$13220 g$3372$15684)))) '#f)) (g$3372$13224 g$3372$15678)))) '#f)) ((lambda (g$3372$15694) (list g$3372$15694)) (g$3372$13220 g$3372$15678)))) '#f)) (g$3372$13224 g$3372$15672)))) '#f)) ((lambda (g$3372$15696) '()) (g$3372$13220 g$3372$15672)))) '#f)) g$3372$15660))) g$3372$15636))) ((lambda (g$3372$15698) (if (g$3372$13212 g$3372$15698) (begin '#f ((lambda (g$3372$15700) (if g$3372$15700 (begin '#f ((lambda (g$3372$15702) (if g$3372$15702 (begin '#f (append g$3372$15700 g$3372$15702)) '#f)) ((lambda (g$3372$15704) (if (g$3372$13212 g$3372$15704) (begin '#f ((lambda (g$3372$15706) (if g$3372$15706 (begin '#f ((lambda (g$3372$15708) (if g$3372$15708 (begin '#f (append g$3372$15706 g$3372$15708)) '#f)) ((lambda (g$3372$15710) (if (g$3372$13212 g$3372$15710) (begin '#f ((lambda (g$3372$15712) (if g$3372$15712 (begin '#f ((lambda (g$3372$15714) (if g$3372$15714 (begin '#f (append g$3372$15712 g$3372$15714)) '#f)) ((letrec ((g$3372$15716 (lambda (g$3372$15718) (if (g$3372$13212 g$3372$15718) ((lambda (g$3372$15720) (if g$3372$15720 (begin '#f ((lambda (g$3372$15722) (if g$3372$15722 (begin '#f (map cons g$3372$15720 g$3372$15722)) '#f)) (g$3372$15716 (g$3372$13224 g$3372$15718)))) '#f)) ((lambda (g$3372$15724) (list g$3372$15724)) (g$3372$13220 g$3372$15718))) (if (g$3372$13216 g$3372$15718) (list (begin 'b* '())) '#f))))) g$3372$15716) (g$3372$13224 g$3372$15710)))) '#f)) ((lambda (g$3372$15726) (list g$3372$15726)) (g$3372$13220 g$3372$15710)))) '#f)) (g$3372$13224 g$3372$15704)))) '#f)) ((lambda (g$3372$15728) (if (g$3372$13212 g$3372$15728) (begin '#f ((lambda (g$3372$15730) (if g$3372$15730 (begin '#f ((lambda (g$3372$15732) (if g$3372$15732 (begin '#f (append g$3372$15730 g$3372$15732)) '#f)) ((letrec ((g$3372$15734 (lambda (g$3372$15740) (if (g$3372$13212 g$3372$15740) ((lambda (g$3372$15742) (if g$3372$15742 (begin '#f ((lambda (g$3372$15744) (if g$3372$15744 (begin '#f (cons (map cons g$3372$15742 (car g$3372$15744)) (cdr g$3372$15744))) '#f)) (g$3372$15734 (g$3372$13224 g$3372$15740)))) '#f)) ((lambda (g$3372$15746) (list g$3372$15746)) (g$3372$13220 g$3372$15740))) ((lambda (g$3372$15748) (if g$3372$15748 (begin '#f (cons (list (begin 'fmls '())) g$3372$15748)) '#f)) ((lambda (g$3372$15750) (list g$3372$15750)) g$3372$15740)))))) (lambda (g$3372$15736) ((lambda (g$3372$15738) (if g$3372$15738 (begin '#f (append (car g$3372$15738) (cdr g$3372$15738))) '#f)) (g$3372$15734 g$3372$15736)))) (g$3372$13224 g$3372$15728)))) '#f)) ((lambda (g$3372$15752) (list g$3372$15752)) (g$3372$13220 g$3372$15728)))) '#f)) (g$3372$13220 g$3372$15704)))) '#f)) (g$3372$13224 g$3372$15698)))) '#f)) ((lambda (g$3372$15754) '()) (g$3372$13220 g$3372$15698)))) '#f)) g$3372$15636))) g$3372$15616))) ((lambda (g$3372$15756) (if (g$3372$13212 g$3372$15756) (begin '#f ((lambda (g$3372$15758) (if g$3372$15758 (begin '#f ((lambda (g$3372$15760) (if g$3372$15760 (begin '#f (append g$3372$15758 g$3372$15760)) '#f)) ((lambda (g$3372$15762) (if (g$3372$13212 g$3372$15762) (begin '#f ((lambda (g$3372$15764) (if g$3372$15764 (begin '#f ((lambda (g$3372$15766) (if g$3372$15766 (begin '#f (append g$3372$15764 g$3372$15766)) '#f)) ((lambda (g$3372$15768) (if (g$3372$13212 g$3372$15768) (begin '#f ((lambda (g$3372$15770) (if g$3372$15770 (begin '#f ((lambda (g$3372$15772) (if g$3372$15772 (begin '#f (append g$3372$15770 g$3372$15772)) '#f)) ((letrec ((g$3372$15774 (lambda (g$3372$15776) (if (g$3372$13212 g$3372$15776) ((lambda (g$3372$15778) (if g$3372$15778 (begin '#f ((lambda (g$3372$15780) (if g$3372$15780 (begin '#f (map cons g$3372$15778 g$3372$15780)) '#f)) (g$3372$15774 (g$3372$13224 g$3372$15776)))) '#f)) ((lambda (g$3372$15782) (list g$3372$15782)) (g$3372$13220 g$3372$15776))) (if (g$3372$13216 g$3372$15776) (list (begin 'b* '())) '#f))))) g$3372$15774) (g$3372$13224 g$3372$15768)))) '#f)) ((lambda (g$3372$15784) (list g$3372$15784)) (g$3372$13220 g$3372$15768)))) '#f)) (g$3372$13224 g$3372$15762)))) '#f)) ((lambda (g$3372$15786) (if (g$3372$13212 g$3372$15786) (begin '#f ((lambda (g$3372$15788) (if g$3372$15788 (begin '#f ((lambda (g$3372$15790) (if g$3372$15790 (begin '#f (append g$3372$15788 g$3372$15790)) '#f)) ((letrec ((g$3372$15792 (lambda (g$3372$15794) (if (g$3372$13212 g$3372$15794) ((lambda (g$3372$15796) (if g$3372$15796 (begin '#f ((lambda (g$3372$15798) (if g$3372$15798 (begin '#f (map cons g$3372$15796 g$3372$15798)) '#f)) (g$3372$15792 (g$3372$13224 g$3372$15794)))) '#f)) ((lambda (g$3372$15800) (list g$3372$15800)) (g$3372$13220 g$3372$15794))) (if (g$3372$13216 g$3372$15794) (list (begin 'fmls '())) '#f))))) g$3372$15792) (g$3372$13224 g$3372$15786)))) '#f)) ((lambda (g$3372$15802) (list g$3372$15802)) (g$3372$13220 g$3372$15786)))) '#f)) (g$3372$13220 g$3372$15762)))) '#f)) (g$3372$13224 g$3372$15756)))) '#f)) ((lambda (g$3372$15804) '()) (g$3372$13220 g$3372$15756)))) '#f)) g$3372$15616))) g$3372$15614))) (set! g$3372$13523 (lambda (g$3372$15806) ((lambda (g$3372$15808) (begin (set! g$3372$15808 (lambda (g$3372$15810 g$3372$15811 g$3372$15812) ((lambda (g$3372$15816 g$3372$15818) (begin (set! g$3372$15816 (lambda (g$3372$15912 g$3372$15913) ((lambda (g$3372$15916) ((lambda (g$3372$15918) (if (if g$3372$15918 (begin '#f (apply (lambda (g$3372$15920 g$3372$15921) '#t) g$3372$15918)) '#f) (apply (lambda (g$3372$15924 g$3372$15925) ((lambda (g$3372$15928) (list 'let (list (list g$3372$15928 g$3372$15924)) (list 'if g$3372$15928 (list g$3372$15925 g$3372$15928) g$3372$15913))) (gensym))) g$3372$15918) ((lambda (g$3372$15930) ((lambda (g$3372$15932) (if (if g$3372$15932 (begin '#f (apply (lambda (g$3372$15934) '#t) g$3372$15932)) '#f) (apply (lambda (g$3372$15936) ((lambda (g$3372$15938) (list 'let (list (list g$3372$15938 g$3372$15936)) (list 'if g$3372$15938 g$3372$15938 g$3372$15913))) (gensym))) g$3372$15932) ((lambda (g$3372$15940) ((lambda (g$3372$15942) (if (if g$3372$15942 (begin '#f (apply (lambda (g$3372$15944 g$3372$15945 g$3372$15946) '#t) g$3372$15942)) '#f) (apply (lambda (g$3372$15950 g$3372$15951 g$3372$15952) (list 'if g$3372$15950 (cons 'begin (cons g$3372$15951 g$3372$15952)) g$3372$15913)) g$3372$15942) ((lambda (g$3372$15956) ((lambda (g$3372$15958) (if (if g$3372$15958 (begin '#f (apply (lambda () '#t) g$3372$15958)) '#f) (apply (lambda () (error 'expander '"invalid guard clause" (g$3372$13244 g$3372$15912 '()))) g$3372$15958) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$15956 '())))) ((lambda (g$3372$15960) '()) g$3372$15956))) g$3372$15940))) ((lambda (g$3372$15962) (if (g$3372$13212 g$3372$15962) (begin '#f ((lambda (g$3372$15964) (if g$3372$15964 (begin '#f ((lambda (g$3372$15966) (if g$3372$15966 (begin '#f (append g$3372$15964 g$3372$15966)) '#f)) ((lambda (g$3372$15968) (if (g$3372$13212 g$3372$15968) (begin '#f ((lambda (g$3372$15970) (if g$3372$15970 (begin '#f ((lambda (g$3372$15972) (if g$3372$15972 (begin '#f (append g$3372$15970 g$3372$15972)) '#f)) ((letrec ((g$3372$15974 (lambda (g$3372$15976) (if (g$3372$13212 g$3372$15976) ((lambda (g$3372$15978) (if g$3372$15978 (begin '#f ((lambda (g$3372$15980) (if g$3372$15980 (begin '#f (map cons g$3372$15978 g$3372$15980)) '#f)) (g$3372$15974 (g$3372$13224 g$3372$15976)))) '#f)) ((lambda (g$3372$15982) (list g$3372$15982)) (g$3372$13220 g$3372$15976))) (if (g$3372$13216 g$3372$15976) (list (begin 'v* '())) '#f))))) g$3372$15974) (g$3372$13224 g$3372$15968)))) '#f)) ((lambda (g$3372$15984) (list g$3372$15984)) (g$3372$13220 g$3372$15968)))) '#f)) (g$3372$13224 g$3372$15962)))) '#f)) ((lambda (g$3372$15986) (list g$3372$15986)) (g$3372$13220 g$3372$15962)))) '#f)) g$3372$15940))) g$3372$15930))) ((lambda (g$3372$15988) (if (g$3372$13212 g$3372$15988) (begin '#f ((lambda (g$3372$15990) (if g$3372$15990 (begin '#f ((lambda (g$3372$15992) (if g$3372$15992 (begin '#f (append g$3372$15990 g$3372$15992)) '#f)) ((lambda (g$3372$15994) (if (equal? (g$3372$13246 g$3372$15994) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$15988)))) '#f)) ((lambda (g$3372$15996) (list g$3372$15996)) (g$3372$13220 g$3372$15988)))) '#f)) g$3372$15930))) g$3372$15916))) ((lambda (g$3372$15998) (if (g$3372$13212 g$3372$15998) (begin '#f ((lambda (g$3372$16000) (if g$3372$16000 (begin '#f ((lambda (g$3372$16002) (if g$3372$16002 (begin '#f (append g$3372$16000 g$3372$16002)) '#f)) ((lambda (g$3372$16004) (if (g$3372$13212 g$3372$16004) (begin '#f ((lambda (g$3372$16006) (if g$3372$16006 (begin '#f ((lambda (g$3372$16008) (if g$3372$16008 (begin '#f (append g$3372$16006 g$3372$16008)) '#f)) ((lambda (g$3372$16010) (if (g$3372$13212 g$3372$16010) (begin '#f ((lambda (g$3372$16012) (if g$3372$16012 (begin '#f ((lambda (g$3372$16014) (if g$3372$16014 (begin '#f (append g$3372$16012 g$3372$16014)) '#f)) ((lambda (g$3372$16016) (if (equal? (g$3372$13246 g$3372$16016) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16010)))) '#f)) ((lambda (g$3372$16018) (list g$3372$16018)) (g$3372$13220 g$3372$16010)))) '#f)) (g$3372$13224 g$3372$16004)))) '#f)) ((lambda (g$3372$16020) (if (g$3372$13226 g$3372$16020) (if (g$3372$13234 g$3372$16020 (g$3372$13479 '=>)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$16004)))) '#f)) (g$3372$13224 g$3372$15998)))) '#f)) ((lambda (g$3372$16022) (list g$3372$16022)) (g$3372$13220 g$3372$15998)))) '#f)) g$3372$15916))) g$3372$15912))) (set! g$3372$15818 (lambda (g$3372$15820) ((lambda (g$3372$15822) ((lambda (g$3372$15824) (if (if g$3372$15824 (begin '#f (apply (lambda () '#t) g$3372$15824)) '#f) (apply (lambda () ((lambda (g$3372$15826) (values (list g$3372$15826 (list 'lambda '() (list 'raise g$3372$15810))) g$3372$15826)) (gensym))) g$3372$15824) ((lambda (g$3372$15828) ((lambda (g$3372$15830) (if (if g$3372$15830 (begin '#f (apply (lambda (g$3372$15832 g$3372$15833) '#t) g$3372$15830)) '#f) (apply (lambda (g$3372$15836 g$3372$15837) (values (cons 'begin (cons g$3372$15836 g$3372$15837)) '#f)) g$3372$15830) ((lambda (g$3372$15840) ((lambda (g$3372$15842) (if (if g$3372$15842 (begin '#f (apply (lambda (g$3372$15844 g$3372$15845) '#t) g$3372$15842)) '#f) (apply (lambda (g$3372$15848 g$3372$15849) (call-with-values (lambda () (g$3372$15818 g$3372$15849)) (lambda (g$3372$15852 g$3372$15853) (values (g$3372$15816 g$3372$15848 g$3372$15852) g$3372$15853)))) g$3372$15842) ((lambda (g$3372$15856) ((lambda (g$3372$15858) (if (if g$3372$15858 (begin '#f (apply (lambda (g$3372$15860) '#t) g$3372$15858)) '#f) (apply (lambda (g$3372$15862) (error 'expander '"invalid guard clause" (g$3372$13244 g$3372$15862 '()))) g$3372$15858) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$15856 '())))) ((lambda (g$3372$15864) (list g$3372$15864)) g$3372$15856))) g$3372$15840))) ((lambda (g$3372$15866) (if (g$3372$13212 g$3372$15866) (begin '#f ((lambda (g$3372$15868) (if g$3372$15868 (begin '#f ((lambda (g$3372$15870) (if g$3372$15870 (begin '#f (append g$3372$15868 g$3372$15870)) '#f)) ((lambda (g$3372$15872) (list g$3372$15872)) (g$3372$13224 g$3372$15866)))) '#f)) ((lambda (g$3372$15874) (list g$3372$15874)) (g$3372$13220 g$3372$15866)))) '#f)) g$3372$15840))) g$3372$15828))) ((lambda (g$3372$15876) (if (g$3372$13212 g$3372$15876) (begin '#f ((lambda (g$3372$15878) (if g$3372$15878 (begin '#f ((lambda (g$3372$15880) (if g$3372$15880 (begin '#f (append g$3372$15878 g$3372$15880)) '#f)) ((lambda (g$3372$15882) (if (equal? (g$3372$13246 g$3372$15882) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$15876)))) '#f)) ((lambda (g$3372$15884) (if (g$3372$13212 g$3372$15884) (begin '#f ((lambda (g$3372$15886) (if g$3372$15886 (begin '#f ((lambda (g$3372$15888) (if g$3372$15888 (begin '#f (append g$3372$15886 g$3372$15888)) '#f)) ((lambda (g$3372$15890) (if (g$3372$13212 g$3372$15890) (begin '#f ((lambda (g$3372$15892) (if g$3372$15892 (begin '#f ((lambda (g$3372$15894) (if g$3372$15894 (begin '#f (append g$3372$15892 g$3372$15894)) '#f)) ((letrec ((g$3372$15896 (lambda (g$3372$15898) (if (g$3372$13212 g$3372$15898) ((lambda (g$3372$15900) (if g$3372$15900 (begin '#f ((lambda (g$3372$15902) (if g$3372$15902 (begin '#f (map cons g$3372$15900 g$3372$15902)) '#f)) (g$3372$15896 (g$3372$13224 g$3372$15898)))) '#f)) ((lambda (g$3372$15904) (list g$3372$15904)) (g$3372$13220 g$3372$15898))) (if (g$3372$13216 g$3372$15898) (list (begin 'e* '())) '#f))))) g$3372$15896) (g$3372$13224 g$3372$15890)))) '#f)) ((lambda (g$3372$15906) (list g$3372$15906)) (g$3372$13220 g$3372$15890)))) '#f)) (g$3372$13224 g$3372$15884)))) '#f)) ((lambda (g$3372$15908) (if (g$3372$13226 g$3372$15908) (if (g$3372$13234 g$3372$15908 (g$3372$13479 'else)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$15884)))) '#f)) (g$3372$13220 g$3372$15876)))) '#f)) g$3372$15828))) g$3372$15822))) ((lambda (g$3372$15910) (if (equal? (g$3372$13246 g$3372$15910) '()) (begin '#f '()) '#f)) g$3372$15822))) g$3372$15820))) (call-with-values (lambda () (g$3372$15818 g$3372$15812)) (lambda (g$3372$16024 g$3372$16025) (if g$3372$16025 (list (list 'call/cc (list 'lambda (list g$3372$16025) (list g$3372$15811 (list 'lambda '() g$3372$16024))))) (list g$3372$15811 (list 'lambda '() g$3372$16024))))))) '#f '#f))) ((lambda (g$3372$16028) ((lambda (g$3372$16030) (if (if g$3372$16030 (begin '#f (apply (lambda (g$3372$16032 g$3372$16033 g$3372$16034 g$3372$16035) (g$3372$13226 g$3372$16032)) g$3372$16030)) '#f) (apply (lambda (g$3372$16040 g$3372$16041 g$3372$16042 g$3372$16043) ((lambda (g$3372$16048) (g$3372$13513 (list (list 'call/cc (list 'lambda (list g$3372$16048) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g$3372$16040) (g$3372$15808 g$3372$16040 g$3372$16048 g$3372$16041)) (cons 'lambda (cons '() (cons '#f (cons g$3372$16042 g$3372$16043))))))))))) (gensym))) g$3372$16030) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16028 '())))) ((lambda (g$3372$16050) (if (g$3372$13212 g$3372$16050) (begin '#f ((lambda (g$3372$16052) (if g$3372$16052 (begin '#f ((lambda (g$3372$16054) (if g$3372$16054 (begin '#f (append g$3372$16052 g$3372$16054)) '#f)) ((lambda (g$3372$16056) (if (g$3372$13212 g$3372$16056) (begin '#f ((lambda (g$3372$16058) (if g$3372$16058 (begin '#f ((lambda (g$3372$16060) (if g$3372$16060 (begin '#f (append g$3372$16058 g$3372$16060)) '#f)) ((lambda (g$3372$16062) (if (g$3372$13212 g$3372$16062) (begin '#f ((lambda (g$3372$16064) (if g$3372$16064 (begin '#f ((lambda (g$3372$16066) (if g$3372$16066 (begin '#f (append g$3372$16064 g$3372$16066)) '#f)) ((letrec ((g$3372$16068 (lambda (g$3372$16070) (if (g$3372$13212 g$3372$16070) ((lambda (g$3372$16072) (if g$3372$16072 (begin '#f ((lambda (g$3372$16074) (if g$3372$16074 (begin '#f (map cons g$3372$16072 g$3372$16074)) '#f)) (g$3372$16068 (g$3372$13224 g$3372$16070)))) '#f)) ((lambda (g$3372$16076) (list g$3372$16076)) (g$3372$13220 g$3372$16070))) (if (g$3372$13216 g$3372$16070) (list (begin 'b* '())) '#f))))) g$3372$16068) (g$3372$13224 g$3372$16062)))) '#f)) ((lambda (g$3372$16078) (list g$3372$16078)) (g$3372$13220 g$3372$16062)))) '#f)) (g$3372$13224 g$3372$16056)))) '#f)) ((lambda (g$3372$16080) (if (g$3372$13212 g$3372$16080) (begin '#f ((lambda (g$3372$16082) (if g$3372$16082 (begin '#f ((lambda (g$3372$16084) (if g$3372$16084 (begin '#f (append g$3372$16082 g$3372$16084)) '#f)) ((letrec ((g$3372$16086 (lambda (g$3372$16088) (if (g$3372$13212 g$3372$16088) ((lambda (g$3372$16090) (if g$3372$16090 (begin '#f ((lambda (g$3372$16092) (if g$3372$16092 (begin '#f (map cons g$3372$16090 g$3372$16092)) '#f)) (g$3372$16086 (g$3372$13224 g$3372$16088)))) '#f)) ((lambda (g$3372$16094) (list g$3372$16094)) (g$3372$13220 g$3372$16088))) (if (g$3372$13216 g$3372$16088) (list (begin 'clause* '())) '#f))))) g$3372$16086) (g$3372$13224 g$3372$16080)))) '#f)) ((lambda (g$3372$16096) (list g$3372$16096)) (g$3372$13220 g$3372$16080)))) '#f)) (g$3372$13220 g$3372$16056)))) '#f)) (g$3372$13224 g$3372$16050)))) '#f)) ((lambda (g$3372$16098) '()) (g$3372$13220 g$3372$16050)))) '#f)) g$3372$16028))) g$3372$15806))) '#f))) (set! g$3372$13525 (lambda (g$3372$16100) ((lambda (g$3372$16102) (begin (set! g$3372$16102 (lambda (g$3372$16104) ((lambda (g$3372$16106) (if g$3372$16106 g$3372$16106 (begin '#f (if (not (memq (car g$3372$16104) (cdr g$3372$16104))) (begin '#f (g$3372$16102 (cdr g$3372$16104))) '#f)))) (null? g$3372$16104)))) ((lambda (g$3372$16108) ((lambda (g$3372$16110) (if (if g$3372$16110 (begin '#f (apply (lambda (g$3372$16112 g$3372$16113 g$3372$16114) (if (g$3372$13226 g$3372$16112) (if (g$3372$13226 g$3372$16114) (begin '#f (for-all g$3372$13226 g$3372$16113)) '#f) '#f)) g$3372$16110)) '#f) (apply (lambda (g$3372$16118 g$3372$16119 g$3372$16120) ((lambda (g$3372$16124 g$3372$16125) (begin (if (g$3372$16102 g$3372$16124) (void) (error 'expander '"duplicate names in enumeration set" (g$3372$13244 g$3372$16100 '()))) (g$3372$13513 (list 'begin (list 'define g$3372$16125 (list 'enum-set-constructor (list 'make-enumeration (list 'quote g$3372$16124)))) (list 'define-syntax g$3372$16118 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g$3372$16124)) '(syntax 'n) (list 'syntax-error 'x '"not a member of set" (list 'quote g$3372$16124))))))) (list 'define-syntax g$3372$16120 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* |...|) (list 'begin (cons 'for-each (cons (list 'lambda '(n) '(unless (identifier? n) (syntax-error x "non-identifier argument")) (cons 'unless (cons (list 'memq '(syntax->datum n) (list 'quote g$3372$16124)) '((syntax-error n "not a member of set"))))) '((syntax (n* |...|))))) (list 'syntax (cons g$3372$16125 '('(n* |...|))))))))))))) (g$3372$13708 g$3372$16119) (gensym))) g$3372$16110) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16108 '())))) ((lambda (g$3372$16128) (if (g$3372$13212 g$3372$16128) (begin '#f ((lambda (g$3372$16130) (if g$3372$16130 (begin '#f ((lambda (g$3372$16132) (if g$3372$16132 (begin '#f (append g$3372$16130 g$3372$16132)) '#f)) ((lambda (g$3372$16134) (if (g$3372$13212 g$3372$16134) (begin '#f ((lambda (g$3372$16136) (if g$3372$16136 (begin '#f ((lambda (g$3372$16138) (if g$3372$16138 (begin '#f (append g$3372$16136 g$3372$16138)) '#f)) ((lambda (g$3372$16140) (if (g$3372$13212 g$3372$16140) (begin '#f ((lambda (g$3372$16142) (if g$3372$16142 (begin '#f ((lambda (g$3372$16144) (if g$3372$16144 (begin '#f (append g$3372$16142 g$3372$16144)) '#f)) ((lambda (g$3372$16146) (if (g$3372$13212 g$3372$16146) (begin '#f ((lambda (g$3372$16148) (if g$3372$16148 (begin '#f ((lambda (g$3372$16150) (if g$3372$16150 (begin '#f (append g$3372$16148 g$3372$16150)) '#f)) ((lambda (g$3372$16152) (if (equal? (g$3372$13246 g$3372$16152) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16146)))) '#f)) ((lambda (g$3372$16154) (list g$3372$16154)) (g$3372$13220 g$3372$16146)))) '#f)) (g$3372$13224 g$3372$16140)))) '#f)) ((letrec ((g$3372$16156 (lambda (g$3372$16158) (if (g$3372$13212 g$3372$16158) ((lambda (g$3372$16160) (if g$3372$16160 (begin '#f ((lambda (g$3372$16162) (if g$3372$16162 (begin '#f (map cons g$3372$16160 g$3372$16162)) '#f)) (g$3372$16156 (g$3372$13224 g$3372$16158)))) '#f)) ((lambda (g$3372$16164) (list g$3372$16164)) (g$3372$13220 g$3372$16158))) (if (g$3372$13216 g$3372$16158) (list (begin 'id* '())) '#f))))) g$3372$16156) (g$3372$13220 g$3372$16140)))) '#f)) (g$3372$13224 g$3372$16134)))) '#f)) ((lambda (g$3372$16166) (list g$3372$16166)) (g$3372$13220 g$3372$16134)))) '#f)) (g$3372$13224 g$3372$16128)))) '#f)) ((lambda (g$3372$16168) '()) (g$3372$13220 g$3372$16128)))) '#f)) g$3372$16108))) g$3372$16100))) '#f))) (set! g$3372$13527 (lambda (g$3372$16170) ((lambda (g$3372$16172) ((lambda (g$3372$16174) (if (if g$3372$16174 (begin '#f (apply (lambda (g$3372$16176) '#t) g$3372$16174)) '#f) (apply (lambda (g$3372$16178) (g$3372$13513 (list 'time-it (list 'quote g$3372$16178) (list 'lambda '() g$3372$16178)))) g$3372$16174) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16172 '())))) ((lambda (g$3372$16180) (if (g$3372$13212 g$3372$16180) (begin '#f ((lambda (g$3372$16182) (if g$3372$16182 (begin '#f ((lambda (g$3372$16184) (if g$3372$16184 (begin '#f (append g$3372$16182 g$3372$16184)) '#f)) ((lambda (g$3372$16186) (if (g$3372$13212 g$3372$16186) (begin '#f ((lambda (g$3372$16188) (if g$3372$16188 (begin '#f ((lambda (g$3372$16190) (if g$3372$16190 (begin '#f (append g$3372$16188 g$3372$16190)) '#f)) ((lambda (g$3372$16192) (if (equal? (g$3372$13246 g$3372$16192) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16186)))) '#f)) ((lambda (g$3372$16194) (list g$3372$16194)) (g$3372$13220 g$3372$16186)))) '#f)) (g$3372$13224 g$3372$16180)))) '#f)) ((lambda (g$3372$16196) '()) (g$3372$13220 g$3372$16180)))) '#f)) g$3372$16172))) g$3372$16170))) (set! g$3372$13529 (lambda (g$3372$16198) ((lambda (g$3372$16200) ((lambda (g$3372$16202) (if (if g$3372$16202 (begin '#f (apply (lambda (g$3372$16204) '#t) g$3372$16202)) '#f) (apply (lambda (g$3372$16206) (g$3372$13513 (list 'make-promise (list 'lambda '() g$3372$16206)))) g$3372$16202) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16200 '())))) ((lambda (g$3372$16208) (if (g$3372$13212 g$3372$16208) (begin '#f ((lambda (g$3372$16210) (if g$3372$16210 (begin '#f ((lambda (g$3372$16212) (if g$3372$16212 (begin '#f (append g$3372$16210 g$3372$16212)) '#f)) ((lambda (g$3372$16214) (if (g$3372$13212 g$3372$16214) (begin '#f ((lambda (g$3372$16216) (if g$3372$16216 (begin '#f ((lambda (g$3372$16218) (if g$3372$16218 (begin '#f (append g$3372$16216 g$3372$16218)) '#f)) ((lambda (g$3372$16220) (if (equal? (g$3372$13246 g$3372$16220) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16214)))) '#f)) ((lambda (g$3372$16222) (list g$3372$16222)) (g$3372$13220 g$3372$16214)))) '#f)) (g$3372$13224 g$3372$16208)))) '#f)) ((lambda (g$3372$16224) '()) (g$3372$13220 g$3372$16208)))) '#f)) g$3372$16200))) g$3372$16198))) (set! g$3372$13531 (lambda (g$3372$16226) ((lambda (g$3372$16228) ((lambda (g$3372$16230) (if (if g$3372$16230 (begin '#f (apply (lambda (g$3372$16232) '#t) g$3372$16230)) '#f) (apply (lambda (g$3372$16234) (g$3372$13513 (list 'unless g$3372$16234 (list 'error ''assert '"assertion failed" (list 'quote g$3372$16234))))) g$3372$16230) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16228 '())))) ((lambda (g$3372$16236) (if (g$3372$13212 g$3372$16236) (begin '#f ((lambda (g$3372$16238) (if g$3372$16238 (begin '#f ((lambda (g$3372$16240) (if g$3372$16240 (begin '#f (append g$3372$16238 g$3372$16240)) '#f)) ((lambda (g$3372$16242) (if (g$3372$13212 g$3372$16242) (begin '#f ((lambda (g$3372$16244) (if g$3372$16244 (begin '#f ((lambda (g$3372$16246) (if g$3372$16246 (begin '#f (append g$3372$16244 g$3372$16246)) '#f)) ((lambda (g$3372$16248) (if (equal? (g$3372$13246 g$3372$16248) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16242)))) '#f)) ((lambda (g$3372$16250) (list g$3372$16250)) (g$3372$13220 g$3372$16242)))) '#f)) (g$3372$13224 g$3372$16236)))) '#f)) ((lambda (g$3372$16252) '()) (g$3372$13220 g$3372$16236)))) '#f)) g$3372$16228))) g$3372$16226))) (set! g$3372$13533 (lambda (g$3372$16254) ((lambda (g$3372$16256) ((lambda (g$3372$16258) (if (if g$3372$16258 (begin '#f (apply (lambda (g$3372$16260) '#t) g$3372$16258)) '#f) (apply (lambda (g$3372$16262) ((lambda (g$3372$16264) (if (memv g$3372$16264 '(little)) (g$3372$13513 ''little) (if (memv g$3372$16264 '(big)) (g$3372$13513 ''big) (error 'expander '"endianness must be big or little" (g$3372$13244 g$3372$16254 '()))))) (g$3372$13708 g$3372$16262))) g$3372$16258) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16256 '())))) ((lambda (g$3372$16265) (if (g$3372$13212 g$3372$16265) (begin '#f ((lambda (g$3372$16267) (if g$3372$16267 (begin '#f ((lambda (g$3372$16269) (if g$3372$16269 (begin '#f (append g$3372$16267 g$3372$16269)) '#f)) ((lambda (g$3372$16271) (if (g$3372$13212 g$3372$16271) (begin '#f ((lambda (g$3372$16273) (if g$3372$16273 (begin '#f ((lambda (g$3372$16275) (if g$3372$16275 (begin '#f (append g$3372$16273 g$3372$16275)) '#f)) ((lambda (g$3372$16277) (if (equal? (g$3372$13246 g$3372$16277) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16271)))) '#f)) ((lambda (g$3372$16279) (list g$3372$16279)) (g$3372$13220 g$3372$16271)))) '#f)) (g$3372$13224 g$3372$16265)))) '#f)) ((lambda (g$3372$16281) '()) (g$3372$13220 g$3372$16265)))) '#f)) g$3372$16256))) g$3372$16254))) (set! g$3372$13535 (lambda (g$3372$16283) ((lambda (g$3372$16285) ((lambda (g$3372$16287) (if (if g$3372$16287 (begin '#f (apply (lambda (g$3372$16289) '#t) g$3372$16287)) '#f) (apply (lambda (g$3372$16291) (g$3372$13513 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g$3372$16291)) (list '(id e* |...|) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g$3372$16291) '((syntax (e* |...|)))))))))) g$3372$16287) ((lambda (g$3372$16293) ((lambda (g$3372$16295) (if (if g$3372$16295 (begin '#f (apply (lambda (g$3372$16297 g$3372$16298 g$3372$16299 g$3372$16300 g$3372$16301) (if (g$3372$13226 g$3372$16297) (if (g$3372$13226 g$3372$16299) (begin '#f (g$3372$13226 g$3372$16300)) '#f) '#f)) g$3372$16295)) '#f) (apply (lambda (g$3372$16307 g$3372$16308 g$3372$16309 g$3372$16310 g$3372$16311) (g$3372$13513 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g$3372$16308)) (list (list 'set! 'id g$3372$16310) (list 'syntax g$3372$16311)) (list '(id e* |...|) '(identifier? (syntax id)) (list 'syntax (cons g$3372$16308 '(e* |...|))))))))) g$3372$16295) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16293 '())))) ((lambda (g$3372$16317) (if (g$3372$13212 g$3372$16317) (begin '#f ((lambda (g$3372$16319) (if g$3372$16319 (begin '#f ((lambda (g$3372$16321) (if g$3372$16321 (begin '#f (append g$3372$16319 g$3372$16321)) '#f)) ((lambda (g$3372$16323) (if (g$3372$13212 g$3372$16323) (begin '#f ((lambda (g$3372$16325) (if g$3372$16325 (begin '#f ((lambda (g$3372$16327) (if g$3372$16327 (begin '#f (append g$3372$16325 g$3372$16327)) '#f)) ((lambda (g$3372$16329) (if (g$3372$13212 g$3372$16329) (begin '#f ((lambda (g$3372$16331) (if g$3372$16331 (begin '#f ((lambda (g$3372$16333) (if g$3372$16333 (begin '#f (append g$3372$16331 g$3372$16333)) '#f)) ((lambda (g$3372$16335) (if (equal? (g$3372$13246 g$3372$16335) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16329)))) '#f)) ((lambda (g$3372$16337) (if (g$3372$13212 g$3372$16337) (begin '#f ((lambda (g$3372$16339) (if g$3372$16339 (begin '#f ((lambda (g$3372$16341) (if g$3372$16341 (begin '#f (append g$3372$16339 g$3372$16341)) '#f)) ((lambda (g$3372$16343) (if (g$3372$13212 g$3372$16343) (begin '#f ((lambda (g$3372$16345) (if g$3372$16345 (begin '#f ((lambda (g$3372$16347) (if g$3372$16347 (begin '#f (append g$3372$16345 g$3372$16347)) '#f)) ((lambda (g$3372$16349) (if (equal? (g$3372$13246 g$3372$16349) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16343)))) '#f)) ((lambda (g$3372$16351) (list g$3372$16351)) (g$3372$13220 g$3372$16343)))) '#f)) (g$3372$13224 g$3372$16337)))) '#f)) ((lambda (g$3372$16353) (if (g$3372$13212 g$3372$16353) (begin '#f ((lambda (g$3372$16355) (if g$3372$16355 (begin '#f ((lambda (g$3372$16357) (if g$3372$16357 (begin '#f (append g$3372$16355 g$3372$16357)) '#f)) ((lambda (g$3372$16359) (if (g$3372$13212 g$3372$16359) (begin '#f ((lambda (g$3372$16361) (if g$3372$16361 (begin '#f ((lambda (g$3372$16363) (if g$3372$16363 (begin '#f (append g$3372$16361 g$3372$16363)) '#f)) ((lambda (g$3372$16365) (if (g$3372$13212 g$3372$16365) (begin '#f ((lambda (g$3372$16367) (if g$3372$16367 (begin '#f ((lambda (g$3372$16369) (if g$3372$16369 (begin '#f (append g$3372$16367 g$3372$16369)) '#f)) ((lambda (g$3372$16371) (if (equal? (g$3372$13246 g$3372$16371) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16365)))) '#f)) ((lambda (g$3372$16373) (list g$3372$16373)) (g$3372$13220 g$3372$16365)))) '#f)) (g$3372$13224 g$3372$16359)))) '#f)) ((lambda (g$3372$16375) (list g$3372$16375)) (g$3372$13220 g$3372$16359)))) '#f)) (g$3372$13224 g$3372$16353)))) '#f)) ((lambda (g$3372$16377) (if (g$3372$13226 g$3372$16377) (if (g$3372$13234 g$3372$16377 (g$3372$13479 'set!)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$16353)))) '#f)) (g$3372$13220 g$3372$16337)))) '#f)) (g$3372$13220 g$3372$16329)))) '#f)) (g$3372$13224 g$3372$16323)))) '#f)) ((lambda (g$3372$16379) (if (g$3372$13212 g$3372$16379) (begin '#f ((lambda (g$3372$16381) (if g$3372$16381 (begin '#f ((lambda (g$3372$16383) (if g$3372$16383 (begin '#f (append g$3372$16381 g$3372$16383)) '#f)) ((lambda (g$3372$16385) (if (g$3372$13212 g$3372$16385) (begin '#f ((lambda (g$3372$16387) (if g$3372$16387 (begin '#f ((lambda (g$3372$16389) (if g$3372$16389 (begin '#f (append g$3372$16387 g$3372$16389)) '#f)) ((lambda (g$3372$16391) (if (equal? (g$3372$13246 g$3372$16391) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16385)))) '#f)) ((lambda (g$3372$16393) (list g$3372$16393)) (g$3372$13220 g$3372$16385)))) '#f)) (g$3372$13224 g$3372$16379)))) '#f)) ((lambda (g$3372$16395) (list g$3372$16395)) (g$3372$13220 g$3372$16379)))) '#f)) (g$3372$13220 g$3372$16323)))) '#f)) (g$3372$13224 g$3372$16317)))) '#f)) ((lambda (g$3372$16397) '()) (g$3372$13220 g$3372$16317)))) '#f)) g$3372$16293))) g$3372$16285))) ((lambda (g$3372$16399) (if (g$3372$13212 g$3372$16399) (begin '#f ((lambda (g$3372$16401) (if g$3372$16401 (begin '#f ((lambda (g$3372$16403) (if g$3372$16403 (begin '#f (append g$3372$16401 g$3372$16403)) '#f)) ((lambda (g$3372$16405) (if (g$3372$13212 g$3372$16405) (begin '#f ((lambda (g$3372$16407) (if g$3372$16407 (begin '#f ((lambda (g$3372$16409) (if g$3372$16409 (begin '#f (append g$3372$16407 g$3372$16409)) '#f)) ((lambda (g$3372$16411) (if (equal? (g$3372$13246 g$3372$16411) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16405)))) '#f)) ((lambda (g$3372$16413) (list g$3372$16413)) (g$3372$13220 g$3372$16405)))) '#f)) (g$3372$13224 g$3372$16399)))) '#f)) ((lambda (g$3372$16415) '()) (g$3372$13220 g$3372$16399)))) '#f)) g$3372$16285))) g$3372$16283))) (set! g$3372$13537 (lambda (g$3372$16417) ((lambda (g$3372$16419) (begin (set! g$3372$16419 (lambda (g$3372$16421) ((lambda (g$3372$16423) ((lambda (g$3372$16425) (if (if g$3372$16425 (begin '#f (apply (lambda (g$3372$16427 g$3372$16428) '#t) g$3372$16425)) '#f) (apply (lambda (g$3372$16431 g$3372$16432) (list g$3372$16431 g$3372$16432 g$3372$16431)) g$3372$16425) ((lambda (g$3372$16435) ((lambda (g$3372$16437) (if (if g$3372$16437 (begin '#f (apply (lambda (g$3372$16439 g$3372$16440 g$3372$16441) '#t) g$3372$16437)) '#f) (apply (lambda (g$3372$16445 g$3372$16446 g$3372$16447) (list g$3372$16445 g$3372$16446 g$3372$16447)) g$3372$16437) ((lambda (g$3372$16451) ((lambda (g$3372$16453) (if (if g$3372$16453 (begin '#f (apply (lambda () '#t) g$3372$16453)) '#f) (apply (lambda () (error 'expander '"invalid binding" (g$3372$13244 g$3372$16417 '()))) g$3372$16453) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16451 '())))) ((lambda (g$3372$16455) '()) g$3372$16451))) g$3372$16435))) ((lambda (g$3372$16457) (if (g$3372$13212 g$3372$16457) (begin '#f ((lambda (g$3372$16459) (if g$3372$16459 (begin '#f ((lambda (g$3372$16461) (if g$3372$16461 (begin '#f (append g$3372$16459 g$3372$16461)) '#f)) ((lambda (g$3372$16463) (if (g$3372$13212 g$3372$16463) (begin '#f ((lambda (g$3372$16465) (if g$3372$16465 (begin '#f ((lambda (g$3372$16467) (if g$3372$16467 (begin '#f (append g$3372$16465 g$3372$16467)) '#f)) ((lambda (g$3372$16469) (if (g$3372$13212 g$3372$16469) (begin '#f ((lambda (g$3372$16471) (if g$3372$16471 (begin '#f ((lambda (g$3372$16473) (if g$3372$16473 (begin '#f (append g$3372$16471 g$3372$16473)) '#f)) ((lambda (g$3372$16475) (if (equal? (g$3372$13246 g$3372$16475) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16469)))) '#f)) ((lambda (g$3372$16477) (list g$3372$16477)) (g$3372$13220 g$3372$16469)))) '#f)) (g$3372$13224 g$3372$16463)))) '#f)) ((lambda (g$3372$16479) (list g$3372$16479)) (g$3372$13220 g$3372$16463)))) '#f)) (g$3372$13224 g$3372$16457)))) '#f)) ((lambda (g$3372$16481) (list g$3372$16481)) (g$3372$13220 g$3372$16457)))) '#f)) g$3372$16435))) g$3372$16423))) ((lambda (g$3372$16483) (if (g$3372$13212 g$3372$16483) (begin '#f ((lambda (g$3372$16485) (if g$3372$16485 (begin '#f ((lambda (g$3372$16487) (if g$3372$16487 (begin '#f (append g$3372$16485 g$3372$16487)) '#f)) ((lambda (g$3372$16489) (if (g$3372$13212 g$3372$16489) (begin '#f ((lambda (g$3372$16491) (if g$3372$16491 (begin '#f ((lambda (g$3372$16493) (if g$3372$16493 (begin '#f (append g$3372$16491 g$3372$16493)) '#f)) ((lambda (g$3372$16495) (if (equal? (g$3372$13246 g$3372$16495) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16489)))) '#f)) ((lambda (g$3372$16497) (list g$3372$16497)) (g$3372$13220 g$3372$16489)))) '#f)) (g$3372$13224 g$3372$16483)))) '#f)) ((lambda (g$3372$16499) (list g$3372$16499)) (g$3372$13220 g$3372$16483)))) '#f)) g$3372$16423))) g$3372$16421))) ((lambda (g$3372$16501) ((lambda (g$3372$16503) (if (if g$3372$16503 (begin '#f (apply (lambda (g$3372$16505 g$3372$16506 g$3372$16507 g$3372$16508) '#t) g$3372$16503)) '#f) (apply (lambda (g$3372$16513 g$3372$16514 g$3372$16515 g$3372$16516) ((lambda (g$3372$16521) ((lambda (g$3372$16523) (if (if g$3372$16523 (begin '#f (apply (lambda (g$3372$16525 g$3372$16526 g$3372$16527) '#t) g$3372$16523)) '#f) (apply (lambda (g$3372$16531 g$3372$16532 g$3372$16533) (if (g$3372$13236 g$3372$16531) (g$3372$13513 (list 'letrec (list (list 'loop (list 'lambda g$3372$16531 (list 'if g$3372$16514 (cons 'begin (cons '(if #f #f) g$3372$16515)) (cons 'begin (append g$3372$16516 (list (cons 'loop g$3372$16533)))))))) (cons 'loop g$3372$16532))) (error 'expander '"invalid bindings" (g$3372$13244 g$3372$16417 '())))) g$3372$16523) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16521 '())))) ((letrec ((g$3372$16537 (lambda (g$3372$16539) (if (g$3372$13212 g$3372$16539) ((lambda (g$3372$16541) (if g$3372$16541 (begin '#f ((lambda (g$3372$16543) (if g$3372$16543 (begin '#f (map cons g$3372$16541 g$3372$16543)) '#f)) (g$3372$16537 (g$3372$13224 g$3372$16539)))) '#f)) ((lambda (g$3372$16545) (if (g$3372$13212 g$3372$16545) (begin '#f ((lambda (g$3372$16547) (if g$3372$16547 (begin '#f ((lambda (g$3372$16549) (if g$3372$16549 (begin '#f (append g$3372$16547 g$3372$16549)) '#f)) ((lambda (g$3372$16551) (if (g$3372$13212 g$3372$16551) (begin '#f ((lambda (g$3372$16553) (if g$3372$16553 (begin '#f ((lambda (g$3372$16555) (if g$3372$16555 (begin '#f (append g$3372$16553 g$3372$16555)) '#f)) ((lambda (g$3372$16557) (if (g$3372$13212 g$3372$16557) (begin '#f ((lambda (g$3372$16559) (if g$3372$16559 (begin '#f ((lambda (g$3372$16561) (if g$3372$16561 (begin '#f (append g$3372$16559 g$3372$16561)) '#f)) ((lambda (g$3372$16563) (if (equal? (g$3372$13246 g$3372$16563) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16557)))) '#f)) ((lambda (g$3372$16565) (list g$3372$16565)) (g$3372$13220 g$3372$16557)))) '#f)) (g$3372$13224 g$3372$16551)))) '#f)) ((lambda (g$3372$16567) (list g$3372$16567)) (g$3372$13220 g$3372$16551)))) '#f)) (g$3372$13224 g$3372$16545)))) '#f)) ((lambda (g$3372$16569) (list g$3372$16569)) (g$3372$13220 g$3372$16545)))) '#f)) (g$3372$13220 g$3372$16539))) (if (g$3372$13216 g$3372$16539) (list (begin 'x* '()) (begin 'init* '()) (begin 'step* '())) '#f))))) g$3372$16537) g$3372$16521))) (map g$3372$16419 g$3372$16513))) g$3372$16503) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16501 '())))) ((lambda (g$3372$16571) (if (g$3372$13212 g$3372$16571) (begin '#f ((lambda (g$3372$16573) (if g$3372$16573 (begin '#f ((lambda (g$3372$16575) (if g$3372$16575 (begin '#f (append g$3372$16573 g$3372$16575)) '#f)) ((lambda (g$3372$16577) (if (g$3372$13212 g$3372$16577) (begin '#f ((lambda (g$3372$16579) (if g$3372$16579 (begin '#f ((lambda (g$3372$16581) (if g$3372$16581 (begin '#f (append g$3372$16579 g$3372$16581)) '#f)) ((lambda (g$3372$16583) (if (g$3372$13212 g$3372$16583) (begin '#f ((lambda (g$3372$16585) (if g$3372$16585 (begin '#f ((lambda (g$3372$16587) (if g$3372$16587 (begin '#f (append g$3372$16585 g$3372$16587)) '#f)) ((letrec ((g$3372$16589 (lambda (g$3372$16591) (if (g$3372$13212 g$3372$16591) ((lambda (g$3372$16593) (if g$3372$16593 (begin '#f ((lambda (g$3372$16595) (if g$3372$16595 (begin '#f (map cons g$3372$16593 g$3372$16595)) '#f)) (g$3372$16589 (g$3372$13224 g$3372$16591)))) '#f)) ((lambda (g$3372$16597) (list g$3372$16597)) (g$3372$13220 g$3372$16591))) (if (g$3372$13216 g$3372$16591) (list (begin 'command* '())) '#f))))) g$3372$16589) (g$3372$13224 g$3372$16583)))) '#f)) ((lambda (g$3372$16599) (if (g$3372$13212 g$3372$16599) (begin '#f ((lambda (g$3372$16601) (if g$3372$16601 (begin '#f ((lambda (g$3372$16603) (if g$3372$16603 (begin '#f (append g$3372$16601 g$3372$16603)) '#f)) ((letrec ((g$3372$16605 (lambda (g$3372$16607) (if (g$3372$13212 g$3372$16607) ((lambda (g$3372$16609) (if g$3372$16609 (begin '#f ((lambda (g$3372$16611) (if g$3372$16611 (begin '#f (map cons g$3372$16609 g$3372$16611)) '#f)) (g$3372$16605 (g$3372$13224 g$3372$16607)))) '#f)) ((lambda (g$3372$16613) (list g$3372$16613)) (g$3372$13220 g$3372$16607))) (if (g$3372$13216 g$3372$16607) (list (begin 'expr* '())) '#f))))) g$3372$16605) (g$3372$13224 g$3372$16599)))) '#f)) ((lambda (g$3372$16615) (list g$3372$16615)) (g$3372$13220 g$3372$16599)))) '#f)) (g$3372$13220 g$3372$16583)))) '#f)) (g$3372$13224 g$3372$16577)))) '#f)) ((letrec ((g$3372$16617 (lambda (g$3372$16619) (if (g$3372$13212 g$3372$16619) ((lambda (g$3372$16621) (if g$3372$16621 (begin '#f ((lambda (g$3372$16623) (if g$3372$16623 (begin '#f (map cons g$3372$16621 g$3372$16623)) '#f)) (g$3372$16617 (g$3372$13224 g$3372$16619)))) '#f)) ((lambda (g$3372$16625) (list g$3372$16625)) (g$3372$13220 g$3372$16619))) (if (g$3372$13216 g$3372$16619) (list (begin 'binding* '())) '#f))))) g$3372$16617) (g$3372$13220 g$3372$16577)))) '#f)) (g$3372$13224 g$3372$16571)))) '#f)) ((lambda (g$3372$16627) '()) (g$3372$13220 g$3372$16571)))) '#f)) g$3372$16501))) g$3372$16417))) '#f))) (set! g$3372$13539 (lambda (g$3372$16629) ((lambda (g$3372$16631) ((lambda (g$3372$16633) (if (if g$3372$16633 (begin '#f (apply (lambda (g$3372$16635 g$3372$16636 g$3372$16637 g$3372$16638) (for-all g$3372$13226 g$3372$16635)) g$3372$16633)) '#f) (apply (lambda (g$3372$16643 g$3372$16644 g$3372$16645 g$3372$16646) (g$3372$13513 (letrec ((g$3372$16651 (lambda (g$3372$16653) (if (null? g$3372$16653) (cons 'let (cons '() (cons g$3372$16645 g$3372$16646))) (list 'let (list (car g$3372$16653)) (g$3372$16651 (cdr g$3372$16653))))))) (g$3372$16651 (map list g$3372$16643 g$3372$16644))))) g$3372$16633) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16631 '())))) ((lambda (g$3372$16655) (if (g$3372$13212 g$3372$16655) (begin '#f ((lambda (g$3372$16657) (if g$3372$16657 (begin '#f ((lambda (g$3372$16659) (if g$3372$16659 (begin '#f (append g$3372$16657 g$3372$16659)) '#f)) ((lambda (g$3372$16661) (if (g$3372$13212 g$3372$16661) (begin '#f ((lambda (g$3372$16663) (if g$3372$16663 (begin '#f ((lambda (g$3372$16665) (if g$3372$16665 (begin '#f (append g$3372$16663 g$3372$16665)) '#f)) ((lambda (g$3372$16667) (if (g$3372$13212 g$3372$16667) (begin '#f ((lambda (g$3372$16669) (if g$3372$16669 (begin '#f ((lambda (g$3372$16671) (if g$3372$16671 (begin '#f (append g$3372$16669 g$3372$16671)) '#f)) ((letrec ((g$3372$16673 (lambda (g$3372$16675) (if (g$3372$13212 g$3372$16675) ((lambda (g$3372$16677) (if g$3372$16677 (begin '#f ((lambda (g$3372$16679) (if g$3372$16679 (begin '#f (map cons g$3372$16677 g$3372$16679)) '#f)) (g$3372$16673 (g$3372$13224 g$3372$16675)))) '#f)) ((lambda (g$3372$16681) (list g$3372$16681)) (g$3372$13220 g$3372$16675))) (if (g$3372$13216 g$3372$16675) (list (begin 'b* '())) '#f))))) g$3372$16673) (g$3372$13224 g$3372$16667)))) '#f)) ((lambda (g$3372$16683) (list g$3372$16683)) (g$3372$13220 g$3372$16667)))) '#f)) (g$3372$13224 g$3372$16661)))) '#f)) ((letrec ((g$3372$16685 (lambda (g$3372$16687) (if (g$3372$13212 g$3372$16687) ((lambda (g$3372$16689) (if g$3372$16689 (begin '#f ((lambda (g$3372$16691) (if g$3372$16691 (begin '#f (map cons g$3372$16689 g$3372$16691)) '#f)) (g$3372$16685 (g$3372$13224 g$3372$16687)))) '#f)) ((lambda (g$3372$16693) (if (g$3372$13212 g$3372$16693) (begin '#f ((lambda (g$3372$16695) (if g$3372$16695 (begin '#f ((lambda (g$3372$16697) (if g$3372$16697 (begin '#f (append g$3372$16695 g$3372$16697)) '#f)) ((lambda (g$3372$16699) (if (g$3372$13212 g$3372$16699) (begin '#f ((lambda (g$3372$16701) (if g$3372$16701 (begin '#f ((lambda (g$3372$16703) (if g$3372$16703 (begin '#f (append g$3372$16701 g$3372$16703)) '#f)) ((lambda (g$3372$16705) (if (equal? (g$3372$13246 g$3372$16705) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16699)))) '#f)) ((lambda (g$3372$16707) (list g$3372$16707)) (g$3372$13220 g$3372$16699)))) '#f)) (g$3372$13224 g$3372$16693)))) '#f)) ((lambda (g$3372$16709) (list g$3372$16709)) (g$3372$13220 g$3372$16693)))) '#f)) (g$3372$13220 g$3372$16687))) (if (g$3372$13216 g$3372$16687) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$3372$16685) (g$3372$13220 g$3372$16661)))) '#f)) (g$3372$13224 g$3372$16655)))) '#f)) ((lambda (g$3372$16711) '()) (g$3372$13220 g$3372$16655)))) '#f)) g$3372$16631))) g$3372$16629))) (set! g$3372$13541 (lambda (g$3372$16713) ((lambda (g$3372$16715) ((lambda (g$3372$16717) (if (if g$3372$16717 (begin '#f (apply (lambda () '#t) g$3372$16717)) '#f) (apply (lambda () '#f) g$3372$16717) ((lambda (g$3372$16719) ((lambda (g$3372$16721) (if (if g$3372$16721 (begin '#f (apply (lambda (g$3372$16723 g$3372$16724) '#t) g$3372$16721)) '#f) (apply (lambda (g$3372$16727 g$3372$16728) (g$3372$13513 (letrec ((g$3372$16731 (lambda (g$3372$16733 g$3372$16734) (if (null? g$3372$16734) (list 'begin '#f g$3372$16733) (list 'let (list (list 't g$3372$16733)) (list 'if 't 't (g$3372$16731 (car g$3372$16734) (cdr g$3372$16734)))))))) (g$3372$16731 g$3372$16727 g$3372$16728)))) g$3372$16721) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16719 '())))) ((lambda (g$3372$16737) (if (g$3372$13212 g$3372$16737) (begin '#f ((lambda (g$3372$16739) (if g$3372$16739 (begin '#f ((lambda (g$3372$16741) (if g$3372$16741 (begin '#f (append g$3372$16739 g$3372$16741)) '#f)) ((lambda (g$3372$16743) (if (g$3372$13212 g$3372$16743) (begin '#f ((lambda (g$3372$16745) (if g$3372$16745 (begin '#f ((lambda (g$3372$16747) (if g$3372$16747 (begin '#f (append g$3372$16745 g$3372$16747)) '#f)) ((letrec ((g$3372$16749 (lambda (g$3372$16751) (if (g$3372$13212 g$3372$16751) ((lambda (g$3372$16753) (if g$3372$16753 (begin '#f ((lambda (g$3372$16755) (if g$3372$16755 (begin '#f (map cons g$3372$16753 g$3372$16755)) '#f)) (g$3372$16749 (g$3372$13224 g$3372$16751)))) '#f)) ((lambda (g$3372$16757) (list g$3372$16757)) (g$3372$13220 g$3372$16751))) (if (g$3372$13216 g$3372$16751) (list (begin 'e* '())) '#f))))) g$3372$16749) (g$3372$13224 g$3372$16743)))) '#f)) ((lambda (g$3372$16759) (list g$3372$16759)) (g$3372$13220 g$3372$16743)))) '#f)) (g$3372$13224 g$3372$16737)))) '#f)) ((lambda (g$3372$16761) '()) (g$3372$13220 g$3372$16737)))) '#f)) g$3372$16719))) g$3372$16715))) ((lambda (g$3372$16763) (if (g$3372$13212 g$3372$16763) (begin '#f ((lambda (g$3372$16765) (if g$3372$16765 (begin '#f ((lambda (g$3372$16767) (if g$3372$16767 (begin '#f (append g$3372$16765 g$3372$16767)) '#f)) ((lambda (g$3372$16769) (if (equal? (g$3372$13246 g$3372$16769) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16763)))) '#f)) ((lambda (g$3372$16771) '()) (g$3372$13220 g$3372$16763)))) '#f)) g$3372$16715))) g$3372$16713))) (set! g$3372$13543 (lambda (g$3372$16773) ((lambda (g$3372$16775) ((lambda (g$3372$16777) (if (if g$3372$16777 (begin '#f (apply (lambda () '#t) g$3372$16777)) '#f) (apply (lambda () '#t) g$3372$16777) ((lambda (g$3372$16779) ((lambda (g$3372$16781) (if (if g$3372$16781 (begin '#f (apply (lambda (g$3372$16783 g$3372$16784) '#t) g$3372$16781)) '#f) (apply (lambda (g$3372$16787 g$3372$16788) (g$3372$13513 (letrec ((g$3372$16791 (lambda (g$3372$16793 g$3372$16794) (if (null? g$3372$16794) (list 'begin '#f g$3372$16793) (cons 'if (cons g$3372$16793 (cons (g$3372$16791 (car g$3372$16794) (cdr g$3372$16794)) '(#f)))))))) (g$3372$16791 g$3372$16787 g$3372$16788)))) g$3372$16781) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16779 '())))) ((lambda (g$3372$16797) (if (g$3372$13212 g$3372$16797) (begin '#f ((lambda (g$3372$16799) (if g$3372$16799 (begin '#f ((lambda (g$3372$16801) (if g$3372$16801 (begin '#f (append g$3372$16799 g$3372$16801)) '#f)) ((lambda (g$3372$16803) (if (g$3372$13212 g$3372$16803) (begin '#f ((lambda (g$3372$16805) (if g$3372$16805 (begin '#f ((lambda (g$3372$16807) (if g$3372$16807 (begin '#f (append g$3372$16805 g$3372$16807)) '#f)) ((letrec ((g$3372$16809 (lambda (g$3372$16811) (if (g$3372$13212 g$3372$16811) ((lambda (g$3372$16813) (if g$3372$16813 (begin '#f ((lambda (g$3372$16815) (if g$3372$16815 (begin '#f (map cons g$3372$16813 g$3372$16815)) '#f)) (g$3372$16809 (g$3372$13224 g$3372$16811)))) '#f)) ((lambda (g$3372$16817) (list g$3372$16817)) (g$3372$13220 g$3372$16811))) (if (g$3372$13216 g$3372$16811) (list (begin 'e* '())) '#f))))) g$3372$16809) (g$3372$13224 g$3372$16803)))) '#f)) ((lambda (g$3372$16819) (list g$3372$16819)) (g$3372$13220 g$3372$16803)))) '#f)) (g$3372$13224 g$3372$16797)))) '#f)) ((lambda (g$3372$16821) '()) (g$3372$13220 g$3372$16797)))) '#f)) g$3372$16779))) g$3372$16775))) ((lambda (g$3372$16823) (if (g$3372$13212 g$3372$16823) (begin '#f ((lambda (g$3372$16825) (if g$3372$16825 (begin '#f ((lambda (g$3372$16827) (if g$3372$16827 (begin '#f (append g$3372$16825 g$3372$16827)) '#f)) ((lambda (g$3372$16829) (if (equal? (g$3372$13246 g$3372$16829) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16823)))) '#f)) ((lambda (g$3372$16831) '()) (g$3372$13220 g$3372$16823)))) '#f)) g$3372$16775))) g$3372$16773))) (set! g$3372$13545 (lambda (g$3372$16833) ((lambda (g$3372$16835) ((lambda (g$3372$16837) (if (if g$3372$16837 (begin '#f (apply (lambda (g$3372$16839 g$3372$16840) '#t) g$3372$16837)) '#f) (apply (lambda (g$3372$16843 g$3372$16844) (g$3372$13513 (letrec ((g$3372$16847 (lambda (g$3372$16849 g$3372$16850) (if (null? g$3372$16850) ((lambda (g$3372$16853) ((lambda (g$3372$16855) (if (if g$3372$16855 (begin '#f (apply (lambda (g$3372$16857 g$3372$16858) '#t) g$3372$16855)) '#f) (apply (lambda (g$3372$16861 g$3372$16862) (cons 'begin (cons g$3372$16861 g$3372$16862))) g$3372$16855) ((lambda (g$3372$16865) ((lambda (g$3372$16867) (if (if g$3372$16867 (begin '#f (apply (lambda (g$3372$16869 g$3372$16870) '#t) g$3372$16867)) '#f) (apply (lambda (g$3372$16873 g$3372$16874) (list 'let (list (list 't g$3372$16873)) (list 'if 't (cons g$3372$16874 '(t))))) g$3372$16867) ((lambda (g$3372$16877) ((lambda (g$3372$16879) (if (if g$3372$16879 (begin '#f (apply (lambda (g$3372$16881) '#t) g$3372$16879)) '#f) (apply (lambda (g$3372$16883) (cons 'or (cons g$3372$16883 '((if #f #f))))) g$3372$16879) ((lambda (g$3372$16885) ((lambda (g$3372$16887) (if (if g$3372$16887 (begin '#f (apply (lambda (g$3372$16889 g$3372$16890) '#t) g$3372$16887)) '#f) (apply (lambda (g$3372$16893 g$3372$16894) (list 'if g$3372$16893 (cons 'begin g$3372$16894))) g$3372$16887) ((lambda (g$3372$16897) ((lambda (g$3372$16899) (if (if g$3372$16899 (begin '#f (apply (lambda () '#t) g$3372$16899)) '#f) (apply (lambda () (error 'expander '"invalid last clause" (g$3372$13244 g$3372$16833 '()))) g$3372$16899) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16897 '())))) ((lambda (g$3372$16901) '()) g$3372$16897))) g$3372$16885))) ((lambda (g$3372$16903) (if (g$3372$13212 g$3372$16903) (begin '#f ((lambda (g$3372$16905) (if g$3372$16905 (begin '#f ((lambda (g$3372$16907) (if g$3372$16907 (begin '#f (append g$3372$16905 g$3372$16907)) '#f)) ((letrec ((g$3372$16909 (lambda (g$3372$16911) (if (g$3372$13212 g$3372$16911) ((lambda (g$3372$16913) (if g$3372$16913 (begin '#f ((lambda (g$3372$16915) (if g$3372$16915 (begin '#f (map cons g$3372$16913 g$3372$16915)) '#f)) (g$3372$16909 (g$3372$13224 g$3372$16911)))) '#f)) ((lambda (g$3372$16917) (list g$3372$16917)) (g$3372$13220 g$3372$16911))) (if (g$3372$13216 g$3372$16911) (list (begin 'e* '())) '#f))))) g$3372$16909) (g$3372$13224 g$3372$16903)))) '#f)) ((lambda (g$3372$16919) (list g$3372$16919)) (g$3372$13220 g$3372$16903)))) '#f)) g$3372$16885))) g$3372$16877))) ((lambda (g$3372$16921) (if (g$3372$13212 g$3372$16921) (begin '#f ((lambda (g$3372$16923) (if g$3372$16923 (begin '#f ((lambda (g$3372$16925) (if g$3372$16925 (begin '#f (append g$3372$16923 g$3372$16925)) '#f)) ((lambda (g$3372$16927) (if (equal? (g$3372$13246 g$3372$16927) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16921)))) '#f)) ((lambda (g$3372$16929) (list g$3372$16929)) (g$3372$13220 g$3372$16921)))) '#f)) g$3372$16877))) g$3372$16865))) ((lambda (g$3372$16931) (if (g$3372$13212 g$3372$16931) (begin '#f ((lambda (g$3372$16933) (if g$3372$16933 (begin '#f ((lambda (g$3372$16935) (if g$3372$16935 (begin '#f (append g$3372$16933 g$3372$16935)) '#f)) ((lambda (g$3372$16937) (if (g$3372$13212 g$3372$16937) (begin '#f ((lambda (g$3372$16939) (if g$3372$16939 (begin '#f ((lambda (g$3372$16941) (if g$3372$16941 (begin '#f (append g$3372$16939 g$3372$16941)) '#f)) ((lambda (g$3372$16943) (if (g$3372$13212 g$3372$16943) (begin '#f ((lambda (g$3372$16945) (if g$3372$16945 (begin '#f ((lambda (g$3372$16947) (if g$3372$16947 (begin '#f (append g$3372$16945 g$3372$16947)) '#f)) ((lambda (g$3372$16949) (if (equal? (g$3372$13246 g$3372$16949) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$16943)))) '#f)) ((lambda (g$3372$16951) (list g$3372$16951)) (g$3372$13220 g$3372$16943)))) '#f)) (g$3372$13224 g$3372$16937)))) '#f)) ((lambda (g$3372$16953) (if (g$3372$13226 g$3372$16953) (if (g$3372$13234 g$3372$16953 (g$3372$13479 '=>)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$16937)))) '#f)) (g$3372$13224 g$3372$16931)))) '#f)) ((lambda (g$3372$16955) (list g$3372$16955)) (g$3372$13220 g$3372$16931)))) '#f)) g$3372$16865))) g$3372$16853))) ((lambda (g$3372$16957) (if (g$3372$13212 g$3372$16957) (begin '#f ((lambda (g$3372$16959) (if g$3372$16959 (begin '#f ((lambda (g$3372$16961) (if g$3372$16961 (begin '#f (append g$3372$16959 g$3372$16961)) '#f)) ((lambda (g$3372$16963) (if (g$3372$13212 g$3372$16963) (begin '#f ((lambda (g$3372$16965) (if g$3372$16965 (begin '#f ((lambda (g$3372$16967) (if g$3372$16967 (begin '#f (append g$3372$16965 g$3372$16967)) '#f)) ((letrec ((g$3372$16969 (lambda (g$3372$16971) (if (g$3372$13212 g$3372$16971) ((lambda (g$3372$16973) (if g$3372$16973 (begin '#f ((lambda (g$3372$16975) (if g$3372$16975 (begin '#f (map cons g$3372$16973 g$3372$16975)) '#f)) (g$3372$16969 (g$3372$13224 g$3372$16971)))) '#f)) ((lambda (g$3372$16977) (list g$3372$16977)) (g$3372$13220 g$3372$16971))) (if (g$3372$13216 g$3372$16971) (list (begin 'e* '())) '#f))))) g$3372$16969) (g$3372$13224 g$3372$16963)))) '#f)) ((lambda (g$3372$16979) (list g$3372$16979)) (g$3372$13220 g$3372$16963)))) '#f)) (g$3372$13224 g$3372$16957)))) '#f)) ((lambda (g$3372$16981) (if (g$3372$13226 g$3372$16981) (if (g$3372$13234 g$3372$16981 (g$3372$13479 'else)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$16957)))) '#f)) g$3372$16853))) g$3372$16849) ((lambda (g$3372$16983) ((lambda (g$3372$16985) (if (if g$3372$16985 (begin '#f (apply (lambda (g$3372$16987 g$3372$16988) '#t) g$3372$16985)) '#f) (apply (lambda (g$3372$16991 g$3372$16992) (error 'expander '"incorrect position of keyword else" (g$3372$13244 g$3372$16833 '()))) g$3372$16985) ((lambda (g$3372$16995) ((lambda (g$3372$16997) (if (if g$3372$16997 (begin '#f (apply (lambda (g$3372$16999 g$3372$17000) '#t) g$3372$16997)) '#f) (apply (lambda (g$3372$17003 g$3372$17004) (list 'let (list (list 't g$3372$17003)) (list 'if 't (cons g$3372$17004 '(t)) (g$3372$16847 (car g$3372$16850) (cdr g$3372$16850))))) g$3372$16997) ((lambda (g$3372$17007) ((lambda (g$3372$17009) (if (if g$3372$17009 (begin '#f (apply (lambda (g$3372$17011) '#t) g$3372$17009)) '#f) (apply (lambda (g$3372$17013) (list 'or g$3372$17013 (g$3372$16847 (car g$3372$16850) (cdr g$3372$16850)))) g$3372$17009) ((lambda (g$3372$17015) ((lambda (g$3372$17017) (if (if g$3372$17017 (begin '#f (apply (lambda (g$3372$17019 g$3372$17020) '#t) g$3372$17017)) '#f) (apply (lambda (g$3372$17023 g$3372$17024) (list 'if g$3372$17023 (cons 'begin g$3372$17024) (g$3372$16847 (car g$3372$16850) (cdr g$3372$16850)))) g$3372$17017) ((lambda (g$3372$17027) ((lambda (g$3372$17029) (if (if g$3372$17029 (begin '#f (apply (lambda () '#t) g$3372$17029)) '#f) (apply (lambda () (error 'expander '"invalid last clause" (g$3372$13244 g$3372$16833 '()))) g$3372$17029) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17027 '())))) ((lambda (g$3372$17031) '()) g$3372$17027))) g$3372$17015))) ((lambda (g$3372$17033) (if (g$3372$13212 g$3372$17033) (begin '#f ((lambda (g$3372$17035) (if g$3372$17035 (begin '#f ((lambda (g$3372$17037) (if g$3372$17037 (begin '#f (append g$3372$17035 g$3372$17037)) '#f)) ((letrec ((g$3372$17039 (lambda (g$3372$17041) (if (g$3372$13212 g$3372$17041) ((lambda (g$3372$17043) (if g$3372$17043 (begin '#f ((lambda (g$3372$17045) (if g$3372$17045 (begin '#f (map cons g$3372$17043 g$3372$17045)) '#f)) (g$3372$17039 (g$3372$13224 g$3372$17041)))) '#f)) ((lambda (g$3372$17047) (list g$3372$17047)) (g$3372$13220 g$3372$17041))) (if (g$3372$13216 g$3372$17041) (list (begin 'e* '())) '#f))))) g$3372$17039) (g$3372$13224 g$3372$17033)))) '#f)) ((lambda (g$3372$17049) (list g$3372$17049)) (g$3372$13220 g$3372$17033)))) '#f)) g$3372$17015))) g$3372$17007))) ((lambda (g$3372$17051) (if (g$3372$13212 g$3372$17051) (begin '#f ((lambda (g$3372$17053) (if g$3372$17053 (begin '#f ((lambda (g$3372$17055) (if g$3372$17055 (begin '#f (append g$3372$17053 g$3372$17055)) '#f)) ((lambda (g$3372$17057) (if (equal? (g$3372$13246 g$3372$17057) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17051)))) '#f)) ((lambda (g$3372$17059) (list g$3372$17059)) (g$3372$13220 g$3372$17051)))) '#f)) g$3372$17007))) g$3372$16995))) ((lambda (g$3372$17061) (if (g$3372$13212 g$3372$17061) (begin '#f ((lambda (g$3372$17063) (if g$3372$17063 (begin '#f ((lambda (g$3372$17065) (if g$3372$17065 (begin '#f (append g$3372$17063 g$3372$17065)) '#f)) ((lambda (g$3372$17067) (if (g$3372$13212 g$3372$17067) (begin '#f ((lambda (g$3372$17069) (if g$3372$17069 (begin '#f ((lambda (g$3372$17071) (if g$3372$17071 (begin '#f (append g$3372$17069 g$3372$17071)) '#f)) ((lambda (g$3372$17073) (if (g$3372$13212 g$3372$17073) (begin '#f ((lambda (g$3372$17075) (if g$3372$17075 (begin '#f ((lambda (g$3372$17077) (if g$3372$17077 (begin '#f (append g$3372$17075 g$3372$17077)) '#f)) ((lambda (g$3372$17079) (if (equal? (g$3372$13246 g$3372$17079) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17073)))) '#f)) ((lambda (g$3372$17081) (list g$3372$17081)) (g$3372$13220 g$3372$17073)))) '#f)) (g$3372$13224 g$3372$17067)))) '#f)) ((lambda (g$3372$17083) (if (g$3372$13226 g$3372$17083) (if (g$3372$13234 g$3372$17083 (g$3372$13479 '=>)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17067)))) '#f)) (g$3372$13224 g$3372$17061)))) '#f)) ((lambda (g$3372$17085) (list g$3372$17085)) (g$3372$13220 g$3372$17061)))) '#f)) g$3372$16995))) g$3372$16983))) ((lambda (g$3372$17087) (if (g$3372$13212 g$3372$17087) (begin '#f ((lambda (g$3372$17089) (if g$3372$17089 (begin '#f ((lambda (g$3372$17091) (if g$3372$17091 (begin '#f (append g$3372$17089 g$3372$17091)) '#f)) ((lambda (g$3372$17093) (if (g$3372$13212 g$3372$17093) (begin '#f ((lambda (g$3372$17095) (if g$3372$17095 (begin '#f ((lambda (g$3372$17097) (if g$3372$17097 (begin '#f (append g$3372$17095 g$3372$17097)) '#f)) ((letrec ((g$3372$17099 (lambda (g$3372$17101) (if (g$3372$13212 g$3372$17101) ((lambda (g$3372$17103) (if g$3372$17103 (begin '#f ((lambda (g$3372$17105) (if g$3372$17105 (begin '#f (map cons g$3372$17103 g$3372$17105)) '#f)) (g$3372$17099 (g$3372$13224 g$3372$17101)))) '#f)) ((lambda (g$3372$17107) (list g$3372$17107)) (g$3372$13220 g$3372$17101))) (if (g$3372$13216 g$3372$17101) (list (begin 'e* '())) '#f))))) g$3372$17099) (g$3372$13224 g$3372$17093)))) '#f)) ((lambda (g$3372$17109) (list g$3372$17109)) (g$3372$13220 g$3372$17093)))) '#f)) (g$3372$13224 g$3372$17087)))) '#f)) ((lambda (g$3372$17111) (if (g$3372$13226 g$3372$17111) (if (g$3372$13234 g$3372$17111 (g$3372$13479 'else)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17087)))) '#f)) g$3372$16983))) g$3372$16849))))) (g$3372$16847 g$3372$16843 g$3372$16844)))) g$3372$16837) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$16835 '())))) ((lambda (g$3372$17113) (if (g$3372$13212 g$3372$17113) (begin '#f ((lambda (g$3372$17115) (if g$3372$17115 (begin '#f ((lambda (g$3372$17117) (if g$3372$17117 (begin '#f (append g$3372$17115 g$3372$17117)) '#f)) ((lambda (g$3372$17119) (if (g$3372$13212 g$3372$17119) (begin '#f ((lambda (g$3372$17121) (if g$3372$17121 (begin '#f ((lambda (g$3372$17123) (if g$3372$17123 (begin '#f (append g$3372$17121 g$3372$17123)) '#f)) ((letrec ((g$3372$17125 (lambda (g$3372$17127) (if (g$3372$13212 g$3372$17127) ((lambda (g$3372$17129) (if g$3372$17129 (begin '#f ((lambda (g$3372$17131) (if g$3372$17131 (begin '#f (map cons g$3372$17129 g$3372$17131)) '#f)) (g$3372$17125 (g$3372$13224 g$3372$17127)))) '#f)) ((lambda (g$3372$17133) (list g$3372$17133)) (g$3372$13220 g$3372$17127))) (if (g$3372$13216 g$3372$17127) (list (begin 'cls* '())) '#f))))) g$3372$17125) (g$3372$13224 g$3372$17119)))) '#f)) ((lambda (g$3372$17135) (list g$3372$17135)) (g$3372$13220 g$3372$17119)))) '#f)) (g$3372$13224 g$3372$17113)))) '#f)) ((lambda (g$3372$17137) '()) (g$3372$13220 g$3372$17113)))) '#f)) g$3372$16835))) g$3372$16833))) (set! g$3372$13547 (lambda (g$3372$17139) ((lambda (g$3372$17141) ((lambda (g$3372$17143) (if (if g$3372$17143 (begin '#f (apply (lambda (g$3372$17145 g$3372$17146) '#t) g$3372$17143)) '#f) (apply (lambda (g$3372$17149 g$3372$17150) ((lambda (g$3372$17153) (begin (if (string? g$3372$17153) (void) (error 'expander '"invalid syntax" (g$3372$13246 g$3372$17139))) (with-input-from-file g$3372$17153 (lambda () (letrec ((g$3372$17155 (lambda (g$3372$17157) ((lambda (g$3372$17159) (if (eof-object? g$3372$17159) (cons (g$3372$13513 'begin) (g$3372$13192 g$3372$17149 (reverse g$3372$17157))) (g$3372$17155 (cons g$3372$17159 g$3372$17157)))) (read))))) (g$3372$17155 '())))))) (g$3372$13246 g$3372$17150))) g$3372$17143) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17141 '())))) ((lambda (g$3372$17161) (if (g$3372$13212 g$3372$17161) (begin '#f ((lambda (g$3372$17163) (if g$3372$17163 (begin '#f ((lambda (g$3372$17165) (if g$3372$17165 (begin '#f (append g$3372$17163 g$3372$17165)) '#f)) ((lambda (g$3372$17167) (if (g$3372$13212 g$3372$17167) (begin '#f ((lambda (g$3372$17169) (if g$3372$17169 (begin '#f ((lambda (g$3372$17171) (if g$3372$17171 (begin '#f (append g$3372$17169 g$3372$17171)) '#f)) ((lambda (g$3372$17173) (if (equal? (g$3372$13246 g$3372$17173) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17167)))) '#f)) ((lambda (g$3372$17175) (list g$3372$17175)) (g$3372$13220 g$3372$17167)))) '#f)) (g$3372$13224 g$3372$17161)))) '#f)) ((lambda (g$3372$17177) (list g$3372$17177)) (g$3372$13220 g$3372$17161)))) '#f)) g$3372$17141))) g$3372$17139))) (set! g$3372$13549 (lambda (g$3372$17179) ((lambda (g$3372$17181) ((lambda (g$3372$17183) (if (if g$3372$17183 (begin '#f (apply (lambda (g$3372$17185 g$3372$17186 g$3372$17187) '#t) g$3372$17183)) '#f) (apply (lambda (g$3372$17191 g$3372$17192 g$3372$17193) (begin (if (for-all (lambda (g$3372$17197) (if (g$3372$13226 g$3372$17197) (if (not (g$3372$13234 g$3372$17197 (g$3372$13479 '|...|))) (begin '#f (not (g$3372$13234 g$3372$17197 (g$3372$13479 '_)))) '#f) '#f)) g$3372$17191) (void) (error 'expander '"invalid literals" (g$3372$13244 g$3372$17179 '()))) (g$3372$13513 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g$3372$17191 (map (lambda (g$3372$17199 g$3372$17200) (list g$3372$17199 (list 'syntax g$3372$17200))) g$3372$17192 g$3372$17193)))))))) g$3372$17183) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17181 '())))) ((lambda (g$3372$17203) (if (g$3372$13212 g$3372$17203) (begin '#f ((lambda (g$3372$17205) (if g$3372$17205 (begin '#f ((lambda (g$3372$17207) (if g$3372$17207 (begin '#f (append g$3372$17205 g$3372$17207)) '#f)) ((lambda (g$3372$17209) (if (g$3372$13212 g$3372$17209) (begin '#f ((lambda (g$3372$17211) (if g$3372$17211 (begin '#f ((lambda (g$3372$17213) (if g$3372$17213 (begin '#f (append g$3372$17211 g$3372$17213)) '#f)) ((letrec ((g$3372$17215 (lambda (g$3372$17217) (if (g$3372$13212 g$3372$17217) ((lambda (g$3372$17219) (if g$3372$17219 (begin '#f ((lambda (g$3372$17221) (if g$3372$17221 (begin '#f (map cons g$3372$17219 g$3372$17221)) '#f)) (g$3372$17215 (g$3372$13224 g$3372$17217)))) '#f)) ((lambda (g$3372$17223) (if (g$3372$13212 g$3372$17223) (begin '#f ((lambda (g$3372$17225) (if g$3372$17225 (begin '#f ((lambda (g$3372$17227) (if g$3372$17227 (begin '#f (append g$3372$17225 g$3372$17227)) '#f)) ((lambda (g$3372$17229) (if (g$3372$13212 g$3372$17229) (begin '#f ((lambda (g$3372$17231) (if g$3372$17231 (begin '#f ((lambda (g$3372$17233) (if g$3372$17233 (begin '#f (append g$3372$17231 g$3372$17233)) '#f)) ((lambda (g$3372$17235) (if (equal? (g$3372$13246 g$3372$17235) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17229)))) '#f)) ((lambda (g$3372$17237) (list g$3372$17237)) (g$3372$13220 g$3372$17229)))) '#f)) (g$3372$13224 g$3372$17223)))) '#f)) ((lambda (g$3372$17239) (list g$3372$17239)) (g$3372$13220 g$3372$17223)))) '#f)) (g$3372$13220 g$3372$17217))) (if (g$3372$13216 g$3372$17217) (list (begin 'pat* '()) (begin 'tmp* '())) '#f))))) g$3372$17215) (g$3372$13224 g$3372$17209)))) '#f)) ((letrec ((g$3372$17241 (lambda (g$3372$17243) (if (g$3372$13212 g$3372$17243) ((lambda (g$3372$17245) (if g$3372$17245 (begin '#f ((lambda (g$3372$17247) (if g$3372$17247 (begin '#f (map cons g$3372$17245 g$3372$17247)) '#f)) (g$3372$17241 (g$3372$13224 g$3372$17243)))) '#f)) ((lambda (g$3372$17249) (list g$3372$17249)) (g$3372$13220 g$3372$17243))) (if (g$3372$13216 g$3372$17243) (list (begin 'lits '())) '#f))))) g$3372$17241) (g$3372$13220 g$3372$17209)))) '#f)) (g$3372$13224 g$3372$17203)))) '#f)) ((lambda (g$3372$17251) '()) (g$3372$13220 g$3372$17203)))) '#f)) g$3372$17181))) g$3372$17179))) (set! g$3372$13551 ((lambda () ((lambda (g$3372$17275 g$3372$17277 g$3372$17279 g$3372$17281 g$3372$17283 g$3372$17285) (begin (set! g$3372$17275 (lambda (g$3372$17897 g$3372$17898) (letrec ((g$3372$17901 (lambda (g$3372$17903) (if (null? g$3372$17903) g$3372$17898 (g$3372$17277 (car g$3372$17903) (g$3372$17901 (cdr g$3372$17903))))))) (g$3372$17901 g$3372$17897)))) (set! g$3372$17277 (lambda (g$3372$17791 g$3372$17792) ((lambda (g$3372$17795) ((lambda (g$3372$17797) (if (if g$3372$17797 (begin '#f (apply (lambda (g$3372$17799) '#t) g$3372$17797)) '#f) (apply (lambda (g$3372$17801) ((lambda (g$3372$17803) ((lambda (g$3372$17805) (if (if g$3372$17805 (begin '#f (apply (lambda (g$3372$17807) '#t) g$3372$17805)) '#f) (apply (lambda (g$3372$17809) (list (g$3372$13479 'quote) (cons g$3372$17809 g$3372$17801))) g$3372$17805) ((lambda (g$3372$17811) ((lambda (g$3372$17813) (if (if g$3372$17813 (begin '#f (apply (lambda () '#t) g$3372$17813)) '#f) (apply (lambda () ((lambda (g$3372$17815) ((lambda (g$3372$17817) (if (if g$3372$17817 (begin '#f (apply (lambda () '#t) g$3372$17817)) '#f) (apply (lambda () (list (g$3372$13479 'list) g$3372$17791)) g$3372$17817) ((lambda (g$3372$17819) ((lambda (g$3372$17821) (if (if g$3372$17821 (begin '#f (apply (lambda () '#t) g$3372$17821)) '#f) (apply (lambda () (list (g$3372$13479 'cons) g$3372$17791 g$3372$17792)) g$3372$17821) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17819 '())))) ((lambda (g$3372$17823) '()) g$3372$17819))) g$3372$17815))) ((lambda (g$3372$17825) (if (equal? (g$3372$13246 g$3372$17825) '()) (begin '#f '()) '#f)) g$3372$17815))) g$3372$17801)) g$3372$17813) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17811 '())))) ((lambda (g$3372$17827) '()) g$3372$17811))) g$3372$17803))) ((lambda (g$3372$17829) (if (g$3372$13212 g$3372$17829) (begin '#f ((lambda (g$3372$17831) (if g$3372$17831 (begin '#f ((lambda (g$3372$17833) (if g$3372$17833 (begin '#f (append g$3372$17831 g$3372$17833)) '#f)) ((lambda (g$3372$17835) (if (g$3372$13212 g$3372$17835) (begin '#f ((lambda (g$3372$17837) (if g$3372$17837 (begin '#f ((lambda (g$3372$17839) (if g$3372$17839 (begin '#f (append g$3372$17837 g$3372$17839)) '#f)) ((lambda (g$3372$17841) (if (equal? (g$3372$13246 g$3372$17841) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17835)))) '#f)) ((lambda (g$3372$17843) (list g$3372$17843)) (g$3372$13220 g$3372$17835)))) '#f)) (g$3372$13224 g$3372$17829)))) '#f)) ((lambda (g$3372$17845) (if (g$3372$13226 g$3372$17845) (if (g$3372$13234 g$3372$17845 (g$3372$13479 'quote)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17829)))) '#f)) g$3372$17803))) g$3372$17791)) g$3372$17797) ((lambda (g$3372$17847) ((lambda (g$3372$17849) (if (if g$3372$17849 (begin '#f (apply (lambda (g$3372$17851) '#t) g$3372$17849)) '#f) (apply (lambda (g$3372$17853) (cons* (g$3372$13479 'list) g$3372$17791 g$3372$17853)) g$3372$17849) ((lambda (g$3372$17855) ((lambda (g$3372$17857) (if (if g$3372$17857 (begin '#f (apply (lambda () '#t) g$3372$17857)) '#f) (apply (lambda () (list (g$3372$13479 'cons) g$3372$17791 g$3372$17792)) g$3372$17857) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17855 '())))) ((lambda (g$3372$17859) '()) g$3372$17855))) g$3372$17847))) ((lambda (g$3372$17861) (if (g$3372$13212 g$3372$17861) (begin '#f ((lambda (g$3372$17863) (if g$3372$17863 (begin '#f ((lambda (g$3372$17865) (if g$3372$17865 (begin '#f (append g$3372$17863 g$3372$17865)) '#f)) ((letrec ((g$3372$17867 (lambda (g$3372$17869) (if (g$3372$13212 g$3372$17869) ((lambda (g$3372$17871) (if g$3372$17871 (begin '#f ((lambda (g$3372$17873) (if g$3372$17873 (begin '#f (map cons g$3372$17871 g$3372$17873)) '#f)) (g$3372$17867 (g$3372$13224 g$3372$17869)))) '#f)) ((lambda (g$3372$17875) (list g$3372$17875)) (g$3372$13220 g$3372$17869))) (if (g$3372$13216 g$3372$17869) (list (begin 'stuff '())) '#f))))) g$3372$17867) (g$3372$13224 g$3372$17861)))) '#f)) ((lambda (g$3372$17877) (if (g$3372$13226 g$3372$17877) (if (g$3372$13234 g$3372$17877 (g$3372$13479 'list)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17861)))) '#f)) g$3372$17847))) g$3372$17795))) ((lambda (g$3372$17879) (if (g$3372$13212 g$3372$17879) (begin '#f ((lambda (g$3372$17881) (if g$3372$17881 (begin '#f ((lambda (g$3372$17883) (if g$3372$17883 (begin '#f (append g$3372$17881 g$3372$17883)) '#f)) ((lambda (g$3372$17885) (if (g$3372$13212 g$3372$17885) (begin '#f ((lambda (g$3372$17887) (if g$3372$17887 (begin '#f ((lambda (g$3372$17889) (if g$3372$17889 (begin '#f (append g$3372$17887 g$3372$17889)) '#f)) ((lambda (g$3372$17891) (if (equal? (g$3372$13246 g$3372$17891) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17885)))) '#f)) ((lambda (g$3372$17893) (list g$3372$17893)) (g$3372$13220 g$3372$17885)))) '#f)) (g$3372$13224 g$3372$17879)))) '#f)) ((lambda (g$3372$17895) (if (g$3372$13226 g$3372$17895) (if (g$3372$13234 g$3372$17895 (g$3372$13479 'quote)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17879)))) '#f)) g$3372$17795))) g$3372$17792))) (set! g$3372$17279 (lambda (g$3372$17725 g$3372$17726) ((lambda (g$3372$17729) (if (null? g$3372$17729) (list (g$3372$13479 'quote) '()) (if (null? (cdr g$3372$17729)) (car g$3372$17729) (cons* (g$3372$13479 'append) g$3372$17729)))) (letrec ((g$3372$17731 (lambda (g$3372$17733) (if (null? g$3372$17733) ((lambda (g$3372$17735) ((lambda (g$3372$17737) (if (if g$3372$17737 (begin '#f (apply (lambda () '#t) g$3372$17737)) '#f) (apply (lambda () '()) g$3372$17737) ((lambda (g$3372$17739) ((lambda (g$3372$17741) (if (if g$3372$17741 (begin '#f (apply (lambda () '#t) g$3372$17741)) '#f) (apply (lambda () (list g$3372$17726)) g$3372$17741) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17739 '())))) ((lambda (g$3372$17743) '()) g$3372$17739))) g$3372$17735))) ((lambda (g$3372$17745) (if (g$3372$13212 g$3372$17745) (begin '#f ((lambda (g$3372$17747) (if g$3372$17747 (begin '#f ((lambda (g$3372$17749) (if g$3372$17749 (begin '#f (append g$3372$17747 g$3372$17749)) '#f)) ((lambda (g$3372$17751) (if (g$3372$13212 g$3372$17751) (begin '#f ((lambda (g$3372$17753) (if g$3372$17753 (begin '#f ((lambda (g$3372$17755) (if g$3372$17755 (begin '#f (append g$3372$17753 g$3372$17755)) '#f)) ((lambda (g$3372$17757) (if (equal? (g$3372$13246 g$3372$17757) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17751)))) '#f)) ((lambda (g$3372$17759) (if (equal? (g$3372$13246 g$3372$17759) '()) (begin '#f '()) '#f)) (g$3372$13220 g$3372$17751)))) '#f)) (g$3372$13224 g$3372$17745)))) '#f)) ((lambda (g$3372$17761) (if (g$3372$13226 g$3372$17761) (if (g$3372$13234 g$3372$17761 (g$3372$13479 'quote)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17745)))) '#f)) g$3372$17735))) g$3372$17726) ((lambda (g$3372$17763) ((lambda (g$3372$17765) (if (if g$3372$17765 (begin '#f (apply (lambda () '#t) g$3372$17765)) '#f) (apply (lambda () (g$3372$17731 (cdr g$3372$17733))) g$3372$17765) ((lambda (g$3372$17767) ((lambda (g$3372$17769) (if (if g$3372$17769 (begin '#f (apply (lambda () '#t) g$3372$17769)) '#f) (apply (lambda () (cons (car g$3372$17733) (g$3372$17731 (cdr g$3372$17733)))) g$3372$17769) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17767 '())))) ((lambda (g$3372$17771) '()) g$3372$17767))) g$3372$17763))) ((lambda (g$3372$17773) (if (g$3372$13212 g$3372$17773) (begin '#f ((lambda (g$3372$17775) (if g$3372$17775 (begin '#f ((lambda (g$3372$17777) (if g$3372$17777 (begin '#f (append g$3372$17775 g$3372$17777)) '#f)) ((lambda (g$3372$17779) (if (g$3372$13212 g$3372$17779) (begin '#f ((lambda (g$3372$17781) (if g$3372$17781 (begin '#f ((lambda (g$3372$17783) (if g$3372$17783 (begin '#f (append g$3372$17781 g$3372$17783)) '#f)) ((lambda (g$3372$17785) (if (equal? (g$3372$13246 g$3372$17785) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17779)))) '#f)) ((lambda (g$3372$17787) (if (equal? (g$3372$13246 g$3372$17787) '()) (begin '#f '()) '#f)) (g$3372$13220 g$3372$17779)))) '#f)) (g$3372$13224 g$3372$17773)))) '#f)) ((lambda (g$3372$17789) (if (g$3372$13226 g$3372$17789) (if (g$3372$13234 g$3372$17789 (g$3372$13479 'quote)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17773)))) '#f)) g$3372$17763))) (car g$3372$17733)))))) (g$3372$17731 g$3372$17725))))) (set! g$3372$17281 (lambda (g$3372$17565) ((lambda (g$3372$17567) ((lambda (g$3372$17569) ((lambda (g$3372$17571) (if (if g$3372$17571 (begin '#f (apply (lambda (g$3372$17573) '#t) g$3372$17571)) '#f) (apply (lambda (g$3372$17575) (list (g$3372$13479 'quote) (list->vector g$3372$17575))) g$3372$17571) ((lambda (g$3372$17577) ((lambda (g$3372$17579) (if (if g$3372$17579 (begin '#f (apply (lambda () '#t) g$3372$17579)) '#f) (apply (lambda () (letrec ((g$3372$17581 (lambda (g$3372$17585 g$3372$17586) ((lambda (g$3372$17589) ((lambda (g$3372$17591) (if (if g$3372$17591 (begin '#f (apply (lambda (g$3372$17593) '#t) g$3372$17591)) '#f) (apply (lambda (g$3372$17595) (g$3372$17586 (map (lambda (g$3372$17597) (list (g$3372$13479 'quote) g$3372$17597)) g$3372$17595))) g$3372$17591) ((lambda (g$3372$17599) ((lambda (g$3372$17601) (if (if g$3372$17601 (begin '#f (apply (lambda (g$3372$17603) '#t) g$3372$17601)) '#f) (apply (lambda (g$3372$17605) (g$3372$17586 g$3372$17605)) g$3372$17601) ((lambda (g$3372$17607) ((lambda (g$3372$17609) (if (if g$3372$17609 (begin '#f (apply (lambda (g$3372$17611 g$3372$17612) '#t) g$3372$17609)) '#f) (apply (lambda (g$3372$17615 g$3372$17616) (g$3372$17581 g$3372$17616 (lambda (g$3372$17619) (g$3372$17586 (cons g$3372$17615 g$3372$17619))))) g$3372$17609) ((lambda (g$3372$17621) ((lambda (g$3372$17623) (if (if g$3372$17623 (begin '#f (apply (lambda () '#t) g$3372$17623)) '#f) (apply (lambda () (list (g$3372$13479 'list->vector) g$3372$17567)) g$3372$17623) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17621 '())))) ((lambda (g$3372$17625) '()) g$3372$17621))) g$3372$17607))) ((lambda (g$3372$17627) (if (g$3372$13212 g$3372$17627) (begin '#f ((lambda (g$3372$17629) (if g$3372$17629 (begin '#f ((lambda (g$3372$17631) (if g$3372$17631 (begin '#f (append g$3372$17629 g$3372$17631)) '#f)) ((lambda (g$3372$17633) (if (g$3372$13212 g$3372$17633) (begin '#f ((lambda (g$3372$17635) (if g$3372$17635 (begin '#f ((lambda (g$3372$17637) (if g$3372$17637 (begin '#f (append g$3372$17635 g$3372$17637)) '#f)) ((lambda (g$3372$17639) (if (g$3372$13212 g$3372$17639) (begin '#f ((lambda (g$3372$17641) (if g$3372$17641 (begin '#f ((lambda (g$3372$17643) (if g$3372$17643 (begin '#f (append g$3372$17641 g$3372$17643)) '#f)) ((lambda (g$3372$17645) (if (equal? (g$3372$13246 g$3372$17645) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17639)))) '#f)) ((lambda (g$3372$17647) (list g$3372$17647)) (g$3372$13220 g$3372$17639)))) '#f)) (g$3372$13224 g$3372$17633)))) '#f)) ((lambda (g$3372$17649) (list g$3372$17649)) (g$3372$13220 g$3372$17633)))) '#f)) (g$3372$13224 g$3372$17627)))) '#f)) ((lambda (g$3372$17651) (if (g$3372$13226 g$3372$17651) (if (g$3372$13234 g$3372$17651 (g$3372$13479 'cons)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17627)))) '#f)) g$3372$17607))) g$3372$17599))) ((lambda (g$3372$17653) (if (g$3372$13212 g$3372$17653) (begin '#f ((lambda (g$3372$17655) (if g$3372$17655 (begin '#f ((lambda (g$3372$17657) (if g$3372$17657 (begin '#f (append g$3372$17655 g$3372$17657)) '#f)) ((letrec ((g$3372$17659 (lambda (g$3372$17661) (if (g$3372$13212 g$3372$17661) ((lambda (g$3372$17663) (if g$3372$17663 (begin '#f ((lambda (g$3372$17665) (if g$3372$17665 (begin '#f (map cons g$3372$17663 g$3372$17665)) '#f)) (g$3372$17659 (g$3372$13224 g$3372$17661)))) '#f)) ((lambda (g$3372$17667) (list g$3372$17667)) (g$3372$13220 g$3372$17661))) (if (g$3372$13216 g$3372$17661) (list (begin 'x* '())) '#f))))) g$3372$17659) (g$3372$13224 g$3372$17653)))) '#f)) ((lambda (g$3372$17669) (if (g$3372$13226 g$3372$17669) (if (g$3372$13234 g$3372$17669 (g$3372$13479 'list)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17653)))) '#f)) g$3372$17599))) g$3372$17589))) ((lambda (g$3372$17671) (if (g$3372$13212 g$3372$17671) (begin '#f ((lambda (g$3372$17673) (if g$3372$17673 (begin '#f ((lambda (g$3372$17675) (if g$3372$17675 (begin '#f (append g$3372$17673 g$3372$17675)) '#f)) ((lambda (g$3372$17677) (if (g$3372$13212 g$3372$17677) (begin '#f ((lambda (g$3372$17679) (if g$3372$17679 (begin '#f ((lambda (g$3372$17681) (if g$3372$17681 (begin '#f (append g$3372$17679 g$3372$17681)) '#f)) ((lambda (g$3372$17683) (if (equal? (g$3372$13246 g$3372$17683) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17677)))) '#f)) ((letrec ((g$3372$17685 (lambda (g$3372$17687) (if (g$3372$13212 g$3372$17687) ((lambda (g$3372$17689) (if g$3372$17689 (begin '#f ((lambda (g$3372$17691) (if g$3372$17691 (begin '#f (map cons g$3372$17689 g$3372$17691)) '#f)) (g$3372$17685 (g$3372$13224 g$3372$17687)))) '#f)) ((lambda (g$3372$17693) (list g$3372$17693)) (g$3372$13220 g$3372$17687))) (if (g$3372$13216 g$3372$17687) (list (begin 'x* '())) '#f))))) g$3372$17685) (g$3372$13220 g$3372$17677)))) '#f)) (g$3372$13224 g$3372$17671)))) '#f)) ((lambda (g$3372$17695) (if (g$3372$13226 g$3372$17695) (if (g$3372$13234 g$3372$17695 (g$3372$13479 'quote)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17671)))) '#f)) g$3372$17589))) g$3372$17585)))) (g$3372$17581 g$3372$17565 (lambda (g$3372$17583) (cons* (g$3372$13479 'vector) g$3372$17583))))) g$3372$17579) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17577 '())))) ((lambda (g$3372$17697) '()) g$3372$17577))) g$3372$17569))) ((lambda (g$3372$17699) (if (g$3372$13212 g$3372$17699) (begin '#f ((lambda (g$3372$17701) (if g$3372$17701 (begin '#f ((lambda (g$3372$17703) (if g$3372$17703 (begin '#f (append g$3372$17701 g$3372$17703)) '#f)) ((lambda (g$3372$17705) (if (g$3372$13212 g$3372$17705) (begin '#f ((lambda (g$3372$17707) (if g$3372$17707 (begin '#f ((lambda (g$3372$17709) (if g$3372$17709 (begin '#f (append g$3372$17707 g$3372$17709)) '#f)) ((lambda (g$3372$17711) (if (equal? (g$3372$13246 g$3372$17711) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17705)))) '#f)) ((letrec ((g$3372$17713 (lambda (g$3372$17715) (if (g$3372$13212 g$3372$17715) ((lambda (g$3372$17717) (if g$3372$17717 (begin '#f ((lambda (g$3372$17719) (if g$3372$17719 (begin '#f (map cons g$3372$17717 g$3372$17719)) '#f)) (g$3372$17713 (g$3372$13224 g$3372$17715)))) '#f)) ((lambda (g$3372$17721) (list g$3372$17721)) (g$3372$13220 g$3372$17715))) (if (g$3372$13216 g$3372$17715) (list (begin 'x* '())) '#f))))) g$3372$17713) (g$3372$13220 g$3372$17705)))) '#f)) (g$3372$13224 g$3372$17699)))) '#f)) ((lambda (g$3372$17723) (if (g$3372$13226 g$3372$17723) (if (g$3372$13234 g$3372$17723 (g$3372$13479 'quote)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17699)))) '#f)) g$3372$17569))) g$3372$17567)) g$3372$17565))) (set! g$3372$17283 (lambda (g$3372$17471 g$3372$17472) ((lambda (g$3372$17475) ((lambda (g$3372$17477) (if (if g$3372$17477 (begin '#f (apply (lambda (g$3372$17479 g$3372$17480) '#t) g$3372$17477)) '#f) (apply (lambda (g$3372$17483 g$3372$17484) ((lambda (g$3372$17487) ((lambda (g$3372$17489) (if (if g$3372$17489 (begin '#f (apply (lambda (g$3372$17491) '#t) g$3372$17489)) '#f) (apply (lambda (g$3372$17493) (if (= g$3372$17472 '0) (g$3372$17275 g$3372$17493 (g$3372$17283 g$3372$17484 g$3372$17472)) (g$3372$17277 (g$3372$17277 (list (g$3372$13479 'quote) 'unquote) (g$3372$17285 g$3372$17493 (- g$3372$17472 '1))) (g$3372$17283 g$3372$17484 g$3372$17472)))) g$3372$17489) ((lambda (g$3372$17495) ((lambda (g$3372$17497) (if (if g$3372$17497 (begin '#f (apply (lambda (g$3372$17499) '#t) g$3372$17497)) '#f) (apply (lambda (g$3372$17501) (if (= g$3372$17472 '0) (g$3372$17279 g$3372$17501 (g$3372$17283 g$3372$17484 g$3372$17472)) (g$3372$17277 (g$3372$17277 (list (g$3372$13479 'quote) 'unquote-splicing) (g$3372$17285 g$3372$17501 (- g$3372$17472 '1))) (g$3372$17283 g$3372$17484 g$3372$17472)))) g$3372$17497) ((lambda (g$3372$17503) ((lambda (g$3372$17505) (if (if g$3372$17505 (begin '#f (apply (lambda (g$3372$17507) '#t) g$3372$17505)) '#f) (apply (lambda (g$3372$17509) (g$3372$17277 (g$3372$17285 g$3372$17509 g$3372$17472) (g$3372$17283 g$3372$17484 g$3372$17472))) g$3372$17505) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17503 '())))) ((lambda (g$3372$17511) (list g$3372$17511)) g$3372$17503))) g$3372$17495))) ((lambda (g$3372$17513) (if (g$3372$13212 g$3372$17513) (begin '#f ((lambda (g$3372$17515) (if g$3372$17515 (begin '#f ((lambda (g$3372$17517) (if g$3372$17517 (begin '#f (append g$3372$17515 g$3372$17517)) '#f)) ((letrec ((g$3372$17519 (lambda (g$3372$17521) (if (g$3372$13212 g$3372$17521) ((lambda (g$3372$17523) (if g$3372$17523 (begin '#f ((lambda (g$3372$17525) (if g$3372$17525 (begin '#f (map cons g$3372$17523 g$3372$17525)) '#f)) (g$3372$17519 (g$3372$13224 g$3372$17521)))) '#f)) ((lambda (g$3372$17527) (list g$3372$17527)) (g$3372$13220 g$3372$17521))) (if (g$3372$13216 g$3372$17521) (list (begin 'p '())) '#f))))) g$3372$17519) (g$3372$13224 g$3372$17513)))) '#f)) ((lambda (g$3372$17529) (if (g$3372$13226 g$3372$17529) (if (g$3372$13234 g$3372$17529 (g$3372$13479 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17513)))) '#f)) g$3372$17495))) g$3372$17487))) ((lambda (g$3372$17531) (if (g$3372$13212 g$3372$17531) (begin '#f ((lambda (g$3372$17533) (if g$3372$17533 (begin '#f ((lambda (g$3372$17535) (if g$3372$17535 (begin '#f (append g$3372$17533 g$3372$17535)) '#f)) ((letrec ((g$3372$17537 (lambda (g$3372$17539) (if (g$3372$13212 g$3372$17539) ((lambda (g$3372$17541) (if g$3372$17541 (begin '#f ((lambda (g$3372$17543) (if g$3372$17543 (begin '#f (map cons g$3372$17541 g$3372$17543)) '#f)) (g$3372$17537 (g$3372$13224 g$3372$17539)))) '#f)) ((lambda (g$3372$17545) (list g$3372$17545)) (g$3372$13220 g$3372$17539))) (if (g$3372$13216 g$3372$17539) (list (begin 'p '())) '#f))))) g$3372$17537) (g$3372$13224 g$3372$17531)))) '#f)) ((lambda (g$3372$17547) (if (g$3372$13226 g$3372$17547) (if (g$3372$13234 g$3372$17547 (g$3372$13479 'unquote)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17531)))) '#f)) g$3372$17487))) g$3372$17483)) g$3372$17477) ((lambda (g$3372$17549) ((lambda (g$3372$17551) (if (if g$3372$17551 (begin '#f (apply (lambda () '#t) g$3372$17551)) '#f) (apply (lambda () (list (g$3372$13479 'quote) '())) g$3372$17551) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17549 '())))) ((lambda (g$3372$17553) (if (equal? (g$3372$13246 g$3372$17553) '()) (begin '#f '()) '#f)) g$3372$17549))) g$3372$17475))) ((lambda (g$3372$17555) (if (g$3372$13212 g$3372$17555) (begin '#f ((lambda (g$3372$17557) (if g$3372$17557 (begin '#f ((lambda (g$3372$17559) (if g$3372$17559 (begin '#f (append g$3372$17557 g$3372$17559)) '#f)) ((lambda (g$3372$17561) (list g$3372$17561)) (g$3372$13224 g$3372$17555)))) '#f)) ((lambda (g$3372$17563) (list g$3372$17563)) (g$3372$13220 g$3372$17555)))) '#f)) g$3372$17475))) g$3372$17471))) (set! g$3372$17285 (lambda (g$3372$17287 g$3372$17288) ((lambda (g$3372$17291) ((lambda (g$3372$17293) (if (if g$3372$17293 (begin '#f (apply (lambda (g$3372$17295) '#t) g$3372$17293)) '#f) (apply (lambda (g$3372$17297) (if (= g$3372$17288 '0) g$3372$17297 (g$3372$17277 (list (g$3372$13479 'quote) 'unquote) (g$3372$17285 (list g$3372$17297) (- g$3372$17288 '1))))) g$3372$17293) ((lambda (g$3372$17299) ((lambda (g$3372$17301) (if (if g$3372$17301 (begin '#f (apply (lambda (g$3372$17303 g$3372$17304) '#t) g$3372$17301)) '#f) (apply (lambda (g$3372$17307 g$3372$17308) (if (= g$3372$17288 '0) (g$3372$17275 g$3372$17307 (g$3372$17285 g$3372$17308 g$3372$17288)) (g$3372$17277 (g$3372$17277 (list (g$3372$13479 'quote) 'unquote) (g$3372$17285 g$3372$17307 (- g$3372$17288 '1))) (g$3372$17285 g$3372$17308 g$3372$17288)))) g$3372$17301) ((lambda (g$3372$17311) ((lambda (g$3372$17313) (if (if g$3372$17313 (begin '#f (apply (lambda (g$3372$17315 g$3372$17316) '#t) g$3372$17313)) '#f) (apply (lambda (g$3372$17319 g$3372$17320) (if (= g$3372$17288 '0) (g$3372$17279 g$3372$17319 (g$3372$17285 g$3372$17320 g$3372$17288)) (g$3372$17277 (g$3372$17277 (list (g$3372$13479 'quote) 'unquote-splicing) (g$3372$17285 g$3372$17319 (- g$3372$17288 '1))) (g$3372$17285 g$3372$17320 g$3372$17288)))) g$3372$17313) ((lambda (g$3372$17323) ((lambda (g$3372$17325) (if (if g$3372$17325 (begin '#f (apply (lambda (g$3372$17327) '#t) g$3372$17325)) '#f) (apply (lambda (g$3372$17329) (g$3372$17277 (list (g$3372$13479 'quote) 'quasiquote) (g$3372$17285 (list g$3372$17329) (+ g$3372$17288 '1)))) g$3372$17325) ((lambda (g$3372$17331) ((lambda (g$3372$17333) (if (if g$3372$17333 (begin '#f (apply (lambda (g$3372$17335 g$3372$17336) '#t) g$3372$17333)) '#f) (apply (lambda (g$3372$17339 g$3372$17340) (g$3372$17277 (g$3372$17285 g$3372$17339 g$3372$17288) (g$3372$17285 g$3372$17340 g$3372$17288))) g$3372$17333) ((lambda (g$3372$17343) ((lambda (g$3372$17345) (if (if g$3372$17345 (begin '#f (apply (lambda (g$3372$17347) (not (g$3372$13178 g$3372$17347))) g$3372$17345)) '#f) (apply (lambda (g$3372$17349) (g$3372$17281 (g$3372$17283 g$3372$17349 g$3372$17288))) g$3372$17345) ((lambda (g$3372$17351) ((lambda (g$3372$17353) (if (if g$3372$17353 (begin '#f (apply (lambda (g$3372$17355) '#t) g$3372$17353)) '#f) (apply (lambda (g$3372$17357) (list (g$3372$13479 'quote) g$3372$17357)) g$3372$17353) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17351 '())))) ((lambda (g$3372$17359) (list g$3372$17359)) g$3372$17351))) g$3372$17343))) ((lambda (g$3372$17361) (if (g$3372$13214 g$3372$17361) (begin '#f ((letrec ((g$3372$17363 (lambda (g$3372$17365) (if (g$3372$13212 g$3372$17365) ((lambda (g$3372$17367) (if g$3372$17367 (begin '#f ((lambda (g$3372$17369) (if g$3372$17369 (begin '#f (map cons g$3372$17367 g$3372$17369)) '#f)) (g$3372$17363 (g$3372$13224 g$3372$17365)))) '#f)) ((lambda (g$3372$17371) (list g$3372$17371)) (g$3372$13220 g$3372$17365))) (if (g$3372$13216 g$3372$17365) (list (begin 'x '())) '#f))))) g$3372$17363) (g$3372$13210 g$3372$17361))) '#f)) g$3372$17343))) g$3372$17331))) ((lambda (g$3372$17373) (if (g$3372$13212 g$3372$17373) (begin '#f ((lambda (g$3372$17375) (if g$3372$17375 (begin '#f ((lambda (g$3372$17377) (if g$3372$17377 (begin '#f (append g$3372$17375 g$3372$17377)) '#f)) ((lambda (g$3372$17379) (list g$3372$17379)) (g$3372$13224 g$3372$17373)))) '#f)) ((lambda (g$3372$17381) (list g$3372$17381)) (g$3372$13220 g$3372$17373)))) '#f)) g$3372$17331))) g$3372$17323))) ((lambda (g$3372$17383) (if (g$3372$13212 g$3372$17383) (begin '#f ((lambda (g$3372$17385) (if g$3372$17385 (begin '#f ((lambda (g$3372$17387) (if g$3372$17387 (begin '#f (append g$3372$17385 g$3372$17387)) '#f)) ((lambda (g$3372$17389) (if (g$3372$13212 g$3372$17389) (begin '#f ((lambda (g$3372$17391) (if g$3372$17391 (begin '#f ((lambda (g$3372$17393) (if g$3372$17393 (begin '#f (append g$3372$17391 g$3372$17393)) '#f)) ((lambda (g$3372$17395) (if (equal? (g$3372$13246 g$3372$17395) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17389)))) '#f)) ((lambda (g$3372$17397) (list g$3372$17397)) (g$3372$13220 g$3372$17389)))) '#f)) (g$3372$13224 g$3372$17383)))) '#f)) ((lambda (g$3372$17399) (if (g$3372$13226 g$3372$17399) (if (g$3372$13234 g$3372$17399 (g$3372$13479 'quasiquote)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17383)))) '#f)) g$3372$17323))) g$3372$17311))) ((lambda (g$3372$17401) (if (g$3372$13212 g$3372$17401) (begin '#f ((lambda (g$3372$17403) (if g$3372$17403 (begin '#f ((lambda (g$3372$17405) (if g$3372$17405 (begin '#f (append g$3372$17403 g$3372$17405)) '#f)) ((lambda (g$3372$17407) (list g$3372$17407)) (g$3372$13224 g$3372$17401)))) '#f)) ((lambda (g$3372$17409) (if (g$3372$13212 g$3372$17409) (begin '#f ((lambda (g$3372$17411) (if g$3372$17411 (begin '#f ((lambda (g$3372$17413) (if g$3372$17413 (begin '#f (append g$3372$17411 g$3372$17413)) '#f)) ((letrec ((g$3372$17415 (lambda (g$3372$17417) (if (g$3372$13212 g$3372$17417) ((lambda (g$3372$17419) (if g$3372$17419 (begin '#f ((lambda (g$3372$17421) (if g$3372$17421 (begin '#f (map cons g$3372$17419 g$3372$17421)) '#f)) (g$3372$17415 (g$3372$13224 g$3372$17417)))) '#f)) ((lambda (g$3372$17423) (list g$3372$17423)) (g$3372$13220 g$3372$17417))) (if (g$3372$13216 g$3372$17417) (list (begin 'p '())) '#f))))) g$3372$17415) (g$3372$13224 g$3372$17409)))) '#f)) ((lambda (g$3372$17425) (if (g$3372$13226 g$3372$17425) (if (g$3372$13234 g$3372$17425 (g$3372$13479 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17409)))) '#f)) (g$3372$13220 g$3372$17401)))) '#f)) g$3372$17311))) g$3372$17299))) ((lambda (g$3372$17427) (if (g$3372$13212 g$3372$17427) (begin '#f ((lambda (g$3372$17429) (if g$3372$17429 (begin '#f ((lambda (g$3372$17431) (if g$3372$17431 (begin '#f (append g$3372$17429 g$3372$17431)) '#f)) ((lambda (g$3372$17433) (list g$3372$17433)) (g$3372$13224 g$3372$17427)))) '#f)) ((lambda (g$3372$17435) (if (g$3372$13212 g$3372$17435) (begin '#f ((lambda (g$3372$17437) (if g$3372$17437 (begin '#f ((lambda (g$3372$17439) (if g$3372$17439 (begin '#f (append g$3372$17437 g$3372$17439)) '#f)) ((letrec ((g$3372$17441 (lambda (g$3372$17443) (if (g$3372$13212 g$3372$17443) ((lambda (g$3372$17445) (if g$3372$17445 (begin '#f ((lambda (g$3372$17447) (if g$3372$17447 (begin '#f (map cons g$3372$17445 g$3372$17447)) '#f)) (g$3372$17441 (g$3372$13224 g$3372$17443)))) '#f)) ((lambda (g$3372$17449) (list g$3372$17449)) (g$3372$13220 g$3372$17443))) (if (g$3372$13216 g$3372$17443) (list (begin 'p '())) '#f))))) g$3372$17441) (g$3372$13224 g$3372$17435)))) '#f)) ((lambda (g$3372$17451) (if (g$3372$13226 g$3372$17451) (if (g$3372$13234 g$3372$17451 (g$3372$13479 'unquote)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17435)))) '#f)) (g$3372$13220 g$3372$17427)))) '#f)) g$3372$17299))) g$3372$17291))) ((lambda (g$3372$17453) (if (g$3372$13212 g$3372$17453) (begin '#f ((lambda (g$3372$17455) (if g$3372$17455 (begin '#f ((lambda (g$3372$17457) (if g$3372$17457 (begin '#f (append g$3372$17455 g$3372$17457)) '#f)) ((lambda (g$3372$17459) (if (g$3372$13212 g$3372$17459) (begin '#f ((lambda (g$3372$17461) (if g$3372$17461 (begin '#f ((lambda (g$3372$17463) (if g$3372$17463 (begin '#f (append g$3372$17461 g$3372$17463)) '#f)) ((lambda (g$3372$17465) (if (equal? (g$3372$13246 g$3372$17465) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17459)))) '#f)) ((lambda (g$3372$17467) (list g$3372$17467)) (g$3372$13220 g$3372$17459)))) '#f)) (g$3372$13224 g$3372$17453)))) '#f)) ((lambda (g$3372$17469) (if (g$3372$13226 g$3372$17469) (if (g$3372$13234 g$3372$17469 (g$3372$13479 'unquote)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$17453)))) '#f)) g$3372$17291))) g$3372$17287))) (lambda (g$3372$17905) ((lambda (g$3372$17907) ((lambda (g$3372$17909) (if (if g$3372$17909 (begin '#f (apply (lambda (g$3372$17911) '#t) g$3372$17909)) '#f) (apply (lambda (g$3372$17913) (g$3372$17285 g$3372$17913 '0)) g$3372$17909) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$17907 '())))) ((lambda (g$3372$17915) (if (g$3372$13212 g$3372$17915) (begin '#f ((lambda (g$3372$17917) (if g$3372$17917 (begin '#f ((lambda (g$3372$17919) (if g$3372$17919 (begin '#f (append g$3372$17917 g$3372$17919)) '#f)) ((lambda (g$3372$17921) (if (g$3372$13212 g$3372$17921) (begin '#f ((lambda (g$3372$17923) (if g$3372$17923 (begin '#f ((lambda (g$3372$17925) (if g$3372$17925 (begin '#f (append g$3372$17923 g$3372$17925)) '#f)) ((lambda (g$3372$17927) (if (equal? (g$3372$13246 g$3372$17927) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$17921)))) '#f)) ((lambda (g$3372$17929) (list g$3372$17929)) (g$3372$13220 g$3372$17921)))) '#f)) (g$3372$13224 g$3372$17915)))) '#f)) ((lambda (g$3372$17931) '()) (g$3372$13220 g$3372$17915)))) '#f)) g$3372$17907))) g$3372$17905)))) '#f '#f '#f '#f '#f '#f)))) (set! g$3372$13553 ((lambda () ((lambda (g$3372$17933) (begin (set! g$3372$17933 (lambda (g$3372$17935 g$3372$17936) ((lambda (g$3372$17939) ((lambda (g$3372$17941) (if (if g$3372$17941 (begin '#f (apply (lambda (g$3372$17943) '#t) g$3372$17941)) '#f) (apply (lambda (g$3372$17945) (if (= g$3372$17936 '0) ((lambda (g$3372$17947) (values (list g$3372$17947) (list g$3372$17945) g$3372$17947)) (gensym)) (call-with-values (lambda () (g$3372$17933 g$3372$17945 (- g$3372$17936 '1))) (lambda (g$3372$17949 g$3372$17950 g$3372$17951) (values g$3372$17949 g$3372$17950 (list 'unsyntax g$3372$17951)))))) g$3372$17941) ((lambda (g$3372$17955) ((lambda (g$3372$17957) (if (if g$3372$17957 (begin '#f (apply (lambda () (= g$3372$17936 '0)) g$3372$17957)) '#f) (apply (lambda () (error 'expander '"incorrect use of unsyntax" (g$3372$13244 g$3372$17935 '()))) g$3372$17957) ((lambda (g$3372$17959) ((lambda (g$3372$17961) (if (if g$3372$17961 (begin '#f (apply (lambda (g$3372$17963 g$3372$17964) '#t) g$3372$17961)) '#f) (apply (lambda (g$3372$17967 g$3372$17968) (call-with-values (lambda () (g$3372$17933 g$3372$17968 g$3372$17936)) (lambda (g$3372$17971 g$3372$17972 g$3372$17973) (if (= g$3372$17936 '0) ((lambda (g$3372$17977) (values (cons (cons g$3372$17977 '(|...|)) g$3372$17971) (cons g$3372$17967 g$3372$17972) (cons g$3372$17977 (cons '|...| g$3372$17973)))) (gensym)) (call-with-values (lambda () (g$3372$17933 g$3372$17967 (- g$3372$17936 '1))) (lambda (g$3372$17979 g$3372$17980 g$3372$17981) (values (append g$3372$17979 g$3372$17971) (append g$3372$17980 g$3372$17972) (cons (list 'unsyntax-splicing g$3372$17981) g$3372$17973)))))))) g$3372$17961) ((lambda (g$3372$17985) ((lambda (g$3372$17987) (if (if g$3372$17987 (begin '#f (apply (lambda () (= g$3372$17936 '0)) g$3372$17987)) '#f) (apply (lambda () (error 'expander '"incorrect use of unsyntax-splicing" (g$3372$13244 g$3372$17935 '()))) g$3372$17987) ((lambda (g$3372$17989) ((lambda (g$3372$17991) (if (if g$3372$17991 (begin '#f (apply (lambda (g$3372$17993) '#t) g$3372$17991)) '#f) (apply (lambda (g$3372$17995) (call-with-values (lambda () (g$3372$17933 g$3372$17995 (+ g$3372$17936 '1))) (lambda (g$3372$17997 g$3372$17998 g$3372$17999) (values g$3372$17997 g$3372$17998 (list 'quasisyntax g$3372$17999))))) g$3372$17991) ((lambda (g$3372$18003) ((lambda (g$3372$18005) (if (if g$3372$18005 (begin '#f (apply (lambda (g$3372$18007 g$3372$18008) '#t) g$3372$18005)) '#f) (apply (lambda (g$3372$18011 g$3372$18012) (call-with-values (lambda () (g$3372$17933 g$3372$18011 g$3372$17936)) (lambda (g$3372$18015 g$3372$18016 g$3372$18017) (call-with-values (lambda () (g$3372$17933 g$3372$18012 g$3372$17936)) (lambda (g$3372$18018 g$3372$18019 g$3372$18020) (values (append g$3372$18018 g$3372$18015) (append g$3372$18019 g$3372$18016) (cons g$3372$18017 g$3372$18020))))))) g$3372$18005) ((lambda (g$3372$18027) ((lambda (g$3372$18029) (if (if g$3372$18029 (begin '#f (apply (lambda (g$3372$18031) (not (g$3372$13178 g$3372$17935))) g$3372$18029)) '#f) (apply (lambda (g$3372$18033) (call-with-values (lambda () (letrec ((g$3372$18035 (lambda (g$3372$18037) (if (null? g$3372$18037) (values '() '() '()) (call-with-values (lambda () (g$3372$17933 (car g$3372$18037) g$3372$17936)) (lambda (g$3372$18039 g$3372$18040 g$3372$18041) (call-with-values (lambda () (g$3372$18035 (cdr g$3372$18037))) (lambda (g$3372$18045 g$3372$18046 g$3372$18047) (values (append g$3372$18039 g$3372$18045) (append g$3372$18040 g$3372$18046) (cons g$3372$18041 g$3372$18047)))))))))) (g$3372$18035 g$3372$18033))) (lambda (g$3372$18051 g$3372$18052 g$3372$18053) (values g$3372$18051 g$3372$18052 (list->vector g$3372$18053))))) g$3372$18029) ((lambda (g$3372$18057) ((lambda (g$3372$18059) (if (if g$3372$18059 (begin '#f (apply (lambda () '#t) g$3372$18059)) '#f) (apply (lambda () (values '() '() g$3372$17935)) g$3372$18059) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18057 '())))) ((lambda (g$3372$18061) '()) g$3372$18057))) g$3372$18027))) ((lambda (g$3372$18063) (if (g$3372$13214 g$3372$18063) (begin '#f ((letrec ((g$3372$18065 (lambda (g$3372$18067) (if (g$3372$13212 g$3372$18067) ((lambda (g$3372$18069) (if g$3372$18069 (begin '#f ((lambda (g$3372$18071) (if g$3372$18071 (begin '#f (map cons g$3372$18069 g$3372$18071)) '#f)) (g$3372$18065 (g$3372$13224 g$3372$18067)))) '#f)) ((lambda (g$3372$18073) (list g$3372$18073)) (g$3372$13220 g$3372$18067))) (if (g$3372$13216 g$3372$18067) (list (begin 'x '())) '#f))))) g$3372$18065) (g$3372$13210 g$3372$18063))) '#f)) g$3372$18027))) g$3372$18003))) ((lambda (g$3372$18075) (if (g$3372$13212 g$3372$18075) (begin '#f ((lambda (g$3372$18077) (if g$3372$18077 (begin '#f ((lambda (g$3372$18079) (if g$3372$18079 (begin '#f (append g$3372$18077 g$3372$18079)) '#f)) ((lambda (g$3372$18081) (list g$3372$18081)) (g$3372$13224 g$3372$18075)))) '#f)) ((lambda (g$3372$18083) (list g$3372$18083)) (g$3372$13220 g$3372$18075)))) '#f)) g$3372$18003))) g$3372$17989))) ((lambda (g$3372$18085) (if (g$3372$13212 g$3372$18085) (begin '#f ((lambda (g$3372$18087) (if g$3372$18087 (begin '#f ((lambda (g$3372$18089) (if g$3372$18089 (begin '#f (append g$3372$18087 g$3372$18089)) '#f)) ((lambda (g$3372$18091) (if (g$3372$13212 g$3372$18091) (begin '#f ((lambda (g$3372$18093) (if g$3372$18093 (begin '#f ((lambda (g$3372$18095) (if g$3372$18095 (begin '#f (append g$3372$18093 g$3372$18095)) '#f)) ((lambda (g$3372$18097) (if (equal? (g$3372$13246 g$3372$18097) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18091)))) '#f)) ((lambda (g$3372$18099) (list g$3372$18099)) (g$3372$13220 g$3372$18091)))) '#f)) (g$3372$13224 g$3372$18085)))) '#f)) ((lambda (g$3372$18101) (if (g$3372$13226 g$3372$18101) (if (g$3372$13234 g$3372$18101 (g$3372$13479 'quasisyntax)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18085)))) '#f)) g$3372$17989))) g$3372$17985))) ((lambda (g$3372$18103) (if (g$3372$13226 g$3372$18103) (if (g$3372$13234 g$3372$18103 (g$3372$13479 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) g$3372$17985))) g$3372$17959))) ((lambda (g$3372$18105) (if (g$3372$13212 g$3372$18105) (begin '#f ((lambda (g$3372$18107) (if g$3372$18107 (begin '#f ((lambda (g$3372$18109) (if g$3372$18109 (begin '#f (append g$3372$18107 g$3372$18109)) '#f)) ((lambda (g$3372$18111) (list g$3372$18111)) (g$3372$13224 g$3372$18105)))) '#f)) ((lambda (g$3372$18113) (if (g$3372$13212 g$3372$18113) (begin '#f ((lambda (g$3372$18115) (if g$3372$18115 (begin '#f ((lambda (g$3372$18117) (if g$3372$18117 (begin '#f (append g$3372$18115 g$3372$18117)) '#f)) ((lambda (g$3372$18119) (if (g$3372$13212 g$3372$18119) (begin '#f ((lambda (g$3372$18121) (if g$3372$18121 (begin '#f ((lambda (g$3372$18123) (if g$3372$18123 (begin '#f (append g$3372$18121 g$3372$18123)) '#f)) ((lambda (g$3372$18125) (if (equal? (g$3372$13246 g$3372$18125) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18119)))) '#f)) ((lambda (g$3372$18127) (list g$3372$18127)) (g$3372$13220 g$3372$18119)))) '#f)) (g$3372$13224 g$3372$18113)))) '#f)) ((lambda (g$3372$18129) (if (g$3372$13226 g$3372$18129) (if (g$3372$13234 g$3372$18129 (g$3372$13479 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18113)))) '#f)) (g$3372$13220 g$3372$18105)))) '#f)) g$3372$17959))) g$3372$17955))) ((lambda (g$3372$18131) (if (g$3372$13226 g$3372$18131) (if (g$3372$13234 g$3372$18131 (g$3372$13479 'unsyntax)) (begin '#f '()) '#f) '#f)) g$3372$17955))) g$3372$17939))) ((lambda (g$3372$18133) (if (g$3372$13212 g$3372$18133) (begin '#f ((lambda (g$3372$18135) (if g$3372$18135 (begin '#f ((lambda (g$3372$18137) (if g$3372$18137 (begin '#f (append g$3372$18135 g$3372$18137)) '#f)) ((lambda (g$3372$18139) (if (g$3372$13212 g$3372$18139) (begin '#f ((lambda (g$3372$18141) (if g$3372$18141 (begin '#f ((lambda (g$3372$18143) (if g$3372$18143 (begin '#f (append g$3372$18141 g$3372$18143)) '#f)) ((lambda (g$3372$18145) (if (equal? (g$3372$13246 g$3372$18145) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18139)))) '#f)) ((lambda (g$3372$18147) (list g$3372$18147)) (g$3372$13220 g$3372$18139)))) '#f)) (g$3372$13224 g$3372$18133)))) '#f)) ((lambda (g$3372$18149) (if (g$3372$13226 g$3372$18149) (if (g$3372$13234 g$3372$18149 (g$3372$13479 'unsyntax)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18133)))) '#f)) g$3372$17939))) g$3372$17935))) (lambda (g$3372$18151) ((lambda (g$3372$18153) ((lambda (g$3372$18155) (if (if g$3372$18155 (begin '#f (apply (lambda (g$3372$18157) '#t) g$3372$18155)) '#f) (apply (lambda (g$3372$18159) (call-with-values (lambda () (g$3372$17933 g$3372$18159 '0)) (lambda (g$3372$18161 g$3372$18162 g$3372$18163) (g$3372$13513 (list 'syntax-case (cons 'list g$3372$18162) '() (list g$3372$18161 (list 'syntax g$3372$18163))))))) g$3372$18155) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18153 '())))) ((lambda (g$3372$18167) (if (g$3372$13212 g$3372$18167) (begin '#f ((lambda (g$3372$18169) (if g$3372$18169 (begin '#f ((lambda (g$3372$18171) (if g$3372$18171 (begin '#f (append g$3372$18169 g$3372$18171)) '#f)) ((lambda (g$3372$18173) (if (g$3372$13212 g$3372$18173) (begin '#f ((lambda (g$3372$18175) (if g$3372$18175 (begin '#f ((lambda (g$3372$18177) (if g$3372$18177 (begin '#f (append g$3372$18175 g$3372$18177)) '#f)) ((lambda (g$3372$18179) (if (equal? (g$3372$13246 g$3372$18179) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18173)))) '#f)) ((lambda (g$3372$18181) (list g$3372$18181)) (g$3372$13220 g$3372$18173)))) '#f)) (g$3372$13224 g$3372$18167)))) '#f)) ((lambda (g$3372$18183) '()) (g$3372$13220 g$3372$18167)))) '#f)) g$3372$18153))) g$3372$18151)))) '#f)))) (set! g$3372$13555 (lambda (g$3372$18185) (error 'expander '"define-struct not supported" (g$3372$13244 g$3372$18185 '())))) (set! g$3372$13557 (lambda (g$3372$18187) ((lambda (g$3372$18189 g$3372$18191 g$3372$18193 g$3372$18195 g$3372$18197 g$3372$18199 g$3372$18201 g$3372$18203 g$3372$18205 g$3372$18207 g$3372$18209 g$3372$18211 g$3372$18213 g$3372$18215) (begin (set! g$3372$18189 (lambda (g$3372$19237 . g$3372$19239) (g$3372$13706 g$3372$19237 (string->symbol (apply string-append (map (lambda (g$3372$19241) (if (symbol? g$3372$19241) (symbol->string g$3372$19241) (if (string? g$3372$19241) g$3372$19241 (error 'define-record-type '"BUG")))) g$3372$19239)))))) (set! g$3372$18191 (lambda (g$3372$19183) ((lambda (g$3372$19185) ((lambda (g$3372$19187) (if (if g$3372$19187 (begin '#f (apply (lambda (g$3372$19189 g$3372$19190 g$3372$19191) '#t) g$3372$19187)) '#f) (apply (lambda (g$3372$19195 g$3372$19196 g$3372$19197) g$3372$19195) g$3372$19187) ((lambda (g$3372$19201) ((lambda (g$3372$19203) (if (if g$3372$19203 (begin '#f (apply (lambda (g$3372$19205) '#t) g$3372$19203)) '#f) (apply (lambda (g$3372$19207) g$3372$19207) g$3372$19203) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$19201 '())))) ((lambda (g$3372$19209) (list g$3372$19209)) g$3372$19201))) g$3372$19185))) ((lambda (g$3372$19211) (if (g$3372$13212 g$3372$19211) (begin '#f ((lambda (g$3372$19213) (if g$3372$19213 (begin '#f ((lambda (g$3372$19215) (if g$3372$19215 (begin '#f (append g$3372$19213 g$3372$19215)) '#f)) ((lambda (g$3372$19217) (if (g$3372$13212 g$3372$19217) (begin '#f ((lambda (g$3372$19219) (if g$3372$19219 (begin '#f ((lambda (g$3372$19221) (if g$3372$19221 (begin '#f (append g$3372$19219 g$3372$19221)) '#f)) ((lambda (g$3372$19223) (if (g$3372$13212 g$3372$19223) (begin '#f ((lambda (g$3372$19225) (if g$3372$19225 (begin '#f ((lambda (g$3372$19227) (if g$3372$19227 (begin '#f (append g$3372$19225 g$3372$19227)) '#f)) ((lambda (g$3372$19229) (if (equal? (g$3372$13246 g$3372$19229) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$19223)))) '#f)) ((lambda (g$3372$19231) (list g$3372$19231)) (g$3372$13220 g$3372$19223)))) '#f)) (g$3372$13224 g$3372$19217)))) '#f)) ((lambda (g$3372$19233) (list g$3372$19233)) (g$3372$13220 g$3372$19217)))) '#f)) (g$3372$13224 g$3372$19211)))) '#f)) ((lambda (g$3372$19235) (list g$3372$19235)) (g$3372$13220 g$3372$19211)))) '#f)) g$3372$19185))) g$3372$19183))) (set! g$3372$18193 (lambda (g$3372$19127 g$3372$19128) ((lambda (g$3372$19131) ((lambda (g$3372$19133) (if (if g$3372$19133 (begin '#f (apply (lambda (g$3372$19135 g$3372$19136 g$3372$19137) '#t) g$3372$19133)) '#f) (apply (lambda (g$3372$19141 g$3372$19142 g$3372$19143) g$3372$19142) g$3372$19133) ((lambda (g$3372$19147) ((lambda (g$3372$19149) (if (if g$3372$19149 (begin '#f (apply (lambda (g$3372$19151) '#t) g$3372$19149)) '#f) (apply (lambda (g$3372$19153) (g$3372$18189 g$3372$19128 '"make-" (g$3372$13246 g$3372$19153))) g$3372$19149) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$19147 '())))) ((lambda (g$3372$19155) (list g$3372$19155)) g$3372$19147))) g$3372$19131))) ((lambda (g$3372$19157) (if (g$3372$13212 g$3372$19157) (begin '#f ((lambda (g$3372$19159) (if g$3372$19159 (begin '#f ((lambda (g$3372$19161) (if g$3372$19161 (begin '#f (append g$3372$19159 g$3372$19161)) '#f)) ((lambda (g$3372$19163) (if (g$3372$13212 g$3372$19163) (begin '#f ((lambda (g$3372$19165) (if g$3372$19165 (begin '#f ((lambda (g$3372$19167) (if g$3372$19167 (begin '#f (append g$3372$19165 g$3372$19167)) '#f)) ((lambda (g$3372$19169) (if (g$3372$13212 g$3372$19169) (begin '#f ((lambda (g$3372$19171) (if g$3372$19171 (begin '#f ((lambda (g$3372$19173) (if g$3372$19173 (begin '#f (append g$3372$19171 g$3372$19173)) '#f)) ((lambda (g$3372$19175) (if (equal? (g$3372$13246 g$3372$19175) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$19169)))) '#f)) ((lambda (g$3372$19177) (list g$3372$19177)) (g$3372$13220 g$3372$19169)))) '#f)) (g$3372$13224 g$3372$19163)))) '#f)) ((lambda (g$3372$19179) (list g$3372$19179)) (g$3372$13220 g$3372$19163)))) '#f)) (g$3372$13224 g$3372$19157)))) '#f)) ((lambda (g$3372$19181) (list g$3372$19181)) (g$3372$13220 g$3372$19157)))) '#f)) g$3372$19131))) g$3372$19127))) (set! g$3372$18195 (lambda (g$3372$19071 g$3372$19072) ((lambda (g$3372$19075) ((lambda (g$3372$19077) (if (if g$3372$19077 (begin '#f (apply (lambda (g$3372$19079 g$3372$19080 g$3372$19081) '#t) g$3372$19077)) '#f) (apply (lambda (g$3372$19085 g$3372$19086 g$3372$19087) g$3372$19087) g$3372$19077) ((lambda (g$3372$19091) ((lambda (g$3372$19093) (if (if g$3372$19093 (begin '#f (apply (lambda (g$3372$19095) '#t) g$3372$19093)) '#f) (apply (lambda (g$3372$19097) (g$3372$18189 g$3372$19072 (g$3372$13246 g$3372$19097) '"?")) g$3372$19093) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$19091 '())))) ((lambda (g$3372$19099) (list g$3372$19099)) g$3372$19091))) g$3372$19075))) ((lambda (g$3372$19101) (if (g$3372$13212 g$3372$19101) (begin '#f ((lambda (g$3372$19103) (if g$3372$19103 (begin '#f ((lambda (g$3372$19105) (if g$3372$19105 (begin '#f (append g$3372$19103 g$3372$19105)) '#f)) ((lambda (g$3372$19107) (if (g$3372$13212 g$3372$19107) (begin '#f ((lambda (g$3372$19109) (if g$3372$19109 (begin '#f ((lambda (g$3372$19111) (if g$3372$19111 (begin '#f (append g$3372$19109 g$3372$19111)) '#f)) ((lambda (g$3372$19113) (if (g$3372$13212 g$3372$19113) (begin '#f ((lambda (g$3372$19115) (if g$3372$19115 (begin '#f ((lambda (g$3372$19117) (if g$3372$19117 (begin '#f (append g$3372$19115 g$3372$19117)) '#f)) ((lambda (g$3372$19119) (if (equal? (g$3372$13246 g$3372$19119) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$19113)))) '#f)) ((lambda (g$3372$19121) (list g$3372$19121)) (g$3372$13220 g$3372$19113)))) '#f)) (g$3372$13224 g$3372$19107)))) '#f)) ((lambda (g$3372$19123) (list g$3372$19123)) (g$3372$13220 g$3372$19107)))) '#f)) (g$3372$13224 g$3372$19101)))) '#f)) ((lambda (g$3372$19125) (list g$3372$19125)) (g$3372$13220 g$3372$19101)))) '#f)) g$3372$19075))) g$3372$19071))) (set! g$3372$18197 (lambda (g$3372$19027 g$3372$19028) ((lambda (g$3372$19031) ((lambda (g$3372$19033) (if (if g$3372$19033 (begin '#f (apply (lambda () '#t) g$3372$19033)) '#f) (apply (lambda () '#f) g$3372$19033) ((lambda (g$3372$19035) ((lambda (g$3372$19037) (if (if g$3372$19037 (begin '#f (apply (lambda (g$3372$19039 g$3372$19040 g$3372$19041) '#t) g$3372$19037)) '#f) (apply (lambda (g$3372$19045 g$3372$19046 g$3372$19047) (if (g$3372$13234 (g$3372$13513 g$3372$19027) g$3372$19045) (cons g$3372$19045 g$3372$19046) (g$3372$18197 g$3372$19027 g$3372$19047))) g$3372$19037) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$19035 '())))) ((lambda (g$3372$19051) (if (g$3372$13212 g$3372$19051) (begin '#f ((lambda (g$3372$19053) (if g$3372$19053 (begin '#f ((lambda (g$3372$19055) (if g$3372$19055 (begin '#f (append g$3372$19053 g$3372$19055)) '#f)) ((lambda (g$3372$19057) (list g$3372$19057)) (g$3372$13224 g$3372$19051)))) '#f)) ((lambda (g$3372$19059) (if (g$3372$13212 g$3372$19059) (begin '#f ((lambda (g$3372$19061) (if g$3372$19061 (begin '#f ((lambda (g$3372$19063) (if g$3372$19063 (begin '#f (append g$3372$19061 g$3372$19063)) '#f)) ((lambda (g$3372$19065) (list g$3372$19065)) (g$3372$13224 g$3372$19059)))) '#f)) ((lambda (g$3372$19067) (list g$3372$19067)) (g$3372$13220 g$3372$19059)))) '#f)) (g$3372$13220 g$3372$19051)))) '#f)) g$3372$19035))) g$3372$19031))) ((lambda (g$3372$19069) (if (equal? (g$3372$13246 g$3372$19069) '()) (begin '#f '()) '#f)) g$3372$19031))) g$3372$19028))) (set! g$3372$18199 (lambda (g$3372$18769 g$3372$18770 g$3372$18771) ((lambda (g$3372$18775) (begin (set! g$3372$18775 (lambda (g$3372$18777) (list->vector (map (lambda (g$3372$18779) ((lambda (g$3372$18781) ((lambda (g$3372$18783) (if (if g$3372$18783 (begin '#f (apply (lambda (g$3372$18785 g$3372$18786) '#t) g$3372$18783)) '#f) (apply (lambda (g$3372$18789 g$3372$18790) (list 'mutable g$3372$18789)) g$3372$18783) ((lambda (g$3372$18793) ((lambda (g$3372$18795) (if (if g$3372$18795 (begin '#f (apply (lambda (g$3372$18797 g$3372$18798) '#t) g$3372$18795)) '#f) (apply (lambda (g$3372$18801 g$3372$18802) (list 'immutable g$3372$18801)) g$3372$18795) ((lambda (g$3372$18805) ((lambda (g$3372$18807) (if (if g$3372$18807 (begin '#f (apply (lambda (g$3372$18809) '#t) g$3372$18807)) '#f) (apply (lambda (g$3372$18811) (list 'immutable g$3372$18811)) g$3372$18807) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18805 '())))) ((lambda (g$3372$18813) (list g$3372$18813)) g$3372$18805))) g$3372$18793))) ((lambda (g$3372$18815) (if (g$3372$13212 g$3372$18815) (begin '#f ((lambda (g$3372$18817) (if g$3372$18817 (begin '#f ((lambda (g$3372$18819) (if g$3372$18819 (begin '#f (append g$3372$18817 g$3372$18819)) '#f)) ((lambda (g$3372$18821) (if (g$3372$13212 g$3372$18821) (begin '#f ((lambda (g$3372$18823) (if g$3372$18823 (begin '#f ((lambda (g$3372$18825) (if g$3372$18825 (begin '#f (append g$3372$18823 g$3372$18825)) '#f)) ((lambda (g$3372$18827) (list g$3372$18827)) (g$3372$13224 g$3372$18821)))) '#f)) ((lambda (g$3372$18829) (list g$3372$18829)) (g$3372$13220 g$3372$18821)))) '#f)) (g$3372$13224 g$3372$18815)))) '#f)) ((lambda (g$3372$18831) (if (g$3372$13226 g$3372$18831) (if (g$3372$13234 g$3372$18831 (g$3372$13479 'immutable)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18815)))) '#f)) g$3372$18793))) g$3372$18781))) ((lambda (g$3372$18833) (if (g$3372$13212 g$3372$18833) (begin '#f ((lambda (g$3372$18835) (if g$3372$18835 (begin '#f ((lambda (g$3372$18837) (if g$3372$18837 (begin '#f (append g$3372$18835 g$3372$18837)) '#f)) ((lambda (g$3372$18839) (if (g$3372$13212 g$3372$18839) (begin '#f ((lambda (g$3372$18841) (if g$3372$18841 (begin '#f ((lambda (g$3372$18843) (if g$3372$18843 (begin '#f (append g$3372$18841 g$3372$18843)) '#f)) ((lambda (g$3372$18845) (list g$3372$18845)) (g$3372$13224 g$3372$18839)))) '#f)) ((lambda (g$3372$18847) (list g$3372$18847)) (g$3372$13220 g$3372$18839)))) '#f)) (g$3372$13224 g$3372$18833)))) '#f)) ((lambda (g$3372$18849) (if (g$3372$13226 g$3372$18849) (if (g$3372$13234 g$3372$18849 (g$3372$13479 'mutable)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18833)))) '#f)) g$3372$18781))) g$3372$18779)) g$3372$18777)))) ((lambda (g$3372$18851 g$3372$18852 g$3372$18853 g$3372$18854 g$3372$18855) (g$3372$13513 (list 'make-record-type-descriptor (list 'quote g$3372$18770) g$3372$18851 g$3372$18852 g$3372$18853 g$3372$18854 g$3372$18855))) ((lambda (g$3372$18861) ((lambda (g$3372$18863) (if (if g$3372$18863 (begin '#f (apply (lambda (g$3372$18865) '#t) g$3372$18863)) '#f) (apply (lambda (g$3372$18867) (list 'record-type-descriptor g$3372$18867)) g$3372$18863) ((lambda (g$3372$18869) ((lambda (g$3372$18871) (if (if g$3372$18871 (begin '#f (apply (lambda () '#t) g$3372$18871)) '#f) (apply (lambda () '#f) g$3372$18871) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18869 '())))) ((lambda (g$3372$18873) '()) g$3372$18869))) g$3372$18861))) ((lambda (g$3372$18875) (if (g$3372$13212 g$3372$18875) (begin '#f ((lambda (g$3372$18877) (if g$3372$18877 (begin '#f ((lambda (g$3372$18879) (if g$3372$18879 (begin '#f (append g$3372$18877 g$3372$18879)) '#f)) ((lambda (g$3372$18881) (if (g$3372$13212 g$3372$18881) (begin '#f ((lambda (g$3372$18883) (if g$3372$18883 (begin '#f ((lambda (g$3372$18885) (if g$3372$18885 (begin '#f (append g$3372$18883 g$3372$18885)) '#f)) ((lambda (g$3372$18887) (if (equal? (g$3372$13246 g$3372$18887) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18881)))) '#f)) ((lambda (g$3372$18889) (list g$3372$18889)) (g$3372$13220 g$3372$18881)))) '#f)) (g$3372$13224 g$3372$18875)))) '#f)) ((lambda (g$3372$18891) '()) (g$3372$13220 g$3372$18875)))) '#f)) g$3372$18861))) (g$3372$18197 'parent g$3372$18771)) ((lambda (g$3372$18893) ((lambda (g$3372$18895) (if (if g$3372$18895 (begin '#f (apply (lambda () '#t) g$3372$18895)) '#f) (apply (lambda () (list 'quote (gensym))) g$3372$18895) ((lambda (g$3372$18897) ((lambda (g$3372$18899) (if (if g$3372$18899 (begin '#f (apply (lambda (g$3372$18901) '#t) g$3372$18899)) '#f) (apply (lambda (g$3372$18903) (list 'quote g$3372$18903)) g$3372$18899) ((lambda (g$3372$18905) ((lambda (g$3372$18907) (if (if g$3372$18907 (begin '#f (apply (lambda () '#t) g$3372$18907)) '#f) (apply (lambda () '#f) g$3372$18907) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18905 '())))) ((lambda (g$3372$18909) '()) g$3372$18905))) g$3372$18897))) ((lambda (g$3372$18911) (if (g$3372$13212 g$3372$18911) (begin '#f ((lambda (g$3372$18913) (if g$3372$18913 (begin '#f ((lambda (g$3372$18915) (if g$3372$18915 (begin '#f (append g$3372$18913 g$3372$18915)) '#f)) ((lambda (g$3372$18917) (if (g$3372$13212 g$3372$18917) (begin '#f ((lambda (g$3372$18919) (if g$3372$18919 (begin '#f ((lambda (g$3372$18921) (if g$3372$18921 (begin '#f (append g$3372$18919 g$3372$18921)) '#f)) ((lambda (g$3372$18923) (if (equal? (g$3372$13246 g$3372$18923) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18917)))) '#f)) ((lambda (g$3372$18925) (list g$3372$18925)) (g$3372$13220 g$3372$18917)))) '#f)) (g$3372$13224 g$3372$18911)))) '#f)) ((lambda (g$3372$18927) '()) (g$3372$13220 g$3372$18911)))) '#f)) g$3372$18897))) g$3372$18893))) ((lambda (g$3372$18929) (if (g$3372$13212 g$3372$18929) (begin '#f ((lambda (g$3372$18931) (if g$3372$18931 (begin '#f ((lambda (g$3372$18933) (if g$3372$18933 (begin '#f (append g$3372$18931 g$3372$18933)) '#f)) ((lambda (g$3372$18935) (if (equal? (g$3372$13246 g$3372$18935) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18929)))) '#f)) ((lambda (g$3372$18937) '()) (g$3372$13220 g$3372$18929)))) '#f)) g$3372$18893))) (g$3372$18197 'nongenerative g$3372$18771)) ((lambda (g$3372$18939) ((lambda (g$3372$18941) (if (if g$3372$18941 (begin '#f (apply (lambda () '#t) g$3372$18941)) '#f) (apply (lambda () '#t) g$3372$18941) ((lambda (g$3372$18943) ((lambda (g$3372$18945) (if (if g$3372$18945 (begin '#f (apply (lambda () '#t) g$3372$18945)) '#f) (apply (lambda () '#f) g$3372$18945) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18943 '())))) ((lambda (g$3372$18947) '()) g$3372$18943))) g$3372$18939))) ((lambda (g$3372$18949) (if (g$3372$13212 g$3372$18949) (begin '#f ((lambda (g$3372$18951) (if g$3372$18951 (begin '#f ((lambda (g$3372$18953) (if g$3372$18953 (begin '#f (append g$3372$18951 g$3372$18953)) '#f)) ((lambda (g$3372$18955) (if (g$3372$13212 g$3372$18955) (begin '#f ((lambda (g$3372$18957) (if g$3372$18957 (begin '#f ((lambda (g$3372$18959) (if g$3372$18959 (begin '#f (append g$3372$18957 g$3372$18959)) '#f)) ((lambda (g$3372$18961) (if (equal? (g$3372$13246 g$3372$18961) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18955)))) '#f)) ((lambda (g$3372$18963) (if (equal? (g$3372$13246 g$3372$18963) '#t) (begin '#f '()) '#f)) (g$3372$13220 g$3372$18955)))) '#f)) (g$3372$13224 g$3372$18949)))) '#f)) ((lambda (g$3372$18965) '()) (g$3372$13220 g$3372$18949)))) '#f)) g$3372$18939))) (g$3372$18197 'sealed? g$3372$18771)) ((lambda (g$3372$18967) ((lambda (g$3372$18969) (if (if g$3372$18969 (begin '#f (apply (lambda () '#t) g$3372$18969)) '#f) (apply (lambda () '#t) g$3372$18969) ((lambda (g$3372$18971) ((lambda (g$3372$18973) (if (if g$3372$18973 (begin '#f (apply (lambda () '#t) g$3372$18973)) '#f) (apply (lambda () '#f) g$3372$18973) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18971 '())))) ((lambda (g$3372$18975) '()) g$3372$18971))) g$3372$18967))) ((lambda (g$3372$18977) (if (g$3372$13212 g$3372$18977) (begin '#f ((lambda (g$3372$18979) (if g$3372$18979 (begin '#f ((lambda (g$3372$18981) (if g$3372$18981 (begin '#f (append g$3372$18979 g$3372$18981)) '#f)) ((lambda (g$3372$18983) (if (g$3372$13212 g$3372$18983) (begin '#f ((lambda (g$3372$18985) (if g$3372$18985 (begin '#f ((lambda (g$3372$18987) (if g$3372$18987 (begin '#f (append g$3372$18985 g$3372$18987)) '#f)) ((lambda (g$3372$18989) (if (equal? (g$3372$13246 g$3372$18989) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18983)))) '#f)) ((lambda (g$3372$18991) (if (equal? (g$3372$13246 g$3372$18991) '#t) (begin '#f '()) '#f)) (g$3372$13220 g$3372$18983)))) '#f)) (g$3372$13224 g$3372$18977)))) '#f)) ((lambda (g$3372$18993) '()) (g$3372$13220 g$3372$18977)))) '#f)) g$3372$18967))) (g$3372$18197 'opaque? g$3372$18771)) ((lambda (g$3372$18995) ((lambda (g$3372$18997) (if (if g$3372$18997 (begin '#f (apply (lambda (g$3372$18999) '#t) g$3372$18997)) '#f) (apply (lambda (g$3372$19001) (list 'quote (g$3372$18775 g$3372$19001))) g$3372$18997) ((lambda (g$3372$19003) ((lambda (g$3372$19005) (if (if g$3372$19005 (begin '#f (apply (lambda () '#t) g$3372$19005)) '#f) (apply (lambda () ''#()) g$3372$19005) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$19003 '())))) ((lambda (g$3372$19007) '()) g$3372$19003))) g$3372$18995))) ((lambda (g$3372$19009) (if (g$3372$13212 g$3372$19009) (begin '#f ((lambda (g$3372$19011) (if g$3372$19011 (begin '#f ((lambda (g$3372$19013) (if g$3372$19013 (begin '#f (append g$3372$19011 g$3372$19013)) '#f)) ((letrec ((g$3372$19015 (lambda (g$3372$19017) (if (g$3372$13212 g$3372$19017) ((lambda (g$3372$19019) (if g$3372$19019 (begin '#f ((lambda (g$3372$19021) (if g$3372$19021 (begin '#f (map cons g$3372$19019 g$3372$19021)) '#f)) (g$3372$19015 (g$3372$13224 g$3372$19017)))) '#f)) ((lambda (g$3372$19023) (list g$3372$19023)) (g$3372$13220 g$3372$19017))) (if (g$3372$13216 g$3372$19017) (list (begin 'field-spec* '())) '#f))))) g$3372$19015) (g$3372$13224 g$3372$19009)))) '#f)) ((lambda (g$3372$19025) '()) (g$3372$13220 g$3372$19009)))) '#f)) g$3372$18995))) (g$3372$18197 'fields g$3372$18771))))) '#f))) (set! g$3372$18201 (lambda (g$3372$18729 g$3372$18730 g$3372$18731) ((lambda (g$3372$18735) (list 'make-record-constructor-descriptor g$3372$18730 g$3372$18735 g$3372$18731)) ((lambda (g$3372$18737) ((lambda (g$3372$18739) (if (if g$3372$18739 (begin '#f (apply (lambda (g$3372$18741) '#t) g$3372$18739)) '#f) (apply (lambda (g$3372$18743) (list 'record-constructor-descriptor g$3372$18743)) g$3372$18739) ((lambda (g$3372$18745) ((lambda (g$3372$18747) (if (if g$3372$18747 (begin '#f (apply (lambda () '#t) g$3372$18747)) '#f) (apply (lambda () '#f) g$3372$18747) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18745 '())))) ((lambda (g$3372$18749) '()) g$3372$18745))) g$3372$18737))) ((lambda (g$3372$18751) (if (g$3372$13212 g$3372$18751) (begin '#f ((lambda (g$3372$18753) (if g$3372$18753 (begin '#f ((lambda (g$3372$18755) (if g$3372$18755 (begin '#f (append g$3372$18753 g$3372$18755)) '#f)) ((lambda (g$3372$18757) (if (g$3372$13212 g$3372$18757) (begin '#f ((lambda (g$3372$18759) (if g$3372$18759 (begin '#f ((lambda (g$3372$18761) (if g$3372$18761 (begin '#f (append g$3372$18759 g$3372$18761)) '#f)) ((lambda (g$3372$18763) (if (equal? (g$3372$13246 g$3372$18763) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18757)))) '#f)) ((lambda (g$3372$18765) (list g$3372$18765)) (g$3372$13220 g$3372$18757)))) '#f)) (g$3372$13224 g$3372$18751)))) '#f)) ((lambda (g$3372$18767) '()) (g$3372$13220 g$3372$18751)))) '#f)) g$3372$18737))) (g$3372$18197 'parent g$3372$18729))))) (set! g$3372$18203 (lambda (g$3372$18695) ((lambda (g$3372$18697) ((lambda (g$3372$18699) (if (if g$3372$18699 (begin '#f (apply (lambda (g$3372$18701) '#t) g$3372$18699)) '#f) (apply (lambda (g$3372$18703) g$3372$18703) g$3372$18699) ((lambda (g$3372$18705) ((lambda (g$3372$18707) (if (if g$3372$18707 (begin '#f (apply (lambda () '#t) g$3372$18707)) '#f) (apply (lambda () '#f) g$3372$18707) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18705 '())))) ((lambda (g$3372$18709) '()) g$3372$18705))) g$3372$18697))) ((lambda (g$3372$18711) (if (g$3372$13212 g$3372$18711) (begin '#f ((lambda (g$3372$18713) (if g$3372$18713 (begin '#f ((lambda (g$3372$18715) (if g$3372$18715 (begin '#f (append g$3372$18713 g$3372$18715)) '#f)) ((lambda (g$3372$18717) (if (g$3372$13212 g$3372$18717) (begin '#f ((lambda (g$3372$18719) (if g$3372$18719 (begin '#f ((lambda (g$3372$18721) (if g$3372$18721 (begin '#f (append g$3372$18719 g$3372$18721)) '#f)) ((lambda (g$3372$18723) (if (equal? (g$3372$13246 g$3372$18723) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18717)))) '#f)) ((lambda (g$3372$18725) (list g$3372$18725)) (g$3372$13220 g$3372$18717)))) '#f)) (g$3372$13224 g$3372$18711)))) '#f)) ((lambda (g$3372$18727) '()) (g$3372$13220 g$3372$18711)))) '#f)) g$3372$18697))) (g$3372$18197 'protocol g$3372$18695)))) (set! g$3372$18205 (lambda (g$3372$18635) ((lambda (g$3372$18637) ((lambda (g$3372$18639) (if (if g$3372$18639 (begin '#f (apply (lambda () '#t) g$3372$18639)) '#f) (apply (lambda () '()) g$3372$18639) ((lambda (g$3372$18641) ((lambda (g$3372$18643) (if (if g$3372$18643 (begin '#f (apply (lambda (g$3372$18645) '#t) g$3372$18643)) '#f) (apply (lambda (g$3372$18647) g$3372$18647) g$3372$18643) ((lambda (g$3372$18649) ((lambda (g$3372$18651) (if (if g$3372$18651 (begin '#f (apply (lambda (g$3372$18653) '#t) g$3372$18651)) '#f) (apply (lambda (g$3372$18655) (g$3372$18205 g$3372$18655)) g$3372$18651) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18649 '())))) ((lambda (g$3372$18657) (if (g$3372$13212 g$3372$18657) (begin '#f ((lambda (g$3372$18659) (if g$3372$18659 (begin '#f ((lambda (g$3372$18661) (if g$3372$18661 (begin '#f (append g$3372$18659 g$3372$18661)) '#f)) ((lambda (g$3372$18663) (list g$3372$18663)) (g$3372$13224 g$3372$18657)))) '#f)) ((lambda (g$3372$18665) '()) (g$3372$13220 g$3372$18657)))) '#f)) g$3372$18649))) g$3372$18641))) ((lambda (g$3372$18667) (if (g$3372$13212 g$3372$18667) (begin '#f ((lambda (g$3372$18669) (if g$3372$18669 (begin '#f ((lambda (g$3372$18671) (if g$3372$18671 (begin '#f (append g$3372$18669 g$3372$18671)) '#f)) ((lambda (g$3372$18673) '()) (g$3372$13224 g$3372$18667)))) '#f)) ((lambda (g$3372$18675) (if (g$3372$13212 g$3372$18675) (begin '#f ((lambda (g$3372$18677) (if g$3372$18677 (begin '#f ((lambda (g$3372$18679) (if g$3372$18679 (begin '#f (append g$3372$18677 g$3372$18679)) '#f)) ((letrec ((g$3372$18681 (lambda (g$3372$18683) (if (g$3372$13212 g$3372$18683) ((lambda (g$3372$18685) (if g$3372$18685 (begin '#f ((lambda (g$3372$18687) (if g$3372$18687 (begin '#f (map cons g$3372$18685 g$3372$18687)) '#f)) (g$3372$18681 (g$3372$13224 g$3372$18683)))) '#f)) ((lambda (g$3372$18689) (list g$3372$18689)) (g$3372$13220 g$3372$18683))) (if (g$3372$13216 g$3372$18683) (list (begin 'f* '())) '#f))))) g$3372$18681) (g$3372$13224 g$3372$18675)))) '#f)) ((lambda (g$3372$18691) (if (g$3372$13226 g$3372$18691) (if (g$3372$13234 g$3372$18691 (g$3372$13479 'fields)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18675)))) '#f)) (g$3372$13220 g$3372$18667)))) '#f)) g$3372$18641))) g$3372$18637))) ((lambda (g$3372$18693) (if (equal? (g$3372$13246 g$3372$18693) '()) (begin '#f '()) '#f)) g$3372$18637))) g$3372$18635))) (set! g$3372$18207 (lambda (g$3372$18577) (letrec ((g$3372$18579 (lambda (g$3372$18581 g$3372$18582) ((lambda (g$3372$18585) ((lambda (g$3372$18587) (if (if g$3372$18587 (begin '#f (apply (lambda () '#t) g$3372$18587)) '#f) (apply (lambda () '()) g$3372$18587) ((lambda (g$3372$18589) ((lambda (g$3372$18591) (if (if g$3372$18591 (begin '#f (apply (lambda (g$3372$18593) '#t) g$3372$18591)) '#f) (apply (lambda (g$3372$18595) (cons g$3372$18582 (g$3372$18579 g$3372$18595 (+ g$3372$18582 '1)))) g$3372$18591) ((lambda (g$3372$18597) ((lambda (g$3372$18599) (if (if g$3372$18599 (begin '#f (apply (lambda (g$3372$18601) '#t) g$3372$18599)) '#f) (apply (lambda (g$3372$18603) (g$3372$18579 g$3372$18603 (+ g$3372$18582 '1))) g$3372$18599) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18597 '())))) ((lambda (g$3372$18605) (if (g$3372$13212 g$3372$18605) (begin '#f ((lambda (g$3372$18607) (if g$3372$18607 (begin '#f ((lambda (g$3372$18609) (if g$3372$18609 (begin '#f (append g$3372$18607 g$3372$18609)) '#f)) ((lambda (g$3372$18611) (list g$3372$18611)) (g$3372$13224 g$3372$18605)))) '#f)) ((lambda (g$3372$18613) '()) (g$3372$13220 g$3372$18605)))) '#f)) g$3372$18597))) g$3372$18589))) ((lambda (g$3372$18615) (if (g$3372$13212 g$3372$18615) (begin '#f ((lambda (g$3372$18617) (if g$3372$18617 (begin '#f ((lambda (g$3372$18619) (if g$3372$18619 (begin '#f (append g$3372$18617 g$3372$18619)) '#f)) ((lambda (g$3372$18621) (list g$3372$18621)) (g$3372$13224 g$3372$18615)))) '#f)) ((lambda (g$3372$18623) (if (g$3372$13212 g$3372$18623) (begin '#f ((lambda (g$3372$18625) (if g$3372$18625 (begin '#f ((lambda (g$3372$18627) (if g$3372$18627 (begin '#f (append g$3372$18625 g$3372$18627)) '#f)) ((lambda (g$3372$18629) '()) (g$3372$13224 g$3372$18623)))) '#f)) ((lambda (g$3372$18631) (if (g$3372$13226 g$3372$18631) (if (g$3372$13234 g$3372$18631 (g$3372$13479 'mutable)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18623)))) '#f)) (g$3372$13220 g$3372$18615)))) '#f)) g$3372$18589))) g$3372$18585))) ((lambda (g$3372$18633) (if (equal? (g$3372$13246 g$3372$18633) '()) (begin '#f '()) '#f)) g$3372$18585))) g$3372$18581)))) (g$3372$18579 g$3372$18577 '0)))) (set! g$3372$18209 (lambda (g$3372$18439 g$3372$18440 g$3372$18441) ((lambda (g$3372$18445) (begin (set! g$3372$18445 (lambda (g$3372$18447) (g$3372$13706 g$3372$18441 (string->symbol (string-append '"set-" (symbol->string (g$3372$13708 g$3372$18439)) '"-" (symbol->string (g$3372$13708 g$3372$18447)) '"!"))))) (letrec ((g$3372$18449 (lambda (g$3372$18451) ((lambda (g$3372$18453) ((lambda (g$3372$18455) (if (if g$3372$18455 (begin '#f (apply (lambda () '#t) g$3372$18455)) '#f) (apply (lambda () '()) g$3372$18455) ((lambda (g$3372$18457) ((lambda (g$3372$18459) (if (if g$3372$18459 (begin '#f (apply (lambda (g$3372$18461 g$3372$18462 g$3372$18463 g$3372$18464) '#t) g$3372$18459)) '#f) (apply (lambda (g$3372$18469 g$3372$18470 g$3372$18471 g$3372$18472) (cons g$3372$18471 (g$3372$18449 g$3372$18472))) g$3372$18459) ((lambda (g$3372$18477) ((lambda (g$3372$18479) (if (if g$3372$18479 (begin '#f (apply (lambda (g$3372$18481 g$3372$18482) '#t) g$3372$18479)) '#f) (apply (lambda (g$3372$18485 g$3372$18486) (cons (g$3372$18445 g$3372$18485) (g$3372$18449 g$3372$18486))) g$3372$18479) ((lambda (g$3372$18489) ((lambda (g$3372$18491) (if (if g$3372$18491 (begin '#f (apply (lambda (g$3372$18493) '#t) g$3372$18491)) '#f) (apply (lambda (g$3372$18495) (g$3372$18449 g$3372$18495)) g$3372$18491) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18489 '())))) ((lambda (g$3372$18497) (if (g$3372$13212 g$3372$18497) (begin '#f ((lambda (g$3372$18499) (if g$3372$18499 (begin '#f ((lambda (g$3372$18501) (if g$3372$18501 (begin '#f (append g$3372$18499 g$3372$18501)) '#f)) ((lambda (g$3372$18503) (list g$3372$18503)) (g$3372$13224 g$3372$18497)))) '#f)) ((lambda (g$3372$18505) '()) (g$3372$13220 g$3372$18497)))) '#f)) g$3372$18489))) g$3372$18477))) ((lambda (g$3372$18507) (if (g$3372$13212 g$3372$18507) (begin '#f ((lambda (g$3372$18509) (if g$3372$18509 (begin '#f ((lambda (g$3372$18511) (if g$3372$18511 (begin '#f (append g$3372$18509 g$3372$18511)) '#f)) ((lambda (g$3372$18513) (list g$3372$18513)) (g$3372$13224 g$3372$18507)))) '#f)) ((lambda (g$3372$18515) (if (g$3372$13212 g$3372$18515) (begin '#f ((lambda (g$3372$18517) (if g$3372$18517 (begin '#f ((lambda (g$3372$18519) (if g$3372$18519 (begin '#f (append g$3372$18517 g$3372$18519)) '#f)) ((lambda (g$3372$18521) (if (g$3372$13212 g$3372$18521) (begin '#f ((lambda (g$3372$18523) (if g$3372$18523 (begin '#f ((lambda (g$3372$18525) (if g$3372$18525 (begin '#f (append g$3372$18523 g$3372$18525)) '#f)) ((lambda (g$3372$18527) (if (equal? (g$3372$13246 g$3372$18527) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18521)))) '#f)) ((lambda (g$3372$18529) (list g$3372$18529)) (g$3372$13220 g$3372$18521)))) '#f)) (g$3372$13224 g$3372$18515)))) '#f)) ((lambda (g$3372$18531) (if (g$3372$13226 g$3372$18531) (if (g$3372$13234 g$3372$18531 (g$3372$13479 'mutable)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18515)))) '#f)) (g$3372$13220 g$3372$18507)))) '#f)) g$3372$18477))) g$3372$18457))) ((lambda (g$3372$18533) (if (g$3372$13212 g$3372$18533) (begin '#f ((lambda (g$3372$18535) (if g$3372$18535 (begin '#f ((lambda (g$3372$18537) (if g$3372$18537 (begin '#f (append g$3372$18535 g$3372$18537)) '#f)) ((lambda (g$3372$18539) (list g$3372$18539)) (g$3372$13224 g$3372$18533)))) '#f)) ((lambda (g$3372$18541) (if (g$3372$13212 g$3372$18541) (begin '#f ((lambda (g$3372$18543) (if g$3372$18543 (begin '#f ((lambda (g$3372$18545) (if g$3372$18545 (begin '#f (append g$3372$18543 g$3372$18545)) '#f)) ((lambda (g$3372$18547) (if (g$3372$13212 g$3372$18547) (begin '#f ((lambda (g$3372$18549) (if g$3372$18549 (begin '#f ((lambda (g$3372$18551) (if g$3372$18551 (begin '#f (append g$3372$18549 g$3372$18551)) '#f)) ((lambda (g$3372$18553) (if (g$3372$13212 g$3372$18553) (begin '#f ((lambda (g$3372$18555) (if g$3372$18555 (begin '#f ((lambda (g$3372$18557) (if g$3372$18557 (begin '#f (append g$3372$18555 g$3372$18557)) '#f)) ((lambda (g$3372$18559) (if (g$3372$13212 g$3372$18559) (begin '#f ((lambda (g$3372$18561) (if g$3372$18561 (begin '#f ((lambda (g$3372$18563) (if g$3372$18563 (begin '#f (append g$3372$18561 g$3372$18563)) '#f)) ((lambda (g$3372$18565) (if (equal? (g$3372$13246 g$3372$18565) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18559)))) '#f)) ((lambda (g$3372$18567) (list g$3372$18567)) (g$3372$13220 g$3372$18559)))) '#f)) (g$3372$13224 g$3372$18553)))) '#f)) ((lambda (g$3372$18569) (list g$3372$18569)) (g$3372$13220 g$3372$18553)))) '#f)) (g$3372$13224 g$3372$18547)))) '#f)) ((lambda (g$3372$18571) (list g$3372$18571)) (g$3372$13220 g$3372$18547)))) '#f)) (g$3372$13224 g$3372$18541)))) '#f)) ((lambda (g$3372$18573) (if (g$3372$13226 g$3372$18573) (if (g$3372$13234 g$3372$18573 (g$3372$13479 'mutable)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18541)))) '#f)) (g$3372$13220 g$3372$18533)))) '#f)) g$3372$18457))) g$3372$18453))) ((lambda (g$3372$18575) (if (equal? (g$3372$13246 g$3372$18575) '()) (begin '#f '()) '#f)) g$3372$18453))) g$3372$18451)))) (g$3372$18449 g$3372$18440)))) '#f))) (set! g$3372$18211 (lambda (g$3372$18267 g$3372$18268 g$3372$18269) ((lambda (g$3372$18273) (begin (set! g$3372$18273 (lambda (g$3372$18275) (g$3372$13706 g$3372$18269 (string->symbol (string-append (symbol->string (g$3372$13708 g$3372$18267)) '"-" (symbol->string (g$3372$13708 g$3372$18275))))))) (map (lambda (g$3372$18277) ((lambda (g$3372$18279) ((lambda (g$3372$18281) (if (if g$3372$18281 (begin '#f (apply (lambda (g$3372$18283 g$3372$18284 g$3372$18285) (g$3372$13226 g$3372$18284)) g$3372$18281)) '#f) (apply (lambda (g$3372$18289 g$3372$18290 g$3372$18291) g$3372$18290) g$3372$18281) ((lambda (g$3372$18295) ((lambda (g$3372$18297) (if (if g$3372$18297 (begin '#f (apply (lambda (g$3372$18299 g$3372$18300) (g$3372$13226 g$3372$18300)) g$3372$18297)) '#f) (apply (lambda (g$3372$18303 g$3372$18304) g$3372$18304) g$3372$18297) ((lambda (g$3372$18307) ((lambda (g$3372$18309) (if (if g$3372$18309 (begin '#f (apply (lambda (g$3372$18311) (g$3372$13226 g$3372$18311)) g$3372$18309)) '#f) (apply (lambda (g$3372$18313) (g$3372$18273 g$3372$18313)) g$3372$18309) ((lambda (g$3372$18315) ((lambda (g$3372$18317) (if (if g$3372$18317 (begin '#f (apply (lambda (g$3372$18319) (g$3372$13226 g$3372$18319)) g$3372$18317)) '#f) (apply (lambda (g$3372$18321) (g$3372$18273 g$3372$18321)) g$3372$18317) ((lambda (g$3372$18323) ((lambda (g$3372$18325) (if (if g$3372$18325 (begin '#f (apply (lambda (g$3372$18327) (g$3372$13226 g$3372$18327)) g$3372$18325)) '#f) (apply (lambda (g$3372$18329) (g$3372$18273 g$3372$18329)) g$3372$18325) ((lambda (g$3372$18331) ((lambda (g$3372$18333) (if (if g$3372$18333 (begin '#f (apply (lambda (g$3372$18335) '#t) g$3372$18333)) '#f) (apply (lambda (g$3372$18337) (error 'expander '"invalid field spec" (g$3372$13244 g$3372$18277 '()))) g$3372$18333) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$18331 '())))) ((lambda (g$3372$18339) (list g$3372$18339)) g$3372$18331))) g$3372$18323))) ((lambda (g$3372$18341) (list g$3372$18341)) g$3372$18323))) g$3372$18315))) ((lambda (g$3372$18343) (if (g$3372$13212 g$3372$18343) (begin '#f ((lambda (g$3372$18345) (if g$3372$18345 (begin '#f ((lambda (g$3372$18347) (if g$3372$18347 (begin '#f (append g$3372$18345 g$3372$18347)) '#f)) ((lambda (g$3372$18349) (if (g$3372$13212 g$3372$18349) (begin '#f ((lambda (g$3372$18351) (if g$3372$18351 (begin '#f ((lambda (g$3372$18353) (if g$3372$18353 (begin '#f (append g$3372$18351 g$3372$18353)) '#f)) ((lambda (g$3372$18355) (if (equal? (g$3372$13246 g$3372$18355) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18349)))) '#f)) ((lambda (g$3372$18357) (list g$3372$18357)) (g$3372$13220 g$3372$18349)))) '#f)) (g$3372$13224 g$3372$18343)))) '#f)) ((lambda (g$3372$18359) (if (g$3372$13226 g$3372$18359) (if (g$3372$13234 g$3372$18359 (g$3372$13479 'immutable)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18343)))) '#f)) g$3372$18315))) g$3372$18307))) ((lambda (g$3372$18361) (if (g$3372$13212 g$3372$18361) (begin '#f ((lambda (g$3372$18363) (if g$3372$18363 (begin '#f ((lambda (g$3372$18365) (if g$3372$18365 (begin '#f (append g$3372$18363 g$3372$18365)) '#f)) ((lambda (g$3372$18367) (if (g$3372$13212 g$3372$18367) (begin '#f ((lambda (g$3372$18369) (if g$3372$18369 (begin '#f ((lambda (g$3372$18371) (if g$3372$18371 (begin '#f (append g$3372$18369 g$3372$18371)) '#f)) ((lambda (g$3372$18373) (if (equal? (g$3372$13246 g$3372$18373) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18367)))) '#f)) ((lambda (g$3372$18375) (list g$3372$18375)) (g$3372$13220 g$3372$18367)))) '#f)) (g$3372$13224 g$3372$18361)))) '#f)) ((lambda (g$3372$18377) (if (g$3372$13226 g$3372$18377) (if (g$3372$13234 g$3372$18377 (g$3372$13479 'mutable)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18361)))) '#f)) g$3372$18307))) g$3372$18295))) ((lambda (g$3372$18379) (if (g$3372$13212 g$3372$18379) (begin '#f ((lambda (g$3372$18381) (if g$3372$18381 (begin '#f ((lambda (g$3372$18383) (if g$3372$18383 (begin '#f (append g$3372$18381 g$3372$18383)) '#f)) ((lambda (g$3372$18385) (if (g$3372$13212 g$3372$18385) (begin '#f ((lambda (g$3372$18387) (if g$3372$18387 (begin '#f ((lambda (g$3372$18389) (if g$3372$18389 (begin '#f (append g$3372$18387 g$3372$18389)) '#f)) ((lambda (g$3372$18391) (if (g$3372$13212 g$3372$18391) (begin '#f ((lambda (g$3372$18393) (if g$3372$18393 (begin '#f ((lambda (g$3372$18395) (if g$3372$18395 (begin '#f (append g$3372$18393 g$3372$18395)) '#f)) ((lambda (g$3372$18397) (if (equal? (g$3372$13246 g$3372$18397) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18391)))) '#f)) ((lambda (g$3372$18399) (list g$3372$18399)) (g$3372$13220 g$3372$18391)))) '#f)) (g$3372$13224 g$3372$18385)))) '#f)) ((lambda (g$3372$18401) (list g$3372$18401)) (g$3372$13220 g$3372$18385)))) '#f)) (g$3372$13224 g$3372$18379)))) '#f)) ((lambda (g$3372$18403) (if (g$3372$13226 g$3372$18403) (if (g$3372$13234 g$3372$18403 (g$3372$13479 'immutable)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18379)))) '#f)) g$3372$18295))) g$3372$18279))) ((lambda (g$3372$18405) (if (g$3372$13212 g$3372$18405) (begin '#f ((lambda (g$3372$18407) (if g$3372$18407 (begin '#f ((lambda (g$3372$18409) (if g$3372$18409 (begin '#f (append g$3372$18407 g$3372$18409)) '#f)) ((lambda (g$3372$18411) (if (g$3372$13212 g$3372$18411) (begin '#f ((lambda (g$3372$18413) (if g$3372$18413 (begin '#f ((lambda (g$3372$18415) (if g$3372$18415 (begin '#f (append g$3372$18413 g$3372$18415)) '#f)) ((lambda (g$3372$18417) (if (g$3372$13212 g$3372$18417) (begin '#f ((lambda (g$3372$18419) (if g$3372$18419 (begin '#f ((lambda (g$3372$18421) (if g$3372$18421 (begin '#f (append g$3372$18419 g$3372$18421)) '#f)) ((lambda (g$3372$18423) (if (g$3372$13212 g$3372$18423) (begin '#f ((lambda (g$3372$18425) (if g$3372$18425 (begin '#f ((lambda (g$3372$18427) (if g$3372$18427 (begin '#f (append g$3372$18425 g$3372$18427)) '#f)) ((lambda (g$3372$18429) (if (equal? (g$3372$13246 g$3372$18429) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$18423)))) '#f)) ((lambda (g$3372$18431) (list g$3372$18431)) (g$3372$13220 g$3372$18423)))) '#f)) (g$3372$13224 g$3372$18417)))) '#f)) ((lambda (g$3372$18433) (list g$3372$18433)) (g$3372$13220 g$3372$18417)))) '#f)) (g$3372$13224 g$3372$18411)))) '#f)) ((lambda (g$3372$18435) (list g$3372$18435)) (g$3372$13220 g$3372$18411)))) '#f)) (g$3372$13224 g$3372$18405)))) '#f)) ((lambda (g$3372$18437) (if (g$3372$13226 g$3372$18437) (if (g$3372$13234 g$3372$18437 (g$3372$13479 'mutable)) (begin '#f '()) '#f) '#f)) (g$3372$13220 g$3372$18405)))) '#f)) g$3372$18279))) g$3372$18277)) g$3372$18268))) '#f))) (set! g$3372$18213 (lambda (g$3372$18259) (letrec ((g$3372$18261 (lambda (g$3372$18263 g$3372$18264) (if (null? g$3372$18263) '() (cons g$3372$18264 (g$3372$18261 (cdr g$3372$18263) (+ g$3372$18264 '1))))))) (g$3372$18261 g$3372$18259 '0)))) (set! g$3372$18215 (lambda (g$3372$18217 g$3372$18218 g$3372$18219) ((lambda (g$3372$18223) ((lambda (g$3372$18225) ((lambda (g$3372$18227) ((lambda (g$3372$18229) ((lambda (g$3372$18231) ((lambda (g$3372$18233) ((lambda (g$3372$18235) ((lambda (g$3372$18237) ((lambda (g$3372$18239) ((lambda (g$3372$18241) ((lambda (g$3372$18243) ((lambda (g$3372$18245) ((lambda (g$3372$18247) ((lambda (g$3372$18249) ((lambda () (g$3372$13513 (cons 'begin (cons (list 'define g$3372$18225 g$3372$18245) (cons (list 'define g$3372$18229 g$3372$18249) (cons (list 'define g$3372$18227 g$3372$18247) (cons (list 'define-syntax g$3372$18223 (list 'list ''$rtd (list 'syntax g$3372$18225) (list 'syntax g$3372$18227))) (cons (list 'define g$3372$18243 (list 'record-predicate g$3372$18225)) (cons (list 'define g$3372$18231 (list 'record-constructor g$3372$18227)) (append (map (lambda (g$3372$18251 g$3372$18252) (list 'define g$3372$18251 (list 'record-accessor g$3372$18225 g$3372$18252))) g$3372$18237 g$3372$18235) (map (lambda (g$3372$18255 g$3372$18256) (list 'define g$3372$18255 (list 'record-mutator g$3372$18225 g$3372$18256))) g$3372$18239 g$3372$18241))))))))))))) (g$3372$18203 g$3372$18219))) (g$3372$18201 g$3372$18219 g$3372$18225 g$3372$18229))) (g$3372$18199 g$3372$18217 g$3372$18223 g$3372$18219))) (g$3372$18195 g$3372$18218 g$3372$18217))) (g$3372$18207 g$3372$18233))) (g$3372$18209 g$3372$18223 g$3372$18233 g$3372$18217))) (g$3372$18211 g$3372$18223 g$3372$18233 g$3372$18217))) (g$3372$18213 g$3372$18233))) (g$3372$18205 g$3372$18219))) (g$3372$18193 g$3372$18218 g$3372$18217))) (gensym))) (gensym))) (gensym))) (g$3372$18191 g$3372$18218)))) ((lambda (g$3372$19243) ((lambda (g$3372$19245) (if (if g$3372$19245 (begin '#f (apply (lambda (g$3372$19247 g$3372$19248 g$3372$19249) '#t) g$3372$19245)) '#f) (apply (lambda (g$3372$19253 g$3372$19254 g$3372$19255) (g$3372$18215 g$3372$19253 g$3372$19254 g$3372$19255)) g$3372$19245) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$19243 '())))) ((lambda (g$3372$19259) (if (g$3372$13212 g$3372$19259) (begin '#f ((lambda (g$3372$19261) (if g$3372$19261 (begin '#f ((lambda (g$3372$19263) (if g$3372$19263 (begin '#f (append g$3372$19261 g$3372$19263)) '#f)) ((lambda (g$3372$19265) (if (g$3372$13212 g$3372$19265) (begin '#f ((lambda (g$3372$19267) (if g$3372$19267 (begin '#f ((lambda (g$3372$19269) (if g$3372$19269 (begin '#f (append g$3372$19267 g$3372$19269)) '#f)) ((letrec ((g$3372$19271 (lambda (g$3372$19273) (if (g$3372$13212 g$3372$19273) ((lambda (g$3372$19275) (if g$3372$19275 (begin '#f ((lambda (g$3372$19277) (if g$3372$19277 (begin '#f (map cons g$3372$19275 g$3372$19277)) '#f)) (g$3372$19271 (g$3372$13224 g$3372$19273)))) '#f)) ((lambda (g$3372$19279) (list g$3372$19279)) (g$3372$13220 g$3372$19273))) (if (g$3372$13216 g$3372$19273) (list (begin 'clause* '())) '#f))))) g$3372$19271) (g$3372$13224 g$3372$19265)))) '#f)) ((lambda (g$3372$19281) (list g$3372$19281)) (g$3372$13220 g$3372$19265)))) '#f)) (g$3372$13224 g$3372$19259)))) '#f)) ((lambda (g$3372$19283) (list g$3372$19283)) (g$3372$13220 g$3372$19259)))) '#f)) g$3372$19243))) g$3372$18187))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$3372$13559 (lambda (g$3372$19285) ((lambda (g$3372$19287) (begin (set! g$3372$19287 (lambda (g$3372$19289 g$3372$19290) (g$3372$13706 g$3372$19289 (string->symbol (string-append (symbol->string (g$3372$13708 g$3372$19289)) g$3372$19290))))) ((lambda (g$3372$19293) ((lambda (g$3372$19295) (if (if g$3372$19295 (begin '#f (apply (lambda (g$3372$19297 g$3372$19298 g$3372$19299 g$3372$19300 g$3372$19301 g$3372$19302 g$3372$19303) (if (g$3372$13226 g$3372$19298) (if (g$3372$13226 g$3372$19299) (if (g$3372$13226 g$3372$19300) (if (g$3372$13226 g$3372$19301) (if (for-all g$3372$13226 g$3372$19302) (begin '#f (for-all g$3372$13226 g$3372$19303)) '#f) '#f) '#f) '#f) '#f)) g$3372$19295)) '#f) (apply (lambda (g$3372$19311 g$3372$19312 g$3372$19313 g$3372$19314 g$3372$19315 g$3372$19316 g$3372$19317) ((lambda (g$3372$19325) (g$3372$13513 (cons 'begin (cons (cons 'define-record-type (cons (list g$3372$19312 g$3372$19314 (gensym)) (cons (list 'parent g$3372$19313) (cons (cons 'fields (map (lambda (g$3372$19327 g$3372$19328) (list 'immutable g$3372$19327 g$3372$19328)) g$3372$19316 g$3372$19325)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g$3372$19315 (list 'condition-predicate (list 'record-type-descriptor g$3372$19312))) (map (lambda (g$3372$19331 g$3372$19332) (list 'define g$3372$19331 (list 'condition-accessor (list 'record-type-descriptor g$3372$19312) g$3372$19332))) g$3372$19317 g$3372$19325)))))) (map (lambda (g$3372$19335) (gensym)) g$3372$19317))) g$3372$19295) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$19293 '())))) ((lambda (g$3372$19337) (if (g$3372$13212 g$3372$19337) (begin '#f ((lambda (g$3372$19339) (if g$3372$19339 (begin '#f ((lambda (g$3372$19341) (if g$3372$19341 (begin '#f (append g$3372$19339 g$3372$19341)) '#f)) ((lambda (g$3372$19343) (if (g$3372$13212 g$3372$19343) (begin '#f ((lambda (g$3372$19345) (if g$3372$19345 (begin '#f ((lambda (g$3372$19347) (if g$3372$19347 (begin '#f (append g$3372$19345 g$3372$19347)) '#f)) ((lambda (g$3372$19349) (if (g$3372$13212 g$3372$19349) (begin '#f ((lambda (g$3372$19351) (if g$3372$19351 (begin '#f ((lambda (g$3372$19353) (if g$3372$19353 (begin '#f (append g$3372$19351 g$3372$19353)) '#f)) ((lambda (g$3372$19355) (if (g$3372$13212 g$3372$19355) (begin '#f ((lambda (g$3372$19357) (if g$3372$19357 (begin '#f ((lambda (g$3372$19359) (if g$3372$19359 (begin '#f (append g$3372$19357 g$3372$19359)) '#f)) ((lambda (g$3372$19361) (if (g$3372$13212 g$3372$19361) (begin '#f ((lambda (g$3372$19363) (if g$3372$19363 (begin '#f ((lambda (g$3372$19365) (if g$3372$19365 (begin '#f (append g$3372$19363 g$3372$19365)) '#f)) ((letrec ((g$3372$19367 (lambda (g$3372$19369) (if (g$3372$13212 g$3372$19369) ((lambda (g$3372$19371) (if g$3372$19371 (begin '#f ((lambda (g$3372$19373) (if g$3372$19373 (begin '#f (map cons g$3372$19371 g$3372$19373)) '#f)) (g$3372$19367 (g$3372$13224 g$3372$19369)))) '#f)) ((lambda (g$3372$19375) (if (g$3372$13212 g$3372$19375) (begin '#f ((lambda (g$3372$19377) (if g$3372$19377 (begin '#f ((lambda (g$3372$19379) (if g$3372$19379 (begin '#f (append g$3372$19377 g$3372$19379)) '#f)) ((lambda (g$3372$19381) (if (g$3372$13212 g$3372$19381) (begin '#f ((lambda (g$3372$19383) (if g$3372$19383 (begin '#f ((lambda (g$3372$19385) (if g$3372$19385 (begin '#f (append g$3372$19383 g$3372$19385)) '#f)) ((lambda (g$3372$19387) (if (equal? (g$3372$13246 g$3372$19387) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$19381)))) '#f)) ((lambda (g$3372$19389) (list g$3372$19389)) (g$3372$13220 g$3372$19381)))) '#f)) (g$3372$13224 g$3372$19375)))) '#f)) ((lambda (g$3372$19391) (list g$3372$19391)) (g$3372$13220 g$3372$19375)))) '#f)) (g$3372$13220 g$3372$19369))) (if (g$3372$13216 g$3372$19369) (list (begin 'field* '()) (begin 'accessor* '())) '#f))))) g$3372$19367) (g$3372$13224 g$3372$19361)))) '#f)) ((lambda (g$3372$19393) (list g$3372$19393)) (g$3372$13220 g$3372$19361)))) '#f)) (g$3372$13224 g$3372$19355)))) '#f)) ((lambda (g$3372$19395) (list g$3372$19395)) (g$3372$13220 g$3372$19355)))) '#f)) (g$3372$13224 g$3372$19349)))) '#f)) ((lambda (g$3372$19397) (list g$3372$19397)) (g$3372$13220 g$3372$19349)))) '#f)) (g$3372$13224 g$3372$19343)))) '#f)) ((lambda (g$3372$19399) (list g$3372$19399)) (g$3372$13220 g$3372$19343)))) '#f)) (g$3372$13224 g$3372$19337)))) '#f)) ((lambda (g$3372$19401) (list g$3372$19401)) (g$3372$13220 g$3372$19337)))) '#f)) g$3372$19293))) g$3372$19285))) '#f))) (set! g$3372$13561 (lambda (g$3372$19403) (error 'expander '"incorrect usage of auxilary keyword" (g$3372$13244 g$3372$19403 '())))) (set! g$3372$13563 (lambda (g$3372$19405 g$3372$19406 g$3372$19407) ((lambda (g$3372$19411) ((lambda (g$3372$19413) (if (if g$3372$19413 (begin '#f (apply (lambda (g$3372$19415 g$3372$19416) '#t) g$3372$19413)) '#f) (apply (lambda (g$3372$19419 g$3372$19420) (g$3372$13613 (cons g$3372$19419 g$3372$19420) g$3372$19406 g$3372$19407)) g$3372$19413) ((lambda (g$3372$19423) ((lambda (g$3372$19425) (if (if g$3372$19425 (begin '#f (apply (lambda (g$3372$19427 g$3372$19428 g$3372$19429 g$3372$19430) '#t) g$3372$19425)) '#f) (apply (lambda (g$3372$19435 g$3372$19436 g$3372$19437 g$3372$19438) ((lambda (g$3372$19443 g$3372$19444 g$3372$19445 g$3372$19446) (g$3372$13113 '#f (append g$3372$19443 g$3372$19444) (append (g$3372$13593 g$3372$19435 g$3372$19406 g$3372$19407) (g$3372$13593 g$3372$19436 g$3372$19406 g$3372$19407)) (g$3372$13113 '#f (list g$3372$19446) (list (g$3372$13115 '#f '() (g$3372$13109 '#f (map (lambda (g$3372$19451 g$3372$19452 g$3372$19453) (g$3372$13113 '#f (list g$3372$19451) (list (list g$3372$19452)) (g$3372$13109 '#f (list (list g$3372$19452 g$3372$19453) (list 'set! g$3372$19453 g$3372$19451))))) g$3372$19445 g$3372$19443 g$3372$19444)))) (list '(primitive dynamic-wind) g$3372$19446 (g$3372$13115 '#f '() (g$3372$13613 (cons g$3372$19437 g$3372$19438) g$3372$19406 g$3372$19407)) g$3372$19446)))) (map (lambda (g$3372$19457) (g$3372$13136 'lhs)) g$3372$19435) (map (lambda (g$3372$19459) (g$3372$13136 'rhs)) g$3372$19435) (map (lambda (g$3372$19461) (g$3372$13136 't)) g$3372$19435) (g$3372$13136 'swap))) g$3372$19425) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$19423 '())))) ((lambda (g$3372$19463) (if (g$3372$13212 g$3372$19463) (begin '#f ((lambda (g$3372$19465) (if g$3372$19465 (begin '#f ((lambda (g$3372$19467) (if g$3372$19467 (begin '#f (append g$3372$19465 g$3372$19467)) '#f)) ((lambda (g$3372$19469) (if (g$3372$13212 g$3372$19469) (begin '#f ((lambda (g$3372$19471) (if g$3372$19471 (begin '#f ((lambda (g$3372$19473) (if g$3372$19473 (begin '#f (append g$3372$19471 g$3372$19473)) '#f)) ((lambda (g$3372$19475) (if (g$3372$13212 g$3372$19475) (begin '#f ((lambda (g$3372$19477) (if g$3372$19477 (begin '#f ((lambda (g$3372$19479) (if g$3372$19479 (begin '#f (append g$3372$19477 g$3372$19479)) '#f)) ((letrec ((g$3372$19481 (lambda (g$3372$19483) (if (g$3372$13212 g$3372$19483) ((lambda (g$3372$19485) (if g$3372$19485 (begin '#f ((lambda (g$3372$19487) (if g$3372$19487 (begin '#f (map cons g$3372$19485 g$3372$19487)) '#f)) (g$3372$19481 (g$3372$13224 g$3372$19483)))) '#f)) ((lambda (g$3372$19489) (list g$3372$19489)) (g$3372$13220 g$3372$19483))) (if (g$3372$13216 g$3372$19483) (list (begin 'b* '())) '#f))))) g$3372$19481) (g$3372$13224 g$3372$19475)))) '#f)) ((lambda (g$3372$19491) (list g$3372$19491)) (g$3372$13220 g$3372$19475)))) '#f)) (g$3372$13224 g$3372$19469)))) '#f)) ((letrec ((g$3372$19493 (lambda (g$3372$19495) (if (g$3372$13212 g$3372$19495) ((lambda (g$3372$19497) (if g$3372$19497 (begin '#f ((lambda (g$3372$19499) (if g$3372$19499 (begin '#f (map cons g$3372$19497 g$3372$19499)) '#f)) (g$3372$19493 (g$3372$13224 g$3372$19495)))) '#f)) ((lambda (g$3372$19501) (if (g$3372$13212 g$3372$19501) (begin '#f ((lambda (g$3372$19503) (if g$3372$19503 (begin '#f ((lambda (g$3372$19505) (if g$3372$19505 (begin '#f (append g$3372$19503 g$3372$19505)) '#f)) ((lambda (g$3372$19507) (if (g$3372$13212 g$3372$19507) (begin '#f ((lambda (g$3372$19509) (if g$3372$19509 (begin '#f ((lambda (g$3372$19511) (if g$3372$19511 (begin '#f (append g$3372$19509 g$3372$19511)) '#f)) ((lambda (g$3372$19513) (if (equal? (g$3372$13246 g$3372$19513) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$19507)))) '#f)) ((lambda (g$3372$19515) (list g$3372$19515)) (g$3372$13220 g$3372$19507)))) '#f)) (g$3372$13224 g$3372$19501)))) '#f)) ((lambda (g$3372$19517) (list g$3372$19517)) (g$3372$13220 g$3372$19501)))) '#f)) (g$3372$13220 g$3372$19495))) (if (g$3372$13216 g$3372$19495) (list (begin 'olhs* '()) (begin 'orhs* '())) '#f))))) g$3372$19493) (g$3372$13220 g$3372$19469)))) '#f)) (g$3372$13224 g$3372$19463)))) '#f)) ((lambda (g$3372$19519) '()) (g$3372$13220 g$3372$19463)))) '#f)) g$3372$19423))) g$3372$19411))) ((lambda (g$3372$19521) (if (g$3372$13212 g$3372$19521) (begin '#f ((lambda (g$3372$19523) (if g$3372$19523 (begin '#f ((lambda (g$3372$19525) (if g$3372$19525 (begin '#f (append g$3372$19523 g$3372$19525)) '#f)) ((lambda (g$3372$19527) (if (g$3372$13212 g$3372$19527) (begin '#f ((lambda (g$3372$19529) (if g$3372$19529 (begin '#f ((lambda (g$3372$19531) (if g$3372$19531 (begin '#f (append g$3372$19529 g$3372$19531)) '#f)) ((lambda (g$3372$19533) (if (g$3372$13212 g$3372$19533) (begin '#f ((lambda (g$3372$19535) (if g$3372$19535 (begin '#f ((lambda (g$3372$19537) (if g$3372$19537 (begin '#f (append g$3372$19535 g$3372$19537)) '#f)) ((letrec ((g$3372$19539 (lambda (g$3372$19541) (if (g$3372$13212 g$3372$19541) ((lambda (g$3372$19543) (if g$3372$19543 (begin '#f ((lambda (g$3372$19545) (if g$3372$19545 (begin '#f (map cons g$3372$19543 g$3372$19545)) '#f)) (g$3372$19539 (g$3372$13224 g$3372$19541)))) '#f)) ((lambda (g$3372$19547) (list g$3372$19547)) (g$3372$13220 g$3372$19541))) (if (g$3372$13216 g$3372$19541) (list (begin 'b* '())) '#f))))) g$3372$19539) (g$3372$13224 g$3372$19533)))) '#f)) ((lambda (g$3372$19549) (list g$3372$19549)) (g$3372$13220 g$3372$19533)))) '#f)) (g$3372$13224 g$3372$19527)))) '#f)) ((lambda (g$3372$19551) (if (equal? (g$3372$13246 g$3372$19551) '()) (begin '#f '()) '#f)) (g$3372$13220 g$3372$19527)))) '#f)) (g$3372$13224 g$3372$19521)))) '#f)) ((lambda (g$3372$19553) '()) (g$3372$13220 g$3372$19521)))) '#f)) g$3372$19411))) g$3372$19405))) (set! g$3372$13565 (lambda (g$3372$19555 g$3372$19556 g$3372$19557) ((lambda (g$3372$19561) ((lambda (g$3372$19563) (if (if g$3372$19563 (begin '#f (apply (lambda (g$3372$19565 g$3372$19566) '#t) g$3372$19563)) '#f) (apply (lambda (g$3372$19569 g$3372$19570) (cons 'foreign-call (cons (g$3372$13597 g$3372$19569 g$3372$19556 g$3372$19557) (g$3372$13593 g$3372$19570 g$3372$19556 g$3372$19557)))) g$3372$19563) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$19561 '())))) ((lambda (g$3372$19573) (if (g$3372$13212 g$3372$19573) (begin '#f ((lambda (g$3372$19575) (if g$3372$19575 (begin '#f ((lambda (g$3372$19577) (if g$3372$19577 (begin '#f (append g$3372$19575 g$3372$19577)) '#f)) ((lambda (g$3372$19579) (if (g$3372$13212 g$3372$19579) (begin '#f ((lambda (g$3372$19581) (if g$3372$19581 (begin '#f ((lambda (g$3372$19583) (if g$3372$19583 (begin '#f (append g$3372$19581 g$3372$19583)) '#f)) ((letrec ((g$3372$19585 (lambda (g$3372$19587) (if (g$3372$13212 g$3372$19587) ((lambda (g$3372$19589) (if g$3372$19589 (begin '#f ((lambda (g$3372$19591) (if g$3372$19591 (begin '#f (map cons g$3372$19589 g$3372$19591)) '#f)) (g$3372$19585 (g$3372$13224 g$3372$19587)))) '#f)) ((lambda (g$3372$19593) (list g$3372$19593)) (g$3372$13220 g$3372$19587))) (if (g$3372$13216 g$3372$19587) (list (begin 'arg* '())) '#f))))) g$3372$19585) (g$3372$13224 g$3372$19579)))) '#f)) ((lambda (g$3372$19595) (list g$3372$19595)) (g$3372$13220 g$3372$19579)))) '#f)) (g$3372$13224 g$3372$19573)))) '#f)) ((lambda (g$3372$19597) '()) (g$3372$13220 g$3372$19573)))) '#f)) g$3372$19561))) g$3372$19555))) (set! g$3372$13567 (lambda (g$3372$19599 g$3372$19600) ((lambda (g$3372$19603 g$3372$19605) (begin (set! g$3372$19603 (lambda (g$3372$19793 g$3372$19794 g$3372$19795) (if (null? g$3372$19793) (values '() g$3372$19795) (call-with-values (lambda () (g$3372$19603 (cdr g$3372$19793) g$3372$19794 g$3372$19795)) (lambda (g$3372$19799 g$3372$19800) (call-with-values (lambda () (g$3372$19605 (car g$3372$19793) g$3372$19794 g$3372$19800)) (lambda (g$3372$19803 g$3372$19804) (values (cons g$3372$19803 g$3372$19799) g$3372$19804)))))))) (set! g$3372$19605 (lambda (g$3372$19607 g$3372$19608 g$3372$19609) ((lambda (g$3372$19613) ((lambda (g$3372$19615) (if (if g$3372$19615 (begin '#f (apply (lambda (g$3372$19617) (g$3372$13226 g$3372$19617)) g$3372$19615)) '#f) (apply (lambda (g$3372$19619) (if (g$3372$13240 g$3372$19607 g$3372$19600) (values (vector 'free-id g$3372$19607) g$3372$19609) (if (g$3372$13234 g$3372$19607 (g$3372$13479 '_)) (values '_ g$3372$19609) (values 'any (cons (cons g$3372$19607 g$3372$19608) g$3372$19609))))) g$3372$19615) ((lambda (g$3372$19621) ((lambda (g$3372$19623) (if (if g$3372$19623 (begin '#f (apply (lambda (g$3372$19625 g$3372$19626) (g$3372$13571 g$3372$19626)) g$3372$19623)) '#f) (apply (lambda (g$3372$19629 g$3372$19630) (call-with-values (lambda () (g$3372$19605 g$3372$19629 (+ g$3372$19608 '1) g$3372$19609)) (lambda (g$3372$19633 g$3372$19634) (values (if (eq? g$3372$19633 'any) 'each-any (vector 'each g$3372$19633)) g$3372$19634)))) g$3372$19623) ((lambda (g$3372$19637) ((lambda (g$3372$19639) (if (if g$3372$19639 (begin '#f (apply (lambda (g$3372$19641 g$3372$19642 g$3372$19643 g$3372$19644) (g$3372$13571 g$3372$19642)) g$3372$19639)) '#f) (apply (lambda (g$3372$19649 g$3372$19650 g$3372$19651 g$3372$19652) (call-with-values (lambda () (g$3372$19605 g$3372$19652 g$3372$19608 g$3372$19609)) (lambda (g$3372$19657 g$3372$19658) (call-with-values (lambda () (g$3372$19603 g$3372$19651 g$3372$19608 g$3372$19658)) (lambda (g$3372$19661 g$3372$19662) (call-with-values (lambda () (g$3372$19605 g$3372$19649 (+ g$3372$19608 '1) g$3372$19662)) (lambda (g$3372$19665 g$3372$19666) (values (vector 'each+ g$3372$19665 (reverse g$3372$19661) g$3372$19657) g$3372$19666)))))))) g$3372$19639) ((lambda (g$3372$19669) ((lambda (g$3372$19671) (if (if g$3372$19671 (begin '#f (apply (lambda (g$3372$19673 g$3372$19674) '#t) g$3372$19671)) '#f) (apply (lambda (g$3372$19677 g$3372$19678) (call-with-values (lambda () (g$3372$19605 g$3372$19678 g$3372$19608 g$3372$19609)) (lambda (g$3372$19681 g$3372$19682) (call-with-values (lambda () (g$3372$19605 g$3372$19677 g$3372$19608 g$3372$19682)) (lambda (g$3372$19685 g$3372$19686) (values (cons g$3372$19685 g$3372$19681) g$3372$19686)))))) g$3372$19671) ((lambda (g$3372$19689) ((lambda (g$3372$19691) (if (if g$3372$19691 (begin '#f (apply (lambda () '#t) g$3372$19691)) '#f) (apply (lambda () (values '() g$3372$19609)) g$3372$19691) ((lambda (g$3372$19693) ((lambda (g$3372$19695) (if (if g$3372$19695 (begin '#f (apply (lambda (g$3372$19697) (not (g$3372$13178 g$3372$19697))) g$3372$19695)) '#f) (apply (lambda (g$3372$19699) (call-with-values (lambda () (g$3372$19605 g$3372$19699 g$3372$19608 g$3372$19609)) (lambda (g$3372$19701 g$3372$19702) (values (vector 'vector g$3372$19701) g$3372$19702)))) g$3372$19695) ((lambda (g$3372$19705) ((lambda (g$3372$19707) (if (if g$3372$19707 (begin '#f (apply (lambda (g$3372$19709) '#t) g$3372$19707)) '#f) (apply (lambda (g$3372$19711) (values (vector 'atom (g$3372$13246 g$3372$19711)) g$3372$19609)) g$3372$19707) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$19705 '())))) ((lambda (g$3372$19713) (list g$3372$19713)) g$3372$19705))) g$3372$19693))) ((lambda (g$3372$19715) (if (g$3372$13214 g$3372$19715) (begin '#f ((letrec ((g$3372$19717 (lambda (g$3372$19719) (if (g$3372$13212 g$3372$19719) ((lambda (g$3372$19721) (if g$3372$19721 (begin '#f ((lambda (g$3372$19723) (if g$3372$19723 (begin '#f (map cons g$3372$19721 g$3372$19723)) '#f)) (g$3372$19717 (g$3372$13224 g$3372$19719)))) '#f)) ((lambda (g$3372$19725) (list g$3372$19725)) (g$3372$13220 g$3372$19719))) (if (g$3372$13216 g$3372$19719) (list (begin 'p '())) '#f))))) g$3372$19717) (g$3372$13210 g$3372$19715))) '#f)) g$3372$19693))) g$3372$19689))) ((lambda (g$3372$19727) (if (equal? (g$3372$13246 g$3372$19727) '()) (begin '#f '()) '#f)) g$3372$19689))) g$3372$19669))) ((lambda (g$3372$19729) (if (g$3372$13212 g$3372$19729) (begin '#f ((lambda (g$3372$19731) (if g$3372$19731 (begin '#f ((lambda (g$3372$19733) (if g$3372$19733 (begin '#f (append g$3372$19731 g$3372$19733)) '#f)) ((lambda (g$3372$19735) (list g$3372$19735)) (g$3372$13224 g$3372$19729)))) '#f)) ((lambda (g$3372$19737) (list g$3372$19737)) (g$3372$13220 g$3372$19729)))) '#f)) g$3372$19669))) g$3372$19637))) ((lambda (g$3372$19739) (if (g$3372$13212 g$3372$19739) (begin '#f ((lambda (g$3372$19741) (if g$3372$19741 (begin '#f ((lambda (g$3372$19743) (if g$3372$19743 (begin '#f (append g$3372$19741 g$3372$19743)) '#f)) ((lambda (g$3372$19745) (if (g$3372$13212 g$3372$19745) (begin '#f ((lambda (g$3372$19747) (if g$3372$19747 (begin '#f ((lambda (g$3372$19749) (if g$3372$19749 (begin '#f (append g$3372$19747 g$3372$19749)) '#f)) ((letrec ((g$3372$19751 (lambda (g$3372$19757) (if (g$3372$13212 g$3372$19757) ((lambda (g$3372$19759) (if g$3372$19759 (begin '#f ((lambda (g$3372$19761) (if g$3372$19761 (begin '#f (cons (map cons g$3372$19759 (car g$3372$19761)) (cdr g$3372$19761))) '#f)) (g$3372$19751 (g$3372$13224 g$3372$19757)))) '#f)) ((lambda (g$3372$19763) (list g$3372$19763)) (g$3372$13220 g$3372$19757))) ((lambda (g$3372$19765) (if g$3372$19765 (begin '#f (cons (list (begin 'ys '())) g$3372$19765)) '#f)) ((lambda (g$3372$19767) (list g$3372$19767)) g$3372$19757)))))) (lambda (g$3372$19753) ((lambda (g$3372$19755) (if g$3372$19755 (begin '#f (append (car g$3372$19755) (cdr g$3372$19755))) '#f)) (g$3372$19751 g$3372$19753)))) (g$3372$13224 g$3372$19745)))) '#f)) ((lambda (g$3372$19769) (list g$3372$19769)) (g$3372$13220 g$3372$19745)))) '#f)) (g$3372$13224 g$3372$19739)))) '#f)) ((lambda (g$3372$19771) (list g$3372$19771)) (g$3372$13220 g$3372$19739)))) '#f)) g$3372$19637))) g$3372$19621))) ((lambda (g$3372$19773) (if (g$3372$13212 g$3372$19773) (begin '#f ((lambda (g$3372$19775) (if g$3372$19775 (begin '#f ((lambda (g$3372$19777) (if g$3372$19777 (begin '#f (append g$3372$19775 g$3372$19777)) '#f)) ((lambda (g$3372$19779) (if (g$3372$13212 g$3372$19779) (begin '#f ((lambda (g$3372$19781) (if g$3372$19781 (begin '#f ((lambda (g$3372$19783) (if g$3372$19783 (begin '#f (append g$3372$19781 g$3372$19783)) '#f)) ((lambda (g$3372$19785) (if (equal? (g$3372$13246 g$3372$19785) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$19779)))) '#f)) ((lambda (g$3372$19787) (list g$3372$19787)) (g$3372$13220 g$3372$19779)))) '#f)) (g$3372$13224 g$3372$19773)))) '#f)) ((lambda (g$3372$19789) (list g$3372$19789)) (g$3372$13220 g$3372$19773)))) '#f)) g$3372$19621))) g$3372$19613))) ((lambda (g$3372$19791) (list g$3372$19791)) g$3372$19613))) g$3372$19607))) (g$3372$19605 g$3372$19599 '0 '()))) '#f '#f))) (set! g$3372$13569 (lambda (g$3372$19807 g$3372$19808) ((lambda (g$3372$19811 g$3372$19813 g$3372$19815 g$3372$19817 g$3372$19819 g$3372$19821 g$3372$19823 g$3372$19825) (begin (set! g$3372$19811 (lambda (g$3372$19933 g$3372$19934 g$3372$19935) (if (if (null? g$3372$19934) (begin '#f (null? g$3372$19935)) '#f) g$3372$19933 (g$3372$13202 g$3372$19933 g$3372$19934 g$3372$19935)))) (set! g$3372$19813 (lambda (g$3372$19917 g$3372$19918 g$3372$19919 g$3372$19920) (if (pair? g$3372$19917) ((lambda (g$3372$19925) (if g$3372$19925 (begin '#f ((lambda (g$3372$19927) (if g$3372$19927 (begin '#f (cons g$3372$19925 g$3372$19927)) '#f)) (g$3372$19813 (cdr g$3372$19917) g$3372$19918 g$3372$19919 g$3372$19920))) '#f)) (g$3372$19825 (car g$3372$19917) g$3372$19918 g$3372$19919 g$3372$19920 '())) (if (null? g$3372$19917) '() (if (g$3372$13178 g$3372$19917) (call-with-values (lambda () (g$3372$13200 g$3372$19919 g$3372$19920 g$3372$19917)) (lambda (g$3372$19929 g$3372$19930) (g$3372$19813 (g$3372$13180 g$3372$19917) g$3372$19918 g$3372$19929 g$3372$19930))) '#f))))) (set! g$3372$19815 (lambda (g$3372$19883 g$3372$19884 g$3372$19885 g$3372$19886 g$3372$19887 g$3372$19888 g$3372$19889) (letrec ((g$3372$19897 (lambda (g$3372$19899 g$3372$19900 g$3372$19901) (if (pair? g$3372$19899) (call-with-values (lambda () (g$3372$19897 (cdr g$3372$19899) g$3372$19900 g$3372$19901)) (lambda (g$3372$19905 g$3372$19906 g$3372$19907) (if g$3372$19907 (if (null? g$3372$19906) ((lambda (g$3372$19911) (if g$3372$19911 (values (cons g$3372$19911 g$3372$19905) g$3372$19906 g$3372$19907) (values '#f '#f '#f))) (g$3372$19825 (car g$3372$19899) g$3372$19884 g$3372$19900 g$3372$19901 '())) (values '() (cdr g$3372$19906) (g$3372$19825 (car g$3372$19899) (car g$3372$19906) g$3372$19900 g$3372$19901 g$3372$19907))) (values '#f '#f '#f)))) (if (g$3372$13178 g$3372$19899) (call-with-values (lambda () (g$3372$13200 g$3372$19900 g$3372$19901 g$3372$19899)) (lambda (g$3372$19913 g$3372$19914) (g$3372$19897 (g$3372$13180 g$3372$19899) g$3372$19913 g$3372$19914))) (values '() g$3372$19885 (g$3372$19825 g$3372$19899 g$3372$19886 g$3372$19900 g$3372$19901 g$3372$19889))))))) (g$3372$19897 g$3372$19883 g$3372$19887 g$3372$19888)))) (set! g$3372$19817 (lambda (g$3372$19871 g$3372$19872 g$3372$19873) (if (pair? g$3372$19871) ((lambda (g$3372$19877) (if g$3372$19877 (begin '#f (cons (g$3372$19811 (car g$3372$19871) g$3372$19872 g$3372$19873) g$3372$19877)) '#f)) (g$3372$19817 (cdr g$3372$19871) g$3372$19872 g$3372$19873)) (if (null? g$3372$19871) '() (if (g$3372$13178 g$3372$19871) (call-with-values (lambda () (g$3372$13200 g$3372$19872 g$3372$19873 g$3372$19871)) (lambda (g$3372$19879 g$3372$19880) (g$3372$19817 (g$3372$13180 g$3372$19871) g$3372$19879 g$3372$19880))) '#f))))) (set! g$3372$19819 (lambda (g$3372$19866 g$3372$19867) (if (null? g$3372$19866) g$3372$19867 (if (eq? g$3372$19866 '_) g$3372$19867 (if (eq? g$3372$19866 'any) (cons '() g$3372$19867) (if (pair? g$3372$19866) (g$3372$19819 (car g$3372$19866) (g$3372$19819 (cdr g$3372$19866) g$3372$19867)) (if (eq? g$3372$19866 'each-any) (cons '() g$3372$19867) ((lambda (g$3372$19870) (if (memv g$3372$19870 '(each)) (g$3372$19819 (vector-ref g$3372$19866 '1) g$3372$19867) (if (memv g$3372$19870 '(each+)) (g$3372$19819 (vector-ref g$3372$19866 '1) (g$3372$19819 (reverse (vector-ref g$3372$19866 '2)) (g$3372$19819 (vector-ref g$3372$19866 '3) g$3372$19867))) (if (memv g$3372$19870 '(free-id atom)) g$3372$19867 (if (memv g$3372$19870 '(vector)) (g$3372$19819 (vector-ref g$3372$19866 '1) g$3372$19867) (error 'syntax-dispatch '"invalid pattern" g$3372$19866)))))) (vector-ref g$3372$19866 '0))))))))) (set! g$3372$19821 (lambda (g$3372$19862 g$3372$19863) (if (null? (car g$3372$19862)) g$3372$19863 (cons (map car g$3372$19862) (g$3372$19821 (map cdr g$3372$19862) g$3372$19863))))) (set! g$3372$19823 (lambda (g$3372$19841 g$3372$19842 g$3372$19843 g$3372$19844 g$3372$19845) (if (null? g$3372$19842) (if (null? g$3372$19841) (begin '#f g$3372$19845) '#f) (if (pair? g$3372$19842) (if (pair? g$3372$19841) (begin '#f (g$3372$19825 (car g$3372$19841) (car g$3372$19842) g$3372$19843 g$3372$19844 (g$3372$19825 (cdr g$3372$19841) (cdr g$3372$19842) g$3372$19843 g$3372$19844 g$3372$19845))) '#f) (if (eq? g$3372$19842 'each-any) ((lambda (g$3372$19851) (if g$3372$19851 (begin '#f (cons g$3372$19851 g$3372$19845)) '#f)) (g$3372$19817 g$3372$19841 g$3372$19843 g$3372$19844)) ((lambda (g$3372$19853) (if (memv g$3372$19853 '(each)) (if (null? g$3372$19841) (g$3372$19819 (vector-ref g$3372$19842 '1) g$3372$19845) ((lambda (g$3372$19860) (if g$3372$19860 (begin '#f (g$3372$19821 g$3372$19860 g$3372$19845)) '#f)) (g$3372$19813 g$3372$19841 (vector-ref g$3372$19842 '1) g$3372$19843 g$3372$19844))) (if (memv g$3372$19853 '(free-id)) (if (symbol? g$3372$19841) (if (g$3372$13234 (g$3372$19811 g$3372$19841 g$3372$19843 g$3372$19844) (vector-ref g$3372$19842 '1)) (begin '#f g$3372$19845) '#f) '#f) (if (memv g$3372$19853 '(each+)) (call-with-values (lambda () (g$3372$19815 g$3372$19841 (vector-ref g$3372$19842 '1) (vector-ref g$3372$19842 '2) (vector-ref g$3372$19842 '3) g$3372$19843 g$3372$19844 g$3372$19845)) (lambda (g$3372$19854 g$3372$19855 g$3372$19856) (if g$3372$19856 (if (null? g$3372$19855) (begin '#f (if (null? g$3372$19854) (g$3372$19819 (vector-ref g$3372$19842 '1) g$3372$19856) (g$3372$19821 g$3372$19854 g$3372$19856))) '#f) '#f))) (if (memv g$3372$19853 '(atom)) (if (equal? (vector-ref g$3372$19842 '1) (g$3372$13244 g$3372$19841 g$3372$19843)) (begin '#f g$3372$19845) '#f) (if (memv g$3372$19853 '(vector)) (if (vector? g$3372$19841) (begin '#f (g$3372$19825 (vector->list g$3372$19841) (vector-ref g$3372$19842 '1) g$3372$19843 g$3372$19844 g$3372$19845)) '#f) (error 'syntax-dispatch '"invalid pattern" g$3372$19842))))))) (vector-ref g$3372$19842 '0))))))) (set! g$3372$19825 (lambda (g$3372$19827 g$3372$19828 g$3372$19829 g$3372$19830 g$3372$19831) (if (not g$3372$19831) '#f (if (eq? g$3372$19828 '_) g$3372$19831 (if (eq? g$3372$19828 'any) (cons (g$3372$19811 g$3372$19827 g$3372$19829 g$3372$19830) g$3372$19831) (if (g$3372$13178 g$3372$19827) (call-with-values (lambda () (g$3372$13200 g$3372$19829 g$3372$19830 g$3372$19827)) (lambda (g$3372$19837 g$3372$19838) (g$3372$19825 (g$3372$13180 g$3372$19827) g$3372$19828 g$3372$19837 g$3372$19838 g$3372$19831))) (g$3372$19823 g$3372$19827 g$3372$19828 g$3372$19829 g$3372$19830 g$3372$19831))))))) (g$3372$19825 g$3372$19807 g$3372$19808 '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$3372$13571 (lambda (g$3372$19939) (if (g$3372$13226 g$3372$19939) (begin '#f (g$3372$13234 g$3372$19939 (g$3372$13479 '|...|))) '#f))) (set! g$3372$13573 ((lambda () ((lambda (g$3372$19941 g$3372$19943 g$3372$19945 g$3372$19947) (begin (set! g$3372$19941 (lambda (g$3372$20081 g$3372$20082 g$3372$20083 g$3372$20084 g$3372$20085) ((lambda (g$3372$20091 g$3372$20092) ((lambda (g$3372$20095 g$3372$20096) ((lambda (g$3372$20099) (list '(primitive apply) (g$3372$13115 '#f g$3372$20096 g$3372$20099) g$3372$20083)) (g$3372$13597 (g$3372$13206 (g$3372$13173 g$3372$20091 g$3372$20095) g$3372$20082) (append (map (lambda (g$3372$20101 g$3372$20102 g$3372$20103) (cons g$3372$20101 (g$3372$13252 'syntax (cons g$3372$20102 g$3372$20103)))) g$3372$20095 g$3372$20096 (map cdr g$3372$20081)) g$3372$20084) g$3372$20085))) (map g$3372$13140 g$3372$20091) (map g$3372$13136 g$3372$20091))) (map car g$3372$20081) (map cdr g$3372$20081)))) (set! g$3372$19943 (lambda (g$3372$20069 g$3372$20070 g$3372$20071) (letrec ((g$3372$20075 (lambda (g$3372$20077 g$3372$20078) (if (null? g$3372$20077) (error 'expander '"invalid syntax" (g$3372$13246 g$3372$20070)) (if (g$3372$13226 (car g$3372$20077)) (if (g$3372$13240 (car g$3372$20077) g$3372$20078) (g$3372$13702 (car g$3372$20077) '"duplicate " g$3372$20071) (g$3372$20075 (cdr g$3372$20077) (cons (car g$3372$20077) g$3372$20078))) (g$3372$13702 (car g$3372$20077) '"invalid " g$3372$20071)))))) (g$3372$20075 g$3372$20069 '())))) (set! g$3372$19945 (lambda (g$3372$20037 g$3372$20038 g$3372$20039 g$3372$20040 g$3372$20041 g$3372$20042 g$3372$20043 g$3372$20044) (call-with-values (lambda () (g$3372$13567 g$3372$20042 g$3372$20038)) (lambda (g$3372$20053 g$3372$20054) (if (not (g$3372$13238 (map car g$3372$20054))) (g$3372$19943 (map car g$3372$20054) g$3372$20042 '"pattern variable") (if (not (for-all (lambda (g$3372$20057) (not (g$3372$13571 (car g$3372$20057)))) g$3372$20054)) (error 'expander '"misplaced ellipsis in syntax-case pattern" (g$3372$13244 g$3372$20042 '())) ((lambda (g$3372$20059) ((lambda (g$3372$20061) ((lambda (g$3372$20063) ((lambda (g$3372$20065) (list (g$3372$13115 '#f (list g$3372$20059) (list 'if g$3372$20061 g$3372$20063 g$3372$20065)) (list '(primitive syntax-dispatch) g$3372$20037 (list 'quote g$3372$20053)))) (g$3372$19947 g$3372$20037 g$3372$20038 g$3372$20039 g$3372$20040 g$3372$20041))) (g$3372$19941 g$3372$20054 g$3372$20044 g$3372$20059 g$3372$20040 g$3372$20041))) (if (eq? g$3372$20043 '#t) g$3372$20059 ((lambda (g$3372$20067) (list 'if g$3372$20059 g$3372$20067 (list 'quote '#f))) (g$3372$19941 g$3372$20054 g$3372$20043 g$3372$20059 g$3372$20040 g$3372$20041))))) (g$3372$13136 'tmp)))))))) (set! g$3372$19947 (lambda (g$3372$19949 g$3372$19950 g$3372$19951 g$3372$19952 g$3372$19953) (if (null? g$3372$19951) (list '(primitive syntax-error) g$3372$19949) ((lambda (g$3372$19959) ((lambda (g$3372$19961) (if (if g$3372$19961 (begin '#f (apply (lambda (g$3372$19963 g$3372$19964) '#t) g$3372$19961)) '#f) (apply (lambda (g$3372$19967 g$3372$19968) (if (if (g$3372$13226 g$3372$19967) (if (not (g$3372$13240 g$3372$19967 g$3372$19950)) (begin '#f (not (g$3372$13571 g$3372$19967))) '#f) '#f) (if (g$3372$13234 g$3372$19967 (g$3372$13479 '_)) (g$3372$13597 g$3372$19968 g$3372$19952 g$3372$19953) ((lambda (g$3372$19971 g$3372$19972) ((lambda (g$3372$19975) (list (g$3372$13115 '#f (list g$3372$19972) g$3372$19975) g$3372$19949)) (g$3372$13597 (g$3372$13206 (g$3372$13173 (list g$3372$19967) (list g$3372$19971)) g$3372$19968) (cons (cons g$3372$19971 (g$3372$13252 'syntax (cons g$3372$19972 '0))) g$3372$19952) g$3372$19953))) (g$3372$13140 g$3372$19967) (g$3372$13136 g$3372$19967))) (g$3372$19945 g$3372$19949 g$3372$19950 (cdr g$3372$19951) g$3372$19952 g$3372$19953 g$3372$19967 '#t g$3372$19968))) g$3372$19961) ((lambda (g$3372$19977) ((lambda (g$3372$19979) (if (if g$3372$19979 (begin '#f (apply (lambda (g$3372$19981 g$3372$19982 g$3372$19983) '#t) g$3372$19979)) '#f) (apply (lambda (g$3372$19987 g$3372$19988 g$3372$19989) (g$3372$19945 g$3372$19949 g$3372$19950 (cdr g$3372$19951) g$3372$19952 g$3372$19953 g$3372$19987 g$3372$19988 g$3372$19989)) g$3372$19979) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$19977 '())))) ((lambda (g$3372$19993) (if (g$3372$13212 g$3372$19993) (begin '#f ((lambda (g$3372$19995) (if g$3372$19995 (begin '#f ((lambda (g$3372$19997) (if g$3372$19997 (begin '#f (append g$3372$19995 g$3372$19997)) '#f)) ((lambda (g$3372$19999) (if (g$3372$13212 g$3372$19999) (begin '#f ((lambda (g$3372$20001) (if g$3372$20001 (begin '#f ((lambda (g$3372$20003) (if g$3372$20003 (begin '#f (append g$3372$20001 g$3372$20003)) '#f)) ((lambda (g$3372$20005) (if (g$3372$13212 g$3372$20005) (begin '#f ((lambda (g$3372$20007) (if g$3372$20007 (begin '#f ((lambda (g$3372$20009) (if g$3372$20009 (begin '#f (append g$3372$20007 g$3372$20009)) '#f)) ((lambda (g$3372$20011) (if (equal? (g$3372$13246 g$3372$20011) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$20005)))) '#f)) ((lambda (g$3372$20013) (list g$3372$20013)) (g$3372$13220 g$3372$20005)))) '#f)) (g$3372$13224 g$3372$19999)))) '#f)) ((lambda (g$3372$20015) (list g$3372$20015)) (g$3372$13220 g$3372$19999)))) '#f)) (g$3372$13224 g$3372$19993)))) '#f)) ((lambda (g$3372$20017) (list g$3372$20017)) (g$3372$13220 g$3372$19993)))) '#f)) g$3372$19977))) g$3372$19959))) ((lambda (g$3372$20019) (if (g$3372$13212 g$3372$20019) (begin '#f ((lambda (g$3372$20021) (if g$3372$20021 (begin '#f ((lambda (g$3372$20023) (if g$3372$20023 (begin '#f (append g$3372$20021 g$3372$20023)) '#f)) ((lambda (g$3372$20025) (if (g$3372$13212 g$3372$20025) (begin '#f ((lambda (g$3372$20027) (if g$3372$20027 (begin '#f ((lambda (g$3372$20029) (if g$3372$20029 (begin '#f (append g$3372$20027 g$3372$20029)) '#f)) ((lambda (g$3372$20031) (if (equal? (g$3372$13246 g$3372$20031) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$20025)))) '#f)) ((lambda (g$3372$20033) (list g$3372$20033)) (g$3372$13220 g$3372$20025)))) '#f)) (g$3372$13224 g$3372$20019)))) '#f)) ((lambda (g$3372$20035) (list g$3372$20035)) (g$3372$13220 g$3372$20019)))) '#f)) g$3372$19959))) (car g$3372$19951))))) (lambda (g$3372$20107 g$3372$20108 g$3372$20109) ((lambda (g$3372$20113) ((lambda (g$3372$20115) (if (if g$3372$20115 (begin '#f (apply (lambda (g$3372$20117 g$3372$20118 g$3372$20119) '#t) g$3372$20115)) '#f) (apply (lambda (g$3372$20123 g$3372$20124 g$3372$20125) (begin (if (for-all (lambda (g$3372$20129) (if (g$3372$13226 g$3372$20129) (begin '#f (not (g$3372$13571 g$3372$20129))) '#f)) g$3372$20124) (void) (error 'expander '"invalid literals" (g$3372$13244 g$3372$20107 '()))) ((lambda (g$3372$20131) ((lambda (g$3372$20133) (list (g$3372$13115 '#f (list g$3372$20131) g$3372$20133) (g$3372$13597 g$3372$20123 g$3372$20108 g$3372$20109))) (g$3372$19947 g$3372$20131 g$3372$20124 g$3372$20125 g$3372$20108 g$3372$20109))) (g$3372$13136 'tmp)))) g$3372$20115) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$20113 '())))) ((lambda (g$3372$20135) (if (g$3372$13212 g$3372$20135) (begin '#f ((lambda (g$3372$20137) (if g$3372$20137 (begin '#f ((lambda (g$3372$20139) (if g$3372$20139 (begin '#f (append g$3372$20137 g$3372$20139)) '#f)) ((lambda (g$3372$20141) (if (g$3372$13212 g$3372$20141) (begin '#f ((lambda (g$3372$20143) (if g$3372$20143 (begin '#f ((lambda (g$3372$20145) (if g$3372$20145 (begin '#f (append g$3372$20143 g$3372$20145)) '#f)) ((lambda (g$3372$20147) (if (g$3372$13212 g$3372$20147) (begin '#f ((lambda (g$3372$20149) (if g$3372$20149 (begin '#f ((lambda (g$3372$20151) (if g$3372$20151 (begin '#f (append g$3372$20149 g$3372$20151)) '#f)) ((letrec ((g$3372$20153 (lambda (g$3372$20155) (if (g$3372$13212 g$3372$20155) ((lambda (g$3372$20157) (if g$3372$20157 (begin '#f ((lambda (g$3372$20159) (if g$3372$20159 (begin '#f (map cons g$3372$20157 g$3372$20159)) '#f)) (g$3372$20153 (g$3372$13224 g$3372$20155)))) '#f)) ((lambda (g$3372$20161) (list g$3372$20161)) (g$3372$13220 g$3372$20155))) (if (g$3372$13216 g$3372$20155) (list (begin 'clauses '())) '#f))))) g$3372$20153) (g$3372$13224 g$3372$20147)))) '#f)) ((letrec ((g$3372$20163 (lambda (g$3372$20165) (if (g$3372$13212 g$3372$20165) ((lambda (g$3372$20167) (if g$3372$20167 (begin '#f ((lambda (g$3372$20169) (if g$3372$20169 (begin '#f (map cons g$3372$20167 g$3372$20169)) '#f)) (g$3372$20163 (g$3372$13224 g$3372$20165)))) '#f)) ((lambda (g$3372$20171) (list g$3372$20171)) (g$3372$13220 g$3372$20165))) (if (g$3372$13216 g$3372$20165) (list (begin 'keys '())) '#f))))) g$3372$20163) (g$3372$13220 g$3372$20147)))) '#f)) (g$3372$13224 g$3372$20141)))) '#f)) ((lambda (g$3372$20173) (list g$3372$20173)) (g$3372$13220 g$3372$20141)))) '#f)) (g$3372$13224 g$3372$20135)))) '#f)) ((lambda (g$3372$20175) '()) (g$3372$13220 g$3372$20135)))) '#f)) g$3372$20113))) g$3372$20107)))) '#f '#f '#f '#f)))) (set! g$3372$13575 ((lambda () ((lambda (g$3372$20177 g$3372$20179 g$3372$20181 g$3372$20183 g$3372$20185 g$3372$20187 g$3372$20189 g$3372$20191) (begin (set! g$3372$20177 (lambda (g$3372$20263 g$3372$20264 g$3372$20265 g$3372$20266 g$3372$20267 g$3372$20268) ((lambda (g$3372$20275) ((lambda (g$3372$20277) (if (if g$3372$20277 (begin '#f (apply (lambda (g$3372$20279) (g$3372$20267 g$3372$20279)) g$3372$20277)) '#f) (apply (lambda (g$3372$20281) (error 'expander '"misplaced ellipsis in syntax form" (g$3372$13244 g$3372$20263 '()))) g$3372$20277) ((lambda (g$3372$20283) ((lambda (g$3372$20285) (if (if g$3372$20285 (begin '#f (apply (lambda (g$3372$20287) (g$3372$13226 g$3372$20287)) g$3372$20285)) '#f) (apply (lambda (g$3372$20289) ((lambda (g$3372$20291) ((lambda (g$3372$20293) ((lambda () (if (eq? (g$3372$13254 g$3372$20293) 'syntax) (call-with-values (lambda () ((lambda (g$3372$20295) (g$3372$20179 g$3372$20263 (car g$3372$20295) (cdr g$3372$20295) g$3372$20266)) (g$3372$13256 g$3372$20293))) (lambda (g$3372$20297 g$3372$20298) (values (list 'ref g$3372$20297) g$3372$20298))) (values (list 'quote g$3372$20264) g$3372$20266))))) (g$3372$13250 g$3372$20291 g$3372$20265))) (g$3372$13248 g$3372$20264))) g$3372$20285) ((lambda (g$3372$20301) ((lambda (g$3372$20303) (if (if g$3372$20303 (begin '#f (apply (lambda (g$3372$20305 g$3372$20306) (g$3372$20267 g$3372$20305)) g$3372$20303)) '#f) (apply (lambda (g$3372$20309 g$3372$20310) (if g$3372$20268 (error 'expander '"misplaced ellipsis in syntax form" (g$3372$13244 g$3372$20263 '())) (g$3372$20177 g$3372$20263 g$3372$20310 g$3372$20265 g$3372$20266 (lambda (g$3372$20313) '#f) '#f))) g$3372$20303) ((lambda (g$3372$20315) ((lambda (g$3372$20317) (if (if g$3372$20317 (begin '#f (apply (lambda (g$3372$20319 g$3372$20320 g$3372$20321) (g$3372$20267 g$3372$20320)) g$3372$20317)) '#f) (apply (lambda (g$3372$20325 g$3372$20326 g$3372$20327) (letrec ((g$3372$20331 (lambda (g$3372$20339 g$3372$20340) ((lambda (g$3372$20343) ((lambda (g$3372$20345) (if (if g$3372$20345 (begin '#f (apply (lambda () '#t) g$3372$20345)) '#f) (apply (lambda () (g$3372$20340 g$3372$20266)) g$3372$20345) ((lambda (g$3372$20347) ((lambda (g$3372$20349) (if (if g$3372$20349 (begin '#f (apply (lambda (g$3372$20351 g$3372$20352) (g$3372$20267 g$3372$20351)) g$3372$20349)) '#f) (apply (lambda (g$3372$20355 g$3372$20356) (g$3372$20331 g$3372$20356 (lambda (g$3372$20359) (call-with-values (lambda () (g$3372$20340 (cons '() g$3372$20359))) (lambda (g$3372$20361 g$3372$20362) (if (null? (car g$3372$20362)) (error 'expander '"extra ellipsis in syntax form" (g$3372$13244 g$3372$20263 '())) (values (g$3372$20183 g$3372$20361 (car g$3372$20362)) (cdr g$3372$20362)))))))) g$3372$20349) ((lambda (g$3372$20365) ((lambda (g$3372$20367) (if (if g$3372$20367 (begin '#f (apply (lambda () '#t) g$3372$20367)) '#f) (apply (lambda () (call-with-values (lambda () (g$3372$20177 g$3372$20263 g$3372$20339 g$3372$20265 g$3372$20266 g$3372$20267 g$3372$20268)) (lambda (g$3372$20369 g$3372$20370) (call-with-values (lambda () (g$3372$20340 g$3372$20370)) (lambda (g$3372$20373 g$3372$20374) (values (g$3372$20181 g$3372$20373 g$3372$20369) g$3372$20374)))))) g$3372$20367) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$20365 '())))) ((lambda (g$3372$20377) '()) g$3372$20365))) g$3372$20347))) ((lambda (g$3372$20379) (if (g$3372$13212 g$3372$20379) (begin '#f ((lambda (g$3372$20381) (if g$3372$20381 (begin '#f ((lambda (g$3372$20383) (if g$3372$20383 (begin '#f (append g$3372$20381 g$3372$20383)) '#f)) ((lambda (g$3372$20385) (list g$3372$20385)) (g$3372$13224 g$3372$20379)))) '#f)) ((lambda (g$3372$20387) (list g$3372$20387)) (g$3372$13220 g$3372$20379)))) '#f)) g$3372$20347))) g$3372$20343))) ((lambda (g$3372$20389) (if (equal? (g$3372$13246 g$3372$20389) '()) (begin '#f '()) '#f)) g$3372$20343))) g$3372$20339)))) (g$3372$20331 g$3372$20327 (lambda (g$3372$20333) (call-with-values (lambda () (g$3372$20177 g$3372$20263 g$3372$20325 g$3372$20265 (cons '() g$3372$20333) g$3372$20267 '#f)) (lambda (g$3372$20335 g$3372$20336) (if (null? (car g$3372$20336)) (error 'expander '"extra ellipsis in syntax form" (g$3372$13244 g$3372$20263 '())) (values (g$3372$20185 g$3372$20335 (car g$3372$20336)) (cdr g$3372$20336))))))))) g$3372$20317) ((lambda (g$3372$20391) ((lambda (g$3372$20393) (if (if g$3372$20393 (begin '#f (apply (lambda (g$3372$20395 g$3372$20396) '#t) g$3372$20393)) '#f) (apply (lambda (g$3372$20399 g$3372$20400) (call-with-values (lambda () (g$3372$20177 g$3372$20263 g$3372$20399 g$3372$20265 g$3372$20266 g$3372$20267 '#f)) (lambda (g$3372$20403 g$3372$20404) (call-with-values (lambda () (g$3372$20177 g$3372$20263 g$3372$20400 g$3372$20265 g$3372$20404 g$3372$20267 g$3372$20268)) (lambda (g$3372$20407 g$3372$20408) (values (g$3372$20187 g$3372$20264 g$3372$20399 g$3372$20400 g$3372$20403 g$3372$20407) g$3372$20408)))))) g$3372$20393) ((lambda (g$3372$20411) ((lambda (g$3372$20413) (if (if g$3372$20413 (begin '#f (apply (lambda (g$3372$20415) (not (g$3372$13178 g$3372$20264))) g$3372$20413)) '#f) (apply (lambda (g$3372$20417) (call-with-values (lambda () (g$3372$20177 g$3372$20263 g$3372$20417 g$3372$20265 g$3372$20266 g$3372$20267 '#t)) (lambda (g$3372$20419 g$3372$20420) (values (g$3372$20189 g$3372$20264 g$3372$20417 g$3372$20419) g$3372$20420)))) g$3372$20413) ((lambda (g$3372$20423) ((lambda (g$3372$20425) (if (if g$3372$20425 (begin '#f (apply (lambda () '#t) g$3372$20425)) '#f) (apply (lambda () (values (list 'quote g$3372$20264) g$3372$20266)) g$3372$20425) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$20423 '())))) ((lambda (g$3372$20427) '()) g$3372$20423))) g$3372$20411))) ((lambda (g$3372$20429) (if (g$3372$13214 g$3372$20429) (begin '#f ((letrec ((g$3372$20431 (lambda (g$3372$20433) (if (g$3372$13212 g$3372$20433) ((lambda (g$3372$20435) (if g$3372$20435 (begin '#f ((lambda (g$3372$20437) (if g$3372$20437 (begin '#f (map cons g$3372$20435 g$3372$20437)) '#f)) (g$3372$20431 (g$3372$13224 g$3372$20433)))) '#f)) ((lambda (g$3372$20439) (list g$3372$20439)) (g$3372$13220 g$3372$20433))) (if (g$3372$13216 g$3372$20433) (list (begin 'ls '())) '#f))))) g$3372$20431) (g$3372$13210 g$3372$20429))) '#f)) g$3372$20411))) g$3372$20391))) ((lambda (g$3372$20441) (if (g$3372$13212 g$3372$20441) (begin '#f ((lambda (g$3372$20443) (if g$3372$20443 (begin '#f ((lambda (g$3372$20445) (if g$3372$20445 (begin '#f (append g$3372$20443 g$3372$20445)) '#f)) ((lambda (g$3372$20447) (list g$3372$20447)) (g$3372$13224 g$3372$20441)))) '#f)) ((lambda (g$3372$20449) (list g$3372$20449)) (g$3372$13220 g$3372$20441)))) '#f)) g$3372$20391))) g$3372$20315))) ((lambda (g$3372$20451) (if (g$3372$13212 g$3372$20451) (begin '#f ((lambda (g$3372$20453) (if g$3372$20453 (begin '#f ((lambda (g$3372$20455) (if g$3372$20455 (begin '#f (append g$3372$20453 g$3372$20455)) '#f)) ((lambda (g$3372$20457) (if (g$3372$13212 g$3372$20457) (begin '#f ((lambda (g$3372$20459) (if g$3372$20459 (begin '#f ((lambda (g$3372$20461) (if g$3372$20461 (begin '#f (append g$3372$20459 g$3372$20461)) '#f)) ((lambda (g$3372$20463) (list g$3372$20463)) (g$3372$13224 g$3372$20457)))) '#f)) ((lambda (g$3372$20465) (list g$3372$20465)) (g$3372$13220 g$3372$20457)))) '#f)) (g$3372$13224 g$3372$20451)))) '#f)) ((lambda (g$3372$20467) (list g$3372$20467)) (g$3372$13220 g$3372$20451)))) '#f)) g$3372$20315))) g$3372$20301))) ((lambda (g$3372$20469) (if (g$3372$13212 g$3372$20469) (begin '#f ((lambda (g$3372$20471) (if g$3372$20471 (begin '#f ((lambda (g$3372$20473) (if g$3372$20473 (begin '#f (append g$3372$20471 g$3372$20473)) '#f)) ((lambda (g$3372$20475) (if (g$3372$13212 g$3372$20475) (begin '#f ((lambda (g$3372$20477) (if g$3372$20477 (begin '#f ((lambda (g$3372$20479) (if g$3372$20479 (begin '#f (append g$3372$20477 g$3372$20479)) '#f)) ((lambda (g$3372$20481) (if (equal? (g$3372$13246 g$3372$20481) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$20475)))) '#f)) ((lambda (g$3372$20483) (list g$3372$20483)) (g$3372$13220 g$3372$20475)))) '#f)) (g$3372$13224 g$3372$20469)))) '#f)) ((lambda (g$3372$20485) (list g$3372$20485)) (g$3372$13220 g$3372$20469)))) '#f)) g$3372$20301))) g$3372$20283))) ((lambda (g$3372$20487) (list g$3372$20487)) g$3372$20283))) g$3372$20275))) ((lambda (g$3372$20489) (list g$3372$20489)) g$3372$20275))) g$3372$20264))) (set! g$3372$20179 (lambda (g$3372$20245 g$3372$20246 g$3372$20247 g$3372$20248) (if (= g$3372$20247 '0) (values g$3372$20246 g$3372$20248) (if (null? g$3372$20248) (error 'expander '"missing ellipsis in syntax form" (g$3372$13244 g$3372$20245 '())) (call-with-values (lambda () (g$3372$20179 g$3372$20245 g$3372$20246 (- g$3372$20247 '1) (cdr g$3372$20248))) (lambda (g$3372$20253 g$3372$20254) ((lambda (g$3372$20257) (if g$3372$20257 ((lambda (g$3372$20259) (values (cdr g$3372$20259) g$3372$20248)) g$3372$20257) ((lambda (g$3372$20261) (values g$3372$20261 (cons (cons (cons g$3372$20253 g$3372$20261) (car g$3372$20248)) g$3372$20254))) (g$3372$13136 'tmp)))) (assq g$3372$20253 (car g$3372$20248))))))))) (set! g$3372$20181 (lambda (g$3372$20241 g$3372$20242) (if (equal? g$3372$20242 ''()) g$3372$20241 (list 'append g$3372$20241 g$3372$20242)))) (set! g$3372$20183 (lambda (g$3372$20237 g$3372$20238) (list 'apply '(primitive append) (g$3372$20185 g$3372$20237 g$3372$20238)))) (set! g$3372$20185 (lambda (g$3372$20219 g$3372$20220) ((lambda (g$3372$20223 g$3372$20224) (if (eq? (car g$3372$20219) 'ref) (car g$3372$20224) (if (for-all (lambda (g$3372$20227) (if (eq? (car g$3372$20227) 'ref) (begin '#f (memq (cadr g$3372$20227) g$3372$20223)) '#f)) (cdr g$3372$20219)) ((lambda (g$3372$20229) (cons 'map (cons (list 'primitive (car g$3372$20219)) g$3372$20229))) (map ((lambda (g$3372$20231) (lambda (g$3372$20233) (cdr (assq (cadr g$3372$20233) g$3372$20231)))) (map cons g$3372$20223 g$3372$20224)) (cdr g$3372$20219))) (cons* 'map (list 'lambda g$3372$20223 g$3372$20219) g$3372$20224)))) (map cdr g$3372$20220) (map (lambda (g$3372$20235) (list 'ref (car g$3372$20235))) g$3372$20220)))) (set! g$3372$20187 (lambda (g$3372$20204 g$3372$20205 g$3372$20206 g$3372$20207 g$3372$20208) ((lambda (g$3372$20214) (if (memv g$3372$20214 '(quote)) (if (eq? (car g$3372$20207) 'quote) ((lambda (g$3372$20215 g$3372$20216) (if (if (eq? g$3372$20215 g$3372$20205) (begin '#f (eq? g$3372$20216 g$3372$20206)) '#f) (list 'quote g$3372$20204) (list 'quote (cons g$3372$20215 g$3372$20216)))) (cadr g$3372$20207) (cadr g$3372$20208)) (if (null? (cadr g$3372$20208)) (list 'list g$3372$20207) (list 'cons g$3372$20207 g$3372$20208))) (if (memv g$3372$20214 '(list)) (cons 'list (cons g$3372$20207 (cdr g$3372$20208))) (list 'cons g$3372$20207 g$3372$20208)))) (car g$3372$20208)))) (set! g$3372$20189 (lambda (g$3372$20198 g$3372$20199 g$3372$20200) (if (eq? (car g$3372$20200) 'quote) (if (eq? (cadr g$3372$20200) g$3372$20199) (list 'quote g$3372$20198) (list 'quote (list->vector (cadr g$3372$20200)))) (if (eq? (car g$3372$20200) 'list) (cons 'vector (cdr g$3372$20200)) (list 'list->vector g$3372$20200))))) (set! g$3372$20191 (lambda (g$3372$20193) ((lambda (g$3372$20195) (if (memv g$3372$20195 '(ref)) (cadr g$3372$20193) (if (memv g$3372$20195 '(primitive)) (list 'primitive (cadr g$3372$20193)) (if (memv g$3372$20195 '(quote)) (list 'quote (cadr g$3372$20193)) (if (memv g$3372$20195 '(lambda)) (g$3372$13115 '#f (cadr g$3372$20193) (g$3372$20191 (caddr g$3372$20193))) (if (memv g$3372$20195 '(map)) ((lambda (g$3372$20196) (cons '(primitive map) g$3372$20196)) (map g$3372$20191 (cdr g$3372$20193))) (cons (list 'primitive (car g$3372$20193)) (map g$3372$20191 (cdr g$3372$20193))))))))) (car g$3372$20193)))) (lambda (g$3372$20491 g$3372$20492 g$3372$20493) ((lambda (g$3372$20497) ((lambda (g$3372$20499) (if (if g$3372$20499 (begin '#f (apply (lambda (g$3372$20501) '#t) g$3372$20499)) '#f) (apply (lambda (g$3372$20503) (call-with-values (lambda () (g$3372$20177 g$3372$20491 g$3372$20503 g$3372$20492 '() g$3372$13571 '#f)) (lambda (g$3372$20505 g$3372$20506) (g$3372$20191 g$3372$20505)))) g$3372$20499) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$20497 '())))) ((lambda (g$3372$20509) (if (g$3372$13212 g$3372$20509) (begin '#f ((lambda (g$3372$20511) (if g$3372$20511 (begin '#f ((lambda (g$3372$20513) (if g$3372$20513 (begin '#f (append g$3372$20511 g$3372$20513)) '#f)) ((lambda (g$3372$20515) (if (g$3372$13212 g$3372$20515) (begin '#f ((lambda (g$3372$20517) (if g$3372$20517 (begin '#f ((lambda (g$3372$20519) (if g$3372$20519 (begin '#f (append g$3372$20517 g$3372$20519)) '#f)) ((lambda (g$3372$20521) (if (equal? (g$3372$13246 g$3372$20521) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$20515)))) '#f)) ((lambda (g$3372$20523) (list g$3372$20523)) (g$3372$13220 g$3372$20515)))) '#f)) (g$3372$13224 g$3372$20509)))) '#f)) ((lambda (g$3372$20525) '()) (g$3372$13220 g$3372$20509)))) '#f)) g$3372$20497))) g$3372$20491)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g$3372$13577 (lambda (g$3372$20527) ((lambda (g$3372$20529) (if (memv g$3372$20529 '(quote)) g$3372$13507 (if (memv g$3372$20529 '(lambda)) g$3372$13511 (if (memv g$3372$20529 '(case-lambda)) g$3372$13509 (if (memv g$3372$20529 '(let-values)) g$3372$13485 (if (memv g$3372$20529 '(letrec)) g$3372$13489 (if (memv g$3372$20529 '(letrec*)) g$3372$13491 (if (memv g$3372$20529 '(case)) g$3372$13505 (if (memv g$3372$20529 '(if)) g$3372$13503 (if (memv g$3372$20529 '(when)) g$3372$13499 (if (memv g$3372$20529 '(unless)) g$3372$13501 (if (memv g$3372$20529 '(parameterize)) g$3372$13563 (if (memv g$3372$20529 '(foreign-call)) g$3372$13565 (if (memv g$3372$20529 '(syntax-case)) g$3372$13573 (if (memv g$3372$20529 '(syntax)) g$3372$13575 (if (memv g$3372$20529 '(type-descriptor)) g$3372$13493 (if (memv g$3372$20529 '(record-type-descriptor)) g$3372$13495 (if (memv g$3372$20529 '(record-constructor-descriptor)) g$3372$13497 (error 'macro-transformer '"cannot find transformer" g$3372$20527))))))))))))))))))) g$3372$20527))) (set! g$3372$13579 (lambda (g$3372$20530) ((lambda (g$3372$20532) ((lambda (g$3372$20534) (if (if g$3372$20534 (begin '#f (apply (lambda (g$3372$20536) (if (for-all g$3372$13226 g$3372$20536) (begin '#f (g$3372$12316 (map g$3372$13228 g$3372$20536))) '#f)) g$3372$20534)) '#f) (apply (lambda (g$3372$20538) (g$3372$13513 (list 'quote (g$3372$12316 (map g$3372$13228 g$3372$20538))))) g$3372$20534) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$20532 '())))) ((lambda (g$3372$20540) (if (g$3372$13212 g$3372$20540) (begin '#f ((lambda (g$3372$20542) (if g$3372$20542 (begin '#f ((lambda (g$3372$20544) (if g$3372$20544 (begin '#f (append g$3372$20542 g$3372$20544)) '#f)) ((letrec ((g$3372$20546 (lambda (g$3372$20548) (if (g$3372$13212 g$3372$20548) ((lambda (g$3372$20550) (if g$3372$20550 (begin '#f ((lambda (g$3372$20552) (if g$3372$20552 (begin '#f (map cons g$3372$20550 g$3372$20552)) '#f)) (g$3372$20546 (g$3372$13224 g$3372$20548)))) '#f)) ((lambda (g$3372$20554) (list g$3372$20554)) (g$3372$13220 g$3372$20548))) (if (g$3372$13216 g$3372$20548) (list (begin 'opt* '())) '#f))))) g$3372$20546) (g$3372$13224 g$3372$20540)))) '#f)) ((lambda (g$3372$20556) '()) (g$3372$13220 g$3372$20540)))) '#f)) g$3372$20532))) g$3372$20530))) (set! g$3372$13581 (lambda (g$3372$20558 g$3372$20559) ((lambda (g$3372$20562) ((lambda (g$3372$20564) (if (if g$3372$20564 (begin '#f (apply (lambda (g$3372$20566) (if (g$3372$13226 g$3372$20566) (begin '#f (memq (g$3372$13228 g$3372$20566) g$3372$20559)) '#f)) g$3372$20564)) '#f) (apply (lambda (g$3372$20568) (g$3372$13513 (list 'quote g$3372$20568))) g$3372$20564) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$20562 '())))) ((lambda (g$3372$20570) (if (g$3372$13212 g$3372$20570) (begin '#f ((lambda (g$3372$20572) (if g$3372$20572 (begin '#f ((lambda (g$3372$20574) (if g$3372$20574 (begin '#f (append g$3372$20572 g$3372$20574)) '#f)) ((lambda (g$3372$20576) (if (g$3372$13212 g$3372$20576) (begin '#f ((lambda (g$3372$20578) (if g$3372$20578 (begin '#f ((lambda (g$3372$20580) (if g$3372$20580 (begin '#f (append g$3372$20578 g$3372$20580)) '#f)) ((lambda (g$3372$20582) (if (equal? (g$3372$13246 g$3372$20582) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$20576)))) '#f)) ((lambda (g$3372$20584) (list g$3372$20584)) (g$3372$13220 g$3372$20576)))) '#f)) (g$3372$13224 g$3372$20570)))) '#f)) ((lambda (g$3372$20586) '()) (g$3372$13220 g$3372$20570)))) '#f)) g$3372$20562))) g$3372$20558))) (set! g$3372$13583 (lambda (g$3372$20588) (if (procedure? g$3372$20588) g$3372$20588 (if (symbol? g$3372$20588) ((lambda (g$3372$20590) (if (memv g$3372$20590 '(define-record-type)) g$3372$13557 (if (memv g$3372$20590 '(define-struct)) g$3372$13555 (if (memv g$3372$20590 '(include)) g$3372$13547 (if (memv g$3372$20590 '(cond)) g$3372$13545 (if (memv g$3372$20590 '(let)) g$3372$13517 (if (memv g$3372$20590 '(do)) g$3372$13537 (if (memv g$3372$20590 '(or)) g$3372$13541 (if (memv g$3372$20590 '(and)) g$3372$13543 (if (memv g$3372$20590 '(let*)) g$3372$13539 (if (memv g$3372$20590 '(syntax-rules)) g$3372$13549 (if (memv g$3372$20590 '(quasiquote)) g$3372$13551 (if (memv g$3372$20590 '(quasisyntax)) g$3372$13553 (if (memv g$3372$20590 '(with-syntax)) g$3372$13515 (if (memv g$3372$20590 '(identifier-syntax)) g$3372$13535 (if (memv g$3372$20590 '(time)) g$3372$13527 (if (memv g$3372$20590 '(delay)) g$3372$13529 (if (memv g$3372$20590 '(assert)) g$3372$13531 (if (memv g$3372$20590 '(endianness)) g$3372$13533 (if (memv g$3372$20590 '(guard)) g$3372$13523 (if (memv g$3372$20590 '(define-enumeration)) g$3372$13525 (if (memv g$3372$20590 '(trace-lambda)) g$3372$13519 (if (memv g$3372$20590 '(trace-define)) g$3372$13521 (if (memv g$3372$20590 '(define-condition-type)) g$3372$13559 (if (memv g$3372$20590 '(eol-style)) (lambda (g$3372$20595) (g$3372$13581 g$3372$20595 '(none lf cr crlf nel crnel ls))) (if (memv g$3372$20590 '(error-handling-mode)) (lambda (g$3372$20593) (g$3372$13581 g$3372$20593 '(ignore raise replace))) (if (memv g$3372$20590 '(buffer-mode)) (lambda (g$3372$20591) (g$3372$13581 g$3372$20591 '(none line block))) (if (memv g$3372$20590 '(file-options)) g$3372$13579 (if (memv g$3372$20590 '(|...| => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g$3372$13561 (error 'macro-transformer '"invalid macro" g$3372$20588)))))))))))))))))))))))))))))) g$3372$20588) (error 'core-macro-transformer '"invalid macro" g$3372$20588))))) (set! g$3372$13585 (lambda (g$3372$20597) (car g$3372$20597))) (set! g$3372$13587 (lambda (g$3372$20599 g$3372$20600) ((lambda (g$3372$20603) (g$3372$13204 (g$3372$13194) g$3372$20603)) ((g$3372$13583 g$3372$20599) (g$3372$13204 g$3372$13196 g$3372$20600))))) (set! g$3372$13589 (lambda (g$3372$20605 g$3372$20606) ((lambda (g$3372$20609) (g$3372$13204 (g$3372$13194) g$3372$20609)) ((g$3372$13585 g$3372$20605) (g$3372$13204 g$3372$13196 g$3372$20606))))) (set! g$3372$13591 (lambda (g$3372$20611 g$3372$20612) ((lambda (g$3372$20615 g$3372$20616) (begin (g$3372$12830 g$3372$20615) ((lambda (g$3372$20619) ((lambda (g$3372$20621) ((lambda (g$3372$20623) (g$3372$13204 (g$3372$13194) g$3372$20623)) (g$3372$20621 (g$3372$13204 g$3372$13196 g$3372$20612)))) (if (procedure? g$3372$20619) g$3372$20619 (error 'chi-global-macro '"not a procedure")))) (symbol-value g$3372$20616)))) (car g$3372$20611) (cdr g$3372$20611)))) (set! g$3372$13593 (lambda (g$3372$20625 g$3372$20626 g$3372$20627) (if (null? g$3372$20625) '() ((lambda (g$3372$20631) (cons g$3372$20631 (g$3372$13593 (cdr g$3372$20625) g$3372$20626 g$3372$20627))) (g$3372$13597 (car g$3372$20625) g$3372$20626 g$3372$20627))))) (set! g$3372$13595 (lambda (g$3372$20633 g$3372$20634 g$3372$20635) ((lambda (g$3372$20639) ((lambda (g$3372$20641) (if (if g$3372$20641 (begin '#f (apply (lambda (g$3372$20643 g$3372$20644) '#t) g$3372$20641)) '#f) (apply (lambda (g$3372$20647 g$3372$20648) ((lambda (g$3372$20651) (cons g$3372$20651 (g$3372$13593 g$3372$20648 g$3372$20634 g$3372$20635))) (g$3372$13597 g$3372$20647 g$3372$20634 g$3372$20635))) g$3372$20641) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$20639 '())))) ((lambda (g$3372$20653) (if (g$3372$13212 g$3372$20653) (begin '#f ((lambda (g$3372$20655) (if g$3372$20655 (begin '#f ((lambda (g$3372$20657) (if g$3372$20657 (begin '#f (append g$3372$20655 g$3372$20657)) '#f)) ((letrec ((g$3372$20659 (lambda (g$3372$20661) (if (g$3372$13212 g$3372$20661) ((lambda (g$3372$20663) (if g$3372$20663 (begin '#f ((lambda (g$3372$20665) (if g$3372$20665 (begin '#f (map cons g$3372$20663 g$3372$20665)) '#f)) (g$3372$20659 (g$3372$13224 g$3372$20661)))) '#f)) ((lambda (g$3372$20667) (list g$3372$20667)) (g$3372$13220 g$3372$20661))) (if (g$3372$13216 g$3372$20661) (list (begin 'rands '())) '#f))))) g$3372$20659) (g$3372$13224 g$3372$20653)))) '#f)) ((lambda (g$3372$20669) (list g$3372$20669)) (g$3372$13220 g$3372$20653)))) '#f)) g$3372$20639))) g$3372$20633))) (set! g$3372$13597 (lambda (g$3372$20671 g$3372$20672 g$3372$20673) (call-with-values (lambda () (g$3372$13258 g$3372$20671 g$3372$20672)) (lambda (g$3372$20677 g$3372$20678 g$3372$20679) ((lambda (g$3372$20683) (if (memv g$3372$20683 '(core-macro)) ((lambda (g$3372$20820) (g$3372$20820 g$3372$20671 g$3372$20672 g$3372$20673)) (g$3372$13577 g$3372$20678)) (if (memv g$3372$20683 '(global)) ((lambda (g$3372$20816) ((lambda (g$3372$20818) ((lambda () (begin ((g$3372$13645) g$3372$20816) g$3372$20818)))) (cdr g$3372$20678))) (car g$3372$20678)) (if (memv g$3372$20683 '(core-prim)) ((lambda (g$3372$20814) (list 'primitive g$3372$20814)) g$3372$20678) (if (memv g$3372$20683 '(call)) (g$3372$13595 g$3372$20671 g$3372$20672 g$3372$20673) (if (memv g$3372$20683 '(lexical)) ((lambda (g$3372$20812) g$3372$20812) g$3372$20678) (if (memv g$3372$20683 '(global-macro global-macro!)) (g$3372$13597 (g$3372$13591 g$3372$20678 g$3372$20671) g$3372$20672 g$3372$20673) (if (memv g$3372$20683 '(local-macro local-macro!)) (g$3372$13597 (g$3372$13589 g$3372$20678 g$3372$20671) g$3372$20672 g$3372$20673) (if (memv g$3372$20683 '(macro macro!)) (g$3372$13597 (g$3372$13587 g$3372$20678 g$3372$20671) g$3372$20672 g$3372$20673) (if (memv g$3372$20683 '(constant)) ((lambda (g$3372$20810) (list 'quote g$3372$20810)) g$3372$20678) (if (memv g$3372$20683 '(set!)) (g$3372$13599 g$3372$20671 g$3372$20672 g$3372$20673) (if (memv g$3372$20683 '(begin)) ((lambda (g$3372$20772) ((lambda (g$3372$20774) (if (if g$3372$20774 (begin '#f (apply (lambda (g$3372$20776 g$3372$20777) '#t) g$3372$20774)) '#f) (apply (lambda (g$3372$20780 g$3372$20781) (g$3372$13109 '#f (g$3372$13593 (cons g$3372$20780 g$3372$20781) g$3372$20672 g$3372$20673))) g$3372$20774) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$20772 '())))) ((lambda (g$3372$20784) (if (g$3372$13212 g$3372$20784) (begin '#f ((lambda (g$3372$20786) (if g$3372$20786 (begin '#f ((lambda (g$3372$20788) (if g$3372$20788 (begin '#f (append g$3372$20786 g$3372$20788)) '#f)) ((lambda (g$3372$20790) (if (g$3372$13212 g$3372$20790) (begin '#f ((lambda (g$3372$20792) (if g$3372$20792 (begin '#f ((lambda (g$3372$20794) (if g$3372$20794 (begin '#f (append g$3372$20792 g$3372$20794)) '#f)) ((letrec ((g$3372$20796 (lambda (g$3372$20798) (if (g$3372$13212 g$3372$20798) ((lambda (g$3372$20800) (if g$3372$20800 (begin '#f ((lambda (g$3372$20802) (if g$3372$20802 (begin '#f (map cons g$3372$20800 g$3372$20802)) '#f)) (g$3372$20796 (g$3372$13224 g$3372$20798)))) '#f)) ((lambda (g$3372$20804) (list g$3372$20804)) (g$3372$13220 g$3372$20798))) (if (g$3372$13216 g$3372$20798) (list (begin 'x* '())) '#f))))) g$3372$20796) (g$3372$13224 g$3372$20790)))) '#f)) ((lambda (g$3372$20806) (list g$3372$20806)) (g$3372$13220 g$3372$20790)))) '#f)) (g$3372$13224 g$3372$20784)))) '#f)) ((lambda (g$3372$20808) '()) (g$3372$13220 g$3372$20784)))) '#f)) g$3372$20772))) g$3372$20671) (if (memv g$3372$20683 '(let-syntax letrec-syntax)) ((lambda (g$3372$20684) ((lambda (g$3372$20686) (if (if g$3372$20686 (begin '#f (apply (lambda (g$3372$20688 g$3372$20689 g$3372$20690 g$3372$20691) (if (g$3372$13236 g$3372$20688) (void) (error 'expander '"invalid identifiers" (g$3372$13244 g$3372$20671 '())))) g$3372$20686)) '#f) (apply (lambda (g$3372$20696 g$3372$20697 g$3372$20698 g$3372$20699) ((lambda (g$3372$20704) ((lambda (g$3372$20706) ((lambda (g$3372$20708) ((lambda () (g$3372$13109 '#f (g$3372$13593 (map (lambda (g$3372$20710) (g$3372$13206 g$3372$20706 g$3372$20710)) (cons g$3372$20698 g$3372$20699)) (append (map cons g$3372$20704 g$3372$20708) g$3372$20672) (append (map cons g$3372$20704 g$3372$20708) g$3372$20673)))))) (map (lambda (g$3372$20712) (g$3372$13276 (g$3372$13631 (if (eq? g$3372$20677 'let-syntax) g$3372$20712 (g$3372$13206 g$3372$20706 g$3372$20712)) g$3372$20673))) g$3372$20697))) (g$3372$13173 g$3372$20696 g$3372$20704))) (map g$3372$13140 g$3372$20696))) g$3372$20686) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$20684 '())))) ((lambda (g$3372$20714) (if (g$3372$13212 g$3372$20714) (begin '#f ((lambda (g$3372$20716) (if g$3372$20716 (begin '#f ((lambda (g$3372$20718) (if g$3372$20718 (begin '#f (append g$3372$20716 g$3372$20718)) '#f)) ((lambda (g$3372$20720) (if (g$3372$13212 g$3372$20720) (begin '#f ((lambda (g$3372$20722) (if g$3372$20722 (begin '#f ((lambda (g$3372$20724) (if g$3372$20724 (begin '#f (append g$3372$20722 g$3372$20724)) '#f)) ((lambda (g$3372$20726) (if (g$3372$13212 g$3372$20726) (begin '#f ((lambda (g$3372$20728) (if g$3372$20728 (begin '#f ((lambda (g$3372$20730) (if g$3372$20730 (begin '#f (append g$3372$20728 g$3372$20730)) '#f)) ((letrec ((g$3372$20732 (lambda (g$3372$20734) (if (g$3372$13212 g$3372$20734) ((lambda (g$3372$20736) (if g$3372$20736 (begin '#f ((lambda (g$3372$20738) (if g$3372$20738 (begin '#f (map cons g$3372$20736 g$3372$20738)) '#f)) (g$3372$20732 (g$3372$13224 g$3372$20734)))) '#f)) ((lambda (g$3372$20740) (list g$3372$20740)) (g$3372$13220 g$3372$20734))) (if (g$3372$13216 g$3372$20734) (list (begin 'xbody* '())) '#f))))) g$3372$20732) (g$3372$13224 g$3372$20726)))) '#f)) ((lambda (g$3372$20742) (list g$3372$20742)) (g$3372$13220 g$3372$20726)))) '#f)) (g$3372$13224 g$3372$20720)))) '#f)) ((letrec ((g$3372$20744 (lambda (g$3372$20746) (if (g$3372$13212 g$3372$20746) ((lambda (g$3372$20748) (if g$3372$20748 (begin '#f ((lambda (g$3372$20750) (if g$3372$20750 (begin '#f (map cons g$3372$20748 g$3372$20750)) '#f)) (g$3372$20744 (g$3372$13224 g$3372$20746)))) '#f)) ((lambda (g$3372$20752) (if (g$3372$13212 g$3372$20752) (begin '#f ((lambda (g$3372$20754) (if g$3372$20754 (begin '#f ((lambda (g$3372$20756) (if g$3372$20756 (begin '#f (append g$3372$20754 g$3372$20756)) '#f)) ((lambda (g$3372$20758) (if (g$3372$13212 g$3372$20758) (begin '#f ((lambda (g$3372$20760) (if g$3372$20760 (begin '#f ((lambda (g$3372$20762) (if g$3372$20762 (begin '#f (append g$3372$20760 g$3372$20762)) '#f)) ((lambda (g$3372$20764) (if (equal? (g$3372$13246 g$3372$20764) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$20758)))) '#f)) ((lambda (g$3372$20766) (list g$3372$20766)) (g$3372$13220 g$3372$20758)))) '#f)) (g$3372$13224 g$3372$20752)))) '#f)) ((lambda (g$3372$20768) (list g$3372$20768)) (g$3372$13220 g$3372$20752)))) '#f)) (g$3372$13220 g$3372$20746))) (if (g$3372$13216 g$3372$20746) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$3372$20744) (g$3372$13220 g$3372$20720)))) '#f)) (g$3372$13224 g$3372$20714)))) '#f)) ((lambda (g$3372$20770) '()) (g$3372$13220 g$3372$20714)))) '#f)) g$3372$20684))) g$3372$20671) (if (memv g$3372$20683 '(displaced-lexical)) (error 'expander '"identifier out of context" (g$3372$13244 g$3372$20671 '())) (if (memv g$3372$20683 '(syntax)) (error 'expander '"reference to pattern variable outside a syntax form" (g$3372$13244 g$3372$20671 '())) (if (memv g$3372$20683 '(define define-syntax module import)) (error 'expander '"invalid expression" (g$3372$13244 g$3372$20671 '())) (error 'expander '"invalid expression" (g$3372$13244 g$3372$20671 '())))))))))))))))))) g$3372$20677))))) (set! g$3372$13599 (lambda (g$3372$20822 g$3372$20823 g$3372$20824) ((lambda (g$3372$20828) ((lambda (g$3372$20830) (if (if g$3372$20830 (begin '#f (apply (lambda (g$3372$20832 g$3372$20833) (g$3372$13226 g$3372$20832)) g$3372$20830)) '#f) (apply (lambda (g$3372$20836 g$3372$20837) (call-with-values (lambda () (g$3372$13258 g$3372$20836 g$3372$20823)) (lambda (g$3372$20840 g$3372$20841 g$3372$20842) ((lambda (g$3372$20846) (if (memv g$3372$20846 '(lexical)) (list 'set! g$3372$20841 (g$3372$13597 g$3372$20837 g$3372$20823 g$3372$20824)) (if (memv g$3372$20846 '(global core-prim)) (error 'expander '"cannot modify imported identifier in" (g$3372$13244 g$3372$20822 '())) (if (memv g$3372$20846 '(global-macro!)) (g$3372$13597 (g$3372$13591 g$3372$20841 g$3372$20822) g$3372$20823 g$3372$20824) (if (memv g$3372$20846 '(local-macro!)) (g$3372$13597 (g$3372$13589 g$3372$20841 g$3372$20822) g$3372$20823 g$3372$20824) (error 'expander '"invalid syntax" (g$3372$13246 g$3372$20822))))))) g$3372$20840)))) g$3372$20830) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$20828 '())))) ((lambda (g$3372$20847) (if (g$3372$13212 g$3372$20847) (begin '#f ((lambda (g$3372$20849) (if g$3372$20849 (begin '#f ((lambda (g$3372$20851) (if g$3372$20851 (begin '#f (append g$3372$20849 g$3372$20851)) '#f)) ((lambda (g$3372$20853) (if (g$3372$13212 g$3372$20853) (begin '#f ((lambda (g$3372$20855) (if g$3372$20855 (begin '#f ((lambda (g$3372$20857) (if g$3372$20857 (begin '#f (append g$3372$20855 g$3372$20857)) '#f)) ((lambda (g$3372$20859) (if (g$3372$13212 g$3372$20859) (begin '#f ((lambda (g$3372$20861) (if g$3372$20861 (begin '#f ((lambda (g$3372$20863) (if g$3372$20863 (begin '#f (append g$3372$20861 g$3372$20863)) '#f)) ((lambda (g$3372$20865) (if (equal? (g$3372$13246 g$3372$20865) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$20859)))) '#f)) ((lambda (g$3372$20867) (list g$3372$20867)) (g$3372$13220 g$3372$20859)))) '#f)) (g$3372$13224 g$3372$20853)))) '#f)) ((lambda (g$3372$20869) (list g$3372$20869)) (g$3372$13220 g$3372$20853)))) '#f)) (g$3372$13224 g$3372$20847)))) '#f)) ((lambda (g$3372$20871) '()) (g$3372$13220 g$3372$20847)))) '#f)) g$3372$20828))) g$3372$20822))) (set! g$3372$13601 (lambda (g$3372$20873 g$3372$20874 g$3372$20875 g$3372$20876) ((lambda (g$3372$20881) ((lambda (g$3372$20883) (if (if g$3372$20883 (begin '#f (apply (lambda (g$3372$20885) '#t) g$3372$20883)) '#f) (apply (lambda (g$3372$20887) (if (g$3372$13236 g$3372$20887) ((lambda (g$3372$20889 g$3372$20890) (values g$3372$20889 (g$3372$13613 (g$3372$13206 (g$3372$13173 g$3372$20887 g$3372$20890) g$3372$20874) (g$3372$13483 g$3372$20890 g$3372$20889 g$3372$20875) g$3372$20876))) (map g$3372$13136 g$3372$20887) (map g$3372$13140 g$3372$20887)) (error 'expander '"invalid fmls" (g$3372$13244 g$3372$20873 '())))) g$3372$20883) ((lambda (g$3372$20893) ((lambda (g$3372$20895) (if (if g$3372$20895 (begin '#f (apply (lambda (g$3372$20897 g$3372$20898) '#t) g$3372$20895)) '#f) (apply (lambda (g$3372$20901 g$3372$20902) (if (g$3372$13236 (cons g$3372$20902 g$3372$20901)) ((lambda (g$3372$20905 g$3372$20906 g$3372$20907 g$3372$20908) (values (append g$3372$20905 g$3372$20907) (g$3372$13613 (g$3372$13206 (g$3372$13173 (cons g$3372$20902 g$3372$20901) (cons g$3372$20908 g$3372$20906)) g$3372$20874) (g$3372$13483 (cons g$3372$20908 g$3372$20906) (cons g$3372$20907 g$3372$20905) g$3372$20875) g$3372$20876))) (map g$3372$13136 g$3372$20901) (map g$3372$13140 g$3372$20901) (g$3372$13136 g$3372$20902) (g$3372$13140 g$3372$20902)) (error 'expander '"invalid fmls" (g$3372$13244 g$3372$20873 '())))) g$3372$20895) ((lambda (g$3372$20913) ((lambda (g$3372$20915) (if (if g$3372$20915 (begin '#f (apply (lambda () '#t) g$3372$20915)) '#f) (apply (lambda () (error 'expander '"invalid fmls" (g$3372$13244 g$3372$20873 '()))) g$3372$20915) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$20913 '())))) ((lambda (g$3372$20917) '()) g$3372$20913))) g$3372$20893))) ((letrec ((g$3372$20919 (lambda (g$3372$20925) (if (g$3372$13212 g$3372$20925) ((lambda (g$3372$20927) (if g$3372$20927 (begin '#f ((lambda (g$3372$20929) (if g$3372$20929 (begin '#f (cons (map cons g$3372$20927 (car g$3372$20929)) (cdr g$3372$20929))) '#f)) (g$3372$20919 (g$3372$13224 g$3372$20925)))) '#f)) ((lambda (g$3372$20931) (list g$3372$20931)) (g$3372$13220 g$3372$20925))) ((lambda (g$3372$20933) (if g$3372$20933 (begin '#f (cons (list (begin 'x* '())) g$3372$20933)) '#f)) ((lambda (g$3372$20935) (list g$3372$20935)) g$3372$20925)))))) (lambda (g$3372$20921) ((lambda (g$3372$20923) (if g$3372$20923 (begin '#f (append (car g$3372$20923) (cdr g$3372$20923))) '#f)) (g$3372$20919 g$3372$20921)))) g$3372$20893))) g$3372$20881))) ((letrec ((g$3372$20937 (lambda (g$3372$20939) (if (g$3372$13212 g$3372$20939) ((lambda (g$3372$20941) (if g$3372$20941 (begin '#f ((lambda (g$3372$20943) (if g$3372$20943 (begin '#f (map cons g$3372$20941 g$3372$20943)) '#f)) (g$3372$20937 (g$3372$13224 g$3372$20939)))) '#f)) ((lambda (g$3372$20945) (list g$3372$20945)) (g$3372$13220 g$3372$20939))) (if (g$3372$13216 g$3372$20939) (list (begin 'x* '())) '#f))))) g$3372$20937) g$3372$20881))) g$3372$20873))) (set! g$3372$13603 (lambda (g$3372$20947 g$3372$20948 g$3372$20949 g$3372$20950) (if (null? g$3372$20947) (values '() '()) (call-with-values (lambda () (g$3372$13601 (car g$3372$20947) (car g$3372$20948) g$3372$20949 g$3372$20950)) (lambda (g$3372$20955 g$3372$20956) (call-with-values (lambda () (g$3372$13603 (cdr g$3372$20947) (cdr g$3372$20948) g$3372$20949 g$3372$20950)) (lambda (g$3372$20959 g$3372$20960) (values (cons g$3372$20955 g$3372$20959) (cons g$3372$20956 g$3372$20960))))))))) (set! g$3372$13605 (lambda (g$3372$20963 g$3372$20964 g$3372$20965) ((lambda (g$3372$20969) (if (memv g$3372$20969 '(defun)) ((lambda (g$3372$20974) ((lambda (g$3372$20976 g$3372$20977) (call-with-values (lambda () (g$3372$13601 g$3372$20976 g$3372$20977 g$3372$20964 g$3372$20965)) (lambda (g$3372$20980 g$3372$20981) (g$3372$13115 '#f g$3372$20980 g$3372$20981)))) (car g$3372$20974) (cdr g$3372$20974))) (cdr g$3372$20963)) (if (memv g$3372$20969 '(expr)) ((lambda (g$3372$20972) (g$3372$13597 g$3372$20972 g$3372$20964 g$3372$20965)) (cdr g$3372$20963)) (if (memv g$3372$20969 '(top-expr)) ((lambda (g$3372$20970) (g$3372$13109 '#f (list (g$3372$13597 g$3372$20970 g$3372$20964 g$3372$20965) (g$3372$13108)))) (cdr g$3372$20963)) (error 'chi-rhs '"invalid rhs" g$3372$20963))))) (car g$3372$20963)))) (set! g$3372$13607 (lambda (g$3372$20984 g$3372$20985 g$3372$20986) (letrec ((g$3372$20990 (lambda (g$3372$20992) (if (null? g$3372$20992) '() ((lambda (g$3372$20994) (cons g$3372$20994 (g$3372$20990 (cdr g$3372$20992)))) (g$3372$13605 (car g$3372$20992) g$3372$20985 g$3372$20986)))))) (g$3372$20990 g$3372$20984)))) (set! g$3372$13609 (lambda (g$3372$20996 g$3372$20997 g$3372$20998) (if (null? g$3372$20997) '#f (if (g$3372$13232 g$3372$20996 (car g$3372$20997)) (car g$3372$20998) (g$3372$13609 g$3372$20996 (cdr g$3372$20997) (cdr g$3372$20998)))))) (set! g$3372$13611 (lambda (g$3372$21002) (letrec ((g$3372$21004 (lambda (g$3372$21006 g$3372$21007) (if (null? g$3372$21006) g$3372$21007 ((lambda (g$3372$21010) (if g$3372$21010 ((lambda (g$3372$21012) (g$3372$21004 (cdr g$3372$21006) (cons (list (car g$3372$21006) g$3372$21012) g$3372$21007))) g$3372$21010) (g$3372$21004 (cdr g$3372$21006) g$3372$21007))) (g$3372$13609 (car g$3372$21006) (cdr g$3372$21006) (cdr g$3372$21006))))))) (g$3372$21004 g$3372$21002 '())))) (set! g$3372$13613 (lambda (g$3372$21014 g$3372$21015 g$3372$21016) ((lambda (g$3372$21020) (call-with-values (lambda () (g$3372$13619 (map (lambda (g$3372$21022) (g$3372$13206 g$3372$21020 g$3372$21022)) (g$3372$13222 g$3372$21014)) g$3372$21015 g$3372$21016 '() '() '() '() g$3372$21020 '#f)) (lambda (g$3372$21024 g$3372$21025 g$3372$21026 g$3372$21027 g$3372$21028 g$3372$21029 g$3372$21030) (begin (if (null? g$3372$21024) (error 'expander '"no expression in body" (g$3372$13244 g$3372$21024 '())) (void)) ((lambda (g$3372$21038 g$3372$21039) (g$3372$13106 '#f (reverse g$3372$21027) (reverse g$3372$21038) (g$3372$13109 '#f g$3372$21039))) (g$3372$13607 g$3372$21028 g$3372$21025 g$3372$21026) (g$3372$13593 (append (apply append (reverse g$3372$21029)) g$3372$21024) g$3372$21025 g$3372$21026)))))) (g$3372$13163)))) (set! g$3372$13615 (lambda (g$3372$21042) ((lambda (g$3372$21044) ((lambda (g$3372$21046) (if (if g$3372$21046 (begin '#f (apply (lambda (g$3372$21048 g$3372$21049) '#t) g$3372$21046)) '#f) (apply (lambda (g$3372$21052 g$3372$21053) (begin (if (for-all g$3372$13226 g$3372$21052) (void) (error 'expander '"module exports must be identifiers" (g$3372$13244 g$3372$21042 '()))) (values '#f g$3372$21052 g$3372$21053))) g$3372$21046) ((lambda (g$3372$21056) ((lambda (g$3372$21058) (if (if g$3372$21058 (begin '#f (apply (lambda (g$3372$21060 g$3372$21061 g$3372$21062) '#t) g$3372$21058)) '#f) (apply (lambda (g$3372$21066 g$3372$21067 g$3372$21068) (begin (if (g$3372$13226 g$3372$21066) (void) (error 'expander '"module name must be an identifier" (g$3372$13244 g$3372$21042 '()))) (if (for-all g$3372$13226 g$3372$21067) (void) (error 'expander '"module exports must be identifiers" (g$3372$13244 g$3372$21042 '()))) (values g$3372$21066 g$3372$21067 g$3372$21068))) g$3372$21058) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$21056 '())))) ((lambda (g$3372$21072) (if (g$3372$13212 g$3372$21072) (begin '#f ((lambda (g$3372$21074) (if g$3372$21074 (begin '#f ((lambda (g$3372$21076) (if g$3372$21076 (begin '#f (append g$3372$21074 g$3372$21076)) '#f)) ((lambda (g$3372$21078) (if (g$3372$13212 g$3372$21078) (begin '#f ((lambda (g$3372$21080) (if g$3372$21080 (begin '#f ((lambda (g$3372$21082) (if g$3372$21082 (begin '#f (append g$3372$21080 g$3372$21082)) '#f)) ((lambda (g$3372$21084) (if (g$3372$13212 g$3372$21084) (begin '#f ((lambda (g$3372$21086) (if g$3372$21086 (begin '#f ((lambda (g$3372$21088) (if g$3372$21088 (begin '#f (append g$3372$21086 g$3372$21088)) '#f)) ((letrec ((g$3372$21090 (lambda (g$3372$21092) (if (g$3372$13212 g$3372$21092) ((lambda (g$3372$21094) (if g$3372$21094 (begin '#f ((lambda (g$3372$21096) (if g$3372$21096 (begin '#f (map cons g$3372$21094 g$3372$21096)) '#f)) (g$3372$21090 (g$3372$13224 g$3372$21092)))) '#f)) ((lambda (g$3372$21098) (list g$3372$21098)) (g$3372$13220 g$3372$21092))) (if (g$3372$13216 g$3372$21092) (list (begin 'b* '())) '#f))))) g$3372$21090) (g$3372$13224 g$3372$21084)))) '#f)) ((letrec ((g$3372$21100 (lambda (g$3372$21102) (if (g$3372$13212 g$3372$21102) ((lambda (g$3372$21104) (if g$3372$21104 (begin '#f ((lambda (g$3372$21106) (if g$3372$21106 (begin '#f (map cons g$3372$21104 g$3372$21106)) '#f)) (g$3372$21100 (g$3372$13224 g$3372$21102)))) '#f)) ((lambda (g$3372$21108) (list g$3372$21108)) (g$3372$13220 g$3372$21102))) (if (g$3372$13216 g$3372$21102) (list (begin 'export* '())) '#f))))) g$3372$21100) (g$3372$13220 g$3372$21084)))) '#f)) (g$3372$13224 g$3372$21078)))) '#f)) ((lambda (g$3372$21110) (list g$3372$21110)) (g$3372$13220 g$3372$21078)))) '#f)) (g$3372$13224 g$3372$21072)))) '#f)) ((lambda (g$3372$21112) '()) (g$3372$13220 g$3372$21072)))) '#f)) g$3372$21056))) g$3372$21044))) ((lambda (g$3372$21114) (if (g$3372$13212 g$3372$21114) (begin '#f ((lambda (g$3372$21116) (if g$3372$21116 (begin '#f ((lambda (g$3372$21118) (if g$3372$21118 (begin '#f (append g$3372$21116 g$3372$21118)) '#f)) ((lambda (g$3372$21120) (if (g$3372$13212 g$3372$21120) (begin '#f ((lambda (g$3372$21122) (if g$3372$21122 (begin '#f ((lambda (g$3372$21124) (if g$3372$21124 (begin '#f (append g$3372$21122 g$3372$21124)) '#f)) ((letrec ((g$3372$21126 (lambda (g$3372$21128) (if (g$3372$13212 g$3372$21128) ((lambda (g$3372$21130) (if g$3372$21130 (begin '#f ((lambda (g$3372$21132) (if g$3372$21132 (begin '#f (map cons g$3372$21130 g$3372$21132)) '#f)) (g$3372$21126 (g$3372$13224 g$3372$21128)))) '#f)) ((lambda (g$3372$21134) (list g$3372$21134)) (g$3372$13220 g$3372$21128))) (if (g$3372$13216 g$3372$21128) (list (begin 'b* '())) '#f))))) g$3372$21126) (g$3372$13224 g$3372$21120)))) '#f)) ((letrec ((g$3372$21136 (lambda (g$3372$21138) (if (g$3372$13212 g$3372$21138) ((lambda (g$3372$21140) (if g$3372$21140 (begin '#f ((lambda (g$3372$21142) (if g$3372$21142 (begin '#f (map cons g$3372$21140 g$3372$21142)) '#f)) (g$3372$21136 (g$3372$13224 g$3372$21138)))) '#f)) ((lambda (g$3372$21144) (list g$3372$21144)) (g$3372$13220 g$3372$21138))) (if (g$3372$13216 g$3372$21138) (list (begin 'export* '())) '#f))))) g$3372$21136) (g$3372$13220 g$3372$21120)))) '#f)) (g$3372$13224 g$3372$21114)))) '#f)) ((lambda (g$3372$21146) '()) (g$3372$13220 g$3372$21114)))) '#f)) g$3372$21044))) g$3372$21042))) (set! g$3372$13617 (lambda (g$3372$21148 g$3372$21149 g$3372$21150 g$3372$21151 g$3372$21152 g$3372$21153 g$3372$21154) (call-with-values (lambda () (g$3372$13615 g$3372$21148)) (lambda (g$3372$21162 g$3372$21163 g$3372$21164) ((lambda (g$3372$21168) ((lambda (g$3372$21170) ((lambda () (call-with-values (lambda () (g$3372$13619 g$3372$21170 g$3372$21149 g$3372$21150 g$3372$21151 g$3372$21152 g$3372$21153 g$3372$21154 g$3372$21168 '#f)) (lambda (g$3372$21172 g$3372$21173 g$3372$21174 g$3372$21175 g$3372$21176 g$3372$21177 g$3372$21178) ((lambda (g$3372$21186 g$3372$21187) (if (not g$3372$21162) (values g$3372$21175 g$3372$21176 g$3372$21163 g$3372$21186 g$3372$21173 g$3372$21174 g$3372$21187 g$3372$21178) ((lambda (g$3372$21190 g$3372$21191) (values g$3372$21175 g$3372$21176 (list g$3372$21162) (list g$3372$21190) (cons (cons g$3372$21190 (cons '$module g$3372$21191)) g$3372$21173) (cons (cons g$3372$21190 (cons '$module g$3372$21191)) g$3372$21174) g$3372$21187 g$3372$21178)) (g$3372$13140 'module) (cons g$3372$21163 g$3372$21186)))) (map (lambda (g$3372$21194) ((lambda (g$3372$21196) (if g$3372$21196 g$3372$21196 (begin '#f (error 'expander '"cannot find module export" (g$3372$13244 g$3372$21194 '()))))) (g$3372$13248 (g$3372$13202 (g$3372$13228 g$3372$21194) (g$3372$13182 g$3372$21194) (list g$3372$21168))))) g$3372$21163) (cons g$3372$21172 g$3372$21177))))))) (map (lambda (g$3372$21198) (g$3372$13206 g$3372$21168 g$3372$21198)) (g$3372$13222 g$3372$21164)))) (g$3372$13163)))))) (set! g$3372$13619 (lambda (g$3372$21200 g$3372$21201 g$3372$21202 g$3372$21203 g$3372$21204 g$3372$21205 g$3372$21206 g$3372$21207 g$3372$21208) (if (null? g$3372$21200) (values g$3372$21200 g$3372$21201 g$3372$21202 g$3372$21203 g$3372$21204 g$3372$21205 g$3372$21206) ((lambda (g$3372$21218) (call-with-values (lambda () (g$3372$13258 g$3372$21218 g$3372$21201)) (lambda (g$3372$21220 g$3372$21221 g$3372$21222) ((lambda (g$3372$21226) ((lambda (g$3372$21228) (if (memv g$3372$21228 '(define)) (call-with-values (lambda () (g$3372$13475 g$3372$21218)) (lambda (g$3372$21414 g$3372$21415) (begin (if (g$3372$13240 g$3372$21414 g$3372$21226) (error 'expander '"cannot redefine keyword" (g$3372$13244 g$3372$21218 '())) (void)) ((lambda (g$3372$21418 g$3372$21419) (begin (g$3372$13165 g$3372$21207 g$3372$21414 g$3372$21419) (g$3372$13619 (cdr g$3372$21200) (g$3372$13481 g$3372$21419 g$3372$21418 g$3372$21201) g$3372$21202 (cons g$3372$21418 g$3372$21203) (cons g$3372$21415 g$3372$21204) g$3372$21205 g$3372$21226 g$3372$21207 g$3372$21208))) (g$3372$13136 g$3372$21414) (g$3372$13140 g$3372$21414))))) (if (memv g$3372$21228 '(define-syntax)) (call-with-values (lambda () (g$3372$13477 g$3372$21218)) (lambda (g$3372$21404 g$3372$21405) (begin (if (g$3372$13240 g$3372$21404 g$3372$21226) (error 'expander '"cannot redefine keyword" (g$3372$13244 g$3372$21218 '())) (void)) ((lambda (g$3372$21408 g$3372$21409) (begin (g$3372$13165 g$3372$21207 g$3372$21404 g$3372$21408) ((lambda (g$3372$21412) (g$3372$13619 (cdr g$3372$21200) (cons (cons g$3372$21408 g$3372$21412) g$3372$21201) (cons (cons g$3372$21408 g$3372$21412) g$3372$21202) g$3372$21203 g$3372$21204 g$3372$21205 g$3372$21226 g$3372$21207 g$3372$21208)) (g$3372$13276 g$3372$21409)))) (g$3372$13140 g$3372$21404) (g$3372$13631 g$3372$21405 g$3372$21202))))) (if (memv g$3372$21228 '(let-syntax letrec-syntax)) ((lambda (g$3372$21328) ((lambda (g$3372$21330) (if (if g$3372$21330 (begin '#f (apply (lambda (g$3372$21332 g$3372$21333 g$3372$21334) (if (g$3372$13236 g$3372$21332) (void) (error 'expander '"invalid identifiers" (g$3372$13244 g$3372$21218 '())))) g$3372$21330)) '#f) (apply (lambda (g$3372$21338 g$3372$21339 g$3372$21340) ((lambda (g$3372$21344) ((lambda (g$3372$21346) ((lambda (g$3372$21348) ((lambda () (g$3372$13619 (append (map (lambda (g$3372$21350) (g$3372$13206 g$3372$21346 g$3372$21350)) g$3372$21340) (cdr g$3372$21200)) (append (map cons g$3372$21344 g$3372$21348) g$3372$21201) (append (map cons g$3372$21344 g$3372$21348) g$3372$21202) g$3372$21203 g$3372$21204 g$3372$21205 g$3372$21226 g$3372$21207 g$3372$21208)))) (map (lambda (g$3372$21352) (g$3372$13276 (g$3372$13631 (if (eq? g$3372$21220 'let-syntax) g$3372$21352 (g$3372$13206 g$3372$21346 g$3372$21352)) g$3372$21202))) g$3372$21339))) (g$3372$13173 g$3372$21338 g$3372$21344))) (map g$3372$13140 g$3372$21338))) g$3372$21330) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$21328 '())))) ((lambda (g$3372$21354) (if (g$3372$13212 g$3372$21354) (begin '#f ((lambda (g$3372$21356) (if g$3372$21356 (begin '#f ((lambda (g$3372$21358) (if g$3372$21358 (begin '#f (append g$3372$21356 g$3372$21358)) '#f)) ((lambda (g$3372$21360) (if (g$3372$13212 g$3372$21360) (begin '#f ((lambda (g$3372$21362) (if g$3372$21362 (begin '#f ((lambda (g$3372$21364) (if g$3372$21364 (begin '#f (append g$3372$21362 g$3372$21364)) '#f)) ((letrec ((g$3372$21366 (lambda (g$3372$21368) (if (g$3372$13212 g$3372$21368) ((lambda (g$3372$21370) (if g$3372$21370 (begin '#f ((lambda (g$3372$21372) (if g$3372$21372 (begin '#f (map cons g$3372$21370 g$3372$21372)) '#f)) (g$3372$21366 (g$3372$13224 g$3372$21368)))) '#f)) ((lambda (g$3372$21374) (list g$3372$21374)) (g$3372$13220 g$3372$21368))) (if (g$3372$13216 g$3372$21368) (list (begin 'xbody* '())) '#f))))) g$3372$21366) (g$3372$13224 g$3372$21360)))) '#f)) ((letrec ((g$3372$21376 (lambda (g$3372$21378) (if (g$3372$13212 g$3372$21378) ((lambda (g$3372$21380) (if g$3372$21380 (begin '#f ((lambda (g$3372$21382) (if g$3372$21382 (begin '#f (map cons g$3372$21380 g$3372$21382)) '#f)) (g$3372$21376 (g$3372$13224 g$3372$21378)))) '#f)) ((lambda (g$3372$21384) (if (g$3372$13212 g$3372$21384) (begin '#f ((lambda (g$3372$21386) (if g$3372$21386 (begin '#f ((lambda (g$3372$21388) (if g$3372$21388 (begin '#f (append g$3372$21386 g$3372$21388)) '#f)) ((lambda (g$3372$21390) (if (g$3372$13212 g$3372$21390) (begin '#f ((lambda (g$3372$21392) (if g$3372$21392 (begin '#f ((lambda (g$3372$21394) (if g$3372$21394 (begin '#f (append g$3372$21392 g$3372$21394)) '#f)) ((lambda (g$3372$21396) (if (equal? (g$3372$13246 g$3372$21396) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$21390)))) '#f)) ((lambda (g$3372$21398) (list g$3372$21398)) (g$3372$13220 g$3372$21390)))) '#f)) (g$3372$13224 g$3372$21384)))) '#f)) ((lambda (g$3372$21400) (list g$3372$21400)) (g$3372$13220 g$3372$21384)))) '#f)) (g$3372$13220 g$3372$21378))) (if (g$3372$13216 g$3372$21378) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$3372$21376) (g$3372$13220 g$3372$21360)))) '#f)) (g$3372$13224 g$3372$21354)))) '#f)) ((lambda (g$3372$21402) '()) (g$3372$13220 g$3372$21354)))) '#f)) g$3372$21328))) g$3372$21218) (if (memv g$3372$21228 '(begin)) ((lambda (g$3372$21302) ((lambda (g$3372$21304) (if (if g$3372$21304 (begin '#f (apply (lambda (g$3372$21306) '#t) g$3372$21304)) '#f) (apply (lambda (g$3372$21308) (g$3372$13619 (append g$3372$21308 (cdr g$3372$21200)) g$3372$21201 g$3372$21202 g$3372$21203 g$3372$21204 g$3372$21205 g$3372$21226 g$3372$21207 g$3372$21208)) g$3372$21304) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$21302 '())))) ((lambda (g$3372$21310) (if (g$3372$13212 g$3372$21310) (begin '#f ((lambda (g$3372$21312) (if g$3372$21312 (begin '#f ((lambda (g$3372$21314) (if g$3372$21314 (begin '#f (append g$3372$21312 g$3372$21314)) '#f)) ((letrec ((g$3372$21316 (lambda (g$3372$21318) (if (g$3372$13212 g$3372$21318) ((lambda (g$3372$21320) (if g$3372$21320 (begin '#f ((lambda (g$3372$21322) (if g$3372$21322 (begin '#f (map cons g$3372$21320 g$3372$21322)) '#f)) (g$3372$21316 (g$3372$13224 g$3372$21318)))) '#f)) ((lambda (g$3372$21324) (list g$3372$21324)) (g$3372$13220 g$3372$21318))) (if (g$3372$13216 g$3372$21318) (list (begin 'x* '())) '#f))))) g$3372$21316) (g$3372$13224 g$3372$21310)))) '#f)) ((lambda (g$3372$21326) '()) (g$3372$13220 g$3372$21310)))) '#f)) g$3372$21302))) g$3372$21218) (if (memv g$3372$21228 '(global-macro global-macro!)) (g$3372$13619 (cons (g$3372$13206 g$3372$21207 (g$3372$13591 g$3372$21221 g$3372$21218)) (cdr g$3372$21200)) g$3372$21201 g$3372$21202 g$3372$21203 g$3372$21204 g$3372$21205 g$3372$21226 g$3372$21207 g$3372$21208) (if (memv g$3372$21228 '(local-macro local-macro!)) (g$3372$13619 (cons (g$3372$13206 g$3372$21207 (g$3372$13589 g$3372$21221 g$3372$21218)) (cdr g$3372$21200)) g$3372$21201 g$3372$21202 g$3372$21203 g$3372$21204 g$3372$21205 g$3372$21226 g$3372$21207 g$3372$21208) (if (memv g$3372$21228 '(macro macro!)) (g$3372$13619 (cons (g$3372$13206 g$3372$21207 (g$3372$13587 g$3372$21221 g$3372$21218)) (cdr g$3372$21200)) g$3372$21201 g$3372$21202 g$3372$21203 g$3372$21204 g$3372$21205 g$3372$21226 g$3372$21207 g$3372$21208) (if (memv g$3372$21228 '(module)) (call-with-values (lambda () (g$3372$13617 g$3372$21218 g$3372$21201 g$3372$21202 g$3372$21203 g$3372$21204 g$3372$21205 g$3372$21226)) (lambda (g$3372$21282 g$3372$21283 g$3372$21284 g$3372$21285 g$3372$21286 g$3372$21287 g$3372$21288 g$3372$21289) (begin (for-each (lambda (g$3372$21298 g$3372$21299) (g$3372$13165 g$3372$21207 g$3372$21298 g$3372$21299)) g$3372$21284 g$3372$21285) (g$3372$13619 (cdr g$3372$21200) g$3372$21286 g$3372$21287 g$3372$21282 g$3372$21283 g$3372$21288 g$3372$21289 g$3372$21207 g$3372$21208)))) (if (memv g$3372$21228 '(import)) (begin ((lambda () ((lambda (g$3372$21229) (begin (set! g$3372$21229 (lambda (g$3372$21231 g$3372$21232) ((lambda (g$3372$21235) ((lambda (g$3372$21237) (if (if g$3372$21237 (begin '#f (apply (lambda (g$3372$21239) (g$3372$13226 g$3372$21239)) g$3372$21237)) '#f) (apply (lambda (g$3372$21241) (call-with-values (lambda () (g$3372$13258 g$3372$21241 g$3372$21232)) (lambda (g$3372$21243 g$3372$21244 g$3372$21245) ((lambda (g$3372$21249) (if (memv g$3372$21249 '($module)) ((lambda (g$3372$21250) ((lambda (g$3372$21252 g$3372$21253) (values g$3372$21252 g$3372$21253)) (car g$3372$21250) (cdr g$3372$21250))) g$3372$21244) (error 'expander '"invalid import" (g$3372$13244 g$3372$21231 '())))) g$3372$21243)))) g$3372$21237) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$21235 '())))) ((lambda (g$3372$21256) (if (g$3372$13212 g$3372$21256) (begin '#f ((lambda (g$3372$21258) (if g$3372$21258 (begin '#f ((lambda (g$3372$21260) (if g$3372$21260 (begin '#f (append g$3372$21258 g$3372$21260)) '#f)) ((lambda (g$3372$21262) (if (g$3372$13212 g$3372$21262) (begin '#f ((lambda (g$3372$21264) (if g$3372$21264 (begin '#f ((lambda (g$3372$21266) (if g$3372$21266 (begin '#f (append g$3372$21264 g$3372$21266)) '#f)) ((lambda (g$3372$21268) (if (equal? (g$3372$13246 g$3372$21268) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$21262)))) '#f)) ((lambda (g$3372$21270) (list g$3372$21270)) (g$3372$13220 g$3372$21262)))) '#f)) (g$3372$13224 g$3372$21256)))) '#f)) ((lambda (g$3372$21272) '()) (g$3372$13220 g$3372$21256)))) '#f)) g$3372$21235))) g$3372$21231))) (call-with-values (lambda () (g$3372$21229 g$3372$21218 g$3372$21201)) (lambda (g$3372$21274 g$3372$21275) (for-each (lambda (g$3372$21278 g$3372$21279) (g$3372$13165 g$3372$21207 g$3372$21278 g$3372$21279)) g$3372$21274 g$3372$21275))))) '#f))) (g$3372$13619 (cdr g$3372$21200) g$3372$21201 g$3372$21202 g$3372$21203 g$3372$21204 g$3372$21205 g$3372$21226 g$3372$21207 g$3372$21208)) (if g$3372$21208 (g$3372$13619 (cdr g$3372$21200) g$3372$21201 g$3372$21202 (cons (g$3372$13136 'dummy) g$3372$21203) (cons (cons 'top-expr g$3372$21218) g$3372$21204) g$3372$21205 g$3372$21226 g$3372$21207 g$3372$21208) (values g$3372$21200 g$3372$21201 g$3372$21202 g$3372$21203 g$3372$21204 g$3372$21205 g$3372$21226)))))))))))) g$3372$21220)) (if (g$3372$13226 g$3372$21222) (cons g$3372$21222 g$3372$21206) g$3372$21206))))) (car g$3372$21200))))) (set! g$3372$13621 (lambda (g$3372$21422 g$3372$21423 g$3372$21424) (begin (g$3372$12834 (g$3372$13712) g$3372$21422 g$3372$21423) (g$3372$12833 (g$3372$13712) g$3372$21423 g$3372$21424)))) (set! g$3372$13623 (lambda (g$3372$21428 g$3372$21429) (g$3372$13625 g$3372$21428 g$3372$21429))) (set! g$3372$13625 (lambda (g$3372$21432 g$3372$21433) ((lambda (g$3372$21436) ((lambda (g$3372$21438) ((lambda (g$3372$21440) (if (memv g$3372$21440 '(global)) ((lambda (g$3372$21441) ((lambda (g$3372$21443 g$3372$21444) (if (eq? g$3372$21443 (g$3372$13712)) g$3372$21444 (error 'expander '"cannot modify imported binding" (g$3372$13244 g$3372$21433 '())))) (car g$3372$21441) (cdr g$3372$21441))) (g$3372$13256 g$3372$21438)) (error 'expander '"cannot modify binding in" (g$3372$13244 g$3372$21433 '())))) (g$3372$13254 g$3372$21438))) (g$3372$12832 g$3372$21436))) (g$3372$13248 g$3372$21432)))) (set! g$3372$13627 (lambda (g$3372$21447) ((lambda (g$3372$21449) ((lambda (g$3372$21451) (if (if g$3372$21451 (begin '#f (apply (lambda (g$3372$21453 g$3372$21454) (g$3372$13226 g$3372$21453)) g$3372$21451)) '#f) (apply (lambda (g$3372$21457 g$3372$21458) ((lambda (g$3372$21461) ((lambda (g$3372$21463) (values g$3372$21461 g$3372$21463)) (g$3372$13597 g$3372$21458 '() '()))) (g$3372$13625 g$3372$21457 g$3372$21447))) g$3372$21451) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$21449 '())))) ((lambda (g$3372$21465) (if (g$3372$13212 g$3372$21465) (begin '#f ((lambda (g$3372$21467) (if g$3372$21467 (begin '#f ((lambda (g$3372$21469) (if g$3372$21469 (begin '#f (append g$3372$21467 g$3372$21469)) '#f)) ((lambda (g$3372$21471) (if (g$3372$13212 g$3372$21471) (begin '#f ((lambda (g$3372$21473) (if g$3372$21473 (begin '#f ((lambda (g$3372$21475) (if g$3372$21475 (begin '#f (append g$3372$21473 g$3372$21475)) '#f)) ((lambda (g$3372$21477) (if (g$3372$13212 g$3372$21477) (begin '#f ((lambda (g$3372$21479) (if g$3372$21479 (begin '#f ((lambda (g$3372$21481) (if g$3372$21481 (begin '#f (append g$3372$21479 g$3372$21481)) '#f)) ((lambda (g$3372$21483) (if (equal? (g$3372$13246 g$3372$21483) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$21477)))) '#f)) ((lambda (g$3372$21485) (list g$3372$21485)) (g$3372$13220 g$3372$21477)))) '#f)) (g$3372$13224 g$3372$21471)))) '#f)) ((lambda (g$3372$21487) (list g$3372$21487)) (g$3372$13220 g$3372$21471)))) '#f)) (g$3372$13224 g$3372$21465)))) '#f)) ((lambda (g$3372$21489) '()) (g$3372$13220 g$3372$21465)))) '#f)) g$3372$21449))) g$3372$21447))) (set! g$3372$13629 (lambda (g$3372$21491 g$3372$21492) (if (null? g$3372$21491) g$3372$21492 ((lambda (g$3372$21495) (call-with-values (lambda () (g$3372$13258 g$3372$21495 '())) (lambda (g$3372$21497 g$3372$21498 g$3372$21499) ((lambda (g$3372$21503) (if (memv g$3372$21503 '(define)) (call-with-values (lambda () (g$3372$13475 g$3372$21495)) (lambda (g$3372$21544 g$3372$21545) ((lambda (g$3372$21548) ((lambda (g$3372$21550) (g$3372$13629 (cdr g$3372$21491) (cons (cons g$3372$21548 g$3372$21550) g$3372$21492))) (g$3372$13605 g$3372$21545 '() '()))) (g$3372$13625 g$3372$21544 g$3372$21495)))) (if (memv g$3372$21503 '(set!)) (call-with-values (lambda () (g$3372$13627 g$3372$21495)) (lambda (g$3372$21540 g$3372$21541) (g$3372$13629 (cdr g$3372$21491) (cons (cons g$3372$21540 g$3372$21541) g$3372$21492)))) (if (memv g$3372$21503 '(define-syntax)) (call-with-values (lambda () (g$3372$13477 g$3372$21495)) (lambda (g$3372$21530 g$3372$21531) ((lambda (g$3372$21534) ((lambda (g$3372$21536) ((lambda (g$3372$21538) (begin (g$3372$13621 (g$3372$13228 g$3372$21530) g$3372$21534 g$3372$21538) (g$3372$13629 (cdr g$3372$21491) g$3372$21492))) (g$3372$13276 g$3372$21536))) (g$3372$13631 g$3372$21531 '()))) (g$3372$13623 g$3372$21530 g$3372$21495)))) (if (memv g$3372$21503 '(let-syntax letrec-syntax)) (error 'chi-top* '"not supported yet at top level" g$3372$21497) (if (memv g$3372$21503 '(begin)) ((lambda (g$3372$21504) ((lambda (g$3372$21506) (if (if g$3372$21506 (begin '#f (apply (lambda (g$3372$21508) '#t) g$3372$21506)) '#f) (apply (lambda (g$3372$21510) (g$3372$13629 (append g$3372$21510 (cdr g$3372$21491)) g$3372$21492)) g$3372$21506) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$21504 '())))) ((lambda (g$3372$21512) (if (g$3372$13212 g$3372$21512) (begin '#f ((lambda (g$3372$21514) (if g$3372$21514 (begin '#f ((lambda (g$3372$21516) (if g$3372$21516 (begin '#f (append g$3372$21514 g$3372$21516)) '#f)) ((letrec ((g$3372$21518 (lambda (g$3372$21520) (if (g$3372$13212 g$3372$21520) ((lambda (g$3372$21522) (if g$3372$21522 (begin '#f ((lambda (g$3372$21524) (if g$3372$21524 (begin '#f (map cons g$3372$21522 g$3372$21524)) '#f)) (g$3372$21518 (g$3372$13224 g$3372$21520)))) '#f)) ((lambda (g$3372$21526) (list g$3372$21526)) (g$3372$13220 g$3372$21520))) (if (g$3372$13216 g$3372$21520) (list (begin 'x* '())) '#f))))) g$3372$21518) (g$3372$13224 g$3372$21512)))) '#f)) ((lambda (g$3372$21528) '()) (g$3372$13220 g$3372$21512)))) '#f)) g$3372$21504))) g$3372$21495) (if (memv g$3372$21503 '(global-macro global-macro!)) (g$3372$13629 (cons (g$3372$13591 g$3372$21498 g$3372$21495) (cdr g$3372$21491)) g$3372$21492) (if (memv g$3372$21503 '(local-macro local-macro!)) (g$3372$13629 (cons (g$3372$13589 g$3372$21498 g$3372$21495) (cdr g$3372$21491)) g$3372$21492) (if (memv g$3372$21503 '(macro macro!)) (g$3372$13629 (cons (g$3372$13587 g$3372$21498 g$3372$21495) (cdr g$3372$21491)) g$3372$21492) (g$3372$13629 (cdr g$3372$21491) (cons (cons '#f (g$3372$13597 g$3372$21495 '() '())) g$3372$21492))))))))))) g$3372$21497)))) (car g$3372$21491))))) (set! g$3372$13631 (lambda (g$3372$21552 g$3372$21553) ((lambda (g$3372$21556) ((lambda (g$3372$21558) (begin (for-each ((lambda (g$3372$21560) (lambda (g$3372$21562) (begin (g$3372$12831 g$3372$21562) (g$3372$21560 g$3372$21562)))) (g$3372$13647)) (g$3372$21556)) g$3372$21558)) ((lambda (g$3372$21568 g$3372$21569 g$3372$21570 g$3372$21571) ((lambda (g$3372$21576) (dynamic-wind g$3372$21576 (lambda () (g$3372$13597 g$3372$21552 g$3372$21553 g$3372$21553)) g$3372$21576)) (lambda () (begin ((lambda (g$3372$21578) (begin (g$3372$21568 g$3372$21570) (set! g$3372$21570 g$3372$21578))) (g$3372$21568)) ((lambda (g$3372$21580) (begin (g$3372$21569 g$3372$21571) (set! g$3372$21571 g$3372$21580))) (g$3372$21569)))))) g$3372$13645 g$3372$13647 g$3372$21556 (lambda (g$3372$21582) (values))))) (g$3372$13643)))) (set! g$3372$13633 (lambda (g$3372$21584) (letrec ((g$3372$21586 (lambda (g$3372$21588 g$3372$21589 g$3372$21590) (if (null? g$3372$21588) (begin ((lambda (g$3372$21594) (if (g$3372$13236 g$3372$21594) (void) (error 'expander '"invalid exports" (g$3372$13611 g$3372$21594)))) (map (lambda (g$3372$21596) (g$3372$13202 g$3372$21596 g$3372$13132 '())) g$3372$21590)) (values g$3372$21589 g$3372$21590)) ((lambda (g$3372$21598) ((lambda (g$3372$21600) (if (if g$3372$21600 (begin '#f (apply (lambda (g$3372$21602 g$3372$21603 g$3372$21604) '#t) g$3372$21600)) '#f) (apply (lambda (g$3372$21608 g$3372$21609 g$3372$21610) (begin (if (if (eq? g$3372$21608 'rename) (if (for-all symbol? g$3372$21609) (begin '#f (for-all symbol? g$3372$21610)) '#f) '#f) (void) (error 'expander '"invalid export specifier" (car g$3372$21588))) (g$3372$21586 (cdr g$3372$21588) (append g$3372$21609 g$3372$21589) (append g$3372$21610 g$3372$21590)))) g$3372$21600) ((lambda (g$3372$21614) ((lambda (g$3372$21616) (if (if g$3372$21616 (begin '#f (apply (lambda (g$3372$21618) '#t) g$3372$21616)) '#f) (apply (lambda (g$3372$21620) (begin (if (symbol? g$3372$21620) (void) (error 'expander '"invalid export" g$3372$21620)) (g$3372$21586 (cdr g$3372$21588) (cons g$3372$21620 g$3372$21589) (cons g$3372$21620 g$3372$21590)))) g$3372$21616) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$21614 '())))) ((lambda (g$3372$21622) (list g$3372$21622)) g$3372$21614))) g$3372$21598))) ((lambda (g$3372$21624) (if (g$3372$13212 g$3372$21624) (begin '#f ((lambda (g$3372$21626) (if g$3372$21626 (begin '#f ((lambda (g$3372$21628) (if g$3372$21628 (begin '#f (append g$3372$21626 g$3372$21628)) '#f)) ((letrec ((g$3372$21630 (lambda (g$3372$21632) (if (g$3372$13212 g$3372$21632) ((lambda (g$3372$21634) (if g$3372$21634 (begin '#f ((lambda (g$3372$21636) (if g$3372$21636 (begin '#f (map cons g$3372$21634 g$3372$21636)) '#f)) (g$3372$21630 (g$3372$13224 g$3372$21632)))) '#f)) ((lambda (g$3372$21638) (if (g$3372$13212 g$3372$21638) (begin '#f ((lambda (g$3372$21640) (if g$3372$21640 (begin '#f ((lambda (g$3372$21642) (if g$3372$21642 (begin '#f (append g$3372$21640 g$3372$21642)) '#f)) ((lambda (g$3372$21644) (if (g$3372$13212 g$3372$21644) (begin '#f ((lambda (g$3372$21646) (if g$3372$21646 (begin '#f ((lambda (g$3372$21648) (if g$3372$21648 (begin '#f (append g$3372$21646 g$3372$21648)) '#f)) ((lambda (g$3372$21650) (if (equal? (g$3372$13246 g$3372$21650) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$21644)))) '#f)) ((lambda (g$3372$21652) (list g$3372$21652)) (g$3372$13220 g$3372$21644)))) '#f)) (g$3372$13224 g$3372$21638)))) '#f)) ((lambda (g$3372$21654) (list g$3372$21654)) (g$3372$13220 g$3372$21638)))) '#f)) (g$3372$13220 g$3372$21632))) (if (g$3372$13216 g$3372$21632) (list (begin 'i* '()) (begin 'e* '())) '#f))))) g$3372$21630) (g$3372$13224 g$3372$21624)))) '#f)) ((lambda (g$3372$21656) (list g$3372$21656)) (g$3372$13220 g$3372$21624)))) '#f)) g$3372$21598))) (car g$3372$21588)))))) (g$3372$21586 g$3372$21584 '() '())))) (set! g$3372$13635 (lambda (g$3372$21658) ((lambda (g$3372$21660) (begin (set! g$3372$21660 (lambda (g$3372$21662) ((lambda (g$3372$21664) ((lambda (g$3372$21666) (if (if g$3372$21666 (begin '#f (apply (lambda (g$3372$21668) (for-all (lambda (g$3372$21670) (if (integer? g$3372$21670) (begin '#f (exact? g$3372$21670)) '#f)) g$3372$21668)) g$3372$21666)) '#f) (apply (lambda (g$3372$21672) (values '() g$3372$21672)) g$3372$21666) ((lambda (g$3372$21674) ((lambda (g$3372$21676) (if (if g$3372$21676 (begin '#f (apply (lambda (g$3372$21678 g$3372$21679) (symbol? g$3372$21678)) g$3372$21676)) '#f) (apply (lambda (g$3372$21682 g$3372$21683) (call-with-values (lambda () (g$3372$21660 g$3372$21683)) (lambda (g$3372$21686 g$3372$21687) (values (cons g$3372$21682 g$3372$21686) g$3372$21687)))) g$3372$21676) ((lambda (g$3372$21690) ((lambda (g$3372$21692) (if (if g$3372$21692 (begin '#f (apply (lambda () '#t) g$3372$21692)) '#f) (apply (lambda () (values '() '())) g$3372$21692) ((lambda (g$3372$21694) ((lambda (g$3372$21696) (if (if g$3372$21696 (begin '#f (apply (lambda () '#t) g$3372$21696)) '#f) (apply (lambda () (error 'expander '"invalid library name" (g$3372$13244 g$3372$21658 '()))) g$3372$21696) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$21694 '())))) ((lambda (g$3372$21698) '()) g$3372$21694))) g$3372$21690))) ((lambda (g$3372$21700) (if (equal? (g$3372$13246 g$3372$21700) '()) (begin '#f '()) '#f)) g$3372$21690))) g$3372$21674))) ((lambda (g$3372$21702) (if (g$3372$13212 g$3372$21702) (begin '#f ((lambda (g$3372$21704) (if g$3372$21704 (begin '#f ((lambda (g$3372$21706) (if g$3372$21706 (begin '#f (append g$3372$21704 g$3372$21706)) '#f)) ((lambda (g$3372$21708) (list g$3372$21708)) (g$3372$13224 g$3372$21702)))) '#f)) ((lambda (g$3372$21710) (list g$3372$21710)) (g$3372$13220 g$3372$21702)))) '#f)) g$3372$21674))) g$3372$21664))) ((lambda (g$3372$21712) (if (g$3372$13212 g$3372$21712) (begin '#f ((lambda (g$3372$21714) (if g$3372$21714 (begin '#f ((lambda (g$3372$21716) (if g$3372$21716 (begin '#f (append g$3372$21714 g$3372$21716)) '#f)) ((lambda (g$3372$21718) (if (equal? (g$3372$13246 g$3372$21718) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$21712)))) '#f)) ((letrec ((g$3372$21720 (lambda (g$3372$21722) (if (g$3372$13212 g$3372$21722) ((lambda (g$3372$21724) (if g$3372$21724 (begin '#f ((lambda (g$3372$21726) (if g$3372$21726 (begin '#f (map cons g$3372$21724 g$3372$21726)) '#f)) (g$3372$21720 (g$3372$13224 g$3372$21722)))) '#f)) ((lambda (g$3372$21728) (list g$3372$21728)) (g$3372$13220 g$3372$21722))) (if (g$3372$13216 g$3372$21722) (list (begin 'v* '())) '#f))))) g$3372$21720) (g$3372$13220 g$3372$21712)))) '#f)) g$3372$21664))) g$3372$21662))) (call-with-values (lambda () (g$3372$21660 g$3372$21658)) (lambda (g$3372$21730 g$3372$21731) (begin (if (null? g$3372$21730) (error 'expander '"empty library name" (g$3372$13244 g$3372$21658 '())) (void)) (values g$3372$21730 g$3372$21731)))))) '#f))) (set! g$3372$13637 (lambda (g$3372$21734) ((lambda (g$3372$21736) ((lambda (g$3372$21738) (if (if g$3372$21738 (begin '#f (apply (lambda (g$3372$21740 g$3372$21741 g$3372$21742 g$3372$21743 g$3372$21744 g$3372$21745 g$3372$21746) (if (eq? g$3372$21742 'export) (if (eq? g$3372$21744 'import) (begin '#f (eq? g$3372$21740 'library)) '#f) '#f)) g$3372$21738)) '#f) (apply (lambda (g$3372$21754 g$3372$21755 g$3372$21756 g$3372$21757 g$3372$21758 g$3372$21759 g$3372$21760) (values g$3372$21755 g$3372$21757 g$3372$21759 g$3372$21760)) g$3372$21738) ((lambda (g$3372$21768) ((lambda (g$3372$21770) (if (if g$3372$21770 (begin '#f (apply (lambda () '#t) g$3372$21770)) '#f) (apply (lambda () (error 'expander '"malformed library" (g$3372$13244 g$3372$21734 '()))) g$3372$21770) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$21768 '())))) ((lambda (g$3372$21772) '()) g$3372$21768))) g$3372$21736))) ((lambda (g$3372$21774) (if (g$3372$13212 g$3372$21774) (begin '#f ((lambda (g$3372$21776) (if g$3372$21776 (begin '#f ((lambda (g$3372$21778) (if g$3372$21778 (begin '#f (append g$3372$21776 g$3372$21778)) '#f)) ((lambda (g$3372$21780) (if (g$3372$13212 g$3372$21780) (begin '#f ((lambda (g$3372$21782) (if g$3372$21782 (begin '#f ((lambda (g$3372$21784) (if g$3372$21784 (begin '#f (append g$3372$21782 g$3372$21784)) '#f)) ((lambda (g$3372$21786) (if (g$3372$13212 g$3372$21786) (begin '#f ((lambda (g$3372$21788) (if g$3372$21788 (begin '#f ((lambda (g$3372$21790) (if g$3372$21790 (begin '#f (append g$3372$21788 g$3372$21790)) '#f)) ((lambda (g$3372$21792) (if (g$3372$13212 g$3372$21792) (begin '#f ((lambda (g$3372$21794) (if g$3372$21794 (begin '#f ((lambda (g$3372$21796) (if g$3372$21796 (begin '#f (append g$3372$21794 g$3372$21796)) '#f)) ((letrec ((g$3372$21798 (lambda (g$3372$21800) (if (g$3372$13212 g$3372$21800) ((lambda (g$3372$21802) (if g$3372$21802 (begin '#f ((lambda (g$3372$21804) (if g$3372$21804 (begin '#f (map cons g$3372$21802 g$3372$21804)) '#f)) (g$3372$21798 (g$3372$13224 g$3372$21800)))) '#f)) ((lambda (g$3372$21806) (list g$3372$21806)) (g$3372$13220 g$3372$21800))) (if (g$3372$13216 g$3372$21800) (list (begin 'b* '())) '#f))))) g$3372$21798) (g$3372$13224 g$3372$21792)))) '#f)) ((lambda (g$3372$21808) (if (g$3372$13212 g$3372$21808) (begin '#f ((lambda (g$3372$21810) (if g$3372$21810 (begin '#f ((lambda (g$3372$21812) (if g$3372$21812 (begin '#f (append g$3372$21810 g$3372$21812)) '#f)) ((letrec ((g$3372$21814 (lambda (g$3372$21816) (if (g$3372$13212 g$3372$21816) ((lambda (g$3372$21818) (if g$3372$21818 (begin '#f ((lambda (g$3372$21820) (if g$3372$21820 (begin '#f (map cons g$3372$21818 g$3372$21820)) '#f)) (g$3372$21814 (g$3372$13224 g$3372$21816)))) '#f)) ((lambda (g$3372$21822) (list g$3372$21822)) (g$3372$13220 g$3372$21816))) (if (g$3372$13216 g$3372$21816) (list (begin 'imp* '())) '#f))))) g$3372$21814) (g$3372$13224 g$3372$21808)))) '#f)) ((lambda (g$3372$21824) (list g$3372$21824)) (g$3372$13220 g$3372$21808)))) '#f)) (g$3372$13220 g$3372$21792)))) '#f)) (g$3372$13224 g$3372$21786)))) '#f)) ((lambda (g$3372$21826) (if (g$3372$13212 g$3372$21826) (begin '#f ((lambda (g$3372$21828) (if g$3372$21828 (begin '#f ((lambda (g$3372$21830) (if g$3372$21830 (begin '#f (append g$3372$21828 g$3372$21830)) '#f)) ((letrec ((g$3372$21832 (lambda (g$3372$21834) (if (g$3372$13212 g$3372$21834) ((lambda (g$3372$21836) (if g$3372$21836 (begin '#f ((lambda (g$3372$21838) (if g$3372$21838 (begin '#f (map cons g$3372$21836 g$3372$21838)) '#f)) (g$3372$21832 (g$3372$13224 g$3372$21834)))) '#f)) ((lambda (g$3372$21840) (list g$3372$21840)) (g$3372$13220 g$3372$21834))) (if (g$3372$13216 g$3372$21834) (list (begin 'exp* '())) '#f))))) g$3372$21832) (g$3372$13224 g$3372$21826)))) '#f)) ((lambda (g$3372$21842) (list g$3372$21842)) (g$3372$13220 g$3372$21826)))) '#f)) (g$3372$13220 g$3372$21786)))) '#f)) (g$3372$13224 g$3372$21780)))) '#f)) ((letrec ((g$3372$21844 (lambda (g$3372$21846) (if (g$3372$13212 g$3372$21846) ((lambda (g$3372$21848) (if g$3372$21848 (begin '#f ((lambda (g$3372$21850) (if g$3372$21850 (begin '#f (map cons g$3372$21848 g$3372$21850)) '#f)) (g$3372$21844 (g$3372$13224 g$3372$21846)))) '#f)) ((lambda (g$3372$21852) (list g$3372$21852)) (g$3372$13220 g$3372$21846))) (if (g$3372$13216 g$3372$21846) (list (begin 'name* '())) '#f))))) g$3372$21844) (g$3372$13220 g$3372$21780)))) '#f)) (g$3372$13224 g$3372$21774)))) '#f)) ((lambda (g$3372$21854) (list g$3372$21854)) (g$3372$13220 g$3372$21774)))) '#f)) g$3372$21736))) g$3372$21734))) (set! g$3372$13639 (lambda (g$3372$21856) ((lambda (g$3372$21858 g$3372$21860 g$3372$21862 g$3372$21864 g$3372$21866 g$3372$21868 g$3372$21870 g$3372$21872) (begin (set! g$3372$21858 (g$3372$13643)) (set! g$3372$21860 (lambda (g$3372$22628 g$3372$22629) ((lambda (g$3372$22632) (begin (set! g$3372$22632 (lambda (g$3372$22634 g$3372$22635) ((lambda (g$3372$22638 g$3372$22639) ((lambda (g$3372$22642) (if g$3372$22642 ((lambda (g$3372$22644) (if (eq? (cdr g$3372$22644) g$3372$22639) g$3372$22635 (error 'import '"two imports with different bindings" g$3372$22638))) g$3372$22642) (cons g$3372$22634 g$3372$22635))) (assq g$3372$22638 g$3372$22635))) (car g$3372$22634) (cdr g$3372$22634)))) (if (null? g$3372$22628) g$3372$22629 (g$3372$22632 (car g$3372$22628) (g$3372$21860 (cdr g$3372$22628) g$3372$22629))))) '#f))) (set! g$3372$21862 (lambda (g$3372$22604 g$3372$22605) ((lambda (g$3372$22608) (begin (set! g$3372$22608 (lambda (g$3372$22610 g$3372$22611) (if (null? g$3372$22611) (error 'import '"cannot rename unbound identifier" g$3372$22610) (if (eq? g$3372$22610 (caar g$3372$22611)) (values (cdar g$3372$22611) (cdr g$3372$22611)) ((lambda (g$3372$22614) (call-with-values (lambda () (g$3372$22608 g$3372$22610 (cdr g$3372$22611))) (lambda (g$3372$22616 g$3372$22617) (values g$3372$22616 (cons g$3372$22614 g$3372$22617))))) (car g$3372$22611)))))) (if (null? g$3372$22604) (values '() g$3372$22605) (call-with-values (lambda () (g$3372$22608 (car g$3372$22604) g$3372$22605)) (lambda (g$3372$22620 g$3372$22621) (call-with-values (lambda () (g$3372$21862 (cdr g$3372$22604) g$3372$22621)) (lambda (g$3372$22624 g$3372$22625) (values (cons g$3372$22620 g$3372$22624) g$3372$22625)))))))) '#f))) (set! g$3372$21864 (lambda (g$3372$22596 g$3372$22597) (map (lambda (g$3372$22600) ((lambda (g$3372$22602) (if g$3372$22602 (cdr g$3372$22602) (error 'import '"cannot find identifier" g$3372$22600))) (assq g$3372$22600 g$3372$22597))) g$3372$22596))) (set! g$3372$21866 (lambda (g$3372$22588 g$3372$22589) (letrec ((g$3372$22592 (lambda (g$3372$22594) (if (null? g$3372$22594) '() (if (memq (caar g$3372$22594) g$3372$22588) (g$3372$22592 (cdr g$3372$22594)) (cons (car g$3372$22594) (g$3372$22592 (cdr g$3372$22594)))))))) (g$3372$22592 g$3372$22589)))) (set! g$3372$21868 (lambda (g$3372$22586) (if (null? g$3372$22586) '() (if (memq (car g$3372$22586) (cdr g$3372$22586)) (g$3372$21868 (cdr g$3372$22586)) (cons (car g$3372$22586) (g$3372$21868 (cdr g$3372$22586))))))) (set! g$3372$21870 (lambda (g$3372$22166) ((lambda (g$3372$22168 g$3372$22170 g$3372$22172) (begin (set! g$3372$22168 (lambda (g$3372$22514) (if (integer? g$3372$22514) (if (exact? g$3372$22514) (begin '#f (>= g$3372$22514 '0)) '#f) '#f))) (set! g$3372$22170 (lambda (g$3372$22324) ((lambda (g$3372$22326) ((lambda (g$3372$22328) (if (if g$3372$22328 (begin '#f (apply (lambda (g$3372$22330) (g$3372$22168 g$3372$22330)) g$3372$22328)) '#f) (apply (lambda (g$3372$22332) (lambda (g$3372$22334) (= g$3372$22334 g$3372$22332))) g$3372$22328) ((lambda (g$3372$22336) ((lambda (g$3372$22338) (if (if g$3372$22338 (begin '#f (apply (lambda (g$3372$22340 g$3372$22341) (eq? g$3372$22340 'and)) g$3372$22338)) '#f) (apply (lambda (g$3372$22344 g$3372$22345) ((lambda (g$3372$22348) (lambda (g$3372$22350) (for-all (lambda (g$3372$22352) (g$3372$22352 g$3372$22350)) g$3372$22348))) (map g$3372$22170 g$3372$22345))) g$3372$22338) ((lambda (g$3372$22354) ((lambda (g$3372$22356) (if (if g$3372$22356 (begin '#f (apply (lambda (g$3372$22358 g$3372$22359) (eq? g$3372$22358 'or)) g$3372$22356)) '#f) (apply (lambda (g$3372$22362 g$3372$22363) ((lambda (g$3372$22366) (lambda (g$3372$22368) (exists (lambda (g$3372$22370) (g$3372$22370 g$3372$22368)) g$3372$22366))) (map g$3372$22170 g$3372$22363))) g$3372$22356) ((lambda (g$3372$22372) ((lambda (g$3372$22374) (if (if g$3372$22374 (begin '#f (apply (lambda (g$3372$22376 g$3372$22377) (eq? g$3372$22376 'not)) g$3372$22374)) '#f) (apply (lambda (g$3372$22380 g$3372$22381) ((lambda (g$3372$22384) (lambda (g$3372$22386) (not (g$3372$22384 g$3372$22386)))) (g$3372$22170 g$3372$22381))) g$3372$22374) ((lambda (g$3372$22388) ((lambda (g$3372$22390) (if (if g$3372$22390 (begin '#f (apply (lambda (g$3372$22392 g$3372$22393) (if (eq? g$3372$22392 '<=) (begin '#f (g$3372$22168 g$3372$22393)) '#f)) g$3372$22390)) '#f) (apply (lambda (g$3372$22396 g$3372$22397) (lambda (g$3372$22400) (<= g$3372$22400 g$3372$22397))) g$3372$22390) ((lambda (g$3372$22402) ((lambda (g$3372$22404) (if (if g$3372$22404 (begin '#f (apply (lambda (g$3372$22406 g$3372$22407) (if (eq? g$3372$22406 '>=) (begin '#f (g$3372$22168 g$3372$22407)) '#f)) g$3372$22404)) '#f) (apply (lambda (g$3372$22410 g$3372$22411) (lambda (g$3372$22414) (>= g$3372$22414 g$3372$22411))) g$3372$22404) ((lambda (g$3372$22416) ((lambda (g$3372$22418) (if (if g$3372$22418 (begin '#f (apply (lambda () '#t) g$3372$22418)) '#f) (apply (lambda () (error 'import '"invalid sub-version spec" g$3372$22324 g$3372$22166)) g$3372$22418) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$22416 '())))) ((lambda (g$3372$22420) '()) g$3372$22416))) g$3372$22402))) ((lambda (g$3372$22422) (if (g$3372$13212 g$3372$22422) (begin '#f ((lambda (g$3372$22424) (if g$3372$22424 (begin '#f ((lambda (g$3372$22426) (if g$3372$22426 (begin '#f (append g$3372$22424 g$3372$22426)) '#f)) ((lambda (g$3372$22428) (if (g$3372$13212 g$3372$22428) (begin '#f ((lambda (g$3372$22430) (if g$3372$22430 (begin '#f ((lambda (g$3372$22432) (if g$3372$22432 (begin '#f (append g$3372$22430 g$3372$22432)) '#f)) ((lambda (g$3372$22434) (if (equal? (g$3372$13246 g$3372$22434) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$22428)))) '#f)) ((lambda (g$3372$22436) (list g$3372$22436)) (g$3372$13220 g$3372$22428)))) '#f)) (g$3372$13224 g$3372$22422)))) '#f)) ((lambda (g$3372$22438) (list g$3372$22438)) (g$3372$13220 g$3372$22422)))) '#f)) g$3372$22402))) g$3372$22388))) ((lambda (g$3372$22440) (if (g$3372$13212 g$3372$22440) (begin '#f ((lambda (g$3372$22442) (if g$3372$22442 (begin '#f ((lambda (g$3372$22444) (if g$3372$22444 (begin '#f (append g$3372$22442 g$3372$22444)) '#f)) ((lambda (g$3372$22446) (if (g$3372$13212 g$3372$22446) (begin '#f ((lambda (g$3372$22448) (if g$3372$22448 (begin '#f ((lambda (g$3372$22450) (if g$3372$22450 (begin '#f (append g$3372$22448 g$3372$22450)) '#f)) ((lambda (g$3372$22452) (if (equal? (g$3372$13246 g$3372$22452) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$22446)))) '#f)) ((lambda (g$3372$22454) (list g$3372$22454)) (g$3372$13220 g$3372$22446)))) '#f)) (g$3372$13224 g$3372$22440)))) '#f)) ((lambda (g$3372$22456) (list g$3372$22456)) (g$3372$13220 g$3372$22440)))) '#f)) g$3372$22388))) g$3372$22372))) ((lambda (g$3372$22458) (if (g$3372$13212 g$3372$22458) (begin '#f ((lambda (g$3372$22460) (if g$3372$22460 (begin '#f ((lambda (g$3372$22462) (if g$3372$22462 (begin '#f (append g$3372$22460 g$3372$22462)) '#f)) ((lambda (g$3372$22464) (if (g$3372$13212 g$3372$22464) (begin '#f ((lambda (g$3372$22466) (if g$3372$22466 (begin '#f ((lambda (g$3372$22468) (if g$3372$22468 (begin '#f (append g$3372$22466 g$3372$22468)) '#f)) ((lambda (g$3372$22470) (if (equal? (g$3372$13246 g$3372$22470) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$22464)))) '#f)) ((lambda (g$3372$22472) (list g$3372$22472)) (g$3372$13220 g$3372$22464)))) '#f)) (g$3372$13224 g$3372$22458)))) '#f)) ((lambda (g$3372$22474) (list g$3372$22474)) (g$3372$13220 g$3372$22458)))) '#f)) g$3372$22372))) g$3372$22354))) ((lambda (g$3372$22476) (if (g$3372$13212 g$3372$22476) (begin '#f ((lambda (g$3372$22478) (if g$3372$22478 (begin '#f ((lambda (g$3372$22480) (if g$3372$22480 (begin '#f (append g$3372$22478 g$3372$22480)) '#f)) ((letrec ((g$3372$22482 (lambda (g$3372$22484) (if (g$3372$13212 g$3372$22484) ((lambda (g$3372$22486) (if g$3372$22486 (begin '#f ((lambda (g$3372$22488) (if g$3372$22488 (begin '#f (map cons g$3372$22486 g$3372$22488)) '#f)) (g$3372$22482 (g$3372$13224 g$3372$22484)))) '#f)) ((lambda (g$3372$22490) (list g$3372$22490)) (g$3372$13220 g$3372$22484))) (if (g$3372$13216 g$3372$22484) (list (begin 'sub* '())) '#f))))) g$3372$22482) (g$3372$13224 g$3372$22476)))) '#f)) ((lambda (g$3372$22492) (list g$3372$22492)) (g$3372$13220 g$3372$22476)))) '#f)) g$3372$22354))) g$3372$22336))) ((lambda (g$3372$22494) (if (g$3372$13212 g$3372$22494) (begin '#f ((lambda (g$3372$22496) (if g$3372$22496 (begin '#f ((lambda (g$3372$22498) (if g$3372$22498 (begin '#f (append g$3372$22496 g$3372$22498)) '#f)) ((letrec ((g$3372$22500 (lambda (g$3372$22502) (if (g$3372$13212 g$3372$22502) ((lambda (g$3372$22504) (if g$3372$22504 (begin '#f ((lambda (g$3372$22506) (if g$3372$22506 (begin '#f (map cons g$3372$22504 g$3372$22506)) '#f)) (g$3372$22500 (g$3372$13224 g$3372$22502)))) '#f)) ((lambda (g$3372$22508) (list g$3372$22508)) (g$3372$13220 g$3372$22502))) (if (g$3372$13216 g$3372$22502) (list (begin 'sub* '())) '#f))))) g$3372$22500) (g$3372$13224 g$3372$22494)))) '#f)) ((lambda (g$3372$22510) (list g$3372$22510)) (g$3372$13220 g$3372$22494)))) '#f)) g$3372$22336))) g$3372$22326))) ((lambda (g$3372$22512) (list g$3372$22512)) g$3372$22326))) g$3372$22324))) (set! g$3372$22172 (lambda (g$3372$22174) ((lambda (g$3372$22176) ((lambda (g$3372$22178) (if (if g$3372$22178 (begin '#f (apply (lambda () '#t) g$3372$22178)) '#f) (apply (lambda () (lambda (g$3372$22180) '#t)) g$3372$22178) ((lambda (g$3372$22182) ((lambda (g$3372$22184) (if (if g$3372$22184 (begin '#f (apply (lambda (g$3372$22186 g$3372$22187) (eq? g$3372$22186 'and)) g$3372$22184)) '#f) (apply (lambda (g$3372$22190 g$3372$22191) ((lambda (g$3372$22194) (lambda (g$3372$22196) (for-all (lambda (g$3372$22198) (g$3372$22198 g$3372$22196)) g$3372$22194))) (map g$3372$22172 g$3372$22191))) g$3372$22184) ((lambda (g$3372$22200) ((lambda (g$3372$22202) (if (if g$3372$22202 (begin '#f (apply (lambda (g$3372$22204 g$3372$22205) (eq? g$3372$22204 'or)) g$3372$22202)) '#f) (apply (lambda (g$3372$22208 g$3372$22209) ((lambda (g$3372$22212) (lambda (g$3372$22214) (exists (lambda (g$3372$22216) (g$3372$22216 g$3372$22214)) g$3372$22212))) (map g$3372$22172 g$3372$22209))) g$3372$22202) ((lambda (g$3372$22218) ((lambda (g$3372$22220) (if (if g$3372$22220 (begin '#f (apply (lambda (g$3372$22222 g$3372$22223) (eq? g$3372$22222 'not)) g$3372$22220)) '#f) (apply (lambda (g$3372$22226 g$3372$22227) ((lambda (g$3372$22230) (lambda (g$3372$22232) (not (g$3372$22230 g$3372$22232)))) (g$3372$22172 g$3372$22227))) g$3372$22220) ((lambda (g$3372$22234) ((lambda (g$3372$22236) (if (if g$3372$22236 (begin '#f (apply (lambda (g$3372$22238) '#t) g$3372$22236)) '#f) (apply (lambda (g$3372$22240) ((lambda (g$3372$22242) (lambda (g$3372$22244) (letrec ((g$3372$22246 (lambda (g$3372$22248 g$3372$22249) (if (null? g$3372$22248) '#t (if (null? g$3372$22249) '#f (if ((car g$3372$22248) (car g$3372$22249)) (begin '#f (g$3372$22246 (cdr g$3372$22248) (cdr g$3372$22174))) '#f)))))) (g$3372$22246 g$3372$22242 g$3372$22244)))) (map g$3372$22170 g$3372$22240))) g$3372$22236) ((lambda (g$3372$22252) ((lambda (g$3372$22254) (if (if g$3372$22254 (begin '#f (apply (lambda () '#t) g$3372$22254)) '#f) (apply (lambda () (error 'import '"invalid version spec" g$3372$22174 g$3372$22166)) g$3372$22254) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$22252 '())))) ((lambda (g$3372$22256) '()) g$3372$22252))) g$3372$22234))) ((letrec ((g$3372$22258 (lambda (g$3372$22260) (if (g$3372$13212 g$3372$22260) ((lambda (g$3372$22262) (if g$3372$22262 (begin '#f ((lambda (g$3372$22264) (if g$3372$22264 (begin '#f (map cons g$3372$22262 g$3372$22264)) '#f)) (g$3372$22258 (g$3372$13224 g$3372$22260)))) '#f)) ((lambda (g$3372$22266) (list g$3372$22266)) (g$3372$13220 g$3372$22260))) (if (g$3372$13216 g$3372$22260) (list (begin 'sub* '())) '#f))))) g$3372$22258) g$3372$22234))) g$3372$22218))) ((lambda (g$3372$22268) (if (g$3372$13212 g$3372$22268) (begin '#f ((lambda (g$3372$22270) (if g$3372$22270 (begin '#f ((lambda (g$3372$22272) (if g$3372$22272 (begin '#f (append g$3372$22270 g$3372$22272)) '#f)) ((lambda (g$3372$22274) (if (g$3372$13212 g$3372$22274) (begin '#f ((lambda (g$3372$22276) (if g$3372$22276 (begin '#f ((lambda (g$3372$22278) (if g$3372$22278 (begin '#f (append g$3372$22276 g$3372$22278)) '#f)) ((lambda (g$3372$22280) (if (equal? (g$3372$13246 g$3372$22280) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$22274)))) '#f)) ((lambda (g$3372$22282) (list g$3372$22282)) (g$3372$13220 g$3372$22274)))) '#f)) (g$3372$13224 g$3372$22268)))) '#f)) ((lambda (g$3372$22284) (list g$3372$22284)) (g$3372$13220 g$3372$22268)))) '#f)) g$3372$22218))) g$3372$22200))) ((lambda (g$3372$22286) (if (g$3372$13212 g$3372$22286) (begin '#f ((lambda (g$3372$22288) (if g$3372$22288 (begin '#f ((lambda (g$3372$22290) (if g$3372$22290 (begin '#f (append g$3372$22288 g$3372$22290)) '#f)) ((letrec ((g$3372$22292 (lambda (g$3372$22294) (if (g$3372$13212 g$3372$22294) ((lambda (g$3372$22296) (if g$3372$22296 (begin '#f ((lambda (g$3372$22298) (if g$3372$22298 (begin '#f (map cons g$3372$22296 g$3372$22298)) '#f)) (g$3372$22292 (g$3372$13224 g$3372$22294)))) '#f)) ((lambda (g$3372$22300) (list g$3372$22300)) (g$3372$13220 g$3372$22294))) (if (g$3372$13216 g$3372$22294) (list (begin 'ver* '())) '#f))))) g$3372$22292) (g$3372$13224 g$3372$22286)))) '#f)) ((lambda (g$3372$22302) (list g$3372$22302)) (g$3372$13220 g$3372$22286)))) '#f)) g$3372$22200))) g$3372$22182))) ((lambda (g$3372$22304) (if (g$3372$13212 g$3372$22304) (begin '#f ((lambda (g$3372$22306) (if g$3372$22306 (begin '#f ((lambda (g$3372$22308) (if g$3372$22308 (begin '#f (append g$3372$22306 g$3372$22308)) '#f)) ((letrec ((g$3372$22310 (lambda (g$3372$22312) (if (g$3372$13212 g$3372$22312) ((lambda (g$3372$22314) (if g$3372$22314 (begin '#f ((lambda (g$3372$22316) (if g$3372$22316 (begin '#f (map cons g$3372$22314 g$3372$22316)) '#f)) (g$3372$22310 (g$3372$13224 g$3372$22312)))) '#f)) ((lambda (g$3372$22318) (list g$3372$22318)) (g$3372$13220 g$3372$22312))) (if (g$3372$13216 g$3372$22312) (list (begin 'ver* '())) '#f))))) g$3372$22310) (g$3372$13224 g$3372$22304)))) '#f)) ((lambda (g$3372$22320) (list g$3372$22320)) (g$3372$13220 g$3372$22304)))) '#f)) g$3372$22182))) g$3372$22176))) ((lambda (g$3372$22322) (if (equal? (g$3372$13246 g$3372$22322) '()) (begin '#f '()) '#f)) g$3372$22176))) g$3372$22174))) (letrec ((g$3372$22516 (lambda (g$3372$22518) ((lambda (g$3372$22520) ((lambda (g$3372$22522) (if (if g$3372$22522 (begin '#f (apply (lambda (g$3372$22524) '#t) g$3372$22522)) '#f) (apply (lambda (g$3372$22526) (values '() (g$3372$22172 g$3372$22526))) g$3372$22522) ((lambda (g$3372$22528) ((lambda (g$3372$22530) (if (if g$3372$22530 (begin '#f (apply (lambda (g$3372$22532 g$3372$22533) (symbol? g$3372$22532)) g$3372$22530)) '#f) (apply (lambda (g$3372$22536 g$3372$22537) (call-with-values (lambda () (g$3372$22516 g$3372$22537)) (lambda (g$3372$22540 g$3372$22541) (values (cons g$3372$22536 g$3372$22540) g$3372$22541)))) g$3372$22530) ((lambda (g$3372$22544) ((lambda (g$3372$22546) (if (if g$3372$22546 (begin '#f (apply (lambda () '#t) g$3372$22546)) '#f) (apply (lambda () (values '() (lambda (g$3372$22548) '#t))) g$3372$22546) ((lambda (g$3372$22550) ((lambda (g$3372$22552) (if (if g$3372$22552 (begin '#f (apply (lambda () '#t) g$3372$22552)) '#f) (apply (lambda () (error 'expander '"invalid import spec" (g$3372$13244 g$3372$22166 '()))) g$3372$22552) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$22550 '())))) ((lambda (g$3372$22554) '()) g$3372$22550))) g$3372$22544))) ((lambda (g$3372$22556) (if (equal? (g$3372$13246 g$3372$22556) '()) (begin '#f '()) '#f)) g$3372$22544))) g$3372$22528))) ((lambda (g$3372$22558) (if (g$3372$13212 g$3372$22558) (begin '#f ((lambda (g$3372$22560) (if g$3372$22560 (begin '#f ((lambda (g$3372$22562) (if g$3372$22562 (begin '#f (append g$3372$22560 g$3372$22562)) '#f)) ((lambda (g$3372$22564) (list g$3372$22564)) (g$3372$13224 g$3372$22558)))) '#f)) ((lambda (g$3372$22566) (list g$3372$22566)) (g$3372$13220 g$3372$22558)))) '#f)) g$3372$22528))) g$3372$22520))) ((lambda (g$3372$22568) (if (g$3372$13212 g$3372$22568) (begin '#f ((lambda (g$3372$22570) (if g$3372$22570 (begin '#f ((lambda (g$3372$22572) (if g$3372$22572 (begin '#f (append g$3372$22570 g$3372$22572)) '#f)) ((lambda (g$3372$22574) (if (equal? (g$3372$13246 g$3372$22574) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$22568)))) '#f)) ((letrec ((g$3372$22576 (lambda (g$3372$22578) (if (g$3372$13212 g$3372$22578) ((lambda (g$3372$22580) (if g$3372$22580 (begin '#f ((lambda (g$3372$22582) (if g$3372$22582 (begin '#f (map cons g$3372$22580 g$3372$22582)) '#f)) (g$3372$22576 (g$3372$13224 g$3372$22578)))) '#f)) ((lambda (g$3372$22584) (list g$3372$22584)) (g$3372$13220 g$3372$22578))) (if (g$3372$13216 g$3372$22578) (list (begin 'version-spec* '())) '#f))))) g$3372$22576) (g$3372$13220 g$3372$22568)))) '#f)) g$3372$22520))) g$3372$22518)))) (g$3372$22516 g$3372$22166)))) '#f '#f '#f))) (set! g$3372$21872 (lambda (g$3372$21874) ((lambda (g$3372$21876) ((lambda (g$3372$21878) (if (if g$3372$21878 (begin '#f (apply (lambda (g$3372$21880 g$3372$21881 g$3372$21882 g$3372$21883) (if (eq? g$3372$21880 'rename) (if (for-all symbol? g$3372$21882) (begin '#f (for-all symbol? g$3372$21883)) '#f) '#f)) g$3372$21878)) '#f) (apply (lambda (g$3372$21888 g$3372$21889 g$3372$21890 g$3372$21891) ((lambda (g$3372$21896) ((lambda (g$3372$21898) ((lambda (g$3372$21900) (g$3372$21860 (map cons g$3372$21891 g$3372$21898) g$3372$21900)) (g$3372$21866 g$3372$21890 g$3372$21896))) (g$3372$21864 g$3372$21890 g$3372$21896))) (g$3372$21872 g$3372$21889))) g$3372$21878) ((lambda (g$3372$21902) ((lambda (g$3372$21904) (if (if g$3372$21904 (begin '#f (apply (lambda (g$3372$21906 g$3372$21907 g$3372$21908) (if (eq? g$3372$21906 'except) (begin '#f (for-all symbol? g$3372$21908)) '#f)) g$3372$21904)) '#f) (apply (lambda (g$3372$21912 g$3372$21913 g$3372$21914) ((lambda (g$3372$21918) (g$3372$21866 g$3372$21914 g$3372$21918)) (g$3372$21872 g$3372$21913))) g$3372$21904) ((lambda (g$3372$21920) ((lambda (g$3372$21922) (if (if g$3372$21922 (begin '#f (apply (lambda (g$3372$21924 g$3372$21925 g$3372$21926) (if (eq? g$3372$21924 'only) (begin '#f (for-all symbol? g$3372$21926)) '#f)) g$3372$21922)) '#f) (apply (lambda (g$3372$21930 g$3372$21931 g$3372$21932) ((lambda (g$3372$21936) ((lambda (g$3372$21938) ((lambda (g$3372$21940) (map cons g$3372$21938 g$3372$21940)) (g$3372$21864 g$3372$21938 g$3372$21936))) (g$3372$21868 g$3372$21932))) (g$3372$21872 g$3372$21931))) g$3372$21922) ((lambda (g$3372$21942) ((lambda (g$3372$21944) (if (if g$3372$21944 (begin '#f (apply (lambda (g$3372$21946 g$3372$21947 g$3372$21948) (if (eq? g$3372$21946 'prefix) (begin '#f (symbol? g$3372$21948)) '#f)) g$3372$21944)) '#f) (apply (lambda (g$3372$21952 g$3372$21953 g$3372$21954) ((lambda (g$3372$21958) (map (lambda (g$3372$21960) (cons (string->symbol (string-append (symbol->string g$3372$21954) (symbol->string (car g$3372$21960)))) (cdr g$3372$21960))) g$3372$21958)) (g$3372$21872 g$3372$21953))) g$3372$21944) ((lambda (g$3372$21962) ((lambda (g$3372$21964) (if (if g$3372$21964 (begin '#f (apply (lambda (g$3372$21966 g$3372$21967) (eq? g$3372$21966 'library)) g$3372$21964)) '#f) (apply (lambda (g$3372$21970 g$3372$21971) (call-with-values (lambda () (g$3372$21870 g$3372$21971)) (lambda (g$3372$21974 g$3372$21975) (begin (if (null? g$3372$21974) (error 'import '"empty library name" g$3372$21971) (void)) ((lambda (g$3372$21978) (begin (if g$3372$21978 (void) (error 'import '"cannot find library with required name" g$3372$21974)) (if (g$3372$21975 (g$3372$12869 g$3372$21978)) (void) (error 'import '"library does not satisfy version specification" g$3372$21978 g$3372$21971)) (g$3372$21858 g$3372$21978) (g$3372$12865 g$3372$21978))) (g$3372$12840 g$3372$21974)))))) g$3372$21964) ((lambda (g$3372$21980) ((lambda (g$3372$21982) (if (if g$3372$21982 (begin '#f (apply (lambda (g$3372$21984 g$3372$21985) (not (memq g$3372$21984 '(rename except only prefix library)))) g$3372$21982)) '#f) (apply (lambda (g$3372$21988 g$3372$21989) (g$3372$21872 (list 'library (cons g$3372$21988 g$3372$21989)))) g$3372$21982) ((lambda (g$3372$21992) ((lambda (g$3372$21994) (if (if g$3372$21994 (begin '#f (apply (lambda (g$3372$21996) '#t) g$3372$21994)) '#f) (apply (lambda (g$3372$21998) (error 'import '"invalid import spec" g$3372$21998)) g$3372$21994) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$21992 '())))) ((lambda (g$3372$22000) (list g$3372$22000)) g$3372$21992))) g$3372$21980))) ((lambda (g$3372$22002) (if (g$3372$13212 g$3372$22002) (begin '#f ((lambda (g$3372$22004) (if g$3372$22004 (begin '#f ((lambda (g$3372$22006) (if g$3372$22006 (begin '#f (append g$3372$22004 g$3372$22006)) '#f)) ((letrec ((g$3372$22008 (lambda (g$3372$22010) (if (g$3372$13212 g$3372$22010) ((lambda (g$3372$22012) (if g$3372$22012 (begin '#f ((lambda (g$3372$22014) (if g$3372$22014 (begin '#f (map cons g$3372$22012 g$3372$22014)) '#f)) (g$3372$22008 (g$3372$13224 g$3372$22010)))) '#f)) ((lambda (g$3372$22016) (list g$3372$22016)) (g$3372$13220 g$3372$22010))) (if (g$3372$13216 g$3372$22010) (list (begin 'x* '())) '#f))))) g$3372$22008) (g$3372$13224 g$3372$22002)))) '#f)) ((lambda (g$3372$22018) (list g$3372$22018)) (g$3372$13220 g$3372$22002)))) '#f)) g$3372$21980))) g$3372$21962))) ((lambda (g$3372$22020) (if (g$3372$13212 g$3372$22020) (begin '#f ((lambda (g$3372$22022) (if g$3372$22022 (begin '#f ((lambda (g$3372$22024) (if g$3372$22024 (begin '#f (append g$3372$22022 g$3372$22024)) '#f)) ((lambda (g$3372$22026) (if (g$3372$13212 g$3372$22026) (begin '#f ((lambda (g$3372$22028) (if g$3372$22028 (begin '#f ((lambda (g$3372$22030) (if g$3372$22030 (begin '#f (append g$3372$22028 g$3372$22030)) '#f)) ((lambda (g$3372$22032) (if (equal? (g$3372$13246 g$3372$22032) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$22026)))) '#f)) ((letrec ((g$3372$22034 (lambda (g$3372$22036) (if (g$3372$13212 g$3372$22036) ((lambda (g$3372$22038) (if g$3372$22038 (begin '#f ((lambda (g$3372$22040) (if g$3372$22040 (begin '#f (map cons g$3372$22038 g$3372$22040)) '#f)) (g$3372$22034 (g$3372$13224 g$3372$22036)))) '#f)) ((lambda (g$3372$22042) (list g$3372$22042)) (g$3372$13220 g$3372$22036))) (if (g$3372$13216 g$3372$22036) (list (begin 'spec* '())) '#f))))) g$3372$22034) (g$3372$13220 g$3372$22026)))) '#f)) (g$3372$13224 g$3372$22020)))) '#f)) ((lambda (g$3372$22044) (list g$3372$22044)) (g$3372$13220 g$3372$22020)))) '#f)) g$3372$21962))) g$3372$21942))) ((lambda (g$3372$22046) (if (g$3372$13212 g$3372$22046) (begin '#f ((lambda (g$3372$22048) (if g$3372$22048 (begin '#f ((lambda (g$3372$22050) (if g$3372$22050 (begin '#f (append g$3372$22048 g$3372$22050)) '#f)) ((lambda (g$3372$22052) (if (g$3372$13212 g$3372$22052) (begin '#f ((lambda (g$3372$22054) (if g$3372$22054 (begin '#f ((lambda (g$3372$22056) (if g$3372$22056 (begin '#f (append g$3372$22054 g$3372$22056)) '#f)) ((lambda (g$3372$22058) (if (g$3372$13212 g$3372$22058) (begin '#f ((lambda (g$3372$22060) (if g$3372$22060 (begin '#f ((lambda (g$3372$22062) (if g$3372$22062 (begin '#f (append g$3372$22060 g$3372$22062)) '#f)) ((lambda (g$3372$22064) (if (equal? (g$3372$13246 g$3372$22064) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$22058)))) '#f)) ((lambda (g$3372$22066) (list g$3372$22066)) (g$3372$13220 g$3372$22058)))) '#f)) (g$3372$13224 g$3372$22052)))) '#f)) ((lambda (g$3372$22068) (list g$3372$22068)) (g$3372$13220 g$3372$22052)))) '#f)) (g$3372$13224 g$3372$22046)))) '#f)) ((lambda (g$3372$22070) (list g$3372$22070)) (g$3372$13220 g$3372$22046)))) '#f)) g$3372$21942))) g$3372$21920))) ((lambda (g$3372$22072) (if (g$3372$13212 g$3372$22072) (begin '#f ((lambda (g$3372$22074) (if g$3372$22074 (begin '#f ((lambda (g$3372$22076) (if g$3372$22076 (begin '#f (append g$3372$22074 g$3372$22076)) '#f)) ((lambda (g$3372$22078) (if (g$3372$13212 g$3372$22078) (begin '#f ((lambda (g$3372$22080) (if g$3372$22080 (begin '#f ((lambda (g$3372$22082) (if g$3372$22082 (begin '#f (append g$3372$22080 g$3372$22082)) '#f)) ((letrec ((g$3372$22084 (lambda (g$3372$22086) (if (g$3372$13212 g$3372$22086) ((lambda (g$3372$22088) (if g$3372$22088 (begin '#f ((lambda (g$3372$22090) (if g$3372$22090 (begin '#f (map cons g$3372$22088 g$3372$22090)) '#f)) (g$3372$22084 (g$3372$13224 g$3372$22086)))) '#f)) ((lambda (g$3372$22092) (list g$3372$22092)) (g$3372$13220 g$3372$22086))) (if (g$3372$13216 g$3372$22086) (list (begin 'sym* '())) '#f))))) g$3372$22084) (g$3372$13224 g$3372$22078)))) '#f)) ((lambda (g$3372$22094) (list g$3372$22094)) (g$3372$13220 g$3372$22078)))) '#f)) (g$3372$13224 g$3372$22072)))) '#f)) ((lambda (g$3372$22096) (list g$3372$22096)) (g$3372$13220 g$3372$22072)))) '#f)) g$3372$21920))) g$3372$21902))) ((lambda (g$3372$22098) (if (g$3372$13212 g$3372$22098) (begin '#f ((lambda (g$3372$22100) (if g$3372$22100 (begin '#f ((lambda (g$3372$22102) (if g$3372$22102 (begin '#f (append g$3372$22100 g$3372$22102)) '#f)) ((lambda (g$3372$22104) (if (g$3372$13212 g$3372$22104) (begin '#f ((lambda (g$3372$22106) (if g$3372$22106 (begin '#f ((lambda (g$3372$22108) (if g$3372$22108 (begin '#f (append g$3372$22106 g$3372$22108)) '#f)) ((letrec ((g$3372$22110 (lambda (g$3372$22112) (if (g$3372$13212 g$3372$22112) ((lambda (g$3372$22114) (if g$3372$22114 (begin '#f ((lambda (g$3372$22116) (if g$3372$22116 (begin '#f (map cons g$3372$22114 g$3372$22116)) '#f)) (g$3372$22110 (g$3372$13224 g$3372$22112)))) '#f)) ((lambda (g$3372$22118) (list g$3372$22118)) (g$3372$13220 g$3372$22112))) (if (g$3372$13216 g$3372$22112) (list (begin 'sym* '())) '#f))))) g$3372$22110) (g$3372$13224 g$3372$22104)))) '#f)) ((lambda (g$3372$22120) (list g$3372$22120)) (g$3372$13220 g$3372$22104)))) '#f)) (g$3372$13224 g$3372$22098)))) '#f)) ((lambda (g$3372$22122) (list g$3372$22122)) (g$3372$13220 g$3372$22098)))) '#f)) g$3372$21902))) g$3372$21876))) ((lambda (g$3372$22124) (if (g$3372$13212 g$3372$22124) (begin '#f ((lambda (g$3372$22126) (if g$3372$22126 (begin '#f ((lambda (g$3372$22128) (if g$3372$22128 (begin '#f (append g$3372$22126 g$3372$22128)) '#f)) ((lambda (g$3372$22130) (if (g$3372$13212 g$3372$22130) (begin '#f ((lambda (g$3372$22132) (if g$3372$22132 (begin '#f ((lambda (g$3372$22134) (if g$3372$22134 (begin '#f (append g$3372$22132 g$3372$22134)) '#f)) ((letrec ((g$3372$22136 (lambda (g$3372$22138) (if (g$3372$13212 g$3372$22138) ((lambda (g$3372$22140) (if g$3372$22140 (begin '#f ((lambda (g$3372$22142) (if g$3372$22142 (begin '#f (map cons g$3372$22140 g$3372$22142)) '#f)) (g$3372$22136 (g$3372$13224 g$3372$22138)))) '#f)) ((lambda (g$3372$22144) (if (g$3372$13212 g$3372$22144) (begin '#f ((lambda (g$3372$22146) (if g$3372$22146 (begin '#f ((lambda (g$3372$22148) (if g$3372$22148 (begin '#f (append g$3372$22146 g$3372$22148)) '#f)) ((lambda (g$3372$22150) (if (g$3372$13212 g$3372$22150) (begin '#f ((lambda (g$3372$22152) (if g$3372$22152 (begin '#f ((lambda (g$3372$22154) (if g$3372$22154 (begin '#f (append g$3372$22152 g$3372$22154)) '#f)) ((lambda (g$3372$22156) (if (equal? (g$3372$13246 g$3372$22156) '()) (begin '#f '()) '#f)) (g$3372$13224 g$3372$22150)))) '#f)) ((lambda (g$3372$22158) (list g$3372$22158)) (g$3372$13220 g$3372$22150)))) '#f)) (g$3372$13224 g$3372$22144)))) '#f)) ((lambda (g$3372$22160) (list g$3372$22160)) (g$3372$13220 g$3372$22144)))) '#f)) (g$3372$13220 g$3372$22138))) (if (g$3372$13216 g$3372$22138) (list (begin 'old* '()) (begin 'new* '())) '#f))))) g$3372$22136) (g$3372$13224 g$3372$22130)))) '#f)) ((lambda (g$3372$22162) (list g$3372$22162)) (g$3372$13220 g$3372$22130)))) '#f)) (g$3372$13224 g$3372$22124)))) '#f)) ((lambda (g$3372$22164) (list g$3372$22164)) (g$3372$13220 g$3372$22124)))) '#f)) g$3372$21876))) g$3372$21874))) (letrec ((g$3372$22646 (lambda (g$3372$22648 g$3372$22649) (if (null? g$3372$22648) (values g$3372$22649 (g$3372$21858)) (g$3372$22646 (cdr g$3372$22648) (g$3372$21860 (g$3372$21872 (car g$3372$22648)) g$3372$22649)))))) (g$3372$22646 g$3372$21856 '())))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$3372$13641 (lambda (g$3372$22652) ((lambda (g$3372$22654) (begin (for-each (lambda (g$3372$22656) ((lambda (g$3372$22658 g$3372$22659) (g$3372$13165 g$3372$22654 (g$3372$13202 g$3372$22658 g$3372$13132 '()) g$3372$22659)) (car g$3372$22656) (cdr g$3372$22656))) g$3372$22652) g$3372$22654)) (g$3372$13163)))) (set! g$3372$13643 (lambda () ((lambda (g$3372$22662) (lambda g$3372$22666 ((lambda (g$3372$22667) (if (= g$3372$22667 '0) (apply (lambda () g$3372$22662) g$3372$22666) (if (= g$3372$22667 '1) (apply (lambda (g$3372$22664) (set! g$3372$22662 (g$3372$13125 g$3372$22664 g$3372$22662))) g$3372$22666) (error 'apply '"invalid arg count")))) (length g$3372$22666)))) '()))) (set! g$3372$13645 (g$3372$12319 (lambda g$3372$22668 (error 'inv-collector '"not initialized")) (lambda (g$3372$22670) (begin (if (procedure? g$3372$22670) (void) (error 'inv-collector '"not a procedure" g$3372$22670)) g$3372$22670)))) (set! g$3372$13647 (g$3372$12319 (lambda g$3372$22672 (error 'vis-collector '"not initialized")) (lambda (g$3372$22674) (begin (if (procedure? g$3372$22674) (void) (error 'vis-collector '"not a procedure" g$3372$22674)) g$3372$22674)))) (set! g$3372$13649 (lambda (g$3372$22676 g$3372$22677 g$3372$22678) (call-with-values (lambda () (g$3372$13619 g$3372$22676 '() '() '() '() '() '() g$3372$22677 g$3372$22678)) (lambda (g$3372$22682 g$3372$22683 g$3372$22684 g$3372$22685 g$3372$22686 g$3372$22687 g$3372$22688) (values (append (apply append (reverse g$3372$22687)) g$3372$22682) g$3372$22683 g$3372$22684 (reverse g$3372$22685) (reverse g$3372$22686)))))) (set! g$3372$13651 (lambda (g$3372$22696 g$3372$22697 g$3372$22698) (call-with-values (lambda () (g$3372$13633 g$3372$22696)) (lambda (g$3372$22702 g$3372$22703) (call-with-values (lambda () (g$3372$13639 g$3372$22697)) (lambda (g$3372$22704 g$3372$22705) ((lambda (g$3372$22710) ((lambda (g$3372$22712 g$3372$22713 g$3372$22714) ((lambda (g$3372$22722 g$3372$22723 g$3372$22724 g$3372$22725) ((lambda (g$3372$22730) (dynamic-wind g$3372$22730 (lambda () (call-with-values (lambda () (g$3372$13649 g$3372$22712 g$3372$22710 '#f)) (lambda (g$3372$22732 g$3372$22733 g$3372$22734 g$3372$22735 g$3372$22736) (begin (g$3372$13167 g$3372$22710) ((lambda (g$3372$22742 g$3372$22743) (begin (g$3372$13169 g$3372$22710) ((lambda (g$3372$22746) (call-with-values (lambda () (g$3372$13694 g$3372$22733)) (lambda (g$3372$22748 g$3372$22749 g$3372$22750) ((lambda (g$3372$22754 g$3372$22755) (values g$3372$22705 (g$3372$22713) (g$3372$22714) (g$3372$13109 '#f (append g$3372$22755 (list g$3372$22754))) g$3372$22750 g$3372$22746 g$3372$22748)) (g$3372$13106 '#f g$3372$22735 g$3372$22742 (g$3372$13690 g$3372$22749 g$3372$22743)) (map g$3372$13123 (map cdr g$3372$22749)))))) (g$3372$13692 g$3372$22702 g$3372$22703 g$3372$22710)))) (g$3372$13607 g$3372$22736 g$3372$22733 g$3372$22734) (g$3372$13593 g$3372$22732 g$3372$22733 g$3372$22734)))))) g$3372$22730)) (lambda () (begin ((lambda (g$3372$22758) (begin (g$3372$22722 g$3372$22724) (set! g$3372$22724 g$3372$22758))) (g$3372$22722)) ((lambda (g$3372$22760) (begin (g$3372$22723 g$3372$22725) (set! g$3372$22725 g$3372$22760))) (g$3372$22723)))))) g$3372$13645 g$3372$13647 g$3372$22713 g$3372$22714)) (map (lambda (g$3372$22762) (g$3372$13202 g$3372$22762 g$3372$13132 (list g$3372$22710))) g$3372$22698) (g$3372$13643) (g$3372$13643))) (g$3372$13641 g$3372$22704)))))))) (set! g$3372$13653 (lambda (g$3372$22764) (call-with-values (lambda () (g$3372$13637 g$3372$22764)) (lambda (g$3372$22766 g$3372$22767 g$3372$22768 g$3372$22769) (call-with-values (lambda () (g$3372$13635 g$3372$22766)) (lambda (g$3372$22774 g$3372$22775) (call-with-values (lambda () (g$3372$13651 g$3372$22767 g$3372$22768 g$3372$22769)) (lambda (g$3372$22778 g$3372$22779 g$3372$22780 g$3372$22781 g$3372$22782 g$3372$22783 g$3372$22784) (values g$3372$22774 g$3372$22775 g$3372$22778 g$3372$22779 g$3372$22780 g$3372$22781 g$3372$22782 g$3372$22783 g$3372$22784))))))))) (set! g$3372$13655 (lambda (g$3372$22792) ((lambda (g$3372$22794) ((lambda (g$3372$22796) (if (if g$3372$22796 (begin '#f (apply (lambda (g$3372$22798 g$3372$22799 g$3372$22800) (eq? g$3372$22798 'import)) g$3372$22796)) '#f) (apply (lambda (g$3372$22804 g$3372$22805 g$3372$22806) (values g$3372$22805 g$3372$22806)) g$3372$22796) ((lambda (g$3372$22810) ((lambda (g$3372$22812) (if (if g$3372$22812 (begin '#f (apply (lambda () '#t) g$3372$22812)) '#f) (apply (lambda () (error '"invalid syntax of top-level program")) g$3372$22812) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$22810 '())))) ((lambda (g$3372$22814) '()) g$3372$22810))) g$3372$22794))) ((lambda (g$3372$22816) (if (g$3372$13212 g$3372$22816) (begin '#f ((lambda (g$3372$22818) (if g$3372$22818 (begin '#f ((lambda (g$3372$22820) (if g$3372$22820 (begin '#f (append g$3372$22818 g$3372$22820)) '#f)) ((letrec ((g$3372$22822 (lambda (g$3372$22824) (if (g$3372$13212 g$3372$22824) ((lambda (g$3372$22826) (if g$3372$22826 (begin '#f ((lambda (g$3372$22828) (if g$3372$22828 (begin '#f (map cons g$3372$22826 g$3372$22828)) '#f)) (g$3372$22822 (g$3372$13224 g$3372$22824)))) '#f)) ((lambda (g$3372$22830) (list g$3372$22830)) (g$3372$13220 g$3372$22824))) (if (g$3372$13216 g$3372$22824) (list (begin 'b* '())) '#f))))) g$3372$22822) (g$3372$13224 g$3372$22816)))) '#f)) ((lambda (g$3372$22832) (if (g$3372$13212 g$3372$22832) (begin '#f ((lambda (g$3372$22834) (if g$3372$22834 (begin '#f ((lambda (g$3372$22836) (if g$3372$22836 (begin '#f (append g$3372$22834 g$3372$22836)) '#f)) ((letrec ((g$3372$22838 (lambda (g$3372$22840) (if (g$3372$13212 g$3372$22840) ((lambda (g$3372$22842) (if g$3372$22842 (begin '#f ((lambda (g$3372$22844) (if g$3372$22844 (begin '#f (map cons g$3372$22842 g$3372$22844)) '#f)) (g$3372$22838 (g$3372$13224 g$3372$22840)))) '#f)) ((lambda (g$3372$22846) (list g$3372$22846)) (g$3372$13220 g$3372$22840))) (if (g$3372$13216 g$3372$22840) (list (begin 'imp* '())) '#f))))) g$3372$22838) (g$3372$13224 g$3372$22832)))) '#f)) ((lambda (g$3372$22848) (list g$3372$22848)) (g$3372$13220 g$3372$22832)))) '#f)) (g$3372$13220 g$3372$22816)))) '#f)) g$3372$22794))) g$3372$22792))) (set! g$3372$13657 (lambda (g$3372$22850) (call-with-values (lambda () (g$3372$13655 g$3372$22850)) (lambda (g$3372$22852 g$3372$22853) (call-with-values (lambda () (g$3372$13651 '() g$3372$22852 g$3372$22853)) (lambda (g$3372$22856 g$3372$22857 g$3372$22858 g$3372$22859 g$3372$22860 g$3372$22861 g$3372$22862) (values g$3372$22857 g$3372$22859))))))) (set! g$3372$13660 (lambda (g$3372$22870 g$3372$22871) (vector 'g$3372$13659 g$3372$22870 g$3372$22871))) (set! g$3372$13662 (lambda (g$3372$22874) (if (vector? g$3372$22874) (if (= (vector-length g$3372$22874) (+ '1 (length '(subst imp*)))) (begin '#f (eq? (vector-ref g$3372$22874 '0) 'g$3372$13659)) '#f) '#f))) (set! g$3372$13664 (lambda (g$3372$22876) (if (g$3372$13662 g$3372$22876) (vector-ref g$3372$22876 '1) (error 'env-subst '"~s is not of type ~s" g$3372$22876 'env)))) (set! g$3372$13666 (lambda (g$3372$22878) (if (g$3372$13662 g$3372$22878) (vector-ref g$3372$22878 '2) (error 'env-imp* '"~s is not of type ~s" g$3372$22878 'env)))) (set! g$3372$13668 (lambda (g$3372$22880 g$3372$22881) (if (g$3372$13662 g$3372$22880) (vector-set! g$3372$22880 '1 g$3372$22881) (error 'set-env-subst! '"~s is not of type ~s" g$3372$22880 'env)))) (set! g$3372$13670 (lambda (g$3372$22884 g$3372$22885) (if (g$3372$13662 g$3372$22884) (vector-set! g$3372$22884 '2 g$3372$22885) (error 'set-env-imp*! '"~s is not of type ~s" g$3372$22884 'env)))) (set! g$3372$13672 (lambda (g$3372$22888) (g$3372$13662 g$3372$22888))) (set! g$3372$13674 (lambda g$3372$22890 (call-with-values (lambda () (g$3372$13639 g$3372$22890)) (lambda (g$3372$22892 g$3372$22893) (g$3372$13660 g$3372$22892 g$3372$22893))))) (set! g$3372$13676 (lambda (g$3372$22896) (begin (if (eqv? g$3372$22896 '5) (void) (error 'null-environment '"not 5" g$3372$22896)) (g$3372$13674 '(psyntax null-environment-5))))) (set! g$3372$13678 (lambda (g$3372$22898) (begin (if (eqv? g$3372$22898 '5) (void) (error 'scheme-report-environment '"not 5" g$3372$22898)) (g$3372$13674 '(psyntax scheme-report-environment-5))))) (set! g$3372$13680 (lambda (g$3372$22900 g$3372$22901) (begin (if (g$3372$13662 g$3372$22901) (void) (error 'expand '"not an environment" g$3372$22901)) ((lambda (g$3372$22904) ((lambda (g$3372$22906) ((lambda (g$3372$22908 g$3372$22909 g$3372$22910) ((lambda (g$3372$22914) (begin (g$3372$13167 g$3372$22906) (values g$3372$22914 (g$3372$22909)))) ((lambda (g$3372$22920 g$3372$22921 g$3372$22922 g$3372$22923) ((lambda (g$3372$22928) (dynamic-wind g$3372$22928 (lambda () (g$3372$13597 g$3372$22908 '() '())) g$3372$22928)) (lambda () (begin ((lambda (g$3372$22930) (begin (g$3372$22920 g$3372$22922) (set! g$3372$22922 g$3372$22930))) (g$3372$22920)) ((lambda (g$3372$22932) (begin (g$3372$22921 g$3372$22923) (set! g$3372$22923 g$3372$22932))) (g$3372$22921)))))) g$3372$13645 g$3372$13647 g$3372$22909 g$3372$22910))) (g$3372$13202 g$3372$22900 g$3372$13132 (list g$3372$22906)) (g$3372$13643) (g$3372$13643))) (g$3372$13641 g$3372$22904))) (g$3372$13664 g$3372$22901))))) (set! g$3372$13682 (lambda (g$3372$22934 g$3372$22935) (begin (if (g$3372$13662 g$3372$22935) (void) (error 'eval '"not an environment" g$3372$22935)) (call-with-values (lambda () (g$3372$13680 g$3372$22934 g$3372$22935)) (lambda (g$3372$22938 g$3372$22939) (begin (for-each g$3372$12831 g$3372$22939) (eval-core (g$3372$12393 g$3372$22938)))))))) (set! g$3372$13684 (lambda (g$3372$22942) ((lambda (g$3372$22944 g$3372$22946) (begin (set! g$3372$22944 (lambda (g$3372$22956) (if (null? g$3372$22956) (g$3372$13108) (g$3372$13109 '#f (map (lambda (g$3372$22958) ((lambda (g$3372$22960 g$3372$22961) (list 'set! g$3372$22960 g$3372$22961)) (car g$3372$22958) (cddr g$3372$22958))) g$3372$22956))))) (set! g$3372$22946 (lambda (g$3372$22948) (for-each (lambda (g$3372$22950) ((lambda (g$3372$22952 g$3372$22953) (set-symbol-value! g$3372$22952 g$3372$22953)) (car g$3372$22950) (cadr g$3372$22950))) g$3372$22948))) (call-with-values (lambda () (g$3372$13653 g$3372$22942)) (lambda (g$3372$22964 g$3372$22965 g$3372$22966 g$3372$22967 g$3372$22968 g$3372$22969 g$3372$22970 g$3372$22971 g$3372$22972) ((lambda (g$3372$22982 g$3372$22983 g$3372$22984 g$3372$22985 g$3372$22986 g$3372$22987) (begin (g$3372$12835 g$3372$22982 g$3372$22983 g$3372$22984 g$3372$22985 g$3372$22986 g$3372$22987 g$3372$22971 g$3372$22972 (lambda () (g$3372$22946 g$3372$22970)) (lambda () (eval-core (g$3372$12393 g$3372$22969))) '#t) (values g$3372$22969 (g$3372$22944 g$3372$22970) g$3372$22971 g$3372$22972))) (gensym) g$3372$22964 g$3372$22965 (map g$3372$12827 g$3372$22966) (map g$3372$12827 g$3372$22968) (map g$3372$12827 g$3372$22967)))))) '#f '#f))) (set! g$3372$13686 (lambda (g$3372$22994) (call-with-values (lambda () (g$3372$13684 g$3372$22994)) (lambda (g$3372$22996 g$3372$22997 g$3372$22998 g$3372$22999) (values g$3372$22996 g$3372$22998 g$3372$22999))))) (set! g$3372$13688 (lambda (g$3372$23004 g$3372$23005 g$3372$23006) (if (null? g$3372$23005) g$3372$23006 (g$3372$13688 g$3372$23004 (cdr g$3372$23005) (cons (g$3372$23004 (car g$3372$23005)) g$3372$23006))))) (set! g$3372$13690 (lambda (g$3372$23010 g$3372$23011) (g$3372$13109 '#f (cons (g$3372$13108) (g$3372$13688 (lambda (g$3372$23014) (list 'set! (cdr g$3372$23014) (car g$3372$23014))) g$3372$23010 g$3372$23011))))) (set! g$3372$13692 (lambda (g$3372$23016 g$3372$23017 g$3372$23018) (map (lambda (g$3372$23022 g$3372$23023) ((lambda (g$3372$23026) ((lambda (g$3372$23028) ((lambda () (begin (if g$3372$23028 (void) (error 'expander '"cannot export unbound identifier" (g$3372$13244 g$3372$23026 '()))) (cons g$3372$23023 g$3372$23028))))) (g$3372$13248 g$3372$23026))) (g$3372$13202 g$3372$23022 g$3372$13132 (list g$3372$23018)))) g$3372$23016 g$3372$23017))) (set! g$3372$13694 (lambda (g$3372$23030) (letrec ((g$3372$23032 (lambda (g$3372$23034 g$3372$23035 g$3372$23036 g$3372$23037) (if (null? g$3372$23034) (values g$3372$23035 g$3372$23036 g$3372$23037) ((lambda (g$3372$23042) ((lambda (g$3372$23044 g$3372$23045) ((lambda (g$3372$23048) (if (memv g$3372$23048 '(lexical)) ((lambda (g$3372$23053) (g$3372$23032 (cdr g$3372$23034) (cons (cons* g$3372$23044 'global g$3372$23053) g$3372$23035) (cons (cons (g$3372$13256 g$3372$23045) g$3372$23053) g$3372$23036) g$3372$23037)) (g$3372$13138 (g$3372$13256 g$3372$23045))) (if (memv g$3372$23048 '(local-macro)) ((lambda (g$3372$23051) (g$3372$23032 (cdr g$3372$23034) (cons (cons* g$3372$23044 'global-macro g$3372$23051) g$3372$23035) g$3372$23036 (cons (cons g$3372$23051 (g$3372$13256 g$3372$23045)) g$3372$23037))) (gensym)) (if (memv g$3372$23048 '(local-macro!)) ((lambda (g$3372$23049) (g$3372$23032 (cdr g$3372$23034) (cons (cons* g$3372$23044 'global-macro! g$3372$23049) g$3372$23035) g$3372$23036 (cons (cons g$3372$23049 (g$3372$13256 g$3372$23045)) g$3372$23037))) (gensym)) (if (memv g$3372$23048 '($rtd $module)) (g$3372$23032 (cdr g$3372$23034) (cons g$3372$23042 g$3372$23035) g$3372$23036 g$3372$23037) (error 'expander '"BUG: do not know how to export" (g$3372$13254 g$3372$23045) (g$3372$13256 g$3372$23045))))))) (g$3372$13254 g$3372$23045))) (car g$3372$23042) (cdr g$3372$23042))) (car g$3372$23034)))))) (g$3372$23032 g$3372$23030 '() '() '())))) (set! g$3372$13696 (lambda (g$3372$23055) ((lambda (g$3372$23057) ((lambda (g$3372$23059) (if (if g$3372$23059 (begin '#f (apply (lambda (g$3372$23061) '#t) g$3372$23059)) '#f) (apply (lambda (g$3372$23063) (map (lambda (g$3372$23065) (g$3372$13176 (gensym 't) g$3372$13132 '())) g$3372$23063)) g$3372$23059) ((lambda (g$3372$23067) ((lambda (g$3372$23069) (if (if g$3372$23069 (begin '#f (apply (lambda () '#t) g$3372$23069)) '#f) (apply (lambda () (error 'generate-temporaries '"not a list")) g$3372$23069) (error 'expander '"invalid syntax" (g$3372$13244 g$3372$23067 '())))) ((lambda (g$3372$23071) '()) g$3372$23067))) g$3372$23057))) ((letrec ((g$3372$23073 (lambda (g$3372$23075) (if (g$3372$13212 g$3372$23075) ((lambda (g$3372$23077) (if g$3372$23077 (begin '#f ((lambda (g$3372$23079) (if g$3372$23079 (begin '#f (map cons g$3372$23077 g$3372$23079)) '#f)) (g$3372$23073 (g$3372$13224 g$3372$23075)))) '#f)) ((lambda (g$3372$23081) (list g$3372$23081)) (g$3372$13220 g$3372$23075))) (if (g$3372$13216 g$3372$23075) (list (begin 'ls '())) '#f))))) g$3372$23073) g$3372$23057))) g$3372$23055))) (set! g$3372$13698 (lambda (g$3372$23083 g$3372$23084) (if (g$3372$13226 g$3372$23083) (if (g$3372$13226 g$3372$23084) (g$3372$13234 g$3372$23083 g$3372$23084) (error 'free-identifier=? '"not an identifier" g$3372$23084)) (error 'free-identifier=? '"not an identifier" g$3372$23083)))) (set! g$3372$13700 (lambda (g$3372$23087 g$3372$23088) (if (g$3372$13226 g$3372$23087) (if (g$3372$13226 g$3372$23088) (g$3372$13232 g$3372$23087 g$3372$23088) (error 'bound-identifier=? '"not an identifier" g$3372$23088)) (error 'bound-identifier=? '"not an identifier" g$3372$23087)))) (set! g$3372$13702 (lambda (g$3372$23091 . g$3372$23093) (begin (if (for-all string? g$3372$23093) (void) (error 'syntax-error '"invalid argument" g$3372$23093)) (error 'expander '"invalid syntax" (g$3372$13246 g$3372$23091) (apply string-append g$3372$23093))))) (set! g$3372$13704 (lambda (g$3372$23095) (g$3372$13226 g$3372$23095))) (set! g$3372$13706 (lambda (g$3372$23097 g$3372$23098) (if (g$3372$13226 g$3372$23097) (g$3372$13192 g$3372$23097 g$3372$23098) (error 'datum->syntax '"not an identifier" g$3372$23097)))) (set! g$3372$13708 (lambda (g$3372$23101) (g$3372$13246 g$3372$23101))) (set! g$3372$13710 (lambda (g$3372$23103) (call-with-values (lambda () (g$3372$13657 g$3372$23103)) (lambda (g$3372$23105 g$3372$23106) (begin (for-each g$3372$12831 g$3372$23105) (eval-core (g$3372$12393 g$3372$23106))))))) (set! g$3372$13712 (g$3372$12319 '#f)) (set! g$3372$13714 (lambda (g$3372$23109) ((lambda (g$3372$23111) (if g$3372$23111 ((lambda (g$3372$23113) ((lambda (g$3372$23115) (if g$3372$23115 (cdr g$3372$23115) ((lambda (g$3372$23117) ((lambda (g$3372$23119) (if g$3372$23119 ((lambda (g$3372$23121) ((lambda (g$3372$23123) (begin (g$3372$12834 g$3372$23113 g$3372$23109 g$3372$23123) g$3372$23123)) (cdr g$3372$23121))) g$3372$23119) ((lambda (g$3372$23125) (begin (g$3372$12834 g$3372$23113 g$3372$23109 g$3372$23125) (g$3372$12833 g$3372$23113 g$3372$23125 (cons 'global (cons g$3372$23113 (g$3372$13138 g$3372$23109)))) g$3372$23125)) (g$3372$13140 g$3372$23109)))) (assq g$3372$23109 g$3372$23117))) (if (g$3372$12839 '(ikarus)) (g$3372$12865 (g$3372$12840 '(ikarus))) '())))) (assq g$3372$23109 (g$3372$12865 g$3372$23113)))) g$3372$23111) '#f)) (g$3372$13712)))) (set! g$3372$13716 (lambda (g$3372$23127) ((lambda (g$3372$23129) (begin (set! g$3372$23129 (lambda (g$3372$23131) ((lambda (g$3372$23133 g$3372$23134) (if g$3372$23133 (set-symbol-value! g$3372$23133 (eval-core (g$3372$12393 g$3372$23134))) (eval-core (g$3372$12393 g$3372$23134)))) (car g$3372$23131) (cdr g$3372$23131)))) ((lambda (g$3372$23137 g$3372$23138) ((lambda (g$3372$23141) (begin (for-each g$3372$12831 (g$3372$23137)) (if (null? g$3372$23141) (void) (begin (for-each g$3372$23129 (reverse (cdr g$3372$23141))) (g$3372$23129 (car g$3372$23141)))))) ((lambda (g$3372$23149 g$3372$23150 g$3372$23151 g$3372$23152 g$3372$23153 g$3372$23154) ((lambda (g$3372$23161) (dynamic-wind g$3372$23161 (lambda () (g$3372$13629 (list (g$3372$13202 g$3372$23127 g$3372$13132 '())) '())) g$3372$23161)) (lambda () (begin ((lambda (g$3372$23163) (begin (g$3372$23149 g$3372$23152) (set! g$3372$23152 g$3372$23163))) (g$3372$23149)) ((lambda (g$3372$23165) (begin (g$3372$23150 g$3372$23153) (set! g$3372$23153 g$3372$23165))) (g$3372$23150)) ((lambda (g$3372$23167) (begin (g$3372$23151 g$3372$23154) (set! g$3372$23154 g$3372$23167))) (g$3372$23151)))))) g$3372$13645 g$3372$13647 g$3372$13712 g$3372$23137 g$3372$23138 (g$3372$12840 '(ikarus interaction))))) (g$3372$13643) (g$3372$13643)))) '#f))) (begin (set! g$3372$23169 g$3372$13716) (set! g$3372$23170 g$3372$13714) (set! g$3372$23171 g$3372$13712) (set! g$3372$23172 g$3372$13710) (set! g$3372$23173 g$3372$13708) (set! g$3372$23174 g$3372$13706) (set! g$3372$23175 g$3372$13704) (set! g$3372$23176 g$3372$13702) (set! g$3372$23177 g$3372$13700) (set! g$3372$23178 g$3372$13698) (set! g$3372$23179 g$3372$13696) (set! g$3372$23180 g$3372$13694) (set! g$3372$23181 g$3372$13692) (set! g$3372$23182 g$3372$13690) (set! g$3372$23183 g$3372$13688) (set! g$3372$23184 g$3372$13686) (set! g$3372$23185 g$3372$13684) (set! g$3372$23186 g$3372$13682) (set! g$3372$23187 g$3372$13680) (set! g$3372$23188 g$3372$13678) (set! g$3372$23189 g$3372$13676) (set! g$3372$23190 g$3372$13674) (set! g$3372$23191 g$3372$13672) (set! g$3372$23192 g$3372$13670) (set! g$3372$23193 g$3372$13668) (set! g$3372$23194 g$3372$13666) (set! g$3372$23195 g$3372$13664) (set! g$3372$23196 g$3372$13662) (set! g$3372$23197 g$3372$13660) (set! g$3372$23198 g$3372$13657) (set! g$3372$23199 g$3372$13655) (set! g$3372$23200 g$3372$13653) (set! g$3372$23201 g$3372$13651) (set! g$3372$23202 g$3372$13649) (set! g$3372$23203 g$3372$13647) (set! g$3372$23204 g$3372$13645) (set! g$3372$23205 g$3372$13643) (set! g$3372$23206 g$3372$13641) (set! g$3372$23207 g$3372$13639) (set! g$3372$23208 g$3372$13637) (set! g$3372$23209 g$3372$13635) (set! g$3372$23210 g$3372$13633) (set! g$3372$23211 g$3372$13631) (set! g$3372$23212 g$3372$13629) (set! g$3372$23213 g$3372$13627) (set! g$3372$23214 g$3372$13625) (set! g$3372$23215 g$3372$13623) (set! g$3372$23216 g$3372$13621) (set! g$3372$23217 g$3372$13619) (set! g$3372$23218 g$3372$13617) (set! g$3372$23219 g$3372$13615) (set! g$3372$23220 g$3372$13613) (set! g$3372$23221 g$3372$13611) (set! g$3372$23222 g$3372$13609) (set! g$3372$23223 g$3372$13607) (set! g$3372$23224 g$3372$13605) (set! g$3372$23225 g$3372$13603) (set! g$3372$23226 g$3372$13601) (set! g$3372$23227 g$3372$13599) (set! g$3372$23228 g$3372$13597) (set! g$3372$23229 g$3372$13595) (set! g$3372$23230 g$3372$13593) (set! g$3372$23231 g$3372$13591) (set! g$3372$23232 g$3372$13589) (set! g$3372$23233 g$3372$13587) (set! g$3372$23234 g$3372$13585) (set! g$3372$23235 g$3372$13583) (set! g$3372$23236 g$3372$13581) (set! g$3372$23237 g$3372$13579) (set! g$3372$23238 g$3372$13577) (set! g$3372$23239 g$3372$13575) (set! g$3372$23240 g$3372$13573) (set! g$3372$23241 g$3372$13571) (set! g$3372$23242 g$3372$13569) (set! g$3372$23243 g$3372$13567) (set! g$3372$23244 g$3372$13565) (set! g$3372$23245 g$3372$13563) (set! g$3372$23246 g$3372$13561) (set! g$3372$23247 g$3372$13559) (set! g$3372$23248 g$3372$13557) (set! g$3372$23249 g$3372$13555) (set! g$3372$23250 g$3372$13553) (set! g$3372$23251 g$3372$13551) (set! g$3372$23252 g$3372$13549) (set! g$3372$23253 g$3372$13547) (set! g$3372$23254 g$3372$13545) (set! g$3372$23255 g$3372$13543) (set! g$3372$23256 g$3372$13541) (set! g$3372$23257 g$3372$13539) (set! g$3372$23258 g$3372$13537) (set! g$3372$23259 g$3372$13535) (set! g$3372$23260 g$3372$13533) (set! g$3372$23261 g$3372$13531) (set! g$3372$23262 g$3372$13529) (set! g$3372$23263 g$3372$13527) (set! g$3372$23264 g$3372$13525) (set! g$3372$23265 g$3372$13523) (set! g$3372$23266 g$3372$13521) (set! g$3372$23267 g$3372$13519) (set! g$3372$23268 g$3372$13517) (set! g$3372$23269 g$3372$13515) (set! g$3372$23270 g$3372$13513) (set! g$3372$23271 g$3372$13511) (set! g$3372$23272 g$3372$13509) (set! g$3372$23273 g$3372$13507) (set! g$3372$23274 g$3372$13505) (set! g$3372$23275 g$3372$13503) (set! g$3372$23276 g$3372$13501) (set! g$3372$23277 g$3372$13499) (set! g$3372$23278 g$3372$13497) (set! g$3372$23279 g$3372$13495) (set! g$3372$23280 g$3372$13493) (set! g$3372$23281 g$3372$13491) (set! g$3372$23282 g$3372$13489) (set! g$3372$23283 g$3372$13487) (set! g$3372$23284 g$3372$13485) (set! g$3372$23285 g$3372$13483) (set! g$3372$23286 g$3372$13481) (set! g$3372$23287 g$3372$13479) (set! g$3372$23288 g$3372$13477) (set! g$3372$23289 g$3372$13475) (set! g$3372$23291 g$3372$13276) (set! g$3372$23292 g$3372$13274) (set! g$3372$23293 g$3372$13272) (set! g$3372$23295 g$3372$13258) (set! g$3372$23296 g$3372$13256) (set! g$3372$23297 g$3372$13254) (set! g$3372$23298 g$3372$13252) (set! g$3372$23299 g$3372$13250) (set! g$3372$23300 g$3372$13248) (set! g$3372$23301 g$3372$13246) (set! g$3372$23302 g$3372$13244) (set! g$3372$23303 g$3372$13242) (set! g$3372$23304 g$3372$13240) (set! g$3372$23305 g$3372$13238) (set! g$3372$23306 g$3372$13236) (set! g$3372$23307 g$3372$13234) (set! g$3372$23308 g$3372$13232) (set! g$3372$23309 g$3372$13230) (set! g$3372$23310 g$3372$13228) (set! g$3372$23311 g$3372$13226) (set! g$3372$23312 g$3372$13224) (set! g$3372$23313 g$3372$13222) (set! g$3372$23314 g$3372$13220) (set! g$3372$23315 g$3372$13218) (set! g$3372$23316 g$3372$13216) (set! g$3372$23317 g$3372$13214) (set! g$3372$23318 g$3372$13212) (set! g$3372$23319 g$3372$13210) (set! g$3372$23320 g$3372$13208) (set! g$3372$23321 g$3372$13206) (set! g$3372$23322 g$3372$13204) (set! g$3372$23323 g$3372$13202) (set! g$3372$23324 g$3372$13200) (set! g$3372$23325 g$3372$13198) (set! g$3372$23326 g$3372$13196) (set! g$3372$23327 g$3372$13194) (set! g$3372$23328 g$3372$13192) (set! g$3372$23329 g$3372$13190) (set! g$3372$23330 g$3372$13188) (set! g$3372$23331 g$3372$13186) (set! g$3372$23332 g$3372$13184) (set! g$3372$23333 g$3372$13182) (set! g$3372$23334 g$3372$13180) (set! g$3372$23335 g$3372$13178) (set! g$3372$23336 g$3372$13176) (set! g$3372$23337 g$3372$13173) (set! g$3372$23338 g$3372$13171) (set! g$3372$23339 g$3372$13169) (set! g$3372$23340 g$3372$13167) (set! g$3372$23341 g$3372$13165) (set! g$3372$23342 g$3372$13163) (set! g$3372$23343 g$3372$13161) (set! g$3372$23344 g$3372$13159) (set! g$3372$23345 g$3372$13157) (set! g$3372$23346 g$3372$13155) (set! g$3372$23347 g$3372$13153) (set! g$3372$23348 g$3372$13151) (set! g$3372$23349 g$3372$13149) (set! g$3372$23350 g$3372$13147) (set! g$3372$23351 g$3372$13145) (set! g$3372$23352 g$3372$13143) (set! g$3372$23353 g$3372$13140) (set! g$3372$23354 g$3372$13138) (set! g$3372$23355 g$3372$13136) (set! g$3372$23356 g$3372$13134) (set! g$3372$23357 g$3372$13132) (set! g$3372$23359 g$3372$13127) (set! g$3372$23360 g$3372$13125) (g$3372$12843 g$3372$13684)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (g$3372$12397 (lambda (g$3372$24124) ((lambda (g$3372$24126) (if g$3372$24126 (cdr g$3372$24126) '#f)) (assq g$3372$24124 '((syntax-error . g$3372$23176) (syntax-dispatch . g$3372$23242) (make-variable-transformer . g$3372$23292) (identifier? . g$3372$23175) (generate-temporaries . g$3372$23179) (free-identifier=? . g$3372$23178) (syntax->datum . g$3372$23173) (datum->syntax . g$3372$23174) (bound-identifier=? . g$3372$23177) (null-environment . g$3372$23189) (eval . g$3372$23186) (environment . g$3372$23190)))))) (g$3372$12835 'g$3372$24091 '(ikarus interaction) '() '() '() '() '() '() values values '#t) (g$3372$12835 'g$3372$24092 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . g$3372$23427) (unquote . g$3372$23426) (delay . g$3372$23419) (or . g$3372$23417) (and . g$3372$23416) (do . g$3372$23415) (cond . g$3372$23414) (let* . g$3372$23413) (let . g$3372$23412) (quasiquote . g$3372$23408) (syntax-rules . g$3372$23407) (case . g$3372$23401) (if . g$3372$23397) (letrec . g$3372$23395) (lambda . g$3372$23392) (quote . g$3372$23389) (letrec-syntax . g$3372$23387) (let-syntax . g$3372$23386) (set! . g$3372$23385) (begin . g$3372$23383) (define-syntax . g$3372$23381) (define . g$3372$23380)) '() values values '#t) (g$3372$12835 'g$3372$24093 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . g$3372$24072) (string-ci>=? . g$3372$24071) (string-ci=? . g$3372$24070) (string-ci<? . g$3372$24069) (string-ci<=? . g$3372$24068) (char-whitespace? . g$3372$24067) (char-upper-case? . g$3372$24066) (char-numeric? . g$3372$24064) (char-lower-case? . g$3372$24063) (char-upcase . g$3372$24061) (char-downcase . g$3372$24058) (char-ci>? . g$3372$24057) (char-ci>=? . g$3372$24056) (char-ci=? . g$3372$24055) (char-ci<? . g$3372$24054) (char-ci<=? . g$3372$24053) (char-alphabetic? . g$3372$24052) (call-with-output-file . g$3372$24008) (call-with-input-file . g$3372$24007) (write-char . g$3372$24006) (write . g$3372$24005) (with-output-to-file . g$3372$24004) (with-input-from-file . g$3372$24003) (read-char . g$3372$24002) (read . g$3372$24001) (peek-char . g$3372$24000) (open-output-file . g$3372$23999) (open-input-file . g$3372$23998) (newline . g$3372$23997) (display . g$3372$23996) (close-output-port . g$3372$23995) (close-input-port . g$3372$23994) (eof-object . g$3372$23992) (current-output-port . g$3372$23990) (current-input-port . g$3372$23989) (output-port? . g$3372$23988) (input-port? . g$3372$23987) (scheme-report-environment . g$3372$23902) (quotient . g$3372$23901) (null-environment . g$3372$13677) (remainder . g$3372$23900) (modulo . g$3372$23899) (inexact->exact . g$3372$23898) (force . g$3372$23897) (exact->inexact . g$3372$23896) (string-fill! . g$3372$23893) (string-set! . g$3372$23892) (set-cdr! . g$3372$23891) (set-car! . g$3372$23890) (memv . g$3372$23884) (memq . g$3372$23883) (member . g$3372$23881) (assv . g$3372$23873) (assq . g$3372$23872) (assoc . g$3372$23870) (eval . g$3372$13683) (zero? . g$3372$23639) (vector? . g$3372$23638) (vector-set! . g$3372$23637) (vector-ref . g$3372$23636) (vector-length . g$3372$23634) (vector-fill! . g$3372$23632) (vector->list . g$3372$23631) (vector . g$3372$23630) (values . g$3372$23629) (truncate . g$3372$23628) (tan . g$3372$23627) (symbol? . g$3372$23626) (symbol->string . g$3372$23624) (substring . g$3372$23623) (string? . g$3372$23622) (string>? . g$3372$23621) (string>=? . g$3372$23620) (string=? . g$3372$23619) (string<? . g$3372$23618) (string<=? . g$3372$23617) (string-ref . g$3372$23616) (string-length . g$3372$23615) (string-copy . g$3372$23613) (string-append . g$3372$23612) (string->symbol . g$3372$23611) (string->number . g$3372$23610) (string->list . g$3372$23609) (string . g$3372$23608) (sqrt . g$3372$23607) (sin . g$3372$23606) (round . g$3372$23605) (reverse . g$3372$23604) (real? . g$3372$23603) (real-part . g$3372$23601) (rationalize . g$3372$23600) (rational? . g$3372$23599) (procedure? . g$3372$23597) (positive? . g$3372$23596) (pair? . g$3372$23595) (odd? . g$3372$23594) (numerator . g$3372$23593) (number? . g$3372$23592) (number->string . g$3372$23591) (not . g$3372$23589) (negative? . g$3372$23588) (min . g$3372$23586) (max . g$3372$23585) (map . g$3372$23584) (make-vector . g$3372$23583) (make-string . g$3372$23582) (make-rectangular . g$3372$23581) (make-polar . g$3372$23580) (magnitude . g$3372$23579) (log . g$3372$23578) (list? . g$3372$23577) (list-tail . g$3372$23576) (list-ref . g$3372$23575) (list->vector . g$3372$23574) (list->string . g$3372$23573) (list . g$3372$23572) (length . g$3372$23571) (lcm . g$3372$23570) (integer? . g$3372$23569) (integer->char . g$3372$23567) (inexact? . g$3372$23565) (imag-part . g$3372$23563) (gcd . g$3372$23562) (for-each . g$3372$23561) (floor . g$3372$23560) (expt . g$3372$23558) (exp . g$3372$23557) (exact? . g$3372$23556) (even? . g$3372$23553) (eqv? . g$3372$23551) (equal? . g$3372$23550) (eq? . g$3372$23549) (dynamic-wind . g$3372$23548) (denominator . g$3372$23541) (cos . g$3372$23540) (cons . g$3372$23539) (complex? . g$3372$23538) (char? . g$3372$23537) (char>? . g$3372$23536) (char>=? . g$3372$23535) (char=? . g$3372$23534) (char<? . g$3372$23533) (char<=? . g$3372$23532) (char->integer . g$3372$23531) (ceiling . g$3372$23530) (call-with-values . g$3372$23529) (call-with-current-continuation . g$3372$23527) (cddddr . g$3372$23526) (cdddar . g$3372$23525) (cddadr . g$3372$23524) (cddaar . g$3372$23523) (cdaddr . g$3372$23522) (cdadar . g$3372$23521) (cdaadr . g$3372$23520) (cdaaar . g$3372$23519) (cadddr . g$3372$23518) (caddar . g$3372$23517) (cadadr . g$3372$23516) (cadaar . g$3372$23515) (caaddr . g$3372$23514) (caadar . g$3372$23513) (caaadr . g$3372$23512) (caaaar . g$3372$23511) (cdddr . g$3372$23510) (cddar . g$3372$23509) (cdadr . g$3372$23508) (cdaar . g$3372$23507) (caddr . g$3372$23506) (cadar . g$3372$23505) (caadr . g$3372$23504) (caaar . g$3372$23503) (cddr . g$3372$23502) (cdar . g$3372$23501) (cadr . g$3372$23500) (caar . g$3372$23499) (cdr . g$3372$23498) (car . g$3372$23497) (boolean? . g$3372$23496) (atan . g$3372$23494) (asin . g$3372$23492) (apply . g$3372$23491) (append . g$3372$23490) (angle . g$3372$23489) (acos . g$3372$23488) (abs . g$3372$23487) (/ . g$3372$23486) (* . g$3372$23485) (- . g$3372$23484) (+ . g$3372$23483) (>= . g$3372$23482) (> . g$3372$23481) (= . g$3372$23480) (<= . g$3372$23479) (< . g$3372$23478) (unquote-splicing . g$3372$23427) (unquote . g$3372$23426) (delay . g$3372$23419) (or . g$3372$23417) (and . g$3372$23416) (do . g$3372$23415) (cond . g$3372$23414) (let* . g$3372$23413) (let . g$3372$23412) (quasiquote . g$3372$23408) (syntax-rules . g$3372$23407) (case . g$3372$23401) (if . g$3372$23397) (letrec . g$3372$23395) (lambda . g$3372$23392) (quote . g$3372$23389) (letrec-syntax . g$3372$23387) (let-syntax . g$3372$23386) (set! . g$3372$23385) (begin . g$3372$23383) (define-syntax . g$3372$23381) (define . g$3372$23380)) '() values values '#t) (g$3372$12835 'g$3372$24094 '(psyntax modules) '() '() '() '() '((module . g$3372$23382)) '() values values '#t) (g$3372$12835 'g$3372$24095 '(chez parameters) '() '() '() '() '() '() values values '#t) (g$3372$12835 'g$3372$24096 '(rnrs) '(6) '() '() '() '((regexp? . g$3372$24090) (string-upcase . g$3372$24080) (string-titlecase . g$3372$24079) (string-normalize-nfkd . g$3372$24078) (string-normalize-nfkc . g$3372$24077) (string-normalize-nfd . g$3372$24076) (string-normalize-nfc . g$3372$24075) (string-foldcase . g$3372$24074) (string-downcase . g$3372$24073) (string-ci>? . g$3372$24072) (string-ci>=? . g$3372$24071) (string-ci=? . g$3372$24070) (string-ci<? . g$3372$24069) (string-ci<=? . g$3372$24068) (char-whitespace? . g$3372$24067) (char-upper-case? . g$3372$24066) (char-title-case? . g$3372$24065) (char-numeric? . g$3372$24064) (char-lower-case? . g$3372$24063) (char-general-category . g$3372$24062) (char-upcase . g$3372$24061) (char-titlecase . g$3372$24060) (char-foldcase . g$3372$24059) (char-downcase . g$3372$24058) (char-ci>? . g$3372$24057) (char-ci>=? . g$3372$24056) (char-ci=? . g$3372$24055) (char-ci<? . g$3372$24054) (char-ci<=? . g$3372$24053) (char-alphabetic? . g$3372$24052) (make-variable-transformer . g$3372$13275) (identifier? . g$3372$13705) (generate-temporaries . g$3372$13697) (free-identifier=? . g$3372$13699) (syntax->datum . g$3372$13709) (datum->syntax . g$3372$13707) (bound-identifier=? . g$3372$13701) (record-type-descriptor? . g$3372$24051) (record-predicate . g$3372$24050) (record-mutator . g$3372$24049) (record-constructor . g$3372$24048) (record-accessor . g$3372$24047) (make-record-type-descriptor . g$3372$24046) (make-record-constructor-descriptor . g$3372$24045) (record? . g$3372$24044) (record-type-uid . g$3372$24043) (record-type-sealed? . g$3372$24042) (record-type-parent . g$3372$24041) (record-type-opaque? . g$3372$24040) (record-type-name . g$3372$24039) (record-type-generative? . g$3372$24038) (record-type-field-names . g$3372$24037) (record-rtd . g$3372$24036) (record-field-mutable? . g$3372$24035) (delete-file . g$3372$24034) (file-exists? . g$3372$24033) (vector-sort! . g$3372$24032) (vector-sort . g$3372$24031) (list-sort . g$3372$24030) (symbol-hash . g$3372$24029) (string-ci-hash . g$3372$24028) (string-hash . g$3372$24027) (equal-hash . g$3372$24026) (hashtable-equivalence-function . g$3372$24025) (make-hashtable . g$3372$24024) (hashtable-hash-function . g$3372$24023) (make-eqv-hashtable . g$3372$24022) (make-eq-hashtable . g$3372$24021) (hashtable? . g$3372$24020) (hashtable-update! . g$3372$24019) (hashtable-size . g$3372$24018) (hashtable-set! . g$3372$24017) (hashtable-ref . g$3372$24016) (hashtable-mutable? . g$3372$24015) (hashtable-keys . g$3372$24014) (hashtable-entries . g$3372$24013) (hashtable-delete! . g$3372$24012) (hashtable-copy . g$3372$24011) (hashtable-contains? . g$3372$24010) (hashtable-clear! . g$3372$24009) (call-with-output-file . g$3372$24008) (call-with-input-file . g$3372$24007) (write-char . g$3372$24006) (write . g$3372$24005) (with-output-to-file . g$3372$24004) (with-input-from-file . g$3372$24003) (read-char . g$3372$24002) (read . g$3372$24001) (peek-char . g$3372$24000) (open-output-file . g$3372$23999) (open-input-file . g$3372$23998) (newline . g$3372$23997) (display . g$3372$23996) (close-output-port . g$3372$23995) (close-input-port . g$3372$23994) (eof-object? . g$3372$23993) (eof-object . g$3372$23992) (current-error-port . g$3372$23991) (current-output-port . g$3372$23990) (current-input-port . g$3372$23989) (output-port? . g$3372$23988) (input-port? . g$3372$23987) (utf-8-codec . g$3372$23986) (utf-16-codec . g$3372$23985) (transcoder-error-handling-mode . g$3372$23984) (transcoder-eol-style . g$3372$23983) (transcoder-codec . g$3372$23982) (transcoded-port . g$3372$23981) (textual-port? . g$3372$23980) (string->bytevector . g$3372$23979) (standard-output-port . g$3372$23978) (standard-input-port . g$3372$23977) (standard-error-port . g$3372$23976) (set-port-position! . g$3372$23975) (put-u8 . g$3372$23974) (put-string . g$3372$23973) (put-datum . g$3372$23972) (put-char . g$3372$23971) (put-bytevector . g$3372$23970) (port? . g$3372$23969) (port-transcoder . g$3372$23968) (port-position . g$3372$23967) (port-has-set-port-position!? . g$3372$23966) (port-has-port-position? . g$3372$23965) (port-eof? . g$3372$23964) (output-port-buffer-mode . g$3372$23963) (open-string-output-port . g$3372$23962) (open-string-input-port . g$3372$23961) (open-file-output-port . g$3372$23960) (open-file-input/output-port . g$3372$23959) (open-file-input-port . g$3372$23958) (open-bytevector-output-port . g$3372$23957) (open-bytevector-input-port . g$3372$23956) (native-transcoder . g$3372$23955) (native-eol-style . g$3372$23954) (make-transcoder . g$3372$23953) (latin-1-codec . g$3372$23952) (make-i/o-write-error . g$3372$23951) (make-i/o-read-error . g$3372$23950) (make-i/o-port-error . g$3372$23949) (make-i/o-invalid-position-error . g$3372$23948) (make-i/o-filename-error . g$3372$23947) (make-i/o-file-protection-error . g$3372$23946) (make-i/o-file-is-read-only-error . g$3372$23945) (make-i/o-file-does-not-exist-error . g$3372$23944) (make-i/o-file-already-exists-error . g$3372$23943) (make-i/o-error . g$3372$23942) (make-i/o-encoding-error . g$3372$23941) (make-i/o-decoding-error . g$3372$23940) (make-custom-textual-output-port . g$3372$23939) (make-custom-textual-input/output-port . g$3372$23938) (make-custom-textual-input-port . g$3372$23937) (make-custom-binary-output-port . g$3372$23936) (make-custom-binary-input/output-port . g$3372$23935) (make-custom-binary-input-port . g$3372$23934) (make-bytevector . g$3372$23933) (lookahead-u8 . g$3372$23932) (lookahead-char . g$3372$23931) (i/o-write-error? . g$3372$23930) (i/o-read-error? . g$3372$23929) (i/o-port-error? . g$3372$23928) (i/o-invalid-position-error? . g$3372$23927) (i/o-filename-error? . g$3372$23926) (i/o-file-protection-error? . g$3372$23925) (i/o-file-is-read-only-error? . g$3372$23924) (i/o-file-does-not-exist-error? . g$3372$23923) (i/o-file-already-exists-error? . g$3372$23922) (i/o-error? . g$3372$23921) (i/o-error-port . g$3372$23920) (i/o-error-filename . g$3372$23919) (i/o-encoding-error? . g$3372$23918) (i/o-encoding-error-char . g$3372$23917) (i/o-decoding-error? . g$3372$23916) (get-u8 . g$3372$23915) (get-string-n! . g$3372$23914) (get-string-n . g$3372$23913) (get-string-all . g$3372$23912) (get-line . g$3372$23911) (get-datum . g$3372$23910) (get-char . g$3372$23909) (get-bytevector-some . g$3372$23908) (get-bytevector-n! . g$3372$23907) (get-bytevector-n . g$3372$23906) (get-bytevector-all . g$3372$23905) (flush-output-port . g$3372$23904) (close-port . g$3372$23903) (exit . g$3372$23895) (command-line . g$3372$23894) (remove . g$3372$23889) (remv . g$3372$23888) (remp . g$3372$23887) (remq . g$3372$23886) (partition . g$3372$23885) (memv . g$3372$23884) (memq . g$3372$23883) (memp . g$3372$23882) (member . g$3372$23881) (exists . g$3372$23880) (for-all . g$3372$23879) (fold-right . g$3372$23878) (fold-left . g$3372$23877) (find . g$3372$23876) (filter . g$3372$23875) (cons* . g$3372$23874) (assv . g$3372$23873) (assq . g$3372$23872) (assp . g$3372$23871) (assoc . g$3372$23870) (call-with-string-output-port . g$3372$23869) (call-with-port . g$3372$23868) (call-with-bytevector-output-port . g$3372$23867) (bytevector->string . g$3372$23866) (buffer-mode? . g$3372$23865) (binary-port? . g$3372$23864) (with-exception-handler . g$3372$23863) (raise-continuable . g$3372$23862) (raise . g$3372$23861) (make-enumeration . g$3372$23860) (enum-set=? . g$3372$23859) (enum-set-universe . g$3372$23858) (enum-set-union . g$3372$23857) (enum-set-subset? . g$3372$23856) (enum-set-projection . g$3372$23855) (enum-set-member? . g$3372$23854) (enum-set-intersection . g$3372$23853) (enum-set-indexer . g$3372$23852) (enum-set-difference . g$3372$23851) (enum-set-constructor . g$3372$23850) (enum-set-complement . g$3372$23849) (enum-set->list . g$3372$23848) (who-condition? . g$3372$23847) (warning? . g$3372$23846) (violation? . g$3372$23845) (undefined-violation? . g$3372$23844) (syntax-violation? . g$3372$23843) (syntax-violation-subform . g$3372$23842) (syntax-violation-form . g$3372$23841) (syntax-violation . g$3372$23840) (simple-conditions . g$3372$23839) (serious-condition? . g$3372$23838) (non-continuable-violation? . g$3372$23837) (&non-continuable . g$3372$23836) (message-condition? . g$3372$23835) (make-who-condition . g$3372$23834) (make-warning . g$3372$23833) (make-violation . g$3372$23832) (make-undefined-violation . g$3372$23831) (make-syntax-violation . g$3372$23830) (make-serious-condition . g$3372$23829) (make-non-continuable-violation . g$3372$23828) (make-message-condition . g$3372$23827) (make-lexical-violation . g$3372$23826) (make-irritants-condition . g$3372$23825) (make-implementation-restriction-violation . g$3372$23824) (make-error . g$3372$23823) (make-assertion-violation . g$3372$23822) (lexical-violation? . g$3372$23821) (irritants-condition? . g$3372$23820) (implementation-restriction-violation? . g$3372$23819) (&implementation-restriction . g$3372$23818) (error? . g$3372$23817) (condition-who . g$3372$23816) (condition-predicate . g$3372$23815) (condition-message . g$3372$23814) (condition-irritants . g$3372$23813) (condition-accessor . g$3372$23812) (condition . g$3372$23811) (assertion-violation? . g$3372$23810) (condition? . g$3372$23809) (utf32->string . g$3372$23808) (utf16->string . g$3372$23807) (utf8->string . g$3372$23806) (uint-list->bytevector . g$3372$23805) (u8-list->bytevector . g$3372$23804) (string->utf8 . g$3372$23803) (string->utf32 . g$3372$23802) (string->utf16 . g$3372$23801) (sint-list->bytevector . g$3372$23800) (native-endianness . g$3372$23799) (bytevector? . g$3372$23798) (bytevector=? . g$3372$23797) (bytevector-uint-set! . g$3372$23796) (bytevector-uint-ref . g$3372$23795) (bytevector-u8-set! . g$3372$23794) (bytevector-u8-ref . g$3372$23793) (bytevector-u64-set! . g$3372$23792) (bytevector-u64-ref . g$3372$23791) (bytevector-u64-native-set! . g$3372$23790) (bytevector-u64-native-ref . g$3372$23789) (bytevector-u32-set! . g$3372$23788) (bytevector-u32-ref . g$3372$23787) (bytevector-u32-native-set! . g$3372$23786) (bytevector-u32-native-ref . g$3372$23785) (bytevector-u16-set! . g$3372$23784) (bytevector-u16-ref . g$3372$23783) (bytevector-u16-native-set! . g$3372$23782) (bytevector-u16-native-ref . g$3372$23781) (bytevector-sint-set! . g$3372$23780) (bytevector-sint-ref . g$3372$23779) (bytevector-s8-set! . g$3372$23778) (bytevector-s8-ref . g$3372$23777) (bytevector-s64-set! . g$3372$23776) (bytevector-s64-ref . g$3372$23775) (bytevector-s64-native-set! . g$3372$23774) (bytevector-s64-native-ref . g$3372$23773) (bytevector-s32-set! . g$3372$23772) (bytevector-s32-ref . g$3372$23771) (bytevector-s32-native-set! . g$3372$23770) (bytevector-s32-native-ref . g$3372$23769) (bytevector-s16-set! . g$3372$23768) (bytevector-s16-ref . g$3372$23767) (bytevector-s16-native-set! . g$3372$23766) (bytevector-s16-native-ref . g$3372$23765) (bytevector-length . g$3372$23764) (bytevector-ieee-single-ref . g$3372$23763) (bytevector-ieee-single-native-set! . g$3372$23762) (bytevector-ieee-single-native-ref . g$3372$23761) (bytevector-ieee-double-ref . g$3372$23760) (bytevector-ieee-double-native-set! . g$3372$23759) (bytevector-ieee-double-native-ref . g$3372$23758) (bytevector-fill! . g$3372$23757) (bytevector-copy! . g$3372$23756) (bytevector-copy . g$3372$23755) (bytevector->uint-list . g$3372$23754) (bytevector->u8-list . g$3372$23753) (bytevector->sint-list . g$3372$23752) (no-nans-violation? . g$3372$23751) (no-infinities-violation? . g$3372$23750) (make-no-nans-violation . g$3372$23749) (make-no-infinities-violation . g$3372$23748) (real->flonum . g$3372$23747) (flzero? . g$3372$23746) (fltruncate . g$3372$23745) (fltan . g$3372$23744) (flsqrt . g$3372$23743) (flsin . g$3372$23742) (flround . g$3372$23741) (flpositive? . g$3372$23740) (flonum? . g$3372$23739) (flodd? . g$3372$23738) (flnumerator . g$3372$23737) (flnegative? . g$3372$23736) (flnan? . g$3372$23735) (flmod0 . g$3372$23734) (flmod . g$3372$23733) (flmin . g$3372$23732) (flmax . g$3372$23731) (fllog . g$3372$23730) (flinteger? . g$3372$23729) (flinfinite? . g$3372$23728) (flfloor . g$3372$23727) (flfinite? . g$3372$23726) (flexpt . g$3372$23725) (flexp . g$3372$23724) (fleven? . g$3372$23723) (fldiv0-and-mod0 . g$3372$23722) (fldiv0 . g$3372$23721) (fldiv-and-mod . g$3372$23720) (fldiv . g$3372$23719) (fldenominator . g$3372$23718) (flcos . g$3372$23717) (flceiling . g$3372$23716) (flatan . g$3372$23715) (flasin . g$3372$23714) (flacos . g$3372$23713) (flabs . g$3372$23712) (fl>? . g$3372$23711) (fl>=? . g$3372$23710) (fl=? . g$3372$23709) (fl<? . g$3372$23708) (fl<=? . g$3372$23707) (fl/ . g$3372$23706) (fl- . g$3372$23705) (fl+ . g$3372$23704) (fl* . g$3372$23703) (fixnum->flonum . g$3372$23702) (fxzero? . g$3372$23701) (fxxor . g$3372$23700) (fxrotate-bit-field . g$3372$23699) (fxreverse-bit-field . g$3372$23698) (fxpositive? . g$3372$23697) (fxodd? . g$3372$23696) (fxnot . g$3372$23695) (fxnegative? . g$3372$23694) (fxmod0 . g$3372$23693) (fxmod . g$3372$23692) (fxmin . g$3372$23691) (fxmax . g$3372$23690) (fxlength . g$3372$23689) (fxior . g$3372$23688) (fxif . g$3372$23687) (fxfirst-bit-set . g$3372$23686) (fxeven? . g$3372$23685) (fxdiv0-and-mod0 . g$3372$23684) (fxdiv0 . g$3372$23683) (fxdiv-and-mod . g$3372$23682) (fxdiv . g$3372$23681) (fxcopy-bit-field . g$3372$23680) (fxcopy-bit . g$3372$23679) (fxbit-set? . g$3372$23678) (fxbit-field . g$3372$23677) (fxbit-count . g$3372$23676) (fxarithmetic-shift-right . g$3372$23675) (fxarithmetic-shift-left . g$3372$23674) (fxarithmetic-shift . g$3372$23673) (fxand . g$3372$23672) (fx>? . g$3372$23671) (fx>=? . g$3372$23670) (fx=? . g$3372$23669) (fx<? . g$3372$23668) (fx<=? . g$3372$23667) (fx-/carry . g$3372$23666) (fx- . g$3372$23665) (fx+/carry . g$3372$23664) (fx+ . g$3372$23663) (fx*/carry . g$3372$23662) (fx* . g$3372$23661) (greatest-fixnum . g$3372$23660) (least-fixnum . g$3372$23659) (fixnum-width . g$3372$23658) (fixnum? . g$3372$23657) (bitwise-rotate-bit-field . g$3372$23656) (bitwise-reverse-bit-field . g$3372$23655) (bitwise-length . g$3372$23654) (bitwise-if . g$3372$23653) (bitwise-first-bit-set . g$3372$23652) (bitwise-copy-bit-field . g$3372$23651) (bitwise-copy-bit . g$3372$23650) (bitwise-bit-set? . g$3372$23649) (bitwise-bit-field . g$3372$23648) (bitwise-bit-count . g$3372$23647) (bitwise-xor . g$3372$23646) (bitwise-ior . g$3372$23645) (bitwise-and . g$3372$23644) (bitwise-not . g$3372$23643) (bitwise-arithmetic-shift-right . g$3372$23642) (bitwise-arithmetic-shift-left . g$3372$23641) (bitwise-arithmetic-shift . g$3372$23640) (zero? . g$3372$23639) (vector? . g$3372$23638) (vector-set! . g$3372$23637) (vector-ref . g$3372$23636) (vector-map . g$3372$23635) (vector-length . g$3372$23634) (vector-for-each . g$3372$23633) (vector-fill! . g$3372$23632) (vector->list . g$3372$23631) (vector . g$3372$23630) (values . g$3372$23629) (truncate . g$3372$23628) (tan . g$3372$23627) (symbol? . g$3372$23626) (symbol=? . g$3372$23625) (symbol->string . g$3372$23624) (substring . g$3372$23623) (string? . g$3372$23622) (string>? . g$3372$23621) (string>=? . g$3372$23620) (string=? . g$3372$23619) (string<? . g$3372$23618) (string<=? . g$3372$23617) (string-ref . g$3372$23616) (string-length . g$3372$23615) (string-for-each . g$3372$23614) (string-copy . g$3372$23613) (string-append . g$3372$23612) (string->symbol . g$3372$23611) (string->number . g$3372$23610) (string->list . g$3372$23609) (string . g$3372$23608) (sqrt . g$3372$23607) (sin . g$3372$23606) (round . g$3372$23605) (reverse . g$3372$23604) (real? . g$3372$23603) (real-valued? . g$3372$23602) (real-part . g$3372$23601) (rationalize . g$3372$23600) (rational? . g$3372$23599) (rational-valued? . g$3372$23598) (procedure? . g$3372$23597) (positive? . g$3372$23596) (pair? . g$3372$23595) (odd? . g$3372$23594) (numerator . g$3372$23593) (number? . g$3372$23592) (number->string . g$3372$23591) (null? . g$3372$23590) (not . g$3372$23589) (negative? . g$3372$23588) (nan? . g$3372$23587) (min . g$3372$23586) (max . g$3372$23585) (map . g$3372$23584) (make-vector . g$3372$23583) (make-string . g$3372$23582) (make-rectangular . g$3372$23581) (make-polar . g$3372$23580) (magnitude . g$3372$23579) (log . g$3372$23578) (list? . g$3372$23577) (list-tail . g$3372$23576) (list-ref . g$3372$23575) (list->vector . g$3372$23574) (list->string . g$3372$23573) (list . g$3372$23572) (length . g$3372$23571) (lcm . g$3372$23570) (integer? . g$3372$23569) (integer-valued? . g$3372$23568) (integer->char . g$3372$23567) (infinite? . g$3372$23566) (inexact? . g$3372$23565) (inexact . g$3372$23564) (imag-part . g$3372$23563) (gcd . g$3372$23562) (for-each . g$3372$23561) (floor . g$3372$23560) (finite? . g$3372$23559) (expt . g$3372$23558) (exp . g$3372$23557) (exact? . g$3372$23556) (exact-integer-sqrt . g$3372$23555) (exact . g$3372$23554) (even? . g$3372$23553) (error . g$3372$23552) (eqv? . g$3372$23551) (equal? . g$3372$23550) (eq? . g$3372$23549) (dynamic-wind . g$3372$23548) (div0-and-mod0 . g$3372$23547) (mod0 . g$3372$23546) (div0 . g$3372$23545) (div-and-mod . g$3372$23544) (mod . g$3372$23543) (div . g$3372$23542) (denominator . g$3372$23541) (cos . g$3372$23540) (cons . g$3372$23539) (complex? . g$3372$23538) (char? . g$3372$23537) (char>? . g$3372$23536) (char>=? . g$3372$23535) (char=? . g$3372$23534) (char<? . g$3372$23533) (char<=? . g$3372$23532) (char->integer . g$3372$23531) (ceiling . g$3372$23530) (call-with-values . g$3372$23529) (call/cc . g$3372$23528) (call-with-current-continuation . g$3372$23527) (cddddr . g$3372$23526) (cdddar . g$3372$23525) (cddadr . g$3372$23524) (cddaar . g$3372$23523) (cdaddr . g$3372$23522) (cdadar . g$3372$23521) (cdaadr . g$3372$23520) (cdaaar . g$3372$23519) (cadddr . g$3372$23518) (caddar . g$3372$23517) (cadadr . g$3372$23516) (cadaar . g$3372$23515) (caaddr . g$3372$23514) (caadar . g$3372$23513) (caaadr . g$3372$23512) (caaaar . g$3372$23511) (cdddr . g$3372$23510) (cddar . g$3372$23509) (cdadr . g$3372$23508) (cdaar . g$3372$23507) (caddr . g$3372$23506) (cadar . g$3372$23505) (caadr . g$3372$23504) (caaar . g$3372$23503) (cddr . g$3372$23502) (cdar . g$3372$23501) (cadr . g$3372$23500) (caar . g$3372$23499) (cdr . g$3372$23498) (car . g$3372$23497) (boolean? . g$3372$23496) (boolean=? . g$3372$23495) (atan . g$3372$23494) (assertion-violation . g$3372$23493) (asin . g$3372$23492) (apply . g$3372$23491) (append . g$3372$23490) (angle . g$3372$23489) (acos . g$3372$23488) (abs . g$3372$23487) (/ . g$3372$23486) (* . g$3372$23485) (- . g$3372$23484) (+ . g$3372$23483) (>= . g$3372$23482) (> . g$3372$23481) (= . g$3372$23480) (<= . g$3372$23479) (< . g$3372$23478) (let*-values . g$3372$23477) (&no-nans . g$3372$23476) (&no-infinities . g$3372$23475) (&i/o-encoding . g$3372$23474) (&i/o-decoding . g$3372$23473) (&i/o-port . g$3372$23472) (&i/o-file-does-not-exist . g$3372$23471) (&i/o-file-already-exists . g$3372$23470) (&i/o-file-is-read-only . g$3372$23469) (&i/o-file-protection . g$3372$23468) (&i/o-filename . g$3372$23467) (&i/o-invalid-position . g$3372$23466) (&i/o-write . g$3372$23465) (&i/o-read . g$3372$23464) (&i/o . g$3372$23463) (&undefined . g$3372$23462) (&syntax . g$3372$23461) (&lexical . g$3372$23460) (&who . g$3372$23457) (&irritants . g$3372$23456) (&assertion . g$3372$23455) (&violation . g$3372$23454) (&error . g$3372$23453) (&serious . g$3372$23452) (&warning . g$3372$23451) (&message . g$3372$23450) (&condition . g$3372$23449) (define-condition-type . g$3372$23448) (define-enumeration . g$3372$23447) (define-record-type . g$3372$23446) (parent-rtd . g$3372$23445) (nongenerative . g$3372$23444) (opaque . g$3372$23443) (sealed . g$3372$23442) (protocol . g$3372$23441) (parent . g$3372$23440) (immutable . g$3372$23439) (mutable . g$3372$23438) (fields . g$3372$23437) (error-handling-mode . g$3372$23436) (file-options . g$3372$23435) (buffer-mode . g$3372$23434) (eol-style . g$3372$23433) (guard . g$3372$23432) (unsyntax-splicing . g$3372$23429) (unsyntax . g$3372$23428) (unquote-splicing . g$3372$23427) (unquote . g$3372$23426) (_ . g$3372$23425) (else . g$3372$23424) (=> . g$3372$23423) (|...| . g$3372$23422) (assert . g$3372$23421) (endianness . g$3372$23420) (or . g$3372$23417) (and . g$3372$23416) (do . g$3372$23415) (cond . g$3372$23414) (let* . g$3372$23413) (let . g$3372$23412) (identifier-syntax . g$3372$23411) (with-syntax . g$3372$23410) (quasisyntax . g$3372$23409) (quasiquote . g$3372$23408) (syntax-rules . g$3372$23407) (record-constructor-descriptor . g$3372$23404) (record-type-descriptor . g$3372$23403) (let-values . g$3372$23402) (case . g$3372$23401) (unless . g$3372$23399) (when . g$3372$23398) (if . g$3372$23397) (letrec* . g$3372$23396) (letrec . g$3372$23395) (case-lambda . g$3372$23393) (lambda . g$3372$23392) (syntax . g$3372$23391) (syntax-case . g$3372$23390) (quote . g$3372$23389) (letrec-syntax . g$3372$23387) (let-syntax . g$3372$23386) (set! . g$3372$23385) (begin . g$3372$23383) (define-syntax . g$3372$23381) (define . g$3372$23380)) '() values values '#t) (g$3372$12835 'g$3372$24097 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . g$3372$23902) (quotient . g$3372$23901) (null-environment . g$3372$13677) (remainder . g$3372$23900) (modulo . g$3372$23899) (inexact->exact . g$3372$23898) (force . g$3372$23897) (exact->inexact . g$3372$23896) (delay . g$3372$23419)) '() values values '#t) (g$3372$12835 'g$3372$24098 '(rnrs control) '(6) '() '() '() '((do . g$3372$23415) (unless . g$3372$23399) (when . g$3372$23398) (case-lambda . g$3372$23393)) '() values values '#t) (g$3372$12835 'g$3372$24099 '(rnrs eval) '(6) '() '() '() '((eval . g$3372$13683) (environment . g$3372$13675)) '() values values '#t) (g$3372$12835 'g$3372$24100 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g$3372$23891) (set-car! . g$3372$23890)) '() values values '#t) (g$3372$12835 'g$3372$24101 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g$3372$23893) (string-set! . g$3372$23892)) '() values values '#t) (g$3372$12835 'g$3372$24102 '(rnrs programs) '(6) '() '() '() '((exit . g$3372$23895) (command-line . g$3372$23894)) '() values values '#t) (g$3372$12835 'g$3372$24103 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g$3372$13275) (identifier? . g$3372$13705) (generate-temporaries . g$3372$13697) (free-identifier=? . g$3372$13699) (syntax->datum . g$3372$13709) (datum->syntax . g$3372$13707) (bound-identifier=? . g$3372$13701) (syntax-violation . g$3372$23840) (unsyntax-splicing . g$3372$23429) (unsyntax . g$3372$23428) (_ . g$3372$23425) (|...| . g$3372$23422) (with-syntax . g$3372$23410) (quasisyntax . g$3372$23409) (syntax . g$3372$23391) (syntax-case . g$3372$23390)) '() values values '#t) (g$3372$12835 'g$3372$24104 '(rnrs files) '(6) '() '() '() '((delete-file . g$3372$24034) (file-exists? . g$3372$24033) (make-i/o-write-error . g$3372$23951) (make-i/o-read-error . g$3372$23950) (make-i/o-port-error . g$3372$23949) (make-i/o-invalid-position-error . g$3372$23948) (make-i/o-filename-error . g$3372$23947) (make-i/o-file-protection-error . g$3372$23946) (make-i/o-file-is-read-only-error . g$3372$23945) (make-i/o-file-does-not-exist-error . g$3372$23944) (make-i/o-file-already-exists-error . g$3372$23943) (make-i/o-error . g$3372$23942) (i/o-write-error? . g$3372$23930) (i/o-read-error? . g$3372$23929) (i/o-port-error? . g$3372$23928) (i/o-invalid-position-error? . g$3372$23927) (i/o-filename-error? . g$3372$23926) (i/o-file-protection-error? . g$3372$23925) (i/o-file-is-read-only-error? . g$3372$23924) (i/o-file-does-not-exist-error? . g$3372$23923) (i/o-file-already-exists-error? . g$3372$23922) (i/o-error? . g$3372$23921) (i/o-error-port . g$3372$23920) (i/o-error-filename . g$3372$23919) (&i/o-port . g$3372$23472) (&i/o-file-does-not-exist . g$3372$23471) (&i/o-file-already-exists . g$3372$23470) (&i/o-file-is-read-only . g$3372$23469) (&i/o-file-protection . g$3372$23468) (&i/o-filename . g$3372$23467) (&i/o-invalid-position . g$3372$23466) (&i/o-write . g$3372$23465) (&i/o-read . g$3372$23464) (&i/o . g$3372$23463)) '() values values '#t) (g$3372$12835 'g$3372$24105 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g$3372$24032) (vector-sort . g$3372$24031) (list-sort . g$3372$24030)) '() values values '#t) (g$3372$12835 'g$3372$24106 '(rnrs base) '(6) '() '() '() '((zero? . g$3372$23639) (vector? . g$3372$23638) (vector-set! . g$3372$23637) (vector-ref . g$3372$23636) (vector-map . g$3372$23635) (vector-length . g$3372$23634) (vector-for-each . g$3372$23633) (vector-fill! . g$3372$23632) (vector->list . g$3372$23631) (vector . g$3372$23630) (values . g$3372$23629) (truncate . g$3372$23628) (tan . g$3372$23627) (symbol? . g$3372$23626) (symbol=? . g$3372$23625) (symbol->string . g$3372$23624) (substring . g$3372$23623) (string? . g$3372$23622) (string>? . g$3372$23621) (string>=? . g$3372$23620) (string=? . g$3372$23619) (string<? . g$3372$23618) (string<=? . g$3372$23617) (string-ref . g$3372$23616) (string-length . g$3372$23615) (string-for-each . g$3372$23614) (string-copy . g$3372$23613) (string-append . g$3372$23612) (string->symbol . g$3372$23611) (string->number . g$3372$23610) (string->list . g$3372$23609) (string . g$3372$23608) (sqrt . g$3372$23607) (sin . g$3372$23606) (round . g$3372$23605) (reverse . g$3372$23604) (real? . g$3372$23603) (real-valued? . g$3372$23602) (real-part . g$3372$23601) (rationalize . g$3372$23600) (rational? . g$3372$23599) (rational-valued? . g$3372$23598) (procedure? . g$3372$23597) (positive? . g$3372$23596) (pair? . g$3372$23595) (odd? . g$3372$23594) (numerator . g$3372$23593) (number? . g$3372$23592) (number->string . g$3372$23591) (null? . g$3372$23590) (not . g$3372$23589) (negative? . g$3372$23588) (nan? . g$3372$23587) (min . g$3372$23586) (max . g$3372$23585) (map . g$3372$23584) (make-vector . g$3372$23583) (make-string . g$3372$23582) (make-rectangular . g$3372$23581) (make-polar . g$3372$23580) (magnitude . g$3372$23579) (log . g$3372$23578) (list? . g$3372$23577) (list-tail . g$3372$23576) (list-ref . g$3372$23575) (list->vector . g$3372$23574) (list->string . g$3372$23573) (list . g$3372$23572) (length . g$3372$23571) (lcm . g$3372$23570) (integer? . g$3372$23569) (integer-valued? . g$3372$23568) (integer->char . g$3372$23567) (infinite? . g$3372$23566) (inexact? . g$3372$23565) (inexact . g$3372$23564) (imag-part . g$3372$23563) (gcd . g$3372$23562) (for-each . g$3372$23561) (floor . g$3372$23560) (finite? . g$3372$23559) (expt . g$3372$23558) (exp . g$3372$23557) (exact? . g$3372$23556) (exact-integer-sqrt . g$3372$23555) (exact . g$3372$23554) (even? . g$3372$23553) (error . g$3372$23552) (eqv? . g$3372$23551) (equal? . g$3372$23550) (eq? . g$3372$23549) (dynamic-wind . g$3372$23548) (div0-and-mod0 . g$3372$23547) (mod0 . g$3372$23546) (div0 . g$3372$23545) (div-and-mod . g$3372$23544) (mod . g$3372$23543) (div . g$3372$23542) (denominator . g$3372$23541) (cos . g$3372$23540) (cons . g$3372$23539) (complex? . g$3372$23538) (char? . g$3372$23537) (char>? . g$3372$23536) (char>=? . g$3372$23535) (char=? . g$3372$23534) (char<? . g$3372$23533) (char<=? . g$3372$23532) (char->integer . g$3372$23531) (ceiling . g$3372$23530) (call-with-values . g$3372$23529) (call/cc . g$3372$23528) (call-with-current-continuation . g$3372$23527) (cddddr . g$3372$23526) (cdddar . g$3372$23525) (cddadr . g$3372$23524) (cddaar . g$3372$23523) (cdaddr . g$3372$23522) (cdadar . g$3372$23521) (cdaadr . g$3372$23520) (cdaaar . g$3372$23519) (cadddr . g$3372$23518) (caddar . g$3372$23517) (cadadr . g$3372$23516) (cadaar . g$3372$23515) (caaddr . g$3372$23514) (caadar . g$3372$23513) (caaadr . g$3372$23512) (caaaar . g$3372$23511) (cdddr . g$3372$23510) (cddar . g$3372$23509) (cdadr . g$3372$23508) (cdaar . g$3372$23507) (caddr . g$3372$23506) (cadar . g$3372$23505) (caadr . g$3372$23504) (caaar . g$3372$23503) (cddr . g$3372$23502) (cdar . g$3372$23501) (cadr . g$3372$23500) (caar . g$3372$23499) (cdr . g$3372$23498) (car . g$3372$23497) (boolean? . g$3372$23496) (boolean=? . g$3372$23495) (atan . g$3372$23494) (assertion-violation . g$3372$23493) (asin . g$3372$23492) (apply . g$3372$23491) (append . g$3372$23490) (angle . g$3372$23489) (acos . g$3372$23488) (abs . g$3372$23487) (/ . g$3372$23486) (* . g$3372$23485) (- . g$3372$23484) (+ . g$3372$23483) (>= . g$3372$23482) (> . g$3372$23481) (= . g$3372$23480) (<= . g$3372$23479) (< . g$3372$23478) (let*-values . g$3372$23477) (unquote-splicing . g$3372$23427) (unquote . g$3372$23426) (_ . g$3372$23425) (else . g$3372$23424) (=> . g$3372$23423) (|...| . g$3372$23422) (assert . g$3372$23421) (or . g$3372$23417) (and . g$3372$23416) (cond . g$3372$23414) (let* . g$3372$23413) (let . g$3372$23412) (identifier-syntax . g$3372$23411) (quasiquote . g$3372$23408) (syntax-rules . g$3372$23407) (let-values . g$3372$23402) (case . g$3372$23401) (if . g$3372$23397) (letrec* . g$3372$23396) (letrec . g$3372$23395) (lambda . g$3372$23392) (quote . g$3372$23389) (letrec-syntax . g$3372$23387) (let-syntax . g$3372$23386) (set! . g$3372$23385) (begin . g$3372$23383) (define-syntax . g$3372$23381) (define . g$3372$23380)) '() values values '#t) (g$3372$12835 'g$3372$24107 '(rnrs lists) '(6) '() '() '() '((remove . g$3372$23889) (remv . g$3372$23888) (remp . g$3372$23887) (remq . g$3372$23886) (partition . g$3372$23885) (memv . g$3372$23884) (memq . g$3372$23883) (memp . g$3372$23882) (member . g$3372$23881) (exists . g$3372$23880) (for-all . g$3372$23879) (fold-right . g$3372$23878) (fold-left . g$3372$23877) (find . g$3372$23876) (filter . g$3372$23875) (cons* . g$3372$23874) (assv . g$3372$23873) (assq . g$3372$23872) (assp . g$3372$23871) (assoc . g$3372$23870)) '() values values '#t) (g$3372$12835 'g$3372$24108 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . g$3372$24008) (call-with-input-file . g$3372$24007) (write-char . g$3372$24006) (write . g$3372$24005) (with-output-to-file . g$3372$24004) (with-input-from-file . g$3372$24003) (read-char . g$3372$24002) (read . g$3372$24001) (peek-char . g$3372$24000) (open-output-file . g$3372$23999) (open-input-file . g$3372$23998) (newline . g$3372$23997) (display . g$3372$23996) (close-output-port . g$3372$23995) (close-input-port . g$3372$23994) (eof-object? . g$3372$23993) (eof-object . g$3372$23992) (current-error-port . g$3372$23991) (current-output-port . g$3372$23990) (current-input-port . g$3372$23989) (output-port? . g$3372$23988) (input-port? . g$3372$23987) (make-i/o-write-error . g$3372$23951) (make-i/o-read-error . g$3372$23950) (make-i/o-port-error . g$3372$23949) (make-i/o-invalid-position-error . g$3372$23948) (make-i/o-filename-error . g$3372$23947) (make-i/o-file-protection-error . g$3372$23946) (make-i/o-file-is-read-only-error . g$3372$23945) (make-i/o-file-does-not-exist-error . g$3372$23944) (make-i/o-file-already-exists-error . g$3372$23943) (make-i/o-error . g$3372$23942) (i/o-write-error? . g$3372$23930) (i/o-read-error? . g$3372$23929) (i/o-port-error? . g$3372$23928) (i/o-invalid-position-error? . g$3372$23927) (i/o-filename-error? . g$3372$23926) (i/o-file-protection-error? . g$3372$23925) (i/o-file-is-read-only-error? . g$3372$23924) (i/o-file-does-not-exist-error? . g$3372$23923) (i/o-file-already-exists-error? . g$3372$23922) (i/o-error? . g$3372$23921) (i/o-error-port . g$3372$23920) (i/o-error-filename . g$3372$23919) (&i/o-port . g$3372$23472) (&i/o-file-does-not-exist . g$3372$23471) (&i/o-file-already-exists . g$3372$23470) (&i/o-file-is-read-only . g$3372$23469) (&i/o-file-protection . g$3372$23468) (&i/o-filename . g$3372$23467) (&i/o-invalid-position . g$3372$23466) (&i/o-write . g$3372$23465) (&i/o-read . g$3372$23464) (&i/o . g$3372$23463)) '() values values '#t) (g$3372$12835 'g$3372$24109 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g$3372$23933) (utf32->string . g$3372$23808) (utf16->string . g$3372$23807) (utf8->string . g$3372$23806) (uint-list->bytevector . g$3372$23805) (u8-list->bytevector . g$3372$23804) (string->utf8 . g$3372$23803) (string->utf32 . g$3372$23802) (string->utf16 . g$3372$23801) (sint-list->bytevector . g$3372$23800) (native-endianness . g$3372$23799) (bytevector? . g$3372$23798) (bytevector=? . g$3372$23797) (bytevector-uint-set! . g$3372$23796) (bytevector-uint-ref . g$3372$23795) (bytevector-u8-set! . g$3372$23794) (bytevector-u8-ref . g$3372$23793) (bytevector-u64-set! . g$3372$23792) (bytevector-u64-ref . g$3372$23791) (bytevector-u64-native-set! . g$3372$23790) (bytevector-u64-native-ref . g$3372$23789) (bytevector-u32-set! . g$3372$23788) (bytevector-u32-ref . g$3372$23787) (bytevector-u32-native-set! . g$3372$23786) (bytevector-u32-native-ref . g$3372$23785) (bytevector-u16-set! . g$3372$23784) (bytevector-u16-ref . g$3372$23783) (bytevector-u16-native-set! . g$3372$23782) (bytevector-u16-native-ref . g$3372$23781) (bytevector-sint-set! . g$3372$23780) (bytevector-sint-ref . g$3372$23779) (bytevector-s8-set! . g$3372$23778) (bytevector-s8-ref . g$3372$23777) (bytevector-s64-set! . g$3372$23776) (bytevector-s64-ref . g$3372$23775) (bytevector-s64-native-set! . g$3372$23774) (bytevector-s64-native-ref . g$3372$23773) (bytevector-s32-set! . g$3372$23772) (bytevector-s32-ref . g$3372$23771) (bytevector-s32-native-set! . g$3372$23770) (bytevector-s32-native-ref . g$3372$23769) (bytevector-s16-set! . g$3372$23768) (bytevector-s16-ref . g$3372$23767) (bytevector-s16-native-set! . g$3372$23766) (bytevector-s16-native-ref . g$3372$23765) (bytevector-length . g$3372$23764) (bytevector-ieee-single-ref . g$3372$23763) (bytevector-ieee-single-native-set! . g$3372$23762) (bytevector-ieee-single-native-ref . g$3372$23761) (bytevector-ieee-double-ref . g$3372$23760) (bytevector-ieee-double-native-set! . g$3372$23759) (bytevector-ieee-double-native-ref . g$3372$23758) (bytevector-fill! . g$3372$23757) (bytevector-copy! . g$3372$23756) (bytevector-copy . g$3372$23755) (bytevector->uint-list . g$3372$23754) (bytevector->u8-list . g$3372$23753) (bytevector->sint-list . g$3372$23752) (endianness . g$3372$23420)) '() values values '#t) (g$3372$12835 'g$3372$24110 '(rnrs unicode) '(6) '() '() '() '((string-upcase . g$3372$24080) (string-titlecase . g$3372$24079) (string-normalize-nfkd . g$3372$24078) (string-normalize-nfkc . g$3372$24077) (string-normalize-nfd . g$3372$24076) (string-normalize-nfc . g$3372$24075) (string-foldcase . g$3372$24074) (string-downcase . g$3372$24073) (string-ci>? . g$3372$24072) (string-ci>=? . g$3372$24071) (string-ci=? . g$3372$24070) (string-ci<? . g$3372$24069) (string-ci<=? . g$3372$24068) (char-whitespace? . g$3372$24067) (char-upper-case? . g$3372$24066) (char-title-case? . g$3372$24065) (char-numeric? . g$3372$24064) (char-lower-case? . g$3372$24063) (char-general-category . g$3372$24062) (char-upcase . g$3372$24061) (char-titlecase . g$3372$24060) (char-foldcase . g$3372$24059) (char-downcase . g$3372$24058) (char-ci>? . g$3372$24057) (char-ci>=? . g$3372$24056) (char-ci=? . g$3372$24055) (char-ci<? . g$3372$24054) (char-ci<=? . g$3372$24053) (char-alphabetic? . g$3372$24052)) '() values values '#t) (g$3372$12835 'g$3372$24111 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g$3372$23863) (raise-continuable . g$3372$23862) (raise . g$3372$23861) (guard . g$3372$23432) (else . g$3372$23424) (=> . g$3372$23423)) '() values values '#t) (g$3372$12835 'g$3372$24112 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g$3372$23656) (bitwise-reverse-bit-field . g$3372$23655) (bitwise-length . g$3372$23654) (bitwise-if . g$3372$23653) (bitwise-first-bit-set . g$3372$23652) (bitwise-copy-bit-field . g$3372$23651) (bitwise-copy-bit . g$3372$23650) (bitwise-bit-set? . g$3372$23649) (bitwise-bit-field . g$3372$23648) (bitwise-bit-count . g$3372$23647) (bitwise-xor . g$3372$23646) (bitwise-ior . g$3372$23645) (bitwise-and . g$3372$23644) (bitwise-not . g$3372$23643) (bitwise-arithmetic-shift-right . g$3372$23642) (bitwise-arithmetic-shift-left . g$3372$23641) (bitwise-arithmetic-shift . g$3372$23640)) '() values values '#t) (g$3372$12835 'g$3372$24113 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g$3372$23701) (fxxor . g$3372$23700) (fxrotate-bit-field . g$3372$23699) (fxreverse-bit-field . g$3372$23698) (fxpositive? . g$3372$23697) (fxodd? . g$3372$23696) (fxnot . g$3372$23695) (fxnegative? . g$3372$23694) (fxmod0 . g$3372$23693) (fxmod . g$3372$23692) (fxmin . g$3372$23691) (fxmax . g$3372$23690) (fxlength . g$3372$23689) (fxior . g$3372$23688) (fxif . g$3372$23687) (fxfirst-bit-set . g$3372$23686) (fxeven? . g$3372$23685) (fxdiv0-and-mod0 . g$3372$23684) (fxdiv0 . g$3372$23683) (fxdiv-and-mod . g$3372$23682) (fxdiv . g$3372$23681) (fxcopy-bit-field . g$3372$23680) (fxcopy-bit . g$3372$23679) (fxbit-set? . g$3372$23678) (fxbit-field . g$3372$23677) (fxbit-count . g$3372$23676) (fxarithmetic-shift-right . g$3372$23675) (fxarithmetic-shift-left . g$3372$23674) (fxarithmetic-shift . g$3372$23673) (fxand . g$3372$23672) (fx>? . g$3372$23671) (fx>=? . g$3372$23670) (fx=? . g$3372$23669) (fx<? . g$3372$23668) (fx<=? . g$3372$23667) (fx-/carry . g$3372$23666) (fx- . g$3372$23665) (fx+/carry . g$3372$23664) (fx+ . g$3372$23663) (fx*/carry . g$3372$23662) (fx* . g$3372$23661) (greatest-fixnum . g$3372$23660) (least-fixnum . g$3372$23659) (fixnum-width . g$3372$23658) (fixnum? . g$3372$23657)) '() values values '#t) (g$3372$12835 'g$3372$24114 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g$3372$23751) (no-infinities-violation? . g$3372$23750) (make-no-nans-violation . g$3372$23749) (make-no-infinities-violation . g$3372$23748) (real->flonum . g$3372$23747) (flzero? . g$3372$23746) (fltruncate . g$3372$23745) (fltan . g$3372$23744) (flsqrt . g$3372$23743) (flsin . g$3372$23742) (flround . g$3372$23741) (flpositive? . g$3372$23740) (flonum? . g$3372$23739) (flodd? . g$3372$23738) (flnumerator . g$3372$23737) (flnegative? . g$3372$23736) (flnan? . g$3372$23735) (flmod0 . g$3372$23734) (flmod . g$3372$23733) (flmin . g$3372$23732) (flmax . g$3372$23731) (fllog . g$3372$23730) (flinteger? . g$3372$23729) (flinfinite? . g$3372$23728) (flfloor . g$3372$23727) (flfinite? . g$3372$23726) (flexpt . g$3372$23725) (flexp . g$3372$23724) (fleven? . g$3372$23723) (fldiv0-and-mod0 . g$3372$23722) (fldiv0 . g$3372$23721) (fldiv-and-mod . g$3372$23720) (fldiv . g$3372$23719) (fldenominator . g$3372$23718) (flcos . g$3372$23717) (flceiling . g$3372$23716) (flatan . g$3372$23715) (flasin . g$3372$23714) (flacos . g$3372$23713) (flabs . g$3372$23712) (fl>? . g$3372$23711) (fl>=? . g$3372$23710) (fl=? . g$3372$23709) (fl<? . g$3372$23708) (fl<=? . g$3372$23707) (fl/ . g$3372$23706) (fl- . g$3372$23705) (fl+ . g$3372$23704) (fl* . g$3372$23703) (fixnum->flonum . g$3372$23702) (&no-nans . g$3372$23476) (&no-infinities . g$3372$23475)) '() values values '#t) (g$3372$12835 'g$3372$24115 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g$3372$24029) (string-ci-hash . g$3372$24028) (string-hash . g$3372$24027) (equal-hash . g$3372$24026) (hashtable-equivalence-function . g$3372$24025) (make-hashtable . g$3372$24024) (hashtable-hash-function . g$3372$24023) (make-eqv-hashtable . g$3372$24022) (make-eq-hashtable . g$3372$24021) (hashtable? . g$3372$24020) (hashtable-update! . g$3372$24019) (hashtable-size . g$3372$24018) (hashtable-set! . g$3372$24017) (hashtable-ref . g$3372$24016) (hashtable-mutable? . g$3372$24015) (hashtable-keys . g$3372$24014) (hashtable-entries . g$3372$24013) (hashtable-delete! . g$3372$24012) (hashtable-copy . g$3372$24011) (hashtable-contains? . g$3372$24010) (hashtable-clear! . g$3372$24009)) '() values values '#t) (g$3372$12835 'g$3372$24116 '(rnrs io ports) '(6) '() '() '() '((eof-object? . g$3372$23993) (eof-object . g$3372$23992) (current-error-port . g$3372$23991) (current-output-port . g$3372$23990) (current-input-port . g$3372$23989) (output-port? . g$3372$23988) (input-port? . g$3372$23987) (utf-8-codec . g$3372$23986) (utf-16-codec . g$3372$23985) (transcoder-error-handling-mode . g$3372$23984) (transcoder-eol-style . g$3372$23983) (transcoder-codec . g$3372$23982) (transcoded-port . g$3372$23981) (textual-port? . g$3372$23980) (string->bytevector . g$3372$23979) (standard-output-port . g$3372$23978) (standard-input-port . g$3372$23977) (standard-error-port . g$3372$23976) (set-port-position! . g$3372$23975) (put-u8 . g$3372$23974) (put-string . g$3372$23973) (put-datum . g$3372$23972) (put-char . g$3372$23971) (put-bytevector . g$3372$23970) (port? . g$3372$23969) (port-transcoder . g$3372$23968) (port-position . g$3372$23967) (port-has-set-port-position!? . g$3372$23966) (port-has-port-position? . g$3372$23965) (port-eof? . g$3372$23964) (output-port-buffer-mode . g$3372$23963) (open-string-output-port . g$3372$23962) (open-string-input-port . g$3372$23961) (open-file-output-port . g$3372$23960) (open-file-input/output-port . g$3372$23959) (open-file-input-port . g$3372$23958) (open-bytevector-output-port . g$3372$23957) (open-bytevector-input-port . g$3372$23956) (native-transcoder . g$3372$23955) (native-eol-style . g$3372$23954) (make-transcoder . g$3372$23953) (latin-1-codec . g$3372$23952) (make-i/o-write-error . g$3372$23951) (make-i/o-read-error . g$3372$23950) (make-i/o-port-error . g$3372$23949) (make-i/o-invalid-position-error . g$3372$23948) (make-i/o-filename-error . g$3372$23947) (make-i/o-file-protection-error . g$3372$23946) (make-i/o-file-is-read-only-error . g$3372$23945) (make-i/o-file-does-not-exist-error . g$3372$23944) (make-i/o-file-already-exists-error . g$3372$23943) (make-i/o-error . g$3372$23942) (make-i/o-encoding-error . g$3372$23941) (make-i/o-decoding-error . g$3372$23940) (make-custom-textual-output-port . g$3372$23939) (make-custom-textual-input/output-port . g$3372$23938) (make-custom-textual-input-port . g$3372$23937) (make-custom-binary-output-port . g$3372$23936) (make-custom-binary-input/output-port . g$3372$23935) (make-custom-binary-input-port . g$3372$23934) (lookahead-u8 . g$3372$23932) (lookahead-char . g$3372$23931) (i/o-write-error? . g$3372$23930) (i/o-read-error? . g$3372$23929) (i/o-port-error? . g$3372$23928) (i/o-invalid-position-error? . g$3372$23927) (i/o-filename-error? . g$3372$23926) (i/o-file-protection-error? . g$3372$23925) (i/o-file-is-read-only-error? . g$3372$23924) (i/o-file-does-not-exist-error? . g$3372$23923) (i/o-file-already-exists-error? . g$3372$23922) (i/o-error? . g$3372$23921) (i/o-error-port . g$3372$23920) (i/o-error-filename . g$3372$23919) (i/o-encoding-error? . g$3372$23918) (i/o-encoding-error-char . g$3372$23917) (i/o-decoding-error? . g$3372$23916) (get-u8 . g$3372$23915) (get-string-n! . g$3372$23914) (get-string-n . g$3372$23913) (get-string-all . g$3372$23912) (get-line . g$3372$23911) (get-datum . g$3372$23910) (get-char . g$3372$23909) (get-bytevector-some . g$3372$23908) (get-bytevector-n! . g$3372$23907) (get-bytevector-n . g$3372$23906) (get-bytevector-all . g$3372$23905) (flush-output-port . g$3372$23904) (close-port . g$3372$23903) (call-with-string-output-port . g$3372$23869) (call-with-port . g$3372$23868) (call-with-bytevector-output-port . g$3372$23867) (bytevector->string . g$3372$23866) (buffer-mode? . g$3372$23865) (binary-port? . g$3372$23864) (&i/o-encoding . g$3372$23474) (&i/o-decoding . g$3372$23473) (&i/o-port . g$3372$23472) (&i/o-file-does-not-exist . g$3372$23471) (&i/o-file-already-exists . g$3372$23470) (&i/o-file-is-read-only . g$3372$23469) (&i/o-file-protection . g$3372$23468) (&i/o-filename . g$3372$23467) (&i/o-invalid-position . g$3372$23466) (&i/o-write . g$3372$23465) (&i/o-read . g$3372$23464) (&i/o . g$3372$23463) (error-handling-mode . g$3372$23436) (file-options . g$3372$23435) (buffer-mode . g$3372$23434) (eol-style . g$3372$23433)) '() values values '#t) (g$3372$12835 'g$3372$24117 '(rnrs enums) '(6) '() '() '() '((make-enumeration . g$3372$23860) (enum-set=? . g$3372$23859) (enum-set-universe . g$3372$23858) (enum-set-union . g$3372$23857) (enum-set-subset? . g$3372$23856) (enum-set-projection . g$3372$23855) (enum-set-member? . g$3372$23854) (enum-set-intersection . g$3372$23853) (enum-set-indexer . g$3372$23852) (enum-set-difference . g$3372$23851) (enum-set-constructor . g$3372$23850) (enum-set-complement . g$3372$23849) (enum-set->list . g$3372$23848) (define-enumeration . g$3372$23447)) '() values values '#t) (g$3372$12835 'g$3372$24118 '(rnrs conditions) '(6) '() '() '() '((who-condition? . g$3372$23847) (warning? . g$3372$23846) (violation? . g$3372$23845) (undefined-violation? . g$3372$23844) (syntax-violation? . g$3372$23843) (syntax-violation-subform . g$3372$23842) (syntax-violation-form . g$3372$23841) (syntax-violation . g$3372$23840) (simple-conditions . g$3372$23839) (serious-condition? . g$3372$23838) (non-continuable-violation? . g$3372$23837) (&non-continuable . g$3372$23836) (message-condition? . g$3372$23835) (make-who-condition . g$3372$23834) (make-warning . g$3372$23833) (make-violation . g$3372$23832) (make-undefined-violation . g$3372$23831) (make-syntax-violation . g$3372$23830) (make-serious-condition . g$3372$23829) (make-non-continuable-violation . g$3372$23828) (make-message-condition . g$3372$23827) (make-lexical-violation . g$3372$23826) (make-irritants-condition . g$3372$23825) (make-implementation-restriction-violation . g$3372$23824) (make-error . g$3372$23823) (make-assertion-violation . g$3372$23822) (lexical-violation? . g$3372$23821) (irritants-condition? . g$3372$23820) (implementation-restriction-violation? . g$3372$23819) (&implementation-restriction . g$3372$23818) (error? . g$3372$23817) (condition-who . g$3372$23816) (condition-predicate . g$3372$23815) (condition-message . g$3372$23814) (condition-irritants . g$3372$23813) (condition-accessor . g$3372$23812) (condition . g$3372$23811) (assertion-violation? . g$3372$23810) (condition? . g$3372$23809) (&undefined . g$3372$23462) (&syntax . g$3372$23461) (&lexical . g$3372$23460) (&who . g$3372$23457) (&irritants . g$3372$23456) (&assertion . g$3372$23455) (&violation . g$3372$23454) (&error . g$3372$23453) (&serious . g$3372$23452) (&warning . g$3372$23451) (&message . g$3372$23450) (&condition . g$3372$23449) (define-condition-type . g$3372$23448)) '() values values '#t) (g$3372$12835 'g$3372$24119 '(rnrs records inspection) '(6) '() '() '() '((record? . g$3372$24044) (record-type-uid . g$3372$24043) (record-type-sealed? . g$3372$24042) (record-type-parent . g$3372$24041) (record-type-opaque? . g$3372$24040) (record-type-name . g$3372$24039) (record-type-generative? . g$3372$24038) (record-type-field-names . g$3372$24037) (record-rtd . g$3372$24036) (record-field-mutable? . g$3372$24035)) '() values values '#t) (g$3372$12835 'g$3372$24120 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g$3372$24051) (record-predicate . g$3372$24050) (record-mutator . g$3372$24049) (record-constructor . g$3372$24048) (record-accessor . g$3372$24047) (make-record-type-descriptor . g$3372$24046) (make-record-constructor-descriptor . g$3372$24045)) '() values values '#t) (g$3372$12835 'g$3372$24121 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g$3372$23446) (parent-rtd . g$3372$23445) (nongenerative . g$3372$23444) (opaque . g$3372$23443) (sealed . g$3372$23442) (protocol . g$3372$23441) (parent . g$3372$23440) (immutable . g$3372$23439) (mutable . g$3372$23438) (fields . g$3372$23437) (record-constructor-descriptor . g$3372$23404) (record-type-descriptor . g$3372$23403)) '() values values '#t) (g$3372$12835 'g$3372$24122 '(psyntax system $all) '() '() '() '() '((regexp? . g$3372$24090) (syntax-error . g$3372$13703) (syntax-dispatch . g$3372$13570) (pretty-print . g$3372$24089) (eval-core . g$3372$24088) (set-symbol-value! . g$3372$24087) (symbol-value . g$3372$24086) (gensym . g$3372$24085) (void . g$3372$24084) (load . g$3372$24083) (interaction-environment . g$3372$24082) (char-ready? . g$3372$24081) (string-upcase . g$3372$24080) (string-titlecase . g$3372$24079) (string-normalize-nfkd . g$3372$24078) (string-normalize-nfkc . g$3372$24077) (string-normalize-nfd . g$3372$24076) (string-normalize-nfc . g$3372$24075) (string-foldcase . g$3372$24074) (string-downcase . g$3372$24073) (string-ci>? . g$3372$24072) (string-ci>=? . g$3372$24071) (string-ci=? . g$3372$24070) (string-ci<? . g$3372$24069) (string-ci<=? . g$3372$24068) (char-whitespace? . g$3372$24067) (char-upper-case? . g$3372$24066) (char-title-case? . g$3372$24065) (char-numeric? . g$3372$24064) (char-lower-case? . g$3372$24063) (char-general-category . g$3372$24062) (char-upcase . g$3372$24061) (char-titlecase . g$3372$24060) (char-foldcase . g$3372$24059) (char-downcase . g$3372$24058) (char-ci>? . g$3372$24057) (char-ci>=? . g$3372$24056) (char-ci=? . g$3372$24055) (char-ci<? . g$3372$24054) (char-ci<=? . g$3372$24053) (char-alphabetic? . g$3372$24052) (make-variable-transformer . g$3372$13275) (identifier? . g$3372$13705) (generate-temporaries . g$3372$13697) (free-identifier=? . g$3372$13699) (syntax->datum . g$3372$13709) (datum->syntax . g$3372$13707) (bound-identifier=? . g$3372$13701) (record-type-descriptor? . g$3372$24051) (record-predicate . g$3372$24050) (record-mutator . g$3372$24049) (record-constructor . g$3372$24048) (record-accessor . g$3372$24047) (make-record-type-descriptor . g$3372$24046) (make-record-constructor-descriptor . g$3372$24045) (record? . g$3372$24044) (record-type-uid . g$3372$24043) (record-type-sealed? . g$3372$24042) (record-type-parent . g$3372$24041) (record-type-opaque? . g$3372$24040) (record-type-name . g$3372$24039) (record-type-generative? . g$3372$24038) (record-type-field-names . g$3372$24037) (record-rtd . g$3372$24036) (record-field-mutable? . g$3372$24035) (delete-file . g$3372$24034) (file-exists? . g$3372$24033) (vector-sort! . g$3372$24032) (vector-sort . g$3372$24031) (list-sort . g$3372$24030) (symbol-hash . g$3372$24029) (string-ci-hash . g$3372$24028) (string-hash . g$3372$24027) (equal-hash . g$3372$24026) (hashtable-equivalence-function . g$3372$24025) (make-hashtable . g$3372$24024) (hashtable-hash-function . g$3372$24023) (make-eqv-hashtable . g$3372$24022) (make-eq-hashtable . g$3372$24021) (hashtable? . g$3372$24020) (hashtable-update! . g$3372$24019) (hashtable-size . g$3372$24018) (hashtable-set! . g$3372$24017) (hashtable-ref . g$3372$24016) (hashtable-mutable? . g$3372$24015) (hashtable-keys . g$3372$24014) (hashtable-entries . g$3372$24013) (hashtable-delete! . g$3372$24012) (hashtable-copy . g$3372$24011) (hashtable-contains? . g$3372$24010) (hashtable-clear! . g$3372$24009) (call-with-output-file . g$3372$24008) (call-with-input-file . g$3372$24007) (write-char . g$3372$24006) (write . g$3372$24005) (with-output-to-file . g$3372$24004) (with-input-from-file . g$3372$24003) (read-char . g$3372$24002) (read . g$3372$24001) (peek-char . g$3372$24000) (open-output-file . g$3372$23999) (open-input-file . g$3372$23998) (newline . g$3372$23997) (display . g$3372$23996) (close-output-port . g$3372$23995) (close-input-port . g$3372$23994) (eof-object? . g$3372$23993) (eof-object . g$3372$23992) (current-error-port . g$3372$23991) (current-output-port . g$3372$23990) (current-input-port . g$3372$23989) (output-port? . g$3372$23988) (input-port? . g$3372$23987) (utf-8-codec . g$3372$23986) (utf-16-codec . g$3372$23985) (transcoder-error-handling-mode . g$3372$23984) (transcoder-eol-style . g$3372$23983) (transcoder-codec . g$3372$23982) (transcoded-port . g$3372$23981) (textual-port? . g$3372$23980) (string->bytevector . g$3372$23979) (standard-output-port . g$3372$23978) (standard-input-port . g$3372$23977) (standard-error-port . g$3372$23976) (set-port-position! . g$3372$23975) (put-u8 . g$3372$23974) (put-string . g$3372$23973) (put-datum . g$3372$23972) (put-char . g$3372$23971) (put-bytevector . g$3372$23970) (port? . g$3372$23969) (port-transcoder . g$3372$23968) (port-position . g$3372$23967) (port-has-set-port-position!? . g$3372$23966) (port-has-port-position? . g$3372$23965) (port-eof? . g$3372$23964) (output-port-buffer-mode . g$3372$23963) (open-string-output-port . g$3372$23962) (open-string-input-port . g$3372$23961) (open-file-output-port . g$3372$23960) (open-file-input/output-port . g$3372$23959) (open-file-input-port . g$3372$23958) (open-bytevector-output-port . g$3372$23957) (open-bytevector-input-port . g$3372$23956) (native-transcoder . g$3372$23955) (native-eol-style . g$3372$23954) (make-transcoder . g$3372$23953) (latin-1-codec . g$3372$23952) (make-i/o-write-error . g$3372$23951) (make-i/o-read-error . g$3372$23950) (make-i/o-port-error . g$3372$23949) (make-i/o-invalid-position-error . g$3372$23948) (make-i/o-filename-error . g$3372$23947) (make-i/o-file-protection-error . g$3372$23946) (make-i/o-file-is-read-only-error . g$3372$23945) (make-i/o-file-does-not-exist-error . g$3372$23944) (make-i/o-file-already-exists-error . g$3372$23943) (make-i/o-error . g$3372$23942) (make-i/o-encoding-error . g$3372$23941) (make-i/o-decoding-error . g$3372$23940) (make-custom-textual-output-port . g$3372$23939) (make-custom-textual-input/output-port . g$3372$23938) (make-custom-textual-input-port . g$3372$23937) (make-custom-binary-output-port . g$3372$23936) (make-custom-binary-input/output-port . g$3372$23935) (make-custom-binary-input-port . g$3372$23934) (make-bytevector . g$3372$23933) (lookahead-u8 . g$3372$23932) (lookahead-char . g$3372$23931) (i/o-write-error? . g$3372$23930) (i/o-read-error? . g$3372$23929) (i/o-port-error? . g$3372$23928) (i/o-invalid-position-error? . g$3372$23927) (i/o-filename-error? . g$3372$23926) (i/o-file-protection-error? . g$3372$23925) (i/o-file-is-read-only-error? . g$3372$23924) (i/o-file-does-not-exist-error? . g$3372$23923) (i/o-file-already-exists-error? . g$3372$23922) (i/o-error? . g$3372$23921) (i/o-error-port . g$3372$23920) (i/o-error-filename . g$3372$23919) (i/o-encoding-error? . g$3372$23918) (i/o-encoding-error-char . g$3372$23917) (i/o-decoding-error? . g$3372$23916) (get-u8 . g$3372$23915) (get-string-n! . g$3372$23914) (get-string-n . g$3372$23913) (get-string-all . g$3372$23912) (get-line . g$3372$23911) (get-datum . g$3372$23910) (get-char . g$3372$23909) (get-bytevector-some . g$3372$23908) (get-bytevector-n! . g$3372$23907) (get-bytevector-n . g$3372$23906) (get-bytevector-all . g$3372$23905) (flush-output-port . g$3372$23904) (close-port . g$3372$23903) (scheme-report-environment . g$3372$23902) (quotient . g$3372$23901) (null-environment . g$3372$13677) (remainder . g$3372$23900) (modulo . g$3372$23899) (inexact->exact . g$3372$23898) (force . g$3372$23897) (exact->inexact . g$3372$23896) (exit . g$3372$23895) (command-line . g$3372$23894) (string-fill! . g$3372$23893) (string-set! . g$3372$23892) (set-cdr! . g$3372$23891) (set-car! . g$3372$23890) (remove . g$3372$23889) (remv . g$3372$23888) (remp . g$3372$23887) (remq . g$3372$23886) (partition . g$3372$23885) (memv . g$3372$23884) (memq . g$3372$23883) (memp . g$3372$23882) (member . g$3372$23881) (exists . g$3372$23880) (for-all . g$3372$23879) (fold-right . g$3372$23878) (fold-left . g$3372$23877) (find . g$3372$23876) (filter . g$3372$23875) (cons* . g$3372$23874) (assv . g$3372$23873) (assq . g$3372$23872) (assp . g$3372$23871) (assoc . g$3372$23870) (call-with-string-output-port . g$3372$23869) (call-with-port . g$3372$23868) (call-with-bytevector-output-port . g$3372$23867) (bytevector->string . g$3372$23866) (buffer-mode? . g$3372$23865) (binary-port? . g$3372$23864) (with-exception-handler . g$3372$23863) (raise-continuable . g$3372$23862) (raise . g$3372$23861) (eval . g$3372$13683) (environment . g$3372$13675) (make-enumeration . g$3372$23860) (enum-set=? . g$3372$23859) (enum-set-universe . g$3372$23858) (enum-set-union . g$3372$23857) (enum-set-subset? . g$3372$23856) (enum-set-projection . g$3372$23855) (enum-set-member? . g$3372$23854) (enum-set-intersection . g$3372$23853) (enum-set-indexer . g$3372$23852) (enum-set-difference . g$3372$23851) (enum-set-constructor . g$3372$23850) (enum-set-complement . g$3372$23849) (enum-set->list . g$3372$23848) (who-condition? . g$3372$23847) (warning? . g$3372$23846) (violation? . g$3372$23845) (undefined-violation? . g$3372$23844) (syntax-violation? . g$3372$23843) (syntax-violation-subform . g$3372$23842) (syntax-violation-form . g$3372$23841) (syntax-violation . g$3372$23840) (simple-conditions . g$3372$23839) (serious-condition? . g$3372$23838) (non-continuable-violation? . g$3372$23837) (&non-continuable . g$3372$23836) (message-condition? . g$3372$23835) (make-who-condition . g$3372$23834) (make-warning . g$3372$23833) (make-violation . g$3372$23832) (make-undefined-violation . g$3372$23831) (make-syntax-violation . g$3372$23830) (make-serious-condition . g$3372$23829) (make-non-continuable-violation . g$3372$23828) (make-message-condition . g$3372$23827) (make-lexical-violation . g$3372$23826) (make-irritants-condition . g$3372$23825) (make-implementation-restriction-violation . g$3372$23824) (make-error . g$3372$23823) (make-assertion-violation . g$3372$23822) (lexical-violation? . g$3372$23821) (irritants-condition? . g$3372$23820) (implementation-restriction-violation? . g$3372$23819) (&implementation-restriction . g$3372$23818) (error? . g$3372$23817) (condition-who . g$3372$23816) (condition-predicate . g$3372$23815) (condition-message . g$3372$23814) (condition-irritants . g$3372$23813) (condition-accessor . g$3372$23812) (condition . g$3372$23811) (assertion-violation? . g$3372$23810) (condition? . g$3372$23809) (utf32->string . g$3372$23808) (utf16->string . g$3372$23807) (utf8->string . g$3372$23806) (uint-list->bytevector . g$3372$23805) (u8-list->bytevector . g$3372$23804) (string->utf8 . g$3372$23803) (string->utf32 . g$3372$23802) (string->utf16 . g$3372$23801) (sint-list->bytevector . g$3372$23800) (native-endianness . g$3372$23799) (bytevector? . g$3372$23798) (bytevector=? . g$3372$23797) (bytevector-uint-set! . g$3372$23796) (bytevector-uint-ref . g$3372$23795) (bytevector-u8-set! . g$3372$23794) (bytevector-u8-ref . g$3372$23793) (bytevector-u64-set! . g$3372$23792) (bytevector-u64-ref . g$3372$23791) (bytevector-u64-native-set! . g$3372$23790) (bytevector-u64-native-ref . g$3372$23789) (bytevector-u32-set! . g$3372$23788) (bytevector-u32-ref . g$3372$23787) (bytevector-u32-native-set! . g$3372$23786) (bytevector-u32-native-ref . g$3372$23785) (bytevector-u16-set! . g$3372$23784) (bytevector-u16-ref . g$3372$23783) (bytevector-u16-native-set! . g$3372$23782) (bytevector-u16-native-ref . g$3372$23781) (bytevector-sint-set! . g$3372$23780) (bytevector-sint-ref . g$3372$23779) (bytevector-s8-set! . g$3372$23778) (bytevector-s8-ref . g$3372$23777) (bytevector-s64-set! . g$3372$23776) (bytevector-s64-ref . g$3372$23775) (bytevector-s64-native-set! . g$3372$23774) (bytevector-s64-native-ref . g$3372$23773) (bytevector-s32-set! . g$3372$23772) (bytevector-s32-ref . g$3372$23771) (bytevector-s32-native-set! . g$3372$23770) (bytevector-s32-native-ref . g$3372$23769) (bytevector-s16-set! . g$3372$23768) (bytevector-s16-ref . g$3372$23767) (bytevector-s16-native-set! . g$3372$23766) (bytevector-s16-native-ref . g$3372$23765) (bytevector-length . g$3372$23764) (bytevector-ieee-single-ref . g$3372$23763) (bytevector-ieee-single-native-set! . g$3372$23762) (bytevector-ieee-single-native-ref . g$3372$23761) (bytevector-ieee-double-ref . g$3372$23760) (bytevector-ieee-double-native-set! . g$3372$23759) (bytevector-ieee-double-native-ref . g$3372$23758) (bytevector-fill! . g$3372$23757) (bytevector-copy! . g$3372$23756) (bytevector-copy . g$3372$23755) (bytevector->uint-list . g$3372$23754) (bytevector->u8-list . g$3372$23753) (bytevector->sint-list . g$3372$23752) (no-nans-violation? . g$3372$23751) (no-infinities-violation? . g$3372$23750) (make-no-nans-violation . g$3372$23749) (make-no-infinities-violation . g$3372$23748) (real->flonum . g$3372$23747) (flzero? . g$3372$23746) (fltruncate . g$3372$23745) (fltan . g$3372$23744) (flsqrt . g$3372$23743) (flsin . g$3372$23742) (flround . g$3372$23741) (flpositive? . g$3372$23740) (flonum? . g$3372$23739) (flodd? . g$3372$23738) (flnumerator . g$3372$23737) (flnegative? . g$3372$23736) (flnan? . g$3372$23735) (flmod0 . g$3372$23734) (flmod . g$3372$23733) (flmin . g$3372$23732) (flmax . g$3372$23731) (fllog . g$3372$23730) (flinteger? . g$3372$23729) (flinfinite? . g$3372$23728) (flfloor . g$3372$23727) (flfinite? . g$3372$23726) (flexpt . g$3372$23725) (flexp . g$3372$23724) (fleven? . g$3372$23723) (fldiv0-and-mod0 . g$3372$23722) (fldiv0 . g$3372$23721) (fldiv-and-mod . g$3372$23720) (fldiv . g$3372$23719) (fldenominator . g$3372$23718) (flcos . g$3372$23717) (flceiling . g$3372$23716) (flatan . g$3372$23715) (flasin . g$3372$23714) (flacos . g$3372$23713) (flabs . g$3372$23712) (fl>? . g$3372$23711) (fl>=? . g$3372$23710) (fl=? . g$3372$23709) (fl<? . g$3372$23708) (fl<=? . g$3372$23707) (fl/ . g$3372$23706) (fl- . g$3372$23705) (fl+ . g$3372$23704) (fl* . g$3372$23703) (fixnum->flonum . g$3372$23702) (fxzero? . g$3372$23701) (fxxor . g$3372$23700) (fxrotate-bit-field . g$3372$23699) (fxreverse-bit-field . g$3372$23698) (fxpositive? . g$3372$23697) (fxodd? . g$3372$23696) (fxnot . g$3372$23695) (fxnegative? . g$3372$23694) (fxmod0 . g$3372$23693) (fxmod . g$3372$23692) (fxmin . g$3372$23691) (fxmax . g$3372$23690) (fxlength . g$3372$23689) (fxior . g$3372$23688) (fxif . g$3372$23687) (fxfirst-bit-set . g$3372$23686) (fxeven? . g$3372$23685) (fxdiv0-and-mod0 . g$3372$23684) (fxdiv0 . g$3372$23683) (fxdiv-and-mod . g$3372$23682) (fxdiv . g$3372$23681) (fxcopy-bit-field . g$3372$23680) (fxcopy-bit . g$3372$23679) (fxbit-set? . g$3372$23678) (fxbit-field . g$3372$23677) (fxbit-count . g$3372$23676) (fxarithmetic-shift-right . g$3372$23675) (fxarithmetic-shift-left . g$3372$23674) (fxarithmetic-shift . g$3372$23673) (fxand . g$3372$23672) (fx>? . g$3372$23671) (fx>=? . g$3372$23670) (fx=? . g$3372$23669) (fx<? . g$3372$23668) (fx<=? . g$3372$23667) (fx-/carry . g$3372$23666) (fx- . g$3372$23665) (fx+/carry . g$3372$23664) (fx+ . g$3372$23663) (fx*/carry . g$3372$23662) (fx* . g$3372$23661) (greatest-fixnum . g$3372$23660) (least-fixnum . g$3372$23659) (fixnum-width . g$3372$23658) (fixnum? . g$3372$23657) (bitwise-rotate-bit-field . g$3372$23656) (bitwise-reverse-bit-field . g$3372$23655) (bitwise-length . g$3372$23654) (bitwise-if . g$3372$23653) (bitwise-first-bit-set . g$3372$23652) (bitwise-copy-bit-field . g$3372$23651) (bitwise-copy-bit . g$3372$23650) (bitwise-bit-set? . g$3372$23649) (bitwise-bit-field . g$3372$23648) (bitwise-bit-count . g$3372$23647) (bitwise-xor . g$3372$23646) (bitwise-ior . g$3372$23645) (bitwise-and . g$3372$23644) (bitwise-not . g$3372$23643) (bitwise-arithmetic-shift-right . g$3372$23642) (bitwise-arithmetic-shift-left . g$3372$23641) (bitwise-arithmetic-shift . g$3372$23640) (zero? . g$3372$23639) (vector? . g$3372$23638) (vector-set! . g$3372$23637) (vector-ref . g$3372$23636) (vector-map . g$3372$23635) (vector-length . g$3372$23634) (vector-for-each . g$3372$23633) (vector-fill! . g$3372$23632) (vector->list . g$3372$23631) (vector . g$3372$23630) (values . g$3372$23629) (truncate . g$3372$23628) (tan . g$3372$23627) (symbol? . g$3372$23626) (symbol=? . g$3372$23625) (symbol->string . g$3372$23624) (substring . g$3372$23623) (string? . g$3372$23622) (string>? . g$3372$23621) (string>=? . g$3372$23620) (string=? . g$3372$23619) (string<? . g$3372$23618) (string<=? . g$3372$23617) (string-ref . g$3372$23616) (string-length . g$3372$23615) (string-for-each . g$3372$23614) (string-copy . g$3372$23613) (string-append . g$3372$23612) (string->symbol . g$3372$23611) (string->number . g$3372$23610) (string->list . g$3372$23609) (string . g$3372$23608) (sqrt . g$3372$23607) (sin . g$3372$23606) (round . g$3372$23605) (reverse . g$3372$23604) (real? . g$3372$23603) (real-valued? . g$3372$23602) (real-part . g$3372$23601) (rationalize . g$3372$23600) (rational? . g$3372$23599) (rational-valued? . g$3372$23598) (procedure? . g$3372$23597) (positive? . g$3372$23596) (pair? . g$3372$23595) (odd? . g$3372$23594) (numerator . g$3372$23593) (number? . g$3372$23592) (number->string . g$3372$23591) (null? . g$3372$23590) (not . g$3372$23589) (negative? . g$3372$23588) (nan? . g$3372$23587) (min . g$3372$23586) (max . g$3372$23585) (map . g$3372$23584) (make-vector . g$3372$23583) (make-string . g$3372$23582) (make-rectangular . g$3372$23581) (make-polar . g$3372$23580) (magnitude . g$3372$23579) (log . g$3372$23578) (list? . g$3372$23577) (list-tail . g$3372$23576) (list-ref . g$3372$23575) (list->vector . g$3372$23574) (list->string . g$3372$23573) (list . g$3372$23572) (length . g$3372$23571) (lcm . g$3372$23570) (integer? . g$3372$23569) (integer-valued? . g$3372$23568) (integer->char . g$3372$23567) (infinite? . g$3372$23566) (inexact? . g$3372$23565) (inexact . g$3372$23564) (imag-part . g$3372$23563) (gcd . g$3372$23562) (for-each . g$3372$23561) (floor . g$3372$23560) (finite? . g$3372$23559) (expt . g$3372$23558) (exp . g$3372$23557) (exact? . g$3372$23556) (exact-integer-sqrt . g$3372$23555) (exact . g$3372$23554) (even? . g$3372$23553) (error . g$3372$23552) (eqv? . g$3372$23551) (equal? . g$3372$23550) (eq? . g$3372$23549) (dynamic-wind . g$3372$23548) (div0-and-mod0 . g$3372$23547) (mod0 . g$3372$23546) (div0 . g$3372$23545) (div-and-mod . g$3372$23544) (mod . g$3372$23543) (div . g$3372$23542) (denominator . g$3372$23541) (cos . g$3372$23540) (cons . g$3372$23539) (complex? . g$3372$23538) (char? . g$3372$23537) (char>? . g$3372$23536) (char>=? . g$3372$23535) (char=? . g$3372$23534) (char<? . g$3372$23533) (char<=? . g$3372$23532) (char->integer . g$3372$23531) (ceiling . g$3372$23530) (call-with-values . g$3372$23529) (call/cc . g$3372$23528) (call-with-current-continuation . g$3372$23527) (cddddr . g$3372$23526) (cdddar . g$3372$23525) (cddadr . g$3372$23524) (cddaar . g$3372$23523) (cdaddr . g$3372$23522) (cdadar . g$3372$23521) (cdaadr . g$3372$23520) (cdaaar . g$3372$23519) (cadddr . g$3372$23518) (caddar . g$3372$23517) (cadadr . g$3372$23516) (cadaar . g$3372$23515) (caaddr . g$3372$23514) (caadar . g$3372$23513) (caaadr . g$3372$23512) (caaaar . g$3372$23511) (cdddr . g$3372$23510) (cddar . g$3372$23509) (cdadr . g$3372$23508) (cdaar . g$3372$23507) (caddr . g$3372$23506) (cadar . g$3372$23505) (caadr . g$3372$23504) (caaar . g$3372$23503) (cddr . g$3372$23502) (cdar . g$3372$23501) (cadr . g$3372$23500) (caar . g$3372$23499) (cdr . g$3372$23498) (car . g$3372$23497) (boolean? . g$3372$23496) (boolean=? . g$3372$23495) (atan . g$3372$23494) (assertion-violation . g$3372$23493) (asin . g$3372$23492) (apply . g$3372$23491) (append . g$3372$23490) (angle . g$3372$23489) (acos . g$3372$23488) (abs . g$3372$23487) (/ . g$3372$23486) (* . g$3372$23485) (- . g$3372$23484) (+ . g$3372$23483) (>= . g$3372$23482) (> . g$3372$23481) (= . g$3372$23480) (<= . g$3372$23479) (< . g$3372$23478) (let*-values . g$3372$23477) (&no-nans . g$3372$23476) (&no-infinities . g$3372$23475) (&i/o-encoding . g$3372$23474) (&i/o-decoding . g$3372$23473) (&i/o-port . g$3372$23472) (&i/o-file-does-not-exist . g$3372$23471) (&i/o-file-already-exists . g$3372$23470) (&i/o-file-is-read-only . g$3372$23469) (&i/o-file-protection . g$3372$23468) (&i/o-filename . g$3372$23467) (&i/o-invalid-position . g$3372$23466) (&i/o-write . g$3372$23465) (&i/o-read . g$3372$23464) (&i/o . g$3372$23463) (&undefined . g$3372$23462) (&syntax . g$3372$23461) (&lexical . g$3372$23460) (&implementation . g$3372$23459) (&non . g$3372$23458) (&who . g$3372$23457) (&irritants . g$3372$23456) (&assertion . g$3372$23455) (&violation . g$3372$23454) (&error . g$3372$23453) (&serious . g$3372$23452) (&warning . g$3372$23451) (&message . g$3372$23450) (&condition . g$3372$23449) (define-condition-type . g$3372$23448) (define-enumeration . g$3372$23447) (define-record-type . g$3372$23446) (parent-rtd . g$3372$23445) (nongenerative . g$3372$23444) (opaque . g$3372$23443) (sealed . g$3372$23442) (protocol . g$3372$23441) (parent . g$3372$23440) (immutable . g$3372$23439) (mutable . g$3372$23438) (fields . g$3372$23437) (error-handling-mode . g$3372$23436) (file-options . g$3372$23435) (buffer-mode . g$3372$23434) (eol-style . g$3372$23433) (guard . g$3372$23432) (trace-define . g$3372$23431) (trace-lambda . g$3372$23430) (unsyntax-splicing . g$3372$23429) (unsyntax . g$3372$23428) (unquote-splicing . g$3372$23427) (unquote . g$3372$23426) (_ . g$3372$23425) (else . g$3372$23424) (=> . g$3372$23423) (|...| . g$3372$23422) (assert . g$3372$23421) (endianness . g$3372$23420) (delay . g$3372$23419) (time . g$3372$23418) (or . g$3372$23417) (and . g$3372$23416) (do . g$3372$23415) (cond . g$3372$23414) (let* . g$3372$23413) (let . g$3372$23412) (identifier-syntax . g$3372$23411) (with-syntax . g$3372$23410) (quasisyntax . g$3372$23409) (quasiquote . g$3372$23408) (syntax-rules . g$3372$23407) (include . g$3372$23406) (define-struct . g$3372$23405) (record-constructor-descriptor . g$3372$23404) (record-type-descriptor . g$3372$23403) (let-values . g$3372$23402) (case . g$3372$23401) (parameterize . g$3372$23400) (unless . g$3372$23399) (when . g$3372$23398) (if . g$3372$23397) (letrec* . g$3372$23396) (letrec . g$3372$23395) (type-descriptor . g$3372$23394) (case-lambda . g$3372$23393) (lambda . g$3372$23392) (syntax . g$3372$23391) (syntax-case . g$3372$23390) (quote . g$3372$23389) (foreign-call . g$3372$23388) (letrec-syntax . g$3372$23387) (let-syntax . g$3372$23386) (set! . g$3372$23385) (import . g$3372$23384) (begin . g$3372$23383) (module . g$3372$23382) (define-syntax . g$3372$23381) (define . g$3372$23380)) '((g$3372$24090 core-prim . regexp?) (g$3372$13703 core-prim . syntax-error) (g$3372$13570 core-prim . syntax-dispatch) (g$3372$24089 core-prim . pretty-print) (g$3372$24088 core-prim . eval-core) (g$3372$24087 core-prim . set-symbol-value!) (g$3372$24086 core-prim . symbol-value) (g$3372$24085 core-prim . gensym) (g$3372$24084 core-prim . void) (g$3372$24083 core-prim . load) (g$3372$24082 core-prim . interaction-environment) (g$3372$24081 core-prim . char-ready?) (g$3372$24080 core-prim . string-upcase) (g$3372$24079 core-prim . string-titlecase) (g$3372$24078 core-prim . string-normalize-nfkd) (g$3372$24077 core-prim . string-normalize-nfkc) (g$3372$24076 core-prim . string-normalize-nfd) (g$3372$24075 core-prim . string-normalize-nfc) (g$3372$24074 core-prim . string-foldcase) (g$3372$24073 core-prim . string-downcase) (g$3372$24072 core-prim . string-ci>?) (g$3372$24071 core-prim . string-ci>=?) (g$3372$24070 core-prim . string-ci=?) (g$3372$24069 core-prim . string-ci<?) (g$3372$24068 core-prim . string-ci<=?) (g$3372$24067 core-prim . char-whitespace?) (g$3372$24066 core-prim . char-upper-case?) (g$3372$24065 core-prim . char-title-case?) (g$3372$24064 core-prim . char-numeric?) (g$3372$24063 core-prim . char-lower-case?) (g$3372$24062 core-prim . char-general-category) (g$3372$24061 core-prim . char-upcase) (g$3372$24060 core-prim . char-titlecase) (g$3372$24059 core-prim . char-foldcase) (g$3372$24058 core-prim . char-downcase) (g$3372$24057 core-prim . char-ci>?) (g$3372$24056 core-prim . char-ci>=?) (g$3372$24055 core-prim . char-ci=?) (g$3372$24054 core-prim . char-ci<?) (g$3372$24053 core-prim . char-ci<=?) (g$3372$24052 core-prim . char-alphabetic?) (g$3372$13275 core-prim . make-variable-transformer) (g$3372$13705 core-prim . identifier?) (g$3372$13697 core-prim . generate-temporaries) (g$3372$13699 core-prim . free-identifier=?) (g$3372$13709 core-prim . syntax->datum) (g$3372$13707 core-prim . datum->syntax) (g$3372$13701 core-prim . bound-identifier=?) (g$3372$24051 core-prim . record-type-descriptor?) (g$3372$24050 core-prim . record-predicate) (g$3372$24049 core-prim . record-mutator) (g$3372$24048 core-prim . record-constructor) (g$3372$24047 core-prim . record-accessor) (g$3372$24046 core-prim . make-record-type-descriptor) (g$3372$24045 core-prim . make-record-constructor-descriptor) (g$3372$24044 core-prim . record?) (g$3372$24043 core-prim . record-type-uid) (g$3372$24042 core-prim . record-type-sealed?) (g$3372$24041 core-prim . record-type-parent) (g$3372$24040 core-prim . record-type-opaque?) (g$3372$24039 core-prim . record-type-name) (g$3372$24038 core-prim . record-type-generative?) (g$3372$24037 core-prim . record-type-field-names) (g$3372$24036 core-prim . record-rtd) (g$3372$24035 core-prim . record-field-mutable?) (g$3372$24034 core-prim . delete-file) (g$3372$24033 core-prim . file-exists?) (g$3372$24032 core-prim . vector-sort!) (g$3372$24031 core-prim . vector-sort) (g$3372$24030 core-prim . list-sort) (g$3372$24029 core-prim . symbol-hash) (g$3372$24028 core-prim . string-ci-hash) (g$3372$24027 core-prim . string-hash) (g$3372$24026 core-prim . equal-hash) (g$3372$24025 core-prim . hashtable-equivalence-function) (g$3372$24024 core-prim . make-hashtable) (g$3372$24023 core-prim . hashtable-hash-function) (g$3372$24022 core-prim . make-eqv-hashtable) (g$3372$24021 core-prim . make-eq-hashtable) (g$3372$24020 core-prim . hashtable?) (g$3372$24019 core-prim . hashtable-update!) (g$3372$24018 core-prim . hashtable-size) (g$3372$24017 core-prim . hashtable-set!) (g$3372$24016 core-prim . hashtable-ref) (g$3372$24015 core-prim . hashtable-mutable?) (g$3372$24014 core-prim . hashtable-keys) (g$3372$24013 core-prim . hashtable-entries) (g$3372$24012 core-prim . hashtable-delete!) (g$3372$24011 core-prim . hashtable-copy) (g$3372$24010 core-prim . hashtable-contains?) (g$3372$24009 core-prim . hashtable-clear!) (g$3372$24008 core-prim . call-with-output-file) (g$3372$24007 core-prim . call-with-input-file) (g$3372$24006 core-prim . write-char) (g$3372$24005 core-prim . write) (g$3372$24004 core-prim . with-output-to-file) (g$3372$24003 core-prim . with-input-from-file) (g$3372$24002 core-prim . read-char) (g$3372$24001 core-prim . read) (g$3372$24000 core-prim . peek-char) (g$3372$23999 core-prim . open-output-file) (g$3372$23998 core-prim . open-input-file) (g$3372$23997 core-prim . newline) (g$3372$23996 core-prim . display) (g$3372$23995 core-prim . close-output-port) (g$3372$23994 core-prim . close-input-port) (g$3372$23993 core-prim . eof-object?) (g$3372$23992 core-prim . eof-object) (g$3372$23991 core-prim . current-error-port) (g$3372$23990 core-prim . current-output-port) (g$3372$23989 core-prim . current-input-port) (g$3372$23988 core-prim . output-port?) (g$3372$23987 core-prim . input-port?) (g$3372$23986 core-prim . utf-8-codec) (g$3372$23985 core-prim . utf-16-codec) (g$3372$23984 core-prim . transcoder-error-handling-mode) (g$3372$23983 core-prim . transcoder-eol-style) (g$3372$23982 core-prim . transcoder-codec) (g$3372$23981 core-prim . transcoded-port) (g$3372$23980 core-prim . textual-port?) (g$3372$23979 core-prim . string->bytevector) (g$3372$23978 core-prim . standard-output-port) (g$3372$23977 core-prim . standard-input-port) (g$3372$23976 core-prim . standard-error-port) (g$3372$23975 core-prim . set-port-position!) (g$3372$23974 core-prim . put-u8) (g$3372$23973 core-prim . put-string) (g$3372$23972 core-prim . put-datum) (g$3372$23971 core-prim . put-char) (g$3372$23970 core-prim . put-bytevector) (g$3372$23969 core-prim . port?) (g$3372$23968 core-prim . port-transcoder) (g$3372$23967 core-prim . port-position) (g$3372$23966 core-prim . port-has-set-port-position!?) (g$3372$23965 core-prim . port-has-port-position?) (g$3372$23964 core-prim . port-eof?) (g$3372$23963 core-prim . output-port-buffer-mode) (g$3372$23962 core-prim . open-string-output-port) (g$3372$23961 core-prim . open-string-input-port) (g$3372$23960 core-prim . open-file-output-port) (g$3372$23959 core-prim . open-file-input/output-port) (g$3372$23958 core-prim . open-file-input-port) (g$3372$23957 core-prim . open-bytevector-output-port) (g$3372$23956 core-prim . open-bytevector-input-port) (g$3372$23955 core-prim . native-transcoder) (g$3372$23954 core-prim . native-eol-style) (g$3372$23953 core-prim . make-transcoder) (g$3372$23952 core-prim . latin-1-codec) (g$3372$23951 core-prim . make-i/o-write-error) (g$3372$23950 core-prim . make-i/o-read-error) (g$3372$23949 core-prim . make-i/o-port-error) (g$3372$23948 core-prim . make-i/o-invalid-position-error) (g$3372$23947 core-prim . make-i/o-filename-error) (g$3372$23946 core-prim . make-i/o-file-protection-error) (g$3372$23945 core-prim . make-i/o-file-is-read-only-error) (g$3372$23944 core-prim . make-i/o-file-does-not-exist-error) (g$3372$23943 core-prim . make-i/o-file-already-exists-error) (g$3372$23942 core-prim . make-i/o-error) (g$3372$23941 core-prim . make-i/o-encoding-error) (g$3372$23940 core-prim . make-i/o-decoding-error) (g$3372$23939 core-prim . make-custom-textual-output-port) (g$3372$23938 core-prim . make-custom-textual-input/output-port) (g$3372$23937 core-prim . make-custom-textual-input-port) (g$3372$23936 core-prim . make-custom-binary-output-port) (g$3372$23935 core-prim . make-custom-binary-input/output-port) (g$3372$23934 core-prim . make-custom-binary-input-port) (g$3372$23933 core-prim . make-bytevector) (g$3372$23932 core-prim . lookahead-u8) (g$3372$23931 core-prim . lookahead-char) (g$3372$23930 core-prim . i/o-write-error?) (g$3372$23929 core-prim . i/o-read-error?) (g$3372$23928 core-prim . i/o-port-error?) (g$3372$23927 core-prim . i/o-invalid-position-error?) (g$3372$23926 core-prim . i/o-filename-error?) (g$3372$23925 core-prim . i/o-file-protection-error?) (g$3372$23924 core-prim . i/o-file-is-read-only-error?) (g$3372$23923 core-prim . i/o-file-does-not-exist-error?) (g$3372$23922 core-prim . i/o-file-already-exists-error?) (g$3372$23921 core-prim . i/o-error?) (g$3372$23920 core-prim . i/o-error-port) (g$3372$23919 core-prim . i/o-error-filename) (g$3372$23918 core-prim . i/o-encoding-error?) (g$3372$23917 core-prim . i/o-encoding-error-char) (g$3372$23916 core-prim . i/o-decoding-error?) (g$3372$23915 core-prim . get-u8) (g$3372$23914 core-prim . get-string-n!) (g$3372$23913 core-prim . get-string-n) (g$3372$23912 core-prim . get-string-all) (g$3372$23911 core-prim . get-line) (g$3372$23910 core-prim . get-datum) (g$3372$23909 core-prim . get-char) (g$3372$23908 core-prim . get-bytevector-some) (g$3372$23907 core-prim . get-bytevector-n!) (g$3372$23906 core-prim . get-bytevector-n) (g$3372$23905 core-prim . get-bytevector-all) (g$3372$23904 core-prim . flush-output-port) (g$3372$23903 core-prim . close-port) (g$3372$23902 core-prim . scheme-report-environment) (g$3372$23901 core-prim . quotient) (g$3372$13677 core-prim . null-environment) (g$3372$23900 core-prim . remainder) (g$3372$23899 core-prim . modulo) (g$3372$23898 core-prim . inexact->exact) (g$3372$23897 core-prim . force) (g$3372$23896 core-prim . exact->inexact) (g$3372$23895 core-prim . exit) (g$3372$23894 core-prim . command-line) (g$3372$23893 core-prim . string-fill!) (g$3372$23892 core-prim . string-set!) (g$3372$23891 core-prim . set-cdr!) (g$3372$23890 core-prim . set-car!) (g$3372$23889 core-prim . remove) (g$3372$23888 core-prim . remv) (g$3372$23887 core-prim . remp) (g$3372$23886 core-prim . remq) (g$3372$23885 core-prim . partition) (g$3372$23884 core-prim . memv) (g$3372$23883 core-prim . memq) (g$3372$23882 core-prim . memp) (g$3372$23881 core-prim . member) (g$3372$23880 core-prim . exists) (g$3372$23879 core-prim . for-all) (g$3372$23878 core-prim . fold-right) (g$3372$23877 core-prim . fold-left) (g$3372$23876 core-prim . find) (g$3372$23875 core-prim . filter) (g$3372$23874 core-prim . cons*) (g$3372$23873 core-prim . assv) (g$3372$23872 core-prim . assq) (g$3372$23871 core-prim . assp) (g$3372$23870 core-prim . assoc) (g$3372$23869 core-prim . call-with-string-output-port) (g$3372$23868 core-prim . call-with-port) (g$3372$23867 core-prim . call-with-bytevector-output-port) (g$3372$23866 core-prim . bytevector->string) (g$3372$23865 core-prim . buffer-mode?) (g$3372$23864 core-prim . binary-port?) (g$3372$23863 core-prim . with-exception-handler) (g$3372$23862 core-prim . raise-continuable) (g$3372$23861 core-prim . raise) (g$3372$13683 core-prim . eval) (g$3372$13675 core-prim . environment) (g$3372$23860 core-prim . make-enumeration) (g$3372$23859 core-prim . enum-set=?) (g$3372$23858 core-prim . enum-set-universe) (g$3372$23857 core-prim . enum-set-union) (g$3372$23856 core-prim . enum-set-subset?) (g$3372$23855 core-prim . enum-set-projection) (g$3372$23854 core-prim . enum-set-member?) (g$3372$23853 core-prim . enum-set-intersection) (g$3372$23852 core-prim . enum-set-indexer) (g$3372$23851 core-prim . enum-set-difference) (g$3372$23850 core-prim . enum-set-constructor) (g$3372$23849 core-prim . enum-set-complement) (g$3372$23848 core-prim . enum-set->list) (g$3372$23847 core-prim . who-condition?) (g$3372$23846 core-prim . warning?) (g$3372$23845 core-prim . violation?) (g$3372$23844 core-prim . undefined-violation?) (g$3372$23843 core-prim . syntax-violation?) (g$3372$23842 core-prim . syntax-violation-subform) (g$3372$23841 core-prim . syntax-violation-form) (g$3372$23840 core-prim . syntax-violation) (g$3372$23839 core-prim . simple-conditions) (g$3372$23838 core-prim . serious-condition?) (g$3372$23837 core-prim . non-continuable-violation?) (g$3372$23836 core-prim . &non-continuable) (g$3372$23835 core-prim . message-condition?) (g$3372$23834 core-prim . make-who-condition) (g$3372$23833 core-prim . make-warning) (g$3372$23832 core-prim . make-violation) (g$3372$23831 core-prim . make-undefined-violation) (g$3372$23830 core-prim . make-syntax-violation) (g$3372$23829 core-prim . make-serious-condition) (g$3372$23828 core-prim . make-non-continuable-violation) (g$3372$23827 core-prim . make-message-condition) (g$3372$23826 core-prim . make-lexical-violation) (g$3372$23825 core-prim . make-irritants-condition) (g$3372$23824 core-prim . make-implementation-restriction-violation) (g$3372$23823 core-prim . make-error) (g$3372$23822 core-prim . make-assertion-violation) (g$3372$23821 core-prim . lexical-violation?) (g$3372$23820 core-prim . irritants-condition?) (g$3372$23819 core-prim . implementation-restriction-violation?) (g$3372$23818 core-prim . &implementation-restriction) (g$3372$23817 core-prim . error?) (g$3372$23816 core-prim . condition-who) (g$3372$23815 core-prim . condition-predicate) (g$3372$23814 core-prim . condition-message) (g$3372$23813 core-prim . condition-irritants) (g$3372$23812 core-prim . condition-accessor) (g$3372$23811 core-prim . condition) (g$3372$23810 core-prim . assertion-violation?) (g$3372$23809 core-prim . condition?) (g$3372$23808 core-prim . utf32->string) (g$3372$23807 core-prim . utf16->string) (g$3372$23806 core-prim . utf8->string) (g$3372$23805 core-prim . uint-list->bytevector) (g$3372$23804 core-prim . u8-list->bytevector) (g$3372$23803 core-prim . string->utf8) (g$3372$23802 core-prim . string->utf32) (g$3372$23801 core-prim . string->utf16) (g$3372$23800 core-prim . sint-list->bytevector) (g$3372$23799 core-prim . native-endianness) (g$3372$23798 core-prim . bytevector?) (g$3372$23797 core-prim . bytevector=?) (g$3372$23796 core-prim . bytevector-uint-set!) (g$3372$23795 core-prim . bytevector-uint-ref) (g$3372$23794 core-prim . bytevector-u8-set!) (g$3372$23793 core-prim . bytevector-u8-ref) (g$3372$23792 core-prim . bytevector-u64-set!) (g$3372$23791 core-prim . bytevector-u64-ref) (g$3372$23790 core-prim . bytevector-u64-native-set!) (g$3372$23789 core-prim . bytevector-u64-native-ref) (g$3372$23788 core-prim . bytevector-u32-set!) (g$3372$23787 core-prim . bytevector-u32-ref) (g$3372$23786 core-prim . bytevector-u32-native-set!) (g$3372$23785 core-prim . bytevector-u32-native-ref) (g$3372$23784 core-prim . bytevector-u16-set!) (g$3372$23783 core-prim . bytevector-u16-ref) (g$3372$23782 core-prim . bytevector-u16-native-set!) (g$3372$23781 core-prim . bytevector-u16-native-ref) (g$3372$23780 core-prim . bytevector-sint-set!) (g$3372$23779 core-prim . bytevector-sint-ref) (g$3372$23778 core-prim . bytevector-s8-set!) (g$3372$23777 core-prim . bytevector-s8-ref) (g$3372$23776 core-prim . bytevector-s64-set!) (g$3372$23775 core-prim . bytevector-s64-ref) (g$3372$23774 core-prim . bytevector-s64-native-set!) (g$3372$23773 core-prim . bytevector-s64-native-ref) (g$3372$23772 core-prim . bytevector-s32-set!) (g$3372$23771 core-prim . bytevector-s32-ref) (g$3372$23770 core-prim . bytevector-s32-native-set!) (g$3372$23769 core-prim . bytevector-s32-native-ref) (g$3372$23768 core-prim . bytevector-s16-set!) (g$3372$23767 core-prim . bytevector-s16-ref) (g$3372$23766 core-prim . bytevector-s16-native-set!) (g$3372$23765 core-prim . bytevector-s16-native-ref) (g$3372$23764 core-prim . bytevector-length) (g$3372$23763 core-prim . bytevector-ieee-single-ref) (g$3372$23762 core-prim . bytevector-ieee-single-native-set!) (g$3372$23761 core-prim . bytevector-ieee-single-native-ref) (g$3372$23760 core-prim . bytevector-ieee-double-ref) (g$3372$23759 core-prim . bytevector-ieee-double-native-set!) (g$3372$23758 core-prim . bytevector-ieee-double-native-ref) (g$3372$23757 core-prim . bytevector-fill!) (g$3372$23756 core-prim . bytevector-copy!) (g$3372$23755 core-prim . bytevector-copy) (g$3372$23754 core-prim . bytevector->uint-list) (g$3372$23753 core-prim . bytevector->u8-list) (g$3372$23752 core-prim . bytevector->sint-list) (g$3372$23751 core-prim . no-nans-violation?) (g$3372$23750 core-prim . no-infinities-violation?) (g$3372$23749 core-prim . make-no-nans-violation) (g$3372$23748 core-prim . make-no-infinities-violation) (g$3372$23747 core-prim . real->flonum) (g$3372$23746 core-prim . flzero?) (g$3372$23745 core-prim . fltruncate) (g$3372$23744 core-prim . fltan) (g$3372$23743 core-prim . flsqrt) (g$3372$23742 core-prim . flsin) (g$3372$23741 core-prim . flround) (g$3372$23740 core-prim . flpositive?) (g$3372$23739 core-prim . flonum?) (g$3372$23738 core-prim . flodd?) (g$3372$23737 core-prim . flnumerator) (g$3372$23736 core-prim . flnegative?) (g$3372$23735 core-prim . flnan?) (g$3372$23734 core-prim . flmod0) (g$3372$23733 core-prim . flmod) (g$3372$23732 core-prim . flmin) (g$3372$23731 core-prim . flmax) (g$3372$23730 core-prim . fllog) (g$3372$23729 core-prim . flinteger?) (g$3372$23728 core-prim . flinfinite?) (g$3372$23727 core-prim . flfloor) (g$3372$23726 core-prim . flfinite?) (g$3372$23725 core-prim . flexpt) (g$3372$23724 core-prim . flexp) (g$3372$23723 core-prim . fleven?) (g$3372$23722 core-prim . fldiv0-and-mod0) (g$3372$23721 core-prim . fldiv0) (g$3372$23720 core-prim . fldiv-and-mod) (g$3372$23719 core-prim . fldiv) (g$3372$23718 core-prim . fldenominator) (g$3372$23717 core-prim . flcos) (g$3372$23716 core-prim . flceiling) (g$3372$23715 core-prim . flatan) (g$3372$23714 core-prim . flasin) (g$3372$23713 core-prim . flacos) (g$3372$23712 core-prim . flabs) (g$3372$23711 core-prim . fl>?) (g$3372$23710 core-prim . fl>=?) (g$3372$23709 core-prim . fl=?) (g$3372$23708 core-prim . fl<?) (g$3372$23707 core-prim . fl<=?) (g$3372$23706 core-prim . fl/) (g$3372$23705 core-prim . fl-) (g$3372$23704 core-prim . fl+) (g$3372$23703 core-prim . fl*) (g$3372$23702 core-prim . fixnum->flonum) (g$3372$23701 core-prim . fxzero?) (g$3372$23700 core-prim . fxxor) (g$3372$23699 core-prim . fxrotate-bit-field) (g$3372$23698 core-prim . fxreverse-bit-field) (g$3372$23697 core-prim . fxpositive?) (g$3372$23696 core-prim . fxodd?) (g$3372$23695 core-prim . fxnot) (g$3372$23694 core-prim . fxnegative?) (g$3372$23693 core-prim . fxmod0) (g$3372$23692 core-prim . fxmod) (g$3372$23691 core-prim . fxmin) (g$3372$23690 core-prim . fxmax) (g$3372$23689 core-prim . fxlength) (g$3372$23688 core-prim . fxior) (g$3372$23687 core-prim . fxif) (g$3372$23686 core-prim . fxfirst-bit-set) (g$3372$23685 core-prim . fxeven?) (g$3372$23684 core-prim . fxdiv0-and-mod0) (g$3372$23683 core-prim . fxdiv0) (g$3372$23682 core-prim . fxdiv-and-mod) (g$3372$23681 core-prim . fxdiv) (g$3372$23680 core-prim . fxcopy-bit-field) (g$3372$23679 core-prim . fxcopy-bit) (g$3372$23678 core-prim . fxbit-set?) (g$3372$23677 core-prim . fxbit-field) (g$3372$23676 core-prim . fxbit-count) (g$3372$23675 core-prim . fxarithmetic-shift-right) (g$3372$23674 core-prim . fxarithmetic-shift-left) (g$3372$23673 core-prim . fxarithmetic-shift) (g$3372$23672 core-prim . fxand) (g$3372$23671 core-prim . fx>?) (g$3372$23670 core-prim . fx>=?) (g$3372$23669 core-prim . fx=?) (g$3372$23668 core-prim . fx<?) (g$3372$23667 core-prim . fx<=?) (g$3372$23666 core-prim . fx-/carry) (g$3372$23665 core-prim . fx-) (g$3372$23664 core-prim . fx+/carry) (g$3372$23663 core-prim . fx+) (g$3372$23662 core-prim . fx*/carry) (g$3372$23661 core-prim . fx*) (g$3372$23660 core-prim . greatest-fixnum) (g$3372$23659 core-prim . least-fixnum) (g$3372$23658 core-prim . fixnum-width) (g$3372$23657 core-prim . fixnum?) (g$3372$23656 core-prim . bitwise-rotate-bit-field) (g$3372$23655 core-prim . bitwise-reverse-bit-field) (g$3372$23654 core-prim . bitwise-length) (g$3372$23653 core-prim . bitwise-if) (g$3372$23652 core-prim . bitwise-first-bit-set) (g$3372$23651 core-prim . bitwise-copy-bit-field) (g$3372$23650 core-prim . bitwise-copy-bit) (g$3372$23649 core-prim . bitwise-bit-set?) (g$3372$23648 core-prim . bitwise-bit-field) (g$3372$23647 core-prim . bitwise-bit-count) (g$3372$23646 core-prim . bitwise-xor) (g$3372$23645 core-prim . bitwise-ior) (g$3372$23644 core-prim . bitwise-and) (g$3372$23643 core-prim . bitwise-not) (g$3372$23642 core-prim . bitwise-arithmetic-shift-right) (g$3372$23641 core-prim . bitwise-arithmetic-shift-left) (g$3372$23640 core-prim . bitwise-arithmetic-shift) (g$3372$23639 core-prim . zero?) (g$3372$23638 core-prim . vector?) (g$3372$23637 core-prim . vector-set!) (g$3372$23636 core-prim . vector-ref) (g$3372$23635 core-prim . vector-map) (g$3372$23634 core-prim . vector-length) (g$3372$23633 core-prim . vector-for-each) (g$3372$23632 core-prim . vector-fill!) (g$3372$23631 core-prim . vector->list) (g$3372$23630 core-prim . vector) (g$3372$23629 core-prim . values) (g$3372$23628 core-prim . truncate) (g$3372$23627 core-prim . tan) (g$3372$23626 core-prim . symbol?) (g$3372$23625 core-prim . symbol=?) (g$3372$23624 core-prim . symbol->string) (g$3372$23623 core-prim . substring) (g$3372$23622 core-prim . string?) (g$3372$23621 core-prim . string>?) (g$3372$23620 core-prim . string>=?) (g$3372$23619 core-prim . string=?) (g$3372$23618 core-prim . string<?) (g$3372$23617 core-prim . string<=?) (g$3372$23616 core-prim . string-ref) (g$3372$23615 core-prim . string-length) (g$3372$23614 core-prim . string-for-each) (g$3372$23613 core-prim . string-copy) (g$3372$23612 core-prim . string-append) (g$3372$23611 core-prim . string->symbol) (g$3372$23610 core-prim . string->number) (g$3372$23609 core-prim . string->list) (g$3372$23608 core-prim . string) (g$3372$23607 core-prim . sqrt) (g$3372$23606 core-prim . sin) (g$3372$23605 core-prim . round) (g$3372$23604 core-prim . reverse) (g$3372$23603 core-prim . real?) (g$3372$23602 core-prim . real-valued?) (g$3372$23601 core-prim . real-part) (g$3372$23600 core-prim . rationalize) (g$3372$23599 core-prim . rational?) (g$3372$23598 core-prim . rational-valued?) (g$3372$23597 core-prim . procedure?) (g$3372$23596 core-prim . positive?) (g$3372$23595 core-prim . pair?) (g$3372$23594 core-prim . odd?) (g$3372$23593 core-prim . numerator) (g$3372$23592 core-prim . number?) (g$3372$23591 core-prim . number->string) (g$3372$23590 core-prim . null?) (g$3372$23589 core-prim . not) (g$3372$23588 core-prim . negative?) (g$3372$23587 core-prim . nan?) (g$3372$23586 core-prim . min) (g$3372$23585 core-prim . max) (g$3372$23584 core-prim . map) (g$3372$23583 core-prim . make-vector) (g$3372$23582 core-prim . make-string) (g$3372$23581 core-prim . make-rectangular) (g$3372$23580 core-prim . make-polar) (g$3372$23579 core-prim . magnitude) (g$3372$23578 core-prim . log) (g$3372$23577 core-prim . list?) (g$3372$23576 core-prim . list-tail) (g$3372$23575 core-prim . list-ref) (g$3372$23574 core-prim . list->vector) (g$3372$23573 core-prim . list->string) (g$3372$23572 core-prim . list) (g$3372$23571 core-prim . length) (g$3372$23570 core-prim . lcm) (g$3372$23569 core-prim . integer?) (g$3372$23568 core-prim . integer-valued?) (g$3372$23567 core-prim . integer->char) (g$3372$23566 core-prim . infinite?) (g$3372$23565 core-prim . inexact?) (g$3372$23564 core-prim . inexact) (g$3372$23563 core-prim . imag-part) (g$3372$23562 core-prim . gcd) (g$3372$23561 core-prim . for-each) (g$3372$23560 core-prim . floor) (g$3372$23559 core-prim . finite?) (g$3372$23558 core-prim . expt) (g$3372$23557 core-prim . exp) (g$3372$23556 core-prim . exact?) (g$3372$23555 core-prim . exact-integer-sqrt) (g$3372$23554 core-prim . exact) (g$3372$23553 core-prim . even?) (g$3372$23552 core-prim . error) (g$3372$23551 core-prim . eqv?) (g$3372$23550 core-prim . equal?) (g$3372$23549 core-prim . eq?) (g$3372$23548 core-prim . dynamic-wind) (g$3372$23547 core-prim . div0-and-mod0) (g$3372$23546 core-prim . mod0) (g$3372$23545 core-prim . div0) (g$3372$23544 core-prim . div-and-mod) (g$3372$23543 core-prim . mod) (g$3372$23542 core-prim . div) (g$3372$23541 core-prim . denominator) (g$3372$23540 core-prim . cos) (g$3372$23539 core-prim . cons) (g$3372$23538 core-prim . complex?) (g$3372$23537 core-prim . char?) (g$3372$23536 core-prim . char>?) (g$3372$23535 core-prim . char>=?) (g$3372$23534 core-prim . char=?) (g$3372$23533 core-prim . char<?) (g$3372$23532 core-prim . char<=?) (g$3372$23531 core-prim . char->integer) (g$3372$23530 core-prim . ceiling) (g$3372$23529 core-prim . call-with-values) (g$3372$23528 core-prim . call/cc) (g$3372$23527 core-prim . call-with-current-continuation) (g$3372$23526 core-prim . cddddr) (g$3372$23525 core-prim . cdddar) (g$3372$23524 core-prim . cddadr) (g$3372$23523 core-prim . cddaar) (g$3372$23522 core-prim . cdaddr) (g$3372$23521 core-prim . cdadar) (g$3372$23520 core-prim . cdaadr) (g$3372$23519 core-prim . cdaaar) (g$3372$23518 core-prim . cadddr) (g$3372$23517 core-prim . caddar) (g$3372$23516 core-prim . cadadr) (g$3372$23515 core-prim . cadaar) (g$3372$23514 core-prim . caaddr) (g$3372$23513 core-prim . caadar) (g$3372$23512 core-prim . caaadr) (g$3372$23511 core-prim . caaaar) (g$3372$23510 core-prim . cdddr) (g$3372$23509 core-prim . cddar) (g$3372$23508 core-prim . cdadr) (g$3372$23507 core-prim . cdaar) (g$3372$23506 core-prim . caddr) (g$3372$23505 core-prim . cadar) (g$3372$23504 core-prim . caadr) (g$3372$23503 core-prim . caaar) (g$3372$23502 core-prim . cddr) (g$3372$23501 core-prim . cdar) (g$3372$23500 core-prim . cadr) (g$3372$23499 core-prim . caar) (g$3372$23498 core-prim . cdr) (g$3372$23497 core-prim . car) (g$3372$23496 core-prim . boolean?) (g$3372$23495 core-prim . boolean=?) (g$3372$23494 core-prim . atan) (g$3372$23493 core-prim . assertion-violation) (g$3372$23492 core-prim . asin) (g$3372$23491 core-prim . apply) (g$3372$23490 core-prim . append) (g$3372$23489 core-prim . angle) (g$3372$23488 core-prim . acos) (g$3372$23487 core-prim . abs) (g$3372$23486 core-prim . /) (g$3372$23485 core-prim . *) (g$3372$23484 core-prim . -) (g$3372$23483 core-prim . +) (g$3372$23482 core-prim . >=) (g$3372$23481 core-prim . >) (g$3372$23480 core-prim . =) (g$3372$23479 core-prim . <=) (g$3372$23478 core-prim . <) (g$3372$23477 core-prim . let*-values) (g$3372$23476 $core-rtd &no-nans-rtd &no-nans-rcd) (g$3372$23475 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$3372$23474 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$3372$23473 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$3372$23472 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$3372$23471 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$3372$23470 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$3372$23469 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$3372$23468 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$3372$23467 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$3372$23466 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$3372$23465 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$3372$23464 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$3372$23463 $core-rtd &i/o-rtd &i/o-rcd) (g$3372$23462 $core-rtd &undefined-rtd &undefined-rcd) (g$3372$23461 $core-rtd &syntax-rtd &syntax-rcd) (g$3372$23460 $core-rtd &lexical-rtd &lexical-rcd) (g$3372$23459 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$3372$23458 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$3372$23457 $core-rtd &who-rtd &who-rcd) (g$3372$23456 $core-rtd &irritants-rtd &irritants-rcd) (g$3372$23455 $core-rtd &assertion-rtd &assertion-rcd) (g$3372$23454 $core-rtd &violation-rtd &violation-rcd) (g$3372$23453 $core-rtd &error-rtd &error-rcd) (g$3372$23452 $core-rtd &serious-rtd &serious-rcd) (g$3372$23451 $core-rtd &warning-rtd &warning-rcd) (g$3372$23450 $core-rtd &message-rtd &message-rcd) (g$3372$23449 $core-rtd &condition-rtd &condition-rcd) (g$3372$23448 macro . define-condition-type) (g$3372$23447 macro . define-enumeration) (g$3372$23446 macro . define-record-type) (g$3372$23445 macro . parent-rtd) (g$3372$23444 macro . nongenerative) (g$3372$23443 macro . opaque) (g$3372$23442 macro . sealed) (g$3372$23441 macro . protocol) (g$3372$23440 macro . parent) (g$3372$23439 macro . immutable) (g$3372$23438 macro . mutable) (g$3372$23437 macro . fields) (g$3372$23436 macro . error-handling-mode) (g$3372$23435 macro . file-options) (g$3372$23434 macro . buffer-mode) (g$3372$23433 macro . eol-style) (g$3372$23432 macro . guard) (g$3372$23431 macro . trace-define) (g$3372$23430 macro . trace-lambda) (g$3372$23429 macro . unsyntax-splicing) (g$3372$23428 macro . unsyntax) (g$3372$23427 macro . unquote-splicing) (g$3372$23426 macro . unquote) (g$3372$23425 macro . _) (g$3372$23424 macro . else) (g$3372$23423 macro . =>) (g$3372$23422 macro . |...|) (g$3372$23421 macro . assert) (g$3372$23420 macro . endianness) (g$3372$23419 macro . delay) (g$3372$23418 macro . time) (g$3372$23417 macro . or) (g$3372$23416 macro . and) (g$3372$23415 macro . do) (g$3372$23414 macro . cond) (g$3372$23413 macro . let*) (g$3372$23412 macro . let) (g$3372$23411 macro . identifier-syntax) (g$3372$23410 macro . with-syntax) (g$3372$23409 macro . quasisyntax) (g$3372$23408 macro . quasiquote) (g$3372$23407 macro . syntax-rules) (g$3372$23406 macro . include) (g$3372$23405 macro . define-struct) (g$3372$23404 core-macro . record-constructor-descriptor) (g$3372$23403 core-macro . record-type-descriptor) (g$3372$23402 core-macro . let-values) (g$3372$23401 core-macro . case) (g$3372$23400 core-macro . parameterize) (g$3372$23399 core-macro . unless) (g$3372$23398 core-macro . when) (g$3372$23397 core-macro . if) (g$3372$23396 core-macro . letrec*) (g$3372$23395 core-macro . letrec) (g$3372$23394 core-macro . type-descriptor) (g$3372$23393 core-macro . case-lambda) (g$3372$23392 core-macro . lambda) (g$3372$23391 core-macro . syntax) (g$3372$23390 core-macro . syntax-case) (g$3372$23389 core-macro . quote) (g$3372$23388 core-macro . foreign-call) (g$3372$23387 letrec-syntax) (g$3372$23386 let-syntax) (g$3372$23385 set!) (g$3372$23384 import) (g$3372$23383 begin) (g$3372$23382 module) (g$3372$23381 define-syntax) (g$3372$23380 define)) values values '#f) (g$3372$12835 'g$3372$24123 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . g$3372$24089) (eval-core . g$3372$24088) (set-symbol-value! . g$3372$24087) (symbol-value . g$3372$24086) (gensym . g$3372$24085) (void . g$3372$24084)) '() values values '#f))


(begin (define g$3372$23378 '#f) ((lambda (g$3372$23362) (begin (set! g$3372$23362 (lambda (g$3372$23364) ((lambda (g$3372$23366) (g$3372$23172 g$3372$23366)) (with-input-from-file g$3372$23364 (lambda () (letrec ((g$3372$23368 (lambda () ((lambda (g$3372$23370) (if (eof-object? g$3372$23370) '() (cons g$3372$23370 (g$3372$23368)))) (read))))) (g$3372$23368))))))) (begin (set! g$3372$23378 g$3372$23362) (display '"r6rs psyntax ready\n") ((lambda (g$3372$23372) (begin (if (= (length g$3372$23372) '2) (void) (begin (display '"provide a script name argument\n") (exit '17))) ((lambda (g$3372$23374 g$3372$23375) (g$3372$23362 (car g$3372$23375))) (car g$3372$23372) (cdr g$3372$23372)))) (command-line))))) '#f))


