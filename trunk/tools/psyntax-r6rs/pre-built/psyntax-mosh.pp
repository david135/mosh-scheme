;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define g$120$12318 '#f) (define g$120$12315 '#f) ((lambda (g$120$12208 g$120$12295) (begin (set! g$120$12208 (lambda g$120$12311 ((lambda (g$120$12312) (if (= g$120$12312 '1) (apply (lambda (g$120$12297) (g$120$12208 g$120$12297 (lambda (g$120$12299) g$120$12299))) g$120$12311) (if (= g$120$12312 '2) (apply (lambda (g$120$12301 g$120$12302) (begin (if (procedure? g$120$12302) (void) (error 'assert '"assertion failed" '(procedure? fender))) ((lambda (g$120$12305) (lambda g$120$12309 ((lambda (g$120$12310) (if (= g$120$12310 '0) (apply (lambda () g$120$12305) g$120$12309) (if (= g$120$12310 '1) (apply (lambda (g$120$12307) (set! g$120$12305 (g$120$12302 g$120$12307))) g$120$12309) (error 'apply '"invalid arg count")))) (length g$120$12309)))) (g$120$12302 g$120$12301)))) g$120$12311) (error 'apply '"invalid arg count")))) (length g$120$12311)))) (set! g$120$12295 (lambda (g$120$12313) (error 'file-options-spec '"not implemented"))) (begin (set! g$120$12315 g$120$12295) (set! g$120$12318 g$120$12208)))) '#f '#f))


(begin (define g$120$12396 '#f) (define g$120$12395 '#f) (define g$120$12394 '#f) (define g$120$12393 '#f) (define g$120$12392 '#f) (define g$120$12391 '#f) ((lambda (g$120$12320 g$120$12322 g$120$12324 g$120$12326 g$120$12328 g$120$12330) (begin (set! g$120$12320 (g$120$12318 (lambda (g$120$12332) '#f) (lambda (g$120$12334) (begin (if (procedure? g$120$12334) (void) (error 'assert '"assertion failed" '(procedure? p))) g$120$12334)))) (set! g$120$12322 (lambda (g$120$12336) ((lambda (g$120$12338) (begin (set! g$120$12338 (lambda (g$120$12340) ((lambda (g$120$12342) (if g$120$12342 g$120$12342 ((lambda (g$120$12344) (if g$120$12344 g$120$12344 ((lambda (g$120$12346) (if g$120$12346 g$120$12346 ((lambda (g$120$12348) (if g$120$12348 g$120$12348 (begin '#f (number? g$120$12340)))) (boolean? g$120$12340)))) (symbol? g$120$12340)))) (char? g$120$12340)))) (null? g$120$12340)))) (not (g$120$12338 g$120$12336)))) '#f))) (set! g$120$12324 (lambda (g$120$12350) ((lambda (g$120$12352) (begin (set! g$120$12352 (lambda (g$120$12354) (if (pair? g$120$12354) ((lambda (g$120$12356) (if (memv g$120$12356 '(quote)) (if (if g$120$12350 (begin '#f (g$120$12322 (cadr g$120$12354))) '#f) ((lambda (g$120$12381) (begin (set-symbol-value! g$120$12381 (cadr g$120$12354)) g$120$12381)) (gensym)) g$120$12354) (if (memv g$120$12356 '(case-lambda)) (cons 'case-lambda (map (lambda (g$120$12379) (cons (car g$120$12379) (map g$120$12352 (cdr g$120$12379)))) (cdr g$120$12354))) (if (memv g$120$12356 '(lambda)) (cons* 'lambda (cadr g$120$12354) (map g$120$12352 (cddr g$120$12354))) (if (memv g$120$12356 '(letrec)) ((lambda (g$120$12371 g$120$12372) ((lambda (g$120$12375 g$120$12376) (cons* 'letrec (map list g$120$12375 (map g$120$12352 g$120$12376)) (map g$120$12352 g$120$12372))) (map car g$120$12371) (map cadr g$120$12371))) (cadr g$120$12354) (cddr g$120$12354)) (if (memv g$120$12356 '(letrec*)) ((lambda (g$120$12363 g$120$12364) ((lambda (g$120$12367 g$120$12368) (cons* 'letrec* (map list g$120$12367 (map g$120$12352 g$120$12368)) (map g$120$12352 g$120$12364))) (map car g$120$12363) (map cadr g$120$12363))) (cadr g$120$12354) (cddr g$120$12354)) (if (memv g$120$12356 '(begin)) (cons 'begin (map g$120$12352 (cdr g$120$12354))) (if (memv g$120$12356 '(set!)) (list 'set! (cadr g$120$12354) (g$120$12352 (caddr g$120$12354))) (if (memv g$120$12356 '(primitive)) ((lambda (g$120$12357) ((lambda (g$120$12359) (if g$120$12359 ((lambda (g$120$12361) g$120$12361) g$120$12359) g$120$12357)) ((g$120$12320) g$120$12357))) (cadr g$120$12354)) (if (memv g$120$12356 '(define)) g$120$12354 (if (list? g$120$12354) (map g$120$12352 g$120$12354) (error 'rewrite '"invalid form ~s ~s" g$120$12354 (list? g$120$12354))))))))))))) (car g$120$12354)) g$120$12354))) g$120$12352)) '#f))) (set! g$120$12326 ((lambda (g$120$12383) (not (eq? (eval-core (list 'quote g$120$12383)) (eval-core (list 'quote g$120$12383))))) (cons '1 '2))) (set! g$120$12328 (lambda (g$120$12385) ((g$120$12324 g$120$12326) g$120$12385))) (set! g$120$12330 (lambda (g$120$12387 g$120$12388) (begin (pretty-print ((g$120$12324 '#f) g$120$12387) g$120$12388) (newline g$120$12388)))) (begin (set! g$120$12391 g$120$12330) (set! g$120$12392 g$120$12328) (set! g$120$12393 g$120$12326) (set! g$120$12394 g$120$12324) (set! g$120$12395 g$120$12322) (set! g$120$12396 g$120$12320)))) '#f '#f '#f '#f '#f '#f))


(void)


(begin (define g$120$12874 '#f) (define g$120$12873 '#f) (define g$120$12872 '#f) (define g$120$12871 '#f) (define g$120$12870 '#f) (define g$120$12869 '#f) (define g$120$12868 '#f) (define g$120$12867 '#f) (define g$120$12866 '#f) (define g$120$12865 '#f) (define g$120$12864 '#f) (define g$120$12863 '#f) (define g$120$12862 '#f) (define g$120$12861 '#f) (define g$120$12860 '#f) (define g$120$12859 '#f) (define g$120$12858 '#f) (define g$120$12857 '#f) (define g$120$12856 '#f) (define g$120$12855 '#f) (define g$120$12854 '#f) (define g$120$12853 '#f) (define g$120$12852 '#f) (define g$120$12851 '#f) (define g$120$12850 '#f) (define g$120$12849 '#f) (define g$120$12848 '#f) (define g$120$12847 '#f) (define g$120$12846 '#f) (define g$120$12845 '#f) (define g$120$12844 '#f) (define g$120$12843 '#f) (define g$120$12842 '#f) (define g$120$12841 '#f) (define g$120$12840 '#f) (define g$120$12839 '#f) (define g$120$12838 '#f) (define g$120$12837 '#f) (define g$120$12836 '#f) (define g$120$12835 '#f) (define g$120$12834 '#f) (define g$120$12833 '#f) (define g$120$12832 '#f) (define g$120$12831 '#f) (define g$120$12830 '#f) (define g$120$12829 '#f) (define g$120$12828 '#f) (define g$120$12827 '#f) (define g$120$12826 '#f) ((lambda (g$120$12450 g$120$12452 g$120$12455 g$120$12457 g$120$12459 g$120$12461 g$120$12463 g$120$12465 g$120$12467 g$120$12469 g$120$12471 g$120$12473 g$120$12475 g$120$12477 g$120$12479 g$120$12481 g$120$12483 g$120$12485 g$120$12487 g$120$12489 g$120$12491 g$120$12493 g$120$12495 g$120$12497 g$120$12499 g$120$12501 g$120$12503 g$120$12505 g$120$12507 g$120$12509 g$120$12511 g$120$12513 g$120$12515 g$120$12517 g$120$12519 g$120$12521 g$120$12523 g$120$12525 g$120$12527 g$120$12529 g$120$12531 g$120$12533 g$120$12535 g$120$12537 g$120$12539 g$120$12541 g$120$12543 g$120$12545 g$120$12547) (begin (set! g$120$12450 (lambda () ((lambda (g$120$12549) ((lambda (g$120$12551) (begin (set! g$120$12551 (lambda (g$120$12553 g$120$12554) (if (memq g$120$12553 g$120$12554) g$120$12554 (cons g$120$12553 g$120$12554)))) (lambda g$120$12559 ((lambda (g$120$12560) (if (= g$120$12560 '0) (apply (lambda () g$120$12549) g$120$12559) (if (= g$120$12560 '1) (apply (lambda (g$120$12557) (set! g$120$12549 (g$120$12551 g$120$12557 g$120$12549))) g$120$12559) (error 'apply '"invalid arg count")))) (length g$120$12559))))) '#f)) '()))) (set! g$120$12452 (g$120$12318 (g$120$12450) (lambda (g$120$12561) (begin (if (procedure? g$120$12561) (void) (error 'current-library-collection '"not a procedure" g$120$12561)) g$120$12561)))) (set! g$120$12455 (lambda (g$120$12563 g$120$12564 g$120$12565 g$120$12566 g$120$12567 g$120$12568 g$120$12569 g$120$12570 g$120$12571 g$120$12572 g$120$12573) (vector 'g$120$12454 g$120$12563 g$120$12564 g$120$12565 g$120$12566 g$120$12567 g$120$12568 g$120$12569 g$120$12570 g$120$12571 g$120$12572 g$120$12573))) (set! g$120$12457 (lambda (g$120$12585) (if (vector? g$120$12585) (if (= (vector-length g$120$12585) (+ '1 (length '(id name version imp* vis* inv* subst env visit-state invoke-state visible?)))) (begin '#f (eq? (vector-ref g$120$12585 '0) 'g$120$12454)) '#f) '#f))) (set! g$120$12459 (lambda (g$120$12587) (if (g$120$12457 g$120$12587) (vector-ref g$120$12587 '1) (error 'library-id '"~s is not of type ~s" g$120$12587 'library)))) (set! g$120$12461 (lambda (g$120$12589) (if (g$120$12457 g$120$12589) (vector-ref g$120$12589 '2) (error 'library-name '"~s is not of type ~s" g$120$12589 'library)))) (set! g$120$12463 (lambda (g$120$12591) (if (g$120$12457 g$120$12591) (vector-ref g$120$12591 '3) (error 'library-version '"~s is not of type ~s" g$120$12591 'library)))) (set! g$120$12465 (lambda (g$120$12593) (if (g$120$12457 g$120$12593) (vector-ref g$120$12593 '4) (error 'library-imp* '"~s is not of type ~s" g$120$12593 'library)))) (set! g$120$12467 (lambda (g$120$12595) (if (g$120$12457 g$120$12595) (vector-ref g$120$12595 '5) (error 'library-vis* '"~s is not of type ~s" g$120$12595 'library)))) (set! g$120$12469 (lambda (g$120$12597) (if (g$120$12457 g$120$12597) (vector-ref g$120$12597 '6) (error 'library-inv* '"~s is not of type ~s" g$120$12597 'library)))) (set! g$120$12471 (lambda (g$120$12599) (if (g$120$12457 g$120$12599) (vector-ref g$120$12599 '7) (error 'library-subst '"~s is not of type ~s" g$120$12599 'library)))) (set! g$120$12473 (lambda (g$120$12601) (if (g$120$12457 g$120$12601) (vector-ref g$120$12601 '8) (error 'library-env '"~s is not of type ~s" g$120$12601 'library)))) (set! g$120$12475 (lambda (g$120$12603) (if (g$120$12457 g$120$12603) (vector-ref g$120$12603 '9) (error 'library-visit-state '"~s is not of type ~s" g$120$12603 'library)))) (set! g$120$12477 (lambda (g$120$12605) (if (g$120$12457 g$120$12605) (vector-ref g$120$12605 '10) (error 'library-invoke-state '"~s is not of type ~s" g$120$12605 'library)))) (set! g$120$12479 (lambda (g$120$12607) (if (g$120$12457 g$120$12607) (vector-ref g$120$12607 '11) (error 'library-visible? '"~s is not of type ~s" g$120$12607 'library)))) (set! g$120$12481 (lambda (g$120$12609 g$120$12610) (if (g$120$12457 g$120$12609) (vector-set! g$120$12609 '1 g$120$12610) (error 'set-library-id! '"~s is not of type ~s" g$120$12609 'library)))) (set! g$120$12483 (lambda (g$120$12613 g$120$12614) (if (g$120$12457 g$120$12613) (vector-set! g$120$12613 '2 g$120$12614) (error 'set-library-name! '"~s is not of type ~s" g$120$12613 'library)))) (set! g$120$12485 (lambda (g$120$12617 g$120$12618) (if (g$120$12457 g$120$12617) (vector-set! g$120$12617 '3 g$120$12618) (error 'set-library-version! '"~s is not of type ~s" g$120$12617 'library)))) (set! g$120$12487 (lambda (g$120$12621 g$120$12622) (if (g$120$12457 g$120$12621) (vector-set! g$120$12621 '4 g$120$12622) (error 'set-library-imp*! '"~s is not of type ~s" g$120$12621 'library)))) (set! g$120$12489 (lambda (g$120$12625 g$120$12626) (if (g$120$12457 g$120$12625) (vector-set! g$120$12625 '5 g$120$12626) (error 'set-library-vis*! '"~s is not of type ~s" g$120$12625 'library)))) (set! g$120$12491 (lambda (g$120$12629 g$120$12630) (if (g$120$12457 g$120$12629) (vector-set! g$120$12629 '6 g$120$12630) (error 'set-library-inv*! '"~s is not of type ~s" g$120$12629 'library)))) (set! g$120$12493 (lambda (g$120$12633 g$120$12634) (if (g$120$12457 g$120$12633) (vector-set! g$120$12633 '7 g$120$12634) (error 'set-library-subst! '"~s is not of type ~s" g$120$12633 'library)))) (set! g$120$12495 (lambda (g$120$12637 g$120$12638) (if (g$120$12457 g$120$12637) (vector-set! g$120$12637 '8 g$120$12638) (error 'set-library-env! '"~s is not of type ~s" g$120$12637 'library)))) (set! g$120$12497 (lambda (g$120$12641 g$120$12642) (if (g$120$12457 g$120$12641) (vector-set! g$120$12641 '9 g$120$12642) (error 'set-library-visit-state! '"~s is not of type ~s" g$120$12641 'library)))) (set! g$120$12499 (lambda (g$120$12645 g$120$12646) (if (g$120$12457 g$120$12645) (vector-set! g$120$12645 '10 g$120$12646) (error 'set-library-invoke-state! '"~s is not of type ~s" g$120$12645 'library)))) (set! g$120$12501 (lambda (g$120$12649 g$120$12650) (if (g$120$12457 g$120$12649) (vector-set! g$120$12649 '11 g$120$12650) (error 'set-library-visible?! '"~s is not of type ~s" g$120$12649 'library)))) (set! g$120$12503 (lambda (g$120$12653) (if (null? g$120$12653) '() (error 'find-dependencies '"cannot handle deps yet")))) (set! g$120$12505 (lambda (g$120$12655) (letrec ((g$120$12657 (lambda (g$120$12659) (if (null? g$120$12659) '#f (if (g$120$12655 (car g$120$12659)) (car g$120$12659) (g$120$12657 (cdr g$120$12659))))))) (g$120$12657 ((g$120$12452)))))) (set! g$120$12507 (g$120$12318 '(".") (lambda (g$120$12661) (if (if (list? g$120$12661) (begin '#f (for-all string? g$120$12661)) '#f) (map (lambda (g$120$12663) g$120$12663) g$120$12661) (error 'library-path '"not a list of strings" g$120$12661))))) (set! g$120$12509 (lambda (g$120$12665) (call-with-values (lambda () (open-string-output-port)) (lambda (g$120$12667 g$120$12668) ((lambda (g$120$12671) (begin (set! g$120$12671 (lambda (g$120$12673) (if (<= '0 g$120$12673 '9) (display g$120$12673 g$120$12667) (display (integer->char (+ (char->integer '#\A) (- g$120$12673 '10))) g$120$12667)))) (begin (letrec ((g$120$12675 (lambda (g$120$12677) (if (null? g$120$12677) (display '".ss" g$120$12667) (begin (display '"/" g$120$12667) (for-each (lambda (g$120$12679) (if ((lambda (g$120$12681) (if g$120$12681 g$120$12681 ((lambda (g$120$12683) (if g$120$12683 g$120$12683 ((lambda (g$120$12685) (if g$120$12685 g$120$12685 (begin '#f (memv g$120$12679 '(#\- #\. #\_ #\~))))) (char<=? '#\0 g$120$12679 '#\9)))) (char<=? '#\A g$120$12679 '#\Z)))) (char<=? '#\a g$120$12679 '#\z)) (display g$120$12679 g$120$12667) (begin (display '"%" g$120$12667) ((lambda (g$120$12687) (begin (g$120$12671 (quotient g$120$12687 '16)) (g$120$12671 (remainder g$120$12687 '16)))) (char->integer g$120$12679))))) (string->list (symbol->string (car g$120$12677)))) (g$120$12675 (cdr g$120$12677))))))) (g$120$12675 g$120$12665)) (g$120$12668)))) '#f))))) (set! g$120$12511 (g$120$12318 (lambda (g$120$12689) ((lambda (g$120$12691) (letrec ((g$120$12693 (lambda (g$120$12695) (if (pair? g$120$12695) (begin '#f ((lambda (g$120$12697) (if (file-exists? g$120$12697) g$120$12697 (g$120$12693 (cdr g$120$12695)))) (string-append (car g$120$12695) g$120$12691))) '#f)))) (g$120$12693 (g$120$12507)))) (g$120$12509 g$120$12689))) (lambda (g$120$12699) (if (procedure? g$120$12699) g$120$12699 (error 'file-locator '"not a procedure" g$120$12699))))) (set! g$120$12513 (g$120$12318 (lambda (g$120$12701) ((lambda (g$120$12703) (if (string? g$120$12703) (begin '#f (with-input-from-file g$120$12703 read)) '#f)) ((g$120$12511) g$120$12701))) (lambda (g$120$12705) (if (procedure? g$120$12705) g$120$12705 (error 'library-locator '"not a procedure" g$120$12705))))) (set! g$120$12515 (g$120$12318 (lambda (g$120$12707) (error 'library-expander '"not initialized")) (lambda (g$120$12709) (if (procedure? g$120$12709) g$120$12709 (error 'library-expander '"not a procedure" g$120$12709))))) (set! g$120$12517 (g$120$12318 '())) (set! g$120$12519 (lambda (g$120$12711) (begin (if (member g$120$12711 (g$120$12517)) (error '#f '"circular attempt to import library was detected" g$120$12711) (void)) ((lambda (g$120$12715 g$120$12716) ((lambda (g$120$12719) (dynamic-wind g$120$12719 (lambda () ((lambda (g$120$12721) (begin (if g$120$12721 (void) (error '#f '"cannot find library" g$120$12711)) ((g$120$12515) g$120$12721) ((lambda (g$120$12723) (if g$120$12723 g$120$12723 (begin '#f (error '#f '"handling external library did not yield the currect library" g$120$12711)))) (g$120$12505 (lambda (g$120$12725) (equal? (g$120$12461 g$120$12725) g$120$12711)))))) ((g$120$12513) g$120$12711))) g$120$12719)) (lambda () ((lambda (g$120$12727) (begin (g$120$12715 g$120$12716) (set! g$120$12716 g$120$12727))) (g$120$12715))))) g$120$12517 (cons g$120$12711 (g$120$12517)))))) (set! g$120$12521 (lambda (g$120$12729) ((lambda (g$120$12731) (if g$120$12731 g$120$12731 (begin '#f (g$120$12519 g$120$12729)))) (g$120$12505 (lambda (g$120$12733) (equal? (g$120$12461 g$120$12733) g$120$12729)))))) (set! g$120$12523 (lambda (g$120$12735) (if (g$120$12505 (lambda (g$120$12737) (equal? (g$120$12461 g$120$12737) g$120$12735))) (begin '#f '#t) '#f))) (set! g$120$12525 (lambda (g$120$12739) ((lambda (g$120$12741) ((lambda (g$120$12743) (if g$120$12743 g$120$12743 (begin '#f (error '#f '"cannot find library with required spec" g$120$12739)))) (g$120$12505 (lambda (g$120$12745) (eq? g$120$12741 (g$120$12459 g$120$12745)))))) (car g$120$12739)))) (set! g$120$12527 (make-eq-hashtable)) (set! g$120$12529 (lambda (g$120$12747) (begin ((lambda (g$120$12749) (for-each (lambda (g$120$12751) ((lambda (g$120$12753 g$120$12754) ((lambda (g$120$12757) (hashtable-set! g$120$12527 g$120$12753 g$120$12757)) ((lambda (g$120$12759) (if (memv g$120$12759 '(global)) (cons 'global (cons g$120$12747 (cdr g$120$12754))) (if (memv g$120$12759 '(global-macro)) (cons 'global-macro (cons g$120$12747 (cdr g$120$12754))) (if (memv g$120$12759 '(global-macro!)) (cons 'global-macro! (cons g$120$12747 (cdr g$120$12754))) g$120$12754)))) (car g$120$12754)))) (car g$120$12751) (cdr g$120$12751))) g$120$12749)) (g$120$12473 g$120$12747)) ((g$120$12452) g$120$12747)))) (set! g$120$12531 (lambda (g$120$12760 g$120$12761 g$120$12762 g$120$12763 g$120$12764 g$120$12765 g$120$12766 g$120$12767 g$120$12768 g$120$12769 g$120$12770) ((lambda (g$120$12782 g$120$12783 g$120$12784) (begin (if (if (symbol? g$120$12760) (if (list? g$120$12761) (begin '#f (list? g$120$12762)) '#f) '#f) (void) (error 'install-library '"invalid spec with id/name/ver" g$120$12760 g$120$12761 g$120$12762)) (if (g$120$12523 g$120$12761) (error 'install-library '"library is already installed" g$120$12761) (void)) ((lambda (g$120$12788) (g$120$12529 g$120$12788)) (g$120$12455 g$120$12760 g$120$12761 g$120$12762 g$120$12782 g$120$12783 g$120$12784 g$120$12766 g$120$12767 g$120$12768 g$120$12769 g$120$12770)))) (map g$120$12525 g$120$12763) (map g$120$12525 g$120$12764) (map g$120$12525 g$120$12765)))) (set! g$120$12533 (lambda (g$120$12790 g$120$12791 g$120$12792) (g$120$12493 g$120$12790 (cons (cons g$120$12791 g$120$12792) (g$120$12471 g$120$12790))))) (set! g$120$12535 (lambda (g$120$12796 g$120$12797 g$120$12798) (begin (g$120$12495 g$120$12796 (cons (cons g$120$12797 g$120$12798) (g$120$12473 g$120$12796))) (hashtable-set! g$120$12527 g$120$12797 g$120$12798)))) (set! g$120$12537 (lambda (g$120$12802) (hashtable-ref g$120$12527 g$120$12802 '#f))) (set! g$120$12539 (lambda (g$120$12804) ((lambda (g$120$12806) (if (procedure? g$120$12806) (begin (g$120$12499 g$120$12804 (lambda () (error 'invoke '"circularity detected" g$120$12804))) (for-each g$120$12539 (g$120$12469 g$120$12804)) (g$120$12499 g$120$12804 (lambda () (error 'invoke '"first invoke did not return" g$120$12804))) (g$120$12806) (g$120$12499 g$120$12804 '#t)) (void))) (g$120$12477 g$120$12804)))) (set! g$120$12541 (lambda (g$120$12808) ((lambda (g$120$12810) (if (procedure? g$120$12810) (begin (g$120$12497 g$120$12808 (lambda () (error 'visit '"circularity detected" g$120$12808))) (for-each g$120$12539 (g$120$12467 g$120$12808)) (g$120$12497 g$120$12808 (lambda () (error 'invoke '"first visit did not return" g$120$12808))) (g$120$12810) (g$120$12497 g$120$12808 '#t)) (void))) (g$120$12475 g$120$12808)))) (set! g$120$12543 (lambda (g$120$12812) (g$120$12539 (g$120$12525 g$120$12812)))) (set! g$120$12545 (lambda g$120$12822 ((lambda (g$120$12823) (if (= g$120$12823 '1) (apply (lambda (g$120$12814) (letrec ((g$120$12816 (lambda (g$120$12818) (if (null? g$120$12818) '() (if ((lambda (g$120$12820) (if g$120$12820 g$120$12820 (begin '#f (g$120$12479 (car g$120$12818))))) g$120$12814) (cons (car g$120$12818) (g$120$12816 (cdr g$120$12818))) (g$120$12816 (cdr g$120$12818))))))) (g$120$12816 ((g$120$12452))))) g$120$12822) (if (= g$120$12823 '0) (apply (lambda () (g$120$12545 '#f)) g$120$12822) (error 'apply '"invalid arg count")))) (length g$120$12822)))) (set! g$120$12547 (lambda (g$120$12824) (begin (if (g$120$12457 g$120$12824) (void) (error 'library-spec '"not a library" g$120$12824)) (list (g$120$12459 g$120$12824) (g$120$12461 g$120$12824) (g$120$12463 g$120$12824))))) (begin (set! g$120$12826 g$120$12547) (set! g$120$12827 g$120$12545) (set! g$120$12828 g$120$12543) (set! g$120$12829 g$120$12541) (set! g$120$12830 g$120$12539) (set! g$120$12831 g$120$12537) (set! g$120$12832 g$120$12535) (set! g$120$12833 g$120$12533) (set! g$120$12834 g$120$12531) (set! g$120$12835 g$120$12529) (set! g$120$12836 g$120$12527) (set! g$120$12837 g$120$12525) (set! g$120$12838 g$120$12523) (set! g$120$12839 g$120$12521) (set! g$120$12840 g$120$12519) (set! g$120$12841 g$120$12517) (set! g$120$12842 g$120$12515) (set! g$120$12843 g$120$12513) (set! g$120$12844 g$120$12511) (set! g$120$12845 g$120$12509) (set! g$120$12846 g$120$12507) (set! g$120$12847 g$120$12505) (set! g$120$12848 g$120$12503) (set! g$120$12849 g$120$12501) (set! g$120$12850 g$120$12499) (set! g$120$12851 g$120$12497) (set! g$120$12852 g$120$12495) (set! g$120$12853 g$120$12493) (set! g$120$12854 g$120$12491) (set! g$120$12855 g$120$12489) (set! g$120$12856 g$120$12487) (set! g$120$12857 g$120$12485) (set! g$120$12858 g$120$12483) (set! g$120$12859 g$120$12481) (set! g$120$12860 g$120$12479) (set! g$120$12861 g$120$12477) (set! g$120$12862 g$120$12475) (set! g$120$12863 g$120$12473) (set! g$120$12864 g$120$12471) (set! g$120$12865 g$120$12469) (set! g$120$12866 g$120$12467) (set! g$120$12867 g$120$12465) (set! g$120$12868 g$120$12463) (set! g$120$12869 g$120$12461) (set! g$120$12870 g$120$12459) (set! g$120$12871 g$120$12457) (set! g$120$12872 g$120$12455) (set! g$120$12873 g$120$12452) (set! g$120$12874 g$120$12450)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$120$13122 '#f) (define g$120$13114 '#f) (define g$120$13113 '#f) (define g$120$13112 '#f) (define g$120$13108 '#f) (define g$120$13107 '#f) (define g$120$13106 '#f) (define g$120$13105 '#f) ((lambda (g$120$12876 g$120$12953 g$120$12955 g$120$12957 g$120$12995 g$120$12997 g$120$12999 g$120$13001) (begin (set! g$120$12876 (lambda (g$120$13003) (cons 'define (cons g$120$13003 '('#f))))) (set! g$120$12953 (lambda (g$120$13005 g$120$13006 g$120$13007) (list 'lambda g$120$13006 g$120$13007))) (set! g$120$12955 (lambda (g$120$13011 g$120$13012 g$120$13013) ((lambda (g$120$13017 g$120$13019 g$120$13021 g$120$13023) (begin (set! g$120$13017 (lambda (g$120$13065) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! g$120$13019 (lambda (g$120$13049 g$120$13050 g$120$13051) (call-with-values (lambda () (letrec ((g$120$13055 (lambda (g$120$13057 g$120$13058) (if (pair? g$120$13057) (g$120$13055 (cdr g$120$13057) (+ g$120$13058 '1)) (if (null? g$120$13057) (values g$120$13058 '=) (values g$120$13058 '>=)))))) (g$120$13055 g$120$13051 '0))) (lambda (g$120$13061 g$120$13062) (list (list 'primitive g$120$13062) g$120$13050 (list 'quote g$120$13061)))))) (set! g$120$13021 (lambda (g$120$13041 g$120$13042 g$120$13043 g$120$13044) (list '(primitive apply) (g$120$12953 g$120$13041 g$120$13043 g$120$13044) g$120$13042))) (set! g$120$13023 (lambda (g$120$13025 g$120$13026 g$120$13027) ((lambda (g$120$13031 g$120$13032) (list 'lambda g$120$13031 (g$120$12957 g$120$13025 (list g$120$13032) (list (list '(primitive length) g$120$13031)) (letrec ((g$120$13035 (lambda (g$120$13037 g$120$13038) (if (null? g$120$13037) (g$120$13017 g$120$13025) (list 'if (g$120$13019 g$120$13025 g$120$13032 (car g$120$13037)) (g$120$13021 g$120$13025 g$120$13031 (car g$120$13037) (car g$120$13038)) (g$120$13035 (cdr g$120$13037) (cdr g$120$13038))))))) (g$120$13035 g$120$13012 g$120$13027))))) (gensym) (gensym)))) (if (= (length g$120$13013) '1) (g$120$12953 g$120$13011 (car g$120$13012) (car g$120$13013)) (g$120$13023 g$120$13011 g$120$13012 g$120$13013)))) '#f '#f '#f '#f))) (set! g$120$12957 (lambda (g$120$13067 g$120$13068 g$120$13069 g$120$13070) (cons (g$120$12953 g$120$13067 g$120$13068 g$120$13070) g$120$13069))) (set! g$120$12995 (lambda (g$120$13075 g$120$13076) (letrec ((g$120$13079 (lambda (g$120$13081) (if (null? (cdr g$120$13081)) (car g$120$13081) (if (equal? (car g$120$13081) (g$120$12997)) (g$120$13079 (cdr g$120$13081)) (cons 'begin g$120$13081)))))) (g$120$13079 g$120$13076)))) (set! g$120$12997 (lambda () '((primitive void)))) (set! g$120$12999 (lambda (g$120$13083 g$120$13084 g$120$13085 g$120$13086) (if (null? g$120$13084) g$120$13086 (list 'letrec (map list g$120$13084 g$120$13085) g$120$13086)))) (set! g$120$13001 (lambda (g$120$13091 g$120$13092 g$120$13093 g$120$13094) (if (null? g$120$13092) g$120$13094 (g$120$12957 g$120$13091 g$120$13092 (map (lambda (g$120$13099) (list 'quote '#f)) g$120$13092) (g$120$12995 g$120$13091 (append (map (lambda (g$120$13101 g$120$13102) (list 'set! g$120$13101 g$120$13102)) g$120$13092 g$120$13093) (list g$120$13094))))))) (begin (set! g$120$13105 g$120$13001) (set! g$120$13106 g$120$12999) (set! g$120$13107 g$120$12997) (set! g$120$13108 g$120$12995) (set! g$120$13112 g$120$12957) (set! g$120$13113 g$120$12955) (set! g$120$13114 g$120$12953) (set! g$120$13122 g$120$12876)))) '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$120$23359 '#f) (define g$120$23358 '#f) (define g$120$23356 '#f) (define g$120$23355 '#f) (define g$120$23354 '#f) (define g$120$23353 '#f) (define g$120$23352 '#f) (define g$120$23351 '#f) (define g$120$23350 '#f) (define g$120$23349 '#f) (define g$120$23348 '#f) (define g$120$23347 '#f) (define g$120$23346 '#f) (define g$120$23345 '#f) (define g$120$23344 '#f) (define g$120$23343 '#f) (define g$120$23342 '#f) (define g$120$23341 '#f) (define g$120$23340 '#f) (define g$120$23339 '#f) (define g$120$23338 '#f) (define g$120$23337 '#f) (define g$120$23336 '#f) (define g$120$23335 '#f) (define g$120$23334 '#f) (define g$120$23333 '#f) (define g$120$23332 '#f) (define g$120$23331 '#f) (define g$120$23330 '#f) (define g$120$23329 '#f) (define g$120$23328 '#f) (define g$120$23327 '#f) (define g$120$23326 '#f) (define g$120$23325 '#f) (define g$120$23324 '#f) (define g$120$23323 '#f) (define g$120$23322 '#f) (define g$120$23321 '#f) (define g$120$23320 '#f) (define g$120$23319 '#f) (define g$120$23318 '#f) (define g$120$23317 '#f) (define g$120$23316 '#f) (define g$120$23315 '#f) (define g$120$23314 '#f) (define g$120$23313 '#f) (define g$120$23312 '#f) (define g$120$23311 '#f) (define g$120$23310 '#f) (define g$120$23309 '#f) (define g$120$23308 '#f) (define g$120$23307 '#f) (define g$120$23306 '#f) (define g$120$23305 '#f) (define g$120$23304 '#f) (define g$120$23303 '#f) (define g$120$23302 '#f) (define g$120$23301 '#f) (define g$120$23300 '#f) (define g$120$23299 '#f) (define g$120$23298 '#f) (define g$120$23297 '#f) (define g$120$23296 '#f) (define g$120$23295 '#f) (define g$120$23294 '#f) (define g$120$23292 '#f) (define g$120$23291 '#f) (define g$120$23290 '#f) (define g$120$23288 '#f) (define g$120$23287 '#f) (define g$120$23286 '#f) (define g$120$23285 '#f) (define g$120$23284 '#f) (define g$120$23283 '#f) (define g$120$23282 '#f) (define g$120$23281 '#f) (define g$120$23280 '#f) (define g$120$23279 '#f) (define g$120$23278 '#f) (define g$120$23277 '#f) (define g$120$23276 '#f) (define g$120$23275 '#f) (define g$120$23274 '#f) (define g$120$23273 '#f) (define g$120$23272 '#f) (define g$120$23271 '#f) (define g$120$23270 '#f) (define g$120$23269 '#f) (define g$120$23268 '#f) (define g$120$23267 '#f) (define g$120$23266 '#f) (define g$120$23265 '#f) (define g$120$23264 '#f) (define g$120$23263 '#f) (define g$120$23262 '#f) (define g$120$23261 '#f) (define g$120$23260 '#f) (define g$120$23259 '#f) (define g$120$23258 '#f) (define g$120$23257 '#f) (define g$120$23256 '#f) (define g$120$23255 '#f) (define g$120$23254 '#f) (define g$120$23253 '#f) (define g$120$23252 '#f) (define g$120$23251 '#f) (define g$120$23250 '#f) (define g$120$23249 '#f) (define g$120$23248 '#f) (define g$120$23247 '#f) (define g$120$23246 '#f) (define g$120$23245 '#f) (define g$120$23244 '#f) (define g$120$23243 '#f) (define g$120$23242 '#f) (define g$120$23241 '#f) (define g$120$23240 '#f) (define g$120$23239 '#f) (define g$120$23238 '#f) (define g$120$23237 '#f) (define g$120$23236 '#f) (define g$120$23235 '#f) (define g$120$23234 '#f) (define g$120$23233 '#f) (define g$120$23232 '#f) (define g$120$23231 '#f) (define g$120$23230 '#f) (define g$120$23229 '#f) (define g$120$23228 '#f) (define g$120$23227 '#f) (define g$120$23226 '#f) (define g$120$23225 '#f) (define g$120$23224 '#f) (define g$120$23223 '#f) (define g$120$23222 '#f) (define g$120$23221 '#f) (define g$120$23220 '#f) (define g$120$23219 '#f) (define g$120$23218 '#f) (define g$120$23217 '#f) (define g$120$23216 '#f) (define g$120$23215 '#f) (define g$120$23214 '#f) (define g$120$23213 '#f) (define g$120$23212 '#f) (define g$120$23211 '#f) (define g$120$23210 '#f) (define g$120$23209 '#f) (define g$120$23208 '#f) (define g$120$23207 '#f) (define g$120$23206 '#f) (define g$120$23205 '#f) (define g$120$23204 '#f) (define g$120$23203 '#f) (define g$120$23202 '#f) (define g$120$23201 '#f) (define g$120$23200 '#f) (define g$120$23199 '#f) (define g$120$23198 '#f) (define g$120$23197 '#f) (define g$120$23196 '#f) (define g$120$23195 '#f) (define g$120$23194 '#f) (define g$120$23193 '#f) (define g$120$23192 '#f) (define g$120$23191 '#f) (define g$120$23190 '#f) (define g$120$23189 '#f) (define g$120$23188 '#f) (define g$120$23187 '#f) (define g$120$23186 '#f) (define g$120$23185 '#f) (define g$120$23184 '#f) (define g$120$23183 '#f) (define g$120$23182 '#f) (define g$120$23181 '#f) (define g$120$23180 '#f) (define g$120$23179 '#f) (define g$120$23178 '#f) (define g$120$23177 '#f) (define g$120$23176 '#f) (define g$120$23175 '#f) (define g$120$23174 '#f) (define g$120$23173 '#f) (define g$120$23172 '#f) (define g$120$23171 '#f) (define g$120$23170 '#f) (define g$120$23169 '#f) (define g$120$23168 '#f)
(lambda (g$120$13124 g$120$13126 g$120$13131 g$120$13133 g$120$13135 g$120$13137 g$120$13139 g$120$13142 g$120$13144 g$120$13146 g$120$13148 g$120$13150 g$120$13152 g$120$13154 g$120$13156 g$120$13158 g$120$13160 g$120$13162 g$120$13164 g$120$13166 g$120$13168 g$120$13170 g$120$13172 g$120$13175 g$120$13177 g$120$13179 g$120$13181 g$120$13183 g$120$13185 g$120$13187 g$120$13189 g$120$13191 g$120$13193 g$120$13195 g$120$13197 g$120$13199 g$120$13201 g$120$13203 g$120$13205 g$120$13207 g$120$13209 g$120$13211 g$120$13213 g$120$13215 g$120$13217 g$120$13219 g$120$13221 g$120$13223 g$120$13225 g$120$13227 g$120$13229 g$120$13231 g$120$13233 g$120$13235 g$120$13237 g$120$13239 g$120$13241 g$120$13243 g$120$13245 g$120$13247 g$120$13249 g$120$13251 g$120$13253 g$120$13255 g$120$13257 g$120$13271 g$120$13273 g$120$13275 g$120$13474 g$120$13476 g$120$13478 g$120$13480 g$120$13482 g$120$13484 g$120$13486 g$120$13488 g$120$13490 g$120$13492 g$120$13494 g$120$13496 g$120$13498 g$120$13500 g$120$13502 g$120$13504 g$120$13506 g$120$13508 g$120$13510 g$120$13512 g$120$13514 g$120$13516 g$120$13518 g$120$13520 g$120$13522 g$120$13524 g$120$13526 g$120$13528 g$120$13530 g$120$13532 g$120$13534 g$120$13536 g$120$13538 g$120$13540 g$120$13542 g$120$13544 g$120$13546 g$120$13548 g$120$13550 g$120$13552 g$120$13554 g$120$13556 g$120$13558 g$120$13560 g$120$13562 g$120$13564 g$120$13566 g$120$13568 g$120$13570 g$120$13572 g$120$13574 g$120$13576 g$120$13578 g$120$13580 g$120$13582 g$120$13584 g$120$13586 g$120$13588 g$120$13590 g$120$13592 g$120$13594 g$120$13596 g$120$13598 g$120$13600 g$120$13602 g$120$13604 g$120$13606 g$120$13608 g$120$13610 g$120$13612 g$120$13614 g$120$13616 g$120$13618 g$120$13620 g$120$13622 g$120$13624 g$120$13626 g$120$13628 g$120$13630 g$120$13632 g$120$13634 g$120$13636 g$120$13638 g$120$13640 g$120$13642 g$120$13644 g$120$13646 g$120$13648 g$120$13650 g$120$13652 g$120$13654 g$120$13656 g$120$13659 g$120$13661 g$120$13663 g$120$13665 g$120$13667 g$120$13669 g$120$13671 g$120$13673 g$120$13675 g$120$13677 g$120$13679 g$120$13681 g$120$13683 g$120$13685 g$120$13687 g$120$13689 g$120$13691 g$120$13693 g$120$13695 g$120$13697 g$120$13699 g$120$13701 g$120$13703 g$120$13705 g$120$13707 g$120$13709 g$120$13711 g$120$13713 g$120$13715)
 (begin (set! g$120$13124 (lambda (g$120$13717 g$120$13718) (if (memq g$120$13717 g$120$13718) g$120$13718 (cons g$120$13717 g$120$13718)))) (set! g$120$13126 (lambda (g$120$13721 g$120$13722) (if (null? g$120$13721) g$120$13722 (if (memq (car g$120$13721) g$120$13722) (g$120$13126 (cdr g$120$13721) g$120$13722) (cons (car g$120$13721) (g$120$13126 (cdr g$120$13721) g$120$13722)))))) (set! g$120$13131 '(top)) (set! g$120$13133 (lambda (g$120$13725) (memq 'top g$120$13725))) (set! g$120$13135 (lambda (g$120$13727) (if (symbol? g$120$13727) (gensym g$120$13727) (if (g$120$13177 g$120$13727) (g$120$13135 (g$120$13227 g$120$13727)) (error 'gen-lexical '"BUG: invalid arg" g$120$13727))))) (set! g$120$13137 (lambda (g$120$13729) (g$120$13135 g$120$13729))) (set! g$120$13139 (lambda (g$120$13731) (gensym))) (set! g$120$13142 (lambda (g$120$13733 g$120$13734 g$120$13735 g$120$13736) (vector 'g$120$13141 g$120$13733 g$120$13734 g$120$13735 g$120$13736))) (set! g$120$13144 (lambda (g$120$13741) (if (vector? g$120$13741) (if (= (vector-length g$120$13741) (+ '1 (length '(sym* mark** label* sealed/freq)))) (begin '#f (eq? (vector-ref g$120$13741 '0) 'g$120$13141)) '#f) '#f))) (set! g$120$13146 (lambda (g$120$13743) (if (g$120$13144 g$120$13743) (vector-ref g$120$13743 '1) (error 'rib-sym* '"~s is not of type ~s" g$120$13743 'rib)))) (set! g$120$13148 (lambda (g$120$13745) (if (g$120$13144 g$120$13745) (vector-ref g$120$13745 '2) (error 'rib-mark** '"~s is not of type ~s" g$120$13745 'rib)))) (set! g$120$13150 (lambda (g$120$13747) (if (g$120$13144 g$120$13747) (vector-ref g$120$13747 '3) (error 'rib-label* '"~s is not of type ~s" g$120$13747 'rib)))) (set! g$120$13152 (lambda (g$120$13749) (if (g$120$13144 g$120$13749) (vector-ref g$120$13749 '4) (error 'rib-sealed/freq '"~s is not of type ~s" g$120$13749 'rib)))) (set! g$120$13154 (lambda (g$120$13751 g$120$13752) (if (g$120$13144 g$120$13751) (vector-set! g$120$13751 '1 g$120$13752) (error 'set-rib-sym*! '"~s is not of type ~s" g$120$13751 'rib)))) (set! g$120$13156 (lambda (g$120$13755 g$120$13756) (if (g$120$13144 g$120$13755) (vector-set! g$120$13755 '2 g$120$13756) (error 'set-rib-mark**! '"~s is not of type ~s" g$120$13755 'rib)))) (set! g$120$13158 (lambda (g$120$13759 g$120$13760) (if (g$120$13144 g$120$13759) (vector-set! g$120$13759 '3 g$120$13760) (error 'set-rib-label*! '"~s is not of type ~s" g$120$13759 'rib)))) (set! g$120$13160 (lambda (g$120$13763 g$120$13764) (if (g$120$13144 g$120$13763) (vector-set! g$120$13763 '4 g$120$13764) (error 'set-rib-sealed/freq! '"~s is not of type ~s" g$120$13763 'rib)))) (set! g$120$13162 (lambda () (g$120$13142 '() '() '() '#f))) (set! g$120$13164 (lambda (g$120$13767 g$120$13768 g$120$13769) ((lambda (g$120$13773) (begin (set! g$120$13773 (lambda (g$120$13775 g$120$13776 g$120$13777 g$120$13778) (if (pair? g$120$13777) (begin '#f ((lambda (g$120$13783) (if g$120$13783 g$120$13783 (begin '#f (g$120$13773 g$120$13775 g$120$13776 (cdr g$120$13777) (cdr g$120$13778))))) (if (eq? g$120$13775 (car g$120$13777)) (begin '#f (g$120$13229 g$120$13776 (car g$120$13778))) '#f))) '#f))) (begin (if (g$120$13152 g$120$13767) (error 'extend-rib! '"rib is sealed" g$120$13767) (void)) ((lambda (g$120$13785 g$120$13786) ((lambda (g$120$13789) (begin (if (if (memq g$120$13785 (g$120$13146 g$120$13767)) (begin '#f (g$120$13773 g$120$13785 g$120$13786 g$120$13789 (g$120$13148 g$120$13767))) '#f) (error 'expander '"cannot redefine" (g$120$13243 g$120$13768 '())) (void)) (g$120$13154 g$120$13767 (cons g$120$13785 g$120$13789)) (g$120$13156 g$120$13767 (cons g$120$13786 (g$120$13148 g$120$13767))) (g$120$13158 g$120$13767 (cons g$120$13769 (g$120$13150 g$120$13767))))) (g$120$13146 g$120$13767))) (g$120$13227 g$120$13768) (g$120$13181 g$120$13768))))) '#f))) (set! g$120$13166 (lambda (g$120$13791) ((lambda (g$120$13793) (if (null? g$120$13793) (void) ((lambda (g$120$13795) (begin (g$120$13154 g$120$13791 g$120$13795) (g$120$13156 g$120$13791 (list->vector (g$120$13148 g$120$13791))) (g$120$13158 g$120$13791 (list->vector (g$120$13150 g$120$13791))) (g$120$13160 g$120$13791 (make-vector (vector-length g$120$13795) '0)))) (list->vector g$120$13793)))) (g$120$13146 g$120$13791)))) (set! g$120$13168 (lambda (g$120$13797) (if (g$120$13152 g$120$13797) (begin (g$120$13160 g$120$13797 '#f) (g$120$13154 g$120$13797 (vector->list (g$120$13146 g$120$13797))) (g$120$13156 g$120$13797 (vector->list (g$120$13148 g$120$13797))) (g$120$13158 g$120$13797 (vector->list (g$120$13150 g$120$13797)))) (void)))) (set! g$120$13170 (lambda (g$120$13799 g$120$13800) ((lambda (g$120$13803) ((lambda (g$120$13805) ((lambda (g$120$13807) (begin (vector-set! g$120$13803 g$120$13807 (+ g$120$13805 '1)) (if (= g$120$13807 g$120$13800) (void) ((lambda (g$120$13809 g$120$13810 g$120$13811) (begin ((lambda (g$120$13815) (begin (vector-set! g$120$13809 g$120$13800 (vector-ref g$120$13809 g$120$13807)) (vector-set! g$120$13809 g$120$13807 g$120$13815))) (vector-ref g$120$13809 g$120$13800)) ((lambda (g$120$13817) (begin (vector-set! g$120$13810 g$120$13800 (vector-ref g$120$13810 g$120$13807)) (vector-set! g$120$13810 g$120$13807 g$120$13817))) (vector-ref g$120$13810 g$120$13800)) ((lambda (g$120$13819) (begin (vector-set! g$120$13811 g$120$13800 (vector-ref g$120$13811 g$120$13807)) (vector-set! g$120$13811 g$120$13807 g$120$13819))) (vector-ref g$120$13811 g$120$13800)))) (g$120$13146 g$120$13799) (g$120$13148 g$120$13799) (g$120$13150 g$120$13799))))) (letrec ((g$120$13821 (lambda (g$120$13823) (if (zero? g$120$13823) '0 ((lambda (g$120$13825) (if (= g$120$13805 (vector-ref g$120$13803 g$120$13825)) (g$120$13821 g$120$13825) g$120$13823)) (- g$120$13823 '1)))))) (g$120$13821 g$120$13800)))) (vector-ref g$120$13803 g$120$13800))) (g$120$13152 g$120$13799)))) (set! g$120$13172 (lambda (g$120$13827 g$120$13828) (g$120$13142 (map g$120$13227 g$120$13827) (map g$120$13181 g$120$13827) g$120$13828 '#f))) (set! g$120$13175 (lambda (g$120$13831 g$120$13832 g$120$13833) (vector 'g$120$13174 g$120$13831 g$120$13832 g$120$13833))) (set! g$120$13177 (lambda (g$120$13837) (if (vector? g$120$13837) (if (= (vector-length g$120$13837) (+ '1 (length '(expr mark* subst*)))) (begin '#f (eq? (vector-ref g$120$13837 '0) 'g$120$13174)) '#f) '#f))) (set! g$120$13179 (lambda (g$120$13839) (if (g$120$13177 g$120$13839) (vector-ref g$120$13839 '1) (error 'stx-expr '"~s is not of type ~s" g$120$13839 'stx)))) (set! g$120$13181 (lambda (g$120$13841) (if (g$120$13177 g$120$13841) (vector-ref g$120$13841 '2) (error 'stx-mark* '"~s is not of type ~s" g$120$13841 'stx)))) (set! g$120$13183 (lambda (g$120$13843) (if (g$120$13177 g$120$13843) (vector-ref g$120$13843 '3) (error 'stx-subst* '"~s is not of type ~s" g$120$13843 'stx)))) (set! g$120$13185 (lambda (g$120$13845 g$120$13846) (if (g$120$13177 g$120$13845) (vector-set! g$120$13845 '1 g$120$13846) (error 'set-stx-expr! '"~s is not of type ~s" g$120$13845 'stx)))) (set! g$120$13187 (lambda (g$120$13849 g$120$13850) (if (g$120$13177 g$120$13849) (vector-set! g$120$13849 '2 g$120$13850) (error 'set-stx-mark*! '"~s is not of type ~s" g$120$13849 'stx)))) (set! g$120$13189 (lambda (g$120$13853 g$120$13854) (if (g$120$13177 g$120$13853) (vector-set! g$120$13853 '3 g$120$13854) (error 'set-stx-subst*! '"~s is not of type ~s" g$120$13853 'stx)))) (set! g$120$13191 (lambda (g$120$13857 g$120$13858) (g$120$13175 g$120$13858 (g$120$13181 g$120$13857) (g$120$13183 g$120$13857)))) (set! g$120$13193 (lambda () (string '#\m))) (set! g$120$13195 '#f) (set! g$120$13197 not) (set! g$120$13199 (lambda (g$120$13861 g$120$13862 g$120$13863) ((lambda (g$120$13867) (begin (set! g$120$13867 (lambda (g$120$13869 g$120$13870) (letrec ((g$120$13873 (lambda (g$120$13875 g$120$13876) (if (null? g$120$13876) (cdr g$120$13870) (cons g$120$13875 (g$120$13873 (car g$120$13876) (cdr g$120$13876))))))) (g$120$13873 (car g$120$13869) (cdr g$120$13869))))) ((lambda (g$120$13879 g$120$13880) (if (if (not (null? g$120$13861)) (if (not (null? g$120$13879)) (begin '#f (g$120$13197 (car g$120$13879))) '#f) '#f) (values (g$120$13867 g$120$13861 g$120$13879) (g$120$13867 g$120$13862 g$120$13880)) (values (append g$120$13861 g$120$13879) (append g$120$13862 g$120$13880)))) (g$120$13181 g$120$13863) (g$120$13183 g$120$13863)))) '#f))) (set! g$120$13201 (lambda (g$120$13883 g$120$13884 g$120$13885) (if (g$120$13177 g$120$13883) (call-with-values (lambda () (g$120$13199 g$120$13884 g$120$13885 g$120$13883)) (lambda (g$120$13889 g$120$13890) (g$120$13175 (g$120$13179 g$120$13883) g$120$13889 g$120$13890))) (g$120$13175 g$120$13883 g$120$13884 g$120$13885)))) (set! g$120$13203 (lambda (g$120$13893 g$120$13894) (g$120$13201 g$120$13894 (list g$120$13893) '(shift)))) (set! g$120$13205 (lambda (g$120$13897 g$120$13898) (g$120$13201 g$120$13898 '() (list g$120$13897)))) (set! g$120$13207 (lambda (g$120$13901 g$120$13902) (if (g$120$13177 g$120$13901) (g$120$13207 (g$120$13179 g$120$13901) g$120$13902) (g$120$13902 g$120$13901)))) (set! g$120$13209 (lambda (g$120$13905) (if (g$120$13177 g$120$13905) ((lambda (g$120$13907 g$120$13908 g$120$13909) (map (lambda (g$120$13913) (g$120$13201 g$120$13913 g$120$13908 g$120$13909)) g$120$13907)) (g$120$13209 (g$120$13179 g$120$13905)) (g$120$13181 g$120$13905) (g$120$13183 g$120$13905)) (if (vector? g$120$13905) (vector->list g$120$13905) (error 'syntax-vector->list '"not a syntax vector" g$120$13905))))) (set! g$120$13211 (lambda (g$120$13915) (g$120$13207 g$120$13915 pair?))) (set! g$120$13213 (lambda (g$120$13917) (g$120$13207 g$120$13917 vector?))) (set! g$120$13215 (lambda (g$120$13919) (g$120$13207 g$120$13919 null?))) (set! g$120$13217 (lambda (g$120$13921) ((lambda (g$120$13923) (if g$120$13923 g$120$13923 (begin '#f (if (g$120$13211 g$120$13921) (begin '#f (g$120$13217 (g$120$13223 g$120$13921))) '#f)))) (g$120$13215 g$120$13921)))) (set! g$120$13219 (lambda (g$120$13925) (if (g$120$13177 g$120$13925) (g$120$13201 (g$120$13219 (g$120$13179 g$120$13925)) (g$120$13181 g$120$13925) (g$120$13183 g$120$13925)) (if (pair? g$120$13925) (car g$120$13925) (error 'syntax-car '"not a pair" g$120$13925))))) (set! g$120$13221 (lambda (g$120$13927) (if (g$120$13211 g$120$13927) (cons (g$120$13219 g$120$13927) (g$120$13221 (g$120$13223 g$120$13927))) (if (g$120$13215 g$120$13927) '() (error 'syntax->list '"invalid argument" g$120$13927))))) (set! g$120$13223 (lambda (g$120$13929) (if (g$120$13177 g$120$13929) (g$120$13201 (g$120$13223 (g$120$13179 g$120$13929)) (g$120$13181 g$120$13929) (g$120$13183 g$120$13929)) (if (pair? g$120$13929) (cdr g$120$13929) (error 'syntax-cdr '"not a pair" g$120$13929))))) (set! g$120$13225 (lambda (g$120$13931) (g$120$13207 g$120$13931 symbol?))) (set! g$120$13227 (lambda (g$120$13933) (if (g$120$13177 g$120$13933) (g$120$13227 (g$120$13179 g$120$13933)) (if (symbol? g$120$13933) g$120$13933 (error 'id->sym '"not an id" g$120$13933))))) (set! g$120$13229 (lambda (g$120$13935 g$120$13936) ((lambda (g$120$13939) (if g$120$13939 g$120$13939 (begin '#f (if (pair? g$120$13935) (if (pair? g$120$13936) (if (eq? (car g$120$13935) (car g$120$13936)) (begin '#f (g$120$13229 (cdr g$120$13935) (cdr g$120$13936))) '#f) '#f) '#f)))) (if (null? g$120$13935) (begin '#f (null? g$120$13936)) '#f)))) (set! g$120$13231 (lambda (g$120$13941 g$120$13942) (if (eq? (g$120$13227 g$120$13941) (g$120$13227 g$120$13942)) (begin '#f (g$120$13229 (g$120$13181 g$120$13941) (g$120$13181 g$120$13942))) '#f))) (set! g$120$13233 (lambda (g$120$13945 g$120$13946) ((lambda (g$120$13949 g$120$13950) (if ((lambda (g$120$13953) (if g$120$13953 g$120$13953 (begin '#f g$120$13950))) g$120$13949) (eq? g$120$13949 g$120$13950) (eq? (g$120$13227 g$120$13945) (g$120$13227 g$120$13946)))) (g$120$13247 g$120$13945) (g$120$13247 g$120$13946)))) (set! g$120$13235 (lambda (g$120$13955) (if (for-all g$120$13225 g$120$13955) (begin '#f (g$120$13237 g$120$13955)) '#f))) (set! g$120$13237 (lambda (g$120$13957) ((lambda (g$120$13959) (if g$120$13959 g$120$13959 (begin '#f (if (not (g$120$13239 (car g$120$13957) (cdr g$120$13957))) (begin '#f (g$120$13237 (cdr g$120$13957))) '#f)))) (null? g$120$13957)))) (set! g$120$13239 (lambda (g$120$13961 g$120$13962) (if (pair? g$120$13962) (begin '#f ((lambda (g$120$13965) (if g$120$13965 g$120$13965 (begin '#f (g$120$13239 g$120$13961 (cdr g$120$13962))))) (g$120$13231 g$120$13961 (car g$120$13962)))) '#f))) (set! g$120$13241 (lambda (g$120$13967) ((lambda (g$120$13969) (if g$120$13969 g$120$13969 ((lambda (g$120$13971) (if g$120$13971 g$120$13971 ((lambda (g$120$13973) (if g$120$13973 g$120$13973 (begin '#f (boolean? g$120$13967)))) (char? g$120$13967)))) (string? g$120$13967)))) (number? g$120$13967)))) (set! g$120$13243 (lambda (g$120$13975 g$120$13976) (if (g$120$13133 g$120$13976) g$120$13975 (letrec ((g$120$13979 (lambda (g$120$13981) (if (g$120$13177 g$120$13981) (g$120$13243 (g$120$13179 g$120$13981) (g$120$13181 g$120$13981)) (if (pair? g$120$13981) ((lambda (g$120$13983 g$120$13984) (if (if (eq? g$120$13983 (car g$120$13981)) (begin '#f (eq? g$120$13984 (cdr g$120$13981))) '#f) g$120$13981 (cons g$120$13983 g$120$13984))) (g$120$13979 (car g$120$13981)) (g$120$13979 (cdr g$120$13981))) (if (vector? g$120$13981) ((lambda (g$120$13987) ((lambda (g$120$13989) (if (for-all eq? g$120$13987 g$120$13989) g$120$13981 (list->vector g$120$13989))) (map g$120$13979 g$120$13987))) (vector->list g$120$13981)) g$120$13981)))))) (g$120$13979 g$120$13975))))) (set! g$120$13245 (lambda (g$120$13991) (g$120$13243 g$120$13991 '()))) (set! g$120$13247 (lambda (g$120$13993) ((lambda (g$120$13995) (letrec ((g$120$13997 (lambda (g$120$13999 g$120$14000) (if (null? g$120$13999) (g$120$13713 g$120$13995) (if (eq? (car g$120$13999) 'shift) (g$120$13997 (cdr g$120$13999) (cdr g$120$14000)) ((lambda (g$120$14003) (if (g$120$13152 g$120$14003) ((lambda (g$120$14005) (letrec ((g$120$14007 (lambda (g$120$14009 g$120$14010) (if (= g$120$14009 g$120$14010) (g$120$13997 (cdr g$120$13999) g$120$14000) (if (if (eq? (vector-ref g$120$14005 g$120$14009) g$120$13995) (begin '#f (g$120$13229 g$120$14000 (vector-ref (g$120$13148 g$120$14003) g$120$14009))) '#f) ((lambda (g$120$14013) (begin (g$120$13170 g$120$14003 g$120$14009) g$120$14013)) (vector-ref (g$120$13150 g$120$14003) g$120$14009)) (g$120$14007 (+ g$120$14009 '1) g$120$14010)))))) (g$120$14007 '0 (vector-length g$120$14005)))) (g$120$13146 g$120$14003)) (letrec ((g$120$14015 (lambda (g$120$14017 g$120$14018 g$120$14019) (if (null? g$120$14017) (g$120$13997 (cdr g$120$13999) g$120$14000) (if (if (eq? (car g$120$14017) g$120$13995) (begin '#f (g$120$13229 (car g$120$14018) g$120$14000)) '#f) (car g$120$14019) (g$120$14015 (cdr g$120$14017) (cdr g$120$14018) (cdr g$120$14019))))))) (g$120$14015 (g$120$13146 g$120$14003) (g$120$13148 g$120$14003) (g$120$13150 g$120$14003))))) (car g$120$13999))))))) (g$120$13997 (g$120$13183 g$120$13993) (g$120$13181 g$120$13993)))) (g$120$13227 g$120$13993)))) (set! g$120$13249 (lambda (g$120$14023 g$120$14024) ((lambda (g$120$14027) (if g$120$14027 ((lambda (g$120$14029) (if (if (pair? g$120$14029) (begin '#f (eq? (car g$120$14029) '$core-rtd)) '#f) (cons '$rtd (map g$120$13512 (cdr g$120$14029))) g$120$14029)) g$120$14027) ((lambda (g$120$14031) (if g$120$14031 (cdr g$120$14031) '(displaced-lexical . #f))) (assq g$120$14023 g$120$14024)))) (g$120$12831 g$120$14023)))) (set! g$120$13251 cons) (set! g$120$13253 car) (set! g$120$13255 cdr) (set! g$120$13257 (lambda (g$120$14033 g$120$14034) (if (g$120$13225 g$120$14033) ((lambda (g$120$14037) ((lambda (g$120$14039) ((lambda (g$120$14041) ((lambda (g$120$14043) ((lambda () (begin (if g$120$14039 (void) (error 'expander '"unbound identifier" (g$120$13243 g$120$14033 '()))) ((lambda (g$120$14045) (if (memv g$120$14045 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd)) (values g$120$14043 (g$120$13255 g$120$14041) g$120$14037) (values 'other '#f '#f))) g$120$14043))))) (g$120$13253 g$120$14041))) (g$120$13249 g$120$14039 g$120$14034))) (g$120$13247 g$120$14037))) g$120$14033) (if (g$120$13211 g$120$14033) ((lambda (g$120$14046) (if (g$120$13225 g$120$14046) ((lambda (g$120$14048) ((lambda (g$120$14050) ((lambda (g$120$14052) ((lambda () (begin (if g$120$14048 (void) (error 'expander '"unbound identifier" (g$120$13243 g$120$14033 '()))) ((lambda (g$120$14054) (if (memv g$120$14054 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import $core-rtd)) (values g$120$14052 (g$120$13255 g$120$14050) g$120$14046) (values 'call '#f '#f))) g$120$14052))))) (g$120$13253 g$120$14050))) (g$120$13249 g$120$14048 g$120$14034))) (g$120$13247 g$120$14046)) (values 'call '#f '#f))) (g$120$13219 g$120$14033)) ((lambda (g$120$14055) (if (g$120$13241 g$120$14055) (values 'constant g$120$14055 '#f) (values 'other '#f '#f))) (g$120$13245 g$120$14033)))))) (set! g$120$13271 (lambda (g$120$14057 g$120$14058) (if (procedure? g$120$14057) (cons* 'local-macro g$120$14057 g$120$14058) (if (if (pair? g$120$14057) (if (eq? (car g$120$14057) 'macro!) (begin '#f (procedure? (cdr g$120$14057))) '#f) '#f) (cons* 'local-macro! (cdr g$120$14057) g$120$14058) (if (if (pair? g$120$14057) (begin '#f (eq? (car g$120$14057) '$rtd)) '#f) g$120$14057 (error 'expand '"invalid transformer" g$120$14057)))))) (set! g$120$13273 (lambda (g$120$14061) (if (procedure? g$120$14061) (cons 'macro! g$120$14061) (error 'make-variable-transformer '"not a procedure" g$120$14061)))) (set! g$120$13275 (lambda (g$120$14063) (g$120$13271 (eval-core (g$120$12392 g$120$14063)) g$120$14063))) (set! g$120$13474 (lambda (g$120$14065) ((lambda (g$120$14067) ((lambda (g$120$14069) (if (if g$120$14069 (begin '#f (apply (lambda (g$120$14071 g$120$14072 g$120$14073 g$120$14074) (g$120$13225 g$120$14071)) g$120$14069)) '#f) (apply (lambda (g$120$14079 g$120$14080 g$120$14081 g$120$14082) (values g$120$14079 (cons 'defun (cons g$120$14080 (cons g$120$14081 g$120$14082))))) g$120$14069) ((lambda (g$120$14087) ((lambda (g$120$14089) (if (if g$120$14089 (begin '#f (apply (lambda (g$120$14091 g$120$14092) (g$120$13225 g$120$14091)) g$120$14089)) '#f) (apply (lambda (g$120$14095 g$120$14096) (values g$120$14095 (cons 'expr g$120$14096))) g$120$14089) (error 'expander '"invalid syntax" (g$120$13243 g$120$14087 '())))) ((lambda (g$120$14099) (if (g$120$13211 g$120$14099) (begin '#f ((lambda (g$120$14101) (if g$120$14101 (begin '#f ((lambda (g$120$14103) (if g$120$14103 (begin '#f (append g$120$14101 g$120$14103)) '#f)) ((lambda (g$120$14105) (if (g$120$13211 g$120$14105) (begin '#f ((lambda (g$120$14107) (if g$120$14107 (begin '#f ((lambda (g$120$14109) (if g$120$14109 (begin '#f (append g$120$14107 g$120$14109)) '#f)) ((lambda (g$120$14111) (if (g$120$13211 g$120$14111) (begin '#f ((lambda (g$120$14113) (if g$120$14113 (begin '#f ((lambda (g$120$14115) (if g$120$14115 (begin '#f (append g$120$14113 g$120$14115)) '#f)) ((lambda (g$120$14117) (if (equal? (g$120$13245 g$120$14117) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$14111)))) '#f)) ((lambda (g$120$14119) (list g$120$14119)) (g$120$13219 g$120$14111)))) '#f)) (g$120$13223 g$120$14105)))) '#f)) ((lambda (g$120$14121) (list g$120$14121)) (g$120$13219 g$120$14105)))) '#f)) (g$120$13223 g$120$14099)))) '#f)) ((lambda (g$120$14123) '()) (g$120$13219 g$120$14099)))) '#f)) g$120$14087))) g$120$14067))) ((lambda (g$120$14125) (if (g$120$13211 g$120$14125) (begin '#f ((lambda (g$120$14127) (if g$120$14127 (begin '#f ((lambda (g$120$14129) (if g$120$14129 (begin '#f (append g$120$14127 g$120$14129)) '#f)) ((lambda (g$120$14131) (if (g$120$13211 g$120$14131) (begin '#f ((lambda (g$120$14133) (if g$120$14133 (begin '#f ((lambda (g$120$14135) (if g$120$14135 (begin '#f (append g$120$14133 g$120$14135)) '#f)) ((lambda (g$120$14137) (if (g$120$13211 g$120$14137) (begin '#f ((lambda (g$120$14139) (if g$120$14139 (begin '#f ((lambda (g$120$14141) (if g$120$14141 (begin '#f (append g$120$14139 g$120$14141)) '#f)) ((letrec ((g$120$14143 (lambda (g$120$14145) (if (g$120$13211 g$120$14145) ((lambda (g$120$14147) (if g$120$14147 (begin '#f ((lambda (g$120$14149) (if g$120$14149 (begin '#f (map cons g$120$14147 g$120$14149)) '#f)) (g$120$14143 (g$120$13223 g$120$14145)))) '#f)) ((lambda (g$120$14151) (list g$120$14151)) (g$120$13219 g$120$14145))) (if (g$120$13215 g$120$14145) (list (begin 'b* '())) '#f))))) g$120$14143) (g$120$13223 g$120$14137)))) '#f)) ((lambda (g$120$14153) (list g$120$14153)) (g$120$13219 g$120$14137)))) '#f)) (g$120$13223 g$120$14131)))) '#f)) ((lambda (g$120$14155) (if (g$120$13211 g$120$14155) (begin '#f ((lambda (g$120$14157) (if g$120$14157 (begin '#f ((lambda (g$120$14159) (if g$120$14159 (begin '#f (append g$120$14157 g$120$14159)) '#f)) ((lambda (g$120$14161) (list g$120$14161)) (g$120$13223 g$120$14155)))) '#f)) ((lambda (g$120$14163) (list g$120$14163)) (g$120$13219 g$120$14155)))) '#f)) (g$120$13219 g$120$14131)))) '#f)) (g$120$13223 g$120$14125)))) '#f)) ((lambda (g$120$14165) '()) (g$120$13219 g$120$14125)))) '#f)) g$120$14067))) g$120$14065))) (set! g$120$13476 (lambda (g$120$14167) ((lambda (g$120$14169) ((lambda (g$120$14171) (if (if g$120$14171 (begin '#f (apply (lambda (g$120$14173 g$120$14174) (g$120$13225 g$120$14173)) g$120$14171)) '#f) (apply (lambda (g$120$14177 g$120$14178) (values g$120$14177 g$120$14178)) g$120$14171) (error 'expander '"invalid syntax" (g$120$13243 g$120$14169 '())))) ((lambda (g$120$14181) (if (g$120$13211 g$120$14181) (begin '#f ((lambda (g$120$14183) (if g$120$14183 (begin '#f ((lambda (g$120$14185) (if g$120$14185 (begin '#f (append g$120$14183 g$120$14185)) '#f)) ((lambda (g$120$14187) (if (g$120$13211 g$120$14187) (begin '#f ((lambda (g$120$14189) (if g$120$14189 (begin '#f ((lambda (g$120$14191) (if g$120$14191 (begin '#f (append g$120$14189 g$120$14191)) '#f)) ((lambda (g$120$14193) (if (g$120$13211 g$120$14193) (begin '#f ((lambda (g$120$14195) (if g$120$14195 (begin '#f ((lambda (g$120$14197) (if g$120$14197 (begin '#f (append g$120$14195 g$120$14197)) '#f)) ((lambda (g$120$14199) (if (equal? (g$120$13245 g$120$14199) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$14193)))) '#f)) ((lambda (g$120$14201) (list g$120$14201)) (g$120$13219 g$120$14193)))) '#f)) (g$120$13223 g$120$14187)))) '#f)) ((lambda (g$120$14203) (list g$120$14203)) (g$120$13219 g$120$14187)))) '#f)) (g$120$13223 g$120$14181)))) '#f)) ((lambda (g$120$14205) '()) (g$120$13219 g$120$14181)))) '#f)) g$120$14169))) g$120$14167))) (set! g$120$13478 (lambda (g$120$14207) ((lambda (g$120$14209) ((lambda (g$120$14211) (if g$120$14211 ((lambda (g$120$14213) ((lambda (g$120$14215 g$120$14216) (g$120$13205 (g$120$13142 (list g$120$14215) (list g$120$13131) (list g$120$14216) '#f) (g$120$13201 g$120$14207 g$120$13131 '()))) (car g$120$14213) (cdr g$120$14213))) g$120$14211) (g$120$13201 g$120$14207 g$120$13131 '()))) (assq g$120$14207 g$120$14209))) (g$120$12864 (g$120$12839 '(psyntax system $all)))))) (set! g$120$13480 (lambda (g$120$14219 g$120$14220 g$120$14221) (cons (cons* g$120$14219 'lexical g$120$14220) g$120$14221))) (set! g$120$13482 (lambda (g$120$14225 g$120$14226 g$120$14227) (if (null? g$120$14225) g$120$14227 (g$120$13482 (cdr g$120$14225) (cdr g$120$14226) (g$120$13480 (car g$120$14225) (car g$120$14226) g$120$14227))))) (set! g$120$13484 (lambda (g$120$14231 g$120$14232 g$120$14233) ((lambda (g$120$14237) ((lambda (g$120$14239) (if (if g$120$14239 (begin '#f (apply (lambda (g$120$14241 g$120$14242 g$120$14243 g$120$14244) '#t) g$120$14239)) '#f) (apply (lambda (g$120$14249 g$120$14250 g$120$14251 g$120$14252) ((lambda (g$120$14257) ((lambda (g$120$14259 g$120$14260) ((lambda (g$120$14263 g$120$14264 g$120$14265) (letrec ((g$120$14269 (lambda (g$120$14271 g$120$14272) (if (null? g$120$14271) (g$120$13612 (g$120$13205 (g$120$13172 g$120$14263 g$120$14264) (cons g$120$14251 g$120$14252)) (g$120$13482 g$120$14264 g$120$14265 g$120$14232) g$120$14233) (list '(primitive call-with-values) (g$120$13114 '#f '() (car g$120$14272)) (g$120$13114 '#f (car g$120$14271) (g$120$14269 (cdr g$120$14271) (cdr g$120$14272)))))))) (g$120$14269 g$120$14259 g$120$14257))) (apply append g$120$14249) (apply append g$120$14260) (apply append g$120$14259))) (map (lambda (g$120$14275) (map g$120$13135 g$120$14275)) g$120$14249) (map (lambda (g$120$14277) (map g$120$13139 g$120$14277)) g$120$14249))) (g$120$13592 g$120$14250 g$120$14232 g$120$14233))) g$120$14239) (error 'expander '"invalid syntax" (g$120$13243 g$120$14237 '())))) ((lambda (g$120$14279) (if (g$120$13211 g$120$14279) (begin '#f ((lambda (g$120$14281) (if g$120$14281 (begin '#f ((lambda (g$120$14283) (if g$120$14283 (begin '#f (append g$120$14281 g$120$14283)) '#f)) ((lambda (g$120$14285) (if (g$120$13211 g$120$14285) (begin '#f ((lambda (g$120$14287) (if g$120$14287 (begin '#f ((lambda (g$120$14289) (if g$120$14289 (begin '#f (append g$120$14287 g$120$14289)) '#f)) ((lambda (g$120$14291) (if (g$120$13211 g$120$14291) (begin '#f ((lambda (g$120$14293) (if g$120$14293 (begin '#f ((lambda (g$120$14295) (if g$120$14295 (begin '#f (append g$120$14293 g$120$14295)) '#f)) ((letrec ((g$120$14297 (lambda (g$120$14299) (if (g$120$13211 g$120$14299) ((lambda (g$120$14301) (if g$120$14301 (begin '#f ((lambda (g$120$14303) (if g$120$14303 (begin '#f (map cons g$120$14301 g$120$14303)) '#f)) (g$120$14297 (g$120$13223 g$120$14299)))) '#f)) ((lambda (g$120$14305) (list g$120$14305)) (g$120$13219 g$120$14299))) (if (g$120$13215 g$120$14299) (list (begin 'b* '())) '#f))))) g$120$14297) (g$120$13223 g$120$14291)))) '#f)) ((lambda (g$120$14307) (list g$120$14307)) (g$120$13219 g$120$14291)))) '#f)) (g$120$13223 g$120$14285)))) '#f)) ((letrec ((g$120$14309 (lambda (g$120$14311) (if (g$120$13211 g$120$14311) ((lambda (g$120$14313) (if g$120$14313 (begin '#f ((lambda (g$120$14315) (if g$120$14315 (begin '#f (map cons g$120$14313 g$120$14315)) '#f)) (g$120$14309 (g$120$13223 g$120$14311)))) '#f)) ((lambda (g$120$14317) (if (g$120$13211 g$120$14317) (begin '#f ((lambda (g$120$14319) (if g$120$14319 (begin '#f ((lambda (g$120$14321) (if g$120$14321 (begin '#f (append g$120$14319 g$120$14321)) '#f)) ((lambda (g$120$14323) (if (g$120$13211 g$120$14323) (begin '#f ((lambda (g$120$14325) (if g$120$14325 (begin '#f ((lambda (g$120$14327) (if g$120$14327 (begin '#f (append g$120$14325 g$120$14327)) '#f)) ((lambda (g$120$14329) (if (equal? (g$120$13245 g$120$14329) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$14323)))) '#f)) ((lambda (g$120$14331) (list g$120$14331)) (g$120$13219 g$120$14323)))) '#f)) (g$120$13223 g$120$14317)))) '#f)) ((letrec ((g$120$14333 (lambda (g$120$14335) (if (g$120$13211 g$120$14335) ((lambda (g$120$14337) (if g$120$14337 (begin '#f ((lambda (g$120$14339) (if g$120$14339 (begin '#f (map cons g$120$14337 g$120$14339)) '#f)) (g$120$14333 (g$120$13223 g$120$14335)))) '#f)) ((lambda (g$120$14341) (list g$120$14341)) (g$120$13219 g$120$14335))) (if (g$120$13215 g$120$14335) (list (begin 'fml** '())) '#f))))) g$120$14333) (g$120$13219 g$120$14317)))) '#f)) (g$120$13219 g$120$14311))) (if (g$120$13215 g$120$14311) (list (begin 'fml** '()) (begin 'rhs* '())) '#f))))) g$120$14309) (g$120$13219 g$120$14285)))) '#f)) (g$120$13223 g$120$14279)))) '#f)) ((lambda (g$120$14343) '()) (g$120$13219 g$120$14279)))) '#f)) g$120$14237))) g$120$14231))) (set! g$120$13486 (lambda (g$120$14345 g$120$14346 g$120$14347 g$120$14348) ((lambda (g$120$14353) ((lambda (g$120$14355) (if (if g$120$14355 (begin '#f (apply (lambda (g$120$14357 g$120$14358 g$120$14359 g$120$14360) '#t) g$120$14355)) '#f) (apply (lambda (g$120$14365 g$120$14366 g$120$14367 g$120$14368) (if (not (g$120$13235 g$120$14365)) (error 'expander '"invalid identifiers" (g$120$13243 g$120$14345 '())) ((lambda (g$120$14373 g$120$14374) ((lambda (g$120$14377 g$120$14378) ((lambda (g$120$14381 g$120$14382) (g$120$14348 '#f g$120$14373 g$120$14382 g$120$14381)) (g$120$13612 (g$120$13205 g$120$14377 (cons g$120$14367 g$120$14368)) g$120$14378 g$120$14347) (g$120$13592 (map (lambda (g$120$14385) (g$120$13205 g$120$14377 g$120$14385)) g$120$14366) g$120$14378 g$120$14347))) (g$120$13172 g$120$14365 g$120$14374) (g$120$13482 g$120$14374 g$120$14373 g$120$14346))) (map g$120$13135 g$120$14365) (map g$120$13139 g$120$14365)))) g$120$14355) (error 'expander '"invalid syntax" (g$120$13243 g$120$14353 '())))) ((lambda (g$120$14387) (if (g$120$13211 g$120$14387) (begin '#f ((lambda (g$120$14389) (if g$120$14389 (begin '#f ((lambda (g$120$14391) (if g$120$14391 (begin '#f (append g$120$14389 g$120$14391)) '#f)) ((lambda (g$120$14393) (if (g$120$13211 g$120$14393) (begin '#f ((lambda (g$120$14395) (if g$120$14395 (begin '#f ((lambda (g$120$14397) (if g$120$14397 (begin '#f (append g$120$14395 g$120$14397)) '#f)) ((lambda (g$120$14399) (if (g$120$13211 g$120$14399) (begin '#f ((lambda (g$120$14401) (if g$120$14401 (begin '#f ((lambda (g$120$14403) (if g$120$14403 (begin '#f (append g$120$14401 g$120$14403)) '#f)) ((letrec ((g$120$14405 (lambda (g$120$14407) (if (g$120$13211 g$120$14407) ((lambda (g$120$14409) (if g$120$14409 (begin '#f ((lambda (g$120$14411) (if g$120$14411 (begin '#f (map cons g$120$14409 g$120$14411)) '#f)) (g$120$14405 (g$120$13223 g$120$14407)))) '#f)) ((lambda (g$120$14413) (list g$120$14413)) (g$120$13219 g$120$14407))) (if (g$120$13215 g$120$14407) (list (begin 'b* '())) '#f))))) g$120$14405) (g$120$13223 g$120$14399)))) '#f)) ((lambda (g$120$14415) (list g$120$14415)) (g$120$13219 g$120$14399)))) '#f)) (g$120$13223 g$120$14393)))) '#f)) ((letrec ((g$120$14417 (lambda (g$120$14419) (if (g$120$13211 g$120$14419) ((lambda (g$120$14421) (if g$120$14421 (begin '#f ((lambda (g$120$14423) (if g$120$14423 (begin '#f (map cons g$120$14421 g$120$14423)) '#f)) (g$120$14417 (g$120$13223 g$120$14419)))) '#f)) ((lambda (g$120$14425) (if (g$120$13211 g$120$14425) (begin '#f ((lambda (g$120$14427) (if g$120$14427 (begin '#f ((lambda (g$120$14429) (if g$120$14429 (begin '#f (append g$120$14427 g$120$14429)) '#f)) ((lambda (g$120$14431) (if (g$120$13211 g$120$14431) (begin '#f ((lambda (g$120$14433) (if g$120$14433 (begin '#f ((lambda (g$120$14435) (if g$120$14435 (begin '#f (append g$120$14433 g$120$14435)) '#f)) ((lambda (g$120$14437) (if (equal? (g$120$13245 g$120$14437) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$14431)))) '#f)) ((lambda (g$120$14439) (list g$120$14439)) (g$120$13219 g$120$14431)))) '#f)) (g$120$13223 g$120$14425)))) '#f)) ((lambda (g$120$14441) (list g$120$14441)) (g$120$13219 g$120$14425)))) '#f)) (g$120$13219 g$120$14419))) (if (g$120$13215 g$120$14419) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$120$14417) (g$120$13219 g$120$14393)))) '#f)) (g$120$13223 g$120$14387)))) '#f)) ((lambda (g$120$14443) '()) (g$120$13219 g$120$14387)))) '#f)) g$120$14353))) g$120$14345))) (set! g$120$13488 (lambda (g$120$14445 g$120$14446 g$120$14447) (g$120$13486 g$120$14445 g$120$14446 g$120$14447 g$120$13106))) (set! g$120$13490 (lambda (g$120$14451 g$120$14452 g$120$14453) (g$120$13486 g$120$14451 g$120$14452 g$120$14453 g$120$13105))) (set! g$120$13492 (lambda (g$120$14457 g$120$14458 g$120$14459) ((lambda (g$120$14463) ((lambda (g$120$14465) (if (if g$120$14465 (begin '#f (apply (lambda (g$120$14467) (g$120$13225 g$120$14467)) g$120$14465)) '#f) (apply (lambda (g$120$14469) ((lambda (g$120$14471) ((lambda (g$120$14473) ((lambda (g$120$14475) ((lambda () (begin (if g$120$14471 (void) (error 'expander '"unbound identifier" (g$120$13243 g$120$14457 '()))) (if (if (eq? g$120$14475 '$rtd) (begin '#f (not (list? (g$120$13255 g$120$14473)))) '#f) (void) (error 'expander '"invalid type" (g$120$13243 g$120$14457 '()))) (list 'quote (g$120$13255 g$120$14473)))))) (g$120$13253 g$120$14473))) (g$120$13249 g$120$14471 g$120$14458))) (g$120$13247 g$120$14469))) g$120$14465) (error 'expander '"invalid syntax" (g$120$13243 g$120$14463 '())))) ((lambda (g$120$14477) (if (g$120$13211 g$120$14477) (begin '#f ((lambda (g$120$14479) (if g$120$14479 (begin '#f ((lambda (g$120$14481) (if g$120$14481 (begin '#f (append g$120$14479 g$120$14481)) '#f)) ((lambda (g$120$14483) (if (g$120$13211 g$120$14483) (begin '#f ((lambda (g$120$14485) (if g$120$14485 (begin '#f ((lambda (g$120$14487) (if g$120$14487 (begin '#f (append g$120$14485 g$120$14487)) '#f)) ((lambda (g$120$14489) (if (equal? (g$120$13245 g$120$14489) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$14483)))) '#f)) ((lambda (g$120$14491) (list g$120$14491)) (g$120$13219 g$120$14483)))) '#f)) (g$120$13223 g$120$14477)))) '#f)) ((lambda (g$120$14493) '()) (g$120$13219 g$120$14477)))) '#f)) g$120$14463))) g$120$14457))) (set! g$120$13494 (lambda (g$120$14495 g$120$14496 g$120$14497) ((lambda (g$120$14501) ((lambda (g$120$14503) (if (if g$120$14503 (begin '#f (apply (lambda (g$120$14505) (g$120$13225 g$120$14505)) g$120$14503)) '#f) (apply (lambda (g$120$14507) ((lambda (g$120$14509) ((lambda (g$120$14511) ((lambda (g$120$14513) ((lambda () (begin (if g$120$14509 (void) (error 'expander '"unbound identifier" (g$120$13243 g$120$14495 '()))) (if (if (eq? g$120$14513 '$rtd) (begin '#f (list? (g$120$13255 g$120$14511))) '#f) (void) (error 'expander '"invalid type" (g$120$13243 g$120$14495 '()))) (g$120$13596 (car (g$120$13255 g$120$14511)) g$120$14496 g$120$14497))))) (g$120$13253 g$120$14511))) (g$120$13249 g$120$14509 g$120$14496))) (g$120$13247 g$120$14507))) g$120$14503) (error 'expander '"invalid syntax" (g$120$13243 g$120$14501 '())))) ((lambda (g$120$14515) (if (g$120$13211 g$120$14515) (begin '#f ((lambda (g$120$14517) (if g$120$14517 (begin '#f ((lambda (g$120$14519) (if g$120$14519 (begin '#f (append g$120$14517 g$120$14519)) '#f)) ((lambda (g$120$14521) (if (g$120$13211 g$120$14521) (begin '#f ((lambda (g$120$14523) (if g$120$14523 (begin '#f ((lambda (g$120$14525) (if g$120$14525 (begin '#f (append g$120$14523 g$120$14525)) '#f)) ((lambda (g$120$14527) (if (equal? (g$120$13245 g$120$14527) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$14521)))) '#f)) ((lambda (g$120$14529) (list g$120$14529)) (g$120$13219 g$120$14521)))) '#f)) (g$120$13223 g$120$14515)))) '#f)) ((lambda (g$120$14531) '()) (g$120$13219 g$120$14515)))) '#f)) g$120$14501))) g$120$14495))) (set! g$120$13496 (lambda (g$120$14533 g$120$14534 g$120$14535) ((lambda (g$120$14539) ((lambda (g$120$14541) (if (if g$120$14541 (begin '#f (apply (lambda (g$120$14543) (g$120$13225 g$120$14543)) g$120$14541)) '#f) (apply (lambda (g$120$14545) ((lambda (g$120$14547) ((lambda (g$120$14549) ((lambda (g$120$14551) ((lambda () (begin (if g$120$14547 (void) (error 'expander '"unbound identifier" (g$120$13243 g$120$14533 '()))) (if (if (eq? g$120$14551 '$rtd) (begin '#f (list? (g$120$13255 g$120$14549))) '#f) (void) (error 'expander '"invalid type" (g$120$13243 g$120$14533 '()))) (g$120$13596 (cadr (g$120$13255 g$120$14549)) g$120$14534 g$120$14535))))) (g$120$13253 g$120$14549))) (g$120$13249 g$120$14547 g$120$14534))) (g$120$13247 g$120$14545))) g$120$14541) (error 'expander '"invalid syntax" (g$120$13243 g$120$14539 '())))) ((lambda (g$120$14553) (if (g$120$13211 g$120$14553) (begin '#f ((lambda (g$120$14555) (if g$120$14555 (begin '#f ((lambda (g$120$14557) (if g$120$14557 (begin '#f (append g$120$14555 g$120$14557)) '#f)) ((lambda (g$120$14559) (if (g$120$13211 g$120$14559) (begin '#f ((lambda (g$120$14561) (if g$120$14561 (begin '#f ((lambda (g$120$14563) (if g$120$14563 (begin '#f (append g$120$14561 g$120$14563)) '#f)) ((lambda (g$120$14565) (if (equal? (g$120$13245 g$120$14565) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$14559)))) '#f)) ((lambda (g$120$14567) (list g$120$14567)) (g$120$13219 g$120$14559)))) '#f)) (g$120$13223 g$120$14553)))) '#f)) ((lambda (g$120$14569) '()) (g$120$13219 g$120$14553)))) '#f)) g$120$14539))) g$120$14533))) (set! g$120$13498 (lambda (g$120$14571 g$120$14572 g$120$14573) ((lambda (g$120$14577) ((lambda (g$120$14579) (if (if g$120$14579 (begin '#f (apply (lambda (g$120$14581 g$120$14582 g$120$14583) '#t) g$120$14579)) '#f) (apply (lambda (g$120$14587 g$120$14588 g$120$14589) (list 'if (g$120$13596 g$120$14587 g$120$14572 g$120$14573) (g$120$13108 '#f (g$120$13592 (cons g$120$14588 g$120$14589) g$120$14572 g$120$14573)) (g$120$13107))) g$120$14579) (error 'expander '"invalid syntax" (g$120$13243 g$120$14577 '())))) ((lambda (g$120$14593) (if (g$120$13211 g$120$14593) (begin '#f ((lambda (g$120$14595) (if g$120$14595 (begin '#f ((lambda (g$120$14597) (if g$120$14597 (begin '#f (append g$120$14595 g$120$14597)) '#f)) ((lambda (g$120$14599) (if (g$120$13211 g$120$14599) (begin '#f ((lambda (g$120$14601) (if g$120$14601 (begin '#f ((lambda (g$120$14603) (if g$120$14603 (begin '#f (append g$120$14601 g$120$14603)) '#f)) ((lambda (g$120$14605) (if (g$120$13211 g$120$14605) (begin '#f ((lambda (g$120$14607) (if g$120$14607 (begin '#f ((lambda (g$120$14609) (if g$120$14609 (begin '#f (append g$120$14607 g$120$14609)) '#f)) ((letrec ((g$120$14611 (lambda (g$120$14613) (if (g$120$13211 g$120$14613) ((lambda (g$120$14615) (if g$120$14615 (begin '#f ((lambda (g$120$14617) (if g$120$14617 (begin '#f (map cons g$120$14615 g$120$14617)) '#f)) (g$120$14611 (g$120$13223 g$120$14613)))) '#f)) ((lambda (g$120$14619) (list g$120$14619)) (g$120$13219 g$120$14613))) (if (g$120$13215 g$120$14613) (list (begin 'e* '())) '#f))))) g$120$14611) (g$120$13223 g$120$14605)))) '#f)) ((lambda (g$120$14621) (list g$120$14621)) (g$120$13219 g$120$14605)))) '#f)) (g$120$13223 g$120$14599)))) '#f)) ((lambda (g$120$14623) (list g$120$14623)) (g$120$13219 g$120$14599)))) '#f)) (g$120$13223 g$120$14593)))) '#f)) ((lambda (g$120$14625) '()) (g$120$13219 g$120$14593)))) '#f)) g$120$14577))) g$120$14571))) (set! g$120$13500 (lambda (g$120$14627 g$120$14628 g$120$14629) ((lambda (g$120$14633) ((lambda (g$120$14635) (if (if g$120$14635 (begin '#f (apply (lambda (g$120$14637 g$120$14638 g$120$14639) '#t) g$120$14635)) '#f) (apply (lambda (g$120$14643 g$120$14644 g$120$14645) (list 'if (g$120$13596 g$120$14643 g$120$14628 g$120$14629) (g$120$13107) (g$120$13108 '#f (g$120$13592 (cons g$120$14644 g$120$14645) g$120$14628 g$120$14629)))) g$120$14635) (error 'expander '"invalid syntax" (g$120$13243 g$120$14633 '())))) ((lambda (g$120$14649) (if (g$120$13211 g$120$14649) (begin '#f ((lambda (g$120$14651) (if g$120$14651 (begin '#f ((lambda (g$120$14653) (if g$120$14653 (begin '#f (append g$120$14651 g$120$14653)) '#f)) ((lambda (g$120$14655) (if (g$120$13211 g$120$14655) (begin '#f ((lambda (g$120$14657) (if g$120$14657 (begin '#f ((lambda (g$120$14659) (if g$120$14659 (begin '#f (append g$120$14657 g$120$14659)) '#f)) ((lambda (g$120$14661) (if (g$120$13211 g$120$14661) (begin '#f ((lambda (g$120$14663) (if g$120$14663 (begin '#f ((lambda (g$120$14665) (if g$120$14665 (begin '#f (append g$120$14663 g$120$14665)) '#f)) ((letrec ((g$120$14667 (lambda (g$120$14669) (if (g$120$13211 g$120$14669) ((lambda (g$120$14671) (if g$120$14671 (begin '#f ((lambda (g$120$14673) (if g$120$14673 (begin '#f (map cons g$120$14671 g$120$14673)) '#f)) (g$120$14667 (g$120$13223 g$120$14669)))) '#f)) ((lambda (g$120$14675) (list g$120$14675)) (g$120$13219 g$120$14669))) (if (g$120$13215 g$120$14669) (list (begin 'e* '())) '#f))))) g$120$14667) (g$120$13223 g$120$14661)))) '#f)) ((lambda (g$120$14677) (list g$120$14677)) (g$120$13219 g$120$14661)))) '#f)) (g$120$13223 g$120$14655)))) '#f)) ((lambda (g$120$14679) (list g$120$14679)) (g$120$13219 g$120$14655)))) '#f)) (g$120$13223 g$120$14649)))) '#f)) ((lambda (g$120$14681) '()) (g$120$13219 g$120$14649)))) '#f)) g$120$14633))) g$120$14627))) (set! g$120$13502 (lambda (g$120$14683 g$120$14684 g$120$14685) ((lambda (g$120$14689) ((lambda (g$120$14691) (if (if g$120$14691 (begin '#f (apply (lambda (g$120$14693 g$120$14694 g$120$14695) '#t) g$120$14691)) '#f) (apply (lambda (g$120$14699 g$120$14700 g$120$14701) (list 'if (g$120$13596 g$120$14699 g$120$14684 g$120$14685) (g$120$13596 g$120$14700 g$120$14684 g$120$14685) (g$120$13596 g$120$14701 g$120$14684 g$120$14685))) g$120$14691) ((lambda (g$120$14705) ((lambda (g$120$14707) (if (if g$120$14707 (begin '#f (apply (lambda (g$120$14709 g$120$14710) '#t) g$120$14707)) '#f) (apply (lambda (g$120$14713 g$120$14714) (list 'if (g$120$13596 g$120$14713 g$120$14684 g$120$14685) (g$120$13596 g$120$14714 g$120$14684 g$120$14685) (g$120$13107))) g$120$14707) (error 'expander '"invalid syntax" (g$120$13243 g$120$14705 '())))) ((lambda (g$120$14717) (if (g$120$13211 g$120$14717) (begin '#f ((lambda (g$120$14719) (if g$120$14719 (begin '#f ((lambda (g$120$14721) (if g$120$14721 (begin '#f (append g$120$14719 g$120$14721)) '#f)) ((lambda (g$120$14723) (if (g$120$13211 g$120$14723) (begin '#f ((lambda (g$120$14725) (if g$120$14725 (begin '#f ((lambda (g$120$14727) (if g$120$14727 (begin '#f (append g$120$14725 g$120$14727)) '#f)) ((lambda (g$120$14729) (if (g$120$13211 g$120$14729) (begin '#f ((lambda (g$120$14731) (if g$120$14731 (begin '#f ((lambda (g$120$14733) (if g$120$14733 (begin '#f (append g$120$14731 g$120$14733)) '#f)) ((lambda (g$120$14735) (if (equal? (g$120$13245 g$120$14735) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$14729)))) '#f)) ((lambda (g$120$14737) (list g$120$14737)) (g$120$13219 g$120$14729)))) '#f)) (g$120$13223 g$120$14723)))) '#f)) ((lambda (g$120$14739) (list g$120$14739)) (g$120$13219 g$120$14723)))) '#f)) (g$120$13223 g$120$14717)))) '#f)) ((lambda (g$120$14741) '()) (g$120$13219 g$120$14717)))) '#f)) g$120$14705))) g$120$14689))) ((lambda (g$120$14743) (if (g$120$13211 g$120$14743) (begin '#f ((lambda (g$120$14745) (if g$120$14745 (begin '#f ((lambda (g$120$14747) (if g$120$14747 (begin '#f (append g$120$14745 g$120$14747)) '#f)) ((lambda (g$120$14749) (if (g$120$13211 g$120$14749) (begin '#f ((lambda (g$120$14751) (if g$120$14751 (begin '#f ((lambda (g$120$14753) (if g$120$14753 (begin '#f (append g$120$14751 g$120$14753)) '#f)) ((lambda (g$120$14755) (if (g$120$13211 g$120$14755) (begin '#f ((lambda (g$120$14757) (if g$120$14757 (begin '#f ((lambda (g$120$14759) (if g$120$14759 (begin '#f (append g$120$14757 g$120$14759)) '#f)) ((lambda (g$120$14761) (if (g$120$13211 g$120$14761) (begin '#f ((lambda (g$120$14763) (if g$120$14763 (begin '#f ((lambda (g$120$14765) (if g$120$14765 (begin '#f (append g$120$14763 g$120$14765)) '#f)) ((lambda (g$120$14767) (if (equal? (g$120$13245 g$120$14767) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$14761)))) '#f)) ((lambda (g$120$14769) (list g$120$14769)) (g$120$13219 g$120$14761)))) '#f)) (g$120$13223 g$120$14755)))) '#f)) ((lambda (g$120$14771) (list g$120$14771)) (g$120$13219 g$120$14755)))) '#f)) (g$120$13223 g$120$14749)))) '#f)) ((lambda (g$120$14773) (list g$120$14773)) (g$120$13219 g$120$14749)))) '#f)) (g$120$13223 g$120$14743)))) '#f)) ((lambda (g$120$14775) '()) (g$120$13219 g$120$14743)))) '#f)) g$120$14689))) g$120$14683))) (set! g$120$13504 (lambda (g$120$14777 g$120$14778 g$120$14779) ((lambda (g$120$14783 g$120$14785) (begin (set! g$120$14783 (lambda (g$120$14893 g$120$14894 g$120$14895) ((lambda (g$120$14899) ((lambda (g$120$14901) (if (if g$120$14901 (begin '#f (apply (lambda (g$120$14903 g$120$14904 g$120$14905) '#t) g$120$14901)) '#f) (apply (lambda (g$120$14909 g$120$14910 g$120$14911) (list 'if (list '(primitive memv) g$120$14893 (list 'quote (g$120$13245 g$120$14909))) (g$120$13108 '#f (g$120$13592 (cons g$120$14910 g$120$14911) g$120$14778 g$120$14779)) g$120$14895)) g$120$14901) ((lambda (g$120$14915) ((lambda (g$120$14917) (if (if g$120$14917 (begin '#f (apply (lambda (g$120$14919) '#t) g$120$14917)) '#f) (apply (lambda (g$120$14921) (error 'expander '"invalid syntax" (g$120$13245 g$120$14777))) g$120$14917) (error 'expander '"invalid syntax" (g$120$13243 g$120$14915 '())))) ((lambda (g$120$14923) (list g$120$14923)) g$120$14915))) g$120$14899))) ((lambda (g$120$14925) (if (g$120$13211 g$120$14925) (begin '#f ((lambda (g$120$14927) (if g$120$14927 (begin '#f ((lambda (g$120$14929) (if g$120$14929 (begin '#f (append g$120$14927 g$120$14929)) '#f)) ((lambda (g$120$14931) (if (g$120$13211 g$120$14931) (begin '#f ((lambda (g$120$14933) (if g$120$14933 (begin '#f ((lambda (g$120$14935) (if g$120$14935 (begin '#f (append g$120$14933 g$120$14935)) '#f)) ((letrec ((g$120$14937 (lambda (g$120$14939) (if (g$120$13211 g$120$14939) ((lambda (g$120$14941) (if g$120$14941 (begin '#f ((lambda (g$120$14943) (if g$120$14943 (begin '#f (map cons g$120$14941 g$120$14943)) '#f)) (g$120$14937 (g$120$13223 g$120$14939)))) '#f)) ((lambda (g$120$14945) (list g$120$14945)) (g$120$13219 g$120$14939))) (if (g$120$13215 g$120$14939) (list (begin 'e* '())) '#f))))) g$120$14937) (g$120$13223 g$120$14931)))) '#f)) ((lambda (g$120$14947) (list g$120$14947)) (g$120$13219 g$120$14931)))) '#f)) (g$120$13223 g$120$14925)))) '#f)) ((letrec ((g$120$14949 (lambda (g$120$14951) (if (g$120$13211 g$120$14951) ((lambda (g$120$14953) (if g$120$14953 (begin '#f ((lambda (g$120$14955) (if g$120$14955 (begin '#f (map cons g$120$14953 g$120$14955)) '#f)) (g$120$14949 (g$120$13223 g$120$14951)))) '#f)) ((lambda (g$120$14957) (list g$120$14957)) (g$120$13219 g$120$14951))) (if (g$120$13215 g$120$14951) (list (begin 'd* '())) '#f))))) g$120$14949) (g$120$13219 g$120$14925)))) '#f)) g$120$14899))) g$120$14894))) (set! g$120$14785 (lambda (g$120$14787 g$120$14788) ((lambda (g$120$14791) ((lambda (g$120$14793) (if (if g$120$14793 (begin '#f (apply (lambda (g$120$14795 g$120$14796 g$120$14797) '#t) g$120$14793)) '#f) (apply (lambda (g$120$14801 g$120$14802 g$120$14803) (g$120$14783 g$120$14787 g$120$14788 (g$120$13107))) g$120$14793) ((lambda (g$120$14807) ((lambda (g$120$14809) (if (if g$120$14809 (begin '#f (apply (lambda (g$120$14811 g$120$14812 g$120$14813) '#t) g$120$14809)) '#f) (apply (lambda (g$120$14817 g$120$14818 g$120$14819) (if (if (g$120$13225 g$120$14817) (begin '#f (g$120$13233 g$120$14817 (g$120$13478 'else))) '#f) (g$120$13108 '#f (g$120$13592 (cons g$120$14818 g$120$14819) g$120$14778 g$120$14779)) (error 'expander '"invalid syntax" (g$120$13245 g$120$14777)))) g$120$14809) ((lambda (g$120$14823) ((lambda (g$120$14825) (if (if g$120$14825 (begin '#f (apply (lambda (g$120$14827) '#t) g$120$14825)) '#f) (apply (lambda (g$120$14829) (error 'expander '"invalid syntax" (g$120$13245 g$120$14777))) g$120$14825) (error 'expander '"invalid syntax" (g$120$13243 g$120$14823 '())))) ((lambda (g$120$14831) (list g$120$14831)) g$120$14823))) g$120$14807))) ((lambda (g$120$14833) (if (g$120$13211 g$120$14833) (begin '#f ((lambda (g$120$14835) (if g$120$14835 (begin '#f ((lambda (g$120$14837) (if g$120$14837 (begin '#f (append g$120$14835 g$120$14837)) '#f)) ((lambda (g$120$14839) (if (g$120$13211 g$120$14839) (begin '#f ((lambda (g$120$14841) (if g$120$14841 (begin '#f ((lambda (g$120$14843) (if g$120$14843 (begin '#f (append g$120$14841 g$120$14843)) '#f)) ((letrec ((g$120$14845 (lambda (g$120$14847) (if (g$120$13211 g$120$14847) ((lambda (g$120$14849) (if g$120$14849 (begin '#f ((lambda (g$120$14851) (if g$120$14851 (begin '#f (map cons g$120$14849 g$120$14851)) '#f)) (g$120$14845 (g$120$13223 g$120$14847)))) '#f)) ((lambda (g$120$14853) (list g$120$14853)) (g$120$13219 g$120$14847))) (if (g$120$13215 g$120$14847) (list (begin 'x* '())) '#f))))) g$120$14845) (g$120$13223 g$120$14839)))) '#f)) ((lambda (g$120$14855) (list g$120$14855)) (g$120$13219 g$120$14839)))) '#f)) (g$120$13223 g$120$14833)))) '#f)) ((lambda (g$120$14857) (list g$120$14857)) (g$120$13219 g$120$14833)))) '#f)) g$120$14807))) g$120$14791))) ((lambda (g$120$14859) (if (g$120$13211 g$120$14859) (begin '#f ((lambda (g$120$14861) (if g$120$14861 (begin '#f ((lambda (g$120$14863) (if g$120$14863 (begin '#f (append g$120$14861 g$120$14863)) '#f)) ((lambda (g$120$14865) (if (g$120$13211 g$120$14865) (begin '#f ((lambda (g$120$14867) (if g$120$14867 (begin '#f ((lambda (g$120$14869) (if g$120$14869 (begin '#f (append g$120$14867 g$120$14869)) '#f)) ((letrec ((g$120$14871 (lambda (g$120$14873) (if (g$120$13211 g$120$14873) ((lambda (g$120$14875) (if g$120$14875 (begin '#f ((lambda (g$120$14877) (if g$120$14877 (begin '#f (map cons g$120$14875 g$120$14877)) '#f)) (g$120$14871 (g$120$13223 g$120$14873)))) '#f)) ((lambda (g$120$14879) (list g$120$14879)) (g$120$13219 g$120$14873))) (if (g$120$13215 g$120$14873) (list (begin 'e* '())) '#f))))) g$120$14871) (g$120$13223 g$120$14865)))) '#f)) ((lambda (g$120$14881) (list g$120$14881)) (g$120$13219 g$120$14865)))) '#f)) (g$120$13223 g$120$14859)))) '#f)) ((letrec ((g$120$14883 (lambda (g$120$14885) (if (g$120$13211 g$120$14885) ((lambda (g$120$14887) (if g$120$14887 (begin '#f ((lambda (g$120$14889) (if g$120$14889 (begin '#f (map cons g$120$14887 g$120$14889)) '#f)) (g$120$14883 (g$120$13223 g$120$14885)))) '#f)) ((lambda (g$120$14891) (list g$120$14891)) (g$120$13219 g$120$14885))) (if (g$120$13215 g$120$14885) (list (begin 'd* '())) '#f))))) g$120$14883) (g$120$13219 g$120$14859)))) '#f)) g$120$14791))) g$120$14788))) ((lambda (g$120$14959) ((lambda (g$120$14961) (if (if g$120$14961 (begin '#f (apply (lambda (g$120$14963) '#t) g$120$14961)) '#f) (apply (lambda (g$120$14965) (g$120$13108 '#f (list (g$120$13596 g$120$14965 g$120$14778 g$120$14779) (g$120$13107)))) g$120$14961) ((lambda (g$120$14967) ((lambda (g$120$14969) (if (if g$120$14969 (begin '#f (apply (lambda (g$120$14971 g$120$14972 g$120$14973) '#t) g$120$14969)) '#f) (apply (lambda (g$120$14977 g$120$14978 g$120$14979) ((lambda (g$120$14983) (g$120$13112 '#f (list g$120$14983) (list (g$120$13596 g$120$14977 g$120$14778 g$120$14779)) (letrec ((g$120$14985 (lambda (g$120$14987 g$120$14988) (if (null? g$120$14988) (g$120$14785 g$120$14983 g$120$14987) (g$120$14783 g$120$14983 g$120$14987 (g$120$14985 (car g$120$14988) (cdr g$120$14988))))))) (g$120$14985 g$120$14978 g$120$14979)))) (g$120$13135 't))) g$120$14969) (error 'expander '"invalid syntax" (g$120$13243 g$120$14967 '())))) ((lambda (g$120$14991) (if (g$120$13211 g$120$14991) (begin '#f ((lambda (g$120$14993) (if g$120$14993 (begin '#f ((lambda (g$120$14995) (if g$120$14995 (begin '#f (append g$120$14993 g$120$14995)) '#f)) ((lambda (g$120$14997) (if (g$120$13211 g$120$14997) (begin '#f ((lambda (g$120$14999) (if g$120$14999 (begin '#f ((lambda (g$120$15001) (if g$120$15001 (begin '#f (append g$120$14999 g$120$15001)) '#f)) ((lambda (g$120$15003) (if (g$120$13211 g$120$15003) (begin '#f ((lambda (g$120$15005) (if g$120$15005 (begin '#f ((lambda (g$120$15007) (if g$120$15007 (begin '#f (append g$120$15005 g$120$15007)) '#f)) ((letrec ((g$120$15009 (lambda (g$120$15011) (if (g$120$13211 g$120$15011) ((lambda (g$120$15013) (if g$120$15013 (begin '#f ((lambda (g$120$15015) (if g$120$15015 (begin '#f (map cons g$120$15013 g$120$15015)) '#f)) (g$120$15009 (g$120$13223 g$120$15011)))) '#f)) ((lambda (g$120$15017) (list g$120$15017)) (g$120$13219 g$120$15011))) (if (g$120$13215 g$120$15011) (list (begin 'cls* '())) '#f))))) g$120$15009) (g$120$13223 g$120$15003)))) '#f)) ((lambda (g$120$15019) (list g$120$15019)) (g$120$13219 g$120$15003)))) '#f)) (g$120$13223 g$120$14997)))) '#f)) ((lambda (g$120$15021) (list g$120$15021)) (g$120$13219 g$120$14997)))) '#f)) (g$120$13223 g$120$14991)))) '#f)) ((lambda (g$120$15023) '()) (g$120$13219 g$120$14991)))) '#f)) g$120$14967))) g$120$14959))) ((lambda (g$120$15025) (if (g$120$13211 g$120$15025) (begin '#f ((lambda (g$120$15027) (if g$120$15027 (begin '#f ((lambda (g$120$15029) (if g$120$15029 (begin '#f (append g$120$15027 g$120$15029)) '#f)) ((lambda (g$120$15031) (if (g$120$13211 g$120$15031) (begin '#f ((lambda (g$120$15033) (if g$120$15033 (begin '#f ((lambda (g$120$15035) (if g$120$15035 (begin '#f (append g$120$15033 g$120$15035)) '#f)) ((lambda (g$120$15037) (if (equal? (g$120$13245 g$120$15037) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$15031)))) '#f)) ((lambda (g$120$15039) (list g$120$15039)) (g$120$13219 g$120$15031)))) '#f)) (g$120$13223 g$120$15025)))) '#f)) ((lambda (g$120$15041) '()) (g$120$13219 g$120$15025)))) '#f)) g$120$14959))) g$120$14777))) '#f '#f))) (set! g$120$13506 (lambda (g$120$15043 g$120$15044 g$120$15045) ((lambda (g$120$15049) ((lambda (g$120$15051) (if (if g$120$15051 (begin '#f (apply (lambda (g$120$15053) '#t) g$120$15051)) '#f) (apply (lambda (g$120$15055) (list 'quote (g$120$13245 g$120$15055))) g$120$15051) (error 'expander '"invalid syntax" (g$120$13243 g$120$15049 '())))) ((lambda (g$120$15057) (if (g$120$13211 g$120$15057) (begin '#f ((lambda (g$120$15059) (if g$120$15059 (begin '#f ((lambda (g$120$15061) (if g$120$15061 (begin '#f (append g$120$15059 g$120$15061)) '#f)) ((lambda (g$120$15063) (if (g$120$13211 g$120$15063) (begin '#f ((lambda (g$120$15065) (if g$120$15065 (begin '#f ((lambda (g$120$15067) (if g$120$15067 (begin '#f (append g$120$15065 g$120$15067)) '#f)) ((lambda (g$120$15069) (if (equal? (g$120$13245 g$120$15069) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$15063)))) '#f)) ((lambda (g$120$15071) (list g$120$15071)) (g$120$13219 g$120$15063)))) '#f)) (g$120$13223 g$120$15057)))) '#f)) ((lambda (g$120$15073) '()) (g$120$13219 g$120$15057)))) '#f)) g$120$15049))) g$120$15043))) (set! g$120$13508 (lambda (g$120$15075 g$120$15076 g$120$15077) ((lambda (g$120$15081) ((lambda (g$120$15083) (if (if g$120$15083 (begin '#f (apply (lambda (g$120$15085 g$120$15086 g$120$15087) '#t) g$120$15083)) '#f) (apply (lambda (g$120$15091 g$120$15092 g$120$15093) (call-with-values (lambda () (g$120$13602 g$120$15091 (map cons g$120$15092 g$120$15093) g$120$15076 g$120$15077)) (lambda (g$120$15097 g$120$15098) (g$120$13113 '#f g$120$15097 g$120$15098)))) g$120$15083) (error 'expander '"invalid syntax" (g$120$13243 g$120$15081 '())))) ((lambda (g$120$15101) (if (g$120$13211 g$120$15101) (begin '#f ((lambda (g$120$15103) (if g$120$15103 (begin '#f ((lambda (g$120$15105) (if g$120$15105 (begin '#f (append g$120$15103 g$120$15105)) '#f)) ((letrec ((g$120$15107 (lambda (g$120$15109) (if (g$120$13211 g$120$15109) ((lambda (g$120$15111) (if g$120$15111 (begin '#f ((lambda (g$120$15113) (if g$120$15113 (begin '#f (map cons g$120$15111 g$120$15113)) '#f)) (g$120$15107 (g$120$13223 g$120$15109)))) '#f)) ((lambda (g$120$15115) (if (g$120$13211 g$120$15115) (begin '#f ((lambda (g$120$15117) (if g$120$15117 (begin '#f ((lambda (g$120$15119) (if g$120$15119 (begin '#f (append g$120$15117 g$120$15119)) '#f)) ((lambda (g$120$15121) (if (g$120$13211 g$120$15121) (begin '#f ((lambda (g$120$15123) (if g$120$15123 (begin '#f ((lambda (g$120$15125) (if g$120$15125 (begin '#f (append g$120$15123 g$120$15125)) '#f)) ((letrec ((g$120$15127 (lambda (g$120$15129) (if (g$120$13211 g$120$15129) ((lambda (g$120$15131) (if g$120$15131 (begin '#f ((lambda (g$120$15133) (if g$120$15133 (begin '#f (map cons g$120$15131 g$120$15133)) '#f)) (g$120$15127 (g$120$13223 g$120$15129)))) '#f)) ((lambda (g$120$15135) (list g$120$15135)) (g$120$13219 g$120$15129))) (if (g$120$13215 g$120$15129) (list (begin 'b** '())) '#f))))) g$120$15127) (g$120$13223 g$120$15121)))) '#f)) ((lambda (g$120$15137) (list g$120$15137)) (g$120$13219 g$120$15121)))) '#f)) (g$120$13223 g$120$15115)))) '#f)) ((lambda (g$120$15139) (list g$120$15139)) (g$120$13219 g$120$15115)))) '#f)) (g$120$13219 g$120$15109))) (if (g$120$13215 g$120$15109) (list (begin 'fmls* '()) (begin 'b* '()) (begin 'b** '())) '#f))))) g$120$15107) (g$120$13223 g$120$15101)))) '#f)) ((lambda (g$120$15141) '()) (g$120$13219 g$120$15101)))) '#f)) g$120$15081))) g$120$15075))) (set! g$120$13510 (lambda (g$120$15143 g$120$15144 g$120$15145) ((lambda (g$120$15149) ((lambda (g$120$15151) (if (if g$120$15151 (begin '#f (apply (lambda (g$120$15153 g$120$15154 g$120$15155) '#t) g$120$15151)) '#f) (apply (lambda (g$120$15159 g$120$15160 g$120$15161) (call-with-values (lambda () (g$120$13600 g$120$15159 (cons g$120$15160 g$120$15161) g$120$15144 g$120$15145)) (lambda (g$120$15165 g$120$15166) (g$120$13114 '#f g$120$15165 g$120$15166)))) g$120$15151) (error 'expander '"invalid syntax" (g$120$13243 g$120$15149 '())))) ((lambda (g$120$15169) (if (g$120$13211 g$120$15169) (begin '#f ((lambda (g$120$15171) (if g$120$15171 (begin '#f ((lambda (g$120$15173) (if g$120$15173 (begin '#f (append g$120$15171 g$120$15173)) '#f)) ((lambda (g$120$15175) (if (g$120$13211 g$120$15175) (begin '#f ((lambda (g$120$15177) (if g$120$15177 (begin '#f ((lambda (g$120$15179) (if g$120$15179 (begin '#f (append g$120$15177 g$120$15179)) '#f)) ((lambda (g$120$15181) (if (g$120$13211 g$120$15181) (begin '#f ((lambda (g$120$15183) (if g$120$15183 (begin '#f ((lambda (g$120$15185) (if g$120$15185 (begin '#f (append g$120$15183 g$120$15185)) '#f)) ((letrec ((g$120$15187 (lambda (g$120$15189) (if (g$120$13211 g$120$15189) ((lambda (g$120$15191) (if g$120$15191 (begin '#f ((lambda (g$120$15193) (if g$120$15193 (begin '#f (map cons g$120$15191 g$120$15193)) '#f)) (g$120$15187 (g$120$13223 g$120$15189)))) '#f)) ((lambda (g$120$15195) (list g$120$15195)) (g$120$13219 g$120$15189))) (if (g$120$13215 g$120$15189) (list (begin 'b* '())) '#f))))) g$120$15187) (g$120$13223 g$120$15181)))) '#f)) ((lambda (g$120$15197) (list g$120$15197)) (g$120$13219 g$120$15181)))) '#f)) (g$120$13223 g$120$15175)))) '#f)) ((lambda (g$120$15199) (list g$120$15199)) (g$120$13219 g$120$15175)))) '#f)) (g$120$13223 g$120$15169)))) '#f)) ((lambda (g$120$15201) '()) (g$120$13219 g$120$15169)))) '#f)) g$120$15149))) g$120$15143))) (set! g$120$13512 (lambda (g$120$15203) (g$120$13201 (letrec ((g$120$15205 (lambda (g$120$15207) (if (g$120$13177 g$120$15207) g$120$15207 (if (pair? g$120$15207) (cons (g$120$15205 (car g$120$15207)) (g$120$15205 (cdr g$120$15207))) (if (symbol? g$120$15207) (g$120$13478 g$120$15207) (if (vector? g$120$15207) (list->vector (map g$120$15205 (vector->list g$120$15207))) g$120$15207))))))) (g$120$15205 g$120$15203)) '() '()))) (set! g$120$13514 (lambda (g$120$15209) ((lambda (g$120$15211) ((lambda (g$120$15213) (if (if g$120$15213 (begin '#f (apply (lambda (g$120$15215 g$120$15216 g$120$15217 g$120$15218) '#t) g$120$15213)) '#f) (apply (lambda (g$120$15223 g$120$15224 g$120$15225 g$120$15226) (g$120$13512 (list 'syntax-case (cons 'list g$120$15224) '() (list g$120$15223 (cons 'begin (cons g$120$15225 g$120$15226)))))) g$120$15213) (error 'expander '"invalid syntax" (g$120$13243 g$120$15211 '())))) ((lambda (g$120$15231) (if (g$120$13211 g$120$15231) (begin '#f ((lambda (g$120$15233) (if g$120$15233 (begin '#f ((lambda (g$120$15235) (if g$120$15235 (begin '#f (append g$120$15233 g$120$15235)) '#f)) ((lambda (g$120$15237) (if (g$120$13211 g$120$15237) (begin '#f ((lambda (g$120$15239) (if g$120$15239 (begin '#f ((lambda (g$120$15241) (if g$120$15241 (begin '#f (append g$120$15239 g$120$15241)) '#f)) ((lambda (g$120$15243) (if (g$120$13211 g$120$15243) (begin '#f ((lambda (g$120$15245) (if g$120$15245 (begin '#f ((lambda (g$120$15247) (if g$120$15247 (begin '#f (append g$120$15245 g$120$15247)) '#f)) ((letrec ((g$120$15249 (lambda (g$120$15251) (if (g$120$13211 g$120$15251) ((lambda (g$120$15253) (if g$120$15253 (begin '#f ((lambda (g$120$15255) (if g$120$15255 (begin '#f (map cons g$120$15253 g$120$15255)) '#f)) (g$120$15249 (g$120$13223 g$120$15251)))) '#f)) ((lambda (g$120$15257) (list g$120$15257)) (g$120$13219 g$120$15251))) (if (g$120$13215 g$120$15251) (list (begin 'b* '())) '#f))))) g$120$15249) (g$120$13223 g$120$15243)))) '#f)) ((lambda (g$120$15259) (list g$120$15259)) (g$120$13219 g$120$15243)))) '#f)) (g$120$13223 g$120$15237)))) '#f)) ((letrec ((g$120$15261 (lambda (g$120$15263) (if (g$120$13211 g$120$15263) ((lambda (g$120$15265) (if g$120$15265 (begin '#f ((lambda (g$120$15267) (if g$120$15267 (begin '#f (map cons g$120$15265 g$120$15267)) '#f)) (g$120$15261 (g$120$13223 g$120$15263)))) '#f)) ((lambda (g$120$15269) (if (g$120$13211 g$120$15269) (begin '#f ((lambda (g$120$15271) (if g$120$15271 (begin '#f ((lambda (g$120$15273) (if g$120$15273 (begin '#f (append g$120$15271 g$120$15273)) '#f)) ((lambda (g$120$15275) (if (g$120$13211 g$120$15275) (begin '#f ((lambda (g$120$15277) (if g$120$15277 (begin '#f ((lambda (g$120$15279) (if g$120$15279 (begin '#f (append g$120$15277 g$120$15279)) '#f)) ((lambda (g$120$15281) (if (equal? (g$120$13245 g$120$15281) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$15275)))) '#f)) ((lambda (g$120$15283) (list g$120$15283)) (g$120$13219 g$120$15275)))) '#f)) (g$120$13223 g$120$15269)))) '#f)) ((lambda (g$120$15285) (list g$120$15285)) (g$120$13219 g$120$15269)))) '#f)) (g$120$13219 g$120$15263))) (if (g$120$13215 g$120$15263) (list (begin 'fml* '()) (begin 'expr* '())) '#f))))) g$120$15261) (g$120$13219 g$120$15237)))) '#f)) (g$120$13223 g$120$15231)))) '#f)) ((lambda (g$120$15287) '()) (g$120$13219 g$120$15231)))) '#f)) g$120$15211))) g$120$15209))) (set! g$120$13516 (lambda (g$120$15289) ((lambda (g$120$15291) ((lambda (g$120$15293) (if (if g$120$15293 (begin '#f (apply (lambda (g$120$15295 g$120$15296 g$120$15297 g$120$15298) '#t) g$120$15293)) '#f) (apply (lambda (g$120$15303 g$120$15304 g$120$15305 g$120$15306) (if (g$120$13235 g$120$15303) (g$120$13512 (cons (cons 'lambda (cons g$120$15303 (cons g$120$15305 g$120$15306))) g$120$15304)) (error 'expander '"invalid bindings" (g$120$13243 g$120$15289 '())))) g$120$15293) ((lambda (g$120$15311) ((lambda (g$120$15313) (if (if g$120$15313 (begin '#f (apply (lambda (g$120$15315 g$120$15316 g$120$15317 g$120$15318 g$120$15319) (g$120$13225 g$120$15315)) g$120$15313)) '#f) (apply (lambda (g$120$15325 g$120$15326 g$120$15327 g$120$15328 g$120$15329) (if (g$120$13235 g$120$15326) (g$120$13512 (list 'letrec (list (list g$120$15325 (cons 'lambda (cons g$120$15326 (cons g$120$15328 g$120$15329))))) (cons g$120$15325 g$120$15327))) (error 'expander '"invalid syntax" (g$120$13243 g$120$15289 '())))) g$120$15313) (error 'expander '"invalid syntax" (g$120$13243 g$120$15311 '())))) ((lambda (g$120$15335) (if (g$120$13211 g$120$15335) (begin '#f ((lambda (g$120$15337) (if g$120$15337 (begin '#f ((lambda (g$120$15339) (if g$120$15339 (begin '#f (append g$120$15337 g$120$15339)) '#f)) ((lambda (g$120$15341) (if (g$120$13211 g$120$15341) (begin '#f ((lambda (g$120$15343) (if g$120$15343 (begin '#f ((lambda (g$120$15345) (if g$120$15345 (begin '#f (append g$120$15343 g$120$15345)) '#f)) ((lambda (g$120$15347) (if (g$120$13211 g$120$15347) (begin '#f ((lambda (g$120$15349) (if g$120$15349 (begin '#f ((lambda (g$120$15351) (if g$120$15351 (begin '#f (append g$120$15349 g$120$15351)) '#f)) ((lambda (g$120$15353) (if (g$120$13211 g$120$15353) (begin '#f ((lambda (g$120$15355) (if g$120$15355 (begin '#f ((lambda (g$120$15357) (if g$120$15357 (begin '#f (append g$120$15355 g$120$15357)) '#f)) ((letrec ((g$120$15359 (lambda (g$120$15361) (if (g$120$13211 g$120$15361) ((lambda (g$120$15363) (if g$120$15363 (begin '#f ((lambda (g$120$15365) (if g$120$15365 (begin '#f (map cons g$120$15363 g$120$15365)) '#f)) (g$120$15359 (g$120$13223 g$120$15361)))) '#f)) ((lambda (g$120$15367) (list g$120$15367)) (g$120$13219 g$120$15361))) (if (g$120$13215 g$120$15361) (list (begin 'b* '())) '#f))))) g$120$15359) (g$120$13223 g$120$15353)))) '#f)) ((lambda (g$120$15369) (list g$120$15369)) (g$120$13219 g$120$15353)))) '#f)) (g$120$13223 g$120$15347)))) '#f)) ((letrec ((g$120$15371 (lambda (g$120$15373) (if (g$120$13211 g$120$15373) ((lambda (g$120$15375) (if g$120$15375 (begin '#f ((lambda (g$120$15377) (if g$120$15377 (begin '#f (map cons g$120$15375 g$120$15377)) '#f)) (g$120$15371 (g$120$13223 g$120$15373)))) '#f)) ((lambda (g$120$15379) (if (g$120$13211 g$120$15379) (begin '#f ((lambda (g$120$15381) (if g$120$15381 (begin '#f ((lambda (g$120$15383) (if g$120$15383 (begin '#f (append g$120$15381 g$120$15383)) '#f)) ((lambda (g$120$15385) (if (g$120$13211 g$120$15385) (begin '#f ((lambda (g$120$15387) (if g$120$15387 (begin '#f ((lambda (g$120$15389) (if g$120$15389 (begin '#f (append g$120$15387 g$120$15389)) '#f)) ((lambda (g$120$15391) (if (equal? (g$120$13245 g$120$15391) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$15385)))) '#f)) ((lambda (g$120$15393) (list g$120$15393)) (g$120$13219 g$120$15385)))) '#f)) (g$120$13223 g$120$15379)))) '#f)) ((lambda (g$120$15395) (list g$120$15395)) (g$120$13219 g$120$15379)))) '#f)) (g$120$13219 g$120$15373))) (if (g$120$13215 g$120$15373) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$120$15371) (g$120$13219 g$120$15347)))) '#f)) (g$120$13223 g$120$15341)))) '#f)) ((lambda (g$120$15397) (list g$120$15397)) (g$120$13219 g$120$15341)))) '#f)) (g$120$13223 g$120$15335)))) '#f)) ((lambda (g$120$15399) '()) (g$120$13219 g$120$15335)))) '#f)) g$120$15311))) g$120$15291))) ((lambda (g$120$15401) (if (g$120$13211 g$120$15401) (begin '#f ((lambda (g$120$15403) (if g$120$15403 (begin '#f ((lambda (g$120$15405) (if g$120$15405 (begin '#f (append g$120$15403 g$120$15405)) '#f)) ((lambda (g$120$15407) (if (g$120$13211 g$120$15407) (begin '#f ((lambda (g$120$15409) (if g$120$15409 (begin '#f ((lambda (g$120$15411) (if g$120$15411 (begin '#f (append g$120$15409 g$120$15411)) '#f)) ((lambda (g$120$15413) (if (g$120$13211 g$120$15413) (begin '#f ((lambda (g$120$15415) (if g$120$15415 (begin '#f ((lambda (g$120$15417) (if g$120$15417 (begin '#f (append g$120$15415 g$120$15417)) '#f)) ((letrec ((g$120$15419 (lambda (g$120$15421) (if (g$120$13211 g$120$15421) ((lambda (g$120$15423) (if g$120$15423 (begin '#f ((lambda (g$120$15425) (if g$120$15425 (begin '#f (map cons g$120$15423 g$120$15425)) '#f)) (g$120$15419 (g$120$13223 g$120$15421)))) '#f)) ((lambda (g$120$15427) (list g$120$15427)) (g$120$13219 g$120$15421))) (if (g$120$13215 g$120$15421) (list (begin 'b* '())) '#f))))) g$120$15419) (g$120$13223 g$120$15413)))) '#f)) ((lambda (g$120$15429) (list g$120$15429)) (g$120$13219 g$120$15413)))) '#f)) (g$120$13223 g$120$15407)))) '#f)) ((letrec ((g$120$15431 (lambda (g$120$15433) (if (g$120$13211 g$120$15433) ((lambda (g$120$15435) (if g$120$15435 (begin '#f ((lambda (g$120$15437) (if g$120$15437 (begin '#f (map cons g$120$15435 g$120$15437)) '#f)) (g$120$15431 (g$120$13223 g$120$15433)))) '#f)) ((lambda (g$120$15439) (if (g$120$13211 g$120$15439) (begin '#f ((lambda (g$120$15441) (if g$120$15441 (begin '#f ((lambda (g$120$15443) (if g$120$15443 (begin '#f (append g$120$15441 g$120$15443)) '#f)) ((lambda (g$120$15445) (if (g$120$13211 g$120$15445) (begin '#f ((lambda (g$120$15447) (if g$120$15447 (begin '#f ((lambda (g$120$15449) (if g$120$15449 (begin '#f (append g$120$15447 g$120$15449)) '#f)) ((lambda (g$120$15451) (if (equal? (g$120$13245 g$120$15451) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$15445)))) '#f)) ((lambda (g$120$15453) (list g$120$15453)) (g$120$13219 g$120$15445)))) '#f)) (g$120$13223 g$120$15439)))) '#f)) ((lambda (g$120$15455) (list g$120$15455)) (g$120$13219 g$120$15439)))) '#f)) (g$120$13219 g$120$15433))) (if (g$120$13215 g$120$15433) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$120$15431) (g$120$13219 g$120$15407)))) '#f)) (g$120$13223 g$120$15401)))) '#f)) ((lambda (g$120$15457) '()) (g$120$13219 g$120$15401)))) '#f)) g$120$15291))) g$120$15289))) (set! g$120$13518 (lambda (g$120$15459) ((lambda (g$120$15461) ((lambda (g$120$15463) (if (if g$120$15463 (begin '#f (apply (lambda (g$120$15465 g$120$15466 g$120$15467 g$120$15468) '#t) g$120$15463)) '#f) (apply (lambda (g$120$15473 g$120$15474 g$120$15475 g$120$15476) (if (g$120$13235 g$120$15474) (g$120$13512 (list 'make-traced-procedure (list 'quote g$120$15473) (cons 'lambda (cons g$120$15474 (cons g$120$15475 g$120$15476))))) (error 'expander '"invalid formals" (g$120$13243 g$120$15459 '())))) g$120$15463) ((lambda (g$120$15481) ((lambda (g$120$15483) (if (if g$120$15483 (begin '#f (apply (lambda (g$120$15485 g$120$15486 g$120$15487 g$120$15488 g$120$15489) '#t) g$120$15483)) '#f) (apply (lambda (g$120$15495 g$120$15496 g$120$15497 g$120$15498 g$120$15499) (if (g$120$13235 (cons g$120$15497 g$120$15496)) (g$120$13512 (list 'make-traced-procedure (list 'quote g$120$15495) (cons 'lambda (cons (append g$120$15496 g$120$15497) (cons g$120$15498 g$120$15499))))) (error 'expander '"invalid formals" (g$120$13243 g$120$15459 '())))) g$120$15483) (error 'expander '"invalid syntax" (g$120$13243 g$120$15481 '())))) ((lambda (g$120$15505) (if (g$120$13211 g$120$15505) (begin '#f ((lambda (g$120$15507) (if g$120$15507 (begin '#f ((lambda (g$120$15509) (if g$120$15509 (begin '#f (append g$120$15507 g$120$15509)) '#f)) ((lambda (g$120$15511) (if (g$120$13211 g$120$15511) (begin '#f ((lambda (g$120$15513) (if g$120$15513 (begin '#f ((lambda (g$120$15515) (if g$120$15515 (begin '#f (append g$120$15513 g$120$15515)) '#f)) ((lambda (g$120$15517) (if (g$120$13211 g$120$15517) (begin '#f ((lambda (g$120$15519) (if g$120$15519 (begin '#f ((lambda (g$120$15521) (if g$120$15521 (begin '#f (append g$120$15519 g$120$15521)) '#f)) ((lambda (g$120$15523) (if (g$120$13211 g$120$15523) (begin '#f ((lambda (g$120$15525) (if g$120$15525 (begin '#f ((lambda (g$120$15527) (if g$120$15527 (begin '#f (append g$120$15525 g$120$15527)) '#f)) ((letrec ((g$120$15529 (lambda (g$120$15531) (if (g$120$13211 g$120$15531) ((lambda (g$120$15533) (if g$120$15533 (begin '#f ((lambda (g$120$15535) (if g$120$15535 (begin '#f (map cons g$120$15533 g$120$15535)) '#f)) (g$120$15529 (g$120$13223 g$120$15531)))) '#f)) ((lambda (g$120$15537) (list g$120$15537)) (g$120$13219 g$120$15531))) (if (g$120$13215 g$120$15531) (list (begin 'b* '())) '#f))))) g$120$15529) (g$120$13223 g$120$15523)))) '#f)) ((lambda (g$120$15539) (list g$120$15539)) (g$120$13219 g$120$15523)))) '#f)) (g$120$13223 g$120$15517)))) '#f)) ((letrec ((g$120$15541 (lambda (g$120$15547) (if (g$120$13211 g$120$15547) ((lambda (g$120$15549) (if g$120$15549 (begin '#f ((lambda (g$120$15551) (if g$120$15551 (begin '#f (cons (map cons g$120$15549 (car g$120$15551)) (cdr g$120$15551))) '#f)) (g$120$15541 (g$120$13223 g$120$15547)))) '#f)) ((lambda (g$120$15553) (list g$120$15553)) (g$120$13219 g$120$15547))) ((lambda (g$120$15555) (if g$120$15555 (begin '#f (cons (list (begin 'fmls '())) g$120$15555)) '#f)) ((lambda (g$120$15557) (list g$120$15557)) g$120$15547)))))) (lambda (g$120$15543) ((lambda (g$120$15545) (if g$120$15545 (begin '#f (append (car g$120$15545) (cdr g$120$15545))) '#f)) (g$120$15541 g$120$15543)))) (g$120$13219 g$120$15517)))) '#f)) (g$120$13223 g$120$15511)))) '#f)) ((lambda (g$120$15559) (list g$120$15559)) (g$120$13219 g$120$15511)))) '#f)) (g$120$13223 g$120$15505)))) '#f)) ((lambda (g$120$15561) '()) (g$120$13219 g$120$15505)))) '#f)) g$120$15481))) g$120$15461))) ((lambda (g$120$15563) (if (g$120$13211 g$120$15563) (begin '#f ((lambda (g$120$15565) (if g$120$15565 (begin '#f ((lambda (g$120$15567) (if g$120$15567 (begin '#f (append g$120$15565 g$120$15567)) '#f)) ((lambda (g$120$15569) (if (g$120$13211 g$120$15569) (begin '#f ((lambda (g$120$15571) (if g$120$15571 (begin '#f ((lambda (g$120$15573) (if g$120$15573 (begin '#f (append g$120$15571 g$120$15573)) '#f)) ((lambda (g$120$15575) (if (g$120$13211 g$120$15575) (begin '#f ((lambda (g$120$15577) (if g$120$15577 (begin '#f ((lambda (g$120$15579) (if g$120$15579 (begin '#f (append g$120$15577 g$120$15579)) '#f)) ((lambda (g$120$15581) (if (g$120$13211 g$120$15581) (begin '#f ((lambda (g$120$15583) (if g$120$15583 (begin '#f ((lambda (g$120$15585) (if g$120$15585 (begin '#f (append g$120$15583 g$120$15585)) '#f)) ((letrec ((g$120$15587 (lambda (g$120$15589) (if (g$120$13211 g$120$15589) ((lambda (g$120$15591) (if g$120$15591 (begin '#f ((lambda (g$120$15593) (if g$120$15593 (begin '#f (map cons g$120$15591 g$120$15593)) '#f)) (g$120$15587 (g$120$13223 g$120$15589)))) '#f)) ((lambda (g$120$15595) (list g$120$15595)) (g$120$13219 g$120$15589))) (if (g$120$13215 g$120$15589) (list (begin 'b* '())) '#f))))) g$120$15587) (g$120$13223 g$120$15581)))) '#f)) ((lambda (g$120$15597) (list g$120$15597)) (g$120$13219 g$120$15581)))) '#f)) (g$120$13223 g$120$15575)))) '#f)) ((letrec ((g$120$15599 (lambda (g$120$15601) (if (g$120$13211 g$120$15601) ((lambda (g$120$15603) (if g$120$15603 (begin '#f ((lambda (g$120$15605) (if g$120$15605 (begin '#f (map cons g$120$15603 g$120$15605)) '#f)) (g$120$15599 (g$120$13223 g$120$15601)))) '#f)) ((lambda (g$120$15607) (list g$120$15607)) (g$120$13219 g$120$15601))) (if (g$120$13215 g$120$15601) (list (begin 'fmls '())) '#f))))) g$120$15599) (g$120$13219 g$120$15575)))) '#f)) (g$120$13223 g$120$15569)))) '#f)) ((lambda (g$120$15609) (list g$120$15609)) (g$120$13219 g$120$15569)))) '#f)) (g$120$13223 g$120$15563)))) '#f)) ((lambda (g$120$15611) '()) (g$120$13219 g$120$15563)))) '#f)) g$120$15461))) g$120$15459))) (set! g$120$13520 (lambda (g$120$15613) ((lambda (g$120$15615) ((lambda (g$120$15617) (if (if g$120$15617 (begin '#f (apply (lambda (g$120$15619 g$120$15620 g$120$15621 g$120$15622) '#t) g$120$15617)) '#f) (apply (lambda (g$120$15627 g$120$15628 g$120$15629 g$120$15630) (if (g$120$13235 g$120$15628) (g$120$13512 (list 'define g$120$15627 (list 'make-traced-procedure (list 'quote g$120$15627) (cons 'lambda (cons g$120$15628 (cons g$120$15629 g$120$15630)))))) (error 'expander '"invalid formals" (g$120$13243 g$120$15613 '())))) g$120$15617) ((lambda (g$120$15635) ((lambda (g$120$15637) (if (if g$120$15637 (begin '#f (apply (lambda (g$120$15639 g$120$15640 g$120$15641 g$120$15642 g$120$15643) '#t) g$120$15637)) '#f) (apply (lambda (g$120$15649 g$120$15650 g$120$15651 g$120$15652 g$120$15653) (if (g$120$13235 (cons g$120$15651 g$120$15650)) (g$120$13512 (list 'define g$120$15649 (list 'make-traced-procedure (list 'quote g$120$15649) (cons 'lambda (cons (append g$120$15650 g$120$15651) (cons g$120$15652 g$120$15653)))))) (error 'expander '"invalid formals" (g$120$13243 g$120$15613 '())))) g$120$15637) ((lambda (g$120$15659) ((lambda (g$120$15661) (if (if g$120$15661 (begin '#f (apply (lambda (g$120$15663 g$120$15664) '#t) g$120$15661)) '#f) (apply (lambda (g$120$15667 g$120$15668) (if (g$120$13225 g$120$15667) (g$120$13512 (list 'define g$120$15667 (list 'let (list (list 'v g$120$15668)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$120$15667) '(v))) '((error 'trace-define "not a procedure" v)))))))) (error 'expander '"invalid formals" (g$120$13243 g$120$15613 '())))) g$120$15661) (error 'expander '"invalid syntax" (g$120$13243 g$120$15659 '())))) ((lambda (g$120$15671) (if (g$120$13211 g$120$15671) (begin '#f ((lambda (g$120$15673) (if g$120$15673 (begin '#f ((lambda (g$120$15675) (if g$120$15675 (begin '#f (append g$120$15673 g$120$15675)) '#f)) ((lambda (g$120$15677) (if (g$120$13211 g$120$15677) (begin '#f ((lambda (g$120$15679) (if g$120$15679 (begin '#f ((lambda (g$120$15681) (if g$120$15681 (begin '#f (append g$120$15679 g$120$15681)) '#f)) ((lambda (g$120$15683) (if (g$120$13211 g$120$15683) (begin '#f ((lambda (g$120$15685) (if g$120$15685 (begin '#f ((lambda (g$120$15687) (if g$120$15687 (begin '#f (append g$120$15685 g$120$15687)) '#f)) ((lambda (g$120$15689) (if (equal? (g$120$13245 g$120$15689) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$15683)))) '#f)) ((lambda (g$120$15691) (list g$120$15691)) (g$120$13219 g$120$15683)))) '#f)) (g$120$13223 g$120$15677)))) '#f)) ((lambda (g$120$15693) (list g$120$15693)) (g$120$13219 g$120$15677)))) '#f)) (g$120$13223 g$120$15671)))) '#f)) ((lambda (g$120$15695) '()) (g$120$13219 g$120$15671)))) '#f)) g$120$15659))) g$120$15635))) ((lambda (g$120$15697) (if (g$120$13211 g$120$15697) (begin '#f ((lambda (g$120$15699) (if g$120$15699 (begin '#f ((lambda (g$120$15701) (if g$120$15701 (begin '#f (append g$120$15699 g$120$15701)) '#f)) ((lambda (g$120$15703) (if (g$120$13211 g$120$15703) (begin '#f ((lambda (g$120$15705) (if g$120$15705 (begin '#f ((lambda (g$120$15707) (if g$120$15707 (begin '#f (append g$120$15705 g$120$15707)) '#f)) ((lambda (g$120$15709) (if (g$120$13211 g$120$15709) (begin '#f ((lambda (g$120$15711) (if g$120$15711 (begin '#f ((lambda (g$120$15713) (if g$120$15713 (begin '#f (append g$120$15711 g$120$15713)) '#f)) ((letrec ((g$120$15715 (lambda (g$120$15717) (if (g$120$13211 g$120$15717) ((lambda (g$120$15719) (if g$120$15719 (begin '#f ((lambda (g$120$15721) (if g$120$15721 (begin '#f (map cons g$120$15719 g$120$15721)) '#f)) (g$120$15715 (g$120$13223 g$120$15717)))) '#f)) ((lambda (g$120$15723) (list g$120$15723)) (g$120$13219 g$120$15717))) (if (g$120$13215 g$120$15717) (list (begin 'b* '())) '#f))))) g$120$15715) (g$120$13223 g$120$15709)))) '#f)) ((lambda (g$120$15725) (list g$120$15725)) (g$120$13219 g$120$15709)))) '#f)) (g$120$13223 g$120$15703)))) '#f)) ((lambda (g$120$15727) (if (g$120$13211 g$120$15727) (begin '#f ((lambda (g$120$15729) (if g$120$15729 (begin '#f ((lambda (g$120$15731) (if g$120$15731 (begin '#f (append g$120$15729 g$120$15731)) '#f)) ((letrec ((g$120$15733 (lambda (g$120$15739) (if (g$120$13211 g$120$15739) ((lambda (g$120$15741) (if g$120$15741 (begin '#f ((lambda (g$120$15743) (if g$120$15743 (begin '#f (cons (map cons g$120$15741 (car g$120$15743)) (cdr g$120$15743))) '#f)) (g$120$15733 (g$120$13223 g$120$15739)))) '#f)) ((lambda (g$120$15745) (list g$120$15745)) (g$120$13219 g$120$15739))) ((lambda (g$120$15747) (if g$120$15747 (begin '#f (cons (list (begin 'fmls '())) g$120$15747)) '#f)) ((lambda (g$120$15749) (list g$120$15749)) g$120$15739)))))) (lambda (g$120$15735) ((lambda (g$120$15737) (if g$120$15737 (begin '#f (append (car g$120$15737) (cdr g$120$15737))) '#f)) (g$120$15733 g$120$15735)))) (g$120$13223 g$120$15727)))) '#f)) ((lambda (g$120$15751) (list g$120$15751)) (g$120$13219 g$120$15727)))) '#f)) (g$120$13219 g$120$15703)))) '#f)) (g$120$13223 g$120$15697)))) '#f)) ((lambda (g$120$15753) '()) (g$120$13219 g$120$15697)))) '#f)) g$120$15635))) g$120$15615))) ((lambda (g$120$15755) (if (g$120$13211 g$120$15755) (begin '#f ((lambda (g$120$15757) (if g$120$15757 (begin '#f ((lambda (g$120$15759) (if g$120$15759 (begin '#f (append g$120$15757 g$120$15759)) '#f)) ((lambda (g$120$15761) (if (g$120$13211 g$120$15761) (begin '#f ((lambda (g$120$15763) (if g$120$15763 (begin '#f ((lambda (g$120$15765) (if g$120$15765 (begin '#f (append g$120$15763 g$120$15765)) '#f)) ((lambda (g$120$15767) (if (g$120$13211 g$120$15767) (begin '#f ((lambda (g$120$15769) (if g$120$15769 (begin '#f ((lambda (g$120$15771) (if g$120$15771 (begin '#f (append g$120$15769 g$120$15771)) '#f)) ((letrec ((g$120$15773 (lambda (g$120$15775) (if (g$120$13211 g$120$15775) ((lambda (g$120$15777) (if g$120$15777 (begin '#f ((lambda (g$120$15779) (if g$120$15779 (begin '#f (map cons g$120$15777 g$120$15779)) '#f)) (g$120$15773 (g$120$13223 g$120$15775)))) '#f)) ((lambda (g$120$15781) (list g$120$15781)) (g$120$13219 g$120$15775))) (if (g$120$13215 g$120$15775) (list (begin 'b* '())) '#f))))) g$120$15773) (g$120$13223 g$120$15767)))) '#f)) ((lambda (g$120$15783) (list g$120$15783)) (g$120$13219 g$120$15767)))) '#f)) (g$120$13223 g$120$15761)))) '#f)) ((lambda (g$120$15785) (if (g$120$13211 g$120$15785) (begin '#f ((lambda (g$120$15787) (if g$120$15787 (begin '#f ((lambda (g$120$15789) (if g$120$15789 (begin '#f (append g$120$15787 g$120$15789)) '#f)) ((letrec ((g$120$15791 (lambda (g$120$15793) (if (g$120$13211 g$120$15793) ((lambda (g$120$15795) (if g$120$15795 (begin '#f ((lambda (g$120$15797) (if g$120$15797 (begin '#f (map cons g$120$15795 g$120$15797)) '#f)) (g$120$15791 (g$120$13223 g$120$15793)))) '#f)) ((lambda (g$120$15799) (list g$120$15799)) (g$120$13219 g$120$15793))) (if (g$120$13215 g$120$15793) (list (begin 'fmls '())) '#f))))) g$120$15791) (g$120$13223 g$120$15785)))) '#f)) ((lambda (g$120$15801) (list g$120$15801)) (g$120$13219 g$120$15785)))) '#f)) (g$120$13219 g$120$15761)))) '#f)) (g$120$13223 g$120$15755)))) '#f)) ((lambda (g$120$15803) '()) (g$120$13219 g$120$15755)))) '#f)) g$120$15615))) g$120$15613))) (set! g$120$13522 (lambda (g$120$15805) ((lambda (g$120$15807) (begin (set! g$120$15807 (lambda (g$120$15809 g$120$15810 g$120$15811) ((lambda (g$120$15815 g$120$15817) (begin (set! g$120$15815 (lambda (g$120$15911 g$120$15912) ((lambda (g$120$15915) ((lambda (g$120$15917) (if (if g$120$15917 (begin '#f (apply (lambda (g$120$15919 g$120$15920) '#t) g$120$15917)) '#f) (apply (lambda (g$120$15923 g$120$15924) ((lambda (g$120$15927) (list 'let (list (list g$120$15927 g$120$15923)) (list 'if g$120$15927 (list g$120$15924 g$120$15927) g$120$15912))) (gensym))) g$120$15917) ((lambda (g$120$15929) ((lambda (g$120$15931) (if (if g$120$15931 (begin '#f (apply (lambda (g$120$15933) '#t) g$120$15931)) '#f) (apply (lambda (g$120$15935) ((lambda (g$120$15937) (list 'let (list (list g$120$15937 g$120$15935)) (list 'if g$120$15937 g$120$15937 g$120$15912))) (gensym))) g$120$15931) ((lambda (g$120$15939) ((lambda (g$120$15941) (if (if g$120$15941 (begin '#f (apply (lambda (g$120$15943 g$120$15944 g$120$15945) '#t) g$120$15941)) '#f) (apply (lambda (g$120$15949 g$120$15950 g$120$15951) (list 'if g$120$15949 (cons 'begin (cons g$120$15950 g$120$15951)) g$120$15912)) g$120$15941) ((lambda (g$120$15955) ((lambda (g$120$15957) (if (if g$120$15957 (begin '#f (apply (lambda () '#t) g$120$15957)) '#f) (apply (lambda () (error 'expander '"invalid guard clause" (g$120$13243 g$120$15911 '()))) g$120$15957) (error 'expander '"invalid syntax" (g$120$13243 g$120$15955 '())))) ((lambda (g$120$15959) '()) g$120$15955))) g$120$15939))) ((lambda (g$120$15961) (if (g$120$13211 g$120$15961) (begin '#f ((lambda (g$120$15963) (if g$120$15963 (begin '#f ((lambda (g$120$15965) (if g$120$15965 (begin '#f (append g$120$15963 g$120$15965)) '#f)) ((lambda (g$120$15967) (if (g$120$13211 g$120$15967) (begin '#f ((lambda (g$120$15969) (if g$120$15969 (begin '#f ((lambda (g$120$15971) (if g$120$15971 (begin '#f (append g$120$15969 g$120$15971)) '#f)) ((letrec ((g$120$15973 (lambda (g$120$15975) (if (g$120$13211 g$120$15975) ((lambda (g$120$15977) (if g$120$15977 (begin '#f ((lambda (g$120$15979) (if g$120$15979 (begin '#f (map cons g$120$15977 g$120$15979)) '#f)) (g$120$15973 (g$120$13223 g$120$15975)))) '#f)) ((lambda (g$120$15981) (list g$120$15981)) (g$120$13219 g$120$15975))) (if (g$120$13215 g$120$15975) (list (begin 'v* '())) '#f))))) g$120$15973) (g$120$13223 g$120$15967)))) '#f)) ((lambda (g$120$15983) (list g$120$15983)) (g$120$13219 g$120$15967)))) '#f)) (g$120$13223 g$120$15961)))) '#f)) ((lambda (g$120$15985) (list g$120$15985)) (g$120$13219 g$120$15961)))) '#f)) g$120$15939))) g$120$15929))) ((lambda (g$120$15987) (if (g$120$13211 g$120$15987) (begin '#f ((lambda (g$120$15989) (if g$120$15989 (begin '#f ((lambda (g$120$15991) (if g$120$15991 (begin '#f (append g$120$15989 g$120$15991)) '#f)) ((lambda (g$120$15993) (if (equal? (g$120$13245 g$120$15993) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$15987)))) '#f)) ((lambda (g$120$15995) (list g$120$15995)) (g$120$13219 g$120$15987)))) '#f)) g$120$15929))) g$120$15915))) ((lambda (g$120$15997) (if (g$120$13211 g$120$15997) (begin '#f ((lambda (g$120$15999) (if g$120$15999 (begin '#f ((lambda (g$120$16001) (if g$120$16001 (begin '#f (append g$120$15999 g$120$16001)) '#f)) ((lambda (g$120$16003) (if (g$120$13211 g$120$16003) (begin '#f ((lambda (g$120$16005) (if g$120$16005 (begin '#f ((lambda (g$120$16007) (if g$120$16007 (begin '#f (append g$120$16005 g$120$16007)) '#f)) ((lambda (g$120$16009) (if (g$120$13211 g$120$16009) (begin '#f ((lambda (g$120$16011) (if g$120$16011 (begin '#f ((lambda (g$120$16013) (if g$120$16013 (begin '#f (append g$120$16011 g$120$16013)) '#f)) ((lambda (g$120$16015) (if (equal? (g$120$13245 g$120$16015) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16009)))) '#f)) ((lambda (g$120$16017) (list g$120$16017)) (g$120$13219 g$120$16009)))) '#f)) (g$120$13223 g$120$16003)))) '#f)) ((lambda (g$120$16019) (if (g$120$13225 g$120$16019) (if (g$120$13233 g$120$16019 (g$120$13478 '=>)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$16003)))) '#f)) (g$120$13223 g$120$15997)))) '#f)) ((lambda (g$120$16021) (list g$120$16021)) (g$120$13219 g$120$15997)))) '#f)) g$120$15915))) g$120$15911))) (set! g$120$15817 (lambda (g$120$15819) ((lambda (g$120$15821) ((lambda (g$120$15823) (if (if g$120$15823 (begin '#f (apply (lambda () '#t) g$120$15823)) '#f) (apply (lambda () ((lambda (g$120$15825) (values (list g$120$15825 (list 'lambda '() (list 'raise g$120$15809))) g$120$15825)) (gensym))) g$120$15823) ((lambda (g$120$15827) ((lambda (g$120$15829) (if (if g$120$15829 (begin '#f (apply (lambda (g$120$15831 g$120$15832) '#t) g$120$15829)) '#f) (apply (lambda (g$120$15835 g$120$15836) (values (cons 'begin (cons g$120$15835 g$120$15836)) '#f)) g$120$15829) ((lambda (g$120$15839) ((lambda (g$120$15841) (if (if g$120$15841 (begin '#f (apply (lambda (g$120$15843 g$120$15844) '#t) g$120$15841)) '#f) (apply (lambda (g$120$15847 g$120$15848) (call-with-values (lambda () (g$120$15817 g$120$15848)) (lambda (g$120$15851 g$120$15852) (values (g$120$15815 g$120$15847 g$120$15851) g$120$15852)))) g$120$15841) ((lambda (g$120$15855) ((lambda (g$120$15857) (if (if g$120$15857 (begin '#f (apply (lambda (g$120$15859) '#t) g$120$15857)) '#f) (apply (lambda (g$120$15861) (error 'expander '"invalid guard clause" (g$120$13243 g$120$15861 '()))) g$120$15857) (error 'expander '"invalid syntax" (g$120$13243 g$120$15855 '())))) ((lambda (g$120$15863) (list g$120$15863)) g$120$15855))) g$120$15839))) ((lambda (g$120$15865) (if (g$120$13211 g$120$15865) (begin '#f ((lambda (g$120$15867) (if g$120$15867 (begin '#f ((lambda (g$120$15869) (if g$120$15869 (begin '#f (append g$120$15867 g$120$15869)) '#f)) ((lambda (g$120$15871) (list g$120$15871)) (g$120$13223 g$120$15865)))) '#f)) ((lambda (g$120$15873) (list g$120$15873)) (g$120$13219 g$120$15865)))) '#f)) g$120$15839))) g$120$15827))) ((lambda (g$120$15875) (if (g$120$13211 g$120$15875) (begin '#f ((lambda (g$120$15877) (if g$120$15877 (begin '#f ((lambda (g$120$15879) (if g$120$15879 (begin '#f (append g$120$15877 g$120$15879)) '#f)) ((lambda (g$120$15881) (if (equal? (g$120$13245 g$120$15881) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$15875)))) '#f)) ((lambda (g$120$15883) (if (g$120$13211 g$120$15883) (begin '#f ((lambda (g$120$15885) (if g$120$15885 (begin '#f ((lambda (g$120$15887) (if g$120$15887 (begin '#f (append g$120$15885 g$120$15887)) '#f)) ((lambda (g$120$15889) (if (g$120$13211 g$120$15889) (begin '#f ((lambda (g$120$15891) (if g$120$15891 (begin '#f ((lambda (g$120$15893) (if g$120$15893 (begin '#f (append g$120$15891 g$120$15893)) '#f)) ((letrec ((g$120$15895 (lambda (g$120$15897) (if (g$120$13211 g$120$15897) ((lambda (g$120$15899) (if g$120$15899 (begin '#f ((lambda (g$120$15901) (if g$120$15901 (begin '#f (map cons g$120$15899 g$120$15901)) '#f)) (g$120$15895 (g$120$13223 g$120$15897)))) '#f)) ((lambda (g$120$15903) (list g$120$15903)) (g$120$13219 g$120$15897))) (if (g$120$13215 g$120$15897) (list (begin 'e* '())) '#f))))) g$120$15895) (g$120$13223 g$120$15889)))) '#f)) ((lambda (g$120$15905) (list g$120$15905)) (g$120$13219 g$120$15889)))) '#f)) (g$120$13223 g$120$15883)))) '#f)) ((lambda (g$120$15907) (if (g$120$13225 g$120$15907) (if (g$120$13233 g$120$15907 (g$120$13478 'else)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$15883)))) '#f)) (g$120$13219 g$120$15875)))) '#f)) g$120$15827))) g$120$15821))) ((lambda (g$120$15909) (if (equal? (g$120$13245 g$120$15909) '()) (begin '#f '()) '#f)) g$120$15821))) g$120$15819))) (call-with-values (lambda () (g$120$15817 g$120$15811)) (lambda (g$120$16023 g$120$16024) (if g$120$16024 (list (list 'call/cc (list 'lambda (list g$120$16024) (list g$120$15810 (list 'lambda '() g$120$16023))))) (list g$120$15810 (list 'lambda '() g$120$16023))))))) '#f '#f))) ((lambda (g$120$16027) ((lambda (g$120$16029) (if (if g$120$16029 (begin '#f (apply (lambda (g$120$16031 g$120$16032 g$120$16033 g$120$16034) (g$120$13225 g$120$16031)) g$120$16029)) '#f) (apply (lambda (g$120$16039 g$120$16040 g$120$16041 g$120$16042) ((lambda (g$120$16047) (g$120$13512 (list (list 'call/cc (list 'lambda (list g$120$16047) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g$120$16039) (g$120$15807 g$120$16039 g$120$16047 g$120$16040)) (cons 'lambda (cons '() (cons '#f (cons g$120$16041 g$120$16042))))))))))) (gensym))) g$120$16029) (error 'expander '"invalid syntax" (g$120$13243 g$120$16027 '())))) ((lambda (g$120$16049) (if (g$120$13211 g$120$16049) (begin '#f ((lambda (g$120$16051) (if g$120$16051 (begin '#f ((lambda (g$120$16053) (if g$120$16053 (begin '#f (append g$120$16051 g$120$16053)) '#f)) ((lambda (g$120$16055) (if (g$120$13211 g$120$16055) (begin '#f ((lambda (g$120$16057) (if g$120$16057 (begin '#f ((lambda (g$120$16059) (if g$120$16059 (begin '#f (append g$120$16057 g$120$16059)) '#f)) ((lambda (g$120$16061) (if (g$120$13211 g$120$16061) (begin '#f ((lambda (g$120$16063) (if g$120$16063 (begin '#f ((lambda (g$120$16065) (if g$120$16065 (begin '#f (append g$120$16063 g$120$16065)) '#f)) ((letrec ((g$120$16067 (lambda (g$120$16069) (if (g$120$13211 g$120$16069) ((lambda (g$120$16071) (if g$120$16071 (begin '#f ((lambda (g$120$16073) (if g$120$16073 (begin '#f (map cons g$120$16071 g$120$16073)) '#f)) (g$120$16067 (g$120$13223 g$120$16069)))) '#f)) ((lambda (g$120$16075) (list g$120$16075)) (g$120$13219 g$120$16069))) (if (g$120$13215 g$120$16069) (list (begin 'b* '())) '#f))))) g$120$16067) (g$120$13223 g$120$16061)))) '#f)) ((lambda (g$120$16077) (list g$120$16077)) (g$120$13219 g$120$16061)))) '#f)) (g$120$13223 g$120$16055)))) '#f)) ((lambda (g$120$16079) (if (g$120$13211 g$120$16079) (begin '#f ((lambda (g$120$16081) (if g$120$16081 (begin '#f ((lambda (g$120$16083) (if g$120$16083 (begin '#f (append g$120$16081 g$120$16083)) '#f)) ((letrec ((g$120$16085 (lambda (g$120$16087) (if (g$120$13211 g$120$16087) ((lambda (g$120$16089) (if g$120$16089 (begin '#f ((lambda (g$120$16091) (if g$120$16091 (begin '#f (map cons g$120$16089 g$120$16091)) '#f)) (g$120$16085 (g$120$13223 g$120$16087)))) '#f)) ((lambda (g$120$16093) (list g$120$16093)) (g$120$13219 g$120$16087))) (if (g$120$13215 g$120$16087) (list (begin 'clause* '())) '#f))))) g$120$16085) (g$120$13223 g$120$16079)))) '#f)) ((lambda (g$120$16095) (list g$120$16095)) (g$120$13219 g$120$16079)))) '#f)) (g$120$13219 g$120$16055)))) '#f)) (g$120$13223 g$120$16049)))) '#f)) ((lambda (g$120$16097) '()) (g$120$13219 g$120$16049)))) '#f)) g$120$16027))) g$120$15805))) '#f))) (set! g$120$13524 (lambda (g$120$16099) ((lambda (g$120$16101) (begin (set! g$120$16101 (lambda (g$120$16103) ((lambda (g$120$16105) (if g$120$16105 g$120$16105 (begin '#f (if (not (memq (car g$120$16103) (cdr g$120$16103))) (begin '#f (g$120$16101 (cdr g$120$16103))) '#f)))) (null? g$120$16103)))) ((lambda (g$120$16107) ((lambda (g$120$16109) (if (if g$120$16109 (begin '#f (apply (lambda (g$120$16111 g$120$16112 g$120$16113) (if (g$120$13225 g$120$16111) (if (g$120$13225 g$120$16113) (begin '#f (for-all g$120$13225 g$120$16112)) '#f) '#f)) g$120$16109)) '#f) (apply (lambda (g$120$16117 g$120$16118 g$120$16119) ((lambda (g$120$16123 g$120$16124) (begin (if (g$120$16101 g$120$16123) (void) (error 'expander '"duplicate names in enumeration set" (g$120$13243 g$120$16099 '()))) (g$120$13512 (list 'begin (list 'define g$120$16124 (list 'enum-set-constructor (list 'make-enumeration (list 'quote g$120$16123)))) (list 'define-syntax g$120$16117 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g$120$16123)) '(syntax 'n) (list 'syntax-error 'x '"not a member of set" (list 'quote g$120$16123))))))) (list 'define-syntax g$120$16119 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* |...|) (list 'begin (cons 'for-each (cons (list 'lambda '(n) '(unless (identifier? n) (syntax-error x "non-identifier argument")) (cons 'unless (cons (list 'memq '(syntax->datum n) (list 'quote g$120$16123)) '((syntax-error n "not a member of set"))))) '((syntax (n* |...|))))) (list 'syntax (cons g$120$16124 '('(n* |...|))))))))))))) (g$120$13707 g$120$16118) (gensym))) g$120$16109) (error 'expander '"invalid syntax" (g$120$13243 g$120$16107 '())))) ((lambda (g$120$16127) (if (g$120$13211 g$120$16127) (begin '#f ((lambda (g$120$16129) (if g$120$16129 (begin '#f ((lambda (g$120$16131) (if g$120$16131 (begin '#f (append g$120$16129 g$120$16131)) '#f)) ((lambda (g$120$16133) (if (g$120$13211 g$120$16133) (begin '#f ((lambda (g$120$16135) (if g$120$16135 (begin '#f ((lambda (g$120$16137) (if g$120$16137 (begin '#f (append g$120$16135 g$120$16137)) '#f)) ((lambda (g$120$16139) (if (g$120$13211 g$120$16139) (begin '#f ((lambda (g$120$16141) (if g$120$16141 (begin '#f ((lambda (g$120$16143) (if g$120$16143 (begin '#f (append g$120$16141 g$120$16143)) '#f)) ((lambda (g$120$16145) (if (g$120$13211 g$120$16145) (begin '#f ((lambda (g$120$16147) (if g$120$16147 (begin '#f ((lambda (g$120$16149) (if g$120$16149 (begin '#f (append g$120$16147 g$120$16149)) '#f)) ((lambda (g$120$16151) (if (equal? (g$120$13245 g$120$16151) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16145)))) '#f)) ((lambda (g$120$16153) (list g$120$16153)) (g$120$13219 g$120$16145)))) '#f)) (g$120$13223 g$120$16139)))) '#f)) ((letrec ((g$120$16155 (lambda (g$120$16157) (if (g$120$13211 g$120$16157) ((lambda (g$120$16159) (if g$120$16159 (begin '#f ((lambda (g$120$16161) (if g$120$16161 (begin '#f (map cons g$120$16159 g$120$16161)) '#f)) (g$120$16155 (g$120$13223 g$120$16157)))) '#f)) ((lambda (g$120$16163) (list g$120$16163)) (g$120$13219 g$120$16157))) (if (g$120$13215 g$120$16157) (list (begin 'id* '())) '#f))))) g$120$16155) (g$120$13219 g$120$16139)))) '#f)) (g$120$13223 g$120$16133)))) '#f)) ((lambda (g$120$16165) (list g$120$16165)) (g$120$13219 g$120$16133)))) '#f)) (g$120$13223 g$120$16127)))) '#f)) ((lambda (g$120$16167) '()) (g$120$13219 g$120$16127)))) '#f)) g$120$16107))) g$120$16099))) '#f))) (set! g$120$13526 (lambda (g$120$16169) ((lambda (g$120$16171) ((lambda (g$120$16173) (if (if g$120$16173 (begin '#f (apply (lambda (g$120$16175) '#t) g$120$16173)) '#f) (apply (lambda (g$120$16177) (g$120$13512 (list 'time-it (list 'quote g$120$16177) (list 'lambda '() g$120$16177)))) g$120$16173) (error 'expander '"invalid syntax" (g$120$13243 g$120$16171 '())))) ((lambda (g$120$16179) (if (g$120$13211 g$120$16179) (begin '#f ((lambda (g$120$16181) (if g$120$16181 (begin '#f ((lambda (g$120$16183) (if g$120$16183 (begin '#f (append g$120$16181 g$120$16183)) '#f)) ((lambda (g$120$16185) (if (g$120$13211 g$120$16185) (begin '#f ((lambda (g$120$16187) (if g$120$16187 (begin '#f ((lambda (g$120$16189) (if g$120$16189 (begin '#f (append g$120$16187 g$120$16189)) '#f)) ((lambda (g$120$16191) (if (equal? (g$120$13245 g$120$16191) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16185)))) '#f)) ((lambda (g$120$16193) (list g$120$16193)) (g$120$13219 g$120$16185)))) '#f)) (g$120$13223 g$120$16179)))) '#f)) ((lambda (g$120$16195) '()) (g$120$13219 g$120$16179)))) '#f)) g$120$16171))) g$120$16169))) (set! g$120$13528 (lambda (g$120$16197) ((lambda (g$120$16199) ((lambda (g$120$16201) (if (if g$120$16201 (begin '#f (apply (lambda (g$120$16203) '#t) g$120$16201)) '#f) (apply (lambda (g$120$16205) (g$120$13512 (list 'make-promise (list 'lambda '() g$120$16205)))) g$120$16201) (error 'expander '"invalid syntax" (g$120$13243 g$120$16199 '())))) ((lambda (g$120$16207) (if (g$120$13211 g$120$16207) (begin '#f ((lambda (g$120$16209) (if g$120$16209 (begin '#f ((lambda (g$120$16211) (if g$120$16211 (begin '#f (append g$120$16209 g$120$16211)) '#f)) ((lambda (g$120$16213) (if (g$120$13211 g$120$16213) (begin '#f ((lambda (g$120$16215) (if g$120$16215 (begin '#f ((lambda (g$120$16217) (if g$120$16217 (begin '#f (append g$120$16215 g$120$16217)) '#f)) ((lambda (g$120$16219) (if (equal? (g$120$13245 g$120$16219) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16213)))) '#f)) ((lambda (g$120$16221) (list g$120$16221)) (g$120$13219 g$120$16213)))) '#f)) (g$120$13223 g$120$16207)))) '#f)) ((lambda (g$120$16223) '()) (g$120$13219 g$120$16207)))) '#f)) g$120$16199))) g$120$16197))) (set! g$120$13530 (lambda (g$120$16225) ((lambda (g$120$16227) ((lambda (g$120$16229) (if (if g$120$16229 (begin '#f (apply (lambda (g$120$16231) '#t) g$120$16229)) '#f) (apply (lambda (g$120$16233) (g$120$13512 (list 'unless g$120$16233 (list 'error ''assert '"assertion failed" (list 'quote g$120$16233))))) g$120$16229) (error 'expander '"invalid syntax" (g$120$13243 g$120$16227 '())))) ((lambda (g$120$16235) (if (g$120$13211 g$120$16235) (begin '#f ((lambda (g$120$16237) (if g$120$16237 (begin '#f ((lambda (g$120$16239) (if g$120$16239 (begin '#f (append g$120$16237 g$120$16239)) '#f)) ((lambda (g$120$16241) (if (g$120$13211 g$120$16241) (begin '#f ((lambda (g$120$16243) (if g$120$16243 (begin '#f ((lambda (g$120$16245) (if g$120$16245 (begin '#f (append g$120$16243 g$120$16245)) '#f)) ((lambda (g$120$16247) (if (equal? (g$120$13245 g$120$16247) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16241)))) '#f)) ((lambda (g$120$16249) (list g$120$16249)) (g$120$13219 g$120$16241)))) '#f)) (g$120$13223 g$120$16235)))) '#f)) ((lambda (g$120$16251) '()) (g$120$13219 g$120$16235)))) '#f)) g$120$16227))) g$120$16225))) (set! g$120$13532 (lambda (g$120$16253) ((lambda (g$120$16255) ((lambda (g$120$16257) (if (if g$120$16257 (begin '#f (apply (lambda (g$120$16259) '#t) g$120$16257)) '#f) (apply (lambda (g$120$16261) ((lambda (g$120$16263) (if (memv g$120$16263 '(little)) (g$120$13512 ''little) (if (memv g$120$16263 '(big)) (g$120$13512 ''big) (error 'expander '"endianness must be big or little" (g$120$13243 g$120$16253 '()))))) (g$120$13707 g$120$16261))) g$120$16257) (error 'expander '"invalid syntax" (g$120$13243 g$120$16255 '())))) ((lambda (g$120$16264) (if (g$120$13211 g$120$16264) (begin '#f ((lambda (g$120$16266) (if g$120$16266 (begin '#f ((lambda (g$120$16268) (if g$120$16268 (begin '#f (append g$120$16266 g$120$16268)) '#f)) ((lambda (g$120$16270) (if (g$120$13211 g$120$16270) (begin '#f ((lambda (g$120$16272) (if g$120$16272 (begin '#f ((lambda (g$120$16274) (if g$120$16274 (begin '#f (append g$120$16272 g$120$16274)) '#f)) ((lambda (g$120$16276) (if (equal? (g$120$13245 g$120$16276) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16270)))) '#f)) ((lambda (g$120$16278) (list g$120$16278)) (g$120$13219 g$120$16270)))) '#f)) (g$120$13223 g$120$16264)))) '#f)) ((lambda (g$120$16280) '()) (g$120$13219 g$120$16264)))) '#f)) g$120$16255))) g$120$16253))) (set! g$120$13534 (lambda (g$120$16282) ((lambda (g$120$16284) ((lambda (g$120$16286) (if (if g$120$16286 (begin '#f (apply (lambda (g$120$16288) '#t) g$120$16286)) '#f) (apply (lambda (g$120$16290) (g$120$13512 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g$120$16290)) (list '(id e* |...|) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g$120$16290) '((syntax (e* |...|)))))))))) g$120$16286) ((lambda (g$120$16292) ((lambda (g$120$16294) (if (if g$120$16294 (begin '#f (apply (lambda (g$120$16296 g$120$16297 g$120$16298 g$120$16299 g$120$16300) (if (g$120$13225 g$120$16296) (if (g$120$13225 g$120$16298) (begin '#f (g$120$13225 g$120$16299)) '#f) '#f)) g$120$16294)) '#f) (apply (lambda (g$120$16306 g$120$16307 g$120$16308 g$120$16309 g$120$16310) (g$120$13512 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g$120$16307)) (list (list 'set! 'id g$120$16309) (list 'syntax g$120$16310)) (list '(id e* |...|) '(identifier? (syntax id)) (list 'syntax (cons g$120$16307 '(e* |...|))))))))) g$120$16294) (error 'expander '"invalid syntax" (g$120$13243 g$120$16292 '())))) ((lambda (g$120$16316) (if (g$120$13211 g$120$16316) (begin '#f ((lambda (g$120$16318) (if g$120$16318 (begin '#f ((lambda (g$120$16320) (if g$120$16320 (begin '#f (append g$120$16318 g$120$16320)) '#f)) ((lambda (g$120$16322) (if (g$120$13211 g$120$16322) (begin '#f ((lambda (g$120$16324) (if g$120$16324 (begin '#f ((lambda (g$120$16326) (if g$120$16326 (begin '#f (append g$120$16324 g$120$16326)) '#f)) ((lambda (g$120$16328) (if (g$120$13211 g$120$16328) (begin '#f ((lambda (g$120$16330) (if g$120$16330 (begin '#f ((lambda (g$120$16332) (if g$120$16332 (begin '#f (append g$120$16330 g$120$16332)) '#f)) ((lambda (g$120$16334) (if (equal? (g$120$13245 g$120$16334) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16328)))) '#f)) ((lambda (g$120$16336) (if (g$120$13211 g$120$16336) (begin '#f ((lambda (g$120$16338) (if g$120$16338 (begin '#f ((lambda (g$120$16340) (if g$120$16340 (begin '#f (append g$120$16338 g$120$16340)) '#f)) ((lambda (g$120$16342) (if (g$120$13211 g$120$16342) (begin '#f ((lambda (g$120$16344) (if g$120$16344 (begin '#f ((lambda (g$120$16346) (if g$120$16346 (begin '#f (append g$120$16344 g$120$16346)) '#f)) ((lambda (g$120$16348) (if (equal? (g$120$13245 g$120$16348) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16342)))) '#f)) ((lambda (g$120$16350) (list g$120$16350)) (g$120$13219 g$120$16342)))) '#f)) (g$120$13223 g$120$16336)))) '#f)) ((lambda (g$120$16352) (if (g$120$13211 g$120$16352) (begin '#f ((lambda (g$120$16354) (if g$120$16354 (begin '#f ((lambda (g$120$16356) (if g$120$16356 (begin '#f (append g$120$16354 g$120$16356)) '#f)) ((lambda (g$120$16358) (if (g$120$13211 g$120$16358) (begin '#f ((lambda (g$120$16360) (if g$120$16360 (begin '#f ((lambda (g$120$16362) (if g$120$16362 (begin '#f (append g$120$16360 g$120$16362)) '#f)) ((lambda (g$120$16364) (if (g$120$13211 g$120$16364) (begin '#f ((lambda (g$120$16366) (if g$120$16366 (begin '#f ((lambda (g$120$16368) (if g$120$16368 (begin '#f (append g$120$16366 g$120$16368)) '#f)) ((lambda (g$120$16370) (if (equal? (g$120$13245 g$120$16370) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16364)))) '#f)) ((lambda (g$120$16372) (list g$120$16372)) (g$120$13219 g$120$16364)))) '#f)) (g$120$13223 g$120$16358)))) '#f)) ((lambda (g$120$16374) (list g$120$16374)) (g$120$13219 g$120$16358)))) '#f)) (g$120$13223 g$120$16352)))) '#f)) ((lambda (g$120$16376) (if (g$120$13225 g$120$16376) (if (g$120$13233 g$120$16376 (g$120$13478 'set!)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$16352)))) '#f)) (g$120$13219 g$120$16336)))) '#f)) (g$120$13219 g$120$16328)))) '#f)) (g$120$13223 g$120$16322)))) '#f)) ((lambda (g$120$16378) (if (g$120$13211 g$120$16378) (begin '#f ((lambda (g$120$16380) (if g$120$16380 (begin '#f ((lambda (g$120$16382) (if g$120$16382 (begin '#f (append g$120$16380 g$120$16382)) '#f)) ((lambda (g$120$16384) (if (g$120$13211 g$120$16384) (begin '#f ((lambda (g$120$16386) (if g$120$16386 (begin '#f ((lambda (g$120$16388) (if g$120$16388 (begin '#f (append g$120$16386 g$120$16388)) '#f)) ((lambda (g$120$16390) (if (equal? (g$120$13245 g$120$16390) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16384)))) '#f)) ((lambda (g$120$16392) (list g$120$16392)) (g$120$13219 g$120$16384)))) '#f)) (g$120$13223 g$120$16378)))) '#f)) ((lambda (g$120$16394) (list g$120$16394)) (g$120$13219 g$120$16378)))) '#f)) (g$120$13219 g$120$16322)))) '#f)) (g$120$13223 g$120$16316)))) '#f)) ((lambda (g$120$16396) '()) (g$120$13219 g$120$16316)))) '#f)) g$120$16292))) g$120$16284))) ((lambda (g$120$16398) (if (g$120$13211 g$120$16398) (begin '#f ((lambda (g$120$16400) (if g$120$16400 (begin '#f ((lambda (g$120$16402) (if g$120$16402 (begin '#f (append g$120$16400 g$120$16402)) '#f)) ((lambda (g$120$16404) (if (g$120$13211 g$120$16404) (begin '#f ((lambda (g$120$16406) (if g$120$16406 (begin '#f ((lambda (g$120$16408) (if g$120$16408 (begin '#f (append g$120$16406 g$120$16408)) '#f)) ((lambda (g$120$16410) (if (equal? (g$120$13245 g$120$16410) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16404)))) '#f)) ((lambda (g$120$16412) (list g$120$16412)) (g$120$13219 g$120$16404)))) '#f)) (g$120$13223 g$120$16398)))) '#f)) ((lambda (g$120$16414) '()) (g$120$13219 g$120$16398)))) '#f)) g$120$16284))) g$120$16282))) (set! g$120$13536 (lambda (g$120$16416) ((lambda (g$120$16418) (begin (set! g$120$16418 (lambda (g$120$16420) ((lambda (g$120$16422) ((lambda (g$120$16424) (if (if g$120$16424 (begin '#f (apply (lambda (g$120$16426 g$120$16427) '#t) g$120$16424)) '#f) (apply (lambda (g$120$16430 g$120$16431) (list g$120$16430 g$120$16431 g$120$16430)) g$120$16424) ((lambda (g$120$16434) ((lambda (g$120$16436) (if (if g$120$16436 (begin '#f (apply (lambda (g$120$16438 g$120$16439 g$120$16440) '#t) g$120$16436)) '#f) (apply (lambda (g$120$16444 g$120$16445 g$120$16446) (list g$120$16444 g$120$16445 g$120$16446)) g$120$16436) ((lambda (g$120$16450) ((lambda (g$120$16452) (if (if g$120$16452 (begin '#f (apply (lambda () '#t) g$120$16452)) '#f) (apply (lambda () (error 'expander '"invalid binding" (g$120$13243 g$120$16416 '()))) g$120$16452) (error 'expander '"invalid syntax" (g$120$13243 g$120$16450 '())))) ((lambda (g$120$16454) '()) g$120$16450))) g$120$16434))) ((lambda (g$120$16456) (if (g$120$13211 g$120$16456) (begin '#f ((lambda (g$120$16458) (if g$120$16458 (begin '#f ((lambda (g$120$16460) (if g$120$16460 (begin '#f (append g$120$16458 g$120$16460)) '#f)) ((lambda (g$120$16462) (if (g$120$13211 g$120$16462) (begin '#f ((lambda (g$120$16464) (if g$120$16464 (begin '#f ((lambda (g$120$16466) (if g$120$16466 (begin '#f (append g$120$16464 g$120$16466)) '#f)) ((lambda (g$120$16468) (if (g$120$13211 g$120$16468) (begin '#f ((lambda (g$120$16470) (if g$120$16470 (begin '#f ((lambda (g$120$16472) (if g$120$16472 (begin '#f (append g$120$16470 g$120$16472)) '#f)) ((lambda (g$120$16474) (if (equal? (g$120$13245 g$120$16474) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16468)))) '#f)) ((lambda (g$120$16476) (list g$120$16476)) (g$120$13219 g$120$16468)))) '#f)) (g$120$13223 g$120$16462)))) '#f)) ((lambda (g$120$16478) (list g$120$16478)) (g$120$13219 g$120$16462)))) '#f)) (g$120$13223 g$120$16456)))) '#f)) ((lambda (g$120$16480) (list g$120$16480)) (g$120$13219 g$120$16456)))) '#f)) g$120$16434))) g$120$16422))) ((lambda (g$120$16482) (if (g$120$13211 g$120$16482) (begin '#f ((lambda (g$120$16484) (if g$120$16484 (begin '#f ((lambda (g$120$16486) (if g$120$16486 (begin '#f (append g$120$16484 g$120$16486)) '#f)) ((lambda (g$120$16488) (if (g$120$13211 g$120$16488) (begin '#f ((lambda (g$120$16490) (if g$120$16490 (begin '#f ((lambda (g$120$16492) (if g$120$16492 (begin '#f (append g$120$16490 g$120$16492)) '#f)) ((lambda (g$120$16494) (if (equal? (g$120$13245 g$120$16494) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16488)))) '#f)) ((lambda (g$120$16496) (list g$120$16496)) (g$120$13219 g$120$16488)))) '#f)) (g$120$13223 g$120$16482)))) '#f)) ((lambda (g$120$16498) (list g$120$16498)) (g$120$13219 g$120$16482)))) '#f)) g$120$16422))) g$120$16420))) ((lambda (g$120$16500) ((lambda (g$120$16502) (if (if g$120$16502 (begin '#f (apply (lambda (g$120$16504 g$120$16505 g$120$16506 g$120$16507) '#t) g$120$16502)) '#f) (apply (lambda (g$120$16512 g$120$16513 g$120$16514 g$120$16515) ((lambda (g$120$16520) ((lambda (g$120$16522) (if (if g$120$16522 (begin '#f (apply (lambda (g$120$16524 g$120$16525 g$120$16526) '#t) g$120$16522)) '#f) (apply (lambda (g$120$16530 g$120$16531 g$120$16532) (if (g$120$13235 g$120$16530) (g$120$13512 (list 'letrec (list (list 'loop (list 'lambda g$120$16530 (list 'if g$120$16513 (cons 'begin (cons '(if #f #f) g$120$16514)) (cons 'begin (append g$120$16515 (list (cons 'loop g$120$16532)))))))) (cons 'loop g$120$16531))) (error 'expander '"invalid bindings" (g$120$13243 g$120$16416 '())))) g$120$16522) (error 'expander '"invalid syntax" (g$120$13243 g$120$16520 '())))) ((letrec ((g$120$16536 (lambda (g$120$16538) (if (g$120$13211 g$120$16538) ((lambda (g$120$16540) (if g$120$16540 (begin '#f ((lambda (g$120$16542) (if g$120$16542 (begin '#f (map cons g$120$16540 g$120$16542)) '#f)) (g$120$16536 (g$120$13223 g$120$16538)))) '#f)) ((lambda (g$120$16544) (if (g$120$13211 g$120$16544) (begin '#f ((lambda (g$120$16546) (if g$120$16546 (begin '#f ((lambda (g$120$16548) (if g$120$16548 (begin '#f (append g$120$16546 g$120$16548)) '#f)) ((lambda (g$120$16550) (if (g$120$13211 g$120$16550) (begin '#f ((lambda (g$120$16552) (if g$120$16552 (begin '#f ((lambda (g$120$16554) (if g$120$16554 (begin '#f (append g$120$16552 g$120$16554)) '#f)) ((lambda (g$120$16556) (if (g$120$13211 g$120$16556) (begin '#f ((lambda (g$120$16558) (if g$120$16558 (begin '#f ((lambda (g$120$16560) (if g$120$16560 (begin '#f (append g$120$16558 g$120$16560)) '#f)) ((lambda (g$120$16562) (if (equal? (g$120$13245 g$120$16562) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16556)))) '#f)) ((lambda (g$120$16564) (list g$120$16564)) (g$120$13219 g$120$16556)))) '#f)) (g$120$13223 g$120$16550)))) '#f)) ((lambda (g$120$16566) (list g$120$16566)) (g$120$13219 g$120$16550)))) '#f)) (g$120$13223 g$120$16544)))) '#f)) ((lambda (g$120$16568) (list g$120$16568)) (g$120$13219 g$120$16544)))) '#f)) (g$120$13219 g$120$16538))) (if (g$120$13215 g$120$16538) (list (begin 'x* '()) (begin 'init* '()) (begin 'step* '())) '#f))))) g$120$16536) g$120$16520))) (map g$120$16418 g$120$16512))) g$120$16502) (error 'expander '"invalid syntax" (g$120$13243 g$120$16500 '())))) ((lambda (g$120$16570) (if (g$120$13211 g$120$16570) (begin '#f ((lambda (g$120$16572) (if g$120$16572 (begin '#f ((lambda (g$120$16574) (if g$120$16574 (begin '#f (append g$120$16572 g$120$16574)) '#f)) ((lambda (g$120$16576) (if (g$120$13211 g$120$16576) (begin '#f ((lambda (g$120$16578) (if g$120$16578 (begin '#f ((lambda (g$120$16580) (if g$120$16580 (begin '#f (append g$120$16578 g$120$16580)) '#f)) ((lambda (g$120$16582) (if (g$120$13211 g$120$16582) (begin '#f ((lambda (g$120$16584) (if g$120$16584 (begin '#f ((lambda (g$120$16586) (if g$120$16586 (begin '#f (append g$120$16584 g$120$16586)) '#f)) ((letrec ((g$120$16588 (lambda (g$120$16590) (if (g$120$13211 g$120$16590) ((lambda (g$120$16592) (if g$120$16592 (begin '#f ((lambda (g$120$16594) (if g$120$16594 (begin '#f (map cons g$120$16592 g$120$16594)) '#f)) (g$120$16588 (g$120$13223 g$120$16590)))) '#f)) ((lambda (g$120$16596) (list g$120$16596)) (g$120$13219 g$120$16590))) (if (g$120$13215 g$120$16590) (list (begin 'command* '())) '#f))))) g$120$16588) (g$120$13223 g$120$16582)))) '#f)) ((lambda (g$120$16598) (if (g$120$13211 g$120$16598) (begin '#f ((lambda (g$120$16600) (if g$120$16600 (begin '#f ((lambda (g$120$16602) (if g$120$16602 (begin '#f (append g$120$16600 g$120$16602)) '#f)) ((letrec ((g$120$16604 (lambda (g$120$16606) (if (g$120$13211 g$120$16606) ((lambda (g$120$16608) (if g$120$16608 (begin '#f ((lambda (g$120$16610) (if g$120$16610 (begin '#f (map cons g$120$16608 g$120$16610)) '#f)) (g$120$16604 (g$120$13223 g$120$16606)))) '#f)) ((lambda (g$120$16612) (list g$120$16612)) (g$120$13219 g$120$16606))) (if (g$120$13215 g$120$16606) (list (begin 'expr* '())) '#f))))) g$120$16604) (g$120$13223 g$120$16598)))) '#f)) ((lambda (g$120$16614) (list g$120$16614)) (g$120$13219 g$120$16598)))) '#f)) (g$120$13219 g$120$16582)))) '#f)) (g$120$13223 g$120$16576)))) '#f)) ((letrec ((g$120$16616 (lambda (g$120$16618) (if (g$120$13211 g$120$16618) ((lambda (g$120$16620) (if g$120$16620 (begin '#f ((lambda (g$120$16622) (if g$120$16622 (begin '#f (map cons g$120$16620 g$120$16622)) '#f)) (g$120$16616 (g$120$13223 g$120$16618)))) '#f)) ((lambda (g$120$16624) (list g$120$16624)) (g$120$13219 g$120$16618))) (if (g$120$13215 g$120$16618) (list (begin 'binding* '())) '#f))))) g$120$16616) (g$120$13219 g$120$16576)))) '#f)) (g$120$13223 g$120$16570)))) '#f)) ((lambda (g$120$16626) '()) (g$120$13219 g$120$16570)))) '#f)) g$120$16500))) g$120$16416))) '#f))) (set! g$120$13538 (lambda (g$120$16628) ((lambda (g$120$16630) ((lambda (g$120$16632) (if (if g$120$16632 (begin '#f (apply (lambda (g$120$16634 g$120$16635 g$120$16636 g$120$16637) (for-all g$120$13225 g$120$16634)) g$120$16632)) '#f) (apply (lambda (g$120$16642 g$120$16643 g$120$16644 g$120$16645) (g$120$13512 (letrec ((g$120$16650 (lambda (g$120$16652) (if (null? g$120$16652) (cons 'let (cons '() (cons g$120$16644 g$120$16645))) (list 'let (list (car g$120$16652)) (g$120$16650 (cdr g$120$16652))))))) (g$120$16650 (map list g$120$16642 g$120$16643))))) g$120$16632) (error 'expander '"invalid syntax" (g$120$13243 g$120$16630 '())))) ((lambda (g$120$16654) (if (g$120$13211 g$120$16654) (begin '#f ((lambda (g$120$16656) (if g$120$16656 (begin '#f ((lambda (g$120$16658) (if g$120$16658 (begin '#f (append g$120$16656 g$120$16658)) '#f)) ((lambda (g$120$16660) (if (g$120$13211 g$120$16660) (begin '#f ((lambda (g$120$16662) (if g$120$16662 (begin '#f ((lambda (g$120$16664) (if g$120$16664 (begin '#f (append g$120$16662 g$120$16664)) '#f)) ((lambda (g$120$16666) (if (g$120$13211 g$120$16666) (begin '#f ((lambda (g$120$16668) (if g$120$16668 (begin '#f ((lambda (g$120$16670) (if g$120$16670 (begin '#f (append g$120$16668 g$120$16670)) '#f)) ((letrec ((g$120$16672 (lambda (g$120$16674) (if (g$120$13211 g$120$16674) ((lambda (g$120$16676) (if g$120$16676 (begin '#f ((lambda (g$120$16678) (if g$120$16678 (begin '#f (map cons g$120$16676 g$120$16678)) '#f)) (g$120$16672 (g$120$13223 g$120$16674)))) '#f)) ((lambda (g$120$16680) (list g$120$16680)) (g$120$13219 g$120$16674))) (if (g$120$13215 g$120$16674) (list (begin 'b* '())) '#f))))) g$120$16672) (g$120$13223 g$120$16666)))) '#f)) ((lambda (g$120$16682) (list g$120$16682)) (g$120$13219 g$120$16666)))) '#f)) (g$120$13223 g$120$16660)))) '#f)) ((letrec ((g$120$16684 (lambda (g$120$16686) (if (g$120$13211 g$120$16686) ((lambda (g$120$16688) (if g$120$16688 (begin '#f ((lambda (g$120$16690) (if g$120$16690 (begin '#f (map cons g$120$16688 g$120$16690)) '#f)) (g$120$16684 (g$120$13223 g$120$16686)))) '#f)) ((lambda (g$120$16692) (if (g$120$13211 g$120$16692) (begin '#f ((lambda (g$120$16694) (if g$120$16694 (begin '#f ((lambda (g$120$16696) (if g$120$16696 (begin '#f (append g$120$16694 g$120$16696)) '#f)) ((lambda (g$120$16698) (if (g$120$13211 g$120$16698) (begin '#f ((lambda (g$120$16700) (if g$120$16700 (begin '#f ((lambda (g$120$16702) (if g$120$16702 (begin '#f (append g$120$16700 g$120$16702)) '#f)) ((lambda (g$120$16704) (if (equal? (g$120$13245 g$120$16704) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16698)))) '#f)) ((lambda (g$120$16706) (list g$120$16706)) (g$120$13219 g$120$16698)))) '#f)) (g$120$13223 g$120$16692)))) '#f)) ((lambda (g$120$16708) (list g$120$16708)) (g$120$13219 g$120$16692)))) '#f)) (g$120$13219 g$120$16686))) (if (g$120$13215 g$120$16686) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$120$16684) (g$120$13219 g$120$16660)))) '#f)) (g$120$13223 g$120$16654)))) '#f)) ((lambda (g$120$16710) '()) (g$120$13219 g$120$16654)))) '#f)) g$120$16630))) g$120$16628))) (set! g$120$13540 (lambda (g$120$16712) ((lambda (g$120$16714) ((lambda (g$120$16716) (if (if g$120$16716 (begin '#f (apply (lambda () '#t) g$120$16716)) '#f) (apply (lambda () '#f) g$120$16716) ((lambda (g$120$16718) ((lambda (g$120$16720) (if (if g$120$16720 (begin '#f (apply (lambda (g$120$16722 g$120$16723) '#t) g$120$16720)) '#f) (apply (lambda (g$120$16726 g$120$16727) (g$120$13512 (letrec ((g$120$16730 (lambda (g$120$16732 g$120$16733) (if (null? g$120$16733) (list 'begin '#f g$120$16732) (list 'let (list (list 't g$120$16732)) (list 'if 't 't (g$120$16730 (car g$120$16733) (cdr g$120$16733)))))))) (g$120$16730 g$120$16726 g$120$16727)))) g$120$16720) (error 'expander '"invalid syntax" (g$120$13243 g$120$16718 '())))) ((lambda (g$120$16736) (if (g$120$13211 g$120$16736) (begin '#f ((lambda (g$120$16738) (if g$120$16738 (begin '#f ((lambda (g$120$16740) (if g$120$16740 (begin '#f (append g$120$16738 g$120$16740)) '#f)) ((lambda (g$120$16742) (if (g$120$13211 g$120$16742) (begin '#f ((lambda (g$120$16744) (if g$120$16744 (begin '#f ((lambda (g$120$16746) (if g$120$16746 (begin '#f (append g$120$16744 g$120$16746)) '#f)) ((letrec ((g$120$16748 (lambda (g$120$16750) (if (g$120$13211 g$120$16750) ((lambda (g$120$16752) (if g$120$16752 (begin '#f ((lambda (g$120$16754) (if g$120$16754 (begin '#f (map cons g$120$16752 g$120$16754)) '#f)) (g$120$16748 (g$120$13223 g$120$16750)))) '#f)) ((lambda (g$120$16756) (list g$120$16756)) (g$120$13219 g$120$16750))) (if (g$120$13215 g$120$16750) (list (begin 'e* '())) '#f))))) g$120$16748) (g$120$13223 g$120$16742)))) '#f)) ((lambda (g$120$16758) (list g$120$16758)) (g$120$13219 g$120$16742)))) '#f)) (g$120$13223 g$120$16736)))) '#f)) ((lambda (g$120$16760) '()) (g$120$13219 g$120$16736)))) '#f)) g$120$16718))) g$120$16714))) ((lambda (g$120$16762) (if (g$120$13211 g$120$16762) (begin '#f ((lambda (g$120$16764) (if g$120$16764 (begin '#f ((lambda (g$120$16766) (if g$120$16766 (begin '#f (append g$120$16764 g$120$16766)) '#f)) ((lambda (g$120$16768) (if (equal? (g$120$13245 g$120$16768) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16762)))) '#f)) ((lambda (g$120$16770) '()) (g$120$13219 g$120$16762)))) '#f)) g$120$16714))) g$120$16712))) (set! g$120$13542 (lambda (g$120$16772) ((lambda (g$120$16774) ((lambda (g$120$16776) (if (if g$120$16776 (begin '#f (apply (lambda () '#t) g$120$16776)) '#f) (apply (lambda () '#t) g$120$16776) ((lambda (g$120$16778) ((lambda (g$120$16780) (if (if g$120$16780 (begin '#f (apply (lambda (g$120$16782 g$120$16783) '#t) g$120$16780)) '#f) (apply (lambda (g$120$16786 g$120$16787) (g$120$13512 (letrec ((g$120$16790 (lambda (g$120$16792 g$120$16793) (if (null? g$120$16793) (list 'begin '#f g$120$16792) (cons 'if (cons g$120$16792 (cons (g$120$16790 (car g$120$16793) (cdr g$120$16793)) '(#f)))))))) (g$120$16790 g$120$16786 g$120$16787)))) g$120$16780) (error 'expander '"invalid syntax" (g$120$13243 g$120$16778 '())))) ((lambda (g$120$16796) (if (g$120$13211 g$120$16796) (begin '#f ((lambda (g$120$16798) (if g$120$16798 (begin '#f ((lambda (g$120$16800) (if g$120$16800 (begin '#f (append g$120$16798 g$120$16800)) '#f)) ((lambda (g$120$16802) (if (g$120$13211 g$120$16802) (begin '#f ((lambda (g$120$16804) (if g$120$16804 (begin '#f ((lambda (g$120$16806) (if g$120$16806 (begin '#f (append g$120$16804 g$120$16806)) '#f)) ((letrec ((g$120$16808 (lambda (g$120$16810) (if (g$120$13211 g$120$16810) ((lambda (g$120$16812) (if g$120$16812 (begin '#f ((lambda (g$120$16814) (if g$120$16814 (begin '#f (map cons g$120$16812 g$120$16814)) '#f)) (g$120$16808 (g$120$13223 g$120$16810)))) '#f)) ((lambda (g$120$16816) (list g$120$16816)) (g$120$13219 g$120$16810))) (if (g$120$13215 g$120$16810) (list (begin 'e* '())) '#f))))) g$120$16808) (g$120$13223 g$120$16802)))) '#f)) ((lambda (g$120$16818) (list g$120$16818)) (g$120$13219 g$120$16802)))) '#f)) (g$120$13223 g$120$16796)))) '#f)) ((lambda (g$120$16820) '()) (g$120$13219 g$120$16796)))) '#f)) g$120$16778))) g$120$16774))) ((lambda (g$120$16822) (if (g$120$13211 g$120$16822) (begin '#f ((lambda (g$120$16824) (if g$120$16824 (begin '#f ((lambda (g$120$16826) (if g$120$16826 (begin '#f (append g$120$16824 g$120$16826)) '#f)) ((lambda (g$120$16828) (if (equal? (g$120$13245 g$120$16828) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16822)))) '#f)) ((lambda (g$120$16830) '()) (g$120$13219 g$120$16822)))) '#f)) g$120$16774))) g$120$16772))) (set! g$120$13544 (lambda (g$120$16832) ((lambda (g$120$16834) ((lambda (g$120$16836) (if (if g$120$16836 (begin '#f (apply (lambda (g$120$16838 g$120$16839) '#t) g$120$16836)) '#f) (apply (lambda (g$120$16842 g$120$16843) (g$120$13512 (letrec ((g$120$16846 (lambda (g$120$16848 g$120$16849) (if (null? g$120$16849) ((lambda (g$120$16852) ((lambda (g$120$16854) (if (if g$120$16854 (begin '#f (apply (lambda (g$120$16856 g$120$16857) '#t) g$120$16854)) '#f) (apply (lambda (g$120$16860 g$120$16861) (cons 'begin (cons g$120$16860 g$120$16861))) g$120$16854) ((lambda (g$120$16864) ((lambda (g$120$16866) (if (if g$120$16866 (begin '#f (apply (lambda (g$120$16868 g$120$16869) '#t) g$120$16866)) '#f) (apply (lambda (g$120$16872 g$120$16873) (list 'let (list (list 't g$120$16872)) (list 'if 't (cons g$120$16873 '(t))))) g$120$16866) ((lambda (g$120$16876) ((lambda (g$120$16878) (if (if g$120$16878 (begin '#f (apply (lambda (g$120$16880) '#t) g$120$16878)) '#f) (apply (lambda (g$120$16882) (cons 'or (cons g$120$16882 '((if #f #f))))) g$120$16878) ((lambda (g$120$16884) ((lambda (g$120$16886) (if (if g$120$16886 (begin '#f (apply (lambda (g$120$16888 g$120$16889) '#t) g$120$16886)) '#f) (apply (lambda (g$120$16892 g$120$16893) (list 'if g$120$16892 (cons 'begin g$120$16893))) g$120$16886) ((lambda (g$120$16896) ((lambda (g$120$16898) (if (if g$120$16898 (begin '#f (apply (lambda () '#t) g$120$16898)) '#f) (apply (lambda () (error 'expander '"invalid last clause" (g$120$13243 g$120$16832 '()))) g$120$16898) (error 'expander '"invalid syntax" (g$120$13243 g$120$16896 '())))) ((lambda (g$120$16900) '()) g$120$16896))) g$120$16884))) ((lambda (g$120$16902) (if (g$120$13211 g$120$16902) (begin '#f ((lambda (g$120$16904) (if g$120$16904 (begin '#f ((lambda (g$120$16906) (if g$120$16906 (begin '#f (append g$120$16904 g$120$16906)) '#f)) ((letrec ((g$120$16908 (lambda (g$120$16910) (if (g$120$13211 g$120$16910) ((lambda (g$120$16912) (if g$120$16912 (begin '#f ((lambda (g$120$16914) (if g$120$16914 (begin '#f (map cons g$120$16912 g$120$16914)) '#f)) (g$120$16908 (g$120$13223 g$120$16910)))) '#f)) ((lambda (g$120$16916) (list g$120$16916)) (g$120$13219 g$120$16910))) (if (g$120$13215 g$120$16910) (list (begin 'e* '())) '#f))))) g$120$16908) (g$120$13223 g$120$16902)))) '#f)) ((lambda (g$120$16918) (list g$120$16918)) (g$120$13219 g$120$16902)))) '#f)) g$120$16884))) g$120$16876))) ((lambda (g$120$16920) (if (g$120$13211 g$120$16920) (begin '#f ((lambda (g$120$16922) (if g$120$16922 (begin '#f ((lambda (g$120$16924) (if g$120$16924 (begin '#f (append g$120$16922 g$120$16924)) '#f)) ((lambda (g$120$16926) (if (equal? (g$120$13245 g$120$16926) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16920)))) '#f)) ((lambda (g$120$16928) (list g$120$16928)) (g$120$13219 g$120$16920)))) '#f)) g$120$16876))) g$120$16864))) ((lambda (g$120$16930) (if (g$120$13211 g$120$16930) (begin '#f ((lambda (g$120$16932) (if g$120$16932 (begin '#f ((lambda (g$120$16934) (if g$120$16934 (begin '#f (append g$120$16932 g$120$16934)) '#f)) ((lambda (g$120$16936) (if (g$120$13211 g$120$16936) (begin '#f ((lambda (g$120$16938) (if g$120$16938 (begin '#f ((lambda (g$120$16940) (if g$120$16940 (begin '#f (append g$120$16938 g$120$16940)) '#f)) ((lambda (g$120$16942) (if (g$120$13211 g$120$16942) (begin '#f ((lambda (g$120$16944) (if g$120$16944 (begin '#f ((lambda (g$120$16946) (if g$120$16946 (begin '#f (append g$120$16944 g$120$16946)) '#f)) ((lambda (g$120$16948) (if (equal? (g$120$13245 g$120$16948) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$16942)))) '#f)) ((lambda (g$120$16950) (list g$120$16950)) (g$120$13219 g$120$16942)))) '#f)) (g$120$13223 g$120$16936)))) '#f)) ((lambda (g$120$16952) (if (g$120$13225 g$120$16952) (if (g$120$13233 g$120$16952 (g$120$13478 '=>)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$16936)))) '#f)) (g$120$13223 g$120$16930)))) '#f)) ((lambda (g$120$16954) (list g$120$16954)) (g$120$13219 g$120$16930)))) '#f)) g$120$16864))) g$120$16852))) ((lambda (g$120$16956) (if (g$120$13211 g$120$16956) (begin '#f ((lambda (g$120$16958) (if g$120$16958 (begin '#f ((lambda (g$120$16960) (if g$120$16960 (begin '#f (append g$120$16958 g$120$16960)) '#f)) ((lambda (g$120$16962) (if (g$120$13211 g$120$16962) (begin '#f ((lambda (g$120$16964) (if g$120$16964 (begin '#f ((lambda (g$120$16966) (if g$120$16966 (begin '#f (append g$120$16964 g$120$16966)) '#f)) ((letrec ((g$120$16968 (lambda (g$120$16970) (if (g$120$13211 g$120$16970) ((lambda (g$120$16972) (if g$120$16972 (begin '#f ((lambda (g$120$16974) (if g$120$16974 (begin '#f (map cons g$120$16972 g$120$16974)) '#f)) (g$120$16968 (g$120$13223 g$120$16970)))) '#f)) ((lambda (g$120$16976) (list g$120$16976)) (g$120$13219 g$120$16970))) (if (g$120$13215 g$120$16970) (list (begin 'e* '())) '#f))))) g$120$16968) (g$120$13223 g$120$16962)))) '#f)) ((lambda (g$120$16978) (list g$120$16978)) (g$120$13219 g$120$16962)))) '#f)) (g$120$13223 g$120$16956)))) '#f)) ((lambda (g$120$16980) (if (g$120$13225 g$120$16980) (if (g$120$13233 g$120$16980 (g$120$13478 'else)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$16956)))) '#f)) g$120$16852))) g$120$16848) ((lambda (g$120$16982) ((lambda (g$120$16984) (if (if g$120$16984 (begin '#f (apply (lambda (g$120$16986 g$120$16987) '#t) g$120$16984)) '#f) (apply (lambda (g$120$16990 g$120$16991) (error 'expander '"incorrect position of keyword else" (g$120$13243 g$120$16832 '()))) g$120$16984) ((lambda (g$120$16994) ((lambda (g$120$16996) (if (if g$120$16996 (begin '#f (apply (lambda (g$120$16998 g$120$16999) '#t) g$120$16996)) '#f) (apply (lambda (g$120$17002 g$120$17003) (list 'let (list (list 't g$120$17002)) (list 'if 't (cons g$120$17003 '(t)) (g$120$16846 (car g$120$16849) (cdr g$120$16849))))) g$120$16996) ((lambda (g$120$17006) ((lambda (g$120$17008) (if (if g$120$17008 (begin '#f (apply (lambda (g$120$17010) '#t) g$120$17008)) '#f) (apply (lambda (g$120$17012) (list 'or g$120$17012 (g$120$16846 (car g$120$16849) (cdr g$120$16849)))) g$120$17008) ((lambda (g$120$17014) ((lambda (g$120$17016) (if (if g$120$17016 (begin '#f (apply (lambda (g$120$17018 g$120$17019) '#t) g$120$17016)) '#f) (apply (lambda (g$120$17022 g$120$17023) (list 'if g$120$17022 (cons 'begin g$120$17023) (g$120$16846 (car g$120$16849) (cdr g$120$16849)))) g$120$17016) ((lambda (g$120$17026) ((lambda (g$120$17028) (if (if g$120$17028 (begin '#f (apply (lambda () '#t) g$120$17028)) '#f) (apply (lambda () (error 'expander '"invalid last clause" (g$120$13243 g$120$16832 '()))) g$120$17028) (error 'expander '"invalid syntax" (g$120$13243 g$120$17026 '())))) ((lambda (g$120$17030) '()) g$120$17026))) g$120$17014))) ((lambda (g$120$17032) (if (g$120$13211 g$120$17032) (begin '#f ((lambda (g$120$17034) (if g$120$17034 (begin '#f ((lambda (g$120$17036) (if g$120$17036 (begin '#f (append g$120$17034 g$120$17036)) '#f)) ((letrec ((g$120$17038 (lambda (g$120$17040) (if (g$120$13211 g$120$17040) ((lambda (g$120$17042) (if g$120$17042 (begin '#f ((lambda (g$120$17044) (if g$120$17044 (begin '#f (map cons g$120$17042 g$120$17044)) '#f)) (g$120$17038 (g$120$13223 g$120$17040)))) '#f)) ((lambda (g$120$17046) (list g$120$17046)) (g$120$13219 g$120$17040))) (if (g$120$13215 g$120$17040) (list (begin 'e* '())) '#f))))) g$120$17038) (g$120$13223 g$120$17032)))) '#f)) ((lambda (g$120$17048) (list g$120$17048)) (g$120$13219 g$120$17032)))) '#f)) g$120$17014))) g$120$17006))) ((lambda (g$120$17050) (if (g$120$13211 g$120$17050) (begin '#f ((lambda (g$120$17052) (if g$120$17052 (begin '#f ((lambda (g$120$17054) (if g$120$17054 (begin '#f (append g$120$17052 g$120$17054)) '#f)) ((lambda (g$120$17056) (if (equal? (g$120$13245 g$120$17056) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17050)))) '#f)) ((lambda (g$120$17058) (list g$120$17058)) (g$120$13219 g$120$17050)))) '#f)) g$120$17006))) g$120$16994))) ((lambda (g$120$17060) (if (g$120$13211 g$120$17060) (begin '#f ((lambda (g$120$17062) (if g$120$17062 (begin '#f ((lambda (g$120$17064) (if g$120$17064 (begin '#f (append g$120$17062 g$120$17064)) '#f)) ((lambda (g$120$17066) (if (g$120$13211 g$120$17066) (begin '#f ((lambda (g$120$17068) (if g$120$17068 (begin '#f ((lambda (g$120$17070) (if g$120$17070 (begin '#f (append g$120$17068 g$120$17070)) '#f)) ((lambda (g$120$17072) (if (g$120$13211 g$120$17072) (begin '#f ((lambda (g$120$17074) (if g$120$17074 (begin '#f ((lambda (g$120$17076) (if g$120$17076 (begin '#f (append g$120$17074 g$120$17076)) '#f)) ((lambda (g$120$17078) (if (equal? (g$120$13245 g$120$17078) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17072)))) '#f)) ((lambda (g$120$17080) (list g$120$17080)) (g$120$13219 g$120$17072)))) '#f)) (g$120$13223 g$120$17066)))) '#f)) ((lambda (g$120$17082) (if (g$120$13225 g$120$17082) (if (g$120$13233 g$120$17082 (g$120$13478 '=>)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17066)))) '#f)) (g$120$13223 g$120$17060)))) '#f)) ((lambda (g$120$17084) (list g$120$17084)) (g$120$13219 g$120$17060)))) '#f)) g$120$16994))) g$120$16982))) ((lambda (g$120$17086) (if (g$120$13211 g$120$17086) (begin '#f ((lambda (g$120$17088) (if g$120$17088 (begin '#f ((lambda (g$120$17090) (if g$120$17090 (begin '#f (append g$120$17088 g$120$17090)) '#f)) ((lambda (g$120$17092) (if (g$120$13211 g$120$17092) (begin '#f ((lambda (g$120$17094) (if g$120$17094 (begin '#f ((lambda (g$120$17096) (if g$120$17096 (begin '#f (append g$120$17094 g$120$17096)) '#f)) ((letrec ((g$120$17098 (lambda (g$120$17100) (if (g$120$13211 g$120$17100) ((lambda (g$120$17102) (if g$120$17102 (begin '#f ((lambda (g$120$17104) (if g$120$17104 (begin '#f (map cons g$120$17102 g$120$17104)) '#f)) (g$120$17098 (g$120$13223 g$120$17100)))) '#f)) ((lambda (g$120$17106) (list g$120$17106)) (g$120$13219 g$120$17100))) (if (g$120$13215 g$120$17100) (list (begin 'e* '())) '#f))))) g$120$17098) (g$120$13223 g$120$17092)))) '#f)) ((lambda (g$120$17108) (list g$120$17108)) (g$120$13219 g$120$17092)))) '#f)) (g$120$13223 g$120$17086)))) '#f)) ((lambda (g$120$17110) (if (g$120$13225 g$120$17110) (if (g$120$13233 g$120$17110 (g$120$13478 'else)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17086)))) '#f)) g$120$16982))) g$120$16848))))) (g$120$16846 g$120$16842 g$120$16843)))) g$120$16836) (error 'expander '"invalid syntax" (g$120$13243 g$120$16834 '())))) ((lambda (g$120$17112) (if (g$120$13211 g$120$17112) (begin '#f ((lambda (g$120$17114) (if g$120$17114 (begin '#f ((lambda (g$120$17116) (if g$120$17116 (begin '#f (append g$120$17114 g$120$17116)) '#f)) ((lambda (g$120$17118) (if (g$120$13211 g$120$17118) (begin '#f ((lambda (g$120$17120) (if g$120$17120 (begin '#f ((lambda (g$120$17122) (if g$120$17122 (begin '#f (append g$120$17120 g$120$17122)) '#f)) ((letrec ((g$120$17124 (lambda (g$120$17126) (if (g$120$13211 g$120$17126) ((lambda (g$120$17128) (if g$120$17128 (begin '#f ((lambda (g$120$17130) (if g$120$17130 (begin '#f (map cons g$120$17128 g$120$17130)) '#f)) (g$120$17124 (g$120$13223 g$120$17126)))) '#f)) ((lambda (g$120$17132) (list g$120$17132)) (g$120$13219 g$120$17126))) (if (g$120$13215 g$120$17126) (list (begin 'cls* '())) '#f))))) g$120$17124) (g$120$13223 g$120$17118)))) '#f)) ((lambda (g$120$17134) (list g$120$17134)) (g$120$13219 g$120$17118)))) '#f)) (g$120$13223 g$120$17112)))) '#f)) ((lambda (g$120$17136) '()) (g$120$13219 g$120$17112)))) '#f)) g$120$16834))) g$120$16832))) (set! g$120$13546 (lambda (g$120$17138) ((lambda (g$120$17140) ((lambda (g$120$17142) (if (if g$120$17142 (begin '#f (apply (lambda (g$120$17144 g$120$17145) '#t) g$120$17142)) '#f) (apply (lambda (g$120$17148 g$120$17149) ((lambda (g$120$17152) (begin (if (string? g$120$17152) (void) (error 'expander '"invalid syntax" (g$120$13245 g$120$17138))) (with-input-from-file g$120$17152 (lambda () (letrec ((g$120$17154 (lambda (g$120$17156) ((lambda (g$120$17158) (if (eof-object? g$120$17158) (cons (g$120$13512 'begin) (g$120$13191 g$120$17148 (reverse g$120$17156))) (g$120$17154 (cons g$120$17158 g$120$17156)))) (read))))) (g$120$17154 '())))))) (g$120$13245 g$120$17149))) g$120$17142) (error 'expander '"invalid syntax" (g$120$13243 g$120$17140 '())))) ((lambda (g$120$17160) (if (g$120$13211 g$120$17160) (begin '#f ((lambda (g$120$17162) (if g$120$17162 (begin '#f ((lambda (g$120$17164) (if g$120$17164 (begin '#f (append g$120$17162 g$120$17164)) '#f)) ((lambda (g$120$17166) (if (g$120$13211 g$120$17166) (begin '#f ((lambda (g$120$17168) (if g$120$17168 (begin '#f ((lambda (g$120$17170) (if g$120$17170 (begin '#f (append g$120$17168 g$120$17170)) '#f)) ((lambda (g$120$17172) (if (equal? (g$120$13245 g$120$17172) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17166)))) '#f)) ((lambda (g$120$17174) (list g$120$17174)) (g$120$13219 g$120$17166)))) '#f)) (g$120$13223 g$120$17160)))) '#f)) ((lambda (g$120$17176) (list g$120$17176)) (g$120$13219 g$120$17160)))) '#f)) g$120$17140))) g$120$17138))) (set! g$120$13548 (lambda (g$120$17178) ((lambda (g$120$17180) ((lambda (g$120$17182) (if (if g$120$17182 (begin '#f (apply (lambda (g$120$17184 g$120$17185 g$120$17186) '#t) g$120$17182)) '#f) (apply (lambda (g$120$17190 g$120$17191 g$120$17192) (begin (if (for-all (lambda (g$120$17196) (if (g$120$13225 g$120$17196) (if (not (g$120$13233 g$120$17196 (g$120$13478 '|...|))) (begin '#f (not (g$120$13233 g$120$17196 (g$120$13478 '_)))) '#f) '#f)) g$120$17190) (void) (error 'expander '"invalid literals" (g$120$13243 g$120$17178 '()))) (g$120$13512 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g$120$17190 (map (lambda (g$120$17198 g$120$17199) (list g$120$17198 (list 'syntax g$120$17199))) g$120$17191 g$120$17192)))))))) g$120$17182) (error 'expander '"invalid syntax" (g$120$13243 g$120$17180 '())))) ((lambda (g$120$17202) (if (g$120$13211 g$120$17202) (begin '#f ((lambda (g$120$17204) (if g$120$17204 (begin '#f ((lambda (g$120$17206) (if g$120$17206 (begin '#f (append g$120$17204 g$120$17206)) '#f)) ((lambda (g$120$17208) (if (g$120$13211 g$120$17208) (begin '#f ((lambda (g$120$17210) (if g$120$17210 (begin '#f ((lambda (g$120$17212) (if g$120$17212 (begin '#f (append g$120$17210 g$120$17212)) '#f)) ((letrec ((g$120$17214 (lambda (g$120$17216) (if (g$120$13211 g$120$17216) ((lambda (g$120$17218) (if g$120$17218 (begin '#f ((lambda (g$120$17220) (if g$120$17220 (begin '#f (map cons g$120$17218 g$120$17220)) '#f)) (g$120$17214 (g$120$13223 g$120$17216)))) '#f)) ((lambda (g$120$17222) (if (g$120$13211 g$120$17222) (begin '#f ((lambda (g$120$17224) (if g$120$17224 (begin '#f ((lambda (g$120$17226) (if g$120$17226 (begin '#f (append g$120$17224 g$120$17226)) '#f)) ((lambda (g$120$17228) (if (g$120$13211 g$120$17228) (begin '#f ((lambda (g$120$17230) (if g$120$17230 (begin '#f ((lambda (g$120$17232) (if g$120$17232 (begin '#f (append g$120$17230 g$120$17232)) '#f)) ((lambda (g$120$17234) (if (equal? (g$120$13245 g$120$17234) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17228)))) '#f)) ((lambda (g$120$17236) (list g$120$17236)) (g$120$13219 g$120$17228)))) '#f)) (g$120$13223 g$120$17222)))) '#f)) ((lambda (g$120$17238) (list g$120$17238)) (g$120$13219 g$120$17222)))) '#f)) (g$120$13219 g$120$17216))) (if (g$120$13215 g$120$17216) (list (begin 'pat* '()) (begin 'tmp* '())) '#f))))) g$120$17214) (g$120$13223 g$120$17208)))) '#f)) ((letrec ((g$120$17240 (lambda (g$120$17242) (if (g$120$13211 g$120$17242) ((lambda (g$120$17244) (if g$120$17244 (begin '#f ((lambda (g$120$17246) (if g$120$17246 (begin '#f (map cons g$120$17244 g$120$17246)) '#f)) (g$120$17240 (g$120$13223 g$120$17242)))) '#f)) ((lambda (g$120$17248) (list g$120$17248)) (g$120$13219 g$120$17242))) (if (g$120$13215 g$120$17242) (list (begin 'lits '())) '#f))))) g$120$17240) (g$120$13219 g$120$17208)))) '#f)) (g$120$13223 g$120$17202)))) '#f)) ((lambda (g$120$17250) '()) (g$120$13219 g$120$17202)))) '#f)) g$120$17180))) g$120$17178))) (set! g$120$13550 ((lambda () ((lambda (g$120$17274 g$120$17276 g$120$17278 g$120$17280 g$120$17282 g$120$17284) (begin (set! g$120$17274 (lambda (g$120$17896 g$120$17897) (letrec ((g$120$17900 (lambda (g$120$17902) (if (null? g$120$17902) g$120$17897 (g$120$17276 (car g$120$17902) (g$120$17900 (cdr g$120$17902))))))) (g$120$17900 g$120$17896)))) (set! g$120$17276 (lambda (g$120$17790 g$120$17791) ((lambda (g$120$17794) ((lambda (g$120$17796) (if (if g$120$17796 (begin '#f (apply (lambda (g$120$17798) '#t) g$120$17796)) '#f) (apply (lambda (g$120$17800) ((lambda (g$120$17802) ((lambda (g$120$17804) (if (if g$120$17804 (begin '#f (apply (lambda (g$120$17806) '#t) g$120$17804)) '#f) (apply (lambda (g$120$17808) (list (g$120$13478 'quote) (cons g$120$17808 g$120$17800))) g$120$17804) ((lambda (g$120$17810) ((lambda (g$120$17812) (if (if g$120$17812 (begin '#f (apply (lambda () '#t) g$120$17812)) '#f) (apply (lambda () ((lambda (g$120$17814) ((lambda (g$120$17816) (if (if g$120$17816 (begin '#f (apply (lambda () '#t) g$120$17816)) '#f) (apply (lambda () (list (g$120$13478 'list) g$120$17790)) g$120$17816) ((lambda (g$120$17818) ((lambda (g$120$17820) (if (if g$120$17820 (begin '#f (apply (lambda () '#t) g$120$17820)) '#f) (apply (lambda () (list (g$120$13478 'cons) g$120$17790 g$120$17791)) g$120$17820) (error 'expander '"invalid syntax" (g$120$13243 g$120$17818 '())))) ((lambda (g$120$17822) '()) g$120$17818))) g$120$17814))) ((lambda (g$120$17824) (if (equal? (g$120$13245 g$120$17824) '()) (begin '#f '()) '#f)) g$120$17814))) g$120$17800)) g$120$17812) (error 'expander '"invalid syntax" (g$120$13243 g$120$17810 '())))) ((lambda (g$120$17826) '()) g$120$17810))) g$120$17802))) ((lambda (g$120$17828) (if (g$120$13211 g$120$17828) (begin '#f ((lambda (g$120$17830) (if g$120$17830 (begin '#f ((lambda (g$120$17832) (if g$120$17832 (begin '#f (append g$120$17830 g$120$17832)) '#f)) ((lambda (g$120$17834) (if (g$120$13211 g$120$17834) (begin '#f ((lambda (g$120$17836) (if g$120$17836 (begin '#f ((lambda (g$120$17838) (if g$120$17838 (begin '#f (append g$120$17836 g$120$17838)) '#f)) ((lambda (g$120$17840) (if (equal? (g$120$13245 g$120$17840) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17834)))) '#f)) ((lambda (g$120$17842) (list g$120$17842)) (g$120$13219 g$120$17834)))) '#f)) (g$120$13223 g$120$17828)))) '#f)) ((lambda (g$120$17844) (if (g$120$13225 g$120$17844) (if (g$120$13233 g$120$17844 (g$120$13478 'quote)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17828)))) '#f)) g$120$17802))) g$120$17790)) g$120$17796) ((lambda (g$120$17846) ((lambda (g$120$17848) (if (if g$120$17848 (begin '#f (apply (lambda (g$120$17850) '#t) g$120$17848)) '#f) (apply (lambda (g$120$17852) (cons* (g$120$13478 'list) g$120$17790 g$120$17852)) g$120$17848) ((lambda (g$120$17854) ((lambda (g$120$17856) (if (if g$120$17856 (begin '#f (apply (lambda () '#t) g$120$17856)) '#f) (apply (lambda () (list (g$120$13478 'cons) g$120$17790 g$120$17791)) g$120$17856) (error 'expander '"invalid syntax" (g$120$13243 g$120$17854 '())))) ((lambda (g$120$17858) '()) g$120$17854))) g$120$17846))) ((lambda (g$120$17860) (if (g$120$13211 g$120$17860) (begin '#f ((lambda (g$120$17862) (if g$120$17862 (begin '#f ((lambda (g$120$17864) (if g$120$17864 (begin '#f (append g$120$17862 g$120$17864)) '#f)) ((letrec ((g$120$17866 (lambda (g$120$17868) (if (g$120$13211 g$120$17868) ((lambda (g$120$17870) (if g$120$17870 (begin '#f ((lambda (g$120$17872) (if g$120$17872 (begin '#f (map cons g$120$17870 g$120$17872)) '#f)) (g$120$17866 (g$120$13223 g$120$17868)))) '#f)) ((lambda (g$120$17874) (list g$120$17874)) (g$120$13219 g$120$17868))) (if (g$120$13215 g$120$17868) (list (begin 'stuff '())) '#f))))) g$120$17866) (g$120$13223 g$120$17860)))) '#f)) ((lambda (g$120$17876) (if (g$120$13225 g$120$17876) (if (g$120$13233 g$120$17876 (g$120$13478 'list)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17860)))) '#f)) g$120$17846))) g$120$17794))) ((lambda (g$120$17878) (if (g$120$13211 g$120$17878) (begin '#f ((lambda (g$120$17880) (if g$120$17880 (begin '#f ((lambda (g$120$17882) (if g$120$17882 (begin '#f (append g$120$17880 g$120$17882)) '#f)) ((lambda (g$120$17884) (if (g$120$13211 g$120$17884) (begin '#f ((lambda (g$120$17886) (if g$120$17886 (begin '#f ((lambda (g$120$17888) (if g$120$17888 (begin '#f (append g$120$17886 g$120$17888)) '#f)) ((lambda (g$120$17890) (if (equal? (g$120$13245 g$120$17890) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17884)))) '#f)) ((lambda (g$120$17892) (list g$120$17892)) (g$120$13219 g$120$17884)))) '#f)) (g$120$13223 g$120$17878)))) '#f)) ((lambda (g$120$17894) (if (g$120$13225 g$120$17894) (if (g$120$13233 g$120$17894 (g$120$13478 'quote)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17878)))) '#f)) g$120$17794))) g$120$17791))) (set! g$120$17278 (lambda (g$120$17724 g$120$17725) ((lambda (g$120$17728) (if (null? g$120$17728) (list (g$120$13478 'quote) '()) (if (null? (cdr g$120$17728)) (car g$120$17728) (cons* (g$120$13478 'append) g$120$17728)))) (letrec ((g$120$17730 (lambda (g$120$17732) (if (null? g$120$17732) ((lambda (g$120$17734) ((lambda (g$120$17736) (if (if g$120$17736 (begin '#f (apply (lambda () '#t) g$120$17736)) '#f) (apply (lambda () '()) g$120$17736) ((lambda (g$120$17738) ((lambda (g$120$17740) (if (if g$120$17740 (begin '#f (apply (lambda () '#t) g$120$17740)) '#f) (apply (lambda () (list g$120$17725)) g$120$17740) (error 'expander '"invalid syntax" (g$120$13243 g$120$17738 '())))) ((lambda (g$120$17742) '()) g$120$17738))) g$120$17734))) ((lambda (g$120$17744) (if (g$120$13211 g$120$17744) (begin '#f ((lambda (g$120$17746) (if g$120$17746 (begin '#f ((lambda (g$120$17748) (if g$120$17748 (begin '#f (append g$120$17746 g$120$17748)) '#f)) ((lambda (g$120$17750) (if (g$120$13211 g$120$17750) (begin '#f ((lambda (g$120$17752) (if g$120$17752 (begin '#f ((lambda (g$120$17754) (if g$120$17754 (begin '#f (append g$120$17752 g$120$17754)) '#f)) ((lambda (g$120$17756) (if (equal? (g$120$13245 g$120$17756) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17750)))) '#f)) ((lambda (g$120$17758) (if (equal? (g$120$13245 g$120$17758) '()) (begin '#f '()) '#f)) (g$120$13219 g$120$17750)))) '#f)) (g$120$13223 g$120$17744)))) '#f)) ((lambda (g$120$17760) (if (g$120$13225 g$120$17760) (if (g$120$13233 g$120$17760 (g$120$13478 'quote)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17744)))) '#f)) g$120$17734))) g$120$17725) ((lambda (g$120$17762) ((lambda (g$120$17764) (if (if g$120$17764 (begin '#f (apply (lambda () '#t) g$120$17764)) '#f) (apply (lambda () (g$120$17730 (cdr g$120$17732))) g$120$17764) ((lambda (g$120$17766) ((lambda (g$120$17768) (if (if g$120$17768 (begin '#f (apply (lambda () '#t) g$120$17768)) '#f) (apply (lambda () (cons (car g$120$17732) (g$120$17730 (cdr g$120$17732)))) g$120$17768) (error 'expander '"invalid syntax" (g$120$13243 g$120$17766 '())))) ((lambda (g$120$17770) '()) g$120$17766))) g$120$17762))) ((lambda (g$120$17772) (if (g$120$13211 g$120$17772) (begin '#f ((lambda (g$120$17774) (if g$120$17774 (begin '#f ((lambda (g$120$17776) (if g$120$17776 (begin '#f (append g$120$17774 g$120$17776)) '#f)) ((lambda (g$120$17778) (if (g$120$13211 g$120$17778) (begin '#f ((lambda (g$120$17780) (if g$120$17780 (begin '#f ((lambda (g$120$17782) (if g$120$17782 (begin '#f (append g$120$17780 g$120$17782)) '#f)) ((lambda (g$120$17784) (if (equal? (g$120$13245 g$120$17784) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17778)))) '#f)) ((lambda (g$120$17786) (if (equal? (g$120$13245 g$120$17786) '()) (begin '#f '()) '#f)) (g$120$13219 g$120$17778)))) '#f)) (g$120$13223 g$120$17772)))) '#f)) ((lambda (g$120$17788) (if (g$120$13225 g$120$17788) (if (g$120$13233 g$120$17788 (g$120$13478 'quote)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17772)))) '#f)) g$120$17762))) (car g$120$17732)))))) (g$120$17730 g$120$17724))))) (set! g$120$17280 (lambda (g$120$17564) ((lambda (g$120$17566) ((lambda (g$120$17568) ((lambda (g$120$17570) (if (if g$120$17570 (begin '#f (apply (lambda (g$120$17572) '#t) g$120$17570)) '#f) (apply (lambda (g$120$17574) (list (g$120$13478 'quote) (list->vector g$120$17574))) g$120$17570) ((lambda (g$120$17576) ((lambda (g$120$17578) (if (if g$120$17578 (begin '#f (apply (lambda () '#t) g$120$17578)) '#f) (apply (lambda () (letrec ((g$120$17580 (lambda (g$120$17584 g$120$17585) ((lambda (g$120$17588) ((lambda (g$120$17590) (if (if g$120$17590 (begin '#f (apply (lambda (g$120$17592) '#t) g$120$17590)) '#f) (apply (lambda (g$120$17594) (g$120$17585 (map (lambda (g$120$17596) (list (g$120$13478 'quote) g$120$17596)) g$120$17594))) g$120$17590) ((lambda (g$120$17598) ((lambda (g$120$17600) (if (if g$120$17600 (begin '#f (apply (lambda (g$120$17602) '#t) g$120$17600)) '#f) (apply (lambda (g$120$17604) (g$120$17585 g$120$17604)) g$120$17600) ((lambda (g$120$17606) ((lambda (g$120$17608) (if (if g$120$17608 (begin '#f (apply (lambda (g$120$17610 g$120$17611) '#t) g$120$17608)) '#f) (apply (lambda (g$120$17614 g$120$17615) (g$120$17580 g$120$17615 (lambda (g$120$17618) (g$120$17585 (cons g$120$17614 g$120$17618))))) g$120$17608) ((lambda (g$120$17620) ((lambda (g$120$17622) (if (if g$120$17622 (begin '#f (apply (lambda () '#t) g$120$17622)) '#f) (apply (lambda () (list (g$120$13478 'list->vector) g$120$17566)) g$120$17622) (error 'expander '"invalid syntax" (g$120$13243 g$120$17620 '())))) ((lambda (g$120$17624) '()) g$120$17620))) g$120$17606))) ((lambda (g$120$17626) (if (g$120$13211 g$120$17626) (begin '#f ((lambda (g$120$17628) (if g$120$17628 (begin '#f ((lambda (g$120$17630) (if g$120$17630 (begin '#f (append g$120$17628 g$120$17630)) '#f)) ((lambda (g$120$17632) (if (g$120$13211 g$120$17632) (begin '#f ((lambda (g$120$17634) (if g$120$17634 (begin '#f ((lambda (g$120$17636) (if g$120$17636 (begin '#f (append g$120$17634 g$120$17636)) '#f)) ((lambda (g$120$17638) (if (g$120$13211 g$120$17638) (begin '#f ((lambda (g$120$17640) (if g$120$17640 (begin '#f ((lambda (g$120$17642) (if g$120$17642 (begin '#f (append g$120$17640 g$120$17642)) '#f)) ((lambda (g$120$17644) (if (equal? (g$120$13245 g$120$17644) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17638)))) '#f)) ((lambda (g$120$17646) (list g$120$17646)) (g$120$13219 g$120$17638)))) '#f)) (g$120$13223 g$120$17632)))) '#f)) ((lambda (g$120$17648) (list g$120$17648)) (g$120$13219 g$120$17632)))) '#f)) (g$120$13223 g$120$17626)))) '#f)) ((lambda (g$120$17650) (if (g$120$13225 g$120$17650) (if (g$120$13233 g$120$17650 (g$120$13478 'cons)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17626)))) '#f)) g$120$17606))) g$120$17598))) ((lambda (g$120$17652) (if (g$120$13211 g$120$17652) (begin '#f ((lambda (g$120$17654) (if g$120$17654 (begin '#f ((lambda (g$120$17656) (if g$120$17656 (begin '#f (append g$120$17654 g$120$17656)) '#f)) ((letrec ((g$120$17658 (lambda (g$120$17660) (if (g$120$13211 g$120$17660) ((lambda (g$120$17662) (if g$120$17662 (begin '#f ((lambda (g$120$17664) (if g$120$17664 (begin '#f (map cons g$120$17662 g$120$17664)) '#f)) (g$120$17658 (g$120$13223 g$120$17660)))) '#f)) ((lambda (g$120$17666) (list g$120$17666)) (g$120$13219 g$120$17660))) (if (g$120$13215 g$120$17660) (list (begin 'x* '())) '#f))))) g$120$17658) (g$120$13223 g$120$17652)))) '#f)) ((lambda (g$120$17668) (if (g$120$13225 g$120$17668) (if (g$120$13233 g$120$17668 (g$120$13478 'list)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17652)))) '#f)) g$120$17598))) g$120$17588))) ((lambda (g$120$17670) (if (g$120$13211 g$120$17670) (begin '#f ((lambda (g$120$17672) (if g$120$17672 (begin '#f ((lambda (g$120$17674) (if g$120$17674 (begin '#f (append g$120$17672 g$120$17674)) '#f)) ((lambda (g$120$17676) (if (g$120$13211 g$120$17676) (begin '#f ((lambda (g$120$17678) (if g$120$17678 (begin '#f ((lambda (g$120$17680) (if g$120$17680 (begin '#f (append g$120$17678 g$120$17680)) '#f)) ((lambda (g$120$17682) (if (equal? (g$120$13245 g$120$17682) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17676)))) '#f)) ((letrec ((g$120$17684 (lambda (g$120$17686) (if (g$120$13211 g$120$17686) ((lambda (g$120$17688) (if g$120$17688 (begin '#f ((lambda (g$120$17690) (if g$120$17690 (begin '#f (map cons g$120$17688 g$120$17690)) '#f)) (g$120$17684 (g$120$13223 g$120$17686)))) '#f)) ((lambda (g$120$17692) (list g$120$17692)) (g$120$13219 g$120$17686))) (if (g$120$13215 g$120$17686) (list (begin 'x* '())) '#f))))) g$120$17684) (g$120$13219 g$120$17676)))) '#f)) (g$120$13223 g$120$17670)))) '#f)) ((lambda (g$120$17694) (if (g$120$13225 g$120$17694) (if (g$120$13233 g$120$17694 (g$120$13478 'quote)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17670)))) '#f)) g$120$17588))) g$120$17584)))) (g$120$17580 g$120$17564 (lambda (g$120$17582) (cons* (g$120$13478 'vector) g$120$17582))))) g$120$17578) (error 'expander '"invalid syntax" (g$120$13243 g$120$17576 '())))) ((lambda (g$120$17696) '()) g$120$17576))) g$120$17568))) ((lambda (g$120$17698) (if (g$120$13211 g$120$17698) (begin '#f ((lambda (g$120$17700) (if g$120$17700 (begin '#f ((lambda (g$120$17702) (if g$120$17702 (begin '#f (append g$120$17700 g$120$17702)) '#f)) ((lambda (g$120$17704) (if (g$120$13211 g$120$17704) (begin '#f ((lambda (g$120$17706) (if g$120$17706 (begin '#f ((lambda (g$120$17708) (if g$120$17708 (begin '#f (append g$120$17706 g$120$17708)) '#f)) ((lambda (g$120$17710) (if (equal? (g$120$13245 g$120$17710) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17704)))) '#f)) ((letrec ((g$120$17712 (lambda (g$120$17714) (if (g$120$13211 g$120$17714) ((lambda (g$120$17716) (if g$120$17716 (begin '#f ((lambda (g$120$17718) (if g$120$17718 (begin '#f (map cons g$120$17716 g$120$17718)) '#f)) (g$120$17712 (g$120$13223 g$120$17714)))) '#f)) ((lambda (g$120$17720) (list g$120$17720)) (g$120$13219 g$120$17714))) (if (g$120$13215 g$120$17714) (list (begin 'x* '())) '#f))))) g$120$17712) (g$120$13219 g$120$17704)))) '#f)) (g$120$13223 g$120$17698)))) '#f)) ((lambda (g$120$17722) (if (g$120$13225 g$120$17722) (if (g$120$13233 g$120$17722 (g$120$13478 'quote)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17698)))) '#f)) g$120$17568))) g$120$17566)) g$120$17564))) (set! g$120$17282 (lambda (g$120$17470 g$120$17471) ((lambda (g$120$17474) ((lambda (g$120$17476) (if (if g$120$17476 (begin '#f (apply (lambda (g$120$17478 g$120$17479) '#t) g$120$17476)) '#f) (apply (lambda (g$120$17482 g$120$17483) ((lambda (g$120$17486) ((lambda (g$120$17488) (if (if g$120$17488 (begin '#f (apply (lambda (g$120$17490) '#t) g$120$17488)) '#f) (apply (lambda (g$120$17492) (if (= g$120$17471 '0) (g$120$17274 g$120$17492 (g$120$17282 g$120$17483 g$120$17471)) (g$120$17276 (g$120$17276 (list (g$120$13478 'quote) 'unquote) (g$120$17284 g$120$17492 (- g$120$17471 '1))) (g$120$17282 g$120$17483 g$120$17471)))) g$120$17488) ((lambda (g$120$17494) ((lambda (g$120$17496) (if (if g$120$17496 (begin '#f (apply (lambda (g$120$17498) '#t) g$120$17496)) '#f) (apply (lambda (g$120$17500) (if (= g$120$17471 '0) (g$120$17278 g$120$17500 (g$120$17282 g$120$17483 g$120$17471)) (g$120$17276 (g$120$17276 (list (g$120$13478 'quote) 'unquote-splicing) (g$120$17284 g$120$17500 (- g$120$17471 '1))) (g$120$17282 g$120$17483 g$120$17471)))) g$120$17496) ((lambda (g$120$17502) ((lambda (g$120$17504) (if (if g$120$17504 (begin '#f (apply (lambda (g$120$17506) '#t) g$120$17504)) '#f) (apply (lambda (g$120$17508) (g$120$17276 (g$120$17284 g$120$17508 g$120$17471) (g$120$17282 g$120$17483 g$120$17471))) g$120$17504) (error 'expander '"invalid syntax" (g$120$13243 g$120$17502 '())))) ((lambda (g$120$17510) (list g$120$17510)) g$120$17502))) g$120$17494))) ((lambda (g$120$17512) (if (g$120$13211 g$120$17512) (begin '#f ((lambda (g$120$17514) (if g$120$17514 (begin '#f ((lambda (g$120$17516) (if g$120$17516 (begin '#f (append g$120$17514 g$120$17516)) '#f)) ((letrec ((g$120$17518 (lambda (g$120$17520) (if (g$120$13211 g$120$17520) ((lambda (g$120$17522) (if g$120$17522 (begin '#f ((lambda (g$120$17524) (if g$120$17524 (begin '#f (map cons g$120$17522 g$120$17524)) '#f)) (g$120$17518 (g$120$13223 g$120$17520)))) '#f)) ((lambda (g$120$17526) (list g$120$17526)) (g$120$13219 g$120$17520))) (if (g$120$13215 g$120$17520) (list (begin 'p '())) '#f))))) g$120$17518) (g$120$13223 g$120$17512)))) '#f)) ((lambda (g$120$17528) (if (g$120$13225 g$120$17528) (if (g$120$13233 g$120$17528 (g$120$13478 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17512)))) '#f)) g$120$17494))) g$120$17486))) ((lambda (g$120$17530) (if (g$120$13211 g$120$17530) (begin '#f ((lambda (g$120$17532) (if g$120$17532 (begin '#f ((lambda (g$120$17534) (if g$120$17534 (begin '#f (append g$120$17532 g$120$17534)) '#f)) ((letrec ((g$120$17536 (lambda (g$120$17538) (if (g$120$13211 g$120$17538) ((lambda (g$120$17540) (if g$120$17540 (begin '#f ((lambda (g$120$17542) (if g$120$17542 (begin '#f (map cons g$120$17540 g$120$17542)) '#f)) (g$120$17536 (g$120$13223 g$120$17538)))) '#f)) ((lambda (g$120$17544) (list g$120$17544)) (g$120$13219 g$120$17538))) (if (g$120$13215 g$120$17538) (list (begin 'p '())) '#f))))) g$120$17536) (g$120$13223 g$120$17530)))) '#f)) ((lambda (g$120$17546) (if (g$120$13225 g$120$17546) (if (g$120$13233 g$120$17546 (g$120$13478 'unquote)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17530)))) '#f)) g$120$17486))) g$120$17482)) g$120$17476) ((lambda (g$120$17548) ((lambda (g$120$17550) (if (if g$120$17550 (begin '#f (apply (lambda () '#t) g$120$17550)) '#f) (apply (lambda () (list (g$120$13478 'quote) '())) g$120$17550) (error 'expander '"invalid syntax" (g$120$13243 g$120$17548 '())))) ((lambda (g$120$17552) (if (equal? (g$120$13245 g$120$17552) '()) (begin '#f '()) '#f)) g$120$17548))) g$120$17474))) ((lambda (g$120$17554) (if (g$120$13211 g$120$17554) (begin '#f ((lambda (g$120$17556) (if g$120$17556 (begin '#f ((lambda (g$120$17558) (if g$120$17558 (begin '#f (append g$120$17556 g$120$17558)) '#f)) ((lambda (g$120$17560) (list g$120$17560)) (g$120$13223 g$120$17554)))) '#f)) ((lambda (g$120$17562) (list g$120$17562)) (g$120$13219 g$120$17554)))) '#f)) g$120$17474))) g$120$17470))) (set! g$120$17284 (lambda (g$120$17286 g$120$17287) ((lambda (g$120$17290) ((lambda (g$120$17292) (if (if g$120$17292 (begin '#f (apply (lambda (g$120$17294) '#t) g$120$17292)) '#f) (apply (lambda (g$120$17296) (if (= g$120$17287 '0) g$120$17296 (g$120$17276 (list (g$120$13478 'quote) 'unquote) (g$120$17284 (list g$120$17296) (- g$120$17287 '1))))) g$120$17292) ((lambda (g$120$17298) ((lambda (g$120$17300) (if (if g$120$17300 (begin '#f (apply (lambda (g$120$17302 g$120$17303) '#t) g$120$17300)) '#f) (apply (lambda (g$120$17306 g$120$17307) (if (= g$120$17287 '0) (g$120$17274 g$120$17306 (g$120$17284 g$120$17307 g$120$17287)) (g$120$17276 (g$120$17276 (list (g$120$13478 'quote) 'unquote) (g$120$17284 g$120$17306 (- g$120$17287 '1))) (g$120$17284 g$120$17307 g$120$17287)))) g$120$17300) ((lambda (g$120$17310) ((lambda (g$120$17312) (if (if g$120$17312 (begin '#f (apply (lambda (g$120$17314 g$120$17315) '#t) g$120$17312)) '#f) (apply (lambda (g$120$17318 g$120$17319) (if (= g$120$17287 '0) (g$120$17278 g$120$17318 (g$120$17284 g$120$17319 g$120$17287)) (g$120$17276 (g$120$17276 (list (g$120$13478 'quote) 'unquote-splicing) (g$120$17284 g$120$17318 (- g$120$17287 '1))) (g$120$17284 g$120$17319 g$120$17287)))) g$120$17312) ((lambda (g$120$17322) ((lambda (g$120$17324) (if (if g$120$17324 (begin '#f (apply (lambda (g$120$17326) '#t) g$120$17324)) '#f) (apply (lambda (g$120$17328) (g$120$17276 (list (g$120$13478 'quote) 'quasiquote) (g$120$17284 (list g$120$17328) (+ g$120$17287 '1)))) g$120$17324) ((lambda (g$120$17330) ((lambda (g$120$17332) (if (if g$120$17332 (begin '#f (apply (lambda (g$120$17334 g$120$17335) '#t) g$120$17332)) '#f) (apply (lambda (g$120$17338 g$120$17339) (g$120$17276 (g$120$17284 g$120$17338 g$120$17287) (g$120$17284 g$120$17339 g$120$17287))) g$120$17332) ((lambda (g$120$17342) ((lambda (g$120$17344) (if (if g$120$17344 (begin '#f (apply (lambda (g$120$17346) (not (g$120$13177 g$120$17346))) g$120$17344)) '#f) (apply (lambda (g$120$17348) (g$120$17280 (g$120$17282 g$120$17348 g$120$17287))) g$120$17344) ((lambda (g$120$17350) ((lambda (g$120$17352) (if (if g$120$17352 (begin '#f (apply (lambda (g$120$17354) '#t) g$120$17352)) '#f) (apply (lambda (g$120$17356) (list (g$120$13478 'quote) g$120$17356)) g$120$17352) (error 'expander '"invalid syntax" (g$120$13243 g$120$17350 '())))) ((lambda (g$120$17358) (list g$120$17358)) g$120$17350))) g$120$17342))) ((lambda (g$120$17360) (if (g$120$13213 g$120$17360) (begin '#f ((letrec ((g$120$17362 (lambda (g$120$17364) (if (g$120$13211 g$120$17364) ((lambda (g$120$17366) (if g$120$17366 (begin '#f ((lambda (g$120$17368) (if g$120$17368 (begin '#f (map cons g$120$17366 g$120$17368)) '#f)) (g$120$17362 (g$120$13223 g$120$17364)))) '#f)) ((lambda (g$120$17370) (list g$120$17370)) (g$120$13219 g$120$17364))) (if (g$120$13215 g$120$17364) (list (begin 'x '())) '#f))))) g$120$17362) (g$120$13209 g$120$17360))) '#f)) g$120$17342))) g$120$17330))) ((lambda (g$120$17372) (if (g$120$13211 g$120$17372) (begin '#f ((lambda (g$120$17374) (if g$120$17374 (begin '#f ((lambda (g$120$17376) (if g$120$17376 (begin '#f (append g$120$17374 g$120$17376)) '#f)) ((lambda (g$120$17378) (list g$120$17378)) (g$120$13223 g$120$17372)))) '#f)) ((lambda (g$120$17380) (list g$120$17380)) (g$120$13219 g$120$17372)))) '#f)) g$120$17330))) g$120$17322))) ((lambda (g$120$17382) (if (g$120$13211 g$120$17382) (begin '#f ((lambda (g$120$17384) (if g$120$17384 (begin '#f ((lambda (g$120$17386) (if g$120$17386 (begin '#f (append g$120$17384 g$120$17386)) '#f)) ((lambda (g$120$17388) (if (g$120$13211 g$120$17388) (begin '#f ((lambda (g$120$17390) (if g$120$17390 (begin '#f ((lambda (g$120$17392) (if g$120$17392 (begin '#f (append g$120$17390 g$120$17392)) '#f)) ((lambda (g$120$17394) (if (equal? (g$120$13245 g$120$17394) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17388)))) '#f)) ((lambda (g$120$17396) (list g$120$17396)) (g$120$13219 g$120$17388)))) '#f)) (g$120$13223 g$120$17382)))) '#f)) ((lambda (g$120$17398) (if (g$120$13225 g$120$17398) (if (g$120$13233 g$120$17398 (g$120$13478 'quasiquote)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17382)))) '#f)) g$120$17322))) g$120$17310))) ((lambda (g$120$17400) (if (g$120$13211 g$120$17400) (begin '#f ((lambda (g$120$17402) (if g$120$17402 (begin '#f ((lambda (g$120$17404) (if g$120$17404 (begin '#f (append g$120$17402 g$120$17404)) '#f)) ((lambda (g$120$17406) (list g$120$17406)) (g$120$13223 g$120$17400)))) '#f)) ((lambda (g$120$17408) (if (g$120$13211 g$120$17408) (begin '#f ((lambda (g$120$17410) (if g$120$17410 (begin '#f ((lambda (g$120$17412) (if g$120$17412 (begin '#f (append g$120$17410 g$120$17412)) '#f)) ((letrec ((g$120$17414 (lambda (g$120$17416) (if (g$120$13211 g$120$17416) ((lambda (g$120$17418) (if g$120$17418 (begin '#f ((lambda (g$120$17420) (if g$120$17420 (begin '#f (map cons g$120$17418 g$120$17420)) '#f)) (g$120$17414 (g$120$13223 g$120$17416)))) '#f)) ((lambda (g$120$17422) (list g$120$17422)) (g$120$13219 g$120$17416))) (if (g$120$13215 g$120$17416) (list (begin 'p '())) '#f))))) g$120$17414) (g$120$13223 g$120$17408)))) '#f)) ((lambda (g$120$17424) (if (g$120$13225 g$120$17424) (if (g$120$13233 g$120$17424 (g$120$13478 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17408)))) '#f)) (g$120$13219 g$120$17400)))) '#f)) g$120$17310))) g$120$17298))) ((lambda (g$120$17426) (if (g$120$13211 g$120$17426) (begin '#f ((lambda (g$120$17428) (if g$120$17428 (begin '#f ((lambda (g$120$17430) (if g$120$17430 (begin '#f (append g$120$17428 g$120$17430)) '#f)) ((lambda (g$120$17432) (list g$120$17432)) (g$120$13223 g$120$17426)))) '#f)) ((lambda (g$120$17434) (if (g$120$13211 g$120$17434) (begin '#f ((lambda (g$120$17436) (if g$120$17436 (begin '#f ((lambda (g$120$17438) (if g$120$17438 (begin '#f (append g$120$17436 g$120$17438)) '#f)) ((letrec ((g$120$17440 (lambda (g$120$17442) (if (g$120$13211 g$120$17442) ((lambda (g$120$17444) (if g$120$17444 (begin '#f ((lambda (g$120$17446) (if g$120$17446 (begin '#f (map cons g$120$17444 g$120$17446)) '#f)) (g$120$17440 (g$120$13223 g$120$17442)))) '#f)) ((lambda (g$120$17448) (list g$120$17448)) (g$120$13219 g$120$17442))) (if (g$120$13215 g$120$17442) (list (begin 'p '())) '#f))))) g$120$17440) (g$120$13223 g$120$17434)))) '#f)) ((lambda (g$120$17450) (if (g$120$13225 g$120$17450) (if (g$120$13233 g$120$17450 (g$120$13478 'unquote)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17434)))) '#f)) (g$120$13219 g$120$17426)))) '#f)) g$120$17298))) g$120$17290))) ((lambda (g$120$17452) (if (g$120$13211 g$120$17452) (begin '#f ((lambda (g$120$17454) (if g$120$17454 (begin '#f ((lambda (g$120$17456) (if g$120$17456 (begin '#f (append g$120$17454 g$120$17456)) '#f)) ((lambda (g$120$17458) (if (g$120$13211 g$120$17458) (begin '#f ((lambda (g$120$17460) (if g$120$17460 (begin '#f ((lambda (g$120$17462) (if g$120$17462 (begin '#f (append g$120$17460 g$120$17462)) '#f)) ((lambda (g$120$17464) (if (equal? (g$120$13245 g$120$17464) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17458)))) '#f)) ((lambda (g$120$17466) (list g$120$17466)) (g$120$13219 g$120$17458)))) '#f)) (g$120$13223 g$120$17452)))) '#f)) ((lambda (g$120$17468) (if (g$120$13225 g$120$17468) (if (g$120$13233 g$120$17468 (g$120$13478 'unquote)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$17452)))) '#f)) g$120$17290))) g$120$17286))) (lambda (g$120$17904) ((lambda (g$120$17906) ((lambda (g$120$17908) (if (if g$120$17908 (begin '#f (apply (lambda (g$120$17910) '#t) g$120$17908)) '#f) (apply (lambda (g$120$17912) (g$120$17284 g$120$17912 '0)) g$120$17908) (error 'expander '"invalid syntax" (g$120$13243 g$120$17906 '())))) ((lambda (g$120$17914) (if (g$120$13211 g$120$17914) (begin '#f ((lambda (g$120$17916) (if g$120$17916 (begin '#f ((lambda (g$120$17918) (if g$120$17918 (begin '#f (append g$120$17916 g$120$17918)) '#f)) ((lambda (g$120$17920) (if (g$120$13211 g$120$17920) (begin '#f ((lambda (g$120$17922) (if g$120$17922 (begin '#f ((lambda (g$120$17924) (if g$120$17924 (begin '#f (append g$120$17922 g$120$17924)) '#f)) ((lambda (g$120$17926) (if (equal? (g$120$13245 g$120$17926) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$17920)))) '#f)) ((lambda (g$120$17928) (list g$120$17928)) (g$120$13219 g$120$17920)))) '#f)) (g$120$13223 g$120$17914)))) '#f)) ((lambda (g$120$17930) '()) (g$120$13219 g$120$17914)))) '#f)) g$120$17906))) g$120$17904)))) '#f '#f '#f '#f '#f '#f)))) (set! g$120$13552 ((lambda () ((lambda (g$120$17932) (begin (set! g$120$17932 (lambda (g$120$17934 g$120$17935) ((lambda (g$120$17938) ((lambda (g$120$17940) (if (if g$120$17940 (begin '#f (apply (lambda (g$120$17942) '#t) g$120$17940)) '#f) (apply (lambda (g$120$17944) (if (= g$120$17935 '0) ((lambda (g$120$17946) (values (list g$120$17946) (list g$120$17944) g$120$17946)) (gensym)) (call-with-values (lambda () (g$120$17932 g$120$17944 (- g$120$17935 '1))) (lambda (g$120$17948 g$120$17949 g$120$17950) (values g$120$17948 g$120$17949 (list 'unsyntax g$120$17950)))))) g$120$17940) ((lambda (g$120$17954) ((lambda (g$120$17956) (if (if g$120$17956 (begin '#f (apply (lambda () (= g$120$17935 '0)) g$120$17956)) '#f) (apply (lambda () (error 'expander '"incorrect use of unsyntax" (g$120$13243 g$120$17934 '()))) g$120$17956) ((lambda (g$120$17958) ((lambda (g$120$17960) (if (if g$120$17960 (begin '#f (apply (lambda (g$120$17962 g$120$17963) '#t) g$120$17960)) '#f) (apply (lambda (g$120$17966 g$120$17967) (call-with-values (lambda () (g$120$17932 g$120$17967 g$120$17935)) (lambda (g$120$17970 g$120$17971 g$120$17972) (if (= g$120$17935 '0) ((lambda (g$120$17976) (values (cons (cons g$120$17976 '(|...|)) g$120$17970) (cons g$120$17966 g$120$17971) (cons g$120$17976 (cons '|...| g$120$17972)))) (gensym)) (call-with-values (lambda () (g$120$17932 g$120$17966 (- g$120$17935 '1))) (lambda (g$120$17978 g$120$17979 g$120$17980) (values (append g$120$17978 g$120$17970) (append g$120$17979 g$120$17971) (cons (list 'unsyntax-splicing g$120$17980) g$120$17972)))))))) g$120$17960) ((lambda (g$120$17984) ((lambda (g$120$17986) (if (if g$120$17986 (begin '#f (apply (lambda () (= g$120$17935 '0)) g$120$17986)) '#f) (apply (lambda () (error 'expander '"incorrect use of unsyntax-splicing" (g$120$13243 g$120$17934 '()))) g$120$17986) ((lambda (g$120$17988) ((lambda (g$120$17990) (if (if g$120$17990 (begin '#f (apply (lambda (g$120$17992) '#t) g$120$17990)) '#f) (apply (lambda (g$120$17994) (call-with-values (lambda () (g$120$17932 g$120$17994 (+ g$120$17935 '1))) (lambda (g$120$17996 g$120$17997 g$120$17998) (values g$120$17996 g$120$17997 (list 'quasisyntax g$120$17998))))) g$120$17990) ((lambda (g$120$18002) ((lambda (g$120$18004) (if (if g$120$18004 (begin '#f (apply (lambda (g$120$18006 g$120$18007) '#t) g$120$18004)) '#f) (apply (lambda (g$120$18010 g$120$18011) (call-with-values (lambda () (g$120$17932 g$120$18010 g$120$17935)) (lambda (g$120$18014 g$120$18015 g$120$18016) (call-with-values (lambda () (g$120$17932 g$120$18011 g$120$17935)) (lambda (g$120$18017 g$120$18018 g$120$18019) (values (append g$120$18017 g$120$18014) (append g$120$18018 g$120$18015) (cons g$120$18016 g$120$18019))))))) g$120$18004) ((lambda (g$120$18026) ((lambda (g$120$18028) (if (if g$120$18028 (begin '#f (apply (lambda (g$120$18030) (not (g$120$13177 g$120$17934))) g$120$18028)) '#f) (apply (lambda (g$120$18032) (call-with-values (lambda () (letrec ((g$120$18034 (lambda (g$120$18036) (if (null? g$120$18036) (values '() '() '()) (call-with-values (lambda () (g$120$17932 (car g$120$18036) g$120$17935)) (lambda (g$120$18038 g$120$18039 g$120$18040) (call-with-values (lambda () (g$120$18034 (cdr g$120$18036))) (lambda (g$120$18044 g$120$18045 g$120$18046) (values (append g$120$18038 g$120$18044) (append g$120$18039 g$120$18045) (cons g$120$18040 g$120$18046)))))))))) (g$120$18034 g$120$18032))) (lambda (g$120$18050 g$120$18051 g$120$18052) (values g$120$18050 g$120$18051 (list->vector g$120$18052))))) g$120$18028) ((lambda (g$120$18056) ((lambda (g$120$18058) (if (if g$120$18058 (begin '#f (apply (lambda () '#t) g$120$18058)) '#f) (apply (lambda () (values '() '() g$120$17934)) g$120$18058) (error 'expander '"invalid syntax" (g$120$13243 g$120$18056 '())))) ((lambda (g$120$18060) '()) g$120$18056))) g$120$18026))) ((lambda (g$120$18062) (if (g$120$13213 g$120$18062) (begin '#f ((letrec ((g$120$18064 (lambda (g$120$18066) (if (g$120$13211 g$120$18066) ((lambda (g$120$18068) (if g$120$18068 (begin '#f ((lambda (g$120$18070) (if g$120$18070 (begin '#f (map cons g$120$18068 g$120$18070)) '#f)) (g$120$18064 (g$120$13223 g$120$18066)))) '#f)) ((lambda (g$120$18072) (list g$120$18072)) (g$120$13219 g$120$18066))) (if (g$120$13215 g$120$18066) (list (begin 'x '())) '#f))))) g$120$18064) (g$120$13209 g$120$18062))) '#f)) g$120$18026))) g$120$18002))) ((lambda (g$120$18074) (if (g$120$13211 g$120$18074) (begin '#f ((lambda (g$120$18076) (if g$120$18076 (begin '#f ((lambda (g$120$18078) (if g$120$18078 (begin '#f (append g$120$18076 g$120$18078)) '#f)) ((lambda (g$120$18080) (list g$120$18080)) (g$120$13223 g$120$18074)))) '#f)) ((lambda (g$120$18082) (list g$120$18082)) (g$120$13219 g$120$18074)))) '#f)) g$120$18002))) g$120$17988))) ((lambda (g$120$18084) (if (g$120$13211 g$120$18084) (begin '#f ((lambda (g$120$18086) (if g$120$18086 (begin '#f ((lambda (g$120$18088) (if g$120$18088 (begin '#f (append g$120$18086 g$120$18088)) '#f)) ((lambda (g$120$18090) (if (g$120$13211 g$120$18090) (begin '#f ((lambda (g$120$18092) (if g$120$18092 (begin '#f ((lambda (g$120$18094) (if g$120$18094 (begin '#f (append g$120$18092 g$120$18094)) '#f)) ((lambda (g$120$18096) (if (equal? (g$120$13245 g$120$18096) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18090)))) '#f)) ((lambda (g$120$18098) (list g$120$18098)) (g$120$13219 g$120$18090)))) '#f)) (g$120$13223 g$120$18084)))) '#f)) ((lambda (g$120$18100) (if (g$120$13225 g$120$18100) (if (g$120$13233 g$120$18100 (g$120$13478 'quasisyntax)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18084)))) '#f)) g$120$17988))) g$120$17984))) ((lambda (g$120$18102) (if (g$120$13225 g$120$18102) (if (g$120$13233 g$120$18102 (g$120$13478 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) g$120$17984))) g$120$17958))) ((lambda (g$120$18104) (if (g$120$13211 g$120$18104) (begin '#f ((lambda (g$120$18106) (if g$120$18106 (begin '#f ((lambda (g$120$18108) (if g$120$18108 (begin '#f (append g$120$18106 g$120$18108)) '#f)) ((lambda (g$120$18110) (list g$120$18110)) (g$120$13223 g$120$18104)))) '#f)) ((lambda (g$120$18112) (if (g$120$13211 g$120$18112) (begin '#f ((lambda (g$120$18114) (if g$120$18114 (begin '#f ((lambda (g$120$18116) (if g$120$18116 (begin '#f (append g$120$18114 g$120$18116)) '#f)) ((lambda (g$120$18118) (if (g$120$13211 g$120$18118) (begin '#f ((lambda (g$120$18120) (if g$120$18120 (begin '#f ((lambda (g$120$18122) (if g$120$18122 (begin '#f (append g$120$18120 g$120$18122)) '#f)) ((lambda (g$120$18124) (if (equal? (g$120$13245 g$120$18124) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18118)))) '#f)) ((lambda (g$120$18126) (list g$120$18126)) (g$120$13219 g$120$18118)))) '#f)) (g$120$13223 g$120$18112)))) '#f)) ((lambda (g$120$18128) (if (g$120$13225 g$120$18128) (if (g$120$13233 g$120$18128 (g$120$13478 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18112)))) '#f)) (g$120$13219 g$120$18104)))) '#f)) g$120$17958))) g$120$17954))) ((lambda (g$120$18130) (if (g$120$13225 g$120$18130) (if (g$120$13233 g$120$18130 (g$120$13478 'unsyntax)) (begin '#f '()) '#f) '#f)) g$120$17954))) g$120$17938))) ((lambda (g$120$18132) (if (g$120$13211 g$120$18132) (begin '#f ((lambda (g$120$18134) (if g$120$18134 (begin '#f ((lambda (g$120$18136) (if g$120$18136 (begin '#f (append g$120$18134 g$120$18136)) '#f)) ((lambda (g$120$18138) (if (g$120$13211 g$120$18138) (begin '#f ((lambda (g$120$18140) (if g$120$18140 (begin '#f ((lambda (g$120$18142) (if g$120$18142 (begin '#f (append g$120$18140 g$120$18142)) '#f)) ((lambda (g$120$18144) (if (equal? (g$120$13245 g$120$18144) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18138)))) '#f)) ((lambda (g$120$18146) (list g$120$18146)) (g$120$13219 g$120$18138)))) '#f)) (g$120$13223 g$120$18132)))) '#f)) ((lambda (g$120$18148) (if (g$120$13225 g$120$18148) (if (g$120$13233 g$120$18148 (g$120$13478 'unsyntax)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18132)))) '#f)) g$120$17938))) g$120$17934))) (lambda (g$120$18150) ((lambda (g$120$18152) ((lambda (g$120$18154) (if (if g$120$18154 (begin '#f (apply (lambda (g$120$18156) '#t) g$120$18154)) '#f) (apply (lambda (g$120$18158) (call-with-values (lambda () (g$120$17932 g$120$18158 '0)) (lambda (g$120$18160 g$120$18161 g$120$18162) (g$120$13512 (list 'syntax-case (cons 'list g$120$18161) '() (list g$120$18160 (list 'syntax g$120$18162))))))) g$120$18154) (error 'expander '"invalid syntax" (g$120$13243 g$120$18152 '())))) ((lambda (g$120$18166) (if (g$120$13211 g$120$18166) (begin '#f ((lambda (g$120$18168) (if g$120$18168 (begin '#f ((lambda (g$120$18170) (if g$120$18170 (begin '#f (append g$120$18168 g$120$18170)) '#f)) ((lambda (g$120$18172) (if (g$120$13211 g$120$18172) (begin '#f ((lambda (g$120$18174) (if g$120$18174 (begin '#f ((lambda (g$120$18176) (if g$120$18176 (begin '#f (append g$120$18174 g$120$18176)) '#f)) ((lambda (g$120$18178) (if (equal? (g$120$13245 g$120$18178) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18172)))) '#f)) ((lambda (g$120$18180) (list g$120$18180)) (g$120$13219 g$120$18172)))) '#f)) (g$120$13223 g$120$18166)))) '#f)) ((lambda (g$120$18182) '()) (g$120$13219 g$120$18166)))) '#f)) g$120$18152))) g$120$18150)))) '#f)))) (set! g$120$13554 (lambda (g$120$18184) (error 'expander '"define-struct not supported" (g$120$13243 g$120$18184 '())))) (set! g$120$13556 (lambda (g$120$18186) ((lambda (g$120$18188 g$120$18190 g$120$18192 g$120$18194 g$120$18196 g$120$18198 g$120$18200 g$120$18202 g$120$18204 g$120$18206 g$120$18208 g$120$18210 g$120$18212 g$120$18214) (begin (set! g$120$18188 (lambda (g$120$19236 . g$120$19238) (g$120$13705 g$120$19236 (string->symbol (apply string-append (map (lambda (g$120$19240) (if (symbol? g$120$19240) (symbol->string g$120$19240) (if (string? g$120$19240) g$120$19240 (error 'define-record-type '"BUG")))) g$120$19238)))))) (set! g$120$18190 (lambda (g$120$19182) ((lambda (g$120$19184) ((lambda (g$120$19186) (if (if g$120$19186 (begin '#f (apply (lambda (g$120$19188 g$120$19189 g$120$19190) '#t) g$120$19186)) '#f) (apply (lambda (g$120$19194 g$120$19195 g$120$19196) g$120$19194) g$120$19186) ((lambda (g$120$19200) ((lambda (g$120$19202) (if (if g$120$19202 (begin '#f (apply (lambda (g$120$19204) '#t) g$120$19202)) '#f) (apply (lambda (g$120$19206) g$120$19206) g$120$19202) (error 'expander '"invalid syntax" (g$120$13243 g$120$19200 '())))) ((lambda (g$120$19208) (list g$120$19208)) g$120$19200))) g$120$19184))) ((lambda (g$120$19210) (if (g$120$13211 g$120$19210) (begin '#f ((lambda (g$120$19212) (if g$120$19212 (begin '#f ((lambda (g$120$19214) (if g$120$19214 (begin '#f (append g$120$19212 g$120$19214)) '#f)) ((lambda (g$120$19216) (if (g$120$13211 g$120$19216) (begin '#f ((lambda (g$120$19218) (if g$120$19218 (begin '#f ((lambda (g$120$19220) (if g$120$19220 (begin '#f (append g$120$19218 g$120$19220)) '#f)) ((lambda (g$120$19222) (if (g$120$13211 g$120$19222) (begin '#f ((lambda (g$120$19224) (if g$120$19224 (begin '#f ((lambda (g$120$19226) (if g$120$19226 (begin '#f (append g$120$19224 g$120$19226)) '#f)) ((lambda (g$120$19228) (if (equal? (g$120$13245 g$120$19228) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$19222)))) '#f)) ((lambda (g$120$19230) (list g$120$19230)) (g$120$13219 g$120$19222)))) '#f)) (g$120$13223 g$120$19216)))) '#f)) ((lambda (g$120$19232) (list g$120$19232)) (g$120$13219 g$120$19216)))) '#f)) (g$120$13223 g$120$19210)))) '#f)) ((lambda (g$120$19234) (list g$120$19234)) (g$120$13219 g$120$19210)))) '#f)) g$120$19184))) g$120$19182))) (set! g$120$18192 (lambda (g$120$19126 g$120$19127) ((lambda (g$120$19130) ((lambda (g$120$19132) (if (if g$120$19132 (begin '#f (apply (lambda (g$120$19134 g$120$19135 g$120$19136) '#t) g$120$19132)) '#f) (apply (lambda (g$120$19140 g$120$19141 g$120$19142) g$120$19141) g$120$19132) ((lambda (g$120$19146) ((lambda (g$120$19148) (if (if g$120$19148 (begin '#f (apply (lambda (g$120$19150) '#t) g$120$19148)) '#f) (apply (lambda (g$120$19152) (g$120$18188 g$120$19127 '"make-" (g$120$13245 g$120$19152))) g$120$19148) (error 'expander '"invalid syntax" (g$120$13243 g$120$19146 '())))) ((lambda (g$120$19154) (list g$120$19154)) g$120$19146))) g$120$19130))) ((lambda (g$120$19156) (if (g$120$13211 g$120$19156) (begin '#f ((lambda (g$120$19158) (if g$120$19158 (begin '#f ((lambda (g$120$19160) (if g$120$19160 (begin '#f (append g$120$19158 g$120$19160)) '#f)) ((lambda (g$120$19162) (if (g$120$13211 g$120$19162) (begin '#f ((lambda (g$120$19164) (if g$120$19164 (begin '#f ((lambda (g$120$19166) (if g$120$19166 (begin '#f (append g$120$19164 g$120$19166)) '#f)) ((lambda (g$120$19168) (if (g$120$13211 g$120$19168) (begin '#f ((lambda (g$120$19170) (if g$120$19170 (begin '#f ((lambda (g$120$19172) (if g$120$19172 (begin '#f (append g$120$19170 g$120$19172)) '#f)) ((lambda (g$120$19174) (if (equal? (g$120$13245 g$120$19174) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$19168)))) '#f)) ((lambda (g$120$19176) (list g$120$19176)) (g$120$13219 g$120$19168)))) '#f)) (g$120$13223 g$120$19162)))) '#f)) ((lambda (g$120$19178) (list g$120$19178)) (g$120$13219 g$120$19162)))) '#f)) (g$120$13223 g$120$19156)))) '#f)) ((lambda (g$120$19180) (list g$120$19180)) (g$120$13219 g$120$19156)))) '#f)) g$120$19130))) g$120$19126))) (set! g$120$18194 (lambda (g$120$19070 g$120$19071) ((lambda (g$120$19074) ((lambda (g$120$19076) (if (if g$120$19076 (begin '#f (apply (lambda (g$120$19078 g$120$19079 g$120$19080) '#t) g$120$19076)) '#f) (apply (lambda (g$120$19084 g$120$19085 g$120$19086) g$120$19086) g$120$19076) ((lambda (g$120$19090) ((lambda (g$120$19092) (if (if g$120$19092 (begin '#f (apply (lambda (g$120$19094) '#t) g$120$19092)) '#f) (apply (lambda (g$120$19096) (g$120$18188 g$120$19071 (g$120$13245 g$120$19096) '"?")) g$120$19092) (error 'expander '"invalid syntax" (g$120$13243 g$120$19090 '())))) ((lambda (g$120$19098) (list g$120$19098)) g$120$19090))) g$120$19074))) ((lambda (g$120$19100) (if (g$120$13211 g$120$19100) (begin '#f ((lambda (g$120$19102) (if g$120$19102 (begin '#f ((lambda (g$120$19104) (if g$120$19104 (begin '#f (append g$120$19102 g$120$19104)) '#f)) ((lambda (g$120$19106) (if (g$120$13211 g$120$19106) (begin '#f ((lambda (g$120$19108) (if g$120$19108 (begin '#f ((lambda (g$120$19110) (if g$120$19110 (begin '#f (append g$120$19108 g$120$19110)) '#f)) ((lambda (g$120$19112) (if (g$120$13211 g$120$19112) (begin '#f ((lambda (g$120$19114) (if g$120$19114 (begin '#f ((lambda (g$120$19116) (if g$120$19116 (begin '#f (append g$120$19114 g$120$19116)) '#f)) ((lambda (g$120$19118) (if (equal? (g$120$13245 g$120$19118) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$19112)))) '#f)) ((lambda (g$120$19120) (list g$120$19120)) (g$120$13219 g$120$19112)))) '#f)) (g$120$13223 g$120$19106)))) '#f)) ((lambda (g$120$19122) (list g$120$19122)) (g$120$13219 g$120$19106)))) '#f)) (g$120$13223 g$120$19100)))) '#f)) ((lambda (g$120$19124) (list g$120$19124)) (g$120$13219 g$120$19100)))) '#f)) g$120$19074))) g$120$19070))) (set! g$120$18196 (lambda (g$120$19026 g$120$19027) ((lambda (g$120$19030) ((lambda (g$120$19032) (if (if g$120$19032 (begin '#f (apply (lambda () '#t) g$120$19032)) '#f) (apply (lambda () '#f) g$120$19032) ((lambda (g$120$19034) ((lambda (g$120$19036) (if (if g$120$19036 (begin '#f (apply (lambda (g$120$19038 g$120$19039 g$120$19040) '#t) g$120$19036)) '#f) (apply (lambda (g$120$19044 g$120$19045 g$120$19046) (if (g$120$13233 (g$120$13512 g$120$19026) g$120$19044) (cons g$120$19044 g$120$19045) (g$120$18196 g$120$19026 g$120$19046))) g$120$19036) (error 'expander '"invalid syntax" (g$120$13243 g$120$19034 '())))) ((lambda (g$120$19050) (if (g$120$13211 g$120$19050) (begin '#f ((lambda (g$120$19052) (if g$120$19052 (begin '#f ((lambda (g$120$19054) (if g$120$19054 (begin '#f (append g$120$19052 g$120$19054)) '#f)) ((lambda (g$120$19056) (list g$120$19056)) (g$120$13223 g$120$19050)))) '#f)) ((lambda (g$120$19058) (if (g$120$13211 g$120$19058) (begin '#f ((lambda (g$120$19060) (if g$120$19060 (begin '#f ((lambda (g$120$19062) (if g$120$19062 (begin '#f (append g$120$19060 g$120$19062)) '#f)) ((lambda (g$120$19064) (list g$120$19064)) (g$120$13223 g$120$19058)))) '#f)) ((lambda (g$120$19066) (list g$120$19066)) (g$120$13219 g$120$19058)))) '#f)) (g$120$13219 g$120$19050)))) '#f)) g$120$19034))) g$120$19030))) ((lambda (g$120$19068) (if (equal? (g$120$13245 g$120$19068) '()) (begin '#f '()) '#f)) g$120$19030))) g$120$19027))) (set! g$120$18198 (lambda (g$120$18768 g$120$18769 g$120$18770) ((lambda (g$120$18774) (begin (set! g$120$18774 (lambda (g$120$18776) (list->vector (map (lambda (g$120$18778) ((lambda (g$120$18780) ((lambda (g$120$18782) (if (if g$120$18782 (begin '#f (apply (lambda (g$120$18784 g$120$18785) '#t) g$120$18782)) '#f) (apply (lambda (g$120$18788 g$120$18789) (list 'mutable g$120$18788)) g$120$18782) ((lambda (g$120$18792) ((lambda (g$120$18794) (if (if g$120$18794 (begin '#f (apply (lambda (g$120$18796 g$120$18797) '#t) g$120$18794)) '#f) (apply (lambda (g$120$18800 g$120$18801) (list 'immutable g$120$18800)) g$120$18794) ((lambda (g$120$18804) ((lambda (g$120$18806) (if (if g$120$18806 (begin '#f (apply (lambda (g$120$18808) '#t) g$120$18806)) '#f) (apply (lambda (g$120$18810) (list 'immutable g$120$18810)) g$120$18806) (error 'expander '"invalid syntax" (g$120$13243 g$120$18804 '())))) ((lambda (g$120$18812) (list g$120$18812)) g$120$18804))) g$120$18792))) ((lambda (g$120$18814) (if (g$120$13211 g$120$18814) (begin '#f ((lambda (g$120$18816) (if g$120$18816 (begin '#f ((lambda (g$120$18818) (if g$120$18818 (begin '#f (append g$120$18816 g$120$18818)) '#f)) ((lambda (g$120$18820) (if (g$120$13211 g$120$18820) (begin '#f ((lambda (g$120$18822) (if g$120$18822 (begin '#f ((lambda (g$120$18824) (if g$120$18824 (begin '#f (append g$120$18822 g$120$18824)) '#f)) ((lambda (g$120$18826) (list g$120$18826)) (g$120$13223 g$120$18820)))) '#f)) ((lambda (g$120$18828) (list g$120$18828)) (g$120$13219 g$120$18820)))) '#f)) (g$120$13223 g$120$18814)))) '#f)) ((lambda (g$120$18830) (if (g$120$13225 g$120$18830) (if (g$120$13233 g$120$18830 (g$120$13478 'immutable)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18814)))) '#f)) g$120$18792))) g$120$18780))) ((lambda (g$120$18832) (if (g$120$13211 g$120$18832) (begin '#f ((lambda (g$120$18834) (if g$120$18834 (begin '#f ((lambda (g$120$18836) (if g$120$18836 (begin '#f (append g$120$18834 g$120$18836)) '#f)) ((lambda (g$120$18838) (if (g$120$13211 g$120$18838) (begin '#f ((lambda (g$120$18840) (if g$120$18840 (begin '#f ((lambda (g$120$18842) (if g$120$18842 (begin '#f (append g$120$18840 g$120$18842)) '#f)) ((lambda (g$120$18844) (list g$120$18844)) (g$120$13223 g$120$18838)))) '#f)) ((lambda (g$120$18846) (list g$120$18846)) (g$120$13219 g$120$18838)))) '#f)) (g$120$13223 g$120$18832)))) '#f)) ((lambda (g$120$18848) (if (g$120$13225 g$120$18848) (if (g$120$13233 g$120$18848 (g$120$13478 'mutable)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18832)))) '#f)) g$120$18780))) g$120$18778)) g$120$18776)))) ((lambda (g$120$18850 g$120$18851 g$120$18852 g$120$18853 g$120$18854) (g$120$13512 (list 'make-record-type-descriptor (list 'quote g$120$18769) g$120$18850 g$120$18851 g$120$18852 g$120$18853 g$120$18854))) ((lambda (g$120$18860) ((lambda (g$120$18862) (if (if g$120$18862 (begin '#f (apply (lambda (g$120$18864) '#t) g$120$18862)) '#f) (apply (lambda (g$120$18866) (list 'record-type-descriptor g$120$18866)) g$120$18862) ((lambda (g$120$18868) ((lambda (g$120$18870) (if (if g$120$18870 (begin '#f (apply (lambda () '#t) g$120$18870)) '#f) (apply (lambda () '#f) g$120$18870) (error 'expander '"invalid syntax" (g$120$13243 g$120$18868 '())))) ((lambda (g$120$18872) '()) g$120$18868))) g$120$18860))) ((lambda (g$120$18874) (if (g$120$13211 g$120$18874) (begin '#f ((lambda (g$120$18876) (if g$120$18876 (begin '#f ((lambda (g$120$18878) (if g$120$18878 (begin '#f (append g$120$18876 g$120$18878)) '#f)) ((lambda (g$120$18880) (if (g$120$13211 g$120$18880) (begin '#f ((lambda (g$120$18882) (if g$120$18882 (begin '#f ((lambda (g$120$18884) (if g$120$18884 (begin '#f (append g$120$18882 g$120$18884)) '#f)) ((lambda (g$120$18886) (if (equal? (g$120$13245 g$120$18886) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18880)))) '#f)) ((lambda (g$120$18888) (list g$120$18888)) (g$120$13219 g$120$18880)))) '#f)) (g$120$13223 g$120$18874)))) '#f)) ((lambda (g$120$18890) '()) (g$120$13219 g$120$18874)))) '#f)) g$120$18860))) (g$120$18196 'parent g$120$18770)) ((lambda (g$120$18892) ((lambda (g$120$18894) (if (if g$120$18894 (begin '#f (apply (lambda () '#t) g$120$18894)) '#f) (apply (lambda () (list 'quote (gensym))) g$120$18894) ((lambda (g$120$18896) ((lambda (g$120$18898) (if (if g$120$18898 (begin '#f (apply (lambda (g$120$18900) '#t) g$120$18898)) '#f) (apply (lambda (g$120$18902) (list 'quote g$120$18902)) g$120$18898) ((lambda (g$120$18904) ((lambda (g$120$18906) (if (if g$120$18906 (begin '#f (apply (lambda () '#t) g$120$18906)) '#f) (apply (lambda () '#f) g$120$18906) (error 'expander '"invalid syntax" (g$120$13243 g$120$18904 '())))) ((lambda (g$120$18908) '()) g$120$18904))) g$120$18896))) ((lambda (g$120$18910) (if (g$120$13211 g$120$18910) (begin '#f ((lambda (g$120$18912) (if g$120$18912 (begin '#f ((lambda (g$120$18914) (if g$120$18914 (begin '#f (append g$120$18912 g$120$18914)) '#f)) ((lambda (g$120$18916) (if (g$120$13211 g$120$18916) (begin '#f ((lambda (g$120$18918) (if g$120$18918 (begin '#f ((lambda (g$120$18920) (if g$120$18920 (begin '#f (append g$120$18918 g$120$18920)) '#f)) ((lambda (g$120$18922) (if (equal? (g$120$13245 g$120$18922) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18916)))) '#f)) ((lambda (g$120$18924) (list g$120$18924)) (g$120$13219 g$120$18916)))) '#f)) (g$120$13223 g$120$18910)))) '#f)) ((lambda (g$120$18926) '()) (g$120$13219 g$120$18910)))) '#f)) g$120$18896))) g$120$18892))) ((lambda (g$120$18928) (if (g$120$13211 g$120$18928) (begin '#f ((lambda (g$120$18930) (if g$120$18930 (begin '#f ((lambda (g$120$18932) (if g$120$18932 (begin '#f (append g$120$18930 g$120$18932)) '#f)) ((lambda (g$120$18934) (if (equal? (g$120$13245 g$120$18934) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18928)))) '#f)) ((lambda (g$120$18936) '()) (g$120$13219 g$120$18928)))) '#f)) g$120$18892))) (g$120$18196 'nongenerative g$120$18770)) ((lambda (g$120$18938) ((lambda (g$120$18940) (if (if g$120$18940 (begin '#f (apply (lambda () '#t) g$120$18940)) '#f) (apply (lambda () '#t) g$120$18940) ((lambda (g$120$18942) ((lambda (g$120$18944) (if (if g$120$18944 (begin '#f (apply (lambda () '#t) g$120$18944)) '#f) (apply (lambda () '#f) g$120$18944) (error 'expander '"invalid syntax" (g$120$13243 g$120$18942 '())))) ((lambda (g$120$18946) '()) g$120$18942))) g$120$18938))) ((lambda (g$120$18948) (if (g$120$13211 g$120$18948) (begin '#f ((lambda (g$120$18950) (if g$120$18950 (begin '#f ((lambda (g$120$18952) (if g$120$18952 (begin '#f (append g$120$18950 g$120$18952)) '#f)) ((lambda (g$120$18954) (if (g$120$13211 g$120$18954) (begin '#f ((lambda (g$120$18956) (if g$120$18956 (begin '#f ((lambda (g$120$18958) (if g$120$18958 (begin '#f (append g$120$18956 g$120$18958)) '#f)) ((lambda (g$120$18960) (if (equal? (g$120$13245 g$120$18960) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18954)))) '#f)) ((lambda (g$120$18962) (if (equal? (g$120$13245 g$120$18962) '#t) (begin '#f '()) '#f)) (g$120$13219 g$120$18954)))) '#f)) (g$120$13223 g$120$18948)))) '#f)) ((lambda (g$120$18964) '()) (g$120$13219 g$120$18948)))) '#f)) g$120$18938))) (g$120$18196 'sealed? g$120$18770)) ((lambda (g$120$18966) ((lambda (g$120$18968) (if (if g$120$18968 (begin '#f (apply (lambda () '#t) g$120$18968)) '#f) (apply (lambda () '#t) g$120$18968) ((lambda (g$120$18970) ((lambda (g$120$18972) (if (if g$120$18972 (begin '#f (apply (lambda () '#t) g$120$18972)) '#f) (apply (lambda () '#f) g$120$18972) (error 'expander '"invalid syntax" (g$120$13243 g$120$18970 '())))) ((lambda (g$120$18974) '()) g$120$18970))) g$120$18966))) ((lambda (g$120$18976) (if (g$120$13211 g$120$18976) (begin '#f ((lambda (g$120$18978) (if g$120$18978 (begin '#f ((lambda (g$120$18980) (if g$120$18980 (begin '#f (append g$120$18978 g$120$18980)) '#f)) ((lambda (g$120$18982) (if (g$120$13211 g$120$18982) (begin '#f ((lambda (g$120$18984) (if g$120$18984 (begin '#f ((lambda (g$120$18986) (if g$120$18986 (begin '#f (append g$120$18984 g$120$18986)) '#f)) ((lambda (g$120$18988) (if (equal? (g$120$13245 g$120$18988) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18982)))) '#f)) ((lambda (g$120$18990) (if (equal? (g$120$13245 g$120$18990) '#t) (begin '#f '()) '#f)) (g$120$13219 g$120$18982)))) '#f)) (g$120$13223 g$120$18976)))) '#f)) ((lambda (g$120$18992) '()) (g$120$13219 g$120$18976)))) '#f)) g$120$18966))) (g$120$18196 'opaque? g$120$18770)) ((lambda (g$120$18994) ((lambda (g$120$18996) (if (if g$120$18996 (begin '#f (apply (lambda (g$120$18998) '#t) g$120$18996)) '#f) (apply (lambda (g$120$19000) (list 'quote (g$120$18774 g$120$19000))) g$120$18996) ((lambda (g$120$19002) ((lambda (g$120$19004) (if (if g$120$19004 (begin '#f (apply (lambda () '#t) g$120$19004)) '#f) (apply (lambda () ''#()) g$120$19004) (error 'expander '"invalid syntax" (g$120$13243 g$120$19002 '())))) ((lambda (g$120$19006) '()) g$120$19002))) g$120$18994))) ((lambda (g$120$19008) (if (g$120$13211 g$120$19008) (begin '#f ((lambda (g$120$19010) (if g$120$19010 (begin '#f ((lambda (g$120$19012) (if g$120$19012 (begin '#f (append g$120$19010 g$120$19012)) '#f)) ((letrec ((g$120$19014 (lambda (g$120$19016) (if (g$120$13211 g$120$19016) ((lambda (g$120$19018) (if g$120$19018 (begin '#f ((lambda (g$120$19020) (if g$120$19020 (begin '#f (map cons g$120$19018 g$120$19020)) '#f)) (g$120$19014 (g$120$13223 g$120$19016)))) '#f)) ((lambda (g$120$19022) (list g$120$19022)) (g$120$13219 g$120$19016))) (if (g$120$13215 g$120$19016) (list (begin 'field-spec* '())) '#f))))) g$120$19014) (g$120$13223 g$120$19008)))) '#f)) ((lambda (g$120$19024) '()) (g$120$13219 g$120$19008)))) '#f)) g$120$18994))) (g$120$18196 'fields g$120$18770))))) '#f))) (set! g$120$18200 (lambda (g$120$18728 g$120$18729 g$120$18730) ((lambda (g$120$18734) (list 'make-record-constructor-descriptor g$120$18729 g$120$18734 g$120$18730)) ((lambda (g$120$18736) ((lambda (g$120$18738) (if (if g$120$18738 (begin '#f (apply (lambda (g$120$18740) '#t) g$120$18738)) '#f) (apply (lambda (g$120$18742) (list 'record-constructor-descriptor g$120$18742)) g$120$18738) ((lambda (g$120$18744) ((lambda (g$120$18746) (if (if g$120$18746 (begin '#f (apply (lambda () '#t) g$120$18746)) '#f) (apply (lambda () '#f) g$120$18746) (error 'expander '"invalid syntax" (g$120$13243 g$120$18744 '())))) ((lambda (g$120$18748) '()) g$120$18744))) g$120$18736))) ((lambda (g$120$18750) (if (g$120$13211 g$120$18750) (begin '#f ((lambda (g$120$18752) (if g$120$18752 (begin '#f ((lambda (g$120$18754) (if g$120$18754 (begin '#f (append g$120$18752 g$120$18754)) '#f)) ((lambda (g$120$18756) (if (g$120$13211 g$120$18756) (begin '#f ((lambda (g$120$18758) (if g$120$18758 (begin '#f ((lambda (g$120$18760) (if g$120$18760 (begin '#f (append g$120$18758 g$120$18760)) '#f)) ((lambda (g$120$18762) (if (equal? (g$120$13245 g$120$18762) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18756)))) '#f)) ((lambda (g$120$18764) (list g$120$18764)) (g$120$13219 g$120$18756)))) '#f)) (g$120$13223 g$120$18750)))) '#f)) ((lambda (g$120$18766) '()) (g$120$13219 g$120$18750)))) '#f)) g$120$18736))) (g$120$18196 'parent g$120$18728))))) (set! g$120$18202 (lambda (g$120$18694) ((lambda (g$120$18696) ((lambda (g$120$18698) (if (if g$120$18698 (begin '#f (apply (lambda (g$120$18700) '#t) g$120$18698)) '#f) (apply (lambda (g$120$18702) g$120$18702) g$120$18698) ((lambda (g$120$18704) ((lambda (g$120$18706) (if (if g$120$18706 (begin '#f (apply (lambda () '#t) g$120$18706)) '#f) (apply (lambda () '#f) g$120$18706) (error 'expander '"invalid syntax" (g$120$13243 g$120$18704 '())))) ((lambda (g$120$18708) '()) g$120$18704))) g$120$18696))) ((lambda (g$120$18710) (if (g$120$13211 g$120$18710) (begin '#f ((lambda (g$120$18712) (if g$120$18712 (begin '#f ((lambda (g$120$18714) (if g$120$18714 (begin '#f (append g$120$18712 g$120$18714)) '#f)) ((lambda (g$120$18716) (if (g$120$13211 g$120$18716) (begin '#f ((lambda (g$120$18718) (if g$120$18718 (begin '#f ((lambda (g$120$18720) (if g$120$18720 (begin '#f (append g$120$18718 g$120$18720)) '#f)) ((lambda (g$120$18722) (if (equal? (g$120$13245 g$120$18722) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18716)))) '#f)) ((lambda (g$120$18724) (list g$120$18724)) (g$120$13219 g$120$18716)))) '#f)) (g$120$13223 g$120$18710)))) '#f)) ((lambda (g$120$18726) '()) (g$120$13219 g$120$18710)))) '#f)) g$120$18696))) (g$120$18196 'protocol g$120$18694)))) (set! g$120$18204 (lambda (g$120$18634) ((lambda (g$120$18636) ((lambda (g$120$18638) (if (if g$120$18638 (begin '#f (apply (lambda () '#t) g$120$18638)) '#f) (apply (lambda () '()) g$120$18638) ((lambda (g$120$18640) ((lambda (g$120$18642) (if (if g$120$18642 (begin '#f (apply (lambda (g$120$18644) '#t) g$120$18642)) '#f) (apply (lambda (g$120$18646) g$120$18646) g$120$18642) ((lambda (g$120$18648) ((lambda (g$120$18650) (if (if g$120$18650 (begin '#f (apply (lambda (g$120$18652) '#t) g$120$18650)) '#f) (apply (lambda (g$120$18654) (g$120$18204 g$120$18654)) g$120$18650) (error 'expander '"invalid syntax" (g$120$13243 g$120$18648 '())))) ((lambda (g$120$18656) (if (g$120$13211 g$120$18656) (begin '#f ((lambda (g$120$18658) (if g$120$18658 (begin '#f ((lambda (g$120$18660) (if g$120$18660 (begin '#f (append g$120$18658 g$120$18660)) '#f)) ((lambda (g$120$18662) (list g$120$18662)) (g$120$13223 g$120$18656)))) '#f)) ((lambda (g$120$18664) '()) (g$120$13219 g$120$18656)))) '#f)) g$120$18648))) g$120$18640))) ((lambda (g$120$18666) (if (g$120$13211 g$120$18666) (begin '#f ((lambda (g$120$18668) (if g$120$18668 (begin '#f ((lambda (g$120$18670) (if g$120$18670 (begin '#f (append g$120$18668 g$120$18670)) '#f)) ((lambda (g$120$18672) '()) (g$120$13223 g$120$18666)))) '#f)) ((lambda (g$120$18674) (if (g$120$13211 g$120$18674) (begin '#f ((lambda (g$120$18676) (if g$120$18676 (begin '#f ((lambda (g$120$18678) (if g$120$18678 (begin '#f (append g$120$18676 g$120$18678)) '#f)) ((letrec ((g$120$18680 (lambda (g$120$18682) (if (g$120$13211 g$120$18682) ((lambda (g$120$18684) (if g$120$18684 (begin '#f ((lambda (g$120$18686) (if g$120$18686 (begin '#f (map cons g$120$18684 g$120$18686)) '#f)) (g$120$18680 (g$120$13223 g$120$18682)))) '#f)) ((lambda (g$120$18688) (list g$120$18688)) (g$120$13219 g$120$18682))) (if (g$120$13215 g$120$18682) (list (begin 'f* '())) '#f))))) g$120$18680) (g$120$13223 g$120$18674)))) '#f)) ((lambda (g$120$18690) (if (g$120$13225 g$120$18690) (if (g$120$13233 g$120$18690 (g$120$13478 'fields)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18674)))) '#f)) (g$120$13219 g$120$18666)))) '#f)) g$120$18640))) g$120$18636))) ((lambda (g$120$18692) (if (equal? (g$120$13245 g$120$18692) '()) (begin '#f '()) '#f)) g$120$18636))) g$120$18634))) (set! g$120$18206 (lambda (g$120$18576) (letrec ((g$120$18578 (lambda (g$120$18580 g$120$18581) ((lambda (g$120$18584) ((lambda (g$120$18586) (if (if g$120$18586 (begin '#f (apply (lambda () '#t) g$120$18586)) '#f) (apply (lambda () '()) g$120$18586) ((lambda (g$120$18588) ((lambda (g$120$18590) (if (if g$120$18590 (begin '#f (apply (lambda (g$120$18592) '#t) g$120$18590)) '#f) (apply (lambda (g$120$18594) (cons g$120$18581 (g$120$18578 g$120$18594 (+ g$120$18581 '1)))) g$120$18590) ((lambda (g$120$18596) ((lambda (g$120$18598) (if (if g$120$18598 (begin '#f (apply (lambda (g$120$18600) '#t) g$120$18598)) '#f) (apply (lambda (g$120$18602) (g$120$18578 g$120$18602 (+ g$120$18581 '1))) g$120$18598) (error 'expander '"invalid syntax" (g$120$13243 g$120$18596 '())))) ((lambda (g$120$18604) (if (g$120$13211 g$120$18604) (begin '#f ((lambda (g$120$18606) (if g$120$18606 (begin '#f ((lambda (g$120$18608) (if g$120$18608 (begin '#f (append g$120$18606 g$120$18608)) '#f)) ((lambda (g$120$18610) (list g$120$18610)) (g$120$13223 g$120$18604)))) '#f)) ((lambda (g$120$18612) '()) (g$120$13219 g$120$18604)))) '#f)) g$120$18596))) g$120$18588))) ((lambda (g$120$18614) (if (g$120$13211 g$120$18614) (begin '#f ((lambda (g$120$18616) (if g$120$18616 (begin '#f ((lambda (g$120$18618) (if g$120$18618 (begin '#f (append g$120$18616 g$120$18618)) '#f)) ((lambda (g$120$18620) (list g$120$18620)) (g$120$13223 g$120$18614)))) '#f)) ((lambda (g$120$18622) (if (g$120$13211 g$120$18622) (begin '#f ((lambda (g$120$18624) (if g$120$18624 (begin '#f ((lambda (g$120$18626) (if g$120$18626 (begin '#f (append g$120$18624 g$120$18626)) '#f)) ((lambda (g$120$18628) '()) (g$120$13223 g$120$18622)))) '#f)) ((lambda (g$120$18630) (if (g$120$13225 g$120$18630) (if (g$120$13233 g$120$18630 (g$120$13478 'mutable)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18622)))) '#f)) (g$120$13219 g$120$18614)))) '#f)) g$120$18588))) g$120$18584))) ((lambda (g$120$18632) (if (equal? (g$120$13245 g$120$18632) '()) (begin '#f '()) '#f)) g$120$18584))) g$120$18580)))) (g$120$18578 g$120$18576 '0)))) (set! g$120$18208 (lambda (g$120$18438 g$120$18439 g$120$18440) ((lambda (g$120$18444) (begin (set! g$120$18444 (lambda (g$120$18446) (g$120$13705 g$120$18440 (string->symbol (string-append '"set-" (symbol->string (g$120$13707 g$120$18438)) '"-" (symbol->string (g$120$13707 g$120$18446)) '"!"))))) (letrec ((g$120$18448 (lambda (g$120$18450) ((lambda (g$120$18452) ((lambda (g$120$18454) (if (if g$120$18454 (begin '#f (apply (lambda () '#t) g$120$18454)) '#f) (apply (lambda () '()) g$120$18454) ((lambda (g$120$18456) ((lambda (g$120$18458) (if (if g$120$18458 (begin '#f (apply (lambda (g$120$18460 g$120$18461 g$120$18462 g$120$18463) '#t) g$120$18458)) '#f) (apply (lambda (g$120$18468 g$120$18469 g$120$18470 g$120$18471) (cons g$120$18470 (g$120$18448 g$120$18471))) g$120$18458) ((lambda (g$120$18476) ((lambda (g$120$18478) (if (if g$120$18478 (begin '#f (apply (lambda (g$120$18480 g$120$18481) '#t) g$120$18478)) '#f) (apply (lambda (g$120$18484 g$120$18485) (cons (g$120$18444 g$120$18484) (g$120$18448 g$120$18485))) g$120$18478) ((lambda (g$120$18488) ((lambda (g$120$18490) (if (if g$120$18490 (begin '#f (apply (lambda (g$120$18492) '#t) g$120$18490)) '#f) (apply (lambda (g$120$18494) (g$120$18448 g$120$18494)) g$120$18490) (error 'expander '"invalid syntax" (g$120$13243 g$120$18488 '())))) ((lambda (g$120$18496) (if (g$120$13211 g$120$18496) (begin '#f ((lambda (g$120$18498) (if g$120$18498 (begin '#f ((lambda (g$120$18500) (if g$120$18500 (begin '#f (append g$120$18498 g$120$18500)) '#f)) ((lambda (g$120$18502) (list g$120$18502)) (g$120$13223 g$120$18496)))) '#f)) ((lambda (g$120$18504) '()) (g$120$13219 g$120$18496)))) '#f)) g$120$18488))) g$120$18476))) ((lambda (g$120$18506) (if (g$120$13211 g$120$18506) (begin '#f ((lambda (g$120$18508) (if g$120$18508 (begin '#f ((lambda (g$120$18510) (if g$120$18510 (begin '#f (append g$120$18508 g$120$18510)) '#f)) ((lambda (g$120$18512) (list g$120$18512)) (g$120$13223 g$120$18506)))) '#f)) ((lambda (g$120$18514) (if (g$120$13211 g$120$18514) (begin '#f ((lambda (g$120$18516) (if g$120$18516 (begin '#f ((lambda (g$120$18518) (if g$120$18518 (begin '#f (append g$120$18516 g$120$18518)) '#f)) ((lambda (g$120$18520) (if (g$120$13211 g$120$18520) (begin '#f ((lambda (g$120$18522) (if g$120$18522 (begin '#f ((lambda (g$120$18524) (if g$120$18524 (begin '#f (append g$120$18522 g$120$18524)) '#f)) ((lambda (g$120$18526) (if (equal? (g$120$13245 g$120$18526) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18520)))) '#f)) ((lambda (g$120$18528) (list g$120$18528)) (g$120$13219 g$120$18520)))) '#f)) (g$120$13223 g$120$18514)))) '#f)) ((lambda (g$120$18530) (if (g$120$13225 g$120$18530) (if (g$120$13233 g$120$18530 (g$120$13478 'mutable)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18514)))) '#f)) (g$120$13219 g$120$18506)))) '#f)) g$120$18476))) g$120$18456))) ((lambda (g$120$18532) (if (g$120$13211 g$120$18532) (begin '#f ((lambda (g$120$18534) (if g$120$18534 (begin '#f ((lambda (g$120$18536) (if g$120$18536 (begin '#f (append g$120$18534 g$120$18536)) '#f)) ((lambda (g$120$18538) (list g$120$18538)) (g$120$13223 g$120$18532)))) '#f)) ((lambda (g$120$18540) (if (g$120$13211 g$120$18540) (begin '#f ((lambda (g$120$18542) (if g$120$18542 (begin '#f ((lambda (g$120$18544) (if g$120$18544 (begin '#f (append g$120$18542 g$120$18544)) '#f)) ((lambda (g$120$18546) (if (g$120$13211 g$120$18546) (begin '#f ((lambda (g$120$18548) (if g$120$18548 (begin '#f ((lambda (g$120$18550) (if g$120$18550 (begin '#f (append g$120$18548 g$120$18550)) '#f)) ((lambda (g$120$18552) (if (g$120$13211 g$120$18552) (begin '#f ((lambda (g$120$18554) (if g$120$18554 (begin '#f ((lambda (g$120$18556) (if g$120$18556 (begin '#f (append g$120$18554 g$120$18556)) '#f)) ((lambda (g$120$18558) (if (g$120$13211 g$120$18558) (begin '#f ((lambda (g$120$18560) (if g$120$18560 (begin '#f ((lambda (g$120$18562) (if g$120$18562 (begin '#f (append g$120$18560 g$120$18562)) '#f)) ((lambda (g$120$18564) (if (equal? (g$120$13245 g$120$18564) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18558)))) '#f)) ((lambda (g$120$18566) (list g$120$18566)) (g$120$13219 g$120$18558)))) '#f)) (g$120$13223 g$120$18552)))) '#f)) ((lambda (g$120$18568) (list g$120$18568)) (g$120$13219 g$120$18552)))) '#f)) (g$120$13223 g$120$18546)))) '#f)) ((lambda (g$120$18570) (list g$120$18570)) (g$120$13219 g$120$18546)))) '#f)) (g$120$13223 g$120$18540)))) '#f)) ((lambda (g$120$18572) (if (g$120$13225 g$120$18572) (if (g$120$13233 g$120$18572 (g$120$13478 'mutable)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18540)))) '#f)) (g$120$13219 g$120$18532)))) '#f)) g$120$18456))) g$120$18452))) ((lambda (g$120$18574) (if (equal? (g$120$13245 g$120$18574) '()) (begin '#f '()) '#f)) g$120$18452))) g$120$18450)))) (g$120$18448 g$120$18439)))) '#f))) (set! g$120$18210 (lambda (g$120$18266 g$120$18267 g$120$18268) ((lambda (g$120$18272) (begin (set! g$120$18272 (lambda (g$120$18274) (g$120$13705 g$120$18268 (string->symbol (string-append (symbol->string (g$120$13707 g$120$18266)) '"-" (symbol->string (g$120$13707 g$120$18274))))))) (map (lambda (g$120$18276) ((lambda (g$120$18278) ((lambda (g$120$18280) (if (if g$120$18280 (begin '#f (apply (lambda (g$120$18282 g$120$18283 g$120$18284) (g$120$13225 g$120$18283)) g$120$18280)) '#f) (apply (lambda (g$120$18288 g$120$18289 g$120$18290) g$120$18289) g$120$18280) ((lambda (g$120$18294) ((lambda (g$120$18296) (if (if g$120$18296 (begin '#f (apply (lambda (g$120$18298 g$120$18299) (g$120$13225 g$120$18299)) g$120$18296)) '#f) (apply (lambda (g$120$18302 g$120$18303) g$120$18303) g$120$18296) ((lambda (g$120$18306) ((lambda (g$120$18308) (if (if g$120$18308 (begin '#f (apply (lambda (g$120$18310) (g$120$13225 g$120$18310)) g$120$18308)) '#f) (apply (lambda (g$120$18312) (g$120$18272 g$120$18312)) g$120$18308) ((lambda (g$120$18314) ((lambda (g$120$18316) (if (if g$120$18316 (begin '#f (apply (lambda (g$120$18318) (g$120$13225 g$120$18318)) g$120$18316)) '#f) (apply (lambda (g$120$18320) (g$120$18272 g$120$18320)) g$120$18316) ((lambda (g$120$18322) ((lambda (g$120$18324) (if (if g$120$18324 (begin '#f (apply (lambda (g$120$18326) (g$120$13225 g$120$18326)) g$120$18324)) '#f) (apply (lambda (g$120$18328) (g$120$18272 g$120$18328)) g$120$18324) ((lambda (g$120$18330) ((lambda (g$120$18332) (if (if g$120$18332 (begin '#f (apply (lambda (g$120$18334) '#t) g$120$18332)) '#f) (apply (lambda (g$120$18336) (error 'expander '"invalid field spec" (g$120$13243 g$120$18276 '()))) g$120$18332) (error 'expander '"invalid syntax" (g$120$13243 g$120$18330 '())))) ((lambda (g$120$18338) (list g$120$18338)) g$120$18330))) g$120$18322))) ((lambda (g$120$18340) (list g$120$18340)) g$120$18322))) g$120$18314))) ((lambda (g$120$18342) (if (g$120$13211 g$120$18342) (begin '#f ((lambda (g$120$18344) (if g$120$18344 (begin '#f ((lambda (g$120$18346) (if g$120$18346 (begin '#f (append g$120$18344 g$120$18346)) '#f)) ((lambda (g$120$18348) (if (g$120$13211 g$120$18348) (begin '#f ((lambda (g$120$18350) (if g$120$18350 (begin '#f ((lambda (g$120$18352) (if g$120$18352 (begin '#f (append g$120$18350 g$120$18352)) '#f)) ((lambda (g$120$18354) (if (equal? (g$120$13245 g$120$18354) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18348)))) '#f)) ((lambda (g$120$18356) (list g$120$18356)) (g$120$13219 g$120$18348)))) '#f)) (g$120$13223 g$120$18342)))) '#f)) ((lambda (g$120$18358) (if (g$120$13225 g$120$18358) (if (g$120$13233 g$120$18358 (g$120$13478 'immutable)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18342)))) '#f)) g$120$18314))) g$120$18306))) ((lambda (g$120$18360) (if (g$120$13211 g$120$18360) (begin '#f ((lambda (g$120$18362) (if g$120$18362 (begin '#f ((lambda (g$120$18364) (if g$120$18364 (begin '#f (append g$120$18362 g$120$18364)) '#f)) ((lambda (g$120$18366) (if (g$120$13211 g$120$18366) (begin '#f ((lambda (g$120$18368) (if g$120$18368 (begin '#f ((lambda (g$120$18370) (if g$120$18370 (begin '#f (append g$120$18368 g$120$18370)) '#f)) ((lambda (g$120$18372) (if (equal? (g$120$13245 g$120$18372) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18366)))) '#f)) ((lambda (g$120$18374) (list g$120$18374)) (g$120$13219 g$120$18366)))) '#f)) (g$120$13223 g$120$18360)))) '#f)) ((lambda (g$120$18376) (if (g$120$13225 g$120$18376) (if (g$120$13233 g$120$18376 (g$120$13478 'mutable)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18360)))) '#f)) g$120$18306))) g$120$18294))) ((lambda (g$120$18378) (if (g$120$13211 g$120$18378) (begin '#f ((lambda (g$120$18380) (if g$120$18380 (begin '#f ((lambda (g$120$18382) (if g$120$18382 (begin '#f (append g$120$18380 g$120$18382)) '#f)) ((lambda (g$120$18384) (if (g$120$13211 g$120$18384) (begin '#f ((lambda (g$120$18386) (if g$120$18386 (begin '#f ((lambda (g$120$18388) (if g$120$18388 (begin '#f (append g$120$18386 g$120$18388)) '#f)) ((lambda (g$120$18390) (if (g$120$13211 g$120$18390) (begin '#f ((lambda (g$120$18392) (if g$120$18392 (begin '#f ((lambda (g$120$18394) (if g$120$18394 (begin '#f (append g$120$18392 g$120$18394)) '#f)) ((lambda (g$120$18396) (if (equal? (g$120$13245 g$120$18396) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18390)))) '#f)) ((lambda (g$120$18398) (list g$120$18398)) (g$120$13219 g$120$18390)))) '#f)) (g$120$13223 g$120$18384)))) '#f)) ((lambda (g$120$18400) (list g$120$18400)) (g$120$13219 g$120$18384)))) '#f)) (g$120$13223 g$120$18378)))) '#f)) ((lambda (g$120$18402) (if (g$120$13225 g$120$18402) (if (g$120$13233 g$120$18402 (g$120$13478 'immutable)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18378)))) '#f)) g$120$18294))) g$120$18278))) ((lambda (g$120$18404) (if (g$120$13211 g$120$18404) (begin '#f ((lambda (g$120$18406) (if g$120$18406 (begin '#f ((lambda (g$120$18408) (if g$120$18408 (begin '#f (append g$120$18406 g$120$18408)) '#f)) ((lambda (g$120$18410) (if (g$120$13211 g$120$18410) (begin '#f ((lambda (g$120$18412) (if g$120$18412 (begin '#f ((lambda (g$120$18414) (if g$120$18414 (begin '#f (append g$120$18412 g$120$18414)) '#f)) ((lambda (g$120$18416) (if (g$120$13211 g$120$18416) (begin '#f ((lambda (g$120$18418) (if g$120$18418 (begin '#f ((lambda (g$120$18420) (if g$120$18420 (begin '#f (append g$120$18418 g$120$18420)) '#f)) ((lambda (g$120$18422) (if (g$120$13211 g$120$18422) (begin '#f ((lambda (g$120$18424) (if g$120$18424 (begin '#f ((lambda (g$120$18426) (if g$120$18426 (begin '#f (append g$120$18424 g$120$18426)) '#f)) ((lambda (g$120$18428) (if (equal? (g$120$13245 g$120$18428) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$18422)))) '#f)) ((lambda (g$120$18430) (list g$120$18430)) (g$120$13219 g$120$18422)))) '#f)) (g$120$13223 g$120$18416)))) '#f)) ((lambda (g$120$18432) (list g$120$18432)) (g$120$13219 g$120$18416)))) '#f)) (g$120$13223 g$120$18410)))) '#f)) ((lambda (g$120$18434) (list g$120$18434)) (g$120$13219 g$120$18410)))) '#f)) (g$120$13223 g$120$18404)))) '#f)) ((lambda (g$120$18436) (if (g$120$13225 g$120$18436) (if (g$120$13233 g$120$18436 (g$120$13478 'mutable)) (begin '#f '()) '#f) '#f)) (g$120$13219 g$120$18404)))) '#f)) g$120$18278))) g$120$18276)) g$120$18267))) '#f))) (set! g$120$18212 (lambda (g$120$18258) (letrec ((g$120$18260 (lambda (g$120$18262 g$120$18263) (if (null? g$120$18262) '() (cons g$120$18263 (g$120$18260 (cdr g$120$18262) (+ g$120$18263 '1))))))) (g$120$18260 g$120$18258 '0)))) (set! g$120$18214 (lambda (g$120$18216 g$120$18217 g$120$18218) ((lambda (g$120$18222) ((lambda (g$120$18224) ((lambda (g$120$18226) ((lambda (g$120$18228) ((lambda (g$120$18230) ((lambda (g$120$18232) ((lambda (g$120$18234) ((lambda (g$120$18236) ((lambda (g$120$18238) ((lambda (g$120$18240) ((lambda (g$120$18242) ((lambda (g$120$18244) ((lambda (g$120$18246) ((lambda (g$120$18248) ((lambda () (g$120$13512 (cons 'begin (cons (list 'define g$120$18224 g$120$18244) (cons (list 'define g$120$18228 g$120$18248) (cons (list 'define g$120$18226 g$120$18246) (cons (list 'define-syntax g$120$18222 (list 'list ''$rtd (list 'syntax g$120$18224) (list 'syntax g$120$18226))) (cons (list 'define g$120$18242 (list 'record-predicate g$120$18224)) (cons (list 'define g$120$18230 (list 'record-constructor g$120$18226)) (append (map (lambda (g$120$18250 g$120$18251) (list 'define g$120$18250 (list 'record-accessor g$120$18224 g$120$18251))) g$120$18236 g$120$18234) (map (lambda (g$120$18254 g$120$18255) (list 'define g$120$18254 (list 'record-mutator g$120$18224 g$120$18255))) g$120$18238 g$120$18240))))))))))))) (g$120$18202 g$120$18218))) (g$120$18200 g$120$18218 g$120$18224 g$120$18228))) (g$120$18198 g$120$18216 g$120$18222 g$120$18218))) (g$120$18194 g$120$18217 g$120$18216))) (g$120$18206 g$120$18232))) (g$120$18208 g$120$18222 g$120$18232 g$120$18216))) (g$120$18210 g$120$18222 g$120$18232 g$120$18216))) (g$120$18212 g$120$18232))) (g$120$18204 g$120$18218))) (g$120$18192 g$120$18217 g$120$18216))) (gensym))) (gensym))) (gensym))) (g$120$18190 g$120$18217)))) ((lambda (g$120$19242) ((lambda (g$120$19244) (if (if g$120$19244 (begin '#f (apply (lambda (g$120$19246 g$120$19247 g$120$19248) '#t) g$120$19244)) '#f) (apply (lambda (g$120$19252 g$120$19253 g$120$19254) (g$120$18214 g$120$19252 g$120$19253 g$120$19254)) g$120$19244) (error 'expander '"invalid syntax" (g$120$13243 g$120$19242 '())))) ((lambda (g$120$19258) (if (g$120$13211 g$120$19258) (begin '#f ((lambda (g$120$19260) (if g$120$19260 (begin '#f ((lambda (g$120$19262) (if g$120$19262 (begin '#f (append g$120$19260 g$120$19262)) '#f)) ((lambda (g$120$19264) (if (g$120$13211 g$120$19264) (begin '#f ((lambda (g$120$19266) (if g$120$19266 (begin '#f ((lambda (g$120$19268) (if g$120$19268 (begin '#f (append g$120$19266 g$120$19268)) '#f)) ((letrec ((g$120$19270 (lambda (g$120$19272) (if (g$120$13211 g$120$19272) ((lambda (g$120$19274) (if g$120$19274 (begin '#f ((lambda (g$120$19276) (if g$120$19276 (begin '#f (map cons g$120$19274 g$120$19276)) '#f)) (g$120$19270 (g$120$13223 g$120$19272)))) '#f)) ((lambda (g$120$19278) (list g$120$19278)) (g$120$13219 g$120$19272))) (if (g$120$13215 g$120$19272) (list (begin 'clause* '())) '#f))))) g$120$19270) (g$120$13223 g$120$19264)))) '#f)) ((lambda (g$120$19280) (list g$120$19280)) (g$120$13219 g$120$19264)))) '#f)) (g$120$13223 g$120$19258)))) '#f)) ((lambda (g$120$19282) (list g$120$19282)) (g$120$13219 g$120$19258)))) '#f)) g$120$19242))) g$120$18186))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$120$13558 (lambda (g$120$19284) ((lambda (g$120$19286) (begin (set! g$120$19286 (lambda (g$120$19288 g$120$19289) (g$120$13705 g$120$19288 (string->symbol (string-append (symbol->string (g$120$13707 g$120$19288)) g$120$19289))))) ((lambda (g$120$19292) ((lambda (g$120$19294) (if (if g$120$19294 (begin '#f (apply (lambda (g$120$19296 g$120$19297 g$120$19298 g$120$19299 g$120$19300 g$120$19301 g$120$19302) (if (g$120$13225 g$120$19297) (if (g$120$13225 g$120$19298) (if (g$120$13225 g$120$19299) (if (g$120$13225 g$120$19300) (if (for-all g$120$13225 g$120$19301) (begin '#f (for-all g$120$13225 g$120$19302)) '#f) '#f) '#f) '#f) '#f)) g$120$19294)) '#f) (apply (lambda (g$120$19310 g$120$19311 g$120$19312 g$120$19313 g$120$19314 g$120$19315 g$120$19316) ((lambda (g$120$19324) (g$120$13512 (cons 'begin (cons (cons 'define-record-type (cons (list g$120$19311 g$120$19313 (gensym)) (cons (list 'parent g$120$19312) (cons (cons 'fields (map (lambda (g$120$19326 g$120$19327) (list 'immutable g$120$19326 g$120$19327)) g$120$19315 g$120$19324)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g$120$19314 (list 'condition-predicate (list 'record-type-descriptor g$120$19311))) (map (lambda (g$120$19330 g$120$19331) (list 'define g$120$19330 (list 'condition-accessor (list 'record-type-descriptor g$120$19311) g$120$19331))) g$120$19316 g$120$19324)))))) (map (lambda (g$120$19334) (gensym)) g$120$19316))) g$120$19294) (error 'expander '"invalid syntax" (g$120$13243 g$120$19292 '())))) ((lambda (g$120$19336) (if (g$120$13211 g$120$19336) (begin '#f ((lambda (g$120$19338) (if g$120$19338 (begin '#f ((lambda (g$120$19340) (if g$120$19340 (begin '#f (append g$120$19338 g$120$19340)) '#f)) ((lambda (g$120$19342) (if (g$120$13211 g$120$19342) (begin '#f ((lambda (g$120$19344) (if g$120$19344 (begin '#f ((lambda (g$120$19346) (if g$120$19346 (begin '#f (append g$120$19344 g$120$19346)) '#f)) ((lambda (g$120$19348) (if (g$120$13211 g$120$19348) (begin '#f ((lambda (g$120$19350) (if g$120$19350 (begin '#f ((lambda (g$120$19352) (if g$120$19352 (begin '#f (append g$120$19350 g$120$19352)) '#f)) ((lambda (g$120$19354) (if (g$120$13211 g$120$19354) (begin '#f ((lambda (g$120$19356) (if g$120$19356 (begin '#f ((lambda (g$120$19358) (if g$120$19358 (begin '#f (append g$120$19356 g$120$19358)) '#f)) ((lambda (g$120$19360) (if (g$120$13211 g$120$19360) (begin '#f ((lambda (g$120$19362) (if g$120$19362 (begin '#f ((lambda (g$120$19364) (if g$120$19364 (begin '#f (append g$120$19362 g$120$19364)) '#f)) ((letrec ((g$120$19366 (lambda (g$120$19368) (if (g$120$13211 g$120$19368) ((lambda (g$120$19370) (if g$120$19370 (begin '#f ((lambda (g$120$19372) (if g$120$19372 (begin '#f (map cons g$120$19370 g$120$19372)) '#f)) (g$120$19366 (g$120$13223 g$120$19368)))) '#f)) ((lambda (g$120$19374) (if (g$120$13211 g$120$19374) (begin '#f ((lambda (g$120$19376) (if g$120$19376 (begin '#f ((lambda (g$120$19378) (if g$120$19378 (begin '#f (append g$120$19376 g$120$19378)) '#f)) ((lambda (g$120$19380) (if (g$120$13211 g$120$19380) (begin '#f ((lambda (g$120$19382) (if g$120$19382 (begin '#f ((lambda (g$120$19384) (if g$120$19384 (begin '#f (append g$120$19382 g$120$19384)) '#f)) ((lambda (g$120$19386) (if (equal? (g$120$13245 g$120$19386) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$19380)))) '#f)) ((lambda (g$120$19388) (list g$120$19388)) (g$120$13219 g$120$19380)))) '#f)) (g$120$13223 g$120$19374)))) '#f)) ((lambda (g$120$19390) (list g$120$19390)) (g$120$13219 g$120$19374)))) '#f)) (g$120$13219 g$120$19368))) (if (g$120$13215 g$120$19368) (list (begin 'field* '()) (begin 'accessor* '())) '#f))))) g$120$19366) (g$120$13223 g$120$19360)))) '#f)) ((lambda (g$120$19392) (list g$120$19392)) (g$120$13219 g$120$19360)))) '#f)) (g$120$13223 g$120$19354)))) '#f)) ((lambda (g$120$19394) (list g$120$19394)) (g$120$13219 g$120$19354)))) '#f)) (g$120$13223 g$120$19348)))) '#f)) ((lambda (g$120$19396) (list g$120$19396)) (g$120$13219 g$120$19348)))) '#f)) (g$120$13223 g$120$19342)))) '#f)) ((lambda (g$120$19398) (list g$120$19398)) (g$120$13219 g$120$19342)))) '#f)) (g$120$13223 g$120$19336)))) '#f)) ((lambda (g$120$19400) (list g$120$19400)) (g$120$13219 g$120$19336)))) '#f)) g$120$19292))) g$120$19284))) '#f))) (set! g$120$13560 (lambda (g$120$19402) (error 'expander '"incorrect usage of auxilary keyword" (g$120$13243 g$120$19402 '())))) (set! g$120$13562 (lambda (g$120$19404 g$120$19405 g$120$19406) ((lambda (g$120$19410) ((lambda (g$120$19412) (if (if g$120$19412 (begin '#f (apply (lambda (g$120$19414 g$120$19415) '#t) g$120$19412)) '#f) (apply (lambda (g$120$19418 g$120$19419) (g$120$13612 (cons g$120$19418 g$120$19419) g$120$19405 g$120$19406)) g$120$19412) ((lambda (g$120$19422) ((lambda (g$120$19424) (if (if g$120$19424 (begin '#f (apply (lambda (g$120$19426 g$120$19427 g$120$19428 g$120$19429) '#t) g$120$19424)) '#f) (apply (lambda (g$120$19434 g$120$19435 g$120$19436 g$120$19437) ((lambda (g$120$19442 g$120$19443 g$120$19444 g$120$19445) (g$120$13112 '#f (append g$120$19442 g$120$19443) (append (g$120$13592 g$120$19434 g$120$19405 g$120$19406) (g$120$13592 g$120$19435 g$120$19405 g$120$19406)) (g$120$13112 '#f (list g$120$19445) (list (g$120$13114 '#f '() (g$120$13108 '#f (map (lambda (g$120$19450 g$120$19451 g$120$19452) (g$120$13112 '#f (list g$120$19450) (list (list g$120$19451)) (g$120$13108 '#f (list (list g$120$19451 g$120$19452) (list 'set! g$120$19452 g$120$19450))))) g$120$19444 g$120$19442 g$120$19443)))) (list '(primitive dynamic-wind) g$120$19445 (g$120$13114 '#f '() (g$120$13612 (cons g$120$19436 g$120$19437) g$120$19405 g$120$19406)) g$120$19445)))) (map (lambda (g$120$19456) (g$120$13135 'lhs)) g$120$19434) (map (lambda (g$120$19458) (g$120$13135 'rhs)) g$120$19434) (map (lambda (g$120$19460) (g$120$13135 't)) g$120$19434) (g$120$13135 'swap))) g$120$19424) (error 'expander '"invalid syntax" (g$120$13243 g$120$19422 '())))) ((lambda (g$120$19462) (if (g$120$13211 g$120$19462) (begin '#f ((lambda (g$120$19464) (if g$120$19464 (begin '#f ((lambda (g$120$19466) (if g$120$19466 (begin '#f (append g$120$19464 g$120$19466)) '#f)) ((lambda (g$120$19468) (if (g$120$13211 g$120$19468) (begin '#f ((lambda (g$120$19470) (if g$120$19470 (begin '#f ((lambda (g$120$19472) (if g$120$19472 (begin '#f (append g$120$19470 g$120$19472)) '#f)) ((lambda (g$120$19474) (if (g$120$13211 g$120$19474) (begin '#f ((lambda (g$120$19476) (if g$120$19476 (begin '#f ((lambda (g$120$19478) (if g$120$19478 (begin '#f (append g$120$19476 g$120$19478)) '#f)) ((letrec ((g$120$19480 (lambda (g$120$19482) (if (g$120$13211 g$120$19482) ((lambda (g$120$19484) (if g$120$19484 (begin '#f ((lambda (g$120$19486) (if g$120$19486 (begin '#f (map cons g$120$19484 g$120$19486)) '#f)) (g$120$19480 (g$120$13223 g$120$19482)))) '#f)) ((lambda (g$120$19488) (list g$120$19488)) (g$120$13219 g$120$19482))) (if (g$120$13215 g$120$19482) (list (begin 'b* '())) '#f))))) g$120$19480) (g$120$13223 g$120$19474)))) '#f)) ((lambda (g$120$19490) (list g$120$19490)) (g$120$13219 g$120$19474)))) '#f)) (g$120$13223 g$120$19468)))) '#f)) ((letrec ((g$120$19492 (lambda (g$120$19494) (if (g$120$13211 g$120$19494) ((lambda (g$120$19496) (if g$120$19496 (begin '#f ((lambda (g$120$19498) (if g$120$19498 (begin '#f (map cons g$120$19496 g$120$19498)) '#f)) (g$120$19492 (g$120$13223 g$120$19494)))) '#f)) ((lambda (g$120$19500) (if (g$120$13211 g$120$19500) (begin '#f ((lambda (g$120$19502) (if g$120$19502 (begin '#f ((lambda (g$120$19504) (if g$120$19504 (begin '#f (append g$120$19502 g$120$19504)) '#f)) ((lambda (g$120$19506) (if (g$120$13211 g$120$19506) (begin '#f ((lambda (g$120$19508) (if g$120$19508 (begin '#f ((lambda (g$120$19510) (if g$120$19510 (begin '#f (append g$120$19508 g$120$19510)) '#f)) ((lambda (g$120$19512) (if (equal? (g$120$13245 g$120$19512) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$19506)))) '#f)) ((lambda (g$120$19514) (list g$120$19514)) (g$120$13219 g$120$19506)))) '#f)) (g$120$13223 g$120$19500)))) '#f)) ((lambda (g$120$19516) (list g$120$19516)) (g$120$13219 g$120$19500)))) '#f)) (g$120$13219 g$120$19494))) (if (g$120$13215 g$120$19494) (list (begin 'olhs* '()) (begin 'orhs* '())) '#f))))) g$120$19492) (g$120$13219 g$120$19468)))) '#f)) (g$120$13223 g$120$19462)))) '#f)) ((lambda (g$120$19518) '()) (g$120$13219 g$120$19462)))) '#f)) g$120$19422))) g$120$19410))) ((lambda (g$120$19520) (if (g$120$13211 g$120$19520) (begin '#f ((lambda (g$120$19522) (if g$120$19522 (begin '#f ((lambda (g$120$19524) (if g$120$19524 (begin '#f (append g$120$19522 g$120$19524)) '#f)) ((lambda (g$120$19526) (if (g$120$13211 g$120$19526) (begin '#f ((lambda (g$120$19528) (if g$120$19528 (begin '#f ((lambda (g$120$19530) (if g$120$19530 (begin '#f (append g$120$19528 g$120$19530)) '#f)) ((lambda (g$120$19532) (if (g$120$13211 g$120$19532) (begin '#f ((lambda (g$120$19534) (if g$120$19534 (begin '#f ((lambda (g$120$19536) (if g$120$19536 (begin '#f (append g$120$19534 g$120$19536)) '#f)) ((letrec ((g$120$19538 (lambda (g$120$19540) (if (g$120$13211 g$120$19540) ((lambda (g$120$19542) (if g$120$19542 (begin '#f ((lambda (g$120$19544) (if g$120$19544 (begin '#f (map cons g$120$19542 g$120$19544)) '#f)) (g$120$19538 (g$120$13223 g$120$19540)))) '#f)) ((lambda (g$120$19546) (list g$120$19546)) (g$120$13219 g$120$19540))) (if (g$120$13215 g$120$19540) (list (begin 'b* '())) '#f))))) g$120$19538) (g$120$13223 g$120$19532)))) '#f)) ((lambda (g$120$19548) (list g$120$19548)) (g$120$13219 g$120$19532)))) '#f)) (g$120$13223 g$120$19526)))) '#f)) ((lambda (g$120$19550) (if (equal? (g$120$13245 g$120$19550) '()) (begin '#f '()) '#f)) (g$120$13219 g$120$19526)))) '#f)) (g$120$13223 g$120$19520)))) '#f)) ((lambda (g$120$19552) '()) (g$120$13219 g$120$19520)))) '#f)) g$120$19410))) g$120$19404))) (set! g$120$13564 (lambda (g$120$19554 g$120$19555 g$120$19556) ((lambda (g$120$19560) ((lambda (g$120$19562) (if (if g$120$19562 (begin '#f (apply (lambda (g$120$19564 g$120$19565) '#t) g$120$19562)) '#f) (apply (lambda (g$120$19568 g$120$19569) (cons 'foreign-call (cons (g$120$13596 g$120$19568 g$120$19555 g$120$19556) (g$120$13592 g$120$19569 g$120$19555 g$120$19556)))) g$120$19562) (error 'expander '"invalid syntax" (g$120$13243 g$120$19560 '())))) ((lambda (g$120$19572) (if (g$120$13211 g$120$19572) (begin '#f ((lambda (g$120$19574) (if g$120$19574 (begin '#f ((lambda (g$120$19576) (if g$120$19576 (begin '#f (append g$120$19574 g$120$19576)) '#f)) ((lambda (g$120$19578) (if (g$120$13211 g$120$19578) (begin '#f ((lambda (g$120$19580) (if g$120$19580 (begin '#f ((lambda (g$120$19582) (if g$120$19582 (begin '#f (append g$120$19580 g$120$19582)) '#f)) ((letrec ((g$120$19584 (lambda (g$120$19586) (if (g$120$13211 g$120$19586) ((lambda (g$120$19588) (if g$120$19588 (begin '#f ((lambda (g$120$19590) (if g$120$19590 (begin '#f (map cons g$120$19588 g$120$19590)) '#f)) (g$120$19584 (g$120$13223 g$120$19586)))) '#f)) ((lambda (g$120$19592) (list g$120$19592)) (g$120$13219 g$120$19586))) (if (g$120$13215 g$120$19586) (list (begin 'arg* '())) '#f))))) g$120$19584) (g$120$13223 g$120$19578)))) '#f)) ((lambda (g$120$19594) (list g$120$19594)) (g$120$13219 g$120$19578)))) '#f)) (g$120$13223 g$120$19572)))) '#f)) ((lambda (g$120$19596) '()) (g$120$13219 g$120$19572)))) '#f)) g$120$19560))) g$120$19554))) (set! g$120$13566 (lambda (g$120$19598 g$120$19599) ((lambda (g$120$19602 g$120$19604) (begin (set! g$120$19602 (lambda (g$120$19792 g$120$19793 g$120$19794) (if (null? g$120$19792) (values '() g$120$19794) (call-with-values (lambda () (g$120$19602 (cdr g$120$19792) g$120$19793 g$120$19794)) (lambda (g$120$19798 g$120$19799) (call-with-values (lambda () (g$120$19604 (car g$120$19792) g$120$19793 g$120$19799)) (lambda (g$120$19802 g$120$19803) (values (cons g$120$19802 g$120$19798) g$120$19803)))))))) (set! g$120$19604 (lambda (g$120$19606 g$120$19607 g$120$19608) ((lambda (g$120$19612) ((lambda (g$120$19614) (if (if g$120$19614 (begin '#f (apply (lambda (g$120$19616) (g$120$13225 g$120$19616)) g$120$19614)) '#f) (apply (lambda (g$120$19618) (if (g$120$13239 g$120$19606 g$120$19599) (values (vector 'free-id g$120$19606) g$120$19608) (if (g$120$13233 g$120$19606 (g$120$13478 '_)) (values '_ g$120$19608) (values 'any (cons (cons g$120$19606 g$120$19607) g$120$19608))))) g$120$19614) ((lambda (g$120$19620) ((lambda (g$120$19622) (if (if g$120$19622 (begin '#f (apply (lambda (g$120$19624 g$120$19625) (g$120$13570 g$120$19625)) g$120$19622)) '#f) (apply (lambda (g$120$19628 g$120$19629) (call-with-values (lambda () (g$120$19604 g$120$19628 (+ g$120$19607 '1) g$120$19608)) (lambda (g$120$19632 g$120$19633) (values (if (eq? g$120$19632 'any) 'each-any (vector 'each g$120$19632)) g$120$19633)))) g$120$19622) ((lambda (g$120$19636) ((lambda (g$120$19638) (if (if g$120$19638 (begin '#f (apply (lambda (g$120$19640 g$120$19641 g$120$19642 g$120$19643) (g$120$13570 g$120$19641)) g$120$19638)) '#f) (apply (lambda (g$120$19648 g$120$19649 g$120$19650 g$120$19651) (call-with-values (lambda () (g$120$19604 g$120$19651 g$120$19607 g$120$19608)) (lambda (g$120$19656 g$120$19657) (call-with-values (lambda () (g$120$19602 g$120$19650 g$120$19607 g$120$19657)) (lambda (g$120$19660 g$120$19661) (call-with-values (lambda () (g$120$19604 g$120$19648 (+ g$120$19607 '1) g$120$19661)) (lambda (g$120$19664 g$120$19665) (values (vector 'each+ g$120$19664 (reverse g$120$19660) g$120$19656) g$120$19665)))))))) g$120$19638) ((lambda (g$120$19668) ((lambda (g$120$19670) (if (if g$120$19670 (begin '#f (apply (lambda (g$120$19672 g$120$19673) '#t) g$120$19670)) '#f) (apply (lambda (g$120$19676 g$120$19677) (call-with-values (lambda () (g$120$19604 g$120$19677 g$120$19607 g$120$19608)) (lambda (g$120$19680 g$120$19681) (call-with-values (lambda () (g$120$19604 g$120$19676 g$120$19607 g$120$19681)) (lambda (g$120$19684 g$120$19685) (values (cons g$120$19684 g$120$19680) g$120$19685)))))) g$120$19670) ((lambda (g$120$19688) ((lambda (g$120$19690) (if (if g$120$19690 (begin '#f (apply (lambda () '#t) g$120$19690)) '#f) (apply (lambda () (values '() g$120$19608)) g$120$19690) ((lambda (g$120$19692) ((lambda (g$120$19694) (if (if g$120$19694 (begin '#f (apply (lambda (g$120$19696) (not (g$120$13177 g$120$19696))) g$120$19694)) '#f) (apply (lambda (g$120$19698) (call-with-values (lambda () (g$120$19604 g$120$19698 g$120$19607 g$120$19608)) (lambda (g$120$19700 g$120$19701) (values (vector 'vector g$120$19700) g$120$19701)))) g$120$19694) ((lambda (g$120$19704) ((lambda (g$120$19706) (if (if g$120$19706 (begin '#f (apply (lambda (g$120$19708) '#t) g$120$19706)) '#f) (apply (lambda (g$120$19710) (values (vector 'atom (g$120$13245 g$120$19710)) g$120$19608)) g$120$19706) (error 'expander '"invalid syntax" (g$120$13243 g$120$19704 '())))) ((lambda (g$120$19712) (list g$120$19712)) g$120$19704))) g$120$19692))) ((lambda (g$120$19714) (if (g$120$13213 g$120$19714) (begin '#f ((letrec ((g$120$19716 (lambda (g$120$19718) (if (g$120$13211 g$120$19718) ((lambda (g$120$19720) (if g$120$19720 (begin '#f ((lambda (g$120$19722) (if g$120$19722 (begin '#f (map cons g$120$19720 g$120$19722)) '#f)) (g$120$19716 (g$120$13223 g$120$19718)))) '#f)) ((lambda (g$120$19724) (list g$120$19724)) (g$120$13219 g$120$19718))) (if (g$120$13215 g$120$19718) (list (begin 'p '())) '#f))))) g$120$19716) (g$120$13209 g$120$19714))) '#f)) g$120$19692))) g$120$19688))) ((lambda (g$120$19726) (if (equal? (g$120$13245 g$120$19726) '()) (begin '#f '()) '#f)) g$120$19688))) g$120$19668))) ((lambda (g$120$19728) (if (g$120$13211 g$120$19728) (begin '#f ((lambda (g$120$19730) (if g$120$19730 (begin '#f ((lambda (g$120$19732) (if g$120$19732 (begin '#f (append g$120$19730 g$120$19732)) '#f)) ((lambda (g$120$19734) (list g$120$19734)) (g$120$13223 g$120$19728)))) '#f)) ((lambda (g$120$19736) (list g$120$19736)) (g$120$13219 g$120$19728)))) '#f)) g$120$19668))) g$120$19636))) ((lambda (g$120$19738) (if (g$120$13211 g$120$19738) (begin '#f ((lambda (g$120$19740) (if g$120$19740 (begin '#f ((lambda (g$120$19742) (if g$120$19742 (begin '#f (append g$120$19740 g$120$19742)) '#f)) ((lambda (g$120$19744) (if (g$120$13211 g$120$19744) (begin '#f ((lambda (g$120$19746) (if g$120$19746 (begin '#f ((lambda (g$120$19748) (if g$120$19748 (begin '#f (append g$120$19746 g$120$19748)) '#f)) ((letrec ((g$120$19750 (lambda (g$120$19756) (if (g$120$13211 g$120$19756) ((lambda (g$120$19758) (if g$120$19758 (begin '#f ((lambda (g$120$19760) (if g$120$19760 (begin '#f (cons (map cons g$120$19758 (car g$120$19760)) (cdr g$120$19760))) '#f)) (g$120$19750 (g$120$13223 g$120$19756)))) '#f)) ((lambda (g$120$19762) (list g$120$19762)) (g$120$13219 g$120$19756))) ((lambda (g$120$19764) (if g$120$19764 (begin '#f (cons (list (begin 'ys '())) g$120$19764)) '#f)) ((lambda (g$120$19766) (list g$120$19766)) g$120$19756)))))) (lambda (g$120$19752) ((lambda (g$120$19754) (if g$120$19754 (begin '#f (append (car g$120$19754) (cdr g$120$19754))) '#f)) (g$120$19750 g$120$19752)))) (g$120$13223 g$120$19744)))) '#f)) ((lambda (g$120$19768) (list g$120$19768)) (g$120$13219 g$120$19744)))) '#f)) (g$120$13223 g$120$19738)))) '#f)) ((lambda (g$120$19770) (list g$120$19770)) (g$120$13219 g$120$19738)))) '#f)) g$120$19636))) g$120$19620))) ((lambda (g$120$19772) (if (g$120$13211 g$120$19772) (begin '#f ((lambda (g$120$19774) (if g$120$19774 (begin '#f ((lambda (g$120$19776) (if g$120$19776 (begin '#f (append g$120$19774 g$120$19776)) '#f)) ((lambda (g$120$19778) (if (g$120$13211 g$120$19778) (begin '#f ((lambda (g$120$19780) (if g$120$19780 (begin '#f ((lambda (g$120$19782) (if g$120$19782 (begin '#f (append g$120$19780 g$120$19782)) '#f)) ((lambda (g$120$19784) (if (equal? (g$120$13245 g$120$19784) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$19778)))) '#f)) ((lambda (g$120$19786) (list g$120$19786)) (g$120$13219 g$120$19778)))) '#f)) (g$120$13223 g$120$19772)))) '#f)) ((lambda (g$120$19788) (list g$120$19788)) (g$120$13219 g$120$19772)))) '#f)) g$120$19620))) g$120$19612))) ((lambda (g$120$19790) (list g$120$19790)) g$120$19612))) g$120$19606))) (g$120$19604 g$120$19598 '0 '()))) '#f '#f))) (set! g$120$13568 (lambda (g$120$19806 g$120$19807) ((lambda (g$120$19810 g$120$19812 g$120$19814 g$120$19816 g$120$19818 g$120$19820 g$120$19822 g$120$19824) (begin (set! g$120$19810 (lambda (g$120$19932 g$120$19933 g$120$19934) (if (if (null? g$120$19933) (begin '#f (null? g$120$19934)) '#f) g$120$19932 (g$120$13201 g$120$19932 g$120$19933 g$120$19934)))) (set! g$120$19812 (lambda (g$120$19916 g$120$19917 g$120$19918 g$120$19919) (if (pair? g$120$19916) ((lambda (g$120$19924) (if g$120$19924 (begin '#f ((lambda (g$120$19926) (if g$120$19926 (begin '#f (cons g$120$19924 g$120$19926)) '#f)) (g$120$19812 (cdr g$120$19916) g$120$19917 g$120$19918 g$120$19919))) '#f)) (g$120$19824 (car g$120$19916) g$120$19917 g$120$19918 g$120$19919 '())) (if (null? g$120$19916) '() (if (g$120$13177 g$120$19916) (call-with-values (lambda () (g$120$13199 g$120$19918 g$120$19919 g$120$19916)) (lambda (g$120$19928 g$120$19929) (g$120$19812 (g$120$13179 g$120$19916) g$120$19917 g$120$19928 g$120$19929))) '#f))))) (set! g$120$19814 (lambda (g$120$19882 g$120$19883 g$120$19884 g$120$19885 g$120$19886 g$120$19887 g$120$19888) (letrec ((g$120$19896 (lambda (g$120$19898 g$120$19899 g$120$19900) (if (pair? g$120$19898) (call-with-values (lambda () (g$120$19896 (cdr g$120$19898) g$120$19899 g$120$19900)) (lambda (g$120$19904 g$120$19905 g$120$19906) (if g$120$19906 (if (null? g$120$19905) ((lambda (g$120$19910) (if g$120$19910 (values (cons g$120$19910 g$120$19904) g$120$19905 g$120$19906) (values '#f '#f '#f))) (g$120$19824 (car g$120$19898) g$120$19883 g$120$19899 g$120$19900 '())) (values '() (cdr g$120$19905) (g$120$19824 (car g$120$19898) (car g$120$19905) g$120$19899 g$120$19900 g$120$19906))) (values '#f '#f '#f)))) (if (g$120$13177 g$120$19898) (call-with-values (lambda () (g$120$13199 g$120$19899 g$120$19900 g$120$19898)) (lambda (g$120$19912 g$120$19913) (g$120$19896 (g$120$13179 g$120$19898) g$120$19912 g$120$19913))) (values '() g$120$19884 (g$120$19824 g$120$19898 g$120$19885 g$120$19899 g$120$19900 g$120$19888))))))) (g$120$19896 g$120$19882 g$120$19886 g$120$19887)))) (set! g$120$19816 (lambda (g$120$19870 g$120$19871 g$120$19872) (if (pair? g$120$19870) ((lambda (g$120$19876) (if g$120$19876 (begin '#f (cons (g$120$19810 (car g$120$19870) g$120$19871 g$120$19872) g$120$19876)) '#f)) (g$120$19816 (cdr g$120$19870) g$120$19871 g$120$19872)) (if (null? g$120$19870) '() (if (g$120$13177 g$120$19870) (call-with-values (lambda () (g$120$13199 g$120$19871 g$120$19872 g$120$19870)) (lambda (g$120$19878 g$120$19879) (g$120$19816 (g$120$13179 g$120$19870) g$120$19878 g$120$19879))) '#f))))) (set! g$120$19818 (lambda (g$120$19865 g$120$19866) (if (null? g$120$19865) g$120$19866 (if (eq? g$120$19865 '_) g$120$19866 (if (eq? g$120$19865 'any) (cons '() g$120$19866) (if (pair? g$120$19865) (g$120$19818 (car g$120$19865) (g$120$19818 (cdr g$120$19865) g$120$19866)) (if (eq? g$120$19865 'each-any) (cons '() g$120$19866) ((lambda (g$120$19869) (if (memv g$120$19869 '(each)) (g$120$19818 (vector-ref g$120$19865 '1) g$120$19866) (if (memv g$120$19869 '(each+)) (g$120$19818 (vector-ref g$120$19865 '1) (g$120$19818 (reverse (vector-ref g$120$19865 '2)) (g$120$19818 (vector-ref g$120$19865 '3) g$120$19866))) (if (memv g$120$19869 '(free-id atom)) g$120$19866 (if (memv g$120$19869 '(vector)) (g$120$19818 (vector-ref g$120$19865 '1) g$120$19866) (error 'syntax-dispatch '"invalid pattern" g$120$19865)))))) (vector-ref g$120$19865 '0))))))))) (set! g$120$19820 (lambda (g$120$19861 g$120$19862) (if (null? (car g$120$19861)) g$120$19862 (cons (map car g$120$19861) (g$120$19820 (map cdr g$120$19861) g$120$19862))))) (set! g$120$19822 (lambda (g$120$19840 g$120$19841 g$120$19842 g$120$19843 g$120$19844) (if (null? g$120$19841) (if (null? g$120$19840) (begin '#f g$120$19844) '#f) (if (pair? g$120$19841) (if (pair? g$120$19840) (begin '#f (g$120$19824 (car g$120$19840) (car g$120$19841) g$120$19842 g$120$19843 (g$120$19824 (cdr g$120$19840) (cdr g$120$19841) g$120$19842 g$120$19843 g$120$19844))) '#f) (if (eq? g$120$19841 'each-any) ((lambda (g$120$19850) (if g$120$19850 (begin '#f (cons g$120$19850 g$120$19844)) '#f)) (g$120$19816 g$120$19840 g$120$19842 g$120$19843)) ((lambda (g$120$19852) (if (memv g$120$19852 '(each)) (if (null? g$120$19840) (g$120$19818 (vector-ref g$120$19841 '1) g$120$19844) ((lambda (g$120$19859) (if g$120$19859 (begin '#f (g$120$19820 g$120$19859 g$120$19844)) '#f)) (g$120$19812 g$120$19840 (vector-ref g$120$19841 '1) g$120$19842 g$120$19843))) (if (memv g$120$19852 '(free-id)) (if (symbol? g$120$19840) (if (g$120$13233 (g$120$19810 g$120$19840 g$120$19842 g$120$19843) (vector-ref g$120$19841 '1)) (begin '#f g$120$19844) '#f) '#f) (if (memv g$120$19852 '(each+)) (call-with-values (lambda () (g$120$19814 g$120$19840 (vector-ref g$120$19841 '1) (vector-ref g$120$19841 '2) (vector-ref g$120$19841 '3) g$120$19842 g$120$19843 g$120$19844)) (lambda (g$120$19853 g$120$19854 g$120$19855) (if g$120$19855 (if (null? g$120$19854) (begin '#f (if (null? g$120$19853) (g$120$19818 (vector-ref g$120$19841 '1) g$120$19855) (g$120$19820 g$120$19853 g$120$19855))) '#f) '#f))) (if (memv g$120$19852 '(atom)) (if (equal? (vector-ref g$120$19841 '1) (g$120$13243 g$120$19840 g$120$19842)) (begin '#f g$120$19844) '#f) (if (memv g$120$19852 '(vector)) (if (vector? g$120$19840) (begin '#f (g$120$19824 (vector->list g$120$19840) (vector-ref g$120$19841 '1) g$120$19842 g$120$19843 g$120$19844)) '#f) (error 'syntax-dispatch '"invalid pattern" g$120$19841))))))) (vector-ref g$120$19841 '0))))))) (set! g$120$19824 (lambda (g$120$19826 g$120$19827 g$120$19828 g$120$19829 g$120$19830) (if (not g$120$19830) '#f (if (eq? g$120$19827 '_) g$120$19830 (if (eq? g$120$19827 'any) (cons (g$120$19810 g$120$19826 g$120$19828 g$120$19829) g$120$19830) (if (g$120$13177 g$120$19826) (call-with-values (lambda () (g$120$13199 g$120$19828 g$120$19829 g$120$19826)) (lambda (g$120$19836 g$120$19837) (g$120$19824 (g$120$13179 g$120$19826) g$120$19827 g$120$19836 g$120$19837 g$120$19830))) (g$120$19822 g$120$19826 g$120$19827 g$120$19828 g$120$19829 g$120$19830))))))) (g$120$19824 g$120$19806 g$120$19807 '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$120$13570 (lambda (g$120$19938) (if (g$120$13225 g$120$19938) (begin '#f (g$120$13233 g$120$19938 (g$120$13478 '|...|))) '#f))) (set! g$120$13572 ((lambda () ((lambda (g$120$19940 g$120$19942 g$120$19944 g$120$19946) (begin (set! g$120$19940 (lambda (g$120$20080 g$120$20081 g$120$20082 g$120$20083 g$120$20084) ((lambda (g$120$20090 g$120$20091) ((lambda (g$120$20094 g$120$20095) ((lambda (g$120$20098) (list '(primitive apply) (g$120$13114 '#f g$120$20095 g$120$20098) g$120$20082)) (g$120$13596 (g$120$13205 (g$120$13172 g$120$20090 g$120$20094) g$120$20081) (append (map (lambda (g$120$20100 g$120$20101 g$120$20102) (cons g$120$20100 (g$120$13251 'syntax (cons g$120$20101 g$120$20102)))) g$120$20094 g$120$20095 (map cdr g$120$20080)) g$120$20083) g$120$20084))) (map g$120$13139 g$120$20090) (map g$120$13135 g$120$20090))) (map car g$120$20080) (map cdr g$120$20080)))) (set! g$120$19942 (lambda (g$120$20068 g$120$20069 g$120$20070) (letrec ((g$120$20074 (lambda (g$120$20076 g$120$20077) (if (null? g$120$20076) (error 'expander '"invalid syntax" (g$120$13245 g$120$20069)) (if (g$120$13225 (car g$120$20076)) (if (g$120$13239 (car g$120$20076) g$120$20077) (g$120$13701 (car g$120$20076) '"duplicate " g$120$20070) (g$120$20074 (cdr g$120$20076) (cons (car g$120$20076) g$120$20077))) (g$120$13701 (car g$120$20076) '"invalid " g$120$20070)))))) (g$120$20074 g$120$20068 '())))) (set! g$120$19944 (lambda (g$120$20036 g$120$20037 g$120$20038 g$120$20039 g$120$20040 g$120$20041 g$120$20042 g$120$20043) (call-with-values (lambda () (g$120$13566 g$120$20041 g$120$20037)) (lambda (g$120$20052 g$120$20053) (if (not (g$120$13237 (map car g$120$20053))) (g$120$19942 (map car g$120$20053) g$120$20041 '"pattern variable") (if (not (for-all (lambda (g$120$20056) (not (g$120$13570 (car g$120$20056)))) g$120$20053)) (error 'expander '"misplaced ellipsis in syntax-case pattern" (g$120$13243 g$120$20041 '())) ((lambda (g$120$20058) ((lambda (g$120$20060) ((lambda (g$120$20062) ((lambda (g$120$20064) (list (g$120$13114 '#f (list g$120$20058) (list 'if g$120$20060 g$120$20062 g$120$20064)) (list '(primitive syntax-dispatch) g$120$20036 (list 'quote g$120$20052)))) (g$120$19946 g$120$20036 g$120$20037 g$120$20038 g$120$20039 g$120$20040))) (g$120$19940 g$120$20053 g$120$20043 g$120$20058 g$120$20039 g$120$20040))) (if (eq? g$120$20042 '#t) g$120$20058 ((lambda (g$120$20066) (list 'if g$120$20058 g$120$20066 (list 'quote '#f))) (g$120$19940 g$120$20053 g$120$20042 g$120$20058 g$120$20039 g$120$20040))))) (g$120$13135 'tmp)))))))) (set! g$120$19946 (lambda (g$120$19948 g$120$19949 g$120$19950 g$120$19951 g$120$19952) (if (null? g$120$19950) (list '(primitive syntax-error) g$120$19948) ((lambda (g$120$19958) ((lambda (g$120$19960) (if (if g$120$19960 (begin '#f (apply (lambda (g$120$19962 g$120$19963) '#t) g$120$19960)) '#f) (apply (lambda (g$120$19966 g$120$19967) (if (if (g$120$13225 g$120$19966) (if (not (g$120$13239 g$120$19966 g$120$19949)) (begin '#f (not (g$120$13570 g$120$19966))) '#f) '#f) (if (g$120$13233 g$120$19966 (g$120$13478 '_)) (g$120$13596 g$120$19967 g$120$19951 g$120$19952) ((lambda (g$120$19970 g$120$19971) ((lambda (g$120$19974) (list (g$120$13114 '#f (list g$120$19971) g$120$19974) g$120$19948)) (g$120$13596 (g$120$13205 (g$120$13172 (list g$120$19966) (list g$120$19970)) g$120$19967) (cons (cons g$120$19970 (g$120$13251 'syntax (cons g$120$19971 '0))) g$120$19951) g$120$19952))) (g$120$13139 g$120$19966) (g$120$13135 g$120$19966))) (g$120$19944 g$120$19948 g$120$19949 (cdr g$120$19950) g$120$19951 g$120$19952 g$120$19966 '#t g$120$19967))) g$120$19960) ((lambda (g$120$19976) ((lambda (g$120$19978) (if (if g$120$19978 (begin '#f (apply (lambda (g$120$19980 g$120$19981 g$120$19982) '#t) g$120$19978)) '#f) (apply (lambda (g$120$19986 g$120$19987 g$120$19988) (g$120$19944 g$120$19948 g$120$19949 (cdr g$120$19950) g$120$19951 g$120$19952 g$120$19986 g$120$19987 g$120$19988)) g$120$19978) (error 'expander '"invalid syntax" (g$120$13243 g$120$19976 '())))) ((lambda (g$120$19992) (if (g$120$13211 g$120$19992) (begin '#f ((lambda (g$120$19994) (if g$120$19994 (begin '#f ((lambda (g$120$19996) (if g$120$19996 (begin '#f (append g$120$19994 g$120$19996)) '#f)) ((lambda (g$120$19998) (if (g$120$13211 g$120$19998) (begin '#f ((lambda (g$120$20000) (if g$120$20000 (begin '#f ((lambda (g$120$20002) (if g$120$20002 (begin '#f (append g$120$20000 g$120$20002)) '#f)) ((lambda (g$120$20004) (if (g$120$13211 g$120$20004) (begin '#f ((lambda (g$120$20006) (if g$120$20006 (begin '#f ((lambda (g$120$20008) (if g$120$20008 (begin '#f (append g$120$20006 g$120$20008)) '#f)) ((lambda (g$120$20010) (if (equal? (g$120$13245 g$120$20010) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$20004)))) '#f)) ((lambda (g$120$20012) (list g$120$20012)) (g$120$13219 g$120$20004)))) '#f)) (g$120$13223 g$120$19998)))) '#f)) ((lambda (g$120$20014) (list g$120$20014)) (g$120$13219 g$120$19998)))) '#f)) (g$120$13223 g$120$19992)))) '#f)) ((lambda (g$120$20016) (list g$120$20016)) (g$120$13219 g$120$19992)))) '#f)) g$120$19976))) g$120$19958))) ((lambda (g$120$20018) (if (g$120$13211 g$120$20018) (begin '#f ((lambda (g$120$20020) (if g$120$20020 (begin '#f ((lambda (g$120$20022) (if g$120$20022 (begin '#f (append g$120$20020 g$120$20022)) '#f)) ((lambda (g$120$20024) (if (g$120$13211 g$120$20024) (begin '#f ((lambda (g$120$20026) (if g$120$20026 (begin '#f ((lambda (g$120$20028) (if g$120$20028 (begin '#f (append g$120$20026 g$120$20028)) '#f)) ((lambda (g$120$20030) (if (equal? (g$120$13245 g$120$20030) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$20024)))) '#f)) ((lambda (g$120$20032) (list g$120$20032)) (g$120$13219 g$120$20024)))) '#f)) (g$120$13223 g$120$20018)))) '#f)) ((lambda (g$120$20034) (list g$120$20034)) (g$120$13219 g$120$20018)))) '#f)) g$120$19958))) (car g$120$19950))))) (lambda (g$120$20106 g$120$20107 g$120$20108) ((lambda (g$120$20112) ((lambda (g$120$20114) (if (if g$120$20114 (begin '#f (apply (lambda (g$120$20116 g$120$20117 g$120$20118) '#t) g$120$20114)) '#f) (apply (lambda (g$120$20122 g$120$20123 g$120$20124) (begin (if (for-all (lambda (g$120$20128) (if (g$120$13225 g$120$20128) (begin '#f (not (g$120$13570 g$120$20128))) '#f)) g$120$20123) (void) (error 'expander '"invalid literals" (g$120$13243 g$120$20106 '()))) ((lambda (g$120$20130) ((lambda (g$120$20132) (list (g$120$13114 '#f (list g$120$20130) g$120$20132) (g$120$13596 g$120$20122 g$120$20107 g$120$20108))) (g$120$19946 g$120$20130 g$120$20123 g$120$20124 g$120$20107 g$120$20108))) (g$120$13135 'tmp)))) g$120$20114) (error 'expander '"invalid syntax" (g$120$13243 g$120$20112 '())))) ((lambda (g$120$20134) (if (g$120$13211 g$120$20134) (begin '#f ((lambda (g$120$20136) (if g$120$20136 (begin '#f ((lambda (g$120$20138) (if g$120$20138 (begin '#f (append g$120$20136 g$120$20138)) '#f)) ((lambda (g$120$20140) (if (g$120$13211 g$120$20140) (begin '#f ((lambda (g$120$20142) (if g$120$20142 (begin '#f ((lambda (g$120$20144) (if g$120$20144 (begin '#f (append g$120$20142 g$120$20144)) '#f)) ((lambda (g$120$20146) (if (g$120$13211 g$120$20146) (begin '#f ((lambda (g$120$20148) (if g$120$20148 (begin '#f ((lambda (g$120$20150) (if g$120$20150 (begin '#f (append g$120$20148 g$120$20150)) '#f)) ((letrec ((g$120$20152 (lambda (g$120$20154) (if (g$120$13211 g$120$20154) ((lambda (g$120$20156) (if g$120$20156 (begin '#f ((lambda (g$120$20158) (if g$120$20158 (begin '#f (map cons g$120$20156 g$120$20158)) '#f)) (g$120$20152 (g$120$13223 g$120$20154)))) '#f)) ((lambda (g$120$20160) (list g$120$20160)) (g$120$13219 g$120$20154))) (if (g$120$13215 g$120$20154) (list (begin 'clauses '())) '#f))))) g$120$20152) (g$120$13223 g$120$20146)))) '#f)) ((letrec ((g$120$20162 (lambda (g$120$20164) (if (g$120$13211 g$120$20164) ((lambda (g$120$20166) (if g$120$20166 (begin '#f ((lambda (g$120$20168) (if g$120$20168 (begin '#f (map cons g$120$20166 g$120$20168)) '#f)) (g$120$20162 (g$120$13223 g$120$20164)))) '#f)) ((lambda (g$120$20170) (list g$120$20170)) (g$120$13219 g$120$20164))) (if (g$120$13215 g$120$20164) (list (begin 'keys '())) '#f))))) g$120$20162) (g$120$13219 g$120$20146)))) '#f)) (g$120$13223 g$120$20140)))) '#f)) ((lambda (g$120$20172) (list g$120$20172)) (g$120$13219 g$120$20140)))) '#f)) (g$120$13223 g$120$20134)))) '#f)) ((lambda (g$120$20174) '()) (g$120$13219 g$120$20134)))) '#f)) g$120$20112))) g$120$20106)))) '#f '#f '#f '#f)))) (set! g$120$13574 ((lambda () ((lambda (g$120$20176 g$120$20178 g$120$20180 g$120$20182 g$120$20184 g$120$20186 g$120$20188 g$120$20190) (begin (set! g$120$20176 (lambda (g$120$20262 g$120$20263 g$120$20264 g$120$20265 g$120$20266 g$120$20267) ((lambda (g$120$20274) ((lambda (g$120$20276) (if (if g$120$20276 (begin '#f (apply (lambda (g$120$20278) (g$120$20266 g$120$20278)) g$120$20276)) '#f) (apply (lambda (g$120$20280) (error 'expander '"misplaced ellipsis in syntax form" (g$120$13243 g$120$20262 '()))) g$120$20276) ((lambda (g$120$20282) ((lambda (g$120$20284) (if (if g$120$20284 (begin '#f (apply (lambda (g$120$20286) (g$120$13225 g$120$20286)) g$120$20284)) '#f) (apply (lambda (g$120$20288) ((lambda (g$120$20290) ((lambda (g$120$20292) ((lambda () (if (eq? (g$120$13253 g$120$20292) 'syntax) (call-with-values (lambda () ((lambda (g$120$20294) (g$120$20178 g$120$20262 (car g$120$20294) (cdr g$120$20294) g$120$20265)) (g$120$13255 g$120$20292))) (lambda (g$120$20296 g$120$20297) (values (list 'ref g$120$20296) g$120$20297))) (values (list 'quote g$120$20263) g$120$20265))))) (g$120$13249 g$120$20290 g$120$20264))) (g$120$13247 g$120$20263))) g$120$20284) ((lambda (g$120$20300) ((lambda (g$120$20302) (if (if g$120$20302 (begin '#f (apply (lambda (g$120$20304 g$120$20305) (g$120$20266 g$120$20304)) g$120$20302)) '#f) (apply (lambda (g$120$20308 g$120$20309) (if g$120$20267 (error 'expander '"misplaced ellipsis in syntax form" (g$120$13243 g$120$20262 '())) (g$120$20176 g$120$20262 g$120$20309 g$120$20264 g$120$20265 (lambda (g$120$20312) '#f) '#f))) g$120$20302) ((lambda (g$120$20314) ((lambda (g$120$20316) (if (if g$120$20316 (begin '#f (apply (lambda (g$120$20318 g$120$20319 g$120$20320) (g$120$20266 g$120$20319)) g$120$20316)) '#f) (apply (lambda (g$120$20324 g$120$20325 g$120$20326) (letrec ((g$120$20330 (lambda (g$120$20338 g$120$20339) ((lambda (g$120$20342) ((lambda (g$120$20344) (if (if g$120$20344 (begin '#f (apply (lambda () '#t) g$120$20344)) '#f) (apply (lambda () (g$120$20339 g$120$20265)) g$120$20344) ((lambda (g$120$20346) ((lambda (g$120$20348) (if (if g$120$20348 (begin '#f (apply (lambda (g$120$20350 g$120$20351) (g$120$20266 g$120$20350)) g$120$20348)) '#f) (apply (lambda (g$120$20354 g$120$20355) (g$120$20330 g$120$20355 (lambda (g$120$20358) (call-with-values (lambda () (g$120$20339 (cons '() g$120$20358))) (lambda (g$120$20360 g$120$20361) (if (null? (car g$120$20361)) (error 'expander '"extra ellipsis in syntax form" (g$120$13243 g$120$20262 '())) (values (g$120$20182 g$120$20360 (car g$120$20361)) (cdr g$120$20361)))))))) g$120$20348) ((lambda (g$120$20364) ((lambda (g$120$20366) (if (if g$120$20366 (begin '#f (apply (lambda () '#t) g$120$20366)) '#f) (apply (lambda () (call-with-values (lambda () (g$120$20176 g$120$20262 g$120$20338 g$120$20264 g$120$20265 g$120$20266 g$120$20267)) (lambda (g$120$20368 g$120$20369) (call-with-values (lambda () (g$120$20339 g$120$20369)) (lambda (g$120$20372 g$120$20373) (values (g$120$20180 g$120$20372 g$120$20368) g$120$20373)))))) g$120$20366) (error 'expander '"invalid syntax" (g$120$13243 g$120$20364 '())))) ((lambda (g$120$20376) '()) g$120$20364))) g$120$20346))) ((lambda (g$120$20378) (if (g$120$13211 g$120$20378) (begin '#f ((lambda (g$120$20380) (if g$120$20380 (begin '#f ((lambda (g$120$20382) (if g$120$20382 (begin '#f (append g$120$20380 g$120$20382)) '#f)) ((lambda (g$120$20384) (list g$120$20384)) (g$120$13223 g$120$20378)))) '#f)) ((lambda (g$120$20386) (list g$120$20386)) (g$120$13219 g$120$20378)))) '#f)) g$120$20346))) g$120$20342))) ((lambda (g$120$20388) (if (equal? (g$120$13245 g$120$20388) '()) (begin '#f '()) '#f)) g$120$20342))) g$120$20338)))) (g$120$20330 g$120$20326 (lambda (g$120$20332) (call-with-values (lambda () (g$120$20176 g$120$20262 g$120$20324 g$120$20264 (cons '() g$120$20332) g$120$20266 '#f)) (lambda (g$120$20334 g$120$20335) (if (null? (car g$120$20335)) (error 'expander '"extra ellipsis in syntax form" (g$120$13243 g$120$20262 '())) (values (g$120$20184 g$120$20334 (car g$120$20335)) (cdr g$120$20335))))))))) g$120$20316) ((lambda (g$120$20390) ((lambda (g$120$20392) (if (if g$120$20392 (begin '#f (apply (lambda (g$120$20394 g$120$20395) '#t) g$120$20392)) '#f) (apply (lambda (g$120$20398 g$120$20399) (call-with-values (lambda () (g$120$20176 g$120$20262 g$120$20398 g$120$20264 g$120$20265 g$120$20266 '#f)) (lambda (g$120$20402 g$120$20403) (call-with-values (lambda () (g$120$20176 g$120$20262 g$120$20399 g$120$20264 g$120$20403 g$120$20266 g$120$20267)) (lambda (g$120$20406 g$120$20407) (values (g$120$20186 g$120$20263 g$120$20398 g$120$20399 g$120$20402 g$120$20406) g$120$20407)))))) g$120$20392) ((lambda (g$120$20410) ((lambda (g$120$20412) (if (if g$120$20412 (begin '#f (apply (lambda (g$120$20414) (not (g$120$13177 g$120$20263))) g$120$20412)) '#f) (apply (lambda (g$120$20416) (call-with-values (lambda () (g$120$20176 g$120$20262 g$120$20416 g$120$20264 g$120$20265 g$120$20266 '#t)) (lambda (g$120$20418 g$120$20419) (values (g$120$20188 g$120$20263 g$120$20416 g$120$20418) g$120$20419)))) g$120$20412) ((lambda (g$120$20422) ((lambda (g$120$20424) (if (if g$120$20424 (begin '#f (apply (lambda () '#t) g$120$20424)) '#f) (apply (lambda () (values (list 'quote g$120$20263) g$120$20265)) g$120$20424) (error 'expander '"invalid syntax" (g$120$13243 g$120$20422 '())))) ((lambda (g$120$20426) '()) g$120$20422))) g$120$20410))) ((lambda (g$120$20428) (if (g$120$13213 g$120$20428) (begin '#f ((letrec ((g$120$20430 (lambda (g$120$20432) (if (g$120$13211 g$120$20432) ((lambda (g$120$20434) (if g$120$20434 (begin '#f ((lambda (g$120$20436) (if g$120$20436 (begin '#f (map cons g$120$20434 g$120$20436)) '#f)) (g$120$20430 (g$120$13223 g$120$20432)))) '#f)) ((lambda (g$120$20438) (list g$120$20438)) (g$120$13219 g$120$20432))) (if (g$120$13215 g$120$20432) (list (begin 'ls '())) '#f))))) g$120$20430) (g$120$13209 g$120$20428))) '#f)) g$120$20410))) g$120$20390))) ((lambda (g$120$20440) (if (g$120$13211 g$120$20440) (begin '#f ((lambda (g$120$20442) (if g$120$20442 (begin '#f ((lambda (g$120$20444) (if g$120$20444 (begin '#f (append g$120$20442 g$120$20444)) '#f)) ((lambda (g$120$20446) (list g$120$20446)) (g$120$13223 g$120$20440)))) '#f)) ((lambda (g$120$20448) (list g$120$20448)) (g$120$13219 g$120$20440)))) '#f)) g$120$20390))) g$120$20314))) ((lambda (g$120$20450) (if (g$120$13211 g$120$20450) (begin '#f ((lambda (g$120$20452) (if g$120$20452 (begin '#f ((lambda (g$120$20454) (if g$120$20454 (begin '#f (append g$120$20452 g$120$20454)) '#f)) ((lambda (g$120$20456) (if (g$120$13211 g$120$20456) (begin '#f ((lambda (g$120$20458) (if g$120$20458 (begin '#f ((lambda (g$120$20460) (if g$120$20460 (begin '#f (append g$120$20458 g$120$20460)) '#f)) ((lambda (g$120$20462) (list g$120$20462)) (g$120$13223 g$120$20456)))) '#f)) ((lambda (g$120$20464) (list g$120$20464)) (g$120$13219 g$120$20456)))) '#f)) (g$120$13223 g$120$20450)))) '#f)) ((lambda (g$120$20466) (list g$120$20466)) (g$120$13219 g$120$20450)))) '#f)) g$120$20314))) g$120$20300))) ((lambda (g$120$20468) (if (g$120$13211 g$120$20468) (begin '#f ((lambda (g$120$20470) (if g$120$20470 (begin '#f ((lambda (g$120$20472) (if g$120$20472 (begin '#f (append g$120$20470 g$120$20472)) '#f)) ((lambda (g$120$20474) (if (g$120$13211 g$120$20474) (begin '#f ((lambda (g$120$20476) (if g$120$20476 (begin '#f ((lambda (g$120$20478) (if g$120$20478 (begin '#f (append g$120$20476 g$120$20478)) '#f)) ((lambda (g$120$20480) (if (equal? (g$120$13245 g$120$20480) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$20474)))) '#f)) ((lambda (g$120$20482) (list g$120$20482)) (g$120$13219 g$120$20474)))) '#f)) (g$120$13223 g$120$20468)))) '#f)) ((lambda (g$120$20484) (list g$120$20484)) (g$120$13219 g$120$20468)))) '#f)) g$120$20300))) g$120$20282))) ((lambda (g$120$20486) (list g$120$20486)) g$120$20282))) g$120$20274))) ((lambda (g$120$20488) (list g$120$20488)) g$120$20274))) g$120$20263))) (set! g$120$20178 (lambda (g$120$20244 g$120$20245 g$120$20246 g$120$20247) (if (= g$120$20246 '0) (values g$120$20245 g$120$20247) (if (null? g$120$20247) (error 'expander '"missing ellipsis in syntax form" (g$120$13243 g$120$20244 '())) (call-with-values (lambda () (g$120$20178 g$120$20244 g$120$20245 (- g$120$20246 '1) (cdr g$120$20247))) (lambda (g$120$20252 g$120$20253) ((lambda (g$120$20256) (if g$120$20256 ((lambda (g$120$20258) (values (cdr g$120$20258) g$120$20247)) g$120$20256) ((lambda (g$120$20260) (values g$120$20260 (cons (cons (cons g$120$20252 g$120$20260) (car g$120$20247)) g$120$20253))) (g$120$13135 'tmp)))) (assq g$120$20252 (car g$120$20247))))))))) (set! g$120$20180 (lambda (g$120$20240 g$120$20241) (if (equal? g$120$20241 ''()) g$120$20240 (list 'append g$120$20240 g$120$20241)))) (set! g$120$20182 (lambda (g$120$20236 g$120$20237) (list 'apply '(primitive append) (g$120$20184 g$120$20236 g$120$20237)))) (set! g$120$20184 (lambda (g$120$20218 g$120$20219) ((lambda (g$120$20222 g$120$20223) (if (eq? (car g$120$20218) 'ref) (car g$120$20223) (if (for-all (lambda (g$120$20226) (if (eq? (car g$120$20226) 'ref) (begin '#f (memq (cadr g$120$20226) g$120$20222)) '#f)) (cdr g$120$20218)) ((lambda (g$120$20228) (cons 'map (cons (list 'primitive (car g$120$20218)) g$120$20228))) (map ((lambda (g$120$20230) (lambda (g$120$20232) (cdr (assq (cadr g$120$20232) g$120$20230)))) (map cons g$120$20222 g$120$20223)) (cdr g$120$20218))) (cons* 'map (list 'lambda g$120$20222 g$120$20218) g$120$20223)))) (map cdr g$120$20219) (map (lambda (g$120$20234) (list 'ref (car g$120$20234))) g$120$20219)))) (set! g$120$20186 (lambda (g$120$20203 g$120$20204 g$120$20205 g$120$20206 g$120$20207) ((lambda (g$120$20213) (if (memv g$120$20213 '(quote)) (if (eq? (car g$120$20206) 'quote) ((lambda (g$120$20214 g$120$20215) (if (if (eq? g$120$20214 g$120$20204) (begin '#f (eq? g$120$20215 g$120$20205)) '#f) (list 'quote g$120$20203) (list 'quote (cons g$120$20214 g$120$20215)))) (cadr g$120$20206) (cadr g$120$20207)) (if (null? (cadr g$120$20207)) (list 'list g$120$20206) (list 'cons g$120$20206 g$120$20207))) (if (memv g$120$20213 '(list)) (cons 'list (cons g$120$20206 (cdr g$120$20207))) (list 'cons g$120$20206 g$120$20207)))) (car g$120$20207)))) (set! g$120$20188 (lambda (g$120$20197 g$120$20198 g$120$20199) (if (eq? (car g$120$20199) 'quote) (if (eq? (cadr g$120$20199) g$120$20198) (list 'quote g$120$20197) (list 'quote (list->vector (cadr g$120$20199)))) (if (eq? (car g$120$20199) 'list) (cons 'vector (cdr g$120$20199)) (list 'list->vector g$120$20199))))) (set! g$120$20190 (lambda (g$120$20192) ((lambda (g$120$20194) (if (memv g$120$20194 '(ref)) (cadr g$120$20192) (if (memv g$120$20194 '(primitive)) (list 'primitive (cadr g$120$20192)) (if (memv g$120$20194 '(quote)) (list 'quote (cadr g$120$20192)) (if (memv g$120$20194 '(lambda)) (g$120$13114 '#f (cadr g$120$20192) (g$120$20190 (caddr g$120$20192))) (if (memv g$120$20194 '(map)) ((lambda (g$120$20195) (cons '(primitive map) g$120$20195)) (map g$120$20190 (cdr g$120$20192))) (cons (list 'primitive (car g$120$20192)) (map g$120$20190 (cdr g$120$20192))))))))) (car g$120$20192)))) (lambda (g$120$20490 g$120$20491 g$120$20492) ((lambda (g$120$20496) ((lambda (g$120$20498) (if (if g$120$20498 (begin '#f (apply (lambda (g$120$20500) '#t) g$120$20498)) '#f) (apply (lambda (g$120$20502) (call-with-values (lambda () (g$120$20176 g$120$20490 g$120$20502 g$120$20491 '() g$120$13570 '#f)) (lambda (g$120$20504 g$120$20505) (g$120$20190 g$120$20504)))) g$120$20498) (error 'expander '"invalid syntax" (g$120$13243 g$120$20496 '())))) ((lambda (g$120$20508) (if (g$120$13211 g$120$20508) (begin '#f ((lambda (g$120$20510) (if g$120$20510 (begin '#f ((lambda (g$120$20512) (if g$120$20512 (begin '#f (append g$120$20510 g$120$20512)) '#f)) ((lambda (g$120$20514) (if (g$120$13211 g$120$20514) (begin '#f ((lambda (g$120$20516) (if g$120$20516 (begin '#f ((lambda (g$120$20518) (if g$120$20518 (begin '#f (append g$120$20516 g$120$20518)) '#f)) ((lambda (g$120$20520) (if (equal? (g$120$13245 g$120$20520) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$20514)))) '#f)) ((lambda (g$120$20522) (list g$120$20522)) (g$120$13219 g$120$20514)))) '#f)) (g$120$13223 g$120$20508)))) '#f)) ((lambda (g$120$20524) '()) (g$120$13219 g$120$20508)))) '#f)) g$120$20496))) g$120$20490)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g$120$13576 (lambda (g$120$20526) ((lambda (g$120$20528) (if (memv g$120$20528 '(quote)) g$120$13506 (if (memv g$120$20528 '(lambda)) g$120$13510 (if (memv g$120$20528 '(case-lambda)) g$120$13508 (if (memv g$120$20528 '(let-values)) g$120$13484 (if (memv g$120$20528 '(letrec)) g$120$13488 (if (memv g$120$20528 '(letrec*)) g$120$13490 (if (memv g$120$20528 '(case)) g$120$13504 (if (memv g$120$20528 '(if)) g$120$13502 (if (memv g$120$20528 '(when)) g$120$13498 (if (memv g$120$20528 '(unless)) g$120$13500 (if (memv g$120$20528 '(parameterize)) g$120$13562 (if (memv g$120$20528 '(foreign-call)) g$120$13564 (if (memv g$120$20528 '(syntax-case)) g$120$13572 (if (memv g$120$20528 '(syntax)) g$120$13574 (if (memv g$120$20528 '(type-descriptor)) g$120$13492 (if (memv g$120$20528 '(record-type-descriptor)) g$120$13494 (if (memv g$120$20528 '(record-constructor-descriptor)) g$120$13496 (error 'macro-transformer '"cannot find transformer" g$120$20526))))))))))))))))))) g$120$20526))) (set! g$120$13578 (lambda (g$120$20529) ((lambda (g$120$20531) ((lambda (g$120$20533) (if (if g$120$20533 (begin '#f (apply (lambda (g$120$20535) (if (for-all g$120$13225 g$120$20535) (begin '#f (g$120$12315 (map g$120$13227 g$120$20535))) '#f)) g$120$20533)) '#f) (apply (lambda (g$120$20537) (g$120$13512 (list 'quote (g$120$12315 (map g$120$13227 g$120$20537))))) g$120$20533) (error 'expander '"invalid syntax" (g$120$13243 g$120$20531 '())))) ((lambda (g$120$20539) (if (g$120$13211 g$120$20539) (begin '#f ((lambda (g$120$20541) (if g$120$20541 (begin '#f ((lambda (g$120$20543) (if g$120$20543 (begin '#f (append g$120$20541 g$120$20543)) '#f)) ((letrec ((g$120$20545 (lambda (g$120$20547) (if (g$120$13211 g$120$20547) ((lambda (g$120$20549) (if g$120$20549 (begin '#f ((lambda (g$120$20551) (if g$120$20551 (begin '#f (map cons g$120$20549 g$120$20551)) '#f)) (g$120$20545 (g$120$13223 g$120$20547)))) '#f)) ((lambda (g$120$20553) (list g$120$20553)) (g$120$13219 g$120$20547))) (if (g$120$13215 g$120$20547) (list (begin 'opt* '())) '#f))))) g$120$20545) (g$120$13223 g$120$20539)))) '#f)) ((lambda (g$120$20555) '()) (g$120$13219 g$120$20539)))) '#f)) g$120$20531))) g$120$20529))) (set! g$120$13580 (lambda (g$120$20557 g$120$20558) ((lambda (g$120$20561) ((lambda (g$120$20563) (if (if g$120$20563 (begin '#f (apply (lambda (g$120$20565) (if (g$120$13225 g$120$20565) (begin '#f (memq (g$120$13227 g$120$20565) g$120$20558)) '#f)) g$120$20563)) '#f) (apply (lambda (g$120$20567) (g$120$13512 (list 'quote g$120$20567))) g$120$20563) (error 'expander '"invalid syntax" (g$120$13243 g$120$20561 '())))) ((lambda (g$120$20569) (if (g$120$13211 g$120$20569) (begin '#f ((lambda (g$120$20571) (if g$120$20571 (begin '#f ((lambda (g$120$20573) (if g$120$20573 (begin '#f (append g$120$20571 g$120$20573)) '#f)) ((lambda (g$120$20575) (if (g$120$13211 g$120$20575) (begin '#f ((lambda (g$120$20577) (if g$120$20577 (begin '#f ((lambda (g$120$20579) (if g$120$20579 (begin '#f (append g$120$20577 g$120$20579)) '#f)) ((lambda (g$120$20581) (if (equal? (g$120$13245 g$120$20581) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$20575)))) '#f)) ((lambda (g$120$20583) (list g$120$20583)) (g$120$13219 g$120$20575)))) '#f)) (g$120$13223 g$120$20569)))) '#f)) ((lambda (g$120$20585) '()) (g$120$13219 g$120$20569)))) '#f)) g$120$20561))) g$120$20557))) (set! g$120$13582 (lambda (g$120$20587) (if (procedure? g$120$20587) g$120$20587 (if (symbol? g$120$20587) ((lambda (g$120$20589) (if (memv g$120$20589 '(define-record-type)) g$120$13556 (if (memv g$120$20589 '(define-struct)) g$120$13554 (if (memv g$120$20589 '(include)) g$120$13546 (if (memv g$120$20589 '(cond)) g$120$13544 (if (memv g$120$20589 '(let)) g$120$13516 (if (memv g$120$20589 '(do)) g$120$13536 (if (memv g$120$20589 '(or)) g$120$13540 (if (memv g$120$20589 '(and)) g$120$13542 (if (memv g$120$20589 '(let*)) g$120$13538 (if (memv g$120$20589 '(syntax-rules)) g$120$13548 (if (memv g$120$20589 '(quasiquote)) g$120$13550 (if (memv g$120$20589 '(quasisyntax)) g$120$13552 (if (memv g$120$20589 '(with-syntax)) g$120$13514 (if (memv g$120$20589 '(identifier-syntax)) g$120$13534 (if (memv g$120$20589 '(time)) g$120$13526 (if (memv g$120$20589 '(delay)) g$120$13528 (if (memv g$120$20589 '(assert)) g$120$13530 (if (memv g$120$20589 '(endianness)) g$120$13532 (if (memv g$120$20589 '(guard)) g$120$13522 (if (memv g$120$20589 '(define-enumeration)) g$120$13524 (if (memv g$120$20589 '(trace-lambda)) g$120$13518 (if (memv g$120$20589 '(trace-define)) g$120$13520 (if (memv g$120$20589 '(define-condition-type)) g$120$13558 (if (memv g$120$20589 '(eol-style)) (lambda (g$120$20594) (g$120$13580 g$120$20594 '(none lf cr crlf nel crnel ls))) (if (memv g$120$20589 '(error-handling-mode)) (lambda (g$120$20592) (g$120$13580 g$120$20592 '(ignore raise replace))) (if (memv g$120$20589 '(buffer-mode)) (lambda (g$120$20590) (g$120$13580 g$120$20590 '(none line block))) (if (memv g$120$20589 '(file-options)) g$120$13578 (if (memv g$120$20589 '(|...| => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g$120$13560 (error 'macro-transformer '"invalid macro" g$120$20587)))))))))))))))))))))))))))))) g$120$20587) (error 'core-macro-transformer '"invalid macro" g$120$20587))))) (set! g$120$13584 (lambda (g$120$20596) (car g$120$20596))) (set! g$120$13586 (lambda (g$120$20598 g$120$20599) ((lambda (g$120$20602) (g$120$13203 (g$120$13193) g$120$20602)) ((g$120$13582 g$120$20598) (g$120$13203 g$120$13195 g$120$20599))))) (set! g$120$13588 (lambda (g$120$20604 g$120$20605) ((lambda (g$120$20608) (g$120$13203 (g$120$13193) g$120$20608)) ((g$120$13584 g$120$20604) (g$120$13203 g$120$13195 g$120$20605))))) (set! g$120$13590 (lambda (g$120$20610 g$120$20611) ((lambda (g$120$20614 g$120$20615) (begin (g$120$12829 g$120$20614) ((lambda (g$120$20618) ((lambda (g$120$20620) ((lambda (g$120$20622) (g$120$13203 (g$120$13193) g$120$20622)) (g$120$20620 (g$120$13203 g$120$13195 g$120$20611)))) (if (procedure? g$120$20618) g$120$20618 (error 'chi-global-macro '"not a procedure")))) (symbol-value g$120$20615)))) (car g$120$20610) (cdr g$120$20610)))) (set! g$120$13592 (lambda (g$120$20624 g$120$20625 g$120$20626) (if (null? g$120$20624) '() ((lambda (g$120$20630) (cons g$120$20630 (g$120$13592 (cdr g$120$20624) g$120$20625 g$120$20626))) (g$120$13596 (car g$120$20624) g$120$20625 g$120$20626))))) (set! g$120$13594 (lambda (g$120$20632 g$120$20633 g$120$20634) ((lambda (g$120$20638) ((lambda (g$120$20640) (if (if g$120$20640 (begin '#f (apply (lambda (g$120$20642 g$120$20643) '#t) g$120$20640)) '#f) (apply (lambda (g$120$20646 g$120$20647) ((lambda (g$120$20650) (cons g$120$20650 (g$120$13592 g$120$20647 g$120$20633 g$120$20634))) (g$120$13596 g$120$20646 g$120$20633 g$120$20634))) g$120$20640) (error 'expander '"invalid syntax" (g$120$13243 g$120$20638 '())))) ((lambda (g$120$20652) (if (g$120$13211 g$120$20652) (begin '#f ((lambda (g$120$20654) (if g$120$20654 (begin '#f ((lambda (g$120$20656) (if g$120$20656 (begin '#f (append g$120$20654 g$120$20656)) '#f)) ((letrec ((g$120$20658 (lambda (g$120$20660) (if (g$120$13211 g$120$20660) ((lambda (g$120$20662) (if g$120$20662 (begin '#f ((lambda (g$120$20664) (if g$120$20664 (begin '#f (map cons g$120$20662 g$120$20664)) '#f)) (g$120$20658 (g$120$13223 g$120$20660)))) '#f)) ((lambda (g$120$20666) (list g$120$20666)) (g$120$13219 g$120$20660))) (if (g$120$13215 g$120$20660) (list (begin 'rands '())) '#f))))) g$120$20658) (g$120$13223 g$120$20652)))) '#f)) ((lambda (g$120$20668) (list g$120$20668)) (g$120$13219 g$120$20652)))) '#f)) g$120$20638))) g$120$20632))) (set! g$120$13596 (lambda (g$120$20670 g$120$20671 g$120$20672) (call-with-values (lambda () (g$120$13257 g$120$20670 g$120$20671)) (lambda (g$120$20676 g$120$20677 g$120$20678) ((lambda (g$120$20682) (if (memv g$120$20682 '(core-macro)) ((lambda (g$120$20819) (g$120$20819 g$120$20670 g$120$20671 g$120$20672)) (g$120$13576 g$120$20677)) (if (memv g$120$20682 '(global)) ((lambda (g$120$20815) ((lambda (g$120$20817) ((lambda () (begin ((g$120$13644) g$120$20815) g$120$20817)))) (cdr g$120$20677))) (car g$120$20677)) (if (memv g$120$20682 '(core-prim)) ((lambda (g$120$20813) (list 'primitive g$120$20813)) g$120$20677) (if (memv g$120$20682 '(call)) (g$120$13594 g$120$20670 g$120$20671 g$120$20672) (if (memv g$120$20682 '(lexical)) ((lambda (g$120$20811) g$120$20811) g$120$20677) (if (memv g$120$20682 '(global-macro global-macro!)) (g$120$13596 (g$120$13590 g$120$20677 g$120$20670) g$120$20671 g$120$20672) (if (memv g$120$20682 '(local-macro local-macro!)) (g$120$13596 (g$120$13588 g$120$20677 g$120$20670) g$120$20671 g$120$20672) (if (memv g$120$20682 '(macro macro!)) (g$120$13596 (g$120$13586 g$120$20677 g$120$20670) g$120$20671 g$120$20672) (if (memv g$120$20682 '(constant)) ((lambda (g$120$20809) (list 'quote g$120$20809)) g$120$20677) (if (memv g$120$20682 '(set!)) (g$120$13598 g$120$20670 g$120$20671 g$120$20672) (if (memv g$120$20682 '(begin)) ((lambda (g$120$20771) ((lambda (g$120$20773) (if (if g$120$20773 (begin '#f (apply (lambda (g$120$20775 g$120$20776) '#t) g$120$20773)) '#f) (apply (lambda (g$120$20779 g$120$20780) (g$120$13108 '#f (g$120$13592 (cons g$120$20779 g$120$20780) g$120$20671 g$120$20672))) g$120$20773) (error 'expander '"invalid syntax" (g$120$13243 g$120$20771 '())))) ((lambda (g$120$20783) (if (g$120$13211 g$120$20783) (begin '#f ((lambda (g$120$20785) (if g$120$20785 (begin '#f ((lambda (g$120$20787) (if g$120$20787 (begin '#f (append g$120$20785 g$120$20787)) '#f)) ((lambda (g$120$20789) (if (g$120$13211 g$120$20789) (begin '#f ((lambda (g$120$20791) (if g$120$20791 (begin '#f ((lambda (g$120$20793) (if g$120$20793 (begin '#f (append g$120$20791 g$120$20793)) '#f)) ((letrec ((g$120$20795 (lambda (g$120$20797) (if (g$120$13211 g$120$20797) ((lambda (g$120$20799) (if g$120$20799 (begin '#f ((lambda (g$120$20801) (if g$120$20801 (begin '#f (map cons g$120$20799 g$120$20801)) '#f)) (g$120$20795 (g$120$13223 g$120$20797)))) '#f)) ((lambda (g$120$20803) (list g$120$20803)) (g$120$13219 g$120$20797))) (if (g$120$13215 g$120$20797) (list (begin 'x* '())) '#f))))) g$120$20795) (g$120$13223 g$120$20789)))) '#f)) ((lambda (g$120$20805) (list g$120$20805)) (g$120$13219 g$120$20789)))) '#f)) (g$120$13223 g$120$20783)))) '#f)) ((lambda (g$120$20807) '()) (g$120$13219 g$120$20783)))) '#f)) g$120$20771))) g$120$20670) (if (memv g$120$20682 '(let-syntax letrec-syntax)) ((lambda (g$120$20683) ((lambda (g$120$20685) (if (if g$120$20685 (begin '#f (apply (lambda (g$120$20687 g$120$20688 g$120$20689 g$120$20690) (if (g$120$13235 g$120$20687) (void) (error 'expander '"invalid identifiers" (g$120$13243 g$120$20670 '())))) g$120$20685)) '#f) (apply (lambda (g$120$20695 g$120$20696 g$120$20697 g$120$20698) ((lambda (g$120$20703) ((lambda (g$120$20705) ((lambda (g$120$20707) ((lambda () (g$120$13108 '#f (g$120$13592 (map (lambda (g$120$20709) (g$120$13205 g$120$20705 g$120$20709)) (cons g$120$20697 g$120$20698)) (append (map cons g$120$20703 g$120$20707) g$120$20671) (append (map cons g$120$20703 g$120$20707) g$120$20672)))))) (map (lambda (g$120$20711) (g$120$13275 (g$120$13630 (if (eq? g$120$20676 'let-syntax) g$120$20711 (g$120$13205 g$120$20705 g$120$20711)) g$120$20672))) g$120$20696))) (g$120$13172 g$120$20695 g$120$20703))) (map g$120$13139 g$120$20695))) g$120$20685) (error 'expander '"invalid syntax" (g$120$13243 g$120$20683 '())))) ((lambda (g$120$20713) (if (g$120$13211 g$120$20713) (begin '#f ((lambda (g$120$20715) (if g$120$20715 (begin '#f ((lambda (g$120$20717) (if g$120$20717 (begin '#f (append g$120$20715 g$120$20717)) '#f)) ((lambda (g$120$20719) (if (g$120$13211 g$120$20719) (begin '#f ((lambda (g$120$20721) (if g$120$20721 (begin '#f ((lambda (g$120$20723) (if g$120$20723 (begin '#f (append g$120$20721 g$120$20723)) '#f)) ((lambda (g$120$20725) (if (g$120$13211 g$120$20725) (begin '#f ((lambda (g$120$20727) (if g$120$20727 (begin '#f ((lambda (g$120$20729) (if g$120$20729 (begin '#f (append g$120$20727 g$120$20729)) '#f)) ((letrec ((g$120$20731 (lambda (g$120$20733) (if (g$120$13211 g$120$20733) ((lambda (g$120$20735) (if g$120$20735 (begin '#f ((lambda (g$120$20737) (if g$120$20737 (begin '#f (map cons g$120$20735 g$120$20737)) '#f)) (g$120$20731 (g$120$13223 g$120$20733)))) '#f)) ((lambda (g$120$20739) (list g$120$20739)) (g$120$13219 g$120$20733))) (if (g$120$13215 g$120$20733) (list (begin 'xbody* '())) '#f))))) g$120$20731) (g$120$13223 g$120$20725)))) '#f)) ((lambda (g$120$20741) (list g$120$20741)) (g$120$13219 g$120$20725)))) '#f)) (g$120$13223 g$120$20719)))) '#f)) ((letrec ((g$120$20743 (lambda (g$120$20745) (if (g$120$13211 g$120$20745) ((lambda (g$120$20747) (if g$120$20747 (begin '#f ((lambda (g$120$20749) (if g$120$20749 (begin '#f (map cons g$120$20747 g$120$20749)) '#f)) (g$120$20743 (g$120$13223 g$120$20745)))) '#f)) ((lambda (g$120$20751) (if (g$120$13211 g$120$20751) (begin '#f ((lambda (g$120$20753) (if g$120$20753 (begin '#f ((lambda (g$120$20755) (if g$120$20755 (begin '#f (append g$120$20753 g$120$20755)) '#f)) ((lambda (g$120$20757) (if (g$120$13211 g$120$20757) (begin '#f ((lambda (g$120$20759) (if g$120$20759 (begin '#f ((lambda (g$120$20761) (if g$120$20761 (begin '#f (append g$120$20759 g$120$20761)) '#f)) ((lambda (g$120$20763) (if (equal? (g$120$13245 g$120$20763) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$20757)))) '#f)) ((lambda (g$120$20765) (list g$120$20765)) (g$120$13219 g$120$20757)))) '#f)) (g$120$13223 g$120$20751)))) '#f)) ((lambda (g$120$20767) (list g$120$20767)) (g$120$13219 g$120$20751)))) '#f)) (g$120$13219 g$120$20745))) (if (g$120$13215 g$120$20745) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$120$20743) (g$120$13219 g$120$20719)))) '#f)) (g$120$13223 g$120$20713)))) '#f)) ((lambda (g$120$20769) '()) (g$120$13219 g$120$20713)))) '#f)) g$120$20683))) g$120$20670) (if (memv g$120$20682 '(displaced-lexical)) (error 'expander '"identifier out of context" (g$120$13243 g$120$20670 '())) (if (memv g$120$20682 '(syntax)) (error 'expander '"reference to pattern variable outside a syntax form" (g$120$13243 g$120$20670 '())) (if (memv g$120$20682 '(define define-syntax module import)) (error 'expander '"invalid expression" (g$120$13243 g$120$20670 '())) (error 'expander '"invalid expression" (g$120$13243 g$120$20670 '())))))))))))))))))) g$120$20676))))) (set! g$120$13598 (lambda (g$120$20821 g$120$20822 g$120$20823) ((lambda (g$120$20827) ((lambda (g$120$20829) (if (if g$120$20829 (begin '#f (apply (lambda (g$120$20831 g$120$20832) (g$120$13225 g$120$20831)) g$120$20829)) '#f) (apply (lambda (g$120$20835 g$120$20836) (call-with-values (lambda () (g$120$13257 g$120$20835 g$120$20822)) (lambda (g$120$20839 g$120$20840 g$120$20841) ((lambda (g$120$20845) (if (memv g$120$20845 '(lexical)) (list 'set! g$120$20840 (g$120$13596 g$120$20836 g$120$20822 g$120$20823)) (if (memv g$120$20845 '(global core-prim)) (error 'expander '"cannot modify imported identifier in" (g$120$13243 g$120$20821 '())) (if (memv g$120$20845 '(global-macro!)) (g$120$13596 (g$120$13590 g$120$20840 g$120$20821) g$120$20822 g$120$20823) (if (memv g$120$20845 '(local-macro!)) (g$120$13596 (g$120$13588 g$120$20840 g$120$20821) g$120$20822 g$120$20823) (error 'expander '"invalid syntax" (g$120$13245 g$120$20821))))))) g$120$20839)))) g$120$20829) (error 'expander '"invalid syntax" (g$120$13243 g$120$20827 '())))) ((lambda (g$120$20846) (if (g$120$13211 g$120$20846) (begin '#f ((lambda (g$120$20848) (if g$120$20848 (begin '#f ((lambda (g$120$20850) (if g$120$20850 (begin '#f (append g$120$20848 g$120$20850)) '#f)) ((lambda (g$120$20852) (if (g$120$13211 g$120$20852) (begin '#f ((lambda (g$120$20854) (if g$120$20854 (begin '#f ((lambda (g$120$20856) (if g$120$20856 (begin '#f (append g$120$20854 g$120$20856)) '#f)) ((lambda (g$120$20858) (if (g$120$13211 g$120$20858) (begin '#f ((lambda (g$120$20860) (if g$120$20860 (begin '#f ((lambda (g$120$20862) (if g$120$20862 (begin '#f (append g$120$20860 g$120$20862)) '#f)) ((lambda (g$120$20864) (if (equal? (g$120$13245 g$120$20864) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$20858)))) '#f)) ((lambda (g$120$20866) (list g$120$20866)) (g$120$13219 g$120$20858)))) '#f)) (g$120$13223 g$120$20852)))) '#f)) ((lambda (g$120$20868) (list g$120$20868)) (g$120$13219 g$120$20852)))) '#f)) (g$120$13223 g$120$20846)))) '#f)) ((lambda (g$120$20870) '()) (g$120$13219 g$120$20846)))) '#f)) g$120$20827))) g$120$20821))) (set! g$120$13600 (lambda (g$120$20872 g$120$20873 g$120$20874 g$120$20875) ((lambda (g$120$20880) ((lambda (g$120$20882) (if (if g$120$20882 (begin '#f (apply (lambda (g$120$20884) '#t) g$120$20882)) '#f) (apply (lambda (g$120$20886) (if (g$120$13235 g$120$20886) ((lambda (g$120$20888 g$120$20889) (values g$120$20888 (g$120$13612 (g$120$13205 (g$120$13172 g$120$20886 g$120$20889) g$120$20873) (g$120$13482 g$120$20889 g$120$20888 g$120$20874) g$120$20875))) (map g$120$13135 g$120$20886) (map g$120$13139 g$120$20886)) (error 'expander '"invalid fmls" (g$120$13243 g$120$20872 '())))) g$120$20882) ((lambda (g$120$20892) ((lambda (g$120$20894) (if (if g$120$20894 (begin '#f (apply (lambda (g$120$20896 g$120$20897) '#t) g$120$20894)) '#f) (apply (lambda (g$120$20900 g$120$20901) (if (g$120$13235 (cons g$120$20901 g$120$20900)) ((lambda (g$120$20904 g$120$20905 g$120$20906 g$120$20907) (values (append g$120$20904 g$120$20906) (g$120$13612 (g$120$13205 (g$120$13172 (cons g$120$20901 g$120$20900) (cons g$120$20907 g$120$20905)) g$120$20873) (g$120$13482 (cons g$120$20907 g$120$20905) (cons g$120$20906 g$120$20904) g$120$20874) g$120$20875))) (map g$120$13135 g$120$20900) (map g$120$13139 g$120$20900) (g$120$13135 g$120$20901) (g$120$13139 g$120$20901)) (error 'expander '"invalid fmls" (g$120$13243 g$120$20872 '())))) g$120$20894) ((lambda (g$120$20912) ((lambda (g$120$20914) (if (if g$120$20914 (begin '#f (apply (lambda () '#t) g$120$20914)) '#f) (apply (lambda () (error 'expander '"invalid fmls" (g$120$13243 g$120$20872 '()))) g$120$20914) (error 'expander '"invalid syntax" (g$120$13243 g$120$20912 '())))) ((lambda (g$120$20916) '()) g$120$20912))) g$120$20892))) ((letrec ((g$120$20918 (lambda (g$120$20924) (if (g$120$13211 g$120$20924) ((lambda (g$120$20926) (if g$120$20926 (begin '#f ((lambda (g$120$20928) (if g$120$20928 (begin '#f (cons (map cons g$120$20926 (car g$120$20928)) (cdr g$120$20928))) '#f)) (g$120$20918 (g$120$13223 g$120$20924)))) '#f)) ((lambda (g$120$20930) (list g$120$20930)) (g$120$13219 g$120$20924))) ((lambda (g$120$20932) (if g$120$20932 (begin '#f (cons (list (begin 'x* '())) g$120$20932)) '#f)) ((lambda (g$120$20934) (list g$120$20934)) g$120$20924)))))) (lambda (g$120$20920) ((lambda (g$120$20922) (if g$120$20922 (begin '#f (append (car g$120$20922) (cdr g$120$20922))) '#f)) (g$120$20918 g$120$20920)))) g$120$20892))) g$120$20880))) ((letrec ((g$120$20936 (lambda (g$120$20938) (if (g$120$13211 g$120$20938) ((lambda (g$120$20940) (if g$120$20940 (begin '#f ((lambda (g$120$20942) (if g$120$20942 (begin '#f (map cons g$120$20940 g$120$20942)) '#f)) (g$120$20936 (g$120$13223 g$120$20938)))) '#f)) ((lambda (g$120$20944) (list g$120$20944)) (g$120$13219 g$120$20938))) (if (g$120$13215 g$120$20938) (list (begin 'x* '())) '#f))))) g$120$20936) g$120$20880))) g$120$20872))) (set! g$120$13602 (lambda (g$120$20946 g$120$20947 g$120$20948 g$120$20949) (if (null? g$120$20946) (values '() '()) (call-with-values (lambda () (g$120$13600 (car g$120$20946) (car g$120$20947) g$120$20948 g$120$20949)) (lambda (g$120$20954 g$120$20955) (call-with-values (lambda () (g$120$13602 (cdr g$120$20946) (cdr g$120$20947) g$120$20948 g$120$20949)) (lambda (g$120$20958 g$120$20959) (values (cons g$120$20954 g$120$20958) (cons g$120$20955 g$120$20959))))))))) (set! g$120$13604 (lambda (g$120$20962 g$120$20963 g$120$20964) ((lambda (g$120$20968) (if (memv g$120$20968 '(defun)) ((lambda (g$120$20973) ((lambda (g$120$20975 g$120$20976) (call-with-values (lambda () (g$120$13600 g$120$20975 g$120$20976 g$120$20963 g$120$20964)) (lambda (g$120$20979 g$120$20980) (g$120$13114 '#f g$120$20979 g$120$20980)))) (car g$120$20973) (cdr g$120$20973))) (cdr g$120$20962)) (if (memv g$120$20968 '(expr)) ((lambda (g$120$20971) (g$120$13596 g$120$20971 g$120$20963 g$120$20964)) (cdr g$120$20962)) (if (memv g$120$20968 '(top-expr)) ((lambda (g$120$20969) (g$120$13108 '#f (list (g$120$13596 g$120$20969 g$120$20963 g$120$20964) (g$120$13107)))) (cdr g$120$20962)) (error 'chi-rhs '"invalid rhs" g$120$20962))))) (car g$120$20962)))) (set! g$120$13606 (lambda (g$120$20983 g$120$20984 g$120$20985) (letrec ((g$120$20989 (lambda (g$120$20991) (if (null? g$120$20991) '() ((lambda (g$120$20993) (cons g$120$20993 (g$120$20989 (cdr g$120$20991)))) (g$120$13604 (car g$120$20991) g$120$20984 g$120$20985)))))) (g$120$20989 g$120$20983)))) (set! g$120$13608 (lambda (g$120$20995 g$120$20996 g$120$20997) (if (null? g$120$20996) '#f (if (g$120$13231 g$120$20995 (car g$120$20996)) (car g$120$20997) (g$120$13608 g$120$20995 (cdr g$120$20996) (cdr g$120$20997)))))) (set! g$120$13610 (lambda (g$120$21001) (letrec ((g$120$21003 (lambda (g$120$21005 g$120$21006) (if (null? g$120$21005) g$120$21006 ((lambda (g$120$21009) (if g$120$21009 ((lambda (g$120$21011) (g$120$21003 (cdr g$120$21005) (cons (list (car g$120$21005) g$120$21011) g$120$21006))) g$120$21009) (g$120$21003 (cdr g$120$21005) g$120$21006))) (g$120$13608 (car g$120$21005) (cdr g$120$21005) (cdr g$120$21005))))))) (g$120$21003 g$120$21001 '())))) (set! g$120$13612 (lambda (g$120$21013 g$120$21014 g$120$21015) ((lambda (g$120$21019) (call-with-values (lambda () (g$120$13618 (map (lambda (g$120$21021) (g$120$13205 g$120$21019 g$120$21021)) (g$120$13221 g$120$21013)) g$120$21014 g$120$21015 '() '() '() '() g$120$21019 '#f)) (lambda (g$120$21023 g$120$21024 g$120$21025 g$120$21026 g$120$21027 g$120$21028 g$120$21029) (begin (if (null? g$120$21023) (error 'expander '"no expression in body" (g$120$13243 g$120$21023 '())) (void)) ((lambda (g$120$21037 g$120$21038) (g$120$13105 '#f (reverse g$120$21026) (reverse g$120$21037) (g$120$13108 '#f g$120$21038))) (g$120$13606 g$120$21027 g$120$21024 g$120$21025) (g$120$13592 (append (apply append (reverse g$120$21028)) g$120$21023) g$120$21024 g$120$21025)))))) (g$120$13162)))) (set! g$120$13614 (lambda (g$120$21041) ((lambda (g$120$21043) ((lambda (g$120$21045) (if (if g$120$21045 (begin '#f (apply (lambda (g$120$21047 g$120$21048) '#t) g$120$21045)) '#f) (apply (lambda (g$120$21051 g$120$21052) (begin (if (for-all g$120$13225 g$120$21051) (void) (error 'expander '"module exports must be identifiers" (g$120$13243 g$120$21041 '()))) (values '#f g$120$21051 g$120$21052))) g$120$21045) ((lambda (g$120$21055) ((lambda (g$120$21057) (if (if g$120$21057 (begin '#f (apply (lambda (g$120$21059 g$120$21060 g$120$21061) '#t) g$120$21057)) '#f) (apply (lambda (g$120$21065 g$120$21066 g$120$21067) (begin (if (g$120$13225 g$120$21065) (void) (error 'expander '"module name must be an identifier" (g$120$13243 g$120$21041 '()))) (if (for-all g$120$13225 g$120$21066) (void) (error 'expander '"module exports must be identifiers" (g$120$13243 g$120$21041 '()))) (values g$120$21065 g$120$21066 g$120$21067))) g$120$21057) (error 'expander '"invalid syntax" (g$120$13243 g$120$21055 '())))) ((lambda (g$120$21071) (if (g$120$13211 g$120$21071) (begin '#f ((lambda (g$120$21073) (if g$120$21073 (begin '#f ((lambda (g$120$21075) (if g$120$21075 (begin '#f (append g$120$21073 g$120$21075)) '#f)) ((lambda (g$120$21077) (if (g$120$13211 g$120$21077) (begin '#f ((lambda (g$120$21079) (if g$120$21079 (begin '#f ((lambda (g$120$21081) (if g$120$21081 (begin '#f (append g$120$21079 g$120$21081)) '#f)) ((lambda (g$120$21083) (if (g$120$13211 g$120$21083) (begin '#f ((lambda (g$120$21085) (if g$120$21085 (begin '#f ((lambda (g$120$21087) (if g$120$21087 (begin '#f (append g$120$21085 g$120$21087)) '#f)) ((letrec ((g$120$21089 (lambda (g$120$21091) (if (g$120$13211 g$120$21091) ((lambda (g$120$21093) (if g$120$21093 (begin '#f ((lambda (g$120$21095) (if g$120$21095 (begin '#f (map cons g$120$21093 g$120$21095)) '#f)) (g$120$21089 (g$120$13223 g$120$21091)))) '#f)) ((lambda (g$120$21097) (list g$120$21097)) (g$120$13219 g$120$21091))) (if (g$120$13215 g$120$21091) (list (begin 'b* '())) '#f))))) g$120$21089) (g$120$13223 g$120$21083)))) '#f)) ((letrec ((g$120$21099 (lambda (g$120$21101) (if (g$120$13211 g$120$21101) ((lambda (g$120$21103) (if g$120$21103 (begin '#f ((lambda (g$120$21105) (if g$120$21105 (begin '#f (map cons g$120$21103 g$120$21105)) '#f)) (g$120$21099 (g$120$13223 g$120$21101)))) '#f)) ((lambda (g$120$21107) (list g$120$21107)) (g$120$13219 g$120$21101))) (if (g$120$13215 g$120$21101) (list (begin 'export* '())) '#f))))) g$120$21099) (g$120$13219 g$120$21083)))) '#f)) (g$120$13223 g$120$21077)))) '#f)) ((lambda (g$120$21109) (list g$120$21109)) (g$120$13219 g$120$21077)))) '#f)) (g$120$13223 g$120$21071)))) '#f)) ((lambda (g$120$21111) '()) (g$120$13219 g$120$21071)))) '#f)) g$120$21055))) g$120$21043))) ((lambda (g$120$21113) (if (g$120$13211 g$120$21113) (begin '#f ((lambda (g$120$21115) (if g$120$21115 (begin '#f ((lambda (g$120$21117) (if g$120$21117 (begin '#f (append g$120$21115 g$120$21117)) '#f)) ((lambda (g$120$21119) (if (g$120$13211 g$120$21119) (begin '#f ((lambda (g$120$21121) (if g$120$21121 (begin '#f ((lambda (g$120$21123) (if g$120$21123 (begin '#f (append g$120$21121 g$120$21123)) '#f)) ((letrec ((g$120$21125 (lambda (g$120$21127) (if (g$120$13211 g$120$21127) ((lambda (g$120$21129) (if g$120$21129 (begin '#f ((lambda (g$120$21131) (if g$120$21131 (begin '#f (map cons g$120$21129 g$120$21131)) '#f)) (g$120$21125 (g$120$13223 g$120$21127)))) '#f)) ((lambda (g$120$21133) (list g$120$21133)) (g$120$13219 g$120$21127))) (if (g$120$13215 g$120$21127) (list (begin 'b* '())) '#f))))) g$120$21125) (g$120$13223 g$120$21119)))) '#f)) ((letrec ((g$120$21135 (lambda (g$120$21137) (if (g$120$13211 g$120$21137) ((lambda (g$120$21139) (if g$120$21139 (begin '#f ((lambda (g$120$21141) (if g$120$21141 (begin '#f (map cons g$120$21139 g$120$21141)) '#f)) (g$120$21135 (g$120$13223 g$120$21137)))) '#f)) ((lambda (g$120$21143) (list g$120$21143)) (g$120$13219 g$120$21137))) (if (g$120$13215 g$120$21137) (list (begin 'export* '())) '#f))))) g$120$21135) (g$120$13219 g$120$21119)))) '#f)) (g$120$13223 g$120$21113)))) '#f)) ((lambda (g$120$21145) '()) (g$120$13219 g$120$21113)))) '#f)) g$120$21043))) g$120$21041))) (set! g$120$13616 (lambda (g$120$21147 g$120$21148 g$120$21149 g$120$21150 g$120$21151 g$120$21152 g$120$21153) (call-with-values (lambda () (g$120$13614 g$120$21147)) (lambda (g$120$21161 g$120$21162 g$120$21163) ((lambda (g$120$21167) ((lambda (g$120$21169) ((lambda () (call-with-values (lambda () (g$120$13618 g$120$21169 g$120$21148 g$120$21149 g$120$21150 g$120$21151 g$120$21152 g$120$21153 g$120$21167 '#f)) (lambda (g$120$21171 g$120$21172 g$120$21173 g$120$21174 g$120$21175 g$120$21176 g$120$21177) ((lambda (g$120$21185 g$120$21186) (if (not g$120$21161) (values g$120$21174 g$120$21175 g$120$21162 g$120$21185 g$120$21172 g$120$21173 g$120$21186 g$120$21177) ((lambda (g$120$21189 g$120$21190) (values g$120$21174 g$120$21175 (list g$120$21161) (list g$120$21189) (cons (cons g$120$21189 (cons '$module g$120$21190)) g$120$21172) (cons (cons g$120$21189 (cons '$module g$120$21190)) g$120$21173) g$120$21186 g$120$21177)) (g$120$13139 'module) (cons g$120$21162 g$120$21185)))) (map (lambda (g$120$21193) ((lambda (g$120$21195) (if g$120$21195 g$120$21195 (begin '#f (error 'expander '"cannot find module export" (g$120$13243 g$120$21193 '()))))) (g$120$13247 (g$120$13201 (g$120$13227 g$120$21193) (g$120$13181 g$120$21193) (list g$120$21167))))) g$120$21162) (cons g$120$21171 g$120$21176))))))) (map (lambda (g$120$21197) (g$120$13205 g$120$21167 g$120$21197)) (g$120$13221 g$120$21163)))) (g$120$13162)))))) (set! g$120$13618 (lambda (g$120$21199 g$120$21200 g$120$21201 g$120$21202 g$120$21203 g$120$21204 g$120$21205 g$120$21206 g$120$21207) (if (null? g$120$21199) (values g$120$21199 g$120$21200 g$120$21201 g$120$21202 g$120$21203 g$120$21204 g$120$21205) ((lambda (g$120$21217) (call-with-values (lambda () (g$120$13257 g$120$21217 g$120$21200)) (lambda (g$120$21219 g$120$21220 g$120$21221) ((lambda (g$120$21225) ((lambda (g$120$21227) (if (memv g$120$21227 '(define)) (call-with-values (lambda () (g$120$13474 g$120$21217)) (lambda (g$120$21413 g$120$21414) (begin (if (g$120$13239 g$120$21413 g$120$21225) (error 'expander '"cannot redefine keyword" (g$120$13243 g$120$21217 '())) (void)) ((lambda (g$120$21417 g$120$21418) (begin (g$120$13164 g$120$21206 g$120$21413 g$120$21418) (g$120$13618 (cdr g$120$21199) (g$120$13480 g$120$21418 g$120$21417 g$120$21200) g$120$21201 (cons g$120$21417 g$120$21202) (cons g$120$21414 g$120$21203) g$120$21204 g$120$21225 g$120$21206 g$120$21207))) (g$120$13135 g$120$21413) (g$120$13139 g$120$21413))))) (if (memv g$120$21227 '(define-syntax)) (call-with-values (lambda () (g$120$13476 g$120$21217)) (lambda (g$120$21403 g$120$21404) (begin (if (g$120$13239 g$120$21403 g$120$21225) (error 'expander '"cannot redefine keyword" (g$120$13243 g$120$21217 '())) (void)) ((lambda (g$120$21407 g$120$21408) (begin (g$120$13164 g$120$21206 g$120$21403 g$120$21407) ((lambda (g$120$21411) (g$120$13618 (cdr g$120$21199) (cons (cons g$120$21407 g$120$21411) g$120$21200) (cons (cons g$120$21407 g$120$21411) g$120$21201) g$120$21202 g$120$21203 g$120$21204 g$120$21225 g$120$21206 g$120$21207)) (g$120$13275 g$120$21408)))) (g$120$13139 g$120$21403) (g$120$13630 g$120$21404 g$120$21201))))) (if (memv g$120$21227 '(let-syntax letrec-syntax)) ((lambda (g$120$21327) ((lambda (g$120$21329) (if (if g$120$21329 (begin '#f (apply (lambda (g$120$21331 g$120$21332 g$120$21333) (if (g$120$13235 g$120$21331) (void) (error 'expander '"invalid identifiers" (g$120$13243 g$120$21217 '())))) g$120$21329)) '#f) (apply (lambda (g$120$21337 g$120$21338 g$120$21339) ((lambda (g$120$21343) ((lambda (g$120$21345) ((lambda (g$120$21347) ((lambda () (g$120$13618 (append (map (lambda (g$120$21349) (g$120$13205 g$120$21345 g$120$21349)) g$120$21339) (cdr g$120$21199)) (append (map cons g$120$21343 g$120$21347) g$120$21200) (append (map cons g$120$21343 g$120$21347) g$120$21201) g$120$21202 g$120$21203 g$120$21204 g$120$21225 g$120$21206 g$120$21207)))) (map (lambda (g$120$21351) (g$120$13275 (g$120$13630 (if (eq? g$120$21219 'let-syntax) g$120$21351 (g$120$13205 g$120$21345 g$120$21351)) g$120$21201))) g$120$21338))) (g$120$13172 g$120$21337 g$120$21343))) (map g$120$13139 g$120$21337))) g$120$21329) (error 'expander '"invalid syntax" (g$120$13243 g$120$21327 '())))) ((lambda (g$120$21353) (if (g$120$13211 g$120$21353) (begin '#f ((lambda (g$120$21355) (if g$120$21355 (begin '#f ((lambda (g$120$21357) (if g$120$21357 (begin '#f (append g$120$21355 g$120$21357)) '#f)) ((lambda (g$120$21359) (if (g$120$13211 g$120$21359) (begin '#f ((lambda (g$120$21361) (if g$120$21361 (begin '#f ((lambda (g$120$21363) (if g$120$21363 (begin '#f (append g$120$21361 g$120$21363)) '#f)) ((letrec ((g$120$21365 (lambda (g$120$21367) (if (g$120$13211 g$120$21367) ((lambda (g$120$21369) (if g$120$21369 (begin '#f ((lambda (g$120$21371) (if g$120$21371 (begin '#f (map cons g$120$21369 g$120$21371)) '#f)) (g$120$21365 (g$120$13223 g$120$21367)))) '#f)) ((lambda (g$120$21373) (list g$120$21373)) (g$120$13219 g$120$21367))) (if (g$120$13215 g$120$21367) (list (begin 'xbody* '())) '#f))))) g$120$21365) (g$120$13223 g$120$21359)))) '#f)) ((letrec ((g$120$21375 (lambda (g$120$21377) (if (g$120$13211 g$120$21377) ((lambda (g$120$21379) (if g$120$21379 (begin '#f ((lambda (g$120$21381) (if g$120$21381 (begin '#f (map cons g$120$21379 g$120$21381)) '#f)) (g$120$21375 (g$120$13223 g$120$21377)))) '#f)) ((lambda (g$120$21383) (if (g$120$13211 g$120$21383) (begin '#f ((lambda (g$120$21385) (if g$120$21385 (begin '#f ((lambda (g$120$21387) (if g$120$21387 (begin '#f (append g$120$21385 g$120$21387)) '#f)) ((lambda (g$120$21389) (if (g$120$13211 g$120$21389) (begin '#f ((lambda (g$120$21391) (if g$120$21391 (begin '#f ((lambda (g$120$21393) (if g$120$21393 (begin '#f (append g$120$21391 g$120$21393)) '#f)) ((lambda (g$120$21395) (if (equal? (g$120$13245 g$120$21395) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$21389)))) '#f)) ((lambda (g$120$21397) (list g$120$21397)) (g$120$13219 g$120$21389)))) '#f)) (g$120$13223 g$120$21383)))) '#f)) ((lambda (g$120$21399) (list g$120$21399)) (g$120$13219 g$120$21383)))) '#f)) (g$120$13219 g$120$21377))) (if (g$120$13215 g$120$21377) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$120$21375) (g$120$13219 g$120$21359)))) '#f)) (g$120$13223 g$120$21353)))) '#f)) ((lambda (g$120$21401) '()) (g$120$13219 g$120$21353)))) '#f)) g$120$21327))) g$120$21217) (if (memv g$120$21227 '(begin)) ((lambda (g$120$21301) ((lambda (g$120$21303) (if (if g$120$21303 (begin '#f (apply (lambda (g$120$21305) '#t) g$120$21303)) '#f) (apply (lambda (g$120$21307) (g$120$13618 (append g$120$21307 (cdr g$120$21199)) g$120$21200 g$120$21201 g$120$21202 g$120$21203 g$120$21204 g$120$21225 g$120$21206 g$120$21207)) g$120$21303) (error 'expander '"invalid syntax" (g$120$13243 g$120$21301 '())))) ((lambda (g$120$21309) (if (g$120$13211 g$120$21309) (begin '#f ((lambda (g$120$21311) (if g$120$21311 (begin '#f ((lambda (g$120$21313) (if g$120$21313 (begin '#f (append g$120$21311 g$120$21313)) '#f)) ((letrec ((g$120$21315 (lambda (g$120$21317) (if (g$120$13211 g$120$21317) ((lambda (g$120$21319) (if g$120$21319 (begin '#f ((lambda (g$120$21321) (if g$120$21321 (begin '#f (map cons g$120$21319 g$120$21321)) '#f)) (g$120$21315 (g$120$13223 g$120$21317)))) '#f)) ((lambda (g$120$21323) (list g$120$21323)) (g$120$13219 g$120$21317))) (if (g$120$13215 g$120$21317) (list (begin 'x* '())) '#f))))) g$120$21315) (g$120$13223 g$120$21309)))) '#f)) ((lambda (g$120$21325) '()) (g$120$13219 g$120$21309)))) '#f)) g$120$21301))) g$120$21217) (if (memv g$120$21227 '(global-macro global-macro!)) (g$120$13618 (cons (g$120$13205 g$120$21206 (g$120$13590 g$120$21220 g$120$21217)) (cdr g$120$21199)) g$120$21200 g$120$21201 g$120$21202 g$120$21203 g$120$21204 g$120$21225 g$120$21206 g$120$21207) (if (memv g$120$21227 '(local-macro local-macro!)) (g$120$13618 (cons (g$120$13205 g$120$21206 (g$120$13588 g$120$21220 g$120$21217)) (cdr g$120$21199)) g$120$21200 g$120$21201 g$120$21202 g$120$21203 g$120$21204 g$120$21225 g$120$21206 g$120$21207) (if (memv g$120$21227 '(macro macro!)) (g$120$13618 (cons (g$120$13205 g$120$21206 (g$120$13586 g$120$21220 g$120$21217)) (cdr g$120$21199)) g$120$21200 g$120$21201 g$120$21202 g$120$21203 g$120$21204 g$120$21225 g$120$21206 g$120$21207) (if (memv g$120$21227 '(module)) (call-with-values (lambda () (g$120$13616 g$120$21217 g$120$21200 g$120$21201 g$120$21202 g$120$21203 g$120$21204 g$120$21225)) (lambda (g$120$21281 g$120$21282 g$120$21283 g$120$21284 g$120$21285 g$120$21286 g$120$21287 g$120$21288) (begin (for-each (lambda (g$120$21297 g$120$21298) (g$120$13164 g$120$21206 g$120$21297 g$120$21298)) g$120$21283 g$120$21284) (g$120$13618 (cdr g$120$21199) g$120$21285 g$120$21286 g$120$21281 g$120$21282 g$120$21287 g$120$21288 g$120$21206 g$120$21207)))) (if (memv g$120$21227 '(import)) (begin ((lambda () ((lambda (g$120$21228) (begin (set! g$120$21228 (lambda (g$120$21230 g$120$21231) ((lambda (g$120$21234) ((lambda (g$120$21236) (if (if g$120$21236 (begin '#f (apply (lambda (g$120$21238) (g$120$13225 g$120$21238)) g$120$21236)) '#f) (apply (lambda (g$120$21240) (call-with-values (lambda () (g$120$13257 g$120$21240 g$120$21231)) (lambda (g$120$21242 g$120$21243 g$120$21244) ((lambda (g$120$21248) (if (memv g$120$21248 '($module)) ((lambda (g$120$21249) ((lambda (g$120$21251 g$120$21252) (values g$120$21251 g$120$21252)) (car g$120$21249) (cdr g$120$21249))) g$120$21243) (error 'expander '"invalid import" (g$120$13243 g$120$21230 '())))) g$120$21242)))) g$120$21236) (error 'expander '"invalid syntax" (g$120$13243 g$120$21234 '())))) ((lambda (g$120$21255) (if (g$120$13211 g$120$21255) (begin '#f ((lambda (g$120$21257) (if g$120$21257 (begin '#f ((lambda (g$120$21259) (if g$120$21259 (begin '#f (append g$120$21257 g$120$21259)) '#f)) ((lambda (g$120$21261) (if (g$120$13211 g$120$21261) (begin '#f ((lambda (g$120$21263) (if g$120$21263 (begin '#f ((lambda (g$120$21265) (if g$120$21265 (begin '#f (append g$120$21263 g$120$21265)) '#f)) ((lambda (g$120$21267) (if (equal? (g$120$13245 g$120$21267) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$21261)))) '#f)) ((lambda (g$120$21269) (list g$120$21269)) (g$120$13219 g$120$21261)))) '#f)) (g$120$13223 g$120$21255)))) '#f)) ((lambda (g$120$21271) '()) (g$120$13219 g$120$21255)))) '#f)) g$120$21234))) g$120$21230))) (call-with-values (lambda () (g$120$21228 g$120$21217 g$120$21200)) (lambda (g$120$21273 g$120$21274) (for-each (lambda (g$120$21277 g$120$21278) (g$120$13164 g$120$21206 g$120$21277 g$120$21278)) g$120$21273 g$120$21274))))) '#f))) (g$120$13618 (cdr g$120$21199) g$120$21200 g$120$21201 g$120$21202 g$120$21203 g$120$21204 g$120$21225 g$120$21206 g$120$21207)) (if g$120$21207 (g$120$13618 (cdr g$120$21199) g$120$21200 g$120$21201 (cons (g$120$13135 'dummy) g$120$21202) (cons (cons 'top-expr g$120$21217) g$120$21203) g$120$21204 g$120$21225 g$120$21206 g$120$21207) (values g$120$21199 g$120$21200 g$120$21201 g$120$21202 g$120$21203 g$120$21204 g$120$21225)))))))))))) g$120$21219)) (if (g$120$13225 g$120$21221) (cons g$120$21221 g$120$21205) g$120$21205))))) (car g$120$21199))))) (set! g$120$13620 (lambda (g$120$21421 g$120$21422 g$120$21423) (begin (g$120$12833 (g$120$13711) g$120$21421 g$120$21422) (g$120$12832 (g$120$13711) g$120$21422 g$120$21423)))) (set! g$120$13622 (lambda (g$120$21427 g$120$21428) (g$120$13624 g$120$21427 g$120$21428))) (set! g$120$13624 (lambda (g$120$21431 g$120$21432) ((lambda (g$120$21435) ((lambda (g$120$21437) ((lambda (g$120$21439) (if (memv g$120$21439 '(global)) ((lambda (g$120$21440) ((lambda (g$120$21442 g$120$21443) (if (eq? g$120$21442 (g$120$13711)) g$120$21443 (error 'expander '"cannot modify imported binding" (g$120$13243 g$120$21432 '())))) (car g$120$21440) (cdr g$120$21440))) (g$120$13255 g$120$21437)) (error 'expander '"cannot modify binding in" (g$120$13243 g$120$21432 '())))) (g$120$13253 g$120$21437))) (g$120$12831 g$120$21435))) (g$120$13247 g$120$21431)))) (set! g$120$13626 (lambda (g$120$21446) ((lambda (g$120$21448) ((lambda (g$120$21450) (if (if g$120$21450 (begin '#f (apply (lambda (g$120$21452 g$120$21453) (g$120$13225 g$120$21452)) g$120$21450)) '#f) (apply (lambda (g$120$21456 g$120$21457) ((lambda (g$120$21460) ((lambda (g$120$21462) (values g$120$21460 g$120$21462)) (g$120$13596 g$120$21457 '() '()))) (g$120$13624 g$120$21456 g$120$21446))) g$120$21450) (error 'expander '"invalid syntax" (g$120$13243 g$120$21448 '())))) ((lambda (g$120$21464) (if (g$120$13211 g$120$21464) (begin '#f ((lambda (g$120$21466) (if g$120$21466 (begin '#f ((lambda (g$120$21468) (if g$120$21468 (begin '#f (append g$120$21466 g$120$21468)) '#f)) ((lambda (g$120$21470) (if (g$120$13211 g$120$21470) (begin '#f ((lambda (g$120$21472) (if g$120$21472 (begin '#f ((lambda (g$120$21474) (if g$120$21474 (begin '#f (append g$120$21472 g$120$21474)) '#f)) ((lambda (g$120$21476) (if (g$120$13211 g$120$21476) (begin '#f ((lambda (g$120$21478) (if g$120$21478 (begin '#f ((lambda (g$120$21480) (if g$120$21480 (begin '#f (append g$120$21478 g$120$21480)) '#f)) ((lambda (g$120$21482) (if (equal? (g$120$13245 g$120$21482) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$21476)))) '#f)) ((lambda (g$120$21484) (list g$120$21484)) (g$120$13219 g$120$21476)))) '#f)) (g$120$13223 g$120$21470)))) '#f)) ((lambda (g$120$21486) (list g$120$21486)) (g$120$13219 g$120$21470)))) '#f)) (g$120$13223 g$120$21464)))) '#f)) ((lambda (g$120$21488) '()) (g$120$13219 g$120$21464)))) '#f)) g$120$21448))) g$120$21446))) (set! g$120$13628 (lambda (g$120$21490 g$120$21491) (if (null? g$120$21490) g$120$21491 ((lambda (g$120$21494) (call-with-values (lambda () (g$120$13257 g$120$21494 '())) (lambda (g$120$21496 g$120$21497 g$120$21498) ((lambda (g$120$21502) (if (memv g$120$21502 '(define)) (call-with-values (lambda () (g$120$13474 g$120$21494)) (lambda (g$120$21543 g$120$21544) ((lambda (g$120$21547) ((lambda (g$120$21549) (g$120$13628 (cdr g$120$21490) (cons (cons g$120$21547 g$120$21549) g$120$21491))) (g$120$13604 g$120$21544 '() '()))) (g$120$13624 g$120$21543 g$120$21494)))) (if (memv g$120$21502 '(set!)) (call-with-values (lambda () (g$120$13626 g$120$21494)) (lambda (g$120$21539 g$120$21540) (g$120$13628 (cdr g$120$21490) (cons (cons g$120$21539 g$120$21540) g$120$21491)))) (if (memv g$120$21502 '(define-syntax)) (call-with-values (lambda () (g$120$13476 g$120$21494)) (lambda (g$120$21529 g$120$21530) ((lambda (g$120$21533) ((lambda (g$120$21535) ((lambda (g$120$21537) (begin (g$120$13620 (g$120$13227 g$120$21529) g$120$21533 g$120$21537) (g$120$13628 (cdr g$120$21490) g$120$21491))) (g$120$13275 g$120$21535))) (g$120$13630 g$120$21530 '()))) (g$120$13622 g$120$21529 g$120$21494)))) (if (memv g$120$21502 '(let-syntax letrec-syntax)) (error 'chi-top* '"not supported yet at top level" g$120$21496) (if (memv g$120$21502 '(begin)) ((lambda (g$120$21503) ((lambda (g$120$21505) (if (if g$120$21505 (begin '#f (apply (lambda (g$120$21507) '#t) g$120$21505)) '#f) (apply (lambda (g$120$21509) (g$120$13628 (append g$120$21509 (cdr g$120$21490)) g$120$21491)) g$120$21505) (error 'expander '"invalid syntax" (g$120$13243 g$120$21503 '())))) ((lambda (g$120$21511) (if (g$120$13211 g$120$21511) (begin '#f ((lambda (g$120$21513) (if g$120$21513 (begin '#f ((lambda (g$120$21515) (if g$120$21515 (begin '#f (append g$120$21513 g$120$21515)) '#f)) ((letrec ((g$120$21517 (lambda (g$120$21519) (if (g$120$13211 g$120$21519) ((lambda (g$120$21521) (if g$120$21521 (begin '#f ((lambda (g$120$21523) (if g$120$21523 (begin '#f (map cons g$120$21521 g$120$21523)) '#f)) (g$120$21517 (g$120$13223 g$120$21519)))) '#f)) ((lambda (g$120$21525) (list g$120$21525)) (g$120$13219 g$120$21519))) (if (g$120$13215 g$120$21519) (list (begin 'x* '())) '#f))))) g$120$21517) (g$120$13223 g$120$21511)))) '#f)) ((lambda (g$120$21527) '()) (g$120$13219 g$120$21511)))) '#f)) g$120$21503))) g$120$21494) (if (memv g$120$21502 '(global-macro global-macro!)) (g$120$13628 (cons (g$120$13590 g$120$21497 g$120$21494) (cdr g$120$21490)) g$120$21491) (if (memv g$120$21502 '(local-macro local-macro!)) (g$120$13628 (cons (g$120$13588 g$120$21497 g$120$21494) (cdr g$120$21490)) g$120$21491) (if (memv g$120$21502 '(macro macro!)) (g$120$13628 (cons (g$120$13586 g$120$21497 g$120$21494) (cdr g$120$21490)) g$120$21491) (g$120$13628 (cdr g$120$21490) (cons (cons '#f (g$120$13596 g$120$21494 '() '())) g$120$21491))))))))))) g$120$21496)))) (car g$120$21490))))) (set! g$120$13630 (lambda (g$120$21551 g$120$21552) ((lambda (g$120$21555) ((lambda (g$120$21557) (begin (for-each ((lambda (g$120$21559) (lambda (g$120$21561) (begin (g$120$12830 g$120$21561) (g$120$21559 g$120$21561)))) (g$120$13646)) (g$120$21555)) g$120$21557)) ((lambda (g$120$21567 g$120$21568 g$120$21569 g$120$21570) ((lambda (g$120$21575) (dynamic-wind g$120$21575 (lambda () (g$120$13596 g$120$21551 g$120$21552 g$120$21552)) g$120$21575)) (lambda () (begin ((lambda (g$120$21577) (begin (g$120$21567 g$120$21569) (set! g$120$21569 g$120$21577))) (g$120$21567)) ((lambda (g$120$21579) (begin (g$120$21568 g$120$21570) (set! g$120$21570 g$120$21579))) (g$120$21568)))))) g$120$13644 g$120$13646 g$120$21555 (lambda (g$120$21581) (values))))) (g$120$13642)))) (set! g$120$13632 (lambda (g$120$21583) (letrec ((g$120$21585 (lambda (g$120$21587 g$120$21588 g$120$21589) (if (null? g$120$21587) (begin ((lambda (g$120$21593) (if (g$120$13235 g$120$21593) (void) (error 'expander '"invalid exports" (g$120$13610 g$120$21593)))) (map (lambda (g$120$21595) (g$120$13201 g$120$21595 g$120$13131 '())) g$120$21589)) (values g$120$21588 g$120$21589)) ((lambda (g$120$21597) ((lambda (g$120$21599) (if (if g$120$21599 (begin '#f (apply (lambda (g$120$21601 g$120$21602 g$120$21603) '#t) g$120$21599)) '#f) (apply (lambda (g$120$21607 g$120$21608 g$120$21609) (begin (if (if (eq? g$120$21607 'rename) (if (for-all symbol? g$120$21608) (begin '#f (for-all symbol? g$120$21609)) '#f) '#f) (void) (error 'expander '"invalid export specifier" (car g$120$21587))) (g$120$21585 (cdr g$120$21587) (append g$120$21608 g$120$21588) (append g$120$21609 g$120$21589)))) g$120$21599) ((lambda (g$120$21613) ((lambda (g$120$21615) (if (if g$120$21615 (begin '#f (apply (lambda (g$120$21617) '#t) g$120$21615)) '#f) (apply (lambda (g$120$21619) (begin (if (symbol? g$120$21619) (void) (error 'expander '"invalid export" g$120$21619)) (g$120$21585 (cdr g$120$21587) (cons g$120$21619 g$120$21588) (cons g$120$21619 g$120$21589)))) g$120$21615) (error 'expander '"invalid syntax" (g$120$13243 g$120$21613 '())))) ((lambda (g$120$21621) (list g$120$21621)) g$120$21613))) g$120$21597))) ((lambda (g$120$21623) (if (g$120$13211 g$120$21623) (begin '#f ((lambda (g$120$21625) (if g$120$21625 (begin '#f ((lambda (g$120$21627) (if g$120$21627 (begin '#f (append g$120$21625 g$120$21627)) '#f)) ((letrec ((g$120$21629 (lambda (g$120$21631) (if (g$120$13211 g$120$21631) ((lambda (g$120$21633) (if g$120$21633 (begin '#f ((lambda (g$120$21635) (if g$120$21635 (begin '#f (map cons g$120$21633 g$120$21635)) '#f)) (g$120$21629 (g$120$13223 g$120$21631)))) '#f)) ((lambda (g$120$21637) (if (g$120$13211 g$120$21637) (begin '#f ((lambda (g$120$21639) (if g$120$21639 (begin '#f ((lambda (g$120$21641) (if g$120$21641 (begin '#f (append g$120$21639 g$120$21641)) '#f)) ((lambda (g$120$21643) (if (g$120$13211 g$120$21643) (begin '#f ((lambda (g$120$21645) (if g$120$21645 (begin '#f ((lambda (g$120$21647) (if g$120$21647 (begin '#f (append g$120$21645 g$120$21647)) '#f)) ((lambda (g$120$21649) (if (equal? (g$120$13245 g$120$21649) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$21643)))) '#f)) ((lambda (g$120$21651) (list g$120$21651)) (g$120$13219 g$120$21643)))) '#f)) (g$120$13223 g$120$21637)))) '#f)) ((lambda (g$120$21653) (list g$120$21653)) (g$120$13219 g$120$21637)))) '#f)) (g$120$13219 g$120$21631))) (if (g$120$13215 g$120$21631) (list (begin 'i* '()) (begin 'e* '())) '#f))))) g$120$21629) (g$120$13223 g$120$21623)))) '#f)) ((lambda (g$120$21655) (list g$120$21655)) (g$120$13219 g$120$21623)))) '#f)) g$120$21597))) (car g$120$21587)))))) (g$120$21585 g$120$21583 '() '())))) (set! g$120$13634 (lambda (g$120$21657) ((lambda (g$120$21659) (begin (set! g$120$21659 (lambda (g$120$21661) ((lambda (g$120$21663) ((lambda (g$120$21665) (if (if g$120$21665 (begin '#f (apply (lambda (g$120$21667) (for-all (lambda (g$120$21669) (if (integer? g$120$21669) (begin '#f (exact? g$120$21669)) '#f)) g$120$21667)) g$120$21665)) '#f) (apply (lambda (g$120$21671) (values '() g$120$21671)) g$120$21665) ((lambda (g$120$21673) ((lambda (g$120$21675) (if (if g$120$21675 (begin '#f (apply (lambda (g$120$21677 g$120$21678) (symbol? g$120$21677)) g$120$21675)) '#f) (apply (lambda (g$120$21681 g$120$21682) (call-with-values (lambda () (g$120$21659 g$120$21682)) (lambda (g$120$21685 g$120$21686) (values (cons g$120$21681 g$120$21685) g$120$21686)))) g$120$21675) ((lambda (g$120$21689) ((lambda (g$120$21691) (if (if g$120$21691 (begin '#f (apply (lambda () '#t) g$120$21691)) '#f) (apply (lambda () (values '() '())) g$120$21691) ((lambda (g$120$21693) ((lambda (g$120$21695) (if (if g$120$21695 (begin '#f (apply (lambda () '#t) g$120$21695)) '#f) (apply (lambda () (error 'expander '"invalid library name" (g$120$13243 g$120$21657 '()))) g$120$21695) (error 'expander '"invalid syntax" (g$120$13243 g$120$21693 '())))) ((lambda (g$120$21697) '()) g$120$21693))) g$120$21689))) ((lambda (g$120$21699) (if (equal? (g$120$13245 g$120$21699) '()) (begin '#f '()) '#f)) g$120$21689))) g$120$21673))) ((lambda (g$120$21701) (if (g$120$13211 g$120$21701) (begin '#f ((lambda (g$120$21703) (if g$120$21703 (begin '#f ((lambda (g$120$21705) (if g$120$21705 (begin '#f (append g$120$21703 g$120$21705)) '#f)) ((lambda (g$120$21707) (list g$120$21707)) (g$120$13223 g$120$21701)))) '#f)) ((lambda (g$120$21709) (list g$120$21709)) (g$120$13219 g$120$21701)))) '#f)) g$120$21673))) g$120$21663))) ((lambda (g$120$21711) (if (g$120$13211 g$120$21711) (begin '#f ((lambda (g$120$21713) (if g$120$21713 (begin '#f ((lambda (g$120$21715) (if g$120$21715 (begin '#f (append g$120$21713 g$120$21715)) '#f)) ((lambda (g$120$21717) (if (equal? (g$120$13245 g$120$21717) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$21711)))) '#f)) ((letrec ((g$120$21719 (lambda (g$120$21721) (if (g$120$13211 g$120$21721) ((lambda (g$120$21723) (if g$120$21723 (begin '#f ((lambda (g$120$21725) (if g$120$21725 (begin '#f (map cons g$120$21723 g$120$21725)) '#f)) (g$120$21719 (g$120$13223 g$120$21721)))) '#f)) ((lambda (g$120$21727) (list g$120$21727)) (g$120$13219 g$120$21721))) (if (g$120$13215 g$120$21721) (list (begin 'v* '())) '#f))))) g$120$21719) (g$120$13219 g$120$21711)))) '#f)) g$120$21663))) g$120$21661))) (call-with-values (lambda () (g$120$21659 g$120$21657)) (lambda (g$120$21729 g$120$21730) (begin (if (null? g$120$21729) (error 'expander '"empty library name" (g$120$13243 g$120$21657 '())) (void)) (values g$120$21729 g$120$21730)))))) '#f))) (set! g$120$13636 (lambda (g$120$21733) ((lambda (g$120$21735) ((lambda (g$120$21737) (if (if g$120$21737 (begin '#f (apply (lambda (g$120$21739 g$120$21740 g$120$21741 g$120$21742 g$120$21743 g$120$21744 g$120$21745) (if (eq? g$120$21741 'export) (if (eq? g$120$21743 'import) (begin '#f (eq? g$120$21739 'library)) '#f) '#f)) g$120$21737)) '#f) (apply (lambda (g$120$21753 g$120$21754 g$120$21755 g$120$21756 g$120$21757 g$120$21758 g$120$21759) (values g$120$21754 g$120$21756 g$120$21758 g$120$21759)) g$120$21737) ((lambda (g$120$21767) ((lambda (g$120$21769) (if (if g$120$21769 (begin '#f (apply (lambda () '#t) g$120$21769)) '#f) (apply (lambda () (error 'expander '"malformed library" (g$120$13243 g$120$21733 '()))) g$120$21769) (error 'expander '"invalid syntax" (g$120$13243 g$120$21767 '())))) ((lambda (g$120$21771) '()) g$120$21767))) g$120$21735))) ((lambda (g$120$21773) (if (g$120$13211 g$120$21773) (begin '#f ((lambda (g$120$21775) (if g$120$21775 (begin '#f ((lambda (g$120$21777) (if g$120$21777 (begin '#f (append g$120$21775 g$120$21777)) '#f)) ((lambda (g$120$21779) (if (g$120$13211 g$120$21779) (begin '#f ((lambda (g$120$21781) (if g$120$21781 (begin '#f ((lambda (g$120$21783) (if g$120$21783 (begin '#f (append g$120$21781 g$120$21783)) '#f)) ((lambda (g$120$21785) (if (g$120$13211 g$120$21785) (begin '#f ((lambda (g$120$21787) (if g$120$21787 (begin '#f ((lambda (g$120$21789) (if g$120$21789 (begin '#f (append g$120$21787 g$120$21789)) '#f)) ((lambda (g$120$21791) (if (g$120$13211 g$120$21791) (begin '#f ((lambda (g$120$21793) (if g$120$21793 (begin '#f ((lambda (g$120$21795) (if g$120$21795 (begin '#f (append g$120$21793 g$120$21795)) '#f)) ((letrec ((g$120$21797 (lambda (g$120$21799) (if (g$120$13211 g$120$21799) ((lambda (g$120$21801) (if g$120$21801 (begin '#f ((lambda (g$120$21803) (if g$120$21803 (begin '#f (map cons g$120$21801 g$120$21803)) '#f)) (g$120$21797 (g$120$13223 g$120$21799)))) '#f)) ((lambda (g$120$21805) (list g$120$21805)) (g$120$13219 g$120$21799))) (if (g$120$13215 g$120$21799) (list (begin 'b* '())) '#f))))) g$120$21797) (g$120$13223 g$120$21791)))) '#f)) ((lambda (g$120$21807) (if (g$120$13211 g$120$21807) (begin '#f ((lambda (g$120$21809) (if g$120$21809 (begin '#f ((lambda (g$120$21811) (if g$120$21811 (begin '#f (append g$120$21809 g$120$21811)) '#f)) ((letrec ((g$120$21813 (lambda (g$120$21815) (if (g$120$13211 g$120$21815) ((lambda (g$120$21817) (if g$120$21817 (begin '#f ((lambda (g$120$21819) (if g$120$21819 (begin '#f (map cons g$120$21817 g$120$21819)) '#f)) (g$120$21813 (g$120$13223 g$120$21815)))) '#f)) ((lambda (g$120$21821) (list g$120$21821)) (g$120$13219 g$120$21815))) (if (g$120$13215 g$120$21815) (list (begin 'imp* '())) '#f))))) g$120$21813) (g$120$13223 g$120$21807)))) '#f)) ((lambda (g$120$21823) (list g$120$21823)) (g$120$13219 g$120$21807)))) '#f)) (g$120$13219 g$120$21791)))) '#f)) (g$120$13223 g$120$21785)))) '#f)) ((lambda (g$120$21825) (if (g$120$13211 g$120$21825) (begin '#f ((lambda (g$120$21827) (if g$120$21827 (begin '#f ((lambda (g$120$21829) (if g$120$21829 (begin '#f (append g$120$21827 g$120$21829)) '#f)) ((letrec ((g$120$21831 (lambda (g$120$21833) (if (g$120$13211 g$120$21833) ((lambda (g$120$21835) (if g$120$21835 (begin '#f ((lambda (g$120$21837) (if g$120$21837 (begin '#f (map cons g$120$21835 g$120$21837)) '#f)) (g$120$21831 (g$120$13223 g$120$21833)))) '#f)) ((lambda (g$120$21839) (list g$120$21839)) (g$120$13219 g$120$21833))) (if (g$120$13215 g$120$21833) (list (begin 'exp* '())) '#f))))) g$120$21831) (g$120$13223 g$120$21825)))) '#f)) ((lambda (g$120$21841) (list g$120$21841)) (g$120$13219 g$120$21825)))) '#f)) (g$120$13219 g$120$21785)))) '#f)) (g$120$13223 g$120$21779)))) '#f)) ((letrec ((g$120$21843 (lambda (g$120$21845) (if (g$120$13211 g$120$21845) ((lambda (g$120$21847) (if g$120$21847 (begin '#f ((lambda (g$120$21849) (if g$120$21849 (begin '#f (map cons g$120$21847 g$120$21849)) '#f)) (g$120$21843 (g$120$13223 g$120$21845)))) '#f)) ((lambda (g$120$21851) (list g$120$21851)) (g$120$13219 g$120$21845))) (if (g$120$13215 g$120$21845) (list (begin 'name* '())) '#f))))) g$120$21843) (g$120$13219 g$120$21779)))) '#f)) (g$120$13223 g$120$21773)))) '#f)) ((lambda (g$120$21853) (list g$120$21853)) (g$120$13219 g$120$21773)))) '#f)) g$120$21735))) g$120$21733))) (set! g$120$13638 (lambda (g$120$21855) ((lambda (g$120$21857 g$120$21859 g$120$21861 g$120$21863 g$120$21865 g$120$21867 g$120$21869 g$120$21871) (begin (set! g$120$21857 (g$120$13642)) (set! g$120$21859 (lambda (g$120$22627 g$120$22628) ((lambda (g$120$22631) (begin (set! g$120$22631 (lambda (g$120$22633 g$120$22634) ((lambda (g$120$22637 g$120$22638) ((lambda (g$120$22641) (if g$120$22641 ((lambda (g$120$22643) (if (eq? (cdr g$120$22643) g$120$22638) g$120$22634 (error 'import '"two imports with different bindings" g$120$22637))) g$120$22641) (cons g$120$22633 g$120$22634))) (assq g$120$22637 g$120$22634))) (car g$120$22633) (cdr g$120$22633)))) (if (null? g$120$22627) g$120$22628 (g$120$22631 (car g$120$22627) (g$120$21859 (cdr g$120$22627) g$120$22628))))) '#f))) (set! g$120$21861 (lambda (g$120$22603 g$120$22604) ((lambda (g$120$22607) (begin (set! g$120$22607 (lambda (g$120$22609 g$120$22610) (if (null? g$120$22610) (error 'import '"cannot rename unbound identifier" g$120$22609) (if (eq? g$120$22609 (caar g$120$22610)) (values (cdar g$120$22610) (cdr g$120$22610)) ((lambda (g$120$22613) (call-with-values (lambda () (g$120$22607 g$120$22609 (cdr g$120$22610))) (lambda (g$120$22615 g$120$22616) (values g$120$22615 (cons g$120$22613 g$120$22616))))) (car g$120$22610)))))) (if (null? g$120$22603) (values '() g$120$22604) (call-with-values (lambda () (g$120$22607 (car g$120$22603) g$120$22604)) (lambda (g$120$22619 g$120$22620) (call-with-values (lambda () (g$120$21861 (cdr g$120$22603) g$120$22620)) (lambda (g$120$22623 g$120$22624) (values (cons g$120$22619 g$120$22623) g$120$22624)))))))) '#f))) (set! g$120$21863 (lambda (g$120$22595 g$120$22596) (map (lambda (g$120$22599) ((lambda (g$120$22601) (if g$120$22601 (cdr g$120$22601) (error 'import '"cannot find identifier" g$120$22599))) (assq g$120$22599 g$120$22596))) g$120$22595))) (set! g$120$21865 (lambda (g$120$22587 g$120$22588) (letrec ((g$120$22591 (lambda (g$120$22593) (if (null? g$120$22593) '() (if (memq (caar g$120$22593) g$120$22587) (g$120$22591 (cdr g$120$22593)) (cons (car g$120$22593) (g$120$22591 (cdr g$120$22593)))))))) (g$120$22591 g$120$22588)))) (set! g$120$21867 (lambda (g$120$22585) (if (null? g$120$22585) '() (if (memq (car g$120$22585) (cdr g$120$22585)) (g$120$21867 (cdr g$120$22585)) (cons (car g$120$22585) (g$120$21867 (cdr g$120$22585))))))) (set! g$120$21869 (lambda (g$120$22165) ((lambda (g$120$22167 g$120$22169 g$120$22171) (begin (set! g$120$22167 (lambda (g$120$22513) (if (integer? g$120$22513) (if (exact? g$120$22513) (begin '#f (>= g$120$22513 '0)) '#f) '#f))) (set! g$120$22169 (lambda (g$120$22323) ((lambda (g$120$22325) ((lambda (g$120$22327) (if (if g$120$22327 (begin '#f (apply (lambda (g$120$22329) (g$120$22167 g$120$22329)) g$120$22327)) '#f) (apply (lambda (g$120$22331) (lambda (g$120$22333) (= g$120$22333 g$120$22331))) g$120$22327) ((lambda (g$120$22335) ((lambda (g$120$22337) (if (if g$120$22337 (begin '#f (apply (lambda (g$120$22339 g$120$22340) (eq? g$120$22339 'and)) g$120$22337)) '#f) (apply (lambda (g$120$22343 g$120$22344) ((lambda (g$120$22347) (lambda (g$120$22349) (for-all (lambda (g$120$22351) (g$120$22351 g$120$22349)) g$120$22347))) (map g$120$22169 g$120$22344))) g$120$22337) ((lambda (g$120$22353) ((lambda (g$120$22355) (if (if g$120$22355 (begin '#f (apply (lambda (g$120$22357 g$120$22358) (eq? g$120$22357 'or)) g$120$22355)) '#f) (apply (lambda (g$120$22361 g$120$22362) ((lambda (g$120$22365) (lambda (g$120$22367) (exists (lambda (g$120$22369) (g$120$22369 g$120$22367)) g$120$22365))) (map g$120$22169 g$120$22362))) g$120$22355) ((lambda (g$120$22371) ((lambda (g$120$22373) (if (if g$120$22373 (begin '#f (apply (lambda (g$120$22375 g$120$22376) (eq? g$120$22375 'not)) g$120$22373)) '#f) (apply (lambda (g$120$22379 g$120$22380) ((lambda (g$120$22383) (lambda (g$120$22385) (not (g$120$22383 g$120$22385)))) (g$120$22169 g$120$22380))) g$120$22373) ((lambda (g$120$22387) ((lambda (g$120$22389) (if (if g$120$22389 (begin '#f (apply (lambda (g$120$22391 g$120$22392) (if (eq? g$120$22391 '<=) (begin '#f (g$120$22167 g$120$22392)) '#f)) g$120$22389)) '#f) (apply (lambda (g$120$22395 g$120$22396) (lambda (g$120$22399) (<= g$120$22399 g$120$22396))) g$120$22389) ((lambda (g$120$22401) ((lambda (g$120$22403) (if (if g$120$22403 (begin '#f (apply (lambda (g$120$22405 g$120$22406) (if (eq? g$120$22405 '>=) (begin '#f (g$120$22167 g$120$22406)) '#f)) g$120$22403)) '#f) (apply (lambda (g$120$22409 g$120$22410) (lambda (g$120$22413) (>= g$120$22413 g$120$22410))) g$120$22403) ((lambda (g$120$22415) ((lambda (g$120$22417) (if (if g$120$22417 (begin '#f (apply (lambda () '#t) g$120$22417)) '#f) (apply (lambda () (error 'import '"invalid sub-version spec" g$120$22323 g$120$22165)) g$120$22417) (error 'expander '"invalid syntax" (g$120$13243 g$120$22415 '())))) ((lambda (g$120$22419) '()) g$120$22415))) g$120$22401))) ((lambda (g$120$22421) (if (g$120$13211 g$120$22421) (begin '#f ((lambda (g$120$22423) (if g$120$22423 (begin '#f ((lambda (g$120$22425) (if g$120$22425 (begin '#f (append g$120$22423 g$120$22425)) '#f)) ((lambda (g$120$22427) (if (g$120$13211 g$120$22427) (begin '#f ((lambda (g$120$22429) (if g$120$22429 (begin '#f ((lambda (g$120$22431) (if g$120$22431 (begin '#f (append g$120$22429 g$120$22431)) '#f)) ((lambda (g$120$22433) (if (equal? (g$120$13245 g$120$22433) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$22427)))) '#f)) ((lambda (g$120$22435) (list g$120$22435)) (g$120$13219 g$120$22427)))) '#f)) (g$120$13223 g$120$22421)))) '#f)) ((lambda (g$120$22437) (list g$120$22437)) (g$120$13219 g$120$22421)))) '#f)) g$120$22401))) g$120$22387))) ((lambda (g$120$22439) (if (g$120$13211 g$120$22439) (begin '#f ((lambda (g$120$22441) (if g$120$22441 (begin '#f ((lambda (g$120$22443) (if g$120$22443 (begin '#f (append g$120$22441 g$120$22443)) '#f)) ((lambda (g$120$22445) (if (g$120$13211 g$120$22445) (begin '#f ((lambda (g$120$22447) (if g$120$22447 (begin '#f ((lambda (g$120$22449) (if g$120$22449 (begin '#f (append g$120$22447 g$120$22449)) '#f)) ((lambda (g$120$22451) (if (equal? (g$120$13245 g$120$22451) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$22445)))) '#f)) ((lambda (g$120$22453) (list g$120$22453)) (g$120$13219 g$120$22445)))) '#f)) (g$120$13223 g$120$22439)))) '#f)) ((lambda (g$120$22455) (list g$120$22455)) (g$120$13219 g$120$22439)))) '#f)) g$120$22387))) g$120$22371))) ((lambda (g$120$22457) (if (g$120$13211 g$120$22457) (begin '#f ((lambda (g$120$22459) (if g$120$22459 (begin '#f ((lambda (g$120$22461) (if g$120$22461 (begin '#f (append g$120$22459 g$120$22461)) '#f)) ((lambda (g$120$22463) (if (g$120$13211 g$120$22463) (begin '#f ((lambda (g$120$22465) (if g$120$22465 (begin '#f ((lambda (g$120$22467) (if g$120$22467 (begin '#f (append g$120$22465 g$120$22467)) '#f)) ((lambda (g$120$22469) (if (equal? (g$120$13245 g$120$22469) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$22463)))) '#f)) ((lambda (g$120$22471) (list g$120$22471)) (g$120$13219 g$120$22463)))) '#f)) (g$120$13223 g$120$22457)))) '#f)) ((lambda (g$120$22473) (list g$120$22473)) (g$120$13219 g$120$22457)))) '#f)) g$120$22371))) g$120$22353))) ((lambda (g$120$22475) (if (g$120$13211 g$120$22475) (begin '#f ((lambda (g$120$22477) (if g$120$22477 (begin '#f ((lambda (g$120$22479) (if g$120$22479 (begin '#f (append g$120$22477 g$120$22479)) '#f)) ((letrec ((g$120$22481 (lambda (g$120$22483) (if (g$120$13211 g$120$22483) ((lambda (g$120$22485) (if g$120$22485 (begin '#f ((lambda (g$120$22487) (if g$120$22487 (begin '#f (map cons g$120$22485 g$120$22487)) '#f)) (g$120$22481 (g$120$13223 g$120$22483)))) '#f)) ((lambda (g$120$22489) (list g$120$22489)) (g$120$13219 g$120$22483))) (if (g$120$13215 g$120$22483) (list (begin 'sub* '())) '#f))))) g$120$22481) (g$120$13223 g$120$22475)))) '#f)) ((lambda (g$120$22491) (list g$120$22491)) (g$120$13219 g$120$22475)))) '#f)) g$120$22353))) g$120$22335))) ((lambda (g$120$22493) (if (g$120$13211 g$120$22493) (begin '#f ((lambda (g$120$22495) (if g$120$22495 (begin '#f ((lambda (g$120$22497) (if g$120$22497 (begin '#f (append g$120$22495 g$120$22497)) '#f)) ((letrec ((g$120$22499 (lambda (g$120$22501) (if (g$120$13211 g$120$22501) ((lambda (g$120$22503) (if g$120$22503 (begin '#f ((lambda (g$120$22505) (if g$120$22505 (begin '#f (map cons g$120$22503 g$120$22505)) '#f)) (g$120$22499 (g$120$13223 g$120$22501)))) '#f)) ((lambda (g$120$22507) (list g$120$22507)) (g$120$13219 g$120$22501))) (if (g$120$13215 g$120$22501) (list (begin 'sub* '())) '#f))))) g$120$22499) (g$120$13223 g$120$22493)))) '#f)) ((lambda (g$120$22509) (list g$120$22509)) (g$120$13219 g$120$22493)))) '#f)) g$120$22335))) g$120$22325))) ((lambda (g$120$22511) (list g$120$22511)) g$120$22325))) g$120$22323))) (set! g$120$22171 (lambda (g$120$22173) ((lambda (g$120$22175) ((lambda (g$120$22177) (if (if g$120$22177 (begin '#f (apply (lambda () '#t) g$120$22177)) '#f) (apply (lambda () (lambda (g$120$22179) '#t)) g$120$22177) ((lambda (g$120$22181) ((lambda (g$120$22183) (if (if g$120$22183 (begin '#f (apply (lambda (g$120$22185 g$120$22186) (eq? g$120$22185 'and)) g$120$22183)) '#f) (apply (lambda (g$120$22189 g$120$22190) ((lambda (g$120$22193) (lambda (g$120$22195) (for-all (lambda (g$120$22197) (g$120$22197 g$120$22195)) g$120$22193))) (map g$120$22171 g$120$22190))) g$120$22183) ((lambda (g$120$22199) ((lambda (g$120$22201) (if (if g$120$22201 (begin '#f (apply (lambda (g$120$22203 g$120$22204) (eq? g$120$22203 'or)) g$120$22201)) '#f) (apply (lambda (g$120$22207 g$120$22208) ((lambda (g$120$22211) (lambda (g$120$22213) (exists (lambda (g$120$22215) (g$120$22215 g$120$22213)) g$120$22211))) (map g$120$22171 g$120$22208))) g$120$22201) ((lambda (g$120$22217) ((lambda (g$120$22219) (if (if g$120$22219 (begin '#f (apply (lambda (g$120$22221 g$120$22222) (eq? g$120$22221 'not)) g$120$22219)) '#f) (apply (lambda (g$120$22225 g$120$22226) ((lambda (g$120$22229) (lambda (g$120$22231) (not (g$120$22229 g$120$22231)))) (g$120$22171 g$120$22226))) g$120$22219) ((lambda (g$120$22233) ((lambda (g$120$22235) (if (if g$120$22235 (begin '#f (apply (lambda (g$120$22237) '#t) g$120$22235)) '#f) (apply (lambda (g$120$22239) ((lambda (g$120$22241) (lambda (g$120$22243) (letrec ((g$120$22245 (lambda (g$120$22247 g$120$22248) (if (null? g$120$22247) '#t (if (null? g$120$22248) '#f (if ((car g$120$22247) (car g$120$22248)) (begin '#f (g$120$22245 (cdr g$120$22247) (cdr g$120$22173))) '#f)))))) (g$120$22245 g$120$22241 g$120$22243)))) (map g$120$22169 g$120$22239))) g$120$22235) ((lambda (g$120$22251) ((lambda (g$120$22253) (if (if g$120$22253 (begin '#f (apply (lambda () '#t) g$120$22253)) '#f) (apply (lambda () (error 'import '"invalid version spec" g$120$22173 g$120$22165)) g$120$22253) (error 'expander '"invalid syntax" (g$120$13243 g$120$22251 '())))) ((lambda (g$120$22255) '()) g$120$22251))) g$120$22233))) ((letrec ((g$120$22257 (lambda (g$120$22259) (if (g$120$13211 g$120$22259) ((lambda (g$120$22261) (if g$120$22261 (begin '#f ((lambda (g$120$22263) (if g$120$22263 (begin '#f (map cons g$120$22261 g$120$22263)) '#f)) (g$120$22257 (g$120$13223 g$120$22259)))) '#f)) ((lambda (g$120$22265) (list g$120$22265)) (g$120$13219 g$120$22259))) (if (g$120$13215 g$120$22259) (list (begin 'sub* '())) '#f))))) g$120$22257) g$120$22233))) g$120$22217))) ((lambda (g$120$22267) (if (g$120$13211 g$120$22267) (begin '#f ((lambda (g$120$22269) (if g$120$22269 (begin '#f ((lambda (g$120$22271) (if g$120$22271 (begin '#f (append g$120$22269 g$120$22271)) '#f)) ((lambda (g$120$22273) (if (g$120$13211 g$120$22273) (begin '#f ((lambda (g$120$22275) (if g$120$22275 (begin '#f ((lambda (g$120$22277) (if g$120$22277 (begin '#f (append g$120$22275 g$120$22277)) '#f)) ((lambda (g$120$22279) (if (equal? (g$120$13245 g$120$22279) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$22273)))) '#f)) ((lambda (g$120$22281) (list g$120$22281)) (g$120$13219 g$120$22273)))) '#f)) (g$120$13223 g$120$22267)))) '#f)) ((lambda (g$120$22283) (list g$120$22283)) (g$120$13219 g$120$22267)))) '#f)) g$120$22217))) g$120$22199))) ((lambda (g$120$22285) (if (g$120$13211 g$120$22285) (begin '#f ((lambda (g$120$22287) (if g$120$22287 (begin '#f ((lambda (g$120$22289) (if g$120$22289 (begin '#f (append g$120$22287 g$120$22289)) '#f)) ((letrec ((g$120$22291 (lambda (g$120$22293) (if (g$120$13211 g$120$22293) ((lambda (g$120$22295) (if g$120$22295 (begin '#f ((lambda (g$120$22297) (if g$120$22297 (begin '#f (map cons g$120$22295 g$120$22297)) '#f)) (g$120$22291 (g$120$13223 g$120$22293)))) '#f)) ((lambda (g$120$22299) (list g$120$22299)) (g$120$13219 g$120$22293))) (if (g$120$13215 g$120$22293) (list (begin 'ver* '())) '#f))))) g$120$22291) (g$120$13223 g$120$22285)))) '#f)) ((lambda (g$120$22301) (list g$120$22301)) (g$120$13219 g$120$22285)))) '#f)) g$120$22199))) g$120$22181))) ((lambda (g$120$22303) (if (g$120$13211 g$120$22303) (begin '#f ((lambda (g$120$22305) (if g$120$22305 (begin '#f ((lambda (g$120$22307) (if g$120$22307 (begin '#f (append g$120$22305 g$120$22307)) '#f)) ((letrec ((g$120$22309 (lambda (g$120$22311) (if (g$120$13211 g$120$22311) ((lambda (g$120$22313) (if g$120$22313 (begin '#f ((lambda (g$120$22315) (if g$120$22315 (begin '#f (map cons g$120$22313 g$120$22315)) '#f)) (g$120$22309 (g$120$13223 g$120$22311)))) '#f)) ((lambda (g$120$22317) (list g$120$22317)) (g$120$13219 g$120$22311))) (if (g$120$13215 g$120$22311) (list (begin 'ver* '())) '#f))))) g$120$22309) (g$120$13223 g$120$22303)))) '#f)) ((lambda (g$120$22319) (list g$120$22319)) (g$120$13219 g$120$22303)))) '#f)) g$120$22181))) g$120$22175))) ((lambda (g$120$22321) (if (equal? (g$120$13245 g$120$22321) '()) (begin '#f '()) '#f)) g$120$22175))) g$120$22173))) (letrec ((g$120$22515 (lambda (g$120$22517) ((lambda (g$120$22519) ((lambda (g$120$22521) (if (if g$120$22521 (begin '#f (apply (lambda (g$120$22523) '#t) g$120$22521)) '#f) (apply (lambda (g$120$22525) (values '() (g$120$22171 g$120$22525))) g$120$22521) ((lambda (g$120$22527) ((lambda (g$120$22529) (if (if g$120$22529 (begin '#f (apply (lambda (g$120$22531 g$120$22532) (symbol? g$120$22531)) g$120$22529)) '#f) (apply (lambda (g$120$22535 g$120$22536) (call-with-values (lambda () (g$120$22515 g$120$22536)) (lambda (g$120$22539 g$120$22540) (values (cons g$120$22535 g$120$22539) g$120$22540)))) g$120$22529) ((lambda (g$120$22543) ((lambda (g$120$22545) (if (if g$120$22545 (begin '#f (apply (lambda () '#t) g$120$22545)) '#f) (apply (lambda () (values '() (lambda (g$120$22547) '#t))) g$120$22545) ((lambda (g$120$22549) ((lambda (g$120$22551) (if (if g$120$22551 (begin '#f (apply (lambda () '#t) g$120$22551)) '#f) (apply (lambda () (error 'expander '"invalid import spec" (g$120$13243 g$120$22165 '()))) g$120$22551) (error 'expander '"invalid syntax" (g$120$13243 g$120$22549 '())))) ((lambda (g$120$22553) '()) g$120$22549))) g$120$22543))) ((lambda (g$120$22555) (if (equal? (g$120$13245 g$120$22555) '()) (begin '#f '()) '#f)) g$120$22543))) g$120$22527))) ((lambda (g$120$22557) (if (g$120$13211 g$120$22557) (begin '#f ((lambda (g$120$22559) (if g$120$22559 (begin '#f ((lambda (g$120$22561) (if g$120$22561 (begin '#f (append g$120$22559 g$120$22561)) '#f)) ((lambda (g$120$22563) (list g$120$22563)) (g$120$13223 g$120$22557)))) '#f)) ((lambda (g$120$22565) (list g$120$22565)) (g$120$13219 g$120$22557)))) '#f)) g$120$22527))) g$120$22519))) ((lambda (g$120$22567) (if (g$120$13211 g$120$22567) (begin '#f ((lambda (g$120$22569) (if g$120$22569 (begin '#f ((lambda (g$120$22571) (if g$120$22571 (begin '#f (append g$120$22569 g$120$22571)) '#f)) ((lambda (g$120$22573) (if (equal? (g$120$13245 g$120$22573) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$22567)))) '#f)) ((letrec ((g$120$22575 (lambda (g$120$22577) (if (g$120$13211 g$120$22577) ((lambda (g$120$22579) (if g$120$22579 (begin '#f ((lambda (g$120$22581) (if g$120$22581 (begin '#f (map cons g$120$22579 g$120$22581)) '#f)) (g$120$22575 (g$120$13223 g$120$22577)))) '#f)) ((lambda (g$120$22583) (list g$120$22583)) (g$120$13219 g$120$22577))) (if (g$120$13215 g$120$22577) (list (begin 'version-spec* '())) '#f))))) g$120$22575) (g$120$13219 g$120$22567)))) '#f)) g$120$22519))) g$120$22517)))) (g$120$22515 g$120$22165)))) '#f '#f '#f))) (set! g$120$21871 (lambda (g$120$21873) ((lambda (g$120$21875) ((lambda (g$120$21877) (if (if g$120$21877 (begin '#f (apply (lambda (g$120$21879 g$120$21880 g$120$21881 g$120$21882) (if (eq? g$120$21879 'rename) (if (for-all symbol? g$120$21881) (begin '#f (for-all symbol? g$120$21882)) '#f) '#f)) g$120$21877)) '#f) (apply (lambda (g$120$21887 g$120$21888 g$120$21889 g$120$21890) ((lambda (g$120$21895) ((lambda (g$120$21897) ((lambda (g$120$21899) (g$120$21859 (map cons g$120$21890 g$120$21897) g$120$21899)) (g$120$21865 g$120$21889 g$120$21895))) (g$120$21863 g$120$21889 g$120$21895))) (g$120$21871 g$120$21888))) g$120$21877) ((lambda (g$120$21901) ((lambda (g$120$21903) (if (if g$120$21903 (begin '#f (apply (lambda (g$120$21905 g$120$21906 g$120$21907) (if (eq? g$120$21905 'except) (begin '#f (for-all symbol? g$120$21907)) '#f)) g$120$21903)) '#f) (apply (lambda (g$120$21911 g$120$21912 g$120$21913) ((lambda (g$120$21917) (g$120$21865 g$120$21913 g$120$21917)) (g$120$21871 g$120$21912))) g$120$21903) ((lambda (g$120$21919) ((lambda (g$120$21921) (if (if g$120$21921 (begin '#f (apply (lambda (g$120$21923 g$120$21924 g$120$21925) (if (eq? g$120$21923 'only) (begin '#f (for-all symbol? g$120$21925)) '#f)) g$120$21921)) '#f) (apply (lambda (g$120$21929 g$120$21930 g$120$21931) ((lambda (g$120$21935) ((lambda (g$120$21937) ((lambda (g$120$21939) (map cons g$120$21937 g$120$21939)) (g$120$21863 g$120$21937 g$120$21935))) (g$120$21867 g$120$21931))) (g$120$21871 g$120$21930))) g$120$21921) ((lambda (g$120$21941) ((lambda (g$120$21943) (if (if g$120$21943 (begin '#f (apply (lambda (g$120$21945 g$120$21946 g$120$21947) (if (eq? g$120$21945 'prefix) (begin '#f (symbol? g$120$21947)) '#f)) g$120$21943)) '#f) (apply (lambda (g$120$21951 g$120$21952 g$120$21953) ((lambda (g$120$21957) (map (lambda (g$120$21959) (cons (string->symbol (string-append (symbol->string g$120$21953) (symbol->string (car g$120$21959)))) (cdr g$120$21959))) g$120$21957)) (g$120$21871 g$120$21952))) g$120$21943) ((lambda (g$120$21961) ((lambda (g$120$21963) (if (if g$120$21963 (begin '#f (apply (lambda (g$120$21965 g$120$21966) (eq? g$120$21965 'library)) g$120$21963)) '#f) (apply (lambda (g$120$21969 g$120$21970) (call-with-values (lambda () (g$120$21869 g$120$21970)) (lambda (g$120$21973 g$120$21974) (begin (if (null? g$120$21973) (error 'import '"empty library name" g$120$21970) (void)) ((lambda (g$120$21977) (begin (if g$120$21977 (void) (error 'import '"cannot find library with required name" g$120$21973)) (if (g$120$21974 (g$120$12868 g$120$21977)) (void) (error 'import '"library does not satisfy version specification" g$120$21977 g$120$21970)) (g$120$21857 g$120$21977) (g$120$12864 g$120$21977))) (g$120$12839 g$120$21973)))))) g$120$21963) ((lambda (g$120$21979) ((lambda (g$120$21981) (if (if g$120$21981 (begin '#f (apply (lambda (g$120$21983 g$120$21984) (not (memq g$120$21983 '(rename except only prefix library)))) g$120$21981)) '#f) (apply (lambda (g$120$21987 g$120$21988) (g$120$21871 (list 'library (cons g$120$21987 g$120$21988)))) g$120$21981) ((lambda (g$120$21991) ((lambda (g$120$21993) (if (if g$120$21993 (begin '#f (apply (lambda (g$120$21995) '#t) g$120$21993)) '#f) (apply (lambda (g$120$21997) (error 'import '"invalid import spec" g$120$21997)) g$120$21993) (error 'expander '"invalid syntax" (g$120$13243 g$120$21991 '())))) ((lambda (g$120$21999) (list g$120$21999)) g$120$21991))) g$120$21979))) ((lambda (g$120$22001) (if (g$120$13211 g$120$22001) (begin '#f ((lambda (g$120$22003) (if g$120$22003 (begin '#f ((lambda (g$120$22005) (if g$120$22005 (begin '#f (append g$120$22003 g$120$22005)) '#f)) ((letrec ((g$120$22007 (lambda (g$120$22009) (if (g$120$13211 g$120$22009) ((lambda (g$120$22011) (if g$120$22011 (begin '#f ((lambda (g$120$22013) (if g$120$22013 (begin '#f (map cons g$120$22011 g$120$22013)) '#f)) (g$120$22007 (g$120$13223 g$120$22009)))) '#f)) ((lambda (g$120$22015) (list g$120$22015)) (g$120$13219 g$120$22009))) (if (g$120$13215 g$120$22009) (list (begin 'x* '())) '#f))))) g$120$22007) (g$120$13223 g$120$22001)))) '#f)) ((lambda (g$120$22017) (list g$120$22017)) (g$120$13219 g$120$22001)))) '#f)) g$120$21979))) g$120$21961))) ((lambda (g$120$22019) (if (g$120$13211 g$120$22019) (begin '#f ((lambda (g$120$22021) (if g$120$22021 (begin '#f ((lambda (g$120$22023) (if g$120$22023 (begin '#f (append g$120$22021 g$120$22023)) '#f)) ((lambda (g$120$22025) (if (g$120$13211 g$120$22025) (begin '#f ((lambda (g$120$22027) (if g$120$22027 (begin '#f ((lambda (g$120$22029) (if g$120$22029 (begin '#f (append g$120$22027 g$120$22029)) '#f)) ((lambda (g$120$22031) (if (equal? (g$120$13245 g$120$22031) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$22025)))) '#f)) ((letrec ((g$120$22033 (lambda (g$120$22035) (if (g$120$13211 g$120$22035) ((lambda (g$120$22037) (if g$120$22037 (begin '#f ((lambda (g$120$22039) (if g$120$22039 (begin '#f (map cons g$120$22037 g$120$22039)) '#f)) (g$120$22033 (g$120$13223 g$120$22035)))) '#f)) ((lambda (g$120$22041) (list g$120$22041)) (g$120$13219 g$120$22035))) (if (g$120$13215 g$120$22035) (list (begin 'spec* '())) '#f))))) g$120$22033) (g$120$13219 g$120$22025)))) '#f)) (g$120$13223 g$120$22019)))) '#f)) ((lambda (g$120$22043) (list g$120$22043)) (g$120$13219 g$120$22019)))) '#f)) g$120$21961))) g$120$21941))) ((lambda (g$120$22045) (if (g$120$13211 g$120$22045) (begin '#f ((lambda (g$120$22047) (if g$120$22047 (begin '#f ((lambda (g$120$22049) (if g$120$22049 (begin '#f (append g$120$22047 g$120$22049)) '#f)) ((lambda (g$120$22051) (if (g$120$13211 g$120$22051) (begin '#f ((lambda (g$120$22053) (if g$120$22053 (begin '#f ((lambda (g$120$22055) (if g$120$22055 (begin '#f (append g$120$22053 g$120$22055)) '#f)) ((lambda (g$120$22057) (if (g$120$13211 g$120$22057) (begin '#f ((lambda (g$120$22059) (if g$120$22059 (begin '#f ((lambda (g$120$22061) (if g$120$22061 (begin '#f (append g$120$22059 g$120$22061)) '#f)) ((lambda (g$120$22063) (if (equal? (g$120$13245 g$120$22063) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$22057)))) '#f)) ((lambda (g$120$22065) (list g$120$22065)) (g$120$13219 g$120$22057)))) '#f)) (g$120$13223 g$120$22051)))) '#f)) ((lambda (g$120$22067) (list g$120$22067)) (g$120$13219 g$120$22051)))) '#f)) (g$120$13223 g$120$22045)))) '#f)) ((lambda (g$120$22069) (list g$120$22069)) (g$120$13219 g$120$22045)))) '#f)) g$120$21941))) g$120$21919))) ((lambda (g$120$22071) (if (g$120$13211 g$120$22071) (begin '#f ((lambda (g$120$22073) (if g$120$22073 (begin '#f ((lambda (g$120$22075) (if g$120$22075 (begin '#f (append g$120$22073 g$120$22075)) '#f)) ((lambda (g$120$22077) (if (g$120$13211 g$120$22077) (begin '#f ((lambda (g$120$22079) (if g$120$22079 (begin '#f ((lambda (g$120$22081) (if g$120$22081 (begin '#f (append g$120$22079 g$120$22081)) '#f)) ((letrec ((g$120$22083 (lambda (g$120$22085) (if (g$120$13211 g$120$22085) ((lambda (g$120$22087) (if g$120$22087 (begin '#f ((lambda (g$120$22089) (if g$120$22089 (begin '#f (map cons g$120$22087 g$120$22089)) '#f)) (g$120$22083 (g$120$13223 g$120$22085)))) '#f)) ((lambda (g$120$22091) (list g$120$22091)) (g$120$13219 g$120$22085))) (if (g$120$13215 g$120$22085) (list (begin 'sym* '())) '#f))))) g$120$22083) (g$120$13223 g$120$22077)))) '#f)) ((lambda (g$120$22093) (list g$120$22093)) (g$120$13219 g$120$22077)))) '#f)) (g$120$13223 g$120$22071)))) '#f)) ((lambda (g$120$22095) (list g$120$22095)) (g$120$13219 g$120$22071)))) '#f)) g$120$21919))) g$120$21901))) ((lambda (g$120$22097) (if (g$120$13211 g$120$22097) (begin '#f ((lambda (g$120$22099) (if g$120$22099 (begin '#f ((lambda (g$120$22101) (if g$120$22101 (begin '#f (append g$120$22099 g$120$22101)) '#f)) ((lambda (g$120$22103) (if (g$120$13211 g$120$22103) (begin '#f ((lambda (g$120$22105) (if g$120$22105 (begin '#f ((lambda (g$120$22107) (if g$120$22107 (begin '#f (append g$120$22105 g$120$22107)) '#f)) ((letrec ((g$120$22109 (lambda (g$120$22111) (if (g$120$13211 g$120$22111) ((lambda (g$120$22113) (if g$120$22113 (begin '#f ((lambda (g$120$22115) (if g$120$22115 (begin '#f (map cons g$120$22113 g$120$22115)) '#f)) (g$120$22109 (g$120$13223 g$120$22111)))) '#f)) ((lambda (g$120$22117) (list g$120$22117)) (g$120$13219 g$120$22111))) (if (g$120$13215 g$120$22111) (list (begin 'sym* '())) '#f))))) g$120$22109) (g$120$13223 g$120$22103)))) '#f)) ((lambda (g$120$22119) (list g$120$22119)) (g$120$13219 g$120$22103)))) '#f)) (g$120$13223 g$120$22097)))) '#f)) ((lambda (g$120$22121) (list g$120$22121)) (g$120$13219 g$120$22097)))) '#f)) g$120$21901))) g$120$21875))) ((lambda (g$120$22123) (if (g$120$13211 g$120$22123) (begin '#f ((lambda (g$120$22125) (if g$120$22125 (begin '#f ((lambda (g$120$22127) (if g$120$22127 (begin '#f (append g$120$22125 g$120$22127)) '#f)) ((lambda (g$120$22129) (if (g$120$13211 g$120$22129) (begin '#f ((lambda (g$120$22131) (if g$120$22131 (begin '#f ((lambda (g$120$22133) (if g$120$22133 (begin '#f (append g$120$22131 g$120$22133)) '#f)) ((letrec ((g$120$22135 (lambda (g$120$22137) (if (g$120$13211 g$120$22137) ((lambda (g$120$22139) (if g$120$22139 (begin '#f ((lambda (g$120$22141) (if g$120$22141 (begin '#f (map cons g$120$22139 g$120$22141)) '#f)) (g$120$22135 (g$120$13223 g$120$22137)))) '#f)) ((lambda (g$120$22143) (if (g$120$13211 g$120$22143) (begin '#f ((lambda (g$120$22145) (if g$120$22145 (begin '#f ((lambda (g$120$22147) (if g$120$22147 (begin '#f (append g$120$22145 g$120$22147)) '#f)) ((lambda (g$120$22149) (if (g$120$13211 g$120$22149) (begin '#f ((lambda (g$120$22151) (if g$120$22151 (begin '#f ((lambda (g$120$22153) (if g$120$22153 (begin '#f (append g$120$22151 g$120$22153)) '#f)) ((lambda (g$120$22155) (if (equal? (g$120$13245 g$120$22155) '()) (begin '#f '()) '#f)) (g$120$13223 g$120$22149)))) '#f)) ((lambda (g$120$22157) (list g$120$22157)) (g$120$13219 g$120$22149)))) '#f)) (g$120$13223 g$120$22143)))) '#f)) ((lambda (g$120$22159) (list g$120$22159)) (g$120$13219 g$120$22143)))) '#f)) (g$120$13219 g$120$22137))) (if (g$120$13215 g$120$22137) (list (begin 'old* '()) (begin 'new* '())) '#f))))) g$120$22135) (g$120$13223 g$120$22129)))) '#f)) ((lambda (g$120$22161) (list g$120$22161)) (g$120$13219 g$120$22129)))) '#f)) (g$120$13223 g$120$22123)))) '#f)) ((lambda (g$120$22163) (list g$120$22163)) (g$120$13219 g$120$22123)))) '#f)) g$120$21875))) g$120$21873))) (letrec ((g$120$22645 (lambda (g$120$22647 g$120$22648) (if (null? g$120$22647) (values g$120$22648 (g$120$21857)) (g$120$22645 (cdr g$120$22647) (g$120$21859 (g$120$21871 (car g$120$22647)) g$120$22648)))))) (g$120$22645 g$120$21855 '())))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$120$13640 (lambda (g$120$22651) ((lambda (g$120$22653) (begin (for-each (lambda (g$120$22655) ((lambda (g$120$22657 g$120$22658) (g$120$13164 g$120$22653 (g$120$13201 g$120$22657 g$120$13131 '()) g$120$22658)) (car g$120$22655) (cdr g$120$22655))) g$120$22651) g$120$22653)) (g$120$13162)))) (set! g$120$13642 (lambda () ((lambda (g$120$22661) (lambda g$120$22665 ((lambda (g$120$22666) (if (= g$120$22666 '0) (apply (lambda () g$120$22661) g$120$22665) (if (= g$120$22666 '1) (apply (lambda (g$120$22663) (set! g$120$22661 (g$120$13124 g$120$22663 g$120$22661))) g$120$22665) (error 'apply '"invalid arg count")))) (length g$120$22665)))) '()))) (set! g$120$13644 (g$120$12318 (lambda g$120$22667 (error 'inv-collector '"not initialized")) (lambda (g$120$22669) (begin (if (procedure? g$120$22669) (void) (error 'inv-collector '"not a procedure" g$120$22669)) g$120$22669)))) (set! g$120$13646 (g$120$12318 (lambda g$120$22671 (error 'vis-collector '"not initialized")) (lambda (g$120$22673) (begin (if (procedure? g$120$22673) (void) (error 'vis-collector '"not a procedure" g$120$22673)) g$120$22673)))) (set! g$120$13648 (lambda (g$120$22675 g$120$22676 g$120$22677) (call-with-values (lambda () (g$120$13618 g$120$22675 '() '() '() '() '() '() g$120$22676 g$120$22677)) (lambda (g$120$22681 g$120$22682 g$120$22683 g$120$22684 g$120$22685 g$120$22686 g$120$22687) (values (append (apply append (reverse g$120$22686)) g$120$22681) g$120$22682 g$120$22683 (reverse g$120$22684) (reverse g$120$22685)))))) (set! g$120$13650 (lambda (g$120$22695 g$120$22696 g$120$22697) (call-with-values (lambda () (g$120$13632 g$120$22695)) (lambda (g$120$22701 g$120$22702) (call-with-values (lambda () (g$120$13638 g$120$22696)) (lambda (g$120$22703 g$120$22704) ((lambda (g$120$22709) ((lambda (g$120$22711 g$120$22712 g$120$22713) ((lambda (g$120$22721 g$120$22722 g$120$22723 g$120$22724) ((lambda (g$120$22729) (dynamic-wind g$120$22729 (lambda () (call-with-values (lambda () (g$120$13648 g$120$22711 g$120$22709 '#f)) (lambda (g$120$22731 g$120$22732 g$120$22733 g$120$22734 g$120$22735) (begin (g$120$13166 g$120$22709) ((lambda (g$120$22741 g$120$22742) (begin (g$120$13168 g$120$22709) ((lambda (g$120$22745) (call-with-values (lambda () (g$120$13693 g$120$22732)) (lambda (g$120$22747 g$120$22748 g$120$22749) ((lambda (g$120$22753 g$120$22754) (values g$120$22704 (g$120$22712) (g$120$22713) (g$120$13108 '#f (append g$120$22754 (list g$120$22753))) g$120$22749 g$120$22745 g$120$22747)) (g$120$13105 '#f g$120$22734 g$120$22741 (g$120$13689 g$120$22748 g$120$22742)) (map g$120$13122 (map cdr g$120$22748)))))) (g$120$13691 g$120$22701 g$120$22702 g$120$22709)))) (g$120$13606 g$120$22735 g$120$22732 g$120$22733) (g$120$13592 g$120$22731 g$120$22732 g$120$22733)))))) g$120$22729)) (lambda () (begin ((lambda (g$120$22757) (begin (g$120$22721 g$120$22723) (set! g$120$22723 g$120$22757))) (g$120$22721)) ((lambda (g$120$22759) (begin (g$120$22722 g$120$22724) (set! g$120$22724 g$120$22759))) (g$120$22722)))))) g$120$13644 g$120$13646 g$120$22712 g$120$22713)) (map (lambda (g$120$22761) (g$120$13201 g$120$22761 g$120$13131 (list g$120$22709))) g$120$22697) (g$120$13642) (g$120$13642))) (g$120$13640 g$120$22703)))))))) (set! g$120$13652 (lambda (g$120$22763) (call-with-values (lambda () (g$120$13636 g$120$22763)) (lambda (g$120$22765 g$120$22766 g$120$22767 g$120$22768) (call-with-values (lambda () (g$120$13634 g$120$22765)) (lambda (g$120$22773 g$120$22774) (call-with-values (lambda () (g$120$13650 g$120$22766 g$120$22767 g$120$22768)) (lambda (g$120$22777 g$120$22778 g$120$22779 g$120$22780 g$120$22781 g$120$22782 g$120$22783) (values g$120$22773 g$120$22774 g$120$22777 g$120$22778 g$120$22779 g$120$22780 g$120$22781 g$120$22782 g$120$22783))))))))) (set! g$120$13654 (lambda (g$120$22791) (begin (write g$120$22791) ((lambda (g$120$22793) ((lambda (g$120$22795) (if (if g$120$22795 (begin '#f (apply (lambda (g$120$22797 g$120$22798 g$120$22799) (eq? g$120$22797 'import)) g$120$22795)) '#f) (apply (lambda (g$120$22803 g$120$22804 g$120$22805) (values g$120$22804 g$120$22805)) g$120$22795) ((lambda (g$120$22809) ((lambda (g$120$22811) (if (if g$120$22811 (begin '#f (apply (lambda () '#t) g$120$22811)) '#f) (apply (lambda () (error '"invalid syntax of top-level program")) g$120$22811) (error 'expander '"invalid syntax" (g$120$13243 g$120$22809 '())))) ((lambda (g$120$22813) '()) g$120$22809))) g$120$22793))) ((lambda (g$120$22815) (if (g$120$13211 g$120$22815) (begin '#f ((lambda (g$120$22817) (if g$120$22817 (begin '#f ((lambda (g$120$22819) (if g$120$22819 (begin '#f (append g$120$22817 g$120$22819)) '#f)) ((letrec ((g$120$22821 (lambda (g$120$22823) (if (g$120$13211 g$120$22823) ((lambda (g$120$22825) (if g$120$22825 (begin '#f ((lambda (g$120$22827) (if g$120$22827 (begin '#f (map cons g$120$22825 g$120$22827)) '#f)) (g$120$22821 (g$120$13223 g$120$22823)))) '#f)) ((lambda (g$120$22829) (list g$120$22829)) (g$120$13219 g$120$22823))) (if (g$120$13215 g$120$22823) (list (begin 'b* '())) '#f))))) g$120$22821) (g$120$13223 g$120$22815)))) '#f)) ((lambda (g$120$22831) (if (g$120$13211 g$120$22831) (begin '#f ((lambda (g$120$22833) (if g$120$22833 (begin '#f ((lambda (g$120$22835) (if g$120$22835 (begin '#f (append g$120$22833 g$120$22835)) '#f)) ((letrec ((g$120$22837 (lambda (g$120$22839) (if (g$120$13211 g$120$22839) ((lambda (g$120$22841) (if g$120$22841 (begin '#f ((lambda (g$120$22843) (if g$120$22843 (begin '#f (map cons g$120$22841 g$120$22843)) '#f)) (g$120$22837 (g$120$13223 g$120$22839)))) '#f)) ((lambda (g$120$22845) (list g$120$22845)) (g$120$13219 g$120$22839))) (if (g$120$13215 g$120$22839) (list (begin 'imp* '())) '#f))))) g$120$22837) (g$120$13223 g$120$22831)))) '#f)) ((lambda (g$120$22847) (list g$120$22847)) (g$120$13219 g$120$22831)))) '#f)) (g$120$13219 g$120$22815)))) '#f)) g$120$22793))) g$120$22791)))) (set! g$120$13656 (lambda (g$120$22849) (call-with-values (lambda () (g$120$13654 g$120$22849)) (lambda (g$120$22851 g$120$22852) (call-with-values (lambda () (g$120$13650 '() g$120$22851 g$120$22852)) (lambda (g$120$22855 g$120$22856 g$120$22857 g$120$22858 g$120$22859 g$120$22860 g$120$22861) (values g$120$22856 g$120$22858))))))) (set! g$120$13659 (lambda (g$120$22869 g$120$22870) (vector 'g$120$13658 g$120$22869 g$120$22870))) (set! g$120$13661 (lambda (g$120$22873) (if (vector? g$120$22873) (if (= (vector-length g$120$22873) (+ '1 (length '(subst imp*)))) (begin '#f (eq? (vector-ref g$120$22873 '0) 'g$120$13658)) '#f) '#f))) (set! g$120$13663 (lambda (g$120$22875) (if (g$120$13661 g$120$22875) (vector-ref g$120$22875 '1) (error 'env-subst '"~s is not of type ~s" g$120$22875 'env)))) (set! g$120$13665 (lambda (g$120$22877) (if (g$120$13661 g$120$22877) (vector-ref g$120$22877 '2) (error 'env-imp* '"~s is not of type ~s" g$120$22877 'env)))) (set! g$120$13667 (lambda (g$120$22879 g$120$22880) (if (g$120$13661 g$120$22879) (vector-set! g$120$22879 '1 g$120$22880) (error 'set-env-subst! '"~s is not of type ~s" g$120$22879 'env)))) (set! g$120$13669 (lambda (g$120$22883 g$120$22884) (if (g$120$13661 g$120$22883) (vector-set! g$120$22883 '2 g$120$22884) (error 'set-env-imp*! '"~s is not of type ~s" g$120$22883 'env)))) (set! g$120$13671 (lambda (g$120$22887) (g$120$13661 g$120$22887))) (set! g$120$13673 (lambda g$120$22889 (call-with-values (lambda () (g$120$13638 g$120$22889)) (lambda (g$120$22891 g$120$22892) (g$120$13659 g$120$22891 g$120$22892))))) (set! g$120$13675 (lambda (g$120$22895) (begin (if (eqv? g$120$22895 '5) (void) (error 'null-environment '"not 5" g$120$22895)) (g$120$13673 '(psyntax null-environment-5))))) (set! g$120$13677 (lambda (g$120$22897) (begin (if (eqv? g$120$22897 '5) (void) (error 'scheme-report-environment '"not 5" g$120$22897)) (g$120$13673 '(psyntax scheme-report-environment-5))))) (set! g$120$13679 (lambda (g$120$22899 g$120$22900) (begin (if (g$120$13661 g$120$22900) (void) (error 'expand '"not an environment" g$120$22900)) ((lambda (g$120$22903) ((lambda (g$120$22905) ((lambda (g$120$22907 g$120$22908 g$120$22909) ((lambda (g$120$22913) (begin (g$120$13166 g$120$22905) (values g$120$22913 (g$120$22908)))) ((lambda (g$120$22919 g$120$22920 g$120$22921 g$120$22922) ((lambda (g$120$22927) (dynamic-wind g$120$22927 (lambda () (g$120$13596 g$120$22907 '() '())) g$120$22927)) (lambda () (begin ((lambda (g$120$22929) (begin (g$120$22919 g$120$22921) (set! g$120$22921 g$120$22929))) (g$120$22919)) ((lambda (g$120$22931) (begin (g$120$22920 g$120$22922) (set! g$120$22922 g$120$22931))) (g$120$22920)))))) g$120$13644 g$120$13646 g$120$22908 g$120$22909))) (g$120$13201 g$120$22899 g$120$13131 (list g$120$22905)) (g$120$13642) (g$120$13642))) (g$120$13640 g$120$22903))) (g$120$13663 g$120$22900))))) (set! g$120$13681 (lambda (g$120$22933 g$120$22934) (begin (if (g$120$13661 g$120$22934) (void) (error 'eval '"not an environment" g$120$22934)) (call-with-values (lambda () (g$120$13679 g$120$22933 g$120$22934)) (lambda (g$120$22937 g$120$22938) (begin (for-each g$120$12830 g$120$22938) (eval-core (g$120$12392 g$120$22937)))))))) (set! g$120$13683 (lambda (g$120$22941) ((lambda (g$120$22943 g$120$22945) (begin (set! g$120$22943 (lambda (g$120$22955) (if (null? g$120$22955) (g$120$13107) (g$120$13108 '#f (map (lambda (g$120$22957) ((lambda (g$120$22959 g$120$22960) (list 'set! g$120$22959 g$120$22960)) (car g$120$22957) (cddr g$120$22957))) g$120$22955))))) (set! g$120$22945 (lambda (g$120$22947) (for-each (lambda (g$120$22949) ((lambda (g$120$22951 g$120$22952) (set-symbol-value! g$120$22951 g$120$22952)) (car g$120$22949) (cadr g$120$22949))) g$120$22947))) (call-with-values (lambda () (g$120$13652 g$120$22941)) (lambda (g$120$22963 g$120$22964 g$120$22965 g$120$22966 g$120$22967 g$120$22968 g$120$22969 g$120$22970 g$120$22971) ((lambda (g$120$22981 g$120$22982 g$120$22983 g$120$22984 g$120$22985 g$120$22986) (begin (g$120$12834 g$120$22981 g$120$22982 g$120$22983 g$120$22984 g$120$22985 g$120$22986 g$120$22970 g$120$22971 (lambda () (g$120$22945 g$120$22969)) (lambda () (eval-core (g$120$12392 g$120$22968))) '#t) (values g$120$22968 (g$120$22943 g$120$22969) g$120$22970 g$120$22971))) (gensym) g$120$22963 g$120$22964 (map g$120$12826 g$120$22965) (map g$120$12826 g$120$22967) (map g$120$12826 g$120$22966)))))) '#f '#f))) (set! g$120$13685 (lambda (g$120$22993) (call-with-values (lambda () (g$120$13683 g$120$22993)) (lambda (g$120$22995 g$120$22996 g$120$22997 g$120$22998) (values g$120$22995 g$120$22997 g$120$22998))))) (set! g$120$13687 (lambda (g$120$23003 g$120$23004 g$120$23005) (if (null? g$120$23004) g$120$23005 (g$120$13687 g$120$23003 (cdr g$120$23004) (cons (g$120$23003 (car g$120$23004)) g$120$23005))))) (set! g$120$13689 (lambda (g$120$23009 g$120$23010) (g$120$13108 '#f (cons (g$120$13107) (g$120$13687 (lambda (g$120$23013) (list 'set! (cdr g$120$23013) (car g$120$23013))) g$120$23009 g$120$23010))))) (set! g$120$13691 (lambda (g$120$23015 g$120$23016 g$120$23017) (map (lambda (g$120$23021 g$120$23022) ((lambda (g$120$23025) ((lambda (g$120$23027) ((lambda () (begin (if g$120$23027 (void) (error 'expander '"cannot export unbound identifier" (g$120$13243 g$120$23025 '()))) (cons g$120$23022 g$120$23027))))) (g$120$13247 g$120$23025))) (g$120$13201 g$120$23021 g$120$13131 (list g$120$23017)))) g$120$23015 g$120$23016))) (set! g$120$13693 (lambda (g$120$23029) (letrec ((g$120$23031 (lambda (g$120$23033 g$120$23034 g$120$23035 g$120$23036) (if (null? g$120$23033) (values g$120$23034 g$120$23035 g$120$23036) ((lambda (g$120$23041) ((lambda (g$120$23043 g$120$23044) ((lambda (g$120$23047) (if (memv g$120$23047 '(lexical)) ((lambda (g$120$23052) (g$120$23031 (cdr g$120$23033) (cons (cons* g$120$23043 'global g$120$23052) g$120$23034) (cons (cons (g$120$13255 g$120$23044) g$120$23052) g$120$23035) g$120$23036)) (g$120$13137 (g$120$13255 g$120$23044))) (if (memv g$120$23047 '(local-macro)) ((lambda (g$120$23050) (g$120$23031 (cdr g$120$23033) (cons (cons* g$120$23043 'global-macro g$120$23050) g$120$23034) g$120$23035 (cons (cons g$120$23050 (g$120$13255 g$120$23044)) g$120$23036))) (gensym)) (if (memv g$120$23047 '(local-macro!)) ((lambda (g$120$23048) (g$120$23031 (cdr g$120$23033) (cons (cons* g$120$23043 'global-macro! g$120$23048) g$120$23034) g$120$23035 (cons (cons g$120$23048 (g$120$13255 g$120$23044)) g$120$23036))) (gensym)) (if (memv g$120$23047 '($rtd $module)) (g$120$23031 (cdr g$120$23033) (cons g$120$23041 g$120$23034) g$120$23035 g$120$23036) (error 'expander '"BUG: do not know how to export" (g$120$13253 g$120$23044) (g$120$13255 g$120$23044))))))) (g$120$13253 g$120$23044))) (car g$120$23041) (cdr g$120$23041))) (car g$120$23033)))))) (g$120$23031 g$120$23029 '() '() '())))) (set! g$120$13695 (lambda (g$120$23054) ((lambda (g$120$23056) ((lambda (g$120$23058) (if (if g$120$23058 (begin '#f (apply (lambda (g$120$23060) '#t) g$120$23058)) '#f) (apply (lambda (g$120$23062) (map (lambda (g$120$23064) (g$120$13175 (gensym 't) g$120$13131 '())) g$120$23062)) g$120$23058) ((lambda (g$120$23066) ((lambda (g$120$23068) (if (if g$120$23068 (begin '#f (apply (lambda () '#t) g$120$23068)) '#f) (apply (lambda () (error 'generate-temporaries '"not a list")) g$120$23068) (error 'expander '"invalid syntax" (g$120$13243 g$120$23066 '())))) ((lambda (g$120$23070) '()) g$120$23066))) g$120$23056))) ((letrec ((g$120$23072 (lambda (g$120$23074) (if (g$120$13211 g$120$23074) ((lambda (g$120$23076) (if g$120$23076 (begin '#f ((lambda (g$120$23078) (if g$120$23078 (begin '#f (map cons g$120$23076 g$120$23078)) '#f)) (g$120$23072 (g$120$13223 g$120$23074)))) '#f)) ((lambda (g$120$23080) (list g$120$23080)) (g$120$13219 g$120$23074))) (if (g$120$13215 g$120$23074) (list (begin 'ls '())) '#f))))) g$120$23072) g$120$23056))) g$120$23054))) (set! g$120$13697 (lambda (g$120$23082 g$120$23083) (if (g$120$13225 g$120$23082) (if (g$120$13225 g$120$23083) (g$120$13233 g$120$23082 g$120$23083) (error 'free-identifier=? '"not an identifier" g$120$23083)) (error 'free-identifier=? '"not an identifier" g$120$23082)))) (set! g$120$13699 (lambda (g$120$23086 g$120$23087) (if (g$120$13225 g$120$23086) (if (g$120$13225 g$120$23087) (g$120$13231 g$120$23086 g$120$23087) (error 'bound-identifier=? '"not an identifier" g$120$23087)) (error 'bound-identifier=? '"not an identifier" g$120$23086)))) (set! g$120$13701 (lambda (g$120$23090 . g$120$23092) (begin (if (for-all string? g$120$23092) (void) (error 'syntax-error '"invalid argument" g$120$23092)) (error 'expander '"invalid syntax" (g$120$13245 g$120$23090) (apply string-append g$120$23092))))) (set! g$120$13703 (lambda (g$120$23094) (g$120$13225 g$120$23094))) (set! g$120$13705 (lambda (g$120$23096 g$120$23097) (if (g$120$13225 g$120$23096) (g$120$13191 g$120$23096 g$120$23097) (error 'datum->syntax '"not an identifier" g$120$23096)))) (set! g$120$13707 (lambda (g$120$23100) (g$120$13245 g$120$23100))) (set! g$120$13709 (lambda (g$120$23102) (call-with-values (lambda () (g$120$13656 g$120$23102)) (lambda (g$120$23104 g$120$23105) (begin (for-each g$120$12830 g$120$23104) (eval-core (g$120$12392 g$120$23105))))))) (set! g$120$13711 (g$120$12318 '#f)) (set! g$120$13713 (lambda (g$120$23108) ((lambda (g$120$23110) (if g$120$23110 ((lambda (g$120$23112) ((lambda (g$120$23114) (if g$120$23114 (cdr g$120$23114) ((lambda (g$120$23116) ((lambda (g$120$23118) (if g$120$23118 ((lambda (g$120$23120) ((lambda (g$120$23122) (begin (g$120$12833 g$120$23112 g$120$23108 g$120$23122) g$120$23122)) (cdr g$120$23120))) g$120$23118) ((lambda (g$120$23124) (begin (g$120$12833 g$120$23112 g$120$23108 g$120$23124) (g$120$12832 g$120$23112 g$120$23124 (cons 'global (cons g$120$23112 (g$120$13137 g$120$23108)))) g$120$23124)) (g$120$13139 g$120$23108)))) (assq g$120$23108 g$120$23116))) (if (g$120$12838 '(ikarus)) (g$120$12864 (g$120$12839 '(ikarus))) '())))) (assq g$120$23108 (g$120$12864 g$120$23112)))) g$120$23110) '#f)) (g$120$13711)))) (set! g$120$13715 (lambda (g$120$23126) ((lambda (g$120$23128) (begin (set! g$120$23128 (lambda (g$120$23130) ((lambda (g$120$23132 g$120$23133) (if g$120$23132 (set-symbol-value! g$120$23132 (eval-core (g$120$12392 g$120$23133))) (eval-core (g$120$12392 g$120$23133)))) (car g$120$23130) (cdr g$120$23130)))) ((lambda (g$120$23136 g$120$23137) ((lambda (g$120$23140) (begin (for-each g$120$12830 (g$120$23136)) (if (null? g$120$23140) (void) (begin (for-each g$120$23128 (reverse (cdr g$120$23140))) (g$120$23128 (car g$120$23140)))))) ((lambda (g$120$23148 g$120$23149 g$120$23150 g$120$23151 g$120$23152 g$120$23153) ((lambda (g$120$23160) (dynamic-wind g$120$23160 (lambda () (g$120$13628 (list (g$120$13201 g$120$23126 g$120$13131 '())) '())) g$120$23160)) (lambda () (begin ((lambda (g$120$23162) (begin (g$120$23148 g$120$23151) (set! g$120$23151 g$120$23162))) (g$120$23148)) ((lambda (g$120$23164) (begin (g$120$23149 g$120$23152) (set! g$120$23152 g$120$23164))) (g$120$23149)) ((lambda (g$120$23166) (begin (g$120$23150 g$120$23153) (set! g$120$23153 g$120$23166))) (g$120$23150)))))) g$120$13644 g$120$13646 g$120$13711 g$120$23136 g$120$23137 (g$120$12839 '(ikarus interaction))))) (g$120$13642) (g$120$13642)))) '#f))) (begin (set! g$120$23168 g$120$13715) (set! g$120$23169 g$120$13713) (set! g$120$23170 g$120$13711) (set! g$120$23171 g$120$13709) (set! g$120$23172 g$120$13707) (set! g$120$23173 g$120$13705) (set! g$120$23174 g$120$13703) (set! g$120$23175 g$120$13701) (set! g$120$23176 g$120$13699) (set! g$120$23177 g$120$13697) (set! g$120$23178 g$120$13695) (set! g$120$23179 g$120$13693) (set! g$120$23180 g$120$13691) (set! g$120$23181 g$120$13689) (set! g$120$23182 g$120$13687) (set! g$120$23183 g$120$13685) (set! g$120$23184 g$120$13683) (set! g$120$23185 g$120$13681) (set! g$120$23186 g$120$13679) (set! g$120$23187 g$120$13677) (set! g$120$23188 g$120$13675) (set! g$120$23189 g$120$13673) (set! g$120$23190 g$120$13671) (set! g$120$23191 g$120$13669) (set! g$120$23192 g$120$13667) (set! g$120$23193 g$120$13665) (set! g$120$23194 g$120$13663) (set! g$120$23195 g$120$13661) (set! g$120$23196 g$120$13659) (set! g$120$23197 g$120$13656) (set! g$120$23198 g$120$13654) (set! g$120$23199 g$120$13652) (set! g$120$23200 g$120$13650) (set! g$120$23201 g$120$13648) (set! g$120$23202 g$120$13646) (set! g$120$23203 g$120$13644) (set! g$120$23204 g$120$13642) (set! g$120$23205 g$120$13640) (set! g$120$23206 g$120$13638) (set! g$120$23207 g$120$13636) (set! g$120$23208 g$120$13634) (set! g$120$23209 g$120$13632) (set! g$120$23210 g$120$13630) (set! g$120$23211 g$120$13628) (set! g$120$23212 g$120$13626) (set! g$120$23213 g$120$13624) (set! g$120$23214 g$120$13622) (set! g$120$23215 g$120$13620) (set! g$120$23216 g$120$13618) (set! g$120$23217 g$120$13616) (set! g$120$23218 g$120$13614) (set! g$120$23219 g$120$13612) (set! g$120$23220 g$120$13610) (set! g$120$23221 g$120$13608) (set! g$120$23222 g$120$13606) (set! g$120$23223 g$120$13604) (set! g$120$23224 g$120$13602) (set! g$120$23225 g$120$13600) (set! g$120$23226 g$120$13598) (set! g$120$23227 g$120$13596) (set! g$120$23228 g$120$13594) (set! g$120$23229 g$120$13592) (set! g$120$23230 g$120$13590) (set! g$120$23231 g$120$13588) (set! g$120$23232 g$120$13586) (set! g$120$23233 g$120$13584) (set! g$120$23234 g$120$13582) (set! g$120$23235 g$120$13580) (set! g$120$23236 g$120$13578) (set! g$120$23237 g$120$13576) (set! g$120$23238 g$120$13574) (set! g$120$23239 g$120$13572) (set! g$120$23240 g$120$13570) (set! g$120$23241 g$120$13568) (set! g$120$23242 g$120$13566) (set! g$120$23243 g$120$13564) (set! g$120$23244 g$120$13562) (set! g$120$23245 g$120$13560) (set! g$120$23246 g$120$13558) (set! g$120$23247 g$120$13556) (set! g$120$23248 g$120$13554) (set! g$120$23249 g$120$13552) (set! g$120$23250 g$120$13550) (set! g$120$23251 g$120$13548) (set! g$120$23252 g$120$13546) (set! g$120$23253 g$120$13544) (set! g$120$23254 g$120$13542) (set! g$120$23255 g$120$13540) (set! g$120$23256 g$120$13538) (set! g$120$23257 g$120$13536) (set! g$120$23258 g$120$13534) (set! g$120$23259 g$120$13532) (set! g$120$23260 g$120$13530) (set! g$120$23261 g$120$13528) (set! g$120$23262 g$120$13526) (set! g$120$23263 g$120$13524) (set! g$120$23264 g$120$13522) (set! g$120$23265 g$120$13520) (set! g$120$23266 g$120$13518) (set! g$120$23267 g$120$13516) (set! g$120$23268 g$120$13514) (set! g$120$23269 g$120$13512) (set! g$120$23270 g$120$13510) (set! g$120$23271 g$120$13508) (set! g$120$23272 g$120$13506) (set! g$120$23273 g$120$13504) (set! g$120$23274 g$120$13502) (set! g$120$23275 g$120$13500) (set! g$120$23276 g$120$13498) (set! g$120$23277 g$120$13496) (set! g$120$23278 g$120$13494) (set! g$120$23279 g$120$13492) (set! g$120$23280 g$120$13490) (set! g$120$23281 g$120$13488) (set! g$120$23282 g$120$13486) (set! g$120$23283 g$120$13484) (set! g$120$23284 g$120$13482) (set! g$120$23285 g$120$13480) (set! g$120$23286 g$120$13478) (set! g$120$23287 g$120$13476) (set! g$120$23288 g$120$13474) (set! g$120$23290 g$120$13275) (set! g$120$23291 g$120$13273) (set! g$120$23292 g$120$13271) (set! g$120$23294 g$120$13257) (set! g$120$23295 g$120$13255) (set! g$120$23296 g$120$13253) (set! g$120$23297 g$120$13251) (set! g$120$23298 g$120$13249) (set! g$120$23299 g$120$13247) (set! g$120$23300 g$120$13245) (set! g$120$23301 g$120$13243) (set! g$120$23302 g$120$13241) (set! g$120$23303 g$120$13239) (set! g$120$23304 g$120$13237) (set! g$120$23305 g$120$13235) (set! g$120$23306 g$120$13233) (set! g$120$23307 g$120$13231) (set! g$120$23308 g$120$13229) (set! g$120$23309 g$120$13227) (set! g$120$23310 g$120$13225) (set! g$120$23311 g$120$13223) (set! g$120$23312 g$120$13221) (set! g$120$23313 g$120$13219) (set! g$120$23314 g$120$13217) (set! g$120$23315 g$120$13215) (set! g$120$23316 g$120$13213) (set! g$120$23317 g$120$13211) (set! g$120$23318 g$120$13209) (set! g$120$23319 g$120$13207) (set! g$120$23320 g$120$13205) (set! g$120$23321 g$120$13203) (set! g$120$23322 g$120$13201) (set! g$120$23323 g$120$13199) (set! g$120$23324 g$120$13197) (set! g$120$23325 g$120$13195) (set! g$120$23326 g$120$13193) (set! g$120$23327 g$120$13191) (set! g$120$23328 g$120$13189) (set! g$120$23329 g$120$13187) (set! g$120$23330 g$120$13185) (set! g$120$23331 g$120$13183) (set! g$120$23332 g$120$13181) (set! g$120$23333 g$120$13179) (set! g$120$23334 g$120$13177) (set! g$120$23335 g$120$13175) (set! g$120$23336 g$120$13172) (set! g$120$23337 g$120$13170) (set! g$120$23338 g$120$13168) (set! g$120$23339 g$120$13166) (set! g$120$23340 g$120$13164) (set! g$120$23341 g$120$13162) (set! g$120$23342 g$120$13160) (set! g$120$23343 g$120$13158) (set! g$120$23344 g$120$13156) (set! g$120$23345 g$120$13154) (set! g$120$23346 g$120$13152) (set! g$120$23347 g$120$13150) (set! g$120$23348 g$120$13148) (set! g$120$23349 g$120$13146) (set! g$120$23350 g$120$13144) (set! g$120$23351 g$120$13142) (set! g$120$23352 g$120$13139) (set! g$120$23353 g$120$13137) (set! g$120$23354 g$120$13135) (set! g$120$23355 g$120$13133) (set! g$120$23356 g$120$13131) (set! g$120$23358 g$120$13126) (set! g$120$23359 g$120$13124) (g$120$12842 g$120$13683)))
) ;; '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
;; )


;; (begin (g$120$12396 (lambda (g$120$24116) ((lambda (g$120$24118) (if g$120$24118 (cdr g$120$24118) '#f)) (assq g$120$24116 '((syntax-error . g$120$23175) (syntax-dispatch . g$120$23241) (make-variable-transformer . g$120$23291) (identifier? . g$120$23174) (generate-temporaries . g$120$23178) (free-identifier=? . g$120$23177) (syntax->datum . g$120$23172) (datum->syntax . g$120$23173) (bound-identifier=? . g$120$23176) (null-environment . g$120$23188) (eval . g$120$23185) (environment . g$120$23189)))))) (g$120$12834 'g$120$24083 '(ikarus interaction) '() '() '() '() '() '() values values '#t) (g$120$12834 'g$120$24084 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . g$120$23420) (unquote . g$120$23419) (delay . g$120$23412) (or . g$120$23410) (and . g$120$23409) (do . g$120$23408) (cond . g$120$23407) (let* . g$120$23406) (let . g$120$23405) (quasiquote . g$120$23401) (syntax-rules . g$120$23400) (case . g$120$23394) (if . g$120$23390) (letrec . g$120$23388) (lambda . g$120$23385) (quote . g$120$23382) (letrec-syntax . g$120$23380) (let-syntax . g$120$23379) (set! . g$120$23378) (begin . g$120$23376) (define-syntax . g$120$23374) (define . g$120$23373)) '() values values '#t) (g$120$12834 'g$120$24085 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . g$120$24065) (string-ci>=? . g$120$24064) (string-ci=? . g$120$24063) (string-ci<? . g$120$24062) (string-ci<=? . g$120$24061) (char-whitespace? . g$120$24060) (char-upper-case? . g$120$24059) (char-numeric? . g$120$24057) (char-lower-case? . g$120$24056) (char-upcase . g$120$24054) (char-downcase . g$120$24051) (char-ci>? . g$120$24050) (char-ci>=? . g$120$24049) (char-ci=? . g$120$24048) (char-ci<? . g$120$24047) (char-ci<=? . g$120$24046) (char-alphabetic? . g$120$24045) (call-with-output-file . g$120$24001) (call-with-input-file . g$120$24000) (write-char . g$120$23999) (write . g$120$23998) (with-output-to-file . g$120$23997) (with-input-from-file . g$120$23996) (read-char . g$120$23995) (read . g$120$23994) (peek-char . g$120$23993) (open-output-file . g$120$23992) (open-input-file . g$120$23991) (newline . g$120$23990) (display . g$120$23989) (close-output-port . g$120$23988) (close-input-port . g$120$23987) (eof-object . g$120$23985) (current-output-port . g$120$23983) (current-input-port . g$120$23982) (output-port? . g$120$23981) (input-port? . g$120$23980) (scheme-report-environment . g$120$23895) (quotient . g$120$23894) (null-environment . g$120$13676) (remainder . g$120$23893) (modulo . g$120$23892) (inexact->exact . g$120$23891) (force . g$120$23890) (exact->inexact . g$120$23889) (string-fill! . g$120$23886) (string-set! . g$120$23885) (set-cdr! . g$120$23884) (set-car! . g$120$23883) (memv . g$120$23877) (memq . g$120$23876) (member . g$120$23874) (assv . g$120$23866) (assq . g$120$23865) (assoc . g$120$23863) (eval . g$120$13682) (zero? . g$120$23632) (vector? . g$120$23631) (vector-set! . g$120$23630) (vector-ref . g$120$23629) (vector-length . g$120$23627) (vector-fill! . g$120$23625) (vector->list . g$120$23624) (vector . g$120$23623) (values . g$120$23622) (truncate . g$120$23621) (tan . g$120$23620) (symbol? . g$120$23619) (symbol->string . g$120$23617) (substring . g$120$23616) (string? . g$120$23615) (string>? . g$120$23614) (string>=? . g$120$23613) (string=? . g$120$23612) (string<? . g$120$23611) (string<=? . g$120$23610) (string-ref . g$120$23609) (string-length . g$120$23608) (string-copy . g$120$23606) (string-append . g$120$23605) (string->symbol . g$120$23604) (string->number . g$120$23603) (string->list . g$120$23602) (string . g$120$23601) (sqrt . g$120$23600) (sin . g$120$23599) (round . g$120$23598) (reverse . g$120$23597) (real? . g$120$23596) (real-part . g$120$23594) (rationalize . g$120$23593) (rational? . g$120$23592) (procedure? . g$120$23590) (positive? . g$120$23589) (pair? . g$120$23588) (odd? . g$120$23587) (numerator . g$120$23586) (number? . g$120$23585) (number->string . g$120$23584) (not . g$120$23582) (negative? . g$120$23581) (min . g$120$23579) (max . g$120$23578) (map . g$120$23577) (make-vector . g$120$23576) (make-string . g$120$23575) (make-rectangular . g$120$23574) (make-polar . g$120$23573) (magnitude . g$120$23572) (log . g$120$23571) (list? . g$120$23570) (list-tail . g$120$23569) (list-ref . g$120$23568) (list->vector . g$120$23567) (list->string . g$120$23566) (list . g$120$23565) (length . g$120$23564) (lcm . g$120$23563) (integer? . g$120$23562) (integer->char . g$120$23560) (inexact? . g$120$23558) (imag-part . g$120$23556) (gcd . g$120$23555) (for-each . g$120$23554) (floor . g$120$23553) (expt . g$120$23551) (exp . g$120$23550) (exact? . g$120$23549) (even? . g$120$23546) (eqv? . g$120$23544) (equal? . g$120$23543) (eq? . g$120$23542) (dynamic-wind . g$120$23541) (denominator . g$120$23534) (cos . g$120$23533) (cons . g$120$23532) (complex? . g$120$23531) (char? . g$120$23530) (char>? . g$120$23529) (char>=? . g$120$23528) (char=? . g$120$23527) (char<? . g$120$23526) (char<=? . g$120$23525) (char->integer . g$120$23524) (ceiling . g$120$23523) (call-with-values . g$120$23522) (call-with-current-continuation . g$120$23520) (cddddr . g$120$23519) (cdddar . g$120$23518) (cddadr . g$120$23517) (cddaar . g$120$23516) (cdaddr . g$120$23515) (cdadar . g$120$23514) (cdaadr . g$120$23513) (cdaaar . g$120$23512) (cadddr . g$120$23511) (caddar . g$120$23510) (cadadr . g$120$23509) (cadaar . g$120$23508) (caaddr . g$120$23507) (caadar . g$120$23506) (caaadr . g$120$23505) (caaaar . g$120$23504) (cdddr . g$120$23503) (cddar . g$120$23502) (cdadr . g$120$23501) (cdaar . g$120$23500) (caddr . g$120$23499) (cadar . g$120$23498) (caadr . g$120$23497) (caaar . g$120$23496) (cddr . g$120$23495) (cdar . g$120$23494) (cadr . g$120$23493) (caar . g$120$23492) (cdr . g$120$23491) (car . g$120$23490) (boolean? . g$120$23489) (atan . g$120$23487) (asin . g$120$23485) (apply . g$120$23484) (append . g$120$23483) (angle . g$120$23482) (acos . g$120$23481) (abs . g$120$23480) (/ . g$120$23479) (* . g$120$23478) (- . g$120$23477) (+ . g$120$23476) (>= . g$120$23475) (> . g$120$23474) (= . g$120$23473) (<= . g$120$23472) (< . g$120$23471) (unquote-splicing . g$120$23420) (unquote . g$120$23419) (delay . g$120$23412) (or . g$120$23410) (and . g$120$23409) (do . g$120$23408) (cond . g$120$23407) (let* . g$120$23406) (let . g$120$23405) (quasiquote . g$120$23401) (syntax-rules . g$120$23400) (case . g$120$23394) (if . g$120$23390) (letrec . g$120$23388) (lambda . g$120$23385) (quote . g$120$23382) (letrec-syntax . g$120$23380) (let-syntax . g$120$23379) (set! . g$120$23378) (begin . g$120$23376) (define-syntax . g$120$23374) (define . g$120$23373)) '() values values '#t) (g$120$12834 'g$120$24086 '(psyntax modules) '() '() '() '() '((module . g$120$23375)) '() values values '#t) (g$120$12834 'g$120$24087 '(chez parameters) '() '() '() '() '() '() values values '#t) (g$120$12834 'g$120$24088 '(rnrs) '(6) '() '() '() '((string-upcase . g$120$24073) (string-titlecase . g$120$24072) (string-normalize-nfkd . g$120$24071) (string-normalize-nfkc . g$120$24070) (string-normalize-nfd . g$120$24069) (string-normalize-nfc . g$120$24068) (string-foldcase . g$120$24067) (string-downcase . g$120$24066) (string-ci>? . g$120$24065) (string-ci>=? . g$120$24064) (string-ci=? . g$120$24063) (string-ci<? . g$120$24062) (string-ci<=? . g$120$24061) (char-whitespace? . g$120$24060) (char-upper-case? . g$120$24059) (char-title-case? . g$120$24058) (char-numeric? . g$120$24057) (char-lower-case? . g$120$24056) (char-general-category . g$120$24055) (char-upcase . g$120$24054) (char-titlecase . g$120$24053) (char-foldcase . g$120$24052) (char-downcase . g$120$24051) (char-ci>? . g$120$24050) (char-ci>=? . g$120$24049) (char-ci=? . g$120$24048) (char-ci<? . g$120$24047) (char-ci<=? . g$120$24046) (char-alphabetic? . g$120$24045) (make-variable-transformer . g$120$13274) (identifier? . g$120$13704) (generate-temporaries . g$120$13696) (free-identifier=? . g$120$13698) (syntax->datum . g$120$13708) (datum->syntax . g$120$13706) (bound-identifier=? . g$120$13700) (record-type-descriptor? . g$120$24044) (record-predicate . g$120$24043) (record-mutator . g$120$24042) (record-constructor . g$120$24041) (record-accessor . g$120$24040) (make-record-type-descriptor . g$120$24039) (make-record-constructor-descriptor . g$120$24038) (record? . g$120$24037) (record-type-uid . g$120$24036) (record-type-sealed? . g$120$24035) (record-type-parent . g$120$24034) (record-type-opaque? . g$120$24033) (record-type-name . g$120$24032) (record-type-generative? . g$120$24031) (record-type-field-names . g$120$24030) (record-rtd . g$120$24029) (record-field-mutable? . g$120$24028) (delete-file . g$120$24027) (file-exists? . g$120$24026) (vector-sort! . g$120$24025) (vector-sort . g$120$24024) (list-sort . g$120$24023) (symbol-hash . g$120$24022) (string-ci-hash . g$120$24021) (string-hash . g$120$24020) (equal-hash . g$120$24019) (hashtable-equivalence-function . g$120$24018) (make-hashtable . g$120$24017) (hashtable-hash-function . g$120$24016) (make-eqv-hashtable . g$120$24015) (make-eq-hashtable . g$120$24014) (hashtable? . g$120$24013) (hashtable-update! . g$120$24012) (hashtable-size . g$120$24011) (hashtable-set! . g$120$24010) (hashtable-ref . g$120$24009) (hashtable-mutable? . g$120$24008) (hashtable-keys . g$120$24007) (hashtable-entries . g$120$24006) (hashtable-delete! . g$120$24005) (hashtable-copy . g$120$24004) (hashtable-contains? . g$120$24003) (hashtable-clear! . g$120$24002) (call-with-output-file . g$120$24001) (call-with-input-file . g$120$24000) (write-char . g$120$23999) (write . g$120$23998) (with-output-to-file . g$120$23997) (with-input-from-file . g$120$23996) (read-char . g$120$23995) (read . g$120$23994) (peek-char . g$120$23993) (open-output-file . g$120$23992) (open-input-file . g$120$23991) (newline . g$120$23990) (display . g$120$23989) (close-output-port . g$120$23988) (close-input-port . g$120$23987) (eof-object? . g$120$23986) (eof-object . g$120$23985) (current-error-port . g$120$23984) (current-output-port . g$120$23983) (current-input-port . g$120$23982) (output-port? . g$120$23981) (input-port? . g$120$23980) (utf-8-codec . g$120$23979) (utf-16-codec . g$120$23978) (transcoder-error-handling-mode . g$120$23977) (transcoder-eol-style . g$120$23976) (transcoder-codec . g$120$23975) (transcoded-port . g$120$23974) (textual-port? . g$120$23973) (string->bytevector . g$120$23972) (standard-output-port . g$120$23971) (standard-input-port . g$120$23970) (standard-error-port . g$120$23969) (set-port-position! . g$120$23968) (put-u8 . g$120$23967) (put-string . g$120$23966) (put-datum . g$120$23965) (put-char . g$120$23964) (put-bytevector . g$120$23963) (port? . g$120$23962) (port-transcoder . g$120$23961) (port-position . g$120$23960) (port-has-set-port-position!? . g$120$23959) (port-has-port-position? . g$120$23958) (port-eof? . g$120$23957) (output-port-buffer-mode . g$120$23956) (open-string-output-port . g$120$23955) (open-string-input-port . g$120$23954) (open-file-output-port . g$120$23953) (open-file-input/output-port . g$120$23952) (open-file-input-port . g$120$23951) (open-bytevector-output-port . g$120$23950) (open-bytevector-input-port . g$120$23949) (native-transcoder . g$120$23948) (native-eol-style . g$120$23947) (make-transcoder . g$120$23946) (latin-1-codec . g$120$23945) (make-i/o-write-error . g$120$23944) (make-i/o-read-error . g$120$23943) (make-i/o-port-error . g$120$23942) (make-i/o-invalid-position-error . g$120$23941) (make-i/o-filename-error . g$120$23940) (make-i/o-file-protection-error . g$120$23939) (make-i/o-file-is-read-only-error . g$120$23938) (make-i/o-file-does-not-exist-error . g$120$23937) (make-i/o-file-already-exists-error . g$120$23936) (make-i/o-error . g$120$23935) (make-i/o-encoding-error . g$120$23934) (make-i/o-decoding-error . g$120$23933) (make-custom-textual-output-port . g$120$23932) (make-custom-textual-input/output-port . g$120$23931) (make-custom-textual-input-port . g$120$23930) (make-custom-binary-output-port . g$120$23929) (make-custom-binary-input/output-port . g$120$23928) (make-custom-binary-input-port . g$120$23927) (make-bytevector . g$120$23926) (lookahead-u8 . g$120$23925) (lookahead-char . g$120$23924) (i/o-write-error? . g$120$23923) (i/o-read-error? . g$120$23922) (i/o-port-error? . g$120$23921) (i/o-invalid-position-error? . g$120$23920) (i/o-filename-error? . g$120$23919) (i/o-file-protection-error? . g$120$23918) (i/o-file-is-read-only-error? . g$120$23917) (i/o-file-does-not-exist-error? . g$120$23916) (i/o-file-already-exists-error? . g$120$23915) (i/o-error? . g$120$23914) (i/o-error-port . g$120$23913) (i/o-error-filename . g$120$23912) (i/o-encoding-error? . g$120$23911) (i/o-encoding-error-char . g$120$23910) (i/o-decoding-error? . g$120$23909) (get-u8 . g$120$23908) (get-string-n! . g$120$23907) (get-string-n . g$120$23906) (get-string-all . g$120$23905) (get-line . g$120$23904) (get-datum . g$120$23903) (get-char . g$120$23902) (get-bytevector-some . g$120$23901) (get-bytevector-n! . g$120$23900) (get-bytevector-n . g$120$23899) (get-bytevector-all . g$120$23898) (flush-output-port . g$120$23897) (close-port . g$120$23896) (exit . g$120$23888) (command-line . g$120$23887) (remove . g$120$23882) (remv . g$120$23881) (remp . g$120$23880) (remq . g$120$23879) (partition . g$120$23878) (memv . g$120$23877) (memq . g$120$23876) (memp . g$120$23875) (member . g$120$23874) (exists . g$120$23873) (for-all . g$120$23872) (fold-right . g$120$23871) (fold-left . g$120$23870) (find . g$120$23869) (filter . g$120$23868) (cons* . g$120$23867) (assv . g$120$23866) (assq . g$120$23865) (assp . g$120$23864) (assoc . g$120$23863) (call-with-string-output-port . g$120$23862) (call-with-port . g$120$23861) (call-with-bytevector-output-port . g$120$23860) (bytevector->string . g$120$23859) (buffer-mode? . g$120$23858) (binary-port? . g$120$23857) (with-exception-handler . g$120$23856) (raise-continuable . g$120$23855) (raise . g$120$23854) (make-enumeration . g$120$23853) (enum-set=? . g$120$23852) (enum-set-universe . g$120$23851) (enum-set-union . g$120$23850) (enum-set-subset? . g$120$23849) (enum-set-projection . g$120$23848) (enum-set-member? . g$120$23847) (enum-set-intersection . g$120$23846) (enum-set-indexer . g$120$23845) (enum-set-difference . g$120$23844) (enum-set-constructor . g$120$23843) (enum-set-complement . g$120$23842) (enum-set->list . g$120$23841) (who-condition? . g$120$23840) (warning? . g$120$23839) (violation? . g$120$23838) (undefined-violation? . g$120$23837) (syntax-violation? . g$120$23836) (syntax-violation-subform . g$120$23835) (syntax-violation-form . g$120$23834) (syntax-violation . g$120$23833) (simple-conditions . g$120$23832) (serious-condition? . g$120$23831) (non-continuable-violation? . g$120$23830) (&non-continuable . g$120$23829) (message-condition? . g$120$23828) (make-who-condition . g$120$23827) (make-warning . g$120$23826) (make-violation . g$120$23825) (make-undefined-violation . g$120$23824) (make-syntax-violation . g$120$23823) (make-serious-condition . g$120$23822) (make-non-continuable-violation . g$120$23821) (make-message-condition . g$120$23820) (make-lexical-violation . g$120$23819) (make-irritants-condition . g$120$23818) (make-implementation-restriction-violation . g$120$23817) (make-error . g$120$23816) (make-assertion-violation . g$120$23815) (lexical-violation? . g$120$23814) (irritants-condition? . g$120$23813) (implementation-restriction-violation? . g$120$23812) (&implementation-restriction . g$120$23811) (error? . g$120$23810) (condition-who . g$120$23809) (condition-predicate . g$120$23808) (condition-message . g$120$23807) (condition-irritants . g$120$23806) (condition-accessor . g$120$23805) (condition . g$120$23804) (assertion-violation? . g$120$23803) (condition? . g$120$23802) (utf32->string . g$120$23801) (utf16->string . g$120$23800) (utf8->string . g$120$23799) (uint-list->bytevector . g$120$23798) (u8-list->bytevector . g$120$23797) (string->utf8 . g$120$23796) (string->utf32 . g$120$23795) (string->utf16 . g$120$23794) (sint-list->bytevector . g$120$23793) (native-endianness . g$120$23792) (bytevector? . g$120$23791) (bytevector=? . g$120$23790) (bytevector-uint-set! . g$120$23789) (bytevector-uint-ref . g$120$23788) (bytevector-u8-set! . g$120$23787) (bytevector-u8-ref . g$120$23786) (bytevector-u64-set! . g$120$23785) (bytevector-u64-ref . g$120$23784) (bytevector-u64-native-set! . g$120$23783) (bytevector-u64-native-ref . g$120$23782) (bytevector-u32-set! . g$120$23781) (bytevector-u32-ref . g$120$23780) (bytevector-u32-native-set! . g$120$23779) (bytevector-u32-native-ref . g$120$23778) (bytevector-u16-set! . g$120$23777) (bytevector-u16-ref . g$120$23776) (bytevector-u16-native-set! . g$120$23775) (bytevector-u16-native-ref . g$120$23774) (bytevector-sint-set! . g$120$23773) (bytevector-sint-ref . g$120$23772) (bytevector-s8-set! . g$120$23771) (bytevector-s8-ref . g$120$23770) (bytevector-s64-set! . g$120$23769) (bytevector-s64-ref . g$120$23768) (bytevector-s64-native-set! . g$120$23767) (bytevector-s64-native-ref . g$120$23766) (bytevector-s32-set! . g$120$23765) (bytevector-s32-ref . g$120$23764) (bytevector-s32-native-set! . g$120$23763) (bytevector-s32-native-ref . g$120$23762) (bytevector-s16-set! . g$120$23761) (bytevector-s16-ref . g$120$23760) (bytevector-s16-native-set! . g$120$23759) (bytevector-s16-native-ref . g$120$23758) (bytevector-length . g$120$23757) (bytevector-ieee-single-ref . g$120$23756) (bytevector-ieee-single-native-set! . g$120$23755) (bytevector-ieee-single-native-ref . g$120$23754) (bytevector-ieee-double-ref . g$120$23753) (bytevector-ieee-double-native-set! . g$120$23752) (bytevector-ieee-double-native-ref . g$120$23751) (bytevector-fill! . g$120$23750) (bytevector-copy! . g$120$23749) (bytevector-copy . g$120$23748) (bytevector->uint-list . g$120$23747) (bytevector->u8-list . g$120$23746) (bytevector->sint-list . g$120$23745) (no-nans-violation? . g$120$23744) (no-infinities-violation? . g$120$23743) (make-no-nans-violation . g$120$23742) (make-no-infinities-violation . g$120$23741) (real->flonum . g$120$23740) (flzero? . g$120$23739) (fltruncate . g$120$23738) (fltan . g$120$23737) (flsqrt . g$120$23736) (flsin . g$120$23735) (flround . g$120$23734) (flpositive? . g$120$23733) (flonum? . g$120$23732) (flodd? . g$120$23731) (flnumerator . g$120$23730) (flnegative? . g$120$23729) (flnan? . g$120$23728) (flmod0 . g$120$23727) (flmod . g$120$23726) (flmin . g$120$23725) (flmax . g$120$23724) (fllog . g$120$23723) (flinteger? . g$120$23722) (flinfinite? . g$120$23721) (flfloor . g$120$23720) (flfinite? . g$120$23719) (flexpt . g$120$23718) (flexp . g$120$23717) (fleven? . g$120$23716) (fldiv0-and-mod0 . g$120$23715) (fldiv0 . g$120$23714) (fldiv-and-mod . g$120$23713) (fldiv . g$120$23712) (fldenominator . g$120$23711) (flcos . g$120$23710) (flceiling . g$120$23709) (flatan . g$120$23708) (flasin . g$120$23707) (flacos . g$120$23706) (flabs . g$120$23705) (fl>? . g$120$23704) (fl>=? . g$120$23703) (fl=? . g$120$23702) (fl<? . g$120$23701) (fl<=? . g$120$23700) (fl/ . g$120$23699) (fl- . g$120$23698) (fl+ . g$120$23697) (fl* . g$120$23696) (fixnum->flonum . g$120$23695) (fxzero? . g$120$23694) (fxxor . g$120$23693) (fxrotate-bit-field . g$120$23692) (fxreverse-bit-field . g$120$23691) (fxpositive? . g$120$23690) (fxodd? . g$120$23689) (fxnot . g$120$23688) (fxnegative? . g$120$23687) (fxmod0 . g$120$23686) (fxmod . g$120$23685) (fxmin . g$120$23684) (fxmax . g$120$23683) (fxlength . g$120$23682) (fxior . g$120$23681) (fxif . g$120$23680) (fxfirst-bit-set . g$120$23679) (fxeven? . g$120$23678) (fxdiv0-and-mod0 . g$120$23677) (fxdiv0 . g$120$23676) (fxdiv-and-mod . g$120$23675) (fxdiv . g$120$23674) (fxcopy-bit-field . g$120$23673) (fxcopy-bit . g$120$23672) (fxbit-set? . g$120$23671) (fxbit-field . g$120$23670) (fxbit-count . g$120$23669) (fxarithmetic-shift-right . g$120$23668) (fxarithmetic-shift-left . g$120$23667) (fxarithmetic-shift . g$120$23666) (fxand . g$120$23665) (fx>? . g$120$23664) (fx>=? . g$120$23663) (fx=? . g$120$23662) (fx<? . g$120$23661) (fx<=? . g$120$23660) (fx-/carry . g$120$23659) (fx- . g$120$23658) (fx+/carry . g$120$23657) (fx+ . g$120$23656) (fx*/carry . g$120$23655) (fx* . g$120$23654) (greatest-fixnum . g$120$23653) (least-fixnum . g$120$23652) (fixnum-width . g$120$23651) (fixnum? . g$120$23650) (bitwise-rotate-bit-field . g$120$23649) (bitwise-reverse-bit-field . g$120$23648) (bitwise-length . g$120$23647) (bitwise-if . g$120$23646) (bitwise-first-bit-set . g$120$23645) (bitwise-copy-bit-field . g$120$23644) (bitwise-copy-bit . g$120$23643) (bitwise-bit-set? . g$120$23642) (bitwise-bit-field . g$120$23641) (bitwise-bit-count . g$120$23640) (bitwise-xor . g$120$23639) (bitwise-ior . g$120$23638) (bitwise-and . g$120$23637) (bitwise-not . g$120$23636) (bitwise-arithmetic-shift-right . g$120$23635) (bitwise-arithmetic-shift-left . g$120$23634) (bitwise-arithmetic-shift . g$120$23633) (zero? . g$120$23632) (vector? . g$120$23631) (vector-set! . g$120$23630) (vector-ref . g$120$23629) (vector-map . g$120$23628) (vector-length . g$120$23627) (vector-for-each . g$120$23626) (vector-fill! . g$120$23625) (vector->list . g$120$23624) (vector . g$120$23623) (values . g$120$23622) (truncate . g$120$23621) (tan . g$120$23620) (symbol? . g$120$23619) (symbol=? . g$120$23618) (symbol->string . g$120$23617) (substring . g$120$23616) (string? . g$120$23615) (string>? . g$120$23614) (string>=? . g$120$23613) (string=? . g$120$23612) (string<? . g$120$23611) (string<=? . g$120$23610) (string-ref . g$120$23609) (string-length . g$120$23608) (string-for-each . g$120$23607) (string-copy . g$120$23606) (string-append . g$120$23605) (string->symbol . g$120$23604) (string->number . g$120$23603) (string->list . g$120$23602) (string . g$120$23601) (sqrt . g$120$23600) (sin . g$120$23599) (round . g$120$23598) (reverse . g$120$23597) (real? . g$120$23596) (real-valued? . g$120$23595) (real-part . g$120$23594) (rationalize . g$120$23593) (rational? . g$120$23592) (rational-valued? . g$120$23591) (procedure? . g$120$23590) (positive? . g$120$23589) (pair? . g$120$23588) (odd? . g$120$23587) (numerator . g$120$23586) (number? . g$120$23585) (number->string . g$120$23584) (null? . g$120$23583) (not . g$120$23582) (negative? . g$120$23581) (nan? . g$120$23580) (min . g$120$23579) (max . g$120$23578) (map . g$120$23577) (make-vector . g$120$23576) (make-string . g$120$23575) (make-rectangular . g$120$23574) (make-polar . g$120$23573) (magnitude . g$120$23572) (log . g$120$23571) (list? . g$120$23570) (list-tail . g$120$23569) (list-ref . g$120$23568) (list->vector . g$120$23567) (list->string . g$120$23566) (list . g$120$23565) (length . g$120$23564) (lcm . g$120$23563) (integer? . g$120$23562) (integer-valued? . g$120$23561) (integer->char . g$120$23560) (infinite? . g$120$23559) (inexact? . g$120$23558) (inexact . g$120$23557) (imag-part . g$120$23556) (gcd . g$120$23555) (for-each . g$120$23554) (floor . g$120$23553) (finite? . g$120$23552) (expt . g$120$23551) (exp . g$120$23550) (exact? . g$120$23549) (exact-integer-sqrt . g$120$23548) (exact . g$120$23547) (even? . g$120$23546) (error . g$120$23545) (eqv? . g$120$23544) (equal? . g$120$23543) (eq? . g$120$23542) (dynamic-wind . g$120$23541) (div0-and-mod0 . g$120$23540) (mod0 . g$120$23539) (div0 . g$120$23538) (div-and-mod . g$120$23537) (mod . g$120$23536) (div . g$120$23535) (denominator . g$120$23534) (cos . g$120$23533) (cons . g$120$23532) (complex? . g$120$23531) (char? . g$120$23530) (char>? . g$120$23529) (char>=? . g$120$23528) (char=? . g$120$23527) (char<? . g$120$23526) (char<=? . g$120$23525) (char->integer . g$120$23524) (ceiling . g$120$23523) (call-with-values . g$120$23522) (call/cc . g$120$23521) (call-with-current-continuation . g$120$23520) (cddddr . g$120$23519) (cdddar . g$120$23518) (cddadr . g$120$23517) (cddaar . g$120$23516) (cdaddr . g$120$23515) (cdadar . g$120$23514) (cdaadr . g$120$23513) (cdaaar . g$120$23512) (cadddr . g$120$23511) (caddar . g$120$23510) (cadadr . g$120$23509) (cadaar . g$120$23508) (caaddr . g$120$23507) (caadar . g$120$23506) (caaadr . g$120$23505) (caaaar . g$120$23504) (cdddr . g$120$23503) (cddar . g$120$23502) (cdadr . g$120$23501) (cdaar . g$120$23500) (caddr . g$120$23499) (cadar . g$120$23498) (caadr . g$120$23497) (caaar . g$120$23496) (cddr . g$120$23495) (cdar . g$120$23494) (cadr . g$120$23493) (caar . g$120$23492) (cdr . g$120$23491) (car . g$120$23490) (boolean? . g$120$23489) (boolean=? . g$120$23488) (atan . g$120$23487) (assertion-violation . g$120$23486) (asin . g$120$23485) (apply . g$120$23484) (append . g$120$23483) (angle . g$120$23482) (acos . g$120$23481) (abs . g$120$23480) (/ . g$120$23479) (* . g$120$23478) (- . g$120$23477) (+ . g$120$23476) (>= . g$120$23475) (> . g$120$23474) (= . g$120$23473) (<= . g$120$23472) (< . g$120$23471) (let*-values . g$120$23470) (&no-nans . g$120$23469) (&no-infinities . g$120$23468) (&i/o-encoding . g$120$23467) (&i/o-decoding . g$120$23466) (&i/o-port . g$120$23465) (&i/o-file-does-not-exist . g$120$23464) (&i/o-file-already-exists . g$120$23463) (&i/o-file-is-read-only . g$120$23462) (&i/o-file-protection . g$120$23461) (&i/o-filename . g$120$23460) (&i/o-invalid-position . g$120$23459) (&i/o-write . g$120$23458) (&i/o-read . g$120$23457) (&i/o . g$120$23456) (&undefined . g$120$23455) (&syntax . g$120$23454) (&lexical . g$120$23453) (&who . g$120$23450) (&irritants . g$120$23449) (&assertion . g$120$23448) (&violation . g$120$23447) (&error . g$120$23446) (&serious . g$120$23445) (&warning . g$120$23444) (&message . g$120$23443) (&condition . g$120$23442) (define-condition-type . g$120$23441) (define-enumeration . g$120$23440) (define-record-type . g$120$23439) (parent-rtd . g$120$23438) (nongenerative . g$120$23437) (opaque . g$120$23436) (sealed . g$120$23435) (protocol . g$120$23434) (parent . g$120$23433) (immutable . g$120$23432) (mutable . g$120$23431) (fields . g$120$23430) (error-handling-mode . g$120$23429) (file-options . g$120$23428) (buffer-mode . g$120$23427) (eol-style . g$120$23426) (guard . g$120$23425) (unsyntax-splicing . g$120$23422) (unsyntax . g$120$23421) (unquote-splicing . g$120$23420) (unquote . g$120$23419) (_ . g$120$23418) (else . g$120$23417) (=> . g$120$23416) (|...| . g$120$23415) (assert . g$120$23414) (endianness . g$120$23413) (or . g$120$23410) (and . g$120$23409) (do . g$120$23408) (cond . g$120$23407) (let* . g$120$23406) (let . g$120$23405) (identifier-syntax . g$120$23404) (with-syntax . g$120$23403) (quasisyntax . g$120$23402) (quasiquote . g$120$23401) (syntax-rules . g$120$23400) (record-constructor-descriptor . g$120$23397) (record-type-descriptor . g$120$23396) (let-values . g$120$23395) (case . g$120$23394) (unless . g$120$23392) (when . g$120$23391) (if . g$120$23390) (letrec* . g$120$23389) (letrec . g$120$23388) (case-lambda . g$120$23386) (lambda . g$120$23385) (syntax . g$120$23384) (syntax-case . g$120$23383) (quote . g$120$23382) (letrec-syntax . g$120$23380) (let-syntax . g$120$23379) (set! . g$120$23378) (begin . g$120$23376) (define-syntax . g$120$23374) (define . g$120$23373)) '() values values '#t) (g$120$12834 'g$120$24089 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . g$120$23895) (quotient . g$120$23894) (null-environment . g$120$13676) (remainder . g$120$23893) (modulo . g$120$23892) (inexact->exact . g$120$23891) (force . g$120$23890) (exact->inexact . g$120$23889) (delay . g$120$23412)) '() values values '#t) (g$120$12834 'g$120$24090 '(rnrs control) '(6) '() '() '() '((do . g$120$23408) (unless . g$120$23392) (when . g$120$23391) (case-lambda . g$120$23386)) '() values values '#t) (g$120$12834 'g$120$24091 '(rnrs eval) '(6) '() '() '() '((eval . g$120$13682) (environment . g$120$13674)) '() values values '#t) (g$120$12834 'g$120$24092 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g$120$23884) (set-car! . g$120$23883)) '() values values '#t) (g$120$12834 'g$120$24093 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g$120$23886) (string-set! . g$120$23885)) '() values values '#t) (g$120$12834 'g$120$24094 '(rnrs programs) '(6) '() '() '() '((exit . g$120$23888) (command-line . g$120$23887)) '() values values '#t) (g$120$12834 'g$120$24095 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g$120$13274) (identifier? . g$120$13704) (generate-temporaries . g$120$13696) (free-identifier=? . g$120$13698) (syntax->datum . g$120$13708) (datum->syntax . g$120$13706) (bound-identifier=? . g$120$13700) (syntax-violation . g$120$23833) (unsyntax-splicing . g$120$23422) (unsyntax . g$120$23421) (_ . g$120$23418) (|...| . g$120$23415) (with-syntax . g$120$23403) (quasisyntax . g$120$23402) (syntax . g$120$23384) (syntax-case . g$120$23383)) '() values values '#t) (g$120$12834 'g$120$24096 '(rnrs files) '(6) '() '() '() '((delete-file . g$120$24027) (file-exists? . g$120$24026) (make-i/o-write-error . g$120$23944) (make-i/o-read-error . g$120$23943) (make-i/o-port-error . g$120$23942) (make-i/o-invalid-position-error . g$120$23941) (make-i/o-filename-error . g$120$23940) (make-i/o-file-protection-error . g$120$23939) (make-i/o-file-is-read-only-error . g$120$23938) (make-i/o-file-does-not-exist-error . g$120$23937) (make-i/o-file-already-exists-error . g$120$23936) (make-i/o-error . g$120$23935) (i/o-write-error? . g$120$23923) (i/o-read-error? . g$120$23922) (i/o-port-error? . g$120$23921) (i/o-invalid-position-error? . g$120$23920) (i/o-filename-error? . g$120$23919) (i/o-file-protection-error? . g$120$23918) (i/o-file-is-read-only-error? . g$120$23917) (i/o-file-does-not-exist-error? . g$120$23916) (i/o-file-already-exists-error? . g$120$23915) (i/o-error? . g$120$23914) (i/o-error-port . g$120$23913) (i/o-error-filename . g$120$23912) (&i/o-port . g$120$23465) (&i/o-file-does-not-exist . g$120$23464) (&i/o-file-already-exists . g$120$23463) (&i/o-file-is-read-only . g$120$23462) (&i/o-file-protection . g$120$23461) (&i/o-filename . g$120$23460) (&i/o-invalid-position . g$120$23459) (&i/o-write . g$120$23458) (&i/o-read . g$120$23457) (&i/o . g$120$23456)) '() values values '#t) (g$120$12834 'g$120$24097 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g$120$24025) (vector-sort . g$120$24024) (list-sort . g$120$24023)) '() values values '#t) (g$120$12834 'g$120$24098 '(rnrs base) '(6) '() '() '() '((zero? . g$120$23632) (vector? . g$120$23631) (vector-set! . g$120$23630) (vector-ref . g$120$23629) (vector-map . g$120$23628) (vector-length . g$120$23627) (vector-for-each . g$120$23626) (vector-fill! . g$120$23625) (vector->list . g$120$23624) (vector . g$120$23623) (values . g$120$23622) (truncate . g$120$23621) (tan . g$120$23620) (symbol? . g$120$23619) (symbol=? . g$120$23618) (symbol->string . g$120$23617) (substring . g$120$23616) (string? . g$120$23615) (string>? . g$120$23614) (string>=? . g$120$23613) (string=? . g$120$23612) (string<? . g$120$23611) (string<=? . g$120$23610) (string-ref . g$120$23609) (string-length . g$120$23608) (string-for-each . g$120$23607) (string-copy . g$120$23606) (string-append . g$120$23605) (string->symbol . g$120$23604) (string->number . g$120$23603) (string->list . g$120$23602) (string . g$120$23601) (sqrt . g$120$23600) (sin . g$120$23599) (round . g$120$23598) (reverse . g$120$23597) (real? . g$120$23596) (real-valued? . g$120$23595) (real-part . g$120$23594) (rationalize . g$120$23593) (rational? . g$120$23592) (rational-valued? . g$120$23591) (procedure? . g$120$23590) (positive? . g$120$23589) (pair? . g$120$23588) (odd? . g$120$23587) (numerator . g$120$23586) (number? . g$120$23585) (number->string . g$120$23584) (null? . g$120$23583) (not . g$120$23582) (negative? . g$120$23581) (nan? . g$120$23580) (min . g$120$23579) (max . g$120$23578) (map . g$120$23577) (make-vector . g$120$23576) (make-string . g$120$23575) (make-rectangular . g$120$23574) (make-polar . g$120$23573) (magnitude . g$120$23572) (log . g$120$23571) (list? . g$120$23570) (list-tail . g$120$23569) (list-ref . g$120$23568) (list->vector . g$120$23567) (list->string . g$120$23566) (list . g$120$23565) (length . g$120$23564) (lcm . g$120$23563) (integer? . g$120$23562) (integer-valued? . g$120$23561) (integer->char . g$120$23560) (infinite? . g$120$23559) (inexact? . g$120$23558) (inexact . g$120$23557) (imag-part . g$120$23556) (gcd . g$120$23555) (for-each . g$120$23554) (floor . g$120$23553) (finite? . g$120$23552) (expt . g$120$23551) (exp . g$120$23550) (exact? . g$120$23549) (exact-integer-sqrt . g$120$23548) (exact . g$120$23547) (even? . g$120$23546) (error . g$120$23545) (eqv? . g$120$23544) (equal? . g$120$23543) (eq? . g$120$23542) (dynamic-wind . g$120$23541) (div0-and-mod0 . g$120$23540) (mod0 . g$120$23539) (div0 . g$120$23538) (div-and-mod . g$120$23537) (mod . g$120$23536) (div . g$120$23535) (denominator . g$120$23534) (cos . g$120$23533) (cons . g$120$23532) (complex? . g$120$23531) (char? . g$120$23530) (char>? . g$120$23529) (char>=? . g$120$23528) (char=? . g$120$23527) (char<? . g$120$23526) (char<=? . g$120$23525) (char->integer . g$120$23524) (ceiling . g$120$23523) (call-with-values . g$120$23522) (call/cc . g$120$23521) (call-with-current-continuation . g$120$23520) (cddddr . g$120$23519) (cdddar . g$120$23518) (cddadr . g$120$23517) (cddaar . g$120$23516) (cdaddr . g$120$23515) (cdadar . g$120$23514) (cdaadr . g$120$23513) (cdaaar . g$120$23512) (cadddr . g$120$23511) (caddar . g$120$23510) (cadadr . g$120$23509) (cadaar . g$120$23508) (caaddr . g$120$23507) (caadar . g$120$23506) (caaadr . g$120$23505) (caaaar . g$120$23504) (cdddr . g$120$23503) (cddar . g$120$23502) (cdadr . g$120$23501) (cdaar . g$120$23500) (caddr . g$120$23499) (cadar . g$120$23498) (caadr . g$120$23497) (caaar . g$120$23496) (cddr . g$120$23495) (cdar . g$120$23494) (cadr . g$120$23493) (caar . g$120$23492) (cdr . g$120$23491) (car . g$120$23490) (boolean? . g$120$23489) (boolean=? . g$120$23488) (atan . g$120$23487) (assertion-violation . g$120$23486) (asin . g$120$23485) (apply . g$120$23484) (append . g$120$23483) (angle . g$120$23482) (acos . g$120$23481) (abs . g$120$23480) (/ . g$120$23479) (* . g$120$23478) (- . g$120$23477) (+ . g$120$23476) (>= . g$120$23475) (> . g$120$23474) (= . g$120$23473) (<= . g$120$23472) (< . g$120$23471) (let*-values . g$120$23470) (unquote-splicing . g$120$23420) (unquote . g$120$23419) (_ . g$120$23418) (else . g$120$23417) (=> . g$120$23416) (|...| . g$120$23415) (assert . g$120$23414) (or . g$120$23410) (and . g$120$23409) (cond . g$120$23407) (let* . g$120$23406) (let . g$120$23405) (identifier-syntax . g$120$23404) (quasiquote . g$120$23401) (syntax-rules . g$120$23400) (let-values . g$120$23395) (case . g$120$23394) (if . g$120$23390) (letrec* . g$120$23389) (letrec . g$120$23388) (lambda . g$120$23385) (quote . g$120$23382) (letrec-syntax . g$120$23380) (let-syntax . g$120$23379) (set! . g$120$23378) (begin . g$120$23376) (define-syntax . g$120$23374) (define . g$120$23373)) '() values values '#t) (g$120$12834 'g$120$24099 '(rnrs lists) '(6) '() '() '() '((remove . g$120$23882) (remv . g$120$23881) (remp . g$120$23880) (remq . g$120$23879) (partition . g$120$23878) (memv . g$120$23877) (memq . g$120$23876) (memp . g$120$23875) (member . g$120$23874) (exists . g$120$23873) (for-all . g$120$23872) (fold-right . g$120$23871) (fold-left . g$120$23870) (find . g$120$23869) (filter . g$120$23868) (cons* . g$120$23867) (assv . g$120$23866) (assq . g$120$23865) (assp . g$120$23864) (assoc . g$120$23863)) '() values values '#t) (g$120$12834 'g$120$24100 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . g$120$24001) (call-with-input-file . g$120$24000) (write-char . g$120$23999) (write . g$120$23998) (with-output-to-file . g$120$23997) (with-input-from-file . g$120$23996) (read-char . g$120$23995) (read . g$120$23994) (peek-char . g$120$23993) (open-output-file . g$120$23992) (open-input-file . g$120$23991) (newline . g$120$23990) (display . g$120$23989) (close-output-port . g$120$23988) (close-input-port . g$120$23987) (eof-object? . g$120$23986) (eof-object . g$120$23985) (current-error-port . g$120$23984) (current-output-port . g$120$23983) (current-input-port . g$120$23982) (output-port? . g$120$23981) (input-port? . g$120$23980) (make-i/o-write-error . g$120$23944) (make-i/o-read-error . g$120$23943) (make-i/o-port-error . g$120$23942) (make-i/o-invalid-position-error . g$120$23941) (make-i/o-filename-error . g$120$23940) (make-i/o-file-protection-error . g$120$23939) (make-i/o-file-is-read-only-error . g$120$23938) (make-i/o-file-does-not-exist-error . g$120$23937) (make-i/o-file-already-exists-error . g$120$23936) (make-i/o-error . g$120$23935) (i/o-write-error? . g$120$23923) (i/o-read-error? . g$120$23922) (i/o-port-error? . g$120$23921) (i/o-invalid-position-error? . g$120$23920) (i/o-filename-error? . g$120$23919) (i/o-file-protection-error? . g$120$23918) (i/o-file-is-read-only-error? . g$120$23917) (i/o-file-does-not-exist-error? . g$120$23916) (i/o-file-already-exists-error? . g$120$23915) (i/o-error? . g$120$23914) (i/o-error-port . g$120$23913) (i/o-error-filename . g$120$23912) (&i/o-port . g$120$23465) (&i/o-file-does-not-exist . g$120$23464) (&i/o-file-already-exists . g$120$23463) (&i/o-file-is-read-only . g$120$23462) (&i/o-file-protection . g$120$23461) (&i/o-filename . g$120$23460) (&i/o-invalid-position . g$120$23459) (&i/o-write . g$120$23458) (&i/o-read . g$120$23457) (&i/o . g$120$23456)) '() values values '#t) (g$120$12834 'g$120$24101 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g$120$23926) (utf32->string . g$120$23801) (utf16->string . g$120$23800) (utf8->string . g$120$23799) (uint-list->bytevector . g$120$23798) (u8-list->bytevector . g$120$23797) (string->utf8 . g$120$23796) (string->utf32 . g$120$23795) (string->utf16 . g$120$23794) (sint-list->bytevector . g$120$23793) (native-endianness . g$120$23792) (bytevector? . g$120$23791) (bytevector=? . g$120$23790) (bytevector-uint-set! . g$120$23789) (bytevector-uint-ref . g$120$23788) (bytevector-u8-set! . g$120$23787) (bytevector-u8-ref . g$120$23786) (bytevector-u64-set! . g$120$23785) (bytevector-u64-ref . g$120$23784) (bytevector-u64-native-set! . g$120$23783) (bytevector-u64-native-ref . g$120$23782) (bytevector-u32-set! . g$120$23781) (bytevector-u32-ref . g$120$23780) (bytevector-u32-native-set! . g$120$23779) (bytevector-u32-native-ref . g$120$23778) (bytevector-u16-set! . g$120$23777) (bytevector-u16-ref . g$120$23776) (bytevector-u16-native-set! . g$120$23775) (bytevector-u16-native-ref . g$120$23774) (bytevector-sint-set! . g$120$23773) (bytevector-sint-ref . g$120$23772) (bytevector-s8-set! . g$120$23771) (bytevector-s8-ref . g$120$23770) (bytevector-s64-set! . g$120$23769) (bytevector-s64-ref . g$120$23768) (bytevector-s64-native-set! . g$120$23767) (bytevector-s64-native-ref . g$120$23766) (bytevector-s32-set! . g$120$23765) (bytevector-s32-ref . g$120$23764) (bytevector-s32-native-set! . g$120$23763) (bytevector-s32-native-ref . g$120$23762) (bytevector-s16-set! . g$120$23761) (bytevector-s16-ref . g$120$23760) (bytevector-s16-native-set! . g$120$23759) (bytevector-s16-native-ref . g$120$23758) (bytevector-length . g$120$23757) (bytevector-ieee-single-ref . g$120$23756) (bytevector-ieee-single-native-set! . g$120$23755) (bytevector-ieee-single-native-ref . g$120$23754) (bytevector-ieee-double-ref . g$120$23753) (bytevector-ieee-double-native-set! . g$120$23752) (bytevector-ieee-double-native-ref . g$120$23751) (bytevector-fill! . g$120$23750) (bytevector-copy! . g$120$23749) (bytevector-copy . g$120$23748) (bytevector->uint-list . g$120$23747) (bytevector->u8-list . g$120$23746) (bytevector->sint-list . g$120$23745) (endianness . g$120$23413)) '() values values '#t) (g$120$12834 'g$120$24102 '(rnrs unicode) '(6) '() '() '() '((string-upcase . g$120$24073) (string-titlecase . g$120$24072) (string-normalize-nfkd . g$120$24071) (string-normalize-nfkc . g$120$24070) (string-normalize-nfd . g$120$24069) (string-normalize-nfc . g$120$24068) (string-foldcase . g$120$24067) (string-downcase . g$120$24066) (string-ci>? . g$120$24065) (string-ci>=? . g$120$24064) (string-ci=? . g$120$24063) (string-ci<? . g$120$24062) (string-ci<=? . g$120$24061) (char-whitespace? . g$120$24060) (char-upper-case? . g$120$24059) (char-title-case? . g$120$24058) (char-numeric? . g$120$24057) (char-lower-case? . g$120$24056) (char-general-category . g$120$24055) (char-upcase . g$120$24054) (char-titlecase . g$120$24053) (char-foldcase . g$120$24052) (char-downcase . g$120$24051) (char-ci>? . g$120$24050) (char-ci>=? . g$120$24049) (char-ci=? . g$120$24048) (char-ci<? . g$120$24047) (char-ci<=? . g$120$24046) (char-alphabetic? . g$120$24045)) '() values values '#t) (g$120$12834 'g$120$24103 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g$120$23856) (raise-continuable . g$120$23855) (raise . g$120$23854) (guard . g$120$23425) (else . g$120$23417) (=> . g$120$23416)) '() values values '#t) (g$120$12834 'g$120$24104 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g$120$23649) (bitwise-reverse-bit-field . g$120$23648) (bitwise-length . g$120$23647) (bitwise-if . g$120$23646) (bitwise-first-bit-set . g$120$23645) (bitwise-copy-bit-field . g$120$23644) (bitwise-copy-bit . g$120$23643) (bitwise-bit-set? . g$120$23642) (bitwise-bit-field . g$120$23641) (bitwise-bit-count . g$120$23640) (bitwise-xor . g$120$23639) (bitwise-ior . g$120$23638) (bitwise-and . g$120$23637) (bitwise-not . g$120$23636) (bitwise-arithmetic-shift-right . g$120$23635) (bitwise-arithmetic-shift-left . g$120$23634) (bitwise-arithmetic-shift . g$120$23633)) '() values values '#t) (g$120$12834 'g$120$24105 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g$120$23694) (fxxor . g$120$23693) (fxrotate-bit-field . g$120$23692) (fxreverse-bit-field . g$120$23691) (fxpositive? . g$120$23690) (fxodd? . g$120$23689) (fxnot . g$120$23688) (fxnegative? . g$120$23687) (fxmod0 . g$120$23686) (fxmod . g$120$23685) (fxmin . g$120$23684) (fxmax . g$120$23683) (fxlength . g$120$23682) (fxior . g$120$23681) (fxif . g$120$23680) (fxfirst-bit-set . g$120$23679) (fxeven? . g$120$23678) (fxdiv0-and-mod0 . g$120$23677) (fxdiv0 . g$120$23676) (fxdiv-and-mod . g$120$23675) (fxdiv . g$120$23674) (fxcopy-bit-field . g$120$23673) (fxcopy-bit . g$120$23672) (fxbit-set? . g$120$23671) (fxbit-field . g$120$23670) (fxbit-count . g$120$23669) (fxarithmetic-shift-right . g$120$23668) (fxarithmetic-shift-left . g$120$23667) (fxarithmetic-shift . g$120$23666) (fxand . g$120$23665) (fx>? . g$120$23664) (fx>=? . g$120$23663) (fx=? . g$120$23662) (fx<? . g$120$23661) (fx<=? . g$120$23660) (fx-/carry . g$120$23659) (fx- . g$120$23658) (fx+/carry . g$120$23657) (fx+ . g$120$23656) (fx*/carry . g$120$23655) (fx* . g$120$23654) (greatest-fixnum . g$120$23653) (least-fixnum . g$120$23652) (fixnum-width . g$120$23651) (fixnum? . g$120$23650)) '() values values '#t) (g$120$12834 'g$120$24106 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g$120$23744) (no-infinities-violation? . g$120$23743) (make-no-nans-violation . g$120$23742) (make-no-infinities-violation . g$120$23741) (real->flonum . g$120$23740) (flzero? . g$120$23739) (fltruncate . g$120$23738) (fltan . g$120$23737) (flsqrt . g$120$23736) (flsin . g$120$23735) (flround . g$120$23734) (flpositive? . g$120$23733) (flonum? . g$120$23732) (flodd? . g$120$23731) (flnumerator . g$120$23730) (flnegative? . g$120$23729) (flnan? . g$120$23728) (flmod0 . g$120$23727) (flmod . g$120$23726) (flmin . g$120$23725) (flmax . g$120$23724) (fllog . g$120$23723) (flinteger? . g$120$23722) (flinfinite? . g$120$23721) (flfloor . g$120$23720) (flfinite? . g$120$23719) (flexpt . g$120$23718) (flexp . g$120$23717) (fleven? . g$120$23716) (fldiv0-and-mod0 . g$120$23715) (fldiv0 . g$120$23714) (fldiv-and-mod . g$120$23713) (fldiv . g$120$23712) (fldenominator . g$120$23711) (flcos . g$120$23710) (flceiling . g$120$23709) (flatan . g$120$23708) (flasin . g$120$23707) (flacos . g$120$23706) (flabs . g$120$23705) (fl>? . g$120$23704) (fl>=? . g$120$23703) (fl=? . g$120$23702) (fl<? . g$120$23701) (fl<=? . g$120$23700) (fl/ . g$120$23699) (fl- . g$120$23698) (fl+ . g$120$23697) (fl* . g$120$23696) (fixnum->flonum . g$120$23695) (&no-nans . g$120$23469) (&no-infinities . g$120$23468)) '() values values '#t) (g$120$12834 'g$120$24107 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g$120$24022) (string-ci-hash . g$120$24021) (string-hash . g$120$24020) (equal-hash . g$120$24019) (hashtable-equivalence-function . g$120$24018) (make-hashtable . g$120$24017) (hashtable-hash-function . g$120$24016) (make-eqv-hashtable . g$120$24015) (make-eq-hashtable . g$120$24014) (hashtable? . g$120$24013) (hashtable-update! . g$120$24012) (hashtable-size . g$120$24011) (hashtable-set! . g$120$24010) (hashtable-ref . g$120$24009) (hashtable-mutable? . g$120$24008) (hashtable-keys . g$120$24007) (hashtable-entries . g$120$24006) (hashtable-delete! . g$120$24005) (hashtable-copy . g$120$24004) (hashtable-contains? . g$120$24003) (hashtable-clear! . g$120$24002)) '() values values '#t) (g$120$12834 'g$120$24108 '(rnrs io ports) '(6) '() '() '() '((eof-object? . g$120$23986) (eof-object . g$120$23985) (current-error-port . g$120$23984) (current-output-port . g$120$23983) (current-input-port . g$120$23982) (output-port? . g$120$23981) (input-port? . g$120$23980) (utf-8-codec . g$120$23979) (utf-16-codec . g$120$23978) (transcoder-error-handling-mode . g$120$23977) (transcoder-eol-style . g$120$23976) (transcoder-codec . g$120$23975) (transcoded-port . g$120$23974) (textual-port? . g$120$23973) (string->bytevector . g$120$23972) (standard-output-port . g$120$23971) (standard-input-port . g$120$23970) (standard-error-port . g$120$23969) (set-port-position! . g$120$23968) (put-u8 . g$120$23967) (put-string . g$120$23966) (put-datum . g$120$23965) (put-char . g$120$23964) (put-bytevector . g$120$23963) (port? . g$120$23962) (port-transcoder . g$120$23961) (port-position . g$120$23960) (port-has-set-port-position!? . g$120$23959) (port-has-port-position? . g$120$23958) (port-eof? . g$120$23957) (output-port-buffer-mode . g$120$23956) (open-string-output-port . g$120$23955) (open-string-input-port . g$120$23954) (open-file-output-port . g$120$23953) (open-file-input/output-port . g$120$23952) (open-file-input-port . g$120$23951) (open-bytevector-output-port . g$120$23950) (open-bytevector-input-port . g$120$23949) (native-transcoder . g$120$23948) (native-eol-style . g$120$23947) (make-transcoder . g$120$23946) (latin-1-codec . g$120$23945) (make-i/o-write-error . g$120$23944) (make-i/o-read-error . g$120$23943) (make-i/o-port-error . g$120$23942) (make-i/o-invalid-position-error . g$120$23941) (make-i/o-filename-error . g$120$23940) (make-i/o-file-protection-error . g$120$23939) (make-i/o-file-is-read-only-error . g$120$23938) (make-i/o-file-does-not-exist-error . g$120$23937) (make-i/o-file-already-exists-error . g$120$23936) (make-i/o-error . g$120$23935) (make-i/o-encoding-error . g$120$23934) (make-i/o-decoding-error . g$120$23933) (make-custom-textual-output-port . g$120$23932) (make-custom-textual-input/output-port . g$120$23931) (make-custom-textual-input-port . g$120$23930) (make-custom-binary-output-port . g$120$23929) (make-custom-binary-input/output-port . g$120$23928) (make-custom-binary-input-port . g$120$23927) (lookahead-u8 . g$120$23925) (lookahead-char . g$120$23924) (i/o-write-error? . g$120$23923) (i/o-read-error? . g$120$23922) (i/o-port-error? . g$120$23921) (i/o-invalid-position-error? . g$120$23920) (i/o-filename-error? . g$120$23919) (i/o-file-protection-error? . g$120$23918) (i/o-file-is-read-only-error? . g$120$23917) (i/o-file-does-not-exist-error? . g$120$23916) (i/o-file-already-exists-error? . g$120$23915) (i/o-error? . g$120$23914) (i/o-error-port . g$120$23913) (i/o-error-filename . g$120$23912) (i/o-encoding-error? . g$120$23911) (i/o-encoding-error-char . g$120$23910) (i/o-decoding-error? . g$120$23909) (get-u8 . g$120$23908) (get-string-n! . g$120$23907) (get-string-n . g$120$23906) (get-string-all . g$120$23905) (get-line . g$120$23904) (get-datum . g$120$23903) (get-char . g$120$23902) (get-bytevector-some . g$120$23901) (get-bytevector-n! . g$120$23900) (get-bytevector-n . g$120$23899) (get-bytevector-all . g$120$23898) (flush-output-port . g$120$23897) (close-port . g$120$23896) (call-with-string-output-port . g$120$23862) (call-with-port . g$120$23861) (call-with-bytevector-output-port . g$120$23860) (bytevector->string . g$120$23859) (buffer-mode? . g$120$23858) (binary-port? . g$120$23857) (&i/o-encoding . g$120$23467) (&i/o-decoding . g$120$23466) (&i/o-port . g$120$23465) (&i/o-file-does-not-exist . g$120$23464) (&i/o-file-already-exists . g$120$23463) (&i/o-file-is-read-only . g$120$23462) (&i/o-file-protection . g$120$23461) (&i/o-filename . g$120$23460) (&i/o-invalid-position . g$120$23459) (&i/o-write . g$120$23458) (&i/o-read . g$120$23457) (&i/o . g$120$23456) (error-handling-mode . g$120$23429) (file-options . g$120$23428) (buffer-mode . g$120$23427) (eol-style . g$120$23426)) '() values values '#t) (g$120$12834 'g$120$24109 '(rnrs enums) '(6) '() '() '() '((make-enumeration . g$120$23853) (enum-set=? . g$120$23852) (enum-set-universe . g$120$23851) (enum-set-union . g$120$23850) (enum-set-subset? . g$120$23849) (enum-set-projection . g$120$23848) (enum-set-member? . g$120$23847) (enum-set-intersection . g$120$23846) (enum-set-indexer . g$120$23845) (enum-set-difference . g$120$23844) (enum-set-constructor . g$120$23843) (enum-set-complement . g$120$23842) (enum-set->list . g$120$23841) (define-enumeration . g$120$23440)) '() values values '#t) (g$120$12834 'g$120$24110 '(rnrs conditions) '(6) '() '() '() '((who-condition? . g$120$23840) (warning? . g$120$23839) (violation? . g$120$23838) (undefined-violation? . g$120$23837) (syntax-violation? . g$120$23836) (syntax-violation-subform . g$120$23835) (syntax-violation-form . g$120$23834) (syntax-violation . g$120$23833) (simple-conditions . g$120$23832) (serious-condition? . g$120$23831) (non-continuable-violation? . g$120$23830) (&non-continuable . g$120$23829) (message-condition? . g$120$23828) (make-who-condition . g$120$23827) (make-warning . g$120$23826) (make-violation . g$120$23825) (make-undefined-violation . g$120$23824) (make-syntax-violation . g$120$23823) (make-serious-condition . g$120$23822) (make-non-continuable-violation . g$120$23821) (make-message-condition . g$120$23820) (make-lexical-violation . g$120$23819) (make-irritants-condition . g$120$23818) (make-implementation-restriction-violation . g$120$23817) (make-error . g$120$23816) (make-assertion-violation . g$120$23815) (lexical-violation? . g$120$23814) (irritants-condition? . g$120$23813) (implementation-restriction-violation? . g$120$23812) (&implementation-restriction . g$120$23811) (error? . g$120$23810) (condition-who . g$120$23809) (condition-predicate . g$120$23808) (condition-message . g$120$23807) (condition-irritants . g$120$23806) (condition-accessor . g$120$23805) (condition . g$120$23804) (assertion-violation? . g$120$23803) (condition? . g$120$23802) (&undefined . g$120$23455) (&syntax . g$120$23454) (&lexical . g$120$23453) (&who . g$120$23450) (&irritants . g$120$23449) (&assertion . g$120$23448) (&violation . g$120$23447) (&error . g$120$23446) (&serious . g$120$23445) (&warning . g$120$23444) (&message . g$120$23443) (&condition . g$120$23442) (define-condition-type . g$120$23441)) '() values values '#t) (g$120$12834 'g$120$24111 '(rnrs records inspection) '(6) '() '() '() '((record? . g$120$24037) (record-type-uid . g$120$24036) (record-type-sealed? . g$120$24035) (record-type-parent . g$120$24034) (record-type-opaque? . g$120$24033) (record-type-name . g$120$24032) (record-type-generative? . g$120$24031) (record-type-field-names . g$120$24030) (record-rtd . g$120$24029) (record-field-mutable? . g$120$24028)) '() values values '#t) (g$120$12834 'g$120$24112 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g$120$24044) (record-predicate . g$120$24043) (record-mutator . g$120$24042) (record-constructor . g$120$24041) (record-accessor . g$120$24040) (make-record-type-descriptor . g$120$24039) (make-record-constructor-descriptor . g$120$24038)) '() values values '#t) (g$120$12834 'g$120$24113 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g$120$23439) (parent-rtd . g$120$23438) (nongenerative . g$120$23437) (opaque . g$120$23436) (sealed . g$120$23435) (protocol . g$120$23434) (parent . g$120$23433) (immutable . g$120$23432) (mutable . g$120$23431) (fields . g$120$23430) (record-constructor-descriptor . g$120$23397) (record-type-descriptor . g$120$23396)) '() values values '#t) (g$120$12834 'g$120$24114 '(psyntax system $all) '() '() '() '() '((syntax-error . g$120$13702) (syntax-dispatch . g$120$13569) (pretty-print . g$120$24082) (eval-core . g$120$24081) (set-symbol-value! . g$120$24080) (symbol-value . g$120$24079) (gensym . g$120$24078) (void . g$120$24077) (load . g$120$24076) (interaction-environment . g$120$24075) (char-ready? . g$120$24074) (string-upcase . g$120$24073) (string-titlecase . g$120$24072) (string-normalize-nfkd . g$120$24071) (string-normalize-nfkc . g$120$24070) (string-normalize-nfd . g$120$24069) (string-normalize-nfc . g$120$24068) (string-foldcase . g$120$24067) (string-downcase . g$120$24066) (string-ci>? . g$120$24065) (string-ci>=? . g$120$24064) (string-ci=? . g$120$24063) (string-ci<? . g$120$24062) (string-ci<=? . g$120$24061) (char-whitespace? . g$120$24060) (char-upper-case? . g$120$24059) (char-title-case? . g$120$24058) (char-numeric? . g$120$24057) (char-lower-case? . g$120$24056) (char-general-category . g$120$24055) (char-upcase . g$120$24054) (char-titlecase . g$120$24053) (char-foldcase . g$120$24052) (char-downcase . g$120$24051) (char-ci>? . g$120$24050) (char-ci>=? . g$120$24049) (char-ci=? . g$120$24048) (char-ci<? . g$120$24047) (char-ci<=? . g$120$24046) (char-alphabetic? . g$120$24045) (make-variable-transformer . g$120$13274) (identifier? . g$120$13704) (generate-temporaries . g$120$13696) (free-identifier=? . g$120$13698) (syntax->datum . g$120$13708) (datum->syntax . g$120$13706) (bound-identifier=? . g$120$13700) (record-type-descriptor? . g$120$24044) (record-predicate . g$120$24043) (record-mutator . g$120$24042) (record-constructor . g$120$24041) (record-accessor . g$120$24040) (make-record-type-descriptor . g$120$24039) (make-record-constructor-descriptor . g$120$24038) (record? . g$120$24037) (record-type-uid . g$120$24036) (record-type-sealed? . g$120$24035) (record-type-parent . g$120$24034) (record-type-opaque? . g$120$24033) (record-type-name . g$120$24032) (record-type-generative? . g$120$24031) (record-type-field-names . g$120$24030) (record-rtd . g$120$24029) (record-field-mutable? . g$120$24028) (delete-file . g$120$24027) (file-exists? . g$120$24026) (vector-sort! . g$120$24025) (vector-sort . g$120$24024) (list-sort . g$120$24023) (symbol-hash . g$120$24022) (string-ci-hash . g$120$24021) (string-hash . g$120$24020) (equal-hash . g$120$24019) (hashtable-equivalence-function . g$120$24018) (make-hashtable . g$120$24017) (hashtable-hash-function . g$120$24016) (make-eqv-hashtable . g$120$24015) (make-eq-hashtable . g$120$24014) (hashtable? . g$120$24013) (hashtable-update! . g$120$24012) (hashtable-size . g$120$24011) (hashtable-set! . g$120$24010) (hashtable-ref . g$120$24009) (hashtable-mutable? . g$120$24008) (hashtable-keys . g$120$24007) (hashtable-entries . g$120$24006) (hashtable-delete! . g$120$24005) (hashtable-copy . g$120$24004) (hashtable-contains? . g$120$24003) (hashtable-clear! . g$120$24002) (call-with-output-file . g$120$24001) (call-with-input-file . g$120$24000) (write-char . g$120$23999) (write . g$120$23998) (with-output-to-file . g$120$23997) (with-input-from-file . g$120$23996) (read-char . g$120$23995) (read . g$120$23994) (peek-char . g$120$23993) (open-output-file . g$120$23992) (open-input-file . g$120$23991) (newline . g$120$23990) (display . g$120$23989) (close-output-port . g$120$23988) (close-input-port . g$120$23987) (eof-object? . g$120$23986) (eof-object . g$120$23985) (current-error-port . g$120$23984) (current-output-port . g$120$23983) (current-input-port . g$120$23982) (output-port? . g$120$23981) (input-port? . g$120$23980) (utf-8-codec . g$120$23979) (utf-16-codec . g$120$23978) (transcoder-error-handling-mode . g$120$23977) (transcoder-eol-style . g$120$23976) (transcoder-codec . g$120$23975) (transcoded-port . g$120$23974) (textual-port? . g$120$23973) (string->bytevector . g$120$23972) (standard-output-port . g$120$23971) (standard-input-port . g$120$23970) (standard-error-port . g$120$23969) (set-port-position! . g$120$23968) (put-u8 . g$120$23967) (put-string . g$120$23966) (put-datum . g$120$23965) (put-char . g$120$23964) (put-bytevector . g$120$23963) (port? . g$120$23962) (port-transcoder . g$120$23961) (port-position . g$120$23960) (port-has-set-port-position!? . g$120$23959) (port-has-port-position? . g$120$23958) (port-eof? . g$120$23957) (output-port-buffer-mode . g$120$23956) (open-string-output-port . g$120$23955) (open-string-input-port . g$120$23954) (open-file-output-port . g$120$23953) (open-file-input/output-port . g$120$23952) (open-file-input-port . g$120$23951) (open-bytevector-output-port . g$120$23950) (open-bytevector-input-port . g$120$23949) (native-transcoder . g$120$23948) (native-eol-style . g$120$23947) (make-transcoder . g$120$23946) (latin-1-codec . g$120$23945) (make-i/o-write-error . g$120$23944) (make-i/o-read-error . g$120$23943) (make-i/o-port-error . g$120$23942) (make-i/o-invalid-position-error . g$120$23941) (make-i/o-filename-error . g$120$23940) (make-i/o-file-protection-error . g$120$23939) (make-i/o-file-is-read-only-error . g$120$23938) (make-i/o-file-does-not-exist-error . g$120$23937) (make-i/o-file-already-exists-error . g$120$23936) (make-i/o-error . g$120$23935) (make-i/o-encoding-error . g$120$23934) (make-i/o-decoding-error . g$120$23933) (make-custom-textual-output-port . g$120$23932) (make-custom-textual-input/output-port . g$120$23931) (make-custom-textual-input-port . g$120$23930) (make-custom-binary-output-port . g$120$23929) (make-custom-binary-input/output-port . g$120$23928) (make-custom-binary-input-port . g$120$23927) (make-bytevector . g$120$23926) (lookahead-u8 . g$120$23925) (lookahead-char . g$120$23924) (i/o-write-error? . g$120$23923) (i/o-read-error? . g$120$23922) (i/o-port-error? . g$120$23921) (i/o-invalid-position-error? . g$120$23920) (i/o-filename-error? . g$120$23919) (i/o-file-protection-error? . g$120$23918) (i/o-file-is-read-only-error? . g$120$23917) (i/o-file-does-not-exist-error? . g$120$23916) (i/o-file-already-exists-error? . g$120$23915) (i/o-error? . g$120$23914) (i/o-error-port . g$120$23913) (i/o-error-filename . g$120$23912) (i/o-encoding-error? . g$120$23911) (i/o-encoding-error-char . g$120$23910) (i/o-decoding-error? . g$120$23909) (get-u8 . g$120$23908) (get-string-n! . g$120$23907) (get-string-n . g$120$23906) (get-string-all . g$120$23905) (get-line . g$120$23904) (get-datum . g$120$23903) (get-char . g$120$23902) (get-bytevector-some . g$120$23901) (get-bytevector-n! . g$120$23900) (get-bytevector-n . g$120$23899) (get-bytevector-all . g$120$23898) (flush-output-port . g$120$23897) (close-port . g$120$23896) (scheme-report-environment . g$120$23895) (quotient . g$120$23894) (null-environment . g$120$13676) (remainder . g$120$23893) (modulo . g$120$23892) (inexact->exact . g$120$23891) (force . g$120$23890) (exact->inexact . g$120$23889) (exit . g$120$23888) (command-line . g$120$23887) (string-fill! . g$120$23886) (string-set! . g$120$23885) (set-cdr! . g$120$23884) (set-car! . g$120$23883) (remove . g$120$23882) (remv . g$120$23881) (remp . g$120$23880) (remq . g$120$23879) (partition . g$120$23878) (memv . g$120$23877) (memq . g$120$23876) (memp . g$120$23875) (member . g$120$23874) (exists . g$120$23873) (for-all . g$120$23872) (fold-right . g$120$23871) (fold-left . g$120$23870) (find . g$120$23869) (filter . g$120$23868) (cons* . g$120$23867) (assv . g$120$23866) (assq . g$120$23865) (assp . g$120$23864) (assoc . g$120$23863) (call-with-string-output-port . g$120$23862) (call-with-port . g$120$23861) (call-with-bytevector-output-port . g$120$23860) (bytevector->string . g$120$23859) (buffer-mode? . g$120$23858) (binary-port? . g$120$23857) (with-exception-handler . g$120$23856) (raise-continuable . g$120$23855) (raise . g$120$23854) (eval . g$120$13682) (environment . g$120$13674) (make-enumeration . g$120$23853) (enum-set=? . g$120$23852) (enum-set-universe . g$120$23851) (enum-set-union . g$120$23850) (enum-set-subset? . g$120$23849) (enum-set-projection . g$120$23848) (enum-set-member? . g$120$23847) (enum-set-intersection . g$120$23846) (enum-set-indexer . g$120$23845) (enum-set-difference . g$120$23844) (enum-set-constructor . g$120$23843) (enum-set-complement . g$120$23842) (enum-set->list . g$120$23841) (who-condition? . g$120$23840) (warning? . g$120$23839) (violation? . g$120$23838) (undefined-violation? . g$120$23837) (syntax-violation? . g$120$23836) (syntax-violation-subform . g$120$23835) (syntax-violation-form . g$120$23834) (syntax-violation . g$120$23833) (simple-conditions . g$120$23832) (serious-condition? . g$120$23831) (non-continuable-violation? . g$120$23830) (&non-continuable . g$120$23829) (message-condition? . g$120$23828) (make-who-condition . g$120$23827) (make-warning . g$120$23826) (make-violation . g$120$23825) (make-undefined-violation . g$120$23824) (make-syntax-violation . g$120$23823) (make-serious-condition . g$120$23822) (make-non-continuable-violation . g$120$23821) (make-message-condition . g$120$23820) (make-lexical-violation . g$120$23819) (make-irritants-condition . g$120$23818) (make-implementation-restriction-violation . g$120$23817) (make-error . g$120$23816) (make-assertion-violation . g$120$23815) (lexical-violation? . g$120$23814) (irritants-condition? . g$120$23813) (implementation-restriction-violation? . g$120$23812) (&implementation-restriction . g$120$23811) (error? . g$120$23810) (condition-who . g$120$23809) (condition-predicate . g$120$23808) (condition-message . g$120$23807) (condition-irritants . g$120$23806) (condition-accessor . g$120$23805) (condition . g$120$23804) (assertion-violation? . g$120$23803) (condition? . g$120$23802) (utf32->string . g$120$23801) (utf16->string . g$120$23800) (utf8->string . g$120$23799) (uint-list->bytevector . g$120$23798) (u8-list->bytevector . g$120$23797) (string->utf8 . g$120$23796) (string->utf32 . g$120$23795) (string->utf16 . g$120$23794) (sint-list->bytevector . g$120$23793) (native-endianness . g$120$23792) (bytevector? . g$120$23791) (bytevector=? . g$120$23790) (bytevector-uint-set! . g$120$23789) (bytevector-uint-ref . g$120$23788) (bytevector-u8-set! . g$120$23787) (bytevector-u8-ref . g$120$23786) (bytevector-u64-set! . g$120$23785) (bytevector-u64-ref . g$120$23784) (bytevector-u64-native-set! . g$120$23783) (bytevector-u64-native-ref . g$120$23782) (bytevector-u32-set! . g$120$23781) (bytevector-u32-ref . g$120$23780) (bytevector-u32-native-set! . g$120$23779) (bytevector-u32-native-ref . g$120$23778) (bytevector-u16-set! . g$120$23777) (bytevector-u16-ref . g$120$23776) (bytevector-u16-native-set! . g$120$23775) (bytevector-u16-native-ref . g$120$23774) (bytevector-sint-set! . g$120$23773) (bytevector-sint-ref . g$120$23772) (bytevector-s8-set! . g$120$23771) (bytevector-s8-ref . g$120$23770) (bytevector-s64-set! . g$120$23769) (bytevector-s64-ref . g$120$23768) (bytevector-s64-native-set! . g$120$23767) (bytevector-s64-native-ref . g$120$23766) (bytevector-s32-set! . g$120$23765) (bytevector-s32-ref . g$120$23764) (bytevector-s32-native-set! . g$120$23763) (bytevector-s32-native-ref . g$120$23762) (bytevector-s16-set! . g$120$23761) (bytevector-s16-ref . g$120$23760) (bytevector-s16-native-set! . g$120$23759) (bytevector-s16-native-ref . g$120$23758) (bytevector-length . g$120$23757) (bytevector-ieee-single-ref . g$120$23756) (bytevector-ieee-single-native-set! . g$120$23755) (bytevector-ieee-single-native-ref . g$120$23754) (bytevector-ieee-double-ref . g$120$23753) (bytevector-ieee-double-native-set! . g$120$23752) (bytevector-ieee-double-native-ref . g$120$23751) (bytevector-fill! . g$120$23750) (bytevector-copy! . g$120$23749) (bytevector-copy . g$120$23748) (bytevector->uint-list . g$120$23747) (bytevector->u8-list . g$120$23746) (bytevector->sint-list . g$120$23745) (no-nans-violation? . g$120$23744) (no-infinities-violation? . g$120$23743) (make-no-nans-violation . g$120$23742) (make-no-infinities-violation . g$120$23741) (real->flonum . g$120$23740) (flzero? . g$120$23739) (fltruncate . g$120$23738) (fltan . g$120$23737) (flsqrt . g$120$23736) (flsin . g$120$23735) (flround . g$120$23734) (flpositive? . g$120$23733) (flonum? . g$120$23732) (flodd? . g$120$23731) (flnumerator . g$120$23730) (flnegative? . g$120$23729) (flnan? . g$120$23728) (flmod0 . g$120$23727) (flmod . g$120$23726) (flmin . g$120$23725) (flmax . g$120$23724) (fllog . g$120$23723) (flinteger? . g$120$23722) (flinfinite? . g$120$23721) (flfloor . g$120$23720) (flfinite? . g$120$23719) (flexpt . g$120$23718) (flexp . g$120$23717) (fleven? . g$120$23716) (fldiv0-and-mod0 . g$120$23715) (fldiv0 . g$120$23714) (fldiv-and-mod . g$120$23713) (fldiv . g$120$23712) (fldenominator . g$120$23711) (flcos . g$120$23710) (flceiling . g$120$23709) (flatan . g$120$23708) (flasin . g$120$23707) (flacos . g$120$23706) (flabs . g$120$23705) (fl>? . g$120$23704) (fl>=? . g$120$23703) (fl=? . g$120$23702) (fl<? . g$120$23701) (fl<=? . g$120$23700) (fl/ . g$120$23699) (fl- . g$120$23698) (fl+ . g$120$23697) (fl* . g$120$23696) (fixnum->flonum . g$120$23695) (fxzero? . g$120$23694) (fxxor . g$120$23693) (fxrotate-bit-field . g$120$23692) (fxreverse-bit-field . g$120$23691) (fxpositive? . g$120$23690) (fxodd? . g$120$23689) (fxnot . g$120$23688) (fxnegative? . g$120$23687) (fxmod0 . g$120$23686) (fxmod . g$120$23685) (fxmin . g$120$23684) (fxmax . g$120$23683) (fxlength . g$120$23682) (fxior . g$120$23681) (fxif . g$120$23680) (fxfirst-bit-set . g$120$23679) (fxeven? . g$120$23678) (fxdiv0-and-mod0 . g$120$23677) (fxdiv0 . g$120$23676) (fxdiv-and-mod . g$120$23675) (fxdiv . g$120$23674) (fxcopy-bit-field . g$120$23673) (fxcopy-bit . g$120$23672) (fxbit-set? . g$120$23671) (fxbit-field . g$120$23670) (fxbit-count . g$120$23669) (fxarithmetic-shift-right . g$120$23668) (fxarithmetic-shift-left . g$120$23667) (fxarithmetic-shift . g$120$23666) (fxand . g$120$23665) (fx>? . g$120$23664) (fx>=? . g$120$23663) (fx=? . g$120$23662) (fx<? . g$120$23661) (fx<=? . g$120$23660) (fx-/carry . g$120$23659) (fx- . g$120$23658) (fx+/carry . g$120$23657) (fx+ . g$120$23656) (fx*/carry . g$120$23655) (fx* . g$120$23654) (greatest-fixnum . g$120$23653) (least-fixnum . g$120$23652) (fixnum-width . g$120$23651) (fixnum? . g$120$23650) (bitwise-rotate-bit-field . g$120$23649) (bitwise-reverse-bit-field . g$120$23648) (bitwise-length . g$120$23647) (bitwise-if . g$120$23646) (bitwise-first-bit-set . g$120$23645) (bitwise-copy-bit-field . g$120$23644) (bitwise-copy-bit . g$120$23643) (bitwise-bit-set? . g$120$23642) (bitwise-bit-field . g$120$23641) (bitwise-bit-count . g$120$23640) (bitwise-xor . g$120$23639) (bitwise-ior . g$120$23638) (bitwise-and . g$120$23637) (bitwise-not . g$120$23636) (bitwise-arithmetic-shift-right . g$120$23635) (bitwise-arithmetic-shift-left . g$120$23634) (bitwise-arithmetic-shift . g$120$23633) (zero? . g$120$23632) (vector? . g$120$23631) (vector-set! . g$120$23630) (vector-ref . g$120$23629) (vector-map . g$120$23628) (vector-length . g$120$23627) (vector-for-each . g$120$23626) (vector-fill! . g$120$23625) (vector->list . g$120$23624) (vector . g$120$23623) (values . g$120$23622) (truncate . g$120$23621) (tan . g$120$23620) (symbol? . g$120$23619) (symbol=? . g$120$23618) (symbol->string . g$120$23617) (substring . g$120$23616) (string? . g$120$23615) (string>? . g$120$23614) (string>=? . g$120$23613) (string=? . g$120$23612) (string<? . g$120$23611) (string<=? . g$120$23610) (string-ref . g$120$23609) (string-length . g$120$23608) (string-for-each . g$120$23607) (string-copy . g$120$23606) (string-append . g$120$23605) (string->symbol . g$120$23604) (string->number . g$120$23603) (string->list . g$120$23602) (string . g$120$23601) (sqrt . g$120$23600) (sin . g$120$23599) (round . g$120$23598) (reverse . g$120$23597) (real? . g$120$23596) (real-valued? . g$120$23595) (real-part . g$120$23594) (rationalize . g$120$23593) (rational? . g$120$23592) (rational-valued? . g$120$23591) (procedure? . g$120$23590) (positive? . g$120$23589) (pair? . g$120$23588) (odd? . g$120$23587) (numerator . g$120$23586) (number? . g$120$23585) (number->string . g$120$23584) (null? . g$120$23583) (not . g$120$23582) (negative? . g$120$23581) (nan? . g$120$23580) (min . g$120$23579) (max . g$120$23578) (map . g$120$23577) (make-vector . g$120$23576) (make-string . g$120$23575) (make-rectangular . g$120$23574) (make-polar . g$120$23573) (magnitude . g$120$23572) (log . g$120$23571) (list? . g$120$23570) (list-tail . g$120$23569) (list-ref . g$120$23568) (list->vector . g$120$23567) (list->string . g$120$23566) (list . g$120$23565) (length . g$120$23564) (lcm . g$120$23563) (integer? . g$120$23562) (integer-valued? . g$120$23561) (integer->char . g$120$23560) (infinite? . g$120$23559) (inexact? . g$120$23558) (inexact . g$120$23557) (imag-part . g$120$23556) (gcd . g$120$23555) (for-each . g$120$23554) (floor . g$120$23553) (finite? . g$120$23552) (expt . g$120$23551) (exp . g$120$23550) (exact? . g$120$23549) (exact-integer-sqrt . g$120$23548) (exact . g$120$23547) (even? . g$120$23546) (error . g$120$23545) (eqv? . g$120$23544) (equal? . g$120$23543) (eq? . g$120$23542) (dynamic-wind . g$120$23541) (div0-and-mod0 . g$120$23540) (mod0 . g$120$23539) (div0 . g$120$23538) (div-and-mod . g$120$23537) (mod . g$120$23536) (div . g$120$23535) (denominator . g$120$23534) (cos . g$120$23533) (cons . g$120$23532) (complex? . g$120$23531) (char? . g$120$23530) (char>? . g$120$23529) (char>=? . g$120$23528) (char=? . g$120$23527) (char<? . g$120$23526) (char<=? . g$120$23525) (char->integer . g$120$23524) (ceiling . g$120$23523) (call-with-values . g$120$23522) (call/cc . g$120$23521) (call-with-current-continuation . g$120$23520) (cddddr . g$120$23519) (cdddar . g$120$23518) (cddadr . g$120$23517) (cddaar . g$120$23516) (cdaddr . g$120$23515) (cdadar . g$120$23514) (cdaadr . g$120$23513) (cdaaar . g$120$23512) (cadddr . g$120$23511) (caddar . g$120$23510) (cadadr . g$120$23509) (cadaar . g$120$23508) (caaddr . g$120$23507) (caadar . g$120$23506) (caaadr . g$120$23505) (caaaar . g$120$23504) (cdddr . g$120$23503) (cddar . g$120$23502) (cdadr . g$120$23501) (cdaar . g$120$23500) (caddr . g$120$23499) (cadar . g$120$23498) (caadr . g$120$23497) (caaar . g$120$23496) (cddr . g$120$23495) (cdar . g$120$23494) (cadr . g$120$23493) (caar . g$120$23492) (cdr . g$120$23491) (car . g$120$23490) (boolean? . g$120$23489) (boolean=? . g$120$23488) (atan . g$120$23487) (assertion-violation . g$120$23486) (asin . g$120$23485) (apply . g$120$23484) (append . g$120$23483) (angle . g$120$23482) (acos . g$120$23481) (abs . g$120$23480) (/ . g$120$23479) (* . g$120$23478) (- . g$120$23477) (+ . g$120$23476) (>= . g$120$23475) (> . g$120$23474) (= . g$120$23473) (<= . g$120$23472) (< . g$120$23471) (let*-values . g$120$23470) (&no-nans . g$120$23469) (&no-infinities . g$120$23468) (&i/o-encoding . g$120$23467) (&i/o-decoding . g$120$23466) (&i/o-port . g$120$23465) (&i/o-file-does-not-exist . g$120$23464) (&i/o-file-already-exists . g$120$23463) (&i/o-file-is-read-only . g$120$23462) (&i/o-file-protection . g$120$23461) (&i/o-filename . g$120$23460) (&i/o-invalid-position . g$120$23459) (&i/o-write . g$120$23458) (&i/o-read . g$120$23457) (&i/o . g$120$23456) (&undefined . g$120$23455) (&syntax . g$120$23454) (&lexical . g$120$23453) (&implementation . g$120$23452) (&non . g$120$23451) (&who . g$120$23450) (&irritants . g$120$23449) (&assertion . g$120$23448) (&violation . g$120$23447) (&error . g$120$23446) (&serious . g$120$23445) (&warning . g$120$23444) (&message . g$120$23443) (&condition . g$120$23442) (define-condition-type . g$120$23441) (define-enumeration . g$120$23440) (define-record-type . g$120$23439) (parent-rtd . g$120$23438) (nongenerative . g$120$23437) (opaque . g$120$23436) (sealed . g$120$23435) (protocol . g$120$23434) (parent . g$120$23433) (immutable . g$120$23432) (mutable . g$120$23431) (fields . g$120$23430) (error-handling-mode . g$120$23429) (file-options . g$120$23428) (buffer-mode . g$120$23427) (eol-style . g$120$23426) (guard . g$120$23425) (trace-define . g$120$23424) (trace-lambda . g$120$23423) (unsyntax-splicing . g$120$23422) (unsyntax . g$120$23421) (unquote-splicing . g$120$23420) (unquote . g$120$23419) (_ . g$120$23418) (else . g$120$23417) (=> . g$120$23416) (|...| . g$120$23415) (assert . g$120$23414) (endianness . g$120$23413) (delay . g$120$23412) (time . g$120$23411) (or . g$120$23410) (and . g$120$23409) (do . g$120$23408) (cond . g$120$23407) (let* . g$120$23406) (let . g$120$23405) (identifier-syntax . g$120$23404) (with-syntax . g$120$23403) (quasisyntax . g$120$23402) (quasiquote . g$120$23401) (syntax-rules . g$120$23400) (include . g$120$23399) (define-struct . g$120$23398) (record-constructor-descriptor . g$120$23397) (record-type-descriptor . g$120$23396) (let-values . g$120$23395) (case . g$120$23394) (parameterize . g$120$23393) (unless . g$120$23392) (when . g$120$23391) (if . g$120$23390) (letrec* . g$120$23389) (letrec . g$120$23388) (type-descriptor . g$120$23387) (case-lambda . g$120$23386) (lambda . g$120$23385) (syntax . g$120$23384) (syntax-case . g$120$23383) (quote . g$120$23382) (foreign-call . g$120$23381) (letrec-syntax . g$120$23380) (let-syntax . g$120$23379) (set! . g$120$23378) (import . g$120$23377) (begin . g$120$23376) (module . g$120$23375) (define-syntax . g$120$23374) (define . g$120$23373)) '((g$120$13702 core-prim . syntax-error) (g$120$13569 core-prim . syntax-dispatch) (g$120$24082 core-prim . pretty-print) (g$120$24081 core-prim . eval-core) (g$120$24080 core-prim . set-symbol-value!) (g$120$24079 core-prim . symbol-value) (g$120$24078 core-prim . gensym) (g$120$24077 core-prim . void) (g$120$24076 core-prim . load) (g$120$24075 core-prim . interaction-environment) (g$120$24074 core-prim . char-ready?) (g$120$24073 core-prim . string-upcase) (g$120$24072 core-prim . string-titlecase) (g$120$24071 core-prim . string-normalize-nfkd) (g$120$24070 core-prim . string-normalize-nfkc) (g$120$24069 core-prim . string-normalize-nfd) (g$120$24068 core-prim . string-normalize-nfc) (g$120$24067 core-prim . string-foldcase) (g$120$24066 core-prim . string-downcase) (g$120$24065 core-prim . string-ci>?) (g$120$24064 core-prim . string-ci>=?) (g$120$24063 core-prim . string-ci=?) (g$120$24062 core-prim . string-ci<?) (g$120$24061 core-prim . string-ci<=?) (g$120$24060 core-prim . char-whitespace?) (g$120$24059 core-prim . char-upper-case?) (g$120$24058 core-prim . char-title-case?) (g$120$24057 core-prim . char-numeric?) (g$120$24056 core-prim . char-lower-case?) (g$120$24055 core-prim . char-general-category) (g$120$24054 core-prim . char-upcase) (g$120$24053 core-prim . char-titlecase) (g$120$24052 core-prim . char-foldcase) (g$120$24051 core-prim . char-downcase) (g$120$24050 core-prim . char-ci>?) (g$120$24049 core-prim . char-ci>=?) (g$120$24048 core-prim . char-ci=?) (g$120$24047 core-prim . char-ci<?) (g$120$24046 core-prim . char-ci<=?) (g$120$24045 core-prim . char-alphabetic?) (g$120$13274 core-prim . make-variable-transformer) (g$120$13704 core-prim . identifier?) (g$120$13696 core-prim . generate-temporaries) (g$120$13698 core-prim . free-identifier=?) (g$120$13708 core-prim . syntax->datum) (g$120$13706 core-prim . datum->syntax) (g$120$13700 core-prim . bound-identifier=?) (g$120$24044 core-prim . record-type-descriptor?) (g$120$24043 core-prim . record-predicate) (g$120$24042 core-prim . record-mutator) (g$120$24041 core-prim . record-constructor) (g$120$24040 core-prim . record-accessor) (g$120$24039 core-prim . make-record-type-descriptor) (g$120$24038 core-prim . make-record-constructor-descriptor) (g$120$24037 core-prim . record?) (g$120$24036 core-prim . record-type-uid) (g$120$24035 core-prim . record-type-sealed?) (g$120$24034 core-prim . record-type-parent) (g$120$24033 core-prim . record-type-opaque?) (g$120$24032 core-prim . record-type-name) (g$120$24031 core-prim . record-type-generative?) (g$120$24030 core-prim . record-type-field-names) (g$120$24029 core-prim . record-rtd) (g$120$24028 core-prim . record-field-mutable?) (g$120$24027 core-prim . delete-file) (g$120$24026 core-prim . file-exists?) (g$120$24025 core-prim . vector-sort!) (g$120$24024 core-prim . vector-sort) (g$120$24023 core-prim . list-sort) (g$120$24022 core-prim . symbol-hash) (g$120$24021 core-prim . string-ci-hash) (g$120$24020 core-prim . string-hash) (g$120$24019 core-prim . equal-hash) (g$120$24018 core-prim . hashtable-equivalence-function) (g$120$24017 core-prim . make-hashtable) (g$120$24016 core-prim . hashtable-hash-function) (g$120$24015 core-prim . make-eqv-hashtable) (g$120$24014 core-prim . make-eq-hashtable) (g$120$24013 core-prim . hashtable?) (g$120$24012 core-prim . hashtable-update!) (g$120$24011 core-prim . hashtable-size) (g$120$24010 core-prim . hashtable-set!) (g$120$24009 core-prim . hashtable-ref) (g$120$24008 core-prim . hashtable-mutable?) (g$120$24007 core-prim . hashtable-keys) (g$120$24006 core-prim . hashtable-entries) (g$120$24005 core-prim . hashtable-delete!) (g$120$24004 core-prim . hashtable-copy) (g$120$24003 core-prim . hashtable-contains?) (g$120$24002 core-prim . hashtable-clear!) (g$120$24001 core-prim . call-with-output-file) (g$120$24000 core-prim . call-with-input-file) (g$120$23999 core-prim . write-char) (g$120$23998 core-prim . write) (g$120$23997 core-prim . with-output-to-file) (g$120$23996 core-prim . with-input-from-file) (g$120$23995 core-prim . read-char) (g$120$23994 core-prim . read) (g$120$23993 core-prim . peek-char) (g$120$23992 core-prim . open-output-file) (g$120$23991 core-prim . open-input-file) (g$120$23990 core-prim . newline) (g$120$23989 core-prim . display) (g$120$23988 core-prim . close-output-port) (g$120$23987 core-prim . close-input-port) (g$120$23986 core-prim . eof-object?) (g$120$23985 core-prim . eof-object) (g$120$23984 core-prim . current-error-port) (g$120$23983 core-prim . current-output-port) (g$120$23982 core-prim . current-input-port) (g$120$23981 core-prim . output-port?) (g$120$23980 core-prim . input-port?) (g$120$23979 core-prim . utf-8-codec) (g$120$23978 core-prim . utf-16-codec) (g$120$23977 core-prim . transcoder-error-handling-mode) (g$120$23976 core-prim . transcoder-eol-style) (g$120$23975 core-prim . transcoder-codec) (g$120$23974 core-prim . transcoded-port) (g$120$23973 core-prim . textual-port?) (g$120$23972 core-prim . string->bytevector) (g$120$23971 core-prim . standard-output-port) (g$120$23970 core-prim . standard-input-port) (g$120$23969 core-prim . standard-error-port) (g$120$23968 core-prim . set-port-position!) (g$120$23967 core-prim . put-u8) (g$120$23966 core-prim . put-string) (g$120$23965 core-prim . put-datum) (g$120$23964 core-prim . put-char) (g$120$23963 core-prim . put-bytevector) (g$120$23962 core-prim . port?) (g$120$23961 core-prim . port-transcoder) (g$120$23960 core-prim . port-position) (g$120$23959 core-prim . port-has-set-port-position!?) (g$120$23958 core-prim . port-has-port-position?) (g$120$23957 core-prim . port-eof?) (g$120$23956 core-prim . output-port-buffer-mode) (g$120$23955 core-prim . open-string-output-port) (g$120$23954 core-prim . open-string-input-port) (g$120$23953 core-prim . open-file-output-port) (g$120$23952 core-prim . open-file-input/output-port) (g$120$23951 core-prim . open-file-input-port) (g$120$23950 core-prim . open-bytevector-output-port) (g$120$23949 core-prim . open-bytevector-input-port) (g$120$23948 core-prim . native-transcoder) (g$120$23947 core-prim . native-eol-style) (g$120$23946 core-prim . make-transcoder) (g$120$23945 core-prim . latin-1-codec) (g$120$23944 core-prim . make-i/o-write-error) (g$120$23943 core-prim . make-i/o-read-error) (g$120$23942 core-prim . make-i/o-port-error) (g$120$23941 core-prim . make-i/o-invalid-position-error) (g$120$23940 core-prim . make-i/o-filename-error) (g$120$23939 core-prim . make-i/o-file-protection-error) (g$120$23938 core-prim . make-i/o-file-is-read-only-error) (g$120$23937 core-prim . make-i/o-file-does-not-exist-error) (g$120$23936 core-prim . make-i/o-file-already-exists-error) (g$120$23935 core-prim . make-i/o-error) (g$120$23934 core-prim . make-i/o-encoding-error) (g$120$23933 core-prim . make-i/o-decoding-error) (g$120$23932 core-prim . make-custom-textual-output-port) (g$120$23931 core-prim . make-custom-textual-input/output-port) (g$120$23930 core-prim . make-custom-textual-input-port) (g$120$23929 core-prim . make-custom-binary-output-port) (g$120$23928 core-prim . make-custom-binary-input/output-port) (g$120$23927 core-prim . make-custom-binary-input-port) (g$120$23926 core-prim . make-bytevector) (g$120$23925 core-prim . lookahead-u8) (g$120$23924 core-prim . lookahead-char) (g$120$23923 core-prim . i/o-write-error?) (g$120$23922 core-prim . i/o-read-error?) (g$120$23921 core-prim . i/o-port-error?) (g$120$23920 core-prim . i/o-invalid-position-error?) (g$120$23919 core-prim . i/o-filename-error?) (g$120$23918 core-prim . i/o-file-protection-error?) (g$120$23917 core-prim . i/o-file-is-read-only-error?) (g$120$23916 core-prim . i/o-file-does-not-exist-error?) (g$120$23915 core-prim . i/o-file-already-exists-error?) (g$120$23914 core-prim . i/o-error?) (g$120$23913 core-prim . i/o-error-port) (g$120$23912 core-prim . i/o-error-filename) (g$120$23911 core-prim . i/o-encoding-error?) (g$120$23910 core-prim . i/o-encoding-error-char) (g$120$23909 core-prim . i/o-decoding-error?) (g$120$23908 core-prim . get-u8) (g$120$23907 core-prim . get-string-n!) (g$120$23906 core-prim . get-string-n) (g$120$23905 core-prim . get-string-all) (g$120$23904 core-prim . get-line) (g$120$23903 core-prim . get-datum) (g$120$23902 core-prim . get-char) (g$120$23901 core-prim . get-bytevector-some) (g$120$23900 core-prim . get-bytevector-n!) (g$120$23899 core-prim . get-bytevector-n) (g$120$23898 core-prim . get-bytevector-all) (g$120$23897 core-prim . flush-output-port) (g$120$23896 core-prim . close-port) (g$120$23895 core-prim . scheme-report-environment) (g$120$23894 core-prim . quotient) (g$120$13676 core-prim . null-environment) (g$120$23893 core-prim . remainder) (g$120$23892 core-prim . modulo) (g$120$23891 core-prim . inexact->exact) (g$120$23890 core-prim . force) (g$120$23889 core-prim . exact->inexact) (g$120$23888 core-prim . exit) (g$120$23887 core-prim . command-line) (g$120$23886 core-prim . string-fill!) (g$120$23885 core-prim . string-set!) (g$120$23884 core-prim . set-cdr!) (g$120$23883 core-prim . set-car!) (g$120$23882 core-prim . remove) (g$120$23881 core-prim . remv) (g$120$23880 core-prim . remp) (g$120$23879 core-prim . remq) (g$120$23878 core-prim . partition) (g$120$23877 core-prim . memv) (g$120$23876 core-prim . memq) (g$120$23875 core-prim . memp) (g$120$23874 core-prim . member) (g$120$23873 core-prim . exists) (g$120$23872 core-prim . for-all) (g$120$23871 core-prim . fold-right) (g$120$23870 core-prim . fold-left) (g$120$23869 core-prim . find) (g$120$23868 core-prim . filter) (g$120$23867 core-prim . cons*) (g$120$23866 core-prim . assv) (g$120$23865 core-prim . assq) (g$120$23864 core-prim . assp) (g$120$23863 core-prim . assoc) (g$120$23862 core-prim . call-with-string-output-port) (g$120$23861 core-prim . call-with-port) (g$120$23860 core-prim . call-with-bytevector-output-port) (g$120$23859 core-prim . bytevector->string) (g$120$23858 core-prim . buffer-mode?) (g$120$23857 core-prim . binary-port?) (g$120$23856 core-prim . with-exception-handler) (g$120$23855 core-prim . raise-continuable) (g$120$23854 core-prim . raise) (g$120$13682 core-prim . eval) (g$120$13674 core-prim . environment) (g$120$23853 core-prim . make-enumeration) (g$120$23852 core-prim . enum-set=?) (g$120$23851 core-prim . enum-set-universe) (g$120$23850 core-prim . enum-set-union) (g$120$23849 core-prim . enum-set-subset?) (g$120$23848 core-prim . enum-set-projection) (g$120$23847 core-prim . enum-set-member?) (g$120$23846 core-prim . enum-set-intersection) (g$120$23845 core-prim . enum-set-indexer) (g$120$23844 core-prim . enum-set-difference) (g$120$23843 core-prim . enum-set-constructor) (g$120$23842 core-prim . enum-set-complement) (g$120$23841 core-prim . enum-set->list) (g$120$23840 core-prim . who-condition?) (g$120$23839 core-prim . warning?) (g$120$23838 core-prim . violation?) (g$120$23837 core-prim . undefined-violation?) (g$120$23836 core-prim . syntax-violation?) (g$120$23835 core-prim . syntax-violation-subform) (g$120$23834 core-prim . syntax-violation-form) (g$120$23833 core-prim . syntax-violation) (g$120$23832 core-prim . simple-conditions) (g$120$23831 core-prim . serious-condition?) (g$120$23830 core-prim . non-continuable-violation?) (g$120$23829 core-prim . &non-continuable) (g$120$23828 core-prim . message-condition?) (g$120$23827 core-prim . make-who-condition) (g$120$23826 core-prim . make-warning) (g$120$23825 core-prim . make-violation) (g$120$23824 core-prim . make-undefined-violation) (g$120$23823 core-prim . make-syntax-violation) (g$120$23822 core-prim . make-serious-condition) (g$120$23821 core-prim . make-non-continuable-violation) (g$120$23820 core-prim . make-message-condition) (g$120$23819 core-prim . make-lexical-violation) (g$120$23818 core-prim . make-irritants-condition) (g$120$23817 core-prim . make-implementation-restriction-violation) (g$120$23816 core-prim . make-error) (g$120$23815 core-prim . make-assertion-violation) (g$120$23814 core-prim . lexical-violation?) (g$120$23813 core-prim . irritants-condition?) (g$120$23812 core-prim . implementation-restriction-violation?) (g$120$23811 core-prim . &implementation-restriction) (g$120$23810 core-prim . error?) (g$120$23809 core-prim . condition-who) (g$120$23808 core-prim . condition-predicate) (g$120$23807 core-prim . condition-message) (g$120$23806 core-prim . condition-irritants) (g$120$23805 core-prim . condition-accessor) (g$120$23804 core-prim . condition) (g$120$23803 core-prim . assertion-violation?) (g$120$23802 core-prim . condition?) (g$120$23801 core-prim . utf32->string) (g$120$23800 core-prim . utf16->string) (g$120$23799 core-prim . utf8->string) (g$120$23798 core-prim . uint-list->bytevector) (g$120$23797 core-prim . u8-list->bytevector) (g$120$23796 core-prim . string->utf8) (g$120$23795 core-prim . string->utf32) (g$120$23794 core-prim . string->utf16) (g$120$23793 core-prim . sint-list->bytevector) (g$120$23792 core-prim . native-endianness) (g$120$23791 core-prim . bytevector?) (g$120$23790 core-prim . bytevector=?) (g$120$23789 core-prim . bytevector-uint-set!) (g$120$23788 core-prim . bytevector-uint-ref) (g$120$23787 core-prim . bytevector-u8-set!) (g$120$23786 core-prim . bytevector-u8-ref) (g$120$23785 core-prim . bytevector-u64-set!) (g$120$23784 core-prim . bytevector-u64-ref) (g$120$23783 core-prim . bytevector-u64-native-set!) (g$120$23782 core-prim . bytevector-u64-native-ref) (g$120$23781 core-prim . bytevector-u32-set!) (g$120$23780 core-prim . bytevector-u32-ref) (g$120$23779 core-prim . bytevector-u32-native-set!) (g$120$23778 core-prim . bytevector-u32-native-ref) (g$120$23777 core-prim . bytevector-u16-set!) (g$120$23776 core-prim . bytevector-u16-ref) (g$120$23775 core-prim . bytevector-u16-native-set!) (g$120$23774 core-prim . bytevector-u16-native-ref) (g$120$23773 core-prim . bytevector-sint-set!) (g$120$23772 core-prim . bytevector-sint-ref) (g$120$23771 core-prim . bytevector-s8-set!) (g$120$23770 core-prim . bytevector-s8-ref) (g$120$23769 core-prim . bytevector-s64-set!) (g$120$23768 core-prim . bytevector-s64-ref) (g$120$23767 core-prim . bytevector-s64-native-set!) (g$120$23766 core-prim . bytevector-s64-native-ref) (g$120$23765 core-prim . bytevector-s32-set!) (g$120$23764 core-prim . bytevector-s32-ref) (g$120$23763 core-prim . bytevector-s32-native-set!) (g$120$23762 core-prim . bytevector-s32-native-ref) (g$120$23761 core-prim . bytevector-s16-set!) (g$120$23760 core-prim . bytevector-s16-ref) (g$120$23759 core-prim . bytevector-s16-native-set!) (g$120$23758 core-prim . bytevector-s16-native-ref) (g$120$23757 core-prim . bytevector-length) (g$120$23756 core-prim . bytevector-ieee-single-ref) (g$120$23755 core-prim . bytevector-ieee-single-native-set!) (g$120$23754 core-prim . bytevector-ieee-single-native-ref) (g$120$23753 core-prim . bytevector-ieee-double-ref) (g$120$23752 core-prim . bytevector-ieee-double-native-set!) (g$120$23751 core-prim . bytevector-ieee-double-native-ref) (g$120$23750 core-prim . bytevector-fill!) (g$120$23749 core-prim . bytevector-copy!) (g$120$23748 core-prim . bytevector-copy) (g$120$23747 core-prim . bytevector->uint-list) (g$120$23746 core-prim . bytevector->u8-list) (g$120$23745 core-prim . bytevector->sint-list) (g$120$23744 core-prim . no-nans-violation?) (g$120$23743 core-prim . no-infinities-violation?) (g$120$23742 core-prim . make-no-nans-violation) (g$120$23741 core-prim . make-no-infinities-violation) (g$120$23740 core-prim . real->flonum) (g$120$23739 core-prim . flzero?) (g$120$23738 core-prim . fltruncate) (g$120$23737 core-prim . fltan) (g$120$23736 core-prim . flsqrt) (g$120$23735 core-prim . flsin) (g$120$23734 core-prim . flround) (g$120$23733 core-prim . flpositive?) (g$120$23732 core-prim . flonum?) (g$120$23731 core-prim . flodd?) (g$120$23730 core-prim . flnumerator) (g$120$23729 core-prim . flnegative?) (g$120$23728 core-prim . flnan?) (g$120$23727 core-prim . flmod0) (g$120$23726 core-prim . flmod) (g$120$23725 core-prim . flmin) (g$120$23724 core-prim . flmax) (g$120$23723 core-prim . fllog) (g$120$23722 core-prim . flinteger?) (g$120$23721 core-prim . flinfinite?) (g$120$23720 core-prim . flfloor) (g$120$23719 core-prim . flfinite?) (g$120$23718 core-prim . flexpt) (g$120$23717 core-prim . flexp) (g$120$23716 core-prim . fleven?) (g$120$23715 core-prim . fldiv0-and-mod0) (g$120$23714 core-prim . fldiv0) (g$120$23713 core-prim . fldiv-and-mod) (g$120$23712 core-prim . fldiv) (g$120$23711 core-prim . fldenominator) (g$120$23710 core-prim . flcos) (g$120$23709 core-prim . flceiling) (g$120$23708 core-prim . flatan) (g$120$23707 core-prim . flasin) (g$120$23706 core-prim . flacos) (g$120$23705 core-prim . flabs) (g$120$23704 core-prim . fl>?) (g$120$23703 core-prim . fl>=?) (g$120$23702 core-prim . fl=?) (g$120$23701 core-prim . fl<?) (g$120$23700 core-prim . fl<=?) (g$120$23699 core-prim . fl/) (g$120$23698 core-prim . fl-) (g$120$23697 core-prim . fl+) (g$120$23696 core-prim . fl*) (g$120$23695 core-prim . fixnum->flonum) (g$120$23694 core-prim . fxzero?) (g$120$23693 core-prim . fxxor) (g$120$23692 core-prim . fxrotate-bit-field) (g$120$23691 core-prim . fxreverse-bit-field) (g$120$23690 core-prim . fxpositive?) (g$120$23689 core-prim . fxodd?) (g$120$23688 core-prim . fxnot) (g$120$23687 core-prim . fxnegative?) (g$120$23686 core-prim . fxmod0) (g$120$23685 core-prim . fxmod) (g$120$23684 core-prim . fxmin) (g$120$23683 core-prim . fxmax) (g$120$23682 core-prim . fxlength) (g$120$23681 core-prim . fxior) (g$120$23680 core-prim . fxif) (g$120$23679 core-prim . fxfirst-bit-set) (g$120$23678 core-prim . fxeven?) (g$120$23677 core-prim . fxdiv0-and-mod0) (g$120$23676 core-prim . fxdiv0) (g$120$23675 core-prim . fxdiv-and-mod) (g$120$23674 core-prim . fxdiv) (g$120$23673 core-prim . fxcopy-bit-field) (g$120$23672 core-prim . fxcopy-bit) (g$120$23671 core-prim . fxbit-set?) (g$120$23670 core-prim . fxbit-field) (g$120$23669 core-prim . fxbit-count) (g$120$23668 core-prim . fxarithmetic-shift-right) (g$120$23667 core-prim . fxarithmetic-shift-left) (g$120$23666 core-prim . fxarithmetic-shift) (g$120$23665 core-prim . fxand) (g$120$23664 core-prim . fx>?) (g$120$23663 core-prim . fx>=?) (g$120$23662 core-prim . fx=?) (g$120$23661 core-prim . fx<?) (g$120$23660 core-prim . fx<=?) (g$120$23659 core-prim . fx-/carry) (g$120$23658 core-prim . fx-) (g$120$23657 core-prim . fx+/carry) (g$120$23656 core-prim . fx+) (g$120$23655 core-prim . fx*/carry) (g$120$23654 core-prim . fx*) (g$120$23653 core-prim . greatest-fixnum) (g$120$23652 core-prim . least-fixnum) (g$120$23651 core-prim . fixnum-width) (g$120$23650 core-prim . fixnum?) (g$120$23649 core-prim . bitwise-rotate-bit-field) (g$120$23648 core-prim . bitwise-reverse-bit-field) (g$120$23647 core-prim . bitwise-length) (g$120$23646 core-prim . bitwise-if) (g$120$23645 core-prim . bitwise-first-bit-set) (g$120$23644 core-prim . bitwise-copy-bit-field) (g$120$23643 core-prim . bitwise-copy-bit) (g$120$23642 core-prim . bitwise-bit-set?) (g$120$23641 core-prim . bitwise-bit-field) (g$120$23640 core-prim . bitwise-bit-count) (g$120$23639 core-prim . bitwise-xor) (g$120$23638 core-prim . bitwise-ior) (g$120$23637 core-prim . bitwise-and) (g$120$23636 core-prim . bitwise-not) (g$120$23635 core-prim . bitwise-arithmetic-shift-right) (g$120$23634 core-prim . bitwise-arithmetic-shift-left) (g$120$23633 core-prim . bitwise-arithmetic-shift) (g$120$23632 core-prim . zero?) (g$120$23631 core-prim . vector?) (g$120$23630 core-prim . vector-set!) (g$120$23629 core-prim . vector-ref) (g$120$23628 core-prim . vector-map) (g$120$23627 core-prim . vector-length) (g$120$23626 core-prim . vector-for-each) (g$120$23625 core-prim . vector-fill!) (g$120$23624 core-prim . vector->list) (g$120$23623 core-prim . vector) (g$120$23622 core-prim . values) (g$120$23621 core-prim . truncate) (g$120$23620 core-prim . tan) (g$120$23619 core-prim . symbol?) (g$120$23618 core-prim . symbol=?) (g$120$23617 core-prim . symbol->string) (g$120$23616 core-prim . substring) (g$120$23615 core-prim . string?) (g$120$23614 core-prim . string>?) (g$120$23613 core-prim . string>=?) (g$120$23612 core-prim . string=?) (g$120$23611 core-prim . string<?) (g$120$23610 core-prim . string<=?) (g$120$23609 core-prim . string-ref) (g$120$23608 core-prim . string-length) (g$120$23607 core-prim . string-for-each) (g$120$23606 core-prim . string-copy) (g$120$23605 core-prim . string-append) (g$120$23604 core-prim . string->symbol) (g$120$23603 core-prim . string->number) (g$120$23602 core-prim . string->list) (g$120$23601 core-prim . string) (g$120$23600 core-prim . sqrt) (g$120$23599 core-prim . sin) (g$120$23598 core-prim . round) (g$120$23597 core-prim . reverse) (g$120$23596 core-prim . real?) (g$120$23595 core-prim . real-valued?) (g$120$23594 core-prim . real-part) (g$120$23593 core-prim . rationalize) (g$120$23592 core-prim . rational?) (g$120$23591 core-prim . rational-valued?) (g$120$23590 core-prim . procedure?) (g$120$23589 core-prim . positive?) (g$120$23588 core-prim . pair?) (g$120$23587 core-prim . odd?) (g$120$23586 core-prim . numerator) (g$120$23585 core-prim . number?) (g$120$23584 core-prim . number->string) (g$120$23583 core-prim . null?) (g$120$23582 core-prim . not) (g$120$23581 core-prim . negative?) (g$120$23580 core-prim . nan?) (g$120$23579 core-prim . min) (g$120$23578 core-prim . max) (g$120$23577 core-prim . map) (g$120$23576 core-prim . make-vector) (g$120$23575 core-prim . make-string) (g$120$23574 core-prim . make-rectangular) (g$120$23573 core-prim . make-polar) (g$120$23572 core-prim . magnitude) (g$120$23571 core-prim . log) (g$120$23570 core-prim . list?) (g$120$23569 core-prim . list-tail) (g$120$23568 core-prim . list-ref) (g$120$23567 core-prim . list->vector) (g$120$23566 core-prim . list->string) (g$120$23565 core-prim . list) (g$120$23564 core-prim . length) (g$120$23563 core-prim . lcm) (g$120$23562 core-prim . integer?) (g$120$23561 core-prim . integer-valued?) (g$120$23560 core-prim . integer->char) (g$120$23559 core-prim . infinite?) (g$120$23558 core-prim . inexact?) (g$120$23557 core-prim . inexact) (g$120$23556 core-prim . imag-part) (g$120$23555 core-prim . gcd) (g$120$23554 core-prim . for-each) (g$120$23553 core-prim . floor) (g$120$23552 core-prim . finite?) (g$120$23551 core-prim . expt) (g$120$23550 core-prim . exp) (g$120$23549 core-prim . exact?) (g$120$23548 core-prim . exact-integer-sqrt) (g$120$23547 core-prim . exact) (g$120$23546 core-prim . even?) (g$120$23545 core-prim . error) (g$120$23544 core-prim . eqv?) (g$120$23543 core-prim . equal?) (g$120$23542 core-prim . eq?) (g$120$23541 core-prim . dynamic-wind) (g$120$23540 core-prim . div0-and-mod0) (g$120$23539 core-prim . mod0) (g$120$23538 core-prim . div0) (g$120$23537 core-prim . div-and-mod) (g$120$23536 core-prim . mod) (g$120$23535 core-prim . div) (g$120$23534 core-prim . denominator) (g$120$23533 core-prim . cos) (g$120$23532 core-prim . cons) (g$120$23531 core-prim . complex?) (g$120$23530 core-prim . char?) (g$120$23529 core-prim . char>?) (g$120$23528 core-prim . char>=?) (g$120$23527 core-prim . char=?) (g$120$23526 core-prim . char<?) (g$120$23525 core-prim . char<=?) (g$120$23524 core-prim . char->integer) (g$120$23523 core-prim . ceiling) (g$120$23522 core-prim . call-with-values) (g$120$23521 core-prim . call/cc) (g$120$23520 core-prim . call-with-current-continuation) (g$120$23519 core-prim . cddddr) (g$120$23518 core-prim . cdddar) (g$120$23517 core-prim . cddadr) (g$120$23516 core-prim . cddaar) (g$120$23515 core-prim . cdaddr) (g$120$23514 core-prim . cdadar) (g$120$23513 core-prim . cdaadr) (g$120$23512 core-prim . cdaaar) (g$120$23511 core-prim . cadddr) (g$120$23510 core-prim . caddar) (g$120$23509 core-prim . cadadr) (g$120$23508 core-prim . cadaar) (g$120$23507 core-prim . caaddr) (g$120$23506 core-prim . caadar) (g$120$23505 core-prim . caaadr) (g$120$23504 core-prim . caaaar) (g$120$23503 core-prim . cdddr) (g$120$23502 core-prim . cddar) (g$120$23501 core-prim . cdadr) (g$120$23500 core-prim . cdaar) (g$120$23499 core-prim . caddr) (g$120$23498 core-prim . cadar) (g$120$23497 core-prim . caadr) (g$120$23496 core-prim . caaar) (g$120$23495 core-prim . cddr) (g$120$23494 core-prim . cdar) (g$120$23493 core-prim . cadr) (g$120$23492 core-prim . caar) (g$120$23491 core-prim . cdr) (g$120$23490 core-prim . car) (g$120$23489 core-prim . boolean?) (g$120$23488 core-prim . boolean=?) (g$120$23487 core-prim . atan) (g$120$23486 core-prim . assertion-violation) (g$120$23485 core-prim . asin) (g$120$23484 core-prim . apply) (g$120$23483 core-prim . append) (g$120$23482 core-prim . angle) (g$120$23481 core-prim . acos) (g$120$23480 core-prim . abs) (g$120$23479 core-prim . /) (g$120$23478 core-prim . *) (g$120$23477 core-prim . -) (g$120$23476 core-prim . +) (g$120$23475 core-prim . >=) (g$120$23474 core-prim . >) (g$120$23473 core-prim . =) (g$120$23472 core-prim . <=) (g$120$23471 core-prim . <) (g$120$23470 core-prim . let*-values) (g$120$23469 $core-rtd &no-nans-rtd &no-nans-rcd) (g$120$23468 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$120$23467 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$120$23466 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$120$23465 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$120$23464 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$120$23463 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$120$23462 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$120$23461 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$120$23460 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$120$23459 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$120$23458 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$120$23457 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$120$23456 $core-rtd &i/o-rtd &i/o-rcd) (g$120$23455 $core-rtd &undefined-rtd &undefined-rcd) (g$120$23454 $core-rtd &syntax-rtd &syntax-rcd) (g$120$23453 $core-rtd &lexical-rtd &lexical-rcd) (g$120$23452 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$120$23451 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$120$23450 $core-rtd &who-rtd &who-rcd) (g$120$23449 $core-rtd &irritants-rtd &irritants-rcd) (g$120$23448 $core-rtd &assertion-rtd &assertion-rcd) (g$120$23447 $core-rtd &violation-rtd &violation-rcd) (g$120$23446 $core-rtd &error-rtd &error-rcd) (g$120$23445 $core-rtd &serious-rtd &serious-rcd) (g$120$23444 $core-rtd &warning-rtd &warning-rcd) (g$120$23443 $core-rtd &message-rtd &message-rcd) (g$120$23442 $core-rtd &condition-rtd &condition-rcd) (g$120$23441 macro . define-condition-type) (g$120$23440 macro . define-enumeration) (g$120$23439 macro . define-record-type) (g$120$23438 macro . parent-rtd) (g$120$23437 macro . nongenerative) (g$120$23436 macro . opaque) (g$120$23435 macro . sealed) (g$120$23434 macro . protocol) (g$120$23433 macro . parent) (g$120$23432 macro . immutable) (g$120$23431 macro . mutable) (g$120$23430 macro . fields) (g$120$23429 macro . error-handling-mode) (g$120$23428 macro . file-options) (g$120$23427 macro . buffer-mode) (g$120$23426 macro . eol-style) (g$120$23425 macro . guard) (g$120$23424 macro . trace-define) (g$120$23423 macro . trace-lambda) (g$120$23422 macro . unsyntax-splicing) (g$120$23421 macro . unsyntax) (g$120$23420 macro . unquote-splicing) (g$120$23419 macro . unquote) (g$120$23418 macro . _) (g$120$23417 macro . else) (g$120$23416 macro . =>) (g$120$23415 macro . |...|) (g$120$23414 macro . assert) (g$120$23413 macro . endianness) (g$120$23412 macro . delay) (g$120$23411 macro . time) (g$120$23410 macro . or) (g$120$23409 macro . and) (g$120$23408 macro . do) (g$120$23407 macro . cond) (g$120$23406 macro . let*) (g$120$23405 macro . let) (g$120$23404 macro . identifier-syntax) (g$120$23403 macro . with-syntax) (g$120$23402 macro . quasisyntax) (g$120$23401 macro . quasiquote) (g$120$23400 macro . syntax-rules) (g$120$23399 macro . include) (g$120$23398 macro . define-struct) (g$120$23397 core-macro . record-constructor-descriptor) (g$120$23396 core-macro . record-type-descriptor) (g$120$23395 core-macro . let-values) (g$120$23394 core-macro . case) (g$120$23393 core-macro . parameterize) (g$120$23392 core-macro . unless) (g$120$23391 core-macro . when) (g$120$23390 core-macro . if) (g$120$23389 core-macro . letrec*) (g$120$23388 core-macro . letrec) (g$120$23387 core-macro . type-descriptor) (g$120$23386 core-macro . case-lambda) (g$120$23385 core-macro . lambda) (g$120$23384 core-macro . syntax) (g$120$23383 core-macro . syntax-case) (g$120$23382 core-macro . quote) (g$120$23381 core-macro . foreign-call) (g$120$23380 letrec-syntax) (g$120$23379 let-syntax) (g$120$23378 set!) (g$120$23377 import) (g$120$23376 begin) (g$120$23375 module) (g$120$23374 define-syntax) (g$120$23373 define)) values values '#f) (g$120$12834 'g$120$24115 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . g$120$24082) (eval-core . g$120$24081) (set-symbol-value! . g$120$24080) (symbol-value . g$120$24079) (gensym . g$120$24078) (void . g$120$24077)) '() values values '#f))


;; (begin (define g$120$23371 '#f) ((lambda (g$120$23361) (begin (set! g$120$23361 (lambda (g$120$23363) ((lambda (g$120$23365) (g$120$23171 g$120$23365)) (with-input-from-file g$120$23363 (lambda () (letrec ((g$120$23367 (lambda () ((lambda (g$120$23369) (if (eof-object? g$120$23369) '() (cons g$120$23369 (g$120$23367)))) (read))))) (g$120$23367))))))) (set! g$120$23371 g$120$23361))) '#f))


