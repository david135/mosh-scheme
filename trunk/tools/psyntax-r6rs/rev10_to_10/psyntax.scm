;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (K5906@make-gensym-counter K5908@gen-sym-start K5910@gen-sym-counter K5912@gensym K5914@read-annotated K5916@annotation-stripped K5918@annotation? K5920@annotation-source K5922@annotation-expression K5924@scm->fasl K5926@fasl-save K5928@fasl-load K5930@serialize-library K5932@load-serialized-library K5934@make-record-printer K5936@compile-core K5938@read-library-source-file K5940@make-parameter K6040@file-options-spec) (begin (set! K5906@make-gensym-counter (lambda (K6041@i) ((lambda (K6044@inc) (begin (set! K6044@inc (lambda () (begin (set! K6041@i (+ K6041@i '1)) K6041@i))) K6044@inc)) '#f))) (set! K5908@gen-sym-start ((lambda (K6045@v) (if K6045@v (string->number K6045@v) '0)) (get-environment-variable '"MOSH_GENSYM_START"))) (set! K5910@gen-sym-counter (K5906@make-gensym-counter K5908@gen-sym-start)) (set! K5912@gensym (lambda K6047@x (string->symbol (if (null? K6047@x) (format '"K~a" (K5910@gen-sym-counter)) (format '"K~a@~a" (K5910@gen-sym-counter) (car K6047@x)))))) (set! K5914@read-annotated read) (set! K5916@annotation-stripped (lambda (K6049@x) (K5922@annotation-expression K6049@x))) (set! K5918@annotation? (lambda (K6051@x) (source-info K6051@x))) (set! K5920@annotation-source (lambda (K6053@x) (source-info K6053@x))) (set! K5922@annotation-expression (lambda (K6055@x) (if (pair? K6055@x) (cons (car K6055@x) (cdr K6055@x)) (display '"line:46\n")))) (set! K5924@scm->fasl (lambda (K6057@filename) (string-append K6057@filename '".fasl"))) (set! K5926@fasl-save (lambda (K6059@filename K6060@obj) (call-with-port (open-file-output-port K6059@filename) (lambda (K6063@port) ((symbol-value 'fasl-write!) K6060@obj K6063@port))))) (set! K5928@fasl-load (lambda (K6065@filename) (call-with-port (open-file-input-port K6065@filename) (symbol-value 'fasl-read!)))) (set! K5930@serialize-library (lambda (K6067@filename K6068@obj) (begin (format '#t '"serialize-library ~a\n..." K6067@filename) ((lambda (K6071@expanded2core) ((lambda (K6073@compile) ((lambda (K6075@code) ((lambda (K6077@pivot) ((lambda (K6079@visit) ((lambda () (begin (set-car! K6077@pivot K6079@visit) ((lambda (K6081@pivot) ((lambda (K6083@invoke) ((lambda () (set-car! K6081@pivot K6083@invoke)))) (K6073@compile (K6071@expanded2core (car K6081@pivot))))) (cdr K6077@pivot)))))) (K6073@compile (K6071@expanded2core (car K6077@pivot))))) (cddddr (cddddr K6075@code)))) K6068@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (K6085@fasl-file) (begin (if (file-exists? K6085@fasl-file) (delete-file K6085@fasl-file) (void)) ((call/cc (lambda (K6089@K6087) (lambda () (with-exception-handler (lambda (K6091@c) ((call/cc (lambda (K6093@K6088) (K6089@K6087 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " K6067@filename) (if (file-exists? K6085@fasl-file) (delete-file K6085@fasl-file) (void)) '#f) (K6093@K6088 (lambda () (raise-continuable K6091@c)))))))))) (lambda () (begin (K5926@fasl-save K6085@fasl-file K6068@obj) (display '"OK\n")))))))))) (K5924@scm->fasl K6067@filename))))) (set! K5932@load-serialized-library (lambda (K6095@filename K6096@obj) ((lambda (K6099@fasl-file) (if (and (file-exists? K6099@fasl-file) ((symbol-value 'file-newer?) K6099@fasl-file K6095@filename)) ((lambda (K6101@expanded2core) ((lambda (K6103@eval-compiled-core) ((lambda (K6105@code) ((lambda (K6107@pivot) ((lambda (K6109@visit) ((lambda (K6111@visit-proc) ((lambda () (begin (set-car! K6107@pivot K6111@visit-proc) ((lambda (K6113@pivot) ((lambda (K6115@invoke) ((lambda () (begin (set-car! K6113@pivot (lambda () (K6103@eval-compiled-core K6115@invoke))) (apply K6096@obj K6105@code))))) (car K6113@pivot))) (cdr K6107@pivot)) '#t)))) (lambda () (K6103@eval-compiled-core K6109@visit)))) (car K6107@pivot))) (cddddr (cddddr K6105@code)))) (K5928@fasl-load K6099@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (K5924@scm->fasl K6095@filename)))) (set! K5934@make-record-printer (lambda (K6117@name K6118@printer) (lambda K6121@x (begin (display '"record printer") (for-each display K6121@x))))) (set! K5936@compile-core (lambda K6123@x (apply error 'comile-core '"not implementated" K6123@x))) (set! K5938@read-library-source-file (lambda (K6125@file-name) (with-input-from-file K6125@file-name K5914@read-annotated))) (set! K5940@make-parameter (lambda K6141 ((lambda (K6142) (if (= K6142 '1) (apply (lambda (K6127@x) (K5940@make-parameter K6127@x (lambda (K6129@x) K6129@x))) K6141) (if (= K6142 '2) (apply (lambda (K6131@x K6132@fender) ((lambda (K6135@x) (lambda K6139 ((lambda (K6140) (if (= K6140 '0) (apply (lambda () K6135@x) K6139) (if (= K6140 '1) (apply (lambda (K6137@v) (set! K6135@x (K6132@fender K6137@v))) K6139) (error 'apply '"invalid arg count")))) (length K6139)))) (K6132@fender K6131@x))) K6141) (error 'apply '"invalid arg count")))) (length K6141)))) (set! K6040@file-options-spec (lambda (K6143@x) K6143@x)) (begin (set! K6163@K6040@file-options-spec K6040@file-options-spec) (set! K6162@K5940@make-parameter K5940@make-parameter) (set! K6161@K5938@read-library-source-file K5938@read-library-source-file) (set! K6160@K5936@compile-core K5936@compile-core) (set! K6159@K5934@make-record-printer K5934@make-record-printer) (set! K6158@K5932@load-serialized-library K5932@load-serialized-library) (set! K6157@K5930@serialize-library K5930@serialize-library) (set! K6156@K5928@fasl-load K5928@fasl-load) (set! K6155@K5926@fasl-save K5926@fasl-save) (set! K6154@K5924@scm->fasl K5924@scm->fasl) (set! K6153@K5922@annotation-expression K5922@annotation-expression) (set! K6152@K5920@annotation-source K5920@annotation-source) (set! K6151@K5918@annotation? K5918@annotation?) (set! K6150@K5916@annotation-stripped K5916@annotation-stripped) (set! K6149@K5914@read-annotated K5914@read-annotated) (set! K6148@K5912@gensym K5912@gensym) (set! K6147@K5910@gen-sym-counter K5910@gen-sym-counter) (set! K6146@K5908@gen-sym-start K5908@gen-sym-start) (set! K6145@K5906@make-gensym-counter K5906@make-gensym-counter)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (K6168@current-primitive-locations K6170@mutable? K6172@rewriter K6174@expanded->core K6176@compile-core-expr K6178@pretty-print K6180@compile-core-expr-to-port) (begin (set! K6168@current-primitive-locations (K6162@K5940@make-parameter (lambda (K6181@x) '#f) (lambda (K6183@p) K6183@p))) (set! K6170@mutable? (lambda (K6185@x) (or (pair? K6185@x) (vector? K6185@x) (hashtable? K6185@x)))) (set! K6172@rewriter (lambda (K6187@quote-hack?) ((lambda (K6190@f) (begin (set! K6190@f (lambda (K6191@x) (if (pair? K6191@x) ((lambda (K6193@t) (if (memv K6193@t '(quote)) (if (and K6187@quote-hack? (K6170@mutable? (cadr K6191@x))) ((lambda (K6195@g) (begin (set-symbol-value! K6195@g (cadr K6191@x)) K6195@g)) (K6148@K5912@gensym)) K6191@x) (if (memv K6193@t '(case-lambda)) (cons 'case-lambda (map (lambda (K6197@x) (cons (car K6197@x) (map K6190@f (cdr K6197@x)))) (cdr K6191@x))) (if (memv K6193@t '(lambda)) (cons* 'lambda (cadr K6191@x) (map K6190@f (cddr K6191@x))) (if (memv K6193@t '(letrec)) ((lambda (K6199@bindings K6200@body*) ((lambda (K6203@lhs* K6204@rhs*) (cons* 'letrec (map list K6203@lhs* (map K6190@f K6204@rhs*)) (map K6190@f K6200@body*))) (map car K6199@bindings) (map cadr K6199@bindings))) (cadr K6191@x) (cddr K6191@x)) (if (memv K6193@t '(letrec*)) ((lambda (K6207@bindings K6208@body*) ((lambda (K6211@lhs* K6212@rhs*) (cons* 'letrec* (map list K6211@lhs* (map K6190@f K6212@rhs*)) (map K6190@f K6208@body*))) (map car K6207@bindings) (map cadr K6207@bindings))) (cadr K6191@x) (cddr K6191@x)) (if (memv K6193@t '(library-letrec*)) ((lambda (K6215@name K6216@x) ((lambda (K6219@bindings K6220@body*) ((lambda (K6223@lhs* K6224@lhs** K6225@rhs*) (cons* 'library-letrec* K6215@name (map list K6223@lhs* K6224@lhs** (map K6190@f K6225@rhs*)) (map K6190@f K6220@body*))) (map car K6219@bindings) (map cadr K6219@bindings) (map caddr K6219@bindings))) (cadr K6216@x) (cddr K6216@x))) (cadr K6191@x) (cdr K6191@x)) (if (memv K6193@t '(begin)) (cons 'begin (map K6190@f (cdr K6191@x))) (if (memv K6193@t '(set!)) (list 'set! (cadr K6191@x) (K6190@f (caddr K6191@x))) (if (memv K6193@t '(primitive)) ((lambda (K6229@op) ((lambda (K6231@t) (if K6231@t ((lambda (K6233@loc) K6233@loc) K6231@t) K6229@op)) ((K6168@current-primitive-locations) K6229@op))) (cadr K6191@x)) (if (memv K6193@t '(define)) K6191@x (if (list? K6191@x) (map K6190@f K6191@x) (error 'rewrite '"invalid form ~s ~s" K6191@x (list? K6191@x)))))))))))))) (car K6191@x)) K6191@x))) K6190@f)) '#f))) (set! K6174@expanded->core (lambda (K6235@x) ((K6172@rewriter '#f) K6235@x))) (set! K6176@compile-core-expr (lambda (K6237@x) ((K6172@rewriter '#f) K6237@x))) (set! K6178@pretty-print write) (set! K6180@compile-core-expr-to-port (lambda (K6239@x K6240@p) (K6178@pretty-print ((K6172@rewriter '#f) K6239@x) K6240@p))) (begin (set! K6249@K6180@compile-core-expr-to-port K6180@compile-core-expr-to-port) (set! K6248@K6178@pretty-print K6178@pretty-print) (set! K6247@K6176@compile-core-expr K6176@compile-core-expr) (set! K6246@K6174@expanded->core K6174@expanded->core) (set! K6245@K6172@rewriter K6172@rewriter) (set! K6244@K6170@mutable? K6170@mutable?) (set! K6243@K6168@current-primitive-locations K6168@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (K6328@make-collection K6330@current-library-collection K6336@K6331 K6338@K6333 K6340@K6332 K6343@library? K6345@make-library K6347@library-id K6349@library-name K6351@library-version K6353@library-imp* K6355@library-vis* K6357@library-inv* K6359@library-subst K6361@library-env K6363@library-visit-state K6365@library-invoke-state K6367@library-visit-code K6369@library-invoke-code K6371@library-visible? K6373@library-source-file-name K6375@set-library-id! K6377@set-library-name! K6379@set-library-version! K6381@set-library-imp*! K6383@set-library-vis*! K6385@set-library-inv*! K6387@set-library-subst! K6389@set-library-env! K6391@set-library-visit-state! K6393@set-library-invoke-state! K6395@set-library-visit-code! K6397@set-library-invoke-code! K6399@set-library-visible?! K6401@set-library-source-file-name! K6403@rp K6405@find-dependencies K6407@find-library-by K6409@library-path K6411@library-extensions K6413@library-name->file-name K6415@file-locator K6417@serialize-all K6419@current-precompiled-library-loader K6421@try-load-from-file K6423@library-loader K6425@current-library-expander K6427@external-pending-libraries K6429@find-external-library K6431@find-library-by-name K6433@library-exists? K6435@find-library-by-spec/die K6437@label->binding-table K6439@install-library-record K6441@install-library K6443@imported-label->binding K6445@invoke-library K6447@visit-library K6449@invoke-library-by-spec K6451@installed-libraries K6453@library-spec) (begin (set! K6328@make-collection (lambda () ((lambda (K6454@set) ((lambda (K6457@set-cons) (begin (set! K6457@set-cons (lambda (K6462@x K6463@ls) (if (memq K6462@x K6463@ls) K6463@ls (cons K6462@x K6463@ls)))) (lambda K6460 ((lambda (K6461) (if (= K6461 '0) (apply (lambda () K6454@set) K6460) (if (= K6461 '1) (apply (lambda (K6458@x) (set! K6454@set (K6457@set-cons K6458@x K6454@set))) K6460) (error 'apply '"invalid arg count")))) (length K6460))))) '#f)) '()))) (set! K6330@current-library-collection (K6162@K5940@make-parameter (K6328@make-collection) (lambda (K6466@x) (begin (if (not (procedure? K6466@x)) (assertion-violation 'current-library-collection '"not a procedure" K6466@x) (void)) K6466@x)))) (set! K6336@K6331 (make-record-type-descriptor 'library '#f 'K6334 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! K6338@K6333 '#f) (set! K6340@K6332 (make-record-constructor-descriptor K6336@K6331 '#f K6338@K6333)) (set! K6343@library? (record-predicate K6336@K6331)) (set! K6345@make-library (record-constructor K6340@K6332)) (set! K6347@library-id (record-accessor K6336@K6331 '0)) (set! K6349@library-name (record-accessor K6336@K6331 '1)) (set! K6351@library-version (record-accessor K6336@K6331 '2)) (set! K6353@library-imp* (record-accessor K6336@K6331 '3)) (set! K6355@library-vis* (record-accessor K6336@K6331 '4)) (set! K6357@library-inv* (record-accessor K6336@K6331 '5)) (set! K6359@library-subst (record-accessor K6336@K6331 '6)) (set! K6361@library-env (record-accessor K6336@K6331 '7)) (set! K6363@library-visit-state (record-accessor K6336@K6331 '8)) (set! K6365@library-invoke-state (record-accessor K6336@K6331 '9)) (set! K6367@library-visit-code (record-accessor K6336@K6331 '10)) (set! K6369@library-invoke-code (record-accessor K6336@K6331 '11)) (set! K6371@library-visible? (record-accessor K6336@K6331 '12)) (set! K6373@library-source-file-name (record-accessor K6336@K6331 '13)) (set! K6375@set-library-id! (record-mutator K6336@K6331 '0)) (set! K6377@set-library-name! (record-mutator K6336@K6331 '1)) (set! K6379@set-library-version! (record-mutator K6336@K6331 '2)) (set! K6381@set-library-imp*! (record-mutator K6336@K6331 '3)) (set! K6383@set-library-vis*! (record-mutator K6336@K6331 '4)) (set! K6385@set-library-inv*! (record-mutator K6336@K6331 '5)) (set! K6387@set-library-subst! (record-mutator K6336@K6331 '6)) (set! K6389@set-library-env! (record-mutator K6336@K6331 '7)) (set! K6391@set-library-visit-state! (record-mutator K6336@K6331 '8)) (set! K6393@set-library-invoke-state! (record-mutator K6336@K6331 '9)) (set! K6395@set-library-visit-code! (record-mutator K6336@K6331 '10)) (set! K6397@set-library-invoke-code! (record-mutator K6336@K6331 '11)) (set! K6399@set-library-visible?! (record-mutator K6336@K6331 '12)) (set! K6401@set-library-source-file-name! (record-mutator K6336@K6331 '13)) (set! K6403@rp (K6159@K5934@make-record-printer 'library (lambda (K6468@x K6469@p K6470@wr) (begin (if (not (K6343@library? K6468@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (K6351@library-version K6468@x)) (K6349@library-name K6468@x) (append (K6349@library-name K6468@x) (list (K6351@library-version K6468@x))))) K6469@p))))) (set! K6405@find-dependencies (lambda (K6474@ls) (if (null? K6474@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! K6407@find-library-by (lambda (K6476@pred) ((letrec ((K6478@f (lambda (K6480@ls) (if (null? K6480@ls) '#f (if (K6476@pred (car K6480@ls)) (car K6480@ls) (K6478@f (cdr K6480@ls))))))) K6478@f) ((K6330@current-library-collection))))) (set! K6409@library-path (K6162@K5940@make-parameter '(".") (lambda (K6482@x) (if (and (list? K6482@x) (for-all string? K6482@x)) (map (lambda (K6484@x) K6484@x) K6482@x) (assertion-violation 'library-path '"not a list of strings" K6482@x))))) (set! K6411@library-extensions (K6162@K5940@make-parameter '(".sls" ".ss" ".scm") (lambda (K6486@x) (if (and (list? K6486@x) (for-all string? K6486@x)) (map (lambda (K6488@x) K6488@x) K6486@x) (assertion-violation 'library-extensions '"not a list of strings" K6486@x))))) (set! K6413@library-name->file-name (lambda (K6490@x) (call-with-values (lambda () (open-string-output-port)) (lambda (K6494@K6492@p K6495@K6493@extract) ((lambda (K6498@extract K6499@p) ((lambda (K6503@display-hex) (begin (set! K6503@display-hex (lambda (K6512@n) (if (<= '0 K6512@n '9) (display K6512@n K6499@p) (display (integer->char (+ (char->integer '#\a) (- K6512@n '10))) K6499@p)))) (begin ((letrec ((K6504@f (lambda (K6506@ls) (if (not (null? K6506@ls)) (begin (display '"/" K6499@p) (for-each (lambda (K6508@c) (if (or (char<=? '#\a K6508@c '#\z) (char<=? '#\A K6508@c '#\Z) (char<=? '#\0 K6508@c '#\9) (memv K6508@c '(#\- #\. #\_ #\~))) (display K6508@c K6499@p) (begin (display '"%" K6499@p) ((lambda (K6510@n) (begin (K6503@display-hex (quotient K6510@n '16)) (K6503@display-hex (remainder K6510@n '16)))) (char->integer K6508@c))))) (string->list (symbol->string (car K6506@ls)))) (K6504@f (cdr K6506@ls))) (void))))) K6504@f) K6490@x) (K6498@extract)))) '#f)) K6495@K6493@extract K6494@K6492@p))))) (set! K6415@file-locator (K6162@K5940@make-parameter (lambda (K6514@x) ((lambda (K6516@str) ((letrec ((K6518@f (lambda (K6520@ls K6521@exts K6522@failed-list) (if (null? K6520@ls) ((lambda () ((lambda (K6534@K6529 K6536@K6531 K6538@K6530 K6541@K6528 K6543@make-library-resolution-condition K6545@K6526 K6547@K6527 K6549@library-resolution-condition? K6551@condition-library K6553@condition-files) (begin (set! K6534@K6529 (make-record-type-descriptor '&library-resolution K15070@K14385@&condition-rtd 'K6532 '#f '#f '#((immutable library) (immutable files)))) (set! K6536@K6531 '#f) (set! K6538@K6530 (make-record-constructor-descriptor K6534@K6529 K15071@K14387@&condition-rcd K6536@K6531)) (set! K6541@K6528 (record-predicate K6534@K6529)) (set! K6543@make-library-resolution-condition (record-constructor K6538@K6530)) (set! K6545@K6526 (record-accessor K6534@K6529 '0)) (set! K6547@K6527 (record-accessor K6534@K6529 '1)) (set! K6549@library-resolution-condition? (condition-predicate K6534@K6529)) (set! K6551@condition-library (condition-accessor K6534@K6529 K6545@K6526)) (set! K6553@condition-files (condition-accessor K6534@K6529 K6547@K6527)) (raise (condition (K15102@K14535@make-error) (K15136@K14625@make-who-condition 'expander) (K15076@K14468@make-message-condition '"cannot locate library in library-path") (K6543@make-library-resolution-condition K6514@x (reverse K6522@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? K6521@exts) (K6518@f (cdr K6520@ls) (K6411@library-extensions) K6522@failed-list) ((lambda (K6554@name) (if (file-exists? K6554@name) K6554@name (K6518@f K6520@ls (cdr K6521@exts) (cons K6554@name K6522@failed-list)))) (string-append (car K6520@ls) K6516@str (car K6521@exts)))))))) K6518@f) (K6409@library-path) (K6411@library-extensions) '())) (K6413@library-name->file-name K6514@x))) (lambda (K6556@f) (if (procedure? K6556@f) K6556@f (assertion-violation 'file-locator '"not a procedure" K6556@f))))) (set! K6417@serialize-all (lambda (K6558@serialize K6559@compile) ((lambda (K6563@library-desc) (begin (set! K6563@library-desc (lambda (K6566@x) (list (K6347@library-id K6566@x) (K6349@library-name K6566@x)))) (for-each (lambda (K6564@x) (if (K6373@library-source-file-name K6564@x) (K6558@serialize (K6373@library-source-file-name K6564@x) (list (K6347@library-id K6564@x) (K6349@library-name K6564@x) (K6351@library-version K6564@x) (map K6563@library-desc (K6353@library-imp* K6564@x)) (map K6563@library-desc (K6355@library-vis* K6564@x)) (map K6563@library-desc (K6357@library-inv* K6564@x)) (K6359@library-subst K6564@x) (K6361@library-env K6564@x) (K6559@compile (K6367@library-visit-code K6564@x)) (K6559@compile (K6369@library-invoke-code K6564@x)) (K6371@library-visible? K6564@x))) (void))) ((K6330@current-library-collection))))) '#f))) (set! K6419@current-precompiled-library-loader (K6162@K5940@make-parameter (lambda (K6568@filename K6569@sk) '#f))) (set! K6421@try-load-from-file (lambda (K6572@filename) ((K6419@current-precompiled-library-loader) K6572@filename (lambda K6610 ((lambda (K6611) (if (= K6611 '11) (apply (lambda (K6574@id K6575@name K6576@ver K6577@imp* K6578@vis* K6579@inv* K6580@exp-subst K6581@exp-env K6582@visit-proc K6583@invoke-proc K6584@visible?) ((letrec ((K6596@f (lambda (K6598@deps) (if (null? K6598@deps) (begin (K6441@install-library K6574@id K6575@name K6576@ver K6577@imp* K6578@vis* K6579@inv* K6580@exp-subst K6581@exp-env K6582@visit-proc K6583@invoke-proc '#f '#f K6584@visible? '#f) '#t) ((lambda (K6600@d) ((lambda (K6602@label K6603@dname) ((lambda (K6606@l) (if (and (K6343@library? K6606@l) (eq? K6602@label (K6347@library-id K6606@l))) (K6596@f (cdr K6598@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" K6575@name K6603@dname K6572@filename K6606@l K6602@label (K6347@library-id K6606@l)) '#f))) (K6431@find-library-by-name K6603@dname))) (car K6600@d) (cadr K6600@d))) (car K6598@deps)))))) K6596@f) (append K6577@imp* K6578@vis* K6579@inv*))) K6610) (if (>= K6611 '0) (apply (lambda K6608@others '#f) K6610) (error 'apply '"invalid arg count")))) (length K6610)))))) (set! K6423@library-loader (K6162@K5940@make-parameter (lambda (K6612@x) ((lambda (K6614@file-name) (if (not K6614@file-name) (assertion-violation '#f '"cannot file library" K6612@x) (or (K6421@try-load-from-file K6614@file-name) ((K6425@current-library-expander) (K6161@K5938@read-library-source-file K6614@file-name) K6614@file-name (lambda (K6616@name) (if (not (fast-equal? K6616@name K6612@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (K6620@K6618@p K6621@K6619@e) ((lambda (K6624@e K6625@p) (begin (display '"expected to find library " K6625@p) (write K6612@x K6625@p) (display '" in file " K6625@p) (display K6614@file-name K6625@p) (display '", found " K6625@p) (write K6616@name K6625@p) (display '" instead" K6625@p) (K6624@e))) K6621@K6619@e K6620@K6618@p)))) (void))))))) ((K6415@file-locator) K6612@x))) (lambda (K6628@f) (if (procedure? K6628@f) K6628@f (assertion-violation 'library-locator '"not a procedure" K6628@f))))) (set! K6425@current-library-expander (K6162@K5940@make-parameter (lambda (K6630@x) (assertion-violation 'library-expander '"not initialized")) (lambda (K6632@f) (if (procedure? K6632@f) K6632@f (assertion-violation 'library-expander '"not a procedure" K6632@f))))) (set! K6427@external-pending-libraries (K6162@K5940@make-parameter '())) (set! K6429@find-external-library (lambda (K6634@name) (begin (if (member K6634@name (K6427@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" K6634@name) (void)) ((lambda (K6638@K6636@external-pending-libraries K6639@K6637@external-pending-libraries) ((lambda (K6642@swap) (dynamic-wind K6642@swap (lambda () (begin ((K6423@library-loader) K6634@name) (or (K6407@find-library-by (lambda (K6644@x) (fast-equal? (K6349@library-name K6644@x) K6634@name))) (assertion-violation '#f '"handling external library did not yield the correct library" K6634@name)))) K6642@swap)) (lambda () ((lambda (K6646@t) (begin (K6638@K6636@external-pending-libraries K6639@K6637@external-pending-libraries) (set! K6639@K6637@external-pending-libraries K6646@t))) (K6638@K6636@external-pending-libraries))))) K6427@external-pending-libraries (cons K6634@name (K6427@external-pending-libraries)))))) (set! K6431@find-library-by-name (lambda (K6648@name) (or (K6407@find-library-by (lambda (K6650@x) (fast-equal? (K6349@library-name K6650@x) K6648@name))) (K6429@find-external-library K6648@name)))) (set! K6433@library-exists? (lambda (K6652@name) (and (K6407@find-library-by (lambda (K6654@x) (fast-equal? (K6349@library-name K6654@x) K6652@name))) '#t))) (set! K6435@find-library-by-spec/die (lambda (K6656@spec) ((lambda (K6658@id) (or (K6407@find-library-by (lambda (K6660@x) (eq? K6658@id (K6347@library-id K6660@x)))) (assertion-violation '#f '"cannot find library with required spec" K6656@spec))) (car K6656@spec)))) (set! K6437@label->binding-table (make-eq-hashtable)) (set! K6439@install-library-record (lambda (K6662@lib) (begin ((lambda (K6664@exp-env) (for-each (lambda (K6666@x) ((lambda (K6668@label K6669@binding) ((lambda (K6672@binding) (begin (if (hashtable-ref K6437@label->binding-table K6668@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" K6668@label (hashtable-ref K6437@label->binding-table K6668@label '#f) K6672@binding) (exit)) (void)) (hashtable-set! K6437@label->binding-table K6668@label K6672@binding))) ((lambda (K6674@t) (if (memv K6674@t '(global)) (cons 'global (cons K6662@lib (cdr K6669@binding))) (if (memv K6674@t '(global-macro)) (cons 'global-macro (cons K6662@lib (cdr K6669@binding))) (if (memv K6674@t '(global-macro!)) (cons 'global-macro! (cons K6662@lib (cdr K6669@binding))) K6669@binding)))) (car K6669@binding)))) (car K6666@x) (cdr K6666@x))) K6664@exp-env)) (K6361@library-env K6662@lib)) ((K6330@current-library-collection) K6662@lib)))) (set! K6441@install-library (lambda (K6676@id K6677@name K6678@ver K6679@imp* K6680@vis* K6681@inv* K6682@exp-subst K6683@exp-env K6684@visit-proc K6685@invoke-proc K6686@visit-code K6687@invoke-code K6688@visible? K6689@source-file-name) ((lambda (K6704@imp-lib* K6705@vis-lib* K6706@inv-lib*) (begin (if (not (and (symbol? K6676@id) (list? K6677@name) (list? K6678@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" K6676@id K6677@name K6678@ver) (void)) (if (K6433@library-exists? K6677@name) (assertion-violation 'install-library '"library is already installed" K6677@name) (void)) ((lambda (K6710@lib) (K6439@install-library-record K6710@lib)) (K6345@make-library K6676@id K6677@name K6678@ver K6704@imp-lib* K6705@vis-lib* K6706@inv-lib* K6682@exp-subst K6683@exp-env K6684@visit-proc K6685@invoke-proc K6686@visit-code K6687@invoke-code K6688@visible? K6689@source-file-name)))) (map K6435@find-library-by-spec/die K6679@imp*) (map K6435@find-library-by-spec/die K6680@vis*) (map K6435@find-library-by-spec/die K6681@inv*)))) (set! K6443@imported-label->binding (lambda (K6712@lab) (hashtable-ref K6437@label->binding-table K6712@lab '#f))) (set! K6445@invoke-library (lambda (K6714@lib) ((lambda (K6716@invoke) (if (procedure? K6716@invoke) (begin (K6393@set-library-invoke-state! K6714@lib (lambda () (assertion-violation 'invoke '"circularity detected" K6714@lib))) (for-each K6445@invoke-library (K6357@library-inv* K6714@lib)) (K6393@set-library-invoke-state! K6714@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" K6714@lib))) (K6716@invoke) (K6393@set-library-invoke-state! K6714@lib '#t)) (void))) (K6365@library-invoke-state K6714@lib)))) (set! K6447@visit-library (lambda (K6718@lib) ((lambda (K6720@visit) (if (procedure? K6720@visit) (begin (K6391@set-library-visit-state! K6718@lib (lambda () (assertion-violation 'visit '"circularity detected" K6718@lib))) (for-each K6445@invoke-library (K6355@library-vis* K6718@lib)) (K6391@set-library-visit-state! K6718@lib (lambda () (assertion-violation 'invoke '"first visit did not return" K6718@lib))) (K6720@visit) (K6391@set-library-visit-state! K6718@lib '#t)) (void))) (K6363@library-visit-state K6718@lib)))) (set! K6449@invoke-library-by-spec (lambda (K6722@spec) (K6445@invoke-library (K6435@find-library-by-spec/die K6722@spec)))) (set! K6451@installed-libraries (lambda K6730 ((lambda (K6731) (if (= K6731 '1) (apply (lambda (K6724@all?) ((letrec ((K6726@f (lambda (K6728@ls) (if (null? K6728@ls) '() (if (or K6724@all? (K6371@library-visible? (car K6728@ls))) (cons (car K6728@ls) (K6726@f (cdr K6728@ls))) (K6726@f (cdr K6728@ls))))))) K6726@f) ((K6330@current-library-collection)))) K6730) (if (= K6731 '0) (apply (lambda () (K6451@installed-libraries '#f)) K6730) (error 'apply '"invalid arg count")))) (length K6730)))) (set! K6453@library-spec (lambda (K6732@x) (begin (if (not (K6343@library? K6732@x)) (assertion-violation 'library-spec '"not a library" K6732@x) (void)) (list (K6347@library-id K6732@x) (K6349@library-name K6732@x) (K6351@library-version K6732@x))))) (begin (set! K6794@K6453@library-spec K6453@library-spec) (set! K6793@K6451@installed-libraries K6451@installed-libraries) (set! K6792@K6449@invoke-library-by-spec K6449@invoke-library-by-spec) (set! K6791@K6447@visit-library K6447@visit-library) (set! K6790@K6445@invoke-library K6445@invoke-library) (set! K6789@K6443@imported-label->binding K6443@imported-label->binding) (set! K6788@K6441@install-library K6441@install-library) (set! K6787@K6439@install-library-record K6439@install-library-record) (set! K6786@K6437@label->binding-table K6437@label->binding-table) (set! K6785@K6435@find-library-by-spec/die K6435@find-library-by-spec/die) (set! K6784@K6433@library-exists? K6433@library-exists?) (set! K6783@K6431@find-library-by-name K6431@find-library-by-name) (set! K6782@K6429@find-external-library K6429@find-external-library) (set! K6781@K6427@external-pending-libraries K6427@external-pending-libraries) (set! K6780@K6425@current-library-expander K6425@current-library-expander) (set! K6779@K6423@library-loader K6423@library-loader) (set! K6778@K6421@try-load-from-file K6421@try-load-from-file) (set! K6777@K6419@current-precompiled-library-loader K6419@current-precompiled-library-loader) (set! K6776@K6417@serialize-all K6417@serialize-all) (set! K6775@K6415@file-locator K6415@file-locator) (set! K6774@K6413@library-name->file-name K6413@library-name->file-name) (set! K6773@K6411@library-extensions K6411@library-extensions) (set! K6772@K6409@library-path K6409@library-path) (set! K6771@K6407@find-library-by K6407@find-library-by) (set! K6770@K6405@find-dependencies K6405@find-dependencies) (set! K6769@K6403@rp K6403@rp) (set! K6768@K6401@set-library-source-file-name! K6401@set-library-source-file-name!) (set! K6767@K6399@set-library-visible?! K6399@set-library-visible?!) (set! K6766@K6397@set-library-invoke-code! K6397@set-library-invoke-code!) (set! K6765@K6395@set-library-visit-code! K6395@set-library-visit-code!) (set! K6764@K6393@set-library-invoke-state! K6393@set-library-invoke-state!) (set! K6763@K6391@set-library-visit-state! K6391@set-library-visit-state!) (set! K6762@K6389@set-library-env! K6389@set-library-env!) (set! K6761@K6387@set-library-subst! K6387@set-library-subst!) (set! K6760@K6385@set-library-inv*! K6385@set-library-inv*!) (set! K6759@K6383@set-library-vis*! K6383@set-library-vis*!) (set! K6758@K6381@set-library-imp*! K6381@set-library-imp*!) (set! K6757@K6379@set-library-version! K6379@set-library-version!) (set! K6756@K6377@set-library-name! K6377@set-library-name!) (set! K6755@K6375@set-library-id! K6375@set-library-id!) (set! K6754@K6373@library-source-file-name K6373@library-source-file-name) (set! K6753@K6371@library-visible? K6371@library-visible?) (set! K6752@K6369@library-invoke-code K6369@library-invoke-code) (set! K6751@K6367@library-visit-code K6367@library-visit-code) (set! K6750@K6365@library-invoke-state K6365@library-invoke-state) (set! K6749@K6363@library-visit-state K6363@library-visit-state) (set! K6748@K6361@library-env K6361@library-env) (set! K6747@K6359@library-subst K6359@library-subst) (set! K6746@K6357@library-inv* K6357@library-inv*) (set! K6745@K6355@library-vis* K6355@library-vis*) (set! K6744@K6353@library-imp* K6353@library-imp*) (set! K6743@K6351@library-version K6351@library-version) (set! K6742@K6349@library-name K6349@library-name) (set! K6741@K6347@library-id K6347@library-id) (set! K6740@K6345@make-library K6345@make-library) (set! K6739@K6343@library? K6343@library?) (set! K6738@K6340@K6332 K6340@K6332) (set! K6737@K6338@K6333 K6338@K6333) (set! K6736@K6336@K6331 K6336@K6331) (set! K6735@K6330@current-library-collection K6330@current-library-collection) (set! K6734@K6328@make-collection K6328@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (K6797@build-global-define K6910@build-lambda K6912@build-case-lambda K6914@build-let K6960@build-sequence K6962@build-void K6964@build-letrec K6966@build-letrec* K6968@build-library-letrec* K6970@build-receive) (begin (set! K6797@build-global-define (lambda (K6971@x) (K6962@build-void))) (set! K6910@build-lambda (lambda (K6973@ae K6974@vars K6975@exp) (list 'lambda K6974@vars K6975@exp))) (set! K6912@build-case-lambda (lambda (K6979@ae K6980@vars* K6981@exp*) ((lambda (K6986@build-error K6988@build-pred K6990@build-apply K6992@expand-case-lambda) (begin (set! K6986@build-error (lambda (K7039@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! K6988@build-pred (lambda (K7017@ae K7018@n K7019@vars) (call-with-values (lambda () ((letrec ((K7025@f (lambda (K7027@vars K7028@count) (if (pair? K7027@vars) (K7025@f (cdr K7027@vars) (+ K7028@count '1)) (if (null? K7027@vars) (values K7028@count '=) (values K7028@count '>=)))))) K7025@f) K7019@vars '0)) (lambda (K7031@K7023@count K7032@K7024@pred) ((lambda (K7035@pred K7036@count) (list (list 'primitive K7035@pred) K7018@n (list 'quote K7036@count))) K7032@K7024@pred K7031@K7023@count))))) (set! K6990@build-apply (lambda (K7009@ae K7010@g K7011@vars K7012@exp) (list '(primitive apply) (K6910@build-lambda K7009@ae K7011@vars K7012@exp) K7010@g))) (set! K6992@expand-case-lambda (lambda (K6993@ae K6994@vars K6995@exp*) ((lambda (K6999@g K7000@n) (list 'lambda K6999@g (K6914@build-let K6993@ae (list K7000@n) (list (list '(primitive length) K6999@g)) ((letrec ((K7003@f (lambda (K7005@vars* K7006@exp*) (if (null? K7005@vars*) (K6986@build-error K6993@ae) (list 'if (K6988@build-pred K6993@ae K7000@n (car K7005@vars*)) (K6990@build-apply K6993@ae K6999@g (car K7005@vars*) (car K7006@exp*)) (K7003@f (cdr K7005@vars*) (cdr K7006@exp*))))))) K7003@f) K6980@vars* K6995@exp*)))) (K6148@K5912@gensym) (K6148@K5912@gensym)))) (if (= (length K6981@exp*) '1) (K6910@build-lambda K6979@ae (car K6980@vars*) (car K6981@exp*)) (K6992@expand-case-lambda K6979@ae K6980@vars* K6981@exp*)))) '#f '#f '#f '#f))) (set! K6914@build-let (lambda (K7041@ae K7042@lhs* K7043@rhs* K7044@body) (cons (K6910@build-lambda K7041@ae K7042@lhs* K7044@body) K7043@rhs*))) (set! K6960@build-sequence (lambda (K7049@ae K7050@exps) ((letrec ((K7053@loop (lambda (K7055@exps) (if (null? (cdr K7055@exps)) (car K7055@exps) (if (equal? (car K7055@exps) (K6962@build-void)) (K7053@loop (cdr K7055@exps)) (cons 'begin K7055@exps)))))) K7053@loop) K7050@exps))) (set! K6962@build-void (lambda () '((primitive void)))) (set! K6964@build-letrec (lambda (K7057@ae K7058@vars K7059@val-exps K7060@body-exp) (if (null? K7058@vars) K7060@body-exp (list 'letrec (map list K7058@vars K7059@val-exps) K7060@body-exp)))) (set! K6966@build-letrec* (lambda (K7065@ae K7066@vars K7067@val-exps K7068@body-exp) (if (null? K7066@vars) K7068@body-exp (K6914@build-let K7065@ae K7066@vars (map (lambda (K7073@x) (list 'quote '#f)) K7066@vars) (K6960@build-sequence K7065@ae (append (map (lambda (K7075@lhs K7076@rhs) (list 'set! K7075@lhs K7076@rhs)) K7066@vars K7067@val-exps) (list K7068@body-exp))))))) (set! K6968@build-library-letrec* (lambda (K7079@ae K7080@name K7081@vars K7082@locs K7083@val-exps K7084@body-exp) (list 'library-letrec* K7080@name (map list K7081@vars K7082@locs K7083@val-exps) K7084@body-exp))) (set! K6970@build-receive (lambda (K7091@ae K7092@vars K7093@producer K7094@body*) (begin (display '"************** in ") (cons 'receive (cons K7092@vars (cons K7093@producer K7094@body*)))))) (begin (set! K7108@K6970@build-receive K6970@build-receive) (set! K7107@K6968@build-library-letrec* K6968@build-library-letrec*) (set! K7106@K6966@build-letrec* K6966@build-letrec*) (set! K7105@K6964@build-letrec K6964@build-letrec) (set! K7104@K6962@build-void K6962@build-void) (set! K7103@K6960@build-sequence K6960@build-sequence) (set! K7102@K6914@build-let K6914@build-let) (set! K7101@K6912@build-case-lambda K6912@build-case-lambda) (set! K7100@K6910@build-lambda K6910@build-lambda) (set! K7099@K6797@build-global-define K6797@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (K7123@file-options-macro K7125@set-cons K7127@set-union K7132@top-mark* K7134@top-marked? K7136@gen-lexical K7138@gen-global K7140@gen-label K7142@gen-top-level-label K7144@gen-define-label+loc K7146@gen-define-label K7152@K7147 K7154@K7149 K7156@K7148 K7159@rib? K7161@make-rib K7163@rib-sym* K7165@rib-mark** K7167@rib-label* K7169@rib-sealed/freq K7171@rib-cache K7173@set-rib-sym*! K7175@set-rib-mark**! K7177@set-rib-label*! K7179@set-rib-sealed/freq! K7181@set-rib-cache! K7183@make-empty-rib K7185@extend-rib! K7187@extend-rib/nc! K7189@make-rib-map K7191@seal-rib! K7193@unseal-rib! K7195@make-full-rib K7201@K7196 K7203@K7198 K7205@K7197 K7208@stx? K7210@make-stx K7212@stx-expr K7214@stx-mark* K7216@stx-subst* K7218@stx-ae* K7220@set-stx-expr! K7222@set-stx-mark*! K7224@set-stx-subst*! K7226@set-stx-ae*! K7228@rp K7230@datum->stx K7232@gen-mark K7234@anti-mark K7236@anti-mark? K7238@join-wraps K7240@mkstx K7242@add-mark K7244@add-subst K7246@syntax-kind? K7248@syntax-vector->list K7250@syntax-pair? K7252@syntax-vector? K7254@syntax-null? K7256@syntax-list? K7258@syntax-car K7260@syntax-cdr K7262@syntax->list K7264@id? K7266@id->sym K7268@same-marks? K7270@bound-id=? K7272@free-id=? K7274@valid-bound-ids? K7276@distinct-bound-ids? K7278@bound-id-member? K7280@self-evaluating? K7282@strip-annotations K7284@strip K7286@stx->datum K7288@same-marks*? K7290@id->label K7292@id->real-label K7294@label->binding K7296@make-binding K7298@binding-type K7300@binding-value K7302@raise-unbound-error K7304@syntax-type K7318@sanitize-binding K7320@make-variable-transformer K7322@variable-transformer? K7324@variable-transformer-procedure K7326@make-eval-transformer K7637@parse-define K7639@parse-define-syntax K7641@scheme-stx-hashtable K7643@scheme-stx K7645@lexical-var K7647@lexical-mutable? K7649@set-lexical-mutable! K7651@add-lexical K7653@add-lexicals K7655@letrec-helper K7657@letrec-transformer K7659@letrec*-transformer K7661@fluid-let-syntax-transformer K7663@type-descriptor-transformer K7665@record-type-descriptor-transformer K7667@record-constructor-descriptor-transformer K7669@when-macro K7671@unless-macro K7673@if-transformer K7675@and-transformer K7677@or-transformer K7679@case-macro K7681@quote-transformer K7683@case-lambda-transformer K7685@lambda-transformer K7687@bless K7689@with-syntax-macro K7691@invalid-fmls-error K7693@let-macro K7695@let-values-macro K7697@let*-values-macro K7699@trace-lambda-macro K7701@trace-define-macro K7703@trace-define-syntax-macro K7705@trace-let/rec-syntax K7707@trace-let-syntax-macro K7709@trace-letrec-syntax-macro K7711@guard-macro K7713@define-enumeration-macro K7715@time-macro K7717@delay-macro K7719@assert-macro K7721@endianness-macro K7723@identifier-syntax-macro K7725@do-macro K7727@let*-macro K7729@or-macro K7731@and-macro K7733@cond-macro K7735@do-include K7737@include-macro K7739@include-into-macro K7741@syntax-rules-macro K7743@quasiquote-macro K7745@quasisyntax-macro K7747@define-struct-macro K7749@define-record-type-macro K7751@define-condition-type-macro K7753@incorrect-usage-macro K7755@parameterize-macro K7757@foreign-call-transformer K7759@convert-pattern K7761@syntax-dispatch K7763@ellipsis? K7765@underscore? K7767@verify-literals K7769@syntax-case-transformer K7771@ellipsis-map K7773@syntax-transformer K7775@core-macro-transformer K7777@symbol-macro K7779@macro-transformer K7781@local-macro-transformer K7783@do-macro-call K7785@chi-macro K7787@chi-local-macro K7789@chi-global-macro K7791@chi-expr* K7793@chi-application K7795@chi-expr K7797@chi-set! K7799@verify-formals K7801@chi-lambda-clause K7803@chi-lambda-clause* K7805@chi-defun K7807@chi-rhs K7809@expand-interaction-rhs*/init* K7811@chi-rhs* K7813@find-bound=? K7815@find-dups K7817@chi-internal K7819@parse-module K7825@K7820 K7827@K7822 K7829@K7821 K7832@module-interface? K7834@make-module-interface K7836@module-interface-first-mark K7838@module-interface-exp-id-vec K7840@module-interface-exp-lab-vec K7842@set-module-interface-first-mark! K7844@set-module-interface-exp-id-vec! K7846@set-module-interface-exp-lab-vec! K7848@module-interface-exp-id* K7850@chi-internal-module K7852@chi-body* K7854@expand-transformer K7856@parse-exports K7858@parse-library-name K7860@parse-library K7862@parse-import-spec* K7864@make-top-rib K7866@make-collector K7868@inv-collector K7870@vis-collector K7872@imp-collector K7874@chi-library-internal K7876@chi-interaction-expr K7878@library-body-expander K7880@core-library-expander K7882@parse-top-level-program K7884@top-level-expander K7890@K7885 K7892@K7887 K7894@K7886 K7897@env? K7899@make-env K7901@env-names K7903@env-labels K7905@env-itc K7907@set-env-names! K7909@set-env-labels! K7911@set-env-itc! K7913@rp K7919@K7914 K7921@K7916 K7923@K7915 K7926@interaction-env? K7928@make-interaction-env K7930@interaction-env-rib K7932@interaction-env-r K7934@interaction-env-locs K7936@set-interaction-env-rib! K7938@set-interaction-env-r! K7940@set-interaction-env-locs! K7942@rp K7944@interaction-environment-symbols K7946@environment-bindings K7948@parse-binding K7950@environment? K7952@environment-symbols K7954@environment K7956@null-environment K7958@scheme-report-environment K7960@expand K7962@eval K7964@library-expander K7966@boot-library-expand K7968@rev-map-append K7970@build-exports K7972@make-export-subst K7974@make-export-env/macros K7976@generate-temporaries K7978@free-identifier=? K7980@bound-identifier=? K7982@make-source-condition K7984@extract-position-condition K7986@expression-position K7988@assertion-error K7990@syntax-error K7992@syntax-violation* K7994@syntax-violation K7996@identifier? K7998@datum->syntax K8000@syntax->datum K8002@compile-r6rs-top-level K8004@pre-compile-r6rs-top-level K8006@interaction-environment K8008@top-level-context) (begin (set! K7123@file-options-macro (lambda (K8009@x) ((lambda (K8012@valid-option?) (begin (set! K8012@valid-option? (lambda (K8021@x) (and (K7264@id? K8021@x) (memq (K7266@id->sym K8021@x) '(no-fail no-create no-truncate))))) ((lambda (K8013@t) ((lambda (K8015@ls/false) (if (and K8015@ls/false (apply (lambda (K8017@opt*) (for-all K8012@valid-option? K8017@opt*)) K8015@ls/false)) (apply (lambda (K8019@opt*) (K7687@bless (list 'make-file-options (list 'quote K8019@opt*)))) K8015@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8013@t))) (K7761@syntax-dispatch K8013@t '(_ . each-any)))) K8009@x))) '#f))) (set! K7125@set-cons (lambda (K8023@x K8024@ls) (if (memq K8023@x K8024@ls) K8024@ls (cons K8023@x K8024@ls)))) (set! K7127@set-union (lambda (K8027@ls1 K8028@ls2) (if (null? K8027@ls1) K8028@ls2 (if (memq (car K8027@ls1) K8028@ls2) (K7127@set-union (cdr K8027@ls1) K8028@ls2) (cons (car K8027@ls1) (K7127@set-union (cdr K8027@ls1) K8028@ls2)))))) (set! K7132@top-mark* '(top)) (set! K7134@top-marked? (lambda (K8031@m*) (memq 'top K8031@m*))) (set! K7136@gen-lexical (lambda (K8033@sym) (if (symbol? K8033@sym) (K6148@K5912@gensym K8033@sym) (if (K7208@stx? K8033@sym) (K7136@gen-lexical (K7266@id->sym K8033@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" K8033@sym))))) (set! K7138@gen-global (lambda (K8035@x) (K7136@gen-lexical K8035@x))) (set! K7140@gen-label (lambda (K8037@_) (K6148@K5912@gensym))) (set! K7142@gen-top-level-label (lambda (K8039@id K8040@rib) ((lambda (K8044@find) (begin (set! K8044@find (lambda (K8055@sym K8056@mark* K8057@sym* K8058@mark** K8059@label*) (and (pair? K8057@sym*) (if (and (eq? K8055@sym (car K8057@sym*)) (K7268@same-marks? K8056@mark* (car K8058@mark**))) (car K8059@label*) (K8044@find K8055@sym K8056@mark* (cdr K8057@sym*) (cdr K8058@mark**) (cdr K8059@label*)))))) ((lambda (K8045@sym K8046@mark*) ((lambda (K8049@sym*) ((lambda (K8051@t) (if K8051@t ((lambda (K8053@label) (if (K6789@K6443@imported-label->binding K8053@label) (K6148@K5912@gensym) K8053@label)) K8051@t) (K6148@K5912@gensym))) (and (memq K8045@sym (K7163@rib-sym* K8040@rib)) (K8044@find K8045@sym K8046@mark* K8049@sym* (K7165@rib-mark** K8040@rib) (K7167@rib-label* K8040@rib))))) (K7163@rib-sym* K8040@rib))) (K7266@id->sym K8039@id) (K7214@stx-mark* K8039@id)))) '#f))) (set! K7144@gen-define-label+loc (lambda (K8065@id K8066@rib) ((lambda (K8069@t) (if K8069@t ((lambda (K8071@env) ((lambda (K8073@label K8074@locs) (values K8073@label ((lambda (K8077@t) (if K8077@t (cdr K8077@t) ((lambda (K8079@loc) (begin (K7940@set-interaction-env-locs! K8071@env (cons (cons K8073@label K8079@loc) K8074@locs)) K8079@loc)) (K7136@gen-lexical K8065@id)))) (assq K8073@label K8074@locs)))) (K7142@gen-top-level-label K8065@id K8066@rib) (K7934@interaction-env-locs K8071@env))) K8069@t) (values (K6148@K5912@gensym) (K7136@gen-lexical K8065@id)))) (K8008@top-level-context)))) (set! K7146@gen-define-label (lambda (K8081@id K8082@rib) (if (K8008@top-level-context) (K7142@gen-top-level-label K8081@id K8082@rib) (K6148@K5912@gensym)))) (set! K7152@K7147 (make-record-type-descriptor 'rib '#f 'K7150 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! K7154@K7149 '#f) (set! K7156@K7148 (make-record-constructor-descriptor K7152@K7147 '#f K7154@K7149)) (set! K7159@rib? (record-predicate K7152@K7147)) (set! K7161@make-rib (record-constructor K7156@K7148)) (set! K7163@rib-sym* (record-accessor K7152@K7147 '0)) (set! K7165@rib-mark** (record-accessor K7152@K7147 '1)) (set! K7167@rib-label* (record-accessor K7152@K7147 '2)) (set! K7169@rib-sealed/freq (record-accessor K7152@K7147 '3)) (set! K7171@rib-cache (record-accessor K7152@K7147 '4)) (set! K7173@set-rib-sym*! (record-mutator K7152@K7147 '0)) (set! K7175@set-rib-mark**! (record-mutator K7152@K7147 '1)) (set! K7177@set-rib-label*! (record-mutator K7152@K7147 '2)) (set! K7179@set-rib-sealed/freq! (record-mutator K7152@K7147 '3)) (set! K7181@set-rib-cache! (record-mutator K7152@K7147 '4)) (set! K7183@make-empty-rib (lambda () (K7161@make-rib '() '() '() '#f '#f))) (set! K7185@extend-rib! (lambda (K8085@rib K8086@id K8087@label) ((lambda (K8092@find) (begin (set! K8092@find (lambda (K8105@sym K8106@mark* K8107@sym* K8108@mark** K8109@label*) (and (pair? K8107@sym*) (if (and (eq? K8105@sym (car K8107@sym*)) (K7268@same-marks? K8106@mark* (car K8108@mark**))) K8109@label* (K8092@find K8105@sym K8106@mark* (cdr K8107@sym*) (cdr K8108@mark**) (cdr K8109@label*)))))) (begin (if (K7169@rib-sealed/freq K8085@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" K8085@rib) (void)) ((lambda (K8093@sym K8094@mark*) ((lambda (K8097@sym*) ((lambda (K8099@t) (if K8099@t ((lambda (K8101@p) (if (not (eq? K8087@label (car K8101@p))) (if (K8008@top-level-context) (set-car! K8101@p K8087@label) (K7994@syntax-violation '#f '"multiple definitions of identifier" K8086@id)) (void))) K8099@t) (begin (if (K7171@rib-cache K8085@rib) (hashtable-update! (K7171@rib-cache K8085@rib) K8093@sym (lambda (K8103@e) (cons (cons K8094@mark* K8087@label) K8103@e)) '()) (void)) (K7173@set-rib-sym*! K8085@rib (cons K8093@sym K8097@sym*)) (K7175@set-rib-mark**! K8085@rib (cons K8094@mark* (K7165@rib-mark** K8085@rib))) (K7177@set-rib-label*! K8085@rib (cons K8087@label (K7167@rib-label* K8085@rib)))))) (and (memq K8093@sym (K7163@rib-sym* K8085@rib)) (K8092@find K8093@sym K8094@mark* K8097@sym* (K7165@rib-mark** K8085@rib) (K7167@rib-label* K8085@rib))))) (K7163@rib-sym* K8085@rib))) (K7266@id->sym K8086@id) (K7214@stx-mark* K8086@id))))) '#f))) (set! K7187@extend-rib/nc! (lambda (K8115@rib K8116@id K8117@label) ((lambda (K8121@sym K8122@mark*) ((lambda (K8125@sym*) (begin (if (K7171@rib-cache K8115@rib) (hashtable-update! (K7171@rib-cache K8115@rib) K8121@sym (lambda (K8127@e) (cons (cons K8122@mark* K8117@label) K8127@e)) '()) (void)) (K7173@set-rib-sym*! K8115@rib (cons K8121@sym K8125@sym*)) (K7175@set-rib-mark**! K8115@rib (cons K8122@mark* (K7165@rib-mark** K8115@rib))) (K7177@set-rib-label*! K8115@rib (cons K8117@label (K7167@rib-label* K8115@rib))))) (K7163@rib-sym* K8115@rib))) (K7266@id->sym K8116@id) (K7214@stx-mark* K8116@id)))) (set! K7189@make-rib-map (lambda (K8129@sym*) ((lambda (K8131@ht) ((letrec ((K8133@f (lambda (K8135@i K8136@sym*) (if (null? K8136@sym*) K8131@ht (begin (hashtable-update! K8131@ht (car K8136@sym*) (lambda (K8139@x) (cons K8135@i K8139@x)) '()) (K8133@f (+ K8135@i '1) (cdr K8136@sym*))))))) K8133@f) '0 K8129@sym*)) (make-eq-hashtable)))) (set! K7191@seal-rib! (lambda (K8141@rib) ((lambda (K8143@sym*) (if (not (null? K8143@sym*)) (begin (K7173@set-rib-sym*! K8141@rib (list->vector K8143@sym*)) (K7175@set-rib-mark**! K8141@rib (list->vector (K7165@rib-mark** K8141@rib))) (K7177@set-rib-label*! K8141@rib (list->vector (K7167@rib-label* K8141@rib))) (K7179@set-rib-sealed/freq! K8141@rib (K7189@make-rib-map K8143@sym*))) (void))) (K7163@rib-sym* K8141@rib)))) (set! K7193@unseal-rib! (lambda (K8145@rib) (if (K7169@rib-sealed/freq K8145@rib) (begin (K7179@set-rib-sealed/freq! K8145@rib '#f) (K7173@set-rib-sym*! K8145@rib (vector->list (K7163@rib-sym* K8145@rib))) (K7175@set-rib-mark**! K8145@rib (vector->list (K7165@rib-mark** K8145@rib))) (K7177@set-rib-label*! K8145@rib (vector->list (K7167@rib-label* K8145@rib)))) (void)))) (set! K7195@make-full-rib (lambda (K8147@id* K8148@label*) ((lambda (K8151@r) (begin (K7191@seal-rib! K8151@r) K8151@r)) (K7161@make-rib (map K7266@id->sym K8147@id*) (map K7214@stx-mark* K8147@id*) K8148@label* '#f '#f)))) (set! K7201@K7196 (make-record-type-descriptor 'stx '#f 'K7199 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! K7203@K7198 '#f) (set! K7205@K7197 (make-record-constructor-descriptor K7201@K7196 '#f K7203@K7198)) (set! K7208@stx? (record-predicate K7201@K7196)) (set! K7210@make-stx (record-constructor K7205@K7197)) (set! K7212@stx-expr (record-accessor K7201@K7196 '0)) (set! K7214@stx-mark* (record-accessor K7201@K7196 '1)) (set! K7216@stx-subst* (record-accessor K7201@K7196 '2)) (set! K7218@stx-ae* (record-accessor K7201@K7196 '3)) (set! K7220@set-stx-expr! (record-mutator K7201@K7196 '0)) (set! K7222@set-stx-mark*! (record-mutator K7201@K7196 '1)) (set! K7224@set-stx-subst*! (record-mutator K7201@K7196 '2)) (set! K7226@set-stx-ae*! (record-mutator K7201@K7196 '3)) (set! K7228@rp (K6159@K5934@make-record-printer 'stx (lambda (K8153@x K8154@p K8155@wr) (begin (display '"#<syntax " K8154@p) (write (K7286@stx->datum K8153@x) K8154@p) ((lambda (K8159@expr) (if (K6151@K5918@annotation? K8159@expr) ((lambda (K8161@src) (if (pair? K8161@src) (begin (display '" [" K8154@p) (display (cdr K8161@src) K8154@p) (display '" of " K8154@p) (display (car K8161@src) K8154@p) (display '"]" K8154@p)) (void))) (K6152@K5920@annotation-source K8159@expr)) (void))) (K7212@stx-expr K8153@x)) (display '">" K8154@p))))) (set! K7230@datum->stx (lambda (K8163@id K8164@datum) (K7210@make-stx K8164@datum (K7214@stx-mark* K8163@id) (K7216@stx-subst* K8163@id) (K7218@stx-ae* K8163@id)))) (set! K7232@gen-mark (lambda () (string '#\m))) (set! K7234@anti-mark '#f) (set! K7236@anti-mark? not) (set! K7238@join-wraps (lambda (K8167@m1* K8168@s1* K8169@ae1* K8170@e) ((lambda (K8176@cancel) (begin (set! K8176@cancel (lambda (K8183@ls1 K8184@ls2) ((letrec ((K8187@f (lambda (K8189@x K8190@ls1) (if (null? K8190@ls1) (cdr K8184@ls2) (cons K8189@x (K8187@f (car K8190@ls1) (cdr K8190@ls1))))))) K8187@f) (car K8183@ls1) (cdr K8183@ls1)))) ((lambda (K8177@m2* K8178@s2* K8179@ae2*) (if (and (not (null? K8167@m1*)) (not (null? K8177@m2*)) (K7236@anti-mark? (car K8177@m2*))) (values (K8176@cancel K8167@m1* K8177@m2*) (K8176@cancel K8168@s1* K8178@s2*) (K8176@cancel K8169@ae1* K8179@ae2*)) (values (append K8167@m1* K8177@m2*) (append K8168@s1* K8178@s2*) (append K8169@ae1* K8179@ae2*)))) (K7214@stx-mark* K8170@e) (K7216@stx-subst* K8170@e) (K7218@stx-ae* K8170@e)))) '#f))) (set! K7240@mkstx (lambda (K8193@e K8194@m* K8195@s* K8196@ae*) (if (and (K7208@stx? K8193@e) (not (K7134@top-marked? K8194@m*))) (call-with-values (lambda () (K7238@join-wraps K8194@m* K8195@s* K8196@ae* K8193@e)) (lambda (K8204@K8201@m* K8205@K8202@s* K8206@K8203@ae*) ((lambda (K8210@ae* K8211@s* K8212@m*) (K7210@make-stx (K7212@stx-expr K8193@e) K8212@m* K8211@s* K8210@ae*)) K8206@K8203@ae* K8205@K8202@s* K8204@K8201@m*))) (K7210@make-stx K8193@e K8194@m* K8195@s* K8196@ae*)))) (set! K7242@add-mark (lambda (K8216@m K8217@e K8218@ae) (K7240@mkstx K8217@e (list K8216@m) '(shift) (list K8218@ae)))) (set! K7244@add-subst (lambda (K8222@subst K8223@e) (K7240@mkstx K8223@e '() (list K8222@subst) '()))) (set! K7246@syntax-kind? (lambda (K8226@x K8227@p?) (if (K7208@stx? K8226@x) (K7246@syntax-kind? (K7212@stx-expr K8226@x) K8227@p?) (if (K6151@K5918@annotation? K8226@x) (K7246@syntax-kind? (K6153@K5922@annotation-expression K8226@x) K8227@p?) (K8227@p? K8226@x))))) (set! K7248@syntax-vector->list (lambda (K8230@x) (if (K7208@stx? K8230@x) ((lambda (K8232@ls K8233@m* K8234@s* K8235@ae*) (map (lambda (K8240@x) (K7240@mkstx K8240@x K8233@m* K8234@s* K8235@ae*)) K8232@ls)) (K7248@syntax-vector->list (K7212@stx-expr K8230@x)) (K7214@stx-mark* K8230@x) (K7216@stx-subst* K8230@x) (K7218@stx-ae* K8230@x)) (if (K6151@K5918@annotation? K8230@x) (K7248@syntax-vector->list (K6153@K5922@annotation-expression K8230@x)) (if (vector? K8230@x) (vector->list K8230@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" K8230@x)))))) (set! K7250@syntax-pair? (lambda (K8242@x) (K7246@syntax-kind? K8242@x pair?))) (set! K7252@syntax-vector? (lambda (K8244@x) (K7246@syntax-kind? K8244@x vector?))) (set! K7254@syntax-null? (lambda (K8246@x) (K7246@syntax-kind? K8246@x null?))) (set! K7256@syntax-list? (lambda (K8248@x) (or (K7254@syntax-null? K8248@x) (and (K7250@syntax-pair? K8248@x) (K7256@syntax-list? (K7260@syntax-cdr K8248@x)))))) (set! K7258@syntax-car (lambda (K8250@x) (if (K7208@stx? K8250@x) (K7240@mkstx (K7258@syntax-car (K7212@stx-expr K8250@x)) (K7214@stx-mark* K8250@x) (K7216@stx-subst* K8250@x) (K7218@stx-ae* K8250@x)) (if (K6151@K5918@annotation? K8250@x) (K7258@syntax-car (K6153@K5922@annotation-expression K8250@x)) (if (pair? K8250@x) (car K8250@x) (assertion-violation 'syntax-car '"BUG: not a pair" K8250@x)))))) (set! K7260@syntax-cdr (lambda (K8252@x) (if (K7208@stx? K8252@x) (K7240@mkstx (K7260@syntax-cdr (K7212@stx-expr K8252@x)) (K7214@stx-mark* K8252@x) (K7216@stx-subst* K8252@x) (K7218@stx-ae* K8252@x)) (if (K6151@K5918@annotation? K8252@x) (K7260@syntax-cdr (K6153@K5922@annotation-expression K8252@x)) (if (pair? K8252@x) (cdr K8252@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" K8252@x)))))) (set! K7262@syntax->list (lambda (K8254@x) (if (K7250@syntax-pair? K8254@x) (cons (K7258@syntax-car K8254@x) (K7262@syntax->list (K7260@syntax-cdr K8254@x))) (if (K7254@syntax-null? K8254@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" K8254@x))))) (set! K7264@id? (lambda (K8256@x) (and (K7208@stx? K8256@x) ((lambda (K8258@expr) (symbol? (if (K6151@K5918@annotation? K8258@expr) (K6150@K5916@annotation-stripped K8258@expr) K8258@expr))) (K7212@stx-expr K8256@x))))) (set! K7266@id->sym (lambda (K8260@x) (begin (if (not (K7208@stx? K8260@x)) (error 'id->sym '"BUG in ikarus: not an id" K8260@x) (void)) ((lambda (K8262@expr) ((lambda (K8264@sym) (if (symbol? K8264@sym) K8264@sym (error 'id->sym '"BUG in ikarus: not an id" K8260@x))) (if (K6151@K5918@annotation? K8262@expr) (K6150@K5916@annotation-stripped K8262@expr) K8262@expr))) (K7212@stx-expr K8260@x))))) (set! K7268@same-marks? (lambda (K8266@x K8267@y) (or (and (null? K8266@x) (null? K8267@y)) (and (pair? K8266@x) (pair? K8267@y) (eq? (car K8266@x) (car K8267@y)) (K7268@same-marks? (cdr K8266@x) (cdr K8267@y)))))) (set! K7270@bound-id=? (lambda (K8270@x K8271@y) (and (eq? (K7266@id->sym K8270@x) (K7266@id->sym K8271@y)) (K7268@same-marks? (K7214@stx-mark* K8270@x) (K7214@stx-mark* K8271@y))))) (set! K7272@free-id=? (lambda (K8274@i K8275@j) ((lambda (K8278@t0 K8279@t1) (if (or K8278@t0 K8279@t1) (eq? K8278@t0 K8279@t1) (eq? (K7266@id->sym K8274@i) (K7266@id->sym K8275@j)))) (K7292@id->real-label K8274@i) (K7292@id->real-label K8275@j)))) (set! K7274@valid-bound-ids? (lambda (K8282@id*) (and (for-all K7264@id? K8282@id*) (K7276@distinct-bound-ids? K8282@id*)))) (set! K7276@distinct-bound-ids? (lambda (K8284@id*) (or (null? K8284@id*) (and (not (K7278@bound-id-member? (car K8284@id*) (cdr K8284@id*))) (K7276@distinct-bound-ids? (cdr K8284@id*)))))) (set! K7278@bound-id-member? (lambda (K8286@id K8287@id*) (and (pair? K8287@id*) (or (K7270@bound-id=? K8286@id (car K8287@id*)) (K7278@bound-id-member? K8286@id (cdr K8287@id*)))))) (set! K7280@self-evaluating? (lambda (K8290@x) (or (number? K8290@x) (string? K8290@x) (char? K8290@x) (boolean? K8290@x) (regexp? K8290@x) (bytevector? K8290@x)))) (set! K7282@strip-annotations (lambda (K8292@x) (if (pair? K8292@x) (cons (K7282@strip-annotations (car K8292@x)) (K7282@strip-annotations (cdr K8292@x))) (if (vector? K8292@x) (vector-map K7282@strip-annotations K8292@x) (if (K6151@K5918@annotation? K8292@x) (K6150@K5916@annotation-stripped K8292@x) K8292@x))))) (set! K7284@strip (lambda (K8294@x K8295@m*) (if (K7134@top-marked? K8295@m*) (if (or (K6151@K5918@annotation? K8294@x) (and (pair? K8294@x) (K6151@K5918@annotation? (car K8294@x))) (and (vector? K8294@x) (> (vector-length K8294@x) '0) (K6151@K5918@annotation? (vector-ref K8294@x '0)))) (K7282@strip-annotations K8294@x) K8294@x) ((letrec ((K8298@f (lambda (K8300@x) (if (K7208@stx? K8300@x) (K7284@strip (K7212@stx-expr K8300@x) (K7214@stx-mark* K8300@x)) (if (K6151@K5918@annotation? K8300@x) (K6150@K5916@annotation-stripped K8300@x) (if (pair? K8300@x) ((lambda (K8302@a K8303@d) (if (and (eq? K8302@a (car K8300@x)) (eq? K8303@d (cdr K8300@x))) K8300@x (cons K8302@a K8303@d))) (K8298@f (car K8300@x)) (K8298@f (cdr K8300@x))) (if (vector? K8300@x) ((lambda (K8306@old) ((lambda (K8308@new) (if (for-all eq? K8306@old K8308@new) K8300@x (list->vector K8308@new))) (map K8298@f K8306@old))) (vector->list K8300@x)) K8300@x))))))) K8298@f) K8294@x)))) (set! K7286@stx->datum (lambda (K8310@x) (K7284@strip K8310@x '()))) (set! K7288@same-marks*? (lambda (K8312@mark* K8313@mark** K8314@si) (if (null? K8314@si) '#f (if (K7268@same-marks? K8312@mark* (vector-ref K8313@mark** (car K8314@si))) (car K8314@si) (K7288@same-marks*? K8312@mark* K8313@mark** (cdr K8314@si)))))) (set! K7290@id->label (lambda (K8318@id) (or (K7292@id->real-label K8318@id) ((lambda (K8320@t) (if K8320@t ((lambda (K8322@env) ((lambda (K8324@rib) (call-with-values (lambda () (K7144@gen-define-label+loc K8318@id K8324@rib)) (lambda (K8328@K8326@lab K8329@K8327@loc_) ((lambda (K8332@loc_ K8333@lab) (begin (K7185@extend-rib! K8324@rib K8318@id K8333@lab) K8333@lab)) K8329@K8327@loc_ K8328@K8326@lab)))) (K7930@interaction-env-rib K8322@env))) K8320@t) '#f)) (K8008@top-level-context))))) (set! K7292@id->real-label (lambda (K8336@id) ((lambda (K8338@sym) ((letrec ((K8340@search (lambda (K8342@subst* K8343@mark*) (if (null? K8342@subst*) '#f (if (eq? (car K8342@subst*) 'shift) (K8340@search (cdr K8342@subst*) (cdr K8343@mark*)) ((lambda (K8346@rib) ((lambda (K8348@t) (if K8348@t ((lambda (K8350@ht) ((lambda (K8352@si) ((lambda (K8354@i) (if K8354@i (vector-ref (K7167@rib-label* K8346@rib) K8354@i) (K8340@search (cdr K8342@subst*) K8343@mark*))) (and K8352@si (K7288@same-marks*? K8343@mark* (K7165@rib-mark** K8346@rib) (reverse K8352@si))))) (hashtable-ref K8350@ht K8338@sym '#f))) K8348@t) ((letrec ((K8356@f (lambda (K8358@sym* K8359@mark** K8360@label*) (if (null? K8358@sym*) (K8340@search (cdr K8342@subst*) K8343@mark*) (if (and (eq? (car K8358@sym*) K8338@sym) (K7268@same-marks? (car K8359@mark**) K8343@mark*)) (car K8360@label*) (K8356@f (cdr K8358@sym*) (cdr K8359@mark**) (cdr K8360@label*))))))) K8356@f) (K7163@rib-sym* K8346@rib) (K7165@rib-mark** K8346@rib) (K7167@rib-label* K8346@rib)))) (K7169@rib-sealed/freq K8346@rib))) (car K8342@subst*))))))) K8340@search) (K7216@stx-subst* K8336@id) (K7214@stx-mark* K8336@id))) (K7266@id->sym K8336@id)))) (set! K7294@label->binding (lambda (K8364@x K8365@r) ((lambda (K8368@t) (if K8368@t ((lambda (K8370@b) (if (and (pair? K8370@b) (eq? (car K8370@b) '$core-rtd)) (cons '$rtd (map K7687@bless (cdr K8370@b))) (if (and (pair? K8370@b) (eq? (car K8370@b) 'global-rtd)) ((lambda (K8372@lib K8373@loc) (cons '$rtd (symbol-value K8373@loc))) (cadr K8370@b) (cddr K8370@b)) K8370@b))) K8368@t) ((lambda (K8376@t) (if K8376@t (cdr K8376@t) ((lambda (K8378@t) (if K8378@t ((lambda (K8380@env) ((lambda (K8382@t) (if K8382@t ((lambda (K8384@p) (cons* 'lexical (cdr K8384@p) '#f)) K8382@t) '(displaced-lexical . #f))) (assq K8364@x (K7934@interaction-env-locs K8380@env)))) K8378@t) '(displaced-lexical . #f))) (K8008@top-level-context)))) (assq K8364@x K8365@r)))) (K6789@K6443@imported-label->binding K8364@x)))) (set! K7296@make-binding cons) (set! K7298@binding-type car) (set! K7300@binding-value cdr) (set! K7302@raise-unbound-error (lambda (K8386@id) (K7992@syntax-violation* '#f '"unbound identifier" K8386@id (K15182@K14744@make-undefined-violation)))) (set! K7304@syntax-type (lambda (K8388@e K8389@r) (if (K7264@id? K8388@e) ((lambda (K8392@id) ((lambda (K8394@label) ((lambda (K8396@b) ((lambda (K8398@type) ((lambda () (begin (if (not K8394@label) (K7302@raise-unbound-error K8392@id) (void)) ((lambda (K8400@t) (if (memv K8400@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values K8398@type (K7300@binding-value K8396@b) K8392@id) (values 'other '#f '#f))) K8398@type))))) (K7298@binding-type K8396@b))) (K7294@label->binding K8394@label K8389@r))) (K7290@id->label K8392@id))) K8388@e) (if (K7250@syntax-pair? K8388@e) ((lambda (K8402@id) (if (K7264@id? K8402@id) ((lambda (K8404@label) ((lambda (K8406@b) ((lambda (K8408@type) ((lambda () (begin (if (not K8404@label) (K7302@raise-unbound-error K8402@id) (void)) ((lambda (K8410@t) (if (memv K8410@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values K8408@type (K7300@binding-value K8406@b) K8402@id) (values 'call '#f '#f))) K8408@type))))) (K7298@binding-type K8406@b))) (K7294@label->binding K8404@label K8389@r))) (K7290@id->label K8402@id)) (values 'call '#f '#f))) (K7258@syntax-car K8388@e)) ((lambda (K8412@d) (if (K7280@self-evaluating? K8412@d) (values 'constant K8412@d '#f) (values 'other '#f '#f))) (K7286@stx->datum K8388@e)))))) (set! K7318@sanitize-binding (lambda (K8414@x K8415@src) (if (procedure? K8414@x) (cons* 'local-macro K8414@x K8415@src) (if (and (pair? K8414@x) (eq? (car K8414@x) 'macro!) (procedure? (cdr K8414@x))) (cons* 'local-macro! (cdr K8414@x) K8415@src) (if (and (pair? K8414@x) (eq? (car K8414@x) '$rtd)) K8414@x (assertion-violation 'expand '"invalid transformer" K8414@x)))))) (set! K7320@make-variable-transformer (lambda (K8418@x) (if (procedure? K8418@x) (cons 'macro! K8418@x) (assertion-violation 'make-variable-transformer '"not a procedure" K8418@x)))) (set! K7322@variable-transformer? (lambda (K8420@x) (and (pair? K8420@x) (eq? (car K8420@x) 'macro!) (procedure? (cdr K8420@x))))) (set! K7324@variable-transformer-procedure (lambda (K8422@x) (if (K7322@variable-transformer? K8422@x) (cdr K8422@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" K8422@x)))) (set! K7326@make-eval-transformer (lambda (K8424@x) (K7318@sanitize-binding (eval-core (K6246@K6174@expanded->core K8424@x)) K8424@x))) (set! K7637@parse-define (lambda (K8426@x) ((lambda (K8428@t) ((lambda (K8430@ls/false) (if (and K8430@ls/false (apply (lambda (K8432@id K8433@fmls K8434@b K8435@b*) (K7264@id? K8432@id)) K8430@ls/false)) (apply (lambda (K8440@id K8441@fmls K8442@b K8443@b*) (begin (K7799@verify-formals K8441@fmls K8426@x) (values K8440@id (cons 'defun (cons K8441@fmls (cons K8442@b K8443@b*)))))) K8430@ls/false) ((lambda (K8448@t) ((lambda (K8450@ls/false) (if (and K8450@ls/false (apply (lambda (K8452@id K8453@val) (K7264@id? K8452@id)) K8450@ls/false)) (apply (lambda (K8456@id K8457@val) (values K8456@id (cons 'expr K8457@val))) K8450@ls/false) ((lambda (K8460@t) ((lambda (K8462@ls/false) (if (and K8462@ls/false (apply (lambda (K8464@id) (K7264@id? K8464@id)) K8462@ls/false)) (apply (lambda (K8466@id) (values K8466@id (cons 'expr (K7687@bless '(void))))) K8462@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8460@t))) (K7761@syntax-dispatch K8460@t '(_ any)))) K8448@t))) (K7761@syntax-dispatch K8448@t '(_ any any)))) K8428@t))) (K7761@syntax-dispatch K8428@t '(_ (any . any) any . each-any)))) K8426@x))) (set! K7639@parse-define-syntax (lambda (K8468@x) ((lambda (K8470@t) ((lambda (K8472@ls/false) (if (and K8472@ls/false (apply (lambda (K8474@id K8475@val) (K7264@id? K8474@id)) K8472@ls/false)) (apply (lambda (K8478@id K8479@val) (values K8478@id K8479@val)) K8472@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8470@t))) (K7761@syntax-dispatch K8470@t '(_ any any)))) K8468@x))) (set! K7641@scheme-stx-hashtable (make-eq-hashtable)) (set! K7643@scheme-stx (lambda (K8482@sym) (or (hashtable-ref K7641@scheme-stx-hashtable K8482@sym '#f) ((lambda (K8484@subst) ((lambda (K8486@stx) ((lambda (K8488@stx) ((lambda () (begin (hashtable-set! K7641@scheme-stx-hashtable K8482@sym K8488@stx) K8488@stx)))) ((lambda (K8490@t) (if K8490@t ((lambda (K8492@x) ((lambda (K8494@name K8495@label) (K7244@add-subst (K7161@make-rib (list K8494@name) (list K7132@top-mark*) (list K8495@label) '#f '#f) K8486@stx)) (car K8492@x) (cdr K8492@x))) K8490@t) K8486@stx)) (assq K8482@sym K8484@subst)))) (K7210@make-stx K8482@sym K7132@top-mark* '() '()))) (K6747@K6359@library-subst (K6783@K6431@find-library-by-name '(psyntax system $all))))))) (set! K7645@lexical-var car) (set! K7647@lexical-mutable? cdr) (set! K7649@set-lexical-mutable! set-cdr!) (set! K7651@add-lexical (lambda (K8498@lab K8499@lex K8500@r) (cons (cons* K8498@lab 'lexical K8499@lex '#f) K8500@r))) (set! K7653@add-lexicals (lambda (K8504@lab* K8505@lex* K8506@r) (if (null? K8504@lab*) K8506@r (K7653@add-lexicals (cdr K8504@lab*) (cdr K8505@lex*) (K7651@add-lexical (car K8504@lab*) (car K8505@lex*) K8506@r))))) (set! K7655@letrec-helper (lambda (K8510@e K8511@r K8512@mr K8513@build) ((lambda (K8518@t) ((lambda (K8520@ls/false) (if K8520@ls/false (apply (lambda (K8522@lhs* K8523@rhs* K8524@b K8525@b*) (if (not (K7274@valid-bound-ids? K8522@lhs*)) (K7691@invalid-fmls-error K8510@e K8522@lhs*) ((lambda (K8530@lex* K8531@lab*) ((lambda (K8534@rib K8535@r) ((lambda (K8538@body K8539@rhs*) (K8513@build '#f K8530@lex* K8539@rhs* K8538@body)) (K7817@chi-internal (K7244@add-subst K8534@rib (cons K8524@b K8525@b*)) K8535@r K8512@mr) (K7791@chi-expr* (map (lambda (K8542@x) (K7244@add-subst K8534@rib K8542@x)) K8523@rhs*) K8535@r K8512@mr))) (K7195@make-full-rib K8522@lhs* K8531@lab*) (K7653@add-lexicals K8531@lab* K8530@lex* K8511@r))) (map K7136@gen-lexical K8522@lhs*) (map K7140@gen-label K8522@lhs*)))) K8520@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8518@t))) (K7761@syntax-dispatch K8518@t '(_ #(each (any any)) any . each-any)))) K8510@e))) (set! K7657@letrec-transformer (lambda (K8544@e K8545@r K8546@mr) (K7655@letrec-helper K8544@e K8545@r K8546@mr K7105@K6964@build-letrec))) (set! K7659@letrec*-transformer (lambda (K8550@e K8551@r K8552@mr) (K7655@letrec-helper K8550@e K8551@r K8552@mr K7106@K6966@build-letrec*))) (set! K7661@fluid-let-syntax-transformer (lambda (K8556@e K8557@r K8558@mr) ((lambda (K8563@lookup) (begin (set! K8563@lookup (lambda (K8582@x) (or (K7290@id->label K8582@x) (K7994@syntax-violation '#f '"unbound identifier" K8556@e K8582@x)))) ((lambda (K8564@t) ((lambda (K8566@ls/false) (if K8566@ls/false (apply (lambda (K8568@lhs* K8569@rhs* K8570@b K8571@b*) (if (not (K7274@valid-bound-ids? K8568@lhs*)) (K7691@invalid-fmls-error K8556@e K8568@lhs*) ((lambda (K8576@lab* K8577@rhs*) (K7817@chi-internal (cons K8570@b K8571@b*) (append (map cons K8576@lab* K8577@rhs*) K8557@r) (append (map cons K8576@lab* K8577@rhs*) K8558@mr))) (map K8563@lookup K8568@lhs*) (map (lambda (K8580@x) (K7326@make-eval-transformer (K7854@expand-transformer K8580@x K8558@mr))) K8569@rhs*)))) K8566@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8564@t))) (K7761@syntax-dispatch K8564@t '(_ #(each (any any)) any . each-any)))) K8556@e))) '#f))) (set! K7663@type-descriptor-transformer (lambda (K8584@e K8585@r K8586@mr) ((lambda (K8590@t) ((lambda (K8592@ls/false) (if (and K8592@ls/false (apply (lambda (K8594@id) (K7264@id? K8594@id)) K8592@ls/false)) (apply (lambda (K8596@id) ((lambda (K8598@lab) ((lambda (K8600@b) ((lambda (K8602@type) ((lambda () (begin (if (not K8598@lab) (K7302@raise-unbound-error K8596@id) (void)) (if (not (and (eq? K8602@type '$rtd) (not (list? (K7300@binding-value K8600@b))))) (K7994@syntax-violation '#f '"not a record type" K8584@e) (void)) (list 'quote (K7300@binding-value K8600@b)))))) (K7298@binding-type K8600@b))) (K7294@label->binding K8598@lab K8585@r))) (K7290@id->label K8596@id))) K8592@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8590@t))) (K7761@syntax-dispatch K8590@t '(_ any)))) K8584@e))) (set! K7665@record-type-descriptor-transformer (lambda (K8604@e K8605@r K8606@mr) ((lambda (K8610@t) ((lambda (K8612@ls/false) (if (and K8612@ls/false (apply (lambda (K8614@id) (K7264@id? K8614@id)) K8612@ls/false)) (apply (lambda (K8616@id) ((lambda (K8618@lab) ((lambda (K8620@b) ((lambda (K8622@type) ((lambda () (begin (if (not K8618@lab) (K7302@raise-unbound-error K8616@id) (void)) (if (not (and (eq? K8622@type '$rtd) (list? (K7300@binding-value K8620@b)))) (K7994@syntax-violation '#f '"not a record type" K8604@e) (void)) (K7795@chi-expr (car (K7300@binding-value K8620@b)) K8605@r K8606@mr))))) (K7298@binding-type K8620@b))) (K7294@label->binding K8618@lab K8605@r))) (K7290@id->label K8616@id))) K8612@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8610@t))) (K7761@syntax-dispatch K8610@t '(_ any)))) K8604@e))) (set! K7667@record-constructor-descriptor-transformer (lambda (K8624@e K8625@r K8626@mr) ((lambda (K8630@t) ((lambda (K8632@ls/false) (if (and K8632@ls/false (apply (lambda (K8634@id) (K7264@id? K8634@id)) K8632@ls/false)) (apply (lambda (K8636@id) ((lambda (K8638@lab) ((lambda (K8640@b) ((lambda (K8642@type) ((lambda () (begin (if (not K8638@lab) (K7302@raise-unbound-error K8636@id) (void)) (if (not (and (eq? K8642@type '$rtd) (list? (K7300@binding-value K8640@b)))) (K7994@syntax-violation '#f '"invalid type" K8624@e) (void)) (K7795@chi-expr (cadr (K7300@binding-value K8640@b)) K8625@r K8626@mr))))) (K7298@binding-type K8640@b))) (K7294@label->binding K8638@lab K8625@r))) (K7290@id->label K8636@id))) K8632@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8630@t))) (K7761@syntax-dispatch K8630@t '(_ any)))) K8624@e))) (set! K7669@when-macro (lambda (K8644@e) ((lambda (K8646@t) ((lambda (K8648@ls/false) (if K8648@ls/false (apply (lambda (K8650@test K8651@e K8652@e*) (K7687@bless (list 'if K8650@test (cons 'begin (cons K8651@e K8652@e*))))) K8648@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8646@t))) (K7761@syntax-dispatch K8646@t '(_ any any . each-any)))) K8644@e))) (set! K7671@unless-macro (lambda (K8656@e) ((lambda (K8658@t) ((lambda (K8660@ls/false) (if K8660@ls/false (apply (lambda (K8662@test K8663@e K8664@e*) (K7687@bless (list 'if (list 'not K8662@test) (cons 'begin (cons K8663@e K8664@e*))))) K8660@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8658@t))) (K7761@syntax-dispatch K8658@t '(_ any any . each-any)))) K8656@e))) (set! K7673@if-transformer (lambda (K8668@e K8669@r K8670@mr) ((lambda (K8674@t) ((lambda (K8676@ls/false) (if K8676@ls/false (apply (lambda (K8678@e0 K8679@e1 K8680@e2) (list 'if (K7795@chi-expr K8678@e0 K8669@r K8670@mr) (K7795@chi-expr K8679@e1 K8669@r K8670@mr) (K7795@chi-expr K8680@e2 K8669@r K8670@mr))) K8676@ls/false) ((lambda (K8684@t) ((lambda (K8686@ls/false) (if K8686@ls/false (apply (lambda (K8688@e0 K8689@e1) (list 'if (K7795@chi-expr K8688@e0 K8669@r K8670@mr) (K7795@chi-expr K8689@e1 K8669@r K8670@mr) (K7104@K6962@build-void))) K8686@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8684@t))) (K7761@syntax-dispatch K8684@t '(_ any any)))) K8674@t))) (K7761@syntax-dispatch K8674@t '(_ any any any)))) K8668@e))) (set! K7675@and-transformer (lambda (K8692@e K8693@r K8694@mr) ((lambda (K8698@t) ((lambda (K8700@ls/false) (if K8700@ls/false (apply (lambda (K8702@e*) (cons 'and (K7791@chi-expr* K8702@e* K8693@r K8694@mr))) K8700@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8698@t))) (K7761@syntax-dispatch K8698@t '(_ . each-any)))) K8692@e))) (set! K7677@or-transformer (lambda (K8704@e K8705@r K8706@mr) ((lambda (K8710@t) ((lambda (K8712@ls/false) (if K8712@ls/false (apply (lambda (K8714@e*) (cons 'or (K7791@chi-expr* K8714@e* K8705@r K8706@mr))) K8712@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8710@t))) (K7761@syntax-dispatch K8710@t '(_ . each-any)))) K8704@e))) (set! K7679@case-macro (lambda (K8716@e) ((lambda (K8719@build-last K8721@build-one) (begin (set! K8719@build-last (lambda (K8758@cls) ((lambda (K8760@t) ((lambda (K8762@ls/false) (if K8762@ls/false (apply (lambda (K8764@e K8765@e*) (cons 'begin (cons K8764@e K8765@e*))) K8762@ls/false) ((lambda (K8768@t) ((lambda (K8770@ls/false) (if K8770@ls/false (apply (lambda () (K8721@build-one K8758@cls '(if #f #f))) K8770@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8768@t))) (K7761@syntax-dispatch K8768@t '_))) K8760@t))) (K7761@syntax-dispatch K8760@t '(#(scheme-id else) any . each-any)))) K8758@cls))) (set! K8721@build-one (lambda (K8744@cls K8745@k) ((lambda (K8748@t) ((lambda (K8750@ls/false) (if K8750@ls/false (apply (lambda (K8752@d* K8753@e K8754@e*) (list 'if (list 'memv 't (list 'quote K8752@d*)) (cons 'begin (cons K8753@e K8754@e*)) K8745@k)) K8750@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8748@t))) (K7761@syntax-dispatch K8748@t '(each-any any . each-any)))) K8744@cls))) ((lambda (K8722@t) ((lambda (K8724@ls/false) (if K8724@ls/false (apply (lambda (K8726@expr) (K7687@bless (cons 'let (cons (list (list 't K8726@expr)) '((if #f #f)))))) K8724@ls/false) ((lambda (K8728@t) ((lambda (K8730@ls/false) (if K8730@ls/false (apply (lambda (K8732@expr K8733@cls K8734@cls*) (K7687@bless (list 'let (list (list 't K8732@expr)) ((letrec ((K8738@f (lambda (K8740@cls K8741@cls*) (if (null? K8741@cls*) (K8719@build-last K8740@cls) (K8721@build-one K8740@cls (K8738@f (car K8741@cls*) (cdr K8741@cls*))))))) K8738@f) K8733@cls K8734@cls*)))) K8730@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8728@t))) (K7761@syntax-dispatch K8728@t '(_ any any . each-any)))) K8722@t))) (K7761@syntax-dispatch K8722@t '(_ any)))) K8716@e))) '#f '#f))) (set! K7681@quote-transformer (lambda (K8772@e K8773@r K8774@mr) ((lambda (K8778@t) ((lambda (K8780@ls/false) (if K8780@ls/false (apply (lambda (K8782@datum) (list 'quote (K7286@stx->datum K8782@datum))) K8780@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8778@t))) (K7761@syntax-dispatch K8778@t '(_ any)))) K8772@e))) (set! K7683@case-lambda-transformer (lambda (K8784@e K8785@r K8786@mr) ((lambda (K8790@t) ((lambda (K8792@ls/false) (if K8792@ls/false (apply (lambda (K8794@fmls* K8795@b* K8796@b**) (call-with-values (lambda () (K7803@chi-lambda-clause* K8784@e K8794@fmls* (map cons K8795@b* K8796@b**) K8785@r K8786@mr)) (lambda (K8802@K8800@fmls* K8803@K8801@body*) ((lambda (K8806@body* K8807@fmls*) (K7101@K6912@build-case-lambda '#f K8807@fmls* K8806@body*)) K8803@K8801@body* K8802@K8800@fmls*)))) K8792@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8790@t))) (K7761@syntax-dispatch K8790@t '(_ . #(each (any any . each-any)))))) K8784@e))) (set! K7685@lambda-transformer (lambda (K8810@e K8811@r K8812@mr) ((lambda (K8816@t) ((lambda (K8818@ls/false) (if K8818@ls/false (apply (lambda (K8820@fmls K8821@b K8822@b*) (call-with-values (lambda () (K7801@chi-lambda-clause K8810@e K8820@fmls (cons K8821@b K8822@b*) K8811@r K8812@mr)) (lambda (K8828@K8826@fmls K8829@K8827@body) ((lambda (K8832@body K8833@fmls) (K7100@K6910@build-lambda '#f K8833@fmls K8832@body)) K8829@K8827@body K8828@K8826@fmls)))) K8818@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8816@t))) (K7761@syntax-dispatch K8816@t '(_ any any . each-any)))) K8810@e))) (set! K7687@bless (lambda (K8836@x) (K7240@mkstx ((letrec ((K8838@f (lambda (K8840@x) (if (K7208@stx? K8840@x) K8840@x (if (pair? K8840@x) (cons (K8838@f (car K8840@x)) (K8838@f (cdr K8840@x))) (if (symbol? K8840@x) (K7643@scheme-stx K8840@x) (if (vector? K8840@x) (vector-map K8838@f K8840@x) K8840@x))))))) K8838@f) K8836@x) '() '() '()))) (set! K7689@with-syntax-macro (lambda (K8842@e) ((lambda (K8844@t) ((lambda (K8846@ls/false) (if K8846@ls/false (apply (lambda (K8848@pat* K8849@expr* K8850@b K8851@b*) ((lambda (K8856@idn*) (begin (K7799@verify-formals (map car K8856@idn*) K8842@e) ((lambda (K8858@t*) (K7687@bless (list 'let (map list K8858@t* K8849@expr*) ((letrec ((K8860@f (lambda (K8862@pat* K8863@t*) (if (null? K8862@pat*) (cons 'begin (cons '#f (cons K8850@b K8851@b*))) (list 'syntax-case (car K8863@t*) '() (list (car K8862@pat*) (K8860@f (cdr K8862@pat*) (cdr K8863@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car K8862@pat*)) (car K8863@t*)))))))) K8860@f) K8848@pat* K8858@t*)))) (K7976@generate-temporaries K8849@expr*)))) ((letrec ((K8866@f (lambda (K8868@pat*) (if (null? K8868@pat*) '() (call-with-values (lambda () (K7759@convert-pattern (car K8868@pat*) '())) (lambda (K8872@K8870@pat K8873@K8871@idn*) ((lambda (K8876@idn* K8877@pat) (append K8876@idn* (K8866@f (cdr K8868@pat*)))) K8873@K8871@idn* K8872@K8870@pat))))))) K8866@f) K8848@pat*))) K8846@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8844@t))) (K7761@syntax-dispatch K8844@t '(_ #(each (any any)) any . each-any)))) K8842@e))) (set! K7691@invalid-fmls-error (lambda (K8880@stx K8881@fmls) ((lambda (K8884@t) ((lambda (K8886@ls/false) (if K8886@ls/false (apply (lambda (K8888@id* K8889@last) ((letrec ((K8892@f (lambda (K8894@id*) (if (null? K8894@id*) (values) (if (not (K7264@id? (car K8894@id*))) (K7994@syntax-violation '#f '"not an identifier" K8880@stx (car K8894@id*)) (begin (K8892@f (cdr K8894@id*)) (if (K7278@bound-id-member? (car K8894@id*) (cdr K8894@id*)) (K7994@syntax-violation '#f '"duplicate binding" K8880@stx (car K8894@id*)) (void)))))))) K8892@f) (if (K7264@id? K8889@last) (cons K8889@last K8888@id*) (if (K7254@syntax-null? K8889@last) K8888@id* (K7994@syntax-violation '#f '"not an identifier" K8880@stx K8889@last))))) K8886@ls/false) ((lambda (K8896@t) ((lambda (K8898@ls/false) (if K8898@ls/false (apply (lambda () (K7994@syntax-violation '#f '"malformed binding form" K8880@stx K8881@fmls)) K8898@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8896@t))) (K7761@syntax-dispatch K8896@t '_))) K8884@t))) (K7761@syntax-dispatch K8884@t '#(each+ any () any)))) K8881@fmls))) (set! K7693@let-macro (lambda (K8900@stx) ((lambda (K8902@t) ((lambda (K8904@ls/false) (if K8904@ls/false (apply (lambda (K8906@lhs* K8907@rhs* K8908@b K8909@b*) (if (K7274@valid-bound-ids? K8906@lhs*) (K7687@bless (cons (cons 'lambda (cons K8906@lhs* (cons K8908@b K8909@b*))) K8907@rhs*)) (K7691@invalid-fmls-error K8900@stx K8906@lhs*))) K8904@ls/false) ((lambda (K8914@t) ((lambda (K8916@ls/false) (if (and K8916@ls/false (apply (lambda (K8918@f K8919@lhs* K8920@rhs* K8921@b K8922@b*) (K7264@id? K8918@f)) K8916@ls/false)) (apply (lambda (K8928@f K8929@lhs* K8930@rhs* K8931@b K8932@b*) (if (K7274@valid-bound-ids? K8929@lhs*) (K7687@bless (cons (list 'letrec (list (list K8928@f (cons 'lambda (cons K8929@lhs* (cons K8931@b K8932@b*))))) K8928@f) K8930@rhs*)) (K7691@invalid-fmls-error K8900@stx K8929@lhs*))) K8916@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8914@t))) (K7761@syntax-dispatch K8914@t '(_ any #(each (any any)) any . each-any)))) K8902@t))) (K7761@syntax-dispatch K8902@t '(_ #(each (any any)) any . each-any)))) K8900@stx))) (set! K7695@let-values-macro (lambda (K8938@stx) ((lambda (K8941@rename K8943@rename*) (begin (set! K8941@rename (lambda (K9039@x K9040@old* K9041@new*) (begin (if (not (K7264@id? K9039@x)) (K7994@syntax-violation '#f '"not an indentifier" K8938@stx K9039@x) (void)) (if (K7278@bound-id-member? K9039@x K9040@old*) (K7994@syntax-violation '#f '"duplicate binding" K8938@stx K9039@x) (void)) ((lambda (K9045@y) (values K9045@y (cons K9039@x K9040@old*) (cons K9045@y K9041@new*))) (K6148@K5912@gensym (K8000@syntax->datum K9039@x)))))) (set! K8943@rename* (lambda (K9021@x* K9022@old* K9023@new*) (if (null? K9021@x*) (values '() K9022@old* K9023@new*) (call-with-values (lambda () (K8941@rename (car K9021@x*) K9022@old* K9023@new*)) (lambda (K9027@x K9028@old* K9029@new*) (call-with-values (lambda () (K8943@rename* (cdr K9021@x*) K9028@old* K9029@new*)) (lambda (K9033@x* K9034@old* K9035@new*) (values (cons K9027@x K9033@x*) K9034@old* K9035@new*)))))))) ((lambda (K8944@t) ((lambda (K8946@ls/false) (if K8946@ls/false (apply (lambda (K8948@b K8949@b*) (cons* (K7687@bless 'let) '() K8948@b K8949@b*)) K8946@ls/false) ((lambda (K8952@t) ((lambda (K8954@ls/false) (if K8954@ls/false (apply (lambda (K8956@lhs* K8957@rhs* K8958@b K8959@b*) (K7687@bless ((letrec ((K8964@f (lambda (K8966@lhs* K8967@rhs* K8968@old* K8969@new*) (if (null? K8966@lhs*) (cons 'let (cons (map list K8968@old* K8969@new*) (cons K8958@b K8959@b*))) ((lambda (K8974@t) ((lambda (K8976@ls/false) (if K8976@ls/false (apply (lambda (K8978@x*) (call-with-values (lambda () (K8943@rename* K8978@x* K8968@old* K8969@new*)) (lambda (K8983@K8980@y* K8984@K8981@old* K8985@K8982@new*) ((lambda (K8989@new* K8990@old* K8991@y*) (list 'call-with-values (list 'lambda '() (car K8967@rhs*)) (list 'lambda K8991@y* (K8964@f (cdr K8966@lhs*) (cdr K8967@rhs*) K8990@old* K8989@new*)))) K8985@K8982@new* K8984@K8981@old* K8983@K8980@y*)))) K8976@ls/false) ((lambda (K8995@t) ((lambda (K8997@ls/false) (if K8997@ls/false (apply (lambda (K8999@x* K9000@x) (call-with-values (lambda () (K8941@rename K9000@x K8968@old* K8969@new*)) (lambda (K9003@y K9004@old* K9005@new*) (call-with-values (lambda () (K8943@rename* K8999@x* K9004@old* K9005@new*)) (lambda (K9009@y* K9010@old* K9011@new*) (list 'call-with-values (list 'lambda '() (car K8967@rhs*)) (list 'lambda (append K9009@y* K9003@y) (K8964@f (cdr K8966@lhs*) (cdr K8967@rhs*) K9010@old* K9011@new*)))))))) K8997@ls/false) ((lambda (K9015@t) ((lambda (K9017@ls/false) (if K9017@ls/false (apply (lambda (K9019@others) (K7994@syntax-violation '#f '"malformed bindings" K8938@stx K9019@others)) K9017@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9015@t))) (K7761@syntax-dispatch K9015@t 'any))) K8995@t))) (K7761@syntax-dispatch K8995@t '#(each+ any () any)))) K8974@t))) (K7761@syntax-dispatch K8974@t 'each-any))) (car K8966@lhs*)))))) K8964@f) K8956@lhs* K8957@rhs* '() '()))) K8954@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K8952@t))) (K7761@syntax-dispatch K8952@t '(_ #(each (any any)) any . each-any)))) K8944@t))) (K7761@syntax-dispatch K8944@t '(_ () any . each-any)))) K8938@stx))) '#f '#f))) (set! K7697@let*-values-macro (lambda (K9047@stx) ((lambda (K9050@check) (begin (set! K9050@check (lambda (K9097@x*) (if (not (null? K9097@x*)) ((lambda (K9099@x) (begin (if (not (K7264@id? K9099@x)) (K7994@syntax-violation '#f '"not an identifier" K9047@stx K9099@x) (void)) (K9050@check (cdr K9097@x*)) (if (K7278@bound-id-member? K9099@x (cdr K9097@x*)) (K7994@syntax-violation '#f '"duplicate identifier" K9047@stx K9099@x) (void)))) (car K9097@x*)) (void)))) ((lambda (K9051@t) ((lambda (K9053@ls/false) (if K9053@ls/false (apply (lambda (K9055@b K9056@b*) (cons* (K7687@bless 'let) '() K9055@b K9056@b*)) K9053@ls/false) ((lambda (K9059@t) ((lambda (K9061@ls/false) (if K9061@ls/false (apply (lambda (K9063@lhs* K9064@rhs* K9065@b K9066@b*) (K7687@bless ((letrec ((K9071@f (lambda (K9073@lhs* K9074@rhs*) (if (null? K9073@lhs*) (cons 'begin (cons K9065@b K9066@b*)) ((lambda (K9077@t) ((lambda (K9079@ls/false) (if K9079@ls/false (apply (lambda (K9081@x*) (begin (K9050@check K9081@x*) (list 'call-with-values (list 'lambda '() (car K9074@rhs*)) (list 'lambda K9081@x* (K9071@f (cdr K9073@lhs*) (cdr K9074@rhs*)))))) K9079@ls/false) ((lambda (K9083@t) ((lambda (K9085@ls/false) (if K9085@ls/false (apply (lambda (K9087@x* K9088@x) (begin (K9050@check (cons K9088@x K9087@x*)) (list 'call-with-values (list 'lambda '() (car K9074@rhs*)) (list 'lambda (append K9087@x* K9088@x) (K9071@f (cdr K9073@lhs*) (cdr K9074@rhs*)))))) K9085@ls/false) ((lambda (K9091@t) ((lambda (K9093@ls/false) (if K9093@ls/false (apply (lambda (K9095@others) (K7994@syntax-violation '#f '"malformed bindings" K9047@stx K9095@others)) K9093@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9091@t))) (K7761@syntax-dispatch K9091@t 'any))) K9083@t))) (K7761@syntax-dispatch K9083@t '#(each+ any () any)))) K9077@t))) (K7761@syntax-dispatch K9077@t 'each-any))) (car K9073@lhs*)))))) K9071@f) K9063@lhs* K9064@rhs*))) K9061@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9059@t))) (K7761@syntax-dispatch K9059@t '(_ #(each (any any)) any . each-any)))) K9051@t))) (K7761@syntax-dispatch K9051@t '(_ () any . each-any)))) K9047@stx))) '#f))) (set! K7699@trace-lambda-macro (lambda (K9101@stx) ((lambda (K9103@t) ((lambda (K9105@ls/false) (if K9105@ls/false (apply (lambda (K9107@who K9108@fmls K9109@b K9110@b*) (if (K7274@valid-bound-ids? K9108@fmls) (K7687@bless (list 'make-traced-procedure (list 'quote K9107@who) (cons 'lambda (cons K9108@fmls (cons K9109@b K9110@b*))))) (K7691@invalid-fmls-error K9101@stx K9108@fmls))) K9105@ls/false) ((lambda (K9115@t) ((lambda (K9117@ls/false) (if K9117@ls/false (apply (lambda (K9119@who K9120@fmls K9121@last K9122@b K9123@b*) (if (K7274@valid-bound-ids? (cons K9121@last K9120@fmls)) (K7687@bless (list 'make-traced-procedure (list 'quote K9119@who) (cons 'lambda (cons (append K9120@fmls K9121@last) (cons K9122@b K9123@b*))))) (K7691@invalid-fmls-error K9101@stx (append K9120@fmls K9121@last)))) K9117@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9115@t))) (K7761@syntax-dispatch K9115@t '(_ any #(each+ any () any) any . each-any)))) K9103@t))) (K7761@syntax-dispatch K9103@t '(_ any each-any any . each-any)))) K9101@stx))) (set! K7701@trace-define-macro (lambda (K9129@stx) ((lambda (K9131@t) ((lambda (K9133@ls/false) (if K9133@ls/false (apply (lambda (K9135@who K9136@fmls K9137@b K9138@b*) (if (K7274@valid-bound-ids? K9136@fmls) (K7687@bless (list 'define K9135@who (list 'make-traced-procedure (list 'quote K9135@who) (cons 'lambda (cons K9136@fmls (cons K9137@b K9138@b*)))))) (K7691@invalid-fmls-error K9129@stx K9136@fmls))) K9133@ls/false) ((lambda (K9143@t) ((lambda (K9145@ls/false) (if K9145@ls/false (apply (lambda (K9147@who K9148@fmls K9149@last K9150@b K9151@b*) (if (K7274@valid-bound-ids? (cons K9149@last K9148@fmls)) (K7687@bless (list 'define K9147@who (list 'make-traced-procedure (list 'quote K9147@who) (cons 'lambda (cons (append K9148@fmls K9149@last) (cons K9150@b K9151@b*)))))) (K7691@invalid-fmls-error K9129@stx (append K9148@fmls K9149@last)))) K9145@ls/false) ((lambda (K9157@t) ((lambda (K9159@ls/false) (if K9159@ls/false (apply (lambda (K9161@who K9162@expr) (if (K7264@id? K9161@who) (K7687@bless (list 'define K9161@who (list 'let (list (list 'v K9162@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote K9161@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (K7994@syntax-violation '#f '"invalid name" K9129@stx))) K9159@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9157@t))) (K7761@syntax-dispatch K9157@t '(_ any any)))) K9143@t))) (K7761@syntax-dispatch K9143@t '(_ (any . #(each+ any () any)) any . each-any)))) K9131@t))) (K7761@syntax-dispatch K9131@t '(_ (any . each-any) any . each-any)))) K9129@stx))) (set! K7703@trace-define-syntax-macro (lambda (K9165@stx) ((lambda (K9167@t) ((lambda (K9169@ls/false) (if K9169@ls/false (apply (lambda (K9171@who K9172@expr) (if (K7264@id? K9171@who) (K7687@bless (list 'define-syntax K9171@who (list 'make-traced-macro (list 'quote K9171@who) K9172@expr))) (K7994@syntax-violation '#f '"invalid name" K9165@stx))) K9169@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9167@t))) (K7761@syntax-dispatch K9167@t '(_ any any)))) K9165@stx))) (set! K7705@trace-let/rec-syntax (lambda (K9175@who) (lambda (K9177@stx) ((lambda (K9179@t) ((lambda (K9181@ls/false) (if K9181@ls/false (apply (lambda (K9183@lhs* K9184@rhs* K9185@b K9186@b*) (if (K7274@valid-bound-ids? K9183@lhs*) ((lambda (K9191@rhs*) (K7687@bless (cons K9175@who (cons (map list K9183@lhs* K9191@rhs*) (cons K9185@b K9186@b*))))) (map (lambda (K9193@lhs K9194@rhs) (list 'make-traced-macro (list 'quote K9193@lhs) K9194@rhs)) K9183@lhs* K9184@rhs*)) (K7691@invalid-fmls-error K9177@stx K9183@lhs*))) K9181@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9179@t))) (K7761@syntax-dispatch K9179@t '(_ #(each (any any)) any . each-any)))) K9177@stx)))) (set! K7707@trace-let-syntax-macro (K7705@trace-let/rec-syntax 'let-syntax)) (set! K7709@trace-letrec-syntax-macro (K7705@trace-let/rec-syntax 'letrec-syntax)) (set! K7711@guard-macro (lambda (K9197@x) ((lambda (K9200@gen-clauses) (begin (set! K9200@gen-clauses (lambda (K9223@con K9224@outerk K9225@clause*) ((lambda (K9230@f K9232@f*) (begin (set! K9230@f (lambda (K9283@x K9284@k) ((lambda (K9287@t) ((lambda (K9289@ls/false) (if K9289@ls/false (apply (lambda (K9291@e K9292@p) ((lambda (K9295@t) (list 'let (list (list K9295@t K9291@e)) (list 'if K9295@t (list K9292@p K9295@t) K9284@k))) (K6148@K5912@gensym))) K9289@ls/false) ((lambda (K9297@t) ((lambda (K9299@ls/false) (if K9299@ls/false (apply (lambda (K9301@e) ((lambda (K9303@t) (list 'let (list (list K9303@t K9301@e)) (list 'if K9303@t K9303@t K9284@k))) (K6148@K5912@gensym))) K9299@ls/false) ((lambda (K9305@t) ((lambda (K9307@ls/false) (if K9307@ls/false (apply (lambda (K9309@e K9310@v K9311@v*) (list 'if K9309@e (cons 'begin (cons K9310@v K9311@v*)) K9284@k)) K9307@ls/false) ((lambda (K9315@t) ((lambda (K9317@ls/false) (if K9317@ls/false (apply (lambda () (K7994@syntax-violation '#f '"invalid guard clause" K9283@x)) K9317@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9315@t))) (K7761@syntax-dispatch K9315@t '_))) K9305@t))) (K7761@syntax-dispatch K9305@t '(any any . each-any)))) K9297@t))) (K7761@syntax-dispatch K9297@t '(any)))) K9287@t))) (K7761@syntax-dispatch K9287@t '(any #(scheme-id =>) any)))) K9283@x))) (set! K9232@f* (lambda (K9243@x*) ((lambda (K9245@t) ((lambda (K9247@ls/false) (if K9247@ls/false (apply (lambda () ((lambda (K9249@g) (values (list K9249@g (list 'lambda '() (list 'raise-continuable K9223@con))) K9249@g)) (K6148@K5912@gensym))) K9247@ls/false) ((lambda (K9251@t) ((lambda (K9253@ls/false) (if K9253@ls/false (apply (lambda (K9255@e K9256@e*) (values (cons 'begin (cons K9255@e K9256@e*)) '#f)) K9253@ls/false) ((lambda (K9259@t) ((lambda (K9261@ls/false) (if K9261@ls/false (apply (lambda (K9263@cls K9264@cls*) (call-with-values (lambda () (K9232@f* K9264@cls*)) (lambda (K9269@K9267@e K9270@K9268@g) ((lambda (K9273@g K9274@e) (values (K9230@f K9263@cls K9274@e) K9273@g)) K9270@K9268@g K9269@K9267@e)))) K9261@ls/false) ((lambda (K9277@t) ((lambda (K9279@ls/false) (if K9279@ls/false (apply (lambda (K9281@others) (K7994@syntax-violation '#f '"invalid guard clause" K9281@others)) K9279@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9277@t))) (K7761@syntax-dispatch K9277@t 'any))) K9259@t))) (K7761@syntax-dispatch K9259@t '(any . any)))) K9251@t))) (K7761@syntax-dispatch K9251@t '((#(scheme-id else) any . each-any))))) K9245@t))) (K7761@syntax-dispatch K9245@t '()))) K9243@x*))) (call-with-values (lambda () (K9232@f* K9225@clause*)) (lambda (K9235@K9233@code K9236@K9234@raisek) ((lambda (K9239@raisek K9240@code) (if K9239@raisek (list (list 'call/cc (list 'lambda (list K9239@raisek) (list K9224@outerk (list 'lambda '() K9240@code))))) (list K9224@outerk (list 'lambda '() K9240@code)))) K9236@K9234@raisek K9235@K9233@code))))) '#f '#f))) ((lambda (K9201@t) ((lambda (K9203@ls/false) (if (and K9203@ls/false (apply (lambda (K9205@con K9206@clause* K9207@b K9208@b*) (K7264@id? K9205@con)) K9203@ls/false)) (apply (lambda (K9213@con K9214@clause* K9215@b K9216@b*) ((lambda (K9221@outerk) (K7687@bless (list (list 'call/cc (list 'lambda (list K9221@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list K9213@con) (K9200@gen-clauses K9213@con K9221@outerk K9214@clause*)) (cons 'lambda (cons '() (cons K9215@b K9216@b*)))))))))) (K6148@K5912@gensym))) K9203@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9201@t))) (K7761@syntax-dispatch K9201@t '(_ (any . each-any) any . each-any)))) K9197@x))) '#f))) (set! K7713@define-enumeration-macro (lambda (K9319@stx) ((lambda (K9322@set? K9324@remove-dups) (begin (set! K9322@set? (lambda (K9347@x) (or (null? K9347@x) (and (not (memq (car K9347@x) (cdr K9347@x))) (K9322@set? (cdr K9347@x)))))) (set! K9324@remove-dups (lambda (K9345@ls) (if (null? K9345@ls) '() (cons (car K9345@ls) (K9324@remove-dups (remq (car K9345@ls) (cdr K9345@ls))))))) ((lambda (K9325@t) ((lambda (K9327@ls/false) (if (and K9327@ls/false (apply (lambda (K9329@name K9330@id* K9331@maker) (and (K7264@id? K9329@name) (K7264@id? K9331@maker) (for-all K7264@id? K9330@id*))) K9327@ls/false)) (apply (lambda (K9335@name K9336@id* K9337@maker) ((lambda (K9341@name* K9342@mk) (K7687@bless (list 'begin (list 'define K9342@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote K9341@name*)))) (list 'define-syntax K9335@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote K9341@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote K9335@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax K9337@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote K9337@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote K9341@name*)) (cons 'syntax-violation (cons (list 'quote K9337@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons K9342@mk '('(n* ...)))))))))))) (K9324@remove-dups (K8000@syntax->datum K9336@id*)) (K6148@K5912@gensym))) K9327@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9325@t))) (K7761@syntax-dispatch K9325@t '(_ any each-any any)))) K9319@stx))) '#f '#f))) (set! K7715@time-macro (lambda (K9349@stx) ((lambda (K9351@t) ((lambda (K9353@ls/false) (if K9353@ls/false (apply (lambda (K9355@expr) (K7687@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() K9355@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) K9353@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9351@t))) (K7761@syntax-dispatch K9351@t '(_ any)))) K9349@stx))) (set! K7717@delay-macro (lambda (K9357@stx) ((lambda (K9359@t) ((lambda (K9361@ls/false) (if K9361@ls/false (apply (lambda (K9363@expr) (K7687@bless (list 'make-promise (list 'lambda '() K9363@expr)))) K9361@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9359@t))) (K7761@syntax-dispatch K9359@t '(_ any)))) K9357@stx))) (set! K7719@assert-macro (lambda (K9365@stx) ((lambda (K9367@t) ((lambda (K9369@ls/false) (if K9369@ls/false (apply (lambda (K9371@expr) ((lambda (K9373@pos) (K7687@bless (list 'unless K9371@expr (list 'assertion-error (list 'quote K9371@expr) (list 'quote K9373@pos))))) (or (K7986@expression-position K9365@stx) (K7986@expression-position K9371@expr)))) K9369@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9367@t))) (K7761@syntax-dispatch K9367@t '(_ any)))) K9365@stx))) (set! K7721@endianness-macro (lambda (K9375@stx) ((lambda (K9377@t) ((lambda (K9379@ls/false) (if K9379@ls/false (apply (lambda (K9381@e) ((lambda (K9383@t) (if (memv K9383@t '(little)) (K7687@bless ''little) (if (memv K9383@t '(big)) (K7687@bless ''big) (K7994@syntax-violation '#f '"endianness must be big or little" K9375@stx)))) (K8000@syntax->datum K9381@e))) K9379@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9377@t))) (K7761@syntax-dispatch K9377@t '(_ any)))) K9375@stx))) (set! K7723@identifier-syntax-macro (lambda (K9385@stx) ((lambda (K9387@t) ((lambda (K9389@ls/false) (if K9389@ls/false (apply (lambda (K9391@expr) (K7687@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax K9391@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax K9391@expr) '((syntax (e* ...)))))))))) K9389@ls/false) ((lambda (K9393@t) ((lambda (K9395@ls/false) (if (and K9395@ls/false (apply (lambda (K9397@id1 K9398@expr1 K9399@id2 K9400@expr2 K9401@expr3) (and (K7264@id? K9397@id1) (K7264@id? K9399@id2) (K7264@id? K9400@expr2))) K9395@ls/false)) (apply (lambda (K9407@id1 K9408@expr1 K9409@id2 K9410@expr2 K9411@expr3) (K7687@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax K9408@expr1)) (list (list 'set! 'id K9410@expr2) (list 'syntax K9411@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons K9408@expr1 '(e* ...))))))))) K9395@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9393@t))) (K7761@syntax-dispatch K9393@t '(_ (any any) ((#(scheme-id set!) any any) any))))) K9387@t))) (K7761@syntax-dispatch K9387@t '(_ any)))) K9385@stx))) (set! K7725@do-macro (lambda (K9417@stx) ((lambda (K9420@bind) (begin (set! K9420@bind (lambda (K9443@x) ((lambda (K9445@t) ((lambda (K9447@ls/false) (if K9447@ls/false (apply (lambda (K9449@x K9450@init) (list K9449@x K9450@init K9449@x)) K9447@ls/false) ((lambda (K9453@t) ((lambda (K9455@ls/false) (if K9455@ls/false (apply (lambda (K9457@x K9458@init K9459@step) (list K9457@x K9458@init K9459@step)) K9455@ls/false) ((lambda (K9463@t) ((lambda (K9465@ls/false) (if K9465@ls/false (apply (lambda () (K7994@syntax-violation '#f '"invalid binding" K9417@stx)) K9465@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9463@t))) (K7761@syntax-dispatch K9463@t '_))) K9453@t))) (K7761@syntax-dispatch K9453@t '(any any any)))) K9445@t))) (K7761@syntax-dispatch K9445@t '(any any)))) K9443@x))) ((lambda (K9421@t) ((lambda (K9423@ls/false) (if K9423@ls/false (apply (lambda (K9425@binding* K9426@test K9427@expr* K9428@command*) ((lambda (K9433@t) ((lambda (K9435@ls/false) (if K9435@ls/false (apply (lambda (K9437@x* K9438@init* K9439@step*) (if (K7274@valid-bound-ids? K9437@x*) (K7687@bless (list 'letrec (list (list 'loop (list 'lambda K9437@x* (list 'if K9426@test (cons 'begin (cons '(if #f #f) K9427@expr*)) (cons 'begin (append K9428@command* (list (cons 'loop K9439@step*)))))))) (cons 'loop K9438@init*))) (K7994@syntax-violation '#f '"invalid bindings" K9417@stx))) K9435@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9433@t))) (K7761@syntax-dispatch K9433@t '#(each (any any any))))) (map K9420@bind K9425@binding*))) K9423@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9421@t))) (K7761@syntax-dispatch K9421@t '(_ each-any (any . each-any) . each-any)))) K9417@stx))) '#f))) (set! K7727@let*-macro (lambda (K9467@stx) ((lambda (K9469@t) ((lambda (K9471@ls/false) (if (and K9471@ls/false (apply (lambda (K9473@lhs* K9474@rhs* K9475@b K9476@b*) (for-all K7264@id? K9473@lhs*)) K9471@ls/false)) (apply (lambda (K9481@lhs* K9482@rhs* K9483@b K9484@b*) (K7687@bless ((letrec ((K9489@f (lambda (K9491@x*) (if (null? K9491@x*) (cons 'let (cons '() (cons K9483@b K9484@b*))) (list 'let (list (car K9491@x*)) (K9489@f (cdr K9491@x*))))))) K9489@f) (map list K9481@lhs* K9482@rhs*)))) K9471@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9469@t))) (K7761@syntax-dispatch K9469@t '(_ #(each (any any)) any . each-any)))) K9467@stx))) (set! K7729@or-macro (lambda (K9493@stx) ((lambda (K9495@t) ((lambda (K9497@ls/false) (if K9497@ls/false (apply (lambda () '#f) K9497@ls/false) ((lambda (K9499@t) ((lambda (K9501@ls/false) (if K9501@ls/false (apply (lambda (K9503@e K9504@e*) (K7687@bless ((letrec ((K9507@f (lambda (K9509@e K9510@e*) (if (null? K9510@e*) (list 'begin '#f K9509@e) (list 'let (list (list 't K9509@e)) (list 'if 't 't (K9507@f (car K9510@e*) (cdr K9510@e*)))))))) K9507@f) K9503@e K9504@e*))) K9501@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9499@t))) (K7761@syntax-dispatch K9499@t '(_ any . each-any)))) K9495@t))) (K7761@syntax-dispatch K9495@t '(_)))) K9493@stx))) (set! K7731@and-macro (lambda (K9513@stx) ((lambda (K9515@t) ((lambda (K9517@ls/false) (if K9517@ls/false (apply (lambda () '#t) K9517@ls/false) ((lambda (K9519@t) ((lambda (K9521@ls/false) (if K9521@ls/false (apply (lambda (K9523@e K9524@e*) (K7687@bless ((letrec ((K9527@f (lambda (K9529@e K9530@e*) (if (null? K9530@e*) (list 'begin '#f K9529@e) (cons 'if (cons K9529@e (cons (K9527@f (car K9530@e*) (cdr K9530@e*)) '(#f)))))))) K9527@f) K9523@e K9524@e*))) K9521@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9519@t))) (K7761@syntax-dispatch K9519@t '(_ any . each-any)))) K9515@t))) (K7761@syntax-dispatch K9515@t '(_)))) K9513@stx))) (set! K7733@cond-macro (lambda (K9533@stx) ((lambda (K9535@t) ((lambda (K9537@ls/false) (if K9537@ls/false (apply (lambda (K9539@cls K9540@cls*) (K7687@bless ((letrec ((K9543@f (lambda (K9545@cls K9546@cls*) (if (null? K9546@cls*) ((lambda (K9549@t) ((lambda (K9551@ls/false) (if K9551@ls/false (apply (lambda (K9553@e K9554@e*) (cons 'begin (cons K9553@e K9554@e*))) K9551@ls/false) ((lambda (K9557@t) ((lambda (K9559@ls/false) (if K9559@ls/false (apply (lambda (K9561@e K9562@p) (list 'let (list (list 't K9561@e)) (list 'if 't (cons K9562@p '(t))))) K9559@ls/false) ((lambda (K9565@t) ((lambda (K9567@ls/false) (if K9567@ls/false (apply (lambda (K9569@e) (cons 'or (cons K9569@e '((if #f #f))))) K9567@ls/false) ((lambda (K9571@t) ((lambda (K9573@ls/false) (if K9573@ls/false (apply (lambda (K9575@e K9576@e*) (list 'if K9575@e (cons 'begin K9576@e*))) K9573@ls/false) ((lambda (K9579@t) ((lambda (K9581@ls/false) (if K9581@ls/false (apply (lambda () (K7994@syntax-violation '#f '"invalid last clause" K9533@stx)) K9581@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9579@t))) (K7761@syntax-dispatch K9579@t '_))) K9571@t))) (K7761@syntax-dispatch K9571@t '(any . each-any)))) K9565@t))) (K7761@syntax-dispatch K9565@t '(any)))) K9557@t))) (K7761@syntax-dispatch K9557@t '(any #(scheme-id =>) any)))) K9549@t))) (K7761@syntax-dispatch K9549@t '(#(scheme-id else) any . each-any)))) K9545@cls) ((lambda (K9583@t) ((lambda (K9585@ls/false) (if K9585@ls/false (apply (lambda (K9587@e K9588@e*) (K7994@syntax-violation '#f '"incorrect position of keyword else" K9533@stx)) K9585@ls/false) ((lambda (K9591@t) ((lambda (K9593@ls/false) (if K9593@ls/false (apply (lambda (K9595@e K9596@p) (list 'let (list (list 't K9595@e)) (list 'if 't (cons K9596@p '(t)) (K9543@f (car K9546@cls*) (cdr K9546@cls*))))) K9593@ls/false) ((lambda (K9599@t) ((lambda (K9601@ls/false) (if K9601@ls/false (apply (lambda (K9603@e) (list 'or K9603@e (K9543@f (car K9546@cls*) (cdr K9546@cls*)))) K9601@ls/false) ((lambda (K9605@t) ((lambda (K9607@ls/false) (if K9607@ls/false (apply (lambda (K9609@e K9610@e*) (list 'if K9609@e (cons 'begin K9610@e*) (K9543@f (car K9546@cls*) (cdr K9546@cls*)))) K9607@ls/false) ((lambda (K9613@t) ((lambda (K9615@ls/false) (if K9615@ls/false (apply (lambda () (K7994@syntax-violation '#f '"invalid last clause" K9533@stx)) K9615@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9613@t))) (K7761@syntax-dispatch K9613@t '_))) K9605@t))) (K7761@syntax-dispatch K9605@t '(any . each-any)))) K9599@t))) (K7761@syntax-dispatch K9599@t '(any)))) K9591@t))) (K7761@syntax-dispatch K9591@t '(any #(scheme-id =>) any)))) K9583@t))) (K7761@syntax-dispatch K9583@t '(#(scheme-id else) any . each-any)))) K9545@cls))))) K9543@f) K9539@cls K9540@cls*))) K9537@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9535@t))) (K7761@syntax-dispatch K9535@t '(_ any . each-any)))) K9533@stx))) (set! K7735@do-include (lambda (K9617@stx K9618@id K9619@filename) ((lambda (K9623@filename) (begin (if (not (and (string? K9623@filename) (K7264@id? K9618@id))) (K7994@syntax-violation '#f '"invalid syntax" K9617@stx) (void)) (cons (K7687@bless 'begin) (with-input-from-file K9623@filename (lambda () ((letrec ((K9625@f (lambda (K9627@ls) ((lambda (K9629@x) (if (eof-object? K9629@x) (reverse K9627@ls) (K9625@f (cons (K7230@datum->stx K9618@id K9629@x) K9627@ls)))) (K6149@K5914@read-annotated))))) K9625@f) '())))))) (K7286@stx->datum K9619@filename)))) (set! K7737@include-macro (lambda (K9631@e) ((lambda (K9633@t) ((lambda (K9635@ls/false) (if K9635@ls/false (apply (lambda (K9637@id K9638@filename) (K7735@do-include K9631@e K9637@id K9638@filename)) K9635@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9633@t))) (K7761@syntax-dispatch K9633@t '(any any)))) K9631@e))) (set! K7739@include-into-macro (lambda (K9641@e) ((lambda (K9643@t) ((lambda (K9645@ls/false) (if K9645@ls/false (apply (lambda (K9647@id K9648@filename) (K7735@do-include K9641@e K9647@id K9648@filename)) K9645@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9643@t))) (K7761@syntax-dispatch K9643@t '(_ any any)))) K9641@e))) (set! K7741@syntax-rules-macro (lambda (K9651@e) ((lambda (K9653@t) ((lambda (K9655@ls/false) (if K9655@ls/false (apply (lambda (K9657@lits K9658@pat* K9659@tmp*) (begin (K7767@verify-literals K9657@lits K9651@e) (K7687@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons K9657@lits (map (lambda (K9663@pat K9664@tmp) ((lambda (K9667@t) ((lambda (K9669@ls/false) (if K9669@ls/false (apply (lambda (K9671@rest) (list (cons 'g K9671@rest) (list 'syntax K9664@tmp))) K9669@ls/false) ((lambda (K9673@t) ((lambda (K9675@ls/false) (if K9675@ls/false (apply (lambda () (K7994@syntax-violation '#f '"invalid syntax-rules pattern" K9651@e K9663@pat)) K9675@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9673@t))) (K7761@syntax-dispatch K9673@t '_))) K9667@t))) (K7761@syntax-dispatch K9667@t '(_ . any)))) K9663@pat)) K9658@pat* K9659@tmp*)))))))) K9655@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9653@t))) (K7761@syntax-dispatch K9653@t '(_ each-any . #(each (any any)))))) K9651@e))) (set! K7743@quasiquote-macro ((lambda () ((lambda (K9678@datum K9706@quasicons* K9708@quasicons K9710@quasiappend K9712@quasivector K9714@vquasi K9716@quasi) (begin (set! K9678@datum (lambda (K9935@x) (list (K7643@scheme-stx 'quote) (K7240@mkstx K9935@x '() '() '())))) (set! K9706@quasicons* (lambda (K9927@x K9928@y) ((letrec ((K9931@f (lambda (K9933@x) (if (null? K9933@x) K9928@y (K9708@quasicons (car K9933@x) (K9931@f (cdr K9933@x))))))) K9931@f) K9927@x))) (set! K9708@quasicons (lambda (K9889@x K9890@y) ((lambda (K9893@t) ((lambda (K9895@ls/false) (if K9895@ls/false (apply (lambda (K9897@dy) ((lambda (K9899@t) ((lambda (K9901@ls/false) (if K9901@ls/false (apply (lambda (K9903@dx) (list (K7643@scheme-stx 'quote) (cons K9903@dx K9897@dy))) K9901@ls/false) ((lambda (K9905@t) ((lambda (K9907@ls/false) (if K9907@ls/false (apply (lambda () ((lambda (K9909@t) ((lambda (K9911@ls/false) (if K9911@ls/false (apply (lambda () (list (K7643@scheme-stx 'list) K9889@x)) K9911@ls/false) ((lambda (K9913@t) ((lambda (K9915@ls/false) (if K9915@ls/false (apply (lambda () (list (K7643@scheme-stx 'cons) K9889@x K9890@y)) K9915@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9913@t))) (K7761@syntax-dispatch K9913@t '_))) K9909@t))) (K7761@syntax-dispatch K9909@t '()))) K9897@dy)) K9907@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9905@t))) (K7761@syntax-dispatch K9905@t '_))) K9899@t))) (K7761@syntax-dispatch K9899@t '(#(scheme-id quote) any)))) K9889@x)) K9895@ls/false) ((lambda (K9917@t) ((lambda (K9919@ls/false) (if K9919@ls/false (apply (lambda (K9921@stuff) (cons* (K7643@scheme-stx 'list) K9889@x K9921@stuff)) K9919@ls/false) ((lambda (K9923@t) ((lambda (K9925@ls/false) (if K9925@ls/false (apply (lambda () (list (K7643@scheme-stx 'cons) K9889@x K9890@y)) K9925@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9923@t))) (K7761@syntax-dispatch K9923@t '_))) K9917@t))) (K7761@syntax-dispatch K9917@t '(#(scheme-id list) . each-any)))) K9893@t))) (K7761@syntax-dispatch K9893@t '(#(scheme-id quote) any)))) K9890@y))) (set! K9710@quasiappend (lambda (K9863@x K9864@y) ((lambda (K9867@ls) (if (null? K9867@ls) (list (K7643@scheme-stx 'quote) '()) (if (null? (cdr K9867@ls)) (car K9867@ls) (cons* (K7643@scheme-stx 'append) K9867@ls)))) ((letrec ((K9869@f (lambda (K9871@x) (if (null? K9871@x) ((lambda (K9873@t) ((lambda (K9875@ls/false) (if K9875@ls/false (apply (lambda () '()) K9875@ls/false) ((lambda (K9877@t) ((lambda (K9879@ls/false) (if K9879@ls/false (apply (lambda () (list K9864@y)) K9879@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9877@t))) (K7761@syntax-dispatch K9877@t '_))) K9873@t))) (K7761@syntax-dispatch K9873@t '(#(scheme-id quote) ())))) K9864@y) ((lambda (K9881@t) ((lambda (K9883@ls/false) (if K9883@ls/false (apply (lambda () (K9869@f (cdr K9871@x))) K9883@ls/false) ((lambda (K9885@t) ((lambda (K9887@ls/false) (if K9887@ls/false (apply (lambda () (cons (car K9871@x) (K9869@f (cdr K9871@x)))) K9887@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9885@t))) (K7761@syntax-dispatch K9885@t '_))) K9881@t))) (K7761@syntax-dispatch K9881@t '(#(scheme-id quote) ())))) (car K9871@x)))))) K9869@f) K9863@x)))) (set! K9712@quasivector (lambda (K9813@x) ((lambda (K9815@pat-x) ((lambda (K9817@t) ((lambda (K9819@ls/false) (if K9819@ls/false (apply (lambda (K9821@x*) (list (K7643@scheme-stx 'quote) (list->vector K9821@x*))) K9819@ls/false) ((lambda (K9823@t) ((lambda (K9825@ls/false) (if K9825@ls/false (apply (lambda () ((letrec ((K9827@f (lambda (K9829@x K9830@k) ((lambda (K9833@t) ((lambda (K9835@ls/false) (if K9835@ls/false (apply (lambda (K9837@x*) (K9830@k (map (lambda (K9839@x) (list (K7643@scheme-stx 'quote) K9839@x)) K9837@x*))) K9835@ls/false) ((lambda (K9841@t) ((lambda (K9843@ls/false) (if K9843@ls/false (apply (lambda (K9845@x*) (K9830@k K9845@x*)) K9843@ls/false) ((lambda (K9847@t) ((lambda (K9849@ls/false) (if K9849@ls/false (apply (lambda (K9851@x K9852@y) (K9827@f K9852@y (lambda (K9855@ls) (K9830@k (cons K9851@x K9855@ls))))) K9849@ls/false) ((lambda (K9857@t) ((lambda (K9859@ls/false) (if K9859@ls/false (apply (lambda () (list (K7643@scheme-stx 'list->vector) K9815@pat-x)) K9859@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9857@t))) (K7761@syntax-dispatch K9857@t '_))) K9847@t))) (K7761@syntax-dispatch K9847@t '(#(scheme-id cons) any any)))) K9841@t))) (K7761@syntax-dispatch K9841@t '(#(scheme-id list) . each-any)))) K9833@t))) (K7761@syntax-dispatch K9833@t '(#(scheme-id quote) each-any)))) K9829@x)))) K9827@f) K9813@x (lambda (K9861@ls) (cons* (K7643@scheme-stx 'vector) K9861@ls)))) K9825@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9823@t))) (K7761@syntax-dispatch K9823@t '_))) K9817@t))) (K7761@syntax-dispatch K9817@t '(#(scheme-id quote) each-any)))) K9815@pat-x)) K9813@x))) (set! K9714@vquasi (lambda (K9779@p K9780@lev) ((lambda (K9783@t) ((lambda (K9785@ls/false) (if K9785@ls/false (apply (lambda (K9787@p K9788@q) ((lambda (K9791@t) ((lambda (K9793@ls/false) (if K9793@ls/false (apply (lambda (K9795@p) (if (= K9780@lev '0) (K9706@quasicons* K9795@p (K9714@vquasi K9788@q K9780@lev)) (K9708@quasicons (K9708@quasicons (K9678@datum 'unquote) (K9716@quasi K9795@p (- K9780@lev '1))) (K9714@vquasi K9788@q K9780@lev)))) K9793@ls/false) ((lambda (K9797@t) ((lambda (K9799@ls/false) (if K9799@ls/false (apply (lambda (K9801@p) (if (= K9780@lev '0) (K9710@quasiappend K9801@p (K9714@vquasi K9788@q K9780@lev)) (K9708@quasicons (K9708@quasicons (K9678@datum 'unquote-splicing) (K9716@quasi K9801@p (- K9780@lev '1))) (K9714@vquasi K9788@q K9780@lev)))) K9799@ls/false) ((lambda (K9803@t) ((lambda (K9805@ls/false) (if K9805@ls/false (apply (lambda (K9807@p) (K9708@quasicons (K9716@quasi K9807@p K9780@lev) (K9714@vquasi K9788@q K9780@lev))) K9805@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9803@t))) (K7761@syntax-dispatch K9803@t 'any))) K9797@t))) (K7761@syntax-dispatch K9797@t '(#(scheme-id unquote-splicing) . each-any)))) K9791@t))) (K7761@syntax-dispatch K9791@t '(#(scheme-id unquote) . each-any)))) K9787@p)) K9785@ls/false) ((lambda (K9809@t) ((lambda (K9811@ls/false) (if K9811@ls/false (apply (lambda () (list (K7643@scheme-stx 'quote) '())) K9811@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9809@t))) (K7761@syntax-dispatch K9809@t '()))) K9783@t))) (K7761@syntax-dispatch K9783@t '(any . any)))) K9779@p))) (set! K9716@quasi (lambda (K9725@p K9726@lev) ((lambda (K9729@t) ((lambda (K9731@ls/false) (if K9731@ls/false (apply (lambda (K9733@p) (if (= K9726@lev '0) K9733@p (K9708@quasicons (K9678@datum 'unquote) (K9716@quasi (list K9733@p) (- K9726@lev '1))))) K9731@ls/false) ((lambda (K9735@t) ((lambda (K9737@ls/false) (if K9737@ls/false (apply (lambda (K9739@p K9740@q) (if (= K9726@lev '0) (K9706@quasicons* K9739@p (K9716@quasi K9740@q K9726@lev)) (K9708@quasicons (K9708@quasicons (K9678@datum 'unquote) (K9716@quasi K9739@p (- K9726@lev '1))) (K9716@quasi K9740@q K9726@lev)))) K9737@ls/false) ((lambda (K9743@t) ((lambda (K9745@ls/false) (if K9745@ls/false (apply (lambda (K9747@p K9748@q) (if (= K9726@lev '0) (K9710@quasiappend K9747@p (K9716@quasi K9748@q K9726@lev)) (K9708@quasicons (K9708@quasicons (K9678@datum 'unquote-splicing) (K9716@quasi K9747@p (- K9726@lev '1))) (K9716@quasi K9748@q K9726@lev)))) K9745@ls/false) ((lambda (K9751@t) ((lambda (K9753@ls/false) (if K9753@ls/false (apply (lambda (K9755@p) (K9708@quasicons (K9678@datum 'quasiquote) (K9716@quasi (list K9755@p) (+ K9726@lev '1)))) K9753@ls/false) ((lambda (K9757@t) ((lambda (K9759@ls/false) (if K9759@ls/false (apply (lambda (K9761@p K9762@q) (K9708@quasicons (K9716@quasi K9761@p K9726@lev) (K9716@quasi K9762@q K9726@lev))) K9759@ls/false) ((lambda (K9765@t) ((lambda (K9767@ls/false) (if (and K9767@ls/false (apply (lambda (K9769@x) (not (K7208@stx? K9769@x))) K9767@ls/false)) (apply (lambda (K9771@x) (K9712@quasivector (K9714@vquasi K9771@x K9726@lev))) K9767@ls/false) ((lambda (K9773@t) ((lambda (K9775@ls/false) (if K9775@ls/false (apply (lambda (K9777@p) (list (K7643@scheme-stx 'quote) K9777@p)) K9775@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9773@t))) (K7761@syntax-dispatch K9773@t 'any))) K9765@t))) (K7761@syntax-dispatch K9765@t '#(vector each-any)))) K9757@t))) (K7761@syntax-dispatch K9757@t '(any . any)))) K9751@t))) (K7761@syntax-dispatch K9751@t '(#(scheme-id quasiquote) any)))) K9743@t))) (K7761@syntax-dispatch K9743@t '((#(scheme-id unquote-splicing) . each-any) . any)))) K9735@t))) (K7761@syntax-dispatch K9735@t '((#(scheme-id unquote) . each-any) . any)))) K9729@t))) (K7761@syntax-dispatch K9729@t '(#(scheme-id unquote) any)))) K9725@p))) (lambda (K9717@x) ((lambda (K9719@t) ((lambda (K9721@ls/false) (if K9721@ls/false (apply (lambda (K9723@e) (K9716@quasi K9723@e '0)) K9721@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9719@t))) (K7761@syntax-dispatch K9719@t '(_ any)))) K9717@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! K7745@quasisyntax-macro ((lambda () ((lambda (K9938@quasi) (begin (set! K9938@quasi (lambda (K9962@p K9963@lev) ((lambda (K9966@t) ((lambda (K9968@ls/false) (if K9968@ls/false (apply (lambda (K9970@p) (if (= K9963@lev '0) ((lambda (K9972@g) (values (list K9972@g) (list K9970@p) K9972@g)) (K6148@K5912@gensym)) (call-with-values (lambda () (K9938@quasi K9970@p (- K9963@lev '1))) (lambda (K9977@K9974@lhs* K9978@K9975@rhs* K9979@K9976@p) ((lambda (K9983@p K9984@rhs* K9985@lhs*) (values K9985@lhs* K9984@rhs* (list 'unsyntax K9983@p))) K9979@K9976@p K9978@K9975@rhs* K9977@K9974@lhs*))))) K9968@ls/false) ((lambda (K9989@t) ((lambda (K9991@ls/false) (if (and K9991@ls/false (apply (lambda () (= K9963@lev '0)) K9991@ls/false)) (apply (lambda () (K7994@syntax-violation '#f '"incorrect use of unsyntax" K9962@p)) K9991@ls/false) ((lambda (K9993@t) ((lambda (K9995@ls/false) (if K9995@ls/false (apply (lambda (K9997@p* K9998@q) (call-with-values (lambda () (K9938@quasi K9998@q K9963@lev)) (lambda (K10004@K10001@lhs* K10005@K10002@rhs* K10006@K10003@q) ((lambda (K10010@q K10011@rhs* K10012@lhs*) (if (= K9963@lev '0) ((lambda (K10016@g*) (values (append K10016@g* K10012@lhs*) (append K9997@p* K10011@rhs*) (append K10016@g* K10010@q))) (map (lambda (K10018@x) (K6148@K5912@gensym)) K9997@p*)) (call-with-values (lambda () (K9938@quasi K9997@p* (- K9963@lev '1))) (lambda (K10023@K10020@lhs2* K10024@K10021@rhs2* K10025@K10022@p*) ((lambda (K10029@p* K10030@rhs2* K10031@lhs2*) (values (append K10031@lhs2* K10012@lhs*) (append K10030@rhs2* K10011@rhs*) (cons (cons 'unsyntax K10029@p*) K10010@q))) K10025@K10022@p* K10024@K10021@rhs2* K10023@K10020@lhs2*))))) K10006@K10003@q K10005@K10002@rhs* K10004@K10001@lhs*)))) K9995@ls/false) ((lambda (K10035@t) ((lambda (K10037@ls/false) (if K10037@ls/false (apply (lambda (K10039@p* K10040@q) (call-with-values (lambda () (K9938@quasi K10040@q K9963@lev)) (lambda (K10046@K10043@lhs* K10047@K10044@rhs* K10048@K10045@q) ((lambda (K10052@q K10053@rhs* K10054@lhs*) (if (= K9963@lev '0) ((lambda (K10058@g*) (values (append (map (lambda (K10060@g) (cons K10060@g '(...))) K10058@g*) K10054@lhs*) (append K10039@p* K10053@rhs*) (append (apply append (map (lambda (K10062@g) (cons K10062@g '(...))) K10058@g*)) K10052@q))) (map (lambda (K10064@x) (K6148@K5912@gensym)) K10039@p*)) (call-with-values (lambda () (K9938@quasi K10039@p* (- K9963@lev '1))) (lambda (K10069@K10066@lhs2* K10070@K10067@rhs2* K10071@K10068@p*) ((lambda (K10075@p* K10076@rhs2* K10077@lhs2*) (values (append K10077@lhs2* K10054@lhs*) (append K10076@rhs2* K10053@rhs*) (cons (cons 'unsyntax-splicing K10075@p*) K10052@q))) K10071@K10068@p* K10070@K10067@rhs2* K10069@K10066@lhs2*))))) K10048@K10045@q K10047@K10044@rhs* K10046@K10043@lhs*)))) K10037@ls/false) ((lambda (K10081@t) ((lambda (K10083@ls/false) (if (and K10083@ls/false (apply (lambda () (= K9963@lev '0)) K10083@ls/false)) (apply (lambda () (K7994@syntax-violation '#f '"incorrect use of unsyntax-splicing" K9962@p)) K10083@ls/false) ((lambda (K10085@t) ((lambda (K10087@ls/false) (if K10087@ls/false (apply (lambda (K10089@p) (call-with-values (lambda () (K9938@quasi K10089@p (+ K9963@lev '1))) (lambda (K10094@K10091@lhs* K10095@K10092@rhs* K10096@K10093@p) ((lambda (K10100@p K10101@rhs* K10102@lhs*) (values K10102@lhs* K10101@rhs* (list 'quasisyntax K10100@p))) K10096@K10093@p K10095@K10092@rhs* K10094@K10091@lhs*)))) K10087@ls/false) ((lambda (K10106@t) ((lambda (K10108@ls/false) (if K10108@ls/false (apply (lambda (K10110@p K10111@q) (call-with-values (lambda () (K9938@quasi K10110@p K9963@lev)) (lambda (K10120@K10114@lhs* K10121@K10115@rhs* K10122@K10116@p) (call-with-values (lambda () (K9938@quasi K10111@q K9963@lev)) (lambda (K10126@K10117@lhs2* K10127@K10118@rhs2* K10128@K10119@q) ((lambda (K10132@q K10133@rhs2* K10134@lhs2* K10135@p K10136@rhs* K10137@lhs*) (values (append K10134@lhs2* K10137@lhs*) (append K10133@rhs2* K10136@rhs*) (cons K10135@p K10132@q))) K10128@K10119@q K10127@K10118@rhs2* K10126@K10117@lhs2* K10122@K10116@p K10121@K10115@rhs* K10120@K10114@lhs*)))))) K10108@ls/false) ((lambda (K10144@t) ((lambda (K10146@ls/false) (if K10146@ls/false (apply (lambda (K10148@x*) (call-with-values (lambda () (K9938@quasi K10148@x* K9963@lev)) (lambda (K10153@K10150@lhs* K10154@K10151@rhs* K10155@K10152@x*) ((lambda (K10159@x* K10160@rhs* K10161@lhs*) (values K10161@lhs* K10160@rhs* (list->vector K10159@x*))) K10155@K10152@x* K10154@K10151@rhs* K10153@K10150@lhs*)))) K10146@ls/false) ((lambda (K10165@t) ((lambda (K10167@ls/false) (if K10167@ls/false (apply (lambda () (values '() '() K9962@p)) K10167@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10165@t))) (K7761@syntax-dispatch K10165@t '_))) K10144@t))) (K7761@syntax-dispatch K10144@t '#(vector each-any)))) K10106@t))) (K7761@syntax-dispatch K10106@t '(any . any)))) K10085@t))) (K7761@syntax-dispatch K10085@t '(#(scheme-id quasisyntax) any)))) K10081@t))) (K7761@syntax-dispatch K10081@t '#(scheme-id unsyntax-splicing)))) K10035@t))) (K7761@syntax-dispatch K10035@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) K9993@t))) (K7761@syntax-dispatch K9993@t '((#(scheme-id unsyntax) . each-any) . any)))) K9989@t))) (K7761@syntax-dispatch K9989@t '#(scheme-id unsyntax)))) K9966@t))) (K7761@syntax-dispatch K9966@t '(#(scheme-id unsyntax) any)))) K9962@p))) (lambda (K9939@x) ((lambda (K9941@t) ((lambda (K9943@ls/false) (if K9943@ls/false (apply (lambda (K9945@e) (call-with-values (lambda () (K9938@quasi K9945@e '0)) (lambda (K9950@K9947@lhs* K9951@K9948@rhs* K9952@K9949@v) ((lambda (K9956@v K9957@rhs* K9958@lhs*) (K7687@bless (list 'syntax-case (cons 'list K9957@rhs*) '() (list K9958@lhs* (list 'syntax K9956@v))))) K9952@K9949@v K9951@K9948@rhs* K9950@K9947@lhs*)))) K9943@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K9941@t))) (K7761@syntax-dispatch K9941@t '(_ any)))) K9939@x)))) '#f)))) (set! K7747@define-struct-macro (lambda (K10169@stx) (K7994@syntax-violation '#f '"define-struct not supported" K10169@stx))) (set! K7749@define-record-type-macro (lambda (K10171@x) ((lambda (K10174@id K10176@get-record-name K10178@get-record-constructor-name K10180@get-record-predicate-name K10182@get-clause K10184@foo-rtd-code K10186@parent-rtd-code K10188@parent-rcd-code K10190@foo-rcd-code K10192@get-protocol-code K10194@get-fields K10196@get-mutator-indices K10198@get-mutators K10200@get-accessors K10202@enumerate K10204@do-define-record K10206@verify-clauses) (begin (set! K10174@id (lambda (K10673@ctxt . K10675@str*) (K7998@datum->syntax K10673@ctxt (string->symbol (apply string-append (map (lambda (K10677@x) (if (symbol? K10677@x) (symbol->string K10677@x) (if (string? K10677@x) K10677@x (assertion-violation 'define-record-type '"BUG")))) K10675@str*)))))) (set! K10176@get-record-name (lambda (K10655@spec) ((lambda (K10657@t) ((lambda (K10659@ls/false) (if K10659@ls/false (apply (lambda (K10661@foo K10662@make-foo K10663@foo?) K10661@foo) K10659@ls/false) ((lambda (K10667@t) ((lambda (K10669@ls/false) (if K10669@ls/false (apply (lambda (K10671@foo) K10671@foo) K10669@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10667@t))) (K7761@syntax-dispatch K10667@t 'any))) K10657@t))) (K7761@syntax-dispatch K10657@t '(any any any)))) K10655@spec))) (set! K10178@get-record-constructor-name (lambda (K10635@spec) ((lambda (K10637@t) ((lambda (K10639@ls/false) (if K10639@ls/false (apply (lambda (K10641@foo K10642@make-foo K10643@foo?) K10642@make-foo) K10639@ls/false) ((lambda (K10647@t) ((lambda (K10649@ls/false) (if (and K10649@ls/false (apply (lambda (K10651@foo) (K7264@id? K10651@foo)) K10649@ls/false)) (apply (lambda (K10653@foo) (K10174@id K10653@foo '"make-" (K7286@stx->datum K10653@foo))) K10649@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10647@t))) (K7761@syntax-dispatch K10647@t 'any))) K10637@t))) (K7761@syntax-dispatch K10637@t '(any any any)))) K10635@spec))) (set! K10180@get-record-predicate-name (lambda (K10615@spec) ((lambda (K10617@t) ((lambda (K10619@ls/false) (if K10619@ls/false (apply (lambda (K10621@foo K10622@make-foo K10623@foo?) K10623@foo?) K10619@ls/false) ((lambda (K10627@t) ((lambda (K10629@ls/false) (if (and K10629@ls/false (apply (lambda (K10631@foo) (K7264@id? K10631@foo)) K10629@ls/false)) (apply (lambda (K10633@foo) (K10174@id K10633@foo (K7286@stx->datum K10633@foo) '"?")) K10629@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10627@t))) (K7761@syntax-dispatch K10627@t 'any))) K10617@t))) (K7761@syntax-dispatch K10617@t '(any any any)))) K10615@spec))) (set! K10182@get-clause (lambda (K10597@id K10598@ls) ((lambda (K10601@t) ((lambda (K10603@ls/false) (if K10603@ls/false (apply (lambda () '#f) K10603@ls/false) ((lambda (K10605@t) ((lambda (K10607@ls/false) (if K10607@ls/false (apply (lambda (K10609@x K10610@rest K10611@ls) (if (K7272@free-id=? (K7687@bless K10597@id) K10609@x) (cons K10609@x K10610@rest) (K10182@get-clause K10597@id K10611@ls))) K10607@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10605@t))) (K7761@syntax-dispatch K10605@t '((any . any) . any)))) K10601@t))) (K7761@syntax-dispatch K10601@t '()))) K10598@ls))) (set! K10184@foo-rtd-code (lambda (K10515@name K10516@clause* K10517@parent-rtd-code) ((lambda (K10522@convert-field-spec*) (begin (set! K10522@convert-field-spec* (lambda (K10571@ls) (list->vector (map (lambda (K10573@x) ((lambda (K10575@t) ((lambda (K10577@ls/false) (if K10577@ls/false (apply (lambda (K10579@name K10580@rest) (list 'mutable K10579@name)) K10577@ls/false) ((lambda (K10583@t) ((lambda (K10585@ls/false) (if K10585@ls/false (apply (lambda (K10587@name K10588@rest) (list 'immutable K10587@name)) K10585@ls/false) ((lambda (K10591@t) ((lambda (K10593@ls/false) (if K10593@ls/false (apply (lambda (K10595@name) (list 'immutable K10595@name)) K10593@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10591@t))) (K7761@syntax-dispatch K10591@t 'any))) K10583@t))) (K7761@syntax-dispatch K10583@t '(#(scheme-id immutable) any . any)))) K10575@t))) (K7761@syntax-dispatch K10575@t '(#(scheme-id mutable) any . any)))) K10573@x)) K10571@ls)))) ((lambda (K10523@uid-code K10524@sealed? K10525@opaque? K10526@fields) (K7687@bless (list 'make-record-type-descriptor (list 'quote K10515@name) K10517@parent-rtd-code K10523@uid-code K10524@sealed? K10525@opaque? K10526@fields))) ((lambda (K10531@t) ((lambda (K10533@ls/false) (if K10533@ls/false (apply (lambda () (list 'quote (K6148@K5912@gensym))) K10533@ls/false) ((lambda (K10535@t) ((lambda (K10537@ls/false) (if K10537@ls/false (apply (lambda (K10539@uid) (list 'quote K10539@uid)) K10537@ls/false) ((lambda (K10541@t) ((lambda (K10543@ls/false) (if K10543@ls/false (apply (lambda () '#f) K10543@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10541@t))) (K7761@syntax-dispatch K10541@t '_))) K10535@t))) (K7761@syntax-dispatch K10535@t '(_ any)))) K10531@t))) (K7761@syntax-dispatch K10531@t '(_)))) (K10182@get-clause 'nongenerative K10516@clause*)) ((lambda (K10545@t) ((lambda (K10547@ls/false) (if K10547@ls/false (apply (lambda () '#t) K10547@ls/false) ((lambda (K10549@t) ((lambda (K10551@ls/false) (if K10551@ls/false (apply (lambda () '#f) K10551@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10549@t))) (K7761@syntax-dispatch K10549@t '_))) K10545@t))) (K7761@syntax-dispatch K10545@t '(_ #(atom #t))))) (K10182@get-clause 'sealed K10516@clause*)) ((lambda (K10553@t) ((lambda (K10555@ls/false) (if K10555@ls/false (apply (lambda () '#t) K10555@ls/false) ((lambda (K10557@t) ((lambda (K10559@ls/false) (if K10559@ls/false (apply (lambda () '#f) K10559@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10557@t))) (K7761@syntax-dispatch K10557@t '_))) K10553@t))) (K7761@syntax-dispatch K10553@t '(_ #(atom #t))))) (K10182@get-clause 'opaque K10516@clause*)) ((lambda (K10561@t) ((lambda (K10563@ls/false) (if K10563@ls/false (apply (lambda (K10565@field-spec*) (list 'quote (K10522@convert-field-spec* K10565@field-spec*))) K10563@ls/false) ((lambda (K10567@t) ((lambda (K10569@ls/false) (if K10569@ls/false (apply (lambda () ''#()) K10569@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10567@t))) (K7761@syntax-dispatch K10567@t '_))) K10561@t))) (K7761@syntax-dispatch K10561@t '(_ . each-any)))) (K10182@get-clause 'fields K10516@clause*))))) '#f))) (set! K10186@parent-rtd-code (lambda (K10491@clause*) ((lambda (K10493@t) ((lambda (K10495@ls/false) (if K10495@ls/false (apply (lambda (K10497@name) (list 'record-type-descriptor K10497@name)) K10495@ls/false) ((lambda (K10499@t) ((lambda (K10501@ls/false) (if K10501@ls/false (apply (lambda () ((lambda (K10503@t) ((lambda (K10505@ls/false) (if K10505@ls/false (apply (lambda (K10507@rtd K10508@rcd) K10507@rtd) K10505@ls/false) ((lambda (K10511@t) ((lambda (K10513@ls/false) (if K10513@ls/false (apply (lambda () '#f) K10513@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10511@t))) (K7761@syntax-dispatch K10511@t '#(atom #f)))) K10503@t))) (K7761@syntax-dispatch K10503@t '(_ any any)))) (K10182@get-clause 'parent-rtd K10491@clause*))) K10501@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10499@t))) (K7761@syntax-dispatch K10499@t '#(atom #f)))) K10493@t))) (K7761@syntax-dispatch K10493@t '(_ any)))) (K10182@get-clause 'parent K10491@clause*)))) (set! K10188@parent-rcd-code (lambda (K10467@clause*) ((lambda (K10469@t) ((lambda (K10471@ls/false) (if K10471@ls/false (apply (lambda (K10473@name) (list 'record-constructor-descriptor K10473@name)) K10471@ls/false) ((lambda (K10475@t) ((lambda (K10477@ls/false) (if K10477@ls/false (apply (lambda () ((lambda (K10479@t) ((lambda (K10481@ls/false) (if K10481@ls/false (apply (lambda (K10483@rtd K10484@rcd) K10484@rcd) K10481@ls/false) ((lambda (K10487@t) ((lambda (K10489@ls/false) (if K10489@ls/false (apply (lambda () '#f) K10489@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10487@t))) (K7761@syntax-dispatch K10487@t '#(atom #f)))) K10479@t))) (K7761@syntax-dispatch K10479@t '(_ any any)))) (K10182@get-clause 'parent-rtd K10467@clause*))) K10477@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10475@t))) (K7761@syntax-dispatch K10475@t '#(atom #f)))) K10469@t))) (K7761@syntax-dispatch K10469@t '(_ any)))) (K10182@get-clause 'parent K10467@clause*)))) (set! K10190@foo-rcd-code (lambda (K10459@clause* K10460@foo-rtd K10461@protocol K10462@parent-rcd-code) (list 'make-record-constructor-descriptor K10460@foo-rtd K10462@parent-rcd-code K10461@protocol))) (set! K10192@get-protocol-code (lambda (K10447@clause*) ((lambda (K10449@t) ((lambda (K10451@ls/false) (if K10451@ls/false (apply (lambda (K10453@expr) K10453@expr) K10451@ls/false) ((lambda (K10455@t) ((lambda (K10457@ls/false) (if K10457@ls/false (apply (lambda () '#f) K10457@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10455@t))) (K7761@syntax-dispatch K10455@t '_))) K10449@t))) (K7761@syntax-dispatch K10449@t '(_ any)))) (K10182@get-clause 'protocol K10447@clause*)))) (set! K10194@get-fields (lambda (K10429@clause*) ((lambda (K10431@t) ((lambda (K10433@ls/false) (if K10433@ls/false (apply (lambda () '()) K10433@ls/false) ((lambda (K10435@t) ((lambda (K10437@ls/false) (if K10437@ls/false (apply (lambda (K10439@f*) K10439@f*) K10437@ls/false) ((lambda (K10441@t) ((lambda (K10443@ls/false) (if K10443@ls/false (apply (lambda (K10445@rest) (K10194@get-fields K10445@rest)) K10443@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10441@t))) (K7761@syntax-dispatch K10441@t '(_ . any)))) K10435@t))) (K7761@syntax-dispatch K10435@t '((#(scheme-id fields) . each-any) . _)))) K10431@t))) (K7761@syntax-dispatch K10431@t '()))) K10429@clause*))) (set! K10196@get-mutator-indices (lambda (K10405@fields) ((letrec ((K10407@f (lambda (K10409@fields K10410@i) ((lambda (K10413@t) ((lambda (K10415@ls/false) (if K10415@ls/false (apply (lambda () '()) K10415@ls/false) ((lambda (K10417@t) ((lambda (K10419@ls/false) (if K10419@ls/false (apply (lambda (K10421@rest) (cons K10410@i (K10407@f K10421@rest (+ K10410@i '1)))) K10419@ls/false) ((lambda (K10423@t) ((lambda (K10425@ls/false) (if K10425@ls/false (apply (lambda (K10427@rest) (K10407@f K10427@rest (+ K10410@i '1))) K10425@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10423@t))) (K7761@syntax-dispatch K10423@t '(_ . any)))) K10417@t))) (K7761@syntax-dispatch K10417@t '((#(scheme-id mutable) . _) . any)))) K10413@t))) (K7761@syntax-dispatch K10413@t '()))) K10409@fields)))) K10407@f) K10405@fields '0))) (set! K10198@get-mutators (lambda (K10363@foo K10364@fields) ((lambda (K10368@gen-name) (begin (set! K10368@gen-name (lambda (K10403@x) (K7998@datum->syntax K10363@foo (string->symbol (string-append (symbol->string (K8000@syntax->datum K10363@foo)) '"-" (symbol->string (K8000@syntax->datum K10403@x)) '"-set!"))))) ((letrec ((K10369@f (lambda (K10371@fields) ((lambda (K10373@t) ((lambda (K10375@ls/false) (if K10375@ls/false (apply (lambda () '()) K10375@ls/false) ((lambda (K10377@t) ((lambda (K10379@ls/false) (if K10379@ls/false (apply (lambda (K10381@name K10382@accessor K10383@mutator K10384@rest) (cons K10383@mutator (K10369@f K10384@rest))) K10379@ls/false) ((lambda (K10389@t) ((lambda (K10391@ls/false) (if K10391@ls/false (apply (lambda (K10393@name K10394@rest) (cons (K10368@gen-name K10393@name) (K10369@f K10394@rest))) K10391@ls/false) ((lambda (K10397@t) ((lambda (K10399@ls/false) (if K10399@ls/false (apply (lambda (K10401@rest) (K10369@f K10401@rest)) K10399@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10397@t))) (K7761@syntax-dispatch K10397@t '(_ . any)))) K10389@t))) (K7761@syntax-dispatch K10389@t '((#(scheme-id mutable) any) . any)))) K10377@t))) (K7761@syntax-dispatch K10377@t '((#(scheme-id mutable) any any any) . any)))) K10373@t))) (K7761@syntax-dispatch K10373@t '()))) K10371@fields)))) K10369@f) K10364@fields))) '#f))) (set! K10200@get-accessors (lambda (K10295@foo K10296@fields) ((lambda (K10300@gen-name) (begin (set! K10300@gen-name (lambda (K10361@x) (K7998@datum->syntax K10295@foo (string->symbol (string-append (symbol->string (K8000@syntax->datum K10295@foo)) '"-" (symbol->string (K8000@syntax->datum K10361@x))))))) (map (lambda (K10301@field) ((lambda (K10303@t) ((lambda (K10305@ls/false) (if (and K10305@ls/false (apply (lambda (K10307@name K10308@accessor K10309@mutator) (K7264@id? K10308@accessor)) K10305@ls/false)) (apply (lambda (K10313@name K10314@accessor K10315@mutator) K10314@accessor) K10305@ls/false) ((lambda (K10319@t) ((lambda (K10321@ls/false) (if (and K10321@ls/false (apply (lambda (K10323@name K10324@accessor) (K7264@id? K10324@accessor)) K10321@ls/false)) (apply (lambda (K10327@name K10328@accessor) K10328@accessor) K10321@ls/false) ((lambda (K10331@t) ((lambda (K10333@ls/false) (if (and K10333@ls/false (apply (lambda (K10335@name) (K7264@id? K10335@name)) K10333@ls/false)) (apply (lambda (K10337@name) (K10300@gen-name K10337@name)) K10333@ls/false) ((lambda (K10339@t) ((lambda (K10341@ls/false) (if (and K10341@ls/false (apply (lambda (K10343@name) (K7264@id? K10343@name)) K10341@ls/false)) (apply (lambda (K10345@name) (K10300@gen-name K10345@name)) K10341@ls/false) ((lambda (K10347@t) ((lambda (K10349@ls/false) (if (and K10349@ls/false (apply (lambda (K10351@name) (K7264@id? K10351@name)) K10349@ls/false)) (apply (lambda (K10353@name) (K10300@gen-name K10353@name)) K10349@ls/false) ((lambda (K10355@t) ((lambda (K10357@ls/false) (if K10357@ls/false (apply (lambda (K10359@others) (K7994@syntax-violation '#f '"invalid field spec" K10301@field)) K10357@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10355@t))) (K7761@syntax-dispatch K10355@t 'any))) K10347@t))) (K7761@syntax-dispatch K10347@t 'any))) K10339@t))) (K7761@syntax-dispatch K10339@t '(#(scheme-id immutable) any)))) K10331@t))) (K7761@syntax-dispatch K10331@t '(#(scheme-id mutable) any)))) K10319@t))) (K7761@syntax-dispatch K10319@t '(#(scheme-id immutable) any any)))) K10303@t))) (K7761@syntax-dispatch K10303@t '(#(scheme-id mutable) any any any)))) K10301@field)) K10296@fields))) '#f))) (set! K10202@enumerate (lambda (K10287@ls) ((letrec ((K10289@f (lambda (K10291@ls K10292@i) (if (null? K10291@ls) '() (cons K10292@i (K10289@f (cdr K10291@ls) (+ K10292@i '1))))))) K10289@f) K10287@ls '0))) (set! K10204@do-define-record (lambda (K10247@namespec K10248@clause*) ((lambda (K10251@foo) ((lambda (K10253@foo-rtd) ((lambda (K10255@foo-rcd) ((lambda (K10257@protocol) ((lambda (K10259@make-foo) ((lambda (K10261@fields) ((lambda (K10263@idx*) ((lambda (K10265@foo-x*) ((lambda (K10267@set-foo-x!*) ((lambda (K10269@set-foo-idx*) ((lambda (K10271@foo?) ((lambda (K10273@foo-rtd-code) ((lambda (K10275@foo-rcd-code) ((lambda (K10277@protocol-code) ((lambda () (K7687@bless (cons 'begin (cons (list 'define K10253@foo-rtd K10273@foo-rtd-code) (cons (list 'define K10257@protocol K10277@protocol-code) (cons (list 'define K10255@foo-rcd K10275@foo-rcd-code) (cons (list 'define-syntax K10251@foo (list 'list ''$rtd (list 'syntax K10253@foo-rtd) (list 'syntax K10255@foo-rcd))) (cons (list 'define K10271@foo? (list 'record-predicate K10253@foo-rtd)) (cons (list 'define K10259@make-foo (list 'record-constructor K10255@foo-rcd)) (append (map (lambda (K10279@foo-x K10280@idx) (list 'define K10279@foo-x (list 'record-accessor K10253@foo-rtd K10280@idx))) K10265@foo-x* K10263@idx*) (map (lambda (K10283@set-foo-x! K10284@idx) (list 'define K10283@set-foo-x! (list 'record-mutator K10253@foo-rtd K10284@idx))) K10267@set-foo-x!* K10269@set-foo-idx*))))))))))))) (K10192@get-protocol-code K10248@clause*))) (K10190@foo-rcd-code K10248@clause* K10253@foo-rtd K10257@protocol (K10188@parent-rcd-code K10248@clause*)))) (K10184@foo-rtd-code K10251@foo K10248@clause* (K10186@parent-rtd-code K10248@clause*)))) (K10180@get-record-predicate-name K10247@namespec))) (K10196@get-mutator-indices K10261@fields))) (K10198@get-mutators K10251@foo K10261@fields))) (K10200@get-accessors K10251@foo K10261@fields))) (K10202@enumerate K10261@fields))) (K10194@get-fields K10248@clause*))) (K10178@get-record-constructor-name K10247@namespec))) (K6148@K5912@gensym))) (K6148@K5912@gensym))) (K6148@K5912@gensym))) (K10176@get-record-name K10247@namespec)))) (set! K10206@verify-clauses (lambda (K10215@x K10216@cls*) ((lambda (K10220@valid-kwds K10222@free-id-member?) (begin (set! K10220@valid-kwds (map K7687@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! K10222@free-id-member? (lambda (K10243@x K10244@ls) (and (pair? K10244@ls) (or (K7272@free-id=? K10243@x (car K10244@ls)) (K10222@free-id-member? K10243@x (cdr K10244@ls)))))) ((letrec ((K10223@f (lambda (K10225@cls* K10226@seen*) (if (not (null? K10225@cls*)) ((lambda (K10229@t) ((lambda (K10231@ls/false) (if K10231@ls/false (apply (lambda (K10233@kwd K10234@rest) (if (or (not (K7264@id? K10233@kwd)) (not (K10222@free-id-member? K10233@kwd K10220@valid-kwds))) (K7994@syntax-violation '#f '"not a valid define-record-type keyword" K10233@kwd) (if (K7278@bound-id-member? K10233@kwd K10226@seen*) (K7994@syntax-violation '#f '"duplicate use of keyword " K10215@x K10233@kwd) (K10223@f (cdr K10225@cls*) (cons K10233@kwd K10226@seen*))))) K10231@ls/false) ((lambda (K10237@t) ((lambda (K10239@ls/false) (if K10239@ls/false (apply (lambda (K10241@cls) (K7994@syntax-violation '#f '"malformed define-record-type clause" K10241@cls)) K10239@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10237@t))) (K7761@syntax-dispatch K10237@t 'any))) K10229@t))) (K7761@syntax-dispatch K10229@t '(any . any)))) (car K10225@cls*)) (void))))) K10223@f) K10216@cls* '()))) '#f '#f))) ((lambda (K10207@t) ((lambda (K10209@ls/false) (if K10209@ls/false (apply (lambda (K10211@namespec K10212@clause*) (begin (K10206@verify-clauses K10171@x K10212@clause*) (K10204@do-define-record K10211@namespec K10212@clause*))) K10209@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10207@t))) (K7761@syntax-dispatch K10207@t '(_ any . each-any)))) K10171@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! K7751@define-condition-type-macro (lambda (K10679@x) ((lambda (K10682@mkname) (begin (set! K10682@mkname (lambda (K10727@name K10728@suffix) (K7998@datum->syntax K10727@name (string->symbol (string-append (symbol->string (K8000@syntax->datum K10727@name)) K10728@suffix))))) ((lambda (K10683@t) ((lambda (K10685@ls/false) (if (and K10685@ls/false (apply (lambda (K10687@ctxt K10688@name K10689@super K10690@constructor K10691@predicate K10692@field* K10693@accessor*) (and (K7264@id? K10688@name) (K7264@id? K10689@super) (K7264@id? K10690@constructor) (K7264@id? K10691@predicate) (for-all K7264@id? K10692@field*) (for-all K7264@id? K10693@accessor*))) K10685@ls/false)) (apply (lambda (K10701@ctxt K10702@name K10703@super K10704@constructor K10705@predicate K10706@field* K10707@accessor*) ((lambda (K10715@aux-accessor*) (K7687@bless (cons 'begin (cons (cons 'define-record-type (cons (list K10702@name K10704@constructor (K6148@K5912@gensym)) (cons (list 'parent K10703@super) (cons (cons 'fields (map (lambda (K10717@field K10718@aux) (list 'immutable K10717@field K10718@aux)) K10706@field* K10715@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define K10705@predicate (list 'condition-predicate (list 'record-type-descriptor K10702@name))) (map (lambda (K10721@accessor K10722@aux) (list 'define K10721@accessor (list 'condition-accessor (list 'record-type-descriptor K10702@name) K10722@aux))) K10707@accessor* K10715@aux-accessor*)))))) (map (lambda (K10725@x) (K6148@K5912@gensym)) K10707@accessor*))) K10685@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10683@t))) (K7761@syntax-dispatch K10683@t '(any any any any any . #(each (any any)))))) K10679@x))) '#f))) (set! K7753@incorrect-usage-macro (lambda (K10731@e) (K7994@syntax-violation '#f '"incorrect usage of auxiliary keyword" K10731@e))) (set! K7755@parameterize-macro (lambda (K10733@e) ((lambda (K10735@t) ((lambda (K10737@ls/false) (if K10737@ls/false (apply (lambda (K10739@b K10740@b*) (K7687@bless (cons 'let (cons '() (cons K10739@b K10740@b*))))) K10737@ls/false) ((lambda (K10743@t) ((lambda (K10745@ls/false) (if K10745@ls/false (apply (lambda (K10747@olhs* K10748@orhs* K10749@b K10750@b*) ((lambda (K10755@lhs* K10756@rhs*) (K7687@bless (cons (list 'lambda (append K10755@lhs* K10756@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (K10759@lhs K10760@rhs) (list 'let (list (list 't (list K10759@lhs))) (list K10759@lhs K10760@rhs) (cons 'set! (cons K10760@rhs '(t))))) K10755@lhs* K10756@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons K10749@b K10750@b*))) '(swap)))))) (append K10747@olhs* K10748@orhs*)))) (K7976@generate-temporaries K10747@olhs*) (K7976@generate-temporaries K10748@orhs*))) K10745@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10743@t))) (K7761@syntax-dispatch K10743@t '(_ #(each (any any)) any . each-any)))) K10735@t))) (K7761@syntax-dispatch K10735@t '(_ () any . each-any)))) K10733@e))) (set! K7757@foreign-call-transformer (lambda (K10763@e K10764@r K10765@mr) ((lambda (K10769@t) ((lambda (K10771@ls/false) (if K10771@ls/false (apply (lambda (K10773@name K10774@arg*) (cons 'foreign-call (cons (K7795@chi-expr K10773@name K10764@r K10765@mr) (K7791@chi-expr* K10774@arg* K10764@r K10765@mr)))) K10771@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10769@t))) (K7761@syntax-dispatch K10769@t '(_ any . each-any)))) K10763@e))) (set! K7759@convert-pattern (lambda (K10777@pattern K10778@keys) ((lambda (K10782@cvt* K10784@cvt) (begin (set! K10782@cvt* (lambda (K10927@p* K10928@n K10929@ids) (if (null? K10927@p*) (values '() K10929@ids) (call-with-values (lambda () (K10782@cvt* (cdr K10927@p*) K10928@n K10929@ids)) (lambda (K10935@K10933@y K10936@K10934@ids) ((lambda (K10939@ids K10940@y) (call-with-values (lambda () (K10784@cvt (car K10927@p*) K10928@n K10939@ids)) (lambda (K10945@K10943@x K10946@K10944@ids) ((lambda (K10949@ids K10950@x) (values (cons K10950@x K10940@y) K10949@ids)) K10946@K10944@ids K10945@K10943@x)))) K10936@K10934@ids K10935@K10933@y)))))) (set! K10784@cvt (lambda (K10785@p K10786@n K10787@ids) ((lambda (K10791@t) ((lambda (K10793@ls/false) (if (and K10793@ls/false (apply (lambda (K10795@id) (K7264@id? K10795@id)) K10793@ls/false)) (apply (lambda (K10797@id) (if (K7278@bound-id-member? K10785@p K10778@keys) (values (vector 'free-id K10785@p) K10787@ids) (if (K7272@free-id=? K10785@p (K7643@scheme-stx '_)) (values '_ K10787@ids) (values 'any (cons (cons K10785@p K10786@n) K10787@ids))))) K10793@ls/false) ((lambda (K10799@t) ((lambda (K10801@ls/false) (if (and K10801@ls/false (apply (lambda (K10803@p K10804@dots) (K7763@ellipsis? K10804@dots)) K10801@ls/false)) (apply (lambda (K10807@p K10808@dots) (call-with-values (lambda () (K10784@cvt K10807@p (+ K10786@n '1) K10787@ids)) (lambda (K10813@K10811@p K10814@K10812@ids) ((lambda (K10817@ids K10818@p) (values (if (eq? K10818@p 'any) 'each-any (vector 'each K10818@p)) K10817@ids)) K10814@K10812@ids K10813@K10811@p)))) K10801@ls/false) ((lambda (K10821@t) ((lambda (K10823@ls/false) (if (and K10823@ls/false (apply (lambda (K10825@x K10826@dots K10827@ys K10828@z) (K7763@ellipsis? K10826@dots)) K10823@ls/false)) (apply (lambda (K10833@x K10834@dots K10835@ys K10836@z) (call-with-values (lambda () (K10784@cvt K10836@z K10786@n K10787@ids)) (lambda (K10843@K10841@z K10844@K10842@ids) ((lambda (K10847@ids K10848@z) (call-with-values (lambda () (K10782@cvt* K10835@ys K10786@n K10847@ids)) (lambda (K10853@K10851@ys K10854@K10852@ids) ((lambda (K10857@ids K10858@ys) (call-with-values (lambda () (K10784@cvt K10833@x (+ K10786@n '1) K10857@ids)) (lambda (K10863@K10861@x K10864@K10862@ids) ((lambda (K10867@ids K10868@x) (values (vector 'each+ K10868@x (reverse K10858@ys) K10848@z) K10867@ids)) K10864@K10862@ids K10863@K10861@x)))) K10854@K10852@ids K10853@K10851@ys)))) K10844@K10842@ids K10843@K10841@z)))) K10823@ls/false) ((lambda (K10871@t) ((lambda (K10873@ls/false) (if K10873@ls/false (apply (lambda (K10875@x K10876@y) (call-with-values (lambda () (K10784@cvt K10876@y K10786@n K10787@ids)) (lambda (K10881@K10879@y K10882@K10880@ids) ((lambda (K10885@ids K10886@y) (call-with-values (lambda () (K10784@cvt K10875@x K10786@n K10885@ids)) (lambda (K10891@K10889@x K10892@K10890@ids) ((lambda (K10895@ids K10896@x) (values (cons K10896@x K10886@y) K10895@ids)) K10892@K10890@ids K10891@K10889@x)))) K10882@K10880@ids K10881@K10879@y)))) K10873@ls/false) ((lambda (K10899@t) ((lambda (K10901@ls/false) (if K10901@ls/false (apply (lambda () (values '() K10787@ids)) K10901@ls/false) ((lambda (K10903@t) ((lambda (K10905@ls/false) (if (and K10905@ls/false (apply (lambda (K10907@p) (not (K7208@stx? K10907@p))) K10905@ls/false)) (apply (lambda (K10909@p) (call-with-values (lambda () (K10784@cvt K10909@p K10786@n K10787@ids)) (lambda (K10913@K10911@p K10914@K10912@ids) ((lambda (K10917@ids K10918@p) (values (vector 'vector K10918@p) K10917@ids)) K10914@K10912@ids K10913@K10911@p)))) K10905@ls/false) ((lambda (K10921@t) ((lambda (K10923@ls/false) (if K10923@ls/false (apply (lambda (K10925@datum) (values (vector 'atom (K7286@stx->datum K10925@datum)) K10787@ids)) K10923@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K10921@t))) (K7761@syntax-dispatch K10921@t 'any))) K10903@t))) (K7761@syntax-dispatch K10903@t '#(vector each-any)))) K10899@t))) (K7761@syntax-dispatch K10899@t '()))) K10871@t))) (K7761@syntax-dispatch K10871@t '(any . any)))) K10821@t))) (K7761@syntax-dispatch K10821@t '(any any . #(each+ any () any))))) K10799@t))) (K7761@syntax-dispatch K10799@t '(any any)))) K10791@t))) (K7761@syntax-dispatch K10791@t 'any))) K10785@p))) (K10784@cvt K10777@pattern '0 '()))) '#f '#f))) (set! K7761@syntax-dispatch ((lambda () ((lambda (K10954@stx^ K10956@match-each K10958@match-each+ K10960@match-each-any K10962@match-empty K10964@combine K10966@match* K10968@match) (begin (set! K10954@stx^ (lambda (K11155@e K11156@m* K11157@s* K11158@ae*) (if (and (null? K11156@m*) (null? K11157@s*) (null? K11158@ae*)) K11155@e (K7240@mkstx K11155@e K11156@m* K11157@s* K11158@ae*)))) (set! K10956@match-each (lambda (K11126@e K11127@p K11128@m* K11129@s* K11130@ae*) (if (pair? K11126@e) ((lambda (K11136@first) (and K11136@first ((lambda (K11138@rest) (and K11138@rest (cons K11136@first K11138@rest))) (K10956@match-each (cdr K11126@e) K11127@p K11128@m* K11129@s* K11130@ae*)))) (K10968@match (car K11126@e) K11127@p K11128@m* K11129@s* K11130@ae* '())) (if (null? K11126@e) '() (if (K7208@stx? K11126@e) (and (not (K7134@top-marked? K11128@m*)) (call-with-values (lambda () (K7238@join-wraps K11128@m* K11129@s* K11130@ae* K11126@e)) (lambda (K11143@K11140@m* K11144@K11141@s* K11145@K11142@ae*) ((lambda (K11149@ae* K11150@s* K11151@m*) (K10956@match-each (K7212@stx-expr K11126@e) K11127@p K11151@m* K11150@s* K11149@ae*)) K11145@K11142@ae* K11144@K11141@s* K11143@K11140@m*)))) (if (K6151@K5918@annotation? K11126@e) (K10956@match-each (K6153@K5922@annotation-expression K11126@e) K11127@p K11128@m* K11129@s* K11130@ae*) '#f)))))) (set! K10958@match-each+ (lambda (K11068@e K11069@x-pat K11070@y-pat K11071@z-pat K11072@m* K11073@s* K11074@ae* K11075@r) ((letrec ((K11084@f (lambda (K11086@e K11087@m* K11088@s* K11089@ae*) (if (pair? K11086@e) (call-with-values (lambda () (K11084@f (cdr K11086@e) K11087@m* K11088@s* K11089@ae*)) (lambda (K11097@K11094@xr* K11098@K11095@y-pat K11099@K11096@r) ((lambda (K11103@r K11104@y-pat K11105@xr*) (if K11103@r (if (null? K11104@y-pat) ((lambda (K11109@xr) (if K11109@xr (values (cons K11109@xr K11105@xr*) K11104@y-pat K11103@r) (values '#f '#f '#f))) (K10968@match (car K11086@e) K11069@x-pat K11087@m* K11088@s* K11089@ae* '())) (values '() (cdr K11104@y-pat) (K10968@match (car K11086@e) (car K11104@y-pat) K11087@m* K11088@s* K11089@ae* K11103@r))) (values '#f '#f '#f))) K11099@K11096@r K11098@K11095@y-pat K11097@K11094@xr*))) (if (K7208@stx? K11086@e) (if (K7134@top-marked? K11087@m*) (values '() K11070@y-pat (K10968@match K11086@e K11071@z-pat K11087@m* K11088@s* K11089@ae* K11075@r)) (call-with-values (lambda () (K7238@join-wraps K11087@m* K11088@s* K11089@ae* K11086@e)) (lambda (K11114@K11111@m* K11115@K11112@s* K11116@K11113@ae*) ((lambda (K11120@ae* K11121@s* K11122@m*) (K11084@f (K7212@stx-expr K11086@e) K11122@m* K11121@s* K11120@ae*)) K11116@K11113@ae* K11115@K11112@s* K11114@K11111@m*)))) (if (K6151@K5918@annotation? K11086@e) (K11084@f (K6153@K5922@annotation-expression K11086@e) K11087@m* K11088@s* K11089@ae*) (values '() K11070@y-pat (K10968@match K11086@e K11071@z-pat K11087@m* K11088@s* K11089@ae* K11075@r)))))))) K11084@f) K11068@e K11072@m* K11073@s* K11074@ae*))) (set! K10960@match-each-any (lambda (K11043@e K11044@m* K11045@s* K11046@ae*) (if (pair? K11043@e) ((lambda (K11051@l) (and K11051@l (cons (K10954@stx^ (car K11043@e) K11044@m* K11045@s* K11046@ae*) K11051@l))) (K10960@match-each-any (cdr K11043@e) K11044@m* K11045@s* K11046@ae*)) (if (null? K11043@e) '() (if (K7208@stx? K11043@e) (and (not (K7134@top-marked? K11044@m*)) (call-with-values (lambda () (K7238@join-wraps K11044@m* K11045@s* K11046@ae* K11043@e)) (lambda (K11056@K11053@m* K11057@K11054@s* K11058@K11055@ae*) ((lambda (K11062@ae* K11063@s* K11064@m*) (K10960@match-each-any (K7212@stx-expr K11043@e) K11064@m* K11063@s* K11062@ae*)) K11058@K11055@ae* K11057@K11054@s* K11056@K11053@m*)))) (if (K6151@K5918@annotation? K11043@e) (K10960@match-each-any (K6153@K5922@annotation-expression K11043@e) K11044@m* K11045@s* K11046@ae*) '#f)))))) (set! K10962@match-empty (lambda (K11037@p K11038@r) (if (null? K11037@p) K11038@r (if (eq? K11037@p '_) K11038@r (if (eq? K11037@p 'any) (cons '() K11038@r) (if (pair? K11037@p) (K10962@match-empty (car K11037@p) (K10962@match-empty (cdr K11037@p) K11038@r)) (if (eq? K11037@p 'each-any) (cons '() K11038@r) ((lambda (K11041@t) (if (memv K11041@t '(each)) (K10962@match-empty (vector-ref K11037@p '1) K11038@r) (if (memv K11041@t '(each+)) (K10962@match-empty (vector-ref K11037@p '1) (K10962@match-empty (reverse (vector-ref K11037@p '2)) (K10962@match-empty (vector-ref K11037@p '3) K11038@r))) (if (memv K11041@t '(free-id atom)) K11038@r (if (memv K11041@t '(scheme-id atom)) K11038@r (if (memv K11041@t '(vector)) (K10962@match-empty (vector-ref K11037@p '1) K11038@r) (assertion-violation 'syntax-dispatch '"invalid pattern" K11037@p))))))) (vector-ref K11037@p '0))))))))) (set! K10964@combine (lambda (K11033@r* K11034@r) (if (null? (car K11033@r*)) K11034@r (cons (map car K11033@r*) (K10964@combine (map cdr K11033@r*) K11034@r))))) (set! K10966@match* (lambda (K11000@e K11001@p K11002@m* K11003@s* K11004@ae* K11005@r) (if (null? K11001@p) (and (null? K11000@e) K11005@r) (if (pair? K11001@p) (and (pair? K11000@e) (K10968@match (car K11000@e) (car K11001@p) K11002@m* K11003@s* K11004@ae* (K10968@match (cdr K11000@e) (cdr K11001@p) K11002@m* K11003@s* K11004@ae* K11005@r))) (if (eq? K11001@p 'each-any) ((lambda (K11012@l) (and K11012@l (cons K11012@l K11005@r))) (K10960@match-each-any K11000@e K11002@m* K11003@s* K11004@ae*)) ((lambda (K11014@t) (if (memv K11014@t '(each)) (if (null? K11000@e) (K10962@match-empty (vector-ref K11001@p '1) K11005@r) ((lambda (K11016@r*) (and K11016@r* (K10964@combine K11016@r* K11005@r))) (K10956@match-each K11000@e (vector-ref K11001@p '1) K11002@m* K11003@s* K11004@ae*))) (if (memv K11014@t '(free-id)) (and (symbol? K11000@e) (K7134@top-marked? K11002@m*) (K7272@free-id=? (K10954@stx^ K11000@e K11002@m* K11003@s* K11004@ae*) (vector-ref K11001@p '1)) K11005@r) (if (memv K11014@t '(scheme-id)) (and (symbol? K11000@e) (K7134@top-marked? K11002@m*) (K7272@free-id=? (K10954@stx^ K11000@e K11002@m* K11003@s* K11004@ae*) (K7643@scheme-stx (vector-ref K11001@p '1))) K11005@r) (if (memv K11014@t '(each+)) (call-with-values (lambda () (K10958@match-each+ K11000@e (vector-ref K11001@p '1) (vector-ref K11001@p '2) (vector-ref K11001@p '3) K11002@m* K11003@s* K11004@ae* K11005@r)) (lambda (K11021@K11018@xr* K11022@K11019@y-pat K11023@K11020@r) ((lambda (K11027@r K11028@y-pat K11029@xr*) (and K11027@r (null? K11028@y-pat) (if (null? K11029@xr*) (K10962@match-empty (vector-ref K11001@p '1) K11027@r) (K10964@combine K11029@xr* K11027@r)))) K11023@K11020@r K11022@K11019@y-pat K11021@K11018@xr*))) (if (memv K11014@t '(atom)) (and (fast-equal? (vector-ref K11001@p '1) (K7284@strip K11000@e K11002@m*)) K11005@r) (if (memv K11014@t '(vector)) (and (vector? K11000@e) (K10968@match (vector->list K11000@e) (vector-ref K11001@p '1) K11002@m* K11003@s* K11004@ae* K11005@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" K11001@p)))))))) (vector-ref K11001@p '0))))))) (set! K10968@match (lambda (K10973@e K10974@p K10975@m* K10976@s* K10977@ae* K10978@r) (if (not K10978@r) '#f (if (eq? K10974@p '_) K10978@r (if (eq? K10974@p 'any) (cons (K10954@stx^ K10973@e K10975@m* K10976@s* K10977@ae*) K10978@r) (if (K7208@stx? K10973@e) (and (not (K7134@top-marked? K10975@m*)) (call-with-values (lambda () (K7238@join-wraps K10975@m* K10976@s* K10977@ae* K10973@e)) (lambda (K10988@K10985@m* K10989@K10986@s* K10990@K10987@ae*) ((lambda (K10994@ae* K10995@s* K10996@m*) (K10968@match (K7212@stx-expr K10973@e) K10974@p K10996@m* K10995@s* K10994@ae* K10978@r)) K10990@K10987@ae* K10989@K10986@s* K10988@K10985@m*)))) (if (K6151@K5918@annotation? K10973@e) (K10968@match (K6153@K5922@annotation-expression K10973@e) K10974@p K10975@m* K10976@s* K10977@ae* K10978@r) (K10966@match* K10973@e K10974@p K10975@m* K10976@s* K10977@ae* K10978@r)))))))) (lambda (K10969@e K10970@p) (K10968@match K10969@e K10970@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! K7763@ellipsis? (lambda (K11163@x) (and (K7264@id? K11163@x) (K7272@free-id=? K11163@x (K7643@scheme-stx '...))))) (set! K7765@underscore? (lambda (K11165@x) (and (K7264@id? K11165@x) (K7272@free-id=? K11165@x (K7643@scheme-stx '_))))) (set! K7767@verify-literals (lambda (K11167@lits K11168@expr) (for-each (lambda (K11171@x) (if (or (not (K7264@id? K11171@x)) (K7763@ellipsis? K11171@x) (K7765@underscore? K11171@x)) (K7994@syntax-violation '#f '"invalid literal" K11168@expr K11171@x) (void))) K11167@lits))) (set! K7769@syntax-case-transformer ((lambda () ((lambda (K11174@build-dispatch-call K11176@invalid-ids-error K11178@gen-clause K11180@gen-syntax-case) (begin (set! K11174@build-dispatch-call (lambda (K11285@pvars K11286@expr K11287@y K11288@r K11289@mr) ((lambda (K11295@ids K11296@levels) ((lambda (K11299@labels K11300@new-vars) ((lambda (K11303@body) (list '(primitive apply) (K7100@K6910@build-lambda '#f K11300@new-vars K11303@body) K11287@y)) (K7795@chi-expr (K7244@add-subst (K7195@make-full-rib K11295@ids K11299@labels) K11286@expr) (append (map (lambda (K11305@label K11306@var K11307@level) (cons K11305@label (K7296@make-binding 'syntax (cons K11306@var K11307@level)))) K11299@labels K11300@new-vars (map cdr K11285@pvars)) K11288@r) K11289@mr))) (map K7140@gen-label K11295@ids) (map K7136@gen-lexical K11295@ids))) (map car K11285@pvars) (map cdr K11285@pvars)))) (set! K11176@invalid-ids-error (lambda (K11273@id* K11274@e K11275@class) ((letrec ((K11279@find (lambda (K11281@id* K11282@ok*) (if (null? K11281@id*) (K7994@syntax-violation '#f '"invalid syntax" K11274@e) (if (K7264@id? (car K11281@id*)) (if (K7278@bound-id-member? (car K11281@id*) K11282@ok*) (K7990@syntax-error (car K11281@id*) '"duplicate " K11275@class) (K11279@find (cdr K11281@id*) (cons (car K11281@id*) K11282@ok*))) (K7990@syntax-error (car K11281@id*) '"invalid " K11275@class)))))) K11279@find) K11273@id* '()))) (set! K11178@gen-clause (lambda (K11235@x K11236@keys K11237@clauses K11238@r K11239@mr K11240@pat K11241@fender K11242@expr) (call-with-values (lambda () (K7759@convert-pattern K11240@pat K11236@keys)) (lambda (K11253@K11251@p K11254@K11252@pvars) ((lambda (K11257@pvars K11258@p) (if (not (K7276@distinct-bound-ids? (map car K11257@pvars))) (K11176@invalid-ids-error (map car K11257@pvars) K11240@pat '"pattern variable") (if (not (for-all (lambda (K11261@x) (not (K7763@ellipsis? (car K11261@x)))) K11257@pvars)) (K7994@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" K11240@pat) ((lambda (K11263@y) ((lambda (K11265@test) ((lambda (K11267@conseq) ((lambda (K11269@altern) (list (K7100@K6910@build-lambda '#f (list K11263@y) (list 'if K11265@test K11267@conseq K11269@altern)) (list '(primitive syntax-dispatch) K11235@x (list 'quote K11258@p)))) (K11180@gen-syntax-case K11235@x K11236@keys K11237@clauses K11238@r K11239@mr))) (K11174@build-dispatch-call K11257@pvars K11242@expr K11263@y K11238@r K11239@mr))) (if (eq? K11241@fender '#t) K11263@y ((lambda (K11271@call) (list 'if K11263@y K11271@call (list 'quote '#f))) (K11174@build-dispatch-call K11257@pvars K11241@fender K11263@y K11238@r K11239@mr))))) (K7136@gen-lexical 'tmp))))) K11254@K11252@pvars K11253@K11251@p))))) (set! K11180@gen-syntax-case (lambda (K11201@x K11202@keys K11203@clauses K11204@r K11205@mr) (if (null? K11203@clauses) (list '(primitive syntax-error) K11201@x) ((lambda (K11211@t) ((lambda (K11213@ls/false) (if K11213@ls/false (apply (lambda (K11215@pat K11216@expr) (if (and (K7264@id? K11215@pat) (not (K7278@bound-id-member? K11215@pat K11202@keys)) (not (K7763@ellipsis? K11215@pat))) (if (K7272@free-id=? K11215@pat (K7643@scheme-stx '_)) (K7795@chi-expr K11216@expr K11204@r K11205@mr) ((lambda (K11219@lab K11220@lex) ((lambda (K11223@body) (list (K7100@K6910@build-lambda '#f (list K11220@lex) K11223@body) K11201@x)) (K7795@chi-expr (K7244@add-subst (K7195@make-full-rib (list K11215@pat) (list K11219@lab)) K11216@expr) (cons (cons K11219@lab (K7296@make-binding 'syntax (cons K11220@lex '0))) K11204@r) K11205@mr))) (K7140@gen-label K11215@pat) (K7136@gen-lexical K11215@pat))) (K11178@gen-clause K11201@x K11202@keys (cdr K11203@clauses) K11204@r K11205@mr K11215@pat '#t K11216@expr))) K11213@ls/false) ((lambda (K11225@t) ((lambda (K11227@ls/false) (if K11227@ls/false (apply (lambda (K11229@pat K11230@fender K11231@expr) (K11178@gen-clause K11201@x K11202@keys (cdr K11203@clauses) K11204@r K11205@mr K11229@pat K11230@fender K11231@expr)) K11227@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K11225@t))) (K7761@syntax-dispatch K11225@t '(any any any)))) K11211@t))) (K7761@syntax-dispatch K11211@t '(any any)))) (car K11203@clauses))))) (lambda (K11181@e K11182@r K11183@mr) ((lambda (K11187@t) ((lambda (K11189@ls/false) (if K11189@ls/false (apply (lambda (K11191@expr K11192@keys K11193@clauses) (begin (K7767@verify-literals K11192@keys K11181@e) ((lambda (K11197@x) ((lambda (K11199@body) (list (K7100@K6910@build-lambda '#f (list K11197@x) K11199@body) (K7795@chi-expr K11191@expr K11182@r K11183@mr))) (K11180@gen-syntax-case K11197@x K11192@keys K11193@clauses K11182@r K11183@mr))) (K7136@gen-lexical 'tmp)))) K11189@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K11187@t))) (K7761@syntax-dispatch K11187@t '(_ any each-any . each-any)))) K11181@e)))) '#f '#f '#f '#f)))) (set! K7771@ellipsis-map (lambda (K11311@proc K11312@ls . K11315@ls*) ((lambda (K11318@who) (begin (set! K11318@who '...) (begin (if (not (list? K11312@ls)) (assertion-violation K11318@who '"not a list" K11312@ls) (void)) (if (not (null? K11315@ls*)) ((lambda (K11319@n) (for-each (lambda (K11321@x) (begin (if (not (list? K11321@x)) (assertion-violation K11318@who '"not a list" K11321@x) (void)) (if (not (= (length K11321@x) K11319@n)) (assertion-violation K11318@who '"length mismatch" K11312@ls K11321@x) (void)))) K11315@ls*)) (length K11312@ls)) (void)) (apply map K11311@proc K11312@ls K11315@ls*)))) '#f))) (set! K7773@syntax-transformer ((lambda () ((lambda (K11324@gen-syntax K11326@gen-ref K11328@gen-append K11330@gen-mappend K11332@gen-map K11334@gen-cons K11336@gen-vector K11338@regen) (begin (set! K11324@gen-syntax (lambda (K11439@src K11440@e K11441@r K11442@maps K11443@ellipsis? K11444@vec?) ((lambda (K11451@t) ((lambda (K11453@ls/false) (if (and K11453@ls/false (apply (lambda (K11455@dots) (K11443@ellipsis? K11455@dots)) K11453@ls/false)) (apply (lambda (K11457@dots) (K7994@syntax-violation '#f '"misplaced ellipsis in syntax form" K11439@src)) K11453@ls/false) ((lambda (K11459@t) ((lambda (K11461@ls/false) (if (and K11461@ls/false (apply (lambda (K11463@id) (K7264@id? K11463@id)) K11461@ls/false)) (apply (lambda (K11465@id) ((lambda (K11467@label) ((lambda (K11469@b) ((lambda () (if (eq? (K7298@binding-type K11469@b) 'syntax) (call-with-values (lambda () ((lambda (K11473@var.lev) (K11326@gen-ref K11439@src (car K11473@var.lev) (cdr K11473@var.lev) K11442@maps)) (K7300@binding-value K11469@b))) (lambda (K11475@K11471@var K11476@K11472@maps) ((lambda (K11479@maps K11480@var) (values (list 'ref K11480@var) K11479@maps)) K11476@K11472@maps K11475@K11471@var))) (values (list 'quote K11440@e) K11442@maps))))) (K7294@label->binding K11467@label K11441@r))) (K7290@id->label K11440@e))) K11461@ls/false) ((lambda (K11483@t) ((lambda (K11485@ls/false) (if (and K11485@ls/false (apply (lambda (K11487@dots K11488@e) (K11443@ellipsis? K11487@dots)) K11485@ls/false)) (apply (lambda (K11491@dots K11492@e) (if K11444@vec? (K7994@syntax-violation '#f '"misplaced ellipsis in syntax form" K11439@src) (K11324@gen-syntax K11439@src K11492@e K11441@r K11442@maps (lambda (K11495@x) '#f) '#f))) K11485@ls/false) ((lambda (K11497@t) ((lambda (K11499@ls/false) (if (and K11499@ls/false (apply (lambda (K11501@x K11502@dots K11503@y) (K11443@ellipsis? K11502@dots)) K11499@ls/false)) (apply (lambda (K11507@x K11508@dots K11509@y) ((letrec ((K11513@f (lambda (K11515@y K11516@k) ((lambda (K11519@t) ((lambda (K11521@ls/false) (if K11521@ls/false (apply (lambda () (K11516@k K11442@maps)) K11521@ls/false) ((lambda (K11523@t) ((lambda (K11525@ls/false) (if (and K11525@ls/false (apply (lambda (K11527@dots K11528@y) (K11443@ellipsis? K11527@dots)) K11525@ls/false)) (apply (lambda (K11531@dots K11532@y) (K11513@f K11532@y (lambda (K11535@maps) (call-with-values (lambda () (K11516@k (cons '() K11535@maps))) (lambda (K11539@K11537@x K11540@K11538@maps) ((lambda (K11543@maps K11544@x) (if (null? (car K11543@maps)) (K7994@syntax-violation '#f '"extra ellipsis in syntax form" K11439@src) (values (K11330@gen-mappend K11544@x (car K11543@maps)) (cdr K11543@maps)))) K11540@K11538@maps K11539@K11537@x)))))) K11525@ls/false) ((lambda (K11547@t) ((lambda (K11549@ls/false) (if K11549@ls/false (apply (lambda () (call-with-values (lambda () (K11324@gen-syntax K11439@src K11515@y K11441@r K11442@maps K11443@ellipsis? K11444@vec?)) (lambda (K11553@K11551@y K11554@K11552@maps) ((lambda (K11557@maps K11558@y) (call-with-values (lambda () (K11516@k K11557@maps)) (lambda (K11563@K11561@x K11564@K11562@maps) ((lambda (K11567@maps K11568@x) (values (K11328@gen-append K11568@x K11558@y) K11567@maps)) K11564@K11562@maps K11563@K11561@x)))) K11554@K11552@maps K11553@K11551@y)))) K11549@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K11547@t))) (K7761@syntax-dispatch K11547@t '_))) K11523@t))) (K7761@syntax-dispatch K11523@t '(any . any)))) K11519@t))) (K7761@syntax-dispatch K11519@t '()))) K11515@y)))) K11513@f) K11509@y (lambda (K11571@maps) (call-with-values (lambda () (K11324@gen-syntax K11439@src K11507@x K11441@r (cons '() K11571@maps) K11443@ellipsis? '#f)) (lambda (K11575@K11573@x K11576@K11574@maps) ((lambda (K11579@maps K11580@x) (if (null? (car K11579@maps)) (K7994@syntax-violation '#f '"extra ellipsis in syntax form" K11439@src) (values (K11332@gen-map K11580@x (car K11579@maps)) (cdr K11579@maps)))) K11576@K11574@maps K11575@K11573@x)))))) K11499@ls/false) ((lambda (K11583@t) ((lambda (K11585@ls/false) (if K11585@ls/false (apply (lambda (K11587@x K11588@y) (call-with-values (lambda () (K11324@gen-syntax K11439@src K11587@x K11441@r K11442@maps K11443@ellipsis? '#f)) (lambda (K11593@K11591@xnew K11594@K11592@maps) ((lambda (K11597@maps K11598@xnew) (call-with-values (lambda () (K11324@gen-syntax K11439@src K11588@y K11441@r K11597@maps K11443@ellipsis? K11444@vec?)) (lambda (K11603@K11601@ynew K11604@K11602@maps) ((lambda (K11607@maps K11608@ynew) (values (K11334@gen-cons K11440@e K11587@x K11588@y K11598@xnew K11608@ynew) K11607@maps)) K11604@K11602@maps K11603@K11601@ynew)))) K11594@K11592@maps K11593@K11591@xnew)))) K11585@ls/false) ((lambda (K11611@t) ((lambda (K11613@ls/false) (if K11613@ls/false (apply (lambda (K11615@ls) (call-with-values (lambda () (K11324@gen-syntax K11439@src K11615@ls K11441@r K11442@maps K11443@ellipsis? '#t)) (lambda (K11619@K11617@lsnew K11620@K11618@maps) ((lambda (K11623@maps K11624@lsnew) (values (K11336@gen-vector K11440@e K11615@ls K11624@lsnew) K11623@maps)) K11620@K11618@maps K11619@K11617@lsnew)))) K11613@ls/false) ((lambda (K11627@t) ((lambda (K11629@ls/false) (if K11629@ls/false (apply (lambda () (values (list 'quote K11440@e) K11442@maps)) K11629@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K11627@t))) (K7761@syntax-dispatch K11627@t '_))) K11611@t))) (K7761@syntax-dispatch K11611@t '#(vector each-any)))) K11583@t))) (K7761@syntax-dispatch K11583@t '(any . any)))) K11497@t))) (K7761@syntax-dispatch K11497@t '(any any . any)))) K11483@t))) (K7761@syntax-dispatch K11483@t '(any any)))) K11459@t))) (K7761@syntax-dispatch K11459@t 'any))) K11451@t))) (K7761@syntax-dispatch K11451@t 'any))) K11440@e))) (set! K11326@gen-ref (lambda (K11415@src K11416@var K11417@level K11418@maps) (if (= K11417@level '0) (values K11416@var K11418@maps) (if (null? K11418@maps) (K7994@syntax-violation '#f '"missing ellipsis in syntax form" K11415@src) (call-with-values (lambda () (K11326@gen-ref K11415@src K11416@var (- K11417@level '1) (cdr K11418@maps))) (lambda (K11425@K11423@outer-var K11426@K11424@outer-maps) ((lambda (K11429@outer-maps K11430@outer-var) ((lambda (K11433@t) (if K11433@t ((lambda (K11435@b) (values (cdr K11435@b) K11418@maps)) K11433@t) ((lambda (K11437@inner-var) (values K11437@inner-var (cons (cons (cons K11430@outer-var K11437@inner-var) (car K11418@maps)) K11429@outer-maps))) (K7136@gen-lexical 'tmp)))) (assq K11430@outer-var (car K11418@maps)))) K11426@K11424@outer-maps K11425@K11423@outer-var))))))) (set! K11328@gen-append (lambda (K11411@x K11412@y) (if (fast-equal? K11412@y ''()) K11411@x (list 'append K11411@x K11412@y)))) (set! K11330@gen-mappend (lambda (K11407@e K11408@map-env) (list 'apply '(primitive append) (K11332@gen-map K11407@e K11408@map-env)))) (set! K11332@gen-map (lambda (K11389@e K11390@map-env) ((lambda (K11393@formals K11394@actuals) (if (eq? (car K11389@e) 'ref) (car K11394@actuals) (if (for-all (lambda (K11397@x) (and (eq? (car K11397@x) 'ref) (memq (cadr K11397@x) K11393@formals))) (cdr K11389@e)) ((lambda (K11399@args) (cons 'map (cons (list 'primitive (car K11389@e)) K11399@args))) (map ((lambda (K11401@r) (lambda (K11403@x) (cdr (assq (cadr K11403@x) K11401@r)))) (map cons K11393@formals K11394@actuals)) (cdr K11389@e))) (cons* 'map (list 'lambda K11393@formals K11389@e) K11394@actuals)))) (map cdr K11390@map-env) (map (lambda (K11405@x) (list 'ref (car K11405@x))) K11390@map-env)))) (set! K11334@gen-cons (lambda (K11373@e K11374@x K11375@y K11376@xnew K11377@ynew) ((lambda (K11383@t) (if (memv K11383@t '(quote)) (if (eq? (car K11376@xnew) 'quote) ((lambda (K11385@xnew K11386@ynew) (if (and (eq? K11385@xnew K11374@x) (eq? K11386@ynew K11375@y)) (list 'quote K11373@e) (list 'quote (cons K11385@xnew K11386@ynew)))) (cadr K11376@xnew) (cadr K11377@ynew)) (if (null? (cadr K11377@ynew)) (list 'list K11376@xnew) (list 'cons K11376@xnew K11377@ynew))) (if (memv K11383@t '(list)) (cons 'list (cons K11376@xnew (cdr K11377@ynew))) (list 'cons K11376@xnew K11377@ynew)))) (car K11377@ynew)))) (set! K11336@gen-vector (lambda (K11367@e K11368@ls K11369@lsnew) (if (eq? (car K11369@lsnew) 'quote) (if (eq? (cadr K11369@lsnew) K11368@ls) (list 'quote K11367@e) (list 'quote (list->vector (cadr K11369@lsnew)))) (if (eq? (car K11369@lsnew) 'list) (cons 'vector (cdr K11369@lsnew)) (list 'list->vector K11369@lsnew))))) (set! K11338@regen (lambda (K11361@x) ((lambda (K11363@t) (if (memv K11363@t '(ref)) (cadr K11361@x) (if (memv K11363@t '(primitive)) (list 'primitive (cadr K11361@x)) (if (memv K11363@t '(quote)) (list 'quote (cadr K11361@x)) (if (memv K11363@t '(lambda)) (K7100@K6910@build-lambda '#f (cadr K11361@x) (K11338@regen (caddr K11361@x))) (if (memv K11363@t '(map)) ((lambda (K11365@ls) (cons '(primitive ellipsis-map) K11365@ls)) (map K11338@regen (cdr K11361@x))) (cons (list 'primitive (car K11361@x)) (map K11338@regen (cdr K11361@x))))))))) (car K11361@x)))) (lambda (K11339@e K11340@r K11341@mr) ((lambda (K11345@t) ((lambda (K11347@ls/false) (if K11347@ls/false (apply (lambda (K11349@x) (call-with-values (lambda () (K11324@gen-syntax K11339@e K11349@x K11340@r '() K7763@ellipsis? '#f)) (lambda (K11353@K11351@e K11354@K11352@maps) ((lambda (K11357@maps K11358@e) (K11338@regen K11358@e)) K11354@K11352@maps K11353@K11351@e)))) K11347@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K11345@t))) (K7761@syntax-dispatch K11345@t '(_ any)))) K11339@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! K7775@core-macro-transformer (lambda (K11631@name) ((lambda (K11633@t) (if (memv K11633@t '(quote)) K7681@quote-transformer (if (memv K11633@t '(lambda)) K7685@lambda-transformer (if (memv K11633@t '(case-lambda)) K7683@case-lambda-transformer (if (memv K11633@t '(letrec)) K7657@letrec-transformer (if (memv K11633@t '(letrec*)) K7659@letrec*-transformer (if (memv K11633@t '(if)) K7673@if-transformer (if (memv K11633@t '(and)) K7675@and-transformer (if (memv K11633@t '(or)) K7677@or-transformer (if (memv K11633@t '(foreign-call)) K7757@foreign-call-transformer (if (memv K11633@t '(syntax-case)) K7769@syntax-case-transformer (if (memv K11633@t '(syntax)) K7773@syntax-transformer (if (memv K11633@t '(type-descriptor)) K7663@type-descriptor-transformer (if (memv K11633@t '(record-type-descriptor)) K7665@record-type-descriptor-transformer (if (memv K11633@t '(record-constructor-descriptor)) K7667@record-constructor-descriptor-transformer (if (memv K11633@t '(fluid-let-syntax)) K7661@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" K11631@name))))))))))))))))) K11631@name))) (set! K7777@symbol-macro (lambda (K11635@x K11636@set) ((lambda (K11639@t) ((lambda (K11641@ls/false) (if (and K11641@ls/false (apply (lambda (K11643@name) (and (K7264@id? K11643@name) (memq (K7266@id->sym K11643@name) K11636@set))) K11641@ls/false)) (apply (lambda (K11645@name) (K7687@bless (list 'quote K11645@name))) K11641@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K11639@t))) (K7761@syntax-dispatch K11639@t '(_ any)))) K11635@x))) (set! K7779@macro-transformer (lambda (K11647@x) (if (procedure? K11647@x) K11647@x (if (symbol? K11647@x) ((lambda (K11649@t) (if (memv K11649@t '(define-record-type)) K7749@define-record-type-macro (if (memv K11649@t '(define-struct)) K7747@define-struct-macro (if (memv K11649@t '(include)) K7737@include-macro (if (memv K11649@t '(cond)) K7733@cond-macro (if (memv K11649@t '(let)) K7693@let-macro (if (memv K11649@t '(do)) K7725@do-macro (if (memv K11649@t '(or)) K7729@or-macro (if (memv K11649@t '(and)) K7731@and-macro (if (memv K11649@t '(let*)) K7727@let*-macro (if (memv K11649@t '(let-values)) K7695@let-values-macro (if (memv K11649@t '(let*-values)) K7697@let*-values-macro (if (memv K11649@t '(syntax-rules)) K7741@syntax-rules-macro (if (memv K11649@t '(quasiquote)) K7743@quasiquote-macro (if (memv K11649@t '(quasisyntax)) K7745@quasisyntax-macro (if (memv K11649@t '(with-syntax)) K7689@with-syntax-macro (if (memv K11649@t '(when)) K7669@when-macro (if (memv K11649@t '(unless)) K7671@unless-macro (if (memv K11649@t '(case)) K7679@case-macro (if (memv K11649@t '(identifier-syntax)) K7723@identifier-syntax-macro (if (memv K11649@t '(time)) K7715@time-macro (if (memv K11649@t '(delay)) K7717@delay-macro (if (memv K11649@t '(assert)) K7719@assert-macro (if (memv K11649@t '(endianness)) K7721@endianness-macro (if (memv K11649@t '(guard)) K7711@guard-macro (if (memv K11649@t '(define-enumeration)) K7713@define-enumeration-macro (if (memv K11649@t '(trace-lambda)) K7699@trace-lambda-macro (if (memv K11649@t '(trace-define)) K7701@trace-define-macro (if (memv K11649@t '(trace-define-syntax)) K7703@trace-define-syntax-macro (if (memv K11649@t '(trace-let-syntax)) K7707@trace-let-syntax-macro (if (memv K11649@t '(trace-letrec-syntax)) K7709@trace-letrec-syntax-macro (if (memv K11649@t '(define-condition-type)) K7751@define-condition-type-macro (if (memv K11649@t '(parameterize)) K7755@parameterize-macro (if (memv K11649@t '(include-into)) K7739@include-into-macro (if (memv K11649@t '(eol-style)) (lambda (K11651@x) (K7777@symbol-macro K11651@x '(none lf cr crlf nel crnel ls))) (if (memv K11649@t '(error-handling-mode)) (lambda (K11653@x) (K7777@symbol-macro K11653@x '(ignore raise replace))) (if (memv K11649@t '(buffer-mode)) (lambda (K11655@x) (K7777@symbol-macro K11655@x '(none line block))) (if (memv K11649@t '(file-options)) K7123@file-options-macro (if (memv K11649@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) K7753@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" K11647@x)))))))))))))))))))))))))))))))))))))))) K11647@x) (error 'core-macro-transformer '"BUG: invalid macro" K11647@x))))) (set! K7781@local-macro-transformer (lambda (K11657@x) (car K11657@x))) (set! K7783@do-macro-call (lambda (K11659@transformer K11660@expr) ((lambda (K11663@out) (begin ((letrec ((K11665@f (lambda (K11667@x) (if (not (K7208@stx? K11667@x)) (if (pair? K11667@x) (begin (K11665@f (car K11667@x)) (K11665@f (cdr K11667@x))) (if (vector? K11667@x) (vector-for-each K11665@f K11667@x) (if (symbol? K11667@x) (K7994@syntax-violation '#f '"raw symbol encountered in output of macro" K11660@expr K11667@x) (void)))) (void))))) K11665@f) K11663@out) (K7242@add-mark (K7232@gen-mark) K11663@out K11660@expr))) (K11659@transformer (K7242@add-mark K7234@anti-mark K11660@expr '#f))))) (set! K7785@chi-macro (lambda (K11669@p K11670@e) (K7783@do-macro-call (K7779@macro-transformer K11669@p) K11670@e))) (set! K7787@chi-local-macro (lambda (K11673@p K11674@e) (K7783@do-macro-call (K7781@local-macro-transformer K11673@p) K11674@e))) (set! K7789@chi-global-macro (lambda (K11677@p K11678@e) ((lambda (K11681@lib K11682@loc) (begin (K6791@K6447@visit-library K11681@lib) ((lambda (K11685@x) ((lambda (K11687@transformer) (K7783@do-macro-call K11687@transformer K11678@e)) (if (procedure? K11685@x) K11685@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" K11685@x)))) (symbol-value K11682@loc)))) (car K11677@p) (cdr K11677@p)))) (set! K7791@chi-expr* (lambda (K11689@e* K11690@r K11691@mr) (if (null? K11689@e*) '() ((lambda (K11695@e) (cons K11695@e (K7791@chi-expr* (cdr K11689@e*) K11690@r K11691@mr))) (K7795@chi-expr (car K11689@e*) K11690@r K11691@mr))))) (set! K7793@chi-application (lambda (K11697@e K11698@r K11699@mr) ((lambda (K11703@t) ((lambda (K11705@ls/false) (if K11705@ls/false (apply (lambda (K11707@rator K11708@rands) ((lambda (K11711@rator) (cons K11711@rator (K7791@chi-expr* K11708@rands K11698@r K11699@mr))) (K7795@chi-expr K11707@rator K11698@r K11699@mr))) K11705@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K11703@t))) (K7761@syntax-dispatch K11703@t '(any . each-any)))) K11697@e))) (set! K7795@chi-expr (lambda (K11713@e K11714@r K11715@mr) (call-with-values (lambda () (K7304@syntax-type K11713@e K11714@r)) (lambda (K11722@K11719@type K11723@K11720@value K11724@K11721@kwd) ((lambda (K11728@kwd K11729@value K11730@type) ((lambda (K11734@t) (if (memv K11734@t '(core-macro)) ((lambda (K11736@transformer) (K11736@transformer K11713@e K11714@r K11715@mr)) (K7775@core-macro-transformer K11729@value)) (if (memv K11734@t '(global)) ((lambda (K11738@lib) ((lambda (K11740@loc) ((lambda () (begin ((K7868@inv-collector) K11738@lib) K11740@loc)))) (cdr K11729@value))) (car K11729@value)) (if (memv K11734@t '(core-prim)) ((lambda (K11742@name) (list 'primitive K11742@name)) K11729@value) (if (memv K11734@t '(call)) (K7793@chi-application K11713@e K11714@r K11715@mr) (if (memv K11734@t '(lexical)) ((lambda (K11744@lex) K11744@lex) (K7645@lexical-var K11729@value)) (if (memv K11734@t '(global-macro global-macro!)) (K7795@chi-expr (K7789@chi-global-macro K11729@value K11713@e) K11714@r K11715@mr) (if (memv K11734@t '(local-macro local-macro!)) (K7795@chi-expr (K7787@chi-local-macro K11729@value K11713@e) K11714@r K11715@mr) (if (memv K11734@t '(macro macro!)) (K7795@chi-expr (K7785@chi-macro K11729@value K11713@e) K11714@r K11715@mr) (if (memv K11734@t '(constant)) ((lambda (K11746@datum) (list 'quote K11746@datum)) K11729@value) (if (memv K11734@t '(set!)) (K7797@chi-set! K11713@e K11714@r K11715@mr) (if (memv K11734@t '(begin)) ((lambda (K11748@t) ((lambda (K11750@ls/false) (if K11750@ls/false (apply (lambda (K11752@x K11753@x*) (K7103@K6960@build-sequence '#f (K7791@chi-expr* (cons K11752@x K11753@x*) K11714@r K11715@mr))) K11750@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K11748@t))) (K7761@syntax-dispatch K11748@t '(_ any . each-any)))) K11713@e) (if (memv K11734@t '(let-syntax letrec-syntax)) ((lambda (K11756@t) ((lambda (K11758@ls/false) (if (and K11758@ls/false (apply (lambda (K11760@xlhs* K11761@xrhs* K11762@xbody K11763@xbody*) (if (not (K7274@valid-bound-ids? K11760@xlhs*)) (K7994@syntax-violation '#f '"invalid identifiers" K11713@e) (void))) K11758@ls/false)) (apply (lambda (K11768@xlhs* K11769@xrhs* K11770@xbody K11771@xbody*) ((lambda (K11776@xlab*) ((lambda (K11778@xrib) ((lambda (K11780@xb*) ((lambda () (K7103@K6960@build-sequence '#f (K7791@chi-expr* (map (lambda (K11782@x) (K7244@add-subst K11778@xrib K11782@x)) (cons K11770@xbody K11771@xbody*)) (append (map cons K11776@xlab* K11780@xb*) K11714@r) (append (map cons K11776@xlab* K11780@xb*) K11715@mr)))))) (map (lambda (K11784@x) (K7326@make-eval-transformer (K7854@expand-transformer (if (eq? K11730@type 'let-syntax) K11784@x (K7244@add-subst K11778@xrib K11784@x)) K11715@mr))) K11769@xrhs*))) (K7195@make-full-rib K11768@xlhs* K11776@xlab*))) (map K7140@gen-label K11768@xlhs*))) K11758@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K11756@t))) (K7761@syntax-dispatch K11756@t '(_ #(each (any any)) any . each-any)))) K11713@e) (if (memv K11734@t '(displaced-lexical)) (K7994@syntax-violation '#f '"identifier out of context" K11713@e) (if (memv K11734@t '(syntax)) (K7994@syntax-violation '#f '"reference to pattern variable outside a syntax form" K11713@e) (if (memv K11734@t '(define define-syntax module import library)) (K7994@syntax-violation '#f (string-append ((lambda (K11786@t) (if (memv K11786@t '(define)) '"a definition" (if (memv K11786@t '(define-syntax)) '"a define-syntax" (if (memv K11786@t '(module)) '"a module definition" (if (memv K11786@t '(library)) '"a library definition" (if (memv K11786@t '(import)) '"an import declaration" (if (memv K11786@t '(export)) '"an export declaration" '"a non-expression"))))))) K11730@type) '" was found where an expression was expected") K11713@e) (if (memv K11734@t '(mutable)) (K7994@syntax-violation '#f '"attempt to reference an unexportable variable" K11713@e) (K7994@syntax-violation '#f '"invalid expression" K11713@e)))))))))))))))))) K11730@type)) K11724@K11721@kwd K11723@K11720@value K11722@K11719@type))))) (set! K7797@chi-set! (lambda (K11788@e K11789@r K11790@mr) ((lambda (K11794@t) ((lambda (K11796@ls/false) (if (and K11796@ls/false (apply (lambda (K11798@x K11799@v) (K7264@id? K11798@x)) K11796@ls/false)) (apply (lambda (K11802@x K11803@v) (call-with-values (lambda () (K7304@syntax-type K11802@x K11789@r)) (lambda (K11809@K11806@type K11810@K11807@value K11811@K11808@kwd) ((lambda (K11815@kwd K11816@value K11817@type) ((lambda (K11821@t) (if (memv K11821@t '(lexical)) (begin (K7649@set-lexical-mutable! K11816@value '#t) (list 'set! (K7645@lexical-var K11816@value) (K7795@chi-expr K11803@v K11789@r K11790@mr))) (if (memv K11821@t '(core-prim)) (K7994@syntax-violation '#f '"cannot modify imported core primitive" K11788@e) (if (memv K11821@t '(global)) (K7994@syntax-violation '#f '"attempt to modify imported binding" K11788@e) (if (memv K11821@t '(global-macro!)) (K7795@chi-expr (K7789@chi-global-macro K11816@value K11788@e) K11789@r K11790@mr) (if (memv K11821@t '(local-macro!)) (K7795@chi-expr (K7787@chi-local-macro K11816@value K11788@e) K11789@r K11790@mr) (if (memv K11821@t '(mutable)) (K7994@syntax-violation '#f '"attempt to assign to an unexportable variable" K11788@e) (K7994@syntax-violation '#f '"invalid syntax" K11788@e)))))))) K11817@type)) K11811@K11808@kwd K11810@K11807@value K11809@K11806@type)))) K11796@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K11794@t))) (K7761@syntax-dispatch K11794@t '(_ any any)))) K11788@e))) (set! K7799@verify-formals (lambda (K11823@fmls K11824@stx) ((lambda (K11827@t) ((lambda (K11829@ls/false) (if K11829@ls/false (apply (lambda (K11831@x*) (if (not (K7274@valid-bound-ids? K11831@x*)) (K7691@invalid-fmls-error K11824@stx K11823@fmls) (void))) K11829@ls/false) ((lambda (K11833@t) ((lambda (K11835@ls/false) (if K11835@ls/false (apply (lambda (K11837@x* K11838@x) (if (not (K7274@valid-bound-ids? (cons K11838@x K11837@x*))) (K7691@invalid-fmls-error K11824@stx K11823@fmls) (void))) K11835@ls/false) ((lambda (K11841@t) ((lambda (K11843@ls/false) (if K11843@ls/false (apply (lambda () (K7994@syntax-violation '#f '"invalid syntax" K11824@stx)) K11843@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K11841@t))) (K7761@syntax-dispatch K11841@t '_))) K11833@t))) (K7761@syntax-dispatch K11833@t '#(each+ any () any)))) K11827@t))) (K7761@syntax-dispatch K11827@t 'each-any))) K11823@fmls))) (set! K7801@chi-lambda-clause (lambda (K11845@stx K11846@fmls K11847@body* K11848@r K11849@mr) ((lambda (K11855@t) ((lambda (K11857@ls/false) (if K11857@ls/false (apply (lambda (K11859@x*) (begin (K7799@verify-formals K11846@fmls K11845@stx) ((lambda (K11861@lex* K11862@lab*) (values K11861@lex* (K7817@chi-internal (K7244@add-subst (K7195@make-full-rib K11859@x* K11862@lab*) K11847@body*) (K7653@add-lexicals K11862@lab* K11861@lex* K11848@r) K11849@mr))) (map K7136@gen-lexical K11859@x*) (map K7140@gen-label K11859@x*)))) K11857@ls/false) ((lambda (K11865@t) ((lambda (K11867@ls/false) (if K11867@ls/false (apply (lambda (K11869@x* K11870@x) (begin (K7799@verify-formals K11846@fmls K11845@stx) ((lambda (K11873@lex* K11874@lab* K11875@lex K11876@lab) (values (append K11873@lex* K11875@lex) (K7817@chi-internal (K7244@add-subst (K7195@make-full-rib (cons K11870@x K11869@x*) (cons K11876@lab K11874@lab*)) K11847@body*) (K7653@add-lexicals (cons K11876@lab K11874@lab*) (cons K11875@lex K11873@lex*) K11848@r) K11849@mr))) (map K7136@gen-lexical K11869@x*) (map K7140@gen-label K11869@x*) (K7136@gen-lexical K11870@x) (K7140@gen-label K11870@x)))) K11867@ls/false) ((lambda (K11881@t) ((lambda (K11883@ls/false) (if K11883@ls/false (apply (lambda () (K7994@syntax-violation '#f '"invalid syntax" K11846@fmls)) K11883@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K11881@t))) (K7761@syntax-dispatch K11881@t '_))) K11865@t))) (K7761@syntax-dispatch K11865@t '#(each+ any () any)))) K11855@t))) (K7761@syntax-dispatch K11855@t 'each-any))) K11846@fmls))) (set! K7803@chi-lambda-clause* (lambda (K11885@stx K11886@fmls* K11887@body** K11888@r K11889@mr) (if (null? K11886@fmls*) (values '() '()) (call-with-values (lambda () (K7801@chi-lambda-clause K11885@stx (car K11886@fmls*) (car K11887@body**) K11888@r K11889@mr)) (lambda (K11897@K11895@a K11898@K11896@b) ((lambda (K11901@b K11902@a) (call-with-values (lambda () (K7803@chi-lambda-clause* K11885@stx (cdr K11886@fmls*) (cdr K11887@body**) K11888@r K11889@mr)) (lambda (K11907@K11905@a* K11908@K11906@b*) ((lambda (K11911@b* K11912@a*) (values (cons K11902@a K11912@a*) (cons K11901@b K11911@b*))) K11908@K11906@b* K11907@K11905@a*)))) K11898@K11896@b K11897@K11895@a)))))) (set! K7805@chi-defun (lambda (K11915@x K11916@r K11917@mr) ((lambda (K11921@fmls K11922@body*) (call-with-values (lambda () (K7801@chi-lambda-clause K11921@fmls K11921@fmls K11922@body* K11916@r K11917@mr)) (lambda (K11927@K11925@fmls K11928@K11926@body) ((lambda (K11931@body K11932@fmls) (K7100@K6910@build-lambda '#f K11932@fmls K11931@body)) K11928@K11926@body K11927@K11925@fmls)))) (car K11915@x) (cdr K11915@x)))) (set! K7807@chi-rhs (lambda (K11935@rhs K11936@r K11937@mr) ((lambda (K11941@t) (if (memv K11941@t '(defun)) (K7805@chi-defun (cdr K11935@rhs) K11936@r K11937@mr) (if (memv K11941@t '(expr)) ((lambda (K11943@expr) (K7795@chi-expr K11943@expr K11936@r K11937@mr)) (cdr K11935@rhs)) (if (memv K11941@t '(top-expr)) ((lambda (K11945@expr) (K7103@K6960@build-sequence '#f (list (K7795@chi-expr K11945@expr K11936@r K11937@mr) (K7104@K6962@build-void)))) (cdr K11935@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" K11935@rhs))))) (car K11935@rhs)))) (set! K7809@expand-interaction-rhs*/init* (lambda (K11947@lhs* K11948@rhs* K11949@init* K11950@r K11951@mr) ((letrec ((K11957@f (lambda (K11959@lhs* K11960@rhs*) (if (null? K11959@lhs*) (map (lambda (K11963@x) (K7795@chi-expr K11963@x K11950@r K11951@mr)) K11949@init*) ((lambda (K11965@lhs K11966@rhs) ((lambda (K11969@t) (if (memv K11969@t '(defun)) ((lambda (K11971@rhs) (cons (list 'set! K11965@lhs K11971@rhs) (K11957@f (cdr K11959@lhs*) (cdr K11960@rhs*)))) (K7805@chi-defun (cdr K11966@rhs) K11950@r K11951@mr)) (if (memv K11969@t '(expr)) ((lambda (K11973@rhs) (cons (list 'set! K11965@lhs K11973@rhs) (K11957@f (cdr K11959@lhs*) (cdr K11960@rhs*)))) (K7795@chi-expr (cdr K11966@rhs) K11950@r K11951@mr)) (if (memv K11969@t '(top-expr)) ((lambda (K11975@e) (cons K11975@e (K11957@f (cdr K11959@lhs*) (cdr K11960@rhs*)))) (K7795@chi-expr (cdr K11966@rhs) K11950@r K11951@mr)) (error 'expand-interaction '"invallid" K11966@rhs))))) (car K11966@rhs))) (car K11959@lhs*) (car K11960@rhs*)))))) K11957@f) K11947@lhs* K11948@rhs*))) (set! K7811@chi-rhs* (lambda (K11977@rhs* K11978@r K11979@mr) ((letrec ((K11983@f (lambda (K11985@ls) (if (null? K11985@ls) '() ((lambda (K11987@a) (cons K11987@a (K11983@f (cdr K11985@ls)))) (K7807@chi-rhs (car K11985@ls) K11978@r K11979@mr)))))) K11983@f) K11977@rhs*))) (set! K7813@find-bound=? (lambda (K11989@x K11990@lhs* K11991@rhs*) (if (null? K11990@lhs*) '#f (if (K7270@bound-id=? K11989@x (car K11990@lhs*)) (car K11991@rhs*) (K7813@find-bound=? K11989@x (cdr K11990@lhs*) (cdr K11991@rhs*)))))) (set! K7815@find-dups (lambda (K11995@ls) ((letrec ((K11997@f (lambda (K11999@ls K12000@dups) (if (null? K11999@ls) K12000@dups ((lambda (K12003@t) (if K12003@t ((lambda (K12005@x) (K11997@f (cdr K11999@ls) (cons (list (car K11999@ls) K12005@x) K12000@dups))) K12003@t) (K11997@f (cdr K11999@ls) K12000@dups))) (K7813@find-bound=? (car K11999@ls) (cdr K11999@ls) (cdr K11999@ls))))))) K11997@f) K11995@ls '()))) (set! K7817@chi-internal (lambda (K12007@e* K12008@r K12009@mr) ((lambda (K12013@rib) (call-with-values (lambda () (K7852@chi-body* (map (lambda (K12023@x) (K7244@add-subst K12013@rib K12023@x)) (K7262@syntax->list K12007@e*)) K12008@r K12009@mr '() '() '() '() '() K12013@rib '#f)) (lambda (K12025@K12015@e* K12026@K12016@r K12027@K12017@mr K12028@K12018@lex* K12029@K12019@rhs* K12030@K12020@mod** K12031@K12021@kwd* K12032@K12022@_exp*) ((lambda (K12041@_exp* K12042@kwd* K12043@mod** K12044@rhs* K12045@lex* K12046@mr K12047@r K12048@e*) (begin (if (null? K12048@e*) (K7994@syntax-violation '#f '"no expression in body" K12048@e*) (void)) ((lambda (K12057@init*) ((lambda (K12059@rhs*) ((lambda () (K7106@K6966@build-letrec* '#f (reverse K12045@lex*) (reverse K12059@rhs*) (K7103@K6960@build-sequence '#f K12057@init*))))) (K7811@chi-rhs* K12044@rhs* K12047@r K12046@mr))) (K7791@chi-expr* (append (apply append (reverse K12043@mod**)) K12048@e*) K12047@r K12046@mr)))) K12032@K12022@_exp* K12031@K12021@kwd* K12030@K12020@mod** K12029@K12019@rhs* K12028@K12018@lex* K12027@K12017@mr K12026@K12016@r K12025@K12015@e*)))) (K7183@make-empty-rib)))) (set! K7819@parse-module (lambda (K12061@e) ((lambda (K12063@t) ((lambda (K12065@ls/false) (if K12065@ls/false (apply (lambda (K12067@export* K12068@b*) (begin (if (not (for-all K7264@id? K12067@export*)) (K7994@syntax-violation '#f '"module exports must be identifiers" K12061@e) (void)) (values '#f (list->vector K12067@export*) K12068@b*))) K12065@ls/false) ((lambda (K12071@t) ((lambda (K12073@ls/false) (if K12073@ls/false (apply (lambda (K12075@name K12076@export* K12077@b*) (begin (if (not (K7264@id? K12075@name)) (K7994@syntax-violation '#f '"module name must be an identifier" K12061@e) (void)) (if (not (for-all K7264@id? K12076@export*)) (K7994@syntax-violation '#f '"module exports must be identifiers" K12061@e) (void)) (values K12075@name (list->vector K12076@export*) K12077@b*))) K12073@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12071@t))) (K7761@syntax-dispatch K12071@t '(_ any each-any . each-any)))) K12063@t))) (K7761@syntax-dispatch K12063@t '(_ each-any . each-any)))) K12061@e))) (set! K7825@K7820 (make-record-type-descriptor 'module-interface '#f 'K7823 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! K7827@K7822 '#f) (set! K7829@K7821 (make-record-constructor-descriptor K7825@K7820 '#f K7827@K7822)) (set! K7832@module-interface? (record-predicate K7825@K7820)) (set! K7834@make-module-interface (record-constructor K7829@K7821)) (set! K7836@module-interface-first-mark (record-accessor K7825@K7820 '0)) (set! K7838@module-interface-exp-id-vec (record-accessor K7825@K7820 '1)) (set! K7840@module-interface-exp-lab-vec (record-accessor K7825@K7820 '2)) (set! K7842@set-module-interface-first-mark! (record-mutator K7825@K7820 '0)) (set! K7844@set-module-interface-exp-id-vec! (record-mutator K7825@K7820 '1)) (set! K7846@set-module-interface-exp-lab-vec! (record-mutator K7825@K7820 '2)) (set! K7848@module-interface-exp-id* (lambda (K12081@iface K12082@id) ((lambda (K12086@diff-marks) (begin (set! K12086@diff-marks (lambda (K12093@ls K12094@x) (begin (if (null? K12093@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (K12097@a) (if (eq? K12097@a K12094@x) '() (cons K12097@a (K12086@diff-marks (cdr K12093@ls) K12094@x)))) (car K12093@ls))))) ((lambda (K12087@diff K12088@id-vec) (if (null? K12087@diff) K12088@id-vec (vector-map (lambda (K12091@x) (K7210@make-stx (K7212@stx-expr K12091@x) (append K12087@diff (K7214@stx-mark* K12091@x)) '() '())) K12088@id-vec))) (K12086@diff-marks (K7214@stx-mark* K12082@id) (K7836@module-interface-first-mark K12081@iface)) (K7838@module-interface-exp-id-vec K12081@iface)))) '#f))) (set! K7850@chi-internal-module (lambda (K12099@e K12100@r K12101@mr K12102@lex* K12103@rhs* K12104@mod** K12105@kwd*) (call-with-values (lambda () (K7819@parse-module K12099@e)) (lambda (K12116@K12113@name K12117@K12114@exp-id* K12118@K12115@e*) ((lambda (K12122@e* K12123@exp-id* K12124@name) ((lambda (K12128@rib) ((lambda (K12130@e*) ((lambda () (call-with-values (lambda () (K7852@chi-body* K12130@e* K12100@r K12101@mr K12102@lex* K12103@rhs* K12104@mod** K12105@kwd* '() K12128@rib '#f)) (lambda (K12140@K12132@e* K12141@K12133@r K12142@K12134@mr K12143@K12135@lex* K12144@K12136@rhs* K12145@K12137@mod** K12146@K12138@kwd* K12147@K12139@_exp*) ((lambda (K12156@_exp* K12157@kwd* K12158@mod** K12159@rhs* K12160@lex* K12161@mr K12162@r K12163@e*) ((lambda (K12172@exp-lab* K12173@mod**) (if (not K12124@name) (values K12160@lex* K12159@rhs* K12123@exp-id* K12172@exp-lab* K12162@r K12161@mr K12173@mod** K12157@kwd*) ((lambda (K12176@lab K12177@iface) (values K12160@lex* K12159@rhs* (vector K12124@name) (vector K12176@lab) (cons (cons K12176@lab (cons '$module K12177@iface)) K12162@r) (cons (cons K12176@lab (cons '$module K12177@iface)) K12161@mr) K12173@mod** K12157@kwd*)) (K7140@gen-label 'module) (K7834@make-module-interface (car (K7214@stx-mark* K12124@name)) (vector-map (lambda (K12180@x) (K7210@make-stx (K7212@stx-expr K12180@x) (K7214@stx-mark* K12180@x) '() '())) K12123@exp-id*) K12172@exp-lab*)))) (vector-map (lambda (K12182@x) (or (K7290@id->label (K7210@make-stx (K7266@id->sym K12182@x) (K7214@stx-mark* K12182@x) (list K12128@rib) '())) (K7994@syntax-violation '#f '"cannot find module export" K12182@x))) K12123@exp-id*) (cons K12163@e* K12158@mod**))) K12147@K12139@_exp* K12146@K12138@kwd* K12145@K12137@mod** K12144@K12136@rhs* K12143@K12135@lex* K12142@K12134@mr K12141@K12133@r K12140@K12132@e*)))))) (map (lambda (K12184@x) (K7244@add-subst K12128@rib K12184@x)) (K7262@syntax->list K12122@e*)))) (K7183@make-empty-rib))) K12118@K12115@e* K12117@K12114@exp-id* K12116@K12113@name))))) (set! K7852@chi-body* (lambda (K12186@e* K12187@r K12188@mr K12189@lex* K12190@rhs* K12191@mod** K12192@kwd* K12193@exp* K12194@rib K12195@top?) (if (null? K12186@e*) (values K12186@e* K12187@r K12188@mr K12189@lex* K12190@rhs* K12191@mod** K12192@kwd* K12193@exp*) ((lambda (K12206@e) (call-with-values (lambda () (K7304@syntax-type K12206@e K12187@r)) (lambda (K12211@K12208@type K12212@K12209@value K12213@K12210@kwd) ((lambda (K12217@kwd K12218@value K12219@type) ((lambda (K12223@kwd*) ((lambda (K12225@t) (if (memv K12225@t '(define)) (call-with-values (lambda () (K7637@parse-define K12206@e)) (lambda (K12229@K12227@id K12230@K12228@rhs) ((lambda (K12233@rhs K12234@id) (begin (if (K7278@bound-id-member? K12234@id K12223@kwd*) (K7994@syntax-violation '#f '"cannot redefine keyword" K12206@e) (void)) (call-with-values (lambda () (K7144@gen-define-label+loc K12234@id K12194@rib)) (lambda (K12239@K12237@lab K12240@K12238@lex) ((lambda (K12243@lex K12244@lab) (begin (K7185@extend-rib! K12194@rib K12234@id K12244@lab) (K7852@chi-body* (cdr K12186@e*) (K7651@add-lexical K12244@lab K12243@lex K12187@r) K12188@mr (cons K12243@lex K12189@lex*) (cons K12233@rhs K12190@rhs*) K12191@mod** K12223@kwd* K12193@exp* K12194@rib K12195@top?))) K12240@K12238@lex K12239@K12237@lab))))) K12230@K12228@rhs K12229@K12227@id))) (if (memv K12225@t '(define-syntax)) (call-with-values (lambda () (K7639@parse-define-syntax K12206@e)) (lambda (K12249@K12247@id K12250@K12248@rhs) ((lambda (K12253@rhs K12254@id) (begin (if (K7278@bound-id-member? K12254@id K12223@kwd*) (K7994@syntax-violation '#f '"cannot redefine keyword" K12206@e) (void)) ((lambda (K12257@lab K12258@expanded-rhs) (begin (K7185@extend-rib! K12194@rib K12254@id K12257@lab) ((lambda (K12261@b) (K7852@chi-body* (cdr K12186@e*) (cons (cons K12257@lab K12261@b) K12187@r) (cons (cons K12257@lab K12261@b) K12188@mr) K12189@lex* K12190@rhs* K12191@mod** K12223@kwd* K12193@exp* K12194@rib K12195@top?)) (K7326@make-eval-transformer K12258@expanded-rhs)))) (K7146@gen-define-label K12254@id K12194@rib) (K7854@expand-transformer K12253@rhs K12188@mr)))) K12250@K12248@rhs K12249@K12247@id))) (if (memv K12225@t '(let-syntax letrec-syntax)) ((lambda (K12263@t) ((lambda (K12265@ls/false) (if (and K12265@ls/false (apply (lambda (K12267@xlhs* K12268@xrhs* K12269@xbody*) (if (not (K7274@valid-bound-ids? K12267@xlhs*)) (K7994@syntax-violation '#f '"invalid identifiers" K12206@e) (void))) K12265@ls/false)) (apply (lambda (K12273@xlhs* K12274@xrhs* K12275@xbody*) ((lambda (K12279@xlab*) ((lambda (K12281@xrib) ((lambda (K12283@xb*) ((lambda () (K7852@chi-body* (append (map (lambda (K12285@x) (K7244@add-subst K12281@xrib K12285@x)) K12275@xbody*) (cdr K12186@e*)) (append (map cons K12279@xlab* K12283@xb*) K12187@r) (append (map cons K12279@xlab* K12283@xb*) K12188@mr) K12189@lex* K12190@rhs* K12191@mod** K12223@kwd* K12193@exp* K12194@rib K12195@top?)))) (map (lambda (K12287@x) (K7326@make-eval-transformer (K7854@expand-transformer (if (eq? K12219@type 'let-syntax) K12287@x (K7244@add-subst K12281@xrib K12287@x)) K12188@mr))) K12274@xrhs*))) (K7195@make-full-rib K12273@xlhs* K12279@xlab*))) (map K7140@gen-label K12273@xlhs*))) K12265@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12263@t))) (K7761@syntax-dispatch K12263@t '(_ #(each (any any)) . each-any)))) K12206@e) (if (memv K12225@t '(begin)) ((lambda (K12289@t) ((lambda (K12291@ls/false) (if K12291@ls/false (apply (lambda (K12293@x*) (K7852@chi-body* (append K12293@x* (cdr K12186@e*)) K12187@r K12188@mr K12189@lex* K12190@rhs* K12191@mod** K12223@kwd* K12193@exp* K12194@rib K12195@top?)) K12291@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12289@t))) (K7761@syntax-dispatch K12289@t '(_ . each-any)))) K12206@e) (if (memv K12225@t '(global-macro global-macro!)) (K7852@chi-body* (cons (K7244@add-subst K12194@rib (K7789@chi-global-macro K12218@value K12206@e)) (cdr K12186@e*)) K12187@r K12188@mr K12189@lex* K12190@rhs* K12191@mod** K12223@kwd* K12193@exp* K12194@rib K12195@top?) (if (memv K12225@t '(local-macro local-macro!)) (K7852@chi-body* (cons (K7244@add-subst K12194@rib (K7787@chi-local-macro K12218@value K12206@e)) (cdr K12186@e*)) K12187@r K12188@mr K12189@lex* K12190@rhs* K12191@mod** K12223@kwd* K12193@exp* K12194@rib K12195@top?) (if (memv K12225@t '(macro macro!)) (K7852@chi-body* (cons (K7244@add-subst K12194@rib (K7785@chi-macro K12218@value K12206@e)) (cdr K12186@e*)) K12187@r K12188@mr K12189@lex* K12190@rhs* K12191@mod** K12223@kwd* K12193@exp* K12194@rib K12195@top?) (if (memv K12225@t '(module)) (call-with-values (lambda () (K7850@chi-internal-module K12206@e K12187@r K12188@mr K12189@lex* K12190@rhs* K12191@mod** K12223@kwd*)) (lambda (K12303@K12295@lex* K12304@K12296@rhs* K12305@K12297@m-exp-id* K12306@K12298@m-exp-lab* K12307@K12299@r K12308@K12300@mr K12309@K12301@mod** K12310@K12302@kwd*) ((lambda (K12319@kwd* K12320@mod** K12321@mr K12322@r K12323@m-exp-lab* K12324@m-exp-id* K12325@rhs* K12326@lex*) (begin (vector-for-each (lambda (K12335@id K12336@lab) (K7185@extend-rib! K12194@rib K12335@id K12336@lab)) K12324@m-exp-id* K12323@m-exp-lab*) (K7852@chi-body* (cdr K12186@e*) K12322@r K12321@mr K12326@lex* K12325@rhs* K12320@mod** K12319@kwd* K12193@exp* K12194@rib K12195@top?))) K12310@K12302@kwd* K12309@K12301@mod** K12308@K12300@mr K12307@K12299@r K12306@K12298@m-exp-lab* K12305@K12297@m-exp-id* K12304@K12296@rhs* K12303@K12295@lex*))) (if (memv K12225@t '(library)) (begin (K7964@library-expander (K7286@stx->datum K12206@e)) (K7852@chi-body* (cdr K12186@e*) K12187@r K12188@mr K12189@lex* K12190@rhs* K12191@mod** K12223@kwd* K12193@exp* K12194@rib K12195@top?)) (if (memv K12225@t '(export)) ((lambda (K12339@t) ((lambda (K12341@ls/false) (if K12341@ls/false (apply (lambda (K12343@exp-decl*) (K7852@chi-body* (cdr K12186@e*) K12187@r K12188@mr K12189@lex* K12190@rhs* K12191@mod** K12223@kwd* (append K12343@exp-decl* K12193@exp*) K12194@rib K12195@top?)) K12341@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12339@t))) (K7761@syntax-dispatch K12339@t '(_ . each-any)))) K12206@e) (if (memv K12225@t '(import)) ((lambda () ((lambda (K12346@module-import? K12348@module-import K12350@library-import) (begin (set! K12346@module-import? (lambda (K12422@e) ((lambda (K12424@t) ((lambda (K12426@ls/false) (if (and K12426@ls/false (apply (lambda (K12428@id) (K7264@id? K12428@id)) K12426@ls/false)) (apply (lambda (K12430@id) '#t) K12426@ls/false) ((lambda (K12432@t) ((lambda (K12434@ls/false) (if K12434@ls/false (apply (lambda (K12436@imp*) '#f) K12434@ls/false) ((lambda (K12438@t) ((lambda (K12440@ls/false) (if K12440@ls/false (apply (lambda () (K7994@syntax-violation '#f '"malformed import form" K12422@e)) K12440@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12438@t))) (K7761@syntax-dispatch K12438@t '_))) K12432@t))) (K7761@syntax-dispatch K12432@t '(_ . each-any)))) K12424@t))) (K7761@syntax-dispatch K12424@t '(_ any)))) K12422@e))) (set! K12348@module-import (lambda (K12391@e K12392@r) ((lambda (K12395@t) ((lambda (K12397@ls/false) (if (and K12397@ls/false (apply (lambda (K12399@id) (K7264@id? K12399@id)) K12397@ls/false)) (apply (lambda (K12401@id) (call-with-values (lambda () (K7304@syntax-type K12401@id K12392@r)) (lambda (K12406@K12403@type K12407@K12404@value K12408@K12405@kwd) ((lambda (K12412@kwd K12413@value K12414@type) ((lambda (K12418@t) (if (memv K12418@t '($module)) ((lambda (K12420@iface) (values (K7848@module-interface-exp-id* K12420@iface K12401@id) (K7840@module-interface-exp-lab-vec K12420@iface))) K12413@value) (K7994@syntax-violation '#f '"invalid import" K12391@e))) K12414@type)) K12408@K12405@kwd K12407@K12404@value K12406@K12403@type)))) K12397@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12395@t))) (K7761@syntax-dispatch K12395@t '(_ any)))) K12391@e))) (set! K12350@library-import (lambda (K12365@e) ((lambda (K12367@t) ((lambda (K12369@ls/false) (if K12369@ls/false (apply (lambda (K12371@ctxt K12372@imp*) (call-with-values (lambda () (K7862@parse-import-spec* (K8000@syntax->datum K12372@imp*))) (lambda (K12377@K12375@subst-names K12378@K12376@subst-labels) ((lambda (K12381@subst-labels K12382@subst-names) (values (vector-map (lambda (K12385@name) (K7230@datum->stx K12371@ctxt K12385@name)) K12382@subst-names) K12381@subst-labels)) K12378@K12376@subst-labels K12377@K12375@subst-names)))) K12369@ls/false) ((lambda (K12387@t) ((lambda (K12389@ls/false) (if K12389@ls/false (apply (lambda () (K7994@syntax-violation '#f '"invalid import form" K12365@e)) K12389@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12387@t))) (K7761@syntax-dispatch K12387@t '_))) K12367@t))) (K7761@syntax-dispatch K12367@t '(any . each-any)))) K12365@e))) (begin (call-with-values (lambda () (if (K12346@module-import? K12206@e) (K12348@module-import K12206@e K12187@r) (K12350@library-import K12206@e))) (lambda (K12353@K12351@id* K12354@K12352@lab*) ((lambda (K12357@lab* K12358@id*) (vector-for-each (lambda (K12361@id K12362@lab) (K7185@extend-rib! K12194@rib K12361@id K12362@lab)) K12358@id* K12357@lab*)) K12354@K12352@lab* K12353@K12351@id*))) (K7852@chi-body* (cdr K12186@e*) K12187@r K12188@mr K12189@lex* K12190@rhs* K12191@mod** K12223@kwd* K12193@exp* K12194@rib K12195@top?)))) '#f '#f '#f))) (if K12195@top? (K7852@chi-body* (cdr K12186@e*) K12187@r K12188@mr (cons (K7136@gen-lexical 'dummy) K12189@lex*) (cons (cons 'top-expr K12206@e) K12190@rhs*) K12191@mod** K12223@kwd* K12193@exp* K12194@rib K12195@top?) (values K12186@e* K12187@r K12188@mr K12189@lex* K12190@rhs* K12191@mod** K12223@kwd* K12193@exp*)))))))))))))) K12219@type)) (if (K7264@id? K12217@kwd) (cons K12217@kwd K12192@kwd*) K12192@kwd*))) K12213@K12210@kwd K12212@K12209@value K12211@K12208@type)))) (car K12186@e*))))) (set! K7854@expand-transformer (lambda (K12442@expr K12443@r) ((lambda (K12446@rtc) ((lambda (K12448@expanded-rhs) (begin (for-each ((lambda (K12450@mark-visit) (lambda (K12452@x) (begin (K6790@K6445@invoke-library K12452@x) (K12450@mark-visit K12452@x)))) (K7870@vis-collector)) (K12446@rtc)) K12448@expanded-rhs)) ((lambda (K12458@K12454@inv-collector K12459@K12455@vis-collector K12460@K12456@inv-collector K12461@K12457@vis-collector) ((lambda (K12466@swap) (dynamic-wind K12466@swap (lambda () (K7795@chi-expr K12442@expr K12443@r K12443@r)) K12466@swap)) (lambda () (begin ((lambda (K12468@t) (begin (K12458@K12454@inv-collector K12460@K12456@inv-collector) (set! K12460@K12456@inv-collector K12468@t))) (K12458@K12454@inv-collector)) ((lambda (K12470@t) (begin (K12459@K12455@vis-collector K12461@K12457@vis-collector) (set! K12461@K12457@vis-collector K12470@t))) (K12459@K12455@vis-collector)))))) K7868@inv-collector K7870@vis-collector K12446@rtc (lambda (K12472@x) (values))))) (K7866@make-collector)))) (set! K7856@parse-exports (lambda (K12474@exp*) ((letrec ((K12476@f (lambda (K12478@exp* K12479@int* K12480@ext*) (if (null? K12478@exp*) (begin (if (not (K7274@valid-bound-ids? K12480@ext*)) (K7994@syntax-violation 'export '"invalid exports" (K7815@find-dups K12480@ext*)) (void)) (values (map K8000@syntax->datum K12480@ext*) K12479@int*)) ((lambda (K12484@t) ((lambda (K12486@ls/false) (if K12486@ls/false (apply (lambda (K12488@rename K12489@i* K12490@e*) (begin (if (not (and (eq? (K8000@syntax->datum K12488@rename) 'rename) (for-all K7264@id? K12489@i*) (for-all K7264@id? K12490@e*))) (K7994@syntax-violation 'export '"invalid export specifier" (car K12478@exp*)) (void)) (K12476@f (cdr K12478@exp*) (append K12489@i* K12479@int*) (append K12490@e* K12480@ext*)))) K12486@ls/false) ((lambda (K12494@t) ((lambda (K12496@ls/false) (if K12496@ls/false (apply (lambda (K12498@ie) (begin (if (not (K7264@id? K12498@ie)) (K7994@syntax-violation 'export '"invalid export" K12498@ie) (void)) (K12476@f (cdr K12478@exp*) (cons K12498@ie K12479@int*) (cons K12498@ie K12480@ext*)))) K12496@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12494@t))) (K7761@syntax-dispatch K12494@t 'any))) K12484@t))) (K7761@syntax-dispatch K12484@t '(any . #(each (any any)))))) (car K12478@exp*)))))) K12476@f) K12474@exp* '() '()))) (set! K7858@parse-library-name (lambda (K12500@spec) ((lambda (K12503@parse) (begin (set! K12503@parse (lambda (K12514@x) ((lambda (K12516@t) ((lambda (K12518@ls/false) (if (and K12518@ls/false (apply (lambda (K12520@v*) (for-all (lambda (K12522@x) ((lambda (K12524@x) (and (integer? K12524@x) (exact? K12524@x))) (K8000@syntax->datum K12522@x))) K12520@v*)) K12518@ls/false)) (apply (lambda (K12526@v*) (values '() (map K8000@syntax->datum K12526@v*))) K12518@ls/false) ((lambda (K12528@t) ((lambda (K12530@ls/false) (if (and K12530@ls/false (apply (lambda (K12532@x K12533@rest) (symbol? (K8000@syntax->datum K12532@x))) K12530@ls/false)) (apply (lambda (K12536@x K12537@rest) (call-with-values (lambda () (K12503@parse K12537@rest)) (lambda (K12542@K12540@x* K12543@K12541@v*) ((lambda (K12546@v* K12547@x*) (values (cons (K8000@syntax->datum K12536@x) K12547@x*) K12546@v*)) K12543@K12541@v* K12542@K12540@x*)))) K12530@ls/false) ((lambda (K12550@t) ((lambda (K12552@ls/false) (if K12552@ls/false (apply (lambda () (values '() '())) K12552@ls/false) ((lambda (K12554@t) ((lambda (K12556@ls/false) (if K12556@ls/false (apply (lambda () (K7994@syntax-violation '#f '"invalid library name" K12500@spec)) K12556@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12554@t))) (K7761@syntax-dispatch K12554@t '_))) K12550@t))) (K7761@syntax-dispatch K12550@t '()))) K12528@t))) (K7761@syntax-dispatch K12528@t '(any . any)))) K12516@t))) (K7761@syntax-dispatch K12516@t '(each-any)))) K12514@x))) (call-with-values (lambda () (K12503@parse K12500@spec)) (lambda (K12506@K12504@name* K12507@K12505@ver*) ((lambda (K12510@ver* K12511@name*) (begin (if (null? K12511@name*) (K7994@syntax-violation '#f '"empty library name" K12500@spec) (void)) (values K12511@name* K12510@ver*))) K12507@K12505@ver* K12506@K12504@name*))))) '#f))) (set! K7860@parse-library (lambda (K12558@e) ((lambda (K12560@t) ((lambda (K12562@ls/false) (if (and K12562@ls/false (apply (lambda (K12564@library K12565@name* K12566@export K12567@exp* K12568@import K12569@imp* K12570@b*) (and (eq? (K8000@syntax->datum K12566@export) 'export) (eq? (K8000@syntax->datum K12568@import) 'import) (eq? (K8000@syntax->datum K12564@library) 'library))) K12562@ls/false)) (apply (lambda (K12578@library K12579@name* K12580@export K12581@exp* K12582@import K12583@imp* K12584@b*) (values K12579@name* K12581@exp* K12583@imp* K12584@b*)) K12562@ls/false) ((lambda (K12592@t) ((lambda (K12594@ls/false) (if K12594@ls/false (apply (lambda () (K7994@syntax-violation '#f '"malformed library" K12558@e)) K12594@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12592@t))) (K7761@syntax-dispatch K12592@t '_))) K12560@t))) (K7761@syntax-dispatch K12560@t '(any each-any (any . each-any) (any . each-any) . each-any)))) K12558@e))) (set! K7862@parse-import-spec* ((lambda () ((lambda (K12597@idsyn? K12599@dup-error K12601@merge-substs K12603@exclude* K12605@find* K12607@rem* K12609@remove-dups K12611@parse-library-name K12613@import-library K12615@get-import K12617@add-imports!) (begin (set! K12597@idsyn? (lambda (K13108@x) (symbol? (K8000@syntax->datum K13108@x)))) (set! K12599@dup-error (lambda (K13106@name) (K7994@syntax-violation 'import '"two imports with different bindings" K13106@name))) (set! K12601@merge-substs (lambda (K13088@s K13089@subst) ((lambda (K13093@insert-to-subst) (begin (set! K13093@insert-to-subst (lambda (K13094@a K13095@subst) ((lambda (K13098@name K13099@label) ((lambda (K13102@t) (if K13102@t ((lambda (K13104@x) (if (eq? (cdr K13104@x) K13099@label) K13095@subst (K12599@dup-error K13098@name))) K13102@t) (cons K13094@a K13095@subst))) (assq K13098@name K13095@subst))) (car K13094@a) (cdr K13094@a)))) (if (null? K13088@s) K13089@subst (K13093@insert-to-subst (car K13088@s) (K12601@merge-substs (cdr K13088@s) K13089@subst))))) '#f))) (set! K12603@exclude* (lambda (K13046@sym* K13047@subst) ((lambda (K13051@exclude) (begin (set! K13051@exclude (lambda (K13072@sym K13073@subst) (if (null? K13073@subst) (K7994@syntax-violation 'import '"cannot rename unbound identifier" K13072@sym) (if (eq? K13072@sym (caar K13073@subst)) (values (cdar K13073@subst) (cdr K13073@subst)) ((lambda (K13076@a) (call-with-values (lambda () (K13051@exclude K13072@sym (cdr K13073@subst))) (lambda (K13080@K13078@old K13081@K13079@subst) ((lambda (K13084@subst K13085@old) (values K13085@old (cons K13076@a K13084@subst))) K13081@K13079@subst K13080@K13078@old)))) (car K13073@subst)))))) (if (null? K13046@sym*) (values '() K13047@subst) (call-with-values (lambda () (K13051@exclude (car K13046@sym*) K13047@subst)) (lambda (K13054@K13052@old K13055@K13053@subst) ((lambda (K13058@subst K13059@old) (call-with-values (lambda () (K12603@exclude* (cdr K13046@sym*) K13058@subst)) (lambda (K13064@K13062@old* K13065@K13063@subst) ((lambda (K13068@subst K13069@old*) (values (cons K13059@old K13069@old*) K13068@subst)) K13065@K13063@subst K13064@K13062@old*)))) K13055@K13053@subst K13054@K13052@old)))))) '#f))) (set! K12605@find* (lambda (K13038@sym* K13039@subst) (map (lambda (K13042@x) ((lambda (K13044@t) (if K13044@t (cdr K13044@t) (K7994@syntax-violation 'import '"cannot find identifier" K13042@x))) (assq K13042@x K13039@subst))) K13038@sym*))) (set! K12607@rem* (lambda (K13030@sym* K13031@subst) ((letrec ((K13034@f (lambda (K13036@subst) (if (null? K13036@subst) '() (if (memq (caar K13036@subst) K13030@sym*) (K13034@f (cdr K13036@subst)) (cons (car K13036@subst) (K13034@f (cdr K13036@subst)))))))) K13034@f) K13031@subst))) (set! K12609@remove-dups (lambda (K13028@ls) (if (null? K13028@ls) '() (if (memq (car K13028@ls) (cdr K13028@ls)) (K12609@remove-dups (cdr K13028@ls)) (cons (car K13028@ls) (K12609@remove-dups (cdr K13028@ls))))))) (set! K12611@parse-library-name (lambda (K12798@spec) ((lambda (K12801@subversion? K12803@subversion-pred K12805@version-pred) (begin (set! K12801@subversion? (lambda (K13024@x) ((lambda (K13026@x) (and (integer? K13026@x) (exact? K13026@x) (>= K13026@x '0))) (K8000@syntax->datum K13024@x)))) (set! K12803@subversion-pred (lambda (K12928@x*) ((lambda (K12930@t) ((lambda (K12932@ls/false) (if (and K12932@ls/false (apply (lambda (K12934@n) (K12801@subversion? K12934@n)) K12932@ls/false)) (apply (lambda (K12936@n) (lambda (K12938@x) (= K12938@x (K8000@syntax->datum K12936@n)))) K12932@ls/false) ((lambda (K12940@t) ((lambda (K12942@ls/false) (if (and K12942@ls/false (apply (lambda (K12944@p? K12945@sub*) (eq? (K8000@syntax->datum K12944@p?) 'and)) K12942@ls/false)) (apply (lambda (K12948@p? K12949@sub*) ((lambda (K12952@p*) (lambda (K12954@x) (for-all (lambda (K12956@p) (K12956@p K12954@x)) K12952@p*))) (map K12803@subversion-pred K12949@sub*))) K12942@ls/false) ((lambda (K12958@t) ((lambda (K12960@ls/false) (if (and K12960@ls/false (apply (lambda (K12962@p? K12963@sub*) (eq? (K8000@syntax->datum K12962@p?) 'or)) K12960@ls/false)) (apply (lambda (K12966@p? K12967@sub*) ((lambda (K12970@p*) (lambda (K12972@x) (exists (lambda (K12974@p) (K12974@p K12972@x)) K12970@p*))) (map K12803@subversion-pred K12967@sub*))) K12960@ls/false) ((lambda (K12976@t) ((lambda (K12978@ls/false) (if (and K12978@ls/false (apply (lambda (K12980@p? K12981@sub) (eq? (K8000@syntax->datum K12980@p?) 'not)) K12978@ls/false)) (apply (lambda (K12984@p? K12985@sub) ((lambda (K12988@p) (lambda (K12990@x) (not (K12988@p K12990@x)))) (K12803@subversion-pred K12985@sub))) K12978@ls/false) ((lambda (K12992@t) ((lambda (K12994@ls/false) (if (and K12994@ls/false (apply (lambda (K12996@p? K12997@n) (and (eq? (K8000@syntax->datum K12996@p?) '<=) (K12801@subversion? K12997@n))) K12994@ls/false)) (apply (lambda (K13000@p? K13001@n) (lambda (K13004@x) (<= K13004@x (K8000@syntax->datum K13001@n)))) K12994@ls/false) ((lambda (K13006@t) ((lambda (K13008@ls/false) (if (and K13008@ls/false (apply (lambda (K13010@p? K13011@n) (and (eq? (K8000@syntax->datum K13010@p?) '>=) (K12801@subversion? K13011@n))) K13008@ls/false)) (apply (lambda (K13014@p? K13015@n) (lambda (K13018@x) (>= K13018@x (K8000@syntax->datum K13015@n)))) K13008@ls/false) ((lambda (K13020@t) ((lambda (K13022@ls/false) (if K13022@ls/false (apply (lambda () (K7994@syntax-violation 'import '"invalid sub-version spec" K12798@spec K12928@x*)) K13022@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K13020@t))) (K7761@syntax-dispatch K13020@t '_))) K13006@t))) (K7761@syntax-dispatch K13006@t '(any any)))) K12992@t))) (K7761@syntax-dispatch K12992@t '(any any)))) K12976@t))) (K7761@syntax-dispatch K12976@t '(any any)))) K12958@t))) (K7761@syntax-dispatch K12958@t '(any . each-any)))) K12940@t))) (K7761@syntax-dispatch K12940@t '(any . each-any)))) K12930@t))) (K7761@syntax-dispatch K12930@t 'any))) K12928@x*))) (set! K12805@version-pred (lambda (K12848@x*) ((lambda (K12850@t) ((lambda (K12852@ls/false) (if K12852@ls/false (apply (lambda () (lambda (K12854@x) '#t)) K12852@ls/false) ((lambda (K12856@t) ((lambda (K12858@ls/false) (if (and K12858@ls/false (apply (lambda (K12860@c K12861@ver*) (eq? (K8000@syntax->datum K12860@c) 'and)) K12858@ls/false)) (apply (lambda (K12864@c K12865@ver*) ((lambda (K12868@p*) (lambda (K12870@x) (for-all (lambda (K12872@p) (K12872@p K12870@x)) K12868@p*))) (map K12805@version-pred K12865@ver*))) K12858@ls/false) ((lambda (K12874@t) ((lambda (K12876@ls/false) (if (and K12876@ls/false (apply (lambda (K12878@c K12879@ver*) (eq? (K8000@syntax->datum K12878@c) 'or)) K12876@ls/false)) (apply (lambda (K12882@c K12883@ver*) ((lambda (K12886@p*) (lambda (K12888@x) (exists (lambda (K12890@p) (K12890@p K12888@x)) K12886@p*))) (map K12805@version-pred K12883@ver*))) K12876@ls/false) ((lambda (K12892@t) ((lambda (K12894@ls/false) (if (and K12894@ls/false (apply (lambda (K12896@c K12897@ver) (eq? (K8000@syntax->datum K12896@c) 'not)) K12894@ls/false)) (apply (lambda (K12900@c K12901@ver) ((lambda (K12904@p) (lambda (K12906@x) (not (K12904@p K12906@x)))) (K12805@version-pred K12901@ver))) K12894@ls/false) ((lambda (K12908@t) ((lambda (K12910@ls/false) (if K12910@ls/false (apply (lambda (K12912@sub*) ((lambda (K12914@p*) (lambda (K12916@x) ((letrec ((K12918@f (lambda (K12920@p* K12921@x) (if (null? K12920@p*) '#t (if (null? K12921@x) '#f (and ((car K12920@p*) (car K12921@x)) (K12918@f (cdr K12920@p*) (cdr K12921@x)))))))) K12918@f) K12914@p* K12916@x))) (map K12803@subversion-pred K12912@sub*))) K12910@ls/false) ((lambda (K12924@t) ((lambda (K12926@ls/false) (if K12926@ls/false (apply (lambda () (K7994@syntax-violation 'import '"invalid version spec" K12798@spec K12848@x*)) K12926@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12924@t))) (K7761@syntax-dispatch K12924@t '_))) K12908@t))) (K7761@syntax-dispatch K12908@t 'each-any))) K12892@t))) (K7761@syntax-dispatch K12892@t '(any any)))) K12874@t))) (K7761@syntax-dispatch K12874@t '(any . each-any)))) K12856@t))) (K7761@syntax-dispatch K12856@t '(any . each-any)))) K12850@t))) (K7761@syntax-dispatch K12850@t '()))) K12848@x*))) ((letrec ((K12806@f (lambda (K12808@x) ((lambda (K12810@t) ((lambda (K12812@ls/false) (if K12812@ls/false (apply (lambda (K12814@version-spec*) (values '() (K12805@version-pred K12814@version-spec*))) K12812@ls/false) ((lambda (K12816@t) ((lambda (K12818@ls/false) (if (and K12818@ls/false (apply (lambda (K12820@x K12821@x*) (K12597@idsyn? K12820@x)) K12818@ls/false)) (apply (lambda (K12824@x K12825@x*) (call-with-values (lambda () (K12806@f K12825@x*)) (lambda (K12830@K12828@name K12831@K12829@pred) ((lambda (K12834@pred K12835@name) (values (cons (K8000@syntax->datum K12824@x) K12835@name) K12834@pred)) K12831@K12829@pred K12830@K12828@name)))) K12818@ls/false) ((lambda (K12838@t) ((lambda (K12840@ls/false) (if K12840@ls/false (apply (lambda () (values '() (lambda (K12842@x) '#t))) K12840@ls/false) ((lambda (K12844@t) ((lambda (K12846@ls/false) (if K12846@ls/false (apply (lambda () (K7994@syntax-violation '#f '"invalid import spec" K12798@spec)) K12846@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12844@t))) (K7761@syntax-dispatch K12844@t '_))) K12838@t))) (K7761@syntax-dispatch K12838@t '()))) K12816@t))) (K7761@syntax-dispatch K12816@t '(any . any)))) K12810@t))) (K7761@syntax-dispatch K12810@t '(each-any)))) K12808@x)))) K12806@f) K12798@spec))) '#f '#f '#f))) (set! K12613@import-library (lambda (K12784@spec*) (call-with-values (lambda () (K12611@parse-library-name K12784@spec*)) (lambda (K12788@K12786@name K12789@K12787@pred) ((lambda (K12792@pred K12793@name) (begin (if (null? K12793@name) (K7994@syntax-violation 'import '"empty library name" K12784@spec*) (void)) ((lambda (K12796@lib) (begin (if (not K12796@lib) (K7994@syntax-violation 'import '"cannot find library with required name" K12793@name) (void)) (if (not (K12792@pred (K6743@K6351@library-version K12796@lib))) (K7994@syntax-violation 'import '"library does not satisfy version specification" K12784@spec* K12796@lib) (void)) ((K7872@imp-collector) K12796@lib) (K6747@K6359@library-subst K12796@lib))) (K6783@K6431@find-library-by-name K12793@name)))) K12789@K12787@pred K12788@K12786@name))))) (set! K12615@get-import (lambda (K12642@spec) ((lambda (K12644@t) ((lambda (K12646@ls/false) (if (and K12646@ls/false (apply (lambda (K12648@x K12649@x*) (not (memq (K8000@syntax->datum K12648@x) '(for rename except only prefix library)))) K12646@ls/false)) (apply (lambda (K12652@x K12653@x*) (K12613@import-library (cons K12652@x K12653@x*))) K12646@ls/false) ((lambda (K12656@t) ((lambda (K12658@ls/false) (if (and K12658@ls/false (apply (lambda (K12660@rename K12661@isp K12662@old* K12663@new*) (and (eq? (K8000@syntax->datum K12660@rename) 'rename) (for-all K12597@idsyn? K12662@old*) (for-all K12597@idsyn? K12663@new*))) K12658@ls/false)) (apply (lambda (K12668@rename K12669@isp K12670@old* K12671@new*) ((lambda (K12676@subst K12677@old* K12678@new*) ((lambda (K12682@old-label*) ((lambda (K12684@subst) (K12601@merge-substs (map cons K12678@new* K12682@old-label*) K12684@subst)) (K12607@rem* K12677@old* K12676@subst))) (K12605@find* K12677@old* K12676@subst))) (K12615@get-import K12669@isp) (map K8000@syntax->datum K12670@old*) (map K8000@syntax->datum K12671@new*))) K12658@ls/false) ((lambda (K12686@t) ((lambda (K12688@ls/false) (if (and K12688@ls/false (apply (lambda (K12690@except K12691@isp K12692@sym*) (and (eq? (K8000@syntax->datum K12690@except) 'except) (for-all K12597@idsyn? K12692@sym*))) K12688@ls/false)) (apply (lambda (K12696@except K12697@isp K12698@sym*) ((lambda (K12702@subst) (K12607@rem* (map K8000@syntax->datum K12698@sym*) K12702@subst)) (K12615@get-import K12697@isp))) K12688@ls/false) ((lambda (K12704@t) ((lambda (K12706@ls/false) (if (and K12706@ls/false (apply (lambda (K12708@only K12709@isp K12710@sym*) (and (eq? (K8000@syntax->datum K12708@only) 'only) (for-all K12597@idsyn? K12710@sym*))) K12706@ls/false)) (apply (lambda (K12714@only K12715@isp K12716@sym*) ((lambda (K12720@subst K12721@sym*) ((lambda (K12724@sym*) ((lambda (K12726@lab*) (map cons K12724@sym* K12726@lab*)) (K12605@find* K12724@sym* K12720@subst))) (K12609@remove-dups K12721@sym*))) (K12615@get-import K12715@isp) (map K8000@syntax->datum K12716@sym*))) K12706@ls/false) ((lambda (K12728@t) ((lambda (K12730@ls/false) (if (and K12730@ls/false (apply (lambda (K12732@prefix K12733@isp K12734@p) (and (eq? (K8000@syntax->datum K12732@prefix) 'prefix) (K12597@idsyn? K12734@p))) K12730@ls/false)) (apply (lambda (K12738@prefix K12739@isp K12740@p) ((lambda (K12744@subst K12745@prefix) (map (lambda (K12748@x) (cons (string->symbol (string-append K12745@prefix (symbol->string (car K12748@x)))) (cdr K12748@x))) K12744@subst)) (K12615@get-import K12739@isp) (symbol->string (K8000@syntax->datum K12740@p)))) K12730@ls/false) ((lambda (K12750@t) ((lambda (K12752@ls/false) (if (and K12752@ls/false (apply (lambda (K12754@library K12755@spec*) (eq? (K8000@syntax->datum K12754@library) 'library)) K12752@ls/false)) (apply (lambda (K12758@library K12759@spec*) (K12613@import-library K12759@spec*)) K12752@ls/false) ((lambda (K12762@t) ((lambda (K12764@ls/false) (if (and K12764@ls/false (apply (lambda (K12766@for K12767@isp K12768@rest) (eq? (K8000@syntax->datum K12766@for) 'for)) K12764@ls/false)) (apply (lambda (K12772@for K12773@isp K12774@rest) (K12615@get-import K12773@isp)) K12764@ls/false) ((lambda (K12778@t) ((lambda (K12780@ls/false) (if K12780@ls/false (apply (lambda (K12782@spec) (K7994@syntax-violation 'import '"invalid import spec" K12782@spec)) K12780@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K12778@t))) (K7761@syntax-dispatch K12778@t 'any))) K12762@t))) (K7761@syntax-dispatch K12762@t '(any any . any)))) K12750@t))) (K7761@syntax-dispatch K12750@t '(any each-any)))) K12728@t))) (K7761@syntax-dispatch K12728@t '(any any any)))) K12704@t))) (K7761@syntax-dispatch K12704@t '(any any . each-any)))) K12686@t))) (K7761@syntax-dispatch K12686@t '(any any . each-any)))) K12656@t))) (K7761@syntax-dispatch K12656@t '(any any . #(each (any any)))))) K12644@t))) (K7761@syntax-dispatch K12644@t '(any . each-any)))) K12642@spec))) (set! K12617@add-imports! (lambda (K12626@imp K12627@h) ((lambda (K12630@subst) (for-each (lambda (K12632@x) ((lambda (K12634@name K12635@label) ((lambda (K12638@t) (if K12638@t ((lambda (K12640@l) (if (not (eq? K12640@l K12635@label)) (K12599@dup-error K12634@name) (void))) K12638@t) (hashtable-set! K12627@h K12634@name K12635@label))) (hashtable-ref K12627@h K12634@name '#f))) (car K12632@x) (cdr K12632@x))) K12630@subst)) (K12615@get-import K12626@imp)))) (lambda (K12618@imp*) ((letrec ((K12620@f (lambda (K12622@imp* K12623@h) (if (null? K12622@imp*) (hashtable-entries K12623@h) (begin (K12617@add-imports! (car K12622@imp*) K12623@h) (K12620@f (cdr K12622@imp*) K12623@h)))))) K12620@f) K12618@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! K7864@make-top-rib (lambda (K13110@names K13111@labels) ((lambda (K13114@rib) (begin (vector-for-each (lambda (K13116@name K13117@label) (begin (if (not (symbol? K13116@name)) (error 'make-top-rib '"BUG: not a symbol" K13116@name) (void)) (K7187@extend-rib/nc! K13114@rib (K7210@make-stx K13116@name K7132@top-mark* '() '()) K13117@label))) K13110@names K13111@labels) K13114@rib)) (K7183@make-empty-rib)))) (set! K7866@make-collector (lambda () ((lambda (K13120@ls) (lambda K13124 ((lambda (K13125) (if (= K13125 '0) (apply (lambda () K13120@ls) K13124) (if (= K13125 '1) (apply (lambda (K13122@x) (set! K13120@ls (K7125@set-cons K13122@x K13120@ls))) K13124) (error 'apply '"invalid arg count")))) (length K13124)))) '()))) (set! K7868@inv-collector (K6162@K5940@make-parameter (lambda K13126@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (K13128@x) (begin (if (not (procedure? K13128@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" K13128@x) (void)) K13128@x)))) (set! K7870@vis-collector (K6162@K5940@make-parameter (lambda K13130@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (K13132@x) (begin (if (not (procedure? K13132@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" K13132@x) (void)) K13132@x)))) (set! K7872@imp-collector (K6162@K5940@make-parameter (lambda K13134@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (K13136@x) (begin (if (not (procedure? K13136@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" K13136@x) (void)) K13136@x)))) (set! K7874@chi-library-internal (lambda (K13138@e* K13139@rib K13140@top?) (call-with-values (lambda () (K7852@chi-body* K13138@e* '() '() '() '() '() '() '() K13139@rib K13140@top?)) (lambda (K13152@K13144@e* K13153@K13145@r K13154@K13146@mr K13155@K13147@lex* K13156@K13148@rhs* K13157@K13149@mod** K13158@K13150@_kwd* K13159@K13151@exp*) ((lambda (K13168@exp* K13169@_kwd* K13170@mod** K13171@rhs* K13172@lex* K13173@mr K13174@r K13175@e*) (values (append (apply append (reverse K13170@mod**)) K13175@e*) K13174@r K13173@mr (reverse K13172@lex*) (reverse K13171@rhs*) K13168@exp*)) K13159@K13151@exp* K13158@K13150@_kwd* K13157@K13149@mod** K13156@K13148@rhs* K13155@K13147@lex* K13154@K13146@mr K13153@K13145@r K13152@K13144@e*))))) (set! K7876@chi-interaction-expr (lambda (K13184@e K13185@rib K13186@r) (call-with-values (lambda () (K7852@chi-body* (list K13184@e) K13186@r K13186@r '() '() '() '() '() K13185@rib '#t)) (lambda (K13198@K13190@e* K13199@K13191@r K13200@K13192@mr K13201@K13193@lex* K13202@K13194@rhs* K13203@K13195@mod** K13204@K13196@_kwd* K13205@K13197@_exp*) ((lambda (K13214@_exp* K13215@_kwd* K13216@mod** K13217@rhs* K13218@lex* K13219@mr K13220@r K13221@e*) ((lambda (K13230@e*) ((lambda (K13232@e) (values K13232@e K13220@r)) (if (null? K13230@e*) (K7104@K6962@build-void) (if (null? (cdr K13230@e*)) (car K13230@e*) (K7103@K6960@build-sequence '#f K13230@e*))))) (K7809@expand-interaction-rhs*/init* (reverse K13218@lex*) (reverse K13217@rhs*) (append (apply append (reverse K13216@mod**)) K13221@e*) K13220@r K13219@mr))) K13205@K13197@_exp* K13204@K13196@_kwd* K13203@K13195@mod** K13202@K13194@rhs* K13201@K13193@lex* K13200@K13192@mr K13199@K13191@r K13198@K13190@e*))))) (set! K7878@library-body-expander (lambda (K13234@name K13235@main-exp* K13236@imp* K13237@b* K13238@top?) ((lambda (K13245@itc) (begin (set! K13245@itc (K7866@make-collector)) ((lambda (K13250@K13246@imp-collector K13251@K13247@top-level-context K13252@K13248@imp-collector K13253@K13249@top-level-context) ((lambda (K13258@swap) (dynamic-wind K13258@swap (lambda () (call-with-values (lambda () (K7862@parse-import-spec* K13236@imp*)) (lambda (K13262@K13260@subst-names K13263@K13261@subst-labels) ((lambda (K13266@subst-labels K13267@subst-names) ((lambda (K13270@rib) ((lambda (K13273@wrap) (begin (set! K13273@wrap (lambda (K13381@x) (K7210@make-stx K13381@x K7132@top-mark* (list K13270@rib) '()))) ((lambda (K13274@b* K13275@main-exp* K13276@rtc K13277@vtc) ((lambda (K13286@K13282@inv-collector K13287@K13283@vis-collector K13288@K13284@inv-collector K13289@K13285@vis-collector) ((lambda (K13294@swap) (dynamic-wind K13294@swap (lambda () (call-with-values (lambda () (K7874@chi-library-internal K13274@b* K13270@rib K13238@top?)) (lambda (K13302@K13296@init* K13303@K13297@r K13304@K13298@mr K13305@K13299@lex* K13306@K13300@rhs* K13307@K13301@internal-exp*) ((lambda (K13314@internal-exp* K13315@rhs* K13316@lex* K13317@mr K13318@r K13319@init*) (call-with-values (lambda () (K7856@parse-exports (append K13275@main-exp* K13314@internal-exp*))) (lambda (K13328@K13326@exp-name* K13329@K13327@exp-id*) ((lambda (K13332@exp-id* K13333@exp-name*) (begin (K7191@seal-rib! K13270@rib) ((lambda (K13336@init*) ((lambda (K13338@rhs*) ((lambda () (begin (K7193@unseal-rib! K13270@rib) ((lambda (K13340@loc* K13341@export-subst) ((lambda (K13345@errstr) (begin (set! K13345@errstr '"attempt to export mutated variable") (call-with-values (lambda () (K7974@make-export-env/macros K13316@lex* K13340@loc* K13318@r)) (lambda (K13349@K13346@export-env K13350@K13347@global* K13351@K13348@macro*) ((lambda (K13355@macro* K13356@global* K13357@export-env) (begin (for-each (lambda (K13361@s) ((lambda (K13363@name K13364@label) ((lambda (K13367@p) (if K13367@p ((lambda (K13369@b) ((lambda (K13371@type) (if (eq? K13371@type 'mutable) (K7994@syntax-violation 'export K13345@errstr K13363@name) (void))) (car K13369@b))) (cdr K13367@p)) (void))) (assq K13364@label K13357@export-env))) (car K13361@s) (cdr K13361@s))) K13341@export-subst) ((lambda (K13373@invoke-body K13374@invoke-definitions) (values (K13245@itc) (K13276@rtc) (K13277@vtc) (K7103@K6960@build-sequence '#f (append K13374@invoke-definitions (list K13373@invoke-body))) K13355@macro* K13341@export-subst K13357@export-env)) (K7106@K6966@build-letrec* '#f K13316@lex* K13338@rhs* (K7970@build-exports K13356@global* K13336@init*)) (map K7099@K6797@build-global-define (map cdr K13356@global*))))) K13351@K13348@macro* K13350@K13347@global* K13349@K13346@export-env))))) '#f)) (map K7138@gen-global K13316@lex*) (K7972@make-export-subst K13333@exp-name* K13332@exp-id*)))))) (K7811@chi-rhs* K13315@rhs* K13318@r K13317@mr))) (K7791@chi-expr* K13319@init* K13318@r K13317@mr)))) K13329@K13327@exp-id* K13328@K13326@exp-name*)))) K13307@K13301@internal-exp* K13306@K13300@rhs* K13305@K13299@lex* K13304@K13298@mr K13303@K13297@r K13302@K13296@init*)))) K13294@swap)) (lambda () (begin ((lambda (K13377@t) (begin (K13286@K13282@inv-collector K13288@K13284@inv-collector) (set! K13288@K13284@inv-collector K13377@t))) (K13286@K13282@inv-collector)) ((lambda (K13379@t) (begin (K13287@K13283@vis-collector K13289@K13285@vis-collector) (set! K13289@K13285@vis-collector K13379@t))) (K13287@K13283@vis-collector)))))) K7868@inv-collector K7870@vis-collector K13276@rtc K13277@vtc)) (map K13273@wrap K13237@b*) (map K13273@wrap K13235@main-exp*) (K7866@make-collector) (K7866@make-collector)))) '#f)) (K7864@make-top-rib K13267@subst-names K13266@subst-labels))) K13263@K13261@subst-labels K13262@K13260@subst-names)))) K13258@swap)) (lambda () (begin ((lambda (K13383@t) (begin (K13250@K13246@imp-collector K13252@K13248@imp-collector) (set! K13252@K13248@imp-collector K13383@t))) (K13250@K13246@imp-collector)) ((lambda (K13385@t) (begin (K13251@K13247@top-level-context K13253@K13249@top-level-context) (set! K13253@K13249@top-level-context K13385@t))) (K13251@K13247@top-level-context)))))) K7872@imp-collector K8008@top-level-context K13245@itc '#f))) '#f))) (set! K7880@core-library-expander (lambda (K13387@e K13388@verify-name) (call-with-values (lambda () (K7860@parse-library K13387@e)) (lambda (K13395@K13391@name* K13396@K13392@exp* K13397@K13393@imp* K13398@K13394@b*) ((lambda (K13403@b* K13404@imp* K13405@exp* K13406@name*) (call-with-values (lambda () (K7858@parse-library-name K13406@name*)) (lambda (K13413@K13411@name K13414@K13412@ver) ((lambda (K13417@ver K13418@name) (begin (K13388@verify-name K13418@name) (call-with-values (lambda () (K7878@library-body-expander K13418@name K13405@exp* K13404@imp* K13403@b* '#f)) (lambda (K13428@K13421@imp* K13429@K13422@invoke-req* K13430@K13423@visit-req* K13431@K13424@invoke-code K13432@K13425@visit-code K13433@K13426@export-subst K13434@K13427@export-env) ((lambda (K13442@export-env K13443@export-subst K13444@visit-code K13445@invoke-code K13446@visit-req* K13447@invoke-req* K13448@imp*) (values K13418@name K13417@ver K13448@imp* K13447@invoke-req* K13446@visit-req* K13445@invoke-code K13444@visit-code K13443@export-subst K13442@export-env)) K13434@K13427@export-env K13433@K13426@export-subst K13432@K13425@visit-code K13431@K13424@invoke-code K13430@K13423@visit-req* K13429@K13422@invoke-req* K13428@K13421@imp*))))) K13414@K13412@ver K13413@K13411@name)))) K13398@K13394@b* K13397@K13393@imp* K13396@K13392@exp* K13395@K13391@name*))))) (set! K7882@parse-top-level-program (lambda (K13456@e*) ((lambda (K13458@t) ((lambda (K13460@ls/false) (if (and K13460@ls/false (apply (lambda (K13462@import K13463@imp* K13464@b*) (eq? (K8000@syntax->datum K13462@import) 'import)) K13460@ls/false)) (apply (lambda (K13468@import K13469@imp* K13470@b*) (values K13469@imp* K13470@b*)) K13460@ls/false) ((lambda (K13474@t) ((lambda (K13476@ls/false) (if (and K13476@ls/false (apply (lambda (K13478@import K13479@x K13480@y) (eq? (K8000@syntax->datum K13478@import) 'import)) K13476@ls/false)) (apply (lambda (K13484@import K13485@x K13486@y) (K7994@syntax-violation 'expander '"invalid syntax of top-level program" (K7258@syntax-car K13456@e*))) K13476@ls/false) ((lambda (K13490@t) ((lambda (K13492@ls/false) (if K13492@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) K13492@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K13490@t))) (K7761@syntax-dispatch K13490@t '_))) K13474@t))) (K7761@syntax-dispatch K13474@t '((any . any) . any)))) K13458@t))) (K7761@syntax-dispatch K13458@t '((any . each-any) . each-any)))) K13456@e*))) (set! K7884@top-level-expander (lambda (K13494@e*) (call-with-values (lambda () (K7882@parse-top-level-program K13494@e*)) (lambda (K13498@K13496@imp* K13499@K13497@b*) ((lambda (K13502@b* K13503@imp*) (call-with-values (lambda () (K7878@library-body-expander '() '() K13503@imp* K13502@b* '#t)) (lambda (K13513@K13506@imp* K13514@K13507@invoke-req* K13515@K13508@visit-req* K13516@K13509@invoke-code K13517@K13510@visit-code K13518@K13511@export-subst K13519@K13512@export-env) ((lambda (K13527@export-env K13528@export-subst K13529@visit-code K13530@invoke-code K13531@visit-req* K13532@invoke-req* K13533@imp*) (values K13532@invoke-req* K13530@invoke-code)) K13519@K13512@export-env K13518@K13511@export-subst K13517@K13510@visit-code K13516@K13509@invoke-code K13515@K13508@visit-req* K13514@K13507@invoke-req* K13513@K13506@imp*)))) K13499@K13497@b* K13498@K13496@imp*))))) (set! K7890@K7885 (make-record-type-descriptor 'env '#f 'K7888 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! K7892@K7887 '#f) (set! K7894@K7886 (make-record-constructor-descriptor K7890@K7885 '#f K7892@K7887)) (set! K7897@env? (record-predicate K7890@K7885)) (set! K7899@make-env (record-constructor K7894@K7886)) (set! K7901@env-names (record-accessor K7890@K7885 '0)) (set! K7903@env-labels (record-accessor K7890@K7885 '1)) (set! K7905@env-itc (record-accessor K7890@K7885 '2)) (set! K7907@set-env-names! (record-mutator K7890@K7885 '0)) (set! K7909@set-env-labels! (record-mutator K7890@K7885 '1)) (set! K7911@set-env-itc! (record-mutator K7890@K7885 '2)) (set! K7913@rp (K6159@K5934@make-record-printer 'env (lambda (K13541@x K13542@p K13543@wr) (display '"#<environment>" K13542@p)))) (set! K7919@K7914 (make-record-type-descriptor 'interaction-env '#f 'K7917 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! K7921@K7916 '#f) (set! K7923@K7915 (make-record-constructor-descriptor K7919@K7914 '#f K7921@K7916)) (set! K7926@interaction-env? (record-predicate K7919@K7914)) (set! K7928@make-interaction-env (record-constructor K7923@K7915)) (set! K7930@interaction-env-rib (record-accessor K7919@K7914 '0)) (set! K7932@interaction-env-r (record-accessor K7919@K7914 '1)) (set! K7934@interaction-env-locs (record-accessor K7919@K7914 '2)) (set! K7936@set-interaction-env-rib! (record-mutator K7919@K7914 '0)) (set! K7938@set-interaction-env-r! (record-mutator K7919@K7914 '1)) (set! K7940@set-interaction-env-locs! (record-mutator K7919@K7914 '2)) (set! K7942@rp (K6159@K5934@make-record-printer 'interaction-env (lambda (K13547@x K13548@p K13549@wr) (display '"#<environment>" K13548@p)))) (set! K7944@interaction-environment-symbols (lambda () (K7952@environment-symbols (K8006@interaction-environment)))) (set! K7946@environment-bindings (lambda (K13553@e) (vector->list (vector-map (lambda (K13555@name K13556@label) (K7948@parse-binding (cons K13555@name (K6789@K6443@imported-label->binding K13556@label)))) (K7901@env-names K13553@e) (K7903@env-labels K13553@e))))) (set! K7948@parse-binding (lambda (K13559@b) (cons (car K13559@b) ((lambda (K13561@t) (if (memv K13561@t '(core-prim global)) 'procedure (if (memv K13561@t '(core-macro macro global-macro)) 'syntax (if (memv K13561@t '($core-rtd)) 'record (if (eq? (car K13559@b) (cadr K13559@b)) 'syntax 'unknown))))) (cadr K13559@b))))) (set! K7950@environment? (lambda (K13563@x) (or (K7897@env? K13563@x) (K7926@interaction-env? K13563@x)))) (set! K7952@environment-symbols (lambda (K13565@x) (if (K7897@env? K13565@x) (vector->list (K7901@env-names K13565@x)) (if (K7926@interaction-env? K13565@x) (map values (K7163@rib-sym* (K7930@interaction-env-rib K13565@x))) (assertion-violation 'environment-symbols '"not an environment" K13565@x))))) (set! K7954@environment (lambda K13567@imp* ((lambda (K13569@itc) ((lambda (K13573@K13571@imp-collector K13574@K13572@imp-collector) ((lambda (K13577@swap) (dynamic-wind K13577@swap (lambda () (call-with-values (lambda () (K7862@parse-import-spec* K13567@imp*)) (lambda (K13581@K13579@subst-names K13582@K13580@subst-labels) ((lambda (K13585@subst-labels K13586@subst-names) (K7899@make-env K13586@subst-names K13585@subst-labels K13569@itc)) K13582@K13580@subst-labels K13581@K13579@subst-names)))) K13577@swap)) (lambda () ((lambda (K13589@t) (begin (K13573@K13571@imp-collector K13574@K13572@imp-collector) (set! K13574@K13572@imp-collector K13589@t))) (K13573@K13571@imp-collector))))) K7872@imp-collector K13569@itc)) (K7866@make-collector)))) (set! K7956@null-environment (lambda (K13591@n) (begin (if (not (eqv? K13591@n '5)) (assertion-violation 'null-environment '"not 5" K13591@n) (void)) (K7954@environment '(psyntax null-environment-5))))) (set! K7958@scheme-report-environment (lambda (K13593@n) (begin (if (not (eqv? K13593@n '5)) (assertion-violation 'scheme-report-environment '"not 5" K13593@n) (void)) (K7954@environment '(psyntax scheme-report-environment-5))))) (set! K7960@expand (lambda (K13595@x K13596@env) (if (K7897@env? K13596@env) ((lambda (K13599@rib) ((lambda (K13601@x K13602@itc K13603@rtc K13604@vtc) ((lambda (K13609@x) (begin (K7191@seal-rib! K13599@rib) (values K13609@x (K13603@rtc)))) ((lambda (K13619@K13611@top-level-context K13620@K13612@inv-collector K13621@K13613@vis-collector K13622@K13614@imp-collector K13623@K13615@top-level-context K13624@K13616@inv-collector K13625@K13617@vis-collector K13626@K13618@imp-collector) ((lambda (K13635@swap) (dynamic-wind K13635@swap (lambda () (K7795@chi-expr K13601@x '() '())) K13635@swap)) (lambda () (begin ((lambda (K13637@t) (begin (K13619@K13611@top-level-context K13623@K13615@top-level-context) (set! K13623@K13615@top-level-context K13637@t))) (K13619@K13611@top-level-context)) ((lambda (K13639@t) (begin (K13620@K13612@inv-collector K13624@K13616@inv-collector) (set! K13624@K13616@inv-collector K13639@t))) (K13620@K13612@inv-collector)) ((lambda (K13641@t) (begin (K13621@K13613@vis-collector K13625@K13617@vis-collector) (set! K13625@K13617@vis-collector K13641@t))) (K13621@K13613@vis-collector)) ((lambda (K13643@t) (begin (K13622@K13614@imp-collector K13626@K13618@imp-collector) (set! K13626@K13618@imp-collector K13643@t))) (K13622@K13614@imp-collector)))))) K8008@top-level-context K7868@inv-collector K7870@vis-collector K7872@imp-collector '#f K13603@rtc K13604@vtc K13602@itc))) (K7210@make-stx K13595@x K7132@top-mark* (list K13599@rib) '()) (K7905@env-itc K13596@env) (K7866@make-collector) (K7866@make-collector))) (K7864@make-top-rib (K7901@env-names K13596@env) (K7903@env-labels K13596@env))) (if (K7926@interaction-env? K13596@env) ((lambda (K13645@rib K13646@r K13647@rtc) ((lambda (K13651@x) (call-with-values (lambda () ((lambda (K13663@K13655@top-level-context K13664@K13656@inv-collector K13665@K13657@vis-collector K13666@K13658@imp-collector K13667@K13659@top-level-context K13668@K13660@inv-collector K13669@K13661@vis-collector K13670@K13662@imp-collector) ((lambda (K13679@swap) (dynamic-wind K13679@swap (lambda () (K7876@chi-interaction-expr K13651@x K13645@rib K13646@r)) K13679@swap)) (lambda () (begin ((lambda (K13681@t) (begin (K13663@K13655@top-level-context K13667@K13659@top-level-context) (set! K13667@K13659@top-level-context K13681@t))) (K13663@K13655@top-level-context)) ((lambda (K13683@t) (begin (K13664@K13656@inv-collector K13668@K13660@inv-collector) (set! K13668@K13660@inv-collector K13683@t))) (K13664@K13656@inv-collector)) ((lambda (K13685@t) (begin (K13665@K13657@vis-collector K13669@K13661@vis-collector) (set! K13669@K13661@vis-collector K13685@t))) (K13665@K13657@vis-collector)) ((lambda (K13687@t) (begin (K13666@K13658@imp-collector K13670@K13662@imp-collector) (set! K13670@K13662@imp-collector K13687@t))) (K13666@K13658@imp-collector)))))) K8008@top-level-context K7868@inv-collector K7870@vis-collector K7872@imp-collector K13596@env K13647@rtc (K7866@make-collector) (K7866@make-collector))) (lambda (K13689@K13653@e K13690@K13654@r^) ((lambda (K13693@r^ K13694@e) (begin (K7938@set-interaction-env-r! K13596@env K13693@r^) (values K13694@e (K13647@rtc)))) K13690@K13654@r^ K13689@K13653@e)))) (K7210@make-stx K13595@x K7132@top-mark* (list K13645@rib) '()))) (K7930@interaction-env-rib K13596@env) (K7932@interaction-env-r K13596@env) (K7866@make-collector)) (assertion-violation 'expand '"not an environment" K13596@env))))) (set! K7962@eval (lambda (K13697@x K13698@env) (begin (if (not (K7950@environment? K13698@env)) (error 'eval '"not an environment" K13698@env) (void)) (call-with-values (lambda () (K7960@expand K13697@x K13698@env)) (lambda (K13703@K13701@x K13704@K13702@invoke-req*) ((lambda (K13707@invoke-req* K13708@x) (begin (for-each K6790@K6445@invoke-library K13707@invoke-req*) (eval-core (K6246@K6174@expanded->core K13708@x)))) K13704@K13702@invoke-req* K13703@K13701@x)))))) (set! K7964@library-expander (lambda K13812 ((lambda (K13813) (if (= K13813 '3) (apply (lambda (K13711@x K13712@filename K13713@verify-name) ((lambda (K13718@build-visit-code K13720@visit!) (begin (set! K13718@build-visit-code (lambda (K13794@macro*) (if (null? K13794@macro*) (K7104@K6962@build-void) (K7103@K6960@build-sequence '#f (map (lambda (K13796@x) ((lambda (K13798@loc K13799@src) (list 'set! K13798@loc K13799@src)) (car K13796@x) (cddr K13796@x))) K13794@macro*))))) (set! K13720@visit! (lambda (K13786@macro*) (for-each (lambda (K13788@x) ((lambda (K13790@loc K13791@proc) (set-symbol-value! K13790@loc K13791@proc)) (car K13788@x) (cadr K13788@x))) K13786@macro*))) (call-with-values (lambda () (K7880@core-library-expander K13711@x K13713@verify-name)) (lambda (K13730@K13721@name K13731@K13722@ver K13732@K13723@imp* K13733@K13724@inv* K13734@K13725@vis* K13735@K13726@invoke-code K13736@K13727@macro* K13737@K13728@export-subst K13738@K13729@export-env) ((lambda (K13748@export-env K13749@export-subst K13750@macro* K13751@invoke-code K13752@vis* K13753@inv* K13754@imp* K13755@ver K13756@name) ((lambda (K13766@id K13767@name K13768@ver K13769@imp* K13770@vis* K13771@inv* K13772@visit-proc K13773@invoke-proc K13774@visit-code K13775@invoke-code) (begin (K6788@K6441@install-library K13766@id K13767@name K13768@ver K13769@imp* K13770@vis* K13771@inv* K13749@export-subst K13748@export-env K13772@visit-proc K13773@invoke-proc K13774@visit-code K13775@invoke-code '#t K13712@filename) (values K13766@id K13767@name K13768@ver K13769@imp* K13770@vis* K13771@inv* K13775@invoke-code K13774@visit-code K13749@export-subst K13748@export-env))) (K6148@K5912@gensym) K13756@name K13755@ver (map K6794@K6453@library-spec K13754@imp*) (map K6794@K6453@library-spec K13752@vis*) (map K6794@K6453@library-spec K13753@inv*) (lambda () (K13720@visit! K13750@macro*)) (lambda () (eval-core (K6246@K6174@expanded->core K13751@invoke-code))) (K13718@build-visit-code K13750@macro*) K13751@invoke-code)) K13738@K13729@export-env K13737@K13728@export-subst K13736@K13727@macro* K13735@K13726@invoke-code K13734@K13725@vis* K13733@K13724@inv* K13732@K13723@imp* K13731@K13722@ver K13730@K13721@name))))) '#f '#f)) K13812) (if (= K13813 '2) (apply (lambda (K13802@x K13803@filename) (K7964@library-expander K13802@x K13803@filename (lambda (K13806@x) (values)))) K13812) (if (= K13813 '1) (apply (lambda (K13808@x) (K7964@library-expander K13808@x '#f (lambda (K13810@x) (values)))) K13812) (error 'apply '"invalid arg count"))))) (length K13812)))) (set! K7966@boot-library-expand (lambda (K13814@x) (call-with-values (lambda () (K7964@library-expander K13814@x)) (lambda (K13826@K13816@id K13827@K13817@name K13828@K13818@ver K13829@K13819@imp* K13830@K13820@vis* K13831@K13821@inv* K13832@K13822@invoke-code K13833@K13823@visit-code K13834@K13824@export-subst K13835@K13825@export-env) ((lambda (K13846@export-env K13847@export-subst K13848@visit-code K13849@invoke-code K13850@inv* K13851@vis* K13852@imp* K13853@ver K13854@name K13855@id) (values K13854@name K13849@invoke-code K13847@export-subst K13846@export-env)) K13835@K13825@export-env K13834@K13824@export-subst K13833@K13823@visit-code K13832@K13822@invoke-code K13831@K13821@inv* K13830@K13820@vis* K13829@K13819@imp* K13828@K13818@ver K13827@K13817@name K13826@K13816@id))))) (set! K7968@rev-map-append (lambda (K13866@f K13867@ls K13868@ac) (if (null? K13867@ls) K13868@ac (K7968@rev-map-append K13866@f (cdr K13867@ls) (cons (K13866@f (car K13867@ls)) K13868@ac))))) (set! K7970@build-exports (lambda (K13872@lex*+loc* K13873@init*) (K7103@K6960@build-sequence '#f (cons (K7104@K6962@build-void) (K7968@rev-map-append (lambda (K13876@x) (list 'set! (cdr K13876@x) (car K13876@x))) K13872@lex*+loc* K13873@init*))))) (set! K7972@make-export-subst (lambda (K13878@name* K13879@id*) (map (lambda (K13882@name K13883@id) ((lambda (K13886@label) (begin (if (not K13886@label) (K7994@syntax-violation '#f '"cannot export unbound identifier" K13883@id) (void)) (cons K13882@name K13886@label))) (K7290@id->label K13883@id))) K13878@name* K13879@id*))) (set! K7974@make-export-env/macros (lambda (K13888@lex* K13889@loc* K13890@r) ((lambda (K13895@lookup) (begin (set! K13895@lookup (lambda (K13924@x) ((letrec ((K13926@f (lambda (K13928@x K13929@lex* K13930@loc*) (if (pair? K13929@lex*) (if (eq? K13928@x (car K13929@lex*)) (car K13930@loc*) (K13926@f K13928@x (cdr K13929@lex*) (cdr K13930@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) K13926@f) K13924@x K13888@lex* K13889@loc*))) ((letrec ((K13896@f (lambda (K13898@r K13899@env K13900@global* K13901@macro*) (if (null? K13898@r) (values K13899@env K13900@global* K13901@macro*) ((lambda (K13906@x) ((lambda (K13908@label K13909@b) ((lambda (K13912@t) (if (memv K13912@t '(lexical)) ((lambda (K13914@v) ((lambda (K13916@loc K13917@type) (K13896@f (cdr K13898@r) (cons (cons* K13908@label K13917@type K13916@loc) K13899@env) (cons (cons (K7645@lexical-var K13914@v) K13916@loc) K13900@global*) K13901@macro*)) (K13895@lookup (K7645@lexical-var K13914@v)) (if (K7647@lexical-mutable? K13914@v) 'mutable 'global))) (K7300@binding-value K13909@b)) (if (memv K13912@t '(local-macro)) ((lambda (K13920@loc) (K13896@f (cdr K13898@r) (cons (cons* K13908@label 'global-macro K13920@loc) K13899@env) K13900@global* (cons (cons K13920@loc (K7300@binding-value K13909@b)) K13901@macro*))) (K6148@K5912@gensym)) (if (memv K13912@t '(local-macro!)) ((lambda (K13922@loc) (K13896@f (cdr K13898@r) (cons (cons* K13908@label 'global-macro! K13922@loc) K13899@env) K13900@global* (cons (cons K13922@loc (K7300@binding-value K13909@b)) K13901@macro*))) (K6148@K5912@gensym)) (if (memv K13912@t '($rtd $module)) (K13896@f (cdr K13898@r) (cons K13906@x K13899@env) K13900@global* K13901@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (K7298@binding-type K13909@b) (K7300@binding-value K13909@b))))))) (K7298@binding-type K13909@b))) (car K13906@x) (cdr K13906@x))) (car K13898@r)))))) K13896@f) K13890@r '() '() '()))) '#f))) (set! K7976@generate-temporaries (lambda (K13934@ls) ((lambda (K13936@t) ((lambda (K13938@ls/false) (if K13938@ls/false (apply (lambda (K13940@ls) (map (lambda (K13942@x) (K7210@make-stx ((lambda (K13944@x) (if (or (symbol? K13944@x) (string? K13944@x)) (K6148@K5912@gensym K13944@x) (K6148@K5912@gensym 't))) (K8000@syntax->datum K13942@x)) K7132@top-mark* '() '())) K13940@ls)) K13938@ls/false) ((lambda (K13946@t) ((lambda (K13948@ls/false) (if K13948@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) K13948@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K13946@t))) (K7761@syntax-dispatch K13946@t '_))) K13936@t))) (K7761@syntax-dispatch K13936@t 'each-any))) K13934@ls))) (set! K7978@free-identifier=? (lambda (K13950@x K13951@y) (if (K7264@id? K13950@x) (if (K7264@id? K13951@y) (K7272@free-id=? K13950@x K13951@y) (assertion-violation 'free-identifier=? '"not an identifier" K13951@y)) (assertion-violation 'free-identifier=? '"not an identifier" K13950@x)))) (set! K7980@bound-identifier=? (lambda (K13954@x K13955@y) (if (K7264@id? K13954@x) (if (K7264@id? K13955@y) (K7270@bound-id=? K13954@x K13955@y) (assertion-violation 'bound-identifier=? '"not an identifier" K13955@y)) (assertion-violation 'bound-identifier=? '"not an identifier" K13954@x)))) (set! K7982@make-source-condition (lambda (K13958@x) ((lambda (K13968@K13963 K13970@K13965 K13972@K13964 K13975@K13962 K13977@make-source-condition K13979@K13960 K13981@K13961 K13983@source-condition? K13985@source-filename K13987@source-character) (begin (set! K13968@K13963 (make-record-type-descriptor '&source-information K15070@K14385@&condition-rtd 'K13966 '#f '#f '#((immutable file-name) (immutable character)))) (set! K13970@K13965 '#f) (set! K13972@K13964 (make-record-constructor-descriptor K13968@K13963 K15071@K14387@&condition-rcd K13970@K13965)) (set! K13975@K13962 (record-predicate K13968@K13963)) (set! K13977@make-source-condition (record-constructor K13972@K13964)) (set! K13979@K13960 (record-accessor K13968@K13963 '0)) (set! K13981@K13961 (record-accessor K13968@K13963 '1)) (set! K13983@source-condition? (condition-predicate K13968@K13963)) (set! K13985@source-filename (condition-accessor K13968@K13963 K13979@K13960)) (set! K13987@source-character (condition-accessor K13968@K13963 K13981@K13961)) (if (pair? K13958@x) (K13977@make-source-condition (car K13958@x) (cdr K13958@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! K7984@extract-position-condition (lambda (K13988@x) (K7982@make-source-condition (K7986@expression-position K13988@x)))) (set! K7986@expression-position (lambda (K13990@x) (and (K7208@stx? K13990@x) ((lambda (K13992@x) (and (K6151@K5918@annotation? K13992@x) (K6152@K5920@annotation-source K13992@x))) (K7212@stx-expr K13990@x))))) (set! K7988@assertion-error (lambda (K13994@expr K13995@pos) (raise (condition (K15118@K14577@make-assertion-violation) (K15136@K14625@make-who-condition 'assert) (K15076@K14468@make-message-condition '"assertion failed") (K15126@K14599@make-irritants-condition (list K13994@expr)) (K7982@make-source-condition K13995@pos))))) (set! K7990@syntax-error (lambda (K13998@x . K14000@args) (begin (if (not (for-all string? K14000@args)) (assertion-violation 'syntax-error '"invalid argument" K14000@args) (void)) (raise (condition (K15076@K14468@make-message-condition (if (null? K14000@args) '"invalid syntax" (apply string-append K14000@args))) (K15170@K14715@make-syntax-violation (K8000@syntax->datum K13998@x) '#f) (K7984@extract-position-condition K13998@x)))))) (set! K7992@syntax-violation* (lambda (K14002@who K14003@msg K14004@form K14005@condition-object) (begin (if (not (string? K14003@msg)) (assertion-violation 'syntax-violation '"message is not a string" K14003@msg) (void)) ((lambda (K14010@who) (raise (condition (if K14010@who (K15136@K14625@make-who-condition K14010@who) (condition)) (K15076@K14468@make-message-condition K14003@msg) K14005@condition-object (K7984@extract-position-condition K14004@form)))) (if (or (string? K14002@who) (symbol? K14002@who)) K14002@who (if (not K14002@who) ((lambda (K14012@t) ((lambda (K14014@ls/false) (if (and K14014@ls/false (apply (lambda (K14016@id) (K7264@id? K14016@id)) K14014@ls/false)) (apply (lambda (K14018@id) (K8000@syntax->datum K14018@id)) K14014@ls/false) ((lambda (K14020@t) ((lambda (K14022@ls/false) (if (and K14022@ls/false (apply (lambda (K14024@id K14025@rest) (K7264@id? K14024@id)) K14022@ls/false)) (apply (lambda (K14028@id K14029@rest) (K8000@syntax->datum K14028@id)) K14022@ls/false) ((lambda (K14032@t) ((lambda (K14034@ls/false) (if K14034@ls/false (apply (lambda () '#f) K14034@ls/false) (K7994@syntax-violation '#f '"invalid syntax" K14032@t))) (K7761@syntax-dispatch K14032@t '_))) K14020@t))) (K7761@syntax-dispatch K14020@t '(any . any)))) K14012@t))) (K7761@syntax-dispatch K14012@t 'any))) K14004@form) (assertion-violation 'syntax-violation '"invalid who argument" K14002@who))))))) (set! K7994@syntax-violation (lambda K14050 ((lambda (K14051) (if (= K14051 '3) (apply (lambda (K14036@who K14037@msg K14038@form) (K7994@syntax-violation K14036@who K14037@msg K14038@form '#f)) K14050) (if (= K14051 '4) (apply (lambda (K14042@who K14043@msg K14044@form K14045@subform) (K7992@syntax-violation* K14042@who K14043@msg K14044@form (K15170@K14715@make-syntax-violation (K8000@syntax->datum K14044@form) (K8000@syntax->datum K14045@subform)))) K14050) (error 'apply '"invalid arg count")))) (length K14050)))) (set! K7996@identifier? (lambda (K14052@x) (K7264@id? K14052@x))) (set! K7998@datum->syntax (lambda (K14054@id K14055@datum) (if (K7264@id? K14054@id) (K7230@datum->stx K14054@id K14055@datum) (assertion-violation 'datum->syntax '"not an identifier" K14054@id)))) (set! K8000@syntax->datum (lambda (K14058@x) (K7286@stx->datum K14058@x))) (set! K8002@compile-r6rs-top-level (lambda (K14060@x*) (call-with-values (lambda () (K7884@top-level-expander K14060@x*)) (lambda (K14064@K14062@lib* K14065@K14063@invoke-code) ((lambda (K14068@invoke-code K14069@lib*) (lambda () (begin (for-each K6790@K6445@invoke-library K14069@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (K6246@K6174@expanded->core K14068@invoke-code)) (void)) (eval-core (K6246@K6174@expanded->core K14068@invoke-code))))) K14065@K14063@invoke-code K14064@K14062@lib*))))) (set! K8004@pre-compile-r6rs-top-level (lambda (K14072@x*) (call-with-values (lambda () (K7884@top-level-expander K14072@x*)) (lambda (K14076@K14074@lib* K14077@K14075@invoke-code) ((lambda (K14080@invoke-code K14081@lib*) (begin (for-each K6790@K6445@invoke-library K14081@lib*) (K6160@K5936@compile-core (K6246@K6174@expanded->core K14080@invoke-code)))) K14077@K14075@invoke-code K14076@K14074@lib*))))) (set! K8006@interaction-environment ((lambda (K14084@the-env) (lambda () (or K14084@the-env ((lambda (K14086@lib K14087@rib) (begin ((lambda (K14090@subst) (begin (K7173@set-rib-sym*! K14087@rib (map car K14090@subst)) (K7175@set-rib-mark**! K14087@rib (map (lambda (K14092@x) K7132@top-mark*) K14090@subst)) (K7177@set-rib-label*! K14087@rib (map cdr K14090@subst)))) (K6747@K6359@library-subst K14086@lib)) ((lambda (K14094@env) (begin (set! K14084@the-env K14094@env) K14094@env)) (K7928@make-interaction-env K14087@rib '() '())))) (K6783@K6431@find-library-by-name '(mosh interaction)) (K7183@make-empty-rib))))) '#f)) (set! K8008@top-level-context (K6162@K5940@make-parameter '#f)) (begin (set! K14364@K8008@top-level-context K8008@top-level-context) (set! K14363@K8006@interaction-environment K8006@interaction-environment) (set! K14362@K8004@pre-compile-r6rs-top-level K8004@pre-compile-r6rs-top-level) (set! K14361@K8002@compile-r6rs-top-level K8002@compile-r6rs-top-level) (set! K14360@K8000@syntax->datum K8000@syntax->datum) (set! K14359@K7998@datum->syntax K7998@datum->syntax) (set! K14358@K7996@identifier? K7996@identifier?) (set! K14357@K7994@syntax-violation K7994@syntax-violation) (set! K14356@K7992@syntax-violation* K7992@syntax-violation*) (set! K14355@K7990@syntax-error K7990@syntax-error) (set! K14354@K7988@assertion-error K7988@assertion-error) (set! K14353@K7986@expression-position K7986@expression-position) (set! K14352@K7984@extract-position-condition K7984@extract-position-condition) (set! K14351@K7982@make-source-condition K7982@make-source-condition) (set! K14350@K7980@bound-identifier=? K7980@bound-identifier=?) (set! K14349@K7978@free-identifier=? K7978@free-identifier=?) (set! K14348@K7976@generate-temporaries K7976@generate-temporaries) (set! K14347@K7974@make-export-env/macros K7974@make-export-env/macros) (set! K14346@K7972@make-export-subst K7972@make-export-subst) (set! K14345@K7970@build-exports K7970@build-exports) (set! K14344@K7968@rev-map-append K7968@rev-map-append) (set! K14343@K7966@boot-library-expand K7966@boot-library-expand) (set! K14342@K7964@library-expander K7964@library-expander) (set! K14341@K7962@eval K7962@eval) (set! K14340@K7960@expand K7960@expand) (set! K14339@K7958@scheme-report-environment K7958@scheme-report-environment) (set! K14338@K7956@null-environment K7956@null-environment) (set! K14337@K7954@environment K7954@environment) (set! K14336@K7952@environment-symbols K7952@environment-symbols) (set! K14335@K7950@environment? K7950@environment?) (set! K14334@K7948@parse-binding K7948@parse-binding) (set! K14333@K7946@environment-bindings K7946@environment-bindings) (set! K14332@K7944@interaction-environment-symbols K7944@interaction-environment-symbols) (set! K14331@K7942@rp K7942@rp) (set! K14330@K7940@set-interaction-env-locs! K7940@set-interaction-env-locs!) (set! K14329@K7938@set-interaction-env-r! K7938@set-interaction-env-r!) (set! K14328@K7936@set-interaction-env-rib! K7936@set-interaction-env-rib!) (set! K14327@K7934@interaction-env-locs K7934@interaction-env-locs) (set! K14326@K7932@interaction-env-r K7932@interaction-env-r) (set! K14325@K7930@interaction-env-rib K7930@interaction-env-rib) (set! K14324@K7928@make-interaction-env K7928@make-interaction-env) (set! K14323@K7926@interaction-env? K7926@interaction-env?) (set! K14322@K7923@K7915 K7923@K7915) (set! K14321@K7921@K7916 K7921@K7916) (set! K14320@K7919@K7914 K7919@K7914) (set! K14319@K7913@rp K7913@rp) (set! K14318@K7911@set-env-itc! K7911@set-env-itc!) (set! K14317@K7909@set-env-labels! K7909@set-env-labels!) (set! K14316@K7907@set-env-names! K7907@set-env-names!) (set! K14315@K7905@env-itc K7905@env-itc) (set! K14314@K7903@env-labels K7903@env-labels) (set! K14313@K7901@env-names K7901@env-names) (set! K14312@K7899@make-env K7899@make-env) (set! K14311@K7897@env? K7897@env?) (set! K14310@K7894@K7886 K7894@K7886) (set! K14309@K7892@K7887 K7892@K7887) (set! K14308@K7890@K7885 K7890@K7885) (set! K14307@K7884@top-level-expander K7884@top-level-expander) (set! K14306@K7882@parse-top-level-program K7882@parse-top-level-program) (set! K14305@K7880@core-library-expander K7880@core-library-expander) (set! K14304@K7878@library-body-expander K7878@library-body-expander) (set! K14303@K7876@chi-interaction-expr K7876@chi-interaction-expr) (set! K14302@K7874@chi-library-internal K7874@chi-library-internal) (set! K14301@K7872@imp-collector K7872@imp-collector) (set! K14300@K7870@vis-collector K7870@vis-collector) (set! K14299@K7868@inv-collector K7868@inv-collector) (set! K14298@K7866@make-collector K7866@make-collector) (set! K14297@K7864@make-top-rib K7864@make-top-rib) (set! K14296@K7862@parse-import-spec* K7862@parse-import-spec*) (set! K14295@K7860@parse-library K7860@parse-library) (set! K14294@K7858@parse-library-name K7858@parse-library-name) (set! K14293@K7856@parse-exports K7856@parse-exports) (set! K14292@K7854@expand-transformer K7854@expand-transformer) (set! K14291@K7852@chi-body* K7852@chi-body*) (set! K14290@K7850@chi-internal-module K7850@chi-internal-module) (set! K14289@K7848@module-interface-exp-id* K7848@module-interface-exp-id*) (set! K14288@K7846@set-module-interface-exp-lab-vec! K7846@set-module-interface-exp-lab-vec!) (set! K14287@K7844@set-module-interface-exp-id-vec! K7844@set-module-interface-exp-id-vec!) (set! K14286@K7842@set-module-interface-first-mark! K7842@set-module-interface-first-mark!) (set! K14285@K7840@module-interface-exp-lab-vec K7840@module-interface-exp-lab-vec) (set! K14284@K7838@module-interface-exp-id-vec K7838@module-interface-exp-id-vec) (set! K14283@K7836@module-interface-first-mark K7836@module-interface-first-mark) (set! K14282@K7834@make-module-interface K7834@make-module-interface) (set! K14281@K7832@module-interface? K7832@module-interface?) (set! K14280@K7829@K7821 K7829@K7821) (set! K14279@K7827@K7822 K7827@K7822) (set! K14278@K7825@K7820 K7825@K7820) (set! K14277@K7819@parse-module K7819@parse-module) (set! K14276@K7817@chi-internal K7817@chi-internal) (set! K14275@K7815@find-dups K7815@find-dups) (set! K14274@K7813@find-bound=? K7813@find-bound=?) (set! K14273@K7811@chi-rhs* K7811@chi-rhs*) (set! K14272@K7809@expand-interaction-rhs*/init* K7809@expand-interaction-rhs*/init*) (set! K14271@K7807@chi-rhs K7807@chi-rhs) (set! K14270@K7805@chi-defun K7805@chi-defun) (set! K14269@K7803@chi-lambda-clause* K7803@chi-lambda-clause*) (set! K14268@K7801@chi-lambda-clause K7801@chi-lambda-clause) (set! K14267@K7799@verify-formals K7799@verify-formals) (set! K14266@K7797@chi-set! K7797@chi-set!) (set! K14265@K7795@chi-expr K7795@chi-expr) (set! K14264@K7793@chi-application K7793@chi-application) (set! K14263@K7791@chi-expr* K7791@chi-expr*) (set! K14262@K7789@chi-global-macro K7789@chi-global-macro) (set! K14261@K7787@chi-local-macro K7787@chi-local-macro) (set! K14260@K7785@chi-macro K7785@chi-macro) (set! K14259@K7783@do-macro-call K7783@do-macro-call) (set! K14258@K7781@local-macro-transformer K7781@local-macro-transformer) (set! K14257@K7779@macro-transformer K7779@macro-transformer) (set! K14256@K7777@symbol-macro K7777@symbol-macro) (set! K14255@K7775@core-macro-transformer K7775@core-macro-transformer) (set! K14254@K7773@syntax-transformer K7773@syntax-transformer) (set! K14253@K7771@ellipsis-map K7771@ellipsis-map) (set! K14252@K7769@syntax-case-transformer K7769@syntax-case-transformer) (set! K14251@K7767@verify-literals K7767@verify-literals) (set! K14250@K7765@underscore? K7765@underscore?) (set! K14249@K7763@ellipsis? K7763@ellipsis?) (set! K14248@K7761@syntax-dispatch K7761@syntax-dispatch) (set! K14247@K7759@convert-pattern K7759@convert-pattern) (set! K14246@K7757@foreign-call-transformer K7757@foreign-call-transformer) (set! K14245@K7755@parameterize-macro K7755@parameterize-macro) (set! K14244@K7753@incorrect-usage-macro K7753@incorrect-usage-macro) (set! K14243@K7751@define-condition-type-macro K7751@define-condition-type-macro) (set! K14242@K7749@define-record-type-macro K7749@define-record-type-macro) (set! K14241@K7747@define-struct-macro K7747@define-struct-macro) (set! K14240@K7745@quasisyntax-macro K7745@quasisyntax-macro) (set! K14239@K7743@quasiquote-macro K7743@quasiquote-macro) (set! K14238@K7741@syntax-rules-macro K7741@syntax-rules-macro) (set! K14237@K7739@include-into-macro K7739@include-into-macro) (set! K14236@K7737@include-macro K7737@include-macro) (set! K14235@K7735@do-include K7735@do-include) (set! K14234@K7733@cond-macro K7733@cond-macro) (set! K14233@K7731@and-macro K7731@and-macro) (set! K14232@K7729@or-macro K7729@or-macro) (set! K14231@K7727@let*-macro K7727@let*-macro) (set! K14230@K7725@do-macro K7725@do-macro) (set! K14229@K7723@identifier-syntax-macro K7723@identifier-syntax-macro) (set! K14228@K7721@endianness-macro K7721@endianness-macro) (set! K14227@K7719@assert-macro K7719@assert-macro) (set! K14226@K7717@delay-macro K7717@delay-macro) (set! K14225@K7715@time-macro K7715@time-macro) (set! K14224@K7713@define-enumeration-macro K7713@define-enumeration-macro) (set! K14223@K7711@guard-macro K7711@guard-macro) (set! K14222@K7709@trace-letrec-syntax-macro K7709@trace-letrec-syntax-macro) (set! K14221@K7707@trace-let-syntax-macro K7707@trace-let-syntax-macro) (set! K14220@K7705@trace-let/rec-syntax K7705@trace-let/rec-syntax) (set! K14219@K7703@trace-define-syntax-macro K7703@trace-define-syntax-macro) (set! K14218@K7701@trace-define-macro K7701@trace-define-macro) (set! K14217@K7699@trace-lambda-macro K7699@trace-lambda-macro) (set! K14216@K7697@let*-values-macro K7697@let*-values-macro) (set! K14215@K7695@let-values-macro K7695@let-values-macro) (set! K14214@K7693@let-macro K7693@let-macro) (set! K14213@K7691@invalid-fmls-error K7691@invalid-fmls-error) (set! K14212@K7689@with-syntax-macro K7689@with-syntax-macro) (set! K14211@K7687@bless K7687@bless) (set! K14210@K7685@lambda-transformer K7685@lambda-transformer) (set! K14209@K7683@case-lambda-transformer K7683@case-lambda-transformer) (set! K14208@K7681@quote-transformer K7681@quote-transformer) (set! K14207@K7679@case-macro K7679@case-macro) (set! K14206@K7677@or-transformer K7677@or-transformer) (set! K14205@K7675@and-transformer K7675@and-transformer) (set! K14204@K7673@if-transformer K7673@if-transformer) (set! K14203@K7671@unless-macro K7671@unless-macro) (set! K14202@K7669@when-macro K7669@when-macro) (set! K14201@K7667@record-constructor-descriptor-transformer K7667@record-constructor-descriptor-transformer) (set! K14200@K7665@record-type-descriptor-transformer K7665@record-type-descriptor-transformer) (set! K14199@K7663@type-descriptor-transformer K7663@type-descriptor-transformer) (set! K14198@K7661@fluid-let-syntax-transformer K7661@fluid-let-syntax-transformer) (set! K14197@K7659@letrec*-transformer K7659@letrec*-transformer) (set! K14196@K7657@letrec-transformer K7657@letrec-transformer) (set! K14195@K7655@letrec-helper K7655@letrec-helper) (set! K14194@K7653@add-lexicals K7653@add-lexicals) (set! K14193@K7651@add-lexical K7651@add-lexical) (set! K14192@K7649@set-lexical-mutable! K7649@set-lexical-mutable!) (set! K14191@K7647@lexical-mutable? K7647@lexical-mutable?) (set! K14190@K7645@lexical-var K7645@lexical-var) (set! K14189@K7643@scheme-stx K7643@scheme-stx) (set! K14188@K7641@scheme-stx-hashtable K7641@scheme-stx-hashtable) (set! K14187@K7639@parse-define-syntax K7639@parse-define-syntax) (set! K14186@K7637@parse-define K7637@parse-define) (set! K14185@K7326@make-eval-transformer K7326@make-eval-transformer) (set! K14184@K7324@variable-transformer-procedure K7324@variable-transformer-procedure) (set! K14183@K7322@variable-transformer? K7322@variable-transformer?) (set! K14182@K7320@make-variable-transformer K7320@make-variable-transformer) (set! K14181@K7318@sanitize-binding K7318@sanitize-binding) (set! K14180@K7304@syntax-type K7304@syntax-type) (set! K14179@K7302@raise-unbound-error K7302@raise-unbound-error) (set! K14178@K7300@binding-value K7300@binding-value) (set! K14177@K7298@binding-type K7298@binding-type) (set! K14176@K7296@make-binding K7296@make-binding) (set! K14175@K7294@label->binding K7294@label->binding) (set! K14174@K7292@id->real-label K7292@id->real-label) (set! K14173@K7290@id->label K7290@id->label) (set! K14172@K7288@same-marks*? K7288@same-marks*?) (set! K14171@K7286@stx->datum K7286@stx->datum) (set! K14170@K7284@strip K7284@strip) (set! K14169@K7282@strip-annotations K7282@strip-annotations) (set! K14168@K7280@self-evaluating? K7280@self-evaluating?) (set! K14167@K7278@bound-id-member? K7278@bound-id-member?) (set! K14166@K7276@distinct-bound-ids? K7276@distinct-bound-ids?) (set! K14165@K7274@valid-bound-ids? K7274@valid-bound-ids?) (set! K14164@K7272@free-id=? K7272@free-id=?) (set! K14163@K7270@bound-id=? K7270@bound-id=?) (set! K14162@K7268@same-marks? K7268@same-marks?) (set! K14161@K7266@id->sym K7266@id->sym) (set! K14160@K7264@id? K7264@id?) (set! K14159@K7262@syntax->list K7262@syntax->list) (set! K14158@K7260@syntax-cdr K7260@syntax-cdr) (set! K14157@K7258@syntax-car K7258@syntax-car) (set! K14156@K7256@syntax-list? K7256@syntax-list?) (set! K14155@K7254@syntax-null? K7254@syntax-null?) (set! K14154@K7252@syntax-vector? K7252@syntax-vector?) (set! K14153@K7250@syntax-pair? K7250@syntax-pair?) (set! K14152@K7248@syntax-vector->list K7248@syntax-vector->list) (set! K14151@K7246@syntax-kind? K7246@syntax-kind?) (set! K14150@K7244@add-subst K7244@add-subst) (set! K14149@K7242@add-mark K7242@add-mark) (set! K14148@K7240@mkstx K7240@mkstx) (set! K14147@K7238@join-wraps K7238@join-wraps) (set! K14146@K7236@anti-mark? K7236@anti-mark?) (set! K14145@K7234@anti-mark K7234@anti-mark) (set! K14144@K7232@gen-mark K7232@gen-mark) (set! K14143@K7230@datum->stx K7230@datum->stx) (set! K14142@K7228@rp K7228@rp) (set! K14141@K7226@set-stx-ae*! K7226@set-stx-ae*!) (set! K14140@K7224@set-stx-subst*! K7224@set-stx-subst*!) (set! K14139@K7222@set-stx-mark*! K7222@set-stx-mark*!) (set! K14138@K7220@set-stx-expr! K7220@set-stx-expr!) (set! K14137@K7218@stx-ae* K7218@stx-ae*) (set! K14136@K7216@stx-subst* K7216@stx-subst*) (set! K14135@K7214@stx-mark* K7214@stx-mark*) (set! K14134@K7212@stx-expr K7212@stx-expr) (set! K14133@K7210@make-stx K7210@make-stx) (set! K14132@K7208@stx? K7208@stx?) (set! K14131@K7205@K7197 K7205@K7197) (set! K14130@K7203@K7198 K7203@K7198) (set! K14129@K7201@K7196 K7201@K7196) (set! K14128@K7195@make-full-rib K7195@make-full-rib) (set! K14127@K7193@unseal-rib! K7193@unseal-rib!) (set! K14126@K7191@seal-rib! K7191@seal-rib!) (set! K14125@K7189@make-rib-map K7189@make-rib-map) (set! K14124@K7187@extend-rib/nc! K7187@extend-rib/nc!) (set! K14123@K7185@extend-rib! K7185@extend-rib!) (set! K14122@K7183@make-empty-rib K7183@make-empty-rib) (set! K14121@K7181@set-rib-cache! K7181@set-rib-cache!) (set! K14120@K7179@set-rib-sealed/freq! K7179@set-rib-sealed/freq!) (set! K14119@K7177@set-rib-label*! K7177@set-rib-label*!) (set! K14118@K7175@set-rib-mark**! K7175@set-rib-mark**!) (set! K14117@K7173@set-rib-sym*! K7173@set-rib-sym*!) (set! K14116@K7171@rib-cache K7171@rib-cache) (set! K14115@K7169@rib-sealed/freq K7169@rib-sealed/freq) (set! K14114@K7167@rib-label* K7167@rib-label*) (set! K14113@K7165@rib-mark** K7165@rib-mark**) (set! K14112@K7163@rib-sym* K7163@rib-sym*) (set! K14111@K7161@make-rib K7161@make-rib) (set! K14110@K7159@rib? K7159@rib?) (set! K14109@K7156@K7148 K7156@K7148) (set! K14108@K7154@K7149 K7154@K7149) (set! K14107@K7152@K7147 K7152@K7147) (set! K14106@K7146@gen-define-label K7146@gen-define-label) (set! K14105@K7144@gen-define-label+loc K7144@gen-define-label+loc) (set! K14104@K7142@gen-top-level-label K7142@gen-top-level-label) (set! K14103@K7140@gen-label K7140@gen-label) (set! K14102@K7138@gen-global K7138@gen-global) (set! K14101@K7136@gen-lexical K7136@gen-lexical) (set! K14100@K7134@top-marked? K7134@top-marked?) (set! K14099@K7132@top-mark* K7132@top-mark*) (set! K14098@K7127@set-union K7127@set-union) (set! K14097@K7125@set-cons K7125@set-cons) (set! K14096@K7123@file-options-macro K7123@file-options-macro) (K6780@K6425@current-library-expander K7964@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (K14374@K14369 K14376@K14371 K14378@K14370 K14381@&condition? K14383@make-&condition K14385@&condition-rtd K14387@&condition-rcd K14459@K14454 K14461@K14456 K14463@K14455 K14466@p? K14468@make-message-condition K14470@K14453@condition-message K14472@message-condition? K14474@condition-message K14476@&message-rtd K14478@&message-rcd K14484@K14479 K14486@K14481 K14488@K14480 K14491@p? K14493@make-warning K14495@warning? K14497@&warning-rtd K14499@&warning-rcd K14505@K14500 K14507@K14502 K14509@K14501 K14512@p? K14514@make-serious-condition K14516@serious-condition? K14518@&serious-rtd K14520@&serious-rcd K14526@K14521 K14528@K14523 K14530@K14522 K14533@p? K14535@make-error K14537@error? K14539@&error-rtd K14541@&error-rcd K14547@K14542 K14549@K14544 K14551@K14543 K14554@p? K14556@make-violation K14558@violation? K14560@&violation-rtd K14562@&violation-rcd K14568@K14563 K14570@K14565 K14572@K14564 K14575@p? K14577@make-assertion-violation K14579@assertion-violation? K14581@&assertion-rtd K14583@&assertion-rcd K14590@K14585 K14592@K14587 K14594@K14586 K14597@p? K14599@make-irritants-condition K14601@K14584@condition-irritants K14603@irritants-condition? K14605@condition-irritants K14607@&irritants-rtd K14609@&irritants-rcd K14616@K14611 K14618@K14613 K14620@K14612 K14623@p? K14625@make-who-condition K14627@K14610@condition-who K14629@who-condition? K14631@condition-who K14633@&who-rtd K14635@&who-rcd K14641@K14636 K14643@K14638 K14645@K14637 K14648@p? K14650@make-non-continuable-violation K14652@non-continuable-violation? K14654@&non-continuable-rtd K14656@&non-continuable-rcd K14662@K14657 K14664@K14659 K14666@K14658 K14669@p? K14671@make-implementation-restriction-violation K14673@implementation-restriction-violation? K14675@&implementation-restriction-rtd K14677@&implementation-restriction-rcd K14683@K14678 K14685@K14680 K14687@K14679 K14690@p? K14692@make-lexical-violation K14694@lexical-violation? K14696@&lexical-rtd K14698@&lexical-rcd K14706@K14701 K14708@K14703 K14710@K14702 K14713@p? K14715@make-syntax-violation K14717@K14699@syntax-violation-form K14719@K14700@syntax-violation-subform K14721@syntax-violation? K14723@syntax-violation-form K14725@syntax-violation-subform K14727@&syntax-rtd K14729@&syntax-rcd K14735@K14730 K14737@K14732 K14739@K14731 K14742@p? K14744@make-undefined-violation K14746@undefined-violation? K14748@&undefined-rtd K14750@&undefined-rcd K14756@K14751 K14758@K14753 K14760@K14752 K14763@p? K14765@make-i/o-error K14767@i/o-error? K14769@&i/o-rtd K14771@&i/o-rcd K14777@K14772 K14779@K14774 K14781@K14773 K14784@p? K14786@make-i/o-read-error K14788@i/o-read-error? K14790@&i/o-read-rtd K14792@&i/o-read-rcd K14798@K14793 K14800@K14795 K14802@K14794 K14805@p? K14807@make-i/o-write-error K14809@i/o-write-error? K14811@&i/o-write-rtd K14813@&i/o-write-rcd K14820@K14815 K14822@K14817 K14824@K14816 K14827@p? K14829@make-i/o-invalid-position-error K14831@K14814@i/o-error-position K14833@i/o-invalid-position-error? K14835@i/o-error-position K14837@&i/o-invalid-position-rtd K14839@&i/o-invalid-position-rcd K14846@K14841 K14848@K14843 K14850@K14842 K14853@p? K14855@make-i/o-filename-error K14857@K14840@i/o-error-filename K14859@i/o-filename-error? K14861@i/o-error-filename K14863@&i/o-filename-rtd K14865@&i/o-filename-rcd K14871@K14866 K14873@K14868 K14875@K14867 K14878@p? K14880@make-i/o-file-protection-error K14882@i/o-file-protection-error? K14884@&i/o-file-protection-rtd K14886@&i/o-file-protection-rcd K14892@K14887 K14894@K14889 K14896@K14888 K14899@p? K14901@make-i/o-file-is-read-only-error K14903@i/o-file-is-read-only-error? K14905@&i/o-file-is-read-only-rtd K14907@&i/o-file-is-read-only-rcd K14913@K14908 K14915@K14910 K14917@K14909 K14920@p? K14922@make-i/o-file-already-exists-error K14924@i/o-file-already-exists-error? K14926@&i/o-file-already-exists-rtd K14928@&i/o-file-already-exists-rcd K14934@K14929 K14936@K14931 K14938@K14930 K14941@p? K14943@make-i/o-file-does-not-exist-error K14945@i/o-file-does-not-exist-error? K14947@&i/o-file-does-not-exist-rtd K14949@&i/o-file-does-not-exist-rcd K14956@K14951 K14958@K14953 K14960@K14952 K14963@p? K14965@make-i/o-port-error K14967@K14950@i/o-error-port K14969@i/o-port-error? K14971@i/o-error-port K14973@&i/o-port-rtd K14975@&i/o-port-rcd K14981@K14976 K14983@K14978 K14985@K14977 K14988@p? K14990@make-i/o-decoding-error K14992@i/o-decoding-error? K14994@&i/o-decoding-rtd K14996@&i/o-decoding-rcd K15003@K14998 K15005@K15000 K15007@K14999 K15010@p? K15012@make-i/o-encoding-error K15014@K14997@i/o-encoding-error-char K15016@i/o-encoding-error? K15018@i/o-encoding-error-char K15020@&i/o-encoding-rtd K15022@&i/o-encoding-rcd K15028@K15023 K15030@K15025 K15032@K15024 K15035@p? K15037@make-no-infinities-violation K15039@no-infinities-violation? K15041@&no-infinities-rtd K15043@&no-infinities-rcd K15049@K15044 K15051@K15046 K15053@K15045 K15056@p? K15058@make-no-nans-violation K15060@no-nans-violation? K15062@&no-nans-rtd K15064@&no-nans-rcd) (begin (set! K14374@K14369 (make-record-type-descriptor '&condition '#f 'K14372 '#f '#f '#())) (set! K14376@K14371 '#f) (set! K14378@K14370 (make-record-constructor-descriptor K14374@K14369 '#f K14376@K14371)) (set! K14381@&condition? (record-predicate K14374@K14369)) (set! K14383@make-&condition (record-constructor K14378@K14370)) (set! K14385@&condition-rtd K14374@K14369) (set! K14387@&condition-rcd K14378@K14370) (set! K14459@K14454 (make-record-type-descriptor '&message K14374@K14369 'K14457 '#f '#f '#((immutable message)))) (set! K14461@K14456 '#f) (set! K14463@K14455 (make-record-constructor-descriptor K14459@K14454 K14378@K14370 K14461@K14456)) (set! K14466@p? (record-predicate K14459@K14454)) (set! K14468@make-message-condition (record-constructor K14463@K14455)) (set! K14470@K14453@condition-message (record-accessor K14459@K14454 '0)) (set! K14472@message-condition? (condition-predicate K14459@K14454)) (set! K14474@condition-message (condition-accessor K14459@K14454 K14470@K14453@condition-message)) (set! K14476@&message-rtd K14459@K14454) (set! K14478@&message-rcd K14463@K14455) (set! K14484@K14479 (make-record-type-descriptor '&warning K14374@K14369 'K14482 '#f '#f '#())) (set! K14486@K14481 '#f) (set! K14488@K14480 (make-record-constructor-descriptor K14484@K14479 K14378@K14370 K14486@K14481)) (set! K14491@p? (record-predicate K14484@K14479)) (set! K14493@make-warning (record-constructor K14488@K14480)) (set! K14495@warning? (condition-predicate K14484@K14479)) (set! K14497@&warning-rtd K14484@K14479) (set! K14499@&warning-rcd K14488@K14480) (set! K14505@K14500 (make-record-type-descriptor '&serious K14374@K14369 'K14503 '#f '#f '#())) (set! K14507@K14502 '#f) (set! K14509@K14501 (make-record-constructor-descriptor K14505@K14500 K14378@K14370 K14507@K14502)) (set! K14512@p? (record-predicate K14505@K14500)) (set! K14514@make-serious-condition (record-constructor K14509@K14501)) (set! K14516@serious-condition? (condition-predicate K14505@K14500)) (set! K14518@&serious-rtd K14505@K14500) (set! K14520@&serious-rcd K14509@K14501) (set! K14526@K14521 (make-record-type-descriptor '&error K14505@K14500 'K14524 '#f '#f '#())) (set! K14528@K14523 '#f) (set! K14530@K14522 (make-record-constructor-descriptor K14526@K14521 K14509@K14501 K14528@K14523)) (set! K14533@p? (record-predicate K14526@K14521)) (set! K14535@make-error (record-constructor K14530@K14522)) (set! K14537@error? (condition-predicate K14526@K14521)) (set! K14539@&error-rtd K14526@K14521) (set! K14541@&error-rcd K14530@K14522) (set! K14547@K14542 (make-record-type-descriptor '&violation K14505@K14500 'K14545 '#f '#f '#())) (set! K14549@K14544 '#f) (set! K14551@K14543 (make-record-constructor-descriptor K14547@K14542 K14509@K14501 K14549@K14544)) (set! K14554@p? (record-predicate K14547@K14542)) (set! K14556@make-violation (record-constructor K14551@K14543)) (set! K14558@violation? (condition-predicate K14547@K14542)) (set! K14560@&violation-rtd K14547@K14542) (set! K14562@&violation-rcd K14551@K14543) (set! K14568@K14563 (make-record-type-descriptor '&assertion K14547@K14542 'K14566 '#f '#f '#())) (set! K14570@K14565 '#f) (set! K14572@K14564 (make-record-constructor-descriptor K14568@K14563 K14551@K14543 K14570@K14565)) (set! K14575@p? (record-predicate K14568@K14563)) (set! K14577@make-assertion-violation (record-constructor K14572@K14564)) (set! K14579@assertion-violation? (condition-predicate K14568@K14563)) (set! K14581@&assertion-rtd K14568@K14563) (set! K14583@&assertion-rcd K14572@K14564) (set! K14590@K14585 (make-record-type-descriptor '&irritants K14374@K14369 'K14588 '#f '#f '#((immutable irritants)))) (set! K14592@K14587 '#f) (set! K14594@K14586 (make-record-constructor-descriptor K14590@K14585 K14378@K14370 K14592@K14587)) (set! K14597@p? (record-predicate K14590@K14585)) (set! K14599@make-irritants-condition (record-constructor K14594@K14586)) (set! K14601@K14584@condition-irritants (record-accessor K14590@K14585 '0)) (set! K14603@irritants-condition? (condition-predicate K14590@K14585)) (set! K14605@condition-irritants (condition-accessor K14590@K14585 K14601@K14584@condition-irritants)) (set! K14607@&irritants-rtd K14590@K14585) (set! K14609@&irritants-rcd K14594@K14586) (set! K14616@K14611 (make-record-type-descriptor '&who K14374@K14369 'K14614 '#f '#f '#((immutable who)))) (set! K14618@K14613 '#f) (set! K14620@K14612 (make-record-constructor-descriptor K14616@K14611 K14378@K14370 K14618@K14613)) (set! K14623@p? (record-predicate K14616@K14611)) (set! K14625@make-who-condition (record-constructor K14620@K14612)) (set! K14627@K14610@condition-who (record-accessor K14616@K14611 '0)) (set! K14629@who-condition? (condition-predicate K14616@K14611)) (set! K14631@condition-who (condition-accessor K14616@K14611 K14627@K14610@condition-who)) (set! K14633@&who-rtd K14616@K14611) (set! K14635@&who-rcd K14620@K14612) (set! K14641@K14636 (make-record-type-descriptor '&non-continuable K14547@K14542 'K14639 '#f '#f '#())) (set! K14643@K14638 '#f) (set! K14645@K14637 (make-record-constructor-descriptor K14641@K14636 K14551@K14543 K14643@K14638)) (set! K14648@p? (record-predicate K14641@K14636)) (set! K14650@make-non-continuable-violation (record-constructor K14645@K14637)) (set! K14652@non-continuable-violation? (condition-predicate K14641@K14636)) (set! K14654@&non-continuable-rtd K14641@K14636) (set! K14656@&non-continuable-rcd K14645@K14637) (set! K14662@K14657 (make-record-type-descriptor '&implementation-restriction K14547@K14542 'K14660 '#f '#f '#())) (set! K14664@K14659 '#f) (set! K14666@K14658 (make-record-constructor-descriptor K14662@K14657 K14551@K14543 K14664@K14659)) (set! K14669@p? (record-predicate K14662@K14657)) (set! K14671@make-implementation-restriction-violation (record-constructor K14666@K14658)) (set! K14673@implementation-restriction-violation? (condition-predicate K14662@K14657)) (set! K14675@&implementation-restriction-rtd K14662@K14657) (set! K14677@&implementation-restriction-rcd K14666@K14658) (set! K14683@K14678 (make-record-type-descriptor '&lexical K14547@K14542 'K14681 '#f '#f '#())) (set! K14685@K14680 '#f) (set! K14687@K14679 (make-record-constructor-descriptor K14683@K14678 K14551@K14543 K14685@K14680)) (set! K14690@p? (record-predicate K14683@K14678)) (set! K14692@make-lexical-violation (record-constructor K14687@K14679)) (set! K14694@lexical-violation? (condition-predicate K14683@K14678)) (set! K14696@&lexical-rtd K14683@K14678) (set! K14698@&lexical-rcd K14687@K14679) (set! K14706@K14701 (make-record-type-descriptor '&syntax K14547@K14542 'K14704 '#f '#f '#((immutable form) (immutable subform)))) (set! K14708@K14703 '#f) (set! K14710@K14702 (make-record-constructor-descriptor K14706@K14701 K14551@K14543 K14708@K14703)) (set! K14713@p? (record-predicate K14706@K14701)) (set! K14715@make-syntax-violation (record-constructor K14710@K14702)) (set! K14717@K14699@syntax-violation-form (record-accessor K14706@K14701 '0)) (set! K14719@K14700@syntax-violation-subform (record-accessor K14706@K14701 '1)) (set! K14721@syntax-violation? (condition-predicate K14706@K14701)) (set! K14723@syntax-violation-form (condition-accessor K14706@K14701 K14717@K14699@syntax-violation-form)) (set! K14725@syntax-violation-subform (condition-accessor K14706@K14701 K14719@K14700@syntax-violation-subform)) (set! K14727@&syntax-rtd K14706@K14701) (set! K14729@&syntax-rcd K14710@K14702) (set! K14735@K14730 (make-record-type-descriptor '&undefined K14547@K14542 'K14733 '#f '#f '#())) (set! K14737@K14732 '#f) (set! K14739@K14731 (make-record-constructor-descriptor K14735@K14730 K14551@K14543 K14737@K14732)) (set! K14742@p? (record-predicate K14735@K14730)) (set! K14744@make-undefined-violation (record-constructor K14739@K14731)) (set! K14746@undefined-violation? (condition-predicate K14735@K14730)) (set! K14748@&undefined-rtd K14735@K14730) (set! K14750@&undefined-rcd K14739@K14731) (set! K14756@K14751 (make-record-type-descriptor '&i/o K14526@K14521 'K14754 '#f '#f '#())) (set! K14758@K14753 '#f) (set! K14760@K14752 (make-record-constructor-descriptor K14756@K14751 K14530@K14522 K14758@K14753)) (set! K14763@p? (record-predicate K14756@K14751)) (set! K14765@make-i/o-error (record-constructor K14760@K14752)) (set! K14767@i/o-error? (condition-predicate K14756@K14751)) (set! K14769@&i/o-rtd K14756@K14751) (set! K14771@&i/o-rcd K14760@K14752) (set! K14777@K14772 (make-record-type-descriptor '&i/o-read K14756@K14751 'K14775 '#f '#f '#())) (set! K14779@K14774 '#f) (set! K14781@K14773 (make-record-constructor-descriptor K14777@K14772 K14760@K14752 K14779@K14774)) (set! K14784@p? (record-predicate K14777@K14772)) (set! K14786@make-i/o-read-error (record-constructor K14781@K14773)) (set! K14788@i/o-read-error? (condition-predicate K14777@K14772)) (set! K14790@&i/o-read-rtd K14777@K14772) (set! K14792@&i/o-read-rcd K14781@K14773) (set! K14798@K14793 (make-record-type-descriptor '&i/o-write K14756@K14751 'K14796 '#f '#f '#())) (set! K14800@K14795 '#f) (set! K14802@K14794 (make-record-constructor-descriptor K14798@K14793 K14760@K14752 K14800@K14795)) (set! K14805@p? (record-predicate K14798@K14793)) (set! K14807@make-i/o-write-error (record-constructor K14802@K14794)) (set! K14809@i/o-write-error? (condition-predicate K14798@K14793)) (set! K14811@&i/o-write-rtd K14798@K14793) (set! K14813@&i/o-write-rcd K14802@K14794) (set! K14820@K14815 (make-record-type-descriptor '&i/o-invalid-position K14756@K14751 'K14818 '#f '#f '#((immutable position)))) (set! K14822@K14817 '#f) (set! K14824@K14816 (make-record-constructor-descriptor K14820@K14815 K14760@K14752 K14822@K14817)) (set! K14827@p? (record-predicate K14820@K14815)) (set! K14829@make-i/o-invalid-position-error (record-constructor K14824@K14816)) (set! K14831@K14814@i/o-error-position (record-accessor K14820@K14815 '0)) (set! K14833@i/o-invalid-position-error? (condition-predicate K14820@K14815)) (set! K14835@i/o-error-position (condition-accessor K14820@K14815 K14831@K14814@i/o-error-position)) (set! K14837@&i/o-invalid-position-rtd K14820@K14815) (set! K14839@&i/o-invalid-position-rcd K14824@K14816) (set! K14846@K14841 (make-record-type-descriptor '&i/o-filename K14756@K14751 'K14844 '#f '#f '#((immutable filename)))) (set! K14848@K14843 '#f) (set! K14850@K14842 (make-record-constructor-descriptor K14846@K14841 K14760@K14752 K14848@K14843)) (set! K14853@p? (record-predicate K14846@K14841)) (set! K14855@make-i/o-filename-error (record-constructor K14850@K14842)) (set! K14857@K14840@i/o-error-filename (record-accessor K14846@K14841 '0)) (set! K14859@i/o-filename-error? (condition-predicate K14846@K14841)) (set! K14861@i/o-error-filename (condition-accessor K14846@K14841 K14857@K14840@i/o-error-filename)) (set! K14863@&i/o-filename-rtd K14846@K14841) (set! K14865@&i/o-filename-rcd K14850@K14842) (set! K14871@K14866 (make-record-type-descriptor '&i/o-file-protection K14846@K14841 'K14869 '#f '#f '#())) (set! K14873@K14868 '#f) (set! K14875@K14867 (make-record-constructor-descriptor K14871@K14866 K14850@K14842 K14873@K14868)) (set! K14878@p? (record-predicate K14871@K14866)) (set! K14880@make-i/o-file-protection-error (record-constructor K14875@K14867)) (set! K14882@i/o-file-protection-error? (condition-predicate K14871@K14866)) (set! K14884@&i/o-file-protection-rtd K14871@K14866) (set! K14886@&i/o-file-protection-rcd K14875@K14867) (set! K14892@K14887 (make-record-type-descriptor '&i/o-file-is-read-only K14871@K14866 'K14890 '#f '#f '#())) (set! K14894@K14889 '#f) (set! K14896@K14888 (make-record-constructor-descriptor K14892@K14887 K14875@K14867 K14894@K14889)) (set! K14899@p? (record-predicate K14892@K14887)) (set! K14901@make-i/o-file-is-read-only-error (record-constructor K14896@K14888)) (set! K14903@i/o-file-is-read-only-error? (condition-predicate K14892@K14887)) (set! K14905@&i/o-file-is-read-only-rtd K14892@K14887) (set! K14907@&i/o-file-is-read-only-rcd K14896@K14888) (set! K14913@K14908 (make-record-type-descriptor '&i/o-file-already-exists K14846@K14841 'K14911 '#f '#f '#())) (set! K14915@K14910 '#f) (set! K14917@K14909 (make-record-constructor-descriptor K14913@K14908 K14850@K14842 K14915@K14910)) (set! K14920@p? (record-predicate K14913@K14908)) (set! K14922@make-i/o-file-already-exists-error (record-constructor K14917@K14909)) (set! K14924@i/o-file-already-exists-error? (condition-predicate K14913@K14908)) (set! K14926@&i/o-file-already-exists-rtd K14913@K14908) (set! K14928@&i/o-file-already-exists-rcd K14917@K14909) (set! K14934@K14929 (make-record-type-descriptor '&i/o-file-does-not-exist K14846@K14841 'K14932 '#f '#f '#())) (set! K14936@K14931 '#f) (set! K14938@K14930 (make-record-constructor-descriptor K14934@K14929 K14850@K14842 K14936@K14931)) (set! K14941@p? (record-predicate K14934@K14929)) (set! K14943@make-i/o-file-does-not-exist-error (record-constructor K14938@K14930)) (set! K14945@i/o-file-does-not-exist-error? (condition-predicate K14934@K14929)) (set! K14947@&i/o-file-does-not-exist-rtd K14934@K14929) (set! K14949@&i/o-file-does-not-exist-rcd K14938@K14930) (set! K14956@K14951 (make-record-type-descriptor '&i/o-port K14756@K14751 'K14954 '#f '#f '#((immutable port)))) (set! K14958@K14953 '#f) (set! K14960@K14952 (make-record-constructor-descriptor K14956@K14951 K14760@K14752 K14958@K14953)) (set! K14963@p? (record-predicate K14956@K14951)) (set! K14965@make-i/o-port-error (record-constructor K14960@K14952)) (set! K14967@K14950@i/o-error-port (record-accessor K14956@K14951 '0)) (set! K14969@i/o-port-error? (condition-predicate K14956@K14951)) (set! K14971@i/o-error-port (condition-accessor K14956@K14951 K14967@K14950@i/o-error-port)) (set! K14973@&i/o-port-rtd K14956@K14951) (set! K14975@&i/o-port-rcd K14960@K14952) (set! K14981@K14976 (make-record-type-descriptor '&i/o-decoding K14956@K14951 'K14979 '#f '#f '#())) (set! K14983@K14978 '#f) (set! K14985@K14977 (make-record-constructor-descriptor K14981@K14976 K14960@K14952 K14983@K14978)) (set! K14988@p? (record-predicate K14981@K14976)) (set! K14990@make-i/o-decoding-error (record-constructor K14985@K14977)) (set! K14992@i/o-decoding-error? (condition-predicate K14981@K14976)) (set! K14994@&i/o-decoding-rtd K14981@K14976) (set! K14996@&i/o-decoding-rcd K14985@K14977) (set! K15003@K14998 (make-record-type-descriptor '&i/o-encoding K14956@K14951 'K15001 '#f '#f '#((immutable char)))) (set! K15005@K15000 '#f) (set! K15007@K14999 (make-record-constructor-descriptor K15003@K14998 K14960@K14952 K15005@K15000)) (set! K15010@p? (record-predicate K15003@K14998)) (set! K15012@make-i/o-encoding-error (record-constructor K15007@K14999)) (set! K15014@K14997@i/o-encoding-error-char (record-accessor K15003@K14998 '0)) (set! K15016@i/o-encoding-error? (condition-predicate K15003@K14998)) (set! K15018@i/o-encoding-error-char (condition-accessor K15003@K14998 K15014@K14997@i/o-encoding-error-char)) (set! K15020@&i/o-encoding-rtd K15003@K14998) (set! K15022@&i/o-encoding-rcd K15007@K14999) (set! K15028@K15023 (make-record-type-descriptor '&no-infinities K14662@K14657 'K15026 '#f '#f '#())) (set! K15030@K15025 '#f) (set! K15032@K15024 (make-record-constructor-descriptor K15028@K15023 K14666@K14658 K15030@K15025)) (set! K15035@p? (record-predicate K15028@K15023)) (set! K15037@make-no-infinities-violation (record-constructor K15032@K15024)) (set! K15039@no-infinities-violation? (condition-predicate K15028@K15023)) (set! K15041@&no-infinities-rtd K15028@K15023) (set! K15043@&no-infinities-rcd K15032@K15024) (set! K15049@K15044 (make-record-type-descriptor '&no-nans K14662@K14657 'K15047 '#f '#f '#())) (set! K15051@K15046 '#f) (set! K15053@K15045 (make-record-constructor-descriptor K15049@K15044 K14666@K14658 K15051@K15046)) (set! K15056@p? (record-predicate K15049@K15044)) (set! K15058@make-no-nans-violation (record-constructor K15053@K15045)) (set! K15060@no-nans-violation? (condition-predicate K15049@K15044)) (set! K15062@&no-nans-rtd K15049@K15044) (set! K15064@&no-nans-rcd K15053@K15045) (begin (set! K15305@K15064@&no-nans-rcd K15064@&no-nans-rcd) (set! K15304@K15062@&no-nans-rtd K15062@&no-nans-rtd) (set! K15303@K15060@no-nans-violation? K15060@no-nans-violation?) (set! K15302@K15058@make-no-nans-violation K15058@make-no-nans-violation) (set! K15301@K15056@p? K15056@p?) (set! K15300@K15053@K15045 K15053@K15045) (set! K15299@K15051@K15046 K15051@K15046) (set! K15298@K15049@K15044 K15049@K15044) (set! K15297@K15043@&no-infinities-rcd K15043@&no-infinities-rcd) (set! K15296@K15041@&no-infinities-rtd K15041@&no-infinities-rtd) (set! K15295@K15039@no-infinities-violation? K15039@no-infinities-violation?) (set! K15294@K15037@make-no-infinities-violation K15037@make-no-infinities-violation) (set! K15293@K15035@p? K15035@p?) (set! K15292@K15032@K15024 K15032@K15024) (set! K15291@K15030@K15025 K15030@K15025) (set! K15290@K15028@K15023 K15028@K15023) (set! K15289@K15022@&i/o-encoding-rcd K15022@&i/o-encoding-rcd) (set! K15288@K15020@&i/o-encoding-rtd K15020@&i/o-encoding-rtd) (set! K15287@K15018@i/o-encoding-error-char K15018@i/o-encoding-error-char) (set! K15286@K15016@i/o-encoding-error? K15016@i/o-encoding-error?) (set! K15285@K15014@K14997@i/o-encoding-error-char K15014@K14997@i/o-encoding-error-char) (set! K15284@K15012@make-i/o-encoding-error K15012@make-i/o-encoding-error) (set! K15283@K15010@p? K15010@p?) (set! K15282@K15007@K14999 K15007@K14999) (set! K15281@K15005@K15000 K15005@K15000) (set! K15280@K15003@K14998 K15003@K14998) (set! K15279@K14996@&i/o-decoding-rcd K14996@&i/o-decoding-rcd) (set! K15278@K14994@&i/o-decoding-rtd K14994@&i/o-decoding-rtd) (set! K15277@K14992@i/o-decoding-error? K14992@i/o-decoding-error?) (set! K15276@K14990@make-i/o-decoding-error K14990@make-i/o-decoding-error) (set! K15275@K14988@p? K14988@p?) (set! K15274@K14985@K14977 K14985@K14977) (set! K15273@K14983@K14978 K14983@K14978) (set! K15272@K14981@K14976 K14981@K14976) (set! K15271@K14975@&i/o-port-rcd K14975@&i/o-port-rcd) (set! K15270@K14973@&i/o-port-rtd K14973@&i/o-port-rtd) (set! K15269@K14971@i/o-error-port K14971@i/o-error-port) (set! K15268@K14969@i/o-port-error? K14969@i/o-port-error?) (set! K15267@K14967@K14950@i/o-error-port K14967@K14950@i/o-error-port) (set! K15266@K14965@make-i/o-port-error K14965@make-i/o-port-error) (set! K15265@K14963@p? K14963@p?) (set! K15264@K14960@K14952 K14960@K14952) (set! K15263@K14958@K14953 K14958@K14953) (set! K15262@K14956@K14951 K14956@K14951) (set! K15261@K14949@&i/o-file-does-not-exist-rcd K14949@&i/o-file-does-not-exist-rcd) (set! K15260@K14947@&i/o-file-does-not-exist-rtd K14947@&i/o-file-does-not-exist-rtd) (set! K15259@K14945@i/o-file-does-not-exist-error? K14945@i/o-file-does-not-exist-error?) (set! K15258@K14943@make-i/o-file-does-not-exist-error K14943@make-i/o-file-does-not-exist-error) (set! K15257@K14941@p? K14941@p?) (set! K15256@K14938@K14930 K14938@K14930) (set! K15255@K14936@K14931 K14936@K14931) (set! K15254@K14934@K14929 K14934@K14929) (set! K15253@K14928@&i/o-file-already-exists-rcd K14928@&i/o-file-already-exists-rcd) (set! K15252@K14926@&i/o-file-already-exists-rtd K14926@&i/o-file-already-exists-rtd) (set! K15251@K14924@i/o-file-already-exists-error? K14924@i/o-file-already-exists-error?) (set! K15250@K14922@make-i/o-file-already-exists-error K14922@make-i/o-file-already-exists-error) (set! K15249@K14920@p? K14920@p?) (set! K15248@K14917@K14909 K14917@K14909) (set! K15247@K14915@K14910 K14915@K14910) (set! K15246@K14913@K14908 K14913@K14908) (set! K15245@K14907@&i/o-file-is-read-only-rcd K14907@&i/o-file-is-read-only-rcd) (set! K15244@K14905@&i/o-file-is-read-only-rtd K14905@&i/o-file-is-read-only-rtd) (set! K15243@K14903@i/o-file-is-read-only-error? K14903@i/o-file-is-read-only-error?) (set! K15242@K14901@make-i/o-file-is-read-only-error K14901@make-i/o-file-is-read-only-error) (set! K15241@K14899@p? K14899@p?) (set! K15240@K14896@K14888 K14896@K14888) (set! K15239@K14894@K14889 K14894@K14889) (set! K15238@K14892@K14887 K14892@K14887) (set! K15237@K14886@&i/o-file-protection-rcd K14886@&i/o-file-protection-rcd) (set! K15236@K14884@&i/o-file-protection-rtd K14884@&i/o-file-protection-rtd) (set! K15235@K14882@i/o-file-protection-error? K14882@i/o-file-protection-error?) (set! K15234@K14880@make-i/o-file-protection-error K14880@make-i/o-file-protection-error) (set! K15233@K14878@p? K14878@p?) (set! K15232@K14875@K14867 K14875@K14867) (set! K15231@K14873@K14868 K14873@K14868) (set! K15230@K14871@K14866 K14871@K14866) (set! K15229@K14865@&i/o-filename-rcd K14865@&i/o-filename-rcd) (set! K15228@K14863@&i/o-filename-rtd K14863@&i/o-filename-rtd) (set! K15227@K14861@i/o-error-filename K14861@i/o-error-filename) (set! K15226@K14859@i/o-filename-error? K14859@i/o-filename-error?) (set! K15225@K14857@K14840@i/o-error-filename K14857@K14840@i/o-error-filename) (set! K15224@K14855@make-i/o-filename-error K14855@make-i/o-filename-error) (set! K15223@K14853@p? K14853@p?) (set! K15222@K14850@K14842 K14850@K14842) (set! K15221@K14848@K14843 K14848@K14843) (set! K15220@K14846@K14841 K14846@K14841) (set! K15219@K14839@&i/o-invalid-position-rcd K14839@&i/o-invalid-position-rcd) (set! K15218@K14837@&i/o-invalid-position-rtd K14837@&i/o-invalid-position-rtd) (set! K15217@K14835@i/o-error-position K14835@i/o-error-position) (set! K15216@K14833@i/o-invalid-position-error? K14833@i/o-invalid-position-error?) (set! K15215@K14831@K14814@i/o-error-position K14831@K14814@i/o-error-position) (set! K15214@K14829@make-i/o-invalid-position-error K14829@make-i/o-invalid-position-error) (set! K15213@K14827@p? K14827@p?) (set! K15212@K14824@K14816 K14824@K14816) (set! K15211@K14822@K14817 K14822@K14817) (set! K15210@K14820@K14815 K14820@K14815) (set! K15209@K14813@&i/o-write-rcd K14813@&i/o-write-rcd) (set! K15208@K14811@&i/o-write-rtd K14811@&i/o-write-rtd) (set! K15207@K14809@i/o-write-error? K14809@i/o-write-error?) (set! K15206@K14807@make-i/o-write-error K14807@make-i/o-write-error) (set! K15205@K14805@p? K14805@p?) (set! K15204@K14802@K14794 K14802@K14794) (set! K15203@K14800@K14795 K14800@K14795) (set! K15202@K14798@K14793 K14798@K14793) (set! K15201@K14792@&i/o-read-rcd K14792@&i/o-read-rcd) (set! K15200@K14790@&i/o-read-rtd K14790@&i/o-read-rtd) (set! K15199@K14788@i/o-read-error? K14788@i/o-read-error?) (set! K15198@K14786@make-i/o-read-error K14786@make-i/o-read-error) (set! K15197@K14784@p? K14784@p?) (set! K15196@K14781@K14773 K14781@K14773) (set! K15195@K14779@K14774 K14779@K14774) (set! K15194@K14777@K14772 K14777@K14772) (set! K15193@K14771@&i/o-rcd K14771@&i/o-rcd) (set! K15192@K14769@&i/o-rtd K14769@&i/o-rtd) (set! K15191@K14767@i/o-error? K14767@i/o-error?) (set! K15190@K14765@make-i/o-error K14765@make-i/o-error) (set! K15189@K14763@p? K14763@p?) (set! K15188@K14760@K14752 K14760@K14752) (set! K15187@K14758@K14753 K14758@K14753) (set! K15186@K14756@K14751 K14756@K14751) (set! K15185@K14750@&undefined-rcd K14750@&undefined-rcd) (set! K15184@K14748@&undefined-rtd K14748@&undefined-rtd) (set! K15183@K14746@undefined-violation? K14746@undefined-violation?) (set! K15182@K14744@make-undefined-violation K14744@make-undefined-violation) (set! K15181@K14742@p? K14742@p?) (set! K15180@K14739@K14731 K14739@K14731) (set! K15179@K14737@K14732 K14737@K14732) (set! K15178@K14735@K14730 K14735@K14730) (set! K15177@K14729@&syntax-rcd K14729@&syntax-rcd) (set! K15176@K14727@&syntax-rtd K14727@&syntax-rtd) (set! K15175@K14725@syntax-violation-subform K14725@syntax-violation-subform) (set! K15174@K14723@syntax-violation-form K14723@syntax-violation-form) (set! K15173@K14721@syntax-violation? K14721@syntax-violation?) (set! K15172@K14719@K14700@syntax-violation-subform K14719@K14700@syntax-violation-subform) (set! K15171@K14717@K14699@syntax-violation-form K14717@K14699@syntax-violation-form) (set! K15170@K14715@make-syntax-violation K14715@make-syntax-violation) (set! K15169@K14713@p? K14713@p?) (set! K15168@K14710@K14702 K14710@K14702) (set! K15167@K14708@K14703 K14708@K14703) (set! K15166@K14706@K14701 K14706@K14701) (set! K15165@K14698@&lexical-rcd K14698@&lexical-rcd) (set! K15164@K14696@&lexical-rtd K14696@&lexical-rtd) (set! K15163@K14694@lexical-violation? K14694@lexical-violation?) (set! K15162@K14692@make-lexical-violation K14692@make-lexical-violation) (set! K15161@K14690@p? K14690@p?) (set! K15160@K14687@K14679 K14687@K14679) (set! K15159@K14685@K14680 K14685@K14680) (set! K15158@K14683@K14678 K14683@K14678) (set! K15157@K14677@&implementation-restriction-rcd K14677@&implementation-restriction-rcd) (set! K15156@K14675@&implementation-restriction-rtd K14675@&implementation-restriction-rtd) (set! K15155@K14673@implementation-restriction-violation? K14673@implementation-restriction-violation?) (set! K15154@K14671@make-implementation-restriction-violation K14671@make-implementation-restriction-violation) (set! K15153@K14669@p? K14669@p?) (set! K15152@K14666@K14658 K14666@K14658) (set! K15151@K14664@K14659 K14664@K14659) (set! K15150@K14662@K14657 K14662@K14657) (set! K15149@K14656@&non-continuable-rcd K14656@&non-continuable-rcd) (set! K15148@K14654@&non-continuable-rtd K14654@&non-continuable-rtd) (set! K15147@K14652@non-continuable-violation? K14652@non-continuable-violation?) (set! K15146@K14650@make-non-continuable-violation K14650@make-non-continuable-violation) (set! K15145@K14648@p? K14648@p?) (set! K15144@K14645@K14637 K14645@K14637) (set! K15143@K14643@K14638 K14643@K14638) (set! K15142@K14641@K14636 K14641@K14636) (set! K15141@K14635@&who-rcd K14635@&who-rcd) (set! K15140@K14633@&who-rtd K14633@&who-rtd) (set! K15139@K14631@condition-who K14631@condition-who) (set! K15138@K14629@who-condition? K14629@who-condition?) (set! K15137@K14627@K14610@condition-who K14627@K14610@condition-who) (set! K15136@K14625@make-who-condition K14625@make-who-condition) (set! K15135@K14623@p? K14623@p?) (set! K15134@K14620@K14612 K14620@K14612) (set! K15133@K14618@K14613 K14618@K14613) (set! K15132@K14616@K14611 K14616@K14611) (set! K15131@K14609@&irritants-rcd K14609@&irritants-rcd) (set! K15130@K14607@&irritants-rtd K14607@&irritants-rtd) (set! K15129@K14605@condition-irritants K14605@condition-irritants) (set! K15128@K14603@irritants-condition? K14603@irritants-condition?) (set! K15127@K14601@K14584@condition-irritants K14601@K14584@condition-irritants) (set! K15126@K14599@make-irritants-condition K14599@make-irritants-condition) (set! K15125@K14597@p? K14597@p?) (set! K15124@K14594@K14586 K14594@K14586) (set! K15123@K14592@K14587 K14592@K14587) (set! K15122@K14590@K14585 K14590@K14585) (set! K15121@K14583@&assertion-rcd K14583@&assertion-rcd) (set! K15120@K14581@&assertion-rtd K14581@&assertion-rtd) (set! K15119@K14579@assertion-violation? K14579@assertion-violation?) (set! K15118@K14577@make-assertion-violation K14577@make-assertion-violation) (set! K15117@K14575@p? K14575@p?) (set! K15116@K14572@K14564 K14572@K14564) (set! K15115@K14570@K14565 K14570@K14565) (set! K15114@K14568@K14563 K14568@K14563) (set! K15113@K14562@&violation-rcd K14562@&violation-rcd) (set! K15112@K14560@&violation-rtd K14560@&violation-rtd) (set! K15111@K14558@violation? K14558@violation?) (set! K15110@K14556@make-violation K14556@make-violation) (set! K15109@K14554@p? K14554@p?) (set! K15108@K14551@K14543 K14551@K14543) (set! K15107@K14549@K14544 K14549@K14544) (set! K15106@K14547@K14542 K14547@K14542) (set! K15105@K14541@&error-rcd K14541@&error-rcd) (set! K15104@K14539@&error-rtd K14539@&error-rtd) (set! K15103@K14537@error? K14537@error?) (set! K15102@K14535@make-error K14535@make-error) (set! K15101@K14533@p? K14533@p?) (set! K15100@K14530@K14522 K14530@K14522) (set! K15099@K14528@K14523 K14528@K14523) (set! K15098@K14526@K14521 K14526@K14521) (set! K15097@K14520@&serious-rcd K14520@&serious-rcd) (set! K15096@K14518@&serious-rtd K14518@&serious-rtd) (set! K15095@K14516@serious-condition? K14516@serious-condition?) (set! K15094@K14514@make-serious-condition K14514@make-serious-condition) (set! K15093@K14512@p? K14512@p?) (set! K15092@K14509@K14501 K14509@K14501) (set! K15091@K14507@K14502 K14507@K14502) (set! K15090@K14505@K14500 K14505@K14500) (set! K15089@K14499@&warning-rcd K14499@&warning-rcd) (set! K15088@K14497@&warning-rtd K14497@&warning-rtd) (set! K15087@K14495@warning? K14495@warning?) (set! K15086@K14493@make-warning K14493@make-warning) (set! K15085@K14491@p? K14491@p?) (set! K15084@K14488@K14480 K14488@K14480) (set! K15083@K14486@K14481 K14486@K14481) (set! K15082@K14484@K14479 K14484@K14479) (set! K15081@K14478@&message-rcd K14478@&message-rcd) (set! K15080@K14476@&message-rtd K14476@&message-rtd) (set! K15079@K14474@condition-message K14474@condition-message) (set! K15078@K14472@message-condition? K14472@message-condition?) (set! K15077@K14470@K14453@condition-message K14470@K14453@condition-message) (set! K15076@K14468@make-message-condition K14468@make-message-condition) (set! K15075@K14466@p? K14466@p?) (set! K15074@K14463@K14455 K14463@K14455) (set! K15073@K14461@K14456 K14461@K14456) (set! K15072@K14459@K14454 K14459@K14454) (set! K15071@K14387@&condition-rcd K14387@&condition-rcd) (set! K15070@K14385@&condition-rtd K14385@&condition-rtd) (set! K15069@K14383@make-&condition K14383@make-&condition) (set! K15068@K14381@&condition? K14381@&condition?) (set! K15067@K14378@K14370 K14378@K14370) (set! K15066@K14376@K14371 K14376@K14371) (set! K15065@K14374@K14369 K14374@K14369)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (K6243@K6168@current-primitive-locations (lambda (K16320@x) ((lambda (K16322@t) (if K16322@t (cdr K16322@t) '#f)) (assq K16320@x '((&no-nans-rcd . K15305@K15064@&no-nans-rcd) (&no-nans-rtd . K15304@K15062@&no-nans-rtd) (&no-infinities-rcd . K15297@K15043@&no-infinities-rcd) (&no-infinities-rtd . K15296@K15041@&no-infinities-rtd) (&i/o-encoding-rcd . K15289@K15022@&i/o-encoding-rcd) (&i/o-encoding-rtd . K15288@K15020@&i/o-encoding-rtd) (&i/o-decoding-rcd . K15279@K14996@&i/o-decoding-rcd) (&i/o-decoding-rtd . K15278@K14994@&i/o-decoding-rtd) (&i/o-port-rcd . K15271@K14975@&i/o-port-rcd) (&i/o-port-rtd . K15270@K14973@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . K15261@K14949@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . K15260@K14947@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . K15253@K14928@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . K15252@K14926@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . K15245@K14907@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . K15244@K14905@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . K15237@K14886@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . K15236@K14884@&i/o-file-protection-rtd) (&i/o-filename-rcd . K15229@K14865@&i/o-filename-rcd) (&i/o-filename-rtd . K15228@K14863@&i/o-filename-rtd) (&i/o-invalid-position-rcd . K15219@K14839@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . K15218@K14837@&i/o-invalid-position-rtd) (&i/o-write-rcd . K15209@K14813@&i/o-write-rcd) (&i/o-write-rtd . K15208@K14811@&i/o-write-rtd) (&i/o-read-rcd . K15201@K14792@&i/o-read-rcd) (&i/o-read-rtd . K15200@K14790@&i/o-read-rtd) (&i/o-rcd . K15193@K14771@&i/o-rcd) (&i/o-rtd . K15192@K14769@&i/o-rtd) (&undefined-rcd . K15185@K14750@&undefined-rcd) (&undefined-rtd . K15184@K14748@&undefined-rtd) (&syntax-rcd . K15177@K14729@&syntax-rcd) (&syntax-rtd . K15176@K14727@&syntax-rtd) (&lexical-rcd . K15165@K14698@&lexical-rcd) (&lexical-rtd . K15164@K14696@&lexical-rtd) (&implementation-restriction-rcd . K15157@K14677@&implementation-restriction-rcd) (&implementation-restriction-rtd . K15156@K14675@&implementation-restriction-rtd) (&non-continuable-rcd . K15149@K14656@&non-continuable-rcd) (&non-continuable-rtd . K15148@K14654@&non-continuable-rtd) (&who-rcd . K15141@K14635@&who-rcd) (&who-rtd . K15140@K14633@&who-rtd) (&irritants-rcd . K15131@K14609@&irritants-rcd) (&irritants-rtd . K15130@K14607@&irritants-rtd) (&assertion-rcd . K15121@K14583@&assertion-rcd) (&assertion-rtd . K15120@K14581@&assertion-rtd) (&violation-rcd . K15113@K14562@&violation-rcd) (&violation-rtd . K15112@K14560@&violation-rtd) (&error-rcd . K15105@K14541@&error-rcd) (&error-rtd . K15104@K14539@&error-rtd) (&serious-rcd . K15097@K14520@&serious-rcd) (&serious-rtd . K15096@K14518@&serious-rtd) (&warning-rcd . K15089@K14499@&warning-rcd) (&warning-rtd . K15088@K14497@&warning-rtd) (&message-rcd . K15081@K14478@&message-rcd) (&message-rtd . K15080@K14476@&message-rtd) (&condition-rcd . K15071@K14387@&condition-rcd) (&condition-rtd . K15070@K14385@&condition-rtd) (syntax-error . K14355@K7990@syntax-error) (syntax-dispatch . K14248@K7761@syntax-dispatch) (gensym . K6148@K5912@gensym) (load . K15570@K15333@load) (interaction-environment . K14363@K8006@interaction-environment) (library-path . K6772@K6409@library-path) (make-parameter . K6162@K5940@make-parameter) (make-variable-transformer . K14182@K7320@make-variable-transformer) (identifier? . K14358@K7996@identifier?) (generate-temporaries . K14348@K7976@generate-temporaries) (free-identifier=? . K14349@K7978@free-identifier=?) (syntax->datum . K14360@K8000@syntax->datum) (datum->syntax . K14359@K7998@datum->syntax) (bound-identifier=? . K14350@K7980@bound-identifier=?) (make-i/o-write-error . K15206@K14807@make-i/o-write-error) (make-i/o-read-error . K15198@K14786@make-i/o-read-error) (make-i/o-port-error . K15266@K14965@make-i/o-port-error) (make-i/o-invalid-position-error . K15214@K14829@make-i/o-invalid-position-error) (make-i/o-filename-error . K15224@K14855@make-i/o-filename-error) (make-i/o-file-protection-error . K15234@K14880@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . K15242@K14901@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . K15258@K14943@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . K15250@K14922@make-i/o-file-already-exists-error) (make-i/o-error . K15190@K14765@make-i/o-error) (make-i/o-encoding-error . K15284@K15012@make-i/o-encoding-error) (make-i/o-decoding-error . K15276@K14990@make-i/o-decoding-error) (i/o-write-error? . K15207@K14809@i/o-write-error?) (i/o-read-error? . K15199@K14788@i/o-read-error?) (i/o-port-error? . K15268@K14969@i/o-port-error?) (i/o-invalid-position-error? . K15216@K14833@i/o-invalid-position-error?) (i/o-filename-error? . K15226@K14859@i/o-filename-error?) (i/o-file-protection-error? . K15235@K14882@i/o-file-protection-error?) (i/o-file-is-read-only-error? . K15243@K14903@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . K15259@K14945@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . K15251@K14924@i/o-file-already-exists-error?) (i/o-error? . K15191@K14767@i/o-error?) (i/o-error-position . K15217@K14835@i/o-error-position) (i/o-error-port . K15269@K14971@i/o-error-port) (i/o-error-filename . K15227@K14861@i/o-error-filename) (i/o-encoding-error? . K15286@K15016@i/o-encoding-error?) (i/o-encoding-error-char . K15287@K15018@i/o-encoding-error-char) (i/o-decoding-error? . K15277@K14992@i/o-decoding-error?) (scheme-report-environment . K14339@K7958@scheme-report-environment) (null-environment . K14338@K7956@null-environment) (command-line . K15567@K15327@command-line) (eval . K14341@K7962@eval) (environment . K14337@K7954@environment) (who-condition? . K15138@K14629@who-condition?) (warning? . K15087@K14495@warning?) (violation? . K15111@K14558@violation?) (undefined-violation? . K15183@K14746@undefined-violation?) (syntax-violation? . K15173@K14721@syntax-violation?) (syntax-violation-subform . K15175@K14725@syntax-violation-subform) (syntax-violation-form . K15174@K14723@syntax-violation-form) (syntax-violation . K14357@K7994@syntax-violation) (serious-condition? . K15095@K14516@serious-condition?) (non-continuable-violation? . K15147@K14652@non-continuable-violation?) (message-condition? . K15078@K14472@message-condition?) (make-who-condition . K15136@K14625@make-who-condition) (make-warning . K15086@K14493@make-warning) (make-violation . K15110@K14556@make-violation) (make-undefined-violation . K15182@K14744@make-undefined-violation) (make-syntax-violation . K15170@K14715@make-syntax-violation) (make-serious-condition . K15094@K14514@make-serious-condition) (make-non-continuable-violation . K15146@K14650@make-non-continuable-violation) (make-message-condition . K15076@K14468@make-message-condition) (make-lexical-violation . K15162@K14692@make-lexical-violation) (make-irritants-condition . K15126@K14599@make-irritants-condition) (make-implementation-restriction-violation . K15154@K14671@make-implementation-restriction-violation) (make-error . K15102@K14535@make-error) (make-assertion-violation . K15118@K14577@make-assertion-violation) (lexical-violation? . K15163@K14694@lexical-violation?) (irritants-condition? . K15128@K14603@irritants-condition?) (implementation-restriction-violation? . K15155@K14673@implementation-restriction-violation?) (error? . K15103@K14537@error?) (condition-who . K15139@K14631@condition-who) (condition-message . K15079@K14474@condition-message) (condition-irritants . K15129@K14605@condition-irritants) (assertion-violation? . K15119@K14579@assertion-violation?) (no-nans-violation? . K15303@K15060@no-nans-violation?) (no-infinities-violation? . K15295@K15039@no-infinities-violation?) (make-no-nans-violation . K15302@K15058@make-no-nans-violation) (make-no-infinities-violation . K15294@K15037@make-no-infinities-violation)))))) (K6788@K6441@install-library 'K16285 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . K16275) (format . K16272) (string-split . K16261) (call-process . K16255) (set-current-directory! . K16251) (expand-path . K16250) (current-directory . K16249) (%spawn . K16248) (%waitpid . K16247) (%ffi-supported? . K16246) (%ffi-pointer-ref . K16245) (%ffi-pointer->string . K16244) (%ffi-call->string-or-zero . K16243) (%ffi-call->double . K16242) (%ffi-call->void* . K16241) (%ffi-call->void . K16240) (%ffi-call->int . K16239) (%ffi-lookup . K16238) (%ffi-open . K16237) (%fork . K16236) (%pipe . K16235) (p . K16234) (string-upcase . K16216) (string-titlecase . K16215) (string-normalize-nfkd . K16214) (string-normalize-nfkc . K16213) (string-normalize-nfd . K16212) (string-normalize-nfc . K16211) (string-foldcase . K16210) (string-downcase . K16209) (string-ci>? . K16208) (string-ci>=? . K16207) (string-ci=? . K16206) (string-ci<? . K16205) (string-ci<=? . K16204) (char-whitespace? . K16203) (char-upper-case? . K16202) (char-title-case? . K16201) (char-numeric? . K16200) (char-lower-case? . K16199) (char-general-category . K16198) (char-upcase . K16197) (char-titlecase . K16196) (char-foldcase . K16195) (char-downcase . K16194) (char-ci>? . K16193) (char-ci>=? . K16192) (char-ci=? . K16191) (char-ci<? . K16190) (char-ci<=? . K16189) (char-alphabetic? . K16188) (make-variable-transformer . K7319) (identifier? . K7995) (generate-temporaries . K7975) (free-identifier=? . K7977) (syntax->datum . K7999) (datum->syntax . K7997) (bound-identifier=? . K7979) (record-type-descriptor? . K16187) (record-predicate . K16186) (record-mutator . K16185) (record-constructor . K16184) (record-accessor . K16183) (make-record-type-descriptor . K16182) (make-record-constructor-descriptor . K16181) (record? . K16180) (record-type-uid . K16179) (record-type-sealed? . K16178) (record-type-parent . K16177) (record-type-opaque? . K16176) (record-type-name . K16175) (record-type-generative? . K16174) (record-type-field-names . K16173) (record-rtd . K16172) (record-field-mutable? . K16171) (delete-file . K16170) (file-exists? . K16169) (vector-sort! . K16168) (vector-sort . K16167) (list-sort . K16166) (symbol-hash . K16165) (string-ci-hash . K16164) (string-hash . K16163) (equal-hash . K16162) (hashtable-equivalence-function . K16161) (make-hashtable . K16160) (hashtable-hash-function . K16159) (make-eqv-hashtable . K16158) (make-eq-hashtable . K16157) (hashtable? . K16156) (hashtable-update! . K16155) (hashtable-size . K16154) (hashtable-set! . K16153) (hashtable-ref . K16152) (hashtable-mutable? . K16151) (hashtable-keys . K16150) (hashtable-entries . K16149) (hashtable-delete! . K16148) (hashtable-copy . K16147) (hashtable-contains? . K16146) (hashtable-clear! . K16145) (call-with-output-file . K16144) (call-with-input-file . K16143) (write-char . K16142) (write . K16141) (with-output-to-file . K16140) (with-input-from-file . K16139) (read-char . K16138) (read . K16137) (peek-char . K16136) (open-output-file . K16135) (open-input-file . K16134) (newline . K16133) (display . K16132) (close-output-port . K16131) (close-input-port . K16130) (eof-object? . K16129) (eof-object . K16128) (current-error-port . K16127) (current-output-port . K16126) (current-input-port . K16125) (output-port? . K16124) (input-port? . K16123) (utf-8-codec . K16122) (utf-16-codec . K16121) (transcoder-error-handling-mode . K16120) (transcoder-eol-style . K16119) (transcoder-codec . K16118) (transcoded-port . K16117) (textual-port? . K16116) (string->bytevector . K16115) (standard-output-port . K16114) (standard-input-port . K16113) (standard-error-port . K16112) (set-port-position! . K16111) (put-u8 . K16110) (put-string . K16109) (put-datum . K16108) (put-char . K16107) (put-bytevector . K16106) (port? . K16105) (port-transcoder . K16104) (port-position . K16103) (port-has-set-port-position!? . K16102) (port-has-port-position? . K16101) (port-eof? . K16100) (output-port-buffer-mode . K16099) (open-string-output-port . K16098) (open-string-input-port . K16097) (open-file-output-port . K16096) (open-file-input/output-port . K16095) (open-file-input-port . K16094) (open-bytevector-output-port . K16093) (open-bytevector-input-port . K16092) (native-transcoder . K16091) (native-eol-style . K16090) (make-transcoder . K16089) (latin-1-codec . K16088) (make-i/o-write-error . K14806) (make-i/o-read-error . K14785) (make-i/o-port-error . K14964) (make-i/o-invalid-position-error . K14828) (make-i/o-filename-error . K14854) (make-i/o-file-protection-error . K14879) (make-i/o-file-is-read-only-error . K14900) (make-i/o-file-does-not-exist-error . K14942) (make-i/o-file-already-exists-error . K14921) (make-i/o-error . K14764) (make-i/o-encoding-error . K15011) (make-i/o-decoding-error . K14989) (make-custom-textual-output-port . K16087) (make-custom-textual-input/output-port . K16086) (make-custom-textual-input-port . K16085) (make-custom-binary-output-port . K16084) (make-custom-binary-input/output-port . K16083) (make-custom-binary-input-port . K16082) (make-bytevector . K16081) (lookahead-u8 . K16080) (lookahead-char . K16079) (i/o-write-error? . K14808) (i/o-read-error? . K14787) (i/o-port-error? . K14968) (i/o-invalid-position-error? . K14832) (i/o-filename-error? . K14858) (i/o-file-protection-error? . K14881) (i/o-file-is-read-only-error? . K14902) (i/o-file-does-not-exist-error? . K14944) (i/o-file-already-exists-error? . K14923) (i/o-error? . K14766) (i/o-error-position . K14834) (i/o-error-port . K14970) (i/o-error-filename . K14860) (i/o-encoding-error? . K15015) (i/o-encoding-error-char . K15017) (i/o-decoding-error? . K14991) (get-u8 . K16078) (get-string-n! . K16077) (get-string-n . K16076) (get-string-all . K16075) (get-line . K16074) (get-datum . K16073) (get-char . K16072) (get-bytevector-some . K16071) (get-bytevector-n! . K16070) (get-bytevector-n . K16069) (get-bytevector-all . K16068) (flush-output-port . K16067) (close-port . K16066) (exit . K16058) (command-line . K15326) (string-fill! . K16057) (string-set! . K16056) (set-cdr! . K16055) (set-car! . K16054) (remove . K16053) (remv . K16052) (remp . K16051) (remq . K16050) (partition . K16049) (memv . K16048) (memq . K16047) (memp . K16046) (member . K16045) (exists . K16044) (for-all . K16043) (fold-right . K16042) (fold-left . K16041) (find . K16040) (filter . K16039) (cons* . K16038) (assv . K16037) (assq . K16036) (assp . K16035) (assoc . K16034) (call-with-string-output-port . K16033) (call-with-port . K16032) (call-with-bytevector-output-port . K16031) (bytevector->string . K16030) (buffer-mode? . K16029) (binary-port? . K16028) (with-exception-handler . K16027) (raise-continuable . K16026) (raise . K16025) (eval . K7961) (environment . K7953) (make-enumeration . K16024) (enum-set=? . K16023) (enum-set-universe . K16022) (enum-set-union . K16021) (enum-set-subset? . K16020) (enum-set-projection . K16019) (enum-set-member? . K16018) (enum-set-intersection . K16017) (enum-set-indexer . K16016) (enum-set-difference . K16015) (enum-set-constructor . K16014) (enum-set-complement . K16013) (enum-set->list . K16012) (who-condition? . K14628) (warning? . K14494) (violation? . K14557) (undefined-violation? . K14745) (syntax-violation? . K14720) (syntax-violation-subform . K14724) (syntax-violation-form . K14722) (syntax-violation . K7993) (simple-conditions . K16011) (serious-condition? . K14515) (non-continuable-violation? . K14651) (message-condition? . K14471) (make-who-condition . K14624) (make-warning . K14492) (make-violation . K14555) (make-undefined-violation . K14743) (make-syntax-violation . K14714) (make-serious-condition . K14513) (make-non-continuable-violation . K14649) (make-message-condition . K14467) (make-lexical-violation . K14691) (make-irritants-condition . K14598) (make-implementation-restriction-violation . K14670) (make-error . K14534) (make-assertion-violation . K14576) (lexical-violation? . K14693) (irritants-condition? . K14602) (implementation-restriction-violation? . K14672) (error? . K14536) (condition-who . K14630) (condition-predicate . K16010) (condition-message . K14473) (condition-irritants . K14604) (condition-accessor . K16009) (condition . K16008) (assertion-violation? . K14578) (condition? . K16007) (utf32->string . K16006) (utf16->string . K16005) (utf8->string . K16004) (uint-list->bytevector . K16003) (u8-list->bytevector . K16002) (string->utf8 . K16001) (string->utf32 . K16000) (string->utf16 . K15999) (sint-list->bytevector . K15998) (native-endianness . K15997) (bytevector? . K15996) (bytevector=? . K15995) (bytevector-uint-set! . K15994) (bytevector-uint-ref . K15993) (bytevector-u8-set! . K15992) (bytevector-u8-ref . K15991) (bytevector-u64-set! . K15990) (bytevector-u64-ref . K15989) (bytevector-u64-native-set! . K15988) (bytevector-u64-native-ref . K15987) (bytevector-u32-set! . K15986) (bytevector-u32-ref . K15985) (bytevector-u32-native-set! . K15984) (bytevector-u32-native-ref . K15983) (bytevector-u16-set! . K15982) (bytevector-u16-ref . K15981) (bytevector-u16-native-set! . K15980) (bytevector-u16-native-ref . K15979) (bytevector-sint-set! . K15978) (bytevector-sint-ref . K15977) (bytevector-s8-set! . K15976) (bytevector-s8-ref . K15975) (bytevector-s64-set! . K15974) (bytevector-s64-ref . K15973) (bytevector-s64-native-set! . K15972) (bytevector-s64-native-ref . K15971) (bytevector-s32-set! . K15970) (bytevector-s32-ref . K15969) (bytevector-s32-native-set! . K15968) (bytevector-s32-native-ref . K15967) (bytevector-s16-set! . K15966) (bytevector-s16-ref . K15965) (bytevector-s16-native-set! . K15964) (bytevector-s16-native-ref . K15963) (bytevector-length . K15962) (bytevector-ieee-single-ref . K15961) (bytevector-ieee-single-set! . K15960) (bytevector-ieee-single-native-set! . K15959) (bytevector-ieee-single-native-ref . K15958) (bytevector-ieee-double-set! . K15957) (bytevector-ieee-double-ref . K15956) (bytevector-ieee-double-native-set! . K15955) (bytevector-ieee-double-native-ref . K15954) (bytevector-fill! . K15953) (bytevector-copy! . K15952) (bytevector-copy . K15951) (bytevector->uint-list . K15950) (bytevector->u8-list . K15949) (bytevector->sint-list . K15948) (no-nans-violation? . K15059) (no-infinities-violation? . K15038) (make-no-nans-violation . K15057) (make-no-infinities-violation . K15036) (real->flonum . K15947) (flzero? . K15946) (fltruncate . K15945) (fltan . K15944) (flsqrt . K15943) (flsin . K15942) (flround . K15941) (flpositive? . K15940) (flonum? . K15939) (flodd? . K15938) (flnumerator . K15937) (flnegative? . K15936) (flnan? . K15935) (flmod0 . K15934) (flmod . K15933) (flmin . K15932) (flmax . K15931) (fllog . K15930) (flinteger? . K15929) (flinfinite? . K15928) (flfloor . K15927) (flfinite? . K15926) (flexpt . K15925) (flexp . K15924) (fleven? . K15923) (fldiv0-and-mod0 . K15922) (fldiv0 . K15921) (fldiv-and-mod . K15920) (fldiv . K15919) (fldenominator . K15918) (flcos . K15917) (flceiling . K15916) (flatan . K15915) (flasin . K15914) (flacos . K15913) (flabs . K15912) (fl>? . K15911) (fl>=? . K15910) (fl=? . K15909) (fl<? . K15908) (fl<=? . K15907) (fl/ . K15906) (fl- . K15905) (fl+ . K15904) (fl* . K15903) (fixnum->flonum . K15902) (fxzero? . K15901) (fxxor . K15900) (fxrotate-bit-field . K15899) (fxreverse-bit-field . K15898) (fxpositive? . K15897) (fxodd? . K15896) (fxnot . K15895) (fxnegative? . K15894) (fxmod0 . K15893) (fxmod . K15892) (fxmin . K15891) (fxmax . K15890) (fxlength . K15889) (fxior . K15888) (fxif . K15887) (fxfirst-bit-set . K15886) (fxeven? . K15885) (fxdiv0-and-mod0 . K15884) (fxdiv0 . K15883) (fxdiv-and-mod . K15882) (fxdiv . K15881) (fxcopy-bit-field . K15880) (fxcopy-bit . K15879) (fxbit-set? . K15878) (fxbit-field . K15877) (fxbit-count . K15876) (fxarithmetic-shift-right . K15875) (fxarithmetic-shift-left . K15874) (fxarithmetic-shift . K15873) (fxand . K15872) (fx>? . K15871) (fx>=? . K15870) (fx=? . K15869) (fx<? . K15868) (fx<=? . K15867) (fx-/carry . K15866) (fx- . K15865) (fx+/carry . K15864) (fx+ . K15863) (fx*/carry . K15862) (fx* . K15861) (greatest-fixnum . K15860) (least-fixnum . K15859) (fixnum-width . K15858) (fixnum? . K15857) (bitwise-rotate-bit-field . K15856) (bitwise-reverse-bit-field . K15855) (bitwise-length . K15854) (bitwise-if . K15853) (bitwise-first-bit-set . K15852) (bitwise-copy-bit-field . K15851) (bitwise-copy-bit . K15850) (bitwise-bit-set? . K15849) (bitwise-bit-field . K15848) (bitwise-bit-count . K15847) (bitwise-xor . K15846) (bitwise-ior . K15845) (bitwise-and . K15844) (bitwise-not . K15843) (bitwise-arithmetic-shift-right . K15842) (bitwise-arithmetic-shift-left . K15841) (bitwise-arithmetic-shift . K15840) (zero? . K15839) (vector? . K15838) (vector-set! . K15837) (vector-ref . K15836) (vector-map . K15835) (vector-length . K15834) (vector-for-each . K15833) (vector-fill! . K15832) (vector->list . K15831) (vector . K15830) (values . K15829) (truncate . K15828) (tan . K15827) (symbol? . K15826) (symbol=? . K15825) (symbol->string . K15824) (substring . K15823) (string? . K15822) (string>? . K15821) (string>=? . K15820) (string=? . K15819) (string<? . K15818) (string<=? . K15817) (string-ref . K15816) (string-length . K15815) (string-for-each . K15814) (string-copy . K15813) (string-append . K15812) (string->symbol . K15811) (string->number . K15810) (string->list . K15809) (string . K15808) (sqrt . K15807) (sin . K15806) (round . K15805) (reverse . K15804) (real? . K15803) (real-valued? . K15802) (real-part . K15801) (rationalize . K15800) (rational? . K15799) (rational-valued? . K15798) (procedure? . K15797) (positive? . K15796) (pair? . K15795) (odd? . K15794) (numerator . K15793) (number? . K15792) (number->string . K15791) (null? . K15790) (not . K15789) (negative? . K15788) (nan? . K15787) (min . K15786) (max . K15785) (map . K15784) (make-vector . K15783) (make-string . K15782) (make-rectangular . K15781) (make-polar . K15780) (magnitude . K15779) (log . K15778) (list? . K15777) (list-tail . K15776) (list-ref . K15775) (list->vector . K15774) (list->string . K15773) (list . K15772) (length . K15771) (lcm . K15770) (integer? . K15769) (integer-valued? . K15768) (integer->char . K15767) (infinite? . K15766) (inexact? . K15765) (inexact . K15764) (imag-part . K15763) (gcd . K15762) (for-each . K15761) (floor . K15760) (finite? . K15759) (expt . K15758) (exp . K15757) (exact? . K15756) (exact-integer-sqrt . K15755) (exact . K15754) (even? . K15753) (error . K15752) (eqv? . K15751) (equal? . K15750) (eq? . K15749) (dynamic-wind . K15748) (div0-and-mod0 . K15747) (mod0 . K15746) (div0 . K15745) (div-and-mod . K15744) (mod . K15743) (div . K15742) (denominator . K15741) (cos . K15740) (cons . K15739) (complex? . K15738) (char? . K15737) (char>? . K15736) (char>=? . K15735) (char=? . K15734) (char<? . K15733) (char<=? . K15732) (char->integer . K15731) (ceiling . K15730) (call-with-values . K15729) (call/cc . K15728) (call-with-current-continuation . K15727) (cddddr . K15726) (cdddar . K15725) (cddadr . K15724) (cddaar . K15723) (cdaddr . K15722) (cdadar . K15721) (cdaadr . K15720) (cdaaar . K15719) (cadddr . K15718) (caddar . K15717) (cadadr . K15716) (cadaar . K15715) (caaddr . K15714) (caadar . K15713) (caaadr . K15712) (caaaar . K15711) (cdddr . K15710) (cddar . K15709) (cdadr . K15708) (cdaar . K15707) (caddr . K15706) (cadar . K15705) (caadr . K15704) (caaar . K15703) (cddr . K15702) (cdar . K15701) (cadr . K15700) (caar . K15699) (cdr . K15698) (car . K15697) (boolean? . K15696) (boolean=? . K15695) (atan . K15694) (assertion-violation . K15693) (asin . K15692) (apply . K15691) (append . K15690) (angle . K15689) (acos . K15688) (abs . K15687) (/ . K15686) (* . K15685) (- . K15684) (+ . K15683) (>= . K15682) (> . K15681) (= . K15680) (<= . K15679) (< . K15678) (library . K15677) (&no-nans . K15676) (&no-infinities . K15675) (&i/o-encoding . K15674) (&i/o-decoding . K15673) (&i/o-port . K15672) (&i/o-file-does-not-exist . K15671) (&i/o-file-already-exists . K15670) (&i/o-file-is-read-only . K15669) (&i/o-file-protection . K15668) (&i/o-filename . K15667) (&i/o-invalid-position . K15666) (&i/o-write . K15665) (&i/o-read . K15664) (&i/o . K15663) (&undefined . K15662) (&syntax . K15661) (&lexical . K15660) (&implementation-restriction . K15659) (&non-continuable . K15658) (&who . K15657) (&irritants . K15656) (&assertion . K15655) (&violation . K15654) (&error . K15653) (&serious . K15652) (&warning . K15651) (&message . K15650) (&condition . K15649) (define-condition-type . K15648) (define-enumeration . K15647) (define-record-type . K15646) (parent-rtd . K15645) (nongenerative . K15644) (opaque . K15643) (sealed . K15642) (protocol . K15641) (parent . K15640) (immutable . K15639) (mutable . K15638) (fields . K15637) (error-handling-mode . K15636) (file-options . K15635) (buffer-mode . K15634) (eol-style . K15633) (guard . K15632) (unsyntax-splicing . K15629) (unsyntax . K15628) (unquote-splicing . K15627) (unquote . K15626) (_ . K15625) (else . K15624) (=> . K15623) (... . K15622) (assert . K15621) (endianness . K15620) (do . K15617) (cond . K15616) (let* . K15615) (let . K15614) (let*-values . K15613) (let-values . K15612) (identifier-syntax . K15611) (with-syntax . K15610) (quasisyntax . K15609) (quasiquote . K15608) (syntax-rules . K15607) (include . K15606) (record-constructor-descriptor . K15604) (record-type-descriptor . K15603) (case . K15602) (unless . K15600) (when . K15599) (or . K15598) (and . K15597) (if . K15596) (letrec* . K15595) (letrec . K15594) (case-lambda . K15592) (lambda . K15591) (syntax . K15590) (syntax-case . K15589) (quote . K15588) (letrec-syntax . K15586) (let-syntax . K15585) (set! . K15584) (import . K15583) (begin . K15582) (define-syntax . K15580) (define . K15579)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16286 '(psyntax null-environment-5) '() '() '() '() '((make-promise . K16059) (unquote-splicing . K15627) (unquote . K15626) (_ . K15625) (else . K15624) (=> . K15623) (... . K15622) (delay . K15619) (do . K15617) (cond . K15616) (let* . K15615) (let . K15614) (quasiquote . K15608) (syntax-rules . K15607) (case . K15602) (or . K15598) (and . K15597) (if . K15596) (letrec . K15594) (lambda . K15591) (quote . K15588) (letrec-syntax . K15586) (let-syntax . K15585) (set! . K15584) (begin . K15582) (define-syntax . K15580) (define . K15579)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16287 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . K16208) (string-ci>=? . K16207) (string-ci=? . K16206) (string-ci<? . K16205) (string-ci<=? . K16204) (char-whitespace? . K16203) (char-upper-case? . K16202) (char-numeric? . K16200) (char-lower-case? . K16199) (char-upcase . K16197) (char-downcase . K16194) (char-ci>? . K16193) (char-ci>=? . K16192) (char-ci=? . K16191) (char-ci<? . K16190) (char-ci<=? . K16189) (char-alphabetic? . K16188) (call-with-output-file . K16144) (call-with-input-file . K16143) (write-char . K16142) (write . K16141) (with-output-to-file . K16140) (with-input-from-file . K16139) (read-char . K16138) (read . K16137) (peek-char . K16136) (open-output-file . K16135) (open-input-file . K16134) (newline . K16133) (display . K16132) (close-output-port . K16131) (close-input-port . K16130) (eof-object . K16128) (current-output-port . K16126) (current-input-port . K16125) (output-port? . K16124) (input-port? . K16123) (scheme-report-environment . K7957) (quotient . K16065) (null-environment . K7955) (remainder . K16064) (modulo . K16063) (inexact->exact . K16062) (force . K16061) (exact->inexact . K16060) (make-promise . K16059) (string-fill! . K16057) (string-set! . K16056) (set-cdr! . K16055) (set-car! . K16054) (memv . K16048) (memq . K16047) (member . K16045) (assv . K16037) (assq . K16036) (assoc . K16034) (eval . K7961) (zero? . K15839) (vector? . K15838) (vector-set! . K15837) (vector-ref . K15836) (vector-length . K15834) (vector-fill! . K15832) (vector->list . K15831) (vector . K15830) (values . K15829) (truncate . K15828) (tan . K15827) (symbol? . K15826) (symbol->string . K15824) (substring . K15823) (string? . K15822) (string>? . K15821) (string>=? . K15820) (string=? . K15819) (string<? . K15818) (string<=? . K15817) (string-ref . K15816) (string-length . K15815) (string-copy . K15813) (string-append . K15812) (string->symbol . K15811) (string->number . K15810) (string->list . K15809) (string . K15808) (sqrt . K15807) (sin . K15806) (round . K15805) (reverse . K15804) (real? . K15803) (real-part . K15801) (rationalize . K15800) (rational? . K15799) (procedure? . K15797) (positive? . K15796) (pair? . K15795) (odd? . K15794) (numerator . K15793) (number? . K15792) (number->string . K15791) (not . K15789) (negative? . K15788) (min . K15786) (max . K15785) (map . K15784) (make-vector . K15783) (make-string . K15782) (make-rectangular . K15781) (make-polar . K15780) (magnitude . K15779) (log . K15778) (list? . K15777) (list-tail . K15776) (list-ref . K15775) (list->vector . K15774) (list->string . K15773) (list . K15772) (length . K15771) (lcm . K15770) (integer? . K15769) (integer->char . K15767) (inexact? . K15765) (imag-part . K15763) (gcd . K15762) (for-each . K15761) (floor . K15760) (expt . K15758) (exp . K15757) (exact? . K15756) (even? . K15753) (eqv? . K15751) (equal? . K15750) (eq? . K15749) (dynamic-wind . K15748) (denominator . K15741) (cos . K15740) (cons . K15739) (complex? . K15738) (char? . K15737) (char>? . K15736) (char>=? . K15735) (char=? . K15734) (char<? . K15733) (char<=? . K15732) (char->integer . K15731) (ceiling . K15730) (call-with-values . K15729) (call-with-current-continuation . K15727) (cddddr . K15726) (cdddar . K15725) (cddadr . K15724) (cddaar . K15723) (cdaddr . K15722) (cdadar . K15721) (cdaadr . K15720) (cdaaar . K15719) (cadddr . K15718) (caddar . K15717) (cadadr . K15716) (cadaar . K15715) (caaddr . K15714) (caadar . K15713) (caaadr . K15712) (caaaar . K15711) (cdddr . K15710) (cddar . K15709) (cdadr . K15708) (cdaar . K15707) (caddr . K15706) (cadar . K15705) (caadr . K15704) (caaar . K15703) (cddr . K15702) (cdar . K15701) (cadr . K15700) (caar . K15699) (cdr . K15698) (car . K15697) (boolean? . K15696) (atan . K15694) (asin . K15692) (apply . K15691) (append . K15690) (angle . K15689) (acos . K15688) (abs . K15687) (/ . K15686) (* . K15685) (- . K15684) (+ . K15683) (>= . K15682) (> . K15681) (= . K15680) (<= . K15679) (< . K15678) (unquote-splicing . K15627) (unquote . K15626) (else . K15624) (=> . K15623) (... . K15622) (delay . K15619) (do . K15617) (cond . K15616) (let* . K15615) (let . K15614) (quasiquote . K15608) (syntax-rules . K15607) (case . K15602) (or . K15598) (and . K15597) (if . K15596) (letrec . K15594) (lambda . K15591) (quote . K15588) (letrec-syntax . K15586) (let-syntax . K15585) (set! . K15584) (begin . K15582) (define-syntax . K15580) (define . K15579)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16288 '(psyntax modules) '() '() '() '() '((module . K15581)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16289 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16290 '(rnrs) '(6) '() '() '() '((regexp? . K16278) (string-upcase . K16216) (string-titlecase . K16215) (string-normalize-nfkd . K16214) (string-normalize-nfkc . K16213) (string-normalize-nfd . K16212) (string-normalize-nfc . K16211) (string-foldcase . K16210) (string-downcase . K16209) (string-ci>? . K16208) (string-ci>=? . K16207) (string-ci=? . K16206) (string-ci<? . K16205) (string-ci<=? . K16204) (char-whitespace? . K16203) (char-upper-case? . K16202) (char-title-case? . K16201) (char-numeric? . K16200) (char-lower-case? . K16199) (char-general-category . K16198) (char-upcase . K16197) (char-titlecase . K16196) (char-foldcase . K16195) (char-downcase . K16194) (char-ci>? . K16193) (char-ci>=? . K16192) (char-ci=? . K16191) (char-ci<? . K16190) (char-ci<=? . K16189) (char-alphabetic? . K16188) (make-variable-transformer . K7319) (identifier? . K7995) (generate-temporaries . K7975) (free-identifier=? . K7977) (syntax->datum . K7999) (datum->syntax . K7997) (bound-identifier=? . K7979) (record-type-descriptor? . K16187) (record-predicate . K16186) (record-mutator . K16185) (record-constructor . K16184) (record-accessor . K16183) (make-record-type-descriptor . K16182) (make-record-constructor-descriptor . K16181) (record? . K16180) (record-type-uid . K16179) (record-type-sealed? . K16178) (record-type-parent . K16177) (record-type-opaque? . K16176) (record-type-name . K16175) (record-type-generative? . K16174) (record-type-field-names . K16173) (record-rtd . K16172) (record-field-mutable? . K16171) (delete-file . K16170) (file-exists? . K16169) (vector-sort! . K16168) (vector-sort . K16167) (list-sort . K16166) (symbol-hash . K16165) (string-ci-hash . K16164) (string-hash . K16163) (equal-hash . K16162) (hashtable-equivalence-function . K16161) (make-hashtable . K16160) (hashtable-hash-function . K16159) (make-eqv-hashtable . K16158) (make-eq-hashtable . K16157) (hashtable? . K16156) (hashtable-update! . K16155) (hashtable-size . K16154) (hashtable-set! . K16153) (hashtable-ref . K16152) (hashtable-mutable? . K16151) (hashtable-keys . K16150) (hashtable-entries . K16149) (hashtable-delete! . K16148) (hashtable-copy . K16147) (hashtable-contains? . K16146) (hashtable-clear! . K16145) (call-with-output-file . K16144) (call-with-input-file . K16143) (write-char . K16142) (write . K16141) (with-output-to-file . K16140) (with-input-from-file . K16139) (read-char . K16138) (read . K16137) (peek-char . K16136) (open-output-file . K16135) (open-input-file . K16134) (newline . K16133) (display . K16132) (close-output-port . K16131) (close-input-port . K16130) (eof-object? . K16129) (eof-object . K16128) (current-error-port . K16127) (current-output-port . K16126) (current-input-port . K16125) (output-port? . K16124) (input-port? . K16123) (utf-8-codec . K16122) (utf-16-codec . K16121) (transcoder-error-handling-mode . K16120) (transcoder-eol-style . K16119) (transcoder-codec . K16118) (transcoded-port . K16117) (textual-port? . K16116) (string->bytevector . K16115) (standard-output-port . K16114) (standard-input-port . K16113) (standard-error-port . K16112) (set-port-position! . K16111) (put-u8 . K16110) (put-string . K16109) (put-datum . K16108) (put-char . K16107) (put-bytevector . K16106) (port? . K16105) (port-transcoder . K16104) (port-position . K16103) (port-has-set-port-position!? . K16102) (port-has-port-position? . K16101) (port-eof? . K16100) (output-port-buffer-mode . K16099) (open-string-output-port . K16098) (open-string-input-port . K16097) (open-file-output-port . K16096) (open-file-input/output-port . K16095) (open-file-input-port . K16094) (open-bytevector-output-port . K16093) (open-bytevector-input-port . K16092) (native-transcoder . K16091) (native-eol-style . K16090) (make-transcoder . K16089) (latin-1-codec . K16088) (make-i/o-write-error . K14806) (make-i/o-read-error . K14785) (make-i/o-port-error . K14964) (make-i/o-invalid-position-error . K14828) (make-i/o-filename-error . K14854) (make-i/o-file-protection-error . K14879) (make-i/o-file-is-read-only-error . K14900) (make-i/o-file-does-not-exist-error . K14942) (make-i/o-file-already-exists-error . K14921) (make-i/o-error . K14764) (make-i/o-encoding-error . K15011) (make-i/o-decoding-error . K14989) (make-custom-textual-output-port . K16087) (make-custom-textual-input/output-port . K16086) (make-custom-textual-input-port . K16085) (make-custom-binary-output-port . K16084) (make-custom-binary-input/output-port . K16083) (make-custom-binary-input-port . K16082) (make-bytevector . K16081) (lookahead-u8 . K16080) (lookahead-char . K16079) (i/o-write-error? . K14808) (i/o-read-error? . K14787) (i/o-port-error? . K14968) (i/o-invalid-position-error? . K14832) (i/o-filename-error? . K14858) (i/o-file-protection-error? . K14881) (i/o-file-is-read-only-error? . K14902) (i/o-file-does-not-exist-error? . K14944) (i/o-file-already-exists-error? . K14923) (i/o-error? . K14766) (i/o-error-position . K14834) (i/o-error-port . K14970) (i/o-error-filename . K14860) (i/o-encoding-error? . K15015) (i/o-encoding-error-char . K15017) (i/o-decoding-error? . K14991) (get-u8 . K16078) (get-string-n! . K16077) (get-string-n . K16076) (get-string-all . K16075) (get-line . K16074) (get-datum . K16073) (get-char . K16072) (get-bytevector-some . K16071) (get-bytevector-n! . K16070) (get-bytevector-n . K16069) (get-bytevector-all . K16068) (flush-output-port . K16067) (close-port . K16066) (exit . K16058) (command-line . K15326) (remove . K16053) (remv . K16052) (remp . K16051) (remq . K16050) (partition . K16049) (memv . K16048) (memq . K16047) (memp . K16046) (member . K16045) (exists . K16044) (for-all . K16043) (fold-right . K16042) (fold-left . K16041) (find . K16040) (filter . K16039) (cons* . K16038) (assv . K16037) (assq . K16036) (assp . K16035) (assoc . K16034) (call-with-string-output-port . K16033) (call-with-port . K16032) (call-with-bytevector-output-port . K16031) (bytevector->string . K16030) (buffer-mode? . K16029) (binary-port? . K16028) (with-exception-handler . K16027) (raise-continuable . K16026) (raise . K16025) (make-enumeration . K16024) (enum-set=? . K16023) (enum-set-universe . K16022) (enum-set-union . K16021) (enum-set-subset? . K16020) (enum-set-projection . K16019) (enum-set-member? . K16018) (enum-set-intersection . K16017) (enum-set-indexer . K16016) (enum-set-difference . K16015) (enum-set-constructor . K16014) (enum-set-complement . K16013) (enum-set->list . K16012) (who-condition? . K14628) (warning? . K14494) (violation? . K14557) (undefined-violation? . K14745) (syntax-violation? . K14720) (syntax-violation-subform . K14724) (syntax-violation-form . K14722) (syntax-violation . K7993) (simple-conditions . K16011) (serious-condition? . K14515) (non-continuable-violation? . K14651) (message-condition? . K14471) (make-who-condition . K14624) (make-warning . K14492) (make-violation . K14555) (make-undefined-violation . K14743) (make-syntax-violation . K14714) (make-serious-condition . K14513) (make-non-continuable-violation . K14649) (make-message-condition . K14467) (make-lexical-violation . K14691) (make-irritants-condition . K14598) (make-implementation-restriction-violation . K14670) (make-error . K14534) (make-assertion-violation . K14576) (lexical-violation? . K14693) (irritants-condition? . K14602) (implementation-restriction-violation? . K14672) (error? . K14536) (condition-who . K14630) (condition-predicate . K16010) (condition-message . K14473) (condition-irritants . K14604) (condition-accessor . K16009) (condition . K16008) (assertion-violation? . K14578) (condition? . K16007) (utf32->string . K16006) (utf16->string . K16005) (utf8->string . K16004) (uint-list->bytevector . K16003) (u8-list->bytevector . K16002) (string->utf8 . K16001) (string->utf32 . K16000) (string->utf16 . K15999) (sint-list->bytevector . K15998) (native-endianness . K15997) (bytevector? . K15996) (bytevector=? . K15995) (bytevector-uint-set! . K15994) (bytevector-uint-ref . K15993) (bytevector-u8-set! . K15992) (bytevector-u8-ref . K15991) (bytevector-u64-set! . K15990) (bytevector-u64-ref . K15989) (bytevector-u64-native-set! . K15988) (bytevector-u64-native-ref . K15987) (bytevector-u32-set! . K15986) (bytevector-u32-ref . K15985) (bytevector-u32-native-set! . K15984) (bytevector-u32-native-ref . K15983) (bytevector-u16-set! . K15982) (bytevector-u16-ref . K15981) (bytevector-u16-native-set! . K15980) (bytevector-u16-native-ref . K15979) (bytevector-sint-set! . K15978) (bytevector-sint-ref . K15977) (bytevector-s8-set! . K15976) (bytevector-s8-ref . K15975) (bytevector-s64-set! . K15974) (bytevector-s64-ref . K15973) (bytevector-s64-native-set! . K15972) (bytevector-s64-native-ref . K15971) (bytevector-s32-set! . K15970) (bytevector-s32-ref . K15969) (bytevector-s32-native-set! . K15968) (bytevector-s32-native-ref . K15967) (bytevector-s16-set! . K15966) (bytevector-s16-ref . K15965) (bytevector-s16-native-set! . K15964) (bytevector-s16-native-ref . K15963) (bytevector-length . K15962) (bytevector-ieee-single-ref . K15961) (bytevector-ieee-single-set! . K15960) (bytevector-ieee-single-native-set! . K15959) (bytevector-ieee-single-native-ref . K15958) (bytevector-ieee-double-set! . K15957) (bytevector-ieee-double-ref . K15956) (bytevector-ieee-double-native-set! . K15955) (bytevector-ieee-double-native-ref . K15954) (bytevector-fill! . K15953) (bytevector-copy! . K15952) (bytevector-copy . K15951) (bytevector->uint-list . K15950) (bytevector->u8-list . K15949) (bytevector->sint-list . K15948) (no-nans-violation? . K15059) (no-infinities-violation? . K15038) (make-no-nans-violation . K15057) (make-no-infinities-violation . K15036) (real->flonum . K15947) (flzero? . K15946) (fltruncate . K15945) (fltan . K15944) (flsqrt . K15943) (flsin . K15942) (flround . K15941) (flpositive? . K15940) (flonum? . K15939) (flodd? . K15938) (flnumerator . K15937) (flnegative? . K15936) (flnan? . K15935) (flmod0 . K15934) (flmod . K15933) (flmin . K15932) (flmax . K15931) (fllog . K15930) (flinteger? . K15929) (flinfinite? . K15928) (flfloor . K15927) (flfinite? . K15926) (flexpt . K15925) (flexp . K15924) (fleven? . K15923) (fldiv0-and-mod0 . K15922) (fldiv0 . K15921) (fldiv-and-mod . K15920) (fldiv . K15919) (fldenominator . K15918) (flcos . K15917) (flceiling . K15916) (flatan . K15915) (flasin . K15914) (flacos . K15913) (flabs . K15912) (fl>? . K15911) (fl>=? . K15910) (fl=? . K15909) (fl<? . K15908) (fl<=? . K15907) (fl/ . K15906) (fl- . K15905) (fl+ . K15904) (fl* . K15903) (fixnum->flonum . K15902) (fxzero? . K15901) (fxxor . K15900) (fxrotate-bit-field . K15899) (fxreverse-bit-field . K15898) (fxpositive? . K15897) (fxodd? . K15896) (fxnot . K15895) (fxnegative? . K15894) (fxmod0 . K15893) (fxmod . K15892) (fxmin . K15891) (fxmax . K15890) (fxlength . K15889) (fxior . K15888) (fxif . K15887) (fxfirst-bit-set . K15886) (fxeven? . K15885) (fxdiv0-and-mod0 . K15884) (fxdiv0 . K15883) (fxdiv-and-mod . K15882) (fxdiv . K15881) (fxcopy-bit-field . K15880) (fxcopy-bit . K15879) (fxbit-set? . K15878) (fxbit-field . K15877) (fxbit-count . K15876) (fxarithmetic-shift-right . K15875) (fxarithmetic-shift-left . K15874) (fxarithmetic-shift . K15873) (fxand . K15872) (fx>? . K15871) (fx>=? . K15870) (fx=? . K15869) (fx<? . K15868) (fx<=? . K15867) (fx-/carry . K15866) (fx- . K15865) (fx+/carry . K15864) (fx+ . K15863) (fx*/carry . K15862) (fx* . K15861) (greatest-fixnum . K15860) (least-fixnum . K15859) (fixnum-width . K15858) (fixnum? . K15857) (bitwise-rotate-bit-field . K15856) (bitwise-reverse-bit-field . K15855) (bitwise-length . K15854) (bitwise-if . K15853) (bitwise-first-bit-set . K15852) (bitwise-copy-bit-field . K15851) (bitwise-copy-bit . K15850) (bitwise-bit-set? . K15849) (bitwise-bit-field . K15848) (bitwise-bit-count . K15847) (bitwise-xor . K15846) (bitwise-ior . K15845) (bitwise-and . K15844) (bitwise-not . K15843) (bitwise-arithmetic-shift-right . K15842) (bitwise-arithmetic-shift-left . K15841) (bitwise-arithmetic-shift . K15840) (zero? . K15839) (vector? . K15838) (vector-set! . K15837) (vector-ref . K15836) (vector-map . K15835) (vector-length . K15834) (vector-for-each . K15833) (vector-fill! . K15832) (vector->list . K15831) (vector . K15830) (values . K15829) (truncate . K15828) (tan . K15827) (symbol? . K15826) (symbol=? . K15825) (symbol->string . K15824) (substring . K15823) (string? . K15822) (string>? . K15821) (string>=? . K15820) (string=? . K15819) (string<? . K15818) (string<=? . K15817) (string-ref . K15816) (string-length . K15815) (string-for-each . K15814) (string-copy . K15813) (string-append . K15812) (string->symbol . K15811) (string->number . K15810) (string->list . K15809) (string . K15808) (sqrt . K15807) (sin . K15806) (round . K15805) (reverse . K15804) (real? . K15803) (real-valued? . K15802) (real-part . K15801) (rationalize . K15800) (rational? . K15799) (rational-valued? . K15798) (procedure? . K15797) (positive? . K15796) (pair? . K15795) (odd? . K15794) (numerator . K15793) (number? . K15792) (number->string . K15791) (null? . K15790) (not . K15789) (negative? . K15788) (nan? . K15787) (min . K15786) (max . K15785) (map . K15784) (make-vector . K15783) (make-string . K15782) (make-rectangular . K15781) (make-polar . K15780) (magnitude . K15779) (log . K15778) (list? . K15777) (list-tail . K15776) (list-ref . K15775) (list->vector . K15774) (list->string . K15773) (list . K15772) (length . K15771) (lcm . K15770) (integer? . K15769) (integer-valued? . K15768) (integer->char . K15767) (infinite? . K15766) (inexact? . K15765) (inexact . K15764) (imag-part . K15763) (gcd . K15762) (for-each . K15761) (floor . K15760) (finite? . K15759) (expt . K15758) (exp . K15757) (exact? . K15756) (exact-integer-sqrt . K15755) (exact . K15754) (even? . K15753) (error . K15752) (eqv? . K15751) (equal? . K15750) (eq? . K15749) (dynamic-wind . K15748) (div0-and-mod0 . K15747) (mod0 . K15746) (div0 . K15745) (div-and-mod . K15744) (mod . K15743) (div . K15742) (denominator . K15741) (cos . K15740) (cons . K15739) (complex? . K15738) (char? . K15737) (char>? . K15736) (char>=? . K15735) (char=? . K15734) (char<? . K15733) (char<=? . K15732) (char->integer . K15731) (ceiling . K15730) (call-with-values . K15729) (call/cc . K15728) (call-with-current-continuation . K15727) (cddddr . K15726) (cdddar . K15725) (cddadr . K15724) (cddaar . K15723) (cdaddr . K15722) (cdadar . K15721) (cdaadr . K15720) (cdaaar . K15719) (cadddr . K15718) (caddar . K15717) (cadadr . K15716) (cadaar . K15715) (caaddr . K15714) (caadar . K15713) (caaadr . K15712) (caaaar . K15711) (cdddr . K15710) (cddar . K15709) (cdadr . K15708) (cdaar . K15707) (caddr . K15706) (cadar . K15705) (caadr . K15704) (caaar . K15703) (cddr . K15702) (cdar . K15701) (cadr . K15700) (caar . K15699) (cdr . K15698) (car . K15697) (boolean? . K15696) (boolean=? . K15695) (atan . K15694) (assertion-violation . K15693) (asin . K15692) (apply . K15691) (append . K15690) (angle . K15689) (acos . K15688) (abs . K15687) (/ . K15686) (* . K15685) (- . K15684) (+ . K15683) (>= . K15682) (> . K15681) (= . K15680) (<= . K15679) (< . K15678) (&no-nans . K15676) (&no-infinities . K15675) (&i/o-encoding . K15674) (&i/o-decoding . K15673) (&i/o-port . K15672) (&i/o-file-does-not-exist . K15671) (&i/o-file-already-exists . K15670) (&i/o-file-is-read-only . K15669) (&i/o-file-protection . K15668) (&i/o-filename . K15667) (&i/o-invalid-position . K15666) (&i/o-write . K15665) (&i/o-read . K15664) (&i/o . K15663) (&undefined . K15662) (&syntax . K15661) (&lexical . K15660) (&implementation-restriction . K15659) (&non-continuable . K15658) (&who . K15657) (&irritants . K15656) (&assertion . K15655) (&violation . K15654) (&error . K15653) (&serious . K15652) (&warning . K15651) (&message . K15650) (&condition . K15649) (define-condition-type . K15648) (define-enumeration . K15647) (define-record-type . K15646) (parent-rtd . K15645) (nongenerative . K15644) (opaque . K15643) (sealed . K15642) (protocol . K15641) (parent . K15640) (immutable . K15639) (mutable . K15638) (fields . K15637) (error-handling-mode . K15636) (file-options . K15635) (buffer-mode . K15634) (eol-style . K15633) (guard . K15632) (unsyntax-splicing . K15629) (unsyntax . K15628) (unquote-splicing . K15627) (unquote . K15626) (_ . K15625) (else . K15624) (=> . K15623) (... . K15622) (assert . K15621) (endianness . K15620) (do . K15617) (cond . K15616) (let* . K15615) (let . K15614) (let*-values . K15613) (let-values . K15612) (identifier-syntax . K15611) (with-syntax . K15610) (quasisyntax . K15609) (quasiquote . K15608) (syntax-rules . K15607) (record-constructor-descriptor . K15604) (record-type-descriptor . K15603) (case . K15602) (unless . K15600) (when . K15599) (or . K15598) (and . K15597) (if . K15596) (letrec* . K15595) (letrec . K15594) (case-lambda . K15592) (lambda . K15591) (syntax . K15590) (syntax-case . K15589) (quote . K15588) (letrec-syntax . K15586) (let-syntax . K15585) (set! . K15584) (begin . K15582) (define-syntax . K15580) (define . K15579)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16291 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . K7957) (quotient . K16065) (null-environment . K7955) (remainder . K16064) (modulo . K16063) (inexact->exact . K16062) (force . K16061) (exact->inexact . K16060) (make-promise . K16059) (delay . K15619)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16292 '(rnrs control) '(6) '() '() '() '((do . K15617) (unless . K15600) (when . K15599) (case-lambda . K15592)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16293 '(rnrs eval) '(6) '() '() '() '((eval . K7961) (environment . K7953)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16294 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . K16055) (set-car! . K16054)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16295 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . K16057) (string-set! . K16056)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16296 '(rnrs programs) '(6) '() '() '() '((exit . K16058) (command-line . K15326)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16297 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . K7319) (identifier? . K7995) (generate-temporaries . K7975) (free-identifier=? . K7977) (syntax->datum . K7999) (datum->syntax . K7997) (bound-identifier=? . K7979) (syntax-violation . K7993) (unsyntax-splicing . K15629) (unsyntax . K15628) (_ . K15625) (... . K15622) (with-syntax . K15610) (quasisyntax . K15609) (syntax . K15590) (syntax-case . K15589)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16298 '(rnrs files) '(6) '() '() '() '((delete-file . K16170) (file-exists? . K16169) (make-i/o-write-error . K14806) (make-i/o-read-error . K14785) (make-i/o-port-error . K14964) (make-i/o-invalid-position-error . K14828) (make-i/o-filename-error . K14854) (make-i/o-file-protection-error . K14879) (make-i/o-file-is-read-only-error . K14900) (make-i/o-file-does-not-exist-error . K14942) (make-i/o-file-already-exists-error . K14921) (make-i/o-error . K14764) (i/o-write-error? . K14808) (i/o-read-error? . K14787) (i/o-port-error? . K14968) (i/o-invalid-position-error? . K14832) (i/o-filename-error? . K14858) (i/o-file-protection-error? . K14881) (i/o-file-is-read-only-error? . K14902) (i/o-file-does-not-exist-error? . K14944) (i/o-file-already-exists-error? . K14923) (i/o-error? . K14766) (i/o-error-position . K14834) (i/o-error-port . K14970) (i/o-error-filename . K14860) (&i/o-port . K15672) (&i/o-file-does-not-exist . K15671) (&i/o-file-already-exists . K15670) (&i/o-file-is-read-only . K15669) (&i/o-file-protection . K15668) (&i/o-filename . K15667) (&i/o-invalid-position . K15666) (&i/o-write . K15665) (&i/o-read . K15664) (&i/o . K15663)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16299 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . K16168) (vector-sort . K16167) (list-sort . K16166)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16300 '(rnrs base) '(6) '() '() '() '((zero? . K15839) (vector? . K15838) (vector-set! . K15837) (vector-ref . K15836) (vector-map . K15835) (vector-length . K15834) (vector-for-each . K15833) (vector-fill! . K15832) (vector->list . K15831) (vector . K15830) (values . K15829) (truncate . K15828) (tan . K15827) (symbol? . K15826) (symbol=? . K15825) (symbol->string . K15824) (substring . K15823) (string? . K15822) (string>? . K15821) (string>=? . K15820) (string=? . K15819) (string<? . K15818) (string<=? . K15817) (string-ref . K15816) (string-length . K15815) (string-for-each . K15814) (string-copy . K15813) (string-append . K15812) (string->symbol . K15811) (string->number . K15810) (string->list . K15809) (string . K15808) (sqrt . K15807) (sin . K15806) (round . K15805) (reverse . K15804) (real? . K15803) (real-valued? . K15802) (real-part . K15801) (rationalize . K15800) (rational? . K15799) (rational-valued? . K15798) (procedure? . K15797) (positive? . K15796) (pair? . K15795) (odd? . K15794) (numerator . K15793) (number? . K15792) (number->string . K15791) (null? . K15790) (not . K15789) (negative? . K15788) (nan? . K15787) (min . K15786) (max . K15785) (map . K15784) (make-vector . K15783) (make-string . K15782) (make-rectangular . K15781) (make-polar . K15780) (magnitude . K15779) (log . K15778) (list? . K15777) (list-tail . K15776) (list-ref . K15775) (list->vector . K15774) (list->string . K15773) (list . K15772) (length . K15771) (lcm . K15770) (integer? . K15769) (integer-valued? . K15768) (integer->char . K15767) (infinite? . K15766) (inexact? . K15765) (inexact . K15764) (imag-part . K15763) (gcd . K15762) (for-each . K15761) (floor . K15760) (finite? . K15759) (expt . K15758) (exp . K15757) (exact? . K15756) (exact-integer-sqrt . K15755) (exact . K15754) (even? . K15753) (error . K15752) (eqv? . K15751) (equal? . K15750) (eq? . K15749) (dynamic-wind . K15748) (div0-and-mod0 . K15747) (mod0 . K15746) (div0 . K15745) (div-and-mod . K15744) (mod . K15743) (div . K15742) (denominator . K15741) (cos . K15740) (cons . K15739) (complex? . K15738) (char? . K15737) (char>? . K15736) (char>=? . K15735) (char=? . K15734) (char<? . K15733) (char<=? . K15732) (char->integer . K15731) (ceiling . K15730) (call-with-values . K15729) (call/cc . K15728) (call-with-current-continuation . K15727) (cddddr . K15726) (cdddar . K15725) (cddadr . K15724) (cddaar . K15723) (cdaddr . K15722) (cdadar . K15721) (cdaadr . K15720) (cdaaar . K15719) (cadddr . K15718) (caddar . K15717) (cadadr . K15716) (cadaar . K15715) (caaddr . K15714) (caadar . K15713) (caaadr . K15712) (caaaar . K15711) (cdddr . K15710) (cddar . K15709) (cdadr . K15708) (cdaar . K15707) (caddr . K15706) (cadar . K15705) (caadr . K15704) (caaar . K15703) (cddr . K15702) (cdar . K15701) (cadr . K15700) (caar . K15699) (cdr . K15698) (car . K15697) (boolean? . K15696) (boolean=? . K15695) (atan . K15694) (assertion-violation . K15693) (asin . K15692) (apply . K15691) (append . K15690) (angle . K15689) (acos . K15688) (abs . K15687) (/ . K15686) (* . K15685) (- . K15684) (+ . K15683) (>= . K15682) (> . K15681) (= . K15680) (<= . K15679) (< . K15678) (unquote-splicing . K15627) (unquote . K15626) (_ . K15625) (else . K15624) (=> . K15623) (... . K15622) (assert . K15621) (cond . K15616) (let* . K15615) (let . K15614) (let*-values . K15613) (let-values . K15612) (identifier-syntax . K15611) (quasiquote . K15608) (syntax-rules . K15607) (case . K15602) (or . K15598) (and . K15597) (if . K15596) (letrec* . K15595) (letrec . K15594) (lambda . K15591) (quote . K15588) (letrec-syntax . K15586) (let-syntax . K15585) (set! . K15584) (begin . K15582) (define-syntax . K15580) (define . K15579)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16301 '(rnrs lists) '(6) '() '() '() '((remove . K16053) (remv . K16052) (remp . K16051) (remq . K16050) (partition . K16049) (memv . K16048) (memq . K16047) (memp . K16046) (member . K16045) (exists . K16044) (for-all . K16043) (fold-right . K16042) (fold-left . K16041) (find . K16040) (filter . K16039) (cons* . K16038) (assv . K16037) (assq . K16036) (assp . K16035) (assoc . K16034)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16302 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . K16144) (call-with-input-file . K16143) (write-char . K16142) (write . K16141) (with-output-to-file . K16140) (with-input-from-file . K16139) (read-char . K16138) (read . K16137) (peek-char . K16136) (open-output-file . K16135) (open-input-file . K16134) (newline . K16133) (display . K16132) (close-output-port . K16131) (close-input-port . K16130) (eof-object? . K16129) (eof-object . K16128) (current-error-port . K16127) (current-output-port . K16126) (current-input-port . K16125) (output-port? . K16124) (input-port? . K16123) (make-i/o-write-error . K14806) (make-i/o-read-error . K14785) (make-i/o-port-error . K14964) (make-i/o-invalid-position-error . K14828) (make-i/o-filename-error . K14854) (make-i/o-file-protection-error . K14879) (make-i/o-file-is-read-only-error . K14900) (make-i/o-file-does-not-exist-error . K14942) (make-i/o-file-already-exists-error . K14921) (make-i/o-error . K14764) (i/o-write-error? . K14808) (i/o-read-error? . K14787) (i/o-port-error? . K14968) (i/o-invalid-position-error? . K14832) (i/o-filename-error? . K14858) (i/o-file-protection-error? . K14881) (i/o-file-is-read-only-error? . K14902) (i/o-file-does-not-exist-error? . K14944) (i/o-file-already-exists-error? . K14923) (i/o-error? . K14766) (i/o-error-position . K14834) (i/o-error-port . K14970) (i/o-error-filename . K14860) (&i/o-port . K15672) (&i/o-file-does-not-exist . K15671) (&i/o-file-already-exists . K15670) (&i/o-file-is-read-only . K15669) (&i/o-file-protection . K15668) (&i/o-filename . K15667) (&i/o-invalid-position . K15666) (&i/o-write . K15665) (&i/o-read . K15664) (&i/o . K15663)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16303 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . K16081) (utf32->string . K16006) (utf16->string . K16005) (utf8->string . K16004) (uint-list->bytevector . K16003) (u8-list->bytevector . K16002) (string->utf8 . K16001) (string->utf32 . K16000) (string->utf16 . K15999) (sint-list->bytevector . K15998) (native-endianness . K15997) (bytevector? . K15996) (bytevector=? . K15995) (bytevector-uint-set! . K15994) (bytevector-uint-ref . K15993) (bytevector-u8-set! . K15992) (bytevector-u8-ref . K15991) (bytevector-u64-set! . K15990) (bytevector-u64-ref . K15989) (bytevector-u64-native-set! . K15988) (bytevector-u64-native-ref . K15987) (bytevector-u32-set! . K15986) (bytevector-u32-ref . K15985) (bytevector-u32-native-set! . K15984) (bytevector-u32-native-ref . K15983) (bytevector-u16-set! . K15982) (bytevector-u16-ref . K15981) (bytevector-u16-native-set! . K15980) (bytevector-u16-native-ref . K15979) (bytevector-sint-set! . K15978) (bytevector-sint-ref . K15977) (bytevector-s8-set! . K15976) (bytevector-s8-ref . K15975) (bytevector-s64-set! . K15974) (bytevector-s64-ref . K15973) (bytevector-s64-native-set! . K15972) (bytevector-s64-native-ref . K15971) (bytevector-s32-set! . K15970) (bytevector-s32-ref . K15969) (bytevector-s32-native-set! . K15968) (bytevector-s32-native-ref . K15967) (bytevector-s16-set! . K15966) (bytevector-s16-ref . K15965) (bytevector-s16-native-set! . K15964) (bytevector-s16-native-ref . K15963) (bytevector-length . K15962) (bytevector-ieee-single-ref . K15961) (bytevector-ieee-single-set! . K15960) (bytevector-ieee-single-native-set! . K15959) (bytevector-ieee-single-native-ref . K15958) (bytevector-ieee-double-set! . K15957) (bytevector-ieee-double-ref . K15956) (bytevector-ieee-double-native-set! . K15955) (bytevector-ieee-double-native-ref . K15954) (bytevector-fill! . K15953) (bytevector-copy! . K15952) (bytevector-copy . K15951) (bytevector->uint-list . K15950) (bytevector->u8-list . K15949) (bytevector->sint-list . K15948) (endianness . K15620)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16304 '(rnrs unicode) '(6) '() '() '() '((string-upcase . K16216) (string-titlecase . K16215) (string-normalize-nfkd . K16214) (string-normalize-nfkc . K16213) (string-normalize-nfd . K16212) (string-normalize-nfc . K16211) (string-foldcase . K16210) (string-downcase . K16209) (string-ci>? . K16208) (string-ci>=? . K16207) (string-ci=? . K16206) (string-ci<? . K16205) (string-ci<=? . K16204) (char-whitespace? . K16203) (char-upper-case? . K16202) (char-title-case? . K16201) (char-numeric? . K16200) (char-lower-case? . K16199) (char-general-category . K16198) (char-upcase . K16197) (char-titlecase . K16196) (char-foldcase . K16195) (char-downcase . K16194) (char-ci>? . K16193) (char-ci>=? . K16192) (char-ci=? . K16191) (char-ci<? . K16190) (char-ci<=? . K16189) (char-alphabetic? . K16188)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16305 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . K16027) (raise-continuable . K16026) (raise . K16025) (guard . K15632) (else . K15624) (=> . K15623)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16306 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . K15856) (bitwise-reverse-bit-field . K15855) (bitwise-length . K15854) (bitwise-if . K15853) (bitwise-first-bit-set . K15852) (bitwise-copy-bit-field . K15851) (bitwise-copy-bit . K15850) (bitwise-bit-set? . K15849) (bitwise-bit-field . K15848) (bitwise-bit-count . K15847) (bitwise-xor . K15846) (bitwise-ior . K15845) (bitwise-and . K15844) (bitwise-not . K15843) (bitwise-arithmetic-shift-right . K15842) (bitwise-arithmetic-shift-left . K15841) (bitwise-arithmetic-shift . K15840)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16307 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . K15901) (fxxor . K15900) (fxrotate-bit-field . K15899) (fxreverse-bit-field . K15898) (fxpositive? . K15897) (fxodd? . K15896) (fxnot . K15895) (fxnegative? . K15894) (fxmod0 . K15893) (fxmod . K15892) (fxmin . K15891) (fxmax . K15890) (fxlength . K15889) (fxior . K15888) (fxif . K15887) (fxfirst-bit-set . K15886) (fxeven? . K15885) (fxdiv0-and-mod0 . K15884) (fxdiv0 . K15883) (fxdiv-and-mod . K15882) (fxdiv . K15881) (fxcopy-bit-field . K15880) (fxcopy-bit . K15879) (fxbit-set? . K15878) (fxbit-field . K15877) (fxbit-count . K15876) (fxarithmetic-shift-right . K15875) (fxarithmetic-shift-left . K15874) (fxarithmetic-shift . K15873) (fxand . K15872) (fx>? . K15871) (fx>=? . K15870) (fx=? . K15869) (fx<? . K15868) (fx<=? . K15867) (fx-/carry . K15866) (fx- . K15865) (fx+/carry . K15864) (fx+ . K15863) (fx*/carry . K15862) (fx* . K15861) (greatest-fixnum . K15860) (least-fixnum . K15859) (fixnum-width . K15858) (fixnum? . K15857)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16308 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . K15059) (no-infinities-violation? . K15038) (make-no-nans-violation . K15057) (make-no-infinities-violation . K15036) (real->flonum . K15947) (flzero? . K15946) (fltruncate . K15945) (fltan . K15944) (flsqrt . K15943) (flsin . K15942) (flround . K15941) (flpositive? . K15940) (flonum? . K15939) (flodd? . K15938) (flnumerator . K15937) (flnegative? . K15936) (flnan? . K15935) (flmod0 . K15934) (flmod . K15933) (flmin . K15932) (flmax . K15931) (fllog . K15930) (flinteger? . K15929) (flinfinite? . K15928) (flfloor . K15927) (flfinite? . K15926) (flexpt . K15925) (flexp . K15924) (fleven? . K15923) (fldiv0-and-mod0 . K15922) (fldiv0 . K15921) (fldiv-and-mod . K15920) (fldiv . K15919) (fldenominator . K15918) (flcos . K15917) (flceiling . K15916) (flatan . K15915) (flasin . K15914) (flacos . K15913) (flabs . K15912) (fl>? . K15911) (fl>=? . K15910) (fl=? . K15909) (fl<? . K15908) (fl<=? . K15907) (fl/ . K15906) (fl- . K15905) (fl+ . K15904) (fl* . K15903) (fixnum->flonum . K15902) (&no-nans . K15676) (&no-infinities . K15675)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16309 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . K16165) (string-ci-hash . K16164) (string-hash . K16163) (equal-hash . K16162) (hashtable-equivalence-function . K16161) (make-hashtable . K16160) (hashtable-hash-function . K16159) (make-eqv-hashtable . K16158) (make-eq-hashtable . K16157) (hashtable? . K16156) (hashtable-update! . K16155) (hashtable-size . K16154) (hashtable-set! . K16153) (hashtable-ref . K16152) (hashtable-mutable? . K16151) (hashtable-keys . K16150) (hashtable-entries . K16149) (hashtable-delete! . K16148) (hashtable-copy . K16147) (hashtable-contains? . K16146) (hashtable-clear! . K16145)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16310 '(rnrs io ports) '(6) '() '() '() '((eof-object? . K16129) (eof-object . K16128) (current-error-port . K16127) (current-output-port . K16126) (current-input-port . K16125) (output-port? . K16124) (input-port? . K16123) (utf-8-codec . K16122) (utf-16-codec . K16121) (transcoder-error-handling-mode . K16120) (transcoder-eol-style . K16119) (transcoder-codec . K16118) (transcoded-port . K16117) (textual-port? . K16116) (string->bytevector . K16115) (standard-output-port . K16114) (standard-input-port . K16113) (standard-error-port . K16112) (set-port-position! . K16111) (put-u8 . K16110) (put-string . K16109) (put-datum . K16108) (put-char . K16107) (put-bytevector . K16106) (port? . K16105) (port-transcoder . K16104) (port-position . K16103) (port-has-set-port-position!? . K16102) (port-has-port-position? . K16101) (port-eof? . K16100) (output-port-buffer-mode . K16099) (open-string-output-port . K16098) (open-string-input-port . K16097) (open-file-output-port . K16096) (open-file-input/output-port . K16095) (open-file-input-port . K16094) (open-bytevector-output-port . K16093) (open-bytevector-input-port . K16092) (native-transcoder . K16091) (native-eol-style . K16090) (make-transcoder . K16089) (latin-1-codec . K16088) (make-i/o-write-error . K14806) (make-i/o-read-error . K14785) (make-i/o-port-error . K14964) (make-i/o-invalid-position-error . K14828) (make-i/o-filename-error . K14854) (make-i/o-file-protection-error . K14879) (make-i/o-file-is-read-only-error . K14900) (make-i/o-file-does-not-exist-error . K14942) (make-i/o-file-already-exists-error . K14921) (make-i/o-error . K14764) (make-i/o-encoding-error . K15011) (make-i/o-decoding-error . K14989) (make-custom-textual-output-port . K16087) (make-custom-textual-input/output-port . K16086) (make-custom-textual-input-port . K16085) (make-custom-binary-output-port . K16084) (make-custom-binary-input/output-port . K16083) (make-custom-binary-input-port . K16082) (lookahead-u8 . K16080) (lookahead-char . K16079) (i/o-write-error? . K14808) (i/o-read-error? . K14787) (i/o-port-error? . K14968) (i/o-invalid-position-error? . K14832) (i/o-filename-error? . K14858) (i/o-file-protection-error? . K14881) (i/o-file-is-read-only-error? . K14902) (i/o-file-does-not-exist-error? . K14944) (i/o-file-already-exists-error? . K14923) (i/o-error? . K14766) (i/o-error-position . K14834) (i/o-error-port . K14970) (i/o-error-filename . K14860) (i/o-encoding-error? . K15015) (i/o-encoding-error-char . K15017) (i/o-decoding-error? . K14991) (get-u8 . K16078) (get-string-n! . K16077) (get-string-n . K16076) (get-string-all . K16075) (get-line . K16074) (get-datum . K16073) (get-char . K16072) (get-bytevector-some . K16071) (get-bytevector-n! . K16070) (get-bytevector-n . K16069) (get-bytevector-all . K16068) (flush-output-port . K16067) (close-port . K16066) (call-with-string-output-port . K16033) (call-with-port . K16032) (call-with-bytevector-output-port . K16031) (bytevector->string . K16030) (buffer-mode? . K16029) (binary-port? . K16028) (&i/o-encoding . K15674) (&i/o-decoding . K15673) (&i/o-port . K15672) (&i/o-file-does-not-exist . K15671) (&i/o-file-already-exists . K15670) (&i/o-file-is-read-only . K15669) (&i/o-file-protection . K15668) (&i/o-filename . K15667) (&i/o-invalid-position . K15666) (&i/o-write . K15665) (&i/o-read . K15664) (&i/o . K15663) (error-handling-mode . K15636) (file-options . K15635) (buffer-mode . K15634) (eol-style . K15633)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16311 '(rnrs enums) '(6) '() '() '() '((make-enumeration . K16024) (enum-set=? . K16023) (enum-set-universe . K16022) (enum-set-union . K16021) (enum-set-subset? . K16020) (enum-set-projection . K16019) (enum-set-member? . K16018) (enum-set-intersection . K16017) (enum-set-indexer . K16016) (enum-set-difference . K16015) (enum-set-constructor . K16014) (enum-set-complement . K16013) (enum-set->list . K16012) (define-enumeration . K15647)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16312 '(rnrs conditions) '(6) '() '() '() '((who-condition? . K14628) (warning? . K14494) (violation? . K14557) (undefined-violation? . K14745) (syntax-violation? . K14720) (syntax-violation-subform . K14724) (syntax-violation-form . K14722) (syntax-violation . K7993) (simple-conditions . K16011) (serious-condition? . K14515) (non-continuable-violation? . K14651) (message-condition? . K14471) (make-who-condition . K14624) (make-warning . K14492) (make-violation . K14555) (make-undefined-violation . K14743) (make-syntax-violation . K14714) (make-serious-condition . K14513) (make-non-continuable-violation . K14649) (make-message-condition . K14467) (make-lexical-violation . K14691) (make-irritants-condition . K14598) (make-implementation-restriction-violation . K14670) (make-error . K14534) (make-assertion-violation . K14576) (lexical-violation? . K14693) (irritants-condition? . K14602) (implementation-restriction-violation? . K14672) (error? . K14536) (condition-who . K14630) (condition-predicate . K16010) (condition-message . K14473) (condition-irritants . K14604) (condition-accessor . K16009) (condition . K16008) (assertion-violation? . K14578) (condition? . K16007) (&undefined . K15662) (&syntax . K15661) (&lexical . K15660) (&implementation-restriction . K15659) (&non-continuable . K15658) (&who . K15657) (&irritants . K15656) (&assertion . K15655) (&violation . K15654) (&error . K15653) (&serious . K15652) (&warning . K15651) (&message . K15650) (&condition . K15649) (define-condition-type . K15648)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16313 '(rnrs records inspection) '(6) '() '() '() '((record? . K16180) (record-type-uid . K16179) (record-type-sealed? . K16178) (record-type-parent . K16177) (record-type-opaque? . K16176) (record-type-name . K16175) (record-type-generative? . K16174) (record-type-field-names . K16173) (record-rtd . K16172) (record-field-mutable? . K16171)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16314 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . K16187) (record-predicate . K16186) (record-mutator . K16185) (record-constructor . K16184) (record-accessor . K16183) (make-record-type-descriptor . K16182) (make-record-constructor-descriptor . K16181)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16315 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . K15646) (parent-rtd . K15645) (nongenerative . K15644) (opaque . K15643) (sealed . K15642) (protocol . K15641) (parent . K15640) (immutable . K15639) (mutable . K15638) (fields . K15637) (record-constructor-descriptor . K15604) (record-type-descriptor . K15603)) '() values values '#f '#f '#t '#f) (K6788@K6441@install-library 'K16316 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . K15063) (&no-nans-rtd . K15061) (&no-infinities-rcd . K15042) (&no-infinities-rtd . K15040) (&i/o-encoding-rcd . K15021) (&i/o-encoding-rtd . K15019) (&i/o-decoding-rcd . K14995) (&i/o-decoding-rtd . K14993) (&i/o-port-rcd . K14974) (&i/o-port-rtd . K14972) (&i/o-file-does-not-exist-rcd . K14948) (&i/o-file-does-not-exist-rtd . K14946) (&i/o-file-already-exists-rcd . K14927) (&i/o-file-already-exists-rtd . K14925) (&i/o-file-is-read-only-rcd . K14906) (&i/o-file-is-read-only-rtd . K14904) (&i/o-file-protection-rcd . K14885) (&i/o-file-protection-rtd . K14883) (&i/o-filename-rcd . K14864) (&i/o-filename-rtd . K14862) (&i/o-invalid-position-rcd . K14838) (&i/o-invalid-position-rtd . K14836) (&i/o-write-rcd . K14812) (&i/o-write-rtd . K14810) (&i/o-read-rcd . K14791) (&i/o-read-rtd . K14789) (&i/o-rcd . K14770) (&i/o-rtd . K14768) (&undefined-rcd . K14749) (&undefined-rtd . K14747) (&syntax-rcd . K14728) (&syntax-rtd . K14726) (&lexical-rcd . K14697) (&lexical-rtd . K14695) (&implementation-restriction-rcd . K14676) (&implementation-restriction-rtd . K14674) (&non-continuable-rcd . K14655) (&non-continuable-rtd . K14653) (&who-rcd . K14634) (&who-rtd . K14632) (&irritants-rcd . K14608) (&irritants-rtd . K14606) (&assertion-rcd . K14582) (&assertion-rtd . K14580) (&violation-rcd . K14561) (&violation-rtd . K14559) (&error-rcd . K14540) (&error-rtd . K14538) (&serious-rcd . K14519) (&serious-rtd . K14517) (&warning-rcd . K14498) (&warning-rtd . K14496) (&message-rcd . K14477) (&message-rtd . K14475) (&condition-rcd . K14386) (&condition-rtd . K14384) (syntax-error . K7989) (syntax-dispatch . K7760) (pretty-print . K16284) (eval-core . K16283) (set-symbol-value! . K16282) (symbol-value . K16281) (gensym . K5911) (void . K16280) (load . K15332) (interaction-environment . K8005) (char-ready? . K16279) (regexp? . K16278) (read-line . K16277) (ungensym . K16276) (alist->eq-hash-table . K16275) (assoc-ref . K16274) (print . K16273) (format . K16272) (host-os . K16271) (library-path . K6408) (standard-library-path . K16270) (file-newer? . K16269) (stat-mtime . K16268) (write-to-file . K16267) (file->list . K16266) (file->string . K16265) (digit->integer . K16264) (call-with-string-input-port . K16263) (call-with-string-io . K16262) (string-split . K16261) (bytevector-for-each . K16260) (string->regexp . K16259) (rxmatch . K16258) (regexp-replace-all . K16257) (hashtable-for-each . K16256) (call-process . K16255) (local-tz-offset . K16254) (microseconds . K16253) (readdir . K16252) (set-current-directory! . K16251) (expand-path . K16250) (current-directory . K16249) (%spawn . K16248) (%waitpid . K16247) (%ffi-supported? . K16246) (%ffi-pointer-ref . K16245) (%ffi-pointer->string . K16244) (%ffi-call->string-or-zero . K16243) (%ffi-call->double . K16242) (%ffi-call->void* . K16241) (%ffi-call->void . K16240) (%ffi-call->int . K16239) (%ffi-lookup . K16238) (%ffi-open . K16237) (%fork . K16236) (%pipe . K16235) (p . K16234) (open-output-string . K16233) (get-output-string . K16232) (get-environment-variables . K16231) (get-environment-variable . K16230) (get-timeofday . K16229) (get-command-line . K16228) (sys-display . K16227) (make-file-options . K16226) (source-info . K16225) (make-compiler-instruction . K16224) (make-instruction . K16223) (set-source-info! . K16222) (bignum? . K16221) (fast-equal? . K16220) (fasl-read . K16219) (fasl-write . K16218) (time-usage . K16217) (make-parameter . K5939) (string-upcase . K16216) (string-titlecase . K16215) (string-normalize-nfkd . K16214) (string-normalize-nfkc . K16213) (string-normalize-nfd . K16212) (string-normalize-nfc . K16211) (string-foldcase . K16210) (string-downcase . K16209) (string-ci>? . K16208) (string-ci>=? . K16207) (string-ci=? . K16206) (string-ci<? . K16205) (string-ci<=? . K16204) (char-whitespace? . K16203) (char-upper-case? . K16202) (char-title-case? . K16201) (char-numeric? . K16200) (char-lower-case? . K16199) (char-general-category . K16198) (char-upcase . K16197) (char-titlecase . K16196) (char-foldcase . K16195) (char-downcase . K16194) (char-ci>? . K16193) (char-ci>=? . K16192) (char-ci=? . K16191) (char-ci<? . K16190) (char-ci<=? . K16189) (char-alphabetic? . K16188) (make-variable-transformer . K7319) (identifier? . K7995) (generate-temporaries . K7975) (free-identifier=? . K7977) (syntax->datum . K7999) (datum->syntax . K7997) (bound-identifier=? . K7979) (record-type-descriptor? . K16187) (record-predicate . K16186) (record-mutator . K16185) (record-constructor . K16184) (record-accessor . K16183) (make-record-type-descriptor . K16182) (make-record-constructor-descriptor . K16181) (record? . K16180) (record-type-uid . K16179) (record-type-sealed? . K16178) (record-type-parent . K16177) (record-type-opaque? . K16176) (record-type-name . K16175) (record-type-generative? . K16174) (record-type-field-names . K16173) (record-rtd . K16172) (record-field-mutable? . K16171) (delete-file . K16170) (file-exists? . K16169) (vector-sort! . K16168) (vector-sort . K16167) (list-sort . K16166) (symbol-hash . K16165) (string-ci-hash . K16164) (string-hash . K16163) (equal-hash . K16162) (hashtable-equivalence-function . K16161) (make-hashtable . K16160) (hashtable-hash-function . K16159) (make-eqv-hashtable . K16158) (make-eq-hashtable . K16157) (hashtable? . K16156) (hashtable-update! . K16155) (hashtable-size . K16154) (hashtable-set! . K16153) (hashtable-ref . K16152) (hashtable-mutable? . K16151) (hashtable-keys . K16150) (hashtable-entries . K16149) (hashtable-delete! . K16148) (hashtable-copy . K16147) (hashtable-contains? . K16146) (hashtable-clear! . K16145) (call-with-output-file . K16144) (call-with-input-file . K16143) (write-char . K16142) (write . K16141) (with-output-to-file . K16140) (with-input-from-file . K16139) (read-char . K16138) (read . K16137) (peek-char . K16136) (open-output-file . K16135) (open-input-file . K16134) (newline . K16133) (display . K16132) (close-output-port . K16131) (close-input-port . K16130) (eof-object? . K16129) (eof-object . K16128) (current-error-port . K16127) (current-output-port . K16126) (current-input-port . K16125) (output-port? . K16124) (input-port? . K16123) (utf-8-codec . K16122) (utf-16-codec . K16121) (transcoder-error-handling-mode . K16120) (transcoder-eol-style . K16119) (transcoder-codec . K16118) (transcoded-port . K16117) (textual-port? . K16116) (string->bytevector . K16115) (standard-output-port . K16114) (standard-input-port . K16113) (standard-error-port . K16112) (set-port-position! . K16111) (put-u8 . K16110) (put-string . K16109) (put-datum . K16108) (put-char . K16107) (put-bytevector . K16106) (port? . K16105) (port-transcoder . K16104) (port-position . K16103) (port-has-set-port-position!? . K16102) (port-has-port-position? . K16101) (port-eof? . K16100) (output-port-buffer-mode . K16099) (open-string-output-port . K16098) (open-string-input-port . K16097) (open-file-output-port . K16096) (open-file-input/output-port . K16095) (open-file-input-port . K16094) (open-bytevector-output-port . K16093) (open-bytevector-input-port . K16092) (native-transcoder . K16091) (native-eol-style . K16090) (make-transcoder . K16089) (latin-1-codec . K16088) (make-i/o-write-error . K14806) (make-i/o-read-error . K14785) (make-i/o-port-error . K14964) (make-i/o-invalid-position-error . K14828) (make-i/o-filename-error . K14854) (make-i/o-file-protection-error . K14879) (make-i/o-file-is-read-only-error . K14900) (make-i/o-file-does-not-exist-error . K14942) (make-i/o-file-already-exists-error . K14921) (make-i/o-error . K14764) (make-i/o-encoding-error . K15011) (make-i/o-decoding-error . K14989) (make-custom-textual-output-port . K16087) (make-custom-textual-input/output-port . K16086) (make-custom-textual-input-port . K16085) (make-custom-binary-output-port . K16084) (make-custom-binary-input/output-port . K16083) (make-custom-binary-input-port . K16082) (make-bytevector . K16081) (lookahead-u8 . K16080) (lookahead-char . K16079) (i/o-write-error? . K14808) (i/o-read-error? . K14787) (i/o-port-error? . K14968) (i/o-invalid-position-error? . K14832) (i/o-filename-error? . K14858) (i/o-file-protection-error? . K14881) (i/o-file-is-read-only-error? . K14902) (i/o-file-does-not-exist-error? . K14944) (i/o-file-already-exists-error? . K14923) (i/o-error? . K14766) (i/o-error-position . K14834) (i/o-error-port . K14970) (i/o-error-filename . K14860) (i/o-encoding-error? . K15015) (i/o-encoding-error-char . K15017) (i/o-decoding-error? . K14991) (get-u8 . K16078) (get-string-n! . K16077) (get-string-n . K16076) (get-string-all . K16075) (get-line . K16074) (get-datum . K16073) (get-char . K16072) (get-bytevector-some . K16071) (get-bytevector-n! . K16070) (get-bytevector-n . K16069) (get-bytevector-all . K16068) (flush-output-port . K16067) (close-port . K16066) (scheme-report-environment . K7957) (quotient . K16065) (null-environment . K7955) (remainder . K16064) (modulo . K16063) (inexact->exact . K16062) (force . K16061) (exact->inexact . K16060) (make-promise . K16059) (exit . K16058) (command-line . K15326) (string-fill! . K16057) (string-set! . K16056) (set-cdr! . K16055) (set-car! . K16054) (remove . K16053) (remv . K16052) (remp . K16051) (remq . K16050) (partition . K16049) (memv . K16048) (memq . K16047) (memp . K16046) (member . K16045) (exists . K16044) (for-all . K16043) (fold-right . K16042) (fold-left . K16041) (find . K16040) (filter . K16039) (cons* . K16038) (assv . K16037) (assq . K16036) (assp . K16035) (assoc . K16034) (call-with-string-output-port . K16033) (call-with-port . K16032) (call-with-bytevector-output-port . K16031) (bytevector->string . K16030) (buffer-mode? . K16029) (binary-port? . K16028) (with-exception-handler . K16027) (raise-continuable . K16026) (raise . K16025) (eval . K7961) (environment . K7953) (make-enumeration . K16024) (enum-set=? . K16023) (enum-set-universe . K16022) (enum-set-union . K16021) (enum-set-subset? . K16020) (enum-set-projection . K16019) (enum-set-member? . K16018) (enum-set-intersection . K16017) (enum-set-indexer . K16016) (enum-set-difference . K16015) (enum-set-constructor . K16014) (enum-set-complement . K16013) (enum-set->list . K16012) (who-condition? . K14628) (warning? . K14494) (violation? . K14557) (undefined-violation? . K14745) (syntax-violation? . K14720) (syntax-violation-subform . K14724) (syntax-violation-form . K14722) (syntax-violation . K7993) (simple-conditions . K16011) (serious-condition? . K14515) (non-continuable-violation? . K14651) (message-condition? . K14471) (make-who-condition . K14624) (make-warning . K14492) (make-violation . K14555) (make-undefined-violation . K14743) (make-syntax-violation . K14714) (make-serious-condition . K14513) (make-non-continuable-violation . K14649) (make-message-condition . K14467) (make-lexical-violation . K14691) (make-irritants-condition . K14598) (make-implementation-restriction-violation . K14670) (make-error . K14534) (make-assertion-violation . K14576) (lexical-violation? . K14693) (irritants-condition? . K14602) (implementation-restriction-violation? . K14672) (error? . K14536) (condition-who . K14630) (condition-predicate . K16010) (condition-message . K14473) (condition-irritants . K14604) (condition-accessor . K16009) (condition . K16008) (assertion-violation? . K14578) (condition? . K16007) (utf32->string . K16006) (utf16->string . K16005) (utf8->string . K16004) (uint-list->bytevector . K16003) (u8-list->bytevector . K16002) (string->utf8 . K16001) (string->utf32 . K16000) (string->utf16 . K15999) (sint-list->bytevector . K15998) (native-endianness . K15997) (bytevector? . K15996) (bytevector=? . K15995) (bytevector-uint-set! . K15994) (bytevector-uint-ref . K15993) (bytevector-u8-set! . K15992) (bytevector-u8-ref . K15991) (bytevector-u64-set! . K15990) (bytevector-u64-ref . K15989) (bytevector-u64-native-set! . K15988) (bytevector-u64-native-ref . K15987) (bytevector-u32-set! . K15986) (bytevector-u32-ref . K15985) (bytevector-u32-native-set! . K15984) (bytevector-u32-native-ref . K15983) (bytevector-u16-set! . K15982) (bytevector-u16-ref . K15981) (bytevector-u16-native-set! . K15980) (bytevector-u16-native-ref . K15979) (bytevector-sint-set! . K15978) (bytevector-sint-ref . K15977) (bytevector-s8-set! . K15976) (bytevector-s8-ref . K15975) (bytevector-s64-set! . K15974) (bytevector-s64-ref . K15973) (bytevector-s64-native-set! . K15972) (bytevector-s64-native-ref . K15971) (bytevector-s32-set! . K15970) (bytevector-s32-ref . K15969) (bytevector-s32-native-set! . K15968) (bytevector-s32-native-ref . K15967) (bytevector-s16-set! . K15966) (bytevector-s16-ref . K15965) (bytevector-s16-native-set! . K15964) (bytevector-s16-native-ref . K15963) (bytevector-length . K15962) (bytevector-ieee-single-ref . K15961) (bytevector-ieee-single-set! . K15960) (bytevector-ieee-single-native-set! . K15959) (bytevector-ieee-single-native-ref . K15958) (bytevector-ieee-double-set! . K15957) (bytevector-ieee-double-ref . K15956) (bytevector-ieee-double-native-set! . K15955) (bytevector-ieee-double-native-ref . K15954) (bytevector-fill! . K15953) (bytevector-copy! . K15952) (bytevector-copy . K15951) (bytevector->uint-list . K15950) (bytevector->u8-list . K15949) (bytevector->sint-list . K15948) (no-nans-violation? . K15059) (no-infinities-violation? . K15038) (make-no-nans-violation . K15057) (make-no-infinities-violation . K15036) (real->flonum . K15947) (flzero? . K15946) (fltruncate . K15945) (fltan . K15944) (flsqrt . K15943) (flsin . K15942) (flround . K15941) (flpositive? . K15940) (flonum? . K15939) (flodd? . K15938) (flnumerator . K15937) (flnegative? . K15936) (flnan? . K15935) (flmod0 . K15934) (flmod . K15933) (flmin . K15932) (flmax . K15931) (fllog . K15930) (flinteger? . K15929) (flinfinite? . K15928) (flfloor . K15927) (flfinite? . K15926) (flexpt . K15925) (flexp . K15924) (fleven? . K15923) (fldiv0-and-mod0 . K15922) (fldiv0 . K15921) (fldiv-and-mod . K15920) (fldiv . K15919) (fldenominator . K15918) (flcos . K15917) (flceiling . K15916) (flatan . K15915) (flasin . K15914) (flacos . K15913) (flabs . K15912) (fl>? . K15911) (fl>=? . K15910) (fl=? . K15909) (fl<? . K15908) (fl<=? . K15907) (fl/ . K15906) (fl- . K15905) (fl+ . K15904) (fl* . K15903) (fixnum->flonum . K15902) (fxzero? . K15901) (fxxor . K15900) (fxrotate-bit-field . K15899) (fxreverse-bit-field . K15898) (fxpositive? . K15897) (fxodd? . K15896) (fxnot . K15895) (fxnegative? . K15894) (fxmod0 . K15893) (fxmod . K15892) (fxmin . K15891) (fxmax . K15890) (fxlength . K15889) (fxior . K15888) (fxif . K15887) (fxfirst-bit-set . K15886) (fxeven? . K15885) (fxdiv0-and-mod0 . K15884) (fxdiv0 . K15883) (fxdiv-and-mod . K15882) (fxdiv . K15881) (fxcopy-bit-field . K15880) (fxcopy-bit . K15879) (fxbit-set? . K15878) (fxbit-field . K15877) (fxbit-count . K15876) (fxarithmetic-shift-right . K15875) (fxarithmetic-shift-left . K15874) (fxarithmetic-shift . K15873) (fxand . K15872) (fx>? . K15871) (fx>=? . K15870) (fx=? . K15869) (fx<? . K15868) (fx<=? . K15867) (fx-/carry . K15866) (fx- . K15865) (fx+/carry . K15864) (fx+ . K15863) (fx*/carry . K15862) (fx* . K15861) (greatest-fixnum . K15860) (least-fixnum . K15859) (fixnum-width . K15858) (fixnum? . K15857) (bitwise-rotate-bit-field . K15856) (bitwise-reverse-bit-field . K15855) (bitwise-length . K15854) (bitwise-if . K15853) (bitwise-first-bit-set . K15852) (bitwise-copy-bit-field . K15851) (bitwise-copy-bit . K15850) (bitwise-bit-set? . K15849) (bitwise-bit-field . K15848) (bitwise-bit-count . K15847) (bitwise-xor . K15846) (bitwise-ior . K15845) (bitwise-and . K15844) (bitwise-not . K15843) (bitwise-arithmetic-shift-right . K15842) (bitwise-arithmetic-shift-left . K15841) (bitwise-arithmetic-shift . K15840) (zero? . K15839) (vector? . K15838) (vector-set! . K15837) (vector-ref . K15836) (vector-map . K15835) (vector-length . K15834) (vector-for-each . K15833) (vector-fill! . K15832) (vector->list . K15831) (vector . K15830) (values . K15829) (truncate . K15828) (tan . K15827) (symbol? . K15826) (symbol=? . K15825) (symbol->string . K15824) (substring . K15823) (string? . K15822) (string>? . K15821) (string>=? . K15820) (string=? . K15819) (string<? . K15818) (string<=? . K15817) (string-ref . K15816) (string-length . K15815) (string-for-each . K15814) (string-copy . K15813) (string-append . K15812) (string->symbol . K15811) (string->number . K15810) (string->list . K15809) (string . K15808) (sqrt . K15807) (sin . K15806) (round . K15805) (reverse . K15804) (real? . K15803) (real-valued? . K15802) (real-part . K15801) (rationalize . K15800) (rational? . K15799) (rational-valued? . K15798) (procedure? . K15797) (positive? . K15796) (pair? . K15795) (odd? . K15794) (numerator . K15793) (number? . K15792) (number->string . K15791) (null? . K15790) (not . K15789) (negative? . K15788) (nan? . K15787) (min . K15786) (max . K15785) (map . K15784) (make-vector . K15783) (make-string . K15782) (make-rectangular . K15781) (make-polar . K15780) (magnitude . K15779) (log . K15778) (list? . K15777) (list-tail . K15776) (list-ref . K15775) (list->vector . K15774) (list->string . K15773) (list . K15772) (length . K15771) (lcm . K15770) (integer? . K15769) (integer-valued? . K15768) (integer->char . K15767) (infinite? . K15766) (inexact? . K15765) (inexact . K15764) (imag-part . K15763) (gcd . K15762) (for-each . K15761) (floor . K15760) (finite? . K15759) (expt . K15758) (exp . K15757) (exact? . K15756) (exact-integer-sqrt . K15755) (exact . K15754) (even? . K15753) (error . K15752) (eqv? . K15751) (equal? . K15750) (eq? . K15749) (dynamic-wind . K15748) (div0-and-mod0 . K15747) (mod0 . K15746) (div0 . K15745) (div-and-mod . K15744) (mod . K15743) (div . K15742) (denominator . K15741) (cos . K15740) (cons . K15739) (complex? . K15738) (char? . K15737) (char>? . K15736) (char>=? . K15735) (char=? . K15734) (char<? . K15733) (char<=? . K15732) (char->integer . K15731) (ceiling . K15730) (call-with-values . K15729) (call/cc . K15728) (call-with-current-continuation . K15727) (cddddr . K15726) (cdddar . K15725) (cddadr . K15724) (cddaar . K15723) (cdaddr . K15722) (cdadar . K15721) (cdaadr . K15720) (cdaaar . K15719) (cadddr . K15718) (caddar . K15717) (cadadr . K15716) (cadaar . K15715) (caaddr . K15714) (caadar . K15713) (caaadr . K15712) (caaaar . K15711) (cdddr . K15710) (cddar . K15709) (cdadr . K15708) (cdaar . K15707) (caddr . K15706) (cadar . K15705) (caadr . K15704) (caaar . K15703) (cddr . K15702) (cdar . K15701) (cadr . K15700) (caar . K15699) (cdr . K15698) (car . K15697) (boolean? . K15696) (boolean=? . K15695) (atan . K15694) (assertion-violation . K15693) (asin . K15692) (apply . K15691) (append . K15690) (angle . K15689) (acos . K15688) (abs . K15687) (/ . K15686) (* . K15685) (- . K15684) (+ . K15683) (>= . K15682) (> . K15681) (= . K15680) (<= . K15679) (< . K15678) (library . K15677) (&no-nans . K15676) (&no-infinities . K15675) (&i/o-encoding . K15674) (&i/o-decoding . K15673) (&i/o-port . K15672) (&i/o-file-does-not-exist . K15671) (&i/o-file-already-exists . K15670) (&i/o-file-is-read-only . K15669) (&i/o-file-protection . K15668) (&i/o-filename . K15667) (&i/o-invalid-position . K15666) (&i/o-write . K15665) (&i/o-read . K15664) (&i/o . K15663) (&undefined . K15662) (&syntax . K15661) (&lexical . K15660) (&implementation-restriction . K15659) (&non-continuable . K15658) (&who . K15657) (&irritants . K15656) (&assertion . K15655) (&violation . K15654) (&error . K15653) (&serious . K15652) (&warning . K15651) (&message . K15650) (&condition . K15649) (define-condition-type . K15648) (define-enumeration . K15647) (define-record-type . K15646) (parent-rtd . K15645) (nongenerative . K15644) (opaque . K15643) (sealed . K15642) (protocol . K15641) (parent . K15640) (immutable . K15639) (mutable . K15638) (fields . K15637) (error-handling-mode . K15636) (file-options . K15635) (buffer-mode . K15634) (eol-style . K15633) (guard . K15632) (trace-define . K15631) (trace-lambda . K15630) (unsyntax-splicing . K15629) (unsyntax . K15628) (unquote-splicing . K15627) (unquote . K15626) (_ . K15625) (else . K15624) (=> . K15623) (... . K15622) (assert . K15621) (endianness . K15620) (delay . K15619) (time . K15618) (do . K15617) (cond . K15616) (let* . K15615) (let . K15614) (let*-values . K15613) (let-values . K15612) (identifier-syntax . K15611) (with-syntax . K15610) (quasisyntax . K15609) (quasiquote . K15608) (syntax-rules . K15607) (include . K15606) (define-struct . K15605) (record-constructor-descriptor . K15604) (record-type-descriptor . K15603) (case . K15602) (parameterize . K15601) (unless . K15600) (when . K15599) (or . K15598) (and . K15597) (if . K15596) (letrec* . K15595) (letrec . K15594) (type-descriptor . K15593) (case-lambda . K15592) (lambda . K15591) (syntax . K15590) (syntax-case . K15589) (quote . K15588) (foreign-call . K15587) (letrec-syntax . K15586) (let-syntax . K15585) (set! . K15584) (import . K15583) (begin . K15582) (module . K15581) (define-syntax . K15580) (define . K15579)) '((K15063 core-prim . &no-nans-rcd) (K15061 core-prim . &no-nans-rtd) (K15042 core-prim . &no-infinities-rcd) (K15040 core-prim . &no-infinities-rtd) (K15021 core-prim . &i/o-encoding-rcd) (K15019 core-prim . &i/o-encoding-rtd) (K14995 core-prim . &i/o-decoding-rcd) (K14993 core-prim . &i/o-decoding-rtd) (K14974 core-prim . &i/o-port-rcd) (K14972 core-prim . &i/o-port-rtd) (K14948 core-prim . &i/o-file-does-not-exist-rcd) (K14946 core-prim . &i/o-file-does-not-exist-rtd) (K14927 core-prim . &i/o-file-already-exists-rcd) (K14925 core-prim . &i/o-file-already-exists-rtd) (K14906 core-prim . &i/o-file-is-read-only-rcd) (K14904 core-prim . &i/o-file-is-read-only-rtd) (K14885 core-prim . &i/o-file-protection-rcd) (K14883 core-prim . &i/o-file-protection-rtd) (K14864 core-prim . &i/o-filename-rcd) (K14862 core-prim . &i/o-filename-rtd) (K14838 core-prim . &i/o-invalid-position-rcd) (K14836 core-prim . &i/o-invalid-position-rtd) (K14812 core-prim . &i/o-write-rcd) (K14810 core-prim . &i/o-write-rtd) (K14791 core-prim . &i/o-read-rcd) (K14789 core-prim . &i/o-read-rtd) (K14770 core-prim . &i/o-rcd) (K14768 core-prim . &i/o-rtd) (K14749 core-prim . &undefined-rcd) (K14747 core-prim . &undefined-rtd) (K14728 core-prim . &syntax-rcd) (K14726 core-prim . &syntax-rtd) (K14697 core-prim . &lexical-rcd) (K14695 core-prim . &lexical-rtd) (K14676 core-prim . &implementation-restriction-rcd) (K14674 core-prim . &implementation-restriction-rtd) (K14655 core-prim . &non-continuable-rcd) (K14653 core-prim . &non-continuable-rtd) (K14634 core-prim . &who-rcd) (K14632 core-prim . &who-rtd) (K14608 core-prim . &irritants-rcd) (K14606 core-prim . &irritants-rtd) (K14582 core-prim . &assertion-rcd) (K14580 core-prim . &assertion-rtd) (K14561 core-prim . &violation-rcd) (K14559 core-prim . &violation-rtd) (K14540 core-prim . &error-rcd) (K14538 core-prim . &error-rtd) (K14519 core-prim . &serious-rcd) (K14517 core-prim . &serious-rtd) (K14498 core-prim . &warning-rcd) (K14496 core-prim . &warning-rtd) (K14477 core-prim . &message-rcd) (K14475 core-prim . &message-rtd) (K14386 core-prim . &condition-rcd) (K14384 core-prim . &condition-rtd) (K7989 core-prim . syntax-error) (K7760 core-prim . syntax-dispatch) (K16284 core-prim . pretty-print) (K16283 core-prim . eval-core) (K16282 core-prim . set-symbol-value!) (K16281 core-prim . symbol-value) (K5911 core-prim . gensym) (K16280 core-prim . void) (K15332 core-prim . load) (K8005 core-prim . interaction-environment) (K16279 core-prim . char-ready?) (K16278 core-prim . regexp?) (K16277 core-prim . read-line) (K16276 core-prim . ungensym) (K16275 core-prim . alist->eq-hash-table) (K16274 core-prim . assoc-ref) (K16273 core-prim . print) (K16272 core-prim . format) (K16271 core-prim . host-os) (K6408 core-prim . library-path) (K16270 core-prim . standard-library-path) (K16269 core-prim . file-newer?) (K16268 core-prim . stat-mtime) (K16267 core-prim . write-to-file) (K16266 core-prim . file->list) (K16265 core-prim . file->string) (K16264 core-prim . digit->integer) (K16263 core-prim . call-with-string-input-port) (K16262 core-prim . call-with-string-io) (K16261 core-prim . string-split) (K16260 core-prim . bytevector-for-each) (K16259 core-prim . string->regexp) (K16258 core-prim . rxmatch) (K16257 core-prim . regexp-replace-all) (K16256 core-prim . hashtable-for-each) (K16255 core-prim . call-process) (K16254 core-prim . local-tz-offset) (K16253 core-prim . microseconds) (K16252 core-prim . readdir) (K16251 core-prim . set-current-directory!) (K16250 core-prim . expand-path) (K16249 core-prim . current-directory) (K16248 core-prim . %spawn) (K16247 core-prim . %waitpid) (K16246 core-prim . %ffi-supported?) (K16245 core-prim . %ffi-pointer-ref) (K16244 core-prim . %ffi-pointer->string) (K16243 core-prim . %ffi-call->string-or-zero) (K16242 core-prim . %ffi-call->double) (K16241 core-prim . %ffi-call->void*) (K16240 core-prim . %ffi-call->void) (K16239 core-prim . %ffi-call->int) (K16238 core-prim . %ffi-lookup) (K16237 core-prim . %ffi-open) (K16236 core-prim . %fork) (K16235 core-prim . %pipe) (K16234 core-prim . p) (K16233 core-prim . open-output-string) (K16232 core-prim . get-output-string) (K16231 core-prim . get-environment-variables) (K16230 core-prim . get-environment-variable) (K16229 core-prim . get-timeofday) (K16228 core-prim . get-command-line) (K16227 core-prim . sys-display) (K16226 core-prim . make-file-options) (K16225 core-prim . source-info) (K16224 core-prim . make-compiler-instruction) (K16223 core-prim . make-instruction) (K16222 core-prim . set-source-info!) (K16221 core-prim . bignum?) (K16220 core-prim . fast-equal?) (K16219 core-prim . fasl-read) (K16218 core-prim . fasl-write) (K16217 core-prim . time-usage) (K5939 core-prim . make-parameter) (K16216 core-prim . string-upcase) (K16215 core-prim . string-titlecase) (K16214 core-prim . string-normalize-nfkd) (K16213 core-prim . string-normalize-nfkc) (K16212 core-prim . string-normalize-nfd) (K16211 core-prim . string-normalize-nfc) (K16210 core-prim . string-foldcase) (K16209 core-prim . string-downcase) (K16208 core-prim . string-ci>?) (K16207 core-prim . string-ci>=?) (K16206 core-prim . string-ci=?) (K16205 core-prim . string-ci<?) (K16204 core-prim . string-ci<=?) (K16203 core-prim . char-whitespace?) (K16202 core-prim . char-upper-case?) (K16201 core-prim . char-title-case?) (K16200 core-prim . char-numeric?) (K16199 core-prim . char-lower-case?) (K16198 core-prim . char-general-category) (K16197 core-prim . char-upcase) (K16196 core-prim . char-titlecase) (K16195 core-prim . char-foldcase) (K16194 core-prim . char-downcase) (K16193 core-prim . char-ci>?) (K16192 core-prim . char-ci>=?) (K16191 core-prim . char-ci=?) (K16190 core-prim . char-ci<?) (K16189 core-prim . char-ci<=?) (K16188 core-prim . char-alphabetic?) (K7319 core-prim . make-variable-transformer) (K7995 core-prim . identifier?) (K7975 core-prim . generate-temporaries) (K7977 core-prim . free-identifier=?) (K7999 core-prim . syntax->datum) (K7997 core-prim . datum->syntax) (K7979 core-prim . bound-identifier=?) (K16187 core-prim . record-type-descriptor?) (K16186 core-prim . record-predicate) (K16185 core-prim . record-mutator) (K16184 core-prim . record-constructor) (K16183 core-prim . record-accessor) (K16182 core-prim . make-record-type-descriptor) (K16181 core-prim . make-record-constructor-descriptor) (K16180 core-prim . record?) (K16179 core-prim . record-type-uid) (K16178 core-prim . record-type-sealed?) (K16177 core-prim . record-type-parent) (K16176 core-prim . record-type-opaque?) (K16175 core-prim . record-type-name) (K16174 core-prim . record-type-generative?) (K16173 core-prim . record-type-field-names) (K16172 core-prim . record-rtd) (K16171 core-prim . record-field-mutable?) (K16170 core-prim . delete-file) (K16169 core-prim . file-exists?) (K16168 core-prim . vector-sort!) (K16167 core-prim . vector-sort) (K16166 core-prim . list-sort) (K16165 core-prim . symbol-hash) (K16164 core-prim . string-ci-hash) (K16163 core-prim . string-hash) (K16162 core-prim . equal-hash) (K16161 core-prim . hashtable-equivalence-function) (K16160 core-prim . make-hashtable) (K16159 core-prim . hashtable-hash-function) (K16158 core-prim . make-eqv-hashtable) (K16157 core-prim . make-eq-hashtable) (K16156 core-prim . hashtable?) (K16155 core-prim . hashtable-update!) (K16154 core-prim . hashtable-size) (K16153 core-prim . hashtable-set!) (K16152 core-prim . hashtable-ref) (K16151 core-prim . hashtable-mutable?) (K16150 core-prim . hashtable-keys) (K16149 core-prim . hashtable-entries) (K16148 core-prim . hashtable-delete!) (K16147 core-prim . hashtable-copy) (K16146 core-prim . hashtable-contains?) (K16145 core-prim . hashtable-clear!) (K16144 core-prim . call-with-output-file) (K16143 core-prim . call-with-input-file) (K16142 core-prim . write-char) (K16141 core-prim . write) (K16140 core-prim . with-output-to-file) (K16139 core-prim . with-input-from-file) (K16138 core-prim . read-char) (K16137 core-prim . read) (K16136 core-prim . peek-char) (K16135 core-prim . open-output-file) (K16134 core-prim . open-input-file) (K16133 core-prim . newline) (K16132 core-prim . display) (K16131 core-prim . close-output-port) (K16130 core-prim . close-input-port) (K16129 core-prim . eof-object?) (K16128 core-prim . eof-object) (K16127 core-prim . current-error-port) (K16126 core-prim . current-output-port) (K16125 core-prim . current-input-port) (K16124 core-prim . output-port?) (K16123 core-prim . input-port?) (K16122 core-prim . utf-8-codec) (K16121 core-prim . utf-16-codec) (K16120 core-prim . transcoder-error-handling-mode) (K16119 core-prim . transcoder-eol-style) (K16118 core-prim . transcoder-codec) (K16117 core-prim . transcoded-port) (K16116 core-prim . textual-port?) (K16115 core-prim . string->bytevector) (K16114 core-prim . standard-output-port) (K16113 core-prim . standard-input-port) (K16112 core-prim . standard-error-port) (K16111 core-prim . set-port-position!) (K16110 core-prim . put-u8) (K16109 core-prim . put-string) (K16108 core-prim . put-datum) (K16107 core-prim . put-char) (K16106 core-prim . put-bytevector) (K16105 core-prim . port?) (K16104 core-prim . port-transcoder) (K16103 core-prim . port-position) (K16102 core-prim . port-has-set-port-position!?) (K16101 core-prim . port-has-port-position?) (K16100 core-prim . port-eof?) (K16099 core-prim . output-port-buffer-mode) (K16098 core-prim . open-string-output-port) (K16097 core-prim . open-string-input-port) (K16096 core-prim . open-file-output-port) (K16095 core-prim . open-file-input/output-port) (K16094 core-prim . open-file-input-port) (K16093 core-prim . open-bytevector-output-port) (K16092 core-prim . open-bytevector-input-port) (K16091 core-prim . native-transcoder) (K16090 core-prim . native-eol-style) (K16089 core-prim . make-transcoder) (K16088 core-prim . latin-1-codec) (K14806 core-prim . make-i/o-write-error) (K14785 core-prim . make-i/o-read-error) (K14964 core-prim . make-i/o-port-error) (K14828 core-prim . make-i/o-invalid-position-error) (K14854 core-prim . make-i/o-filename-error) (K14879 core-prim . make-i/o-file-protection-error) (K14900 core-prim . make-i/o-file-is-read-only-error) (K14942 core-prim . make-i/o-file-does-not-exist-error) (K14921 core-prim . make-i/o-file-already-exists-error) (K14764 core-prim . make-i/o-error) (K15011 core-prim . make-i/o-encoding-error) (K14989 core-prim . make-i/o-decoding-error) (K16087 core-prim . make-custom-textual-output-port) (K16086 core-prim . make-custom-textual-input/output-port) (K16085 core-prim . make-custom-textual-input-port) (K16084 core-prim . make-custom-binary-output-port) (K16083 core-prim . make-custom-binary-input/output-port) (K16082 core-prim . make-custom-binary-input-port) (K16081 core-prim . make-bytevector) (K16080 core-prim . lookahead-u8) (K16079 core-prim . lookahead-char) (K14808 core-prim . i/o-write-error?) (K14787 core-prim . i/o-read-error?) (K14968 core-prim . i/o-port-error?) (K14832 core-prim . i/o-invalid-position-error?) (K14858 core-prim . i/o-filename-error?) (K14881 core-prim . i/o-file-protection-error?) (K14902 core-prim . i/o-file-is-read-only-error?) (K14944 core-prim . i/o-file-does-not-exist-error?) (K14923 core-prim . i/o-file-already-exists-error?) (K14766 core-prim . i/o-error?) (K14834 core-prim . i/o-error-position) (K14970 core-prim . i/o-error-port) (K14860 core-prim . i/o-error-filename) (K15015 core-prim . i/o-encoding-error?) (K15017 core-prim . i/o-encoding-error-char) (K14991 core-prim . i/o-decoding-error?) (K16078 core-prim . get-u8) (K16077 core-prim . get-string-n!) (K16076 core-prim . get-string-n) (K16075 core-prim . get-string-all) (K16074 core-prim . get-line) (K16073 core-prim . get-datum) (K16072 core-prim . get-char) (K16071 core-prim . get-bytevector-some) (K16070 core-prim . get-bytevector-n!) (K16069 core-prim . get-bytevector-n) (K16068 core-prim . get-bytevector-all) (K16067 core-prim . flush-output-port) (K16066 core-prim . close-port) (K7957 core-prim . scheme-report-environment) (K16065 core-prim . quotient) (K7955 core-prim . null-environment) (K16064 core-prim . remainder) (K16063 core-prim . modulo) (K16062 core-prim . inexact->exact) (K16061 core-prim . force) (K16060 core-prim . exact->inexact) (K16059 core-prim . make-promise) (K16058 core-prim . exit) (K15326 core-prim . command-line) (K16057 core-prim . string-fill!) (K16056 core-prim . string-set!) (K16055 core-prim . set-cdr!) (K16054 core-prim . set-car!) (K16053 core-prim . remove) (K16052 core-prim . remv) (K16051 core-prim . remp) (K16050 core-prim . remq) (K16049 core-prim . partition) (K16048 core-prim . memv) (K16047 core-prim . memq) (K16046 core-prim . memp) (K16045 core-prim . member) (K16044 core-prim . exists) (K16043 core-prim . for-all) (K16042 core-prim . fold-right) (K16041 core-prim . fold-left) (K16040 core-prim . find) (K16039 core-prim . filter) (K16038 core-prim . cons*) (K16037 core-prim . assv) (K16036 core-prim . assq) (K16035 core-prim . assp) (K16034 core-prim . assoc) (K16033 core-prim . call-with-string-output-port) (K16032 core-prim . call-with-port) (K16031 core-prim . call-with-bytevector-output-port) (K16030 core-prim . bytevector->string) (K16029 core-prim . buffer-mode?) (K16028 core-prim . binary-port?) (K16027 core-prim . with-exception-handler) (K16026 core-prim . raise-continuable) (K16025 core-prim . raise) (K7961 core-prim . eval) (K7953 core-prim . environment) (K16024 core-prim . make-enumeration) (K16023 core-prim . enum-set=?) (K16022 core-prim . enum-set-universe) (K16021 core-prim . enum-set-union) (K16020 core-prim . enum-set-subset?) (K16019 core-prim . enum-set-projection) (K16018 core-prim . enum-set-member?) (K16017 core-prim . enum-set-intersection) (K16016 core-prim . enum-set-indexer) (K16015 core-prim . enum-set-difference) (K16014 core-prim . enum-set-constructor) (K16013 core-prim . enum-set-complement) (K16012 core-prim . enum-set->list) (K14628 core-prim . who-condition?) (K14494 core-prim . warning?) (K14557 core-prim . violation?) (K14745 core-prim . undefined-violation?) (K14720 core-prim . syntax-violation?) (K14724 core-prim . syntax-violation-subform) (K14722 core-prim . syntax-violation-form) (K7993 core-prim . syntax-violation) (K16011 core-prim . simple-conditions) (K14515 core-prim . serious-condition?) (K14651 core-prim . non-continuable-violation?) (K14471 core-prim . message-condition?) (K14624 core-prim . make-who-condition) (K14492 core-prim . make-warning) (K14555 core-prim . make-violation) (K14743 core-prim . make-undefined-violation) (K14714 core-prim . make-syntax-violation) (K14513 core-prim . make-serious-condition) (K14649 core-prim . make-non-continuable-violation) (K14467 core-prim . make-message-condition) (K14691 core-prim . make-lexical-violation) (K14598 core-prim . make-irritants-condition) (K14670 core-prim . make-implementation-restriction-violation) (K14534 core-prim . make-error) (K14576 core-prim . make-assertion-violation) (K14693 core-prim . lexical-violation?) (K14602 core-prim . irritants-condition?) (K14672 core-prim . implementation-restriction-violation?) (K14536 core-prim . error?) (K14630 core-prim . condition-who) (K16010 core-prim . condition-predicate) (K14473 core-prim . condition-message) (K14604 core-prim . condition-irritants) (K16009 core-prim . condition-accessor) (K16008 core-prim . condition) (K14578 core-prim . assertion-violation?) (K16007 core-prim . condition?) (K16006 core-prim . utf32->string) (K16005 core-prim . utf16->string) (K16004 core-prim . utf8->string) (K16003 core-prim . uint-list->bytevector) (K16002 core-prim . u8-list->bytevector) (K16001 core-prim . string->utf8) (K16000 core-prim . string->utf32) (K15999 core-prim . string->utf16) (K15998 core-prim . sint-list->bytevector) (K15997 core-prim . native-endianness) (K15996 core-prim . bytevector?) (K15995 core-prim . bytevector=?) (K15994 core-prim . bytevector-uint-set!) (K15993 core-prim . bytevector-uint-ref) (K15992 core-prim . bytevector-u8-set!) (K15991 core-prim . bytevector-u8-ref) (K15990 core-prim . bytevector-u64-set!) (K15989 core-prim . bytevector-u64-ref) (K15988 core-prim . bytevector-u64-native-set!) (K15987 core-prim . bytevector-u64-native-ref) (K15986 core-prim . bytevector-u32-set!) (K15985 core-prim . bytevector-u32-ref) (K15984 core-prim . bytevector-u32-native-set!) (K15983 core-prim . bytevector-u32-native-ref) (K15982 core-prim . bytevector-u16-set!) (K15981 core-prim . bytevector-u16-ref) (K15980 core-prim . bytevector-u16-native-set!) (K15979 core-prim . bytevector-u16-native-ref) (K15978 core-prim . bytevector-sint-set!) (K15977 core-prim . bytevector-sint-ref) (K15976 core-prim . bytevector-s8-set!) (K15975 core-prim . bytevector-s8-ref) (K15974 core-prim . bytevector-s64-set!) (K15973 core-prim . bytevector-s64-ref) (K15972 core-prim . bytevector-s64-native-set!) (K15971 core-prim . bytevector-s64-native-ref) (K15970 core-prim . bytevector-s32-set!) (K15969 core-prim . bytevector-s32-ref) (K15968 core-prim . bytevector-s32-native-set!) (K15967 core-prim . bytevector-s32-native-ref) (K15966 core-prim . bytevector-s16-set!) (K15965 core-prim . bytevector-s16-ref) (K15964 core-prim . bytevector-s16-native-set!) (K15963 core-prim . bytevector-s16-native-ref) (K15962 core-prim . bytevector-length) (K15961 core-prim . bytevector-ieee-single-ref) (K15960 core-prim . bytevector-ieee-single-set!) (K15959 core-prim . bytevector-ieee-single-native-set!) (K15958 core-prim . bytevector-ieee-single-native-ref) (K15957 core-prim . bytevector-ieee-double-set!) (K15956 core-prim . bytevector-ieee-double-ref) (K15955 core-prim . bytevector-ieee-double-native-set!) (K15954 core-prim . bytevector-ieee-double-native-ref) (K15953 core-prim . bytevector-fill!) (K15952 core-prim . bytevector-copy!) (K15951 core-prim . bytevector-copy) (K15950 core-prim . bytevector->uint-list) (K15949 core-prim . bytevector->u8-list) (K15948 core-prim . bytevector->sint-list) (K15059 core-prim . no-nans-violation?) (K15038 core-prim . no-infinities-violation?) (K15057 core-prim . make-no-nans-violation) (K15036 core-prim . make-no-infinities-violation) (K15947 core-prim . real->flonum) (K15946 core-prim . flzero?) (K15945 core-prim . fltruncate) (K15944 core-prim . fltan) (K15943 core-prim . flsqrt) (K15942 core-prim . flsin) (K15941 core-prim . flround) (K15940 core-prim . flpositive?) (K15939 core-prim . flonum?) (K15938 core-prim . flodd?) (K15937 core-prim . flnumerator) (K15936 core-prim . flnegative?) (K15935 core-prim . flnan?) (K15934 core-prim . flmod0) (K15933 core-prim . flmod) (K15932 core-prim . flmin) (K15931 core-prim . flmax) (K15930 core-prim . fllog) (K15929 core-prim . flinteger?) (K15928 core-prim . flinfinite?) (K15927 core-prim . flfloor) (K15926 core-prim . flfinite?) (K15925 core-prim . flexpt) (K15924 core-prim . flexp) (K15923 core-prim . fleven?) (K15922 core-prim . fldiv0-and-mod0) (K15921 core-prim . fldiv0) (K15920 core-prim . fldiv-and-mod) (K15919 core-prim . fldiv) (K15918 core-prim . fldenominator) (K15917 core-prim . flcos) (K15916 core-prim . flceiling) (K15915 core-prim . flatan) (K15914 core-prim . flasin) (K15913 core-prim . flacos) (K15912 core-prim . flabs) (K15911 core-prim . fl>?) (K15910 core-prim . fl>=?) (K15909 core-prim . fl=?) (K15908 core-prim . fl<?) (K15907 core-prim . fl<=?) (K15906 core-prim . fl/) (K15905 core-prim . fl-) (K15904 core-prim . fl+) (K15903 core-prim . fl*) (K15902 core-prim . fixnum->flonum) (K15901 core-prim . fxzero?) (K15900 core-prim . fxxor) (K15899 core-prim . fxrotate-bit-field) (K15898 core-prim . fxreverse-bit-field) (K15897 core-prim . fxpositive?) (K15896 core-prim . fxodd?) (K15895 core-prim . fxnot) (K15894 core-prim . fxnegative?) (K15893 core-prim . fxmod0) (K15892 core-prim . fxmod) (K15891 core-prim . fxmin) (K15890 core-prim . fxmax) (K15889 core-prim . fxlength) (K15888 core-prim . fxior) (K15887 core-prim . fxif) (K15886 core-prim . fxfirst-bit-set) (K15885 core-prim . fxeven?) (K15884 core-prim . fxdiv0-and-mod0) (K15883 core-prim . fxdiv0) (K15882 core-prim . fxdiv-and-mod) (K15881 core-prim . fxdiv) (K15880 core-prim . fxcopy-bit-field) (K15879 core-prim . fxcopy-bit) (K15878 core-prim . fxbit-set?) (K15877 core-prim . fxbit-field) (K15876 core-prim . fxbit-count) (K15875 core-prim . fxarithmetic-shift-right) (K15874 core-prim . fxarithmetic-shift-left) (K15873 core-prim . fxarithmetic-shift) (K15872 core-prim . fxand) (K15871 core-prim . fx>?) (K15870 core-prim . fx>=?) (K15869 core-prim . fx=?) (K15868 core-prim . fx<?) (K15867 core-prim . fx<=?) (K15866 core-prim . fx-/carry) (K15865 core-prim . fx-) (K15864 core-prim . fx+/carry) (K15863 core-prim . fx+) (K15862 core-prim . fx*/carry) (K15861 core-prim . fx*) (K15860 core-prim . greatest-fixnum) (K15859 core-prim . least-fixnum) (K15858 core-prim . fixnum-width) (K15857 core-prim . fixnum?) (K15856 core-prim . bitwise-rotate-bit-field) (K15855 core-prim . bitwise-reverse-bit-field) (K15854 core-prim . bitwise-length) (K15853 core-prim . bitwise-if) (K15852 core-prim . bitwise-first-bit-set) (K15851 core-prim . bitwise-copy-bit-field) (K15850 core-prim . bitwise-copy-bit) (K15849 core-prim . bitwise-bit-set?) (K15848 core-prim . bitwise-bit-field) (K15847 core-prim . bitwise-bit-count) (K15846 core-prim . bitwise-xor) (K15845 core-prim . bitwise-ior) (K15844 core-prim . bitwise-and) (K15843 core-prim . bitwise-not) (K15842 core-prim . bitwise-arithmetic-shift-right) (K15841 core-prim . bitwise-arithmetic-shift-left) (K15840 core-prim . bitwise-arithmetic-shift) (K15839 core-prim . zero?) (K15838 core-prim . vector?) (K15837 core-prim . vector-set!) (K15836 core-prim . vector-ref) (K15835 core-prim . vector-map) (K15834 core-prim . vector-length) (K15833 core-prim . vector-for-each) (K15832 core-prim . vector-fill!) (K15831 core-prim . vector->list) (K15830 core-prim . vector) (K15829 core-prim . values) (K15828 core-prim . truncate) (K15827 core-prim . tan) (K15826 core-prim . symbol?) (K15825 core-prim . symbol=?) (K15824 core-prim . symbol->string) (K15823 core-prim . substring) (K15822 core-prim . string?) (K15821 core-prim . string>?) (K15820 core-prim . string>=?) (K15819 core-prim . string=?) (K15818 core-prim . string<?) (K15817 core-prim . string<=?) (K15816 core-prim . string-ref) (K15815 core-prim . string-length) (K15814 core-prim . string-for-each) (K15813 core-prim . string-copy) (K15812 core-prim . string-append) (K15811 core-prim . string->symbol) (K15810 core-prim . string->number) (K15809 core-prim . string->list) (K15808 core-prim . string) (K15807 core-prim . sqrt) (K15806 core-prim . sin) (K15805 core-prim . round) (K15804 core-prim . reverse) (K15803 core-prim . real?) (K15802 core-prim . real-valued?) (K15801 core-prim . real-part) (K15800 core-prim . rationalize) (K15799 core-prim . rational?) (K15798 core-prim . rational-valued?) (K15797 core-prim . procedure?) (K15796 core-prim . positive?) (K15795 core-prim . pair?) (K15794 core-prim . odd?) (K15793 core-prim . numerator) (K15792 core-prim . number?) (K15791 core-prim . number->string) (K15790 core-prim . null?) (K15789 core-prim . not) (K15788 core-prim . negative?) (K15787 core-prim . nan?) (K15786 core-prim . min) (K15785 core-prim . max) (K15784 core-prim . map) (K15783 core-prim . make-vector) (K15782 core-prim . make-string) (K15781 core-prim . make-rectangular) (K15780 core-prim . make-polar) (K15779 core-prim . magnitude) (K15778 core-prim . log) (K15777 core-prim . list?) (K15776 core-prim . list-tail) (K15775 core-prim . list-ref) (K15774 core-prim . list->vector) (K15773 core-prim . list->string) (K15772 core-prim . list) (K15771 core-prim . length) (K15770 core-prim . lcm) (K15769 core-prim . integer?) (K15768 core-prim . integer-valued?) (K15767 core-prim . integer->char) (K15766 core-prim . infinite?) (K15765 core-prim . inexact?) (K15764 core-prim . inexact) (K15763 core-prim . imag-part) (K15762 core-prim . gcd) (K15761 core-prim . for-each) (K15760 core-prim . floor) (K15759 core-prim . finite?) (K15758 core-prim . expt) (K15757 core-prim . exp) (K15756 core-prim . exact?) (K15755 core-prim . exact-integer-sqrt) (K15754 core-prim . exact) (K15753 core-prim . even?) (K15752 core-prim . error) (K15751 core-prim . eqv?) (K15750 core-prim . equal?) (K15749 core-prim . eq?) (K15748 core-prim . dynamic-wind) (K15747 core-prim . div0-and-mod0) (K15746 core-prim . mod0) (K15745 core-prim . div0) (K15744 core-prim . div-and-mod) (K15743 core-prim . mod) (K15742 core-prim . div) (K15741 core-prim . denominator) (K15740 core-prim . cos) (K15739 core-prim . cons) (K15738 core-prim . complex?) (K15737 core-prim . char?) (K15736 core-prim . char>?) (K15735 core-prim . char>=?) (K15734 core-prim . char=?) (K15733 core-prim . char<?) (K15732 core-prim . char<=?) (K15731 core-prim . char->integer) (K15730 core-prim . ceiling) (K15729 core-prim . call-with-values) (K15728 core-prim . call/cc) (K15727 core-prim . call-with-current-continuation) (K15726 core-prim . cddddr) (K15725 core-prim . cdddar) (K15724 core-prim . cddadr) (K15723 core-prim . cddaar) (K15722 core-prim . cdaddr) (K15721 core-prim . cdadar) (K15720 core-prim . cdaadr) (K15719 core-prim . cdaaar) (K15718 core-prim . cadddr) (K15717 core-prim . caddar) (K15716 core-prim . cadadr) (K15715 core-prim . cadaar) (K15714 core-prim . caaddr) (K15713 core-prim . caadar) (K15712 core-prim . caaadr) (K15711 core-prim . caaaar) (K15710 core-prim . cdddr) (K15709 core-prim . cddar) (K15708 core-prim . cdadr) (K15707 core-prim . cdaar) (K15706 core-prim . caddr) (K15705 core-prim . cadar) (K15704 core-prim . caadr) (K15703 core-prim . caaar) (K15702 core-prim . cddr) (K15701 core-prim . cdar) (K15700 core-prim . cadr) (K15699 core-prim . caar) (K15698 core-prim . cdr) (K15697 core-prim . car) (K15696 core-prim . boolean?) (K15695 core-prim . boolean=?) (K15694 core-prim . atan) (K15693 core-prim . assertion-violation) (K15692 core-prim . asin) (K15691 core-prim . apply) (K15690 core-prim . append) (K15689 core-prim . angle) (K15688 core-prim . acos) (K15687 core-prim . abs) (K15686 core-prim . /) (K15685 core-prim . *) (K15684 core-prim . -) (K15683 core-prim . +) (K15682 core-prim . >=) (K15681 core-prim . >) (K15680 core-prim . =) (K15679 core-prim . <=) (K15678 core-prim . <) (K15677 core-prim . library) (K15676 $core-rtd &no-nans-rtd &no-nans-rcd) (K15675 $core-rtd &no-infinities-rtd &no-infinities-rcd) (K15674 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (K15673 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (K15672 $core-rtd &i/o-port-rtd &i/o-port-rcd) (K15671 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (K15670 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (K15669 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (K15668 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (K15667 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (K15666 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (K15665 $core-rtd &i/o-write-rtd &i/o-write-rcd) (K15664 $core-rtd &i/o-read-rtd &i/o-read-rcd) (K15663 $core-rtd &i/o-rtd &i/o-rcd) (K15662 $core-rtd &undefined-rtd &undefined-rcd) (K15661 $core-rtd &syntax-rtd &syntax-rcd) (K15660 $core-rtd &lexical-rtd &lexical-rcd) (K15659 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (K15658 $core-rtd &non-continuable-rtd &non-continuable-rcd) (K15657 $core-rtd &who-rtd &who-rcd) (K15656 $core-rtd &irritants-rtd &irritants-rcd) (K15655 $core-rtd &assertion-rtd &assertion-rcd) (K15654 $core-rtd &violation-rtd &violation-rcd) (K15653 $core-rtd &error-rtd &error-rcd) (K15652 $core-rtd &serious-rtd &serious-rcd) (K15651 $core-rtd &warning-rtd &warning-rcd) (K15650 $core-rtd &message-rtd &message-rcd) (K15649 $core-rtd &condition-rtd &condition-rcd) (K15648 macro . define-condition-type) (K15647 macro . define-enumeration) (K15646 macro . define-record-type) (K15645 macro . parent-rtd) (K15644 macro . nongenerative) (K15643 macro . opaque) (K15642 macro . sealed) (K15641 macro . protocol) (K15640 macro . parent) (K15639 macro . immutable) (K15638 macro . mutable) (K15637 macro . fields) (K15636 macro . error-handling-mode) (K15635 macro . file-options) (K15634 macro . buffer-mode) (K15633 macro . eol-style) (K15632 macro . guard) (K15631 macro . trace-define) (K15630 macro . trace-lambda) (K15629 macro . unsyntax-splicing) (K15628 macro . unsyntax) (K15627 macro . unquote-splicing) (K15626 macro . unquote) (K15625 macro . _) (K15624 macro . else) (K15623 macro . =>) (K15622 macro . ...) (K15621 macro . assert) (K15620 macro . endianness) (K15619 macro . delay) (K15618 macro . time) (K15617 macro . do) (K15616 macro . cond) (K15615 macro . let*) (K15614 macro . let) (K15613 macro . let*-values) (K15612 macro . let-values) (K15611 macro . identifier-syntax) (K15610 macro . with-syntax) (K15609 macro . quasisyntax) (K15608 macro . quasiquote) (K15607 macro . syntax-rules) (K15606 macro . include) (K15605 macro . define-struct) (K15604 core-macro . record-constructor-descriptor) (K15603 core-macro . record-type-descriptor) (K15602 macro . case) (K15601 macro . parameterize) (K15600 macro . unless) (K15599 macro . when) (K15598 core-macro . or) (K15597 core-macro . and) (K15596 core-macro . if) (K15595 core-macro . letrec*) (K15594 core-macro . letrec) (K15593 core-macro . type-descriptor) (K15592 core-macro . case-lambda) (K15591 core-macro . lambda) (K15590 core-macro . syntax) (K15589 core-macro . syntax-case) (K15588 core-macro . quote) (K15587 core-macro . foreign-call) (K15586 letrec-syntax) (K15585 let-syntax) (K15584 set!) (K15583 import) (K15582 begin) (K15581 module) (K15580 define-syntax) (K15579 define)) values values '#f '#f '#f '#f) (K6788@K6441@install-library 'K16317 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . K16284) (eval-core . K16283) (set-symbol-value! . K16282) (symbol-value . K16281) (gensym . K5911) (void . K16280)) '() values values '#f '#f '#f '#f) (K6788@K6441@install-library 'K16318 '(mosh) '() '() '() '() '((set-symbol-value! . K16282) (symbol-value . K16281) (read-line . K16277) (ungensym . K16276) (alist->eq-hash-table . K16275) (assoc-ref . K16274) (print . K16273) (format . K16272) (host-os . K16271) (library-path . K6408) (standard-library-path . K16270) (file-newer? . K16269) (stat-mtime . K16268) (write-to-file . K16267) (file->list . K16266) (file->string . K16265) (digit->integer . K16264) (call-with-string-input-port . K16263) (call-with-string-io . K16262) (string-split . K16261) (bytevector-for-each . K16260) (string->regexp . K16259) (rxmatch . K16258) (regexp-replace-all . K16257) (hashtable-for-each . K16256) (readdir . K16252) (set-current-directory! . K16251) (expand-path . K16250) (current-directory . K16249) (p . K16234) (get-timeofday . K16229) (get-command-line . K16228) (sys-display . K16227) (make-file-options . K16226) (source-info . K16225) (make-compiler-instruction . K16224) (make-instruction . K16223) (set-source-info! . K16222) (bignum? . K16221) (fast-equal? . K16220) (fasl-read . K16219) (fasl-write . K16218) (time-usage . K16217) (time . K15618) (include . K15606)) '() values values '#f '#f '#f '#f) (K6788@K6441@install-library 'K16319 '(system) '() '() '() '() '((call-process . K16255) (local-tz-offset . K16254) (microseconds . K16253) (expand-path . K16250) (%spawn . K16248) (%waitpid . K16247) (%ffi-supported? . K16246) (%ffi-pointer-ref . K16245) (%ffi-pointer->string . K16244) (%ffi-call->string-or-zero . K16243) (%ffi-call->double . K16242) (%ffi-call->void* . K16241) (%ffi-call->void . K16240) (%ffi-call->int . K16239) (%ffi-lookup . K16238) (%ffi-open . K16237) (%fork . K16236) (%pipe . K16235) (open-output-string . K16233) (get-output-string . K16232) (get-environment-variables . K16231) (get-environment-variable . K16230) (make-parameter . K5939) (parameterize . K15601)) '() values values '#f '#f '#f '#f))
((lambda (K15309@add-library-path! K15311@parse-and-add-library-path K15313@for-each-with-index K15315@conditioon-printer K15317@condition-printer K15319@record->field-alist K15321@map-with-index K15323@repl K15325@trace-printer K15327@command-line K15329@local-library-path K15331@load/args K15333@load K15335@ironscheme-build K15337@eval-top-level K15339@compile-system-libraries K15341@compile K15343@compile->closure K15345@pre-compile-r6rs-file K15347@load-r6rs-top-level) (begin (set! K15309@add-library-path! (lambda (K15374@path) (K6772@K6409@library-path (append (K6772@K6409@library-path) (list K15374@path))))) (set! K15311@parse-and-add-library-path (lambda (K15376@paths K15377@message) ((lambda (K15380@t) (if K15380@t ((lambda (K15382@paths) (for-each (lambda (K15384@path) (if (file-exists? K15384@path) (K15309@add-library-path! (expand-path K15384@path)) (format (current-error-port) K15377@message K15384@path))) (reverse (string-split K15382@paths '#\:)))) K15380@t) (void))) K15376@paths))) (set! K15313@for-each-with-index (lambda (K15386@proc K15387@lst) (letrec ((K15390@loop (lambda (K15392@i K15393@lst) (if (null? K15393@lst) (if '#f '#f (void)) (begin (K15386@proc K15392@i (car K15393@lst)) (K15390@loop (+ K15392@i '1) (cdr K15393@lst))))))) (K15390@loop '1 K15387@lst)))) (set! K15315@conditioon-printer (lambda (K15396@e K15397@port) ((lambda (K15401@ref) (begin (set! K15401@ref (lambda (K15416@rtd K15417@i K15418@x) ((lambda (K15422@val) (if (symbol? K15422@val) (ungensym K15422@val) K15422@val)) ((record-accessor K15416@rtd K15417@i) K15418@x)))) (begin (display '" Condition components:\n" K15397@port) (K15313@for-each-with-index (lambda (K15402@i K15403@x) ((lambda (K15406@rtd) (begin (format K15397@port '"   ~d. ~a" K15402@i (record-type-name K15406@rtd)) ((lambda (K15408@v) ((lambda (K15410@t) (if (memv K15410@t '(0)) (newline K15397@port) (if (memv K15410@t '(1)) (begin (display '": " K15397@port) (write (K15401@ref K15406@rtd '0 K15403@x) K15397@port) (newline K15397@port)) (begin (display '":\n" K15397@port) ((letrec ((K15412@f (lambda (K15414@i) (if (not (= K15414@i (vector-length K15408@v))) (begin (display '"       " K15397@port) (display (vector-ref K15408@v K15414@i) K15397@port) (display '": " K15397@port) (write (K15401@ref K15406@rtd K15414@i K15403@x) K15397@port) (newline K15397@port) (K15412@f (+ K15414@i '1))) (void))))) K15412@f) '0))))) (vector-length K15408@v))) (record-type-field-names K15406@rtd)))) (record-rtd K15403@x))) (simple-conditions K15396@e))))) '#f))) (set! K15317@condition-printer (lambda (K15424@e K15425@port) (begin (display '" Condition components:\n" K15425@port) (K15313@for-each-with-index (lambda (K15428@i K15429@x) ((lambda (K15432@rtd) (begin (format K15425@port '"   ~d. ~a" K15428@i (record-type-name K15432@rtd)) (for-each (lambda (K15434@field) (begin (display '"       " K15425@port) (display (car K15434@field) K15425@port) (display '": " K15425@port) (write (cdr K15434@field) K15425@port) (newline K15425@port))) (K15319@record->field-alist K15429@x)))) (record-rtd K15429@x))) (simple-conditions K15424@e))))) (set! K15319@record->field-alist (lambda (K15436@r) ((lambda (K15439@ref) (begin (set! K15439@ref (lambda (K15450@rtd K15451@i K15452@x) ((lambda (K15456@val) (if (symbol? K15456@val) (ungensym K15456@val) K15456@val)) ((record-accessor K15450@rtd K15451@i) K15452@x)))) ((letrec ((K15440@loop (lambda (K15442@ret K15443@rtd) (if K15443@rtd (K15440@loop (append K15442@ret (K15321@map-with-index (lambda (K15446@i K15447@field) (cons K15447@field (K15439@ref K15443@rtd K15446@i K15436@r))) (vector->list (record-type-field-names K15443@rtd)))) (record-type-parent K15443@rtd)) K15442@ret)))) K15440@loop) '() (record-rtd K15436@r)))) '#f))) (set! K15321@map-with-index (lambda (K15458@proc K15459@lst) ((letrec ((K15462@loop (lambda (K15464@i K15465@lst K15466@ret) (if (null? K15465@lst) (reverse K15466@ret) (K15462@loop (+ K15464@i '1) (cdr K15465@lst) (cons (K15458@proc K15464@i (car K15465@lst)) K15466@ret)))))) K15462@loop) '0 K15459@lst '()))) (set! K15323@repl (lambda K15470@x ((lambda (K15473@rec) (begin (set! K15473@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (K15476@K15474) (lambda () (with-exception-handler (lambda (K15478@e) ((call/cc (lambda (K15480@K15475) (K15476@K15474 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? K15478@e) (K15315@conditioon-printer K15478@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" K15478@e))) (K15480@K15475 (lambda () (raise-continuable K15478@e)))))))))) (lambda () ((letrec ((K15482@loop (lambda (K15484@line K15485@accum) ((lambda (K15489@parentheses-ok? K15491@eval-string-print) (begin (set! K15489@parentheses-ok? (lambda (K15496@text) ((letrec ((K15498@loop (lambda (K15500@chars K15501@p0 K15502@p1) (if (null? K15500@chars) (= '0 K15501@p0 K15502@p1) ((lambda (K15506@t) (if (memv K15506@t '(#\()) (K15498@loop (cdr K15500@chars) (+ K15501@p0 '1) K15502@p1) (if (memv K15506@t '(#\))) (K15498@loop (cdr K15500@chars) (- K15501@p0 '1) K15502@p1) (if (memv K15506@t '(#\[)) (K15498@loop (cdr K15500@chars) K15501@p0 (+ K15502@p1 '1)) (if (memv K15506@t '(#\])) (K15498@loop (cdr K15500@chars) K15501@p0 (- K15502@p1 '1)) (K15498@loop (cdr K15500@chars) K15501@p0 K15502@p1)))))) (car K15500@chars)))))) K15498@loop) (string->list K15496@text) '0 '0))) (set! K15491@eval-string-print (lambda (K15494@text) (if (not (or (string=? '"\n" K15494@text) (= '0 (string-length K15494@text)))) (write (K15337@eval-top-level (call-with-port (open-string-input-port K15494@text) read))) (void)))) (if (eof-object? K15484@line) (begin (K15491@eval-string-print K15485@accum) (exit)) ((lambda (K15492@current) (if (K15489@parentheses-ok? K15492@current) (K15491@eval-string-print K15492@current) (K15482@loop (get-line (current-input-port)) K15492@current))) (string-append K15485@accum K15484@line))))) '#f '#f)))) K15482@loop) (get-line (current-input-port)) '""))))))) (newline) (K15473@rec)))) (K15473@rec))) '#f))) (set! K15325@trace-printer (K6162@K5940@make-parameter write)) (set! K15327@command-line (K6162@K5940@make-parameter (get-command-line))) (set! K15329@local-library-path (lambda (K15508@filename) (cons (expand-path '".") (K6772@K6409@library-path)))) (set! K15331@load/args (lambda (K15510@filename . K15512@args) (begin (apply K15347@load-r6rs-top-level K15510@filename 'load K15512@args) (void)))) (set! K15333@load (lambda (K15514@filename) (begin (apply K15347@load-r6rs-top-level K15514@filename 'load (K15327@command-line)) (void)))) (set! K15335@ironscheme-build (lambda () (K15333@load '"ironscheme-buildscript.ss"))) (set! K15337@eval-top-level (lambda (K15516@x) (K14341@K7962@eval K15516@x (K14363@K8006@interaction-environment)))) (set! K15339@compile-system-libraries (lambda () (K15337@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! K15341@compile (lambda (K15518@filename) (K15347@load-r6rs-top-level K15518@filename 'compile))) (set! K15343@compile->closure (lambda (K15520@filename) (K15347@load-r6rs-top-level K15520@filename 'closure))) (set! K15345@pre-compile-r6rs-file (lambda (K15522@filename) (K15347@load-r6rs-top-level K15522@filename 'compile))) (set! K15347@load-r6rs-top-level (lambda (K15524@filename K15525@how . K15528@args) ((lambda (K15532@K15530@library-path K15533@K15531@library-path) ((lambda (K15536@swap) (dynamic-wind K15536@swap (lambda () ((lambda (K15538@x*) ((lambda (K15540@t) (if (memv K15540@t '(closure)) (K14362@K8004@pre-compile-r6rs-top-level K15538@x*) (if (memv K15540@t '(load)) ((lambda (K15544@K15542@command-line K15545@K15543@command-line) ((lambda (K15548@swap) (dynamic-wind K15548@swap (lambda () ((K14361@K8002@compile-r6rs-top-level K15538@x*))) K15548@swap)) (lambda () ((lambda (K15550@t) (begin (K15544@K15542@command-line K15545@K15543@command-line) (set! K15545@K15543@command-line K15550@t))) (K15544@K15542@command-line))))) K15327@command-line (cons K15524@filename (car K15528@args))) (if (memv K15540@t '(compile)) (begin (K14361@K8002@compile-r6rs-top-level K15538@x*) (K6776@K6417@serialize-all K6157@K5930@serialize-library K6247@K6176@compile-core-expr)) (if '#f '#f (void)))))) K15525@how)) (with-input-from-file K15524@filename (lambda () ((letrec ((K15552@f (lambda () ((lambda (K15554@x) (if (eof-object? K15554@x) '() (cons K15554@x (K15552@f)))) (K6149@K5914@read-annotated))))) K15552@f)))))) K15536@swap)) (lambda () ((lambda (K15556@t) (begin (K15532@K15530@library-path K15533@K15531@library-path) (set! K15533@K15531@library-path K15556@t))) (K15532@K15530@library-path))))) K6772@K6409@library-path (K15329@local-library-path K15524@filename)))) (begin (set! K15577@K15347@load-r6rs-top-level K15347@load-r6rs-top-level) (set! K15576@K15345@pre-compile-r6rs-file K15345@pre-compile-r6rs-file) (set! K15575@K15343@compile->closure K15343@compile->closure) (set! K15574@K15341@compile K15341@compile) (set! K15573@K15339@compile-system-libraries K15339@compile-system-libraries) (set! K15572@K15337@eval-top-level K15337@eval-top-level) (set! K15571@K15335@ironscheme-build K15335@ironscheme-build) (set! K15570@K15333@load K15333@load) (set! K15569@K15331@load/args K15331@load/args) (set! K15568@K15329@local-library-path K15329@local-library-path) (set! K15567@K15327@command-line K15327@command-line) (set! K15566@K15325@trace-printer K15325@trace-printer) (set! K15565@K15323@repl K15323@repl) (set! K15564@K15321@map-with-index K15321@map-with-index) (set! K15563@K15319@record->field-alist K15319@record->field-alist) (set! K15562@K15317@condition-printer K15317@condition-printer) (set! K15561@K15315@conditioon-printer K15315@conditioon-printer) (set! K15560@K15313@for-each-with-index K15313@for-each-with-index) (set! K15559@K15311@parse-and-add-library-path K15311@parse-and-add-library-path) (set! K15558@K15309@add-library-path! K15309@add-library-path!) (K6777@K6419@current-precompiled-library-loader K6158@K5932@load-serialized-library) (set-symbol-value! 'load K15333@load) (set-symbol-value! 'pre-compile-r6rs-file K15345@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs K15337@eval-top-level) (set-symbol-value! 'int-env-syms K14332@K7944@interaction-environment-symbols) (set-symbol-value! 'expanded2core K6246@K6174@expanded->core) (set-symbol-value! 'trace-printer K15325@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (K15348@c) (condition (K15146@K14650@make-non-continuable-violation) (K15136@K14625@make-who-condition 'raise) (K15076@K14468@make-message-condition '"returned from non-continuable exception") (K15126@K14599@make-irritants-condition (list K15348@c))))) (K15311@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (K15311@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (K6772@K6409@library-path (append (K6772@K6409@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (K15350@prefix) (K6773@K6411@library-extensions (K15350@prefix '".mosh" (K6773@K6411@library-extensions)))) (lambda (K15352@ext K15353@ls) (append (map (lambda (K15356@x) (string-append K15352@ext K15356@x)) K15353@ls) K15353@ls))) ((lambda (K15358@args K15359@port) ((lambda (K15363@ref) (begin (set! K15363@ref (lambda (K15366@rtd K15367@i K15368@x) ((lambda (K15372@val) (if (symbol? K15372@val) (ungensym K15372@val) K15372@val)) ((record-accessor K15366@rtd K15367@i) K15368@x)))) (with-exception-handler (lambda (K15364@c) (if (condition? K15364@c) (K15315@conditioon-printer K15364@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" K15364@c))) (lambda () (if (null? K15358@args) (K15323@repl) (K15347@load-r6rs-top-level (car K15358@args) 'load (cdr K15358@args))))))) '#f)) (K15327@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
