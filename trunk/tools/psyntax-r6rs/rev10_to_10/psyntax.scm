;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2800@read-annotated G2802@annotation-stripped G2804@annotation? G2806@annotation-source G2808@annotation-expression G280a@serialize-library G280c@load-serialized-library G280e@make-record-printer G2810@compile-core G2812@read-library-source-file G2814@make-parameter G28ae@file-options-spec) (begin (set! G2800@read-annotated read) (set! G2802@annotation-stripped (lambda (G28af@x) (G2808@annotation-expression G28af@x))) (set! G2804@annotation? (lambda (G28b1@x) (source-info G28b1@x))) (set! G2806@annotation-source (lambda (G28b3@x) (source-info G28b3@x))) (set! G2808@annotation-expression (lambda (G28b5@x) (if (pair? G28b5@x) (cons (car G28b5@x) (cdr G28b5@x)) (display '"line:46\n")))) (set! G280a@serialize-library (lambda G28b7@x (begin (display G28b7@x) '#f))) (set! G280c@load-serialized-library (lambda G28b9@x '#f)) (set! G280e@make-record-printer (lambda (G28bb@name G28bc@printer) (lambda G28bf@x (begin (display '"record printer") (for-each display G28bf@x))))) (set! G2810@compile-core (lambda G28c1@x (apply error 'comile-core '"not implementated" G28c1@x))) (set! G2812@read-library-source-file (lambda (G28c3@file-name) (with-input-from-file G28c3@file-name G2800@read-annotated))) (set! G2814@make-parameter (lambda G28d3 ((lambda (G28d4) (if (= G28d4 '1) (apply (lambda (G28c5@x) (G2814@make-parameter G28c5@x (lambda (G28c7@x) G28c7@x))) G28d3) (if (= G28d4 '2) (apply (lambda (G28c9@x G28ca@fender) (begin (if (procedure? G28ca@fender) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((lambda (G28cd@x) (lambda G28d1 ((lambda (G28d2) (if (= G28d2 '0) (apply (lambda () G28cd@x) G28d1) (if (= G28d2 '1) (apply (lambda (G28cf@v) (set! G28cd@x (G28ca@fender G28cf@v))) G28d1) (error 'apply '"invalid arg count")))) (length G28d1)))) (G28ca@fender G28c9@x)))) G28d3) (error 'apply '"invalid arg count")))) (length G28d3)))) (set! G28ae@file-options-spec (lambda (G28d5@x) G28d5@x)) (begin (set! G28e2@G28ae@file-options-spec G28ae@file-options-spec) (set! G28e1@G2814@make-parameter G2814@make-parameter) (set! G28e0@G2812@read-library-source-file G2812@read-library-source-file) (set! G28df@G2810@compile-core G2810@compile-core) (set! G28de@G280e@make-record-printer G280e@make-record-printer) (set! G28dd@G280c@load-serialized-library G280c@load-serialized-library) (set! G28dc@G280a@serialize-library G280a@serialize-library) (set! G28db@G2808@annotation-expression G2808@annotation-expression) (set! G28da@G2806@annotation-source G2806@annotation-source) (set! G28d9@G2804@annotation? G2804@annotation?) (set! G28d8@G2802@annotation-stripped G2802@annotation-stripped) (set! G28d7@G2800@read-annotated G2800@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G28e7@current-primitive-locations G28e9@mutable? G28eb@rewriter G28ed@expanded->core G28ef@compile-core-expr G28f1@pretty-print G28f3@compile-core-expr-to-port) (begin (set! G28e7@current-primitive-locations (G28e1@G2814@make-parameter (lambda (G28f4@x) '#f) (lambda (G28f6@p) (begin (if (procedure? G28f6@p) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) G28f6@p)))) (set! G28e9@mutable? (lambda (G28f8@x) ((lambda (G28fb@simple?) (begin (set! G28fb@simple? (lambda (G28fc@x) ((lambda (G28fe@t) (if G28fe@t G28fe@t ((lambda (G2900@t) (if G2900@t G2900@t ((lambda (G2902@t) (if G2902@t G2902@t ((lambda (G2904@t) (if G2904@t G2904@t ((lambda (G2906@t) (if G2906@t G2906@t ((lambda (G2908@t) (if G2908@t G2908@t (begin '#f (number? G28fc@x)))) (bytevector? G28fc@x)))) (string? G28fc@x)))) (boolean? G28fc@x)))) (symbol? G28fc@x)))) (char? G28fc@x)))) (null? G28fc@x)))) (not (G28fb@simple? G28f8@x)))) '#f))) (set! G28eb@rewriter (lambda (G290a@quote-hack?) ((lambda (G290d@f) (begin (set! G290d@f (lambda (G290e@x) (if (pair? G290e@x) ((lambda (G2910@t) (if (eqv? G2910@t 'quote) (if (if G290a@quote-hack? (begin '#f (G28e9@mutable? (cadr G290e@x))) '#f) ((lambda (G2937@g) (begin (set-symbol-value! G2937@g (cadr G290e@x)) G2937@g)) (gensym)) G290e@x) (if (eqv? G2910@t 'case-lambda) (cons 'case-lambda (map (lambda (G2935@x) (cons (car G2935@x) (map G290d@f (cdr G2935@x)))) (cdr G290e@x))) (if (eqv? G2910@t 'lambda) (cons* 'lambda (cadr G290e@x) (map G290d@f (cddr G290e@x))) (if (eqv? G2910@t 'letrec) ((lambda (G292d@bindings G292e@body*) ((lambda (G2931@lhs* G2932@rhs*) (cons* 'letrec (map list G2931@lhs* (map G290d@f G2932@rhs*)) (map G290d@f G292e@body*))) (map car G292d@bindings) (map cadr G292d@bindings))) (cadr G290e@x) (cddr G290e@x)) (if (eqv? G2910@t 'letrec*) ((lambda (G2925@bindings G2926@body*) ((lambda (G2929@lhs* G292a@rhs*) (cons* 'letrec* (map list G2929@lhs* (map G290d@f G292a@rhs*)) (map G290d@f G2926@body*))) (map car G2925@bindings) (map cadr G2925@bindings))) (cadr G290e@x) (cddr G290e@x)) (if (eqv? G2910@t 'library-letrec*) ((lambda (G2917@name G2918@x) ((lambda (G291b@bindings G291c@body*) ((lambda (G291f@lhs* G2920@lhs** G2921@rhs*) (cons* 'library-letrec* G2917@name (map list G291f@lhs* G2920@lhs** (map G290d@f G2921@rhs*)) (map G290d@f G291c@body*))) (map car G291b@bindings) (map cadr G291b@bindings) (map caddr G291b@bindings))) (cadr G2918@x) (cddr G2918@x))) (cadr G290e@x) (cdr G290e@x)) (if (eqv? G2910@t 'begin) (cons 'begin (map G290d@f (cdr G290e@x))) (if (eqv? G2910@t 'set!) (list 'set! (cadr G290e@x) (G290d@f (caddr G290e@x))) (if (eqv? G2910@t 'primitive) ((lambda (G2911@op) ((lambda (G2913@t) (if G2913@t ((lambda (G2915@loc) G2915@loc) G2913@t) G2911@op)) ((G28e7@current-primitive-locations) G2911@op))) (cadr G290e@x)) (if (eqv? G2910@t 'define) G290e@x (if (list? G290e@x) (map G290d@f G290e@x) (error 'rewrite '"invalid form ~s ~s" G290e@x (list? G290e@x)))))))))))))) (car G290e@x)) G290e@x))) G290d@f)) '#f))) (set! G28ed@expanded->core (lambda (G2939@x) ((G28eb@rewriter '#t) G2939@x))) (set! G28ef@compile-core-expr (lambda (G293b@x) ((G28eb@rewriter '#f) G293b@x))) (set! G28f1@pretty-print write) (set! G28f3@compile-core-expr-to-port (lambda (G293d@x G293e@p) (G28f1@pretty-print ((G28eb@rewriter '#f) G293d@x) G293e@p))) (begin (set! G2947@G28f3@compile-core-expr-to-port G28f3@compile-core-expr-to-port) (set! G2946@G28f1@pretty-print G28f1@pretty-print) (set! G2945@G28ef@compile-core-expr G28ef@compile-core-expr) (set! G2944@G28ed@expanded->core G28ed@expanded->core) (set! G2943@G28eb@rewriter G28eb@rewriter) (set! G2942@G28e9@mutable? G28e9@mutable?) (set! G2941@G28e7@current-primitive-locations G28e7@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29a1@make-collection G29a3@current-library-collection G29a9@G29a4 G29ab@G29a6 G29ad@G29a5 G29b2@library? G29b4@make-library G29b6@library-id G29b8@library-name G29ba@library-version G29bc@library-imp* G29be@library-vis* G29c0@library-inv* G29c2@library-subst G29c4@library-env G29c6@library-visit-state G29c8@library-invoke-state G29ca@library-visit-code G29cc@library-invoke-code G29ce@library-visible? G29d0@library-source-file-name G29d2@set-library-id! G29d4@set-library-name! G29d6@set-library-version! G29d8@set-library-imp*! G29da@set-library-vis*! G29dc@set-library-inv*! G29de@set-library-subst! G29e0@set-library-env! G29e2@set-library-visit-state! G29e4@set-library-invoke-state! G29e6@set-library-visit-code! G29e8@set-library-invoke-code! G29ea@set-library-visible?! G29ec@set-library-source-file-name! G29ee@rp G29f0@find-dependencies G29f2@find-library-by G29f4@library-path G29f6@library-extensions G29f8@library-name->file-name G29fa@file-locator G29fc@serialize-all G29fe@current-precompiled-library-loader G2a00@try-load-from-file G2a02@library-loader G2a04@current-library-expander G2a06@external-pending-libraries G2a08@find-external-library G2a0a@find-library-by-name G2a0c@library-exists? G2a0e@find-library-by-spec/die G2a10@label->binding-table G2a12@install-library-record G2a14@install-library G2a16@imported-label->binding G2a18@invoke-library G2a1a@visit-library G2a1c@invoke-library-by-spec G2a1e@installed-libraries G2a20@library-spec) (begin (set! G29a1@make-collection (lambda () ((lambda (G2a21@set) ((lambda (G2a24@set-cons) (begin (set! G2a24@set-cons (lambda (G2a29@x G2a2a@ls) (if (memq G2a29@x G2a2a@ls) G2a2a@ls (cons G2a29@x G2a2a@ls)))) (lambda G2a27 ((lambda (G2a28) (if (= G2a28 '0) (apply (lambda () G2a21@set) G2a27) (if (= G2a28 '1) (apply (lambda (G2a25@x) (set! G2a21@set (G2a24@set-cons G2a25@x G2a21@set))) G2a27) (error 'apply '"invalid arg count")))) (length G2a27))))) '#f)) '()))) (set! G29a3@current-library-collection (G28e1@G2814@make-parameter (G29a1@make-collection) (lambda (G2a2d@x) (begin (if (procedure? G2a2d@x) (void) (assertion-violation 'current-library-collection '"not a procedure" G2a2d@x)) G2a2d@x)))) (set! G29a9@G29a4 (make-record-type-descriptor 'library '#f 'G29a7 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29ab@G29a6 '#f) (set! G29ad@G29a5 (make-record-constructor-descriptor G29a9@G29a4 '#f G29ab@G29a6)) (set! G29b2@library? (record-predicate G29a9@G29a4)) (set! G29b4@make-library (record-constructor G29ad@G29a5)) (set! G29b6@library-id (record-accessor G29a9@G29a4 '0)) (set! G29b8@library-name (record-accessor G29a9@G29a4 '1)) (set! G29ba@library-version (record-accessor G29a9@G29a4 '2)) (set! G29bc@library-imp* (record-accessor G29a9@G29a4 '3)) (set! G29be@library-vis* (record-accessor G29a9@G29a4 '4)) (set! G29c0@library-inv* (record-accessor G29a9@G29a4 '5)) (set! G29c2@library-subst (record-accessor G29a9@G29a4 '6)) (set! G29c4@library-env (record-accessor G29a9@G29a4 '7)) (set! G29c6@library-visit-state (record-accessor G29a9@G29a4 '8)) (set! G29c8@library-invoke-state (record-accessor G29a9@G29a4 '9)) (set! G29ca@library-visit-code (record-accessor G29a9@G29a4 '10)) (set! G29cc@library-invoke-code (record-accessor G29a9@G29a4 '11)) (set! G29ce@library-visible? (record-accessor G29a9@G29a4 '12)) (set! G29d0@library-source-file-name (record-accessor G29a9@G29a4 '13)) (set! G29d2@set-library-id! (record-mutator G29a9@G29a4 '0)) (set! G29d4@set-library-name! (record-mutator G29a9@G29a4 '1)) (set! G29d6@set-library-version! (record-mutator G29a9@G29a4 '2)) (set! G29d8@set-library-imp*! (record-mutator G29a9@G29a4 '3)) (set! G29da@set-library-vis*! (record-mutator G29a9@G29a4 '4)) (set! G29dc@set-library-inv*! (record-mutator G29a9@G29a4 '5)) (set! G29de@set-library-subst! (record-mutator G29a9@G29a4 '6)) (set! G29e0@set-library-env! (record-mutator G29a9@G29a4 '7)) (set! G29e2@set-library-visit-state! (record-mutator G29a9@G29a4 '8)) (set! G29e4@set-library-invoke-state! (record-mutator G29a9@G29a4 '9)) (set! G29e6@set-library-visit-code! (record-mutator G29a9@G29a4 '10)) (set! G29e8@set-library-invoke-code! (record-mutator G29a9@G29a4 '11)) (set! G29ea@set-library-visible?! (record-mutator G29a9@G29a4 '12)) (set! G29ec@set-library-source-file-name! (record-mutator G29a9@G29a4 '13)) (set! G29ee@rp (G28de@G280e@make-record-printer 'library (lambda (G2a2f@x G2a30@p) (begin (if (G29b2@library? G2a2f@x) (void) (assertion-violation 'record-type-printer '"not a library")) (display (format '"#<library ~s>" (if (null? (G29ba@library-version G2a2f@x)) (G29b8@library-name G2a2f@x) (append (G29b8@library-name G2a2f@x) (list (G29ba@library-version G2a2f@x))))) G2a30@p))))) (set! G29f0@find-dependencies (lambda (G2a33@ls) (if (null? G2a33@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29f2@find-library-by (lambda (G2a35@pred) ((letrec ((G2a37@f (lambda (G2a39@ls) (if (null? G2a39@ls) '#f (if (G2a35@pred (car G2a39@ls)) (car G2a39@ls) (G2a37@f (cdr G2a39@ls))))))) G2a37@f) ((G29a3@current-library-collection))))) (set! G29f4@library-path (G28e1@G2814@make-parameter '(".") (lambda (G2a3b@x) (if (if (list? G2a3b@x) (begin '#f (for-all string? G2a3b@x)) '#f) (map (lambda (G2a3d@x) G2a3d@x) G2a3b@x) (assertion-violation 'library-path '"not a list of strings" G2a3b@x))))) (set! G29f6@library-extensions (G28e1@G2814@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a3f@x) (if (if (list? G2a3f@x) (begin '#f (for-all string? G2a3f@x)) '#f) (map (lambda (G2a41@x) G2a41@x) G2a3f@x) (assertion-violation 'library-extensions '"not a list of strings" G2a3f@x))))) (set! G29f8@library-name->file-name (lambda (G2a43@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a47@G2a45 G2a48@G2a46) ((lambda (G2a4b@extract G2a4c@p) ((lambda (G2a50@display-hex) (begin (set! G2a50@display-hex (lambda (G2a5f@n) (if (<= '0 G2a5f@n '9) (display G2a5f@n G2a4c@p) (display (integer->char (+ (char->integer '#\A) (- G2a5f@n '10))) G2a4c@p)))) (begin ((letrec ((G2a51@f (lambda (G2a53@ls) (if (null? G2a53@ls) (void) (begin (display '"/" G2a4c@p) (for-each (lambda (G2a55@c) (if ((lambda (G2a57@t) (if G2a57@t G2a57@t ((lambda (G2a59@t) (if G2a59@t G2a59@t ((lambda (G2a5b@t) (if G2a5b@t G2a5b@t (begin '#f (memv G2a55@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2a55@c '#\9)))) (char<=? '#\A G2a55@c '#\Z)))) (char<=? '#\a G2a55@c '#\z)) (display G2a55@c G2a4c@p) (begin (display '"%" G2a4c@p) ((lambda (G2a5d@n) (begin (G2a50@display-hex (quotient G2a5d@n '16)) (G2a50@display-hex (remainder G2a5d@n '16)))) (char->integer G2a55@c))))) (string->list (symbol->string (car G2a53@ls)))) (G2a51@f (cdr G2a53@ls))))))) G2a51@f) G2a43@x) (G2a4b@extract)))) '#f)) G2a48@G2a46 G2a47@G2a45))))) (set! G29fa@file-locator (G28e1@G2814@make-parameter (lambda (G2a61@x) ((lambda (G2a63@str) ((letrec ((G2a65@f (lambda (G2a67@ls G2a68@exts G2a69@failed-list) (if (null? G2a67@ls) ((lambda () ((lambda (G2a75@G2a70 G2a77@G2a72 G2a79@G2a71 G2a7e@G2a6f G2a80@make-library-resolution-condition G2a82@G2a6d G2a84@G2a6e G2a86@library-resolution-condition? G2a88@condition-library G2a8a@condition-files) (begin (set! G2a75@G2a70 (make-record-type-descriptor '&library-resolution &condition-rtd 'G2a73 '#f '#f '#((immutable library) (immutable files)))) (set! G2a77@G2a72 '#f) (set! G2a79@G2a71 (make-record-constructor-descriptor G2a75@G2a70 &condition-rcd G2a77@G2a72)) (set! G2a7e@G2a6f (record-predicate G2a75@G2a70)) (set! G2a80@make-library-resolution-condition (record-constructor G2a79@G2a71)) (set! G2a82@G2a6d (record-accessor G2a75@G2a70 '0)) (set! G2a84@G2a6e (record-accessor G2a75@G2a70 '1)) (set! G2a86@library-resolution-condition? (condition-predicate G2a75@G2a70)) (set! G2a88@condition-library (condition-accessor G2a75@G2a70 G2a82@G2a6d)) (set! G2a8a@condition-files (condition-accessor G2a75@G2a70 G2a84@G2a6e)) (raise (condition (G4afc@G4a12@make-error) (G4b16@G4a68@make-who-condition 'expander) (G4ae8@G49d2@make-message-condition '"cannot locate library in library-path") (G2a80@make-library-resolution-condition G2a61@x (reverse G2a69@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a68@exts) (G2a65@f (cdr G2a67@ls) (G29f6@library-extensions) G2a69@failed-list) ((lambda (G2a8b@name) (if (file-exists? G2a8b@name) G2a8b@name (G2a65@f G2a67@ls (cdr G2a68@exts) (cons G2a8b@name G2a69@failed-list)))) (string-append (car G2a67@ls) G2a63@str (car G2a68@exts)))))))) G2a65@f) (G29f4@library-path) (G29f6@library-extensions) '())) (G29f8@library-name->file-name G2a61@x))) (lambda (G2a8d@f) (if (procedure? G2a8d@f) G2a8d@f (assertion-violation 'file-locator '"not a procedure" G2a8d@f))))) (set! G29fc@serialize-all (lambda (G2a8f@serialize G2a90@compile) ((lambda (G2a94@library-desc) (begin (set! G2a94@library-desc (lambda (G2a97@x) (list (G29b6@library-id G2a97@x) (G29b8@library-name G2a97@x)))) (for-each (lambda (G2a95@x) (if (G29d0@library-source-file-name G2a95@x) (G2a8f@serialize (G29d0@library-source-file-name G2a95@x) (list (G29b6@library-id G2a95@x) (G29b8@library-name G2a95@x) (G29ba@library-version G2a95@x) (map G2a94@library-desc (G29bc@library-imp* G2a95@x)) (map G2a94@library-desc (G29be@library-vis* G2a95@x)) (map G2a94@library-desc (G29c0@library-inv* G2a95@x)) (G29c2@library-subst G2a95@x) (G29c4@library-env G2a95@x) (G2a90@compile (G29ca@library-visit-code G2a95@x)) (G2a90@compile (G29cc@library-invoke-code G2a95@x)) (G29ce@library-visible? G2a95@x))) (void))) ((G29a3@current-library-collection))))) '#f))) (set! G29fe@current-precompiled-library-loader (G28e1@G2814@make-parameter (lambda (G2a99@filename G2a9a@sk) '#f))) (set! G2a00@try-load-from-file (lambda (G2a9d@filename) ((G29fe@current-precompiled-library-loader) G2a9d@filename (lambda G2ac3 ((lambda (G2ac4) (if (= G2ac4 '11) (apply (lambda (G2a9f@id G2aa0@name G2aa1@ver G2aa2@imp* G2aa3@vis* G2aa4@inv* G2aa5@exp-subst G2aa6@exp-env G2aa7@visit-proc G2aa8@invoke-proc G2aa9@visible?) ((letrec ((G2ab5@f (lambda (G2ab7@deps) (if (null? G2ab7@deps) (begin (G2a14@install-library G2a9f@id G2aa0@name G2aa1@ver G2aa2@imp* G2aa3@vis* G2aa4@inv* G2aa5@exp-subst G2aa6@exp-env G2aa7@visit-proc G2aa8@invoke-proc '#f '#f G2aa9@visible? '#f) '#t) ((lambda (G2ab9@d) ((lambda (G2abb@label G2abc@dname) ((lambda (G2abf@l) (if (if (G29b2@library? G2abf@l) (begin '#f (eq? G2abb@label (G29b6@library-id G2abf@l))) '#f) (G2ab5@f (cdr G2ab7@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source.\n" G2aa0@name G2abc@dname G2a9d@filename) '#f))) (G2a0a@find-library-by-name G2abc@dname))) (car G2ab9@d) (cadr G2ab9@d))) (car G2ab7@deps)))))) G2ab5@f) (append G2aa2@imp* G2aa3@vis* G2aa4@inv*))) G2ac3) (if (>= G2ac4 '0) (apply (lambda G2ac1@others '#f) G2ac3) (error 'apply '"invalid arg count")))) (length G2ac3)))))) (set! G2a02@library-loader (G28e1@G2814@make-parameter (lambda (G2ac5@x) ((lambda (G2ac7@file-name) (if (not G2ac7@file-name) (assertion-violation '#f '"cannot file library" G2ac5@x) ((lambda (G2ac9@t) (if G2ac9@t G2ac9@t (begin '#f ((G2a04@current-library-expander) (G28e0@G2812@read-library-source-file G2ac7@file-name) G2ac7@file-name (lambda (G2acb@name) (if (equal? G2acb@name G2ac5@x) (void) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2acf@G2acd G2ad0@G2ace) ((lambda (G2ad3@e G2ad4@p) (begin (display '"expected to find library " G2ad4@p) (write G2ac5@x G2ad4@p) (display '" in file " G2ad4@p) (display G2ac7@file-name G2ad4@p) (display '", found " G2ad4@p) (write G2acb@name G2ad4@p) (display '" instead" G2ad4@p) (G2ad3@e))) G2ad0@G2ace G2acf@G2acd)))))))))) (G2a00@try-load-from-file G2ac7@file-name)))) ((G29fa@file-locator) G2ac5@x))) (lambda (G2ad7@f) (if (procedure? G2ad7@f) G2ad7@f (assertion-violation 'library-locator '"not a procedure" G2ad7@f))))) (set! G2a04@current-library-expander (G28e1@G2814@make-parameter (lambda (G2ad9@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2adb@f) (if (procedure? G2adb@f) G2adb@f (assertion-violation 'library-expander '"not a procedure" G2adb@f))))) (set! G2a06@external-pending-libraries (G28e1@G2814@make-parameter '())) (set! G2a08@find-external-library (lambda (G2add@name) (begin (if (member G2add@name (G2a06@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2add@name) (void)) ((lambda (G2ae1@G2adf@external-pending-libraries G2ae2@G2ae0@external-pending-libraries) ((lambda (G2ae5@swap) (dynamic-wind G2ae5@swap (lambda () (begin ((G2a02@library-loader) G2add@name) ((lambda (G2ae7@t) (if G2ae7@t G2ae7@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2add@name)))) (G29f2@find-library-by (lambda (G2ae9@x) (equal? (G29b8@library-name G2ae9@x) G2add@name)))))) G2ae5@swap)) (lambda () ((lambda (G2aeb@t) (begin (G2ae1@G2adf@external-pending-libraries G2ae2@G2ae0@external-pending-libraries) (set! G2ae2@G2ae0@external-pending-libraries G2aeb@t))) (G2ae1@G2adf@external-pending-libraries))))) G2a06@external-pending-libraries (cons G2add@name (G2a06@external-pending-libraries)))))) (set! G2a0a@find-library-by-name (lambda (G2aed@name) ((lambda (G2aef@t) (if G2aef@t G2aef@t (begin '#f (G2a08@find-external-library G2aed@name)))) (G29f2@find-library-by (lambda (G2af1@x) (equal? (G29b8@library-name G2af1@x) G2aed@name)))))) (set! G2a0c@library-exists? (lambda (G2af3@name) (if (G29f2@find-library-by (lambda (G2af5@x) (equal? (G29b8@library-name G2af5@x) G2af3@name))) (begin '#f '#t) '#f))) (set! G2a0e@find-library-by-spec/die (lambda (G2af7@spec) ((lambda (G2af9@id) ((lambda (G2afb@t) (if G2afb@t G2afb@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2af7@spec)))) (G29f2@find-library-by (lambda (G2afd@x) (eq? G2af9@id (G29b6@library-id G2afd@x)))))) (car G2af7@spec)))) (set! G2a10@label->binding-table (make-eq-hashtable)) (set! G2a12@install-library-record (lambda (G2aff@lib) (begin ((lambda (G2b01@exp-env) (for-each (lambda (G2b03@x) ((lambda (G2b05@label G2b06@binding) ((lambda (G2b09@binding) (hashtable-set! G2a10@label->binding-table G2b05@label G2b09@binding)) ((lambda (G2b0b@t) (if (eqv? G2b0b@t 'global) (cons 'global (cons G2aff@lib (cdr G2b06@binding))) (if (eqv? G2b0b@t 'global-macro) (cons 'global-macro (cons G2aff@lib (cdr G2b06@binding))) (if (eqv? G2b0b@t 'global-macro!) (cons 'global-macro! (cons G2aff@lib (cdr G2b06@binding))) G2b06@binding)))) (car G2b06@binding)))) (car G2b03@x) (cdr G2b03@x))) G2b01@exp-env)) (G29c4@library-env G2aff@lib)) ((G29a3@current-library-collection) G2aff@lib)))) (set! G2a14@install-library (lambda (G2b0c@id G2b0d@name G2b0e@ver G2b0f@imp* G2b10@vis* G2b11@inv* G2b12@exp-subst G2b13@exp-env G2b14@visit-proc G2b15@invoke-proc G2b16@visit-code G2b17@invoke-code G2b18@visible? G2b19@source-file-name) ((lambda (G2b28@imp-lib* G2b29@vis-lib* G2b2a@inv-lib*) (begin (if (if (symbol? G2b0c@id) (if (list? G2b0d@name) (begin '#f (list? G2b0e@ver)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b0c@id G2b0d@name G2b0e@ver)) (if (G2a0c@library-exists? G2b0d@name) (assertion-violation 'install-library '"library is already installed" G2b0d@name) (void)) ((lambda (G2b2e@lib) (G2a12@install-library-record G2b2e@lib)) (G29b4@make-library G2b0c@id G2b0d@name G2b0e@ver G2b28@imp-lib* G2b29@vis-lib* G2b2a@inv-lib* G2b12@exp-subst G2b13@exp-env G2b14@visit-proc G2b15@invoke-proc G2b16@visit-code G2b17@invoke-code G2b18@visible? G2b19@source-file-name)))) (map G2a0e@find-library-by-spec/die G2b0f@imp*) (map G2a0e@find-library-by-spec/die G2b10@vis*) (map G2a0e@find-library-by-spec/die G2b11@inv*)))) (set! G2a16@imported-label->binding (lambda (G2b30@lab) (hashtable-ref G2a10@label->binding-table G2b30@lab '#f))) (set! G2a18@invoke-library (lambda (G2b32@lib) ((lambda (G2b34@invoke) (if (procedure? G2b34@invoke) (begin (G29e4@set-library-invoke-state! G2b32@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b32@lib))) (for-each G2a18@invoke-library (G29c0@library-inv* G2b32@lib)) (G29e4@set-library-invoke-state! G2b32@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b32@lib))) (G2b34@invoke) (G29e4@set-library-invoke-state! G2b32@lib '#t)) (void))) (G29c8@library-invoke-state G2b32@lib)))) (set! G2a1a@visit-library (lambda (G2b36@lib) ((lambda (G2b38@visit) (if (procedure? G2b38@visit) (begin (G29e2@set-library-visit-state! G2b36@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b36@lib))) (for-each G2a18@invoke-library (G29be@library-vis* G2b36@lib)) (G29e2@set-library-visit-state! G2b36@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b36@lib))) (G2b38@visit) (G29e2@set-library-visit-state! G2b36@lib '#t)) (void))) (G29c6@library-visit-state G2b36@lib)))) (set! G2a1c@invoke-library-by-spec (lambda (G2b3a@spec) (G2a18@invoke-library (G2a0e@find-library-by-spec/die G2b3a@spec)))) (set! G2a1e@installed-libraries (lambda G2b44 ((lambda (G2b45) (if (= G2b45 '1) (apply (lambda (G2b3c@all?) ((letrec ((G2b3e@f (lambda (G2b40@ls) (if (null? G2b40@ls) '() (if ((lambda (G2b42@t) (if G2b42@t G2b42@t (begin '#f (G29ce@library-visible? (car G2b40@ls))))) G2b3c@all?) (cons (car G2b40@ls) (G2b3e@f (cdr G2b40@ls))) (G2b3e@f (cdr G2b40@ls))))))) G2b3e@f) ((G29a3@current-library-collection)))) G2b44) (if (= G2b45 '0) (apply (lambda () (G2a1e@installed-libraries '#f)) G2b44) (error 'apply '"invalid arg count")))) (length G2b44)))) (set! G2a20@library-spec (lambda (G2b46@x) (begin (if (G29b2@library? G2b46@x) (void) (assertion-violation 'library-spec '"not a library" G2b46@x)) (list (G29b6@library-id G2b46@x) (G29b8@library-name G2b46@x) (G29ba@library-version G2b46@x))))) (begin (set! G2b84@G2a20@library-spec G2a20@library-spec) (set! G2b83@G2a1e@installed-libraries G2a1e@installed-libraries) (set! G2b82@G2a1c@invoke-library-by-spec G2a1c@invoke-library-by-spec) (set! G2b81@G2a1a@visit-library G2a1a@visit-library) (set! G2b80@G2a18@invoke-library G2a18@invoke-library) (set! G2b7f@G2a16@imported-label->binding G2a16@imported-label->binding) (set! G2b7e@G2a14@install-library G2a14@install-library) (set! G2b7d@G2a12@install-library-record G2a12@install-library-record) (set! G2b7c@G2a10@label->binding-table G2a10@label->binding-table) (set! G2b7b@G2a0e@find-library-by-spec/die G2a0e@find-library-by-spec/die) (set! G2b7a@G2a0c@library-exists? G2a0c@library-exists?) (set! G2b79@G2a0a@find-library-by-name G2a0a@find-library-by-name) (set! G2b78@G2a08@find-external-library G2a08@find-external-library) (set! G2b77@G2a06@external-pending-libraries G2a06@external-pending-libraries) (set! G2b76@G2a04@current-library-expander G2a04@current-library-expander) (set! G2b75@G2a02@library-loader G2a02@library-loader) (set! G2b74@G2a00@try-load-from-file G2a00@try-load-from-file) (set! G2b73@G29fe@current-precompiled-library-loader G29fe@current-precompiled-library-loader) (set! G2b72@G29fc@serialize-all G29fc@serialize-all) (set! G2b71@G29fa@file-locator G29fa@file-locator) (set! G2b70@G29f8@library-name->file-name G29f8@library-name->file-name) (set! G2b6f@G29f6@library-extensions G29f6@library-extensions) (set! G2b6e@G29f4@library-path G29f4@library-path) (set! G2b6d@G29f2@find-library-by G29f2@find-library-by) (set! G2b6c@G29f0@find-dependencies G29f0@find-dependencies) (set! G2b6b@G29ee@rp G29ee@rp) (set! G2b6a@G29ec@set-library-source-file-name! G29ec@set-library-source-file-name!) (set! G2b69@G29ea@set-library-visible?! G29ea@set-library-visible?!) (set! G2b68@G29e8@set-library-invoke-code! G29e8@set-library-invoke-code!) (set! G2b67@G29e6@set-library-visit-code! G29e6@set-library-visit-code!) (set! G2b66@G29e4@set-library-invoke-state! G29e4@set-library-invoke-state!) (set! G2b65@G29e2@set-library-visit-state! G29e2@set-library-visit-state!) (set! G2b64@G29e0@set-library-env! G29e0@set-library-env!) (set! G2b63@G29de@set-library-subst! G29de@set-library-subst!) (set! G2b62@G29dc@set-library-inv*! G29dc@set-library-inv*!) (set! G2b61@G29da@set-library-vis*! G29da@set-library-vis*!) (set! G2b60@G29d8@set-library-imp*! G29d8@set-library-imp*!) (set! G2b5f@G29d6@set-library-version! G29d6@set-library-version!) (set! G2b5e@G29d4@set-library-name! G29d4@set-library-name!) (set! G2b5d@G29d2@set-library-id! G29d2@set-library-id!) (set! G2b5c@G29d0@library-source-file-name G29d0@library-source-file-name) (set! G2b5b@G29ce@library-visible? G29ce@library-visible?) (set! G2b5a@G29cc@library-invoke-code G29cc@library-invoke-code) (set! G2b59@G29ca@library-visit-code G29ca@library-visit-code) (set! G2b58@G29c8@library-invoke-state G29c8@library-invoke-state) (set! G2b57@G29c6@library-visit-state G29c6@library-visit-state) (set! G2b56@G29c4@library-env G29c4@library-env) (set! G2b55@G29c2@library-subst G29c2@library-subst) (set! G2b54@G29c0@library-inv* G29c0@library-inv*) (set! G2b53@G29be@library-vis* G29be@library-vis*) (set! G2b52@G29bc@library-imp* G29bc@library-imp*) (set! G2b51@G29ba@library-version G29ba@library-version) (set! G2b50@G29b8@library-name G29b8@library-name) (set! G2b4f@G29b6@library-id G29b6@library-id) (set! G2b4e@G29b4@make-library G29b4@make-library) (set! G2b4d@G29b2@library? G29b2@library?) (set! G2b4c@G29ad@G29a5 G29ad@G29a5) (set! G2b4b@G29ab@G29a6 G29ab@G29a6) (set! G2b4a@G29a9@G29a4 G29a9@G29a4) (set! G2b49@G29a3@current-library-collection G29a3@current-library-collection) (set! G2b48@G29a1@make-collection G29a1@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b87@build-global-define G2c0b@build-lambda G2c0d@build-case-lambda G2c0f@build-let G2c57@build-sequence G2c59@build-void G2c5b@build-letrec G2c5d@build-letrec* G2c5f@build-library-letrec* G2c61@build-receive) (begin (set! G2b87@build-global-define (lambda (G2c62@x) (G2c59@build-void))) (set! G2c0b@build-lambda (lambda (G2c64@ae G2c65@vars G2c66@exp) (list 'lambda G2c65@vars G2c66@exp))) (set! G2c0d@build-case-lambda (lambda (G2c6a@ae G2c6b@vars* G2c6c@exp*) ((lambda (G2c71@build-error G2c73@build-pred G2c75@build-apply G2c77@expand-case-lambda) (begin (set! G2c71@build-error (lambda (G2ca6@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c73@build-pred (lambda (G2c90@ae G2c91@n G2c92@vars) (call-with-values (lambda () ((letrec ((G2c98@f (lambda (G2c9a@vars G2c9b@count) (if (pair? G2c9a@vars) (G2c98@f (cdr G2c9a@vars) (+ G2c9b@count '1)) (if (null? G2c9a@vars) (values G2c9b@count '=) (values G2c9b@count '>=)))))) G2c98@f) G2c92@vars '0)) (lambda (G2c9e@G2c96 G2c9f@G2c97) ((lambda (G2ca2@pred G2ca3@count) (list (list 'primitive G2ca2@pred) G2c91@n (list 'quote G2ca3@count))) G2c9f@G2c97 G2c9e@G2c96))))) (set! G2c75@build-apply (lambda (G2c88@ae G2c89@g G2c8a@vars G2c8b@exp) (list '(primitive apply) (G2c0b@build-lambda G2c88@ae G2c8a@vars G2c8b@exp) G2c89@g))) (set! G2c77@expand-case-lambda (lambda (G2c78@ae G2c79@vars G2c7a@exp*) ((lambda (G2c7e@g G2c7f@n) (list 'lambda G2c7e@g (G2c0f@build-let G2c78@ae (list G2c7f@n) (list (list '(primitive length) G2c7e@g)) ((letrec ((G2c82@f (lambda (G2c84@vars* G2c85@exp*) (if (null? G2c84@vars*) (G2c71@build-error G2c78@ae) (list 'if (G2c73@build-pred G2c78@ae G2c7f@n (car G2c84@vars*)) (G2c75@build-apply G2c78@ae G2c7e@g (car G2c84@vars*) (car G2c85@exp*)) (G2c82@f (cdr G2c84@vars*) (cdr G2c85@exp*))))))) G2c82@f) G2c6b@vars* G2c7a@exp*)))) (gensym) (gensym)))) (if (= (length G2c6c@exp*) '1) (G2c0b@build-lambda G2c6a@ae (car G2c6b@vars*) (car G2c6c@exp*)) (G2c77@expand-case-lambda G2c6a@ae G2c6b@vars* G2c6c@exp*)))) '#f '#f '#f '#f))) (set! G2c0f@build-let (lambda (G2ca8@ae G2ca9@lhs* G2caa@rhs* G2cab@body) (cons (G2c0b@build-lambda G2ca8@ae G2ca9@lhs* G2cab@body) G2caa@rhs*))) (set! G2c57@build-sequence (lambda (G2cb0@ae G2cb1@exps) ((letrec ((G2cb4@loop (lambda (G2cb6@exps) (if (null? (cdr G2cb6@exps)) (car G2cb6@exps) (if (equal? (car G2cb6@exps) (G2c59@build-void)) (G2cb4@loop (cdr G2cb6@exps)) (cons 'begin G2cb6@exps)))))) G2cb4@loop) G2cb1@exps))) (set! G2c59@build-void (lambda () '((primitive void)))) (set! G2c5b@build-letrec (lambda (G2cb8@ae G2cb9@vars G2cba@val-exps G2cbb@body-exp) (if (null? G2cb9@vars) G2cbb@body-exp (list 'letrec (map list G2cb9@vars G2cba@val-exps) G2cbb@body-exp)))) (set! G2c5d@build-letrec* (lambda (G2cc0@ae G2cc1@vars G2cc2@val-exps G2cc3@body-exp) (if (null? G2cc1@vars) G2cc3@body-exp (G2c0f@build-let G2cc0@ae G2cc1@vars (map (lambda (G2cc8@x) (list 'quote '#f)) G2cc1@vars) (G2c57@build-sequence G2cc0@ae (append (map (lambda (G2cca@lhs G2ccb@rhs) (list 'set! G2cca@lhs G2ccb@rhs)) G2cc1@vars G2cc2@val-exps) (list G2cc3@body-exp))))))) (set! G2c5f@build-library-letrec* (lambda (G2cce@ae G2ccf@name G2cd0@vars G2cd1@locs G2cd2@val-exps G2cd3@body-exp) (list 'library-letrec* G2ccf@name (map list G2cd0@vars G2cd1@locs G2cd2@val-exps) G2cd3@body-exp))) (set! G2c61@build-receive (lambda (G2cda@ae G2cdb@vars G2cdc@producer G2cdd@body*) (begin (display '"************** in ") (cons 'receive (cons G2cdb@vars (cons G2cdc@producer G2cdd@body*)))))) (begin (set! G2ceb@G2c61@build-receive G2c61@build-receive) (set! G2cea@G2c5f@build-library-letrec* G2c5f@build-library-letrec*) (set! G2ce9@G2c5d@build-letrec* G2c5d@build-letrec*) (set! G2ce8@G2c5b@build-letrec G2c5b@build-letrec) (set! G2ce7@G2c59@build-void G2c59@build-void) (set! G2ce6@G2c57@build-sequence G2c57@build-sequence) (set! G2ce5@G2c0f@build-let G2c0f@build-let) (set! G2ce4@G2c0d@build-case-lambda G2c0d@build-case-lambda) (set! G2ce3@G2c0b@build-lambda G2c0b@build-lambda) (set! G2ce2@G2b87@build-global-define G2b87@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cf8@set-cons G2cfa@set-union G2cff@top-mark* G2d01@top-marked? G2d03@gen-lexical G2d05@gen-global G2d07@gen-label G2d09@gen-top-level-label G2d0b@gen-define-label+loc G2d0d@gen-define-label G2d13@G2d0e G2d15@G2d10 G2d17@G2d0f G2d1c@rib? G2d1e@make-rib G2d20@rib-sym* G2d22@rib-mark** G2d24@rib-label* G2d26@rib-sealed/freq G2d28@set-rib-sym*! G2d2a@set-rib-mark**! G2d2c@set-rib-label*! G2d2e@set-rib-sealed/freq! G2d30@make-empty-rib G2d32@extend-rib! G2d34@make-rib-map G2d36@seal-rib! G2d38@unseal-rib! G2d3a@make-full-rib G2d40@G2d3b G2d42@G2d3d G2d44@G2d3c G2d49@stx? G2d4b@make-stx G2d4d@stx-expr G2d4f@stx-mark* G2d51@stx-subst* G2d53@stx-ae* G2d55@set-stx-expr! G2d57@set-stx-mark*! G2d59@set-stx-subst*! G2d5b@set-stx-ae*! G2d5d@rp G2d5f@datum->stx G2d61@gen-mark G2d63@anti-mark G2d65@anti-mark? G2d67@join-wraps G2d69@mkstx G2d6b@add-mark G2d6d@add-subst G2d6f@syntax-kind? G2d71@syntax-vector->list G2d73@syntax-pair? G2d75@syntax-vector? G2d77@syntax-null? G2d79@syntax-list? G2d7b@syntax-car G2d7d@syntax-cdr G2d7f@syntax->list G2d81@id? G2d83@id->sym G2d85@same-marks? G2d87@bound-id=? G2d89@free-id=? G2d8b@valid-bound-ids? G2d8d@distinct-bound-ids? G2d8f@bound-id-member? G2d91@self-evaluating? G2d93@strip-annotations G2d95@strip G2d97@stx->datum G2d99@same-marks*? G2d9b@id->label G2d9d@id->real-label G2d9f@label->binding G2da1@make-binding G2da3@binding-type G2da5@binding-value G2da7@raise-unbound-error G2da9@syntax-type G2dc0@sanitize-binding G2dc2@make-variable-transformer G2dc4@variable-transformer? G2dc6@variable-transformer-procedure G2dc8@make-eval-transformer G2f4c@parse-define G2f4e@parse-define-syntax G2f50@scheme-stx-hashtable G2f52@scheme-stx G2f54@lexical-var G2f56@lexical-mutable? G2f58@set-lexical-mutable! G2f5a@add-lexical G2f5c@add-lexicals G2f5e@letrec-helper G2f60@letrec-transformer G2f62@letrec*-transformer G2f64@fluid-let-syntax-transformer G2f66@type-descriptor-transformer G2f68@record-type-descriptor-transformer G2f6a@record-constructor-descriptor-transformer G2f6c@when-transformer G2f6e@unless-transformer G2f70@if-transformer G2f72@case-transformer G2f74@quote-transformer G2f76@case-lambda-transformer G2f78@lambda-transformer G2f7a@bless G2f7c@with-syntax-macro G2f7e@invalid-fmls-error G2f80@let-macro G2f82@let-values-macro G2f84@let*-values-macro G2f86@trace-lambda-macro G2f88@trace-define-macro G2f8a@trace-define-syntax-macro G2f8c@trace-let/rec-syntax G2f8e@trace-let-syntax-macro G2f90@trace-letrec-syntax-macro G2f92@guard-macro G2f94@define-enumeration-macro G2f96@time-macro G2f98@delay-macro G2f9a@assert-macro G2f9c@endianness-macro G2f9e@identifier-syntax-macro G2fa0@do-macro G2fa2@let*-macro G2fa4@or-macro G2fa6@and-macro G2fa8@cond-macro G2faa@do-include G2fac@include-macro G2fae@include-into-macro G2fb0@syntax-rules-macro G2fb2@quasiquote-macro G2fb4@quasisyntax-macro G2fb6@define-struct-macro G2fb8@define-record-type-macro G2fba@define-condition-type-macro G2fbc@incorrect-usage-macro G2fbe@parameterize-transformer G2fc0@foreign-call-transformer G2fc2@convert-pattern G2fc4@syntax-dispatch G2fc6@ellipsis? G2fc8@underscore? G2fca@verify-literals G2fcc@syntax-case-transformer G2fce@ellipsis-map G2fd0@syntax-transformer G2fd2@core-macro-transformer G2fd4@file-options-macro G2fd6@symbol-macro G2fd8@macro-transformer G2fda@local-macro-transformer G2fdc@do-macro-call G2fde@chi-macro G2fe0@chi-local-macro G2fe2@chi-global-macro G2fe4@chi-expr* G2fe6@chi-application G2fe8@chi-expr G2fea@chi-set! G2fec@verify-formals G2fee@chi-lambda-clause G2ff0@chi-lambda-clause* G2ff2@chi-defun G2ff4@chi-rhs G2ff6@expand-interaction-rhs*/init* G2ff8@chi-rhs* G2ffa@find-bound=? G2ffc@find-dups G2ffe@chi-internal G3000@parse-module G3006@G3001 G3008@G3003 G300a@G3002 G300f@module-interface? G3011@make-module-interface G3013@module-interface-first-mark G3015@module-interface-exp-id-vec G3017@module-interface-exp-lab-vec G3019@set-module-interface-first-mark! G301b@set-module-interface-exp-id-vec! G301d@set-module-interface-exp-lab-vec! G301f@module-interface-exp-id* G3021@chi-internal-module G3023@chi-body* G3025@expand-transformer G3027@parse-exports G3029@parse-library-name G302b@parse-library G302d@parse-import-spec* G302f@make-top-rib G3031@make-collector G3033@inv-collector G3035@vis-collector G3037@imp-collector G3039@chi-library-internal G303b@chi-interaction-expr G303d@library-body-expander G303f@core-library-expander G3041@parse-top-level-program G3043@top-level-expander G3049@G3044 G304b@G3046 G304d@G3045 G3052@env? G3054@make-env G3056@env-names G3058@env-labels G305a@env-itc G305c@set-env-names! G305e@set-env-labels! G3060@set-env-itc! G3062@rp G3068@G3063 G306a@G3065 G306c@G3064 G3071@interaction-env? G3073@make-interaction-env G3075@interaction-env-rib G3077@interaction-env-r G3079@interaction-env-locs G307b@set-interaction-env-rib! G307d@set-interaction-env-r! G307f@set-interaction-env-locs! G3081@rp G3083@interaction-environment-symbols G3085@environment-symbols G3087@environment? G3089@environment G308b@null-environment G308d@scheme-report-environment G308f@expand G3091@eval G3093@library-expander G3095@boot-library-expand G3097@rev-map-append G3099@build-exports G309b@make-export-subst G309d@make-export-env/macros G309f@generate-temporaries G30a1@free-identifier=? G30a3@bound-identifier=? G30a5@extract-position-condition G30a7@syntax-error G30a9@extract-trace G30ab@syntax-violation* G30ad@syntax-violation G30af@identifier? G30b1@datum->syntax G30b3@syntax->datum G30b5@compile-r6rs-top-level G30b7@pre-compile-r6rs-top-level G30b9@interaction-environment G30bb@top-level-context) (begin (set! G2cf8@set-cons (lambda (G30bc@x G30bd@ls) (if (memq G30bc@x G30bd@ls) G30bd@ls (cons G30bc@x G30bd@ls)))) (set! G2cfa@set-union (lambda (G30c0@ls1 G30c1@ls2) (if (null? G30c0@ls1) G30c1@ls2 (if (memq (car G30c0@ls1) G30c1@ls2) (G2cfa@set-union (cdr G30c0@ls1) G30c1@ls2) (cons (car G30c0@ls1) (G2cfa@set-union (cdr G30c0@ls1) G30c1@ls2)))))) (set! G2cff@top-mark* '(top)) (set! G2d01@top-marked? (lambda (G30c4@m*) (memq 'top G30c4@m*))) (set! G2d03@gen-lexical (lambda (G30c6@sym) (if (symbol? G30c6@sym) (gensym G30c6@sym) (if (G2d49@stx? G30c6@sym) (G2d03@gen-lexical (G2d83@id->sym G30c6@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G30c6@sym))))) (set! G2d05@gen-global (lambda (G30c8@x) (G2d03@gen-lexical G30c8@x))) (set! G2d07@gen-label (lambda (G30ca@_) (gensym))) (set! G2d09@gen-top-level-label (lambda (G30cc@id G30cd@rib) ((lambda (G30d1@find) (begin (set! G30d1@find (lambda (G30dc@sym G30dd@mark* G30de@sym* G30df@mark** G30e0@label*) (if (pair? G30de@sym*) (begin '#f (if (if (eq? G30dc@sym (car G30de@sym*)) (begin '#f (G2d85@same-marks? G30dd@mark* (car G30df@mark**))) '#f) (car G30e0@label*) (G30d1@find G30dc@sym G30dd@mark* (cdr G30de@sym*) (cdr G30df@mark**) (cdr G30e0@label*)))) '#f))) ((lambda (G30d2@sym G30d3@mark*) ((lambda (G30d6@sym*) ((lambda (G30d8@t) (if G30d8@t ((lambda (G30da@label) (if (G2b7f@G2a16@imported-label->binding G30da@label) (gensym) G30da@label)) G30d8@t) (gensym))) (if (memq G30d2@sym (G2d20@rib-sym* G30cd@rib)) (begin '#f (G30d1@find G30d2@sym G30d3@mark* G30d6@sym* (G2d22@rib-mark** G30cd@rib) (G2d24@rib-label* G30cd@rib))) '#f))) (G2d20@rib-sym* G30cd@rib))) (G2d83@id->sym G30cc@id) (G2d4f@stx-mark* G30cc@id)))) '#f))) (set! G2d0b@gen-define-label+loc (lambda (G30e6@id G30e7@rib) ((lambda (G30ea@t) (if G30ea@t ((lambda (G30ec@env) ((lambda (G30ee@label G30ef@locs) (values G30ee@label ((lambda (G30f2@t) (if G30f2@t (cdr G30f2@t) ((lambda (G30f4@loc) (begin (G307f@set-interaction-env-locs! G30ec@env (cons (cons G30ee@label G30f4@loc) G30ef@locs)) G30f4@loc)) (G2d03@gen-lexical G30e6@id)))) (assq G30ee@label G30ef@locs)))) (G2d09@gen-top-level-label G30e6@id G30e7@rib) (G3079@interaction-env-locs G30ec@env))) G30ea@t) (values (gensym) (G2d03@gen-lexical G30e6@id)))) (G30bb@top-level-context)))) (set! G2d0d@gen-define-label (lambda (G30f6@id G30f7@rib) (if (G30bb@top-level-context) (G2d09@gen-top-level-label G30f6@id G30f7@rib) (gensym)))) (set! G2d13@G2d0e (make-record-type-descriptor 'rib '#f 'G2d11 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! G2d15@G2d10 '#f) (set! G2d17@G2d0f (make-record-constructor-descriptor G2d13@G2d0e '#f G2d15@G2d10)) (set! G2d1c@rib? (record-predicate G2d13@G2d0e)) (set! G2d1e@make-rib (record-constructor G2d17@G2d0f)) (set! G2d20@rib-sym* (record-accessor G2d13@G2d0e '0)) (set! G2d22@rib-mark** (record-accessor G2d13@G2d0e '1)) (set! G2d24@rib-label* (record-accessor G2d13@G2d0e '2)) (set! G2d26@rib-sealed/freq (record-accessor G2d13@G2d0e '3)) (set! G2d28@set-rib-sym*! (record-mutator G2d13@G2d0e '0)) (set! G2d2a@set-rib-mark**! (record-mutator G2d13@G2d0e '1)) (set! G2d2c@set-rib-label*! (record-mutator G2d13@G2d0e '2)) (set! G2d2e@set-rib-sealed/freq! (record-mutator G2d13@G2d0e '3)) (set! G2d30@make-empty-rib (lambda () (G2d1e@make-rib '() '() '() '#f))) (set! G2d32@extend-rib! (lambda (G30fa@rib G30fb@id G30fc@label) ((lambda (G3101@find) (begin (set! G3101@find (lambda (G310c@sym G310d@mark* G310e@sym* G310f@mark** G3110@label*) (if (pair? G310e@sym*) (begin '#f (if (if (eq? G310c@sym (car G310e@sym*)) (begin '#f (G2d85@same-marks? G310d@mark* (car G310f@mark**))) '#f) G3110@label* (G3101@find G310c@sym G310d@mark* (cdr G310e@sym*) (cdr G310f@mark**) (cdr G3110@label*)))) '#f))) (begin (if (G2d26@rib-sealed/freq G30fa@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G30fa@rib) (void)) ((lambda (G3102@sym G3103@mark*) ((lambda (G3106@sym*) ((lambda (G3108@t) (if G3108@t ((lambda (G310a@p) (if (eq? G30fc@label (car G310a@p)) (void) (if (G30bb@top-level-context) (set-car! G310a@p G30fc@label) (G30ad@syntax-violation '#f '"cannot redefine" G30fb@id)))) G3108@t) (begin (G2d28@set-rib-sym*! G30fa@rib (cons G3102@sym G3106@sym*)) (G2d2a@set-rib-mark**! G30fa@rib (cons G3103@mark* (G2d22@rib-mark** G30fa@rib))) (G2d2c@set-rib-label*! G30fa@rib (cons G30fc@label (G2d24@rib-label* G30fa@rib)))))) (if (memq G3102@sym (G2d20@rib-sym* G30fa@rib)) (begin '#f (G3101@find G3102@sym G3103@mark* G3106@sym* (G2d22@rib-mark** G30fa@rib) (G2d24@rib-label* G30fa@rib))) '#f))) (G2d20@rib-sym* G30fa@rib))) (G2d83@id->sym G30fb@id) (G2d4f@stx-mark* G30fb@id))))) '#f))) (set! G2d34@make-rib-map (lambda (G3116@sym*) ((lambda (G3118@ht) ((letrec ((G311a@f (lambda (G311c@i G311d@sym*) (if (null? G311d@sym*) G3118@ht (begin (hashtable-update! G3118@ht (car G311d@sym*) (lambda (G3120@x) (cons G311c@i G3120@x)) '()) (G311a@f (+ G311c@i '1) (cdr G311d@sym*))))))) G311a@f) '0 G3116@sym*)) (make-eq-hashtable)))) (set! G2d36@seal-rib! (lambda (G3122@rib) ((lambda (G3124@sym*) (if (null? G3124@sym*) (void) (begin (G2d28@set-rib-sym*! G3122@rib (list->vector G3124@sym*)) (G2d2a@set-rib-mark**! G3122@rib (list->vector (G2d22@rib-mark** G3122@rib))) (G2d2c@set-rib-label*! G3122@rib (list->vector (G2d24@rib-label* G3122@rib))) (G2d2e@set-rib-sealed/freq! G3122@rib (G2d34@make-rib-map G3124@sym*))))) (G2d20@rib-sym* G3122@rib)))) (set! G2d38@unseal-rib! (lambda (G3126@rib) (if (G2d26@rib-sealed/freq G3126@rib) (begin (G2d2e@set-rib-sealed/freq! G3126@rib '#f) (G2d28@set-rib-sym*! G3126@rib (vector->list (G2d20@rib-sym* G3126@rib))) (G2d2a@set-rib-mark**! G3126@rib (vector->list (G2d22@rib-mark** G3126@rib))) (G2d2c@set-rib-label*! G3126@rib (vector->list (G2d24@rib-label* G3126@rib)))) (void)))) (set! G2d3a@make-full-rib (lambda (G3128@id* G3129@label*) ((lambda (G312c@r) (begin (G2d36@seal-rib! G312c@r) G312c@r)) (G2d1e@make-rib (map G2d83@id->sym G3128@id*) (map G2d4f@stx-mark* G3128@id*) G3129@label* '#f)))) (set! G2d40@G2d3b (make-record-type-descriptor 'stx '#f 'G2d3e '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d42@G2d3d '#f) (set! G2d44@G2d3c (make-record-constructor-descriptor G2d40@G2d3b '#f G2d42@G2d3d)) (set! G2d49@stx? (record-predicate G2d40@G2d3b)) (set! G2d4b@make-stx (record-constructor G2d44@G2d3c)) (set! G2d4d@stx-expr (record-accessor G2d40@G2d3b '0)) (set! G2d4f@stx-mark* (record-accessor G2d40@G2d3b '1)) (set! G2d51@stx-subst* (record-accessor G2d40@G2d3b '2)) (set! G2d53@stx-ae* (record-accessor G2d40@G2d3b '3)) (set! G2d55@set-stx-expr! (record-mutator G2d40@G2d3b '0)) (set! G2d57@set-stx-mark*! (record-mutator G2d40@G2d3b '1)) (set! G2d59@set-stx-subst*! (record-mutator G2d40@G2d3b '2)) (set! G2d5b@set-stx-ae*! (record-mutator G2d40@G2d3b '3)) (set! G2d5d@rp (G28de@G280e@make-record-printer 'stx (lambda (G312e@x G312f@p) (begin (display '"#<syntax " G312f@p) (write (G2d97@stx->datum G312e@x) G312f@p) ((lambda (G3132@expr) (if (G28d9@G2804@annotation? G3132@expr) ((lambda (G3134@src) (if (pair? G3134@src) (begin (display '" [" G312f@p) (display (cdr G3134@src) G312f@p) (display '" of " G312f@p) (display (car G3134@src) G312f@p) (display '"]" G312f@p)) (void))) (G28da@G2806@annotation-source G3132@expr)) (void))) (G2d4d@stx-expr G312e@x)) (display '">" G312f@p))))) (set! G2d5f@datum->stx (lambda (G3136@id G3137@datum) (G2d4b@make-stx G3137@datum (G2d4f@stx-mark* G3136@id) (G2d51@stx-subst* G3136@id) (G2d53@stx-ae* G3136@id)))) (set! G2d61@gen-mark (lambda () (string '#\m))) (set! G2d63@anti-mark '#f) (set! G2d65@anti-mark? not) (set! G2d67@join-wraps (lambda (G313a@m1* G313b@s1* G313c@ae1* G313d@e) ((lambda (G3143@cancel) (begin (set! G3143@cancel (lambda (G314a@ls1 G314b@ls2) ((letrec ((G314e@f (lambda (G3150@x G3151@ls1) (if (null? G3151@ls1) (cdr G314b@ls2) (cons G3150@x (G314e@f (car G3151@ls1) (cdr G3151@ls1))))))) G314e@f) (car G314a@ls1) (cdr G314a@ls1)))) ((lambda (G3144@m2* G3145@s2* G3146@ae2*) (if (if (not (null? G313a@m1*)) (if (not (null? G3144@m2*)) (begin '#f (G2d65@anti-mark? (car G3144@m2*))) '#f) '#f) (values (G3143@cancel G313a@m1* G3144@m2*) (G3143@cancel G313b@s1* G3145@s2*) (G3143@cancel G313c@ae1* G3146@ae2*)) (values (append G313a@m1* G3144@m2*) (append G313b@s1* G3145@s2*) (append G313c@ae1* G3146@ae2*)))) (G2d4f@stx-mark* G313d@e) (G2d51@stx-subst* G313d@e) (G2d53@stx-ae* G313d@e)))) '#f))) (set! G2d69@mkstx (lambda (G3154@e G3155@m* G3156@s* G3157@ae*) (if (G2d49@stx? G3154@e) (call-with-values (lambda () (G2d67@join-wraps G3155@m* G3156@s* G3157@ae* G3154@e)) (lambda (G315f@G315c G3160@G315d G3161@G315e) ((lambda (G3165@ae* G3166@s* G3167@m*) (G2d4b@make-stx (G2d4d@stx-expr G3154@e) G3167@m* G3166@s* G3165@ae*)) G3161@G315e G3160@G315d G315f@G315c))) (G2d4b@make-stx G3154@e G3155@m* G3156@s* G3157@ae*)))) (set! G2d6b@add-mark (lambda (G316b@m G316c@e G316d@ae) (G2d69@mkstx G316c@e (list G316b@m) '(shift) (list G316d@ae)))) (set! G2d6d@add-subst (lambda (G3171@subst G3172@e) (G2d69@mkstx G3172@e '() (list G3171@subst) '()))) (set! G2d6f@syntax-kind? (lambda (G3175@x G3176@p?) (if (G2d49@stx? G3175@x) (G2d6f@syntax-kind? (G2d4d@stx-expr G3175@x) G3176@p?) (if (G28d9@G2804@annotation? G3175@x) (G2d6f@syntax-kind? (G28db@G2808@annotation-expression G3175@x) G3176@p?) (G3176@p? G3175@x))))) (set! G2d71@syntax-vector->list (lambda (G3179@x) (if (G2d49@stx? G3179@x) ((lambda (G317b@ls G317c@m* G317d@s* G317e@ae*) (map (lambda (G3183@x) (G2d69@mkstx G3183@x G317c@m* G317d@s* G317e@ae*)) G317b@ls)) (G2d71@syntax-vector->list (G2d4d@stx-expr G3179@x)) (G2d4f@stx-mark* G3179@x) (G2d51@stx-subst* G3179@x) (G2d53@stx-ae* G3179@x)) (if (G28d9@G2804@annotation? G3179@x) (G2d71@syntax-vector->list (G28db@G2808@annotation-expression G3179@x)) (if (vector? G3179@x) (vector->list G3179@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3179@x)))))) (set! G2d73@syntax-pair? (lambda (G3185@x) (G2d6f@syntax-kind? G3185@x pair?))) (set! G2d75@syntax-vector? (lambda (G3187@x) (G2d6f@syntax-kind? G3187@x vector?))) (set! G2d77@syntax-null? (lambda (G3189@x) (G2d6f@syntax-kind? G3189@x null?))) (set! G2d79@syntax-list? (lambda (G318b@x) ((lambda (G318d@t) (if G318d@t G318d@t (begin '#f (if (G2d73@syntax-pair? G318b@x) (begin '#f (G2d79@syntax-list? (G2d7d@syntax-cdr G318b@x))) '#f)))) (G2d77@syntax-null? G318b@x)))) (set! G2d7b@syntax-car (lambda (G318f@x) (if (G2d49@stx? G318f@x) (G2d69@mkstx (G2d7b@syntax-car (G2d4d@stx-expr G318f@x)) (G2d4f@stx-mark* G318f@x) (G2d51@stx-subst* G318f@x) (G2d53@stx-ae* G318f@x)) (if (G28d9@G2804@annotation? G318f@x) (G2d7b@syntax-car (G28db@G2808@annotation-expression G318f@x)) (if (pair? G318f@x) (car G318f@x) (assertion-violation 'syntax-car '"BUG: not a pair" G318f@x)))))) (set! G2d7d@syntax-cdr (lambda (G3191@x) (if (G2d49@stx? G3191@x) (G2d69@mkstx (G2d7d@syntax-cdr (G2d4d@stx-expr G3191@x)) (G2d4f@stx-mark* G3191@x) (G2d51@stx-subst* G3191@x) (G2d53@stx-ae* G3191@x)) (if (G28d9@G2804@annotation? G3191@x) (G2d7d@syntax-cdr (G28db@G2808@annotation-expression G3191@x)) (if (pair? G3191@x) (cdr G3191@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3191@x)))))) (set! G2d7f@syntax->list (lambda (G3193@x) (if (G2d73@syntax-pair? G3193@x) (cons (G2d7b@syntax-car G3193@x) (G2d7f@syntax->list (G2d7d@syntax-cdr G3193@x))) (if (G2d77@syntax-null? G3193@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3193@x))))) (set! G2d81@id? (lambda (G3195@x) (if (G2d49@stx? G3195@x) (begin '#f ((lambda (G3197@expr) (symbol? (if (G28d9@G2804@annotation? G3197@expr) (G28d8@G2802@annotation-stripped G3197@expr) G3197@expr))) (G2d4d@stx-expr G3195@x))) '#f))) (set! G2d83@id->sym (lambda (G3199@x) (begin (if (G2d49@stx? G3199@x) (void) (error 'id->sym '"BUG in ikarus: not an id" G3199@x)) ((lambda (G319b@expr) ((lambda (G319d@sym) (if (symbol? G319d@sym) G319d@sym (error 'id->sym '"BUG in ikarus: not an id" G3199@x))) (if (G28d9@G2804@annotation? G319b@expr) (G28d8@G2802@annotation-stripped G319b@expr) G319b@expr))) (G2d4d@stx-expr G3199@x))))) (set! G2d85@same-marks? (lambda (G319f@x G31a0@y) ((lambda (G31a3@t) (if G31a3@t G31a3@t (begin '#f (if (pair? G319f@x) (if (pair? G31a0@y) (if (eq? (car G319f@x) (car G31a0@y)) (begin '#f (G2d85@same-marks? (cdr G319f@x) (cdr G31a0@y))) '#f) '#f) '#f)))) (if (null? G319f@x) (begin '#f (null? G31a0@y)) '#f)))) (set! G2d87@bound-id=? (lambda (G31a5@x G31a6@y) (if (eq? (G2d83@id->sym G31a5@x) (G2d83@id->sym G31a6@y)) (begin '#f (G2d85@same-marks? (G2d4f@stx-mark* G31a5@x) (G2d4f@stx-mark* G31a6@y))) '#f))) (set! G2d89@free-id=? (lambda (G31a9@i G31aa@j) ((lambda (G31ad@t0 G31ae@t1) (if ((lambda (G31b1@t) (if G31b1@t G31b1@t (begin '#f G31ae@t1))) G31ad@t0) (eq? G31ad@t0 G31ae@t1) (eq? (G2d83@id->sym G31a9@i) (G2d83@id->sym G31aa@j)))) (G2d9d@id->real-label G31a9@i) (G2d9d@id->real-label G31aa@j)))) (set! G2d8b@valid-bound-ids? (lambda (G31b3@id*) (if (for-all G2d81@id? G31b3@id*) (begin '#f (G2d8d@distinct-bound-ids? G31b3@id*)) '#f))) (set! G2d8d@distinct-bound-ids? (lambda (G31b5@id*) ((lambda (G31b7@t) (if G31b7@t G31b7@t (begin '#f (if (not (G2d8f@bound-id-member? (car G31b5@id*) (cdr G31b5@id*))) (begin '#f (G2d8d@distinct-bound-ids? (cdr G31b5@id*))) '#f)))) (null? G31b5@id*)))) (set! G2d8f@bound-id-member? (lambda (G31b9@id G31ba@id*) (if (pair? G31ba@id*) (begin '#f ((lambda (G31bd@t) (if G31bd@t G31bd@t (begin '#f (G2d8f@bound-id-member? G31b9@id (cdr G31ba@id*))))) (G2d87@bound-id=? G31b9@id (car G31ba@id*)))) '#f))) (set! G2d91@self-evaluating? (lambda (G31bf@x) ((lambda (G31c1@t) (if G31c1@t G31c1@t ((lambda (G31c3@t) (if G31c3@t G31c3@t ((lambda (G31c5@t) (if G31c5@t G31c5@t ((lambda (G31c7@t) (if G31c7@t G31c7@t ((lambda (G31c9@t) (if G31c9@t G31c9@t (begin '#f (bytevector? G31bf@x)))) (regexp? G31bf@x)))) (boolean? G31bf@x)))) (char? G31bf@x)))) (string? G31bf@x)))) (number? G31bf@x)))) (set! G2d93@strip-annotations (lambda (G31cb@x) (if (pair? G31cb@x) (cons (G2d93@strip-annotations (car G31cb@x)) (G2d93@strip-annotations (cdr G31cb@x))) (if (vector? G31cb@x) (vector-map G2d93@strip-annotations G31cb@x) (if (G28d9@G2804@annotation? G31cb@x) (G28d8@G2802@annotation-stripped G31cb@x) G31cb@x))))) (set! G2d95@strip (lambda (G31cd@x G31ce@m*) (if (G2d01@top-marked? G31ce@m*) (if ((lambda (G31d1@t) (if G31d1@t G31d1@t ((lambda (G31d3@t) (if G31d3@t G31d3@t (begin '#f (if (vector? G31cd@x) (if (> (vector-length G31cd@x) '0) (begin '#f (G28d9@G2804@annotation? (vector-ref G31cd@x '0))) '#f) '#f)))) (if (pair? G31cd@x) (begin '#f (G28d9@G2804@annotation? (car G31cd@x))) '#f)))) (G28d9@G2804@annotation? G31cd@x)) (G2d93@strip-annotations G31cd@x) G31cd@x) ((letrec ((G31d5@f (lambda (G31d7@x) (if (G2d49@stx? G31d7@x) (G2d95@strip (G2d4d@stx-expr G31d7@x) (G2d4f@stx-mark* G31d7@x)) (if (G28d9@G2804@annotation? G31d7@x) (G28d8@G2802@annotation-stripped G31d7@x) (if (pair? G31d7@x) ((lambda (G31d9@a G31da@d) (if (if (eq? G31d9@a (car G31d7@x)) (begin '#f (eq? G31da@d (cdr G31d7@x))) '#f) G31d7@x (cons G31d9@a G31da@d))) (G31d5@f (car G31d7@x)) (G31d5@f (cdr G31d7@x))) (if (vector? G31d7@x) ((lambda (G31dd@old) ((lambda (G31df@new) (if (for-all eq? G31dd@old G31df@new) G31d7@x (list->vector G31df@new))) (map G31d5@f G31dd@old))) (vector->list G31d7@x)) G31d7@x))))))) G31d5@f) G31cd@x)))) (set! G2d97@stx->datum (lambda (G31e1@x) (G2d95@strip G31e1@x '()))) (set! G2d99@same-marks*? (lambda (G31e3@mark* G31e4@mark** G31e5@si) (if (null? G31e5@si) '#f (if (G2d85@same-marks? G31e3@mark* (vector-ref G31e4@mark** (car G31e5@si))) (car G31e5@si) (G2d99@same-marks*? G31e3@mark* G31e4@mark** (cdr G31e5@si)))))) (set! G2d9b@id->label (lambda (G31e9@id) ((lambda (G31eb@t) (if G31eb@t G31eb@t (begin '#f ((lambda (G31ed@t) (if G31ed@t ((lambda (G31ef@env) ((lambda (G31f1@rib) (call-with-values (lambda () (G2d0b@gen-define-label+loc G31e9@id G31f1@rib)) (lambda (G31f5@G31f3 G31f6@G31f4) ((lambda (G31f9@loc_ G31fa@lab) (begin (G2d32@extend-rib! G31f1@rib G31e9@id G31fa@lab) G31fa@lab)) G31f6@G31f4 G31f5@G31f3)))) (G3075@interaction-env-rib G31ef@env))) G31ed@t) '#f)) (G30bb@top-level-context))))) (G2d9d@id->real-label G31e9@id)))) (set! G2d9d@id->real-label (lambda (G31fd@id) ((lambda (G31ff@sym) ((letrec ((G3201@search (lambda (G3203@subst* G3204@mark*) (if (null? G3203@subst*) '#f (if (eq? (car G3203@subst*) 'shift) (G3201@search (cdr G3203@subst*) (cdr G3204@mark*)) ((lambda (G3207@rib) ((lambda (G3209@t) (if G3209@t ((lambda (G320b@ht) ((lambda (G320d@si) ((lambda (G320f@i) (if G320f@i (vector-ref (G2d24@rib-label* G3207@rib) G320f@i) (G3201@search (cdr G3203@subst*) G3204@mark*))) (if G320d@si (begin '#f (G2d99@same-marks*? G3204@mark* (G2d22@rib-mark** G3207@rib) (reverse G320d@si))) '#f))) (hashtable-ref G320b@ht G31ff@sym '#f))) G3209@t) ((letrec ((G3211@f (lambda (G3213@sym* G3214@mark** G3215@label*) (if (null? G3213@sym*) (G3201@search (cdr G3203@subst*) G3204@mark*) (if (if (eq? (car G3213@sym*) G31ff@sym) (begin '#f (G2d85@same-marks? (car G3214@mark**) G3204@mark*)) '#f) (car G3215@label*) (G3211@f (cdr G3213@sym*) (cdr G3214@mark**) (cdr G3215@label*))))))) G3211@f) (G2d20@rib-sym* G3207@rib) (G2d22@rib-mark** G3207@rib) (G2d24@rib-label* G3207@rib)))) (G2d26@rib-sealed/freq G3207@rib))) (car G3203@subst*))))))) G3201@search) (G2d51@stx-subst* G31fd@id) (G2d4f@stx-mark* G31fd@id))) (G2d83@id->sym G31fd@id)))) (set! G2d9f@label->binding (lambda (G3219@x G321a@r) ((lambda (G321d@t) (if G321d@t ((lambda (G321f@b) (if (if (pair? G321f@b) (begin '#f (eq? (car G321f@b) '$core-rtd)) '#f) (cons '$rtd (map G2f7a@bless (cdr G321f@b))) (if (if (pair? G321f@b) (begin '#f (eq? (car G321f@b) 'global-rtd)) '#f) ((lambda (G3221@lib G3222@loc) (cons '$rtd (symbol-value G3222@loc))) (cadr G321f@b) (cddr G321f@b)) G321f@b))) G321d@t) ((lambda (G3225@t) (if G3225@t (cdr G3225@t) ((lambda (G3227@t) (if G3227@t ((lambda (G3229@env) ((lambda (G322b@t) (if G322b@t ((lambda (G322d@p) (cons* 'lexical (cdr G322d@p) '#f)) G322b@t) '(displaced-lexical . #f))) (assq G3219@x (G3079@interaction-env-locs G3229@env)))) G3227@t) '(displaced-lexical . #f))) (G30bb@top-level-context)))) (assq G3219@x G321a@r)))) (G2b7f@G2a16@imported-label->binding G3219@x)))) (set! G2da1@make-binding cons) (set! G2da3@binding-type car) (set! G2da5@binding-value cdr) (set! G2da7@raise-unbound-error (lambda (G322f@id) (G30ab@syntax-violation* '#f '"unbound identifier" G322f@id (G4b3a@G4ada@make-undefined-violation)))) (set! G2da9@syntax-type (lambda (G3231@e G3232@r) (if (G2d81@id? G3231@e) ((lambda (G3235@id) ((lambda (G3237@label) ((lambda (G3239@b) ((lambda (G323b@type) ((lambda () (begin (if G3237@label (void) (G2da7@raise-unbound-error G3235@id)) ((lambda (G323d@t) (if (memv G323d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values G323b@type (G2da5@binding-value G3239@b) G3235@id) (values 'other '#f '#f))) G323b@type))))) (G2da3@binding-type G3239@b))) (G2d9f@label->binding G3237@label G3232@r))) (G2d9b@id->label G3235@id))) G3231@e) (if (G2d73@syntax-pair? G3231@e) ((lambda (G323e@id) (if (G2d81@id? G323e@id) ((lambda (G3240@label) ((lambda (G3242@b) ((lambda (G3244@type) ((lambda () (begin (if G3240@label (void) (G2da7@raise-unbound-error G323e@id)) ((lambda (G3246@t) (if (memv G3246@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values G3244@type (G2da5@binding-value G3242@b) G323e@id) (values 'call '#f '#f))) G3244@type))))) (G2da3@binding-type G3242@b))) (G2d9f@label->binding G3240@label G3232@r))) (G2d9b@id->label G323e@id)) (values 'call '#f '#f))) (G2d7b@syntax-car G3231@e)) ((lambda (G3247@d) (if (G2d91@self-evaluating? G3247@d) (values 'constant G3247@d '#f) (values 'other '#f '#f))) (G2d97@stx->datum G3231@e)))))) (set! G2dc0@sanitize-binding (lambda (G3249@x G324a@src) (if (procedure? G3249@x) (cons* 'local-macro G3249@x G324a@src) (if (if (pair? G3249@x) (if (eq? (car G3249@x) 'macro!) (begin '#f (procedure? (cdr G3249@x))) '#f) '#f) (cons* 'local-macro! (cdr G3249@x) G324a@src) (if (if (pair? G3249@x) (begin '#f (eq? (car G3249@x) '$rtd)) '#f) G3249@x (assertion-violation 'expand '"invalid transformer" G3249@x)))))) (set! G2dc2@make-variable-transformer (lambda (G324d@x) (if (procedure? G324d@x) (cons 'macro! G324d@x) (assertion-violation 'make-variable-transformer '"not a procedure" G324d@x)))) (set! G2dc4@variable-transformer? (lambda (G324f@x) (if (pair? G324f@x) (if (eq? (car G324f@x) 'macro!) (begin '#f (procedure? (cdr G324f@x))) '#f) '#f))) (set! G2dc6@variable-transformer-procedure (lambda (G3251@x) (if (G2dc4@variable-transformer? G3251@x) (cdr G3251@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G3251@x)))) (set! G2dc8@make-eval-transformer (lambda (G3253@x) (G2dc0@sanitize-binding (eval-core (G2944@G28ed@expanded->core G3253@x)) G3253@x))) (set! G2f4c@parse-define (lambda (G3255@x) ((lambda (G3257@t) ((lambda (G3259@ls/false) (if (if G3259@ls/false (begin '#f (apply (lambda (G325b@id G325c@fmls G325d@b G325e@b*) (G2d81@id? G325b@id)) G3259@ls/false)) '#f) (apply (lambda (G3263@id G3264@fmls G3265@b G3266@b*) (begin (G2fec@verify-formals G3264@fmls G3255@x) (values G3263@id (cons 'defun (cons G3264@fmls (cons G3265@b G3266@b*)))))) G3259@ls/false) ((lambda (G326b@t) ((lambda (G326d@ls/false) (if (if G326d@ls/false (begin '#f (apply (lambda (G326f@id G3270@val) (G2d81@id? G326f@id)) G326d@ls/false)) '#f) (apply (lambda (G3273@id G3274@val) (values G3273@id (cons 'expr G3274@val))) G326d@ls/false) ((lambda (G3277@t) ((lambda (G3279@ls/false) (if (if G3279@ls/false (begin '#f (apply (lambda (G327b@id) (G2d81@id? G327b@id)) G3279@ls/false)) '#f) (apply (lambda (G327d@id) (values G327d@id (cons 'expr (G2f7a@bless '(void))))) G3279@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3277@t))) (G2fc4@syntax-dispatch G3277@t '(_ any)))) G326b@t))) (G2fc4@syntax-dispatch G326b@t '(_ any any)))) G3257@t))) (G2fc4@syntax-dispatch G3257@t '(_ (any . any) any . each-any)))) G3255@x))) (set! G2f4e@parse-define-syntax (lambda (G327f@x) ((lambda (G3281@t) ((lambda (G3283@ls/false) (if (if G3283@ls/false (begin '#f (apply (lambda (G3285@id G3286@val) (G2d81@id? G3285@id)) G3283@ls/false)) '#f) (apply (lambda (G3289@id G328a@val) (values G3289@id G328a@val)) G3283@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3281@t))) (G2fc4@syntax-dispatch G3281@t '(_ any any)))) G327f@x))) (set! G2f50@scheme-stx-hashtable (make-eq-hashtable)) (set! G2f52@scheme-stx (lambda (G328d@sym) ((lambda (G328f@t) (if G328f@t G328f@t (begin '#f ((lambda (G3291@subst) ((lambda (G3293@stx) ((lambda (G3295@stx) ((lambda () (begin (hashtable-set! G2f50@scheme-stx-hashtable G328d@sym G3295@stx) G3295@stx)))) ((lambda (G3297@t) (if G3297@t ((lambda (G3299@x) ((lambda (G329b@name G329c@label) (G2d6d@add-subst (G2d1e@make-rib (list G329b@name) (list G2cff@top-mark*) (list G329c@label) '#f) G3293@stx)) (car G3299@x) (cdr G3299@x))) G3297@t) G3293@stx)) (assq G328d@sym G3291@subst)))) (G2d4b@make-stx G328d@sym G2cff@top-mark* '() '()))) (G2b55@G29c2@library-subst (G2b79@G2a0a@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G2f50@scheme-stx-hashtable G328d@sym '#f)))) (set! G2f54@lexical-var car) (set! G2f56@lexical-mutable? cdr) (set! G2f58@set-lexical-mutable! set-cdr!) (set! G2f5a@add-lexical (lambda (G329f@lab G32a0@lex G32a1@r) (cons (cons* G329f@lab 'lexical G32a0@lex '#f) G32a1@r))) (set! G2f5c@add-lexicals (lambda (G32a5@lab* G32a6@lex* G32a7@r) (if (null? G32a5@lab*) G32a7@r (G2f5c@add-lexicals (cdr G32a5@lab*) (cdr G32a6@lex*) (G2f5a@add-lexical (car G32a5@lab*) (car G32a6@lex*) G32a7@r))))) (set! G2f5e@letrec-helper (lambda (G32ab@e G32ac@r G32ad@mr G32ae@build) ((lambda (G32b3@t) ((lambda (G32b5@ls/false) (if G32b5@ls/false (apply (lambda (G32b7@lhs* G32b8@rhs* G32b9@b G32ba@b*) (if (not (G2d8b@valid-bound-ids? G32b7@lhs*)) (G2f7e@invalid-fmls-error G32ab@e G32b7@lhs*) ((lambda (G32bf@lex* G32c0@lab*) ((lambda (G32c3@rib G32c4@r) ((lambda (G32c7@body G32c8@rhs*) (G32ae@build '#f G32bf@lex* G32c8@rhs* G32c7@body)) (G2ffe@chi-internal (G2d6d@add-subst G32c3@rib (cons G32b9@b G32ba@b*)) G32c4@r G32ad@mr) (G2fe4@chi-expr* (map (lambda (G32cb@x) (G2d6d@add-subst G32c3@rib G32cb@x)) G32b8@rhs*) G32c4@r G32ad@mr))) (G2d3a@make-full-rib G32b7@lhs* G32c0@lab*) (G2f5c@add-lexicals G32c0@lab* G32bf@lex* G32ac@r))) (map G2d03@gen-lexical G32b7@lhs*) (map G2d07@gen-label G32b7@lhs*)))) G32b5@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G32b3@t))) (G2fc4@syntax-dispatch G32b3@t '(_ #(each (any any)) any . each-any)))) G32ab@e))) (set! G2f60@letrec-transformer (lambda (G32cd@e G32ce@r G32cf@mr) (G2f5e@letrec-helper G32cd@e G32ce@r G32cf@mr G2ce8@G2c5b@build-letrec))) (set! G2f62@letrec*-transformer (lambda (G32d3@e G32d4@r G32d5@mr) (G2f5e@letrec-helper G32d3@e G32d4@r G32d5@mr G2ce9@G2c5d@build-letrec*))) (set! G2f64@fluid-let-syntax-transformer (lambda (G32d9@e G32da@r G32db@mr) ((lambda (G32e0@lookup) (begin (set! G32e0@lookup (lambda (G32f3@x) ((lambda (G32f5@t) (if G32f5@t G32f5@t (begin '#f (G30ad@syntax-violation '#f '"unbound identifier" G32d9@e G32f3@x)))) (G2d9b@id->label G32f3@x)))) ((lambda (G32e1@t) ((lambda (G32e3@ls/false) (if G32e3@ls/false (apply (lambda (G32e5@lhs* G32e6@rhs* G32e7@b G32e8@b*) (if (not (G2d8b@valid-bound-ids? G32e5@lhs*)) (G2f7e@invalid-fmls-error G32d9@e G32e5@lhs*) ((lambda (G32ed@lab* G32ee@rhs*) (G2ffe@chi-internal (cons G32e7@b G32e8@b*) (append (map cons G32ed@lab* G32ee@rhs*) G32da@r) (append (map cons G32ed@lab* G32ee@rhs*) G32db@mr))) (map G32e0@lookup G32e5@lhs*) (map (lambda (G32f1@x) (G2dc8@make-eval-transformer (G3025@expand-transformer G32f1@x G32db@mr))) G32e6@rhs*)))) G32e3@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G32e1@t))) (G2fc4@syntax-dispatch G32e1@t '(_ #(each (any any)) any . each-any)))) G32d9@e))) '#f))) (set! G2f66@type-descriptor-transformer (lambda (G32f7@e G32f8@r G32f9@mr) ((lambda (G32fd@t) ((lambda (G32ff@ls/false) (if (if G32ff@ls/false (begin '#f (apply (lambda (G3301@id) (G2d81@id? G3301@id)) G32ff@ls/false)) '#f) (apply (lambda (G3303@id) ((lambda (G3305@lab) ((lambda (G3307@b) ((lambda (G3309@type) ((lambda () (begin (if G3305@lab (void) (G2da7@raise-unbound-error G3303@id)) (if (if (eq? G3309@type '$rtd) (begin '#f (not (list? (G2da5@binding-value G3307@b)))) '#f) (void) (G30ad@syntax-violation '#f '"not a record type" G32f7@e)) (list 'quote (G2da5@binding-value G3307@b)))))) (G2da3@binding-type G3307@b))) (G2d9f@label->binding G3305@lab G32f8@r))) (G2d9b@id->label G3303@id))) G32ff@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G32fd@t))) (G2fc4@syntax-dispatch G32fd@t '(_ any)))) G32f7@e))) (set! G2f68@record-type-descriptor-transformer (lambda (G330b@e G330c@r G330d@mr) ((lambda (G3311@t) ((lambda (G3313@ls/false) (if (if G3313@ls/false (begin '#f (apply (lambda (G3315@id) (G2d81@id? G3315@id)) G3313@ls/false)) '#f) (apply (lambda (G3317@id) ((lambda (G3319@lab) ((lambda (G331b@b) ((lambda (G331d@type) ((lambda () (begin (if G3319@lab (void) (G2da7@raise-unbound-error G3317@id)) (if (if (eq? G331d@type '$rtd) (begin '#f (list? (G2da5@binding-value G331b@b))) '#f) (void) (G30ad@syntax-violation '#f '"not a record type" G330b@e)) (G2fe8@chi-expr (car (G2da5@binding-value G331b@b)) G330c@r G330d@mr))))) (G2da3@binding-type G331b@b))) (G2d9f@label->binding G3319@lab G330c@r))) (G2d9b@id->label G3317@id))) G3313@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3311@t))) (G2fc4@syntax-dispatch G3311@t '(_ any)))) G330b@e))) (set! G2f6a@record-constructor-descriptor-transformer (lambda (G331f@e G3320@r G3321@mr) ((lambda (G3325@t) ((lambda (G3327@ls/false) (if (if G3327@ls/false (begin '#f (apply (lambda (G3329@id) (G2d81@id? G3329@id)) G3327@ls/false)) '#f) (apply (lambda (G332b@id) ((lambda (G332d@lab) ((lambda (G332f@b) ((lambda (G3331@type) ((lambda () (begin (if G332d@lab (void) (G2da7@raise-unbound-error G332b@id)) (if (if (eq? G3331@type '$rtd) (begin '#f (list? (G2da5@binding-value G332f@b))) '#f) (void) (G30ad@syntax-violation '#f '"invalid type" G331f@e)) (G2fe8@chi-expr (cadr (G2da5@binding-value G332f@b)) G3320@r G3321@mr))))) (G2da3@binding-type G332f@b))) (G2d9f@label->binding G332d@lab G3320@r))) (G2d9b@id->label G332b@id))) G3327@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3325@t))) (G2fc4@syntax-dispatch G3325@t '(_ any)))) G331f@e))) (set! G2f6c@when-transformer (lambda (G3333@e G3334@r G3335@mr) ((lambda (G3339@t) ((lambda (G333b@ls/false) (if G333b@ls/false (apply (lambda (G333d@test G333e@e G333f@e*) (list 'if (G2fe8@chi-expr G333d@test G3334@r G3335@mr) (G2ce6@G2c57@build-sequence '#f (G2fe4@chi-expr* (cons G333e@e G333f@e*) G3334@r G3335@mr)) (G2ce7@G2c59@build-void))) G333b@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3339@t))) (G2fc4@syntax-dispatch G3339@t '(_ any any . each-any)))) G3333@e))) (set! G2f6e@unless-transformer (lambda (G3343@e G3344@r G3345@mr) ((lambda (G3349@t) ((lambda (G334b@ls/false) (if G334b@ls/false (apply (lambda (G334d@test G334e@e G334f@e*) (list 'if (G2fe8@chi-expr G334d@test G3344@r G3345@mr) (G2ce7@G2c59@build-void) (G2ce6@G2c57@build-sequence '#f (G2fe4@chi-expr* (cons G334e@e G334f@e*) G3344@r G3345@mr)))) G334b@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3349@t))) (G2fc4@syntax-dispatch G3349@t '(_ any any . each-any)))) G3343@e))) (set! G2f70@if-transformer (lambda (G3353@e G3354@r G3355@mr) ((lambda (G3359@t) ((lambda (G335b@ls/false) (if G335b@ls/false (apply (lambda (G335d@e0 G335e@e1 G335f@e2) (list 'if (G2fe8@chi-expr G335d@e0 G3354@r G3355@mr) (G2fe8@chi-expr G335e@e1 G3354@r G3355@mr) (G2fe8@chi-expr G335f@e2 G3354@r G3355@mr))) G335b@ls/false) ((lambda (G3363@t) ((lambda (G3365@ls/false) (if G3365@ls/false (apply (lambda (G3367@e0 G3368@e1) (list 'if (G2fe8@chi-expr G3367@e0 G3354@r G3355@mr) (G2fe8@chi-expr G3368@e1 G3354@r G3355@mr) (G2ce7@G2c59@build-void))) G3365@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3363@t))) (G2fc4@syntax-dispatch G3363@t '(_ any any)))) G3359@t))) (G2fc4@syntax-dispatch G3359@t '(_ any any any)))) G3353@e))) (set! G2f72@case-transformer (lambda (G336b@e G336c@r G336d@mr) ((lambda (G3372@build-one G3374@build-last) (begin (set! G3372@build-one (lambda (G33ab@t G33ac@cls G33ad@rest) ((lambda (G33b1@t) ((lambda (G33b3@ls/false) (if G33b3@ls/false (apply (lambda (G33b5@d* G33b6@e G33b7@e*) (list 'if ((lambda (G33bb@data) (if (= '1 (length G33bb@data)) (list '(primitive eqv?) G33ab@t (list 'quote (car G33bb@data))) (list '(primitive memv) G33ab@t (list 'quote G33bb@data)))) (G2d97@stx->datum G33b5@d*)) (G2ce6@G2c57@build-sequence '#f (G2fe4@chi-expr* (cons G33b6@e G33b7@e*) G336c@r G336d@mr)) G33ad@rest)) G33b3@ls/false) ((lambda (G33bd@t) ((lambda (G33bf@ls/false) (if G33bf@ls/false (apply (lambda (G33c1@else) (G30ad@syntax-violation '#f '"invalid syntax" G336b@e)) G33bf@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G33bd@t))) (G2fc4@syntax-dispatch G33bd@t 'any))) G33b1@t))) (G2fc4@syntax-dispatch G33b1@t '(each-any any . each-any)))) G33ac@cls))) (set! G3374@build-last (lambda (G338d@t G338e@cls) ((lambda (G3391@t) ((lambda (G3393@ls/false) (if G3393@ls/false (apply (lambda (G3395@d* G3396@e G3397@e*) (G3372@build-one G338d@t G338e@cls (G2ce7@G2c59@build-void))) G3393@ls/false) ((lambda (G339b@t) ((lambda (G339d@ls/false) (if G339d@ls/false (apply (lambda (G339f@else-kwd G33a0@x G33a1@x*) (if (if (G2d81@id? G339f@else-kwd) (begin '#f (G2d89@free-id=? G339f@else-kwd (G2f52@scheme-stx 'else))) '#f) (G2ce6@G2c57@build-sequence '#f (G2fe4@chi-expr* (cons G33a0@x G33a1@x*) G336c@r G336d@mr)) (G30ad@syntax-violation '#f '"invalid syntax" G336b@e))) G339d@ls/false) ((lambda (G33a5@t) ((lambda (G33a7@ls/false) (if G33a7@ls/false (apply (lambda (G33a9@else) (G30ad@syntax-violation '#f '"invalid syntax" G336b@e)) G33a7@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G33a5@t))) (G2fc4@syntax-dispatch G33a5@t 'any))) G339b@t))) (G2fc4@syntax-dispatch G339b@t '(any any . each-any)))) G3391@t))) (G2fc4@syntax-dispatch G3391@t '(each-any any . each-any)))) G338e@cls))) ((lambda (G3375@t) ((lambda (G3377@ls/false) (if G3377@ls/false (apply (lambda (G3379@expr) (G2ce6@G2c57@build-sequence '#f (list (G2fe8@chi-expr G3379@expr G336c@r G336d@mr) (G2ce7@G2c59@build-void)))) G3377@ls/false) ((lambda (G337b@t) ((lambda (G337d@ls/false) (if G337d@ls/false (apply (lambda (G337f@expr G3380@cls G3381@cls*) ((lambda (G3385@t) (G2ce5@G2c0f@build-let '#f (list G3385@t) (list (G2fe8@chi-expr G337f@expr G336c@r G336d@mr)) ((letrec ((G3387@f (lambda (G3389@cls G338a@cls*) (if (null? G338a@cls*) (G3374@build-last G3385@t G3389@cls) (G3372@build-one G3385@t G3389@cls (G3387@f (car G338a@cls*) (cdr G338a@cls*))))))) G3387@f) G3380@cls G3381@cls*))) (G2d03@gen-lexical 't))) G337d@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G337b@t))) (G2fc4@syntax-dispatch G337b@t '(_ any any . each-any)))) G3375@t))) (G2fc4@syntax-dispatch G3375@t '(_ any)))) G336b@e))) '#f '#f))) (set! G2f74@quote-transformer (lambda (G33c3@e G33c4@r G33c5@mr) ((lambda (G33c9@t) ((lambda (G33cb@ls/false) (if G33cb@ls/false (apply (lambda (G33cd@datum) (list 'quote (G2d97@stx->datum G33cd@datum))) G33cb@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G33c9@t))) (G2fc4@syntax-dispatch G33c9@t '(_ any)))) G33c3@e))) (set! G2f76@case-lambda-transformer (lambda (G33cf@e G33d0@r G33d1@mr) ((lambda (G33d5@t) ((lambda (G33d7@ls/false) (if G33d7@ls/false (apply (lambda (G33d9@fmls* G33da@b* G33db@b**) (call-with-values (lambda () (G2ff0@chi-lambda-clause* G33cf@e G33d9@fmls* (map cons G33da@b* G33db@b**) G33d0@r G33d1@mr)) (lambda (G33e1@G33df G33e2@G33e0) ((lambda (G33e5@body* G33e6@fmls*) (G2ce4@G2c0d@build-case-lambda '#f G33e6@fmls* G33e5@body*)) G33e2@G33e0 G33e1@G33df)))) G33d7@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G33d5@t))) (G2fc4@syntax-dispatch G33d5@t '(_ . #(each (any any . each-any)))))) G33cf@e))) (set! G2f78@lambda-transformer (lambda (G33e9@e G33ea@r G33eb@mr) ((lambda (G33ef@t) ((lambda (G33f1@ls/false) (if G33f1@ls/false (apply (lambda (G33f3@fmls G33f4@b G33f5@b*) (call-with-values (lambda () (G2fee@chi-lambda-clause G33e9@e G33f3@fmls (cons G33f4@b G33f5@b*) G33ea@r G33eb@mr)) (lambda (G33fb@G33f9 G33fc@G33fa) ((lambda (G33ff@body G3400@fmls) (G2ce3@G2c0b@build-lambda '#f G3400@fmls G33ff@body)) G33fc@G33fa G33fb@G33f9)))) G33f1@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G33ef@t))) (G2fc4@syntax-dispatch G33ef@t '(_ any any . each-any)))) G33e9@e))) (set! G2f7a@bless (lambda (G3403@x) (G2d69@mkstx ((letrec ((G3405@f (lambda (G3407@x) (if (G2d49@stx? G3407@x) G3407@x (if (pair? G3407@x) (cons (G3405@f (car G3407@x)) (G3405@f (cdr G3407@x))) (if (symbol? G3407@x) (G2f52@scheme-stx G3407@x) (if (vector? G3407@x) (vector-map G3405@f G3407@x) G3407@x))))))) G3405@f) G3403@x) '() '() '()))) (set! G2f7c@with-syntax-macro (lambda (G3409@e) ((lambda (G340b@t) ((lambda (G340d@ls/false) (if G340d@ls/false (apply (lambda (G340f@pat* G3410@expr* G3411@b G3412@b*) ((lambda (G3417@idn*) (begin (G2fec@verify-formals (map car G3417@idn*) G3409@e) ((lambda (G3419@t*) (G2f7a@bless (list 'let (map list G3419@t* G3410@expr*) ((letrec ((G341b@f (lambda (G341d@pat* G341e@t*) (if (null? G341d@pat*) (cons 'begin (cons '#f (cons G3411@b G3412@b*))) (list 'syntax-case (car G341e@t*) '() (list (car G341d@pat*) (G341b@f (cdr G341d@pat*) (cdr G341e@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G341d@pat*)) (car G341e@t*)))))))) G341b@f) G340f@pat* G3419@t*)))) (G309f@generate-temporaries G3410@expr*)))) ((letrec ((G3421@f (lambda (G3423@pat*) (if (null? G3423@pat*) '() (call-with-values (lambda () (G2fc2@convert-pattern (car G3423@pat*) '())) (lambda (G3427@G3425 G3428@G3426) ((lambda (G342b@idn* G342c@pat) (append G342b@idn* (G3421@f (cdr G3423@pat*)))) G3428@G3426 G3427@G3425))))))) G3421@f) G340f@pat*))) G340d@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G340b@t))) (G2fc4@syntax-dispatch G340b@t '(_ #(each (any any)) any . each-any)))) G3409@e))) (set! G2f7e@invalid-fmls-error (lambda (G342f@stx G3430@fmls) ((lambda (G3433@t) ((lambda (G3435@ls/false) (if G3435@ls/false (apply (lambda (G3437@id* G3438@last) ((letrec ((G343b@f (lambda (G343d@id*) (if (null? G343d@id*) (values) (if (not (G2d81@id? (car G343d@id*))) (G30ad@syntax-violation '#f '"not an identifier" G342f@stx (car G343d@id*)) (begin (G343b@f (cdr G343d@id*)) (if (G2d8f@bound-id-member? (car G343d@id*) (cdr G343d@id*)) (G30ad@syntax-violation '#f '"duplicate binding" G342f@stx (car G343d@id*)) (void)))))))) G343b@f) (if (G2d81@id? G3438@last) (cons G3438@last G3437@id*) (if (G2d77@syntax-null? G3438@last) G3437@id* (G30ad@syntax-violation '#f '"not an identifier" G342f@stx G3438@last))))) G3435@ls/false) ((lambda (G343f@t) ((lambda (G3441@ls/false) (if G3441@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"malformed binding form" G342f@stx G3430@fmls)) G3441@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G343f@t))) (G2fc4@syntax-dispatch G343f@t '_))) G3433@t))) (G2fc4@syntax-dispatch G3433@t '#(each+ any () any)))) G3430@fmls))) (set! G2f80@let-macro (lambda (G3443@stx) ((lambda (G3445@t) ((lambda (G3447@ls/false) (if G3447@ls/false (apply (lambda (G3449@lhs* G344a@rhs* G344b@b G344c@b*) (if (G2d8b@valid-bound-ids? G3449@lhs*) (G2f7a@bless (cons (cons 'lambda (cons G3449@lhs* (cons G344b@b G344c@b*))) G344a@rhs*)) (G2f7e@invalid-fmls-error G3443@stx G3449@lhs*))) G3447@ls/false) ((lambda (G3451@t) ((lambda (G3453@ls/false) (if (if G3453@ls/false (begin '#f (apply (lambda (G3455@f G3456@lhs* G3457@rhs* G3458@b G3459@b*) (G2d81@id? G3455@f)) G3453@ls/false)) '#f) (apply (lambda (G345f@f G3460@lhs* G3461@rhs* G3462@b G3463@b*) (if (G2d8b@valid-bound-ids? G3460@lhs*) (G2f7a@bless (cons (list 'letrec (list (list G345f@f (cons 'lambda (cons G3460@lhs* (cons G3462@b G3463@b*))))) G345f@f) G3461@rhs*)) (G2f7e@invalid-fmls-error G3443@stx G3460@lhs*))) G3453@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3451@t))) (G2fc4@syntax-dispatch G3451@t '(_ any #(each (any any)) any . each-any)))) G3445@t))) (G2fc4@syntax-dispatch G3445@t '(_ #(each (any any)) any . each-any)))) G3443@stx))) (set! G2f82@let-values-macro (lambda (G3469@stx) ((lambda (G346c@rename G346e@rename*) (begin (set! G346c@rename (lambda (G34ce@x G34cf@old* G34d0@new*) (begin (if (G2d81@id? G34ce@x) (void) (G30ad@syntax-violation '#f '"not an indentifier" G3469@stx G34ce@x)) (if (G2d8f@bound-id-member? G34ce@x G34cf@old*) (G30ad@syntax-violation '#f '"duplicate binding" G3469@stx G34ce@x) (void)) ((lambda (G34d4@y) (values G34d4@y (cons G34ce@x G34cf@old*) (cons G34d4@y G34d0@new*))) (gensym (G30b3@syntax->datum G34ce@x)))))) (set! G346e@rename* (lambda (G34bc@x* G34bd@old* G34be@new*) (if (null? G34bc@x*) (values '() G34bd@old* G34be@new*) (call-with-values (lambda () (G346c@rename (car G34bc@x*) G34bd@old* G34be@new*)) (lambda (G34c2@x G34c3@old* G34c4@new*) (call-with-values (lambda () (G346e@rename* (cdr G34bc@x*) G34c3@old* G34c4@new*)) (lambda (G34c8@x* G34c9@old* G34ca@new*) (values (cons G34c2@x G34c8@x*) G34c9@old* G34ca@new*)))))))) ((lambda (G346f@t) ((lambda (G3471@ls/false) (if G3471@ls/false (apply (lambda (G3473@b G3474@b*) (cons* (G2f7a@bless 'let) '() G3473@b G3474@b*)) G3471@ls/false) ((lambda (G3477@t) ((lambda (G3479@ls/false) (if G3479@ls/false (apply (lambda (G347b@lhs* G347c@rhs* G347d@b G347e@b*) (G2f7a@bless ((letrec ((G3483@f (lambda (G3485@lhs* G3486@rhs* G3487@old* G3488@new*) (if (null? G3485@lhs*) (cons 'let (cons (map list G3487@old* G3488@new*) (cons G347d@b G347e@b*))) ((lambda (G348d@t) ((lambda (G348f@ls/false) (if G348f@ls/false (apply (lambda (G3491@x*) (call-with-values (lambda () (G346e@rename* G3491@x* G3487@old* G3488@new*)) (lambda (G3496@G3493 G3497@G3494 G3498@G3495) ((lambda (G349c@new* G349d@old* G349e@y*) (list 'call-with-values (list 'lambda '() (car G3486@rhs*)) (list 'lambda G349e@y* (G3483@f (cdr G3485@lhs*) (cdr G3486@rhs*) G349d@old* G349c@new*)))) G3498@G3495 G3497@G3494 G3496@G3493)))) G348f@ls/false) ((lambda (G34a2@t) ((lambda (G34a4@ls/false) (if G34a4@ls/false (apply (lambda (G34a6@x* G34a7@x) (call-with-values (lambda () (G346c@rename G34a7@x G3487@old* G3488@new*)) (lambda (G34aa@y G34ab@old* G34ac@new*) (call-with-values (lambda () (G346e@rename* G34a6@x* G34ab@old* G34ac@new*)) (lambda (G34b0@y* G34b1@old* G34b2@new*) (list 'call-with-values (list 'lambda '() (car G3486@rhs*)) (list 'lambda (append G34b0@y* G34aa@y) (G3483@f (cdr G3485@lhs*) (cdr G3486@rhs*) G34b1@old* G34b2@new*)))))))) G34a4@ls/false) ((lambda (G34b6@t) ((lambda (G34b8@ls/false) (if G34b8@ls/false (apply (lambda (G34ba@others) (G30ad@syntax-violation '#f '"malformed bindings" G3469@stx G34ba@others)) G34b8@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G34b6@t))) (G2fc4@syntax-dispatch G34b6@t 'any))) G34a2@t))) (G2fc4@syntax-dispatch G34a2@t '#(each+ any () any)))) G348d@t))) (G2fc4@syntax-dispatch G348d@t 'each-any))) (car G3485@lhs*)))))) G3483@f) G347b@lhs* G347c@rhs* '() '()))) G3479@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3477@t))) (G2fc4@syntax-dispatch G3477@t '(_ #(each (any any)) any . each-any)))) G346f@t))) (G2fc4@syntax-dispatch G346f@t '(_ () any . each-any)))) G3469@stx))) '#f '#f))) (set! G2f84@let*-values-macro (lambda (G34d6@stx) ((lambda (G34d9@check) (begin (set! G34d9@check (lambda (G3508@x*) (if (null? G3508@x*) (void) ((lambda (G350a@x) (begin (if (G2d81@id? G350a@x) (void) (G30ad@syntax-violation '#f '"not an identifier" G34d6@stx G350a@x)) (G34d9@check (cdr G3508@x*)) (if (G2d8f@bound-id-member? G350a@x (cdr G3508@x*)) (G30ad@syntax-violation '#f '"duplicate identifier" G34d6@stx G350a@x) (void)))) (car G3508@x*))))) ((lambda (G34da@t) ((lambda (G34dc@ls/false) (if G34dc@ls/false (apply (lambda (G34de@b G34df@b*) (cons* (G2f7a@bless 'let) '() G34de@b G34df@b*)) G34dc@ls/false) ((lambda (G34e2@t) ((lambda (G34e4@ls/false) (if G34e4@ls/false (apply (lambda (G34e6@lhs* G34e7@rhs* G34e8@b G34e9@b*) (G2f7a@bless ((letrec ((G34ee@f (lambda (G34f0@lhs* G34f1@rhs*) (if (null? G34f0@lhs*) (cons 'begin (cons G34e8@b G34e9@b*)) ((lambda (G34f4@t) ((lambda (G34f6@ls/false) (if G34f6@ls/false (apply (lambda (G34f8@x*) (begin (G34d9@check G34f8@x*) (list 'call-with-values (list 'lambda '() (car G34f1@rhs*)) (list 'lambda G34f8@x* (G34ee@f (cdr G34f0@lhs*) (cdr G34f1@rhs*)))))) G34f6@ls/false) ((lambda (G34fa@t) ((lambda (G34fc@ls/false) (if G34fc@ls/false (apply (lambda (G34fe@x* G34ff@x) (begin (G34d9@check (cons G34ff@x G34fe@x*)) (list 'call-with-values (list 'lambda '() (car G34f1@rhs*)) (list 'lambda (append G34fe@x* G34ff@x) (G34ee@f (cdr G34f0@lhs*) (cdr G34f1@rhs*)))))) G34fc@ls/false) ((lambda (G3502@t) ((lambda (G3504@ls/false) (if G3504@ls/false (apply (lambda (G3506@others) (G30ad@syntax-violation '#f '"malformed bindings" G34d6@stx G3506@others)) G3504@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3502@t))) (G2fc4@syntax-dispatch G3502@t 'any))) G34fa@t))) (G2fc4@syntax-dispatch G34fa@t '#(each+ any () any)))) G34f4@t))) (G2fc4@syntax-dispatch G34f4@t 'each-any))) (car G34f0@lhs*)))))) G34ee@f) G34e6@lhs* G34e7@rhs*))) G34e4@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G34e2@t))) (G2fc4@syntax-dispatch G34e2@t '(_ #(each (any any)) any . each-any)))) G34da@t))) (G2fc4@syntax-dispatch G34da@t '(_ () any . each-any)))) G34d6@stx))) '#f))) (set! G2f86@trace-lambda-macro (lambda (G350c@stx) ((lambda (G350e@t) ((lambda (G3510@ls/false) (if G3510@ls/false (apply (lambda (G3512@who G3513@fmls G3514@b G3515@b*) (if (G2d8b@valid-bound-ids? G3513@fmls) (G2f7a@bless (list 'make-traced-procedure (list 'quote G3512@who) (cons 'lambda (cons G3513@fmls (cons G3514@b G3515@b*))))) (G2f7e@invalid-fmls-error G350c@stx G3513@fmls))) G3510@ls/false) ((lambda (G351a@t) ((lambda (G351c@ls/false) (if G351c@ls/false (apply (lambda (G351e@who G351f@fmls G3520@last G3521@b G3522@b*) (if (G2d8b@valid-bound-ids? (cons G3520@last G351f@fmls)) (G2f7a@bless (list 'make-traced-procedure (list 'quote G351e@who) (cons 'lambda (cons (append G351f@fmls G3520@last) (cons G3521@b G3522@b*))))) (G2f7e@invalid-fmls-error G350c@stx (append G351f@fmls G3520@last)))) G351c@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G351a@t))) (G2fc4@syntax-dispatch G351a@t '(_ any #(each+ any () any) any . each-any)))) G350e@t))) (G2fc4@syntax-dispatch G350e@t '(_ any each-any any . each-any)))) G350c@stx))) (set! G2f88@trace-define-macro (lambda (G3528@stx) ((lambda (G352a@t) ((lambda (G352c@ls/false) (if G352c@ls/false (apply (lambda (G352e@who G352f@fmls G3530@b G3531@b*) (if (G2d8b@valid-bound-ids? G352f@fmls) (G2f7a@bless (list 'define G352e@who (list 'make-traced-procedure (list 'quote G352e@who) (cons 'lambda (cons G352f@fmls (cons G3530@b G3531@b*)))))) (G2f7e@invalid-fmls-error G3528@stx G352f@fmls))) G352c@ls/false) ((lambda (G3536@t) ((lambda (G3538@ls/false) (if G3538@ls/false (apply (lambda (G353a@who G353b@fmls G353c@last G353d@b G353e@b*) (if (G2d8b@valid-bound-ids? (cons G353c@last G353b@fmls)) (G2f7a@bless (list 'define G353a@who (list 'make-traced-procedure (list 'quote G353a@who) (cons 'lambda (cons (append G353b@fmls G353c@last) (cons G353d@b G353e@b*)))))) (G2f7e@invalid-fmls-error G3528@stx (append G353b@fmls G353c@last)))) G3538@ls/false) ((lambda (G3544@t) ((lambda (G3546@ls/false) (if G3546@ls/false (apply (lambda (G3548@who G3549@expr) (if (G2d81@id? G3548@who) (G2f7a@bless (list 'define G3548@who (list 'let (list (list 'v G3549@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G3548@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G30ad@syntax-violation '#f '"invalid name" G3528@stx))) G3546@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3544@t))) (G2fc4@syntax-dispatch G3544@t '(_ any any)))) G3536@t))) (G2fc4@syntax-dispatch G3536@t '(_ (any . #(each+ any () any)) any . each-any)))) G352a@t))) (G2fc4@syntax-dispatch G352a@t '(_ (any . each-any) any . each-any)))) G3528@stx))) (set! G2f8a@trace-define-syntax-macro (lambda (G354c@stx) ((lambda (G354e@t) ((lambda (G3550@ls/false) (if G3550@ls/false (apply (lambda (G3552@who G3553@expr) (if (G2d81@id? G3552@who) (G2f7a@bless (list 'define-syntax G3552@who (list 'make-traced-macro (list 'quote G3552@who) G3553@expr))) (G30ad@syntax-violation '#f '"invalid name" G354c@stx))) G3550@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G354e@t))) (G2fc4@syntax-dispatch G354e@t '(_ any any)))) G354c@stx))) (set! G2f8c@trace-let/rec-syntax (lambda (G3556@who) (lambda (G3558@stx) ((lambda (G355a@t) ((lambda (G355c@ls/false) (if G355c@ls/false (apply (lambda (G355e@lhs* G355f@rhs* G3560@b G3561@b*) (if (G2d8b@valid-bound-ids? G355e@lhs*) ((lambda (G3566@rhs*) (G2f7a@bless (cons G3556@who (cons (map list G355e@lhs* G3566@rhs*) (cons G3560@b G3561@b*))))) (map (lambda (G3568@lhs G3569@rhs) (list 'make-traced-macro (list 'quote G3568@lhs) G3569@rhs)) G355e@lhs* G355f@rhs*)) (G2f7e@invalid-fmls-error G3558@stx G355e@lhs*))) G355c@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G355a@t))) (G2fc4@syntax-dispatch G355a@t '(_ #(each (any any)) any . each-any)))) G3558@stx)))) (set! G2f8e@trace-let-syntax-macro (G2f8c@trace-let/rec-syntax 'let-syntax)) (set! G2f90@trace-letrec-syntax-macro (G2f8c@trace-let/rec-syntax 'letrec-syntax)) (set! G2f92@guard-macro (lambda (G356c@x) ((lambda (G356f@gen-clauses) (begin (set! G356f@gen-clauses (lambda (G3586@con G3587@outerk G3588@clause*) ((lambda (G358d@f G358f@f*) (begin (set! G358d@f (lambda (G35c0@x G35c1@k) ((lambda (G35c4@t) ((lambda (G35c6@ls/false) (if G35c6@ls/false (apply (lambda (G35c8@e G35c9@p) ((lambda (G35cc@t) (list 'let (list (list G35cc@t G35c8@e)) (list 'if G35cc@t (list G35c9@p G35cc@t) G35c1@k))) (gensym))) G35c6@ls/false) ((lambda (G35ce@t) ((lambda (G35d0@ls/false) (if G35d0@ls/false (apply (lambda (G35d2@e) ((lambda (G35d4@t) (list 'let (list (list G35d4@t G35d2@e)) (list 'if G35d4@t G35d4@t G35c1@k))) (gensym))) G35d0@ls/false) ((lambda (G35d6@t) ((lambda (G35d8@ls/false) (if G35d8@ls/false (apply (lambda (G35da@e G35db@v G35dc@v*) (list 'if G35da@e (cons 'begin (cons G35db@v G35dc@v*)) G35c1@k)) G35d8@ls/false) ((lambda (G35e0@t) ((lambda (G35e2@ls/false) (if G35e2@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"invalid guard clause" G35c0@x)) G35e2@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G35e0@t))) (G2fc4@syntax-dispatch G35e0@t '_))) G35d6@t))) (G2fc4@syntax-dispatch G35d6@t '(any any . each-any)))) G35ce@t))) (G2fc4@syntax-dispatch G35ce@t '(any)))) G35c4@t))) (G2fc4@syntax-dispatch G35c4@t '(any #(scheme-id =>) any)))) G35c0@x))) (set! G358f@f* (lambda (G359a@x*) ((lambda (G359c@t) ((lambda (G359e@ls/false) (if G359e@ls/false (apply (lambda () (values (list 'raise G3586@con) '#t)) G359e@ls/false) ((lambda (G35a0@t) ((lambda (G35a2@ls/false) (if G35a2@ls/false (apply (lambda (G35a4@e G35a5@e*) (values (cons 'begin (cons G35a4@e G35a5@e*)) '#f)) G35a2@ls/false) ((lambda (G35a8@t) ((lambda (G35aa@ls/false) (if G35aa@ls/false (apply (lambda (G35ac@cls G35ad@cls*) (call-with-values (lambda () (G358f@f* G35ad@cls*)) (lambda (G35b2@G35b0 G35b3@G35b1) ((lambda (G35b6@g G35b7@e) (values (G358d@f G35ac@cls G35b7@e) G35b6@g)) G35b3@G35b1 G35b2@G35b0)))) G35aa@ls/false) ((lambda (G35ba@t) ((lambda (G35bc@ls/false) (if G35bc@ls/false (apply (lambda (G35be@others) (G30ad@syntax-violation '#f '"invalid guard clause" G35be@others)) G35bc@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G35ba@t))) (G2fc4@syntax-dispatch G35ba@t 'any))) G35a8@t))) (G2fc4@syntax-dispatch G35a8@t '(any . any)))) G35a0@t))) (G2fc4@syntax-dispatch G35a0@t '((#(scheme-id else) any . each-any))))) G359c@t))) (G2fc4@syntax-dispatch G359c@t '()))) G359a@x*))) (call-with-values (lambda () (G358f@f* G3588@clause*)) (lambda (G3592@G3590 G3593@G3591) ((lambda (G3596@raisek G3597@code) (if G3596@raisek (list G3587@outerk G3597@code) G3597@code)) G3593@G3591 G3592@G3590))))) '#f '#f))) ((lambda (G3570@t) ((lambda (G3572@ls/false) (if (if G3572@ls/false (begin '#f (apply (lambda (G3574@con G3575@clause* G3576@b G3577@b*) (G2d81@id? G3574@con)) G3572@ls/false)) '#f) (apply (lambda (G357c@con G357d@clause* G357e@b G357f@b*) ((lambda (G3584@outerk) (G2f7a@bless (list 'call/cc (list 'lambda (list G3584@outerk) (list 'with-exception-handler (list 'lambda (list G357c@con) (G356f@gen-clauses G357c@con G3584@outerk G357d@clause*)) (cons 'lambda (cons '() (cons '#f (cons G357e@b G357f@b*))))))))) (gensym))) G3572@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3570@t))) (G2fc4@syntax-dispatch G3570@t '(_ (any . each-any) any . each-any)))) G356c@x))) '#f))) (set! G2f94@define-enumeration-macro (lambda (G35e4@stx) ((lambda (G35e7@set? G35e9@remove-dups) (begin (set! G35e7@set? (lambda (G3600@x) ((lambda (G3602@t) (if G3602@t G3602@t (begin '#f (if (not (memq (car G3600@x) (cdr G3600@x))) (begin '#f (G35e7@set? (cdr G3600@x))) '#f)))) (null? G3600@x)))) (set! G35e9@remove-dups (lambda (G35fe@ls) (if (null? G35fe@ls) '() (cons (car G35fe@ls) (G35e9@remove-dups (remq (car G35fe@ls) (cdr G35fe@ls))))))) ((lambda (G35ea@t) ((lambda (G35ec@ls/false) (if (if G35ec@ls/false (begin '#f (apply (lambda (G35ee@name G35ef@id* G35f0@maker) (if (G2d81@id? G35ee@name) (if (G2d81@id? G35f0@maker) (begin '#f (for-all G2d81@id? G35ef@id*)) '#f) '#f)) G35ec@ls/false)) '#f) (apply (lambda (G35f4@name G35f5@id* G35f6@maker) ((lambda (G35fa@name* G35fb@mk) (G2f7a@bless (list 'begin (list 'define G35fb@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G35fa@name*)))) (list 'define-syntax G35f4@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G35fa@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G35f4@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G35f6@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G35f6@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G35fa@name*)) (cons 'syntax-violation (cons (list 'quote G35f6@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G35fb@mk '('(n* ...)))))))))))) (G35e9@remove-dups (G30b3@syntax->datum G35f5@id*)) (gensym))) G35ec@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G35ea@t))) (G2fc4@syntax-dispatch G35ea@t '(_ any each-any any)))) G35e4@stx))) '#f '#f))) (set! G2f96@time-macro (lambda (G3604@stx) ((lambda (G3606@t) ((lambda (G3608@ls/false) (if G3608@ls/false (apply (lambda (G360a@expr) ((lambda (G360c@str) (G2f7a@bless (list 'time-it G360c@str (list 'lambda '() G360a@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3610@G360e G3611@G360f) ((lambda (G3614@e G3615@p) (begin (write (G30b3@syntax->datum G360a@expr) G3615@p) (G3614@e))) G3611@G360f G3610@G360e))))) G3608@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3606@t))) (G2fc4@syntax-dispatch G3606@t '(_ any)))) G3604@stx))) (set! G2f98@delay-macro (lambda (G3618@stx) ((lambda (G361a@t) ((lambda (G361c@ls/false) (if G361c@ls/false (apply (lambda (G361e@expr) (G2f7a@bless (list 'make-promise (list 'lambda '() G361e@expr)))) G361c@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G361a@t))) (G2fc4@syntax-dispatch G361a@t '(_ any)))) G3618@stx))) (set! G2f9a@assert-macro (lambda (G3620@stx) ((lambda (G3622@t) ((lambda (G3624@ls/false) (if G3624@ls/false (apply (lambda (G3626@expr) (G2f7a@bless (list 'unless G3626@expr (list 'assertion-violation ''assert '"assertion failed" (list 'quote G3626@expr))))) G3624@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3622@t))) (G2fc4@syntax-dispatch G3622@t '(_ any)))) G3620@stx))) (set! G2f9c@endianness-macro (lambda (G3628@stx) ((lambda (G362a@t) ((lambda (G362c@ls/false) (if G362c@ls/false (apply (lambda (G362e@e) ((lambda (G3630@t) (if (eqv? G3630@t 'little) (G2f7a@bless ''little) (if (eqv? G3630@t 'big) (G2f7a@bless ''big) (G30ad@syntax-violation '#f '"endianness must be big or little" G3628@stx)))) (G30b3@syntax->datum G362e@e))) G362c@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G362a@t))) (G2fc4@syntax-dispatch G362a@t '(_ any)))) G3628@stx))) (set! G2f9e@identifier-syntax-macro (lambda (G3631@stx) ((lambda (G3633@t) ((lambda (G3635@ls/false) (if G3635@ls/false (apply (lambda (G3637@expr) (G2f7a@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G3637@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G3637@expr) '((syntax (e* ...)))))))))) G3635@ls/false) ((lambda (G3639@t) ((lambda (G363b@ls/false) (if (if G363b@ls/false (begin '#f (apply (lambda (G363d@id1 G363e@expr1 G363f@id2 G3640@expr2 G3641@expr3) (if (G2d81@id? G363d@id1) (if (G2d81@id? G363f@id2) (begin '#f (G2d81@id? G3640@expr2)) '#f) '#f)) G363b@ls/false)) '#f) (apply (lambda (G3647@id1 G3648@expr1 G3649@id2 G364a@expr2 G364b@expr3) (G2f7a@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G3648@expr1)) (list (list 'set! 'id G364a@expr2) (list 'syntax G364b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G3648@expr1 '(e* ...))))))))) G363b@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3639@t))) (G2fc4@syntax-dispatch G3639@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G3633@t))) (G2fc4@syntax-dispatch G3633@t '(_ any)))) G3631@stx))) (set! G2fa0@do-macro (lambda (G3651@stx) ((lambda (G3654@bind) (begin (set! G3654@bind (lambda (G366b@x) ((lambda (G366d@t) ((lambda (G366f@ls/false) (if G366f@ls/false (apply (lambda (G3671@x G3672@init) (list G3671@x G3672@init G3671@x)) G366f@ls/false) ((lambda (G3675@t) ((lambda (G3677@ls/false) (if G3677@ls/false (apply (lambda (G3679@x G367a@init G367b@step) (list G3679@x G367a@init G367b@step)) G3677@ls/false) ((lambda (G367f@t) ((lambda (G3681@ls/false) (if G3681@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"invalid binding" G3651@stx)) G3681@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G367f@t))) (G2fc4@syntax-dispatch G367f@t '_))) G3675@t))) (G2fc4@syntax-dispatch G3675@t '(any any any)))) G366d@t))) (G2fc4@syntax-dispatch G366d@t '(any any)))) G366b@x))) ((lambda (G3655@t) ((lambda (G3657@ls/false) (if G3657@ls/false (apply (lambda (G3659@binding* G365a@test G365b@expr* G365c@command*) ((lambda (G3661@t) ((lambda (G3663@ls/false) (if G3663@ls/false (apply (lambda (G3665@x* G3666@init* G3667@step*) (if (G2d8b@valid-bound-ids? G3665@x*) (G2f7a@bless (list 'letrec (list (list 'loop (list 'lambda G3665@x* (list 'if G365a@test (cons 'begin (cons '(if #f #f) G365b@expr*)) (cons 'begin (append G365c@command* (list (cons 'loop G3667@step*)))))))) (cons 'loop G3666@init*))) (G30ad@syntax-violation '#f '"invalid bindings" G3651@stx))) G3663@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3661@t))) (G2fc4@syntax-dispatch G3661@t '#(each (any any any))))) (map G3654@bind G3659@binding*))) G3657@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3655@t))) (G2fc4@syntax-dispatch G3655@t '(_ each-any (any . each-any) . each-any)))) G3651@stx))) '#f))) (set! G2fa2@let*-macro (lambda (G3683@stx) ((lambda (G3685@t) ((lambda (G3687@ls/false) (if (if G3687@ls/false (begin '#f (apply (lambda (G3689@lhs* G368a@rhs* G368b@b G368c@b*) (for-all G2d81@id? G3689@lhs*)) G3687@ls/false)) '#f) (apply (lambda (G3691@lhs* G3692@rhs* G3693@b G3694@b*) (G2f7a@bless ((letrec ((G3699@f (lambda (G369b@x*) (if (null? G369b@x*) (cons 'let (cons '() (cons G3693@b G3694@b*))) (list 'let (list (car G369b@x*)) (G3699@f (cdr G369b@x*))))))) G3699@f) (map list G3691@lhs* G3692@rhs*)))) G3687@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3685@t))) (G2fc4@syntax-dispatch G3685@t '(_ #(each (any any)) any . each-any)))) G3683@stx))) (set! G2fa4@or-macro (lambda (G369d@stx) ((lambda (G369f@t) ((lambda (G36a1@ls/false) (if G36a1@ls/false (apply (lambda () '#f) G36a1@ls/false) ((lambda (G36a3@t) ((lambda (G36a5@ls/false) (if G36a5@ls/false (apply (lambda (G36a7@e G36a8@e*) (G2f7a@bless ((letrec ((G36ab@f (lambda (G36ad@e G36ae@e*) (if (null? G36ae@e*) (list 'begin '#f G36ad@e) (list 'let (list (list 't G36ad@e)) (list 'if 't 't (G36ab@f (car G36ae@e*) (cdr G36ae@e*)))))))) G36ab@f) G36a7@e G36a8@e*))) G36a5@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G36a3@t))) (G2fc4@syntax-dispatch G36a3@t '(_ any . each-any)))) G369f@t))) (G2fc4@syntax-dispatch G369f@t '(_)))) G369d@stx))) (set! G2fa6@and-macro (lambda (G36b1@stx) ((lambda (G36b3@t) ((lambda (G36b5@ls/false) (if G36b5@ls/false (apply (lambda () '#t) G36b5@ls/false) ((lambda (G36b7@t) ((lambda (G36b9@ls/false) (if G36b9@ls/false (apply (lambda (G36bb@e G36bc@e*) (G2f7a@bless ((letrec ((G36bf@f (lambda (G36c1@e G36c2@e*) (if (null? G36c2@e*) (list 'begin '#f G36c1@e) (cons 'if (cons G36c1@e (cons (G36bf@f (car G36c2@e*) (cdr G36c2@e*)) '(#f)))))))) G36bf@f) G36bb@e G36bc@e*))) G36b9@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G36b7@t))) (G2fc4@syntax-dispatch G36b7@t '(_ any . each-any)))) G36b3@t))) (G2fc4@syntax-dispatch G36b3@t '(_)))) G36b1@stx))) (set! G2fa8@cond-macro (lambda (G36c5@stx) ((lambda (G36c7@t) ((lambda (G36c9@ls/false) (if G36c9@ls/false (apply (lambda (G36cb@cls G36cc@cls*) (G2f7a@bless ((letrec ((G36cf@f (lambda (G36d1@cls G36d2@cls*) (if (null? G36d2@cls*) ((lambda (G36d5@t) ((lambda (G36d7@ls/false) (if G36d7@ls/false (apply (lambda (G36d9@e G36da@e*) (cons 'begin (cons G36d9@e G36da@e*))) G36d7@ls/false) ((lambda (G36dd@t) ((lambda (G36df@ls/false) (if G36df@ls/false (apply (lambda (G36e1@e G36e2@p) (list 'let (list (list 't G36e1@e)) (list 'if 't (cons G36e2@p '(t))))) G36df@ls/false) ((lambda (G36e5@t) ((lambda (G36e7@ls/false) (if G36e7@ls/false (apply (lambda (G36e9@e) (cons 'or (cons G36e9@e '((if #f #f))))) G36e7@ls/false) ((lambda (G36eb@t) ((lambda (G36ed@ls/false) (if G36ed@ls/false (apply (lambda (G36ef@e G36f0@e*) (list 'if G36ef@e (cons 'begin G36f0@e*))) G36ed@ls/false) ((lambda (G36f3@t) ((lambda (G36f5@ls/false) (if G36f5@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"invalid last clause" G36c5@stx)) G36f5@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G36f3@t))) (G2fc4@syntax-dispatch G36f3@t '_))) G36eb@t))) (G2fc4@syntax-dispatch G36eb@t '(any . each-any)))) G36e5@t))) (G2fc4@syntax-dispatch G36e5@t '(any)))) G36dd@t))) (G2fc4@syntax-dispatch G36dd@t '(any #(scheme-id =>) any)))) G36d5@t))) (G2fc4@syntax-dispatch G36d5@t '(#(scheme-id else) any . each-any)))) G36d1@cls) ((lambda (G36f7@t) ((lambda (G36f9@ls/false) (if G36f9@ls/false (apply (lambda (G36fb@e G36fc@e*) (G30ad@syntax-violation '#f '"incorrect position of keyword else" G36c5@stx)) G36f9@ls/false) ((lambda (G36ff@t) ((lambda (G3701@ls/false) (if G3701@ls/false (apply (lambda (G3703@e G3704@p) (list 'let (list (list 't G3703@e)) (list 'if 't (cons G3704@p '(t)) (G36cf@f (car G36d2@cls*) (cdr G36d2@cls*))))) G3701@ls/false) ((lambda (G3707@t) ((lambda (G3709@ls/false) (if G3709@ls/false (apply (lambda (G370b@e) (list 'or G370b@e (G36cf@f (car G36d2@cls*) (cdr G36d2@cls*)))) G3709@ls/false) ((lambda (G370d@t) ((lambda (G370f@ls/false) (if G370f@ls/false (apply (lambda (G3711@e G3712@e*) (list 'if G3711@e (cons 'begin G3712@e*) (G36cf@f (car G36d2@cls*) (cdr G36d2@cls*)))) G370f@ls/false) ((lambda (G3715@t) ((lambda (G3717@ls/false) (if G3717@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"invalid last clause" G36c5@stx)) G3717@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3715@t))) (G2fc4@syntax-dispatch G3715@t '_))) G370d@t))) (G2fc4@syntax-dispatch G370d@t '(any . each-any)))) G3707@t))) (G2fc4@syntax-dispatch G3707@t '(any)))) G36ff@t))) (G2fc4@syntax-dispatch G36ff@t '(any #(scheme-id =>) any)))) G36f7@t))) (G2fc4@syntax-dispatch G36f7@t '(#(scheme-id else) any . each-any)))) G36d1@cls))))) G36cf@f) G36cb@cls G36cc@cls*))) G36c9@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G36c7@t))) (G2fc4@syntax-dispatch G36c7@t '(_ any . each-any)))) G36c5@stx))) (set! G2faa@do-include (lambda (G3719@stx G371a@id G371b@filename) ((lambda (G371f@filename) (begin (if (if (string? G371f@filename) (begin '#f (G2d81@id? G371a@id)) '#f) (void) (G30ad@syntax-violation '#f '"invalid syntax" G3719@stx)) (cons (G2f7a@bless 'begin) (with-input-from-file G371f@filename (lambda () ((letrec ((G3721@f (lambda (G3723@ls) ((lambda (G3725@x) (if (eof-object? G3725@x) (reverse G3723@ls) (G3721@f (cons (G2d5f@datum->stx G371a@id G3725@x) G3723@ls)))) (G28d7@G2800@read-annotated))))) G3721@f) '())))))) (G2d97@stx->datum G371b@filename)))) (set! G2fac@include-macro (lambda (G3727@e) ((lambda (G3729@t) ((lambda (G372b@ls/false) (if G372b@ls/false (apply (lambda (G372d@id G372e@filename) (G2faa@do-include G3727@e G372d@id G372e@filename)) G372b@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3729@t))) (G2fc4@syntax-dispatch G3729@t '(any any)))) G3727@e))) (set! G2fae@include-into-macro (lambda (G3731@e) ((lambda (G3733@t) ((lambda (G3735@ls/false) (if G3735@ls/false (apply (lambda (G3737@id G3738@filename) (G2faa@do-include G3731@e G3737@id G3738@filename)) G3735@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3733@t))) (G2fc4@syntax-dispatch G3733@t '(_ any any)))) G3731@e))) (set! G2fb0@syntax-rules-macro (lambda (G373b@e) ((lambda (G373d@t) ((lambda (G373f@ls/false) (if G373f@ls/false (apply (lambda (G3741@lits G3742@pat* G3743@tmp*) (begin (G2fca@verify-literals G3741@lits G373b@e) (G2f7a@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3741@lits (map (lambda (G3747@pat G3748@tmp) ((lambda (G374b@t) ((lambda (G374d@ls/false) (if G374d@ls/false (apply (lambda (G374f@rest) (list (cons 'g G374f@rest) (list 'syntax G3748@tmp))) G374d@ls/false) ((lambda (G3751@t) ((lambda (G3753@ls/false) (if G3753@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"invalid syntax-rules pattern" G373b@e G3747@pat)) G3753@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3751@t))) (G2fc4@syntax-dispatch G3751@t '_))) G374b@t))) (G2fc4@syntax-dispatch G374b@t '(_ . any)))) G3747@pat)) G3742@pat* G3743@tmp*)))))))) G373f@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G373d@t))) (G2fc4@syntax-dispatch G373d@t '(_ each-any . #(each (any any)))))) G373b@e))) (set! G2fb2@quasiquote-macro ((lambda () ((lambda (G3756@datum G377f@quasicons* G3781@quasicons G3783@quasiappend G3785@quasivector G3787@vquasi G3789@quasi) (begin (set! G3756@datum (lambda (G3864@x) (list (G2f52@scheme-stx 'quote) (G2d69@mkstx G3864@x '() '() '())))) (set! G377f@quasicons* (lambda (G385c@x G385d@y) ((letrec ((G3860@f (lambda (G3862@x) (if (null? G3862@x) G385d@y (G3781@quasicons (car G3862@x) (G3860@f (cdr G3862@x))))))) G3860@f) G385c@x))) (set! G3781@quasicons (lambda (G3836@x G3837@y) ((lambda (G383a@t) ((lambda (G383c@ls/false) (if G383c@ls/false (apply (lambda (G383e@dy) ((lambda (G3840@t) ((lambda (G3842@ls/false) (if G3842@ls/false (apply (lambda (G3844@dx) (list (G2f52@scheme-stx 'quote) (cons G3844@dx G383e@dy))) G3842@ls/false) ((lambda (G3846@t) ((lambda (G3848@ls/false) (if G3848@ls/false (apply (lambda () ((lambda (G384a@t) ((lambda (G384c@ls/false) (if G384c@ls/false (apply (lambda () (list (G2f52@scheme-stx 'list) G3836@x)) G384c@ls/false) ((lambda (G384e@t) ((lambda (G3850@ls/false) (if G3850@ls/false (apply (lambda () (list (G2f52@scheme-stx 'cons) G3836@x G3837@y)) G3850@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G384e@t))) (G2fc4@syntax-dispatch G384e@t '_))) G384a@t))) (G2fc4@syntax-dispatch G384a@t '()))) G383e@dy)) G3848@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3846@t))) (G2fc4@syntax-dispatch G3846@t '_))) G3840@t))) (G2fc4@syntax-dispatch G3840@t '(#(scheme-id quote) any)))) G3836@x)) G383c@ls/false) ((lambda (G3852@t) ((lambda (G3854@ls/false) (if G3854@ls/false (apply (lambda (G3856@stuff) (cons* (G2f52@scheme-stx 'list) G3836@x G3856@stuff)) G3854@ls/false) ((lambda (G3858@t) ((lambda (G385a@ls/false) (if G385a@ls/false (apply (lambda () (list (G2f52@scheme-stx 'cons) G3836@x G3837@y)) G385a@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3858@t))) (G2fc4@syntax-dispatch G3858@t '_))) G3852@t))) (G2fc4@syntax-dispatch G3852@t '(#(scheme-id list) . each-any)))) G383a@t))) (G2fc4@syntax-dispatch G383a@t '(#(scheme-id quote) any)))) G3837@y))) (set! G3783@quasiappend (lambda (G381c@x G381d@y) ((lambda (G3820@ls) (if (null? G3820@ls) (list (G2f52@scheme-stx 'quote) '()) (if (null? (cdr G3820@ls)) (car G3820@ls) (cons* (G2f52@scheme-stx 'append) G3820@ls)))) ((letrec ((G3822@f (lambda (G3824@x) (if (null? G3824@x) ((lambda (G3826@t) ((lambda (G3828@ls/false) (if G3828@ls/false (apply (lambda () '()) G3828@ls/false) ((lambda (G382a@t) ((lambda (G382c@ls/false) (if G382c@ls/false (apply (lambda () (list G381d@y)) G382c@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G382a@t))) (G2fc4@syntax-dispatch G382a@t '_))) G3826@t))) (G2fc4@syntax-dispatch G3826@t '(#(scheme-id quote) ())))) G381d@y) ((lambda (G382e@t) ((lambda (G3830@ls/false) (if G3830@ls/false (apply (lambda () (G3822@f (cdr G3824@x))) G3830@ls/false) ((lambda (G3832@t) ((lambda (G3834@ls/false) (if G3834@ls/false (apply (lambda () (cons (car G3824@x) (G3822@f (cdr G3824@x)))) G3834@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3832@t))) (G2fc4@syntax-dispatch G3832@t '_))) G382e@t))) (G2fc4@syntax-dispatch G382e@t '(#(scheme-id quote) ())))) (car G3824@x)))))) G3822@f) G381c@x)))) (set! G3785@quasivector (lambda (G37ea@x) ((lambda (G37ec@pat-x) ((lambda (G37ee@t) ((lambda (G37f0@ls/false) (if G37f0@ls/false (apply (lambda (G37f2@x*) (list (G2f52@scheme-stx 'quote) (list->vector G37f2@x*))) G37f0@ls/false) ((lambda (G37f4@t) ((lambda (G37f6@ls/false) (if G37f6@ls/false (apply (lambda () ((letrec ((G37f8@f (lambda (G37fa@x G37fb@k) ((lambda (G37fe@t) ((lambda (G3800@ls/false) (if G3800@ls/false (apply (lambda (G3802@x*) (G37fb@k (map (lambda (G3804@x) (list (G2f52@scheme-stx 'quote) G3804@x)) G3802@x*))) G3800@ls/false) ((lambda (G3806@t) ((lambda (G3808@ls/false) (if G3808@ls/false (apply (lambda (G380a@x*) (G37fb@k G380a@x*)) G3808@ls/false) ((lambda (G380c@t) ((lambda (G380e@ls/false) (if G380e@ls/false (apply (lambda (G3810@x G3811@y) (G37f8@f G3811@y (lambda (G3814@ls) (G37fb@k (cons G3810@x G3814@ls))))) G380e@ls/false) ((lambda (G3816@t) ((lambda (G3818@ls/false) (if G3818@ls/false (apply (lambda () (list (G2f52@scheme-stx 'list->vector) G37ec@pat-x)) G3818@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3816@t))) (G2fc4@syntax-dispatch G3816@t '_))) G380c@t))) (G2fc4@syntax-dispatch G380c@t '(#(scheme-id cons) any any)))) G3806@t))) (G2fc4@syntax-dispatch G3806@t '(#(scheme-id list) . each-any)))) G37fe@t))) (G2fc4@syntax-dispatch G37fe@t '(#(scheme-id quote) each-any)))) G37fa@x)))) G37f8@f) G37ea@x (lambda (G381a@ls) (cons* (G2f52@scheme-stx 'vector) G381a@ls)))) G37f6@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G37f4@t))) (G2fc4@syntax-dispatch G37f4@t '_))) G37ee@t))) (G2fc4@syntax-dispatch G37ee@t '(#(scheme-id quote) each-any)))) G37ec@pat-x)) G37ea@x))) (set! G3787@vquasi (lambda (G37c8@p G37c9@lev) ((lambda (G37cc@t) ((lambda (G37ce@ls/false) (if G37ce@ls/false (apply (lambda (G37d0@p G37d1@q) ((lambda (G37d4@t) ((lambda (G37d6@ls/false) (if G37d6@ls/false (apply (lambda (G37d8@p) (if (= G37c9@lev '0) (G377f@quasicons* G37d8@p (G3787@vquasi G37d1@q G37c9@lev)) (G3781@quasicons (G3781@quasicons (G3756@datum 'unquote) (G3789@quasi G37d8@p (- G37c9@lev '1))) (G3787@vquasi G37d1@q G37c9@lev)))) G37d6@ls/false) ((lambda (G37da@t) ((lambda (G37dc@ls/false) (if G37dc@ls/false (apply (lambda (G37de@p) (if (= G37c9@lev '0) (G3783@quasiappend G37de@p (G3787@vquasi G37d1@q G37c9@lev)) (G3781@quasicons (G3781@quasicons (G3756@datum 'unquote-splicing) (G3789@quasi G37de@p (- G37c9@lev '1))) (G3787@vquasi G37d1@q G37c9@lev)))) G37dc@ls/false) ((lambda (G37e0@t) ((lambda (G37e2@ls/false) (if G37e2@ls/false (apply (lambda (G37e4@p) (G3781@quasicons (G3789@quasi G37e4@p G37c9@lev) (G3787@vquasi G37d1@q G37c9@lev))) G37e2@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G37e0@t))) (G2fc4@syntax-dispatch G37e0@t 'any))) G37da@t))) (G2fc4@syntax-dispatch G37da@t '(#(scheme-id unquote-splicing) . each-any)))) G37d4@t))) (G2fc4@syntax-dispatch G37d4@t '(#(scheme-id unquote) . each-any)))) G37d0@p)) G37ce@ls/false) ((lambda (G37e6@t) ((lambda (G37e8@ls/false) (if G37e8@ls/false (apply (lambda () (list (G2f52@scheme-stx 'quote) '())) G37e8@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G37e6@t))) (G2fc4@syntax-dispatch G37e6@t '()))) G37cc@t))) (G2fc4@syntax-dispatch G37cc@t '(any . any)))) G37c8@p))) (set! G3789@quasi (lambda (G3792@p G3793@lev) ((lambda (G3796@t) ((lambda (G3798@ls/false) (if G3798@ls/false (apply (lambda (G379a@p) (if (= G3793@lev '0) G379a@p (G3781@quasicons (G3756@datum 'unquote) (G3789@quasi (list G379a@p) (- G3793@lev '1))))) G3798@ls/false) ((lambda (G379c@t) ((lambda (G379e@ls/false) (if G379e@ls/false (apply (lambda (G37a0@p G37a1@q) (if (= G3793@lev '0) (G377f@quasicons* G37a0@p (G3789@quasi G37a1@q G3793@lev)) (G3781@quasicons (G3781@quasicons (G3756@datum 'unquote) (G3789@quasi G37a0@p (- G3793@lev '1))) (G3789@quasi G37a1@q G3793@lev)))) G379e@ls/false) ((lambda (G37a4@t) ((lambda (G37a6@ls/false) (if G37a6@ls/false (apply (lambda (G37a8@p G37a9@q) (if (= G3793@lev '0) (G3783@quasiappend G37a8@p (G3789@quasi G37a9@q G3793@lev)) (G3781@quasicons (G3781@quasicons (G3756@datum 'unquote-splicing) (G3789@quasi G37a8@p (- G3793@lev '1))) (G3789@quasi G37a9@q G3793@lev)))) G37a6@ls/false) ((lambda (G37ac@t) ((lambda (G37ae@ls/false) (if G37ae@ls/false (apply (lambda (G37b0@p) (G3781@quasicons (G3756@datum 'quasiquote) (G3789@quasi (list G37b0@p) (+ G3793@lev '1)))) G37ae@ls/false) ((lambda (G37b2@t) ((lambda (G37b4@ls/false) (if G37b4@ls/false (apply (lambda (G37b6@p G37b7@q) (G3781@quasicons (G3789@quasi G37b6@p G3793@lev) (G3789@quasi G37b7@q G3793@lev))) G37b4@ls/false) ((lambda (G37ba@t) ((lambda (G37bc@ls/false) (if (if G37bc@ls/false (begin '#f (apply (lambda (G37be@x) (not (G2d49@stx? G37be@x))) G37bc@ls/false)) '#f) (apply (lambda (G37c0@x) (G3785@quasivector (G3787@vquasi G37c0@x G3793@lev))) G37bc@ls/false) ((lambda (G37c2@t) ((lambda (G37c4@ls/false) (if G37c4@ls/false (apply (lambda (G37c6@p) (list (G2f52@scheme-stx 'quote) G37c6@p)) G37c4@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G37c2@t))) (G2fc4@syntax-dispatch G37c2@t 'any))) G37ba@t))) (G2fc4@syntax-dispatch G37ba@t '#(vector each-any)))) G37b2@t))) (G2fc4@syntax-dispatch G37b2@t '(any . any)))) G37ac@t))) (G2fc4@syntax-dispatch G37ac@t '(#(scheme-id quasiquote) any)))) G37a4@t))) (G2fc4@syntax-dispatch G37a4@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G379c@t))) (G2fc4@syntax-dispatch G379c@t '((#(scheme-id unquote) . each-any) . any)))) G3796@t))) (G2fc4@syntax-dispatch G3796@t '(#(scheme-id unquote) any)))) G3792@p))) (lambda (G378a@x) ((lambda (G378c@t) ((lambda (G378e@ls/false) (if G378e@ls/false (apply (lambda (G3790@e) (G3789@quasi G3790@e '0)) G378e@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G378c@t))) (G2fc4@syntax-dispatch G378c@t '(_ any)))) G378a@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fb4@quasisyntax-macro ((lambda () ((lambda (G3867@quasi) (begin (set! G3867@quasi (lambda (G387f@p G3880@lev) ((lambda (G3883@t) ((lambda (G3885@ls/false) (if G3885@ls/false (apply (lambda (G3887@p) (if (= G3880@lev '0) ((lambda (G3889@g) (values (list G3889@g) (list G3887@p) G3889@g)) (gensym)) (call-with-values (lambda () (G3867@quasi G3887@p (- G3880@lev '1))) (lambda (G388e@G388b G388f@G388c G3890@G388d) ((lambda (G3894@p G3895@rhs* G3896@lhs*) (values G3896@lhs* G3895@rhs* (list 'unsyntax G3894@p))) G3890@G388d G388f@G388c G388e@G388b))))) G3885@ls/false) ((lambda (G389a@t) ((lambda (G389c@ls/false) (if (if G389c@ls/false (begin '#f (apply (lambda () (= G3880@lev '0)) G389c@ls/false)) '#f) (apply (lambda () (G30ad@syntax-violation '#f '"incorrect use of unsyntax" G387f@p)) G389c@ls/false) ((lambda (G389e@t) ((lambda (G38a0@ls/false) (if G38a0@ls/false (apply (lambda (G38a2@p G38a3@q) (call-with-values (lambda () (G3867@quasi G38a3@q G3880@lev)) (lambda (G38a9@G38a6 G38aa@G38a7 G38ab@G38a8) ((lambda (G38af@q G38b0@rhs* G38b1@lhs*) (if (= G3880@lev '0) ((lambda (G38b5@g) (values (cons (cons G38b5@g '(...)) G38b1@lhs*) (cons G38a2@p G38b0@rhs*) (cons G38b5@g (cons '... G38af@q)))) (gensym)) (call-with-values (lambda () (G3867@quasi G38a2@p (- G3880@lev '1))) (lambda (G38ba@G38b7 G38bb@G38b8 G38bc@G38b9) ((lambda (G38c0@p G38c1@rhs2* G38c2@lhs2*) (values (append G38c2@lhs2* G38b1@lhs*) (append G38c1@rhs2* G38b0@rhs*) (cons (list 'unsyntax-splicing G38c0@p) G38af@q))) G38bc@G38b9 G38bb@G38b8 G38ba@G38b7))))) G38ab@G38a8 G38aa@G38a7 G38a9@G38a6)))) G38a0@ls/false) ((lambda (G38c6@t) ((lambda (G38c8@ls/false) (if (if G38c8@ls/false (begin '#f (apply (lambda () (= G3880@lev '0)) G38c8@ls/false)) '#f) (apply (lambda () (G30ad@syntax-violation '#f '"incorrect use of unsyntax-splicing" G387f@p)) G38c8@ls/false) ((lambda (G38ca@t) ((lambda (G38cc@ls/false) (if G38cc@ls/false (apply (lambda (G38ce@p) (call-with-values (lambda () (G3867@quasi G38ce@p (+ G3880@lev '1))) (lambda (G38d3@G38d0 G38d4@G38d1 G38d5@G38d2) ((lambda (G38d9@p G38da@rhs* G38db@lhs*) (values G38db@lhs* G38da@rhs* (list 'quasisyntax G38d9@p))) G38d5@G38d2 G38d4@G38d1 G38d3@G38d0)))) G38cc@ls/false) ((lambda (G38df@t) ((lambda (G38e1@ls/false) (if G38e1@ls/false (apply (lambda (G38e3@p G38e4@q) (call-with-values (lambda () (G3867@quasi G38e3@p G3880@lev)) (lambda (G38ed@G38e7 G38ee@G38e8 G38ef@G38e9) (call-with-values (lambda () (G3867@quasi G38e4@q G3880@lev)) (lambda (G38f3@G38ea G38f4@G38eb G38f5@G38ec) ((lambda (G38f9@q G38fa@rhs2* G38fb@lhs2* G38fc@p G38fd@rhs* G38fe@lhs*) (values (append G38fb@lhs2* G38fe@lhs*) (append G38fa@rhs2* G38fd@rhs*) (cons G38fc@p G38f9@q))) G38f5@G38ec G38f4@G38eb G38f3@G38ea G38ef@G38e9 G38ee@G38e8 G38ed@G38e7)))))) G38e1@ls/false) ((lambda (G3905@t) ((lambda (G3907@ls/false) (if (if G3907@ls/false (begin '#f (apply (lambda (G3909@x) (not (G2d49@stx? G387f@p))) G3907@ls/false)) '#f) (apply (lambda (G390b@x) (call-with-values (lambda () ((letrec ((G3910@f (lambda (G3912@x) (if (null? G3912@x) (values '() '() '()) (call-with-values (lambda () (G3867@quasi (car G3912@x) G3880@lev)) (lambda (G3917@G3914 G3918@G3915 G3919@G3916) ((lambda (G391d@a G391e@rhs* G391f@lhs*) (call-with-values (lambda () (G3910@f (cdr G3912@x))) (lambda (G3926@G3923 G3927@G3924 G3928@G3925) ((lambda (G392c@d G392d@rhs2* G392e@lhs2*) (values (append G391f@lhs* G392e@lhs2*) (append G391e@rhs* G392d@rhs2*) (cons G391d@a G392c@d))) G3928@G3925 G3927@G3924 G3926@G3923)))) G3919@G3916 G3918@G3915 G3917@G3914))))))) G3910@f) G390b@x)) (lambda (G3932@G390d G3933@G390e G3934@G390f) ((lambda (G3938@x* G3939@rhs* G393a@lhs*) (values G393a@lhs* G3939@rhs* (list->vector G3938@x*))) G3934@G390f G3933@G390e G3932@G390d)))) G3907@ls/false) ((lambda (G393e@t) ((lambda (G3940@ls/false) (if G3940@ls/false (apply (lambda () (values '() '() G387f@p)) G3940@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G393e@t))) (G2fc4@syntax-dispatch G393e@t '_))) G3905@t))) (G2fc4@syntax-dispatch G3905@t '#(vector each-any)))) G38df@t))) (G2fc4@syntax-dispatch G38df@t '(any . any)))) G38ca@t))) (G2fc4@syntax-dispatch G38ca@t '(#(scheme-id quasisyntax) any)))) G38c6@t))) (G2fc4@syntax-dispatch G38c6@t '#(scheme-id unsyntax-splicing)))) G389e@t))) (G2fc4@syntax-dispatch G389e@t '((#(scheme-id unsyntax-splicing) any) . any)))) G389a@t))) (G2fc4@syntax-dispatch G389a@t '#(scheme-id unsyntax)))) G3883@t))) (G2fc4@syntax-dispatch G3883@t '(#(scheme-id unsyntax) any)))) G387f@p))) (lambda (G3868@x) ((lambda (G386a@t) ((lambda (G386c@ls/false) (if G386c@ls/false (apply (lambda (G386e@e) (call-with-values (lambda () (G3867@quasi G386e@e '0)) (lambda (G3873@G3870 G3874@G3871 G3875@G3872) ((lambda (G3879@v G387a@rhs* G387b@lhs*) (G2f7a@bless (list 'syntax-case (cons 'list G387a@rhs*) '() (list G387b@lhs* (list 'syntax G3879@v))))) G3875@G3872 G3874@G3871 G3873@G3870)))) G386c@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G386a@t))) (G2fc4@syntax-dispatch G386a@t '(_ any)))) G3868@x)))) '#f)))) (set! G2fb6@define-struct-macro (lambda (G3942@stx) (G30ad@syntax-violation '#f '"define-struct not supported" G3942@stx))) (set! G2fb8@define-record-type-macro (lambda (G3944@x) ((lambda (G3947@id G3949@get-record-name G394b@get-record-constructor-name G394d@get-record-predicate-name G394f@get-clause G3951@foo-rtd-code G3953@parent-rtd-code G3955@parent-rcd-code G3957@foo-rcd-code G3959@get-protocol-code G395b@get-fields G395d@get-mutator-indices G395f@get-mutators G3961@get-accessors G3963@enumerate G3965@do-define-record G3967@verify-clauses) (begin (set! G3947@id (lambda (G3b3e@ctxt . G3b40@str*) (G30b1@datum->syntax G3b3e@ctxt (string->symbol (apply string-append (map (lambda (G3b42@x) (if (symbol? G3b42@x) (symbol->string G3b42@x) (if (string? G3b42@x) G3b42@x (assertion-violation 'define-record-type '"BUG")))) G3b40@str*)))))) (set! G3949@get-record-name (lambda (G3b2c@spec) ((lambda (G3b2e@t) ((lambda (G3b30@ls/false) (if G3b30@ls/false (apply (lambda (G3b32@foo G3b33@make-foo G3b34@foo?) G3b32@foo) G3b30@ls/false) ((lambda (G3b38@t) ((lambda (G3b3a@ls/false) (if G3b3a@ls/false (apply (lambda (G3b3c@foo) G3b3c@foo) G3b3a@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3b38@t))) (G2fc4@syntax-dispatch G3b38@t 'any))) G3b2e@t))) (G2fc4@syntax-dispatch G3b2e@t '(any any any)))) G3b2c@spec))) (set! G394b@get-record-constructor-name (lambda (G3b18@spec) ((lambda (G3b1a@t) ((lambda (G3b1c@ls/false) (if G3b1c@ls/false (apply (lambda (G3b1e@foo G3b1f@make-foo G3b20@foo?) G3b1f@make-foo) G3b1c@ls/false) ((lambda (G3b24@t) ((lambda (G3b26@ls/false) (if (if G3b26@ls/false (begin '#f (apply (lambda (G3b28@foo) (G2d81@id? G3b28@foo)) G3b26@ls/false)) '#f) (apply (lambda (G3b2a@foo) (G3947@id G3b2a@foo '"make-" (G2d97@stx->datum G3b2a@foo))) G3b26@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3b24@t))) (G2fc4@syntax-dispatch G3b24@t 'any))) G3b1a@t))) (G2fc4@syntax-dispatch G3b1a@t '(any any any)))) G3b18@spec))) (set! G394d@get-record-predicate-name (lambda (G3b04@spec) ((lambda (G3b06@t) ((lambda (G3b08@ls/false) (if G3b08@ls/false (apply (lambda (G3b0a@foo G3b0b@make-foo G3b0c@foo?) G3b0c@foo?) G3b08@ls/false) ((lambda (G3b10@t) ((lambda (G3b12@ls/false) (if (if G3b12@ls/false (begin '#f (apply (lambda (G3b14@foo) (G2d81@id? G3b14@foo)) G3b12@ls/false)) '#f) (apply (lambda (G3b16@foo) (G3947@id G3b16@foo (G2d97@stx->datum G3b16@foo) '"?")) G3b12@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3b10@t))) (G2fc4@syntax-dispatch G3b10@t 'any))) G3b06@t))) (G2fc4@syntax-dispatch G3b06@t '(any any any)))) G3b04@spec))) (set! G394f@get-clause (lambda (G3af2@id G3af3@ls) ((lambda (G3af6@t) ((lambda (G3af8@ls/false) (if G3af8@ls/false (apply (lambda () '#f) G3af8@ls/false) ((lambda (G3afa@t) ((lambda (G3afc@ls/false) (if G3afc@ls/false (apply (lambda (G3afe@x G3aff@rest G3b00@ls) (if (G2d89@free-id=? (G2f7a@bless G3af2@id) G3afe@x) (cons G3afe@x G3aff@rest) (G394f@get-clause G3af2@id G3b00@ls))) G3afc@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3afa@t))) (G2fc4@syntax-dispatch G3afa@t '((any . any) . any)))) G3af6@t))) (G2fc4@syntax-dispatch G3af6@t '()))) G3af3@ls))) (set! G3951@foo-rtd-code (lambda (G3aa0@name G3aa1@clause* G3aa2@parent-rtd-code) ((lambda (G3aa7@convert-field-spec*) (begin (set! G3aa7@convert-field-spec* (lambda (G3ad8@ls) (list->vector (map (lambda (G3ada@x) ((lambda (G3adc@t) ((lambda (G3ade@ls/false) (if G3ade@ls/false (apply (lambda (G3ae0@name G3ae1@rest) (list 'mutable G3ae0@name)) G3ade@ls/false) ((lambda (G3ae4@t) ((lambda (G3ae6@ls/false) (if G3ae6@ls/false (apply (lambda (G3ae8@name G3ae9@rest) (list 'immutable G3ae8@name)) G3ae6@ls/false) ((lambda (G3aec@t) ((lambda (G3aee@ls/false) (if G3aee@ls/false (apply (lambda (G3af0@name) (list 'immutable G3af0@name)) G3aee@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3aec@t))) (G2fc4@syntax-dispatch G3aec@t 'any))) G3ae4@t))) (G2fc4@syntax-dispatch G3ae4@t '(#(scheme-id immutable) any . any)))) G3adc@t))) (G2fc4@syntax-dispatch G3adc@t '(#(scheme-id mutable) any . any)))) G3ada@x)) G3ad8@ls)))) ((lambda (G3aa8@uid-code G3aa9@sealed? G3aaa@opaque? G3aab@fields) (G2f7a@bless (list 'make-record-type-descriptor (list 'quote G3aa0@name) G3aa2@parent-rtd-code G3aa8@uid-code G3aa9@sealed? G3aaa@opaque? G3aab@fields))) ((lambda (G3ab0@t) ((lambda (G3ab2@ls/false) (if G3ab2@ls/false (apply (lambda () (list 'quote (gensym))) G3ab2@ls/false) ((lambda (G3ab4@t) ((lambda (G3ab6@ls/false) (if G3ab6@ls/false (apply (lambda (G3ab8@uid) (list 'quote G3ab8@uid)) G3ab6@ls/false) ((lambda (G3aba@t) ((lambda (G3abc@ls/false) (if G3abc@ls/false (apply (lambda () '#f) G3abc@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3aba@t))) (G2fc4@syntax-dispatch G3aba@t '_))) G3ab4@t))) (G2fc4@syntax-dispatch G3ab4@t '(_ any)))) G3ab0@t))) (G2fc4@syntax-dispatch G3ab0@t '(_)))) (G394f@get-clause 'nongenerative G3aa1@clause*)) ((lambda (G3abe@t) ((lambda (G3ac0@ls/false) (if G3ac0@ls/false (apply (lambda () '#t) G3ac0@ls/false) ((lambda (G3ac2@t) ((lambda (G3ac4@ls/false) (if G3ac4@ls/false (apply (lambda () '#f) G3ac4@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3ac2@t))) (G2fc4@syntax-dispatch G3ac2@t '_))) G3abe@t))) (G2fc4@syntax-dispatch G3abe@t '(_ #(atom #t))))) (G394f@get-clause 'sealed G3aa1@clause*)) ((lambda (G3ac6@t) ((lambda (G3ac8@ls/false) (if G3ac8@ls/false (apply (lambda () '#t) G3ac8@ls/false) ((lambda (G3aca@t) ((lambda (G3acc@ls/false) (if G3acc@ls/false (apply (lambda () '#f) G3acc@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3aca@t))) (G2fc4@syntax-dispatch G3aca@t '_))) G3ac6@t))) (G2fc4@syntax-dispatch G3ac6@t '(_ #(atom #t))))) (G394f@get-clause 'opaque G3aa1@clause*)) ((lambda (G3ace@t) ((lambda (G3ad0@ls/false) (if G3ad0@ls/false (apply (lambda (G3ad2@field-spec*) (list 'quote (G3aa7@convert-field-spec* G3ad2@field-spec*))) G3ad0@ls/false) ((lambda (G3ad4@t) ((lambda (G3ad6@ls/false) (if G3ad6@ls/false (apply (lambda () ''#()) G3ad6@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3ad4@t))) (G2fc4@syntax-dispatch G3ad4@t '_))) G3ace@t))) (G2fc4@syntax-dispatch G3ace@t '(_ . each-any)))) (G394f@get-clause 'fields G3aa1@clause*))))) '#f))) (set! G3953@parent-rtd-code (lambda (G3a88@clause*) ((lambda (G3a8a@t) ((lambda (G3a8c@ls/false) (if G3a8c@ls/false (apply (lambda (G3a8e@name) (list 'record-type-descriptor G3a8e@name)) G3a8c@ls/false) ((lambda (G3a90@t) ((lambda (G3a92@ls/false) (if G3a92@ls/false (apply (lambda () ((lambda (G3a94@t) ((lambda (G3a96@ls/false) (if G3a96@ls/false (apply (lambda (G3a98@rtd G3a99@rcd) G3a98@rtd) G3a96@ls/false) ((lambda (G3a9c@t) ((lambda (G3a9e@ls/false) (if G3a9e@ls/false (apply (lambda () '#f) G3a9e@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3a9c@t))) (G2fc4@syntax-dispatch G3a9c@t '#(atom #f)))) G3a94@t))) (G2fc4@syntax-dispatch G3a94@t '(_ any any)))) (G394f@get-clause 'parent-rtd G3a88@clause*))) G3a92@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3a90@t))) (G2fc4@syntax-dispatch G3a90@t '#(atom #f)))) G3a8a@t))) (G2fc4@syntax-dispatch G3a8a@t '(_ any)))) (G394f@get-clause 'parent G3a88@clause*)))) (set! G3955@parent-rcd-code (lambda (G3a70@clause*) ((lambda (G3a72@t) ((lambda (G3a74@ls/false) (if G3a74@ls/false (apply (lambda (G3a76@name) (list 'record-constructor-descriptor G3a76@name)) G3a74@ls/false) ((lambda (G3a78@t) ((lambda (G3a7a@ls/false) (if G3a7a@ls/false (apply (lambda () ((lambda (G3a7c@t) ((lambda (G3a7e@ls/false) (if G3a7e@ls/false (apply (lambda (G3a80@rtd G3a81@rcd) G3a81@rcd) G3a7e@ls/false) ((lambda (G3a84@t) ((lambda (G3a86@ls/false) (if G3a86@ls/false (apply (lambda () '#f) G3a86@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3a84@t))) (G2fc4@syntax-dispatch G3a84@t '#(atom #f)))) G3a7c@t))) (G2fc4@syntax-dispatch G3a7c@t '(_ any any)))) (G394f@get-clause 'parent-rtd G3a70@clause*))) G3a7a@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3a78@t))) (G2fc4@syntax-dispatch G3a78@t '#(atom #f)))) G3a72@t))) (G2fc4@syntax-dispatch G3a72@t '(_ any)))) (G394f@get-clause 'parent G3a70@clause*)))) (set! G3957@foo-rcd-code (lambda (G3a68@clause* G3a69@foo-rtd G3a6a@protocol G3a6b@parent-rcd-code) (list 'make-record-constructor-descriptor G3a69@foo-rtd G3a6b@parent-rcd-code G3a6a@protocol))) (set! G3959@get-protocol-code (lambda (G3a5c@clause*) ((lambda (G3a5e@t) ((lambda (G3a60@ls/false) (if G3a60@ls/false (apply (lambda (G3a62@expr) G3a62@expr) G3a60@ls/false) ((lambda (G3a64@t) ((lambda (G3a66@ls/false) (if G3a66@ls/false (apply (lambda () '#f) G3a66@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3a64@t))) (G2fc4@syntax-dispatch G3a64@t '_))) G3a5e@t))) (G2fc4@syntax-dispatch G3a5e@t '(_ any)))) (G394f@get-clause 'protocol G3a5c@clause*)))) (set! G395b@get-fields (lambda (G3a4a@clause*) ((lambda (G3a4c@t) ((lambda (G3a4e@ls/false) (if G3a4e@ls/false (apply (lambda () '()) G3a4e@ls/false) ((lambda (G3a50@t) ((lambda (G3a52@ls/false) (if G3a52@ls/false (apply (lambda (G3a54@f*) G3a54@f*) G3a52@ls/false) ((lambda (G3a56@t) ((lambda (G3a58@ls/false) (if G3a58@ls/false (apply (lambda (G3a5a@rest) (G395b@get-fields G3a5a@rest)) G3a58@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3a56@t))) (G2fc4@syntax-dispatch G3a56@t '(_ . any)))) G3a50@t))) (G2fc4@syntax-dispatch G3a50@t '((#(scheme-id fields) . each-any) . _)))) G3a4c@t))) (G2fc4@syntax-dispatch G3a4c@t '()))) G3a4a@clause*))) (set! G395d@get-mutator-indices (lambda (G3a32@fields) ((letrec ((G3a34@f (lambda (G3a36@fields G3a37@i) ((lambda (G3a3a@t) ((lambda (G3a3c@ls/false) (if G3a3c@ls/false (apply (lambda () '()) G3a3c@ls/false) ((lambda (G3a3e@t) ((lambda (G3a40@ls/false) (if G3a40@ls/false (apply (lambda (G3a42@rest) (cons G3a37@i (G3a34@f G3a42@rest (+ G3a37@i '1)))) G3a40@ls/false) ((lambda (G3a44@t) ((lambda (G3a46@ls/false) (if G3a46@ls/false (apply (lambda (G3a48@rest) (G3a34@f G3a48@rest (+ G3a37@i '1))) G3a46@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3a44@t))) (G2fc4@syntax-dispatch G3a44@t '(_ . any)))) G3a3e@t))) (G2fc4@syntax-dispatch G3a3e@t '((#(scheme-id mutable) . _) . any)))) G3a3a@t))) (G2fc4@syntax-dispatch G3a3a@t '()))) G3a36@fields)))) G3a34@f) G3a32@fields '0))) (set! G395f@get-mutators (lambda (G3a08@foo G3a09@fields) ((lambda (G3a0d@gen-name) (begin (set! G3a0d@gen-name (lambda (G3a30@x) (G30b1@datum->syntax G3a08@foo (string->symbol (string-append (symbol->string (G30b3@syntax->datum G3a08@foo)) '"-" (symbol->string (G30b3@syntax->datum G3a30@x)) '"-set!"))))) ((letrec ((G3a0e@f (lambda (G3a10@fields) ((lambda (G3a12@t) ((lambda (G3a14@ls/false) (if G3a14@ls/false (apply (lambda () '()) G3a14@ls/false) ((lambda (G3a16@t) ((lambda (G3a18@ls/false) (if G3a18@ls/false (apply (lambda (G3a1a@name G3a1b@accessor G3a1c@mutator G3a1d@rest) (cons G3a1c@mutator (G3a0e@f G3a1d@rest))) G3a18@ls/false) ((lambda (G3a22@t) ((lambda (G3a24@ls/false) (if G3a24@ls/false (apply (lambda (G3a26@name G3a27@rest) (cons (G3a0d@gen-name G3a26@name) (G3a0e@f G3a27@rest))) G3a24@ls/false) ((lambda (G3a2a@t) ((lambda (G3a2c@ls/false) (if G3a2c@ls/false (apply (lambda (G3a2e@rest) (G3a0e@f G3a2e@rest)) G3a2c@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3a2a@t))) (G2fc4@syntax-dispatch G3a2a@t '(_ . any)))) G3a22@t))) (G2fc4@syntax-dispatch G3a22@t '((#(scheme-id mutable) any) . any)))) G3a16@t))) (G2fc4@syntax-dispatch G3a16@t '((#(scheme-id mutable) any any any) . any)))) G3a12@t))) (G2fc4@syntax-dispatch G3a12@t '()))) G3a10@fields)))) G3a0e@f) G3a09@fields))) '#f))) (set! G3961@get-accessors (lambda (G39c4@foo G39c5@fields) ((lambda (G39c9@gen-name) (begin (set! G39c9@gen-name (lambda (G3a06@x) (G30b1@datum->syntax G39c4@foo (string->symbol (string-append (symbol->string (G30b3@syntax->datum G39c4@foo)) '"-" (symbol->string (G30b3@syntax->datum G3a06@x))))))) (map (lambda (G39ca@field) ((lambda (G39cc@t) ((lambda (G39ce@ls/false) (if (if G39ce@ls/false (begin '#f (apply (lambda (G39d0@name G39d1@accessor G39d2@mutator) (G2d81@id? G39d1@accessor)) G39ce@ls/false)) '#f) (apply (lambda (G39d6@name G39d7@accessor G39d8@mutator) G39d7@accessor) G39ce@ls/false) ((lambda (G39dc@t) ((lambda (G39de@ls/false) (if (if G39de@ls/false (begin '#f (apply (lambda (G39e0@name G39e1@accessor) (G2d81@id? G39e1@accessor)) G39de@ls/false)) '#f) (apply (lambda (G39e4@name G39e5@accessor) G39e5@accessor) G39de@ls/false) ((lambda (G39e8@t) ((lambda (G39ea@ls/false) (if (if G39ea@ls/false (begin '#f (apply (lambda (G39ec@name) (G2d81@id? G39ec@name)) G39ea@ls/false)) '#f) (apply (lambda (G39ee@name) (G39c9@gen-name G39ee@name)) G39ea@ls/false) ((lambda (G39f0@t) ((lambda (G39f2@ls/false) (if (if G39f2@ls/false (begin '#f (apply (lambda (G39f4@name) (G2d81@id? G39f4@name)) G39f2@ls/false)) '#f) (apply (lambda (G39f6@name) (G39c9@gen-name G39f6@name)) G39f2@ls/false) ((lambda (G39f8@t) ((lambda (G39fa@ls/false) (if (if G39fa@ls/false (begin '#f (apply (lambda (G39fc@name) (G2d81@id? G39fc@name)) G39fa@ls/false)) '#f) (apply (lambda (G39fe@name) (G39c9@gen-name G39fe@name)) G39fa@ls/false) ((lambda (G3a00@t) ((lambda (G3a02@ls/false) (if G3a02@ls/false (apply (lambda (G3a04@others) (G30ad@syntax-violation '#f '"invalid field spec" G39ca@field)) G3a02@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3a00@t))) (G2fc4@syntax-dispatch G3a00@t 'any))) G39f8@t))) (G2fc4@syntax-dispatch G39f8@t 'any))) G39f0@t))) (G2fc4@syntax-dispatch G39f0@t '(#(scheme-id immutable) any)))) G39e8@t))) (G2fc4@syntax-dispatch G39e8@t '(#(scheme-id mutable) any)))) G39dc@t))) (G2fc4@syntax-dispatch G39dc@t '(#(scheme-id immutable) any any)))) G39cc@t))) (G2fc4@syntax-dispatch G39cc@t '(#(scheme-id mutable) any any any)))) G39ca@field)) G39c5@fields))) '#f))) (set! G3963@enumerate (lambda (G39bc@ls) ((letrec ((G39be@f (lambda (G39c0@ls G39c1@i) (if (null? G39c0@ls) '() (cons G39c1@i (G39be@f (cdr G39c0@ls) (+ G39c1@i '1))))))) G39be@f) G39bc@ls '0))) (set! G3965@do-define-record (lambda (G3994@namespec G3995@clause*) ((lambda (G3998@foo) ((lambda (G399a@foo-rtd) ((lambda (G399c@foo-rcd) ((lambda (G399e@protocol) ((lambda (G39a0@make-foo) ((lambda (G39a2@fields) ((lambda (G39a4@idx*) ((lambda (G39a6@foo-x*) ((lambda (G39a8@set-foo-x!*) ((lambda (G39aa@set-foo-idx*) ((lambda (G39ac@foo?) ((lambda (G39ae@foo-rtd-code) ((lambda (G39b0@foo-rcd-code) ((lambda (G39b2@protocol-code) ((lambda () (G2f7a@bless (cons 'begin (cons (list 'define G399a@foo-rtd G39ae@foo-rtd-code) (cons (list 'define G399e@protocol G39b2@protocol-code) (cons (list 'define G399c@foo-rcd G39b0@foo-rcd-code) (cons (list 'define-syntax G3998@foo (list 'list ''$rtd (list 'syntax G399a@foo-rtd) (list 'syntax G399c@foo-rcd))) (cons (list 'define G39ac@foo? (list 'record-predicate G399a@foo-rtd)) (cons (list 'define G39a0@make-foo (list 'record-constructor G399c@foo-rcd)) (append (map (lambda (G39b4@foo-x G39b5@idx) (list 'define G39b4@foo-x (list 'record-accessor G399a@foo-rtd G39b5@idx))) G39a6@foo-x* G39a4@idx*) (map (lambda (G39b8@set-foo-x! G39b9@idx) (list 'define G39b8@set-foo-x! (list 'record-mutator G399a@foo-rtd G39b9@idx))) G39a8@set-foo-x!* G39aa@set-foo-idx*))))))))))))) (G3959@get-protocol-code G3995@clause*))) (G3957@foo-rcd-code G3995@clause* G399a@foo-rtd G399e@protocol (G3955@parent-rcd-code G3995@clause*)))) (G3951@foo-rtd-code G3998@foo G3995@clause* (G3953@parent-rtd-code G3995@clause*)))) (G394d@get-record-predicate-name G3994@namespec))) (G395d@get-mutator-indices G39a2@fields))) (G395f@get-mutators G3998@foo G39a2@fields))) (G3961@get-accessors G3998@foo G39a2@fields))) (G3963@enumerate G39a2@fields))) (G395b@get-fields G3995@clause*))) (G394b@get-record-constructor-name G3994@namespec))) (gensym))) (gensym))) (gensym))) (G3949@get-record-name G3994@namespec)))) (set! G3967@verify-clauses (lambda (G3970@x G3971@cls*) ((lambda (G3975@valid-kwds G3977@free-id-member?) (begin (set! G3975@valid-kwds (map G2f7a@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3977@free-id-member? (lambda (G398e@x G398f@ls) (if (pair? G398f@ls) (begin '#f ((lambda (G3992@t) (if G3992@t G3992@t (begin '#f (G3977@free-id-member? G398e@x (cdr G398f@ls))))) (G2d89@free-id=? G398e@x (car G398f@ls)))) '#f))) ((letrec ((G3978@f (lambda (G397a@cls* G397b@seen*) (if (null? G397a@cls*) (void) ((lambda (G397e@t) ((lambda (G3980@ls/false) (if G3980@ls/false (apply (lambda (G3982@kwd G3983@rest) (if ((lambda (G3986@t) (if G3986@t G3986@t (begin '#f (not (G3977@free-id-member? G3982@kwd G3975@valid-kwds))))) (not (G2d81@id? G3982@kwd))) (G30ad@syntax-violation '#f '"not a valid define-record-type keyword" G3982@kwd) (if (G2d8f@bound-id-member? G3982@kwd G397b@seen*) (G30ad@syntax-violation '#f '"duplicate use of keyword " G3970@x G3982@kwd) (G3978@f (cdr G397a@cls*) (cons G3982@kwd G397b@seen*))))) G3980@ls/false) ((lambda (G3988@t) ((lambda (G398a@ls/false) (if G398a@ls/false (apply (lambda (G398c@cls) (G30ad@syntax-violation '#f '"malformed define-record-type clause" G398c@cls)) G398a@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3988@t))) (G2fc4@syntax-dispatch G3988@t 'any))) G397e@t))) (G2fc4@syntax-dispatch G397e@t '(any . any)))) (car G397a@cls*)))))) G3978@f) G3971@cls* '()))) '#f '#f))) ((lambda (G3968@t) ((lambda (G396a@ls/false) (if G396a@ls/false (apply (lambda (G396c@namespec G396d@clause*) (begin (G3967@verify-clauses G3944@x G396d@clause*) (G3965@do-define-record G396c@namespec G396d@clause*))) G396a@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3968@t))) (G2fc4@syntax-dispatch G3968@t '(_ any . each-any)))) G3944@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2fba@define-condition-type-macro (lambda (G3b44@x) ((lambda (G3b47@mkname) (begin (set! G3b47@mkname (lambda (G3b74@name G3b75@suffix) (G30b1@datum->syntax G3b74@name (string->symbol (string-append (symbol->string (G30b3@syntax->datum G3b74@name)) G3b75@suffix))))) ((lambda (G3b48@t) ((lambda (G3b4a@ls/false) (if (if G3b4a@ls/false (begin '#f (apply (lambda (G3b4c@ctxt G3b4d@name G3b4e@super G3b4f@constructor G3b50@predicate G3b51@field* G3b52@accessor*) (if (G2d81@id? G3b4d@name) (if (G2d81@id? G3b4e@super) (if (G2d81@id? G3b4f@constructor) (if (G2d81@id? G3b50@predicate) (if (for-all G2d81@id? G3b51@field*) (begin '#f (for-all G2d81@id? G3b52@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3b4a@ls/false)) '#f) (apply (lambda (G3b5a@ctxt G3b5b@name G3b5c@super G3b5d@constructor G3b5e@predicate G3b5f@field* G3b60@accessor*) ((lambda (G3b68@aux-accessor*) (G2f7a@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3b5b@name G3b5d@constructor (gensym)) (cons (list 'parent G3b5c@super) (cons (cons 'fields (map (lambda (G3b6a@field G3b6b@aux) (list 'immutable G3b6a@field G3b6b@aux)) G3b5f@field* G3b68@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3b5e@predicate (list 'condition-predicate (list 'record-type-descriptor G3b5b@name))) (map (lambda (G3b6e@accessor G3b6f@aux) (list 'define G3b6e@accessor (list 'condition-accessor (list 'record-type-descriptor G3b5b@name) G3b6f@aux))) G3b60@accessor* G3b68@aux-accessor*)))))) (map (lambda (G3b72@x) (gensym)) G3b60@accessor*))) G3b4a@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3b48@t))) (G2fc4@syntax-dispatch G3b48@t '(any any any any any . #(each (any any)))))) G3b44@x))) '#f))) (set! G2fbc@incorrect-usage-macro (lambda (G3b78@e) (G30ad@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b78@e))) (set! G2fbe@parameterize-transformer (lambda (G3b7a@e G3b7b@r G3b7c@mr) ((lambda (G3b80@t) ((lambda (G3b82@ls/false) (if G3b82@ls/false (apply (lambda (G3b84@b G3b85@b*) (G2ffe@chi-internal (cons G3b84@b G3b85@b*) G3b7b@r G3b7c@mr)) G3b82@ls/false) ((lambda (G3b88@t) ((lambda (G3b8a@ls/false) (if G3b8a@ls/false (apply (lambda (G3b8c@olhs* G3b8d@orhs* G3b8e@b G3b8f@b*) ((lambda (G3b94@lhs* G3b95@rhs* G3b96@t* G3b97@swap) (G2ce5@G2c0f@build-let '#f (append G3b94@lhs* G3b95@rhs*) (append (G2fe4@chi-expr* G3b8c@olhs* G3b7b@r G3b7c@mr) (G2fe4@chi-expr* G3b8d@orhs* G3b7b@r G3b7c@mr)) (G2ce5@G2c0f@build-let '#f (list G3b97@swap) (list (G2ce3@G2c0b@build-lambda '#f '() (G2ce6@G2c57@build-sequence '#f (map (lambda (G3b9c@t G3b9d@lhs G3b9e@rhs) (G2ce5@G2c0f@build-let '#f (list G3b9c@t) (list (list G3b9d@lhs)) (G2ce6@G2c57@build-sequence '#f (list (list G3b9d@lhs G3b9e@rhs) (list 'set! G3b9e@rhs G3b9c@t))))) G3b96@t* G3b94@lhs* G3b95@rhs*)))) (list '(primitive dynamic-wind) G3b97@swap (G2ce3@G2c0b@build-lambda '#f '() (G2ffe@chi-internal (cons G3b8e@b G3b8f@b*) G3b7b@r G3b7c@mr)) G3b97@swap)))) (map (lambda (G3ba2@x) (G2d03@gen-lexical 'lhs)) G3b8c@olhs*) (map (lambda (G3ba4@x) (G2d03@gen-lexical 'rhs)) G3b8c@olhs*) (map (lambda (G3ba6@x) (G2d03@gen-lexical 't)) G3b8c@olhs*) (G2d03@gen-lexical 'swap))) G3b8a@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3b88@t))) (G2fc4@syntax-dispatch G3b88@t '(_ #(each (any any)) any . each-any)))) G3b80@t))) (G2fc4@syntax-dispatch G3b80@t '(_ () any . each-any)))) G3b7a@e))) (set! G2fc0@foreign-call-transformer (lambda (G3ba8@e G3ba9@r G3baa@mr) ((lambda (G3bae@t) ((lambda (G3bb0@ls/false) (if G3bb0@ls/false (apply (lambda (G3bb2@name G3bb3@arg*) (cons 'foreign-call (cons (G2fe8@chi-expr G3bb2@name G3ba9@r G3baa@mr) (G2fe4@chi-expr* G3bb3@arg* G3ba9@r G3baa@mr)))) G3bb0@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3bae@t))) (G2fc4@syntax-dispatch G3bae@t '(_ any . each-any)))) G3ba8@e))) (set! G2fc2@convert-pattern (lambda (G3bb6@pattern G3bb7@keys) ((lambda (G3bbb@cvt* G3bbd@cvt) (begin (set! G3bbb@cvt* (lambda (G3c4c@p* G3c4d@n G3c4e@ids) (if (null? G3c4c@p*) (values '() G3c4e@ids) (call-with-values (lambda () (G3bbb@cvt* (cdr G3c4c@p*) G3c4d@n G3c4e@ids)) (lambda (G3c54@G3c52 G3c55@G3c53) ((lambda (G3c58@ids G3c59@y) (call-with-values (lambda () (G3bbd@cvt (car G3c4c@p*) G3c4d@n G3c58@ids)) (lambda (G3c5e@G3c5c G3c5f@G3c5d) ((lambda (G3c62@ids G3c63@x) (values (cons G3c63@x G3c59@y) G3c62@ids)) G3c5f@G3c5d G3c5e@G3c5c)))) G3c55@G3c53 G3c54@G3c52)))))) (set! G3bbd@cvt (lambda (G3bbe@p G3bbf@n G3bc0@ids) ((lambda (G3bc4@t) ((lambda (G3bc6@ls/false) (if (if G3bc6@ls/false (begin '#f (apply (lambda (G3bc8@id) (G2d81@id? G3bc8@id)) G3bc6@ls/false)) '#f) (apply (lambda (G3bca@id) (if (G2d8f@bound-id-member? G3bbe@p G3bb7@keys) (values (vector 'free-id G3bbe@p) G3bc0@ids) (if (G2d89@free-id=? G3bbe@p (G2f52@scheme-stx '_)) (values '_ G3bc0@ids) (values 'any (cons (cons G3bbe@p G3bbf@n) G3bc0@ids))))) G3bc6@ls/false) ((lambda (G3bcc@t) ((lambda (G3bce@ls/false) (if (if G3bce@ls/false (begin '#f (apply (lambda (G3bd0@p G3bd1@dots) (G2fc6@ellipsis? G3bd1@dots)) G3bce@ls/false)) '#f) (apply (lambda (G3bd4@p G3bd5@dots) (call-with-values (lambda () (G3bbd@cvt G3bd4@p (+ G3bbf@n '1) G3bc0@ids)) (lambda (G3bda@G3bd8 G3bdb@G3bd9) ((lambda (G3bde@ids G3bdf@p) (values (if (eq? G3bdf@p 'any) 'each-any (vector 'each G3bdf@p)) G3bde@ids)) G3bdb@G3bd9 G3bda@G3bd8)))) G3bce@ls/false) ((lambda (G3be2@t) ((lambda (G3be4@ls/false) (if (if G3be4@ls/false (begin '#f (apply (lambda (G3be6@x G3be7@dots G3be8@ys G3be9@z) (G2fc6@ellipsis? G3be7@dots)) G3be4@ls/false)) '#f) (apply (lambda (G3bee@x G3bef@dots G3bf0@ys G3bf1@z) (call-with-values (lambda () (G3bbd@cvt G3bf1@z G3bbf@n G3bc0@ids)) (lambda (G3bf8@G3bf6 G3bf9@G3bf7) ((lambda (G3bfc@ids G3bfd@z) (call-with-values (lambda () (G3bbb@cvt* G3bf0@ys G3bbf@n G3bfc@ids)) (lambda (G3c02@G3c00 G3c03@G3c01) ((lambda (G3c06@ids G3c07@ys) (call-with-values (lambda () (G3bbd@cvt G3bee@x (+ G3bbf@n '1) G3c06@ids)) (lambda (G3c0c@G3c0a G3c0d@G3c0b) ((lambda (G3c10@ids G3c11@x) (values (vector 'each+ G3c11@x (reverse G3c07@ys) G3bfd@z) G3c10@ids)) G3c0d@G3c0b G3c0c@G3c0a)))) G3c03@G3c01 G3c02@G3c00)))) G3bf9@G3bf7 G3bf8@G3bf6)))) G3be4@ls/false) ((lambda (G3c14@t) ((lambda (G3c16@ls/false) (if G3c16@ls/false (apply (lambda (G3c18@x G3c19@y) (call-with-values (lambda () (G3bbd@cvt G3c19@y G3bbf@n G3bc0@ids)) (lambda (G3c1e@G3c1c G3c1f@G3c1d) ((lambda (G3c22@ids G3c23@y) (call-with-values (lambda () (G3bbd@cvt G3c18@x G3bbf@n G3c22@ids)) (lambda (G3c28@G3c26 G3c29@G3c27) ((lambda (G3c2c@ids G3c2d@x) (values (cons G3c2d@x G3c23@y) G3c2c@ids)) G3c29@G3c27 G3c28@G3c26)))) G3c1f@G3c1d G3c1e@G3c1c)))) G3c16@ls/false) ((lambda (G3c30@t) ((lambda (G3c32@ls/false) (if G3c32@ls/false (apply (lambda () (values '() G3bc0@ids)) G3c32@ls/false) ((lambda (G3c34@t) ((lambda (G3c36@ls/false) (if (if G3c36@ls/false (begin '#f (apply (lambda (G3c38@p) (not (G2d49@stx? G3c38@p))) G3c36@ls/false)) '#f) (apply (lambda (G3c3a@p) (call-with-values (lambda () (G3bbd@cvt G3c3a@p G3bbf@n G3bc0@ids)) (lambda (G3c3e@G3c3c G3c3f@G3c3d) ((lambda (G3c42@ids G3c43@p) (values (vector 'vector G3c43@p) G3c42@ids)) G3c3f@G3c3d G3c3e@G3c3c)))) G3c36@ls/false) ((lambda (G3c46@t) ((lambda (G3c48@ls/false) (if G3c48@ls/false (apply (lambda (G3c4a@datum) (values (vector 'atom (G2d97@stx->datum G3c4a@datum)) G3bc0@ids)) G3c48@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3c46@t))) (G2fc4@syntax-dispatch G3c46@t 'any))) G3c34@t))) (G2fc4@syntax-dispatch G3c34@t '#(vector each-any)))) G3c30@t))) (G2fc4@syntax-dispatch G3c30@t '()))) G3c14@t))) (G2fc4@syntax-dispatch G3c14@t '(any . any)))) G3be2@t))) (G2fc4@syntax-dispatch G3be2@t '(any any . #(each+ any () any))))) G3bcc@t))) (G2fc4@syntax-dispatch G3bcc@t '(any any)))) G3bc4@t))) (G2fc4@syntax-dispatch G3bc4@t 'any))) G3bbe@p))) (G3bbd@cvt G3bb6@pattern '0 '()))) '#f '#f))) (set! G2fc4@syntax-dispatch (lambda (G3c66@e G3c67@p) ((lambda (G3c6b@stx^ G3c6d@match-each G3c6f@match-each+ G3c71@match-each-any G3c73@match-empty G3c75@combine G3c77@match* G3c79@match) (begin (set! G3c6b@stx^ (lambda (G3d2e@e G3d2f@m* G3d30@s* G3d31@ae*) (if (if (null? G3d2f@m*) (if (null? G3d30@s*) (begin '#f (null? G3d31@ae*)) '#f) '#f) G3d2e@e (G2d69@mkstx G3d2e@e G3d2f@m* G3d30@s* G3d31@ae*)))) (set! G3c6d@match-each (lambda (G3d11@e G3d12@p G3d13@m* G3d14@s* G3d15@ae*) (if (pair? G3d11@e) ((lambda (G3d1b@first) (if G3d1b@first (begin '#f ((lambda (G3d1d@rest) (if G3d1d@rest (begin '#f (cons G3d1b@first G3d1d@rest)) '#f)) (G3c6d@match-each (cdr G3d11@e) G3d12@p G3d13@m* G3d14@s* G3d15@ae*))) '#f)) (G3c79@match (car G3d11@e) G3d12@p G3d13@m* G3d14@s* G3d15@ae* '())) (if (null? G3d11@e) '() (if (G2d49@stx? G3d11@e) (if (not (G2d01@top-marked? G3d13@m*)) (begin '#f (call-with-values (lambda () (G2d67@join-wraps G3d13@m* G3d14@s* G3d15@ae* G3d11@e)) (lambda (G3d22@G3d1f G3d23@G3d20 G3d24@G3d21) ((lambda (G3d28@ae* G3d29@s* G3d2a@m*) (G3c6d@match-each (G2d4d@stx-expr G3d11@e) G3d12@p G3d2a@m* G3d29@s* G3d28@ae*)) G3d24@G3d21 G3d23@G3d20 G3d22@G3d1f)))) '#f) (if (G28d9@G2804@annotation? G3d11@e) (G3c6d@match-each (G28db@G2808@annotation-expression G3d11@e) G3d12@p G3d13@m* G3d14@s* G3d15@ae*) '#f)))))) (set! G3c6f@match-each+ (lambda (G3cd7@e G3cd8@x-pat G3cd9@y-pat G3cda@z-pat G3cdb@m* G3cdc@s* G3cdd@ae* G3cde@r) ((letrec ((G3ce7@f (lambda (G3ce9@e G3cea@m* G3ceb@s* G3cec@ae*) (if (pair? G3ce9@e) (call-with-values (lambda () (G3ce7@f (cdr G3ce9@e) G3cea@m* G3ceb@s* G3cec@ae*)) (lambda (G3cf4@G3cf1 G3cf5@G3cf2 G3cf6@G3cf3) ((lambda (G3cfa@r G3cfb@y-pat G3cfc@xr*) (if G3cfa@r (if (null? G3cfb@y-pat) ((lambda (G3d00@xr) (if G3d00@xr (values (cons G3d00@xr G3cfc@xr*) G3cfb@y-pat G3cfa@r) (values '#f '#f '#f))) (G3c79@match (car G3ce9@e) G3cd8@x-pat G3cea@m* G3ceb@s* G3cec@ae* '())) (values '() (cdr G3cfb@y-pat) (G3c79@match (car G3ce9@e) (car G3cfb@y-pat) G3cea@m* G3ceb@s* G3cec@ae* G3cfa@r))) (values '#f '#f '#f))) G3cf6@G3cf3 G3cf5@G3cf2 G3cf4@G3cf1))) (if (G2d49@stx? G3ce9@e) (if (G2d01@top-marked? G3cea@m*) (values '() G3cd9@y-pat (G3c79@match G3ce9@e G3cda@z-pat G3cea@m* G3ceb@s* G3cec@ae* G3cde@r)) (call-with-values (lambda () (G2d67@join-wraps G3cea@m* G3ceb@s* G3cec@ae* G3ce9@e)) (lambda (G3d05@G3d02 G3d06@G3d03 G3d07@G3d04) ((lambda (G3d0b@ae* G3d0c@s* G3d0d@m*) (G3ce7@f (G2d4d@stx-expr G3ce9@e) G3d0d@m* G3d0c@s* G3d0b@ae*)) G3d07@G3d04 G3d06@G3d03 G3d05@G3d02)))) (if (G28d9@G2804@annotation? G3ce9@e) (G3ce7@f (G28db@G2808@annotation-expression G3ce9@e) G3cea@m* G3ceb@s* G3cec@ae*) (values '() G3cd9@y-pat (G3c79@match G3ce9@e G3cda@z-pat G3cea@m* G3ceb@s* G3cec@ae* G3cde@r)))))))) G3ce7@f) G3cd7@e G3cdb@m* G3cdc@s* G3cdd@ae*))) (set! G3c71@match-each-any (lambda (G3cbe@e G3cbf@m* G3cc0@s* G3cc1@ae*) (if (pair? G3cbe@e) ((lambda (G3cc6@l) (if G3cc6@l (begin '#f (cons (G3c6b@stx^ (car G3cbe@e) G3cbf@m* G3cc0@s* G3cc1@ae*) G3cc6@l)) '#f)) (G3c71@match-each-any (cdr G3cbe@e) G3cbf@m* G3cc0@s* G3cc1@ae*)) (if (null? G3cbe@e) '() (if (G2d49@stx? G3cbe@e) (if (not (G2d01@top-marked? G3cbf@m*)) (begin '#f (call-with-values (lambda () (G2d67@join-wraps G3cbf@m* G3cc0@s* G3cc1@ae* G3cbe@e)) (lambda (G3ccb@G3cc8 G3ccc@G3cc9 G3ccd@G3cca) ((lambda (G3cd1@ae* G3cd2@s* G3cd3@m*) (G3c71@match-each-any (G2d4d@stx-expr G3cbe@e) G3cd3@m* G3cd2@s* G3cd1@ae*)) G3ccd@G3cca G3ccc@G3cc9 G3ccb@G3cc8)))) '#f) (if (G28d9@G2804@annotation? G3cbe@e) (G3c71@match-each-any (G28db@G2808@annotation-expression G3cbe@e) G3cbf@m* G3cc0@s* G3cc1@ae*) '#f)))))) (set! G3c73@match-empty (lambda (G3cb9@p G3cba@r) (if (null? G3cb9@p) G3cba@r (if (eq? G3cb9@p '_) G3cba@r (if (eq? G3cb9@p 'any) (cons '() G3cba@r) (if (pair? G3cb9@p) (G3c73@match-empty (car G3cb9@p) (G3c73@match-empty (cdr G3cb9@p) G3cba@r)) (if (eq? G3cb9@p 'each-any) (cons '() G3cba@r) ((lambda (G3cbd@t) (if (eqv? G3cbd@t 'each) (G3c73@match-empty (vector-ref G3cb9@p '1) G3cba@r) (if (eqv? G3cbd@t 'each+) (G3c73@match-empty (vector-ref G3cb9@p '1) (G3c73@match-empty (reverse (vector-ref G3cb9@p '2)) (G3c73@match-empty (vector-ref G3cb9@p '3) G3cba@r))) (if (memv G3cbd@t '(free-id atom)) G3cba@r (if (memv G3cbd@t '(scheme-id atom)) G3cba@r (if (eqv? G3cbd@t 'vector) (G3c73@match-empty (vector-ref G3cb9@p '1) G3cba@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3cb9@p))))))) (vector-ref G3cb9@p '0))))))))) (set! G3c75@combine (lambda (G3cb5@r* G3cb6@r) (if (null? (car G3cb5@r*)) G3cb6@r (cons (map car G3cb5@r*) (G3c75@combine (map cdr G3cb5@r*) G3cb6@r))))) (set! G3c77@match* (lambda (G3c95@e G3c96@p G3c97@m* G3c98@s* G3c99@ae* G3c9a@r) (if (null? G3c96@p) (if (null? G3c95@e) (begin '#f G3c9a@r) '#f) (if (pair? G3c96@p) (if (pair? G3c95@e) (begin '#f (G3c79@match (car G3c95@e) (car G3c96@p) G3c97@m* G3c98@s* G3c99@ae* (G3c79@match (cdr G3c95@e) (cdr G3c96@p) G3c97@m* G3c98@s* G3c99@ae* G3c9a@r))) '#f) (if (eq? G3c96@p 'each-any) ((lambda (G3ca1@l) (if G3ca1@l (begin '#f (cons G3ca1@l G3c9a@r)) '#f)) (G3c71@match-each-any G3c95@e G3c97@m* G3c98@s* G3c99@ae*)) ((lambda (G3ca3@t) (if (eqv? G3ca3@t 'each) (if (null? G3c95@e) (G3c73@match-empty (vector-ref G3c96@p '1) G3c9a@r) ((lambda (G3cb3@r*) (if G3cb3@r* (begin '#f (G3c75@combine G3cb3@r* G3c9a@r)) '#f)) (G3c6d@match-each G3c95@e (vector-ref G3c96@p '1) G3c97@m* G3c98@s* G3c99@ae*))) (if (eqv? G3ca3@t 'free-id) (if (symbol? G3c95@e) (if (G2d01@top-marked? G3c97@m*) (if (G2d89@free-id=? (G3c6b@stx^ G3c95@e G3c97@m* G3c98@s* G3c99@ae*) (vector-ref G3c96@p '1)) (begin '#f G3c9a@r) '#f) '#f) '#f) (if (eqv? G3ca3@t 'scheme-id) (if (symbol? G3c95@e) (if (G2d01@top-marked? G3c97@m*) (if (G2d89@free-id=? (G3c6b@stx^ G3c95@e G3c97@m* G3c98@s* G3c99@ae*) (G2f52@scheme-stx (vector-ref G3c96@p '1))) (begin '#f G3c9a@r) '#f) '#f) '#f) (if (eqv? G3ca3@t 'each+) (call-with-values (lambda () (G3c6f@match-each+ G3c95@e (vector-ref G3c96@p '1) (vector-ref G3c96@p '2) (vector-ref G3c96@p '3) G3c97@m* G3c98@s* G3c99@ae* G3c9a@r)) (lambda (G3ca7@G3ca4 G3ca8@G3ca5 G3ca9@G3ca6) ((lambda (G3cad@r G3cae@y-pat G3caf@xr*) (if G3cad@r (if (null? G3cae@y-pat) (begin '#f (if (null? G3caf@xr*) (G3c73@match-empty (vector-ref G3c96@p '1) G3cad@r) (G3c75@combine G3caf@xr* G3cad@r))) '#f) '#f)) G3ca9@G3ca6 G3ca8@G3ca5 G3ca7@G3ca4))) (if (eqv? G3ca3@t 'atom) (if (equal? (vector-ref G3c96@p '1) (G2d95@strip G3c95@e G3c97@m*)) (begin '#f G3c9a@r) '#f) (if (eqv? G3ca3@t 'vector) (if (vector? G3c95@e) (begin '#f (G3c79@match (vector->list G3c95@e) (vector-ref G3c96@p '1) G3c97@m* G3c98@s* G3c99@ae* G3c9a@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c96@p)))))))) (vector-ref G3c96@p '0))))))) (set! G3c79@match (lambda (G3c7a@e G3c7b@p G3c7c@m* G3c7d@s* G3c7e@ae* G3c7f@r) (if (not G3c7f@r) '#f (if (eq? G3c7b@p '_) G3c7f@r (if (eq? G3c7b@p 'any) (cons (G3c6b@stx^ G3c7a@e G3c7c@m* G3c7d@s* G3c7e@ae*) G3c7f@r) (if (G2d49@stx? G3c7a@e) (if (not (G2d01@top-marked? G3c7c@m*)) (begin '#f (call-with-values (lambda () (G2d67@join-wraps G3c7c@m* G3c7d@s* G3c7e@ae* G3c7a@e)) (lambda (G3c89@G3c86 G3c8a@G3c87 G3c8b@G3c88) ((lambda (G3c8f@ae* G3c90@s* G3c91@m*) (G3c79@match (G2d4d@stx-expr G3c7a@e) G3c7b@p G3c91@m* G3c90@s* G3c8f@ae* G3c7f@r)) G3c8b@G3c88 G3c8a@G3c87 G3c89@G3c86)))) '#f) (if (G28d9@G2804@annotation? G3c7a@e) (G3c79@match (G28db@G2808@annotation-expression G3c7a@e) G3c7b@p G3c7c@m* G3c7d@s* G3c7e@ae* G3c7f@r) (G3c77@match* G3c7a@e G3c7b@p G3c7c@m* G3c7d@s* G3c7e@ae* G3c7f@r)))))))) (G3c79@match G3c66@e G3c67@p '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2fc6@ellipsis? (lambda (G3d36@x) (if (G2d81@id? G3d36@x) (begin '#f (G2d89@free-id=? G3d36@x (G2f52@scheme-stx '...))) '#f))) (set! G2fc8@underscore? (lambda (G3d38@x) (if (G2d81@id? G3d38@x) (begin '#f (G2d89@free-id=? G3d38@x (G2f52@scheme-stx '_))) '#f))) (set! G2fca@verify-literals (lambda (G3d3a@lits G3d3b@expr) (for-each (lambda (G3d3e@x) (if ((lambda (G3d40@t) (if G3d40@t G3d40@t ((lambda (G3d42@t) (if G3d42@t G3d42@t (begin '#f (G2fc8@underscore? G3d3e@x)))) (G2fc6@ellipsis? G3d3e@x)))) (not (G2d81@id? G3d3e@x))) (G30ad@syntax-violation '#f '"invalid literal" G3d3b@expr G3d3e@x) (void))) G3d3a@lits))) (set! G2fcc@syntax-case-transformer ((lambda () ((lambda (G3d45@build-dispatch-call G3d47@invalid-ids-error G3d49@gen-clause G3d4b@gen-syntax-case) (begin (set! G3d45@build-dispatch-call (lambda (G3db4@pvars G3db5@expr G3db6@y G3db7@r G3db8@mr) ((lambda (G3dbe@ids G3dbf@levels) ((lambda (G3dc2@labels G3dc3@new-vars) ((lambda (G3dc6@body) (list '(primitive apply) (G2ce3@G2c0b@build-lambda '#f G3dc3@new-vars G3dc6@body) G3db6@y)) (G2fe8@chi-expr (G2d6d@add-subst (G2d3a@make-full-rib G3dbe@ids G3dc2@labels) G3db5@expr) (append (map (lambda (G3dc8@label G3dc9@var G3dca@level) (cons G3dc8@label (G2da1@make-binding 'syntax (cons G3dc9@var G3dca@level)))) G3dc2@labels G3dc3@new-vars (map cdr G3db4@pvars)) G3db7@r) G3db8@mr))) (map G2d07@gen-label G3dbe@ids) (map G2d03@gen-lexical G3dbe@ids))) (map car G3db4@pvars) (map cdr G3db4@pvars)))) (set! G3d47@invalid-ids-error (lambda (G3da8@id* G3da9@e G3daa@class) ((letrec ((G3dae@find (lambda (G3db0@id* G3db1@ok*) (if (null? G3db0@id*) (G30ad@syntax-violation '#f '"invalid syntax" G3da9@e) (if (G2d81@id? (car G3db0@id*)) (if (G2d8f@bound-id-member? (car G3db0@id*) G3db1@ok*) (G30a7@syntax-error (car G3db0@id*) '"duplicate " G3daa@class) (G3dae@find (cdr G3db0@id*) (cons (car G3db0@id*) G3db1@ok*))) (G30a7@syntax-error (car G3db0@id*) '"invalid " G3daa@class)))))) G3dae@find) G3da8@id* '()))) (set! G3d49@gen-clause (lambda (G3d82@x G3d83@keys G3d84@clauses G3d85@r G3d86@mr G3d87@pat G3d88@fender G3d89@expr) (call-with-values (lambda () (G2fc2@convert-pattern G3d87@pat G3d83@keys)) (lambda (G3d94@G3d92 G3d95@G3d93) ((lambda (G3d98@pvars G3d99@p) (if (not (G2d8d@distinct-bound-ids? (map car G3d98@pvars))) (G3d47@invalid-ids-error (map car G3d98@pvars) G3d87@pat '"pattern variable") (if (not (for-all (lambda (G3d9c@x) (not (G2fc6@ellipsis? (car G3d9c@x)))) G3d98@pvars)) (G30ad@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d87@pat) ((lambda (G3d9e@y) ((lambda (G3da0@test) ((lambda (G3da2@conseq) ((lambda (G3da4@altern) (list (G2ce3@G2c0b@build-lambda '#f (list G3d9e@y) (list 'if G3da0@test G3da2@conseq G3da4@altern)) (list '(primitive syntax-dispatch) G3d82@x (list 'quote G3d99@p)))) (G3d4b@gen-syntax-case G3d82@x G3d83@keys G3d84@clauses G3d85@r G3d86@mr))) (G3d45@build-dispatch-call G3d98@pvars G3d89@expr G3d9e@y G3d85@r G3d86@mr))) (if (eq? G3d88@fender '#t) G3d9e@y ((lambda (G3da6@call) (list 'if G3d9e@y G3da6@call (list 'quote '#f))) (G3d45@build-dispatch-call G3d98@pvars G3d88@fender G3d9e@y G3d85@r G3d86@mr))))) (G2d03@gen-lexical 'tmp))))) G3d95@G3d93 G3d94@G3d92))))) (set! G3d4b@gen-syntax-case (lambda (G3d60@x G3d61@keys G3d62@clauses G3d63@r G3d64@mr) (if (null? G3d62@clauses) (list '(primitive syntax-error) G3d60@x) ((lambda (G3d6a@t) ((lambda (G3d6c@ls/false) (if G3d6c@ls/false (apply (lambda (G3d6e@pat G3d6f@expr) (if (if (G2d81@id? G3d6e@pat) (if (not (G2d8f@bound-id-member? G3d6e@pat G3d61@keys)) (begin '#f (not (G2fc6@ellipsis? G3d6e@pat))) '#f) '#f) (if (G2d89@free-id=? G3d6e@pat (G2f52@scheme-stx '_)) (G2fe8@chi-expr G3d6f@expr G3d63@r G3d64@mr) ((lambda (G3d72@lab G3d73@lex) ((lambda (G3d76@body) (list (G2ce3@G2c0b@build-lambda '#f (list G3d73@lex) G3d76@body) G3d60@x)) (G2fe8@chi-expr (G2d6d@add-subst (G2d3a@make-full-rib (list G3d6e@pat) (list G3d72@lab)) G3d6f@expr) (cons (cons G3d72@lab (G2da1@make-binding 'syntax (cons G3d73@lex '0))) G3d63@r) G3d64@mr))) (G2d07@gen-label G3d6e@pat) (G2d03@gen-lexical G3d6e@pat))) (G3d49@gen-clause G3d60@x G3d61@keys (cdr G3d62@clauses) G3d63@r G3d64@mr G3d6e@pat '#t G3d6f@expr))) G3d6c@ls/false) ((lambda (G3d78@t) ((lambda (G3d7a@ls/false) (if G3d7a@ls/false (apply (lambda (G3d7c@pat G3d7d@fender G3d7e@expr) (G3d49@gen-clause G3d60@x G3d61@keys (cdr G3d62@clauses) G3d63@r G3d64@mr G3d7c@pat G3d7d@fender G3d7e@expr)) G3d7a@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3d78@t))) (G2fc4@syntax-dispatch G3d78@t '(any any any)))) G3d6a@t))) (G2fc4@syntax-dispatch G3d6a@t '(any any)))) (car G3d62@clauses))))) (lambda (G3d4c@e G3d4d@r G3d4e@mr) ((lambda (G3d52@t) ((lambda (G3d54@ls/false) (if G3d54@ls/false (apply (lambda (G3d56@expr G3d57@keys G3d58@clauses) (begin (G2fca@verify-literals G3d57@keys G3d4c@e) ((lambda (G3d5c@x) ((lambda (G3d5e@body) (list (G2ce3@G2c0b@build-lambda '#f (list G3d5c@x) G3d5e@body) (G2fe8@chi-expr G3d56@expr G3d4d@r G3d4e@mr))) (G3d4b@gen-syntax-case G3d5c@x G3d57@keys G3d58@clauses G3d4d@r G3d4e@mr))) (G2d03@gen-lexical 'tmp)))) G3d54@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3d52@t))) (G2fc4@syntax-dispatch G3d52@t '(_ any each-any . each-any)))) G3d4c@e)))) '#f '#f '#f '#f)))) (set! G2fce@ellipsis-map (lambda (G3dce@proc G3dcf@ls . G3dd2@ls*) ((lambda (G3dd5@who) (begin (set! G3dd5@who '...) (begin (if (list? G3dcf@ls) (void) (assertion-violation G3dd5@who '"not a list" G3dcf@ls)) (if (null? G3dd2@ls*) (void) ((lambda (G3dd6@n) (for-each (lambda (G3dd8@x) (begin (if (list? G3dd8@x) (void) (assertion-violation G3dd5@who '"not a list" G3dd8@x)) (if (= (length G3dd8@x) G3dd6@n) (void) (assertion-violation G3dd5@who '"length mismatch" G3dcf@ls G3dd8@x)))) G3dd2@ls*)) (length G3dcf@ls))) (apply map G3dce@proc G3dcf@ls G3dd2@ls*)))) '#f))) (set! G2fd0@syntax-transformer ((lambda () ((lambda (G3ddb@gen-syntax G3ddd@gen-ref G3ddf@gen-append G3de1@gen-mappend G3de3@gen-map G3de5@gen-cons G3de7@gen-vector G3de9@regen) (begin (set! G3ddb@gen-syntax (lambda (G3e4c@src G3e4d@e G3e4e@r G3e4f@maps G3e50@ellipsis? G3e51@vec?) ((lambda (G3e58@t) ((lambda (G3e5a@ls/false) (if (if G3e5a@ls/false (begin '#f (apply (lambda (G3e5c@dots) (G3e50@ellipsis? G3e5c@dots)) G3e5a@ls/false)) '#f) (apply (lambda (G3e5e@dots) (G30ad@syntax-violation '#f '"misplaced ellipsis in syntax form" G3e4c@src)) G3e5a@ls/false) ((lambda (G3e60@t) ((lambda (G3e62@ls/false) (if (if G3e62@ls/false (begin '#f (apply (lambda (G3e64@id) (G2d81@id? G3e64@id)) G3e62@ls/false)) '#f) (apply (lambda (G3e66@id) ((lambda (G3e68@label) ((lambda (G3e6a@b) ((lambda () (if (eq? (G2da3@binding-type G3e6a@b) 'syntax) (call-with-values (lambda () ((lambda (G3e6e@var.lev) (G3ddd@gen-ref G3e4c@src (car G3e6e@var.lev) (cdr G3e6e@var.lev) G3e4f@maps)) (G2da5@binding-value G3e6a@b))) (lambda (G3e70@G3e6c G3e71@G3e6d) ((lambda (G3e74@maps G3e75@var) (values (list 'ref G3e75@var) G3e74@maps)) G3e71@G3e6d G3e70@G3e6c))) (values (list 'quote G3e4d@e) G3e4f@maps))))) (G2d9f@label->binding G3e68@label G3e4e@r))) (G2d9b@id->label G3e4d@e))) G3e62@ls/false) ((lambda (G3e78@t) ((lambda (G3e7a@ls/false) (if (if G3e7a@ls/false (begin '#f (apply (lambda (G3e7c@dots G3e7d@e) (G3e50@ellipsis? G3e7c@dots)) G3e7a@ls/false)) '#f) (apply (lambda (G3e80@dots G3e81@e) (if G3e51@vec? (G30ad@syntax-violation '#f '"misplaced ellipsis in syntax form" G3e4c@src) (G3ddb@gen-syntax G3e4c@src G3e81@e G3e4e@r G3e4f@maps (lambda (G3e84@x) '#f) '#f))) G3e7a@ls/false) ((lambda (G3e86@t) ((lambda (G3e88@ls/false) (if (if G3e88@ls/false (begin '#f (apply (lambda (G3e8a@x G3e8b@dots G3e8c@y) (G3e50@ellipsis? G3e8b@dots)) G3e88@ls/false)) '#f) (apply (lambda (G3e90@x G3e91@dots G3e92@y) ((letrec ((G3e96@f (lambda (G3e98@y G3e99@k) ((lambda (G3e9c@t) ((lambda (G3e9e@ls/false) (if G3e9e@ls/false (apply (lambda () (G3e99@k G3e4f@maps)) G3e9e@ls/false) ((lambda (G3ea0@t) ((lambda (G3ea2@ls/false) (if (if G3ea2@ls/false (begin '#f (apply (lambda (G3ea4@dots G3ea5@y) (G3e50@ellipsis? G3ea4@dots)) G3ea2@ls/false)) '#f) (apply (lambda (G3ea8@dots G3ea9@y) (G3e96@f G3ea9@y (lambda (G3eac@maps) (call-with-values (lambda () (G3e99@k (cons '() G3eac@maps))) (lambda (G3eb0@G3eae G3eb1@G3eaf) ((lambda (G3eb4@maps G3eb5@x) (if (null? (car G3eb4@maps)) (G30ad@syntax-violation '#f '"extra ellipsis in syntax form" G3e4c@src) (values (G3de1@gen-mappend G3eb5@x (car G3eb4@maps)) (cdr G3eb4@maps)))) G3eb1@G3eaf G3eb0@G3eae)))))) G3ea2@ls/false) ((lambda (G3eb8@t) ((lambda (G3eba@ls/false) (if G3eba@ls/false (apply (lambda () (call-with-values (lambda () (G3ddb@gen-syntax G3e4c@src G3e98@y G3e4e@r G3e4f@maps G3e50@ellipsis? G3e51@vec?)) (lambda (G3ebe@G3ebc G3ebf@G3ebd) ((lambda (G3ec2@maps G3ec3@y) (call-with-values (lambda () (G3e99@k G3ec2@maps)) (lambda (G3ec8@G3ec6 G3ec9@G3ec7) ((lambda (G3ecc@maps G3ecd@x) (values (G3ddf@gen-append G3ecd@x G3ec3@y) G3ecc@maps)) G3ec9@G3ec7 G3ec8@G3ec6)))) G3ebf@G3ebd G3ebe@G3ebc)))) G3eba@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3eb8@t))) (G2fc4@syntax-dispatch G3eb8@t '_))) G3ea0@t))) (G2fc4@syntax-dispatch G3ea0@t '(any . any)))) G3e9c@t))) (G2fc4@syntax-dispatch G3e9c@t '()))) G3e98@y)))) G3e96@f) G3e92@y (lambda (G3ed0@maps) (call-with-values (lambda () (G3ddb@gen-syntax G3e4c@src G3e90@x G3e4e@r (cons '() G3ed0@maps) G3e50@ellipsis? '#f)) (lambda (G3ed4@G3ed2 G3ed5@G3ed3) ((lambda (G3ed8@maps G3ed9@x) (if (null? (car G3ed8@maps)) (G30ad@syntax-violation '#f '"extra ellipsis in syntax form" G3e4c@src) (values (G3de3@gen-map G3ed9@x (car G3ed8@maps)) (cdr G3ed8@maps)))) G3ed5@G3ed3 G3ed4@G3ed2)))))) G3e88@ls/false) ((lambda (G3edc@t) ((lambda (G3ede@ls/false) (if G3ede@ls/false (apply (lambda (G3ee0@x G3ee1@y) (call-with-values (lambda () (G3ddb@gen-syntax G3e4c@src G3ee0@x G3e4e@r G3e4f@maps G3e50@ellipsis? '#f)) (lambda (G3ee6@G3ee4 G3ee7@G3ee5) ((lambda (G3eea@maps G3eeb@xnew) (call-with-values (lambda () (G3ddb@gen-syntax G3e4c@src G3ee1@y G3e4e@r G3eea@maps G3e50@ellipsis? G3e51@vec?)) (lambda (G3ef0@G3eee G3ef1@G3eef) ((lambda (G3ef4@maps G3ef5@ynew) (values (G3de5@gen-cons G3e4d@e G3ee0@x G3ee1@y G3eeb@xnew G3ef5@ynew) G3ef4@maps)) G3ef1@G3eef G3ef0@G3eee)))) G3ee7@G3ee5 G3ee6@G3ee4)))) G3ede@ls/false) ((lambda (G3ef8@t) ((lambda (G3efa@ls/false) (if G3efa@ls/false (apply (lambda (G3efc@ls) (call-with-values (lambda () (G3ddb@gen-syntax G3e4c@src G3efc@ls G3e4e@r G3e4f@maps G3e50@ellipsis? '#t)) (lambda (G3f00@G3efe G3f01@G3eff) ((lambda (G3f04@maps G3f05@lsnew) (values (G3de7@gen-vector G3e4d@e G3efc@ls G3f05@lsnew) G3f04@maps)) G3f01@G3eff G3f00@G3efe)))) G3efa@ls/false) ((lambda (G3f08@t) ((lambda (G3f0a@ls/false) (if G3f0a@ls/false (apply (lambda () (values (list 'quote G3e4d@e) G3e4f@maps)) G3f0a@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3f08@t))) (G2fc4@syntax-dispatch G3f08@t '_))) G3ef8@t))) (G2fc4@syntax-dispatch G3ef8@t '#(vector each-any)))) G3edc@t))) (G2fc4@syntax-dispatch G3edc@t '(any . any)))) G3e86@t))) (G2fc4@syntax-dispatch G3e86@t '(any any . any)))) G3e78@t))) (G2fc4@syntax-dispatch G3e78@t '(any any)))) G3e60@t))) (G2fc4@syntax-dispatch G3e60@t 'any))) G3e58@t))) (G2fc4@syntax-dispatch G3e58@t 'any))) G3e4d@e))) (set! G3ddd@gen-ref (lambda (G3e34@src G3e35@var G3e36@level G3e37@maps) (if (= G3e36@level '0) (values G3e35@var G3e37@maps) (if (null? G3e37@maps) (G30ad@syntax-violation '#f '"missing ellipsis in syntax form" G3e34@src) (call-with-values (lambda () (G3ddd@gen-ref G3e34@src G3e35@var (- G3e36@level '1) (cdr G3e37@maps))) (lambda (G3e3e@G3e3c G3e3f@G3e3d) ((lambda (G3e42@outer-maps G3e43@outer-var) ((lambda (G3e46@t) (if G3e46@t ((lambda (G3e48@b) (values (cdr G3e48@b) G3e37@maps)) G3e46@t) ((lambda (G3e4a@inner-var) (values G3e4a@inner-var (cons (cons (cons G3e43@outer-var G3e4a@inner-var) (car G3e37@maps)) G3e42@outer-maps))) (G2d03@gen-lexical 'tmp)))) (assq G3e43@outer-var (car G3e37@maps)))) G3e3f@G3e3d G3e3e@G3e3c))))))) (set! G3ddf@gen-append (lambda (G3e30@x G3e31@y) (if (equal? G3e31@y ''()) G3e30@x (list 'append G3e30@x G3e31@y)))) (set! G3de1@gen-mappend (lambda (G3e2c@e G3e2d@map-env) (list 'apply '(primitive append) (G3de3@gen-map G3e2c@e G3e2d@map-env)))) (set! G3de3@gen-map (lambda (G3e1a@e G3e1b@map-env) ((lambda (G3e1e@formals G3e1f@actuals) (if (eq? (car G3e1a@e) 'ref) (car G3e1f@actuals) (if (for-all (lambda (G3e22@x) (if (eq? (car G3e22@x) 'ref) (begin '#f (memq (cadr G3e22@x) G3e1e@formals)) '#f)) (cdr G3e1a@e)) ((lambda (G3e24@args) (cons 'map (cons (list 'primitive (car G3e1a@e)) G3e24@args))) (map ((lambda (G3e26@r) (lambda (G3e28@x) (cdr (assq (cadr G3e28@x) G3e26@r)))) (map cons G3e1e@formals G3e1f@actuals)) (cdr G3e1a@e))) (cons* 'map (list 'lambda G3e1e@formals G3e1a@e) G3e1f@actuals)))) (map cdr G3e1b@map-env) (map (lambda (G3e2a@x) (list 'ref (car G3e2a@x))) G3e1b@map-env)))) (set! G3de5@gen-cons (lambda (G3e0b@e G3e0c@x G3e0d@y G3e0e@xnew G3e0f@ynew) ((lambda (G3e15@t) (if (eqv? G3e15@t 'quote) (if (eq? (car G3e0e@xnew) 'quote) ((lambda (G3e16@xnew G3e17@ynew) (if (if (eq? G3e16@xnew G3e0c@x) (begin '#f (eq? G3e17@ynew G3e0d@y)) '#f) (list 'quote G3e0b@e) (list 'quote (cons G3e16@xnew G3e17@ynew)))) (cadr G3e0e@xnew) (cadr G3e0f@ynew)) (if (null? (cadr G3e0f@ynew)) (list 'list G3e0e@xnew) (list 'cons G3e0e@xnew G3e0f@ynew))) (if (eqv? G3e15@t 'list) (cons 'list (cons G3e0e@xnew (cdr G3e0f@ynew))) (list 'cons G3e0e@xnew G3e0f@ynew)))) (car G3e0f@ynew)))) (set! G3de7@gen-vector (lambda (G3e05@e G3e06@ls G3e07@lsnew) (if (eq? (car G3e07@lsnew) 'quote) (if (eq? (cadr G3e07@lsnew) G3e06@ls) (list 'quote G3e05@e) (list 'quote (list->vector (cadr G3e07@lsnew)))) (if (eq? (car G3e07@lsnew) 'list) (cons 'vector (cdr G3e07@lsnew)) (list 'list->vector G3e07@lsnew))))) (set! G3de9@regen (lambda (G3e00@x) ((lambda (G3e02@t) (if (eqv? G3e02@t 'ref) (cadr G3e00@x) (if (eqv? G3e02@t 'primitive) (list 'primitive (cadr G3e00@x)) (if (eqv? G3e02@t 'quote) (list 'quote (cadr G3e00@x)) (if (eqv? G3e02@t 'lambda) (G2ce3@G2c0b@build-lambda '#f (cadr G3e00@x) (G3de9@regen (caddr G3e00@x))) (if (eqv? G3e02@t 'map) ((lambda (G3e03@ls) (cons '(primitive ellipsis-map) G3e03@ls)) (map G3de9@regen (cdr G3e00@x))) (cons (list 'primitive (car G3e00@x)) (map G3de9@regen (cdr G3e00@x))))))))) (car G3e00@x)))) (lambda (G3dea@e G3deb@r G3dec@mr) ((lambda (G3df0@t) ((lambda (G3df2@ls/false) (if G3df2@ls/false (apply (lambda (G3df4@x) (call-with-values (lambda () (G3ddb@gen-syntax G3dea@e G3df4@x G3deb@r '() G2fc6@ellipsis? '#f)) (lambda (G3df8@G3df6 G3df9@G3df7) ((lambda (G3dfc@maps G3dfd@e) (G3de9@regen G3dfd@e)) G3df9@G3df7 G3df8@G3df6)))) G3df2@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3df0@t))) (G2fc4@syntax-dispatch G3df0@t '(_ any)))) G3dea@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fd2@core-macro-transformer (lambda (G3f0c@name) ((lambda (G3f0e@t) (if (eqv? G3f0e@t 'quote) G2f74@quote-transformer (if (eqv? G3f0e@t 'lambda) G2f78@lambda-transformer (if (eqv? G3f0e@t 'case-lambda) G2f76@case-lambda-transformer (if (eqv? G3f0e@t 'letrec) G2f60@letrec-transformer (if (eqv? G3f0e@t 'letrec*) G2f62@letrec*-transformer (if (eqv? G3f0e@t 'case) G2f72@case-transformer (if (eqv? G3f0e@t 'if) G2f70@if-transformer (if (eqv? G3f0e@t 'when) G2f6c@when-transformer (if (eqv? G3f0e@t 'unless) G2f6e@unless-transformer (if (eqv? G3f0e@t 'parameterize) G2fbe@parameterize-transformer (if (eqv? G3f0e@t 'foreign-call) G2fc0@foreign-call-transformer (if (eqv? G3f0e@t 'syntax-case) G2fcc@syntax-case-transformer (if (eqv? G3f0e@t 'syntax) G2fd0@syntax-transformer (if (eqv? G3f0e@t 'type-descriptor) G2f66@type-descriptor-transformer (if (eqv? G3f0e@t 'record-type-descriptor) G2f68@record-type-descriptor-transformer (if (eqv? G3f0e@t 'record-constructor-descriptor) G2f6a@record-constructor-descriptor-transformer (if (eqv? G3f0e@t 'fluid-let-syntax) G2f64@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3f0c@name))))))))))))))))))) G3f0c@name))) (set! G2fd4@file-options-macro (lambda (G3f0f@x) ((lambda (G3f11@t) ((lambda (G3f13@ls/false) (if (if G3f13@ls/false (begin '#f (apply (lambda (G3f15@opt*) (if (for-all G2d81@id? G3f15@opt*) (begin '#f (G28e2@G28ae@file-options-spec (map G2d83@id->sym G3f15@opt*))) '#f)) G3f13@ls/false)) '#f) (apply (lambda (G3f17@opt*) (G2f7a@bless (list 'quote (G28e2@G28ae@file-options-spec (map G2d83@id->sym G3f17@opt*))))) G3f13@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3f11@t))) (G2fc4@syntax-dispatch G3f11@t '(_ . each-any)))) G3f0f@x))) (set! G2fd6@symbol-macro (lambda (G3f19@x G3f1a@set) ((lambda (G3f1d@t) ((lambda (G3f1f@ls/false) (if (if G3f1f@ls/false (begin '#f (apply (lambda (G3f21@name) (if (G2d81@id? G3f21@name) (begin '#f (memq (G2d83@id->sym G3f21@name) G3f1a@set)) '#f)) G3f1f@ls/false)) '#f) (apply (lambda (G3f23@name) (G2f7a@bless (list 'quote G3f23@name))) G3f1f@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3f1d@t))) (G2fc4@syntax-dispatch G3f1d@t '(_ any)))) G3f19@x))) (set! G2fd8@macro-transformer (lambda (G3f25@x) (if (procedure? G3f25@x) G3f25@x (if (symbol? G3f25@x) ((lambda (G3f27@t) (if (eqv? G3f27@t 'define-record-type) G2fb8@define-record-type-macro (if (eqv? G3f27@t 'define-struct) G2fb6@define-struct-macro (if (eqv? G3f27@t 'include) G2fac@include-macro (if (eqv? G3f27@t 'cond) G2fa8@cond-macro (if (eqv? G3f27@t 'let) G2f80@let-macro (if (eqv? G3f27@t 'do) G2fa0@do-macro (if (eqv? G3f27@t 'or) G2fa4@or-macro (if (eqv? G3f27@t 'and) G2fa6@and-macro (if (eqv? G3f27@t 'let*) G2fa2@let*-macro (if (eqv? G3f27@t 'let-values) G2f82@let-values-macro (if (eqv? G3f27@t 'let*-values) G2f84@let*-values-macro (if (eqv? G3f27@t 'syntax-rules) G2fb0@syntax-rules-macro (if (eqv? G3f27@t 'quasiquote) G2fb2@quasiquote-macro (if (eqv? G3f27@t 'quasisyntax) G2fb4@quasisyntax-macro (if (eqv? G3f27@t 'with-syntax) G2f7c@with-syntax-macro (if (eqv? G3f27@t 'identifier-syntax) G2f9e@identifier-syntax-macro (if (eqv? G3f27@t 'time) G2f96@time-macro (if (eqv? G3f27@t 'delay) G2f98@delay-macro (if (eqv? G3f27@t 'assert) G2f9a@assert-macro (if (eqv? G3f27@t 'endianness) G2f9c@endianness-macro (if (eqv? G3f27@t 'guard) G2f92@guard-macro (if (eqv? G3f27@t 'define-enumeration) G2f94@define-enumeration-macro (if (eqv? G3f27@t 'trace-lambda) G2f86@trace-lambda-macro (if (eqv? G3f27@t 'trace-define) G2f88@trace-define-macro (if (eqv? G3f27@t 'trace-define-syntax) G2f8a@trace-define-syntax-macro (if (eqv? G3f27@t 'trace-let-syntax) G2f8e@trace-let-syntax-macro (if (eqv? G3f27@t 'trace-letrec-syntax) G2f90@trace-letrec-syntax-macro (if (eqv? G3f27@t 'define-condition-type) G2fba@define-condition-type-macro (if (eqv? G3f27@t 'include-into) G2fae@include-into-macro (if (eqv? G3f27@t 'eol-style) (lambda (G3f2c@x) (G2fd6@symbol-macro G3f2c@x '(none lf cr crlf nel crnel ls))) (if (eqv? G3f27@t 'error-handling-mode) (lambda (G3f2a@x) (G2fd6@symbol-macro G3f2a@x '(ignore raise replace))) (if (eqv? G3f27@t 'buffer-mode) (lambda (G3f28@x) (G2fd6@symbol-macro G3f28@x '(none line block))) (if (eqv? G3f27@t 'file-options) G2fd4@file-options-macro (if (memv G3f27@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2fbc@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3f25@x)))))))))))))))))))))))))))))))))))) G3f25@x) (error 'core-macro-transformer '"BUG: invalid macro" G3f25@x))))) (set! G2fda@local-macro-transformer (lambda (G3f2e@x) (car G3f2e@x))) (set! G2fdc@do-macro-call (lambda (G3f30@transformer G3f31@expr) ((lambda (G3f34@out) (begin ((letrec ((G3f36@f (lambda (G3f38@x) (if (G2d49@stx? G3f38@x) (void) (if (pair? G3f38@x) (begin (G3f36@f (car G3f38@x)) (G3f36@f (cdr G3f38@x))) (if (vector? G3f38@x) (vector-for-each G3f36@f G3f38@x) (if (symbol? G3f38@x) (G30ad@syntax-violation '#f '"raw symbol encountered in output of macro" G3f31@expr G3f38@x) (void)))))))) G3f36@f) G3f34@out) (G2d6b@add-mark (G2d61@gen-mark) G3f34@out G3f31@expr))) (G3f30@transformer (G2d6b@add-mark G2d63@anti-mark G3f31@expr '#f))))) (set! G2fde@chi-macro (lambda (G3f3a@p G3f3b@e) (G2fdc@do-macro-call (G2fd8@macro-transformer G3f3a@p) G3f3b@e))) (set! G2fe0@chi-local-macro (lambda (G3f3e@p G3f3f@e) (G2fdc@do-macro-call (G2fda@local-macro-transformer G3f3e@p) G3f3f@e))) (set! G2fe2@chi-global-macro (lambda (G3f42@p G3f43@e) ((lambda (G3f46@lib G3f47@loc) (begin (G2b81@G2a1a@visit-library G3f46@lib) ((lambda (G3f4a@x) ((lambda (G3f4c@transformer) (G2fdc@do-macro-call G3f4c@transformer G3f43@e)) (if (procedure? G3f4a@x) G3f4a@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3f4a@x)))) (symbol-value G3f47@loc)))) (car G3f42@p) (cdr G3f42@p)))) (set! G2fe4@chi-expr* (lambda (G3f4e@e* G3f4f@r G3f50@mr) (if (null? G3f4e@e*) '() ((lambda (G3f54@e) (cons G3f54@e (G2fe4@chi-expr* (cdr G3f4e@e*) G3f4f@r G3f50@mr))) (G2fe8@chi-expr (car G3f4e@e*) G3f4f@r G3f50@mr))))) (set! G2fe6@chi-application (lambda (G3f56@e G3f57@r G3f58@mr) ((lambda (G3f5c@t) ((lambda (G3f5e@ls/false) (if G3f5e@ls/false (apply (lambda (G3f60@rator G3f61@rands) ((lambda (G3f64@rator) (cons G3f64@rator (G2fe4@chi-expr* G3f61@rands G3f57@r G3f58@mr))) (G2fe8@chi-expr G3f60@rator G3f57@r G3f58@mr))) G3f5e@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3f5c@t))) (G2fc4@syntax-dispatch G3f5c@t '(any . each-any)))) G3f56@e))) (set! G2fe8@chi-expr (lambda (G3f66@e G3f67@r G3f68@mr) (call-with-values (lambda () (G2da9@syntax-type G3f66@e G3f67@r)) (lambda (G3f6f@G3f6c G3f70@G3f6d G3f71@G3f6e) ((lambda (G3f75@kwd G3f76@value G3f77@type) ((lambda (G3f7b@t) (if (eqv? G3f7b@t 'core-macro) ((lambda (G3fad@transformer) (G3fad@transformer G3f66@e G3f67@r G3f68@mr)) (G2fd2@core-macro-transformer G3f76@value)) (if (eqv? G3f7b@t 'global) ((lambda (G3fa9@lib) ((lambda (G3fab@loc) ((lambda () (begin ((G3033@inv-collector) G3fa9@lib) G3fab@loc)))) (cdr G3f76@value))) (car G3f76@value)) (if (eqv? G3f7b@t 'core-prim) ((lambda (G3fa7@name) (list 'primitive G3fa7@name)) G3f76@value) (if (eqv? G3f7b@t 'call) (G2fe6@chi-application G3f66@e G3f67@r G3f68@mr) (if (eqv? G3f7b@t 'lexical) ((lambda (G3fa5@lex) G3fa5@lex) (G2f54@lexical-var G3f76@value)) (if (memv G3f7b@t '(global-macro global-macro!)) (G2fe8@chi-expr (G2fe2@chi-global-macro G3f76@value G3f66@e) G3f67@r G3f68@mr) (if (memv G3f7b@t '(local-macro local-macro!)) (G2fe8@chi-expr (G2fe0@chi-local-macro G3f76@value G3f66@e) G3f67@r G3f68@mr) (if (memv G3f7b@t '(macro macro!)) (G2fe8@chi-expr (G2fde@chi-macro G3f76@value G3f66@e) G3f67@r G3f68@mr) (if (eqv? G3f7b@t 'constant) ((lambda (G3fa3@datum) (list 'quote G3fa3@datum)) G3f76@value) (if (eqv? G3f7b@t 'set!) (G2fea@chi-set! G3f66@e G3f67@r G3f68@mr) (if (eqv? G3f7b@t 'begin) ((lambda (G3f9b@t) ((lambda (G3f9d@ls/false) (if G3f9d@ls/false (apply (lambda (G3f9f@x G3fa0@x*) (G2ce6@G2c57@build-sequence '#f (G2fe4@chi-expr* (cons G3f9f@x G3fa0@x*) G3f67@r G3f68@mr))) G3f9d@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3f9b@t))) (G2fc4@syntax-dispatch G3f9b@t '(_ any . each-any)))) G3f66@e) (if (memv G3f7b@t '(let-syntax letrec-syntax)) ((lambda (G3f7d@t) ((lambda (G3f7f@ls/false) (if (if G3f7f@ls/false (begin '#f (apply (lambda (G3f81@xlhs* G3f82@xrhs* G3f83@xbody G3f84@xbody*) (if (G2d8b@valid-bound-ids? G3f81@xlhs*) (void) (G30ad@syntax-violation '#f '"invalid identifiers" G3f66@e))) G3f7f@ls/false)) '#f) (apply (lambda (G3f89@xlhs* G3f8a@xrhs* G3f8b@xbody G3f8c@xbody*) ((lambda (G3f91@xlab*) ((lambda (G3f93@xrib) ((lambda (G3f95@xb*) ((lambda () (G2ce6@G2c57@build-sequence '#f (G2fe4@chi-expr* (map (lambda (G3f97@x) (G2d6d@add-subst G3f93@xrib G3f97@x)) (cons G3f8b@xbody G3f8c@xbody*)) (append (map cons G3f91@xlab* G3f95@xb*) G3f67@r) (append (map cons G3f91@xlab* G3f95@xb*) G3f68@mr)))))) (map (lambda (G3f99@x) (G2dc8@make-eval-transformer (G3025@expand-transformer (if (eq? G3f77@type 'let-syntax) G3f99@x (G2d6d@add-subst G3f93@xrib G3f99@x)) G3f68@mr))) G3f8a@xrhs*))) (G2d3a@make-full-rib G3f89@xlhs* G3f91@xlab*))) (map G2d07@gen-label G3f89@xlhs*))) G3f7f@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3f7d@t))) (G2fc4@syntax-dispatch G3f7d@t '(_ #(each (any any)) any . each-any)))) G3f66@e) (if (eqv? G3f7b@t 'displaced-lexical) (G30ad@syntax-violation '#f '"identifier out of context" G3f66@e) (if (eqv? G3f7b@t 'syntax) (G30ad@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3f66@e) (if (memv G3f7b@t '(define define-syntax module import library)) (G30ad@syntax-violation '#f (string-append ((lambda (G3f7c@t) (if (eqv? G3f7c@t 'define) '"a definition" (if (eqv? G3f7c@t 'define-syntax) '"a define-syntax" (if (eqv? G3f7c@t 'module) '"a module definition" (if (eqv? G3f7c@t 'library) '"a library definition" (if (eqv? G3f7c@t 'import) '"an import declaration" '"a non-expression")))))) G3f77@type) '" was found where an expression was expected") G3f66@e) (if (eqv? G3f7b@t 'mutable) (G30ad@syntax-violation '#f '"attempt to reference an unexportable variable" G3f66@e) (G30ad@syntax-violation '#f '"invalid expression" G3f66@e)))))))))))))))))) G3f77@type)) G3f71@G3f6e G3f70@G3f6d G3f6f@G3f6c))))) (set! G2fea@chi-set! (lambda (G3faf@e G3fb0@r G3fb1@mr) ((lambda (G3fb5@t) ((lambda (G3fb7@ls/false) (if (if G3fb7@ls/false (begin '#f (apply (lambda (G3fb9@x G3fba@v) (G2d81@id? G3fb9@x)) G3fb7@ls/false)) '#f) (apply (lambda (G3fbd@x G3fbe@v) (call-with-values (lambda () (G2da9@syntax-type G3fbd@x G3fb0@r)) (lambda (G3fc4@G3fc1 G3fc5@G3fc2 G3fc6@G3fc3) ((lambda (G3fca@kwd G3fcb@value G3fcc@type) ((lambda (G3fd0@t) (if (eqv? G3fd0@t 'lexical) (begin (G2f58@set-lexical-mutable! G3fcb@value '#t) (list 'set! (G2f54@lexical-var G3fcb@value) (G2fe8@chi-expr G3fbe@v G3fb0@r G3fb1@mr))) (if (eqv? G3fd0@t 'core-prim) (G30ad@syntax-violation '#f '"cannot modify imported core primitive" G3faf@e) (if (eqv? G3fd0@t 'global) (G30ad@syntax-violation '#f '"attempt to modify imported binding" G3faf@e) (if (eqv? G3fd0@t 'global-macro!) (G2fe8@chi-expr (G2fe2@chi-global-macro G3fcb@value G3faf@e) G3fb0@r G3fb1@mr) (if (eqv? G3fd0@t 'local-macro!) (G2fe8@chi-expr (G2fe0@chi-local-macro G3fcb@value G3faf@e) G3fb0@r G3fb1@mr) (if (eqv? G3fd0@t 'mutable) (G30ad@syntax-violation '#f '"attempt to assign to an unexportable variable" G3faf@e) (G30ad@syntax-violation '#f '"invalid syntax" G3faf@e)))))))) G3fcc@type)) G3fc6@G3fc3 G3fc5@G3fc2 G3fc4@G3fc1)))) G3fb7@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3fb5@t))) (G2fc4@syntax-dispatch G3fb5@t '(_ any any)))) G3faf@e))) (set! G2fec@verify-formals (lambda (G3fd1@fmls G3fd2@stx) ((lambda (G3fd5@t) ((lambda (G3fd7@ls/false) (if G3fd7@ls/false (apply (lambda (G3fd9@x*) (if (G2d8b@valid-bound-ids? G3fd9@x*) (void) (G2f7e@invalid-fmls-error G3fd2@stx G3fd1@fmls))) G3fd7@ls/false) ((lambda (G3fdb@t) ((lambda (G3fdd@ls/false) (if G3fdd@ls/false (apply (lambda (G3fdf@x* G3fe0@x) (if (G2d8b@valid-bound-ids? (cons G3fe0@x G3fdf@x*)) (void) (G2f7e@invalid-fmls-error G3fd2@stx G3fd1@fmls))) G3fdd@ls/false) ((lambda (G3fe3@t) ((lambda (G3fe5@ls/false) (if G3fe5@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"invalid syntax" G3fd2@stx)) G3fe5@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G3fe3@t))) (G2fc4@syntax-dispatch G3fe3@t '_))) G3fdb@t))) (G2fc4@syntax-dispatch G3fdb@t '#(each+ any () any)))) G3fd5@t))) (G2fc4@syntax-dispatch G3fd5@t 'each-any))) G3fd1@fmls))) (set! G2fee@chi-lambda-clause (lambda (G3fe7@stx G3fe8@fmls G3fe9@body* G3fea@r G3feb@mr) ((lambda (G3ff1@t) ((lambda (G3ff3@ls/false) (if G3ff3@ls/false (apply (lambda (G3ff5@x*) (begin (G2fec@verify-formals G3fe8@fmls G3fe7@stx) ((lambda (G3ff7@lex* G3ff8@lab*) (values G3ff7@lex* (G2ffe@chi-internal (G2d6d@add-subst (G2d3a@make-full-rib G3ff5@x* G3ff8@lab*) G3fe9@body*) (G2f5c@add-lexicals G3ff8@lab* G3ff7@lex* G3fea@r) G3feb@mr))) (map G2d03@gen-lexical G3ff5@x*) (map G2d07@gen-label G3ff5@x*)))) G3ff3@ls/false) ((lambda (G3ffb@t) ((lambda (G3ffd@ls/false) (if G3ffd@ls/false (apply (lambda (G3fff@x* G4000@x) (begin (G2fec@verify-formals G3fe8@fmls G3fe7@stx) ((lambda (G4003@lex* G4004@lab* G4005@lex G4006@lab) (values (append G4003@lex* G4005@lex) (G2ffe@chi-internal (G2d6d@add-subst (G2d3a@make-full-rib (cons G4000@x G3fff@x*) (cons G4006@lab G4004@lab*)) G3fe9@body*) (G2f5c@add-lexicals (cons G4006@lab G4004@lab*) (cons G4005@lex G4003@lex*) G3fea@r) G3feb@mr))) (map G2d03@gen-lexical G3fff@x*) (map G2d07@gen-label G3fff@x*) (G2d03@gen-lexical G4000@x) (G2d07@gen-label G4000@x)))) G3ffd@ls/false) ((lambda (G400b@t) ((lambda (G400d@ls/false) (if G400d@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"invalid syntax" G3fe8@fmls)) G400d@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G400b@t))) (G2fc4@syntax-dispatch G400b@t '_))) G3ffb@t))) (G2fc4@syntax-dispatch G3ffb@t '#(each+ any () any)))) G3ff1@t))) (G2fc4@syntax-dispatch G3ff1@t 'each-any))) G3fe8@fmls))) (set! G2ff0@chi-lambda-clause* (lambda (G400f@stx G4010@fmls* G4011@body** G4012@r G4013@mr) (if (null? G4010@fmls*) (values '() '()) (call-with-values (lambda () (G2fee@chi-lambda-clause G400f@stx (car G4010@fmls*) (car G4011@body**) G4012@r G4013@mr)) (lambda (G401b@G4019 G401c@G401a) ((lambda (G401f@b G4020@a) (call-with-values (lambda () (G2ff0@chi-lambda-clause* G400f@stx (cdr G4010@fmls*) (cdr G4011@body**) G4012@r G4013@mr)) (lambda (G4025@G4023 G4026@G4024) ((lambda (G4029@b* G402a@a*) (values (cons G4020@a G402a@a*) (cons G401f@b G4029@b*))) G4026@G4024 G4025@G4023)))) G401c@G401a G401b@G4019)))))) (set! G2ff2@chi-defun (lambda (G402d@x G402e@r G402f@mr) ((lambda (G4033@fmls G4034@body*) (call-with-values (lambda () (G2fee@chi-lambda-clause G4033@fmls G4033@fmls G4034@body* G402e@r G402f@mr)) (lambda (G4039@G4037 G403a@G4038) ((lambda (G403d@body G403e@fmls) (G2ce3@G2c0b@build-lambda '#f G403e@fmls G403d@body)) G403a@G4038 G4039@G4037)))) (car G402d@x) (cdr G402d@x)))) (set! G2ff4@chi-rhs (lambda (G4041@rhs G4042@r G4043@mr) ((lambda (G4047@t) (if (eqv? G4047@t 'defun) (G2ff2@chi-defun (cdr G4041@rhs) G4042@r G4043@mr) (if (eqv? G4047@t 'expr) ((lambda (G404a@expr) (G2fe8@chi-expr G404a@expr G4042@r G4043@mr)) (cdr G4041@rhs)) (if (eqv? G4047@t 'top-expr) ((lambda (G4048@expr) (G2ce6@G2c57@build-sequence '#f (list (G2fe8@chi-expr G4048@expr G4042@r G4043@mr) (G2ce7@G2c59@build-void)))) (cdr G4041@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G4041@rhs))))) (car G4041@rhs)))) (set! G2ff6@expand-interaction-rhs*/init* (lambda (G404c@lhs* G404d@rhs* G404e@init* G404f@r G4050@mr) ((letrec ((G4056@f (lambda (G4058@lhs* G4059@rhs*) (if (null? G4058@lhs*) (map (lambda (G405c@x) (G2fe8@chi-expr G405c@x G404f@r G4050@mr)) G404e@init*) ((lambda (G405e@lhs G405f@rhs) ((lambda (G4062@t) (if (eqv? G4062@t 'defun) ((lambda (G4067@rhs) (cons (list 'set! G405e@lhs G4067@rhs) (G4056@f (cdr G4058@lhs*) (cdr G4059@rhs*)))) (G2ff2@chi-defun (cdr G405f@rhs) G404f@r G4050@mr)) (if (eqv? G4062@t 'expr) ((lambda (G4065@rhs) (cons (list 'set! G405e@lhs G4065@rhs) (G4056@f (cdr G4058@lhs*) (cdr G4059@rhs*)))) (G2fe8@chi-expr (cdr G405f@rhs) G404f@r G4050@mr)) (if (eqv? G4062@t 'top-expr) ((lambda (G4063@e) (cons G4063@e (G4056@f (cdr G4058@lhs*) (cdr G4059@rhs*)))) (G2fe8@chi-expr (cdr G405f@rhs) G404f@r G4050@mr)) (error 'expand-interaction '"invallid" G405f@rhs))))) (car G405f@rhs))) (car G4058@lhs*) (car G4059@rhs*)))))) G4056@f) G404c@lhs* G404d@rhs*))) (set! G2ff8@chi-rhs* (lambda (G4069@rhs* G406a@r G406b@mr) ((letrec ((G406f@f (lambda (G4071@ls) (if (null? G4071@ls) '() ((lambda (G4073@a) (cons G4073@a (G406f@f (cdr G4071@ls)))) (G2ff4@chi-rhs (car G4071@ls) G406a@r G406b@mr)))))) G406f@f) G4069@rhs*))) (set! G2ffa@find-bound=? (lambda (G4075@x G4076@lhs* G4077@rhs*) (if (null? G4076@lhs*) '#f (if (G2d87@bound-id=? G4075@x (car G4076@lhs*)) (car G4077@rhs*) (G2ffa@find-bound=? G4075@x (cdr G4076@lhs*) (cdr G4077@rhs*)))))) (set! G2ffc@find-dups (lambda (G407b@ls) ((letrec ((G407d@f (lambda (G407f@ls G4080@dups) (if (null? G407f@ls) G4080@dups ((lambda (G4083@t) (if G4083@t ((lambda (G4085@x) (G407d@f (cdr G407f@ls) (cons (list (car G407f@ls) G4085@x) G4080@dups))) G4083@t) (G407d@f (cdr G407f@ls) G4080@dups))) (G2ffa@find-bound=? (car G407f@ls) (cdr G407f@ls) (cdr G407f@ls))))))) G407d@f) G407b@ls '()))) (set! G2ffe@chi-internal (lambda (G4087@e* G4088@r G4089@mr) ((lambda (G408d@rib) (call-with-values (lambda () (G3023@chi-body* (map (lambda (G4096@x) (G2d6d@add-subst G408d@rib G4096@x)) (G2d7f@syntax->list G4087@e*)) G4088@r G4089@mr '() '() '() '() G408d@rib '#f)) (lambda (G4098@G408f G4099@G4090 G409a@G4091 G409b@G4092 G409c@G4093 G409d@G4094 G409e@G4095) ((lambda (G40a6@kwd* G40a7@mod** G40a8@rhs* G40a9@lex* G40aa@mr G40ab@r G40ac@e*) (begin (if (null? G40ac@e*) (G30ad@syntax-violation '#f '"no expression in body" G40ac@e*) (void)) ((lambda (G40b4@init*) ((lambda (G40b6@rhs*) ((lambda () (G2ce9@G2c5d@build-letrec* '#f (reverse G40a9@lex*) (reverse G40b6@rhs*) (G2ce6@G2c57@build-sequence '#f G40b4@init*))))) (G2ff8@chi-rhs* G40a8@rhs* G40ab@r G40aa@mr))) (G2fe4@chi-expr* (append (apply append (reverse G40a7@mod**)) G40ac@e*) G40ab@r G40aa@mr)))) G409e@G4095 G409d@G4094 G409c@G4093 G409b@G4092 G409a@G4091 G4099@G4090 G4098@G408f)))) (G2d30@make-empty-rib)))) (set! G3000@parse-module (lambda (G40b8@e) ((lambda (G40ba@t) ((lambda (G40bc@ls/false) (if G40bc@ls/false (apply (lambda (G40be@export* G40bf@b*) (begin (if (for-all G2d81@id? G40be@export*) (void) (G30ad@syntax-violation '#f '"module exports must be identifiers" G40b8@e)) (values '#f (list->vector G40be@export*) G40bf@b*))) G40bc@ls/false) ((lambda (G40c2@t) ((lambda (G40c4@ls/false) (if G40c4@ls/false (apply (lambda (G40c6@name G40c7@export* G40c8@b*) (begin (if (G2d81@id? G40c6@name) (void) (G30ad@syntax-violation '#f '"module name must be an identifier" G40b8@e)) (if (for-all G2d81@id? G40c7@export*) (void) (G30ad@syntax-violation '#f '"module exports must be identifiers" G40b8@e)) (values G40c6@name (list->vector G40c7@export*) G40c8@b*))) G40c4@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G40c2@t))) (G2fc4@syntax-dispatch G40c2@t '(_ any each-any . each-any)))) G40ba@t))) (G2fc4@syntax-dispatch G40ba@t '(_ each-any . each-any)))) G40b8@e))) (set! G3006@G3001 (make-record-type-descriptor 'module-interface '#f 'G3004 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G3008@G3003 '#f) (set! G300a@G3002 (make-record-constructor-descriptor G3006@G3001 '#f G3008@G3003)) (set! G300f@module-interface? (record-predicate G3006@G3001)) (set! G3011@make-module-interface (record-constructor G300a@G3002)) (set! G3013@module-interface-first-mark (record-accessor G3006@G3001 '0)) (set! G3015@module-interface-exp-id-vec (record-accessor G3006@G3001 '1)) (set! G3017@module-interface-exp-lab-vec (record-accessor G3006@G3001 '2)) (set! G3019@set-module-interface-first-mark! (record-mutator G3006@G3001 '0)) (set! G301b@set-module-interface-exp-id-vec! (record-mutator G3006@G3001 '1)) (set! G301d@set-module-interface-exp-lab-vec! (record-mutator G3006@G3001 '2)) (set! G301f@module-interface-exp-id* (lambda (G40cc@iface G40cd@id) ((lambda (G40d1@diff-marks) (begin (set! G40d1@diff-marks (lambda (G40d8@ls G40d9@x) (begin (if (null? G40d8@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G40dc@a) (if (eq? G40dc@a G40d9@x) '() (cons G40dc@a (G40d1@diff-marks (cdr G40d8@ls) G40d9@x)))) (car G40d8@ls))))) ((lambda (G40d2@diff G40d3@id-vec) (if (null? G40d2@diff) G40d3@id-vec (vector-map (lambda (G40d6@x) (G2d4b@make-stx (G2d4d@stx-expr G40d6@x) (append G40d2@diff (G2d4f@stx-mark* G40d6@x)) '() '())) G40d3@id-vec))) (G40d1@diff-marks (G2d4f@stx-mark* G40cd@id) (G3013@module-interface-first-mark G40cc@iface)) (G3015@module-interface-exp-id-vec G40cc@iface)))) '#f))) (set! G3021@chi-internal-module (lambda (G40de@e G40df@r G40e0@mr G40e1@lex* G40e2@rhs* G40e3@mod** G40e4@kwd*) (call-with-values (lambda () (G3000@parse-module G40de@e)) (lambda (G40ef@G40ec G40f0@G40ed G40f1@G40ee) ((lambda (G40f5@e* G40f6@exp-id* G40f7@name) ((lambda (G40fb@rib) ((lambda (G40fd@e*) ((lambda () (call-with-values (lambda () (G3023@chi-body* G40fd@e* G40df@r G40e0@mr G40e1@lex* G40e2@rhs* G40e3@mod** G40e4@kwd* G40fb@rib '#f)) (lambda (G4106@G40ff G4107@G4100 G4108@G4101 G4109@G4102 G410a@G4103 G410b@G4104 G410c@G4105) ((lambda (G4114@kwd* G4115@mod** G4116@rhs* G4117@lex* G4118@mr G4119@r G411a@e*) ((lambda (G4122@exp-lab* G4123@mod**) (if (not G40f7@name) (values G4117@lex* G4116@rhs* G40f6@exp-id* G4122@exp-lab* G4119@r G4118@mr G4123@mod** G4114@kwd*) ((lambda (G4126@lab G4127@iface) (values G4117@lex* G4116@rhs* (vector G40f7@name) (vector G4126@lab) (cons (cons G4126@lab (cons '$module G4127@iface)) G4119@r) (cons (cons G4126@lab (cons '$module G4127@iface)) G4118@mr) G4123@mod** G4114@kwd*)) (G2d07@gen-label 'module) (G3011@make-module-interface (car (G2d4f@stx-mark* G40f7@name)) (vector-map (lambda (G412a@x) (G2d4b@make-stx (G2d4d@stx-expr G412a@x) (G2d4f@stx-mark* G412a@x) '() '())) G40f6@exp-id*) G4122@exp-lab*)))) (vector-map (lambda (G412c@x) ((lambda (G412e@t) (if G412e@t G412e@t (begin '#f (G30ad@syntax-violation '#f '"cannot find module export" G412c@x)))) (G2d9b@id->label (G2d4b@make-stx (G2d83@id->sym G412c@x) (G2d4f@stx-mark* G412c@x) (list G40fb@rib) '())))) G40f6@exp-id*) (cons G411a@e* G4115@mod**))) G410c@G4105 G410b@G4104 G410a@G4103 G4109@G4102 G4108@G4101 G4107@G4100 G4106@G40ff)))))) (map (lambda (G4130@x) (G2d6d@add-subst G40fb@rib G4130@x)) (G2d7f@syntax->list G40f5@e*)))) (G2d30@make-empty-rib))) G40f1@G40ee G40f0@G40ed G40ef@G40ec))))) (set! G3023@chi-body* (lambda (G4132@e* G4133@r G4134@mr G4135@lex* G4136@rhs* G4137@mod** G4138@kwd* G4139@rib G413a@top?) (if (null? G4132@e*) (values G4132@e* G4133@r G4134@mr G4135@lex* G4136@rhs* G4137@mod** G4138@kwd*) ((lambda (G4144@e) (call-with-values (lambda () (G2da9@syntax-type G4144@e G4133@r)) (lambda (G4149@G4146 G414a@G4147 G414b@G4148) ((lambda (G414f@kwd G4150@value G4151@type) ((lambda (G4155@kwd*) ((lambda (G4157@t) (if (eqv? G4157@t 'define) (call-with-values (lambda () (G2f4c@parse-define G4144@e)) (lambda (G4216@G4214 G4217@G4215) ((lambda (G421a@rhs G421b@id) (begin (if (G2d8f@bound-id-member? G421b@id G4155@kwd*) (G30ad@syntax-violation '#f '"cannot redefine keyword" G4144@e) (void)) (call-with-values (lambda () (G2d0b@gen-define-label+loc G421b@id G4139@rib)) (lambda (G4220@G421e G4221@G421f) ((lambda (G4224@lex G4225@lab) (begin (G2d32@extend-rib! G4139@rib G421b@id G4225@lab) (G3023@chi-body* (cdr G4132@e*) (G2f5a@add-lexical G4225@lab G4224@lex G4133@r) G4134@mr (cons G4224@lex G4135@lex*) (cons G421a@rhs G4136@rhs*) G4137@mod** G4155@kwd* G4139@rib G413a@top?))) G4221@G421f G4220@G421e))))) G4217@G4215 G4216@G4214))) (if (eqv? G4157@t 'define-syntax) (call-with-values (lambda () (G2f4e@parse-define-syntax G4144@e)) (lambda (G4206@G4204 G4207@G4205) ((lambda (G420a@rhs G420b@id) (begin (if (G2d8f@bound-id-member? G420b@id G4155@kwd*) (G30ad@syntax-violation '#f '"cannot redefine keyword" G4144@e) (void)) ((lambda (G420e@lab G420f@expanded-rhs) (begin (G2d32@extend-rib! G4139@rib G420b@id G420e@lab) ((lambda (G4212@b) (G3023@chi-body* (cdr G4132@e*) (cons (cons G420e@lab G4212@b) G4133@r) (cons (cons G420e@lab G4212@b) G4134@mr) G4135@lex* G4136@rhs* G4137@mod** G4155@kwd* G4139@rib G413a@top?)) (G2dc8@make-eval-transformer G420f@expanded-rhs)))) (G2d0d@gen-define-label G420b@id G4139@rib) (G3025@expand-transformer G420a@rhs G4134@mr)))) G4207@G4205 G4206@G4204))) (if (memv G4157@t '(let-syntax letrec-syntax)) ((lambda (G41ea@t) ((lambda (G41ec@ls/false) (if (if G41ec@ls/false (begin '#f (apply (lambda (G41ee@xlhs* G41ef@xrhs* G41f0@xbody*) (if (G2d8b@valid-bound-ids? G41ee@xlhs*) (void) (G30ad@syntax-violation '#f '"invalid identifiers" G4144@e))) G41ec@ls/false)) '#f) (apply (lambda (G41f4@xlhs* G41f5@xrhs* G41f6@xbody*) ((lambda (G41fa@xlab*) ((lambda (G41fc@xrib) ((lambda (G41fe@xb*) ((lambda () (G3023@chi-body* (append (map (lambda (G4200@x) (G2d6d@add-subst G41fc@xrib G4200@x)) G41f6@xbody*) (cdr G4132@e*)) (append (map cons G41fa@xlab* G41fe@xb*) G4133@r) (append (map cons G41fa@xlab* G41fe@xb*) G4134@mr) G4135@lex* G4136@rhs* G4137@mod** G4155@kwd* G4139@rib G413a@top?)))) (map (lambda (G4202@x) (G2dc8@make-eval-transformer (G3025@expand-transformer (if (eq? G4151@type 'let-syntax) G4202@x (G2d6d@add-subst G41fc@xrib G4202@x)) G4134@mr))) G41f5@xrhs*))) (G2d3a@make-full-rib G41f4@xlhs* G41fa@xlab*))) (map G2d07@gen-label G41f4@xlhs*))) G41ec@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G41ea@t))) (G2fc4@syntax-dispatch G41ea@t '(_ #(each (any any)) . each-any)))) G4144@e) (if (eqv? G4157@t 'begin) ((lambda (G41e4@t) ((lambda (G41e6@ls/false) (if G41e6@ls/false (apply (lambda (G41e8@x*) (G3023@chi-body* (append G41e8@x* (cdr G4132@e*)) G4133@r G4134@mr G4135@lex* G4136@rhs* G4137@mod** G4155@kwd* G4139@rib G413a@top?)) G41e6@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G41e4@t))) (G2fc4@syntax-dispatch G41e4@t '(_ . each-any)))) G4144@e) (if (memv G4157@t '(global-macro global-macro!)) (G3023@chi-body* (cons (G2d6d@add-subst G4139@rib (G2fe2@chi-global-macro G4150@value G4144@e)) (cdr G4132@e*)) G4133@r G4134@mr G4135@lex* G4136@rhs* G4137@mod** G4155@kwd* G4139@rib G413a@top?) (if (memv G4157@t '(local-macro local-macro!)) (G3023@chi-body* (cons (G2d6d@add-subst G4139@rib (G2fe0@chi-local-macro G4150@value G4144@e)) (cdr G4132@e*)) G4133@r G4134@mr G4135@lex* G4136@rhs* G4137@mod** G4155@kwd* G4139@rib G413a@top?) (if (memv G4157@t '(macro macro!)) (G3023@chi-body* (cons (G2d6d@add-subst G4139@rib (G2fde@chi-macro G4150@value G4144@e)) (cdr G4132@e*)) G4133@r G4134@mr G4135@lex* G4136@rhs* G4137@mod** G4155@kwd* G4139@rib G413a@top?) (if (eqv? G4157@t 'module) (call-with-values (lambda () (G3021@chi-internal-module G4144@e G4133@r G4134@mr G4135@lex* G4136@rhs* G4137@mod** G4155@kwd*)) (lambda (G41c0@G41b8 G41c1@G41b9 G41c2@G41ba G41c3@G41bb G41c4@G41bc G41c5@G41bd G41c6@G41be G41c7@G41bf) ((lambda (G41d0@kwd* G41d1@mod** G41d2@mr G41d3@r G41d4@m-exp-lab* G41d5@m-exp-id* G41d6@rhs* G41d7@lex*) (begin (vector-for-each (lambda (G41e0@id G41e1@lab) (G2d32@extend-rib! G4139@rib G41e0@id G41e1@lab)) G41d5@m-exp-id* G41d4@m-exp-lab*) (G3023@chi-body* (cdr G4132@e*) G41d3@r G41d2@mr G41d7@lex* G41d6@rhs* G41d1@mod** G41d0@kwd* G4139@rib G413a@top?))) G41c7@G41bf G41c6@G41be G41c5@G41bd G41c4@G41bc G41c3@G41bb G41c2@G41ba G41c1@G41b9 G41c0@G41b8))) (if (eqv? G4157@t 'library) (begin (G3093@library-expander (G2d97@stx->datum G4144@e)) (G3023@chi-body* (cdr G4132@e*) G4133@r G4134@mr G4135@lex* G4136@rhs* G4137@mod** G4155@kwd* G4139@rib G413a@top?)) (if (eqv? G4157@t 'import) (begin ((lambda () ((lambda (G4159@module-import? G415b@module-import G415d@library-import) (begin (set! G4159@module-import? (lambda (G41a4@e) ((lambda (G41a6@t) ((lambda (G41a8@ls/false) (if (if G41a8@ls/false (begin '#f (apply (lambda (G41aa@id) (G2d81@id? G41aa@id)) G41a8@ls/false)) '#f) (apply (lambda (G41ac@id) '#t) G41a8@ls/false) ((lambda (G41ae@t) ((lambda (G41b0@ls/false) (if G41b0@ls/false (apply (lambda (G41b2@imp*) '#f) G41b0@ls/false) ((lambda (G41b4@t) ((lambda (G41b6@ls/false) (if G41b6@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"malformed import form" G41a4@e)) G41b6@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G41b4@t))) (G2fc4@syntax-dispatch G41b4@t '_))) G41ae@t))) (G2fc4@syntax-dispatch G41ae@t '(_ . each-any)))) G41a6@t))) (G2fc4@syntax-dispatch G41a6@t '(_ any)))) G41a4@e))) (set! G415b@module-import (lambda (G4186@e G4187@r) ((lambda (G418a@t) ((lambda (G418c@ls/false) (if (if G418c@ls/false (begin '#f (apply (lambda (G418e@id) (G2d81@id? G418e@id)) G418c@ls/false)) '#f) (apply (lambda (G4190@id) (call-with-values (lambda () (G2da9@syntax-type G4190@id G4187@r)) (lambda (G4195@G4192 G4196@G4193 G4197@G4194) ((lambda (G419b@kwd G419c@value G419d@type) ((lambda (G41a1@t) (if (eqv? G41a1@t '$module) ((lambda (G41a2@iface) (values (G301f@module-interface-exp-id* G41a2@iface G4190@id) (G3017@module-interface-exp-lab-vec G41a2@iface))) G419c@value) (G30ad@syntax-violation '#f '"invalid import" G4186@e))) G419d@type)) G4197@G4194 G4196@G4193 G4195@G4192)))) G418c@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G418a@t))) (G2fc4@syntax-dispatch G418a@t '(_ any)))) G4186@e))) (set! G415d@library-import (lambda (G416c@e) ((lambda (G416e@t) ((lambda (G4170@ls/false) (if G4170@ls/false (apply (lambda (G4172@ctxt G4173@imp*) (call-with-values (lambda () (G302d@parse-import-spec* (G30b3@syntax->datum G4173@imp*))) (lambda (G4178@G4176 G4179@G4177) ((lambda (G417c@subst-labels G417d@subst-names) (values (vector-map (lambda (G4180@name) (G2d5f@datum->stx G4172@ctxt G4180@name)) G417d@subst-names) G417c@subst-labels)) G4179@G4177 G4178@G4176)))) G4170@ls/false) ((lambda (G4182@t) ((lambda (G4184@ls/false) (if G4184@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"invalid import form" G416c@e)) G4184@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G4182@t))) (G2fc4@syntax-dispatch G4182@t '_))) G416e@t))) (G2fc4@syntax-dispatch G416e@t '(any . each-any)))) G416c@e))) (call-with-values (lambda () (if (G4159@module-import? G4144@e) (G415b@module-import G4144@e G4133@r) (G415d@library-import G4144@e))) (lambda (G4160@G415e G4161@G415f) ((lambda (G4164@lab* G4165@id*) (vector-for-each (lambda (G4168@id G4169@lab) (G2d32@extend-rib! G4139@rib G4168@id G4169@lab)) G4165@id* G4164@lab*)) G4161@G415f G4160@G415e))))) '#f '#f '#f))) (G3023@chi-body* (cdr G4132@e*) G4133@r G4134@mr G4135@lex* G4136@rhs* G4137@mod** G4155@kwd* G4139@rib G413a@top?)) (if G413a@top? (G3023@chi-body* (cdr G4132@e*) G4133@r G4134@mr (cons (G2d03@gen-lexical 'dummy) G4135@lex*) (cons (cons 'top-expr G4144@e) G4136@rhs*) G4137@mod** G4155@kwd* G4139@rib G413a@top?) (values G4132@e* G4133@r G4134@mr G4135@lex* G4136@rhs* G4137@mod** G4155@kwd*))))))))))))) G4151@type)) (if (G2d81@id? G414f@kwd) (cons G414f@kwd G4138@kwd*) G4138@kwd*))) G414b@G4148 G414a@G4147 G4149@G4146)))) (car G4132@e*))))) (set! G3025@expand-transformer (lambda (G4228@expr G4229@r) ((lambda (G422c@rtc) ((lambda (G422e@expanded-rhs) (begin (for-each ((lambda (G4230@mark-visit) (lambda (G4232@x) (begin (G2b80@G2a18@invoke-library G4232@x) (G4230@mark-visit G4232@x)))) (G3035@vis-collector)) (G422c@rtc)) G422e@expanded-rhs)) ((lambda (G4238@G4234@inv-collector G4239@G4235@vis-collector G423a@G4236@inv-collector G423b@G4237@vis-collector) ((lambda (G4240@swap) (dynamic-wind G4240@swap (lambda () (G2fe8@chi-expr G4228@expr G4229@r G4229@r)) G4240@swap)) (lambda () (begin ((lambda (G4242@t) (begin (G4238@G4234@inv-collector G423a@G4236@inv-collector) (set! G423a@G4236@inv-collector G4242@t))) (G4238@G4234@inv-collector)) ((lambda (G4244@t) (begin (G4239@G4235@vis-collector G423b@G4237@vis-collector) (set! G423b@G4237@vis-collector G4244@t))) (G4239@G4235@vis-collector)))))) G3033@inv-collector G3035@vis-collector G422c@rtc (lambda (G4246@x) (values))))) (G3031@make-collector)))) (set! G3027@parse-exports (lambda (G4248@exp*) ((lambda (G424b@idsyn?) (begin (set! G424b@idsyn? (lambda (G4268@x) (symbol? (G30b3@syntax->datum G4268@x)))) ((letrec ((G424c@f (lambda (G424e@exp* G424f@int* G4250@ext*) (if (null? G424e@exp*) (begin ((lambda (G4254@id*) (if (G2d8b@valid-bound-ids? G4254@id*) (void) (G30ad@syntax-violation 'export '"invalid exports" (G2ffc@find-dups G4254@id*)))) (map (lambda (G4256@x) (G2d4b@make-stx G4256@x G2cff@top-mark* '() '())) G4250@ext*)) (values (map G30b3@syntax->datum G424f@int*) (map G30b3@syntax->datum G4250@ext*))) ((lambda (G4258@t) ((lambda (G425a@ls/false) (if G425a@ls/false (apply (lambda (G425c@rename G425d@i* G425e@e*) (begin (if (if (eq? (G30b3@syntax->datum G425c@rename) 'rename) (if (for-all G424b@idsyn? G425d@i*) (begin '#f (for-all G424b@idsyn? G425e@e*)) '#f) '#f) (void) (G30ad@syntax-violation 'export '"invalid export specifier" (car G424e@exp*))) (G424c@f (cdr G424e@exp*) (append G425d@i* G424f@int*) (append G425e@e* G4250@ext*)))) G425a@ls/false) ((lambda (G4262@t) ((lambda (G4264@ls/false) (if G4264@ls/false (apply (lambda (G4266@ie) (begin (if (G424b@idsyn? G4266@ie) (void) (G30ad@syntax-violation 'export '"invalid export" G4266@ie)) (G424c@f (cdr G424e@exp*) (cons G4266@ie G424f@int*) (cons G4266@ie G4250@ext*)))) G4264@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G4262@t))) (G2fc4@syntax-dispatch G4262@t 'any))) G4258@t))) (G2fc4@syntax-dispatch G4258@t '(any . #(each (any any)))))) (car G424e@exp*)))))) G424c@f) G4248@exp* '() '()))) '#f))) (set! G3029@parse-library-name (lambda (G426a@spec) ((lambda (G426d@parse) (begin (set! G426d@parse (lambda (G4278@x) ((lambda (G427a@t) ((lambda (G427c@ls/false) (if (if G427c@ls/false (begin '#f (apply (lambda (G427e@v*) (for-all (lambda (G4280@x) ((lambda (G4282@x) (if (integer? G4282@x) (begin '#f (exact? G4282@x)) '#f)) (G30b3@syntax->datum G4280@x))) G427e@v*)) G427c@ls/false)) '#f) (apply (lambda (G4284@v*) (values '() (map G30b3@syntax->datum G4284@v*))) G427c@ls/false) ((lambda (G4286@t) ((lambda (G4288@ls/false) (if (if G4288@ls/false (begin '#f (apply (lambda (G428a@x G428b@rest) (symbol? (G30b3@syntax->datum G428a@x))) G4288@ls/false)) '#f) (apply (lambda (G428e@x G428f@rest) (call-with-values (lambda () (G426d@parse G428f@rest)) (lambda (G4294@G4292 G4295@G4293) ((lambda (G4298@v* G4299@x*) (values (cons (G30b3@syntax->datum G428e@x) G4299@x*) G4298@v*)) G4295@G4293 G4294@G4292)))) G4288@ls/false) ((lambda (G429c@t) ((lambda (G429e@ls/false) (if G429e@ls/false (apply (lambda () (values '() '())) G429e@ls/false) ((lambda (G42a0@t) ((lambda (G42a2@ls/false) (if G42a2@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"invalid library name" G426a@spec)) G42a2@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G42a0@t))) (G2fc4@syntax-dispatch G42a0@t '_))) G429c@t))) (G2fc4@syntax-dispatch G429c@t '()))) G4286@t))) (G2fc4@syntax-dispatch G4286@t '(any . any)))) G427a@t))) (G2fc4@syntax-dispatch G427a@t '(each-any)))) G4278@x))) (call-with-values (lambda () (G426d@parse G426a@spec)) (lambda (G4270@G426e G4271@G426f) ((lambda (G4274@ver* G4275@name*) (begin (if (null? G4275@name*) (G30ad@syntax-violation '#f '"empty library name" G426a@spec) (void)) (values G4275@name* G4274@ver*))) G4271@G426f G4270@G426e))))) '#f))) (set! G302b@parse-library (lambda (G42a4@e) ((lambda (G42a6@t) ((lambda (G42a8@ls/false) (if (if G42a8@ls/false (begin '#f (apply (lambda (G42aa@library G42ab@name* G42ac@export G42ad@exp* G42ae@import G42af@imp* G42b0@b*) (if (eq? (G30b3@syntax->datum G42ac@export) 'export) (if (eq? (G30b3@syntax->datum G42ae@import) 'import) (begin '#f (eq? (G30b3@syntax->datum G42aa@library) 'library)) '#f) '#f)) G42a8@ls/false)) '#f) (apply (lambda (G42b8@library G42b9@name* G42ba@export G42bb@exp* G42bc@import G42bd@imp* G42be@b*) (values G42b9@name* G42bb@exp* G42bd@imp* G42be@b*)) G42a8@ls/false) ((lambda (G42c6@t) ((lambda (G42c8@ls/false) (if G42c8@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"malformed library" G42a4@e)) G42c8@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G42c6@t))) (G2fc4@syntax-dispatch G42c6@t '_))) G42a6@t))) (G2fc4@syntax-dispatch G42a6@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G42a4@e))) (set! G302d@parse-import-spec* (lambda (G42ca@imp*) ((lambda (G42cd@idsyn? G42cf@dup-error G42d1@merge-substs G42d3@exclude* G42d5@find* G42d7@rem* G42d9@remove-dups G42db@parse-library-name G42dd@import-library G42df@get-import G42e1@add-imports!) (begin (set! G42cd@idsyn? (lambda (G44c8@x) (symbol? (G30b3@syntax->datum G44c8@x)))) (set! G42cf@dup-error (lambda (G44c6@name) (G30ad@syntax-violation 'import '"two imports with different bindings" G44c6@name))) (set! G42d1@merge-substs (lambda (G44b4@s G44b5@subst) ((lambda (G44b9@insert-to-subst) (begin (set! G44b9@insert-to-subst (lambda (G44ba@a G44bb@subst) ((lambda (G44be@name G44bf@label) ((lambda (G44c2@t) (if G44c2@t ((lambda (G44c4@x) (if (eq? (cdr G44c4@x) G44bf@label) G44bb@subst (G42cf@dup-error G44be@name))) G44c2@t) (cons G44ba@a G44bb@subst))) (assq G44be@name G44bb@subst))) (car G44ba@a) (cdr G44ba@a)))) (if (null? G44b4@s) G44b5@subst (G44b9@insert-to-subst (car G44b4@s) (G42d1@merge-substs (cdr G44b4@s) G44b5@subst))))) '#f))) (set! G42d3@exclude* (lambda (G448a@sym* G448b@subst) ((lambda (G448f@exclude) (begin (set! G448f@exclude (lambda (G44a4@sym G44a5@subst) (if (null? G44a5@subst) (G30ad@syntax-violation 'import '"cannot rename unbound identifier" G44a4@sym) (if (eq? G44a4@sym (caar G44a5@subst)) (values (cdar G44a5@subst) (cdr G44a5@subst)) ((lambda (G44a8@a) (call-with-values (lambda () (G448f@exclude G44a4@sym (cdr G44a5@subst))) (lambda (G44ac@G44aa G44ad@G44ab) ((lambda (G44b0@subst G44b1@old) (values G44b1@old (cons G44a8@a G44b0@subst))) G44ad@G44ab G44ac@G44aa)))) (car G44a5@subst)))))) (if (null? G448a@sym*) (values '() G448b@subst) (call-with-values (lambda () (G448f@exclude (car G448a@sym*) G448b@subst)) (lambda (G4492@G4490 G4493@G4491) ((lambda (G4496@subst G4497@old) (call-with-values (lambda () (G42d3@exclude* (cdr G448a@sym*) G4496@subst)) (lambda (G449c@G449a G449d@G449b) ((lambda (G44a0@subst G44a1@old*) (values (cons G4497@old G44a1@old*) G44a0@subst)) G449d@G449b G449c@G449a)))) G4493@G4491 G4492@G4490)))))) '#f))) (set! G42d5@find* (lambda (G4482@sym* G4483@subst) (map (lambda (G4486@x) ((lambda (G4488@t) (if G4488@t (cdr G4488@t) (G30ad@syntax-violation 'import '"cannot find identifier" G4486@x))) (assq G4486@x G4483@subst))) G4482@sym*))) (set! G42d7@rem* (lambda (G447a@sym* G447b@subst) ((letrec ((G447e@f (lambda (G4480@subst) (if (null? G4480@subst) '() (if (memq (caar G4480@subst) G447a@sym*) (G447e@f (cdr G4480@subst)) (cons (car G4480@subst) (G447e@f (cdr G4480@subst)))))))) G447e@f) G447b@subst))) (set! G42d9@remove-dups (lambda (G4478@ls) (if (null? G4478@ls) '() (if (memq (car G4478@ls) (cdr G4478@ls)) (G42d9@remove-dups (cdr G4478@ls)) (cons (car G4478@ls) (G42d9@remove-dups (cdr G4478@ls))))))) (set! G42db@parse-library-name (lambda (G4394@spec) ((lambda (G4397@subversion? G4399@subversion-pred G439b@version-pred) (begin (set! G4397@subversion? (lambda (G4476@x) (if (integer? G4476@x) (if (exact? G4476@x) (begin '#f (>= G4476@x '0)) '#f) '#f))) (set! G4399@subversion-pred (lambda (G4416@x*) ((lambda (G4418@t) ((lambda (G441a@ls/false) (if (if G441a@ls/false (begin '#f (apply (lambda (G441c@n) (G4397@subversion? (G30b3@syntax->datum G441c@n))) G441a@ls/false)) '#f) (apply (lambda (G441e@n) (lambda (G4420@x) (= G4420@x (G30b3@syntax->datum G441e@n)))) G441a@ls/false) ((lambda (G4422@t) ((lambda (G4424@ls/false) (if (if G4424@ls/false (begin '#f (apply (lambda (G4426@p? G4427@sub*) (eq? (G30b3@syntax->datum G4426@p?) 'and)) G4424@ls/false)) '#f) (apply (lambda (G442a@p? G442b@sub*) ((lambda (G442e@p*) (lambda (G4430@x) (for-all (lambda (G4432@p) (G4432@p G4430@x)) G442e@p*))) (map G4399@subversion-pred G442b@sub*))) G4424@ls/false) ((lambda (G4434@t) ((lambda (G4436@ls/false) (if (if G4436@ls/false (begin '#f (apply (lambda (G4438@p? G4439@sub*) (eq? (G30b3@syntax->datum G4438@p?) 'or)) G4436@ls/false)) '#f) (apply (lambda (G443c@p? G443d@sub*) ((lambda (G4440@p*) (lambda (G4442@x) (exists (lambda (G4444@p) (G4444@p G4442@x)) G4440@p*))) (map G4399@subversion-pred G443d@sub*))) G4436@ls/false) ((lambda (G4446@t) ((lambda (G4448@ls/false) (if (if G4448@ls/false (begin '#f (apply (lambda (G444a@p? G444b@sub) (eq? (G30b3@syntax->datum G444a@p?) 'not)) G4448@ls/false)) '#f) (apply (lambda (G444e@p? G444f@sub) ((lambda (G4452@p) (lambda (G4454@x) (not (G4452@p G4454@x)))) (G4399@subversion-pred G444f@sub))) G4448@ls/false) ((lambda (G4456@t) ((lambda (G4458@ls/false) (if (if G4458@ls/false (begin '#f (apply (lambda (G445a@p? G445b@n) (if (eq? (G30b3@syntax->datum G445a@p?) '<=) (begin '#f (G4397@subversion? (G30b3@syntax->datum G445b@n))) '#f)) G4458@ls/false)) '#f) (apply (lambda (G445e@p? G445f@n) (lambda (G4462@x) (<= G4462@x (G30b3@syntax->datum G445f@n)))) G4458@ls/false) ((lambda (G4464@t) ((lambda (G4466@ls/false) (if (if G4466@ls/false (begin '#f (apply (lambda (G4468@p? G4469@n) (if (eq? (G30b3@syntax->datum G4468@p?) '>=) (begin '#f (G4397@subversion? G4469@n)) '#f)) G4466@ls/false)) '#f) (apply (lambda (G446c@p? G446d@n) (lambda (G4470@x) (>= G4470@x (G30b3@syntax->datum G446d@n)))) G4466@ls/false) ((lambda (G4472@t) ((lambda (G4474@ls/false) (if G4474@ls/false (apply (lambda () (G30ad@syntax-violation 'import '"invalid sub-version spec" G4394@spec G4416@x*)) G4474@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G4472@t))) (G2fc4@syntax-dispatch G4472@t '_))) G4464@t))) (G2fc4@syntax-dispatch G4464@t '(any any)))) G4456@t))) (G2fc4@syntax-dispatch G4456@t '(any any)))) G4446@t))) (G2fc4@syntax-dispatch G4446@t '(any any)))) G4434@t))) (G2fc4@syntax-dispatch G4434@t '(any . each-any)))) G4422@t))) (G2fc4@syntax-dispatch G4422@t '(any . each-any)))) G4418@t))) (G2fc4@syntax-dispatch G4418@t 'any))) G4416@x*))) (set! G439b@version-pred (lambda (G43c6@x*) ((lambda (G43c8@t) ((lambda (G43ca@ls/false) (if G43ca@ls/false (apply (lambda () (lambda (G43cc@x) '#t)) G43ca@ls/false) ((lambda (G43ce@t) ((lambda (G43d0@ls/false) (if (if G43d0@ls/false (begin '#f (apply (lambda (G43d2@c G43d3@ver*) (eq? (G30b3@syntax->datum G43d2@c) 'and)) G43d0@ls/false)) '#f) (apply (lambda (G43d6@c G43d7@ver*) ((lambda (G43da@p*) (lambda (G43dc@x) (for-all (lambda (G43de@p) (G43de@p G43dc@x)) G43da@p*))) (map G439b@version-pred G43d7@ver*))) G43d0@ls/false) ((lambda (G43e0@t) ((lambda (G43e2@ls/false) (if (if G43e2@ls/false (begin '#f (apply (lambda (G43e4@c G43e5@ver*) (eq? (G30b3@syntax->datum G43e4@c) 'or)) G43e2@ls/false)) '#f) (apply (lambda (G43e8@c G43e9@ver*) ((lambda (G43ec@p*) (lambda (G43ee@x) (exists (lambda (G43f0@p) (G43f0@p G43ee@x)) G43ec@p*))) (map G439b@version-pred G43e9@ver*))) G43e2@ls/false) ((lambda (G43f2@t) ((lambda (G43f4@ls/false) (if (if G43f4@ls/false (begin '#f (apply (lambda (G43f6@c G43f7@ver) (eq? (G30b3@syntax->datum G43f6@c) 'not)) G43f4@ls/false)) '#f) (apply (lambda (G43fa@c G43fb@ver) ((lambda (G43fe@p) (lambda (G4400@x) (not (G43fe@p G4400@x)))) (G439b@version-pred G43fb@ver))) G43f4@ls/false) ((lambda (G4402@t) ((lambda (G4404@ls/false) (if G4404@ls/false (apply (lambda (G4406@sub*) ((lambda (G4408@p*) (lambda (G440a@x) ((letrec ((G440c@f (lambda (G440e@p* G440f@x) (if (null? G440e@p*) '#t (if (null? G440f@x) '#f (if ((car G440e@p*) (car G440f@x)) (begin '#f (G440c@f (cdr G440e@p*) (cdr G440f@x))) '#f)))))) G440c@f) G4408@p* G440a@x))) (map G4399@subversion-pred G4406@sub*))) G4404@ls/false) ((lambda (G4412@t) ((lambda (G4414@ls/false) (if G4414@ls/false (apply (lambda () (G30ad@syntax-violation 'import '"invalid version spec" G4394@spec G43c6@x*)) G4414@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G4412@t))) (G2fc4@syntax-dispatch G4412@t '_))) G4402@t))) (G2fc4@syntax-dispatch G4402@t 'each-any))) G43f2@t))) (G2fc4@syntax-dispatch G43f2@t '(any any)))) G43e0@t))) (G2fc4@syntax-dispatch G43e0@t '(any . each-any)))) G43ce@t))) (G2fc4@syntax-dispatch G43ce@t '(any . each-any)))) G43c8@t))) (G2fc4@syntax-dispatch G43c8@t '()))) G43c6@x*))) ((letrec ((G439c@f (lambda (G439e@x) ((lambda (G43a0@t) ((lambda (G43a2@ls/false) (if G43a2@ls/false (apply (lambda (G43a4@version-spec*) (values '() (G439b@version-pred G43a4@version-spec*))) G43a2@ls/false) ((lambda (G43a6@t) ((lambda (G43a8@ls/false) (if (if G43a8@ls/false (begin '#f (apply (lambda (G43aa@x G43ab@x*) (G42cd@idsyn? G43aa@x)) G43a8@ls/false)) '#f) (apply (lambda (G43ae@x G43af@x*) (call-with-values (lambda () (G439c@f G43af@x*)) (lambda (G43b4@G43b2 G43b5@G43b3) ((lambda (G43b8@pred G43b9@name) (values (cons (G30b3@syntax->datum G43ae@x) G43b9@name) G43b8@pred)) G43b5@G43b3 G43b4@G43b2)))) G43a8@ls/false) ((lambda (G43bc@t) ((lambda (G43be@ls/false) (if G43be@ls/false (apply (lambda () (values '() (lambda (G43c0@x) '#t))) G43be@ls/false) ((lambda (G43c2@t) ((lambda (G43c4@ls/false) (if G43c4@ls/false (apply (lambda () (G30ad@syntax-violation '#f '"invalid import spec" G4394@spec)) G43c4@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G43c2@t))) (G2fc4@syntax-dispatch G43c2@t '_))) G43bc@t))) (G2fc4@syntax-dispatch G43bc@t '()))) G43a6@t))) (G2fc4@syntax-dispatch G43a6@t '(any . any)))) G43a0@t))) (G2fc4@syntax-dispatch G43a0@t '(each-any)))) G439e@x)))) G439c@f) G4394@spec))) '#f '#f '#f))) (set! G42dd@import-library (lambda (G4386@spec*) (call-with-values (lambda () (G42db@parse-library-name G4386@spec*)) (lambda (G438a@G4388 G438b@G4389) ((lambda (G438e@pred G438f@name) (begin (if (null? G438f@name) (G30ad@syntax-violation 'import '"empty library name" G4386@spec*) (void)) ((lambda (G4392@lib) (begin (if G4392@lib (void) (G30ad@syntax-violation 'import '"cannot find library with required name" G438f@name)) (if (G438e@pred (G2b51@G29ba@library-version G4392@lib)) (void) (G30ad@syntax-violation 'import '"library does not satisfy version specification" G4386@spec* G4392@lib)) ((G3037@imp-collector) G4392@lib) (G2b55@G29c2@library-subst G4392@lib))) (G2b79@G2a0a@find-library-by-name G438f@name)))) G438b@G4389 G438a@G4388))))) (set! G42df@get-import (lambda (G42f8@spec) ((lambda (G42fa@t) ((lambda (G42fc@ls/false) (if (if G42fc@ls/false (begin '#f (apply (lambda (G42fe@x G42ff@x*) (not (memq (G30b3@syntax->datum G42fe@x) '(for rename except only prefix library)))) G42fc@ls/false)) '#f) (apply (lambda (G4302@x G4303@x*) (G42dd@import-library (cons G4302@x G4303@x*))) G42fc@ls/false) ((lambda (G4306@t) ((lambda (G4308@ls/false) (if (if G4308@ls/false (begin '#f (apply (lambda (G430a@rename G430b@isp G430c@old* G430d@new*) (if (eq? (G30b3@syntax->datum G430a@rename) 'rename) (if (for-all G42cd@idsyn? G430c@old*) (begin '#f (for-all G42cd@idsyn? G430d@new*)) '#f) '#f)) G4308@ls/false)) '#f) (apply (lambda (G4312@rename G4313@isp G4314@old* G4315@new*) ((lambda (G431a@subst G431b@old* G431c@new*) ((lambda (G4320@old-label*) ((lambda (G4322@subst) (G42d1@merge-substs (map cons G431c@new* G4320@old-label*) G4322@subst)) (G42d7@rem* G431b@old* G431a@subst))) (G42d5@find* G431b@old* G431a@subst))) (G42df@get-import G4313@isp) (map G30b3@syntax->datum G4314@old*) (map G30b3@syntax->datum G4315@new*))) G4308@ls/false) ((lambda (G4324@t) ((lambda (G4326@ls/false) (if (if G4326@ls/false (begin '#f (apply (lambda (G4328@except G4329@isp G432a@sym*) (if (eq? (G30b3@syntax->datum G4328@except) 'except) (begin '#f (for-all G42cd@idsyn? G432a@sym*)) '#f)) G4326@ls/false)) '#f) (apply (lambda (G432e@except G432f@isp G4330@sym*) ((lambda (G4334@subst) (G42d7@rem* (map G30b3@syntax->datum G4330@sym*) G4334@subst)) (G42df@get-import G432f@isp))) G4326@ls/false) ((lambda (G4336@t) ((lambda (G4338@ls/false) (if (if G4338@ls/false (begin '#f (apply (lambda (G433a@only G433b@isp G433c@sym*) (if (eq? (G30b3@syntax->datum G433a@only) 'only) (begin '#f (for-all G42cd@idsyn? G433c@sym*)) '#f)) G4338@ls/false)) '#f) (apply (lambda (G4340@only G4341@isp G4342@sym*) ((lambda (G4346@subst G4347@sym*) ((lambda (G434a@sym*) ((lambda (G434c@lab*) (map cons G434a@sym* G434c@lab*)) (G42d5@find* G434a@sym* G4346@subst))) (G42d9@remove-dups G4347@sym*))) (G42df@get-import G4341@isp) (map G30b3@syntax->datum G4342@sym*))) G4338@ls/false) ((lambda (G434e@t) ((lambda (G4350@ls/false) (if (if G4350@ls/false (begin '#f (apply (lambda (G4352@prefix G4353@isp G4354@p) (if (eq? (G30b3@syntax->datum G4352@prefix) 'prefix) (begin '#f (G42cd@idsyn? G4354@p)) '#f)) G4350@ls/false)) '#f) (apply (lambda (G4358@prefix G4359@isp G435a@p) ((lambda (G435e@subst G435f@prefix) (map (lambda (G4362@x) (cons (string->symbol (string-append G435f@prefix (symbol->string (car G4362@x)))) (cdr G4362@x))) G435e@subst)) (G42df@get-import G4359@isp) (symbol->string (G30b3@syntax->datum G435a@p)))) G4350@ls/false) ((lambda (G4364@t) ((lambda (G4366@ls/false) (if (if G4366@ls/false (begin '#f (apply (lambda (G4368@library G4369@spec*) (eq? (G30b3@syntax->datum G4368@library) 'library)) G4366@ls/false)) '#f) (apply (lambda (G436c@library G436d@spec*) (G42dd@import-library G436d@spec*)) G4366@ls/false) ((lambda (G4370@t) ((lambda (G4372@ls/false) (if (if G4372@ls/false (begin '#f (apply (lambda (G4374@for G4375@isp G4376@rest) (eq? (G30b3@syntax->datum G4374@for) 'for)) G4372@ls/false)) '#f) (apply (lambda (G437a@for G437b@isp G437c@rest) (G42df@get-import G437b@isp)) G4372@ls/false) ((lambda (G4380@t) ((lambda (G4382@ls/false) (if G4382@ls/false (apply (lambda (G4384@spec) (G30ad@syntax-violation 'import '"invalid import spec" G4384@spec)) G4382@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G4380@t))) (G2fc4@syntax-dispatch G4380@t 'any))) G4370@t))) (G2fc4@syntax-dispatch G4370@t '(any any . any)))) G4364@t))) (G2fc4@syntax-dispatch G4364@t '(any each-any)))) G434e@t))) (G2fc4@syntax-dispatch G434e@t '(any any any)))) G4336@t))) (G2fc4@syntax-dispatch G4336@t '(any any . each-any)))) G4324@t))) (G2fc4@syntax-dispatch G4324@t '(any any . each-any)))) G4306@t))) (G2fc4@syntax-dispatch G4306@t '(any any . #(each (any any)))))) G42fa@t))) (G2fc4@syntax-dispatch G42fa@t '(any . each-any)))) G42f8@spec))) (set! G42e1@add-imports! (lambda (G42e8@imp G42e9@h) ((lambda (G42ec@subst) (for-each (lambda (G42ee@x) ((lambda (G42f0@name G42f1@label) ((lambda (G42f4@t) (if G42f4@t ((lambda (G42f6@l) (if (eq? G42f6@l G42f1@label) (void) (G42cf@dup-error G42f0@name))) G42f4@t) (hashtable-set! G42e9@h G42f0@name G42f1@label))) (hashtable-ref G42e9@h G42f0@name '#f))) (car G42ee@x) (cdr G42ee@x))) G42ec@subst)) (G42df@get-import G42e8@imp)))) ((letrec ((G42e2@f (lambda (G42e4@imp* G42e5@h) (if (null? G42e4@imp*) (hashtable-entries G42e5@h) (begin (G42e1@add-imports! (car G42e4@imp*) G42e5@h) (G42e2@f (cdr G42e4@imp*) G42e5@h)))))) G42e2@f) G42ca@imp* (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G302f@make-top-rib (lambda (G44ca@names G44cb@labels) ((lambda (G44ce@rib) (begin (vector-for-each (lambda (G44d0@name G44d1@label) (begin (if (symbol? G44d0@name) (void) (error 'make-top-rib '"BUG: not a symbol" G44d0@name)) (G2d32@extend-rib! G44ce@rib (G2d4b@make-stx G44d0@name G2cff@top-mark* '() '()) G44d1@label))) G44ca@names G44cb@labels) G44ce@rib)) (G2d30@make-empty-rib)))) (set! G3031@make-collector (lambda () ((lambda (G44d4@ls) (lambda G44d8 ((lambda (G44d9) (if (= G44d9 '0) (apply (lambda () G44d4@ls) G44d8) (if (= G44d9 '1) (apply (lambda (G44d6@x) (set! G44d4@ls (G2cf8@set-cons G44d6@x G44d4@ls))) G44d8) (error 'apply '"invalid arg count")))) (length G44d8)))) '()))) (set! G3033@inv-collector (G28e1@G2814@make-parameter (lambda G44da@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G44dc@x) (begin (if (procedure? G44dc@x) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" G44dc@x)) G44dc@x)))) (set! G3035@vis-collector (G28e1@G2814@make-parameter (lambda G44de@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G44e0@x) (begin (if (procedure? G44e0@x) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" G44e0@x)) G44e0@x)))) (set! G3037@imp-collector (G28e1@G2814@make-parameter (lambda G44e2@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G44e4@x) (begin (if (procedure? G44e4@x) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" G44e4@x)) G44e4@x)))) (set! G3039@chi-library-internal (lambda (G44e6@e* G44e7@rib G44e8@top?) (call-with-values (lambda () (G3023@chi-body* G44e6@e* '() '() '() '() '() '() G44e7@rib G44e8@top?)) (lambda (G44f3@G44ec G44f4@G44ed G44f5@G44ee G44f6@G44ef G44f7@G44f0 G44f8@G44f1 G44f9@G44f2) ((lambda (G4501@_kwd* G4502@mod** G4503@rhs* G4504@lex* G4505@mr G4506@r G4507@e*) (values (append (apply append (reverse G4502@mod**)) G4507@e*) G4506@r G4505@mr (reverse G4504@lex*) (reverse G4503@rhs*))) G44f9@G44f2 G44f8@G44f1 G44f7@G44f0 G44f6@G44ef G44f5@G44ee G44f4@G44ed G44f3@G44ec))))) (set! G303b@chi-interaction-expr (lambda (G450f@e G4510@rib G4511@r) (call-with-values (lambda () (G3023@chi-body* (list G450f@e) G4511@r G4511@r '() '() '() '() G4510@rib '#t)) (lambda (G451c@G4515 G451d@G4516 G451e@G4517 G451f@G4518 G4520@G4519 G4521@G451a G4522@G451b) ((lambda (G452a@_kwd* G452b@mod** G452c@rhs* G452d@lex* G452e@mr G452f@r G4530@e*) ((lambda (G4538@e*) ((lambda (G453a@e) (values G453a@e G452f@r)) (if (null? G4538@e*) (G2ce7@G2c59@build-void) (if (null? (cdr G4538@e*)) (car G4538@e*) (G2ce6@G2c57@build-sequence '#f G4538@e*))))) (G2ff6@expand-interaction-rhs*/init* (reverse G452d@lex*) (reverse G452c@rhs*) (append (apply append (reverse G452b@mod**)) G4530@e*) G452f@r G452e@mr))) G4522@G451b G4521@G451a G4520@G4519 G451f@G4518 G451e@G4517 G451d@G4516 G451c@G4515))))) (set! G303d@library-body-expander (lambda (G453c@name G453d@exp* G453e@imp* G453f@b* G4540@top?) ((lambda (G4547@itc) (begin (set! G4547@itc (G3031@make-collector)) ((lambda (G454c@G4548@imp-collector G454d@G4549@top-level-context G454e@G454a@imp-collector G454f@G454b@top-level-context) ((lambda (G4554@swap) (dynamic-wind G4554@swap (lambda () (call-with-values (lambda () (G3027@parse-exports G453d@exp*)) (lambda (G4558@G4556 G4559@G4557) ((lambda (G455c@exp-ext* G455d@exp-int*) (call-with-values (lambda () (G302d@parse-import-spec* G453e@imp*)) (lambda (G4562@G4560 G4563@G4561) ((lambda (G4566@subst-labels G4567@subst-names) ((lambda (G456a@rib) ((lambda (G456c@b* G456d@rtc G456e@vtc) ((lambda (G4576@G4572@inv-collector G4577@G4573@vis-collector G4578@G4574@inv-collector G4579@G4575@vis-collector) ((lambda (G457e@swap) (dynamic-wind G457e@swap (lambda () (call-with-values (lambda () (G3039@chi-library-internal G456c@b* G456a@rib G4540@top?)) (lambda (G4585@G4580 G4586@G4581 G4587@G4582 G4588@G4583 G4589@G4584) ((lambda (G458f@rhs* G4590@lex* G4591@mr G4592@r G4593@init*) (begin (G2d36@seal-rib! G456a@rib) ((lambda (G4599@init*) ((lambda (G459b@rhs*) ((lambda () (begin (G2d38@unseal-rib! G456a@rib) ((lambda (G459d@loc* G459e@export-subst) ((lambda (G45a2@errstr) (begin (set! G45a2@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G309d@make-export-env/macros G4590@lex* G459d@loc* G4592@r)) (lambda (G45a6@G45a3 G45a7@G45a4 G45a8@G45a5) ((lambda (G45ac@macro* G45ad@global* G45ae@export-env) (begin (for-each (lambda (G45b2@s) ((lambda (G45b4@name G45b5@label) ((lambda (G45b8@p) (if G45b8@p ((lambda (G45ba@b) ((lambda (G45bc@type) (if (eq? G45bc@type 'mutable) (G30ad@syntax-violation 'export G45a2@errstr G45b4@name) (void))) (car G45ba@b))) (cdr G45b8@p)) (void))) (assq G45b5@label G45ae@export-env))) (car G45b2@s) (cdr G45b2@s))) G459e@export-subst) ((lambda (G45be@invoke-body G45bf@invoke-definitions) (values (G4547@itc) (G456d@rtc) (G456e@vtc) (G2ce6@G2c57@build-sequence '#f (append G45bf@invoke-definitions (list G45be@invoke-body))) G45ac@macro* G459e@export-subst G45ae@export-env)) (G2ce9@G2c5d@build-letrec* '#f G4590@lex* G459b@rhs* (G3099@build-exports G45ad@global* G4599@init*)) (map G2ce2@G2b87@build-global-define (map cdr G45ad@global*))))) G45a8@G45a5 G45a7@G45a4 G45a6@G45a3))))) '#f)) (map G2d05@gen-global G4590@lex*) (G309b@make-export-subst G455d@exp-int* G455c@exp-ext* G456a@rib)))))) (G2ff8@chi-rhs* G458f@rhs* G4592@r G4591@mr))) (G2fe4@chi-expr* G4593@init* G4592@r G4591@mr)))) G4589@G4584 G4588@G4583 G4587@G4582 G4586@G4581 G4585@G4580)))) G457e@swap)) (lambda () (begin ((lambda (G45c2@t) (begin (G4576@G4572@inv-collector G4578@G4574@inv-collector) (set! G4578@G4574@inv-collector G45c2@t))) (G4576@G4572@inv-collector)) ((lambda (G45c4@t) (begin (G4577@G4573@vis-collector G4579@G4575@vis-collector) (set! G4579@G4575@vis-collector G45c4@t))) (G4577@G4573@vis-collector)))))) G3033@inv-collector G3035@vis-collector G456d@rtc G456e@vtc)) (map (lambda (G45c6@x) (G2d4b@make-stx G45c6@x G2cff@top-mark* (list G456a@rib) '())) G453f@b*) (G3031@make-collector) (G3031@make-collector))) (G302f@make-top-rib G4567@subst-names G4566@subst-labels))) G4563@G4561 G4562@G4560)))) G4559@G4557 G4558@G4556)))) G4554@swap)) (lambda () (begin ((lambda (G45c8@t) (begin (G454c@G4548@imp-collector G454e@G454a@imp-collector) (set! G454e@G454a@imp-collector G45c8@t))) (G454c@G4548@imp-collector)) ((lambda (G45ca@t) (begin (G454d@G4549@top-level-context G454f@G454b@top-level-context) (set! G454f@G454b@top-level-context G45ca@t))) (G454d@G4549@top-level-context)))))) G3037@imp-collector G30bb@top-level-context G4547@itc '#f))) '#f))) (set! G303f@core-library-expander (lambda (G45cc@e G45cd@verify-name) (call-with-values (lambda () (G302b@parse-library G45cc@e)) (lambda (G45d4@G45d0 G45d5@G45d1 G45d6@G45d2 G45d7@G45d3) ((lambda (G45dc@b* G45dd@imp* G45de@exp* G45df@name*) (call-with-values (lambda () (G3029@parse-library-name G45df@name*)) (lambda (G45e6@G45e4 G45e7@G45e5) ((lambda (G45ea@ver G45eb@name) (begin (G45cd@verify-name G45eb@name) (call-with-values (lambda () (G303d@library-body-expander G45eb@name G45de@exp* G45dd@imp* G45dc@b* '#f)) (lambda (G45f5@G45ee G45f6@G45ef G45f7@G45f0 G45f8@G45f1 G45f9@G45f2 G45fa@G45f3 G45fb@G45f4) ((lambda (G4603@export-env G4604@export-subst G4605@visit-code G4606@invoke-code G4607@visit-req* G4608@invoke-req* G4609@imp*) (values G45eb@name G45ea@ver G4609@imp* G4608@invoke-req* G4607@visit-req* G4606@invoke-code G4605@visit-code G4604@export-subst G4603@export-env)) G45fb@G45f4 G45fa@G45f3 G45f9@G45f2 G45f8@G45f1 G45f7@G45f0 G45f6@G45ef G45f5@G45ee))))) G45e7@G45e5 G45e6@G45e4)))) G45d7@G45d3 G45d6@G45d2 G45d5@G45d1 G45d4@G45d0))))) (set! G3041@parse-top-level-program (lambda (G4611@e*) ((lambda (G4613@t) ((lambda (G4615@ls/false) (if (if G4615@ls/false (begin '#f (apply (lambda (G4617@import G4618@imp* G4619@b*) (eq? (G30b3@syntax->datum G4617@import) 'import)) G4615@ls/false)) '#f) (apply (lambda (G461d@import G461e@imp* G461f@b*) (values G461e@imp* G461f@b*)) G4615@ls/false) ((lambda (G4623@t) ((lambda (G4625@ls/false) (if (if G4625@ls/false (begin '#f (apply (lambda (G4627@import G4628@x G4629@y) (eq? (G30b3@syntax->datum G4627@import) 'import)) G4625@ls/false)) '#f) (apply (lambda (G462d@import G462e@x G462f@y) (G30ad@syntax-violation 'expander '"invalid syntax of top-level program" (G2d7b@syntax-car G4611@e*))) G4625@ls/false) ((lambda (G4633@t) ((lambda (G4635@ls/false) (if G4635@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G4635@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G4633@t))) (G2fc4@syntax-dispatch G4633@t '_))) G4623@t))) (G2fc4@syntax-dispatch G4623@t '((any . any) . any)))) G4613@t))) (G2fc4@syntax-dispatch G4613@t '((any . each-any) . each-any)))) G4611@e*))) (set! G3043@top-level-expander (lambda (G4637@e*) (call-with-values (lambda () (G3041@parse-top-level-program G4637@e*)) (lambda (G463b@G4639 G463c@G463a) ((lambda (G463f@b* G4640@imp*) (call-with-values (lambda () (G303d@library-body-expander '() '() G4640@imp* G463f@b* '#t)) (lambda (G464a@G4643 G464b@G4644 G464c@G4645 G464d@G4646 G464e@G4647 G464f@G4648 G4650@G4649) ((lambda (G4658@export-env G4659@export-subst G465a@visit-code G465b@invoke-code G465c@visit-req* G465d@invoke-req* G465e@imp*) (values G465d@invoke-req* G465b@invoke-code)) G4650@G4649 G464f@G4648 G464e@G4647 G464d@G4646 G464c@G4645 G464b@G4644 G464a@G4643)))) G463c@G463a G463b@G4639))))) (set! G3049@G3044 (make-record-type-descriptor 'env '#f 'G3047 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G304b@G3046 '#f) (set! G304d@G3045 (make-record-constructor-descriptor G3049@G3044 '#f G304b@G3046)) (set! G3052@env? (record-predicate G3049@G3044)) (set! G3054@make-env (record-constructor G304d@G3045)) (set! G3056@env-names (record-accessor G3049@G3044 '0)) (set! G3058@env-labels (record-accessor G3049@G3044 '1)) (set! G305a@env-itc (record-accessor G3049@G3044 '2)) (set! G305c@set-env-names! (record-mutator G3049@G3044 '0)) (set! G305e@set-env-labels! (record-mutator G3049@G3044 '1)) (set! G3060@set-env-itc! (record-mutator G3049@G3044 '2)) (set! G3062@rp (G28de@G280e@make-record-printer 'env (lambda (G4666@x G4667@p) (display '"#<environment>" G4667@p)))) (set! G3068@G3063 (make-record-type-descriptor 'interaction-env '#f 'G3066 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G306a@G3065 '#f) (set! G306c@G3064 (make-record-constructor-descriptor G3068@G3063 '#f G306a@G3065)) (set! G3071@interaction-env? (record-predicate G3068@G3063)) (set! G3073@make-interaction-env (record-constructor G306c@G3064)) (set! G3075@interaction-env-rib (record-accessor G3068@G3063 '0)) (set! G3077@interaction-env-r (record-accessor G3068@G3063 '1)) (set! G3079@interaction-env-locs (record-accessor G3068@G3063 '2)) (set! G307b@set-interaction-env-rib! (record-mutator G3068@G3063 '0)) (set! G307d@set-interaction-env-r! (record-mutator G3068@G3063 '1)) (set! G307f@set-interaction-env-locs! (record-mutator G3068@G3063 '2)) (set! G3081@rp (G28de@G280e@make-record-printer 'interaction-env (lambda (G466a@x G466b@p) (display '"#<environment>" G466b@p)))) (set! G3083@interaction-environment-symbols (lambda () (map (lambda (G466e@x) G466e@x) (G2d20@rib-sym* (G3075@interaction-env-rib (G30b9@interaction-environment)))))) (set! G3085@environment-symbols (lambda (G4670@e) (vector->list (G3056@env-names G4670@e)))) (set! G3087@environment? (lambda (G4672@x) ((lambda (G4674@t) (if G4674@t G4674@t (begin '#f (G3071@interaction-env? G4672@x)))) (G3052@env? G4672@x)))) (set! G3089@environment (lambda G4676@imp* ((lambda (G4678@itc) ((lambda (G467c@G467a@imp-collector G467d@G467b@imp-collector) ((lambda (G4680@swap) (dynamic-wind G4680@swap (lambda () (call-with-values (lambda () (G302d@parse-import-spec* G4676@imp*)) (lambda (G4684@G4682 G4685@G4683) ((lambda (G4688@subst-labels G4689@subst-names) (G3054@make-env G4689@subst-names G4688@subst-labels G4678@itc)) G4685@G4683 G4684@G4682)))) G4680@swap)) (lambda () ((lambda (G468c@t) (begin (G467c@G467a@imp-collector G467d@G467b@imp-collector) (set! G467d@G467b@imp-collector G468c@t))) (G467c@G467a@imp-collector))))) G3037@imp-collector G4678@itc)) (G3031@make-collector)))) (set! G308b@null-environment (lambda (G468e@n) (begin (if (eqv? G468e@n '5) (void) (assertion-violation 'null-environment '"not 5" G468e@n)) (G3089@environment '(psyntax null-environment-5))))) (set! G308d@scheme-report-environment (lambda (G4690@n) (begin (if (eqv? G4690@n '5) (void) (assertion-violation 'scheme-report-environment '"not 5" G4690@n)) (G3089@environment '(psyntax scheme-report-environment-5))))) (set! G308f@expand (lambda (G4692@x G4693@env) (if (G3052@env? G4693@env) ((lambda (G4696@rib) ((lambda (G4698@x G4699@itc G469a@rtc G469b@vtc) ((lambda (G46a0@x) (begin (G2d36@seal-rib! G4696@rib) (values G46a0@x (G469a@rtc)))) ((lambda (G46a8@G46a2@inv-collector G46a9@G46a3@vis-collector G46aa@G46a4@imp-collector G46ab@G46a5@inv-collector G46ac@G46a6@vis-collector G46ad@G46a7@imp-collector) ((lambda (G46b4@swap) (dynamic-wind G46b4@swap (lambda () (G2fe8@chi-expr G4698@x '() '())) G46b4@swap)) (lambda () (begin ((lambda (G46b6@t) (begin (G46a8@G46a2@inv-collector G46ab@G46a5@inv-collector) (set! G46ab@G46a5@inv-collector G46b6@t))) (G46a8@G46a2@inv-collector)) ((lambda (G46b8@t) (begin (G46a9@G46a3@vis-collector G46ac@G46a6@vis-collector) (set! G46ac@G46a6@vis-collector G46b8@t))) (G46a9@G46a3@vis-collector)) ((lambda (G46ba@t) (begin (G46aa@G46a4@imp-collector G46ad@G46a7@imp-collector) (set! G46ad@G46a7@imp-collector G46ba@t))) (G46aa@G46a4@imp-collector)))))) G3033@inv-collector G3035@vis-collector G3037@imp-collector G469a@rtc G469b@vtc G4699@itc))) (G2d4b@make-stx G4692@x G2cff@top-mark* (list G4696@rib) '()) (G305a@env-itc G4693@env) (G3031@make-collector) (G3031@make-collector))) (G302f@make-top-rib (G3056@env-names G4693@env) (G3058@env-labels G4693@env))) (if (G3071@interaction-env? G4693@env) ((lambda (G46bc@rib G46bd@r G46be@rtc) ((lambda (G46c2@x) (call-with-values (lambda () ((lambda (G46ce@G46c6@top-level-context G46cf@G46c7@inv-collector G46d0@G46c8@vis-collector G46d1@G46c9@imp-collector G46d2@G46ca@top-level-context G46d3@G46cb@inv-collector G46d4@G46cc@vis-collector G46d5@G46cd@imp-collector) ((lambda (G46de@swap) (dynamic-wind G46de@swap (lambda () (G303b@chi-interaction-expr G46c2@x G46bc@rib G46bd@r)) G46de@swap)) (lambda () (begin ((lambda (G46e0@t) (begin (G46ce@G46c6@top-level-context G46d2@G46ca@top-level-context) (set! G46d2@G46ca@top-level-context G46e0@t))) (G46ce@G46c6@top-level-context)) ((lambda (G46e2@t) (begin (G46cf@G46c7@inv-collector G46d3@G46cb@inv-collector) (set! G46d3@G46cb@inv-collector G46e2@t))) (G46cf@G46c7@inv-collector)) ((lambda (G46e4@t) (begin (G46d0@G46c8@vis-collector G46d4@G46cc@vis-collector) (set! G46d4@G46cc@vis-collector G46e4@t))) (G46d0@G46c8@vis-collector)) ((lambda (G46e6@t) (begin (G46d1@G46c9@imp-collector G46d5@G46cd@imp-collector) (set! G46d5@G46cd@imp-collector G46e6@t))) (G46d1@G46c9@imp-collector)))))) G30bb@top-level-context G3033@inv-collector G3035@vis-collector G3037@imp-collector G4693@env G46be@rtc (G3031@make-collector) (G3031@make-collector))) (lambda (G46e8@G46c4 G46e9@G46c5) ((lambda (G46ec@r^ G46ed@e) (begin (G307d@set-interaction-env-r! G4693@env G46ec@r^) (values G46ed@e (G46be@rtc)))) G46e9@G46c5 G46e8@G46c4)))) (G2d4b@make-stx G4692@x G2cff@top-mark* (list G46bc@rib) '()))) (G3075@interaction-env-rib G4693@env) (G3077@interaction-env-r G4693@env) (G3031@make-collector)) (assertion-violation 'expand '"not an environment" G4693@env))))) (set! G3091@eval (lambda (G46f0@x G46f1@env) (begin (if (G3087@environment? G46f1@env) (void) (error 'eval '"not an environment" G46f1@env)) (call-with-values (lambda () (G308f@expand G46f0@x G46f1@env)) (lambda (G46f6@G46f4 G46f7@G46f5) ((lambda (G46fa@invoke-req* G46fb@x) (begin (for-each G2b80@G2a18@invoke-library G46fa@invoke-req*) (eval-core (G2944@G28ed@expanded->core G46fb@x)))) G46f7@G46f5 G46f6@G46f4)))))) (set! G3093@library-expander (lambda G4763 ((lambda (G4764) (if (= G4764 '3) (apply (lambda (G46fe@x G46ff@filename G4700@verify-name) ((lambda (G4705@build-visit-code G4707@visit!) (begin (set! G4705@build-visit-code (lambda (G4751@macro*) (if (null? G4751@macro*) (G2ce7@G2c59@build-void) (G2ce6@G2c57@build-sequence '#f (map (lambda (G4753@x) ((lambda (G4755@loc G4756@src) (list 'set! G4755@loc G4756@src)) (car G4753@x) (cddr G4753@x))) G4751@macro*))))) (set! G4707@visit! (lambda (G4749@macro*) (for-each (lambda (G474b@x) ((lambda (G474d@loc G474e@proc) (set-symbol-value! G474d@loc G474e@proc)) (car G474b@x) (cadr G474b@x))) G4749@macro*))) (call-with-values (lambda () (G303f@core-library-expander G46fe@x G4700@verify-name)) (lambda (G4711@G4708 G4712@G4709 G4713@G470a G4714@G470b G4715@G470c G4716@G470d G4717@G470e G4718@G470f G4719@G4710) ((lambda (G4723@export-env G4724@export-subst G4725@macro* G4726@invoke-code G4727@vis* G4728@inv* G4729@imp* G472a@ver G472b@name) ((lambda (G4735@id G4736@name G4737@ver G4738@imp* G4739@vis* G473a@inv* G473b@visit-proc G473c@invoke-proc G473d@visit-code G473e@invoke-code) (begin (G2b7e@G2a14@install-library G4735@id G4736@name G4737@ver G4738@imp* G4739@vis* G473a@inv* G4724@export-subst G4723@export-env G473b@visit-proc G473c@invoke-proc G473d@visit-code G473e@invoke-code '#t G46ff@filename) (values G4735@id G4736@name G4737@ver G4738@imp* G4739@vis* G473a@inv* G473e@invoke-code G473d@visit-code G4724@export-subst G4723@export-env))) (gensym) G472b@name G472a@ver (map G2b84@G2a20@library-spec G4729@imp*) (map G2b84@G2a20@library-spec G4727@vis*) (map G2b84@G2a20@library-spec G4728@inv*) (lambda () (G4707@visit! G4725@macro*)) (lambda () (eval-core (G2944@G28ed@expanded->core G4726@invoke-code))) (G4705@build-visit-code G4725@macro*) G4726@invoke-code)) G4719@G4710 G4718@G470f G4717@G470e G4716@G470d G4715@G470c G4714@G470b G4713@G470a G4712@G4709 G4711@G4708))))) '#f '#f)) G4763) (if (= G4764 '2) (apply (lambda (G4759@x G475a@filename) (G3093@library-expander G4759@x G475a@filename (lambda (G475d@x) (values)))) G4763) (if (= G4764 '1) (apply (lambda (G475f@x) (G3093@library-expander G475f@x '#f (lambda (G4761@x) (values)))) G4763) (error 'apply '"invalid arg count"))))) (length G4763)))) (set! G3095@boot-library-expand (lambda (G4765@x) (call-with-values (lambda () (G3093@library-expander G4765@x)) (lambda (G4771@G4767 G4772@G4768 G4773@G4769 G4774@G476a G4775@G476b G4776@G476c G4777@G476d G4778@G476e G4779@G476f G477a@G4770) ((lambda (G4785@export-env G4786@export-subst G4787@visit-code G4788@invoke-code G4789@inv* G478a@vis* G478b@imp* G478c@ver G478d@name G478e@id) (values G478d@name G4788@invoke-code G4786@export-subst G4785@export-env)) G477a@G4770 G4779@G476f G4778@G476e G4777@G476d G4776@G476c G4775@G476b G4774@G476a G4773@G4769 G4772@G4768 G4771@G4767))))) (set! G3097@rev-map-append (lambda (G4799@f G479a@ls G479b@ac) (if (null? G479a@ls) G479b@ac (G3097@rev-map-append G4799@f (cdr G479a@ls) (cons (G4799@f (car G479a@ls)) G479b@ac))))) (set! G3099@build-exports (lambda (G479f@lex*+loc* G47a0@init*) (G2ce6@G2c57@build-sequence '#f (cons (G2ce7@G2c59@build-void) (G3097@rev-map-append (lambda (G47a3@x) (list 'set! (cdr G47a3@x) (car G47a3@x))) G479f@lex*+loc* G47a0@init*))))) (set! G309b@make-export-subst (lambda (G47a5@int* G47a6@ext* G47a7@rib) (map (lambda (G47ab@int G47ac@ext) ((lambda (G47af@id) ((lambda (G47b1@label) ((lambda () (begin (if G47b1@label (void) (G30ad@syntax-violation '#f '"cannot export unbound identifier" G47af@id)) (cons G47ac@ext G47b1@label))))) (G2d9b@id->label G47af@id))) (G2d4b@make-stx G47ab@int G2cff@top-mark* (list G47a7@rib) '()))) G47a5@int* G47a6@ext*))) (set! G309d@make-export-env/macros (lambda (G47b3@lex* G47b4@loc* G47b5@r) ((lambda (G47ba@lookup) (begin (set! G47ba@lookup (lambda (G47d6@x) ((letrec ((G47d8@f (lambda (G47da@x G47db@lex* G47dc@loc*) (if (pair? G47db@lex*) (if (eq? G47da@x (car G47db@lex*)) (car G47dc@loc*) (G47d8@f G47da@x (cdr G47db@lex*) (cdr G47dc@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G47d8@f) G47d6@x G47b3@lex* G47b4@loc*))) ((letrec ((G47bb@f (lambda (G47bd@r G47be@env G47bf@global* G47c0@macro*) (if (null? G47bd@r) (values G47be@env G47bf@global* G47c0@macro*) ((lambda (G47c5@x) ((lambda (G47c7@label G47c8@b) ((lambda (G47cb@t) (if (eqv? G47cb@t 'lexical) ((lambda (G47d0@v) ((lambda (G47d2@loc G47d3@type) (G47bb@f (cdr G47bd@r) (cons (cons* G47c7@label G47d3@type G47d2@loc) G47be@env) (cons (cons (G2f54@lexical-var G47d0@v) G47d2@loc) G47bf@global*) G47c0@macro*)) (G47ba@lookup (G2f54@lexical-var G47d0@v)) (if (G2f56@lexical-mutable? G47d0@v) 'mutable 'global))) (G2da5@binding-value G47c8@b)) (if (eqv? G47cb@t 'local-macro) ((lambda (G47ce@loc) (G47bb@f (cdr G47bd@r) (cons (cons* G47c7@label 'global-macro G47ce@loc) G47be@env) G47bf@global* (cons (cons G47ce@loc (G2da5@binding-value G47c8@b)) G47c0@macro*))) (gensym)) (if (eqv? G47cb@t 'local-macro!) ((lambda (G47cc@loc) (G47bb@f (cdr G47bd@r) (cons (cons* G47c7@label 'global-macro! G47cc@loc) G47be@env) G47bf@global* (cons (cons G47cc@loc (G2da5@binding-value G47c8@b)) G47c0@macro*))) (gensym)) (if (memv G47cb@t '($rtd $module)) (G47bb@f (cdr G47bd@r) (cons G47c5@x G47be@env) G47bf@global* G47c0@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2da3@binding-type G47c8@b) (G2da5@binding-value G47c8@b))))))) (G2da3@binding-type G47c8@b))) (car G47c5@x) (cdr G47c5@x))) (car G47bd@r)))))) G47bb@f) G47b5@r '() '() '()))) '#f))) (set! G309f@generate-temporaries (lambda (G47e0@ls) ((lambda (G47e2@t) ((lambda (G47e4@ls/false) (if G47e4@ls/false (apply (lambda (G47e6@ls) (map (lambda (G47e8@x) (G2d4b@make-stx ((lambda (G47ea@x) (if ((lambda (G47ec@t) (if G47ec@t G47ec@t (begin '#f (string? G47ea@x)))) (symbol? G47ea@x)) (gensym G47ea@x) (gensym 't))) (G30b3@syntax->datum G47e8@x)) G2cff@top-mark* '() '())) G47e6@ls)) G47e4@ls/false) ((lambda (G47ee@t) ((lambda (G47f0@ls/false) (if G47f0@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47f0@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G47ee@t))) (G2fc4@syntax-dispatch G47ee@t '_))) G47e2@t))) (G2fc4@syntax-dispatch G47e2@t 'each-any))) G47e0@ls))) (set! G30a1@free-identifier=? (lambda (G47f2@x G47f3@y) (if (G2d81@id? G47f2@x) (if (G2d81@id? G47f3@y) (G2d89@free-id=? G47f2@x G47f3@y) (assertion-violation 'free-identifier=? '"not an identifier" G47f3@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47f2@x)))) (set! G30a3@bound-identifier=? (lambda (G47f6@x G47f7@y) (if (G2d81@id? G47f6@x) (if (G2d81@id? G47f7@y) (G2d87@bound-id=? G47f6@x G47f7@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47f7@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47f6@x)))) (set! G30a5@extract-position-condition (lambda (G47fa@x) ((lambda (G4804@G47ff G4806@G4801 G4808@G4800 G480d@G47fe G480f@make-source-condition G4811@G47fc G4813@G47fd G4815@source-condition? G4817@source-filename G4819@source-line) (begin (set! G4804@G47ff (make-record-type-descriptor '&source-information &condition-rtd 'G4802 '#f '#f '#((immutable file-name) (immutable line)))) (set! G4806@G4801 '#f) (set! G4808@G4800 (make-record-constructor-descriptor G4804@G47ff &condition-rcd G4806@G4801)) (set! G480d@G47fe (record-predicate G4804@G47ff)) (set! G480f@make-source-condition (record-constructor G4808@G4800)) (set! G4811@G47fc (record-accessor G4804@G47ff '0)) (set! G4813@G47fd (record-accessor G4804@G47ff '1)) (set! G4815@source-condition? (condition-predicate G4804@G47ff)) (set! G4817@source-filename (condition-accessor G4804@G47ff G4811@G47fc)) (set! G4819@source-line (condition-accessor G4804@G47ff G4813@G47fd)) (if (G2d49@stx? G47fa@x) ((lambda (G481a@x) (if (G28d9@G2804@annotation? G481a@x) ((lambda (G481c@src) (if (pair? G481c@src) (G480f@make-source-condition (car G481c@src) (cdr G481c@src)) (condition))) (G28da@G2806@annotation-source G481a@x)) (condition))) (G2d4d@stx-expr G47fa@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G30a7@syntax-error (lambda (G481e@x . G4820@args) (begin (if (for-all string? G4820@args) (void) (assertion-violation 'syntax-error '"invalid argument" G4820@args)) (raise (condition (G4ae8@G49d2@make-message-condition (if (null? G4820@args) '"invalid syntax" (apply string-append G4820@args))) (G4b30@G4abe@make-syntax-violation (G30b3@syntax->datum G481e@x) '#f) (G30a5@extract-position-condition G481e@x) (G30a9@extract-trace G481e@x)))))) (set! G30a9@extract-trace (lambda (G4822@x) ((lambda (G482b@G4826 G482d@G4828 G482f@G4827 G4834@G4825 G4836@make-trace G4838@G4824 G483a@trace? G483c@trace-form) (begin (set! G482b@G4826 (make-record-type-descriptor '&trace &condition-rtd 'G4829 '#f '#f '#((immutable form)))) (set! G482d@G4828 '#f) (set! G482f@G4827 (make-record-constructor-descriptor G482b@G4826 &condition-rcd G482d@G4828)) (set! G4834@G4825 (record-predicate G482b@G4826)) (set! G4836@make-trace (record-constructor G482f@G4827)) (set! G4838@G4824 (record-accessor G482b@G4826 '0)) (set! G483a@trace? (condition-predicate G482b@G4826)) (set! G483c@trace-form (condition-accessor G482b@G4826 G4838@G4824)) ((letrec ((G483d@f (lambda (G483f@x) (if (G2d49@stx? G483f@x) (apply condition (G4836@make-trace G483f@x) (map G483d@f (G2d53@stx-ae* G483f@x))) (if (G28d9@G2804@annotation? G483f@x) (G4836@make-trace (G2d4b@make-stx G483f@x '() '() '())) (condition)))))) G483d@f) G4822@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G30ab@syntax-violation* (lambda (G4841@who G4842@msg G4843@form G4844@condition-object) (begin (if (string? G4842@msg) (void) (assertion-violation 'syntax-violation '"message is not a string" G4842@msg)) ((lambda (G4849@who) (raise (condition (if G4849@who (G4b16@G4a68@make-who-condition G4849@who) (condition)) (G4ae8@G49d2@make-message-condition G4842@msg) G4844@condition-object (G30a5@extract-position-condition G4843@form) (G30a9@extract-trace G4843@form)))) (if ((lambda (G484b@t) (if G484b@t G484b@t (begin '#f (symbol? G4841@who)))) (string? G4841@who)) G4841@who (if (not G4841@who) ((lambda (G484d@t) ((lambda (G484f@ls/false) (if (if G484f@ls/false (begin '#f (apply (lambda (G4851@id) (G2d81@id? G4851@id)) G484f@ls/false)) '#f) (apply (lambda (G4853@id) (G30b3@syntax->datum G4853@id)) G484f@ls/false) ((lambda (G4855@t) ((lambda (G4857@ls/false) (if (if G4857@ls/false (begin '#f (apply (lambda (G4859@id G485a@rest) (G2d81@id? G4859@id)) G4857@ls/false)) '#f) (apply (lambda (G485d@id G485e@rest) (G30b3@syntax->datum G485d@id)) G4857@ls/false) ((lambda (G4861@t) ((lambda (G4863@ls/false) (if G4863@ls/false (apply (lambda () '#f) G4863@ls/false) (G30ad@syntax-violation '#f '"invalid syntax" G4861@t))) (G2fc4@syntax-dispatch G4861@t '_))) G4855@t))) (G2fc4@syntax-dispatch G4855@t '(any . any)))) G484d@t))) (G2fc4@syntax-dispatch G484d@t 'any))) G4843@form) (assertion-violation 'syntax-violation '"invalid who argument" G4841@who))))))) (set! G30ad@syntax-violation (lambda G4873 ((lambda (G4874) (if (= G4874 '3) (apply (lambda (G4865@who G4866@msg G4867@form) (G30ad@syntax-violation G4865@who G4866@msg G4867@form '#f)) G4873) (if (= G4874 '4) (apply (lambda (G486b@who G486c@msg G486d@form G486e@subform) (G30ab@syntax-violation* G486b@who G486c@msg G486d@form (G4b30@G4abe@make-syntax-violation (G30b3@syntax->datum G486d@form) (G30b3@syntax->datum G486e@subform)))) G4873) (error 'apply '"invalid arg count")))) (length G4873)))) (set! G30af@identifier? (lambda (G4875@x) (G2d81@id? G4875@x))) (set! G30b1@datum->syntax (lambda (G4877@id G4878@datum) (if (G2d81@id? G4877@id) (G2d5f@datum->stx G4877@id G4878@datum) (assertion-violation 'datum->syntax '"not an identifier" G4877@id)))) (set! G30b3@syntax->datum (lambda (G487b@x) (G2d97@stx->datum G487b@x))) (set! G30b5@compile-r6rs-top-level (lambda (G487d@x*) (call-with-values (lambda () (G3043@top-level-expander G487d@x*)) (lambda (G4881@G487f G4882@G4880) ((lambda (G4885@invoke-code G4886@lib*) (lambda () (begin (for-each G2b80@G2a18@invoke-library G4886@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2944@G28ed@expanded->core G4885@invoke-code)) (void)) (eval-core (G2944@G28ed@expanded->core G4885@invoke-code))))) G4882@G4880 G4881@G487f))))) (set! G30b7@pre-compile-r6rs-top-level (lambda (G4889@x*) (call-with-values (lambda () (G3043@top-level-expander G4889@x*)) (lambda (G488d@G488b G488e@G488c) ((lambda (G4891@invoke-code G4892@lib*) (begin (for-each G2b80@G2a18@invoke-library G4892@lib*) (G28df@G2810@compile-core (G2944@G28ed@expanded->core G4891@invoke-code)))) G488e@G488c G488d@G488b))))) (set! G30b9@interaction-environment ((lambda (G4895@the-env) (lambda () ((lambda (G4897@t) (if G4897@t G4897@t (begin '#f ((lambda (G4899@lib G489a@rib) (begin ((lambda (G489d@subst) (begin (G2d28@set-rib-sym*! G489a@rib (map car G489d@subst)) (G2d2a@set-rib-mark**! G489a@rib (map (lambda (G489f@x) G2cff@top-mark*) G489d@subst)) (G2d2c@set-rib-label*! G489a@rib (map cdr G489d@subst)))) (G2b55@G29c2@library-subst G4899@lib)) ((lambda (G48a1@env) (begin (set! G4895@the-env G48a1@env) G48a1@env)) (G3073@make-interaction-env G489a@rib '() '())))) (G2b79@G2a0a@find-library-by-name '(mosh interaction)) (G2d30@make-empty-rib))))) G4895@the-env))) '#f)) (set! G30bb@top-level-context (G28e1@G2814@make-parameter '#f)) (begin (set! G49a6@G30bb@top-level-context G30bb@top-level-context) (set! G49a5@G30b9@interaction-environment G30b9@interaction-environment) (set! G49a4@G30b7@pre-compile-r6rs-top-level G30b7@pre-compile-r6rs-top-level) (set! G49a3@G30b5@compile-r6rs-top-level G30b5@compile-r6rs-top-level) (set! G49a2@G30b3@syntax->datum G30b3@syntax->datum) (set! G49a1@G30b1@datum->syntax G30b1@datum->syntax) (set! G49a0@G30af@identifier? G30af@identifier?) (set! G499f@G30ad@syntax-violation G30ad@syntax-violation) (set! G499e@G30ab@syntax-violation* G30ab@syntax-violation*) (set! G499d@G30a9@extract-trace G30a9@extract-trace) (set! G499c@G30a7@syntax-error G30a7@syntax-error) (set! G499b@G30a5@extract-position-condition G30a5@extract-position-condition) (set! G499a@G30a3@bound-identifier=? G30a3@bound-identifier=?) (set! G4999@G30a1@free-identifier=? G30a1@free-identifier=?) (set! G4998@G309f@generate-temporaries G309f@generate-temporaries) (set! G4997@G309d@make-export-env/macros G309d@make-export-env/macros) (set! G4996@G309b@make-export-subst G309b@make-export-subst) (set! G4995@G3099@build-exports G3099@build-exports) (set! G4994@G3097@rev-map-append G3097@rev-map-append) (set! G4993@G3095@boot-library-expand G3095@boot-library-expand) (set! G4992@G3093@library-expander G3093@library-expander) (set! G4991@G3091@eval G3091@eval) (set! G4990@G308f@expand G308f@expand) (set! G498f@G308d@scheme-report-environment G308d@scheme-report-environment) (set! G498e@G308b@null-environment G308b@null-environment) (set! G498d@G3089@environment G3089@environment) (set! G498c@G3087@environment? G3087@environment?) (set! G498b@G3085@environment-symbols G3085@environment-symbols) (set! G498a@G3083@interaction-environment-symbols G3083@interaction-environment-symbols) (set! G4989@G3081@rp G3081@rp) (set! G4988@G307f@set-interaction-env-locs! G307f@set-interaction-env-locs!) (set! G4987@G307d@set-interaction-env-r! G307d@set-interaction-env-r!) (set! G4986@G307b@set-interaction-env-rib! G307b@set-interaction-env-rib!) (set! G4985@G3079@interaction-env-locs G3079@interaction-env-locs) (set! G4984@G3077@interaction-env-r G3077@interaction-env-r) (set! G4983@G3075@interaction-env-rib G3075@interaction-env-rib) (set! G4982@G3073@make-interaction-env G3073@make-interaction-env) (set! G4981@G3071@interaction-env? G3071@interaction-env?) (set! G4980@G306c@G3064 G306c@G3064) (set! G497f@G306a@G3065 G306a@G3065) (set! G497e@G3068@G3063 G3068@G3063) (set! G497d@G3062@rp G3062@rp) (set! G497c@G3060@set-env-itc! G3060@set-env-itc!) (set! G497b@G305e@set-env-labels! G305e@set-env-labels!) (set! G497a@G305c@set-env-names! G305c@set-env-names!) (set! G4979@G305a@env-itc G305a@env-itc) (set! G4978@G3058@env-labels G3058@env-labels) (set! G4977@G3056@env-names G3056@env-names) (set! G4976@G3054@make-env G3054@make-env) (set! G4975@G3052@env? G3052@env?) (set! G4974@G304d@G3045 G304d@G3045) (set! G4973@G304b@G3046 G304b@G3046) (set! G4972@G3049@G3044 G3049@G3044) (set! G4971@G3043@top-level-expander G3043@top-level-expander) (set! G4970@G3041@parse-top-level-program G3041@parse-top-level-program) (set! G496f@G303f@core-library-expander G303f@core-library-expander) (set! G496e@G303d@library-body-expander G303d@library-body-expander) (set! G496d@G303b@chi-interaction-expr G303b@chi-interaction-expr) (set! G496c@G3039@chi-library-internal G3039@chi-library-internal) (set! G496b@G3037@imp-collector G3037@imp-collector) (set! G496a@G3035@vis-collector G3035@vis-collector) (set! G4969@G3033@inv-collector G3033@inv-collector) (set! G4968@G3031@make-collector G3031@make-collector) (set! G4967@G302f@make-top-rib G302f@make-top-rib) (set! G4966@G302d@parse-import-spec* G302d@parse-import-spec*) (set! G4965@G302b@parse-library G302b@parse-library) (set! G4964@G3029@parse-library-name G3029@parse-library-name) (set! G4963@G3027@parse-exports G3027@parse-exports) (set! G4962@G3025@expand-transformer G3025@expand-transformer) (set! G4961@G3023@chi-body* G3023@chi-body*) (set! G4960@G3021@chi-internal-module G3021@chi-internal-module) (set! G495f@G301f@module-interface-exp-id* G301f@module-interface-exp-id*) (set! G495e@G301d@set-module-interface-exp-lab-vec! G301d@set-module-interface-exp-lab-vec!) (set! G495d@G301b@set-module-interface-exp-id-vec! G301b@set-module-interface-exp-id-vec!) (set! G495c@G3019@set-module-interface-first-mark! G3019@set-module-interface-first-mark!) (set! G495b@G3017@module-interface-exp-lab-vec G3017@module-interface-exp-lab-vec) (set! G495a@G3015@module-interface-exp-id-vec G3015@module-interface-exp-id-vec) (set! G4959@G3013@module-interface-first-mark G3013@module-interface-first-mark) (set! G4958@G3011@make-module-interface G3011@make-module-interface) (set! G4957@G300f@module-interface? G300f@module-interface?) (set! G4956@G300a@G3002 G300a@G3002) (set! G4955@G3008@G3003 G3008@G3003) (set! G4954@G3006@G3001 G3006@G3001) (set! G4953@G3000@parse-module G3000@parse-module) (set! G4952@G2ffe@chi-internal G2ffe@chi-internal) (set! G4951@G2ffc@find-dups G2ffc@find-dups) (set! G4950@G2ffa@find-bound=? G2ffa@find-bound=?) (set! G494f@G2ff8@chi-rhs* G2ff8@chi-rhs*) (set! G494e@G2ff6@expand-interaction-rhs*/init* G2ff6@expand-interaction-rhs*/init*) (set! G494d@G2ff4@chi-rhs G2ff4@chi-rhs) (set! G494c@G2ff2@chi-defun G2ff2@chi-defun) (set! G494b@G2ff0@chi-lambda-clause* G2ff0@chi-lambda-clause*) (set! G494a@G2fee@chi-lambda-clause G2fee@chi-lambda-clause) (set! G4949@G2fec@verify-formals G2fec@verify-formals) (set! G4948@G2fea@chi-set! G2fea@chi-set!) (set! G4947@G2fe8@chi-expr G2fe8@chi-expr) (set! G4946@G2fe6@chi-application G2fe6@chi-application) (set! G4945@G2fe4@chi-expr* G2fe4@chi-expr*) (set! G4944@G2fe2@chi-global-macro G2fe2@chi-global-macro) (set! G4943@G2fe0@chi-local-macro G2fe0@chi-local-macro) (set! G4942@G2fde@chi-macro G2fde@chi-macro) (set! G4941@G2fdc@do-macro-call G2fdc@do-macro-call) (set! G4940@G2fda@local-macro-transformer G2fda@local-macro-transformer) (set! G493f@G2fd8@macro-transformer G2fd8@macro-transformer) (set! G493e@G2fd6@symbol-macro G2fd6@symbol-macro) (set! G493d@G2fd4@file-options-macro G2fd4@file-options-macro) (set! G493c@G2fd2@core-macro-transformer G2fd2@core-macro-transformer) (set! G493b@G2fd0@syntax-transformer G2fd0@syntax-transformer) (set! G493a@G2fce@ellipsis-map G2fce@ellipsis-map) (set! G4939@G2fcc@syntax-case-transformer G2fcc@syntax-case-transformer) (set! G4938@G2fca@verify-literals G2fca@verify-literals) (set! G4937@G2fc8@underscore? G2fc8@underscore?) (set! G4936@G2fc6@ellipsis? G2fc6@ellipsis?) (set! G4935@G2fc4@syntax-dispatch G2fc4@syntax-dispatch) (set! G4934@G2fc2@convert-pattern G2fc2@convert-pattern) (set! G4933@G2fc0@foreign-call-transformer G2fc0@foreign-call-transformer) (set! G4932@G2fbe@parameterize-transformer G2fbe@parameterize-transformer) (set! G4931@G2fbc@incorrect-usage-macro G2fbc@incorrect-usage-macro) (set! G4930@G2fba@define-condition-type-macro G2fba@define-condition-type-macro) (set! G492f@G2fb8@define-record-type-macro G2fb8@define-record-type-macro) (set! G492e@G2fb6@define-struct-macro G2fb6@define-struct-macro) (set! G492d@G2fb4@quasisyntax-macro G2fb4@quasisyntax-macro) (set! G492c@G2fb2@quasiquote-macro G2fb2@quasiquote-macro) (set! G492b@G2fb0@syntax-rules-macro G2fb0@syntax-rules-macro) (set! G492a@G2fae@include-into-macro G2fae@include-into-macro) (set! G4929@G2fac@include-macro G2fac@include-macro) (set! G4928@G2faa@do-include G2faa@do-include) (set! G4927@G2fa8@cond-macro G2fa8@cond-macro) (set! G4926@G2fa6@and-macro G2fa6@and-macro) (set! G4925@G2fa4@or-macro G2fa4@or-macro) (set! G4924@G2fa2@let*-macro G2fa2@let*-macro) (set! G4923@G2fa0@do-macro G2fa0@do-macro) (set! G4922@G2f9e@identifier-syntax-macro G2f9e@identifier-syntax-macro) (set! G4921@G2f9c@endianness-macro G2f9c@endianness-macro) (set! G4920@G2f9a@assert-macro G2f9a@assert-macro) (set! G491f@G2f98@delay-macro G2f98@delay-macro) (set! G491e@G2f96@time-macro G2f96@time-macro) (set! G491d@G2f94@define-enumeration-macro G2f94@define-enumeration-macro) (set! G491c@G2f92@guard-macro G2f92@guard-macro) (set! G491b@G2f90@trace-letrec-syntax-macro G2f90@trace-letrec-syntax-macro) (set! G491a@G2f8e@trace-let-syntax-macro G2f8e@trace-let-syntax-macro) (set! G4919@G2f8c@trace-let/rec-syntax G2f8c@trace-let/rec-syntax) (set! G4918@G2f8a@trace-define-syntax-macro G2f8a@trace-define-syntax-macro) (set! G4917@G2f88@trace-define-macro G2f88@trace-define-macro) (set! G4916@G2f86@trace-lambda-macro G2f86@trace-lambda-macro) (set! G4915@G2f84@let*-values-macro G2f84@let*-values-macro) (set! G4914@G2f82@let-values-macro G2f82@let-values-macro) (set! G4913@G2f80@let-macro G2f80@let-macro) (set! G4912@G2f7e@invalid-fmls-error G2f7e@invalid-fmls-error) (set! G4911@G2f7c@with-syntax-macro G2f7c@with-syntax-macro) (set! G4910@G2f7a@bless G2f7a@bless) (set! G490f@G2f78@lambda-transformer G2f78@lambda-transformer) (set! G490e@G2f76@case-lambda-transformer G2f76@case-lambda-transformer) (set! G490d@G2f74@quote-transformer G2f74@quote-transformer) (set! G490c@G2f72@case-transformer G2f72@case-transformer) (set! G490b@G2f70@if-transformer G2f70@if-transformer) (set! G490a@G2f6e@unless-transformer G2f6e@unless-transformer) (set! G4909@G2f6c@when-transformer G2f6c@when-transformer) (set! G4908@G2f6a@record-constructor-descriptor-transformer G2f6a@record-constructor-descriptor-transformer) (set! G4907@G2f68@record-type-descriptor-transformer G2f68@record-type-descriptor-transformer) (set! G4906@G2f66@type-descriptor-transformer G2f66@type-descriptor-transformer) (set! G4905@G2f64@fluid-let-syntax-transformer G2f64@fluid-let-syntax-transformer) (set! G4904@G2f62@letrec*-transformer G2f62@letrec*-transformer) (set! G4903@G2f60@letrec-transformer G2f60@letrec-transformer) (set! G4902@G2f5e@letrec-helper G2f5e@letrec-helper) (set! G4901@G2f5c@add-lexicals G2f5c@add-lexicals) (set! G4900@G2f5a@add-lexical G2f5a@add-lexical) (set! G48ff@G2f58@set-lexical-mutable! G2f58@set-lexical-mutable!) (set! G48fe@G2f56@lexical-mutable? G2f56@lexical-mutable?) (set! G48fd@G2f54@lexical-var G2f54@lexical-var) (set! G48fc@G2f52@scheme-stx G2f52@scheme-stx) (set! G48fb@G2f50@scheme-stx-hashtable G2f50@scheme-stx-hashtable) (set! G48fa@G2f4e@parse-define-syntax G2f4e@parse-define-syntax) (set! G48f9@G2f4c@parse-define G2f4c@parse-define) (set! G48f8@G2dc8@make-eval-transformer G2dc8@make-eval-transformer) (set! G48f7@G2dc6@variable-transformer-procedure G2dc6@variable-transformer-procedure) (set! G48f6@G2dc4@variable-transformer? G2dc4@variable-transformer?) (set! G48f5@G2dc2@make-variable-transformer G2dc2@make-variable-transformer) (set! G48f4@G2dc0@sanitize-binding G2dc0@sanitize-binding) (set! G48f3@G2da9@syntax-type G2da9@syntax-type) (set! G48f2@G2da7@raise-unbound-error G2da7@raise-unbound-error) (set! G48f1@G2da5@binding-value G2da5@binding-value) (set! G48f0@G2da3@binding-type G2da3@binding-type) (set! G48ef@G2da1@make-binding G2da1@make-binding) (set! G48ee@G2d9f@label->binding G2d9f@label->binding) (set! G48ed@G2d9d@id->real-label G2d9d@id->real-label) (set! G48ec@G2d9b@id->label G2d9b@id->label) (set! G48eb@G2d99@same-marks*? G2d99@same-marks*?) (set! G48ea@G2d97@stx->datum G2d97@stx->datum) (set! G48e9@G2d95@strip G2d95@strip) (set! G48e8@G2d93@strip-annotations G2d93@strip-annotations) (set! G48e7@G2d91@self-evaluating? G2d91@self-evaluating?) (set! G48e6@G2d8f@bound-id-member? G2d8f@bound-id-member?) (set! G48e5@G2d8d@distinct-bound-ids? G2d8d@distinct-bound-ids?) (set! G48e4@G2d8b@valid-bound-ids? G2d8b@valid-bound-ids?) (set! G48e3@G2d89@free-id=? G2d89@free-id=?) (set! G48e2@G2d87@bound-id=? G2d87@bound-id=?) (set! G48e1@G2d85@same-marks? G2d85@same-marks?) (set! G48e0@G2d83@id->sym G2d83@id->sym) (set! G48df@G2d81@id? G2d81@id?) (set! G48de@G2d7f@syntax->list G2d7f@syntax->list) (set! G48dd@G2d7d@syntax-cdr G2d7d@syntax-cdr) (set! G48dc@G2d7b@syntax-car G2d7b@syntax-car) (set! G48db@G2d79@syntax-list? G2d79@syntax-list?) (set! G48da@G2d77@syntax-null? G2d77@syntax-null?) (set! G48d9@G2d75@syntax-vector? G2d75@syntax-vector?) (set! G48d8@G2d73@syntax-pair? G2d73@syntax-pair?) (set! G48d7@G2d71@syntax-vector->list G2d71@syntax-vector->list) (set! G48d6@G2d6f@syntax-kind? G2d6f@syntax-kind?) (set! G48d5@G2d6d@add-subst G2d6d@add-subst) (set! G48d4@G2d6b@add-mark G2d6b@add-mark) (set! G48d3@G2d69@mkstx G2d69@mkstx) (set! G48d2@G2d67@join-wraps G2d67@join-wraps) (set! G48d1@G2d65@anti-mark? G2d65@anti-mark?) (set! G48d0@G2d63@anti-mark G2d63@anti-mark) (set! G48cf@G2d61@gen-mark G2d61@gen-mark) (set! G48ce@G2d5f@datum->stx G2d5f@datum->stx) (set! G48cd@G2d5d@rp G2d5d@rp) (set! G48cc@G2d5b@set-stx-ae*! G2d5b@set-stx-ae*!) (set! G48cb@G2d59@set-stx-subst*! G2d59@set-stx-subst*!) (set! G48ca@G2d57@set-stx-mark*! G2d57@set-stx-mark*!) (set! G48c9@G2d55@set-stx-expr! G2d55@set-stx-expr!) (set! G48c8@G2d53@stx-ae* G2d53@stx-ae*) (set! G48c7@G2d51@stx-subst* G2d51@stx-subst*) (set! G48c6@G2d4f@stx-mark* G2d4f@stx-mark*) (set! G48c5@G2d4d@stx-expr G2d4d@stx-expr) (set! G48c4@G2d4b@make-stx G2d4b@make-stx) (set! G48c3@G2d49@stx? G2d49@stx?) (set! G48c2@G2d44@G2d3c G2d44@G2d3c) (set! G48c1@G2d42@G2d3d G2d42@G2d3d) (set! G48c0@G2d40@G2d3b G2d40@G2d3b) (set! G48bf@G2d3a@make-full-rib G2d3a@make-full-rib) (set! G48be@G2d38@unseal-rib! G2d38@unseal-rib!) (set! G48bd@G2d36@seal-rib! G2d36@seal-rib!) (set! G48bc@G2d34@make-rib-map G2d34@make-rib-map) (set! G48bb@G2d32@extend-rib! G2d32@extend-rib!) (set! G48ba@G2d30@make-empty-rib G2d30@make-empty-rib) (set! G48b9@G2d2e@set-rib-sealed/freq! G2d2e@set-rib-sealed/freq!) (set! G48b8@G2d2c@set-rib-label*! G2d2c@set-rib-label*!) (set! G48b7@G2d2a@set-rib-mark**! G2d2a@set-rib-mark**!) (set! G48b6@G2d28@set-rib-sym*! G2d28@set-rib-sym*!) (set! G48b5@G2d26@rib-sealed/freq G2d26@rib-sealed/freq) (set! G48b4@G2d24@rib-label* G2d24@rib-label*) (set! G48b3@G2d22@rib-mark** G2d22@rib-mark**) (set! G48b2@G2d20@rib-sym* G2d20@rib-sym*) (set! G48b1@G2d1e@make-rib G2d1e@make-rib) (set! G48b0@G2d1c@rib? G2d1c@rib?) (set! G48af@G2d17@G2d0f G2d17@G2d0f) (set! G48ae@G2d15@G2d10 G2d15@G2d10) (set! G48ad@G2d13@G2d0e G2d13@G2d0e) (set! G48ac@G2d0d@gen-define-label G2d0d@gen-define-label) (set! G48ab@G2d0b@gen-define-label+loc G2d0b@gen-define-label+loc) (set! G48aa@G2d09@gen-top-level-label G2d09@gen-top-level-label) (set! G48a9@G2d07@gen-label G2d07@gen-label) (set! G48a8@G2d05@gen-global G2d05@gen-global) (set! G48a7@G2d03@gen-lexical G2d03@gen-lexical) (set! G48a6@G2d01@top-marked? G2d01@top-marked?) (set! G48a5@G2cff@top-mark* G2cff@top-mark*) (set! G48a4@G2cfa@set-union G2cfa@set-union) (set! G48a3@G2cf8@set-cons G2cf8@set-cons) (G2b76@G2a04@current-library-expander G3093@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G49b0@G49ab G49b2@G49ad G49b4@G49ac G49b9@&condition? G49bb@make-&condition G49bd@&condition-rtd G49bf@&condition-rcd G49c7@G49c2 G49c9@G49c4 G49cb@G49c3 G49d0@G49c1 G49d2@make-message-condition G49d4@G49c0 G49d6@message-condition? G49d8@condition-message G49df@G49da G49e1@G49dc G49e3@G49db G49e8@G49d9 G49ea@make-warning G49ec@warning? G49f3@G49ee G49f5@G49f0 G49f7@G49ef G49fc@G49ed G49fe@make-serious-condition G4a00@serious-condition? G4a07@G4a02 G4a09@G4a04 G4a0b@G4a03 G4a10@G4a01 G4a12@make-error G4a14@error? G4a1b@G4a16 G4a1d@G4a18 G4a1f@G4a17 G4a24@G4a15 G4a26@make-violation G4a28@violation? G4a2f@G4a2a G4a31@G4a2c G4a33@G4a2b G4a38@G4a29 G4a3a@make-assertion-violation G4a3c@assertion-violation? G4a44@G4a3f G4a46@G4a41 G4a48@G4a40 G4a4d@G4a3e G4a4f@make-irritants-condition G4a51@G4a3d G4a53@irritants-condition? G4a55@condition-irritants G4a5d@G4a58 G4a5f@G4a5a G4a61@G4a59 G4a66@G4a57 G4a68@make-who-condition G4a6a@G4a56 G4a6c@who-condition? G4a6e@condition-who G4a75@G4a70 G4a77@G4a72 G4a79@G4a71 G4a7e@G4a6f G4a80@make-non-continuable-violation G4a82@non-continuable-violation? G4a89@G4a84 G4a8b@G4a86 G4a8d@G4a85 G4a92@G4a83 G4a94@make-implementation-restriction-violation G4a96@implementation-restriction-violation? G4a9d@G4a98 G4a9f@G4a9a G4aa1@G4a99 G4aa6@G4a97 G4aa8@make-lexical-violation G4aaa@lexical-violation? G4ab3@G4aae G4ab5@G4ab0 G4ab7@G4aaf G4abc@G4aad G4abe@make-syntax-violation G4ac0@G4aab G4ac2@G4aac G4ac4@syntax-violation? G4ac6@syntax-violation-form G4ac8@syntax-violation-subform G4acf@G4aca G4ad1@G4acc G4ad3@G4acb G4ad8@G4ac9 G4ada@make-undefined-violation G4adc@undefined-violation?) (begin (set! G49b0@G49ab (make-record-type-descriptor '&condition '#f 'G49ae '#f '#f '#())) (set! G49b2@G49ad '#f) (set! G49b4@G49ac (make-record-constructor-descriptor G49b0@G49ab '#f G49b2@G49ad)) (set! G49b9@&condition? (record-predicate G49b0@G49ab)) (set! G49bb@make-&condition (record-constructor G49b4@G49ac)) (set! G49bd@&condition-rtd G49b0@G49ab) (set! G49bf@&condition-rcd G49b4@G49ac) (set! G49c7@G49c2 (make-record-type-descriptor '&message G49b0@G49ab 'G49c5 '#f '#f '#((immutable message)))) (set! G49c9@G49c4 '#f) (set! G49cb@G49c3 (make-record-constructor-descriptor G49c7@G49c2 G49b4@G49ac G49c9@G49c4)) (set! G49d0@G49c1 (record-predicate G49c7@G49c2)) (set! G49d2@make-message-condition (record-constructor G49cb@G49c3)) (set! G49d4@G49c0 (record-accessor G49c7@G49c2 '0)) (set! G49d6@message-condition? (condition-predicate G49c7@G49c2)) (set! G49d8@condition-message (condition-accessor G49c7@G49c2 G49d4@G49c0)) (set! G49df@G49da (make-record-type-descriptor '&warning G49b0@G49ab 'G49dd '#f '#f '#())) (set! G49e1@G49dc '#f) (set! G49e3@G49db (make-record-constructor-descriptor G49df@G49da G49b4@G49ac G49e1@G49dc)) (set! G49e8@G49d9 (record-predicate G49df@G49da)) (set! G49ea@make-warning (record-constructor G49e3@G49db)) (set! G49ec@warning? (condition-predicate G49df@G49da)) (set! G49f3@G49ee (make-record-type-descriptor '&serious G49b0@G49ab 'G49f1 '#f '#f '#())) (set! G49f5@G49f0 '#f) (set! G49f7@G49ef (make-record-constructor-descriptor G49f3@G49ee G49b4@G49ac G49f5@G49f0)) (set! G49fc@G49ed (record-predicate G49f3@G49ee)) (set! G49fe@make-serious-condition (record-constructor G49f7@G49ef)) (set! G4a00@serious-condition? (condition-predicate G49f3@G49ee)) (set! G4a07@G4a02 (make-record-type-descriptor '&error G49f3@G49ee 'G4a05 '#f '#f '#())) (set! G4a09@G4a04 '#f) (set! G4a0b@G4a03 (make-record-constructor-descriptor G4a07@G4a02 G49f7@G49ef G4a09@G4a04)) (set! G4a10@G4a01 (record-predicate G4a07@G4a02)) (set! G4a12@make-error (record-constructor G4a0b@G4a03)) (set! G4a14@error? (condition-predicate G4a07@G4a02)) (set! G4a1b@G4a16 (make-record-type-descriptor '&violation G49f3@G49ee 'G4a19 '#f '#f '#())) (set! G4a1d@G4a18 '#f) (set! G4a1f@G4a17 (make-record-constructor-descriptor G4a1b@G4a16 G49f7@G49ef G4a1d@G4a18)) (set! G4a24@G4a15 (record-predicate G4a1b@G4a16)) (set! G4a26@make-violation (record-constructor G4a1f@G4a17)) (set! G4a28@violation? (condition-predicate G4a1b@G4a16)) (set! G4a2f@G4a2a (make-record-type-descriptor '&assertion G4a1b@G4a16 'G4a2d '#f '#f '#())) (set! G4a31@G4a2c '#f) (set! G4a33@G4a2b (make-record-constructor-descriptor G4a2f@G4a2a G4a1f@G4a17 G4a31@G4a2c)) (set! G4a38@G4a29 (record-predicate G4a2f@G4a2a)) (set! G4a3a@make-assertion-violation (record-constructor G4a33@G4a2b)) (set! G4a3c@assertion-violation? (condition-predicate G4a2f@G4a2a)) (set! G4a44@G4a3f (make-record-type-descriptor '&irritants G49b0@G49ab 'G4a42 '#f '#f '#((immutable irritants)))) (set! G4a46@G4a41 '#f) (set! G4a48@G4a40 (make-record-constructor-descriptor G4a44@G4a3f G49b4@G49ac G4a46@G4a41)) (set! G4a4d@G4a3e (record-predicate G4a44@G4a3f)) (set! G4a4f@make-irritants-condition (record-constructor G4a48@G4a40)) (set! G4a51@G4a3d (record-accessor G4a44@G4a3f '0)) (set! G4a53@irritants-condition? (condition-predicate G4a44@G4a3f)) (set! G4a55@condition-irritants (condition-accessor G4a44@G4a3f G4a51@G4a3d)) (set! G4a5d@G4a58 (make-record-type-descriptor '&who G49b0@G49ab 'G4a5b '#f '#f '#((immutable who)))) (set! G4a5f@G4a5a '#f) (set! G4a61@G4a59 (make-record-constructor-descriptor G4a5d@G4a58 G49b4@G49ac G4a5f@G4a5a)) (set! G4a66@G4a57 (record-predicate G4a5d@G4a58)) (set! G4a68@make-who-condition (record-constructor G4a61@G4a59)) (set! G4a6a@G4a56 (record-accessor G4a5d@G4a58 '0)) (set! G4a6c@who-condition? (condition-predicate G4a5d@G4a58)) (set! G4a6e@condition-who (condition-accessor G4a5d@G4a58 G4a6a@G4a56)) (set! G4a75@G4a70 (make-record-type-descriptor '&non-continuable G4a1b@G4a16 'G4a73 '#f '#f '#())) (set! G4a77@G4a72 '#f) (set! G4a79@G4a71 (make-record-constructor-descriptor G4a75@G4a70 G4a1f@G4a17 G4a77@G4a72)) (set! G4a7e@G4a6f (record-predicate G4a75@G4a70)) (set! G4a80@make-non-continuable-violation (record-constructor G4a79@G4a71)) (set! G4a82@non-continuable-violation? (condition-predicate G4a75@G4a70)) (set! G4a89@G4a84 (make-record-type-descriptor '&implementation-restriction G4a1b@G4a16 'G4a87 '#f '#f '#())) (set! G4a8b@G4a86 '#f) (set! G4a8d@G4a85 (make-record-constructor-descriptor G4a89@G4a84 G4a1f@G4a17 G4a8b@G4a86)) (set! G4a92@G4a83 (record-predicate G4a89@G4a84)) (set! G4a94@make-implementation-restriction-violation (record-constructor G4a8d@G4a85)) (set! G4a96@implementation-restriction-violation? (condition-predicate G4a89@G4a84)) (set! G4a9d@G4a98 (make-record-type-descriptor '&lexical G4a1b@G4a16 'G4a9b '#f '#f '#())) (set! G4a9f@G4a9a '#f) (set! G4aa1@G4a99 (make-record-constructor-descriptor G4a9d@G4a98 G4a1f@G4a17 G4a9f@G4a9a)) (set! G4aa6@G4a97 (record-predicate G4a9d@G4a98)) (set! G4aa8@make-lexical-violation (record-constructor G4aa1@G4a99)) (set! G4aaa@lexical-violation? (condition-predicate G4a9d@G4a98)) (set! G4ab3@G4aae (make-record-type-descriptor '&syntax G4a1b@G4a16 'G4ab1 '#f '#f '#((immutable form) (immutable subform)))) (set! G4ab5@G4ab0 '#f) (set! G4ab7@G4aaf (make-record-constructor-descriptor G4ab3@G4aae G4a1f@G4a17 G4ab5@G4ab0)) (set! G4abc@G4aad (record-predicate G4ab3@G4aae)) (set! G4abe@make-syntax-violation (record-constructor G4ab7@G4aaf)) (set! G4ac0@G4aab (record-accessor G4ab3@G4aae '0)) (set! G4ac2@G4aac (record-accessor G4ab3@G4aae '1)) (set! G4ac4@syntax-violation? (condition-predicate G4ab3@G4aae)) (set! G4ac6@syntax-violation-form (condition-accessor G4ab3@G4aae G4ac0@G4aab)) (set! G4ac8@syntax-violation-subform (condition-accessor G4ab3@G4aae G4ac2@G4aac)) (set! G4acf@G4aca (make-record-type-descriptor '&undefined G4a1b@G4a16 'G4acd '#f '#f '#())) (set! G4ad1@G4acc '#f) (set! G4ad3@G4acb (make-record-constructor-descriptor G4acf@G4aca G4a1f@G4a17 G4ad1@G4acc)) (set! G4ad8@G4ac9 (record-predicate G4acf@G4aca)) (set! G4ada@make-undefined-violation (record-constructor G4ad3@G4acb)) (set! G4adc@undefined-violation? (condition-predicate G4acf@G4aca)) (begin (set! G4b3b@G4adc@undefined-violation? G4adc@undefined-violation?) (set! G4b3a@G4ada@make-undefined-violation G4ada@make-undefined-violation) (set! G4b39@G4ad8@G4ac9 G4ad8@G4ac9) (set! G4b38@G4ad3@G4acb G4ad3@G4acb) (set! G4b37@G4ad1@G4acc G4ad1@G4acc) (set! G4b36@G4acf@G4aca G4acf@G4aca) (set! G4b35@G4ac8@syntax-violation-subform G4ac8@syntax-violation-subform) (set! G4b34@G4ac6@syntax-violation-form G4ac6@syntax-violation-form) (set! G4b33@G4ac4@syntax-violation? G4ac4@syntax-violation?) (set! G4b32@G4ac2@G4aac G4ac2@G4aac) (set! G4b31@G4ac0@G4aab G4ac0@G4aab) (set! G4b30@G4abe@make-syntax-violation G4abe@make-syntax-violation) (set! G4b2f@G4abc@G4aad G4abc@G4aad) (set! G4b2e@G4ab7@G4aaf G4ab7@G4aaf) (set! G4b2d@G4ab5@G4ab0 G4ab5@G4ab0) (set! G4b2c@G4ab3@G4aae G4ab3@G4aae) (set! G4b2b@G4aaa@lexical-violation? G4aaa@lexical-violation?) (set! G4b2a@G4aa8@make-lexical-violation G4aa8@make-lexical-violation) (set! G4b29@G4aa6@G4a97 G4aa6@G4a97) (set! G4b28@G4aa1@G4a99 G4aa1@G4a99) (set! G4b27@G4a9f@G4a9a G4a9f@G4a9a) (set! G4b26@G4a9d@G4a98 G4a9d@G4a98) (set! G4b25@G4a96@implementation-restriction-violation? G4a96@implementation-restriction-violation?) (set! G4b24@G4a94@make-implementation-restriction-violation G4a94@make-implementation-restriction-violation) (set! G4b23@G4a92@G4a83 G4a92@G4a83) (set! G4b22@G4a8d@G4a85 G4a8d@G4a85) (set! G4b21@G4a8b@G4a86 G4a8b@G4a86) (set! G4b20@G4a89@G4a84 G4a89@G4a84) (set! G4b1f@G4a82@non-continuable-violation? G4a82@non-continuable-violation?) (set! G4b1e@G4a80@make-non-continuable-violation G4a80@make-non-continuable-violation) (set! G4b1d@G4a7e@G4a6f G4a7e@G4a6f) (set! G4b1c@G4a79@G4a71 G4a79@G4a71) (set! G4b1b@G4a77@G4a72 G4a77@G4a72) (set! G4b1a@G4a75@G4a70 G4a75@G4a70) (set! G4b19@G4a6e@condition-who G4a6e@condition-who) (set! G4b18@G4a6c@who-condition? G4a6c@who-condition?) (set! G4b17@G4a6a@G4a56 G4a6a@G4a56) (set! G4b16@G4a68@make-who-condition G4a68@make-who-condition) (set! G4b15@G4a66@G4a57 G4a66@G4a57) (set! G4b14@G4a61@G4a59 G4a61@G4a59) (set! G4b13@G4a5f@G4a5a G4a5f@G4a5a) (set! G4b12@G4a5d@G4a58 G4a5d@G4a58) (set! G4b11@G4a55@condition-irritants G4a55@condition-irritants) (set! G4b10@G4a53@irritants-condition? G4a53@irritants-condition?) (set! G4b0f@G4a51@G4a3d G4a51@G4a3d) (set! G4b0e@G4a4f@make-irritants-condition G4a4f@make-irritants-condition) (set! G4b0d@G4a4d@G4a3e G4a4d@G4a3e) (set! G4b0c@G4a48@G4a40 G4a48@G4a40) (set! G4b0b@G4a46@G4a41 G4a46@G4a41) (set! G4b0a@G4a44@G4a3f G4a44@G4a3f) (set! G4b09@G4a3c@assertion-violation? G4a3c@assertion-violation?) (set! G4b08@G4a3a@make-assertion-violation G4a3a@make-assertion-violation) (set! G4b07@G4a38@G4a29 G4a38@G4a29) (set! G4b06@G4a33@G4a2b G4a33@G4a2b) (set! G4b05@G4a31@G4a2c G4a31@G4a2c) (set! G4b04@G4a2f@G4a2a G4a2f@G4a2a) (set! G4b03@G4a28@violation? G4a28@violation?) (set! G4b02@G4a26@make-violation G4a26@make-violation) (set! G4b01@G4a24@G4a15 G4a24@G4a15) (set! G4b00@G4a1f@G4a17 G4a1f@G4a17) (set! G4aff@G4a1d@G4a18 G4a1d@G4a18) (set! G4afe@G4a1b@G4a16 G4a1b@G4a16) (set! G4afd@G4a14@error? G4a14@error?) (set! G4afc@G4a12@make-error G4a12@make-error) (set! G4afb@G4a10@G4a01 G4a10@G4a01) (set! G4afa@G4a0b@G4a03 G4a0b@G4a03) (set! G4af9@G4a09@G4a04 G4a09@G4a04) (set! G4af8@G4a07@G4a02 G4a07@G4a02) (set! G4af7@G4a00@serious-condition? G4a00@serious-condition?) (set! G4af6@G49fe@make-serious-condition G49fe@make-serious-condition) (set! G4af5@G49fc@G49ed G49fc@G49ed) (set! G4af4@G49f7@G49ef G49f7@G49ef) (set! G4af3@G49f5@G49f0 G49f5@G49f0) (set! G4af2@G49f3@G49ee G49f3@G49ee) (set! G4af1@G49ec@warning? G49ec@warning?) (set! G4af0@G49ea@make-warning G49ea@make-warning) (set! G4aef@G49e8@G49d9 G49e8@G49d9) (set! G4aee@G49e3@G49db G49e3@G49db) (set! G4aed@G49e1@G49dc G49e1@G49dc) (set! G4aec@G49df@G49da G49df@G49da) (set! G4aeb@G49d8@condition-message G49d8@condition-message) (set! G4aea@G49d6@message-condition? G49d6@message-condition?) (set! G4ae9@G49d4@G49c0 G49d4@G49c0) (set! G4ae8@G49d2@make-message-condition G49d2@make-message-condition) (set! G4ae7@G49d0@G49c1 G49d0@G49c1) (set! G4ae6@G49cb@G49c3 G49cb@G49c3) (set! G4ae5@G49c9@G49c4 G49c9@G49c4) (set! G4ae4@G49c7@G49c2 G49c7@G49c2) (set! G4ae3@G49bf@&condition-rcd G49bf@&condition-rcd) (set! G4ae2@G49bd@&condition-rtd G49bd@&condition-rtd) (set! G4ae1@G49bb@make-&condition G49bb@make-&condition) (set! G4ae0@G49b9@&condition? G49b9@&condition?) (set! G4adf@G49b4@G49ac G49b4@G49ac) (set! G4ade@G49b2@G49ad G49b2@G49ad) (set! G4add@G49b0@G49ab G49b0@G49ab)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4b43@G4b3e G4b45@G4b40 G4b47@G4b3f G4b4c@G4b3d G4b4e@make-i/o-error G4b50@i/o-error? G4b57@G4b52 G4b59@G4b54 G4b5b@G4b53 G4b60@G4b51 G4b62@make-i/o-read-error G4b64@i/o-read-error? G4b6b@G4b66 G4b6d@G4b68 G4b6f@G4b67 G4b74@G4b65 G4b76@make-i/o-write-error G4b78@i/o-write-error? G4b80@G4b7b G4b82@G4b7d G4b84@G4b7c G4b89@G4b7a G4b8b@make-i/o-invalid-position-error G4b8d@G4b79 G4b8f@i/o-invalid-position-error? G4b91@i/o-error-position G4b99@G4b94 G4b9b@G4b96 G4b9d@G4b95 G4ba2@G4b93 G4ba4@make-i/o-filename-error G4ba6@G4b92 G4ba8@i/o-filename-error? G4baa@i/o-error-filename G4bb1@G4bac G4bb3@G4bae G4bb5@G4bad G4bba@G4bab G4bbc@make-i/o-file-protection-error G4bbe@i/o-file-protection-error? G4bc5@G4bc0 G4bc7@G4bc2 G4bc9@G4bc1 G4bce@G4bbf G4bd0@make-i/o-file-is-read-only-error G4bd2@i/o-file-is-read-only-error? G4bd9@G4bd4 G4bdb@G4bd6 G4bdd@G4bd5 G4be2@G4bd3 G4be4@make-i/o-file-already-exists-error G4be6@i/o-file-already-exists-error? G4bed@G4be8 G4bef@G4bea G4bf1@G4be9 G4bf6@G4be7 G4bf8@make-i/o-file-does-not-exist-error G4bfa@i/o-file-does-not-exist-error? G4c02@G4bfd G4c04@G4bff G4c06@G4bfe G4c0b@G4bfc G4c0d@make-i/o-port-error G4c0f@G4bfb G4c11@i/o-port-error? G4c13@i/o-error-port G4c1a@G4c15 G4c1c@G4c17 G4c1e@G4c16 G4c23@G4c14 G4c25@make-i/o-decoding-error G4c27@i/o-decoding-error? G4c2f@G4c2a G4c31@G4c2c G4c33@G4c2b G4c38@G4c29 G4c3a@make-i/o-encoding-error G4c3c@G4c28 G4c3e@i/o-encoding-error? G4c40@i/o-encoding-error-char) (begin (set! G4b43@G4b3e (make-record-type-descriptor '&i/o &error-rtd 'G4b41 '#f '#f '#())) (set! G4b45@G4b40 '#f) (set! G4b47@G4b3f (make-record-constructor-descriptor G4b43@G4b3e &error-rcd G4b45@G4b40)) (set! G4b4c@G4b3d (record-predicate G4b43@G4b3e)) (set! G4b4e@make-i/o-error (record-constructor G4b47@G4b3f)) (set! G4b50@i/o-error? (condition-predicate G4b43@G4b3e)) (set! G4b57@G4b52 (make-record-type-descriptor '&i/o-read G4b43@G4b3e 'G4b55 '#f '#f '#())) (set! G4b59@G4b54 '#f) (set! G4b5b@G4b53 (make-record-constructor-descriptor G4b57@G4b52 G4b47@G4b3f G4b59@G4b54)) (set! G4b60@G4b51 (record-predicate G4b57@G4b52)) (set! G4b62@make-i/o-read-error (record-constructor G4b5b@G4b53)) (set! G4b64@i/o-read-error? (condition-predicate G4b57@G4b52)) (set! G4b6b@G4b66 (make-record-type-descriptor '&i/o-write G4b43@G4b3e 'G4b69 '#f '#f '#())) (set! G4b6d@G4b68 '#f) (set! G4b6f@G4b67 (make-record-constructor-descriptor G4b6b@G4b66 G4b47@G4b3f G4b6d@G4b68)) (set! G4b74@G4b65 (record-predicate G4b6b@G4b66)) (set! G4b76@make-i/o-write-error (record-constructor G4b6f@G4b67)) (set! G4b78@i/o-write-error? (condition-predicate G4b6b@G4b66)) (set! G4b80@G4b7b (make-record-type-descriptor '&i/o-invalid-position G4b43@G4b3e 'G4b7e '#f '#f '#((immutable position)))) (set! G4b82@G4b7d '#f) (set! G4b84@G4b7c (make-record-constructor-descriptor G4b80@G4b7b G4b47@G4b3f G4b82@G4b7d)) (set! G4b89@G4b7a (record-predicate G4b80@G4b7b)) (set! G4b8b@make-i/o-invalid-position-error (record-constructor G4b84@G4b7c)) (set! G4b8d@G4b79 (record-accessor G4b80@G4b7b '0)) (set! G4b8f@i/o-invalid-position-error? (condition-predicate G4b80@G4b7b)) (set! G4b91@i/o-error-position (condition-accessor G4b80@G4b7b G4b8d@G4b79)) (set! G4b99@G4b94 (make-record-type-descriptor '&i/o-filename G4b43@G4b3e 'G4b97 '#f '#f '#((immutable filename)))) (set! G4b9b@G4b96 '#f) (set! G4b9d@G4b95 (make-record-constructor-descriptor G4b99@G4b94 G4b47@G4b3f G4b9b@G4b96)) (set! G4ba2@G4b93 (record-predicate G4b99@G4b94)) (set! G4ba4@make-i/o-filename-error (record-constructor G4b9d@G4b95)) (set! G4ba6@G4b92 (record-accessor G4b99@G4b94 '0)) (set! G4ba8@i/o-filename-error? (condition-predicate G4b99@G4b94)) (set! G4baa@i/o-error-filename (condition-accessor G4b99@G4b94 G4ba6@G4b92)) (set! G4bb1@G4bac (make-record-type-descriptor '&i/o-file-protection G4b43@G4b3e 'G4baf '#f '#f '#())) (set! G4bb3@G4bae '#f) (set! G4bb5@G4bad (make-record-constructor-descriptor G4bb1@G4bac G4b47@G4b3f G4bb3@G4bae)) (set! G4bba@G4bab (record-predicate G4bb1@G4bac)) (set! G4bbc@make-i/o-file-protection-error (record-constructor G4bb5@G4bad)) (set! G4bbe@i/o-file-protection-error? (condition-predicate G4bb1@G4bac)) (set! G4bc5@G4bc0 (make-record-type-descriptor '&i/o-file-is-read-only G4bb1@G4bac 'G4bc3 '#f '#f '#())) (set! G4bc7@G4bc2 '#f) (set! G4bc9@G4bc1 (make-record-constructor-descriptor G4bc5@G4bc0 G4bb5@G4bad G4bc7@G4bc2)) (set! G4bce@G4bbf (record-predicate G4bc5@G4bc0)) (set! G4bd0@make-i/o-file-is-read-only-error (record-constructor G4bc9@G4bc1)) (set! G4bd2@i/o-file-is-read-only-error? (condition-predicate G4bc5@G4bc0)) (set! G4bd9@G4bd4 (make-record-type-descriptor '&i/o-file-already-exists G4b99@G4b94 'G4bd7 '#f '#f '#())) (set! G4bdb@G4bd6 '#f) (set! G4bdd@G4bd5 (make-record-constructor-descriptor G4bd9@G4bd4 G4b9d@G4b95 G4bdb@G4bd6)) (set! G4be2@G4bd3 (record-predicate G4bd9@G4bd4)) (set! G4be4@make-i/o-file-already-exists-error (record-constructor G4bdd@G4bd5)) (set! G4be6@i/o-file-already-exists-error? (condition-predicate G4bd9@G4bd4)) (set! G4bed@G4be8 (make-record-type-descriptor '&i/o-file-does-not-exist G4b99@G4b94 'G4beb '#f '#f '#())) (set! G4bef@G4bea '#f) (set! G4bf1@G4be9 (make-record-constructor-descriptor G4bed@G4be8 G4b9d@G4b95 G4bef@G4bea)) (set! G4bf6@G4be7 (record-predicate G4bed@G4be8)) (set! G4bf8@make-i/o-file-does-not-exist-error (record-constructor G4bf1@G4be9)) (set! G4bfa@i/o-file-does-not-exist-error? (condition-predicate G4bed@G4be8)) (set! G4c02@G4bfd (make-record-type-descriptor '&i/o-port G4b43@G4b3e 'G4c00 '#f '#f '#((immutable port)))) (set! G4c04@G4bff '#f) (set! G4c06@G4bfe (make-record-constructor-descriptor G4c02@G4bfd G4b47@G4b3f G4c04@G4bff)) (set! G4c0b@G4bfc (record-predicate G4c02@G4bfd)) (set! G4c0d@make-i/o-port-error (record-constructor G4c06@G4bfe)) (set! G4c0f@G4bfb (record-accessor G4c02@G4bfd '0)) (set! G4c11@i/o-port-error? (condition-predicate G4c02@G4bfd)) (set! G4c13@i/o-error-port (condition-accessor G4c02@G4bfd G4c0f@G4bfb)) (set! G4c1a@G4c15 (make-record-type-descriptor '&i/o-decoding G4c02@G4bfd 'G4c18 '#f '#f '#())) (set! G4c1c@G4c17 '#f) (set! G4c1e@G4c16 (make-record-constructor-descriptor G4c1a@G4c15 G4c06@G4bfe G4c1c@G4c17)) (set! G4c23@G4c14 (record-predicate G4c1a@G4c15)) (set! G4c25@make-i/o-decoding-error (record-constructor G4c1e@G4c16)) (set! G4c27@i/o-decoding-error? (condition-predicate G4c1a@G4c15)) (set! G4c2f@G4c2a (make-record-type-descriptor '&i/o-encoding G4c02@G4bfd 'G4c2d '#f '#f '#((immutable char)))) (set! G4c31@G4c2c '#f) (set! G4c33@G4c2b (make-record-constructor-descriptor G4c2f@G4c2a G4c06@G4bfe G4c31@G4c2c)) (set! G4c38@G4c29 (record-predicate G4c2f@G4c2a)) (set! G4c3a@make-i/o-encoding-error (record-constructor G4c33@G4c2b)) (set! G4c3c@G4c28 (record-accessor G4c2f@G4c2a '0)) (set! G4c3e@i/o-encoding-error? (condition-predicate G4c2f@G4c2a)) (set! G4c40@i/o-encoding-error-char (condition-accessor G4c2f@G4c2a G4c3c@G4c28)) (begin (set! G4c90@G4c40@i/o-encoding-error-char G4c40@i/o-encoding-error-char) (set! G4c8f@G4c3e@i/o-encoding-error? G4c3e@i/o-encoding-error?) (set! G4c8e@G4c3c@G4c28 G4c3c@G4c28) (set! G4c8d@G4c3a@make-i/o-encoding-error G4c3a@make-i/o-encoding-error) (set! G4c8c@G4c38@G4c29 G4c38@G4c29) (set! G4c8b@G4c33@G4c2b G4c33@G4c2b) (set! G4c8a@G4c31@G4c2c G4c31@G4c2c) (set! G4c89@G4c2f@G4c2a G4c2f@G4c2a) (set! G4c88@G4c27@i/o-decoding-error? G4c27@i/o-decoding-error?) (set! G4c87@G4c25@make-i/o-decoding-error G4c25@make-i/o-decoding-error) (set! G4c86@G4c23@G4c14 G4c23@G4c14) (set! G4c85@G4c1e@G4c16 G4c1e@G4c16) (set! G4c84@G4c1c@G4c17 G4c1c@G4c17) (set! G4c83@G4c1a@G4c15 G4c1a@G4c15) (set! G4c82@G4c13@i/o-error-port G4c13@i/o-error-port) (set! G4c81@G4c11@i/o-port-error? G4c11@i/o-port-error?) (set! G4c80@G4c0f@G4bfb G4c0f@G4bfb) (set! G4c7f@G4c0d@make-i/o-port-error G4c0d@make-i/o-port-error) (set! G4c7e@G4c0b@G4bfc G4c0b@G4bfc) (set! G4c7d@G4c06@G4bfe G4c06@G4bfe) (set! G4c7c@G4c04@G4bff G4c04@G4bff) (set! G4c7b@G4c02@G4bfd G4c02@G4bfd) (set! G4c7a@G4bfa@i/o-file-does-not-exist-error? G4bfa@i/o-file-does-not-exist-error?) (set! G4c79@G4bf8@make-i/o-file-does-not-exist-error G4bf8@make-i/o-file-does-not-exist-error) (set! G4c78@G4bf6@G4be7 G4bf6@G4be7) (set! G4c77@G4bf1@G4be9 G4bf1@G4be9) (set! G4c76@G4bef@G4bea G4bef@G4bea) (set! G4c75@G4bed@G4be8 G4bed@G4be8) (set! G4c74@G4be6@i/o-file-already-exists-error? G4be6@i/o-file-already-exists-error?) (set! G4c73@G4be4@make-i/o-file-already-exists-error G4be4@make-i/o-file-already-exists-error) (set! G4c72@G4be2@G4bd3 G4be2@G4bd3) (set! G4c71@G4bdd@G4bd5 G4bdd@G4bd5) (set! G4c70@G4bdb@G4bd6 G4bdb@G4bd6) (set! G4c6f@G4bd9@G4bd4 G4bd9@G4bd4) (set! G4c6e@G4bd2@i/o-file-is-read-only-error? G4bd2@i/o-file-is-read-only-error?) (set! G4c6d@G4bd0@make-i/o-file-is-read-only-error G4bd0@make-i/o-file-is-read-only-error) (set! G4c6c@G4bce@G4bbf G4bce@G4bbf) (set! G4c6b@G4bc9@G4bc1 G4bc9@G4bc1) (set! G4c6a@G4bc7@G4bc2 G4bc7@G4bc2) (set! G4c69@G4bc5@G4bc0 G4bc5@G4bc0) (set! G4c68@G4bbe@i/o-file-protection-error? G4bbe@i/o-file-protection-error?) (set! G4c67@G4bbc@make-i/o-file-protection-error G4bbc@make-i/o-file-protection-error) (set! G4c66@G4bba@G4bab G4bba@G4bab) (set! G4c65@G4bb5@G4bad G4bb5@G4bad) (set! G4c64@G4bb3@G4bae G4bb3@G4bae) (set! G4c63@G4bb1@G4bac G4bb1@G4bac) (set! G4c62@G4baa@i/o-error-filename G4baa@i/o-error-filename) (set! G4c61@G4ba8@i/o-filename-error? G4ba8@i/o-filename-error?) (set! G4c60@G4ba6@G4b92 G4ba6@G4b92) (set! G4c5f@G4ba4@make-i/o-filename-error G4ba4@make-i/o-filename-error) (set! G4c5e@G4ba2@G4b93 G4ba2@G4b93) (set! G4c5d@G4b9d@G4b95 G4b9d@G4b95) (set! G4c5c@G4b9b@G4b96 G4b9b@G4b96) (set! G4c5b@G4b99@G4b94 G4b99@G4b94) (set! G4c5a@G4b91@i/o-error-position G4b91@i/o-error-position) (set! G4c59@G4b8f@i/o-invalid-position-error? G4b8f@i/o-invalid-position-error?) (set! G4c58@G4b8d@G4b79 G4b8d@G4b79) (set! G4c57@G4b8b@make-i/o-invalid-position-error G4b8b@make-i/o-invalid-position-error) (set! G4c56@G4b89@G4b7a G4b89@G4b7a) (set! G4c55@G4b84@G4b7c G4b84@G4b7c) (set! G4c54@G4b82@G4b7d G4b82@G4b7d) (set! G4c53@G4b80@G4b7b G4b80@G4b7b) (set! G4c52@G4b78@i/o-write-error? G4b78@i/o-write-error?) (set! G4c51@G4b76@make-i/o-write-error G4b76@make-i/o-write-error) (set! G4c50@G4b74@G4b65 G4b74@G4b65) (set! G4c4f@G4b6f@G4b67 G4b6f@G4b67) (set! G4c4e@G4b6d@G4b68 G4b6d@G4b68) (set! G4c4d@G4b6b@G4b66 G4b6b@G4b66) (set! G4c4c@G4b64@i/o-read-error? G4b64@i/o-read-error?) (set! G4c4b@G4b62@make-i/o-read-error G4b62@make-i/o-read-error) (set! G4c4a@G4b60@G4b51 G4b60@G4b51) (set! G4c49@G4b5b@G4b53 G4b5b@G4b53) (set! G4c48@G4b59@G4b54 G4b59@G4b54) (set! G4c47@G4b57@G4b52 G4b57@G4b52) (set! G4c46@G4b50@i/o-error? G4b50@i/o-error?) (set! G4c45@G4b4e@make-i/o-error G4b4e@make-i/o-error) (set! G4c44@G4b4c@G4b3d G4b4c@G4b3d) (set! G4c43@G4b47@G4b3f G4b47@G4b3f) (set! G4c42@G4b45@G4b40 G4b45@G4b40) (set! G4c41@G4b43@G4b3e G4b43@G4b3e)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2941@G28e7@current-primitive-locations (lambda (G5056@x) ((lambda (G5058@t) (if G5058@t (cdr G5058@t) '#f)) (assq G5056@x '((syntax-error . G499c@G30a7@syntax-error) (syntax-dispatch . G4935@G2fc4@syntax-dispatch) (load . G4d25@G4c9f@load) (interaction-environment . G49a5@G30b9@interaction-environment) (make-variable-transformer . G48f5@G2dc2@make-variable-transformer) (identifier? . G49a0@G30af@identifier?) (generate-temporaries . G4998@G309f@generate-temporaries) (free-identifier=? . G4999@G30a1@free-identifier=?) (syntax->datum . G49a2@G30b3@syntax->datum) (datum->syntax . G49a1@G30b1@datum->syntax) (bound-identifier=? . G499a@G30a3@bound-identifier=?) (make-i/o-write-error . G4c51@G4b76@make-i/o-write-error) (make-i/o-read-error . G4c4b@G4b62@make-i/o-read-error) (make-i/o-port-error . G4c7f@G4c0d@make-i/o-port-error) (make-i/o-invalid-position-error . G4c57@G4b8b@make-i/o-invalid-position-error) (make-i/o-filename-error . G4c5f@G4ba4@make-i/o-filename-error) (make-i/o-file-protection-error . G4c67@G4bbc@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4c6d@G4bd0@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4c79@G4bf8@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4c73@G4be4@make-i/o-file-already-exists-error) (make-i/o-error . G4c45@G4b4e@make-i/o-error) (make-i/o-encoding-error . G4c8d@G4c3a@make-i/o-encoding-error) (make-i/o-decoding-error . G4c87@G4c25@make-i/o-decoding-error) (i/o-write-error? . G4c52@G4b78@i/o-write-error?) (i/o-read-error? . G4c4c@G4b64@i/o-read-error?) (i/o-port-error? . G4c81@G4c11@i/o-port-error?) (i/o-invalid-position-error? . G4c59@G4b8f@i/o-invalid-position-error?) (i/o-filename-error? . G4c61@G4ba8@i/o-filename-error?) (i/o-file-protection-error? . G4c68@G4bbe@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4c6e@G4bd2@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4c7a@G4bfa@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4c74@G4be6@i/o-file-already-exists-error?) (i/o-error? . G4c46@G4b50@i/o-error?) (i/o-error-port . G4c82@G4c13@i/o-error-port) (i/o-error-filename . G4c62@G4baa@i/o-error-filename) (i/o-encoding-error? . G4c8f@G4c3e@i/o-encoding-error?) (i/o-encoding-error-char . G4c90@G4c40@i/o-encoding-error-char) (i/o-decoding-error? . G4c88@G4c27@i/o-decoding-error?) (scheme-report-environment . G498f@G308d@scheme-report-environment) (null-environment . G498e@G308b@null-environment) (command-line . G4d22@G4c99@command-line) (eval . G4991@G3091@eval) (environment . G498d@G3089@environment) (who-condition? . G4b18@G4a6c@who-condition?) (warning? . G4af1@G49ec@warning?) (violation? . G4b03@G4a28@violation?) (undefined-violation? . G4b3b@G4adc@undefined-violation?) (syntax-violation? . G4b33@G4ac4@syntax-violation?) (syntax-violation-subform . G4b35@G4ac8@syntax-violation-subform) (syntax-violation-form . G4b34@G4ac6@syntax-violation-form) (syntax-violation . G499f@G30ad@syntax-violation) (serious-condition? . G4af7@G4a00@serious-condition?) (non-continuable-violation? . G4b1f@G4a82@non-continuable-violation?) (message-condition? . G4aea@G49d6@message-condition?) (make-who-condition . G4b16@G4a68@make-who-condition) (make-warning . G4af0@G49ea@make-warning) (make-violation . G4b02@G4a26@make-violation) (make-undefined-violation . G4b3a@G4ada@make-undefined-violation) (make-syntax-violation . G4b30@G4abe@make-syntax-violation) (make-serious-condition . G4af6@G49fe@make-serious-condition) (make-non-continuable-violation . G4b1e@G4a80@make-non-continuable-violation) (make-message-condition . G4ae8@G49d2@make-message-condition) (make-lexical-violation . G4b2a@G4aa8@make-lexical-violation) (make-irritants-condition . G4b0e@G4a4f@make-irritants-condition) (make-implementation-restriction-violation . G4b24@G4a94@make-implementation-restriction-violation) (make-error . G4afc@G4a12@make-error) (make-assertion-violation . G4b08@G4a3a@make-assertion-violation) (lexical-violation? . G4b2b@G4aaa@lexical-violation?) (irritants-condition? . G4b10@G4a53@irritants-condition?) (implementation-restriction-violation? . G4b25@G4a96@implementation-restriction-violation?) (error? . G4afd@G4a14@error?) (condition-who . G4b19@G4a6e@condition-who) (condition-message . G4aeb@G49d8@condition-message) (condition-irritants . G4b11@G4a55@condition-irritants) (assertion-violation? . G4b09@G4a3c@assertion-violation?)))))) (G2b7e@G2a14@install-library 'G502a '(mosh interaction) '() '() '() '() '((string-upcase . G4fad) (string-titlecase . G4fac) (string-normalize-nfkd . G4fab) (string-normalize-nfkc . G4faa) (string-normalize-nfd . G4fa9) (string-normalize-nfc . G4fa8) (string-foldcase . G4fa7) (string-downcase . G4fa6) (string-ci>? . G4fa5) (string-ci>=? . G4fa4) (string-ci=? . G4fa3) (string-ci<? . G4fa2) (string-ci<=? . G4fa1) (char-whitespace? . G4fa0) (char-upper-case? . G4f9f) (char-title-case? . G4f9e) (char-numeric? . G4f9d) (char-lower-case? . G4f9c) (char-general-category . G4f9b) (char-upcase . G4f9a) (char-titlecase . G4f99) (char-foldcase . G4f98) (char-downcase . G4f97) (char-ci>? . G4f96) (char-ci>=? . G4f95) (char-ci=? . G4f94) (char-ci<? . G4f93) (char-ci<=? . G4f92) (char-alphabetic? . G4f91) (make-variable-transformer . G2dc1) (identifier? . G30ae) (generate-temporaries . G309e) (free-identifier=? . G30a0) (syntax->datum . G30b2) (datum->syntax . G30b0) (bound-identifier=? . G30a2) (record-type-descriptor? . G4f90) (record-predicate . G4f8f) (record-mutator . G4f8e) (record-constructor . G4f8d) (record-accessor . G4f8c) (make-record-type-descriptor . G4f8b) (make-record-constructor-descriptor . G4f8a) (record? . G4f89) (record-type-uid . G4f88) (record-type-sealed? . G4f87) (record-type-parent . G4f86) (record-type-opaque? . G4f85) (record-type-name . G4f84) (record-type-generative? . G4f83) (record-type-field-names . G4f82) (record-rtd . G4f81) (record-field-mutable? . G4f80) (delete-file . G4f7f) (file-exists? . G4f7e) (vector-sort! . G4f7d) (vector-sort . G4f7c) (list-sort . G4f7b) (symbol-hash . G4f7a) (string-ci-hash . G4f79) (string-hash . G4f78) (equal-hash . G4f77) (hashtable-equivalence-function . G4f76) (make-hashtable . G4f75) (hashtable-hash-function . G4f74) (make-eqv-hashtable . G4f73) (make-eq-hashtable . G4f72) (hashtable? . G4f71) (hashtable-update! . G4f70) (hashtable-size . G4f6f) (hashtable-set! . G4f6e) (hashtable-ref . G4f6d) (hashtable-mutable? . G4f6c) (hashtable-keys . G4f6b) (hashtable-entries . G4f6a) (hashtable-delete! . G4f69) (hashtable-copy . G4f68) (hashtable-contains? . G4f67) (hashtable-clear! . G4f66) (call-with-output-file . G4f65) (call-with-input-file . G4f64) (write-char . G4f63) (write . G4f62) (with-output-to-file . G4f61) (with-input-from-file . G4f60) (read-char . G4f5f) (read . G4f5e) (peek-char . G4f5d) (open-output-file . G4f5c) (open-input-file . G4f5b) (newline . G4f5a) (display . G4f59) (close-output-port . G4f58) (close-input-port . G4f57) (eof-object? . G4f56) (eof-object . G4f55) (current-error-port . G4f54) (current-output-port . G4f53) (current-input-port . G4f52) (output-port? . G4f51) (input-port? . G4f50) (utf-8-codec . G4f4f) (utf-16-codec . G4f4e) (transcoder-error-handling-mode . G4f4d) (transcoder-eol-style . G4f4c) (transcoder-codec . G4f4b) (transcoded-port . G4f4a) (textual-port? . G4f49) (string->bytevector . G4f48) (standard-output-port . G4f47) (standard-input-port . G4f46) (standard-error-port . G4f45) (set-port-position! . G4f44) (put-u8 . G4f43) (put-string . G4f42) (put-datum . G4f41) (put-char . G4f40) (put-bytevector . G4f3f) (port? . G4f3e) (port-transcoder . G4f3d) (port-position . G4f3c) (port-has-set-port-position!? . G4f3b) (port-has-port-position? . G4f3a) (port-eof? . G4f39) (output-port-buffer-mode . G4f38) (open-string-output-port . G4f37) (open-string-input-port . G4f36) (open-file-output-port . G4f35) (open-file-input/output-port . G4f34) (open-file-input-port . G4f33) (open-bytevector-output-port . G4f32) (open-bytevector-input-port . G4f31) (native-transcoder . G4f30) (native-eol-style . G4f2f) (make-transcoder . G4f2e) (latin-1-codec . G4f2d) (make-i/o-write-error . G4b75) (make-i/o-read-error . G4b61) (make-i/o-port-error . G4c0c) (make-i/o-invalid-position-error . G4b8a) (make-i/o-filename-error . G4ba3) (make-i/o-file-protection-error . G4bbb) (make-i/o-file-is-read-only-error . G4bcf) (make-i/o-file-does-not-exist-error . G4bf7) (make-i/o-file-already-exists-error . G4be3) (make-i/o-error . G4b4d) (make-i/o-encoding-error . G4c39) (make-i/o-decoding-error . G4c24) (make-custom-textual-output-port . G4f2c) (make-custom-textual-input/output-port . G4f2b) (make-custom-textual-input-port . G4f2a) (make-custom-binary-output-port . G4f29) (make-custom-binary-input/output-port . G4f28) (make-custom-binary-input-port . G4f27) (make-bytevector . G4f26) (lookahead-u8 . G4f25) (lookahead-char . G4f24) (i/o-write-error? . G4b77) (i/o-read-error? . G4b63) (i/o-port-error? . G4c10) (i/o-invalid-position-error? . G4b8e) (i/o-filename-error? . G4ba7) (i/o-file-protection-error? . G4bbd) (i/o-file-is-read-only-error? . G4bd1) (i/o-file-does-not-exist-error? . G4bf9) (i/o-file-already-exists-error? . G4be5) (i/o-error? . G4b4f) (i/o-error-port . G4c12) (i/o-error-filename . G4ba9) (i/o-encoding-error? . G4c3d) (i/o-encoding-error-char . G4c3f) (i/o-decoding-error? . G4c26) (get-u8 . G4f23) (get-string-n! . G4f22) (get-string-n . G4f21) (get-string-all . G4f20) (get-line . G4f1f) (get-datum . G4f1e) (get-char . G4f1d) (get-bytevector-some . G4f1c) (get-bytevector-n! . G4f1b) (get-bytevector-n . G4f1a) (get-bytevector-all . G4f19) (flush-output-port . G4f18) (close-port . G4f17) (exit . G4f10) (command-line . G4c98) (string-fill! . G4f0f) (string-set! . G4f0e) (set-cdr! . G4f0d) (set-car! . G4f0c) (remove . G4f0b) (remv . G4f0a) (remp . G4f09) (remq . G4f08) (partition . G4f07) (memv . G4f06) (memq . G4f05) (memp . G4f04) (member . G4f03) (exists . G4f02) (for-all . G4f01) (fold-right . G4f00) (fold-left . G4eff) (find . G4efe) (filter . G4efd) (cons* . G4efc) (assv . G4efb) (assq . G4efa) (assp . G4ef9) (assoc . G4ef8) (call-with-string-output-port . G4ef7) (call-with-port . G4ef6) (call-with-bytevector-output-port . G4ef5) (bytevector->string . G4ef4) (buffer-mode? . G4ef3) (binary-port? . G4ef2) (with-exception-handler . G4ef1) (raise-continuable . G4ef0) (raise . G4eef) (eval . G3090) (environment . G3088) (make-enumeration . G4eee) (enum-set=? . G4eed) (enum-set-universe . G4eec) (enum-set-union . G4eeb) (enum-set-subset? . G4eea) (enum-set-projection . G4ee9) (enum-set-member? . G4ee8) (enum-set-intersection . G4ee7) (enum-set-indexer . G4ee6) (enum-set-difference . G4ee5) (enum-set-constructor . G4ee4) (enum-set-complement . G4ee3) (enum-set->list . G4ee2) (who-condition? . G4a6b) (warning? . G49eb) (violation? . G4a27) (undefined-violation? . G4adb) (syntax-violation? . G4ac3) (syntax-violation-subform . G4ac7) (syntax-violation-form . G4ac5) (syntax-violation . G30ac) (simple-conditions . G4ee1) (serious-condition? . G49ff) (non-continuable-violation? . G4a81) (message-condition? . G49d5) (make-who-condition . G4a67) (make-warning . G49e9) (make-violation . G4a25) (make-undefined-violation . G4ad9) (make-syntax-violation . G4abd) (make-serious-condition . G49fd) (make-non-continuable-violation . G4a7f) (make-message-condition . G49d1) (make-lexical-violation . G4aa7) (make-irritants-condition . G4a4e) (make-implementation-restriction-violation . G4a93) (make-error . G4a11) (make-assertion-violation . G4a39) (lexical-violation? . G4aa9) (irritants-condition? . G4a52) (implementation-restriction-violation? . G4a95) (error? . G4a13) (condition-who . G4a6d) (condition-predicate . G4ee0) (condition-message . G49d7) (condition-irritants . G4a54) (condition-accessor . G4edf) (condition . G4ede) (assertion-violation? . G4a3b) (condition? . G4edd) (utf32->string . G4edc) (utf16->string . G4edb) (utf8->string . G4eda) (uint-list->bytevector . G4ed9) (u8-list->bytevector . G4ed8) (string->utf8 . G4ed7) (string->utf32 . G4ed6) (string->utf16 . G4ed5) (sint-list->bytevector . G4ed4) (native-endianness . G4ed3) (bytevector? . G4ed2) (bytevector=? . G4ed1) (bytevector-uint-set! . G4ed0) (bytevector-uint-ref . G4ecf) (bytevector-u8-set! . G4ece) (bytevector-u8-ref . G4ecd) (bytevector-u64-set! . G4ecc) (bytevector-u64-ref . G4ecb) (bytevector-u64-native-set! . G4eca) (bytevector-u64-native-ref . G4ec9) (bytevector-u32-set! . G4ec8) (bytevector-u32-ref . G4ec7) (bytevector-u32-native-set! . G4ec6) (bytevector-u32-native-ref . G4ec5) (bytevector-u16-set! . G4ec4) (bytevector-u16-ref . G4ec3) (bytevector-u16-native-set! . G4ec2) (bytevector-u16-native-ref . G4ec1) (bytevector-sint-set! . G4ec0) (bytevector-sint-ref . G4ebf) (bytevector-s8-set! . G4ebe) (bytevector-s8-ref . G4ebd) (bytevector-s64-set! . G4ebc) (bytevector-s64-ref . G4ebb) (bytevector-s64-native-set! . G4eba) (bytevector-s64-native-ref . G4eb9) (bytevector-s32-set! . G4eb8) (bytevector-s32-ref . G4eb7) (bytevector-s32-native-set! . G4eb6) (bytevector-s32-native-ref . G4eb5) (bytevector-s16-set! . G4eb4) (bytevector-s16-ref . G4eb3) (bytevector-s16-native-set! . G4eb2) (bytevector-s16-native-ref . G4eb1) (bytevector-length . G4eb0) (bytevector-ieee-single-ref . G4eaf) (bytevector-ieee-single-native-set! . G4eae) (bytevector-ieee-single-native-ref . G4ead) (bytevector-ieee-double-ref . G4eac) (bytevector-ieee-double-native-set! . G4eab) (bytevector-ieee-double-native-ref . G4eaa) (bytevector-fill! . G4ea9) (bytevector-copy! . G4ea8) (bytevector-copy . G4ea7) (bytevector->uint-list . G4ea6) (bytevector->u8-list . G4ea5) (bytevector->sint-list . G4ea4) (no-nans-violation? . G4ea3) (no-infinities-violation? . G4ea2) (make-no-nans-violation . G4ea1) (make-no-infinities-violation . G4ea0) (real->flonum . G4e9f) (flzero? . G4e9e) (fltruncate . G4e9d) (fltan . G4e9c) (flsqrt . G4e9b) (flsin . G4e9a) (flround . G4e99) (flpositive? . G4e98) (flonum? . G4e97) (flodd? . G4e96) (flnumerator . G4e95) (flnegative? . G4e94) (flnan? . G4e93) (flmod0 . G4e92) (flmod . G4e91) (flmin . G4e90) (flmax . G4e8f) (fllog . G4e8e) (flinteger? . G4e8d) (flinfinite? . G4e8c) (flfloor . G4e8b) (flfinite? . G4e8a) (flexpt . G4e89) (flexp . G4e88) (fleven? . G4e87) (fldiv0-and-mod0 . G4e86) (fldiv0 . G4e85) (fldiv-and-mod . G4e84) (fldiv . G4e83) (fldenominator . G4e82) (flcos . G4e81) (flceiling . G4e80) (flatan . G4e7f) (flasin . G4e7e) (flacos . G4e7d) (flabs . G4e7c) (fl>? . G4e7b) (fl>=? . G4e7a) (fl=? . G4e79) (fl<? . G4e78) (fl<=? . G4e77) (fl/ . G4e76) (fl- . G4e75) (fl+ . G4e74) (fl* . G4e73) (fixnum->flonum . G4e72) (fxzero? . G4e71) (fxxor . G4e70) (fxrotate-bit-field . G4e6f) (fxreverse-bit-field . G4e6e) (fxpositive? . G4e6d) (fxodd? . G4e6c) (fxnot . G4e6b) (fxnegative? . G4e6a) (fxmod0 . G4e69) (fxmod . G4e68) (fxmin . G4e67) (fxmax . G4e66) (fxlength . G4e65) (fxior . G4e64) (fxif . G4e63) (fxfirst-bit-set . G4e62) (fxeven? . G4e61) (fxdiv0-and-mod0 . G4e60) (fxdiv0 . G4e5f) (fxdiv-and-mod . G4e5e) (fxdiv . G4e5d) (fxcopy-bit-field . G4e5c) (fxcopy-bit . G4e5b) (fxbit-set? . G4e5a) (fxbit-field . G4e59) (fxbit-count . G4e58) (fxarithmetic-shift-right . G4e57) (fxarithmetic-shift-left . G4e56) (fxarithmetic-shift . G4e55) (fxand . G4e54) (fx>? . G4e53) (fx>=? . G4e52) (fx=? . G4e51) (fx<? . G4e50) (fx<=? . G4e4f) (fx-/carry . G4e4e) (fx- . G4e4d) (fx+/carry . G4e4c) (fx+ . G4e4b) (fx*/carry . G4e4a) (fx* . G4e49) (greatest-fixnum . G4e48) (least-fixnum . G4e47) (fixnum-width . G4e46) (fixnum? . G4e45) (bitwise-rotate-bit-field . G4e44) (bitwise-reverse-bit-field . G4e43) (bitwise-length . G4e42) (bitwise-if . G4e41) (bitwise-first-bit-set . G4e40) (bitwise-copy-bit-field . G4e3f) (bitwise-copy-bit . G4e3e) (bitwise-bit-set? . G4e3d) (bitwise-bit-field . G4e3c) (bitwise-bit-count . G4e3b) (bitwise-xor . G4e3a) (bitwise-ior . G4e39) (bitwise-and . G4e38) (bitwise-not . G4e37) (bitwise-arithmetic-shift-right . G4e36) (bitwise-arithmetic-shift-left . G4e35) (bitwise-arithmetic-shift . G4e34) (zero? . G4e33) (vector? . G4e32) (vector-set! . G4e31) (vector-ref . G4e30) (vector-map . G4e2f) (vector-length . G4e2e) (vector-for-each . G4e2d) (vector-fill! . G4e2c) (vector->list . G4e2b) (vector . G4e2a) (values . G4e29) (truncate . G4e28) (tan . G4e27) (symbol? . G4e26) (symbol=? . G4e25) (symbol->string . G4e24) (substring . G4e23) (string? . G4e22) (string>? . G4e21) (string>=? . G4e20) (string=? . G4e1f) (string<? . G4e1e) (string<=? . G4e1d) (string-ref . G4e1c) (string-length . G4e1b) (string-for-each . G4e1a) (string-copy . G4e19) (string-append . G4e18) (string->symbol . G4e17) (string->number . G4e16) (string->list . G4e15) (string . G4e14) (sqrt . G4e13) (sin . G4e12) (round . G4e11) (reverse . G4e10) (real? . G4e0f) (real-valued? . G4e0e) (real-part . G4e0d) (rationalize . G4e0c) (rational? . G4e0b) (rational-valued? . G4e0a) (procedure? . G4e09) (positive? . G4e08) (pair? . G4e07) (odd? . G4e06) (numerator . G4e05) (number? . G4e04) (number->string . G4e03) (null? . G4e02) (not . G4e01) (negative? . G4e00) (nan? . G4dff) (min . G4dfe) (max . G4dfd) (map . G4dfc) (make-vector . G4dfb) (make-string . G4dfa) (make-rectangular . G4df9) (make-polar . G4df8) (magnitude . G4df7) (log . G4df6) (list? . G4df5) (list-tail . G4df4) (list-ref . G4df3) (list->vector . G4df2) (list->string . G4df1) (list . G4df0) (length . G4def) (lcm . G4dee) (integer? . G4ded) (integer-valued? . G4dec) (integer->char . G4deb) (infinite? . G4dea) (inexact? . G4de9) (inexact . G4de8) (imag-part . G4de7) (gcd . G4de6) (for-each . G4de5) (floor . G4de4) (finite? . G4de3) (expt . G4de2) (exp . G4de1) (exact? . G4de0) (exact-integer-sqrt . G4ddf) (exact . G4dde) (even? . G4ddd) (error . G4ddc) (eqv? . G4ddb) (equal? . G4dda) (eq? . G4dd9) (dynamic-wind . G4dd8) (div0-and-mod0 . G4dd7) (mod0 . G4dd6) (div0 . G4dd5) (div-and-mod . G4dd4) (mod . G4dd3) (div . G4dd2) (denominator . G4dd1) (cos . G4dd0) (cons . G4dcf) (complex? . G4dce) (char? . G4dcd) (char>? . G4dcc) (char>=? . G4dcb) (char=? . G4dca) (char<? . G4dc9) (char<=? . G4dc8) (char->integer . G4dc7) (ceiling . G4dc6) (call-with-values . G4dc5) (call/cc . G4dc4) (call-with-current-continuation . G4dc3) (cddddr . G4dc2) (cdddar . G4dc1) (cddadr . G4dc0) (cddaar . G4dbf) (cdaddr . G4dbe) (cdadar . G4dbd) (cdaadr . G4dbc) (cdaaar . G4dbb) (cadddr . G4dba) (caddar . G4db9) (cadadr . G4db8) (cadaar . G4db7) (caaddr . G4db6) (caadar . G4db5) (caaadr . G4db4) (caaaar . G4db3) (cdddr . G4db2) (cddar . G4db1) (cdadr . G4db0) (cdaar . G4daf) (caddr . G4dae) (cadar . G4dad) (caadr . G4dac) (caaar . G4dab) (cddr . G4daa) (cdar . G4da9) (cadr . G4da8) (caar . G4da7) (cdr . G4da6) (car . G4da5) (boolean? . G4da4) (boolean=? . G4da3) (atan . G4da2) (assertion-violation . G4da1) (asin . G4da0) (apply . G4d9f) (append . G4d9e) (angle . G4d9d) (acos . G4d9c) (abs . G4d9b) (/ . G4d9a) (* . G4d99) (- . G4d98) (+ . G4d97) (>= . G4d96) (> . G4d95) (= . G4d94) (<= . G4d93) (< . G4d92) (library . G4d91) (export . G4d90) (&no-nans . G4d8f) (&no-infinities . G4d8e) (&i/o-encoding . G4d8d) (&i/o-decoding . G4d8c) (&i/o-port . G4d8b) (&i/o-file-does-not-exist . G4d8a) (&i/o-file-already-exists . G4d89) (&i/o-file-is-read-only . G4d88) (&i/o-file-protection . G4d87) (&i/o-filename . G4d86) (&i/o-invalid-position . G4d85) (&i/o-write . G4d84) (&i/o-read . G4d83) (&i/o . G4d82) (&undefined . G4d81) (&syntax . G4d80) (&lexical . G4d7f) (&implementation-restriction . G4d7e) (&non-continuable . G4d7d) (&who . G4d7c) (&irritants . G4d7b) (&assertion . G4d7a) (&violation . G4d79) (&error . G4d78) (&serious . G4d77) (&warning . G4d76) (&message . G4d75) (&condition . G4d74) (define-condition-type . G4d73) (define-enumeration . G4d72) (define-record-type . G4d71) (parent-rtd . G4d70) (nongenerative . G4d6f) (opaque . G4d6e) (sealed . G4d6d) (protocol . G4d6c) (parent . G4d6b) (immutable . G4d6a) (mutable . G4d69) (fields . G4d68) (error-handling-mode . G4d67) (file-options . G4d66) (buffer-mode . G4d65) (eol-style . G4d64) (guard . G4d63) (unsyntax-splicing . G4d60) (unsyntax . G4d5f) (unquote-splicing . G4d5e) (unquote . G4d5d) (_ . G4d5c) (else . G4d5b) (=> . G4d5a) (... . G4d59) (assert . G4d58) (endianness . G4d57) (or . G4d54) (and . G4d53) (do . G4d52) (cond . G4d51) (let* . G4d50) (let . G4d4f) (let*-values . G4d4e) (let-values . G4d4d) (identifier-syntax . G4d4c) (with-syntax . G4d4b) (quasisyntax . G4d4a) (quasiquote . G4d49) (syntax-rules . G4d48) (include . G4d47) (record-constructor-descriptor . G4d45) (record-type-descriptor . G4d44) (case . G4d43) (unless . G4d41) (when . G4d40) (if . G4d3f) (letrec* . G4d3e) (letrec . G4d3d) (case-lambda . G4d3b) (lambda . G4d3a) (syntax . G4d39) (syntax-case . G4d38) (quote . G4d37) (letrec-syntax . G4d35) (let-syntax . G4d34) (set! . G4d33) (import . G4d32) (begin . G4d31) (define-syntax . G4d2f) (define . G4d2e)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G502b '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4d5e) (unquote . G4d5d) (delay . G4d56) (or . G4d54) (and . G4d53) (do . G4d52) (cond . G4d51) (let* . G4d50) (let . G4d4f) (quasiquote . G4d49) (syntax-rules . G4d48) (case . G4d43) (if . G4d3f) (letrec . G4d3d) (lambda . G4d3a) (quote . G4d37) (letrec-syntax . G4d35) (let-syntax . G4d34) (set! . G4d33) (begin . G4d31) (define-syntax . G4d2f) (define . G4d2e)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G502c '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G4fa5) (string-ci>=? . G4fa4) (string-ci=? . G4fa3) (string-ci<? . G4fa2) (string-ci<=? . G4fa1) (char-whitespace? . G4fa0) (char-upper-case? . G4f9f) (char-numeric? . G4f9d) (char-lower-case? . G4f9c) (char-upcase . G4f9a) (char-downcase . G4f97) (char-ci>? . G4f96) (char-ci>=? . G4f95) (char-ci=? . G4f94) (char-ci<? . G4f93) (char-ci<=? . G4f92) (char-alphabetic? . G4f91) (call-with-output-file . G4f65) (call-with-input-file . G4f64) (write-char . G4f63) (write . G4f62) (with-output-to-file . G4f61) (with-input-from-file . G4f60) (read-char . G4f5f) (read . G4f5e) (peek-char . G4f5d) (open-output-file . G4f5c) (open-input-file . G4f5b) (newline . G4f5a) (display . G4f59) (close-output-port . G4f58) (close-input-port . G4f57) (eof-object . G4f55) (current-output-port . G4f53) (current-input-port . G4f52) (output-port? . G4f51) (input-port? . G4f50) (scheme-report-environment . G308c) (quotient . G4f16) (null-environment . G308a) (remainder . G4f15) (modulo . G4f14) (inexact->exact . G4f13) (force . G4f12) (exact->inexact . G4f11) (string-fill! . G4f0f) (string-set! . G4f0e) (set-cdr! . G4f0d) (set-car! . G4f0c) (memv . G4f06) (memq . G4f05) (member . G4f03) (assv . G4efb) (assq . G4efa) (assoc . G4ef8) (eval . G3090) (zero? . G4e33) (vector? . G4e32) (vector-set! . G4e31) (vector-ref . G4e30) (vector-length . G4e2e) (vector-fill! . G4e2c) (vector->list . G4e2b) (vector . G4e2a) (values . G4e29) (truncate . G4e28) (tan . G4e27) (symbol? . G4e26) (symbol->string . G4e24) (substring . G4e23) (string? . G4e22) (string>? . G4e21) (string>=? . G4e20) (string=? . G4e1f) (string<? . G4e1e) (string<=? . G4e1d) (string-ref . G4e1c) (string-length . G4e1b) (string-copy . G4e19) (string-append . G4e18) (string->symbol . G4e17) (string->number . G4e16) (string->list . G4e15) (string . G4e14) (sqrt . G4e13) (sin . G4e12) (round . G4e11) (reverse . G4e10) (real? . G4e0f) (real-part . G4e0d) (rationalize . G4e0c) (rational? . G4e0b) (procedure? . G4e09) (positive? . G4e08) (pair? . G4e07) (odd? . G4e06) (numerator . G4e05) (number? . G4e04) (number->string . G4e03) (not . G4e01) (negative? . G4e00) (min . G4dfe) (max . G4dfd) (map . G4dfc) (make-vector . G4dfb) (make-string . G4dfa) (make-rectangular . G4df9) (make-polar . G4df8) (magnitude . G4df7) (log . G4df6) (list? . G4df5) (list-tail . G4df4) (list-ref . G4df3) (list->vector . G4df2) (list->string . G4df1) (list . G4df0) (length . G4def) (lcm . G4dee) (integer? . G4ded) (integer->char . G4deb) (inexact? . G4de9) (imag-part . G4de7) (gcd . G4de6) (for-each . G4de5) (floor . G4de4) (expt . G4de2) (exp . G4de1) (exact? . G4de0) (even? . G4ddd) (eqv? . G4ddb) (equal? . G4dda) (eq? . G4dd9) (dynamic-wind . G4dd8) (denominator . G4dd1) (cos . G4dd0) (cons . G4dcf) (complex? . G4dce) (char? . G4dcd) (char>? . G4dcc) (char>=? . G4dcb) (char=? . G4dca) (char<? . G4dc9) (char<=? . G4dc8) (char->integer . G4dc7) (ceiling . G4dc6) (call-with-values . G4dc5) (call-with-current-continuation . G4dc3) (cddddr . G4dc2) (cdddar . G4dc1) (cddadr . G4dc0) (cddaar . G4dbf) (cdaddr . G4dbe) (cdadar . G4dbd) (cdaadr . G4dbc) (cdaaar . G4dbb) (cadddr . G4dba) (caddar . G4db9) (cadadr . G4db8) (cadaar . G4db7) (caaddr . G4db6) (caadar . G4db5) (caaadr . G4db4) (caaaar . G4db3) (cdddr . G4db2) (cddar . G4db1) (cdadr . G4db0) (cdaar . G4daf) (caddr . G4dae) (cadar . G4dad) (caadr . G4dac) (caaar . G4dab) (cddr . G4daa) (cdar . G4da9) (cadr . G4da8) (caar . G4da7) (cdr . G4da6) (car . G4da5) (boolean? . G4da4) (atan . G4da2) (asin . G4da0) (apply . G4d9f) (append . G4d9e) (angle . G4d9d) (acos . G4d9c) (abs . G4d9b) (/ . G4d9a) (* . G4d99) (- . G4d98) (+ . G4d97) (>= . G4d96) (> . G4d95) (= . G4d94) (<= . G4d93) (< . G4d92) (unquote-splicing . G4d5e) (unquote . G4d5d) (delay . G4d56) (or . G4d54) (and . G4d53) (do . G4d52) (cond . G4d51) (let* . G4d50) (let . G4d4f) (quasiquote . G4d49) (syntax-rules . G4d48) (case . G4d43) (if . G4d3f) (letrec . G4d3d) (lambda . G4d3a) (quote . G4d37) (letrec-syntax . G4d35) (let-syntax . G4d34) (set! . G4d33) (begin . G4d31) (define-syntax . G4d2f) (define . G4d2e)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G502d '(psyntax modules) '() '() '() '() '((module . G4d30)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G502e '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G502f '(rnrs) '(6) '() '() '() '((regexp? . G4fea) (string-upcase . G4fad) (string-titlecase . G4fac) (string-normalize-nfkd . G4fab) (string-normalize-nfkc . G4faa) (string-normalize-nfd . G4fa9) (string-normalize-nfc . G4fa8) (string-foldcase . G4fa7) (string-downcase . G4fa6) (string-ci>? . G4fa5) (string-ci>=? . G4fa4) (string-ci=? . G4fa3) (string-ci<? . G4fa2) (string-ci<=? . G4fa1) (char-whitespace? . G4fa0) (char-upper-case? . G4f9f) (char-title-case? . G4f9e) (char-numeric? . G4f9d) (char-lower-case? . G4f9c) (char-general-category . G4f9b) (char-upcase . G4f9a) (char-titlecase . G4f99) (char-foldcase . G4f98) (char-downcase . G4f97) (char-ci>? . G4f96) (char-ci>=? . G4f95) (char-ci=? . G4f94) (char-ci<? . G4f93) (char-ci<=? . G4f92) (char-alphabetic? . G4f91) (make-variable-transformer . G2dc1) (identifier? . G30ae) (generate-temporaries . G309e) (free-identifier=? . G30a0) (syntax->datum . G30b2) (datum->syntax . G30b0) (bound-identifier=? . G30a2) (record-type-descriptor? . G4f90) (record-predicate . G4f8f) (record-mutator . G4f8e) (record-constructor . G4f8d) (record-accessor . G4f8c) (make-record-type-descriptor . G4f8b) (make-record-constructor-descriptor . G4f8a) (record? . G4f89) (record-type-uid . G4f88) (record-type-sealed? . G4f87) (record-type-parent . G4f86) (record-type-opaque? . G4f85) (record-type-name . G4f84) (record-type-generative? . G4f83) (record-type-field-names . G4f82) (record-rtd . G4f81) (record-field-mutable? . G4f80) (delete-file . G4f7f) (file-exists? . G4f7e) (vector-sort! . G4f7d) (vector-sort . G4f7c) (list-sort . G4f7b) (symbol-hash . G4f7a) (string-ci-hash . G4f79) (string-hash . G4f78) (equal-hash . G4f77) (hashtable-equivalence-function . G4f76) (make-hashtable . G4f75) (hashtable-hash-function . G4f74) (make-eqv-hashtable . G4f73) (make-eq-hashtable . G4f72) (hashtable? . G4f71) (hashtable-update! . G4f70) (hashtable-size . G4f6f) (hashtable-set! . G4f6e) (hashtable-ref . G4f6d) (hashtable-mutable? . G4f6c) (hashtable-keys . G4f6b) (hashtable-entries . G4f6a) (hashtable-delete! . G4f69) (hashtable-copy . G4f68) (hashtable-contains? . G4f67) (hashtable-clear! . G4f66) (call-with-output-file . G4f65) (call-with-input-file . G4f64) (write-char . G4f63) (write . G4f62) (with-output-to-file . G4f61) (with-input-from-file . G4f60) (read-char . G4f5f) (read . G4f5e) (peek-char . G4f5d) (open-output-file . G4f5c) (open-input-file . G4f5b) (newline . G4f5a) (display . G4f59) (close-output-port . G4f58) (close-input-port . G4f57) (eof-object? . G4f56) (eof-object . G4f55) (current-error-port . G4f54) (current-output-port . G4f53) (current-input-port . G4f52) (output-port? . G4f51) (input-port? . G4f50) (utf-8-codec . G4f4f) (utf-16-codec . G4f4e) (transcoder-error-handling-mode . G4f4d) (transcoder-eol-style . G4f4c) (transcoder-codec . G4f4b) (transcoded-port . G4f4a) (textual-port? . G4f49) (string->bytevector . G4f48) (standard-output-port . G4f47) (standard-input-port . G4f46) (standard-error-port . G4f45) (set-port-position! . G4f44) (put-u8 . G4f43) (put-string . G4f42) (put-datum . G4f41) (put-char . G4f40) (put-bytevector . G4f3f) (port? . G4f3e) (port-transcoder . G4f3d) (port-position . G4f3c) (port-has-set-port-position!? . G4f3b) (port-has-port-position? . G4f3a) (port-eof? . G4f39) (output-port-buffer-mode . G4f38) (open-string-output-port . G4f37) (open-string-input-port . G4f36) (open-file-output-port . G4f35) (open-file-input/output-port . G4f34) (open-file-input-port . G4f33) (open-bytevector-output-port . G4f32) (open-bytevector-input-port . G4f31) (native-transcoder . G4f30) (native-eol-style . G4f2f) (make-transcoder . G4f2e) (latin-1-codec . G4f2d) (make-i/o-write-error . G4b75) (make-i/o-read-error . G4b61) (make-i/o-port-error . G4c0c) (make-i/o-invalid-position-error . G4b8a) (make-i/o-filename-error . G4ba3) (make-i/o-file-protection-error . G4bbb) (make-i/o-file-is-read-only-error . G4bcf) (make-i/o-file-does-not-exist-error . G4bf7) (make-i/o-file-already-exists-error . G4be3) (make-i/o-error . G4b4d) (make-i/o-encoding-error . G4c39) (make-i/o-decoding-error . G4c24) (make-custom-textual-output-port . G4f2c) (make-custom-textual-input/output-port . G4f2b) (make-custom-textual-input-port . G4f2a) (make-custom-binary-output-port . G4f29) (make-custom-binary-input/output-port . G4f28) (make-custom-binary-input-port . G4f27) (make-bytevector . G4f26) (lookahead-u8 . G4f25) (lookahead-char . G4f24) (i/o-write-error? . G4b77) (i/o-read-error? . G4b63) (i/o-port-error? . G4c10) (i/o-invalid-position-error? . G4b8e) (i/o-filename-error? . G4ba7) (i/o-file-protection-error? . G4bbd) (i/o-file-is-read-only-error? . G4bd1) (i/o-file-does-not-exist-error? . G4bf9) (i/o-file-already-exists-error? . G4be5) (i/o-error? . G4b4f) (i/o-error-port . G4c12) (i/o-error-filename . G4ba9) (i/o-encoding-error? . G4c3d) (i/o-encoding-error-char . G4c3f) (i/o-decoding-error? . G4c26) (get-u8 . G4f23) (get-string-n! . G4f22) (get-string-n . G4f21) (get-string-all . G4f20) (get-line . G4f1f) (get-datum . G4f1e) (get-char . G4f1d) (get-bytevector-some . G4f1c) (get-bytevector-n! . G4f1b) (get-bytevector-n . G4f1a) (get-bytevector-all . G4f19) (flush-output-port . G4f18) (close-port . G4f17) (exit . G4f10) (command-line . G4c98) (remove . G4f0b) (remv . G4f0a) (remp . G4f09) (remq . G4f08) (partition . G4f07) (memv . G4f06) (memq . G4f05) (memp . G4f04) (member . G4f03) (exists . G4f02) (for-all . G4f01) (fold-right . G4f00) (fold-left . G4eff) (find . G4efe) (filter . G4efd) (cons* . G4efc) (assv . G4efb) (assq . G4efa) (assp . G4ef9) (assoc . G4ef8) (call-with-string-output-port . G4ef7) (call-with-port . G4ef6) (call-with-bytevector-output-port . G4ef5) (bytevector->string . G4ef4) (buffer-mode? . G4ef3) (binary-port? . G4ef2) (with-exception-handler . G4ef1) (raise-continuable . G4ef0) (raise . G4eef) (make-enumeration . G4eee) (enum-set=? . G4eed) (enum-set-universe . G4eec) (enum-set-union . G4eeb) (enum-set-subset? . G4eea) (enum-set-projection . G4ee9) (enum-set-member? . G4ee8) (enum-set-intersection . G4ee7) (enum-set-indexer . G4ee6) (enum-set-difference . G4ee5) (enum-set-constructor . G4ee4) (enum-set-complement . G4ee3) (enum-set->list . G4ee2) (who-condition? . G4a6b) (warning? . G49eb) (violation? . G4a27) (undefined-violation? . G4adb) (syntax-violation? . G4ac3) (syntax-violation-subform . G4ac7) (syntax-violation-form . G4ac5) (syntax-violation . G30ac) (simple-conditions . G4ee1) (serious-condition? . G49ff) (non-continuable-violation? . G4a81) (message-condition? . G49d5) (make-who-condition . G4a67) (make-warning . G49e9) (make-violation . G4a25) (make-undefined-violation . G4ad9) (make-syntax-violation . G4abd) (make-serious-condition . G49fd) (make-non-continuable-violation . G4a7f) (make-message-condition . G49d1) (make-lexical-violation . G4aa7) (make-irritants-condition . G4a4e) (make-implementation-restriction-violation . G4a93) (make-error . G4a11) (make-assertion-violation . G4a39) (lexical-violation? . G4aa9) (irritants-condition? . G4a52) (implementation-restriction-violation? . G4a95) (error? . G4a13) (condition-who . G4a6d) (condition-predicate . G4ee0) (condition-message . G49d7) (condition-irritants . G4a54) (condition-accessor . G4edf) (condition . G4ede) (assertion-violation? . G4a3b) (condition? . G4edd) (utf32->string . G4edc) (utf16->string . G4edb) (utf8->string . G4eda) (uint-list->bytevector . G4ed9) (u8-list->bytevector . G4ed8) (string->utf8 . G4ed7) (string->utf32 . G4ed6) (string->utf16 . G4ed5) (sint-list->bytevector . G4ed4) (native-endianness . G4ed3) (bytevector? . G4ed2) (bytevector=? . G4ed1) (bytevector-uint-set! . G4ed0) (bytevector-uint-ref . G4ecf) (bytevector-u8-set! . G4ece) (bytevector-u8-ref . G4ecd) (bytevector-u64-set! . G4ecc) (bytevector-u64-ref . G4ecb) (bytevector-u64-native-set! . G4eca) (bytevector-u64-native-ref . G4ec9) (bytevector-u32-set! . G4ec8) (bytevector-u32-ref . G4ec7) (bytevector-u32-native-set! . G4ec6) (bytevector-u32-native-ref . G4ec5) (bytevector-u16-set! . G4ec4) (bytevector-u16-ref . G4ec3) (bytevector-u16-native-set! . G4ec2) (bytevector-u16-native-ref . G4ec1) (bytevector-sint-set! . G4ec0) (bytevector-sint-ref . G4ebf) (bytevector-s8-set! . G4ebe) (bytevector-s8-ref . G4ebd) (bytevector-s64-set! . G4ebc) (bytevector-s64-ref . G4ebb) (bytevector-s64-native-set! . G4eba) (bytevector-s64-native-ref . G4eb9) (bytevector-s32-set! . G4eb8) (bytevector-s32-ref . G4eb7) (bytevector-s32-native-set! . G4eb6) (bytevector-s32-native-ref . G4eb5) (bytevector-s16-set! . G4eb4) (bytevector-s16-ref . G4eb3) (bytevector-s16-native-set! . G4eb2) (bytevector-s16-native-ref . G4eb1) (bytevector-length . G4eb0) (bytevector-ieee-single-ref . G4eaf) (bytevector-ieee-single-native-set! . G4eae) (bytevector-ieee-single-native-ref . G4ead) (bytevector-ieee-double-ref . G4eac) (bytevector-ieee-double-native-set! . G4eab) (bytevector-ieee-double-native-ref . G4eaa) (bytevector-fill! . G4ea9) (bytevector-copy! . G4ea8) (bytevector-copy . G4ea7) (bytevector->uint-list . G4ea6) (bytevector->u8-list . G4ea5) (bytevector->sint-list . G4ea4) (no-nans-violation? . G4ea3) (no-infinities-violation? . G4ea2) (make-no-nans-violation . G4ea1) (make-no-infinities-violation . G4ea0) (real->flonum . G4e9f) (flzero? . G4e9e) (fltruncate . G4e9d) (fltan . G4e9c) (flsqrt . G4e9b) (flsin . G4e9a) (flround . G4e99) (flpositive? . G4e98) (flonum? . G4e97) (flodd? . G4e96) (flnumerator . G4e95) (flnegative? . G4e94) (flnan? . G4e93) (flmod0 . G4e92) (flmod . G4e91) (flmin . G4e90) (flmax . G4e8f) (fllog . G4e8e) (flinteger? . G4e8d) (flinfinite? . G4e8c) (flfloor . G4e8b) (flfinite? . G4e8a) (flexpt . G4e89) (flexp . G4e88) (fleven? . G4e87) (fldiv0-and-mod0 . G4e86) (fldiv0 . G4e85) (fldiv-and-mod . G4e84) (fldiv . G4e83) (fldenominator . G4e82) (flcos . G4e81) (flceiling . G4e80) (flatan . G4e7f) (flasin . G4e7e) (flacos . G4e7d) (flabs . G4e7c) (fl>? . G4e7b) (fl>=? . G4e7a) (fl=? . G4e79) (fl<? . G4e78) (fl<=? . G4e77) (fl/ . G4e76) (fl- . G4e75) (fl+ . G4e74) (fl* . G4e73) (fixnum->flonum . G4e72) (fxzero? . G4e71) (fxxor . G4e70) (fxrotate-bit-field . G4e6f) (fxreverse-bit-field . G4e6e) (fxpositive? . G4e6d) (fxodd? . G4e6c) (fxnot . G4e6b) (fxnegative? . G4e6a) (fxmod0 . G4e69) (fxmod . G4e68) (fxmin . G4e67) (fxmax . G4e66) (fxlength . G4e65) (fxior . G4e64) (fxif . G4e63) (fxfirst-bit-set . G4e62) (fxeven? . G4e61) (fxdiv0-and-mod0 . G4e60) (fxdiv0 . G4e5f) (fxdiv-and-mod . G4e5e) (fxdiv . G4e5d) (fxcopy-bit-field . G4e5c) (fxcopy-bit . G4e5b) (fxbit-set? . G4e5a) (fxbit-field . G4e59) (fxbit-count . G4e58) (fxarithmetic-shift-right . G4e57) (fxarithmetic-shift-left . G4e56) (fxarithmetic-shift . G4e55) (fxand . G4e54) (fx>? . G4e53) (fx>=? . G4e52) (fx=? . G4e51) (fx<? . G4e50) (fx<=? . G4e4f) (fx-/carry . G4e4e) (fx- . G4e4d) (fx+/carry . G4e4c) (fx+ . G4e4b) (fx*/carry . G4e4a) (fx* . G4e49) (greatest-fixnum . G4e48) (least-fixnum . G4e47) (fixnum-width . G4e46) (fixnum? . G4e45) (bitwise-rotate-bit-field . G4e44) (bitwise-reverse-bit-field . G4e43) (bitwise-length . G4e42) (bitwise-if . G4e41) (bitwise-first-bit-set . G4e40) (bitwise-copy-bit-field . G4e3f) (bitwise-copy-bit . G4e3e) (bitwise-bit-set? . G4e3d) (bitwise-bit-field . G4e3c) (bitwise-bit-count . G4e3b) (bitwise-xor . G4e3a) (bitwise-ior . G4e39) (bitwise-and . G4e38) (bitwise-not . G4e37) (bitwise-arithmetic-shift-right . G4e36) (bitwise-arithmetic-shift-left . G4e35) (bitwise-arithmetic-shift . G4e34) (zero? . G4e33) (vector? . G4e32) (vector-set! . G4e31) (vector-ref . G4e30) (vector-map . G4e2f) (vector-length . G4e2e) (vector-for-each . G4e2d) (vector-fill! . G4e2c) (vector->list . G4e2b) (vector . G4e2a) (values . G4e29) (truncate . G4e28) (tan . G4e27) (symbol? . G4e26) (symbol=? . G4e25) (symbol->string . G4e24) (substring . G4e23) (string? . G4e22) (string>? . G4e21) (string>=? . G4e20) (string=? . G4e1f) (string<? . G4e1e) (string<=? . G4e1d) (string-ref . G4e1c) (string-length . G4e1b) (string-for-each . G4e1a) (string-copy . G4e19) (string-append . G4e18) (string->symbol . G4e17) (string->number . G4e16) (string->list . G4e15) (string . G4e14) (sqrt . G4e13) (sin . G4e12) (round . G4e11) (reverse . G4e10) (real? . G4e0f) (real-valued? . G4e0e) (real-part . G4e0d) (rationalize . G4e0c) (rational? . G4e0b) (rational-valued? . G4e0a) (procedure? . G4e09) (positive? . G4e08) (pair? . G4e07) (odd? . G4e06) (numerator . G4e05) (number? . G4e04) (number->string . G4e03) (null? . G4e02) (not . G4e01) (negative? . G4e00) (nan? . G4dff) (min . G4dfe) (max . G4dfd) (map . G4dfc) (make-vector . G4dfb) (make-string . G4dfa) (make-rectangular . G4df9) (make-polar . G4df8) (magnitude . G4df7) (log . G4df6) (list? . G4df5) (list-tail . G4df4) (list-ref . G4df3) (list->vector . G4df2) (list->string . G4df1) (list . G4df0) (length . G4def) (lcm . G4dee) (integer? . G4ded) (integer-valued? . G4dec) (integer->char . G4deb) (infinite? . G4dea) (inexact? . G4de9) (inexact . G4de8) (imag-part . G4de7) (gcd . G4de6) (for-each . G4de5) (floor . G4de4) (finite? . G4de3) (expt . G4de2) (exp . G4de1) (exact? . G4de0) (exact-integer-sqrt . G4ddf) (exact . G4dde) (even? . G4ddd) (error . G4ddc) (eqv? . G4ddb) (equal? . G4dda) (eq? . G4dd9) (dynamic-wind . G4dd8) (div0-and-mod0 . G4dd7) (mod0 . G4dd6) (div0 . G4dd5) (div-and-mod . G4dd4) (mod . G4dd3) (div . G4dd2) (denominator . G4dd1) (cos . G4dd0) (cons . G4dcf) (complex? . G4dce) (char? . G4dcd) (char>? . G4dcc) (char>=? . G4dcb) (char=? . G4dca) (char<? . G4dc9) (char<=? . G4dc8) (char->integer . G4dc7) (ceiling . G4dc6) (call-with-values . G4dc5) (call/cc . G4dc4) (call-with-current-continuation . G4dc3) (cddddr . G4dc2) (cdddar . G4dc1) (cddadr . G4dc0) (cddaar . G4dbf) (cdaddr . G4dbe) (cdadar . G4dbd) (cdaadr . G4dbc) (cdaaar . G4dbb) (cadddr . G4dba) (caddar . G4db9) (cadadr . G4db8) (cadaar . G4db7) (caaddr . G4db6) (caadar . G4db5) (caaadr . G4db4) (caaaar . G4db3) (cdddr . G4db2) (cddar . G4db1) (cdadr . G4db0) (cdaar . G4daf) (caddr . G4dae) (cadar . G4dad) (caadr . G4dac) (caaar . G4dab) (cddr . G4daa) (cdar . G4da9) (cadr . G4da8) (caar . G4da7) (cdr . G4da6) (car . G4da5) (boolean? . G4da4) (boolean=? . G4da3) (atan . G4da2) (assertion-violation . G4da1) (asin . G4da0) (apply . G4d9f) (append . G4d9e) (angle . G4d9d) (acos . G4d9c) (abs . G4d9b) (/ . G4d9a) (* . G4d99) (- . G4d98) (+ . G4d97) (>= . G4d96) (> . G4d95) (= . G4d94) (<= . G4d93) (< . G4d92) (&no-nans . G4d8f) (&no-infinities . G4d8e) (&i/o-encoding . G4d8d) (&i/o-decoding . G4d8c) (&i/o-port . G4d8b) (&i/o-file-does-not-exist . G4d8a) (&i/o-file-already-exists . G4d89) (&i/o-file-is-read-only . G4d88) (&i/o-file-protection . G4d87) (&i/o-filename . G4d86) (&i/o-invalid-position . G4d85) (&i/o-write . G4d84) (&i/o-read . G4d83) (&i/o . G4d82) (&undefined . G4d81) (&syntax . G4d80) (&lexical . G4d7f) (&implementation-restriction . G4d7e) (&non-continuable . G4d7d) (&who . G4d7c) (&irritants . G4d7b) (&assertion . G4d7a) (&violation . G4d79) (&error . G4d78) (&serious . G4d77) (&warning . G4d76) (&message . G4d75) (&condition . G4d74) (define-condition-type . G4d73) (define-enumeration . G4d72) (define-record-type . G4d71) (parent-rtd . G4d70) (nongenerative . G4d6f) (opaque . G4d6e) (sealed . G4d6d) (protocol . G4d6c) (parent . G4d6b) (immutable . G4d6a) (mutable . G4d69) (fields . G4d68) (error-handling-mode . G4d67) (file-options . G4d66) (buffer-mode . G4d65) (eol-style . G4d64) (guard . G4d63) (unsyntax-splicing . G4d60) (unsyntax . G4d5f) (unquote-splicing . G4d5e) (unquote . G4d5d) (_ . G4d5c) (else . G4d5b) (=> . G4d5a) (... . G4d59) (assert . G4d58) (endianness . G4d57) (or . G4d54) (and . G4d53) (do . G4d52) (cond . G4d51) (let* . G4d50) (let . G4d4f) (let*-values . G4d4e) (let-values . G4d4d) (identifier-syntax . G4d4c) (with-syntax . G4d4b) (quasisyntax . G4d4a) (quasiquote . G4d49) (syntax-rules . G4d48) (record-constructor-descriptor . G4d45) (record-type-descriptor . G4d44) (case . G4d43) (unless . G4d41) (when . G4d40) (if . G4d3f) (letrec* . G4d3e) (letrec . G4d3d) (case-lambda . G4d3b) (lambda . G4d3a) (syntax . G4d39) (syntax-case . G4d38) (quote . G4d37) (letrec-syntax . G4d35) (let-syntax . G4d34) (set! . G4d33) (begin . G4d31) (define-syntax . G4d2f) (define . G4d2e)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5030 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G308c) (quotient . G4f16) (null-environment . G308a) (remainder . G4f15) (modulo . G4f14) (inexact->exact . G4f13) (force . G4f12) (exact->inexact . G4f11) (delay . G4d56)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5031 '(rnrs control) '(6) '() '() '() '((do . G4d52) (unless . G4d41) (when . G4d40) (case-lambda . G4d3b)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5032 '(rnrs eval) '(6) '() '() '() '((eval . G3090) (environment . G3088)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5033 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4f0d) (set-car! . G4f0c)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5034 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4f0f) (string-set! . G4f0e)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5035 '(rnrs programs) '(6) '() '() '() '((exit . G4f10) (command-line . G4c98)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5036 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2dc1) (identifier? . G30ae) (generate-temporaries . G309e) (free-identifier=? . G30a0) (syntax->datum . G30b2) (datum->syntax . G30b0) (bound-identifier=? . G30a2) (syntax-violation . G30ac) (unsyntax-splicing . G4d60) (unsyntax . G4d5f) (_ . G4d5c) (... . G4d59) (with-syntax . G4d4b) (quasisyntax . G4d4a) (syntax . G4d39) (syntax-case . G4d38)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5037 '(rnrs files) '(6) '() '() '() '((delete-file . G4f7f) (file-exists? . G4f7e) (make-i/o-write-error . G4b75) (make-i/o-read-error . G4b61) (make-i/o-port-error . G4c0c) (make-i/o-invalid-position-error . G4b8a) (make-i/o-filename-error . G4ba3) (make-i/o-file-protection-error . G4bbb) (make-i/o-file-is-read-only-error . G4bcf) (make-i/o-file-does-not-exist-error . G4bf7) (make-i/o-file-already-exists-error . G4be3) (make-i/o-error . G4b4d) (i/o-write-error? . G4b77) (i/o-read-error? . G4b63) (i/o-port-error? . G4c10) (i/o-invalid-position-error? . G4b8e) (i/o-filename-error? . G4ba7) (i/o-file-protection-error? . G4bbd) (i/o-file-is-read-only-error? . G4bd1) (i/o-file-does-not-exist-error? . G4bf9) (i/o-file-already-exists-error? . G4be5) (i/o-error? . G4b4f) (i/o-error-port . G4c12) (i/o-error-filename . G4ba9) (&i/o-port . G4d8b) (&i/o-file-does-not-exist . G4d8a) (&i/o-file-already-exists . G4d89) (&i/o-file-is-read-only . G4d88) (&i/o-file-protection . G4d87) (&i/o-filename . G4d86) (&i/o-invalid-position . G4d85) (&i/o-write . G4d84) (&i/o-read . G4d83) (&i/o . G4d82)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5038 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G4f7d) (vector-sort . G4f7c) (list-sort . G4f7b)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5039 '(rnrs base) '(6) '() '() '() '((zero? . G4e33) (vector? . G4e32) (vector-set! . G4e31) (vector-ref . G4e30) (vector-map . G4e2f) (vector-length . G4e2e) (vector-for-each . G4e2d) (vector-fill! . G4e2c) (vector->list . G4e2b) (vector . G4e2a) (values . G4e29) (truncate . G4e28) (tan . G4e27) (symbol? . G4e26) (symbol=? . G4e25) (symbol->string . G4e24) (substring . G4e23) (string? . G4e22) (string>? . G4e21) (string>=? . G4e20) (string=? . G4e1f) (string<? . G4e1e) (string<=? . G4e1d) (string-ref . G4e1c) (string-length . G4e1b) (string-for-each . G4e1a) (string-copy . G4e19) (string-append . G4e18) (string->symbol . G4e17) (string->number . G4e16) (string->list . G4e15) (string . G4e14) (sqrt . G4e13) (sin . G4e12) (round . G4e11) (reverse . G4e10) (real? . G4e0f) (real-valued? . G4e0e) (real-part . G4e0d) (rationalize . G4e0c) (rational? . G4e0b) (rational-valued? . G4e0a) (procedure? . G4e09) (positive? . G4e08) (pair? . G4e07) (odd? . G4e06) (numerator . G4e05) (number? . G4e04) (number->string . G4e03) (null? . G4e02) (not . G4e01) (negative? . G4e00) (nan? . G4dff) (min . G4dfe) (max . G4dfd) (map . G4dfc) (make-vector . G4dfb) (make-string . G4dfa) (make-rectangular . G4df9) (make-polar . G4df8) (magnitude . G4df7) (log . G4df6) (list? . G4df5) (list-tail . G4df4) (list-ref . G4df3) (list->vector . G4df2) (list->string . G4df1) (list . G4df0) (length . G4def) (lcm . G4dee) (integer? . G4ded) (integer-valued? . G4dec) (integer->char . G4deb) (infinite? . G4dea) (inexact? . G4de9) (inexact . G4de8) (imag-part . G4de7) (gcd . G4de6) (for-each . G4de5) (floor . G4de4) (finite? . G4de3) (expt . G4de2) (exp . G4de1) (exact? . G4de0) (exact-integer-sqrt . G4ddf) (exact . G4dde) (even? . G4ddd) (error . G4ddc) (eqv? . G4ddb) (equal? . G4dda) (eq? . G4dd9) (dynamic-wind . G4dd8) (div0-and-mod0 . G4dd7) (mod0 . G4dd6) (div0 . G4dd5) (div-and-mod . G4dd4) (mod . G4dd3) (div . G4dd2) (denominator . G4dd1) (cos . G4dd0) (cons . G4dcf) (complex? . G4dce) (char? . G4dcd) (char>? . G4dcc) (char>=? . G4dcb) (char=? . G4dca) (char<? . G4dc9) (char<=? . G4dc8) (char->integer . G4dc7) (ceiling . G4dc6) (call-with-values . G4dc5) (call/cc . G4dc4) (call-with-current-continuation . G4dc3) (cddddr . G4dc2) (cdddar . G4dc1) (cddadr . G4dc0) (cddaar . G4dbf) (cdaddr . G4dbe) (cdadar . G4dbd) (cdaadr . G4dbc) (cdaaar . G4dbb) (cadddr . G4dba) (caddar . G4db9) (cadadr . G4db8) (cadaar . G4db7) (caaddr . G4db6) (caadar . G4db5) (caaadr . G4db4) (caaaar . G4db3) (cdddr . G4db2) (cddar . G4db1) (cdadr . G4db0) (cdaar . G4daf) (caddr . G4dae) (cadar . G4dad) (caadr . G4dac) (caaar . G4dab) (cddr . G4daa) (cdar . G4da9) (cadr . G4da8) (caar . G4da7) (cdr . G4da6) (car . G4da5) (boolean? . G4da4) (boolean=? . G4da3) (atan . G4da2) (assertion-violation . G4da1) (asin . G4da0) (apply . G4d9f) (append . G4d9e) (angle . G4d9d) (acos . G4d9c) (abs . G4d9b) (/ . G4d9a) (* . G4d99) (- . G4d98) (+ . G4d97) (>= . G4d96) (> . G4d95) (= . G4d94) (<= . G4d93) (< . G4d92) (unquote-splicing . G4d5e) (unquote . G4d5d) (_ . G4d5c) (else . G4d5b) (=> . G4d5a) (... . G4d59) (assert . G4d58) (or . G4d54) (and . G4d53) (cond . G4d51) (let* . G4d50) (let . G4d4f) (let*-values . G4d4e) (let-values . G4d4d) (identifier-syntax . G4d4c) (quasiquote . G4d49) (syntax-rules . G4d48) (case . G4d43) (if . G4d3f) (letrec* . G4d3e) (letrec . G4d3d) (lambda . G4d3a) (quote . G4d37) (letrec-syntax . G4d35) (let-syntax . G4d34) (set! . G4d33) (begin . G4d31) (define-syntax . G4d2f) (define . G4d2e)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G503a '(rnrs lists) '(6) '() '() '() '((remove . G4f0b) (remv . G4f0a) (remp . G4f09) (remq . G4f08) (partition . G4f07) (memv . G4f06) (memq . G4f05) (memp . G4f04) (member . G4f03) (exists . G4f02) (for-all . G4f01) (fold-right . G4f00) (fold-left . G4eff) (find . G4efe) (filter . G4efd) (cons* . G4efc) (assv . G4efb) (assq . G4efa) (assp . G4ef9) (assoc . G4ef8)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G503b '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4f65) (call-with-input-file . G4f64) (write-char . G4f63) (write . G4f62) (with-output-to-file . G4f61) (with-input-from-file . G4f60) (read-char . G4f5f) (read . G4f5e) (peek-char . G4f5d) (open-output-file . G4f5c) (open-input-file . G4f5b) (newline . G4f5a) (display . G4f59) (close-output-port . G4f58) (close-input-port . G4f57) (eof-object? . G4f56) (eof-object . G4f55) (current-error-port . G4f54) (current-output-port . G4f53) (current-input-port . G4f52) (output-port? . G4f51) (input-port? . G4f50) (make-i/o-write-error . G4b75) (make-i/o-read-error . G4b61) (make-i/o-port-error . G4c0c) (make-i/o-invalid-position-error . G4b8a) (make-i/o-filename-error . G4ba3) (make-i/o-file-protection-error . G4bbb) (make-i/o-file-is-read-only-error . G4bcf) (make-i/o-file-does-not-exist-error . G4bf7) (make-i/o-file-already-exists-error . G4be3) (make-i/o-error . G4b4d) (i/o-write-error? . G4b77) (i/o-read-error? . G4b63) (i/o-port-error? . G4c10) (i/o-invalid-position-error? . G4b8e) (i/o-filename-error? . G4ba7) (i/o-file-protection-error? . G4bbd) (i/o-file-is-read-only-error? . G4bd1) (i/o-file-does-not-exist-error? . G4bf9) (i/o-file-already-exists-error? . G4be5) (i/o-error? . G4b4f) (i/o-error-port . G4c12) (i/o-error-filename . G4ba9) (&i/o-port . G4d8b) (&i/o-file-does-not-exist . G4d8a) (&i/o-file-already-exists . G4d89) (&i/o-file-is-read-only . G4d88) (&i/o-file-protection . G4d87) (&i/o-filename . G4d86) (&i/o-invalid-position . G4d85) (&i/o-write . G4d84) (&i/o-read . G4d83) (&i/o . G4d82)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G503c '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4f26) (utf32->string . G4edc) (utf16->string . G4edb) (utf8->string . G4eda) (uint-list->bytevector . G4ed9) (u8-list->bytevector . G4ed8) (string->utf8 . G4ed7) (string->utf32 . G4ed6) (string->utf16 . G4ed5) (sint-list->bytevector . G4ed4) (native-endianness . G4ed3) (bytevector? . G4ed2) (bytevector=? . G4ed1) (bytevector-uint-set! . G4ed0) (bytevector-uint-ref . G4ecf) (bytevector-u8-set! . G4ece) (bytevector-u8-ref . G4ecd) (bytevector-u64-set! . G4ecc) (bytevector-u64-ref . G4ecb) (bytevector-u64-native-set! . G4eca) (bytevector-u64-native-ref . G4ec9) (bytevector-u32-set! . G4ec8) (bytevector-u32-ref . G4ec7) (bytevector-u32-native-set! . G4ec6) (bytevector-u32-native-ref . G4ec5) (bytevector-u16-set! . G4ec4) (bytevector-u16-ref . G4ec3) (bytevector-u16-native-set! . G4ec2) (bytevector-u16-native-ref . G4ec1) (bytevector-sint-set! . G4ec0) (bytevector-sint-ref . G4ebf) (bytevector-s8-set! . G4ebe) (bytevector-s8-ref . G4ebd) (bytevector-s64-set! . G4ebc) (bytevector-s64-ref . G4ebb) (bytevector-s64-native-set! . G4eba) (bytevector-s64-native-ref . G4eb9) (bytevector-s32-set! . G4eb8) (bytevector-s32-ref . G4eb7) (bytevector-s32-native-set! . G4eb6) (bytevector-s32-native-ref . G4eb5) (bytevector-s16-set! . G4eb4) (bytevector-s16-ref . G4eb3) (bytevector-s16-native-set! . G4eb2) (bytevector-s16-native-ref . G4eb1) (bytevector-length . G4eb0) (bytevector-ieee-single-ref . G4eaf) (bytevector-ieee-single-native-set! . G4eae) (bytevector-ieee-single-native-ref . G4ead) (bytevector-ieee-double-ref . G4eac) (bytevector-ieee-double-native-set! . G4eab) (bytevector-ieee-double-native-ref . G4eaa) (bytevector-fill! . G4ea9) (bytevector-copy! . G4ea8) (bytevector-copy . G4ea7) (bytevector->uint-list . G4ea6) (bytevector->u8-list . G4ea5) (bytevector->sint-list . G4ea4) (endianness . G4d57)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G503d '(rnrs unicode) '(6) '() '() '() '((string-upcase . G4fad) (string-titlecase . G4fac) (string-normalize-nfkd . G4fab) (string-normalize-nfkc . G4faa) (string-normalize-nfd . G4fa9) (string-normalize-nfc . G4fa8) (string-foldcase . G4fa7) (string-downcase . G4fa6) (string-ci>? . G4fa5) (string-ci>=? . G4fa4) (string-ci=? . G4fa3) (string-ci<? . G4fa2) (string-ci<=? . G4fa1) (char-whitespace? . G4fa0) (char-upper-case? . G4f9f) (char-title-case? . G4f9e) (char-numeric? . G4f9d) (char-lower-case? . G4f9c) (char-general-category . G4f9b) (char-upcase . G4f9a) (char-titlecase . G4f99) (char-foldcase . G4f98) (char-downcase . G4f97) (char-ci>? . G4f96) (char-ci>=? . G4f95) (char-ci=? . G4f94) (char-ci<? . G4f93) (char-ci<=? . G4f92) (char-alphabetic? . G4f91)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G503e '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4ef1) (raise-continuable . G4ef0) (raise . G4eef) (guard . G4d63) (else . G4d5b) (=> . G4d5a)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G503f '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4e44) (bitwise-reverse-bit-field . G4e43) (bitwise-length . G4e42) (bitwise-if . G4e41) (bitwise-first-bit-set . G4e40) (bitwise-copy-bit-field . G4e3f) (bitwise-copy-bit . G4e3e) (bitwise-bit-set? . G4e3d) (bitwise-bit-field . G4e3c) (bitwise-bit-count . G4e3b) (bitwise-xor . G4e3a) (bitwise-ior . G4e39) (bitwise-and . G4e38) (bitwise-not . G4e37) (bitwise-arithmetic-shift-right . G4e36) (bitwise-arithmetic-shift-left . G4e35) (bitwise-arithmetic-shift . G4e34)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5040 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4e71) (fxxor . G4e70) (fxrotate-bit-field . G4e6f) (fxreverse-bit-field . G4e6e) (fxpositive? . G4e6d) (fxodd? . G4e6c) (fxnot . G4e6b) (fxnegative? . G4e6a) (fxmod0 . G4e69) (fxmod . G4e68) (fxmin . G4e67) (fxmax . G4e66) (fxlength . G4e65) (fxior . G4e64) (fxif . G4e63) (fxfirst-bit-set . G4e62) (fxeven? . G4e61) (fxdiv0-and-mod0 . G4e60) (fxdiv0 . G4e5f) (fxdiv-and-mod . G4e5e) (fxdiv . G4e5d) (fxcopy-bit-field . G4e5c) (fxcopy-bit . G4e5b) (fxbit-set? . G4e5a) (fxbit-field . G4e59) (fxbit-count . G4e58) (fxarithmetic-shift-right . G4e57) (fxarithmetic-shift-left . G4e56) (fxarithmetic-shift . G4e55) (fxand . G4e54) (fx>? . G4e53) (fx>=? . G4e52) (fx=? . G4e51) (fx<? . G4e50) (fx<=? . G4e4f) (fx-/carry . G4e4e) (fx- . G4e4d) (fx+/carry . G4e4c) (fx+ . G4e4b) (fx*/carry . G4e4a) (fx* . G4e49) (greatest-fixnum . G4e48) (least-fixnum . G4e47) (fixnum-width . G4e46) (fixnum? . G4e45)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5041 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4ea3) (no-infinities-violation? . G4ea2) (make-no-nans-violation . G4ea1) (make-no-infinities-violation . G4ea0) (real->flonum . G4e9f) (flzero? . G4e9e) (fltruncate . G4e9d) (fltan . G4e9c) (flsqrt . G4e9b) (flsin . G4e9a) (flround . G4e99) (flpositive? . G4e98) (flonum? . G4e97) (flodd? . G4e96) (flnumerator . G4e95) (flnegative? . G4e94) (flnan? . G4e93) (flmod0 . G4e92) (flmod . G4e91) (flmin . G4e90) (flmax . G4e8f) (fllog . G4e8e) (flinteger? . G4e8d) (flinfinite? . G4e8c) (flfloor . G4e8b) (flfinite? . G4e8a) (flexpt . G4e89) (flexp . G4e88) (fleven? . G4e87) (fldiv0-and-mod0 . G4e86) (fldiv0 . G4e85) (fldiv-and-mod . G4e84) (fldiv . G4e83) (fldenominator . G4e82) (flcos . G4e81) (flceiling . G4e80) (flatan . G4e7f) (flasin . G4e7e) (flacos . G4e7d) (flabs . G4e7c) (fl>? . G4e7b) (fl>=? . G4e7a) (fl=? . G4e79) (fl<? . G4e78) (fl<=? . G4e77) (fl/ . G4e76) (fl- . G4e75) (fl+ . G4e74) (fl* . G4e73) (fixnum->flonum . G4e72) (&no-nans . G4d8f) (&no-infinities . G4d8e)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5042 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4f7a) (string-ci-hash . G4f79) (string-hash . G4f78) (equal-hash . G4f77) (hashtable-equivalence-function . G4f76) (make-hashtable . G4f75) (hashtable-hash-function . G4f74) (make-eqv-hashtable . G4f73) (make-eq-hashtable . G4f72) (hashtable? . G4f71) (hashtable-update! . G4f70) (hashtable-size . G4f6f) (hashtable-set! . G4f6e) (hashtable-ref . G4f6d) (hashtable-mutable? . G4f6c) (hashtable-keys . G4f6b) (hashtable-entries . G4f6a) (hashtable-delete! . G4f69) (hashtable-copy . G4f68) (hashtable-contains? . G4f67) (hashtable-clear! . G4f66)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5043 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4f56) (eof-object . G4f55) (current-error-port . G4f54) (current-output-port . G4f53) (current-input-port . G4f52) (output-port? . G4f51) (input-port? . G4f50) (utf-8-codec . G4f4f) (utf-16-codec . G4f4e) (transcoder-error-handling-mode . G4f4d) (transcoder-eol-style . G4f4c) (transcoder-codec . G4f4b) (transcoded-port . G4f4a) (textual-port? . G4f49) (string->bytevector . G4f48) (standard-output-port . G4f47) (standard-input-port . G4f46) (standard-error-port . G4f45) (set-port-position! . G4f44) (put-u8 . G4f43) (put-string . G4f42) (put-datum . G4f41) (put-char . G4f40) (put-bytevector . G4f3f) (port? . G4f3e) (port-transcoder . G4f3d) (port-position . G4f3c) (port-has-set-port-position!? . G4f3b) (port-has-port-position? . G4f3a) (port-eof? . G4f39) (output-port-buffer-mode . G4f38) (open-string-output-port . G4f37) (open-string-input-port . G4f36) (open-file-output-port . G4f35) (open-file-input/output-port . G4f34) (open-file-input-port . G4f33) (open-bytevector-output-port . G4f32) (open-bytevector-input-port . G4f31) (native-transcoder . G4f30) (native-eol-style . G4f2f) (make-transcoder . G4f2e) (latin-1-codec . G4f2d) (make-i/o-write-error . G4b75) (make-i/o-read-error . G4b61) (make-i/o-port-error . G4c0c) (make-i/o-invalid-position-error . G4b8a) (make-i/o-filename-error . G4ba3) (make-i/o-file-protection-error . G4bbb) (make-i/o-file-is-read-only-error . G4bcf) (make-i/o-file-does-not-exist-error . G4bf7) (make-i/o-file-already-exists-error . G4be3) (make-i/o-error . G4b4d) (make-i/o-encoding-error . G4c39) (make-i/o-decoding-error . G4c24) (make-custom-textual-output-port . G4f2c) (make-custom-textual-input/output-port . G4f2b) (make-custom-textual-input-port . G4f2a) (make-custom-binary-output-port . G4f29) (make-custom-binary-input/output-port . G4f28) (make-custom-binary-input-port . G4f27) (lookahead-u8 . G4f25) (lookahead-char . G4f24) (i/o-write-error? . G4b77) (i/o-read-error? . G4b63) (i/o-port-error? . G4c10) (i/o-invalid-position-error? . G4b8e) (i/o-filename-error? . G4ba7) (i/o-file-protection-error? . G4bbd) (i/o-file-is-read-only-error? . G4bd1) (i/o-file-does-not-exist-error? . G4bf9) (i/o-file-already-exists-error? . G4be5) (i/o-error? . G4b4f) (i/o-error-port . G4c12) (i/o-error-filename . G4ba9) (i/o-encoding-error? . G4c3d) (i/o-encoding-error-char . G4c3f) (i/o-decoding-error? . G4c26) (get-u8 . G4f23) (get-string-n! . G4f22) (get-string-n . G4f21) (get-string-all . G4f20) (get-line . G4f1f) (get-datum . G4f1e) (get-char . G4f1d) (get-bytevector-some . G4f1c) (get-bytevector-n! . G4f1b) (get-bytevector-n . G4f1a) (get-bytevector-all . G4f19) (flush-output-port . G4f18) (close-port . G4f17) (call-with-string-output-port . G4ef7) (call-with-port . G4ef6) (call-with-bytevector-output-port . G4ef5) (bytevector->string . G4ef4) (buffer-mode? . G4ef3) (binary-port? . G4ef2) (&i/o-encoding . G4d8d) (&i/o-decoding . G4d8c) (&i/o-port . G4d8b) (&i/o-file-does-not-exist . G4d8a) (&i/o-file-already-exists . G4d89) (&i/o-file-is-read-only . G4d88) (&i/o-file-protection . G4d87) (&i/o-filename . G4d86) (&i/o-invalid-position . G4d85) (&i/o-write . G4d84) (&i/o-read . G4d83) (&i/o . G4d82) (error-handling-mode . G4d67) (file-options . G4d66) (buffer-mode . G4d65) (eol-style . G4d64)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5044 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4eee) (enum-set=? . G4eed) (enum-set-universe . G4eec) (enum-set-union . G4eeb) (enum-set-subset? . G4eea) (enum-set-projection . G4ee9) (enum-set-member? . G4ee8) (enum-set-intersection . G4ee7) (enum-set-indexer . G4ee6) (enum-set-difference . G4ee5) (enum-set-constructor . G4ee4) (enum-set-complement . G4ee3) (enum-set->list . G4ee2) (define-enumeration . G4d72)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5045 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a6b) (warning? . G49eb) (violation? . G4a27) (undefined-violation? . G4adb) (syntax-violation? . G4ac3) (syntax-violation-subform . G4ac7) (syntax-violation-form . G4ac5) (syntax-violation . G30ac) (simple-conditions . G4ee1) (serious-condition? . G49ff) (non-continuable-violation? . G4a81) (message-condition? . G49d5) (make-who-condition . G4a67) (make-warning . G49e9) (make-violation . G4a25) (make-undefined-violation . G4ad9) (make-syntax-violation . G4abd) (make-serious-condition . G49fd) (make-non-continuable-violation . G4a7f) (make-message-condition . G49d1) (make-lexical-violation . G4aa7) (make-irritants-condition . G4a4e) (make-implementation-restriction-violation . G4a93) (make-error . G4a11) (make-assertion-violation . G4a39) (lexical-violation? . G4aa9) (irritants-condition? . G4a52) (implementation-restriction-violation? . G4a95) (error? . G4a13) (condition-who . G4a6d) (condition-predicate . G4ee0) (condition-message . G49d7) (condition-irritants . G4a54) (condition-accessor . G4edf) (condition . G4ede) (assertion-violation? . G4a3b) (condition? . G4edd) (&undefined . G4d81) (&syntax . G4d80) (&lexical . G4d7f) (&implementation-restriction . G4d7e) (&non-continuable . G4d7d) (&who . G4d7c) (&irritants . G4d7b) (&assertion . G4d7a) (&violation . G4d79) (&error . G4d78) (&serious . G4d77) (&warning . G4d76) (&message . G4d75) (&condition . G4d74) (define-condition-type . G4d73)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5046 '(rnrs records inspection) '(6) '() '() '() '((record? . G4f89) (record-type-uid . G4f88) (record-type-sealed? . G4f87) (record-type-parent . G4f86) (record-type-opaque? . G4f85) (record-type-name . G4f84) (record-type-generative? . G4f83) (record-type-field-names . G4f82) (record-rtd . G4f81) (record-field-mutable? . G4f80)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5047 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G4f90) (record-predicate . G4f8f) (record-mutator . G4f8e) (record-constructor . G4f8d) (record-accessor . G4f8c) (make-record-type-descriptor . G4f8b) (make-record-constructor-descriptor . G4f8a)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5048 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4d71) (parent-rtd . G4d70) (nongenerative . G4d6f) (opaque . G4d6e) (sealed . G4d6d) (protocol . G4d6c) (parent . G4d6b) (immutable . G4d6a) (mutable . G4d69) (fields . G4d68) (record-constructor-descriptor . G4d45) (record-type-descriptor . G4d44)) '() values values '#f '#f '#t '#f) (G2b7e@G2a14@install-library 'G5049 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G5029) (&no-nans-rtd . G5028) (&no-infinities-rcd . G5027) (&no-infinities-rtd . G5026) (&i/o-encoding-rcd . G5025) (&i/o-encoding-rtd . G5024) (&i/o-decoding-rcd . G5023) (&i/o-decoding-rtd . G5022) (&i/o-port-rcd . G5021) (&i/o-port-rtd . G5020) (&i/o-file-does-not-exist-rcd . G501f) (&i/o-file-does-not-exist-rtd . G501e) (&i/o-file-already-exists-rcd . G501d) (&i/o-file-already-exists-rtd . G501c) (&i/o-file-is-read-only-rcd . G501b) (&i/o-file-is-read-only-rtd . G501a) (&i/o-file-protection-rcd . G5019) (&i/o-file-protection-rtd . G5018) (&i/o-filename-rcd . G5017) (&i/o-filename-rtd . G5016) (&i/o-invalid-position-rcd . G5015) (&i/o-invalid-position-rtd . G5014) (&i/o-write-rcd . G5013) (&i/o-write-rtd . G5012) (&i/o-read-rcd . G5011) (&i/o-read-rtd . G5010) (&i/o-rcd . G500f) (&i/o-rtd . G500e) (&undefined-rcd . G500d) (&undefined-rtd . G500c) (&syntax-rcd . G500b) (&syntax-rtd . G500a) (&lexical-rcd . G5009) (&lexical-rtd . G5008) (&implementation-restriction-rcd . G5007) (&implementation-restriction-rtd . G5006) (&non-continuable-rcd . G5005) (&non-continuable-rtd . G5004) (&who-rcd . G5003) (&who-rtd . G5002) (&irritants-rcd . G5001) (&irritants-rtd . G5000) (&assertion-rcd . G4fff) (&assertion-rtd . G4ffe) (&violation-rcd . G4ffd) (&violation-rtd . G4ffc) (&error-rcd . G4ffb) (&error-rtd . G4ffa) (&serious-rcd . G4ff9) (&serious-rtd . G4ff8) (&warning-rcd . G4ff7) (&warning-rtd . G4ff6) (&message-rcd . G4ff5) (&message-rtd . G4ff4) (&condition-rcd . G4ff3) (&condition-rtd . G4ff2) (syntax-error . G30a6) (syntax-dispatch . G2fc3) (pretty-print . G4ff1) (eval-core . G4ff0) (set-symbol-value! . G4fef) (symbol-value . G4fee) (gensym . G4fed) (void . G4fec) (load . G4c9e) (interaction-environment . G30b8) (char-ready? . G4feb) (regexp? . G4fea) (read-line . G4fe9) (dotted-list? . G4fe8) (circular-list? . G4fe7) (proper-list? . G4fe6) (circular-list . G4fe5) (last . G4fe4) (last-pair . G4fe3) (not-pair? . G4fe2) (split-at! . G4fe1) (split-at . G4fe0) (list= . G4fdf) (list-copy . G4fde) (list-tabulate . G4fdd) (make-list . G4fdc) (xcons . G4fdb) (tenth . G4fda) (ninth . G4fd9) (eighth . G4fd8) (seventh . G4fd7) (sixth . G4fd6) (fifth . G4fd5) (drop-right! . G4fd4) (drop-right . G4fd3) (take-right . G4fd2) (take! . G4fd1) (drop . G4fd0) (take . G4fcf) (car+cdr . G4fce) (third . G4fcd) (second . G4fcc) (first . G4fcb) (assoc-ref . G4fca) (alist-cons . G4fc9) (print . G4fc8) (format . G4fc7) (standard-library-path . G4fc6) (current-directory . G4fc5) (write-to-file . G4fc4) (file->list . G4fc3) (file->string . G4fc2) (digit->integer . G4fc1) (call-with-string-input-port . G4fc0) (call-with-string-io . G4fbf) (string-split . G4fbe) (bytevector-for-each . G4fbd) (string->regexp . G4fbc) (rxmatch . G4fbb) (regexp-replace-all . G4fba) (hashtable-for-each . G4fb9) (readdir . G4fb8) (get-environment-variables . G4fb7) (get-environment-variable . G4fb6) (get-command-line . G4fb5) (sys-display . G4fb4) (source-info . G4fb3) (make-compiler-instruction . G4fb2) (make-instruction . G4fb1) (set-source-info! . G4fb0) (fasl-write . G4faf) (receive . G4fae) (string-upcase . G4fad) (string-titlecase . G4fac) (string-normalize-nfkd . G4fab) (string-normalize-nfkc . G4faa) (string-normalize-nfd . G4fa9) (string-normalize-nfc . G4fa8) (string-foldcase . G4fa7) (string-downcase . G4fa6) (string-ci>? . G4fa5) (string-ci>=? . G4fa4) (string-ci=? . G4fa3) (string-ci<? . G4fa2) (string-ci<=? . G4fa1) (char-whitespace? . G4fa0) (char-upper-case? . G4f9f) (char-title-case? . G4f9e) (char-numeric? . G4f9d) (char-lower-case? . G4f9c) (char-general-category . G4f9b) (char-upcase . G4f9a) (char-titlecase . G4f99) (char-foldcase . G4f98) (char-downcase . G4f97) (char-ci>? . G4f96) (char-ci>=? . G4f95) (char-ci=? . G4f94) (char-ci<? . G4f93) (char-ci<=? . G4f92) (char-alphabetic? . G4f91) (make-variable-transformer . G2dc1) (identifier? . G30ae) (generate-temporaries . G309e) (free-identifier=? . G30a0) (syntax->datum . G30b2) (datum->syntax . G30b0) (bound-identifier=? . G30a2) (record-type-descriptor? . G4f90) (record-predicate . G4f8f) (record-mutator . G4f8e) (record-constructor . G4f8d) (record-accessor . G4f8c) (make-record-type-descriptor . G4f8b) (make-record-constructor-descriptor . G4f8a) (record? . G4f89) (record-type-uid . G4f88) (record-type-sealed? . G4f87) (record-type-parent . G4f86) (record-type-opaque? . G4f85) (record-type-name . G4f84) (record-type-generative? . G4f83) (record-type-field-names . G4f82) (record-rtd . G4f81) (record-field-mutable? . G4f80) (delete-file . G4f7f) (file-exists? . G4f7e) (vector-sort! . G4f7d) (vector-sort . G4f7c) (list-sort . G4f7b) (symbol-hash . G4f7a) (string-ci-hash . G4f79) (string-hash . G4f78) (equal-hash . G4f77) (hashtable-equivalence-function . G4f76) (make-hashtable . G4f75) (hashtable-hash-function . G4f74) (make-eqv-hashtable . G4f73) (make-eq-hashtable . G4f72) (hashtable? . G4f71) (hashtable-update! . G4f70) (hashtable-size . G4f6f) (hashtable-set! . G4f6e) (hashtable-ref . G4f6d) (hashtable-mutable? . G4f6c) (hashtable-keys . G4f6b) (hashtable-entries . G4f6a) (hashtable-delete! . G4f69) (hashtable-copy . G4f68) (hashtable-contains? . G4f67) (hashtable-clear! . G4f66) (call-with-output-file . G4f65) (call-with-input-file . G4f64) (write-char . G4f63) (write . G4f62) (with-output-to-file . G4f61) (with-input-from-file . G4f60) (read-char . G4f5f) (read . G4f5e) (peek-char . G4f5d) (open-output-file . G4f5c) (open-input-file . G4f5b) (newline . G4f5a) (display . G4f59) (close-output-port . G4f58) (close-input-port . G4f57) (eof-object? . G4f56) (eof-object . G4f55) (current-error-port . G4f54) (current-output-port . G4f53) (current-input-port . G4f52) (output-port? . G4f51) (input-port? . G4f50) (utf-8-codec . G4f4f) (utf-16-codec . G4f4e) (transcoder-error-handling-mode . G4f4d) (transcoder-eol-style . G4f4c) (transcoder-codec . G4f4b) (transcoded-port . G4f4a) (textual-port? . G4f49) (string->bytevector . G4f48) (standard-output-port . G4f47) (standard-input-port . G4f46) (standard-error-port . G4f45) (set-port-position! . G4f44) (put-u8 . G4f43) (put-string . G4f42) (put-datum . G4f41) (put-char . G4f40) (put-bytevector . G4f3f) (port? . G4f3e) (port-transcoder . G4f3d) (port-position . G4f3c) (port-has-set-port-position!? . G4f3b) (port-has-port-position? . G4f3a) (port-eof? . G4f39) (output-port-buffer-mode . G4f38) (open-string-output-port . G4f37) (open-string-input-port . G4f36) (open-file-output-port . G4f35) (open-file-input/output-port . G4f34) (open-file-input-port . G4f33) (open-bytevector-output-port . G4f32) (open-bytevector-input-port . G4f31) (native-transcoder . G4f30) (native-eol-style . G4f2f) (make-transcoder . G4f2e) (latin-1-codec . G4f2d) (make-i/o-write-error . G4b75) (make-i/o-read-error . G4b61) (make-i/o-port-error . G4c0c) (make-i/o-invalid-position-error . G4b8a) (make-i/o-filename-error . G4ba3) (make-i/o-file-protection-error . G4bbb) (make-i/o-file-is-read-only-error . G4bcf) (make-i/o-file-does-not-exist-error . G4bf7) (make-i/o-file-already-exists-error . G4be3) (make-i/o-error . G4b4d) (make-i/o-encoding-error . G4c39) (make-i/o-decoding-error . G4c24) (make-custom-textual-output-port . G4f2c) (make-custom-textual-input/output-port . G4f2b) (make-custom-textual-input-port . G4f2a) (make-custom-binary-output-port . G4f29) (make-custom-binary-input/output-port . G4f28) (make-custom-binary-input-port . G4f27) (make-bytevector . G4f26) (lookahead-u8 . G4f25) (lookahead-char . G4f24) (i/o-write-error? . G4b77) (i/o-read-error? . G4b63) (i/o-port-error? . G4c10) (i/o-invalid-position-error? . G4b8e) (i/o-filename-error? . G4ba7) (i/o-file-protection-error? . G4bbd) (i/o-file-is-read-only-error? . G4bd1) (i/o-file-does-not-exist-error? . G4bf9) (i/o-file-already-exists-error? . G4be5) (i/o-error? . G4b4f) (i/o-error-port . G4c12) (i/o-error-filename . G4ba9) (i/o-encoding-error? . G4c3d) (i/o-encoding-error-char . G4c3f) (i/o-decoding-error? . G4c26) (get-u8 . G4f23) (get-string-n! . G4f22) (get-string-n . G4f21) (get-string-all . G4f20) (get-line . G4f1f) (get-datum . G4f1e) (get-char . G4f1d) (get-bytevector-some . G4f1c) (get-bytevector-n! . G4f1b) (get-bytevector-n . G4f1a) (get-bytevector-all . G4f19) (flush-output-port . G4f18) (close-port . G4f17) (scheme-report-environment . G308c) (quotient . G4f16) (null-environment . G308a) (remainder . G4f15) (modulo . G4f14) (inexact->exact . G4f13) (force . G4f12) (exact->inexact . G4f11) (exit . G4f10) (command-line . G4c98) (string-fill! . G4f0f) (string-set! . G4f0e) (set-cdr! . G4f0d) (set-car! . G4f0c) (remove . G4f0b) (remv . G4f0a) (remp . G4f09) (remq . G4f08) (partition . G4f07) (memv . G4f06) (memq . G4f05) (memp . G4f04) (member . G4f03) (exists . G4f02) (for-all . G4f01) (fold-right . G4f00) (fold-left . G4eff) (find . G4efe) (filter . G4efd) (cons* . G4efc) (assv . G4efb) (assq . G4efa) (assp . G4ef9) (assoc . G4ef8) (call-with-string-output-port . G4ef7) (call-with-port . G4ef6) (call-with-bytevector-output-port . G4ef5) (bytevector->string . G4ef4) (buffer-mode? . G4ef3) (binary-port? . G4ef2) (with-exception-handler . G4ef1) (raise-continuable . G4ef0) (raise . G4eef) (eval . G3090) (environment . G3088) (make-enumeration . G4eee) (enum-set=? . G4eed) (enum-set-universe . G4eec) (enum-set-union . G4eeb) (enum-set-subset? . G4eea) (enum-set-projection . G4ee9) (enum-set-member? . G4ee8) (enum-set-intersection . G4ee7) (enum-set-indexer . G4ee6) (enum-set-difference . G4ee5) (enum-set-constructor . G4ee4) (enum-set-complement . G4ee3) (enum-set->list . G4ee2) (who-condition? . G4a6b) (warning? . G49eb) (violation? . G4a27) (undefined-violation? . G4adb) (syntax-violation? . G4ac3) (syntax-violation-subform . G4ac7) (syntax-violation-form . G4ac5) (syntax-violation . G30ac) (simple-conditions . G4ee1) (serious-condition? . G49ff) (non-continuable-violation? . G4a81) (message-condition? . G49d5) (make-who-condition . G4a67) (make-warning . G49e9) (make-violation . G4a25) (make-undefined-violation . G4ad9) (make-syntax-violation . G4abd) (make-serious-condition . G49fd) (make-non-continuable-violation . G4a7f) (make-message-condition . G49d1) (make-lexical-violation . G4aa7) (make-irritants-condition . G4a4e) (make-implementation-restriction-violation . G4a93) (make-error . G4a11) (make-assertion-violation . G4a39) (lexical-violation? . G4aa9) (irritants-condition? . G4a52) (implementation-restriction-violation? . G4a95) (error? . G4a13) (condition-who . G4a6d) (condition-predicate . G4ee0) (condition-message . G49d7) (condition-irritants . G4a54) (condition-accessor . G4edf) (condition . G4ede) (assertion-violation? . G4a3b) (condition? . G4edd) (utf32->string . G4edc) (utf16->string . G4edb) (utf8->string . G4eda) (uint-list->bytevector . G4ed9) (u8-list->bytevector . G4ed8) (string->utf8 . G4ed7) (string->utf32 . G4ed6) (string->utf16 . G4ed5) (sint-list->bytevector . G4ed4) (native-endianness . G4ed3) (bytevector? . G4ed2) (bytevector=? . G4ed1) (bytevector-uint-set! . G4ed0) (bytevector-uint-ref . G4ecf) (bytevector-u8-set! . G4ece) (bytevector-u8-ref . G4ecd) (bytevector-u64-set! . G4ecc) (bytevector-u64-ref . G4ecb) (bytevector-u64-native-set! . G4eca) (bytevector-u64-native-ref . G4ec9) (bytevector-u32-set! . G4ec8) (bytevector-u32-ref . G4ec7) (bytevector-u32-native-set! . G4ec6) (bytevector-u32-native-ref . G4ec5) (bytevector-u16-set! . G4ec4) (bytevector-u16-ref . G4ec3) (bytevector-u16-native-set! . G4ec2) (bytevector-u16-native-ref . G4ec1) (bytevector-sint-set! . G4ec0) (bytevector-sint-ref . G4ebf) (bytevector-s8-set! . G4ebe) (bytevector-s8-ref . G4ebd) (bytevector-s64-set! . G4ebc) (bytevector-s64-ref . G4ebb) (bytevector-s64-native-set! . G4eba) (bytevector-s64-native-ref . G4eb9) (bytevector-s32-set! . G4eb8) (bytevector-s32-ref . G4eb7) (bytevector-s32-native-set! . G4eb6) (bytevector-s32-native-ref . G4eb5) (bytevector-s16-set! . G4eb4) (bytevector-s16-ref . G4eb3) (bytevector-s16-native-set! . G4eb2) (bytevector-s16-native-ref . G4eb1) (bytevector-length . G4eb0) (bytevector-ieee-single-ref . G4eaf) (bytevector-ieee-single-native-set! . G4eae) (bytevector-ieee-single-native-ref . G4ead) (bytevector-ieee-double-ref . G4eac) (bytevector-ieee-double-native-set! . G4eab) (bytevector-ieee-double-native-ref . G4eaa) (bytevector-fill! . G4ea9) (bytevector-copy! . G4ea8) (bytevector-copy . G4ea7) (bytevector->uint-list . G4ea6) (bytevector->u8-list . G4ea5) (bytevector->sint-list . G4ea4) (no-nans-violation? . G4ea3) (no-infinities-violation? . G4ea2) (make-no-nans-violation . G4ea1) (make-no-infinities-violation . G4ea0) (real->flonum . G4e9f) (flzero? . G4e9e) (fltruncate . G4e9d) (fltan . G4e9c) (flsqrt . G4e9b) (flsin . G4e9a) (flround . G4e99) (flpositive? . G4e98) (flonum? . G4e97) (flodd? . G4e96) (flnumerator . G4e95) (flnegative? . G4e94) (flnan? . G4e93) (flmod0 . G4e92) (flmod . G4e91) (flmin . G4e90) (flmax . G4e8f) (fllog . G4e8e) (flinteger? . G4e8d) (flinfinite? . G4e8c) (flfloor . G4e8b) (flfinite? . G4e8a) (flexpt . G4e89) (flexp . G4e88) (fleven? . G4e87) (fldiv0-and-mod0 . G4e86) (fldiv0 . G4e85) (fldiv-and-mod . G4e84) (fldiv . G4e83) (fldenominator . G4e82) (flcos . G4e81) (flceiling . G4e80) (flatan . G4e7f) (flasin . G4e7e) (flacos . G4e7d) (flabs . G4e7c) (fl>? . G4e7b) (fl>=? . G4e7a) (fl=? . G4e79) (fl<? . G4e78) (fl<=? . G4e77) (fl/ . G4e76) (fl- . G4e75) (fl+ . G4e74) (fl* . G4e73) (fixnum->flonum . G4e72) (fxzero? . G4e71) (fxxor . G4e70) (fxrotate-bit-field . G4e6f) (fxreverse-bit-field . G4e6e) (fxpositive? . G4e6d) (fxodd? . G4e6c) (fxnot . G4e6b) (fxnegative? . G4e6a) (fxmod0 . G4e69) (fxmod . G4e68) (fxmin . G4e67) (fxmax . G4e66) (fxlength . G4e65) (fxior . G4e64) (fxif . G4e63) (fxfirst-bit-set . G4e62) (fxeven? . G4e61) (fxdiv0-and-mod0 . G4e60) (fxdiv0 . G4e5f) (fxdiv-and-mod . G4e5e) (fxdiv . G4e5d) (fxcopy-bit-field . G4e5c) (fxcopy-bit . G4e5b) (fxbit-set? . G4e5a) (fxbit-field . G4e59) (fxbit-count . G4e58) (fxarithmetic-shift-right . G4e57) (fxarithmetic-shift-left . G4e56) (fxarithmetic-shift . G4e55) (fxand . G4e54) (fx>? . G4e53) (fx>=? . G4e52) (fx=? . G4e51) (fx<? . G4e50) (fx<=? . G4e4f) (fx-/carry . G4e4e) (fx- . G4e4d) (fx+/carry . G4e4c) (fx+ . G4e4b) (fx*/carry . G4e4a) (fx* . G4e49) (greatest-fixnum . G4e48) (least-fixnum . G4e47) (fixnum-width . G4e46) (fixnum? . G4e45) (bitwise-rotate-bit-field . G4e44) (bitwise-reverse-bit-field . G4e43) (bitwise-length . G4e42) (bitwise-if . G4e41) (bitwise-first-bit-set . G4e40) (bitwise-copy-bit-field . G4e3f) (bitwise-copy-bit . G4e3e) (bitwise-bit-set? . G4e3d) (bitwise-bit-field . G4e3c) (bitwise-bit-count . G4e3b) (bitwise-xor . G4e3a) (bitwise-ior . G4e39) (bitwise-and . G4e38) (bitwise-not . G4e37) (bitwise-arithmetic-shift-right . G4e36) (bitwise-arithmetic-shift-left . G4e35) (bitwise-arithmetic-shift . G4e34) (zero? . G4e33) (vector? . G4e32) (vector-set! . G4e31) (vector-ref . G4e30) (vector-map . G4e2f) (vector-length . G4e2e) (vector-for-each . G4e2d) (vector-fill! . G4e2c) (vector->list . G4e2b) (vector . G4e2a) (values . G4e29) (truncate . G4e28) (tan . G4e27) (symbol? . G4e26) (symbol=? . G4e25) (symbol->string . G4e24) (substring . G4e23) (string? . G4e22) (string>? . G4e21) (string>=? . G4e20) (string=? . G4e1f) (string<? . G4e1e) (string<=? . G4e1d) (string-ref . G4e1c) (string-length . G4e1b) (string-for-each . G4e1a) (string-copy . G4e19) (string-append . G4e18) (string->symbol . G4e17) (string->number . G4e16) (string->list . G4e15) (string . G4e14) (sqrt . G4e13) (sin . G4e12) (round . G4e11) (reverse . G4e10) (real? . G4e0f) (real-valued? . G4e0e) (real-part . G4e0d) (rationalize . G4e0c) (rational? . G4e0b) (rational-valued? . G4e0a) (procedure? . G4e09) (positive? . G4e08) (pair? . G4e07) (odd? . G4e06) (numerator . G4e05) (number? . G4e04) (number->string . G4e03) (null? . G4e02) (not . G4e01) (negative? . G4e00) (nan? . G4dff) (min . G4dfe) (max . G4dfd) (map . G4dfc) (make-vector . G4dfb) (make-string . G4dfa) (make-rectangular . G4df9) (make-polar . G4df8) (magnitude . G4df7) (log . G4df6) (list? . G4df5) (list-tail . G4df4) (list-ref . G4df3) (list->vector . G4df2) (list->string . G4df1) (list . G4df0) (length . G4def) (lcm . G4dee) (integer? . G4ded) (integer-valued? . G4dec) (integer->char . G4deb) (infinite? . G4dea) (inexact? . G4de9) (inexact . G4de8) (imag-part . G4de7) (gcd . G4de6) (for-each . G4de5) (floor . G4de4) (finite? . G4de3) (expt . G4de2) (exp . G4de1) (exact? . G4de0) (exact-integer-sqrt . G4ddf) (exact . G4dde) (even? . G4ddd) (error . G4ddc) (eqv? . G4ddb) (equal? . G4dda) (eq? . G4dd9) (dynamic-wind . G4dd8) (div0-and-mod0 . G4dd7) (mod0 . G4dd6) (div0 . G4dd5) (div-and-mod . G4dd4) (mod . G4dd3) (div . G4dd2) (denominator . G4dd1) (cos . G4dd0) (cons . G4dcf) (complex? . G4dce) (char? . G4dcd) (char>? . G4dcc) (char>=? . G4dcb) (char=? . G4dca) (char<? . G4dc9) (char<=? . G4dc8) (char->integer . G4dc7) (ceiling . G4dc6) (call-with-values . G4dc5) (call/cc . G4dc4) (call-with-current-continuation . G4dc3) (cddddr . G4dc2) (cdddar . G4dc1) (cddadr . G4dc0) (cddaar . G4dbf) (cdaddr . G4dbe) (cdadar . G4dbd) (cdaadr . G4dbc) (cdaaar . G4dbb) (cadddr . G4dba) (caddar . G4db9) (cadadr . G4db8) (cadaar . G4db7) (caaddr . G4db6) (caadar . G4db5) (caaadr . G4db4) (caaaar . G4db3) (cdddr . G4db2) (cddar . G4db1) (cdadr . G4db0) (cdaar . G4daf) (caddr . G4dae) (cadar . G4dad) (caadr . G4dac) (caaar . G4dab) (cddr . G4daa) (cdar . G4da9) (cadr . G4da8) (caar . G4da7) (cdr . G4da6) (car . G4da5) (boolean? . G4da4) (boolean=? . G4da3) (atan . G4da2) (assertion-violation . G4da1) (asin . G4da0) (apply . G4d9f) (append . G4d9e) (angle . G4d9d) (acos . G4d9c) (abs . G4d9b) (/ . G4d9a) (* . G4d99) (- . G4d98) (+ . G4d97) (>= . G4d96) (> . G4d95) (= . G4d94) (<= . G4d93) (< . G4d92) (library . G4d91) (export . G4d90) (&no-nans . G4d8f) (&no-infinities . G4d8e) (&i/o-encoding . G4d8d) (&i/o-decoding . G4d8c) (&i/o-port . G4d8b) (&i/o-file-does-not-exist . G4d8a) (&i/o-file-already-exists . G4d89) (&i/o-file-is-read-only . G4d88) (&i/o-file-protection . G4d87) (&i/o-filename . G4d86) (&i/o-invalid-position . G4d85) (&i/o-write . G4d84) (&i/o-read . G4d83) (&i/o . G4d82) (&undefined . G4d81) (&syntax . G4d80) (&lexical . G4d7f) (&implementation-restriction . G4d7e) (&non-continuable . G4d7d) (&who . G4d7c) (&irritants . G4d7b) (&assertion . G4d7a) (&violation . G4d79) (&error . G4d78) (&serious . G4d77) (&warning . G4d76) (&message . G4d75) (&condition . G4d74) (define-condition-type . G4d73) (define-enumeration . G4d72) (define-record-type . G4d71) (parent-rtd . G4d70) (nongenerative . G4d6f) (opaque . G4d6e) (sealed . G4d6d) (protocol . G4d6c) (parent . G4d6b) (immutable . G4d6a) (mutable . G4d69) (fields . G4d68) (error-handling-mode . G4d67) (file-options . G4d66) (buffer-mode . G4d65) (eol-style . G4d64) (guard . G4d63) (trace-define . G4d62) (trace-lambda . G4d61) (unsyntax-splicing . G4d60) (unsyntax . G4d5f) (unquote-splicing . G4d5e) (unquote . G4d5d) (_ . G4d5c) (else . G4d5b) (=> . G4d5a) (... . G4d59) (assert . G4d58) (endianness . G4d57) (delay . G4d56) (time . G4d55) (or . G4d54) (and . G4d53) (do . G4d52) (cond . G4d51) (let* . G4d50) (let . G4d4f) (let*-values . G4d4e) (let-values . G4d4d) (identifier-syntax . G4d4c) (with-syntax . G4d4b) (quasisyntax . G4d4a) (quasiquote . G4d49) (syntax-rules . G4d48) (include . G4d47) (define-struct . G4d46) (record-constructor-descriptor . G4d45) (record-type-descriptor . G4d44) (case . G4d43) (parameterize . G4d42) (unless . G4d41) (when . G4d40) (if . G4d3f) (letrec* . G4d3e) (letrec . G4d3d) (type-descriptor . G4d3c) (case-lambda . G4d3b) (lambda . G4d3a) (syntax . G4d39) (syntax-case . G4d38) (quote . G4d37) (foreign-call . G4d36) (letrec-syntax . G4d35) (let-syntax . G4d34) (set! . G4d33) (import . G4d32) (begin . G4d31) (module . G4d30) (define-syntax . G4d2f) (define . G4d2e)) '((G5029 core-prim . &no-nans-rcd) (G5028 core-prim . &no-nans-rtd) (G5027 core-prim . &no-infinities-rcd) (G5026 core-prim . &no-infinities-rtd) (G5025 core-prim . &i/o-encoding-rcd) (G5024 core-prim . &i/o-encoding-rtd) (G5023 core-prim . &i/o-decoding-rcd) (G5022 core-prim . &i/o-decoding-rtd) (G5021 core-prim . &i/o-port-rcd) (G5020 core-prim . &i/o-port-rtd) (G501f core-prim . &i/o-file-does-not-exist-rcd) (G501e core-prim . &i/o-file-does-not-exist-rtd) (G501d core-prim . &i/o-file-already-exists-rcd) (G501c core-prim . &i/o-file-already-exists-rtd) (G501b core-prim . &i/o-file-is-read-only-rcd) (G501a core-prim . &i/o-file-is-read-only-rtd) (G5019 core-prim . &i/o-file-protection-rcd) (G5018 core-prim . &i/o-file-protection-rtd) (G5017 core-prim . &i/o-filename-rcd) (G5016 core-prim . &i/o-filename-rtd) (G5015 core-prim . &i/o-invalid-position-rcd) (G5014 core-prim . &i/o-invalid-position-rtd) (G5013 core-prim . &i/o-write-rcd) (G5012 core-prim . &i/o-write-rtd) (G5011 core-prim . &i/o-read-rcd) (G5010 core-prim . &i/o-read-rtd) (G500f core-prim . &i/o-rcd) (G500e core-prim . &i/o-rtd) (G500d core-prim . &undefined-rcd) (G500c core-prim . &undefined-rtd) (G500b core-prim . &syntax-rcd) (G500a core-prim . &syntax-rtd) (G5009 core-prim . &lexical-rcd) (G5008 core-prim . &lexical-rtd) (G5007 core-prim . &implementation-restriction-rcd) (G5006 core-prim . &implementation-restriction-rtd) (G5005 core-prim . &non-continuable-rcd) (G5004 core-prim . &non-continuable-rtd) (G5003 core-prim . &who-rcd) (G5002 core-prim . &who-rtd) (G5001 core-prim . &irritants-rcd) (G5000 core-prim . &irritants-rtd) (G4fff core-prim . &assertion-rcd) (G4ffe core-prim . &assertion-rtd) (G4ffd core-prim . &violation-rcd) (G4ffc core-prim . &violation-rtd) (G4ffb core-prim . &error-rcd) (G4ffa core-prim . &error-rtd) (G4ff9 core-prim . &serious-rcd) (G4ff8 core-prim . &serious-rtd) (G4ff7 core-prim . &warning-rcd) (G4ff6 core-prim . &warning-rtd) (G4ff5 core-prim . &message-rcd) (G4ff4 core-prim . &message-rtd) (G4ff3 core-prim . &condition-rcd) (G4ff2 core-prim . &condition-rtd) (G30a6 core-prim . syntax-error) (G2fc3 core-prim . syntax-dispatch) (G4ff1 core-prim . pretty-print) (G4ff0 core-prim . eval-core) (G4fef core-prim . set-symbol-value!) (G4fee core-prim . symbol-value) (G4fed core-prim . gensym) (G4fec core-prim . void) (G4c9e core-prim . load) (G30b8 core-prim . interaction-environment) (G4feb core-prim . char-ready?) (G4fea core-prim . regexp?) (G4fe9 core-prim . read-line) (G4fe8 core-prim . dotted-list?) (G4fe7 core-prim . circular-list?) (G4fe6 core-prim . proper-list?) (G4fe5 core-prim . circular-list) (G4fe4 core-prim . last) (G4fe3 core-prim . last-pair) (G4fe2 core-prim . not-pair?) (G4fe1 core-prim . split-at!) (G4fe0 core-prim . split-at) (G4fdf core-prim . list=) (G4fde core-prim . list-copy) (G4fdd core-prim . list-tabulate) (G4fdc core-prim . make-list) (G4fdb core-prim . xcons) (G4fda core-prim . tenth) (G4fd9 core-prim . ninth) (G4fd8 core-prim . eighth) (G4fd7 core-prim . seventh) (G4fd6 core-prim . sixth) (G4fd5 core-prim . fifth) (G4fd4 core-prim . drop-right!) (G4fd3 core-prim . drop-right) (G4fd2 core-prim . take-right) (G4fd1 core-prim . take!) (G4fd0 core-prim . drop) (G4fcf core-prim . take) (G4fce core-prim . car+cdr) (G4fcd core-prim . third) (G4fcc core-prim . second) (G4fcb core-prim . first) (G4fca core-prim . assoc-ref) (G4fc9 core-prim . alist-cons) (G4fc8 core-prim . print) (G4fc7 core-prim . format) (G4fc6 core-prim . standard-library-path) (G4fc5 core-prim . current-directory) (G4fc4 core-prim . write-to-file) (G4fc3 core-prim . file->list) (G4fc2 core-prim . file->string) (G4fc1 core-prim . digit->integer) (G4fc0 core-prim . call-with-string-input-port) (G4fbf core-prim . call-with-string-io) (G4fbe core-prim . string-split) (G4fbd core-prim . bytevector-for-each) (G4fbc core-prim . string->regexp) (G4fbb core-prim . rxmatch) (G4fba core-prim . regexp-replace-all) (G4fb9 core-prim . hashtable-for-each) (G4fb8 core-prim . readdir) (G4fb7 core-prim . get-environment-variables) (G4fb6 core-prim . get-environment-variable) (G4fb5 core-prim . get-command-line) (G4fb4 core-prim . sys-display) (G4fb3 core-prim . source-info) (G4fb2 core-prim . make-compiler-instruction) (G4fb1 core-prim . make-instruction) (G4fb0 core-prim . set-source-info!) (G4faf core-prim . fasl-write) (G4fae core-prim . receive) (G4fad core-prim . string-upcase) (G4fac core-prim . string-titlecase) (G4fab core-prim . string-normalize-nfkd) (G4faa core-prim . string-normalize-nfkc) (G4fa9 core-prim . string-normalize-nfd) (G4fa8 core-prim . string-normalize-nfc) (G4fa7 core-prim . string-foldcase) (G4fa6 core-prim . string-downcase) (G4fa5 core-prim . string-ci>?) (G4fa4 core-prim . string-ci>=?) (G4fa3 core-prim . string-ci=?) (G4fa2 core-prim . string-ci<?) (G4fa1 core-prim . string-ci<=?) (G4fa0 core-prim . char-whitespace?) (G4f9f core-prim . char-upper-case?) (G4f9e core-prim . char-title-case?) (G4f9d core-prim . char-numeric?) (G4f9c core-prim . char-lower-case?) (G4f9b core-prim . char-general-category) (G4f9a core-prim . char-upcase) (G4f99 core-prim . char-titlecase) (G4f98 core-prim . char-foldcase) (G4f97 core-prim . char-downcase) (G4f96 core-prim . char-ci>?) (G4f95 core-prim . char-ci>=?) (G4f94 core-prim . char-ci=?) (G4f93 core-prim . char-ci<?) (G4f92 core-prim . char-ci<=?) (G4f91 core-prim . char-alphabetic?) (G2dc1 core-prim . make-variable-transformer) (G30ae core-prim . identifier?) (G309e core-prim . generate-temporaries) (G30a0 core-prim . free-identifier=?) (G30b2 core-prim . syntax->datum) (G30b0 core-prim . datum->syntax) (G30a2 core-prim . bound-identifier=?) (G4f90 core-prim . record-type-descriptor?) (G4f8f core-prim . record-predicate) (G4f8e core-prim . record-mutator) (G4f8d core-prim . record-constructor) (G4f8c core-prim . record-accessor) (G4f8b core-prim . make-record-type-descriptor) (G4f8a core-prim . make-record-constructor-descriptor) (G4f89 core-prim . record?) (G4f88 core-prim . record-type-uid) (G4f87 core-prim . record-type-sealed?) (G4f86 core-prim . record-type-parent) (G4f85 core-prim . record-type-opaque?) (G4f84 core-prim . record-type-name) (G4f83 core-prim . record-type-generative?) (G4f82 core-prim . record-type-field-names) (G4f81 core-prim . record-rtd) (G4f80 core-prim . record-field-mutable?) (G4f7f core-prim . delete-file) (G4f7e core-prim . file-exists?) (G4f7d core-prim . vector-sort!) (G4f7c core-prim . vector-sort) (G4f7b core-prim . list-sort) (G4f7a core-prim . symbol-hash) (G4f79 core-prim . string-ci-hash) (G4f78 core-prim . string-hash) (G4f77 core-prim . equal-hash) (G4f76 core-prim . hashtable-equivalence-function) (G4f75 core-prim . make-hashtable) (G4f74 core-prim . hashtable-hash-function) (G4f73 core-prim . make-eqv-hashtable) (G4f72 core-prim . make-eq-hashtable) (G4f71 core-prim . hashtable?) (G4f70 core-prim . hashtable-update!) (G4f6f core-prim . hashtable-size) (G4f6e core-prim . hashtable-set!) (G4f6d core-prim . hashtable-ref) (G4f6c core-prim . hashtable-mutable?) (G4f6b core-prim . hashtable-keys) (G4f6a core-prim . hashtable-entries) (G4f69 core-prim . hashtable-delete!) (G4f68 core-prim . hashtable-copy) (G4f67 core-prim . hashtable-contains?) (G4f66 core-prim . hashtable-clear!) (G4f65 core-prim . call-with-output-file) (G4f64 core-prim . call-with-input-file) (G4f63 core-prim . write-char) (G4f62 core-prim . write) (G4f61 core-prim . with-output-to-file) (G4f60 core-prim . with-input-from-file) (G4f5f core-prim . read-char) (G4f5e core-prim . read) (G4f5d core-prim . peek-char) (G4f5c core-prim . open-output-file) (G4f5b core-prim . open-input-file) (G4f5a core-prim . newline) (G4f59 core-prim . display) (G4f58 core-prim . close-output-port) (G4f57 core-prim . close-input-port) (G4f56 core-prim . eof-object?) (G4f55 core-prim . eof-object) (G4f54 core-prim . current-error-port) (G4f53 core-prim . current-output-port) (G4f52 core-prim . current-input-port) (G4f51 core-prim . output-port?) (G4f50 core-prim . input-port?) (G4f4f core-prim . utf-8-codec) (G4f4e core-prim . utf-16-codec) (G4f4d core-prim . transcoder-error-handling-mode) (G4f4c core-prim . transcoder-eol-style) (G4f4b core-prim . transcoder-codec) (G4f4a core-prim . transcoded-port) (G4f49 core-prim . textual-port?) (G4f48 core-prim . string->bytevector) (G4f47 core-prim . standard-output-port) (G4f46 core-prim . standard-input-port) (G4f45 core-prim . standard-error-port) (G4f44 core-prim . set-port-position!) (G4f43 core-prim . put-u8) (G4f42 core-prim . put-string) (G4f41 core-prim . put-datum) (G4f40 core-prim . put-char) (G4f3f core-prim . put-bytevector) (G4f3e core-prim . port?) (G4f3d core-prim . port-transcoder) (G4f3c core-prim . port-position) (G4f3b core-prim . port-has-set-port-position!?) (G4f3a core-prim . port-has-port-position?) (G4f39 core-prim . port-eof?) (G4f38 core-prim . output-port-buffer-mode) (G4f37 core-prim . open-string-output-port) (G4f36 core-prim . open-string-input-port) (G4f35 core-prim . open-file-output-port) (G4f34 core-prim . open-file-input/output-port) (G4f33 core-prim . open-file-input-port) (G4f32 core-prim . open-bytevector-output-port) (G4f31 core-prim . open-bytevector-input-port) (G4f30 core-prim . native-transcoder) (G4f2f core-prim . native-eol-style) (G4f2e core-prim . make-transcoder) (G4f2d core-prim . latin-1-codec) (G4b75 core-prim . make-i/o-write-error) (G4b61 core-prim . make-i/o-read-error) (G4c0c core-prim . make-i/o-port-error) (G4b8a core-prim . make-i/o-invalid-position-error) (G4ba3 core-prim . make-i/o-filename-error) (G4bbb core-prim . make-i/o-file-protection-error) (G4bcf core-prim . make-i/o-file-is-read-only-error) (G4bf7 core-prim . make-i/o-file-does-not-exist-error) (G4be3 core-prim . make-i/o-file-already-exists-error) (G4b4d core-prim . make-i/o-error) (G4c39 core-prim . make-i/o-encoding-error) (G4c24 core-prim . make-i/o-decoding-error) (G4f2c core-prim . make-custom-textual-output-port) (G4f2b core-prim . make-custom-textual-input/output-port) (G4f2a core-prim . make-custom-textual-input-port) (G4f29 core-prim . make-custom-binary-output-port) (G4f28 core-prim . make-custom-binary-input/output-port) (G4f27 core-prim . make-custom-binary-input-port) (G4f26 core-prim . make-bytevector) (G4f25 core-prim . lookahead-u8) (G4f24 core-prim . lookahead-char) (G4b77 core-prim . i/o-write-error?) (G4b63 core-prim . i/o-read-error?) (G4c10 core-prim . i/o-port-error?) (G4b8e core-prim . i/o-invalid-position-error?) (G4ba7 core-prim . i/o-filename-error?) (G4bbd core-prim . i/o-file-protection-error?) (G4bd1 core-prim . i/o-file-is-read-only-error?) (G4bf9 core-prim . i/o-file-does-not-exist-error?) (G4be5 core-prim . i/o-file-already-exists-error?) (G4b4f core-prim . i/o-error?) (G4c12 core-prim . i/o-error-port) (G4ba9 core-prim . i/o-error-filename) (G4c3d core-prim . i/o-encoding-error?) (G4c3f core-prim . i/o-encoding-error-char) (G4c26 core-prim . i/o-decoding-error?) (G4f23 core-prim . get-u8) (G4f22 core-prim . get-string-n!) (G4f21 core-prim . get-string-n) (G4f20 core-prim . get-string-all) (G4f1f core-prim . get-line) (G4f1e core-prim . get-datum) (G4f1d core-prim . get-char) (G4f1c core-prim . get-bytevector-some) (G4f1b core-prim . get-bytevector-n!) (G4f1a core-prim . get-bytevector-n) (G4f19 core-prim . get-bytevector-all) (G4f18 core-prim . flush-output-port) (G4f17 core-prim . close-port) (G308c core-prim . scheme-report-environment) (G4f16 core-prim . quotient) (G308a core-prim . null-environment) (G4f15 core-prim . remainder) (G4f14 core-prim . modulo) (G4f13 core-prim . inexact->exact) (G4f12 core-prim . force) (G4f11 core-prim . exact->inexact) (G4f10 core-prim . exit) (G4c98 core-prim . command-line) (G4f0f core-prim . string-fill!) (G4f0e core-prim . string-set!) (G4f0d core-prim . set-cdr!) (G4f0c core-prim . set-car!) (G4f0b core-prim . remove) (G4f0a core-prim . remv) (G4f09 core-prim . remp) (G4f08 core-prim . remq) (G4f07 core-prim . partition) (G4f06 core-prim . memv) (G4f05 core-prim . memq) (G4f04 core-prim . memp) (G4f03 core-prim . member) (G4f02 core-prim . exists) (G4f01 core-prim . for-all) (G4f00 core-prim . fold-right) (G4eff core-prim . fold-left) (G4efe core-prim . find) (G4efd core-prim . filter) (G4efc core-prim . cons*) (G4efb core-prim . assv) (G4efa core-prim . assq) (G4ef9 core-prim . assp) (G4ef8 core-prim . assoc) (G4ef7 core-prim . call-with-string-output-port) (G4ef6 core-prim . call-with-port) (G4ef5 core-prim . call-with-bytevector-output-port) (G4ef4 core-prim . bytevector->string) (G4ef3 core-prim . buffer-mode?) (G4ef2 core-prim . binary-port?) (G4ef1 core-prim . with-exception-handler) (G4ef0 core-prim . raise-continuable) (G4eef core-prim . raise) (G3090 core-prim . eval) (G3088 core-prim . environment) (G4eee core-prim . make-enumeration) (G4eed core-prim . enum-set=?) (G4eec core-prim . enum-set-universe) (G4eeb core-prim . enum-set-union) (G4eea core-prim . enum-set-subset?) (G4ee9 core-prim . enum-set-projection) (G4ee8 core-prim . enum-set-member?) (G4ee7 core-prim . enum-set-intersection) (G4ee6 core-prim . enum-set-indexer) (G4ee5 core-prim . enum-set-difference) (G4ee4 core-prim . enum-set-constructor) (G4ee3 core-prim . enum-set-complement) (G4ee2 core-prim . enum-set->list) (G4a6b core-prim . who-condition?) (G49eb core-prim . warning?) (G4a27 core-prim . violation?) (G4adb core-prim . undefined-violation?) (G4ac3 core-prim . syntax-violation?) (G4ac7 core-prim . syntax-violation-subform) (G4ac5 core-prim . syntax-violation-form) (G30ac core-prim . syntax-violation) (G4ee1 core-prim . simple-conditions) (G49ff core-prim . serious-condition?) (G4a81 core-prim . non-continuable-violation?) (G49d5 core-prim . message-condition?) (G4a67 core-prim . make-who-condition) (G49e9 core-prim . make-warning) (G4a25 core-prim . make-violation) (G4ad9 core-prim . make-undefined-violation) (G4abd core-prim . make-syntax-violation) (G49fd core-prim . make-serious-condition) (G4a7f core-prim . make-non-continuable-violation) (G49d1 core-prim . make-message-condition) (G4aa7 core-prim . make-lexical-violation) (G4a4e core-prim . make-irritants-condition) (G4a93 core-prim . make-implementation-restriction-violation) (G4a11 core-prim . make-error) (G4a39 core-prim . make-assertion-violation) (G4aa9 core-prim . lexical-violation?) (G4a52 core-prim . irritants-condition?) (G4a95 core-prim . implementation-restriction-violation?) (G4a13 core-prim . error?) (G4a6d core-prim . condition-who) (G4ee0 core-prim . condition-predicate) (G49d7 core-prim . condition-message) (G4a54 core-prim . condition-irritants) (G4edf core-prim . condition-accessor) (G4ede core-prim . condition) (G4a3b core-prim . assertion-violation?) (G4edd core-prim . condition?) (G4edc core-prim . utf32->string) (G4edb core-prim . utf16->string) (G4eda core-prim . utf8->string) (G4ed9 core-prim . uint-list->bytevector) (G4ed8 core-prim . u8-list->bytevector) (G4ed7 core-prim . string->utf8) (G4ed6 core-prim . string->utf32) (G4ed5 core-prim . string->utf16) (G4ed4 core-prim . sint-list->bytevector) (G4ed3 core-prim . native-endianness) (G4ed2 core-prim . bytevector?) (G4ed1 core-prim . bytevector=?) (G4ed0 core-prim . bytevector-uint-set!) (G4ecf core-prim . bytevector-uint-ref) (G4ece core-prim . bytevector-u8-set!) (G4ecd core-prim . bytevector-u8-ref) (G4ecc core-prim . bytevector-u64-set!) (G4ecb core-prim . bytevector-u64-ref) (G4eca core-prim . bytevector-u64-native-set!) (G4ec9 core-prim . bytevector-u64-native-ref) (G4ec8 core-prim . bytevector-u32-set!) (G4ec7 core-prim . bytevector-u32-ref) (G4ec6 core-prim . bytevector-u32-native-set!) (G4ec5 core-prim . bytevector-u32-native-ref) (G4ec4 core-prim . bytevector-u16-set!) (G4ec3 core-prim . bytevector-u16-ref) (G4ec2 core-prim . bytevector-u16-native-set!) (G4ec1 core-prim . bytevector-u16-native-ref) (G4ec0 core-prim . bytevector-sint-set!) (G4ebf core-prim . bytevector-sint-ref) (G4ebe core-prim . bytevector-s8-set!) (G4ebd core-prim . bytevector-s8-ref) (G4ebc core-prim . bytevector-s64-set!) (G4ebb core-prim . bytevector-s64-ref) (G4eba core-prim . bytevector-s64-native-set!) (G4eb9 core-prim . bytevector-s64-native-ref) (G4eb8 core-prim . bytevector-s32-set!) (G4eb7 core-prim . bytevector-s32-ref) (G4eb6 core-prim . bytevector-s32-native-set!) (G4eb5 core-prim . bytevector-s32-native-ref) (G4eb4 core-prim . bytevector-s16-set!) (G4eb3 core-prim . bytevector-s16-ref) (G4eb2 core-prim . bytevector-s16-native-set!) (G4eb1 core-prim . bytevector-s16-native-ref) (G4eb0 core-prim . bytevector-length) (G4eaf core-prim . bytevector-ieee-single-ref) (G4eae core-prim . bytevector-ieee-single-native-set!) (G4ead core-prim . bytevector-ieee-single-native-ref) (G4eac core-prim . bytevector-ieee-double-ref) (G4eab core-prim . bytevector-ieee-double-native-set!) (G4eaa core-prim . bytevector-ieee-double-native-ref) (G4ea9 core-prim . bytevector-fill!) (G4ea8 core-prim . bytevector-copy!) (G4ea7 core-prim . bytevector-copy) (G4ea6 core-prim . bytevector->uint-list) (G4ea5 core-prim . bytevector->u8-list) (G4ea4 core-prim . bytevector->sint-list) (G4ea3 core-prim . no-nans-violation?) (G4ea2 core-prim . no-infinities-violation?) (G4ea1 core-prim . make-no-nans-violation) (G4ea0 core-prim . make-no-infinities-violation) (G4e9f core-prim . real->flonum) (G4e9e core-prim . flzero?) (G4e9d core-prim . fltruncate) (G4e9c core-prim . fltan) (G4e9b core-prim . flsqrt) (G4e9a core-prim . flsin) (G4e99 core-prim . flround) (G4e98 core-prim . flpositive?) (G4e97 core-prim . flonum?) (G4e96 core-prim . flodd?) (G4e95 core-prim . flnumerator) (G4e94 core-prim . flnegative?) (G4e93 core-prim . flnan?) (G4e92 core-prim . flmod0) (G4e91 core-prim . flmod) (G4e90 core-prim . flmin) (G4e8f core-prim . flmax) (G4e8e core-prim . fllog) (G4e8d core-prim . flinteger?) (G4e8c core-prim . flinfinite?) (G4e8b core-prim . flfloor) (G4e8a core-prim . flfinite?) (G4e89 core-prim . flexpt) (G4e88 core-prim . flexp) (G4e87 core-prim . fleven?) (G4e86 core-prim . fldiv0-and-mod0) (G4e85 core-prim . fldiv0) (G4e84 core-prim . fldiv-and-mod) (G4e83 core-prim . fldiv) (G4e82 core-prim . fldenominator) (G4e81 core-prim . flcos) (G4e80 core-prim . flceiling) (G4e7f core-prim . flatan) (G4e7e core-prim . flasin) (G4e7d core-prim . flacos) (G4e7c core-prim . flabs) (G4e7b core-prim . fl>?) (G4e7a core-prim . fl>=?) (G4e79 core-prim . fl=?) (G4e78 core-prim . fl<?) (G4e77 core-prim . fl<=?) (G4e76 core-prim . fl/) (G4e75 core-prim . fl-) (G4e74 core-prim . fl+) (G4e73 core-prim . fl*) (G4e72 core-prim . fixnum->flonum) (G4e71 core-prim . fxzero?) (G4e70 core-prim . fxxor) (G4e6f core-prim . fxrotate-bit-field) (G4e6e core-prim . fxreverse-bit-field) (G4e6d core-prim . fxpositive?) (G4e6c core-prim . fxodd?) (G4e6b core-prim . fxnot) (G4e6a core-prim . fxnegative?) (G4e69 core-prim . fxmod0) (G4e68 core-prim . fxmod) (G4e67 core-prim . fxmin) (G4e66 core-prim . fxmax) (G4e65 core-prim . fxlength) (G4e64 core-prim . fxior) (G4e63 core-prim . fxif) (G4e62 core-prim . fxfirst-bit-set) (G4e61 core-prim . fxeven?) (G4e60 core-prim . fxdiv0-and-mod0) (G4e5f core-prim . fxdiv0) (G4e5e core-prim . fxdiv-and-mod) (G4e5d core-prim . fxdiv) (G4e5c core-prim . fxcopy-bit-field) (G4e5b core-prim . fxcopy-bit) (G4e5a core-prim . fxbit-set?) (G4e59 core-prim . fxbit-field) (G4e58 core-prim . fxbit-count) (G4e57 core-prim . fxarithmetic-shift-right) (G4e56 core-prim . fxarithmetic-shift-left) (G4e55 core-prim . fxarithmetic-shift) (G4e54 core-prim . fxand) (G4e53 core-prim . fx>?) (G4e52 core-prim . fx>=?) (G4e51 core-prim . fx=?) (G4e50 core-prim . fx<?) (G4e4f core-prim . fx<=?) (G4e4e core-prim . fx-/carry) (G4e4d core-prim . fx-) (G4e4c core-prim . fx+/carry) (G4e4b core-prim . fx+) (G4e4a core-prim . fx*/carry) (G4e49 core-prim . fx*) (G4e48 core-prim . greatest-fixnum) (G4e47 core-prim . least-fixnum) (G4e46 core-prim . fixnum-width) (G4e45 core-prim . fixnum?) (G4e44 core-prim . bitwise-rotate-bit-field) (G4e43 core-prim . bitwise-reverse-bit-field) (G4e42 core-prim . bitwise-length) (G4e41 core-prim . bitwise-if) (G4e40 core-prim . bitwise-first-bit-set) (G4e3f core-prim . bitwise-copy-bit-field) (G4e3e core-prim . bitwise-copy-bit) (G4e3d core-prim . bitwise-bit-set?) (G4e3c core-prim . bitwise-bit-field) (G4e3b core-prim . bitwise-bit-count) (G4e3a core-prim . bitwise-xor) (G4e39 core-prim . bitwise-ior) (G4e38 core-prim . bitwise-and) (G4e37 core-prim . bitwise-not) (G4e36 core-prim . bitwise-arithmetic-shift-right) (G4e35 core-prim . bitwise-arithmetic-shift-left) (G4e34 core-prim . bitwise-arithmetic-shift) (G4e33 core-prim . zero?) (G4e32 core-prim . vector?) (G4e31 core-prim . vector-set!) (G4e30 core-prim . vector-ref) (G4e2f core-prim . vector-map) (G4e2e core-prim . vector-length) (G4e2d core-prim . vector-for-each) (G4e2c core-prim . vector-fill!) (G4e2b core-prim . vector->list) (G4e2a core-prim . vector) (G4e29 core-prim . values) (G4e28 core-prim . truncate) (G4e27 core-prim . tan) (G4e26 core-prim . symbol?) (G4e25 core-prim . symbol=?) (G4e24 core-prim . symbol->string) (G4e23 core-prim . substring) (G4e22 core-prim . string?) (G4e21 core-prim . string>?) (G4e20 core-prim . string>=?) (G4e1f core-prim . string=?) (G4e1e core-prim . string<?) (G4e1d core-prim . string<=?) (G4e1c core-prim . string-ref) (G4e1b core-prim . string-length) (G4e1a core-prim . string-for-each) (G4e19 core-prim . string-copy) (G4e18 core-prim . string-append) (G4e17 core-prim . string->symbol) (G4e16 core-prim . string->number) (G4e15 core-prim . string->list) (G4e14 core-prim . string) (G4e13 core-prim . sqrt) (G4e12 core-prim . sin) (G4e11 core-prim . round) (G4e10 core-prim . reverse) (G4e0f core-prim . real?) (G4e0e core-prim . real-valued?) (G4e0d core-prim . real-part) (G4e0c core-prim . rationalize) (G4e0b core-prim . rational?) (G4e0a core-prim . rational-valued?) (G4e09 core-prim . procedure?) (G4e08 core-prim . positive?) (G4e07 core-prim . pair?) (G4e06 core-prim . odd?) (G4e05 core-prim . numerator) (G4e04 core-prim . number?) (G4e03 core-prim . number->string) (G4e02 core-prim . null?) (G4e01 core-prim . not) (G4e00 core-prim . negative?) (G4dff core-prim . nan?) (G4dfe core-prim . min) (G4dfd core-prim . max) (G4dfc core-prim . map) (G4dfb core-prim . make-vector) (G4dfa core-prim . make-string) (G4df9 core-prim . make-rectangular) (G4df8 core-prim . make-polar) (G4df7 core-prim . magnitude) (G4df6 core-prim . log) (G4df5 core-prim . list?) (G4df4 core-prim . list-tail) (G4df3 core-prim . list-ref) (G4df2 core-prim . list->vector) (G4df1 core-prim . list->string) (G4df0 core-prim . list) (G4def core-prim . length) (G4dee core-prim . lcm) (G4ded core-prim . integer?) (G4dec core-prim . integer-valued?) (G4deb core-prim . integer->char) (G4dea core-prim . infinite?) (G4de9 core-prim . inexact?) (G4de8 core-prim . inexact) (G4de7 core-prim . imag-part) (G4de6 core-prim . gcd) (G4de5 core-prim . for-each) (G4de4 core-prim . floor) (G4de3 core-prim . finite?) (G4de2 core-prim . expt) (G4de1 core-prim . exp) (G4de0 core-prim . exact?) (G4ddf core-prim . exact-integer-sqrt) (G4dde core-prim . exact) (G4ddd core-prim . even?) (G4ddc core-prim . error) (G4ddb core-prim . eqv?) (G4dda core-prim . equal?) (G4dd9 core-prim . eq?) (G4dd8 core-prim . dynamic-wind) (G4dd7 core-prim . div0-and-mod0) (G4dd6 core-prim . mod0) (G4dd5 core-prim . div0) (G4dd4 core-prim . div-and-mod) (G4dd3 core-prim . mod) (G4dd2 core-prim . div) (G4dd1 core-prim . denominator) (G4dd0 core-prim . cos) (G4dcf core-prim . cons) (G4dce core-prim . complex?) (G4dcd core-prim . char?) (G4dcc core-prim . char>?) (G4dcb core-prim . char>=?) (G4dca core-prim . char=?) (G4dc9 core-prim . char<?) (G4dc8 core-prim . char<=?) (G4dc7 core-prim . char->integer) (G4dc6 core-prim . ceiling) (G4dc5 core-prim . call-with-values) (G4dc4 core-prim . call/cc) (G4dc3 core-prim . call-with-current-continuation) (G4dc2 core-prim . cddddr) (G4dc1 core-prim . cdddar) (G4dc0 core-prim . cddadr) (G4dbf core-prim . cddaar) (G4dbe core-prim . cdaddr) (G4dbd core-prim . cdadar) (G4dbc core-prim . cdaadr) (G4dbb core-prim . cdaaar) (G4dba core-prim . cadddr) (G4db9 core-prim . caddar) (G4db8 core-prim . cadadr) (G4db7 core-prim . cadaar) (G4db6 core-prim . caaddr) (G4db5 core-prim . caadar) (G4db4 core-prim . caaadr) (G4db3 core-prim . caaaar) (G4db2 core-prim . cdddr) (G4db1 core-prim . cddar) (G4db0 core-prim . cdadr) (G4daf core-prim . cdaar) (G4dae core-prim . caddr) (G4dad core-prim . cadar) (G4dac core-prim . caadr) (G4dab core-prim . caaar) (G4daa core-prim . cddr) (G4da9 core-prim . cdar) (G4da8 core-prim . cadr) (G4da7 core-prim . caar) (G4da6 core-prim . cdr) (G4da5 core-prim . car) (G4da4 core-prim . boolean?) (G4da3 core-prim . boolean=?) (G4da2 core-prim . atan) (G4da1 core-prim . assertion-violation) (G4da0 core-prim . asin) (G4d9f core-prim . apply) (G4d9e core-prim . append) (G4d9d core-prim . angle) (G4d9c core-prim . acos) (G4d9b core-prim . abs) (G4d9a core-prim . /) (G4d99 core-prim . *) (G4d98 core-prim . -) (G4d97 core-prim . +) (G4d96 core-prim . >=) (G4d95 core-prim . >) (G4d94 core-prim . =) (G4d93 core-prim . <=) (G4d92 core-prim . <) (G4d91 core-prim . library) (G4d90 core-prim . export) (G4d8f $core-rtd &no-nans-rtd &no-nans-rcd) (G4d8e $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4d8d $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4d8c $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4d8b $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4d8a $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4d89 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4d88 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4d87 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4d86 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4d85 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4d84 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4d83 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4d82 $core-rtd &i/o-rtd &i/o-rcd) (G4d81 $core-rtd &undefined-rtd &undefined-rcd) (G4d80 $core-rtd &syntax-rtd &syntax-rcd) (G4d7f $core-rtd &lexical-rtd &lexical-rcd) (G4d7e $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4d7d $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4d7c $core-rtd &who-rtd &who-rcd) (G4d7b $core-rtd &irritants-rtd &irritants-rcd) (G4d7a $core-rtd &assertion-rtd &assertion-rcd) (G4d79 $core-rtd &violation-rtd &violation-rcd) (G4d78 $core-rtd &error-rtd &error-rcd) (G4d77 $core-rtd &serious-rtd &serious-rcd) (G4d76 $core-rtd &warning-rtd &warning-rcd) (G4d75 $core-rtd &message-rtd &message-rcd) (G4d74 $core-rtd &condition-rtd &condition-rcd) (G4d73 macro . define-condition-type) (G4d72 macro . define-enumeration) (G4d71 macro . define-record-type) (G4d70 macro . parent-rtd) (G4d6f macro . nongenerative) (G4d6e macro . opaque) (G4d6d macro . sealed) (G4d6c macro . protocol) (G4d6b macro . parent) (G4d6a macro . immutable) (G4d69 macro . mutable) (G4d68 macro . fields) (G4d67 macro . error-handling-mode) (G4d66 macro . file-options) (G4d65 macro . buffer-mode) (G4d64 macro . eol-style) (G4d63 macro . guard) (G4d62 macro . trace-define) (G4d61 macro . trace-lambda) (G4d60 macro . unsyntax-splicing) (G4d5f macro . unsyntax) (G4d5e macro . unquote-splicing) (G4d5d macro . unquote) (G4d5c macro . _) (G4d5b macro . else) (G4d5a macro . =>) (G4d59 macro . ...) (G4d58 macro . assert) (G4d57 macro . endianness) (G4d56 macro . delay) (G4d55 macro . time) (G4d54 macro . or) (G4d53 macro . and) (G4d52 macro . do) (G4d51 macro . cond) (G4d50 macro . let*) (G4d4f macro . let) (G4d4e macro . let*-values) (G4d4d macro . let-values) (G4d4c macro . identifier-syntax) (G4d4b macro . with-syntax) (G4d4a macro . quasisyntax) (G4d49 macro . quasiquote) (G4d48 macro . syntax-rules) (G4d47 macro . include) (G4d46 macro . define-struct) (G4d45 core-macro . record-constructor-descriptor) (G4d44 core-macro . record-type-descriptor) (G4d43 core-macro . case) (G4d42 core-macro . parameterize) (G4d41 core-macro . unless) (G4d40 core-macro . when) (G4d3f core-macro . if) (G4d3e core-macro . letrec*) (G4d3d core-macro . letrec) (G4d3c core-macro . type-descriptor) (G4d3b core-macro . case-lambda) (G4d3a core-macro . lambda) (G4d39 core-macro . syntax) (G4d38 core-macro . syntax-case) (G4d37 core-macro . quote) (G4d36 core-macro . foreign-call) (G4d35 letrec-syntax) (G4d34 let-syntax) (G4d33 set!) (G4d32 import) (G4d31 begin) (G4d30 module) (G4d2f define-syntax) (G4d2e define)) values values '#f '#f '#f '#f) (G2b7e@G2a14@install-library 'G504a '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G4ff1) (eval-core . G4ff0) (set-symbol-value! . G4fef) (symbol-value . G4fee) (gensym . G4fed) (void . G4fec)) '() values values '#f '#f '#f '#f) (G2b7e@G2a14@install-library 'G504b '(mosh) '() '() '() '() '((symbol-value . G4fee) (standard-library-path . G4fc6) (get-command-line . G4fb5) (sys-display . G4fb4) (source-info . G4fb3) (make-compiler-instruction . G4fb2) (make-instruction . G4fb1) (set-source-info! . G4fb0) (fasl-write . G4faf) (include . G4d47)) '() values values '#f '#f '#f '#f) (G2b7e@G2a14@install-library 'G504c '(mosh backend) '() '() '() '() '((receive . G4fae)) '() values values '#f '#f '#f '#f) (G2b7e@G2a14@install-library 'G504d '(mosh file) '() '() '() '() '((read-line . G4fe9) (current-directory . G4fc5) (write-to-file . G4fc4) (file->list . G4fc3) (file->string . G4fc2)) '() values values '#f '#f '#f '#f) (G2b7e@G2a14@install-library 'G504e '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G4fbd)) '() values values '#f '#f '#f '#f) (G2b7e@G2a14@install-library 'G504f '(mosh number) '() '() '() '() '((digit->integer . G4fc1)) '() values values '#f '#f '#f '#f) (G2b7e@G2a14@install-library 'G5050 '(mosh string) '() '() '() '() '((print . G4fc8) (format . G4fc7) (call-with-string-input-port . G4fc0) (call-with-string-io . G4fbf) (string-split . G4fbe) (string->regexp . G4fbc)) '() values values '#f '#f '#f '#f) (G2b7e@G2a14@install-library 'G5051 '(mosh list) '() '() '() '() '((assoc-ref . G4fca)) '() values values '#f '#f '#f '#f) (G2b7e@G2a14@install-library 'G5052 '(mosh regexp) '() '() '() '() '((rxmatch . G4fbb) (regexp-replace-all . G4fba)) '() values values '#f '#f '#f '#f) (G2b7e@G2a14@install-library 'G5053 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G4fb9)) '() values values '#f '#f '#f '#f) (G2b7e@G2a14@install-library 'G5054 '(system) '() '() '() '() '((readdir . G4fb8) (get-environment-variables . G4fb7) (get-environment-variable . G4fb6)) '() values values '#f '#f '#f '#f) (G2b7e@G2a14@install-library 'G5055 '(srfi :1) '() '() '() '() '((dotted-list? . G4fe8) (circular-list? . G4fe7) (proper-list? . G4fe6) (circular-list . G4fe5) (last . G4fe4) (last-pair . G4fe3) (not-pair? . G4fe2) (split-at! . G4fe1) (split-at . G4fe0) (list= . G4fdf) (list-copy . G4fde) (list-tabulate . G4fdd) (make-list . G4fdc) (xcons . G4fdb) (tenth . G4fda) (ninth . G4fd9) (eighth . G4fd8) (seventh . G4fd7) (sixth . G4fd6) (fifth . G4fd5) (drop-right! . G4fd4) (drop-right . G4fd3) (take-right . G4fd2) (take! . G4fd1) (drop . G4fd0) (take . G4fcf) (car+cdr . G4fce) (third . G4fcd) (second . G4fcc) (first . G4fcb) (alist-cons . G4fc9)) '() values values '#f '#f '#f '#f))
((lambda (G4c93@for-each-with-index G4c95@repl G4c97@trace-printer G4c99@command-line G4c9b@local-library-path G4c9d@load/args G4c9f@load G4ca1@ironscheme-build G4ca3@eval-top-level G4ca5@compile-system-libraries G4ca7@compile G4ca9@compile->closure G4cab@load-r6rs-top-level G4cad@write-record) (begin (set! G4c93@for-each-with-index (lambda (G4cc1@proc G4cc2@lst) (letrec ((G4cc5@loop (lambda (G4cc7@i G4cc8@lst) (if (null? G4cc8@lst) (if '#f '#f (void)) (begin (G4cc1@proc G4cc7@i (car G4cc8@lst)) (G4cc5@loop (+ G4cc7@i '1) (cdr G4cc8@lst))))))) (G4cc5@loop '1 G4cc2@lst)))) (set! G4c95@repl (lambda G4ccb@x ((lambda (G4cce@rec) (begin (set! G4cce@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4cd0@G4ccf) (with-exception-handler (lambda (G4cd2@e) (G4cd0@G4ccf (if '#t (G4c93@for-each-with-index (lambda (G4cd4@i G4cd5@x) ((lambda (G4cd8@rtd) (begin (format '#t '"   ~d. ~a" G4cd4@i (record-type-name G4cd8@rtd)) ((lambda (G4cda@v) ((lambda (G4cdc@t) (if (eqv? G4cdc@t '0) (newline) (if (eqv? G4cdc@t '1) (begin (display '": ") (write ((record-accessor G4cd8@rtd '0) G4cd5@x)) (newline)) (begin (display '":\n") ((letrec ((G4cdd@f (lambda (G4cdf@i) (if (= G4cdf@i (vector-length G4cda@v)) (void) (begin (display '"       ") (display (vector-ref G4cda@v G4cdf@i)) (display '": ") (write ((record-accessor G4cd8@rtd G4cdf@i) G4cd5@x)) (newline) (G4cdd@f (+ G4cdf@i '1))))))) G4cdd@f) '0))))) (vector-length G4cda@v))) (record-type-field-names G4cd8@rtd)))) (record-rtd G4cd5@x))) (simple-conditions G4cd2@e)) (raise G4cd2@e)))) (lambda () (begin '#f ((lambda (G4ce1@line) (if (eof-object? G4ce1@line) (exit) (write (G4ca3@eval-top-level (call-with-port (open-string-input-port G4ce1@line) read))))) (get-line (current-input-port)))))))) (newline) (G4cce@rec)))) (G4cce@rec))) '#f))) (set! G4c97@trace-printer (G28e1@G2814@make-parameter write)) (set! G4c99@command-line (G28e1@G2814@make-parameter (get-command-line))) (set! G4c9b@local-library-path (lambda (G4ce3@filename) (cons '"." (G2b6e@G29f4@library-path)))) (set! G4c9d@load/args (lambda (G4ce5@filename . G4ce7@args) (begin (apply G4cab@load-r6rs-top-level G4ce5@filename 'load G4ce7@args) (void)))) (set! G4c9f@load (lambda (G4ce9@filename) (begin (apply G4cab@load-r6rs-top-level G4ce9@filename 'load (G4c99@command-line)) (void)))) (set! G4ca1@ironscheme-build (lambda () (G4c9f@load '"ironscheme-buildscript.ss"))) (set! G4ca3@eval-top-level (lambda (G4ceb@x) (G4991@G3091@eval G4ceb@x (G49a5@G30b9@interaction-environment)))) (set! G4ca5@compile-system-libraries (lambda () (G4ca3@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4ca7@compile (lambda (G4ced@filename) (G4cab@load-r6rs-top-level G4ced@filename 'compile))) (set! G4ca9@compile->closure (lambda (G4cef@filename) (G4cab@load-r6rs-top-level G4cef@filename 'closure))) (set! G4cab@load-r6rs-top-level (lambda (G4cf1@filename G4cf2@how . G4cf5@args) ((lambda (G4cf9@G4cf7@library-path G4cfa@G4cf8@library-path) ((lambda (G4cfd@swap) (dynamic-wind G4cfd@swap (lambda () ((lambda (G4cff@x*) ((lambda (G4d01@t) (if (eqv? G4d01@t 'closure) (G49a4@G30b7@pre-compile-r6rs-top-level G4cff@x*) (if (eqv? G4d01@t 'load) ((lambda (G4d04@G4d02@command-line G4d05@G4d03@command-line) ((lambda (G4d08@swap) (dynamic-wind G4d08@swap (lambda () ((G49a3@G30b5@compile-r6rs-top-level G4cff@x*))) G4d08@swap)) (lambda () ((lambda (G4d0a@t) (begin (G4d04@G4d02@command-line G4d05@G4d03@command-line) (set! G4d05@G4d03@command-line G4d0a@t))) (G4d04@G4d02@command-line))))) G4c99@command-line (cons G4cf1@filename (car G4cf5@args))) (if (eqv? G4d01@t 'compile) (begin (G49a3@G30b5@compile-r6rs-top-level G4cff@x*) (G2b72@G29fc@serialize-all G28dc@G280a@serialize-library G2945@G28ef@compile-core-expr)) (void))))) G4cf2@how)) (with-input-from-file G4cf1@filename (lambda () ((letrec ((G4d0c@f (lambda () ((lambda (G4d0e@x) (if (eof-object? G4d0e@x) '() (cons G4d0e@x (G4d0c@f)))) (G28d7@G2800@read-annotated))))) G4d0c@f)))))) G4cfd@swap)) (lambda () ((lambda (G4d10@t) (begin (G4cf9@G4cf7@library-path G4cfa@G4cf8@library-path) (set! G4cfa@G4cf8@library-path G4d10@t))) (G4cf9@G4cf7@library-path))))) G2b6e@G29f4@library-path (G4c9b@local-library-path G4cf1@filename)))) (set! G4cad@write-record (lambda (G4d12@record G4d13@port) ((lambda (G4d16@rtd) (begin (format G4d13@port '"    ~a" (record-type-name G4d16@rtd)) ((lambda (G4d18@v) ((lambda (G4d1a@t) (if (eqv? G4d1a@t '0) (newline) (if (eqv? G4d1a@t '1) (begin (display '": " G4d13@port) (write ((record-accessor G4d16@rtd '0) G4d12@record) G4d13@port) (newline G4d13@port)) (begin (display '":\n") ((letrec ((G4d1b@f (lambda (G4d1d@i) (if (= G4d1d@i (vector-length G4d18@v)) (void) (begin (display '"       " G4d13@port) (display (vector-ref G4d18@v G4d1d@i) G4d13@port) (display '": " G4d13@port) (write ((record-accessor G4d16@rtd G4d1d@i) G4d12@record) G4d13@port) (newline G4d13@port) (G4d1b@f (+ G4d1d@i '1))))))) G4d1b@f) '0))))) (vector-length G4d18@v))) (record-type-field-names G4d16@rtd)))) (record-rtd G4d12@record)))) (begin (set! G4d2c@G4cad@write-record G4cad@write-record) (set! G4d2b@G4cab@load-r6rs-top-level G4cab@load-r6rs-top-level) (set! G4d2a@G4ca9@compile->closure G4ca9@compile->closure) (set! G4d29@G4ca7@compile G4ca7@compile) (set! G4d28@G4ca5@compile-system-libraries G4ca5@compile-system-libraries) (set! G4d27@G4ca3@eval-top-level G4ca3@eval-top-level) (set! G4d26@G4ca1@ironscheme-build G4ca1@ironscheme-build) (set! G4d25@G4c9f@load G4c9f@load) (set! G4d24@G4c9d@load/args G4c9d@load/args) (set! G4d23@G4c9b@local-library-path G4c9b@local-library-path) (set! G4d22@G4c99@command-line G4c99@command-line) (set! G4d21@G4c97@trace-printer G4c97@trace-printer) (set! G4d20@G4c95@repl G4c95@repl) (set! G4d1f@G4c93@for-each-with-index G4c93@for-each-with-index) (G2b73@G29fe@current-precompiled-library-loader G28dd@G280c@load-serialized-library) (set-symbol-value! 'load G4c9f@load) (set-symbol-value! 'eval-r6rs G4ca3@eval-top-level) (set-symbol-value! 'int-env-syms G498a@G3083@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2944@G28ed@expanded->core) (set-symbol-value! 'trace-printer G4c97@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2b6e@G29f4@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4cae@args G4caf@port) (with-exception-handler (lambda (G4cb2@c) (begin (display '" Condition components:\n" G4caf@port) (G4c93@for-each-with-index (lambda (G4cb4@i G4cb5@x) ((lambda (G4cb8@rtd) (begin (format G4caf@port '"   ~d. ~a" G4cb4@i (record-type-name G4cb8@rtd)) ((lambda (G4cba@v) ((lambda (G4cbc@t) (if (eqv? G4cbc@t '0) (newline) (if (eqv? G4cbc@t '1) (begin (display '": ") (write ((record-accessor G4cb8@rtd '0) G4cb5@x)) (newline)) (begin (display '":\n") ((letrec ((G4cbd@f (lambda (G4cbf@i) (if (= G4cbf@i (vector-length G4cba@v)) (void) (begin (display '"       ") (display (vector-ref G4cba@v G4cbf@i)) (display '": ") (write ((record-accessor G4cb8@rtd G4cbf@i) G4cb5@x)) (newline) (G4cbd@f (+ G4cbf@i '1))))))) G4cbd@f) '0))))) (vector-length G4cba@v))) (record-type-field-names G4cb8@rtd)))) (record-rtd G4cb5@x))) (simple-conditions G4cb2@c)))) (lambda () (if (null? G4cae@args) (G4c95@repl) (G4cab@load-r6rs-top-level (car G4cae@args) 'load (cdr G4cae@args)))))) (G4c99@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
