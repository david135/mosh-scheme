;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2827@read-annotated G2829@annotation-stripped G282b@annotation? G282d@annotation-source G282f@annotation-expression G2831@scm->fasl G2833@fasl-save G2835@fasl-load G2837@serialize-library G2839@load-serialized-library G283b@make-record-printer G283d@compile-core G283f@read-library-source-file G2841@make-parameter G28ad@file-options-spec) (begin (set! G2827@read-annotated read) (set! G2829@annotation-stripped (lambda (G28ae@x) (G282f@annotation-expression G28ae@x))) (set! G282b@annotation? (lambda (G28b0@x) (source-info G28b0@x))) (set! G282d@annotation-source (lambda (G28b2@x) (source-info G28b2@x))) (set! G282f@annotation-expression (lambda (G28b4@x) (if (pair? G28b4@x) (cons (car G28b4@x) (cdr G28b4@x)) (display '"line:46\n")))) (set! G2831@scm->fasl (lambda (G28b6@filename) (string-append G28b6@filename '".fasl"))) (set! G2833@fasl-save (lambda (G28b8@filename G28b9@obj) (call-with-port (open-file-output-port G28b8@filename) (lambda (G28bc@port) ((symbol-value 'fasl-write!) G28b9@obj G28bc@port))))) (set! G2835@fasl-load (lambda (G28be@filename) (call-with-port (open-file-input-port G28be@filename) (symbol-value 'fasl-read!)))) (set! G2837@serialize-library (lambda (G28c0@filename G28c1@obj) (begin (format '#t '"serialize-library ~a\n..." G28c0@filename) ((lambda (G28c4@fasl-file) (begin (if (file-exists? G28c4@fasl-file) (delete-file G28c4@fasl-file) (void)) ((call/cc (lambda (G28c8@G28c6) (lambda () (with-exception-handler (lambda (G28ca@c) ((call/cc (lambda (G28cc@G28c7) (G28c8@G28c6 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28c0@filename) (if (file-exists? G28c4@fasl-file) (delete-file G28c4@fasl-file) (void)) '#f) (G28cc@G28c7 (lambda () (raise-continuable G28ca@c)))))))))) (lambda () (begin '#f (G2833@fasl-save G28c4@fasl-file G28c1@obj) (display '"OK\n")))))))))) (G2831@scm->fasl G28c0@filename))))) (set! G2839@load-serialized-library (lambda (G28ce@filename G28cf@obj) ((lambda (G28d2@fasl-file) (if (and (file-exists? G28d2@fasl-file) ((symbol-value 'file-newer?) G28d2@fasl-file G28ce@filename)) ((lambda (G28d4@expanded2core) ((lambda (G28d6@code) ((lambda (G28d8@pivot) ((lambda (G28da@visit) ((lambda (G28dc@visit-proc) ((lambda () (begin (set-car! G28d8@pivot G28dc@visit-proc) ((lambda (G28de@pivot) ((lambda (G28e0@invoke) ((lambda () (begin (set-car! G28de@pivot (lambda () (eval-core G28e0@invoke))) (apply G28cf@obj G28d6@code))))) (G28d4@expanded2core (car G28de@pivot)))) (cdr G28d8@pivot)) '#t)))) (lambda () (eval-core G28da@visit)))) (G28d4@expanded2core (car G28d8@pivot)))) (cddddr (cddddr G28d6@code)))) (G2835@fasl-load G28d2@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2831@scm->fasl G28ce@filename)))) (set! G283b@make-record-printer (lambda (G28e2@name G28e3@printer) (lambda G28e6@x (begin (display '"record printer") (for-each display G28e6@x))))) (set! G283d@compile-core (lambda G28e8@x (apply error 'comile-core '"not implementated" G28e8@x))) (set! G283f@read-library-source-file (lambda (G28ea@file-name) (with-input-from-file G28ea@file-name G2827@read-annotated))) (set! G2841@make-parameter (lambda G28fa ((lambda (G28fb) (if (= G28fb '1) (apply (lambda (G28ec@x) (G2841@make-parameter G28ec@x (lambda (G28ee@x) G28ee@x))) G28fa) (if (= G28fb '2) (apply (lambda (G28f0@x G28f1@fender) ((lambda (G28f4@x) (lambda G28f8 ((lambda (G28f9) (if (= G28f9 '0) (apply (lambda () G28f4@x) G28f8) (if (= G28f9 '1) (apply (lambda (G28f6@v) (set! G28f4@x (G28f1@fender G28f6@v))) G28f8) (error 'apply '"invalid arg count")))) (length G28f8)))) (G28f1@fender G28f0@x))) G28fa) (error 'apply '"invalid arg count")))) (length G28fa)))) (set! G28ad@file-options-spec (lambda (G28fc@x) G28fc@x)) (begin (set! G290c@G28ad@file-options-spec G28ad@file-options-spec) (set! G290b@G2841@make-parameter G2841@make-parameter) (set! G290a@G283f@read-library-source-file G283f@read-library-source-file) (set! G2909@G283d@compile-core G283d@compile-core) (set! G2908@G283b@make-record-printer G283b@make-record-printer) (set! G2907@G2839@load-serialized-library G2839@load-serialized-library) (set! G2906@G2837@serialize-library G2837@serialize-library) (set! G2905@G2835@fasl-load G2835@fasl-load) (set! G2904@G2833@fasl-save G2833@fasl-save) (set! G2903@G2831@scm->fasl G2831@scm->fasl) (set! G2902@G282f@annotation-expression G282f@annotation-expression) (set! G2901@G282d@annotation-source G282d@annotation-source) (set! G2900@G282b@annotation? G282b@annotation?) (set! G28ff@G2829@annotation-stripped G2829@annotation-stripped) (set! G28fe@G2827@read-annotated G2827@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2911@current-primitive-locations G2913@mutable? G2915@rewriter G2917@expanded->core G2919@compile-core-expr G291b@pretty-print G291d@compile-core-expr-to-port) (begin (set! G2911@current-primitive-locations (G290b@G2841@make-parameter (lambda (G291e@x) '#f) (lambda (G2920@p) G2920@p))) (set! G2913@mutable? (lambda (G2922@x) (or (pair? G2922@x) (vector? G2922@x) (hashtable? G2922@x)))) (set! G2915@rewriter (lambda (G2924@quote-hack?) ((lambda (G2927@f) (begin (set! G2927@f (lambda (G2928@x) (if (pair? G2928@x) ((lambda (G292a@t) (if (memv G292a@t '(quote)) (if (and G2924@quote-hack? (G2913@mutable? (cadr G2928@x))) ((lambda (G292c@g) (begin (set-symbol-value! G292c@g (cadr G2928@x)) G292c@g)) (gensym)) G2928@x) (if (memv G292a@t '(case-lambda)) (cons 'case-lambda (map (lambda (G292e@x) (cons (car G292e@x) (map G2927@f (cdr G292e@x)))) (cdr G2928@x))) (if (memv G292a@t '(lambda)) (cons* 'lambda (cadr G2928@x) (map G2927@f (cddr G2928@x))) (if (memv G292a@t '(letrec)) ((lambda (G2930@bindings G2931@body*) ((lambda (G2934@lhs* G2935@rhs*) (cons* 'letrec (map list G2934@lhs* (map G2927@f G2935@rhs*)) (map G2927@f G2931@body*))) (map car G2930@bindings) (map cadr G2930@bindings))) (cadr G2928@x) (cddr G2928@x)) (if (memv G292a@t '(letrec*)) ((lambda (G2938@bindings G2939@body*) ((lambda (G293c@lhs* G293d@rhs*) (cons* 'letrec* (map list G293c@lhs* (map G2927@f G293d@rhs*)) (map G2927@f G2939@body*))) (map car G2938@bindings) (map cadr G2938@bindings))) (cadr G2928@x) (cddr G2928@x)) (if (memv G292a@t '(library-letrec*)) ((lambda (G2940@name G2941@x) ((lambda (G2944@bindings G2945@body*) ((lambda (G2948@lhs* G2949@lhs** G294a@rhs*) (cons* 'library-letrec* G2940@name (map list G2948@lhs* G2949@lhs** (map G2927@f G294a@rhs*)) (map G2927@f G2945@body*))) (map car G2944@bindings) (map cadr G2944@bindings) (map caddr G2944@bindings))) (cadr G2941@x) (cddr G2941@x))) (cadr G2928@x) (cdr G2928@x)) (if (memv G292a@t '(begin)) (cons 'begin (map G2927@f (cdr G2928@x))) (if (memv G292a@t '(set!)) (list 'set! (cadr G2928@x) (G2927@f (caddr G2928@x))) (if (memv G292a@t '(primitive)) ((lambda (G294e@op) ((lambda (G2950@t) (if G2950@t ((lambda (G2952@loc) G2952@loc) G2950@t) G294e@op)) ((G2911@current-primitive-locations) G294e@op))) (cadr G2928@x)) (if (memv G292a@t '(define)) G2928@x (if (list? G2928@x) (map G2927@f G2928@x) (error 'rewrite '"invalid form ~s ~s" G2928@x (list? G2928@x)))))))))))))) (car G2928@x)) G2928@x))) G2927@f)) '#f))) (set! G2917@expanded->core (lambda (G2954@x) ((G2915@rewriter '#t) G2954@x))) (set! G2919@compile-core-expr (lambda (G2956@x) ((G2915@rewriter '#f) G2956@x))) (set! G291b@pretty-print write) (set! G291d@compile-core-expr-to-port (lambda (G2958@x G2959@p) (G291b@pretty-print ((G2915@rewriter '#f) G2958@x) G2959@p))) (begin (set! G2962@G291d@compile-core-expr-to-port G291d@compile-core-expr-to-port) (set! G2961@G291b@pretty-print G291b@pretty-print) (set! G2960@G2919@compile-core-expr G2919@compile-core-expr) (set! G295f@G2917@expanded->core G2917@expanded->core) (set! G295e@G2915@rewriter G2915@rewriter) (set! G295d@G2913@mutable? G2913@mutable?) (set! G295c@G2911@current-primitive-locations G2911@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29b8@make-collection G29ba@current-library-collection G29c0@G29bb G29c2@G29bd G29c4@G29bc G29c7@library? G29c9@make-library G29cb@library-id G29cd@library-name G29cf@library-version G29d1@library-imp* G29d3@library-vis* G29d5@library-inv* G29d7@library-subst G29d9@library-env G29db@library-visit-state G29dd@library-invoke-state G29df@library-visit-code G29e1@library-invoke-code G29e3@library-visible? G29e5@library-source-file-name G29e7@set-library-id! G29e9@set-library-name! G29eb@set-library-version! G29ed@set-library-imp*! G29ef@set-library-vis*! G29f1@set-library-inv*! G29f3@set-library-subst! G29f5@set-library-env! G29f7@set-library-visit-state! G29f9@set-library-invoke-state! G29fb@set-library-visit-code! G29fd@set-library-invoke-code! G29ff@set-library-visible?! G2a01@set-library-source-file-name! G2a03@rp G2a05@find-dependencies G2a07@find-library-by G2a09@library-path G2a0b@library-extensions G2a0d@library-name->file-name G2a0f@file-locator G2a11@serialize-all G2a13@current-precompiled-library-loader G2a15@try-load-from-file G2a17@library-loader G2a19@current-library-expander G2a1b@external-pending-libraries G2a1d@find-external-library G2a1f@find-library-by-name G2a21@library-exists? G2a23@find-library-by-spec/die G2a25@label->binding-table G2a27@install-library-record G2a29@install-library G2a2b@imported-label->binding G2a2d@invoke-library G2a2f@visit-library G2a31@invoke-library-by-spec G2a33@installed-libraries G2a35@library-spec) (begin (set! G29b8@make-collection (lambda () ((lambda (G2a36@set) ((lambda (G2a39@set-cons) (begin (set! G2a39@set-cons (lambda (G2a3e@x G2a3f@ls) (if (memq G2a3e@x G2a3f@ls) G2a3f@ls (cons G2a3e@x G2a3f@ls)))) (lambda G2a3c ((lambda (G2a3d) (if (= G2a3d '0) (apply (lambda () G2a36@set) G2a3c) (if (= G2a3d '1) (apply (lambda (G2a3a@x) (set! G2a36@set (G2a39@set-cons G2a3a@x G2a36@set))) G2a3c) (error 'apply '"invalid arg count")))) (length G2a3c))))) '#f)) '()))) (set! G29ba@current-library-collection (G290b@G2841@make-parameter (G29b8@make-collection) (lambda (G2a42@x) (begin (if (not (procedure? G2a42@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a42@x) (void)) G2a42@x)))) (set! G29c0@G29bb (make-record-type-descriptor 'library '#f 'G29be '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29c2@G29bd '#f) (set! G29c4@G29bc (make-record-constructor-descriptor G29c0@G29bb '#f G29c2@G29bd)) (set! G29c7@library? (record-predicate G29c0@G29bb)) (set! G29c9@make-library (record-constructor G29c4@G29bc)) (set! G29cb@library-id (record-accessor G29c0@G29bb '0)) (set! G29cd@library-name (record-accessor G29c0@G29bb '1)) (set! G29cf@library-version (record-accessor G29c0@G29bb '2)) (set! G29d1@library-imp* (record-accessor G29c0@G29bb '3)) (set! G29d3@library-vis* (record-accessor G29c0@G29bb '4)) (set! G29d5@library-inv* (record-accessor G29c0@G29bb '5)) (set! G29d7@library-subst (record-accessor G29c0@G29bb '6)) (set! G29d9@library-env (record-accessor G29c0@G29bb '7)) (set! G29db@library-visit-state (record-accessor G29c0@G29bb '8)) (set! G29dd@library-invoke-state (record-accessor G29c0@G29bb '9)) (set! G29df@library-visit-code (record-accessor G29c0@G29bb '10)) (set! G29e1@library-invoke-code (record-accessor G29c0@G29bb '11)) (set! G29e3@library-visible? (record-accessor G29c0@G29bb '12)) (set! G29e5@library-source-file-name (record-accessor G29c0@G29bb '13)) (set! G29e7@set-library-id! (record-mutator G29c0@G29bb '0)) (set! G29e9@set-library-name! (record-mutator G29c0@G29bb '1)) (set! G29eb@set-library-version! (record-mutator G29c0@G29bb '2)) (set! G29ed@set-library-imp*! (record-mutator G29c0@G29bb '3)) (set! G29ef@set-library-vis*! (record-mutator G29c0@G29bb '4)) (set! G29f1@set-library-inv*! (record-mutator G29c0@G29bb '5)) (set! G29f3@set-library-subst! (record-mutator G29c0@G29bb '6)) (set! G29f5@set-library-env! (record-mutator G29c0@G29bb '7)) (set! G29f7@set-library-visit-state! (record-mutator G29c0@G29bb '8)) (set! G29f9@set-library-invoke-state! (record-mutator G29c0@G29bb '9)) (set! G29fb@set-library-visit-code! (record-mutator G29c0@G29bb '10)) (set! G29fd@set-library-invoke-code! (record-mutator G29c0@G29bb '11)) (set! G29ff@set-library-visible?! (record-mutator G29c0@G29bb '12)) (set! G2a01@set-library-source-file-name! (record-mutator G29c0@G29bb '13)) (set! G2a03@rp (G2908@G283b@make-record-printer 'library (lambda (G2a44@x G2a45@p G2a46@wr) (begin (if (not (G29c7@library? G2a44@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29cf@library-version G2a44@x)) (G29cd@library-name G2a44@x) (append (G29cd@library-name G2a44@x) (list (G29cf@library-version G2a44@x))))) G2a45@p))))) (set! G2a05@find-dependencies (lambda (G2a4a@ls) (if (null? G2a4a@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2a07@find-library-by (lambda (G2a4c@pred) ((letrec ((G2a4e@f (lambda (G2a50@ls) (if (null? G2a50@ls) '#f (if (G2a4c@pred (car G2a50@ls)) (car G2a50@ls) (G2a4e@f (cdr G2a50@ls))))))) G2a4e@f) ((G29ba@current-library-collection))))) (set! G2a09@library-path (G290b@G2841@make-parameter '(".") (lambda (G2a52@x) (if (and (list? G2a52@x) (for-all string? G2a52@x)) (map (lambda (G2a54@x) G2a54@x) G2a52@x) (assertion-violation 'library-path '"not a list of strings" G2a52@x))))) (set! G2a0b@library-extensions (G290b@G2841@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a56@x) (if (and (list? G2a56@x) (for-all string? G2a56@x)) (map (lambda (G2a58@x) G2a58@x) G2a56@x) (assertion-violation 'library-extensions '"not a list of strings" G2a56@x))))) (set! G2a0d@library-name->file-name (lambda (G2a5a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a5e@G2a5c G2a5f@G2a5d) ((lambda (G2a62@extract G2a63@p) ((lambda (G2a67@display-hex) (begin (set! G2a67@display-hex (lambda (G2a70@n) (if (<= '0 G2a70@n '9) (display G2a70@n G2a63@p) (display (integer->char (+ (char->integer '#\A) (- G2a70@n '10))) G2a63@p)))) (begin ((letrec ((G2a68@f (lambda (G2a6a@ls) (if (not (null? G2a6a@ls)) (begin (display '"/" G2a63@p) (for-each (lambda (G2a6c@c) (if (or (char<=? '#\a G2a6c@c '#\z) (char<=? '#\A G2a6c@c '#\Z) (char<=? '#\0 G2a6c@c '#\9) (memv G2a6c@c '(#\- #\. #\_ #\~))) (display G2a6c@c G2a63@p) (begin (display '"%" G2a63@p) ((lambda (G2a6e@n) (begin (G2a67@display-hex (quotient G2a6e@n '16)) (G2a67@display-hex (remainder G2a6e@n '16)))) (char->integer G2a6c@c))))) (string->list (symbol->string (car G2a6a@ls)))) (G2a68@f (cdr G2a6a@ls))) (void))))) G2a68@f) G2a5a@x) (G2a62@extract)))) '#f)) G2a5f@G2a5d G2a5e@G2a5c))))) (set! G2a0f@file-locator (G290b@G2841@make-parameter (lambda (G2a72@x) ((lambda (G2a74@str) ((letrec ((G2a76@f (lambda (G2a78@ls G2a79@exts G2a7a@failed-list) (if (null? G2a78@ls) ((lambda () ((lambda (G2a86@G2a81 G2a88@G2a83 G2a8a@G2a82 G2a8d@G2a80 G2a8f@make-library-resolution-condition G2a91@G2a7e G2a93@G2a7f G2a95@library-resolution-condition? G2a97@condition-library G2a99@condition-files) (begin (set! G2a86@G2a81 (make-record-type-descriptor '&library-resolution G4c41@G4992@&condition-rtd 'G2a84 '#f '#f '#((immutable library) (immutable files)))) (set! G2a88@G2a83 '#f) (set! G2a8a@G2a82 (make-record-constructor-descriptor G2a86@G2a81 G4c42@G4994@&condition-rcd G2a88@G2a83)) (set! G2a8d@G2a80 (record-predicate G2a86@G2a81)) (set! G2a8f@make-library-resolution-condition (record-constructor G2a8a@G2a82)) (set! G2a91@G2a7e (record-accessor G2a86@G2a81 '0)) (set! G2a93@G2a7f (record-accessor G2a86@G2a81 '1)) (set! G2a95@library-resolution-condition? (condition-predicate G2a86@G2a81)) (set! G2a97@condition-library (condition-accessor G2a86@G2a81 G2a91@G2a7e)) (set! G2a99@condition-files (condition-accessor G2a86@G2a81 G2a93@G2a7f)) (raise (condition (G4c61@G4a2a@make-error) (G4c83@G4a84@make-who-condition 'expander) (G4c47@G49e7@make-message-condition '"cannot locate library in library-path") (G2a8f@make-library-resolution-condition G2a72@x (reverse G2a7a@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a79@exts) (G2a76@f (cdr G2a78@ls) (G2a0b@library-extensions) G2a7a@failed-list) ((lambda (G2a9a@name) (if (file-exists? G2a9a@name) G2a9a@name (G2a76@f G2a78@ls (cdr G2a79@exts) (cons G2a9a@name G2a7a@failed-list)))) (string-append (car G2a78@ls) G2a74@str (car G2a79@exts)))))))) G2a76@f) (G2a09@library-path) (G2a0b@library-extensions) '())) (G2a0d@library-name->file-name G2a72@x))) (lambda (G2a9c@f) (if (procedure? G2a9c@f) G2a9c@f (assertion-violation 'file-locator '"not a procedure" G2a9c@f))))) (set! G2a11@serialize-all (lambda (G2a9e@serialize G2a9f@compile) ((lambda (G2aa3@library-desc) (begin (set! G2aa3@library-desc (lambda (G2aa6@x) (list (G29cb@library-id G2aa6@x) (G29cd@library-name G2aa6@x)))) (for-each (lambda (G2aa4@x) (if (G29e5@library-source-file-name G2aa4@x) (G2a9e@serialize (G29e5@library-source-file-name G2aa4@x) (list (G29cb@library-id G2aa4@x) (G29cd@library-name G2aa4@x) (G29cf@library-version G2aa4@x) (map G2aa3@library-desc (G29d1@library-imp* G2aa4@x)) (map G2aa3@library-desc (G29d3@library-vis* G2aa4@x)) (map G2aa3@library-desc (G29d5@library-inv* G2aa4@x)) (G29d7@library-subst G2aa4@x) (G29d9@library-env G2aa4@x) (G2a9f@compile (G29df@library-visit-code G2aa4@x)) (G2a9f@compile (G29e1@library-invoke-code G2aa4@x)) (G29e3@library-visible? G2aa4@x))) (void))) ((G29ba@current-library-collection))))) '#f))) (set! G2a13@current-precompiled-library-loader (G290b@G2841@make-parameter (lambda (G2aa8@filename G2aa9@sk) '#f))) (set! G2a15@try-load-from-file (lambda (G2aac@filename) ((G2a13@current-precompiled-library-loader) G2aac@filename (lambda G2ad2 ((lambda (G2ad3) (if (= G2ad3 '11) (apply (lambda (G2aae@id G2aaf@name G2ab0@ver G2ab1@imp* G2ab2@vis* G2ab3@inv* G2ab4@exp-subst G2ab5@exp-env G2ab6@visit-proc G2ab7@invoke-proc G2ab8@visible?) ((letrec ((G2ac4@f (lambda (G2ac6@deps) (if (null? G2ac6@deps) (begin (G2a29@install-library G2aae@id G2aaf@name G2ab0@ver G2ab1@imp* G2ab2@vis* G2ab3@inv* G2ab4@exp-subst G2ab5@exp-env G2ab6@visit-proc G2ab7@invoke-proc '#f '#f G2ab8@visible? '#f) '#t) ((lambda (G2ac8@d) ((lambda (G2aca@label G2acb@dname) ((lambda (G2ace@l) (if (and (G29c7@library? G2ace@l) (eq? G2aca@label (G29cb@library-id G2ace@l))) (G2ac4@f (cdr G2ac6@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2aaf@name G2acb@dname G2aac@filename G2ace@l G2aca@label (G29cb@library-id G2ace@l)) '#f))) (G2a1f@find-library-by-name G2acb@dname))) (car G2ac8@d) (cadr G2ac8@d))) (car G2ac6@deps)))))) G2ac4@f) (append G2ab1@imp* G2ab2@vis* G2ab3@inv*))) G2ad2) (if (>= G2ad3 '0) (apply (lambda G2ad0@others '#f) G2ad2) (error 'apply '"invalid arg count")))) (length G2ad2)))))) (set! G2a17@library-loader (G290b@G2841@make-parameter (lambda (G2ad4@x) ((lambda (G2ad6@file-name) (if (not G2ad6@file-name) (assertion-violation '#f '"cannot file library" G2ad4@x) (or (G2a15@try-load-from-file G2ad6@file-name) ((G2a19@current-library-expander) (G290a@G283f@read-library-source-file G2ad6@file-name) G2ad6@file-name (lambda (G2ad8@name) (if (not (fast-equal? G2ad8@name G2ad4@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2adc@G2ada G2add@G2adb) ((lambda (G2ae0@e G2ae1@p) (begin (display '"expected to find library " G2ae1@p) (write G2ad4@x G2ae1@p) (display '" in file " G2ae1@p) (display G2ad6@file-name G2ae1@p) (display '", found " G2ae1@p) (write G2ad8@name G2ae1@p) (display '" instead" G2ae1@p) (G2ae0@e))) G2add@G2adb G2adc@G2ada)))) (void))))))) ((G2a0f@file-locator) G2ad4@x))) (lambda (G2ae4@f) (if (procedure? G2ae4@f) G2ae4@f (assertion-violation 'library-locator '"not a procedure" G2ae4@f))))) (set! G2a19@current-library-expander (G290b@G2841@make-parameter (lambda (G2ae6@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2ae8@f) (if (procedure? G2ae8@f) G2ae8@f (assertion-violation 'library-expander '"not a procedure" G2ae8@f))))) (set! G2a1b@external-pending-libraries (G290b@G2841@make-parameter '())) (set! G2a1d@find-external-library (lambda (G2aea@name) (begin (if (member G2aea@name (G2a1b@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2aea@name) (void)) ((lambda (G2aee@G2aec G2aef@G2aed) ((lambda (G2af2@swap) (dynamic-wind G2af2@swap (lambda () (begin ((G2a17@library-loader) G2aea@name) (or (G2a07@find-library-by (lambda (G2af4@x) (fast-equal? (G29cd@library-name G2af4@x) G2aea@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2aea@name)))) G2af2@swap)) (lambda () ((lambda (G2af6@t) (begin (G2aee@G2aec G2aef@G2aed) (set! G2aef@G2aed G2af6@t))) (G2aee@G2aec))))) G2a1b@external-pending-libraries (cons G2aea@name (G2a1b@external-pending-libraries)))))) (set! G2a1f@find-library-by-name (lambda (G2af8@name) (or (G2a07@find-library-by (lambda (G2afa@x) (fast-equal? (G29cd@library-name G2afa@x) G2af8@name))) (G2a1d@find-external-library G2af8@name)))) (set! G2a21@library-exists? (lambda (G2afc@name) (and (G2a07@find-library-by (lambda (G2afe@x) (fast-equal? (G29cd@library-name G2afe@x) G2afc@name))) '#t))) (set! G2a23@find-library-by-spec/die (lambda (G2b00@spec) ((lambda (G2b02@id) (or (G2a07@find-library-by (lambda (G2b04@x) (eq? G2b02@id (G29cb@library-id G2b04@x)))) (assertion-violation '#f '"cannot find library with required spec" G2b00@spec))) (car G2b00@spec)))) (set! G2a25@label->binding-table (make-eq-hashtable)) (set! G2a27@install-library-record (lambda (G2b06@lib) (begin ((lambda (G2b08@exp-env) (for-each (lambda (G2b0a@x) ((lambda (G2b0c@label G2b0d@binding) ((lambda (G2b10@binding) (hashtable-set! G2a25@label->binding-table G2b0c@label G2b10@binding)) ((lambda (G2b12@t) (if (memv G2b12@t '(global)) (cons 'global (cons G2b06@lib (cdr G2b0d@binding))) (if (memv G2b12@t '(global-macro)) (cons 'global-macro (cons G2b06@lib (cdr G2b0d@binding))) (if (memv G2b12@t '(global-macro!)) (cons 'global-macro! (cons G2b06@lib (cdr G2b0d@binding))) G2b0d@binding)))) (car G2b0d@binding)))) (car G2b0a@x) (cdr G2b0a@x))) G2b08@exp-env)) (G29d9@library-env G2b06@lib)) ((G29ba@current-library-collection) G2b06@lib)))) (set! G2a29@install-library (lambda (G2b14@id G2b15@name G2b16@ver G2b17@imp* G2b18@vis* G2b19@inv* G2b1a@exp-subst G2b1b@exp-env G2b1c@visit-proc G2b1d@invoke-proc G2b1e@visit-code G2b1f@invoke-code G2b20@visible? G2b21@source-file-name) ((lambda (G2b30@imp-lib* G2b31@vis-lib* G2b32@inv-lib*) (begin (if (not (and (symbol? G2b14@id) (list? G2b15@name) (list? G2b16@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b14@id G2b15@name G2b16@ver) (void)) (if (G2a21@library-exists? G2b15@name) (assertion-violation 'install-library '"library is already installed" G2b15@name) (void)) ((lambda (G2b36@lib) (G2a27@install-library-record G2b36@lib)) (G29c9@make-library G2b14@id G2b15@name G2b16@ver G2b30@imp-lib* G2b31@vis-lib* G2b32@inv-lib* G2b1a@exp-subst G2b1b@exp-env G2b1c@visit-proc G2b1d@invoke-proc G2b1e@visit-code G2b1f@invoke-code G2b20@visible? G2b21@source-file-name)))) (map G2a23@find-library-by-spec/die G2b17@imp*) (map G2a23@find-library-by-spec/die G2b18@vis*) (map G2a23@find-library-by-spec/die G2b19@inv*)))) (set! G2a2b@imported-label->binding (lambda (G2b38@lab) (hashtable-ref G2a25@label->binding-table G2b38@lab '#f))) (set! G2a2d@invoke-library (lambda (G2b3a@lib) ((lambda (G2b3c@invoke) (if (procedure? G2b3c@invoke) (begin (G29f9@set-library-invoke-state! G2b3a@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b3a@lib))) (for-each G2a2d@invoke-library (G29d5@library-inv* G2b3a@lib)) (G29f9@set-library-invoke-state! G2b3a@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b3a@lib))) (G2b3c@invoke) (G29f9@set-library-invoke-state! G2b3a@lib '#t)) (void))) (G29dd@library-invoke-state G2b3a@lib)))) (set! G2a2f@visit-library (lambda (G2b3e@lib) ((lambda (G2b40@visit) (if (procedure? G2b40@visit) (begin (G29f7@set-library-visit-state! G2b3e@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b3e@lib))) (for-each G2a2d@invoke-library (G29d3@library-vis* G2b3e@lib)) (G29f7@set-library-visit-state! G2b3e@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b3e@lib))) (G2b40@visit) (G29f7@set-library-visit-state! G2b3e@lib '#t)) (void))) (G29db@library-visit-state G2b3e@lib)))) (set! G2a31@invoke-library-by-spec (lambda (G2b42@spec) (G2a2d@invoke-library (G2a23@find-library-by-spec/die G2b42@spec)))) (set! G2a33@installed-libraries (lambda G2b4a ((lambda (G2b4b) (if (= G2b4b '1) (apply (lambda (G2b44@all?) ((letrec ((G2b46@f (lambda (G2b48@ls) (if (null? G2b48@ls) '() (if (or G2b44@all? (G29e3@library-visible? (car G2b48@ls))) (cons (car G2b48@ls) (G2b46@f (cdr G2b48@ls))) (G2b46@f (cdr G2b48@ls))))))) G2b46@f) ((G29ba@current-library-collection)))) G2b4a) (if (= G2b4b '0) (apply (lambda () (G2a33@installed-libraries '#f)) G2b4a) (error 'apply '"invalid arg count")))) (length G2b4a)))) (set! G2a35@library-spec (lambda (G2b4c@x) (begin (if (not (G29c7@library? G2b4c@x)) (assertion-violation 'library-spec '"not a library" G2b4c@x) (void)) (list (G29cb@library-id G2b4c@x) (G29cd@library-name G2b4c@x) (G29cf@library-version G2b4c@x))))) (begin (set! G2b8a@G2a35@library-spec G2a35@library-spec) (set! G2b89@G2a33@installed-libraries G2a33@installed-libraries) (set! G2b88@G2a31@invoke-library-by-spec G2a31@invoke-library-by-spec) (set! G2b87@G2a2f@visit-library G2a2f@visit-library) (set! G2b86@G2a2d@invoke-library G2a2d@invoke-library) (set! G2b85@G2a2b@imported-label->binding G2a2b@imported-label->binding) (set! G2b84@G2a29@install-library G2a29@install-library) (set! G2b83@G2a27@install-library-record G2a27@install-library-record) (set! G2b82@G2a25@label->binding-table G2a25@label->binding-table) (set! G2b81@G2a23@find-library-by-spec/die G2a23@find-library-by-spec/die) (set! G2b80@G2a21@library-exists? G2a21@library-exists?) (set! G2b7f@G2a1f@find-library-by-name G2a1f@find-library-by-name) (set! G2b7e@G2a1d@find-external-library G2a1d@find-external-library) (set! G2b7d@G2a1b@external-pending-libraries G2a1b@external-pending-libraries) (set! G2b7c@G2a19@current-library-expander G2a19@current-library-expander) (set! G2b7b@G2a17@library-loader G2a17@library-loader) (set! G2b7a@G2a15@try-load-from-file G2a15@try-load-from-file) (set! G2b79@G2a13@current-precompiled-library-loader G2a13@current-precompiled-library-loader) (set! G2b78@G2a11@serialize-all G2a11@serialize-all) (set! G2b77@G2a0f@file-locator G2a0f@file-locator) (set! G2b76@G2a0d@library-name->file-name G2a0d@library-name->file-name) (set! G2b75@G2a0b@library-extensions G2a0b@library-extensions) (set! G2b74@G2a09@library-path G2a09@library-path) (set! G2b73@G2a07@find-library-by G2a07@find-library-by) (set! G2b72@G2a05@find-dependencies G2a05@find-dependencies) (set! G2b71@G2a03@rp G2a03@rp) (set! G2b70@G2a01@set-library-source-file-name! G2a01@set-library-source-file-name!) (set! G2b6f@G29ff@set-library-visible?! G29ff@set-library-visible?!) (set! G2b6e@G29fd@set-library-invoke-code! G29fd@set-library-invoke-code!) (set! G2b6d@G29fb@set-library-visit-code! G29fb@set-library-visit-code!) (set! G2b6c@G29f9@set-library-invoke-state! G29f9@set-library-invoke-state!) (set! G2b6b@G29f7@set-library-visit-state! G29f7@set-library-visit-state!) (set! G2b6a@G29f5@set-library-env! G29f5@set-library-env!) (set! G2b69@G29f3@set-library-subst! G29f3@set-library-subst!) (set! G2b68@G29f1@set-library-inv*! G29f1@set-library-inv*!) (set! G2b67@G29ef@set-library-vis*! G29ef@set-library-vis*!) (set! G2b66@G29ed@set-library-imp*! G29ed@set-library-imp*!) (set! G2b65@G29eb@set-library-version! G29eb@set-library-version!) (set! G2b64@G29e9@set-library-name! G29e9@set-library-name!) (set! G2b63@G29e7@set-library-id! G29e7@set-library-id!) (set! G2b62@G29e5@library-source-file-name G29e5@library-source-file-name) (set! G2b61@G29e3@library-visible? G29e3@library-visible?) (set! G2b60@G29e1@library-invoke-code G29e1@library-invoke-code) (set! G2b5f@G29df@library-visit-code G29df@library-visit-code) (set! G2b5e@G29dd@library-invoke-state G29dd@library-invoke-state) (set! G2b5d@G29db@library-visit-state G29db@library-visit-state) (set! G2b5c@G29d9@library-env G29d9@library-env) (set! G2b5b@G29d7@library-subst G29d7@library-subst) (set! G2b5a@G29d5@library-inv* G29d5@library-inv*) (set! G2b59@G29d3@library-vis* G29d3@library-vis*) (set! G2b58@G29d1@library-imp* G29d1@library-imp*) (set! G2b57@G29cf@library-version G29cf@library-version) (set! G2b56@G29cd@library-name G29cd@library-name) (set! G2b55@G29cb@library-id G29cb@library-id) (set! G2b54@G29c9@make-library G29c9@make-library) (set! G2b53@G29c7@library? G29c7@library?) (set! G2b52@G29c4@G29bc G29c4@G29bc) (set! G2b51@G29c2@G29bd G29c2@G29bd) (set! G2b50@G29c0@G29bb G29c0@G29bb) (set! G2b4f@G29ba@current-library-collection G29ba@current-library-collection) (set! G2b4e@G29b8@make-collection G29b8@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b8d@build-global-define G2c07@build-lambda G2c09@build-case-lambda G2c0b@build-let G2c3d@build-sequence G2c3f@build-void G2c41@build-letrec G2c43@build-letrec* G2c45@build-library-letrec* G2c47@build-receive) (begin (set! G2b8d@build-global-define (lambda (G2c48@x) (G2c3f@build-void))) (set! G2c07@build-lambda (lambda (G2c4a@ae G2c4b@vars G2c4c@exp) (list 'lambda G2c4b@vars G2c4c@exp))) (set! G2c09@build-case-lambda (lambda (G2c50@ae G2c51@vars* G2c52@exp*) ((lambda (G2c57@build-error G2c59@build-pred G2c5b@build-apply G2c5d@expand-case-lambda) (begin (set! G2c57@build-error (lambda (G2c8c@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c59@build-pred (lambda (G2c76@ae G2c77@n G2c78@vars) (call-with-values (lambda () ((letrec ((G2c7e@f (lambda (G2c80@vars G2c81@count) (if (pair? G2c80@vars) (G2c7e@f (cdr G2c80@vars) (+ G2c81@count '1)) (if (null? G2c80@vars) (values G2c81@count '=) (values G2c81@count '>=)))))) G2c7e@f) G2c78@vars '0)) (lambda (G2c84@G2c7c G2c85@G2c7d) ((lambda (G2c88@pred G2c89@count) (list (list 'primitive G2c88@pred) G2c77@n (list 'quote G2c89@count))) G2c85@G2c7d G2c84@G2c7c))))) (set! G2c5b@build-apply (lambda (G2c6e@ae G2c6f@g G2c70@vars G2c71@exp) (list '(primitive apply) (G2c07@build-lambda G2c6e@ae G2c70@vars G2c71@exp) G2c6f@g))) (set! G2c5d@expand-case-lambda (lambda (G2c5e@ae G2c5f@vars G2c60@exp*) ((lambda (G2c64@g G2c65@n) (list 'lambda G2c64@g (G2c0b@build-let G2c5e@ae (list G2c65@n) (list (list '(primitive length) G2c64@g)) ((letrec ((G2c68@f (lambda (G2c6a@vars* G2c6b@exp*) (if (null? G2c6a@vars*) (G2c57@build-error G2c5e@ae) (list 'if (G2c59@build-pred G2c5e@ae G2c65@n (car G2c6a@vars*)) (G2c5b@build-apply G2c5e@ae G2c64@g (car G2c6a@vars*) (car G2c6b@exp*)) (G2c68@f (cdr G2c6a@vars*) (cdr G2c6b@exp*))))))) G2c68@f) G2c51@vars* G2c60@exp*)))) (gensym) (gensym)))) (if (= (length G2c52@exp*) '1) (G2c07@build-lambda G2c50@ae (car G2c51@vars*) (car G2c52@exp*)) (G2c5d@expand-case-lambda G2c50@ae G2c51@vars* G2c52@exp*)))) '#f '#f '#f '#f))) (set! G2c0b@build-let (lambda (G2c8e@ae G2c8f@lhs* G2c90@rhs* G2c91@body) (cons (G2c07@build-lambda G2c8e@ae G2c8f@lhs* G2c91@body) G2c90@rhs*))) (set! G2c3d@build-sequence (lambda (G2c96@ae G2c97@exps) ((letrec ((G2c9a@loop (lambda (G2c9c@exps) (if (null? (cdr G2c9c@exps)) (car G2c9c@exps) (if (equal? (car G2c9c@exps) (G2c3f@build-void)) (G2c9a@loop (cdr G2c9c@exps)) (cons 'begin G2c9c@exps)))))) G2c9a@loop) G2c97@exps))) (set! G2c3f@build-void (lambda () '((primitive void)))) (set! G2c41@build-letrec (lambda (G2c9e@ae G2c9f@vars G2ca0@val-exps G2ca1@body-exp) (if (null? G2c9f@vars) G2ca1@body-exp (list 'letrec (map list G2c9f@vars G2ca0@val-exps) G2ca1@body-exp)))) (set! G2c43@build-letrec* (lambda (G2ca6@ae G2ca7@vars G2ca8@val-exps G2ca9@body-exp) (if (null? G2ca7@vars) G2ca9@body-exp (G2c0b@build-let G2ca6@ae G2ca7@vars (map (lambda (G2cae@x) (list 'quote '#f)) G2ca7@vars) (G2c3d@build-sequence G2ca6@ae (append (map (lambda (G2cb0@lhs G2cb1@rhs) (list 'set! G2cb0@lhs G2cb1@rhs)) G2ca7@vars G2ca8@val-exps) (list G2ca9@body-exp))))))) (set! G2c45@build-library-letrec* (lambda (G2cb4@ae G2cb5@name G2cb6@vars G2cb7@locs G2cb8@val-exps G2cb9@body-exp) (list 'library-letrec* G2cb5@name (map list G2cb6@vars G2cb7@locs G2cb8@val-exps) G2cb9@body-exp))) (set! G2c47@build-receive (lambda (G2cc0@ae G2cc1@vars G2cc2@producer G2cc3@body*) (begin (display '"************** in ") (cons 'receive (cons G2cc1@vars (cons G2cc2@producer G2cc3@body*)))))) (begin (set! G2cd1@G2c47@build-receive G2c47@build-receive) (set! G2cd0@G2c45@build-library-letrec* G2c45@build-library-letrec*) (set! G2ccf@G2c43@build-letrec* G2c43@build-letrec*) (set! G2cce@G2c41@build-letrec G2c41@build-letrec) (set! G2ccd@G2c3f@build-void G2c3f@build-void) (set! G2ccc@G2c3d@build-sequence G2c3d@build-sequence) (set! G2ccb@G2c0b@build-let G2c0b@build-let) (set! G2cca@G2c09@build-case-lambda G2c09@build-case-lambda) (set! G2cc9@G2c07@build-lambda G2c07@build-lambda) (set! G2cc8@G2b8d@build-global-define G2b8d@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2ce0@set-cons G2ce2@set-union G2ce7@top-mark* G2ce9@top-marked? G2ceb@gen-lexical G2ced@gen-global G2cef@gen-label G2cf1@gen-top-level-label G2cf3@gen-define-label+loc G2cf5@gen-define-label G2cfb@G2cf6 G2cfd@G2cf8 G2cff@G2cf7 G2d02@rib? G2d04@make-rib G2d06@rib-sym* G2d08@rib-mark** G2d0a@rib-label* G2d0c@rib-sealed/freq G2d0e@rib-cache G2d10@set-rib-sym*! G2d12@set-rib-mark**! G2d14@set-rib-label*! G2d16@set-rib-sealed/freq! G2d18@set-rib-cache! G2d1a@make-empty-rib G2d1c@make-cache-rib G2d1e@find-label G2d20@extend-rib! G2d22@extend-rib/nc! G2d24@make-rib-map G2d26@seal-rib! G2d28@unseal-rib! G2d2a@make-full-rib G2d30@G2d2b G2d32@G2d2d G2d34@G2d2c G2d37@stx? G2d39@make-stx G2d3b@stx-expr G2d3d@stx-mark* G2d3f@stx-subst* G2d41@stx-ae* G2d43@set-stx-expr! G2d45@set-stx-mark*! G2d47@set-stx-subst*! G2d49@set-stx-ae*! G2d4b@rp G2d4d@datum->stx G2d4f@gen-mark G2d51@anti-mark G2d53@anti-mark? G2d55@join-wraps G2d57@mkstx G2d59@add-mark G2d5b@add-subst G2d5d@syntax-kind? G2d5f@syntax-vector->list G2d61@syntax-pair? G2d63@syntax-vector? G2d65@syntax-null? G2d67@syntax-list? G2d69@syntax-car G2d6b@syntax-cdr G2d6d@syntax->list G2d6f@id? G2d71@id->sym G2d73@same-marks? G2d75@bound-id=? G2d77@free-id=? G2d79@valid-bound-ids? G2d7b@distinct-bound-ids? G2d7d@bound-id-member? G2d7f@self-evaluating? G2d81@strip-annotations G2d83@strip G2d85@stx->datum G2d87@same-marks*? G2d89@id->label G2d8b@id->real-label G2d8d@label->binding G2d8f@make-binding G2d91@binding-type G2d93@binding-value G2d95@raise-unbound-error G2d97@syntax-type G2da7@sanitize-binding G2da9@make-variable-transformer G2dab@variable-transformer? G2dad@variable-transformer-procedure G2daf@make-eval-transformer G2ef2@parse-define G2ef4@parse-define-syntax G2ef6@scheme-stx-hashtable G2ef8@scheme-stx G2efa@lexical-var G2efc@lexical-mutable? G2efe@set-lexical-mutable! G2f00@add-lexical G2f02@add-lexicals G2f04@letrec-helper G2f06@letrec-transformer G2f08@letrec*-transformer G2f0a@fluid-let-syntax-transformer G2f0c@type-descriptor-transformer G2f0e@record-type-descriptor-transformer G2f10@record-constructor-descriptor-transformer G2f12@when-macro G2f14@unless-macro G2f16@if-transformer G2f18@and-transformer G2f1a@or-transformer G2f1c@case-macro G2f1e@quote-transformer G2f20@case-lambda-transformer G2f22@lambda-transformer G2f24@bless G2f26@with-syntax-macro G2f28@invalid-fmls-error G2f2a@let-macro G2f2c@let-values-macro G2f2e@let*-values-macro G2f30@trace-lambda-macro G2f32@trace-define-macro G2f34@trace-define-syntax-macro G2f36@trace-let/rec-syntax G2f38@trace-let-syntax-macro G2f3a@trace-letrec-syntax-macro G2f3c@guard-macro G2f3e@define-enumeration-macro G2f40@time-macro G2f42@delay-macro G2f44@assert-macro G2f46@endianness-macro G2f48@identifier-syntax-macro G2f4a@do-macro G2f4c@let*-macro G2f4e@or-macro G2f50@and-macro G2f52@cond-macro G2f54@do-include G2f56@include-macro G2f58@include-into-macro G2f5a@syntax-rules-macro G2f5c@quasiquote-macro G2f5e@quasisyntax-macro G2f60@define-struct-macro G2f62@define-record-type-macro G2f64@define-condition-type-macro G2f66@incorrect-usage-macro G2f68@parameterize-macro G2f6a@foreign-call-transformer G2f6c@convert-pattern G2f6e@syntax-dispatch G2f70@ellipsis? G2f72@underscore? G2f74@verify-literals G2f76@syntax-case-transformer G2f78@ellipsis-map G2f7a@syntax-transformer G2f7c@core-macro-transformer G2f7e@file-options-macro G2f80@symbol-macro G2f82@macro-transformer G2f84@local-macro-transformer G2f86@do-macro-call G2f88@chi-macro G2f8a@chi-local-macro G2f8c@chi-global-macro G2f8e@chi-expr* G2f90@chi-application G2f92@chi-expr G2f94@chi-set! G2f96@verify-formals G2f98@chi-lambda-clause G2f9a@chi-lambda-clause* G2f9c@chi-defun G2f9e@chi-rhs G2fa0@expand-interaction-rhs*/init* G2fa2@chi-rhs* G2fa4@find-bound=? G2fa6@find-dups G2fa8@chi-internal G2faa@parse-module G2fb0@G2fab G2fb2@G2fad G2fb4@G2fac G2fb7@module-interface? G2fb9@make-module-interface G2fbb@module-interface-first-mark G2fbd@module-interface-exp-id-vec G2fbf@module-interface-exp-lab-vec G2fc1@set-module-interface-first-mark! G2fc3@set-module-interface-exp-id-vec! G2fc5@set-module-interface-exp-lab-vec! G2fc7@module-interface-exp-id* G2fc9@chi-internal-module G2fcb@chi-body* G2fcd@expand-transformer G2fcf@parse-exports G2fd1@parse-library-name G2fd3@parse-library G2fd5@parse-import-spec* G2fd7@make-top-rib G2fd9@make-collector G2fdb@inv-collector G2fdd@vis-collector G2fdf@imp-collector G2fe1@chi-library-internal G2fe3@chi-interaction-expr G2fe5@library-body-expander G2fe7@core-library-expander G2fe9@parse-top-level-program G2feb@top-level-expander G2ff1@G2fec G2ff3@G2fee G2ff5@G2fed G2ff8@env? G2ffa@make-env G2ffc@env-names G2ffe@env-labels G3000@env-itc G3002@set-env-names! G3004@set-env-labels! G3006@set-env-itc! G3008@rp G300e@G3009 G3010@G300b G3012@G300a G3015@interaction-env? G3017@make-interaction-env G3019@interaction-env-rib G301b@interaction-env-r G301d@interaction-env-locs G301f@set-interaction-env-rib! G3021@set-interaction-env-r! G3023@set-interaction-env-locs! G3025@rp G3027@interaction-environment-symbols G3029@environment-bindings G302b@parse-binding G302d@environment? G302f@environment-symbols G3031@environment G3033@null-environment G3035@scheme-report-environment G3037@expand G3039@eval G303b@library-expander G303d@boot-library-expand G303f@rev-map-append G3041@build-exports G3043@make-export-subst G3045@make-export-env/macros G3047@generate-temporaries G3049@free-identifier=? G304b@bound-identifier=? G304d@make-source-condition G304f@extract-position-condition G3051@expression-position G3053@assertion-error G3055@syntax-error G3057@extract-trace G3059@syntax-violation* G305b@syntax-violation G305d@identifier? G305f@datum->syntax G3061@syntax->datum G3063@compile-r6rs-top-level G3065@pre-compile-r6rs-top-level G3067@interaction-environment G3069@top-level-context) (begin (set! G2ce0@set-cons (lambda (G306a@x G306b@ls) (if (memq G306a@x G306b@ls) G306b@ls (cons G306a@x G306b@ls)))) (set! G2ce2@set-union (lambda (G306e@ls1 G306f@ls2) (if (null? G306e@ls1) G306f@ls2 (if (memq (car G306e@ls1) G306f@ls2) (G2ce2@set-union (cdr G306e@ls1) G306f@ls2) (cons (car G306e@ls1) (G2ce2@set-union (cdr G306e@ls1) G306f@ls2)))))) (set! G2ce7@top-mark* '(top)) (set! G2ce9@top-marked? (lambda (G3072@m*) (memq 'top G3072@m*))) (set! G2ceb@gen-lexical (lambda (G3074@sym) (if (symbol? G3074@sym) (gensym G3074@sym) (if (G2d37@stx? G3074@sym) (G2ceb@gen-lexical (G2d71@id->sym G3074@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3074@sym))))) (set! G2ced@gen-global (lambda (G3076@x) (G2ceb@gen-lexical G3076@x))) (set! G2cef@gen-label (lambda (G3078@_) (gensym))) (set! G2cf1@gen-top-level-label (lambda (G307a@id G307b@rib) ((lambda (G307f@find) (begin (set! G307f@find (lambda (G308a@sym G308b@mark* G308c@sym* G308d@mark** G308e@label*) (and (pair? G308c@sym*) (if (and (eq? G308a@sym (car G308c@sym*)) (G2d73@same-marks? G308b@mark* (car G308d@mark**))) (car G308e@label*) (G307f@find G308a@sym G308b@mark* (cdr G308c@sym*) (cdr G308d@mark**) (cdr G308e@label*)))))) ((lambda (G3080@sym G3081@mark*) ((lambda (G3084@sym*) ((lambda (G3086@t) (if G3086@t ((lambda (G3088@label) (if (G2b85@G2a2b@imported-label->binding G3088@label) (gensym) G3088@label)) G3086@t) (gensym))) (and (memq G3080@sym (G2d06@rib-sym* G307b@rib)) (G307f@find G3080@sym G3081@mark* G3084@sym* (G2d08@rib-mark** G307b@rib) (G2d0a@rib-label* G307b@rib))))) (G2d06@rib-sym* G307b@rib))) (G2d71@id->sym G307a@id) (G2d3d@stx-mark* G307a@id)))) '#f))) (set! G2cf3@gen-define-label+loc (lambda (G3094@id G3095@rib) ((lambda (G3098@t) (if G3098@t ((lambda (G309a@env) ((lambda (G309c@label G309d@locs) (values G309c@label ((lambda (G30a0@t) (if G30a0@t (cdr G30a0@t) ((lambda (G30a2@loc) (begin (G3023@set-interaction-env-locs! G309a@env (cons (cons G309c@label G30a2@loc) G309d@locs)) G30a2@loc)) (G2ceb@gen-lexical G3094@id)))) (assq G309c@label G309d@locs)))) (G2cf1@gen-top-level-label G3094@id G3095@rib) (G301d@interaction-env-locs G309a@env))) G3098@t) (values (gensym) (G2ceb@gen-lexical G3094@id)))) (G3069@top-level-context)))) (set! G2cf5@gen-define-label (lambda (G30a4@id G30a5@rib) (if (G3069@top-level-context) (G2cf1@gen-top-level-label G30a4@id G30a5@rib) (gensym)))) (set! G2cfb@G2cf6 (make-record-type-descriptor 'rib '#f 'G2cf9 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2cfd@G2cf8 '#f) (set! G2cff@G2cf7 (make-record-constructor-descriptor G2cfb@G2cf6 '#f G2cfd@G2cf8)) (set! G2d02@rib? (record-predicate G2cfb@G2cf6)) (set! G2d04@make-rib (record-constructor G2cff@G2cf7)) (set! G2d06@rib-sym* (record-accessor G2cfb@G2cf6 '0)) (set! G2d08@rib-mark** (record-accessor G2cfb@G2cf6 '1)) (set! G2d0a@rib-label* (record-accessor G2cfb@G2cf6 '2)) (set! G2d0c@rib-sealed/freq (record-accessor G2cfb@G2cf6 '3)) (set! G2d0e@rib-cache (record-accessor G2cfb@G2cf6 '4)) (set! G2d10@set-rib-sym*! (record-mutator G2cfb@G2cf6 '0)) (set! G2d12@set-rib-mark**! (record-mutator G2cfb@G2cf6 '1)) (set! G2d14@set-rib-label*! (record-mutator G2cfb@G2cf6 '2)) (set! G2d16@set-rib-sealed/freq! (record-mutator G2cfb@G2cf6 '3)) (set! G2d18@set-rib-cache! (record-mutator G2cfb@G2cf6 '4)) (set! G2d1a@make-empty-rib (lambda () (G2d04@make-rib '() '() '() '#f '#f))) (set! G2d1c@make-cache-rib (lambda () (G2d04@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d1e@find-label (lambda (G30a8@rib G30a9@sym G30aa@mark*) ((lambda (G30ae@ht) (and G30ae@ht ((lambda (G30b0@cv) ((lambda (G30b2@t) (if G30b2@t (cdr G30b2@t) '#f)) (and G30b0@cv (assp (lambda (G30b4@m) (G2d73@same-marks? G30aa@mark* G30b4@m)) G30b0@cv)))) (hashtable-ref G30ae@ht G30a9@sym '#f)))) (G2d0e@rib-cache G30a8@rib)))) (set! G2d20@extend-rib! (lambda (G30b6@rib G30b7@id G30b8@label) ((lambda (G30bd@find) (begin (set! G30bd@find (lambda (G30ce@sym G30cf@mark* G30d0@sym* G30d1@mark** G30d2@label*) (and (pair? G30d0@sym*) (if (and (eq? G30ce@sym (car G30d0@sym*)) (G2d73@same-marks? G30cf@mark* (car G30d1@mark**))) G30d2@label* (G30bd@find G30ce@sym G30cf@mark* (cdr G30d0@sym*) (cdr G30d1@mark**) (cdr G30d2@label*)))))) (begin (if (G2d0c@rib-sealed/freq G30b6@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G30b6@rib) (void)) ((lambda (G30be@sym G30bf@mark*) ((lambda (G30c2@sym*) ((lambda (G30c4@t) (if G30c4@t ((lambda (G30c6@p) (if (not (eq? G30b8@label G30c6@p)) (G305b@syntax-violation '#f '"multiple definitions of identifier" G30b7@id) (void))) G30c4@t) ((lambda (G30c8@t) (if G30c8@t ((lambda (G30ca@p) (if (not (eq? G30b8@label (car G30ca@p))) (if (G3069@top-level-context) (set-car! G30ca@p G30b8@label) (G305b@syntax-violation '#f '"multiple definitions of identifier" G30b7@id)) (void))) G30c8@t) (begin (if (G2d0e@rib-cache G30b6@rib) (hashtable-update! (G2d0e@rib-cache G30b6@rib) G30be@sym (lambda (G30cc@e) (cons (cons G30bf@mark* G30b8@label) G30cc@e)) '()) (void)) (G2d10@set-rib-sym*! G30b6@rib (cons G30be@sym G30c2@sym*)) (G2d12@set-rib-mark**! G30b6@rib (cons G30bf@mark* (G2d08@rib-mark** G30b6@rib))) (G2d14@set-rib-label*! G30b6@rib (cons G30b8@label (G2d0a@rib-label* G30b6@rib)))))) (and (memq G30be@sym (G2d06@rib-sym* G30b6@rib)) (G30bd@find G30be@sym G30bf@mark* G30c2@sym* (G2d08@rib-mark** G30b6@rib) (G2d0a@rib-label* G30b6@rib)))))) (G2d1e@find-label G30b6@rib G30be@sym G30bf@mark*))) (G2d06@rib-sym* G30b6@rib))) (G2d71@id->sym G30b7@id) (G2d3d@stx-mark* G30b7@id))))) '#f))) (set! G2d22@extend-rib/nc! (lambda (G30d8@rib G30d9@id G30da@label) ((lambda (G30de@sym G30df@mark*) ((lambda (G30e2@sym*) (begin (if (G2d0e@rib-cache G30d8@rib) (hashtable-update! (G2d0e@rib-cache G30d8@rib) G30de@sym (lambda (G30e4@e) (cons (cons G30df@mark* G30da@label) G30e4@e)) '()) (void)) (G2d10@set-rib-sym*! G30d8@rib (cons G30de@sym G30e2@sym*)) (G2d12@set-rib-mark**! G30d8@rib (cons G30df@mark* (G2d08@rib-mark** G30d8@rib))) (G2d14@set-rib-label*! G30d8@rib (cons G30da@label (G2d0a@rib-label* G30d8@rib))))) (G2d06@rib-sym* G30d8@rib))) (G2d71@id->sym G30d9@id) (G2d3d@stx-mark* G30d9@id)))) (set! G2d24@make-rib-map (lambda (G30e6@sym*) ((lambda (G30e8@ht) ((letrec ((G30ea@f (lambda (G30ec@i G30ed@sym*) (if (null? G30ed@sym*) G30e8@ht (begin (hashtable-update! G30e8@ht (car G30ed@sym*) (lambda (G30f0@x) (cons G30ec@i G30f0@x)) '()) (G30ea@f (+ G30ec@i '1) (cdr G30ed@sym*))))))) G30ea@f) '0 G30e6@sym*)) (make-eq-hashtable)))) (set! G2d26@seal-rib! (lambda (G30f2@rib) ((lambda (G30f4@sym*) (if (not (null? G30f4@sym*)) (begin (G2d10@set-rib-sym*! G30f2@rib (list->vector G30f4@sym*)) (G2d12@set-rib-mark**! G30f2@rib (list->vector (G2d08@rib-mark** G30f2@rib))) (G2d14@set-rib-label*! G30f2@rib (list->vector (G2d0a@rib-label* G30f2@rib))) (G2d16@set-rib-sealed/freq! G30f2@rib (G2d24@make-rib-map G30f4@sym*))) (void))) (G2d06@rib-sym* G30f2@rib)))) (set! G2d28@unseal-rib! (lambda (G30f6@rib) (if (G2d0c@rib-sealed/freq G30f6@rib) (begin (G2d16@set-rib-sealed/freq! G30f6@rib '#f) (G2d10@set-rib-sym*! G30f6@rib (vector->list (G2d06@rib-sym* G30f6@rib))) (G2d12@set-rib-mark**! G30f6@rib (vector->list (G2d08@rib-mark** G30f6@rib))) (G2d14@set-rib-label*! G30f6@rib (vector->list (G2d0a@rib-label* G30f6@rib)))) (void)))) (set! G2d2a@make-full-rib (lambda (G30f8@id* G30f9@label*) ((lambda (G30fc@r) (begin (G2d26@seal-rib! G30fc@r) G30fc@r)) (G2d04@make-rib (map G2d71@id->sym G30f8@id*) (map G2d3d@stx-mark* G30f8@id*) G30f9@label* '#f '#f)))) (set! G2d30@G2d2b (make-record-type-descriptor 'stx '#f 'G2d2e '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d32@G2d2d '#f) (set! G2d34@G2d2c (make-record-constructor-descriptor G2d30@G2d2b '#f G2d32@G2d2d)) (set! G2d37@stx? (record-predicate G2d30@G2d2b)) (set! G2d39@make-stx (record-constructor G2d34@G2d2c)) (set! G2d3b@stx-expr (record-accessor G2d30@G2d2b '0)) (set! G2d3d@stx-mark* (record-accessor G2d30@G2d2b '1)) (set! G2d3f@stx-subst* (record-accessor G2d30@G2d2b '2)) (set! G2d41@stx-ae* (record-accessor G2d30@G2d2b '3)) (set! G2d43@set-stx-expr! (record-mutator G2d30@G2d2b '0)) (set! G2d45@set-stx-mark*! (record-mutator G2d30@G2d2b '1)) (set! G2d47@set-stx-subst*! (record-mutator G2d30@G2d2b '2)) (set! G2d49@set-stx-ae*! (record-mutator G2d30@G2d2b '3)) (set! G2d4b@rp (G2908@G283b@make-record-printer 'stx (lambda (G30fe@x G30ff@p G3100@wr) (begin (display '"#<syntax " G30ff@p) (write (G2d85@stx->datum G30fe@x) G30ff@p) ((lambda (G3104@expr) (if (G2900@G282b@annotation? G3104@expr) ((lambda (G3106@src) (if (pair? G3106@src) (begin (display '" [" G30ff@p) (display (cdr G3106@src) G30ff@p) (display '" of " G30ff@p) (display (car G3106@src) G30ff@p) (display '"]" G30ff@p)) (void))) (G2901@G282d@annotation-source G3104@expr)) (void))) (G2d3b@stx-expr G30fe@x)) (display '">" G30ff@p))))) (set! G2d4d@datum->stx (lambda (G3108@id G3109@datum) (G2d39@make-stx G3109@datum (G2d3d@stx-mark* G3108@id) (G2d3f@stx-subst* G3108@id) (G2d41@stx-ae* G3108@id)))) (set! G2d4f@gen-mark (lambda () (string '#\m))) (set! G2d51@anti-mark '#f) (set! G2d53@anti-mark? not) (set! G2d55@join-wraps (lambda (G310c@m1* G310d@s1* G310e@ae1* G310f@e) ((lambda (G3115@cancel) (begin (set! G3115@cancel (lambda (G311c@ls1 G311d@ls2) ((letrec ((G3120@f (lambda (G3122@x G3123@ls1) (if (null? G3123@ls1) (cdr G311d@ls2) (cons G3122@x (G3120@f (car G3123@ls1) (cdr G3123@ls1))))))) G3120@f) (car G311c@ls1) (cdr G311c@ls1)))) ((lambda (G3116@m2* G3117@s2* G3118@ae2*) (if (and (not (null? G310c@m1*)) (not (null? G3116@m2*)) (G2d53@anti-mark? (car G3116@m2*))) (values (G3115@cancel G310c@m1* G3116@m2*) (G3115@cancel G310d@s1* G3117@s2*) (G3115@cancel G310e@ae1* G3118@ae2*)) (values (append G310c@m1* G3116@m2*) (append G310d@s1* G3117@s2*) (append G310e@ae1* G3118@ae2*)))) (G2d3d@stx-mark* G310f@e) (G2d3f@stx-subst* G310f@e) (G2d41@stx-ae* G310f@e)))) '#f))) (set! G2d57@mkstx (lambda (G3126@e G3127@m* G3128@s* G3129@ae*) (if (and (G2d37@stx? G3126@e) (not (G2ce9@top-marked? G3127@m*))) (call-with-values (lambda () (G2d55@join-wraps G3127@m* G3128@s* G3129@ae* G3126@e)) (lambda (G3131@G312e G3132@G312f G3133@G3130) ((lambda (G3137@ae* G3138@s* G3139@m*) (G2d39@make-stx (G2d3b@stx-expr G3126@e) G3139@m* G3138@s* G3137@ae*)) G3133@G3130 G3132@G312f G3131@G312e))) (G2d39@make-stx G3126@e G3127@m* G3128@s* G3129@ae*)))) (set! G2d59@add-mark (lambda (G313d@m G313e@e G313f@ae) (G2d57@mkstx G313e@e (list G313d@m) '(shift) (list G313f@ae)))) (set! G2d5b@add-subst (lambda (G3143@subst G3144@e) (G2d57@mkstx G3144@e '() (list G3143@subst) '()))) (set! G2d5d@syntax-kind? (lambda (G3147@x G3148@p?) (if (G2d37@stx? G3147@x) (G2d5d@syntax-kind? (G2d3b@stx-expr G3147@x) G3148@p?) (if (G2900@G282b@annotation? G3147@x) (G2d5d@syntax-kind? (G2902@G282f@annotation-expression G3147@x) G3148@p?) (G3148@p? G3147@x))))) (set! G2d5f@syntax-vector->list (lambda (G314b@x) (if (G2d37@stx? G314b@x) ((lambda (G314d@ls G314e@m* G314f@s* G3150@ae*) (map (lambda (G3155@x) (G2d57@mkstx G3155@x G314e@m* G314f@s* G3150@ae*)) G314d@ls)) (G2d5f@syntax-vector->list (G2d3b@stx-expr G314b@x)) (G2d3d@stx-mark* G314b@x) (G2d3f@stx-subst* G314b@x) (G2d41@stx-ae* G314b@x)) (if (G2900@G282b@annotation? G314b@x) (G2d5f@syntax-vector->list (G2902@G282f@annotation-expression G314b@x)) (if (vector? G314b@x) (vector->list G314b@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G314b@x)))))) (set! G2d61@syntax-pair? (lambda (G3157@x) (G2d5d@syntax-kind? G3157@x pair?))) (set! G2d63@syntax-vector? (lambda (G3159@x) (G2d5d@syntax-kind? G3159@x vector?))) (set! G2d65@syntax-null? (lambda (G315b@x) (G2d5d@syntax-kind? G315b@x null?))) (set! G2d67@syntax-list? (lambda (G315d@x) (or (G2d65@syntax-null? G315d@x) (and (G2d61@syntax-pair? G315d@x) (G2d67@syntax-list? (G2d6b@syntax-cdr G315d@x)))))) (set! G2d69@syntax-car (lambda (G315f@x) (if (G2d37@stx? G315f@x) (G2d57@mkstx (G2d69@syntax-car (G2d3b@stx-expr G315f@x)) (G2d3d@stx-mark* G315f@x) (G2d3f@stx-subst* G315f@x) (G2d41@stx-ae* G315f@x)) (if (G2900@G282b@annotation? G315f@x) (G2d69@syntax-car (G2902@G282f@annotation-expression G315f@x)) (if (pair? G315f@x) (car G315f@x) (assertion-violation 'syntax-car '"BUG: not a pair" G315f@x)))))) (set! G2d6b@syntax-cdr (lambda (G3161@x) (if (G2d37@stx? G3161@x) (G2d57@mkstx (G2d6b@syntax-cdr (G2d3b@stx-expr G3161@x)) (G2d3d@stx-mark* G3161@x) (G2d3f@stx-subst* G3161@x) (G2d41@stx-ae* G3161@x)) (if (G2900@G282b@annotation? G3161@x) (G2d6b@syntax-cdr (G2902@G282f@annotation-expression G3161@x)) (if (pair? G3161@x) (cdr G3161@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3161@x)))))) (set! G2d6d@syntax->list (lambda (G3163@x) (if (G2d61@syntax-pair? G3163@x) (cons (G2d69@syntax-car G3163@x) (G2d6d@syntax->list (G2d6b@syntax-cdr G3163@x))) (if (G2d65@syntax-null? G3163@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3163@x))))) (set! G2d6f@id? (lambda (G3165@x) (and (G2d37@stx? G3165@x) ((lambda (G3167@expr) (symbol? (if (G2900@G282b@annotation? G3167@expr) (G28ff@G2829@annotation-stripped G3167@expr) G3167@expr))) (G2d3b@stx-expr G3165@x))))) (set! G2d71@id->sym (lambda (G3169@x) (begin (if (not (G2d37@stx? G3169@x)) (error 'id->sym '"BUG in ikarus: not an id" G3169@x) (void)) ((lambda (G316b@expr) ((lambda (G316d@sym) (if (symbol? G316d@sym) G316d@sym (error 'id->sym '"BUG in ikarus: not an id" G3169@x))) (if (G2900@G282b@annotation? G316b@expr) (G28ff@G2829@annotation-stripped G316b@expr) G316b@expr))) (G2d3b@stx-expr G3169@x))))) (set! G2d73@same-marks? (lambda (G316f@x G3170@y) (or (and (null? G316f@x) (null? G3170@y)) (and (pair? G316f@x) (pair? G3170@y) (eq? (car G316f@x) (car G3170@y)) (G2d73@same-marks? (cdr G316f@x) (cdr G3170@y)))))) (set! G2d75@bound-id=? (lambda (G3173@x G3174@y) (and (eq? (G2d71@id->sym G3173@x) (G2d71@id->sym G3174@y)) (G2d73@same-marks? (G2d3d@stx-mark* G3173@x) (G2d3d@stx-mark* G3174@y))))) (set! G2d77@free-id=? (lambda (G3177@i G3178@j) ((lambda (G317b@t0 G317c@t1) (if (or G317b@t0 G317c@t1) (eq? G317b@t0 G317c@t1) (eq? (G2d71@id->sym G3177@i) (G2d71@id->sym G3178@j)))) (G2d8b@id->real-label G3177@i) (G2d8b@id->real-label G3178@j)))) (set! G2d79@valid-bound-ids? (lambda (G317f@id*) (and (for-all G2d6f@id? G317f@id*) (G2d7b@distinct-bound-ids? G317f@id*)))) (set! G2d7b@distinct-bound-ids? (lambda (G3181@id*) (or (null? G3181@id*) (and (not (G2d7d@bound-id-member? (car G3181@id*) (cdr G3181@id*))) (G2d7b@distinct-bound-ids? (cdr G3181@id*)))))) (set! G2d7d@bound-id-member? (lambda (G3183@id G3184@id*) (and (pair? G3184@id*) (or (G2d75@bound-id=? G3183@id (car G3184@id*)) (G2d7d@bound-id-member? G3183@id (cdr G3184@id*)))))) (set! G2d7f@self-evaluating? (lambda (G3187@x) (or (number? G3187@x) (string? G3187@x) (char? G3187@x) (boolean? G3187@x) (regexp? G3187@x) (bytevector? G3187@x)))) (set! G2d81@strip-annotations (lambda (G3189@x) (if (pair? G3189@x) (cons (G2d81@strip-annotations (car G3189@x)) (G2d81@strip-annotations (cdr G3189@x))) (if (vector? G3189@x) (vector-map G2d81@strip-annotations G3189@x) (if (G2900@G282b@annotation? G3189@x) (G28ff@G2829@annotation-stripped G3189@x) G3189@x))))) (set! G2d83@strip (lambda (G318b@x G318c@m*) (if (G2ce9@top-marked? G318c@m*) (if (or (G2900@G282b@annotation? G318b@x) (and (pair? G318b@x) (G2900@G282b@annotation? (car G318b@x))) (and (vector? G318b@x) (> (vector-length G318b@x) '0) (G2900@G282b@annotation? (vector-ref G318b@x '0)))) (G2d81@strip-annotations G318b@x) G318b@x) ((letrec ((G318f@f (lambda (G3191@x) (if (G2d37@stx? G3191@x) (G2d83@strip (G2d3b@stx-expr G3191@x) (G2d3d@stx-mark* G3191@x)) (if (G2900@G282b@annotation? G3191@x) (G28ff@G2829@annotation-stripped G3191@x) (if (pair? G3191@x) ((lambda (G3193@a G3194@d) (if (and (eq? G3193@a (car G3191@x)) (eq? G3194@d (cdr G3191@x))) G3191@x (cons G3193@a G3194@d))) (G318f@f (car G3191@x)) (G318f@f (cdr G3191@x))) (if (vector? G3191@x) ((lambda (G3197@old) ((lambda (G3199@new) (if (for-all eq? G3197@old G3199@new) G3191@x (list->vector G3199@new))) (map G318f@f G3197@old))) (vector->list G3191@x)) G3191@x))))))) G318f@f) G318b@x)))) (set! G2d85@stx->datum (lambda (G319b@x) (G2d83@strip G319b@x '()))) (set! G2d87@same-marks*? (lambda (G319d@mark* G319e@mark** G319f@si) (if (null? G319f@si) '#f (if (G2d73@same-marks? G319d@mark* (vector-ref G319e@mark** (car G319f@si))) (car G319f@si) (G2d87@same-marks*? G319d@mark* G319e@mark** (cdr G319f@si)))))) (set! G2d89@id->label (lambda (G31a3@id) (or (G2d8b@id->real-label G31a3@id) ((lambda (G31a5@t) (if G31a5@t ((lambda (G31a7@env) ((lambda (G31a9@rib) (call-with-values (lambda () (G2cf3@gen-define-label+loc G31a3@id G31a9@rib)) (lambda (G31ad@G31ab G31ae@G31ac) ((lambda (G31b1@loc_ G31b2@lab) (begin (G2d20@extend-rib! G31a9@rib G31a3@id G31b2@lab) G31b2@lab)) G31ae@G31ac G31ad@G31ab)))) (G3019@interaction-env-rib G31a7@env))) G31a5@t) '#f)) (G3069@top-level-context))))) (set! G2d8b@id->real-label (lambda (G31b5@id) ((lambda (G31b7@sym) ((letrec ((G31b9@search (lambda (G31bb@subst* G31bc@mark*) (if (null? G31bb@subst*) '#f (if (eq? (car G31bb@subst*) 'shift) (G31b9@search (cdr G31bb@subst*) (cdr G31bc@mark*)) ((lambda (G31bf@rib) ((lambda (G31c1@t) (if G31c1@t ((lambda (G31c3@ht) ((lambda (G31c5@si) ((lambda (G31c7@i) (if G31c7@i (vector-ref (G2d0a@rib-label* G31bf@rib) G31c7@i) (G31b9@search (cdr G31bb@subst*) G31bc@mark*))) (and G31c5@si (G2d87@same-marks*? G31bc@mark* (G2d08@rib-mark** G31bf@rib) (reverse G31c5@si))))) (hashtable-ref G31c3@ht G31b7@sym '#f))) G31c1@t) (or (G2d1e@find-label G31bf@rib G31b7@sym G31bc@mark*) ((letrec ((G31c9@f (lambda (G31cb@sym* G31cc@mark** G31cd@label*) (if (null? G31cb@sym*) (G31b9@search (cdr G31bb@subst*) G31bc@mark*) (if (and (eq? (car G31cb@sym*) G31b7@sym) (G2d73@same-marks? (car G31cc@mark**) G31bc@mark*)) (car G31cd@label*) (G31c9@f (cdr G31cb@sym*) (cdr G31cc@mark**) (cdr G31cd@label*))))))) G31c9@f) (G2d06@rib-sym* G31bf@rib) (G2d08@rib-mark** G31bf@rib) (G2d0a@rib-label* G31bf@rib))))) (G2d0c@rib-sealed/freq G31bf@rib))) (car G31bb@subst*))))))) G31b9@search) (G2d3f@stx-subst* G31b5@id) (G2d3d@stx-mark* G31b5@id))) (G2d71@id->sym G31b5@id)))) (set! G2d8d@label->binding (lambda (G31d1@x G31d2@r) ((lambda (G31d5@t) (if G31d5@t ((lambda (G31d7@b) (if (and (pair? G31d7@b) (eq? (car G31d7@b) '$core-rtd)) (cons '$rtd (map G2f24@bless (cdr G31d7@b))) (if (and (pair? G31d7@b) (eq? (car G31d7@b) 'global-rtd)) ((lambda (G31d9@lib G31da@loc) (cons '$rtd (symbol-value G31da@loc))) (cadr G31d7@b) (cddr G31d7@b)) G31d7@b))) G31d5@t) ((lambda (G31dd@t) (if G31dd@t (cdr G31dd@t) ((lambda (G31df@t) (if G31df@t ((lambda (G31e1@env) ((lambda (G31e3@t) (if G31e3@t ((lambda (G31e5@p) (cons* 'lexical (cdr G31e5@p) '#f)) G31e3@t) '(displaced-lexical . #f))) (assq G31d1@x (G301d@interaction-env-locs G31e1@env)))) G31df@t) '(displaced-lexical . #f))) (G3069@top-level-context)))) (assq G31d1@x G31d2@r)))) (G2b85@G2a2b@imported-label->binding G31d1@x)))) (set! G2d8f@make-binding cons) (set! G2d91@binding-type car) (set! G2d93@binding-value cdr) (set! G2d95@raise-unbound-error (lambda (G31e7@id) (G3059@syntax-violation* '#f '"unbound identifier" G31e7@id (G4cb1@G4afb@make-undefined-violation)))) (set! G2d97@syntax-type (lambda (G31e9@e G31ea@r) (if (G2d6f@id? G31e9@e) ((lambda (G31ed@id) ((lambda (G31ef@label) ((lambda (G31f1@b) ((lambda (G31f3@type) ((lambda () (begin (if (not G31ef@label) (G2d95@raise-unbound-error G31ed@id) (void)) ((lambda (G31f5@t) (if (memv G31f5@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31f3@type (G2d93@binding-value G31f1@b) G31ed@id) (values 'other '#f '#f))) G31f3@type))))) (G2d91@binding-type G31f1@b))) (G2d8d@label->binding G31ef@label G31ea@r))) (G2d89@id->label G31ed@id))) G31e9@e) (if (G2d61@syntax-pair? G31e9@e) ((lambda (G31f7@id) (if (G2d6f@id? G31f7@id) ((lambda (G31f9@label) ((lambda (G31fb@b) ((lambda (G31fd@type) ((lambda () (begin (if (not G31f9@label) (G2d95@raise-unbound-error G31f7@id) (void)) ((lambda (G31ff@t) (if (memv G31ff@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31fd@type (G2d93@binding-value G31fb@b) G31f7@id) (values 'call '#f '#f))) G31fd@type))))) (G2d91@binding-type G31fb@b))) (G2d8d@label->binding G31f9@label G31ea@r))) (G2d89@id->label G31f7@id)) (values 'call '#f '#f))) (G2d69@syntax-car G31e9@e)) ((lambda (G3201@d) (if (G2d7f@self-evaluating? G3201@d) (values 'constant G3201@d '#f) (values 'other '#f '#f))) (G2d85@stx->datum G31e9@e)))))) (set! G2da7@sanitize-binding (lambda (G3203@x G3204@src) (if (procedure? G3203@x) (cons* 'local-macro G3203@x G3204@src) (if (and (pair? G3203@x) (eq? (car G3203@x) 'macro!) (procedure? (cdr G3203@x))) (cons* 'local-macro! (cdr G3203@x) G3204@src) (if (and (pair? G3203@x) (eq? (car G3203@x) '$rtd)) G3203@x (assertion-violation 'expand '"invalid transformer" G3203@x)))))) (set! G2da9@make-variable-transformer (lambda (G3207@x) (if (procedure? G3207@x) (cons 'macro! G3207@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3207@x)))) (set! G2dab@variable-transformer? (lambda (G3209@x) (and (pair? G3209@x) (eq? (car G3209@x) 'macro!) (procedure? (cdr G3209@x))))) (set! G2dad@variable-transformer-procedure (lambda (G320b@x) (if (G2dab@variable-transformer? G320b@x) (cdr G320b@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G320b@x)))) (set! G2daf@make-eval-transformer (lambda (G320d@x) (G2da7@sanitize-binding (eval-core (G295f@G2917@expanded->core G320d@x)) G320d@x))) (set! G2ef2@parse-define (lambda (G320f@x) ((lambda (G3211@t) ((lambda (G3213@ls/false) (if (and G3213@ls/false (apply (lambda (G3215@id G3216@fmls G3217@b G3218@b*) (G2d6f@id? G3215@id)) G3213@ls/false)) (apply (lambda (G321d@id G321e@fmls G321f@b G3220@b*) (begin (G2f96@verify-formals G321e@fmls G320f@x) (values G321d@id (cons 'defun (cons G321e@fmls (cons G321f@b G3220@b*)))))) G3213@ls/false) ((lambda (G3225@t) ((lambda (G3227@ls/false) (if (and G3227@ls/false (apply (lambda (G3229@id G322a@val) (G2d6f@id? G3229@id)) G3227@ls/false)) (apply (lambda (G322d@id G322e@val) (values G322d@id (cons 'expr G322e@val))) G3227@ls/false) ((lambda (G3231@t) ((lambda (G3233@ls/false) (if (and G3233@ls/false (apply (lambda (G3235@id) (G2d6f@id? G3235@id)) G3233@ls/false)) (apply (lambda (G3237@id) (values G3237@id (cons 'expr (G2f24@bless '(void))))) G3233@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3231@t))) (G2f6e@syntax-dispatch G3231@t '(_ any)))) G3225@t))) (G2f6e@syntax-dispatch G3225@t '(_ any any)))) G3211@t))) (G2f6e@syntax-dispatch G3211@t '(_ (any . any) any . each-any)))) G320f@x))) (set! G2ef4@parse-define-syntax (lambda (G3239@x) ((lambda (G323b@t) ((lambda (G323d@ls/false) (if (and G323d@ls/false (apply (lambda (G323f@id G3240@val) (G2d6f@id? G323f@id)) G323d@ls/false)) (apply (lambda (G3243@id G3244@val) (values G3243@id G3244@val)) G323d@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G323b@t))) (G2f6e@syntax-dispatch G323b@t '(_ any any)))) G3239@x))) (set! G2ef6@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ef8@scheme-stx (lambda (G3247@sym) (or (hashtable-ref G2ef6@scheme-stx-hashtable G3247@sym '#f) ((lambda (G3249@subst) ((lambda (G324b@stx) ((lambda (G324d@stx) ((lambda () (begin (hashtable-set! G2ef6@scheme-stx-hashtable G3247@sym G324d@stx) G324d@stx)))) ((lambda (G324f@t) (if G324f@t ((lambda (G3251@x) ((lambda (G3253@name G3254@label) (G2d5b@add-subst (G2d04@make-rib (list G3253@name) (list G2ce7@top-mark*) (list G3254@label) '#f '#f) G324b@stx)) (car G3251@x) (cdr G3251@x))) G324f@t) G324b@stx)) (assq G3247@sym G3249@subst)))) (G2d39@make-stx G3247@sym G2ce7@top-mark* '() '()))) (G2b5b@G29d7@library-subst (G2b7f@G2a1f@find-library-by-name '(psyntax system $all))))))) (set! G2efa@lexical-var car) (set! G2efc@lexical-mutable? cdr) (set! G2efe@set-lexical-mutable! set-cdr!) (set! G2f00@add-lexical (lambda (G3257@lab G3258@lex G3259@r) (cons (cons* G3257@lab 'lexical G3258@lex '#f) G3259@r))) (set! G2f02@add-lexicals (lambda (G325d@lab* G325e@lex* G325f@r) (if (null? G325d@lab*) G325f@r (G2f02@add-lexicals (cdr G325d@lab*) (cdr G325e@lex*) (G2f00@add-lexical (car G325d@lab*) (car G325e@lex*) G325f@r))))) (set! G2f04@letrec-helper (lambda (G3263@e G3264@r G3265@mr G3266@build) ((lambda (G326b@t) ((lambda (G326d@ls/false) (if G326d@ls/false (apply (lambda (G326f@lhs* G3270@rhs* G3271@b G3272@b*) (if (not (G2d79@valid-bound-ids? G326f@lhs*)) (G2f28@invalid-fmls-error G3263@e G326f@lhs*) ((lambda (G3277@lex* G3278@lab*) ((lambda (G327b@rib G327c@r) ((lambda (G327f@body G3280@rhs*) (G3266@build '#f G3277@lex* G3280@rhs* G327f@body)) (G2fa8@chi-internal (G2d5b@add-subst G327b@rib (cons G3271@b G3272@b*)) G327c@r G3265@mr) (G2f8e@chi-expr* (map (lambda (G3283@x) (G2d5b@add-subst G327b@rib G3283@x)) G3270@rhs*) G327c@r G3265@mr))) (G2d2a@make-full-rib G326f@lhs* G3278@lab*) (G2f02@add-lexicals G3278@lab* G3277@lex* G3264@r))) (map G2ceb@gen-lexical G326f@lhs*) (map G2cef@gen-label G326f@lhs*)))) G326d@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G326b@t))) (G2f6e@syntax-dispatch G326b@t '(_ #(each (any any)) any . each-any)))) G3263@e))) (set! G2f06@letrec-transformer (lambda (G3285@e G3286@r G3287@mr) (G2f04@letrec-helper G3285@e G3286@r G3287@mr G2cce@G2c41@build-letrec))) (set! G2f08@letrec*-transformer (lambda (G328b@e G328c@r G328d@mr) (G2f04@letrec-helper G328b@e G328c@r G328d@mr G2ccf@G2c43@build-letrec*))) (set! G2f0a@fluid-let-syntax-transformer (lambda (G3291@e G3292@r G3293@mr) ((lambda (G3298@lookup) (begin (set! G3298@lookup (lambda (G32ab@x) (or (G2d89@id->label G32ab@x) (G305b@syntax-violation '#f '"unbound identifier" G3291@e G32ab@x)))) ((lambda (G3299@t) ((lambda (G329b@ls/false) (if G329b@ls/false (apply (lambda (G329d@lhs* G329e@rhs* G329f@b G32a0@b*) (if (not (G2d79@valid-bound-ids? G329d@lhs*)) (G2f28@invalid-fmls-error G3291@e G329d@lhs*) ((lambda (G32a5@lab* G32a6@rhs*) (G2fa8@chi-internal (cons G329f@b G32a0@b*) (append (map cons G32a5@lab* G32a6@rhs*) G3292@r) (append (map cons G32a5@lab* G32a6@rhs*) G3293@mr))) (map G3298@lookup G329d@lhs*) (map (lambda (G32a9@x) (G2daf@make-eval-transformer (G2fcd@expand-transformer G32a9@x G3293@mr))) G329e@rhs*)))) G329b@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3299@t))) (G2f6e@syntax-dispatch G3299@t '(_ #(each (any any)) any . each-any)))) G3291@e))) '#f))) (set! G2f0c@type-descriptor-transformer (lambda (G32ad@e G32ae@r G32af@mr) ((lambda (G32b3@t) ((lambda (G32b5@ls/false) (if (and G32b5@ls/false (apply (lambda (G32b7@id) (G2d6f@id? G32b7@id)) G32b5@ls/false)) (apply (lambda (G32b9@id) ((lambda (G32bb@lab) ((lambda (G32bd@b) ((lambda (G32bf@type) ((lambda () (begin (if (not G32bb@lab) (G2d95@raise-unbound-error G32b9@id) (void)) (if (not (and (eq? G32bf@type '$rtd) (not (list? (G2d93@binding-value G32bd@b))))) (G305b@syntax-violation '#f '"not a record type" G32ad@e) (void)) (list 'quote (G2d93@binding-value G32bd@b)))))) (G2d91@binding-type G32bd@b))) (G2d8d@label->binding G32bb@lab G32ae@r))) (G2d89@id->label G32b9@id))) G32b5@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G32b3@t))) (G2f6e@syntax-dispatch G32b3@t '(_ any)))) G32ad@e))) (set! G2f0e@record-type-descriptor-transformer (lambda (G32c1@e G32c2@r G32c3@mr) ((lambda (G32c7@t) ((lambda (G32c9@ls/false) (if (and G32c9@ls/false (apply (lambda (G32cb@id) (G2d6f@id? G32cb@id)) G32c9@ls/false)) (apply (lambda (G32cd@id) ((lambda (G32cf@lab) ((lambda (G32d1@b) ((lambda (G32d3@type) ((lambda () (begin (if (not G32cf@lab) (G2d95@raise-unbound-error G32cd@id) (void)) (if (not (and (eq? G32d3@type '$rtd) (list? (G2d93@binding-value G32d1@b)))) (G305b@syntax-violation '#f '"not a record type" G32c1@e) (void)) (G2f92@chi-expr (car (G2d93@binding-value G32d1@b)) G32c2@r G32c3@mr))))) (G2d91@binding-type G32d1@b))) (G2d8d@label->binding G32cf@lab G32c2@r))) (G2d89@id->label G32cd@id))) G32c9@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G32c7@t))) (G2f6e@syntax-dispatch G32c7@t '(_ any)))) G32c1@e))) (set! G2f10@record-constructor-descriptor-transformer (lambda (G32d5@e G32d6@r G32d7@mr) ((lambda (G32db@t) ((lambda (G32dd@ls/false) (if (and G32dd@ls/false (apply (lambda (G32df@id) (G2d6f@id? G32df@id)) G32dd@ls/false)) (apply (lambda (G32e1@id) ((lambda (G32e3@lab) ((lambda (G32e5@b) ((lambda (G32e7@type) ((lambda () (begin (if (not G32e3@lab) (G2d95@raise-unbound-error G32e1@id) (void)) (if (not (and (eq? G32e7@type '$rtd) (list? (G2d93@binding-value G32e5@b)))) (G305b@syntax-violation '#f '"invalid type" G32d5@e) (void)) (G2f92@chi-expr (cadr (G2d93@binding-value G32e5@b)) G32d6@r G32d7@mr))))) (G2d91@binding-type G32e5@b))) (G2d8d@label->binding G32e3@lab G32d6@r))) (G2d89@id->label G32e1@id))) G32dd@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G32db@t))) (G2f6e@syntax-dispatch G32db@t '(_ any)))) G32d5@e))) (set! G2f12@when-macro (lambda (G32e9@e) ((lambda (G32eb@t) ((lambda (G32ed@ls/false) (if G32ed@ls/false (apply (lambda (G32ef@test G32f0@e G32f1@e*) (G2f24@bless (list 'if G32ef@test (cons 'begin (cons G32f0@e G32f1@e*))))) G32ed@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G32eb@t))) (G2f6e@syntax-dispatch G32eb@t '(_ any any . each-any)))) G32e9@e))) (set! G2f14@unless-macro (lambda (G32f5@e) ((lambda (G32f7@t) ((lambda (G32f9@ls/false) (if G32f9@ls/false (apply (lambda (G32fb@test G32fc@e G32fd@e*) (G2f24@bless (list 'if (list 'not G32fb@test) (cons 'begin (cons G32fc@e G32fd@e*))))) G32f9@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G32f7@t))) (G2f6e@syntax-dispatch G32f7@t '(_ any any . each-any)))) G32f5@e))) (set! G2f16@if-transformer (lambda (G3301@e G3302@r G3303@mr) ((lambda (G3307@t) ((lambda (G3309@ls/false) (if G3309@ls/false (apply (lambda (G330b@e0 G330c@e1 G330d@e2) (list 'if (G2f92@chi-expr G330b@e0 G3302@r G3303@mr) (G2f92@chi-expr G330c@e1 G3302@r G3303@mr) (G2f92@chi-expr G330d@e2 G3302@r G3303@mr))) G3309@ls/false) ((lambda (G3311@t) ((lambda (G3313@ls/false) (if G3313@ls/false (apply (lambda (G3315@e0 G3316@e1) (list 'if (G2f92@chi-expr G3315@e0 G3302@r G3303@mr) (G2f92@chi-expr G3316@e1 G3302@r G3303@mr) (G2ccd@G2c3f@build-void))) G3313@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3311@t))) (G2f6e@syntax-dispatch G3311@t '(_ any any)))) G3307@t))) (G2f6e@syntax-dispatch G3307@t '(_ any any any)))) G3301@e))) (set! G2f18@and-transformer (lambda (G3319@e G331a@r G331b@mr) ((lambda (G331f@t) ((lambda (G3321@ls/false) (if G3321@ls/false (apply (lambda (G3323@e*) (cons 'and (G2f8e@chi-expr* G3323@e* G331a@r G331b@mr))) G3321@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G331f@t))) (G2f6e@syntax-dispatch G331f@t '(_ . each-any)))) G3319@e))) (set! G2f1a@or-transformer (lambda (G3325@e G3326@r G3327@mr) ((lambda (G332b@t) ((lambda (G332d@ls/false) (if G332d@ls/false (apply (lambda (G332f@e*) (cons 'or (G2f8e@chi-expr* G332f@e* G3326@r G3327@mr))) G332d@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G332b@t))) (G2f6e@syntax-dispatch G332b@t '(_ . each-any)))) G3325@e))) (set! G2f1c@case-macro (lambda (G3331@e) ((lambda (G3334@build-last G3336@build-one) (begin (set! G3334@build-last (lambda (G335b@cls) ((lambda (G335d@t) ((lambda (G335f@ls/false) (if G335f@ls/false (apply (lambda (G3361@e G3362@e*) (cons 'begin (cons G3361@e G3362@e*))) G335f@ls/false) ((lambda (G3365@t) ((lambda (G3367@ls/false) (if G3367@ls/false (apply (lambda () (G3336@build-one G335b@cls '(if #f #f))) G3367@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3365@t))) (G2f6e@syntax-dispatch G3365@t '_))) G335d@t))) (G2f6e@syntax-dispatch G335d@t '(#(scheme-id else) any . each-any)))) G335b@cls))) (set! G3336@build-one (lambda (G334d@cls G334e@k) ((lambda (G3351@t) ((lambda (G3353@ls/false) (if G3353@ls/false (apply (lambda (G3355@d* G3356@e G3357@e*) (list 'if (list 'memv 't (list 'quote G3355@d*)) (cons 'begin (cons G3356@e G3357@e*)) G334e@k)) G3353@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3351@t))) (G2f6e@syntax-dispatch G3351@t '(each-any any . each-any)))) G334d@cls))) ((lambda (G3337@t) ((lambda (G3339@ls/false) (if G3339@ls/false (apply (lambda (G333b@expr) (G2f24@bless (cons 'let (cons (list (list 't G333b@expr)) '((if #f #f)))))) G3339@ls/false) ((lambda (G333d@t) ((lambda (G333f@ls/false) (if G333f@ls/false (apply (lambda (G3341@expr G3342@cls G3343@cls*) (G2f24@bless (list 'let (list (list 't G3341@expr)) ((letrec ((G3347@f (lambda (G3349@cls G334a@cls*) (if (null? G334a@cls*) (G3334@build-last G3349@cls) (G3336@build-one G3349@cls (G3347@f (car G334a@cls*) (cdr G334a@cls*))))))) G3347@f) G3342@cls G3343@cls*)))) G333f@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G333d@t))) (G2f6e@syntax-dispatch G333d@t '(_ any any . each-any)))) G3337@t))) (G2f6e@syntax-dispatch G3337@t '(_ any)))) G3331@e))) '#f '#f))) (set! G2f1e@quote-transformer (lambda (G3369@e G336a@r G336b@mr) ((lambda (G336f@t) ((lambda (G3371@ls/false) (if G3371@ls/false (apply (lambda (G3373@datum) (list 'quote (G2d85@stx->datum G3373@datum))) G3371@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G336f@t))) (G2f6e@syntax-dispatch G336f@t '(_ any)))) G3369@e))) (set! G2f20@case-lambda-transformer (lambda (G3375@e G3376@r G3377@mr) ((lambda (G337b@t) ((lambda (G337d@ls/false) (if G337d@ls/false (apply (lambda (G337f@fmls* G3380@b* G3381@b**) (call-with-values (lambda () (G2f9a@chi-lambda-clause* G3375@e G337f@fmls* (map cons G3380@b* G3381@b**) G3376@r G3377@mr)) (lambda (G3387@G3385 G3388@G3386) ((lambda (G338b@body* G338c@fmls*) (G2cca@G2c09@build-case-lambda '#f G338c@fmls* G338b@body*)) G3388@G3386 G3387@G3385)))) G337d@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G337b@t))) (G2f6e@syntax-dispatch G337b@t '(_ . #(each (any any . each-any)))))) G3375@e))) (set! G2f22@lambda-transformer (lambda (G338f@e G3390@r G3391@mr) ((lambda (G3395@t) ((lambda (G3397@ls/false) (if G3397@ls/false (apply (lambda (G3399@fmls G339a@b G339b@b*) (call-with-values (lambda () (G2f98@chi-lambda-clause G338f@e G3399@fmls (cons G339a@b G339b@b*) G3390@r G3391@mr)) (lambda (G33a1@G339f G33a2@G33a0) ((lambda (G33a5@body G33a6@fmls) (G2cc9@G2c07@build-lambda '#f G33a6@fmls G33a5@body)) G33a2@G33a0 G33a1@G339f)))) G3397@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3395@t))) (G2f6e@syntax-dispatch G3395@t '(_ any any . each-any)))) G338f@e))) (set! G2f24@bless (lambda (G33a9@x) (G2d57@mkstx ((letrec ((G33ab@f (lambda (G33ad@x) (if (G2d37@stx? G33ad@x) G33ad@x (if (pair? G33ad@x) (cons (G33ab@f (car G33ad@x)) (G33ab@f (cdr G33ad@x))) (if (symbol? G33ad@x) (G2ef8@scheme-stx G33ad@x) (if (vector? G33ad@x) (vector-map G33ab@f G33ad@x) G33ad@x))))))) G33ab@f) G33a9@x) '() '() '()))) (set! G2f26@with-syntax-macro (lambda (G33af@e) ((lambda (G33b1@t) ((lambda (G33b3@ls/false) (if G33b3@ls/false (apply (lambda (G33b5@pat* G33b6@expr* G33b7@b G33b8@b*) ((lambda (G33bd@idn*) (begin (G2f96@verify-formals (map car G33bd@idn*) G33af@e) ((lambda (G33bf@t*) (G2f24@bless (list 'let (map list G33bf@t* G33b6@expr*) ((letrec ((G33c1@f (lambda (G33c3@pat* G33c4@t*) (if (null? G33c3@pat*) (cons 'begin (cons '#f (cons G33b7@b G33b8@b*))) (list 'syntax-case (car G33c4@t*) '() (list (car G33c3@pat*) (G33c1@f (cdr G33c3@pat*) (cdr G33c4@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33c3@pat*)) (car G33c4@t*)))))))) G33c1@f) G33b5@pat* G33bf@t*)))) (G3047@generate-temporaries G33b6@expr*)))) ((letrec ((G33c7@f (lambda (G33c9@pat*) (if (null? G33c9@pat*) '() (call-with-values (lambda () (G2f6c@convert-pattern (car G33c9@pat*) '())) (lambda (G33cd@G33cb G33ce@G33cc) ((lambda (G33d1@idn* G33d2@pat) (append G33d1@idn* (G33c7@f (cdr G33c9@pat*)))) G33ce@G33cc G33cd@G33cb))))))) G33c7@f) G33b5@pat*))) G33b3@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G33b1@t))) (G2f6e@syntax-dispatch G33b1@t '(_ #(each (any any)) any . each-any)))) G33af@e))) (set! G2f28@invalid-fmls-error (lambda (G33d5@stx G33d6@fmls) ((lambda (G33d9@t) ((lambda (G33db@ls/false) (if G33db@ls/false (apply (lambda (G33dd@id* G33de@last) ((letrec ((G33e1@f (lambda (G33e3@id*) (if (null? G33e3@id*) (values) (if (not (G2d6f@id? (car G33e3@id*))) (G305b@syntax-violation '#f '"not an identifier" G33d5@stx (car G33e3@id*)) (begin (G33e1@f (cdr G33e3@id*)) (if (G2d7d@bound-id-member? (car G33e3@id*) (cdr G33e3@id*)) (G305b@syntax-violation '#f '"duplicate binding" G33d5@stx (car G33e3@id*)) (void)))))))) G33e1@f) (if (G2d6f@id? G33de@last) (cons G33de@last G33dd@id*) (if (G2d65@syntax-null? G33de@last) G33dd@id* (G305b@syntax-violation '#f '"not an identifier" G33d5@stx G33de@last))))) G33db@ls/false) ((lambda (G33e5@t) ((lambda (G33e7@ls/false) (if G33e7@ls/false (apply (lambda () (G305b@syntax-violation '#f '"malformed binding form" G33d5@stx G33d6@fmls)) G33e7@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G33e5@t))) (G2f6e@syntax-dispatch G33e5@t '_))) G33d9@t))) (G2f6e@syntax-dispatch G33d9@t '#(each+ any () any)))) G33d6@fmls))) (set! G2f2a@let-macro (lambda (G33e9@stx) ((lambda (G33eb@t) ((lambda (G33ed@ls/false) (if G33ed@ls/false (apply (lambda (G33ef@lhs* G33f0@rhs* G33f1@b G33f2@b*) (if (G2d79@valid-bound-ids? G33ef@lhs*) (G2f24@bless (cons (cons 'lambda (cons G33ef@lhs* (cons G33f1@b G33f2@b*))) G33f0@rhs*)) (G2f28@invalid-fmls-error G33e9@stx G33ef@lhs*))) G33ed@ls/false) ((lambda (G33f7@t) ((lambda (G33f9@ls/false) (if (and G33f9@ls/false (apply (lambda (G33fb@f G33fc@lhs* G33fd@rhs* G33fe@b G33ff@b*) (G2d6f@id? G33fb@f)) G33f9@ls/false)) (apply (lambda (G3405@f G3406@lhs* G3407@rhs* G3408@b G3409@b*) (if (G2d79@valid-bound-ids? G3406@lhs*) (G2f24@bless (cons (list 'letrec (list (list G3405@f (cons 'lambda (cons G3406@lhs* (cons G3408@b G3409@b*))))) G3405@f) G3407@rhs*)) (G2f28@invalid-fmls-error G33e9@stx G3406@lhs*))) G33f9@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G33f7@t))) (G2f6e@syntax-dispatch G33f7@t '(_ any #(each (any any)) any . each-any)))) G33eb@t))) (G2f6e@syntax-dispatch G33eb@t '(_ #(each (any any)) any . each-any)))) G33e9@stx))) (set! G2f2c@let-values-macro (lambda (G340f@stx) ((lambda (G3412@rename G3414@rename*) (begin (set! G3412@rename (lambda (G3474@x G3475@old* G3476@new*) (begin (if (not (G2d6f@id? G3474@x)) (G305b@syntax-violation '#f '"not an indentifier" G340f@stx G3474@x) (void)) (if (G2d7d@bound-id-member? G3474@x G3475@old*) (G305b@syntax-violation '#f '"duplicate binding" G340f@stx G3474@x) (void)) ((lambda (G347a@y) (values G347a@y (cons G3474@x G3475@old*) (cons G347a@y G3476@new*))) (gensym (G3061@syntax->datum G3474@x)))))) (set! G3414@rename* (lambda (G3462@x* G3463@old* G3464@new*) (if (null? G3462@x*) (values '() G3463@old* G3464@new*) (call-with-values (lambda () (G3412@rename (car G3462@x*) G3463@old* G3464@new*)) (lambda (G3468@x G3469@old* G346a@new*) (call-with-values (lambda () (G3414@rename* (cdr G3462@x*) G3469@old* G346a@new*)) (lambda (G346e@x* G346f@old* G3470@new*) (values (cons G3468@x G346e@x*) G346f@old* G3470@new*)))))))) ((lambda (G3415@t) ((lambda (G3417@ls/false) (if G3417@ls/false (apply (lambda (G3419@b G341a@b*) (cons* (G2f24@bless 'let) '() G3419@b G341a@b*)) G3417@ls/false) ((lambda (G341d@t) ((lambda (G341f@ls/false) (if G341f@ls/false (apply (lambda (G3421@lhs* G3422@rhs* G3423@b G3424@b*) (G2f24@bless ((letrec ((G3429@f (lambda (G342b@lhs* G342c@rhs* G342d@old* G342e@new*) (if (null? G342b@lhs*) (cons 'let (cons (map list G342d@old* G342e@new*) (cons G3423@b G3424@b*))) ((lambda (G3433@t) ((lambda (G3435@ls/false) (if G3435@ls/false (apply (lambda (G3437@x*) (call-with-values (lambda () (G3414@rename* G3437@x* G342d@old* G342e@new*)) (lambda (G343c@G3439 G343d@G343a G343e@G343b) ((lambda (G3442@new* G3443@old* G3444@y*) (list 'call-with-values (list 'lambda '() (car G342c@rhs*)) (list 'lambda G3444@y* (G3429@f (cdr G342b@lhs*) (cdr G342c@rhs*) G3443@old* G3442@new*)))) G343e@G343b G343d@G343a G343c@G3439)))) G3435@ls/false) ((lambda (G3448@t) ((lambda (G344a@ls/false) (if G344a@ls/false (apply (lambda (G344c@x* G344d@x) (call-with-values (lambda () (G3412@rename G344d@x G342d@old* G342e@new*)) (lambda (G3450@y G3451@old* G3452@new*) (call-with-values (lambda () (G3414@rename* G344c@x* G3451@old* G3452@new*)) (lambda (G3456@y* G3457@old* G3458@new*) (list 'call-with-values (list 'lambda '() (car G342c@rhs*)) (list 'lambda (append G3456@y* G3450@y) (G3429@f (cdr G342b@lhs*) (cdr G342c@rhs*) G3457@old* G3458@new*)))))))) G344a@ls/false) ((lambda (G345c@t) ((lambda (G345e@ls/false) (if G345e@ls/false (apply (lambda (G3460@others) (G305b@syntax-violation '#f '"malformed bindings" G340f@stx G3460@others)) G345e@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G345c@t))) (G2f6e@syntax-dispatch G345c@t 'any))) G3448@t))) (G2f6e@syntax-dispatch G3448@t '#(each+ any () any)))) G3433@t))) (G2f6e@syntax-dispatch G3433@t 'each-any))) (car G342b@lhs*)))))) G3429@f) G3421@lhs* G3422@rhs* '() '()))) G341f@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G341d@t))) (G2f6e@syntax-dispatch G341d@t '(_ #(each (any any)) any . each-any)))) G3415@t))) (G2f6e@syntax-dispatch G3415@t '(_ () any . each-any)))) G340f@stx))) '#f '#f))) (set! G2f2e@let*-values-macro (lambda (G347c@stx) ((lambda (G347f@check) (begin (set! G347f@check (lambda (G34ae@x*) (if (not (null? G34ae@x*)) ((lambda (G34b0@x) (begin (if (not (G2d6f@id? G34b0@x)) (G305b@syntax-violation '#f '"not an identifier" G347c@stx G34b0@x) (void)) (G347f@check (cdr G34ae@x*)) (if (G2d7d@bound-id-member? G34b0@x (cdr G34ae@x*)) (G305b@syntax-violation '#f '"duplicate identifier" G347c@stx G34b0@x) (void)))) (car G34ae@x*)) (void)))) ((lambda (G3480@t) ((lambda (G3482@ls/false) (if G3482@ls/false (apply (lambda (G3484@b G3485@b*) (cons* (G2f24@bless 'let) '() G3484@b G3485@b*)) G3482@ls/false) ((lambda (G3488@t) ((lambda (G348a@ls/false) (if G348a@ls/false (apply (lambda (G348c@lhs* G348d@rhs* G348e@b G348f@b*) (G2f24@bless ((letrec ((G3494@f (lambda (G3496@lhs* G3497@rhs*) (if (null? G3496@lhs*) (cons 'begin (cons G348e@b G348f@b*)) ((lambda (G349a@t) ((lambda (G349c@ls/false) (if G349c@ls/false (apply (lambda (G349e@x*) (begin (G347f@check G349e@x*) (list 'call-with-values (list 'lambda '() (car G3497@rhs*)) (list 'lambda G349e@x* (G3494@f (cdr G3496@lhs*) (cdr G3497@rhs*)))))) G349c@ls/false) ((lambda (G34a0@t) ((lambda (G34a2@ls/false) (if G34a2@ls/false (apply (lambda (G34a4@x* G34a5@x) (begin (G347f@check (cons G34a5@x G34a4@x*)) (list 'call-with-values (list 'lambda '() (car G3497@rhs*)) (list 'lambda (append G34a4@x* G34a5@x) (G3494@f (cdr G3496@lhs*) (cdr G3497@rhs*)))))) G34a2@ls/false) ((lambda (G34a8@t) ((lambda (G34aa@ls/false) (if G34aa@ls/false (apply (lambda (G34ac@others) (G305b@syntax-violation '#f '"malformed bindings" G347c@stx G34ac@others)) G34aa@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G34a8@t))) (G2f6e@syntax-dispatch G34a8@t 'any))) G34a0@t))) (G2f6e@syntax-dispatch G34a0@t '#(each+ any () any)))) G349a@t))) (G2f6e@syntax-dispatch G349a@t 'each-any))) (car G3496@lhs*)))))) G3494@f) G348c@lhs* G348d@rhs*))) G348a@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3488@t))) (G2f6e@syntax-dispatch G3488@t '(_ #(each (any any)) any . each-any)))) G3480@t))) (G2f6e@syntax-dispatch G3480@t '(_ () any . each-any)))) G347c@stx))) '#f))) (set! G2f30@trace-lambda-macro (lambda (G34b2@stx) ((lambda (G34b4@t) ((lambda (G34b6@ls/false) (if G34b6@ls/false (apply (lambda (G34b8@who G34b9@fmls G34ba@b G34bb@b*) (if (G2d79@valid-bound-ids? G34b9@fmls) (G2f24@bless (list 'make-traced-procedure (list 'quote G34b8@who) (cons 'lambda (cons G34b9@fmls (cons G34ba@b G34bb@b*))))) (G2f28@invalid-fmls-error G34b2@stx G34b9@fmls))) G34b6@ls/false) ((lambda (G34c0@t) ((lambda (G34c2@ls/false) (if G34c2@ls/false (apply (lambda (G34c4@who G34c5@fmls G34c6@last G34c7@b G34c8@b*) (if (G2d79@valid-bound-ids? (cons G34c6@last G34c5@fmls)) (G2f24@bless (list 'make-traced-procedure (list 'quote G34c4@who) (cons 'lambda (cons (append G34c5@fmls G34c6@last) (cons G34c7@b G34c8@b*))))) (G2f28@invalid-fmls-error G34b2@stx (append G34c5@fmls G34c6@last)))) G34c2@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G34c0@t))) (G2f6e@syntax-dispatch G34c0@t '(_ any #(each+ any () any) any . each-any)))) G34b4@t))) (G2f6e@syntax-dispatch G34b4@t '(_ any each-any any . each-any)))) G34b2@stx))) (set! G2f32@trace-define-macro (lambda (G34ce@stx) ((lambda (G34d0@t) ((lambda (G34d2@ls/false) (if G34d2@ls/false (apply (lambda (G34d4@who G34d5@fmls G34d6@b G34d7@b*) (if (G2d79@valid-bound-ids? G34d5@fmls) (G2f24@bless (list 'define G34d4@who (list 'make-traced-procedure (list 'quote G34d4@who) (cons 'lambda (cons G34d5@fmls (cons G34d6@b G34d7@b*)))))) (G2f28@invalid-fmls-error G34ce@stx G34d5@fmls))) G34d2@ls/false) ((lambda (G34dc@t) ((lambda (G34de@ls/false) (if G34de@ls/false (apply (lambda (G34e0@who G34e1@fmls G34e2@last G34e3@b G34e4@b*) (if (G2d79@valid-bound-ids? (cons G34e2@last G34e1@fmls)) (G2f24@bless (list 'define G34e0@who (list 'make-traced-procedure (list 'quote G34e0@who) (cons 'lambda (cons (append G34e1@fmls G34e2@last) (cons G34e3@b G34e4@b*)))))) (G2f28@invalid-fmls-error G34ce@stx (append G34e1@fmls G34e2@last)))) G34de@ls/false) ((lambda (G34ea@t) ((lambda (G34ec@ls/false) (if G34ec@ls/false (apply (lambda (G34ee@who G34ef@expr) (if (G2d6f@id? G34ee@who) (G2f24@bless (list 'define G34ee@who (list 'let (list (list 'v G34ef@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34ee@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G305b@syntax-violation '#f '"invalid name" G34ce@stx))) G34ec@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G34ea@t))) (G2f6e@syntax-dispatch G34ea@t '(_ any any)))) G34dc@t))) (G2f6e@syntax-dispatch G34dc@t '(_ (any . #(each+ any () any)) any . each-any)))) G34d0@t))) (G2f6e@syntax-dispatch G34d0@t '(_ (any . each-any) any . each-any)))) G34ce@stx))) (set! G2f34@trace-define-syntax-macro (lambda (G34f2@stx) ((lambda (G34f4@t) ((lambda (G34f6@ls/false) (if G34f6@ls/false (apply (lambda (G34f8@who G34f9@expr) (if (G2d6f@id? G34f8@who) (G2f24@bless (list 'define-syntax G34f8@who (list 'make-traced-macro (list 'quote G34f8@who) G34f9@expr))) (G305b@syntax-violation '#f '"invalid name" G34f2@stx))) G34f6@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G34f4@t))) (G2f6e@syntax-dispatch G34f4@t '(_ any any)))) G34f2@stx))) (set! G2f36@trace-let/rec-syntax (lambda (G34fc@who) (lambda (G34fe@stx) ((lambda (G3500@t) ((lambda (G3502@ls/false) (if G3502@ls/false (apply (lambda (G3504@lhs* G3505@rhs* G3506@b G3507@b*) (if (G2d79@valid-bound-ids? G3504@lhs*) ((lambda (G350c@rhs*) (G2f24@bless (cons G34fc@who (cons (map list G3504@lhs* G350c@rhs*) (cons G3506@b G3507@b*))))) (map (lambda (G350e@lhs G350f@rhs) (list 'make-traced-macro (list 'quote G350e@lhs) G350f@rhs)) G3504@lhs* G3505@rhs*)) (G2f28@invalid-fmls-error G34fe@stx G3504@lhs*))) G3502@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3500@t))) (G2f6e@syntax-dispatch G3500@t '(_ #(each (any any)) any . each-any)))) G34fe@stx)))) (set! G2f38@trace-let-syntax-macro (G2f36@trace-let/rec-syntax 'let-syntax)) (set! G2f3a@trace-letrec-syntax-macro (G2f36@trace-let/rec-syntax 'letrec-syntax)) (set! G2f3c@guard-macro (lambda (G3512@x) ((lambda (G3515@gen-clauses) (begin (set! G3515@gen-clauses (lambda (G352c@con G352d@outerk G352e@clause*) ((lambda (G3533@f G3535@f*) (begin (set! G3533@f (lambda (G3568@x G3569@k) ((lambda (G356c@t) ((lambda (G356e@ls/false) (if G356e@ls/false (apply (lambda (G3570@e G3571@p) ((lambda (G3574@t) (list 'let (list (list G3574@t G3570@e)) (list 'if G3574@t (list G3571@p G3574@t) G3569@k))) (gensym))) G356e@ls/false) ((lambda (G3576@t) ((lambda (G3578@ls/false) (if G3578@ls/false (apply (lambda (G357a@e) ((lambda (G357c@t) (list 'let (list (list G357c@t G357a@e)) (list 'if G357c@t G357c@t G3569@k))) (gensym))) G3578@ls/false) ((lambda (G357e@t) ((lambda (G3580@ls/false) (if G3580@ls/false (apply (lambda (G3582@e G3583@v G3584@v*) (list 'if G3582@e (cons 'begin (cons G3583@v G3584@v*)) G3569@k)) G3580@ls/false) ((lambda (G3588@t) ((lambda (G358a@ls/false) (if G358a@ls/false (apply (lambda () (G305b@syntax-violation '#f '"invalid guard clause" G3568@x)) G358a@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3588@t))) (G2f6e@syntax-dispatch G3588@t '_))) G357e@t))) (G2f6e@syntax-dispatch G357e@t '(any any . each-any)))) G3576@t))) (G2f6e@syntax-dispatch G3576@t '(any)))) G356c@t))) (G2f6e@syntax-dispatch G356c@t '(any #(scheme-id =>) any)))) G3568@x))) (set! G3535@f* (lambda (G3540@x*) ((lambda (G3542@t) ((lambda (G3544@ls/false) (if G3544@ls/false (apply (lambda () ((lambda (G3546@g) (values (list G3546@g (list 'lambda '() (list 'raise-continuable G352c@con))) G3546@g)) (gensym))) G3544@ls/false) ((lambda (G3548@t) ((lambda (G354a@ls/false) (if G354a@ls/false (apply (lambda (G354c@e G354d@e*) (values (cons 'begin (cons G354c@e G354d@e*)) '#f)) G354a@ls/false) ((lambda (G3550@t) ((lambda (G3552@ls/false) (if G3552@ls/false (apply (lambda (G3554@cls G3555@cls*) (call-with-values (lambda () (G3535@f* G3555@cls*)) (lambda (G355a@G3558 G355b@G3559) ((lambda (G355e@g G355f@e) (values (G3533@f G3554@cls G355f@e) G355e@g)) G355b@G3559 G355a@G3558)))) G3552@ls/false) ((lambda (G3562@t) ((lambda (G3564@ls/false) (if G3564@ls/false (apply (lambda (G3566@others) (G305b@syntax-violation '#f '"invalid guard clause" G3566@others)) G3564@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3562@t))) (G2f6e@syntax-dispatch G3562@t 'any))) G3550@t))) (G2f6e@syntax-dispatch G3550@t '(any . any)))) G3548@t))) (G2f6e@syntax-dispatch G3548@t '((#(scheme-id else) any . each-any))))) G3542@t))) (G2f6e@syntax-dispatch G3542@t '()))) G3540@x*))) (call-with-values (lambda () (G3535@f* G352e@clause*)) (lambda (G3538@G3536 G3539@G3537) ((lambda (G353c@raisek G353d@code) (if G353c@raisek (list (list 'call/cc (list 'lambda (list G353c@raisek) (list G352d@outerk (list 'lambda '() G353d@code))))) (list G352d@outerk (list 'lambda '() G353d@code)))) G3539@G3537 G3538@G3536))))) '#f '#f))) ((lambda (G3516@t) ((lambda (G3518@ls/false) (if (and G3518@ls/false (apply (lambda (G351a@con G351b@clause* G351c@b G351d@b*) (G2d6f@id? G351a@con)) G3518@ls/false)) (apply (lambda (G3522@con G3523@clause* G3524@b G3525@b*) ((lambda (G352a@outerk) (G2f24@bless (list (list 'call/cc (list 'lambda (list G352a@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G3522@con) (G3515@gen-clauses G3522@con G352a@outerk G3523@clause*)) (cons 'lambda (cons '() (cons '#f (cons G3524@b G3525@b*))))))))))) (gensym))) G3518@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3516@t))) (G2f6e@syntax-dispatch G3516@t '(_ (any . each-any) any . each-any)))) G3512@x))) '#f))) (set! G2f3e@define-enumeration-macro (lambda (G358c@stx) ((lambda (G358f@set? G3591@remove-dups) (begin (set! G358f@set? (lambda (G35a8@x) (or (null? G35a8@x) (and (not (memq (car G35a8@x) (cdr G35a8@x))) (G358f@set? (cdr G35a8@x)))))) (set! G3591@remove-dups (lambda (G35a6@ls) (if (null? G35a6@ls) '() (cons (car G35a6@ls) (G3591@remove-dups (remq (car G35a6@ls) (cdr G35a6@ls))))))) ((lambda (G3592@t) ((lambda (G3594@ls/false) (if (and G3594@ls/false (apply (lambda (G3596@name G3597@id* G3598@maker) (and (G2d6f@id? G3596@name) (G2d6f@id? G3598@maker) (for-all G2d6f@id? G3597@id*))) G3594@ls/false)) (apply (lambda (G359c@name G359d@id* G359e@maker) ((lambda (G35a2@name* G35a3@mk) (G2f24@bless (list 'begin (list 'define G35a3@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G35a2@name*)))) (list 'define-syntax G359c@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G35a2@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G359c@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G359e@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G359e@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G35a2@name*)) (cons 'syntax-violation (cons (list 'quote G359e@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G35a3@mk '('(n* ...)))))))))))) (G3591@remove-dups (G3061@syntax->datum G359d@id*)) (gensym))) G3594@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3592@t))) (G2f6e@syntax-dispatch G3592@t '(_ any each-any any)))) G358c@stx))) '#f '#f))) (set! G2f40@time-macro (lambda (G35aa@stx) ((lambda (G35ac@t) ((lambda (G35ae@ls/false) (if G35ae@ls/false (apply (lambda (G35b0@expr) ((lambda (G35b2@str) (G2f24@bless (list 'time-it G35b2@str (list 'lambda '() G35b0@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G35b6@G35b4 G35b7@G35b5) ((lambda (G35ba@e G35bb@p) (begin (write (G3061@syntax->datum G35b0@expr) G35bb@p) (G35ba@e))) G35b7@G35b5 G35b6@G35b4))))) G35ae@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G35ac@t))) (G2f6e@syntax-dispatch G35ac@t '(_ any)))) G35aa@stx))) (set! G2f42@delay-macro (lambda (G35be@stx) ((lambda (G35c0@t) ((lambda (G35c2@ls/false) (if G35c2@ls/false (apply (lambda (G35c4@expr) (G2f24@bless (list 'make-promise (list 'lambda '() G35c4@expr)))) G35c2@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G35c0@t))) (G2f6e@syntax-dispatch G35c0@t '(_ any)))) G35be@stx))) (set! G2f44@assert-macro (lambda (G35c6@stx) ((lambda (G35c8@t) ((lambda (G35ca@ls/false) (if G35ca@ls/false (apply (lambda (G35cc@expr) ((lambda (G35ce@pos) (G2f24@bless (list 'unless G35cc@expr (list 'assertion-error (list 'quote G35cc@expr) (list 'quote G35ce@pos))))) (or (G3051@expression-position G35c6@stx) (G3051@expression-position G35cc@expr)))) G35ca@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G35c8@t))) (G2f6e@syntax-dispatch G35c8@t '(_ any)))) G35c6@stx))) (set! G2f46@endianness-macro (lambda (G35d0@stx) ((lambda (G35d2@t) ((lambda (G35d4@ls/false) (if G35d4@ls/false (apply (lambda (G35d6@e) ((lambda (G35d8@t) (if (memv G35d8@t '(little)) (G2f24@bless ''little) (if (memv G35d8@t '(big)) (G2f24@bless ''big) (G305b@syntax-violation '#f '"endianness must be big or little" G35d0@stx)))) (G3061@syntax->datum G35d6@e))) G35d4@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G35d2@t))) (G2f6e@syntax-dispatch G35d2@t '(_ any)))) G35d0@stx))) (set! G2f48@identifier-syntax-macro (lambda (G35da@stx) ((lambda (G35dc@t) ((lambda (G35de@ls/false) (if G35de@ls/false (apply (lambda (G35e0@expr) (G2f24@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35e0@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35e0@expr) '((syntax (e* ...)))))))))) G35de@ls/false) ((lambda (G35e2@t) ((lambda (G35e4@ls/false) (if (and G35e4@ls/false (apply (lambda (G35e6@id1 G35e7@expr1 G35e8@id2 G35e9@expr2 G35ea@expr3) (and (G2d6f@id? G35e6@id1) (G2d6f@id? G35e8@id2) (G2d6f@id? G35e9@expr2))) G35e4@ls/false)) (apply (lambda (G35f0@id1 G35f1@expr1 G35f2@id2 G35f3@expr2 G35f4@expr3) (G2f24@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35f1@expr1)) (list (list 'set! 'id G35f3@expr2) (list 'syntax G35f4@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35f1@expr1 '(e* ...))))))))) G35e4@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G35e2@t))) (G2f6e@syntax-dispatch G35e2@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35dc@t))) (G2f6e@syntax-dispatch G35dc@t '(_ any)))) G35da@stx))) (set! G2f4a@do-macro (lambda (G35fa@stx) ((lambda (G35fd@bind) (begin (set! G35fd@bind (lambda (G3614@x) ((lambda (G3616@t) ((lambda (G3618@ls/false) (if G3618@ls/false (apply (lambda (G361a@x G361b@init) (list G361a@x G361b@init G361a@x)) G3618@ls/false) ((lambda (G361e@t) ((lambda (G3620@ls/false) (if G3620@ls/false (apply (lambda (G3622@x G3623@init G3624@step) (list G3622@x G3623@init G3624@step)) G3620@ls/false) ((lambda (G3628@t) ((lambda (G362a@ls/false) (if G362a@ls/false (apply (lambda () (G305b@syntax-violation '#f '"invalid binding" G35fa@stx)) G362a@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3628@t))) (G2f6e@syntax-dispatch G3628@t '_))) G361e@t))) (G2f6e@syntax-dispatch G361e@t '(any any any)))) G3616@t))) (G2f6e@syntax-dispatch G3616@t '(any any)))) G3614@x))) ((lambda (G35fe@t) ((lambda (G3600@ls/false) (if G3600@ls/false (apply (lambda (G3602@binding* G3603@test G3604@expr* G3605@command*) ((lambda (G360a@t) ((lambda (G360c@ls/false) (if G360c@ls/false (apply (lambda (G360e@x* G360f@init* G3610@step*) (if (G2d79@valid-bound-ids? G360e@x*) (G2f24@bless (list 'letrec (list (list 'loop (list 'lambda G360e@x* (list 'if G3603@test (cons 'begin (cons '(if #f #f) G3604@expr*)) (cons 'begin (append G3605@command* (list (cons 'loop G3610@step*)))))))) (cons 'loop G360f@init*))) (G305b@syntax-violation '#f '"invalid bindings" G35fa@stx))) G360c@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G360a@t))) (G2f6e@syntax-dispatch G360a@t '#(each (any any any))))) (map G35fd@bind G3602@binding*))) G3600@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G35fe@t))) (G2f6e@syntax-dispatch G35fe@t '(_ each-any (any . each-any) . each-any)))) G35fa@stx))) '#f))) (set! G2f4c@let*-macro (lambda (G362c@stx) ((lambda (G362e@t) ((lambda (G3630@ls/false) (if (and G3630@ls/false (apply (lambda (G3632@lhs* G3633@rhs* G3634@b G3635@b*) (for-all G2d6f@id? G3632@lhs*)) G3630@ls/false)) (apply (lambda (G363a@lhs* G363b@rhs* G363c@b G363d@b*) (G2f24@bless ((letrec ((G3642@f (lambda (G3644@x*) (if (null? G3644@x*) (cons 'let (cons '() (cons G363c@b G363d@b*))) (list 'let (list (car G3644@x*)) (G3642@f (cdr G3644@x*))))))) G3642@f) (map list G363a@lhs* G363b@rhs*)))) G3630@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G362e@t))) (G2f6e@syntax-dispatch G362e@t '(_ #(each (any any)) any . each-any)))) G362c@stx))) (set! G2f4e@or-macro (lambda (G3646@stx) ((lambda (G3648@t) ((lambda (G364a@ls/false) (if G364a@ls/false (apply (lambda () '#f) G364a@ls/false) ((lambda (G364c@t) ((lambda (G364e@ls/false) (if G364e@ls/false (apply (lambda (G3650@e G3651@e*) (G2f24@bless ((letrec ((G3654@f (lambda (G3656@e G3657@e*) (if (null? G3657@e*) (list 'begin '#f G3656@e) (list 'let (list (list 't G3656@e)) (list 'if 't 't (G3654@f (car G3657@e*) (cdr G3657@e*)))))))) G3654@f) G3650@e G3651@e*))) G364e@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G364c@t))) (G2f6e@syntax-dispatch G364c@t '(_ any . each-any)))) G3648@t))) (G2f6e@syntax-dispatch G3648@t '(_)))) G3646@stx))) (set! G2f50@and-macro (lambda (G365a@stx) ((lambda (G365c@t) ((lambda (G365e@ls/false) (if G365e@ls/false (apply (lambda () '#t) G365e@ls/false) ((lambda (G3660@t) ((lambda (G3662@ls/false) (if G3662@ls/false (apply (lambda (G3664@e G3665@e*) (G2f24@bless ((letrec ((G3668@f (lambda (G366a@e G366b@e*) (if (null? G366b@e*) (list 'begin '#f G366a@e) (cons 'if (cons G366a@e (cons (G3668@f (car G366b@e*) (cdr G366b@e*)) '(#f)))))))) G3668@f) G3664@e G3665@e*))) G3662@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3660@t))) (G2f6e@syntax-dispatch G3660@t '(_ any . each-any)))) G365c@t))) (G2f6e@syntax-dispatch G365c@t '(_)))) G365a@stx))) (set! G2f52@cond-macro (lambda (G366e@stx) ((lambda (G3670@t) ((lambda (G3672@ls/false) (if G3672@ls/false (apply (lambda (G3674@cls G3675@cls*) (G2f24@bless ((letrec ((G3678@f (lambda (G367a@cls G367b@cls*) (if (null? G367b@cls*) ((lambda (G367e@t) ((lambda (G3680@ls/false) (if G3680@ls/false (apply (lambda (G3682@e G3683@e*) (cons 'begin (cons G3682@e G3683@e*))) G3680@ls/false) ((lambda (G3686@t) ((lambda (G3688@ls/false) (if G3688@ls/false (apply (lambda (G368a@e G368b@p) (list 'let (list (list 't G368a@e)) (list 'if 't (cons G368b@p '(t))))) G3688@ls/false) ((lambda (G368e@t) ((lambda (G3690@ls/false) (if G3690@ls/false (apply (lambda (G3692@e) (cons 'or (cons G3692@e '((if #f #f))))) G3690@ls/false) ((lambda (G3694@t) ((lambda (G3696@ls/false) (if G3696@ls/false (apply (lambda (G3698@e G3699@e*) (list 'if G3698@e (cons 'begin G3699@e*))) G3696@ls/false) ((lambda (G369c@t) ((lambda (G369e@ls/false) (if G369e@ls/false (apply (lambda () (G305b@syntax-violation '#f '"invalid last clause" G366e@stx)) G369e@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G369c@t))) (G2f6e@syntax-dispatch G369c@t '_))) G3694@t))) (G2f6e@syntax-dispatch G3694@t '(any . each-any)))) G368e@t))) (G2f6e@syntax-dispatch G368e@t '(any)))) G3686@t))) (G2f6e@syntax-dispatch G3686@t '(any #(scheme-id =>) any)))) G367e@t))) (G2f6e@syntax-dispatch G367e@t '(#(scheme-id else) any . each-any)))) G367a@cls) ((lambda (G36a0@t) ((lambda (G36a2@ls/false) (if G36a2@ls/false (apply (lambda (G36a4@e G36a5@e*) (G305b@syntax-violation '#f '"incorrect position of keyword else" G366e@stx)) G36a2@ls/false) ((lambda (G36a8@t) ((lambda (G36aa@ls/false) (if G36aa@ls/false (apply (lambda (G36ac@e G36ad@p) (list 'let (list (list 't G36ac@e)) (list 'if 't (cons G36ad@p '(t)) (G3678@f (car G367b@cls*) (cdr G367b@cls*))))) G36aa@ls/false) ((lambda (G36b0@t) ((lambda (G36b2@ls/false) (if G36b2@ls/false (apply (lambda (G36b4@e) (list 'or G36b4@e (G3678@f (car G367b@cls*) (cdr G367b@cls*)))) G36b2@ls/false) ((lambda (G36b6@t) ((lambda (G36b8@ls/false) (if G36b8@ls/false (apply (lambda (G36ba@e G36bb@e*) (list 'if G36ba@e (cons 'begin G36bb@e*) (G3678@f (car G367b@cls*) (cdr G367b@cls*)))) G36b8@ls/false) ((lambda (G36be@t) ((lambda (G36c0@ls/false) (if G36c0@ls/false (apply (lambda () (G305b@syntax-violation '#f '"invalid last clause" G366e@stx)) G36c0@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G36be@t))) (G2f6e@syntax-dispatch G36be@t '_))) G36b6@t))) (G2f6e@syntax-dispatch G36b6@t '(any . each-any)))) G36b0@t))) (G2f6e@syntax-dispatch G36b0@t '(any)))) G36a8@t))) (G2f6e@syntax-dispatch G36a8@t '(any #(scheme-id =>) any)))) G36a0@t))) (G2f6e@syntax-dispatch G36a0@t '(#(scheme-id else) any . each-any)))) G367a@cls))))) G3678@f) G3674@cls G3675@cls*))) G3672@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3670@t))) (G2f6e@syntax-dispatch G3670@t '(_ any . each-any)))) G366e@stx))) (set! G2f54@do-include (lambda (G36c2@stx G36c3@id G36c4@filename) ((lambda (G36c8@filename) (begin (if (not (and (string? G36c8@filename) (G2d6f@id? G36c3@id))) (G305b@syntax-violation '#f '"invalid syntax" G36c2@stx) (void)) (cons (G2f24@bless 'begin) (with-input-from-file G36c8@filename (lambda () ((letrec ((G36ca@f (lambda (G36cc@ls) ((lambda (G36ce@x) (if (eof-object? G36ce@x) (reverse G36cc@ls) (G36ca@f (cons (G2d4d@datum->stx G36c3@id G36ce@x) G36cc@ls)))) (G28fe@G2827@read-annotated))))) G36ca@f) '())))))) (G2d85@stx->datum G36c4@filename)))) (set! G2f56@include-macro (lambda (G36d0@e) ((lambda (G36d2@t) ((lambda (G36d4@ls/false) (if G36d4@ls/false (apply (lambda (G36d6@id G36d7@filename) (G2f54@do-include G36d0@e G36d6@id G36d7@filename)) G36d4@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G36d2@t))) (G2f6e@syntax-dispatch G36d2@t '(any any)))) G36d0@e))) (set! G2f58@include-into-macro (lambda (G36da@e) ((lambda (G36dc@t) ((lambda (G36de@ls/false) (if G36de@ls/false (apply (lambda (G36e0@id G36e1@filename) (G2f54@do-include G36da@e G36e0@id G36e1@filename)) G36de@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G36dc@t))) (G2f6e@syntax-dispatch G36dc@t '(_ any any)))) G36da@e))) (set! G2f5a@syntax-rules-macro (lambda (G36e4@e) ((lambda (G36e6@t) ((lambda (G36e8@ls/false) (if G36e8@ls/false (apply (lambda (G36ea@lits G36eb@pat* G36ec@tmp*) (begin (G2f74@verify-literals G36ea@lits G36e4@e) (G2f24@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36ea@lits (map (lambda (G36f0@pat G36f1@tmp) ((lambda (G36f4@t) ((lambda (G36f6@ls/false) (if G36f6@ls/false (apply (lambda (G36f8@rest) (list (cons 'g G36f8@rest) (list 'syntax G36f1@tmp))) G36f6@ls/false) ((lambda (G36fa@t) ((lambda (G36fc@ls/false) (if G36fc@ls/false (apply (lambda () (G305b@syntax-violation '#f '"invalid syntax-rules pattern" G36e4@e G36f0@pat)) G36fc@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G36fa@t))) (G2f6e@syntax-dispatch G36fa@t '_))) G36f4@t))) (G2f6e@syntax-dispatch G36f4@t '(_ . any)))) G36f0@pat)) G36eb@pat* G36ec@tmp*)))))))) G36e8@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G36e6@t))) (G2f6e@syntax-dispatch G36e6@t '(_ each-any . #(each (any any)))))) G36e4@e))) (set! G2f5c@quasiquote-macro ((lambda () ((lambda (G36ff@datum G371d@quasicons* G371f@quasicons G3721@quasiappend G3723@quasivector G3725@vquasi G3727@quasi) (begin (set! G36ff@datum (lambda (G3802@x) (list (G2ef8@scheme-stx 'quote) (G2d57@mkstx G3802@x '() '() '())))) (set! G371d@quasicons* (lambda (G37fa@x G37fb@y) ((letrec ((G37fe@f (lambda (G3800@x) (if (null? G3800@x) G37fb@y (G371f@quasicons (car G3800@x) (G37fe@f (cdr G3800@x))))))) G37fe@f) G37fa@x))) (set! G371f@quasicons (lambda (G37d4@x G37d5@y) ((lambda (G37d8@t) ((lambda (G37da@ls/false) (if G37da@ls/false (apply (lambda (G37dc@dy) ((lambda (G37de@t) ((lambda (G37e0@ls/false) (if G37e0@ls/false (apply (lambda (G37e2@dx) (list (G2ef8@scheme-stx 'quote) (cons G37e2@dx G37dc@dy))) G37e0@ls/false) ((lambda (G37e4@t) ((lambda (G37e6@ls/false) (if G37e6@ls/false (apply (lambda () ((lambda (G37e8@t) ((lambda (G37ea@ls/false) (if G37ea@ls/false (apply (lambda () (list (G2ef8@scheme-stx 'list) G37d4@x)) G37ea@ls/false) ((lambda (G37ec@t) ((lambda (G37ee@ls/false) (if G37ee@ls/false (apply (lambda () (list (G2ef8@scheme-stx 'cons) G37d4@x G37d5@y)) G37ee@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G37ec@t))) (G2f6e@syntax-dispatch G37ec@t '_))) G37e8@t))) (G2f6e@syntax-dispatch G37e8@t '()))) G37dc@dy)) G37e6@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G37e4@t))) (G2f6e@syntax-dispatch G37e4@t '_))) G37de@t))) (G2f6e@syntax-dispatch G37de@t '(#(scheme-id quote) any)))) G37d4@x)) G37da@ls/false) ((lambda (G37f0@t) ((lambda (G37f2@ls/false) (if G37f2@ls/false (apply (lambda (G37f4@stuff) (cons* (G2ef8@scheme-stx 'list) G37d4@x G37f4@stuff)) G37f2@ls/false) ((lambda (G37f6@t) ((lambda (G37f8@ls/false) (if G37f8@ls/false (apply (lambda () (list (G2ef8@scheme-stx 'cons) G37d4@x G37d5@y)) G37f8@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G37f6@t))) (G2f6e@syntax-dispatch G37f6@t '_))) G37f0@t))) (G2f6e@syntax-dispatch G37f0@t '(#(scheme-id list) . each-any)))) G37d8@t))) (G2f6e@syntax-dispatch G37d8@t '(#(scheme-id quote) any)))) G37d5@y))) (set! G3721@quasiappend (lambda (G37ba@x G37bb@y) ((lambda (G37be@ls) (if (null? G37be@ls) (list (G2ef8@scheme-stx 'quote) '()) (if (null? (cdr G37be@ls)) (car G37be@ls) (cons* (G2ef8@scheme-stx 'append) G37be@ls)))) ((letrec ((G37c0@f (lambda (G37c2@x) (if (null? G37c2@x) ((lambda (G37c4@t) ((lambda (G37c6@ls/false) (if G37c6@ls/false (apply (lambda () '()) G37c6@ls/false) ((lambda (G37c8@t) ((lambda (G37ca@ls/false) (if G37ca@ls/false (apply (lambda () (list G37bb@y)) G37ca@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G37c8@t))) (G2f6e@syntax-dispatch G37c8@t '_))) G37c4@t))) (G2f6e@syntax-dispatch G37c4@t '(#(scheme-id quote) ())))) G37bb@y) ((lambda (G37cc@t) ((lambda (G37ce@ls/false) (if G37ce@ls/false (apply (lambda () (G37c0@f (cdr G37c2@x))) G37ce@ls/false) ((lambda (G37d0@t) ((lambda (G37d2@ls/false) (if G37d2@ls/false (apply (lambda () (cons (car G37c2@x) (G37c0@f (cdr G37c2@x)))) G37d2@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G37d0@t))) (G2f6e@syntax-dispatch G37d0@t '_))) G37cc@t))) (G2f6e@syntax-dispatch G37cc@t '(#(scheme-id quote) ())))) (car G37c2@x)))))) G37c0@f) G37ba@x)))) (set! G3723@quasivector (lambda (G3788@x) ((lambda (G378a@pat-x) ((lambda (G378c@t) ((lambda (G378e@ls/false) (if G378e@ls/false (apply (lambda (G3790@x*) (list (G2ef8@scheme-stx 'quote) (list->vector G3790@x*))) G378e@ls/false) ((lambda (G3792@t) ((lambda (G3794@ls/false) (if G3794@ls/false (apply (lambda () ((letrec ((G3796@f (lambda (G3798@x G3799@k) ((lambda (G379c@t) ((lambda (G379e@ls/false) (if G379e@ls/false (apply (lambda (G37a0@x*) (G3799@k (map (lambda (G37a2@x) (list (G2ef8@scheme-stx 'quote) G37a2@x)) G37a0@x*))) G379e@ls/false) ((lambda (G37a4@t) ((lambda (G37a6@ls/false) (if G37a6@ls/false (apply (lambda (G37a8@x*) (G3799@k G37a8@x*)) G37a6@ls/false) ((lambda (G37aa@t) ((lambda (G37ac@ls/false) (if G37ac@ls/false (apply (lambda (G37ae@x G37af@y) (G3796@f G37af@y (lambda (G37b2@ls) (G3799@k (cons G37ae@x G37b2@ls))))) G37ac@ls/false) ((lambda (G37b4@t) ((lambda (G37b6@ls/false) (if G37b6@ls/false (apply (lambda () (list (G2ef8@scheme-stx 'list->vector) G378a@pat-x)) G37b6@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G37b4@t))) (G2f6e@syntax-dispatch G37b4@t '_))) G37aa@t))) (G2f6e@syntax-dispatch G37aa@t '(#(scheme-id cons) any any)))) G37a4@t))) (G2f6e@syntax-dispatch G37a4@t '(#(scheme-id list) . each-any)))) G379c@t))) (G2f6e@syntax-dispatch G379c@t '(#(scheme-id quote) each-any)))) G3798@x)))) G3796@f) G3788@x (lambda (G37b8@ls) (cons* (G2ef8@scheme-stx 'vector) G37b8@ls)))) G3794@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3792@t))) (G2f6e@syntax-dispatch G3792@t '_))) G378c@t))) (G2f6e@syntax-dispatch G378c@t '(#(scheme-id quote) each-any)))) G378a@pat-x)) G3788@x))) (set! G3725@vquasi (lambda (G3766@p G3767@lev) ((lambda (G376a@t) ((lambda (G376c@ls/false) (if G376c@ls/false (apply (lambda (G376e@p G376f@q) ((lambda (G3772@t) ((lambda (G3774@ls/false) (if G3774@ls/false (apply (lambda (G3776@p) (if (= G3767@lev '0) (G371d@quasicons* G3776@p (G3725@vquasi G376f@q G3767@lev)) (G371f@quasicons (G371f@quasicons (G36ff@datum 'unquote) (G3727@quasi G3776@p (- G3767@lev '1))) (G3725@vquasi G376f@q G3767@lev)))) G3774@ls/false) ((lambda (G3778@t) ((lambda (G377a@ls/false) (if G377a@ls/false (apply (lambda (G377c@p) (if (= G3767@lev '0) (G3721@quasiappend G377c@p (G3725@vquasi G376f@q G3767@lev)) (G371f@quasicons (G371f@quasicons (G36ff@datum 'unquote-splicing) (G3727@quasi G377c@p (- G3767@lev '1))) (G3725@vquasi G376f@q G3767@lev)))) G377a@ls/false) ((lambda (G377e@t) ((lambda (G3780@ls/false) (if G3780@ls/false (apply (lambda (G3782@p) (G371f@quasicons (G3727@quasi G3782@p G3767@lev) (G3725@vquasi G376f@q G3767@lev))) G3780@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G377e@t))) (G2f6e@syntax-dispatch G377e@t 'any))) G3778@t))) (G2f6e@syntax-dispatch G3778@t '(#(scheme-id unquote-splicing) . each-any)))) G3772@t))) (G2f6e@syntax-dispatch G3772@t '(#(scheme-id unquote) . each-any)))) G376e@p)) G376c@ls/false) ((lambda (G3784@t) ((lambda (G3786@ls/false) (if G3786@ls/false (apply (lambda () (list (G2ef8@scheme-stx 'quote) '())) G3786@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3784@t))) (G2f6e@syntax-dispatch G3784@t '()))) G376a@t))) (G2f6e@syntax-dispatch G376a@t '(any . any)))) G3766@p))) (set! G3727@quasi (lambda (G3730@p G3731@lev) ((lambda (G3734@t) ((lambda (G3736@ls/false) (if G3736@ls/false (apply (lambda (G3738@p) (if (= G3731@lev '0) G3738@p (G371f@quasicons (G36ff@datum 'unquote) (G3727@quasi (list G3738@p) (- G3731@lev '1))))) G3736@ls/false) ((lambda (G373a@t) ((lambda (G373c@ls/false) (if G373c@ls/false (apply (lambda (G373e@p G373f@q) (if (= G3731@lev '0) (G371d@quasicons* G373e@p (G3727@quasi G373f@q G3731@lev)) (G371f@quasicons (G371f@quasicons (G36ff@datum 'unquote) (G3727@quasi G373e@p (- G3731@lev '1))) (G3727@quasi G373f@q G3731@lev)))) G373c@ls/false) ((lambda (G3742@t) ((lambda (G3744@ls/false) (if G3744@ls/false (apply (lambda (G3746@p G3747@q) (if (= G3731@lev '0) (G3721@quasiappend G3746@p (G3727@quasi G3747@q G3731@lev)) (G371f@quasicons (G371f@quasicons (G36ff@datum 'unquote-splicing) (G3727@quasi G3746@p (- G3731@lev '1))) (G3727@quasi G3747@q G3731@lev)))) G3744@ls/false) ((lambda (G374a@t) ((lambda (G374c@ls/false) (if G374c@ls/false (apply (lambda (G374e@p) (G371f@quasicons (G36ff@datum 'quasiquote) (G3727@quasi (list G374e@p) (+ G3731@lev '1)))) G374c@ls/false) ((lambda (G3750@t) ((lambda (G3752@ls/false) (if G3752@ls/false (apply (lambda (G3754@p G3755@q) (G371f@quasicons (G3727@quasi G3754@p G3731@lev) (G3727@quasi G3755@q G3731@lev))) G3752@ls/false) ((lambda (G3758@t) ((lambda (G375a@ls/false) (if (and G375a@ls/false (apply (lambda (G375c@x) (not (G2d37@stx? G375c@x))) G375a@ls/false)) (apply (lambda (G375e@x) (G3723@quasivector (G3725@vquasi G375e@x G3731@lev))) G375a@ls/false) ((lambda (G3760@t) ((lambda (G3762@ls/false) (if G3762@ls/false (apply (lambda (G3764@p) (list (G2ef8@scheme-stx 'quote) G3764@p)) G3762@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3760@t))) (G2f6e@syntax-dispatch G3760@t 'any))) G3758@t))) (G2f6e@syntax-dispatch G3758@t '#(vector each-any)))) G3750@t))) (G2f6e@syntax-dispatch G3750@t '(any . any)))) G374a@t))) (G2f6e@syntax-dispatch G374a@t '(#(scheme-id quasiquote) any)))) G3742@t))) (G2f6e@syntax-dispatch G3742@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G373a@t))) (G2f6e@syntax-dispatch G373a@t '((#(scheme-id unquote) . each-any) . any)))) G3734@t))) (G2f6e@syntax-dispatch G3734@t '(#(scheme-id unquote) any)))) G3730@p))) (lambda (G3728@x) ((lambda (G372a@t) ((lambda (G372c@ls/false) (if G372c@ls/false (apply (lambda (G372e@e) (G3727@quasi G372e@e '0)) G372c@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G372a@t))) (G2f6e@syntax-dispatch G372a@t '(_ any)))) G3728@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f5e@quasisyntax-macro ((lambda () ((lambda (G3805@quasi) (begin (set! G3805@quasi (lambda (G381d@p G381e@lev) ((lambda (G3821@t) ((lambda (G3823@ls/false) (if G3823@ls/false (apply (lambda (G3825@p) (if (= G381e@lev '0) ((lambda (G3827@g) (values (list G3827@g) (list G3825@p) G3827@g)) (gensym)) (call-with-values (lambda () (G3805@quasi G3825@p (- G381e@lev '1))) (lambda (G382c@G3829 G382d@G382a G382e@G382b) ((lambda (G3832@p G3833@rhs* G3834@lhs*) (values G3834@lhs* G3833@rhs* (list 'unsyntax G3832@p))) G382e@G382b G382d@G382a G382c@G3829))))) G3823@ls/false) ((lambda (G3838@t) ((lambda (G383a@ls/false) (if (and G383a@ls/false (apply (lambda () (= G381e@lev '0)) G383a@ls/false)) (apply (lambda () (G305b@syntax-violation '#f '"incorrect use of unsyntax" G381d@p)) G383a@ls/false) ((lambda (G383c@t) ((lambda (G383e@ls/false) (if G383e@ls/false (apply (lambda (G3840@p* G3841@q) (call-with-values (lambda () (G3805@quasi G3841@q G381e@lev)) (lambda (G3847@G3844 G3848@G3845 G3849@G3846) ((lambda (G384d@q G384e@rhs* G384f@lhs*) (if (= G381e@lev '0) ((lambda (G3853@g*) (values (append G3853@g* G384f@lhs*) (append G3840@p* G384e@rhs*) (append G3853@g* G384d@q))) (map (lambda (G3855@x) (gensym)) G3840@p*)) (call-with-values (lambda () (G3805@quasi G3840@p* (- G381e@lev '1))) (lambda (G385a@G3857 G385b@G3858 G385c@G3859) ((lambda (G3860@p* G3861@rhs2* G3862@lhs2*) (values (append G3862@lhs2* G384f@lhs*) (append G3861@rhs2* G384e@rhs*) (cons (cons 'unsyntax G3860@p*) G384d@q))) G385c@G3859 G385b@G3858 G385a@G3857))))) G3849@G3846 G3848@G3845 G3847@G3844)))) G383e@ls/false) ((lambda (G3866@t) ((lambda (G3868@ls/false) (if G3868@ls/false (apply (lambda (G386a@p* G386b@q) (call-with-values (lambda () (G3805@quasi G386b@q G381e@lev)) (lambda (G3871@G386e G3872@G386f G3873@G3870) ((lambda (G3877@q G3878@rhs* G3879@lhs*) (if (= G381e@lev '0) ((lambda (G387d@g*) (values (append (map (lambda (G387f@g) (cons G387f@g '(...))) G387d@g*) G3879@lhs*) (append G386a@p* G3878@rhs*) (append (apply append (map (lambda (G3881@g) (cons G3881@g '(...))) G387d@g*)) G3877@q))) (map (lambda (G3883@x) (gensym)) G386a@p*)) (call-with-values (lambda () (G3805@quasi G386a@p* (- G381e@lev '1))) (lambda (G3888@G3885 G3889@G3886 G388a@G3887) ((lambda (G388e@p* G388f@rhs2* G3890@lhs2*) (values (append G3890@lhs2* G3879@lhs*) (append G388f@rhs2* G3878@rhs*) (cons (cons 'unsyntax-splicing G388e@p*) G3877@q))) G388a@G3887 G3889@G3886 G3888@G3885))))) G3873@G3870 G3872@G386f G3871@G386e)))) G3868@ls/false) ((lambda (G3894@t) ((lambda (G3896@ls/false) (if (and G3896@ls/false (apply (lambda () (= G381e@lev '0)) G3896@ls/false)) (apply (lambda () (G305b@syntax-violation '#f '"incorrect use of unsyntax-splicing" G381d@p)) G3896@ls/false) ((lambda (G3898@t) ((lambda (G389a@ls/false) (if G389a@ls/false (apply (lambda (G389c@p) (call-with-values (lambda () (G3805@quasi G389c@p (+ G381e@lev '1))) (lambda (G38a1@G389e G38a2@G389f G38a3@G38a0) ((lambda (G38a7@p G38a8@rhs* G38a9@lhs*) (values G38a9@lhs* G38a8@rhs* (list 'quasisyntax G38a7@p))) G38a3@G38a0 G38a2@G389f G38a1@G389e)))) G389a@ls/false) ((lambda (G38ad@t) ((lambda (G38af@ls/false) (if G38af@ls/false (apply (lambda (G38b1@p G38b2@q) (call-with-values (lambda () (G3805@quasi G38b1@p G381e@lev)) (lambda (G38bb@G38b5 G38bc@G38b6 G38bd@G38b7) (call-with-values (lambda () (G3805@quasi G38b2@q G381e@lev)) (lambda (G38c1@G38b8 G38c2@G38b9 G38c3@G38ba) ((lambda (G38c7@q G38c8@rhs2* G38c9@lhs2* G38ca@p G38cb@rhs* G38cc@lhs*) (values (append G38c9@lhs2* G38cc@lhs*) (append G38c8@rhs2* G38cb@rhs*) (cons G38ca@p G38c7@q))) G38c3@G38ba G38c2@G38b9 G38c1@G38b8 G38bd@G38b7 G38bc@G38b6 G38bb@G38b5)))))) G38af@ls/false) ((lambda (G38d3@t) ((lambda (G38d5@ls/false) (if G38d5@ls/false (apply (lambda (G38d7@x*) (call-with-values (lambda () (G3805@quasi G38d7@x* G381e@lev)) (lambda (G38dc@G38d9 G38dd@G38da G38de@G38db) ((lambda (G38e2@x* G38e3@rhs* G38e4@lhs*) (values G38e4@lhs* G38e3@rhs* (list->vector G38e2@x*))) G38de@G38db G38dd@G38da G38dc@G38d9)))) G38d5@ls/false) ((lambda (G38e8@t) ((lambda (G38ea@ls/false) (if G38ea@ls/false (apply (lambda () (values '() '() G381d@p)) G38ea@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G38e8@t))) (G2f6e@syntax-dispatch G38e8@t '_))) G38d3@t))) (G2f6e@syntax-dispatch G38d3@t '#(vector each-any)))) G38ad@t))) (G2f6e@syntax-dispatch G38ad@t '(any . any)))) G3898@t))) (G2f6e@syntax-dispatch G3898@t '(#(scheme-id quasisyntax) any)))) G3894@t))) (G2f6e@syntax-dispatch G3894@t '#(scheme-id unsyntax-splicing)))) G3866@t))) (G2f6e@syntax-dispatch G3866@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G383c@t))) (G2f6e@syntax-dispatch G383c@t '((#(scheme-id unsyntax) . each-any) . any)))) G3838@t))) (G2f6e@syntax-dispatch G3838@t '#(scheme-id unsyntax)))) G3821@t))) (G2f6e@syntax-dispatch G3821@t '(#(scheme-id unsyntax) any)))) G381d@p))) (lambda (G3806@x) ((lambda (G3808@t) ((lambda (G380a@ls/false) (if G380a@ls/false (apply (lambda (G380c@e) (call-with-values (lambda () (G3805@quasi G380c@e '0)) (lambda (G3811@G380e G3812@G380f G3813@G3810) ((lambda (G3817@v G3818@rhs* G3819@lhs*) (G2f24@bless (list 'syntax-case (cons 'list G3818@rhs*) '() (list G3819@lhs* (list 'syntax G3817@v))))) G3813@G3810 G3812@G380f G3811@G380e)))) G380a@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3808@t))) (G2f6e@syntax-dispatch G3808@t '(_ any)))) G3806@x)))) '#f)))) (set! G2f60@define-struct-macro (lambda (G38ec@stx) (G305b@syntax-violation '#f '"define-struct not supported" G38ec@stx))) (set! G2f62@define-record-type-macro (lambda (G38ee@x) ((lambda (G38f1@id G38f3@get-record-name G38f5@get-record-constructor-name G38f7@get-record-predicate-name G38f9@get-clause G38fb@foo-rtd-code G38fd@parent-rtd-code G38ff@parent-rcd-code G3901@foo-rcd-code G3903@get-protocol-code G3905@get-fields G3907@get-mutator-indices G3909@get-mutators G390b@get-accessors G390d@enumerate G390f@do-define-record G3911@verify-clauses) (begin (set! G38f1@id (lambda (G3ae4@ctxt . G3ae6@str*) (G305f@datum->syntax G3ae4@ctxt (string->symbol (apply string-append (map (lambda (G3ae8@x) (if (symbol? G3ae8@x) (symbol->string G3ae8@x) (if (string? G3ae8@x) G3ae8@x (assertion-violation 'define-record-type '"BUG")))) G3ae6@str*)))))) (set! G38f3@get-record-name (lambda (G3ad2@spec) ((lambda (G3ad4@t) ((lambda (G3ad6@ls/false) (if G3ad6@ls/false (apply (lambda (G3ad8@foo G3ad9@make-foo G3ada@foo?) G3ad8@foo) G3ad6@ls/false) ((lambda (G3ade@t) ((lambda (G3ae0@ls/false) (if G3ae0@ls/false (apply (lambda (G3ae2@foo) G3ae2@foo) G3ae0@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3ade@t))) (G2f6e@syntax-dispatch G3ade@t 'any))) G3ad4@t))) (G2f6e@syntax-dispatch G3ad4@t '(any any any)))) G3ad2@spec))) (set! G38f5@get-record-constructor-name (lambda (G3abe@spec) ((lambda (G3ac0@t) ((lambda (G3ac2@ls/false) (if G3ac2@ls/false (apply (lambda (G3ac4@foo G3ac5@make-foo G3ac6@foo?) G3ac5@make-foo) G3ac2@ls/false) ((lambda (G3aca@t) ((lambda (G3acc@ls/false) (if (and G3acc@ls/false (apply (lambda (G3ace@foo) (G2d6f@id? G3ace@foo)) G3acc@ls/false)) (apply (lambda (G3ad0@foo) (G38f1@id G3ad0@foo '"make-" (G2d85@stx->datum G3ad0@foo))) G3acc@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3aca@t))) (G2f6e@syntax-dispatch G3aca@t 'any))) G3ac0@t))) (G2f6e@syntax-dispatch G3ac0@t '(any any any)))) G3abe@spec))) (set! G38f7@get-record-predicate-name (lambda (G3aaa@spec) ((lambda (G3aac@t) ((lambda (G3aae@ls/false) (if G3aae@ls/false (apply (lambda (G3ab0@foo G3ab1@make-foo G3ab2@foo?) G3ab2@foo?) G3aae@ls/false) ((lambda (G3ab6@t) ((lambda (G3ab8@ls/false) (if (and G3ab8@ls/false (apply (lambda (G3aba@foo) (G2d6f@id? G3aba@foo)) G3ab8@ls/false)) (apply (lambda (G3abc@foo) (G38f1@id G3abc@foo (G2d85@stx->datum G3abc@foo) '"?")) G3ab8@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3ab6@t))) (G2f6e@syntax-dispatch G3ab6@t 'any))) G3aac@t))) (G2f6e@syntax-dispatch G3aac@t '(any any any)))) G3aaa@spec))) (set! G38f9@get-clause (lambda (G3a98@id G3a99@ls) ((lambda (G3a9c@t) ((lambda (G3a9e@ls/false) (if G3a9e@ls/false (apply (lambda () '#f) G3a9e@ls/false) ((lambda (G3aa0@t) ((lambda (G3aa2@ls/false) (if G3aa2@ls/false (apply (lambda (G3aa4@x G3aa5@rest G3aa6@ls) (if (G2d77@free-id=? (G2f24@bless G3a98@id) G3aa4@x) (cons G3aa4@x G3aa5@rest) (G38f9@get-clause G3a98@id G3aa6@ls))) G3aa2@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3aa0@t))) (G2f6e@syntax-dispatch G3aa0@t '((any . any) . any)))) G3a9c@t))) (G2f6e@syntax-dispatch G3a9c@t '()))) G3a99@ls))) (set! G38fb@foo-rtd-code (lambda (G3a46@name G3a47@clause* G3a48@parent-rtd-code) ((lambda (G3a4d@convert-field-spec*) (begin (set! G3a4d@convert-field-spec* (lambda (G3a7e@ls) (list->vector (map (lambda (G3a80@x) ((lambda (G3a82@t) ((lambda (G3a84@ls/false) (if G3a84@ls/false (apply (lambda (G3a86@name G3a87@rest) (list 'mutable G3a86@name)) G3a84@ls/false) ((lambda (G3a8a@t) ((lambda (G3a8c@ls/false) (if G3a8c@ls/false (apply (lambda (G3a8e@name G3a8f@rest) (list 'immutable G3a8e@name)) G3a8c@ls/false) ((lambda (G3a92@t) ((lambda (G3a94@ls/false) (if G3a94@ls/false (apply (lambda (G3a96@name) (list 'immutable G3a96@name)) G3a94@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3a92@t))) (G2f6e@syntax-dispatch G3a92@t 'any))) G3a8a@t))) (G2f6e@syntax-dispatch G3a8a@t '(#(scheme-id immutable) any . any)))) G3a82@t))) (G2f6e@syntax-dispatch G3a82@t '(#(scheme-id mutable) any . any)))) G3a80@x)) G3a7e@ls)))) ((lambda (G3a4e@uid-code G3a4f@sealed? G3a50@opaque? G3a51@fields) (G2f24@bless (list 'make-record-type-descriptor (list 'quote G3a46@name) G3a48@parent-rtd-code G3a4e@uid-code G3a4f@sealed? G3a50@opaque? G3a51@fields))) ((lambda (G3a56@t) ((lambda (G3a58@ls/false) (if G3a58@ls/false (apply (lambda () (list 'quote (gensym))) G3a58@ls/false) ((lambda (G3a5a@t) ((lambda (G3a5c@ls/false) (if G3a5c@ls/false (apply (lambda (G3a5e@uid) (list 'quote G3a5e@uid)) G3a5c@ls/false) ((lambda (G3a60@t) ((lambda (G3a62@ls/false) (if G3a62@ls/false (apply (lambda () '#f) G3a62@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3a60@t))) (G2f6e@syntax-dispatch G3a60@t '_))) G3a5a@t))) (G2f6e@syntax-dispatch G3a5a@t '(_ any)))) G3a56@t))) (G2f6e@syntax-dispatch G3a56@t '(_)))) (G38f9@get-clause 'nongenerative G3a47@clause*)) ((lambda (G3a64@t) ((lambda (G3a66@ls/false) (if G3a66@ls/false (apply (lambda () '#t) G3a66@ls/false) ((lambda (G3a68@t) ((lambda (G3a6a@ls/false) (if G3a6a@ls/false (apply (lambda () '#f) G3a6a@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3a68@t))) (G2f6e@syntax-dispatch G3a68@t '_))) G3a64@t))) (G2f6e@syntax-dispatch G3a64@t '(_ #(atom #t))))) (G38f9@get-clause 'sealed G3a47@clause*)) ((lambda (G3a6c@t) ((lambda (G3a6e@ls/false) (if G3a6e@ls/false (apply (lambda () '#t) G3a6e@ls/false) ((lambda (G3a70@t) ((lambda (G3a72@ls/false) (if G3a72@ls/false (apply (lambda () '#f) G3a72@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3a70@t))) (G2f6e@syntax-dispatch G3a70@t '_))) G3a6c@t))) (G2f6e@syntax-dispatch G3a6c@t '(_ #(atom #t))))) (G38f9@get-clause 'opaque G3a47@clause*)) ((lambda (G3a74@t) ((lambda (G3a76@ls/false) (if G3a76@ls/false (apply (lambda (G3a78@field-spec*) (list 'quote (G3a4d@convert-field-spec* G3a78@field-spec*))) G3a76@ls/false) ((lambda (G3a7a@t) ((lambda (G3a7c@ls/false) (if G3a7c@ls/false (apply (lambda () ''#()) G3a7c@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3a7a@t))) (G2f6e@syntax-dispatch G3a7a@t '_))) G3a74@t))) (G2f6e@syntax-dispatch G3a74@t '(_ . each-any)))) (G38f9@get-clause 'fields G3a47@clause*))))) '#f))) (set! G38fd@parent-rtd-code (lambda (G3a2e@clause*) ((lambda (G3a30@t) ((lambda (G3a32@ls/false) (if G3a32@ls/false (apply (lambda (G3a34@name) (list 'record-type-descriptor G3a34@name)) G3a32@ls/false) ((lambda (G3a36@t) ((lambda (G3a38@ls/false) (if G3a38@ls/false (apply (lambda () ((lambda (G3a3a@t) ((lambda (G3a3c@ls/false) (if G3a3c@ls/false (apply (lambda (G3a3e@rtd G3a3f@rcd) G3a3e@rtd) G3a3c@ls/false) ((lambda (G3a42@t) ((lambda (G3a44@ls/false) (if G3a44@ls/false (apply (lambda () '#f) G3a44@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3a42@t))) (G2f6e@syntax-dispatch G3a42@t '#(atom #f)))) G3a3a@t))) (G2f6e@syntax-dispatch G3a3a@t '(_ any any)))) (G38f9@get-clause 'parent-rtd G3a2e@clause*))) G3a38@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3a36@t))) (G2f6e@syntax-dispatch G3a36@t '#(atom #f)))) G3a30@t))) (G2f6e@syntax-dispatch G3a30@t '(_ any)))) (G38f9@get-clause 'parent G3a2e@clause*)))) (set! G38ff@parent-rcd-code (lambda (G3a16@clause*) ((lambda (G3a18@t) ((lambda (G3a1a@ls/false) (if G3a1a@ls/false (apply (lambda (G3a1c@name) (list 'record-constructor-descriptor G3a1c@name)) G3a1a@ls/false) ((lambda (G3a1e@t) ((lambda (G3a20@ls/false) (if G3a20@ls/false (apply (lambda () ((lambda (G3a22@t) ((lambda (G3a24@ls/false) (if G3a24@ls/false (apply (lambda (G3a26@rtd G3a27@rcd) G3a27@rcd) G3a24@ls/false) ((lambda (G3a2a@t) ((lambda (G3a2c@ls/false) (if G3a2c@ls/false (apply (lambda () '#f) G3a2c@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3a2a@t))) (G2f6e@syntax-dispatch G3a2a@t '#(atom #f)))) G3a22@t))) (G2f6e@syntax-dispatch G3a22@t '(_ any any)))) (G38f9@get-clause 'parent-rtd G3a16@clause*))) G3a20@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3a1e@t))) (G2f6e@syntax-dispatch G3a1e@t '#(atom #f)))) G3a18@t))) (G2f6e@syntax-dispatch G3a18@t '(_ any)))) (G38f9@get-clause 'parent G3a16@clause*)))) (set! G3901@foo-rcd-code (lambda (G3a0e@clause* G3a0f@foo-rtd G3a10@protocol G3a11@parent-rcd-code) (list 'make-record-constructor-descriptor G3a0f@foo-rtd G3a11@parent-rcd-code G3a10@protocol))) (set! G3903@get-protocol-code (lambda (G3a02@clause*) ((lambda (G3a04@t) ((lambda (G3a06@ls/false) (if G3a06@ls/false (apply (lambda (G3a08@expr) G3a08@expr) G3a06@ls/false) ((lambda (G3a0a@t) ((lambda (G3a0c@ls/false) (if G3a0c@ls/false (apply (lambda () '#f) G3a0c@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3a0a@t))) (G2f6e@syntax-dispatch G3a0a@t '_))) G3a04@t))) (G2f6e@syntax-dispatch G3a04@t '(_ any)))) (G38f9@get-clause 'protocol G3a02@clause*)))) (set! G3905@get-fields (lambda (G39f0@clause*) ((lambda (G39f2@t) ((lambda (G39f4@ls/false) (if G39f4@ls/false (apply (lambda () '()) G39f4@ls/false) ((lambda (G39f6@t) ((lambda (G39f8@ls/false) (if G39f8@ls/false (apply (lambda (G39fa@f*) G39fa@f*) G39f8@ls/false) ((lambda (G39fc@t) ((lambda (G39fe@ls/false) (if G39fe@ls/false (apply (lambda (G3a00@rest) (G3905@get-fields G3a00@rest)) G39fe@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G39fc@t))) (G2f6e@syntax-dispatch G39fc@t '(_ . any)))) G39f6@t))) (G2f6e@syntax-dispatch G39f6@t '((#(scheme-id fields) . each-any) . _)))) G39f2@t))) (G2f6e@syntax-dispatch G39f2@t '()))) G39f0@clause*))) (set! G3907@get-mutator-indices (lambda (G39d8@fields) ((letrec ((G39da@f (lambda (G39dc@fields G39dd@i) ((lambda (G39e0@t) ((lambda (G39e2@ls/false) (if G39e2@ls/false (apply (lambda () '()) G39e2@ls/false) ((lambda (G39e4@t) ((lambda (G39e6@ls/false) (if G39e6@ls/false (apply (lambda (G39e8@rest) (cons G39dd@i (G39da@f G39e8@rest (+ G39dd@i '1)))) G39e6@ls/false) ((lambda (G39ea@t) ((lambda (G39ec@ls/false) (if G39ec@ls/false (apply (lambda (G39ee@rest) (G39da@f G39ee@rest (+ G39dd@i '1))) G39ec@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G39ea@t))) (G2f6e@syntax-dispatch G39ea@t '(_ . any)))) G39e4@t))) (G2f6e@syntax-dispatch G39e4@t '((#(scheme-id mutable) . _) . any)))) G39e0@t))) (G2f6e@syntax-dispatch G39e0@t '()))) G39dc@fields)))) G39da@f) G39d8@fields '0))) (set! G3909@get-mutators (lambda (G39ae@foo G39af@fields) ((lambda (G39b3@gen-name) (begin (set! G39b3@gen-name (lambda (G39d6@x) (G305f@datum->syntax G39ae@foo (string->symbol (string-append (symbol->string (G3061@syntax->datum G39ae@foo)) '"-" (symbol->string (G3061@syntax->datum G39d6@x)) '"-set!"))))) ((letrec ((G39b4@f (lambda (G39b6@fields) ((lambda (G39b8@t) ((lambda (G39ba@ls/false) (if G39ba@ls/false (apply (lambda () '()) G39ba@ls/false) ((lambda (G39bc@t) ((lambda (G39be@ls/false) (if G39be@ls/false (apply (lambda (G39c0@name G39c1@accessor G39c2@mutator G39c3@rest) (cons G39c2@mutator (G39b4@f G39c3@rest))) G39be@ls/false) ((lambda (G39c8@t) ((lambda (G39ca@ls/false) (if G39ca@ls/false (apply (lambda (G39cc@name G39cd@rest) (cons (G39b3@gen-name G39cc@name) (G39b4@f G39cd@rest))) G39ca@ls/false) ((lambda (G39d0@t) ((lambda (G39d2@ls/false) (if G39d2@ls/false (apply (lambda (G39d4@rest) (G39b4@f G39d4@rest)) G39d2@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G39d0@t))) (G2f6e@syntax-dispatch G39d0@t '(_ . any)))) G39c8@t))) (G2f6e@syntax-dispatch G39c8@t '((#(scheme-id mutable) any) . any)))) G39bc@t))) (G2f6e@syntax-dispatch G39bc@t '((#(scheme-id mutable) any any any) . any)))) G39b8@t))) (G2f6e@syntax-dispatch G39b8@t '()))) G39b6@fields)))) G39b4@f) G39af@fields))) '#f))) (set! G390b@get-accessors (lambda (G396a@foo G396b@fields) ((lambda (G396f@gen-name) (begin (set! G396f@gen-name (lambda (G39ac@x) (G305f@datum->syntax G396a@foo (string->symbol (string-append (symbol->string (G3061@syntax->datum G396a@foo)) '"-" (symbol->string (G3061@syntax->datum G39ac@x))))))) (map (lambda (G3970@field) ((lambda (G3972@t) ((lambda (G3974@ls/false) (if (and G3974@ls/false (apply (lambda (G3976@name G3977@accessor G3978@mutator) (G2d6f@id? G3977@accessor)) G3974@ls/false)) (apply (lambda (G397c@name G397d@accessor G397e@mutator) G397d@accessor) G3974@ls/false) ((lambda (G3982@t) ((lambda (G3984@ls/false) (if (and G3984@ls/false (apply (lambda (G3986@name G3987@accessor) (G2d6f@id? G3987@accessor)) G3984@ls/false)) (apply (lambda (G398a@name G398b@accessor) G398b@accessor) G3984@ls/false) ((lambda (G398e@t) ((lambda (G3990@ls/false) (if (and G3990@ls/false (apply (lambda (G3992@name) (G2d6f@id? G3992@name)) G3990@ls/false)) (apply (lambda (G3994@name) (G396f@gen-name G3994@name)) G3990@ls/false) ((lambda (G3996@t) ((lambda (G3998@ls/false) (if (and G3998@ls/false (apply (lambda (G399a@name) (G2d6f@id? G399a@name)) G3998@ls/false)) (apply (lambda (G399c@name) (G396f@gen-name G399c@name)) G3998@ls/false) ((lambda (G399e@t) ((lambda (G39a0@ls/false) (if (and G39a0@ls/false (apply (lambda (G39a2@name) (G2d6f@id? G39a2@name)) G39a0@ls/false)) (apply (lambda (G39a4@name) (G396f@gen-name G39a4@name)) G39a0@ls/false) ((lambda (G39a6@t) ((lambda (G39a8@ls/false) (if G39a8@ls/false (apply (lambda (G39aa@others) (G305b@syntax-violation '#f '"invalid field spec" G3970@field)) G39a8@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G39a6@t))) (G2f6e@syntax-dispatch G39a6@t 'any))) G399e@t))) (G2f6e@syntax-dispatch G399e@t 'any))) G3996@t))) (G2f6e@syntax-dispatch G3996@t '(#(scheme-id immutable) any)))) G398e@t))) (G2f6e@syntax-dispatch G398e@t '(#(scheme-id mutable) any)))) G3982@t))) (G2f6e@syntax-dispatch G3982@t '(#(scheme-id immutable) any any)))) G3972@t))) (G2f6e@syntax-dispatch G3972@t '(#(scheme-id mutable) any any any)))) G3970@field)) G396b@fields))) '#f))) (set! G390d@enumerate (lambda (G3962@ls) ((letrec ((G3964@f (lambda (G3966@ls G3967@i) (if (null? G3966@ls) '() (cons G3967@i (G3964@f (cdr G3966@ls) (+ G3967@i '1))))))) G3964@f) G3962@ls '0))) (set! G390f@do-define-record (lambda (G393a@namespec G393b@clause*) ((lambda (G393e@foo) ((lambda (G3940@foo-rtd) ((lambda (G3942@foo-rcd) ((lambda (G3944@protocol) ((lambda (G3946@make-foo) ((lambda (G3948@fields) ((lambda (G394a@idx*) ((lambda (G394c@foo-x*) ((lambda (G394e@set-foo-x!*) ((lambda (G3950@set-foo-idx*) ((lambda (G3952@foo?) ((lambda (G3954@foo-rtd-code) ((lambda (G3956@foo-rcd-code) ((lambda (G3958@protocol-code) ((lambda () (G2f24@bless (cons 'begin (cons (list 'define G3940@foo-rtd G3954@foo-rtd-code) (cons (list 'define G3944@protocol G3958@protocol-code) (cons (list 'define G3942@foo-rcd G3956@foo-rcd-code) (cons (list 'define-syntax G393e@foo (list 'list ''$rtd (list 'syntax G3940@foo-rtd) (list 'syntax G3942@foo-rcd))) (cons (list 'define G3952@foo? (list 'record-predicate G3940@foo-rtd)) (cons (list 'define G3946@make-foo (list 'record-constructor G3942@foo-rcd)) (append (map (lambda (G395a@foo-x G395b@idx) (list 'define G395a@foo-x (list 'record-accessor G3940@foo-rtd G395b@idx))) G394c@foo-x* G394a@idx*) (map (lambda (G395e@set-foo-x! G395f@idx) (list 'define G395e@set-foo-x! (list 'record-mutator G3940@foo-rtd G395f@idx))) G394e@set-foo-x!* G3950@set-foo-idx*))))))))))))) (G3903@get-protocol-code G393b@clause*))) (G3901@foo-rcd-code G393b@clause* G3940@foo-rtd G3944@protocol (G38ff@parent-rcd-code G393b@clause*)))) (G38fb@foo-rtd-code G393e@foo G393b@clause* (G38fd@parent-rtd-code G393b@clause*)))) (G38f7@get-record-predicate-name G393a@namespec))) (G3907@get-mutator-indices G3948@fields))) (G3909@get-mutators G393e@foo G3948@fields))) (G390b@get-accessors G393e@foo G3948@fields))) (G390d@enumerate G3948@fields))) (G3905@get-fields G393b@clause*))) (G38f5@get-record-constructor-name G393a@namespec))) (gensym))) (gensym))) (gensym))) (G38f3@get-record-name G393a@namespec)))) (set! G3911@verify-clauses (lambda (G391a@x G391b@cls*) ((lambda (G391f@valid-kwds G3921@free-id-member?) (begin (set! G391f@valid-kwds (map G2f24@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3921@free-id-member? (lambda (G3936@x G3937@ls) (and (pair? G3937@ls) (or (G2d77@free-id=? G3936@x (car G3937@ls)) (G3921@free-id-member? G3936@x (cdr G3937@ls)))))) ((letrec ((G3922@f (lambda (G3924@cls* G3925@seen*) (if (not (null? G3924@cls*)) ((lambda (G3928@t) ((lambda (G392a@ls/false) (if G392a@ls/false (apply (lambda (G392c@kwd G392d@rest) (if (or (not (G2d6f@id? G392c@kwd)) (not (G3921@free-id-member? G392c@kwd G391f@valid-kwds))) (G305b@syntax-violation '#f '"not a valid define-record-type keyword" G392c@kwd) (if (G2d7d@bound-id-member? G392c@kwd G3925@seen*) (G305b@syntax-violation '#f '"duplicate use of keyword " G391a@x G392c@kwd) (G3922@f (cdr G3924@cls*) (cons G392c@kwd G3925@seen*))))) G392a@ls/false) ((lambda (G3930@t) ((lambda (G3932@ls/false) (if G3932@ls/false (apply (lambda (G3934@cls) (G305b@syntax-violation '#f '"malformed define-record-type clause" G3934@cls)) G3932@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3930@t))) (G2f6e@syntax-dispatch G3930@t 'any))) G3928@t))) (G2f6e@syntax-dispatch G3928@t '(any . any)))) (car G3924@cls*)) (void))))) G3922@f) G391b@cls* '()))) '#f '#f))) ((lambda (G3912@t) ((lambda (G3914@ls/false) (if G3914@ls/false (apply (lambda (G3916@namespec G3917@clause*) (begin (G3911@verify-clauses G38ee@x G3917@clause*) (G390f@do-define-record G3916@namespec G3917@clause*))) G3914@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3912@t))) (G2f6e@syntax-dispatch G3912@t '(_ any . each-any)))) G38ee@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f64@define-condition-type-macro (lambda (G3aea@x) ((lambda (G3aed@mkname) (begin (set! G3aed@mkname (lambda (G3b1a@name G3b1b@suffix) (G305f@datum->syntax G3b1a@name (string->symbol (string-append (symbol->string (G3061@syntax->datum G3b1a@name)) G3b1b@suffix))))) ((lambda (G3aee@t) ((lambda (G3af0@ls/false) (if (and G3af0@ls/false (apply (lambda (G3af2@ctxt G3af3@name G3af4@super G3af5@constructor G3af6@predicate G3af7@field* G3af8@accessor*) (and (G2d6f@id? G3af3@name) (G2d6f@id? G3af4@super) (G2d6f@id? G3af5@constructor) (G2d6f@id? G3af6@predicate) (for-all G2d6f@id? G3af7@field*) (for-all G2d6f@id? G3af8@accessor*))) G3af0@ls/false)) (apply (lambda (G3b00@ctxt G3b01@name G3b02@super G3b03@constructor G3b04@predicate G3b05@field* G3b06@accessor*) ((lambda (G3b0e@aux-accessor*) (G2f24@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3b01@name G3b03@constructor (gensym)) (cons (list 'parent G3b02@super) (cons (cons 'fields (map (lambda (G3b10@field G3b11@aux) (list 'immutable G3b10@field G3b11@aux)) G3b05@field* G3b0e@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3b04@predicate (list 'condition-predicate (list 'record-type-descriptor G3b01@name))) (map (lambda (G3b14@accessor G3b15@aux) (list 'define G3b14@accessor (list 'condition-accessor (list 'record-type-descriptor G3b01@name) G3b15@aux))) G3b06@accessor* G3b0e@aux-accessor*)))))) (map (lambda (G3b18@x) (gensym)) G3b06@accessor*))) G3af0@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3aee@t))) (G2f6e@syntax-dispatch G3aee@t '(any any any any any . #(each (any any)))))) G3aea@x))) '#f))) (set! G2f66@incorrect-usage-macro (lambda (G3b1e@e) (G305b@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b1e@e))) (set! G2f68@parameterize-macro (lambda (G3b20@e) ((lambda (G3b22@t) ((lambda (G3b24@ls/false) (if G3b24@ls/false (apply (lambda (G3b26@b G3b27@b*) (G2f24@bless (cons 'let (cons '() (cons G3b26@b G3b27@b*))))) G3b24@ls/false) ((lambda (G3b2a@t) ((lambda (G3b2c@ls/false) (if G3b2c@ls/false (apply (lambda (G3b2e@olhs* G3b2f@orhs* G3b30@b G3b31@b*) ((lambda (G3b36@lhs* G3b37@rhs*) (G2f24@bless (cons (list 'lambda (append G3b36@lhs* G3b37@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b3a@lhs G3b3b@rhs) (list 'let (list (list 't (list G3b3a@lhs))) (list G3b3a@lhs G3b3b@rhs) (cons 'set! (cons G3b3b@rhs '(t))))) G3b36@lhs* G3b37@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b30@b G3b31@b*))) '(swap)))))) (append G3b2e@olhs* G3b2f@orhs*)))) (G3047@generate-temporaries G3b2e@olhs*) (G3047@generate-temporaries G3b2f@orhs*))) G3b2c@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3b2a@t))) (G2f6e@syntax-dispatch G3b2a@t '(_ #(each (any any)) any . each-any)))) G3b22@t))) (G2f6e@syntax-dispatch G3b22@t '(_ () any . each-any)))) G3b20@e))) (set! G2f6a@foreign-call-transformer (lambda (G3b3e@e G3b3f@r G3b40@mr) ((lambda (G3b44@t) ((lambda (G3b46@ls/false) (if G3b46@ls/false (apply (lambda (G3b48@name G3b49@arg*) (cons 'foreign-call (cons (G2f92@chi-expr G3b48@name G3b3f@r G3b40@mr) (G2f8e@chi-expr* G3b49@arg* G3b3f@r G3b40@mr)))) G3b46@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3b44@t))) (G2f6e@syntax-dispatch G3b44@t '(_ any . each-any)))) G3b3e@e))) (set! G2f6c@convert-pattern (lambda (G3b4c@pattern G3b4d@keys) ((lambda (G3b51@cvt* G3b53@cvt) (begin (set! G3b51@cvt* (lambda (G3be2@p* G3be3@n G3be4@ids) (if (null? G3be2@p*) (values '() G3be4@ids) (call-with-values (lambda () (G3b51@cvt* (cdr G3be2@p*) G3be3@n G3be4@ids)) (lambda (G3bea@G3be8 G3beb@G3be9) ((lambda (G3bee@ids G3bef@y) (call-with-values (lambda () (G3b53@cvt (car G3be2@p*) G3be3@n G3bee@ids)) (lambda (G3bf4@G3bf2 G3bf5@G3bf3) ((lambda (G3bf8@ids G3bf9@x) (values (cons G3bf9@x G3bef@y) G3bf8@ids)) G3bf5@G3bf3 G3bf4@G3bf2)))) G3beb@G3be9 G3bea@G3be8)))))) (set! G3b53@cvt (lambda (G3b54@p G3b55@n G3b56@ids) ((lambda (G3b5a@t) ((lambda (G3b5c@ls/false) (if (and G3b5c@ls/false (apply (lambda (G3b5e@id) (G2d6f@id? G3b5e@id)) G3b5c@ls/false)) (apply (lambda (G3b60@id) (if (G2d7d@bound-id-member? G3b54@p G3b4d@keys) (values (vector 'free-id G3b54@p) G3b56@ids) (if (G2d77@free-id=? G3b54@p (G2ef8@scheme-stx '_)) (values '_ G3b56@ids) (values 'any (cons (cons G3b54@p G3b55@n) G3b56@ids))))) G3b5c@ls/false) ((lambda (G3b62@t) ((lambda (G3b64@ls/false) (if (and G3b64@ls/false (apply (lambda (G3b66@p G3b67@dots) (G2f70@ellipsis? G3b67@dots)) G3b64@ls/false)) (apply (lambda (G3b6a@p G3b6b@dots) (call-with-values (lambda () (G3b53@cvt G3b6a@p (+ G3b55@n '1) G3b56@ids)) (lambda (G3b70@G3b6e G3b71@G3b6f) ((lambda (G3b74@ids G3b75@p) (values (if (eq? G3b75@p 'any) 'each-any (vector 'each G3b75@p)) G3b74@ids)) G3b71@G3b6f G3b70@G3b6e)))) G3b64@ls/false) ((lambda (G3b78@t) ((lambda (G3b7a@ls/false) (if (and G3b7a@ls/false (apply (lambda (G3b7c@x G3b7d@dots G3b7e@ys G3b7f@z) (G2f70@ellipsis? G3b7d@dots)) G3b7a@ls/false)) (apply (lambda (G3b84@x G3b85@dots G3b86@ys G3b87@z) (call-with-values (lambda () (G3b53@cvt G3b87@z G3b55@n G3b56@ids)) (lambda (G3b8e@G3b8c G3b8f@G3b8d) ((lambda (G3b92@ids G3b93@z) (call-with-values (lambda () (G3b51@cvt* G3b86@ys G3b55@n G3b92@ids)) (lambda (G3b98@G3b96 G3b99@G3b97) ((lambda (G3b9c@ids G3b9d@ys) (call-with-values (lambda () (G3b53@cvt G3b84@x (+ G3b55@n '1) G3b9c@ids)) (lambda (G3ba2@G3ba0 G3ba3@G3ba1) ((lambda (G3ba6@ids G3ba7@x) (values (vector 'each+ G3ba7@x (reverse G3b9d@ys) G3b93@z) G3ba6@ids)) G3ba3@G3ba1 G3ba2@G3ba0)))) G3b99@G3b97 G3b98@G3b96)))) G3b8f@G3b8d G3b8e@G3b8c)))) G3b7a@ls/false) ((lambda (G3baa@t) ((lambda (G3bac@ls/false) (if G3bac@ls/false (apply (lambda (G3bae@x G3baf@y) (call-with-values (lambda () (G3b53@cvt G3baf@y G3b55@n G3b56@ids)) (lambda (G3bb4@G3bb2 G3bb5@G3bb3) ((lambda (G3bb8@ids G3bb9@y) (call-with-values (lambda () (G3b53@cvt G3bae@x G3b55@n G3bb8@ids)) (lambda (G3bbe@G3bbc G3bbf@G3bbd) ((lambda (G3bc2@ids G3bc3@x) (values (cons G3bc3@x G3bb9@y) G3bc2@ids)) G3bbf@G3bbd G3bbe@G3bbc)))) G3bb5@G3bb3 G3bb4@G3bb2)))) G3bac@ls/false) ((lambda (G3bc6@t) ((lambda (G3bc8@ls/false) (if G3bc8@ls/false (apply (lambda () (values '() G3b56@ids)) G3bc8@ls/false) ((lambda (G3bca@t) ((lambda (G3bcc@ls/false) (if (and G3bcc@ls/false (apply (lambda (G3bce@p) (not (G2d37@stx? G3bce@p))) G3bcc@ls/false)) (apply (lambda (G3bd0@p) (call-with-values (lambda () (G3b53@cvt G3bd0@p G3b55@n G3b56@ids)) (lambda (G3bd4@G3bd2 G3bd5@G3bd3) ((lambda (G3bd8@ids G3bd9@p) (values (vector 'vector G3bd9@p) G3bd8@ids)) G3bd5@G3bd3 G3bd4@G3bd2)))) G3bcc@ls/false) ((lambda (G3bdc@t) ((lambda (G3bde@ls/false) (if G3bde@ls/false (apply (lambda (G3be0@datum) (values (vector 'atom (G2d85@stx->datum G3be0@datum)) G3b56@ids)) G3bde@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3bdc@t))) (G2f6e@syntax-dispatch G3bdc@t 'any))) G3bca@t))) (G2f6e@syntax-dispatch G3bca@t '#(vector each-any)))) G3bc6@t))) (G2f6e@syntax-dispatch G3bc6@t '()))) G3baa@t))) (G2f6e@syntax-dispatch G3baa@t '(any . any)))) G3b78@t))) (G2f6e@syntax-dispatch G3b78@t '(any any . #(each+ any () any))))) G3b62@t))) (G2f6e@syntax-dispatch G3b62@t '(any any)))) G3b5a@t))) (G2f6e@syntax-dispatch G3b5a@t 'any))) G3b54@p))) (G3b53@cvt G3b4c@pattern '0 '()))) '#f '#f))) (set! G2f6e@syntax-dispatch ((lambda () ((lambda (G3bfd@stx^ G3bff@match-each G3c01@match-each+ G3c03@match-each-any G3c05@match-empty G3c07@combine G3c09@match* G3c0b@match) (begin (set! G3bfd@stx^ (lambda (G3cc6@e G3cc7@m* G3cc8@s* G3cc9@ae*) (if (and (null? G3cc7@m*) (null? G3cc8@s*) (null? G3cc9@ae*)) G3cc6@e (G2d57@mkstx G3cc6@e G3cc7@m* G3cc8@s* G3cc9@ae*)))) (set! G3bff@match-each (lambda (G3ca9@e G3caa@p G3cab@m* G3cac@s* G3cad@ae*) (if (pair? G3ca9@e) ((lambda (G3cb3@first) (and G3cb3@first ((lambda (G3cb5@rest) (and G3cb5@rest (cons G3cb3@first G3cb5@rest))) (G3bff@match-each (cdr G3ca9@e) G3caa@p G3cab@m* G3cac@s* G3cad@ae*)))) (G3c0b@match (car G3ca9@e) G3caa@p G3cab@m* G3cac@s* G3cad@ae* '())) (if (null? G3ca9@e) '() (if (G2d37@stx? G3ca9@e) (and (not (G2ce9@top-marked? G3cab@m*)) (call-with-values (lambda () (G2d55@join-wraps G3cab@m* G3cac@s* G3cad@ae* G3ca9@e)) (lambda (G3cba@G3cb7 G3cbb@G3cb8 G3cbc@G3cb9) ((lambda (G3cc0@ae* G3cc1@s* G3cc2@m*) (G3bff@match-each (G2d3b@stx-expr G3ca9@e) G3caa@p G3cc2@m* G3cc1@s* G3cc0@ae*)) G3cbc@G3cb9 G3cbb@G3cb8 G3cba@G3cb7)))) (if (G2900@G282b@annotation? G3ca9@e) (G3bff@match-each (G2902@G282f@annotation-expression G3ca9@e) G3caa@p G3cab@m* G3cac@s* G3cad@ae*) '#f)))))) (set! G3c01@match-each+ (lambda (G3c6f@e G3c70@x-pat G3c71@y-pat G3c72@z-pat G3c73@m* G3c74@s* G3c75@ae* G3c76@r) ((letrec ((G3c7f@f (lambda (G3c81@e G3c82@m* G3c83@s* G3c84@ae*) (if (pair? G3c81@e) (call-with-values (lambda () (G3c7f@f (cdr G3c81@e) G3c82@m* G3c83@s* G3c84@ae*)) (lambda (G3c8c@G3c89 G3c8d@G3c8a G3c8e@G3c8b) ((lambda (G3c92@r G3c93@y-pat G3c94@xr*) (if G3c92@r (if (null? G3c93@y-pat) ((lambda (G3c98@xr) (if G3c98@xr (values (cons G3c98@xr G3c94@xr*) G3c93@y-pat G3c92@r) (values '#f '#f '#f))) (G3c0b@match (car G3c81@e) G3c70@x-pat G3c82@m* G3c83@s* G3c84@ae* '())) (values '() (cdr G3c93@y-pat) (G3c0b@match (car G3c81@e) (car G3c93@y-pat) G3c82@m* G3c83@s* G3c84@ae* G3c92@r))) (values '#f '#f '#f))) G3c8e@G3c8b G3c8d@G3c8a G3c8c@G3c89))) (if (G2d37@stx? G3c81@e) (if (G2ce9@top-marked? G3c82@m*) (values '() G3c71@y-pat (G3c0b@match G3c81@e G3c72@z-pat G3c82@m* G3c83@s* G3c84@ae* G3c76@r)) (call-with-values (lambda () (G2d55@join-wraps G3c82@m* G3c83@s* G3c84@ae* G3c81@e)) (lambda (G3c9d@G3c9a G3c9e@G3c9b G3c9f@G3c9c) ((lambda (G3ca3@ae* G3ca4@s* G3ca5@m*) (G3c7f@f (G2d3b@stx-expr G3c81@e) G3ca5@m* G3ca4@s* G3ca3@ae*)) G3c9f@G3c9c G3c9e@G3c9b G3c9d@G3c9a)))) (if (G2900@G282b@annotation? G3c81@e) (G3c7f@f (G2902@G282f@annotation-expression G3c81@e) G3c82@m* G3c83@s* G3c84@ae*) (values '() G3c71@y-pat (G3c0b@match G3c81@e G3c72@z-pat G3c82@m* G3c83@s* G3c84@ae* G3c76@r)))))))) G3c7f@f) G3c6f@e G3c73@m* G3c74@s* G3c75@ae*))) (set! G3c03@match-each-any (lambda (G3c56@e G3c57@m* G3c58@s* G3c59@ae*) (if (pair? G3c56@e) ((lambda (G3c5e@l) (and G3c5e@l (cons (G3bfd@stx^ (car G3c56@e) G3c57@m* G3c58@s* G3c59@ae*) G3c5e@l))) (G3c03@match-each-any (cdr G3c56@e) G3c57@m* G3c58@s* G3c59@ae*)) (if (null? G3c56@e) '() (if (G2d37@stx? G3c56@e) (and (not (G2ce9@top-marked? G3c57@m*)) (call-with-values (lambda () (G2d55@join-wraps G3c57@m* G3c58@s* G3c59@ae* G3c56@e)) (lambda (G3c63@G3c60 G3c64@G3c61 G3c65@G3c62) ((lambda (G3c69@ae* G3c6a@s* G3c6b@m*) (G3c03@match-each-any (G2d3b@stx-expr G3c56@e) G3c6b@m* G3c6a@s* G3c69@ae*)) G3c65@G3c62 G3c64@G3c61 G3c63@G3c60)))) (if (G2900@G282b@annotation? G3c56@e) (G3c03@match-each-any (G2902@G282f@annotation-expression G3c56@e) G3c57@m* G3c58@s* G3c59@ae*) '#f)))))) (set! G3c05@match-empty (lambda (G3c50@p G3c51@r) (if (null? G3c50@p) G3c51@r (if (eq? G3c50@p '_) G3c51@r (if (eq? G3c50@p 'any) (cons '() G3c51@r) (if (pair? G3c50@p) (G3c05@match-empty (car G3c50@p) (G3c05@match-empty (cdr G3c50@p) G3c51@r)) (if (eq? G3c50@p 'each-any) (cons '() G3c51@r) ((lambda (G3c54@t) (if (memv G3c54@t '(each)) (G3c05@match-empty (vector-ref G3c50@p '1) G3c51@r) (if (memv G3c54@t '(each+)) (G3c05@match-empty (vector-ref G3c50@p '1) (G3c05@match-empty (reverse (vector-ref G3c50@p '2)) (G3c05@match-empty (vector-ref G3c50@p '3) G3c51@r))) (if (memv G3c54@t '(free-id atom)) G3c51@r (if (memv G3c54@t '(scheme-id atom)) G3c51@r (if (memv G3c54@t '(vector)) (G3c05@match-empty (vector-ref G3c50@p '1) G3c51@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c50@p))))))) (vector-ref G3c50@p '0))))))))) (set! G3c07@combine (lambda (G3c4c@r* G3c4d@r) (if (null? (car G3c4c@r*)) G3c4d@r (cons (map car G3c4c@r*) (G3c07@combine (map cdr G3c4c@r*) G3c4d@r))))) (set! G3c09@match* (lambda (G3c2b@e G3c2c@p G3c2d@m* G3c2e@s* G3c2f@ae* G3c30@r) (if (null? G3c2c@p) (and (null? G3c2b@e) G3c30@r) (if (pair? G3c2c@p) (and (pair? G3c2b@e) (G3c0b@match (car G3c2b@e) (car G3c2c@p) G3c2d@m* G3c2e@s* G3c2f@ae* (G3c0b@match (cdr G3c2b@e) (cdr G3c2c@p) G3c2d@m* G3c2e@s* G3c2f@ae* G3c30@r))) (if (eq? G3c2c@p 'each-any) ((lambda (G3c37@l) (and G3c37@l (cons G3c37@l G3c30@r))) (G3c03@match-each-any G3c2b@e G3c2d@m* G3c2e@s* G3c2f@ae*)) ((lambda (G3c39@t) (if (memv G3c39@t '(each)) (if (null? G3c2b@e) (G3c05@match-empty (vector-ref G3c2c@p '1) G3c30@r) ((lambda (G3c3b@r*) (and G3c3b@r* (G3c07@combine G3c3b@r* G3c30@r))) (G3bff@match-each G3c2b@e (vector-ref G3c2c@p '1) G3c2d@m* G3c2e@s* G3c2f@ae*))) (if (memv G3c39@t '(free-id)) (and (symbol? G3c2b@e) (G2ce9@top-marked? G3c2d@m*) (G2d77@free-id=? (G3bfd@stx^ G3c2b@e G3c2d@m* G3c2e@s* G3c2f@ae*) (vector-ref G3c2c@p '1)) G3c30@r) (if (memv G3c39@t '(scheme-id)) (and (symbol? G3c2b@e) (G2ce9@top-marked? G3c2d@m*) (G2d77@free-id=? (G3bfd@stx^ G3c2b@e G3c2d@m* G3c2e@s* G3c2f@ae*) (G2ef8@scheme-stx (vector-ref G3c2c@p '1))) G3c30@r) (if (memv G3c39@t '(each+)) (call-with-values (lambda () (G3c01@match-each+ G3c2b@e (vector-ref G3c2c@p '1) (vector-ref G3c2c@p '2) (vector-ref G3c2c@p '3) G3c2d@m* G3c2e@s* G3c2f@ae* G3c30@r)) (lambda (G3c40@G3c3d G3c41@G3c3e G3c42@G3c3f) ((lambda (G3c46@r G3c47@y-pat G3c48@xr*) (and G3c46@r (null? G3c47@y-pat) (if (null? G3c48@xr*) (G3c05@match-empty (vector-ref G3c2c@p '1) G3c46@r) (G3c07@combine G3c48@xr* G3c46@r)))) G3c42@G3c3f G3c41@G3c3e G3c40@G3c3d))) (if (memv G3c39@t '(atom)) (and (fast-equal? (vector-ref G3c2c@p '1) (G2d83@strip G3c2b@e G3c2d@m*)) G3c30@r) (if (memv G3c39@t '(vector)) (and (vector? G3c2b@e) (G3c0b@match (vector->list G3c2b@e) (vector-ref G3c2c@p '1) G3c2d@m* G3c2e@s* G3c2f@ae* G3c30@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c2c@p)))))))) (vector-ref G3c2c@p '0))))))) (set! G3c0b@match (lambda (G3c10@e G3c11@p G3c12@m* G3c13@s* G3c14@ae* G3c15@r) (if (not G3c15@r) '#f (if (eq? G3c11@p '_) G3c15@r (if (eq? G3c11@p 'any) (cons (G3bfd@stx^ G3c10@e G3c12@m* G3c13@s* G3c14@ae*) G3c15@r) (if (G2d37@stx? G3c10@e) (and (not (G2ce9@top-marked? G3c12@m*)) (call-with-values (lambda () (G2d55@join-wraps G3c12@m* G3c13@s* G3c14@ae* G3c10@e)) (lambda (G3c1f@G3c1c G3c20@G3c1d G3c21@G3c1e) ((lambda (G3c25@ae* G3c26@s* G3c27@m*) (G3c0b@match (G2d3b@stx-expr G3c10@e) G3c11@p G3c27@m* G3c26@s* G3c25@ae* G3c15@r)) G3c21@G3c1e G3c20@G3c1d G3c1f@G3c1c)))) (if (G2900@G282b@annotation? G3c10@e) (G3c0b@match (G2902@G282f@annotation-expression G3c10@e) G3c11@p G3c12@m* G3c13@s* G3c14@ae* G3c15@r) (G3c09@match* G3c10@e G3c11@p G3c12@m* G3c13@s* G3c14@ae* G3c15@r)))))))) (lambda (G3c0c@e G3c0d@p) (G3c0b@match G3c0c@e G3c0d@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f70@ellipsis? (lambda (G3cce@x) (and (G2d6f@id? G3cce@x) (G2d77@free-id=? G3cce@x (G2ef8@scheme-stx '...))))) (set! G2f72@underscore? (lambda (G3cd0@x) (and (G2d6f@id? G3cd0@x) (G2d77@free-id=? G3cd0@x (G2ef8@scheme-stx '_))))) (set! G2f74@verify-literals (lambda (G3cd2@lits G3cd3@expr) (for-each (lambda (G3cd6@x) (if (or (not (G2d6f@id? G3cd6@x)) (G2f70@ellipsis? G3cd6@x) (G2f72@underscore? G3cd6@x)) (G305b@syntax-violation '#f '"invalid literal" G3cd3@expr G3cd6@x) (void))) G3cd2@lits))) (set! G2f76@syntax-case-transformer ((lambda () ((lambda (G3cd9@build-dispatch-call G3cdb@invalid-ids-error G3cdd@gen-clause G3cdf@gen-syntax-case) (begin (set! G3cd9@build-dispatch-call (lambda (G3d48@pvars G3d49@expr G3d4a@y G3d4b@r G3d4c@mr) ((lambda (G3d52@ids G3d53@levels) ((lambda (G3d56@labels G3d57@new-vars) ((lambda (G3d5a@body) (list '(primitive apply) (G2cc9@G2c07@build-lambda '#f G3d57@new-vars G3d5a@body) G3d4a@y)) (G2f92@chi-expr (G2d5b@add-subst (G2d2a@make-full-rib G3d52@ids G3d56@labels) G3d49@expr) (append (map (lambda (G3d5c@label G3d5d@var G3d5e@level) (cons G3d5c@label (G2d8f@make-binding 'syntax (cons G3d5d@var G3d5e@level)))) G3d56@labels G3d57@new-vars (map cdr G3d48@pvars)) G3d4b@r) G3d4c@mr))) (map G2cef@gen-label G3d52@ids) (map G2ceb@gen-lexical G3d52@ids))) (map car G3d48@pvars) (map cdr G3d48@pvars)))) (set! G3cdb@invalid-ids-error (lambda (G3d3c@id* G3d3d@e G3d3e@class) ((letrec ((G3d42@find (lambda (G3d44@id* G3d45@ok*) (if (null? G3d44@id*) (G305b@syntax-violation '#f '"invalid syntax" G3d3d@e) (if (G2d6f@id? (car G3d44@id*)) (if (G2d7d@bound-id-member? (car G3d44@id*) G3d45@ok*) (G3055@syntax-error (car G3d44@id*) '"duplicate " G3d3e@class) (G3d42@find (cdr G3d44@id*) (cons (car G3d44@id*) G3d45@ok*))) (G3055@syntax-error (car G3d44@id*) '"invalid " G3d3e@class)))))) G3d42@find) G3d3c@id* '()))) (set! G3cdd@gen-clause (lambda (G3d16@x G3d17@keys G3d18@clauses G3d19@r G3d1a@mr G3d1b@pat G3d1c@fender G3d1d@expr) (call-with-values (lambda () (G2f6c@convert-pattern G3d1b@pat G3d17@keys)) (lambda (G3d28@G3d26 G3d29@G3d27) ((lambda (G3d2c@pvars G3d2d@p) (if (not (G2d7b@distinct-bound-ids? (map car G3d2c@pvars))) (G3cdb@invalid-ids-error (map car G3d2c@pvars) G3d1b@pat '"pattern variable") (if (not (for-all (lambda (G3d30@x) (not (G2f70@ellipsis? (car G3d30@x)))) G3d2c@pvars)) (G305b@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d1b@pat) ((lambda (G3d32@y) ((lambda (G3d34@test) ((lambda (G3d36@conseq) ((lambda (G3d38@altern) (list (G2cc9@G2c07@build-lambda '#f (list G3d32@y) (list 'if G3d34@test G3d36@conseq G3d38@altern)) (list '(primitive syntax-dispatch) G3d16@x (list 'quote G3d2d@p)))) (G3cdf@gen-syntax-case G3d16@x G3d17@keys G3d18@clauses G3d19@r G3d1a@mr))) (G3cd9@build-dispatch-call G3d2c@pvars G3d1d@expr G3d32@y G3d19@r G3d1a@mr))) (if (eq? G3d1c@fender '#t) G3d32@y ((lambda (G3d3a@call) (list 'if G3d32@y G3d3a@call (list 'quote '#f))) (G3cd9@build-dispatch-call G3d2c@pvars G3d1c@fender G3d32@y G3d19@r G3d1a@mr))))) (G2ceb@gen-lexical 'tmp))))) G3d29@G3d27 G3d28@G3d26))))) (set! G3cdf@gen-syntax-case (lambda (G3cf4@x G3cf5@keys G3cf6@clauses G3cf7@r G3cf8@mr) (if (null? G3cf6@clauses) (list '(primitive syntax-error) G3cf4@x) ((lambda (G3cfe@t) ((lambda (G3d00@ls/false) (if G3d00@ls/false (apply (lambda (G3d02@pat G3d03@expr) (if (and (G2d6f@id? G3d02@pat) (not (G2d7d@bound-id-member? G3d02@pat G3cf5@keys)) (not (G2f70@ellipsis? G3d02@pat))) (if (G2d77@free-id=? G3d02@pat (G2ef8@scheme-stx '_)) (G2f92@chi-expr G3d03@expr G3cf7@r G3cf8@mr) ((lambda (G3d06@lab G3d07@lex) ((lambda (G3d0a@body) (list (G2cc9@G2c07@build-lambda '#f (list G3d07@lex) G3d0a@body) G3cf4@x)) (G2f92@chi-expr (G2d5b@add-subst (G2d2a@make-full-rib (list G3d02@pat) (list G3d06@lab)) G3d03@expr) (cons (cons G3d06@lab (G2d8f@make-binding 'syntax (cons G3d07@lex '0))) G3cf7@r) G3cf8@mr))) (G2cef@gen-label G3d02@pat) (G2ceb@gen-lexical G3d02@pat))) (G3cdd@gen-clause G3cf4@x G3cf5@keys (cdr G3cf6@clauses) G3cf7@r G3cf8@mr G3d02@pat '#t G3d03@expr))) G3d00@ls/false) ((lambda (G3d0c@t) ((lambda (G3d0e@ls/false) (if G3d0e@ls/false (apply (lambda (G3d10@pat G3d11@fender G3d12@expr) (G3cdd@gen-clause G3cf4@x G3cf5@keys (cdr G3cf6@clauses) G3cf7@r G3cf8@mr G3d10@pat G3d11@fender G3d12@expr)) G3d0e@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3d0c@t))) (G2f6e@syntax-dispatch G3d0c@t '(any any any)))) G3cfe@t))) (G2f6e@syntax-dispatch G3cfe@t '(any any)))) (car G3cf6@clauses))))) (lambda (G3ce0@e G3ce1@r G3ce2@mr) ((lambda (G3ce6@t) ((lambda (G3ce8@ls/false) (if G3ce8@ls/false (apply (lambda (G3cea@expr G3ceb@keys G3cec@clauses) (begin (G2f74@verify-literals G3ceb@keys G3ce0@e) ((lambda (G3cf0@x) ((lambda (G3cf2@body) (list (G2cc9@G2c07@build-lambda '#f (list G3cf0@x) G3cf2@body) (G2f92@chi-expr G3cea@expr G3ce1@r G3ce2@mr))) (G3cdf@gen-syntax-case G3cf0@x G3ceb@keys G3cec@clauses G3ce1@r G3ce2@mr))) (G2ceb@gen-lexical 'tmp)))) G3ce8@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3ce6@t))) (G2f6e@syntax-dispatch G3ce6@t '(_ any each-any . each-any)))) G3ce0@e)))) '#f '#f '#f '#f)))) (set! G2f78@ellipsis-map (lambda (G3d62@proc G3d63@ls . G3d66@ls*) ((lambda (G3d69@who) (begin (set! G3d69@who '...) (begin (if (not (list? G3d63@ls)) (assertion-violation G3d69@who '"not a list" G3d63@ls) (void)) (if (not (null? G3d66@ls*)) ((lambda (G3d6a@n) (for-each (lambda (G3d6c@x) (begin (if (not (list? G3d6c@x)) (assertion-violation G3d69@who '"not a list" G3d6c@x) (void)) (if (not (= (length G3d6c@x) G3d6a@n)) (assertion-violation G3d69@who '"length mismatch" G3d63@ls G3d6c@x) (void)))) G3d66@ls*)) (length G3d63@ls)) (void)) (apply map G3d62@proc G3d63@ls G3d66@ls*)))) '#f))) (set! G2f7a@syntax-transformer ((lambda () ((lambda (G3d6f@gen-syntax G3d71@gen-ref G3d73@gen-append G3d75@gen-mappend G3d77@gen-map G3d79@gen-cons G3d7b@gen-vector G3d7d@regen) (begin (set! G3d6f@gen-syntax (lambda (G3de2@src G3de3@e G3de4@r G3de5@maps G3de6@ellipsis? G3de7@vec?) ((lambda (G3dee@t) ((lambda (G3df0@ls/false) (if (and G3df0@ls/false (apply (lambda (G3df2@dots) (G3de6@ellipsis? G3df2@dots)) G3df0@ls/false)) (apply (lambda (G3df4@dots) (G305b@syntax-violation '#f '"misplaced ellipsis in syntax form" G3de2@src)) G3df0@ls/false) ((lambda (G3df6@t) ((lambda (G3df8@ls/false) (if (and G3df8@ls/false (apply (lambda (G3dfa@id) (G2d6f@id? G3dfa@id)) G3df8@ls/false)) (apply (lambda (G3dfc@id) ((lambda (G3dfe@label) ((lambda (G3e00@b) ((lambda () (if (eq? (G2d91@binding-type G3e00@b) 'syntax) (call-with-values (lambda () ((lambda (G3e04@var.lev) (G3d71@gen-ref G3de2@src (car G3e04@var.lev) (cdr G3e04@var.lev) G3de5@maps)) (G2d93@binding-value G3e00@b))) (lambda (G3e06@G3e02 G3e07@G3e03) ((lambda (G3e0a@maps G3e0b@var) (values (list 'ref G3e0b@var) G3e0a@maps)) G3e07@G3e03 G3e06@G3e02))) (values (list 'quote G3de3@e) G3de5@maps))))) (G2d8d@label->binding G3dfe@label G3de4@r))) (G2d89@id->label G3de3@e))) G3df8@ls/false) ((lambda (G3e0e@t) ((lambda (G3e10@ls/false) (if (and G3e10@ls/false (apply (lambda (G3e12@dots G3e13@e) (G3de6@ellipsis? G3e12@dots)) G3e10@ls/false)) (apply (lambda (G3e16@dots G3e17@e) (if G3de7@vec? (G305b@syntax-violation '#f '"misplaced ellipsis in syntax form" G3de2@src) (G3d6f@gen-syntax G3de2@src G3e17@e G3de4@r G3de5@maps (lambda (G3e1a@x) '#f) '#f))) G3e10@ls/false) ((lambda (G3e1c@t) ((lambda (G3e1e@ls/false) (if (and G3e1e@ls/false (apply (lambda (G3e20@x G3e21@dots G3e22@y) (G3de6@ellipsis? G3e21@dots)) G3e1e@ls/false)) (apply (lambda (G3e26@x G3e27@dots G3e28@y) ((letrec ((G3e2c@f (lambda (G3e2e@y G3e2f@k) ((lambda (G3e32@t) ((lambda (G3e34@ls/false) (if G3e34@ls/false (apply (lambda () (G3e2f@k G3de5@maps)) G3e34@ls/false) ((lambda (G3e36@t) ((lambda (G3e38@ls/false) (if (and G3e38@ls/false (apply (lambda (G3e3a@dots G3e3b@y) (G3de6@ellipsis? G3e3a@dots)) G3e38@ls/false)) (apply (lambda (G3e3e@dots G3e3f@y) (G3e2c@f G3e3f@y (lambda (G3e42@maps) (call-with-values (lambda () (G3e2f@k (cons '() G3e42@maps))) (lambda (G3e46@G3e44 G3e47@G3e45) ((lambda (G3e4a@maps G3e4b@x) (if (null? (car G3e4a@maps)) (G305b@syntax-violation '#f '"extra ellipsis in syntax form" G3de2@src) (values (G3d75@gen-mappend G3e4b@x (car G3e4a@maps)) (cdr G3e4a@maps)))) G3e47@G3e45 G3e46@G3e44)))))) G3e38@ls/false) ((lambda (G3e4e@t) ((lambda (G3e50@ls/false) (if G3e50@ls/false (apply (lambda () (call-with-values (lambda () (G3d6f@gen-syntax G3de2@src G3e2e@y G3de4@r G3de5@maps G3de6@ellipsis? G3de7@vec?)) (lambda (G3e54@G3e52 G3e55@G3e53) ((lambda (G3e58@maps G3e59@y) (call-with-values (lambda () (G3e2f@k G3e58@maps)) (lambda (G3e5e@G3e5c G3e5f@G3e5d) ((lambda (G3e62@maps G3e63@x) (values (G3d73@gen-append G3e63@x G3e59@y) G3e62@maps)) G3e5f@G3e5d G3e5e@G3e5c)))) G3e55@G3e53 G3e54@G3e52)))) G3e50@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3e4e@t))) (G2f6e@syntax-dispatch G3e4e@t '_))) G3e36@t))) (G2f6e@syntax-dispatch G3e36@t '(any . any)))) G3e32@t))) (G2f6e@syntax-dispatch G3e32@t '()))) G3e2e@y)))) G3e2c@f) G3e28@y (lambda (G3e66@maps) (call-with-values (lambda () (G3d6f@gen-syntax G3de2@src G3e26@x G3de4@r (cons '() G3e66@maps) G3de6@ellipsis? '#f)) (lambda (G3e6a@G3e68 G3e6b@G3e69) ((lambda (G3e6e@maps G3e6f@x) (if (null? (car G3e6e@maps)) (G305b@syntax-violation '#f '"extra ellipsis in syntax form" G3de2@src) (values (G3d77@gen-map G3e6f@x (car G3e6e@maps)) (cdr G3e6e@maps)))) G3e6b@G3e69 G3e6a@G3e68)))))) G3e1e@ls/false) ((lambda (G3e72@t) ((lambda (G3e74@ls/false) (if G3e74@ls/false (apply (lambda (G3e76@x G3e77@y) (call-with-values (lambda () (G3d6f@gen-syntax G3de2@src G3e76@x G3de4@r G3de5@maps G3de6@ellipsis? '#f)) (lambda (G3e7c@G3e7a G3e7d@G3e7b) ((lambda (G3e80@maps G3e81@xnew) (call-with-values (lambda () (G3d6f@gen-syntax G3de2@src G3e77@y G3de4@r G3e80@maps G3de6@ellipsis? G3de7@vec?)) (lambda (G3e86@G3e84 G3e87@G3e85) ((lambda (G3e8a@maps G3e8b@ynew) (values (G3d79@gen-cons G3de3@e G3e76@x G3e77@y G3e81@xnew G3e8b@ynew) G3e8a@maps)) G3e87@G3e85 G3e86@G3e84)))) G3e7d@G3e7b G3e7c@G3e7a)))) G3e74@ls/false) ((lambda (G3e8e@t) ((lambda (G3e90@ls/false) (if G3e90@ls/false (apply (lambda (G3e92@ls) (call-with-values (lambda () (G3d6f@gen-syntax G3de2@src G3e92@ls G3de4@r G3de5@maps G3de6@ellipsis? '#t)) (lambda (G3e96@G3e94 G3e97@G3e95) ((lambda (G3e9a@maps G3e9b@lsnew) (values (G3d7b@gen-vector G3de3@e G3e92@ls G3e9b@lsnew) G3e9a@maps)) G3e97@G3e95 G3e96@G3e94)))) G3e90@ls/false) ((lambda (G3e9e@t) ((lambda (G3ea0@ls/false) (if G3ea0@ls/false (apply (lambda () (values (list 'quote G3de3@e) G3de5@maps)) G3ea0@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3e9e@t))) (G2f6e@syntax-dispatch G3e9e@t '_))) G3e8e@t))) (G2f6e@syntax-dispatch G3e8e@t '#(vector each-any)))) G3e72@t))) (G2f6e@syntax-dispatch G3e72@t '(any . any)))) G3e1c@t))) (G2f6e@syntax-dispatch G3e1c@t '(any any . any)))) G3e0e@t))) (G2f6e@syntax-dispatch G3e0e@t '(any any)))) G3df6@t))) (G2f6e@syntax-dispatch G3df6@t 'any))) G3dee@t))) (G2f6e@syntax-dispatch G3dee@t 'any))) G3de3@e))) (set! G3d71@gen-ref (lambda (G3dca@src G3dcb@var G3dcc@level G3dcd@maps) (if (= G3dcc@level '0) (values G3dcb@var G3dcd@maps) (if (null? G3dcd@maps) (G305b@syntax-violation '#f '"missing ellipsis in syntax form" G3dca@src) (call-with-values (lambda () (G3d71@gen-ref G3dca@src G3dcb@var (- G3dcc@level '1) (cdr G3dcd@maps))) (lambda (G3dd4@G3dd2 G3dd5@G3dd3) ((lambda (G3dd8@outer-maps G3dd9@outer-var) ((lambda (G3ddc@t) (if G3ddc@t ((lambda (G3dde@b) (values (cdr G3dde@b) G3dcd@maps)) G3ddc@t) ((lambda (G3de0@inner-var) (values G3de0@inner-var (cons (cons (cons G3dd9@outer-var G3de0@inner-var) (car G3dcd@maps)) G3dd8@outer-maps))) (G2ceb@gen-lexical 'tmp)))) (assq G3dd9@outer-var (car G3dcd@maps)))) G3dd5@G3dd3 G3dd4@G3dd2))))))) (set! G3d73@gen-append (lambda (G3dc6@x G3dc7@y) (if (fast-equal? G3dc7@y ''()) G3dc6@x (list 'append G3dc6@x G3dc7@y)))) (set! G3d75@gen-mappend (lambda (G3dc2@e G3dc3@map-env) (list 'apply '(primitive append) (G3d77@gen-map G3dc2@e G3dc3@map-env)))) (set! G3d77@gen-map (lambda (G3db0@e G3db1@map-env) ((lambda (G3db4@formals G3db5@actuals) (if (eq? (car G3db0@e) 'ref) (car G3db5@actuals) (if (for-all (lambda (G3db8@x) (and (eq? (car G3db8@x) 'ref) (memq (cadr G3db8@x) G3db4@formals))) (cdr G3db0@e)) ((lambda (G3dba@args) (cons 'map (cons (list 'primitive (car G3db0@e)) G3dba@args))) (map ((lambda (G3dbc@r) (lambda (G3dbe@x) (cdr (assq (cadr G3dbe@x) G3dbc@r)))) (map cons G3db4@formals G3db5@actuals)) (cdr G3db0@e))) (cons* 'map (list 'lambda G3db4@formals G3db0@e) G3db5@actuals)))) (map cdr G3db1@map-env) (map (lambda (G3dc0@x) (list 'ref (car G3dc0@x))) G3db1@map-env)))) (set! G3d79@gen-cons (lambda (G3da0@e G3da1@x G3da2@y G3da3@xnew G3da4@ynew) ((lambda (G3daa@t) (if (memv G3daa@t '(quote)) (if (eq? (car G3da3@xnew) 'quote) ((lambda (G3dac@xnew G3dad@ynew) (if (and (eq? G3dac@xnew G3da1@x) (eq? G3dad@ynew G3da2@y)) (list 'quote G3da0@e) (list 'quote (cons G3dac@xnew G3dad@ynew)))) (cadr G3da3@xnew) (cadr G3da4@ynew)) (if (null? (cadr G3da4@ynew)) (list 'list G3da3@xnew) (list 'cons G3da3@xnew G3da4@ynew))) (if (memv G3daa@t '(list)) (cons 'list (cons G3da3@xnew (cdr G3da4@ynew))) (list 'cons G3da3@xnew G3da4@ynew)))) (car G3da4@ynew)))) (set! G3d7b@gen-vector (lambda (G3d9a@e G3d9b@ls G3d9c@lsnew) (if (eq? (car G3d9c@lsnew) 'quote) (if (eq? (cadr G3d9c@lsnew) G3d9b@ls) (list 'quote G3d9a@e) (list 'quote (list->vector (cadr G3d9c@lsnew)))) (if (eq? (car G3d9c@lsnew) 'list) (cons 'vector (cdr G3d9c@lsnew)) (list 'list->vector G3d9c@lsnew))))) (set! G3d7d@regen (lambda (G3d94@x) ((lambda (G3d96@t) (if (memv G3d96@t '(ref)) (cadr G3d94@x) (if (memv G3d96@t '(primitive)) (list 'primitive (cadr G3d94@x)) (if (memv G3d96@t '(quote)) (list 'quote (cadr G3d94@x)) (if (memv G3d96@t '(lambda)) (G2cc9@G2c07@build-lambda '#f (cadr G3d94@x) (G3d7d@regen (caddr G3d94@x))) (if (memv G3d96@t '(map)) ((lambda (G3d98@ls) (cons '(primitive ellipsis-map) G3d98@ls)) (map G3d7d@regen (cdr G3d94@x))) (cons (list 'primitive (car G3d94@x)) (map G3d7d@regen (cdr G3d94@x))))))))) (car G3d94@x)))) (lambda (G3d7e@e G3d7f@r G3d80@mr) ((lambda (G3d84@t) ((lambda (G3d86@ls/false) (if G3d86@ls/false (apply (lambda (G3d88@x) (call-with-values (lambda () (G3d6f@gen-syntax G3d7e@e G3d88@x G3d7f@r '() G2f70@ellipsis? '#f)) (lambda (G3d8c@G3d8a G3d8d@G3d8b) ((lambda (G3d90@maps G3d91@e) (G3d7d@regen G3d91@e)) G3d8d@G3d8b G3d8c@G3d8a)))) G3d86@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3d84@t))) (G2f6e@syntax-dispatch G3d84@t '(_ any)))) G3d7e@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f7c@core-macro-transformer (lambda (G3ea2@name) ((lambda (G3ea4@t) (if (memv G3ea4@t '(quote)) G2f1e@quote-transformer (if (memv G3ea4@t '(lambda)) G2f22@lambda-transformer (if (memv G3ea4@t '(case-lambda)) G2f20@case-lambda-transformer (if (memv G3ea4@t '(letrec)) G2f06@letrec-transformer (if (memv G3ea4@t '(letrec*)) G2f08@letrec*-transformer (if (memv G3ea4@t '(if)) G2f16@if-transformer (if (memv G3ea4@t '(and)) G2f18@and-transformer (if (memv G3ea4@t '(or)) G2f1a@or-transformer (if (memv G3ea4@t '(foreign-call)) G2f6a@foreign-call-transformer (if (memv G3ea4@t '(syntax-case)) G2f76@syntax-case-transformer (if (memv G3ea4@t '(syntax)) G2f7a@syntax-transformer (if (memv G3ea4@t '(type-descriptor)) G2f0c@type-descriptor-transformer (if (memv G3ea4@t '(record-type-descriptor)) G2f0e@record-type-descriptor-transformer (if (memv G3ea4@t '(record-constructor-descriptor)) G2f10@record-constructor-descriptor-transformer (if (memv G3ea4@t '(fluid-let-syntax)) G2f0a@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3ea2@name))))))))))))))))) G3ea2@name))) (set! G2f7e@file-options-macro (lambda (G3ea6@x) ((lambda (G3ea9@valid-option?) (begin (set! G3ea9@valid-option? (lambda (G3eb2@x) (and (G2d6f@id? G3eb2@x) (memq (G2d71@id->sym G3eb2@x) '(no-fail no-create no-truncate))))) ((lambda (G3eaa@t) ((lambda (G3eac@ls/false) (if (and G3eac@ls/false (apply (lambda (G3eae@opt*) (and (for-all G3ea9@valid-option? G3eae@opt*) (G290c@G28ad@file-options-spec (map G2d71@id->sym G3eae@opt*)))) G3eac@ls/false)) (apply (lambda (G3eb0@opt*) (G2f24@bless (list 'quote (G290c@G28ad@file-options-spec (map G2d71@id->sym G3eb0@opt*))))) G3eac@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3eaa@t))) (G2f6e@syntax-dispatch G3eaa@t '(_ . each-any)))) G3ea6@x))) '#f))) (set! G2f80@symbol-macro (lambda (G3eb4@x G3eb5@set) ((lambda (G3eb8@t) ((lambda (G3eba@ls/false) (if (and G3eba@ls/false (apply (lambda (G3ebc@name) (and (G2d6f@id? G3ebc@name) (memq (G2d71@id->sym G3ebc@name) G3eb5@set))) G3eba@ls/false)) (apply (lambda (G3ebe@name) (G2f24@bless (list 'quote G3ebe@name))) G3eba@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3eb8@t))) (G2f6e@syntax-dispatch G3eb8@t '(_ any)))) G3eb4@x))) (set! G2f82@macro-transformer (lambda (G3ec0@x) (if (procedure? G3ec0@x) G3ec0@x (if (symbol? G3ec0@x) ((lambda (G3ec2@t) (if (memv G3ec2@t '(define-record-type)) G2f62@define-record-type-macro (if (memv G3ec2@t '(define-struct)) G2f60@define-struct-macro (if (memv G3ec2@t '(include)) G2f56@include-macro (if (memv G3ec2@t '(cond)) G2f52@cond-macro (if (memv G3ec2@t '(let)) G2f2a@let-macro (if (memv G3ec2@t '(do)) G2f4a@do-macro (if (memv G3ec2@t '(or)) G2f4e@or-macro (if (memv G3ec2@t '(and)) G2f50@and-macro (if (memv G3ec2@t '(let*)) G2f4c@let*-macro (if (memv G3ec2@t '(let-values)) G2f2c@let-values-macro (if (memv G3ec2@t '(let*-values)) G2f2e@let*-values-macro (if (memv G3ec2@t '(syntax-rules)) G2f5a@syntax-rules-macro (if (memv G3ec2@t '(quasiquote)) G2f5c@quasiquote-macro (if (memv G3ec2@t '(quasisyntax)) G2f5e@quasisyntax-macro (if (memv G3ec2@t '(with-syntax)) G2f26@with-syntax-macro (if (memv G3ec2@t '(when)) G2f12@when-macro (if (memv G3ec2@t '(unless)) G2f14@unless-macro (if (memv G3ec2@t '(case)) G2f1c@case-macro (if (memv G3ec2@t '(identifier-syntax)) G2f48@identifier-syntax-macro (if (memv G3ec2@t '(time)) G2f40@time-macro (if (memv G3ec2@t '(delay)) G2f42@delay-macro (if (memv G3ec2@t '(assert)) G2f44@assert-macro (if (memv G3ec2@t '(endianness)) G2f46@endianness-macro (if (memv G3ec2@t '(guard)) G2f3c@guard-macro (if (memv G3ec2@t '(define-enumeration)) G2f3e@define-enumeration-macro (if (memv G3ec2@t '(trace-lambda)) G2f30@trace-lambda-macro (if (memv G3ec2@t '(trace-define)) G2f32@trace-define-macro (if (memv G3ec2@t '(trace-define-syntax)) G2f34@trace-define-syntax-macro (if (memv G3ec2@t '(trace-let-syntax)) G2f38@trace-let-syntax-macro (if (memv G3ec2@t '(trace-letrec-syntax)) G2f3a@trace-letrec-syntax-macro (if (memv G3ec2@t '(define-condition-type)) G2f64@define-condition-type-macro (if (memv G3ec2@t '(parameterize)) G2f68@parameterize-macro (if (memv G3ec2@t '(include-into)) G2f58@include-into-macro (if (memv G3ec2@t '(eol-style)) (lambda (G3ec4@x) (G2f80@symbol-macro G3ec4@x '(none lf cr crlf nel crnel ls))) (if (memv G3ec2@t '(error-handling-mode)) (lambda (G3ec6@x) (G2f80@symbol-macro G3ec6@x '(ignore raise replace))) (if (memv G3ec2@t '(buffer-mode)) (lambda (G3ec8@x) (G2f80@symbol-macro G3ec8@x '(none line block))) (if (memv G3ec2@t '(file-options)) G2f7e@file-options-macro (if (memv G3ec2@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f66@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3ec0@x)))))))))))))))))))))))))))))))))))))))) G3ec0@x) (error 'core-macro-transformer '"BUG: invalid macro" G3ec0@x))))) (set! G2f84@local-macro-transformer (lambda (G3eca@x) (car G3eca@x))) (set! G2f86@do-macro-call (lambda (G3ecc@transformer G3ecd@expr) ((lambda (G3ed0@out) (begin ((letrec ((G3ed2@f (lambda (G3ed4@x) (if (not (G2d37@stx? G3ed4@x)) (if (pair? G3ed4@x) (begin (G3ed2@f (car G3ed4@x)) (G3ed2@f (cdr G3ed4@x))) (if (vector? G3ed4@x) (vector-for-each G3ed2@f G3ed4@x) (if (symbol? G3ed4@x) (G305b@syntax-violation '#f '"raw symbol encountered in output of macro" G3ecd@expr G3ed4@x) (void)))) (void))))) G3ed2@f) G3ed0@out) (G2d59@add-mark (G2d4f@gen-mark) G3ed0@out G3ecd@expr))) (G3ecc@transformer (G2d59@add-mark G2d51@anti-mark G3ecd@expr '#f))))) (set! G2f88@chi-macro (lambda (G3ed6@p G3ed7@e) (G2f86@do-macro-call (G2f82@macro-transformer G3ed6@p) G3ed7@e))) (set! G2f8a@chi-local-macro (lambda (G3eda@p G3edb@e) (G2f86@do-macro-call (G2f84@local-macro-transformer G3eda@p) G3edb@e))) (set! G2f8c@chi-global-macro (lambda (G3ede@p G3edf@e) ((lambda (G3ee2@lib G3ee3@loc) (begin (G2b87@G2a2f@visit-library G3ee2@lib) ((lambda (G3ee6@x) ((lambda (G3ee8@transformer) (G2f86@do-macro-call G3ee8@transformer G3edf@e)) (if (procedure? G3ee6@x) G3ee6@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ee6@x)))) (symbol-value G3ee3@loc)))) (car G3ede@p) (cdr G3ede@p)))) (set! G2f8e@chi-expr* (lambda (G3eea@e* G3eeb@r G3eec@mr) (if (null? G3eea@e*) '() ((lambda (G3ef0@e) (cons G3ef0@e (G2f8e@chi-expr* (cdr G3eea@e*) G3eeb@r G3eec@mr))) (G2f92@chi-expr (car G3eea@e*) G3eeb@r G3eec@mr))))) (set! G2f90@chi-application (lambda (G3ef2@e G3ef3@r G3ef4@mr) ((lambda (G3ef8@t) ((lambda (G3efa@ls/false) (if G3efa@ls/false (apply (lambda (G3efc@rator G3efd@rands) ((lambda (G3f00@rator) (cons G3f00@rator (G2f8e@chi-expr* G3efd@rands G3ef3@r G3ef4@mr))) (G2f92@chi-expr G3efc@rator G3ef3@r G3ef4@mr))) G3efa@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3ef8@t))) (G2f6e@syntax-dispatch G3ef8@t '(any . each-any)))) G3ef2@e))) (set! G2f92@chi-expr (lambda (G3f02@e G3f03@r G3f04@mr) (call-with-values (lambda () (G2d97@syntax-type G3f02@e G3f03@r)) (lambda (G3f0b@G3f08 G3f0c@G3f09 G3f0d@G3f0a) ((lambda (G3f11@kwd G3f12@value G3f13@type) ((lambda (G3f17@t) (if (memv G3f17@t '(core-macro)) ((lambda (G3f19@transformer) (G3f19@transformer G3f02@e G3f03@r G3f04@mr)) (G2f7c@core-macro-transformer G3f12@value)) (if (memv G3f17@t '(global)) ((lambda (G3f1b@lib) ((lambda (G3f1d@loc) ((lambda () (begin ((G2fdb@inv-collector) G3f1b@lib) G3f1d@loc)))) (cdr G3f12@value))) (car G3f12@value)) (if (memv G3f17@t '(core-prim)) ((lambda (G3f1f@name) (list 'primitive G3f1f@name)) G3f12@value) (if (memv G3f17@t '(call)) (G2f90@chi-application G3f02@e G3f03@r G3f04@mr) (if (memv G3f17@t '(lexical)) ((lambda (G3f21@lex) G3f21@lex) (G2efa@lexical-var G3f12@value)) (if (memv G3f17@t '(global-macro global-macro!)) (G2f92@chi-expr (G2f8c@chi-global-macro G3f12@value G3f02@e) G3f03@r G3f04@mr) (if (memv G3f17@t '(local-macro local-macro!)) (G2f92@chi-expr (G2f8a@chi-local-macro G3f12@value G3f02@e) G3f03@r G3f04@mr) (if (memv G3f17@t '(macro macro!)) (G2f92@chi-expr (G2f88@chi-macro G3f12@value G3f02@e) G3f03@r G3f04@mr) (if (memv G3f17@t '(constant)) ((lambda (G3f23@datum) (list 'quote G3f23@datum)) G3f12@value) (if (memv G3f17@t '(set!)) (G2f94@chi-set! G3f02@e G3f03@r G3f04@mr) (if (memv G3f17@t '(begin)) ((lambda (G3f25@t) ((lambda (G3f27@ls/false) (if G3f27@ls/false (apply (lambda (G3f29@x G3f2a@x*) (G2ccc@G2c3d@build-sequence '#f (G2f8e@chi-expr* (cons G3f29@x G3f2a@x*) G3f03@r G3f04@mr))) G3f27@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3f25@t))) (G2f6e@syntax-dispatch G3f25@t '(_ any . each-any)))) G3f02@e) (if (memv G3f17@t '(let-syntax letrec-syntax)) ((lambda (G3f2d@t) ((lambda (G3f2f@ls/false) (if (and G3f2f@ls/false (apply (lambda (G3f31@xlhs* G3f32@xrhs* G3f33@xbody G3f34@xbody*) (if (not (G2d79@valid-bound-ids? G3f31@xlhs*)) (G305b@syntax-violation '#f '"invalid identifiers" G3f02@e) (void))) G3f2f@ls/false)) (apply (lambda (G3f39@xlhs* G3f3a@xrhs* G3f3b@xbody G3f3c@xbody*) ((lambda (G3f41@xlab*) ((lambda (G3f43@xrib) ((lambda (G3f45@xb*) ((lambda () (G2ccc@G2c3d@build-sequence '#f (G2f8e@chi-expr* (map (lambda (G3f47@x) (G2d5b@add-subst G3f43@xrib G3f47@x)) (cons G3f3b@xbody G3f3c@xbody*)) (append (map cons G3f41@xlab* G3f45@xb*) G3f03@r) (append (map cons G3f41@xlab* G3f45@xb*) G3f04@mr)))))) (map (lambda (G3f49@x) (G2daf@make-eval-transformer (G2fcd@expand-transformer (if (eq? G3f13@type 'let-syntax) G3f49@x (G2d5b@add-subst G3f43@xrib G3f49@x)) G3f04@mr))) G3f3a@xrhs*))) (G2d2a@make-full-rib G3f39@xlhs* G3f41@xlab*))) (map G2cef@gen-label G3f39@xlhs*))) G3f2f@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3f2d@t))) (G2f6e@syntax-dispatch G3f2d@t '(_ #(each (any any)) any . each-any)))) G3f02@e) (if (memv G3f17@t '(displaced-lexical)) (G305b@syntax-violation '#f '"identifier out of context" G3f02@e) (if (memv G3f17@t '(syntax)) (G305b@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3f02@e) (if (memv G3f17@t '(define define-syntax module import library)) (G305b@syntax-violation '#f (string-append ((lambda (G3f4b@t) (if (memv G3f4b@t '(define)) '"a definition" (if (memv G3f4b@t '(define-syntax)) '"a define-syntax" (if (memv G3f4b@t '(module)) '"a module definition" (if (memv G3f4b@t '(library)) '"a library definition" (if (memv G3f4b@t '(import)) '"an import declaration" (if (memv G3f4b@t '(export)) '"an export declaration" '"a non-expression"))))))) G3f13@type) '" was found where an expression was expected") G3f02@e) (if (memv G3f17@t '(mutable)) (G305b@syntax-violation '#f '"attempt to reference an unexportable variable" G3f02@e) (G305b@syntax-violation '#f '"invalid expression" G3f02@e)))))))))))))))))) G3f13@type)) G3f0d@G3f0a G3f0c@G3f09 G3f0b@G3f08))))) (set! G2f94@chi-set! (lambda (G3f4d@e G3f4e@r G3f4f@mr) ((lambda (G3f53@t) ((lambda (G3f55@ls/false) (if (and G3f55@ls/false (apply (lambda (G3f57@x G3f58@v) (G2d6f@id? G3f57@x)) G3f55@ls/false)) (apply (lambda (G3f5b@x G3f5c@v) (call-with-values (lambda () (G2d97@syntax-type G3f5b@x G3f4e@r)) (lambda (G3f62@G3f5f G3f63@G3f60 G3f64@G3f61) ((lambda (G3f68@kwd G3f69@value G3f6a@type) ((lambda (G3f6e@t) (if (memv G3f6e@t '(lexical)) (begin (G2efe@set-lexical-mutable! G3f69@value '#t) (list 'set! (G2efa@lexical-var G3f69@value) (G2f92@chi-expr G3f5c@v G3f4e@r G3f4f@mr))) (if (memv G3f6e@t '(core-prim)) (G305b@syntax-violation '#f '"cannot modify imported core primitive" G3f4d@e) (if (memv G3f6e@t '(global)) (G305b@syntax-violation '#f '"attempt to modify imported binding" G3f4d@e) (if (memv G3f6e@t '(global-macro!)) (G2f92@chi-expr (G2f8c@chi-global-macro G3f69@value G3f4d@e) G3f4e@r G3f4f@mr) (if (memv G3f6e@t '(local-macro!)) (G2f92@chi-expr (G2f8a@chi-local-macro G3f69@value G3f4d@e) G3f4e@r G3f4f@mr) (if (memv G3f6e@t '(mutable)) (G305b@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f4d@e) (G305b@syntax-violation '#f '"invalid syntax" G3f4d@e)))))))) G3f6a@type)) G3f64@G3f61 G3f63@G3f60 G3f62@G3f5f)))) G3f55@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3f53@t))) (G2f6e@syntax-dispatch G3f53@t '(_ any any)))) G3f4d@e))) (set! G2f96@verify-formals (lambda (G3f70@fmls G3f71@stx) ((lambda (G3f74@t) ((lambda (G3f76@ls/false) (if G3f76@ls/false (apply (lambda (G3f78@x*) (if (not (G2d79@valid-bound-ids? G3f78@x*)) (G2f28@invalid-fmls-error G3f71@stx G3f70@fmls) (void))) G3f76@ls/false) ((lambda (G3f7a@t) ((lambda (G3f7c@ls/false) (if G3f7c@ls/false (apply (lambda (G3f7e@x* G3f7f@x) (if (not (G2d79@valid-bound-ids? (cons G3f7f@x G3f7e@x*))) (G2f28@invalid-fmls-error G3f71@stx G3f70@fmls) (void))) G3f7c@ls/false) ((lambda (G3f82@t) ((lambda (G3f84@ls/false) (if G3f84@ls/false (apply (lambda () (G305b@syntax-violation '#f '"invalid syntax" G3f71@stx)) G3f84@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3f82@t))) (G2f6e@syntax-dispatch G3f82@t '_))) G3f7a@t))) (G2f6e@syntax-dispatch G3f7a@t '#(each+ any () any)))) G3f74@t))) (G2f6e@syntax-dispatch G3f74@t 'each-any))) G3f70@fmls))) (set! G2f98@chi-lambda-clause (lambda (G3f86@stx G3f87@fmls G3f88@body* G3f89@r G3f8a@mr) ((lambda (G3f90@t) ((lambda (G3f92@ls/false) (if G3f92@ls/false (apply (lambda (G3f94@x*) (begin (G2f96@verify-formals G3f87@fmls G3f86@stx) ((lambda (G3f96@lex* G3f97@lab*) (values G3f96@lex* (G2fa8@chi-internal (G2d5b@add-subst (G2d2a@make-full-rib G3f94@x* G3f97@lab*) G3f88@body*) (G2f02@add-lexicals G3f97@lab* G3f96@lex* G3f89@r) G3f8a@mr))) (map G2ceb@gen-lexical G3f94@x*) (map G2cef@gen-label G3f94@x*)))) G3f92@ls/false) ((lambda (G3f9a@t) ((lambda (G3f9c@ls/false) (if G3f9c@ls/false (apply (lambda (G3f9e@x* G3f9f@x) (begin (G2f96@verify-formals G3f87@fmls G3f86@stx) ((lambda (G3fa2@lex* G3fa3@lab* G3fa4@lex G3fa5@lab) (values (append G3fa2@lex* G3fa4@lex) (G2fa8@chi-internal (G2d5b@add-subst (G2d2a@make-full-rib (cons G3f9f@x G3f9e@x*) (cons G3fa5@lab G3fa3@lab*)) G3f88@body*) (G2f02@add-lexicals (cons G3fa5@lab G3fa3@lab*) (cons G3fa4@lex G3fa2@lex*) G3f89@r) G3f8a@mr))) (map G2ceb@gen-lexical G3f9e@x*) (map G2cef@gen-label G3f9e@x*) (G2ceb@gen-lexical G3f9f@x) (G2cef@gen-label G3f9f@x)))) G3f9c@ls/false) ((lambda (G3faa@t) ((lambda (G3fac@ls/false) (if G3fac@ls/false (apply (lambda () (G305b@syntax-violation '#f '"invalid syntax" G3f87@fmls)) G3fac@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G3faa@t))) (G2f6e@syntax-dispatch G3faa@t '_))) G3f9a@t))) (G2f6e@syntax-dispatch G3f9a@t '#(each+ any () any)))) G3f90@t))) (G2f6e@syntax-dispatch G3f90@t 'each-any))) G3f87@fmls))) (set! G2f9a@chi-lambda-clause* (lambda (G3fae@stx G3faf@fmls* G3fb0@body** G3fb1@r G3fb2@mr) (if (null? G3faf@fmls*) (values '() '()) (call-with-values (lambda () (G2f98@chi-lambda-clause G3fae@stx (car G3faf@fmls*) (car G3fb0@body**) G3fb1@r G3fb2@mr)) (lambda (G3fba@G3fb8 G3fbb@G3fb9) ((lambda (G3fbe@b G3fbf@a) (call-with-values (lambda () (G2f9a@chi-lambda-clause* G3fae@stx (cdr G3faf@fmls*) (cdr G3fb0@body**) G3fb1@r G3fb2@mr)) (lambda (G3fc4@G3fc2 G3fc5@G3fc3) ((lambda (G3fc8@b* G3fc9@a*) (values (cons G3fbf@a G3fc9@a*) (cons G3fbe@b G3fc8@b*))) G3fc5@G3fc3 G3fc4@G3fc2)))) G3fbb@G3fb9 G3fba@G3fb8)))))) (set! G2f9c@chi-defun (lambda (G3fcc@x G3fcd@r G3fce@mr) ((lambda (G3fd2@fmls G3fd3@body*) (call-with-values (lambda () (G2f98@chi-lambda-clause G3fd2@fmls G3fd2@fmls G3fd3@body* G3fcd@r G3fce@mr)) (lambda (G3fd8@G3fd6 G3fd9@G3fd7) ((lambda (G3fdc@body G3fdd@fmls) (G2cc9@G2c07@build-lambda '#f G3fdd@fmls G3fdc@body)) G3fd9@G3fd7 G3fd8@G3fd6)))) (car G3fcc@x) (cdr G3fcc@x)))) (set! G2f9e@chi-rhs (lambda (G3fe0@rhs G3fe1@r G3fe2@mr) ((lambda (G3fe6@t) (if (memv G3fe6@t '(defun)) (G2f9c@chi-defun (cdr G3fe0@rhs) G3fe1@r G3fe2@mr) (if (memv G3fe6@t '(expr)) ((lambda (G3fe8@expr) (G2f92@chi-expr G3fe8@expr G3fe1@r G3fe2@mr)) (cdr G3fe0@rhs)) (if (memv G3fe6@t '(top-expr)) ((lambda (G3fea@expr) (G2ccc@G2c3d@build-sequence '#f (list (G2f92@chi-expr G3fea@expr G3fe1@r G3fe2@mr) (G2ccd@G2c3f@build-void)))) (cdr G3fe0@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fe0@rhs))))) (car G3fe0@rhs)))) (set! G2fa0@expand-interaction-rhs*/init* (lambda (G3fec@lhs* G3fed@rhs* G3fee@init* G3fef@r G3ff0@mr) ((letrec ((G3ff6@f (lambda (G3ff8@lhs* G3ff9@rhs*) (if (null? G3ff8@lhs*) (map (lambda (G3ffc@x) (G2f92@chi-expr G3ffc@x G3fef@r G3ff0@mr)) G3fee@init*) ((lambda (G3ffe@lhs G3fff@rhs) ((lambda (G4002@t) (if (memv G4002@t '(defun)) ((lambda (G4004@rhs) (cons (list 'set! G3ffe@lhs G4004@rhs) (G3ff6@f (cdr G3ff8@lhs*) (cdr G3ff9@rhs*)))) (G2f9c@chi-defun (cdr G3fff@rhs) G3fef@r G3ff0@mr)) (if (memv G4002@t '(expr)) ((lambda (G4006@rhs) (cons (list 'set! G3ffe@lhs G4006@rhs) (G3ff6@f (cdr G3ff8@lhs*) (cdr G3ff9@rhs*)))) (G2f92@chi-expr (cdr G3fff@rhs) G3fef@r G3ff0@mr)) (if (memv G4002@t '(top-expr)) ((lambda (G4008@e) (cons G4008@e (G3ff6@f (cdr G3ff8@lhs*) (cdr G3ff9@rhs*)))) (G2f92@chi-expr (cdr G3fff@rhs) G3fef@r G3ff0@mr)) (error 'expand-interaction '"invallid" G3fff@rhs))))) (car G3fff@rhs))) (car G3ff8@lhs*) (car G3ff9@rhs*)))))) G3ff6@f) G3fec@lhs* G3fed@rhs*))) (set! G2fa2@chi-rhs* (lambda (G400a@rhs* G400b@r G400c@mr) ((letrec ((G4010@f (lambda (G4012@ls) (if (null? G4012@ls) '() ((lambda (G4014@a) (cons G4014@a (G4010@f (cdr G4012@ls)))) (G2f9e@chi-rhs (car G4012@ls) G400b@r G400c@mr)))))) G4010@f) G400a@rhs*))) (set! G2fa4@find-bound=? (lambda (G4016@x G4017@lhs* G4018@rhs*) (if (null? G4017@lhs*) '#f (if (G2d75@bound-id=? G4016@x (car G4017@lhs*)) (car G4018@rhs*) (G2fa4@find-bound=? G4016@x (cdr G4017@lhs*) (cdr G4018@rhs*)))))) (set! G2fa6@find-dups (lambda (G401c@ls) ((letrec ((G401e@f (lambda (G4020@ls G4021@dups) (if (null? G4020@ls) G4021@dups ((lambda (G4024@t) (if G4024@t ((lambda (G4026@x) (G401e@f (cdr G4020@ls) (cons (list (car G4020@ls) G4026@x) G4021@dups))) G4024@t) (G401e@f (cdr G4020@ls) G4021@dups))) (G2fa4@find-bound=? (car G4020@ls) (cdr G4020@ls) (cdr G4020@ls))))))) G401e@f) G401c@ls '()))) (set! G2fa8@chi-internal (lambda (G4028@e* G4029@r G402a@mr) ((lambda (G402e@rib) (call-with-values (lambda () (G2fcb@chi-body* (map (lambda (G4038@x) (G2d5b@add-subst G402e@rib G4038@x)) (G2d6d@syntax->list G4028@e*)) G4029@r G402a@mr '() '() '() '() '() G402e@rib '#f)) (lambda (G403a@G4030 G403b@G4031 G403c@G4032 G403d@G4033 G403e@G4034 G403f@G4035 G4040@G4036 G4041@G4037) ((lambda (G404a@_exp* G404b@kwd* G404c@mod** G404d@rhs* G404e@lex* G404f@mr G4050@r G4051@e*) (begin (if (null? G4051@e*) (G305b@syntax-violation '#f '"no expression in body" G4051@e*) (void)) ((lambda (G405a@init*) ((lambda (G405c@rhs*) ((lambda () (G2ccf@G2c43@build-letrec* '#f (reverse G404e@lex*) (reverse G405c@rhs*) (G2ccc@G2c3d@build-sequence '#f G405a@init*))))) (G2fa2@chi-rhs* G404d@rhs* G4050@r G404f@mr))) (G2f8e@chi-expr* (append (apply append (reverse G404c@mod**)) G4051@e*) G4050@r G404f@mr)))) G4041@G4037 G4040@G4036 G403f@G4035 G403e@G4034 G403d@G4033 G403c@G4032 G403b@G4031 G403a@G4030)))) (G2d1a@make-empty-rib)))) (set! G2faa@parse-module (lambda (G405e@e) ((lambda (G4060@t) ((lambda (G4062@ls/false) (if G4062@ls/false (apply (lambda (G4064@export* G4065@b*) (begin (if (not (for-all G2d6f@id? G4064@export*)) (G305b@syntax-violation '#f '"module exports must be identifiers" G405e@e) (void)) (values '#f (list->vector G4064@export*) G4065@b*))) G4062@ls/false) ((lambda (G4068@t) ((lambda (G406a@ls/false) (if G406a@ls/false (apply (lambda (G406c@name G406d@export* G406e@b*) (begin (if (not (G2d6f@id? G406c@name)) (G305b@syntax-violation '#f '"module name must be an identifier" G405e@e) (void)) (if (not (for-all G2d6f@id? G406d@export*)) (G305b@syntax-violation '#f '"module exports must be identifiers" G405e@e) (void)) (values G406c@name (list->vector G406d@export*) G406e@b*))) G406a@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G4068@t))) (G2f6e@syntax-dispatch G4068@t '(_ any each-any . each-any)))) G4060@t))) (G2f6e@syntax-dispatch G4060@t '(_ each-any . each-any)))) G405e@e))) (set! G2fb0@G2fab (make-record-type-descriptor 'module-interface '#f 'G2fae '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2fb2@G2fad '#f) (set! G2fb4@G2fac (make-record-constructor-descriptor G2fb0@G2fab '#f G2fb2@G2fad)) (set! G2fb7@module-interface? (record-predicate G2fb0@G2fab)) (set! G2fb9@make-module-interface (record-constructor G2fb4@G2fac)) (set! G2fbb@module-interface-first-mark (record-accessor G2fb0@G2fab '0)) (set! G2fbd@module-interface-exp-id-vec (record-accessor G2fb0@G2fab '1)) (set! G2fbf@module-interface-exp-lab-vec (record-accessor G2fb0@G2fab '2)) (set! G2fc1@set-module-interface-first-mark! (record-mutator G2fb0@G2fab '0)) (set! G2fc3@set-module-interface-exp-id-vec! (record-mutator G2fb0@G2fab '1)) (set! G2fc5@set-module-interface-exp-lab-vec! (record-mutator G2fb0@G2fab '2)) (set! G2fc7@module-interface-exp-id* (lambda (G4072@iface G4073@id) ((lambda (G4077@diff-marks) (begin (set! G4077@diff-marks (lambda (G407e@ls G407f@x) (begin (if (null? G407e@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4082@a) (if (eq? G4082@a G407f@x) '() (cons G4082@a (G4077@diff-marks (cdr G407e@ls) G407f@x)))) (car G407e@ls))))) ((lambda (G4078@diff G4079@id-vec) (if (null? G4078@diff) G4079@id-vec (vector-map (lambda (G407c@x) (G2d39@make-stx (G2d3b@stx-expr G407c@x) (append G4078@diff (G2d3d@stx-mark* G407c@x)) '() '())) G4079@id-vec))) (G4077@diff-marks (G2d3d@stx-mark* G4073@id) (G2fbb@module-interface-first-mark G4072@iface)) (G2fbd@module-interface-exp-id-vec G4072@iface)))) '#f))) (set! G2fc9@chi-internal-module (lambda (G4084@e G4085@r G4086@mr G4087@lex* G4088@rhs* G4089@mod** G408a@kwd*) (call-with-values (lambda () (G2faa@parse-module G4084@e)) (lambda (G4095@G4092 G4096@G4093 G4097@G4094) ((lambda (G409b@e* G409c@exp-id* G409d@name) ((lambda (G40a1@rib) ((lambda (G40a3@e*) ((lambda () (call-with-values (lambda () (G2fcb@chi-body* G40a3@e* G4085@r G4086@mr G4087@lex* G4088@rhs* G4089@mod** G408a@kwd* '() G40a1@rib '#f)) (lambda (G40ad@G40a5 G40ae@G40a6 G40af@G40a7 G40b0@G40a8 G40b1@G40a9 G40b2@G40aa G40b3@G40ab G40b4@G40ac) ((lambda (G40bd@_exp* G40be@kwd* G40bf@mod** G40c0@rhs* G40c1@lex* G40c2@mr G40c3@r G40c4@e*) ((lambda (G40cd@exp-lab* G40ce@mod**) (if (not G409d@name) (values G40c1@lex* G40c0@rhs* G409c@exp-id* G40cd@exp-lab* G40c3@r G40c2@mr G40ce@mod** G40be@kwd*) ((lambda (G40d1@lab G40d2@iface) (values G40c1@lex* G40c0@rhs* (vector G409d@name) (vector G40d1@lab) (cons (cons G40d1@lab (cons '$module G40d2@iface)) G40c3@r) (cons (cons G40d1@lab (cons '$module G40d2@iface)) G40c2@mr) G40ce@mod** G40be@kwd*)) (G2cef@gen-label 'module) (G2fb9@make-module-interface (car (G2d3d@stx-mark* G409d@name)) (vector-map (lambda (G40d5@x) (G2d39@make-stx (G2d3b@stx-expr G40d5@x) (G2d3d@stx-mark* G40d5@x) '() '())) G409c@exp-id*) G40cd@exp-lab*)))) (vector-map (lambda (G40d7@x) (or (G2d89@id->label (G2d39@make-stx (G2d71@id->sym G40d7@x) (G2d3d@stx-mark* G40d7@x) (list G40a1@rib) '())) (G305b@syntax-violation '#f '"cannot find module export" G40d7@x))) G409c@exp-id*) (cons G40c4@e* G40bf@mod**))) G40b4@G40ac G40b3@G40ab G40b2@G40aa G40b1@G40a9 G40b0@G40a8 G40af@G40a7 G40ae@G40a6 G40ad@G40a5)))))) (map (lambda (G40d9@x) (G2d5b@add-subst G40a1@rib G40d9@x)) (G2d6d@syntax->list G409b@e*)))) (G2d1a@make-empty-rib))) G4097@G4094 G4096@G4093 G4095@G4092))))) (set! G2fcb@chi-body* (lambda (G40db@e* G40dc@r G40dd@mr G40de@lex* G40df@rhs* G40e0@mod** G40e1@kwd* G40e2@exp* G40e3@rib G40e4@top?) (if (null? G40db@e*) (values G40db@e* G40dc@r G40dd@mr G40de@lex* G40df@rhs* G40e0@mod** G40e1@kwd* G40e2@exp*) ((lambda (G40ef@e) (call-with-values (lambda () (G2d97@syntax-type G40ef@e G40dc@r)) (lambda (G40f4@G40f1 G40f5@G40f2 G40f6@G40f3) ((lambda (G40fa@kwd G40fb@value G40fc@type) ((lambda (G4100@kwd*) ((lambda (G4102@t) (if (memv G4102@t '(define)) (call-with-values (lambda () (G2ef2@parse-define G40ef@e)) (lambda (G4106@G4104 G4107@G4105) ((lambda (G410a@rhs G410b@id) (begin (if (G2d7d@bound-id-member? G410b@id G4100@kwd*) (G305b@syntax-violation '#f '"cannot redefine keyword" G40ef@e) (void)) (call-with-values (lambda () (G2cf3@gen-define-label+loc G410b@id G40e3@rib)) (lambda (G4110@G410e G4111@G410f) ((lambda (G4114@lex G4115@lab) (begin (G2d20@extend-rib! G40e3@rib G410b@id G4115@lab) (G2fcb@chi-body* (cdr G40db@e*) (G2f00@add-lexical G4115@lab G4114@lex G40dc@r) G40dd@mr (cons G4114@lex G40de@lex*) (cons G410a@rhs G40df@rhs*) G40e0@mod** G4100@kwd* G40e2@exp* G40e3@rib G40e4@top?))) G4111@G410f G4110@G410e))))) G4107@G4105 G4106@G4104))) (if (memv G4102@t '(define-syntax)) (call-with-values (lambda () (G2ef4@parse-define-syntax G40ef@e)) (lambda (G411a@G4118 G411b@G4119) ((lambda (G411e@rhs G411f@id) (begin (if (G2d7d@bound-id-member? G411f@id G4100@kwd*) (G305b@syntax-violation '#f '"cannot redefine keyword" G40ef@e) (void)) ((lambda (G4122@lab G4123@expanded-rhs) (begin (G2d20@extend-rib! G40e3@rib G411f@id G4122@lab) ((lambda (G4126@b) (G2fcb@chi-body* (cdr G40db@e*) (cons (cons G4122@lab G4126@b) G40dc@r) (cons (cons G4122@lab G4126@b) G40dd@mr) G40de@lex* G40df@rhs* G40e0@mod** G4100@kwd* G40e2@exp* G40e3@rib G40e4@top?)) (G2daf@make-eval-transformer G4123@expanded-rhs)))) (G2cf5@gen-define-label G411f@id G40e3@rib) (G2fcd@expand-transformer G411e@rhs G40dd@mr)))) G411b@G4119 G411a@G4118))) (if (memv G4102@t '(let-syntax letrec-syntax)) ((lambda (G4128@t) ((lambda (G412a@ls/false) (if (and G412a@ls/false (apply (lambda (G412c@xlhs* G412d@xrhs* G412e@xbody*) (if (not (G2d79@valid-bound-ids? G412c@xlhs*)) (G305b@syntax-violation '#f '"invalid identifiers" G40ef@e) (void))) G412a@ls/false)) (apply (lambda (G4132@xlhs* G4133@xrhs* G4134@xbody*) ((lambda (G4138@xlab*) ((lambda (G413a@xrib) ((lambda (G413c@xb*) ((lambda () (G2fcb@chi-body* (append (map (lambda (G413e@x) (G2d5b@add-subst G413a@xrib G413e@x)) G4134@xbody*) (cdr G40db@e*)) (append (map cons G4138@xlab* G413c@xb*) G40dc@r) (append (map cons G4138@xlab* G413c@xb*) G40dd@mr) G40de@lex* G40df@rhs* G40e0@mod** G4100@kwd* G40e2@exp* G40e3@rib G40e4@top?)))) (map (lambda (G4140@x) (G2daf@make-eval-transformer (G2fcd@expand-transformer (if (eq? G40fc@type 'let-syntax) G4140@x (G2d5b@add-subst G413a@xrib G4140@x)) G40dd@mr))) G4133@xrhs*))) (G2d2a@make-full-rib G4132@xlhs* G4138@xlab*))) (map G2cef@gen-label G4132@xlhs*))) G412a@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G4128@t))) (G2f6e@syntax-dispatch G4128@t '(_ #(each (any any)) . each-any)))) G40ef@e) (if (memv G4102@t '(begin)) ((lambda (G4142@t) ((lambda (G4144@ls/false) (if G4144@ls/false (apply (lambda (G4146@x*) (G2fcb@chi-body* (append G4146@x* (cdr G40db@e*)) G40dc@r G40dd@mr G40de@lex* G40df@rhs* G40e0@mod** G4100@kwd* G40e2@exp* G40e3@rib G40e4@top?)) G4144@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G4142@t))) (G2f6e@syntax-dispatch G4142@t '(_ . each-any)))) G40ef@e) (if (memv G4102@t '(global-macro global-macro!)) (G2fcb@chi-body* (cons (G2d5b@add-subst G40e3@rib (G2f8c@chi-global-macro G40fb@value G40ef@e)) (cdr G40db@e*)) G40dc@r G40dd@mr G40de@lex* G40df@rhs* G40e0@mod** G4100@kwd* G40e2@exp* G40e3@rib G40e4@top?) (if (memv G4102@t '(local-macro local-macro!)) (G2fcb@chi-body* (cons (G2d5b@add-subst G40e3@rib (G2f8a@chi-local-macro G40fb@value G40ef@e)) (cdr G40db@e*)) G40dc@r G40dd@mr G40de@lex* G40df@rhs* G40e0@mod** G4100@kwd* G40e2@exp* G40e3@rib G40e4@top?) (if (memv G4102@t '(macro macro!)) (G2fcb@chi-body* (cons (G2d5b@add-subst G40e3@rib (G2f88@chi-macro G40fb@value G40ef@e)) (cdr G40db@e*)) G40dc@r G40dd@mr G40de@lex* G40df@rhs* G40e0@mod** G4100@kwd* G40e2@exp* G40e3@rib G40e4@top?) (if (memv G4102@t '(module)) (call-with-values (lambda () (G2fc9@chi-internal-module G40ef@e G40dc@r G40dd@mr G40de@lex* G40df@rhs* G40e0@mod** G4100@kwd*)) (lambda (G4150@G4148 G4151@G4149 G4152@G414a G4153@G414b G4154@G414c G4155@G414d G4156@G414e G4157@G414f) ((lambda (G4160@kwd* G4161@mod** G4162@mr G4163@r G4164@m-exp-lab* G4165@m-exp-id* G4166@rhs* G4167@lex*) (begin (vector-for-each (lambda (G4170@id G4171@lab) (G2d20@extend-rib! G40e3@rib G4170@id G4171@lab)) G4165@m-exp-id* G4164@m-exp-lab*) (G2fcb@chi-body* (cdr G40db@e*) G4163@r G4162@mr G4167@lex* G4166@rhs* G4161@mod** G4160@kwd* G40e2@exp* G40e3@rib G40e4@top?))) G4157@G414f G4156@G414e G4155@G414d G4154@G414c G4153@G414b G4152@G414a G4151@G4149 G4150@G4148))) (if (memv G4102@t '(library)) (begin (G303b@library-expander (G2d85@stx->datum G40ef@e)) (G2fcb@chi-body* (cdr G40db@e*) G40dc@r G40dd@mr G40de@lex* G40df@rhs* G40e0@mod** G4100@kwd* G40e2@exp* G40e3@rib G40e4@top?)) (if (memv G4102@t '(export)) ((lambda (G4174@t) ((lambda (G4176@ls/false) (if G4176@ls/false (apply (lambda (G4178@exp-decl*) (G2fcb@chi-body* (cdr G40db@e*) G40dc@r G40dd@mr G40de@lex* G40df@rhs* G40e0@mod** G4100@kwd* (append G4178@exp-decl* G40e2@exp*) G40e3@rib G40e4@top?)) G4176@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G4174@t))) (G2f6e@syntax-dispatch G4174@t '(_ . each-any)))) G40ef@e) (if (memv G4102@t '(import)) ((lambda () ((lambda (G417b@module-import? G417d@module-import G417f@library-import) (begin (set! G417b@module-import? (lambda (G41c7@e) ((lambda (G41c9@t) ((lambda (G41cb@ls/false) (if (and G41cb@ls/false (apply (lambda (G41cd@id) (G2d6f@id? G41cd@id)) G41cb@ls/false)) (apply (lambda (G41cf@id) '#t) G41cb@ls/false) ((lambda (G41d1@t) ((lambda (G41d3@ls/false) (if G41d3@ls/false (apply (lambda (G41d5@imp*) '#f) G41d3@ls/false) ((lambda (G41d7@t) ((lambda (G41d9@ls/false) (if G41d9@ls/false (apply (lambda () (G305b@syntax-violation '#f '"malformed import form" G41c7@e)) G41d9@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G41d7@t))) (G2f6e@syntax-dispatch G41d7@t '_))) G41d1@t))) (G2f6e@syntax-dispatch G41d1@t '(_ . each-any)))) G41c9@t))) (G2f6e@syntax-dispatch G41c9@t '(_ any)))) G41c7@e))) (set! G417d@module-import (lambda (G41a8@e G41a9@r) ((lambda (G41ac@t) ((lambda (G41ae@ls/false) (if (and G41ae@ls/false (apply (lambda (G41b0@id) (G2d6f@id? G41b0@id)) G41ae@ls/false)) (apply (lambda (G41b2@id) (call-with-values (lambda () (G2d97@syntax-type G41b2@id G41a9@r)) (lambda (G41b7@G41b4 G41b8@G41b5 G41b9@G41b6) ((lambda (G41bd@kwd G41be@value G41bf@type) ((lambda (G41c3@t) (if (memv G41c3@t '($module)) ((lambda (G41c5@iface) (values (G2fc7@module-interface-exp-id* G41c5@iface G41b2@id) (G2fbf@module-interface-exp-lab-vec G41c5@iface))) G41be@value) (G305b@syntax-violation '#f '"invalid import" G41a8@e))) G41bf@type)) G41b9@G41b6 G41b8@G41b5 G41b7@G41b4)))) G41ae@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G41ac@t))) (G2f6e@syntax-dispatch G41ac@t '(_ any)))) G41a8@e))) (set! G417f@library-import (lambda (G418e@e) ((lambda (G4190@t) ((lambda (G4192@ls/false) (if G4192@ls/false (apply (lambda (G4194@ctxt G4195@imp*) (call-with-values (lambda () (G2fd5@parse-import-spec* (G3061@syntax->datum G4195@imp*))) (lambda (G419a@G4198 G419b@G4199) ((lambda (G419e@subst-labels G419f@subst-names) (values (vector-map (lambda (G41a2@name) (G2d4d@datum->stx G4194@ctxt G41a2@name)) G419f@subst-names) G419e@subst-labels)) G419b@G4199 G419a@G4198)))) G4192@ls/false) ((lambda (G41a4@t) ((lambda (G41a6@ls/false) (if G41a6@ls/false (apply (lambda () (G305b@syntax-violation '#f '"invalid import form" G418e@e)) G41a6@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G41a4@t))) (G2f6e@syntax-dispatch G41a4@t '_))) G4190@t))) (G2f6e@syntax-dispatch G4190@t '(any . each-any)))) G418e@e))) (begin (call-with-values (lambda () (if (G417b@module-import? G40ef@e) (G417d@module-import G40ef@e G40dc@r) (G417f@library-import G40ef@e))) (lambda (G4182@G4180 G4183@G4181) ((lambda (G4186@lab* G4187@id*) (vector-for-each (lambda (G418a@id G418b@lab) (G2d20@extend-rib! G40e3@rib G418a@id G418b@lab)) G4187@id* G4186@lab*)) G4183@G4181 G4182@G4180))) (G2fcb@chi-body* (cdr G40db@e*) G40dc@r G40dd@mr G40de@lex* G40df@rhs* G40e0@mod** G4100@kwd* G40e2@exp* G40e3@rib G40e4@top?)))) '#f '#f '#f))) (if G40e4@top? (G2fcb@chi-body* (cdr G40db@e*) G40dc@r G40dd@mr (cons (G2ceb@gen-lexical 'dummy) G40de@lex*) (cons (cons 'top-expr G40ef@e) G40df@rhs*) G40e0@mod** G4100@kwd* G40e2@exp* G40e3@rib G40e4@top?) (values G40db@e* G40dc@r G40dd@mr G40de@lex* G40df@rhs* G40e0@mod** G4100@kwd* G40e2@exp*)))))))))))))) G40fc@type)) (if (G2d6f@id? G40fa@kwd) (cons G40fa@kwd G40e1@kwd*) G40e1@kwd*))) G40f6@G40f3 G40f5@G40f2 G40f4@G40f1)))) (car G40db@e*))))) (set! G2fcd@expand-transformer (lambda (G41db@expr G41dc@r) ((lambda (G41df@rtc) ((lambda (G41e1@expanded-rhs) (begin (for-each ((lambda (G41e3@mark-visit) (lambda (G41e5@x) (begin (G2b86@G2a2d@invoke-library G41e5@x) (G41e3@mark-visit G41e5@x)))) (G2fdd@vis-collector)) (G41df@rtc)) G41e1@expanded-rhs)) ((lambda (G41eb@G41e7 G41ec@G41e8 G41ed@G41e9 G41ee@G41ea) ((lambda (G41f3@swap) (dynamic-wind G41f3@swap (lambda () (G2f92@chi-expr G41db@expr G41dc@r G41dc@r)) G41f3@swap)) (lambda () (begin ((lambda (G41f5@t) (begin (G41eb@G41e7 G41ed@G41e9) (set! G41ed@G41e9 G41f5@t))) (G41eb@G41e7)) ((lambda (G41f7@t) (begin (G41ec@G41e8 G41ee@G41ea) (set! G41ee@G41ea G41f7@t))) (G41ec@G41e8)))))) G2fdb@inv-collector G2fdd@vis-collector G41df@rtc (lambda (G41f9@x) (values))))) (G2fd9@make-collector)))) (set! G2fcf@parse-exports (lambda (G41fb@exp*) ((letrec ((G41fd@f (lambda (G41ff@exp* G4200@int* G4201@ext*) (if (null? G41ff@exp*) (begin (if (not (G2d79@valid-bound-ids? G4201@ext*)) (G305b@syntax-violation 'export '"invalid exports" (G2fa6@find-dups G4201@ext*)) (void)) (values (map G3061@syntax->datum G4201@ext*) G4200@int*)) ((lambda (G4205@t) ((lambda (G4207@ls/false) (if G4207@ls/false (apply (lambda (G4209@rename G420a@i* G420b@e*) (begin (if (not (and (eq? (G3061@syntax->datum G4209@rename) 'rename) (for-all G2d6f@id? G420a@i*) (for-all G2d6f@id? G420b@e*))) (G305b@syntax-violation 'export '"invalid export specifier" (car G41ff@exp*)) (void)) (G41fd@f (cdr G41ff@exp*) (append G420a@i* G4200@int*) (append G420b@e* G4201@ext*)))) G4207@ls/false) ((lambda (G420f@t) ((lambda (G4211@ls/false) (if G4211@ls/false (apply (lambda (G4213@ie) (begin (if (not (G2d6f@id? G4213@ie)) (G305b@syntax-violation 'export '"invalid export" G4213@ie) (void)) (G41fd@f (cdr G41ff@exp*) (cons G4213@ie G4200@int*) (cons G4213@ie G4201@ext*)))) G4211@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G420f@t))) (G2f6e@syntax-dispatch G420f@t 'any))) G4205@t))) (G2f6e@syntax-dispatch G4205@t '(any . #(each (any any)))))) (car G41ff@exp*)))))) G41fd@f) G41fb@exp* '() '()))) (set! G2fd1@parse-library-name (lambda (G4215@spec) ((lambda (G4218@parse) (begin (set! G4218@parse (lambda (G4223@x) ((lambda (G4225@t) ((lambda (G4227@ls/false) (if (and G4227@ls/false (apply (lambda (G4229@v*) (for-all (lambda (G422b@x) ((lambda (G422d@x) (and (integer? G422d@x) (exact? G422d@x))) (G3061@syntax->datum G422b@x))) G4229@v*)) G4227@ls/false)) (apply (lambda (G422f@v*) (values '() (map G3061@syntax->datum G422f@v*))) G4227@ls/false) ((lambda (G4231@t) ((lambda (G4233@ls/false) (if (and G4233@ls/false (apply (lambda (G4235@x G4236@rest) (symbol? (G3061@syntax->datum G4235@x))) G4233@ls/false)) (apply (lambda (G4239@x G423a@rest) (call-with-values (lambda () (G4218@parse G423a@rest)) (lambda (G423f@G423d G4240@G423e) ((lambda (G4243@v* G4244@x*) (values (cons (G3061@syntax->datum G4239@x) G4244@x*) G4243@v*)) G4240@G423e G423f@G423d)))) G4233@ls/false) ((lambda (G4247@t) ((lambda (G4249@ls/false) (if G4249@ls/false (apply (lambda () (values '() '())) G4249@ls/false) ((lambda (G424b@t) ((lambda (G424d@ls/false) (if G424d@ls/false (apply (lambda () (G305b@syntax-violation '#f '"invalid library name" G4215@spec)) G424d@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G424b@t))) (G2f6e@syntax-dispatch G424b@t '_))) G4247@t))) (G2f6e@syntax-dispatch G4247@t '()))) G4231@t))) (G2f6e@syntax-dispatch G4231@t '(any . any)))) G4225@t))) (G2f6e@syntax-dispatch G4225@t '(each-any)))) G4223@x))) (call-with-values (lambda () (G4218@parse G4215@spec)) (lambda (G421b@G4219 G421c@G421a) ((lambda (G421f@ver* G4220@name*) (begin (if (null? G4220@name*) (G305b@syntax-violation '#f '"empty library name" G4215@spec) (void)) (values G4220@name* G421f@ver*))) G421c@G421a G421b@G4219))))) '#f))) (set! G2fd3@parse-library (lambda (G424f@e) ((lambda (G4251@t) ((lambda (G4253@ls/false) (if (and G4253@ls/false (apply (lambda (G4255@library G4256@name* G4257@export G4258@exp* G4259@import G425a@imp* G425b@b*) (and (eq? (G3061@syntax->datum G4257@export) 'export) (eq? (G3061@syntax->datum G4259@import) 'import) (eq? (G3061@syntax->datum G4255@library) 'library))) G4253@ls/false)) (apply (lambda (G4263@library G4264@name* G4265@export G4266@exp* G4267@import G4268@imp* G4269@b*) (values G4264@name* G4266@exp* G4268@imp* G4269@b*)) G4253@ls/false) ((lambda (G4271@t) ((lambda (G4273@ls/false) (if G4273@ls/false (apply (lambda () (G305b@syntax-violation '#f '"malformed library" G424f@e)) G4273@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G4271@t))) (G2f6e@syntax-dispatch G4271@t '_))) G4251@t))) (G2f6e@syntax-dispatch G4251@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G424f@e))) (set! G2fd5@parse-import-spec* ((lambda () ((lambda (G4276@idsyn? G4278@dup-error G427a@merge-substs G427c@exclude* G427e@find* G4280@rem* G4282@remove-dups G4284@parse-library-name G4286@import-library G4288@get-import G428a@add-imports!) (begin (set! G4276@idsyn? (lambda (G4475@x) (symbol? (G3061@syntax->datum G4475@x)))) (set! G4278@dup-error (lambda (G4473@name) (G305b@syntax-violation 'import '"two imports with different bindings" G4473@name))) (set! G427a@merge-substs (lambda (G4461@s G4462@subst) ((lambda (G4466@insert-to-subst) (begin (set! G4466@insert-to-subst (lambda (G4467@a G4468@subst) ((lambda (G446b@name G446c@label) ((lambda (G446f@t) (if G446f@t ((lambda (G4471@x) (if (eq? (cdr G4471@x) G446c@label) G4468@subst (G4278@dup-error G446b@name))) G446f@t) (cons G4467@a G4468@subst))) (assq G446b@name G4468@subst))) (car G4467@a) (cdr G4467@a)))) (if (null? G4461@s) G4462@subst (G4466@insert-to-subst (car G4461@s) (G427a@merge-substs (cdr G4461@s) G4462@subst))))) '#f))) (set! G427c@exclude* (lambda (G4437@sym* G4438@subst) ((lambda (G443c@exclude) (begin (set! G443c@exclude (lambda (G4451@sym G4452@subst) (if (null? G4452@subst) (G305b@syntax-violation 'import '"cannot rename unbound identifier" G4451@sym) (if (eq? G4451@sym (caar G4452@subst)) (values (cdar G4452@subst) (cdr G4452@subst)) ((lambda (G4455@a) (call-with-values (lambda () (G443c@exclude G4451@sym (cdr G4452@subst))) (lambda (G4459@G4457 G445a@G4458) ((lambda (G445d@subst G445e@old) (values G445e@old (cons G4455@a G445d@subst))) G445a@G4458 G4459@G4457)))) (car G4452@subst)))))) (if (null? G4437@sym*) (values '() G4438@subst) (call-with-values (lambda () (G443c@exclude (car G4437@sym*) G4438@subst)) (lambda (G443f@G443d G4440@G443e) ((lambda (G4443@subst G4444@old) (call-with-values (lambda () (G427c@exclude* (cdr G4437@sym*) G4443@subst)) (lambda (G4449@G4447 G444a@G4448) ((lambda (G444d@subst G444e@old*) (values (cons G4444@old G444e@old*) G444d@subst)) G444a@G4448 G4449@G4447)))) G4440@G443e G443f@G443d)))))) '#f))) (set! G427e@find* (lambda (G442f@sym* G4430@subst) (map (lambda (G4433@x) ((lambda (G4435@t) (if G4435@t (cdr G4435@t) (G305b@syntax-violation 'import '"cannot find identifier" G4433@x))) (assq G4433@x G4430@subst))) G442f@sym*))) (set! G4280@rem* (lambda (G4427@sym* G4428@subst) ((letrec ((G442b@f (lambda (G442d@subst) (if (null? G442d@subst) '() (if (memq (caar G442d@subst) G4427@sym*) (G442b@f (cdr G442d@subst)) (cons (car G442d@subst) (G442b@f (cdr G442d@subst)))))))) G442b@f) G4428@subst))) (set! G4282@remove-dups (lambda (G4425@ls) (if (null? G4425@ls) '() (if (memq (car G4425@ls) (cdr G4425@ls)) (G4282@remove-dups (cdr G4425@ls)) (cons (car G4425@ls) (G4282@remove-dups (cdr G4425@ls))))))) (set! G4284@parse-library-name (lambda (G433f@spec) ((lambda (G4342@subversion? G4344@subversion-pred G4346@version-pred) (begin (set! G4342@subversion? (lambda (G4421@x) ((lambda (G4423@x) (and (integer? G4423@x) (exact? G4423@x) (>= G4423@x '0))) (G3061@syntax->datum G4421@x)))) (set! G4344@subversion-pred (lambda (G43c1@x*) ((lambda (G43c3@t) ((lambda (G43c5@ls/false) (if (and G43c5@ls/false (apply (lambda (G43c7@n) (G4342@subversion? G43c7@n)) G43c5@ls/false)) (apply (lambda (G43c9@n) (lambda (G43cb@x) (= G43cb@x (G3061@syntax->datum G43c9@n)))) G43c5@ls/false) ((lambda (G43cd@t) ((lambda (G43cf@ls/false) (if (and G43cf@ls/false (apply (lambda (G43d1@p? G43d2@sub*) (eq? (G3061@syntax->datum G43d1@p?) 'and)) G43cf@ls/false)) (apply (lambda (G43d5@p? G43d6@sub*) ((lambda (G43d9@p*) (lambda (G43db@x) (for-all (lambda (G43dd@p) (G43dd@p G43db@x)) G43d9@p*))) (map G4344@subversion-pred G43d6@sub*))) G43cf@ls/false) ((lambda (G43df@t) ((lambda (G43e1@ls/false) (if (and G43e1@ls/false (apply (lambda (G43e3@p? G43e4@sub*) (eq? (G3061@syntax->datum G43e3@p?) 'or)) G43e1@ls/false)) (apply (lambda (G43e7@p? G43e8@sub*) ((lambda (G43eb@p*) (lambda (G43ed@x) (exists (lambda (G43ef@p) (G43ef@p G43ed@x)) G43eb@p*))) (map G4344@subversion-pred G43e8@sub*))) G43e1@ls/false) ((lambda (G43f1@t) ((lambda (G43f3@ls/false) (if (and G43f3@ls/false (apply (lambda (G43f5@p? G43f6@sub) (eq? (G3061@syntax->datum G43f5@p?) 'not)) G43f3@ls/false)) (apply (lambda (G43f9@p? G43fa@sub) ((lambda (G43fd@p) (lambda (G43ff@x) (not (G43fd@p G43ff@x)))) (G4344@subversion-pred G43fa@sub))) G43f3@ls/false) ((lambda (G4401@t) ((lambda (G4403@ls/false) (if (and G4403@ls/false (apply (lambda (G4405@p? G4406@n) (and (eq? (G3061@syntax->datum G4405@p?) '<=) (G4342@subversion? G4406@n))) G4403@ls/false)) (apply (lambda (G4409@p? G440a@n) (lambda (G440d@x) (<= G440d@x (G3061@syntax->datum G440a@n)))) G4403@ls/false) ((lambda (G440f@t) ((lambda (G4411@ls/false) (if (and G4411@ls/false (apply (lambda (G4413@p? G4414@n) (and (eq? (G3061@syntax->datum G4413@p?) '>=) (G4342@subversion? G4414@n))) G4411@ls/false)) (apply (lambda (G4417@p? G4418@n) (lambda (G441b@x) (>= G441b@x (G3061@syntax->datum G4418@n)))) G4411@ls/false) ((lambda (G441d@t) ((lambda (G441f@ls/false) (if G441f@ls/false (apply (lambda () (G305b@syntax-violation 'import '"invalid sub-version spec" G433f@spec G43c1@x*)) G441f@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G441d@t))) (G2f6e@syntax-dispatch G441d@t '_))) G440f@t))) (G2f6e@syntax-dispatch G440f@t '(any any)))) G4401@t))) (G2f6e@syntax-dispatch G4401@t '(any any)))) G43f1@t))) (G2f6e@syntax-dispatch G43f1@t '(any any)))) G43df@t))) (G2f6e@syntax-dispatch G43df@t '(any . each-any)))) G43cd@t))) (G2f6e@syntax-dispatch G43cd@t '(any . each-any)))) G43c3@t))) (G2f6e@syntax-dispatch G43c3@t 'any))) G43c1@x*))) (set! G4346@version-pred (lambda (G4371@x*) ((lambda (G4373@t) ((lambda (G4375@ls/false) (if G4375@ls/false (apply (lambda () (lambda (G4377@x) '#t)) G4375@ls/false) ((lambda (G4379@t) ((lambda (G437b@ls/false) (if (and G437b@ls/false (apply (lambda (G437d@c G437e@ver*) (eq? (G3061@syntax->datum G437d@c) 'and)) G437b@ls/false)) (apply (lambda (G4381@c G4382@ver*) ((lambda (G4385@p*) (lambda (G4387@x) (for-all (lambda (G4389@p) (G4389@p G4387@x)) G4385@p*))) (map G4346@version-pred G4382@ver*))) G437b@ls/false) ((lambda (G438b@t) ((lambda (G438d@ls/false) (if (and G438d@ls/false (apply (lambda (G438f@c G4390@ver*) (eq? (G3061@syntax->datum G438f@c) 'or)) G438d@ls/false)) (apply (lambda (G4393@c G4394@ver*) ((lambda (G4397@p*) (lambda (G4399@x) (exists (lambda (G439b@p) (G439b@p G4399@x)) G4397@p*))) (map G4346@version-pred G4394@ver*))) G438d@ls/false) ((lambda (G439d@t) ((lambda (G439f@ls/false) (if (and G439f@ls/false (apply (lambda (G43a1@c G43a2@ver) (eq? (G3061@syntax->datum G43a1@c) 'not)) G439f@ls/false)) (apply (lambda (G43a5@c G43a6@ver) ((lambda (G43a9@p) (lambda (G43ab@x) (not (G43a9@p G43ab@x)))) (G4346@version-pred G43a6@ver))) G439f@ls/false) ((lambda (G43ad@t) ((lambda (G43af@ls/false) (if G43af@ls/false (apply (lambda (G43b1@sub*) ((lambda (G43b3@p*) (lambda (G43b5@x) ((letrec ((G43b7@f (lambda (G43b9@p* G43ba@x) (if (null? G43b9@p*) '#t (if (null? G43ba@x) '#f (and ((car G43b9@p*) (car G43ba@x)) (G43b7@f (cdr G43b9@p*) (cdr G43ba@x)))))))) G43b7@f) G43b3@p* G43b5@x))) (map G4344@subversion-pred G43b1@sub*))) G43af@ls/false) ((lambda (G43bd@t) ((lambda (G43bf@ls/false) (if G43bf@ls/false (apply (lambda () (G305b@syntax-violation 'import '"invalid version spec" G433f@spec G4371@x*)) G43bf@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G43bd@t))) (G2f6e@syntax-dispatch G43bd@t '_))) G43ad@t))) (G2f6e@syntax-dispatch G43ad@t 'each-any))) G439d@t))) (G2f6e@syntax-dispatch G439d@t '(any any)))) G438b@t))) (G2f6e@syntax-dispatch G438b@t '(any . each-any)))) G4379@t))) (G2f6e@syntax-dispatch G4379@t '(any . each-any)))) G4373@t))) (G2f6e@syntax-dispatch G4373@t '()))) G4371@x*))) ((letrec ((G4347@f (lambda (G4349@x) ((lambda (G434b@t) ((lambda (G434d@ls/false) (if G434d@ls/false (apply (lambda (G434f@version-spec*) (values '() (G4346@version-pred G434f@version-spec*))) G434d@ls/false) ((lambda (G4351@t) ((lambda (G4353@ls/false) (if (and G4353@ls/false (apply (lambda (G4355@x G4356@x*) (G4276@idsyn? G4355@x)) G4353@ls/false)) (apply (lambda (G4359@x G435a@x*) (call-with-values (lambda () (G4347@f G435a@x*)) (lambda (G435f@G435d G4360@G435e) ((lambda (G4363@pred G4364@name) (values (cons (G3061@syntax->datum G4359@x) G4364@name) G4363@pred)) G4360@G435e G435f@G435d)))) G4353@ls/false) ((lambda (G4367@t) ((lambda (G4369@ls/false) (if G4369@ls/false (apply (lambda () (values '() (lambda (G436b@x) '#t))) G4369@ls/false) ((lambda (G436d@t) ((lambda (G436f@ls/false) (if G436f@ls/false (apply (lambda () (G305b@syntax-violation '#f '"invalid import spec" G433f@spec)) G436f@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G436d@t))) (G2f6e@syntax-dispatch G436d@t '_))) G4367@t))) (G2f6e@syntax-dispatch G4367@t '()))) G4351@t))) (G2f6e@syntax-dispatch G4351@t '(any . any)))) G434b@t))) (G2f6e@syntax-dispatch G434b@t '(each-any)))) G4349@x)))) G4347@f) G433f@spec))) '#f '#f '#f))) (set! G4286@import-library (lambda (G4331@spec*) (call-with-values (lambda () (G4284@parse-library-name G4331@spec*)) (lambda (G4335@G4333 G4336@G4334) ((lambda (G4339@pred G433a@name) (begin (if (null? G433a@name) (G305b@syntax-violation 'import '"empty library name" G4331@spec*) (void)) ((lambda (G433d@lib) (begin (if (not G433d@lib) (G305b@syntax-violation 'import '"cannot find library with required name" G433a@name) (void)) (if (not (G4339@pred (G2b57@G29cf@library-version G433d@lib))) (G305b@syntax-violation 'import '"library does not satisfy version specification" G4331@spec* G433d@lib) (void)) ((G2fdf@imp-collector) G433d@lib) (G2b5b@G29d7@library-subst G433d@lib))) (G2b7f@G2a1f@find-library-by-name G433a@name)))) G4336@G4334 G4335@G4333))))) (set! G4288@get-import (lambda (G42a3@spec) ((lambda (G42a5@t) ((lambda (G42a7@ls/false) (if (and G42a7@ls/false (apply (lambda (G42a9@x G42aa@x*) (not (memq (G3061@syntax->datum G42a9@x) '(for rename except only prefix library)))) G42a7@ls/false)) (apply (lambda (G42ad@x G42ae@x*) (G4286@import-library (cons G42ad@x G42ae@x*))) G42a7@ls/false) ((lambda (G42b1@t) ((lambda (G42b3@ls/false) (if (and G42b3@ls/false (apply (lambda (G42b5@rename G42b6@isp G42b7@old* G42b8@new*) (and (eq? (G3061@syntax->datum G42b5@rename) 'rename) (for-all G4276@idsyn? G42b7@old*) (for-all G4276@idsyn? G42b8@new*))) G42b3@ls/false)) (apply (lambda (G42bd@rename G42be@isp G42bf@old* G42c0@new*) ((lambda (G42c5@subst G42c6@old* G42c7@new*) ((lambda (G42cb@old-label*) ((lambda (G42cd@subst) (G427a@merge-substs (map cons G42c7@new* G42cb@old-label*) G42cd@subst)) (G4280@rem* G42c6@old* G42c5@subst))) (G427e@find* G42c6@old* G42c5@subst))) (G4288@get-import G42be@isp) (map G3061@syntax->datum G42bf@old*) (map G3061@syntax->datum G42c0@new*))) G42b3@ls/false) ((lambda (G42cf@t) ((lambda (G42d1@ls/false) (if (and G42d1@ls/false (apply (lambda (G42d3@except G42d4@isp G42d5@sym*) (and (eq? (G3061@syntax->datum G42d3@except) 'except) (for-all G4276@idsyn? G42d5@sym*))) G42d1@ls/false)) (apply (lambda (G42d9@except G42da@isp G42db@sym*) ((lambda (G42df@subst) (G4280@rem* (map G3061@syntax->datum G42db@sym*) G42df@subst)) (G4288@get-import G42da@isp))) G42d1@ls/false) ((lambda (G42e1@t) ((lambda (G42e3@ls/false) (if (and G42e3@ls/false (apply (lambda (G42e5@only G42e6@isp G42e7@sym*) (and (eq? (G3061@syntax->datum G42e5@only) 'only) (for-all G4276@idsyn? G42e7@sym*))) G42e3@ls/false)) (apply (lambda (G42eb@only G42ec@isp G42ed@sym*) ((lambda (G42f1@subst G42f2@sym*) ((lambda (G42f5@sym*) ((lambda (G42f7@lab*) (map cons G42f5@sym* G42f7@lab*)) (G427e@find* G42f5@sym* G42f1@subst))) (G4282@remove-dups G42f2@sym*))) (G4288@get-import G42ec@isp) (map G3061@syntax->datum G42ed@sym*))) G42e3@ls/false) ((lambda (G42f9@t) ((lambda (G42fb@ls/false) (if (and G42fb@ls/false (apply (lambda (G42fd@prefix G42fe@isp G42ff@p) (and (eq? (G3061@syntax->datum G42fd@prefix) 'prefix) (G4276@idsyn? G42ff@p))) G42fb@ls/false)) (apply (lambda (G4303@prefix G4304@isp G4305@p) ((lambda (G4309@subst G430a@prefix) (map (lambda (G430d@x) (cons (string->symbol (string-append G430a@prefix (symbol->string (car G430d@x)))) (cdr G430d@x))) G4309@subst)) (G4288@get-import G4304@isp) (symbol->string (G3061@syntax->datum G4305@p)))) G42fb@ls/false) ((lambda (G430f@t) ((lambda (G4311@ls/false) (if (and G4311@ls/false (apply (lambda (G4313@library G4314@spec*) (eq? (G3061@syntax->datum G4313@library) 'library)) G4311@ls/false)) (apply (lambda (G4317@library G4318@spec*) (G4286@import-library G4318@spec*)) G4311@ls/false) ((lambda (G431b@t) ((lambda (G431d@ls/false) (if (and G431d@ls/false (apply (lambda (G431f@for G4320@isp G4321@rest) (eq? (G3061@syntax->datum G431f@for) 'for)) G431d@ls/false)) (apply (lambda (G4325@for G4326@isp G4327@rest) (G4288@get-import G4326@isp)) G431d@ls/false) ((lambda (G432b@t) ((lambda (G432d@ls/false) (if G432d@ls/false (apply (lambda (G432f@spec) (G305b@syntax-violation 'import '"invalid import spec" G432f@spec)) G432d@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G432b@t))) (G2f6e@syntax-dispatch G432b@t 'any))) G431b@t))) (G2f6e@syntax-dispatch G431b@t '(any any . any)))) G430f@t))) (G2f6e@syntax-dispatch G430f@t '(any each-any)))) G42f9@t))) (G2f6e@syntax-dispatch G42f9@t '(any any any)))) G42e1@t))) (G2f6e@syntax-dispatch G42e1@t '(any any . each-any)))) G42cf@t))) (G2f6e@syntax-dispatch G42cf@t '(any any . each-any)))) G42b1@t))) (G2f6e@syntax-dispatch G42b1@t '(any any . #(each (any any)))))) G42a5@t))) (G2f6e@syntax-dispatch G42a5@t '(any . each-any)))) G42a3@spec))) (set! G428a@add-imports! (lambda (G4293@imp G4294@h) ((lambda (G4297@subst) (for-each (lambda (G4299@x) ((lambda (G429b@name G429c@label) ((lambda (G429f@t) (if G429f@t ((lambda (G42a1@l) (if (not (eq? G42a1@l G429c@label)) (G4278@dup-error G429b@name) (void))) G429f@t) (hashtable-set! G4294@h G429b@name G429c@label))) (hashtable-ref G4294@h G429b@name '#f))) (car G4299@x) (cdr G4299@x))) G4297@subst)) (G4288@get-import G4293@imp)))) (lambda (G428b@imp*) ((letrec ((G428d@f (lambda (G428f@imp* G4290@h) (if (null? G428f@imp*) (hashtable-entries G4290@h) (begin (G428a@add-imports! (car G428f@imp*) G4290@h) (G428d@f (cdr G428f@imp*) G4290@h)))))) G428d@f) G428b@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fd7@make-top-rib (lambda (G4477@names G4478@labels) ((lambda (G447b@rib) (begin (vector-for-each (lambda (G447d@name G447e@label) (begin (if (not (symbol? G447d@name)) (error 'make-top-rib '"BUG: not a symbol" G447d@name) (void)) (G2d22@extend-rib/nc! G447b@rib (G2d39@make-stx G447d@name G2ce7@top-mark* '() '()) G447e@label))) G4477@names G4478@labels) G447b@rib)) (G2d1c@make-cache-rib)))) (set! G2fd9@make-collector (lambda () ((lambda (G4481@ls) (lambda G4485 ((lambda (G4486) (if (= G4486 '0) (apply (lambda () G4481@ls) G4485) (if (= G4486 '1) (apply (lambda (G4483@x) (set! G4481@ls (G2ce0@set-cons G4483@x G4481@ls))) G4485) (error 'apply '"invalid arg count")))) (length G4485)))) '()))) (set! G2fdb@inv-collector (G290b@G2841@make-parameter (lambda G4487@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4489@x) (begin (if (not (procedure? G4489@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4489@x) (void)) G4489@x)))) (set! G2fdd@vis-collector (G290b@G2841@make-parameter (lambda G448b@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G448d@x) (begin (if (not (procedure? G448d@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G448d@x) (void)) G448d@x)))) (set! G2fdf@imp-collector (G290b@G2841@make-parameter (lambda G448f@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4491@x) (begin (if (not (procedure? G4491@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4491@x) (void)) G4491@x)))) (set! G2fe1@chi-library-internal (lambda (G4493@e* G4494@rib G4495@top?) (call-with-values (lambda () (G2fcb@chi-body* G4493@e* '() '() '() '() '() '() '() G4494@rib G4495@top?)) (lambda (G44a1@G4499 G44a2@G449a G44a3@G449b G44a4@G449c G44a5@G449d G44a6@G449e G44a7@G449f G44a8@G44a0) ((lambda (G44b1@exp* G44b2@_kwd* G44b3@mod** G44b4@rhs* G44b5@lex* G44b6@mr G44b7@r G44b8@e*) (values (append (apply append (reverse G44b3@mod**)) G44b8@e*) G44b7@r G44b6@mr (reverse G44b5@lex*) (reverse G44b4@rhs*) G44b1@exp*)) G44a8@G44a0 G44a7@G449f G44a6@G449e G44a5@G449d G44a4@G449c G44a3@G449b G44a2@G449a G44a1@G4499))))) (set! G2fe3@chi-interaction-expr (lambda (G44c1@e G44c2@rib G44c3@r) (call-with-values (lambda () (G2fcb@chi-body* (list G44c1@e) G44c3@r G44c3@r '() '() '() '() '() G44c2@rib '#t)) (lambda (G44cf@G44c7 G44d0@G44c8 G44d1@G44c9 G44d2@G44ca G44d3@G44cb G44d4@G44cc G44d5@G44cd G44d6@G44ce) ((lambda (G44df@_exp* G44e0@_kwd* G44e1@mod** G44e2@rhs* G44e3@lex* G44e4@mr G44e5@r G44e6@e*) ((lambda (G44ef@e*) ((lambda (G44f1@e) (values G44f1@e G44e5@r)) (if (null? G44ef@e*) (G2ccd@G2c3f@build-void) (if (null? (cdr G44ef@e*)) (car G44ef@e*) (G2ccc@G2c3d@build-sequence '#f G44ef@e*))))) (G2fa0@expand-interaction-rhs*/init* (reverse G44e3@lex*) (reverse G44e2@rhs*) (append (apply append (reverse G44e1@mod**)) G44e6@e*) G44e5@r G44e4@mr))) G44d6@G44ce G44d5@G44cd G44d4@G44cc G44d3@G44cb G44d2@G44ca G44d1@G44c9 G44d0@G44c8 G44cf@G44c7))))) (set! G2fe5@library-body-expander (lambda (G44f3@name G44f4@main-exp* G44f5@imp* G44f6@b* G44f7@top?) ((lambda (G44fe@itc) (begin (set! G44fe@itc (G2fd9@make-collector)) ((lambda (G4503@G44ff G4504@G4500 G4505@G4501 G4506@G4502) ((lambda (G450b@swap) (dynamic-wind G450b@swap (lambda () (call-with-values (lambda () (G2fd5@parse-import-spec* G44f5@imp*)) (lambda (G450f@G450d G4510@G450e) ((lambda (G4513@subst-labels G4514@subst-names) ((lambda (G4517@rib) ((lambda (G451a@wrap) (begin (set! G451a@wrap (lambda (G4586@x) (G2d39@make-stx G4586@x G2ce7@top-mark* (list G4517@rib) '()))) ((lambda (G451b@b* G451c@main-exp* G451d@rtc G451e@vtc) ((lambda (G4527@G4523 G4528@G4524 G4529@G4525 G452a@G4526) ((lambda (G452f@swap) (dynamic-wind G452f@swap (lambda () (call-with-values (lambda () (G2fe1@chi-library-internal G451b@b* G4517@rib G44f7@top?)) (lambda (G4537@G4531 G4538@G4532 G4539@G4533 G453a@G4534 G453b@G4535 G453c@G4536) ((lambda (G4543@internal-exp* G4544@rhs* G4545@lex* G4546@mr G4547@r G4548@init*) (call-with-values (lambda () (G2fcf@parse-exports (append G451c@main-exp* G4543@internal-exp*))) (lambda (G4551@G454f G4552@G4550) ((lambda (G4555@exp-id* G4556@exp-name*) (begin (G2d26@seal-rib! G4517@rib) ((lambda (G4559@init*) ((lambda (G455b@rhs*) ((lambda () (begin (G2d28@unseal-rib! G4517@rib) ((lambda (G455d@loc* G455e@export-subst) ((lambda (G4562@errstr) (begin (set! G4562@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3045@make-export-env/macros G4545@lex* G455d@loc* G4547@r)) (lambda (G4566@G4563 G4567@G4564 G4568@G4565) ((lambda (G456c@macro* G456d@global* G456e@export-env) (begin (for-each (lambda (G4572@s) ((lambda (G4574@name G4575@label) ((lambda (G4578@p) (if G4578@p ((lambda (G457a@b) ((lambda (G457c@type) (if (eq? G457c@type 'mutable) (G305b@syntax-violation 'export G4562@errstr G4574@name) (void))) (car G457a@b))) (cdr G4578@p)) (void))) (assq G4575@label G456e@export-env))) (car G4572@s) (cdr G4572@s))) G455e@export-subst) ((lambda (G457e@invoke-body G457f@invoke-definitions) (values (G44fe@itc) (G451d@rtc) (G451e@vtc) (G2ccc@G2c3d@build-sequence '#f (append G457f@invoke-definitions (list G457e@invoke-body))) G456c@macro* G455e@export-subst G456e@export-env)) (G2ccf@G2c43@build-letrec* '#f G4545@lex* G455b@rhs* (G3041@build-exports G456d@global* G4559@init*)) (map G2cc8@G2b8d@build-global-define (map cdr G456d@global*))))) G4568@G4565 G4567@G4564 G4566@G4563))))) '#f)) (map G2ced@gen-global G4545@lex*) (G3043@make-export-subst G4556@exp-name* G4555@exp-id*)))))) (G2fa2@chi-rhs* G4544@rhs* G4547@r G4546@mr))) (G2f8e@chi-expr* G4548@init* G4547@r G4546@mr)))) G4552@G4550 G4551@G454f)))) G453c@G4536 G453b@G4535 G453a@G4534 G4539@G4533 G4538@G4532 G4537@G4531)))) G452f@swap)) (lambda () (begin ((lambda (G4582@t) (begin (G4527@G4523 G4529@G4525) (set! G4529@G4525 G4582@t))) (G4527@G4523)) ((lambda (G4584@t) (begin (G4528@G4524 G452a@G4526) (set! G452a@G4526 G4584@t))) (G4528@G4524)))))) G2fdb@inv-collector G2fdd@vis-collector G451d@rtc G451e@vtc)) (map G451a@wrap G44f6@b*) (map G451a@wrap G44f4@main-exp*) (G2fd9@make-collector) (G2fd9@make-collector)))) '#f)) (G2fd7@make-top-rib G4514@subst-names G4513@subst-labels))) G4510@G450e G450f@G450d)))) G450b@swap)) (lambda () (begin ((lambda (G4588@t) (begin (G4503@G44ff G4505@G4501) (set! G4505@G4501 G4588@t))) (G4503@G44ff)) ((lambda (G458a@t) (begin (G4504@G4500 G4506@G4502) (set! G4506@G4502 G458a@t))) (G4504@G4500)))))) G2fdf@imp-collector G3069@top-level-context G44fe@itc '#f))) '#f))) (set! G2fe7@core-library-expander (lambda (G458c@e G458d@verify-name) (call-with-values (lambda () (G2fd3@parse-library G458c@e)) (lambda (G4594@G4590 G4595@G4591 G4596@G4592 G4597@G4593) ((lambda (G459c@b* G459d@imp* G459e@exp* G459f@name*) (call-with-values (lambda () (G2fd1@parse-library-name G459f@name*)) (lambda (G45a6@G45a4 G45a7@G45a5) ((lambda (G45aa@ver G45ab@name) (begin (G458d@verify-name G45ab@name) (call-with-values (lambda () (G2fe5@library-body-expander G45ab@name G459e@exp* G459d@imp* G459c@b* '#f)) (lambda (G45b5@G45ae G45b6@G45af G45b7@G45b0 G45b8@G45b1 G45b9@G45b2 G45ba@G45b3 G45bb@G45b4) ((lambda (G45c3@export-env G45c4@export-subst G45c5@visit-code G45c6@invoke-code G45c7@visit-req* G45c8@invoke-req* G45c9@imp*) (values G45ab@name G45aa@ver G45c9@imp* G45c8@invoke-req* G45c7@visit-req* G45c6@invoke-code G45c5@visit-code G45c4@export-subst G45c3@export-env)) G45bb@G45b4 G45ba@G45b3 G45b9@G45b2 G45b8@G45b1 G45b7@G45b0 G45b6@G45af G45b5@G45ae))))) G45a7@G45a5 G45a6@G45a4)))) G4597@G4593 G4596@G4592 G4595@G4591 G4594@G4590))))) (set! G2fe9@parse-top-level-program (lambda (G45d1@e*) ((lambda (G45d3@t) ((lambda (G45d5@ls/false) (if (and G45d5@ls/false (apply (lambda (G45d7@import G45d8@imp* G45d9@b*) (eq? (G3061@syntax->datum G45d7@import) 'import)) G45d5@ls/false)) (apply (lambda (G45dd@import G45de@imp* G45df@b*) (values G45de@imp* G45df@b*)) G45d5@ls/false) ((lambda (G45e3@t) ((lambda (G45e5@ls/false) (if (and G45e5@ls/false (apply (lambda (G45e7@import G45e8@x G45e9@y) (eq? (G3061@syntax->datum G45e7@import) 'import)) G45e5@ls/false)) (apply (lambda (G45ed@import G45ee@x G45ef@y) (G305b@syntax-violation 'expander '"invalid syntax of top-level program" (G2d69@syntax-car G45d1@e*))) G45e5@ls/false) ((lambda (G45f3@t) ((lambda (G45f5@ls/false) (if G45f5@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45f5@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G45f3@t))) (G2f6e@syntax-dispatch G45f3@t '_))) G45e3@t))) (G2f6e@syntax-dispatch G45e3@t '((any . any) . any)))) G45d3@t))) (G2f6e@syntax-dispatch G45d3@t '((any . each-any) . each-any)))) G45d1@e*))) (set! G2feb@top-level-expander (lambda (G45f7@e*) (call-with-values (lambda () (G2fe9@parse-top-level-program G45f7@e*)) (lambda (G45fb@G45f9 G45fc@G45fa) ((lambda (G45ff@b* G4600@imp*) (call-with-values (lambda () (G2fe5@library-body-expander '() '() G4600@imp* G45ff@b* '#t)) (lambda (G460a@G4603 G460b@G4604 G460c@G4605 G460d@G4606 G460e@G4607 G460f@G4608 G4610@G4609) ((lambda (G4618@export-env G4619@export-subst G461a@visit-code G461b@invoke-code G461c@visit-req* G461d@invoke-req* G461e@imp*) (values G461d@invoke-req* G461b@invoke-code)) G4610@G4609 G460f@G4608 G460e@G4607 G460d@G4606 G460c@G4605 G460b@G4604 G460a@G4603)))) G45fc@G45fa G45fb@G45f9))))) (set! G2ff1@G2fec (make-record-type-descriptor 'env '#f 'G2fef '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2ff3@G2fee '#f) (set! G2ff5@G2fed (make-record-constructor-descriptor G2ff1@G2fec '#f G2ff3@G2fee)) (set! G2ff8@env? (record-predicate G2ff1@G2fec)) (set! G2ffa@make-env (record-constructor G2ff5@G2fed)) (set! G2ffc@env-names (record-accessor G2ff1@G2fec '0)) (set! G2ffe@env-labels (record-accessor G2ff1@G2fec '1)) (set! G3000@env-itc (record-accessor G2ff1@G2fec '2)) (set! G3002@set-env-names! (record-mutator G2ff1@G2fec '0)) (set! G3004@set-env-labels! (record-mutator G2ff1@G2fec '1)) (set! G3006@set-env-itc! (record-mutator G2ff1@G2fec '2)) (set! G3008@rp (G2908@G283b@make-record-printer 'env (lambda (G4626@x G4627@p G4628@wr) (display '"#<environment>" G4627@p)))) (set! G300e@G3009 (make-record-type-descriptor 'interaction-env '#f 'G300c '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3010@G300b '#f) (set! G3012@G300a (make-record-constructor-descriptor G300e@G3009 '#f G3010@G300b)) (set! G3015@interaction-env? (record-predicate G300e@G3009)) (set! G3017@make-interaction-env (record-constructor G3012@G300a)) (set! G3019@interaction-env-rib (record-accessor G300e@G3009 '0)) (set! G301b@interaction-env-r (record-accessor G300e@G3009 '1)) (set! G301d@interaction-env-locs (record-accessor G300e@G3009 '2)) (set! G301f@set-interaction-env-rib! (record-mutator G300e@G3009 '0)) (set! G3021@set-interaction-env-r! (record-mutator G300e@G3009 '1)) (set! G3023@set-interaction-env-locs! (record-mutator G300e@G3009 '2)) (set! G3025@rp (G2908@G283b@make-record-printer 'interaction-env (lambda (G462c@x G462d@p G462e@wr) (display '"#<environment>" G462d@p)))) (set! G3027@interaction-environment-symbols (lambda () (G302f@environment-symbols (G3067@interaction-environment)))) (set! G3029@environment-bindings (lambda (G4632@e) (vector->list (vector-map (lambda (G4634@name G4635@label) (G302b@parse-binding (cons G4634@name (G2b85@G2a2b@imported-label->binding G4635@label)))) (G2ffc@env-names G4632@e) (G2ffe@env-labels G4632@e))))) (set! G302b@parse-binding (lambda (G4638@b) (cons (car G4638@b) ((lambda (G463a@t) (if (memv G463a@t '(core-prim global)) 'procedure (if (memv G463a@t '(core-macro macro global-macro)) 'syntax (if (memv G463a@t '($core-rtd)) 'record (if (eq? (car G4638@b) (cadr G4638@b)) 'syntax 'unknown))))) (cadr G4638@b))))) (set! G302d@environment? (lambda (G463c@x) (or (G2ff8@env? G463c@x) (G3015@interaction-env? G463c@x)))) (set! G302f@environment-symbols (lambda (G463e@x) (if (G2ff8@env? G463e@x) (vector->list (G2ffc@env-names G463e@x)) (if (G3015@interaction-env? G463e@x) (map values (G2d06@rib-sym* (G3019@interaction-env-rib G463e@x))) (assertion-violation 'environment-symbols '"not an environment" G463e@x))))) (set! G3031@environment (lambda G4640@imp* ((lambda (G4642@itc) ((lambda (G4646@G4644 G4647@G4645) ((lambda (G464a@swap) (dynamic-wind G464a@swap (lambda () (call-with-values (lambda () (G2fd5@parse-import-spec* G4640@imp*)) (lambda (G464e@G464c G464f@G464d) ((lambda (G4652@subst-labels G4653@subst-names) (G2ffa@make-env G4653@subst-names G4652@subst-labels G4642@itc)) G464f@G464d G464e@G464c)))) G464a@swap)) (lambda () ((lambda (G4656@t) (begin (G4646@G4644 G4647@G4645) (set! G4647@G4645 G4656@t))) (G4646@G4644))))) G2fdf@imp-collector G4642@itc)) (G2fd9@make-collector)))) (set! G3033@null-environment (lambda (G4658@n) (begin (if (not (eqv? G4658@n '5)) (assertion-violation 'null-environment '"not 5" G4658@n) (void)) (G3031@environment '(psyntax null-environment-5))))) (set! G3035@scheme-report-environment (lambda (G465a@n) (begin (if (not (eqv? G465a@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G465a@n) (void)) (G3031@environment '(psyntax scheme-report-environment-5))))) (set! G3037@expand (lambda (G465c@x G465d@env) (if (G2ff8@env? G465d@env) ((lambda (G4660@rib) ((lambda (G4662@x G4663@itc G4664@rtc G4665@vtc) ((lambda (G466a@x) (begin (G2d26@seal-rib! G4660@rib) (values G466a@x (G4664@rtc)))) ((lambda (G4674@G466c G4675@G466d G4676@G466e G4677@G466f G4678@G4670 G4679@G4671 G467a@G4672 G467b@G4673) ((lambda (G4684@swap) (dynamic-wind G4684@swap (lambda () (G2f92@chi-expr G4662@x '() '())) G4684@swap)) (lambda () (begin ((lambda (G4686@t) (begin (G4674@G466c G4678@G4670) (set! G4678@G4670 G4686@t))) (G4674@G466c)) ((lambda (G4688@t) (begin (G4675@G466d G4679@G4671) (set! G4679@G4671 G4688@t))) (G4675@G466d)) ((lambda (G468a@t) (begin (G4676@G466e G467a@G4672) (set! G467a@G4672 G468a@t))) (G4676@G466e)) ((lambda (G468c@t) (begin (G4677@G466f G467b@G4673) (set! G467b@G4673 G468c@t))) (G4677@G466f)))))) G3069@top-level-context G2fdb@inv-collector G2fdd@vis-collector G2fdf@imp-collector '#f G4664@rtc G4665@vtc G4663@itc))) (G2d39@make-stx G465c@x G2ce7@top-mark* (list G4660@rib) '()) (G3000@env-itc G465d@env) (G2fd9@make-collector) (G2fd9@make-collector))) (G2fd7@make-top-rib (G2ffc@env-names G465d@env) (G2ffe@env-labels G465d@env))) (if (G3015@interaction-env? G465d@env) ((lambda (G468e@rib G468f@r G4690@rtc) ((lambda (G4694@x) (call-with-values (lambda () ((lambda (G46a0@G4698 G46a1@G4699 G46a2@G469a G46a3@G469b G46a4@G469c G46a5@G469d G46a6@G469e G46a7@G469f) ((lambda (G46b0@swap) (dynamic-wind G46b0@swap (lambda () (G2fe3@chi-interaction-expr G4694@x G468e@rib G468f@r)) G46b0@swap)) (lambda () (begin ((lambda (G46b2@t) (begin (G46a0@G4698 G46a4@G469c) (set! G46a4@G469c G46b2@t))) (G46a0@G4698)) ((lambda (G46b4@t) (begin (G46a1@G4699 G46a5@G469d) (set! G46a5@G469d G46b4@t))) (G46a1@G4699)) ((lambda (G46b6@t) (begin (G46a2@G469a G46a6@G469e) (set! G46a6@G469e G46b6@t))) (G46a2@G469a)) ((lambda (G46b8@t) (begin (G46a3@G469b G46a7@G469f) (set! G46a7@G469f G46b8@t))) (G46a3@G469b)))))) G3069@top-level-context G2fdb@inv-collector G2fdd@vis-collector G2fdf@imp-collector G465d@env G4690@rtc (G2fd9@make-collector) (G2fd9@make-collector))) (lambda (G46ba@G4696 G46bb@G4697) ((lambda (G46be@r^ G46bf@e) (begin (G3021@set-interaction-env-r! G465d@env G46be@r^) (values G46bf@e (G4690@rtc)))) G46bb@G4697 G46ba@G4696)))) (G2d39@make-stx G465c@x G2ce7@top-mark* (list G468e@rib) '()))) (G3019@interaction-env-rib G465d@env) (G301b@interaction-env-r G465d@env) (G2fd9@make-collector)) (assertion-violation 'expand '"not an environment" G465d@env))))) (set! G3039@eval (lambda (G46c2@x G46c3@env) (begin (if (not (G302d@environment? G46c3@env)) (error 'eval '"not an environment" G46c3@env) (void)) (call-with-values (lambda () (G3037@expand G46c2@x G46c3@env)) (lambda (G46c8@G46c6 G46c9@G46c7) ((lambda (G46cc@invoke-req* G46cd@x) (begin (for-each G2b86@G2a2d@invoke-library G46cc@invoke-req*) (eval-core (G295f@G2917@expanded->core G46cd@x)))) G46c9@G46c7 G46c8@G46c6)))))) (set! G303b@library-expander (lambda G4735 ((lambda (G4736) (if (= G4736 '3) (apply (lambda (G46d0@x G46d1@filename G46d2@verify-name) ((lambda (G46d7@build-visit-code G46d9@visit!) (begin (set! G46d7@build-visit-code (lambda (G4723@macro*) (if (null? G4723@macro*) (G2ccd@G2c3f@build-void) (G2ccc@G2c3d@build-sequence '#f (map (lambda (G4725@x) ((lambda (G4727@loc G4728@src) (list 'set! G4727@loc G4728@src)) (car G4725@x) (cddr G4725@x))) G4723@macro*))))) (set! G46d9@visit! (lambda (G471b@macro*) (for-each (lambda (G471d@x) ((lambda (G471f@loc G4720@proc) (set-symbol-value! G471f@loc G4720@proc)) (car G471d@x) (cadr G471d@x))) G471b@macro*))) (call-with-values (lambda () (G2fe7@core-library-expander G46d0@x G46d2@verify-name)) (lambda (G46e3@G46da G46e4@G46db G46e5@G46dc G46e6@G46dd G46e7@G46de G46e8@G46df G46e9@G46e0 G46ea@G46e1 G46eb@G46e2) ((lambda (G46f5@export-env G46f6@export-subst G46f7@macro* G46f8@invoke-code G46f9@vis* G46fa@inv* G46fb@imp* G46fc@ver G46fd@name) ((lambda (G4707@id G4708@name G4709@ver G470a@imp* G470b@vis* G470c@inv* G470d@visit-proc G470e@invoke-proc G470f@visit-code G4710@invoke-code) (begin (G2b84@G2a29@install-library G4707@id G4708@name G4709@ver G470a@imp* G470b@vis* G470c@inv* G46f6@export-subst G46f5@export-env G470d@visit-proc G470e@invoke-proc G470f@visit-code G4710@invoke-code '#t G46d1@filename) (values G4707@id G4708@name G4709@ver G470a@imp* G470b@vis* G470c@inv* G4710@invoke-code G470f@visit-code G46f6@export-subst G46f5@export-env))) (gensym) G46fd@name G46fc@ver (map G2b8a@G2a35@library-spec G46fb@imp*) (map G2b8a@G2a35@library-spec G46f9@vis*) (map G2b8a@G2a35@library-spec G46fa@inv*) (lambda () (G46d9@visit! G46f7@macro*)) (lambda () (eval-core (G295f@G2917@expanded->core G46f8@invoke-code))) (G46d7@build-visit-code G46f7@macro*) G46f8@invoke-code)) G46eb@G46e2 G46ea@G46e1 G46e9@G46e0 G46e8@G46df G46e7@G46de G46e6@G46dd G46e5@G46dc G46e4@G46db G46e3@G46da))))) '#f '#f)) G4735) (if (= G4736 '2) (apply (lambda (G472b@x G472c@filename) (G303b@library-expander G472b@x G472c@filename (lambda (G472f@x) (values)))) G4735) (if (= G4736 '1) (apply (lambda (G4731@x) (G303b@library-expander G4731@x '#f (lambda (G4733@x) (values)))) G4735) (error 'apply '"invalid arg count"))))) (length G4735)))) (set! G303d@boot-library-expand (lambda (G4737@x) (call-with-values (lambda () (G303b@library-expander G4737@x)) (lambda (G4743@G4739 G4744@G473a G4745@G473b G4746@G473c G4747@G473d G4748@G473e G4749@G473f G474a@G4740 G474b@G4741 G474c@G4742) ((lambda (G4757@export-env G4758@export-subst G4759@visit-code G475a@invoke-code G475b@inv* G475c@vis* G475d@imp* G475e@ver G475f@name G4760@id) (values G475f@name G475a@invoke-code G4758@export-subst G4757@export-env)) G474c@G4742 G474b@G4741 G474a@G4740 G4749@G473f G4748@G473e G4747@G473d G4746@G473c G4745@G473b G4744@G473a G4743@G4739))))) (set! G303f@rev-map-append (lambda (G476b@f G476c@ls G476d@ac) (if (null? G476c@ls) G476d@ac (G303f@rev-map-append G476b@f (cdr G476c@ls) (cons (G476b@f (car G476c@ls)) G476d@ac))))) (set! G3041@build-exports (lambda (G4771@lex*+loc* G4772@init*) (G2ccc@G2c3d@build-sequence '#f (cons (G2ccd@G2c3f@build-void) (G303f@rev-map-append (lambda (G4775@x) (list 'set! (cdr G4775@x) (car G4775@x))) G4771@lex*+loc* G4772@init*))))) (set! G3043@make-export-subst (lambda (G4777@name* G4778@id*) (map (lambda (G477b@name G477c@id) ((lambda (G477f@label) (begin (if (not G477f@label) (G305b@syntax-violation '#f '"cannot export unbound identifier" G477c@id) (void)) (cons G477b@name G477f@label))) (G2d89@id->label G477c@id))) G4777@name* G4778@id*))) (set! G3045@make-export-env/macros (lambda (G4781@lex* G4782@loc* G4783@r) ((lambda (G4788@lookup) (begin (set! G4788@lookup (lambda (G47a5@x) ((letrec ((G47a7@f (lambda (G47a9@x G47aa@lex* G47ab@loc*) (if (pair? G47aa@lex*) (if (eq? G47a9@x (car G47aa@lex*)) (car G47ab@loc*) (G47a7@f G47a9@x (cdr G47aa@lex*) (cdr G47ab@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G47a7@f) G47a5@x G4781@lex* G4782@loc*))) ((letrec ((G4789@f (lambda (G478b@r G478c@env G478d@global* G478e@macro*) (if (null? G478b@r) (values G478c@env G478d@global* G478e@macro*) ((lambda (G4793@x) ((lambda (G4795@label G4796@b) ((lambda (G4799@t) (if (memv G4799@t '(lexical)) ((lambda (G479b@v) ((lambda (G479d@loc G479e@type) (G4789@f (cdr G478b@r) (cons (cons* G4795@label G479e@type G479d@loc) G478c@env) (cons (cons (G2efa@lexical-var G479b@v) G479d@loc) G478d@global*) G478e@macro*)) (G4788@lookup (G2efa@lexical-var G479b@v)) (if (G2efc@lexical-mutable? G479b@v) 'mutable 'global))) (G2d93@binding-value G4796@b)) (if (memv G4799@t '(local-macro)) ((lambda (G47a1@loc) (G4789@f (cdr G478b@r) (cons (cons* G4795@label 'global-macro G47a1@loc) G478c@env) G478d@global* (cons (cons G47a1@loc (G2d93@binding-value G4796@b)) G478e@macro*))) (gensym)) (if (memv G4799@t '(local-macro!)) ((lambda (G47a3@loc) (G4789@f (cdr G478b@r) (cons (cons* G4795@label 'global-macro! G47a3@loc) G478c@env) G478d@global* (cons (cons G47a3@loc (G2d93@binding-value G4796@b)) G478e@macro*))) (gensym)) (if (memv G4799@t '($rtd $module)) (G4789@f (cdr G478b@r) (cons G4793@x G478c@env) G478d@global* G478e@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d91@binding-type G4796@b) (G2d93@binding-value G4796@b))))))) (G2d91@binding-type G4796@b))) (car G4793@x) (cdr G4793@x))) (car G478b@r)))))) G4789@f) G4783@r '() '() '()))) '#f))) (set! G3047@generate-temporaries (lambda (G47af@ls) ((lambda (G47b1@t) ((lambda (G47b3@ls/false) (if G47b3@ls/false (apply (lambda (G47b5@ls) (map (lambda (G47b7@x) (G2d39@make-stx ((lambda (G47b9@x) (if (or (symbol? G47b9@x) (string? G47b9@x)) (gensym G47b9@x) (gensym 't))) (G3061@syntax->datum G47b7@x)) G2ce7@top-mark* '() '())) G47b5@ls)) G47b3@ls/false) ((lambda (G47bb@t) ((lambda (G47bd@ls/false) (if G47bd@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47bd@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G47bb@t))) (G2f6e@syntax-dispatch G47bb@t '_))) G47b1@t))) (G2f6e@syntax-dispatch G47b1@t 'each-any))) G47af@ls))) (set! G3049@free-identifier=? (lambda (G47bf@x G47c0@y) (if (G2d6f@id? G47bf@x) (if (G2d6f@id? G47c0@y) (G2d77@free-id=? G47bf@x G47c0@y) (assertion-violation 'free-identifier=? '"not an identifier" G47c0@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47bf@x)))) (set! G304b@bound-identifier=? (lambda (G47c3@x G47c4@y) (if (G2d6f@id? G47c3@x) (if (G2d6f@id? G47c4@y) (G2d75@bound-id=? G47c3@x G47c4@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47c4@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47c3@x)))) (set! G304d@make-source-condition (lambda (G47c7@x) ((lambda (G47d1@G47cc G47d3@G47ce G47d5@G47cd G47d8@G47cb G47da@make-source-condition G47dc@G47c9 G47de@G47ca G47e0@source-condition? G47e2@source-filename G47e4@source-character) (begin (set! G47d1@G47cc (make-record-type-descriptor '&source-information G4c41@G4992@&condition-rtd 'G47cf '#f '#f '#((immutable file-name) (immutable character)))) (set! G47d3@G47ce '#f) (set! G47d5@G47cd (make-record-constructor-descriptor G47d1@G47cc G4c42@G4994@&condition-rcd G47d3@G47ce)) (set! G47d8@G47cb (record-predicate G47d1@G47cc)) (set! G47da@make-source-condition (record-constructor G47d5@G47cd)) (set! G47dc@G47c9 (record-accessor G47d1@G47cc '0)) (set! G47de@G47ca (record-accessor G47d1@G47cc '1)) (set! G47e0@source-condition? (condition-predicate G47d1@G47cc)) (set! G47e2@source-filename (condition-accessor G47d1@G47cc G47dc@G47c9)) (set! G47e4@source-character (condition-accessor G47d1@G47cc G47de@G47ca)) (if (pair? G47c7@x) (G47da@make-source-condition (car G47c7@x) (cdr G47c7@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G304f@extract-position-condition (lambda (G47e5@x) (G304d@make-source-condition (G3051@expression-position G47e5@x)))) (set! G3051@expression-position (lambda (G47e7@x) (and (G2d37@stx? G47e7@x) ((lambda (G47e9@x) (and (G2900@G282b@annotation? G47e9@x) (G2901@G282d@annotation-source G47e9@x))) (G2d3b@stx-expr G47e7@x))))) (set! G3053@assertion-error (lambda (G47eb@expr G47ec@pos) (raise (condition (G4c71@G4a54@make-assertion-violation) (G4c83@G4a84@make-who-condition 'assert) (G4c47@G49e7@make-message-condition '"assertion failed") (G4c79@G4a6a@make-irritants-condition (list G47eb@expr)) (G304d@make-source-condition G47ec@pos))))) (set! G3055@syntax-error (lambda (G47ef@x . G47f1@args) (begin (if (not (for-all string? G47f1@args)) (assertion-violation 'syntax-error '"invalid argument" G47f1@args) (void)) (raise (condition (G4c47@G49e7@make-message-condition (if (null? G47f1@args) '"invalid syntax" (apply string-append G47f1@args))) (G4ca5@G4ade@make-syntax-violation (G3061@syntax->datum G47ef@x) '#f) (G304f@extract-position-condition G47ef@x) (G3057@extract-trace G47ef@x)))))) (set! G3057@extract-trace (lambda (G47f3@x) ((lambda (G47fc@G47f7 G47fe@G47f9 G4800@G47f8 G4803@G47f6 G4805@make-trace G4807@G47f5 G4809@trace? G480b@trace-form) (begin (set! G47fc@G47f7 (make-record-type-descriptor '&trace G4c41@G4992@&condition-rtd 'G47fa '#f '#f '#((immutable form)))) (set! G47fe@G47f9 '#f) (set! G4800@G47f8 (make-record-constructor-descriptor G47fc@G47f7 G4c42@G4994@&condition-rcd G47fe@G47f9)) (set! G4803@G47f6 (record-predicate G47fc@G47f7)) (set! G4805@make-trace (record-constructor G4800@G47f8)) (set! G4807@G47f5 (record-accessor G47fc@G47f7 '0)) (set! G4809@trace? (condition-predicate G47fc@G47f7)) (set! G480b@trace-form (condition-accessor G47fc@G47f7 G4807@G47f5)) ((letrec ((G480c@f (lambda (G480e@x) (if (G2d37@stx? G480e@x) (apply condition (G4805@make-trace G480e@x) (map G480c@f (G2d41@stx-ae* G480e@x))) (if (G2900@G282b@annotation? G480e@x) (G4805@make-trace (G2d39@make-stx G480e@x '() '() '())) (condition)))))) G480c@f) G47f3@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3059@syntax-violation* (lambda (G4810@who G4811@msg G4812@form G4813@condition-object) (begin (if (not (string? G4811@msg)) (assertion-violation 'syntax-violation '"message is not a string" G4811@msg) (void)) ((lambda (G4818@who) (raise (condition (if G4818@who (G4c83@G4a84@make-who-condition G4818@who) (condition)) (G4c47@G49e7@make-message-condition G4811@msg) G4813@condition-object (G304f@extract-position-condition G4812@form) (G3057@extract-trace G4812@form)))) (if (or (string? G4810@who) (symbol? G4810@who)) G4810@who (if (not G4810@who) ((lambda (G481a@t) ((lambda (G481c@ls/false) (if (and G481c@ls/false (apply (lambda (G481e@id) (G2d6f@id? G481e@id)) G481c@ls/false)) (apply (lambda (G4820@id) (G3061@syntax->datum G4820@id)) G481c@ls/false) ((lambda (G4822@t) ((lambda (G4824@ls/false) (if (and G4824@ls/false (apply (lambda (G4826@id G4827@rest) (G2d6f@id? G4826@id)) G4824@ls/false)) (apply (lambda (G482a@id G482b@rest) (G3061@syntax->datum G482a@id)) G4824@ls/false) ((lambda (G482e@t) ((lambda (G4830@ls/false) (if G4830@ls/false (apply (lambda () '#f) G4830@ls/false) (G305b@syntax-violation '#f '"invalid syntax" G482e@t))) (G2f6e@syntax-dispatch G482e@t '_))) G4822@t))) (G2f6e@syntax-dispatch G4822@t '(any . any)))) G481a@t))) (G2f6e@syntax-dispatch G481a@t 'any))) G4812@form) (assertion-violation 'syntax-violation '"invalid who argument" G4810@who))))))) (set! G305b@syntax-violation (lambda G4840 ((lambda (G4841) (if (= G4841 '3) (apply (lambda (G4832@who G4833@msg G4834@form) (G305b@syntax-violation G4832@who G4833@msg G4834@form '#f)) G4840) (if (= G4841 '4) (apply (lambda (G4838@who G4839@msg G483a@form G483b@subform) (G3059@syntax-violation* G4838@who G4839@msg G483a@form (G4ca5@G4ade@make-syntax-violation (G3061@syntax->datum G483a@form) (G3061@syntax->datum G483b@subform)))) G4840) (error 'apply '"invalid arg count")))) (length G4840)))) (set! G305d@identifier? (lambda (G4842@x) (G2d6f@id? G4842@x))) (set! G305f@datum->syntax (lambda (G4844@id G4845@datum) (if (G2d6f@id? G4844@id) (G2d4d@datum->stx G4844@id G4845@datum) (assertion-violation 'datum->syntax '"not an identifier" G4844@id)))) (set! G3061@syntax->datum (lambda (G4848@x) (G2d85@stx->datum G4848@x))) (set! G3063@compile-r6rs-top-level (lambda (G484a@x*) (call-with-values (lambda () (G2feb@top-level-expander G484a@x*)) (lambda (G484e@G484c G484f@G484d) ((lambda (G4852@invoke-code G4853@lib*) (lambda () (begin (for-each G2b86@G2a2d@invoke-library G4853@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G295f@G2917@expanded->core G4852@invoke-code)) (void)) (eval-core (G295f@G2917@expanded->core G4852@invoke-code))))) G484f@G484d G484e@G484c))))) (set! G3065@pre-compile-r6rs-top-level (lambda (G4856@x*) (call-with-values (lambda () (G2feb@top-level-expander G4856@x*)) (lambda (G485a@G4858 G485b@G4859) ((lambda (G485e@invoke-code G485f@lib*) (begin (for-each G2b86@G2a2d@invoke-library G485f@lib*) (G2909@G283d@compile-core (G295f@G2917@expanded->core G485e@invoke-code)))) G485b@G4859 G485a@G4858))))) (set! G3067@interaction-environment ((lambda (G4862@the-env) (lambda () (or G4862@the-env ((lambda (G4864@lib G4865@rib) (begin ((lambda (G4868@subst) (begin (G2d10@set-rib-sym*! G4865@rib (map car G4868@subst)) (G2d12@set-rib-mark**! G4865@rib (map (lambda (G486a@x) G2ce7@top-mark*) G4868@subst)) (G2d14@set-rib-label*! G4865@rib (map cdr G4868@subst)))) (G2b5b@G29d7@library-subst G4864@lib)) ((lambda (G486c@env) (begin (set! G4862@the-env G486c@env) G486c@env)) (G3017@make-interaction-env G4865@rib '() '())))) (G2b7f@G2a1f@find-library-by-name '(mosh interaction)) (G2d1c@make-cache-rib))))) '#f)) (set! G3069@top-level-context (G290b@G2841@make-parameter '#f)) (begin (set! G497d@G3069@top-level-context G3069@top-level-context) (set! G497c@G3067@interaction-environment G3067@interaction-environment) (set! G497b@G3065@pre-compile-r6rs-top-level G3065@pre-compile-r6rs-top-level) (set! G497a@G3063@compile-r6rs-top-level G3063@compile-r6rs-top-level) (set! G4979@G3061@syntax->datum G3061@syntax->datum) (set! G4978@G305f@datum->syntax G305f@datum->syntax) (set! G4977@G305d@identifier? G305d@identifier?) (set! G4976@G305b@syntax-violation G305b@syntax-violation) (set! G4975@G3059@syntax-violation* G3059@syntax-violation*) (set! G4974@G3057@extract-trace G3057@extract-trace) (set! G4973@G3055@syntax-error G3055@syntax-error) (set! G4972@G3053@assertion-error G3053@assertion-error) (set! G4971@G3051@expression-position G3051@expression-position) (set! G4970@G304f@extract-position-condition G304f@extract-position-condition) (set! G496f@G304d@make-source-condition G304d@make-source-condition) (set! G496e@G304b@bound-identifier=? G304b@bound-identifier=?) (set! G496d@G3049@free-identifier=? G3049@free-identifier=?) (set! G496c@G3047@generate-temporaries G3047@generate-temporaries) (set! G496b@G3045@make-export-env/macros G3045@make-export-env/macros) (set! G496a@G3043@make-export-subst G3043@make-export-subst) (set! G4969@G3041@build-exports G3041@build-exports) (set! G4968@G303f@rev-map-append G303f@rev-map-append) (set! G4967@G303d@boot-library-expand G303d@boot-library-expand) (set! G4966@G303b@library-expander G303b@library-expander) (set! G4965@G3039@eval G3039@eval) (set! G4964@G3037@expand G3037@expand) (set! G4963@G3035@scheme-report-environment G3035@scheme-report-environment) (set! G4962@G3033@null-environment G3033@null-environment) (set! G4961@G3031@environment G3031@environment) (set! G4960@G302f@environment-symbols G302f@environment-symbols) (set! G495f@G302d@environment? G302d@environment?) (set! G495e@G302b@parse-binding G302b@parse-binding) (set! G495d@G3029@environment-bindings G3029@environment-bindings) (set! G495c@G3027@interaction-environment-symbols G3027@interaction-environment-symbols) (set! G495b@G3025@rp G3025@rp) (set! G495a@G3023@set-interaction-env-locs! G3023@set-interaction-env-locs!) (set! G4959@G3021@set-interaction-env-r! G3021@set-interaction-env-r!) (set! G4958@G301f@set-interaction-env-rib! G301f@set-interaction-env-rib!) (set! G4957@G301d@interaction-env-locs G301d@interaction-env-locs) (set! G4956@G301b@interaction-env-r G301b@interaction-env-r) (set! G4955@G3019@interaction-env-rib G3019@interaction-env-rib) (set! G4954@G3017@make-interaction-env G3017@make-interaction-env) (set! G4953@G3015@interaction-env? G3015@interaction-env?) (set! G4952@G3012@G300a G3012@G300a) (set! G4951@G3010@G300b G3010@G300b) (set! G4950@G300e@G3009 G300e@G3009) (set! G494f@G3008@rp G3008@rp) (set! G494e@G3006@set-env-itc! G3006@set-env-itc!) (set! G494d@G3004@set-env-labels! G3004@set-env-labels!) (set! G494c@G3002@set-env-names! G3002@set-env-names!) (set! G494b@G3000@env-itc G3000@env-itc) (set! G494a@G2ffe@env-labels G2ffe@env-labels) (set! G4949@G2ffc@env-names G2ffc@env-names) (set! G4948@G2ffa@make-env G2ffa@make-env) (set! G4947@G2ff8@env? G2ff8@env?) (set! G4946@G2ff5@G2fed G2ff5@G2fed) (set! G4945@G2ff3@G2fee G2ff3@G2fee) (set! G4944@G2ff1@G2fec G2ff1@G2fec) (set! G4943@G2feb@top-level-expander G2feb@top-level-expander) (set! G4942@G2fe9@parse-top-level-program G2fe9@parse-top-level-program) (set! G4941@G2fe7@core-library-expander G2fe7@core-library-expander) (set! G4940@G2fe5@library-body-expander G2fe5@library-body-expander) (set! G493f@G2fe3@chi-interaction-expr G2fe3@chi-interaction-expr) (set! G493e@G2fe1@chi-library-internal G2fe1@chi-library-internal) (set! G493d@G2fdf@imp-collector G2fdf@imp-collector) (set! G493c@G2fdd@vis-collector G2fdd@vis-collector) (set! G493b@G2fdb@inv-collector G2fdb@inv-collector) (set! G493a@G2fd9@make-collector G2fd9@make-collector) (set! G4939@G2fd7@make-top-rib G2fd7@make-top-rib) (set! G4938@G2fd5@parse-import-spec* G2fd5@parse-import-spec*) (set! G4937@G2fd3@parse-library G2fd3@parse-library) (set! G4936@G2fd1@parse-library-name G2fd1@parse-library-name) (set! G4935@G2fcf@parse-exports G2fcf@parse-exports) (set! G4934@G2fcd@expand-transformer G2fcd@expand-transformer) (set! G4933@G2fcb@chi-body* G2fcb@chi-body*) (set! G4932@G2fc9@chi-internal-module G2fc9@chi-internal-module) (set! G4931@G2fc7@module-interface-exp-id* G2fc7@module-interface-exp-id*) (set! G4930@G2fc5@set-module-interface-exp-lab-vec! G2fc5@set-module-interface-exp-lab-vec!) (set! G492f@G2fc3@set-module-interface-exp-id-vec! G2fc3@set-module-interface-exp-id-vec!) (set! G492e@G2fc1@set-module-interface-first-mark! G2fc1@set-module-interface-first-mark!) (set! G492d@G2fbf@module-interface-exp-lab-vec G2fbf@module-interface-exp-lab-vec) (set! G492c@G2fbd@module-interface-exp-id-vec G2fbd@module-interface-exp-id-vec) (set! G492b@G2fbb@module-interface-first-mark G2fbb@module-interface-first-mark) (set! G492a@G2fb9@make-module-interface G2fb9@make-module-interface) (set! G4929@G2fb7@module-interface? G2fb7@module-interface?) (set! G4928@G2fb4@G2fac G2fb4@G2fac) (set! G4927@G2fb2@G2fad G2fb2@G2fad) (set! G4926@G2fb0@G2fab G2fb0@G2fab) (set! G4925@G2faa@parse-module G2faa@parse-module) (set! G4924@G2fa8@chi-internal G2fa8@chi-internal) (set! G4923@G2fa6@find-dups G2fa6@find-dups) (set! G4922@G2fa4@find-bound=? G2fa4@find-bound=?) (set! G4921@G2fa2@chi-rhs* G2fa2@chi-rhs*) (set! G4920@G2fa0@expand-interaction-rhs*/init* G2fa0@expand-interaction-rhs*/init*) (set! G491f@G2f9e@chi-rhs G2f9e@chi-rhs) (set! G491e@G2f9c@chi-defun G2f9c@chi-defun) (set! G491d@G2f9a@chi-lambda-clause* G2f9a@chi-lambda-clause*) (set! G491c@G2f98@chi-lambda-clause G2f98@chi-lambda-clause) (set! G491b@G2f96@verify-formals G2f96@verify-formals) (set! G491a@G2f94@chi-set! G2f94@chi-set!) (set! G4919@G2f92@chi-expr G2f92@chi-expr) (set! G4918@G2f90@chi-application G2f90@chi-application) (set! G4917@G2f8e@chi-expr* G2f8e@chi-expr*) (set! G4916@G2f8c@chi-global-macro G2f8c@chi-global-macro) (set! G4915@G2f8a@chi-local-macro G2f8a@chi-local-macro) (set! G4914@G2f88@chi-macro G2f88@chi-macro) (set! G4913@G2f86@do-macro-call G2f86@do-macro-call) (set! G4912@G2f84@local-macro-transformer G2f84@local-macro-transformer) (set! G4911@G2f82@macro-transformer G2f82@macro-transformer) (set! G4910@G2f80@symbol-macro G2f80@symbol-macro) (set! G490f@G2f7e@file-options-macro G2f7e@file-options-macro) (set! G490e@G2f7c@core-macro-transformer G2f7c@core-macro-transformer) (set! G490d@G2f7a@syntax-transformer G2f7a@syntax-transformer) (set! G490c@G2f78@ellipsis-map G2f78@ellipsis-map) (set! G490b@G2f76@syntax-case-transformer G2f76@syntax-case-transformer) (set! G490a@G2f74@verify-literals G2f74@verify-literals) (set! G4909@G2f72@underscore? G2f72@underscore?) (set! G4908@G2f70@ellipsis? G2f70@ellipsis?) (set! G4907@G2f6e@syntax-dispatch G2f6e@syntax-dispatch) (set! G4906@G2f6c@convert-pattern G2f6c@convert-pattern) (set! G4905@G2f6a@foreign-call-transformer G2f6a@foreign-call-transformer) (set! G4904@G2f68@parameterize-macro G2f68@parameterize-macro) (set! G4903@G2f66@incorrect-usage-macro G2f66@incorrect-usage-macro) (set! G4902@G2f64@define-condition-type-macro G2f64@define-condition-type-macro) (set! G4901@G2f62@define-record-type-macro G2f62@define-record-type-macro) (set! G4900@G2f60@define-struct-macro G2f60@define-struct-macro) (set! G48ff@G2f5e@quasisyntax-macro G2f5e@quasisyntax-macro) (set! G48fe@G2f5c@quasiquote-macro G2f5c@quasiquote-macro) (set! G48fd@G2f5a@syntax-rules-macro G2f5a@syntax-rules-macro) (set! G48fc@G2f58@include-into-macro G2f58@include-into-macro) (set! G48fb@G2f56@include-macro G2f56@include-macro) (set! G48fa@G2f54@do-include G2f54@do-include) (set! G48f9@G2f52@cond-macro G2f52@cond-macro) (set! G48f8@G2f50@and-macro G2f50@and-macro) (set! G48f7@G2f4e@or-macro G2f4e@or-macro) (set! G48f6@G2f4c@let*-macro G2f4c@let*-macro) (set! G48f5@G2f4a@do-macro G2f4a@do-macro) (set! G48f4@G2f48@identifier-syntax-macro G2f48@identifier-syntax-macro) (set! G48f3@G2f46@endianness-macro G2f46@endianness-macro) (set! G48f2@G2f44@assert-macro G2f44@assert-macro) (set! G48f1@G2f42@delay-macro G2f42@delay-macro) (set! G48f0@G2f40@time-macro G2f40@time-macro) (set! G48ef@G2f3e@define-enumeration-macro G2f3e@define-enumeration-macro) (set! G48ee@G2f3c@guard-macro G2f3c@guard-macro) (set! G48ed@G2f3a@trace-letrec-syntax-macro G2f3a@trace-letrec-syntax-macro) (set! G48ec@G2f38@trace-let-syntax-macro G2f38@trace-let-syntax-macro) (set! G48eb@G2f36@trace-let/rec-syntax G2f36@trace-let/rec-syntax) (set! G48ea@G2f34@trace-define-syntax-macro G2f34@trace-define-syntax-macro) (set! G48e9@G2f32@trace-define-macro G2f32@trace-define-macro) (set! G48e8@G2f30@trace-lambda-macro G2f30@trace-lambda-macro) (set! G48e7@G2f2e@let*-values-macro G2f2e@let*-values-macro) (set! G48e6@G2f2c@let-values-macro G2f2c@let-values-macro) (set! G48e5@G2f2a@let-macro G2f2a@let-macro) (set! G48e4@G2f28@invalid-fmls-error G2f28@invalid-fmls-error) (set! G48e3@G2f26@with-syntax-macro G2f26@with-syntax-macro) (set! G48e2@G2f24@bless G2f24@bless) (set! G48e1@G2f22@lambda-transformer G2f22@lambda-transformer) (set! G48e0@G2f20@case-lambda-transformer G2f20@case-lambda-transformer) (set! G48df@G2f1e@quote-transformer G2f1e@quote-transformer) (set! G48de@G2f1c@case-macro G2f1c@case-macro) (set! G48dd@G2f1a@or-transformer G2f1a@or-transformer) (set! G48dc@G2f18@and-transformer G2f18@and-transformer) (set! G48db@G2f16@if-transformer G2f16@if-transformer) (set! G48da@G2f14@unless-macro G2f14@unless-macro) (set! G48d9@G2f12@when-macro G2f12@when-macro) (set! G48d8@G2f10@record-constructor-descriptor-transformer G2f10@record-constructor-descriptor-transformer) (set! G48d7@G2f0e@record-type-descriptor-transformer G2f0e@record-type-descriptor-transformer) (set! G48d6@G2f0c@type-descriptor-transformer G2f0c@type-descriptor-transformer) (set! G48d5@G2f0a@fluid-let-syntax-transformer G2f0a@fluid-let-syntax-transformer) (set! G48d4@G2f08@letrec*-transformer G2f08@letrec*-transformer) (set! G48d3@G2f06@letrec-transformer G2f06@letrec-transformer) (set! G48d2@G2f04@letrec-helper G2f04@letrec-helper) (set! G48d1@G2f02@add-lexicals G2f02@add-lexicals) (set! G48d0@G2f00@add-lexical G2f00@add-lexical) (set! G48cf@G2efe@set-lexical-mutable! G2efe@set-lexical-mutable!) (set! G48ce@G2efc@lexical-mutable? G2efc@lexical-mutable?) (set! G48cd@G2efa@lexical-var G2efa@lexical-var) (set! G48cc@G2ef8@scheme-stx G2ef8@scheme-stx) (set! G48cb@G2ef6@scheme-stx-hashtable G2ef6@scheme-stx-hashtable) (set! G48ca@G2ef4@parse-define-syntax G2ef4@parse-define-syntax) (set! G48c9@G2ef2@parse-define G2ef2@parse-define) (set! G48c8@G2daf@make-eval-transformer G2daf@make-eval-transformer) (set! G48c7@G2dad@variable-transformer-procedure G2dad@variable-transformer-procedure) (set! G48c6@G2dab@variable-transformer? G2dab@variable-transformer?) (set! G48c5@G2da9@make-variable-transformer G2da9@make-variable-transformer) (set! G48c4@G2da7@sanitize-binding G2da7@sanitize-binding) (set! G48c3@G2d97@syntax-type G2d97@syntax-type) (set! G48c2@G2d95@raise-unbound-error G2d95@raise-unbound-error) (set! G48c1@G2d93@binding-value G2d93@binding-value) (set! G48c0@G2d91@binding-type G2d91@binding-type) (set! G48bf@G2d8f@make-binding G2d8f@make-binding) (set! G48be@G2d8d@label->binding G2d8d@label->binding) (set! G48bd@G2d8b@id->real-label G2d8b@id->real-label) (set! G48bc@G2d89@id->label G2d89@id->label) (set! G48bb@G2d87@same-marks*? G2d87@same-marks*?) (set! G48ba@G2d85@stx->datum G2d85@stx->datum) (set! G48b9@G2d83@strip G2d83@strip) (set! G48b8@G2d81@strip-annotations G2d81@strip-annotations) (set! G48b7@G2d7f@self-evaluating? G2d7f@self-evaluating?) (set! G48b6@G2d7d@bound-id-member? G2d7d@bound-id-member?) (set! G48b5@G2d7b@distinct-bound-ids? G2d7b@distinct-bound-ids?) (set! G48b4@G2d79@valid-bound-ids? G2d79@valid-bound-ids?) (set! G48b3@G2d77@free-id=? G2d77@free-id=?) (set! G48b2@G2d75@bound-id=? G2d75@bound-id=?) (set! G48b1@G2d73@same-marks? G2d73@same-marks?) (set! G48b0@G2d71@id->sym G2d71@id->sym) (set! G48af@G2d6f@id? G2d6f@id?) (set! G48ae@G2d6d@syntax->list G2d6d@syntax->list) (set! G48ad@G2d6b@syntax-cdr G2d6b@syntax-cdr) (set! G48ac@G2d69@syntax-car G2d69@syntax-car) (set! G48ab@G2d67@syntax-list? G2d67@syntax-list?) (set! G48aa@G2d65@syntax-null? G2d65@syntax-null?) (set! G48a9@G2d63@syntax-vector? G2d63@syntax-vector?) (set! G48a8@G2d61@syntax-pair? G2d61@syntax-pair?) (set! G48a7@G2d5f@syntax-vector->list G2d5f@syntax-vector->list) (set! G48a6@G2d5d@syntax-kind? G2d5d@syntax-kind?) (set! G48a5@G2d5b@add-subst G2d5b@add-subst) (set! G48a4@G2d59@add-mark G2d59@add-mark) (set! G48a3@G2d57@mkstx G2d57@mkstx) (set! G48a2@G2d55@join-wraps G2d55@join-wraps) (set! G48a1@G2d53@anti-mark? G2d53@anti-mark?) (set! G48a0@G2d51@anti-mark G2d51@anti-mark) (set! G489f@G2d4f@gen-mark G2d4f@gen-mark) (set! G489e@G2d4d@datum->stx G2d4d@datum->stx) (set! G489d@G2d4b@rp G2d4b@rp) (set! G489c@G2d49@set-stx-ae*! G2d49@set-stx-ae*!) (set! G489b@G2d47@set-stx-subst*! G2d47@set-stx-subst*!) (set! G489a@G2d45@set-stx-mark*! G2d45@set-stx-mark*!) (set! G4899@G2d43@set-stx-expr! G2d43@set-stx-expr!) (set! G4898@G2d41@stx-ae* G2d41@stx-ae*) (set! G4897@G2d3f@stx-subst* G2d3f@stx-subst*) (set! G4896@G2d3d@stx-mark* G2d3d@stx-mark*) (set! G4895@G2d3b@stx-expr G2d3b@stx-expr) (set! G4894@G2d39@make-stx G2d39@make-stx) (set! G4893@G2d37@stx? G2d37@stx?) (set! G4892@G2d34@G2d2c G2d34@G2d2c) (set! G4891@G2d32@G2d2d G2d32@G2d2d) (set! G4890@G2d30@G2d2b G2d30@G2d2b) (set! G488f@G2d2a@make-full-rib G2d2a@make-full-rib) (set! G488e@G2d28@unseal-rib! G2d28@unseal-rib!) (set! G488d@G2d26@seal-rib! G2d26@seal-rib!) (set! G488c@G2d24@make-rib-map G2d24@make-rib-map) (set! G488b@G2d22@extend-rib/nc! G2d22@extend-rib/nc!) (set! G488a@G2d20@extend-rib! G2d20@extend-rib!) (set! G4889@G2d1e@find-label G2d1e@find-label) (set! G4888@G2d1c@make-cache-rib G2d1c@make-cache-rib) (set! G4887@G2d1a@make-empty-rib G2d1a@make-empty-rib) (set! G4886@G2d18@set-rib-cache! G2d18@set-rib-cache!) (set! G4885@G2d16@set-rib-sealed/freq! G2d16@set-rib-sealed/freq!) (set! G4884@G2d14@set-rib-label*! G2d14@set-rib-label*!) (set! G4883@G2d12@set-rib-mark**! G2d12@set-rib-mark**!) (set! G4882@G2d10@set-rib-sym*! G2d10@set-rib-sym*!) (set! G4881@G2d0e@rib-cache G2d0e@rib-cache) (set! G4880@G2d0c@rib-sealed/freq G2d0c@rib-sealed/freq) (set! G487f@G2d0a@rib-label* G2d0a@rib-label*) (set! G487e@G2d08@rib-mark** G2d08@rib-mark**) (set! G487d@G2d06@rib-sym* G2d06@rib-sym*) (set! G487c@G2d04@make-rib G2d04@make-rib) (set! G487b@G2d02@rib? G2d02@rib?) (set! G487a@G2cff@G2cf7 G2cff@G2cf7) (set! G4879@G2cfd@G2cf8 G2cfd@G2cf8) (set! G4878@G2cfb@G2cf6 G2cfb@G2cf6) (set! G4877@G2cf5@gen-define-label G2cf5@gen-define-label) (set! G4876@G2cf3@gen-define-label+loc G2cf3@gen-define-label+loc) (set! G4875@G2cf1@gen-top-level-label G2cf1@gen-top-level-label) (set! G4874@G2cef@gen-label G2cef@gen-label) (set! G4873@G2ced@gen-global G2ced@gen-global) (set! G4872@G2ceb@gen-lexical G2ceb@gen-lexical) (set! G4871@G2ce9@top-marked? G2ce9@top-marked?) (set! G4870@G2ce7@top-mark* G2ce7@top-mark*) (set! G486f@G2ce2@set-union G2ce2@set-union) (set! G486e@G2ce0@set-cons G2ce0@set-cons) (G2b7c@G2a19@current-library-expander G303b@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4987@G4982 G4989@G4984 G498b@G4983 G498e@&condition? G4990@make-&condition G4992@&condition-rtd G4994@&condition-rcd G49de@G49d9 G49e0@G49db G49e2@G49da G49e5@p? G49e7@make-message-condition G49e9@G49d8 G49eb@message-condition? G49ed@condition-message G49ef@&message-rtd G49f1@&message-rcd G49f7@G49f2 G49f9@G49f4 G49fb@G49f3 G49fe@p? G4a00@make-warning G4a02@warning? G4a04@&warning-rtd G4a06@&warning-rcd G4a0c@G4a07 G4a0e@G4a09 G4a10@G4a08 G4a13@p? G4a15@make-serious-condition G4a17@serious-condition? G4a19@&serious-rtd G4a1b@&serious-rcd G4a21@G4a1c G4a23@G4a1e G4a25@G4a1d G4a28@p? G4a2a@make-error G4a2c@error? G4a2e@&error-rtd G4a30@&error-rcd G4a36@G4a31 G4a38@G4a33 G4a3a@G4a32 G4a3d@p? G4a3f@make-violation G4a41@violation? G4a43@&violation-rtd G4a45@&violation-rcd G4a4b@G4a46 G4a4d@G4a48 G4a4f@G4a47 G4a52@p? G4a54@make-assertion-violation G4a56@assertion-violation? G4a58@&assertion-rtd G4a5a@&assertion-rcd G4a61@G4a5c G4a63@G4a5e G4a65@G4a5d G4a68@p? G4a6a@make-irritants-condition G4a6c@G4a5b G4a6e@irritants-condition? G4a70@condition-irritants G4a72@&irritants-rtd G4a74@&irritants-rcd G4a7b@G4a76 G4a7d@G4a78 G4a7f@G4a77 G4a82@p? G4a84@make-who-condition G4a86@G4a75 G4a88@who-condition? G4a8a@condition-who G4a8c@&who-rtd G4a8e@&who-rcd G4a94@G4a8f G4a96@G4a91 G4a98@G4a90 G4a9b@p? G4a9d@make-non-continuable-violation G4a9f@non-continuable-violation? G4aa1@&non-continuable-rtd G4aa3@&non-continuable-rcd G4aa9@G4aa4 G4aab@G4aa6 G4aad@G4aa5 G4ab0@p? G4ab2@make-implementation-restriction-violation G4ab4@implementation-restriction-violation? G4ab6@&implementation-restriction-rtd G4ab8@&implementation-restriction-rcd G4abe@G4ab9 G4ac0@G4abb G4ac2@G4aba G4ac5@p? G4ac7@make-lexical-violation G4ac9@lexical-violation? G4acb@&lexical-rtd G4acd@&lexical-rcd G4ad5@G4ad0 G4ad7@G4ad2 G4ad9@G4ad1 G4adc@p? G4ade@make-syntax-violation G4ae0@G4ace G4ae2@G4acf G4ae4@syntax-violation? G4ae6@syntax-violation-form G4ae8@syntax-violation-subform G4aea@&syntax-rtd G4aec@&syntax-rcd G4af2@G4aed G4af4@G4aef G4af6@G4aee G4af9@p? G4afb@make-undefined-violation G4afd@undefined-violation? G4aff@&undefined-rtd G4b01@&undefined-rcd G4b07@G4b02 G4b09@G4b04 G4b0b@G4b03 G4b0e@p? G4b10@make-i/o-error G4b12@i/o-error? G4b14@&i/o-rtd G4b16@&i/o-rcd G4b1c@G4b17 G4b1e@G4b19 G4b20@G4b18 G4b23@p? G4b25@make-i/o-read-error G4b27@i/o-read-error? G4b29@&i/o-read-rtd G4b2b@&i/o-read-rcd G4b31@G4b2c G4b33@G4b2e G4b35@G4b2d G4b38@p? G4b3a@make-i/o-write-error G4b3c@i/o-write-error? G4b3e@&i/o-write-rtd G4b40@&i/o-write-rcd G4b47@G4b42 G4b49@G4b44 G4b4b@G4b43 G4b4e@p? G4b50@make-i/o-invalid-position-error G4b52@G4b41 G4b54@i/o-invalid-position-error? G4b56@i/o-error-position G4b58@&i/o-invalid-position-rtd G4b5a@&i/o-invalid-position-rcd G4b61@G4b5c G4b63@G4b5e G4b65@G4b5d G4b68@p? G4b6a@make-i/o-filename-error G4b6c@G4b5b G4b6e@i/o-filename-error? G4b70@i/o-error-filename G4b72@&i/o-filename-rtd G4b74@&i/o-filename-rcd G4b7a@G4b75 G4b7c@G4b77 G4b7e@G4b76 G4b81@p? G4b83@make-i/o-file-protection-error G4b85@i/o-file-protection-error? G4b87@&i/o-file-protection-rtd G4b89@&i/o-file-protection-rcd G4b8f@G4b8a G4b91@G4b8c G4b93@G4b8b G4b96@p? G4b98@make-i/o-file-is-read-only-error G4b9a@i/o-file-is-read-only-error? G4b9c@&i/o-file-is-read-only-rtd G4b9e@&i/o-file-is-read-only-rcd G4ba4@G4b9f G4ba6@G4ba1 G4ba8@G4ba0 G4bab@p? G4bad@make-i/o-file-already-exists-error G4baf@i/o-file-already-exists-error? G4bb1@&i/o-file-already-exists-rtd G4bb3@&i/o-file-already-exists-rcd G4bb9@G4bb4 G4bbb@G4bb6 G4bbd@G4bb5 G4bc0@p? G4bc2@make-i/o-file-does-not-exist-error G4bc4@i/o-file-does-not-exist-error? G4bc6@&i/o-file-does-not-exist-rtd G4bc8@&i/o-file-does-not-exist-rcd G4bcf@G4bca G4bd1@G4bcc G4bd3@G4bcb G4bd6@p? G4bd8@make-i/o-port-error G4bda@G4bc9 G4bdc@i/o-port-error? G4bde@i/o-error-port G4be0@&i/o-port-rtd G4be2@&i/o-port-rcd G4be8@G4be3 G4bea@G4be5 G4bec@G4be4 G4bef@p? G4bf1@make-i/o-decoding-error G4bf3@i/o-decoding-error? G4bf5@&i/o-decoding-rtd G4bf7@&i/o-decoding-rcd G4bfe@G4bf9 G4c00@G4bfb G4c02@G4bfa G4c05@p? G4c07@make-i/o-encoding-error G4c09@G4bf8 G4c0b@i/o-encoding-error? G4c0d@i/o-encoding-error-char G4c0f@&i/o-encoding-rtd G4c11@&i/o-encoding-rcd G4c17@G4c12 G4c19@G4c14 G4c1b@G4c13 G4c1e@p? G4c20@make-no-infinities-violation G4c22@no-infinities-violation? G4c24@&no-infinities-rtd G4c26@&no-infinities-rcd G4c2c@G4c27 G4c2e@G4c29 G4c30@G4c28 G4c33@p? G4c35@make-no-nans-violation G4c37@no-nans-violation? G4c39@&no-nans-rtd G4c3b@&no-nans-rcd) (begin (set! G4987@G4982 (make-record-type-descriptor '&condition '#f 'G4985 '#f '#f '#())) (set! G4989@G4984 '#f) (set! G498b@G4983 (make-record-constructor-descriptor G4987@G4982 '#f G4989@G4984)) (set! G498e@&condition? (record-predicate G4987@G4982)) (set! G4990@make-&condition (record-constructor G498b@G4983)) (set! G4992@&condition-rtd G4987@G4982) (set! G4994@&condition-rcd G498b@G4983) (set! G49de@G49d9 (make-record-type-descriptor '&message G4987@G4982 'G49dc '#f '#f '#((immutable message)))) (set! G49e0@G49db '#f) (set! G49e2@G49da (make-record-constructor-descriptor G49de@G49d9 G498b@G4983 G49e0@G49db)) (set! G49e5@p? (record-predicate G49de@G49d9)) (set! G49e7@make-message-condition (record-constructor G49e2@G49da)) (set! G49e9@G49d8 (record-accessor G49de@G49d9 '0)) (set! G49eb@message-condition? (condition-predicate G49de@G49d9)) (set! G49ed@condition-message (condition-accessor G49de@G49d9 G49e9@G49d8)) (set! G49ef@&message-rtd G49de@G49d9) (set! G49f1@&message-rcd G49e2@G49da) (set! G49f7@G49f2 (make-record-type-descriptor '&warning G4987@G4982 'G49f5 '#f '#f '#())) (set! G49f9@G49f4 '#f) (set! G49fb@G49f3 (make-record-constructor-descriptor G49f7@G49f2 G498b@G4983 G49f9@G49f4)) (set! G49fe@p? (record-predicate G49f7@G49f2)) (set! G4a00@make-warning (record-constructor G49fb@G49f3)) (set! G4a02@warning? (condition-predicate G49f7@G49f2)) (set! G4a04@&warning-rtd G49f7@G49f2) (set! G4a06@&warning-rcd G49fb@G49f3) (set! G4a0c@G4a07 (make-record-type-descriptor '&serious G4987@G4982 'G4a0a '#f '#f '#())) (set! G4a0e@G4a09 '#f) (set! G4a10@G4a08 (make-record-constructor-descriptor G4a0c@G4a07 G498b@G4983 G4a0e@G4a09)) (set! G4a13@p? (record-predicate G4a0c@G4a07)) (set! G4a15@make-serious-condition (record-constructor G4a10@G4a08)) (set! G4a17@serious-condition? (condition-predicate G4a0c@G4a07)) (set! G4a19@&serious-rtd G4a0c@G4a07) (set! G4a1b@&serious-rcd G4a10@G4a08) (set! G4a21@G4a1c (make-record-type-descriptor '&error G4a0c@G4a07 'G4a1f '#f '#f '#())) (set! G4a23@G4a1e '#f) (set! G4a25@G4a1d (make-record-constructor-descriptor G4a21@G4a1c G4a10@G4a08 G4a23@G4a1e)) (set! G4a28@p? (record-predicate G4a21@G4a1c)) (set! G4a2a@make-error (record-constructor G4a25@G4a1d)) (set! G4a2c@error? (condition-predicate G4a21@G4a1c)) (set! G4a2e@&error-rtd G4a21@G4a1c) (set! G4a30@&error-rcd G4a25@G4a1d) (set! G4a36@G4a31 (make-record-type-descriptor '&violation G4a0c@G4a07 'G4a34 '#f '#f '#())) (set! G4a38@G4a33 '#f) (set! G4a3a@G4a32 (make-record-constructor-descriptor G4a36@G4a31 G4a10@G4a08 G4a38@G4a33)) (set! G4a3d@p? (record-predicate G4a36@G4a31)) (set! G4a3f@make-violation (record-constructor G4a3a@G4a32)) (set! G4a41@violation? (condition-predicate G4a36@G4a31)) (set! G4a43@&violation-rtd G4a36@G4a31) (set! G4a45@&violation-rcd G4a3a@G4a32) (set! G4a4b@G4a46 (make-record-type-descriptor '&assertion G4a36@G4a31 'G4a49 '#f '#f '#())) (set! G4a4d@G4a48 '#f) (set! G4a4f@G4a47 (make-record-constructor-descriptor G4a4b@G4a46 G4a3a@G4a32 G4a4d@G4a48)) (set! G4a52@p? (record-predicate G4a4b@G4a46)) (set! G4a54@make-assertion-violation (record-constructor G4a4f@G4a47)) (set! G4a56@assertion-violation? (condition-predicate G4a4b@G4a46)) (set! G4a58@&assertion-rtd G4a4b@G4a46) (set! G4a5a@&assertion-rcd G4a4f@G4a47) (set! G4a61@G4a5c (make-record-type-descriptor '&irritants G4987@G4982 'G4a5f '#f '#f '#((immutable irritants)))) (set! G4a63@G4a5e '#f) (set! G4a65@G4a5d (make-record-constructor-descriptor G4a61@G4a5c G498b@G4983 G4a63@G4a5e)) (set! G4a68@p? (record-predicate G4a61@G4a5c)) (set! G4a6a@make-irritants-condition (record-constructor G4a65@G4a5d)) (set! G4a6c@G4a5b (record-accessor G4a61@G4a5c '0)) (set! G4a6e@irritants-condition? (condition-predicate G4a61@G4a5c)) (set! G4a70@condition-irritants (condition-accessor G4a61@G4a5c G4a6c@G4a5b)) (set! G4a72@&irritants-rtd G4a61@G4a5c) (set! G4a74@&irritants-rcd G4a65@G4a5d) (set! G4a7b@G4a76 (make-record-type-descriptor '&who G4987@G4982 'G4a79 '#f '#f '#((immutable who)))) (set! G4a7d@G4a78 '#f) (set! G4a7f@G4a77 (make-record-constructor-descriptor G4a7b@G4a76 G498b@G4983 G4a7d@G4a78)) (set! G4a82@p? (record-predicate G4a7b@G4a76)) (set! G4a84@make-who-condition (record-constructor G4a7f@G4a77)) (set! G4a86@G4a75 (record-accessor G4a7b@G4a76 '0)) (set! G4a88@who-condition? (condition-predicate G4a7b@G4a76)) (set! G4a8a@condition-who (condition-accessor G4a7b@G4a76 G4a86@G4a75)) (set! G4a8c@&who-rtd G4a7b@G4a76) (set! G4a8e@&who-rcd G4a7f@G4a77) (set! G4a94@G4a8f (make-record-type-descriptor '&non-continuable G4a36@G4a31 'G4a92 '#f '#f '#())) (set! G4a96@G4a91 '#f) (set! G4a98@G4a90 (make-record-constructor-descriptor G4a94@G4a8f G4a3a@G4a32 G4a96@G4a91)) (set! G4a9b@p? (record-predicate G4a94@G4a8f)) (set! G4a9d@make-non-continuable-violation (record-constructor G4a98@G4a90)) (set! G4a9f@non-continuable-violation? (condition-predicate G4a94@G4a8f)) (set! G4aa1@&non-continuable-rtd G4a94@G4a8f) (set! G4aa3@&non-continuable-rcd G4a98@G4a90) (set! G4aa9@G4aa4 (make-record-type-descriptor '&implementation-restriction G4a36@G4a31 'G4aa7 '#f '#f '#())) (set! G4aab@G4aa6 '#f) (set! G4aad@G4aa5 (make-record-constructor-descriptor G4aa9@G4aa4 G4a3a@G4a32 G4aab@G4aa6)) (set! G4ab0@p? (record-predicate G4aa9@G4aa4)) (set! G4ab2@make-implementation-restriction-violation (record-constructor G4aad@G4aa5)) (set! G4ab4@implementation-restriction-violation? (condition-predicate G4aa9@G4aa4)) (set! G4ab6@&implementation-restriction-rtd G4aa9@G4aa4) (set! G4ab8@&implementation-restriction-rcd G4aad@G4aa5) (set! G4abe@G4ab9 (make-record-type-descriptor '&lexical G4a36@G4a31 'G4abc '#f '#f '#())) (set! G4ac0@G4abb '#f) (set! G4ac2@G4aba (make-record-constructor-descriptor G4abe@G4ab9 G4a3a@G4a32 G4ac0@G4abb)) (set! G4ac5@p? (record-predicate G4abe@G4ab9)) (set! G4ac7@make-lexical-violation (record-constructor G4ac2@G4aba)) (set! G4ac9@lexical-violation? (condition-predicate G4abe@G4ab9)) (set! G4acb@&lexical-rtd G4abe@G4ab9) (set! G4acd@&lexical-rcd G4ac2@G4aba) (set! G4ad5@G4ad0 (make-record-type-descriptor '&syntax G4a36@G4a31 'G4ad3 '#f '#f '#((immutable form) (immutable subform)))) (set! G4ad7@G4ad2 '#f) (set! G4ad9@G4ad1 (make-record-constructor-descriptor G4ad5@G4ad0 G4a3a@G4a32 G4ad7@G4ad2)) (set! G4adc@p? (record-predicate G4ad5@G4ad0)) (set! G4ade@make-syntax-violation (record-constructor G4ad9@G4ad1)) (set! G4ae0@G4ace (record-accessor G4ad5@G4ad0 '0)) (set! G4ae2@G4acf (record-accessor G4ad5@G4ad0 '1)) (set! G4ae4@syntax-violation? (condition-predicate G4ad5@G4ad0)) (set! G4ae6@syntax-violation-form (condition-accessor G4ad5@G4ad0 G4ae0@G4ace)) (set! G4ae8@syntax-violation-subform (condition-accessor G4ad5@G4ad0 G4ae2@G4acf)) (set! G4aea@&syntax-rtd G4ad5@G4ad0) (set! G4aec@&syntax-rcd G4ad9@G4ad1) (set! G4af2@G4aed (make-record-type-descriptor '&undefined G4a36@G4a31 'G4af0 '#f '#f '#())) (set! G4af4@G4aef '#f) (set! G4af6@G4aee (make-record-constructor-descriptor G4af2@G4aed G4a3a@G4a32 G4af4@G4aef)) (set! G4af9@p? (record-predicate G4af2@G4aed)) (set! G4afb@make-undefined-violation (record-constructor G4af6@G4aee)) (set! G4afd@undefined-violation? (condition-predicate G4af2@G4aed)) (set! G4aff@&undefined-rtd G4af2@G4aed) (set! G4b01@&undefined-rcd G4af6@G4aee) (set! G4b07@G4b02 (make-record-type-descriptor '&i/o G4a21@G4a1c 'G4b05 '#f '#f '#())) (set! G4b09@G4b04 '#f) (set! G4b0b@G4b03 (make-record-constructor-descriptor G4b07@G4b02 G4a25@G4a1d G4b09@G4b04)) (set! G4b0e@p? (record-predicate G4b07@G4b02)) (set! G4b10@make-i/o-error (record-constructor G4b0b@G4b03)) (set! G4b12@i/o-error? (condition-predicate G4b07@G4b02)) (set! G4b14@&i/o-rtd G4b07@G4b02) (set! G4b16@&i/o-rcd G4b0b@G4b03) (set! G4b1c@G4b17 (make-record-type-descriptor '&i/o-read G4b07@G4b02 'G4b1a '#f '#f '#())) (set! G4b1e@G4b19 '#f) (set! G4b20@G4b18 (make-record-constructor-descriptor G4b1c@G4b17 G4b0b@G4b03 G4b1e@G4b19)) (set! G4b23@p? (record-predicate G4b1c@G4b17)) (set! G4b25@make-i/o-read-error (record-constructor G4b20@G4b18)) (set! G4b27@i/o-read-error? (condition-predicate G4b1c@G4b17)) (set! G4b29@&i/o-read-rtd G4b1c@G4b17) (set! G4b2b@&i/o-read-rcd G4b20@G4b18) (set! G4b31@G4b2c (make-record-type-descriptor '&i/o-write G4b07@G4b02 'G4b2f '#f '#f '#())) (set! G4b33@G4b2e '#f) (set! G4b35@G4b2d (make-record-constructor-descriptor G4b31@G4b2c G4b0b@G4b03 G4b33@G4b2e)) (set! G4b38@p? (record-predicate G4b31@G4b2c)) (set! G4b3a@make-i/o-write-error (record-constructor G4b35@G4b2d)) (set! G4b3c@i/o-write-error? (condition-predicate G4b31@G4b2c)) (set! G4b3e@&i/o-write-rtd G4b31@G4b2c) (set! G4b40@&i/o-write-rcd G4b35@G4b2d) (set! G4b47@G4b42 (make-record-type-descriptor '&i/o-invalid-position G4b07@G4b02 'G4b45 '#f '#f '#((immutable position)))) (set! G4b49@G4b44 '#f) (set! G4b4b@G4b43 (make-record-constructor-descriptor G4b47@G4b42 G4b0b@G4b03 G4b49@G4b44)) (set! G4b4e@p? (record-predicate G4b47@G4b42)) (set! G4b50@make-i/o-invalid-position-error (record-constructor G4b4b@G4b43)) (set! G4b52@G4b41 (record-accessor G4b47@G4b42 '0)) (set! G4b54@i/o-invalid-position-error? (condition-predicate G4b47@G4b42)) (set! G4b56@i/o-error-position (condition-accessor G4b47@G4b42 G4b52@G4b41)) (set! G4b58@&i/o-invalid-position-rtd G4b47@G4b42) (set! G4b5a@&i/o-invalid-position-rcd G4b4b@G4b43) (set! G4b61@G4b5c (make-record-type-descriptor '&i/o-filename G4b07@G4b02 'G4b5f '#f '#f '#((immutable filename)))) (set! G4b63@G4b5e '#f) (set! G4b65@G4b5d (make-record-constructor-descriptor G4b61@G4b5c G4b0b@G4b03 G4b63@G4b5e)) (set! G4b68@p? (record-predicate G4b61@G4b5c)) (set! G4b6a@make-i/o-filename-error (record-constructor G4b65@G4b5d)) (set! G4b6c@G4b5b (record-accessor G4b61@G4b5c '0)) (set! G4b6e@i/o-filename-error? (condition-predicate G4b61@G4b5c)) (set! G4b70@i/o-error-filename (condition-accessor G4b61@G4b5c G4b6c@G4b5b)) (set! G4b72@&i/o-filename-rtd G4b61@G4b5c) (set! G4b74@&i/o-filename-rcd G4b65@G4b5d) (set! G4b7a@G4b75 (make-record-type-descriptor '&i/o-file-protection G4b61@G4b5c 'G4b78 '#f '#f '#())) (set! G4b7c@G4b77 '#f) (set! G4b7e@G4b76 (make-record-constructor-descriptor G4b7a@G4b75 G4b65@G4b5d G4b7c@G4b77)) (set! G4b81@p? (record-predicate G4b7a@G4b75)) (set! G4b83@make-i/o-file-protection-error (record-constructor G4b7e@G4b76)) (set! G4b85@i/o-file-protection-error? (condition-predicate G4b7a@G4b75)) (set! G4b87@&i/o-file-protection-rtd G4b7a@G4b75) (set! G4b89@&i/o-file-protection-rcd G4b7e@G4b76) (set! G4b8f@G4b8a (make-record-type-descriptor '&i/o-file-is-read-only G4b7a@G4b75 'G4b8d '#f '#f '#())) (set! G4b91@G4b8c '#f) (set! G4b93@G4b8b (make-record-constructor-descriptor G4b8f@G4b8a G4b7e@G4b76 G4b91@G4b8c)) (set! G4b96@p? (record-predicate G4b8f@G4b8a)) (set! G4b98@make-i/o-file-is-read-only-error (record-constructor G4b93@G4b8b)) (set! G4b9a@i/o-file-is-read-only-error? (condition-predicate G4b8f@G4b8a)) (set! G4b9c@&i/o-file-is-read-only-rtd G4b8f@G4b8a) (set! G4b9e@&i/o-file-is-read-only-rcd G4b93@G4b8b) (set! G4ba4@G4b9f (make-record-type-descriptor '&i/o-file-already-exists G4b61@G4b5c 'G4ba2 '#f '#f '#())) (set! G4ba6@G4ba1 '#f) (set! G4ba8@G4ba0 (make-record-constructor-descriptor G4ba4@G4b9f G4b65@G4b5d G4ba6@G4ba1)) (set! G4bab@p? (record-predicate G4ba4@G4b9f)) (set! G4bad@make-i/o-file-already-exists-error (record-constructor G4ba8@G4ba0)) (set! G4baf@i/o-file-already-exists-error? (condition-predicate G4ba4@G4b9f)) (set! G4bb1@&i/o-file-already-exists-rtd G4ba4@G4b9f) (set! G4bb3@&i/o-file-already-exists-rcd G4ba8@G4ba0) (set! G4bb9@G4bb4 (make-record-type-descriptor '&i/o-file-does-not-exist G4b61@G4b5c 'G4bb7 '#f '#f '#())) (set! G4bbb@G4bb6 '#f) (set! G4bbd@G4bb5 (make-record-constructor-descriptor G4bb9@G4bb4 G4b65@G4b5d G4bbb@G4bb6)) (set! G4bc0@p? (record-predicate G4bb9@G4bb4)) (set! G4bc2@make-i/o-file-does-not-exist-error (record-constructor G4bbd@G4bb5)) (set! G4bc4@i/o-file-does-not-exist-error? (condition-predicate G4bb9@G4bb4)) (set! G4bc6@&i/o-file-does-not-exist-rtd G4bb9@G4bb4) (set! G4bc8@&i/o-file-does-not-exist-rcd G4bbd@G4bb5) (set! G4bcf@G4bca (make-record-type-descriptor '&i/o-port G4b07@G4b02 'G4bcd '#f '#f '#((immutable port)))) (set! G4bd1@G4bcc '#f) (set! G4bd3@G4bcb (make-record-constructor-descriptor G4bcf@G4bca G4b0b@G4b03 G4bd1@G4bcc)) (set! G4bd6@p? (record-predicate G4bcf@G4bca)) (set! G4bd8@make-i/o-port-error (record-constructor G4bd3@G4bcb)) (set! G4bda@G4bc9 (record-accessor G4bcf@G4bca '0)) (set! G4bdc@i/o-port-error? (condition-predicate G4bcf@G4bca)) (set! G4bde@i/o-error-port (condition-accessor G4bcf@G4bca G4bda@G4bc9)) (set! G4be0@&i/o-port-rtd G4bcf@G4bca) (set! G4be2@&i/o-port-rcd G4bd3@G4bcb) (set! G4be8@G4be3 (make-record-type-descriptor '&i/o-decoding G4bcf@G4bca 'G4be6 '#f '#f '#())) (set! G4bea@G4be5 '#f) (set! G4bec@G4be4 (make-record-constructor-descriptor G4be8@G4be3 G4bd3@G4bcb G4bea@G4be5)) (set! G4bef@p? (record-predicate G4be8@G4be3)) (set! G4bf1@make-i/o-decoding-error (record-constructor G4bec@G4be4)) (set! G4bf3@i/o-decoding-error? (condition-predicate G4be8@G4be3)) (set! G4bf5@&i/o-decoding-rtd G4be8@G4be3) (set! G4bf7@&i/o-decoding-rcd G4bec@G4be4) (set! G4bfe@G4bf9 (make-record-type-descriptor '&i/o-encoding G4bcf@G4bca 'G4bfc '#f '#f '#((immutable char)))) (set! G4c00@G4bfb '#f) (set! G4c02@G4bfa (make-record-constructor-descriptor G4bfe@G4bf9 G4bd3@G4bcb G4c00@G4bfb)) (set! G4c05@p? (record-predicate G4bfe@G4bf9)) (set! G4c07@make-i/o-encoding-error (record-constructor G4c02@G4bfa)) (set! G4c09@G4bf8 (record-accessor G4bfe@G4bf9 '0)) (set! G4c0b@i/o-encoding-error? (condition-predicate G4bfe@G4bf9)) (set! G4c0d@i/o-encoding-error-char (condition-accessor G4bfe@G4bf9 G4c09@G4bf8)) (set! G4c0f@&i/o-encoding-rtd G4bfe@G4bf9) (set! G4c11@&i/o-encoding-rcd G4c02@G4bfa) (set! G4c17@G4c12 (make-record-type-descriptor '&no-infinities G4aa9@G4aa4 'G4c15 '#f '#f '#())) (set! G4c19@G4c14 '#f) (set! G4c1b@G4c13 (make-record-constructor-descriptor G4c17@G4c12 G4aad@G4aa5 G4c19@G4c14)) (set! G4c1e@p? (record-predicate G4c17@G4c12)) (set! G4c20@make-no-infinities-violation (record-constructor G4c1b@G4c13)) (set! G4c22@no-infinities-violation? (condition-predicate G4c17@G4c12)) (set! G4c24@&no-infinities-rtd G4c17@G4c12) (set! G4c26@&no-infinities-rcd G4c1b@G4c13) (set! G4c2c@G4c27 (make-record-type-descriptor '&no-nans G4aa9@G4aa4 'G4c2a '#f '#f '#())) (set! G4c2e@G4c29 '#f) (set! G4c30@G4c28 (make-record-constructor-descriptor G4c2c@G4c27 G4aad@G4aa5 G4c2e@G4c29)) (set! G4c33@p? (record-predicate G4c2c@G4c27)) (set! G4c35@make-no-nans-violation (record-constructor G4c30@G4c28)) (set! G4c37@no-nans-violation? (condition-predicate G4c2c@G4c27)) (set! G4c39@&no-nans-rtd G4c2c@G4c27) (set! G4c3b@&no-nans-rcd G4c30@G4c28) (begin (set! G4d2c@G4c3b@&no-nans-rcd G4c3b@&no-nans-rcd) (set! G4d2b@G4c39@&no-nans-rtd G4c39@&no-nans-rtd) (set! G4d2a@G4c37@no-nans-violation? G4c37@no-nans-violation?) (set! G4d29@G4c35@make-no-nans-violation G4c35@make-no-nans-violation) (set! G4d28@G4c33@p? G4c33@p?) (set! G4d27@G4c30@G4c28 G4c30@G4c28) (set! G4d26@G4c2e@G4c29 G4c2e@G4c29) (set! G4d25@G4c2c@G4c27 G4c2c@G4c27) (set! G4d24@G4c26@&no-infinities-rcd G4c26@&no-infinities-rcd) (set! G4d23@G4c24@&no-infinities-rtd G4c24@&no-infinities-rtd) (set! G4d22@G4c22@no-infinities-violation? G4c22@no-infinities-violation?) (set! G4d21@G4c20@make-no-infinities-violation G4c20@make-no-infinities-violation) (set! G4d20@G4c1e@p? G4c1e@p?) (set! G4d1f@G4c1b@G4c13 G4c1b@G4c13) (set! G4d1e@G4c19@G4c14 G4c19@G4c14) (set! G4d1d@G4c17@G4c12 G4c17@G4c12) (set! G4d1c@G4c11@&i/o-encoding-rcd G4c11@&i/o-encoding-rcd) (set! G4d1b@G4c0f@&i/o-encoding-rtd G4c0f@&i/o-encoding-rtd) (set! G4d1a@G4c0d@i/o-encoding-error-char G4c0d@i/o-encoding-error-char) (set! G4d19@G4c0b@i/o-encoding-error? G4c0b@i/o-encoding-error?) (set! G4d18@G4c09@G4bf8 G4c09@G4bf8) (set! G4d17@G4c07@make-i/o-encoding-error G4c07@make-i/o-encoding-error) (set! G4d16@G4c05@p? G4c05@p?) (set! G4d15@G4c02@G4bfa G4c02@G4bfa) (set! G4d14@G4c00@G4bfb G4c00@G4bfb) (set! G4d13@G4bfe@G4bf9 G4bfe@G4bf9) (set! G4d12@G4bf7@&i/o-decoding-rcd G4bf7@&i/o-decoding-rcd) (set! G4d11@G4bf5@&i/o-decoding-rtd G4bf5@&i/o-decoding-rtd) (set! G4d10@G4bf3@i/o-decoding-error? G4bf3@i/o-decoding-error?) (set! G4d0f@G4bf1@make-i/o-decoding-error G4bf1@make-i/o-decoding-error) (set! G4d0e@G4bef@p? G4bef@p?) (set! G4d0d@G4bec@G4be4 G4bec@G4be4) (set! G4d0c@G4bea@G4be5 G4bea@G4be5) (set! G4d0b@G4be8@G4be3 G4be8@G4be3) (set! G4d0a@G4be2@&i/o-port-rcd G4be2@&i/o-port-rcd) (set! G4d09@G4be0@&i/o-port-rtd G4be0@&i/o-port-rtd) (set! G4d08@G4bde@i/o-error-port G4bde@i/o-error-port) (set! G4d07@G4bdc@i/o-port-error? G4bdc@i/o-port-error?) (set! G4d06@G4bda@G4bc9 G4bda@G4bc9) (set! G4d05@G4bd8@make-i/o-port-error G4bd8@make-i/o-port-error) (set! G4d04@G4bd6@p? G4bd6@p?) (set! G4d03@G4bd3@G4bcb G4bd3@G4bcb) (set! G4d02@G4bd1@G4bcc G4bd1@G4bcc) (set! G4d01@G4bcf@G4bca G4bcf@G4bca) (set! G4d00@G4bc8@&i/o-file-does-not-exist-rcd G4bc8@&i/o-file-does-not-exist-rcd) (set! G4cff@G4bc6@&i/o-file-does-not-exist-rtd G4bc6@&i/o-file-does-not-exist-rtd) (set! G4cfe@G4bc4@i/o-file-does-not-exist-error? G4bc4@i/o-file-does-not-exist-error?) (set! G4cfd@G4bc2@make-i/o-file-does-not-exist-error G4bc2@make-i/o-file-does-not-exist-error) (set! G4cfc@G4bc0@p? G4bc0@p?) (set! G4cfb@G4bbd@G4bb5 G4bbd@G4bb5) (set! G4cfa@G4bbb@G4bb6 G4bbb@G4bb6) (set! G4cf9@G4bb9@G4bb4 G4bb9@G4bb4) (set! G4cf8@G4bb3@&i/o-file-already-exists-rcd G4bb3@&i/o-file-already-exists-rcd) (set! G4cf7@G4bb1@&i/o-file-already-exists-rtd G4bb1@&i/o-file-already-exists-rtd) (set! G4cf6@G4baf@i/o-file-already-exists-error? G4baf@i/o-file-already-exists-error?) (set! G4cf5@G4bad@make-i/o-file-already-exists-error G4bad@make-i/o-file-already-exists-error) (set! G4cf4@G4bab@p? G4bab@p?) (set! G4cf3@G4ba8@G4ba0 G4ba8@G4ba0) (set! G4cf2@G4ba6@G4ba1 G4ba6@G4ba1) (set! G4cf1@G4ba4@G4b9f G4ba4@G4b9f) (set! G4cf0@G4b9e@&i/o-file-is-read-only-rcd G4b9e@&i/o-file-is-read-only-rcd) (set! G4cef@G4b9c@&i/o-file-is-read-only-rtd G4b9c@&i/o-file-is-read-only-rtd) (set! G4cee@G4b9a@i/o-file-is-read-only-error? G4b9a@i/o-file-is-read-only-error?) (set! G4ced@G4b98@make-i/o-file-is-read-only-error G4b98@make-i/o-file-is-read-only-error) (set! G4cec@G4b96@p? G4b96@p?) (set! G4ceb@G4b93@G4b8b G4b93@G4b8b) (set! G4cea@G4b91@G4b8c G4b91@G4b8c) (set! G4ce9@G4b8f@G4b8a G4b8f@G4b8a) (set! G4ce8@G4b89@&i/o-file-protection-rcd G4b89@&i/o-file-protection-rcd) (set! G4ce7@G4b87@&i/o-file-protection-rtd G4b87@&i/o-file-protection-rtd) (set! G4ce6@G4b85@i/o-file-protection-error? G4b85@i/o-file-protection-error?) (set! G4ce5@G4b83@make-i/o-file-protection-error G4b83@make-i/o-file-protection-error) (set! G4ce4@G4b81@p? G4b81@p?) (set! G4ce3@G4b7e@G4b76 G4b7e@G4b76) (set! G4ce2@G4b7c@G4b77 G4b7c@G4b77) (set! G4ce1@G4b7a@G4b75 G4b7a@G4b75) (set! G4ce0@G4b74@&i/o-filename-rcd G4b74@&i/o-filename-rcd) (set! G4cdf@G4b72@&i/o-filename-rtd G4b72@&i/o-filename-rtd) (set! G4cde@G4b70@i/o-error-filename G4b70@i/o-error-filename) (set! G4cdd@G4b6e@i/o-filename-error? G4b6e@i/o-filename-error?) (set! G4cdc@G4b6c@G4b5b G4b6c@G4b5b) (set! G4cdb@G4b6a@make-i/o-filename-error G4b6a@make-i/o-filename-error) (set! G4cda@G4b68@p? G4b68@p?) (set! G4cd9@G4b65@G4b5d G4b65@G4b5d) (set! G4cd8@G4b63@G4b5e G4b63@G4b5e) (set! G4cd7@G4b61@G4b5c G4b61@G4b5c) (set! G4cd6@G4b5a@&i/o-invalid-position-rcd G4b5a@&i/o-invalid-position-rcd) (set! G4cd5@G4b58@&i/o-invalid-position-rtd G4b58@&i/o-invalid-position-rtd) (set! G4cd4@G4b56@i/o-error-position G4b56@i/o-error-position) (set! G4cd3@G4b54@i/o-invalid-position-error? G4b54@i/o-invalid-position-error?) (set! G4cd2@G4b52@G4b41 G4b52@G4b41) (set! G4cd1@G4b50@make-i/o-invalid-position-error G4b50@make-i/o-invalid-position-error) (set! G4cd0@G4b4e@p? G4b4e@p?) (set! G4ccf@G4b4b@G4b43 G4b4b@G4b43) (set! G4cce@G4b49@G4b44 G4b49@G4b44) (set! G4ccd@G4b47@G4b42 G4b47@G4b42) (set! G4ccc@G4b40@&i/o-write-rcd G4b40@&i/o-write-rcd) (set! G4ccb@G4b3e@&i/o-write-rtd G4b3e@&i/o-write-rtd) (set! G4cca@G4b3c@i/o-write-error? G4b3c@i/o-write-error?) (set! G4cc9@G4b3a@make-i/o-write-error G4b3a@make-i/o-write-error) (set! G4cc8@G4b38@p? G4b38@p?) (set! G4cc7@G4b35@G4b2d G4b35@G4b2d) (set! G4cc6@G4b33@G4b2e G4b33@G4b2e) (set! G4cc5@G4b31@G4b2c G4b31@G4b2c) (set! G4cc4@G4b2b@&i/o-read-rcd G4b2b@&i/o-read-rcd) (set! G4cc3@G4b29@&i/o-read-rtd G4b29@&i/o-read-rtd) (set! G4cc2@G4b27@i/o-read-error? G4b27@i/o-read-error?) (set! G4cc1@G4b25@make-i/o-read-error G4b25@make-i/o-read-error) (set! G4cc0@G4b23@p? G4b23@p?) (set! G4cbf@G4b20@G4b18 G4b20@G4b18) (set! G4cbe@G4b1e@G4b19 G4b1e@G4b19) (set! G4cbd@G4b1c@G4b17 G4b1c@G4b17) (set! G4cbc@G4b16@&i/o-rcd G4b16@&i/o-rcd) (set! G4cbb@G4b14@&i/o-rtd G4b14@&i/o-rtd) (set! G4cba@G4b12@i/o-error? G4b12@i/o-error?) (set! G4cb9@G4b10@make-i/o-error G4b10@make-i/o-error) (set! G4cb8@G4b0e@p? G4b0e@p?) (set! G4cb7@G4b0b@G4b03 G4b0b@G4b03) (set! G4cb6@G4b09@G4b04 G4b09@G4b04) (set! G4cb5@G4b07@G4b02 G4b07@G4b02) (set! G4cb4@G4b01@&undefined-rcd G4b01@&undefined-rcd) (set! G4cb3@G4aff@&undefined-rtd G4aff@&undefined-rtd) (set! G4cb2@G4afd@undefined-violation? G4afd@undefined-violation?) (set! G4cb1@G4afb@make-undefined-violation G4afb@make-undefined-violation) (set! G4cb0@G4af9@p? G4af9@p?) (set! G4caf@G4af6@G4aee G4af6@G4aee) (set! G4cae@G4af4@G4aef G4af4@G4aef) (set! G4cad@G4af2@G4aed G4af2@G4aed) (set! G4cac@G4aec@&syntax-rcd G4aec@&syntax-rcd) (set! G4cab@G4aea@&syntax-rtd G4aea@&syntax-rtd) (set! G4caa@G4ae8@syntax-violation-subform G4ae8@syntax-violation-subform) (set! G4ca9@G4ae6@syntax-violation-form G4ae6@syntax-violation-form) (set! G4ca8@G4ae4@syntax-violation? G4ae4@syntax-violation?) (set! G4ca7@G4ae2@G4acf G4ae2@G4acf) (set! G4ca6@G4ae0@G4ace G4ae0@G4ace) (set! G4ca5@G4ade@make-syntax-violation G4ade@make-syntax-violation) (set! G4ca4@G4adc@p? G4adc@p?) (set! G4ca3@G4ad9@G4ad1 G4ad9@G4ad1) (set! G4ca2@G4ad7@G4ad2 G4ad7@G4ad2) (set! G4ca1@G4ad5@G4ad0 G4ad5@G4ad0) (set! G4ca0@G4acd@&lexical-rcd G4acd@&lexical-rcd) (set! G4c9f@G4acb@&lexical-rtd G4acb@&lexical-rtd) (set! G4c9e@G4ac9@lexical-violation? G4ac9@lexical-violation?) (set! G4c9d@G4ac7@make-lexical-violation G4ac7@make-lexical-violation) (set! G4c9c@G4ac5@p? G4ac5@p?) (set! G4c9b@G4ac2@G4aba G4ac2@G4aba) (set! G4c9a@G4ac0@G4abb G4ac0@G4abb) (set! G4c99@G4abe@G4ab9 G4abe@G4ab9) (set! G4c98@G4ab8@&implementation-restriction-rcd G4ab8@&implementation-restriction-rcd) (set! G4c97@G4ab6@&implementation-restriction-rtd G4ab6@&implementation-restriction-rtd) (set! G4c96@G4ab4@implementation-restriction-violation? G4ab4@implementation-restriction-violation?) (set! G4c95@G4ab2@make-implementation-restriction-violation G4ab2@make-implementation-restriction-violation) (set! G4c94@G4ab0@p? G4ab0@p?) (set! G4c93@G4aad@G4aa5 G4aad@G4aa5) (set! G4c92@G4aab@G4aa6 G4aab@G4aa6) (set! G4c91@G4aa9@G4aa4 G4aa9@G4aa4) (set! G4c90@G4aa3@&non-continuable-rcd G4aa3@&non-continuable-rcd) (set! G4c8f@G4aa1@&non-continuable-rtd G4aa1@&non-continuable-rtd) (set! G4c8e@G4a9f@non-continuable-violation? G4a9f@non-continuable-violation?) (set! G4c8d@G4a9d@make-non-continuable-violation G4a9d@make-non-continuable-violation) (set! G4c8c@G4a9b@p? G4a9b@p?) (set! G4c8b@G4a98@G4a90 G4a98@G4a90) (set! G4c8a@G4a96@G4a91 G4a96@G4a91) (set! G4c89@G4a94@G4a8f G4a94@G4a8f) (set! G4c88@G4a8e@&who-rcd G4a8e@&who-rcd) (set! G4c87@G4a8c@&who-rtd G4a8c@&who-rtd) (set! G4c86@G4a8a@condition-who G4a8a@condition-who) (set! G4c85@G4a88@who-condition? G4a88@who-condition?) (set! G4c84@G4a86@G4a75 G4a86@G4a75) (set! G4c83@G4a84@make-who-condition G4a84@make-who-condition) (set! G4c82@G4a82@p? G4a82@p?) (set! G4c81@G4a7f@G4a77 G4a7f@G4a77) (set! G4c80@G4a7d@G4a78 G4a7d@G4a78) (set! G4c7f@G4a7b@G4a76 G4a7b@G4a76) (set! G4c7e@G4a74@&irritants-rcd G4a74@&irritants-rcd) (set! G4c7d@G4a72@&irritants-rtd G4a72@&irritants-rtd) (set! G4c7c@G4a70@condition-irritants G4a70@condition-irritants) (set! G4c7b@G4a6e@irritants-condition? G4a6e@irritants-condition?) (set! G4c7a@G4a6c@G4a5b G4a6c@G4a5b) (set! G4c79@G4a6a@make-irritants-condition G4a6a@make-irritants-condition) (set! G4c78@G4a68@p? G4a68@p?) (set! G4c77@G4a65@G4a5d G4a65@G4a5d) (set! G4c76@G4a63@G4a5e G4a63@G4a5e) (set! G4c75@G4a61@G4a5c G4a61@G4a5c) (set! G4c74@G4a5a@&assertion-rcd G4a5a@&assertion-rcd) (set! G4c73@G4a58@&assertion-rtd G4a58@&assertion-rtd) (set! G4c72@G4a56@assertion-violation? G4a56@assertion-violation?) (set! G4c71@G4a54@make-assertion-violation G4a54@make-assertion-violation) (set! G4c70@G4a52@p? G4a52@p?) (set! G4c6f@G4a4f@G4a47 G4a4f@G4a47) (set! G4c6e@G4a4d@G4a48 G4a4d@G4a48) (set! G4c6d@G4a4b@G4a46 G4a4b@G4a46) (set! G4c6c@G4a45@&violation-rcd G4a45@&violation-rcd) (set! G4c6b@G4a43@&violation-rtd G4a43@&violation-rtd) (set! G4c6a@G4a41@violation? G4a41@violation?) (set! G4c69@G4a3f@make-violation G4a3f@make-violation) (set! G4c68@G4a3d@p? G4a3d@p?) (set! G4c67@G4a3a@G4a32 G4a3a@G4a32) (set! G4c66@G4a38@G4a33 G4a38@G4a33) (set! G4c65@G4a36@G4a31 G4a36@G4a31) (set! G4c64@G4a30@&error-rcd G4a30@&error-rcd) (set! G4c63@G4a2e@&error-rtd G4a2e@&error-rtd) (set! G4c62@G4a2c@error? G4a2c@error?) (set! G4c61@G4a2a@make-error G4a2a@make-error) (set! G4c60@G4a28@p? G4a28@p?) (set! G4c5f@G4a25@G4a1d G4a25@G4a1d) (set! G4c5e@G4a23@G4a1e G4a23@G4a1e) (set! G4c5d@G4a21@G4a1c G4a21@G4a1c) (set! G4c5c@G4a1b@&serious-rcd G4a1b@&serious-rcd) (set! G4c5b@G4a19@&serious-rtd G4a19@&serious-rtd) (set! G4c5a@G4a17@serious-condition? G4a17@serious-condition?) (set! G4c59@G4a15@make-serious-condition G4a15@make-serious-condition) (set! G4c58@G4a13@p? G4a13@p?) (set! G4c57@G4a10@G4a08 G4a10@G4a08) (set! G4c56@G4a0e@G4a09 G4a0e@G4a09) (set! G4c55@G4a0c@G4a07 G4a0c@G4a07) (set! G4c54@G4a06@&warning-rcd G4a06@&warning-rcd) (set! G4c53@G4a04@&warning-rtd G4a04@&warning-rtd) (set! G4c52@G4a02@warning? G4a02@warning?) (set! G4c51@G4a00@make-warning G4a00@make-warning) (set! G4c50@G49fe@p? G49fe@p?) (set! G4c4f@G49fb@G49f3 G49fb@G49f3) (set! G4c4e@G49f9@G49f4 G49f9@G49f4) (set! G4c4d@G49f7@G49f2 G49f7@G49f2) (set! G4c4c@G49f1@&message-rcd G49f1@&message-rcd) (set! G4c4b@G49ef@&message-rtd G49ef@&message-rtd) (set! G4c4a@G49ed@condition-message G49ed@condition-message) (set! G4c49@G49eb@message-condition? G49eb@message-condition?) (set! G4c48@G49e9@G49d8 G49e9@G49d8) (set! G4c47@G49e7@make-message-condition G49e7@make-message-condition) (set! G4c46@G49e5@p? G49e5@p?) (set! G4c45@G49e2@G49da G49e2@G49da) (set! G4c44@G49e0@G49db G49e0@G49db) (set! G4c43@G49de@G49d9 G49de@G49d9) (set! G4c42@G4994@&condition-rcd G4994@&condition-rcd) (set! G4c41@G4992@&condition-rtd G4992@&condition-rtd) (set! G4c40@G4990@make-&condition G4990@make-&condition) (set! G4c3f@G498e@&condition? G498e@&condition?) (set! G4c3e@G498b@G4983 G498b@G4983) (set! G4c3d@G4989@G4984 G4989@G4984) (set! G4c3c@G4987@G4982 G4987@G4982)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G295c@G2911@current-primitive-locations (lambda (G50d3@x) ((lambda (G50d5@t) (if G50d5@t (cdr G50d5@t) '#f)) (assq G50d3@x '((&no-nans-rcd . G4d2c@G4c3b@&no-nans-rcd) (&no-nans-rtd . G4d2b@G4c39@&no-nans-rtd) (&no-infinities-rcd . G4d24@G4c26@&no-infinities-rcd) (&no-infinities-rtd . G4d23@G4c24@&no-infinities-rtd) (&i/o-encoding-rcd . G4d1c@G4c11@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4d1b@G4c0f@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4d12@G4bf7@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4d11@G4bf5@&i/o-decoding-rtd) (&i/o-port-rcd . G4d0a@G4be2@&i/o-port-rcd) (&i/o-port-rtd . G4d09@G4be0@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4d00@G4bc8@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cff@G4bc6@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cf8@G4bb3@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cf7@G4bb1@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cf0@G4b9e@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cef@G4b9c@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4ce8@G4b89@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4ce7@G4b87@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4ce0@G4b74@&i/o-filename-rcd) (&i/o-filename-rtd . G4cdf@G4b72@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4cd6@G4b5a@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4cd5@G4b58@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4ccc@G4b40@&i/o-write-rcd) (&i/o-write-rtd . G4ccb@G4b3e@&i/o-write-rtd) (&i/o-read-rcd . G4cc4@G4b2b@&i/o-read-rcd) (&i/o-read-rtd . G4cc3@G4b29@&i/o-read-rtd) (&i/o-rcd . G4cbc@G4b16@&i/o-rcd) (&i/o-rtd . G4cbb@G4b14@&i/o-rtd) (&undefined-rcd . G4cb4@G4b01@&undefined-rcd) (&undefined-rtd . G4cb3@G4aff@&undefined-rtd) (&syntax-rcd . G4cac@G4aec@&syntax-rcd) (&syntax-rtd . G4cab@G4aea@&syntax-rtd) (&lexical-rcd . G4ca0@G4acd@&lexical-rcd) (&lexical-rtd . G4c9f@G4acb@&lexical-rtd) (&implementation-restriction-rcd . G4c98@G4ab8@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c97@G4ab6@&implementation-restriction-rtd) (&non-continuable-rcd . G4c90@G4aa3@&non-continuable-rcd) (&non-continuable-rtd . G4c8f@G4aa1@&non-continuable-rtd) (&who-rcd . G4c88@G4a8e@&who-rcd) (&who-rtd . G4c87@G4a8c@&who-rtd) (&irritants-rcd . G4c7e@G4a74@&irritants-rcd) (&irritants-rtd . G4c7d@G4a72@&irritants-rtd) (&assertion-rcd . G4c74@G4a5a@&assertion-rcd) (&assertion-rtd . G4c73@G4a58@&assertion-rtd) (&violation-rcd . G4c6c@G4a45@&violation-rcd) (&violation-rtd . G4c6b@G4a43@&violation-rtd) (&error-rcd . G4c64@G4a30@&error-rcd) (&error-rtd . G4c63@G4a2e@&error-rtd) (&serious-rcd . G4c5c@G4a1b@&serious-rcd) (&serious-rtd . G4c5b@G4a19@&serious-rtd) (&warning-rcd . G4c54@G4a06@&warning-rcd) (&warning-rtd . G4c53@G4a04@&warning-rtd) (&message-rcd . G4c4c@G49f1@&message-rcd) (&message-rtd . G4c4b@G49ef@&message-rtd) (&condition-rcd . G4c42@G4994@&condition-rcd) (&condition-rtd . G4c41@G4992@&condition-rtd) (syntax-error . G4973@G3055@syntax-error) (syntax-dispatch . G4907@G2f6e@syntax-dispatch) (load . G4dcf@G4d3c@load) (interaction-environment . G497c@G3067@interaction-environment) (make-parameter . G290b@G2841@make-parameter) (make-variable-transformer . G48c5@G2da9@make-variable-transformer) (identifier? . G4977@G305d@identifier?) (generate-temporaries . G496c@G3047@generate-temporaries) (free-identifier=? . G496d@G3049@free-identifier=?) (syntax->datum . G4979@G3061@syntax->datum) (datum->syntax . G4978@G305f@datum->syntax) (bound-identifier=? . G496e@G304b@bound-identifier=?) (make-i/o-write-error . G4cc9@G4b3a@make-i/o-write-error) (make-i/o-read-error . G4cc1@G4b25@make-i/o-read-error) (make-i/o-port-error . G4d05@G4bd8@make-i/o-port-error) (make-i/o-invalid-position-error . G4cd1@G4b50@make-i/o-invalid-position-error) (make-i/o-filename-error . G4cdb@G4b6a@make-i/o-filename-error) (make-i/o-file-protection-error . G4ce5@G4b83@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4ced@G4b98@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cfd@G4bc2@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cf5@G4bad@make-i/o-file-already-exists-error) (make-i/o-error . G4cb9@G4b10@make-i/o-error) (make-i/o-encoding-error . G4d17@G4c07@make-i/o-encoding-error) (make-i/o-decoding-error . G4d0f@G4bf1@make-i/o-decoding-error) (i/o-write-error? . G4cca@G4b3c@i/o-write-error?) (i/o-read-error? . G4cc2@G4b27@i/o-read-error?) (i/o-port-error? . G4d07@G4bdc@i/o-port-error?) (i/o-invalid-position-error? . G4cd3@G4b54@i/o-invalid-position-error?) (i/o-filename-error? . G4cdd@G4b6e@i/o-filename-error?) (i/o-file-protection-error? . G4ce6@G4b85@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cee@G4b9a@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cfe@G4bc4@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cf6@G4baf@i/o-file-already-exists-error?) (i/o-error? . G4cba@G4b12@i/o-error?) (i/o-error-port . G4d08@G4bde@i/o-error-port) (i/o-error-filename . G4cde@G4b70@i/o-error-filename) (i/o-encoding-error? . G4d19@G4c0b@i/o-encoding-error?) (i/o-encoding-error-char . G4d1a@G4c0d@i/o-encoding-error-char) (i/o-decoding-error? . G4d10@G4bf3@i/o-decoding-error?) (scheme-report-environment . G4963@G3035@scheme-report-environment) (null-environment . G4962@G3033@null-environment) (command-line . G4dcc@G4d36@command-line) (eval . G4965@G3039@eval) (environment . G4961@G3031@environment) (who-condition? . G4c85@G4a88@who-condition?) (warning? . G4c52@G4a02@warning?) (violation? . G4c6a@G4a41@violation?) (undefined-violation? . G4cb2@G4afd@undefined-violation?) (syntax-violation? . G4ca8@G4ae4@syntax-violation?) (syntax-violation-subform . G4caa@G4ae8@syntax-violation-subform) (syntax-violation-form . G4ca9@G4ae6@syntax-violation-form) (syntax-violation . G4976@G305b@syntax-violation) (serious-condition? . G4c5a@G4a17@serious-condition?) (non-continuable-violation? . G4c8e@G4a9f@non-continuable-violation?) (message-condition? . G4c49@G49eb@message-condition?) (make-who-condition . G4c83@G4a84@make-who-condition) (make-warning . G4c51@G4a00@make-warning) (make-violation . G4c69@G4a3f@make-violation) (make-undefined-violation . G4cb1@G4afb@make-undefined-violation) (make-syntax-violation . G4ca5@G4ade@make-syntax-violation) (make-serious-condition . G4c59@G4a15@make-serious-condition) (make-non-continuable-violation . G4c8d@G4a9d@make-non-continuable-violation) (make-message-condition . G4c47@G49e7@make-message-condition) (make-lexical-violation . G4c9d@G4ac7@make-lexical-violation) (make-irritants-condition . G4c79@G4a6a@make-irritants-condition) (make-implementation-restriction-violation . G4c95@G4ab2@make-implementation-restriction-violation) (make-error . G4c61@G4a2a@make-error) (make-assertion-violation . G4c71@G4a54@make-assertion-violation) (lexical-violation? . G4c9e@G4ac9@lexical-violation?) (irritants-condition? . G4c7b@G4a6e@irritants-condition?) (implementation-restriction-violation? . G4c96@G4ab4@implementation-restriction-violation?) (error? . G4c62@G4a2c@error?) (condition-who . G4c86@G4a8a@condition-who) (condition-message . G4c4a@G49ed@condition-message) (condition-irritants . G4c7c@G4a70@condition-irritants) (assertion-violation? . G4c72@G4a56@assertion-violation?) (no-nans-violation? . G4d2a@G4c37@no-nans-violation?) (no-infinities-violation? . G4d22@G4c22@no-infinities-violation?) (make-no-nans-violation . G4d29@G4c35@make-no-nans-violation) (make-no-infinities-violation . G4d21@G4c20@make-no-infinities-violation)))))) (G2b84@G2a29@install-library 'G50a6 '(mosh interaction) '() '() '() '() '((string-upcase . G5057) (string-titlecase . G5056) (string-normalize-nfkd . G5055) (string-normalize-nfkc . G5054) (string-normalize-nfd . G5053) (string-normalize-nfc . G5052) (string-foldcase . G5051) (string-downcase . G5050) (string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-title-case? . G5048) (char-numeric? . G5047) (char-lower-case? . G5046) (char-general-category . G5045) (char-upcase . G5044) (char-titlecase . G5043) (char-foldcase . G5042) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b) (make-variable-transformer . G2da8) (identifier? . G305c) (generate-temporaries . G3046) (free-identifier=? . G3048) (syntax->datum . G3060) (datum->syntax . G305e) (bound-identifier=? . G304a) (record-type-descriptor? . G503a) (record-predicate . G5039) (record-mutator . G5038) (record-constructor . G5037) (record-accessor . G5036) (make-record-type-descriptor . G5035) (make-record-constructor-descriptor . G5034) (record? . G5033) (record-type-uid . G5032) (record-type-sealed? . G5031) (record-type-parent . G5030) (record-type-opaque? . G502f) (record-type-name . G502e) (record-type-generative? . G502d) (record-type-field-names . G502c) (record-rtd . G502b) (record-field-mutable? . G502a) (delete-file . G5029) (file-exists? . G5028) (vector-sort! . G5027) (vector-sort . G5026) (list-sort . G5025) (symbol-hash . G5024) (string-ci-hash . G5023) (string-hash . G5022) (equal-hash . G5021) (hashtable-equivalence-function . G5020) (make-hashtable . G501f) (hashtable-hash-function . G501e) (make-eqv-hashtable . G501d) (make-eq-hashtable . G501c) (hashtable? . G501b) (hashtable-update! . G501a) (hashtable-size . G5019) (hashtable-set! . G5018) (hashtable-ref . G5017) (hashtable-mutable? . G5016) (hashtable-keys . G5015) (hashtable-entries . G5014) (hashtable-delete! . G5013) (hashtable-copy . G5012) (hashtable-contains? . G5011) (hashtable-clear! . G5010) (call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (utf-8-codec . G4ff9) (utf-16-codec . G4ff8) (transcoder-error-handling-mode . G4ff7) (transcoder-eol-style . G4ff6) (transcoder-codec . G4ff5) (transcoded-port . G4ff4) (textual-port? . G4ff3) (string->bytevector . G4ff2) (standard-output-port . G4ff1) (standard-input-port . G4ff0) (standard-error-port . G4fef) (set-port-position! . G4fee) (put-u8 . G4fed) (put-string . G4fec) (put-datum . G4feb) (put-char . G4fea) (put-bytevector . G4fe9) (port? . G4fe8) (port-transcoder . G4fe7) (port-position . G4fe6) (port-has-set-port-position!? . G4fe5) (port-has-port-position? . G4fe4) (port-eof? . G4fe3) (output-port-buffer-mode . G4fe2) (open-string-output-port . G4fe1) (open-string-input-port . G4fe0) (open-file-output-port . G4fdf) (open-file-input/output-port . G4fde) (open-file-input-port . G4fdd) (open-bytevector-output-port . G4fdc) (open-bytevector-input-port . G4fdb) (native-transcoder . G4fda) (native-eol-style . G4fd9) (make-transcoder . G4fd8) (latin-1-codec . G4fd7) (make-i/o-write-error . G4b39) (make-i/o-read-error . G4b24) (make-i/o-port-error . G4bd7) (make-i/o-invalid-position-error . G4b4f) (make-i/o-filename-error . G4b69) (make-i/o-file-protection-error . G4b82) (make-i/o-file-is-read-only-error . G4b97) (make-i/o-file-does-not-exist-error . G4bc1) (make-i/o-file-already-exists-error . G4bac) (make-i/o-error . G4b0f) (make-i/o-encoding-error . G4c06) (make-i/o-decoding-error . G4bf0) (make-custom-textual-output-port . G4fd6) (make-custom-textual-input/output-port . G4fd5) (make-custom-textual-input-port . G4fd4) (make-custom-binary-output-port . G4fd3) (make-custom-binary-input/output-port . G4fd2) (make-custom-binary-input-port . G4fd1) (make-bytevector . G4fd0) (lookahead-u8 . G4fcf) (lookahead-char . G4fce) (i/o-write-error? . G4b3b) (i/o-read-error? . G4b26) (i/o-port-error? . G4bdb) (i/o-invalid-position-error? . G4b53) (i/o-filename-error? . G4b6d) (i/o-file-protection-error? . G4b84) (i/o-file-is-read-only-error? . G4b99) (i/o-file-does-not-exist-error? . G4bc3) (i/o-file-already-exists-error? . G4bae) (i/o-error? . G4b11) (i/o-error-port . G4bdd) (i/o-error-filename . G4b6f) (i/o-encoding-error? . G4c0a) (i/o-encoding-error-char . G4c0c) (i/o-decoding-error? . G4bf2) (get-u8 . G4fcd) (get-string-n! . G4fcc) (get-string-n . G4fcb) (get-string-all . G4fca) (get-line . G4fc9) (get-datum . G4fc8) (get-char . G4fc7) (get-bytevector-some . G4fc6) (get-bytevector-n! . G4fc5) (get-bytevector-n . G4fc4) (get-bytevector-all . G4fc3) (flush-output-port . G4fc2) (close-port . G4fc1) (exit . G4fb9) (command-line . G4d35) (string-fill! . G4fb8) (string-set! . G4fb7) (set-cdr! . G4fb6) (set-car! . G4fb5) (remove . G4fb4) (remv . G4fb3) (remp . G4fb2) (remq . G4fb1) (partition . G4fb0) (memv . G4faf) (memq . G4fae) (memp . G4fad) (member . G4fac) (exists . G4fab) (for-all . G4faa) (fold-right . G4fa9) (fold-left . G4fa8) (find . G4fa7) (filter . G4fa6) (cons* . G4fa5) (assv . G4fa4) (assq . G4fa3) (assp . G4fa2) (assoc . G4fa1) (call-with-string-output-port . G4fa0) (call-with-port . G4f9f) (call-with-bytevector-output-port . G4f9e) (bytevector->string . G4f9d) (buffer-mode? . G4f9c) (binary-port? . G4f9b) (with-exception-handler . G4f9a) (raise-continuable . G4f99) (raise . G4f98) (eval . G3038) (environment . G3030) (make-enumeration . G4f97) (enum-set=? . G4f96) (enum-set-universe . G4f95) (enum-set-union . G4f94) (enum-set-subset? . G4f93) (enum-set-projection . G4f92) (enum-set-member? . G4f91) (enum-set-intersection . G4f90) (enum-set-indexer . G4f8f) (enum-set-difference . G4f8e) (enum-set-constructor . G4f8d) (enum-set-complement . G4f8c) (enum-set->list . G4f8b) (who-condition? . G4a87) (warning? . G4a01) (violation? . G4a40) (undefined-violation? . G4afc) (syntax-violation? . G4ae3) (syntax-violation-subform . G4ae7) (syntax-violation-form . G4ae5) (syntax-violation . G305a) (simple-conditions . G4f8a) (serious-condition? . G4a16) (non-continuable-violation? . G4a9e) (message-condition? . G49ea) (make-who-condition . G4a83) (make-warning . G49ff) (make-violation . G4a3e) (make-undefined-violation . G4afa) (make-syntax-violation . G4add) (make-serious-condition . G4a14) (make-non-continuable-violation . G4a9c) (make-message-condition . G49e6) (make-lexical-violation . G4ac6) (make-irritants-condition . G4a69) (make-implementation-restriction-violation . G4ab1) (make-error . G4a29) (make-assertion-violation . G4a53) (lexical-violation? . G4ac8) (irritants-condition? . G4a6d) (implementation-restriction-violation? . G4ab3) (error? . G4a2b) (condition-who . G4a89) (condition-predicate . G4f89) (condition-message . G49ec) (condition-irritants . G4a6f) (condition-accessor . G4f88) (condition . G4f87) (assertion-violation? . G4a55) (condition? . G4f86) (utf32->string . G4f85) (utf16->string . G4f84) (utf8->string . G4f83) (uint-list->bytevector . G4f82) (u8-list->bytevector . G4f81) (string->utf8 . G4f80) (string->utf32 . G4f7f) (string->utf16 . G4f7e) (sint-list->bytevector . G4f7d) (native-endianness . G4f7c) (bytevector? . G4f7b) (bytevector=? . G4f7a) (bytevector-uint-set! . G4f79) (bytevector-uint-ref . G4f78) (bytevector-u8-set! . G4f77) (bytevector-u8-ref . G4f76) (bytevector-u64-set! . G4f75) (bytevector-u64-ref . G4f74) (bytevector-u64-native-set! . G4f73) (bytevector-u64-native-ref . G4f72) (bytevector-u32-set! . G4f71) (bytevector-u32-ref . G4f70) (bytevector-u32-native-set! . G4f6f) (bytevector-u32-native-ref . G4f6e) (bytevector-u16-set! . G4f6d) (bytevector-u16-ref . G4f6c) (bytevector-u16-native-set! . G4f6b) (bytevector-u16-native-ref . G4f6a) (bytevector-sint-set! . G4f69) (bytevector-sint-ref . G4f68) (bytevector-s8-set! . G4f67) (bytevector-s8-ref . G4f66) (bytevector-s64-set! . G4f65) (bytevector-s64-ref . G4f64) (bytevector-s64-native-set! . G4f63) (bytevector-s64-native-ref . G4f62) (bytevector-s32-set! . G4f61) (bytevector-s32-ref . G4f60) (bytevector-s32-native-set! . G4f5f) (bytevector-s32-native-ref . G4f5e) (bytevector-s16-set! . G4f5d) (bytevector-s16-ref . G4f5c) (bytevector-s16-native-set! . G4f5b) (bytevector-s16-native-ref . G4f5a) (bytevector-length . G4f59) (bytevector-ieee-single-ref . G4f58) (bytevector-ieee-single-set! . G4f57) (bytevector-ieee-single-native-set! . G4f56) (bytevector-ieee-single-native-ref . G4f55) (bytevector-ieee-double-set! . G4f54) (bytevector-ieee-double-ref . G4f53) (bytevector-ieee-double-native-set! . G4f52) (bytevector-ieee-double-native-ref . G4f51) (bytevector-fill! . G4f50) (bytevector-copy! . G4f4f) (bytevector-copy . G4f4e) (bytevector->uint-list . G4f4d) (bytevector->u8-list . G4f4c) (bytevector->sint-list . G4f4b) (no-nans-violation? . G4c36) (no-infinities-violation? . G4c21) (make-no-nans-violation . G4c34) (make-no-infinities-violation . G4c1f) (real->flonum . G4f4a) (flzero? . G4f49) (fltruncate . G4f48) (fltan . G4f47) (flsqrt . G4f46) (flsin . G4f45) (flround . G4f44) (flpositive? . G4f43) (flonum? . G4f42) (flodd? . G4f41) (flnumerator . G4f40) (flnegative? . G4f3f) (flnan? . G4f3e) (flmod0 . G4f3d) (flmod . G4f3c) (flmin . G4f3b) (flmax . G4f3a) (fllog . G4f39) (flinteger? . G4f38) (flinfinite? . G4f37) (flfloor . G4f36) (flfinite? . G4f35) (flexpt . G4f34) (flexp . G4f33) (fleven? . G4f32) (fldiv0-and-mod0 . G4f31) (fldiv0 . G4f30) (fldiv-and-mod . G4f2f) (fldiv . G4f2e) (fldenominator . G4f2d) (flcos . G4f2c) (flceiling . G4f2b) (flatan . G4f2a) (flasin . G4f29) (flacos . G4f28) (flabs . G4f27) (fl>? . G4f26) (fl>=? . G4f25) (fl=? . G4f24) (fl<? . G4f23) (fl<=? . G4f22) (fl/ . G4f21) (fl- . G4f20) (fl+ . G4f1f) (fl* . G4f1e) (fixnum->flonum . G4f1d) (fxzero? . G4f1c) (fxxor . G4f1b) (fxrotate-bit-field . G4f1a) (fxreverse-bit-field . G4f19) (fxpositive? . G4f18) (fxodd? . G4f17) (fxnot . G4f16) (fxnegative? . G4f15) (fxmod0 . G4f14) (fxmod . G4f13) (fxmin . G4f12) (fxmax . G4f11) (fxlength . G4f10) (fxior . G4f0f) (fxif . G4f0e) (fxfirst-bit-set . G4f0d) (fxeven? . G4f0c) (fxdiv0-and-mod0 . G4f0b) (fxdiv0 . G4f0a) (fxdiv-and-mod . G4f09) (fxdiv . G4f08) (fxcopy-bit-field . G4f07) (fxcopy-bit . G4f06) (fxbit-set? . G4f05) (fxbit-field . G4f04) (fxbit-count . G4f03) (fxarithmetic-shift-right . G4f02) (fxarithmetic-shift-left . G4f01) (fxarithmetic-shift . G4f00) (fxand . G4eff) (fx>? . G4efe) (fx>=? . G4efd) (fx=? . G4efc) (fx<? . G4efb) (fx<=? . G4efa) (fx-/carry . G4ef9) (fx- . G4ef8) (fx+/carry . G4ef7) (fx+ . G4ef6) (fx*/carry . G4ef5) (fx* . G4ef4) (greatest-fixnum . G4ef3) (least-fixnum . G4ef2) (fixnum-width . G4ef1) (fixnum? . G4ef0) (bitwise-rotate-bit-field . G4eef) (bitwise-reverse-bit-field . G4eee) (bitwise-length . G4eed) (bitwise-if . G4eec) (bitwise-first-bit-set . G4eeb) (bitwise-copy-bit-field . G4eea) (bitwise-copy-bit . G4ee9) (bitwise-bit-set? . G4ee8) (bitwise-bit-field . G4ee7) (bitwise-bit-count . G4ee6) (bitwise-xor . G4ee5) (bitwise-ior . G4ee4) (bitwise-and . G4ee3) (bitwise-not . G4ee2) (bitwise-arithmetic-shift-right . G4ee1) (bitwise-arithmetic-shift-left . G4ee0) (bitwise-arithmetic-shift . G4edf) (zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-map . G4eda) (vector-length . G4ed9) (vector-for-each . G4ed8) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol=? . G4ed0) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-for-each . G4ec5) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-valued? . G4eb9) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (rational-valued? . G4eb5) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (null? . G4ead) (not . G4eac) (negative? . G4eab) (nan? . G4eaa) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer-valued? . G4e97) (integer->char . G4e96) (infinite? . G4e95) (inexact? . G4e94) (inexact . G4e93) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (finite? . G4e8e) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (exact-integer-sqrt . G4e8a) (exact . G4e89) (even? . G4e88) (error . G4e87) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (div0-and-mod0 . G4e82) (mod0 . G4e81) (div0 . G4e80) (div-and-mod . G4e7f) (mod . G4e7e) (div . G4e7d) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call/cc . G4e6f) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (boolean=? . G4e4e) (atan . G4e4d) (assertion-violation . G4e4c) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (library . G4e3c) (export . G4e3b) (&no-nans . G4e3a) (&no-infinities . G4e39) (&i/o-encoding . G4e38) (&i/o-decoding . G4e37) (&i/o-port . G4e36) (&i/o-file-does-not-exist . G4e35) (&i/o-file-already-exists . G4e34) (&i/o-file-is-read-only . G4e33) (&i/o-file-protection . G4e32) (&i/o-filename . G4e31) (&i/o-invalid-position . G4e30) (&i/o-write . G4e2f) (&i/o-read . G4e2e) (&i/o . G4e2d) (&undefined . G4e2c) (&syntax . G4e2b) (&lexical . G4e2a) (&implementation-restriction . G4e29) (&non-continuable . G4e28) (&who . G4e27) (&irritants . G4e26) (&assertion . G4e25) (&violation . G4e24) (&error . G4e23) (&serious . G4e22) (&warning . G4e21) (&message . G4e20) (&condition . G4e1f) (define-condition-type . G4e1e) (define-enumeration . G4e1d) (define-record-type . G4e1c) (parent-rtd . G4e1b) (nongenerative . G4e1a) (opaque . G4e19) (sealed . G4e18) (protocol . G4e17) (parent . G4e16) (immutable . G4e15) (mutable . G4e14) (fields . G4e13) (error-handling-mode . G4e12) (file-options . G4e11) (buffer-mode . G4e10) (eol-style . G4e0f) (guard . G4e0e) (unsyntax-splicing . G4e0b) (unsyntax . G4e0a) (unquote-splicing . G4e09) (unquote . G4e08) (assert . G4e03) (endianness . G4e02) (do . G4dff) (cond . G4dfe) (let* . G4dfd) (let . G4dfc) (let*-values . G4dfb) (let-values . G4dfa) (identifier-syntax . G4df9) (with-syntax . G4df8) (quasisyntax . G4df7) (quasiquote . G4df6) (syntax-rules . G4df5) (include . G4df4) (record-constructor-descriptor . G4df2) (record-type-descriptor . G4df1) (case . G4df0) (unless . G4dee) (when . G4ded) (or . G4dec) (and . G4deb) (if . G4dea) (letrec* . G4de9) (letrec . G4de8) (case-lambda . G4de6) (lambda . G4de5) (syntax . G4de4) (syntax-case . G4de3) (quote . G4de2) (letrec-syntax . G4de0) (let-syntax . G4ddf) (set! . G4dde) (import . G4ddd) (begin . G4ddc) (define-syntax . G4dda) (define . G4dd9)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50a7 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fba) (unquote-splicing . G4e09) (unquote . G4e08) (_ . G4e07) (else . G4e06) (=> . G4e05) (... . G4e04) (delay . G4e01) (do . G4dff) (cond . G4dfe) (let* . G4dfd) (let . G4dfc) (quasiquote . G4df6) (syntax-rules . G4df5) (case . G4df0) (or . G4dec) (and . G4deb) (if . G4dea) (letrec . G4de8) (lambda . G4de5) (quote . G4de2) (letrec-syntax . G4de0) (let-syntax . G4ddf) (set! . G4dde) (begin . G4ddc) (define-syntax . G4dda) (define . G4dd9)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50a8 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-numeric? . G5047) (char-lower-case? . G5046) (char-upcase . G5044) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b) (call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object . G4fff) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (scheme-report-environment . G3034) (quotient . G4fc0) (null-environment . G3032) (remainder . G4fbf) (modulo . G4fbe) (inexact->exact . G4fbd) (force . G4fbc) (exact->inexact . G4fbb) (make-promise . G4fba) (string-fill! . G4fb8) (string-set! . G4fb7) (set-cdr! . G4fb6) (set-car! . G4fb5) (memv . G4faf) (memq . G4fae) (member . G4fac) (assv . G4fa4) (assq . G4fa3) (assoc . G4fa1) (eval . G3038) (zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-length . G4ed9) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (not . G4eac) (negative? . G4eab) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer->char . G4e96) (inexact? . G4e94) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (even? . G4e88) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (atan . G4e4d) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (unquote-splicing . G4e09) (unquote . G4e08) (else . G4e06) (=> . G4e05) (... . G4e04) (delay . G4e01) (do . G4dff) (cond . G4dfe) (let* . G4dfd) (let . G4dfc) (quasiquote . G4df6) (syntax-rules . G4df5) (case . G4df0) (or . G4dec) (and . G4deb) (if . G4dea) (letrec . G4de8) (lambda . G4de5) (quote . G4de2) (letrec-syntax . G4de0) (let-syntax . G4ddf) (set! . G4dde) (begin . G4ddc) (define-syntax . G4dda) (define . G4dd9)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50a9 '(psyntax modules) '() '() '() '() '((module . G4ddb)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50aa '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50ab '(rnrs) '(6) '() '() '() '((regexp? . G509e) (string-upcase . G5057) (string-titlecase . G5056) (string-normalize-nfkd . G5055) (string-normalize-nfkc . G5054) (string-normalize-nfd . G5053) (string-normalize-nfc . G5052) (string-foldcase . G5051) (string-downcase . G5050) (string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-title-case? . G5048) (char-numeric? . G5047) (char-lower-case? . G5046) (char-general-category . G5045) (char-upcase . G5044) (char-titlecase . G5043) (char-foldcase . G5042) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b) (make-variable-transformer . G2da8) (identifier? . G305c) (generate-temporaries . G3046) (free-identifier=? . G3048) (syntax->datum . G3060) (datum->syntax . G305e) (bound-identifier=? . G304a) (record-type-descriptor? . G503a) (record-predicate . G5039) (record-mutator . G5038) (record-constructor . G5037) (record-accessor . G5036) (make-record-type-descriptor . G5035) (make-record-constructor-descriptor . G5034) (record? . G5033) (record-type-uid . G5032) (record-type-sealed? . G5031) (record-type-parent . G5030) (record-type-opaque? . G502f) (record-type-name . G502e) (record-type-generative? . G502d) (record-type-field-names . G502c) (record-rtd . G502b) (record-field-mutable? . G502a) (delete-file . G5029) (file-exists? . G5028) (vector-sort! . G5027) (vector-sort . G5026) (list-sort . G5025) (symbol-hash . G5024) (string-ci-hash . G5023) (string-hash . G5022) (equal-hash . G5021) (hashtable-equivalence-function . G5020) (make-hashtable . G501f) (hashtable-hash-function . G501e) (make-eqv-hashtable . G501d) (make-eq-hashtable . G501c) (hashtable? . G501b) (hashtable-update! . G501a) (hashtable-size . G5019) (hashtable-set! . G5018) (hashtable-ref . G5017) (hashtable-mutable? . G5016) (hashtable-keys . G5015) (hashtable-entries . G5014) (hashtable-delete! . G5013) (hashtable-copy . G5012) (hashtable-contains? . G5011) (hashtable-clear! . G5010) (call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (utf-8-codec . G4ff9) (utf-16-codec . G4ff8) (transcoder-error-handling-mode . G4ff7) (transcoder-eol-style . G4ff6) (transcoder-codec . G4ff5) (transcoded-port . G4ff4) (textual-port? . G4ff3) (string->bytevector . G4ff2) (standard-output-port . G4ff1) (standard-input-port . G4ff0) (standard-error-port . G4fef) (set-port-position! . G4fee) (put-u8 . G4fed) (put-string . G4fec) (put-datum . G4feb) (put-char . G4fea) (put-bytevector . G4fe9) (port? . G4fe8) (port-transcoder . G4fe7) (port-position . G4fe6) (port-has-set-port-position!? . G4fe5) (port-has-port-position? . G4fe4) (port-eof? . G4fe3) (output-port-buffer-mode . G4fe2) (open-string-output-port . G4fe1) (open-string-input-port . G4fe0) (open-file-output-port . G4fdf) (open-file-input/output-port . G4fde) (open-file-input-port . G4fdd) (open-bytevector-output-port . G4fdc) (open-bytevector-input-port . G4fdb) (native-transcoder . G4fda) (native-eol-style . G4fd9) (make-transcoder . G4fd8) (latin-1-codec . G4fd7) (make-i/o-write-error . G4b39) (make-i/o-read-error . G4b24) (make-i/o-port-error . G4bd7) (make-i/o-invalid-position-error . G4b4f) (make-i/o-filename-error . G4b69) (make-i/o-file-protection-error . G4b82) (make-i/o-file-is-read-only-error . G4b97) (make-i/o-file-does-not-exist-error . G4bc1) (make-i/o-file-already-exists-error . G4bac) (make-i/o-error . G4b0f) (make-i/o-encoding-error . G4c06) (make-i/o-decoding-error . G4bf0) (make-custom-textual-output-port . G4fd6) (make-custom-textual-input/output-port . G4fd5) (make-custom-textual-input-port . G4fd4) (make-custom-binary-output-port . G4fd3) (make-custom-binary-input/output-port . G4fd2) (make-custom-binary-input-port . G4fd1) (make-bytevector . G4fd0) (lookahead-u8 . G4fcf) (lookahead-char . G4fce) (i/o-write-error? . G4b3b) (i/o-read-error? . G4b26) (i/o-port-error? . G4bdb) (i/o-invalid-position-error? . G4b53) (i/o-filename-error? . G4b6d) (i/o-file-protection-error? . G4b84) (i/o-file-is-read-only-error? . G4b99) (i/o-file-does-not-exist-error? . G4bc3) (i/o-file-already-exists-error? . G4bae) (i/o-error? . G4b11) (i/o-error-port . G4bdd) (i/o-error-filename . G4b6f) (i/o-encoding-error? . G4c0a) (i/o-encoding-error-char . G4c0c) (i/o-decoding-error? . G4bf2) (get-u8 . G4fcd) (get-string-n! . G4fcc) (get-string-n . G4fcb) (get-string-all . G4fca) (get-line . G4fc9) (get-datum . G4fc8) (get-char . G4fc7) (get-bytevector-some . G4fc6) (get-bytevector-n! . G4fc5) (get-bytevector-n . G4fc4) (get-bytevector-all . G4fc3) (flush-output-port . G4fc2) (close-port . G4fc1) (exit . G4fb9) (command-line . G4d35) (remove . G4fb4) (remv . G4fb3) (remp . G4fb2) (remq . G4fb1) (partition . G4fb0) (memv . G4faf) (memq . G4fae) (memp . G4fad) (member . G4fac) (exists . G4fab) (for-all . G4faa) (fold-right . G4fa9) (fold-left . G4fa8) (find . G4fa7) (filter . G4fa6) (cons* . G4fa5) (assv . G4fa4) (assq . G4fa3) (assp . G4fa2) (assoc . G4fa1) (call-with-string-output-port . G4fa0) (call-with-port . G4f9f) (call-with-bytevector-output-port . G4f9e) (bytevector->string . G4f9d) (buffer-mode? . G4f9c) (binary-port? . G4f9b) (with-exception-handler . G4f9a) (raise-continuable . G4f99) (raise . G4f98) (make-enumeration . G4f97) (enum-set=? . G4f96) (enum-set-universe . G4f95) (enum-set-union . G4f94) (enum-set-subset? . G4f93) (enum-set-projection . G4f92) (enum-set-member? . G4f91) (enum-set-intersection . G4f90) (enum-set-indexer . G4f8f) (enum-set-difference . G4f8e) (enum-set-constructor . G4f8d) (enum-set-complement . G4f8c) (enum-set->list . G4f8b) (who-condition? . G4a87) (warning? . G4a01) (violation? . G4a40) (undefined-violation? . G4afc) (syntax-violation? . G4ae3) (syntax-violation-subform . G4ae7) (syntax-violation-form . G4ae5) (syntax-violation . G305a) (simple-conditions . G4f8a) (serious-condition? . G4a16) (non-continuable-violation? . G4a9e) (message-condition? . G49ea) (make-who-condition . G4a83) (make-warning . G49ff) (make-violation . G4a3e) (make-undefined-violation . G4afa) (make-syntax-violation . G4add) (make-serious-condition . G4a14) (make-non-continuable-violation . G4a9c) (make-message-condition . G49e6) (make-lexical-violation . G4ac6) (make-irritants-condition . G4a69) (make-implementation-restriction-violation . G4ab1) (make-error . G4a29) (make-assertion-violation . G4a53) (lexical-violation? . G4ac8) (irritants-condition? . G4a6d) (implementation-restriction-violation? . G4ab3) (error? . G4a2b) (condition-who . G4a89) (condition-predicate . G4f89) (condition-message . G49ec) (condition-irritants . G4a6f) (condition-accessor . G4f88) (condition . G4f87) (assertion-violation? . G4a55) (condition? . G4f86) (utf32->string . G4f85) (utf16->string . G4f84) (utf8->string . G4f83) (uint-list->bytevector . G4f82) (u8-list->bytevector . G4f81) (string->utf8 . G4f80) (string->utf32 . G4f7f) (string->utf16 . G4f7e) (sint-list->bytevector . G4f7d) (native-endianness . G4f7c) (bytevector? . G4f7b) (bytevector=? . G4f7a) (bytevector-uint-set! . G4f79) (bytevector-uint-ref . G4f78) (bytevector-u8-set! . G4f77) (bytevector-u8-ref . G4f76) (bytevector-u64-set! . G4f75) (bytevector-u64-ref . G4f74) (bytevector-u64-native-set! . G4f73) (bytevector-u64-native-ref . G4f72) (bytevector-u32-set! . G4f71) (bytevector-u32-ref . G4f70) (bytevector-u32-native-set! . G4f6f) (bytevector-u32-native-ref . G4f6e) (bytevector-u16-set! . G4f6d) (bytevector-u16-ref . G4f6c) (bytevector-u16-native-set! . G4f6b) (bytevector-u16-native-ref . G4f6a) (bytevector-sint-set! . G4f69) (bytevector-sint-ref . G4f68) (bytevector-s8-set! . G4f67) (bytevector-s8-ref . G4f66) (bytevector-s64-set! . G4f65) (bytevector-s64-ref . G4f64) (bytevector-s64-native-set! . G4f63) (bytevector-s64-native-ref . G4f62) (bytevector-s32-set! . G4f61) (bytevector-s32-ref . G4f60) (bytevector-s32-native-set! . G4f5f) (bytevector-s32-native-ref . G4f5e) (bytevector-s16-set! . G4f5d) (bytevector-s16-ref . G4f5c) (bytevector-s16-native-set! . G4f5b) (bytevector-s16-native-ref . G4f5a) (bytevector-length . G4f59) (bytevector-ieee-single-ref . G4f58) (bytevector-ieee-single-set! . G4f57) (bytevector-ieee-single-native-set! . G4f56) (bytevector-ieee-single-native-ref . G4f55) (bytevector-ieee-double-set! . G4f54) (bytevector-ieee-double-ref . G4f53) (bytevector-ieee-double-native-set! . G4f52) (bytevector-ieee-double-native-ref . G4f51) (bytevector-fill! . G4f50) (bytevector-copy! . G4f4f) (bytevector-copy . G4f4e) (bytevector->uint-list . G4f4d) (bytevector->u8-list . G4f4c) (bytevector->sint-list . G4f4b) (no-nans-violation? . G4c36) (no-infinities-violation? . G4c21) (make-no-nans-violation . G4c34) (make-no-infinities-violation . G4c1f) (real->flonum . G4f4a) (flzero? . G4f49) (fltruncate . G4f48) (fltan . G4f47) (flsqrt . G4f46) (flsin . G4f45) (flround . G4f44) (flpositive? . G4f43) (flonum? . G4f42) (flodd? . G4f41) (flnumerator . G4f40) (flnegative? . G4f3f) (flnan? . G4f3e) (flmod0 . G4f3d) (flmod . G4f3c) (flmin . G4f3b) (flmax . G4f3a) (fllog . G4f39) (flinteger? . G4f38) (flinfinite? . G4f37) (flfloor . G4f36) (flfinite? . G4f35) (flexpt . G4f34) (flexp . G4f33) (fleven? . G4f32) (fldiv0-and-mod0 . G4f31) (fldiv0 . G4f30) (fldiv-and-mod . G4f2f) (fldiv . G4f2e) (fldenominator . G4f2d) (flcos . G4f2c) (flceiling . G4f2b) (flatan . G4f2a) (flasin . G4f29) (flacos . G4f28) (flabs . G4f27) (fl>? . G4f26) (fl>=? . G4f25) (fl=? . G4f24) (fl<? . G4f23) (fl<=? . G4f22) (fl/ . G4f21) (fl- . G4f20) (fl+ . G4f1f) (fl* . G4f1e) (fixnum->flonum . G4f1d) (fxzero? . G4f1c) (fxxor . G4f1b) (fxrotate-bit-field . G4f1a) (fxreverse-bit-field . G4f19) (fxpositive? . G4f18) (fxodd? . G4f17) (fxnot . G4f16) (fxnegative? . G4f15) (fxmod0 . G4f14) (fxmod . G4f13) (fxmin . G4f12) (fxmax . G4f11) (fxlength . G4f10) (fxior . G4f0f) (fxif . G4f0e) (fxfirst-bit-set . G4f0d) (fxeven? . G4f0c) (fxdiv0-and-mod0 . G4f0b) (fxdiv0 . G4f0a) (fxdiv-and-mod . G4f09) (fxdiv . G4f08) (fxcopy-bit-field . G4f07) (fxcopy-bit . G4f06) (fxbit-set? . G4f05) (fxbit-field . G4f04) (fxbit-count . G4f03) (fxarithmetic-shift-right . G4f02) (fxarithmetic-shift-left . G4f01) (fxarithmetic-shift . G4f00) (fxand . G4eff) (fx>? . G4efe) (fx>=? . G4efd) (fx=? . G4efc) (fx<? . G4efb) (fx<=? . G4efa) (fx-/carry . G4ef9) (fx- . G4ef8) (fx+/carry . G4ef7) (fx+ . G4ef6) (fx*/carry . G4ef5) (fx* . G4ef4) (greatest-fixnum . G4ef3) (least-fixnum . G4ef2) (fixnum-width . G4ef1) (fixnum? . G4ef0) (bitwise-rotate-bit-field . G4eef) (bitwise-reverse-bit-field . G4eee) (bitwise-length . G4eed) (bitwise-if . G4eec) (bitwise-first-bit-set . G4eeb) (bitwise-copy-bit-field . G4eea) (bitwise-copy-bit . G4ee9) (bitwise-bit-set? . G4ee8) (bitwise-bit-field . G4ee7) (bitwise-bit-count . G4ee6) (bitwise-xor . G4ee5) (bitwise-ior . G4ee4) (bitwise-and . G4ee3) (bitwise-not . G4ee2) (bitwise-arithmetic-shift-right . G4ee1) (bitwise-arithmetic-shift-left . G4ee0) (bitwise-arithmetic-shift . G4edf) (zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-map . G4eda) (vector-length . G4ed9) (vector-for-each . G4ed8) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol=? . G4ed0) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-for-each . G4ec5) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-valued? . G4eb9) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (rational-valued? . G4eb5) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (null? . G4ead) (not . G4eac) (negative? . G4eab) (nan? . G4eaa) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer-valued? . G4e97) (integer->char . G4e96) (infinite? . G4e95) (inexact? . G4e94) (inexact . G4e93) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (finite? . G4e8e) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (exact-integer-sqrt . G4e8a) (exact . G4e89) (even? . G4e88) (error . G4e87) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (div0-and-mod0 . G4e82) (mod0 . G4e81) (div0 . G4e80) (div-and-mod . G4e7f) (mod . G4e7e) (div . G4e7d) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call/cc . G4e6f) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (boolean=? . G4e4e) (atan . G4e4d) (assertion-violation . G4e4c) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (&no-nans . G4e3a) (&no-infinities . G4e39) (&i/o-encoding . G4e38) (&i/o-decoding . G4e37) (&i/o-port . G4e36) (&i/o-file-does-not-exist . G4e35) (&i/o-file-already-exists . G4e34) (&i/o-file-is-read-only . G4e33) (&i/o-file-protection . G4e32) (&i/o-filename . G4e31) (&i/o-invalid-position . G4e30) (&i/o-write . G4e2f) (&i/o-read . G4e2e) (&i/o . G4e2d) (&undefined . G4e2c) (&syntax . G4e2b) (&lexical . G4e2a) (&implementation-restriction . G4e29) (&non-continuable . G4e28) (&who . G4e27) (&irritants . G4e26) (&assertion . G4e25) (&violation . G4e24) (&error . G4e23) (&serious . G4e22) (&warning . G4e21) (&message . G4e20) (&condition . G4e1f) (define-condition-type . G4e1e) (define-enumeration . G4e1d) (define-record-type . G4e1c) (parent-rtd . G4e1b) (nongenerative . G4e1a) (opaque . G4e19) (sealed . G4e18) (protocol . G4e17) (parent . G4e16) (immutable . G4e15) (mutable . G4e14) (fields . G4e13) (error-handling-mode . G4e12) (file-options . G4e11) (buffer-mode . G4e10) (eol-style . G4e0f) (guard . G4e0e) (unsyntax-splicing . G4e0b) (unsyntax . G4e0a) (unquote-splicing . G4e09) (unquote . G4e08) (_ . G4e07) (else . G4e06) (=> . G4e05) (... . G4e04) (assert . G4e03) (endianness . G4e02) (do . G4dff) (cond . G4dfe) (let* . G4dfd) (let . G4dfc) (let*-values . G4dfb) (let-values . G4dfa) (identifier-syntax . G4df9) (with-syntax . G4df8) (quasisyntax . G4df7) (quasiquote . G4df6) (syntax-rules . G4df5) (record-constructor-descriptor . G4df2) (record-type-descriptor . G4df1) (case . G4df0) (unless . G4dee) (when . G4ded) (or . G4dec) (and . G4deb) (if . G4dea) (letrec* . G4de9) (letrec . G4de8) (case-lambda . G4de6) (lambda . G4de5) (syntax . G4de4) (syntax-case . G4de3) (quote . G4de2) (letrec-syntax . G4de0) (let-syntax . G4ddf) (set! . G4dde) (begin . G4ddc) (define-syntax . G4dda) (define . G4dd9)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50ac '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3034) (quotient . G4fc0) (null-environment . G3032) (remainder . G4fbf) (modulo . G4fbe) (inexact->exact . G4fbd) (force . G4fbc) (exact->inexact . G4fbb) (make-promise . G4fba) (delay . G4e01)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50ad '(rnrs control) '(6) '() '() '() '((do . G4dff) (unless . G4dee) (when . G4ded) (case-lambda . G4de6)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50ae '(rnrs eval) '(6) '() '() '() '((eval . G3038) (environment . G3030)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50af '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fb6) (set-car! . G4fb5)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50b0 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fb8) (string-set! . G4fb7)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50b1 '(rnrs programs) '(6) '() '() '() '((exit . G4fb9) (command-line . G4d35)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50b2 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2da8) (identifier? . G305c) (generate-temporaries . G3046) (free-identifier=? . G3048) (syntax->datum . G3060) (datum->syntax . G305e) (bound-identifier=? . G304a) (syntax-violation . G305a) (unsyntax-splicing . G4e0b) (unsyntax . G4e0a) (_ . G4e07) (... . G4e04) (with-syntax . G4df8) (quasisyntax . G4df7) (syntax . G4de4) (syntax-case . G4de3)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50b3 '(rnrs files) '(6) '() '() '() '((delete-file . G5029) (file-exists? . G5028) (make-i/o-write-error . G4b39) (make-i/o-read-error . G4b24) (make-i/o-port-error . G4bd7) (make-i/o-invalid-position-error . G4b4f) (make-i/o-filename-error . G4b69) (make-i/o-file-protection-error . G4b82) (make-i/o-file-is-read-only-error . G4b97) (make-i/o-file-does-not-exist-error . G4bc1) (make-i/o-file-already-exists-error . G4bac) (make-i/o-error . G4b0f) (i/o-write-error? . G4b3b) (i/o-read-error? . G4b26) (i/o-port-error? . G4bdb) (i/o-invalid-position-error? . G4b53) (i/o-filename-error? . G4b6d) (i/o-file-protection-error? . G4b84) (i/o-file-is-read-only-error? . G4b99) (i/o-file-does-not-exist-error? . G4bc3) (i/o-file-already-exists-error? . G4bae) (i/o-error? . G4b11) (i/o-error-port . G4bdd) (i/o-error-filename . G4b6f) (&i/o-port . G4e36) (&i/o-file-does-not-exist . G4e35) (&i/o-file-already-exists . G4e34) (&i/o-file-is-read-only . G4e33) (&i/o-file-protection . G4e32) (&i/o-filename . G4e31) (&i/o-invalid-position . G4e30) (&i/o-write . G4e2f) (&i/o-read . G4e2e) (&i/o . G4e2d)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50b4 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5027) (vector-sort . G5026) (list-sort . G5025)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50b5 '(rnrs base) '(6) '() '() '() '((zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-map . G4eda) (vector-length . G4ed9) (vector-for-each . G4ed8) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol=? . G4ed0) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-for-each . G4ec5) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-valued? . G4eb9) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (rational-valued? . G4eb5) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (null? . G4ead) (not . G4eac) (negative? . G4eab) (nan? . G4eaa) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer-valued? . G4e97) (integer->char . G4e96) (infinite? . G4e95) (inexact? . G4e94) (inexact . G4e93) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (finite? . G4e8e) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (exact-integer-sqrt . G4e8a) (exact . G4e89) (even? . G4e88) (error . G4e87) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (div0-and-mod0 . G4e82) (mod0 . G4e81) (div0 . G4e80) (div-and-mod . G4e7f) (mod . G4e7e) (div . G4e7d) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call/cc . G4e6f) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (boolean=? . G4e4e) (atan . G4e4d) (assertion-violation . G4e4c) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (unquote-splicing . G4e09) (unquote . G4e08) (_ . G4e07) (else . G4e06) (=> . G4e05) (... . G4e04) (assert . G4e03) (cond . G4dfe) (let* . G4dfd) (let . G4dfc) (let*-values . G4dfb) (let-values . G4dfa) (identifier-syntax . G4df9) (quasiquote . G4df6) (syntax-rules . G4df5) (case . G4df0) (or . G4dec) (and . G4deb) (if . G4dea) (letrec* . G4de9) (letrec . G4de8) (lambda . G4de5) (quote . G4de2) (letrec-syntax . G4de0) (let-syntax . G4ddf) (set! . G4dde) (begin . G4ddc) (define-syntax . G4dda) (define . G4dd9)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50b6 '(rnrs lists) '(6) '() '() '() '((remove . G4fb4) (remv . G4fb3) (remp . G4fb2) (remq . G4fb1) (partition . G4fb0) (memv . G4faf) (memq . G4fae) (memp . G4fad) (member . G4fac) (exists . G4fab) (for-all . G4faa) (fold-right . G4fa9) (fold-left . G4fa8) (find . G4fa7) (filter . G4fa6) (cons* . G4fa5) (assv . G4fa4) (assq . G4fa3) (assp . G4fa2) (assoc . G4fa1)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50b7 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (make-i/o-write-error . G4b39) (make-i/o-read-error . G4b24) (make-i/o-port-error . G4bd7) (make-i/o-invalid-position-error . G4b4f) (make-i/o-filename-error . G4b69) (make-i/o-file-protection-error . G4b82) (make-i/o-file-is-read-only-error . G4b97) (make-i/o-file-does-not-exist-error . G4bc1) (make-i/o-file-already-exists-error . G4bac) (make-i/o-error . G4b0f) (i/o-write-error? . G4b3b) (i/o-read-error? . G4b26) (i/o-port-error? . G4bdb) (i/o-invalid-position-error? . G4b53) (i/o-filename-error? . G4b6d) (i/o-file-protection-error? . G4b84) (i/o-file-is-read-only-error? . G4b99) (i/o-file-does-not-exist-error? . G4bc3) (i/o-file-already-exists-error? . G4bae) (i/o-error? . G4b11) (i/o-error-port . G4bdd) (i/o-error-filename . G4b6f) (&i/o-port . G4e36) (&i/o-file-does-not-exist . G4e35) (&i/o-file-already-exists . G4e34) (&i/o-file-is-read-only . G4e33) (&i/o-file-protection . G4e32) (&i/o-filename . G4e31) (&i/o-invalid-position . G4e30) (&i/o-write . G4e2f) (&i/o-read . G4e2e) (&i/o . G4e2d)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50b8 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fd0) (utf32->string . G4f85) (utf16->string . G4f84) (utf8->string . G4f83) (uint-list->bytevector . G4f82) (u8-list->bytevector . G4f81) (string->utf8 . G4f80) (string->utf32 . G4f7f) (string->utf16 . G4f7e) (sint-list->bytevector . G4f7d) (native-endianness . G4f7c) (bytevector? . G4f7b) (bytevector=? . G4f7a) (bytevector-uint-set! . G4f79) (bytevector-uint-ref . G4f78) (bytevector-u8-set! . G4f77) (bytevector-u8-ref . G4f76) (bytevector-u64-set! . G4f75) (bytevector-u64-ref . G4f74) (bytevector-u64-native-set! . G4f73) (bytevector-u64-native-ref . G4f72) (bytevector-u32-set! . G4f71) (bytevector-u32-ref . G4f70) (bytevector-u32-native-set! . G4f6f) (bytevector-u32-native-ref . G4f6e) (bytevector-u16-set! . G4f6d) (bytevector-u16-ref . G4f6c) (bytevector-u16-native-set! . G4f6b) (bytevector-u16-native-ref . G4f6a) (bytevector-sint-set! . G4f69) (bytevector-sint-ref . G4f68) (bytevector-s8-set! . G4f67) (bytevector-s8-ref . G4f66) (bytevector-s64-set! . G4f65) (bytevector-s64-ref . G4f64) (bytevector-s64-native-set! . G4f63) (bytevector-s64-native-ref . G4f62) (bytevector-s32-set! . G4f61) (bytevector-s32-ref . G4f60) (bytevector-s32-native-set! . G4f5f) (bytevector-s32-native-ref . G4f5e) (bytevector-s16-set! . G4f5d) (bytevector-s16-ref . G4f5c) (bytevector-s16-native-set! . G4f5b) (bytevector-s16-native-ref . G4f5a) (bytevector-length . G4f59) (bytevector-ieee-single-ref . G4f58) (bytevector-ieee-single-set! . G4f57) (bytevector-ieee-single-native-set! . G4f56) (bytevector-ieee-single-native-ref . G4f55) (bytevector-ieee-double-set! . G4f54) (bytevector-ieee-double-ref . G4f53) (bytevector-ieee-double-native-set! . G4f52) (bytevector-ieee-double-native-ref . G4f51) (bytevector-fill! . G4f50) (bytevector-copy! . G4f4f) (bytevector-copy . G4f4e) (bytevector->uint-list . G4f4d) (bytevector->u8-list . G4f4c) (bytevector->sint-list . G4f4b) (endianness . G4e02)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50b9 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5057) (string-titlecase . G5056) (string-normalize-nfkd . G5055) (string-normalize-nfkc . G5054) (string-normalize-nfd . G5053) (string-normalize-nfc . G5052) (string-foldcase . G5051) (string-downcase . G5050) (string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-title-case? . G5048) (char-numeric? . G5047) (char-lower-case? . G5046) (char-general-category . G5045) (char-upcase . G5044) (char-titlecase . G5043) (char-foldcase . G5042) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50ba '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f9a) (raise-continuable . G4f99) (raise . G4f98) (guard . G4e0e) (else . G4e06) (=> . G4e05)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50bb '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4eef) (bitwise-reverse-bit-field . G4eee) (bitwise-length . G4eed) (bitwise-if . G4eec) (bitwise-first-bit-set . G4eeb) (bitwise-copy-bit-field . G4eea) (bitwise-copy-bit . G4ee9) (bitwise-bit-set? . G4ee8) (bitwise-bit-field . G4ee7) (bitwise-bit-count . G4ee6) (bitwise-xor . G4ee5) (bitwise-ior . G4ee4) (bitwise-and . G4ee3) (bitwise-not . G4ee2) (bitwise-arithmetic-shift-right . G4ee1) (bitwise-arithmetic-shift-left . G4ee0) (bitwise-arithmetic-shift . G4edf)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50bc '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f1c) (fxxor . G4f1b) (fxrotate-bit-field . G4f1a) (fxreverse-bit-field . G4f19) (fxpositive? . G4f18) (fxodd? . G4f17) (fxnot . G4f16) (fxnegative? . G4f15) (fxmod0 . G4f14) (fxmod . G4f13) (fxmin . G4f12) (fxmax . G4f11) (fxlength . G4f10) (fxior . G4f0f) (fxif . G4f0e) (fxfirst-bit-set . G4f0d) (fxeven? . G4f0c) (fxdiv0-and-mod0 . G4f0b) (fxdiv0 . G4f0a) (fxdiv-and-mod . G4f09) (fxdiv . G4f08) (fxcopy-bit-field . G4f07) (fxcopy-bit . G4f06) (fxbit-set? . G4f05) (fxbit-field . G4f04) (fxbit-count . G4f03) (fxarithmetic-shift-right . G4f02) (fxarithmetic-shift-left . G4f01) (fxarithmetic-shift . G4f00) (fxand . G4eff) (fx>? . G4efe) (fx>=? . G4efd) (fx=? . G4efc) (fx<? . G4efb) (fx<=? . G4efa) (fx-/carry . G4ef9) (fx- . G4ef8) (fx+/carry . G4ef7) (fx+ . G4ef6) (fx*/carry . G4ef5) (fx* . G4ef4) (greatest-fixnum . G4ef3) (least-fixnum . G4ef2) (fixnum-width . G4ef1) (fixnum? . G4ef0)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50bd '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c36) (no-infinities-violation? . G4c21) (make-no-nans-violation . G4c34) (make-no-infinities-violation . G4c1f) (real->flonum . G4f4a) (flzero? . G4f49) (fltruncate . G4f48) (fltan . G4f47) (flsqrt . G4f46) (flsin . G4f45) (flround . G4f44) (flpositive? . G4f43) (flonum? . G4f42) (flodd? . G4f41) (flnumerator . G4f40) (flnegative? . G4f3f) (flnan? . G4f3e) (flmod0 . G4f3d) (flmod . G4f3c) (flmin . G4f3b) (flmax . G4f3a) (fllog . G4f39) (flinteger? . G4f38) (flinfinite? . G4f37) (flfloor . G4f36) (flfinite? . G4f35) (flexpt . G4f34) (flexp . G4f33) (fleven? . G4f32) (fldiv0-and-mod0 . G4f31) (fldiv0 . G4f30) (fldiv-and-mod . G4f2f) (fldiv . G4f2e) (fldenominator . G4f2d) (flcos . G4f2c) (flceiling . G4f2b) (flatan . G4f2a) (flasin . G4f29) (flacos . G4f28) (flabs . G4f27) (fl>? . G4f26) (fl>=? . G4f25) (fl=? . G4f24) (fl<? . G4f23) (fl<=? . G4f22) (fl/ . G4f21) (fl- . G4f20) (fl+ . G4f1f) (fl* . G4f1e) (fixnum->flonum . G4f1d) (&no-nans . G4e3a) (&no-infinities . G4e39)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50be '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5024) (string-ci-hash . G5023) (string-hash . G5022) (equal-hash . G5021) (hashtable-equivalence-function . G5020) (make-hashtable . G501f) (hashtable-hash-function . G501e) (make-eqv-hashtable . G501d) (make-eq-hashtable . G501c) (hashtable? . G501b) (hashtable-update! . G501a) (hashtable-size . G5019) (hashtable-set! . G5018) (hashtable-ref . G5017) (hashtable-mutable? . G5016) (hashtable-keys . G5015) (hashtable-entries . G5014) (hashtable-delete! . G5013) (hashtable-copy . G5012) (hashtable-contains? . G5011) (hashtable-clear! . G5010)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50bf '(rnrs io ports) '(6) '() '() '() '((eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (utf-8-codec . G4ff9) (utf-16-codec . G4ff8) (transcoder-error-handling-mode . G4ff7) (transcoder-eol-style . G4ff6) (transcoder-codec . G4ff5) (transcoded-port . G4ff4) (textual-port? . G4ff3) (string->bytevector . G4ff2) (standard-output-port . G4ff1) (standard-input-port . G4ff0) (standard-error-port . G4fef) (set-port-position! . G4fee) (put-u8 . G4fed) (put-string . G4fec) (put-datum . G4feb) (put-char . G4fea) (put-bytevector . G4fe9) (port? . G4fe8) (port-transcoder . G4fe7) (port-position . G4fe6) (port-has-set-port-position!? . G4fe5) (port-has-port-position? . G4fe4) (port-eof? . G4fe3) (output-port-buffer-mode . G4fe2) (open-string-output-port . G4fe1) (open-string-input-port . G4fe0) (open-file-output-port . G4fdf) (open-file-input/output-port . G4fde) (open-file-input-port . G4fdd) (open-bytevector-output-port . G4fdc) (open-bytevector-input-port . G4fdb) (native-transcoder . G4fda) (native-eol-style . G4fd9) (make-transcoder . G4fd8) (latin-1-codec . G4fd7) (make-i/o-write-error . G4b39) (make-i/o-read-error . G4b24) (make-i/o-port-error . G4bd7) (make-i/o-invalid-position-error . G4b4f) (make-i/o-filename-error . G4b69) (make-i/o-file-protection-error . G4b82) (make-i/o-file-is-read-only-error . G4b97) (make-i/o-file-does-not-exist-error . G4bc1) (make-i/o-file-already-exists-error . G4bac) (make-i/o-error . G4b0f) (make-i/o-encoding-error . G4c06) (make-i/o-decoding-error . G4bf0) (make-custom-textual-output-port . G4fd6) (make-custom-textual-input/output-port . G4fd5) (make-custom-textual-input-port . G4fd4) (make-custom-binary-output-port . G4fd3) (make-custom-binary-input/output-port . G4fd2) (make-custom-binary-input-port . G4fd1) (lookahead-u8 . G4fcf) (lookahead-char . G4fce) (i/o-write-error? . G4b3b) (i/o-read-error? . G4b26) (i/o-port-error? . G4bdb) (i/o-invalid-position-error? . G4b53) (i/o-filename-error? . G4b6d) (i/o-file-protection-error? . G4b84) (i/o-file-is-read-only-error? . G4b99) (i/o-file-does-not-exist-error? . G4bc3) (i/o-file-already-exists-error? . G4bae) (i/o-error? . G4b11) (i/o-error-port . G4bdd) (i/o-error-filename . G4b6f) (i/o-encoding-error? . G4c0a) (i/o-encoding-error-char . G4c0c) (i/o-decoding-error? . G4bf2) (get-u8 . G4fcd) (get-string-n! . G4fcc) (get-string-n . G4fcb) (get-string-all . G4fca) (get-line . G4fc9) (get-datum . G4fc8) (get-char . G4fc7) (get-bytevector-some . G4fc6) (get-bytevector-n! . G4fc5) (get-bytevector-n . G4fc4) (get-bytevector-all . G4fc3) (flush-output-port . G4fc2) (close-port . G4fc1) (call-with-string-output-port . G4fa0) (call-with-port . G4f9f) (call-with-bytevector-output-port . G4f9e) (bytevector->string . G4f9d) (buffer-mode? . G4f9c) (binary-port? . G4f9b) (&i/o-encoding . G4e38) (&i/o-decoding . G4e37) (&i/o-port . G4e36) (&i/o-file-does-not-exist . G4e35) (&i/o-file-already-exists . G4e34) (&i/o-file-is-read-only . G4e33) (&i/o-file-protection . G4e32) (&i/o-filename . G4e31) (&i/o-invalid-position . G4e30) (&i/o-write . G4e2f) (&i/o-read . G4e2e) (&i/o . G4e2d) (error-handling-mode . G4e12) (file-options . G4e11) (buffer-mode . G4e10) (eol-style . G4e0f)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50c0 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f97) (enum-set=? . G4f96) (enum-set-universe . G4f95) (enum-set-union . G4f94) (enum-set-subset? . G4f93) (enum-set-projection . G4f92) (enum-set-member? . G4f91) (enum-set-intersection . G4f90) (enum-set-indexer . G4f8f) (enum-set-difference . G4f8e) (enum-set-constructor . G4f8d) (enum-set-complement . G4f8c) (enum-set->list . G4f8b) (define-enumeration . G4e1d)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50c1 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a87) (warning? . G4a01) (violation? . G4a40) (undefined-violation? . G4afc) (syntax-violation? . G4ae3) (syntax-violation-subform . G4ae7) (syntax-violation-form . G4ae5) (syntax-violation . G305a) (simple-conditions . G4f8a) (serious-condition? . G4a16) (non-continuable-violation? . G4a9e) (message-condition? . G49ea) (make-who-condition . G4a83) (make-warning . G49ff) (make-violation . G4a3e) (make-undefined-violation . G4afa) (make-syntax-violation . G4add) (make-serious-condition . G4a14) (make-non-continuable-violation . G4a9c) (make-message-condition . G49e6) (make-lexical-violation . G4ac6) (make-irritants-condition . G4a69) (make-implementation-restriction-violation . G4ab1) (make-error . G4a29) (make-assertion-violation . G4a53) (lexical-violation? . G4ac8) (irritants-condition? . G4a6d) (implementation-restriction-violation? . G4ab3) (error? . G4a2b) (condition-who . G4a89) (condition-predicate . G4f89) (condition-message . G49ec) (condition-irritants . G4a6f) (condition-accessor . G4f88) (condition . G4f87) (assertion-violation? . G4a55) (condition? . G4f86) (&undefined . G4e2c) (&syntax . G4e2b) (&lexical . G4e2a) (&implementation-restriction . G4e29) (&non-continuable . G4e28) (&who . G4e27) (&irritants . G4e26) (&assertion . G4e25) (&violation . G4e24) (&error . G4e23) (&serious . G4e22) (&warning . G4e21) (&message . G4e20) (&condition . G4e1f) (define-condition-type . G4e1e)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50c2 '(rnrs records inspection) '(6) '() '() '() '((record? . G5033) (record-type-uid . G5032) (record-type-sealed? . G5031) (record-type-parent . G5030) (record-type-opaque? . G502f) (record-type-name . G502e) (record-type-generative? . G502d) (record-type-field-names . G502c) (record-rtd . G502b) (record-field-mutable? . G502a)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50c3 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G503a) (record-predicate . G5039) (record-mutator . G5038) (record-constructor . G5037) (record-accessor . G5036) (make-record-type-descriptor . G5035) (make-record-constructor-descriptor . G5034)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50c4 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e1c) (parent-rtd . G4e1b) (nongenerative . G4e1a) (opaque . G4e19) (sealed . G4e18) (protocol . G4e17) (parent . G4e16) (immutable . G4e15) (mutable . G4e14) (fields . G4e13) (record-constructor-descriptor . G4df2) (record-type-descriptor . G4df1)) '() values values '#f '#f '#t '#f) (G2b84@G2a29@install-library 'G50c5 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c3a) (&no-nans-rtd . G4c38) (&no-infinities-rcd . G4c25) (&no-infinities-rtd . G4c23) (&i/o-encoding-rcd . G4c10) (&i/o-encoding-rtd . G4c0e) (&i/o-decoding-rcd . G4bf6) (&i/o-decoding-rtd . G4bf4) (&i/o-port-rcd . G4be1) (&i/o-port-rtd . G4bdf) (&i/o-file-does-not-exist-rcd . G4bc7) (&i/o-file-does-not-exist-rtd . G4bc5) (&i/o-file-already-exists-rcd . G4bb2) (&i/o-file-already-exists-rtd . G4bb0) (&i/o-file-is-read-only-rcd . G4b9d) (&i/o-file-is-read-only-rtd . G4b9b) (&i/o-file-protection-rcd . G4b88) (&i/o-file-protection-rtd . G4b86) (&i/o-filename-rcd . G4b73) (&i/o-filename-rtd . G4b71) (&i/o-invalid-position-rcd . G4b59) (&i/o-invalid-position-rtd . G4b57) (&i/o-write-rcd . G4b3f) (&i/o-write-rtd . G4b3d) (&i/o-read-rcd . G4b2a) (&i/o-read-rtd . G4b28) (&i/o-rcd . G4b15) (&i/o-rtd . G4b13) (&undefined-rcd . G4b00) (&undefined-rtd . G4afe) (&syntax-rcd . G4aeb) (&syntax-rtd . G4ae9) (&lexical-rcd . G4acc) (&lexical-rtd . G4aca) (&implementation-restriction-rcd . G4ab7) (&implementation-restriction-rtd . G4ab5) (&non-continuable-rcd . G4aa2) (&non-continuable-rtd . G4aa0) (&who-rcd . G4a8d) (&who-rtd . G4a8b) (&irritants-rcd . G4a73) (&irritants-rtd . G4a71) (&assertion-rcd . G4a59) (&assertion-rtd . G4a57) (&violation-rcd . G4a44) (&violation-rtd . G4a42) (&error-rcd . G4a2f) (&error-rtd . G4a2d) (&serious-rcd . G4a1a) (&serious-rtd . G4a18) (&warning-rcd . G4a05) (&warning-rtd . G4a03) (&message-rcd . G49f0) (&message-rtd . G49ee) (&condition-rcd . G4993) (&condition-rtd . G4991) (syntax-error . G3054) (syntax-dispatch . G2f6d) (pretty-print . G50a5) (eval-core . G50a4) (set-symbol-value! . G50a3) (symbol-value . G50a2) (gensym . G50a1) (void . G50a0) (load . G4d3b) (interaction-environment . G3066) (char-ready? . G509f) (regexp? . G509e) (read-line . G509d) (dotted-list? . G509c) (circular-list? . G509b) (proper-list? . G509a) (circular-list . G5099) (last . G5098) (last-pair . G5097) (not-pair? . G5096) (split-at! . G5095) (split-at . G5094) (list= . G5093) (list-copy . G5092) (list-tabulate . G5091) (make-list . G5090) (xcons . G508f) (tenth . G508e) (ninth . G508d) (eighth . G508c) (seventh . G508b) (sixth . G508a) (fifth . G5089) (drop-right! . G5088) (drop-right . G5087) (take-right . G5086) (take! . G5085) (drop . G5084) (take . G5083) (car+cdr . G5082) (third . G5081) (second . G5080) (first . G507f) (iota . G507e) (every . G507d) (assoc-ref . G507c) (alist-cons . G507b) (append-map . G507a) (print . G5079) (format . G5078) (standard-library-path . G5077) (file-newer? . G5076) (stat-mtime . G5075) (current-directory . G5074) (write-to-file . G5073) (file->list . G5072) (file->string . G5071) (digit->integer . G5070) (call-with-string-input-port . G506f) (call-with-string-io . G506e) (string-split . G506d) (bytevector-for-each . G506c) (string->regexp . G506b) (rxmatch . G506a) (regexp-replace-all . G5069) (hashtable-for-each . G5068) (readdir . G5067) (get-environment-variables . G5066) (get-environment-variable . G5065) (get-timeofday . G5064) (get-command-line . G5063) (sys-display . G5062) (source-info . G5061) (make-compiler-instruction . G5060) (make-instruction . G505f) (set-source-info! . G505e) (bignum? . G505d) (make-complex . G505c) (fast-equal? . G505b) (fasl-read . G505a) (fasl-write . G5059) (receive . G5058) (make-parameter . G2840) (string-upcase . G5057) (string-titlecase . G5056) (string-normalize-nfkd . G5055) (string-normalize-nfkc . G5054) (string-normalize-nfd . G5053) (string-normalize-nfc . G5052) (string-foldcase . G5051) (string-downcase . G5050) (string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-title-case? . G5048) (char-numeric? . G5047) (char-lower-case? . G5046) (char-general-category . G5045) (char-upcase . G5044) (char-titlecase . G5043) (char-foldcase . G5042) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b) (make-variable-transformer . G2da8) (identifier? . G305c) (generate-temporaries . G3046) (free-identifier=? . G3048) (syntax->datum . G3060) (datum->syntax . G305e) (bound-identifier=? . G304a) (record-type-descriptor? . G503a) (record-predicate . G5039) (record-mutator . G5038) (record-constructor . G5037) (record-accessor . G5036) (make-record-type-descriptor . G5035) (make-record-constructor-descriptor . G5034) (record? . G5033) (record-type-uid . G5032) (record-type-sealed? . G5031) (record-type-parent . G5030) (record-type-opaque? . G502f) (record-type-name . G502e) (record-type-generative? . G502d) (record-type-field-names . G502c) (record-rtd . G502b) (record-field-mutable? . G502a) (delete-file . G5029) (file-exists? . G5028) (vector-sort! . G5027) (vector-sort . G5026) (list-sort . G5025) (symbol-hash . G5024) (string-ci-hash . G5023) (string-hash . G5022) (equal-hash . G5021) (hashtable-equivalence-function . G5020) (make-hashtable . G501f) (hashtable-hash-function . G501e) (make-eqv-hashtable . G501d) (make-eq-hashtable . G501c) (hashtable? . G501b) (hashtable-update! . G501a) (hashtable-size . G5019) (hashtable-set! . G5018) (hashtable-ref . G5017) (hashtable-mutable? . G5016) (hashtable-keys . G5015) (hashtable-entries . G5014) (hashtable-delete! . G5013) (hashtable-copy . G5012) (hashtable-contains? . G5011) (hashtable-clear! . G5010) (call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (utf-8-codec . G4ff9) (utf-16-codec . G4ff8) (transcoder-error-handling-mode . G4ff7) (transcoder-eol-style . G4ff6) (transcoder-codec . G4ff5) (transcoded-port . G4ff4) (textual-port? . G4ff3) (string->bytevector . G4ff2) (standard-output-port . G4ff1) (standard-input-port . G4ff0) (standard-error-port . G4fef) (set-port-position! . G4fee) (put-u8 . G4fed) (put-string . G4fec) (put-datum . G4feb) (put-char . G4fea) (put-bytevector . G4fe9) (port? . G4fe8) (port-transcoder . G4fe7) (port-position . G4fe6) (port-has-set-port-position!? . G4fe5) (port-has-port-position? . G4fe4) (port-eof? . G4fe3) (output-port-buffer-mode . G4fe2) (open-string-output-port . G4fe1) (open-string-input-port . G4fe0) (open-file-output-port . G4fdf) (open-file-input/output-port . G4fde) (open-file-input-port . G4fdd) (open-bytevector-output-port . G4fdc) (open-bytevector-input-port . G4fdb) (native-transcoder . G4fda) (native-eol-style . G4fd9) (make-transcoder . G4fd8) (latin-1-codec . G4fd7) (make-i/o-write-error . G4b39) (make-i/o-read-error . G4b24) (make-i/o-port-error . G4bd7) (make-i/o-invalid-position-error . G4b4f) (make-i/o-filename-error . G4b69) (make-i/o-file-protection-error . G4b82) (make-i/o-file-is-read-only-error . G4b97) (make-i/o-file-does-not-exist-error . G4bc1) (make-i/o-file-already-exists-error . G4bac) (make-i/o-error . G4b0f) (make-i/o-encoding-error . G4c06) (make-i/o-decoding-error . G4bf0) (make-custom-textual-output-port . G4fd6) (make-custom-textual-input/output-port . G4fd5) (make-custom-textual-input-port . G4fd4) (make-custom-binary-output-port . G4fd3) (make-custom-binary-input/output-port . G4fd2) (make-custom-binary-input-port . G4fd1) (make-bytevector . G4fd0) (lookahead-u8 . G4fcf) (lookahead-char . G4fce) (i/o-write-error? . G4b3b) (i/o-read-error? . G4b26) (i/o-port-error? . G4bdb) (i/o-invalid-position-error? . G4b53) (i/o-filename-error? . G4b6d) (i/o-file-protection-error? . G4b84) (i/o-file-is-read-only-error? . G4b99) (i/o-file-does-not-exist-error? . G4bc3) (i/o-file-already-exists-error? . G4bae) (i/o-error? . G4b11) (i/o-error-port . G4bdd) (i/o-error-filename . G4b6f) (i/o-encoding-error? . G4c0a) (i/o-encoding-error-char . G4c0c) (i/o-decoding-error? . G4bf2) (get-u8 . G4fcd) (get-string-n! . G4fcc) (get-string-n . G4fcb) (get-string-all . G4fca) (get-line . G4fc9) (get-datum . G4fc8) (get-char . G4fc7) (get-bytevector-some . G4fc6) (get-bytevector-n! . G4fc5) (get-bytevector-n . G4fc4) (get-bytevector-all . G4fc3) (flush-output-port . G4fc2) (close-port . G4fc1) (scheme-report-environment . G3034) (quotient . G4fc0) (null-environment . G3032) (remainder . G4fbf) (modulo . G4fbe) (inexact->exact . G4fbd) (force . G4fbc) (exact->inexact . G4fbb) (make-promise . G4fba) (exit . G4fb9) (command-line . G4d35) (string-fill! . G4fb8) (string-set! . G4fb7) (set-cdr! . G4fb6) (set-car! . G4fb5) (remove . G4fb4) (remv . G4fb3) (remp . G4fb2) (remq . G4fb1) (partition . G4fb0) (memv . G4faf) (memq . G4fae) (memp . G4fad) (member . G4fac) (exists . G4fab) (for-all . G4faa) (fold-right . G4fa9) (fold-left . G4fa8) (find . G4fa7) (filter . G4fa6) (cons* . G4fa5) (assv . G4fa4) (assq . G4fa3) (assp . G4fa2) (assoc . G4fa1) (call-with-string-output-port . G4fa0) (call-with-port . G4f9f) (call-with-bytevector-output-port . G4f9e) (bytevector->string . G4f9d) (buffer-mode? . G4f9c) (binary-port? . G4f9b) (with-exception-handler . G4f9a) (raise-continuable . G4f99) (raise . G4f98) (eval . G3038) (environment . G3030) (make-enumeration . G4f97) (enum-set=? . G4f96) (enum-set-universe . G4f95) (enum-set-union . G4f94) (enum-set-subset? . G4f93) (enum-set-projection . G4f92) (enum-set-member? . G4f91) (enum-set-intersection . G4f90) (enum-set-indexer . G4f8f) (enum-set-difference . G4f8e) (enum-set-constructor . G4f8d) (enum-set-complement . G4f8c) (enum-set->list . G4f8b) (who-condition? . G4a87) (warning? . G4a01) (violation? . G4a40) (undefined-violation? . G4afc) (syntax-violation? . G4ae3) (syntax-violation-subform . G4ae7) (syntax-violation-form . G4ae5) (syntax-violation . G305a) (simple-conditions . G4f8a) (serious-condition? . G4a16) (non-continuable-violation? . G4a9e) (message-condition? . G49ea) (make-who-condition . G4a83) (make-warning . G49ff) (make-violation . G4a3e) (make-undefined-violation . G4afa) (make-syntax-violation . G4add) (make-serious-condition . G4a14) (make-non-continuable-violation . G4a9c) (make-message-condition . G49e6) (make-lexical-violation . G4ac6) (make-irritants-condition . G4a69) (make-implementation-restriction-violation . G4ab1) (make-error . G4a29) (make-assertion-violation . G4a53) (lexical-violation? . G4ac8) (irritants-condition? . G4a6d) (implementation-restriction-violation? . G4ab3) (error? . G4a2b) (condition-who . G4a89) (condition-predicate . G4f89) (condition-message . G49ec) (condition-irritants . G4a6f) (condition-accessor . G4f88) (condition . G4f87) (assertion-violation? . G4a55) (condition? . G4f86) (utf32->string . G4f85) (utf16->string . G4f84) (utf8->string . G4f83) (uint-list->bytevector . G4f82) (u8-list->bytevector . G4f81) (string->utf8 . G4f80) (string->utf32 . G4f7f) (string->utf16 . G4f7e) (sint-list->bytevector . G4f7d) (native-endianness . G4f7c) (bytevector? . G4f7b) (bytevector=? . G4f7a) (bytevector-uint-set! . G4f79) (bytevector-uint-ref . G4f78) (bytevector-u8-set! . G4f77) (bytevector-u8-ref . G4f76) (bytevector-u64-set! . G4f75) (bytevector-u64-ref . G4f74) (bytevector-u64-native-set! . G4f73) (bytevector-u64-native-ref . G4f72) (bytevector-u32-set! . G4f71) (bytevector-u32-ref . G4f70) (bytevector-u32-native-set! . G4f6f) (bytevector-u32-native-ref . G4f6e) (bytevector-u16-set! . G4f6d) (bytevector-u16-ref . G4f6c) (bytevector-u16-native-set! . G4f6b) (bytevector-u16-native-ref . G4f6a) (bytevector-sint-set! . G4f69) (bytevector-sint-ref . G4f68) (bytevector-s8-set! . G4f67) (bytevector-s8-ref . G4f66) (bytevector-s64-set! . G4f65) (bytevector-s64-ref . G4f64) (bytevector-s64-native-set! . G4f63) (bytevector-s64-native-ref . G4f62) (bytevector-s32-set! . G4f61) (bytevector-s32-ref . G4f60) (bytevector-s32-native-set! . G4f5f) (bytevector-s32-native-ref . G4f5e) (bytevector-s16-set! . G4f5d) (bytevector-s16-ref . G4f5c) (bytevector-s16-native-set! . G4f5b) (bytevector-s16-native-ref . G4f5a) (bytevector-length . G4f59) (bytevector-ieee-single-ref . G4f58) (bytevector-ieee-single-set! . G4f57) (bytevector-ieee-single-native-set! . G4f56) (bytevector-ieee-single-native-ref . G4f55) (bytevector-ieee-double-set! . G4f54) (bytevector-ieee-double-ref . G4f53) (bytevector-ieee-double-native-set! . G4f52) (bytevector-ieee-double-native-ref . G4f51) (bytevector-fill! . G4f50) (bytevector-copy! . G4f4f) (bytevector-copy . G4f4e) (bytevector->uint-list . G4f4d) (bytevector->u8-list . G4f4c) (bytevector->sint-list . G4f4b) (no-nans-violation? . G4c36) (no-infinities-violation? . G4c21) (make-no-nans-violation . G4c34) (make-no-infinities-violation . G4c1f) (real->flonum . G4f4a) (flzero? . G4f49) (fltruncate . G4f48) (fltan . G4f47) (flsqrt . G4f46) (flsin . G4f45) (flround . G4f44) (flpositive? . G4f43) (flonum? . G4f42) (flodd? . G4f41) (flnumerator . G4f40) (flnegative? . G4f3f) (flnan? . G4f3e) (flmod0 . G4f3d) (flmod . G4f3c) (flmin . G4f3b) (flmax . G4f3a) (fllog . G4f39) (flinteger? . G4f38) (flinfinite? . G4f37) (flfloor . G4f36) (flfinite? . G4f35) (flexpt . G4f34) (flexp . G4f33) (fleven? . G4f32) (fldiv0-and-mod0 . G4f31) (fldiv0 . G4f30) (fldiv-and-mod . G4f2f) (fldiv . G4f2e) (fldenominator . G4f2d) (flcos . G4f2c) (flceiling . G4f2b) (flatan . G4f2a) (flasin . G4f29) (flacos . G4f28) (flabs . G4f27) (fl>? . G4f26) (fl>=? . G4f25) (fl=? . G4f24) (fl<? . G4f23) (fl<=? . G4f22) (fl/ . G4f21) (fl- . G4f20) (fl+ . G4f1f) (fl* . G4f1e) (fixnum->flonum . G4f1d) (fxzero? . G4f1c) (fxxor . G4f1b) (fxrotate-bit-field . G4f1a) (fxreverse-bit-field . G4f19) (fxpositive? . G4f18) (fxodd? . G4f17) (fxnot . G4f16) (fxnegative? . G4f15) (fxmod0 . G4f14) (fxmod . G4f13) (fxmin . G4f12) (fxmax . G4f11) (fxlength . G4f10) (fxior . G4f0f) (fxif . G4f0e) (fxfirst-bit-set . G4f0d) (fxeven? . G4f0c) (fxdiv0-and-mod0 . G4f0b) (fxdiv0 . G4f0a) (fxdiv-and-mod . G4f09) (fxdiv . G4f08) (fxcopy-bit-field . G4f07) (fxcopy-bit . G4f06) (fxbit-set? . G4f05) (fxbit-field . G4f04) (fxbit-count . G4f03) (fxarithmetic-shift-right . G4f02) (fxarithmetic-shift-left . G4f01) (fxarithmetic-shift . G4f00) (fxand . G4eff) (fx>? . G4efe) (fx>=? . G4efd) (fx=? . G4efc) (fx<? . G4efb) (fx<=? . G4efa) (fx-/carry . G4ef9) (fx- . G4ef8) (fx+/carry . G4ef7) (fx+ . G4ef6) (fx*/carry . G4ef5) (fx* . G4ef4) (greatest-fixnum . G4ef3) (least-fixnum . G4ef2) (fixnum-width . G4ef1) (fixnum? . G4ef0) (bitwise-rotate-bit-field . G4eef) (bitwise-reverse-bit-field . G4eee) (bitwise-length . G4eed) (bitwise-if . G4eec) (bitwise-first-bit-set . G4eeb) (bitwise-copy-bit-field . G4eea) (bitwise-copy-bit . G4ee9) (bitwise-bit-set? . G4ee8) (bitwise-bit-field . G4ee7) (bitwise-bit-count . G4ee6) (bitwise-xor . G4ee5) (bitwise-ior . G4ee4) (bitwise-and . G4ee3) (bitwise-not . G4ee2) (bitwise-arithmetic-shift-right . G4ee1) (bitwise-arithmetic-shift-left . G4ee0) (bitwise-arithmetic-shift . G4edf) (zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-map . G4eda) (vector-length . G4ed9) (vector-for-each . G4ed8) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol=? . G4ed0) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-for-each . G4ec5) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-valued? . G4eb9) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (rational-valued? . G4eb5) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (null? . G4ead) (not . G4eac) (negative? . G4eab) (nan? . G4eaa) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer-valued? . G4e97) (integer->char . G4e96) (infinite? . G4e95) (inexact? . G4e94) (inexact . G4e93) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (finite? . G4e8e) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (exact-integer-sqrt . G4e8a) (exact . G4e89) (even? . G4e88) (error . G4e87) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (div0-and-mod0 . G4e82) (mod0 . G4e81) (div0 . G4e80) (div-and-mod . G4e7f) (mod . G4e7e) (div . G4e7d) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call/cc . G4e6f) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (boolean=? . G4e4e) (atan . G4e4d) (assertion-violation . G4e4c) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (library . G4e3c) (export . G4e3b) (&no-nans . G4e3a) (&no-infinities . G4e39) (&i/o-encoding . G4e38) (&i/o-decoding . G4e37) (&i/o-port . G4e36) (&i/o-file-does-not-exist . G4e35) (&i/o-file-already-exists . G4e34) (&i/o-file-is-read-only . G4e33) (&i/o-file-protection . G4e32) (&i/o-filename . G4e31) (&i/o-invalid-position . G4e30) (&i/o-write . G4e2f) (&i/o-read . G4e2e) (&i/o . G4e2d) (&undefined . G4e2c) (&syntax . G4e2b) (&lexical . G4e2a) (&implementation-restriction . G4e29) (&non-continuable . G4e28) (&who . G4e27) (&irritants . G4e26) (&assertion . G4e25) (&violation . G4e24) (&error . G4e23) (&serious . G4e22) (&warning . G4e21) (&message . G4e20) (&condition . G4e1f) (define-condition-type . G4e1e) (define-enumeration . G4e1d) (define-record-type . G4e1c) (parent-rtd . G4e1b) (nongenerative . G4e1a) (opaque . G4e19) (sealed . G4e18) (protocol . G4e17) (parent . G4e16) (immutable . G4e15) (mutable . G4e14) (fields . G4e13) (error-handling-mode . G4e12) (file-options . G4e11) (buffer-mode . G4e10) (eol-style . G4e0f) (guard . G4e0e) (trace-define . G4e0d) (trace-lambda . G4e0c) (unsyntax-splicing . G4e0b) (unsyntax . G4e0a) (unquote-splicing . G4e09) (unquote . G4e08) (_ . G4e07) (else . G4e06) (=> . G4e05) (... . G4e04) (assert . G4e03) (endianness . G4e02) (delay . G4e01) (time . G4e00) (do . G4dff) (cond . G4dfe) (let* . G4dfd) (let . G4dfc) (let*-values . G4dfb) (let-values . G4dfa) (identifier-syntax . G4df9) (with-syntax . G4df8) (quasisyntax . G4df7) (quasiquote . G4df6) (syntax-rules . G4df5) (include . G4df4) (define-struct . G4df3) (record-constructor-descriptor . G4df2) (record-type-descriptor . G4df1) (case . G4df0) (parameterize . G4def) (unless . G4dee) (when . G4ded) (or . G4dec) (and . G4deb) (if . G4dea) (letrec* . G4de9) (letrec . G4de8) (type-descriptor . G4de7) (case-lambda . G4de6) (lambda . G4de5) (syntax . G4de4) (syntax-case . G4de3) (quote . G4de2) (foreign-call . G4de1) (letrec-syntax . G4de0) (let-syntax . G4ddf) (set! . G4dde) (import . G4ddd) (begin . G4ddc) (module . G4ddb) (define-syntax . G4dda) (define . G4dd9)) '((G4c3a core-prim . &no-nans-rcd) (G4c38 core-prim . &no-nans-rtd) (G4c25 core-prim . &no-infinities-rcd) (G4c23 core-prim . &no-infinities-rtd) (G4c10 core-prim . &i/o-encoding-rcd) (G4c0e core-prim . &i/o-encoding-rtd) (G4bf6 core-prim . &i/o-decoding-rcd) (G4bf4 core-prim . &i/o-decoding-rtd) (G4be1 core-prim . &i/o-port-rcd) (G4bdf core-prim . &i/o-port-rtd) (G4bc7 core-prim . &i/o-file-does-not-exist-rcd) (G4bc5 core-prim . &i/o-file-does-not-exist-rtd) (G4bb2 core-prim . &i/o-file-already-exists-rcd) (G4bb0 core-prim . &i/o-file-already-exists-rtd) (G4b9d core-prim . &i/o-file-is-read-only-rcd) (G4b9b core-prim . &i/o-file-is-read-only-rtd) (G4b88 core-prim . &i/o-file-protection-rcd) (G4b86 core-prim . &i/o-file-protection-rtd) (G4b73 core-prim . &i/o-filename-rcd) (G4b71 core-prim . &i/o-filename-rtd) (G4b59 core-prim . &i/o-invalid-position-rcd) (G4b57 core-prim . &i/o-invalid-position-rtd) (G4b3f core-prim . &i/o-write-rcd) (G4b3d core-prim . &i/o-write-rtd) (G4b2a core-prim . &i/o-read-rcd) (G4b28 core-prim . &i/o-read-rtd) (G4b15 core-prim . &i/o-rcd) (G4b13 core-prim . &i/o-rtd) (G4b00 core-prim . &undefined-rcd) (G4afe core-prim . &undefined-rtd) (G4aeb core-prim . &syntax-rcd) (G4ae9 core-prim . &syntax-rtd) (G4acc core-prim . &lexical-rcd) (G4aca core-prim . &lexical-rtd) (G4ab7 core-prim . &implementation-restriction-rcd) (G4ab5 core-prim . &implementation-restriction-rtd) (G4aa2 core-prim . &non-continuable-rcd) (G4aa0 core-prim . &non-continuable-rtd) (G4a8d core-prim . &who-rcd) (G4a8b core-prim . &who-rtd) (G4a73 core-prim . &irritants-rcd) (G4a71 core-prim . &irritants-rtd) (G4a59 core-prim . &assertion-rcd) (G4a57 core-prim . &assertion-rtd) (G4a44 core-prim . &violation-rcd) (G4a42 core-prim . &violation-rtd) (G4a2f core-prim . &error-rcd) (G4a2d core-prim . &error-rtd) (G4a1a core-prim . &serious-rcd) (G4a18 core-prim . &serious-rtd) (G4a05 core-prim . &warning-rcd) (G4a03 core-prim . &warning-rtd) (G49f0 core-prim . &message-rcd) (G49ee core-prim . &message-rtd) (G4993 core-prim . &condition-rcd) (G4991 core-prim . &condition-rtd) (G3054 core-prim . syntax-error) (G2f6d core-prim . syntax-dispatch) (G50a5 core-prim . pretty-print) (G50a4 core-prim . eval-core) (G50a3 core-prim . set-symbol-value!) (G50a2 core-prim . symbol-value) (G50a1 core-prim . gensym) (G50a0 core-prim . void) (G4d3b core-prim . load) (G3066 core-prim . interaction-environment) (G509f core-prim . char-ready?) (G509e core-prim . regexp?) (G509d core-prim . read-line) (G509c core-prim . dotted-list?) (G509b core-prim . circular-list?) (G509a core-prim . proper-list?) (G5099 core-prim . circular-list) (G5098 core-prim . last) (G5097 core-prim . last-pair) (G5096 core-prim . not-pair?) (G5095 core-prim . split-at!) (G5094 core-prim . split-at) (G5093 core-prim . list=) (G5092 core-prim . list-copy) (G5091 core-prim . list-tabulate) (G5090 core-prim . make-list) (G508f core-prim . xcons) (G508e core-prim . tenth) (G508d core-prim . ninth) (G508c core-prim . eighth) (G508b core-prim . seventh) (G508a core-prim . sixth) (G5089 core-prim . fifth) (G5088 core-prim . drop-right!) (G5087 core-prim . drop-right) (G5086 core-prim . take-right) (G5085 core-prim . take!) (G5084 core-prim . drop) (G5083 core-prim . take) (G5082 core-prim . car+cdr) (G5081 core-prim . third) (G5080 core-prim . second) (G507f core-prim . first) (G507e core-prim . iota) (G507d core-prim . every) (G507c core-prim . assoc-ref) (G507b core-prim . alist-cons) (G507a core-prim . append-map) (G5079 core-prim . print) (G5078 core-prim . format) (G5077 core-prim . standard-library-path) (G5076 core-prim . file-newer?) (G5075 core-prim . stat-mtime) (G5074 core-prim . current-directory) (G5073 core-prim . write-to-file) (G5072 core-prim . file->list) (G5071 core-prim . file->string) (G5070 core-prim . digit->integer) (G506f core-prim . call-with-string-input-port) (G506e core-prim . call-with-string-io) (G506d core-prim . string-split) (G506c core-prim . bytevector-for-each) (G506b core-prim . string->regexp) (G506a core-prim . rxmatch) (G5069 core-prim . regexp-replace-all) (G5068 core-prim . hashtable-for-each) (G5067 core-prim . readdir) (G5066 core-prim . get-environment-variables) (G5065 core-prim . get-environment-variable) (G5064 core-prim . get-timeofday) (G5063 core-prim . get-command-line) (G5062 core-prim . sys-display) (G5061 core-prim . source-info) (G5060 core-prim . make-compiler-instruction) (G505f core-prim . make-instruction) (G505e core-prim . set-source-info!) (G505d core-prim . bignum?) (G505c core-prim . make-complex) (G505b core-prim . fast-equal?) (G505a core-prim . fasl-read) (G5059 core-prim . fasl-write) (G5058 core-prim . receive) (G2840 core-prim . make-parameter) (G5057 core-prim . string-upcase) (G5056 core-prim . string-titlecase) (G5055 core-prim . string-normalize-nfkd) (G5054 core-prim . string-normalize-nfkc) (G5053 core-prim . string-normalize-nfd) (G5052 core-prim . string-normalize-nfc) (G5051 core-prim . string-foldcase) (G5050 core-prim . string-downcase) (G504f core-prim . string-ci>?) (G504e core-prim . string-ci>=?) (G504d core-prim . string-ci=?) (G504c core-prim . string-ci<?) (G504b core-prim . string-ci<=?) (G504a core-prim . char-whitespace?) (G5049 core-prim . char-upper-case?) (G5048 core-prim . char-title-case?) (G5047 core-prim . char-numeric?) (G5046 core-prim . char-lower-case?) (G5045 core-prim . char-general-category) (G5044 core-prim . char-upcase) (G5043 core-prim . char-titlecase) (G5042 core-prim . char-foldcase) (G5041 core-prim . char-downcase) (G5040 core-prim . char-ci>?) (G503f core-prim . char-ci>=?) (G503e core-prim . char-ci=?) (G503d core-prim . char-ci<?) (G503c core-prim . char-ci<=?) (G503b core-prim . char-alphabetic?) (G2da8 core-prim . make-variable-transformer) (G305c core-prim . identifier?) (G3046 core-prim . generate-temporaries) (G3048 core-prim . free-identifier=?) (G3060 core-prim . syntax->datum) (G305e core-prim . datum->syntax) (G304a core-prim . bound-identifier=?) (G503a core-prim . record-type-descriptor?) (G5039 core-prim . record-predicate) (G5038 core-prim . record-mutator) (G5037 core-prim . record-constructor) (G5036 core-prim . record-accessor) (G5035 core-prim . make-record-type-descriptor) (G5034 core-prim . make-record-constructor-descriptor) (G5033 core-prim . record?) (G5032 core-prim . record-type-uid) (G5031 core-prim . record-type-sealed?) (G5030 core-prim . record-type-parent) (G502f core-prim . record-type-opaque?) (G502e core-prim . record-type-name) (G502d core-prim . record-type-generative?) (G502c core-prim . record-type-field-names) (G502b core-prim . record-rtd) (G502a core-prim . record-field-mutable?) (G5029 core-prim . delete-file) (G5028 core-prim . file-exists?) (G5027 core-prim . vector-sort!) (G5026 core-prim . vector-sort) (G5025 core-prim . list-sort) (G5024 core-prim . symbol-hash) (G5023 core-prim . string-ci-hash) (G5022 core-prim . string-hash) (G5021 core-prim . equal-hash) (G5020 core-prim . hashtable-equivalence-function) (G501f core-prim . make-hashtable) (G501e core-prim . hashtable-hash-function) (G501d core-prim . make-eqv-hashtable) (G501c core-prim . make-eq-hashtable) (G501b core-prim . hashtable?) (G501a core-prim . hashtable-update!) (G5019 core-prim . hashtable-size) (G5018 core-prim . hashtable-set!) (G5017 core-prim . hashtable-ref) (G5016 core-prim . hashtable-mutable?) (G5015 core-prim . hashtable-keys) (G5014 core-prim . hashtable-entries) (G5013 core-prim . hashtable-delete!) (G5012 core-prim . hashtable-copy) (G5011 core-prim . hashtable-contains?) (G5010 core-prim . hashtable-clear!) (G500f core-prim . call-with-output-file) (G500e core-prim . call-with-input-file) (G500d core-prim . write-char) (G500c core-prim . write) (G500b core-prim . with-output-to-file) (G500a core-prim . with-input-from-file) (G5009 core-prim . read-char) (G5008 core-prim . read) (G5007 core-prim . peek-char) (G5006 core-prim . open-output-file) (G5005 core-prim . open-input-file) (G5004 core-prim . newline) (G5003 core-prim . display) (G5002 core-prim . close-output-port) (G5001 core-prim . close-input-port) (G5000 core-prim . eof-object?) (G4fff core-prim . eof-object) (G4ffe core-prim . current-error-port) (G4ffd core-prim . current-output-port) (G4ffc core-prim . current-input-port) (G4ffb core-prim . output-port?) (G4ffa core-prim . input-port?) (G4ff9 core-prim . utf-8-codec) (G4ff8 core-prim . utf-16-codec) (G4ff7 core-prim . transcoder-error-handling-mode) (G4ff6 core-prim . transcoder-eol-style) (G4ff5 core-prim . transcoder-codec) (G4ff4 core-prim . transcoded-port) (G4ff3 core-prim . textual-port?) (G4ff2 core-prim . string->bytevector) (G4ff1 core-prim . standard-output-port) (G4ff0 core-prim . standard-input-port) (G4fef core-prim . standard-error-port) (G4fee core-prim . set-port-position!) (G4fed core-prim . put-u8) (G4fec core-prim . put-string) (G4feb core-prim . put-datum) (G4fea core-prim . put-char) (G4fe9 core-prim . put-bytevector) (G4fe8 core-prim . port?) (G4fe7 core-prim . port-transcoder) (G4fe6 core-prim . port-position) (G4fe5 core-prim . port-has-set-port-position!?) (G4fe4 core-prim . port-has-port-position?) (G4fe3 core-prim . port-eof?) (G4fe2 core-prim . output-port-buffer-mode) (G4fe1 core-prim . open-string-output-port) (G4fe0 core-prim . open-string-input-port) (G4fdf core-prim . open-file-output-port) (G4fde core-prim . open-file-input/output-port) (G4fdd core-prim . open-file-input-port) (G4fdc core-prim . open-bytevector-output-port) (G4fdb core-prim . open-bytevector-input-port) (G4fda core-prim . native-transcoder) (G4fd9 core-prim . native-eol-style) (G4fd8 core-prim . make-transcoder) (G4fd7 core-prim . latin-1-codec) (G4b39 core-prim . make-i/o-write-error) (G4b24 core-prim . make-i/o-read-error) (G4bd7 core-prim . make-i/o-port-error) (G4b4f core-prim . make-i/o-invalid-position-error) (G4b69 core-prim . make-i/o-filename-error) (G4b82 core-prim . make-i/o-file-protection-error) (G4b97 core-prim . make-i/o-file-is-read-only-error) (G4bc1 core-prim . make-i/o-file-does-not-exist-error) (G4bac core-prim . make-i/o-file-already-exists-error) (G4b0f core-prim . make-i/o-error) (G4c06 core-prim . make-i/o-encoding-error) (G4bf0 core-prim . make-i/o-decoding-error) (G4fd6 core-prim . make-custom-textual-output-port) (G4fd5 core-prim . make-custom-textual-input/output-port) (G4fd4 core-prim . make-custom-textual-input-port) (G4fd3 core-prim . make-custom-binary-output-port) (G4fd2 core-prim . make-custom-binary-input/output-port) (G4fd1 core-prim . make-custom-binary-input-port) (G4fd0 core-prim . make-bytevector) (G4fcf core-prim . lookahead-u8) (G4fce core-prim . lookahead-char) (G4b3b core-prim . i/o-write-error?) (G4b26 core-prim . i/o-read-error?) (G4bdb core-prim . i/o-port-error?) (G4b53 core-prim . i/o-invalid-position-error?) (G4b6d core-prim . i/o-filename-error?) (G4b84 core-prim . i/o-file-protection-error?) (G4b99 core-prim . i/o-file-is-read-only-error?) (G4bc3 core-prim . i/o-file-does-not-exist-error?) (G4bae core-prim . i/o-file-already-exists-error?) (G4b11 core-prim . i/o-error?) (G4bdd core-prim . i/o-error-port) (G4b6f core-prim . i/o-error-filename) (G4c0a core-prim . i/o-encoding-error?) (G4c0c core-prim . i/o-encoding-error-char) (G4bf2 core-prim . i/o-decoding-error?) (G4fcd core-prim . get-u8) (G4fcc core-prim . get-string-n!) (G4fcb core-prim . get-string-n) (G4fca core-prim . get-string-all) (G4fc9 core-prim . get-line) (G4fc8 core-prim . get-datum) (G4fc7 core-prim . get-char) (G4fc6 core-prim . get-bytevector-some) (G4fc5 core-prim . get-bytevector-n!) (G4fc4 core-prim . get-bytevector-n) (G4fc3 core-prim . get-bytevector-all) (G4fc2 core-prim . flush-output-port) (G4fc1 core-prim . close-port) (G3034 core-prim . scheme-report-environment) (G4fc0 core-prim . quotient) (G3032 core-prim . null-environment) (G4fbf core-prim . remainder) (G4fbe core-prim . modulo) (G4fbd core-prim . inexact->exact) (G4fbc core-prim . force) (G4fbb core-prim . exact->inexact) (G4fba core-prim . make-promise) (G4fb9 core-prim . exit) (G4d35 core-prim . command-line) (G4fb8 core-prim . string-fill!) (G4fb7 core-prim . string-set!) (G4fb6 core-prim . set-cdr!) (G4fb5 core-prim . set-car!) (G4fb4 core-prim . remove) (G4fb3 core-prim . remv) (G4fb2 core-prim . remp) (G4fb1 core-prim . remq) (G4fb0 core-prim . partition) (G4faf core-prim . memv) (G4fae core-prim . memq) (G4fad core-prim . memp) (G4fac core-prim . member) (G4fab core-prim . exists) (G4faa core-prim . for-all) (G4fa9 core-prim . fold-right) (G4fa8 core-prim . fold-left) (G4fa7 core-prim . find) (G4fa6 core-prim . filter) (G4fa5 core-prim . cons*) (G4fa4 core-prim . assv) (G4fa3 core-prim . assq) (G4fa2 core-prim . assp) (G4fa1 core-prim . assoc) (G4fa0 core-prim . call-with-string-output-port) (G4f9f core-prim . call-with-port) (G4f9e core-prim . call-with-bytevector-output-port) (G4f9d core-prim . bytevector->string) (G4f9c core-prim . buffer-mode?) (G4f9b core-prim . binary-port?) (G4f9a core-prim . with-exception-handler) (G4f99 core-prim . raise-continuable) (G4f98 core-prim . raise) (G3038 core-prim . eval) (G3030 core-prim . environment) (G4f97 core-prim . make-enumeration) (G4f96 core-prim . enum-set=?) (G4f95 core-prim . enum-set-universe) (G4f94 core-prim . enum-set-union) (G4f93 core-prim . enum-set-subset?) (G4f92 core-prim . enum-set-projection) (G4f91 core-prim . enum-set-member?) (G4f90 core-prim . enum-set-intersection) (G4f8f core-prim . enum-set-indexer) (G4f8e core-prim . enum-set-difference) (G4f8d core-prim . enum-set-constructor) (G4f8c core-prim . enum-set-complement) (G4f8b core-prim . enum-set->list) (G4a87 core-prim . who-condition?) (G4a01 core-prim . warning?) (G4a40 core-prim . violation?) (G4afc core-prim . undefined-violation?) (G4ae3 core-prim . syntax-violation?) (G4ae7 core-prim . syntax-violation-subform) (G4ae5 core-prim . syntax-violation-form) (G305a core-prim . syntax-violation) (G4f8a core-prim . simple-conditions) (G4a16 core-prim . serious-condition?) (G4a9e core-prim . non-continuable-violation?) (G49ea core-prim . message-condition?) (G4a83 core-prim . make-who-condition) (G49ff core-prim . make-warning) (G4a3e core-prim . make-violation) (G4afa core-prim . make-undefined-violation) (G4add core-prim . make-syntax-violation) (G4a14 core-prim . make-serious-condition) (G4a9c core-prim . make-non-continuable-violation) (G49e6 core-prim . make-message-condition) (G4ac6 core-prim . make-lexical-violation) (G4a69 core-prim . make-irritants-condition) (G4ab1 core-prim . make-implementation-restriction-violation) (G4a29 core-prim . make-error) (G4a53 core-prim . make-assertion-violation) (G4ac8 core-prim . lexical-violation?) (G4a6d core-prim . irritants-condition?) (G4ab3 core-prim . implementation-restriction-violation?) (G4a2b core-prim . error?) (G4a89 core-prim . condition-who) (G4f89 core-prim . condition-predicate) (G49ec core-prim . condition-message) (G4a6f core-prim . condition-irritants) (G4f88 core-prim . condition-accessor) (G4f87 core-prim . condition) (G4a55 core-prim . assertion-violation?) (G4f86 core-prim . condition?) (G4f85 core-prim . utf32->string) (G4f84 core-prim . utf16->string) (G4f83 core-prim . utf8->string) (G4f82 core-prim . uint-list->bytevector) (G4f81 core-prim . u8-list->bytevector) (G4f80 core-prim . string->utf8) (G4f7f core-prim . string->utf32) (G4f7e core-prim . string->utf16) (G4f7d core-prim . sint-list->bytevector) (G4f7c core-prim . native-endianness) (G4f7b core-prim . bytevector?) (G4f7a core-prim . bytevector=?) (G4f79 core-prim . bytevector-uint-set!) (G4f78 core-prim . bytevector-uint-ref) (G4f77 core-prim . bytevector-u8-set!) (G4f76 core-prim . bytevector-u8-ref) (G4f75 core-prim . bytevector-u64-set!) (G4f74 core-prim . bytevector-u64-ref) (G4f73 core-prim . bytevector-u64-native-set!) (G4f72 core-prim . bytevector-u64-native-ref) (G4f71 core-prim . bytevector-u32-set!) (G4f70 core-prim . bytevector-u32-ref) (G4f6f core-prim . bytevector-u32-native-set!) (G4f6e core-prim . bytevector-u32-native-ref) (G4f6d core-prim . bytevector-u16-set!) (G4f6c core-prim . bytevector-u16-ref) (G4f6b core-prim . bytevector-u16-native-set!) (G4f6a core-prim . bytevector-u16-native-ref) (G4f69 core-prim . bytevector-sint-set!) (G4f68 core-prim . bytevector-sint-ref) (G4f67 core-prim . bytevector-s8-set!) (G4f66 core-prim . bytevector-s8-ref) (G4f65 core-prim . bytevector-s64-set!) (G4f64 core-prim . bytevector-s64-ref) (G4f63 core-prim . bytevector-s64-native-set!) (G4f62 core-prim . bytevector-s64-native-ref) (G4f61 core-prim . bytevector-s32-set!) (G4f60 core-prim . bytevector-s32-ref) (G4f5f core-prim . bytevector-s32-native-set!) (G4f5e core-prim . bytevector-s32-native-ref) (G4f5d core-prim . bytevector-s16-set!) (G4f5c core-prim . bytevector-s16-ref) (G4f5b core-prim . bytevector-s16-native-set!) (G4f5a core-prim . bytevector-s16-native-ref) (G4f59 core-prim . bytevector-length) (G4f58 core-prim . bytevector-ieee-single-ref) (G4f57 core-prim . bytevector-ieee-single-set!) (G4f56 core-prim . bytevector-ieee-single-native-set!) (G4f55 core-prim . bytevector-ieee-single-native-ref) (G4f54 core-prim . bytevector-ieee-double-set!) (G4f53 core-prim . bytevector-ieee-double-ref) (G4f52 core-prim . bytevector-ieee-double-native-set!) (G4f51 core-prim . bytevector-ieee-double-native-ref) (G4f50 core-prim . bytevector-fill!) (G4f4f core-prim . bytevector-copy!) (G4f4e core-prim . bytevector-copy) (G4f4d core-prim . bytevector->uint-list) (G4f4c core-prim . bytevector->u8-list) (G4f4b core-prim . bytevector->sint-list) (G4c36 core-prim . no-nans-violation?) (G4c21 core-prim . no-infinities-violation?) (G4c34 core-prim . make-no-nans-violation) (G4c1f core-prim . make-no-infinities-violation) (G4f4a core-prim . real->flonum) (G4f49 core-prim . flzero?) (G4f48 core-prim . fltruncate) (G4f47 core-prim . fltan) (G4f46 core-prim . flsqrt) (G4f45 core-prim . flsin) (G4f44 core-prim . flround) (G4f43 core-prim . flpositive?) (G4f42 core-prim . flonum?) (G4f41 core-prim . flodd?) (G4f40 core-prim . flnumerator) (G4f3f core-prim . flnegative?) (G4f3e core-prim . flnan?) (G4f3d core-prim . flmod0) (G4f3c core-prim . flmod) (G4f3b core-prim . flmin) (G4f3a core-prim . flmax) (G4f39 core-prim . fllog) (G4f38 core-prim . flinteger?) (G4f37 core-prim . flinfinite?) (G4f36 core-prim . flfloor) (G4f35 core-prim . flfinite?) (G4f34 core-prim . flexpt) (G4f33 core-prim . flexp) (G4f32 core-prim . fleven?) (G4f31 core-prim . fldiv0-and-mod0) (G4f30 core-prim . fldiv0) (G4f2f core-prim . fldiv-and-mod) (G4f2e core-prim . fldiv) (G4f2d core-prim . fldenominator) (G4f2c core-prim . flcos) (G4f2b core-prim . flceiling) (G4f2a core-prim . flatan) (G4f29 core-prim . flasin) (G4f28 core-prim . flacos) (G4f27 core-prim . flabs) (G4f26 core-prim . fl>?) (G4f25 core-prim . fl>=?) (G4f24 core-prim . fl=?) (G4f23 core-prim . fl<?) (G4f22 core-prim . fl<=?) (G4f21 core-prim . fl/) (G4f20 core-prim . fl-) (G4f1f core-prim . fl+) (G4f1e core-prim . fl*) (G4f1d core-prim . fixnum->flonum) (G4f1c core-prim . fxzero?) (G4f1b core-prim . fxxor) (G4f1a core-prim . fxrotate-bit-field) (G4f19 core-prim . fxreverse-bit-field) (G4f18 core-prim . fxpositive?) (G4f17 core-prim . fxodd?) (G4f16 core-prim . fxnot) (G4f15 core-prim . fxnegative?) (G4f14 core-prim . fxmod0) (G4f13 core-prim . fxmod) (G4f12 core-prim . fxmin) (G4f11 core-prim . fxmax) (G4f10 core-prim . fxlength) (G4f0f core-prim . fxior) (G4f0e core-prim . fxif) (G4f0d core-prim . fxfirst-bit-set) (G4f0c core-prim . fxeven?) (G4f0b core-prim . fxdiv0-and-mod0) (G4f0a core-prim . fxdiv0) (G4f09 core-prim . fxdiv-and-mod) (G4f08 core-prim . fxdiv) (G4f07 core-prim . fxcopy-bit-field) (G4f06 core-prim . fxcopy-bit) (G4f05 core-prim . fxbit-set?) (G4f04 core-prim . fxbit-field) (G4f03 core-prim . fxbit-count) (G4f02 core-prim . fxarithmetic-shift-right) (G4f01 core-prim . fxarithmetic-shift-left) (G4f00 core-prim . fxarithmetic-shift) (G4eff core-prim . fxand) (G4efe core-prim . fx>?) (G4efd core-prim . fx>=?) (G4efc core-prim . fx=?) (G4efb core-prim . fx<?) (G4efa core-prim . fx<=?) (G4ef9 core-prim . fx-/carry) (G4ef8 core-prim . fx-) (G4ef7 core-prim . fx+/carry) (G4ef6 core-prim . fx+) (G4ef5 core-prim . fx*/carry) (G4ef4 core-prim . fx*) (G4ef3 core-prim . greatest-fixnum) (G4ef2 core-prim . least-fixnum) (G4ef1 core-prim . fixnum-width) (G4ef0 core-prim . fixnum?) (G4eef core-prim . bitwise-rotate-bit-field) (G4eee core-prim . bitwise-reverse-bit-field) (G4eed core-prim . bitwise-length) (G4eec core-prim . bitwise-if) (G4eeb core-prim . bitwise-first-bit-set) (G4eea core-prim . bitwise-copy-bit-field) (G4ee9 core-prim . bitwise-copy-bit) (G4ee8 core-prim . bitwise-bit-set?) (G4ee7 core-prim . bitwise-bit-field) (G4ee6 core-prim . bitwise-bit-count) (G4ee5 core-prim . bitwise-xor) (G4ee4 core-prim . bitwise-ior) (G4ee3 core-prim . bitwise-and) (G4ee2 core-prim . bitwise-not) (G4ee1 core-prim . bitwise-arithmetic-shift-right) (G4ee0 core-prim . bitwise-arithmetic-shift-left) (G4edf core-prim . bitwise-arithmetic-shift) (G4ede core-prim . zero?) (G4edd core-prim . vector?) (G4edc core-prim . vector-set!) (G4edb core-prim . vector-ref) (G4eda core-prim . vector-map) (G4ed9 core-prim . vector-length) (G4ed8 core-prim . vector-for-each) (G4ed7 core-prim . vector-fill!) (G4ed6 core-prim . vector->list) (G4ed5 core-prim . vector) (G4ed4 core-prim . values) (G4ed3 core-prim . truncate) (G4ed2 core-prim . tan) (G4ed1 core-prim . symbol?) (G4ed0 core-prim . symbol=?) (G4ecf core-prim . symbol->string) (G4ece core-prim . substring) (G4ecd core-prim . string?) (G4ecc core-prim . string>?) (G4ecb core-prim . string>=?) (G4eca core-prim . string=?) (G4ec9 core-prim . string<?) (G4ec8 core-prim . string<=?) (G4ec7 core-prim . string-ref) (G4ec6 core-prim . string-length) (G4ec5 core-prim . string-for-each) (G4ec4 core-prim . string-copy) (G4ec3 core-prim . string-append) (G4ec2 core-prim . string->symbol) (G4ec1 core-prim . string->number) (G4ec0 core-prim . string->list) (G4ebf core-prim . string) (G4ebe core-prim . sqrt) (G4ebd core-prim . sin) (G4ebc core-prim . round) (G4ebb core-prim . reverse) (G4eba core-prim . real?) (G4eb9 core-prim . real-valued?) (G4eb8 core-prim . real-part) (G4eb7 core-prim . rationalize) (G4eb6 core-prim . rational?) (G4eb5 core-prim . rational-valued?) (G4eb4 core-prim . procedure?) (G4eb3 core-prim . positive?) (G4eb2 core-prim . pair?) (G4eb1 core-prim . odd?) (G4eb0 core-prim . numerator) (G4eaf core-prim . number?) (G4eae core-prim . number->string) (G4ead core-prim . null?) (G4eac core-prim . not) (G4eab core-prim . negative?) (G4eaa core-prim . nan?) (G4ea9 core-prim . min) (G4ea8 core-prim . max) (G4ea7 core-prim . map) (G4ea6 core-prim . make-vector) (G4ea5 core-prim . make-string) (G4ea4 core-prim . make-rectangular) (G4ea3 core-prim . make-polar) (G4ea2 core-prim . magnitude) (G4ea1 core-prim . log) (G4ea0 core-prim . list?) (G4e9f core-prim . list-tail) (G4e9e core-prim . list-ref) (G4e9d core-prim . list->vector) (G4e9c core-prim . list->string) (G4e9b core-prim . list) (G4e9a core-prim . length) (G4e99 core-prim . lcm) (G4e98 core-prim . integer?) (G4e97 core-prim . integer-valued?) (G4e96 core-prim . integer->char) (G4e95 core-prim . infinite?) (G4e94 core-prim . inexact?) (G4e93 core-prim . inexact) (G4e92 core-prim . imag-part) (G4e91 core-prim . gcd) (G4e90 core-prim . for-each) (G4e8f core-prim . floor) (G4e8e core-prim . finite?) (G4e8d core-prim . expt) (G4e8c core-prim . exp) (G4e8b core-prim . exact?) (G4e8a core-prim . exact-integer-sqrt) (G4e89 core-prim . exact) (G4e88 core-prim . even?) (G4e87 core-prim . error) (G4e86 core-prim . eqv?) (G4e85 core-prim . equal?) (G4e84 core-prim . eq?) (G4e83 core-prim . dynamic-wind) (G4e82 core-prim . div0-and-mod0) (G4e81 core-prim . mod0) (G4e80 core-prim . div0) (G4e7f core-prim . div-and-mod) (G4e7e core-prim . mod) (G4e7d core-prim . div) (G4e7c core-prim . denominator) (G4e7b core-prim . cos) (G4e7a core-prim . cons) (G4e79 core-prim . complex?) (G4e78 core-prim . char?) (G4e77 core-prim . char>?) (G4e76 core-prim . char>=?) (G4e75 core-prim . char=?) (G4e74 core-prim . char<?) (G4e73 core-prim . char<=?) (G4e72 core-prim . char->integer) (G4e71 core-prim . ceiling) (G4e70 core-prim . call-with-values) (G4e6f core-prim . call/cc) (G4e6e core-prim . call-with-current-continuation) (G4e6d core-prim . cddddr) (G4e6c core-prim . cdddar) (G4e6b core-prim . cddadr) (G4e6a core-prim . cddaar) (G4e69 core-prim . cdaddr) (G4e68 core-prim . cdadar) (G4e67 core-prim . cdaadr) (G4e66 core-prim . cdaaar) (G4e65 core-prim . cadddr) (G4e64 core-prim . caddar) (G4e63 core-prim . cadadr) (G4e62 core-prim . cadaar) (G4e61 core-prim . caaddr) (G4e60 core-prim . caadar) (G4e5f core-prim . caaadr) (G4e5e core-prim . caaaar) (G4e5d core-prim . cdddr) (G4e5c core-prim . cddar) (G4e5b core-prim . cdadr) (G4e5a core-prim . cdaar) (G4e59 core-prim . caddr) (G4e58 core-prim . cadar) (G4e57 core-prim . caadr) (G4e56 core-prim . caaar) (G4e55 core-prim . cddr) (G4e54 core-prim . cdar) (G4e53 core-prim . cadr) (G4e52 core-prim . caar) (G4e51 core-prim . cdr) (G4e50 core-prim . car) (G4e4f core-prim . boolean?) (G4e4e core-prim . boolean=?) (G4e4d core-prim . atan) (G4e4c core-prim . assertion-violation) (G4e4b core-prim . asin) (G4e4a core-prim . apply) (G4e49 core-prim . append) (G4e48 core-prim . angle) (G4e47 core-prim . acos) (G4e46 core-prim . abs) (G4e45 core-prim . /) (G4e44 core-prim . *) (G4e43 core-prim . -) (G4e42 core-prim . +) (G4e41 core-prim . >=) (G4e40 core-prim . >) (G4e3f core-prim . =) (G4e3e core-prim . <=) (G4e3d core-prim . <) (G4e3c core-prim . library) (G4e3b core-prim . export) (G4e3a $core-rtd &no-nans-rtd &no-nans-rcd) (G4e39 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e38 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e37 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e36 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e35 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e34 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e33 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e32 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e31 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e30 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e2f $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e2e $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e2d $core-rtd &i/o-rtd &i/o-rcd) (G4e2c $core-rtd &undefined-rtd &undefined-rcd) (G4e2b $core-rtd &syntax-rtd &syntax-rcd) (G4e2a $core-rtd &lexical-rtd &lexical-rcd) (G4e29 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e28 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e27 $core-rtd &who-rtd &who-rcd) (G4e26 $core-rtd &irritants-rtd &irritants-rcd) (G4e25 $core-rtd &assertion-rtd &assertion-rcd) (G4e24 $core-rtd &violation-rtd &violation-rcd) (G4e23 $core-rtd &error-rtd &error-rcd) (G4e22 $core-rtd &serious-rtd &serious-rcd) (G4e21 $core-rtd &warning-rtd &warning-rcd) (G4e20 $core-rtd &message-rtd &message-rcd) (G4e1f $core-rtd &condition-rtd &condition-rcd) (G4e1e macro . define-condition-type) (G4e1d macro . define-enumeration) (G4e1c macro . define-record-type) (G4e1b macro . parent-rtd) (G4e1a macro . nongenerative) (G4e19 macro . opaque) (G4e18 macro . sealed) (G4e17 macro . protocol) (G4e16 macro . parent) (G4e15 macro . immutable) (G4e14 macro . mutable) (G4e13 macro . fields) (G4e12 macro . error-handling-mode) (G4e11 macro . file-options) (G4e10 macro . buffer-mode) (G4e0f macro . eol-style) (G4e0e macro . guard) (G4e0d macro . trace-define) (G4e0c macro . trace-lambda) (G4e0b macro . unsyntax-splicing) (G4e0a macro . unsyntax) (G4e09 macro . unquote-splicing) (G4e08 macro . unquote) (G4e07 macro . _) (G4e06 macro . else) (G4e05 macro . =>) (G4e04 macro . ...) (G4e03 macro . assert) (G4e02 macro . endianness) (G4e01 macro . delay) (G4e00 macro . time) (G4dff macro . do) (G4dfe macro . cond) (G4dfd macro . let*) (G4dfc macro . let) (G4dfb macro . let*-values) (G4dfa macro . let-values) (G4df9 macro . identifier-syntax) (G4df8 macro . with-syntax) (G4df7 macro . quasisyntax) (G4df6 macro . quasiquote) (G4df5 macro . syntax-rules) (G4df4 macro . include) (G4df3 macro . define-struct) (G4df2 core-macro . record-constructor-descriptor) (G4df1 core-macro . record-type-descriptor) (G4df0 macro . case) (G4def macro . parameterize) (G4dee macro . unless) (G4ded macro . when) (G4dec core-macro . or) (G4deb core-macro . and) (G4dea core-macro . if) (G4de9 core-macro . letrec*) (G4de8 core-macro . letrec) (G4de7 core-macro . type-descriptor) (G4de6 core-macro . case-lambda) (G4de5 core-macro . lambda) (G4de4 core-macro . syntax) (G4de3 core-macro . syntax-case) (G4de2 core-macro . quote) (G4de1 core-macro . foreign-call) (G4de0 letrec-syntax) (G4ddf let-syntax) (G4dde set!) (G4ddd import) (G4ddc begin) (G4ddb module) (G4dda define-syntax) (G4dd9 define)) values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50c6 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50a5) (eval-core . G50a4) (set-symbol-value! . G50a3) (symbol-value . G50a2) (gensym . G50a1) (void . G50a0)) '() values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50c7 '(mosh) '() '() '() '() '((set-symbol-value! . G50a3) (symbol-value . G50a2) (assoc-ref . G507c) (alist-cons . G507b) (print . G5079) (format . G5078) (standard-library-path . G5077) (file-newer? . G5076) (stat-mtime . G5075) (current-directory . G5074) (write-to-file . G5073) (file->list . G5072) (file->string . G5071) (digit->integer . G5070) (call-with-string-input-port . G506f) (call-with-string-io . G506e) (string-split . G506d) (bytevector-for-each . G506c) (string->regexp . G506b) (rxmatch . G506a) (regexp-replace-all . G5069) (hashtable-for-each . G5068) (get-timeofday . G5064) (get-command-line . G5063) (sys-display . G5062) (source-info . G5061) (make-compiler-instruction . G5060) (make-instruction . G505f) (set-source-info! . G505e) (bignum? . G505d) (make-complex . G505c) (fast-equal? . G505b) (fasl-read . G505a) (fasl-write . G5059) (include . G4df4)) '() values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50c8 '(mosh backend) '() '() '() '() '((receive . G5058)) '() values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50c9 '(mosh file) '() '() '() '() '((read-line . G509d) (file-newer? . G5076) (stat-mtime . G5075) (current-directory . G5074) (write-to-file . G5073) (file->list . G5072) (file->string . G5071)) '() values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50ca '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G506c)) '() values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50cb '(mosh number) '() '() '() '() '((digit->integer . G5070)) '() values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50cc '(mosh string) '() '() '() '() '((print . G5079) (format . G5078) (call-with-string-input-port . G506f) (call-with-string-io . G506e) (string-split . G506d) (string->regexp . G506b)) '() values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50cd '(mosh list) '() '() '() '() '((assoc-ref . G507c)) '() values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50ce '(mosh regexp) '() '() '() '() '((rxmatch . G506a) (regexp-replace-all . G5069)) '() values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50cf '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5068)) '() values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50d0 '(mosh parameters) '() '() '() '() '((make-parameter . G2840) (parameterize . G4def)) '() values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50d1 '(system) '() '() '() '() '((readdir . G5067) (get-environment-variables . G5066) (get-environment-variable . G5065)) '() values values '#f '#f '#f '#f) (G2b84@G2a29@install-library 'G50d2 '(srfi :1) '() '() '() '() '((dotted-list? . G509c) (circular-list? . G509b) (proper-list? . G509a) (circular-list . G5099) (last . G5098) (last-pair . G5097) (not-pair? . G5096) (split-at! . G5095) (split-at . G5094) (list= . G5093) (list-copy . G5092) (list-tabulate . G5091) (make-list . G5090) (xcons . G508f) (tenth . G508e) (ninth . G508d) (eighth . G508c) (seventh . G508b) (sixth . G508a) (fifth . G5089) (drop-right! . G5088) (drop-right . G5087) (take-right . G5086) (take! . G5085) (drop . G5084) (take . G5083) (car+cdr . G5082) (third . G5081) (second . G5080) (first . G507f) (iota . G507e) (every . G507d) (alist-cons . G507b) (append-map . G507a)) '() values values '#f '#f '#f '#f))
((lambda (G4d30@for-each-with-index G4d32@repl G4d34@trace-printer G4d36@command-line G4d38@local-library-path G4d3a@load/args G4d3c@load G4d3e@ironscheme-build G4d40@eval-top-level G4d42@compile-system-libraries G4d44@compile G4d46@compile->closure G4d48@pre-compile-r6rs-file G4d4a@load-r6rs-top-level G4d4c@write-record) (begin (set! G4d30@for-each-with-index (lambda (G4d63@proc G4d64@lst) (letrec ((G4d67@loop (lambda (G4d69@i G4d6a@lst) (if (null? G4d6a@lst) (if '#f '#f (void)) (begin (G4d63@proc G4d69@i (car G4d6a@lst)) (G4d67@loop (+ G4d69@i '1) (cdr G4d6a@lst))))))) (G4d67@loop '1 G4d64@lst)))) (set! G4d32@repl (lambda G4d6d@x ((lambda (G4d70@rec) (begin (set! G4d70@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d73@G4d71) (lambda () (with-exception-handler (lambda (G4d75@e) ((call/cc (lambda (G4d77@G4d72) (G4d73@G4d71 (lambda () (if '#t (G4d30@for-each-with-index (lambda (G4d79@i G4d7a@x) ((lambda (G4d7d@rtd) (begin (format '#t '"   ~d. ~a" G4d79@i (record-type-name G4d7d@rtd)) ((lambda (G4d7f@v) ((lambda (G4d81@t) (if (memv G4d81@t '(0)) (newline) (if (memv G4d81@t '(1)) (begin (display '": ") (write ((record-accessor G4d7d@rtd '0) G4d7a@x)) (newline)) (begin (display '":\n") ((letrec ((G4d83@f (lambda (G4d85@i) (if (not (= G4d85@i (vector-length G4d7f@v))) (begin (display '"       ") (display (vector-ref G4d7f@v G4d85@i)) (display '": ") (write ((record-accessor G4d7d@rtd G4d85@i) G4d7a@x)) (newline) (G4d83@f (+ G4d85@i '1))) (void))))) G4d83@f) '0))))) (vector-length G4d7f@v))) (record-type-field-names G4d7d@rtd)))) (record-rtd G4d7a@x))) (simple-conditions G4d75@e)) (G4d77@G4d72 (lambda () (raise-continuable G4d75@e)))))))))) (lambda () (begin '#f ((lambda (G4d87@line) (if (eof-object? G4d87@line) (exit) (write (G4d40@eval-top-level (call-with-port (open-string-input-port G4d87@line) read))))) (get-line (current-input-port)))))))))) (newline) (G4d70@rec)))) (G4d70@rec))) '#f))) (set! G4d34@trace-printer (G290b@G2841@make-parameter write)) (set! G4d36@command-line (G290b@G2841@make-parameter (get-command-line))) (set! G4d38@local-library-path (lambda (G4d89@filename) (cons '"." (G2b74@G2a09@library-path)))) (set! G4d3a@load/args (lambda (G4d8b@filename . G4d8d@args) (begin (apply G4d4a@load-r6rs-top-level G4d8b@filename 'load G4d8d@args) (void)))) (set! G4d3c@load (lambda (G4d8f@filename) (begin (apply G4d4a@load-r6rs-top-level G4d8f@filename 'load (G4d36@command-line)) (void)))) (set! G4d3e@ironscheme-build (lambda () (G4d3c@load '"ironscheme-buildscript.ss"))) (set! G4d40@eval-top-level (lambda (G4d91@x) (G4965@G3039@eval G4d91@x (G497c@G3067@interaction-environment)))) (set! G4d42@compile-system-libraries (lambda () (G4d40@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d44@compile (lambda (G4d93@filename) (G4d4a@load-r6rs-top-level G4d93@filename 'compile))) (set! G4d46@compile->closure (lambda (G4d95@filename) (G4d4a@load-r6rs-top-level G4d95@filename 'closure))) (set! G4d48@pre-compile-r6rs-file (lambda (G4d97@filename) (G4d4a@load-r6rs-top-level G4d97@filename 'compile))) (set! G4d4a@load-r6rs-top-level (lambda (G4d99@filename G4d9a@how . G4d9d@args) ((lambda (G4da1@G4d9f G4da2@G4da0) ((lambda (G4da5@swap) (dynamic-wind G4da5@swap (lambda () ((lambda (G4da7@x*) ((lambda (G4da9@t) (if (memv G4da9@t '(closure)) (G497b@G3065@pre-compile-r6rs-top-level G4da7@x*) (if (memv G4da9@t '(load)) ((lambda (G4dad@G4dab G4dae@G4dac) ((lambda (G4db1@swap) (dynamic-wind G4db1@swap (lambda () ((G497a@G3063@compile-r6rs-top-level G4da7@x*))) G4db1@swap)) (lambda () ((lambda (G4db3@t) (begin (G4dad@G4dab G4dae@G4dac) (set! G4dae@G4dac G4db3@t))) (G4dad@G4dab))))) G4d36@command-line (cons G4d99@filename (car G4d9d@args))) (if (memv G4da9@t '(compile)) (begin (G497a@G3063@compile-r6rs-top-level G4da7@x*) (G2b78@G2a11@serialize-all G2906@G2837@serialize-library G2960@G2919@compile-core-expr)) (if '#f '#f (void)))))) G4d9a@how)) (with-input-from-file G4d99@filename (lambda () ((letrec ((G4db5@f (lambda () ((lambda (G4db7@x) (if (eof-object? G4db7@x) '() (cons G4db7@x (G4db5@f)))) (G28fe@G2827@read-annotated))))) G4db5@f)))))) G4da5@swap)) (lambda () ((lambda (G4db9@t) (begin (G4da1@G4d9f G4da2@G4da0) (set! G4da2@G4da0 G4db9@t))) (G4da1@G4d9f))))) G2b74@G2a09@library-path (G4d38@local-library-path G4d99@filename)))) (set! G4d4c@write-record (lambda (G4dbb@record G4dbc@port) ((lambda (G4dbf@rtd) (begin (format G4dbc@port '"    ~a" (record-type-name G4dbf@rtd)) ((lambda (G4dc1@v) ((lambda (G4dc3@t) (if (memv G4dc3@t '(0)) (newline) (if (memv G4dc3@t '(1)) (begin (display '": " G4dbc@port) (write ((record-accessor G4dbf@rtd '0) G4dbb@record) G4dbc@port) (newline G4dbc@port)) (begin (display '":\n") ((letrec ((G4dc5@f (lambda (G4dc7@i) (if (not (= G4dc7@i (vector-length G4dc1@v))) (begin (display '"       " G4dbc@port) (display (vector-ref G4dc1@v G4dc7@i) G4dbc@port) (display '": " G4dbc@port) (write ((record-accessor G4dbf@rtd G4dc7@i) G4dbb@record) G4dbc@port) (newline G4dbc@port) (G4dc5@f (+ G4dc7@i '1))) (void))))) G4dc5@f) '0))))) (vector-length G4dc1@v))) (record-type-field-names G4dbf@rtd)))) (record-rtd G4dbb@record)))) (begin (set! G4dd7@G4d4c@write-record G4d4c@write-record) (set! G4dd6@G4d4a@load-r6rs-top-level G4d4a@load-r6rs-top-level) (set! G4dd5@G4d48@pre-compile-r6rs-file G4d48@pre-compile-r6rs-file) (set! G4dd4@G4d46@compile->closure G4d46@compile->closure) (set! G4dd3@G4d44@compile G4d44@compile) (set! G4dd2@G4d42@compile-system-libraries G4d42@compile-system-libraries) (set! G4dd1@G4d40@eval-top-level G4d40@eval-top-level) (set! G4dd0@G4d3e@ironscheme-build G4d3e@ironscheme-build) (set! G4dcf@G4d3c@load G4d3c@load) (set! G4dce@G4d3a@load/args G4d3a@load/args) (set! G4dcd@G4d38@local-library-path G4d38@local-library-path) (set! G4dcc@G4d36@command-line G4d36@command-line) (set! G4dcb@G4d34@trace-printer G4d34@trace-printer) (set! G4dca@G4d32@repl G4d32@repl) (set! G4dc9@G4d30@for-each-with-index G4d30@for-each-with-index) (G2b79@G2a13@current-precompiled-library-loader G2907@G2839@load-serialized-library) (set-symbol-value! 'load G4d3c@load) (set-symbol-value! 'pre-compile-r6rs-file G4d48@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d40@eval-top-level) (set-symbol-value! 'int-env-syms G495c@G3027@interaction-environment-symbols) (set-symbol-value! 'expanded2core G295f@G2917@expanded->core) (set-symbol-value! 'trace-printer G4d34@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d4d@c) (condition (G4c8d@G4a9d@make-non-continuable-violation) (G4c83@G4a84@make-who-condition 'raise) (G4c47@G49e7@make-message-condition '"returned from non-continuable exception") (G4c79@G4a6a@make-irritants-condition (list G4d4d@c))))) (G2b74@G2a09@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4d4f@args G4d50@port) (with-exception-handler (lambda (G4d53@c) (begin (display '" Condition components:\n" G4d50@port) (G4d30@for-each-with-index (lambda (G4d55@i G4d56@x) ((lambda (G4d59@rtd) (begin (format G4d50@port '"   ~d. ~a" G4d55@i (record-type-name G4d59@rtd)) ((lambda (G4d5b@v) ((lambda (G4d5d@t) (if (memv G4d5d@t '(0)) (newline) (if (memv G4d5d@t '(1)) (begin (display '": ") (write ((record-accessor G4d59@rtd '0) G4d56@x)) (newline)) (begin (display '":\n") ((letrec ((G4d5f@f (lambda (G4d61@i) (if (not (= G4d61@i (vector-length G4d5b@v))) (begin (display '"       ") (display (vector-ref G4d5b@v G4d61@i)) (display '": ") (write ((record-accessor G4d59@rtd G4d61@i) G4d56@x)) (newline) (G4d5f@f (+ G4d61@i '1))) (void))))) G4d5f@f) '0))))) (vector-length G4d5b@v))) (record-type-field-names G4d59@rtd)))) (record-rtd G4d56@x))) (simple-conditions G4d53@c)))) (lambda () (if (null? G4d4f@args) (G4d32@repl) (G4d4a@load-r6rs-top-level (car G4d4f@args) 'load (cdr G4d4f@args)))))) (G4d36@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
