;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2606@read-annotated G2608@annotation-stripped G260a@annotation? G260c@annotation-source G260e@annotation-expression G2610@scm->fasl G2612@fasl-save G2614@fasl-load G2616@serialize-library G2618@load-serialized-library G261a@make-record-printer G261c@compile-core G261e@read-library-source-file G2620@make-parameter G2684@file-options-spec) (begin (set! G2606@read-annotated read) (set! G2608@annotation-stripped (lambda (G2685@x) (G260e@annotation-expression G2685@x))) (set! G260a@annotation? (lambda (G2687@x) (source-info G2687@x))) (set! G260c@annotation-source (lambda (G2689@x) (source-info G2689@x))) (set! G260e@annotation-expression (lambda (G268b@x) (if (pair? G268b@x) (cons (car G268b@x) (cdr G268b@x)) (display '"line:46\n")))) (set! G2610@scm->fasl (lambda (G268d@filename) (string-append G268d@filename '".fasl"))) (set! G2612@fasl-save (lambda (G268f@filename G2690@obj) (call-with-port (open-file-output-port G268f@filename) (lambda (G2693@port) ((symbol-value 'fasl-write!) G2690@obj G2693@port))))) (set! G2614@fasl-load (lambda (G2695@filename) (call-with-port (open-file-input-port G2695@filename) (symbol-value 'fasl-read!)))) (set! G2616@serialize-library (lambda (G2697@filename G2698@obj) (begin (format '#t '"serialize-library ~a\n..." G2697@filename) ((lambda (G269b@expanded2core) ((lambda (G269d@compile) ((lambda (G269f@code) ((lambda (G26a1@pivot) ((lambda (G26a3@visit) ((lambda () (begin (set-car! G26a1@pivot G26a3@visit) ((lambda (G26a5@pivot) ((lambda (G26a7@invoke) ((lambda () (set-car! G26a5@pivot G26a7@invoke)))) (G269d@compile (G269b@expanded2core (car G26a5@pivot))))) (cdr G26a1@pivot)))))) (G269d@compile (G269b@expanded2core (car G26a1@pivot))))) (cddddr (cddddr G269f@code)))) G2698@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (G26a9@fasl-file) (begin (if (file-exists? G26a9@fasl-file) (delete-file G26a9@fasl-file) (void)) ((call/cc (lambda (G26ad@G26ab) (lambda () (with-exception-handler (lambda (G26af@c) ((call/cc (lambda (G26b1@G26ac) (G26ad@G26ab (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G2697@filename) (if (file-exists? G26a9@fasl-file) (delete-file G26a9@fasl-file) (void)) '#f) (G26b1@G26ac (lambda () (raise-continuable G26af@c)))))))))) (lambda () (begin (G2612@fasl-save G26a9@fasl-file G2698@obj) (display '"OK\n")))))))))) (G2610@scm->fasl G2697@filename))))) (set! G2618@load-serialized-library (lambda (G26b3@filename G26b4@obj) ((lambda (G26b7@fasl-file) (if (and (file-exists? G26b7@fasl-file) ((symbol-value 'file-newer?) G26b7@fasl-file G26b3@filename)) ((lambda (G26b9@expanded2core) ((lambda (G26bb@eval-compiled-core) ((lambda (G26bd@code) ((lambda (G26bf@pivot) ((lambda (G26c1@visit) ((lambda (G26c3@visit-proc) ((lambda () (begin (set-car! G26bf@pivot G26c3@visit-proc) ((lambda (G26c5@pivot) ((lambda (G26c7@invoke) ((lambda () (begin (set-car! G26c5@pivot (lambda () (G26bb@eval-compiled-core G26c7@invoke))) (apply G26b4@obj G26bd@code))))) (car G26c5@pivot))) (cdr G26bf@pivot)) '#t)))) (lambda () (G26bb@eval-compiled-core G26c1@visit)))) (car G26bf@pivot))) (cddddr (cddddr G26bd@code)))) (G2614@fasl-load G26b7@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (G2610@scm->fasl G26b3@filename)))) (set! G261a@make-record-printer (lambda (G26c9@name G26ca@printer) (lambda G26cd@x (begin (display '"record printer") (for-each display G26cd@x))))) (set! G261c@compile-core (lambda G26cf@x (apply error 'comile-core '"not implementated" G26cf@x))) (set! G261e@read-library-source-file (lambda (G26d1@file-name) (with-input-from-file G26d1@file-name G2606@read-annotated))) (set! G2620@make-parameter (lambda G26e1 ((lambda (G26e2) (if (= G26e2 '1) (apply (lambda (G26d3@x) (G2620@make-parameter G26d3@x (lambda (G26d5@x) G26d5@x))) G26e1) (if (= G26e2 '2) (apply (lambda (G26d7@x G26d8@fender) ((lambda (G26db@x) (lambda G26df ((lambda (G26e0) (if (= G26e0 '0) (apply (lambda () G26db@x) G26df) (if (= G26e0 '1) (apply (lambda (G26dd@v) (set! G26db@x (G26d8@fender G26dd@v))) G26df) (error 'apply '"invalid arg count")))) (length G26df)))) (G26d8@fender G26d7@x))) G26e1) (error 'apply '"invalid arg count")))) (length G26e1)))) (set! G2684@file-options-spec (lambda (G26e3@x) G26e3@x)) (begin (set! G26f3@G2684@file-options-spec G2684@file-options-spec) (set! G26f2@G2620@make-parameter G2620@make-parameter) (set! G26f1@G261e@read-library-source-file G261e@read-library-source-file) (set! G26f0@G261c@compile-core G261c@compile-core) (set! G26ef@G261a@make-record-printer G261a@make-record-printer) (set! G26ee@G2618@load-serialized-library G2618@load-serialized-library) (set! G26ed@G2616@serialize-library G2616@serialize-library) (set! G26ec@G2614@fasl-load G2614@fasl-load) (set! G26eb@G2612@fasl-save G2612@fasl-save) (set! G26ea@G2610@scm->fasl G2610@scm->fasl) (set! G26e9@G260e@annotation-expression G260e@annotation-expression) (set! G26e8@G260c@annotation-source G260c@annotation-source) (set! G26e7@G260a@annotation? G260a@annotation?) (set! G26e6@G2608@annotation-stripped G2608@annotation-stripped) (set! G26e5@G2606@read-annotated G2606@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G26f8@current-primitive-locations G26fa@mutable? G26fc@rewriter G26fe@expanded->core G2700@compile-core-expr G2702@pretty-print G2704@compile-core-expr-to-port) (begin (set! G26f8@current-primitive-locations (G26f2@G2620@make-parameter (lambda (G2705@x) '#f) (lambda (G2707@p) G2707@p))) (set! G26fa@mutable? (lambda (G2709@x) (or (pair? G2709@x) (vector? G2709@x) (hashtable? G2709@x)))) (set! G26fc@rewriter (lambda (G270b@quote-hack?) ((lambda (G270e@f) (begin (set! G270e@f (lambda (G270f@x) (if (pair? G270f@x) ((lambda (G2711@t) (if (memv G2711@t '(quote)) (if (and G270b@quote-hack? (G26fa@mutable? (cadr G270f@x))) ((lambda (G2713@g) (begin (set-symbol-value! G2713@g (cadr G270f@x)) G2713@g)) (gensym)) G270f@x) (if (memv G2711@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2715@x) (cons (car G2715@x) (map G270e@f (cdr G2715@x)))) (cdr G270f@x))) (if (memv G2711@t '(lambda)) (cons* 'lambda (cadr G270f@x) (map G270e@f (cddr G270f@x))) (if (memv G2711@t '(letrec)) ((lambda (G2717@bindings G2718@body*) ((lambda (G271b@lhs* G271c@rhs*) (cons* 'letrec (map list G271b@lhs* (map G270e@f G271c@rhs*)) (map G270e@f G2718@body*))) (map car G2717@bindings) (map cadr G2717@bindings))) (cadr G270f@x) (cddr G270f@x)) (if (memv G2711@t '(letrec*)) ((lambda (G271f@bindings G2720@body*) ((lambda (G2723@lhs* G2724@rhs*) (cons* 'letrec* (map list G2723@lhs* (map G270e@f G2724@rhs*)) (map G270e@f G2720@body*))) (map car G271f@bindings) (map cadr G271f@bindings))) (cadr G270f@x) (cddr G270f@x)) (if (memv G2711@t '(library-letrec*)) ((lambda (G2727@name G2728@x) ((lambda (G272b@bindings G272c@body*) ((lambda (G272f@lhs* G2730@lhs** G2731@rhs*) (cons* 'library-letrec* G2727@name (map list G272f@lhs* G2730@lhs** (map G270e@f G2731@rhs*)) (map G270e@f G272c@body*))) (map car G272b@bindings) (map cadr G272b@bindings) (map caddr G272b@bindings))) (cadr G2728@x) (cddr G2728@x))) (cadr G270f@x) (cdr G270f@x)) (if (memv G2711@t '(begin)) (cons 'begin (map G270e@f (cdr G270f@x))) (if (memv G2711@t '(set!)) (list 'set! (cadr G270f@x) (G270e@f (caddr G270f@x))) (if (memv G2711@t '(primitive)) ((lambda (G2735@op) ((lambda (G2737@t) (if G2737@t ((lambda (G2739@loc) G2739@loc) G2737@t) G2735@op)) ((G26f8@current-primitive-locations) G2735@op))) (cadr G270f@x)) (if (memv G2711@t '(define)) G270f@x (if (list? G270f@x) (map G270e@f G270f@x) (error 'rewrite '"invalid form ~s ~s" G270f@x (list? G270f@x)))))))))))))) (car G270f@x)) G270f@x))) G270e@f)) '#f))) (set! G26fe@expanded->core (lambda (G273b@x) ((G26fc@rewriter '#f) G273b@x))) (set! G2700@compile-core-expr (lambda (G273d@x) ((G26fc@rewriter '#f) G273d@x))) (set! G2702@pretty-print write) (set! G2704@compile-core-expr-to-port (lambda (G273f@x G2740@p) (G2702@pretty-print ((G26fc@rewriter '#f) G273f@x) G2740@p))) (begin (set! G2749@G2704@compile-core-expr-to-port G2704@compile-core-expr-to-port) (set! G2748@G2702@pretty-print G2702@pretty-print) (set! G2747@G2700@compile-core-expr G2700@compile-core-expr) (set! G2746@G26fe@expanded->core G26fe@expanded->core) (set! G2745@G26fc@rewriter G26fc@rewriter) (set! G2744@G26fa@mutable? G26fa@mutable?) (set! G2743@G26f8@current-primitive-locations G26f8@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2798@make-collection G279a@current-library-collection G27a0@G279b G27a2@G279d G27a4@G279c G27a7@library? G27a9@make-library G27ab@library-id G27ad@library-name G27af@library-version G27b1@library-imp* G27b3@library-vis* G27b5@library-inv* G27b7@library-subst G27b9@library-env G27bb@library-visit-state G27bd@library-invoke-state G27bf@library-visit-code G27c1@library-invoke-code G27c3@library-visible? G27c5@library-source-file-name G27c7@set-library-id! G27c9@set-library-name! G27cb@set-library-version! G27cd@set-library-imp*! G27cf@set-library-vis*! G27d1@set-library-inv*! G27d3@set-library-subst! G27d5@set-library-env! G27d7@set-library-visit-state! G27d9@set-library-invoke-state! G27db@set-library-visit-code! G27dd@set-library-invoke-code! G27df@set-library-visible?! G27e1@set-library-source-file-name! G27e3@rp G27e5@find-dependencies G27e7@find-library-by G27e9@library-path G27eb@library-extensions G27ed@library-name->file-name G27ef@file-locator G27f1@serialize-all G27f3@current-precompiled-library-loader G27f5@try-load-from-file G27f7@library-loader G27f9@current-library-expander G27fb@external-pending-libraries G27fd@find-external-library G27ff@find-library-by-name G2801@library-exists? G2803@find-library-by-spec/die G2805@label->binding-table G2807@install-library-record G2809@install-library G280b@imported-label->binding G280d@invoke-library G280f@visit-library G2811@invoke-library-by-spec G2813@installed-libraries G2815@library-spec) (begin (set! G2798@make-collection (lambda () ((lambda (G2816@set) ((lambda (G2819@set-cons) (begin (set! G2819@set-cons (lambda (G281e@x G281f@ls) (if (memq G281e@x G281f@ls) G281f@ls (cons G281e@x G281f@ls)))) (lambda G281c ((lambda (G281d) (if (= G281d '0) (apply (lambda () G2816@set) G281c) (if (= G281d '1) (apply (lambda (G281a@x) (set! G2816@set (G2819@set-cons G281a@x G2816@set))) G281c) (error 'apply '"invalid arg count")))) (length G281c))))) '#f)) '()))) (set! G279a@current-library-collection (G26f2@G2620@make-parameter (G2798@make-collection) (lambda (G2822@x) (begin (if (not (procedure? G2822@x)) (assertion-violation 'current-library-collection '"not a procedure" G2822@x) (void)) G2822@x)))) (set! G27a0@G279b (make-record-type-descriptor 'library '#f 'G279e '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G27a2@G279d '#f) (set! G27a4@G279c (make-record-constructor-descriptor G27a0@G279b '#f G27a2@G279d)) (set! G27a7@library? (record-predicate G27a0@G279b)) (set! G27a9@make-library (record-constructor G27a4@G279c)) (set! G27ab@library-id (record-accessor G27a0@G279b '0)) (set! G27ad@library-name (record-accessor G27a0@G279b '1)) (set! G27af@library-version (record-accessor G27a0@G279b '2)) (set! G27b1@library-imp* (record-accessor G27a0@G279b '3)) (set! G27b3@library-vis* (record-accessor G27a0@G279b '4)) (set! G27b5@library-inv* (record-accessor G27a0@G279b '5)) (set! G27b7@library-subst (record-accessor G27a0@G279b '6)) (set! G27b9@library-env (record-accessor G27a0@G279b '7)) (set! G27bb@library-visit-state (record-accessor G27a0@G279b '8)) (set! G27bd@library-invoke-state (record-accessor G27a0@G279b '9)) (set! G27bf@library-visit-code (record-accessor G27a0@G279b '10)) (set! G27c1@library-invoke-code (record-accessor G27a0@G279b '11)) (set! G27c3@library-visible? (record-accessor G27a0@G279b '12)) (set! G27c5@library-source-file-name (record-accessor G27a0@G279b '13)) (set! G27c7@set-library-id! (record-mutator G27a0@G279b '0)) (set! G27c9@set-library-name! (record-mutator G27a0@G279b '1)) (set! G27cb@set-library-version! (record-mutator G27a0@G279b '2)) (set! G27cd@set-library-imp*! (record-mutator G27a0@G279b '3)) (set! G27cf@set-library-vis*! (record-mutator G27a0@G279b '4)) (set! G27d1@set-library-inv*! (record-mutator G27a0@G279b '5)) (set! G27d3@set-library-subst! (record-mutator G27a0@G279b '6)) (set! G27d5@set-library-env! (record-mutator G27a0@G279b '7)) (set! G27d7@set-library-visit-state! (record-mutator G27a0@G279b '8)) (set! G27d9@set-library-invoke-state! (record-mutator G27a0@G279b '9)) (set! G27db@set-library-visit-code! (record-mutator G27a0@G279b '10)) (set! G27dd@set-library-invoke-code! (record-mutator G27a0@G279b '11)) (set! G27df@set-library-visible?! (record-mutator G27a0@G279b '12)) (set! G27e1@set-library-source-file-name! (record-mutator G27a0@G279b '13)) (set! G27e3@rp (G26ef@G261a@make-record-printer 'library (lambda (G2824@x G2825@p G2826@wr) (begin (if (not (G27a7@library? G2824@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G27af@library-version G2824@x)) (G27ad@library-name G2824@x) (append (G27ad@library-name G2824@x) (list (G27af@library-version G2824@x))))) G2825@p))))) (set! G27e5@find-dependencies (lambda (G282a@ls) (if (null? G282a@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G27e7@find-library-by (lambda (G282c@pred) ((letrec ((G282e@f (lambda (G2830@ls) (if (null? G2830@ls) '#f (if (G282c@pred (car G2830@ls)) (car G2830@ls) (G282e@f (cdr G2830@ls))))))) G282e@f) ((G279a@current-library-collection))))) (set! G27e9@library-path (G26f2@G2620@make-parameter '(".") (lambda (G2832@x) (if (and (list? G2832@x) (for-all string? G2832@x)) (map (lambda (G2834@x) G2834@x) G2832@x) (assertion-violation 'library-path '"not a list of strings" G2832@x))))) (set! G27eb@library-extensions (G26f2@G2620@make-parameter '(".sls" ".ss" ".scm") (lambda (G2836@x) (if (and (list? G2836@x) (for-all string? G2836@x)) (map (lambda (G2838@x) G2838@x) G2836@x) (assertion-violation 'library-extensions '"not a list of strings" G2836@x))))) (set! G27ed@library-name->file-name (lambda (G283a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G283e@G283c G283f@G283d) ((lambda (G2842@extract G2843@p) ((lambda (G2847@display-hex) (begin (set! G2847@display-hex (lambda (G2850@n) (if (<= '0 G2850@n '9) (display G2850@n G2843@p) (display (integer->char (+ (char->integer '#\a) (- G2850@n '10))) G2843@p)))) (begin ((letrec ((G2848@f (lambda (G284a@ls) (if (not (null? G284a@ls)) (begin (display '"/" G2843@p) (for-each (lambda (G284c@c) (if (or (char<=? '#\a G284c@c '#\z) (char<=? '#\A G284c@c '#\Z) (char<=? '#\0 G284c@c '#\9) (memv G284c@c '(#\- #\. #\_ #\~))) (display G284c@c G2843@p) (begin (display '"%" G2843@p) ((lambda (G284e@n) (begin (G2847@display-hex (quotient G284e@n '16)) (G2847@display-hex (remainder G284e@n '16)))) (char->integer G284c@c))))) (string->list (symbol->string (car G284a@ls)))) (G2848@f (cdr G284a@ls))) (void))))) G2848@f) G283a@x) (G2842@extract)))) '#f)) G283f@G283d G283e@G283c))))) (set! G27ef@file-locator (G26f2@G2620@make-parameter (lambda (G2852@x) ((lambda (G2854@str) ((letrec ((G2856@f (lambda (G2858@ls G2859@exts G285a@failed-list) (if (null? G2858@ls) ((lambda () ((lambda (G2866@G2861 G2868@G2863 G286a@G2862 G286d@G2860 G286f@make-library-resolution-condition G2871@G285e G2873@G285f G2875@library-resolution-condition? G2877@condition-library G2879@condition-files) (begin (set! G2866@G2861 (make-record-type-descriptor '&library-resolution G49ca@G471d@&condition-rtd 'G2864 '#f '#f '#((immutable library) (immutable files)))) (set! G2868@G2863 '#f) (set! G286a@G2862 (make-record-constructor-descriptor G2866@G2861 G49cb@G471f@&condition-rcd G2868@G2863)) (set! G286d@G2860 (record-predicate G2866@G2861)) (set! G286f@make-library-resolution-condition (record-constructor G286a@G2862)) (set! G2871@G285e (record-accessor G2866@G2861 '0)) (set! G2873@G285f (record-accessor G2866@G2861 '1)) (set! G2875@library-resolution-condition? (condition-predicate G2866@G2861)) (set! G2877@condition-library (condition-accessor G2866@G2861 G2871@G285e)) (set! G2879@condition-files (condition-accessor G2866@G2861 G2873@G285f)) (raise (condition (G49ea@G47b3@make-error) (G4a0c@G480d@make-who-condition 'expander) (G49d0@G4770@make-message-condition '"cannot locate library in library-path") (G286f@make-library-resolution-condition G2852@x (reverse G285a@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2859@exts) (G2856@f (cdr G2858@ls) (G27eb@library-extensions) G285a@failed-list) ((lambda (G287a@name) (if (file-exists? G287a@name) G287a@name (G2856@f G2858@ls (cdr G2859@exts) (cons G287a@name G285a@failed-list)))) (string-append (car G2858@ls) G2854@str (car G2859@exts)))))))) G2856@f) (G27e9@library-path) (G27eb@library-extensions) '())) (G27ed@library-name->file-name G2852@x))) (lambda (G287c@f) (if (procedure? G287c@f) G287c@f (assertion-violation 'file-locator '"not a procedure" G287c@f))))) (set! G27f1@serialize-all (lambda (G287e@serialize G287f@compile) ((lambda (G2883@library-desc) (begin (set! G2883@library-desc (lambda (G2886@x) (list (G27ab@library-id G2886@x) (G27ad@library-name G2886@x)))) (for-each (lambda (G2884@x) (if (G27c5@library-source-file-name G2884@x) (G287e@serialize (G27c5@library-source-file-name G2884@x) (list (G27ab@library-id G2884@x) (G27ad@library-name G2884@x) (G27af@library-version G2884@x) (map G2883@library-desc (G27b1@library-imp* G2884@x)) (map G2883@library-desc (G27b3@library-vis* G2884@x)) (map G2883@library-desc (G27b5@library-inv* G2884@x)) (G27b7@library-subst G2884@x) (G27b9@library-env G2884@x) (G287f@compile (G27bf@library-visit-code G2884@x)) (G287f@compile (G27c1@library-invoke-code G2884@x)) (G27c3@library-visible? G2884@x))) (void))) ((G279a@current-library-collection))))) '#f))) (set! G27f3@current-precompiled-library-loader (G26f2@G2620@make-parameter (lambda (G2888@filename G2889@sk) '#f))) (set! G27f5@try-load-from-file (lambda (G288c@filename) ((G27f3@current-precompiled-library-loader) G288c@filename (lambda G28b2 ((lambda (G28b3) (if (= G28b3 '11) (apply (lambda (G288e@id G288f@name G2890@ver G2891@imp* G2892@vis* G2893@inv* G2894@exp-subst G2895@exp-env G2896@visit-proc G2897@invoke-proc G2898@visible?) ((letrec ((G28a4@f (lambda (G28a6@deps) (if (null? G28a6@deps) (begin (G2809@install-library G288e@id G288f@name G2890@ver G2891@imp* G2892@vis* G2893@inv* G2894@exp-subst G2895@exp-env G2896@visit-proc G2897@invoke-proc '#f '#f G2898@visible? '#f) '#t) ((lambda (G28a8@d) ((lambda (G28aa@label G28ab@dname) ((lambda (G28ae@l) (if (and (G27a7@library? G28ae@l) (eq? G28aa@label (G27ab@library-id G28ae@l))) (G28a4@f (cdr G28a6@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G288f@name G28ab@dname G288c@filename G28ae@l G28aa@label (G27ab@library-id G28ae@l)) '#f))) (G27ff@find-library-by-name G28ab@dname))) (car G28a8@d) (cadr G28a8@d))) (car G28a6@deps)))))) G28a4@f) (append G2891@imp* G2892@vis* G2893@inv*))) G28b2) (if (>= G28b3 '0) (apply (lambda G28b0@others '#f) G28b2) (error 'apply '"invalid arg count")))) (length G28b2)))))) (set! G27f7@library-loader (G26f2@G2620@make-parameter (lambda (G28b4@x) ((lambda (G28b6@file-name) (if (not G28b6@file-name) (assertion-violation '#f '"cannot file library" G28b4@x) (or (G27f5@try-load-from-file G28b6@file-name) ((G27f9@current-library-expander) (G26f1@G261e@read-library-source-file G28b6@file-name) G28b6@file-name (lambda (G28b8@name) (if (not (fast-equal? G28b8@name G28b4@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G28bc@G28ba G28bd@G28bb) ((lambda (G28c0@e G28c1@p) (begin (display '"expected to find library " G28c1@p) (write G28b4@x G28c1@p) (display '" in file " G28c1@p) (display G28b6@file-name G28c1@p) (display '", found " G28c1@p) (write G28b8@name G28c1@p) (display '" instead" G28c1@p) (G28c0@e))) G28bd@G28bb G28bc@G28ba)))) (void))))))) ((G27ef@file-locator) G28b4@x))) (lambda (G28c4@f) (if (procedure? G28c4@f) G28c4@f (assertion-violation 'library-locator '"not a procedure" G28c4@f))))) (set! G27f9@current-library-expander (G26f2@G2620@make-parameter (lambda (G28c6@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G28c8@f) (if (procedure? G28c8@f) G28c8@f (assertion-violation 'library-expander '"not a procedure" G28c8@f))))) (set! G27fb@external-pending-libraries (G26f2@G2620@make-parameter '())) (set! G27fd@find-external-library (lambda (G28ca@name) (begin (if (member G28ca@name (G27fb@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G28ca@name) (void)) ((lambda (G28ce@G28cc G28cf@G28cd) ((lambda (G28d2@swap) (dynamic-wind G28d2@swap (lambda () (begin ((G27f7@library-loader) G28ca@name) (or (G27e7@find-library-by (lambda (G28d4@x) (fast-equal? (G27ad@library-name G28d4@x) G28ca@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G28ca@name)))) G28d2@swap)) (lambda () ((lambda (G28d6@t) (begin (G28ce@G28cc G28cf@G28cd) (set! G28cf@G28cd G28d6@t))) (G28ce@G28cc))))) G27fb@external-pending-libraries (cons G28ca@name (G27fb@external-pending-libraries)))))) (set! G27ff@find-library-by-name (lambda (G28d8@name) (or (G27e7@find-library-by (lambda (G28da@x) (fast-equal? (G27ad@library-name G28da@x) G28d8@name))) (G27fd@find-external-library G28d8@name)))) (set! G2801@library-exists? (lambda (G28dc@name) (and (G27e7@find-library-by (lambda (G28de@x) (fast-equal? (G27ad@library-name G28de@x) G28dc@name))) '#t))) (set! G2803@find-library-by-spec/die (lambda (G28e0@spec) ((lambda (G28e2@id) (or (G27e7@find-library-by (lambda (G28e4@x) (eq? G28e2@id (G27ab@library-id G28e4@x)))) (assertion-violation '#f '"cannot find library with required spec" G28e0@spec))) (car G28e0@spec)))) (set! G2805@label->binding-table (make-eq-hashtable)) (set! G2807@install-library-record (lambda (G28e6@lib) (begin ((lambda (G28e8@exp-env) (for-each (lambda (G28ea@x) ((lambda (G28ec@label G28ed@binding) ((lambda (G28f0@binding) (hashtable-set! G2805@label->binding-table G28ec@label G28f0@binding)) ((lambda (G28f2@t) (if (memv G28f2@t '(global)) (cons 'global (cons G28e6@lib (cdr G28ed@binding))) (if (memv G28f2@t '(global-macro)) (cons 'global-macro (cons G28e6@lib (cdr G28ed@binding))) (if (memv G28f2@t '(global-macro!)) (cons 'global-macro! (cons G28e6@lib (cdr G28ed@binding))) G28ed@binding)))) (car G28ed@binding)))) (car G28ea@x) (cdr G28ea@x))) G28e8@exp-env)) (G27b9@library-env G28e6@lib)) ((G279a@current-library-collection) G28e6@lib)))) (set! G2809@install-library (lambda (G28f4@id G28f5@name G28f6@ver G28f7@imp* G28f8@vis* G28f9@inv* G28fa@exp-subst G28fb@exp-env G28fc@visit-proc G28fd@invoke-proc G28fe@visit-code G28ff@invoke-code G2900@visible? G2901@source-file-name) ((lambda (G2910@imp-lib* G2911@vis-lib* G2912@inv-lib*) (begin (if (not (and (symbol? G28f4@id) (list? G28f5@name) (list? G28f6@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G28f4@id G28f5@name G28f6@ver) (void)) (if (G2801@library-exists? G28f5@name) (assertion-violation 'install-library '"library is already installed" G28f5@name) (void)) ((lambda (G2916@lib) (G2807@install-library-record G2916@lib)) (G27a9@make-library G28f4@id G28f5@name G28f6@ver G2910@imp-lib* G2911@vis-lib* G2912@inv-lib* G28fa@exp-subst G28fb@exp-env G28fc@visit-proc G28fd@invoke-proc G28fe@visit-code G28ff@invoke-code G2900@visible? G2901@source-file-name)))) (map G2803@find-library-by-spec/die G28f7@imp*) (map G2803@find-library-by-spec/die G28f8@vis*) (map G2803@find-library-by-spec/die G28f9@inv*)))) (set! G280b@imported-label->binding (lambda (G2918@lab) (hashtable-ref G2805@label->binding-table G2918@lab '#f))) (set! G280d@invoke-library (lambda (G291a@lib) ((lambda (G291c@invoke) (if (procedure? G291c@invoke) (begin (G27d9@set-library-invoke-state! G291a@lib (lambda () (assertion-violation 'invoke '"circularity detected" G291a@lib))) (for-each G280d@invoke-library (G27b5@library-inv* G291a@lib)) (G27d9@set-library-invoke-state! G291a@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G291a@lib))) (G291c@invoke) (G27d9@set-library-invoke-state! G291a@lib '#t)) (void))) (G27bd@library-invoke-state G291a@lib)))) (set! G280f@visit-library (lambda (G291e@lib) ((lambda (G2920@visit) (if (procedure? G2920@visit) (begin (G27d7@set-library-visit-state! G291e@lib (lambda () (assertion-violation 'visit '"circularity detected" G291e@lib))) (for-each G280d@invoke-library (G27b3@library-vis* G291e@lib)) (G27d7@set-library-visit-state! G291e@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G291e@lib))) (G2920@visit) (G27d7@set-library-visit-state! G291e@lib '#t)) (void))) (G27bb@library-visit-state G291e@lib)))) (set! G2811@invoke-library-by-spec (lambda (G2922@spec) (G280d@invoke-library (G2803@find-library-by-spec/die G2922@spec)))) (set! G2813@installed-libraries (lambda G292a ((lambda (G292b) (if (= G292b '1) (apply (lambda (G2924@all?) ((letrec ((G2926@f (lambda (G2928@ls) (if (null? G2928@ls) '() (if (or G2924@all? (G27c3@library-visible? (car G2928@ls))) (cons (car G2928@ls) (G2926@f (cdr G2928@ls))) (G2926@f (cdr G2928@ls))))))) G2926@f) ((G279a@current-library-collection)))) G292a) (if (= G292b '0) (apply (lambda () (G2813@installed-libraries '#f)) G292a) (error 'apply '"invalid arg count")))) (length G292a)))) (set! G2815@library-spec (lambda (G292c@x) (begin (if (not (G27a7@library? G292c@x)) (assertion-violation 'library-spec '"not a library" G292c@x) (void)) (list (G27ab@library-id G292c@x) (G27ad@library-name G292c@x) (G27af@library-version G292c@x))))) (begin (set! G296a@G2815@library-spec G2815@library-spec) (set! G2969@G2813@installed-libraries G2813@installed-libraries) (set! G2968@G2811@invoke-library-by-spec G2811@invoke-library-by-spec) (set! G2967@G280f@visit-library G280f@visit-library) (set! G2966@G280d@invoke-library G280d@invoke-library) (set! G2965@G280b@imported-label->binding G280b@imported-label->binding) (set! G2964@G2809@install-library G2809@install-library) (set! G2963@G2807@install-library-record G2807@install-library-record) (set! G2962@G2805@label->binding-table G2805@label->binding-table) (set! G2961@G2803@find-library-by-spec/die G2803@find-library-by-spec/die) (set! G2960@G2801@library-exists? G2801@library-exists?) (set! G295f@G27ff@find-library-by-name G27ff@find-library-by-name) (set! G295e@G27fd@find-external-library G27fd@find-external-library) (set! G295d@G27fb@external-pending-libraries G27fb@external-pending-libraries) (set! G295c@G27f9@current-library-expander G27f9@current-library-expander) (set! G295b@G27f7@library-loader G27f7@library-loader) (set! G295a@G27f5@try-load-from-file G27f5@try-load-from-file) (set! G2959@G27f3@current-precompiled-library-loader G27f3@current-precompiled-library-loader) (set! G2958@G27f1@serialize-all G27f1@serialize-all) (set! G2957@G27ef@file-locator G27ef@file-locator) (set! G2956@G27ed@library-name->file-name G27ed@library-name->file-name) (set! G2955@G27eb@library-extensions G27eb@library-extensions) (set! G2954@G27e9@library-path G27e9@library-path) (set! G2953@G27e7@find-library-by G27e7@find-library-by) (set! G2952@G27e5@find-dependencies G27e5@find-dependencies) (set! G2951@G27e3@rp G27e3@rp) (set! G2950@G27e1@set-library-source-file-name! G27e1@set-library-source-file-name!) (set! G294f@G27df@set-library-visible?! G27df@set-library-visible?!) (set! G294e@G27dd@set-library-invoke-code! G27dd@set-library-invoke-code!) (set! G294d@G27db@set-library-visit-code! G27db@set-library-visit-code!) (set! G294c@G27d9@set-library-invoke-state! G27d9@set-library-invoke-state!) (set! G294b@G27d7@set-library-visit-state! G27d7@set-library-visit-state!) (set! G294a@G27d5@set-library-env! G27d5@set-library-env!) (set! G2949@G27d3@set-library-subst! G27d3@set-library-subst!) (set! G2948@G27d1@set-library-inv*! G27d1@set-library-inv*!) (set! G2947@G27cf@set-library-vis*! G27cf@set-library-vis*!) (set! G2946@G27cd@set-library-imp*! G27cd@set-library-imp*!) (set! G2945@G27cb@set-library-version! G27cb@set-library-version!) (set! G2944@G27c9@set-library-name! G27c9@set-library-name!) (set! G2943@G27c7@set-library-id! G27c7@set-library-id!) (set! G2942@G27c5@library-source-file-name G27c5@library-source-file-name) (set! G2941@G27c3@library-visible? G27c3@library-visible?) (set! G2940@G27c1@library-invoke-code G27c1@library-invoke-code) (set! G293f@G27bf@library-visit-code G27bf@library-visit-code) (set! G293e@G27bd@library-invoke-state G27bd@library-invoke-state) (set! G293d@G27bb@library-visit-state G27bb@library-visit-state) (set! G293c@G27b9@library-env G27b9@library-env) (set! G293b@G27b7@library-subst G27b7@library-subst) (set! G293a@G27b5@library-inv* G27b5@library-inv*) (set! G2939@G27b3@library-vis* G27b3@library-vis*) (set! G2938@G27b1@library-imp* G27b1@library-imp*) (set! G2937@G27af@library-version G27af@library-version) (set! G2936@G27ad@library-name G27ad@library-name) (set! G2935@G27ab@library-id G27ab@library-id) (set! G2934@G27a9@make-library G27a9@make-library) (set! G2933@G27a7@library? G27a7@library?) (set! G2932@G27a4@G279c G27a4@G279c) (set! G2931@G27a2@G279d G27a2@G279d) (set! G2930@G27a0@G279b G27a0@G279b) (set! G292f@G279a@current-library-collection G279a@current-library-collection) (set! G292e@G2798@make-collection G2798@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G296d@build-global-define G29de@build-lambda G29e0@build-case-lambda G29e2@build-let G2a10@build-sequence G2a12@build-void G2a14@build-letrec G2a16@build-letrec* G2a18@build-library-letrec* G2a1a@build-receive) (begin (set! G296d@build-global-define (lambda (G2a1b@x) (G2a12@build-void))) (set! G29de@build-lambda (lambda (G2a1d@ae G2a1e@vars G2a1f@exp) (list 'lambda G2a1e@vars G2a1f@exp))) (set! G29e0@build-case-lambda (lambda (G2a23@ae G2a24@vars* G2a25@exp*) ((lambda (G2a2a@build-error G2a2c@build-pred G2a2e@build-apply G2a30@expand-case-lambda) (begin (set! G2a2a@build-error (lambda (G2a5f@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2a2c@build-pred (lambda (G2a49@ae G2a4a@n G2a4b@vars) (call-with-values (lambda () ((letrec ((G2a51@f (lambda (G2a53@vars G2a54@count) (if (pair? G2a53@vars) (G2a51@f (cdr G2a53@vars) (+ G2a54@count '1)) (if (null? G2a53@vars) (values G2a54@count '=) (values G2a54@count '>=)))))) G2a51@f) G2a4b@vars '0)) (lambda (G2a57@G2a4f G2a58@G2a50) ((lambda (G2a5b@pred G2a5c@count) (list (list 'primitive G2a5b@pred) G2a4a@n (list 'quote G2a5c@count))) G2a58@G2a50 G2a57@G2a4f))))) (set! G2a2e@build-apply (lambda (G2a41@ae G2a42@g G2a43@vars G2a44@exp) (list '(primitive apply) (G29de@build-lambda G2a41@ae G2a43@vars G2a44@exp) G2a42@g))) (set! G2a30@expand-case-lambda (lambda (G2a31@ae G2a32@vars G2a33@exp*) ((lambda (G2a37@g G2a38@n) (list 'lambda G2a37@g (G29e2@build-let G2a31@ae (list G2a38@n) (list (list '(primitive length) G2a37@g)) ((letrec ((G2a3b@f (lambda (G2a3d@vars* G2a3e@exp*) (if (null? G2a3d@vars*) (G2a2a@build-error G2a31@ae) (list 'if (G2a2c@build-pred G2a31@ae G2a38@n (car G2a3d@vars*)) (G2a2e@build-apply G2a31@ae G2a37@g (car G2a3d@vars*) (car G2a3e@exp*)) (G2a3b@f (cdr G2a3d@vars*) (cdr G2a3e@exp*))))))) G2a3b@f) G2a24@vars* G2a33@exp*)))) (gensym) (gensym)))) (if (= (length G2a25@exp*) '1) (G29de@build-lambda G2a23@ae (car G2a24@vars*) (car G2a25@exp*)) (G2a30@expand-case-lambda G2a23@ae G2a24@vars* G2a25@exp*)))) '#f '#f '#f '#f))) (set! G29e2@build-let (lambda (G2a61@ae G2a62@lhs* G2a63@rhs* G2a64@body) (cons (G29de@build-lambda G2a61@ae G2a62@lhs* G2a64@body) G2a63@rhs*))) (set! G2a10@build-sequence (lambda (G2a69@ae G2a6a@exps) ((letrec ((G2a6d@loop (lambda (G2a6f@exps) (if (null? (cdr G2a6f@exps)) (car G2a6f@exps) (if (equal? (car G2a6f@exps) (G2a12@build-void)) (G2a6d@loop (cdr G2a6f@exps)) (cons 'begin G2a6f@exps)))))) G2a6d@loop) G2a6a@exps))) (set! G2a12@build-void (lambda () '((primitive void)))) (set! G2a14@build-letrec (lambda (G2a71@ae G2a72@vars G2a73@val-exps G2a74@body-exp) (if (null? G2a72@vars) G2a74@body-exp (list 'letrec (map list G2a72@vars G2a73@val-exps) G2a74@body-exp)))) (set! G2a16@build-letrec* (lambda (G2a79@ae G2a7a@vars G2a7b@val-exps G2a7c@body-exp) (if (null? G2a7a@vars) G2a7c@body-exp (G29e2@build-let G2a79@ae G2a7a@vars (map (lambda (G2a81@x) (list 'quote '#f)) G2a7a@vars) (G2a10@build-sequence G2a79@ae (append (map (lambda (G2a83@lhs G2a84@rhs) (list 'set! G2a83@lhs G2a84@rhs)) G2a7a@vars G2a7b@val-exps) (list G2a7c@body-exp))))))) (set! G2a18@build-library-letrec* (lambda (G2a87@ae G2a88@name G2a89@vars G2a8a@locs G2a8b@val-exps G2a8c@body-exp) (list 'library-letrec* G2a88@name (map list G2a89@vars G2a8a@locs G2a8b@val-exps) G2a8c@body-exp))) (set! G2a1a@build-receive (lambda (G2a93@ae G2a94@vars G2a95@producer G2a96@body*) (begin (display '"************** in ") (cons 'receive (cons G2a94@vars (cons G2a95@producer G2a96@body*)))))) (begin (set! G2aa4@G2a1a@build-receive G2a1a@build-receive) (set! G2aa3@G2a18@build-library-letrec* G2a18@build-library-letrec*) (set! G2aa2@G2a16@build-letrec* G2a16@build-letrec*) (set! G2aa1@G2a14@build-letrec G2a14@build-letrec) (set! G2aa0@G2a12@build-void G2a12@build-void) (set! G2a9f@G2a10@build-sequence G2a10@build-sequence) (set! G2a9e@G29e2@build-let G29e2@build-let) (set! G2a9d@G29e0@build-case-lambda G29e0@build-case-lambda) (set! G2a9c@G29de@build-lambda G29de@build-lambda) (set! G2a9b@G296d@build-global-define G296d@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2ab3@set-cons G2ab5@set-union G2aba@top-mark* G2abc@top-marked? G2abe@gen-lexical G2ac0@gen-global G2ac2@gen-label G2ac4@gen-top-level-label G2ac6@gen-define-label+loc G2ac8@gen-define-label G2ace@G2ac9 G2ad0@G2acb G2ad2@G2aca G2ad5@rib? G2ad7@make-rib G2ad9@rib-sym* G2adb@rib-mark** G2add@rib-label* G2adf@rib-sealed/freq G2ae1@rib-cache G2ae3@set-rib-sym*! G2ae5@set-rib-mark**! G2ae7@set-rib-label*! G2ae9@set-rib-sealed/freq! G2aeb@set-rib-cache! G2aed@make-empty-rib G2aef@extend-rib! G2af1@extend-rib/nc! G2af3@make-rib-map G2af5@seal-rib! G2af7@unseal-rib! G2af9@make-full-rib G2aff@G2afa G2b01@G2afc G2b03@G2afb G2b06@stx? G2b08@make-stx G2b0a@stx-expr G2b0c@stx-mark* G2b0e@stx-subst* G2b10@stx-ae* G2b12@set-stx-expr! G2b14@set-stx-mark*! G2b16@set-stx-subst*! G2b18@set-stx-ae*! G2b1a@rp G2b1c@datum->stx G2b1e@gen-mark G2b20@anti-mark G2b22@anti-mark? G2b24@join-wraps G2b26@mkstx G2b28@add-mark G2b2a@add-subst G2b2c@syntax-kind? G2b2e@syntax-vector->list G2b30@syntax-pair? G2b32@syntax-vector? G2b34@syntax-null? G2b36@syntax-list? G2b38@syntax-car G2b3a@syntax-cdr G2b3c@syntax->list G2b3e@id? G2b40@id->sym G2b42@same-marks? G2b44@bound-id=? G2b46@free-id=? G2b48@valid-bound-ids? G2b4a@distinct-bound-ids? G2b4c@bound-id-member? G2b4e@self-evaluating? G2b50@strip-annotations G2b52@strip G2b54@stx->datum G2b56@same-marks*? G2b58@id->label G2b5a@id->real-label G2b5c@label->binding G2b5e@make-binding G2b60@binding-type G2b62@binding-value G2b64@raise-unbound-error G2b66@syntax-type G2b74@sanitize-binding G2b76@make-variable-transformer G2b78@variable-transformer? G2b7a@variable-transformer-procedure G2b7c@make-eval-transformer G2cb3@parse-define G2cb5@parse-define-syntax G2cb7@scheme-stx-hashtable G2cb9@scheme-stx G2cbb@lexical-var G2cbd@lexical-mutable? G2cbf@set-lexical-mutable! G2cc1@add-lexical G2cc3@add-lexicals G2cc5@letrec-helper G2cc7@letrec-transformer G2cc9@letrec*-transformer G2ccb@fluid-let-syntax-transformer G2ccd@type-descriptor-transformer G2ccf@record-type-descriptor-transformer G2cd1@record-constructor-descriptor-transformer G2cd3@when-macro G2cd5@unless-macro G2cd7@if-transformer G2cd9@and-transformer G2cdb@or-transformer G2cdd@case-macro G2cdf@quote-transformer G2ce1@case-lambda-transformer G2ce3@lambda-transformer G2ce5@bless G2ce7@with-syntax-macro G2ce9@invalid-fmls-error G2ceb@let-macro G2ced@let-values-macro G2cef@let*-values-macro G2cf1@trace-lambda-macro G2cf3@trace-define-macro G2cf5@trace-define-syntax-macro G2cf7@trace-let/rec-syntax G2cf9@trace-let-syntax-macro G2cfb@trace-letrec-syntax-macro G2cfd@guard-macro G2cff@define-enumeration-macro G2d01@time-macro G2d03@delay-macro G2d05@assert-macro G2d07@endianness-macro G2d09@identifier-syntax-macro G2d0b@do-macro G2d0d@let*-macro G2d0f@or-macro G2d11@and-macro G2d13@cond-macro G2d15@do-include G2d17@include-macro G2d19@include-into-macro G2d1b@syntax-rules-macro G2d1d@quasiquote-macro G2d1f@quasisyntax-macro G2d21@define-struct-macro G2d23@define-record-type-macro G2d25@define-condition-type-macro G2d27@incorrect-usage-macro G2d29@parameterize-macro G2d2b@foreign-call-transformer G2d2d@convert-pattern G2d2f@syntax-dispatch G2d31@ellipsis? G2d33@underscore? G2d35@verify-literals G2d37@syntax-case-transformer G2d39@ellipsis-map G2d3b@syntax-transformer G2d3d@core-macro-transformer G2d3f@file-options-macro G2d41@symbol-macro G2d43@macro-transformer G2d45@local-macro-transformer G2d47@do-macro-call G2d49@chi-macro G2d4b@chi-local-macro G2d4d@chi-global-macro G2d4f@chi-expr* G2d51@chi-application G2d53@chi-expr G2d55@chi-set! G2d57@verify-formals G2d59@chi-lambda-clause G2d5b@chi-lambda-clause* G2d5d@chi-defun G2d5f@chi-rhs G2d61@expand-interaction-rhs*/init* G2d63@chi-rhs* G2d65@find-bound=? G2d67@find-dups G2d69@chi-internal G2d6b@parse-module G2d71@G2d6c G2d73@G2d6e G2d75@G2d6d G2d78@module-interface? G2d7a@make-module-interface G2d7c@module-interface-first-mark G2d7e@module-interface-exp-id-vec G2d80@module-interface-exp-lab-vec G2d82@set-module-interface-first-mark! G2d84@set-module-interface-exp-id-vec! G2d86@set-module-interface-exp-lab-vec! G2d88@module-interface-exp-id* G2d8a@chi-internal-module G2d8c@chi-body* G2d8e@expand-transformer G2d90@parse-exports G2d92@parse-library-name G2d94@parse-library G2d96@parse-import-spec* G2d98@make-top-rib G2d9a@make-collector G2d9c@inv-collector G2d9e@vis-collector G2da0@imp-collector G2da2@chi-library-internal G2da4@chi-interaction-expr G2da6@library-body-expander G2da8@core-library-expander G2daa@parse-top-level-program G2dac@top-level-expander G2db2@G2dad G2db4@G2daf G2db6@G2dae G2db9@env? G2dbb@make-env G2dbd@env-names G2dbf@env-labels G2dc1@env-itc G2dc3@set-env-names! G2dc5@set-env-labels! G2dc7@set-env-itc! G2dc9@rp G2dcf@G2dca G2dd1@G2dcc G2dd3@G2dcb G2dd6@interaction-env? G2dd8@make-interaction-env G2dda@interaction-env-rib G2ddc@interaction-env-r G2dde@interaction-env-locs G2de0@set-interaction-env-rib! G2de2@set-interaction-env-r! G2de4@set-interaction-env-locs! G2de6@rp G2de8@interaction-environment-symbols G2dea@environment-bindings G2dec@parse-binding G2dee@environment? G2df0@environment-symbols G2df2@environment G2df4@null-environment G2df6@scheme-report-environment G2df8@expand G2dfa@eval G2dfc@library-expander G2dfe@boot-library-expand G2e00@rev-map-append G2e02@build-exports G2e04@make-export-subst G2e06@make-export-env/macros G2e08@generate-temporaries G2e0a@free-identifier=? G2e0c@bound-identifier=? G2e0e@make-source-condition G2e10@extract-position-condition G2e12@expression-position G2e14@assertion-error G2e16@syntax-error G2e18@syntax-violation* G2e1a@syntax-violation G2e1c@identifier? G2e1e@datum->syntax G2e20@syntax->datum G2e22@compile-r6rs-top-level G2e24@pre-compile-r6rs-top-level G2e26@interaction-environment G2e28@top-level-context) (begin (set! G2ab3@set-cons (lambda (G2e29@x G2e2a@ls) (if (memq G2e29@x G2e2a@ls) G2e2a@ls (cons G2e29@x G2e2a@ls)))) (set! G2ab5@set-union (lambda (G2e2d@ls1 G2e2e@ls2) (if (null? G2e2d@ls1) G2e2e@ls2 (if (memq (car G2e2d@ls1) G2e2e@ls2) (G2ab5@set-union (cdr G2e2d@ls1) G2e2e@ls2) (cons (car G2e2d@ls1) (G2ab5@set-union (cdr G2e2d@ls1) G2e2e@ls2)))))) (set! G2aba@top-mark* '(top)) (set! G2abc@top-marked? (lambda (G2e31@m*) (memq 'top G2e31@m*))) (set! G2abe@gen-lexical (lambda (G2e33@sym) (if (symbol? G2e33@sym) (gensym G2e33@sym) (if (G2b06@stx? G2e33@sym) (G2abe@gen-lexical (G2b40@id->sym G2e33@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G2e33@sym))))) (set! G2ac0@gen-global (lambda (G2e35@x) (G2abe@gen-lexical G2e35@x))) (set! G2ac2@gen-label (lambda (G2e37@_) (gensym))) (set! G2ac4@gen-top-level-label (lambda (G2e39@id G2e3a@rib) ((lambda (G2e3e@find) (begin (set! G2e3e@find (lambda (G2e49@sym G2e4a@mark* G2e4b@sym* G2e4c@mark** G2e4d@label*) (and (pair? G2e4b@sym*) (if (and (eq? G2e49@sym (car G2e4b@sym*)) (G2b42@same-marks? G2e4a@mark* (car G2e4c@mark**))) (car G2e4d@label*) (G2e3e@find G2e49@sym G2e4a@mark* (cdr G2e4b@sym*) (cdr G2e4c@mark**) (cdr G2e4d@label*)))))) ((lambda (G2e3f@sym G2e40@mark*) ((lambda (G2e43@sym*) ((lambda (G2e45@t) (if G2e45@t ((lambda (G2e47@label) (if (G2965@G280b@imported-label->binding G2e47@label) (gensym) G2e47@label)) G2e45@t) (gensym))) (and (memq G2e3f@sym (G2ad9@rib-sym* G2e3a@rib)) (G2e3e@find G2e3f@sym G2e40@mark* G2e43@sym* (G2adb@rib-mark** G2e3a@rib) (G2add@rib-label* G2e3a@rib))))) (G2ad9@rib-sym* G2e3a@rib))) (G2b40@id->sym G2e39@id) (G2b0c@stx-mark* G2e39@id)))) '#f))) (set! G2ac6@gen-define-label+loc (lambda (G2e53@id G2e54@rib) ((lambda (G2e57@t) (if G2e57@t ((lambda (G2e59@env) ((lambda (G2e5b@label G2e5c@locs) (values G2e5b@label ((lambda (G2e5f@t) (if G2e5f@t (cdr G2e5f@t) ((lambda (G2e61@loc) (begin (G2de4@set-interaction-env-locs! G2e59@env (cons (cons G2e5b@label G2e61@loc) G2e5c@locs)) G2e61@loc)) (G2abe@gen-lexical G2e53@id)))) (assq G2e5b@label G2e5c@locs)))) (G2ac4@gen-top-level-label G2e53@id G2e54@rib) (G2dde@interaction-env-locs G2e59@env))) G2e57@t) (values (gensym) (G2abe@gen-lexical G2e53@id)))) (G2e28@top-level-context)))) (set! G2ac8@gen-define-label (lambda (G2e63@id G2e64@rib) (if (G2e28@top-level-context) (G2ac4@gen-top-level-label G2e63@id G2e64@rib) (gensym)))) (set! G2ace@G2ac9 (make-record-type-descriptor 'rib '#f 'G2acc '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2ad0@G2acb '#f) (set! G2ad2@G2aca (make-record-constructor-descriptor G2ace@G2ac9 '#f G2ad0@G2acb)) (set! G2ad5@rib? (record-predicate G2ace@G2ac9)) (set! G2ad7@make-rib (record-constructor G2ad2@G2aca)) (set! G2ad9@rib-sym* (record-accessor G2ace@G2ac9 '0)) (set! G2adb@rib-mark** (record-accessor G2ace@G2ac9 '1)) (set! G2add@rib-label* (record-accessor G2ace@G2ac9 '2)) (set! G2adf@rib-sealed/freq (record-accessor G2ace@G2ac9 '3)) (set! G2ae1@rib-cache (record-accessor G2ace@G2ac9 '4)) (set! G2ae3@set-rib-sym*! (record-mutator G2ace@G2ac9 '0)) (set! G2ae5@set-rib-mark**! (record-mutator G2ace@G2ac9 '1)) (set! G2ae7@set-rib-label*! (record-mutator G2ace@G2ac9 '2)) (set! G2ae9@set-rib-sealed/freq! (record-mutator G2ace@G2ac9 '3)) (set! G2aeb@set-rib-cache! (record-mutator G2ace@G2ac9 '4)) (set! G2aed@make-empty-rib (lambda () (G2ad7@make-rib '() '() '() '#f '#f))) (set! G2aef@extend-rib! (lambda (G2e67@rib G2e68@id G2e69@label) ((lambda (G2e6e@find) (begin (set! G2e6e@find (lambda (G2e7b@sym G2e7c@mark* G2e7d@sym* G2e7e@mark** G2e7f@label*) (and (pair? G2e7d@sym*) (if (and (eq? G2e7b@sym (car G2e7d@sym*)) (G2b42@same-marks? G2e7c@mark* (car G2e7e@mark**))) G2e7f@label* (G2e6e@find G2e7b@sym G2e7c@mark* (cdr G2e7d@sym*) (cdr G2e7e@mark**) (cdr G2e7f@label*)))))) (begin (if (G2adf@rib-sealed/freq G2e67@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G2e67@rib) (void)) ((lambda (G2e6f@sym G2e70@mark*) ((lambda (G2e73@sym*) ((lambda (G2e75@t) (if G2e75@t ((lambda (G2e77@p) (if (not (eq? G2e69@label (car G2e77@p))) (if (G2e28@top-level-context) (set-car! G2e77@p G2e69@label) (G2e1a@syntax-violation '#f '"multiple definitions of identifier" G2e68@id)) (void))) G2e75@t) (begin (if (G2ae1@rib-cache G2e67@rib) (hashtable-update! (G2ae1@rib-cache G2e67@rib) G2e6f@sym (lambda (G2e79@e) (cons (cons G2e70@mark* G2e69@label) G2e79@e)) '()) (void)) (G2ae3@set-rib-sym*! G2e67@rib (cons G2e6f@sym G2e73@sym*)) (G2ae5@set-rib-mark**! G2e67@rib (cons G2e70@mark* (G2adb@rib-mark** G2e67@rib))) (G2ae7@set-rib-label*! G2e67@rib (cons G2e69@label (G2add@rib-label* G2e67@rib)))))) (and (memq G2e6f@sym (G2ad9@rib-sym* G2e67@rib)) (G2e6e@find G2e6f@sym G2e70@mark* G2e73@sym* (G2adb@rib-mark** G2e67@rib) (G2add@rib-label* G2e67@rib))))) (G2ad9@rib-sym* G2e67@rib))) (G2b40@id->sym G2e68@id) (G2b0c@stx-mark* G2e68@id))))) '#f))) (set! G2af1@extend-rib/nc! (lambda (G2e85@rib G2e86@id G2e87@label) ((lambda (G2e8b@sym G2e8c@mark*) ((lambda (G2e8f@sym*) (begin (if (G2ae1@rib-cache G2e85@rib) (hashtable-update! (G2ae1@rib-cache G2e85@rib) G2e8b@sym (lambda (G2e91@e) (cons (cons G2e8c@mark* G2e87@label) G2e91@e)) '()) (void)) (G2ae3@set-rib-sym*! G2e85@rib (cons G2e8b@sym G2e8f@sym*)) (G2ae5@set-rib-mark**! G2e85@rib (cons G2e8c@mark* (G2adb@rib-mark** G2e85@rib))) (G2ae7@set-rib-label*! G2e85@rib (cons G2e87@label (G2add@rib-label* G2e85@rib))))) (G2ad9@rib-sym* G2e85@rib))) (G2b40@id->sym G2e86@id) (G2b0c@stx-mark* G2e86@id)))) (set! G2af3@make-rib-map (lambda (G2e93@sym*) ((lambda (G2e95@ht) ((letrec ((G2e97@f (lambda (G2e99@i G2e9a@sym*) (if (null? G2e9a@sym*) G2e95@ht (begin (hashtable-update! G2e95@ht (car G2e9a@sym*) (lambda (G2e9d@x) (cons G2e99@i G2e9d@x)) '()) (G2e97@f (+ G2e99@i '1) (cdr G2e9a@sym*))))))) G2e97@f) '0 G2e93@sym*)) (make-eq-hashtable)))) (set! G2af5@seal-rib! (lambda (G2e9f@rib) ((lambda (G2ea1@sym*) (if (not (null? G2ea1@sym*)) (begin (G2ae3@set-rib-sym*! G2e9f@rib (list->vector G2ea1@sym*)) (G2ae5@set-rib-mark**! G2e9f@rib (list->vector (G2adb@rib-mark** G2e9f@rib))) (G2ae7@set-rib-label*! G2e9f@rib (list->vector (G2add@rib-label* G2e9f@rib))) (G2ae9@set-rib-sealed/freq! G2e9f@rib (G2af3@make-rib-map G2ea1@sym*))) (void))) (G2ad9@rib-sym* G2e9f@rib)))) (set! G2af7@unseal-rib! (lambda (G2ea3@rib) (if (G2adf@rib-sealed/freq G2ea3@rib) (begin (G2ae9@set-rib-sealed/freq! G2ea3@rib '#f) (G2ae3@set-rib-sym*! G2ea3@rib (vector->list (G2ad9@rib-sym* G2ea3@rib))) (G2ae5@set-rib-mark**! G2ea3@rib (vector->list (G2adb@rib-mark** G2ea3@rib))) (G2ae7@set-rib-label*! G2ea3@rib (vector->list (G2add@rib-label* G2ea3@rib)))) (void)))) (set! G2af9@make-full-rib (lambda (G2ea5@id* G2ea6@label*) ((lambda (G2ea9@r) (begin (G2af5@seal-rib! G2ea9@r) G2ea9@r)) (G2ad7@make-rib (map G2b40@id->sym G2ea5@id*) (map G2b0c@stx-mark* G2ea5@id*) G2ea6@label* '#f '#f)))) (set! G2aff@G2afa (make-record-type-descriptor 'stx '#f 'G2afd '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2b01@G2afc '#f) (set! G2b03@G2afb (make-record-constructor-descriptor G2aff@G2afa '#f G2b01@G2afc)) (set! G2b06@stx? (record-predicate G2aff@G2afa)) (set! G2b08@make-stx (record-constructor G2b03@G2afb)) (set! G2b0a@stx-expr (record-accessor G2aff@G2afa '0)) (set! G2b0c@stx-mark* (record-accessor G2aff@G2afa '1)) (set! G2b0e@stx-subst* (record-accessor G2aff@G2afa '2)) (set! G2b10@stx-ae* (record-accessor G2aff@G2afa '3)) (set! G2b12@set-stx-expr! (record-mutator G2aff@G2afa '0)) (set! G2b14@set-stx-mark*! (record-mutator G2aff@G2afa '1)) (set! G2b16@set-stx-subst*! (record-mutator G2aff@G2afa '2)) (set! G2b18@set-stx-ae*! (record-mutator G2aff@G2afa '3)) (set! G2b1a@rp (G26ef@G261a@make-record-printer 'stx (lambda (G2eab@x G2eac@p G2ead@wr) (begin (display '"#<syntax " G2eac@p) (write (G2b54@stx->datum G2eab@x) G2eac@p) ((lambda (G2eb1@expr) (if (G26e7@G260a@annotation? G2eb1@expr) ((lambda (G2eb3@src) (if (pair? G2eb3@src) (begin (display '" [" G2eac@p) (display (cdr G2eb3@src) G2eac@p) (display '" of " G2eac@p) (display (car G2eb3@src) G2eac@p) (display '"]" G2eac@p)) (void))) (G26e8@G260c@annotation-source G2eb1@expr)) (void))) (G2b0a@stx-expr G2eab@x)) (display '">" G2eac@p))))) (set! G2b1c@datum->stx (lambda (G2eb5@id G2eb6@datum) (G2b08@make-stx G2eb6@datum (G2b0c@stx-mark* G2eb5@id) (G2b0e@stx-subst* G2eb5@id) (G2b10@stx-ae* G2eb5@id)))) (set! G2b1e@gen-mark (lambda () (string '#\m))) (set! G2b20@anti-mark '#f) (set! G2b22@anti-mark? not) (set! G2b24@join-wraps (lambda (G2eb9@m1* G2eba@s1* G2ebb@ae1* G2ebc@e) ((lambda (G2ec2@cancel) (begin (set! G2ec2@cancel (lambda (G2ec9@ls1 G2eca@ls2) ((letrec ((G2ecd@f (lambda (G2ecf@x G2ed0@ls1) (if (null? G2ed0@ls1) (cdr G2eca@ls2) (cons G2ecf@x (G2ecd@f (car G2ed0@ls1) (cdr G2ed0@ls1))))))) G2ecd@f) (car G2ec9@ls1) (cdr G2ec9@ls1)))) ((lambda (G2ec3@m2* G2ec4@s2* G2ec5@ae2*) (if (and (not (null? G2eb9@m1*)) (not (null? G2ec3@m2*)) (G2b22@anti-mark? (car G2ec3@m2*))) (values (G2ec2@cancel G2eb9@m1* G2ec3@m2*) (G2ec2@cancel G2eba@s1* G2ec4@s2*) (G2ec2@cancel G2ebb@ae1* G2ec5@ae2*)) (values (append G2eb9@m1* G2ec3@m2*) (append G2eba@s1* G2ec4@s2*) (append G2ebb@ae1* G2ec5@ae2*)))) (G2b0c@stx-mark* G2ebc@e) (G2b0e@stx-subst* G2ebc@e) (G2b10@stx-ae* G2ebc@e)))) '#f))) (set! G2b26@mkstx (lambda (G2ed3@e G2ed4@m* G2ed5@s* G2ed6@ae*) (if (and (G2b06@stx? G2ed3@e) (not (G2abc@top-marked? G2ed4@m*))) (call-with-values (lambda () (G2b24@join-wraps G2ed4@m* G2ed5@s* G2ed6@ae* G2ed3@e)) (lambda (G2ede@G2edb G2edf@G2edc G2ee0@G2edd) ((lambda (G2ee4@ae* G2ee5@s* G2ee6@m*) (G2b08@make-stx (G2b0a@stx-expr G2ed3@e) G2ee6@m* G2ee5@s* G2ee4@ae*)) G2ee0@G2edd G2edf@G2edc G2ede@G2edb))) (G2b08@make-stx G2ed3@e G2ed4@m* G2ed5@s* G2ed6@ae*)))) (set! G2b28@add-mark (lambda (G2eea@m G2eeb@e G2eec@ae) (G2b26@mkstx G2eeb@e (list G2eea@m) '(shift) (list G2eec@ae)))) (set! G2b2a@add-subst (lambda (G2ef0@subst G2ef1@e) (G2b26@mkstx G2ef1@e '() (list G2ef0@subst) '()))) (set! G2b2c@syntax-kind? (lambda (G2ef4@x G2ef5@p?) (if (G2b06@stx? G2ef4@x) (G2b2c@syntax-kind? (G2b0a@stx-expr G2ef4@x) G2ef5@p?) (if (G26e7@G260a@annotation? G2ef4@x) (G2b2c@syntax-kind? (G26e9@G260e@annotation-expression G2ef4@x) G2ef5@p?) (G2ef5@p? G2ef4@x))))) (set! G2b2e@syntax-vector->list (lambda (G2ef8@x) (if (G2b06@stx? G2ef8@x) ((lambda (G2efa@ls G2efb@m* G2efc@s* G2efd@ae*) (map (lambda (G2f02@x) (G2b26@mkstx G2f02@x G2efb@m* G2efc@s* G2efd@ae*)) G2efa@ls)) (G2b2e@syntax-vector->list (G2b0a@stx-expr G2ef8@x)) (G2b0c@stx-mark* G2ef8@x) (G2b0e@stx-subst* G2ef8@x) (G2b10@stx-ae* G2ef8@x)) (if (G26e7@G260a@annotation? G2ef8@x) (G2b2e@syntax-vector->list (G26e9@G260e@annotation-expression G2ef8@x)) (if (vector? G2ef8@x) (vector->list G2ef8@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G2ef8@x)))))) (set! G2b30@syntax-pair? (lambda (G2f04@x) (G2b2c@syntax-kind? G2f04@x pair?))) (set! G2b32@syntax-vector? (lambda (G2f06@x) (G2b2c@syntax-kind? G2f06@x vector?))) (set! G2b34@syntax-null? (lambda (G2f08@x) (G2b2c@syntax-kind? G2f08@x null?))) (set! G2b36@syntax-list? (lambda (G2f0a@x) (or (G2b34@syntax-null? G2f0a@x) (and (G2b30@syntax-pair? G2f0a@x) (G2b36@syntax-list? (G2b3a@syntax-cdr G2f0a@x)))))) (set! G2b38@syntax-car (lambda (G2f0c@x) (if (G2b06@stx? G2f0c@x) (G2b26@mkstx (G2b38@syntax-car (G2b0a@stx-expr G2f0c@x)) (G2b0c@stx-mark* G2f0c@x) (G2b0e@stx-subst* G2f0c@x) (G2b10@stx-ae* G2f0c@x)) (if (G26e7@G260a@annotation? G2f0c@x) (G2b38@syntax-car (G26e9@G260e@annotation-expression G2f0c@x)) (if (pair? G2f0c@x) (car G2f0c@x) (assertion-violation 'syntax-car '"BUG: not a pair" G2f0c@x)))))) (set! G2b3a@syntax-cdr (lambda (G2f0e@x) (if (G2b06@stx? G2f0e@x) (G2b26@mkstx (G2b3a@syntax-cdr (G2b0a@stx-expr G2f0e@x)) (G2b0c@stx-mark* G2f0e@x) (G2b0e@stx-subst* G2f0e@x) (G2b10@stx-ae* G2f0e@x)) (if (G26e7@G260a@annotation? G2f0e@x) (G2b3a@syntax-cdr (G26e9@G260e@annotation-expression G2f0e@x)) (if (pair? G2f0e@x) (cdr G2f0e@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G2f0e@x)))))) (set! G2b3c@syntax->list (lambda (G2f10@x) (if (G2b30@syntax-pair? G2f10@x) (cons (G2b38@syntax-car G2f10@x) (G2b3c@syntax->list (G2b3a@syntax-cdr G2f10@x))) (if (G2b34@syntax-null? G2f10@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G2f10@x))))) (set! G2b3e@id? (lambda (G2f12@x) (and (G2b06@stx? G2f12@x) ((lambda (G2f14@expr) (symbol? (if (G26e7@G260a@annotation? G2f14@expr) (G26e6@G2608@annotation-stripped G2f14@expr) G2f14@expr))) (G2b0a@stx-expr G2f12@x))))) (set! G2b40@id->sym (lambda (G2f16@x) (begin (if (not (G2b06@stx? G2f16@x)) (error 'id->sym '"BUG in ikarus: not an id" G2f16@x) (void)) ((lambda (G2f18@expr) ((lambda (G2f1a@sym) (if (symbol? G2f1a@sym) G2f1a@sym (error 'id->sym '"BUG in ikarus: not an id" G2f16@x))) (if (G26e7@G260a@annotation? G2f18@expr) (G26e6@G2608@annotation-stripped G2f18@expr) G2f18@expr))) (G2b0a@stx-expr G2f16@x))))) (set! G2b42@same-marks? (lambda (G2f1c@x G2f1d@y) (or (and (null? G2f1c@x) (null? G2f1d@y)) (and (pair? G2f1c@x) (pair? G2f1d@y) (eq? (car G2f1c@x) (car G2f1d@y)) (G2b42@same-marks? (cdr G2f1c@x) (cdr G2f1d@y)))))) (set! G2b44@bound-id=? (lambda (G2f20@x G2f21@y) (and (eq? (G2b40@id->sym G2f20@x) (G2b40@id->sym G2f21@y)) (G2b42@same-marks? (G2b0c@stx-mark* G2f20@x) (G2b0c@stx-mark* G2f21@y))))) (set! G2b46@free-id=? (lambda (G2f24@i G2f25@j) ((lambda (G2f28@t0 G2f29@t1) (if (or G2f28@t0 G2f29@t1) (eq? G2f28@t0 G2f29@t1) (eq? (G2b40@id->sym G2f24@i) (G2b40@id->sym G2f25@j)))) (G2b5a@id->real-label G2f24@i) (G2b5a@id->real-label G2f25@j)))) (set! G2b48@valid-bound-ids? (lambda (G2f2c@id*) (and (for-all G2b3e@id? G2f2c@id*) (G2b4a@distinct-bound-ids? G2f2c@id*)))) (set! G2b4a@distinct-bound-ids? (lambda (G2f2e@id*) (or (null? G2f2e@id*) (and (not (G2b4c@bound-id-member? (car G2f2e@id*) (cdr G2f2e@id*))) (G2b4a@distinct-bound-ids? (cdr G2f2e@id*)))))) (set! G2b4c@bound-id-member? (lambda (G2f30@id G2f31@id*) (and (pair? G2f31@id*) (or (G2b44@bound-id=? G2f30@id (car G2f31@id*)) (G2b4c@bound-id-member? G2f30@id (cdr G2f31@id*)))))) (set! G2b4e@self-evaluating? (lambda (G2f34@x) (or (number? G2f34@x) (string? G2f34@x) (char? G2f34@x) (boolean? G2f34@x) (regexp? G2f34@x) (bytevector? G2f34@x)))) (set! G2b50@strip-annotations (lambda (G2f36@x) (if (pair? G2f36@x) (cons (G2b50@strip-annotations (car G2f36@x)) (G2b50@strip-annotations (cdr G2f36@x))) (if (vector? G2f36@x) (vector-map G2b50@strip-annotations G2f36@x) (if (G26e7@G260a@annotation? G2f36@x) (G26e6@G2608@annotation-stripped G2f36@x) G2f36@x))))) (set! G2b52@strip (lambda (G2f38@x G2f39@m*) (if (G2abc@top-marked? G2f39@m*) (if (or (G26e7@G260a@annotation? G2f38@x) (and (pair? G2f38@x) (G26e7@G260a@annotation? (car G2f38@x))) (and (vector? G2f38@x) (> (vector-length G2f38@x) '0) (G26e7@G260a@annotation? (vector-ref G2f38@x '0)))) (G2b50@strip-annotations G2f38@x) G2f38@x) ((letrec ((G2f3c@f (lambda (G2f3e@x) (if (G2b06@stx? G2f3e@x) (G2b52@strip (G2b0a@stx-expr G2f3e@x) (G2b0c@stx-mark* G2f3e@x)) (if (G26e7@G260a@annotation? G2f3e@x) (G26e6@G2608@annotation-stripped G2f3e@x) (if (pair? G2f3e@x) ((lambda (G2f40@a G2f41@d) (if (and (eq? G2f40@a (car G2f3e@x)) (eq? G2f41@d (cdr G2f3e@x))) G2f3e@x (cons G2f40@a G2f41@d))) (G2f3c@f (car G2f3e@x)) (G2f3c@f (cdr G2f3e@x))) (if (vector? G2f3e@x) ((lambda (G2f44@old) ((lambda (G2f46@new) (if (for-all eq? G2f44@old G2f46@new) G2f3e@x (list->vector G2f46@new))) (map G2f3c@f G2f44@old))) (vector->list G2f3e@x)) G2f3e@x))))))) G2f3c@f) G2f38@x)))) (set! G2b54@stx->datum (lambda (G2f48@x) (G2b52@strip G2f48@x '()))) (set! G2b56@same-marks*? (lambda (G2f4a@mark* G2f4b@mark** G2f4c@si) (if (null? G2f4c@si) '#f (if (G2b42@same-marks? G2f4a@mark* (vector-ref G2f4b@mark** (car G2f4c@si))) (car G2f4c@si) (G2b56@same-marks*? G2f4a@mark* G2f4b@mark** (cdr G2f4c@si)))))) (set! G2b58@id->label (lambda (G2f50@id) (or (G2b5a@id->real-label G2f50@id) ((lambda (G2f52@t) (if G2f52@t ((lambda (G2f54@env) ((lambda (G2f56@rib) (call-with-values (lambda () (G2ac6@gen-define-label+loc G2f50@id G2f56@rib)) (lambda (G2f5a@G2f58 G2f5b@G2f59) ((lambda (G2f5e@loc_ G2f5f@lab) (begin (G2aef@extend-rib! G2f56@rib G2f50@id G2f5f@lab) G2f5f@lab)) G2f5b@G2f59 G2f5a@G2f58)))) (G2dda@interaction-env-rib G2f54@env))) G2f52@t) '#f)) (G2e28@top-level-context))))) (set! G2b5a@id->real-label (lambda (G2f62@id) ((lambda (G2f64@sym) ((letrec ((G2f66@search (lambda (G2f68@subst* G2f69@mark*) (if (null? G2f68@subst*) '#f (if (eq? (car G2f68@subst*) 'shift) (G2f66@search (cdr G2f68@subst*) (cdr G2f69@mark*)) ((lambda (G2f6c@rib) ((lambda (G2f6e@t) (if G2f6e@t ((lambda (G2f70@ht) ((lambda (G2f72@si) ((lambda (G2f74@i) (if G2f74@i (vector-ref (G2add@rib-label* G2f6c@rib) G2f74@i) (G2f66@search (cdr G2f68@subst*) G2f69@mark*))) (and G2f72@si (G2b56@same-marks*? G2f69@mark* (G2adb@rib-mark** G2f6c@rib) (reverse G2f72@si))))) (hashtable-ref G2f70@ht G2f64@sym '#f))) G2f6e@t) ((letrec ((G2f76@f (lambda (G2f78@sym* G2f79@mark** G2f7a@label*) (if (null? G2f78@sym*) (G2f66@search (cdr G2f68@subst*) G2f69@mark*) (if (and (eq? (car G2f78@sym*) G2f64@sym) (G2b42@same-marks? (car G2f79@mark**) G2f69@mark*)) (car G2f7a@label*) (G2f76@f (cdr G2f78@sym*) (cdr G2f79@mark**) (cdr G2f7a@label*))))))) G2f76@f) (G2ad9@rib-sym* G2f6c@rib) (G2adb@rib-mark** G2f6c@rib) (G2add@rib-label* G2f6c@rib)))) (G2adf@rib-sealed/freq G2f6c@rib))) (car G2f68@subst*))))))) G2f66@search) (G2b0e@stx-subst* G2f62@id) (G2b0c@stx-mark* G2f62@id))) (G2b40@id->sym G2f62@id)))) (set! G2b5c@label->binding (lambda (G2f7e@x G2f7f@r) ((lambda (G2f82@t) (if G2f82@t ((lambda (G2f84@b) (if (and (pair? G2f84@b) (eq? (car G2f84@b) '$core-rtd)) (cons '$rtd (map G2ce5@bless (cdr G2f84@b))) (if (and (pair? G2f84@b) (eq? (car G2f84@b) 'global-rtd)) ((lambda (G2f86@lib G2f87@loc) (cons '$rtd (symbol-value G2f87@loc))) (cadr G2f84@b) (cddr G2f84@b)) G2f84@b))) G2f82@t) ((lambda (G2f8a@t) (if G2f8a@t (cdr G2f8a@t) ((lambda (G2f8c@t) (if G2f8c@t ((lambda (G2f8e@env) ((lambda (G2f90@t) (if G2f90@t ((lambda (G2f92@p) (cons* 'lexical (cdr G2f92@p) '#f)) G2f90@t) '(displaced-lexical . #f))) (assq G2f7e@x (G2dde@interaction-env-locs G2f8e@env)))) G2f8c@t) '(displaced-lexical . #f))) (G2e28@top-level-context)))) (assq G2f7e@x G2f7f@r)))) (G2965@G280b@imported-label->binding G2f7e@x)))) (set! G2b5e@make-binding cons) (set! G2b60@binding-type car) (set! G2b62@binding-value cdr) (set! G2b64@raise-unbound-error (lambda (G2f94@id) (G2e18@syntax-violation* '#f '"unbound identifier" G2f94@id (G4a3a@G4884@make-undefined-violation)))) (set! G2b66@syntax-type (lambda (G2f96@e G2f97@r) (if (G2b3e@id? G2f96@e) ((lambda (G2f9a@id) ((lambda (G2f9c@label) ((lambda (G2f9e@b) ((lambda (G2fa0@type) ((lambda () (begin (if (not G2f9c@label) (G2b64@raise-unbound-error G2f9a@id) (void)) ((lambda (G2fa2@t) (if (memv G2fa2@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G2fa0@type (G2b62@binding-value G2f9e@b) G2f9a@id) (values 'other '#f '#f))) G2fa0@type))))) (G2b60@binding-type G2f9e@b))) (G2b5c@label->binding G2f9c@label G2f97@r))) (G2b58@id->label G2f9a@id))) G2f96@e) (if (G2b30@syntax-pair? G2f96@e) ((lambda (G2fa4@id) (if (G2b3e@id? G2fa4@id) ((lambda (G2fa6@label) ((lambda (G2fa8@b) ((lambda (G2faa@type) ((lambda () (begin (if (not G2fa6@label) (G2b64@raise-unbound-error G2fa4@id) (void)) ((lambda (G2fac@t) (if (memv G2fac@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G2faa@type (G2b62@binding-value G2fa8@b) G2fa4@id) (values 'call '#f '#f))) G2faa@type))))) (G2b60@binding-type G2fa8@b))) (G2b5c@label->binding G2fa6@label G2f97@r))) (G2b58@id->label G2fa4@id)) (values 'call '#f '#f))) (G2b38@syntax-car G2f96@e)) ((lambda (G2fae@d) (if (G2b4e@self-evaluating? G2fae@d) (values 'constant G2fae@d '#f) (values 'other '#f '#f))) (G2b54@stx->datum G2f96@e)))))) (set! G2b74@sanitize-binding (lambda (G2fb0@x G2fb1@src) (if (procedure? G2fb0@x) (cons* 'local-macro G2fb0@x G2fb1@src) (if (and (pair? G2fb0@x) (eq? (car G2fb0@x) 'macro!) (procedure? (cdr G2fb0@x))) (cons* 'local-macro! (cdr G2fb0@x) G2fb1@src) (if (and (pair? G2fb0@x) (eq? (car G2fb0@x) '$rtd)) G2fb0@x (assertion-violation 'expand '"invalid transformer" G2fb0@x)))))) (set! G2b76@make-variable-transformer (lambda (G2fb4@x) (if (procedure? G2fb4@x) (cons 'macro! G2fb4@x) (assertion-violation 'make-variable-transformer '"not a procedure" G2fb4@x)))) (set! G2b78@variable-transformer? (lambda (G2fb6@x) (and (pair? G2fb6@x) (eq? (car G2fb6@x) 'macro!) (procedure? (cdr G2fb6@x))))) (set! G2b7a@variable-transformer-procedure (lambda (G2fb8@x) (if (G2b78@variable-transformer? G2fb8@x) (cdr G2fb8@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G2fb8@x)))) (set! G2b7c@make-eval-transformer (lambda (G2fba@x) (G2b74@sanitize-binding (eval-core (G2746@G26fe@expanded->core G2fba@x)) G2fba@x))) (set! G2cb3@parse-define (lambda (G2fbc@x) ((lambda (G2fbe@t) ((lambda (G2fc0@ls/false) (if (and G2fc0@ls/false (apply (lambda (G2fc2@id G2fc3@fmls G2fc4@b G2fc5@b*) (G2b3e@id? G2fc2@id)) G2fc0@ls/false)) (apply (lambda (G2fca@id G2fcb@fmls G2fcc@b G2fcd@b*) (begin (G2d57@verify-formals G2fcb@fmls G2fbc@x) (values G2fca@id (cons 'defun (cons G2fcb@fmls (cons G2fcc@b G2fcd@b*)))))) G2fc0@ls/false) ((lambda (G2fd2@t) ((lambda (G2fd4@ls/false) (if (and G2fd4@ls/false (apply (lambda (G2fd6@id G2fd7@val) (G2b3e@id? G2fd6@id)) G2fd4@ls/false)) (apply (lambda (G2fda@id G2fdb@val) (values G2fda@id (cons 'expr G2fdb@val))) G2fd4@ls/false) ((lambda (G2fde@t) ((lambda (G2fe0@ls/false) (if (and G2fe0@ls/false (apply (lambda (G2fe2@id) (G2b3e@id? G2fe2@id)) G2fe0@ls/false)) (apply (lambda (G2fe4@id) (values G2fe4@id (cons 'expr (G2ce5@bless '(void))))) G2fe0@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G2fde@t))) (G2d2f@syntax-dispatch G2fde@t '(_ any)))) G2fd2@t))) (G2d2f@syntax-dispatch G2fd2@t '(_ any any)))) G2fbe@t))) (G2d2f@syntax-dispatch G2fbe@t '(_ (any . any) any . each-any)))) G2fbc@x))) (set! G2cb5@parse-define-syntax (lambda (G2fe6@x) ((lambda (G2fe8@t) ((lambda (G2fea@ls/false) (if (and G2fea@ls/false (apply (lambda (G2fec@id G2fed@val) (G2b3e@id? G2fec@id)) G2fea@ls/false)) (apply (lambda (G2ff0@id G2ff1@val) (values G2ff0@id G2ff1@val)) G2fea@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G2fe8@t))) (G2d2f@syntax-dispatch G2fe8@t '(_ any any)))) G2fe6@x))) (set! G2cb7@scheme-stx-hashtable (make-eq-hashtable)) (set! G2cb9@scheme-stx (lambda (G2ff4@sym) (or (hashtable-ref G2cb7@scheme-stx-hashtable G2ff4@sym '#f) ((lambda (G2ff6@subst) ((lambda (G2ff8@stx) ((lambda (G2ffa@stx) ((lambda () (begin (hashtable-set! G2cb7@scheme-stx-hashtable G2ff4@sym G2ffa@stx) G2ffa@stx)))) ((lambda (G2ffc@t) (if G2ffc@t ((lambda (G2ffe@x) ((lambda (G3000@name G3001@label) (G2b2a@add-subst (G2ad7@make-rib (list G3000@name) (list G2aba@top-mark*) (list G3001@label) '#f '#f) G2ff8@stx)) (car G2ffe@x) (cdr G2ffe@x))) G2ffc@t) G2ff8@stx)) (assq G2ff4@sym G2ff6@subst)))) (G2b08@make-stx G2ff4@sym G2aba@top-mark* '() '()))) (G293b@G27b7@library-subst (G295f@G27ff@find-library-by-name '(psyntax system $all))))))) (set! G2cbb@lexical-var car) (set! G2cbd@lexical-mutable? cdr) (set! G2cbf@set-lexical-mutable! set-cdr!) (set! G2cc1@add-lexical (lambda (G3004@lab G3005@lex G3006@r) (cons (cons* G3004@lab 'lexical G3005@lex '#f) G3006@r))) (set! G2cc3@add-lexicals (lambda (G300a@lab* G300b@lex* G300c@r) (if (null? G300a@lab*) G300c@r (G2cc3@add-lexicals (cdr G300a@lab*) (cdr G300b@lex*) (G2cc1@add-lexical (car G300a@lab*) (car G300b@lex*) G300c@r))))) (set! G2cc5@letrec-helper (lambda (G3010@e G3011@r G3012@mr G3013@build) ((lambda (G3018@t) ((lambda (G301a@ls/false) (if G301a@ls/false (apply (lambda (G301c@lhs* G301d@rhs* G301e@b G301f@b*) (if (not (G2b48@valid-bound-ids? G301c@lhs*)) (G2ce9@invalid-fmls-error G3010@e G301c@lhs*) ((lambda (G3024@lex* G3025@lab*) ((lambda (G3028@rib G3029@r) ((lambda (G302c@body G302d@rhs*) (G3013@build '#f G3024@lex* G302d@rhs* G302c@body)) (G2d69@chi-internal (G2b2a@add-subst G3028@rib (cons G301e@b G301f@b*)) G3029@r G3012@mr) (G2d4f@chi-expr* (map (lambda (G3030@x) (G2b2a@add-subst G3028@rib G3030@x)) G301d@rhs*) G3029@r G3012@mr))) (G2af9@make-full-rib G301c@lhs* G3025@lab*) (G2cc3@add-lexicals G3025@lab* G3024@lex* G3011@r))) (map G2abe@gen-lexical G301c@lhs*) (map G2ac2@gen-label G301c@lhs*)))) G301a@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3018@t))) (G2d2f@syntax-dispatch G3018@t '(_ #(each (any any)) any . each-any)))) G3010@e))) (set! G2cc7@letrec-transformer (lambda (G3032@e G3033@r G3034@mr) (G2cc5@letrec-helper G3032@e G3033@r G3034@mr G2aa1@G2a14@build-letrec))) (set! G2cc9@letrec*-transformer (lambda (G3038@e G3039@r G303a@mr) (G2cc5@letrec-helper G3038@e G3039@r G303a@mr G2aa2@G2a16@build-letrec*))) (set! G2ccb@fluid-let-syntax-transformer (lambda (G303e@e G303f@r G3040@mr) ((lambda (G3045@lookup) (begin (set! G3045@lookup (lambda (G3058@x) (or (G2b58@id->label G3058@x) (G2e1a@syntax-violation '#f '"unbound identifier" G303e@e G3058@x)))) ((lambda (G3046@t) ((lambda (G3048@ls/false) (if G3048@ls/false (apply (lambda (G304a@lhs* G304b@rhs* G304c@b G304d@b*) (if (not (G2b48@valid-bound-ids? G304a@lhs*)) (G2ce9@invalid-fmls-error G303e@e G304a@lhs*) ((lambda (G3052@lab* G3053@rhs*) (G2d69@chi-internal (cons G304c@b G304d@b*) (append (map cons G3052@lab* G3053@rhs*) G303f@r) (append (map cons G3052@lab* G3053@rhs*) G3040@mr))) (map G3045@lookup G304a@lhs*) (map (lambda (G3056@x) (G2b7c@make-eval-transformer (G2d8e@expand-transformer G3056@x G3040@mr))) G304b@rhs*)))) G3048@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3046@t))) (G2d2f@syntax-dispatch G3046@t '(_ #(each (any any)) any . each-any)))) G303e@e))) '#f))) (set! G2ccd@type-descriptor-transformer (lambda (G305a@e G305b@r G305c@mr) ((lambda (G3060@t) ((lambda (G3062@ls/false) (if (and G3062@ls/false (apply (lambda (G3064@id) (G2b3e@id? G3064@id)) G3062@ls/false)) (apply (lambda (G3066@id) ((lambda (G3068@lab) ((lambda (G306a@b) ((lambda (G306c@type) ((lambda () (begin (if (not G3068@lab) (G2b64@raise-unbound-error G3066@id) (void)) (if (not (and (eq? G306c@type '$rtd) (not (list? (G2b62@binding-value G306a@b))))) (G2e1a@syntax-violation '#f '"not a record type" G305a@e) (void)) (list 'quote (G2b62@binding-value G306a@b)))))) (G2b60@binding-type G306a@b))) (G2b5c@label->binding G3068@lab G305b@r))) (G2b58@id->label G3066@id))) G3062@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3060@t))) (G2d2f@syntax-dispatch G3060@t '(_ any)))) G305a@e))) (set! G2ccf@record-type-descriptor-transformer (lambda (G306e@e G306f@r G3070@mr) ((lambda (G3074@t) ((lambda (G3076@ls/false) (if (and G3076@ls/false (apply (lambda (G3078@id) (G2b3e@id? G3078@id)) G3076@ls/false)) (apply (lambda (G307a@id) ((lambda (G307c@lab) ((lambda (G307e@b) ((lambda (G3080@type) ((lambda () (begin (if (not G307c@lab) (G2b64@raise-unbound-error G307a@id) (void)) (if (not (and (eq? G3080@type '$rtd) (list? (G2b62@binding-value G307e@b)))) (G2e1a@syntax-violation '#f '"not a record type" G306e@e) (void)) (G2d53@chi-expr (car (G2b62@binding-value G307e@b)) G306f@r G3070@mr))))) (G2b60@binding-type G307e@b))) (G2b5c@label->binding G307c@lab G306f@r))) (G2b58@id->label G307a@id))) G3076@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3074@t))) (G2d2f@syntax-dispatch G3074@t '(_ any)))) G306e@e))) (set! G2cd1@record-constructor-descriptor-transformer (lambda (G3082@e G3083@r G3084@mr) ((lambda (G3088@t) ((lambda (G308a@ls/false) (if (and G308a@ls/false (apply (lambda (G308c@id) (G2b3e@id? G308c@id)) G308a@ls/false)) (apply (lambda (G308e@id) ((lambda (G3090@lab) ((lambda (G3092@b) ((lambda (G3094@type) ((lambda () (begin (if (not G3090@lab) (G2b64@raise-unbound-error G308e@id) (void)) (if (not (and (eq? G3094@type '$rtd) (list? (G2b62@binding-value G3092@b)))) (G2e1a@syntax-violation '#f '"invalid type" G3082@e) (void)) (G2d53@chi-expr (cadr (G2b62@binding-value G3092@b)) G3083@r G3084@mr))))) (G2b60@binding-type G3092@b))) (G2b5c@label->binding G3090@lab G3083@r))) (G2b58@id->label G308e@id))) G308a@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3088@t))) (G2d2f@syntax-dispatch G3088@t '(_ any)))) G3082@e))) (set! G2cd3@when-macro (lambda (G3096@e) ((lambda (G3098@t) ((lambda (G309a@ls/false) (if G309a@ls/false (apply (lambda (G309c@test G309d@e G309e@e*) (G2ce5@bless (list 'if G309c@test (cons 'begin (cons G309d@e G309e@e*))))) G309a@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3098@t))) (G2d2f@syntax-dispatch G3098@t '(_ any any . each-any)))) G3096@e))) (set! G2cd5@unless-macro (lambda (G30a2@e) ((lambda (G30a4@t) ((lambda (G30a6@ls/false) (if G30a6@ls/false (apply (lambda (G30a8@test G30a9@e G30aa@e*) (G2ce5@bless (list 'if (list 'not G30a8@test) (cons 'begin (cons G30a9@e G30aa@e*))))) G30a6@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G30a4@t))) (G2d2f@syntax-dispatch G30a4@t '(_ any any . each-any)))) G30a2@e))) (set! G2cd7@if-transformer (lambda (G30ae@e G30af@r G30b0@mr) ((lambda (G30b4@t) ((lambda (G30b6@ls/false) (if G30b6@ls/false (apply (lambda (G30b8@e0 G30b9@e1 G30ba@e2) (list 'if (G2d53@chi-expr G30b8@e0 G30af@r G30b0@mr) (G2d53@chi-expr G30b9@e1 G30af@r G30b0@mr) (G2d53@chi-expr G30ba@e2 G30af@r G30b0@mr))) G30b6@ls/false) ((lambda (G30be@t) ((lambda (G30c0@ls/false) (if G30c0@ls/false (apply (lambda (G30c2@e0 G30c3@e1) (list 'if (G2d53@chi-expr G30c2@e0 G30af@r G30b0@mr) (G2d53@chi-expr G30c3@e1 G30af@r G30b0@mr) (G2aa0@G2a12@build-void))) G30c0@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G30be@t))) (G2d2f@syntax-dispatch G30be@t '(_ any any)))) G30b4@t))) (G2d2f@syntax-dispatch G30b4@t '(_ any any any)))) G30ae@e))) (set! G2cd9@and-transformer (lambda (G30c6@e G30c7@r G30c8@mr) ((lambda (G30cc@t) ((lambda (G30ce@ls/false) (if G30ce@ls/false (apply (lambda (G30d0@e*) (cons 'and (G2d4f@chi-expr* G30d0@e* G30c7@r G30c8@mr))) G30ce@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G30cc@t))) (G2d2f@syntax-dispatch G30cc@t '(_ . each-any)))) G30c6@e))) (set! G2cdb@or-transformer (lambda (G30d2@e G30d3@r G30d4@mr) ((lambda (G30d8@t) ((lambda (G30da@ls/false) (if G30da@ls/false (apply (lambda (G30dc@e*) (cons 'or (G2d4f@chi-expr* G30dc@e* G30d3@r G30d4@mr))) G30da@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G30d8@t))) (G2d2f@syntax-dispatch G30d8@t '(_ . each-any)))) G30d2@e))) (set! G2cdd@case-macro (lambda (G30de@e) ((lambda (G30e1@build-last G30e3@build-one) (begin (set! G30e1@build-last (lambda (G3108@cls) ((lambda (G310a@t) ((lambda (G310c@ls/false) (if G310c@ls/false (apply (lambda (G310e@e G310f@e*) (cons 'begin (cons G310e@e G310f@e*))) G310c@ls/false) ((lambda (G3112@t) ((lambda (G3114@ls/false) (if G3114@ls/false (apply (lambda () (G30e3@build-one G3108@cls '(if #f #f))) G3114@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3112@t))) (G2d2f@syntax-dispatch G3112@t '_))) G310a@t))) (G2d2f@syntax-dispatch G310a@t '(#(scheme-id else) any . each-any)))) G3108@cls))) (set! G30e3@build-one (lambda (G30fa@cls G30fb@k) ((lambda (G30fe@t) ((lambda (G3100@ls/false) (if G3100@ls/false (apply (lambda (G3102@d* G3103@e G3104@e*) (list 'if (list 'memv 't (list 'quote G3102@d*)) (cons 'begin (cons G3103@e G3104@e*)) G30fb@k)) G3100@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G30fe@t))) (G2d2f@syntax-dispatch G30fe@t '(each-any any . each-any)))) G30fa@cls))) ((lambda (G30e4@t) ((lambda (G30e6@ls/false) (if G30e6@ls/false (apply (lambda (G30e8@expr) (G2ce5@bless (cons 'let (cons (list (list 't G30e8@expr)) '((if #f #f)))))) G30e6@ls/false) ((lambda (G30ea@t) ((lambda (G30ec@ls/false) (if G30ec@ls/false (apply (lambda (G30ee@expr G30ef@cls G30f0@cls*) (G2ce5@bless (list 'let (list (list 't G30ee@expr)) ((letrec ((G30f4@f (lambda (G30f6@cls G30f7@cls*) (if (null? G30f7@cls*) (G30e1@build-last G30f6@cls) (G30e3@build-one G30f6@cls (G30f4@f (car G30f7@cls*) (cdr G30f7@cls*))))))) G30f4@f) G30ef@cls G30f0@cls*)))) G30ec@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G30ea@t))) (G2d2f@syntax-dispatch G30ea@t '(_ any any . each-any)))) G30e4@t))) (G2d2f@syntax-dispatch G30e4@t '(_ any)))) G30de@e))) '#f '#f))) (set! G2cdf@quote-transformer (lambda (G3116@e G3117@r G3118@mr) ((lambda (G311c@t) ((lambda (G311e@ls/false) (if G311e@ls/false (apply (lambda (G3120@datum) (list 'quote (G2b54@stx->datum G3120@datum))) G311e@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G311c@t))) (G2d2f@syntax-dispatch G311c@t '(_ any)))) G3116@e))) (set! G2ce1@case-lambda-transformer (lambda (G3122@e G3123@r G3124@mr) ((lambda (G3128@t) ((lambda (G312a@ls/false) (if G312a@ls/false (apply (lambda (G312c@fmls* G312d@b* G312e@b**) (call-with-values (lambda () (G2d5b@chi-lambda-clause* G3122@e G312c@fmls* (map cons G312d@b* G312e@b**) G3123@r G3124@mr)) (lambda (G3134@G3132 G3135@G3133) ((lambda (G3138@body* G3139@fmls*) (G2a9d@G29e0@build-case-lambda '#f G3139@fmls* G3138@body*)) G3135@G3133 G3134@G3132)))) G312a@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3128@t))) (G2d2f@syntax-dispatch G3128@t '(_ . #(each (any any . each-any)))))) G3122@e))) (set! G2ce3@lambda-transformer (lambda (G313c@e G313d@r G313e@mr) ((lambda (G3142@t) ((lambda (G3144@ls/false) (if G3144@ls/false (apply (lambda (G3146@fmls G3147@b G3148@b*) (call-with-values (lambda () (G2d59@chi-lambda-clause G313c@e G3146@fmls (cons G3147@b G3148@b*) G313d@r G313e@mr)) (lambda (G314e@G314c G314f@G314d) ((lambda (G3152@body G3153@fmls) (G2a9c@G29de@build-lambda '#f G3153@fmls G3152@body)) G314f@G314d G314e@G314c)))) G3144@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3142@t))) (G2d2f@syntax-dispatch G3142@t '(_ any any . each-any)))) G313c@e))) (set! G2ce5@bless (lambda (G3156@x) (G2b26@mkstx ((letrec ((G3158@f (lambda (G315a@x) (if (G2b06@stx? G315a@x) G315a@x (if (pair? G315a@x) (cons (G3158@f (car G315a@x)) (G3158@f (cdr G315a@x))) (if (symbol? G315a@x) (G2cb9@scheme-stx G315a@x) (if (vector? G315a@x) (vector-map G3158@f G315a@x) G315a@x))))))) G3158@f) G3156@x) '() '() '()))) (set! G2ce7@with-syntax-macro (lambda (G315c@e) ((lambda (G315e@t) ((lambda (G3160@ls/false) (if G3160@ls/false (apply (lambda (G3162@pat* G3163@expr* G3164@b G3165@b*) ((lambda (G316a@idn*) (begin (G2d57@verify-formals (map car G316a@idn*) G315c@e) ((lambda (G316c@t*) (G2ce5@bless (list 'let (map list G316c@t* G3163@expr*) ((letrec ((G316e@f (lambda (G3170@pat* G3171@t*) (if (null? G3170@pat*) (cons 'begin (cons '#f (cons G3164@b G3165@b*))) (list 'syntax-case (car G3171@t*) '() (list (car G3170@pat*) (G316e@f (cdr G3170@pat*) (cdr G3171@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G3170@pat*)) (car G3171@t*)))))))) G316e@f) G3162@pat* G316c@t*)))) (G2e08@generate-temporaries G3163@expr*)))) ((letrec ((G3174@f (lambda (G3176@pat*) (if (null? G3176@pat*) '() (call-with-values (lambda () (G2d2d@convert-pattern (car G3176@pat*) '())) (lambda (G317a@G3178 G317b@G3179) ((lambda (G317e@idn* G317f@pat) (append G317e@idn* (G3174@f (cdr G3176@pat*)))) G317b@G3179 G317a@G3178))))))) G3174@f) G3162@pat*))) G3160@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G315e@t))) (G2d2f@syntax-dispatch G315e@t '(_ #(each (any any)) any . each-any)))) G315c@e))) (set! G2ce9@invalid-fmls-error (lambda (G3182@stx G3183@fmls) ((lambda (G3186@t) ((lambda (G3188@ls/false) (if G3188@ls/false (apply (lambda (G318a@id* G318b@last) ((letrec ((G318e@f (lambda (G3190@id*) (if (null? G3190@id*) (values) (if (not (G2b3e@id? (car G3190@id*))) (G2e1a@syntax-violation '#f '"not an identifier" G3182@stx (car G3190@id*)) (begin (G318e@f (cdr G3190@id*)) (if (G2b4c@bound-id-member? (car G3190@id*) (cdr G3190@id*)) (G2e1a@syntax-violation '#f '"duplicate binding" G3182@stx (car G3190@id*)) (void)))))))) G318e@f) (if (G2b3e@id? G318b@last) (cons G318b@last G318a@id*) (if (G2b34@syntax-null? G318b@last) G318a@id* (G2e1a@syntax-violation '#f '"not an identifier" G3182@stx G318b@last))))) G3188@ls/false) ((lambda (G3192@t) ((lambda (G3194@ls/false) (if G3194@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"malformed binding form" G3182@stx G3183@fmls)) G3194@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3192@t))) (G2d2f@syntax-dispatch G3192@t '_))) G3186@t))) (G2d2f@syntax-dispatch G3186@t '#(each+ any () any)))) G3183@fmls))) (set! G2ceb@let-macro (lambda (G3196@stx) ((lambda (G3198@t) ((lambda (G319a@ls/false) (if G319a@ls/false (apply (lambda (G319c@lhs* G319d@rhs* G319e@b G319f@b*) (if (G2b48@valid-bound-ids? G319c@lhs*) (G2ce5@bless (cons (cons 'lambda (cons G319c@lhs* (cons G319e@b G319f@b*))) G319d@rhs*)) (G2ce9@invalid-fmls-error G3196@stx G319c@lhs*))) G319a@ls/false) ((lambda (G31a4@t) ((lambda (G31a6@ls/false) (if (and G31a6@ls/false (apply (lambda (G31a8@f G31a9@lhs* G31aa@rhs* G31ab@b G31ac@b*) (G2b3e@id? G31a8@f)) G31a6@ls/false)) (apply (lambda (G31b2@f G31b3@lhs* G31b4@rhs* G31b5@b G31b6@b*) (if (G2b48@valid-bound-ids? G31b3@lhs*) (G2ce5@bless (cons (list 'letrec (list (list G31b2@f (cons 'lambda (cons G31b3@lhs* (cons G31b5@b G31b6@b*))))) G31b2@f) G31b4@rhs*)) (G2ce9@invalid-fmls-error G3196@stx G31b3@lhs*))) G31a6@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G31a4@t))) (G2d2f@syntax-dispatch G31a4@t '(_ any #(each (any any)) any . each-any)))) G3198@t))) (G2d2f@syntax-dispatch G3198@t '(_ #(each (any any)) any . each-any)))) G3196@stx))) (set! G2ced@let-values-macro (lambda (G31bc@stx) ((lambda (G31bf@rename G31c1@rename*) (begin (set! G31bf@rename (lambda (G3221@x G3222@old* G3223@new*) (begin (if (not (G2b3e@id? G3221@x)) (G2e1a@syntax-violation '#f '"not an indentifier" G31bc@stx G3221@x) (void)) (if (G2b4c@bound-id-member? G3221@x G3222@old*) (G2e1a@syntax-violation '#f '"duplicate binding" G31bc@stx G3221@x) (void)) ((lambda (G3227@y) (values G3227@y (cons G3221@x G3222@old*) (cons G3227@y G3223@new*))) (gensym (G2e20@syntax->datum G3221@x)))))) (set! G31c1@rename* (lambda (G320f@x* G3210@old* G3211@new*) (if (null? G320f@x*) (values '() G3210@old* G3211@new*) (call-with-values (lambda () (G31bf@rename (car G320f@x*) G3210@old* G3211@new*)) (lambda (G3215@x G3216@old* G3217@new*) (call-with-values (lambda () (G31c1@rename* (cdr G320f@x*) G3216@old* G3217@new*)) (lambda (G321b@x* G321c@old* G321d@new*) (values (cons G3215@x G321b@x*) G321c@old* G321d@new*)))))))) ((lambda (G31c2@t) ((lambda (G31c4@ls/false) (if G31c4@ls/false (apply (lambda (G31c6@b G31c7@b*) (cons* (G2ce5@bless 'let) '() G31c6@b G31c7@b*)) G31c4@ls/false) ((lambda (G31ca@t) ((lambda (G31cc@ls/false) (if G31cc@ls/false (apply (lambda (G31ce@lhs* G31cf@rhs* G31d0@b G31d1@b*) (G2ce5@bless ((letrec ((G31d6@f (lambda (G31d8@lhs* G31d9@rhs* G31da@old* G31db@new*) (if (null? G31d8@lhs*) (cons 'let (cons (map list G31da@old* G31db@new*) (cons G31d0@b G31d1@b*))) ((lambda (G31e0@t) ((lambda (G31e2@ls/false) (if G31e2@ls/false (apply (lambda (G31e4@x*) (call-with-values (lambda () (G31c1@rename* G31e4@x* G31da@old* G31db@new*)) (lambda (G31e9@G31e6 G31ea@G31e7 G31eb@G31e8) ((lambda (G31ef@new* G31f0@old* G31f1@y*) (list 'call-with-values (list 'lambda '() (car G31d9@rhs*)) (list 'lambda G31f1@y* (G31d6@f (cdr G31d8@lhs*) (cdr G31d9@rhs*) G31f0@old* G31ef@new*)))) G31eb@G31e8 G31ea@G31e7 G31e9@G31e6)))) G31e2@ls/false) ((lambda (G31f5@t) ((lambda (G31f7@ls/false) (if G31f7@ls/false (apply (lambda (G31f9@x* G31fa@x) (call-with-values (lambda () (G31bf@rename G31fa@x G31da@old* G31db@new*)) (lambda (G31fd@y G31fe@old* G31ff@new*) (call-with-values (lambda () (G31c1@rename* G31f9@x* G31fe@old* G31ff@new*)) (lambda (G3203@y* G3204@old* G3205@new*) (list 'call-with-values (list 'lambda '() (car G31d9@rhs*)) (list 'lambda (append G3203@y* G31fd@y) (G31d6@f (cdr G31d8@lhs*) (cdr G31d9@rhs*) G3204@old* G3205@new*)))))))) G31f7@ls/false) ((lambda (G3209@t) ((lambda (G320b@ls/false) (if G320b@ls/false (apply (lambda (G320d@others) (G2e1a@syntax-violation '#f '"malformed bindings" G31bc@stx G320d@others)) G320b@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3209@t))) (G2d2f@syntax-dispatch G3209@t 'any))) G31f5@t))) (G2d2f@syntax-dispatch G31f5@t '#(each+ any () any)))) G31e0@t))) (G2d2f@syntax-dispatch G31e0@t 'each-any))) (car G31d8@lhs*)))))) G31d6@f) G31ce@lhs* G31cf@rhs* '() '()))) G31cc@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G31ca@t))) (G2d2f@syntax-dispatch G31ca@t '(_ #(each (any any)) any . each-any)))) G31c2@t))) (G2d2f@syntax-dispatch G31c2@t '(_ () any . each-any)))) G31bc@stx))) '#f '#f))) (set! G2cef@let*-values-macro (lambda (G3229@stx) ((lambda (G322c@check) (begin (set! G322c@check (lambda (G325b@x*) (if (not (null? G325b@x*)) ((lambda (G325d@x) (begin (if (not (G2b3e@id? G325d@x)) (G2e1a@syntax-violation '#f '"not an identifier" G3229@stx G325d@x) (void)) (G322c@check (cdr G325b@x*)) (if (G2b4c@bound-id-member? G325d@x (cdr G325b@x*)) (G2e1a@syntax-violation '#f '"duplicate identifier" G3229@stx G325d@x) (void)))) (car G325b@x*)) (void)))) ((lambda (G322d@t) ((lambda (G322f@ls/false) (if G322f@ls/false (apply (lambda (G3231@b G3232@b*) (cons* (G2ce5@bless 'let) '() G3231@b G3232@b*)) G322f@ls/false) ((lambda (G3235@t) ((lambda (G3237@ls/false) (if G3237@ls/false (apply (lambda (G3239@lhs* G323a@rhs* G323b@b G323c@b*) (G2ce5@bless ((letrec ((G3241@f (lambda (G3243@lhs* G3244@rhs*) (if (null? G3243@lhs*) (cons 'begin (cons G323b@b G323c@b*)) ((lambda (G3247@t) ((lambda (G3249@ls/false) (if G3249@ls/false (apply (lambda (G324b@x*) (begin (G322c@check G324b@x*) (list 'call-with-values (list 'lambda '() (car G3244@rhs*)) (list 'lambda G324b@x* (G3241@f (cdr G3243@lhs*) (cdr G3244@rhs*)))))) G3249@ls/false) ((lambda (G324d@t) ((lambda (G324f@ls/false) (if G324f@ls/false (apply (lambda (G3251@x* G3252@x) (begin (G322c@check (cons G3252@x G3251@x*)) (list 'call-with-values (list 'lambda '() (car G3244@rhs*)) (list 'lambda (append G3251@x* G3252@x) (G3241@f (cdr G3243@lhs*) (cdr G3244@rhs*)))))) G324f@ls/false) ((lambda (G3255@t) ((lambda (G3257@ls/false) (if G3257@ls/false (apply (lambda (G3259@others) (G2e1a@syntax-violation '#f '"malformed bindings" G3229@stx G3259@others)) G3257@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3255@t))) (G2d2f@syntax-dispatch G3255@t 'any))) G324d@t))) (G2d2f@syntax-dispatch G324d@t '#(each+ any () any)))) G3247@t))) (G2d2f@syntax-dispatch G3247@t 'each-any))) (car G3243@lhs*)))))) G3241@f) G3239@lhs* G323a@rhs*))) G3237@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3235@t))) (G2d2f@syntax-dispatch G3235@t '(_ #(each (any any)) any . each-any)))) G322d@t))) (G2d2f@syntax-dispatch G322d@t '(_ () any . each-any)))) G3229@stx))) '#f))) (set! G2cf1@trace-lambda-macro (lambda (G325f@stx) ((lambda (G3261@t) ((lambda (G3263@ls/false) (if G3263@ls/false (apply (lambda (G3265@who G3266@fmls G3267@b G3268@b*) (if (G2b48@valid-bound-ids? G3266@fmls) (G2ce5@bless (list 'make-traced-procedure (list 'quote G3265@who) (cons 'lambda (cons G3266@fmls (cons G3267@b G3268@b*))))) (G2ce9@invalid-fmls-error G325f@stx G3266@fmls))) G3263@ls/false) ((lambda (G326d@t) ((lambda (G326f@ls/false) (if G326f@ls/false (apply (lambda (G3271@who G3272@fmls G3273@last G3274@b G3275@b*) (if (G2b48@valid-bound-ids? (cons G3273@last G3272@fmls)) (G2ce5@bless (list 'make-traced-procedure (list 'quote G3271@who) (cons 'lambda (cons (append G3272@fmls G3273@last) (cons G3274@b G3275@b*))))) (G2ce9@invalid-fmls-error G325f@stx (append G3272@fmls G3273@last)))) G326f@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G326d@t))) (G2d2f@syntax-dispatch G326d@t '(_ any #(each+ any () any) any . each-any)))) G3261@t))) (G2d2f@syntax-dispatch G3261@t '(_ any each-any any . each-any)))) G325f@stx))) (set! G2cf3@trace-define-macro (lambda (G327b@stx) ((lambda (G327d@t) ((lambda (G327f@ls/false) (if G327f@ls/false (apply (lambda (G3281@who G3282@fmls G3283@b G3284@b*) (if (G2b48@valid-bound-ids? G3282@fmls) (G2ce5@bless (list 'define G3281@who (list 'make-traced-procedure (list 'quote G3281@who) (cons 'lambda (cons G3282@fmls (cons G3283@b G3284@b*)))))) (G2ce9@invalid-fmls-error G327b@stx G3282@fmls))) G327f@ls/false) ((lambda (G3289@t) ((lambda (G328b@ls/false) (if G328b@ls/false (apply (lambda (G328d@who G328e@fmls G328f@last G3290@b G3291@b*) (if (G2b48@valid-bound-ids? (cons G328f@last G328e@fmls)) (G2ce5@bless (list 'define G328d@who (list 'make-traced-procedure (list 'quote G328d@who) (cons 'lambda (cons (append G328e@fmls G328f@last) (cons G3290@b G3291@b*)))))) (G2ce9@invalid-fmls-error G327b@stx (append G328e@fmls G328f@last)))) G328b@ls/false) ((lambda (G3297@t) ((lambda (G3299@ls/false) (if G3299@ls/false (apply (lambda (G329b@who G329c@expr) (if (G2b3e@id? G329b@who) (G2ce5@bless (list 'define G329b@who (list 'let (list (list 'v G329c@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G329b@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G2e1a@syntax-violation '#f '"invalid name" G327b@stx))) G3299@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3297@t))) (G2d2f@syntax-dispatch G3297@t '(_ any any)))) G3289@t))) (G2d2f@syntax-dispatch G3289@t '(_ (any . #(each+ any () any)) any . each-any)))) G327d@t))) (G2d2f@syntax-dispatch G327d@t '(_ (any . each-any) any . each-any)))) G327b@stx))) (set! G2cf5@trace-define-syntax-macro (lambda (G329f@stx) ((lambda (G32a1@t) ((lambda (G32a3@ls/false) (if G32a3@ls/false (apply (lambda (G32a5@who G32a6@expr) (if (G2b3e@id? G32a5@who) (G2ce5@bless (list 'define-syntax G32a5@who (list 'make-traced-macro (list 'quote G32a5@who) G32a6@expr))) (G2e1a@syntax-violation '#f '"invalid name" G329f@stx))) G32a3@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G32a1@t))) (G2d2f@syntax-dispatch G32a1@t '(_ any any)))) G329f@stx))) (set! G2cf7@trace-let/rec-syntax (lambda (G32a9@who) (lambda (G32ab@stx) ((lambda (G32ad@t) ((lambda (G32af@ls/false) (if G32af@ls/false (apply (lambda (G32b1@lhs* G32b2@rhs* G32b3@b G32b4@b*) (if (G2b48@valid-bound-ids? G32b1@lhs*) ((lambda (G32b9@rhs*) (G2ce5@bless (cons G32a9@who (cons (map list G32b1@lhs* G32b9@rhs*) (cons G32b3@b G32b4@b*))))) (map (lambda (G32bb@lhs G32bc@rhs) (list 'make-traced-macro (list 'quote G32bb@lhs) G32bc@rhs)) G32b1@lhs* G32b2@rhs*)) (G2ce9@invalid-fmls-error G32ab@stx G32b1@lhs*))) G32af@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G32ad@t))) (G2d2f@syntax-dispatch G32ad@t '(_ #(each (any any)) any . each-any)))) G32ab@stx)))) (set! G2cf9@trace-let-syntax-macro (G2cf7@trace-let/rec-syntax 'let-syntax)) (set! G2cfb@trace-letrec-syntax-macro (G2cf7@trace-let/rec-syntax 'letrec-syntax)) (set! G2cfd@guard-macro (lambda (G32bf@x) ((lambda (G32c2@gen-clauses) (begin (set! G32c2@gen-clauses (lambda (G32d9@con G32da@outerk G32db@clause*) ((lambda (G32e0@f G32e2@f*) (begin (set! G32e0@f (lambda (G3315@x G3316@k) ((lambda (G3319@t) ((lambda (G331b@ls/false) (if G331b@ls/false (apply (lambda (G331d@e G331e@p) ((lambda (G3321@t) (list 'let (list (list G3321@t G331d@e)) (list 'if G3321@t (list G331e@p G3321@t) G3316@k))) (gensym))) G331b@ls/false) ((lambda (G3323@t) ((lambda (G3325@ls/false) (if G3325@ls/false (apply (lambda (G3327@e) ((lambda (G3329@t) (list 'let (list (list G3329@t G3327@e)) (list 'if G3329@t G3329@t G3316@k))) (gensym))) G3325@ls/false) ((lambda (G332b@t) ((lambda (G332d@ls/false) (if G332d@ls/false (apply (lambda (G332f@e G3330@v G3331@v*) (list 'if G332f@e (cons 'begin (cons G3330@v G3331@v*)) G3316@k)) G332d@ls/false) ((lambda (G3335@t) ((lambda (G3337@ls/false) (if G3337@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"invalid guard clause" G3315@x)) G3337@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3335@t))) (G2d2f@syntax-dispatch G3335@t '_))) G332b@t))) (G2d2f@syntax-dispatch G332b@t '(any any . each-any)))) G3323@t))) (G2d2f@syntax-dispatch G3323@t '(any)))) G3319@t))) (G2d2f@syntax-dispatch G3319@t '(any #(scheme-id =>) any)))) G3315@x))) (set! G32e2@f* (lambda (G32ed@x*) ((lambda (G32ef@t) ((lambda (G32f1@ls/false) (if G32f1@ls/false (apply (lambda () ((lambda (G32f3@g) (values (list G32f3@g (list 'lambda '() (list 'raise-continuable G32d9@con))) G32f3@g)) (gensym))) G32f1@ls/false) ((lambda (G32f5@t) ((lambda (G32f7@ls/false) (if G32f7@ls/false (apply (lambda (G32f9@e G32fa@e*) (values (cons 'begin (cons G32f9@e G32fa@e*)) '#f)) G32f7@ls/false) ((lambda (G32fd@t) ((lambda (G32ff@ls/false) (if G32ff@ls/false (apply (lambda (G3301@cls G3302@cls*) (call-with-values (lambda () (G32e2@f* G3302@cls*)) (lambda (G3307@G3305 G3308@G3306) ((lambda (G330b@g G330c@e) (values (G32e0@f G3301@cls G330c@e) G330b@g)) G3308@G3306 G3307@G3305)))) G32ff@ls/false) ((lambda (G330f@t) ((lambda (G3311@ls/false) (if G3311@ls/false (apply (lambda (G3313@others) (G2e1a@syntax-violation '#f '"invalid guard clause" G3313@others)) G3311@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G330f@t))) (G2d2f@syntax-dispatch G330f@t 'any))) G32fd@t))) (G2d2f@syntax-dispatch G32fd@t '(any . any)))) G32f5@t))) (G2d2f@syntax-dispatch G32f5@t '((#(scheme-id else) any . each-any))))) G32ef@t))) (G2d2f@syntax-dispatch G32ef@t '()))) G32ed@x*))) (call-with-values (lambda () (G32e2@f* G32db@clause*)) (lambda (G32e5@G32e3 G32e6@G32e4) ((lambda (G32e9@raisek G32ea@code) (if G32e9@raisek (list (list 'call/cc (list 'lambda (list G32e9@raisek) (list G32da@outerk (list 'lambda '() G32ea@code))))) (list G32da@outerk (list 'lambda '() G32ea@code)))) G32e6@G32e4 G32e5@G32e3))))) '#f '#f))) ((lambda (G32c3@t) ((lambda (G32c5@ls/false) (if (and G32c5@ls/false (apply (lambda (G32c7@con G32c8@clause* G32c9@b G32ca@b*) (G2b3e@id? G32c7@con)) G32c5@ls/false)) (apply (lambda (G32cf@con G32d0@clause* G32d1@b G32d2@b*) ((lambda (G32d7@outerk) (G2ce5@bless (list (list 'call/cc (list 'lambda (list G32d7@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G32cf@con) (G32c2@gen-clauses G32cf@con G32d7@outerk G32d0@clause*)) (cons 'lambda (cons '() (cons G32d1@b G32d2@b*)))))))))) (gensym))) G32c5@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G32c3@t))) (G2d2f@syntax-dispatch G32c3@t '(_ (any . each-any) any . each-any)))) G32bf@x))) '#f))) (set! G2cff@define-enumeration-macro (lambda (G3339@stx) ((lambda (G333c@set? G333e@remove-dups) (begin (set! G333c@set? (lambda (G3355@x) (or (null? G3355@x) (and (not (memq (car G3355@x) (cdr G3355@x))) (G333c@set? (cdr G3355@x)))))) (set! G333e@remove-dups (lambda (G3353@ls) (if (null? G3353@ls) '() (cons (car G3353@ls) (G333e@remove-dups (remq (car G3353@ls) (cdr G3353@ls))))))) ((lambda (G333f@t) ((lambda (G3341@ls/false) (if (and G3341@ls/false (apply (lambda (G3343@name G3344@id* G3345@maker) (and (G2b3e@id? G3343@name) (G2b3e@id? G3345@maker) (for-all G2b3e@id? G3344@id*))) G3341@ls/false)) (apply (lambda (G3349@name G334a@id* G334b@maker) ((lambda (G334f@name* G3350@mk) (G2ce5@bless (list 'begin (list 'define G3350@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G334f@name*)))) (list 'define-syntax G3349@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G334f@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3349@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G334b@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G334b@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G334f@name*)) (cons 'syntax-violation (cons (list 'quote G334b@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3350@mk '('(n* ...)))))))))))) (G333e@remove-dups (G2e20@syntax->datum G334a@id*)) (gensym))) G3341@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G333f@t))) (G2d2f@syntax-dispatch G333f@t '(_ any each-any any)))) G3339@stx))) '#f '#f))) (set! G2d01@time-macro (lambda (G3357@stx) ((lambda (G3359@t) ((lambda (G335b@ls/false) (if G335b@ls/false (apply (lambda (G335d@expr) ((lambda (G335f@str) (G2ce5@bless (list 'time-it G335f@str (list 'lambda '() G335d@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3363@G3361 G3364@G3362) ((lambda (G3367@e G3368@p) (begin (write (G2e20@syntax->datum G335d@expr) G3368@p) (G3367@e))) G3364@G3362 G3363@G3361))))) G335b@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3359@t))) (G2d2f@syntax-dispatch G3359@t '(_ any)))) G3357@stx))) (set! G2d03@delay-macro (lambda (G336b@stx) ((lambda (G336d@t) ((lambda (G336f@ls/false) (if G336f@ls/false (apply (lambda (G3371@expr) (G2ce5@bless (list 'make-promise (list 'lambda '() G3371@expr)))) G336f@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G336d@t))) (G2d2f@syntax-dispatch G336d@t '(_ any)))) G336b@stx))) (set! G2d05@assert-macro (lambda (G3373@stx) ((lambda (G3375@t) ((lambda (G3377@ls/false) (if G3377@ls/false (apply (lambda (G3379@expr) ((lambda (G337b@pos) (G2ce5@bless (list 'unless G3379@expr (list 'assertion-error (list 'quote G3379@expr) (list 'quote G337b@pos))))) (or (G2e12@expression-position G3373@stx) (G2e12@expression-position G3379@expr)))) G3377@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3375@t))) (G2d2f@syntax-dispatch G3375@t '(_ any)))) G3373@stx))) (set! G2d07@endianness-macro (lambda (G337d@stx) ((lambda (G337f@t) ((lambda (G3381@ls/false) (if G3381@ls/false (apply (lambda (G3383@e) ((lambda (G3385@t) (if (memv G3385@t '(little)) (G2ce5@bless ''little) (if (memv G3385@t '(big)) (G2ce5@bless ''big) (G2e1a@syntax-violation '#f '"endianness must be big or little" G337d@stx)))) (G2e20@syntax->datum G3383@e))) G3381@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G337f@t))) (G2d2f@syntax-dispatch G337f@t '(_ any)))) G337d@stx))) (set! G2d09@identifier-syntax-macro (lambda (G3387@stx) ((lambda (G3389@t) ((lambda (G338b@ls/false) (if G338b@ls/false (apply (lambda (G338d@expr) (G2ce5@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G338d@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G338d@expr) '((syntax (e* ...)))))))))) G338b@ls/false) ((lambda (G338f@t) ((lambda (G3391@ls/false) (if (and G3391@ls/false (apply (lambda (G3393@id1 G3394@expr1 G3395@id2 G3396@expr2 G3397@expr3) (and (G2b3e@id? G3393@id1) (G2b3e@id? G3395@id2) (G2b3e@id? G3396@expr2))) G3391@ls/false)) (apply (lambda (G339d@id1 G339e@expr1 G339f@id2 G33a0@expr2 G33a1@expr3) (G2ce5@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G339e@expr1)) (list (list 'set! 'id G33a0@expr2) (list 'syntax G33a1@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G339e@expr1 '(e* ...))))))))) G3391@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G338f@t))) (G2d2f@syntax-dispatch G338f@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G3389@t))) (G2d2f@syntax-dispatch G3389@t '(_ any)))) G3387@stx))) (set! G2d0b@do-macro (lambda (G33a7@stx) ((lambda (G33aa@bind) (begin (set! G33aa@bind (lambda (G33c1@x) ((lambda (G33c3@t) ((lambda (G33c5@ls/false) (if G33c5@ls/false (apply (lambda (G33c7@x G33c8@init) (list G33c7@x G33c8@init G33c7@x)) G33c5@ls/false) ((lambda (G33cb@t) ((lambda (G33cd@ls/false) (if G33cd@ls/false (apply (lambda (G33cf@x G33d0@init G33d1@step) (list G33cf@x G33d0@init G33d1@step)) G33cd@ls/false) ((lambda (G33d5@t) ((lambda (G33d7@ls/false) (if G33d7@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"invalid binding" G33a7@stx)) G33d7@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G33d5@t))) (G2d2f@syntax-dispatch G33d5@t '_))) G33cb@t))) (G2d2f@syntax-dispatch G33cb@t '(any any any)))) G33c3@t))) (G2d2f@syntax-dispatch G33c3@t '(any any)))) G33c1@x))) ((lambda (G33ab@t) ((lambda (G33ad@ls/false) (if G33ad@ls/false (apply (lambda (G33af@binding* G33b0@test G33b1@expr* G33b2@command*) ((lambda (G33b7@t) ((lambda (G33b9@ls/false) (if G33b9@ls/false (apply (lambda (G33bb@x* G33bc@init* G33bd@step*) (if (G2b48@valid-bound-ids? G33bb@x*) (G2ce5@bless (list 'letrec (list (list 'loop (list 'lambda G33bb@x* (list 'if G33b0@test (cons 'begin (cons '(if #f #f) G33b1@expr*)) (cons 'begin (append G33b2@command* (list (cons 'loop G33bd@step*)))))))) (cons 'loop G33bc@init*))) (G2e1a@syntax-violation '#f '"invalid bindings" G33a7@stx))) G33b9@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G33b7@t))) (G2d2f@syntax-dispatch G33b7@t '#(each (any any any))))) (map G33aa@bind G33af@binding*))) G33ad@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G33ab@t))) (G2d2f@syntax-dispatch G33ab@t '(_ each-any (any . each-any) . each-any)))) G33a7@stx))) '#f))) (set! G2d0d@let*-macro (lambda (G33d9@stx) ((lambda (G33db@t) ((lambda (G33dd@ls/false) (if (and G33dd@ls/false (apply (lambda (G33df@lhs* G33e0@rhs* G33e1@b G33e2@b*) (for-all G2b3e@id? G33df@lhs*)) G33dd@ls/false)) (apply (lambda (G33e7@lhs* G33e8@rhs* G33e9@b G33ea@b*) (G2ce5@bless ((letrec ((G33ef@f (lambda (G33f1@x*) (if (null? G33f1@x*) (cons 'let (cons '() (cons G33e9@b G33ea@b*))) (list 'let (list (car G33f1@x*)) (G33ef@f (cdr G33f1@x*))))))) G33ef@f) (map list G33e7@lhs* G33e8@rhs*)))) G33dd@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G33db@t))) (G2d2f@syntax-dispatch G33db@t '(_ #(each (any any)) any . each-any)))) G33d9@stx))) (set! G2d0f@or-macro (lambda (G33f3@stx) ((lambda (G33f5@t) ((lambda (G33f7@ls/false) (if G33f7@ls/false (apply (lambda () '#f) G33f7@ls/false) ((lambda (G33f9@t) ((lambda (G33fb@ls/false) (if G33fb@ls/false (apply (lambda (G33fd@e G33fe@e*) (G2ce5@bless ((letrec ((G3401@f (lambda (G3403@e G3404@e*) (if (null? G3404@e*) (list 'begin '#f G3403@e) (list 'let (list (list 't G3403@e)) (list 'if 't 't (G3401@f (car G3404@e*) (cdr G3404@e*)))))))) G3401@f) G33fd@e G33fe@e*))) G33fb@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G33f9@t))) (G2d2f@syntax-dispatch G33f9@t '(_ any . each-any)))) G33f5@t))) (G2d2f@syntax-dispatch G33f5@t '(_)))) G33f3@stx))) (set! G2d11@and-macro (lambda (G3407@stx) ((lambda (G3409@t) ((lambda (G340b@ls/false) (if G340b@ls/false (apply (lambda () '#t) G340b@ls/false) ((lambda (G340d@t) ((lambda (G340f@ls/false) (if G340f@ls/false (apply (lambda (G3411@e G3412@e*) (G2ce5@bless ((letrec ((G3415@f (lambda (G3417@e G3418@e*) (if (null? G3418@e*) (list 'begin '#f G3417@e) (cons 'if (cons G3417@e (cons (G3415@f (car G3418@e*) (cdr G3418@e*)) '(#f)))))))) G3415@f) G3411@e G3412@e*))) G340f@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G340d@t))) (G2d2f@syntax-dispatch G340d@t '(_ any . each-any)))) G3409@t))) (G2d2f@syntax-dispatch G3409@t '(_)))) G3407@stx))) (set! G2d13@cond-macro (lambda (G341b@stx) ((lambda (G341d@t) ((lambda (G341f@ls/false) (if G341f@ls/false (apply (lambda (G3421@cls G3422@cls*) (G2ce5@bless ((letrec ((G3425@f (lambda (G3427@cls G3428@cls*) (if (null? G3428@cls*) ((lambda (G342b@t) ((lambda (G342d@ls/false) (if G342d@ls/false (apply (lambda (G342f@e G3430@e*) (cons 'begin (cons G342f@e G3430@e*))) G342d@ls/false) ((lambda (G3433@t) ((lambda (G3435@ls/false) (if G3435@ls/false (apply (lambda (G3437@e G3438@p) (list 'let (list (list 't G3437@e)) (list 'if 't (cons G3438@p '(t))))) G3435@ls/false) ((lambda (G343b@t) ((lambda (G343d@ls/false) (if G343d@ls/false (apply (lambda (G343f@e) (cons 'or (cons G343f@e '((if #f #f))))) G343d@ls/false) ((lambda (G3441@t) ((lambda (G3443@ls/false) (if G3443@ls/false (apply (lambda (G3445@e G3446@e*) (list 'if G3445@e (cons 'begin G3446@e*))) G3443@ls/false) ((lambda (G3449@t) ((lambda (G344b@ls/false) (if G344b@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"invalid last clause" G341b@stx)) G344b@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3449@t))) (G2d2f@syntax-dispatch G3449@t '_))) G3441@t))) (G2d2f@syntax-dispatch G3441@t '(any . each-any)))) G343b@t))) (G2d2f@syntax-dispatch G343b@t '(any)))) G3433@t))) (G2d2f@syntax-dispatch G3433@t '(any #(scheme-id =>) any)))) G342b@t))) (G2d2f@syntax-dispatch G342b@t '(#(scheme-id else) any . each-any)))) G3427@cls) ((lambda (G344d@t) ((lambda (G344f@ls/false) (if G344f@ls/false (apply (lambda (G3451@e G3452@e*) (G2e1a@syntax-violation '#f '"incorrect position of keyword else" G341b@stx)) G344f@ls/false) ((lambda (G3455@t) ((lambda (G3457@ls/false) (if G3457@ls/false (apply (lambda (G3459@e G345a@p) (list 'let (list (list 't G3459@e)) (list 'if 't (cons G345a@p '(t)) (G3425@f (car G3428@cls*) (cdr G3428@cls*))))) G3457@ls/false) ((lambda (G345d@t) ((lambda (G345f@ls/false) (if G345f@ls/false (apply (lambda (G3461@e) (list 'or G3461@e (G3425@f (car G3428@cls*) (cdr G3428@cls*)))) G345f@ls/false) ((lambda (G3463@t) ((lambda (G3465@ls/false) (if G3465@ls/false (apply (lambda (G3467@e G3468@e*) (list 'if G3467@e (cons 'begin G3468@e*) (G3425@f (car G3428@cls*) (cdr G3428@cls*)))) G3465@ls/false) ((lambda (G346b@t) ((lambda (G346d@ls/false) (if G346d@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"invalid last clause" G341b@stx)) G346d@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G346b@t))) (G2d2f@syntax-dispatch G346b@t '_))) G3463@t))) (G2d2f@syntax-dispatch G3463@t '(any . each-any)))) G345d@t))) (G2d2f@syntax-dispatch G345d@t '(any)))) G3455@t))) (G2d2f@syntax-dispatch G3455@t '(any #(scheme-id =>) any)))) G344d@t))) (G2d2f@syntax-dispatch G344d@t '(#(scheme-id else) any . each-any)))) G3427@cls))))) G3425@f) G3421@cls G3422@cls*))) G341f@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G341d@t))) (G2d2f@syntax-dispatch G341d@t '(_ any . each-any)))) G341b@stx))) (set! G2d15@do-include (lambda (G346f@stx G3470@id G3471@filename) ((lambda (G3475@filename) (begin (if (not (and (string? G3475@filename) (G2b3e@id? G3470@id))) (G2e1a@syntax-violation '#f '"invalid syntax" G346f@stx) (void)) (cons (G2ce5@bless 'begin) (with-input-from-file G3475@filename (lambda () ((letrec ((G3477@f (lambda (G3479@ls) ((lambda (G347b@x) (if (eof-object? G347b@x) (reverse G3479@ls) (G3477@f (cons (G2b1c@datum->stx G3470@id G347b@x) G3479@ls)))) (G26e5@G2606@read-annotated))))) G3477@f) '())))))) (G2b54@stx->datum G3471@filename)))) (set! G2d17@include-macro (lambda (G347d@e) ((lambda (G347f@t) ((lambda (G3481@ls/false) (if G3481@ls/false (apply (lambda (G3483@id G3484@filename) (G2d15@do-include G347d@e G3483@id G3484@filename)) G3481@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G347f@t))) (G2d2f@syntax-dispatch G347f@t '(any any)))) G347d@e))) (set! G2d19@include-into-macro (lambda (G3487@e) ((lambda (G3489@t) ((lambda (G348b@ls/false) (if G348b@ls/false (apply (lambda (G348d@id G348e@filename) (G2d15@do-include G3487@e G348d@id G348e@filename)) G348b@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3489@t))) (G2d2f@syntax-dispatch G3489@t '(_ any any)))) G3487@e))) (set! G2d1b@syntax-rules-macro (lambda (G3491@e) ((lambda (G3493@t) ((lambda (G3495@ls/false) (if G3495@ls/false (apply (lambda (G3497@lits G3498@pat* G3499@tmp*) (begin (G2d35@verify-literals G3497@lits G3491@e) (G2ce5@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3497@lits (map (lambda (G349d@pat G349e@tmp) ((lambda (G34a1@t) ((lambda (G34a3@ls/false) (if G34a3@ls/false (apply (lambda (G34a5@rest) (list (cons 'g G34a5@rest) (list 'syntax G349e@tmp))) G34a3@ls/false) ((lambda (G34a7@t) ((lambda (G34a9@ls/false) (if G34a9@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"invalid syntax-rules pattern" G3491@e G349d@pat)) G34a9@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G34a7@t))) (G2d2f@syntax-dispatch G34a7@t '_))) G34a1@t))) (G2d2f@syntax-dispatch G34a1@t '(_ . any)))) G349d@pat)) G3498@pat* G3499@tmp*)))))))) G3495@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3493@t))) (G2d2f@syntax-dispatch G3493@t '(_ each-any . #(each (any any)))))) G3491@e))) (set! G2d1d@quasiquote-macro ((lambda () ((lambda (G34ac@datum G34c8@quasicons* G34ca@quasicons G34cc@quasiappend G34ce@quasivector G34d0@vquasi G34d2@quasi) (begin (set! G34ac@datum (lambda (G35ad@x) (list (G2cb9@scheme-stx 'quote) (G2b26@mkstx G35ad@x '() '() '())))) (set! G34c8@quasicons* (lambda (G35a5@x G35a6@y) ((letrec ((G35a9@f (lambda (G35ab@x) (if (null? G35ab@x) G35a6@y (G34ca@quasicons (car G35ab@x) (G35a9@f (cdr G35ab@x))))))) G35a9@f) G35a5@x))) (set! G34ca@quasicons (lambda (G357f@x G3580@y) ((lambda (G3583@t) ((lambda (G3585@ls/false) (if G3585@ls/false (apply (lambda (G3587@dy) ((lambda (G3589@t) ((lambda (G358b@ls/false) (if G358b@ls/false (apply (lambda (G358d@dx) (list (G2cb9@scheme-stx 'quote) (cons G358d@dx G3587@dy))) G358b@ls/false) ((lambda (G358f@t) ((lambda (G3591@ls/false) (if G3591@ls/false (apply (lambda () ((lambda (G3593@t) ((lambda (G3595@ls/false) (if G3595@ls/false (apply (lambda () (list (G2cb9@scheme-stx 'list) G357f@x)) G3595@ls/false) ((lambda (G3597@t) ((lambda (G3599@ls/false) (if G3599@ls/false (apply (lambda () (list (G2cb9@scheme-stx 'cons) G357f@x G3580@y)) G3599@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3597@t))) (G2d2f@syntax-dispatch G3597@t '_))) G3593@t))) (G2d2f@syntax-dispatch G3593@t '()))) G3587@dy)) G3591@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G358f@t))) (G2d2f@syntax-dispatch G358f@t '_))) G3589@t))) (G2d2f@syntax-dispatch G3589@t '(#(scheme-id quote) any)))) G357f@x)) G3585@ls/false) ((lambda (G359b@t) ((lambda (G359d@ls/false) (if G359d@ls/false (apply (lambda (G359f@stuff) (cons* (G2cb9@scheme-stx 'list) G357f@x G359f@stuff)) G359d@ls/false) ((lambda (G35a1@t) ((lambda (G35a3@ls/false) (if G35a3@ls/false (apply (lambda () (list (G2cb9@scheme-stx 'cons) G357f@x G3580@y)) G35a3@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G35a1@t))) (G2d2f@syntax-dispatch G35a1@t '_))) G359b@t))) (G2d2f@syntax-dispatch G359b@t '(#(scheme-id list) . each-any)))) G3583@t))) (G2d2f@syntax-dispatch G3583@t '(#(scheme-id quote) any)))) G3580@y))) (set! G34cc@quasiappend (lambda (G3565@x G3566@y) ((lambda (G3569@ls) (if (null? G3569@ls) (list (G2cb9@scheme-stx 'quote) '()) (if (null? (cdr G3569@ls)) (car G3569@ls) (cons* (G2cb9@scheme-stx 'append) G3569@ls)))) ((letrec ((G356b@f (lambda (G356d@x) (if (null? G356d@x) ((lambda (G356f@t) ((lambda (G3571@ls/false) (if G3571@ls/false (apply (lambda () '()) G3571@ls/false) ((lambda (G3573@t) ((lambda (G3575@ls/false) (if G3575@ls/false (apply (lambda () (list G3566@y)) G3575@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3573@t))) (G2d2f@syntax-dispatch G3573@t '_))) G356f@t))) (G2d2f@syntax-dispatch G356f@t '(#(scheme-id quote) ())))) G3566@y) ((lambda (G3577@t) ((lambda (G3579@ls/false) (if G3579@ls/false (apply (lambda () (G356b@f (cdr G356d@x))) G3579@ls/false) ((lambda (G357b@t) ((lambda (G357d@ls/false) (if G357d@ls/false (apply (lambda () (cons (car G356d@x) (G356b@f (cdr G356d@x)))) G357d@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G357b@t))) (G2d2f@syntax-dispatch G357b@t '_))) G3577@t))) (G2d2f@syntax-dispatch G3577@t '(#(scheme-id quote) ())))) (car G356d@x)))))) G356b@f) G3565@x)))) (set! G34ce@quasivector (lambda (G3533@x) ((lambda (G3535@pat-x) ((lambda (G3537@t) ((lambda (G3539@ls/false) (if G3539@ls/false (apply (lambda (G353b@x*) (list (G2cb9@scheme-stx 'quote) (list->vector G353b@x*))) G3539@ls/false) ((lambda (G353d@t) ((lambda (G353f@ls/false) (if G353f@ls/false (apply (lambda () ((letrec ((G3541@f (lambda (G3543@x G3544@k) ((lambda (G3547@t) ((lambda (G3549@ls/false) (if G3549@ls/false (apply (lambda (G354b@x*) (G3544@k (map (lambda (G354d@x) (list (G2cb9@scheme-stx 'quote) G354d@x)) G354b@x*))) G3549@ls/false) ((lambda (G354f@t) ((lambda (G3551@ls/false) (if G3551@ls/false (apply (lambda (G3553@x*) (G3544@k G3553@x*)) G3551@ls/false) ((lambda (G3555@t) ((lambda (G3557@ls/false) (if G3557@ls/false (apply (lambda (G3559@x G355a@y) (G3541@f G355a@y (lambda (G355d@ls) (G3544@k (cons G3559@x G355d@ls))))) G3557@ls/false) ((lambda (G355f@t) ((lambda (G3561@ls/false) (if G3561@ls/false (apply (lambda () (list (G2cb9@scheme-stx 'list->vector) G3535@pat-x)) G3561@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G355f@t))) (G2d2f@syntax-dispatch G355f@t '_))) G3555@t))) (G2d2f@syntax-dispatch G3555@t '(#(scheme-id cons) any any)))) G354f@t))) (G2d2f@syntax-dispatch G354f@t '(#(scheme-id list) . each-any)))) G3547@t))) (G2d2f@syntax-dispatch G3547@t '(#(scheme-id quote) each-any)))) G3543@x)))) G3541@f) G3533@x (lambda (G3563@ls) (cons* (G2cb9@scheme-stx 'vector) G3563@ls)))) G353f@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G353d@t))) (G2d2f@syntax-dispatch G353d@t '_))) G3537@t))) (G2d2f@syntax-dispatch G3537@t '(#(scheme-id quote) each-any)))) G3535@pat-x)) G3533@x))) (set! G34d0@vquasi (lambda (G3511@p G3512@lev) ((lambda (G3515@t) ((lambda (G3517@ls/false) (if G3517@ls/false (apply (lambda (G3519@p G351a@q) ((lambda (G351d@t) ((lambda (G351f@ls/false) (if G351f@ls/false (apply (lambda (G3521@p) (if (= G3512@lev '0) (G34c8@quasicons* G3521@p (G34d0@vquasi G351a@q G3512@lev)) (G34ca@quasicons (G34ca@quasicons (G34ac@datum 'unquote) (G34d2@quasi G3521@p (- G3512@lev '1))) (G34d0@vquasi G351a@q G3512@lev)))) G351f@ls/false) ((lambda (G3523@t) ((lambda (G3525@ls/false) (if G3525@ls/false (apply (lambda (G3527@p) (if (= G3512@lev '0) (G34cc@quasiappend G3527@p (G34d0@vquasi G351a@q G3512@lev)) (G34ca@quasicons (G34ca@quasicons (G34ac@datum 'unquote-splicing) (G34d2@quasi G3527@p (- G3512@lev '1))) (G34d0@vquasi G351a@q G3512@lev)))) G3525@ls/false) ((lambda (G3529@t) ((lambda (G352b@ls/false) (if G352b@ls/false (apply (lambda (G352d@p) (G34ca@quasicons (G34d2@quasi G352d@p G3512@lev) (G34d0@vquasi G351a@q G3512@lev))) G352b@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3529@t))) (G2d2f@syntax-dispatch G3529@t 'any))) G3523@t))) (G2d2f@syntax-dispatch G3523@t '(#(scheme-id unquote-splicing) . each-any)))) G351d@t))) (G2d2f@syntax-dispatch G351d@t '(#(scheme-id unquote) . each-any)))) G3519@p)) G3517@ls/false) ((lambda (G352f@t) ((lambda (G3531@ls/false) (if G3531@ls/false (apply (lambda () (list (G2cb9@scheme-stx 'quote) '())) G3531@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G352f@t))) (G2d2f@syntax-dispatch G352f@t '()))) G3515@t))) (G2d2f@syntax-dispatch G3515@t '(any . any)))) G3511@p))) (set! G34d2@quasi (lambda (G34db@p G34dc@lev) ((lambda (G34df@t) ((lambda (G34e1@ls/false) (if G34e1@ls/false (apply (lambda (G34e3@p) (if (= G34dc@lev '0) G34e3@p (G34ca@quasicons (G34ac@datum 'unquote) (G34d2@quasi (list G34e3@p) (- G34dc@lev '1))))) G34e1@ls/false) ((lambda (G34e5@t) ((lambda (G34e7@ls/false) (if G34e7@ls/false (apply (lambda (G34e9@p G34ea@q) (if (= G34dc@lev '0) (G34c8@quasicons* G34e9@p (G34d2@quasi G34ea@q G34dc@lev)) (G34ca@quasicons (G34ca@quasicons (G34ac@datum 'unquote) (G34d2@quasi G34e9@p (- G34dc@lev '1))) (G34d2@quasi G34ea@q G34dc@lev)))) G34e7@ls/false) ((lambda (G34ed@t) ((lambda (G34ef@ls/false) (if G34ef@ls/false (apply (lambda (G34f1@p G34f2@q) (if (= G34dc@lev '0) (G34cc@quasiappend G34f1@p (G34d2@quasi G34f2@q G34dc@lev)) (G34ca@quasicons (G34ca@quasicons (G34ac@datum 'unquote-splicing) (G34d2@quasi G34f1@p (- G34dc@lev '1))) (G34d2@quasi G34f2@q G34dc@lev)))) G34ef@ls/false) ((lambda (G34f5@t) ((lambda (G34f7@ls/false) (if G34f7@ls/false (apply (lambda (G34f9@p) (G34ca@quasicons (G34ac@datum 'quasiquote) (G34d2@quasi (list G34f9@p) (+ G34dc@lev '1)))) G34f7@ls/false) ((lambda (G34fb@t) ((lambda (G34fd@ls/false) (if G34fd@ls/false (apply (lambda (G34ff@p G3500@q) (G34ca@quasicons (G34d2@quasi G34ff@p G34dc@lev) (G34d2@quasi G3500@q G34dc@lev))) G34fd@ls/false) ((lambda (G3503@t) ((lambda (G3505@ls/false) (if (and G3505@ls/false (apply (lambda (G3507@x) (not (G2b06@stx? G3507@x))) G3505@ls/false)) (apply (lambda (G3509@x) (G34ce@quasivector (G34d0@vquasi G3509@x G34dc@lev))) G3505@ls/false) ((lambda (G350b@t) ((lambda (G350d@ls/false) (if G350d@ls/false (apply (lambda (G350f@p) (list (G2cb9@scheme-stx 'quote) G350f@p)) G350d@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G350b@t))) (G2d2f@syntax-dispatch G350b@t 'any))) G3503@t))) (G2d2f@syntax-dispatch G3503@t '#(vector each-any)))) G34fb@t))) (G2d2f@syntax-dispatch G34fb@t '(any . any)))) G34f5@t))) (G2d2f@syntax-dispatch G34f5@t '(#(scheme-id quasiquote) any)))) G34ed@t))) (G2d2f@syntax-dispatch G34ed@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G34e5@t))) (G2d2f@syntax-dispatch G34e5@t '((#(scheme-id unquote) . each-any) . any)))) G34df@t))) (G2d2f@syntax-dispatch G34df@t '(#(scheme-id unquote) any)))) G34db@p))) (lambda (G34d3@x) ((lambda (G34d5@t) ((lambda (G34d7@ls/false) (if G34d7@ls/false (apply (lambda (G34d9@e) (G34d2@quasi G34d9@e '0)) G34d7@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G34d5@t))) (G2d2f@syntax-dispatch G34d5@t '(_ any)))) G34d3@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d1f@quasisyntax-macro ((lambda () ((lambda (G35b0@quasi) (begin (set! G35b0@quasi (lambda (G35c8@p G35c9@lev) ((lambda (G35cc@t) ((lambda (G35ce@ls/false) (if G35ce@ls/false (apply (lambda (G35d0@p) (if (= G35c9@lev '0) ((lambda (G35d2@g) (values (list G35d2@g) (list G35d0@p) G35d2@g)) (gensym)) (call-with-values (lambda () (G35b0@quasi G35d0@p (- G35c9@lev '1))) (lambda (G35d7@G35d4 G35d8@G35d5 G35d9@G35d6) ((lambda (G35dd@p G35de@rhs* G35df@lhs*) (values G35df@lhs* G35de@rhs* (list 'unsyntax G35dd@p))) G35d9@G35d6 G35d8@G35d5 G35d7@G35d4))))) G35ce@ls/false) ((lambda (G35e3@t) ((lambda (G35e5@ls/false) (if (and G35e5@ls/false (apply (lambda () (= G35c9@lev '0)) G35e5@ls/false)) (apply (lambda () (G2e1a@syntax-violation '#f '"incorrect use of unsyntax" G35c8@p)) G35e5@ls/false) ((lambda (G35e7@t) ((lambda (G35e9@ls/false) (if G35e9@ls/false (apply (lambda (G35eb@p* G35ec@q) (call-with-values (lambda () (G35b0@quasi G35ec@q G35c9@lev)) (lambda (G35f2@G35ef G35f3@G35f0 G35f4@G35f1) ((lambda (G35f8@q G35f9@rhs* G35fa@lhs*) (if (= G35c9@lev '0) ((lambda (G35fe@g*) (values (append G35fe@g* G35fa@lhs*) (append G35eb@p* G35f9@rhs*) (append G35fe@g* G35f8@q))) (map (lambda (G3600@x) (gensym)) G35eb@p*)) (call-with-values (lambda () (G35b0@quasi G35eb@p* (- G35c9@lev '1))) (lambda (G3605@G3602 G3606@G3603 G3607@G3604) ((lambda (G360b@p* G360c@rhs2* G360d@lhs2*) (values (append G360d@lhs2* G35fa@lhs*) (append G360c@rhs2* G35f9@rhs*) (cons (cons 'unsyntax G360b@p*) G35f8@q))) G3607@G3604 G3606@G3603 G3605@G3602))))) G35f4@G35f1 G35f3@G35f0 G35f2@G35ef)))) G35e9@ls/false) ((lambda (G3611@t) ((lambda (G3613@ls/false) (if G3613@ls/false (apply (lambda (G3615@p* G3616@q) (call-with-values (lambda () (G35b0@quasi G3616@q G35c9@lev)) (lambda (G361c@G3619 G361d@G361a G361e@G361b) ((lambda (G3622@q G3623@rhs* G3624@lhs*) (if (= G35c9@lev '0) ((lambda (G3628@g*) (values (append (map (lambda (G362a@g) (cons G362a@g '(...))) G3628@g*) G3624@lhs*) (append G3615@p* G3623@rhs*) (append (apply append (map (lambda (G362c@g) (cons G362c@g '(...))) G3628@g*)) G3622@q))) (map (lambda (G362e@x) (gensym)) G3615@p*)) (call-with-values (lambda () (G35b0@quasi G3615@p* (- G35c9@lev '1))) (lambda (G3633@G3630 G3634@G3631 G3635@G3632) ((lambda (G3639@p* G363a@rhs2* G363b@lhs2*) (values (append G363b@lhs2* G3624@lhs*) (append G363a@rhs2* G3623@rhs*) (cons (cons 'unsyntax-splicing G3639@p*) G3622@q))) G3635@G3632 G3634@G3631 G3633@G3630))))) G361e@G361b G361d@G361a G361c@G3619)))) G3613@ls/false) ((lambda (G363f@t) ((lambda (G3641@ls/false) (if (and G3641@ls/false (apply (lambda () (= G35c9@lev '0)) G3641@ls/false)) (apply (lambda () (G2e1a@syntax-violation '#f '"incorrect use of unsyntax-splicing" G35c8@p)) G3641@ls/false) ((lambda (G3643@t) ((lambda (G3645@ls/false) (if G3645@ls/false (apply (lambda (G3647@p) (call-with-values (lambda () (G35b0@quasi G3647@p (+ G35c9@lev '1))) (lambda (G364c@G3649 G364d@G364a G364e@G364b) ((lambda (G3652@p G3653@rhs* G3654@lhs*) (values G3654@lhs* G3653@rhs* (list 'quasisyntax G3652@p))) G364e@G364b G364d@G364a G364c@G3649)))) G3645@ls/false) ((lambda (G3658@t) ((lambda (G365a@ls/false) (if G365a@ls/false (apply (lambda (G365c@p G365d@q) (call-with-values (lambda () (G35b0@quasi G365c@p G35c9@lev)) (lambda (G3666@G3660 G3667@G3661 G3668@G3662) (call-with-values (lambda () (G35b0@quasi G365d@q G35c9@lev)) (lambda (G366c@G3663 G366d@G3664 G366e@G3665) ((lambda (G3672@q G3673@rhs2* G3674@lhs2* G3675@p G3676@rhs* G3677@lhs*) (values (append G3674@lhs2* G3677@lhs*) (append G3673@rhs2* G3676@rhs*) (cons G3675@p G3672@q))) G366e@G3665 G366d@G3664 G366c@G3663 G3668@G3662 G3667@G3661 G3666@G3660)))))) G365a@ls/false) ((lambda (G367e@t) ((lambda (G3680@ls/false) (if G3680@ls/false (apply (lambda (G3682@x*) (call-with-values (lambda () (G35b0@quasi G3682@x* G35c9@lev)) (lambda (G3687@G3684 G3688@G3685 G3689@G3686) ((lambda (G368d@x* G368e@rhs* G368f@lhs*) (values G368f@lhs* G368e@rhs* (list->vector G368d@x*))) G3689@G3686 G3688@G3685 G3687@G3684)))) G3680@ls/false) ((lambda (G3693@t) ((lambda (G3695@ls/false) (if G3695@ls/false (apply (lambda () (values '() '() G35c8@p)) G3695@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3693@t))) (G2d2f@syntax-dispatch G3693@t '_))) G367e@t))) (G2d2f@syntax-dispatch G367e@t '#(vector each-any)))) G3658@t))) (G2d2f@syntax-dispatch G3658@t '(any . any)))) G3643@t))) (G2d2f@syntax-dispatch G3643@t '(#(scheme-id quasisyntax) any)))) G363f@t))) (G2d2f@syntax-dispatch G363f@t '#(scheme-id unsyntax-splicing)))) G3611@t))) (G2d2f@syntax-dispatch G3611@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G35e7@t))) (G2d2f@syntax-dispatch G35e7@t '((#(scheme-id unsyntax) . each-any) . any)))) G35e3@t))) (G2d2f@syntax-dispatch G35e3@t '#(scheme-id unsyntax)))) G35cc@t))) (G2d2f@syntax-dispatch G35cc@t '(#(scheme-id unsyntax) any)))) G35c8@p))) (lambda (G35b1@x) ((lambda (G35b3@t) ((lambda (G35b5@ls/false) (if G35b5@ls/false (apply (lambda (G35b7@e) (call-with-values (lambda () (G35b0@quasi G35b7@e '0)) (lambda (G35bc@G35b9 G35bd@G35ba G35be@G35bb) ((lambda (G35c2@v G35c3@rhs* G35c4@lhs*) (G2ce5@bless (list 'syntax-case (cons 'list G35c3@rhs*) '() (list G35c4@lhs* (list 'syntax G35c2@v))))) G35be@G35bb G35bd@G35ba G35bc@G35b9)))) G35b5@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G35b3@t))) (G2d2f@syntax-dispatch G35b3@t '(_ any)))) G35b1@x)))) '#f)))) (set! G2d21@define-struct-macro (lambda (G3697@stx) (G2e1a@syntax-violation '#f '"define-struct not supported" G3697@stx))) (set! G2d23@define-record-type-macro (lambda (G3699@x) ((lambda (G369c@id G369e@get-record-name G36a0@get-record-constructor-name G36a2@get-record-predicate-name G36a4@get-clause G36a6@foo-rtd-code G36a8@parent-rtd-code G36aa@parent-rcd-code G36ac@foo-rcd-code G36ae@get-protocol-code G36b0@get-fields G36b2@get-mutator-indices G36b4@get-mutators G36b6@get-accessors G36b8@enumerate G36ba@do-define-record G36bc@verify-clauses) (begin (set! G369c@id (lambda (G388f@ctxt . G3891@str*) (G2e1e@datum->syntax G388f@ctxt (string->symbol (apply string-append (map (lambda (G3893@x) (if (symbol? G3893@x) (symbol->string G3893@x) (if (string? G3893@x) G3893@x (assertion-violation 'define-record-type '"BUG")))) G3891@str*)))))) (set! G369e@get-record-name (lambda (G387d@spec) ((lambda (G387f@t) ((lambda (G3881@ls/false) (if G3881@ls/false (apply (lambda (G3883@foo G3884@make-foo G3885@foo?) G3883@foo) G3881@ls/false) ((lambda (G3889@t) ((lambda (G388b@ls/false) (if G388b@ls/false (apply (lambda (G388d@foo) G388d@foo) G388b@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3889@t))) (G2d2f@syntax-dispatch G3889@t 'any))) G387f@t))) (G2d2f@syntax-dispatch G387f@t '(any any any)))) G387d@spec))) (set! G36a0@get-record-constructor-name (lambda (G3869@spec) ((lambda (G386b@t) ((lambda (G386d@ls/false) (if G386d@ls/false (apply (lambda (G386f@foo G3870@make-foo G3871@foo?) G3870@make-foo) G386d@ls/false) ((lambda (G3875@t) ((lambda (G3877@ls/false) (if (and G3877@ls/false (apply (lambda (G3879@foo) (G2b3e@id? G3879@foo)) G3877@ls/false)) (apply (lambda (G387b@foo) (G369c@id G387b@foo '"make-" (G2b54@stx->datum G387b@foo))) G3877@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3875@t))) (G2d2f@syntax-dispatch G3875@t 'any))) G386b@t))) (G2d2f@syntax-dispatch G386b@t '(any any any)))) G3869@spec))) (set! G36a2@get-record-predicate-name (lambda (G3855@spec) ((lambda (G3857@t) ((lambda (G3859@ls/false) (if G3859@ls/false (apply (lambda (G385b@foo G385c@make-foo G385d@foo?) G385d@foo?) G3859@ls/false) ((lambda (G3861@t) ((lambda (G3863@ls/false) (if (and G3863@ls/false (apply (lambda (G3865@foo) (G2b3e@id? G3865@foo)) G3863@ls/false)) (apply (lambda (G3867@foo) (G369c@id G3867@foo (G2b54@stx->datum G3867@foo) '"?")) G3863@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3861@t))) (G2d2f@syntax-dispatch G3861@t 'any))) G3857@t))) (G2d2f@syntax-dispatch G3857@t '(any any any)))) G3855@spec))) (set! G36a4@get-clause (lambda (G3843@id G3844@ls) ((lambda (G3847@t) ((lambda (G3849@ls/false) (if G3849@ls/false (apply (lambda () '#f) G3849@ls/false) ((lambda (G384b@t) ((lambda (G384d@ls/false) (if G384d@ls/false (apply (lambda (G384f@x G3850@rest G3851@ls) (if (G2b46@free-id=? (G2ce5@bless G3843@id) G384f@x) (cons G384f@x G3850@rest) (G36a4@get-clause G3843@id G3851@ls))) G384d@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G384b@t))) (G2d2f@syntax-dispatch G384b@t '((any . any) . any)))) G3847@t))) (G2d2f@syntax-dispatch G3847@t '()))) G3844@ls))) (set! G36a6@foo-rtd-code (lambda (G37f1@name G37f2@clause* G37f3@parent-rtd-code) ((lambda (G37f8@convert-field-spec*) (begin (set! G37f8@convert-field-spec* (lambda (G3829@ls) (list->vector (map (lambda (G382b@x) ((lambda (G382d@t) ((lambda (G382f@ls/false) (if G382f@ls/false (apply (lambda (G3831@name G3832@rest) (list 'mutable G3831@name)) G382f@ls/false) ((lambda (G3835@t) ((lambda (G3837@ls/false) (if G3837@ls/false (apply (lambda (G3839@name G383a@rest) (list 'immutable G3839@name)) G3837@ls/false) ((lambda (G383d@t) ((lambda (G383f@ls/false) (if G383f@ls/false (apply (lambda (G3841@name) (list 'immutable G3841@name)) G383f@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G383d@t))) (G2d2f@syntax-dispatch G383d@t 'any))) G3835@t))) (G2d2f@syntax-dispatch G3835@t '(#(scheme-id immutable) any . any)))) G382d@t))) (G2d2f@syntax-dispatch G382d@t '(#(scheme-id mutable) any . any)))) G382b@x)) G3829@ls)))) ((lambda (G37f9@uid-code G37fa@sealed? G37fb@opaque? G37fc@fields) (G2ce5@bless (list 'make-record-type-descriptor (list 'quote G37f1@name) G37f3@parent-rtd-code G37f9@uid-code G37fa@sealed? G37fb@opaque? G37fc@fields))) ((lambda (G3801@t) ((lambda (G3803@ls/false) (if G3803@ls/false (apply (lambda () (list 'quote (gensym))) G3803@ls/false) ((lambda (G3805@t) ((lambda (G3807@ls/false) (if G3807@ls/false (apply (lambda (G3809@uid) (list 'quote G3809@uid)) G3807@ls/false) ((lambda (G380b@t) ((lambda (G380d@ls/false) (if G380d@ls/false (apply (lambda () '#f) G380d@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G380b@t))) (G2d2f@syntax-dispatch G380b@t '_))) G3805@t))) (G2d2f@syntax-dispatch G3805@t '(_ any)))) G3801@t))) (G2d2f@syntax-dispatch G3801@t '(_)))) (G36a4@get-clause 'nongenerative G37f2@clause*)) ((lambda (G380f@t) ((lambda (G3811@ls/false) (if G3811@ls/false (apply (lambda () '#t) G3811@ls/false) ((lambda (G3813@t) ((lambda (G3815@ls/false) (if G3815@ls/false (apply (lambda () '#f) G3815@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3813@t))) (G2d2f@syntax-dispatch G3813@t '_))) G380f@t))) (G2d2f@syntax-dispatch G380f@t '(_ #(atom #t))))) (G36a4@get-clause 'sealed G37f2@clause*)) ((lambda (G3817@t) ((lambda (G3819@ls/false) (if G3819@ls/false (apply (lambda () '#t) G3819@ls/false) ((lambda (G381b@t) ((lambda (G381d@ls/false) (if G381d@ls/false (apply (lambda () '#f) G381d@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G381b@t))) (G2d2f@syntax-dispatch G381b@t '_))) G3817@t))) (G2d2f@syntax-dispatch G3817@t '(_ #(atom #t))))) (G36a4@get-clause 'opaque G37f2@clause*)) ((lambda (G381f@t) ((lambda (G3821@ls/false) (if G3821@ls/false (apply (lambda (G3823@field-spec*) (list 'quote (G37f8@convert-field-spec* G3823@field-spec*))) G3821@ls/false) ((lambda (G3825@t) ((lambda (G3827@ls/false) (if G3827@ls/false (apply (lambda () ''#()) G3827@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3825@t))) (G2d2f@syntax-dispatch G3825@t '_))) G381f@t))) (G2d2f@syntax-dispatch G381f@t '(_ . each-any)))) (G36a4@get-clause 'fields G37f2@clause*))))) '#f))) (set! G36a8@parent-rtd-code (lambda (G37d9@clause*) ((lambda (G37db@t) ((lambda (G37dd@ls/false) (if G37dd@ls/false (apply (lambda (G37df@name) (list 'record-type-descriptor G37df@name)) G37dd@ls/false) ((lambda (G37e1@t) ((lambda (G37e3@ls/false) (if G37e3@ls/false (apply (lambda () ((lambda (G37e5@t) ((lambda (G37e7@ls/false) (if G37e7@ls/false (apply (lambda (G37e9@rtd G37ea@rcd) G37e9@rtd) G37e7@ls/false) ((lambda (G37ed@t) ((lambda (G37ef@ls/false) (if G37ef@ls/false (apply (lambda () '#f) G37ef@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G37ed@t))) (G2d2f@syntax-dispatch G37ed@t '#(atom #f)))) G37e5@t))) (G2d2f@syntax-dispatch G37e5@t '(_ any any)))) (G36a4@get-clause 'parent-rtd G37d9@clause*))) G37e3@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G37e1@t))) (G2d2f@syntax-dispatch G37e1@t '#(atom #f)))) G37db@t))) (G2d2f@syntax-dispatch G37db@t '(_ any)))) (G36a4@get-clause 'parent G37d9@clause*)))) (set! G36aa@parent-rcd-code (lambda (G37c1@clause*) ((lambda (G37c3@t) ((lambda (G37c5@ls/false) (if G37c5@ls/false (apply (lambda (G37c7@name) (list 'record-constructor-descriptor G37c7@name)) G37c5@ls/false) ((lambda (G37c9@t) ((lambda (G37cb@ls/false) (if G37cb@ls/false (apply (lambda () ((lambda (G37cd@t) ((lambda (G37cf@ls/false) (if G37cf@ls/false (apply (lambda (G37d1@rtd G37d2@rcd) G37d2@rcd) G37cf@ls/false) ((lambda (G37d5@t) ((lambda (G37d7@ls/false) (if G37d7@ls/false (apply (lambda () '#f) G37d7@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G37d5@t))) (G2d2f@syntax-dispatch G37d5@t '#(atom #f)))) G37cd@t))) (G2d2f@syntax-dispatch G37cd@t '(_ any any)))) (G36a4@get-clause 'parent-rtd G37c1@clause*))) G37cb@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G37c9@t))) (G2d2f@syntax-dispatch G37c9@t '#(atom #f)))) G37c3@t))) (G2d2f@syntax-dispatch G37c3@t '(_ any)))) (G36a4@get-clause 'parent G37c1@clause*)))) (set! G36ac@foo-rcd-code (lambda (G37b9@clause* G37ba@foo-rtd G37bb@protocol G37bc@parent-rcd-code) (list 'make-record-constructor-descriptor G37ba@foo-rtd G37bc@parent-rcd-code G37bb@protocol))) (set! G36ae@get-protocol-code (lambda (G37ad@clause*) ((lambda (G37af@t) ((lambda (G37b1@ls/false) (if G37b1@ls/false (apply (lambda (G37b3@expr) G37b3@expr) G37b1@ls/false) ((lambda (G37b5@t) ((lambda (G37b7@ls/false) (if G37b7@ls/false (apply (lambda () '#f) G37b7@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G37b5@t))) (G2d2f@syntax-dispatch G37b5@t '_))) G37af@t))) (G2d2f@syntax-dispatch G37af@t '(_ any)))) (G36a4@get-clause 'protocol G37ad@clause*)))) (set! G36b0@get-fields (lambda (G379b@clause*) ((lambda (G379d@t) ((lambda (G379f@ls/false) (if G379f@ls/false (apply (lambda () '()) G379f@ls/false) ((lambda (G37a1@t) ((lambda (G37a3@ls/false) (if G37a3@ls/false (apply (lambda (G37a5@f*) G37a5@f*) G37a3@ls/false) ((lambda (G37a7@t) ((lambda (G37a9@ls/false) (if G37a9@ls/false (apply (lambda (G37ab@rest) (G36b0@get-fields G37ab@rest)) G37a9@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G37a7@t))) (G2d2f@syntax-dispatch G37a7@t '(_ . any)))) G37a1@t))) (G2d2f@syntax-dispatch G37a1@t '((#(scheme-id fields) . each-any) . _)))) G379d@t))) (G2d2f@syntax-dispatch G379d@t '()))) G379b@clause*))) (set! G36b2@get-mutator-indices (lambda (G3783@fields) ((letrec ((G3785@f (lambda (G3787@fields G3788@i) ((lambda (G378b@t) ((lambda (G378d@ls/false) (if G378d@ls/false (apply (lambda () '()) G378d@ls/false) ((lambda (G378f@t) ((lambda (G3791@ls/false) (if G3791@ls/false (apply (lambda (G3793@rest) (cons G3788@i (G3785@f G3793@rest (+ G3788@i '1)))) G3791@ls/false) ((lambda (G3795@t) ((lambda (G3797@ls/false) (if G3797@ls/false (apply (lambda (G3799@rest) (G3785@f G3799@rest (+ G3788@i '1))) G3797@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3795@t))) (G2d2f@syntax-dispatch G3795@t '(_ . any)))) G378f@t))) (G2d2f@syntax-dispatch G378f@t '((#(scheme-id mutable) . _) . any)))) G378b@t))) (G2d2f@syntax-dispatch G378b@t '()))) G3787@fields)))) G3785@f) G3783@fields '0))) (set! G36b4@get-mutators (lambda (G3759@foo G375a@fields) ((lambda (G375e@gen-name) (begin (set! G375e@gen-name (lambda (G3781@x) (G2e1e@datum->syntax G3759@foo (string->symbol (string-append (symbol->string (G2e20@syntax->datum G3759@foo)) '"-" (symbol->string (G2e20@syntax->datum G3781@x)) '"-set!"))))) ((letrec ((G375f@f (lambda (G3761@fields) ((lambda (G3763@t) ((lambda (G3765@ls/false) (if G3765@ls/false (apply (lambda () '()) G3765@ls/false) ((lambda (G3767@t) ((lambda (G3769@ls/false) (if G3769@ls/false (apply (lambda (G376b@name G376c@accessor G376d@mutator G376e@rest) (cons G376d@mutator (G375f@f G376e@rest))) G3769@ls/false) ((lambda (G3773@t) ((lambda (G3775@ls/false) (if G3775@ls/false (apply (lambda (G3777@name G3778@rest) (cons (G375e@gen-name G3777@name) (G375f@f G3778@rest))) G3775@ls/false) ((lambda (G377b@t) ((lambda (G377d@ls/false) (if G377d@ls/false (apply (lambda (G377f@rest) (G375f@f G377f@rest)) G377d@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G377b@t))) (G2d2f@syntax-dispatch G377b@t '(_ . any)))) G3773@t))) (G2d2f@syntax-dispatch G3773@t '((#(scheme-id mutable) any) . any)))) G3767@t))) (G2d2f@syntax-dispatch G3767@t '((#(scheme-id mutable) any any any) . any)))) G3763@t))) (G2d2f@syntax-dispatch G3763@t '()))) G3761@fields)))) G375f@f) G375a@fields))) '#f))) (set! G36b6@get-accessors (lambda (G3715@foo G3716@fields) ((lambda (G371a@gen-name) (begin (set! G371a@gen-name (lambda (G3757@x) (G2e1e@datum->syntax G3715@foo (string->symbol (string-append (symbol->string (G2e20@syntax->datum G3715@foo)) '"-" (symbol->string (G2e20@syntax->datum G3757@x))))))) (map (lambda (G371b@field) ((lambda (G371d@t) ((lambda (G371f@ls/false) (if (and G371f@ls/false (apply (lambda (G3721@name G3722@accessor G3723@mutator) (G2b3e@id? G3722@accessor)) G371f@ls/false)) (apply (lambda (G3727@name G3728@accessor G3729@mutator) G3728@accessor) G371f@ls/false) ((lambda (G372d@t) ((lambda (G372f@ls/false) (if (and G372f@ls/false (apply (lambda (G3731@name G3732@accessor) (G2b3e@id? G3732@accessor)) G372f@ls/false)) (apply (lambda (G3735@name G3736@accessor) G3736@accessor) G372f@ls/false) ((lambda (G3739@t) ((lambda (G373b@ls/false) (if (and G373b@ls/false (apply (lambda (G373d@name) (G2b3e@id? G373d@name)) G373b@ls/false)) (apply (lambda (G373f@name) (G371a@gen-name G373f@name)) G373b@ls/false) ((lambda (G3741@t) ((lambda (G3743@ls/false) (if (and G3743@ls/false (apply (lambda (G3745@name) (G2b3e@id? G3745@name)) G3743@ls/false)) (apply (lambda (G3747@name) (G371a@gen-name G3747@name)) G3743@ls/false) ((lambda (G3749@t) ((lambda (G374b@ls/false) (if (and G374b@ls/false (apply (lambda (G374d@name) (G2b3e@id? G374d@name)) G374b@ls/false)) (apply (lambda (G374f@name) (G371a@gen-name G374f@name)) G374b@ls/false) ((lambda (G3751@t) ((lambda (G3753@ls/false) (if G3753@ls/false (apply (lambda (G3755@others) (G2e1a@syntax-violation '#f '"invalid field spec" G371b@field)) G3753@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3751@t))) (G2d2f@syntax-dispatch G3751@t 'any))) G3749@t))) (G2d2f@syntax-dispatch G3749@t 'any))) G3741@t))) (G2d2f@syntax-dispatch G3741@t '(#(scheme-id immutable) any)))) G3739@t))) (G2d2f@syntax-dispatch G3739@t '(#(scheme-id mutable) any)))) G372d@t))) (G2d2f@syntax-dispatch G372d@t '(#(scheme-id immutable) any any)))) G371d@t))) (G2d2f@syntax-dispatch G371d@t '(#(scheme-id mutable) any any any)))) G371b@field)) G3716@fields))) '#f))) (set! G36b8@enumerate (lambda (G370d@ls) ((letrec ((G370f@f (lambda (G3711@ls G3712@i) (if (null? G3711@ls) '() (cons G3712@i (G370f@f (cdr G3711@ls) (+ G3712@i '1))))))) G370f@f) G370d@ls '0))) (set! G36ba@do-define-record (lambda (G36e5@namespec G36e6@clause*) ((lambda (G36e9@foo) ((lambda (G36eb@foo-rtd) ((lambda (G36ed@foo-rcd) ((lambda (G36ef@protocol) ((lambda (G36f1@make-foo) ((lambda (G36f3@fields) ((lambda (G36f5@idx*) ((lambda (G36f7@foo-x*) ((lambda (G36f9@set-foo-x!*) ((lambda (G36fb@set-foo-idx*) ((lambda (G36fd@foo?) ((lambda (G36ff@foo-rtd-code) ((lambda (G3701@foo-rcd-code) ((lambda (G3703@protocol-code) ((lambda () (G2ce5@bless (cons 'begin (cons (list 'define G36eb@foo-rtd G36ff@foo-rtd-code) (cons (list 'define G36ef@protocol G3703@protocol-code) (cons (list 'define G36ed@foo-rcd G3701@foo-rcd-code) (cons (list 'define-syntax G36e9@foo (list 'list ''$rtd (list 'syntax G36eb@foo-rtd) (list 'syntax G36ed@foo-rcd))) (cons (list 'define G36fd@foo? (list 'record-predicate G36eb@foo-rtd)) (cons (list 'define G36f1@make-foo (list 'record-constructor G36ed@foo-rcd)) (append (map (lambda (G3705@foo-x G3706@idx) (list 'define G3705@foo-x (list 'record-accessor G36eb@foo-rtd G3706@idx))) G36f7@foo-x* G36f5@idx*) (map (lambda (G3709@set-foo-x! G370a@idx) (list 'define G3709@set-foo-x! (list 'record-mutator G36eb@foo-rtd G370a@idx))) G36f9@set-foo-x!* G36fb@set-foo-idx*))))))))))))) (G36ae@get-protocol-code G36e6@clause*))) (G36ac@foo-rcd-code G36e6@clause* G36eb@foo-rtd G36ef@protocol (G36aa@parent-rcd-code G36e6@clause*)))) (G36a6@foo-rtd-code G36e9@foo G36e6@clause* (G36a8@parent-rtd-code G36e6@clause*)))) (G36a2@get-record-predicate-name G36e5@namespec))) (G36b2@get-mutator-indices G36f3@fields))) (G36b4@get-mutators G36e9@foo G36f3@fields))) (G36b6@get-accessors G36e9@foo G36f3@fields))) (G36b8@enumerate G36f3@fields))) (G36b0@get-fields G36e6@clause*))) (G36a0@get-record-constructor-name G36e5@namespec))) (gensym))) (gensym))) (gensym))) (G369e@get-record-name G36e5@namespec)))) (set! G36bc@verify-clauses (lambda (G36c5@x G36c6@cls*) ((lambda (G36ca@valid-kwds G36cc@free-id-member?) (begin (set! G36ca@valid-kwds (map G2ce5@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G36cc@free-id-member? (lambda (G36e1@x G36e2@ls) (and (pair? G36e2@ls) (or (G2b46@free-id=? G36e1@x (car G36e2@ls)) (G36cc@free-id-member? G36e1@x (cdr G36e2@ls)))))) ((letrec ((G36cd@f (lambda (G36cf@cls* G36d0@seen*) (if (not (null? G36cf@cls*)) ((lambda (G36d3@t) ((lambda (G36d5@ls/false) (if G36d5@ls/false (apply (lambda (G36d7@kwd G36d8@rest) (if (or (not (G2b3e@id? G36d7@kwd)) (not (G36cc@free-id-member? G36d7@kwd G36ca@valid-kwds))) (G2e1a@syntax-violation '#f '"not a valid define-record-type keyword" G36d7@kwd) (if (G2b4c@bound-id-member? G36d7@kwd G36d0@seen*) (G2e1a@syntax-violation '#f '"duplicate use of keyword " G36c5@x G36d7@kwd) (G36cd@f (cdr G36cf@cls*) (cons G36d7@kwd G36d0@seen*))))) G36d5@ls/false) ((lambda (G36db@t) ((lambda (G36dd@ls/false) (if G36dd@ls/false (apply (lambda (G36df@cls) (G2e1a@syntax-violation '#f '"malformed define-record-type clause" G36df@cls)) G36dd@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G36db@t))) (G2d2f@syntax-dispatch G36db@t 'any))) G36d3@t))) (G2d2f@syntax-dispatch G36d3@t '(any . any)))) (car G36cf@cls*)) (void))))) G36cd@f) G36c6@cls* '()))) '#f '#f))) ((lambda (G36bd@t) ((lambda (G36bf@ls/false) (if G36bf@ls/false (apply (lambda (G36c1@namespec G36c2@clause*) (begin (G36bc@verify-clauses G3699@x G36c2@clause*) (G36ba@do-define-record G36c1@namespec G36c2@clause*))) G36bf@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G36bd@t))) (G2d2f@syntax-dispatch G36bd@t '(_ any . each-any)))) G3699@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2d25@define-condition-type-macro (lambda (G3895@x) ((lambda (G3898@mkname) (begin (set! G3898@mkname (lambda (G38c5@name G38c6@suffix) (G2e1e@datum->syntax G38c5@name (string->symbol (string-append (symbol->string (G2e20@syntax->datum G38c5@name)) G38c6@suffix))))) ((lambda (G3899@t) ((lambda (G389b@ls/false) (if (and G389b@ls/false (apply (lambda (G389d@ctxt G389e@name G389f@super G38a0@constructor G38a1@predicate G38a2@field* G38a3@accessor*) (and (G2b3e@id? G389e@name) (G2b3e@id? G389f@super) (G2b3e@id? G38a0@constructor) (G2b3e@id? G38a1@predicate) (for-all G2b3e@id? G38a2@field*) (for-all G2b3e@id? G38a3@accessor*))) G389b@ls/false)) (apply (lambda (G38ab@ctxt G38ac@name G38ad@super G38ae@constructor G38af@predicate G38b0@field* G38b1@accessor*) ((lambda (G38b9@aux-accessor*) (G2ce5@bless (cons 'begin (cons (cons 'define-record-type (cons (list G38ac@name G38ae@constructor (gensym)) (cons (list 'parent G38ad@super) (cons (cons 'fields (map (lambda (G38bb@field G38bc@aux) (list 'immutable G38bb@field G38bc@aux)) G38b0@field* G38b9@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G38af@predicate (list 'condition-predicate (list 'record-type-descriptor G38ac@name))) (map (lambda (G38bf@accessor G38c0@aux) (list 'define G38bf@accessor (list 'condition-accessor (list 'record-type-descriptor G38ac@name) G38c0@aux))) G38b1@accessor* G38b9@aux-accessor*)))))) (map (lambda (G38c3@x) (gensym)) G38b1@accessor*))) G389b@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3899@t))) (G2d2f@syntax-dispatch G3899@t '(any any any any any . #(each (any any)))))) G3895@x))) '#f))) (set! G2d27@incorrect-usage-macro (lambda (G38c9@e) (G2e1a@syntax-violation '#f '"incorrect usage of auxiliary keyword" G38c9@e))) (set! G2d29@parameterize-macro (lambda (G38cb@e) ((lambda (G38cd@t) ((lambda (G38cf@ls/false) (if G38cf@ls/false (apply (lambda (G38d1@b G38d2@b*) (G2ce5@bless (cons 'let (cons '() (cons G38d1@b G38d2@b*))))) G38cf@ls/false) ((lambda (G38d5@t) ((lambda (G38d7@ls/false) (if G38d7@ls/false (apply (lambda (G38d9@olhs* G38da@orhs* G38db@b G38dc@b*) ((lambda (G38e1@lhs* G38e2@rhs*) (G2ce5@bless (cons (list 'lambda (append G38e1@lhs* G38e2@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G38e5@lhs G38e6@rhs) (list 'let (list (list 't (list G38e5@lhs))) (list G38e5@lhs G38e6@rhs) (cons 'set! (cons G38e6@rhs '(t))))) G38e1@lhs* G38e2@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G38db@b G38dc@b*))) '(swap)))))) (append G38d9@olhs* G38da@orhs*)))) (G2e08@generate-temporaries G38d9@olhs*) (G2e08@generate-temporaries G38da@orhs*))) G38d7@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G38d5@t))) (G2d2f@syntax-dispatch G38d5@t '(_ #(each (any any)) any . each-any)))) G38cd@t))) (G2d2f@syntax-dispatch G38cd@t '(_ () any . each-any)))) G38cb@e))) (set! G2d2b@foreign-call-transformer (lambda (G38e9@e G38ea@r G38eb@mr) ((lambda (G38ef@t) ((lambda (G38f1@ls/false) (if G38f1@ls/false (apply (lambda (G38f3@name G38f4@arg*) (cons 'foreign-call (cons (G2d53@chi-expr G38f3@name G38ea@r G38eb@mr) (G2d4f@chi-expr* G38f4@arg* G38ea@r G38eb@mr)))) G38f1@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G38ef@t))) (G2d2f@syntax-dispatch G38ef@t '(_ any . each-any)))) G38e9@e))) (set! G2d2d@convert-pattern (lambda (G38f7@pattern G38f8@keys) ((lambda (G38fc@cvt* G38fe@cvt) (begin (set! G38fc@cvt* (lambda (G398d@p* G398e@n G398f@ids) (if (null? G398d@p*) (values '() G398f@ids) (call-with-values (lambda () (G38fc@cvt* (cdr G398d@p*) G398e@n G398f@ids)) (lambda (G3995@G3993 G3996@G3994) ((lambda (G3999@ids G399a@y) (call-with-values (lambda () (G38fe@cvt (car G398d@p*) G398e@n G3999@ids)) (lambda (G399f@G399d G39a0@G399e) ((lambda (G39a3@ids G39a4@x) (values (cons G39a4@x G399a@y) G39a3@ids)) G39a0@G399e G399f@G399d)))) G3996@G3994 G3995@G3993)))))) (set! G38fe@cvt (lambda (G38ff@p G3900@n G3901@ids) ((lambda (G3905@t) ((lambda (G3907@ls/false) (if (and G3907@ls/false (apply (lambda (G3909@id) (G2b3e@id? G3909@id)) G3907@ls/false)) (apply (lambda (G390b@id) (if (G2b4c@bound-id-member? G38ff@p G38f8@keys) (values (vector 'free-id G38ff@p) G3901@ids) (if (G2b46@free-id=? G38ff@p (G2cb9@scheme-stx '_)) (values '_ G3901@ids) (values 'any (cons (cons G38ff@p G3900@n) G3901@ids))))) G3907@ls/false) ((lambda (G390d@t) ((lambda (G390f@ls/false) (if (and G390f@ls/false (apply (lambda (G3911@p G3912@dots) (G2d31@ellipsis? G3912@dots)) G390f@ls/false)) (apply (lambda (G3915@p G3916@dots) (call-with-values (lambda () (G38fe@cvt G3915@p (+ G3900@n '1) G3901@ids)) (lambda (G391b@G3919 G391c@G391a) ((lambda (G391f@ids G3920@p) (values (if (eq? G3920@p 'any) 'each-any (vector 'each G3920@p)) G391f@ids)) G391c@G391a G391b@G3919)))) G390f@ls/false) ((lambda (G3923@t) ((lambda (G3925@ls/false) (if (and G3925@ls/false (apply (lambda (G3927@x G3928@dots G3929@ys G392a@z) (G2d31@ellipsis? G3928@dots)) G3925@ls/false)) (apply (lambda (G392f@x G3930@dots G3931@ys G3932@z) (call-with-values (lambda () (G38fe@cvt G3932@z G3900@n G3901@ids)) (lambda (G3939@G3937 G393a@G3938) ((lambda (G393d@ids G393e@z) (call-with-values (lambda () (G38fc@cvt* G3931@ys G3900@n G393d@ids)) (lambda (G3943@G3941 G3944@G3942) ((lambda (G3947@ids G3948@ys) (call-with-values (lambda () (G38fe@cvt G392f@x (+ G3900@n '1) G3947@ids)) (lambda (G394d@G394b G394e@G394c) ((lambda (G3951@ids G3952@x) (values (vector 'each+ G3952@x (reverse G3948@ys) G393e@z) G3951@ids)) G394e@G394c G394d@G394b)))) G3944@G3942 G3943@G3941)))) G393a@G3938 G3939@G3937)))) G3925@ls/false) ((lambda (G3955@t) ((lambda (G3957@ls/false) (if G3957@ls/false (apply (lambda (G3959@x G395a@y) (call-with-values (lambda () (G38fe@cvt G395a@y G3900@n G3901@ids)) (lambda (G395f@G395d G3960@G395e) ((lambda (G3963@ids G3964@y) (call-with-values (lambda () (G38fe@cvt G3959@x G3900@n G3963@ids)) (lambda (G3969@G3967 G396a@G3968) ((lambda (G396d@ids G396e@x) (values (cons G396e@x G3964@y) G396d@ids)) G396a@G3968 G3969@G3967)))) G3960@G395e G395f@G395d)))) G3957@ls/false) ((lambda (G3971@t) ((lambda (G3973@ls/false) (if G3973@ls/false (apply (lambda () (values '() G3901@ids)) G3973@ls/false) ((lambda (G3975@t) ((lambda (G3977@ls/false) (if (and G3977@ls/false (apply (lambda (G3979@p) (not (G2b06@stx? G3979@p))) G3977@ls/false)) (apply (lambda (G397b@p) (call-with-values (lambda () (G38fe@cvt G397b@p G3900@n G3901@ids)) (lambda (G397f@G397d G3980@G397e) ((lambda (G3983@ids G3984@p) (values (vector 'vector G3984@p) G3983@ids)) G3980@G397e G397f@G397d)))) G3977@ls/false) ((lambda (G3987@t) ((lambda (G3989@ls/false) (if G3989@ls/false (apply (lambda (G398b@datum) (values (vector 'atom (G2b54@stx->datum G398b@datum)) G3901@ids)) G3989@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3987@t))) (G2d2f@syntax-dispatch G3987@t 'any))) G3975@t))) (G2d2f@syntax-dispatch G3975@t '#(vector each-any)))) G3971@t))) (G2d2f@syntax-dispatch G3971@t '()))) G3955@t))) (G2d2f@syntax-dispatch G3955@t '(any . any)))) G3923@t))) (G2d2f@syntax-dispatch G3923@t '(any any . #(each+ any () any))))) G390d@t))) (G2d2f@syntax-dispatch G390d@t '(any any)))) G3905@t))) (G2d2f@syntax-dispatch G3905@t 'any))) G38ff@p))) (G38fe@cvt G38f7@pattern '0 '()))) '#f '#f))) (set! G2d2f@syntax-dispatch ((lambda () ((lambda (G39a8@stx^ G39aa@match-each G39ac@match-each+ G39ae@match-each-any G39b0@match-empty G39b2@combine G39b4@match* G39b6@match) (begin (set! G39a8@stx^ (lambda (G3a71@e G3a72@m* G3a73@s* G3a74@ae*) (if (and (null? G3a72@m*) (null? G3a73@s*) (null? G3a74@ae*)) G3a71@e (G2b26@mkstx G3a71@e G3a72@m* G3a73@s* G3a74@ae*)))) (set! G39aa@match-each (lambda (G3a54@e G3a55@p G3a56@m* G3a57@s* G3a58@ae*) (if (pair? G3a54@e) ((lambda (G3a5e@first) (and G3a5e@first ((lambda (G3a60@rest) (and G3a60@rest (cons G3a5e@first G3a60@rest))) (G39aa@match-each (cdr G3a54@e) G3a55@p G3a56@m* G3a57@s* G3a58@ae*)))) (G39b6@match (car G3a54@e) G3a55@p G3a56@m* G3a57@s* G3a58@ae* '())) (if (null? G3a54@e) '() (if (G2b06@stx? G3a54@e) (and (not (G2abc@top-marked? G3a56@m*)) (call-with-values (lambda () (G2b24@join-wraps G3a56@m* G3a57@s* G3a58@ae* G3a54@e)) (lambda (G3a65@G3a62 G3a66@G3a63 G3a67@G3a64) ((lambda (G3a6b@ae* G3a6c@s* G3a6d@m*) (G39aa@match-each (G2b0a@stx-expr G3a54@e) G3a55@p G3a6d@m* G3a6c@s* G3a6b@ae*)) G3a67@G3a64 G3a66@G3a63 G3a65@G3a62)))) (if (G26e7@G260a@annotation? G3a54@e) (G39aa@match-each (G26e9@G260e@annotation-expression G3a54@e) G3a55@p G3a56@m* G3a57@s* G3a58@ae*) '#f)))))) (set! G39ac@match-each+ (lambda (G3a1a@e G3a1b@x-pat G3a1c@y-pat G3a1d@z-pat G3a1e@m* G3a1f@s* G3a20@ae* G3a21@r) ((letrec ((G3a2a@f (lambda (G3a2c@e G3a2d@m* G3a2e@s* G3a2f@ae*) (if (pair? G3a2c@e) (call-with-values (lambda () (G3a2a@f (cdr G3a2c@e) G3a2d@m* G3a2e@s* G3a2f@ae*)) (lambda (G3a37@G3a34 G3a38@G3a35 G3a39@G3a36) ((lambda (G3a3d@r G3a3e@y-pat G3a3f@xr*) (if G3a3d@r (if (null? G3a3e@y-pat) ((lambda (G3a43@xr) (if G3a43@xr (values (cons G3a43@xr G3a3f@xr*) G3a3e@y-pat G3a3d@r) (values '#f '#f '#f))) (G39b6@match (car G3a2c@e) G3a1b@x-pat G3a2d@m* G3a2e@s* G3a2f@ae* '())) (values '() (cdr G3a3e@y-pat) (G39b6@match (car G3a2c@e) (car G3a3e@y-pat) G3a2d@m* G3a2e@s* G3a2f@ae* G3a3d@r))) (values '#f '#f '#f))) G3a39@G3a36 G3a38@G3a35 G3a37@G3a34))) (if (G2b06@stx? G3a2c@e) (if (G2abc@top-marked? G3a2d@m*) (values '() G3a1c@y-pat (G39b6@match G3a2c@e G3a1d@z-pat G3a2d@m* G3a2e@s* G3a2f@ae* G3a21@r)) (call-with-values (lambda () (G2b24@join-wraps G3a2d@m* G3a2e@s* G3a2f@ae* G3a2c@e)) (lambda (G3a48@G3a45 G3a49@G3a46 G3a4a@G3a47) ((lambda (G3a4e@ae* G3a4f@s* G3a50@m*) (G3a2a@f (G2b0a@stx-expr G3a2c@e) G3a50@m* G3a4f@s* G3a4e@ae*)) G3a4a@G3a47 G3a49@G3a46 G3a48@G3a45)))) (if (G26e7@G260a@annotation? G3a2c@e) (G3a2a@f (G26e9@G260e@annotation-expression G3a2c@e) G3a2d@m* G3a2e@s* G3a2f@ae*) (values '() G3a1c@y-pat (G39b6@match G3a2c@e G3a1d@z-pat G3a2d@m* G3a2e@s* G3a2f@ae* G3a21@r)))))))) G3a2a@f) G3a1a@e G3a1e@m* G3a1f@s* G3a20@ae*))) (set! G39ae@match-each-any (lambda (G3a01@e G3a02@m* G3a03@s* G3a04@ae*) (if (pair? G3a01@e) ((lambda (G3a09@l) (and G3a09@l (cons (G39a8@stx^ (car G3a01@e) G3a02@m* G3a03@s* G3a04@ae*) G3a09@l))) (G39ae@match-each-any (cdr G3a01@e) G3a02@m* G3a03@s* G3a04@ae*)) (if (null? G3a01@e) '() (if (G2b06@stx? G3a01@e) (and (not (G2abc@top-marked? G3a02@m*)) (call-with-values (lambda () (G2b24@join-wraps G3a02@m* G3a03@s* G3a04@ae* G3a01@e)) (lambda (G3a0e@G3a0b G3a0f@G3a0c G3a10@G3a0d) ((lambda (G3a14@ae* G3a15@s* G3a16@m*) (G39ae@match-each-any (G2b0a@stx-expr G3a01@e) G3a16@m* G3a15@s* G3a14@ae*)) G3a10@G3a0d G3a0f@G3a0c G3a0e@G3a0b)))) (if (G26e7@G260a@annotation? G3a01@e) (G39ae@match-each-any (G26e9@G260e@annotation-expression G3a01@e) G3a02@m* G3a03@s* G3a04@ae*) '#f)))))) (set! G39b0@match-empty (lambda (G39fb@p G39fc@r) (if (null? G39fb@p) G39fc@r (if (eq? G39fb@p '_) G39fc@r (if (eq? G39fb@p 'any) (cons '() G39fc@r) (if (pair? G39fb@p) (G39b0@match-empty (car G39fb@p) (G39b0@match-empty (cdr G39fb@p) G39fc@r)) (if (eq? G39fb@p 'each-any) (cons '() G39fc@r) ((lambda (G39ff@t) (if (memv G39ff@t '(each)) (G39b0@match-empty (vector-ref G39fb@p '1) G39fc@r) (if (memv G39ff@t '(each+)) (G39b0@match-empty (vector-ref G39fb@p '1) (G39b0@match-empty (reverse (vector-ref G39fb@p '2)) (G39b0@match-empty (vector-ref G39fb@p '3) G39fc@r))) (if (memv G39ff@t '(free-id atom)) G39fc@r (if (memv G39ff@t '(scheme-id atom)) G39fc@r (if (memv G39ff@t '(vector)) (G39b0@match-empty (vector-ref G39fb@p '1) G39fc@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G39fb@p))))))) (vector-ref G39fb@p '0))))))))) (set! G39b2@combine (lambda (G39f7@r* G39f8@r) (if (null? (car G39f7@r*)) G39f8@r (cons (map car G39f7@r*) (G39b2@combine (map cdr G39f7@r*) G39f8@r))))) (set! G39b4@match* (lambda (G39d6@e G39d7@p G39d8@m* G39d9@s* G39da@ae* G39db@r) (if (null? G39d7@p) (and (null? G39d6@e) G39db@r) (if (pair? G39d7@p) (and (pair? G39d6@e) (G39b6@match (car G39d6@e) (car G39d7@p) G39d8@m* G39d9@s* G39da@ae* (G39b6@match (cdr G39d6@e) (cdr G39d7@p) G39d8@m* G39d9@s* G39da@ae* G39db@r))) (if (eq? G39d7@p 'each-any) ((lambda (G39e2@l) (and G39e2@l (cons G39e2@l G39db@r))) (G39ae@match-each-any G39d6@e G39d8@m* G39d9@s* G39da@ae*)) ((lambda (G39e4@t) (if (memv G39e4@t '(each)) (if (null? G39d6@e) (G39b0@match-empty (vector-ref G39d7@p '1) G39db@r) ((lambda (G39e6@r*) (and G39e6@r* (G39b2@combine G39e6@r* G39db@r))) (G39aa@match-each G39d6@e (vector-ref G39d7@p '1) G39d8@m* G39d9@s* G39da@ae*))) (if (memv G39e4@t '(free-id)) (and (symbol? G39d6@e) (G2abc@top-marked? G39d8@m*) (G2b46@free-id=? (G39a8@stx^ G39d6@e G39d8@m* G39d9@s* G39da@ae*) (vector-ref G39d7@p '1)) G39db@r) (if (memv G39e4@t '(scheme-id)) (and (symbol? G39d6@e) (G2abc@top-marked? G39d8@m*) (G2b46@free-id=? (G39a8@stx^ G39d6@e G39d8@m* G39d9@s* G39da@ae*) (G2cb9@scheme-stx (vector-ref G39d7@p '1))) G39db@r) (if (memv G39e4@t '(each+)) (call-with-values (lambda () (G39ac@match-each+ G39d6@e (vector-ref G39d7@p '1) (vector-ref G39d7@p '2) (vector-ref G39d7@p '3) G39d8@m* G39d9@s* G39da@ae* G39db@r)) (lambda (G39eb@G39e8 G39ec@G39e9 G39ed@G39ea) ((lambda (G39f1@r G39f2@y-pat G39f3@xr*) (and G39f1@r (null? G39f2@y-pat) (if (null? G39f3@xr*) (G39b0@match-empty (vector-ref G39d7@p '1) G39f1@r) (G39b2@combine G39f3@xr* G39f1@r)))) G39ed@G39ea G39ec@G39e9 G39eb@G39e8))) (if (memv G39e4@t '(atom)) (and (fast-equal? (vector-ref G39d7@p '1) (G2b52@strip G39d6@e G39d8@m*)) G39db@r) (if (memv G39e4@t '(vector)) (and (vector? G39d6@e) (G39b6@match (vector->list G39d6@e) (vector-ref G39d7@p '1) G39d8@m* G39d9@s* G39da@ae* G39db@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G39d7@p)))))))) (vector-ref G39d7@p '0))))))) (set! G39b6@match (lambda (G39bb@e G39bc@p G39bd@m* G39be@s* G39bf@ae* G39c0@r) (if (not G39c0@r) '#f (if (eq? G39bc@p '_) G39c0@r (if (eq? G39bc@p 'any) (cons (G39a8@stx^ G39bb@e G39bd@m* G39be@s* G39bf@ae*) G39c0@r) (if (G2b06@stx? G39bb@e) (and (not (G2abc@top-marked? G39bd@m*)) (call-with-values (lambda () (G2b24@join-wraps G39bd@m* G39be@s* G39bf@ae* G39bb@e)) (lambda (G39ca@G39c7 G39cb@G39c8 G39cc@G39c9) ((lambda (G39d0@ae* G39d1@s* G39d2@m*) (G39b6@match (G2b0a@stx-expr G39bb@e) G39bc@p G39d2@m* G39d1@s* G39d0@ae* G39c0@r)) G39cc@G39c9 G39cb@G39c8 G39ca@G39c7)))) (if (G26e7@G260a@annotation? G39bb@e) (G39b6@match (G26e9@G260e@annotation-expression G39bb@e) G39bc@p G39bd@m* G39be@s* G39bf@ae* G39c0@r) (G39b4@match* G39bb@e G39bc@p G39bd@m* G39be@s* G39bf@ae* G39c0@r)))))))) (lambda (G39b7@e G39b8@p) (G39b6@match G39b7@e G39b8@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d31@ellipsis? (lambda (G3a79@x) (and (G2b3e@id? G3a79@x) (G2b46@free-id=? G3a79@x (G2cb9@scheme-stx '...))))) (set! G2d33@underscore? (lambda (G3a7b@x) (and (G2b3e@id? G3a7b@x) (G2b46@free-id=? G3a7b@x (G2cb9@scheme-stx '_))))) (set! G2d35@verify-literals (lambda (G3a7d@lits G3a7e@expr) (for-each (lambda (G3a81@x) (if (or (not (G2b3e@id? G3a81@x)) (G2d31@ellipsis? G3a81@x) (G2d33@underscore? G3a81@x)) (G2e1a@syntax-violation '#f '"invalid literal" G3a7e@expr G3a81@x) (void))) G3a7d@lits))) (set! G2d37@syntax-case-transformer ((lambda () ((lambda (G3a84@build-dispatch-call G3a86@invalid-ids-error G3a88@gen-clause G3a8a@gen-syntax-case) (begin (set! G3a84@build-dispatch-call (lambda (G3af3@pvars G3af4@expr G3af5@y G3af6@r G3af7@mr) ((lambda (G3afd@ids G3afe@levels) ((lambda (G3b01@labels G3b02@new-vars) ((lambda (G3b05@body) (list '(primitive apply) (G2a9c@G29de@build-lambda '#f G3b02@new-vars G3b05@body) G3af5@y)) (G2d53@chi-expr (G2b2a@add-subst (G2af9@make-full-rib G3afd@ids G3b01@labels) G3af4@expr) (append (map (lambda (G3b07@label G3b08@var G3b09@level) (cons G3b07@label (G2b5e@make-binding 'syntax (cons G3b08@var G3b09@level)))) G3b01@labels G3b02@new-vars (map cdr G3af3@pvars)) G3af6@r) G3af7@mr))) (map G2ac2@gen-label G3afd@ids) (map G2abe@gen-lexical G3afd@ids))) (map car G3af3@pvars) (map cdr G3af3@pvars)))) (set! G3a86@invalid-ids-error (lambda (G3ae7@id* G3ae8@e G3ae9@class) ((letrec ((G3aed@find (lambda (G3aef@id* G3af0@ok*) (if (null? G3aef@id*) (G2e1a@syntax-violation '#f '"invalid syntax" G3ae8@e) (if (G2b3e@id? (car G3aef@id*)) (if (G2b4c@bound-id-member? (car G3aef@id*) G3af0@ok*) (G2e16@syntax-error (car G3aef@id*) '"duplicate " G3ae9@class) (G3aed@find (cdr G3aef@id*) (cons (car G3aef@id*) G3af0@ok*))) (G2e16@syntax-error (car G3aef@id*) '"invalid " G3ae9@class)))))) G3aed@find) G3ae7@id* '()))) (set! G3a88@gen-clause (lambda (G3ac1@x G3ac2@keys G3ac3@clauses G3ac4@r G3ac5@mr G3ac6@pat G3ac7@fender G3ac8@expr) (call-with-values (lambda () (G2d2d@convert-pattern G3ac6@pat G3ac2@keys)) (lambda (G3ad3@G3ad1 G3ad4@G3ad2) ((lambda (G3ad7@pvars G3ad8@p) (if (not (G2b4a@distinct-bound-ids? (map car G3ad7@pvars))) (G3a86@invalid-ids-error (map car G3ad7@pvars) G3ac6@pat '"pattern variable") (if (not (for-all (lambda (G3adb@x) (not (G2d31@ellipsis? (car G3adb@x)))) G3ad7@pvars)) (G2e1a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3ac6@pat) ((lambda (G3add@y) ((lambda (G3adf@test) ((lambda (G3ae1@conseq) ((lambda (G3ae3@altern) (list (G2a9c@G29de@build-lambda '#f (list G3add@y) (list 'if G3adf@test G3ae1@conseq G3ae3@altern)) (list '(primitive syntax-dispatch) G3ac1@x (list 'quote G3ad8@p)))) (G3a8a@gen-syntax-case G3ac1@x G3ac2@keys G3ac3@clauses G3ac4@r G3ac5@mr))) (G3a84@build-dispatch-call G3ad7@pvars G3ac8@expr G3add@y G3ac4@r G3ac5@mr))) (if (eq? G3ac7@fender '#t) G3add@y ((lambda (G3ae5@call) (list 'if G3add@y G3ae5@call (list 'quote '#f))) (G3a84@build-dispatch-call G3ad7@pvars G3ac7@fender G3add@y G3ac4@r G3ac5@mr))))) (G2abe@gen-lexical 'tmp))))) G3ad4@G3ad2 G3ad3@G3ad1))))) (set! G3a8a@gen-syntax-case (lambda (G3a9f@x G3aa0@keys G3aa1@clauses G3aa2@r G3aa3@mr) (if (null? G3aa1@clauses) (list '(primitive syntax-error) G3a9f@x) ((lambda (G3aa9@t) ((lambda (G3aab@ls/false) (if G3aab@ls/false (apply (lambda (G3aad@pat G3aae@expr) (if (and (G2b3e@id? G3aad@pat) (not (G2b4c@bound-id-member? G3aad@pat G3aa0@keys)) (not (G2d31@ellipsis? G3aad@pat))) (if (G2b46@free-id=? G3aad@pat (G2cb9@scheme-stx '_)) (G2d53@chi-expr G3aae@expr G3aa2@r G3aa3@mr) ((lambda (G3ab1@lab G3ab2@lex) ((lambda (G3ab5@body) (list (G2a9c@G29de@build-lambda '#f (list G3ab2@lex) G3ab5@body) G3a9f@x)) (G2d53@chi-expr (G2b2a@add-subst (G2af9@make-full-rib (list G3aad@pat) (list G3ab1@lab)) G3aae@expr) (cons (cons G3ab1@lab (G2b5e@make-binding 'syntax (cons G3ab2@lex '0))) G3aa2@r) G3aa3@mr))) (G2ac2@gen-label G3aad@pat) (G2abe@gen-lexical G3aad@pat))) (G3a88@gen-clause G3a9f@x G3aa0@keys (cdr G3aa1@clauses) G3aa2@r G3aa3@mr G3aad@pat '#t G3aae@expr))) G3aab@ls/false) ((lambda (G3ab7@t) ((lambda (G3ab9@ls/false) (if G3ab9@ls/false (apply (lambda (G3abb@pat G3abc@fender G3abd@expr) (G3a88@gen-clause G3a9f@x G3aa0@keys (cdr G3aa1@clauses) G3aa2@r G3aa3@mr G3abb@pat G3abc@fender G3abd@expr)) G3ab9@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3ab7@t))) (G2d2f@syntax-dispatch G3ab7@t '(any any any)))) G3aa9@t))) (G2d2f@syntax-dispatch G3aa9@t '(any any)))) (car G3aa1@clauses))))) (lambda (G3a8b@e G3a8c@r G3a8d@mr) ((lambda (G3a91@t) ((lambda (G3a93@ls/false) (if G3a93@ls/false (apply (lambda (G3a95@expr G3a96@keys G3a97@clauses) (begin (G2d35@verify-literals G3a96@keys G3a8b@e) ((lambda (G3a9b@x) ((lambda (G3a9d@body) (list (G2a9c@G29de@build-lambda '#f (list G3a9b@x) G3a9d@body) (G2d53@chi-expr G3a95@expr G3a8c@r G3a8d@mr))) (G3a8a@gen-syntax-case G3a9b@x G3a96@keys G3a97@clauses G3a8c@r G3a8d@mr))) (G2abe@gen-lexical 'tmp)))) G3a93@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3a91@t))) (G2d2f@syntax-dispatch G3a91@t '(_ any each-any . each-any)))) G3a8b@e)))) '#f '#f '#f '#f)))) (set! G2d39@ellipsis-map (lambda (G3b0d@proc G3b0e@ls . G3b11@ls*) ((lambda (G3b14@who) (begin (set! G3b14@who '...) (begin (if (not (list? G3b0e@ls)) (assertion-violation G3b14@who '"not a list" G3b0e@ls) (void)) (if (not (null? G3b11@ls*)) ((lambda (G3b15@n) (for-each (lambda (G3b17@x) (begin (if (not (list? G3b17@x)) (assertion-violation G3b14@who '"not a list" G3b17@x) (void)) (if (not (= (length G3b17@x) G3b15@n)) (assertion-violation G3b14@who '"length mismatch" G3b0e@ls G3b17@x) (void)))) G3b11@ls*)) (length G3b0e@ls)) (void)) (apply map G3b0d@proc G3b0e@ls G3b11@ls*)))) '#f))) (set! G2d3b@syntax-transformer ((lambda () ((lambda (G3b1a@gen-syntax G3b1c@gen-ref G3b1e@gen-append G3b20@gen-mappend G3b22@gen-map G3b24@gen-cons G3b26@gen-vector G3b28@regen) (begin (set! G3b1a@gen-syntax (lambda (G3b8d@src G3b8e@e G3b8f@r G3b90@maps G3b91@ellipsis? G3b92@vec?) ((lambda (G3b99@t) ((lambda (G3b9b@ls/false) (if (and G3b9b@ls/false (apply (lambda (G3b9d@dots) (G3b91@ellipsis? G3b9d@dots)) G3b9b@ls/false)) (apply (lambda (G3b9f@dots) (G2e1a@syntax-violation '#f '"misplaced ellipsis in syntax form" G3b8d@src)) G3b9b@ls/false) ((lambda (G3ba1@t) ((lambda (G3ba3@ls/false) (if (and G3ba3@ls/false (apply (lambda (G3ba5@id) (G2b3e@id? G3ba5@id)) G3ba3@ls/false)) (apply (lambda (G3ba7@id) ((lambda (G3ba9@label) ((lambda (G3bab@b) ((lambda () (if (eq? (G2b60@binding-type G3bab@b) 'syntax) (call-with-values (lambda () ((lambda (G3baf@var.lev) (G3b1c@gen-ref G3b8d@src (car G3baf@var.lev) (cdr G3baf@var.lev) G3b90@maps)) (G2b62@binding-value G3bab@b))) (lambda (G3bb1@G3bad G3bb2@G3bae) ((lambda (G3bb5@maps G3bb6@var) (values (list 'ref G3bb6@var) G3bb5@maps)) G3bb2@G3bae G3bb1@G3bad))) (values (list 'quote G3b8e@e) G3b90@maps))))) (G2b5c@label->binding G3ba9@label G3b8f@r))) (G2b58@id->label G3b8e@e))) G3ba3@ls/false) ((lambda (G3bb9@t) ((lambda (G3bbb@ls/false) (if (and G3bbb@ls/false (apply (lambda (G3bbd@dots G3bbe@e) (G3b91@ellipsis? G3bbd@dots)) G3bbb@ls/false)) (apply (lambda (G3bc1@dots G3bc2@e) (if G3b92@vec? (G2e1a@syntax-violation '#f '"misplaced ellipsis in syntax form" G3b8d@src) (G3b1a@gen-syntax G3b8d@src G3bc2@e G3b8f@r G3b90@maps (lambda (G3bc5@x) '#f) '#f))) G3bbb@ls/false) ((lambda (G3bc7@t) ((lambda (G3bc9@ls/false) (if (and G3bc9@ls/false (apply (lambda (G3bcb@x G3bcc@dots G3bcd@y) (G3b91@ellipsis? G3bcc@dots)) G3bc9@ls/false)) (apply (lambda (G3bd1@x G3bd2@dots G3bd3@y) ((letrec ((G3bd7@f (lambda (G3bd9@y G3bda@k) ((lambda (G3bdd@t) ((lambda (G3bdf@ls/false) (if G3bdf@ls/false (apply (lambda () (G3bda@k G3b90@maps)) G3bdf@ls/false) ((lambda (G3be1@t) ((lambda (G3be3@ls/false) (if (and G3be3@ls/false (apply (lambda (G3be5@dots G3be6@y) (G3b91@ellipsis? G3be5@dots)) G3be3@ls/false)) (apply (lambda (G3be9@dots G3bea@y) (G3bd7@f G3bea@y (lambda (G3bed@maps) (call-with-values (lambda () (G3bda@k (cons '() G3bed@maps))) (lambda (G3bf1@G3bef G3bf2@G3bf0) ((lambda (G3bf5@maps G3bf6@x) (if (null? (car G3bf5@maps)) (G2e1a@syntax-violation '#f '"extra ellipsis in syntax form" G3b8d@src) (values (G3b20@gen-mappend G3bf6@x (car G3bf5@maps)) (cdr G3bf5@maps)))) G3bf2@G3bf0 G3bf1@G3bef)))))) G3be3@ls/false) ((lambda (G3bf9@t) ((lambda (G3bfb@ls/false) (if G3bfb@ls/false (apply (lambda () (call-with-values (lambda () (G3b1a@gen-syntax G3b8d@src G3bd9@y G3b8f@r G3b90@maps G3b91@ellipsis? G3b92@vec?)) (lambda (G3bff@G3bfd G3c00@G3bfe) ((lambda (G3c03@maps G3c04@y) (call-with-values (lambda () (G3bda@k G3c03@maps)) (lambda (G3c09@G3c07 G3c0a@G3c08) ((lambda (G3c0d@maps G3c0e@x) (values (G3b1e@gen-append G3c0e@x G3c04@y) G3c0d@maps)) G3c0a@G3c08 G3c09@G3c07)))) G3c00@G3bfe G3bff@G3bfd)))) G3bfb@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3bf9@t))) (G2d2f@syntax-dispatch G3bf9@t '_))) G3be1@t))) (G2d2f@syntax-dispatch G3be1@t '(any . any)))) G3bdd@t))) (G2d2f@syntax-dispatch G3bdd@t '()))) G3bd9@y)))) G3bd7@f) G3bd3@y (lambda (G3c11@maps) (call-with-values (lambda () (G3b1a@gen-syntax G3b8d@src G3bd1@x G3b8f@r (cons '() G3c11@maps) G3b91@ellipsis? '#f)) (lambda (G3c15@G3c13 G3c16@G3c14) ((lambda (G3c19@maps G3c1a@x) (if (null? (car G3c19@maps)) (G2e1a@syntax-violation '#f '"extra ellipsis in syntax form" G3b8d@src) (values (G3b22@gen-map G3c1a@x (car G3c19@maps)) (cdr G3c19@maps)))) G3c16@G3c14 G3c15@G3c13)))))) G3bc9@ls/false) ((lambda (G3c1d@t) ((lambda (G3c1f@ls/false) (if G3c1f@ls/false (apply (lambda (G3c21@x G3c22@y) (call-with-values (lambda () (G3b1a@gen-syntax G3b8d@src G3c21@x G3b8f@r G3b90@maps G3b91@ellipsis? '#f)) (lambda (G3c27@G3c25 G3c28@G3c26) ((lambda (G3c2b@maps G3c2c@xnew) (call-with-values (lambda () (G3b1a@gen-syntax G3b8d@src G3c22@y G3b8f@r G3c2b@maps G3b91@ellipsis? G3b92@vec?)) (lambda (G3c31@G3c2f G3c32@G3c30) ((lambda (G3c35@maps G3c36@ynew) (values (G3b24@gen-cons G3b8e@e G3c21@x G3c22@y G3c2c@xnew G3c36@ynew) G3c35@maps)) G3c32@G3c30 G3c31@G3c2f)))) G3c28@G3c26 G3c27@G3c25)))) G3c1f@ls/false) ((lambda (G3c39@t) ((lambda (G3c3b@ls/false) (if G3c3b@ls/false (apply (lambda (G3c3d@ls) (call-with-values (lambda () (G3b1a@gen-syntax G3b8d@src G3c3d@ls G3b8f@r G3b90@maps G3b91@ellipsis? '#t)) (lambda (G3c41@G3c3f G3c42@G3c40) ((lambda (G3c45@maps G3c46@lsnew) (values (G3b26@gen-vector G3b8e@e G3c3d@ls G3c46@lsnew) G3c45@maps)) G3c42@G3c40 G3c41@G3c3f)))) G3c3b@ls/false) ((lambda (G3c49@t) ((lambda (G3c4b@ls/false) (if G3c4b@ls/false (apply (lambda () (values (list 'quote G3b8e@e) G3b90@maps)) G3c4b@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3c49@t))) (G2d2f@syntax-dispatch G3c49@t '_))) G3c39@t))) (G2d2f@syntax-dispatch G3c39@t '#(vector each-any)))) G3c1d@t))) (G2d2f@syntax-dispatch G3c1d@t '(any . any)))) G3bc7@t))) (G2d2f@syntax-dispatch G3bc7@t '(any any . any)))) G3bb9@t))) (G2d2f@syntax-dispatch G3bb9@t '(any any)))) G3ba1@t))) (G2d2f@syntax-dispatch G3ba1@t 'any))) G3b99@t))) (G2d2f@syntax-dispatch G3b99@t 'any))) G3b8e@e))) (set! G3b1c@gen-ref (lambda (G3b75@src G3b76@var G3b77@level G3b78@maps) (if (= G3b77@level '0) (values G3b76@var G3b78@maps) (if (null? G3b78@maps) (G2e1a@syntax-violation '#f '"missing ellipsis in syntax form" G3b75@src) (call-with-values (lambda () (G3b1c@gen-ref G3b75@src G3b76@var (- G3b77@level '1) (cdr G3b78@maps))) (lambda (G3b7f@G3b7d G3b80@G3b7e) ((lambda (G3b83@outer-maps G3b84@outer-var) ((lambda (G3b87@t) (if G3b87@t ((lambda (G3b89@b) (values (cdr G3b89@b) G3b78@maps)) G3b87@t) ((lambda (G3b8b@inner-var) (values G3b8b@inner-var (cons (cons (cons G3b84@outer-var G3b8b@inner-var) (car G3b78@maps)) G3b83@outer-maps))) (G2abe@gen-lexical 'tmp)))) (assq G3b84@outer-var (car G3b78@maps)))) G3b80@G3b7e G3b7f@G3b7d))))))) (set! G3b1e@gen-append (lambda (G3b71@x G3b72@y) (if (fast-equal? G3b72@y ''()) G3b71@x (list 'append G3b71@x G3b72@y)))) (set! G3b20@gen-mappend (lambda (G3b6d@e G3b6e@map-env) (list 'apply '(primitive append) (G3b22@gen-map G3b6d@e G3b6e@map-env)))) (set! G3b22@gen-map (lambda (G3b5b@e G3b5c@map-env) ((lambda (G3b5f@formals G3b60@actuals) (if (eq? (car G3b5b@e) 'ref) (car G3b60@actuals) (if (for-all (lambda (G3b63@x) (and (eq? (car G3b63@x) 'ref) (memq (cadr G3b63@x) G3b5f@formals))) (cdr G3b5b@e)) ((lambda (G3b65@args) (cons 'map (cons (list 'primitive (car G3b5b@e)) G3b65@args))) (map ((lambda (G3b67@r) (lambda (G3b69@x) (cdr (assq (cadr G3b69@x) G3b67@r)))) (map cons G3b5f@formals G3b60@actuals)) (cdr G3b5b@e))) (cons* 'map (list 'lambda G3b5f@formals G3b5b@e) G3b60@actuals)))) (map cdr G3b5c@map-env) (map (lambda (G3b6b@x) (list 'ref (car G3b6b@x))) G3b5c@map-env)))) (set! G3b24@gen-cons (lambda (G3b4b@e G3b4c@x G3b4d@y G3b4e@xnew G3b4f@ynew) ((lambda (G3b55@t) (if (memv G3b55@t '(quote)) (if (eq? (car G3b4e@xnew) 'quote) ((lambda (G3b57@xnew G3b58@ynew) (if (and (eq? G3b57@xnew G3b4c@x) (eq? G3b58@ynew G3b4d@y)) (list 'quote G3b4b@e) (list 'quote (cons G3b57@xnew G3b58@ynew)))) (cadr G3b4e@xnew) (cadr G3b4f@ynew)) (if (null? (cadr G3b4f@ynew)) (list 'list G3b4e@xnew) (list 'cons G3b4e@xnew G3b4f@ynew))) (if (memv G3b55@t '(list)) (cons 'list (cons G3b4e@xnew (cdr G3b4f@ynew))) (list 'cons G3b4e@xnew G3b4f@ynew)))) (car G3b4f@ynew)))) (set! G3b26@gen-vector (lambda (G3b45@e G3b46@ls G3b47@lsnew) (if (eq? (car G3b47@lsnew) 'quote) (if (eq? (cadr G3b47@lsnew) G3b46@ls) (list 'quote G3b45@e) (list 'quote (list->vector (cadr G3b47@lsnew)))) (if (eq? (car G3b47@lsnew) 'list) (cons 'vector (cdr G3b47@lsnew)) (list 'list->vector G3b47@lsnew))))) (set! G3b28@regen (lambda (G3b3f@x) ((lambda (G3b41@t) (if (memv G3b41@t '(ref)) (cadr G3b3f@x) (if (memv G3b41@t '(primitive)) (list 'primitive (cadr G3b3f@x)) (if (memv G3b41@t '(quote)) (list 'quote (cadr G3b3f@x)) (if (memv G3b41@t '(lambda)) (G2a9c@G29de@build-lambda '#f (cadr G3b3f@x) (G3b28@regen (caddr G3b3f@x))) (if (memv G3b41@t '(map)) ((lambda (G3b43@ls) (cons '(primitive ellipsis-map) G3b43@ls)) (map G3b28@regen (cdr G3b3f@x))) (cons (list 'primitive (car G3b3f@x)) (map G3b28@regen (cdr G3b3f@x))))))))) (car G3b3f@x)))) (lambda (G3b29@e G3b2a@r G3b2b@mr) ((lambda (G3b2f@t) ((lambda (G3b31@ls/false) (if G3b31@ls/false (apply (lambda (G3b33@x) (call-with-values (lambda () (G3b1a@gen-syntax G3b29@e G3b33@x G3b2a@r '() G2d31@ellipsis? '#f)) (lambda (G3b37@G3b35 G3b38@G3b36) ((lambda (G3b3b@maps G3b3c@e) (G3b28@regen G3b3c@e)) G3b38@G3b36 G3b37@G3b35)))) G3b31@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3b2f@t))) (G2d2f@syntax-dispatch G3b2f@t '(_ any)))) G3b29@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d3d@core-macro-transformer (lambda (G3c4d@name) ((lambda (G3c4f@t) (if (memv G3c4f@t '(quote)) G2cdf@quote-transformer (if (memv G3c4f@t '(lambda)) G2ce3@lambda-transformer (if (memv G3c4f@t '(case-lambda)) G2ce1@case-lambda-transformer (if (memv G3c4f@t '(letrec)) G2cc7@letrec-transformer (if (memv G3c4f@t '(letrec*)) G2cc9@letrec*-transformer (if (memv G3c4f@t '(if)) G2cd7@if-transformer (if (memv G3c4f@t '(and)) G2cd9@and-transformer (if (memv G3c4f@t '(or)) G2cdb@or-transformer (if (memv G3c4f@t '(foreign-call)) G2d2b@foreign-call-transformer (if (memv G3c4f@t '(syntax-case)) G2d37@syntax-case-transformer (if (memv G3c4f@t '(syntax)) G2d3b@syntax-transformer (if (memv G3c4f@t '(type-descriptor)) G2ccd@type-descriptor-transformer (if (memv G3c4f@t '(record-type-descriptor)) G2ccf@record-type-descriptor-transformer (if (memv G3c4f@t '(record-constructor-descriptor)) G2cd1@record-constructor-descriptor-transformer (if (memv G3c4f@t '(fluid-let-syntax)) G2ccb@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3c4d@name))))))))))))))))) G3c4d@name))) (set! G2d3f@file-options-macro (lambda (G3c51@x) ((lambda (G3c54@valid-option?) (begin (set! G3c54@valid-option? (lambda (G3c5d@x) (and (G2b3e@id? G3c5d@x) (memq (G2b40@id->sym G3c5d@x) '(no-fail no-create no-truncate))))) ((lambda (G3c55@t) ((lambda (G3c57@ls/false) (if (and G3c57@ls/false (apply (lambda (G3c59@opt*) (and (for-all G3c54@valid-option? G3c59@opt*) (G26f3@G2684@file-options-spec (map G2b40@id->sym G3c59@opt*)))) G3c57@ls/false)) (apply (lambda (G3c5b@opt*) (G2ce5@bless (list 'quote (G26f3@G2684@file-options-spec (map G2b40@id->sym G3c5b@opt*))))) G3c57@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3c55@t))) (G2d2f@syntax-dispatch G3c55@t '(_ . each-any)))) G3c51@x))) '#f))) (set! G2d41@symbol-macro (lambda (G3c5f@x G3c60@set) ((lambda (G3c63@t) ((lambda (G3c65@ls/false) (if (and G3c65@ls/false (apply (lambda (G3c67@name) (and (G2b3e@id? G3c67@name) (memq (G2b40@id->sym G3c67@name) G3c60@set))) G3c65@ls/false)) (apply (lambda (G3c69@name) (G2ce5@bless (list 'quote G3c69@name))) G3c65@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3c63@t))) (G2d2f@syntax-dispatch G3c63@t '(_ any)))) G3c5f@x))) (set! G2d43@macro-transformer (lambda (G3c6b@x) (if (procedure? G3c6b@x) G3c6b@x (if (symbol? G3c6b@x) ((lambda (G3c6d@t) (if (memv G3c6d@t '(define-record-type)) G2d23@define-record-type-macro (if (memv G3c6d@t '(define-struct)) G2d21@define-struct-macro (if (memv G3c6d@t '(include)) G2d17@include-macro (if (memv G3c6d@t '(cond)) G2d13@cond-macro (if (memv G3c6d@t '(let)) G2ceb@let-macro (if (memv G3c6d@t '(do)) G2d0b@do-macro (if (memv G3c6d@t '(or)) G2d0f@or-macro (if (memv G3c6d@t '(and)) G2d11@and-macro (if (memv G3c6d@t '(let*)) G2d0d@let*-macro (if (memv G3c6d@t '(let-values)) G2ced@let-values-macro (if (memv G3c6d@t '(let*-values)) G2cef@let*-values-macro (if (memv G3c6d@t '(syntax-rules)) G2d1b@syntax-rules-macro (if (memv G3c6d@t '(quasiquote)) G2d1d@quasiquote-macro (if (memv G3c6d@t '(quasisyntax)) G2d1f@quasisyntax-macro (if (memv G3c6d@t '(with-syntax)) G2ce7@with-syntax-macro (if (memv G3c6d@t '(when)) G2cd3@when-macro (if (memv G3c6d@t '(unless)) G2cd5@unless-macro (if (memv G3c6d@t '(case)) G2cdd@case-macro (if (memv G3c6d@t '(identifier-syntax)) G2d09@identifier-syntax-macro (if (memv G3c6d@t '(time)) G2d01@time-macro (if (memv G3c6d@t '(delay)) G2d03@delay-macro (if (memv G3c6d@t '(assert)) G2d05@assert-macro (if (memv G3c6d@t '(endianness)) G2d07@endianness-macro (if (memv G3c6d@t '(guard)) G2cfd@guard-macro (if (memv G3c6d@t '(define-enumeration)) G2cff@define-enumeration-macro (if (memv G3c6d@t '(trace-lambda)) G2cf1@trace-lambda-macro (if (memv G3c6d@t '(trace-define)) G2cf3@trace-define-macro (if (memv G3c6d@t '(trace-define-syntax)) G2cf5@trace-define-syntax-macro (if (memv G3c6d@t '(trace-let-syntax)) G2cf9@trace-let-syntax-macro (if (memv G3c6d@t '(trace-letrec-syntax)) G2cfb@trace-letrec-syntax-macro (if (memv G3c6d@t '(define-condition-type)) G2d25@define-condition-type-macro (if (memv G3c6d@t '(parameterize)) G2d29@parameterize-macro (if (memv G3c6d@t '(include-into)) G2d19@include-into-macro (if (memv G3c6d@t '(eol-style)) (lambda (G3c6f@x) (G2d41@symbol-macro G3c6f@x '(none lf cr crlf nel crnel ls))) (if (memv G3c6d@t '(error-handling-mode)) (lambda (G3c71@x) (G2d41@symbol-macro G3c71@x '(ignore raise replace))) (if (memv G3c6d@t '(buffer-mode)) (lambda (G3c73@x) (G2d41@symbol-macro G3c73@x '(none line block))) (if (memv G3c6d@t '(file-options)) G2d3f@file-options-macro (if (memv G3c6d@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2d27@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3c6b@x)))))))))))))))))))))))))))))))))))))))) G3c6b@x) (error 'core-macro-transformer '"BUG: invalid macro" G3c6b@x))))) (set! G2d45@local-macro-transformer (lambda (G3c75@x) (car G3c75@x))) (set! G2d47@do-macro-call (lambda (G3c77@transformer G3c78@expr) ((lambda (G3c7b@out) (begin ((letrec ((G3c7d@f (lambda (G3c7f@x) (if (not (G2b06@stx? G3c7f@x)) (if (pair? G3c7f@x) (begin (G3c7d@f (car G3c7f@x)) (G3c7d@f (cdr G3c7f@x))) (if (vector? G3c7f@x) (vector-for-each G3c7d@f G3c7f@x) (if (symbol? G3c7f@x) (G2e1a@syntax-violation '#f '"raw symbol encountered in output of macro" G3c78@expr G3c7f@x) (void)))) (void))))) G3c7d@f) G3c7b@out) (G2b28@add-mark (G2b1e@gen-mark) G3c7b@out G3c78@expr))) (G3c77@transformer (G2b28@add-mark G2b20@anti-mark G3c78@expr '#f))))) (set! G2d49@chi-macro (lambda (G3c81@p G3c82@e) (G2d47@do-macro-call (G2d43@macro-transformer G3c81@p) G3c82@e))) (set! G2d4b@chi-local-macro (lambda (G3c85@p G3c86@e) (G2d47@do-macro-call (G2d45@local-macro-transformer G3c85@p) G3c86@e))) (set! G2d4d@chi-global-macro (lambda (G3c89@p G3c8a@e) ((lambda (G3c8d@lib G3c8e@loc) (begin (G2967@G280f@visit-library G3c8d@lib) ((lambda (G3c91@x) ((lambda (G3c93@transformer) (G2d47@do-macro-call G3c93@transformer G3c8a@e)) (if (procedure? G3c91@x) G3c91@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3c91@x)))) (symbol-value G3c8e@loc)))) (car G3c89@p) (cdr G3c89@p)))) (set! G2d4f@chi-expr* (lambda (G3c95@e* G3c96@r G3c97@mr) (if (null? G3c95@e*) '() ((lambda (G3c9b@e) (cons G3c9b@e (G2d4f@chi-expr* (cdr G3c95@e*) G3c96@r G3c97@mr))) (G2d53@chi-expr (car G3c95@e*) G3c96@r G3c97@mr))))) (set! G2d51@chi-application (lambda (G3c9d@e G3c9e@r G3c9f@mr) ((lambda (G3ca3@t) ((lambda (G3ca5@ls/false) (if G3ca5@ls/false (apply (lambda (G3ca7@rator G3ca8@rands) ((lambda (G3cab@rator) (cons G3cab@rator (G2d4f@chi-expr* G3ca8@rands G3c9e@r G3c9f@mr))) (G2d53@chi-expr G3ca7@rator G3c9e@r G3c9f@mr))) G3ca5@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3ca3@t))) (G2d2f@syntax-dispatch G3ca3@t '(any . each-any)))) G3c9d@e))) (set! G2d53@chi-expr (lambda (G3cad@e G3cae@r G3caf@mr) (call-with-values (lambda () (G2b66@syntax-type G3cad@e G3cae@r)) (lambda (G3cb6@G3cb3 G3cb7@G3cb4 G3cb8@G3cb5) ((lambda (G3cbc@kwd G3cbd@value G3cbe@type) ((lambda (G3cc2@t) (if (memv G3cc2@t '(core-macro)) ((lambda (G3cc4@transformer) (G3cc4@transformer G3cad@e G3cae@r G3caf@mr)) (G2d3d@core-macro-transformer G3cbd@value)) (if (memv G3cc2@t '(global)) ((lambda (G3cc6@lib) ((lambda (G3cc8@loc) ((lambda () (begin ((G2d9c@inv-collector) G3cc6@lib) G3cc8@loc)))) (cdr G3cbd@value))) (car G3cbd@value)) (if (memv G3cc2@t '(core-prim)) ((lambda (G3cca@name) (list 'primitive G3cca@name)) G3cbd@value) (if (memv G3cc2@t '(call)) (G2d51@chi-application G3cad@e G3cae@r G3caf@mr) (if (memv G3cc2@t '(lexical)) ((lambda (G3ccc@lex) G3ccc@lex) (G2cbb@lexical-var G3cbd@value)) (if (memv G3cc2@t '(global-macro global-macro!)) (G2d53@chi-expr (G2d4d@chi-global-macro G3cbd@value G3cad@e) G3cae@r G3caf@mr) (if (memv G3cc2@t '(local-macro local-macro!)) (G2d53@chi-expr (G2d4b@chi-local-macro G3cbd@value G3cad@e) G3cae@r G3caf@mr) (if (memv G3cc2@t '(macro macro!)) (G2d53@chi-expr (G2d49@chi-macro G3cbd@value G3cad@e) G3cae@r G3caf@mr) (if (memv G3cc2@t '(constant)) ((lambda (G3cce@datum) (list 'quote G3cce@datum)) G3cbd@value) (if (memv G3cc2@t '(set!)) (G2d55@chi-set! G3cad@e G3cae@r G3caf@mr) (if (memv G3cc2@t '(begin)) ((lambda (G3cd0@t) ((lambda (G3cd2@ls/false) (if G3cd2@ls/false (apply (lambda (G3cd4@x G3cd5@x*) (G2a9f@G2a10@build-sequence '#f (G2d4f@chi-expr* (cons G3cd4@x G3cd5@x*) G3cae@r G3caf@mr))) G3cd2@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3cd0@t))) (G2d2f@syntax-dispatch G3cd0@t '(_ any . each-any)))) G3cad@e) (if (memv G3cc2@t '(let-syntax letrec-syntax)) ((lambda (G3cd8@t) ((lambda (G3cda@ls/false) (if (and G3cda@ls/false (apply (lambda (G3cdc@xlhs* G3cdd@xrhs* G3cde@xbody G3cdf@xbody*) (if (not (G2b48@valid-bound-ids? G3cdc@xlhs*)) (G2e1a@syntax-violation '#f '"invalid identifiers" G3cad@e) (void))) G3cda@ls/false)) (apply (lambda (G3ce4@xlhs* G3ce5@xrhs* G3ce6@xbody G3ce7@xbody*) ((lambda (G3cec@xlab*) ((lambda (G3cee@xrib) ((lambda (G3cf0@xb*) ((lambda () (G2a9f@G2a10@build-sequence '#f (G2d4f@chi-expr* (map (lambda (G3cf2@x) (G2b2a@add-subst G3cee@xrib G3cf2@x)) (cons G3ce6@xbody G3ce7@xbody*)) (append (map cons G3cec@xlab* G3cf0@xb*) G3cae@r) (append (map cons G3cec@xlab* G3cf0@xb*) G3caf@mr)))))) (map (lambda (G3cf4@x) (G2b7c@make-eval-transformer (G2d8e@expand-transformer (if (eq? G3cbe@type 'let-syntax) G3cf4@x (G2b2a@add-subst G3cee@xrib G3cf4@x)) G3caf@mr))) G3ce5@xrhs*))) (G2af9@make-full-rib G3ce4@xlhs* G3cec@xlab*))) (map G2ac2@gen-label G3ce4@xlhs*))) G3cda@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3cd8@t))) (G2d2f@syntax-dispatch G3cd8@t '(_ #(each (any any)) any . each-any)))) G3cad@e) (if (memv G3cc2@t '(displaced-lexical)) (G2e1a@syntax-violation '#f '"identifier out of context" G3cad@e) (if (memv G3cc2@t '(syntax)) (G2e1a@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3cad@e) (if (memv G3cc2@t '(define define-syntax module import library)) (G2e1a@syntax-violation '#f (string-append ((lambda (G3cf6@t) (if (memv G3cf6@t '(define)) '"a definition" (if (memv G3cf6@t '(define-syntax)) '"a define-syntax" (if (memv G3cf6@t '(module)) '"a module definition" (if (memv G3cf6@t '(library)) '"a library definition" (if (memv G3cf6@t '(import)) '"an import declaration" (if (memv G3cf6@t '(export)) '"an export declaration" '"a non-expression"))))))) G3cbe@type) '" was found where an expression was expected") G3cad@e) (if (memv G3cc2@t '(mutable)) (G2e1a@syntax-violation '#f '"attempt to reference an unexportable variable" G3cad@e) (G2e1a@syntax-violation '#f '"invalid expression" G3cad@e)))))))))))))))))) G3cbe@type)) G3cb8@G3cb5 G3cb7@G3cb4 G3cb6@G3cb3))))) (set! G2d55@chi-set! (lambda (G3cf8@e G3cf9@r G3cfa@mr) ((lambda (G3cfe@t) ((lambda (G3d00@ls/false) (if (and G3d00@ls/false (apply (lambda (G3d02@x G3d03@v) (G2b3e@id? G3d02@x)) G3d00@ls/false)) (apply (lambda (G3d06@x G3d07@v) (call-with-values (lambda () (G2b66@syntax-type G3d06@x G3cf9@r)) (lambda (G3d0d@G3d0a G3d0e@G3d0b G3d0f@G3d0c) ((lambda (G3d13@kwd G3d14@value G3d15@type) ((lambda (G3d19@t) (if (memv G3d19@t '(lexical)) (begin (G2cbf@set-lexical-mutable! G3d14@value '#t) (list 'set! (G2cbb@lexical-var G3d14@value) (G2d53@chi-expr G3d07@v G3cf9@r G3cfa@mr))) (if (memv G3d19@t '(core-prim)) (G2e1a@syntax-violation '#f '"cannot modify imported core primitive" G3cf8@e) (if (memv G3d19@t '(global)) (G2e1a@syntax-violation '#f '"attempt to modify imported binding" G3cf8@e) (if (memv G3d19@t '(global-macro!)) (G2d53@chi-expr (G2d4d@chi-global-macro G3d14@value G3cf8@e) G3cf9@r G3cfa@mr) (if (memv G3d19@t '(local-macro!)) (G2d53@chi-expr (G2d4b@chi-local-macro G3d14@value G3cf8@e) G3cf9@r G3cfa@mr) (if (memv G3d19@t '(mutable)) (G2e1a@syntax-violation '#f '"attempt to assign to an unexportable variable" G3cf8@e) (G2e1a@syntax-violation '#f '"invalid syntax" G3cf8@e)))))))) G3d15@type)) G3d0f@G3d0c G3d0e@G3d0b G3d0d@G3d0a)))) G3d00@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3cfe@t))) (G2d2f@syntax-dispatch G3cfe@t '(_ any any)))) G3cf8@e))) (set! G2d57@verify-formals (lambda (G3d1b@fmls G3d1c@stx) ((lambda (G3d1f@t) ((lambda (G3d21@ls/false) (if G3d21@ls/false (apply (lambda (G3d23@x*) (if (not (G2b48@valid-bound-ids? G3d23@x*)) (G2ce9@invalid-fmls-error G3d1c@stx G3d1b@fmls) (void))) G3d21@ls/false) ((lambda (G3d25@t) ((lambda (G3d27@ls/false) (if G3d27@ls/false (apply (lambda (G3d29@x* G3d2a@x) (if (not (G2b48@valid-bound-ids? (cons G3d2a@x G3d29@x*))) (G2ce9@invalid-fmls-error G3d1c@stx G3d1b@fmls) (void))) G3d27@ls/false) ((lambda (G3d2d@t) ((lambda (G3d2f@ls/false) (if G3d2f@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"invalid syntax" G3d1c@stx)) G3d2f@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3d2d@t))) (G2d2f@syntax-dispatch G3d2d@t '_))) G3d25@t))) (G2d2f@syntax-dispatch G3d25@t '#(each+ any () any)))) G3d1f@t))) (G2d2f@syntax-dispatch G3d1f@t 'each-any))) G3d1b@fmls))) (set! G2d59@chi-lambda-clause (lambda (G3d31@stx G3d32@fmls G3d33@body* G3d34@r G3d35@mr) ((lambda (G3d3b@t) ((lambda (G3d3d@ls/false) (if G3d3d@ls/false (apply (lambda (G3d3f@x*) (begin (G2d57@verify-formals G3d32@fmls G3d31@stx) ((lambda (G3d41@lex* G3d42@lab*) (values G3d41@lex* (G2d69@chi-internal (G2b2a@add-subst (G2af9@make-full-rib G3d3f@x* G3d42@lab*) G3d33@body*) (G2cc3@add-lexicals G3d42@lab* G3d41@lex* G3d34@r) G3d35@mr))) (map G2abe@gen-lexical G3d3f@x*) (map G2ac2@gen-label G3d3f@x*)))) G3d3d@ls/false) ((lambda (G3d45@t) ((lambda (G3d47@ls/false) (if G3d47@ls/false (apply (lambda (G3d49@x* G3d4a@x) (begin (G2d57@verify-formals G3d32@fmls G3d31@stx) ((lambda (G3d4d@lex* G3d4e@lab* G3d4f@lex G3d50@lab) (values (append G3d4d@lex* G3d4f@lex) (G2d69@chi-internal (G2b2a@add-subst (G2af9@make-full-rib (cons G3d4a@x G3d49@x*) (cons G3d50@lab G3d4e@lab*)) G3d33@body*) (G2cc3@add-lexicals (cons G3d50@lab G3d4e@lab*) (cons G3d4f@lex G3d4d@lex*) G3d34@r) G3d35@mr))) (map G2abe@gen-lexical G3d49@x*) (map G2ac2@gen-label G3d49@x*) (G2abe@gen-lexical G3d4a@x) (G2ac2@gen-label G3d4a@x)))) G3d47@ls/false) ((lambda (G3d55@t) ((lambda (G3d57@ls/false) (if G3d57@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"invalid syntax" G3d32@fmls)) G3d57@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3d55@t))) (G2d2f@syntax-dispatch G3d55@t '_))) G3d45@t))) (G2d2f@syntax-dispatch G3d45@t '#(each+ any () any)))) G3d3b@t))) (G2d2f@syntax-dispatch G3d3b@t 'each-any))) G3d32@fmls))) (set! G2d5b@chi-lambda-clause* (lambda (G3d59@stx G3d5a@fmls* G3d5b@body** G3d5c@r G3d5d@mr) (if (null? G3d5a@fmls*) (values '() '()) (call-with-values (lambda () (G2d59@chi-lambda-clause G3d59@stx (car G3d5a@fmls*) (car G3d5b@body**) G3d5c@r G3d5d@mr)) (lambda (G3d65@G3d63 G3d66@G3d64) ((lambda (G3d69@b G3d6a@a) (call-with-values (lambda () (G2d5b@chi-lambda-clause* G3d59@stx (cdr G3d5a@fmls*) (cdr G3d5b@body**) G3d5c@r G3d5d@mr)) (lambda (G3d6f@G3d6d G3d70@G3d6e) ((lambda (G3d73@b* G3d74@a*) (values (cons G3d6a@a G3d74@a*) (cons G3d69@b G3d73@b*))) G3d70@G3d6e G3d6f@G3d6d)))) G3d66@G3d64 G3d65@G3d63)))))) (set! G2d5d@chi-defun (lambda (G3d77@x G3d78@r G3d79@mr) ((lambda (G3d7d@fmls G3d7e@body*) (call-with-values (lambda () (G2d59@chi-lambda-clause G3d7d@fmls G3d7d@fmls G3d7e@body* G3d78@r G3d79@mr)) (lambda (G3d83@G3d81 G3d84@G3d82) ((lambda (G3d87@body G3d88@fmls) (G2a9c@G29de@build-lambda '#f G3d88@fmls G3d87@body)) G3d84@G3d82 G3d83@G3d81)))) (car G3d77@x) (cdr G3d77@x)))) (set! G2d5f@chi-rhs (lambda (G3d8b@rhs G3d8c@r G3d8d@mr) ((lambda (G3d91@t) (if (memv G3d91@t '(defun)) (G2d5d@chi-defun (cdr G3d8b@rhs) G3d8c@r G3d8d@mr) (if (memv G3d91@t '(expr)) ((lambda (G3d93@expr) (G2d53@chi-expr G3d93@expr G3d8c@r G3d8d@mr)) (cdr G3d8b@rhs)) (if (memv G3d91@t '(top-expr)) ((lambda (G3d95@expr) (G2a9f@G2a10@build-sequence '#f (list (G2d53@chi-expr G3d95@expr G3d8c@r G3d8d@mr) (G2aa0@G2a12@build-void)))) (cdr G3d8b@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3d8b@rhs))))) (car G3d8b@rhs)))) (set! G2d61@expand-interaction-rhs*/init* (lambda (G3d97@lhs* G3d98@rhs* G3d99@init* G3d9a@r G3d9b@mr) ((letrec ((G3da1@f (lambda (G3da3@lhs* G3da4@rhs*) (if (null? G3da3@lhs*) (map (lambda (G3da7@x) (G2d53@chi-expr G3da7@x G3d9a@r G3d9b@mr)) G3d99@init*) ((lambda (G3da9@lhs G3daa@rhs) ((lambda (G3dad@t) (if (memv G3dad@t '(defun)) ((lambda (G3daf@rhs) (cons (list 'set! G3da9@lhs G3daf@rhs) (G3da1@f (cdr G3da3@lhs*) (cdr G3da4@rhs*)))) (G2d5d@chi-defun (cdr G3daa@rhs) G3d9a@r G3d9b@mr)) (if (memv G3dad@t '(expr)) ((lambda (G3db1@rhs) (cons (list 'set! G3da9@lhs G3db1@rhs) (G3da1@f (cdr G3da3@lhs*) (cdr G3da4@rhs*)))) (G2d53@chi-expr (cdr G3daa@rhs) G3d9a@r G3d9b@mr)) (if (memv G3dad@t '(top-expr)) ((lambda (G3db3@e) (cons G3db3@e (G3da1@f (cdr G3da3@lhs*) (cdr G3da4@rhs*)))) (G2d53@chi-expr (cdr G3daa@rhs) G3d9a@r G3d9b@mr)) (error 'expand-interaction '"invallid" G3daa@rhs))))) (car G3daa@rhs))) (car G3da3@lhs*) (car G3da4@rhs*)))))) G3da1@f) G3d97@lhs* G3d98@rhs*))) (set! G2d63@chi-rhs* (lambda (G3db5@rhs* G3db6@r G3db7@mr) ((letrec ((G3dbb@f (lambda (G3dbd@ls) (if (null? G3dbd@ls) '() ((lambda (G3dbf@a) (cons G3dbf@a (G3dbb@f (cdr G3dbd@ls)))) (G2d5f@chi-rhs (car G3dbd@ls) G3db6@r G3db7@mr)))))) G3dbb@f) G3db5@rhs*))) (set! G2d65@find-bound=? (lambda (G3dc1@x G3dc2@lhs* G3dc3@rhs*) (if (null? G3dc2@lhs*) '#f (if (G2b44@bound-id=? G3dc1@x (car G3dc2@lhs*)) (car G3dc3@rhs*) (G2d65@find-bound=? G3dc1@x (cdr G3dc2@lhs*) (cdr G3dc3@rhs*)))))) (set! G2d67@find-dups (lambda (G3dc7@ls) ((letrec ((G3dc9@f (lambda (G3dcb@ls G3dcc@dups) (if (null? G3dcb@ls) G3dcc@dups ((lambda (G3dcf@t) (if G3dcf@t ((lambda (G3dd1@x) (G3dc9@f (cdr G3dcb@ls) (cons (list (car G3dcb@ls) G3dd1@x) G3dcc@dups))) G3dcf@t) (G3dc9@f (cdr G3dcb@ls) G3dcc@dups))) (G2d65@find-bound=? (car G3dcb@ls) (cdr G3dcb@ls) (cdr G3dcb@ls))))))) G3dc9@f) G3dc7@ls '()))) (set! G2d69@chi-internal (lambda (G3dd3@e* G3dd4@r G3dd5@mr) ((lambda (G3dd9@rib) (call-with-values (lambda () (G2d8c@chi-body* (map (lambda (G3de3@x) (G2b2a@add-subst G3dd9@rib G3de3@x)) (G2b3c@syntax->list G3dd3@e*)) G3dd4@r G3dd5@mr '() '() '() '() '() G3dd9@rib '#f)) (lambda (G3de5@G3ddb G3de6@G3ddc G3de7@G3ddd G3de8@G3dde G3de9@G3ddf G3dea@G3de0 G3deb@G3de1 G3dec@G3de2) ((lambda (G3df5@_exp* G3df6@kwd* G3df7@mod** G3df8@rhs* G3df9@lex* G3dfa@mr G3dfb@r G3dfc@e*) (begin (if (null? G3dfc@e*) (G2e1a@syntax-violation '#f '"no expression in body" G3dfc@e*) (void)) ((lambda (G3e05@init*) ((lambda (G3e07@rhs*) ((lambda () (G2aa2@G2a16@build-letrec* '#f (reverse G3df9@lex*) (reverse G3e07@rhs*) (G2a9f@G2a10@build-sequence '#f G3e05@init*))))) (G2d63@chi-rhs* G3df8@rhs* G3dfb@r G3dfa@mr))) (G2d4f@chi-expr* (append (apply append (reverse G3df7@mod**)) G3dfc@e*) G3dfb@r G3dfa@mr)))) G3dec@G3de2 G3deb@G3de1 G3dea@G3de0 G3de9@G3ddf G3de8@G3dde G3de7@G3ddd G3de6@G3ddc G3de5@G3ddb)))) (G2aed@make-empty-rib)))) (set! G2d6b@parse-module (lambda (G3e09@e) ((lambda (G3e0b@t) ((lambda (G3e0d@ls/false) (if G3e0d@ls/false (apply (lambda (G3e0f@export* G3e10@b*) (begin (if (not (for-all G2b3e@id? G3e0f@export*)) (G2e1a@syntax-violation '#f '"module exports must be identifiers" G3e09@e) (void)) (values '#f (list->vector G3e0f@export*) G3e10@b*))) G3e0d@ls/false) ((lambda (G3e13@t) ((lambda (G3e15@ls/false) (if G3e15@ls/false (apply (lambda (G3e17@name G3e18@export* G3e19@b*) (begin (if (not (G2b3e@id? G3e17@name)) (G2e1a@syntax-violation '#f '"module name must be an identifier" G3e09@e) (void)) (if (not (for-all G2b3e@id? G3e18@export*)) (G2e1a@syntax-violation '#f '"module exports must be identifiers" G3e09@e) (void)) (values G3e17@name (list->vector G3e18@export*) G3e19@b*))) G3e15@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3e13@t))) (G2d2f@syntax-dispatch G3e13@t '(_ any each-any . each-any)))) G3e0b@t))) (G2d2f@syntax-dispatch G3e0b@t '(_ each-any . each-any)))) G3e09@e))) (set! G2d71@G2d6c (make-record-type-descriptor 'module-interface '#f 'G2d6f '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2d73@G2d6e '#f) (set! G2d75@G2d6d (make-record-constructor-descriptor G2d71@G2d6c '#f G2d73@G2d6e)) (set! G2d78@module-interface? (record-predicate G2d71@G2d6c)) (set! G2d7a@make-module-interface (record-constructor G2d75@G2d6d)) (set! G2d7c@module-interface-first-mark (record-accessor G2d71@G2d6c '0)) (set! G2d7e@module-interface-exp-id-vec (record-accessor G2d71@G2d6c '1)) (set! G2d80@module-interface-exp-lab-vec (record-accessor G2d71@G2d6c '2)) (set! G2d82@set-module-interface-first-mark! (record-mutator G2d71@G2d6c '0)) (set! G2d84@set-module-interface-exp-id-vec! (record-mutator G2d71@G2d6c '1)) (set! G2d86@set-module-interface-exp-lab-vec! (record-mutator G2d71@G2d6c '2)) (set! G2d88@module-interface-exp-id* (lambda (G3e1d@iface G3e1e@id) ((lambda (G3e22@diff-marks) (begin (set! G3e22@diff-marks (lambda (G3e29@ls G3e2a@x) (begin (if (null? G3e29@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G3e2d@a) (if (eq? G3e2d@a G3e2a@x) '() (cons G3e2d@a (G3e22@diff-marks (cdr G3e29@ls) G3e2a@x)))) (car G3e29@ls))))) ((lambda (G3e23@diff G3e24@id-vec) (if (null? G3e23@diff) G3e24@id-vec (vector-map (lambda (G3e27@x) (G2b08@make-stx (G2b0a@stx-expr G3e27@x) (append G3e23@diff (G2b0c@stx-mark* G3e27@x)) '() '())) G3e24@id-vec))) (G3e22@diff-marks (G2b0c@stx-mark* G3e1e@id) (G2d7c@module-interface-first-mark G3e1d@iface)) (G2d7e@module-interface-exp-id-vec G3e1d@iface)))) '#f))) (set! G2d8a@chi-internal-module (lambda (G3e2f@e G3e30@r G3e31@mr G3e32@lex* G3e33@rhs* G3e34@mod** G3e35@kwd*) (call-with-values (lambda () (G2d6b@parse-module G3e2f@e)) (lambda (G3e40@G3e3d G3e41@G3e3e G3e42@G3e3f) ((lambda (G3e46@e* G3e47@exp-id* G3e48@name) ((lambda (G3e4c@rib) ((lambda (G3e4e@e*) ((lambda () (call-with-values (lambda () (G2d8c@chi-body* G3e4e@e* G3e30@r G3e31@mr G3e32@lex* G3e33@rhs* G3e34@mod** G3e35@kwd* '() G3e4c@rib '#f)) (lambda (G3e58@G3e50 G3e59@G3e51 G3e5a@G3e52 G3e5b@G3e53 G3e5c@G3e54 G3e5d@G3e55 G3e5e@G3e56 G3e5f@G3e57) ((lambda (G3e68@_exp* G3e69@kwd* G3e6a@mod** G3e6b@rhs* G3e6c@lex* G3e6d@mr G3e6e@r G3e6f@e*) ((lambda (G3e78@exp-lab* G3e79@mod**) (if (not G3e48@name) (values G3e6c@lex* G3e6b@rhs* G3e47@exp-id* G3e78@exp-lab* G3e6e@r G3e6d@mr G3e79@mod** G3e69@kwd*) ((lambda (G3e7c@lab G3e7d@iface) (values G3e6c@lex* G3e6b@rhs* (vector G3e48@name) (vector G3e7c@lab) (cons (cons G3e7c@lab (cons '$module G3e7d@iface)) G3e6e@r) (cons (cons G3e7c@lab (cons '$module G3e7d@iface)) G3e6d@mr) G3e79@mod** G3e69@kwd*)) (G2ac2@gen-label 'module) (G2d7a@make-module-interface (car (G2b0c@stx-mark* G3e48@name)) (vector-map (lambda (G3e80@x) (G2b08@make-stx (G2b0a@stx-expr G3e80@x) (G2b0c@stx-mark* G3e80@x) '() '())) G3e47@exp-id*) G3e78@exp-lab*)))) (vector-map (lambda (G3e82@x) (or (G2b58@id->label (G2b08@make-stx (G2b40@id->sym G3e82@x) (G2b0c@stx-mark* G3e82@x) (list G3e4c@rib) '())) (G2e1a@syntax-violation '#f '"cannot find module export" G3e82@x))) G3e47@exp-id*) (cons G3e6f@e* G3e6a@mod**))) G3e5f@G3e57 G3e5e@G3e56 G3e5d@G3e55 G3e5c@G3e54 G3e5b@G3e53 G3e5a@G3e52 G3e59@G3e51 G3e58@G3e50)))))) (map (lambda (G3e84@x) (G2b2a@add-subst G3e4c@rib G3e84@x)) (G2b3c@syntax->list G3e46@e*)))) (G2aed@make-empty-rib))) G3e42@G3e3f G3e41@G3e3e G3e40@G3e3d))))) (set! G2d8c@chi-body* (lambda (G3e86@e* G3e87@r G3e88@mr G3e89@lex* G3e8a@rhs* G3e8b@mod** G3e8c@kwd* G3e8d@exp* G3e8e@rib G3e8f@top?) (if (null? G3e86@e*) (values G3e86@e* G3e87@r G3e88@mr G3e89@lex* G3e8a@rhs* G3e8b@mod** G3e8c@kwd* G3e8d@exp*) ((lambda (G3e9a@e) (call-with-values (lambda () (G2b66@syntax-type G3e9a@e G3e87@r)) (lambda (G3e9f@G3e9c G3ea0@G3e9d G3ea1@G3e9e) ((lambda (G3ea5@kwd G3ea6@value G3ea7@type) ((lambda (G3eab@kwd*) ((lambda (G3ead@t) (if (memv G3ead@t '(define)) (call-with-values (lambda () (G2cb3@parse-define G3e9a@e)) (lambda (G3eb1@G3eaf G3eb2@G3eb0) ((lambda (G3eb5@rhs G3eb6@id) (begin (if (G2b4c@bound-id-member? G3eb6@id G3eab@kwd*) (G2e1a@syntax-violation '#f '"cannot redefine keyword" G3e9a@e) (void)) (call-with-values (lambda () (G2ac6@gen-define-label+loc G3eb6@id G3e8e@rib)) (lambda (G3ebb@G3eb9 G3ebc@G3eba) ((lambda (G3ebf@lex G3ec0@lab) (begin (G2aef@extend-rib! G3e8e@rib G3eb6@id G3ec0@lab) (G2d8c@chi-body* (cdr G3e86@e*) (G2cc1@add-lexical G3ec0@lab G3ebf@lex G3e87@r) G3e88@mr (cons G3ebf@lex G3e89@lex*) (cons G3eb5@rhs G3e8a@rhs*) G3e8b@mod** G3eab@kwd* G3e8d@exp* G3e8e@rib G3e8f@top?))) G3ebc@G3eba G3ebb@G3eb9))))) G3eb2@G3eb0 G3eb1@G3eaf))) (if (memv G3ead@t '(define-syntax)) (call-with-values (lambda () (G2cb5@parse-define-syntax G3e9a@e)) (lambda (G3ec5@G3ec3 G3ec6@G3ec4) ((lambda (G3ec9@rhs G3eca@id) (begin (if (G2b4c@bound-id-member? G3eca@id G3eab@kwd*) (G2e1a@syntax-violation '#f '"cannot redefine keyword" G3e9a@e) (void)) ((lambda (G3ecd@lab G3ece@expanded-rhs) (begin (G2aef@extend-rib! G3e8e@rib G3eca@id G3ecd@lab) ((lambda (G3ed1@b) (G2d8c@chi-body* (cdr G3e86@e*) (cons (cons G3ecd@lab G3ed1@b) G3e87@r) (cons (cons G3ecd@lab G3ed1@b) G3e88@mr) G3e89@lex* G3e8a@rhs* G3e8b@mod** G3eab@kwd* G3e8d@exp* G3e8e@rib G3e8f@top?)) (G2b7c@make-eval-transformer G3ece@expanded-rhs)))) (G2ac8@gen-define-label G3eca@id G3e8e@rib) (G2d8e@expand-transformer G3ec9@rhs G3e88@mr)))) G3ec6@G3ec4 G3ec5@G3ec3))) (if (memv G3ead@t '(let-syntax letrec-syntax)) ((lambda (G3ed3@t) ((lambda (G3ed5@ls/false) (if (and G3ed5@ls/false (apply (lambda (G3ed7@xlhs* G3ed8@xrhs* G3ed9@xbody*) (if (not (G2b48@valid-bound-ids? G3ed7@xlhs*)) (G2e1a@syntax-violation '#f '"invalid identifiers" G3e9a@e) (void))) G3ed5@ls/false)) (apply (lambda (G3edd@xlhs* G3ede@xrhs* G3edf@xbody*) ((lambda (G3ee3@xlab*) ((lambda (G3ee5@xrib) ((lambda (G3ee7@xb*) ((lambda () (G2d8c@chi-body* (append (map (lambda (G3ee9@x) (G2b2a@add-subst G3ee5@xrib G3ee9@x)) G3edf@xbody*) (cdr G3e86@e*)) (append (map cons G3ee3@xlab* G3ee7@xb*) G3e87@r) (append (map cons G3ee3@xlab* G3ee7@xb*) G3e88@mr) G3e89@lex* G3e8a@rhs* G3e8b@mod** G3eab@kwd* G3e8d@exp* G3e8e@rib G3e8f@top?)))) (map (lambda (G3eeb@x) (G2b7c@make-eval-transformer (G2d8e@expand-transformer (if (eq? G3ea7@type 'let-syntax) G3eeb@x (G2b2a@add-subst G3ee5@xrib G3eeb@x)) G3e88@mr))) G3ede@xrhs*))) (G2af9@make-full-rib G3edd@xlhs* G3ee3@xlab*))) (map G2ac2@gen-label G3edd@xlhs*))) G3ed5@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3ed3@t))) (G2d2f@syntax-dispatch G3ed3@t '(_ #(each (any any)) . each-any)))) G3e9a@e) (if (memv G3ead@t '(begin)) ((lambda (G3eed@t) ((lambda (G3eef@ls/false) (if G3eef@ls/false (apply (lambda (G3ef1@x*) (G2d8c@chi-body* (append G3ef1@x* (cdr G3e86@e*)) G3e87@r G3e88@mr G3e89@lex* G3e8a@rhs* G3e8b@mod** G3eab@kwd* G3e8d@exp* G3e8e@rib G3e8f@top?)) G3eef@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3eed@t))) (G2d2f@syntax-dispatch G3eed@t '(_ . each-any)))) G3e9a@e) (if (memv G3ead@t '(global-macro global-macro!)) (G2d8c@chi-body* (cons (G2b2a@add-subst G3e8e@rib (G2d4d@chi-global-macro G3ea6@value G3e9a@e)) (cdr G3e86@e*)) G3e87@r G3e88@mr G3e89@lex* G3e8a@rhs* G3e8b@mod** G3eab@kwd* G3e8d@exp* G3e8e@rib G3e8f@top?) (if (memv G3ead@t '(local-macro local-macro!)) (G2d8c@chi-body* (cons (G2b2a@add-subst G3e8e@rib (G2d4b@chi-local-macro G3ea6@value G3e9a@e)) (cdr G3e86@e*)) G3e87@r G3e88@mr G3e89@lex* G3e8a@rhs* G3e8b@mod** G3eab@kwd* G3e8d@exp* G3e8e@rib G3e8f@top?) (if (memv G3ead@t '(macro macro!)) (G2d8c@chi-body* (cons (G2b2a@add-subst G3e8e@rib (G2d49@chi-macro G3ea6@value G3e9a@e)) (cdr G3e86@e*)) G3e87@r G3e88@mr G3e89@lex* G3e8a@rhs* G3e8b@mod** G3eab@kwd* G3e8d@exp* G3e8e@rib G3e8f@top?) (if (memv G3ead@t '(module)) (call-with-values (lambda () (G2d8a@chi-internal-module G3e9a@e G3e87@r G3e88@mr G3e89@lex* G3e8a@rhs* G3e8b@mod** G3eab@kwd*)) (lambda (G3efb@G3ef3 G3efc@G3ef4 G3efd@G3ef5 G3efe@G3ef6 G3eff@G3ef7 G3f00@G3ef8 G3f01@G3ef9 G3f02@G3efa) ((lambda (G3f0b@kwd* G3f0c@mod** G3f0d@mr G3f0e@r G3f0f@m-exp-lab* G3f10@m-exp-id* G3f11@rhs* G3f12@lex*) (begin (vector-for-each (lambda (G3f1b@id G3f1c@lab) (G2aef@extend-rib! G3e8e@rib G3f1b@id G3f1c@lab)) G3f10@m-exp-id* G3f0f@m-exp-lab*) (G2d8c@chi-body* (cdr G3e86@e*) G3f0e@r G3f0d@mr G3f12@lex* G3f11@rhs* G3f0c@mod** G3f0b@kwd* G3e8d@exp* G3e8e@rib G3e8f@top?))) G3f02@G3efa G3f01@G3ef9 G3f00@G3ef8 G3eff@G3ef7 G3efe@G3ef6 G3efd@G3ef5 G3efc@G3ef4 G3efb@G3ef3))) (if (memv G3ead@t '(library)) (begin (G2dfc@library-expander (G2b54@stx->datum G3e9a@e)) (G2d8c@chi-body* (cdr G3e86@e*) G3e87@r G3e88@mr G3e89@lex* G3e8a@rhs* G3e8b@mod** G3eab@kwd* G3e8d@exp* G3e8e@rib G3e8f@top?)) (if (memv G3ead@t '(export)) ((lambda (G3f1f@t) ((lambda (G3f21@ls/false) (if G3f21@ls/false (apply (lambda (G3f23@exp-decl*) (G2d8c@chi-body* (cdr G3e86@e*) G3e87@r G3e88@mr G3e89@lex* G3e8a@rhs* G3e8b@mod** G3eab@kwd* (append G3f23@exp-decl* G3e8d@exp*) G3e8e@rib G3e8f@top?)) G3f21@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3f1f@t))) (G2d2f@syntax-dispatch G3f1f@t '(_ . each-any)))) G3e9a@e) (if (memv G3ead@t '(import)) ((lambda () ((lambda (G3f26@module-import? G3f28@module-import G3f2a@library-import) (begin (set! G3f26@module-import? (lambda (G3f72@e) ((lambda (G3f74@t) ((lambda (G3f76@ls/false) (if (and G3f76@ls/false (apply (lambda (G3f78@id) (G2b3e@id? G3f78@id)) G3f76@ls/false)) (apply (lambda (G3f7a@id) '#t) G3f76@ls/false) ((lambda (G3f7c@t) ((lambda (G3f7e@ls/false) (if G3f7e@ls/false (apply (lambda (G3f80@imp*) '#f) G3f7e@ls/false) ((lambda (G3f82@t) ((lambda (G3f84@ls/false) (if G3f84@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"malformed import form" G3f72@e)) G3f84@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3f82@t))) (G2d2f@syntax-dispatch G3f82@t '_))) G3f7c@t))) (G2d2f@syntax-dispatch G3f7c@t '(_ . each-any)))) G3f74@t))) (G2d2f@syntax-dispatch G3f74@t '(_ any)))) G3f72@e))) (set! G3f28@module-import (lambda (G3f53@e G3f54@r) ((lambda (G3f57@t) ((lambda (G3f59@ls/false) (if (and G3f59@ls/false (apply (lambda (G3f5b@id) (G2b3e@id? G3f5b@id)) G3f59@ls/false)) (apply (lambda (G3f5d@id) (call-with-values (lambda () (G2b66@syntax-type G3f5d@id G3f54@r)) (lambda (G3f62@G3f5f G3f63@G3f60 G3f64@G3f61) ((lambda (G3f68@kwd G3f69@value G3f6a@type) ((lambda (G3f6e@t) (if (memv G3f6e@t '($module)) ((lambda (G3f70@iface) (values (G2d88@module-interface-exp-id* G3f70@iface G3f5d@id) (G2d80@module-interface-exp-lab-vec G3f70@iface))) G3f69@value) (G2e1a@syntax-violation '#f '"invalid import" G3f53@e))) G3f6a@type)) G3f64@G3f61 G3f63@G3f60 G3f62@G3f5f)))) G3f59@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3f57@t))) (G2d2f@syntax-dispatch G3f57@t '(_ any)))) G3f53@e))) (set! G3f2a@library-import (lambda (G3f39@e) ((lambda (G3f3b@t) ((lambda (G3f3d@ls/false) (if G3f3d@ls/false (apply (lambda (G3f3f@ctxt G3f40@imp*) (call-with-values (lambda () (G2d96@parse-import-spec* (G2e20@syntax->datum G3f40@imp*))) (lambda (G3f45@G3f43 G3f46@G3f44) ((lambda (G3f49@subst-labels G3f4a@subst-names) (values (vector-map (lambda (G3f4d@name) (G2b1c@datum->stx G3f3f@ctxt G3f4d@name)) G3f4a@subst-names) G3f49@subst-labels)) G3f46@G3f44 G3f45@G3f43)))) G3f3d@ls/false) ((lambda (G3f4f@t) ((lambda (G3f51@ls/false) (if G3f51@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"invalid import form" G3f39@e)) G3f51@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3f4f@t))) (G2d2f@syntax-dispatch G3f4f@t '_))) G3f3b@t))) (G2d2f@syntax-dispatch G3f3b@t '(any . each-any)))) G3f39@e))) (begin (call-with-values (lambda () (if (G3f26@module-import? G3e9a@e) (G3f28@module-import G3e9a@e G3e87@r) (G3f2a@library-import G3e9a@e))) (lambda (G3f2d@G3f2b G3f2e@G3f2c) ((lambda (G3f31@lab* G3f32@id*) (vector-for-each (lambda (G3f35@id G3f36@lab) (G2aef@extend-rib! G3e8e@rib G3f35@id G3f36@lab)) G3f32@id* G3f31@lab*)) G3f2e@G3f2c G3f2d@G3f2b))) (G2d8c@chi-body* (cdr G3e86@e*) G3e87@r G3e88@mr G3e89@lex* G3e8a@rhs* G3e8b@mod** G3eab@kwd* G3e8d@exp* G3e8e@rib G3e8f@top?)))) '#f '#f '#f))) (if G3e8f@top? (G2d8c@chi-body* (cdr G3e86@e*) G3e87@r G3e88@mr (cons (G2abe@gen-lexical 'dummy) G3e89@lex*) (cons (cons 'top-expr G3e9a@e) G3e8a@rhs*) G3e8b@mod** G3eab@kwd* G3e8d@exp* G3e8e@rib G3e8f@top?) (values G3e86@e* G3e87@r G3e88@mr G3e89@lex* G3e8a@rhs* G3e8b@mod** G3eab@kwd* G3e8d@exp*)))))))))))))) G3ea7@type)) (if (G2b3e@id? G3ea5@kwd) (cons G3ea5@kwd G3e8c@kwd*) G3e8c@kwd*))) G3ea1@G3e9e G3ea0@G3e9d G3e9f@G3e9c)))) (car G3e86@e*))))) (set! G2d8e@expand-transformer (lambda (G3f86@expr G3f87@r) ((lambda (G3f8a@rtc) ((lambda (G3f8c@expanded-rhs) (begin (for-each ((lambda (G3f8e@mark-visit) (lambda (G3f90@x) (begin (G2966@G280d@invoke-library G3f90@x) (G3f8e@mark-visit G3f90@x)))) (G2d9e@vis-collector)) (G3f8a@rtc)) G3f8c@expanded-rhs)) ((lambda (G3f96@G3f92 G3f97@G3f93 G3f98@G3f94 G3f99@G3f95) ((lambda (G3f9e@swap) (dynamic-wind G3f9e@swap (lambda () (G2d53@chi-expr G3f86@expr G3f87@r G3f87@r)) G3f9e@swap)) (lambda () (begin ((lambda (G3fa0@t) (begin (G3f96@G3f92 G3f98@G3f94) (set! G3f98@G3f94 G3fa0@t))) (G3f96@G3f92)) ((lambda (G3fa2@t) (begin (G3f97@G3f93 G3f99@G3f95) (set! G3f99@G3f95 G3fa2@t))) (G3f97@G3f93)))))) G2d9c@inv-collector G2d9e@vis-collector G3f8a@rtc (lambda (G3fa4@x) (values))))) (G2d9a@make-collector)))) (set! G2d90@parse-exports (lambda (G3fa6@exp*) ((letrec ((G3fa8@f (lambda (G3faa@exp* G3fab@int* G3fac@ext*) (if (null? G3faa@exp*) (begin (if (not (G2b48@valid-bound-ids? G3fac@ext*)) (G2e1a@syntax-violation 'export '"invalid exports" (G2d67@find-dups G3fac@ext*)) (void)) (values (map G2e20@syntax->datum G3fac@ext*) G3fab@int*)) ((lambda (G3fb0@t) ((lambda (G3fb2@ls/false) (if G3fb2@ls/false (apply (lambda (G3fb4@rename G3fb5@i* G3fb6@e*) (begin (if (not (and (eq? (G2e20@syntax->datum G3fb4@rename) 'rename) (for-all G2b3e@id? G3fb5@i*) (for-all G2b3e@id? G3fb6@e*))) (G2e1a@syntax-violation 'export '"invalid export specifier" (car G3faa@exp*)) (void)) (G3fa8@f (cdr G3faa@exp*) (append G3fb5@i* G3fab@int*) (append G3fb6@e* G3fac@ext*)))) G3fb2@ls/false) ((lambda (G3fba@t) ((lambda (G3fbc@ls/false) (if G3fbc@ls/false (apply (lambda (G3fbe@ie) (begin (if (not (G2b3e@id? G3fbe@ie)) (G2e1a@syntax-violation 'export '"invalid export" G3fbe@ie) (void)) (G3fa8@f (cdr G3faa@exp*) (cons G3fbe@ie G3fab@int*) (cons G3fbe@ie G3fac@ext*)))) G3fbc@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3fba@t))) (G2d2f@syntax-dispatch G3fba@t 'any))) G3fb0@t))) (G2d2f@syntax-dispatch G3fb0@t '(any . #(each (any any)))))) (car G3faa@exp*)))))) G3fa8@f) G3fa6@exp* '() '()))) (set! G2d92@parse-library-name (lambda (G3fc0@spec) ((lambda (G3fc3@parse) (begin (set! G3fc3@parse (lambda (G3fce@x) ((lambda (G3fd0@t) ((lambda (G3fd2@ls/false) (if (and G3fd2@ls/false (apply (lambda (G3fd4@v*) (for-all (lambda (G3fd6@x) ((lambda (G3fd8@x) (and (integer? G3fd8@x) (exact? G3fd8@x))) (G2e20@syntax->datum G3fd6@x))) G3fd4@v*)) G3fd2@ls/false)) (apply (lambda (G3fda@v*) (values '() (map G2e20@syntax->datum G3fda@v*))) G3fd2@ls/false) ((lambda (G3fdc@t) ((lambda (G3fde@ls/false) (if (and G3fde@ls/false (apply (lambda (G3fe0@x G3fe1@rest) (symbol? (G2e20@syntax->datum G3fe0@x))) G3fde@ls/false)) (apply (lambda (G3fe4@x G3fe5@rest) (call-with-values (lambda () (G3fc3@parse G3fe5@rest)) (lambda (G3fea@G3fe8 G3feb@G3fe9) ((lambda (G3fee@v* G3fef@x*) (values (cons (G2e20@syntax->datum G3fe4@x) G3fef@x*) G3fee@v*)) G3feb@G3fe9 G3fea@G3fe8)))) G3fde@ls/false) ((lambda (G3ff2@t) ((lambda (G3ff4@ls/false) (if G3ff4@ls/false (apply (lambda () (values '() '())) G3ff4@ls/false) ((lambda (G3ff6@t) ((lambda (G3ff8@ls/false) (if G3ff8@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"invalid library name" G3fc0@spec)) G3ff8@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G3ff6@t))) (G2d2f@syntax-dispatch G3ff6@t '_))) G3ff2@t))) (G2d2f@syntax-dispatch G3ff2@t '()))) G3fdc@t))) (G2d2f@syntax-dispatch G3fdc@t '(any . any)))) G3fd0@t))) (G2d2f@syntax-dispatch G3fd0@t '(each-any)))) G3fce@x))) (call-with-values (lambda () (G3fc3@parse G3fc0@spec)) (lambda (G3fc6@G3fc4 G3fc7@G3fc5) ((lambda (G3fca@ver* G3fcb@name*) (begin (if (null? G3fcb@name*) (G2e1a@syntax-violation '#f '"empty library name" G3fc0@spec) (void)) (values G3fcb@name* G3fca@ver*))) G3fc7@G3fc5 G3fc6@G3fc4))))) '#f))) (set! G2d94@parse-library (lambda (G3ffa@e) ((lambda (G3ffc@t) ((lambda (G3ffe@ls/false) (if (and G3ffe@ls/false (apply (lambda (G4000@library G4001@name* G4002@export G4003@exp* G4004@import G4005@imp* G4006@b*) (and (eq? (G2e20@syntax->datum G4002@export) 'export) (eq? (G2e20@syntax->datum G4004@import) 'import) (eq? (G2e20@syntax->datum G4000@library) 'library))) G3ffe@ls/false)) (apply (lambda (G400e@library G400f@name* G4010@export G4011@exp* G4012@import G4013@imp* G4014@b*) (values G400f@name* G4011@exp* G4013@imp* G4014@b*)) G3ffe@ls/false) ((lambda (G401c@t) ((lambda (G401e@ls/false) (if G401e@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"malformed library" G3ffa@e)) G401e@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G401c@t))) (G2d2f@syntax-dispatch G401c@t '_))) G3ffc@t))) (G2d2f@syntax-dispatch G3ffc@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G3ffa@e))) (set! G2d96@parse-import-spec* ((lambda () ((lambda (G4021@idsyn? G4023@dup-error G4025@merge-substs G4027@exclude* G4029@find* G402b@rem* G402d@remove-dups G402f@parse-library-name G4031@import-library G4033@get-import G4035@add-imports!) (begin (set! G4021@idsyn? (lambda (G4220@x) (symbol? (G2e20@syntax->datum G4220@x)))) (set! G4023@dup-error (lambda (G421e@name) (G2e1a@syntax-violation 'import '"two imports with different bindings" G421e@name))) (set! G4025@merge-substs (lambda (G420c@s G420d@subst) ((lambda (G4211@insert-to-subst) (begin (set! G4211@insert-to-subst (lambda (G4212@a G4213@subst) ((lambda (G4216@name G4217@label) ((lambda (G421a@t) (if G421a@t ((lambda (G421c@x) (if (eq? (cdr G421c@x) G4217@label) G4213@subst (G4023@dup-error G4216@name))) G421a@t) (cons G4212@a G4213@subst))) (assq G4216@name G4213@subst))) (car G4212@a) (cdr G4212@a)))) (if (null? G420c@s) G420d@subst (G4211@insert-to-subst (car G420c@s) (G4025@merge-substs (cdr G420c@s) G420d@subst))))) '#f))) (set! G4027@exclude* (lambda (G41e2@sym* G41e3@subst) ((lambda (G41e7@exclude) (begin (set! G41e7@exclude (lambda (G41fc@sym G41fd@subst) (if (null? G41fd@subst) (G2e1a@syntax-violation 'import '"cannot rename unbound identifier" G41fc@sym) (if (eq? G41fc@sym (caar G41fd@subst)) (values (cdar G41fd@subst) (cdr G41fd@subst)) ((lambda (G4200@a) (call-with-values (lambda () (G41e7@exclude G41fc@sym (cdr G41fd@subst))) (lambda (G4204@G4202 G4205@G4203) ((lambda (G4208@subst G4209@old) (values G4209@old (cons G4200@a G4208@subst))) G4205@G4203 G4204@G4202)))) (car G41fd@subst)))))) (if (null? G41e2@sym*) (values '() G41e3@subst) (call-with-values (lambda () (G41e7@exclude (car G41e2@sym*) G41e3@subst)) (lambda (G41ea@G41e8 G41eb@G41e9) ((lambda (G41ee@subst G41ef@old) (call-with-values (lambda () (G4027@exclude* (cdr G41e2@sym*) G41ee@subst)) (lambda (G41f4@G41f2 G41f5@G41f3) ((lambda (G41f8@subst G41f9@old*) (values (cons G41ef@old G41f9@old*) G41f8@subst)) G41f5@G41f3 G41f4@G41f2)))) G41eb@G41e9 G41ea@G41e8)))))) '#f))) (set! G4029@find* (lambda (G41da@sym* G41db@subst) (map (lambda (G41de@x) ((lambda (G41e0@t) (if G41e0@t (cdr G41e0@t) (G2e1a@syntax-violation 'import '"cannot find identifier" G41de@x))) (assq G41de@x G41db@subst))) G41da@sym*))) (set! G402b@rem* (lambda (G41d2@sym* G41d3@subst) ((letrec ((G41d6@f (lambda (G41d8@subst) (if (null? G41d8@subst) '() (if (memq (caar G41d8@subst) G41d2@sym*) (G41d6@f (cdr G41d8@subst)) (cons (car G41d8@subst) (G41d6@f (cdr G41d8@subst)))))))) G41d6@f) G41d3@subst))) (set! G402d@remove-dups (lambda (G41d0@ls) (if (null? G41d0@ls) '() (if (memq (car G41d0@ls) (cdr G41d0@ls)) (G402d@remove-dups (cdr G41d0@ls)) (cons (car G41d0@ls) (G402d@remove-dups (cdr G41d0@ls))))))) (set! G402f@parse-library-name (lambda (G40ea@spec) ((lambda (G40ed@subversion? G40ef@subversion-pred G40f1@version-pred) (begin (set! G40ed@subversion? (lambda (G41cc@x) ((lambda (G41ce@x) (and (integer? G41ce@x) (exact? G41ce@x) (>= G41ce@x '0))) (G2e20@syntax->datum G41cc@x)))) (set! G40ef@subversion-pred (lambda (G416c@x*) ((lambda (G416e@t) ((lambda (G4170@ls/false) (if (and G4170@ls/false (apply (lambda (G4172@n) (G40ed@subversion? G4172@n)) G4170@ls/false)) (apply (lambda (G4174@n) (lambda (G4176@x) (= G4176@x (G2e20@syntax->datum G4174@n)))) G4170@ls/false) ((lambda (G4178@t) ((lambda (G417a@ls/false) (if (and G417a@ls/false (apply (lambda (G417c@p? G417d@sub*) (eq? (G2e20@syntax->datum G417c@p?) 'and)) G417a@ls/false)) (apply (lambda (G4180@p? G4181@sub*) ((lambda (G4184@p*) (lambda (G4186@x) (for-all (lambda (G4188@p) (G4188@p G4186@x)) G4184@p*))) (map G40ef@subversion-pred G4181@sub*))) G417a@ls/false) ((lambda (G418a@t) ((lambda (G418c@ls/false) (if (and G418c@ls/false (apply (lambda (G418e@p? G418f@sub*) (eq? (G2e20@syntax->datum G418e@p?) 'or)) G418c@ls/false)) (apply (lambda (G4192@p? G4193@sub*) ((lambda (G4196@p*) (lambda (G4198@x) (exists (lambda (G419a@p) (G419a@p G4198@x)) G4196@p*))) (map G40ef@subversion-pred G4193@sub*))) G418c@ls/false) ((lambda (G419c@t) ((lambda (G419e@ls/false) (if (and G419e@ls/false (apply (lambda (G41a0@p? G41a1@sub) (eq? (G2e20@syntax->datum G41a0@p?) 'not)) G419e@ls/false)) (apply (lambda (G41a4@p? G41a5@sub) ((lambda (G41a8@p) (lambda (G41aa@x) (not (G41a8@p G41aa@x)))) (G40ef@subversion-pred G41a5@sub))) G419e@ls/false) ((lambda (G41ac@t) ((lambda (G41ae@ls/false) (if (and G41ae@ls/false (apply (lambda (G41b0@p? G41b1@n) (and (eq? (G2e20@syntax->datum G41b0@p?) '<=) (G40ed@subversion? G41b1@n))) G41ae@ls/false)) (apply (lambda (G41b4@p? G41b5@n) (lambda (G41b8@x) (<= G41b8@x (G2e20@syntax->datum G41b5@n)))) G41ae@ls/false) ((lambda (G41ba@t) ((lambda (G41bc@ls/false) (if (and G41bc@ls/false (apply (lambda (G41be@p? G41bf@n) (and (eq? (G2e20@syntax->datum G41be@p?) '>=) (G40ed@subversion? G41bf@n))) G41bc@ls/false)) (apply (lambda (G41c2@p? G41c3@n) (lambda (G41c6@x) (>= G41c6@x (G2e20@syntax->datum G41c3@n)))) G41bc@ls/false) ((lambda (G41c8@t) ((lambda (G41ca@ls/false) (if G41ca@ls/false (apply (lambda () (G2e1a@syntax-violation 'import '"invalid sub-version spec" G40ea@spec G416c@x*)) G41ca@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G41c8@t))) (G2d2f@syntax-dispatch G41c8@t '_))) G41ba@t))) (G2d2f@syntax-dispatch G41ba@t '(any any)))) G41ac@t))) (G2d2f@syntax-dispatch G41ac@t '(any any)))) G419c@t))) (G2d2f@syntax-dispatch G419c@t '(any any)))) G418a@t))) (G2d2f@syntax-dispatch G418a@t '(any . each-any)))) G4178@t))) (G2d2f@syntax-dispatch G4178@t '(any . each-any)))) G416e@t))) (G2d2f@syntax-dispatch G416e@t 'any))) G416c@x*))) (set! G40f1@version-pred (lambda (G411c@x*) ((lambda (G411e@t) ((lambda (G4120@ls/false) (if G4120@ls/false (apply (lambda () (lambda (G4122@x) '#t)) G4120@ls/false) ((lambda (G4124@t) ((lambda (G4126@ls/false) (if (and G4126@ls/false (apply (lambda (G4128@c G4129@ver*) (eq? (G2e20@syntax->datum G4128@c) 'and)) G4126@ls/false)) (apply (lambda (G412c@c G412d@ver*) ((lambda (G4130@p*) (lambda (G4132@x) (for-all (lambda (G4134@p) (G4134@p G4132@x)) G4130@p*))) (map G40f1@version-pred G412d@ver*))) G4126@ls/false) ((lambda (G4136@t) ((lambda (G4138@ls/false) (if (and G4138@ls/false (apply (lambda (G413a@c G413b@ver*) (eq? (G2e20@syntax->datum G413a@c) 'or)) G4138@ls/false)) (apply (lambda (G413e@c G413f@ver*) ((lambda (G4142@p*) (lambda (G4144@x) (exists (lambda (G4146@p) (G4146@p G4144@x)) G4142@p*))) (map G40f1@version-pred G413f@ver*))) G4138@ls/false) ((lambda (G4148@t) ((lambda (G414a@ls/false) (if (and G414a@ls/false (apply (lambda (G414c@c G414d@ver) (eq? (G2e20@syntax->datum G414c@c) 'not)) G414a@ls/false)) (apply (lambda (G4150@c G4151@ver) ((lambda (G4154@p) (lambda (G4156@x) (not (G4154@p G4156@x)))) (G40f1@version-pred G4151@ver))) G414a@ls/false) ((lambda (G4158@t) ((lambda (G415a@ls/false) (if G415a@ls/false (apply (lambda (G415c@sub*) ((lambda (G415e@p*) (lambda (G4160@x) ((letrec ((G4162@f (lambda (G4164@p* G4165@x) (if (null? G4164@p*) '#t (if (null? G4165@x) '#f (and ((car G4164@p*) (car G4165@x)) (G4162@f (cdr G4164@p*) (cdr G4165@x)))))))) G4162@f) G415e@p* G4160@x))) (map G40ef@subversion-pred G415c@sub*))) G415a@ls/false) ((lambda (G4168@t) ((lambda (G416a@ls/false) (if G416a@ls/false (apply (lambda () (G2e1a@syntax-violation 'import '"invalid version spec" G40ea@spec G411c@x*)) G416a@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G4168@t))) (G2d2f@syntax-dispatch G4168@t '_))) G4158@t))) (G2d2f@syntax-dispatch G4158@t 'each-any))) G4148@t))) (G2d2f@syntax-dispatch G4148@t '(any any)))) G4136@t))) (G2d2f@syntax-dispatch G4136@t '(any . each-any)))) G4124@t))) (G2d2f@syntax-dispatch G4124@t '(any . each-any)))) G411e@t))) (G2d2f@syntax-dispatch G411e@t '()))) G411c@x*))) ((letrec ((G40f2@f (lambda (G40f4@x) ((lambda (G40f6@t) ((lambda (G40f8@ls/false) (if G40f8@ls/false (apply (lambda (G40fa@version-spec*) (values '() (G40f1@version-pred G40fa@version-spec*))) G40f8@ls/false) ((lambda (G40fc@t) ((lambda (G40fe@ls/false) (if (and G40fe@ls/false (apply (lambda (G4100@x G4101@x*) (G4021@idsyn? G4100@x)) G40fe@ls/false)) (apply (lambda (G4104@x G4105@x*) (call-with-values (lambda () (G40f2@f G4105@x*)) (lambda (G410a@G4108 G410b@G4109) ((lambda (G410e@pred G410f@name) (values (cons (G2e20@syntax->datum G4104@x) G410f@name) G410e@pred)) G410b@G4109 G410a@G4108)))) G40fe@ls/false) ((lambda (G4112@t) ((lambda (G4114@ls/false) (if G4114@ls/false (apply (lambda () (values '() (lambda (G4116@x) '#t))) G4114@ls/false) ((lambda (G4118@t) ((lambda (G411a@ls/false) (if G411a@ls/false (apply (lambda () (G2e1a@syntax-violation '#f '"invalid import spec" G40ea@spec)) G411a@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G4118@t))) (G2d2f@syntax-dispatch G4118@t '_))) G4112@t))) (G2d2f@syntax-dispatch G4112@t '()))) G40fc@t))) (G2d2f@syntax-dispatch G40fc@t '(any . any)))) G40f6@t))) (G2d2f@syntax-dispatch G40f6@t '(each-any)))) G40f4@x)))) G40f2@f) G40ea@spec))) '#f '#f '#f))) (set! G4031@import-library (lambda (G40dc@spec*) (call-with-values (lambda () (G402f@parse-library-name G40dc@spec*)) (lambda (G40e0@G40de G40e1@G40df) ((lambda (G40e4@pred G40e5@name) (begin (if (null? G40e5@name) (G2e1a@syntax-violation 'import '"empty library name" G40dc@spec*) (void)) ((lambda (G40e8@lib) (begin (if (not G40e8@lib) (G2e1a@syntax-violation 'import '"cannot find library with required name" G40e5@name) (void)) (if (not (G40e4@pred (G2937@G27af@library-version G40e8@lib))) (G2e1a@syntax-violation 'import '"library does not satisfy version specification" G40dc@spec* G40e8@lib) (void)) ((G2da0@imp-collector) G40e8@lib) (G293b@G27b7@library-subst G40e8@lib))) (G295f@G27ff@find-library-by-name G40e5@name)))) G40e1@G40df G40e0@G40de))))) (set! G4033@get-import (lambda (G404e@spec) ((lambda (G4050@t) ((lambda (G4052@ls/false) (if (and G4052@ls/false (apply (lambda (G4054@x G4055@x*) (not (memq (G2e20@syntax->datum G4054@x) '(for rename except only prefix library)))) G4052@ls/false)) (apply (lambda (G4058@x G4059@x*) (G4031@import-library (cons G4058@x G4059@x*))) G4052@ls/false) ((lambda (G405c@t) ((lambda (G405e@ls/false) (if (and G405e@ls/false (apply (lambda (G4060@rename G4061@isp G4062@old* G4063@new*) (and (eq? (G2e20@syntax->datum G4060@rename) 'rename) (for-all G4021@idsyn? G4062@old*) (for-all G4021@idsyn? G4063@new*))) G405e@ls/false)) (apply (lambda (G4068@rename G4069@isp G406a@old* G406b@new*) ((lambda (G4070@subst G4071@old* G4072@new*) ((lambda (G4076@old-label*) ((lambda (G4078@subst) (G4025@merge-substs (map cons G4072@new* G4076@old-label*) G4078@subst)) (G402b@rem* G4071@old* G4070@subst))) (G4029@find* G4071@old* G4070@subst))) (G4033@get-import G4069@isp) (map G2e20@syntax->datum G406a@old*) (map G2e20@syntax->datum G406b@new*))) G405e@ls/false) ((lambda (G407a@t) ((lambda (G407c@ls/false) (if (and G407c@ls/false (apply (lambda (G407e@except G407f@isp G4080@sym*) (and (eq? (G2e20@syntax->datum G407e@except) 'except) (for-all G4021@idsyn? G4080@sym*))) G407c@ls/false)) (apply (lambda (G4084@except G4085@isp G4086@sym*) ((lambda (G408a@subst) (G402b@rem* (map G2e20@syntax->datum G4086@sym*) G408a@subst)) (G4033@get-import G4085@isp))) G407c@ls/false) ((lambda (G408c@t) ((lambda (G408e@ls/false) (if (and G408e@ls/false (apply (lambda (G4090@only G4091@isp G4092@sym*) (and (eq? (G2e20@syntax->datum G4090@only) 'only) (for-all G4021@idsyn? G4092@sym*))) G408e@ls/false)) (apply (lambda (G4096@only G4097@isp G4098@sym*) ((lambda (G409c@subst G409d@sym*) ((lambda (G40a0@sym*) ((lambda (G40a2@lab*) (map cons G40a0@sym* G40a2@lab*)) (G4029@find* G40a0@sym* G409c@subst))) (G402d@remove-dups G409d@sym*))) (G4033@get-import G4097@isp) (map G2e20@syntax->datum G4098@sym*))) G408e@ls/false) ((lambda (G40a4@t) ((lambda (G40a6@ls/false) (if (and G40a6@ls/false (apply (lambda (G40a8@prefix G40a9@isp G40aa@p) (and (eq? (G2e20@syntax->datum G40a8@prefix) 'prefix) (G4021@idsyn? G40aa@p))) G40a6@ls/false)) (apply (lambda (G40ae@prefix G40af@isp G40b0@p) ((lambda (G40b4@subst G40b5@prefix) (map (lambda (G40b8@x) (cons (string->symbol (string-append G40b5@prefix (symbol->string (car G40b8@x)))) (cdr G40b8@x))) G40b4@subst)) (G4033@get-import G40af@isp) (symbol->string (G2e20@syntax->datum G40b0@p)))) G40a6@ls/false) ((lambda (G40ba@t) ((lambda (G40bc@ls/false) (if (and G40bc@ls/false (apply (lambda (G40be@library G40bf@spec*) (eq? (G2e20@syntax->datum G40be@library) 'library)) G40bc@ls/false)) (apply (lambda (G40c2@library G40c3@spec*) (G4031@import-library G40c3@spec*)) G40bc@ls/false) ((lambda (G40c6@t) ((lambda (G40c8@ls/false) (if (and G40c8@ls/false (apply (lambda (G40ca@for G40cb@isp G40cc@rest) (eq? (G2e20@syntax->datum G40ca@for) 'for)) G40c8@ls/false)) (apply (lambda (G40d0@for G40d1@isp G40d2@rest) (G4033@get-import G40d1@isp)) G40c8@ls/false) ((lambda (G40d6@t) ((lambda (G40d8@ls/false) (if G40d8@ls/false (apply (lambda (G40da@spec) (G2e1a@syntax-violation 'import '"invalid import spec" G40da@spec)) G40d8@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G40d6@t))) (G2d2f@syntax-dispatch G40d6@t 'any))) G40c6@t))) (G2d2f@syntax-dispatch G40c6@t '(any any . any)))) G40ba@t))) (G2d2f@syntax-dispatch G40ba@t '(any each-any)))) G40a4@t))) (G2d2f@syntax-dispatch G40a4@t '(any any any)))) G408c@t))) (G2d2f@syntax-dispatch G408c@t '(any any . each-any)))) G407a@t))) (G2d2f@syntax-dispatch G407a@t '(any any . each-any)))) G405c@t))) (G2d2f@syntax-dispatch G405c@t '(any any . #(each (any any)))))) G4050@t))) (G2d2f@syntax-dispatch G4050@t '(any . each-any)))) G404e@spec))) (set! G4035@add-imports! (lambda (G403e@imp G403f@h) ((lambda (G4042@subst) (for-each (lambda (G4044@x) ((lambda (G4046@name G4047@label) ((lambda (G404a@t) (if G404a@t ((lambda (G404c@l) (if (not (eq? G404c@l G4047@label)) (G4023@dup-error G4046@name) (void))) G404a@t) (hashtable-set! G403f@h G4046@name G4047@label))) (hashtable-ref G403f@h G4046@name '#f))) (car G4044@x) (cdr G4044@x))) G4042@subst)) (G4033@get-import G403e@imp)))) (lambda (G4036@imp*) ((letrec ((G4038@f (lambda (G403a@imp* G403b@h) (if (null? G403a@imp*) (hashtable-entries G403b@h) (begin (G4035@add-imports! (car G403a@imp*) G403b@h) (G4038@f (cdr G403a@imp*) G403b@h)))))) G4038@f) G4036@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d98@make-top-rib (lambda (G4222@names G4223@labels) ((lambda (G4226@rib) (begin (vector-for-each (lambda (G4228@name G4229@label) (begin (if (not (symbol? G4228@name)) (error 'make-top-rib '"BUG: not a symbol" G4228@name) (void)) (G2af1@extend-rib/nc! G4226@rib (G2b08@make-stx G4228@name G2aba@top-mark* '() '()) G4229@label))) G4222@names G4223@labels) G4226@rib)) (G2aed@make-empty-rib)))) (set! G2d9a@make-collector (lambda () ((lambda (G422c@ls) (lambda G4230 ((lambda (G4231) (if (= G4231 '0) (apply (lambda () G422c@ls) G4230) (if (= G4231 '1) (apply (lambda (G422e@x) (set! G422c@ls (G2ab3@set-cons G422e@x G422c@ls))) G4230) (error 'apply '"invalid arg count")))) (length G4230)))) '()))) (set! G2d9c@inv-collector (G26f2@G2620@make-parameter (lambda G4232@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4234@x) (begin (if (not (procedure? G4234@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4234@x) (void)) G4234@x)))) (set! G2d9e@vis-collector (G26f2@G2620@make-parameter (lambda G4236@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G4238@x) (begin (if (not (procedure? G4238@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G4238@x) (void)) G4238@x)))) (set! G2da0@imp-collector (G26f2@G2620@make-parameter (lambda G423a@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G423c@x) (begin (if (not (procedure? G423c@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G423c@x) (void)) G423c@x)))) (set! G2da2@chi-library-internal (lambda (G423e@e* G423f@rib G4240@top?) (call-with-values (lambda () (G2d8c@chi-body* G423e@e* '() '() '() '() '() '() '() G423f@rib G4240@top?)) (lambda (G424c@G4244 G424d@G4245 G424e@G4246 G424f@G4247 G4250@G4248 G4251@G4249 G4252@G424a G4253@G424b) ((lambda (G425c@exp* G425d@_kwd* G425e@mod** G425f@rhs* G4260@lex* G4261@mr G4262@r G4263@e*) (values (append (apply append (reverse G425e@mod**)) G4263@e*) G4262@r G4261@mr (reverse G4260@lex*) (reverse G425f@rhs*) G425c@exp*)) G4253@G424b G4252@G424a G4251@G4249 G4250@G4248 G424f@G4247 G424e@G4246 G424d@G4245 G424c@G4244))))) (set! G2da4@chi-interaction-expr (lambda (G426c@e G426d@rib G426e@r) (call-with-values (lambda () (G2d8c@chi-body* (list G426c@e) G426e@r G426e@r '() '() '() '() '() G426d@rib '#t)) (lambda (G427a@G4272 G427b@G4273 G427c@G4274 G427d@G4275 G427e@G4276 G427f@G4277 G4280@G4278 G4281@G4279) ((lambda (G428a@_exp* G428b@_kwd* G428c@mod** G428d@rhs* G428e@lex* G428f@mr G4290@r G4291@e*) ((lambda (G429a@e*) ((lambda (G429c@e) (values G429c@e G4290@r)) (if (null? G429a@e*) (G2aa0@G2a12@build-void) (if (null? (cdr G429a@e*)) (car G429a@e*) (G2a9f@G2a10@build-sequence '#f G429a@e*))))) (G2d61@expand-interaction-rhs*/init* (reverse G428e@lex*) (reverse G428d@rhs*) (append (apply append (reverse G428c@mod**)) G4291@e*) G4290@r G428f@mr))) G4281@G4279 G4280@G4278 G427f@G4277 G427e@G4276 G427d@G4275 G427c@G4274 G427b@G4273 G427a@G4272))))) (set! G2da6@library-body-expander (lambda (G429e@name G429f@main-exp* G42a0@imp* G42a1@b* G42a2@top?) ((lambda (G42a9@itc) (begin (set! G42a9@itc (G2d9a@make-collector)) ((lambda (G42ae@G42aa G42af@G42ab G42b0@G42ac G42b1@G42ad) ((lambda (G42b6@swap) (dynamic-wind G42b6@swap (lambda () (call-with-values (lambda () (G2d96@parse-import-spec* G42a0@imp*)) (lambda (G42ba@G42b8 G42bb@G42b9) ((lambda (G42be@subst-labels G42bf@subst-names) ((lambda (G42c2@rib) ((lambda (G42c5@wrap) (begin (set! G42c5@wrap (lambda (G4331@x) (G2b08@make-stx G4331@x G2aba@top-mark* (list G42c2@rib) '()))) ((lambda (G42c6@b* G42c7@main-exp* G42c8@rtc G42c9@vtc) ((lambda (G42d2@G42ce G42d3@G42cf G42d4@G42d0 G42d5@G42d1) ((lambda (G42da@swap) (dynamic-wind G42da@swap (lambda () (call-with-values (lambda () (G2da2@chi-library-internal G42c6@b* G42c2@rib G42a2@top?)) (lambda (G42e2@G42dc G42e3@G42dd G42e4@G42de G42e5@G42df G42e6@G42e0 G42e7@G42e1) ((lambda (G42ee@internal-exp* G42ef@rhs* G42f0@lex* G42f1@mr G42f2@r G42f3@init*) (call-with-values (lambda () (G2d90@parse-exports (append G42c7@main-exp* G42ee@internal-exp*))) (lambda (G42fc@G42fa G42fd@G42fb) ((lambda (G4300@exp-id* G4301@exp-name*) (begin (G2af5@seal-rib! G42c2@rib) ((lambda (G4304@init*) ((lambda (G4306@rhs*) ((lambda () (begin (G2af7@unseal-rib! G42c2@rib) ((lambda (G4308@loc* G4309@export-subst) ((lambda (G430d@errstr) (begin (set! G430d@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G2e06@make-export-env/macros G42f0@lex* G4308@loc* G42f2@r)) (lambda (G4311@G430e G4312@G430f G4313@G4310) ((lambda (G4317@macro* G4318@global* G4319@export-env) (begin (for-each (lambda (G431d@s) ((lambda (G431f@name G4320@label) ((lambda (G4323@p) (if G4323@p ((lambda (G4325@b) ((lambda (G4327@type) (if (eq? G4327@type 'mutable) (G2e1a@syntax-violation 'export G430d@errstr G431f@name) (void))) (car G4325@b))) (cdr G4323@p)) (void))) (assq G4320@label G4319@export-env))) (car G431d@s) (cdr G431d@s))) G4309@export-subst) ((lambda (G4329@invoke-body G432a@invoke-definitions) (values (G42a9@itc) (G42c8@rtc) (G42c9@vtc) (G2a9f@G2a10@build-sequence '#f (append G432a@invoke-definitions (list G4329@invoke-body))) G4317@macro* G4309@export-subst G4319@export-env)) (G2aa2@G2a16@build-letrec* '#f G42f0@lex* G4306@rhs* (G2e02@build-exports G4318@global* G4304@init*)) (map G2a9b@G296d@build-global-define (map cdr G4318@global*))))) G4313@G4310 G4312@G430f G4311@G430e))))) '#f)) (map G2ac0@gen-global G42f0@lex*) (G2e04@make-export-subst G4301@exp-name* G4300@exp-id*)))))) (G2d63@chi-rhs* G42ef@rhs* G42f2@r G42f1@mr))) (G2d4f@chi-expr* G42f3@init* G42f2@r G42f1@mr)))) G42fd@G42fb G42fc@G42fa)))) G42e7@G42e1 G42e6@G42e0 G42e5@G42df G42e4@G42de G42e3@G42dd G42e2@G42dc)))) G42da@swap)) (lambda () (begin ((lambda (G432d@t) (begin (G42d2@G42ce G42d4@G42d0) (set! G42d4@G42d0 G432d@t))) (G42d2@G42ce)) ((lambda (G432f@t) (begin (G42d3@G42cf G42d5@G42d1) (set! G42d5@G42d1 G432f@t))) (G42d3@G42cf)))))) G2d9c@inv-collector G2d9e@vis-collector G42c8@rtc G42c9@vtc)) (map G42c5@wrap G42a1@b*) (map G42c5@wrap G429f@main-exp*) (G2d9a@make-collector) (G2d9a@make-collector)))) '#f)) (G2d98@make-top-rib G42bf@subst-names G42be@subst-labels))) G42bb@G42b9 G42ba@G42b8)))) G42b6@swap)) (lambda () (begin ((lambda (G4333@t) (begin (G42ae@G42aa G42b0@G42ac) (set! G42b0@G42ac G4333@t))) (G42ae@G42aa)) ((lambda (G4335@t) (begin (G42af@G42ab G42b1@G42ad) (set! G42b1@G42ad G4335@t))) (G42af@G42ab)))))) G2da0@imp-collector G2e28@top-level-context G42a9@itc '#f))) '#f))) (set! G2da8@core-library-expander (lambda (G4337@e G4338@verify-name) (call-with-values (lambda () (G2d94@parse-library G4337@e)) (lambda (G433f@G433b G4340@G433c G4341@G433d G4342@G433e) ((lambda (G4347@b* G4348@imp* G4349@exp* G434a@name*) (call-with-values (lambda () (G2d92@parse-library-name G434a@name*)) (lambda (G4351@G434f G4352@G4350) ((lambda (G4355@ver G4356@name) (begin (G4338@verify-name G4356@name) (call-with-values (lambda () (G2da6@library-body-expander G4356@name G4349@exp* G4348@imp* G4347@b* '#f)) (lambda (G4360@G4359 G4361@G435a G4362@G435b G4363@G435c G4364@G435d G4365@G435e G4366@G435f) ((lambda (G436e@export-env G436f@export-subst G4370@visit-code G4371@invoke-code G4372@visit-req* G4373@invoke-req* G4374@imp*) (values G4356@name G4355@ver G4374@imp* G4373@invoke-req* G4372@visit-req* G4371@invoke-code G4370@visit-code G436f@export-subst G436e@export-env)) G4366@G435f G4365@G435e G4364@G435d G4363@G435c G4362@G435b G4361@G435a G4360@G4359))))) G4352@G4350 G4351@G434f)))) G4342@G433e G4341@G433d G4340@G433c G433f@G433b))))) (set! G2daa@parse-top-level-program (lambda (G437c@e*) ((lambda (G437e@t) ((lambda (G4380@ls/false) (if (and G4380@ls/false (apply (lambda (G4382@import G4383@imp* G4384@b*) (eq? (G2e20@syntax->datum G4382@import) 'import)) G4380@ls/false)) (apply (lambda (G4388@import G4389@imp* G438a@b*) (values G4389@imp* G438a@b*)) G4380@ls/false) ((lambda (G438e@t) ((lambda (G4390@ls/false) (if (and G4390@ls/false (apply (lambda (G4392@import G4393@x G4394@y) (eq? (G2e20@syntax->datum G4392@import) 'import)) G4390@ls/false)) (apply (lambda (G4398@import G4399@x G439a@y) (G2e1a@syntax-violation 'expander '"invalid syntax of top-level program" (G2b38@syntax-car G437c@e*))) G4390@ls/false) ((lambda (G439e@t) ((lambda (G43a0@ls/false) (if G43a0@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G43a0@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G439e@t))) (G2d2f@syntax-dispatch G439e@t '_))) G438e@t))) (G2d2f@syntax-dispatch G438e@t '((any . any) . any)))) G437e@t))) (G2d2f@syntax-dispatch G437e@t '((any . each-any) . each-any)))) G437c@e*))) (set! G2dac@top-level-expander (lambda (G43a2@e*) (call-with-values (lambda () (G2daa@parse-top-level-program G43a2@e*)) (lambda (G43a6@G43a4 G43a7@G43a5) ((lambda (G43aa@b* G43ab@imp*) (call-with-values (lambda () (G2da6@library-body-expander '() '() G43ab@imp* G43aa@b* '#t)) (lambda (G43b5@G43ae G43b6@G43af G43b7@G43b0 G43b8@G43b1 G43b9@G43b2 G43ba@G43b3 G43bb@G43b4) ((lambda (G43c3@export-env G43c4@export-subst G43c5@visit-code G43c6@invoke-code G43c7@visit-req* G43c8@invoke-req* G43c9@imp*) (values G43c8@invoke-req* G43c6@invoke-code)) G43bb@G43b4 G43ba@G43b3 G43b9@G43b2 G43b8@G43b1 G43b7@G43b0 G43b6@G43af G43b5@G43ae)))) G43a7@G43a5 G43a6@G43a4))))) (set! G2db2@G2dad (make-record-type-descriptor 'env '#f 'G2db0 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2db4@G2daf '#f) (set! G2db6@G2dae (make-record-constructor-descriptor G2db2@G2dad '#f G2db4@G2daf)) (set! G2db9@env? (record-predicate G2db2@G2dad)) (set! G2dbb@make-env (record-constructor G2db6@G2dae)) (set! G2dbd@env-names (record-accessor G2db2@G2dad '0)) (set! G2dbf@env-labels (record-accessor G2db2@G2dad '1)) (set! G2dc1@env-itc (record-accessor G2db2@G2dad '2)) (set! G2dc3@set-env-names! (record-mutator G2db2@G2dad '0)) (set! G2dc5@set-env-labels! (record-mutator G2db2@G2dad '1)) (set! G2dc7@set-env-itc! (record-mutator G2db2@G2dad '2)) (set! G2dc9@rp (G26ef@G261a@make-record-printer 'env (lambda (G43d1@x G43d2@p G43d3@wr) (display '"#<environment>" G43d2@p)))) (set! G2dcf@G2dca (make-record-type-descriptor 'interaction-env '#f 'G2dcd '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2dd1@G2dcc '#f) (set! G2dd3@G2dcb (make-record-constructor-descriptor G2dcf@G2dca '#f G2dd1@G2dcc)) (set! G2dd6@interaction-env? (record-predicate G2dcf@G2dca)) (set! G2dd8@make-interaction-env (record-constructor G2dd3@G2dcb)) (set! G2dda@interaction-env-rib (record-accessor G2dcf@G2dca '0)) (set! G2ddc@interaction-env-r (record-accessor G2dcf@G2dca '1)) (set! G2dde@interaction-env-locs (record-accessor G2dcf@G2dca '2)) (set! G2de0@set-interaction-env-rib! (record-mutator G2dcf@G2dca '0)) (set! G2de2@set-interaction-env-r! (record-mutator G2dcf@G2dca '1)) (set! G2de4@set-interaction-env-locs! (record-mutator G2dcf@G2dca '2)) (set! G2de6@rp (G26ef@G261a@make-record-printer 'interaction-env (lambda (G43d7@x G43d8@p G43d9@wr) (display '"#<environment>" G43d8@p)))) (set! G2de8@interaction-environment-symbols (lambda () (G2df0@environment-symbols (G2e26@interaction-environment)))) (set! G2dea@environment-bindings (lambda (G43dd@e) (vector->list (vector-map (lambda (G43df@name G43e0@label) (G2dec@parse-binding (cons G43df@name (G2965@G280b@imported-label->binding G43e0@label)))) (G2dbd@env-names G43dd@e) (G2dbf@env-labels G43dd@e))))) (set! G2dec@parse-binding (lambda (G43e3@b) (cons (car G43e3@b) ((lambda (G43e5@t) (if (memv G43e5@t '(core-prim global)) 'procedure (if (memv G43e5@t '(core-macro macro global-macro)) 'syntax (if (memv G43e5@t '($core-rtd)) 'record (if (eq? (car G43e3@b) (cadr G43e3@b)) 'syntax 'unknown))))) (cadr G43e3@b))))) (set! G2dee@environment? (lambda (G43e7@x) (or (G2db9@env? G43e7@x) (G2dd6@interaction-env? G43e7@x)))) (set! G2df0@environment-symbols (lambda (G43e9@x) (if (G2db9@env? G43e9@x) (vector->list (G2dbd@env-names G43e9@x)) (if (G2dd6@interaction-env? G43e9@x) (map values (G2ad9@rib-sym* (G2dda@interaction-env-rib G43e9@x))) (assertion-violation 'environment-symbols '"not an environment" G43e9@x))))) (set! G2df2@environment (lambda G43eb@imp* ((lambda (G43ed@itc) ((lambda (G43f1@G43ef G43f2@G43f0) ((lambda (G43f5@swap) (dynamic-wind G43f5@swap (lambda () (call-with-values (lambda () (G2d96@parse-import-spec* G43eb@imp*)) (lambda (G43f9@G43f7 G43fa@G43f8) ((lambda (G43fd@subst-labels G43fe@subst-names) (G2dbb@make-env G43fe@subst-names G43fd@subst-labels G43ed@itc)) G43fa@G43f8 G43f9@G43f7)))) G43f5@swap)) (lambda () ((lambda (G4401@t) (begin (G43f1@G43ef G43f2@G43f0) (set! G43f2@G43f0 G4401@t))) (G43f1@G43ef))))) G2da0@imp-collector G43ed@itc)) (G2d9a@make-collector)))) (set! G2df4@null-environment (lambda (G4403@n) (begin (if (not (eqv? G4403@n '5)) (assertion-violation 'null-environment '"not 5" G4403@n) (void)) (G2df2@environment '(psyntax null-environment-5))))) (set! G2df6@scheme-report-environment (lambda (G4405@n) (begin (if (not (eqv? G4405@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4405@n) (void)) (G2df2@environment '(psyntax scheme-report-environment-5))))) (set! G2df8@expand (lambda (G4407@x G4408@env) (if (G2db9@env? G4408@env) ((lambda (G440b@rib) ((lambda (G440d@x G440e@itc G440f@rtc G4410@vtc) ((lambda (G4415@x) (begin (G2af5@seal-rib! G440b@rib) (values G4415@x (G440f@rtc)))) ((lambda (G441f@G4417 G4420@G4418 G4421@G4419 G4422@G441a G4423@G441b G4424@G441c G4425@G441d G4426@G441e) ((lambda (G442f@swap) (dynamic-wind G442f@swap (lambda () (G2d53@chi-expr G440d@x '() '())) G442f@swap)) (lambda () (begin ((lambda (G4431@t) (begin (G441f@G4417 G4423@G441b) (set! G4423@G441b G4431@t))) (G441f@G4417)) ((lambda (G4433@t) (begin (G4420@G4418 G4424@G441c) (set! G4424@G441c G4433@t))) (G4420@G4418)) ((lambda (G4435@t) (begin (G4421@G4419 G4425@G441d) (set! G4425@G441d G4435@t))) (G4421@G4419)) ((lambda (G4437@t) (begin (G4422@G441a G4426@G441e) (set! G4426@G441e G4437@t))) (G4422@G441a)))))) G2e28@top-level-context G2d9c@inv-collector G2d9e@vis-collector G2da0@imp-collector '#f G440f@rtc G4410@vtc G440e@itc))) (G2b08@make-stx G4407@x G2aba@top-mark* (list G440b@rib) '()) (G2dc1@env-itc G4408@env) (G2d9a@make-collector) (G2d9a@make-collector))) (G2d98@make-top-rib (G2dbd@env-names G4408@env) (G2dbf@env-labels G4408@env))) (if (G2dd6@interaction-env? G4408@env) ((lambda (G4439@rib G443a@r G443b@rtc) ((lambda (G443f@x) (call-with-values (lambda () ((lambda (G444b@G4443 G444c@G4444 G444d@G4445 G444e@G4446 G444f@G4447 G4450@G4448 G4451@G4449 G4452@G444a) ((lambda (G445b@swap) (dynamic-wind G445b@swap (lambda () (G2da4@chi-interaction-expr G443f@x G4439@rib G443a@r)) G445b@swap)) (lambda () (begin ((lambda (G445d@t) (begin (G444b@G4443 G444f@G4447) (set! G444f@G4447 G445d@t))) (G444b@G4443)) ((lambda (G445f@t) (begin (G444c@G4444 G4450@G4448) (set! G4450@G4448 G445f@t))) (G444c@G4444)) ((lambda (G4461@t) (begin (G444d@G4445 G4451@G4449) (set! G4451@G4449 G4461@t))) (G444d@G4445)) ((lambda (G4463@t) (begin (G444e@G4446 G4452@G444a) (set! G4452@G444a G4463@t))) (G444e@G4446)))))) G2e28@top-level-context G2d9c@inv-collector G2d9e@vis-collector G2da0@imp-collector G4408@env G443b@rtc (G2d9a@make-collector) (G2d9a@make-collector))) (lambda (G4465@G4441 G4466@G4442) ((lambda (G4469@r^ G446a@e) (begin (G2de2@set-interaction-env-r! G4408@env G4469@r^) (values G446a@e (G443b@rtc)))) G4466@G4442 G4465@G4441)))) (G2b08@make-stx G4407@x G2aba@top-mark* (list G4439@rib) '()))) (G2dda@interaction-env-rib G4408@env) (G2ddc@interaction-env-r G4408@env) (G2d9a@make-collector)) (assertion-violation 'expand '"not an environment" G4408@env))))) (set! G2dfa@eval (lambda (G446d@x G446e@env) (begin (if (not (G2dee@environment? G446e@env)) (error 'eval '"not an environment" G446e@env) (void)) (call-with-values (lambda () (G2df8@expand G446d@x G446e@env)) (lambda (G4473@G4471 G4474@G4472) ((lambda (G4477@invoke-req* G4478@x) (begin (for-each G2966@G280d@invoke-library G4477@invoke-req*) (eval-core (G2746@G26fe@expanded->core G4478@x)))) G4474@G4472 G4473@G4471)))))) (set! G2dfc@library-expander (lambda G44e0 ((lambda (G44e1) (if (= G44e1 '3) (apply (lambda (G447b@x G447c@filename G447d@verify-name) ((lambda (G4482@build-visit-code G4484@visit!) (begin (set! G4482@build-visit-code (lambda (G44ce@macro*) (if (null? G44ce@macro*) (G2aa0@G2a12@build-void) (G2a9f@G2a10@build-sequence '#f (map (lambda (G44d0@x) ((lambda (G44d2@loc G44d3@src) (list 'set! G44d2@loc G44d3@src)) (car G44d0@x) (cddr G44d0@x))) G44ce@macro*))))) (set! G4484@visit! (lambda (G44c6@macro*) (for-each (lambda (G44c8@x) ((lambda (G44ca@loc G44cb@proc) (set-symbol-value! G44ca@loc G44cb@proc)) (car G44c8@x) (cadr G44c8@x))) G44c6@macro*))) (call-with-values (lambda () (G2da8@core-library-expander G447b@x G447d@verify-name)) (lambda (G448e@G4485 G448f@G4486 G4490@G4487 G4491@G4488 G4492@G4489 G4493@G448a G4494@G448b G4495@G448c G4496@G448d) ((lambda (G44a0@export-env G44a1@export-subst G44a2@macro* G44a3@invoke-code G44a4@vis* G44a5@inv* G44a6@imp* G44a7@ver G44a8@name) ((lambda (G44b2@id G44b3@name G44b4@ver G44b5@imp* G44b6@vis* G44b7@inv* G44b8@visit-proc G44b9@invoke-proc G44ba@visit-code G44bb@invoke-code) (begin (G2964@G2809@install-library G44b2@id G44b3@name G44b4@ver G44b5@imp* G44b6@vis* G44b7@inv* G44a1@export-subst G44a0@export-env G44b8@visit-proc G44b9@invoke-proc G44ba@visit-code G44bb@invoke-code '#t G447c@filename) (values G44b2@id G44b3@name G44b4@ver G44b5@imp* G44b6@vis* G44b7@inv* G44bb@invoke-code G44ba@visit-code G44a1@export-subst G44a0@export-env))) (gensym) G44a8@name G44a7@ver (map G296a@G2815@library-spec G44a6@imp*) (map G296a@G2815@library-spec G44a4@vis*) (map G296a@G2815@library-spec G44a5@inv*) (lambda () (G4484@visit! G44a2@macro*)) (lambda () (eval-core (G2746@G26fe@expanded->core G44a3@invoke-code))) (G4482@build-visit-code G44a2@macro*) G44a3@invoke-code)) G4496@G448d G4495@G448c G4494@G448b G4493@G448a G4492@G4489 G4491@G4488 G4490@G4487 G448f@G4486 G448e@G4485))))) '#f '#f)) G44e0) (if (= G44e1 '2) (apply (lambda (G44d6@x G44d7@filename) (G2dfc@library-expander G44d6@x G44d7@filename (lambda (G44da@x) (values)))) G44e0) (if (= G44e1 '1) (apply (lambda (G44dc@x) (G2dfc@library-expander G44dc@x '#f (lambda (G44de@x) (values)))) G44e0) (error 'apply '"invalid arg count"))))) (length G44e0)))) (set! G2dfe@boot-library-expand (lambda (G44e2@x) (call-with-values (lambda () (G2dfc@library-expander G44e2@x)) (lambda (G44ee@G44e4 G44ef@G44e5 G44f0@G44e6 G44f1@G44e7 G44f2@G44e8 G44f3@G44e9 G44f4@G44ea G44f5@G44eb G44f6@G44ec G44f7@G44ed) ((lambda (G4502@export-env G4503@export-subst G4504@visit-code G4505@invoke-code G4506@inv* G4507@vis* G4508@imp* G4509@ver G450a@name G450b@id) (values G450a@name G4505@invoke-code G4503@export-subst G4502@export-env)) G44f7@G44ed G44f6@G44ec G44f5@G44eb G44f4@G44ea G44f3@G44e9 G44f2@G44e8 G44f1@G44e7 G44f0@G44e6 G44ef@G44e5 G44ee@G44e4))))) (set! G2e00@rev-map-append (lambda (G4516@f G4517@ls G4518@ac) (if (null? G4517@ls) G4518@ac (G2e00@rev-map-append G4516@f (cdr G4517@ls) (cons (G4516@f (car G4517@ls)) G4518@ac))))) (set! G2e02@build-exports (lambda (G451c@lex*+loc* G451d@init*) (G2a9f@G2a10@build-sequence '#f (cons (G2aa0@G2a12@build-void) (G2e00@rev-map-append (lambda (G4520@x) (list 'set! (cdr G4520@x) (car G4520@x))) G451c@lex*+loc* G451d@init*))))) (set! G2e04@make-export-subst (lambda (G4522@name* G4523@id*) (map (lambda (G4526@name G4527@id) ((lambda (G452a@label) (begin (if (not G452a@label) (G2e1a@syntax-violation '#f '"cannot export unbound identifier" G4527@id) (void)) (cons G4526@name G452a@label))) (G2b58@id->label G4527@id))) G4522@name* G4523@id*))) (set! G2e06@make-export-env/macros (lambda (G452c@lex* G452d@loc* G452e@r) ((lambda (G4533@lookup) (begin (set! G4533@lookup (lambda (G4550@x) ((letrec ((G4552@f (lambda (G4554@x G4555@lex* G4556@loc*) (if (pair? G4555@lex*) (if (eq? G4554@x (car G4555@lex*)) (car G4556@loc*) (G4552@f G4554@x (cdr G4555@lex*) (cdr G4556@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4552@f) G4550@x G452c@lex* G452d@loc*))) ((letrec ((G4534@f (lambda (G4536@r G4537@env G4538@global* G4539@macro*) (if (null? G4536@r) (values G4537@env G4538@global* G4539@macro*) ((lambda (G453e@x) ((lambda (G4540@label G4541@b) ((lambda (G4544@t) (if (memv G4544@t '(lexical)) ((lambda (G4546@v) ((lambda (G4548@loc G4549@type) (G4534@f (cdr G4536@r) (cons (cons* G4540@label G4549@type G4548@loc) G4537@env) (cons (cons (G2cbb@lexical-var G4546@v) G4548@loc) G4538@global*) G4539@macro*)) (G4533@lookup (G2cbb@lexical-var G4546@v)) (if (G2cbd@lexical-mutable? G4546@v) 'mutable 'global))) (G2b62@binding-value G4541@b)) (if (memv G4544@t '(local-macro)) ((lambda (G454c@loc) (G4534@f (cdr G4536@r) (cons (cons* G4540@label 'global-macro G454c@loc) G4537@env) G4538@global* (cons (cons G454c@loc (G2b62@binding-value G4541@b)) G4539@macro*))) (gensym)) (if (memv G4544@t '(local-macro!)) ((lambda (G454e@loc) (G4534@f (cdr G4536@r) (cons (cons* G4540@label 'global-macro! G454e@loc) G4537@env) G4538@global* (cons (cons G454e@loc (G2b62@binding-value G4541@b)) G4539@macro*))) (gensym)) (if (memv G4544@t '($rtd $module)) (G4534@f (cdr G4536@r) (cons G453e@x G4537@env) G4538@global* G4539@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2b60@binding-type G4541@b) (G2b62@binding-value G4541@b))))))) (G2b60@binding-type G4541@b))) (car G453e@x) (cdr G453e@x))) (car G4536@r)))))) G4534@f) G452e@r '() '() '()))) '#f))) (set! G2e08@generate-temporaries (lambda (G455a@ls) ((lambda (G455c@t) ((lambda (G455e@ls/false) (if G455e@ls/false (apply (lambda (G4560@ls) (map (lambda (G4562@x) (G2b08@make-stx ((lambda (G4564@x) (if (or (symbol? G4564@x) (string? G4564@x)) (gensym G4564@x) (gensym 't))) (G2e20@syntax->datum G4562@x)) G2aba@top-mark* '() '())) G4560@ls)) G455e@ls/false) ((lambda (G4566@t) ((lambda (G4568@ls/false) (if G4568@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4568@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G4566@t))) (G2d2f@syntax-dispatch G4566@t '_))) G455c@t))) (G2d2f@syntax-dispatch G455c@t 'each-any))) G455a@ls))) (set! G2e0a@free-identifier=? (lambda (G456a@x G456b@y) (if (G2b3e@id? G456a@x) (if (G2b3e@id? G456b@y) (G2b46@free-id=? G456a@x G456b@y) (assertion-violation 'free-identifier=? '"not an identifier" G456b@y)) (assertion-violation 'free-identifier=? '"not an identifier" G456a@x)))) (set! G2e0c@bound-identifier=? (lambda (G456e@x G456f@y) (if (G2b3e@id? G456e@x) (if (G2b3e@id? G456f@y) (G2b44@bound-id=? G456e@x G456f@y) (assertion-violation 'bound-identifier=? '"not an identifier" G456f@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G456e@x)))) (set! G2e0e@make-source-condition (lambda (G4572@x) ((lambda (G457c@G4577 G457e@G4579 G4580@G4578 G4583@G4576 G4585@make-source-condition G4587@G4574 G4589@G4575 G458b@source-condition? G458d@source-filename G458f@source-character) (begin (set! G457c@G4577 (make-record-type-descriptor '&source-information G49ca@G471d@&condition-rtd 'G457a '#f '#f '#((immutable file-name) (immutable character)))) (set! G457e@G4579 '#f) (set! G4580@G4578 (make-record-constructor-descriptor G457c@G4577 G49cb@G471f@&condition-rcd G457e@G4579)) (set! G4583@G4576 (record-predicate G457c@G4577)) (set! G4585@make-source-condition (record-constructor G4580@G4578)) (set! G4587@G4574 (record-accessor G457c@G4577 '0)) (set! G4589@G4575 (record-accessor G457c@G4577 '1)) (set! G458b@source-condition? (condition-predicate G457c@G4577)) (set! G458d@source-filename (condition-accessor G457c@G4577 G4587@G4574)) (set! G458f@source-character (condition-accessor G457c@G4577 G4589@G4575)) (if (pair? G4572@x) (G4585@make-source-condition (car G4572@x) (cdr G4572@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2e10@extract-position-condition (lambda (G4590@x) (G2e0e@make-source-condition (G2e12@expression-position G4590@x)))) (set! G2e12@expression-position (lambda (G4592@x) (and (G2b06@stx? G4592@x) ((lambda (G4594@x) (and (G26e7@G260a@annotation? G4594@x) (G26e8@G260c@annotation-source G4594@x))) (G2b0a@stx-expr G4592@x))))) (set! G2e14@assertion-error (lambda (G4596@expr G4597@pos) (raise (condition (G49fa@G47dd@make-assertion-violation) (G4a0c@G480d@make-who-condition 'assert) (G49d0@G4770@make-message-condition '"assertion failed") (G4a02@G47f3@make-irritants-condition (list G4596@expr)) (G2e0e@make-source-condition G4597@pos))))) (set! G2e16@syntax-error (lambda (G459a@x . G459c@args) (begin (if (not (for-all string? G459c@args)) (assertion-violation 'syntax-error '"invalid argument" G459c@args) (void)) (raise (condition (G49d0@G4770@make-message-condition (if (null? G459c@args) '"invalid syntax" (apply string-append G459c@args))) (G4a2e@G4867@make-syntax-violation (G2e20@syntax->datum G459a@x) '#f) (G2e10@extract-position-condition G459a@x)))))) (set! G2e18@syntax-violation* (lambda (G459e@who G459f@msg G45a0@form G45a1@condition-object) (begin (if (not (string? G459f@msg)) (assertion-violation 'syntax-violation '"message is not a string" G459f@msg) (void)) ((lambda (G45a6@who) (raise (condition (if G45a6@who (G4a0c@G480d@make-who-condition G45a6@who) (condition)) (G49d0@G4770@make-message-condition G459f@msg) G45a1@condition-object (G2e10@extract-position-condition G45a0@form)))) (if (or (string? G459e@who) (symbol? G459e@who)) G459e@who (if (not G459e@who) ((lambda (G45a8@t) ((lambda (G45aa@ls/false) (if (and G45aa@ls/false (apply (lambda (G45ac@id) (G2b3e@id? G45ac@id)) G45aa@ls/false)) (apply (lambda (G45ae@id) (G2e20@syntax->datum G45ae@id)) G45aa@ls/false) ((lambda (G45b0@t) ((lambda (G45b2@ls/false) (if (and G45b2@ls/false (apply (lambda (G45b4@id G45b5@rest) (G2b3e@id? G45b4@id)) G45b2@ls/false)) (apply (lambda (G45b8@id G45b9@rest) (G2e20@syntax->datum G45b8@id)) G45b2@ls/false) ((lambda (G45bc@t) ((lambda (G45be@ls/false) (if G45be@ls/false (apply (lambda () '#f) G45be@ls/false) (G2e1a@syntax-violation '#f '"invalid syntax" G45bc@t))) (G2d2f@syntax-dispatch G45bc@t '_))) G45b0@t))) (G2d2f@syntax-dispatch G45b0@t '(any . any)))) G45a8@t))) (G2d2f@syntax-dispatch G45a8@t 'any))) G45a0@form) (assertion-violation 'syntax-violation '"invalid who argument" G459e@who))))))) (set! G2e1a@syntax-violation (lambda G45ce ((lambda (G45cf) (if (= G45cf '3) (apply (lambda (G45c0@who G45c1@msg G45c2@form) (G2e1a@syntax-violation G45c0@who G45c1@msg G45c2@form '#f)) G45ce) (if (= G45cf '4) (apply (lambda (G45c6@who G45c7@msg G45c8@form G45c9@subform) (G2e18@syntax-violation* G45c6@who G45c7@msg G45c8@form (G4a2e@G4867@make-syntax-violation (G2e20@syntax->datum G45c8@form) (G2e20@syntax->datum G45c9@subform)))) G45ce) (error 'apply '"invalid arg count")))) (length G45ce)))) (set! G2e1c@identifier? (lambda (G45d0@x) (G2b3e@id? G45d0@x))) (set! G2e1e@datum->syntax (lambda (G45d2@id G45d3@datum) (if (G2b3e@id? G45d2@id) (G2b1c@datum->stx G45d2@id G45d3@datum) (assertion-violation 'datum->syntax '"not an identifier" G45d2@id)))) (set! G2e20@syntax->datum (lambda (G45d6@x) (G2b54@stx->datum G45d6@x))) (set! G2e22@compile-r6rs-top-level (lambda (G45d8@x*) (call-with-values (lambda () (G2dac@top-level-expander G45d8@x*)) (lambda (G45dc@G45da G45dd@G45db) ((lambda (G45e0@invoke-code G45e1@lib*) (lambda () (begin (for-each G2966@G280d@invoke-library G45e1@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2746@G26fe@expanded->core G45e0@invoke-code)) (void)) (eval-core (G2746@G26fe@expanded->core G45e0@invoke-code))))) G45dd@G45db G45dc@G45da))))) (set! G2e24@pre-compile-r6rs-top-level (lambda (G45e4@x*) (call-with-values (lambda () (G2dac@top-level-expander G45e4@x*)) (lambda (G45e8@G45e6 G45e9@G45e7) ((lambda (G45ec@invoke-code G45ed@lib*) (begin (for-each G2966@G280d@invoke-library G45ed@lib*) (G26f0@G261c@compile-core (G2746@G26fe@expanded->core G45ec@invoke-code)))) G45e9@G45e7 G45e8@G45e6))))) (set! G2e26@interaction-environment ((lambda (G45f0@the-env) (lambda () (or G45f0@the-env ((lambda (G45f2@lib G45f3@rib) (begin ((lambda (G45f6@subst) (begin (G2ae3@set-rib-sym*! G45f3@rib (map car G45f6@subst)) (G2ae5@set-rib-mark**! G45f3@rib (map (lambda (G45f8@x) G2aba@top-mark*) G45f6@subst)) (G2ae7@set-rib-label*! G45f3@rib (map cdr G45f6@subst)))) (G293b@G27b7@library-subst G45f2@lib)) ((lambda (G45fa@env) (begin (set! G45f0@the-env G45fa@env) G45fa@env)) (G2dd8@make-interaction-env G45f3@rib '() '())))) (G295f@G27ff@find-library-by-name '(mosh interaction)) (G2aed@make-empty-rib))))) '#f)) (set! G2e28@top-level-context (G26f2@G2620@make-parameter '#f)) (begin (set! G4708@G2e28@top-level-context G2e28@top-level-context) (set! G4707@G2e26@interaction-environment G2e26@interaction-environment) (set! G4706@G2e24@pre-compile-r6rs-top-level G2e24@pre-compile-r6rs-top-level) (set! G4705@G2e22@compile-r6rs-top-level G2e22@compile-r6rs-top-level) (set! G4704@G2e20@syntax->datum G2e20@syntax->datum) (set! G4703@G2e1e@datum->syntax G2e1e@datum->syntax) (set! G4702@G2e1c@identifier? G2e1c@identifier?) (set! G4701@G2e1a@syntax-violation G2e1a@syntax-violation) (set! G4700@G2e18@syntax-violation* G2e18@syntax-violation*) (set! G46ff@G2e16@syntax-error G2e16@syntax-error) (set! G46fe@G2e14@assertion-error G2e14@assertion-error) (set! G46fd@G2e12@expression-position G2e12@expression-position) (set! G46fc@G2e10@extract-position-condition G2e10@extract-position-condition) (set! G46fb@G2e0e@make-source-condition G2e0e@make-source-condition) (set! G46fa@G2e0c@bound-identifier=? G2e0c@bound-identifier=?) (set! G46f9@G2e0a@free-identifier=? G2e0a@free-identifier=?) (set! G46f8@G2e08@generate-temporaries G2e08@generate-temporaries) (set! G46f7@G2e06@make-export-env/macros G2e06@make-export-env/macros) (set! G46f6@G2e04@make-export-subst G2e04@make-export-subst) (set! G46f5@G2e02@build-exports G2e02@build-exports) (set! G46f4@G2e00@rev-map-append G2e00@rev-map-append) (set! G46f3@G2dfe@boot-library-expand G2dfe@boot-library-expand) (set! G46f2@G2dfc@library-expander G2dfc@library-expander) (set! G46f1@G2dfa@eval G2dfa@eval) (set! G46f0@G2df8@expand G2df8@expand) (set! G46ef@G2df6@scheme-report-environment G2df6@scheme-report-environment) (set! G46ee@G2df4@null-environment G2df4@null-environment) (set! G46ed@G2df2@environment G2df2@environment) (set! G46ec@G2df0@environment-symbols G2df0@environment-symbols) (set! G46eb@G2dee@environment? G2dee@environment?) (set! G46ea@G2dec@parse-binding G2dec@parse-binding) (set! G46e9@G2dea@environment-bindings G2dea@environment-bindings) (set! G46e8@G2de8@interaction-environment-symbols G2de8@interaction-environment-symbols) (set! G46e7@G2de6@rp G2de6@rp) (set! G46e6@G2de4@set-interaction-env-locs! G2de4@set-interaction-env-locs!) (set! G46e5@G2de2@set-interaction-env-r! G2de2@set-interaction-env-r!) (set! G46e4@G2de0@set-interaction-env-rib! G2de0@set-interaction-env-rib!) (set! G46e3@G2dde@interaction-env-locs G2dde@interaction-env-locs) (set! G46e2@G2ddc@interaction-env-r G2ddc@interaction-env-r) (set! G46e1@G2dda@interaction-env-rib G2dda@interaction-env-rib) (set! G46e0@G2dd8@make-interaction-env G2dd8@make-interaction-env) (set! G46df@G2dd6@interaction-env? G2dd6@interaction-env?) (set! G46de@G2dd3@G2dcb G2dd3@G2dcb) (set! G46dd@G2dd1@G2dcc G2dd1@G2dcc) (set! G46dc@G2dcf@G2dca G2dcf@G2dca) (set! G46db@G2dc9@rp G2dc9@rp) (set! G46da@G2dc7@set-env-itc! G2dc7@set-env-itc!) (set! G46d9@G2dc5@set-env-labels! G2dc5@set-env-labels!) (set! G46d8@G2dc3@set-env-names! G2dc3@set-env-names!) (set! G46d7@G2dc1@env-itc G2dc1@env-itc) (set! G46d6@G2dbf@env-labels G2dbf@env-labels) (set! G46d5@G2dbd@env-names G2dbd@env-names) (set! G46d4@G2dbb@make-env G2dbb@make-env) (set! G46d3@G2db9@env? G2db9@env?) (set! G46d2@G2db6@G2dae G2db6@G2dae) (set! G46d1@G2db4@G2daf G2db4@G2daf) (set! G46d0@G2db2@G2dad G2db2@G2dad) (set! G46cf@G2dac@top-level-expander G2dac@top-level-expander) (set! G46ce@G2daa@parse-top-level-program G2daa@parse-top-level-program) (set! G46cd@G2da8@core-library-expander G2da8@core-library-expander) (set! G46cc@G2da6@library-body-expander G2da6@library-body-expander) (set! G46cb@G2da4@chi-interaction-expr G2da4@chi-interaction-expr) (set! G46ca@G2da2@chi-library-internal G2da2@chi-library-internal) (set! G46c9@G2da0@imp-collector G2da0@imp-collector) (set! G46c8@G2d9e@vis-collector G2d9e@vis-collector) (set! G46c7@G2d9c@inv-collector G2d9c@inv-collector) (set! G46c6@G2d9a@make-collector G2d9a@make-collector) (set! G46c5@G2d98@make-top-rib G2d98@make-top-rib) (set! G46c4@G2d96@parse-import-spec* G2d96@parse-import-spec*) (set! G46c3@G2d94@parse-library G2d94@parse-library) (set! G46c2@G2d92@parse-library-name G2d92@parse-library-name) (set! G46c1@G2d90@parse-exports G2d90@parse-exports) (set! G46c0@G2d8e@expand-transformer G2d8e@expand-transformer) (set! G46bf@G2d8c@chi-body* G2d8c@chi-body*) (set! G46be@G2d8a@chi-internal-module G2d8a@chi-internal-module) (set! G46bd@G2d88@module-interface-exp-id* G2d88@module-interface-exp-id*) (set! G46bc@G2d86@set-module-interface-exp-lab-vec! G2d86@set-module-interface-exp-lab-vec!) (set! G46bb@G2d84@set-module-interface-exp-id-vec! G2d84@set-module-interface-exp-id-vec!) (set! G46ba@G2d82@set-module-interface-first-mark! G2d82@set-module-interface-first-mark!) (set! G46b9@G2d80@module-interface-exp-lab-vec G2d80@module-interface-exp-lab-vec) (set! G46b8@G2d7e@module-interface-exp-id-vec G2d7e@module-interface-exp-id-vec) (set! G46b7@G2d7c@module-interface-first-mark G2d7c@module-interface-first-mark) (set! G46b6@G2d7a@make-module-interface G2d7a@make-module-interface) (set! G46b5@G2d78@module-interface? G2d78@module-interface?) (set! G46b4@G2d75@G2d6d G2d75@G2d6d) (set! G46b3@G2d73@G2d6e G2d73@G2d6e) (set! G46b2@G2d71@G2d6c G2d71@G2d6c) (set! G46b1@G2d6b@parse-module G2d6b@parse-module) (set! G46b0@G2d69@chi-internal G2d69@chi-internal) (set! G46af@G2d67@find-dups G2d67@find-dups) (set! G46ae@G2d65@find-bound=? G2d65@find-bound=?) (set! G46ad@G2d63@chi-rhs* G2d63@chi-rhs*) (set! G46ac@G2d61@expand-interaction-rhs*/init* G2d61@expand-interaction-rhs*/init*) (set! G46ab@G2d5f@chi-rhs G2d5f@chi-rhs) (set! G46aa@G2d5d@chi-defun G2d5d@chi-defun) (set! G46a9@G2d5b@chi-lambda-clause* G2d5b@chi-lambda-clause*) (set! G46a8@G2d59@chi-lambda-clause G2d59@chi-lambda-clause) (set! G46a7@G2d57@verify-formals G2d57@verify-formals) (set! G46a6@G2d55@chi-set! G2d55@chi-set!) (set! G46a5@G2d53@chi-expr G2d53@chi-expr) (set! G46a4@G2d51@chi-application G2d51@chi-application) (set! G46a3@G2d4f@chi-expr* G2d4f@chi-expr*) (set! G46a2@G2d4d@chi-global-macro G2d4d@chi-global-macro) (set! G46a1@G2d4b@chi-local-macro G2d4b@chi-local-macro) (set! G46a0@G2d49@chi-macro G2d49@chi-macro) (set! G469f@G2d47@do-macro-call G2d47@do-macro-call) (set! G469e@G2d45@local-macro-transformer G2d45@local-macro-transformer) (set! G469d@G2d43@macro-transformer G2d43@macro-transformer) (set! G469c@G2d41@symbol-macro G2d41@symbol-macro) (set! G469b@G2d3f@file-options-macro G2d3f@file-options-macro) (set! G469a@G2d3d@core-macro-transformer G2d3d@core-macro-transformer) (set! G4699@G2d3b@syntax-transformer G2d3b@syntax-transformer) (set! G4698@G2d39@ellipsis-map G2d39@ellipsis-map) (set! G4697@G2d37@syntax-case-transformer G2d37@syntax-case-transformer) (set! G4696@G2d35@verify-literals G2d35@verify-literals) (set! G4695@G2d33@underscore? G2d33@underscore?) (set! G4694@G2d31@ellipsis? G2d31@ellipsis?) (set! G4693@G2d2f@syntax-dispatch G2d2f@syntax-dispatch) (set! G4692@G2d2d@convert-pattern G2d2d@convert-pattern) (set! G4691@G2d2b@foreign-call-transformer G2d2b@foreign-call-transformer) (set! G4690@G2d29@parameterize-macro G2d29@parameterize-macro) (set! G468f@G2d27@incorrect-usage-macro G2d27@incorrect-usage-macro) (set! G468e@G2d25@define-condition-type-macro G2d25@define-condition-type-macro) (set! G468d@G2d23@define-record-type-macro G2d23@define-record-type-macro) (set! G468c@G2d21@define-struct-macro G2d21@define-struct-macro) (set! G468b@G2d1f@quasisyntax-macro G2d1f@quasisyntax-macro) (set! G468a@G2d1d@quasiquote-macro G2d1d@quasiquote-macro) (set! G4689@G2d1b@syntax-rules-macro G2d1b@syntax-rules-macro) (set! G4688@G2d19@include-into-macro G2d19@include-into-macro) (set! G4687@G2d17@include-macro G2d17@include-macro) (set! G4686@G2d15@do-include G2d15@do-include) (set! G4685@G2d13@cond-macro G2d13@cond-macro) (set! G4684@G2d11@and-macro G2d11@and-macro) (set! G4683@G2d0f@or-macro G2d0f@or-macro) (set! G4682@G2d0d@let*-macro G2d0d@let*-macro) (set! G4681@G2d0b@do-macro G2d0b@do-macro) (set! G4680@G2d09@identifier-syntax-macro G2d09@identifier-syntax-macro) (set! G467f@G2d07@endianness-macro G2d07@endianness-macro) (set! G467e@G2d05@assert-macro G2d05@assert-macro) (set! G467d@G2d03@delay-macro G2d03@delay-macro) (set! G467c@G2d01@time-macro G2d01@time-macro) (set! G467b@G2cff@define-enumeration-macro G2cff@define-enumeration-macro) (set! G467a@G2cfd@guard-macro G2cfd@guard-macro) (set! G4679@G2cfb@trace-letrec-syntax-macro G2cfb@trace-letrec-syntax-macro) (set! G4678@G2cf9@trace-let-syntax-macro G2cf9@trace-let-syntax-macro) (set! G4677@G2cf7@trace-let/rec-syntax G2cf7@trace-let/rec-syntax) (set! G4676@G2cf5@trace-define-syntax-macro G2cf5@trace-define-syntax-macro) (set! G4675@G2cf3@trace-define-macro G2cf3@trace-define-macro) (set! G4674@G2cf1@trace-lambda-macro G2cf1@trace-lambda-macro) (set! G4673@G2cef@let*-values-macro G2cef@let*-values-macro) (set! G4672@G2ced@let-values-macro G2ced@let-values-macro) (set! G4671@G2ceb@let-macro G2ceb@let-macro) (set! G4670@G2ce9@invalid-fmls-error G2ce9@invalid-fmls-error) (set! G466f@G2ce7@with-syntax-macro G2ce7@with-syntax-macro) (set! G466e@G2ce5@bless G2ce5@bless) (set! G466d@G2ce3@lambda-transformer G2ce3@lambda-transformer) (set! G466c@G2ce1@case-lambda-transformer G2ce1@case-lambda-transformer) (set! G466b@G2cdf@quote-transformer G2cdf@quote-transformer) (set! G466a@G2cdd@case-macro G2cdd@case-macro) (set! G4669@G2cdb@or-transformer G2cdb@or-transformer) (set! G4668@G2cd9@and-transformer G2cd9@and-transformer) (set! G4667@G2cd7@if-transformer G2cd7@if-transformer) (set! G4666@G2cd5@unless-macro G2cd5@unless-macro) (set! G4665@G2cd3@when-macro G2cd3@when-macro) (set! G4664@G2cd1@record-constructor-descriptor-transformer G2cd1@record-constructor-descriptor-transformer) (set! G4663@G2ccf@record-type-descriptor-transformer G2ccf@record-type-descriptor-transformer) (set! G4662@G2ccd@type-descriptor-transformer G2ccd@type-descriptor-transformer) (set! G4661@G2ccb@fluid-let-syntax-transformer G2ccb@fluid-let-syntax-transformer) (set! G4660@G2cc9@letrec*-transformer G2cc9@letrec*-transformer) (set! G465f@G2cc7@letrec-transformer G2cc7@letrec-transformer) (set! G465e@G2cc5@letrec-helper G2cc5@letrec-helper) (set! G465d@G2cc3@add-lexicals G2cc3@add-lexicals) (set! G465c@G2cc1@add-lexical G2cc1@add-lexical) (set! G465b@G2cbf@set-lexical-mutable! G2cbf@set-lexical-mutable!) (set! G465a@G2cbd@lexical-mutable? G2cbd@lexical-mutable?) (set! G4659@G2cbb@lexical-var G2cbb@lexical-var) (set! G4658@G2cb9@scheme-stx G2cb9@scheme-stx) (set! G4657@G2cb7@scheme-stx-hashtable G2cb7@scheme-stx-hashtable) (set! G4656@G2cb5@parse-define-syntax G2cb5@parse-define-syntax) (set! G4655@G2cb3@parse-define G2cb3@parse-define) (set! G4654@G2b7c@make-eval-transformer G2b7c@make-eval-transformer) (set! G4653@G2b7a@variable-transformer-procedure G2b7a@variable-transformer-procedure) (set! G4652@G2b78@variable-transformer? G2b78@variable-transformer?) (set! G4651@G2b76@make-variable-transformer G2b76@make-variable-transformer) (set! G4650@G2b74@sanitize-binding G2b74@sanitize-binding) (set! G464f@G2b66@syntax-type G2b66@syntax-type) (set! G464e@G2b64@raise-unbound-error G2b64@raise-unbound-error) (set! G464d@G2b62@binding-value G2b62@binding-value) (set! G464c@G2b60@binding-type G2b60@binding-type) (set! G464b@G2b5e@make-binding G2b5e@make-binding) (set! G464a@G2b5c@label->binding G2b5c@label->binding) (set! G4649@G2b5a@id->real-label G2b5a@id->real-label) (set! G4648@G2b58@id->label G2b58@id->label) (set! G4647@G2b56@same-marks*? G2b56@same-marks*?) (set! G4646@G2b54@stx->datum G2b54@stx->datum) (set! G4645@G2b52@strip G2b52@strip) (set! G4644@G2b50@strip-annotations G2b50@strip-annotations) (set! G4643@G2b4e@self-evaluating? G2b4e@self-evaluating?) (set! G4642@G2b4c@bound-id-member? G2b4c@bound-id-member?) (set! G4641@G2b4a@distinct-bound-ids? G2b4a@distinct-bound-ids?) (set! G4640@G2b48@valid-bound-ids? G2b48@valid-bound-ids?) (set! G463f@G2b46@free-id=? G2b46@free-id=?) (set! G463e@G2b44@bound-id=? G2b44@bound-id=?) (set! G463d@G2b42@same-marks? G2b42@same-marks?) (set! G463c@G2b40@id->sym G2b40@id->sym) (set! G463b@G2b3e@id? G2b3e@id?) (set! G463a@G2b3c@syntax->list G2b3c@syntax->list) (set! G4639@G2b3a@syntax-cdr G2b3a@syntax-cdr) (set! G4638@G2b38@syntax-car G2b38@syntax-car) (set! G4637@G2b36@syntax-list? G2b36@syntax-list?) (set! G4636@G2b34@syntax-null? G2b34@syntax-null?) (set! G4635@G2b32@syntax-vector? G2b32@syntax-vector?) (set! G4634@G2b30@syntax-pair? G2b30@syntax-pair?) (set! G4633@G2b2e@syntax-vector->list G2b2e@syntax-vector->list) (set! G4632@G2b2c@syntax-kind? G2b2c@syntax-kind?) (set! G4631@G2b2a@add-subst G2b2a@add-subst) (set! G4630@G2b28@add-mark G2b28@add-mark) (set! G462f@G2b26@mkstx G2b26@mkstx) (set! G462e@G2b24@join-wraps G2b24@join-wraps) (set! G462d@G2b22@anti-mark? G2b22@anti-mark?) (set! G462c@G2b20@anti-mark G2b20@anti-mark) (set! G462b@G2b1e@gen-mark G2b1e@gen-mark) (set! G462a@G2b1c@datum->stx G2b1c@datum->stx) (set! G4629@G2b1a@rp G2b1a@rp) (set! G4628@G2b18@set-stx-ae*! G2b18@set-stx-ae*!) (set! G4627@G2b16@set-stx-subst*! G2b16@set-stx-subst*!) (set! G4626@G2b14@set-stx-mark*! G2b14@set-stx-mark*!) (set! G4625@G2b12@set-stx-expr! G2b12@set-stx-expr!) (set! G4624@G2b10@stx-ae* G2b10@stx-ae*) (set! G4623@G2b0e@stx-subst* G2b0e@stx-subst*) (set! G4622@G2b0c@stx-mark* G2b0c@stx-mark*) (set! G4621@G2b0a@stx-expr G2b0a@stx-expr) (set! G4620@G2b08@make-stx G2b08@make-stx) (set! G461f@G2b06@stx? G2b06@stx?) (set! G461e@G2b03@G2afb G2b03@G2afb) (set! G461d@G2b01@G2afc G2b01@G2afc) (set! G461c@G2aff@G2afa G2aff@G2afa) (set! G461b@G2af9@make-full-rib G2af9@make-full-rib) (set! G461a@G2af7@unseal-rib! G2af7@unseal-rib!) (set! G4619@G2af5@seal-rib! G2af5@seal-rib!) (set! G4618@G2af3@make-rib-map G2af3@make-rib-map) (set! G4617@G2af1@extend-rib/nc! G2af1@extend-rib/nc!) (set! G4616@G2aef@extend-rib! G2aef@extend-rib!) (set! G4615@G2aed@make-empty-rib G2aed@make-empty-rib) (set! G4614@G2aeb@set-rib-cache! G2aeb@set-rib-cache!) (set! G4613@G2ae9@set-rib-sealed/freq! G2ae9@set-rib-sealed/freq!) (set! G4612@G2ae7@set-rib-label*! G2ae7@set-rib-label*!) (set! G4611@G2ae5@set-rib-mark**! G2ae5@set-rib-mark**!) (set! G4610@G2ae3@set-rib-sym*! G2ae3@set-rib-sym*!) (set! G460f@G2ae1@rib-cache G2ae1@rib-cache) (set! G460e@G2adf@rib-sealed/freq G2adf@rib-sealed/freq) (set! G460d@G2add@rib-label* G2add@rib-label*) (set! G460c@G2adb@rib-mark** G2adb@rib-mark**) (set! G460b@G2ad9@rib-sym* G2ad9@rib-sym*) (set! G460a@G2ad7@make-rib G2ad7@make-rib) (set! G4609@G2ad5@rib? G2ad5@rib?) (set! G4608@G2ad2@G2aca G2ad2@G2aca) (set! G4607@G2ad0@G2acb G2ad0@G2acb) (set! G4606@G2ace@G2ac9 G2ace@G2ac9) (set! G4605@G2ac8@gen-define-label G2ac8@gen-define-label) (set! G4604@G2ac6@gen-define-label+loc G2ac6@gen-define-label+loc) (set! G4603@G2ac4@gen-top-level-label G2ac4@gen-top-level-label) (set! G4602@G2ac2@gen-label G2ac2@gen-label) (set! G4601@G2ac0@gen-global G2ac0@gen-global) (set! G4600@G2abe@gen-lexical G2abe@gen-lexical) (set! G45ff@G2abc@top-marked? G2abc@top-marked?) (set! G45fe@G2aba@top-mark* G2aba@top-mark*) (set! G45fd@G2ab5@set-union G2ab5@set-union) (set! G45fc@G2ab3@set-cons G2ab3@set-cons) (G295c@G27f9@current-library-expander G2dfc@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4712@G470d G4714@G470f G4716@G470e G4719@&condition? G471b@make-&condition G471d@&condition-rtd G471f@&condition-rcd G4767@G4762 G4769@G4764 G476b@G4763 G476e@p? G4770@make-message-condition G4772@G4761 G4774@message-condition? G4776@condition-message G4778@&message-rtd G477a@&message-rcd G4780@G477b G4782@G477d G4784@G477c G4787@p? G4789@make-warning G478b@warning? G478d@&warning-rtd G478f@&warning-rcd G4795@G4790 G4797@G4792 G4799@G4791 G479c@p? G479e@make-serious-condition G47a0@serious-condition? G47a2@&serious-rtd G47a4@&serious-rcd G47aa@G47a5 G47ac@G47a7 G47ae@G47a6 G47b1@p? G47b3@make-error G47b5@error? G47b7@&error-rtd G47b9@&error-rcd G47bf@G47ba G47c1@G47bc G47c3@G47bb G47c6@p? G47c8@make-violation G47ca@violation? G47cc@&violation-rtd G47ce@&violation-rcd G47d4@G47cf G47d6@G47d1 G47d8@G47d0 G47db@p? G47dd@make-assertion-violation G47df@assertion-violation? G47e1@&assertion-rtd G47e3@&assertion-rcd G47ea@G47e5 G47ec@G47e7 G47ee@G47e6 G47f1@p? G47f3@make-irritants-condition G47f5@G47e4 G47f7@irritants-condition? G47f9@condition-irritants G47fb@&irritants-rtd G47fd@&irritants-rcd G4804@G47ff G4806@G4801 G4808@G4800 G480b@p? G480d@make-who-condition G480f@G47fe G4811@who-condition? G4813@condition-who G4815@&who-rtd G4817@&who-rcd G481d@G4818 G481f@G481a G4821@G4819 G4824@p? G4826@make-non-continuable-violation G4828@non-continuable-violation? G482a@&non-continuable-rtd G482c@&non-continuable-rcd G4832@G482d G4834@G482f G4836@G482e G4839@p? G483b@make-implementation-restriction-violation G483d@implementation-restriction-violation? G483f@&implementation-restriction-rtd G4841@&implementation-restriction-rcd G4847@G4842 G4849@G4844 G484b@G4843 G484e@p? G4850@make-lexical-violation G4852@lexical-violation? G4854@&lexical-rtd G4856@&lexical-rcd G485e@G4859 G4860@G485b G4862@G485a G4865@p? G4867@make-syntax-violation G4869@G4857 G486b@G4858 G486d@syntax-violation? G486f@syntax-violation-form G4871@syntax-violation-subform G4873@&syntax-rtd G4875@&syntax-rcd G487b@G4876 G487d@G4878 G487f@G4877 G4882@p? G4884@make-undefined-violation G4886@undefined-violation? G4888@&undefined-rtd G488a@&undefined-rcd G4890@G488b G4892@G488d G4894@G488c G4897@p? G4899@make-i/o-error G489b@i/o-error? G489d@&i/o-rtd G489f@&i/o-rcd G48a5@G48a0 G48a7@G48a2 G48a9@G48a1 G48ac@p? G48ae@make-i/o-read-error G48b0@i/o-read-error? G48b2@&i/o-read-rtd G48b4@&i/o-read-rcd G48ba@G48b5 G48bc@G48b7 G48be@G48b6 G48c1@p? G48c3@make-i/o-write-error G48c5@i/o-write-error? G48c7@&i/o-write-rtd G48c9@&i/o-write-rcd G48d0@G48cb G48d2@G48cd G48d4@G48cc G48d7@p? G48d9@make-i/o-invalid-position-error G48db@G48ca G48dd@i/o-invalid-position-error? G48df@i/o-error-position G48e1@&i/o-invalid-position-rtd G48e3@&i/o-invalid-position-rcd G48ea@G48e5 G48ec@G48e7 G48ee@G48e6 G48f1@p? G48f3@make-i/o-filename-error G48f5@G48e4 G48f7@i/o-filename-error? G48f9@i/o-error-filename G48fb@&i/o-filename-rtd G48fd@&i/o-filename-rcd G4903@G48fe G4905@G4900 G4907@G48ff G490a@p? G490c@make-i/o-file-protection-error G490e@i/o-file-protection-error? G4910@&i/o-file-protection-rtd G4912@&i/o-file-protection-rcd G4918@G4913 G491a@G4915 G491c@G4914 G491f@p? G4921@make-i/o-file-is-read-only-error G4923@i/o-file-is-read-only-error? G4925@&i/o-file-is-read-only-rtd G4927@&i/o-file-is-read-only-rcd G492d@G4928 G492f@G492a G4931@G4929 G4934@p? G4936@make-i/o-file-already-exists-error G4938@i/o-file-already-exists-error? G493a@&i/o-file-already-exists-rtd G493c@&i/o-file-already-exists-rcd G4942@G493d G4944@G493f G4946@G493e G4949@p? G494b@make-i/o-file-does-not-exist-error G494d@i/o-file-does-not-exist-error? G494f@&i/o-file-does-not-exist-rtd G4951@&i/o-file-does-not-exist-rcd G4958@G4953 G495a@G4955 G495c@G4954 G495f@p? G4961@make-i/o-port-error G4963@G4952 G4965@i/o-port-error? G4967@i/o-error-port G4969@&i/o-port-rtd G496b@&i/o-port-rcd G4971@G496c G4973@G496e G4975@G496d G4978@p? G497a@make-i/o-decoding-error G497c@i/o-decoding-error? G497e@&i/o-decoding-rtd G4980@&i/o-decoding-rcd G4987@G4982 G4989@G4984 G498b@G4983 G498e@p? G4990@make-i/o-encoding-error G4992@G4981 G4994@i/o-encoding-error? G4996@i/o-encoding-error-char G4998@&i/o-encoding-rtd G499a@&i/o-encoding-rcd G49a0@G499b G49a2@G499d G49a4@G499c G49a7@p? G49a9@make-no-infinities-violation G49ab@no-infinities-violation? G49ad@&no-infinities-rtd G49af@&no-infinities-rcd G49b5@G49b0 G49b7@G49b2 G49b9@G49b1 G49bc@p? G49be@make-no-nans-violation G49c0@no-nans-violation? G49c2@&no-nans-rtd G49c4@&no-nans-rcd) (begin (set! G4712@G470d (make-record-type-descriptor '&condition '#f 'G4710 '#f '#f '#())) (set! G4714@G470f '#f) (set! G4716@G470e (make-record-constructor-descriptor G4712@G470d '#f G4714@G470f)) (set! G4719@&condition? (record-predicate G4712@G470d)) (set! G471b@make-&condition (record-constructor G4716@G470e)) (set! G471d@&condition-rtd G4712@G470d) (set! G471f@&condition-rcd G4716@G470e) (set! G4767@G4762 (make-record-type-descriptor '&message G4712@G470d 'G4765 '#f '#f '#((immutable message)))) (set! G4769@G4764 '#f) (set! G476b@G4763 (make-record-constructor-descriptor G4767@G4762 G4716@G470e G4769@G4764)) (set! G476e@p? (record-predicate G4767@G4762)) (set! G4770@make-message-condition (record-constructor G476b@G4763)) (set! G4772@G4761 (record-accessor G4767@G4762 '0)) (set! G4774@message-condition? (condition-predicate G4767@G4762)) (set! G4776@condition-message (condition-accessor G4767@G4762 G4772@G4761)) (set! G4778@&message-rtd G4767@G4762) (set! G477a@&message-rcd G476b@G4763) (set! G4780@G477b (make-record-type-descriptor '&warning G4712@G470d 'G477e '#f '#f '#())) (set! G4782@G477d '#f) (set! G4784@G477c (make-record-constructor-descriptor G4780@G477b G4716@G470e G4782@G477d)) (set! G4787@p? (record-predicate G4780@G477b)) (set! G4789@make-warning (record-constructor G4784@G477c)) (set! G478b@warning? (condition-predicate G4780@G477b)) (set! G478d@&warning-rtd G4780@G477b) (set! G478f@&warning-rcd G4784@G477c) (set! G4795@G4790 (make-record-type-descriptor '&serious G4712@G470d 'G4793 '#f '#f '#())) (set! G4797@G4792 '#f) (set! G4799@G4791 (make-record-constructor-descriptor G4795@G4790 G4716@G470e G4797@G4792)) (set! G479c@p? (record-predicate G4795@G4790)) (set! G479e@make-serious-condition (record-constructor G4799@G4791)) (set! G47a0@serious-condition? (condition-predicate G4795@G4790)) (set! G47a2@&serious-rtd G4795@G4790) (set! G47a4@&serious-rcd G4799@G4791) (set! G47aa@G47a5 (make-record-type-descriptor '&error G4795@G4790 'G47a8 '#f '#f '#())) (set! G47ac@G47a7 '#f) (set! G47ae@G47a6 (make-record-constructor-descriptor G47aa@G47a5 G4799@G4791 G47ac@G47a7)) (set! G47b1@p? (record-predicate G47aa@G47a5)) (set! G47b3@make-error (record-constructor G47ae@G47a6)) (set! G47b5@error? (condition-predicate G47aa@G47a5)) (set! G47b7@&error-rtd G47aa@G47a5) (set! G47b9@&error-rcd G47ae@G47a6) (set! G47bf@G47ba (make-record-type-descriptor '&violation G4795@G4790 'G47bd '#f '#f '#())) (set! G47c1@G47bc '#f) (set! G47c3@G47bb (make-record-constructor-descriptor G47bf@G47ba G4799@G4791 G47c1@G47bc)) (set! G47c6@p? (record-predicate G47bf@G47ba)) (set! G47c8@make-violation (record-constructor G47c3@G47bb)) (set! G47ca@violation? (condition-predicate G47bf@G47ba)) (set! G47cc@&violation-rtd G47bf@G47ba) (set! G47ce@&violation-rcd G47c3@G47bb) (set! G47d4@G47cf (make-record-type-descriptor '&assertion G47bf@G47ba 'G47d2 '#f '#f '#())) (set! G47d6@G47d1 '#f) (set! G47d8@G47d0 (make-record-constructor-descriptor G47d4@G47cf G47c3@G47bb G47d6@G47d1)) (set! G47db@p? (record-predicate G47d4@G47cf)) (set! G47dd@make-assertion-violation (record-constructor G47d8@G47d0)) (set! G47df@assertion-violation? (condition-predicate G47d4@G47cf)) (set! G47e1@&assertion-rtd G47d4@G47cf) (set! G47e3@&assertion-rcd G47d8@G47d0) (set! G47ea@G47e5 (make-record-type-descriptor '&irritants G4712@G470d 'G47e8 '#f '#f '#((immutable irritants)))) (set! G47ec@G47e7 '#f) (set! G47ee@G47e6 (make-record-constructor-descriptor G47ea@G47e5 G4716@G470e G47ec@G47e7)) (set! G47f1@p? (record-predicate G47ea@G47e5)) (set! G47f3@make-irritants-condition (record-constructor G47ee@G47e6)) (set! G47f5@G47e4 (record-accessor G47ea@G47e5 '0)) (set! G47f7@irritants-condition? (condition-predicate G47ea@G47e5)) (set! G47f9@condition-irritants (condition-accessor G47ea@G47e5 G47f5@G47e4)) (set! G47fb@&irritants-rtd G47ea@G47e5) (set! G47fd@&irritants-rcd G47ee@G47e6) (set! G4804@G47ff (make-record-type-descriptor '&who G4712@G470d 'G4802 '#f '#f '#((immutable who)))) (set! G4806@G4801 '#f) (set! G4808@G4800 (make-record-constructor-descriptor G4804@G47ff G4716@G470e G4806@G4801)) (set! G480b@p? (record-predicate G4804@G47ff)) (set! G480d@make-who-condition (record-constructor G4808@G4800)) (set! G480f@G47fe (record-accessor G4804@G47ff '0)) (set! G4811@who-condition? (condition-predicate G4804@G47ff)) (set! G4813@condition-who (condition-accessor G4804@G47ff G480f@G47fe)) (set! G4815@&who-rtd G4804@G47ff) (set! G4817@&who-rcd G4808@G4800) (set! G481d@G4818 (make-record-type-descriptor '&non-continuable G47bf@G47ba 'G481b '#f '#f '#())) (set! G481f@G481a '#f) (set! G4821@G4819 (make-record-constructor-descriptor G481d@G4818 G47c3@G47bb G481f@G481a)) (set! G4824@p? (record-predicate G481d@G4818)) (set! G4826@make-non-continuable-violation (record-constructor G4821@G4819)) (set! G4828@non-continuable-violation? (condition-predicate G481d@G4818)) (set! G482a@&non-continuable-rtd G481d@G4818) (set! G482c@&non-continuable-rcd G4821@G4819) (set! G4832@G482d (make-record-type-descriptor '&implementation-restriction G47bf@G47ba 'G4830 '#f '#f '#())) (set! G4834@G482f '#f) (set! G4836@G482e (make-record-constructor-descriptor G4832@G482d G47c3@G47bb G4834@G482f)) (set! G4839@p? (record-predicate G4832@G482d)) (set! G483b@make-implementation-restriction-violation (record-constructor G4836@G482e)) (set! G483d@implementation-restriction-violation? (condition-predicate G4832@G482d)) (set! G483f@&implementation-restriction-rtd G4832@G482d) (set! G4841@&implementation-restriction-rcd G4836@G482e) (set! G4847@G4842 (make-record-type-descriptor '&lexical G47bf@G47ba 'G4845 '#f '#f '#())) (set! G4849@G4844 '#f) (set! G484b@G4843 (make-record-constructor-descriptor G4847@G4842 G47c3@G47bb G4849@G4844)) (set! G484e@p? (record-predicate G4847@G4842)) (set! G4850@make-lexical-violation (record-constructor G484b@G4843)) (set! G4852@lexical-violation? (condition-predicate G4847@G4842)) (set! G4854@&lexical-rtd G4847@G4842) (set! G4856@&lexical-rcd G484b@G4843) (set! G485e@G4859 (make-record-type-descriptor '&syntax G47bf@G47ba 'G485c '#f '#f '#((immutable form) (immutable subform)))) (set! G4860@G485b '#f) (set! G4862@G485a (make-record-constructor-descriptor G485e@G4859 G47c3@G47bb G4860@G485b)) (set! G4865@p? (record-predicate G485e@G4859)) (set! G4867@make-syntax-violation (record-constructor G4862@G485a)) (set! G4869@G4857 (record-accessor G485e@G4859 '0)) (set! G486b@G4858 (record-accessor G485e@G4859 '1)) (set! G486d@syntax-violation? (condition-predicate G485e@G4859)) (set! G486f@syntax-violation-form (condition-accessor G485e@G4859 G4869@G4857)) (set! G4871@syntax-violation-subform (condition-accessor G485e@G4859 G486b@G4858)) (set! G4873@&syntax-rtd G485e@G4859) (set! G4875@&syntax-rcd G4862@G485a) (set! G487b@G4876 (make-record-type-descriptor '&undefined G47bf@G47ba 'G4879 '#f '#f '#())) (set! G487d@G4878 '#f) (set! G487f@G4877 (make-record-constructor-descriptor G487b@G4876 G47c3@G47bb G487d@G4878)) (set! G4882@p? (record-predicate G487b@G4876)) (set! G4884@make-undefined-violation (record-constructor G487f@G4877)) (set! G4886@undefined-violation? (condition-predicate G487b@G4876)) (set! G4888@&undefined-rtd G487b@G4876) (set! G488a@&undefined-rcd G487f@G4877) (set! G4890@G488b (make-record-type-descriptor '&i/o G47aa@G47a5 'G488e '#f '#f '#())) (set! G4892@G488d '#f) (set! G4894@G488c (make-record-constructor-descriptor G4890@G488b G47ae@G47a6 G4892@G488d)) (set! G4897@p? (record-predicate G4890@G488b)) (set! G4899@make-i/o-error (record-constructor G4894@G488c)) (set! G489b@i/o-error? (condition-predicate G4890@G488b)) (set! G489d@&i/o-rtd G4890@G488b) (set! G489f@&i/o-rcd G4894@G488c) (set! G48a5@G48a0 (make-record-type-descriptor '&i/o-read G4890@G488b 'G48a3 '#f '#f '#())) (set! G48a7@G48a2 '#f) (set! G48a9@G48a1 (make-record-constructor-descriptor G48a5@G48a0 G4894@G488c G48a7@G48a2)) (set! G48ac@p? (record-predicate G48a5@G48a0)) (set! G48ae@make-i/o-read-error (record-constructor G48a9@G48a1)) (set! G48b0@i/o-read-error? (condition-predicate G48a5@G48a0)) (set! G48b2@&i/o-read-rtd G48a5@G48a0) (set! G48b4@&i/o-read-rcd G48a9@G48a1) (set! G48ba@G48b5 (make-record-type-descriptor '&i/o-write G4890@G488b 'G48b8 '#f '#f '#())) (set! G48bc@G48b7 '#f) (set! G48be@G48b6 (make-record-constructor-descriptor G48ba@G48b5 G4894@G488c G48bc@G48b7)) (set! G48c1@p? (record-predicate G48ba@G48b5)) (set! G48c3@make-i/o-write-error (record-constructor G48be@G48b6)) (set! G48c5@i/o-write-error? (condition-predicate G48ba@G48b5)) (set! G48c7@&i/o-write-rtd G48ba@G48b5) (set! G48c9@&i/o-write-rcd G48be@G48b6) (set! G48d0@G48cb (make-record-type-descriptor '&i/o-invalid-position G4890@G488b 'G48ce '#f '#f '#((immutable position)))) (set! G48d2@G48cd '#f) (set! G48d4@G48cc (make-record-constructor-descriptor G48d0@G48cb G4894@G488c G48d2@G48cd)) (set! G48d7@p? (record-predicate G48d0@G48cb)) (set! G48d9@make-i/o-invalid-position-error (record-constructor G48d4@G48cc)) (set! G48db@G48ca (record-accessor G48d0@G48cb '0)) (set! G48dd@i/o-invalid-position-error? (condition-predicate G48d0@G48cb)) (set! G48df@i/o-error-position (condition-accessor G48d0@G48cb G48db@G48ca)) (set! G48e1@&i/o-invalid-position-rtd G48d0@G48cb) (set! G48e3@&i/o-invalid-position-rcd G48d4@G48cc) (set! G48ea@G48e5 (make-record-type-descriptor '&i/o-filename G4890@G488b 'G48e8 '#f '#f '#((immutable filename)))) (set! G48ec@G48e7 '#f) (set! G48ee@G48e6 (make-record-constructor-descriptor G48ea@G48e5 G4894@G488c G48ec@G48e7)) (set! G48f1@p? (record-predicate G48ea@G48e5)) (set! G48f3@make-i/o-filename-error (record-constructor G48ee@G48e6)) (set! G48f5@G48e4 (record-accessor G48ea@G48e5 '0)) (set! G48f7@i/o-filename-error? (condition-predicate G48ea@G48e5)) (set! G48f9@i/o-error-filename (condition-accessor G48ea@G48e5 G48f5@G48e4)) (set! G48fb@&i/o-filename-rtd G48ea@G48e5) (set! G48fd@&i/o-filename-rcd G48ee@G48e6) (set! G4903@G48fe (make-record-type-descriptor '&i/o-file-protection G48ea@G48e5 'G4901 '#f '#f '#())) (set! G4905@G4900 '#f) (set! G4907@G48ff (make-record-constructor-descriptor G4903@G48fe G48ee@G48e6 G4905@G4900)) (set! G490a@p? (record-predicate G4903@G48fe)) (set! G490c@make-i/o-file-protection-error (record-constructor G4907@G48ff)) (set! G490e@i/o-file-protection-error? (condition-predicate G4903@G48fe)) (set! G4910@&i/o-file-protection-rtd G4903@G48fe) (set! G4912@&i/o-file-protection-rcd G4907@G48ff) (set! G4918@G4913 (make-record-type-descriptor '&i/o-file-is-read-only G4903@G48fe 'G4916 '#f '#f '#())) (set! G491a@G4915 '#f) (set! G491c@G4914 (make-record-constructor-descriptor G4918@G4913 G4907@G48ff G491a@G4915)) (set! G491f@p? (record-predicate G4918@G4913)) (set! G4921@make-i/o-file-is-read-only-error (record-constructor G491c@G4914)) (set! G4923@i/o-file-is-read-only-error? (condition-predicate G4918@G4913)) (set! G4925@&i/o-file-is-read-only-rtd G4918@G4913) (set! G4927@&i/o-file-is-read-only-rcd G491c@G4914) (set! G492d@G4928 (make-record-type-descriptor '&i/o-file-already-exists G48ea@G48e5 'G492b '#f '#f '#())) (set! G492f@G492a '#f) (set! G4931@G4929 (make-record-constructor-descriptor G492d@G4928 G48ee@G48e6 G492f@G492a)) (set! G4934@p? (record-predicate G492d@G4928)) (set! G4936@make-i/o-file-already-exists-error (record-constructor G4931@G4929)) (set! G4938@i/o-file-already-exists-error? (condition-predicate G492d@G4928)) (set! G493a@&i/o-file-already-exists-rtd G492d@G4928) (set! G493c@&i/o-file-already-exists-rcd G4931@G4929) (set! G4942@G493d (make-record-type-descriptor '&i/o-file-does-not-exist G48ea@G48e5 'G4940 '#f '#f '#())) (set! G4944@G493f '#f) (set! G4946@G493e (make-record-constructor-descriptor G4942@G493d G48ee@G48e6 G4944@G493f)) (set! G4949@p? (record-predicate G4942@G493d)) (set! G494b@make-i/o-file-does-not-exist-error (record-constructor G4946@G493e)) (set! G494d@i/o-file-does-not-exist-error? (condition-predicate G4942@G493d)) (set! G494f@&i/o-file-does-not-exist-rtd G4942@G493d) (set! G4951@&i/o-file-does-not-exist-rcd G4946@G493e) (set! G4958@G4953 (make-record-type-descriptor '&i/o-port G4890@G488b 'G4956 '#f '#f '#((immutable port)))) (set! G495a@G4955 '#f) (set! G495c@G4954 (make-record-constructor-descriptor G4958@G4953 G4894@G488c G495a@G4955)) (set! G495f@p? (record-predicate G4958@G4953)) (set! G4961@make-i/o-port-error (record-constructor G495c@G4954)) (set! G4963@G4952 (record-accessor G4958@G4953 '0)) (set! G4965@i/o-port-error? (condition-predicate G4958@G4953)) (set! G4967@i/o-error-port (condition-accessor G4958@G4953 G4963@G4952)) (set! G4969@&i/o-port-rtd G4958@G4953) (set! G496b@&i/o-port-rcd G495c@G4954) (set! G4971@G496c (make-record-type-descriptor '&i/o-decoding G4958@G4953 'G496f '#f '#f '#())) (set! G4973@G496e '#f) (set! G4975@G496d (make-record-constructor-descriptor G4971@G496c G495c@G4954 G4973@G496e)) (set! G4978@p? (record-predicate G4971@G496c)) (set! G497a@make-i/o-decoding-error (record-constructor G4975@G496d)) (set! G497c@i/o-decoding-error? (condition-predicate G4971@G496c)) (set! G497e@&i/o-decoding-rtd G4971@G496c) (set! G4980@&i/o-decoding-rcd G4975@G496d) (set! G4987@G4982 (make-record-type-descriptor '&i/o-encoding G4958@G4953 'G4985 '#f '#f '#((immutable char)))) (set! G4989@G4984 '#f) (set! G498b@G4983 (make-record-constructor-descriptor G4987@G4982 G495c@G4954 G4989@G4984)) (set! G498e@p? (record-predicate G4987@G4982)) (set! G4990@make-i/o-encoding-error (record-constructor G498b@G4983)) (set! G4992@G4981 (record-accessor G4987@G4982 '0)) (set! G4994@i/o-encoding-error? (condition-predicate G4987@G4982)) (set! G4996@i/o-encoding-error-char (condition-accessor G4987@G4982 G4992@G4981)) (set! G4998@&i/o-encoding-rtd G4987@G4982) (set! G499a@&i/o-encoding-rcd G498b@G4983) (set! G49a0@G499b (make-record-type-descriptor '&no-infinities G4832@G482d 'G499e '#f '#f '#())) (set! G49a2@G499d '#f) (set! G49a4@G499c (make-record-constructor-descriptor G49a0@G499b G4836@G482e G49a2@G499d)) (set! G49a7@p? (record-predicate G49a0@G499b)) (set! G49a9@make-no-infinities-violation (record-constructor G49a4@G499c)) (set! G49ab@no-infinities-violation? (condition-predicate G49a0@G499b)) (set! G49ad@&no-infinities-rtd G49a0@G499b) (set! G49af@&no-infinities-rcd G49a4@G499c) (set! G49b5@G49b0 (make-record-type-descriptor '&no-nans G4832@G482d 'G49b3 '#f '#f '#())) (set! G49b7@G49b2 '#f) (set! G49b9@G49b1 (make-record-constructor-descriptor G49b5@G49b0 G4836@G482e G49b7@G49b2)) (set! G49bc@p? (record-predicate G49b5@G49b0)) (set! G49be@make-no-nans-violation (record-constructor G49b9@G49b1)) (set! G49c0@no-nans-violation? (condition-predicate G49b5@G49b0)) (set! G49c2@&no-nans-rtd G49b5@G49b0) (set! G49c4@&no-nans-rcd G49b9@G49b1) (begin (set! G4ab5@G49c4@&no-nans-rcd G49c4@&no-nans-rcd) (set! G4ab4@G49c2@&no-nans-rtd G49c2@&no-nans-rtd) (set! G4ab3@G49c0@no-nans-violation? G49c0@no-nans-violation?) (set! G4ab2@G49be@make-no-nans-violation G49be@make-no-nans-violation) (set! G4ab1@G49bc@p? G49bc@p?) (set! G4ab0@G49b9@G49b1 G49b9@G49b1) (set! G4aaf@G49b7@G49b2 G49b7@G49b2) (set! G4aae@G49b5@G49b0 G49b5@G49b0) (set! G4aad@G49af@&no-infinities-rcd G49af@&no-infinities-rcd) (set! G4aac@G49ad@&no-infinities-rtd G49ad@&no-infinities-rtd) (set! G4aab@G49ab@no-infinities-violation? G49ab@no-infinities-violation?) (set! G4aaa@G49a9@make-no-infinities-violation G49a9@make-no-infinities-violation) (set! G4aa9@G49a7@p? G49a7@p?) (set! G4aa8@G49a4@G499c G49a4@G499c) (set! G4aa7@G49a2@G499d G49a2@G499d) (set! G4aa6@G49a0@G499b G49a0@G499b) (set! G4aa5@G499a@&i/o-encoding-rcd G499a@&i/o-encoding-rcd) (set! G4aa4@G4998@&i/o-encoding-rtd G4998@&i/o-encoding-rtd) (set! G4aa3@G4996@i/o-encoding-error-char G4996@i/o-encoding-error-char) (set! G4aa2@G4994@i/o-encoding-error? G4994@i/o-encoding-error?) (set! G4aa1@G4992@G4981 G4992@G4981) (set! G4aa0@G4990@make-i/o-encoding-error G4990@make-i/o-encoding-error) (set! G4a9f@G498e@p? G498e@p?) (set! G4a9e@G498b@G4983 G498b@G4983) (set! G4a9d@G4989@G4984 G4989@G4984) (set! G4a9c@G4987@G4982 G4987@G4982) (set! G4a9b@G4980@&i/o-decoding-rcd G4980@&i/o-decoding-rcd) (set! G4a9a@G497e@&i/o-decoding-rtd G497e@&i/o-decoding-rtd) (set! G4a99@G497c@i/o-decoding-error? G497c@i/o-decoding-error?) (set! G4a98@G497a@make-i/o-decoding-error G497a@make-i/o-decoding-error) (set! G4a97@G4978@p? G4978@p?) (set! G4a96@G4975@G496d G4975@G496d) (set! G4a95@G4973@G496e G4973@G496e) (set! G4a94@G4971@G496c G4971@G496c) (set! G4a93@G496b@&i/o-port-rcd G496b@&i/o-port-rcd) (set! G4a92@G4969@&i/o-port-rtd G4969@&i/o-port-rtd) (set! G4a91@G4967@i/o-error-port G4967@i/o-error-port) (set! G4a90@G4965@i/o-port-error? G4965@i/o-port-error?) (set! G4a8f@G4963@G4952 G4963@G4952) (set! G4a8e@G4961@make-i/o-port-error G4961@make-i/o-port-error) (set! G4a8d@G495f@p? G495f@p?) (set! G4a8c@G495c@G4954 G495c@G4954) (set! G4a8b@G495a@G4955 G495a@G4955) (set! G4a8a@G4958@G4953 G4958@G4953) (set! G4a89@G4951@&i/o-file-does-not-exist-rcd G4951@&i/o-file-does-not-exist-rcd) (set! G4a88@G494f@&i/o-file-does-not-exist-rtd G494f@&i/o-file-does-not-exist-rtd) (set! G4a87@G494d@i/o-file-does-not-exist-error? G494d@i/o-file-does-not-exist-error?) (set! G4a86@G494b@make-i/o-file-does-not-exist-error G494b@make-i/o-file-does-not-exist-error) (set! G4a85@G4949@p? G4949@p?) (set! G4a84@G4946@G493e G4946@G493e) (set! G4a83@G4944@G493f G4944@G493f) (set! G4a82@G4942@G493d G4942@G493d) (set! G4a81@G493c@&i/o-file-already-exists-rcd G493c@&i/o-file-already-exists-rcd) (set! G4a80@G493a@&i/o-file-already-exists-rtd G493a@&i/o-file-already-exists-rtd) (set! G4a7f@G4938@i/o-file-already-exists-error? G4938@i/o-file-already-exists-error?) (set! G4a7e@G4936@make-i/o-file-already-exists-error G4936@make-i/o-file-already-exists-error) (set! G4a7d@G4934@p? G4934@p?) (set! G4a7c@G4931@G4929 G4931@G4929) (set! G4a7b@G492f@G492a G492f@G492a) (set! G4a7a@G492d@G4928 G492d@G4928) (set! G4a79@G4927@&i/o-file-is-read-only-rcd G4927@&i/o-file-is-read-only-rcd) (set! G4a78@G4925@&i/o-file-is-read-only-rtd G4925@&i/o-file-is-read-only-rtd) (set! G4a77@G4923@i/o-file-is-read-only-error? G4923@i/o-file-is-read-only-error?) (set! G4a76@G4921@make-i/o-file-is-read-only-error G4921@make-i/o-file-is-read-only-error) (set! G4a75@G491f@p? G491f@p?) (set! G4a74@G491c@G4914 G491c@G4914) (set! G4a73@G491a@G4915 G491a@G4915) (set! G4a72@G4918@G4913 G4918@G4913) (set! G4a71@G4912@&i/o-file-protection-rcd G4912@&i/o-file-protection-rcd) (set! G4a70@G4910@&i/o-file-protection-rtd G4910@&i/o-file-protection-rtd) (set! G4a6f@G490e@i/o-file-protection-error? G490e@i/o-file-protection-error?) (set! G4a6e@G490c@make-i/o-file-protection-error G490c@make-i/o-file-protection-error) (set! G4a6d@G490a@p? G490a@p?) (set! G4a6c@G4907@G48ff G4907@G48ff) (set! G4a6b@G4905@G4900 G4905@G4900) (set! G4a6a@G4903@G48fe G4903@G48fe) (set! G4a69@G48fd@&i/o-filename-rcd G48fd@&i/o-filename-rcd) (set! G4a68@G48fb@&i/o-filename-rtd G48fb@&i/o-filename-rtd) (set! G4a67@G48f9@i/o-error-filename G48f9@i/o-error-filename) (set! G4a66@G48f7@i/o-filename-error? G48f7@i/o-filename-error?) (set! G4a65@G48f5@G48e4 G48f5@G48e4) (set! G4a64@G48f3@make-i/o-filename-error G48f3@make-i/o-filename-error) (set! G4a63@G48f1@p? G48f1@p?) (set! G4a62@G48ee@G48e6 G48ee@G48e6) (set! G4a61@G48ec@G48e7 G48ec@G48e7) (set! G4a60@G48ea@G48e5 G48ea@G48e5) (set! G4a5f@G48e3@&i/o-invalid-position-rcd G48e3@&i/o-invalid-position-rcd) (set! G4a5e@G48e1@&i/o-invalid-position-rtd G48e1@&i/o-invalid-position-rtd) (set! G4a5d@G48df@i/o-error-position G48df@i/o-error-position) (set! G4a5c@G48dd@i/o-invalid-position-error? G48dd@i/o-invalid-position-error?) (set! G4a5b@G48db@G48ca G48db@G48ca) (set! G4a5a@G48d9@make-i/o-invalid-position-error G48d9@make-i/o-invalid-position-error) (set! G4a59@G48d7@p? G48d7@p?) (set! G4a58@G48d4@G48cc G48d4@G48cc) (set! G4a57@G48d2@G48cd G48d2@G48cd) (set! G4a56@G48d0@G48cb G48d0@G48cb) (set! G4a55@G48c9@&i/o-write-rcd G48c9@&i/o-write-rcd) (set! G4a54@G48c7@&i/o-write-rtd G48c7@&i/o-write-rtd) (set! G4a53@G48c5@i/o-write-error? G48c5@i/o-write-error?) (set! G4a52@G48c3@make-i/o-write-error G48c3@make-i/o-write-error) (set! G4a51@G48c1@p? G48c1@p?) (set! G4a50@G48be@G48b6 G48be@G48b6) (set! G4a4f@G48bc@G48b7 G48bc@G48b7) (set! G4a4e@G48ba@G48b5 G48ba@G48b5) (set! G4a4d@G48b4@&i/o-read-rcd G48b4@&i/o-read-rcd) (set! G4a4c@G48b2@&i/o-read-rtd G48b2@&i/o-read-rtd) (set! G4a4b@G48b0@i/o-read-error? G48b0@i/o-read-error?) (set! G4a4a@G48ae@make-i/o-read-error G48ae@make-i/o-read-error) (set! G4a49@G48ac@p? G48ac@p?) (set! G4a48@G48a9@G48a1 G48a9@G48a1) (set! G4a47@G48a7@G48a2 G48a7@G48a2) (set! G4a46@G48a5@G48a0 G48a5@G48a0) (set! G4a45@G489f@&i/o-rcd G489f@&i/o-rcd) (set! G4a44@G489d@&i/o-rtd G489d@&i/o-rtd) (set! G4a43@G489b@i/o-error? G489b@i/o-error?) (set! G4a42@G4899@make-i/o-error G4899@make-i/o-error) (set! G4a41@G4897@p? G4897@p?) (set! G4a40@G4894@G488c G4894@G488c) (set! G4a3f@G4892@G488d G4892@G488d) (set! G4a3e@G4890@G488b G4890@G488b) (set! G4a3d@G488a@&undefined-rcd G488a@&undefined-rcd) (set! G4a3c@G4888@&undefined-rtd G4888@&undefined-rtd) (set! G4a3b@G4886@undefined-violation? G4886@undefined-violation?) (set! G4a3a@G4884@make-undefined-violation G4884@make-undefined-violation) (set! G4a39@G4882@p? G4882@p?) (set! G4a38@G487f@G4877 G487f@G4877) (set! G4a37@G487d@G4878 G487d@G4878) (set! G4a36@G487b@G4876 G487b@G4876) (set! G4a35@G4875@&syntax-rcd G4875@&syntax-rcd) (set! G4a34@G4873@&syntax-rtd G4873@&syntax-rtd) (set! G4a33@G4871@syntax-violation-subform G4871@syntax-violation-subform) (set! G4a32@G486f@syntax-violation-form G486f@syntax-violation-form) (set! G4a31@G486d@syntax-violation? G486d@syntax-violation?) (set! G4a30@G486b@G4858 G486b@G4858) (set! G4a2f@G4869@G4857 G4869@G4857) (set! G4a2e@G4867@make-syntax-violation G4867@make-syntax-violation) (set! G4a2d@G4865@p? G4865@p?) (set! G4a2c@G4862@G485a G4862@G485a) (set! G4a2b@G4860@G485b G4860@G485b) (set! G4a2a@G485e@G4859 G485e@G4859) (set! G4a29@G4856@&lexical-rcd G4856@&lexical-rcd) (set! G4a28@G4854@&lexical-rtd G4854@&lexical-rtd) (set! G4a27@G4852@lexical-violation? G4852@lexical-violation?) (set! G4a26@G4850@make-lexical-violation G4850@make-lexical-violation) (set! G4a25@G484e@p? G484e@p?) (set! G4a24@G484b@G4843 G484b@G4843) (set! G4a23@G4849@G4844 G4849@G4844) (set! G4a22@G4847@G4842 G4847@G4842) (set! G4a21@G4841@&implementation-restriction-rcd G4841@&implementation-restriction-rcd) (set! G4a20@G483f@&implementation-restriction-rtd G483f@&implementation-restriction-rtd) (set! G4a1f@G483d@implementation-restriction-violation? G483d@implementation-restriction-violation?) (set! G4a1e@G483b@make-implementation-restriction-violation G483b@make-implementation-restriction-violation) (set! G4a1d@G4839@p? G4839@p?) (set! G4a1c@G4836@G482e G4836@G482e) (set! G4a1b@G4834@G482f G4834@G482f) (set! G4a1a@G4832@G482d G4832@G482d) (set! G4a19@G482c@&non-continuable-rcd G482c@&non-continuable-rcd) (set! G4a18@G482a@&non-continuable-rtd G482a@&non-continuable-rtd) (set! G4a17@G4828@non-continuable-violation? G4828@non-continuable-violation?) (set! G4a16@G4826@make-non-continuable-violation G4826@make-non-continuable-violation) (set! G4a15@G4824@p? G4824@p?) (set! G4a14@G4821@G4819 G4821@G4819) (set! G4a13@G481f@G481a G481f@G481a) (set! G4a12@G481d@G4818 G481d@G4818) (set! G4a11@G4817@&who-rcd G4817@&who-rcd) (set! G4a10@G4815@&who-rtd G4815@&who-rtd) (set! G4a0f@G4813@condition-who G4813@condition-who) (set! G4a0e@G4811@who-condition? G4811@who-condition?) (set! G4a0d@G480f@G47fe G480f@G47fe) (set! G4a0c@G480d@make-who-condition G480d@make-who-condition) (set! G4a0b@G480b@p? G480b@p?) (set! G4a0a@G4808@G4800 G4808@G4800) (set! G4a09@G4806@G4801 G4806@G4801) (set! G4a08@G4804@G47ff G4804@G47ff) (set! G4a07@G47fd@&irritants-rcd G47fd@&irritants-rcd) (set! G4a06@G47fb@&irritants-rtd G47fb@&irritants-rtd) (set! G4a05@G47f9@condition-irritants G47f9@condition-irritants) (set! G4a04@G47f7@irritants-condition? G47f7@irritants-condition?) (set! G4a03@G47f5@G47e4 G47f5@G47e4) (set! G4a02@G47f3@make-irritants-condition G47f3@make-irritants-condition) (set! G4a01@G47f1@p? G47f1@p?) (set! G4a00@G47ee@G47e6 G47ee@G47e6) (set! G49ff@G47ec@G47e7 G47ec@G47e7) (set! G49fe@G47ea@G47e5 G47ea@G47e5) (set! G49fd@G47e3@&assertion-rcd G47e3@&assertion-rcd) (set! G49fc@G47e1@&assertion-rtd G47e1@&assertion-rtd) (set! G49fb@G47df@assertion-violation? G47df@assertion-violation?) (set! G49fa@G47dd@make-assertion-violation G47dd@make-assertion-violation) (set! G49f9@G47db@p? G47db@p?) (set! G49f8@G47d8@G47d0 G47d8@G47d0) (set! G49f7@G47d6@G47d1 G47d6@G47d1) (set! G49f6@G47d4@G47cf G47d4@G47cf) (set! G49f5@G47ce@&violation-rcd G47ce@&violation-rcd) (set! G49f4@G47cc@&violation-rtd G47cc@&violation-rtd) (set! G49f3@G47ca@violation? G47ca@violation?) (set! G49f2@G47c8@make-violation G47c8@make-violation) (set! G49f1@G47c6@p? G47c6@p?) (set! G49f0@G47c3@G47bb G47c3@G47bb) (set! G49ef@G47c1@G47bc G47c1@G47bc) (set! G49ee@G47bf@G47ba G47bf@G47ba) (set! G49ed@G47b9@&error-rcd G47b9@&error-rcd) (set! G49ec@G47b7@&error-rtd G47b7@&error-rtd) (set! G49eb@G47b5@error? G47b5@error?) (set! G49ea@G47b3@make-error G47b3@make-error) (set! G49e9@G47b1@p? G47b1@p?) (set! G49e8@G47ae@G47a6 G47ae@G47a6) (set! G49e7@G47ac@G47a7 G47ac@G47a7) (set! G49e6@G47aa@G47a5 G47aa@G47a5) (set! G49e5@G47a4@&serious-rcd G47a4@&serious-rcd) (set! G49e4@G47a2@&serious-rtd G47a2@&serious-rtd) (set! G49e3@G47a0@serious-condition? G47a0@serious-condition?) (set! G49e2@G479e@make-serious-condition G479e@make-serious-condition) (set! G49e1@G479c@p? G479c@p?) (set! G49e0@G4799@G4791 G4799@G4791) (set! G49df@G4797@G4792 G4797@G4792) (set! G49de@G4795@G4790 G4795@G4790) (set! G49dd@G478f@&warning-rcd G478f@&warning-rcd) (set! G49dc@G478d@&warning-rtd G478d@&warning-rtd) (set! G49db@G478b@warning? G478b@warning?) (set! G49da@G4789@make-warning G4789@make-warning) (set! G49d9@G4787@p? G4787@p?) (set! G49d8@G4784@G477c G4784@G477c) (set! G49d7@G4782@G477d G4782@G477d) (set! G49d6@G4780@G477b G4780@G477b) (set! G49d5@G477a@&message-rcd G477a@&message-rcd) (set! G49d4@G4778@&message-rtd G4778@&message-rtd) (set! G49d3@G4776@condition-message G4776@condition-message) (set! G49d2@G4774@message-condition? G4774@message-condition?) (set! G49d1@G4772@G4761 G4772@G4761) (set! G49d0@G4770@make-message-condition G4770@make-message-condition) (set! G49cf@G476e@p? G476e@p?) (set! G49ce@G476b@G4763 G476b@G4763) (set! G49cd@G4769@G4764 G4769@G4764) (set! G49cc@G4767@G4762 G4767@G4762) (set! G49cb@G471f@&condition-rcd G471f@&condition-rcd) (set! G49ca@G471d@&condition-rtd G471d@&condition-rtd) (set! G49c9@G471b@make-&condition G471b@make-&condition) (set! G49c8@G4719@&condition? G4719@&condition?) (set! G49c7@G4716@G470e G4716@G470e) (set! G49c6@G4714@G470f G4714@G470f) (set! G49c5@G4712@G470d G4712@G470d)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2743@G26f8@current-primitive-locations (lambda (G4e74@x) ((lambda (G4e76@t) (if G4e76@t (cdr G4e76@t) '#f)) (assq G4e74@x '((&no-nans-rcd . G4ab5@G49c4@&no-nans-rcd) (&no-nans-rtd . G4ab4@G49c2@&no-nans-rtd) (&no-infinities-rcd . G4aad@G49af@&no-infinities-rcd) (&no-infinities-rtd . G4aac@G49ad@&no-infinities-rtd) (&i/o-encoding-rcd . G4aa5@G499a@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4aa4@G4998@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4a9b@G4980@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4a9a@G497e@&i/o-decoding-rtd) (&i/o-port-rcd . G4a93@G496b@&i/o-port-rcd) (&i/o-port-rtd . G4a92@G4969@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4a89@G4951@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4a88@G494f@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4a81@G493c@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4a80@G493a@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4a79@G4927@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4a78@G4925@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4a71@G4912@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4a70@G4910@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4a69@G48fd@&i/o-filename-rcd) (&i/o-filename-rtd . G4a68@G48fb@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4a5f@G48e3@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4a5e@G48e1@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4a55@G48c9@&i/o-write-rcd) (&i/o-write-rtd . G4a54@G48c7@&i/o-write-rtd) (&i/o-read-rcd . G4a4d@G48b4@&i/o-read-rcd) (&i/o-read-rtd . G4a4c@G48b2@&i/o-read-rtd) (&i/o-rcd . G4a45@G489f@&i/o-rcd) (&i/o-rtd . G4a44@G489d@&i/o-rtd) (&undefined-rcd . G4a3d@G488a@&undefined-rcd) (&undefined-rtd . G4a3c@G4888@&undefined-rtd) (&syntax-rcd . G4a35@G4875@&syntax-rcd) (&syntax-rtd . G4a34@G4873@&syntax-rtd) (&lexical-rcd . G4a29@G4856@&lexical-rcd) (&lexical-rtd . G4a28@G4854@&lexical-rtd) (&implementation-restriction-rcd . G4a21@G4841@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4a20@G483f@&implementation-restriction-rtd) (&non-continuable-rcd . G4a19@G482c@&non-continuable-rcd) (&non-continuable-rtd . G4a18@G482a@&non-continuable-rtd) (&who-rcd . G4a11@G4817@&who-rcd) (&who-rtd . G4a10@G4815@&who-rtd) (&irritants-rcd . G4a07@G47fd@&irritants-rcd) (&irritants-rtd . G4a06@G47fb@&irritants-rtd) (&assertion-rcd . G49fd@G47e3@&assertion-rcd) (&assertion-rtd . G49fc@G47e1@&assertion-rtd) (&violation-rcd . G49f5@G47ce@&violation-rcd) (&violation-rtd . G49f4@G47cc@&violation-rtd) (&error-rcd . G49ed@G47b9@&error-rcd) (&error-rtd . G49ec@G47b7@&error-rtd) (&serious-rcd . G49e5@G47a4@&serious-rcd) (&serious-rtd . G49e4@G47a2@&serious-rtd) (&warning-rcd . G49dd@G478f@&warning-rcd) (&warning-rtd . G49dc@G478d@&warning-rtd) (&message-rcd . G49d5@G477a@&message-rcd) (&message-rtd . G49d4@G4778@&message-rtd) (&condition-rcd . G49cb@G471f@&condition-rcd) (&condition-rtd . G49ca@G471d@&condition-rtd) (syntax-error . G46ff@G2e16@syntax-error) (syntax-dispatch . G4693@G2d2f@syntax-dispatch) (load . G4b87@G4acb@load) (interaction-environment . G4707@G2e26@interaction-environment) (library-path . G2954@G27e9@library-path) (make-parameter . G26f2@G2620@make-parameter) (make-variable-transformer . G4651@G2b76@make-variable-transformer) (identifier? . G4702@G2e1c@identifier?) (generate-temporaries . G46f8@G2e08@generate-temporaries) (free-identifier=? . G46f9@G2e0a@free-identifier=?) (syntax->datum . G4704@G2e20@syntax->datum) (datum->syntax . G4703@G2e1e@datum->syntax) (bound-identifier=? . G46fa@G2e0c@bound-identifier=?) (make-i/o-write-error . G4a52@G48c3@make-i/o-write-error) (make-i/o-read-error . G4a4a@G48ae@make-i/o-read-error) (make-i/o-port-error . G4a8e@G4961@make-i/o-port-error) (make-i/o-invalid-position-error . G4a5a@G48d9@make-i/o-invalid-position-error) (make-i/o-filename-error . G4a64@G48f3@make-i/o-filename-error) (make-i/o-file-protection-error . G4a6e@G490c@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4a76@G4921@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4a86@G494b@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4a7e@G4936@make-i/o-file-already-exists-error) (make-i/o-error . G4a42@G4899@make-i/o-error) (make-i/o-encoding-error . G4aa0@G4990@make-i/o-encoding-error) (make-i/o-decoding-error . G4a98@G497a@make-i/o-decoding-error) (i/o-write-error? . G4a53@G48c5@i/o-write-error?) (i/o-read-error? . G4a4b@G48b0@i/o-read-error?) (i/o-port-error? . G4a90@G4965@i/o-port-error?) (i/o-invalid-position-error? . G4a5c@G48dd@i/o-invalid-position-error?) (i/o-filename-error? . G4a66@G48f7@i/o-filename-error?) (i/o-file-protection-error? . G4a6f@G490e@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4a77@G4923@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4a87@G494d@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4a7f@G4938@i/o-file-already-exists-error?) (i/o-error? . G4a43@G489b@i/o-error?) (i/o-error-position . G4a5d@G48df@i/o-error-position) (i/o-error-port . G4a91@G4967@i/o-error-port) (i/o-error-filename . G4a67@G48f9@i/o-error-filename) (i/o-encoding-error? . G4aa2@G4994@i/o-encoding-error?) (i/o-encoding-error-char . G4aa3@G4996@i/o-encoding-error-char) (i/o-decoding-error? . G4a99@G497c@i/o-decoding-error?) (scheme-report-environment . G46ef@G2df6@scheme-report-environment) (null-environment . G46ee@G2df4@null-environment) (command-line . G4b84@G4ac5@command-line) (eval . G46f1@G2dfa@eval) (environment . G46ed@G2df2@environment) (who-condition? . G4a0e@G4811@who-condition?) (warning? . G49db@G478b@warning?) (violation? . G49f3@G47ca@violation?) (undefined-violation? . G4a3b@G4886@undefined-violation?) (syntax-violation? . G4a31@G486d@syntax-violation?) (syntax-violation-subform . G4a33@G4871@syntax-violation-subform) (syntax-violation-form . G4a32@G486f@syntax-violation-form) (syntax-violation . G4701@G2e1a@syntax-violation) (serious-condition? . G49e3@G47a0@serious-condition?) (non-continuable-violation? . G4a17@G4828@non-continuable-violation?) (message-condition? . G49d2@G4774@message-condition?) (make-who-condition . G4a0c@G480d@make-who-condition) (make-warning . G49da@G4789@make-warning) (make-violation . G49f2@G47c8@make-violation) (make-undefined-violation . G4a3a@G4884@make-undefined-violation) (make-syntax-violation . G4a2e@G4867@make-syntax-violation) (make-serious-condition . G49e2@G479e@make-serious-condition) (make-non-continuable-violation . G4a16@G4826@make-non-continuable-violation) (make-message-condition . G49d0@G4770@make-message-condition) (make-lexical-violation . G4a26@G4850@make-lexical-violation) (make-irritants-condition . G4a02@G47f3@make-irritants-condition) (make-implementation-restriction-violation . G4a1e@G483b@make-implementation-restriction-violation) (make-error . G49ea@G47b3@make-error) (make-assertion-violation . G49fa@G47dd@make-assertion-violation) (lexical-violation? . G4a27@G4852@lexical-violation?) (irritants-condition? . G4a04@G47f7@irritants-condition?) (implementation-restriction-violation? . G4a1f@G483d@implementation-restriction-violation?) (error? . G49eb@G47b5@error?) (condition-who . G4a0f@G4813@condition-who) (condition-message . G49d3@G4776@condition-message) (condition-irritants . G4a05@G47f9@condition-irritants) (assertion-violation? . G49fb@G47df@assertion-violation?) (no-nans-violation? . G4ab3@G49c0@no-nans-violation?) (no-infinities-violation? . G4aab@G49ab@no-infinities-violation?) (make-no-nans-violation . G4ab2@G49be@make-no-nans-violation) (make-no-infinities-violation . G4aaa@G49a9@make-no-infinities-violation)))))) (G2964@G2809@install-library 'G4e51 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G4e46) (format . G4e43) (string-split . G4e38) (call-process . G4e32) (set-current-directory! . G4e2e) (expand-path . G4e2d) (current-directory . G4e2c) (%spawn . G4e2b) (%waitpid . G4e2a) (%ffi-supported? . G4e29) (%ffi-pointer-ref . G4e28) (%ffi-pointer->string . G4e27) (%ffi-call->string-or-zero . G4e26) (%ffi-call->double . G4e25) (%ffi-call->void* . G4e24) (%ffi-call->void . G4e23) (%ffi-call->int . G4e22) (%ffi-lookup . G4e21) (%ffi-open . G4e20) (%fork . G4e1f) (%pipe . G4e1e) (p . G4e1d) (string-upcase . G4e0d) (string-titlecase . G4e0c) (string-normalize-nfkd . G4e0b) (string-normalize-nfkc . G4e0a) (string-normalize-nfd . G4e09) (string-normalize-nfc . G4e08) (string-foldcase . G4e07) (string-downcase . G4e06) (string-ci>? . G4e05) (string-ci>=? . G4e04) (string-ci=? . G4e03) (string-ci<? . G4e02) (string-ci<=? . G4e01) (char-whitespace? . G4e00) (char-upper-case? . G4dff) (char-title-case? . G4dfe) (char-numeric? . G4dfd) (char-lower-case? . G4dfc) (char-general-category . G4dfb) (char-upcase . G4dfa) (char-titlecase . G4df9) (char-foldcase . G4df8) (char-downcase . G4df7) (char-ci>? . G4df6) (char-ci>=? . G4df5) (char-ci=? . G4df4) (char-ci<? . G4df3) (char-ci<=? . G4df2) (char-alphabetic? . G4df1) (make-variable-transformer . G2b75) (identifier? . G2e1b) (generate-temporaries . G2e07) (free-identifier=? . G2e09) (syntax->datum . G2e1f) (datum->syntax . G2e1d) (bound-identifier=? . G2e0b) (record-type-descriptor? . G4df0) (record-predicate . G4def) (record-mutator . G4dee) (record-constructor . G4ded) (record-accessor . G4dec) (make-record-type-descriptor . G4deb) (make-record-constructor-descriptor . G4dea) (record? . G4de9) (record-type-uid . G4de8) (record-type-sealed? . G4de7) (record-type-parent . G4de6) (record-type-opaque? . G4de5) (record-type-name . G4de4) (record-type-generative? . G4de3) (record-type-field-names . G4de2) (record-rtd . G4de1) (record-field-mutable? . G4de0) (delete-file . G4ddf) (file-exists? . G4dde) (vector-sort! . G4ddd) (vector-sort . G4ddc) (list-sort . G4ddb) (symbol-hash . G4dda) (string-ci-hash . G4dd9) (string-hash . G4dd8) (equal-hash . G4dd7) (hashtable-equivalence-function . G4dd6) (make-hashtable . G4dd5) (hashtable-hash-function . G4dd4) (make-eqv-hashtable . G4dd3) (make-eq-hashtable . G4dd2) (hashtable? . G4dd1) (hashtable-update! . G4dd0) (hashtable-size . G4dcf) (hashtable-set! . G4dce) (hashtable-ref . G4dcd) (hashtable-mutable? . G4dcc) (hashtable-keys . G4dcb) (hashtable-entries . G4dca) (hashtable-delete! . G4dc9) (hashtable-copy . G4dc8) (hashtable-contains? . G4dc7) (hashtable-clear! . G4dc6) (call-with-output-file . G4dc5) (call-with-input-file . G4dc4) (write-char . G4dc3) (write . G4dc2) (with-output-to-file . G4dc1) (with-input-from-file . G4dc0) (read-char . G4dbf) (read . G4dbe) (peek-char . G4dbd) (open-output-file . G4dbc) (open-input-file . G4dbb) (newline . G4dba) (display . G4db9) (close-output-port . G4db8) (close-input-port . G4db7) (eof-object? . G4db6) (eof-object . G4db5) (current-error-port . G4db4) (current-output-port . G4db3) (current-input-port . G4db2) (output-port? . G4db1) (input-port? . G4db0) (utf-8-codec . G4daf) (utf-16-codec . G4dae) (transcoder-error-handling-mode . G4dad) (transcoder-eol-style . G4dac) (transcoder-codec . G4dab) (transcoded-port . G4daa) (textual-port? . G4da9) (string->bytevector . G4da8) (standard-output-port . G4da7) (standard-input-port . G4da6) (standard-error-port . G4da5) (set-port-position! . G4da4) (put-u8 . G4da3) (put-string . G4da2) (put-datum . G4da1) (put-char . G4da0) (put-bytevector . G4d9f) (port? . G4d9e) (port-transcoder . G4d9d) (port-position . G4d9c) (port-has-set-port-position!? . G4d9b) (port-has-port-position? . G4d9a) (port-eof? . G4d99) (output-port-buffer-mode . G4d98) (open-string-output-port . G4d97) (open-string-input-port . G4d96) (open-file-output-port . G4d95) (open-file-input/output-port . G4d94) (open-file-input-port . G4d93) (open-bytevector-output-port . G4d92) (open-bytevector-input-port . G4d91) (native-transcoder . G4d90) (native-eol-style . G4d8f) (make-transcoder . G4d8e) (latin-1-codec . G4d8d) (make-i/o-write-error . G48c2) (make-i/o-read-error . G48ad) (make-i/o-port-error . G4960) (make-i/o-invalid-position-error . G48d8) (make-i/o-filename-error . G48f2) (make-i/o-file-protection-error . G490b) (make-i/o-file-is-read-only-error . G4920) (make-i/o-file-does-not-exist-error . G494a) (make-i/o-file-already-exists-error . G4935) (make-i/o-error . G4898) (make-i/o-encoding-error . G498f) (make-i/o-decoding-error . G4979) (make-custom-textual-output-port . G4d8c) (make-custom-textual-input/output-port . G4d8b) (make-custom-textual-input-port . G4d8a) (make-custom-binary-output-port . G4d89) (make-custom-binary-input/output-port . G4d88) (make-custom-binary-input-port . G4d87) (make-bytevector . G4d86) (lookahead-u8 . G4d85) (lookahead-char . G4d84) (i/o-write-error? . G48c4) (i/o-read-error? . G48af) (i/o-port-error? . G4964) (i/o-invalid-position-error? . G48dc) (i/o-filename-error? . G48f6) (i/o-file-protection-error? . G490d) (i/o-file-is-read-only-error? . G4922) (i/o-file-does-not-exist-error? . G494c) (i/o-file-already-exists-error? . G4937) (i/o-error? . G489a) (i/o-error-position . G48de) (i/o-error-port . G4966) (i/o-error-filename . G48f8) (i/o-encoding-error? . G4993) (i/o-encoding-error-char . G4995) (i/o-decoding-error? . G497b) (get-u8 . G4d83) (get-string-n! . G4d82) (get-string-n . G4d81) (get-string-all . G4d80) (get-line . G4d7f) (get-datum . G4d7e) (get-char . G4d7d) (get-bytevector-some . G4d7c) (get-bytevector-n! . G4d7b) (get-bytevector-n . G4d7a) (get-bytevector-all . G4d79) (flush-output-port . G4d78) (close-port . G4d77) (exit . G4d6f) (command-line . G4ac4) (string-fill! . G4d6e) (string-set! . G4d6d) (set-cdr! . G4d6c) (set-car! . G4d6b) (remove . G4d6a) (remv . G4d69) (remp . G4d68) (remq . G4d67) (partition . G4d66) (memv . G4d65) (memq . G4d64) (memp . G4d63) (member . G4d62) (exists . G4d61) (for-all . G4d60) (fold-right . G4d5f) (fold-left . G4d5e) (find . G4d5d) (filter . G4d5c) (cons* . G4d5b) (assv . G4d5a) (assq . G4d59) (assp . G4d58) (assoc . G4d57) (call-with-string-output-port . G4d56) (call-with-port . G4d55) (call-with-bytevector-output-port . G4d54) (bytevector->string . G4d53) (buffer-mode? . G4d52) (binary-port? . G4d51) (with-exception-handler . G4d50) (raise-continuable . G4d4f) (raise . G4d4e) (eval . G2df9) (environment . G2df1) (make-enumeration . G4d4d) (enum-set=? . G4d4c) (enum-set-universe . G4d4b) (enum-set-union . G4d4a) (enum-set-subset? . G4d49) (enum-set-projection . G4d48) (enum-set-member? . G4d47) (enum-set-intersection . G4d46) (enum-set-indexer . G4d45) (enum-set-difference . G4d44) (enum-set-constructor . G4d43) (enum-set-complement . G4d42) (enum-set->list . G4d41) (who-condition? . G4810) (warning? . G478a) (violation? . G47c9) (undefined-violation? . G4885) (syntax-violation? . G486c) (syntax-violation-subform . G4870) (syntax-violation-form . G486e) (syntax-violation . G2e19) (simple-conditions . G4d40) (serious-condition? . G479f) (non-continuable-violation? . G4827) (message-condition? . G4773) (make-who-condition . G480c) (make-warning . G4788) (make-violation . G47c7) (make-undefined-violation . G4883) (make-syntax-violation . G4866) (make-serious-condition . G479d) (make-non-continuable-violation . G4825) (make-message-condition . G476f) (make-lexical-violation . G484f) (make-irritants-condition . G47f2) (make-implementation-restriction-violation . G483a) (make-error . G47b2) (make-assertion-violation . G47dc) (lexical-violation? . G4851) (irritants-condition? . G47f6) (implementation-restriction-violation? . G483c) (error? . G47b4) (condition-who . G4812) (condition-predicate . G4d3f) (condition-message . G4775) (condition-irritants . G47f8) (condition-accessor . G4d3e) (condition . G4d3d) (assertion-violation? . G47de) (condition? . G4d3c) (utf32->string . G4d3b) (utf16->string . G4d3a) (utf8->string . G4d39) (uint-list->bytevector . G4d38) (u8-list->bytevector . G4d37) (string->utf8 . G4d36) (string->utf32 . G4d35) (string->utf16 . G4d34) (sint-list->bytevector . G4d33) (native-endianness . G4d32) (bytevector? . G4d31) (bytevector=? . G4d30) (bytevector-uint-set! . G4d2f) (bytevector-uint-ref . G4d2e) (bytevector-u8-set! . G4d2d) (bytevector-u8-ref . G4d2c) (bytevector-u64-set! . G4d2b) (bytevector-u64-ref . G4d2a) (bytevector-u64-native-set! . G4d29) (bytevector-u64-native-ref . G4d28) (bytevector-u32-set! . G4d27) (bytevector-u32-ref . G4d26) (bytevector-u32-native-set! . G4d25) (bytevector-u32-native-ref . G4d24) (bytevector-u16-set! . G4d23) (bytevector-u16-ref . G4d22) (bytevector-u16-native-set! . G4d21) (bytevector-u16-native-ref . G4d20) (bytevector-sint-set! . G4d1f) (bytevector-sint-ref . G4d1e) (bytevector-s8-set! . G4d1d) (bytevector-s8-ref . G4d1c) (bytevector-s64-set! . G4d1b) (bytevector-s64-ref . G4d1a) (bytevector-s64-native-set! . G4d19) (bytevector-s64-native-ref . G4d18) (bytevector-s32-set! . G4d17) (bytevector-s32-ref . G4d16) (bytevector-s32-native-set! . G4d15) (bytevector-s32-native-ref . G4d14) (bytevector-s16-set! . G4d13) (bytevector-s16-ref . G4d12) (bytevector-s16-native-set! . G4d11) (bytevector-s16-native-ref . G4d10) (bytevector-length . G4d0f) (bytevector-ieee-single-ref . G4d0e) (bytevector-ieee-single-set! . G4d0d) (bytevector-ieee-single-native-set! . G4d0c) (bytevector-ieee-single-native-ref . G4d0b) (bytevector-ieee-double-set! . G4d0a) (bytevector-ieee-double-ref . G4d09) (bytevector-ieee-double-native-set! . G4d08) (bytevector-ieee-double-native-ref . G4d07) (bytevector-fill! . G4d06) (bytevector-copy! . G4d05) (bytevector-copy . G4d04) (bytevector->uint-list . G4d03) (bytevector->u8-list . G4d02) (bytevector->sint-list . G4d01) (no-nans-violation? . G49bf) (no-infinities-violation? . G49aa) (make-no-nans-violation . G49bd) (make-no-infinities-violation . G49a8) (real->flonum . G4d00) (flzero? . G4cff) (fltruncate . G4cfe) (fltan . G4cfd) (flsqrt . G4cfc) (flsin . G4cfb) (flround . G4cfa) (flpositive? . G4cf9) (flonum? . G4cf8) (flodd? . G4cf7) (flnumerator . G4cf6) (flnegative? . G4cf5) (flnan? . G4cf4) (flmod0 . G4cf3) (flmod . G4cf2) (flmin . G4cf1) (flmax . G4cf0) (fllog . G4cef) (flinteger? . G4cee) (flinfinite? . G4ced) (flfloor . G4cec) (flfinite? . G4ceb) (flexpt . G4cea) (flexp . G4ce9) (fleven? . G4ce8) (fldiv0-and-mod0 . G4ce7) (fldiv0 . G4ce6) (fldiv-and-mod . G4ce5) (fldiv . G4ce4) (fldenominator . G4ce3) (flcos . G4ce2) (flceiling . G4ce1) (flatan . G4ce0) (flasin . G4cdf) (flacos . G4cde) (flabs . G4cdd) (fl>? . G4cdc) (fl>=? . G4cdb) (fl=? . G4cda) (fl<? . G4cd9) (fl<=? . G4cd8) (fl/ . G4cd7) (fl- . G4cd6) (fl+ . G4cd5) (fl* . G4cd4) (fixnum->flonum . G4cd3) (fxzero? . G4cd2) (fxxor . G4cd1) (fxrotate-bit-field . G4cd0) (fxreverse-bit-field . G4ccf) (fxpositive? . G4cce) (fxodd? . G4ccd) (fxnot . G4ccc) (fxnegative? . G4ccb) (fxmod0 . G4cca) (fxmod . G4cc9) (fxmin . G4cc8) (fxmax . G4cc7) (fxlength . G4cc6) (fxior . G4cc5) (fxif . G4cc4) (fxfirst-bit-set . G4cc3) (fxeven? . G4cc2) (fxdiv0-and-mod0 . G4cc1) (fxdiv0 . G4cc0) (fxdiv-and-mod . G4cbf) (fxdiv . G4cbe) (fxcopy-bit-field . G4cbd) (fxcopy-bit . G4cbc) (fxbit-set? . G4cbb) (fxbit-field . G4cba) (fxbit-count . G4cb9) (fxarithmetic-shift-right . G4cb8) (fxarithmetic-shift-left . G4cb7) (fxarithmetic-shift . G4cb6) (fxand . G4cb5) (fx>? . G4cb4) (fx>=? . G4cb3) (fx=? . G4cb2) (fx<? . G4cb1) (fx<=? . G4cb0) (fx-/carry . G4caf) (fx- . G4cae) (fx+/carry . G4cad) (fx+ . G4cac) (fx*/carry . G4cab) (fx* . G4caa) (greatest-fixnum . G4ca9) (least-fixnum . G4ca8) (fixnum-width . G4ca7) (fixnum? . G4ca6) (bitwise-rotate-bit-field . G4ca5) (bitwise-reverse-bit-field . G4ca4) (bitwise-length . G4ca3) (bitwise-if . G4ca2) (bitwise-first-bit-set . G4ca1) (bitwise-copy-bit-field . G4ca0) (bitwise-copy-bit . G4c9f) (bitwise-bit-set? . G4c9e) (bitwise-bit-field . G4c9d) (bitwise-bit-count . G4c9c) (bitwise-xor . G4c9b) (bitwise-ior . G4c9a) (bitwise-and . G4c99) (bitwise-not . G4c98) (bitwise-arithmetic-shift-right . G4c97) (bitwise-arithmetic-shift-left . G4c96) (bitwise-arithmetic-shift . G4c95) (zero? . G4c94) (vector? . G4c93) (vector-set! . G4c92) (vector-ref . G4c91) (vector-map . G4c90) (vector-length . G4c8f) (vector-for-each . G4c8e) (vector-fill! . G4c8d) (vector->list . G4c8c) (vector . G4c8b) (values . G4c8a) (truncate . G4c89) (tan . G4c88) (symbol? . G4c87) (symbol=? . G4c86) (symbol->string . G4c85) (substring . G4c84) (string? . G4c83) (string>? . G4c82) (string>=? . G4c81) (string=? . G4c80) (string<? . G4c7f) (string<=? . G4c7e) (string-ref . G4c7d) (string-length . G4c7c) (string-for-each . G4c7b) (string-copy . G4c7a) (string-append . G4c79) (string->symbol . G4c78) (string->number . G4c77) (string->list . G4c76) (string . G4c75) (sqrt . G4c74) (sin . G4c73) (round . G4c72) (reverse . G4c71) (real? . G4c70) (real-valued? . G4c6f) (real-part . G4c6e) (rationalize . G4c6d) (rational? . G4c6c) (rational-valued? . G4c6b) (procedure? . G4c6a) (positive? . G4c69) (pair? . G4c68) (odd? . G4c67) (numerator . G4c66) (number? . G4c65) (number->string . G4c64) (null? . G4c63) (not . G4c62) (negative? . G4c61) (nan? . G4c60) (min . G4c5f) (max . G4c5e) (map . G4c5d) (make-vector . G4c5c) (make-string . G4c5b) (make-rectangular . G4c5a) (make-polar . G4c59) (magnitude . G4c58) (log . G4c57) (list? . G4c56) (list-tail . G4c55) (list-ref . G4c54) (list->vector . G4c53) (list->string . G4c52) (list . G4c51) (length . G4c50) (lcm . G4c4f) (integer? . G4c4e) (integer-valued? . G4c4d) (integer->char . G4c4c) (infinite? . G4c4b) (inexact? . G4c4a) (inexact . G4c49) (imag-part . G4c48) (gcd . G4c47) (for-each . G4c46) (floor . G4c45) (finite? . G4c44) (expt . G4c43) (exp . G4c42) (exact? . G4c41) (exact-integer-sqrt . G4c40) (exact . G4c3f) (even? . G4c3e) (error . G4c3d) (eqv? . G4c3c) (equal? . G4c3b) (eq? . G4c3a) (dynamic-wind . G4c39) (div0-and-mod0 . G4c38) (mod0 . G4c37) (div0 . G4c36) (div-and-mod . G4c35) (mod . G4c34) (div . G4c33) (denominator . G4c32) (cos . G4c31) (cons . G4c30) (complex? . G4c2f) (char? . G4c2e) (char>? . G4c2d) (char>=? . G4c2c) (char=? . G4c2b) (char<? . G4c2a) (char<=? . G4c29) (char->integer . G4c28) (ceiling . G4c27) (call-with-values . G4c26) (call/cc . G4c25) (call-with-current-continuation . G4c24) (cddddr . G4c23) (cdddar . G4c22) (cddadr . G4c21) (cddaar . G4c20) (cdaddr . G4c1f) (cdadar . G4c1e) (cdaadr . G4c1d) (cdaaar . G4c1c) (cadddr . G4c1b) (caddar . G4c1a) (cadadr . G4c19) (cadaar . G4c18) (caaddr . G4c17) (caadar . G4c16) (caaadr . G4c15) (caaaar . G4c14) (cdddr . G4c13) (cddar . G4c12) (cdadr . G4c11) (cdaar . G4c10) (caddr . G4c0f) (cadar . G4c0e) (caadr . G4c0d) (caaar . G4c0c) (cddr . G4c0b) (cdar . G4c0a) (cadr . G4c09) (caar . G4c08) (cdr . G4c07) (car . G4c06) (boolean? . G4c05) (boolean=? . G4c04) (atan . G4c03) (assertion-violation . G4c02) (asin . G4c01) (apply . G4c00) (append . G4bff) (angle . G4bfe) (acos . G4bfd) (abs . G4bfc) (/ . G4bfb) (* . G4bfa) (- . G4bf9) (+ . G4bf8) (>= . G4bf7) (> . G4bf6) (= . G4bf5) (<= . G4bf4) (< . G4bf3) (library . G4bf2) (&no-nans . G4bf1) (&no-infinities . G4bf0) (&i/o-encoding . G4bef) (&i/o-decoding . G4bee) (&i/o-port . G4bed) (&i/o-file-does-not-exist . G4bec) (&i/o-file-already-exists . G4beb) (&i/o-file-is-read-only . G4bea) (&i/o-file-protection . G4be9) (&i/o-filename . G4be8) (&i/o-invalid-position . G4be7) (&i/o-write . G4be6) (&i/o-read . G4be5) (&i/o . G4be4) (&undefined . G4be3) (&syntax . G4be2) (&lexical . G4be1) (&implementation-restriction . G4be0) (&non-continuable . G4bdf) (&who . G4bde) (&irritants . G4bdd) (&assertion . G4bdc) (&violation . G4bdb) (&error . G4bda) (&serious . G4bd9) (&warning . G4bd8) (&message . G4bd7) (&condition . G4bd6) (define-condition-type . G4bd5) (define-enumeration . G4bd4) (define-record-type . G4bd3) (parent-rtd . G4bd2) (nongenerative . G4bd1) (opaque . G4bd0) (sealed . G4bcf) (protocol . G4bce) (parent . G4bcd) (immutable . G4bcc) (mutable . G4bcb) (fields . G4bca) (error-handling-mode . G4bc9) (file-options . G4bc8) (buffer-mode . G4bc7) (eol-style . G4bc6) (guard . G4bc5) (unsyntax-splicing . G4bc2) (unsyntax . G4bc1) (unquote-splicing . G4bc0) (unquote . G4bbf) (_ . G4bbe) (else . G4bbd) (=> . G4bbc) (... . G4bbb) (assert . G4bba) (endianness . G4bb9) (do . G4bb6) (cond . G4bb5) (let* . G4bb4) (let . G4bb3) (let*-values . G4bb2) (let-values . G4bb1) (identifier-syntax . G4bb0) (with-syntax . G4baf) (quasisyntax . G4bae) (quasiquote . G4bad) (syntax-rules . G4bac) (include . G4bab) (record-constructor-descriptor . G4ba9) (record-type-descriptor . G4ba8) (case . G4ba7) (unless . G4ba5) (when . G4ba4) (or . G4ba3) (and . G4ba2) (if . G4ba1) (letrec* . G4ba0) (letrec . G4b9f) (case-lambda . G4b9d) (lambda . G4b9c) (syntax . G4b9b) (syntax-case . G4b9a) (quote . G4b99) (letrec-syntax . G4b97) (let-syntax . G4b96) (set! . G4b95) (import . G4b94) (begin . G4b93) (define-syntax . G4b91) (define . G4b90)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e52 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4d70) (unquote-splicing . G4bc0) (unquote . G4bbf) (_ . G4bbe) (else . G4bbd) (=> . G4bbc) (... . G4bbb) (delay . G4bb8) (do . G4bb6) (cond . G4bb5) (let* . G4bb4) (let . G4bb3) (quasiquote . G4bad) (syntax-rules . G4bac) (case . G4ba7) (or . G4ba3) (and . G4ba2) (if . G4ba1) (letrec . G4b9f) (lambda . G4b9c) (quote . G4b99) (letrec-syntax . G4b97) (let-syntax . G4b96) (set! . G4b95) (begin . G4b93) (define-syntax . G4b91) (define . G4b90)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e53 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G4e05) (string-ci>=? . G4e04) (string-ci=? . G4e03) (string-ci<? . G4e02) (string-ci<=? . G4e01) (char-whitespace? . G4e00) (char-upper-case? . G4dff) (char-numeric? . G4dfd) (char-lower-case? . G4dfc) (char-upcase . G4dfa) (char-downcase . G4df7) (char-ci>? . G4df6) (char-ci>=? . G4df5) (char-ci=? . G4df4) (char-ci<? . G4df3) (char-ci<=? . G4df2) (char-alphabetic? . G4df1) (call-with-output-file . G4dc5) (call-with-input-file . G4dc4) (write-char . G4dc3) (write . G4dc2) (with-output-to-file . G4dc1) (with-input-from-file . G4dc0) (read-char . G4dbf) (read . G4dbe) (peek-char . G4dbd) (open-output-file . G4dbc) (open-input-file . G4dbb) (newline . G4dba) (display . G4db9) (close-output-port . G4db8) (close-input-port . G4db7) (eof-object . G4db5) (current-output-port . G4db3) (current-input-port . G4db2) (output-port? . G4db1) (input-port? . G4db0) (scheme-report-environment . G2df5) (quotient . G4d76) (null-environment . G2df3) (remainder . G4d75) (modulo . G4d74) (inexact->exact . G4d73) (force . G4d72) (exact->inexact . G4d71) (make-promise . G4d70) (string-fill! . G4d6e) (string-set! . G4d6d) (set-cdr! . G4d6c) (set-car! . G4d6b) (memv . G4d65) (memq . G4d64) (member . G4d62) (assv . G4d5a) (assq . G4d59) (assoc . G4d57) (eval . G2df9) (zero? . G4c94) (vector? . G4c93) (vector-set! . G4c92) (vector-ref . G4c91) (vector-length . G4c8f) (vector-fill! . G4c8d) (vector->list . G4c8c) (vector . G4c8b) (values . G4c8a) (truncate . G4c89) (tan . G4c88) (symbol? . G4c87) (symbol->string . G4c85) (substring . G4c84) (string? . G4c83) (string>? . G4c82) (string>=? . G4c81) (string=? . G4c80) (string<? . G4c7f) (string<=? . G4c7e) (string-ref . G4c7d) (string-length . G4c7c) (string-copy . G4c7a) (string-append . G4c79) (string->symbol . G4c78) (string->number . G4c77) (string->list . G4c76) (string . G4c75) (sqrt . G4c74) (sin . G4c73) (round . G4c72) (reverse . G4c71) (real? . G4c70) (real-part . G4c6e) (rationalize . G4c6d) (rational? . G4c6c) (procedure? . G4c6a) (positive? . G4c69) (pair? . G4c68) (odd? . G4c67) (numerator . G4c66) (number? . G4c65) (number->string . G4c64) (not . G4c62) (negative? . G4c61) (min . G4c5f) (max . G4c5e) (map . G4c5d) (make-vector . G4c5c) (make-string . G4c5b) (make-rectangular . G4c5a) (make-polar . G4c59) (magnitude . G4c58) (log . G4c57) (list? . G4c56) (list-tail . G4c55) (list-ref . G4c54) (list->vector . G4c53) (list->string . G4c52) (list . G4c51) (length . G4c50) (lcm . G4c4f) (integer? . G4c4e) (integer->char . G4c4c) (inexact? . G4c4a) (imag-part . G4c48) (gcd . G4c47) (for-each . G4c46) (floor . G4c45) (expt . G4c43) (exp . G4c42) (exact? . G4c41) (even? . G4c3e) (eqv? . G4c3c) (equal? . G4c3b) (eq? . G4c3a) (dynamic-wind . G4c39) (denominator . G4c32) (cos . G4c31) (cons . G4c30) (complex? . G4c2f) (char? . G4c2e) (char>? . G4c2d) (char>=? . G4c2c) (char=? . G4c2b) (char<? . G4c2a) (char<=? . G4c29) (char->integer . G4c28) (ceiling . G4c27) (call-with-values . G4c26) (call-with-current-continuation . G4c24) (cddddr . G4c23) (cdddar . G4c22) (cddadr . G4c21) (cddaar . G4c20) (cdaddr . G4c1f) (cdadar . G4c1e) (cdaadr . G4c1d) (cdaaar . G4c1c) (cadddr . G4c1b) (caddar . G4c1a) (cadadr . G4c19) (cadaar . G4c18) (caaddr . G4c17) (caadar . G4c16) (caaadr . G4c15) (caaaar . G4c14) (cdddr . G4c13) (cddar . G4c12) (cdadr . G4c11) (cdaar . G4c10) (caddr . G4c0f) (cadar . G4c0e) (caadr . G4c0d) (caaar . G4c0c) (cddr . G4c0b) (cdar . G4c0a) (cadr . G4c09) (caar . G4c08) (cdr . G4c07) (car . G4c06) (boolean? . G4c05) (atan . G4c03) (asin . G4c01) (apply . G4c00) (append . G4bff) (angle . G4bfe) (acos . G4bfd) (abs . G4bfc) (/ . G4bfb) (* . G4bfa) (- . G4bf9) (+ . G4bf8) (>= . G4bf7) (> . G4bf6) (= . G4bf5) (<= . G4bf4) (< . G4bf3) (unquote-splicing . G4bc0) (unquote . G4bbf) (else . G4bbd) (=> . G4bbc) (... . G4bbb) (delay . G4bb8) (do . G4bb6) (cond . G4bb5) (let* . G4bb4) (let . G4bb3) (quasiquote . G4bad) (syntax-rules . G4bac) (case . G4ba7) (or . G4ba3) (and . G4ba2) (if . G4ba1) (letrec . G4b9f) (lambda . G4b9c) (quote . G4b99) (letrec-syntax . G4b97) (let-syntax . G4b96) (set! . G4b95) (begin . G4b93) (define-syntax . G4b91) (define . G4b90)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e54 '(psyntax modules) '() '() '() '() '((module . G4b92)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e55 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e56 '(rnrs) '(6) '() '() '() '((regexp? . G4e49) (string-upcase . G4e0d) (string-titlecase . G4e0c) (string-normalize-nfkd . G4e0b) (string-normalize-nfkc . G4e0a) (string-normalize-nfd . G4e09) (string-normalize-nfc . G4e08) (string-foldcase . G4e07) (string-downcase . G4e06) (string-ci>? . G4e05) (string-ci>=? . G4e04) (string-ci=? . G4e03) (string-ci<? . G4e02) (string-ci<=? . G4e01) (char-whitespace? . G4e00) (char-upper-case? . G4dff) (char-title-case? . G4dfe) (char-numeric? . G4dfd) (char-lower-case? . G4dfc) (char-general-category . G4dfb) (char-upcase . G4dfa) (char-titlecase . G4df9) (char-foldcase . G4df8) (char-downcase . G4df7) (char-ci>? . G4df6) (char-ci>=? . G4df5) (char-ci=? . G4df4) (char-ci<? . G4df3) (char-ci<=? . G4df2) (char-alphabetic? . G4df1) (make-variable-transformer . G2b75) (identifier? . G2e1b) (generate-temporaries . G2e07) (free-identifier=? . G2e09) (syntax->datum . G2e1f) (datum->syntax . G2e1d) (bound-identifier=? . G2e0b) (record-type-descriptor? . G4df0) (record-predicate . G4def) (record-mutator . G4dee) (record-constructor . G4ded) (record-accessor . G4dec) (make-record-type-descriptor . G4deb) (make-record-constructor-descriptor . G4dea) (record? . G4de9) (record-type-uid . G4de8) (record-type-sealed? . G4de7) (record-type-parent . G4de6) (record-type-opaque? . G4de5) (record-type-name . G4de4) (record-type-generative? . G4de3) (record-type-field-names . G4de2) (record-rtd . G4de1) (record-field-mutable? . G4de0) (delete-file . G4ddf) (file-exists? . G4dde) (vector-sort! . G4ddd) (vector-sort . G4ddc) (list-sort . G4ddb) (symbol-hash . G4dda) (string-ci-hash . G4dd9) (string-hash . G4dd8) (equal-hash . G4dd7) (hashtable-equivalence-function . G4dd6) (make-hashtable . G4dd5) (hashtable-hash-function . G4dd4) (make-eqv-hashtable . G4dd3) (make-eq-hashtable . G4dd2) (hashtable? . G4dd1) (hashtable-update! . G4dd0) (hashtable-size . G4dcf) (hashtable-set! . G4dce) (hashtable-ref . G4dcd) (hashtable-mutable? . G4dcc) (hashtable-keys . G4dcb) (hashtable-entries . G4dca) (hashtable-delete! . G4dc9) (hashtable-copy . G4dc8) (hashtable-contains? . G4dc7) (hashtable-clear! . G4dc6) (call-with-output-file . G4dc5) (call-with-input-file . G4dc4) (write-char . G4dc3) (write . G4dc2) (with-output-to-file . G4dc1) (with-input-from-file . G4dc0) (read-char . G4dbf) (read . G4dbe) (peek-char . G4dbd) (open-output-file . G4dbc) (open-input-file . G4dbb) (newline . G4dba) (display . G4db9) (close-output-port . G4db8) (close-input-port . G4db7) (eof-object? . G4db6) (eof-object . G4db5) (current-error-port . G4db4) (current-output-port . G4db3) (current-input-port . G4db2) (output-port? . G4db1) (input-port? . G4db0) (utf-8-codec . G4daf) (utf-16-codec . G4dae) (transcoder-error-handling-mode . G4dad) (transcoder-eol-style . G4dac) (transcoder-codec . G4dab) (transcoded-port . G4daa) (textual-port? . G4da9) (string->bytevector . G4da8) (standard-output-port . G4da7) (standard-input-port . G4da6) (standard-error-port . G4da5) (set-port-position! . G4da4) (put-u8 . G4da3) (put-string . G4da2) (put-datum . G4da1) (put-char . G4da0) (put-bytevector . G4d9f) (port? . G4d9e) (port-transcoder . G4d9d) (port-position . G4d9c) (port-has-set-port-position!? . G4d9b) (port-has-port-position? . G4d9a) (port-eof? . G4d99) (output-port-buffer-mode . G4d98) (open-string-output-port . G4d97) (open-string-input-port . G4d96) (open-file-output-port . G4d95) (open-file-input/output-port . G4d94) (open-file-input-port . G4d93) (open-bytevector-output-port . G4d92) (open-bytevector-input-port . G4d91) (native-transcoder . G4d90) (native-eol-style . G4d8f) (make-transcoder . G4d8e) (latin-1-codec . G4d8d) (make-i/o-write-error . G48c2) (make-i/o-read-error . G48ad) (make-i/o-port-error . G4960) (make-i/o-invalid-position-error . G48d8) (make-i/o-filename-error . G48f2) (make-i/o-file-protection-error . G490b) (make-i/o-file-is-read-only-error . G4920) (make-i/o-file-does-not-exist-error . G494a) (make-i/o-file-already-exists-error . G4935) (make-i/o-error . G4898) (make-i/o-encoding-error . G498f) (make-i/o-decoding-error . G4979) (make-custom-textual-output-port . G4d8c) (make-custom-textual-input/output-port . G4d8b) (make-custom-textual-input-port . G4d8a) (make-custom-binary-output-port . G4d89) (make-custom-binary-input/output-port . G4d88) (make-custom-binary-input-port . G4d87) (make-bytevector . G4d86) (lookahead-u8 . G4d85) (lookahead-char . G4d84) (i/o-write-error? . G48c4) (i/o-read-error? . G48af) (i/o-port-error? . G4964) (i/o-invalid-position-error? . G48dc) (i/o-filename-error? . G48f6) (i/o-file-protection-error? . G490d) (i/o-file-is-read-only-error? . G4922) (i/o-file-does-not-exist-error? . G494c) (i/o-file-already-exists-error? . G4937) (i/o-error? . G489a) (i/o-error-position . G48de) (i/o-error-port . G4966) (i/o-error-filename . G48f8) (i/o-encoding-error? . G4993) (i/o-encoding-error-char . G4995) (i/o-decoding-error? . G497b) (get-u8 . G4d83) (get-string-n! . G4d82) (get-string-n . G4d81) (get-string-all . G4d80) (get-line . G4d7f) (get-datum . G4d7e) (get-char . G4d7d) (get-bytevector-some . G4d7c) (get-bytevector-n! . G4d7b) (get-bytevector-n . G4d7a) (get-bytevector-all . G4d79) (flush-output-port . G4d78) (close-port . G4d77) (exit . G4d6f) (command-line . G4ac4) (remove . G4d6a) (remv . G4d69) (remp . G4d68) (remq . G4d67) (partition . G4d66) (memv . G4d65) (memq . G4d64) (memp . G4d63) (member . G4d62) (exists . G4d61) (for-all . G4d60) (fold-right . G4d5f) (fold-left . G4d5e) (find . G4d5d) (filter . G4d5c) (cons* . G4d5b) (assv . G4d5a) (assq . G4d59) (assp . G4d58) (assoc . G4d57) (call-with-string-output-port . G4d56) (call-with-port . G4d55) (call-with-bytevector-output-port . G4d54) (bytevector->string . G4d53) (buffer-mode? . G4d52) (binary-port? . G4d51) (with-exception-handler . G4d50) (raise-continuable . G4d4f) (raise . G4d4e) (make-enumeration . G4d4d) (enum-set=? . G4d4c) (enum-set-universe . G4d4b) (enum-set-union . G4d4a) (enum-set-subset? . G4d49) (enum-set-projection . G4d48) (enum-set-member? . G4d47) (enum-set-intersection . G4d46) (enum-set-indexer . G4d45) (enum-set-difference . G4d44) (enum-set-constructor . G4d43) (enum-set-complement . G4d42) (enum-set->list . G4d41) (who-condition? . G4810) (warning? . G478a) (violation? . G47c9) (undefined-violation? . G4885) (syntax-violation? . G486c) (syntax-violation-subform . G4870) (syntax-violation-form . G486e) (syntax-violation . G2e19) (simple-conditions . G4d40) (serious-condition? . G479f) (non-continuable-violation? . G4827) (message-condition? . G4773) (make-who-condition . G480c) (make-warning . G4788) (make-violation . G47c7) (make-undefined-violation . G4883) (make-syntax-violation . G4866) (make-serious-condition . G479d) (make-non-continuable-violation . G4825) (make-message-condition . G476f) (make-lexical-violation . G484f) (make-irritants-condition . G47f2) (make-implementation-restriction-violation . G483a) (make-error . G47b2) (make-assertion-violation . G47dc) (lexical-violation? . G4851) (irritants-condition? . G47f6) (implementation-restriction-violation? . G483c) (error? . G47b4) (condition-who . G4812) (condition-predicate . G4d3f) (condition-message . G4775) (condition-irritants . G47f8) (condition-accessor . G4d3e) (condition . G4d3d) (assertion-violation? . G47de) (condition? . G4d3c) (utf32->string . G4d3b) (utf16->string . G4d3a) (utf8->string . G4d39) (uint-list->bytevector . G4d38) (u8-list->bytevector . G4d37) (string->utf8 . G4d36) (string->utf32 . G4d35) (string->utf16 . G4d34) (sint-list->bytevector . G4d33) (native-endianness . G4d32) (bytevector? . G4d31) (bytevector=? . G4d30) (bytevector-uint-set! . G4d2f) (bytevector-uint-ref . G4d2e) (bytevector-u8-set! . G4d2d) (bytevector-u8-ref . G4d2c) (bytevector-u64-set! . G4d2b) (bytevector-u64-ref . G4d2a) (bytevector-u64-native-set! . G4d29) (bytevector-u64-native-ref . G4d28) (bytevector-u32-set! . G4d27) (bytevector-u32-ref . G4d26) (bytevector-u32-native-set! . G4d25) (bytevector-u32-native-ref . G4d24) (bytevector-u16-set! . G4d23) (bytevector-u16-ref . G4d22) (bytevector-u16-native-set! . G4d21) (bytevector-u16-native-ref . G4d20) (bytevector-sint-set! . G4d1f) (bytevector-sint-ref . G4d1e) (bytevector-s8-set! . G4d1d) (bytevector-s8-ref . G4d1c) (bytevector-s64-set! . G4d1b) (bytevector-s64-ref . G4d1a) (bytevector-s64-native-set! . G4d19) (bytevector-s64-native-ref . G4d18) (bytevector-s32-set! . G4d17) (bytevector-s32-ref . G4d16) (bytevector-s32-native-set! . G4d15) (bytevector-s32-native-ref . G4d14) (bytevector-s16-set! . G4d13) (bytevector-s16-ref . G4d12) (bytevector-s16-native-set! . G4d11) (bytevector-s16-native-ref . G4d10) (bytevector-length . G4d0f) (bytevector-ieee-single-ref . G4d0e) (bytevector-ieee-single-set! . G4d0d) (bytevector-ieee-single-native-set! . G4d0c) (bytevector-ieee-single-native-ref . G4d0b) (bytevector-ieee-double-set! . G4d0a) (bytevector-ieee-double-ref . G4d09) (bytevector-ieee-double-native-set! . G4d08) (bytevector-ieee-double-native-ref . G4d07) (bytevector-fill! . G4d06) (bytevector-copy! . G4d05) (bytevector-copy . G4d04) (bytevector->uint-list . G4d03) (bytevector->u8-list . G4d02) (bytevector->sint-list . G4d01) (no-nans-violation? . G49bf) (no-infinities-violation? . G49aa) (make-no-nans-violation . G49bd) (make-no-infinities-violation . G49a8) (real->flonum . G4d00) (flzero? . G4cff) (fltruncate . G4cfe) (fltan . G4cfd) (flsqrt . G4cfc) (flsin . G4cfb) (flround . G4cfa) (flpositive? . G4cf9) (flonum? . G4cf8) (flodd? . G4cf7) (flnumerator . G4cf6) (flnegative? . G4cf5) (flnan? . G4cf4) (flmod0 . G4cf3) (flmod . G4cf2) (flmin . G4cf1) (flmax . G4cf0) (fllog . G4cef) (flinteger? . G4cee) (flinfinite? . G4ced) (flfloor . G4cec) (flfinite? . G4ceb) (flexpt . G4cea) (flexp . G4ce9) (fleven? . G4ce8) (fldiv0-and-mod0 . G4ce7) (fldiv0 . G4ce6) (fldiv-and-mod . G4ce5) (fldiv . G4ce4) (fldenominator . G4ce3) (flcos . G4ce2) (flceiling . G4ce1) (flatan . G4ce0) (flasin . G4cdf) (flacos . G4cde) (flabs . G4cdd) (fl>? . G4cdc) (fl>=? . G4cdb) (fl=? . G4cda) (fl<? . G4cd9) (fl<=? . G4cd8) (fl/ . G4cd7) (fl- . G4cd6) (fl+ . G4cd5) (fl* . G4cd4) (fixnum->flonum . G4cd3) (fxzero? . G4cd2) (fxxor . G4cd1) (fxrotate-bit-field . G4cd0) (fxreverse-bit-field . G4ccf) (fxpositive? . G4cce) (fxodd? . G4ccd) (fxnot . G4ccc) (fxnegative? . G4ccb) (fxmod0 . G4cca) (fxmod . G4cc9) (fxmin . G4cc8) (fxmax . G4cc7) (fxlength . G4cc6) (fxior . G4cc5) (fxif . G4cc4) (fxfirst-bit-set . G4cc3) (fxeven? . G4cc2) (fxdiv0-and-mod0 . G4cc1) (fxdiv0 . G4cc0) (fxdiv-and-mod . G4cbf) (fxdiv . G4cbe) (fxcopy-bit-field . G4cbd) (fxcopy-bit . G4cbc) (fxbit-set? . G4cbb) (fxbit-field . G4cba) (fxbit-count . G4cb9) (fxarithmetic-shift-right . G4cb8) (fxarithmetic-shift-left . G4cb7) (fxarithmetic-shift . G4cb6) (fxand . G4cb5) (fx>? . G4cb4) (fx>=? . G4cb3) (fx=? . G4cb2) (fx<? . G4cb1) (fx<=? . G4cb0) (fx-/carry . G4caf) (fx- . G4cae) (fx+/carry . G4cad) (fx+ . G4cac) (fx*/carry . G4cab) (fx* . G4caa) (greatest-fixnum . G4ca9) (least-fixnum . G4ca8) (fixnum-width . G4ca7) (fixnum? . G4ca6) (bitwise-rotate-bit-field . G4ca5) (bitwise-reverse-bit-field . G4ca4) (bitwise-length . G4ca3) (bitwise-if . G4ca2) (bitwise-first-bit-set . G4ca1) (bitwise-copy-bit-field . G4ca0) (bitwise-copy-bit . G4c9f) (bitwise-bit-set? . G4c9e) (bitwise-bit-field . G4c9d) (bitwise-bit-count . G4c9c) (bitwise-xor . G4c9b) (bitwise-ior . G4c9a) (bitwise-and . G4c99) (bitwise-not . G4c98) (bitwise-arithmetic-shift-right . G4c97) (bitwise-arithmetic-shift-left . G4c96) (bitwise-arithmetic-shift . G4c95) (zero? . G4c94) (vector? . G4c93) (vector-set! . G4c92) (vector-ref . G4c91) (vector-map . G4c90) (vector-length . G4c8f) (vector-for-each . G4c8e) (vector-fill! . G4c8d) (vector->list . G4c8c) (vector . G4c8b) (values . G4c8a) (truncate . G4c89) (tan . G4c88) (symbol? . G4c87) (symbol=? . G4c86) (symbol->string . G4c85) (substring . G4c84) (string? . G4c83) (string>? . G4c82) (string>=? . G4c81) (string=? . G4c80) (string<? . G4c7f) (string<=? . G4c7e) (string-ref . G4c7d) (string-length . G4c7c) (string-for-each . G4c7b) (string-copy . G4c7a) (string-append . G4c79) (string->symbol . G4c78) (string->number . G4c77) (string->list . G4c76) (string . G4c75) (sqrt . G4c74) (sin . G4c73) (round . G4c72) (reverse . G4c71) (real? . G4c70) (real-valued? . G4c6f) (real-part . G4c6e) (rationalize . G4c6d) (rational? . G4c6c) (rational-valued? . G4c6b) (procedure? . G4c6a) (positive? . G4c69) (pair? . G4c68) (odd? . G4c67) (numerator . G4c66) (number? . G4c65) (number->string . G4c64) (null? . G4c63) (not . G4c62) (negative? . G4c61) (nan? . G4c60) (min . G4c5f) (max . G4c5e) (map . G4c5d) (make-vector . G4c5c) (make-string . G4c5b) (make-rectangular . G4c5a) (make-polar . G4c59) (magnitude . G4c58) (log . G4c57) (list? . G4c56) (list-tail . G4c55) (list-ref . G4c54) (list->vector . G4c53) (list->string . G4c52) (list . G4c51) (length . G4c50) (lcm . G4c4f) (integer? . G4c4e) (integer-valued? . G4c4d) (integer->char . G4c4c) (infinite? . G4c4b) (inexact? . G4c4a) (inexact . G4c49) (imag-part . G4c48) (gcd . G4c47) (for-each . G4c46) (floor . G4c45) (finite? . G4c44) (expt . G4c43) (exp . G4c42) (exact? . G4c41) (exact-integer-sqrt . G4c40) (exact . G4c3f) (even? . G4c3e) (error . G4c3d) (eqv? . G4c3c) (equal? . G4c3b) (eq? . G4c3a) (dynamic-wind . G4c39) (div0-and-mod0 . G4c38) (mod0 . G4c37) (div0 . G4c36) (div-and-mod . G4c35) (mod . G4c34) (div . G4c33) (denominator . G4c32) (cos . G4c31) (cons . G4c30) (complex? . G4c2f) (char? . G4c2e) (char>? . G4c2d) (char>=? . G4c2c) (char=? . G4c2b) (char<? . G4c2a) (char<=? . G4c29) (char->integer . G4c28) (ceiling . G4c27) (call-with-values . G4c26) (call/cc . G4c25) (call-with-current-continuation . G4c24) (cddddr . G4c23) (cdddar . G4c22) (cddadr . G4c21) (cddaar . G4c20) (cdaddr . G4c1f) (cdadar . G4c1e) (cdaadr . G4c1d) (cdaaar . G4c1c) (cadddr . G4c1b) (caddar . G4c1a) (cadadr . G4c19) (cadaar . G4c18) (caaddr . G4c17) (caadar . G4c16) (caaadr . G4c15) (caaaar . G4c14) (cdddr . G4c13) (cddar . G4c12) (cdadr . G4c11) (cdaar . G4c10) (caddr . G4c0f) (cadar . G4c0e) (caadr . G4c0d) (caaar . G4c0c) (cddr . G4c0b) (cdar . G4c0a) (cadr . G4c09) (caar . G4c08) (cdr . G4c07) (car . G4c06) (boolean? . G4c05) (boolean=? . G4c04) (atan . G4c03) (assertion-violation . G4c02) (asin . G4c01) (apply . G4c00) (append . G4bff) (angle . G4bfe) (acos . G4bfd) (abs . G4bfc) (/ . G4bfb) (* . G4bfa) (- . G4bf9) (+ . G4bf8) (>= . G4bf7) (> . G4bf6) (= . G4bf5) (<= . G4bf4) (< . G4bf3) (&no-nans . G4bf1) (&no-infinities . G4bf0) (&i/o-encoding . G4bef) (&i/o-decoding . G4bee) (&i/o-port . G4bed) (&i/o-file-does-not-exist . G4bec) (&i/o-file-already-exists . G4beb) (&i/o-file-is-read-only . G4bea) (&i/o-file-protection . G4be9) (&i/o-filename . G4be8) (&i/o-invalid-position . G4be7) (&i/o-write . G4be6) (&i/o-read . G4be5) (&i/o . G4be4) (&undefined . G4be3) (&syntax . G4be2) (&lexical . G4be1) (&implementation-restriction . G4be0) (&non-continuable . G4bdf) (&who . G4bde) (&irritants . G4bdd) (&assertion . G4bdc) (&violation . G4bdb) (&error . G4bda) (&serious . G4bd9) (&warning . G4bd8) (&message . G4bd7) (&condition . G4bd6) (define-condition-type . G4bd5) (define-enumeration . G4bd4) (define-record-type . G4bd3) (parent-rtd . G4bd2) (nongenerative . G4bd1) (opaque . G4bd0) (sealed . G4bcf) (protocol . G4bce) (parent . G4bcd) (immutable . G4bcc) (mutable . G4bcb) (fields . G4bca) (error-handling-mode . G4bc9) (file-options . G4bc8) (buffer-mode . G4bc7) (eol-style . G4bc6) (guard . G4bc5) (unsyntax-splicing . G4bc2) (unsyntax . G4bc1) (unquote-splicing . G4bc0) (unquote . G4bbf) (_ . G4bbe) (else . G4bbd) (=> . G4bbc) (... . G4bbb) (assert . G4bba) (endianness . G4bb9) (do . G4bb6) (cond . G4bb5) (let* . G4bb4) (let . G4bb3) (let*-values . G4bb2) (let-values . G4bb1) (identifier-syntax . G4bb0) (with-syntax . G4baf) (quasisyntax . G4bae) (quasiquote . G4bad) (syntax-rules . G4bac) (record-constructor-descriptor . G4ba9) (record-type-descriptor . G4ba8) (case . G4ba7) (unless . G4ba5) (when . G4ba4) (or . G4ba3) (and . G4ba2) (if . G4ba1) (letrec* . G4ba0) (letrec . G4b9f) (case-lambda . G4b9d) (lambda . G4b9c) (syntax . G4b9b) (syntax-case . G4b9a) (quote . G4b99) (letrec-syntax . G4b97) (let-syntax . G4b96) (set! . G4b95) (begin . G4b93) (define-syntax . G4b91) (define . G4b90)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e57 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G2df5) (quotient . G4d76) (null-environment . G2df3) (remainder . G4d75) (modulo . G4d74) (inexact->exact . G4d73) (force . G4d72) (exact->inexact . G4d71) (make-promise . G4d70) (delay . G4bb8)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e58 '(rnrs control) '(6) '() '() '() '((do . G4bb6) (unless . G4ba5) (when . G4ba4) (case-lambda . G4b9d)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e59 '(rnrs eval) '(6) '() '() '() '((eval . G2df9) (environment . G2df1)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e5a '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4d6c) (set-car! . G4d6b)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e5b '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4d6e) (string-set! . G4d6d)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e5c '(rnrs programs) '(6) '() '() '() '((exit . G4d6f) (command-line . G4ac4)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e5d '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2b75) (identifier? . G2e1b) (generate-temporaries . G2e07) (free-identifier=? . G2e09) (syntax->datum . G2e1f) (datum->syntax . G2e1d) (bound-identifier=? . G2e0b) (syntax-violation . G2e19) (unsyntax-splicing . G4bc2) (unsyntax . G4bc1) (_ . G4bbe) (... . G4bbb) (with-syntax . G4baf) (quasisyntax . G4bae) (syntax . G4b9b) (syntax-case . G4b9a)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e5e '(rnrs files) '(6) '() '() '() '((delete-file . G4ddf) (file-exists? . G4dde) (make-i/o-write-error . G48c2) (make-i/o-read-error . G48ad) (make-i/o-port-error . G4960) (make-i/o-invalid-position-error . G48d8) (make-i/o-filename-error . G48f2) (make-i/o-file-protection-error . G490b) (make-i/o-file-is-read-only-error . G4920) (make-i/o-file-does-not-exist-error . G494a) (make-i/o-file-already-exists-error . G4935) (make-i/o-error . G4898) (i/o-write-error? . G48c4) (i/o-read-error? . G48af) (i/o-port-error? . G4964) (i/o-invalid-position-error? . G48dc) (i/o-filename-error? . G48f6) (i/o-file-protection-error? . G490d) (i/o-file-is-read-only-error? . G4922) (i/o-file-does-not-exist-error? . G494c) (i/o-file-already-exists-error? . G4937) (i/o-error? . G489a) (i/o-error-position . G48de) (i/o-error-port . G4966) (i/o-error-filename . G48f8) (&i/o-port . G4bed) (&i/o-file-does-not-exist . G4bec) (&i/o-file-already-exists . G4beb) (&i/o-file-is-read-only . G4bea) (&i/o-file-protection . G4be9) (&i/o-filename . G4be8) (&i/o-invalid-position . G4be7) (&i/o-write . G4be6) (&i/o-read . G4be5) (&i/o . G4be4)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e5f '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G4ddd) (vector-sort . G4ddc) (list-sort . G4ddb)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e60 '(rnrs base) '(6) '() '() '() '((zero? . G4c94) (vector? . G4c93) (vector-set! . G4c92) (vector-ref . G4c91) (vector-map . G4c90) (vector-length . G4c8f) (vector-for-each . G4c8e) (vector-fill! . G4c8d) (vector->list . G4c8c) (vector . G4c8b) (values . G4c8a) (truncate . G4c89) (tan . G4c88) (symbol? . G4c87) (symbol=? . G4c86) (symbol->string . G4c85) (substring . G4c84) (string? . G4c83) (string>? . G4c82) (string>=? . G4c81) (string=? . G4c80) (string<? . G4c7f) (string<=? . G4c7e) (string-ref . G4c7d) (string-length . G4c7c) (string-for-each . G4c7b) (string-copy . G4c7a) (string-append . G4c79) (string->symbol . G4c78) (string->number . G4c77) (string->list . G4c76) (string . G4c75) (sqrt . G4c74) (sin . G4c73) (round . G4c72) (reverse . G4c71) (real? . G4c70) (real-valued? . G4c6f) (real-part . G4c6e) (rationalize . G4c6d) (rational? . G4c6c) (rational-valued? . G4c6b) (procedure? . G4c6a) (positive? . G4c69) (pair? . G4c68) (odd? . G4c67) (numerator . G4c66) (number? . G4c65) (number->string . G4c64) (null? . G4c63) (not . G4c62) (negative? . G4c61) (nan? . G4c60) (min . G4c5f) (max . G4c5e) (map . G4c5d) (make-vector . G4c5c) (make-string . G4c5b) (make-rectangular . G4c5a) (make-polar . G4c59) (magnitude . G4c58) (log . G4c57) (list? . G4c56) (list-tail . G4c55) (list-ref . G4c54) (list->vector . G4c53) (list->string . G4c52) (list . G4c51) (length . G4c50) (lcm . G4c4f) (integer? . G4c4e) (integer-valued? . G4c4d) (integer->char . G4c4c) (infinite? . G4c4b) (inexact? . G4c4a) (inexact . G4c49) (imag-part . G4c48) (gcd . G4c47) (for-each . G4c46) (floor . G4c45) (finite? . G4c44) (expt . G4c43) (exp . G4c42) (exact? . G4c41) (exact-integer-sqrt . G4c40) (exact . G4c3f) (even? . G4c3e) (error . G4c3d) (eqv? . G4c3c) (equal? . G4c3b) (eq? . G4c3a) (dynamic-wind . G4c39) (div0-and-mod0 . G4c38) (mod0 . G4c37) (div0 . G4c36) (div-and-mod . G4c35) (mod . G4c34) (div . G4c33) (denominator . G4c32) (cos . G4c31) (cons . G4c30) (complex? . G4c2f) (char? . G4c2e) (char>? . G4c2d) (char>=? . G4c2c) (char=? . G4c2b) (char<? . G4c2a) (char<=? . G4c29) (char->integer . G4c28) (ceiling . G4c27) (call-with-values . G4c26) (call/cc . G4c25) (call-with-current-continuation . G4c24) (cddddr . G4c23) (cdddar . G4c22) (cddadr . G4c21) (cddaar . G4c20) (cdaddr . G4c1f) (cdadar . G4c1e) (cdaadr . G4c1d) (cdaaar . G4c1c) (cadddr . G4c1b) (caddar . G4c1a) (cadadr . G4c19) (cadaar . G4c18) (caaddr . G4c17) (caadar . G4c16) (caaadr . G4c15) (caaaar . G4c14) (cdddr . G4c13) (cddar . G4c12) (cdadr . G4c11) (cdaar . G4c10) (caddr . G4c0f) (cadar . G4c0e) (caadr . G4c0d) (caaar . G4c0c) (cddr . G4c0b) (cdar . G4c0a) (cadr . G4c09) (caar . G4c08) (cdr . G4c07) (car . G4c06) (boolean? . G4c05) (boolean=? . G4c04) (atan . G4c03) (assertion-violation . G4c02) (asin . G4c01) (apply . G4c00) (append . G4bff) (angle . G4bfe) (acos . G4bfd) (abs . G4bfc) (/ . G4bfb) (* . G4bfa) (- . G4bf9) (+ . G4bf8) (>= . G4bf7) (> . G4bf6) (= . G4bf5) (<= . G4bf4) (< . G4bf3) (unquote-splicing . G4bc0) (unquote . G4bbf) (_ . G4bbe) (else . G4bbd) (=> . G4bbc) (... . G4bbb) (assert . G4bba) (cond . G4bb5) (let* . G4bb4) (let . G4bb3) (let*-values . G4bb2) (let-values . G4bb1) (identifier-syntax . G4bb0) (quasiquote . G4bad) (syntax-rules . G4bac) (case . G4ba7) (or . G4ba3) (and . G4ba2) (if . G4ba1) (letrec* . G4ba0) (letrec . G4b9f) (lambda . G4b9c) (quote . G4b99) (letrec-syntax . G4b97) (let-syntax . G4b96) (set! . G4b95) (begin . G4b93) (define-syntax . G4b91) (define . G4b90)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e61 '(rnrs lists) '(6) '() '() '() '((remove . G4d6a) (remv . G4d69) (remp . G4d68) (remq . G4d67) (partition . G4d66) (memv . G4d65) (memq . G4d64) (memp . G4d63) (member . G4d62) (exists . G4d61) (for-all . G4d60) (fold-right . G4d5f) (fold-left . G4d5e) (find . G4d5d) (filter . G4d5c) (cons* . G4d5b) (assv . G4d5a) (assq . G4d59) (assp . G4d58) (assoc . G4d57)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e62 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4dc5) (call-with-input-file . G4dc4) (write-char . G4dc3) (write . G4dc2) (with-output-to-file . G4dc1) (with-input-from-file . G4dc0) (read-char . G4dbf) (read . G4dbe) (peek-char . G4dbd) (open-output-file . G4dbc) (open-input-file . G4dbb) (newline . G4dba) (display . G4db9) (close-output-port . G4db8) (close-input-port . G4db7) (eof-object? . G4db6) (eof-object . G4db5) (current-error-port . G4db4) (current-output-port . G4db3) (current-input-port . G4db2) (output-port? . G4db1) (input-port? . G4db0) (make-i/o-write-error . G48c2) (make-i/o-read-error . G48ad) (make-i/o-port-error . G4960) (make-i/o-invalid-position-error . G48d8) (make-i/o-filename-error . G48f2) (make-i/o-file-protection-error . G490b) (make-i/o-file-is-read-only-error . G4920) (make-i/o-file-does-not-exist-error . G494a) (make-i/o-file-already-exists-error . G4935) (make-i/o-error . G4898) (i/o-write-error? . G48c4) (i/o-read-error? . G48af) (i/o-port-error? . G4964) (i/o-invalid-position-error? . G48dc) (i/o-filename-error? . G48f6) (i/o-file-protection-error? . G490d) (i/o-file-is-read-only-error? . G4922) (i/o-file-does-not-exist-error? . G494c) (i/o-file-already-exists-error? . G4937) (i/o-error? . G489a) (i/o-error-position . G48de) (i/o-error-port . G4966) (i/o-error-filename . G48f8) (&i/o-port . G4bed) (&i/o-file-does-not-exist . G4bec) (&i/o-file-already-exists . G4beb) (&i/o-file-is-read-only . G4bea) (&i/o-file-protection . G4be9) (&i/o-filename . G4be8) (&i/o-invalid-position . G4be7) (&i/o-write . G4be6) (&i/o-read . G4be5) (&i/o . G4be4)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e63 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4d86) (utf32->string . G4d3b) (utf16->string . G4d3a) (utf8->string . G4d39) (uint-list->bytevector . G4d38) (u8-list->bytevector . G4d37) (string->utf8 . G4d36) (string->utf32 . G4d35) (string->utf16 . G4d34) (sint-list->bytevector . G4d33) (native-endianness . G4d32) (bytevector? . G4d31) (bytevector=? . G4d30) (bytevector-uint-set! . G4d2f) (bytevector-uint-ref . G4d2e) (bytevector-u8-set! . G4d2d) (bytevector-u8-ref . G4d2c) (bytevector-u64-set! . G4d2b) (bytevector-u64-ref . G4d2a) (bytevector-u64-native-set! . G4d29) (bytevector-u64-native-ref . G4d28) (bytevector-u32-set! . G4d27) (bytevector-u32-ref . G4d26) (bytevector-u32-native-set! . G4d25) (bytevector-u32-native-ref . G4d24) (bytevector-u16-set! . G4d23) (bytevector-u16-ref . G4d22) (bytevector-u16-native-set! . G4d21) (bytevector-u16-native-ref . G4d20) (bytevector-sint-set! . G4d1f) (bytevector-sint-ref . G4d1e) (bytevector-s8-set! . G4d1d) (bytevector-s8-ref . G4d1c) (bytevector-s64-set! . G4d1b) (bytevector-s64-ref . G4d1a) (bytevector-s64-native-set! . G4d19) (bytevector-s64-native-ref . G4d18) (bytevector-s32-set! . G4d17) (bytevector-s32-ref . G4d16) (bytevector-s32-native-set! . G4d15) (bytevector-s32-native-ref . G4d14) (bytevector-s16-set! . G4d13) (bytevector-s16-ref . G4d12) (bytevector-s16-native-set! . G4d11) (bytevector-s16-native-ref . G4d10) (bytevector-length . G4d0f) (bytevector-ieee-single-ref . G4d0e) (bytevector-ieee-single-set! . G4d0d) (bytevector-ieee-single-native-set! . G4d0c) (bytevector-ieee-single-native-ref . G4d0b) (bytevector-ieee-double-set! . G4d0a) (bytevector-ieee-double-ref . G4d09) (bytevector-ieee-double-native-set! . G4d08) (bytevector-ieee-double-native-ref . G4d07) (bytevector-fill! . G4d06) (bytevector-copy! . G4d05) (bytevector-copy . G4d04) (bytevector->uint-list . G4d03) (bytevector->u8-list . G4d02) (bytevector->sint-list . G4d01) (endianness . G4bb9)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e64 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G4e0d) (string-titlecase . G4e0c) (string-normalize-nfkd . G4e0b) (string-normalize-nfkc . G4e0a) (string-normalize-nfd . G4e09) (string-normalize-nfc . G4e08) (string-foldcase . G4e07) (string-downcase . G4e06) (string-ci>? . G4e05) (string-ci>=? . G4e04) (string-ci=? . G4e03) (string-ci<? . G4e02) (string-ci<=? . G4e01) (char-whitespace? . G4e00) (char-upper-case? . G4dff) (char-title-case? . G4dfe) (char-numeric? . G4dfd) (char-lower-case? . G4dfc) (char-general-category . G4dfb) (char-upcase . G4dfa) (char-titlecase . G4df9) (char-foldcase . G4df8) (char-downcase . G4df7) (char-ci>? . G4df6) (char-ci>=? . G4df5) (char-ci=? . G4df4) (char-ci<? . G4df3) (char-ci<=? . G4df2) (char-alphabetic? . G4df1)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e65 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4d50) (raise-continuable . G4d4f) (raise . G4d4e) (guard . G4bc5) (else . G4bbd) (=> . G4bbc)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e66 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4ca5) (bitwise-reverse-bit-field . G4ca4) (bitwise-length . G4ca3) (bitwise-if . G4ca2) (bitwise-first-bit-set . G4ca1) (bitwise-copy-bit-field . G4ca0) (bitwise-copy-bit . G4c9f) (bitwise-bit-set? . G4c9e) (bitwise-bit-field . G4c9d) (bitwise-bit-count . G4c9c) (bitwise-xor . G4c9b) (bitwise-ior . G4c9a) (bitwise-and . G4c99) (bitwise-not . G4c98) (bitwise-arithmetic-shift-right . G4c97) (bitwise-arithmetic-shift-left . G4c96) (bitwise-arithmetic-shift . G4c95)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e67 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4cd2) (fxxor . G4cd1) (fxrotate-bit-field . G4cd0) (fxreverse-bit-field . G4ccf) (fxpositive? . G4cce) (fxodd? . G4ccd) (fxnot . G4ccc) (fxnegative? . G4ccb) (fxmod0 . G4cca) (fxmod . G4cc9) (fxmin . G4cc8) (fxmax . G4cc7) (fxlength . G4cc6) (fxior . G4cc5) (fxif . G4cc4) (fxfirst-bit-set . G4cc3) (fxeven? . G4cc2) (fxdiv0-and-mod0 . G4cc1) (fxdiv0 . G4cc0) (fxdiv-and-mod . G4cbf) (fxdiv . G4cbe) (fxcopy-bit-field . G4cbd) (fxcopy-bit . G4cbc) (fxbit-set? . G4cbb) (fxbit-field . G4cba) (fxbit-count . G4cb9) (fxarithmetic-shift-right . G4cb8) (fxarithmetic-shift-left . G4cb7) (fxarithmetic-shift . G4cb6) (fxand . G4cb5) (fx>? . G4cb4) (fx>=? . G4cb3) (fx=? . G4cb2) (fx<? . G4cb1) (fx<=? . G4cb0) (fx-/carry . G4caf) (fx- . G4cae) (fx+/carry . G4cad) (fx+ . G4cac) (fx*/carry . G4cab) (fx* . G4caa) (greatest-fixnum . G4ca9) (least-fixnum . G4ca8) (fixnum-width . G4ca7) (fixnum? . G4ca6)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e68 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G49bf) (no-infinities-violation? . G49aa) (make-no-nans-violation . G49bd) (make-no-infinities-violation . G49a8) (real->flonum . G4d00) (flzero? . G4cff) (fltruncate . G4cfe) (fltan . G4cfd) (flsqrt . G4cfc) (flsin . G4cfb) (flround . G4cfa) (flpositive? . G4cf9) (flonum? . G4cf8) (flodd? . G4cf7) (flnumerator . G4cf6) (flnegative? . G4cf5) (flnan? . G4cf4) (flmod0 . G4cf3) (flmod . G4cf2) (flmin . G4cf1) (flmax . G4cf0) (fllog . G4cef) (flinteger? . G4cee) (flinfinite? . G4ced) (flfloor . G4cec) (flfinite? . G4ceb) (flexpt . G4cea) (flexp . G4ce9) (fleven? . G4ce8) (fldiv0-and-mod0 . G4ce7) (fldiv0 . G4ce6) (fldiv-and-mod . G4ce5) (fldiv . G4ce4) (fldenominator . G4ce3) (flcos . G4ce2) (flceiling . G4ce1) (flatan . G4ce0) (flasin . G4cdf) (flacos . G4cde) (flabs . G4cdd) (fl>? . G4cdc) (fl>=? . G4cdb) (fl=? . G4cda) (fl<? . G4cd9) (fl<=? . G4cd8) (fl/ . G4cd7) (fl- . G4cd6) (fl+ . G4cd5) (fl* . G4cd4) (fixnum->flonum . G4cd3) (&no-nans . G4bf1) (&no-infinities . G4bf0)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e69 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4dda) (string-ci-hash . G4dd9) (string-hash . G4dd8) (equal-hash . G4dd7) (hashtable-equivalence-function . G4dd6) (make-hashtable . G4dd5) (hashtable-hash-function . G4dd4) (make-eqv-hashtable . G4dd3) (make-eq-hashtable . G4dd2) (hashtable? . G4dd1) (hashtable-update! . G4dd0) (hashtable-size . G4dcf) (hashtable-set! . G4dce) (hashtable-ref . G4dcd) (hashtable-mutable? . G4dcc) (hashtable-keys . G4dcb) (hashtable-entries . G4dca) (hashtable-delete! . G4dc9) (hashtable-copy . G4dc8) (hashtable-contains? . G4dc7) (hashtable-clear! . G4dc6)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e6a '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4db6) (eof-object . G4db5) (current-error-port . G4db4) (current-output-port . G4db3) (current-input-port . G4db2) (output-port? . G4db1) (input-port? . G4db0) (utf-8-codec . G4daf) (utf-16-codec . G4dae) (transcoder-error-handling-mode . G4dad) (transcoder-eol-style . G4dac) (transcoder-codec . G4dab) (transcoded-port . G4daa) (textual-port? . G4da9) (string->bytevector . G4da8) (standard-output-port . G4da7) (standard-input-port . G4da6) (standard-error-port . G4da5) (set-port-position! . G4da4) (put-u8 . G4da3) (put-string . G4da2) (put-datum . G4da1) (put-char . G4da0) (put-bytevector . G4d9f) (port? . G4d9e) (port-transcoder . G4d9d) (port-position . G4d9c) (port-has-set-port-position!? . G4d9b) (port-has-port-position? . G4d9a) (port-eof? . G4d99) (output-port-buffer-mode . G4d98) (open-string-output-port . G4d97) (open-string-input-port . G4d96) (open-file-output-port . G4d95) (open-file-input/output-port . G4d94) (open-file-input-port . G4d93) (open-bytevector-output-port . G4d92) (open-bytevector-input-port . G4d91) (native-transcoder . G4d90) (native-eol-style . G4d8f) (make-transcoder . G4d8e) (latin-1-codec . G4d8d) (make-i/o-write-error . G48c2) (make-i/o-read-error . G48ad) (make-i/o-port-error . G4960) (make-i/o-invalid-position-error . G48d8) (make-i/o-filename-error . G48f2) (make-i/o-file-protection-error . G490b) (make-i/o-file-is-read-only-error . G4920) (make-i/o-file-does-not-exist-error . G494a) (make-i/o-file-already-exists-error . G4935) (make-i/o-error . G4898) (make-i/o-encoding-error . G498f) (make-i/o-decoding-error . G4979) (make-custom-textual-output-port . G4d8c) (make-custom-textual-input/output-port . G4d8b) (make-custom-textual-input-port . G4d8a) (make-custom-binary-output-port . G4d89) (make-custom-binary-input/output-port . G4d88) (make-custom-binary-input-port . G4d87) (lookahead-u8 . G4d85) (lookahead-char . G4d84) (i/o-write-error? . G48c4) (i/o-read-error? . G48af) (i/o-port-error? . G4964) (i/o-invalid-position-error? . G48dc) (i/o-filename-error? . G48f6) (i/o-file-protection-error? . G490d) (i/o-file-is-read-only-error? . G4922) (i/o-file-does-not-exist-error? . G494c) (i/o-file-already-exists-error? . G4937) (i/o-error? . G489a) (i/o-error-position . G48de) (i/o-error-port . G4966) (i/o-error-filename . G48f8) (i/o-encoding-error? . G4993) (i/o-encoding-error-char . G4995) (i/o-decoding-error? . G497b) (get-u8 . G4d83) (get-string-n! . G4d82) (get-string-n . G4d81) (get-string-all . G4d80) (get-line . G4d7f) (get-datum . G4d7e) (get-char . G4d7d) (get-bytevector-some . G4d7c) (get-bytevector-n! . G4d7b) (get-bytevector-n . G4d7a) (get-bytevector-all . G4d79) (flush-output-port . G4d78) (close-port . G4d77) (call-with-string-output-port . G4d56) (call-with-port . G4d55) (call-with-bytevector-output-port . G4d54) (bytevector->string . G4d53) (buffer-mode? . G4d52) (binary-port? . G4d51) (&i/o-encoding . G4bef) (&i/o-decoding . G4bee) (&i/o-port . G4bed) (&i/o-file-does-not-exist . G4bec) (&i/o-file-already-exists . G4beb) (&i/o-file-is-read-only . G4bea) (&i/o-file-protection . G4be9) (&i/o-filename . G4be8) (&i/o-invalid-position . G4be7) (&i/o-write . G4be6) (&i/o-read . G4be5) (&i/o . G4be4) (error-handling-mode . G4bc9) (file-options . G4bc8) (buffer-mode . G4bc7) (eol-style . G4bc6)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e6b '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4d4d) (enum-set=? . G4d4c) (enum-set-universe . G4d4b) (enum-set-union . G4d4a) (enum-set-subset? . G4d49) (enum-set-projection . G4d48) (enum-set-member? . G4d47) (enum-set-intersection . G4d46) (enum-set-indexer . G4d45) (enum-set-difference . G4d44) (enum-set-constructor . G4d43) (enum-set-complement . G4d42) (enum-set->list . G4d41) (define-enumeration . G4bd4)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e6c '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4810) (warning? . G478a) (violation? . G47c9) (undefined-violation? . G4885) (syntax-violation? . G486c) (syntax-violation-subform . G4870) (syntax-violation-form . G486e) (syntax-violation . G2e19) (simple-conditions . G4d40) (serious-condition? . G479f) (non-continuable-violation? . G4827) (message-condition? . G4773) (make-who-condition . G480c) (make-warning . G4788) (make-violation . G47c7) (make-undefined-violation . G4883) (make-syntax-violation . G4866) (make-serious-condition . G479d) (make-non-continuable-violation . G4825) (make-message-condition . G476f) (make-lexical-violation . G484f) (make-irritants-condition . G47f2) (make-implementation-restriction-violation . G483a) (make-error . G47b2) (make-assertion-violation . G47dc) (lexical-violation? . G4851) (irritants-condition? . G47f6) (implementation-restriction-violation? . G483c) (error? . G47b4) (condition-who . G4812) (condition-predicate . G4d3f) (condition-message . G4775) (condition-irritants . G47f8) (condition-accessor . G4d3e) (condition . G4d3d) (assertion-violation? . G47de) (condition? . G4d3c) (&undefined . G4be3) (&syntax . G4be2) (&lexical . G4be1) (&implementation-restriction . G4be0) (&non-continuable . G4bdf) (&who . G4bde) (&irritants . G4bdd) (&assertion . G4bdc) (&violation . G4bdb) (&error . G4bda) (&serious . G4bd9) (&warning . G4bd8) (&message . G4bd7) (&condition . G4bd6) (define-condition-type . G4bd5)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e6d '(rnrs records inspection) '(6) '() '() '() '((record? . G4de9) (record-type-uid . G4de8) (record-type-sealed? . G4de7) (record-type-parent . G4de6) (record-type-opaque? . G4de5) (record-type-name . G4de4) (record-type-generative? . G4de3) (record-type-field-names . G4de2) (record-rtd . G4de1) (record-field-mutable? . G4de0)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e6e '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G4df0) (record-predicate . G4def) (record-mutator . G4dee) (record-constructor . G4ded) (record-accessor . G4dec) (make-record-type-descriptor . G4deb) (make-record-constructor-descriptor . G4dea)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e6f '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4bd3) (parent-rtd . G4bd2) (nongenerative . G4bd1) (opaque . G4bd0) (sealed . G4bcf) (protocol . G4bce) (parent . G4bcd) (immutable . G4bcc) (mutable . G4bcb) (fields . G4bca) (record-constructor-descriptor . G4ba9) (record-type-descriptor . G4ba8)) '() values values '#f '#f '#t '#f) (G2964@G2809@install-library 'G4e70 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G49c3) (&no-nans-rtd . G49c1) (&no-infinities-rcd . G49ae) (&no-infinities-rtd . G49ac) (&i/o-encoding-rcd . G4999) (&i/o-encoding-rtd . G4997) (&i/o-decoding-rcd . G497f) (&i/o-decoding-rtd . G497d) (&i/o-port-rcd . G496a) (&i/o-port-rtd . G4968) (&i/o-file-does-not-exist-rcd . G4950) (&i/o-file-does-not-exist-rtd . G494e) (&i/o-file-already-exists-rcd . G493b) (&i/o-file-already-exists-rtd . G4939) (&i/o-file-is-read-only-rcd . G4926) (&i/o-file-is-read-only-rtd . G4924) (&i/o-file-protection-rcd . G4911) (&i/o-file-protection-rtd . G490f) (&i/o-filename-rcd . G48fc) (&i/o-filename-rtd . G48fa) (&i/o-invalid-position-rcd . G48e2) (&i/o-invalid-position-rtd . G48e0) (&i/o-write-rcd . G48c8) (&i/o-write-rtd . G48c6) (&i/o-read-rcd . G48b3) (&i/o-read-rtd . G48b1) (&i/o-rcd . G489e) (&i/o-rtd . G489c) (&undefined-rcd . G4889) (&undefined-rtd . G4887) (&syntax-rcd . G4874) (&syntax-rtd . G4872) (&lexical-rcd . G4855) (&lexical-rtd . G4853) (&implementation-restriction-rcd . G4840) (&implementation-restriction-rtd . G483e) (&non-continuable-rcd . G482b) (&non-continuable-rtd . G4829) (&who-rcd . G4816) (&who-rtd . G4814) (&irritants-rcd . G47fc) (&irritants-rtd . G47fa) (&assertion-rcd . G47e2) (&assertion-rtd . G47e0) (&violation-rcd . G47cd) (&violation-rtd . G47cb) (&error-rcd . G47b8) (&error-rtd . G47b6) (&serious-rcd . G47a3) (&serious-rtd . G47a1) (&warning-rcd . G478e) (&warning-rtd . G478c) (&message-rcd . G4779) (&message-rtd . G4777) (&condition-rcd . G471e) (&condition-rtd . G471c) (syntax-error . G2e15) (syntax-dispatch . G2d2e) (pretty-print . G4e50) (eval-core . G4e4f) (set-symbol-value! . G4e4e) (symbol-value . G4e4d) (gensym . G4e4c) (void . G4e4b) (load . G4aca) (interaction-environment . G2e25) (char-ready? . G4e4a) (regexp? . G4e49) (read-line . G4e48) (ungensym . G4e47) (alist->eq-hash-table . G4e46) (assoc-ref . G4e45) (print . G4e44) (format . G4e43) (host-os . G4e42) (library-path . G27e8) (standard-library-path . G4e41) (file-newer? . G4e40) (stat-mtime . G4e3f) (write-to-file . G4e3e) (file->list . G4e3d) (file->string . G4e3c) (digit->integer . G4e3b) (call-with-string-input-port . G4e3a) (call-with-string-io . G4e39) (string-split . G4e38) (bytevector-for-each . G4e37) (string->regexp . G4e36) (rxmatch . G4e35) (regexp-replace-all . G4e34) (hashtable-for-each . G4e33) (call-process . G4e32) (local-tz-offset . G4e31) (microseconds . G4e30) (readdir . G4e2f) (set-current-directory! . G4e2e) (expand-path . G4e2d) (current-directory . G4e2c) (%spawn . G4e2b) (%waitpid . G4e2a) (%ffi-supported? . G4e29) (%ffi-pointer-ref . G4e28) (%ffi-pointer->string . G4e27) (%ffi-call->string-or-zero . G4e26) (%ffi-call->double . G4e25) (%ffi-call->void* . G4e24) (%ffi-call->void . G4e23) (%ffi-call->int . G4e22) (%ffi-lookup . G4e21) (%ffi-open . G4e20) (%fork . G4e1f) (%pipe . G4e1e) (p . G4e1d) (open-output-string . G4e1c) (get-output-string . G4e1b) (get-environment-variables . G4e1a) (get-environment-variable . G4e19) (get-timeofday . G4e18) (get-command-line . G4e17) (sys-display . G4e16) (source-info . G4e15) (make-compiler-instruction . G4e14) (make-instruction . G4e13) (set-source-info! . G4e12) (bignum? . G4e11) (fast-equal? . G4e10) (fasl-read . G4e0f) (fasl-write . G4e0e) (make-parameter . G261f) (string-upcase . G4e0d) (string-titlecase . G4e0c) (string-normalize-nfkd . G4e0b) (string-normalize-nfkc . G4e0a) (string-normalize-nfd . G4e09) (string-normalize-nfc . G4e08) (string-foldcase . G4e07) (string-downcase . G4e06) (string-ci>? . G4e05) (string-ci>=? . G4e04) (string-ci=? . G4e03) (string-ci<? . G4e02) (string-ci<=? . G4e01) (char-whitespace? . G4e00) (char-upper-case? . G4dff) (char-title-case? . G4dfe) (char-numeric? . G4dfd) (char-lower-case? . G4dfc) (char-general-category . G4dfb) (char-upcase . G4dfa) (char-titlecase . G4df9) (char-foldcase . G4df8) (char-downcase . G4df7) (char-ci>? . G4df6) (char-ci>=? . G4df5) (char-ci=? . G4df4) (char-ci<? . G4df3) (char-ci<=? . G4df2) (char-alphabetic? . G4df1) (make-variable-transformer . G2b75) (identifier? . G2e1b) (generate-temporaries . G2e07) (free-identifier=? . G2e09) (syntax->datum . G2e1f) (datum->syntax . G2e1d) (bound-identifier=? . G2e0b) (record-type-descriptor? . G4df0) (record-predicate . G4def) (record-mutator . G4dee) (record-constructor . G4ded) (record-accessor . G4dec) (make-record-type-descriptor . G4deb) (make-record-constructor-descriptor . G4dea) (record? . G4de9) (record-type-uid . G4de8) (record-type-sealed? . G4de7) (record-type-parent . G4de6) (record-type-opaque? . G4de5) (record-type-name . G4de4) (record-type-generative? . G4de3) (record-type-field-names . G4de2) (record-rtd . G4de1) (record-field-mutable? . G4de0) (delete-file . G4ddf) (file-exists? . G4dde) (vector-sort! . G4ddd) (vector-sort . G4ddc) (list-sort . G4ddb) (symbol-hash . G4dda) (string-ci-hash . G4dd9) (string-hash . G4dd8) (equal-hash . G4dd7) (hashtable-equivalence-function . G4dd6) (make-hashtable . G4dd5) (hashtable-hash-function . G4dd4) (make-eqv-hashtable . G4dd3) (make-eq-hashtable . G4dd2) (hashtable? . G4dd1) (hashtable-update! . G4dd0) (hashtable-size . G4dcf) (hashtable-set! . G4dce) (hashtable-ref . G4dcd) (hashtable-mutable? . G4dcc) (hashtable-keys . G4dcb) (hashtable-entries . G4dca) (hashtable-delete! . G4dc9) (hashtable-copy . G4dc8) (hashtable-contains? . G4dc7) (hashtable-clear! . G4dc6) (call-with-output-file . G4dc5) (call-with-input-file . G4dc4) (write-char . G4dc3) (write . G4dc2) (with-output-to-file . G4dc1) (with-input-from-file . G4dc0) (read-char . G4dbf) (read . G4dbe) (peek-char . G4dbd) (open-output-file . G4dbc) (open-input-file . G4dbb) (newline . G4dba) (display . G4db9) (close-output-port . G4db8) (close-input-port . G4db7) (eof-object? . G4db6) (eof-object . G4db5) (current-error-port . G4db4) (current-output-port . G4db3) (current-input-port . G4db2) (output-port? . G4db1) (input-port? . G4db0) (utf-8-codec . G4daf) (utf-16-codec . G4dae) (transcoder-error-handling-mode . G4dad) (transcoder-eol-style . G4dac) (transcoder-codec . G4dab) (transcoded-port . G4daa) (textual-port? . G4da9) (string->bytevector . G4da8) (standard-output-port . G4da7) (standard-input-port . G4da6) (standard-error-port . G4da5) (set-port-position! . G4da4) (put-u8 . G4da3) (put-string . G4da2) (put-datum . G4da1) (put-char . G4da0) (put-bytevector . G4d9f) (port? . G4d9e) (port-transcoder . G4d9d) (port-position . G4d9c) (port-has-set-port-position!? . G4d9b) (port-has-port-position? . G4d9a) (port-eof? . G4d99) (output-port-buffer-mode . G4d98) (open-string-output-port . G4d97) (open-string-input-port . G4d96) (open-file-output-port . G4d95) (open-file-input/output-port . G4d94) (open-file-input-port . G4d93) (open-bytevector-output-port . G4d92) (open-bytevector-input-port . G4d91) (native-transcoder . G4d90) (native-eol-style . G4d8f) (make-transcoder . G4d8e) (latin-1-codec . G4d8d) (make-i/o-write-error . G48c2) (make-i/o-read-error . G48ad) (make-i/o-port-error . G4960) (make-i/o-invalid-position-error . G48d8) (make-i/o-filename-error . G48f2) (make-i/o-file-protection-error . G490b) (make-i/o-file-is-read-only-error . G4920) (make-i/o-file-does-not-exist-error . G494a) (make-i/o-file-already-exists-error . G4935) (make-i/o-error . G4898) (make-i/o-encoding-error . G498f) (make-i/o-decoding-error . G4979) (make-custom-textual-output-port . G4d8c) (make-custom-textual-input/output-port . G4d8b) (make-custom-textual-input-port . G4d8a) (make-custom-binary-output-port . G4d89) (make-custom-binary-input/output-port . G4d88) (make-custom-binary-input-port . G4d87) (make-bytevector . G4d86) (lookahead-u8 . G4d85) (lookahead-char . G4d84) (i/o-write-error? . G48c4) (i/o-read-error? . G48af) (i/o-port-error? . G4964) (i/o-invalid-position-error? . G48dc) (i/o-filename-error? . G48f6) (i/o-file-protection-error? . G490d) (i/o-file-is-read-only-error? . G4922) (i/o-file-does-not-exist-error? . G494c) (i/o-file-already-exists-error? . G4937) (i/o-error? . G489a) (i/o-error-position . G48de) (i/o-error-port . G4966) (i/o-error-filename . G48f8) (i/o-encoding-error? . G4993) (i/o-encoding-error-char . G4995) (i/o-decoding-error? . G497b) (get-u8 . G4d83) (get-string-n! . G4d82) (get-string-n . G4d81) (get-string-all . G4d80) (get-line . G4d7f) (get-datum . G4d7e) (get-char . G4d7d) (get-bytevector-some . G4d7c) (get-bytevector-n! . G4d7b) (get-bytevector-n . G4d7a) (get-bytevector-all . G4d79) (flush-output-port . G4d78) (close-port . G4d77) (scheme-report-environment . G2df5) (quotient . G4d76) (null-environment . G2df3) (remainder . G4d75) (modulo . G4d74) (inexact->exact . G4d73) (force . G4d72) (exact->inexact . G4d71) (make-promise . G4d70) (exit . G4d6f) (command-line . G4ac4) (string-fill! . G4d6e) (string-set! . G4d6d) (set-cdr! . G4d6c) (set-car! . G4d6b) (remove . G4d6a) (remv . G4d69) (remp . G4d68) (remq . G4d67) (partition . G4d66) (memv . G4d65) (memq . G4d64) (memp . G4d63) (member . G4d62) (exists . G4d61) (for-all . G4d60) (fold-right . G4d5f) (fold-left . G4d5e) (find . G4d5d) (filter . G4d5c) (cons* . G4d5b) (assv . G4d5a) (assq . G4d59) (assp . G4d58) (assoc . G4d57) (call-with-string-output-port . G4d56) (call-with-port . G4d55) (call-with-bytevector-output-port . G4d54) (bytevector->string . G4d53) (buffer-mode? . G4d52) (binary-port? . G4d51) (with-exception-handler . G4d50) (raise-continuable . G4d4f) (raise . G4d4e) (eval . G2df9) (environment . G2df1) (make-enumeration . G4d4d) (enum-set=? . G4d4c) (enum-set-universe . G4d4b) (enum-set-union . G4d4a) (enum-set-subset? . G4d49) (enum-set-projection . G4d48) (enum-set-member? . G4d47) (enum-set-intersection . G4d46) (enum-set-indexer . G4d45) (enum-set-difference . G4d44) (enum-set-constructor . G4d43) (enum-set-complement . G4d42) (enum-set->list . G4d41) (who-condition? . G4810) (warning? . G478a) (violation? . G47c9) (undefined-violation? . G4885) (syntax-violation? . G486c) (syntax-violation-subform . G4870) (syntax-violation-form . G486e) (syntax-violation . G2e19) (simple-conditions . G4d40) (serious-condition? . G479f) (non-continuable-violation? . G4827) (message-condition? . G4773) (make-who-condition . G480c) (make-warning . G4788) (make-violation . G47c7) (make-undefined-violation . G4883) (make-syntax-violation . G4866) (make-serious-condition . G479d) (make-non-continuable-violation . G4825) (make-message-condition . G476f) (make-lexical-violation . G484f) (make-irritants-condition . G47f2) (make-implementation-restriction-violation . G483a) (make-error . G47b2) (make-assertion-violation . G47dc) (lexical-violation? . G4851) (irritants-condition? . G47f6) (implementation-restriction-violation? . G483c) (error? . G47b4) (condition-who . G4812) (condition-predicate . G4d3f) (condition-message . G4775) (condition-irritants . G47f8) (condition-accessor . G4d3e) (condition . G4d3d) (assertion-violation? . G47de) (condition? . G4d3c) (utf32->string . G4d3b) (utf16->string . G4d3a) (utf8->string . G4d39) (uint-list->bytevector . G4d38) (u8-list->bytevector . G4d37) (string->utf8 . G4d36) (string->utf32 . G4d35) (string->utf16 . G4d34) (sint-list->bytevector . G4d33) (native-endianness . G4d32) (bytevector? . G4d31) (bytevector=? . G4d30) (bytevector-uint-set! . G4d2f) (bytevector-uint-ref . G4d2e) (bytevector-u8-set! . G4d2d) (bytevector-u8-ref . G4d2c) (bytevector-u64-set! . G4d2b) (bytevector-u64-ref . G4d2a) (bytevector-u64-native-set! . G4d29) (bytevector-u64-native-ref . G4d28) (bytevector-u32-set! . G4d27) (bytevector-u32-ref . G4d26) (bytevector-u32-native-set! . G4d25) (bytevector-u32-native-ref . G4d24) (bytevector-u16-set! . G4d23) (bytevector-u16-ref . G4d22) (bytevector-u16-native-set! . G4d21) (bytevector-u16-native-ref . G4d20) (bytevector-sint-set! . G4d1f) (bytevector-sint-ref . G4d1e) (bytevector-s8-set! . G4d1d) (bytevector-s8-ref . G4d1c) (bytevector-s64-set! . G4d1b) (bytevector-s64-ref . G4d1a) (bytevector-s64-native-set! . G4d19) (bytevector-s64-native-ref . G4d18) (bytevector-s32-set! . G4d17) (bytevector-s32-ref . G4d16) (bytevector-s32-native-set! . G4d15) (bytevector-s32-native-ref . G4d14) (bytevector-s16-set! . G4d13) (bytevector-s16-ref . G4d12) (bytevector-s16-native-set! . G4d11) (bytevector-s16-native-ref . G4d10) (bytevector-length . G4d0f) (bytevector-ieee-single-ref . G4d0e) (bytevector-ieee-single-set! . G4d0d) (bytevector-ieee-single-native-set! . G4d0c) (bytevector-ieee-single-native-ref . G4d0b) (bytevector-ieee-double-set! . G4d0a) (bytevector-ieee-double-ref . G4d09) (bytevector-ieee-double-native-set! . G4d08) (bytevector-ieee-double-native-ref . G4d07) (bytevector-fill! . G4d06) (bytevector-copy! . G4d05) (bytevector-copy . G4d04) (bytevector->uint-list . G4d03) (bytevector->u8-list . G4d02) (bytevector->sint-list . G4d01) (no-nans-violation? . G49bf) (no-infinities-violation? . G49aa) (make-no-nans-violation . G49bd) (make-no-infinities-violation . G49a8) (real->flonum . G4d00) (flzero? . G4cff) (fltruncate . G4cfe) (fltan . G4cfd) (flsqrt . G4cfc) (flsin . G4cfb) (flround . G4cfa) (flpositive? . G4cf9) (flonum? . G4cf8) (flodd? . G4cf7) (flnumerator . G4cf6) (flnegative? . G4cf5) (flnan? . G4cf4) (flmod0 . G4cf3) (flmod . G4cf2) (flmin . G4cf1) (flmax . G4cf0) (fllog . G4cef) (flinteger? . G4cee) (flinfinite? . G4ced) (flfloor . G4cec) (flfinite? . G4ceb) (flexpt . G4cea) (flexp . G4ce9) (fleven? . G4ce8) (fldiv0-and-mod0 . G4ce7) (fldiv0 . G4ce6) (fldiv-and-mod . G4ce5) (fldiv . G4ce4) (fldenominator . G4ce3) (flcos . G4ce2) (flceiling . G4ce1) (flatan . G4ce0) (flasin . G4cdf) (flacos . G4cde) (flabs . G4cdd) (fl>? . G4cdc) (fl>=? . G4cdb) (fl=? . G4cda) (fl<? . G4cd9) (fl<=? . G4cd8) (fl/ . G4cd7) (fl- . G4cd6) (fl+ . G4cd5) (fl* . G4cd4) (fixnum->flonum . G4cd3) (fxzero? . G4cd2) (fxxor . G4cd1) (fxrotate-bit-field . G4cd0) (fxreverse-bit-field . G4ccf) (fxpositive? . G4cce) (fxodd? . G4ccd) (fxnot . G4ccc) (fxnegative? . G4ccb) (fxmod0 . G4cca) (fxmod . G4cc9) (fxmin . G4cc8) (fxmax . G4cc7) (fxlength . G4cc6) (fxior . G4cc5) (fxif . G4cc4) (fxfirst-bit-set . G4cc3) (fxeven? . G4cc2) (fxdiv0-and-mod0 . G4cc1) (fxdiv0 . G4cc0) (fxdiv-and-mod . G4cbf) (fxdiv . G4cbe) (fxcopy-bit-field . G4cbd) (fxcopy-bit . G4cbc) (fxbit-set? . G4cbb) (fxbit-field . G4cba) (fxbit-count . G4cb9) (fxarithmetic-shift-right . G4cb8) (fxarithmetic-shift-left . G4cb7) (fxarithmetic-shift . G4cb6) (fxand . G4cb5) (fx>? . G4cb4) (fx>=? . G4cb3) (fx=? . G4cb2) (fx<? . G4cb1) (fx<=? . G4cb0) (fx-/carry . G4caf) (fx- . G4cae) (fx+/carry . G4cad) (fx+ . G4cac) (fx*/carry . G4cab) (fx* . G4caa) (greatest-fixnum . G4ca9) (least-fixnum . G4ca8) (fixnum-width . G4ca7) (fixnum? . G4ca6) (bitwise-rotate-bit-field . G4ca5) (bitwise-reverse-bit-field . G4ca4) (bitwise-length . G4ca3) (bitwise-if . G4ca2) (bitwise-first-bit-set . G4ca1) (bitwise-copy-bit-field . G4ca0) (bitwise-copy-bit . G4c9f) (bitwise-bit-set? . G4c9e) (bitwise-bit-field . G4c9d) (bitwise-bit-count . G4c9c) (bitwise-xor . G4c9b) (bitwise-ior . G4c9a) (bitwise-and . G4c99) (bitwise-not . G4c98) (bitwise-arithmetic-shift-right . G4c97) (bitwise-arithmetic-shift-left . G4c96) (bitwise-arithmetic-shift . G4c95) (zero? . G4c94) (vector? . G4c93) (vector-set! . G4c92) (vector-ref . G4c91) (vector-map . G4c90) (vector-length . G4c8f) (vector-for-each . G4c8e) (vector-fill! . G4c8d) (vector->list . G4c8c) (vector . G4c8b) (values . G4c8a) (truncate . G4c89) (tan . G4c88) (symbol? . G4c87) (symbol=? . G4c86) (symbol->string . G4c85) (substring . G4c84) (string? . G4c83) (string>? . G4c82) (string>=? . G4c81) (string=? . G4c80) (string<? . G4c7f) (string<=? . G4c7e) (string-ref . G4c7d) (string-length . G4c7c) (string-for-each . G4c7b) (string-copy . G4c7a) (string-append . G4c79) (string->symbol . G4c78) (string->number . G4c77) (string->list . G4c76) (string . G4c75) (sqrt . G4c74) (sin . G4c73) (round . G4c72) (reverse . G4c71) (real? . G4c70) (real-valued? . G4c6f) (real-part . G4c6e) (rationalize . G4c6d) (rational? . G4c6c) (rational-valued? . G4c6b) (procedure? . G4c6a) (positive? . G4c69) (pair? . G4c68) (odd? . G4c67) (numerator . G4c66) (number? . G4c65) (number->string . G4c64) (null? . G4c63) (not . G4c62) (negative? . G4c61) (nan? . G4c60) (min . G4c5f) (max . G4c5e) (map . G4c5d) (make-vector . G4c5c) (make-string . G4c5b) (make-rectangular . G4c5a) (make-polar . G4c59) (magnitude . G4c58) (log . G4c57) (list? . G4c56) (list-tail . G4c55) (list-ref . G4c54) (list->vector . G4c53) (list->string . G4c52) (list . G4c51) (length . G4c50) (lcm . G4c4f) (integer? . G4c4e) (integer-valued? . G4c4d) (integer->char . G4c4c) (infinite? . G4c4b) (inexact? . G4c4a) (inexact . G4c49) (imag-part . G4c48) (gcd . G4c47) (for-each . G4c46) (floor . G4c45) (finite? . G4c44) (expt . G4c43) (exp . G4c42) (exact? . G4c41) (exact-integer-sqrt . G4c40) (exact . G4c3f) (even? . G4c3e) (error . G4c3d) (eqv? . G4c3c) (equal? . G4c3b) (eq? . G4c3a) (dynamic-wind . G4c39) (div0-and-mod0 . G4c38) (mod0 . G4c37) (div0 . G4c36) (div-and-mod . G4c35) (mod . G4c34) (div . G4c33) (denominator . G4c32) (cos . G4c31) (cons . G4c30) (complex? . G4c2f) (char? . G4c2e) (char>? . G4c2d) (char>=? . G4c2c) (char=? . G4c2b) (char<? . G4c2a) (char<=? . G4c29) (char->integer . G4c28) (ceiling . G4c27) (call-with-values . G4c26) (call/cc . G4c25) (call-with-current-continuation . G4c24) (cddddr . G4c23) (cdddar . G4c22) (cddadr . G4c21) (cddaar . G4c20) (cdaddr . G4c1f) (cdadar . G4c1e) (cdaadr . G4c1d) (cdaaar . G4c1c) (cadddr . G4c1b) (caddar . G4c1a) (cadadr . G4c19) (cadaar . G4c18) (caaddr . G4c17) (caadar . G4c16) (caaadr . G4c15) (caaaar . G4c14) (cdddr . G4c13) (cddar . G4c12) (cdadr . G4c11) (cdaar . G4c10) (caddr . G4c0f) (cadar . G4c0e) (caadr . G4c0d) (caaar . G4c0c) (cddr . G4c0b) (cdar . G4c0a) (cadr . G4c09) (caar . G4c08) (cdr . G4c07) (car . G4c06) (boolean? . G4c05) (boolean=? . G4c04) (atan . G4c03) (assertion-violation . G4c02) (asin . G4c01) (apply . G4c00) (append . G4bff) (angle . G4bfe) (acos . G4bfd) (abs . G4bfc) (/ . G4bfb) (* . G4bfa) (- . G4bf9) (+ . G4bf8) (>= . G4bf7) (> . G4bf6) (= . G4bf5) (<= . G4bf4) (< . G4bf3) (library . G4bf2) (&no-nans . G4bf1) (&no-infinities . G4bf0) (&i/o-encoding . G4bef) (&i/o-decoding . G4bee) (&i/o-port . G4bed) (&i/o-file-does-not-exist . G4bec) (&i/o-file-already-exists . G4beb) (&i/o-file-is-read-only . G4bea) (&i/o-file-protection . G4be9) (&i/o-filename . G4be8) (&i/o-invalid-position . G4be7) (&i/o-write . G4be6) (&i/o-read . G4be5) (&i/o . G4be4) (&undefined . G4be3) (&syntax . G4be2) (&lexical . G4be1) (&implementation-restriction . G4be0) (&non-continuable . G4bdf) (&who . G4bde) (&irritants . G4bdd) (&assertion . G4bdc) (&violation . G4bdb) (&error . G4bda) (&serious . G4bd9) (&warning . G4bd8) (&message . G4bd7) (&condition . G4bd6) (define-condition-type . G4bd5) (define-enumeration . G4bd4) (define-record-type . G4bd3) (parent-rtd . G4bd2) (nongenerative . G4bd1) (opaque . G4bd0) (sealed . G4bcf) (protocol . G4bce) (parent . G4bcd) (immutable . G4bcc) (mutable . G4bcb) (fields . G4bca) (error-handling-mode . G4bc9) (file-options . G4bc8) (buffer-mode . G4bc7) (eol-style . G4bc6) (guard . G4bc5) (trace-define . G4bc4) (trace-lambda . G4bc3) (unsyntax-splicing . G4bc2) (unsyntax . G4bc1) (unquote-splicing . G4bc0) (unquote . G4bbf) (_ . G4bbe) (else . G4bbd) (=> . G4bbc) (... . G4bbb) (assert . G4bba) (endianness . G4bb9) (delay . G4bb8) (time . G4bb7) (do . G4bb6) (cond . G4bb5) (let* . G4bb4) (let . G4bb3) (let*-values . G4bb2) (let-values . G4bb1) (identifier-syntax . G4bb0) (with-syntax . G4baf) (quasisyntax . G4bae) (quasiquote . G4bad) (syntax-rules . G4bac) (include . G4bab) (define-struct . G4baa) (record-constructor-descriptor . G4ba9) (record-type-descriptor . G4ba8) (case . G4ba7) (parameterize . G4ba6) (unless . G4ba5) (when . G4ba4) (or . G4ba3) (and . G4ba2) (if . G4ba1) (letrec* . G4ba0) (letrec . G4b9f) (type-descriptor . G4b9e) (case-lambda . G4b9d) (lambda . G4b9c) (syntax . G4b9b) (syntax-case . G4b9a) (quote . G4b99) (foreign-call . G4b98) (letrec-syntax . G4b97) (let-syntax . G4b96) (set! . G4b95) (import . G4b94) (begin . G4b93) (module . G4b92) (define-syntax . G4b91) (define . G4b90)) '((G49c3 core-prim . &no-nans-rcd) (G49c1 core-prim . &no-nans-rtd) (G49ae core-prim . &no-infinities-rcd) (G49ac core-prim . &no-infinities-rtd) (G4999 core-prim . &i/o-encoding-rcd) (G4997 core-prim . &i/o-encoding-rtd) (G497f core-prim . &i/o-decoding-rcd) (G497d core-prim . &i/o-decoding-rtd) (G496a core-prim . &i/o-port-rcd) (G4968 core-prim . &i/o-port-rtd) (G4950 core-prim . &i/o-file-does-not-exist-rcd) (G494e core-prim . &i/o-file-does-not-exist-rtd) (G493b core-prim . &i/o-file-already-exists-rcd) (G4939 core-prim . &i/o-file-already-exists-rtd) (G4926 core-prim . &i/o-file-is-read-only-rcd) (G4924 core-prim . &i/o-file-is-read-only-rtd) (G4911 core-prim . &i/o-file-protection-rcd) (G490f core-prim . &i/o-file-protection-rtd) (G48fc core-prim . &i/o-filename-rcd) (G48fa core-prim . &i/o-filename-rtd) (G48e2 core-prim . &i/o-invalid-position-rcd) (G48e0 core-prim . &i/o-invalid-position-rtd) (G48c8 core-prim . &i/o-write-rcd) (G48c6 core-prim . &i/o-write-rtd) (G48b3 core-prim . &i/o-read-rcd) (G48b1 core-prim . &i/o-read-rtd) (G489e core-prim . &i/o-rcd) (G489c core-prim . &i/o-rtd) (G4889 core-prim . &undefined-rcd) (G4887 core-prim . &undefined-rtd) (G4874 core-prim . &syntax-rcd) (G4872 core-prim . &syntax-rtd) (G4855 core-prim . &lexical-rcd) (G4853 core-prim . &lexical-rtd) (G4840 core-prim . &implementation-restriction-rcd) (G483e core-prim . &implementation-restriction-rtd) (G482b core-prim . &non-continuable-rcd) (G4829 core-prim . &non-continuable-rtd) (G4816 core-prim . &who-rcd) (G4814 core-prim . &who-rtd) (G47fc core-prim . &irritants-rcd) (G47fa core-prim . &irritants-rtd) (G47e2 core-prim . &assertion-rcd) (G47e0 core-prim . &assertion-rtd) (G47cd core-prim . &violation-rcd) (G47cb core-prim . &violation-rtd) (G47b8 core-prim . &error-rcd) (G47b6 core-prim . &error-rtd) (G47a3 core-prim . &serious-rcd) (G47a1 core-prim . &serious-rtd) (G478e core-prim . &warning-rcd) (G478c core-prim . &warning-rtd) (G4779 core-prim . &message-rcd) (G4777 core-prim . &message-rtd) (G471e core-prim . &condition-rcd) (G471c core-prim . &condition-rtd) (G2e15 core-prim . syntax-error) (G2d2e core-prim . syntax-dispatch) (G4e50 core-prim . pretty-print) (G4e4f core-prim . eval-core) (G4e4e core-prim . set-symbol-value!) (G4e4d core-prim . symbol-value) (G4e4c core-prim . gensym) (G4e4b core-prim . void) (G4aca core-prim . load) (G2e25 core-prim . interaction-environment) (G4e4a core-prim . char-ready?) (G4e49 core-prim . regexp?) (G4e48 core-prim . read-line) (G4e47 core-prim . ungensym) (G4e46 core-prim . alist->eq-hash-table) (G4e45 core-prim . assoc-ref) (G4e44 core-prim . print) (G4e43 core-prim . format) (G4e42 core-prim . host-os) (G27e8 core-prim . library-path) (G4e41 core-prim . standard-library-path) (G4e40 core-prim . file-newer?) (G4e3f core-prim . stat-mtime) (G4e3e core-prim . write-to-file) (G4e3d core-prim . file->list) (G4e3c core-prim . file->string) (G4e3b core-prim . digit->integer) (G4e3a core-prim . call-with-string-input-port) (G4e39 core-prim . call-with-string-io) (G4e38 core-prim . string-split) (G4e37 core-prim . bytevector-for-each) (G4e36 core-prim . string->regexp) (G4e35 core-prim . rxmatch) (G4e34 core-prim . regexp-replace-all) (G4e33 core-prim . hashtable-for-each) (G4e32 core-prim . call-process) (G4e31 core-prim . local-tz-offset) (G4e30 core-prim . microseconds) (G4e2f core-prim . readdir) (G4e2e core-prim . set-current-directory!) (G4e2d core-prim . expand-path) (G4e2c core-prim . current-directory) (G4e2b core-prim . %spawn) (G4e2a core-prim . %waitpid) (G4e29 core-prim . %ffi-supported?) (G4e28 core-prim . %ffi-pointer-ref) (G4e27 core-prim . %ffi-pointer->string) (G4e26 core-prim . %ffi-call->string-or-zero) (G4e25 core-prim . %ffi-call->double) (G4e24 core-prim . %ffi-call->void*) (G4e23 core-prim . %ffi-call->void) (G4e22 core-prim . %ffi-call->int) (G4e21 core-prim . %ffi-lookup) (G4e20 core-prim . %ffi-open) (G4e1f core-prim . %fork) (G4e1e core-prim . %pipe) (G4e1d core-prim . p) (G4e1c core-prim . open-output-string) (G4e1b core-prim . get-output-string) (G4e1a core-prim . get-environment-variables) (G4e19 core-prim . get-environment-variable) (G4e18 core-prim . get-timeofday) (G4e17 core-prim . get-command-line) (G4e16 core-prim . sys-display) (G4e15 core-prim . source-info) (G4e14 core-prim . make-compiler-instruction) (G4e13 core-prim . make-instruction) (G4e12 core-prim . set-source-info!) (G4e11 core-prim . bignum?) (G4e10 core-prim . fast-equal?) (G4e0f core-prim . fasl-read) (G4e0e core-prim . fasl-write) (G261f core-prim . make-parameter) (G4e0d core-prim . string-upcase) (G4e0c core-prim . string-titlecase) (G4e0b core-prim . string-normalize-nfkd) (G4e0a core-prim . string-normalize-nfkc) (G4e09 core-prim . string-normalize-nfd) (G4e08 core-prim . string-normalize-nfc) (G4e07 core-prim . string-foldcase) (G4e06 core-prim . string-downcase) (G4e05 core-prim . string-ci>?) (G4e04 core-prim . string-ci>=?) (G4e03 core-prim . string-ci=?) (G4e02 core-prim . string-ci<?) (G4e01 core-prim . string-ci<=?) (G4e00 core-prim . char-whitespace?) (G4dff core-prim . char-upper-case?) (G4dfe core-prim . char-title-case?) (G4dfd core-prim . char-numeric?) (G4dfc core-prim . char-lower-case?) (G4dfb core-prim . char-general-category) (G4dfa core-prim . char-upcase) (G4df9 core-prim . char-titlecase) (G4df8 core-prim . char-foldcase) (G4df7 core-prim . char-downcase) (G4df6 core-prim . char-ci>?) (G4df5 core-prim . char-ci>=?) (G4df4 core-prim . char-ci=?) (G4df3 core-prim . char-ci<?) (G4df2 core-prim . char-ci<=?) (G4df1 core-prim . char-alphabetic?) (G2b75 core-prim . make-variable-transformer) (G2e1b core-prim . identifier?) (G2e07 core-prim . generate-temporaries) (G2e09 core-prim . free-identifier=?) (G2e1f core-prim . syntax->datum) (G2e1d core-prim . datum->syntax) (G2e0b core-prim . bound-identifier=?) (G4df0 core-prim . record-type-descriptor?) (G4def core-prim . record-predicate) (G4dee core-prim . record-mutator) (G4ded core-prim . record-constructor) (G4dec core-prim . record-accessor) (G4deb core-prim . make-record-type-descriptor) (G4dea core-prim . make-record-constructor-descriptor) (G4de9 core-prim . record?) (G4de8 core-prim . record-type-uid) (G4de7 core-prim . record-type-sealed?) (G4de6 core-prim . record-type-parent) (G4de5 core-prim . record-type-opaque?) (G4de4 core-prim . record-type-name) (G4de3 core-prim . record-type-generative?) (G4de2 core-prim . record-type-field-names) (G4de1 core-prim . record-rtd) (G4de0 core-prim . record-field-mutable?) (G4ddf core-prim . delete-file) (G4dde core-prim . file-exists?) (G4ddd core-prim . vector-sort!) (G4ddc core-prim . vector-sort) (G4ddb core-prim . list-sort) (G4dda core-prim . symbol-hash) (G4dd9 core-prim . string-ci-hash) (G4dd8 core-prim . string-hash) (G4dd7 core-prim . equal-hash) (G4dd6 core-prim . hashtable-equivalence-function) (G4dd5 core-prim . make-hashtable) (G4dd4 core-prim . hashtable-hash-function) (G4dd3 core-prim . make-eqv-hashtable) (G4dd2 core-prim . make-eq-hashtable) (G4dd1 core-prim . hashtable?) (G4dd0 core-prim . hashtable-update!) (G4dcf core-prim . hashtable-size) (G4dce core-prim . hashtable-set!) (G4dcd core-prim . hashtable-ref) (G4dcc core-prim . hashtable-mutable?) (G4dcb core-prim . hashtable-keys) (G4dca core-prim . hashtable-entries) (G4dc9 core-prim . hashtable-delete!) (G4dc8 core-prim . hashtable-copy) (G4dc7 core-prim . hashtable-contains?) (G4dc6 core-prim . hashtable-clear!) (G4dc5 core-prim . call-with-output-file) (G4dc4 core-prim . call-with-input-file) (G4dc3 core-prim . write-char) (G4dc2 core-prim . write) (G4dc1 core-prim . with-output-to-file) (G4dc0 core-prim . with-input-from-file) (G4dbf core-prim . read-char) (G4dbe core-prim . read) (G4dbd core-prim . peek-char) (G4dbc core-prim . open-output-file) (G4dbb core-prim . open-input-file) (G4dba core-prim . newline) (G4db9 core-prim . display) (G4db8 core-prim . close-output-port) (G4db7 core-prim . close-input-port) (G4db6 core-prim . eof-object?) (G4db5 core-prim . eof-object) (G4db4 core-prim . current-error-port) (G4db3 core-prim . current-output-port) (G4db2 core-prim . current-input-port) (G4db1 core-prim . output-port?) (G4db0 core-prim . input-port?) (G4daf core-prim . utf-8-codec) (G4dae core-prim . utf-16-codec) (G4dad core-prim . transcoder-error-handling-mode) (G4dac core-prim . transcoder-eol-style) (G4dab core-prim . transcoder-codec) (G4daa core-prim . transcoded-port) (G4da9 core-prim . textual-port?) (G4da8 core-prim . string->bytevector) (G4da7 core-prim . standard-output-port) (G4da6 core-prim . standard-input-port) (G4da5 core-prim . standard-error-port) (G4da4 core-prim . set-port-position!) (G4da3 core-prim . put-u8) (G4da2 core-prim . put-string) (G4da1 core-prim . put-datum) (G4da0 core-prim . put-char) (G4d9f core-prim . put-bytevector) (G4d9e core-prim . port?) (G4d9d core-prim . port-transcoder) (G4d9c core-prim . port-position) (G4d9b core-prim . port-has-set-port-position!?) (G4d9a core-prim . port-has-port-position?) (G4d99 core-prim . port-eof?) (G4d98 core-prim . output-port-buffer-mode) (G4d97 core-prim . open-string-output-port) (G4d96 core-prim . open-string-input-port) (G4d95 core-prim . open-file-output-port) (G4d94 core-prim . open-file-input/output-port) (G4d93 core-prim . open-file-input-port) (G4d92 core-prim . open-bytevector-output-port) (G4d91 core-prim . open-bytevector-input-port) (G4d90 core-prim . native-transcoder) (G4d8f core-prim . native-eol-style) (G4d8e core-prim . make-transcoder) (G4d8d core-prim . latin-1-codec) (G48c2 core-prim . make-i/o-write-error) (G48ad core-prim . make-i/o-read-error) (G4960 core-prim . make-i/o-port-error) (G48d8 core-prim . make-i/o-invalid-position-error) (G48f2 core-prim . make-i/o-filename-error) (G490b core-prim . make-i/o-file-protection-error) (G4920 core-prim . make-i/o-file-is-read-only-error) (G494a core-prim . make-i/o-file-does-not-exist-error) (G4935 core-prim . make-i/o-file-already-exists-error) (G4898 core-prim . make-i/o-error) (G498f core-prim . make-i/o-encoding-error) (G4979 core-prim . make-i/o-decoding-error) (G4d8c core-prim . make-custom-textual-output-port) (G4d8b core-prim . make-custom-textual-input/output-port) (G4d8a core-prim . make-custom-textual-input-port) (G4d89 core-prim . make-custom-binary-output-port) (G4d88 core-prim . make-custom-binary-input/output-port) (G4d87 core-prim . make-custom-binary-input-port) (G4d86 core-prim . make-bytevector) (G4d85 core-prim . lookahead-u8) (G4d84 core-prim . lookahead-char) (G48c4 core-prim . i/o-write-error?) (G48af core-prim . i/o-read-error?) (G4964 core-prim . i/o-port-error?) (G48dc core-prim . i/o-invalid-position-error?) (G48f6 core-prim . i/o-filename-error?) (G490d core-prim . i/o-file-protection-error?) (G4922 core-prim . i/o-file-is-read-only-error?) (G494c core-prim . i/o-file-does-not-exist-error?) (G4937 core-prim . i/o-file-already-exists-error?) (G489a core-prim . i/o-error?) (G48de core-prim . i/o-error-position) (G4966 core-prim . i/o-error-port) (G48f8 core-prim . i/o-error-filename) (G4993 core-prim . i/o-encoding-error?) (G4995 core-prim . i/o-encoding-error-char) (G497b core-prim . i/o-decoding-error?) (G4d83 core-prim . get-u8) (G4d82 core-prim . get-string-n!) (G4d81 core-prim . get-string-n) (G4d80 core-prim . get-string-all) (G4d7f core-prim . get-line) (G4d7e core-prim . get-datum) (G4d7d core-prim . get-char) (G4d7c core-prim . get-bytevector-some) (G4d7b core-prim . get-bytevector-n!) (G4d7a core-prim . get-bytevector-n) (G4d79 core-prim . get-bytevector-all) (G4d78 core-prim . flush-output-port) (G4d77 core-prim . close-port) (G2df5 core-prim . scheme-report-environment) (G4d76 core-prim . quotient) (G2df3 core-prim . null-environment) (G4d75 core-prim . remainder) (G4d74 core-prim . modulo) (G4d73 core-prim . inexact->exact) (G4d72 core-prim . force) (G4d71 core-prim . exact->inexact) (G4d70 core-prim . make-promise) (G4d6f core-prim . exit) (G4ac4 core-prim . command-line) (G4d6e core-prim . string-fill!) (G4d6d core-prim . string-set!) (G4d6c core-prim . set-cdr!) (G4d6b core-prim . set-car!) (G4d6a core-prim . remove) (G4d69 core-prim . remv) (G4d68 core-prim . remp) (G4d67 core-prim . remq) (G4d66 core-prim . partition) (G4d65 core-prim . memv) (G4d64 core-prim . memq) (G4d63 core-prim . memp) (G4d62 core-prim . member) (G4d61 core-prim . exists) (G4d60 core-prim . for-all) (G4d5f core-prim . fold-right) (G4d5e core-prim . fold-left) (G4d5d core-prim . find) (G4d5c core-prim . filter) (G4d5b core-prim . cons*) (G4d5a core-prim . assv) (G4d59 core-prim . assq) (G4d58 core-prim . assp) (G4d57 core-prim . assoc) (G4d56 core-prim . call-with-string-output-port) (G4d55 core-prim . call-with-port) (G4d54 core-prim . call-with-bytevector-output-port) (G4d53 core-prim . bytevector->string) (G4d52 core-prim . buffer-mode?) (G4d51 core-prim . binary-port?) (G4d50 core-prim . with-exception-handler) (G4d4f core-prim . raise-continuable) (G4d4e core-prim . raise) (G2df9 core-prim . eval) (G2df1 core-prim . environment) (G4d4d core-prim . make-enumeration) (G4d4c core-prim . enum-set=?) (G4d4b core-prim . enum-set-universe) (G4d4a core-prim . enum-set-union) (G4d49 core-prim . enum-set-subset?) (G4d48 core-prim . enum-set-projection) (G4d47 core-prim . enum-set-member?) (G4d46 core-prim . enum-set-intersection) (G4d45 core-prim . enum-set-indexer) (G4d44 core-prim . enum-set-difference) (G4d43 core-prim . enum-set-constructor) (G4d42 core-prim . enum-set-complement) (G4d41 core-prim . enum-set->list) (G4810 core-prim . who-condition?) (G478a core-prim . warning?) (G47c9 core-prim . violation?) (G4885 core-prim . undefined-violation?) (G486c core-prim . syntax-violation?) (G4870 core-prim . syntax-violation-subform) (G486e core-prim . syntax-violation-form) (G2e19 core-prim . syntax-violation) (G4d40 core-prim . simple-conditions) (G479f core-prim . serious-condition?) (G4827 core-prim . non-continuable-violation?) (G4773 core-prim . message-condition?) (G480c core-prim . make-who-condition) (G4788 core-prim . make-warning) (G47c7 core-prim . make-violation) (G4883 core-prim . make-undefined-violation) (G4866 core-prim . make-syntax-violation) (G479d core-prim . make-serious-condition) (G4825 core-prim . make-non-continuable-violation) (G476f core-prim . make-message-condition) (G484f core-prim . make-lexical-violation) (G47f2 core-prim . make-irritants-condition) (G483a core-prim . make-implementation-restriction-violation) (G47b2 core-prim . make-error) (G47dc core-prim . make-assertion-violation) (G4851 core-prim . lexical-violation?) (G47f6 core-prim . irritants-condition?) (G483c core-prim . implementation-restriction-violation?) (G47b4 core-prim . error?) (G4812 core-prim . condition-who) (G4d3f core-prim . condition-predicate) (G4775 core-prim . condition-message) (G47f8 core-prim . condition-irritants) (G4d3e core-prim . condition-accessor) (G4d3d core-prim . condition) (G47de core-prim . assertion-violation?) (G4d3c core-prim . condition?) (G4d3b core-prim . utf32->string) (G4d3a core-prim . utf16->string) (G4d39 core-prim . utf8->string) (G4d38 core-prim . uint-list->bytevector) (G4d37 core-prim . u8-list->bytevector) (G4d36 core-prim . string->utf8) (G4d35 core-prim . string->utf32) (G4d34 core-prim . string->utf16) (G4d33 core-prim . sint-list->bytevector) (G4d32 core-prim . native-endianness) (G4d31 core-prim . bytevector?) (G4d30 core-prim . bytevector=?) (G4d2f core-prim . bytevector-uint-set!) (G4d2e core-prim . bytevector-uint-ref) (G4d2d core-prim . bytevector-u8-set!) (G4d2c core-prim . bytevector-u8-ref) (G4d2b core-prim . bytevector-u64-set!) (G4d2a core-prim . bytevector-u64-ref) (G4d29 core-prim . bytevector-u64-native-set!) (G4d28 core-prim . bytevector-u64-native-ref) (G4d27 core-prim . bytevector-u32-set!) (G4d26 core-prim . bytevector-u32-ref) (G4d25 core-prim . bytevector-u32-native-set!) (G4d24 core-prim . bytevector-u32-native-ref) (G4d23 core-prim . bytevector-u16-set!) (G4d22 core-prim . bytevector-u16-ref) (G4d21 core-prim . bytevector-u16-native-set!) (G4d20 core-prim . bytevector-u16-native-ref) (G4d1f core-prim . bytevector-sint-set!) (G4d1e core-prim . bytevector-sint-ref) (G4d1d core-prim . bytevector-s8-set!) (G4d1c core-prim . bytevector-s8-ref) (G4d1b core-prim . bytevector-s64-set!) (G4d1a core-prim . bytevector-s64-ref) (G4d19 core-prim . bytevector-s64-native-set!) (G4d18 core-prim . bytevector-s64-native-ref) (G4d17 core-prim . bytevector-s32-set!) (G4d16 core-prim . bytevector-s32-ref) (G4d15 core-prim . bytevector-s32-native-set!) (G4d14 core-prim . bytevector-s32-native-ref) (G4d13 core-prim . bytevector-s16-set!) (G4d12 core-prim . bytevector-s16-ref) (G4d11 core-prim . bytevector-s16-native-set!) (G4d10 core-prim . bytevector-s16-native-ref) (G4d0f core-prim . bytevector-length) (G4d0e core-prim . bytevector-ieee-single-ref) (G4d0d core-prim . bytevector-ieee-single-set!) (G4d0c core-prim . bytevector-ieee-single-native-set!) (G4d0b core-prim . bytevector-ieee-single-native-ref) (G4d0a core-prim . bytevector-ieee-double-set!) (G4d09 core-prim . bytevector-ieee-double-ref) (G4d08 core-prim . bytevector-ieee-double-native-set!) (G4d07 core-prim . bytevector-ieee-double-native-ref) (G4d06 core-prim . bytevector-fill!) (G4d05 core-prim . bytevector-copy!) (G4d04 core-prim . bytevector-copy) (G4d03 core-prim . bytevector->uint-list) (G4d02 core-prim . bytevector->u8-list) (G4d01 core-prim . bytevector->sint-list) (G49bf core-prim . no-nans-violation?) (G49aa core-prim . no-infinities-violation?) (G49bd core-prim . make-no-nans-violation) (G49a8 core-prim . make-no-infinities-violation) (G4d00 core-prim . real->flonum) (G4cff core-prim . flzero?) (G4cfe core-prim . fltruncate) (G4cfd core-prim . fltan) (G4cfc core-prim . flsqrt) (G4cfb core-prim . flsin) (G4cfa core-prim . flround) (G4cf9 core-prim . flpositive?) (G4cf8 core-prim . flonum?) (G4cf7 core-prim . flodd?) (G4cf6 core-prim . flnumerator) (G4cf5 core-prim . flnegative?) (G4cf4 core-prim . flnan?) (G4cf3 core-prim . flmod0) (G4cf2 core-prim . flmod) (G4cf1 core-prim . flmin) (G4cf0 core-prim . flmax) (G4cef core-prim . fllog) (G4cee core-prim . flinteger?) (G4ced core-prim . flinfinite?) (G4cec core-prim . flfloor) (G4ceb core-prim . flfinite?) (G4cea core-prim . flexpt) (G4ce9 core-prim . flexp) (G4ce8 core-prim . fleven?) (G4ce7 core-prim . fldiv0-and-mod0) (G4ce6 core-prim . fldiv0) (G4ce5 core-prim . fldiv-and-mod) (G4ce4 core-prim . fldiv) (G4ce3 core-prim . fldenominator) (G4ce2 core-prim . flcos) (G4ce1 core-prim . flceiling) (G4ce0 core-prim . flatan) (G4cdf core-prim . flasin) (G4cde core-prim . flacos) (G4cdd core-prim . flabs) (G4cdc core-prim . fl>?) (G4cdb core-prim . fl>=?) (G4cda core-prim . fl=?) (G4cd9 core-prim . fl<?) (G4cd8 core-prim . fl<=?) (G4cd7 core-prim . fl/) (G4cd6 core-prim . fl-) (G4cd5 core-prim . fl+) (G4cd4 core-prim . fl*) (G4cd3 core-prim . fixnum->flonum) (G4cd2 core-prim . fxzero?) (G4cd1 core-prim . fxxor) (G4cd0 core-prim . fxrotate-bit-field) (G4ccf core-prim . fxreverse-bit-field) (G4cce core-prim . fxpositive?) (G4ccd core-prim . fxodd?) (G4ccc core-prim . fxnot) (G4ccb core-prim . fxnegative?) (G4cca core-prim . fxmod0) (G4cc9 core-prim . fxmod) (G4cc8 core-prim . fxmin) (G4cc7 core-prim . fxmax) (G4cc6 core-prim . fxlength) (G4cc5 core-prim . fxior) (G4cc4 core-prim . fxif) (G4cc3 core-prim . fxfirst-bit-set) (G4cc2 core-prim . fxeven?) (G4cc1 core-prim . fxdiv0-and-mod0) (G4cc0 core-prim . fxdiv0) (G4cbf core-prim . fxdiv-and-mod) (G4cbe core-prim . fxdiv) (G4cbd core-prim . fxcopy-bit-field) (G4cbc core-prim . fxcopy-bit) (G4cbb core-prim . fxbit-set?) (G4cba core-prim . fxbit-field) (G4cb9 core-prim . fxbit-count) (G4cb8 core-prim . fxarithmetic-shift-right) (G4cb7 core-prim . fxarithmetic-shift-left) (G4cb6 core-prim . fxarithmetic-shift) (G4cb5 core-prim . fxand) (G4cb4 core-prim . fx>?) (G4cb3 core-prim . fx>=?) (G4cb2 core-prim . fx=?) (G4cb1 core-prim . fx<?) (G4cb0 core-prim . fx<=?) (G4caf core-prim . fx-/carry) (G4cae core-prim . fx-) (G4cad core-prim . fx+/carry) (G4cac core-prim . fx+) (G4cab core-prim . fx*/carry) (G4caa core-prim . fx*) (G4ca9 core-prim . greatest-fixnum) (G4ca8 core-prim . least-fixnum) (G4ca7 core-prim . fixnum-width) (G4ca6 core-prim . fixnum?) (G4ca5 core-prim . bitwise-rotate-bit-field) (G4ca4 core-prim . bitwise-reverse-bit-field) (G4ca3 core-prim . bitwise-length) (G4ca2 core-prim . bitwise-if) (G4ca1 core-prim . bitwise-first-bit-set) (G4ca0 core-prim . bitwise-copy-bit-field) (G4c9f core-prim . bitwise-copy-bit) (G4c9e core-prim . bitwise-bit-set?) (G4c9d core-prim . bitwise-bit-field) (G4c9c core-prim . bitwise-bit-count) (G4c9b core-prim . bitwise-xor) (G4c9a core-prim . bitwise-ior) (G4c99 core-prim . bitwise-and) (G4c98 core-prim . bitwise-not) (G4c97 core-prim . bitwise-arithmetic-shift-right) (G4c96 core-prim . bitwise-arithmetic-shift-left) (G4c95 core-prim . bitwise-arithmetic-shift) (G4c94 core-prim . zero?) (G4c93 core-prim . vector?) (G4c92 core-prim . vector-set!) (G4c91 core-prim . vector-ref) (G4c90 core-prim . vector-map) (G4c8f core-prim . vector-length) (G4c8e core-prim . vector-for-each) (G4c8d core-prim . vector-fill!) (G4c8c core-prim . vector->list) (G4c8b core-prim . vector) (G4c8a core-prim . values) (G4c89 core-prim . truncate) (G4c88 core-prim . tan) (G4c87 core-prim . symbol?) (G4c86 core-prim . symbol=?) (G4c85 core-prim . symbol->string) (G4c84 core-prim . substring) (G4c83 core-prim . string?) (G4c82 core-prim . string>?) (G4c81 core-prim . string>=?) (G4c80 core-prim . string=?) (G4c7f core-prim . string<?) (G4c7e core-prim . string<=?) (G4c7d core-prim . string-ref) (G4c7c core-prim . string-length) (G4c7b core-prim . string-for-each) (G4c7a core-prim . string-copy) (G4c79 core-prim . string-append) (G4c78 core-prim . string->symbol) (G4c77 core-prim . string->number) (G4c76 core-prim . string->list) (G4c75 core-prim . string) (G4c74 core-prim . sqrt) (G4c73 core-prim . sin) (G4c72 core-prim . round) (G4c71 core-prim . reverse) (G4c70 core-prim . real?) (G4c6f core-prim . real-valued?) (G4c6e core-prim . real-part) (G4c6d core-prim . rationalize) (G4c6c core-prim . rational?) (G4c6b core-prim . rational-valued?) (G4c6a core-prim . procedure?) (G4c69 core-prim . positive?) (G4c68 core-prim . pair?) (G4c67 core-prim . odd?) (G4c66 core-prim . numerator) (G4c65 core-prim . number?) (G4c64 core-prim . number->string) (G4c63 core-prim . null?) (G4c62 core-prim . not) (G4c61 core-prim . negative?) (G4c60 core-prim . nan?) (G4c5f core-prim . min) (G4c5e core-prim . max) (G4c5d core-prim . map) (G4c5c core-prim . make-vector) (G4c5b core-prim . make-string) (G4c5a core-prim . make-rectangular) (G4c59 core-prim . make-polar) (G4c58 core-prim . magnitude) (G4c57 core-prim . log) (G4c56 core-prim . list?) (G4c55 core-prim . list-tail) (G4c54 core-prim . list-ref) (G4c53 core-prim . list->vector) (G4c52 core-prim . list->string) (G4c51 core-prim . list) (G4c50 core-prim . length) (G4c4f core-prim . lcm) (G4c4e core-prim . integer?) (G4c4d core-prim . integer-valued?) (G4c4c core-prim . integer->char) (G4c4b core-prim . infinite?) (G4c4a core-prim . inexact?) (G4c49 core-prim . inexact) (G4c48 core-prim . imag-part) (G4c47 core-prim . gcd) (G4c46 core-prim . for-each) (G4c45 core-prim . floor) (G4c44 core-prim . finite?) (G4c43 core-prim . expt) (G4c42 core-prim . exp) (G4c41 core-prim . exact?) (G4c40 core-prim . exact-integer-sqrt) (G4c3f core-prim . exact) (G4c3e core-prim . even?) (G4c3d core-prim . error) (G4c3c core-prim . eqv?) (G4c3b core-prim . equal?) (G4c3a core-prim . eq?) (G4c39 core-prim . dynamic-wind) (G4c38 core-prim . div0-and-mod0) (G4c37 core-prim . mod0) (G4c36 core-prim . div0) (G4c35 core-prim . div-and-mod) (G4c34 core-prim . mod) (G4c33 core-prim . div) (G4c32 core-prim . denominator) (G4c31 core-prim . cos) (G4c30 core-prim . cons) (G4c2f core-prim . complex?) (G4c2e core-prim . char?) (G4c2d core-prim . char>?) (G4c2c core-prim . char>=?) (G4c2b core-prim . char=?) (G4c2a core-prim . char<?) (G4c29 core-prim . char<=?) (G4c28 core-prim . char->integer) (G4c27 core-prim . ceiling) (G4c26 core-prim . call-with-values) (G4c25 core-prim . call/cc) (G4c24 core-prim . call-with-current-continuation) (G4c23 core-prim . cddddr) (G4c22 core-prim . cdddar) (G4c21 core-prim . cddadr) (G4c20 core-prim . cddaar) (G4c1f core-prim . cdaddr) (G4c1e core-prim . cdadar) (G4c1d core-prim . cdaadr) (G4c1c core-prim . cdaaar) (G4c1b core-prim . cadddr) (G4c1a core-prim . caddar) (G4c19 core-prim . cadadr) (G4c18 core-prim . cadaar) (G4c17 core-prim . caaddr) (G4c16 core-prim . caadar) (G4c15 core-prim . caaadr) (G4c14 core-prim . caaaar) (G4c13 core-prim . cdddr) (G4c12 core-prim . cddar) (G4c11 core-prim . cdadr) (G4c10 core-prim . cdaar) (G4c0f core-prim . caddr) (G4c0e core-prim . cadar) (G4c0d core-prim . caadr) (G4c0c core-prim . caaar) (G4c0b core-prim . cddr) (G4c0a core-prim . cdar) (G4c09 core-prim . cadr) (G4c08 core-prim . caar) (G4c07 core-prim . cdr) (G4c06 core-prim . car) (G4c05 core-prim . boolean?) (G4c04 core-prim . boolean=?) (G4c03 core-prim . atan) (G4c02 core-prim . assertion-violation) (G4c01 core-prim . asin) (G4c00 core-prim . apply) (G4bff core-prim . append) (G4bfe core-prim . angle) (G4bfd core-prim . acos) (G4bfc core-prim . abs) (G4bfb core-prim . /) (G4bfa core-prim . *) (G4bf9 core-prim . -) (G4bf8 core-prim . +) (G4bf7 core-prim . >=) (G4bf6 core-prim . >) (G4bf5 core-prim . =) (G4bf4 core-prim . <=) (G4bf3 core-prim . <) (G4bf2 core-prim . library) (G4bf1 $core-rtd &no-nans-rtd &no-nans-rcd) (G4bf0 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4bef $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4bee $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4bed $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4bec $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4beb $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4bea $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4be9 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4be8 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4be7 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4be6 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4be5 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4be4 $core-rtd &i/o-rtd &i/o-rcd) (G4be3 $core-rtd &undefined-rtd &undefined-rcd) (G4be2 $core-rtd &syntax-rtd &syntax-rcd) (G4be1 $core-rtd &lexical-rtd &lexical-rcd) (G4be0 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4bdf $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4bde $core-rtd &who-rtd &who-rcd) (G4bdd $core-rtd &irritants-rtd &irritants-rcd) (G4bdc $core-rtd &assertion-rtd &assertion-rcd) (G4bdb $core-rtd &violation-rtd &violation-rcd) (G4bda $core-rtd &error-rtd &error-rcd) (G4bd9 $core-rtd &serious-rtd &serious-rcd) (G4bd8 $core-rtd &warning-rtd &warning-rcd) (G4bd7 $core-rtd &message-rtd &message-rcd) (G4bd6 $core-rtd &condition-rtd &condition-rcd) (G4bd5 macro . define-condition-type) (G4bd4 macro . define-enumeration) (G4bd3 macro . define-record-type) (G4bd2 macro . parent-rtd) (G4bd1 macro . nongenerative) (G4bd0 macro . opaque) (G4bcf macro . sealed) (G4bce macro . protocol) (G4bcd macro . parent) (G4bcc macro . immutable) (G4bcb macro . mutable) (G4bca macro . fields) (G4bc9 macro . error-handling-mode) (G4bc8 macro . file-options) (G4bc7 macro . buffer-mode) (G4bc6 macro . eol-style) (G4bc5 macro . guard) (G4bc4 macro . trace-define) (G4bc3 macro . trace-lambda) (G4bc2 macro . unsyntax-splicing) (G4bc1 macro . unsyntax) (G4bc0 macro . unquote-splicing) (G4bbf macro . unquote) (G4bbe macro . _) (G4bbd macro . else) (G4bbc macro . =>) (G4bbb macro . ...) (G4bba macro . assert) (G4bb9 macro . endianness) (G4bb8 macro . delay) (G4bb7 macro . time) (G4bb6 macro . do) (G4bb5 macro . cond) (G4bb4 macro . let*) (G4bb3 macro . let) (G4bb2 macro . let*-values) (G4bb1 macro . let-values) (G4bb0 macro . identifier-syntax) (G4baf macro . with-syntax) (G4bae macro . quasisyntax) (G4bad macro . quasiquote) (G4bac macro . syntax-rules) (G4bab macro . include) (G4baa macro . define-struct) (G4ba9 core-macro . record-constructor-descriptor) (G4ba8 core-macro . record-type-descriptor) (G4ba7 macro . case) (G4ba6 macro . parameterize) (G4ba5 macro . unless) (G4ba4 macro . when) (G4ba3 core-macro . or) (G4ba2 core-macro . and) (G4ba1 core-macro . if) (G4ba0 core-macro . letrec*) (G4b9f core-macro . letrec) (G4b9e core-macro . type-descriptor) (G4b9d core-macro . case-lambda) (G4b9c core-macro . lambda) (G4b9b core-macro . syntax) (G4b9a core-macro . syntax-case) (G4b99 core-macro . quote) (G4b98 core-macro . foreign-call) (G4b97 letrec-syntax) (G4b96 let-syntax) (G4b95 set!) (G4b94 import) (G4b93 begin) (G4b92 module) (G4b91 define-syntax) (G4b90 define)) values values '#f '#f '#f '#f) (G2964@G2809@install-library 'G4e71 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G4e50) (eval-core . G4e4f) (set-symbol-value! . G4e4e) (symbol-value . G4e4d) (gensym . G4e4c) (void . G4e4b)) '() values values '#f '#f '#f '#f) (G2964@G2809@install-library 'G4e72 '(mosh) '() '() '() '() '((set-symbol-value! . G4e4e) (symbol-value . G4e4d) (read-line . G4e48) (ungensym . G4e47) (alist->eq-hash-table . G4e46) (assoc-ref . G4e45) (print . G4e44) (format . G4e43) (host-os . G4e42) (library-path . G27e8) (standard-library-path . G4e41) (file-newer? . G4e40) (stat-mtime . G4e3f) (write-to-file . G4e3e) (file->list . G4e3d) (file->string . G4e3c) (digit->integer . G4e3b) (call-with-string-input-port . G4e3a) (call-with-string-io . G4e39) (string-split . G4e38) (bytevector-for-each . G4e37) (string->regexp . G4e36) (rxmatch . G4e35) (regexp-replace-all . G4e34) (hashtable-for-each . G4e33) (readdir . G4e2f) (set-current-directory! . G4e2e) (expand-path . G4e2d) (current-directory . G4e2c) (p . G4e1d) (get-timeofday . G4e18) (get-command-line . G4e17) (sys-display . G4e16) (source-info . G4e15) (make-compiler-instruction . G4e14) (make-instruction . G4e13) (set-source-info! . G4e12) (bignum? . G4e11) (fast-equal? . G4e10) (fasl-read . G4e0f) (fasl-write . G4e0e) (include . G4bab)) '() values values '#f '#f '#f '#f) (G2964@G2809@install-library 'G4e73 '(system) '() '() '() '() '((call-process . G4e32) (local-tz-offset . G4e31) (microseconds . G4e30) (expand-path . G4e2d) (%spawn . G4e2b) (%waitpid . G4e2a) (%ffi-supported? . G4e29) (%ffi-pointer-ref . G4e28) (%ffi-pointer->string . G4e27) (%ffi-call->string-or-zero . G4e26) (%ffi-call->double . G4e25) (%ffi-call->void* . G4e24) (%ffi-call->void . G4e23) (%ffi-call->int . G4e22) (%ffi-lookup . G4e21) (%ffi-open . G4e20) (%fork . G4e1f) (%pipe . G4e1e) (open-output-string . G4e1c) (get-output-string . G4e1b) (get-environment-variables . G4e1a) (get-environment-variable . G4e19) (make-parameter . G261f) (parameterize . G4ba6)) '() values values '#f '#f '#f '#f))
((lambda (G4ab9@add-library-path! G4abb@parse-and-add-library-path G4abd@for-each-with-index G4abf@conditioon-printer G4ac1@repl G4ac3@trace-printer G4ac5@command-line G4ac7@local-library-path G4ac9@load/args G4acb@load G4acd@ironscheme-build G4acf@eval-top-level G4ad1@compile-system-libraries G4ad3@compile G4ad5@compile->closure G4ad7@pre-compile-r6rs-file G4ad9@load-r6rs-top-level) (begin (set! G4ab9@add-library-path! (lambda (G4af4@path) (G2954@G27e9@library-path (append (G2954@G27e9@library-path) (list G4af4@path))))) (set! G4abb@parse-and-add-library-path (lambda (G4af6@paths G4af7@message) ((lambda (G4afa@t) (if G4afa@t ((lambda (G4afc@paths) (for-each (lambda (G4afe@path) (if (file-exists? G4afe@path) (G4ab9@add-library-path! (expand-path G4afe@path)) (format (current-error-port) G4af7@message G4afe@path))) (reverse (string-split G4afc@paths '#\:)))) G4afa@t) (void))) G4af6@paths))) (set! G4abd@for-each-with-index (lambda (G4b00@proc G4b01@lst) (letrec ((G4b04@loop (lambda (G4b06@i G4b07@lst) (if (null? G4b07@lst) (if '#f '#f (void)) (begin (G4b00@proc G4b06@i (car G4b07@lst)) (G4b04@loop (+ G4b06@i '1) (cdr G4b07@lst))))))) (G4b04@loop '1 G4b01@lst)))) (set! G4abf@conditioon-printer (lambda (G4b0a@e G4b0b@port) ((lambda (G4b0f@ref) (begin (set! G4b0f@ref (lambda (G4b1e@rtd G4b1f@i G4b20@x) ((lambda (G4b24@val) (if (symbol? G4b24@val) (ungensym G4b24@val) G4b24@val)) ((record-accessor G4b1e@rtd G4b1f@i) G4b20@x)))) (begin (display '" Condition components:\n" G4b0b@port) (G4abd@for-each-with-index (lambda (G4b10@i G4b11@x) ((lambda (G4b14@rtd) (begin (format G4b0b@port '"   ~d. ~a" G4b10@i (record-type-name G4b14@rtd)) ((lambda (G4b16@v) ((lambda (G4b18@t) (if (memv G4b18@t '(0)) (newline G4b0b@port) (if (memv G4b18@t '(1)) (begin (display '": " G4b0b@port) (write (G4b0f@ref G4b14@rtd '0 G4b11@x) G4b0b@port) (newline G4b0b@port)) (begin (display '":\n" G4b0b@port) ((letrec ((G4b1a@f (lambda (G4b1c@i) (if (not (= G4b1c@i (vector-length G4b16@v))) (begin (display '"       " G4b0b@port) (display (vector-ref G4b16@v G4b1c@i) G4b0b@port) (display '": " G4b0b@port) (write (G4b0f@ref G4b14@rtd G4b1c@i G4b11@x) G4b0b@port) (newline G4b0b@port) (G4b1a@f (+ G4b1c@i '1))) (void))))) G4b1a@f) '0))))) (vector-length G4b16@v))) (record-type-field-names G4b14@rtd)))) (record-rtd G4b11@x))) (simple-conditions G4b0a@e))))) '#f))) (set! G4ac1@repl (lambda G4b26@x ((lambda (G4b29@rec) (begin (set! G4b29@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4b2c@G4b2a) (lambda () (with-exception-handler (lambda (G4b2e@e) ((call/cc (lambda (G4b30@G4b2b) (G4b2c@G4b2a (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? G4b2e@e) (G4abf@conditioon-printer G4b2e@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" G4b2e@e))) (G4b30@G4b2b (lambda () (raise-continuable G4b2e@e)))))))))) (lambda () ((letrec ((G4b32@loop (lambda (G4b34@line G4b35@accum) ((lambda (G4b39@parentheses-ok? G4b3b@eval-string-print) (begin (set! G4b39@parentheses-ok? (lambda (G4b40@text) ((letrec ((G4b42@loop (lambda (G4b44@chars G4b45@p0 G4b46@p1) (if (null? G4b44@chars) (= '0 G4b45@p0 G4b46@p1) ((lambda (G4b4a@t) (if (memv G4b4a@t '(#\()) (G4b42@loop (cdr G4b44@chars) (+ G4b45@p0 '1) G4b46@p1) (if (memv G4b4a@t '(#\))) (G4b42@loop (cdr G4b44@chars) (- G4b45@p0 '1) G4b46@p1) (if (memv G4b4a@t '(#\[)) (G4b42@loop (cdr G4b44@chars) G4b45@p0 (+ G4b46@p1 '1)) (if (memv G4b4a@t '(#\])) (G4b42@loop (cdr G4b44@chars) G4b45@p0 (- G4b46@p1 '1)) (G4b42@loop (cdr G4b44@chars) G4b45@p0 G4b46@p1)))))) (car G4b44@chars)))))) G4b42@loop) (string->list G4b40@text) '0 '0))) (set! G4b3b@eval-string-print (lambda (G4b3e@text) (if (not (or (string=? '"\n" G4b3e@text) (= '0 (string-length G4b3e@text)))) (write (G4acf@eval-top-level (call-with-port (open-string-input-port G4b3e@text) read))) (void)))) (if (eof-object? G4b34@line) (begin (G4b3b@eval-string-print G4b35@accum) (exit)) ((lambda (G4b3c@current) (if (G4b39@parentheses-ok? G4b3c@current) (G4b3b@eval-string-print G4b3c@current) (G4b32@loop (get-line (current-input-port)) G4b3c@current))) (string-append G4b35@accum G4b34@line))))) '#f '#f)))) G4b32@loop) (get-line (current-input-port)) '""))))))) (newline) (G4b29@rec)))) (G4b29@rec))) '#f))) (set! G4ac3@trace-printer (G26f2@G2620@make-parameter write)) (set! G4ac5@command-line (G26f2@G2620@make-parameter (get-command-line))) (set! G4ac7@local-library-path (lambda (G4b4c@filename) (cons (expand-path '".") (G2954@G27e9@library-path)))) (set! G4ac9@load/args (lambda (G4b4e@filename . G4b50@args) (begin (apply G4ad9@load-r6rs-top-level G4b4e@filename 'load G4b50@args) (void)))) (set! G4acb@load (lambda (G4b52@filename) (begin (apply G4ad9@load-r6rs-top-level G4b52@filename 'load (G4ac5@command-line)) (void)))) (set! G4acd@ironscheme-build (lambda () (G4acb@load '"ironscheme-buildscript.ss"))) (set! G4acf@eval-top-level (lambda (G4b54@x) (G46f1@G2dfa@eval G4b54@x (G4707@G2e26@interaction-environment)))) (set! G4ad1@compile-system-libraries (lambda () (G4acf@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4ad3@compile (lambda (G4b56@filename) (G4ad9@load-r6rs-top-level G4b56@filename 'compile))) (set! G4ad5@compile->closure (lambda (G4b58@filename) (G4ad9@load-r6rs-top-level G4b58@filename 'closure))) (set! G4ad7@pre-compile-r6rs-file (lambda (G4b5a@filename) (G4ad9@load-r6rs-top-level G4b5a@filename 'compile))) (set! G4ad9@load-r6rs-top-level (lambda (G4b5c@filename G4b5d@how . G4b60@args) ((lambda (G4b64@G4b62 G4b65@G4b63) ((lambda (G4b68@swap) (dynamic-wind G4b68@swap (lambda () ((lambda (G4b6a@x*) ((lambda (G4b6c@t) (if (memv G4b6c@t '(closure)) (G4706@G2e24@pre-compile-r6rs-top-level G4b6a@x*) (if (memv G4b6c@t '(load)) ((lambda (G4b70@G4b6e G4b71@G4b6f) ((lambda (G4b74@swap) (dynamic-wind G4b74@swap (lambda () ((G4705@G2e22@compile-r6rs-top-level G4b6a@x*))) G4b74@swap)) (lambda () ((lambda (G4b76@t) (begin (G4b70@G4b6e G4b71@G4b6f) (set! G4b71@G4b6f G4b76@t))) (G4b70@G4b6e))))) G4ac5@command-line (cons G4b5c@filename (car G4b60@args))) (if (memv G4b6c@t '(compile)) (begin (G4705@G2e22@compile-r6rs-top-level G4b6a@x*) (G2958@G27f1@serialize-all G26ed@G2616@serialize-library G2747@G2700@compile-core-expr)) (if '#f '#f (void)))))) G4b5d@how)) (with-input-from-file G4b5c@filename (lambda () ((letrec ((G4b78@f (lambda () ((lambda (G4b7a@x) (if (eof-object? G4b7a@x) '() (cons G4b7a@x (G4b78@f)))) (G26e5@G2606@read-annotated))))) G4b78@f)))))) G4b68@swap)) (lambda () ((lambda (G4b7c@t) (begin (G4b64@G4b62 G4b65@G4b63) (set! G4b65@G4b63 G4b7c@t))) (G4b64@G4b62))))) G2954@G27e9@library-path (G4ac7@local-library-path G4b5c@filename)))) (begin (set! G4b8e@G4ad9@load-r6rs-top-level G4ad9@load-r6rs-top-level) (set! G4b8d@G4ad7@pre-compile-r6rs-file G4ad7@pre-compile-r6rs-file) (set! G4b8c@G4ad5@compile->closure G4ad5@compile->closure) (set! G4b8b@G4ad3@compile G4ad3@compile) (set! G4b8a@G4ad1@compile-system-libraries G4ad1@compile-system-libraries) (set! G4b89@G4acf@eval-top-level G4acf@eval-top-level) (set! G4b88@G4acd@ironscheme-build G4acd@ironscheme-build) (set! G4b87@G4acb@load G4acb@load) (set! G4b86@G4ac9@load/args G4ac9@load/args) (set! G4b85@G4ac7@local-library-path G4ac7@local-library-path) (set! G4b84@G4ac5@command-line G4ac5@command-line) (set! G4b83@G4ac3@trace-printer G4ac3@trace-printer) (set! G4b82@G4ac1@repl G4ac1@repl) (set! G4b81@G4abf@conditioon-printer G4abf@conditioon-printer) (set! G4b80@G4abd@for-each-with-index G4abd@for-each-with-index) (set! G4b7f@G4abb@parse-and-add-library-path G4abb@parse-and-add-library-path) (set! G4b7e@G4ab9@add-library-path! G4ab9@add-library-path!) (G2959@G27f3@current-precompiled-library-loader G26ee@G2618@load-serialized-library) (set-symbol-value! 'load G4acb@load) (set-symbol-value! 'pre-compile-r6rs-file G4ad7@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4acf@eval-top-level) (set-symbol-value! 'int-env-syms G46e8@G2de8@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2746@G26fe@expanded->core) (set-symbol-value! 'trace-printer G4ac3@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4ada@c) (condition (G4a16@G4826@make-non-continuable-violation) (G4a0c@G480d@make-who-condition 'raise) (G49d0@G4770@make-message-condition '"returned from non-continuable exception") (G4a02@G47f3@make-irritants-condition (list G4ada@c))))) (G4abb@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4abb@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2954@G27e9@library-path (append (G2954@G27e9@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4adc@prefix) (G2955@G27eb@library-extensions (G4adc@prefix '".mosh" (G2955@G27eb@library-extensions)))) (lambda (G4ade@ext G4adf@ls) (append (map (lambda (G4ae2@x) (string-append G4ade@ext G4ae2@x)) G4adf@ls) G4adf@ls))) ((lambda (G4ae4@args G4ae5@port) ((lambda (G4ae9@ref) (begin (set! G4ae9@ref (lambda (G4aec@rtd G4aed@i G4aee@x) ((lambda (G4af2@val) (if (symbol? G4af2@val) (ungensym G4af2@val) G4af2@val)) ((record-accessor G4aec@rtd G4aed@i) G4aee@x)))) (with-exception-handler (lambda (G4aea@c) (if (condition? G4aea@c) (G4abf@conditioon-printer G4aea@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" G4aea@c))) (lambda () (if (null? G4ae4@args) (G4ac1@repl) (G4ad9@load-r6rs-top-level (car G4ae4@args) 'load (cdr G4ae4@args))))))) '#f)) (G4ac5@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
