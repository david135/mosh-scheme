;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G281b@read-annotated G281d@annotation-stripped G281f@annotation? G2821@annotation-source G2823@annotation-expression G2825@scm->fasl G2827@fasl-save G2829@fasl-load G282b@serialize-library G282d@load-serialized-library G282f@make-record-printer G2831@compile-core G2833@read-library-source-file G2835@make-parameter G28a1@file-options-spec) (begin (set! G281b@read-annotated read) (set! G281d@annotation-stripped (lambda (G28a2@x) (G2823@annotation-expression G28a2@x))) (set! G281f@annotation? (lambda (G28a4@x) (source-info G28a4@x))) (set! G2821@annotation-source (lambda (G28a6@x) (source-info G28a6@x))) (set! G2823@annotation-expression (lambda (G28a8@x) (if (pair? G28a8@x) (cons (car G28a8@x) (cdr G28a8@x)) (display '"line:46\n")))) (set! G2825@scm->fasl (lambda (G28aa@filename) (string-append G28aa@filename '".fasl"))) (set! G2827@fasl-save (lambda (G28ac@filename G28ad@obj) (call-with-port (open-file-output-port G28ac@filename) (lambda (G28b0@port) ((symbol-value 'fasl-write!) G28ad@obj G28b0@port))))) (set! G2829@fasl-load (lambda (G28b2@filename) (call-with-port (open-file-input-port G28b2@filename) (symbol-value 'fasl-read!)))) (set! G282b@serialize-library (lambda (G28b4@filename G28b5@obj) (begin (format '#t '"serialize-library ~a\n..." G28b4@filename) ((lambda (G28b8@fasl-file) (begin (if (file-exists? G28b8@fasl-file) (delete-file G28b8@fasl-file) (void)) ((call/cc (lambda (G28bc@G28ba) (lambda () (with-exception-handler (lambda (G28be@c) ((call/cc (lambda (G28c0@G28bb) (G28bc@G28ba (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28b4@filename) (if (file-exists? G28b8@fasl-file) (delete-file G28b8@fasl-file) (void)) '#f) (G28c0@G28bb (lambda () (raise-continuable G28be@c)))))))))) (lambda () (begin (G2827@fasl-save G28b8@fasl-file G28b5@obj) (display '"OK\n")))))))))) (G2825@scm->fasl G28b4@filename))))) (set! G282d@load-serialized-library (lambda (G28c2@filename G28c3@obj) ((lambda (G28c6@fasl-file) (if (and (file-exists? G28c6@fasl-file) ((symbol-value 'file-newer?) G28c6@fasl-file G28c2@filename)) ((lambda (G28c8@expanded2core) ((lambda (G28ca@code) ((lambda (G28cc@pivot) ((lambda (G28ce@visit) ((lambda (G28d0@visit-proc) ((lambda () (begin (set-car! G28cc@pivot G28d0@visit-proc) ((lambda (G28d2@pivot) ((lambda (G28d4@invoke) ((lambda () (begin (set-car! G28d2@pivot (lambda () (eval-core G28d4@invoke))) (apply G28c3@obj G28ca@code))))) (G28c8@expanded2core (car G28d2@pivot)))) (cdr G28cc@pivot)) '#t)))) (lambda () (eval-core G28ce@visit)))) (G28c8@expanded2core (car G28cc@pivot)))) (cddddr (cddddr G28ca@code)))) (G2829@fasl-load G28c6@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2825@scm->fasl G28c2@filename)))) (set! G282f@make-record-printer (lambda (G28d6@name G28d7@printer) (lambda G28da@x (begin (display '"record printer") (for-each display G28da@x))))) (set! G2831@compile-core (lambda G28dc@x (apply error 'comile-core '"not implementated" G28dc@x))) (set! G2833@read-library-source-file (lambda (G28de@file-name) (with-input-from-file G28de@file-name G281b@read-annotated))) (set! G2835@make-parameter (lambda G28ee ((lambda (G28ef) (if (= G28ef '1) (apply (lambda (G28e0@x) (G2835@make-parameter G28e0@x (lambda (G28e2@x) G28e2@x))) G28ee) (if (= G28ef '2) (apply (lambda (G28e4@x G28e5@fender) ((lambda (G28e8@x) (lambda G28ec ((lambda (G28ed) (if (= G28ed '0) (apply (lambda () G28e8@x) G28ec) (if (= G28ed '1) (apply (lambda (G28ea@v) (set! G28e8@x (G28e5@fender G28ea@v))) G28ec) (error 'apply '"invalid arg count")))) (length G28ec)))) (G28e5@fender G28e4@x))) G28ee) (error 'apply '"invalid arg count")))) (length G28ee)))) (set! G28a1@file-options-spec (lambda (G28f0@x) G28f0@x)) (begin (set! G2900@G28a1@file-options-spec G28a1@file-options-spec) (set! G28ff@G2835@make-parameter G2835@make-parameter) (set! G28fe@G2833@read-library-source-file G2833@read-library-source-file) (set! G28fd@G2831@compile-core G2831@compile-core) (set! G28fc@G282f@make-record-printer G282f@make-record-printer) (set! G28fb@G282d@load-serialized-library G282d@load-serialized-library) (set! G28fa@G282b@serialize-library G282b@serialize-library) (set! G28f9@G2829@fasl-load G2829@fasl-load) (set! G28f8@G2827@fasl-save G2827@fasl-save) (set! G28f7@G2825@scm->fasl G2825@scm->fasl) (set! G28f6@G2823@annotation-expression G2823@annotation-expression) (set! G28f5@G2821@annotation-source G2821@annotation-source) (set! G28f4@G281f@annotation? G281f@annotation?) (set! G28f3@G281d@annotation-stripped G281d@annotation-stripped) (set! G28f2@G281b@read-annotated G281b@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2905@current-primitive-locations G2907@mutable? G2909@rewriter G290b@expanded->core G290d@compile-core-expr G290f@pretty-print G2911@compile-core-expr-to-port) (begin (set! G2905@current-primitive-locations (G28ff@G2835@make-parameter (lambda (G2912@x) '#f) (lambda (G2914@p) G2914@p))) (set! G2907@mutable? (lambda (G2916@x) (or (pair? G2916@x) (vector? G2916@x) (hashtable? G2916@x)))) (set! G2909@rewriter (lambda (G2918@quote-hack?) ((lambda (G291b@f) (begin (set! G291b@f (lambda (G291c@x) (if (pair? G291c@x) ((lambda (G291e@t) (if (memv G291e@t '(quote)) (if (and G2918@quote-hack? (G2907@mutable? (cadr G291c@x))) ((lambda (G2920@g) (begin (set-symbol-value! G2920@g (cadr G291c@x)) G2920@g)) (gensym)) G291c@x) (if (memv G291e@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2922@x) (cons (car G2922@x) (map G291b@f (cdr G2922@x)))) (cdr G291c@x))) (if (memv G291e@t '(lambda)) (cons* 'lambda (cadr G291c@x) (map G291b@f (cddr G291c@x))) (if (memv G291e@t '(letrec)) ((lambda (G2924@bindings G2925@body*) ((lambda (G2928@lhs* G2929@rhs*) (cons* 'letrec (map list G2928@lhs* (map G291b@f G2929@rhs*)) (map G291b@f G2925@body*))) (map car G2924@bindings) (map cadr G2924@bindings))) (cadr G291c@x) (cddr G291c@x)) (if (memv G291e@t '(letrec*)) ((lambda (G292c@bindings G292d@body*) ((lambda (G2930@lhs* G2931@rhs*) (cons* 'letrec* (map list G2930@lhs* (map G291b@f G2931@rhs*)) (map G291b@f G292d@body*))) (map car G292c@bindings) (map cadr G292c@bindings))) (cadr G291c@x) (cddr G291c@x)) (if (memv G291e@t '(library-letrec*)) ((lambda (G2934@name G2935@x) ((lambda (G2938@bindings G2939@body*) ((lambda (G293c@lhs* G293d@lhs** G293e@rhs*) (cons* 'library-letrec* G2934@name (map list G293c@lhs* G293d@lhs** (map G291b@f G293e@rhs*)) (map G291b@f G2939@body*))) (map car G2938@bindings) (map cadr G2938@bindings) (map caddr G2938@bindings))) (cadr G2935@x) (cddr G2935@x))) (cadr G291c@x) (cdr G291c@x)) (if (memv G291e@t '(begin)) (cons 'begin (map G291b@f (cdr G291c@x))) (if (memv G291e@t '(set!)) (list 'set! (cadr G291c@x) (G291b@f (caddr G291c@x))) (if (memv G291e@t '(primitive)) ((lambda (G2942@op) ((lambda (G2944@t) (if G2944@t ((lambda (G2946@loc) G2946@loc) G2944@t) G2942@op)) ((G2905@current-primitive-locations) G2942@op))) (cadr G291c@x)) (if (memv G291e@t '(define)) G291c@x (if (list? G291c@x) (map G291b@f G291c@x) (error 'rewrite '"invalid form ~s ~s" G291c@x (list? G291c@x)))))))))))))) (car G291c@x)) G291c@x))) G291b@f)) '#f))) (set! G290b@expanded->core (lambda (G2948@x) ((G2909@rewriter '#t) G2948@x))) (set! G290d@compile-core-expr (lambda (G294a@x) ((G2909@rewriter '#f) G294a@x))) (set! G290f@pretty-print write) (set! G2911@compile-core-expr-to-port (lambda (G294c@x G294d@p) (G290f@pretty-print ((G2909@rewriter '#f) G294c@x) G294d@p))) (begin (set! G2956@G2911@compile-core-expr-to-port G2911@compile-core-expr-to-port) (set! G2955@G290f@pretty-print G290f@pretty-print) (set! G2954@G290d@compile-core-expr G290d@compile-core-expr) (set! G2953@G290b@expanded->core G290b@expanded->core) (set! G2952@G2909@rewriter G2909@rewriter) (set! G2951@G2907@mutable? G2907@mutable?) (set! G2950@G2905@current-primitive-locations G2905@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29ac@make-collection G29ae@current-library-collection G29b4@G29af G29b6@G29b1 G29b8@G29b0 G29bb@library? G29bd@make-library G29bf@library-id G29c1@library-name G29c3@library-version G29c5@library-imp* G29c7@library-vis* G29c9@library-inv* G29cb@library-subst G29cd@library-env G29cf@library-visit-state G29d1@library-invoke-state G29d3@library-visit-code G29d5@library-invoke-code G29d7@library-visible? G29d9@library-source-file-name G29db@set-library-id! G29dd@set-library-name! G29df@set-library-version! G29e1@set-library-imp*! G29e3@set-library-vis*! G29e5@set-library-inv*! G29e7@set-library-subst! G29e9@set-library-env! G29eb@set-library-visit-state! G29ed@set-library-invoke-state! G29ef@set-library-visit-code! G29f1@set-library-invoke-code! G29f3@set-library-visible?! G29f5@set-library-source-file-name! G29f7@rp G29f9@find-dependencies G29fb@find-library-by G29fd@library-path G29ff@library-extensions G2a01@library-name->file-name G2a03@file-locator G2a05@serialize-all G2a07@current-precompiled-library-loader G2a09@try-load-from-file G2a0b@library-loader G2a0d@current-library-expander G2a0f@external-pending-libraries G2a11@find-external-library G2a13@find-library-by-name G2a15@library-exists? G2a17@find-library-by-spec/die G2a19@label->binding-table G2a1b@install-library-record G2a1d@install-library G2a1f@imported-label->binding G2a21@invoke-library G2a23@visit-library G2a25@invoke-library-by-spec G2a27@installed-libraries G2a29@library-spec) (begin (set! G29ac@make-collection (lambda () ((lambda (G2a2a@set) ((lambda (G2a2d@set-cons) (begin (set! G2a2d@set-cons (lambda (G2a32@x G2a33@ls) (if (memq G2a32@x G2a33@ls) G2a33@ls (cons G2a32@x G2a33@ls)))) (lambda G2a30 ((lambda (G2a31) (if (= G2a31 '0) (apply (lambda () G2a2a@set) G2a30) (if (= G2a31 '1) (apply (lambda (G2a2e@x) (set! G2a2a@set (G2a2d@set-cons G2a2e@x G2a2a@set))) G2a30) (error 'apply '"invalid arg count")))) (length G2a30))))) '#f)) '()))) (set! G29ae@current-library-collection (G28ff@G2835@make-parameter (G29ac@make-collection) (lambda (G2a36@x) (begin (if (not (procedure? G2a36@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a36@x) (void)) G2a36@x)))) (set! G29b4@G29af (make-record-type-descriptor 'library '#f 'G29b2 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29b6@G29b1 '#f) (set! G29b8@G29b0 (make-record-constructor-descriptor G29b4@G29af '#f G29b6@G29b1)) (set! G29bb@library? (record-predicate G29b4@G29af)) (set! G29bd@make-library (record-constructor G29b8@G29b0)) (set! G29bf@library-id (record-accessor G29b4@G29af '0)) (set! G29c1@library-name (record-accessor G29b4@G29af '1)) (set! G29c3@library-version (record-accessor G29b4@G29af '2)) (set! G29c5@library-imp* (record-accessor G29b4@G29af '3)) (set! G29c7@library-vis* (record-accessor G29b4@G29af '4)) (set! G29c9@library-inv* (record-accessor G29b4@G29af '5)) (set! G29cb@library-subst (record-accessor G29b4@G29af '6)) (set! G29cd@library-env (record-accessor G29b4@G29af '7)) (set! G29cf@library-visit-state (record-accessor G29b4@G29af '8)) (set! G29d1@library-invoke-state (record-accessor G29b4@G29af '9)) (set! G29d3@library-visit-code (record-accessor G29b4@G29af '10)) (set! G29d5@library-invoke-code (record-accessor G29b4@G29af '11)) (set! G29d7@library-visible? (record-accessor G29b4@G29af '12)) (set! G29d9@library-source-file-name (record-accessor G29b4@G29af '13)) (set! G29db@set-library-id! (record-mutator G29b4@G29af '0)) (set! G29dd@set-library-name! (record-mutator G29b4@G29af '1)) (set! G29df@set-library-version! (record-mutator G29b4@G29af '2)) (set! G29e1@set-library-imp*! (record-mutator G29b4@G29af '3)) (set! G29e3@set-library-vis*! (record-mutator G29b4@G29af '4)) (set! G29e5@set-library-inv*! (record-mutator G29b4@G29af '5)) (set! G29e7@set-library-subst! (record-mutator G29b4@G29af '6)) (set! G29e9@set-library-env! (record-mutator G29b4@G29af '7)) (set! G29eb@set-library-visit-state! (record-mutator G29b4@G29af '8)) (set! G29ed@set-library-invoke-state! (record-mutator G29b4@G29af '9)) (set! G29ef@set-library-visit-code! (record-mutator G29b4@G29af '10)) (set! G29f1@set-library-invoke-code! (record-mutator G29b4@G29af '11)) (set! G29f3@set-library-visible?! (record-mutator G29b4@G29af '12)) (set! G29f5@set-library-source-file-name! (record-mutator G29b4@G29af '13)) (set! G29f7@rp (G28fc@G282f@make-record-printer 'library (lambda (G2a38@x G2a39@p G2a3a@wr) (begin (if (not (G29bb@library? G2a38@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29c3@library-version G2a38@x)) (G29c1@library-name G2a38@x) (append (G29c1@library-name G2a38@x) (list (G29c3@library-version G2a38@x))))) G2a39@p))))) (set! G29f9@find-dependencies (lambda (G2a3e@ls) (if (null? G2a3e@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29fb@find-library-by (lambda (G2a40@pred) ((letrec ((G2a42@f (lambda (G2a44@ls) (if (null? G2a44@ls) '#f (if (G2a40@pred (car G2a44@ls)) (car G2a44@ls) (G2a42@f (cdr G2a44@ls))))))) G2a42@f) ((G29ae@current-library-collection))))) (set! G29fd@library-path (G28ff@G2835@make-parameter '(".") (lambda (G2a46@x) (if (and (list? G2a46@x) (for-all string? G2a46@x)) (map (lambda (G2a48@x) G2a48@x) G2a46@x) (assertion-violation 'library-path '"not a list of strings" G2a46@x))))) (set! G29ff@library-extensions (G28ff@G2835@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a4a@x) (if (and (list? G2a4a@x) (for-all string? G2a4a@x)) (map (lambda (G2a4c@x) G2a4c@x) G2a4a@x) (assertion-violation 'library-extensions '"not a list of strings" G2a4a@x))))) (set! G2a01@library-name->file-name (lambda (G2a4e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a52@G2a50 G2a53@G2a51) ((lambda (G2a56@extract G2a57@p) ((lambda (G2a5b@display-hex) (begin (set! G2a5b@display-hex (lambda (G2a64@n) (if (<= '0 G2a64@n '9) (display G2a64@n G2a57@p) (display (integer->char (+ (char->integer '#\A) (- G2a64@n '10))) G2a57@p)))) (begin ((letrec ((G2a5c@f (lambda (G2a5e@ls) (if (not (null? G2a5e@ls)) (begin (display '"/" G2a57@p) (for-each (lambda (G2a60@c) (if (or (char<=? '#\a G2a60@c '#\z) (char<=? '#\A G2a60@c '#\Z) (char<=? '#\0 G2a60@c '#\9) (memv G2a60@c '(#\- #\. #\_ #\~))) (display G2a60@c G2a57@p) (begin (display '"%" G2a57@p) ((lambda (G2a62@n) (begin (G2a5b@display-hex (quotient G2a62@n '16)) (G2a5b@display-hex (remainder G2a62@n '16)))) (char->integer G2a60@c))))) (string->list (symbol->string (car G2a5e@ls)))) (G2a5c@f (cdr G2a5e@ls))) (void))))) G2a5c@f) G2a4e@x) (G2a56@extract)))) '#f)) G2a53@G2a51 G2a52@G2a50))))) (set! G2a03@file-locator (G28ff@G2835@make-parameter (lambda (G2a66@x) ((lambda (G2a68@str) ((letrec ((G2a6a@f (lambda (G2a6c@ls G2a6d@exts G2a6e@failed-list) (if (null? G2a6c@ls) ((lambda () ((lambda (G2a7a@G2a75 G2a7c@G2a77 G2a7e@G2a76 G2a81@G2a74 G2a83@make-library-resolution-condition G2a85@G2a72 G2a87@G2a73 G2a89@library-resolution-condition? G2a8b@condition-library G2a8d@condition-files) (begin (set! G2a7a@G2a75 (make-record-type-descriptor '&library-resolution G4c15@G4966@&condition-rtd 'G2a78 '#f '#f '#((immutable library) (immutable files)))) (set! G2a7c@G2a77 '#f) (set! G2a7e@G2a76 (make-record-constructor-descriptor G2a7a@G2a75 G4c16@G4968@&condition-rcd G2a7c@G2a77)) (set! G2a81@G2a74 (record-predicate G2a7a@G2a75)) (set! G2a83@make-library-resolution-condition (record-constructor G2a7e@G2a76)) (set! G2a85@G2a72 (record-accessor G2a7a@G2a75 '0)) (set! G2a87@G2a73 (record-accessor G2a7a@G2a75 '1)) (set! G2a89@library-resolution-condition? (condition-predicate G2a7a@G2a75)) (set! G2a8b@condition-library (condition-accessor G2a7a@G2a75 G2a85@G2a72)) (set! G2a8d@condition-files (condition-accessor G2a7a@G2a75 G2a87@G2a73)) (raise (condition (G4c35@G49fe@make-error) (G4c57@G4a58@make-who-condition 'expander) (G4c1b@G49bb@make-message-condition '"cannot locate library in library-path") (G2a83@make-library-resolution-condition G2a66@x (reverse G2a6e@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a6d@exts) (G2a6a@f (cdr G2a6c@ls) (G29ff@library-extensions) G2a6e@failed-list) ((lambda (G2a8e@name) (if (file-exists? G2a8e@name) G2a8e@name (G2a6a@f G2a6c@ls (cdr G2a6d@exts) (cons G2a8e@name G2a6e@failed-list)))) (string-append (car G2a6c@ls) G2a68@str (car G2a6d@exts)))))))) G2a6a@f) (G29fd@library-path) (G29ff@library-extensions) '())) (G2a01@library-name->file-name G2a66@x))) (lambda (G2a90@f) (if (procedure? G2a90@f) G2a90@f (assertion-violation 'file-locator '"not a procedure" G2a90@f))))) (set! G2a05@serialize-all (lambda (G2a92@serialize G2a93@compile) ((lambda (G2a97@library-desc) (begin (set! G2a97@library-desc (lambda (G2a9a@x) (list (G29bf@library-id G2a9a@x) (G29c1@library-name G2a9a@x)))) (for-each (lambda (G2a98@x) (if (G29d9@library-source-file-name G2a98@x) (G2a92@serialize (G29d9@library-source-file-name G2a98@x) (list (G29bf@library-id G2a98@x) (G29c1@library-name G2a98@x) (G29c3@library-version G2a98@x) (map G2a97@library-desc (G29c5@library-imp* G2a98@x)) (map G2a97@library-desc (G29c7@library-vis* G2a98@x)) (map G2a97@library-desc (G29c9@library-inv* G2a98@x)) (G29cb@library-subst G2a98@x) (G29cd@library-env G2a98@x) (G2a93@compile (G29d3@library-visit-code G2a98@x)) (G2a93@compile (G29d5@library-invoke-code G2a98@x)) (G29d7@library-visible? G2a98@x))) (void))) ((G29ae@current-library-collection))))) '#f))) (set! G2a07@current-precompiled-library-loader (G28ff@G2835@make-parameter (lambda (G2a9c@filename G2a9d@sk) '#f))) (set! G2a09@try-load-from-file (lambda (G2aa0@filename) ((G2a07@current-precompiled-library-loader) G2aa0@filename (lambda G2ac6 ((lambda (G2ac7) (if (= G2ac7 '11) (apply (lambda (G2aa2@id G2aa3@name G2aa4@ver G2aa5@imp* G2aa6@vis* G2aa7@inv* G2aa8@exp-subst G2aa9@exp-env G2aaa@visit-proc G2aab@invoke-proc G2aac@visible?) ((letrec ((G2ab8@f (lambda (G2aba@deps) (if (null? G2aba@deps) (begin (G2a1d@install-library G2aa2@id G2aa3@name G2aa4@ver G2aa5@imp* G2aa6@vis* G2aa7@inv* G2aa8@exp-subst G2aa9@exp-env G2aaa@visit-proc G2aab@invoke-proc '#f '#f G2aac@visible? '#f) '#t) ((lambda (G2abc@d) ((lambda (G2abe@label G2abf@dname) ((lambda (G2ac2@l) (if (and (G29bb@library? G2ac2@l) (eq? G2abe@label (G29bf@library-id G2ac2@l))) (G2ab8@f (cdr G2aba@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2aa3@name G2abf@dname G2aa0@filename G2ac2@l G2abe@label (G29bf@library-id G2ac2@l)) '#f))) (G2a13@find-library-by-name G2abf@dname))) (car G2abc@d) (cadr G2abc@d))) (car G2aba@deps)))))) G2ab8@f) (append G2aa5@imp* G2aa6@vis* G2aa7@inv*))) G2ac6) (if (>= G2ac7 '0) (apply (lambda G2ac4@others '#f) G2ac6) (error 'apply '"invalid arg count")))) (length G2ac6)))))) (set! G2a0b@library-loader (G28ff@G2835@make-parameter (lambda (G2ac8@x) ((lambda (G2aca@file-name) (if (not G2aca@file-name) (assertion-violation '#f '"cannot file library" G2ac8@x) (or (G2a09@try-load-from-file G2aca@file-name) ((G2a0d@current-library-expander) (G28fe@G2833@read-library-source-file G2aca@file-name) G2aca@file-name (lambda (G2acc@name) (if (not (fast-equal? G2acc@name G2ac8@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2ad0@G2ace G2ad1@G2acf) ((lambda (G2ad4@e G2ad5@p) (begin (display '"expected to find library " G2ad5@p) (write G2ac8@x G2ad5@p) (display '" in file " G2ad5@p) (display G2aca@file-name G2ad5@p) (display '", found " G2ad5@p) (write G2acc@name G2ad5@p) (display '" instead" G2ad5@p) (G2ad4@e))) G2ad1@G2acf G2ad0@G2ace)))) (void))))))) ((G2a03@file-locator) G2ac8@x))) (lambda (G2ad8@f) (if (procedure? G2ad8@f) G2ad8@f (assertion-violation 'library-locator '"not a procedure" G2ad8@f))))) (set! G2a0d@current-library-expander (G28ff@G2835@make-parameter (lambda (G2ada@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2adc@f) (if (procedure? G2adc@f) G2adc@f (assertion-violation 'library-expander '"not a procedure" G2adc@f))))) (set! G2a0f@external-pending-libraries (G28ff@G2835@make-parameter '())) (set! G2a11@find-external-library (lambda (G2ade@name) (begin (if (member G2ade@name (G2a0f@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2ade@name) (void)) ((lambda (G2ae2@G2ae0 G2ae3@G2ae1) ((lambda (G2ae6@swap) (dynamic-wind G2ae6@swap (lambda () (begin ((G2a0b@library-loader) G2ade@name) (or (G29fb@find-library-by (lambda (G2ae8@x) (fast-equal? (G29c1@library-name G2ae8@x) G2ade@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2ade@name)))) G2ae6@swap)) (lambda () ((lambda (G2aea@t) (begin (G2ae2@G2ae0 G2ae3@G2ae1) (set! G2ae3@G2ae1 G2aea@t))) (G2ae2@G2ae0))))) G2a0f@external-pending-libraries (cons G2ade@name (G2a0f@external-pending-libraries)))))) (set! G2a13@find-library-by-name (lambda (G2aec@name) (or (G29fb@find-library-by (lambda (G2aee@x) (fast-equal? (G29c1@library-name G2aee@x) G2aec@name))) (G2a11@find-external-library G2aec@name)))) (set! G2a15@library-exists? (lambda (G2af0@name) (and (G29fb@find-library-by (lambda (G2af2@x) (fast-equal? (G29c1@library-name G2af2@x) G2af0@name))) '#t))) (set! G2a17@find-library-by-spec/die (lambda (G2af4@spec) ((lambda (G2af6@id) (or (G29fb@find-library-by (lambda (G2af8@x) (eq? G2af6@id (G29bf@library-id G2af8@x)))) (assertion-violation '#f '"cannot find library with required spec" G2af4@spec))) (car G2af4@spec)))) (set! G2a19@label->binding-table (make-eq-hashtable)) (set! G2a1b@install-library-record (lambda (G2afa@lib) (begin ((lambda (G2afc@exp-env) (for-each (lambda (G2afe@x) ((lambda (G2b00@label G2b01@binding) ((lambda (G2b04@binding) (hashtable-set! G2a19@label->binding-table G2b00@label G2b04@binding)) ((lambda (G2b06@t) (if (memv G2b06@t '(global)) (cons 'global (cons G2afa@lib (cdr G2b01@binding))) (if (memv G2b06@t '(global-macro)) (cons 'global-macro (cons G2afa@lib (cdr G2b01@binding))) (if (memv G2b06@t '(global-macro!)) (cons 'global-macro! (cons G2afa@lib (cdr G2b01@binding))) G2b01@binding)))) (car G2b01@binding)))) (car G2afe@x) (cdr G2afe@x))) G2afc@exp-env)) (G29cd@library-env G2afa@lib)) ((G29ae@current-library-collection) G2afa@lib)))) (set! G2a1d@install-library (lambda (G2b08@id G2b09@name G2b0a@ver G2b0b@imp* G2b0c@vis* G2b0d@inv* G2b0e@exp-subst G2b0f@exp-env G2b10@visit-proc G2b11@invoke-proc G2b12@visit-code G2b13@invoke-code G2b14@visible? G2b15@source-file-name) ((lambda (G2b24@imp-lib* G2b25@vis-lib* G2b26@inv-lib*) (begin (if (not (and (symbol? G2b08@id) (list? G2b09@name) (list? G2b0a@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b08@id G2b09@name G2b0a@ver) (void)) (if (G2a15@library-exists? G2b09@name) (assertion-violation 'install-library '"library is already installed" G2b09@name) (void)) ((lambda (G2b2a@lib) (G2a1b@install-library-record G2b2a@lib)) (G29bd@make-library G2b08@id G2b09@name G2b0a@ver G2b24@imp-lib* G2b25@vis-lib* G2b26@inv-lib* G2b0e@exp-subst G2b0f@exp-env G2b10@visit-proc G2b11@invoke-proc G2b12@visit-code G2b13@invoke-code G2b14@visible? G2b15@source-file-name)))) (map G2a17@find-library-by-spec/die G2b0b@imp*) (map G2a17@find-library-by-spec/die G2b0c@vis*) (map G2a17@find-library-by-spec/die G2b0d@inv*)))) (set! G2a1f@imported-label->binding (lambda (G2b2c@lab) (hashtable-ref G2a19@label->binding-table G2b2c@lab '#f))) (set! G2a21@invoke-library (lambda (G2b2e@lib) ((lambda (G2b30@invoke) (if (procedure? G2b30@invoke) (begin (G29ed@set-library-invoke-state! G2b2e@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b2e@lib))) (for-each G2a21@invoke-library (G29c9@library-inv* G2b2e@lib)) (G29ed@set-library-invoke-state! G2b2e@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b2e@lib))) (G2b30@invoke) (G29ed@set-library-invoke-state! G2b2e@lib '#t)) (void))) (G29d1@library-invoke-state G2b2e@lib)))) (set! G2a23@visit-library (lambda (G2b32@lib) ((lambda (G2b34@visit) (if (procedure? G2b34@visit) (begin (G29eb@set-library-visit-state! G2b32@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b32@lib))) (for-each G2a21@invoke-library (G29c7@library-vis* G2b32@lib)) (G29eb@set-library-visit-state! G2b32@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b32@lib))) (G2b34@visit) (G29eb@set-library-visit-state! G2b32@lib '#t)) (void))) (G29cf@library-visit-state G2b32@lib)))) (set! G2a25@invoke-library-by-spec (lambda (G2b36@spec) (G2a21@invoke-library (G2a17@find-library-by-spec/die G2b36@spec)))) (set! G2a27@installed-libraries (lambda G2b3e ((lambda (G2b3f) (if (= G2b3f '1) (apply (lambda (G2b38@all?) ((letrec ((G2b3a@f (lambda (G2b3c@ls) (if (null? G2b3c@ls) '() (if (or G2b38@all? (G29d7@library-visible? (car G2b3c@ls))) (cons (car G2b3c@ls) (G2b3a@f (cdr G2b3c@ls))) (G2b3a@f (cdr G2b3c@ls))))))) G2b3a@f) ((G29ae@current-library-collection)))) G2b3e) (if (= G2b3f '0) (apply (lambda () (G2a27@installed-libraries '#f)) G2b3e) (error 'apply '"invalid arg count")))) (length G2b3e)))) (set! G2a29@library-spec (lambda (G2b40@x) (begin (if (not (G29bb@library? G2b40@x)) (assertion-violation 'library-spec '"not a library" G2b40@x) (void)) (list (G29bf@library-id G2b40@x) (G29c1@library-name G2b40@x) (G29c3@library-version G2b40@x))))) (begin (set! G2b7e@G2a29@library-spec G2a29@library-spec) (set! G2b7d@G2a27@installed-libraries G2a27@installed-libraries) (set! G2b7c@G2a25@invoke-library-by-spec G2a25@invoke-library-by-spec) (set! G2b7b@G2a23@visit-library G2a23@visit-library) (set! G2b7a@G2a21@invoke-library G2a21@invoke-library) (set! G2b79@G2a1f@imported-label->binding G2a1f@imported-label->binding) (set! G2b78@G2a1d@install-library G2a1d@install-library) (set! G2b77@G2a1b@install-library-record G2a1b@install-library-record) (set! G2b76@G2a19@label->binding-table G2a19@label->binding-table) (set! G2b75@G2a17@find-library-by-spec/die G2a17@find-library-by-spec/die) (set! G2b74@G2a15@library-exists? G2a15@library-exists?) (set! G2b73@G2a13@find-library-by-name G2a13@find-library-by-name) (set! G2b72@G2a11@find-external-library G2a11@find-external-library) (set! G2b71@G2a0f@external-pending-libraries G2a0f@external-pending-libraries) (set! G2b70@G2a0d@current-library-expander G2a0d@current-library-expander) (set! G2b6f@G2a0b@library-loader G2a0b@library-loader) (set! G2b6e@G2a09@try-load-from-file G2a09@try-load-from-file) (set! G2b6d@G2a07@current-precompiled-library-loader G2a07@current-precompiled-library-loader) (set! G2b6c@G2a05@serialize-all G2a05@serialize-all) (set! G2b6b@G2a03@file-locator G2a03@file-locator) (set! G2b6a@G2a01@library-name->file-name G2a01@library-name->file-name) (set! G2b69@G29ff@library-extensions G29ff@library-extensions) (set! G2b68@G29fd@library-path G29fd@library-path) (set! G2b67@G29fb@find-library-by G29fb@find-library-by) (set! G2b66@G29f9@find-dependencies G29f9@find-dependencies) (set! G2b65@G29f7@rp G29f7@rp) (set! G2b64@G29f5@set-library-source-file-name! G29f5@set-library-source-file-name!) (set! G2b63@G29f3@set-library-visible?! G29f3@set-library-visible?!) (set! G2b62@G29f1@set-library-invoke-code! G29f1@set-library-invoke-code!) (set! G2b61@G29ef@set-library-visit-code! G29ef@set-library-visit-code!) (set! G2b60@G29ed@set-library-invoke-state! G29ed@set-library-invoke-state!) (set! G2b5f@G29eb@set-library-visit-state! G29eb@set-library-visit-state!) (set! G2b5e@G29e9@set-library-env! G29e9@set-library-env!) (set! G2b5d@G29e7@set-library-subst! G29e7@set-library-subst!) (set! G2b5c@G29e5@set-library-inv*! G29e5@set-library-inv*!) (set! G2b5b@G29e3@set-library-vis*! G29e3@set-library-vis*!) (set! G2b5a@G29e1@set-library-imp*! G29e1@set-library-imp*!) (set! G2b59@G29df@set-library-version! G29df@set-library-version!) (set! G2b58@G29dd@set-library-name! G29dd@set-library-name!) (set! G2b57@G29db@set-library-id! G29db@set-library-id!) (set! G2b56@G29d9@library-source-file-name G29d9@library-source-file-name) (set! G2b55@G29d7@library-visible? G29d7@library-visible?) (set! G2b54@G29d5@library-invoke-code G29d5@library-invoke-code) (set! G2b53@G29d3@library-visit-code G29d3@library-visit-code) (set! G2b52@G29d1@library-invoke-state G29d1@library-invoke-state) (set! G2b51@G29cf@library-visit-state G29cf@library-visit-state) (set! G2b50@G29cd@library-env G29cd@library-env) (set! G2b4f@G29cb@library-subst G29cb@library-subst) (set! G2b4e@G29c9@library-inv* G29c9@library-inv*) (set! G2b4d@G29c7@library-vis* G29c7@library-vis*) (set! G2b4c@G29c5@library-imp* G29c5@library-imp*) (set! G2b4b@G29c3@library-version G29c3@library-version) (set! G2b4a@G29c1@library-name G29c1@library-name) (set! G2b49@G29bf@library-id G29bf@library-id) (set! G2b48@G29bd@make-library G29bd@make-library) (set! G2b47@G29bb@library? G29bb@library?) (set! G2b46@G29b8@G29b0 G29b8@G29b0) (set! G2b45@G29b6@G29b1 G29b6@G29b1) (set! G2b44@G29b4@G29af G29b4@G29af) (set! G2b43@G29ae@current-library-collection G29ae@current-library-collection) (set! G2b42@G29ac@make-collection G29ac@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b81@build-global-define G2bfb@build-lambda G2bfd@build-case-lambda G2bff@build-let G2c31@build-sequence G2c33@build-void G2c35@build-letrec G2c37@build-letrec* G2c39@build-library-letrec* G2c3b@build-receive) (begin (set! G2b81@build-global-define (lambda (G2c3c@x) (G2c33@build-void))) (set! G2bfb@build-lambda (lambda (G2c3e@ae G2c3f@vars G2c40@exp) (list 'lambda G2c3f@vars G2c40@exp))) (set! G2bfd@build-case-lambda (lambda (G2c44@ae G2c45@vars* G2c46@exp*) ((lambda (G2c4b@build-error G2c4d@build-pred G2c4f@build-apply G2c51@expand-case-lambda) (begin (set! G2c4b@build-error (lambda (G2c80@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c4d@build-pred (lambda (G2c6a@ae G2c6b@n G2c6c@vars) (call-with-values (lambda () ((letrec ((G2c72@f (lambda (G2c74@vars G2c75@count) (if (pair? G2c74@vars) (G2c72@f (cdr G2c74@vars) (+ G2c75@count '1)) (if (null? G2c74@vars) (values G2c75@count '=) (values G2c75@count '>=)))))) G2c72@f) G2c6c@vars '0)) (lambda (G2c78@G2c70 G2c79@G2c71) ((lambda (G2c7c@pred G2c7d@count) (list (list 'primitive G2c7c@pred) G2c6b@n (list 'quote G2c7d@count))) G2c79@G2c71 G2c78@G2c70))))) (set! G2c4f@build-apply (lambda (G2c62@ae G2c63@g G2c64@vars G2c65@exp) (list '(primitive apply) (G2bfb@build-lambda G2c62@ae G2c64@vars G2c65@exp) G2c63@g))) (set! G2c51@expand-case-lambda (lambda (G2c52@ae G2c53@vars G2c54@exp*) ((lambda (G2c58@g G2c59@n) (list 'lambda G2c58@g (G2bff@build-let G2c52@ae (list G2c59@n) (list (list '(primitive length) G2c58@g)) ((letrec ((G2c5c@f (lambda (G2c5e@vars* G2c5f@exp*) (if (null? G2c5e@vars*) (G2c4b@build-error G2c52@ae) (list 'if (G2c4d@build-pred G2c52@ae G2c59@n (car G2c5e@vars*)) (G2c4f@build-apply G2c52@ae G2c58@g (car G2c5e@vars*) (car G2c5f@exp*)) (G2c5c@f (cdr G2c5e@vars*) (cdr G2c5f@exp*))))))) G2c5c@f) G2c45@vars* G2c54@exp*)))) (gensym) (gensym)))) (if (= (length G2c46@exp*) '1) (G2bfb@build-lambda G2c44@ae (car G2c45@vars*) (car G2c46@exp*)) (G2c51@expand-case-lambda G2c44@ae G2c45@vars* G2c46@exp*)))) '#f '#f '#f '#f))) (set! G2bff@build-let (lambda (G2c82@ae G2c83@lhs* G2c84@rhs* G2c85@body) (cons (G2bfb@build-lambda G2c82@ae G2c83@lhs* G2c85@body) G2c84@rhs*))) (set! G2c31@build-sequence (lambda (G2c8a@ae G2c8b@exps) ((letrec ((G2c8e@loop (lambda (G2c90@exps) (if (null? (cdr G2c90@exps)) (car G2c90@exps) (if (equal? (car G2c90@exps) (G2c33@build-void)) (G2c8e@loop (cdr G2c90@exps)) (cons 'begin G2c90@exps)))))) G2c8e@loop) G2c8b@exps))) (set! G2c33@build-void (lambda () '((primitive void)))) (set! G2c35@build-letrec (lambda (G2c92@ae G2c93@vars G2c94@val-exps G2c95@body-exp) (if (null? G2c93@vars) G2c95@body-exp (list 'letrec (map list G2c93@vars G2c94@val-exps) G2c95@body-exp)))) (set! G2c37@build-letrec* (lambda (G2c9a@ae G2c9b@vars G2c9c@val-exps G2c9d@body-exp) (if (null? G2c9b@vars) G2c9d@body-exp (G2bff@build-let G2c9a@ae G2c9b@vars (map (lambda (G2ca2@x) (list 'quote '#f)) G2c9b@vars) (G2c31@build-sequence G2c9a@ae (append (map (lambda (G2ca4@lhs G2ca5@rhs) (list 'set! G2ca4@lhs G2ca5@rhs)) G2c9b@vars G2c9c@val-exps) (list G2c9d@body-exp))))))) (set! G2c39@build-library-letrec* (lambda (G2ca8@ae G2ca9@name G2caa@vars G2cab@locs G2cac@val-exps G2cad@body-exp) (list 'library-letrec* G2ca9@name (map list G2caa@vars G2cab@locs G2cac@val-exps) G2cad@body-exp))) (set! G2c3b@build-receive (lambda (G2cb4@ae G2cb5@vars G2cb6@producer G2cb7@body*) (begin (display '"************** in ") (cons 'receive (cons G2cb5@vars (cons G2cb6@producer G2cb7@body*)))))) (begin (set! G2cc5@G2c3b@build-receive G2c3b@build-receive) (set! G2cc4@G2c39@build-library-letrec* G2c39@build-library-letrec*) (set! G2cc3@G2c37@build-letrec* G2c37@build-letrec*) (set! G2cc2@G2c35@build-letrec G2c35@build-letrec) (set! G2cc1@G2c33@build-void G2c33@build-void) (set! G2cc0@G2c31@build-sequence G2c31@build-sequence) (set! G2cbf@G2bff@build-let G2bff@build-let) (set! G2cbe@G2bfd@build-case-lambda G2bfd@build-case-lambda) (set! G2cbd@G2bfb@build-lambda G2bfb@build-lambda) (set! G2cbc@G2b81@build-global-define G2b81@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cd4@set-cons G2cd6@set-union G2cdb@top-mark* G2cdd@top-marked? G2cdf@gen-lexical G2ce1@gen-global G2ce3@gen-label G2ce5@gen-top-level-label G2ce7@gen-define-label+loc G2ce9@gen-define-label G2cef@G2cea G2cf1@G2cec G2cf3@G2ceb G2cf6@rib? G2cf8@make-rib G2cfa@rib-sym* G2cfc@rib-mark** G2cfe@rib-label* G2d00@rib-sealed/freq G2d02@rib-cache G2d04@set-rib-sym*! G2d06@set-rib-mark**! G2d08@set-rib-label*! G2d0a@set-rib-sealed/freq! G2d0c@set-rib-cache! G2d0e@make-empty-rib G2d10@make-cache-rib G2d12@find-label G2d14@extend-rib! G2d16@extend-rib/nc! G2d18@make-rib-map G2d1a@seal-rib! G2d1c@unseal-rib! G2d1e@make-full-rib G2d24@G2d1f G2d26@G2d21 G2d28@G2d20 G2d2b@stx? G2d2d@make-stx G2d2f@stx-expr G2d31@stx-mark* G2d33@stx-subst* G2d35@stx-ae* G2d37@set-stx-expr! G2d39@set-stx-mark*! G2d3b@set-stx-subst*! G2d3d@set-stx-ae*! G2d3f@rp G2d41@datum->stx G2d43@gen-mark G2d45@anti-mark G2d47@anti-mark? G2d49@join-wraps G2d4b@mkstx G2d4d@add-mark G2d4f@add-subst G2d51@syntax-kind? G2d53@syntax-vector->list G2d55@syntax-pair? G2d57@syntax-vector? G2d59@syntax-null? G2d5b@syntax-list? G2d5d@syntax-car G2d5f@syntax-cdr G2d61@syntax->list G2d63@id? G2d65@id->sym G2d67@same-marks? G2d69@bound-id=? G2d6b@free-id=? G2d6d@valid-bound-ids? G2d6f@distinct-bound-ids? G2d71@bound-id-member? G2d73@self-evaluating? G2d75@strip-annotations G2d77@strip G2d79@stx->datum G2d7b@same-marks*? G2d7d@id->label G2d7f@id->real-label G2d81@label->binding G2d83@make-binding G2d85@binding-type G2d87@binding-value G2d89@raise-unbound-error G2d8b@syntax-type G2d9b@sanitize-binding G2d9d@make-variable-transformer G2d9f@variable-transformer? G2da1@variable-transformer-procedure G2da3@make-eval-transformer G2ee6@parse-define G2ee8@parse-define-syntax G2eea@scheme-stx-hashtable G2eec@scheme-stx G2eee@lexical-var G2ef0@lexical-mutable? G2ef2@set-lexical-mutable! G2ef4@add-lexical G2ef6@add-lexicals G2ef8@letrec-helper G2efa@letrec-transformer G2efc@letrec*-transformer G2efe@fluid-let-syntax-transformer G2f00@type-descriptor-transformer G2f02@record-type-descriptor-transformer G2f04@record-constructor-descriptor-transformer G2f06@when-macro G2f08@unless-macro G2f0a@if-transformer G2f0c@and-transformer G2f0e@or-transformer G2f10@case-macro G2f12@quote-transformer G2f14@case-lambda-transformer G2f16@lambda-transformer G2f18@bless G2f1a@with-syntax-macro G2f1c@invalid-fmls-error G2f1e@let-macro G2f20@let-values-macro G2f22@let*-values-macro G2f24@trace-lambda-macro G2f26@trace-define-macro G2f28@trace-define-syntax-macro G2f2a@trace-let/rec-syntax G2f2c@trace-let-syntax-macro G2f2e@trace-letrec-syntax-macro G2f30@guard-macro G2f32@define-enumeration-macro G2f34@time-macro G2f36@delay-macro G2f38@assert-macro G2f3a@endianness-macro G2f3c@identifier-syntax-macro G2f3e@do-macro G2f40@let*-macro G2f42@or-macro G2f44@and-macro G2f46@cond-macro G2f48@do-include G2f4a@include-macro G2f4c@include-into-macro G2f4e@syntax-rules-macro G2f50@quasiquote-macro G2f52@quasisyntax-macro G2f54@define-struct-macro G2f56@define-record-type-macro G2f58@define-condition-type-macro G2f5a@incorrect-usage-macro G2f5c@parameterize-macro G2f5e@foreign-call-transformer G2f60@convert-pattern G2f62@syntax-dispatch G2f64@ellipsis? G2f66@underscore? G2f68@verify-literals G2f6a@syntax-case-transformer G2f6c@ellipsis-map G2f6e@syntax-transformer G2f70@core-macro-transformer G2f72@file-options-macro G2f74@symbol-macro G2f76@macro-transformer G2f78@local-macro-transformer G2f7a@do-macro-call G2f7c@chi-macro G2f7e@chi-local-macro G2f80@chi-global-macro G2f82@chi-expr* G2f84@chi-application G2f86@chi-expr G2f88@chi-set! G2f8a@verify-formals G2f8c@chi-lambda-clause G2f8e@chi-lambda-clause* G2f90@chi-defun G2f92@chi-rhs G2f94@expand-interaction-rhs*/init* G2f96@chi-rhs* G2f98@find-bound=? G2f9a@find-dups G2f9c@chi-internal G2f9e@parse-module G2fa4@G2f9f G2fa6@G2fa1 G2fa8@G2fa0 G2fab@module-interface? G2fad@make-module-interface G2faf@module-interface-first-mark G2fb1@module-interface-exp-id-vec G2fb3@module-interface-exp-lab-vec G2fb5@set-module-interface-first-mark! G2fb7@set-module-interface-exp-id-vec! G2fb9@set-module-interface-exp-lab-vec! G2fbb@module-interface-exp-id* G2fbd@chi-internal-module G2fbf@chi-body* G2fc1@expand-transformer G2fc3@parse-exports G2fc5@parse-library-name G2fc7@parse-library G2fc9@parse-import-spec* G2fcb@make-top-rib G2fcd@make-collector G2fcf@inv-collector G2fd1@vis-collector G2fd3@imp-collector G2fd5@chi-library-internal G2fd7@chi-interaction-expr G2fd9@library-body-expander G2fdb@core-library-expander G2fdd@parse-top-level-program G2fdf@top-level-expander G2fe5@G2fe0 G2fe7@G2fe2 G2fe9@G2fe1 G2fec@env? G2fee@make-env G2ff0@env-names G2ff2@env-labels G2ff4@env-itc G2ff6@set-env-names! G2ff8@set-env-labels! G2ffa@set-env-itc! G2ffc@rp G3002@G2ffd G3004@G2fff G3006@G2ffe G3009@interaction-env? G300b@make-interaction-env G300d@interaction-env-rib G300f@interaction-env-r G3011@interaction-env-locs G3013@set-interaction-env-rib! G3015@set-interaction-env-r! G3017@set-interaction-env-locs! G3019@rp G301b@interaction-environment-symbols G301d@environment-bindings G301f@parse-binding G3021@environment? G3023@environment-symbols G3025@environment G3027@null-environment G3029@scheme-report-environment G302b@expand G302d@eval G302f@library-expander G3031@boot-library-expand G3033@rev-map-append G3035@build-exports G3037@make-export-subst G3039@make-export-env/macros G303b@generate-temporaries G303d@free-identifier=? G303f@bound-identifier=? G3041@make-source-condition G3043@extract-position-condition G3045@expression-position G3047@assertion-error G3049@syntax-error G304b@syntax-violation* G304d@syntax-violation G304f@identifier? G3051@datum->syntax G3053@syntax->datum G3055@compile-r6rs-top-level G3057@pre-compile-r6rs-top-level G3059@interaction-environment G305b@top-level-context) (begin (set! G2cd4@set-cons (lambda (G305c@x G305d@ls) (if (memq G305c@x G305d@ls) G305d@ls (cons G305c@x G305d@ls)))) (set! G2cd6@set-union (lambda (G3060@ls1 G3061@ls2) (if (null? G3060@ls1) G3061@ls2 (if (memq (car G3060@ls1) G3061@ls2) (G2cd6@set-union (cdr G3060@ls1) G3061@ls2) (cons (car G3060@ls1) (G2cd6@set-union (cdr G3060@ls1) G3061@ls2)))))) (set! G2cdb@top-mark* '(top)) (set! G2cdd@top-marked? (lambda (G3064@m*) (memq 'top G3064@m*))) (set! G2cdf@gen-lexical (lambda (G3066@sym) (if (symbol? G3066@sym) (gensym G3066@sym) (if (G2d2b@stx? G3066@sym) (G2cdf@gen-lexical (G2d65@id->sym G3066@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3066@sym))))) (set! G2ce1@gen-global (lambda (G3068@x) (G2cdf@gen-lexical G3068@x))) (set! G2ce3@gen-label (lambda (G306a@_) (gensym))) (set! G2ce5@gen-top-level-label (lambda (G306c@id G306d@rib) ((lambda (G3071@find) (begin (set! G3071@find (lambda (G307c@sym G307d@mark* G307e@sym* G307f@mark** G3080@label*) (and (pair? G307e@sym*) (if (and (eq? G307c@sym (car G307e@sym*)) (G2d67@same-marks? G307d@mark* (car G307f@mark**))) (car G3080@label*) (G3071@find G307c@sym G307d@mark* (cdr G307e@sym*) (cdr G307f@mark**) (cdr G3080@label*)))))) ((lambda (G3072@sym G3073@mark*) ((lambda (G3076@sym*) ((lambda (G3078@t) (if G3078@t ((lambda (G307a@label) (if (G2b79@G2a1f@imported-label->binding G307a@label) (gensym) G307a@label)) G3078@t) (gensym))) (and (memq G3072@sym (G2cfa@rib-sym* G306d@rib)) (G3071@find G3072@sym G3073@mark* G3076@sym* (G2cfc@rib-mark** G306d@rib) (G2cfe@rib-label* G306d@rib))))) (G2cfa@rib-sym* G306d@rib))) (G2d65@id->sym G306c@id) (G2d31@stx-mark* G306c@id)))) '#f))) (set! G2ce7@gen-define-label+loc (lambda (G3086@id G3087@rib) ((lambda (G308a@t) (if G308a@t ((lambda (G308c@env) ((lambda (G308e@label G308f@locs) (values G308e@label ((lambda (G3092@t) (if G3092@t (cdr G3092@t) ((lambda (G3094@loc) (begin (G3017@set-interaction-env-locs! G308c@env (cons (cons G308e@label G3094@loc) G308f@locs)) G3094@loc)) (G2cdf@gen-lexical G3086@id)))) (assq G308e@label G308f@locs)))) (G2ce5@gen-top-level-label G3086@id G3087@rib) (G3011@interaction-env-locs G308c@env))) G308a@t) (values (gensym) (G2cdf@gen-lexical G3086@id)))) (G305b@top-level-context)))) (set! G2ce9@gen-define-label (lambda (G3096@id G3097@rib) (if (G305b@top-level-context) (G2ce5@gen-top-level-label G3096@id G3097@rib) (gensym)))) (set! G2cef@G2cea (make-record-type-descriptor 'rib '#f 'G2ced '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2cf1@G2cec '#f) (set! G2cf3@G2ceb (make-record-constructor-descriptor G2cef@G2cea '#f G2cf1@G2cec)) (set! G2cf6@rib? (record-predicate G2cef@G2cea)) (set! G2cf8@make-rib (record-constructor G2cf3@G2ceb)) (set! G2cfa@rib-sym* (record-accessor G2cef@G2cea '0)) (set! G2cfc@rib-mark** (record-accessor G2cef@G2cea '1)) (set! G2cfe@rib-label* (record-accessor G2cef@G2cea '2)) (set! G2d00@rib-sealed/freq (record-accessor G2cef@G2cea '3)) (set! G2d02@rib-cache (record-accessor G2cef@G2cea '4)) (set! G2d04@set-rib-sym*! (record-mutator G2cef@G2cea '0)) (set! G2d06@set-rib-mark**! (record-mutator G2cef@G2cea '1)) (set! G2d08@set-rib-label*! (record-mutator G2cef@G2cea '2)) (set! G2d0a@set-rib-sealed/freq! (record-mutator G2cef@G2cea '3)) (set! G2d0c@set-rib-cache! (record-mutator G2cef@G2cea '4)) (set! G2d0e@make-empty-rib (lambda () (G2cf8@make-rib '() '() '() '#f '#f))) (set! G2d10@make-cache-rib (lambda () (G2cf8@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d12@find-label (lambda (G309a@rib G309b@sym G309c@mark*) ((lambda (G30a0@ht) (and G30a0@ht ((lambda (G30a2@cv) ((lambda (G30a4@t) (if G30a4@t (cdr G30a4@t) '#f)) (and G30a2@cv (assp (lambda (G30a6@m) (G2d67@same-marks? G309c@mark* G30a6@m)) G30a2@cv)))) (hashtable-ref G30a0@ht G309b@sym '#f)))) (G2d02@rib-cache G309a@rib)))) (set! G2d14@extend-rib! (lambda (G30a8@rib G30a9@id G30aa@label) ((lambda (G30af@find) (begin (set! G30af@find (lambda (G30c0@sym G30c1@mark* G30c2@sym* G30c3@mark** G30c4@label*) (and (pair? G30c2@sym*) (if (and (eq? G30c0@sym (car G30c2@sym*)) (G2d67@same-marks? G30c1@mark* (car G30c3@mark**))) G30c4@label* (G30af@find G30c0@sym G30c1@mark* (cdr G30c2@sym*) (cdr G30c3@mark**) (cdr G30c4@label*)))))) (begin (if (G2d00@rib-sealed/freq G30a8@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G30a8@rib) (void)) ((lambda (G30b0@sym G30b1@mark*) ((lambda (G30b4@sym*) ((lambda (G30b6@t) (if G30b6@t ((lambda (G30b8@p) (if (not (eq? G30aa@label G30b8@p)) (G304d@syntax-violation '#f '"multiple definitions of identifier" G30a9@id) (void))) G30b6@t) ((lambda (G30ba@t) (if G30ba@t ((lambda (G30bc@p) (if (not (eq? G30aa@label (car G30bc@p))) (if (G305b@top-level-context) (set-car! G30bc@p G30aa@label) (G304d@syntax-violation '#f '"multiple definitions of identifier" G30a9@id)) (void))) G30ba@t) (begin (if (G2d02@rib-cache G30a8@rib) (hashtable-update! (G2d02@rib-cache G30a8@rib) G30b0@sym (lambda (G30be@e) (cons (cons G30b1@mark* G30aa@label) G30be@e)) '()) (void)) (G2d04@set-rib-sym*! G30a8@rib (cons G30b0@sym G30b4@sym*)) (G2d06@set-rib-mark**! G30a8@rib (cons G30b1@mark* (G2cfc@rib-mark** G30a8@rib))) (G2d08@set-rib-label*! G30a8@rib (cons G30aa@label (G2cfe@rib-label* G30a8@rib)))))) (and (memq G30b0@sym (G2cfa@rib-sym* G30a8@rib)) (G30af@find G30b0@sym G30b1@mark* G30b4@sym* (G2cfc@rib-mark** G30a8@rib) (G2cfe@rib-label* G30a8@rib)))))) (G2d12@find-label G30a8@rib G30b0@sym G30b1@mark*))) (G2cfa@rib-sym* G30a8@rib))) (G2d65@id->sym G30a9@id) (G2d31@stx-mark* G30a9@id))))) '#f))) (set! G2d16@extend-rib/nc! (lambda (G30ca@rib G30cb@id G30cc@label) ((lambda (G30d0@sym G30d1@mark*) ((lambda (G30d4@sym*) (begin (if (G2d02@rib-cache G30ca@rib) (hashtable-update! (G2d02@rib-cache G30ca@rib) G30d0@sym (lambda (G30d6@e) (cons (cons G30d1@mark* G30cc@label) G30d6@e)) '()) (void)) (G2d04@set-rib-sym*! G30ca@rib (cons G30d0@sym G30d4@sym*)) (G2d06@set-rib-mark**! G30ca@rib (cons G30d1@mark* (G2cfc@rib-mark** G30ca@rib))) (G2d08@set-rib-label*! G30ca@rib (cons G30cc@label (G2cfe@rib-label* G30ca@rib))))) (G2cfa@rib-sym* G30ca@rib))) (G2d65@id->sym G30cb@id) (G2d31@stx-mark* G30cb@id)))) (set! G2d18@make-rib-map (lambda (G30d8@sym*) ((lambda (G30da@ht) ((letrec ((G30dc@f (lambda (G30de@i G30df@sym*) (if (null? G30df@sym*) G30da@ht (begin (hashtable-update! G30da@ht (car G30df@sym*) (lambda (G30e2@x) (cons G30de@i G30e2@x)) '()) (G30dc@f (+ G30de@i '1) (cdr G30df@sym*))))))) G30dc@f) '0 G30d8@sym*)) (make-eq-hashtable)))) (set! G2d1a@seal-rib! (lambda (G30e4@rib) ((lambda (G30e6@sym*) (if (not (null? G30e6@sym*)) (begin (G2d04@set-rib-sym*! G30e4@rib (list->vector G30e6@sym*)) (G2d06@set-rib-mark**! G30e4@rib (list->vector (G2cfc@rib-mark** G30e4@rib))) (G2d08@set-rib-label*! G30e4@rib (list->vector (G2cfe@rib-label* G30e4@rib))) (G2d0a@set-rib-sealed/freq! G30e4@rib (G2d18@make-rib-map G30e6@sym*))) (void))) (G2cfa@rib-sym* G30e4@rib)))) (set! G2d1c@unseal-rib! (lambda (G30e8@rib) (if (G2d00@rib-sealed/freq G30e8@rib) (begin (G2d0a@set-rib-sealed/freq! G30e8@rib '#f) (G2d04@set-rib-sym*! G30e8@rib (vector->list (G2cfa@rib-sym* G30e8@rib))) (G2d06@set-rib-mark**! G30e8@rib (vector->list (G2cfc@rib-mark** G30e8@rib))) (G2d08@set-rib-label*! G30e8@rib (vector->list (G2cfe@rib-label* G30e8@rib)))) (void)))) (set! G2d1e@make-full-rib (lambda (G30ea@id* G30eb@label*) ((lambda (G30ee@r) (begin (G2d1a@seal-rib! G30ee@r) G30ee@r)) (G2cf8@make-rib (map G2d65@id->sym G30ea@id*) (map G2d31@stx-mark* G30ea@id*) G30eb@label* '#f '#f)))) (set! G2d24@G2d1f (make-record-type-descriptor 'stx '#f 'G2d22 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d26@G2d21 '#f) (set! G2d28@G2d20 (make-record-constructor-descriptor G2d24@G2d1f '#f G2d26@G2d21)) (set! G2d2b@stx? (record-predicate G2d24@G2d1f)) (set! G2d2d@make-stx (record-constructor G2d28@G2d20)) (set! G2d2f@stx-expr (record-accessor G2d24@G2d1f '0)) (set! G2d31@stx-mark* (record-accessor G2d24@G2d1f '1)) (set! G2d33@stx-subst* (record-accessor G2d24@G2d1f '2)) (set! G2d35@stx-ae* (record-accessor G2d24@G2d1f '3)) (set! G2d37@set-stx-expr! (record-mutator G2d24@G2d1f '0)) (set! G2d39@set-stx-mark*! (record-mutator G2d24@G2d1f '1)) (set! G2d3b@set-stx-subst*! (record-mutator G2d24@G2d1f '2)) (set! G2d3d@set-stx-ae*! (record-mutator G2d24@G2d1f '3)) (set! G2d3f@rp (G28fc@G282f@make-record-printer 'stx (lambda (G30f0@x G30f1@p G30f2@wr) (begin (display '"#<syntax " G30f1@p) (write (G2d79@stx->datum G30f0@x) G30f1@p) ((lambda (G30f6@expr) (if (G28f4@G281f@annotation? G30f6@expr) ((lambda (G30f8@src) (if (pair? G30f8@src) (begin (display '" [" G30f1@p) (display (cdr G30f8@src) G30f1@p) (display '" of " G30f1@p) (display (car G30f8@src) G30f1@p) (display '"]" G30f1@p)) (void))) (G28f5@G2821@annotation-source G30f6@expr)) (void))) (G2d2f@stx-expr G30f0@x)) (display '">" G30f1@p))))) (set! G2d41@datum->stx (lambda (G30fa@id G30fb@datum) (G2d2d@make-stx G30fb@datum (G2d31@stx-mark* G30fa@id) (G2d33@stx-subst* G30fa@id) (G2d35@stx-ae* G30fa@id)))) (set! G2d43@gen-mark (lambda () (string '#\m))) (set! G2d45@anti-mark '#f) (set! G2d47@anti-mark? not) (set! G2d49@join-wraps (lambda (G30fe@m1* G30ff@s1* G3100@ae1* G3101@e) ((lambda (G3107@cancel) (begin (set! G3107@cancel (lambda (G310e@ls1 G310f@ls2) ((letrec ((G3112@f (lambda (G3114@x G3115@ls1) (if (null? G3115@ls1) (cdr G310f@ls2) (cons G3114@x (G3112@f (car G3115@ls1) (cdr G3115@ls1))))))) G3112@f) (car G310e@ls1) (cdr G310e@ls1)))) ((lambda (G3108@m2* G3109@s2* G310a@ae2*) (if (and (not (null? G30fe@m1*)) (not (null? G3108@m2*)) (G2d47@anti-mark? (car G3108@m2*))) (values (G3107@cancel G30fe@m1* G3108@m2*) (G3107@cancel G30ff@s1* G3109@s2*) (G3107@cancel G3100@ae1* G310a@ae2*)) (values (append G30fe@m1* G3108@m2*) (append G30ff@s1* G3109@s2*) (append G3100@ae1* G310a@ae2*)))) (G2d31@stx-mark* G3101@e) (G2d33@stx-subst* G3101@e) (G2d35@stx-ae* G3101@e)))) '#f))) (set! G2d4b@mkstx (lambda (G3118@e G3119@m* G311a@s* G311b@ae*) (if (and (G2d2b@stx? G3118@e) (not (G2cdd@top-marked? G3119@m*))) (call-with-values (lambda () (G2d49@join-wraps G3119@m* G311a@s* G311b@ae* G3118@e)) (lambda (G3123@G3120 G3124@G3121 G3125@G3122) ((lambda (G3129@ae* G312a@s* G312b@m*) (G2d2d@make-stx (G2d2f@stx-expr G3118@e) G312b@m* G312a@s* G3129@ae*)) G3125@G3122 G3124@G3121 G3123@G3120))) (G2d2d@make-stx G3118@e G3119@m* G311a@s* G311b@ae*)))) (set! G2d4d@add-mark (lambda (G312f@m G3130@e G3131@ae) (G2d4b@mkstx G3130@e (list G312f@m) '(shift) (list G3131@ae)))) (set! G2d4f@add-subst (lambda (G3135@subst G3136@e) (G2d4b@mkstx G3136@e '() (list G3135@subst) '()))) (set! G2d51@syntax-kind? (lambda (G3139@x G313a@p?) (if (G2d2b@stx? G3139@x) (G2d51@syntax-kind? (G2d2f@stx-expr G3139@x) G313a@p?) (if (G28f4@G281f@annotation? G3139@x) (G2d51@syntax-kind? (G28f6@G2823@annotation-expression G3139@x) G313a@p?) (G313a@p? G3139@x))))) (set! G2d53@syntax-vector->list (lambda (G313d@x) (if (G2d2b@stx? G313d@x) ((lambda (G313f@ls G3140@m* G3141@s* G3142@ae*) (map (lambda (G3147@x) (G2d4b@mkstx G3147@x G3140@m* G3141@s* G3142@ae*)) G313f@ls)) (G2d53@syntax-vector->list (G2d2f@stx-expr G313d@x)) (G2d31@stx-mark* G313d@x) (G2d33@stx-subst* G313d@x) (G2d35@stx-ae* G313d@x)) (if (G28f4@G281f@annotation? G313d@x) (G2d53@syntax-vector->list (G28f6@G2823@annotation-expression G313d@x)) (if (vector? G313d@x) (vector->list G313d@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G313d@x)))))) (set! G2d55@syntax-pair? (lambda (G3149@x) (G2d51@syntax-kind? G3149@x pair?))) (set! G2d57@syntax-vector? (lambda (G314b@x) (G2d51@syntax-kind? G314b@x vector?))) (set! G2d59@syntax-null? (lambda (G314d@x) (G2d51@syntax-kind? G314d@x null?))) (set! G2d5b@syntax-list? (lambda (G314f@x) (or (G2d59@syntax-null? G314f@x) (and (G2d55@syntax-pair? G314f@x) (G2d5b@syntax-list? (G2d5f@syntax-cdr G314f@x)))))) (set! G2d5d@syntax-car (lambda (G3151@x) (if (G2d2b@stx? G3151@x) (G2d4b@mkstx (G2d5d@syntax-car (G2d2f@stx-expr G3151@x)) (G2d31@stx-mark* G3151@x) (G2d33@stx-subst* G3151@x) (G2d35@stx-ae* G3151@x)) (if (G28f4@G281f@annotation? G3151@x) (G2d5d@syntax-car (G28f6@G2823@annotation-expression G3151@x)) (if (pair? G3151@x) (car G3151@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3151@x)))))) (set! G2d5f@syntax-cdr (lambda (G3153@x) (if (G2d2b@stx? G3153@x) (G2d4b@mkstx (G2d5f@syntax-cdr (G2d2f@stx-expr G3153@x)) (G2d31@stx-mark* G3153@x) (G2d33@stx-subst* G3153@x) (G2d35@stx-ae* G3153@x)) (if (G28f4@G281f@annotation? G3153@x) (G2d5f@syntax-cdr (G28f6@G2823@annotation-expression G3153@x)) (if (pair? G3153@x) (cdr G3153@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3153@x)))))) (set! G2d61@syntax->list (lambda (G3155@x) (if (G2d55@syntax-pair? G3155@x) (cons (G2d5d@syntax-car G3155@x) (G2d61@syntax->list (G2d5f@syntax-cdr G3155@x))) (if (G2d59@syntax-null? G3155@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3155@x))))) (set! G2d63@id? (lambda (G3157@x) (and (G2d2b@stx? G3157@x) ((lambda (G3159@expr) (symbol? (if (G28f4@G281f@annotation? G3159@expr) (G28f3@G281d@annotation-stripped G3159@expr) G3159@expr))) (G2d2f@stx-expr G3157@x))))) (set! G2d65@id->sym (lambda (G315b@x) (begin (if (not (G2d2b@stx? G315b@x)) (error 'id->sym '"BUG in ikarus: not an id" G315b@x) (void)) ((lambda (G315d@expr) ((lambda (G315f@sym) (if (symbol? G315f@sym) G315f@sym (error 'id->sym '"BUG in ikarus: not an id" G315b@x))) (if (G28f4@G281f@annotation? G315d@expr) (G28f3@G281d@annotation-stripped G315d@expr) G315d@expr))) (G2d2f@stx-expr G315b@x))))) (set! G2d67@same-marks? (lambda (G3161@x G3162@y) (or (and (null? G3161@x) (null? G3162@y)) (and (pair? G3161@x) (pair? G3162@y) (eq? (car G3161@x) (car G3162@y)) (G2d67@same-marks? (cdr G3161@x) (cdr G3162@y)))))) (set! G2d69@bound-id=? (lambda (G3165@x G3166@y) (and (eq? (G2d65@id->sym G3165@x) (G2d65@id->sym G3166@y)) (G2d67@same-marks? (G2d31@stx-mark* G3165@x) (G2d31@stx-mark* G3166@y))))) (set! G2d6b@free-id=? (lambda (G3169@i G316a@j) ((lambda (G316d@t0 G316e@t1) (if (or G316d@t0 G316e@t1) (eq? G316d@t0 G316e@t1) (eq? (G2d65@id->sym G3169@i) (G2d65@id->sym G316a@j)))) (G2d7f@id->real-label G3169@i) (G2d7f@id->real-label G316a@j)))) (set! G2d6d@valid-bound-ids? (lambda (G3171@id*) (and (for-all G2d63@id? G3171@id*) (G2d6f@distinct-bound-ids? G3171@id*)))) (set! G2d6f@distinct-bound-ids? (lambda (G3173@id*) (or (null? G3173@id*) (and (not (G2d71@bound-id-member? (car G3173@id*) (cdr G3173@id*))) (G2d6f@distinct-bound-ids? (cdr G3173@id*)))))) (set! G2d71@bound-id-member? (lambda (G3175@id G3176@id*) (and (pair? G3176@id*) (or (G2d69@bound-id=? G3175@id (car G3176@id*)) (G2d71@bound-id-member? G3175@id (cdr G3176@id*)))))) (set! G2d73@self-evaluating? (lambda (G3179@x) (or (number? G3179@x) (string? G3179@x) (char? G3179@x) (boolean? G3179@x) (regexp? G3179@x) (bytevector? G3179@x)))) (set! G2d75@strip-annotations (lambda (G317b@x) (if (pair? G317b@x) (cons (G2d75@strip-annotations (car G317b@x)) (G2d75@strip-annotations (cdr G317b@x))) (if (vector? G317b@x) (vector-map G2d75@strip-annotations G317b@x) (if (G28f4@G281f@annotation? G317b@x) (G28f3@G281d@annotation-stripped G317b@x) G317b@x))))) (set! G2d77@strip (lambda (G317d@x G317e@m*) (if (G2cdd@top-marked? G317e@m*) (if (or (G28f4@G281f@annotation? G317d@x) (and (pair? G317d@x) (G28f4@G281f@annotation? (car G317d@x))) (and (vector? G317d@x) (> (vector-length G317d@x) '0) (G28f4@G281f@annotation? (vector-ref G317d@x '0)))) (G2d75@strip-annotations G317d@x) G317d@x) ((letrec ((G3181@f (lambda (G3183@x) (if (G2d2b@stx? G3183@x) (G2d77@strip (G2d2f@stx-expr G3183@x) (G2d31@stx-mark* G3183@x)) (if (G28f4@G281f@annotation? G3183@x) (G28f3@G281d@annotation-stripped G3183@x) (if (pair? G3183@x) ((lambda (G3185@a G3186@d) (if (and (eq? G3185@a (car G3183@x)) (eq? G3186@d (cdr G3183@x))) G3183@x (cons G3185@a G3186@d))) (G3181@f (car G3183@x)) (G3181@f (cdr G3183@x))) (if (vector? G3183@x) ((lambda (G3189@old) ((lambda (G318b@new) (if (for-all eq? G3189@old G318b@new) G3183@x (list->vector G318b@new))) (map G3181@f G3189@old))) (vector->list G3183@x)) G3183@x))))))) G3181@f) G317d@x)))) (set! G2d79@stx->datum (lambda (G318d@x) (G2d77@strip G318d@x '()))) (set! G2d7b@same-marks*? (lambda (G318f@mark* G3190@mark** G3191@si) (if (null? G3191@si) '#f (if (G2d67@same-marks? G318f@mark* (vector-ref G3190@mark** (car G3191@si))) (car G3191@si) (G2d7b@same-marks*? G318f@mark* G3190@mark** (cdr G3191@si)))))) (set! G2d7d@id->label (lambda (G3195@id) (or (G2d7f@id->real-label G3195@id) ((lambda (G3197@t) (if G3197@t ((lambda (G3199@env) ((lambda (G319b@rib) (call-with-values (lambda () (G2ce7@gen-define-label+loc G3195@id G319b@rib)) (lambda (G319f@G319d G31a0@G319e) ((lambda (G31a3@loc_ G31a4@lab) (begin (G2d14@extend-rib! G319b@rib G3195@id G31a4@lab) G31a4@lab)) G31a0@G319e G319f@G319d)))) (G300d@interaction-env-rib G3199@env))) G3197@t) '#f)) (G305b@top-level-context))))) (set! G2d7f@id->real-label (lambda (G31a7@id) ((lambda (G31a9@sym) ((letrec ((G31ab@search (lambda (G31ad@subst* G31ae@mark*) (if (null? G31ad@subst*) '#f (if (eq? (car G31ad@subst*) 'shift) (G31ab@search (cdr G31ad@subst*) (cdr G31ae@mark*)) ((lambda (G31b1@rib) ((lambda (G31b3@t) (if G31b3@t ((lambda (G31b5@ht) ((lambda (G31b7@si) ((lambda (G31b9@i) (if G31b9@i (vector-ref (G2cfe@rib-label* G31b1@rib) G31b9@i) (G31ab@search (cdr G31ad@subst*) G31ae@mark*))) (and G31b7@si (G2d7b@same-marks*? G31ae@mark* (G2cfc@rib-mark** G31b1@rib) (reverse G31b7@si))))) (hashtable-ref G31b5@ht G31a9@sym '#f))) G31b3@t) (or (G2d12@find-label G31b1@rib G31a9@sym G31ae@mark*) ((letrec ((G31bb@f (lambda (G31bd@sym* G31be@mark** G31bf@label*) (if (null? G31bd@sym*) (G31ab@search (cdr G31ad@subst*) G31ae@mark*) (if (and (eq? (car G31bd@sym*) G31a9@sym) (G2d67@same-marks? (car G31be@mark**) G31ae@mark*)) (car G31bf@label*) (G31bb@f (cdr G31bd@sym*) (cdr G31be@mark**) (cdr G31bf@label*))))))) G31bb@f) (G2cfa@rib-sym* G31b1@rib) (G2cfc@rib-mark** G31b1@rib) (G2cfe@rib-label* G31b1@rib))))) (G2d00@rib-sealed/freq G31b1@rib))) (car G31ad@subst*))))))) G31ab@search) (G2d33@stx-subst* G31a7@id) (G2d31@stx-mark* G31a7@id))) (G2d65@id->sym G31a7@id)))) (set! G2d81@label->binding (lambda (G31c3@x G31c4@r) ((lambda (G31c7@t) (if G31c7@t ((lambda (G31c9@b) (if (and (pair? G31c9@b) (eq? (car G31c9@b) '$core-rtd)) (cons '$rtd (map G2f18@bless (cdr G31c9@b))) (if (and (pair? G31c9@b) (eq? (car G31c9@b) 'global-rtd)) ((lambda (G31cb@lib G31cc@loc) (cons '$rtd (symbol-value G31cc@loc))) (cadr G31c9@b) (cddr G31c9@b)) G31c9@b))) G31c7@t) ((lambda (G31cf@t) (if G31cf@t (cdr G31cf@t) ((lambda (G31d1@t) (if G31d1@t ((lambda (G31d3@env) ((lambda (G31d5@t) (if G31d5@t ((lambda (G31d7@p) (cons* 'lexical (cdr G31d7@p) '#f)) G31d5@t) '(displaced-lexical . #f))) (assq G31c3@x (G3011@interaction-env-locs G31d3@env)))) G31d1@t) '(displaced-lexical . #f))) (G305b@top-level-context)))) (assq G31c3@x G31c4@r)))) (G2b79@G2a1f@imported-label->binding G31c3@x)))) (set! G2d83@make-binding cons) (set! G2d85@binding-type car) (set! G2d87@binding-value cdr) (set! G2d89@raise-unbound-error (lambda (G31d9@id) (G304b@syntax-violation* '#f '"unbound identifier" G31d9@id (G4c85@G4acf@make-undefined-violation)))) (set! G2d8b@syntax-type (lambda (G31db@e G31dc@r) (if (G2d63@id? G31db@e) ((lambda (G31df@id) ((lambda (G31e1@label) ((lambda (G31e3@b) ((lambda (G31e5@type) ((lambda () (begin (if (not G31e1@label) (G2d89@raise-unbound-error G31df@id) (void)) ((lambda (G31e7@t) (if (memv G31e7@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31e5@type (G2d87@binding-value G31e3@b) G31df@id) (values 'other '#f '#f))) G31e5@type))))) (G2d85@binding-type G31e3@b))) (G2d81@label->binding G31e1@label G31dc@r))) (G2d7d@id->label G31df@id))) G31db@e) (if (G2d55@syntax-pair? G31db@e) ((lambda (G31e9@id) (if (G2d63@id? G31e9@id) ((lambda (G31eb@label) ((lambda (G31ed@b) ((lambda (G31ef@type) ((lambda () (begin (if (not G31eb@label) (G2d89@raise-unbound-error G31e9@id) (void)) ((lambda (G31f1@t) (if (memv G31f1@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31ef@type (G2d87@binding-value G31ed@b) G31e9@id) (values 'call '#f '#f))) G31ef@type))))) (G2d85@binding-type G31ed@b))) (G2d81@label->binding G31eb@label G31dc@r))) (G2d7d@id->label G31e9@id)) (values 'call '#f '#f))) (G2d5d@syntax-car G31db@e)) ((lambda (G31f3@d) (if (G2d73@self-evaluating? G31f3@d) (values 'constant G31f3@d '#f) (values 'other '#f '#f))) (G2d79@stx->datum G31db@e)))))) (set! G2d9b@sanitize-binding (lambda (G31f5@x G31f6@src) (if (procedure? G31f5@x) (cons* 'local-macro G31f5@x G31f6@src) (if (and (pair? G31f5@x) (eq? (car G31f5@x) 'macro!) (procedure? (cdr G31f5@x))) (cons* 'local-macro! (cdr G31f5@x) G31f6@src) (if (and (pair? G31f5@x) (eq? (car G31f5@x) '$rtd)) G31f5@x (assertion-violation 'expand '"invalid transformer" G31f5@x)))))) (set! G2d9d@make-variable-transformer (lambda (G31f9@x) (if (procedure? G31f9@x) (cons 'macro! G31f9@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31f9@x)))) (set! G2d9f@variable-transformer? (lambda (G31fb@x) (and (pair? G31fb@x) (eq? (car G31fb@x) 'macro!) (procedure? (cdr G31fb@x))))) (set! G2da1@variable-transformer-procedure (lambda (G31fd@x) (if (G2d9f@variable-transformer? G31fd@x) (cdr G31fd@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31fd@x)))) (set! G2da3@make-eval-transformer (lambda (G31ff@x) (G2d9b@sanitize-binding (eval-core (G2953@G290b@expanded->core G31ff@x)) G31ff@x))) (set! G2ee6@parse-define (lambda (G3201@x) ((lambda (G3203@t) ((lambda (G3205@ls/false) (if (and G3205@ls/false (apply (lambda (G3207@id G3208@fmls G3209@b G320a@b*) (G2d63@id? G3207@id)) G3205@ls/false)) (apply (lambda (G320f@id G3210@fmls G3211@b G3212@b*) (begin (G2f8a@verify-formals G3210@fmls G3201@x) (values G320f@id (cons 'defun (cons G3210@fmls (cons G3211@b G3212@b*)))))) G3205@ls/false) ((lambda (G3217@t) ((lambda (G3219@ls/false) (if (and G3219@ls/false (apply (lambda (G321b@id G321c@val) (G2d63@id? G321b@id)) G3219@ls/false)) (apply (lambda (G321f@id G3220@val) (values G321f@id (cons 'expr G3220@val))) G3219@ls/false) ((lambda (G3223@t) ((lambda (G3225@ls/false) (if (and G3225@ls/false (apply (lambda (G3227@id) (G2d63@id? G3227@id)) G3225@ls/false)) (apply (lambda (G3229@id) (values G3229@id (cons 'expr (G2f18@bless '(void))))) G3225@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3223@t))) (G2f62@syntax-dispatch G3223@t '(_ any)))) G3217@t))) (G2f62@syntax-dispatch G3217@t '(_ any any)))) G3203@t))) (G2f62@syntax-dispatch G3203@t '(_ (any . any) any . each-any)))) G3201@x))) (set! G2ee8@parse-define-syntax (lambda (G322b@x) ((lambda (G322d@t) ((lambda (G322f@ls/false) (if (and G322f@ls/false (apply (lambda (G3231@id G3232@val) (G2d63@id? G3231@id)) G322f@ls/false)) (apply (lambda (G3235@id G3236@val) (values G3235@id G3236@val)) G322f@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G322d@t))) (G2f62@syntax-dispatch G322d@t '(_ any any)))) G322b@x))) (set! G2eea@scheme-stx-hashtable (make-eq-hashtable)) (set! G2eec@scheme-stx (lambda (G3239@sym) (or (hashtable-ref G2eea@scheme-stx-hashtable G3239@sym '#f) ((lambda (G323b@subst) ((lambda (G323d@stx) ((lambda (G323f@stx) ((lambda () (begin (hashtable-set! G2eea@scheme-stx-hashtable G3239@sym G323f@stx) G323f@stx)))) ((lambda (G3241@t) (if G3241@t ((lambda (G3243@x) ((lambda (G3245@name G3246@label) (G2d4f@add-subst (G2cf8@make-rib (list G3245@name) (list G2cdb@top-mark*) (list G3246@label) '#f '#f) G323d@stx)) (car G3243@x) (cdr G3243@x))) G3241@t) G323d@stx)) (assq G3239@sym G323b@subst)))) (G2d2d@make-stx G3239@sym G2cdb@top-mark* '() '()))) (G2b4f@G29cb@library-subst (G2b73@G2a13@find-library-by-name '(psyntax system $all))))))) (set! G2eee@lexical-var car) (set! G2ef0@lexical-mutable? cdr) (set! G2ef2@set-lexical-mutable! set-cdr!) (set! G2ef4@add-lexical (lambda (G3249@lab G324a@lex G324b@r) (cons (cons* G3249@lab 'lexical G324a@lex '#f) G324b@r))) (set! G2ef6@add-lexicals (lambda (G324f@lab* G3250@lex* G3251@r) (if (null? G324f@lab*) G3251@r (G2ef6@add-lexicals (cdr G324f@lab*) (cdr G3250@lex*) (G2ef4@add-lexical (car G324f@lab*) (car G3250@lex*) G3251@r))))) (set! G2ef8@letrec-helper (lambda (G3255@e G3256@r G3257@mr G3258@build) ((lambda (G325d@t) ((lambda (G325f@ls/false) (if G325f@ls/false (apply (lambda (G3261@lhs* G3262@rhs* G3263@b G3264@b*) (if (not (G2d6d@valid-bound-ids? G3261@lhs*)) (G2f1c@invalid-fmls-error G3255@e G3261@lhs*) ((lambda (G3269@lex* G326a@lab*) ((lambda (G326d@rib G326e@r) ((lambda (G3271@body G3272@rhs*) (G3258@build '#f G3269@lex* G3272@rhs* G3271@body)) (G2f9c@chi-internal (G2d4f@add-subst G326d@rib (cons G3263@b G3264@b*)) G326e@r G3257@mr) (G2f82@chi-expr* (map (lambda (G3275@x) (G2d4f@add-subst G326d@rib G3275@x)) G3262@rhs*) G326e@r G3257@mr))) (G2d1e@make-full-rib G3261@lhs* G326a@lab*) (G2ef6@add-lexicals G326a@lab* G3269@lex* G3256@r))) (map G2cdf@gen-lexical G3261@lhs*) (map G2ce3@gen-label G3261@lhs*)))) G325f@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G325d@t))) (G2f62@syntax-dispatch G325d@t '(_ #(each (any any)) any . each-any)))) G3255@e))) (set! G2efa@letrec-transformer (lambda (G3277@e G3278@r G3279@mr) (G2ef8@letrec-helper G3277@e G3278@r G3279@mr G2cc2@G2c35@build-letrec))) (set! G2efc@letrec*-transformer (lambda (G327d@e G327e@r G327f@mr) (G2ef8@letrec-helper G327d@e G327e@r G327f@mr G2cc3@G2c37@build-letrec*))) (set! G2efe@fluid-let-syntax-transformer (lambda (G3283@e G3284@r G3285@mr) ((lambda (G328a@lookup) (begin (set! G328a@lookup (lambda (G329d@x) (or (G2d7d@id->label G329d@x) (G304d@syntax-violation '#f '"unbound identifier" G3283@e G329d@x)))) ((lambda (G328b@t) ((lambda (G328d@ls/false) (if G328d@ls/false (apply (lambda (G328f@lhs* G3290@rhs* G3291@b G3292@b*) (if (not (G2d6d@valid-bound-ids? G328f@lhs*)) (G2f1c@invalid-fmls-error G3283@e G328f@lhs*) ((lambda (G3297@lab* G3298@rhs*) (G2f9c@chi-internal (cons G3291@b G3292@b*) (append (map cons G3297@lab* G3298@rhs*) G3284@r) (append (map cons G3297@lab* G3298@rhs*) G3285@mr))) (map G328a@lookup G328f@lhs*) (map (lambda (G329b@x) (G2da3@make-eval-transformer (G2fc1@expand-transformer G329b@x G3285@mr))) G3290@rhs*)))) G328d@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G328b@t))) (G2f62@syntax-dispatch G328b@t '(_ #(each (any any)) any . each-any)))) G3283@e))) '#f))) (set! G2f00@type-descriptor-transformer (lambda (G329f@e G32a0@r G32a1@mr) ((lambda (G32a5@t) ((lambda (G32a7@ls/false) (if (and G32a7@ls/false (apply (lambda (G32a9@id) (G2d63@id? G32a9@id)) G32a7@ls/false)) (apply (lambda (G32ab@id) ((lambda (G32ad@lab) ((lambda (G32af@b) ((lambda (G32b1@type) ((lambda () (begin (if (not G32ad@lab) (G2d89@raise-unbound-error G32ab@id) (void)) (if (not (and (eq? G32b1@type '$rtd) (not (list? (G2d87@binding-value G32af@b))))) (G304d@syntax-violation '#f '"not a record type" G329f@e) (void)) (list 'quote (G2d87@binding-value G32af@b)))))) (G2d85@binding-type G32af@b))) (G2d81@label->binding G32ad@lab G32a0@r))) (G2d7d@id->label G32ab@id))) G32a7@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G32a5@t))) (G2f62@syntax-dispatch G32a5@t '(_ any)))) G329f@e))) (set! G2f02@record-type-descriptor-transformer (lambda (G32b3@e G32b4@r G32b5@mr) ((lambda (G32b9@t) ((lambda (G32bb@ls/false) (if (and G32bb@ls/false (apply (lambda (G32bd@id) (G2d63@id? G32bd@id)) G32bb@ls/false)) (apply (lambda (G32bf@id) ((lambda (G32c1@lab) ((lambda (G32c3@b) ((lambda (G32c5@type) ((lambda () (begin (if (not G32c1@lab) (G2d89@raise-unbound-error G32bf@id) (void)) (if (not (and (eq? G32c5@type '$rtd) (list? (G2d87@binding-value G32c3@b)))) (G304d@syntax-violation '#f '"not a record type" G32b3@e) (void)) (G2f86@chi-expr (car (G2d87@binding-value G32c3@b)) G32b4@r G32b5@mr))))) (G2d85@binding-type G32c3@b))) (G2d81@label->binding G32c1@lab G32b4@r))) (G2d7d@id->label G32bf@id))) G32bb@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G32b9@t))) (G2f62@syntax-dispatch G32b9@t '(_ any)))) G32b3@e))) (set! G2f04@record-constructor-descriptor-transformer (lambda (G32c7@e G32c8@r G32c9@mr) ((lambda (G32cd@t) ((lambda (G32cf@ls/false) (if (and G32cf@ls/false (apply (lambda (G32d1@id) (G2d63@id? G32d1@id)) G32cf@ls/false)) (apply (lambda (G32d3@id) ((lambda (G32d5@lab) ((lambda (G32d7@b) ((lambda (G32d9@type) ((lambda () (begin (if (not G32d5@lab) (G2d89@raise-unbound-error G32d3@id) (void)) (if (not (and (eq? G32d9@type '$rtd) (list? (G2d87@binding-value G32d7@b)))) (G304d@syntax-violation '#f '"invalid type" G32c7@e) (void)) (G2f86@chi-expr (cadr (G2d87@binding-value G32d7@b)) G32c8@r G32c9@mr))))) (G2d85@binding-type G32d7@b))) (G2d81@label->binding G32d5@lab G32c8@r))) (G2d7d@id->label G32d3@id))) G32cf@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G32cd@t))) (G2f62@syntax-dispatch G32cd@t '(_ any)))) G32c7@e))) (set! G2f06@when-macro (lambda (G32db@e) ((lambda (G32dd@t) ((lambda (G32df@ls/false) (if G32df@ls/false (apply (lambda (G32e1@test G32e2@e G32e3@e*) (G2f18@bless (list 'if G32e1@test (cons 'begin (cons G32e2@e G32e3@e*))))) G32df@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G32dd@t))) (G2f62@syntax-dispatch G32dd@t '(_ any any . each-any)))) G32db@e))) (set! G2f08@unless-macro (lambda (G32e7@e) ((lambda (G32e9@t) ((lambda (G32eb@ls/false) (if G32eb@ls/false (apply (lambda (G32ed@test G32ee@e G32ef@e*) (G2f18@bless (list 'if (list 'not G32ed@test) (cons 'begin (cons G32ee@e G32ef@e*))))) G32eb@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G32e9@t))) (G2f62@syntax-dispatch G32e9@t '(_ any any . each-any)))) G32e7@e))) (set! G2f0a@if-transformer (lambda (G32f3@e G32f4@r G32f5@mr) ((lambda (G32f9@t) ((lambda (G32fb@ls/false) (if G32fb@ls/false (apply (lambda (G32fd@e0 G32fe@e1 G32ff@e2) (list 'if (G2f86@chi-expr G32fd@e0 G32f4@r G32f5@mr) (G2f86@chi-expr G32fe@e1 G32f4@r G32f5@mr) (G2f86@chi-expr G32ff@e2 G32f4@r G32f5@mr))) G32fb@ls/false) ((lambda (G3303@t) ((lambda (G3305@ls/false) (if G3305@ls/false (apply (lambda (G3307@e0 G3308@e1) (list 'if (G2f86@chi-expr G3307@e0 G32f4@r G32f5@mr) (G2f86@chi-expr G3308@e1 G32f4@r G32f5@mr) (G2cc1@G2c33@build-void))) G3305@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3303@t))) (G2f62@syntax-dispatch G3303@t '(_ any any)))) G32f9@t))) (G2f62@syntax-dispatch G32f9@t '(_ any any any)))) G32f3@e))) (set! G2f0c@and-transformer (lambda (G330b@e G330c@r G330d@mr) ((lambda (G3311@t) ((lambda (G3313@ls/false) (if G3313@ls/false (apply (lambda (G3315@e*) (cons 'and (G2f82@chi-expr* G3315@e* G330c@r G330d@mr))) G3313@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3311@t))) (G2f62@syntax-dispatch G3311@t '(_ . each-any)))) G330b@e))) (set! G2f0e@or-transformer (lambda (G3317@e G3318@r G3319@mr) ((lambda (G331d@t) ((lambda (G331f@ls/false) (if G331f@ls/false (apply (lambda (G3321@e*) (cons 'or (G2f82@chi-expr* G3321@e* G3318@r G3319@mr))) G331f@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G331d@t))) (G2f62@syntax-dispatch G331d@t '(_ . each-any)))) G3317@e))) (set! G2f10@case-macro (lambda (G3323@e) ((lambda (G3326@build-last G3328@build-one) (begin (set! G3326@build-last (lambda (G334d@cls) ((lambda (G334f@t) ((lambda (G3351@ls/false) (if G3351@ls/false (apply (lambda (G3353@e G3354@e*) (cons 'begin (cons G3353@e G3354@e*))) G3351@ls/false) ((lambda (G3357@t) ((lambda (G3359@ls/false) (if G3359@ls/false (apply (lambda () (G3328@build-one G334d@cls '(if #f #f))) G3359@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3357@t))) (G2f62@syntax-dispatch G3357@t '_))) G334f@t))) (G2f62@syntax-dispatch G334f@t '(#(scheme-id else) any . each-any)))) G334d@cls))) (set! G3328@build-one (lambda (G333f@cls G3340@k) ((lambda (G3343@t) ((lambda (G3345@ls/false) (if G3345@ls/false (apply (lambda (G3347@d* G3348@e G3349@e*) (list 'if (list 'memv 't (list 'quote G3347@d*)) (cons 'begin (cons G3348@e G3349@e*)) G3340@k)) G3345@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3343@t))) (G2f62@syntax-dispatch G3343@t '(each-any any . each-any)))) G333f@cls))) ((lambda (G3329@t) ((lambda (G332b@ls/false) (if G332b@ls/false (apply (lambda (G332d@expr) (G2f18@bless (cons 'let (cons (list (list 't G332d@expr)) '((if #f #f)))))) G332b@ls/false) ((lambda (G332f@t) ((lambda (G3331@ls/false) (if G3331@ls/false (apply (lambda (G3333@expr G3334@cls G3335@cls*) (G2f18@bless (list 'let (list (list 't G3333@expr)) ((letrec ((G3339@f (lambda (G333b@cls G333c@cls*) (if (null? G333c@cls*) (G3326@build-last G333b@cls) (G3328@build-one G333b@cls (G3339@f (car G333c@cls*) (cdr G333c@cls*))))))) G3339@f) G3334@cls G3335@cls*)))) G3331@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G332f@t))) (G2f62@syntax-dispatch G332f@t '(_ any any . each-any)))) G3329@t))) (G2f62@syntax-dispatch G3329@t '(_ any)))) G3323@e))) '#f '#f))) (set! G2f12@quote-transformer (lambda (G335b@e G335c@r G335d@mr) ((lambda (G3361@t) ((lambda (G3363@ls/false) (if G3363@ls/false (apply (lambda (G3365@datum) (list 'quote (G2d79@stx->datum G3365@datum))) G3363@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3361@t))) (G2f62@syntax-dispatch G3361@t '(_ any)))) G335b@e))) (set! G2f14@case-lambda-transformer (lambda (G3367@e G3368@r G3369@mr) ((lambda (G336d@t) ((lambda (G336f@ls/false) (if G336f@ls/false (apply (lambda (G3371@fmls* G3372@b* G3373@b**) (call-with-values (lambda () (G2f8e@chi-lambda-clause* G3367@e G3371@fmls* (map cons G3372@b* G3373@b**) G3368@r G3369@mr)) (lambda (G3379@G3377 G337a@G3378) ((lambda (G337d@body* G337e@fmls*) (G2cbe@G2bfd@build-case-lambda '#f G337e@fmls* G337d@body*)) G337a@G3378 G3379@G3377)))) G336f@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G336d@t))) (G2f62@syntax-dispatch G336d@t '(_ . #(each (any any . each-any)))))) G3367@e))) (set! G2f16@lambda-transformer (lambda (G3381@e G3382@r G3383@mr) ((lambda (G3387@t) ((lambda (G3389@ls/false) (if G3389@ls/false (apply (lambda (G338b@fmls G338c@b G338d@b*) (call-with-values (lambda () (G2f8c@chi-lambda-clause G3381@e G338b@fmls (cons G338c@b G338d@b*) G3382@r G3383@mr)) (lambda (G3393@G3391 G3394@G3392) ((lambda (G3397@body G3398@fmls) (G2cbd@G2bfb@build-lambda '#f G3398@fmls G3397@body)) G3394@G3392 G3393@G3391)))) G3389@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3387@t))) (G2f62@syntax-dispatch G3387@t '(_ any any . each-any)))) G3381@e))) (set! G2f18@bless (lambda (G339b@x) (G2d4b@mkstx ((letrec ((G339d@f (lambda (G339f@x) (if (G2d2b@stx? G339f@x) G339f@x (if (pair? G339f@x) (cons (G339d@f (car G339f@x)) (G339d@f (cdr G339f@x))) (if (symbol? G339f@x) (G2eec@scheme-stx G339f@x) (if (vector? G339f@x) (vector-map G339d@f G339f@x) G339f@x))))))) G339d@f) G339b@x) '() '() '()))) (set! G2f1a@with-syntax-macro (lambda (G33a1@e) ((lambda (G33a3@t) ((lambda (G33a5@ls/false) (if G33a5@ls/false (apply (lambda (G33a7@pat* G33a8@expr* G33a9@b G33aa@b*) ((lambda (G33af@idn*) (begin (G2f8a@verify-formals (map car G33af@idn*) G33a1@e) ((lambda (G33b1@t*) (G2f18@bless (list 'let (map list G33b1@t* G33a8@expr*) ((letrec ((G33b3@f (lambda (G33b5@pat* G33b6@t*) (if (null? G33b5@pat*) (cons 'begin (cons '#f (cons G33a9@b G33aa@b*))) (list 'syntax-case (car G33b6@t*) '() (list (car G33b5@pat*) (G33b3@f (cdr G33b5@pat*) (cdr G33b6@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33b5@pat*)) (car G33b6@t*)))))))) G33b3@f) G33a7@pat* G33b1@t*)))) (G303b@generate-temporaries G33a8@expr*)))) ((letrec ((G33b9@f (lambda (G33bb@pat*) (if (null? G33bb@pat*) '() (call-with-values (lambda () (G2f60@convert-pattern (car G33bb@pat*) '())) (lambda (G33bf@G33bd G33c0@G33be) ((lambda (G33c3@idn* G33c4@pat) (append G33c3@idn* (G33b9@f (cdr G33bb@pat*)))) G33c0@G33be G33bf@G33bd))))))) G33b9@f) G33a7@pat*))) G33a5@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G33a3@t))) (G2f62@syntax-dispatch G33a3@t '(_ #(each (any any)) any . each-any)))) G33a1@e))) (set! G2f1c@invalid-fmls-error (lambda (G33c7@stx G33c8@fmls) ((lambda (G33cb@t) ((lambda (G33cd@ls/false) (if G33cd@ls/false (apply (lambda (G33cf@id* G33d0@last) ((letrec ((G33d3@f (lambda (G33d5@id*) (if (null? G33d5@id*) (values) (if (not (G2d63@id? (car G33d5@id*))) (G304d@syntax-violation '#f '"not an identifier" G33c7@stx (car G33d5@id*)) (begin (G33d3@f (cdr G33d5@id*)) (if (G2d71@bound-id-member? (car G33d5@id*) (cdr G33d5@id*)) (G304d@syntax-violation '#f '"duplicate binding" G33c7@stx (car G33d5@id*)) (void)))))))) G33d3@f) (if (G2d63@id? G33d0@last) (cons G33d0@last G33cf@id*) (if (G2d59@syntax-null? G33d0@last) G33cf@id* (G304d@syntax-violation '#f '"not an identifier" G33c7@stx G33d0@last))))) G33cd@ls/false) ((lambda (G33d7@t) ((lambda (G33d9@ls/false) (if G33d9@ls/false (apply (lambda () (G304d@syntax-violation '#f '"malformed binding form" G33c7@stx G33c8@fmls)) G33d9@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G33d7@t))) (G2f62@syntax-dispatch G33d7@t '_))) G33cb@t))) (G2f62@syntax-dispatch G33cb@t '#(each+ any () any)))) G33c8@fmls))) (set! G2f1e@let-macro (lambda (G33db@stx) ((lambda (G33dd@t) ((lambda (G33df@ls/false) (if G33df@ls/false (apply (lambda (G33e1@lhs* G33e2@rhs* G33e3@b G33e4@b*) (if (G2d6d@valid-bound-ids? G33e1@lhs*) (G2f18@bless (cons (cons 'lambda (cons G33e1@lhs* (cons G33e3@b G33e4@b*))) G33e2@rhs*)) (G2f1c@invalid-fmls-error G33db@stx G33e1@lhs*))) G33df@ls/false) ((lambda (G33e9@t) ((lambda (G33eb@ls/false) (if (and G33eb@ls/false (apply (lambda (G33ed@f G33ee@lhs* G33ef@rhs* G33f0@b G33f1@b*) (G2d63@id? G33ed@f)) G33eb@ls/false)) (apply (lambda (G33f7@f G33f8@lhs* G33f9@rhs* G33fa@b G33fb@b*) (if (G2d6d@valid-bound-ids? G33f8@lhs*) (G2f18@bless (cons (list 'letrec (list (list G33f7@f (cons 'lambda (cons G33f8@lhs* (cons G33fa@b G33fb@b*))))) G33f7@f) G33f9@rhs*)) (G2f1c@invalid-fmls-error G33db@stx G33f8@lhs*))) G33eb@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G33e9@t))) (G2f62@syntax-dispatch G33e9@t '(_ any #(each (any any)) any . each-any)))) G33dd@t))) (G2f62@syntax-dispatch G33dd@t '(_ #(each (any any)) any . each-any)))) G33db@stx))) (set! G2f20@let-values-macro (lambda (G3401@stx) ((lambda (G3404@rename G3406@rename*) (begin (set! G3404@rename (lambda (G3466@x G3467@old* G3468@new*) (begin (if (not (G2d63@id? G3466@x)) (G304d@syntax-violation '#f '"not an indentifier" G3401@stx G3466@x) (void)) (if (G2d71@bound-id-member? G3466@x G3467@old*) (G304d@syntax-violation '#f '"duplicate binding" G3401@stx G3466@x) (void)) ((lambda (G346c@y) (values G346c@y (cons G3466@x G3467@old*) (cons G346c@y G3468@new*))) (gensym (G3053@syntax->datum G3466@x)))))) (set! G3406@rename* (lambda (G3454@x* G3455@old* G3456@new*) (if (null? G3454@x*) (values '() G3455@old* G3456@new*) (call-with-values (lambda () (G3404@rename (car G3454@x*) G3455@old* G3456@new*)) (lambda (G345a@x G345b@old* G345c@new*) (call-with-values (lambda () (G3406@rename* (cdr G3454@x*) G345b@old* G345c@new*)) (lambda (G3460@x* G3461@old* G3462@new*) (values (cons G345a@x G3460@x*) G3461@old* G3462@new*)))))))) ((lambda (G3407@t) ((lambda (G3409@ls/false) (if G3409@ls/false (apply (lambda (G340b@b G340c@b*) (cons* (G2f18@bless 'let) '() G340b@b G340c@b*)) G3409@ls/false) ((lambda (G340f@t) ((lambda (G3411@ls/false) (if G3411@ls/false (apply (lambda (G3413@lhs* G3414@rhs* G3415@b G3416@b*) (G2f18@bless ((letrec ((G341b@f (lambda (G341d@lhs* G341e@rhs* G341f@old* G3420@new*) (if (null? G341d@lhs*) (cons 'let (cons (map list G341f@old* G3420@new*) (cons G3415@b G3416@b*))) ((lambda (G3425@t) ((lambda (G3427@ls/false) (if G3427@ls/false (apply (lambda (G3429@x*) (call-with-values (lambda () (G3406@rename* G3429@x* G341f@old* G3420@new*)) (lambda (G342e@G342b G342f@G342c G3430@G342d) ((lambda (G3434@new* G3435@old* G3436@y*) (list 'call-with-values (list 'lambda '() (car G341e@rhs*)) (list 'lambda G3436@y* (G341b@f (cdr G341d@lhs*) (cdr G341e@rhs*) G3435@old* G3434@new*)))) G3430@G342d G342f@G342c G342e@G342b)))) G3427@ls/false) ((lambda (G343a@t) ((lambda (G343c@ls/false) (if G343c@ls/false (apply (lambda (G343e@x* G343f@x) (call-with-values (lambda () (G3404@rename G343f@x G341f@old* G3420@new*)) (lambda (G3442@y G3443@old* G3444@new*) (call-with-values (lambda () (G3406@rename* G343e@x* G3443@old* G3444@new*)) (lambda (G3448@y* G3449@old* G344a@new*) (list 'call-with-values (list 'lambda '() (car G341e@rhs*)) (list 'lambda (append G3448@y* G3442@y) (G341b@f (cdr G341d@lhs*) (cdr G341e@rhs*) G3449@old* G344a@new*)))))))) G343c@ls/false) ((lambda (G344e@t) ((lambda (G3450@ls/false) (if G3450@ls/false (apply (lambda (G3452@others) (G304d@syntax-violation '#f '"malformed bindings" G3401@stx G3452@others)) G3450@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G344e@t))) (G2f62@syntax-dispatch G344e@t 'any))) G343a@t))) (G2f62@syntax-dispatch G343a@t '#(each+ any () any)))) G3425@t))) (G2f62@syntax-dispatch G3425@t 'each-any))) (car G341d@lhs*)))))) G341b@f) G3413@lhs* G3414@rhs* '() '()))) G3411@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G340f@t))) (G2f62@syntax-dispatch G340f@t '(_ #(each (any any)) any . each-any)))) G3407@t))) (G2f62@syntax-dispatch G3407@t '(_ () any . each-any)))) G3401@stx))) '#f '#f))) (set! G2f22@let*-values-macro (lambda (G346e@stx) ((lambda (G3471@check) (begin (set! G3471@check (lambda (G34a0@x*) (if (not (null? G34a0@x*)) ((lambda (G34a2@x) (begin (if (not (G2d63@id? G34a2@x)) (G304d@syntax-violation '#f '"not an identifier" G346e@stx G34a2@x) (void)) (G3471@check (cdr G34a0@x*)) (if (G2d71@bound-id-member? G34a2@x (cdr G34a0@x*)) (G304d@syntax-violation '#f '"duplicate identifier" G346e@stx G34a2@x) (void)))) (car G34a0@x*)) (void)))) ((lambda (G3472@t) ((lambda (G3474@ls/false) (if G3474@ls/false (apply (lambda (G3476@b G3477@b*) (cons* (G2f18@bless 'let) '() G3476@b G3477@b*)) G3474@ls/false) ((lambda (G347a@t) ((lambda (G347c@ls/false) (if G347c@ls/false (apply (lambda (G347e@lhs* G347f@rhs* G3480@b G3481@b*) (G2f18@bless ((letrec ((G3486@f (lambda (G3488@lhs* G3489@rhs*) (if (null? G3488@lhs*) (cons 'begin (cons G3480@b G3481@b*)) ((lambda (G348c@t) ((lambda (G348e@ls/false) (if G348e@ls/false (apply (lambda (G3490@x*) (begin (G3471@check G3490@x*) (list 'call-with-values (list 'lambda '() (car G3489@rhs*)) (list 'lambda G3490@x* (G3486@f (cdr G3488@lhs*) (cdr G3489@rhs*)))))) G348e@ls/false) ((lambda (G3492@t) ((lambda (G3494@ls/false) (if G3494@ls/false (apply (lambda (G3496@x* G3497@x) (begin (G3471@check (cons G3497@x G3496@x*)) (list 'call-with-values (list 'lambda '() (car G3489@rhs*)) (list 'lambda (append G3496@x* G3497@x) (G3486@f (cdr G3488@lhs*) (cdr G3489@rhs*)))))) G3494@ls/false) ((lambda (G349a@t) ((lambda (G349c@ls/false) (if G349c@ls/false (apply (lambda (G349e@others) (G304d@syntax-violation '#f '"malformed bindings" G346e@stx G349e@others)) G349c@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G349a@t))) (G2f62@syntax-dispatch G349a@t 'any))) G3492@t))) (G2f62@syntax-dispatch G3492@t '#(each+ any () any)))) G348c@t))) (G2f62@syntax-dispatch G348c@t 'each-any))) (car G3488@lhs*)))))) G3486@f) G347e@lhs* G347f@rhs*))) G347c@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G347a@t))) (G2f62@syntax-dispatch G347a@t '(_ #(each (any any)) any . each-any)))) G3472@t))) (G2f62@syntax-dispatch G3472@t '(_ () any . each-any)))) G346e@stx))) '#f))) (set! G2f24@trace-lambda-macro (lambda (G34a4@stx) ((lambda (G34a6@t) ((lambda (G34a8@ls/false) (if G34a8@ls/false (apply (lambda (G34aa@who G34ab@fmls G34ac@b G34ad@b*) (if (G2d6d@valid-bound-ids? G34ab@fmls) (G2f18@bless (list 'make-traced-procedure (list 'quote G34aa@who) (cons 'lambda (cons G34ab@fmls (cons G34ac@b G34ad@b*))))) (G2f1c@invalid-fmls-error G34a4@stx G34ab@fmls))) G34a8@ls/false) ((lambda (G34b2@t) ((lambda (G34b4@ls/false) (if G34b4@ls/false (apply (lambda (G34b6@who G34b7@fmls G34b8@last G34b9@b G34ba@b*) (if (G2d6d@valid-bound-ids? (cons G34b8@last G34b7@fmls)) (G2f18@bless (list 'make-traced-procedure (list 'quote G34b6@who) (cons 'lambda (cons (append G34b7@fmls G34b8@last) (cons G34b9@b G34ba@b*))))) (G2f1c@invalid-fmls-error G34a4@stx (append G34b7@fmls G34b8@last)))) G34b4@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G34b2@t))) (G2f62@syntax-dispatch G34b2@t '(_ any #(each+ any () any) any . each-any)))) G34a6@t))) (G2f62@syntax-dispatch G34a6@t '(_ any each-any any . each-any)))) G34a4@stx))) (set! G2f26@trace-define-macro (lambda (G34c0@stx) ((lambda (G34c2@t) ((lambda (G34c4@ls/false) (if G34c4@ls/false (apply (lambda (G34c6@who G34c7@fmls G34c8@b G34c9@b*) (if (G2d6d@valid-bound-ids? G34c7@fmls) (G2f18@bless (list 'define G34c6@who (list 'make-traced-procedure (list 'quote G34c6@who) (cons 'lambda (cons G34c7@fmls (cons G34c8@b G34c9@b*)))))) (G2f1c@invalid-fmls-error G34c0@stx G34c7@fmls))) G34c4@ls/false) ((lambda (G34ce@t) ((lambda (G34d0@ls/false) (if G34d0@ls/false (apply (lambda (G34d2@who G34d3@fmls G34d4@last G34d5@b G34d6@b*) (if (G2d6d@valid-bound-ids? (cons G34d4@last G34d3@fmls)) (G2f18@bless (list 'define G34d2@who (list 'make-traced-procedure (list 'quote G34d2@who) (cons 'lambda (cons (append G34d3@fmls G34d4@last) (cons G34d5@b G34d6@b*)))))) (G2f1c@invalid-fmls-error G34c0@stx (append G34d3@fmls G34d4@last)))) G34d0@ls/false) ((lambda (G34dc@t) ((lambda (G34de@ls/false) (if G34de@ls/false (apply (lambda (G34e0@who G34e1@expr) (if (G2d63@id? G34e0@who) (G2f18@bless (list 'define G34e0@who (list 'let (list (list 'v G34e1@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34e0@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G304d@syntax-violation '#f '"invalid name" G34c0@stx))) G34de@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G34dc@t))) (G2f62@syntax-dispatch G34dc@t '(_ any any)))) G34ce@t))) (G2f62@syntax-dispatch G34ce@t '(_ (any . #(each+ any () any)) any . each-any)))) G34c2@t))) (G2f62@syntax-dispatch G34c2@t '(_ (any . each-any) any . each-any)))) G34c0@stx))) (set! G2f28@trace-define-syntax-macro (lambda (G34e4@stx) ((lambda (G34e6@t) ((lambda (G34e8@ls/false) (if G34e8@ls/false (apply (lambda (G34ea@who G34eb@expr) (if (G2d63@id? G34ea@who) (G2f18@bless (list 'define-syntax G34ea@who (list 'make-traced-macro (list 'quote G34ea@who) G34eb@expr))) (G304d@syntax-violation '#f '"invalid name" G34e4@stx))) G34e8@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G34e6@t))) (G2f62@syntax-dispatch G34e6@t '(_ any any)))) G34e4@stx))) (set! G2f2a@trace-let/rec-syntax (lambda (G34ee@who) (lambda (G34f0@stx) ((lambda (G34f2@t) ((lambda (G34f4@ls/false) (if G34f4@ls/false (apply (lambda (G34f6@lhs* G34f7@rhs* G34f8@b G34f9@b*) (if (G2d6d@valid-bound-ids? G34f6@lhs*) ((lambda (G34fe@rhs*) (G2f18@bless (cons G34ee@who (cons (map list G34f6@lhs* G34fe@rhs*) (cons G34f8@b G34f9@b*))))) (map (lambda (G3500@lhs G3501@rhs) (list 'make-traced-macro (list 'quote G3500@lhs) G3501@rhs)) G34f6@lhs* G34f7@rhs*)) (G2f1c@invalid-fmls-error G34f0@stx G34f6@lhs*))) G34f4@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G34f2@t))) (G2f62@syntax-dispatch G34f2@t '(_ #(each (any any)) any . each-any)))) G34f0@stx)))) (set! G2f2c@trace-let-syntax-macro (G2f2a@trace-let/rec-syntax 'let-syntax)) (set! G2f2e@trace-letrec-syntax-macro (G2f2a@trace-let/rec-syntax 'letrec-syntax)) (set! G2f30@guard-macro (lambda (G3504@x) ((lambda (G3507@gen-clauses) (begin (set! G3507@gen-clauses (lambda (G351e@con G351f@outerk G3520@clause*) ((lambda (G3525@f G3527@f*) (begin (set! G3525@f (lambda (G355a@x G355b@k) ((lambda (G355e@t) ((lambda (G3560@ls/false) (if G3560@ls/false (apply (lambda (G3562@e G3563@p) ((lambda (G3566@t) (list 'let (list (list G3566@t G3562@e)) (list 'if G3566@t (list G3563@p G3566@t) G355b@k))) (gensym))) G3560@ls/false) ((lambda (G3568@t) ((lambda (G356a@ls/false) (if G356a@ls/false (apply (lambda (G356c@e) ((lambda (G356e@t) (list 'let (list (list G356e@t G356c@e)) (list 'if G356e@t G356e@t G355b@k))) (gensym))) G356a@ls/false) ((lambda (G3570@t) ((lambda (G3572@ls/false) (if G3572@ls/false (apply (lambda (G3574@e G3575@v G3576@v*) (list 'if G3574@e (cons 'begin (cons G3575@v G3576@v*)) G355b@k)) G3572@ls/false) ((lambda (G357a@t) ((lambda (G357c@ls/false) (if G357c@ls/false (apply (lambda () (G304d@syntax-violation '#f '"invalid guard clause" G355a@x)) G357c@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G357a@t))) (G2f62@syntax-dispatch G357a@t '_))) G3570@t))) (G2f62@syntax-dispatch G3570@t '(any any . each-any)))) G3568@t))) (G2f62@syntax-dispatch G3568@t '(any)))) G355e@t))) (G2f62@syntax-dispatch G355e@t '(any #(scheme-id =>) any)))) G355a@x))) (set! G3527@f* (lambda (G3532@x*) ((lambda (G3534@t) ((lambda (G3536@ls/false) (if G3536@ls/false (apply (lambda () ((lambda (G3538@g) (values (list G3538@g (list 'lambda '() (list 'raise-continuable G351e@con))) G3538@g)) (gensym))) G3536@ls/false) ((lambda (G353a@t) ((lambda (G353c@ls/false) (if G353c@ls/false (apply (lambda (G353e@e G353f@e*) (values (cons 'begin (cons G353e@e G353f@e*)) '#f)) G353c@ls/false) ((lambda (G3542@t) ((lambda (G3544@ls/false) (if G3544@ls/false (apply (lambda (G3546@cls G3547@cls*) (call-with-values (lambda () (G3527@f* G3547@cls*)) (lambda (G354c@G354a G354d@G354b) ((lambda (G3550@g G3551@e) (values (G3525@f G3546@cls G3551@e) G3550@g)) G354d@G354b G354c@G354a)))) G3544@ls/false) ((lambda (G3554@t) ((lambda (G3556@ls/false) (if G3556@ls/false (apply (lambda (G3558@others) (G304d@syntax-violation '#f '"invalid guard clause" G3558@others)) G3556@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3554@t))) (G2f62@syntax-dispatch G3554@t 'any))) G3542@t))) (G2f62@syntax-dispatch G3542@t '(any . any)))) G353a@t))) (G2f62@syntax-dispatch G353a@t '((#(scheme-id else) any . each-any))))) G3534@t))) (G2f62@syntax-dispatch G3534@t '()))) G3532@x*))) (call-with-values (lambda () (G3527@f* G3520@clause*)) (lambda (G352a@G3528 G352b@G3529) ((lambda (G352e@raisek G352f@code) (if G352e@raisek (list (list 'call/cc (list 'lambda (list G352e@raisek) (list G351f@outerk (list 'lambda '() G352f@code))))) (list G351f@outerk (list 'lambda '() G352f@code)))) G352b@G3529 G352a@G3528))))) '#f '#f))) ((lambda (G3508@t) ((lambda (G350a@ls/false) (if (and G350a@ls/false (apply (lambda (G350c@con G350d@clause* G350e@b G350f@b*) (G2d63@id? G350c@con)) G350a@ls/false)) (apply (lambda (G3514@con G3515@clause* G3516@b G3517@b*) ((lambda (G351c@outerk) (G2f18@bless (list (list 'call/cc (list 'lambda (list G351c@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G3514@con) (G3507@gen-clauses G3514@con G351c@outerk G3515@clause*)) (cons 'lambda (cons '() (cons G3516@b G3517@b*)))))))))) (gensym))) G350a@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3508@t))) (G2f62@syntax-dispatch G3508@t '(_ (any . each-any) any . each-any)))) G3504@x))) '#f))) (set! G2f32@define-enumeration-macro (lambda (G357e@stx) ((lambda (G3581@set? G3583@remove-dups) (begin (set! G3581@set? (lambda (G359a@x) (or (null? G359a@x) (and (not (memq (car G359a@x) (cdr G359a@x))) (G3581@set? (cdr G359a@x)))))) (set! G3583@remove-dups (lambda (G3598@ls) (if (null? G3598@ls) '() (cons (car G3598@ls) (G3583@remove-dups (remq (car G3598@ls) (cdr G3598@ls))))))) ((lambda (G3584@t) ((lambda (G3586@ls/false) (if (and G3586@ls/false (apply (lambda (G3588@name G3589@id* G358a@maker) (and (G2d63@id? G3588@name) (G2d63@id? G358a@maker) (for-all G2d63@id? G3589@id*))) G3586@ls/false)) (apply (lambda (G358e@name G358f@id* G3590@maker) ((lambda (G3594@name* G3595@mk) (G2f18@bless (list 'begin (list 'define G3595@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3594@name*)))) (list 'define-syntax G358e@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3594@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G358e@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3590@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3590@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3594@name*)) (cons 'syntax-violation (cons (list 'quote G3590@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3595@mk '('(n* ...)))))))))))) (G3583@remove-dups (G3053@syntax->datum G358f@id*)) (gensym))) G3586@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3584@t))) (G2f62@syntax-dispatch G3584@t '(_ any each-any any)))) G357e@stx))) '#f '#f))) (set! G2f34@time-macro (lambda (G359c@stx) ((lambda (G359e@t) ((lambda (G35a0@ls/false) (if G35a0@ls/false (apply (lambda (G35a2@expr) ((lambda (G35a4@str) (G2f18@bless (list 'time-it G35a4@str (list 'lambda '() G35a2@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G35a8@G35a6 G35a9@G35a7) ((lambda (G35ac@e G35ad@p) (begin (write (G3053@syntax->datum G35a2@expr) G35ad@p) (G35ac@e))) G35a9@G35a7 G35a8@G35a6))))) G35a0@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G359e@t))) (G2f62@syntax-dispatch G359e@t '(_ any)))) G359c@stx))) (set! G2f36@delay-macro (lambda (G35b0@stx) ((lambda (G35b2@t) ((lambda (G35b4@ls/false) (if G35b4@ls/false (apply (lambda (G35b6@expr) (G2f18@bless (list 'make-promise (list 'lambda '() G35b6@expr)))) G35b4@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G35b2@t))) (G2f62@syntax-dispatch G35b2@t '(_ any)))) G35b0@stx))) (set! G2f38@assert-macro (lambda (G35b8@stx) ((lambda (G35ba@t) ((lambda (G35bc@ls/false) (if G35bc@ls/false (apply (lambda (G35be@expr) ((lambda (G35c0@pos) (G2f18@bless (list 'unless G35be@expr (list 'assertion-error (list 'quote G35be@expr) (list 'quote G35c0@pos))))) (or (G3045@expression-position G35b8@stx) (G3045@expression-position G35be@expr)))) G35bc@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G35ba@t))) (G2f62@syntax-dispatch G35ba@t '(_ any)))) G35b8@stx))) (set! G2f3a@endianness-macro (lambda (G35c2@stx) ((lambda (G35c4@t) ((lambda (G35c6@ls/false) (if G35c6@ls/false (apply (lambda (G35c8@e) ((lambda (G35ca@t) (if (memv G35ca@t '(little)) (G2f18@bless ''little) (if (memv G35ca@t '(big)) (G2f18@bless ''big) (G304d@syntax-violation '#f '"endianness must be big or little" G35c2@stx)))) (G3053@syntax->datum G35c8@e))) G35c6@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G35c4@t))) (G2f62@syntax-dispatch G35c4@t '(_ any)))) G35c2@stx))) (set! G2f3c@identifier-syntax-macro (lambda (G35cc@stx) ((lambda (G35ce@t) ((lambda (G35d0@ls/false) (if G35d0@ls/false (apply (lambda (G35d2@expr) (G2f18@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35d2@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35d2@expr) '((syntax (e* ...)))))))))) G35d0@ls/false) ((lambda (G35d4@t) ((lambda (G35d6@ls/false) (if (and G35d6@ls/false (apply (lambda (G35d8@id1 G35d9@expr1 G35da@id2 G35db@expr2 G35dc@expr3) (and (G2d63@id? G35d8@id1) (G2d63@id? G35da@id2) (G2d63@id? G35db@expr2))) G35d6@ls/false)) (apply (lambda (G35e2@id1 G35e3@expr1 G35e4@id2 G35e5@expr2 G35e6@expr3) (G2f18@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35e3@expr1)) (list (list 'set! 'id G35e5@expr2) (list 'syntax G35e6@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35e3@expr1 '(e* ...))))))))) G35d6@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G35d4@t))) (G2f62@syntax-dispatch G35d4@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35ce@t))) (G2f62@syntax-dispatch G35ce@t '(_ any)))) G35cc@stx))) (set! G2f3e@do-macro (lambda (G35ec@stx) ((lambda (G35ef@bind) (begin (set! G35ef@bind (lambda (G3606@x) ((lambda (G3608@t) ((lambda (G360a@ls/false) (if G360a@ls/false (apply (lambda (G360c@x G360d@init) (list G360c@x G360d@init G360c@x)) G360a@ls/false) ((lambda (G3610@t) ((lambda (G3612@ls/false) (if G3612@ls/false (apply (lambda (G3614@x G3615@init G3616@step) (list G3614@x G3615@init G3616@step)) G3612@ls/false) ((lambda (G361a@t) ((lambda (G361c@ls/false) (if G361c@ls/false (apply (lambda () (G304d@syntax-violation '#f '"invalid binding" G35ec@stx)) G361c@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G361a@t))) (G2f62@syntax-dispatch G361a@t '_))) G3610@t))) (G2f62@syntax-dispatch G3610@t '(any any any)))) G3608@t))) (G2f62@syntax-dispatch G3608@t '(any any)))) G3606@x))) ((lambda (G35f0@t) ((lambda (G35f2@ls/false) (if G35f2@ls/false (apply (lambda (G35f4@binding* G35f5@test G35f6@expr* G35f7@command*) ((lambda (G35fc@t) ((lambda (G35fe@ls/false) (if G35fe@ls/false (apply (lambda (G3600@x* G3601@init* G3602@step*) (if (G2d6d@valid-bound-ids? G3600@x*) (G2f18@bless (list 'letrec (list (list 'loop (list 'lambda G3600@x* (list 'if G35f5@test (cons 'begin (cons '(if #f #f) G35f6@expr*)) (cons 'begin (append G35f7@command* (list (cons 'loop G3602@step*)))))))) (cons 'loop G3601@init*))) (G304d@syntax-violation '#f '"invalid bindings" G35ec@stx))) G35fe@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G35fc@t))) (G2f62@syntax-dispatch G35fc@t '#(each (any any any))))) (map G35ef@bind G35f4@binding*))) G35f2@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G35f0@t))) (G2f62@syntax-dispatch G35f0@t '(_ each-any (any . each-any) . each-any)))) G35ec@stx))) '#f))) (set! G2f40@let*-macro (lambda (G361e@stx) ((lambda (G3620@t) ((lambda (G3622@ls/false) (if (and G3622@ls/false (apply (lambda (G3624@lhs* G3625@rhs* G3626@b G3627@b*) (for-all G2d63@id? G3624@lhs*)) G3622@ls/false)) (apply (lambda (G362c@lhs* G362d@rhs* G362e@b G362f@b*) (G2f18@bless ((letrec ((G3634@f (lambda (G3636@x*) (if (null? G3636@x*) (cons 'let (cons '() (cons G362e@b G362f@b*))) (list 'let (list (car G3636@x*)) (G3634@f (cdr G3636@x*))))))) G3634@f) (map list G362c@lhs* G362d@rhs*)))) G3622@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3620@t))) (G2f62@syntax-dispatch G3620@t '(_ #(each (any any)) any . each-any)))) G361e@stx))) (set! G2f42@or-macro (lambda (G3638@stx) ((lambda (G363a@t) ((lambda (G363c@ls/false) (if G363c@ls/false (apply (lambda () '#f) G363c@ls/false) ((lambda (G363e@t) ((lambda (G3640@ls/false) (if G3640@ls/false (apply (lambda (G3642@e G3643@e*) (G2f18@bless ((letrec ((G3646@f (lambda (G3648@e G3649@e*) (if (null? G3649@e*) (list 'begin '#f G3648@e) (list 'let (list (list 't G3648@e)) (list 'if 't 't (G3646@f (car G3649@e*) (cdr G3649@e*)))))))) G3646@f) G3642@e G3643@e*))) G3640@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G363e@t))) (G2f62@syntax-dispatch G363e@t '(_ any . each-any)))) G363a@t))) (G2f62@syntax-dispatch G363a@t '(_)))) G3638@stx))) (set! G2f44@and-macro (lambda (G364c@stx) ((lambda (G364e@t) ((lambda (G3650@ls/false) (if G3650@ls/false (apply (lambda () '#t) G3650@ls/false) ((lambda (G3652@t) ((lambda (G3654@ls/false) (if G3654@ls/false (apply (lambda (G3656@e G3657@e*) (G2f18@bless ((letrec ((G365a@f (lambda (G365c@e G365d@e*) (if (null? G365d@e*) (list 'begin '#f G365c@e) (cons 'if (cons G365c@e (cons (G365a@f (car G365d@e*) (cdr G365d@e*)) '(#f)))))))) G365a@f) G3656@e G3657@e*))) G3654@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3652@t))) (G2f62@syntax-dispatch G3652@t '(_ any . each-any)))) G364e@t))) (G2f62@syntax-dispatch G364e@t '(_)))) G364c@stx))) (set! G2f46@cond-macro (lambda (G3660@stx) ((lambda (G3662@t) ((lambda (G3664@ls/false) (if G3664@ls/false (apply (lambda (G3666@cls G3667@cls*) (G2f18@bless ((letrec ((G366a@f (lambda (G366c@cls G366d@cls*) (if (null? G366d@cls*) ((lambda (G3670@t) ((lambda (G3672@ls/false) (if G3672@ls/false (apply (lambda (G3674@e G3675@e*) (cons 'begin (cons G3674@e G3675@e*))) G3672@ls/false) ((lambda (G3678@t) ((lambda (G367a@ls/false) (if G367a@ls/false (apply (lambda (G367c@e G367d@p) (list 'let (list (list 't G367c@e)) (list 'if 't (cons G367d@p '(t))))) G367a@ls/false) ((lambda (G3680@t) ((lambda (G3682@ls/false) (if G3682@ls/false (apply (lambda (G3684@e) (cons 'or (cons G3684@e '((if #f #f))))) G3682@ls/false) ((lambda (G3686@t) ((lambda (G3688@ls/false) (if G3688@ls/false (apply (lambda (G368a@e G368b@e*) (list 'if G368a@e (cons 'begin G368b@e*))) G3688@ls/false) ((lambda (G368e@t) ((lambda (G3690@ls/false) (if G3690@ls/false (apply (lambda () (G304d@syntax-violation '#f '"invalid last clause" G3660@stx)) G3690@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G368e@t))) (G2f62@syntax-dispatch G368e@t '_))) G3686@t))) (G2f62@syntax-dispatch G3686@t '(any . each-any)))) G3680@t))) (G2f62@syntax-dispatch G3680@t '(any)))) G3678@t))) (G2f62@syntax-dispatch G3678@t '(any #(scheme-id =>) any)))) G3670@t))) (G2f62@syntax-dispatch G3670@t '(#(scheme-id else) any . each-any)))) G366c@cls) ((lambda (G3692@t) ((lambda (G3694@ls/false) (if G3694@ls/false (apply (lambda (G3696@e G3697@e*) (G304d@syntax-violation '#f '"incorrect position of keyword else" G3660@stx)) G3694@ls/false) ((lambda (G369a@t) ((lambda (G369c@ls/false) (if G369c@ls/false (apply (lambda (G369e@e G369f@p) (list 'let (list (list 't G369e@e)) (list 'if 't (cons G369f@p '(t)) (G366a@f (car G366d@cls*) (cdr G366d@cls*))))) G369c@ls/false) ((lambda (G36a2@t) ((lambda (G36a4@ls/false) (if G36a4@ls/false (apply (lambda (G36a6@e) (list 'or G36a6@e (G366a@f (car G366d@cls*) (cdr G366d@cls*)))) G36a4@ls/false) ((lambda (G36a8@t) ((lambda (G36aa@ls/false) (if G36aa@ls/false (apply (lambda (G36ac@e G36ad@e*) (list 'if G36ac@e (cons 'begin G36ad@e*) (G366a@f (car G366d@cls*) (cdr G366d@cls*)))) G36aa@ls/false) ((lambda (G36b0@t) ((lambda (G36b2@ls/false) (if G36b2@ls/false (apply (lambda () (G304d@syntax-violation '#f '"invalid last clause" G3660@stx)) G36b2@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G36b0@t))) (G2f62@syntax-dispatch G36b0@t '_))) G36a8@t))) (G2f62@syntax-dispatch G36a8@t '(any . each-any)))) G36a2@t))) (G2f62@syntax-dispatch G36a2@t '(any)))) G369a@t))) (G2f62@syntax-dispatch G369a@t '(any #(scheme-id =>) any)))) G3692@t))) (G2f62@syntax-dispatch G3692@t '(#(scheme-id else) any . each-any)))) G366c@cls))))) G366a@f) G3666@cls G3667@cls*))) G3664@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3662@t))) (G2f62@syntax-dispatch G3662@t '(_ any . each-any)))) G3660@stx))) (set! G2f48@do-include (lambda (G36b4@stx G36b5@id G36b6@filename) ((lambda (G36ba@filename) (begin (if (not (and (string? G36ba@filename) (G2d63@id? G36b5@id))) (G304d@syntax-violation '#f '"invalid syntax" G36b4@stx) (void)) (cons (G2f18@bless 'begin) (with-input-from-file G36ba@filename (lambda () ((letrec ((G36bc@f (lambda (G36be@ls) ((lambda (G36c0@x) (if (eof-object? G36c0@x) (reverse G36be@ls) (G36bc@f (cons (G2d41@datum->stx G36b5@id G36c0@x) G36be@ls)))) (G28f2@G281b@read-annotated))))) G36bc@f) '())))))) (G2d79@stx->datum G36b6@filename)))) (set! G2f4a@include-macro (lambda (G36c2@e) ((lambda (G36c4@t) ((lambda (G36c6@ls/false) (if G36c6@ls/false (apply (lambda (G36c8@id G36c9@filename) (G2f48@do-include G36c2@e G36c8@id G36c9@filename)) G36c6@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G36c4@t))) (G2f62@syntax-dispatch G36c4@t '(any any)))) G36c2@e))) (set! G2f4c@include-into-macro (lambda (G36cc@e) ((lambda (G36ce@t) ((lambda (G36d0@ls/false) (if G36d0@ls/false (apply (lambda (G36d2@id G36d3@filename) (G2f48@do-include G36cc@e G36d2@id G36d3@filename)) G36d0@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G36ce@t))) (G2f62@syntax-dispatch G36ce@t '(_ any any)))) G36cc@e))) (set! G2f4e@syntax-rules-macro (lambda (G36d6@e) ((lambda (G36d8@t) ((lambda (G36da@ls/false) (if G36da@ls/false (apply (lambda (G36dc@lits G36dd@pat* G36de@tmp*) (begin (G2f68@verify-literals G36dc@lits G36d6@e) (G2f18@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36dc@lits (map (lambda (G36e2@pat G36e3@tmp) ((lambda (G36e6@t) ((lambda (G36e8@ls/false) (if G36e8@ls/false (apply (lambda (G36ea@rest) (list (cons 'g G36ea@rest) (list 'syntax G36e3@tmp))) G36e8@ls/false) ((lambda (G36ec@t) ((lambda (G36ee@ls/false) (if G36ee@ls/false (apply (lambda () (G304d@syntax-violation '#f '"invalid syntax-rules pattern" G36d6@e G36e2@pat)) G36ee@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G36ec@t))) (G2f62@syntax-dispatch G36ec@t '_))) G36e6@t))) (G2f62@syntax-dispatch G36e6@t '(_ . any)))) G36e2@pat)) G36dd@pat* G36de@tmp*)))))))) G36da@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G36d8@t))) (G2f62@syntax-dispatch G36d8@t '(_ each-any . #(each (any any)))))) G36d6@e))) (set! G2f50@quasiquote-macro ((lambda () ((lambda (G36f1@datum G370f@quasicons* G3711@quasicons G3713@quasiappend G3715@quasivector G3717@vquasi G3719@quasi) (begin (set! G36f1@datum (lambda (G37f4@x) (list (G2eec@scheme-stx 'quote) (G2d4b@mkstx G37f4@x '() '() '())))) (set! G370f@quasicons* (lambda (G37ec@x G37ed@y) ((letrec ((G37f0@f (lambda (G37f2@x) (if (null? G37f2@x) G37ed@y (G3711@quasicons (car G37f2@x) (G37f0@f (cdr G37f2@x))))))) G37f0@f) G37ec@x))) (set! G3711@quasicons (lambda (G37c6@x G37c7@y) ((lambda (G37ca@t) ((lambda (G37cc@ls/false) (if G37cc@ls/false (apply (lambda (G37ce@dy) ((lambda (G37d0@t) ((lambda (G37d2@ls/false) (if G37d2@ls/false (apply (lambda (G37d4@dx) (list (G2eec@scheme-stx 'quote) (cons G37d4@dx G37ce@dy))) G37d2@ls/false) ((lambda (G37d6@t) ((lambda (G37d8@ls/false) (if G37d8@ls/false (apply (lambda () ((lambda (G37da@t) ((lambda (G37dc@ls/false) (if G37dc@ls/false (apply (lambda () (list (G2eec@scheme-stx 'list) G37c6@x)) G37dc@ls/false) ((lambda (G37de@t) ((lambda (G37e0@ls/false) (if G37e0@ls/false (apply (lambda () (list (G2eec@scheme-stx 'cons) G37c6@x G37c7@y)) G37e0@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G37de@t))) (G2f62@syntax-dispatch G37de@t '_))) G37da@t))) (G2f62@syntax-dispatch G37da@t '()))) G37ce@dy)) G37d8@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G37d6@t))) (G2f62@syntax-dispatch G37d6@t '_))) G37d0@t))) (G2f62@syntax-dispatch G37d0@t '(#(scheme-id quote) any)))) G37c6@x)) G37cc@ls/false) ((lambda (G37e2@t) ((lambda (G37e4@ls/false) (if G37e4@ls/false (apply (lambda (G37e6@stuff) (cons* (G2eec@scheme-stx 'list) G37c6@x G37e6@stuff)) G37e4@ls/false) ((lambda (G37e8@t) ((lambda (G37ea@ls/false) (if G37ea@ls/false (apply (lambda () (list (G2eec@scheme-stx 'cons) G37c6@x G37c7@y)) G37ea@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G37e8@t))) (G2f62@syntax-dispatch G37e8@t '_))) G37e2@t))) (G2f62@syntax-dispatch G37e2@t '(#(scheme-id list) . each-any)))) G37ca@t))) (G2f62@syntax-dispatch G37ca@t '(#(scheme-id quote) any)))) G37c7@y))) (set! G3713@quasiappend (lambda (G37ac@x G37ad@y) ((lambda (G37b0@ls) (if (null? G37b0@ls) (list (G2eec@scheme-stx 'quote) '()) (if (null? (cdr G37b0@ls)) (car G37b0@ls) (cons* (G2eec@scheme-stx 'append) G37b0@ls)))) ((letrec ((G37b2@f (lambda (G37b4@x) (if (null? G37b4@x) ((lambda (G37b6@t) ((lambda (G37b8@ls/false) (if G37b8@ls/false (apply (lambda () '()) G37b8@ls/false) ((lambda (G37ba@t) ((lambda (G37bc@ls/false) (if G37bc@ls/false (apply (lambda () (list G37ad@y)) G37bc@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G37ba@t))) (G2f62@syntax-dispatch G37ba@t '_))) G37b6@t))) (G2f62@syntax-dispatch G37b6@t '(#(scheme-id quote) ())))) G37ad@y) ((lambda (G37be@t) ((lambda (G37c0@ls/false) (if G37c0@ls/false (apply (lambda () (G37b2@f (cdr G37b4@x))) G37c0@ls/false) ((lambda (G37c2@t) ((lambda (G37c4@ls/false) (if G37c4@ls/false (apply (lambda () (cons (car G37b4@x) (G37b2@f (cdr G37b4@x)))) G37c4@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G37c2@t))) (G2f62@syntax-dispatch G37c2@t '_))) G37be@t))) (G2f62@syntax-dispatch G37be@t '(#(scheme-id quote) ())))) (car G37b4@x)))))) G37b2@f) G37ac@x)))) (set! G3715@quasivector (lambda (G377a@x) ((lambda (G377c@pat-x) ((lambda (G377e@t) ((lambda (G3780@ls/false) (if G3780@ls/false (apply (lambda (G3782@x*) (list (G2eec@scheme-stx 'quote) (list->vector G3782@x*))) G3780@ls/false) ((lambda (G3784@t) ((lambda (G3786@ls/false) (if G3786@ls/false (apply (lambda () ((letrec ((G3788@f (lambda (G378a@x G378b@k) ((lambda (G378e@t) ((lambda (G3790@ls/false) (if G3790@ls/false (apply (lambda (G3792@x*) (G378b@k (map (lambda (G3794@x) (list (G2eec@scheme-stx 'quote) G3794@x)) G3792@x*))) G3790@ls/false) ((lambda (G3796@t) ((lambda (G3798@ls/false) (if G3798@ls/false (apply (lambda (G379a@x*) (G378b@k G379a@x*)) G3798@ls/false) ((lambda (G379c@t) ((lambda (G379e@ls/false) (if G379e@ls/false (apply (lambda (G37a0@x G37a1@y) (G3788@f G37a1@y (lambda (G37a4@ls) (G378b@k (cons G37a0@x G37a4@ls))))) G379e@ls/false) ((lambda (G37a6@t) ((lambda (G37a8@ls/false) (if G37a8@ls/false (apply (lambda () (list (G2eec@scheme-stx 'list->vector) G377c@pat-x)) G37a8@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G37a6@t))) (G2f62@syntax-dispatch G37a6@t '_))) G379c@t))) (G2f62@syntax-dispatch G379c@t '(#(scheme-id cons) any any)))) G3796@t))) (G2f62@syntax-dispatch G3796@t '(#(scheme-id list) . each-any)))) G378e@t))) (G2f62@syntax-dispatch G378e@t '(#(scheme-id quote) each-any)))) G378a@x)))) G3788@f) G377a@x (lambda (G37aa@ls) (cons* (G2eec@scheme-stx 'vector) G37aa@ls)))) G3786@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3784@t))) (G2f62@syntax-dispatch G3784@t '_))) G377e@t))) (G2f62@syntax-dispatch G377e@t '(#(scheme-id quote) each-any)))) G377c@pat-x)) G377a@x))) (set! G3717@vquasi (lambda (G3758@p G3759@lev) ((lambda (G375c@t) ((lambda (G375e@ls/false) (if G375e@ls/false (apply (lambda (G3760@p G3761@q) ((lambda (G3764@t) ((lambda (G3766@ls/false) (if G3766@ls/false (apply (lambda (G3768@p) (if (= G3759@lev '0) (G370f@quasicons* G3768@p (G3717@vquasi G3761@q G3759@lev)) (G3711@quasicons (G3711@quasicons (G36f1@datum 'unquote) (G3719@quasi G3768@p (- G3759@lev '1))) (G3717@vquasi G3761@q G3759@lev)))) G3766@ls/false) ((lambda (G376a@t) ((lambda (G376c@ls/false) (if G376c@ls/false (apply (lambda (G376e@p) (if (= G3759@lev '0) (G3713@quasiappend G376e@p (G3717@vquasi G3761@q G3759@lev)) (G3711@quasicons (G3711@quasicons (G36f1@datum 'unquote-splicing) (G3719@quasi G376e@p (- G3759@lev '1))) (G3717@vquasi G3761@q G3759@lev)))) G376c@ls/false) ((lambda (G3770@t) ((lambda (G3772@ls/false) (if G3772@ls/false (apply (lambda (G3774@p) (G3711@quasicons (G3719@quasi G3774@p G3759@lev) (G3717@vquasi G3761@q G3759@lev))) G3772@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3770@t))) (G2f62@syntax-dispatch G3770@t 'any))) G376a@t))) (G2f62@syntax-dispatch G376a@t '(#(scheme-id unquote-splicing) . each-any)))) G3764@t))) (G2f62@syntax-dispatch G3764@t '(#(scheme-id unquote) . each-any)))) G3760@p)) G375e@ls/false) ((lambda (G3776@t) ((lambda (G3778@ls/false) (if G3778@ls/false (apply (lambda () (list (G2eec@scheme-stx 'quote) '())) G3778@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3776@t))) (G2f62@syntax-dispatch G3776@t '()))) G375c@t))) (G2f62@syntax-dispatch G375c@t '(any . any)))) G3758@p))) (set! G3719@quasi (lambda (G3722@p G3723@lev) ((lambda (G3726@t) ((lambda (G3728@ls/false) (if G3728@ls/false (apply (lambda (G372a@p) (if (= G3723@lev '0) G372a@p (G3711@quasicons (G36f1@datum 'unquote) (G3719@quasi (list G372a@p) (- G3723@lev '1))))) G3728@ls/false) ((lambda (G372c@t) ((lambda (G372e@ls/false) (if G372e@ls/false (apply (lambda (G3730@p G3731@q) (if (= G3723@lev '0) (G370f@quasicons* G3730@p (G3719@quasi G3731@q G3723@lev)) (G3711@quasicons (G3711@quasicons (G36f1@datum 'unquote) (G3719@quasi G3730@p (- G3723@lev '1))) (G3719@quasi G3731@q G3723@lev)))) G372e@ls/false) ((lambda (G3734@t) ((lambda (G3736@ls/false) (if G3736@ls/false (apply (lambda (G3738@p G3739@q) (if (= G3723@lev '0) (G3713@quasiappend G3738@p (G3719@quasi G3739@q G3723@lev)) (G3711@quasicons (G3711@quasicons (G36f1@datum 'unquote-splicing) (G3719@quasi G3738@p (- G3723@lev '1))) (G3719@quasi G3739@q G3723@lev)))) G3736@ls/false) ((lambda (G373c@t) ((lambda (G373e@ls/false) (if G373e@ls/false (apply (lambda (G3740@p) (G3711@quasicons (G36f1@datum 'quasiquote) (G3719@quasi (list G3740@p) (+ G3723@lev '1)))) G373e@ls/false) ((lambda (G3742@t) ((lambda (G3744@ls/false) (if G3744@ls/false (apply (lambda (G3746@p G3747@q) (G3711@quasicons (G3719@quasi G3746@p G3723@lev) (G3719@quasi G3747@q G3723@lev))) G3744@ls/false) ((lambda (G374a@t) ((lambda (G374c@ls/false) (if (and G374c@ls/false (apply (lambda (G374e@x) (not (G2d2b@stx? G374e@x))) G374c@ls/false)) (apply (lambda (G3750@x) (G3715@quasivector (G3717@vquasi G3750@x G3723@lev))) G374c@ls/false) ((lambda (G3752@t) ((lambda (G3754@ls/false) (if G3754@ls/false (apply (lambda (G3756@p) (list (G2eec@scheme-stx 'quote) G3756@p)) G3754@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3752@t))) (G2f62@syntax-dispatch G3752@t 'any))) G374a@t))) (G2f62@syntax-dispatch G374a@t '#(vector each-any)))) G3742@t))) (G2f62@syntax-dispatch G3742@t '(any . any)))) G373c@t))) (G2f62@syntax-dispatch G373c@t '(#(scheme-id quasiquote) any)))) G3734@t))) (G2f62@syntax-dispatch G3734@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G372c@t))) (G2f62@syntax-dispatch G372c@t '((#(scheme-id unquote) . each-any) . any)))) G3726@t))) (G2f62@syntax-dispatch G3726@t '(#(scheme-id unquote) any)))) G3722@p))) (lambda (G371a@x) ((lambda (G371c@t) ((lambda (G371e@ls/false) (if G371e@ls/false (apply (lambda (G3720@e) (G3719@quasi G3720@e '0)) G371e@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G371c@t))) (G2f62@syntax-dispatch G371c@t '(_ any)))) G371a@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f52@quasisyntax-macro ((lambda () ((lambda (G37f7@quasi) (begin (set! G37f7@quasi (lambda (G380f@p G3810@lev) ((lambda (G3813@t) ((lambda (G3815@ls/false) (if G3815@ls/false (apply (lambda (G3817@p) (if (= G3810@lev '0) ((lambda (G3819@g) (values (list G3819@g) (list G3817@p) G3819@g)) (gensym)) (call-with-values (lambda () (G37f7@quasi G3817@p (- G3810@lev '1))) (lambda (G381e@G381b G381f@G381c G3820@G381d) ((lambda (G3824@p G3825@rhs* G3826@lhs*) (values G3826@lhs* G3825@rhs* (list 'unsyntax G3824@p))) G3820@G381d G381f@G381c G381e@G381b))))) G3815@ls/false) ((lambda (G382a@t) ((lambda (G382c@ls/false) (if (and G382c@ls/false (apply (lambda () (= G3810@lev '0)) G382c@ls/false)) (apply (lambda () (G304d@syntax-violation '#f '"incorrect use of unsyntax" G380f@p)) G382c@ls/false) ((lambda (G382e@t) ((lambda (G3830@ls/false) (if G3830@ls/false (apply (lambda (G3832@p* G3833@q) (call-with-values (lambda () (G37f7@quasi G3833@q G3810@lev)) (lambda (G3839@G3836 G383a@G3837 G383b@G3838) ((lambda (G383f@q G3840@rhs* G3841@lhs*) (if (= G3810@lev '0) ((lambda (G3845@g*) (values (append G3845@g* G3841@lhs*) (append G3832@p* G3840@rhs*) (append G3845@g* G383f@q))) (map (lambda (G3847@x) (gensym)) G3832@p*)) (call-with-values (lambda () (G37f7@quasi G3832@p* (- G3810@lev '1))) (lambda (G384c@G3849 G384d@G384a G384e@G384b) ((lambda (G3852@p* G3853@rhs2* G3854@lhs2*) (values (append G3854@lhs2* G3841@lhs*) (append G3853@rhs2* G3840@rhs*) (cons (cons 'unsyntax G3852@p*) G383f@q))) G384e@G384b G384d@G384a G384c@G3849))))) G383b@G3838 G383a@G3837 G3839@G3836)))) G3830@ls/false) ((lambda (G3858@t) ((lambda (G385a@ls/false) (if G385a@ls/false (apply (lambda (G385c@p* G385d@q) (call-with-values (lambda () (G37f7@quasi G385d@q G3810@lev)) (lambda (G3863@G3860 G3864@G3861 G3865@G3862) ((lambda (G3869@q G386a@rhs* G386b@lhs*) (if (= G3810@lev '0) ((lambda (G386f@g*) (values (append (map (lambda (G3871@g) (cons G3871@g '(...))) G386f@g*) G386b@lhs*) (append G385c@p* G386a@rhs*) (append (apply append (map (lambda (G3873@g) (cons G3873@g '(...))) G386f@g*)) G3869@q))) (map (lambda (G3875@x) (gensym)) G385c@p*)) (call-with-values (lambda () (G37f7@quasi G385c@p* (- G3810@lev '1))) (lambda (G387a@G3877 G387b@G3878 G387c@G3879) ((lambda (G3880@p* G3881@rhs2* G3882@lhs2*) (values (append G3882@lhs2* G386b@lhs*) (append G3881@rhs2* G386a@rhs*) (cons (cons 'unsyntax-splicing G3880@p*) G3869@q))) G387c@G3879 G387b@G3878 G387a@G3877))))) G3865@G3862 G3864@G3861 G3863@G3860)))) G385a@ls/false) ((lambda (G3886@t) ((lambda (G3888@ls/false) (if (and G3888@ls/false (apply (lambda () (= G3810@lev '0)) G3888@ls/false)) (apply (lambda () (G304d@syntax-violation '#f '"incorrect use of unsyntax-splicing" G380f@p)) G3888@ls/false) ((lambda (G388a@t) ((lambda (G388c@ls/false) (if G388c@ls/false (apply (lambda (G388e@p) (call-with-values (lambda () (G37f7@quasi G388e@p (+ G3810@lev '1))) (lambda (G3893@G3890 G3894@G3891 G3895@G3892) ((lambda (G3899@p G389a@rhs* G389b@lhs*) (values G389b@lhs* G389a@rhs* (list 'quasisyntax G3899@p))) G3895@G3892 G3894@G3891 G3893@G3890)))) G388c@ls/false) ((lambda (G389f@t) ((lambda (G38a1@ls/false) (if G38a1@ls/false (apply (lambda (G38a3@p G38a4@q) (call-with-values (lambda () (G37f7@quasi G38a3@p G3810@lev)) (lambda (G38ad@G38a7 G38ae@G38a8 G38af@G38a9) (call-with-values (lambda () (G37f7@quasi G38a4@q G3810@lev)) (lambda (G38b3@G38aa G38b4@G38ab G38b5@G38ac) ((lambda (G38b9@q G38ba@rhs2* G38bb@lhs2* G38bc@p G38bd@rhs* G38be@lhs*) (values (append G38bb@lhs2* G38be@lhs*) (append G38ba@rhs2* G38bd@rhs*) (cons G38bc@p G38b9@q))) G38b5@G38ac G38b4@G38ab G38b3@G38aa G38af@G38a9 G38ae@G38a8 G38ad@G38a7)))))) G38a1@ls/false) ((lambda (G38c5@t) ((lambda (G38c7@ls/false) (if G38c7@ls/false (apply (lambda (G38c9@x*) (call-with-values (lambda () (G37f7@quasi G38c9@x* G3810@lev)) (lambda (G38ce@G38cb G38cf@G38cc G38d0@G38cd) ((lambda (G38d4@x* G38d5@rhs* G38d6@lhs*) (values G38d6@lhs* G38d5@rhs* (list->vector G38d4@x*))) G38d0@G38cd G38cf@G38cc G38ce@G38cb)))) G38c7@ls/false) ((lambda (G38da@t) ((lambda (G38dc@ls/false) (if G38dc@ls/false (apply (lambda () (values '() '() G380f@p)) G38dc@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G38da@t))) (G2f62@syntax-dispatch G38da@t '_))) G38c5@t))) (G2f62@syntax-dispatch G38c5@t '#(vector each-any)))) G389f@t))) (G2f62@syntax-dispatch G389f@t '(any . any)))) G388a@t))) (G2f62@syntax-dispatch G388a@t '(#(scheme-id quasisyntax) any)))) G3886@t))) (G2f62@syntax-dispatch G3886@t '#(scheme-id unsyntax-splicing)))) G3858@t))) (G2f62@syntax-dispatch G3858@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G382e@t))) (G2f62@syntax-dispatch G382e@t '((#(scheme-id unsyntax) . each-any) . any)))) G382a@t))) (G2f62@syntax-dispatch G382a@t '#(scheme-id unsyntax)))) G3813@t))) (G2f62@syntax-dispatch G3813@t '(#(scheme-id unsyntax) any)))) G380f@p))) (lambda (G37f8@x) ((lambda (G37fa@t) ((lambda (G37fc@ls/false) (if G37fc@ls/false (apply (lambda (G37fe@e) (call-with-values (lambda () (G37f7@quasi G37fe@e '0)) (lambda (G3803@G3800 G3804@G3801 G3805@G3802) ((lambda (G3809@v G380a@rhs* G380b@lhs*) (G2f18@bless (list 'syntax-case (cons 'list G380a@rhs*) '() (list G380b@lhs* (list 'syntax G3809@v))))) G3805@G3802 G3804@G3801 G3803@G3800)))) G37fc@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G37fa@t))) (G2f62@syntax-dispatch G37fa@t '(_ any)))) G37f8@x)))) '#f)))) (set! G2f54@define-struct-macro (lambda (G38de@stx) (G304d@syntax-violation '#f '"define-struct not supported" G38de@stx))) (set! G2f56@define-record-type-macro (lambda (G38e0@x) ((lambda (G38e3@id G38e5@get-record-name G38e7@get-record-constructor-name G38e9@get-record-predicate-name G38eb@get-clause G38ed@foo-rtd-code G38ef@parent-rtd-code G38f1@parent-rcd-code G38f3@foo-rcd-code G38f5@get-protocol-code G38f7@get-fields G38f9@get-mutator-indices G38fb@get-mutators G38fd@get-accessors G38ff@enumerate G3901@do-define-record G3903@verify-clauses) (begin (set! G38e3@id (lambda (G3ad6@ctxt . G3ad8@str*) (G3051@datum->syntax G3ad6@ctxt (string->symbol (apply string-append (map (lambda (G3ada@x) (if (symbol? G3ada@x) (symbol->string G3ada@x) (if (string? G3ada@x) G3ada@x (assertion-violation 'define-record-type '"BUG")))) G3ad8@str*)))))) (set! G38e5@get-record-name (lambda (G3ac4@spec) ((lambda (G3ac6@t) ((lambda (G3ac8@ls/false) (if G3ac8@ls/false (apply (lambda (G3aca@foo G3acb@make-foo G3acc@foo?) G3aca@foo) G3ac8@ls/false) ((lambda (G3ad0@t) ((lambda (G3ad2@ls/false) (if G3ad2@ls/false (apply (lambda (G3ad4@foo) G3ad4@foo) G3ad2@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3ad0@t))) (G2f62@syntax-dispatch G3ad0@t 'any))) G3ac6@t))) (G2f62@syntax-dispatch G3ac6@t '(any any any)))) G3ac4@spec))) (set! G38e7@get-record-constructor-name (lambda (G3ab0@spec) ((lambda (G3ab2@t) ((lambda (G3ab4@ls/false) (if G3ab4@ls/false (apply (lambda (G3ab6@foo G3ab7@make-foo G3ab8@foo?) G3ab7@make-foo) G3ab4@ls/false) ((lambda (G3abc@t) ((lambda (G3abe@ls/false) (if (and G3abe@ls/false (apply (lambda (G3ac0@foo) (G2d63@id? G3ac0@foo)) G3abe@ls/false)) (apply (lambda (G3ac2@foo) (G38e3@id G3ac2@foo '"make-" (G2d79@stx->datum G3ac2@foo))) G3abe@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3abc@t))) (G2f62@syntax-dispatch G3abc@t 'any))) G3ab2@t))) (G2f62@syntax-dispatch G3ab2@t '(any any any)))) G3ab0@spec))) (set! G38e9@get-record-predicate-name (lambda (G3a9c@spec) ((lambda (G3a9e@t) ((lambda (G3aa0@ls/false) (if G3aa0@ls/false (apply (lambda (G3aa2@foo G3aa3@make-foo G3aa4@foo?) G3aa4@foo?) G3aa0@ls/false) ((lambda (G3aa8@t) ((lambda (G3aaa@ls/false) (if (and G3aaa@ls/false (apply (lambda (G3aac@foo) (G2d63@id? G3aac@foo)) G3aaa@ls/false)) (apply (lambda (G3aae@foo) (G38e3@id G3aae@foo (G2d79@stx->datum G3aae@foo) '"?")) G3aaa@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3aa8@t))) (G2f62@syntax-dispatch G3aa8@t 'any))) G3a9e@t))) (G2f62@syntax-dispatch G3a9e@t '(any any any)))) G3a9c@spec))) (set! G38eb@get-clause (lambda (G3a8a@id G3a8b@ls) ((lambda (G3a8e@t) ((lambda (G3a90@ls/false) (if G3a90@ls/false (apply (lambda () '#f) G3a90@ls/false) ((lambda (G3a92@t) ((lambda (G3a94@ls/false) (if G3a94@ls/false (apply (lambda (G3a96@x G3a97@rest G3a98@ls) (if (G2d6b@free-id=? (G2f18@bless G3a8a@id) G3a96@x) (cons G3a96@x G3a97@rest) (G38eb@get-clause G3a8a@id G3a98@ls))) G3a94@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3a92@t))) (G2f62@syntax-dispatch G3a92@t '((any . any) . any)))) G3a8e@t))) (G2f62@syntax-dispatch G3a8e@t '()))) G3a8b@ls))) (set! G38ed@foo-rtd-code (lambda (G3a38@name G3a39@clause* G3a3a@parent-rtd-code) ((lambda (G3a3f@convert-field-spec*) (begin (set! G3a3f@convert-field-spec* (lambda (G3a70@ls) (list->vector (map (lambda (G3a72@x) ((lambda (G3a74@t) ((lambda (G3a76@ls/false) (if G3a76@ls/false (apply (lambda (G3a78@name G3a79@rest) (list 'mutable G3a78@name)) G3a76@ls/false) ((lambda (G3a7c@t) ((lambda (G3a7e@ls/false) (if G3a7e@ls/false (apply (lambda (G3a80@name G3a81@rest) (list 'immutable G3a80@name)) G3a7e@ls/false) ((lambda (G3a84@t) ((lambda (G3a86@ls/false) (if G3a86@ls/false (apply (lambda (G3a88@name) (list 'immutable G3a88@name)) G3a86@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3a84@t))) (G2f62@syntax-dispatch G3a84@t 'any))) G3a7c@t))) (G2f62@syntax-dispatch G3a7c@t '(#(scheme-id immutable) any . any)))) G3a74@t))) (G2f62@syntax-dispatch G3a74@t '(#(scheme-id mutable) any . any)))) G3a72@x)) G3a70@ls)))) ((lambda (G3a40@uid-code G3a41@sealed? G3a42@opaque? G3a43@fields) (G2f18@bless (list 'make-record-type-descriptor (list 'quote G3a38@name) G3a3a@parent-rtd-code G3a40@uid-code G3a41@sealed? G3a42@opaque? G3a43@fields))) ((lambda (G3a48@t) ((lambda (G3a4a@ls/false) (if G3a4a@ls/false (apply (lambda () (list 'quote (gensym))) G3a4a@ls/false) ((lambda (G3a4c@t) ((lambda (G3a4e@ls/false) (if G3a4e@ls/false (apply (lambda (G3a50@uid) (list 'quote G3a50@uid)) G3a4e@ls/false) ((lambda (G3a52@t) ((lambda (G3a54@ls/false) (if G3a54@ls/false (apply (lambda () '#f) G3a54@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3a52@t))) (G2f62@syntax-dispatch G3a52@t '_))) G3a4c@t))) (G2f62@syntax-dispatch G3a4c@t '(_ any)))) G3a48@t))) (G2f62@syntax-dispatch G3a48@t '(_)))) (G38eb@get-clause 'nongenerative G3a39@clause*)) ((lambda (G3a56@t) ((lambda (G3a58@ls/false) (if G3a58@ls/false (apply (lambda () '#t) G3a58@ls/false) ((lambda (G3a5a@t) ((lambda (G3a5c@ls/false) (if G3a5c@ls/false (apply (lambda () '#f) G3a5c@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3a5a@t))) (G2f62@syntax-dispatch G3a5a@t '_))) G3a56@t))) (G2f62@syntax-dispatch G3a56@t '(_ #(atom #t))))) (G38eb@get-clause 'sealed G3a39@clause*)) ((lambda (G3a5e@t) ((lambda (G3a60@ls/false) (if G3a60@ls/false (apply (lambda () '#t) G3a60@ls/false) ((lambda (G3a62@t) ((lambda (G3a64@ls/false) (if G3a64@ls/false (apply (lambda () '#f) G3a64@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3a62@t))) (G2f62@syntax-dispatch G3a62@t '_))) G3a5e@t))) (G2f62@syntax-dispatch G3a5e@t '(_ #(atom #t))))) (G38eb@get-clause 'opaque G3a39@clause*)) ((lambda (G3a66@t) ((lambda (G3a68@ls/false) (if G3a68@ls/false (apply (lambda (G3a6a@field-spec*) (list 'quote (G3a3f@convert-field-spec* G3a6a@field-spec*))) G3a68@ls/false) ((lambda (G3a6c@t) ((lambda (G3a6e@ls/false) (if G3a6e@ls/false (apply (lambda () ''#()) G3a6e@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3a6c@t))) (G2f62@syntax-dispatch G3a6c@t '_))) G3a66@t))) (G2f62@syntax-dispatch G3a66@t '(_ . each-any)))) (G38eb@get-clause 'fields G3a39@clause*))))) '#f))) (set! G38ef@parent-rtd-code (lambda (G3a20@clause*) ((lambda (G3a22@t) ((lambda (G3a24@ls/false) (if G3a24@ls/false (apply (lambda (G3a26@name) (list 'record-type-descriptor G3a26@name)) G3a24@ls/false) ((lambda (G3a28@t) ((lambda (G3a2a@ls/false) (if G3a2a@ls/false (apply (lambda () ((lambda (G3a2c@t) ((lambda (G3a2e@ls/false) (if G3a2e@ls/false (apply (lambda (G3a30@rtd G3a31@rcd) G3a30@rtd) G3a2e@ls/false) ((lambda (G3a34@t) ((lambda (G3a36@ls/false) (if G3a36@ls/false (apply (lambda () '#f) G3a36@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3a34@t))) (G2f62@syntax-dispatch G3a34@t '#(atom #f)))) G3a2c@t))) (G2f62@syntax-dispatch G3a2c@t '(_ any any)))) (G38eb@get-clause 'parent-rtd G3a20@clause*))) G3a2a@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3a28@t))) (G2f62@syntax-dispatch G3a28@t '#(atom #f)))) G3a22@t))) (G2f62@syntax-dispatch G3a22@t '(_ any)))) (G38eb@get-clause 'parent G3a20@clause*)))) (set! G38f1@parent-rcd-code (lambda (G3a08@clause*) ((lambda (G3a0a@t) ((lambda (G3a0c@ls/false) (if G3a0c@ls/false (apply (lambda (G3a0e@name) (list 'record-constructor-descriptor G3a0e@name)) G3a0c@ls/false) ((lambda (G3a10@t) ((lambda (G3a12@ls/false) (if G3a12@ls/false (apply (lambda () ((lambda (G3a14@t) ((lambda (G3a16@ls/false) (if G3a16@ls/false (apply (lambda (G3a18@rtd G3a19@rcd) G3a19@rcd) G3a16@ls/false) ((lambda (G3a1c@t) ((lambda (G3a1e@ls/false) (if G3a1e@ls/false (apply (lambda () '#f) G3a1e@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3a1c@t))) (G2f62@syntax-dispatch G3a1c@t '#(atom #f)))) G3a14@t))) (G2f62@syntax-dispatch G3a14@t '(_ any any)))) (G38eb@get-clause 'parent-rtd G3a08@clause*))) G3a12@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3a10@t))) (G2f62@syntax-dispatch G3a10@t '#(atom #f)))) G3a0a@t))) (G2f62@syntax-dispatch G3a0a@t '(_ any)))) (G38eb@get-clause 'parent G3a08@clause*)))) (set! G38f3@foo-rcd-code (lambda (G3a00@clause* G3a01@foo-rtd G3a02@protocol G3a03@parent-rcd-code) (list 'make-record-constructor-descriptor G3a01@foo-rtd G3a03@parent-rcd-code G3a02@protocol))) (set! G38f5@get-protocol-code (lambda (G39f4@clause*) ((lambda (G39f6@t) ((lambda (G39f8@ls/false) (if G39f8@ls/false (apply (lambda (G39fa@expr) G39fa@expr) G39f8@ls/false) ((lambda (G39fc@t) ((lambda (G39fe@ls/false) (if G39fe@ls/false (apply (lambda () '#f) G39fe@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G39fc@t))) (G2f62@syntax-dispatch G39fc@t '_))) G39f6@t))) (G2f62@syntax-dispatch G39f6@t '(_ any)))) (G38eb@get-clause 'protocol G39f4@clause*)))) (set! G38f7@get-fields (lambda (G39e2@clause*) ((lambda (G39e4@t) ((lambda (G39e6@ls/false) (if G39e6@ls/false (apply (lambda () '()) G39e6@ls/false) ((lambda (G39e8@t) ((lambda (G39ea@ls/false) (if G39ea@ls/false (apply (lambda (G39ec@f*) G39ec@f*) G39ea@ls/false) ((lambda (G39ee@t) ((lambda (G39f0@ls/false) (if G39f0@ls/false (apply (lambda (G39f2@rest) (G38f7@get-fields G39f2@rest)) G39f0@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G39ee@t))) (G2f62@syntax-dispatch G39ee@t '(_ . any)))) G39e8@t))) (G2f62@syntax-dispatch G39e8@t '((#(scheme-id fields) . each-any) . _)))) G39e4@t))) (G2f62@syntax-dispatch G39e4@t '()))) G39e2@clause*))) (set! G38f9@get-mutator-indices (lambda (G39ca@fields) ((letrec ((G39cc@f (lambda (G39ce@fields G39cf@i) ((lambda (G39d2@t) ((lambda (G39d4@ls/false) (if G39d4@ls/false (apply (lambda () '()) G39d4@ls/false) ((lambda (G39d6@t) ((lambda (G39d8@ls/false) (if G39d8@ls/false (apply (lambda (G39da@rest) (cons G39cf@i (G39cc@f G39da@rest (+ G39cf@i '1)))) G39d8@ls/false) ((lambda (G39dc@t) ((lambda (G39de@ls/false) (if G39de@ls/false (apply (lambda (G39e0@rest) (G39cc@f G39e0@rest (+ G39cf@i '1))) G39de@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G39dc@t))) (G2f62@syntax-dispatch G39dc@t '(_ . any)))) G39d6@t))) (G2f62@syntax-dispatch G39d6@t '((#(scheme-id mutable) . _) . any)))) G39d2@t))) (G2f62@syntax-dispatch G39d2@t '()))) G39ce@fields)))) G39cc@f) G39ca@fields '0))) (set! G38fb@get-mutators (lambda (G39a0@foo G39a1@fields) ((lambda (G39a5@gen-name) (begin (set! G39a5@gen-name (lambda (G39c8@x) (G3051@datum->syntax G39a0@foo (string->symbol (string-append (symbol->string (G3053@syntax->datum G39a0@foo)) '"-" (symbol->string (G3053@syntax->datum G39c8@x)) '"-set!"))))) ((letrec ((G39a6@f (lambda (G39a8@fields) ((lambda (G39aa@t) ((lambda (G39ac@ls/false) (if G39ac@ls/false (apply (lambda () '()) G39ac@ls/false) ((lambda (G39ae@t) ((lambda (G39b0@ls/false) (if G39b0@ls/false (apply (lambda (G39b2@name G39b3@accessor G39b4@mutator G39b5@rest) (cons G39b4@mutator (G39a6@f G39b5@rest))) G39b0@ls/false) ((lambda (G39ba@t) ((lambda (G39bc@ls/false) (if G39bc@ls/false (apply (lambda (G39be@name G39bf@rest) (cons (G39a5@gen-name G39be@name) (G39a6@f G39bf@rest))) G39bc@ls/false) ((lambda (G39c2@t) ((lambda (G39c4@ls/false) (if G39c4@ls/false (apply (lambda (G39c6@rest) (G39a6@f G39c6@rest)) G39c4@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G39c2@t))) (G2f62@syntax-dispatch G39c2@t '(_ . any)))) G39ba@t))) (G2f62@syntax-dispatch G39ba@t '((#(scheme-id mutable) any) . any)))) G39ae@t))) (G2f62@syntax-dispatch G39ae@t '((#(scheme-id mutable) any any any) . any)))) G39aa@t))) (G2f62@syntax-dispatch G39aa@t '()))) G39a8@fields)))) G39a6@f) G39a1@fields))) '#f))) (set! G38fd@get-accessors (lambda (G395c@foo G395d@fields) ((lambda (G3961@gen-name) (begin (set! G3961@gen-name (lambda (G399e@x) (G3051@datum->syntax G395c@foo (string->symbol (string-append (symbol->string (G3053@syntax->datum G395c@foo)) '"-" (symbol->string (G3053@syntax->datum G399e@x))))))) (map (lambda (G3962@field) ((lambda (G3964@t) ((lambda (G3966@ls/false) (if (and G3966@ls/false (apply (lambda (G3968@name G3969@accessor G396a@mutator) (G2d63@id? G3969@accessor)) G3966@ls/false)) (apply (lambda (G396e@name G396f@accessor G3970@mutator) G396f@accessor) G3966@ls/false) ((lambda (G3974@t) ((lambda (G3976@ls/false) (if (and G3976@ls/false (apply (lambda (G3978@name G3979@accessor) (G2d63@id? G3979@accessor)) G3976@ls/false)) (apply (lambda (G397c@name G397d@accessor) G397d@accessor) G3976@ls/false) ((lambda (G3980@t) ((lambda (G3982@ls/false) (if (and G3982@ls/false (apply (lambda (G3984@name) (G2d63@id? G3984@name)) G3982@ls/false)) (apply (lambda (G3986@name) (G3961@gen-name G3986@name)) G3982@ls/false) ((lambda (G3988@t) ((lambda (G398a@ls/false) (if (and G398a@ls/false (apply (lambda (G398c@name) (G2d63@id? G398c@name)) G398a@ls/false)) (apply (lambda (G398e@name) (G3961@gen-name G398e@name)) G398a@ls/false) ((lambda (G3990@t) ((lambda (G3992@ls/false) (if (and G3992@ls/false (apply (lambda (G3994@name) (G2d63@id? G3994@name)) G3992@ls/false)) (apply (lambda (G3996@name) (G3961@gen-name G3996@name)) G3992@ls/false) ((lambda (G3998@t) ((lambda (G399a@ls/false) (if G399a@ls/false (apply (lambda (G399c@others) (G304d@syntax-violation '#f '"invalid field spec" G3962@field)) G399a@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3998@t))) (G2f62@syntax-dispatch G3998@t 'any))) G3990@t))) (G2f62@syntax-dispatch G3990@t 'any))) G3988@t))) (G2f62@syntax-dispatch G3988@t '(#(scheme-id immutable) any)))) G3980@t))) (G2f62@syntax-dispatch G3980@t '(#(scheme-id mutable) any)))) G3974@t))) (G2f62@syntax-dispatch G3974@t '(#(scheme-id immutable) any any)))) G3964@t))) (G2f62@syntax-dispatch G3964@t '(#(scheme-id mutable) any any any)))) G3962@field)) G395d@fields))) '#f))) (set! G38ff@enumerate (lambda (G3954@ls) ((letrec ((G3956@f (lambda (G3958@ls G3959@i) (if (null? G3958@ls) '() (cons G3959@i (G3956@f (cdr G3958@ls) (+ G3959@i '1))))))) G3956@f) G3954@ls '0))) (set! G3901@do-define-record (lambda (G392c@namespec G392d@clause*) ((lambda (G3930@foo) ((lambda (G3932@foo-rtd) ((lambda (G3934@foo-rcd) ((lambda (G3936@protocol) ((lambda (G3938@make-foo) ((lambda (G393a@fields) ((lambda (G393c@idx*) ((lambda (G393e@foo-x*) ((lambda (G3940@set-foo-x!*) ((lambda (G3942@set-foo-idx*) ((lambda (G3944@foo?) ((lambda (G3946@foo-rtd-code) ((lambda (G3948@foo-rcd-code) ((lambda (G394a@protocol-code) ((lambda () (G2f18@bless (cons 'begin (cons (list 'define G3932@foo-rtd G3946@foo-rtd-code) (cons (list 'define G3936@protocol G394a@protocol-code) (cons (list 'define G3934@foo-rcd G3948@foo-rcd-code) (cons (list 'define-syntax G3930@foo (list 'list ''$rtd (list 'syntax G3932@foo-rtd) (list 'syntax G3934@foo-rcd))) (cons (list 'define G3944@foo? (list 'record-predicate G3932@foo-rtd)) (cons (list 'define G3938@make-foo (list 'record-constructor G3934@foo-rcd)) (append (map (lambda (G394c@foo-x G394d@idx) (list 'define G394c@foo-x (list 'record-accessor G3932@foo-rtd G394d@idx))) G393e@foo-x* G393c@idx*) (map (lambda (G3950@set-foo-x! G3951@idx) (list 'define G3950@set-foo-x! (list 'record-mutator G3932@foo-rtd G3951@idx))) G3940@set-foo-x!* G3942@set-foo-idx*))))))))))))) (G38f5@get-protocol-code G392d@clause*))) (G38f3@foo-rcd-code G392d@clause* G3932@foo-rtd G3936@protocol (G38f1@parent-rcd-code G392d@clause*)))) (G38ed@foo-rtd-code G3930@foo G392d@clause* (G38ef@parent-rtd-code G392d@clause*)))) (G38e9@get-record-predicate-name G392c@namespec))) (G38f9@get-mutator-indices G393a@fields))) (G38fb@get-mutators G3930@foo G393a@fields))) (G38fd@get-accessors G3930@foo G393a@fields))) (G38ff@enumerate G393a@fields))) (G38f7@get-fields G392d@clause*))) (G38e7@get-record-constructor-name G392c@namespec))) (gensym))) (gensym))) (gensym))) (G38e5@get-record-name G392c@namespec)))) (set! G3903@verify-clauses (lambda (G390c@x G390d@cls*) ((lambda (G3911@valid-kwds G3913@free-id-member?) (begin (set! G3911@valid-kwds (map G2f18@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3913@free-id-member? (lambda (G3928@x G3929@ls) (and (pair? G3929@ls) (or (G2d6b@free-id=? G3928@x (car G3929@ls)) (G3913@free-id-member? G3928@x (cdr G3929@ls)))))) ((letrec ((G3914@f (lambda (G3916@cls* G3917@seen*) (if (not (null? G3916@cls*)) ((lambda (G391a@t) ((lambda (G391c@ls/false) (if G391c@ls/false (apply (lambda (G391e@kwd G391f@rest) (if (or (not (G2d63@id? G391e@kwd)) (not (G3913@free-id-member? G391e@kwd G3911@valid-kwds))) (G304d@syntax-violation '#f '"not a valid define-record-type keyword" G391e@kwd) (if (G2d71@bound-id-member? G391e@kwd G3917@seen*) (G304d@syntax-violation '#f '"duplicate use of keyword " G390c@x G391e@kwd) (G3914@f (cdr G3916@cls*) (cons G391e@kwd G3917@seen*))))) G391c@ls/false) ((lambda (G3922@t) ((lambda (G3924@ls/false) (if G3924@ls/false (apply (lambda (G3926@cls) (G304d@syntax-violation '#f '"malformed define-record-type clause" G3926@cls)) G3924@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3922@t))) (G2f62@syntax-dispatch G3922@t 'any))) G391a@t))) (G2f62@syntax-dispatch G391a@t '(any . any)))) (car G3916@cls*)) (void))))) G3914@f) G390d@cls* '()))) '#f '#f))) ((lambda (G3904@t) ((lambda (G3906@ls/false) (if G3906@ls/false (apply (lambda (G3908@namespec G3909@clause*) (begin (G3903@verify-clauses G38e0@x G3909@clause*) (G3901@do-define-record G3908@namespec G3909@clause*))) G3906@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3904@t))) (G2f62@syntax-dispatch G3904@t '(_ any . each-any)))) G38e0@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f58@define-condition-type-macro (lambda (G3adc@x) ((lambda (G3adf@mkname) (begin (set! G3adf@mkname (lambda (G3b0c@name G3b0d@suffix) (G3051@datum->syntax G3b0c@name (string->symbol (string-append (symbol->string (G3053@syntax->datum G3b0c@name)) G3b0d@suffix))))) ((lambda (G3ae0@t) ((lambda (G3ae2@ls/false) (if (and G3ae2@ls/false (apply (lambda (G3ae4@ctxt G3ae5@name G3ae6@super G3ae7@constructor G3ae8@predicate G3ae9@field* G3aea@accessor*) (and (G2d63@id? G3ae5@name) (G2d63@id? G3ae6@super) (G2d63@id? G3ae7@constructor) (G2d63@id? G3ae8@predicate) (for-all G2d63@id? G3ae9@field*) (for-all G2d63@id? G3aea@accessor*))) G3ae2@ls/false)) (apply (lambda (G3af2@ctxt G3af3@name G3af4@super G3af5@constructor G3af6@predicate G3af7@field* G3af8@accessor*) ((lambda (G3b00@aux-accessor*) (G2f18@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3af3@name G3af5@constructor (gensym)) (cons (list 'parent G3af4@super) (cons (cons 'fields (map (lambda (G3b02@field G3b03@aux) (list 'immutable G3b02@field G3b03@aux)) G3af7@field* G3b00@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3af6@predicate (list 'condition-predicate (list 'record-type-descriptor G3af3@name))) (map (lambda (G3b06@accessor G3b07@aux) (list 'define G3b06@accessor (list 'condition-accessor (list 'record-type-descriptor G3af3@name) G3b07@aux))) G3af8@accessor* G3b00@aux-accessor*)))))) (map (lambda (G3b0a@x) (gensym)) G3af8@accessor*))) G3ae2@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3ae0@t))) (G2f62@syntax-dispatch G3ae0@t '(any any any any any . #(each (any any)))))) G3adc@x))) '#f))) (set! G2f5a@incorrect-usage-macro (lambda (G3b10@e) (G304d@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b10@e))) (set! G2f5c@parameterize-macro (lambda (G3b12@e) ((lambda (G3b14@t) ((lambda (G3b16@ls/false) (if G3b16@ls/false (apply (lambda (G3b18@b G3b19@b*) (G2f18@bless (cons 'let (cons '() (cons G3b18@b G3b19@b*))))) G3b16@ls/false) ((lambda (G3b1c@t) ((lambda (G3b1e@ls/false) (if G3b1e@ls/false (apply (lambda (G3b20@olhs* G3b21@orhs* G3b22@b G3b23@b*) ((lambda (G3b28@lhs* G3b29@rhs*) (G2f18@bless (cons (list 'lambda (append G3b28@lhs* G3b29@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b2c@lhs G3b2d@rhs) (list 'let (list (list 't (list G3b2c@lhs))) (list G3b2c@lhs G3b2d@rhs) (cons 'set! (cons G3b2d@rhs '(t))))) G3b28@lhs* G3b29@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b22@b G3b23@b*))) '(swap)))))) (append G3b20@olhs* G3b21@orhs*)))) (G303b@generate-temporaries G3b20@olhs*) (G303b@generate-temporaries G3b21@orhs*))) G3b1e@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3b1c@t))) (G2f62@syntax-dispatch G3b1c@t '(_ #(each (any any)) any . each-any)))) G3b14@t))) (G2f62@syntax-dispatch G3b14@t '(_ () any . each-any)))) G3b12@e))) (set! G2f5e@foreign-call-transformer (lambda (G3b30@e G3b31@r G3b32@mr) ((lambda (G3b36@t) ((lambda (G3b38@ls/false) (if G3b38@ls/false (apply (lambda (G3b3a@name G3b3b@arg*) (cons 'foreign-call (cons (G2f86@chi-expr G3b3a@name G3b31@r G3b32@mr) (G2f82@chi-expr* G3b3b@arg* G3b31@r G3b32@mr)))) G3b38@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3b36@t))) (G2f62@syntax-dispatch G3b36@t '(_ any . each-any)))) G3b30@e))) (set! G2f60@convert-pattern (lambda (G3b3e@pattern G3b3f@keys) ((lambda (G3b43@cvt* G3b45@cvt) (begin (set! G3b43@cvt* (lambda (G3bd4@p* G3bd5@n G3bd6@ids) (if (null? G3bd4@p*) (values '() G3bd6@ids) (call-with-values (lambda () (G3b43@cvt* (cdr G3bd4@p*) G3bd5@n G3bd6@ids)) (lambda (G3bdc@G3bda G3bdd@G3bdb) ((lambda (G3be0@ids G3be1@y) (call-with-values (lambda () (G3b45@cvt (car G3bd4@p*) G3bd5@n G3be0@ids)) (lambda (G3be6@G3be4 G3be7@G3be5) ((lambda (G3bea@ids G3beb@x) (values (cons G3beb@x G3be1@y) G3bea@ids)) G3be7@G3be5 G3be6@G3be4)))) G3bdd@G3bdb G3bdc@G3bda)))))) (set! G3b45@cvt (lambda (G3b46@p G3b47@n G3b48@ids) ((lambda (G3b4c@t) ((lambda (G3b4e@ls/false) (if (and G3b4e@ls/false (apply (lambda (G3b50@id) (G2d63@id? G3b50@id)) G3b4e@ls/false)) (apply (lambda (G3b52@id) (if (G2d71@bound-id-member? G3b46@p G3b3f@keys) (values (vector 'free-id G3b46@p) G3b48@ids) (if (G2d6b@free-id=? G3b46@p (G2eec@scheme-stx '_)) (values '_ G3b48@ids) (values 'any (cons (cons G3b46@p G3b47@n) G3b48@ids))))) G3b4e@ls/false) ((lambda (G3b54@t) ((lambda (G3b56@ls/false) (if (and G3b56@ls/false (apply (lambda (G3b58@p G3b59@dots) (G2f64@ellipsis? G3b59@dots)) G3b56@ls/false)) (apply (lambda (G3b5c@p G3b5d@dots) (call-with-values (lambda () (G3b45@cvt G3b5c@p (+ G3b47@n '1) G3b48@ids)) (lambda (G3b62@G3b60 G3b63@G3b61) ((lambda (G3b66@ids G3b67@p) (values (if (eq? G3b67@p 'any) 'each-any (vector 'each G3b67@p)) G3b66@ids)) G3b63@G3b61 G3b62@G3b60)))) G3b56@ls/false) ((lambda (G3b6a@t) ((lambda (G3b6c@ls/false) (if (and G3b6c@ls/false (apply (lambda (G3b6e@x G3b6f@dots G3b70@ys G3b71@z) (G2f64@ellipsis? G3b6f@dots)) G3b6c@ls/false)) (apply (lambda (G3b76@x G3b77@dots G3b78@ys G3b79@z) (call-with-values (lambda () (G3b45@cvt G3b79@z G3b47@n G3b48@ids)) (lambda (G3b80@G3b7e G3b81@G3b7f) ((lambda (G3b84@ids G3b85@z) (call-with-values (lambda () (G3b43@cvt* G3b78@ys G3b47@n G3b84@ids)) (lambda (G3b8a@G3b88 G3b8b@G3b89) ((lambda (G3b8e@ids G3b8f@ys) (call-with-values (lambda () (G3b45@cvt G3b76@x (+ G3b47@n '1) G3b8e@ids)) (lambda (G3b94@G3b92 G3b95@G3b93) ((lambda (G3b98@ids G3b99@x) (values (vector 'each+ G3b99@x (reverse G3b8f@ys) G3b85@z) G3b98@ids)) G3b95@G3b93 G3b94@G3b92)))) G3b8b@G3b89 G3b8a@G3b88)))) G3b81@G3b7f G3b80@G3b7e)))) G3b6c@ls/false) ((lambda (G3b9c@t) ((lambda (G3b9e@ls/false) (if G3b9e@ls/false (apply (lambda (G3ba0@x G3ba1@y) (call-with-values (lambda () (G3b45@cvt G3ba1@y G3b47@n G3b48@ids)) (lambda (G3ba6@G3ba4 G3ba7@G3ba5) ((lambda (G3baa@ids G3bab@y) (call-with-values (lambda () (G3b45@cvt G3ba0@x G3b47@n G3baa@ids)) (lambda (G3bb0@G3bae G3bb1@G3baf) ((lambda (G3bb4@ids G3bb5@x) (values (cons G3bb5@x G3bab@y) G3bb4@ids)) G3bb1@G3baf G3bb0@G3bae)))) G3ba7@G3ba5 G3ba6@G3ba4)))) G3b9e@ls/false) ((lambda (G3bb8@t) ((lambda (G3bba@ls/false) (if G3bba@ls/false (apply (lambda () (values '() G3b48@ids)) G3bba@ls/false) ((lambda (G3bbc@t) ((lambda (G3bbe@ls/false) (if (and G3bbe@ls/false (apply (lambda (G3bc0@p) (not (G2d2b@stx? G3bc0@p))) G3bbe@ls/false)) (apply (lambda (G3bc2@p) (call-with-values (lambda () (G3b45@cvt G3bc2@p G3b47@n G3b48@ids)) (lambda (G3bc6@G3bc4 G3bc7@G3bc5) ((lambda (G3bca@ids G3bcb@p) (values (vector 'vector G3bcb@p) G3bca@ids)) G3bc7@G3bc5 G3bc6@G3bc4)))) G3bbe@ls/false) ((lambda (G3bce@t) ((lambda (G3bd0@ls/false) (if G3bd0@ls/false (apply (lambda (G3bd2@datum) (values (vector 'atom (G2d79@stx->datum G3bd2@datum)) G3b48@ids)) G3bd0@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3bce@t))) (G2f62@syntax-dispatch G3bce@t 'any))) G3bbc@t))) (G2f62@syntax-dispatch G3bbc@t '#(vector each-any)))) G3bb8@t))) (G2f62@syntax-dispatch G3bb8@t '()))) G3b9c@t))) (G2f62@syntax-dispatch G3b9c@t '(any . any)))) G3b6a@t))) (G2f62@syntax-dispatch G3b6a@t '(any any . #(each+ any () any))))) G3b54@t))) (G2f62@syntax-dispatch G3b54@t '(any any)))) G3b4c@t))) (G2f62@syntax-dispatch G3b4c@t 'any))) G3b46@p))) (G3b45@cvt G3b3e@pattern '0 '()))) '#f '#f))) (set! G2f62@syntax-dispatch ((lambda () ((lambda (G3bef@stx^ G3bf1@match-each G3bf3@match-each+ G3bf5@match-each-any G3bf7@match-empty G3bf9@combine G3bfb@match* G3bfd@match) (begin (set! G3bef@stx^ (lambda (G3cb8@e G3cb9@m* G3cba@s* G3cbb@ae*) (if (and (null? G3cb9@m*) (null? G3cba@s*) (null? G3cbb@ae*)) G3cb8@e (G2d4b@mkstx G3cb8@e G3cb9@m* G3cba@s* G3cbb@ae*)))) (set! G3bf1@match-each (lambda (G3c9b@e G3c9c@p G3c9d@m* G3c9e@s* G3c9f@ae*) (if (pair? G3c9b@e) ((lambda (G3ca5@first) (and G3ca5@first ((lambda (G3ca7@rest) (and G3ca7@rest (cons G3ca5@first G3ca7@rest))) (G3bf1@match-each (cdr G3c9b@e) G3c9c@p G3c9d@m* G3c9e@s* G3c9f@ae*)))) (G3bfd@match (car G3c9b@e) G3c9c@p G3c9d@m* G3c9e@s* G3c9f@ae* '())) (if (null? G3c9b@e) '() (if (G2d2b@stx? G3c9b@e) (and (not (G2cdd@top-marked? G3c9d@m*)) (call-with-values (lambda () (G2d49@join-wraps G3c9d@m* G3c9e@s* G3c9f@ae* G3c9b@e)) (lambda (G3cac@G3ca9 G3cad@G3caa G3cae@G3cab) ((lambda (G3cb2@ae* G3cb3@s* G3cb4@m*) (G3bf1@match-each (G2d2f@stx-expr G3c9b@e) G3c9c@p G3cb4@m* G3cb3@s* G3cb2@ae*)) G3cae@G3cab G3cad@G3caa G3cac@G3ca9)))) (if (G28f4@G281f@annotation? G3c9b@e) (G3bf1@match-each (G28f6@G2823@annotation-expression G3c9b@e) G3c9c@p G3c9d@m* G3c9e@s* G3c9f@ae*) '#f)))))) (set! G3bf3@match-each+ (lambda (G3c61@e G3c62@x-pat G3c63@y-pat G3c64@z-pat G3c65@m* G3c66@s* G3c67@ae* G3c68@r) ((letrec ((G3c71@f (lambda (G3c73@e G3c74@m* G3c75@s* G3c76@ae*) (if (pair? G3c73@e) (call-with-values (lambda () (G3c71@f (cdr G3c73@e) G3c74@m* G3c75@s* G3c76@ae*)) (lambda (G3c7e@G3c7b G3c7f@G3c7c G3c80@G3c7d) ((lambda (G3c84@r G3c85@y-pat G3c86@xr*) (if G3c84@r (if (null? G3c85@y-pat) ((lambda (G3c8a@xr) (if G3c8a@xr (values (cons G3c8a@xr G3c86@xr*) G3c85@y-pat G3c84@r) (values '#f '#f '#f))) (G3bfd@match (car G3c73@e) G3c62@x-pat G3c74@m* G3c75@s* G3c76@ae* '())) (values '() (cdr G3c85@y-pat) (G3bfd@match (car G3c73@e) (car G3c85@y-pat) G3c74@m* G3c75@s* G3c76@ae* G3c84@r))) (values '#f '#f '#f))) G3c80@G3c7d G3c7f@G3c7c G3c7e@G3c7b))) (if (G2d2b@stx? G3c73@e) (if (G2cdd@top-marked? G3c74@m*) (values '() G3c63@y-pat (G3bfd@match G3c73@e G3c64@z-pat G3c74@m* G3c75@s* G3c76@ae* G3c68@r)) (call-with-values (lambda () (G2d49@join-wraps G3c74@m* G3c75@s* G3c76@ae* G3c73@e)) (lambda (G3c8f@G3c8c G3c90@G3c8d G3c91@G3c8e) ((lambda (G3c95@ae* G3c96@s* G3c97@m*) (G3c71@f (G2d2f@stx-expr G3c73@e) G3c97@m* G3c96@s* G3c95@ae*)) G3c91@G3c8e G3c90@G3c8d G3c8f@G3c8c)))) (if (G28f4@G281f@annotation? G3c73@e) (G3c71@f (G28f6@G2823@annotation-expression G3c73@e) G3c74@m* G3c75@s* G3c76@ae*) (values '() G3c63@y-pat (G3bfd@match G3c73@e G3c64@z-pat G3c74@m* G3c75@s* G3c76@ae* G3c68@r)))))))) G3c71@f) G3c61@e G3c65@m* G3c66@s* G3c67@ae*))) (set! G3bf5@match-each-any (lambda (G3c48@e G3c49@m* G3c4a@s* G3c4b@ae*) (if (pair? G3c48@e) ((lambda (G3c50@l) (and G3c50@l (cons (G3bef@stx^ (car G3c48@e) G3c49@m* G3c4a@s* G3c4b@ae*) G3c50@l))) (G3bf5@match-each-any (cdr G3c48@e) G3c49@m* G3c4a@s* G3c4b@ae*)) (if (null? G3c48@e) '() (if (G2d2b@stx? G3c48@e) (and (not (G2cdd@top-marked? G3c49@m*)) (call-with-values (lambda () (G2d49@join-wraps G3c49@m* G3c4a@s* G3c4b@ae* G3c48@e)) (lambda (G3c55@G3c52 G3c56@G3c53 G3c57@G3c54) ((lambda (G3c5b@ae* G3c5c@s* G3c5d@m*) (G3bf5@match-each-any (G2d2f@stx-expr G3c48@e) G3c5d@m* G3c5c@s* G3c5b@ae*)) G3c57@G3c54 G3c56@G3c53 G3c55@G3c52)))) (if (G28f4@G281f@annotation? G3c48@e) (G3bf5@match-each-any (G28f6@G2823@annotation-expression G3c48@e) G3c49@m* G3c4a@s* G3c4b@ae*) '#f)))))) (set! G3bf7@match-empty (lambda (G3c42@p G3c43@r) (if (null? G3c42@p) G3c43@r (if (eq? G3c42@p '_) G3c43@r (if (eq? G3c42@p 'any) (cons '() G3c43@r) (if (pair? G3c42@p) (G3bf7@match-empty (car G3c42@p) (G3bf7@match-empty (cdr G3c42@p) G3c43@r)) (if (eq? G3c42@p 'each-any) (cons '() G3c43@r) ((lambda (G3c46@t) (if (memv G3c46@t '(each)) (G3bf7@match-empty (vector-ref G3c42@p '1) G3c43@r) (if (memv G3c46@t '(each+)) (G3bf7@match-empty (vector-ref G3c42@p '1) (G3bf7@match-empty (reverse (vector-ref G3c42@p '2)) (G3bf7@match-empty (vector-ref G3c42@p '3) G3c43@r))) (if (memv G3c46@t '(free-id atom)) G3c43@r (if (memv G3c46@t '(scheme-id atom)) G3c43@r (if (memv G3c46@t '(vector)) (G3bf7@match-empty (vector-ref G3c42@p '1) G3c43@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c42@p))))))) (vector-ref G3c42@p '0))))))))) (set! G3bf9@combine (lambda (G3c3e@r* G3c3f@r) (if (null? (car G3c3e@r*)) G3c3f@r (cons (map car G3c3e@r*) (G3bf9@combine (map cdr G3c3e@r*) G3c3f@r))))) (set! G3bfb@match* (lambda (G3c1d@e G3c1e@p G3c1f@m* G3c20@s* G3c21@ae* G3c22@r) (if (null? G3c1e@p) (and (null? G3c1d@e) G3c22@r) (if (pair? G3c1e@p) (and (pair? G3c1d@e) (G3bfd@match (car G3c1d@e) (car G3c1e@p) G3c1f@m* G3c20@s* G3c21@ae* (G3bfd@match (cdr G3c1d@e) (cdr G3c1e@p) G3c1f@m* G3c20@s* G3c21@ae* G3c22@r))) (if (eq? G3c1e@p 'each-any) ((lambda (G3c29@l) (and G3c29@l (cons G3c29@l G3c22@r))) (G3bf5@match-each-any G3c1d@e G3c1f@m* G3c20@s* G3c21@ae*)) ((lambda (G3c2b@t) (if (memv G3c2b@t '(each)) (if (null? G3c1d@e) (G3bf7@match-empty (vector-ref G3c1e@p '1) G3c22@r) ((lambda (G3c2d@r*) (and G3c2d@r* (G3bf9@combine G3c2d@r* G3c22@r))) (G3bf1@match-each G3c1d@e (vector-ref G3c1e@p '1) G3c1f@m* G3c20@s* G3c21@ae*))) (if (memv G3c2b@t '(free-id)) (and (symbol? G3c1d@e) (G2cdd@top-marked? G3c1f@m*) (G2d6b@free-id=? (G3bef@stx^ G3c1d@e G3c1f@m* G3c20@s* G3c21@ae*) (vector-ref G3c1e@p '1)) G3c22@r) (if (memv G3c2b@t '(scheme-id)) (and (symbol? G3c1d@e) (G2cdd@top-marked? G3c1f@m*) (G2d6b@free-id=? (G3bef@stx^ G3c1d@e G3c1f@m* G3c20@s* G3c21@ae*) (G2eec@scheme-stx (vector-ref G3c1e@p '1))) G3c22@r) (if (memv G3c2b@t '(each+)) (call-with-values (lambda () (G3bf3@match-each+ G3c1d@e (vector-ref G3c1e@p '1) (vector-ref G3c1e@p '2) (vector-ref G3c1e@p '3) G3c1f@m* G3c20@s* G3c21@ae* G3c22@r)) (lambda (G3c32@G3c2f G3c33@G3c30 G3c34@G3c31) ((lambda (G3c38@r G3c39@y-pat G3c3a@xr*) (and G3c38@r (null? G3c39@y-pat) (if (null? G3c3a@xr*) (G3bf7@match-empty (vector-ref G3c1e@p '1) G3c38@r) (G3bf9@combine G3c3a@xr* G3c38@r)))) G3c34@G3c31 G3c33@G3c30 G3c32@G3c2f))) (if (memv G3c2b@t '(atom)) (and (fast-equal? (vector-ref G3c1e@p '1) (G2d77@strip G3c1d@e G3c1f@m*)) G3c22@r) (if (memv G3c2b@t '(vector)) (and (vector? G3c1d@e) (G3bfd@match (vector->list G3c1d@e) (vector-ref G3c1e@p '1) G3c1f@m* G3c20@s* G3c21@ae* G3c22@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c1e@p)))))))) (vector-ref G3c1e@p '0))))))) (set! G3bfd@match (lambda (G3c02@e G3c03@p G3c04@m* G3c05@s* G3c06@ae* G3c07@r) (if (not G3c07@r) '#f (if (eq? G3c03@p '_) G3c07@r (if (eq? G3c03@p 'any) (cons (G3bef@stx^ G3c02@e G3c04@m* G3c05@s* G3c06@ae*) G3c07@r) (if (G2d2b@stx? G3c02@e) (and (not (G2cdd@top-marked? G3c04@m*)) (call-with-values (lambda () (G2d49@join-wraps G3c04@m* G3c05@s* G3c06@ae* G3c02@e)) (lambda (G3c11@G3c0e G3c12@G3c0f G3c13@G3c10) ((lambda (G3c17@ae* G3c18@s* G3c19@m*) (G3bfd@match (G2d2f@stx-expr G3c02@e) G3c03@p G3c19@m* G3c18@s* G3c17@ae* G3c07@r)) G3c13@G3c10 G3c12@G3c0f G3c11@G3c0e)))) (if (G28f4@G281f@annotation? G3c02@e) (G3bfd@match (G28f6@G2823@annotation-expression G3c02@e) G3c03@p G3c04@m* G3c05@s* G3c06@ae* G3c07@r) (G3bfb@match* G3c02@e G3c03@p G3c04@m* G3c05@s* G3c06@ae* G3c07@r)))))))) (lambda (G3bfe@e G3bff@p) (G3bfd@match G3bfe@e G3bff@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f64@ellipsis? (lambda (G3cc0@x) (and (G2d63@id? G3cc0@x) (G2d6b@free-id=? G3cc0@x (G2eec@scheme-stx '...))))) (set! G2f66@underscore? (lambda (G3cc2@x) (and (G2d63@id? G3cc2@x) (G2d6b@free-id=? G3cc2@x (G2eec@scheme-stx '_))))) (set! G2f68@verify-literals (lambda (G3cc4@lits G3cc5@expr) (for-each (lambda (G3cc8@x) (if (or (not (G2d63@id? G3cc8@x)) (G2f64@ellipsis? G3cc8@x) (G2f66@underscore? G3cc8@x)) (G304d@syntax-violation '#f '"invalid literal" G3cc5@expr G3cc8@x) (void))) G3cc4@lits))) (set! G2f6a@syntax-case-transformer ((lambda () ((lambda (G3ccb@build-dispatch-call G3ccd@invalid-ids-error G3ccf@gen-clause G3cd1@gen-syntax-case) (begin (set! G3ccb@build-dispatch-call (lambda (G3d3a@pvars G3d3b@expr G3d3c@y G3d3d@r G3d3e@mr) ((lambda (G3d44@ids G3d45@levels) ((lambda (G3d48@labels G3d49@new-vars) ((lambda (G3d4c@body) (list '(primitive apply) (G2cbd@G2bfb@build-lambda '#f G3d49@new-vars G3d4c@body) G3d3c@y)) (G2f86@chi-expr (G2d4f@add-subst (G2d1e@make-full-rib G3d44@ids G3d48@labels) G3d3b@expr) (append (map (lambda (G3d4e@label G3d4f@var G3d50@level) (cons G3d4e@label (G2d83@make-binding 'syntax (cons G3d4f@var G3d50@level)))) G3d48@labels G3d49@new-vars (map cdr G3d3a@pvars)) G3d3d@r) G3d3e@mr))) (map G2ce3@gen-label G3d44@ids) (map G2cdf@gen-lexical G3d44@ids))) (map car G3d3a@pvars) (map cdr G3d3a@pvars)))) (set! G3ccd@invalid-ids-error (lambda (G3d2e@id* G3d2f@e G3d30@class) ((letrec ((G3d34@find (lambda (G3d36@id* G3d37@ok*) (if (null? G3d36@id*) (G304d@syntax-violation '#f '"invalid syntax" G3d2f@e) (if (G2d63@id? (car G3d36@id*)) (if (G2d71@bound-id-member? (car G3d36@id*) G3d37@ok*) (G3049@syntax-error (car G3d36@id*) '"duplicate " G3d30@class) (G3d34@find (cdr G3d36@id*) (cons (car G3d36@id*) G3d37@ok*))) (G3049@syntax-error (car G3d36@id*) '"invalid " G3d30@class)))))) G3d34@find) G3d2e@id* '()))) (set! G3ccf@gen-clause (lambda (G3d08@x G3d09@keys G3d0a@clauses G3d0b@r G3d0c@mr G3d0d@pat G3d0e@fender G3d0f@expr) (call-with-values (lambda () (G2f60@convert-pattern G3d0d@pat G3d09@keys)) (lambda (G3d1a@G3d18 G3d1b@G3d19) ((lambda (G3d1e@pvars G3d1f@p) (if (not (G2d6f@distinct-bound-ids? (map car G3d1e@pvars))) (G3ccd@invalid-ids-error (map car G3d1e@pvars) G3d0d@pat '"pattern variable") (if (not (for-all (lambda (G3d22@x) (not (G2f64@ellipsis? (car G3d22@x)))) G3d1e@pvars)) (G304d@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d0d@pat) ((lambda (G3d24@y) ((lambda (G3d26@test) ((lambda (G3d28@conseq) ((lambda (G3d2a@altern) (list (G2cbd@G2bfb@build-lambda '#f (list G3d24@y) (list 'if G3d26@test G3d28@conseq G3d2a@altern)) (list '(primitive syntax-dispatch) G3d08@x (list 'quote G3d1f@p)))) (G3cd1@gen-syntax-case G3d08@x G3d09@keys G3d0a@clauses G3d0b@r G3d0c@mr))) (G3ccb@build-dispatch-call G3d1e@pvars G3d0f@expr G3d24@y G3d0b@r G3d0c@mr))) (if (eq? G3d0e@fender '#t) G3d24@y ((lambda (G3d2c@call) (list 'if G3d24@y G3d2c@call (list 'quote '#f))) (G3ccb@build-dispatch-call G3d1e@pvars G3d0e@fender G3d24@y G3d0b@r G3d0c@mr))))) (G2cdf@gen-lexical 'tmp))))) G3d1b@G3d19 G3d1a@G3d18))))) (set! G3cd1@gen-syntax-case (lambda (G3ce6@x G3ce7@keys G3ce8@clauses G3ce9@r G3cea@mr) (if (null? G3ce8@clauses) (list '(primitive syntax-error) G3ce6@x) ((lambda (G3cf0@t) ((lambda (G3cf2@ls/false) (if G3cf2@ls/false (apply (lambda (G3cf4@pat G3cf5@expr) (if (and (G2d63@id? G3cf4@pat) (not (G2d71@bound-id-member? G3cf4@pat G3ce7@keys)) (not (G2f64@ellipsis? G3cf4@pat))) (if (G2d6b@free-id=? G3cf4@pat (G2eec@scheme-stx '_)) (G2f86@chi-expr G3cf5@expr G3ce9@r G3cea@mr) ((lambda (G3cf8@lab G3cf9@lex) ((lambda (G3cfc@body) (list (G2cbd@G2bfb@build-lambda '#f (list G3cf9@lex) G3cfc@body) G3ce6@x)) (G2f86@chi-expr (G2d4f@add-subst (G2d1e@make-full-rib (list G3cf4@pat) (list G3cf8@lab)) G3cf5@expr) (cons (cons G3cf8@lab (G2d83@make-binding 'syntax (cons G3cf9@lex '0))) G3ce9@r) G3cea@mr))) (G2ce3@gen-label G3cf4@pat) (G2cdf@gen-lexical G3cf4@pat))) (G3ccf@gen-clause G3ce6@x G3ce7@keys (cdr G3ce8@clauses) G3ce9@r G3cea@mr G3cf4@pat '#t G3cf5@expr))) G3cf2@ls/false) ((lambda (G3cfe@t) ((lambda (G3d00@ls/false) (if G3d00@ls/false (apply (lambda (G3d02@pat G3d03@fender G3d04@expr) (G3ccf@gen-clause G3ce6@x G3ce7@keys (cdr G3ce8@clauses) G3ce9@r G3cea@mr G3d02@pat G3d03@fender G3d04@expr)) G3d00@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3cfe@t))) (G2f62@syntax-dispatch G3cfe@t '(any any any)))) G3cf0@t))) (G2f62@syntax-dispatch G3cf0@t '(any any)))) (car G3ce8@clauses))))) (lambda (G3cd2@e G3cd3@r G3cd4@mr) ((lambda (G3cd8@t) ((lambda (G3cda@ls/false) (if G3cda@ls/false (apply (lambda (G3cdc@expr G3cdd@keys G3cde@clauses) (begin (G2f68@verify-literals G3cdd@keys G3cd2@e) ((lambda (G3ce2@x) ((lambda (G3ce4@body) (list (G2cbd@G2bfb@build-lambda '#f (list G3ce2@x) G3ce4@body) (G2f86@chi-expr G3cdc@expr G3cd3@r G3cd4@mr))) (G3cd1@gen-syntax-case G3ce2@x G3cdd@keys G3cde@clauses G3cd3@r G3cd4@mr))) (G2cdf@gen-lexical 'tmp)))) G3cda@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3cd8@t))) (G2f62@syntax-dispatch G3cd8@t '(_ any each-any . each-any)))) G3cd2@e)))) '#f '#f '#f '#f)))) (set! G2f6c@ellipsis-map (lambda (G3d54@proc G3d55@ls . G3d58@ls*) ((lambda (G3d5b@who) (begin (set! G3d5b@who '...) (begin (if (not (list? G3d55@ls)) (assertion-violation G3d5b@who '"not a list" G3d55@ls) (void)) (if (not (null? G3d58@ls*)) ((lambda (G3d5c@n) (for-each (lambda (G3d5e@x) (begin (if (not (list? G3d5e@x)) (assertion-violation G3d5b@who '"not a list" G3d5e@x) (void)) (if (not (= (length G3d5e@x) G3d5c@n)) (assertion-violation G3d5b@who '"length mismatch" G3d55@ls G3d5e@x) (void)))) G3d58@ls*)) (length G3d55@ls)) (void)) (apply map G3d54@proc G3d55@ls G3d58@ls*)))) '#f))) (set! G2f6e@syntax-transformer ((lambda () ((lambda (G3d61@gen-syntax G3d63@gen-ref G3d65@gen-append G3d67@gen-mappend G3d69@gen-map G3d6b@gen-cons G3d6d@gen-vector G3d6f@regen) (begin (set! G3d61@gen-syntax (lambda (G3dd4@src G3dd5@e G3dd6@r G3dd7@maps G3dd8@ellipsis? G3dd9@vec?) ((lambda (G3de0@t) ((lambda (G3de2@ls/false) (if (and G3de2@ls/false (apply (lambda (G3de4@dots) (G3dd8@ellipsis? G3de4@dots)) G3de2@ls/false)) (apply (lambda (G3de6@dots) (G304d@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dd4@src)) G3de2@ls/false) ((lambda (G3de8@t) ((lambda (G3dea@ls/false) (if (and G3dea@ls/false (apply (lambda (G3dec@id) (G2d63@id? G3dec@id)) G3dea@ls/false)) (apply (lambda (G3dee@id) ((lambda (G3df0@label) ((lambda (G3df2@b) ((lambda () (if (eq? (G2d85@binding-type G3df2@b) 'syntax) (call-with-values (lambda () ((lambda (G3df6@var.lev) (G3d63@gen-ref G3dd4@src (car G3df6@var.lev) (cdr G3df6@var.lev) G3dd7@maps)) (G2d87@binding-value G3df2@b))) (lambda (G3df8@G3df4 G3df9@G3df5) ((lambda (G3dfc@maps G3dfd@var) (values (list 'ref G3dfd@var) G3dfc@maps)) G3df9@G3df5 G3df8@G3df4))) (values (list 'quote G3dd5@e) G3dd7@maps))))) (G2d81@label->binding G3df0@label G3dd6@r))) (G2d7d@id->label G3dd5@e))) G3dea@ls/false) ((lambda (G3e00@t) ((lambda (G3e02@ls/false) (if (and G3e02@ls/false (apply (lambda (G3e04@dots G3e05@e) (G3dd8@ellipsis? G3e04@dots)) G3e02@ls/false)) (apply (lambda (G3e08@dots G3e09@e) (if G3dd9@vec? (G304d@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dd4@src) (G3d61@gen-syntax G3dd4@src G3e09@e G3dd6@r G3dd7@maps (lambda (G3e0c@x) '#f) '#f))) G3e02@ls/false) ((lambda (G3e0e@t) ((lambda (G3e10@ls/false) (if (and G3e10@ls/false (apply (lambda (G3e12@x G3e13@dots G3e14@y) (G3dd8@ellipsis? G3e13@dots)) G3e10@ls/false)) (apply (lambda (G3e18@x G3e19@dots G3e1a@y) ((letrec ((G3e1e@f (lambda (G3e20@y G3e21@k) ((lambda (G3e24@t) ((lambda (G3e26@ls/false) (if G3e26@ls/false (apply (lambda () (G3e21@k G3dd7@maps)) G3e26@ls/false) ((lambda (G3e28@t) ((lambda (G3e2a@ls/false) (if (and G3e2a@ls/false (apply (lambda (G3e2c@dots G3e2d@y) (G3dd8@ellipsis? G3e2c@dots)) G3e2a@ls/false)) (apply (lambda (G3e30@dots G3e31@y) (G3e1e@f G3e31@y (lambda (G3e34@maps) (call-with-values (lambda () (G3e21@k (cons '() G3e34@maps))) (lambda (G3e38@G3e36 G3e39@G3e37) ((lambda (G3e3c@maps G3e3d@x) (if (null? (car G3e3c@maps)) (G304d@syntax-violation '#f '"extra ellipsis in syntax form" G3dd4@src) (values (G3d67@gen-mappend G3e3d@x (car G3e3c@maps)) (cdr G3e3c@maps)))) G3e39@G3e37 G3e38@G3e36)))))) G3e2a@ls/false) ((lambda (G3e40@t) ((lambda (G3e42@ls/false) (if G3e42@ls/false (apply (lambda () (call-with-values (lambda () (G3d61@gen-syntax G3dd4@src G3e20@y G3dd6@r G3dd7@maps G3dd8@ellipsis? G3dd9@vec?)) (lambda (G3e46@G3e44 G3e47@G3e45) ((lambda (G3e4a@maps G3e4b@y) (call-with-values (lambda () (G3e21@k G3e4a@maps)) (lambda (G3e50@G3e4e G3e51@G3e4f) ((lambda (G3e54@maps G3e55@x) (values (G3d65@gen-append G3e55@x G3e4b@y) G3e54@maps)) G3e51@G3e4f G3e50@G3e4e)))) G3e47@G3e45 G3e46@G3e44)))) G3e42@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3e40@t))) (G2f62@syntax-dispatch G3e40@t '_))) G3e28@t))) (G2f62@syntax-dispatch G3e28@t '(any . any)))) G3e24@t))) (G2f62@syntax-dispatch G3e24@t '()))) G3e20@y)))) G3e1e@f) G3e1a@y (lambda (G3e58@maps) (call-with-values (lambda () (G3d61@gen-syntax G3dd4@src G3e18@x G3dd6@r (cons '() G3e58@maps) G3dd8@ellipsis? '#f)) (lambda (G3e5c@G3e5a G3e5d@G3e5b) ((lambda (G3e60@maps G3e61@x) (if (null? (car G3e60@maps)) (G304d@syntax-violation '#f '"extra ellipsis in syntax form" G3dd4@src) (values (G3d69@gen-map G3e61@x (car G3e60@maps)) (cdr G3e60@maps)))) G3e5d@G3e5b G3e5c@G3e5a)))))) G3e10@ls/false) ((lambda (G3e64@t) ((lambda (G3e66@ls/false) (if G3e66@ls/false (apply (lambda (G3e68@x G3e69@y) (call-with-values (lambda () (G3d61@gen-syntax G3dd4@src G3e68@x G3dd6@r G3dd7@maps G3dd8@ellipsis? '#f)) (lambda (G3e6e@G3e6c G3e6f@G3e6d) ((lambda (G3e72@maps G3e73@xnew) (call-with-values (lambda () (G3d61@gen-syntax G3dd4@src G3e69@y G3dd6@r G3e72@maps G3dd8@ellipsis? G3dd9@vec?)) (lambda (G3e78@G3e76 G3e79@G3e77) ((lambda (G3e7c@maps G3e7d@ynew) (values (G3d6b@gen-cons G3dd5@e G3e68@x G3e69@y G3e73@xnew G3e7d@ynew) G3e7c@maps)) G3e79@G3e77 G3e78@G3e76)))) G3e6f@G3e6d G3e6e@G3e6c)))) G3e66@ls/false) ((lambda (G3e80@t) ((lambda (G3e82@ls/false) (if G3e82@ls/false (apply (lambda (G3e84@ls) (call-with-values (lambda () (G3d61@gen-syntax G3dd4@src G3e84@ls G3dd6@r G3dd7@maps G3dd8@ellipsis? '#t)) (lambda (G3e88@G3e86 G3e89@G3e87) ((lambda (G3e8c@maps G3e8d@lsnew) (values (G3d6d@gen-vector G3dd5@e G3e84@ls G3e8d@lsnew) G3e8c@maps)) G3e89@G3e87 G3e88@G3e86)))) G3e82@ls/false) ((lambda (G3e90@t) ((lambda (G3e92@ls/false) (if G3e92@ls/false (apply (lambda () (values (list 'quote G3dd5@e) G3dd7@maps)) G3e92@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3e90@t))) (G2f62@syntax-dispatch G3e90@t '_))) G3e80@t))) (G2f62@syntax-dispatch G3e80@t '#(vector each-any)))) G3e64@t))) (G2f62@syntax-dispatch G3e64@t '(any . any)))) G3e0e@t))) (G2f62@syntax-dispatch G3e0e@t '(any any . any)))) G3e00@t))) (G2f62@syntax-dispatch G3e00@t '(any any)))) G3de8@t))) (G2f62@syntax-dispatch G3de8@t 'any))) G3de0@t))) (G2f62@syntax-dispatch G3de0@t 'any))) G3dd5@e))) (set! G3d63@gen-ref (lambda (G3dbc@src G3dbd@var G3dbe@level G3dbf@maps) (if (= G3dbe@level '0) (values G3dbd@var G3dbf@maps) (if (null? G3dbf@maps) (G304d@syntax-violation '#f '"missing ellipsis in syntax form" G3dbc@src) (call-with-values (lambda () (G3d63@gen-ref G3dbc@src G3dbd@var (- G3dbe@level '1) (cdr G3dbf@maps))) (lambda (G3dc6@G3dc4 G3dc7@G3dc5) ((lambda (G3dca@outer-maps G3dcb@outer-var) ((lambda (G3dce@t) (if G3dce@t ((lambda (G3dd0@b) (values (cdr G3dd0@b) G3dbf@maps)) G3dce@t) ((lambda (G3dd2@inner-var) (values G3dd2@inner-var (cons (cons (cons G3dcb@outer-var G3dd2@inner-var) (car G3dbf@maps)) G3dca@outer-maps))) (G2cdf@gen-lexical 'tmp)))) (assq G3dcb@outer-var (car G3dbf@maps)))) G3dc7@G3dc5 G3dc6@G3dc4))))))) (set! G3d65@gen-append (lambda (G3db8@x G3db9@y) (if (fast-equal? G3db9@y ''()) G3db8@x (list 'append G3db8@x G3db9@y)))) (set! G3d67@gen-mappend (lambda (G3db4@e G3db5@map-env) (list 'apply '(primitive append) (G3d69@gen-map G3db4@e G3db5@map-env)))) (set! G3d69@gen-map (lambda (G3da2@e G3da3@map-env) ((lambda (G3da6@formals G3da7@actuals) (if (eq? (car G3da2@e) 'ref) (car G3da7@actuals) (if (for-all (lambda (G3daa@x) (and (eq? (car G3daa@x) 'ref) (memq (cadr G3daa@x) G3da6@formals))) (cdr G3da2@e)) ((lambda (G3dac@args) (cons 'map (cons (list 'primitive (car G3da2@e)) G3dac@args))) (map ((lambda (G3dae@r) (lambda (G3db0@x) (cdr (assq (cadr G3db0@x) G3dae@r)))) (map cons G3da6@formals G3da7@actuals)) (cdr G3da2@e))) (cons* 'map (list 'lambda G3da6@formals G3da2@e) G3da7@actuals)))) (map cdr G3da3@map-env) (map (lambda (G3db2@x) (list 'ref (car G3db2@x))) G3da3@map-env)))) (set! G3d6b@gen-cons (lambda (G3d92@e G3d93@x G3d94@y G3d95@xnew G3d96@ynew) ((lambda (G3d9c@t) (if (memv G3d9c@t '(quote)) (if (eq? (car G3d95@xnew) 'quote) ((lambda (G3d9e@xnew G3d9f@ynew) (if (and (eq? G3d9e@xnew G3d93@x) (eq? G3d9f@ynew G3d94@y)) (list 'quote G3d92@e) (list 'quote (cons G3d9e@xnew G3d9f@ynew)))) (cadr G3d95@xnew) (cadr G3d96@ynew)) (if (null? (cadr G3d96@ynew)) (list 'list G3d95@xnew) (list 'cons G3d95@xnew G3d96@ynew))) (if (memv G3d9c@t '(list)) (cons 'list (cons G3d95@xnew (cdr G3d96@ynew))) (list 'cons G3d95@xnew G3d96@ynew)))) (car G3d96@ynew)))) (set! G3d6d@gen-vector (lambda (G3d8c@e G3d8d@ls G3d8e@lsnew) (if (eq? (car G3d8e@lsnew) 'quote) (if (eq? (cadr G3d8e@lsnew) G3d8d@ls) (list 'quote G3d8c@e) (list 'quote (list->vector (cadr G3d8e@lsnew)))) (if (eq? (car G3d8e@lsnew) 'list) (cons 'vector (cdr G3d8e@lsnew)) (list 'list->vector G3d8e@lsnew))))) (set! G3d6f@regen (lambda (G3d86@x) ((lambda (G3d88@t) (if (memv G3d88@t '(ref)) (cadr G3d86@x) (if (memv G3d88@t '(primitive)) (list 'primitive (cadr G3d86@x)) (if (memv G3d88@t '(quote)) (list 'quote (cadr G3d86@x)) (if (memv G3d88@t '(lambda)) (G2cbd@G2bfb@build-lambda '#f (cadr G3d86@x) (G3d6f@regen (caddr G3d86@x))) (if (memv G3d88@t '(map)) ((lambda (G3d8a@ls) (cons '(primitive ellipsis-map) G3d8a@ls)) (map G3d6f@regen (cdr G3d86@x))) (cons (list 'primitive (car G3d86@x)) (map G3d6f@regen (cdr G3d86@x))))))))) (car G3d86@x)))) (lambda (G3d70@e G3d71@r G3d72@mr) ((lambda (G3d76@t) ((lambda (G3d78@ls/false) (if G3d78@ls/false (apply (lambda (G3d7a@x) (call-with-values (lambda () (G3d61@gen-syntax G3d70@e G3d7a@x G3d71@r '() G2f64@ellipsis? '#f)) (lambda (G3d7e@G3d7c G3d7f@G3d7d) ((lambda (G3d82@maps G3d83@e) (G3d6f@regen G3d83@e)) G3d7f@G3d7d G3d7e@G3d7c)))) G3d78@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3d76@t))) (G2f62@syntax-dispatch G3d76@t '(_ any)))) G3d70@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f70@core-macro-transformer (lambda (G3e94@name) ((lambda (G3e96@t) (if (memv G3e96@t '(quote)) G2f12@quote-transformer (if (memv G3e96@t '(lambda)) G2f16@lambda-transformer (if (memv G3e96@t '(case-lambda)) G2f14@case-lambda-transformer (if (memv G3e96@t '(letrec)) G2efa@letrec-transformer (if (memv G3e96@t '(letrec*)) G2efc@letrec*-transformer (if (memv G3e96@t '(if)) G2f0a@if-transformer (if (memv G3e96@t '(and)) G2f0c@and-transformer (if (memv G3e96@t '(or)) G2f0e@or-transformer (if (memv G3e96@t '(foreign-call)) G2f5e@foreign-call-transformer (if (memv G3e96@t '(syntax-case)) G2f6a@syntax-case-transformer (if (memv G3e96@t '(syntax)) G2f6e@syntax-transformer (if (memv G3e96@t '(type-descriptor)) G2f00@type-descriptor-transformer (if (memv G3e96@t '(record-type-descriptor)) G2f02@record-type-descriptor-transformer (if (memv G3e96@t '(record-constructor-descriptor)) G2f04@record-constructor-descriptor-transformer (if (memv G3e96@t '(fluid-let-syntax)) G2efe@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e94@name))))))))))))))))) G3e94@name))) (set! G2f72@file-options-macro (lambda (G3e98@x) ((lambda (G3e9b@valid-option?) (begin (set! G3e9b@valid-option? (lambda (G3ea4@x) (and (G2d63@id? G3ea4@x) (memq (G2d65@id->sym G3ea4@x) '(no-fail no-create no-truncate))))) ((lambda (G3e9c@t) ((lambda (G3e9e@ls/false) (if (and G3e9e@ls/false (apply (lambda (G3ea0@opt*) (and (for-all G3e9b@valid-option? G3ea0@opt*) (G2900@G28a1@file-options-spec (map G2d65@id->sym G3ea0@opt*)))) G3e9e@ls/false)) (apply (lambda (G3ea2@opt*) (G2f18@bless (list 'quote (G2900@G28a1@file-options-spec (map G2d65@id->sym G3ea2@opt*))))) G3e9e@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3e9c@t))) (G2f62@syntax-dispatch G3e9c@t '(_ . each-any)))) G3e98@x))) '#f))) (set! G2f74@symbol-macro (lambda (G3ea6@x G3ea7@set) ((lambda (G3eaa@t) ((lambda (G3eac@ls/false) (if (and G3eac@ls/false (apply (lambda (G3eae@name) (and (G2d63@id? G3eae@name) (memq (G2d65@id->sym G3eae@name) G3ea7@set))) G3eac@ls/false)) (apply (lambda (G3eb0@name) (G2f18@bless (list 'quote G3eb0@name))) G3eac@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3eaa@t))) (G2f62@syntax-dispatch G3eaa@t '(_ any)))) G3ea6@x))) (set! G2f76@macro-transformer (lambda (G3eb2@x) (if (procedure? G3eb2@x) G3eb2@x (if (symbol? G3eb2@x) ((lambda (G3eb4@t) (if (memv G3eb4@t '(define-record-type)) G2f56@define-record-type-macro (if (memv G3eb4@t '(define-struct)) G2f54@define-struct-macro (if (memv G3eb4@t '(include)) G2f4a@include-macro (if (memv G3eb4@t '(cond)) G2f46@cond-macro (if (memv G3eb4@t '(let)) G2f1e@let-macro (if (memv G3eb4@t '(do)) G2f3e@do-macro (if (memv G3eb4@t '(or)) G2f42@or-macro (if (memv G3eb4@t '(and)) G2f44@and-macro (if (memv G3eb4@t '(let*)) G2f40@let*-macro (if (memv G3eb4@t '(let-values)) G2f20@let-values-macro (if (memv G3eb4@t '(let*-values)) G2f22@let*-values-macro (if (memv G3eb4@t '(syntax-rules)) G2f4e@syntax-rules-macro (if (memv G3eb4@t '(quasiquote)) G2f50@quasiquote-macro (if (memv G3eb4@t '(quasisyntax)) G2f52@quasisyntax-macro (if (memv G3eb4@t '(with-syntax)) G2f1a@with-syntax-macro (if (memv G3eb4@t '(when)) G2f06@when-macro (if (memv G3eb4@t '(unless)) G2f08@unless-macro (if (memv G3eb4@t '(case)) G2f10@case-macro (if (memv G3eb4@t '(identifier-syntax)) G2f3c@identifier-syntax-macro (if (memv G3eb4@t '(time)) G2f34@time-macro (if (memv G3eb4@t '(delay)) G2f36@delay-macro (if (memv G3eb4@t '(assert)) G2f38@assert-macro (if (memv G3eb4@t '(endianness)) G2f3a@endianness-macro (if (memv G3eb4@t '(guard)) G2f30@guard-macro (if (memv G3eb4@t '(define-enumeration)) G2f32@define-enumeration-macro (if (memv G3eb4@t '(trace-lambda)) G2f24@trace-lambda-macro (if (memv G3eb4@t '(trace-define)) G2f26@trace-define-macro (if (memv G3eb4@t '(trace-define-syntax)) G2f28@trace-define-syntax-macro (if (memv G3eb4@t '(trace-let-syntax)) G2f2c@trace-let-syntax-macro (if (memv G3eb4@t '(trace-letrec-syntax)) G2f2e@trace-letrec-syntax-macro (if (memv G3eb4@t '(define-condition-type)) G2f58@define-condition-type-macro (if (memv G3eb4@t '(parameterize)) G2f5c@parameterize-macro (if (memv G3eb4@t '(include-into)) G2f4c@include-into-macro (if (memv G3eb4@t '(eol-style)) (lambda (G3eb6@x) (G2f74@symbol-macro G3eb6@x '(none lf cr crlf nel crnel ls))) (if (memv G3eb4@t '(error-handling-mode)) (lambda (G3eb8@x) (G2f74@symbol-macro G3eb8@x '(ignore raise replace))) (if (memv G3eb4@t '(buffer-mode)) (lambda (G3eba@x) (G2f74@symbol-macro G3eba@x '(none line block))) (if (memv G3eb4@t '(file-options)) G2f72@file-options-macro (if (memv G3eb4@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f5a@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3eb2@x)))))))))))))))))))))))))))))))))))))))) G3eb2@x) (error 'core-macro-transformer '"BUG: invalid macro" G3eb2@x))))) (set! G2f78@local-macro-transformer (lambda (G3ebc@x) (car G3ebc@x))) (set! G2f7a@do-macro-call (lambda (G3ebe@transformer G3ebf@expr) ((lambda (G3ec2@out) (begin ((letrec ((G3ec4@f (lambda (G3ec6@x) (if (not (G2d2b@stx? G3ec6@x)) (if (pair? G3ec6@x) (begin (G3ec4@f (car G3ec6@x)) (G3ec4@f (cdr G3ec6@x))) (if (vector? G3ec6@x) (vector-for-each G3ec4@f G3ec6@x) (if (symbol? G3ec6@x) (G304d@syntax-violation '#f '"raw symbol encountered in output of macro" G3ebf@expr G3ec6@x) (void)))) (void))))) G3ec4@f) G3ec2@out) (G2d4d@add-mark (G2d43@gen-mark) G3ec2@out G3ebf@expr))) (G3ebe@transformer (G2d4d@add-mark G2d45@anti-mark G3ebf@expr '#f))))) (set! G2f7c@chi-macro (lambda (G3ec8@p G3ec9@e) (G2f7a@do-macro-call (G2f76@macro-transformer G3ec8@p) G3ec9@e))) (set! G2f7e@chi-local-macro (lambda (G3ecc@p G3ecd@e) (G2f7a@do-macro-call (G2f78@local-macro-transformer G3ecc@p) G3ecd@e))) (set! G2f80@chi-global-macro (lambda (G3ed0@p G3ed1@e) ((lambda (G3ed4@lib G3ed5@loc) (begin (G2b7b@G2a23@visit-library G3ed4@lib) ((lambda (G3ed8@x) ((lambda (G3eda@transformer) (G2f7a@do-macro-call G3eda@transformer G3ed1@e)) (if (procedure? G3ed8@x) G3ed8@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ed8@x)))) (symbol-value G3ed5@loc)))) (car G3ed0@p) (cdr G3ed0@p)))) (set! G2f82@chi-expr* (lambda (G3edc@e* G3edd@r G3ede@mr) (if (null? G3edc@e*) '() ((lambda (G3ee2@e) (cons G3ee2@e (G2f82@chi-expr* (cdr G3edc@e*) G3edd@r G3ede@mr))) (G2f86@chi-expr (car G3edc@e*) G3edd@r G3ede@mr))))) (set! G2f84@chi-application (lambda (G3ee4@e G3ee5@r G3ee6@mr) ((lambda (G3eea@t) ((lambda (G3eec@ls/false) (if G3eec@ls/false (apply (lambda (G3eee@rator G3eef@rands) ((lambda (G3ef2@rator) (cons G3ef2@rator (G2f82@chi-expr* G3eef@rands G3ee5@r G3ee6@mr))) (G2f86@chi-expr G3eee@rator G3ee5@r G3ee6@mr))) G3eec@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3eea@t))) (G2f62@syntax-dispatch G3eea@t '(any . each-any)))) G3ee4@e))) (set! G2f86@chi-expr (lambda (G3ef4@e G3ef5@r G3ef6@mr) (call-with-values (lambda () (G2d8b@syntax-type G3ef4@e G3ef5@r)) (lambda (G3efd@G3efa G3efe@G3efb G3eff@G3efc) ((lambda (G3f03@kwd G3f04@value G3f05@type) ((lambda (G3f09@t) (if (memv G3f09@t '(core-macro)) ((lambda (G3f0b@transformer) (G3f0b@transformer G3ef4@e G3ef5@r G3ef6@mr)) (G2f70@core-macro-transformer G3f04@value)) (if (memv G3f09@t '(global)) ((lambda (G3f0d@lib) ((lambda (G3f0f@loc) ((lambda () (begin ((G2fcf@inv-collector) G3f0d@lib) G3f0f@loc)))) (cdr G3f04@value))) (car G3f04@value)) (if (memv G3f09@t '(core-prim)) ((lambda (G3f11@name) (list 'primitive G3f11@name)) G3f04@value) (if (memv G3f09@t '(call)) (G2f84@chi-application G3ef4@e G3ef5@r G3ef6@mr) (if (memv G3f09@t '(lexical)) ((lambda (G3f13@lex) G3f13@lex) (G2eee@lexical-var G3f04@value)) (if (memv G3f09@t '(global-macro global-macro!)) (G2f86@chi-expr (G2f80@chi-global-macro G3f04@value G3ef4@e) G3ef5@r G3ef6@mr) (if (memv G3f09@t '(local-macro local-macro!)) (G2f86@chi-expr (G2f7e@chi-local-macro G3f04@value G3ef4@e) G3ef5@r G3ef6@mr) (if (memv G3f09@t '(macro macro!)) (G2f86@chi-expr (G2f7c@chi-macro G3f04@value G3ef4@e) G3ef5@r G3ef6@mr) (if (memv G3f09@t '(constant)) ((lambda (G3f15@datum) (list 'quote G3f15@datum)) G3f04@value) (if (memv G3f09@t '(set!)) (G2f88@chi-set! G3ef4@e G3ef5@r G3ef6@mr) (if (memv G3f09@t '(begin)) ((lambda (G3f17@t) ((lambda (G3f19@ls/false) (if G3f19@ls/false (apply (lambda (G3f1b@x G3f1c@x*) (G2cc0@G2c31@build-sequence '#f (G2f82@chi-expr* (cons G3f1b@x G3f1c@x*) G3ef5@r G3ef6@mr))) G3f19@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3f17@t))) (G2f62@syntax-dispatch G3f17@t '(_ any . each-any)))) G3ef4@e) (if (memv G3f09@t '(let-syntax letrec-syntax)) ((lambda (G3f1f@t) ((lambda (G3f21@ls/false) (if (and G3f21@ls/false (apply (lambda (G3f23@xlhs* G3f24@xrhs* G3f25@xbody G3f26@xbody*) (if (not (G2d6d@valid-bound-ids? G3f23@xlhs*)) (G304d@syntax-violation '#f '"invalid identifiers" G3ef4@e) (void))) G3f21@ls/false)) (apply (lambda (G3f2b@xlhs* G3f2c@xrhs* G3f2d@xbody G3f2e@xbody*) ((lambda (G3f33@xlab*) ((lambda (G3f35@xrib) ((lambda (G3f37@xb*) ((lambda () (G2cc0@G2c31@build-sequence '#f (G2f82@chi-expr* (map (lambda (G3f39@x) (G2d4f@add-subst G3f35@xrib G3f39@x)) (cons G3f2d@xbody G3f2e@xbody*)) (append (map cons G3f33@xlab* G3f37@xb*) G3ef5@r) (append (map cons G3f33@xlab* G3f37@xb*) G3ef6@mr)))))) (map (lambda (G3f3b@x) (G2da3@make-eval-transformer (G2fc1@expand-transformer (if (eq? G3f05@type 'let-syntax) G3f3b@x (G2d4f@add-subst G3f35@xrib G3f3b@x)) G3ef6@mr))) G3f2c@xrhs*))) (G2d1e@make-full-rib G3f2b@xlhs* G3f33@xlab*))) (map G2ce3@gen-label G3f2b@xlhs*))) G3f21@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3f1f@t))) (G2f62@syntax-dispatch G3f1f@t '(_ #(each (any any)) any . each-any)))) G3ef4@e) (if (memv G3f09@t '(displaced-lexical)) (G304d@syntax-violation '#f '"identifier out of context" G3ef4@e) (if (memv G3f09@t '(syntax)) (G304d@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ef4@e) (if (memv G3f09@t '(define define-syntax module import library)) (G304d@syntax-violation '#f (string-append ((lambda (G3f3d@t) (if (memv G3f3d@t '(define)) '"a definition" (if (memv G3f3d@t '(define-syntax)) '"a define-syntax" (if (memv G3f3d@t '(module)) '"a module definition" (if (memv G3f3d@t '(library)) '"a library definition" (if (memv G3f3d@t '(import)) '"an import declaration" (if (memv G3f3d@t '(export)) '"an export declaration" '"a non-expression"))))))) G3f05@type) '" was found where an expression was expected") G3ef4@e) (if (memv G3f09@t '(mutable)) (G304d@syntax-violation '#f '"attempt to reference an unexportable variable" G3ef4@e) (G304d@syntax-violation '#f '"invalid expression" G3ef4@e)))))))))))))))))) G3f05@type)) G3eff@G3efc G3efe@G3efb G3efd@G3efa))))) (set! G2f88@chi-set! (lambda (G3f3f@e G3f40@r G3f41@mr) ((lambda (G3f45@t) ((lambda (G3f47@ls/false) (if (and G3f47@ls/false (apply (lambda (G3f49@x G3f4a@v) (G2d63@id? G3f49@x)) G3f47@ls/false)) (apply (lambda (G3f4d@x G3f4e@v) (call-with-values (lambda () (G2d8b@syntax-type G3f4d@x G3f40@r)) (lambda (G3f54@G3f51 G3f55@G3f52 G3f56@G3f53) ((lambda (G3f5a@kwd G3f5b@value G3f5c@type) ((lambda (G3f60@t) (if (memv G3f60@t '(lexical)) (begin (G2ef2@set-lexical-mutable! G3f5b@value '#t) (list 'set! (G2eee@lexical-var G3f5b@value) (G2f86@chi-expr G3f4e@v G3f40@r G3f41@mr))) (if (memv G3f60@t '(core-prim)) (G304d@syntax-violation '#f '"cannot modify imported core primitive" G3f3f@e) (if (memv G3f60@t '(global)) (G304d@syntax-violation '#f '"attempt to modify imported binding" G3f3f@e) (if (memv G3f60@t '(global-macro!)) (G2f86@chi-expr (G2f80@chi-global-macro G3f5b@value G3f3f@e) G3f40@r G3f41@mr) (if (memv G3f60@t '(local-macro!)) (G2f86@chi-expr (G2f7e@chi-local-macro G3f5b@value G3f3f@e) G3f40@r G3f41@mr) (if (memv G3f60@t '(mutable)) (G304d@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f3f@e) (G304d@syntax-violation '#f '"invalid syntax" G3f3f@e)))))))) G3f5c@type)) G3f56@G3f53 G3f55@G3f52 G3f54@G3f51)))) G3f47@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3f45@t))) (G2f62@syntax-dispatch G3f45@t '(_ any any)))) G3f3f@e))) (set! G2f8a@verify-formals (lambda (G3f62@fmls G3f63@stx) ((lambda (G3f66@t) ((lambda (G3f68@ls/false) (if G3f68@ls/false (apply (lambda (G3f6a@x*) (if (not (G2d6d@valid-bound-ids? G3f6a@x*)) (G2f1c@invalid-fmls-error G3f63@stx G3f62@fmls) (void))) G3f68@ls/false) ((lambda (G3f6c@t) ((lambda (G3f6e@ls/false) (if G3f6e@ls/false (apply (lambda (G3f70@x* G3f71@x) (if (not (G2d6d@valid-bound-ids? (cons G3f71@x G3f70@x*))) (G2f1c@invalid-fmls-error G3f63@stx G3f62@fmls) (void))) G3f6e@ls/false) ((lambda (G3f74@t) ((lambda (G3f76@ls/false) (if G3f76@ls/false (apply (lambda () (G304d@syntax-violation '#f '"invalid syntax" G3f63@stx)) G3f76@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3f74@t))) (G2f62@syntax-dispatch G3f74@t '_))) G3f6c@t))) (G2f62@syntax-dispatch G3f6c@t '#(each+ any () any)))) G3f66@t))) (G2f62@syntax-dispatch G3f66@t 'each-any))) G3f62@fmls))) (set! G2f8c@chi-lambda-clause (lambda (G3f78@stx G3f79@fmls G3f7a@body* G3f7b@r G3f7c@mr) ((lambda (G3f82@t) ((lambda (G3f84@ls/false) (if G3f84@ls/false (apply (lambda (G3f86@x*) (begin (G2f8a@verify-formals G3f79@fmls G3f78@stx) ((lambda (G3f88@lex* G3f89@lab*) (values G3f88@lex* (G2f9c@chi-internal (G2d4f@add-subst (G2d1e@make-full-rib G3f86@x* G3f89@lab*) G3f7a@body*) (G2ef6@add-lexicals G3f89@lab* G3f88@lex* G3f7b@r) G3f7c@mr))) (map G2cdf@gen-lexical G3f86@x*) (map G2ce3@gen-label G3f86@x*)))) G3f84@ls/false) ((lambda (G3f8c@t) ((lambda (G3f8e@ls/false) (if G3f8e@ls/false (apply (lambda (G3f90@x* G3f91@x) (begin (G2f8a@verify-formals G3f79@fmls G3f78@stx) ((lambda (G3f94@lex* G3f95@lab* G3f96@lex G3f97@lab) (values (append G3f94@lex* G3f96@lex) (G2f9c@chi-internal (G2d4f@add-subst (G2d1e@make-full-rib (cons G3f91@x G3f90@x*) (cons G3f97@lab G3f95@lab*)) G3f7a@body*) (G2ef6@add-lexicals (cons G3f97@lab G3f95@lab*) (cons G3f96@lex G3f94@lex*) G3f7b@r) G3f7c@mr))) (map G2cdf@gen-lexical G3f90@x*) (map G2ce3@gen-label G3f90@x*) (G2cdf@gen-lexical G3f91@x) (G2ce3@gen-label G3f91@x)))) G3f8e@ls/false) ((lambda (G3f9c@t) ((lambda (G3f9e@ls/false) (if G3f9e@ls/false (apply (lambda () (G304d@syntax-violation '#f '"invalid syntax" G3f79@fmls)) G3f9e@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G3f9c@t))) (G2f62@syntax-dispatch G3f9c@t '_))) G3f8c@t))) (G2f62@syntax-dispatch G3f8c@t '#(each+ any () any)))) G3f82@t))) (G2f62@syntax-dispatch G3f82@t 'each-any))) G3f79@fmls))) (set! G2f8e@chi-lambda-clause* (lambda (G3fa0@stx G3fa1@fmls* G3fa2@body** G3fa3@r G3fa4@mr) (if (null? G3fa1@fmls*) (values '() '()) (call-with-values (lambda () (G2f8c@chi-lambda-clause G3fa0@stx (car G3fa1@fmls*) (car G3fa2@body**) G3fa3@r G3fa4@mr)) (lambda (G3fac@G3faa G3fad@G3fab) ((lambda (G3fb0@b G3fb1@a) (call-with-values (lambda () (G2f8e@chi-lambda-clause* G3fa0@stx (cdr G3fa1@fmls*) (cdr G3fa2@body**) G3fa3@r G3fa4@mr)) (lambda (G3fb6@G3fb4 G3fb7@G3fb5) ((lambda (G3fba@b* G3fbb@a*) (values (cons G3fb1@a G3fbb@a*) (cons G3fb0@b G3fba@b*))) G3fb7@G3fb5 G3fb6@G3fb4)))) G3fad@G3fab G3fac@G3faa)))))) (set! G2f90@chi-defun (lambda (G3fbe@x G3fbf@r G3fc0@mr) ((lambda (G3fc4@fmls G3fc5@body*) (call-with-values (lambda () (G2f8c@chi-lambda-clause G3fc4@fmls G3fc4@fmls G3fc5@body* G3fbf@r G3fc0@mr)) (lambda (G3fca@G3fc8 G3fcb@G3fc9) ((lambda (G3fce@body G3fcf@fmls) (G2cbd@G2bfb@build-lambda '#f G3fcf@fmls G3fce@body)) G3fcb@G3fc9 G3fca@G3fc8)))) (car G3fbe@x) (cdr G3fbe@x)))) (set! G2f92@chi-rhs (lambda (G3fd2@rhs G3fd3@r G3fd4@mr) ((lambda (G3fd8@t) (if (memv G3fd8@t '(defun)) (G2f90@chi-defun (cdr G3fd2@rhs) G3fd3@r G3fd4@mr) (if (memv G3fd8@t '(expr)) ((lambda (G3fda@expr) (G2f86@chi-expr G3fda@expr G3fd3@r G3fd4@mr)) (cdr G3fd2@rhs)) (if (memv G3fd8@t '(top-expr)) ((lambda (G3fdc@expr) (G2cc0@G2c31@build-sequence '#f (list (G2f86@chi-expr G3fdc@expr G3fd3@r G3fd4@mr) (G2cc1@G2c33@build-void)))) (cdr G3fd2@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fd2@rhs))))) (car G3fd2@rhs)))) (set! G2f94@expand-interaction-rhs*/init* (lambda (G3fde@lhs* G3fdf@rhs* G3fe0@init* G3fe1@r G3fe2@mr) ((letrec ((G3fe8@f (lambda (G3fea@lhs* G3feb@rhs*) (if (null? G3fea@lhs*) (map (lambda (G3fee@x) (G2f86@chi-expr G3fee@x G3fe1@r G3fe2@mr)) G3fe0@init*) ((lambda (G3ff0@lhs G3ff1@rhs) ((lambda (G3ff4@t) (if (memv G3ff4@t '(defun)) ((lambda (G3ff6@rhs) (cons (list 'set! G3ff0@lhs G3ff6@rhs) (G3fe8@f (cdr G3fea@lhs*) (cdr G3feb@rhs*)))) (G2f90@chi-defun (cdr G3ff1@rhs) G3fe1@r G3fe2@mr)) (if (memv G3ff4@t '(expr)) ((lambda (G3ff8@rhs) (cons (list 'set! G3ff0@lhs G3ff8@rhs) (G3fe8@f (cdr G3fea@lhs*) (cdr G3feb@rhs*)))) (G2f86@chi-expr (cdr G3ff1@rhs) G3fe1@r G3fe2@mr)) (if (memv G3ff4@t '(top-expr)) ((lambda (G3ffa@e) (cons G3ffa@e (G3fe8@f (cdr G3fea@lhs*) (cdr G3feb@rhs*)))) (G2f86@chi-expr (cdr G3ff1@rhs) G3fe1@r G3fe2@mr)) (error 'expand-interaction '"invallid" G3ff1@rhs))))) (car G3ff1@rhs))) (car G3fea@lhs*) (car G3feb@rhs*)))))) G3fe8@f) G3fde@lhs* G3fdf@rhs*))) (set! G2f96@chi-rhs* (lambda (G3ffc@rhs* G3ffd@r G3ffe@mr) ((letrec ((G4002@f (lambda (G4004@ls) (if (null? G4004@ls) '() ((lambda (G4006@a) (cons G4006@a (G4002@f (cdr G4004@ls)))) (G2f92@chi-rhs (car G4004@ls) G3ffd@r G3ffe@mr)))))) G4002@f) G3ffc@rhs*))) (set! G2f98@find-bound=? (lambda (G4008@x G4009@lhs* G400a@rhs*) (if (null? G4009@lhs*) '#f (if (G2d69@bound-id=? G4008@x (car G4009@lhs*)) (car G400a@rhs*) (G2f98@find-bound=? G4008@x (cdr G4009@lhs*) (cdr G400a@rhs*)))))) (set! G2f9a@find-dups (lambda (G400e@ls) ((letrec ((G4010@f (lambda (G4012@ls G4013@dups) (if (null? G4012@ls) G4013@dups ((lambda (G4016@t) (if G4016@t ((lambda (G4018@x) (G4010@f (cdr G4012@ls) (cons (list (car G4012@ls) G4018@x) G4013@dups))) G4016@t) (G4010@f (cdr G4012@ls) G4013@dups))) (G2f98@find-bound=? (car G4012@ls) (cdr G4012@ls) (cdr G4012@ls))))))) G4010@f) G400e@ls '()))) (set! G2f9c@chi-internal (lambda (G401a@e* G401b@r G401c@mr) ((lambda (G4020@rib) (call-with-values (lambda () (G2fbf@chi-body* (map (lambda (G402a@x) (G2d4f@add-subst G4020@rib G402a@x)) (G2d61@syntax->list G401a@e*)) G401b@r G401c@mr '() '() '() '() '() G4020@rib '#f)) (lambda (G402c@G4022 G402d@G4023 G402e@G4024 G402f@G4025 G4030@G4026 G4031@G4027 G4032@G4028 G4033@G4029) ((lambda (G403c@_exp* G403d@kwd* G403e@mod** G403f@rhs* G4040@lex* G4041@mr G4042@r G4043@e*) (begin (if (null? G4043@e*) (G304d@syntax-violation '#f '"no expression in body" G4043@e*) (void)) ((lambda (G404c@init*) ((lambda (G404e@rhs*) ((lambda () (G2cc3@G2c37@build-letrec* '#f (reverse G4040@lex*) (reverse G404e@rhs*) (G2cc0@G2c31@build-sequence '#f G404c@init*))))) (G2f96@chi-rhs* G403f@rhs* G4042@r G4041@mr))) (G2f82@chi-expr* (append (apply append (reverse G403e@mod**)) G4043@e*) G4042@r G4041@mr)))) G4033@G4029 G4032@G4028 G4031@G4027 G4030@G4026 G402f@G4025 G402e@G4024 G402d@G4023 G402c@G4022)))) (G2d0e@make-empty-rib)))) (set! G2f9e@parse-module (lambda (G4050@e) ((lambda (G4052@t) ((lambda (G4054@ls/false) (if G4054@ls/false (apply (lambda (G4056@export* G4057@b*) (begin (if (not (for-all G2d63@id? G4056@export*)) (G304d@syntax-violation '#f '"module exports must be identifiers" G4050@e) (void)) (values '#f (list->vector G4056@export*) G4057@b*))) G4054@ls/false) ((lambda (G405a@t) ((lambda (G405c@ls/false) (if G405c@ls/false (apply (lambda (G405e@name G405f@export* G4060@b*) (begin (if (not (G2d63@id? G405e@name)) (G304d@syntax-violation '#f '"module name must be an identifier" G4050@e) (void)) (if (not (for-all G2d63@id? G405f@export*)) (G304d@syntax-violation '#f '"module exports must be identifiers" G4050@e) (void)) (values G405e@name (list->vector G405f@export*) G4060@b*))) G405c@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G405a@t))) (G2f62@syntax-dispatch G405a@t '(_ any each-any . each-any)))) G4052@t))) (G2f62@syntax-dispatch G4052@t '(_ each-any . each-any)))) G4050@e))) (set! G2fa4@G2f9f (make-record-type-descriptor 'module-interface '#f 'G2fa2 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2fa6@G2fa1 '#f) (set! G2fa8@G2fa0 (make-record-constructor-descriptor G2fa4@G2f9f '#f G2fa6@G2fa1)) (set! G2fab@module-interface? (record-predicate G2fa4@G2f9f)) (set! G2fad@make-module-interface (record-constructor G2fa8@G2fa0)) (set! G2faf@module-interface-first-mark (record-accessor G2fa4@G2f9f '0)) (set! G2fb1@module-interface-exp-id-vec (record-accessor G2fa4@G2f9f '1)) (set! G2fb3@module-interface-exp-lab-vec (record-accessor G2fa4@G2f9f '2)) (set! G2fb5@set-module-interface-first-mark! (record-mutator G2fa4@G2f9f '0)) (set! G2fb7@set-module-interface-exp-id-vec! (record-mutator G2fa4@G2f9f '1)) (set! G2fb9@set-module-interface-exp-lab-vec! (record-mutator G2fa4@G2f9f '2)) (set! G2fbb@module-interface-exp-id* (lambda (G4064@iface G4065@id) ((lambda (G4069@diff-marks) (begin (set! G4069@diff-marks (lambda (G4070@ls G4071@x) (begin (if (null? G4070@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4074@a) (if (eq? G4074@a G4071@x) '() (cons G4074@a (G4069@diff-marks (cdr G4070@ls) G4071@x)))) (car G4070@ls))))) ((lambda (G406a@diff G406b@id-vec) (if (null? G406a@diff) G406b@id-vec (vector-map (lambda (G406e@x) (G2d2d@make-stx (G2d2f@stx-expr G406e@x) (append G406a@diff (G2d31@stx-mark* G406e@x)) '() '())) G406b@id-vec))) (G4069@diff-marks (G2d31@stx-mark* G4065@id) (G2faf@module-interface-first-mark G4064@iface)) (G2fb1@module-interface-exp-id-vec G4064@iface)))) '#f))) (set! G2fbd@chi-internal-module (lambda (G4076@e G4077@r G4078@mr G4079@lex* G407a@rhs* G407b@mod** G407c@kwd*) (call-with-values (lambda () (G2f9e@parse-module G4076@e)) (lambda (G4087@G4084 G4088@G4085 G4089@G4086) ((lambda (G408d@e* G408e@exp-id* G408f@name) ((lambda (G4093@rib) ((lambda (G4095@e*) ((lambda () (call-with-values (lambda () (G2fbf@chi-body* G4095@e* G4077@r G4078@mr G4079@lex* G407a@rhs* G407b@mod** G407c@kwd* '() G4093@rib '#f)) (lambda (G409f@G4097 G40a0@G4098 G40a1@G4099 G40a2@G409a G40a3@G409b G40a4@G409c G40a5@G409d G40a6@G409e) ((lambda (G40af@_exp* G40b0@kwd* G40b1@mod** G40b2@rhs* G40b3@lex* G40b4@mr G40b5@r G40b6@e*) ((lambda (G40bf@exp-lab* G40c0@mod**) (if (not G408f@name) (values G40b3@lex* G40b2@rhs* G408e@exp-id* G40bf@exp-lab* G40b5@r G40b4@mr G40c0@mod** G40b0@kwd*) ((lambda (G40c3@lab G40c4@iface) (values G40b3@lex* G40b2@rhs* (vector G408f@name) (vector G40c3@lab) (cons (cons G40c3@lab (cons '$module G40c4@iface)) G40b5@r) (cons (cons G40c3@lab (cons '$module G40c4@iface)) G40b4@mr) G40c0@mod** G40b0@kwd*)) (G2ce3@gen-label 'module) (G2fad@make-module-interface (car (G2d31@stx-mark* G408f@name)) (vector-map (lambda (G40c7@x) (G2d2d@make-stx (G2d2f@stx-expr G40c7@x) (G2d31@stx-mark* G40c7@x) '() '())) G408e@exp-id*) G40bf@exp-lab*)))) (vector-map (lambda (G40c9@x) (or (G2d7d@id->label (G2d2d@make-stx (G2d65@id->sym G40c9@x) (G2d31@stx-mark* G40c9@x) (list G4093@rib) '())) (G304d@syntax-violation '#f '"cannot find module export" G40c9@x))) G408e@exp-id*) (cons G40b6@e* G40b1@mod**))) G40a6@G409e G40a5@G409d G40a4@G409c G40a3@G409b G40a2@G409a G40a1@G4099 G40a0@G4098 G409f@G4097)))))) (map (lambda (G40cb@x) (G2d4f@add-subst G4093@rib G40cb@x)) (G2d61@syntax->list G408d@e*)))) (G2d0e@make-empty-rib))) G4089@G4086 G4088@G4085 G4087@G4084))))) (set! G2fbf@chi-body* (lambda (G40cd@e* G40ce@r G40cf@mr G40d0@lex* G40d1@rhs* G40d2@mod** G40d3@kwd* G40d4@exp* G40d5@rib G40d6@top?) (if (null? G40cd@e*) (values G40cd@e* G40ce@r G40cf@mr G40d0@lex* G40d1@rhs* G40d2@mod** G40d3@kwd* G40d4@exp*) ((lambda (G40e1@e) (call-with-values (lambda () (G2d8b@syntax-type G40e1@e G40ce@r)) (lambda (G40e6@G40e3 G40e7@G40e4 G40e8@G40e5) ((lambda (G40ec@kwd G40ed@value G40ee@type) ((lambda (G40f2@kwd*) ((lambda (G40f4@t) (if (memv G40f4@t '(define)) (call-with-values (lambda () (G2ee6@parse-define G40e1@e)) (lambda (G40f8@G40f6 G40f9@G40f7) ((lambda (G40fc@rhs G40fd@id) (begin (if (G2d71@bound-id-member? G40fd@id G40f2@kwd*) (G304d@syntax-violation '#f '"cannot redefine keyword" G40e1@e) (void)) (call-with-values (lambda () (G2ce7@gen-define-label+loc G40fd@id G40d5@rib)) (lambda (G4102@G4100 G4103@G4101) ((lambda (G4106@lex G4107@lab) (begin (G2d14@extend-rib! G40d5@rib G40fd@id G4107@lab) (G2fbf@chi-body* (cdr G40cd@e*) (G2ef4@add-lexical G4107@lab G4106@lex G40ce@r) G40cf@mr (cons G4106@lex G40d0@lex*) (cons G40fc@rhs G40d1@rhs*) G40d2@mod** G40f2@kwd* G40d4@exp* G40d5@rib G40d6@top?))) G4103@G4101 G4102@G4100))))) G40f9@G40f7 G40f8@G40f6))) (if (memv G40f4@t '(define-syntax)) (call-with-values (lambda () (G2ee8@parse-define-syntax G40e1@e)) (lambda (G410c@G410a G410d@G410b) ((lambda (G4110@rhs G4111@id) (begin (if (G2d71@bound-id-member? G4111@id G40f2@kwd*) (G304d@syntax-violation '#f '"cannot redefine keyword" G40e1@e) (void)) ((lambda (G4114@lab G4115@expanded-rhs) (begin (G2d14@extend-rib! G40d5@rib G4111@id G4114@lab) ((lambda (G4118@b) (G2fbf@chi-body* (cdr G40cd@e*) (cons (cons G4114@lab G4118@b) G40ce@r) (cons (cons G4114@lab G4118@b) G40cf@mr) G40d0@lex* G40d1@rhs* G40d2@mod** G40f2@kwd* G40d4@exp* G40d5@rib G40d6@top?)) (G2da3@make-eval-transformer G4115@expanded-rhs)))) (G2ce9@gen-define-label G4111@id G40d5@rib) (G2fc1@expand-transformer G4110@rhs G40cf@mr)))) G410d@G410b G410c@G410a))) (if (memv G40f4@t '(let-syntax letrec-syntax)) ((lambda (G411a@t) ((lambda (G411c@ls/false) (if (and G411c@ls/false (apply (lambda (G411e@xlhs* G411f@xrhs* G4120@xbody*) (if (not (G2d6d@valid-bound-ids? G411e@xlhs*)) (G304d@syntax-violation '#f '"invalid identifiers" G40e1@e) (void))) G411c@ls/false)) (apply (lambda (G4124@xlhs* G4125@xrhs* G4126@xbody*) ((lambda (G412a@xlab*) ((lambda (G412c@xrib) ((lambda (G412e@xb*) ((lambda () (G2fbf@chi-body* (append (map (lambda (G4130@x) (G2d4f@add-subst G412c@xrib G4130@x)) G4126@xbody*) (cdr G40cd@e*)) (append (map cons G412a@xlab* G412e@xb*) G40ce@r) (append (map cons G412a@xlab* G412e@xb*) G40cf@mr) G40d0@lex* G40d1@rhs* G40d2@mod** G40f2@kwd* G40d4@exp* G40d5@rib G40d6@top?)))) (map (lambda (G4132@x) (G2da3@make-eval-transformer (G2fc1@expand-transformer (if (eq? G40ee@type 'let-syntax) G4132@x (G2d4f@add-subst G412c@xrib G4132@x)) G40cf@mr))) G4125@xrhs*))) (G2d1e@make-full-rib G4124@xlhs* G412a@xlab*))) (map G2ce3@gen-label G4124@xlhs*))) G411c@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G411a@t))) (G2f62@syntax-dispatch G411a@t '(_ #(each (any any)) . each-any)))) G40e1@e) (if (memv G40f4@t '(begin)) ((lambda (G4134@t) ((lambda (G4136@ls/false) (if G4136@ls/false (apply (lambda (G4138@x*) (G2fbf@chi-body* (append G4138@x* (cdr G40cd@e*)) G40ce@r G40cf@mr G40d0@lex* G40d1@rhs* G40d2@mod** G40f2@kwd* G40d4@exp* G40d5@rib G40d6@top?)) G4136@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G4134@t))) (G2f62@syntax-dispatch G4134@t '(_ . each-any)))) G40e1@e) (if (memv G40f4@t '(global-macro global-macro!)) (G2fbf@chi-body* (cons (G2d4f@add-subst G40d5@rib (G2f80@chi-global-macro G40ed@value G40e1@e)) (cdr G40cd@e*)) G40ce@r G40cf@mr G40d0@lex* G40d1@rhs* G40d2@mod** G40f2@kwd* G40d4@exp* G40d5@rib G40d6@top?) (if (memv G40f4@t '(local-macro local-macro!)) (G2fbf@chi-body* (cons (G2d4f@add-subst G40d5@rib (G2f7e@chi-local-macro G40ed@value G40e1@e)) (cdr G40cd@e*)) G40ce@r G40cf@mr G40d0@lex* G40d1@rhs* G40d2@mod** G40f2@kwd* G40d4@exp* G40d5@rib G40d6@top?) (if (memv G40f4@t '(macro macro!)) (G2fbf@chi-body* (cons (G2d4f@add-subst G40d5@rib (G2f7c@chi-macro G40ed@value G40e1@e)) (cdr G40cd@e*)) G40ce@r G40cf@mr G40d0@lex* G40d1@rhs* G40d2@mod** G40f2@kwd* G40d4@exp* G40d5@rib G40d6@top?) (if (memv G40f4@t '(module)) (call-with-values (lambda () (G2fbd@chi-internal-module G40e1@e G40ce@r G40cf@mr G40d0@lex* G40d1@rhs* G40d2@mod** G40f2@kwd*)) (lambda (G4142@G413a G4143@G413b G4144@G413c G4145@G413d G4146@G413e G4147@G413f G4148@G4140 G4149@G4141) ((lambda (G4152@kwd* G4153@mod** G4154@mr G4155@r G4156@m-exp-lab* G4157@m-exp-id* G4158@rhs* G4159@lex*) (begin (vector-for-each (lambda (G4162@id G4163@lab) (G2d14@extend-rib! G40d5@rib G4162@id G4163@lab)) G4157@m-exp-id* G4156@m-exp-lab*) (G2fbf@chi-body* (cdr G40cd@e*) G4155@r G4154@mr G4159@lex* G4158@rhs* G4153@mod** G4152@kwd* G40d4@exp* G40d5@rib G40d6@top?))) G4149@G4141 G4148@G4140 G4147@G413f G4146@G413e G4145@G413d G4144@G413c G4143@G413b G4142@G413a))) (if (memv G40f4@t '(library)) (begin (G302f@library-expander (G2d79@stx->datum G40e1@e)) (G2fbf@chi-body* (cdr G40cd@e*) G40ce@r G40cf@mr G40d0@lex* G40d1@rhs* G40d2@mod** G40f2@kwd* G40d4@exp* G40d5@rib G40d6@top?)) (if (memv G40f4@t '(export)) ((lambda (G4166@t) ((lambda (G4168@ls/false) (if G4168@ls/false (apply (lambda (G416a@exp-decl*) (G2fbf@chi-body* (cdr G40cd@e*) G40ce@r G40cf@mr G40d0@lex* G40d1@rhs* G40d2@mod** G40f2@kwd* (append G416a@exp-decl* G40d4@exp*) G40d5@rib G40d6@top?)) G4168@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G4166@t))) (G2f62@syntax-dispatch G4166@t '(_ . each-any)))) G40e1@e) (if (memv G40f4@t '(import)) ((lambda () ((lambda (G416d@module-import? G416f@module-import G4171@library-import) (begin (set! G416d@module-import? (lambda (G41b9@e) ((lambda (G41bb@t) ((lambda (G41bd@ls/false) (if (and G41bd@ls/false (apply (lambda (G41bf@id) (G2d63@id? G41bf@id)) G41bd@ls/false)) (apply (lambda (G41c1@id) '#t) G41bd@ls/false) ((lambda (G41c3@t) ((lambda (G41c5@ls/false) (if G41c5@ls/false (apply (lambda (G41c7@imp*) '#f) G41c5@ls/false) ((lambda (G41c9@t) ((lambda (G41cb@ls/false) (if G41cb@ls/false (apply (lambda () (G304d@syntax-violation '#f '"malformed import form" G41b9@e)) G41cb@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G41c9@t))) (G2f62@syntax-dispatch G41c9@t '_))) G41c3@t))) (G2f62@syntax-dispatch G41c3@t '(_ . each-any)))) G41bb@t))) (G2f62@syntax-dispatch G41bb@t '(_ any)))) G41b9@e))) (set! G416f@module-import (lambda (G419a@e G419b@r) ((lambda (G419e@t) ((lambda (G41a0@ls/false) (if (and G41a0@ls/false (apply (lambda (G41a2@id) (G2d63@id? G41a2@id)) G41a0@ls/false)) (apply (lambda (G41a4@id) (call-with-values (lambda () (G2d8b@syntax-type G41a4@id G419b@r)) (lambda (G41a9@G41a6 G41aa@G41a7 G41ab@G41a8) ((lambda (G41af@kwd G41b0@value G41b1@type) ((lambda (G41b5@t) (if (memv G41b5@t '($module)) ((lambda (G41b7@iface) (values (G2fbb@module-interface-exp-id* G41b7@iface G41a4@id) (G2fb3@module-interface-exp-lab-vec G41b7@iface))) G41b0@value) (G304d@syntax-violation '#f '"invalid import" G419a@e))) G41b1@type)) G41ab@G41a8 G41aa@G41a7 G41a9@G41a6)))) G41a0@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G419e@t))) (G2f62@syntax-dispatch G419e@t '(_ any)))) G419a@e))) (set! G4171@library-import (lambda (G4180@e) ((lambda (G4182@t) ((lambda (G4184@ls/false) (if G4184@ls/false (apply (lambda (G4186@ctxt G4187@imp*) (call-with-values (lambda () (G2fc9@parse-import-spec* (G3053@syntax->datum G4187@imp*))) (lambda (G418c@G418a G418d@G418b) ((lambda (G4190@subst-labels G4191@subst-names) (values (vector-map (lambda (G4194@name) (G2d41@datum->stx G4186@ctxt G4194@name)) G4191@subst-names) G4190@subst-labels)) G418d@G418b G418c@G418a)))) G4184@ls/false) ((lambda (G4196@t) ((lambda (G4198@ls/false) (if G4198@ls/false (apply (lambda () (G304d@syntax-violation '#f '"invalid import form" G4180@e)) G4198@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G4196@t))) (G2f62@syntax-dispatch G4196@t '_))) G4182@t))) (G2f62@syntax-dispatch G4182@t '(any . each-any)))) G4180@e))) (begin (call-with-values (lambda () (if (G416d@module-import? G40e1@e) (G416f@module-import G40e1@e G40ce@r) (G4171@library-import G40e1@e))) (lambda (G4174@G4172 G4175@G4173) ((lambda (G4178@lab* G4179@id*) (vector-for-each (lambda (G417c@id G417d@lab) (G2d14@extend-rib! G40d5@rib G417c@id G417d@lab)) G4179@id* G4178@lab*)) G4175@G4173 G4174@G4172))) (G2fbf@chi-body* (cdr G40cd@e*) G40ce@r G40cf@mr G40d0@lex* G40d1@rhs* G40d2@mod** G40f2@kwd* G40d4@exp* G40d5@rib G40d6@top?)))) '#f '#f '#f))) (if G40d6@top? (G2fbf@chi-body* (cdr G40cd@e*) G40ce@r G40cf@mr (cons (G2cdf@gen-lexical 'dummy) G40d0@lex*) (cons (cons 'top-expr G40e1@e) G40d1@rhs*) G40d2@mod** G40f2@kwd* G40d4@exp* G40d5@rib G40d6@top?) (values G40cd@e* G40ce@r G40cf@mr G40d0@lex* G40d1@rhs* G40d2@mod** G40f2@kwd* G40d4@exp*)))))))))))))) G40ee@type)) (if (G2d63@id? G40ec@kwd) (cons G40ec@kwd G40d3@kwd*) G40d3@kwd*))) G40e8@G40e5 G40e7@G40e4 G40e6@G40e3)))) (car G40cd@e*))))) (set! G2fc1@expand-transformer (lambda (G41cd@expr G41ce@r) ((lambda (G41d1@rtc) ((lambda (G41d3@expanded-rhs) (begin (for-each ((lambda (G41d5@mark-visit) (lambda (G41d7@x) (begin (G2b7a@G2a21@invoke-library G41d7@x) (G41d5@mark-visit G41d7@x)))) (G2fd1@vis-collector)) (G41d1@rtc)) G41d3@expanded-rhs)) ((lambda (G41dd@G41d9 G41de@G41da G41df@G41db G41e0@G41dc) ((lambda (G41e5@swap) (dynamic-wind G41e5@swap (lambda () (G2f86@chi-expr G41cd@expr G41ce@r G41ce@r)) G41e5@swap)) (lambda () (begin ((lambda (G41e7@t) (begin (G41dd@G41d9 G41df@G41db) (set! G41df@G41db G41e7@t))) (G41dd@G41d9)) ((lambda (G41e9@t) (begin (G41de@G41da G41e0@G41dc) (set! G41e0@G41dc G41e9@t))) (G41de@G41da)))))) G2fcf@inv-collector G2fd1@vis-collector G41d1@rtc (lambda (G41eb@x) (values))))) (G2fcd@make-collector)))) (set! G2fc3@parse-exports (lambda (G41ed@exp*) ((letrec ((G41ef@f (lambda (G41f1@exp* G41f2@int* G41f3@ext*) (if (null? G41f1@exp*) (begin (if (not (G2d6d@valid-bound-ids? G41f3@ext*)) (G304d@syntax-violation 'export '"invalid exports" (G2f9a@find-dups G41f3@ext*)) (void)) (values (map G3053@syntax->datum G41f3@ext*) G41f2@int*)) ((lambda (G41f7@t) ((lambda (G41f9@ls/false) (if G41f9@ls/false (apply (lambda (G41fb@rename G41fc@i* G41fd@e*) (begin (if (not (and (eq? (G3053@syntax->datum G41fb@rename) 'rename) (for-all G2d63@id? G41fc@i*) (for-all G2d63@id? G41fd@e*))) (G304d@syntax-violation 'export '"invalid export specifier" (car G41f1@exp*)) (void)) (G41ef@f (cdr G41f1@exp*) (append G41fc@i* G41f2@int*) (append G41fd@e* G41f3@ext*)))) G41f9@ls/false) ((lambda (G4201@t) ((lambda (G4203@ls/false) (if G4203@ls/false (apply (lambda (G4205@ie) (begin (if (not (G2d63@id? G4205@ie)) (G304d@syntax-violation 'export '"invalid export" G4205@ie) (void)) (G41ef@f (cdr G41f1@exp*) (cons G4205@ie G41f2@int*) (cons G4205@ie G41f3@ext*)))) G4203@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G4201@t))) (G2f62@syntax-dispatch G4201@t 'any))) G41f7@t))) (G2f62@syntax-dispatch G41f7@t '(any . #(each (any any)))))) (car G41f1@exp*)))))) G41ef@f) G41ed@exp* '() '()))) (set! G2fc5@parse-library-name (lambda (G4207@spec) ((lambda (G420a@parse) (begin (set! G420a@parse (lambda (G4215@x) ((lambda (G4217@t) ((lambda (G4219@ls/false) (if (and G4219@ls/false (apply (lambda (G421b@v*) (for-all (lambda (G421d@x) ((lambda (G421f@x) (and (integer? G421f@x) (exact? G421f@x))) (G3053@syntax->datum G421d@x))) G421b@v*)) G4219@ls/false)) (apply (lambda (G4221@v*) (values '() (map G3053@syntax->datum G4221@v*))) G4219@ls/false) ((lambda (G4223@t) ((lambda (G4225@ls/false) (if (and G4225@ls/false (apply (lambda (G4227@x G4228@rest) (symbol? (G3053@syntax->datum G4227@x))) G4225@ls/false)) (apply (lambda (G422b@x G422c@rest) (call-with-values (lambda () (G420a@parse G422c@rest)) (lambda (G4231@G422f G4232@G4230) ((lambda (G4235@v* G4236@x*) (values (cons (G3053@syntax->datum G422b@x) G4236@x*) G4235@v*)) G4232@G4230 G4231@G422f)))) G4225@ls/false) ((lambda (G4239@t) ((lambda (G423b@ls/false) (if G423b@ls/false (apply (lambda () (values '() '())) G423b@ls/false) ((lambda (G423d@t) ((lambda (G423f@ls/false) (if G423f@ls/false (apply (lambda () (G304d@syntax-violation '#f '"invalid library name" G4207@spec)) G423f@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G423d@t))) (G2f62@syntax-dispatch G423d@t '_))) G4239@t))) (G2f62@syntax-dispatch G4239@t '()))) G4223@t))) (G2f62@syntax-dispatch G4223@t '(any . any)))) G4217@t))) (G2f62@syntax-dispatch G4217@t '(each-any)))) G4215@x))) (call-with-values (lambda () (G420a@parse G4207@spec)) (lambda (G420d@G420b G420e@G420c) ((lambda (G4211@ver* G4212@name*) (begin (if (null? G4212@name*) (G304d@syntax-violation '#f '"empty library name" G4207@spec) (void)) (values G4212@name* G4211@ver*))) G420e@G420c G420d@G420b))))) '#f))) (set! G2fc7@parse-library (lambda (G4241@e) ((lambda (G4243@t) ((lambda (G4245@ls/false) (if (and G4245@ls/false (apply (lambda (G4247@library G4248@name* G4249@export G424a@exp* G424b@import G424c@imp* G424d@b*) (and (eq? (G3053@syntax->datum G4249@export) 'export) (eq? (G3053@syntax->datum G424b@import) 'import) (eq? (G3053@syntax->datum G4247@library) 'library))) G4245@ls/false)) (apply (lambda (G4255@library G4256@name* G4257@export G4258@exp* G4259@import G425a@imp* G425b@b*) (values G4256@name* G4258@exp* G425a@imp* G425b@b*)) G4245@ls/false) ((lambda (G4263@t) ((lambda (G4265@ls/false) (if G4265@ls/false (apply (lambda () (G304d@syntax-violation '#f '"malformed library" G4241@e)) G4265@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G4263@t))) (G2f62@syntax-dispatch G4263@t '_))) G4243@t))) (G2f62@syntax-dispatch G4243@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4241@e))) (set! G2fc9@parse-import-spec* ((lambda () ((lambda (G4268@idsyn? G426a@dup-error G426c@merge-substs G426e@exclude* G4270@find* G4272@rem* G4274@remove-dups G4276@parse-library-name G4278@import-library G427a@get-import G427c@add-imports!) (begin (set! G4268@idsyn? (lambda (G4467@x) (symbol? (G3053@syntax->datum G4467@x)))) (set! G426a@dup-error (lambda (G4465@name) (G304d@syntax-violation 'import '"two imports with different bindings" G4465@name))) (set! G426c@merge-substs (lambda (G4453@s G4454@subst) ((lambda (G4458@insert-to-subst) (begin (set! G4458@insert-to-subst (lambda (G4459@a G445a@subst) ((lambda (G445d@name G445e@label) ((lambda (G4461@t) (if G4461@t ((lambda (G4463@x) (if (eq? (cdr G4463@x) G445e@label) G445a@subst (G426a@dup-error G445d@name))) G4461@t) (cons G4459@a G445a@subst))) (assq G445d@name G445a@subst))) (car G4459@a) (cdr G4459@a)))) (if (null? G4453@s) G4454@subst (G4458@insert-to-subst (car G4453@s) (G426c@merge-substs (cdr G4453@s) G4454@subst))))) '#f))) (set! G426e@exclude* (lambda (G4429@sym* G442a@subst) ((lambda (G442e@exclude) (begin (set! G442e@exclude (lambda (G4443@sym G4444@subst) (if (null? G4444@subst) (G304d@syntax-violation 'import '"cannot rename unbound identifier" G4443@sym) (if (eq? G4443@sym (caar G4444@subst)) (values (cdar G4444@subst) (cdr G4444@subst)) ((lambda (G4447@a) (call-with-values (lambda () (G442e@exclude G4443@sym (cdr G4444@subst))) (lambda (G444b@G4449 G444c@G444a) ((lambda (G444f@subst G4450@old) (values G4450@old (cons G4447@a G444f@subst))) G444c@G444a G444b@G4449)))) (car G4444@subst)))))) (if (null? G4429@sym*) (values '() G442a@subst) (call-with-values (lambda () (G442e@exclude (car G4429@sym*) G442a@subst)) (lambda (G4431@G442f G4432@G4430) ((lambda (G4435@subst G4436@old) (call-with-values (lambda () (G426e@exclude* (cdr G4429@sym*) G4435@subst)) (lambda (G443b@G4439 G443c@G443a) ((lambda (G443f@subst G4440@old*) (values (cons G4436@old G4440@old*) G443f@subst)) G443c@G443a G443b@G4439)))) G4432@G4430 G4431@G442f)))))) '#f))) (set! G4270@find* (lambda (G4421@sym* G4422@subst) (map (lambda (G4425@x) ((lambda (G4427@t) (if G4427@t (cdr G4427@t) (G304d@syntax-violation 'import '"cannot find identifier" G4425@x))) (assq G4425@x G4422@subst))) G4421@sym*))) (set! G4272@rem* (lambda (G4419@sym* G441a@subst) ((letrec ((G441d@f (lambda (G441f@subst) (if (null? G441f@subst) '() (if (memq (caar G441f@subst) G4419@sym*) (G441d@f (cdr G441f@subst)) (cons (car G441f@subst) (G441d@f (cdr G441f@subst)))))))) G441d@f) G441a@subst))) (set! G4274@remove-dups (lambda (G4417@ls) (if (null? G4417@ls) '() (if (memq (car G4417@ls) (cdr G4417@ls)) (G4274@remove-dups (cdr G4417@ls)) (cons (car G4417@ls) (G4274@remove-dups (cdr G4417@ls))))))) (set! G4276@parse-library-name (lambda (G4331@spec) ((lambda (G4334@subversion? G4336@subversion-pred G4338@version-pred) (begin (set! G4334@subversion? (lambda (G4413@x) ((lambda (G4415@x) (and (integer? G4415@x) (exact? G4415@x) (>= G4415@x '0))) (G3053@syntax->datum G4413@x)))) (set! G4336@subversion-pred (lambda (G43b3@x*) ((lambda (G43b5@t) ((lambda (G43b7@ls/false) (if (and G43b7@ls/false (apply (lambda (G43b9@n) (G4334@subversion? G43b9@n)) G43b7@ls/false)) (apply (lambda (G43bb@n) (lambda (G43bd@x) (= G43bd@x (G3053@syntax->datum G43bb@n)))) G43b7@ls/false) ((lambda (G43bf@t) ((lambda (G43c1@ls/false) (if (and G43c1@ls/false (apply (lambda (G43c3@p? G43c4@sub*) (eq? (G3053@syntax->datum G43c3@p?) 'and)) G43c1@ls/false)) (apply (lambda (G43c7@p? G43c8@sub*) ((lambda (G43cb@p*) (lambda (G43cd@x) (for-all (lambda (G43cf@p) (G43cf@p G43cd@x)) G43cb@p*))) (map G4336@subversion-pred G43c8@sub*))) G43c1@ls/false) ((lambda (G43d1@t) ((lambda (G43d3@ls/false) (if (and G43d3@ls/false (apply (lambda (G43d5@p? G43d6@sub*) (eq? (G3053@syntax->datum G43d5@p?) 'or)) G43d3@ls/false)) (apply (lambda (G43d9@p? G43da@sub*) ((lambda (G43dd@p*) (lambda (G43df@x) (exists (lambda (G43e1@p) (G43e1@p G43df@x)) G43dd@p*))) (map G4336@subversion-pred G43da@sub*))) G43d3@ls/false) ((lambda (G43e3@t) ((lambda (G43e5@ls/false) (if (and G43e5@ls/false (apply (lambda (G43e7@p? G43e8@sub) (eq? (G3053@syntax->datum G43e7@p?) 'not)) G43e5@ls/false)) (apply (lambda (G43eb@p? G43ec@sub) ((lambda (G43ef@p) (lambda (G43f1@x) (not (G43ef@p G43f1@x)))) (G4336@subversion-pred G43ec@sub))) G43e5@ls/false) ((lambda (G43f3@t) ((lambda (G43f5@ls/false) (if (and G43f5@ls/false (apply (lambda (G43f7@p? G43f8@n) (and (eq? (G3053@syntax->datum G43f7@p?) '<=) (G4334@subversion? G43f8@n))) G43f5@ls/false)) (apply (lambda (G43fb@p? G43fc@n) (lambda (G43ff@x) (<= G43ff@x (G3053@syntax->datum G43fc@n)))) G43f5@ls/false) ((lambda (G4401@t) ((lambda (G4403@ls/false) (if (and G4403@ls/false (apply (lambda (G4405@p? G4406@n) (and (eq? (G3053@syntax->datum G4405@p?) '>=) (G4334@subversion? G4406@n))) G4403@ls/false)) (apply (lambda (G4409@p? G440a@n) (lambda (G440d@x) (>= G440d@x (G3053@syntax->datum G440a@n)))) G4403@ls/false) ((lambda (G440f@t) ((lambda (G4411@ls/false) (if G4411@ls/false (apply (lambda () (G304d@syntax-violation 'import '"invalid sub-version spec" G4331@spec G43b3@x*)) G4411@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G440f@t))) (G2f62@syntax-dispatch G440f@t '_))) G4401@t))) (G2f62@syntax-dispatch G4401@t '(any any)))) G43f3@t))) (G2f62@syntax-dispatch G43f3@t '(any any)))) G43e3@t))) (G2f62@syntax-dispatch G43e3@t '(any any)))) G43d1@t))) (G2f62@syntax-dispatch G43d1@t '(any . each-any)))) G43bf@t))) (G2f62@syntax-dispatch G43bf@t '(any . each-any)))) G43b5@t))) (G2f62@syntax-dispatch G43b5@t 'any))) G43b3@x*))) (set! G4338@version-pred (lambda (G4363@x*) ((lambda (G4365@t) ((lambda (G4367@ls/false) (if G4367@ls/false (apply (lambda () (lambda (G4369@x) '#t)) G4367@ls/false) ((lambda (G436b@t) ((lambda (G436d@ls/false) (if (and G436d@ls/false (apply (lambda (G436f@c G4370@ver*) (eq? (G3053@syntax->datum G436f@c) 'and)) G436d@ls/false)) (apply (lambda (G4373@c G4374@ver*) ((lambda (G4377@p*) (lambda (G4379@x) (for-all (lambda (G437b@p) (G437b@p G4379@x)) G4377@p*))) (map G4338@version-pred G4374@ver*))) G436d@ls/false) ((lambda (G437d@t) ((lambda (G437f@ls/false) (if (and G437f@ls/false (apply (lambda (G4381@c G4382@ver*) (eq? (G3053@syntax->datum G4381@c) 'or)) G437f@ls/false)) (apply (lambda (G4385@c G4386@ver*) ((lambda (G4389@p*) (lambda (G438b@x) (exists (lambda (G438d@p) (G438d@p G438b@x)) G4389@p*))) (map G4338@version-pred G4386@ver*))) G437f@ls/false) ((lambda (G438f@t) ((lambda (G4391@ls/false) (if (and G4391@ls/false (apply (lambda (G4393@c G4394@ver) (eq? (G3053@syntax->datum G4393@c) 'not)) G4391@ls/false)) (apply (lambda (G4397@c G4398@ver) ((lambda (G439b@p) (lambda (G439d@x) (not (G439b@p G439d@x)))) (G4338@version-pred G4398@ver))) G4391@ls/false) ((lambda (G439f@t) ((lambda (G43a1@ls/false) (if G43a1@ls/false (apply (lambda (G43a3@sub*) ((lambda (G43a5@p*) (lambda (G43a7@x) ((letrec ((G43a9@f (lambda (G43ab@p* G43ac@x) (if (null? G43ab@p*) '#t (if (null? G43ac@x) '#f (and ((car G43ab@p*) (car G43ac@x)) (G43a9@f (cdr G43ab@p*) (cdr G43ac@x)))))))) G43a9@f) G43a5@p* G43a7@x))) (map G4336@subversion-pred G43a3@sub*))) G43a1@ls/false) ((lambda (G43af@t) ((lambda (G43b1@ls/false) (if G43b1@ls/false (apply (lambda () (G304d@syntax-violation 'import '"invalid version spec" G4331@spec G4363@x*)) G43b1@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G43af@t))) (G2f62@syntax-dispatch G43af@t '_))) G439f@t))) (G2f62@syntax-dispatch G439f@t 'each-any))) G438f@t))) (G2f62@syntax-dispatch G438f@t '(any any)))) G437d@t))) (G2f62@syntax-dispatch G437d@t '(any . each-any)))) G436b@t))) (G2f62@syntax-dispatch G436b@t '(any . each-any)))) G4365@t))) (G2f62@syntax-dispatch G4365@t '()))) G4363@x*))) ((letrec ((G4339@f (lambda (G433b@x) ((lambda (G433d@t) ((lambda (G433f@ls/false) (if G433f@ls/false (apply (lambda (G4341@version-spec*) (values '() (G4338@version-pred G4341@version-spec*))) G433f@ls/false) ((lambda (G4343@t) ((lambda (G4345@ls/false) (if (and G4345@ls/false (apply (lambda (G4347@x G4348@x*) (G4268@idsyn? G4347@x)) G4345@ls/false)) (apply (lambda (G434b@x G434c@x*) (call-with-values (lambda () (G4339@f G434c@x*)) (lambda (G4351@G434f G4352@G4350) ((lambda (G4355@pred G4356@name) (values (cons (G3053@syntax->datum G434b@x) G4356@name) G4355@pred)) G4352@G4350 G4351@G434f)))) G4345@ls/false) ((lambda (G4359@t) ((lambda (G435b@ls/false) (if G435b@ls/false (apply (lambda () (values '() (lambda (G435d@x) '#t))) G435b@ls/false) ((lambda (G435f@t) ((lambda (G4361@ls/false) (if G4361@ls/false (apply (lambda () (G304d@syntax-violation '#f '"invalid import spec" G4331@spec)) G4361@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G435f@t))) (G2f62@syntax-dispatch G435f@t '_))) G4359@t))) (G2f62@syntax-dispatch G4359@t '()))) G4343@t))) (G2f62@syntax-dispatch G4343@t '(any . any)))) G433d@t))) (G2f62@syntax-dispatch G433d@t '(each-any)))) G433b@x)))) G4339@f) G4331@spec))) '#f '#f '#f))) (set! G4278@import-library (lambda (G4323@spec*) (call-with-values (lambda () (G4276@parse-library-name G4323@spec*)) (lambda (G4327@G4325 G4328@G4326) ((lambda (G432b@pred G432c@name) (begin (if (null? G432c@name) (G304d@syntax-violation 'import '"empty library name" G4323@spec*) (void)) ((lambda (G432f@lib) (begin (if (not G432f@lib) (G304d@syntax-violation 'import '"cannot find library with required name" G432c@name) (void)) (if (not (G432b@pred (G2b4b@G29c3@library-version G432f@lib))) (G304d@syntax-violation 'import '"library does not satisfy version specification" G4323@spec* G432f@lib) (void)) ((G2fd3@imp-collector) G432f@lib) (G2b4f@G29cb@library-subst G432f@lib))) (G2b73@G2a13@find-library-by-name G432c@name)))) G4328@G4326 G4327@G4325))))) (set! G427a@get-import (lambda (G4295@spec) ((lambda (G4297@t) ((lambda (G4299@ls/false) (if (and G4299@ls/false (apply (lambda (G429b@x G429c@x*) (not (memq (G3053@syntax->datum G429b@x) '(for rename except only prefix library)))) G4299@ls/false)) (apply (lambda (G429f@x G42a0@x*) (G4278@import-library (cons G429f@x G42a0@x*))) G4299@ls/false) ((lambda (G42a3@t) ((lambda (G42a5@ls/false) (if (and G42a5@ls/false (apply (lambda (G42a7@rename G42a8@isp G42a9@old* G42aa@new*) (and (eq? (G3053@syntax->datum G42a7@rename) 'rename) (for-all G4268@idsyn? G42a9@old*) (for-all G4268@idsyn? G42aa@new*))) G42a5@ls/false)) (apply (lambda (G42af@rename G42b0@isp G42b1@old* G42b2@new*) ((lambda (G42b7@subst G42b8@old* G42b9@new*) ((lambda (G42bd@old-label*) ((lambda (G42bf@subst) (G426c@merge-substs (map cons G42b9@new* G42bd@old-label*) G42bf@subst)) (G4272@rem* G42b8@old* G42b7@subst))) (G4270@find* G42b8@old* G42b7@subst))) (G427a@get-import G42b0@isp) (map G3053@syntax->datum G42b1@old*) (map G3053@syntax->datum G42b2@new*))) G42a5@ls/false) ((lambda (G42c1@t) ((lambda (G42c3@ls/false) (if (and G42c3@ls/false (apply (lambda (G42c5@except G42c6@isp G42c7@sym*) (and (eq? (G3053@syntax->datum G42c5@except) 'except) (for-all G4268@idsyn? G42c7@sym*))) G42c3@ls/false)) (apply (lambda (G42cb@except G42cc@isp G42cd@sym*) ((lambda (G42d1@subst) (G4272@rem* (map G3053@syntax->datum G42cd@sym*) G42d1@subst)) (G427a@get-import G42cc@isp))) G42c3@ls/false) ((lambda (G42d3@t) ((lambda (G42d5@ls/false) (if (and G42d5@ls/false (apply (lambda (G42d7@only G42d8@isp G42d9@sym*) (and (eq? (G3053@syntax->datum G42d7@only) 'only) (for-all G4268@idsyn? G42d9@sym*))) G42d5@ls/false)) (apply (lambda (G42dd@only G42de@isp G42df@sym*) ((lambda (G42e3@subst G42e4@sym*) ((lambda (G42e7@sym*) ((lambda (G42e9@lab*) (map cons G42e7@sym* G42e9@lab*)) (G4270@find* G42e7@sym* G42e3@subst))) (G4274@remove-dups G42e4@sym*))) (G427a@get-import G42de@isp) (map G3053@syntax->datum G42df@sym*))) G42d5@ls/false) ((lambda (G42eb@t) ((lambda (G42ed@ls/false) (if (and G42ed@ls/false (apply (lambda (G42ef@prefix G42f0@isp G42f1@p) (and (eq? (G3053@syntax->datum G42ef@prefix) 'prefix) (G4268@idsyn? G42f1@p))) G42ed@ls/false)) (apply (lambda (G42f5@prefix G42f6@isp G42f7@p) ((lambda (G42fb@subst G42fc@prefix) (map (lambda (G42ff@x) (cons (string->symbol (string-append G42fc@prefix (symbol->string (car G42ff@x)))) (cdr G42ff@x))) G42fb@subst)) (G427a@get-import G42f6@isp) (symbol->string (G3053@syntax->datum G42f7@p)))) G42ed@ls/false) ((lambda (G4301@t) ((lambda (G4303@ls/false) (if (and G4303@ls/false (apply (lambda (G4305@library G4306@spec*) (eq? (G3053@syntax->datum G4305@library) 'library)) G4303@ls/false)) (apply (lambda (G4309@library G430a@spec*) (G4278@import-library G430a@spec*)) G4303@ls/false) ((lambda (G430d@t) ((lambda (G430f@ls/false) (if (and G430f@ls/false (apply (lambda (G4311@for G4312@isp G4313@rest) (eq? (G3053@syntax->datum G4311@for) 'for)) G430f@ls/false)) (apply (lambda (G4317@for G4318@isp G4319@rest) (G427a@get-import G4318@isp)) G430f@ls/false) ((lambda (G431d@t) ((lambda (G431f@ls/false) (if G431f@ls/false (apply (lambda (G4321@spec) (G304d@syntax-violation 'import '"invalid import spec" G4321@spec)) G431f@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G431d@t))) (G2f62@syntax-dispatch G431d@t 'any))) G430d@t))) (G2f62@syntax-dispatch G430d@t '(any any . any)))) G4301@t))) (G2f62@syntax-dispatch G4301@t '(any each-any)))) G42eb@t))) (G2f62@syntax-dispatch G42eb@t '(any any any)))) G42d3@t))) (G2f62@syntax-dispatch G42d3@t '(any any . each-any)))) G42c1@t))) (G2f62@syntax-dispatch G42c1@t '(any any . each-any)))) G42a3@t))) (G2f62@syntax-dispatch G42a3@t '(any any . #(each (any any)))))) G4297@t))) (G2f62@syntax-dispatch G4297@t '(any . each-any)))) G4295@spec))) (set! G427c@add-imports! (lambda (G4285@imp G4286@h) ((lambda (G4289@subst) (for-each (lambda (G428b@x) ((lambda (G428d@name G428e@label) ((lambda (G4291@t) (if G4291@t ((lambda (G4293@l) (if (not (eq? G4293@l G428e@label)) (G426a@dup-error G428d@name) (void))) G4291@t) (hashtable-set! G4286@h G428d@name G428e@label))) (hashtable-ref G4286@h G428d@name '#f))) (car G428b@x) (cdr G428b@x))) G4289@subst)) (G427a@get-import G4285@imp)))) (lambda (G427d@imp*) ((letrec ((G427f@f (lambda (G4281@imp* G4282@h) (if (null? G4281@imp*) (hashtable-entries G4282@h) (begin (G427c@add-imports! (car G4281@imp*) G4282@h) (G427f@f (cdr G4281@imp*) G4282@h)))))) G427f@f) G427d@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fcb@make-top-rib (lambda (G4469@names G446a@labels) ((lambda (G446d@rib) (begin (vector-for-each (lambda (G446f@name G4470@label) (begin (if (not (symbol? G446f@name)) (error 'make-top-rib '"BUG: not a symbol" G446f@name) (void)) (G2d16@extend-rib/nc! G446d@rib (G2d2d@make-stx G446f@name G2cdb@top-mark* '() '()) G4470@label))) G4469@names G446a@labels) G446d@rib)) (G2d10@make-cache-rib)))) (set! G2fcd@make-collector (lambda () ((lambda (G4473@ls) (lambda G4477 ((lambda (G4478) (if (= G4478 '0) (apply (lambda () G4473@ls) G4477) (if (= G4478 '1) (apply (lambda (G4475@x) (set! G4473@ls (G2cd4@set-cons G4475@x G4473@ls))) G4477) (error 'apply '"invalid arg count")))) (length G4477)))) '()))) (set! G2fcf@inv-collector (G28ff@G2835@make-parameter (lambda G4479@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G447b@x) (begin (if (not (procedure? G447b@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G447b@x) (void)) G447b@x)))) (set! G2fd1@vis-collector (G28ff@G2835@make-parameter (lambda G447d@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G447f@x) (begin (if (not (procedure? G447f@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G447f@x) (void)) G447f@x)))) (set! G2fd3@imp-collector (G28ff@G2835@make-parameter (lambda G4481@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4483@x) (begin (if (not (procedure? G4483@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4483@x) (void)) G4483@x)))) (set! G2fd5@chi-library-internal (lambda (G4485@e* G4486@rib G4487@top?) (call-with-values (lambda () (G2fbf@chi-body* G4485@e* '() '() '() '() '() '() '() G4486@rib G4487@top?)) (lambda (G4493@G448b G4494@G448c G4495@G448d G4496@G448e G4497@G448f G4498@G4490 G4499@G4491 G449a@G4492) ((lambda (G44a3@exp* G44a4@_kwd* G44a5@mod** G44a6@rhs* G44a7@lex* G44a8@mr G44a9@r G44aa@e*) (values (append (apply append (reverse G44a5@mod**)) G44aa@e*) G44a9@r G44a8@mr (reverse G44a7@lex*) (reverse G44a6@rhs*) G44a3@exp*)) G449a@G4492 G4499@G4491 G4498@G4490 G4497@G448f G4496@G448e G4495@G448d G4494@G448c G4493@G448b))))) (set! G2fd7@chi-interaction-expr (lambda (G44b3@e G44b4@rib G44b5@r) (call-with-values (lambda () (G2fbf@chi-body* (list G44b3@e) G44b5@r G44b5@r '() '() '() '() '() G44b4@rib '#t)) (lambda (G44c1@G44b9 G44c2@G44ba G44c3@G44bb G44c4@G44bc G44c5@G44bd G44c6@G44be G44c7@G44bf G44c8@G44c0) ((lambda (G44d1@_exp* G44d2@_kwd* G44d3@mod** G44d4@rhs* G44d5@lex* G44d6@mr G44d7@r G44d8@e*) ((lambda (G44e1@e*) ((lambda (G44e3@e) (values G44e3@e G44d7@r)) (if (null? G44e1@e*) (G2cc1@G2c33@build-void) (if (null? (cdr G44e1@e*)) (car G44e1@e*) (G2cc0@G2c31@build-sequence '#f G44e1@e*))))) (G2f94@expand-interaction-rhs*/init* (reverse G44d5@lex*) (reverse G44d4@rhs*) (append (apply append (reverse G44d3@mod**)) G44d8@e*) G44d7@r G44d6@mr))) G44c8@G44c0 G44c7@G44bf G44c6@G44be G44c5@G44bd G44c4@G44bc G44c3@G44bb G44c2@G44ba G44c1@G44b9))))) (set! G2fd9@library-body-expander (lambda (G44e5@name G44e6@main-exp* G44e7@imp* G44e8@b* G44e9@top?) ((lambda (G44f0@itc) (begin (set! G44f0@itc (G2fcd@make-collector)) ((lambda (G44f5@G44f1 G44f6@G44f2 G44f7@G44f3 G44f8@G44f4) ((lambda (G44fd@swap) (dynamic-wind G44fd@swap (lambda () (call-with-values (lambda () (G2fc9@parse-import-spec* G44e7@imp*)) (lambda (G4501@G44ff G4502@G4500) ((lambda (G4505@subst-labels G4506@subst-names) ((lambda (G4509@rib) ((lambda (G450c@wrap) (begin (set! G450c@wrap (lambda (G4578@x) (G2d2d@make-stx G4578@x G2cdb@top-mark* (list G4509@rib) '()))) ((lambda (G450d@b* G450e@main-exp* G450f@rtc G4510@vtc) ((lambda (G4519@G4515 G451a@G4516 G451b@G4517 G451c@G4518) ((lambda (G4521@swap) (dynamic-wind G4521@swap (lambda () (call-with-values (lambda () (G2fd5@chi-library-internal G450d@b* G4509@rib G44e9@top?)) (lambda (G4529@G4523 G452a@G4524 G452b@G4525 G452c@G4526 G452d@G4527 G452e@G4528) ((lambda (G4535@internal-exp* G4536@rhs* G4537@lex* G4538@mr G4539@r G453a@init*) (call-with-values (lambda () (G2fc3@parse-exports (append G450e@main-exp* G4535@internal-exp*))) (lambda (G4543@G4541 G4544@G4542) ((lambda (G4547@exp-id* G4548@exp-name*) (begin (G2d1a@seal-rib! G4509@rib) ((lambda (G454b@init*) ((lambda (G454d@rhs*) ((lambda () (begin (G2d1c@unseal-rib! G4509@rib) ((lambda (G454f@loc* G4550@export-subst) ((lambda (G4554@errstr) (begin (set! G4554@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3039@make-export-env/macros G4537@lex* G454f@loc* G4539@r)) (lambda (G4558@G4555 G4559@G4556 G455a@G4557) ((lambda (G455e@macro* G455f@global* G4560@export-env) (begin (for-each (lambda (G4564@s) ((lambda (G4566@name G4567@label) ((lambda (G456a@p) (if G456a@p ((lambda (G456c@b) ((lambda (G456e@type) (if (eq? G456e@type 'mutable) (G304d@syntax-violation 'export G4554@errstr G4566@name) (void))) (car G456c@b))) (cdr G456a@p)) (void))) (assq G4567@label G4560@export-env))) (car G4564@s) (cdr G4564@s))) G4550@export-subst) ((lambda (G4570@invoke-body G4571@invoke-definitions) (values (G44f0@itc) (G450f@rtc) (G4510@vtc) (G2cc0@G2c31@build-sequence '#f (append G4571@invoke-definitions (list G4570@invoke-body))) G455e@macro* G4550@export-subst G4560@export-env)) (G2cc3@G2c37@build-letrec* '#f G4537@lex* G454d@rhs* (G3035@build-exports G455f@global* G454b@init*)) (map G2cbc@G2b81@build-global-define (map cdr G455f@global*))))) G455a@G4557 G4559@G4556 G4558@G4555))))) '#f)) (map G2ce1@gen-global G4537@lex*) (G3037@make-export-subst G4548@exp-name* G4547@exp-id*)))))) (G2f96@chi-rhs* G4536@rhs* G4539@r G4538@mr))) (G2f82@chi-expr* G453a@init* G4539@r G4538@mr)))) G4544@G4542 G4543@G4541)))) G452e@G4528 G452d@G4527 G452c@G4526 G452b@G4525 G452a@G4524 G4529@G4523)))) G4521@swap)) (lambda () (begin ((lambda (G4574@t) (begin (G4519@G4515 G451b@G4517) (set! G451b@G4517 G4574@t))) (G4519@G4515)) ((lambda (G4576@t) (begin (G451a@G4516 G451c@G4518) (set! G451c@G4518 G4576@t))) (G451a@G4516)))))) G2fcf@inv-collector G2fd1@vis-collector G450f@rtc G4510@vtc)) (map G450c@wrap G44e8@b*) (map G450c@wrap G44e6@main-exp*) (G2fcd@make-collector) (G2fcd@make-collector)))) '#f)) (G2fcb@make-top-rib G4506@subst-names G4505@subst-labels))) G4502@G4500 G4501@G44ff)))) G44fd@swap)) (lambda () (begin ((lambda (G457a@t) (begin (G44f5@G44f1 G44f7@G44f3) (set! G44f7@G44f3 G457a@t))) (G44f5@G44f1)) ((lambda (G457c@t) (begin (G44f6@G44f2 G44f8@G44f4) (set! G44f8@G44f4 G457c@t))) (G44f6@G44f2)))))) G2fd3@imp-collector G305b@top-level-context G44f0@itc '#f))) '#f))) (set! G2fdb@core-library-expander (lambda (G457e@e G457f@verify-name) (call-with-values (lambda () (G2fc7@parse-library G457e@e)) (lambda (G4586@G4582 G4587@G4583 G4588@G4584 G4589@G4585) ((lambda (G458e@b* G458f@imp* G4590@exp* G4591@name*) (call-with-values (lambda () (G2fc5@parse-library-name G4591@name*)) (lambda (G4598@G4596 G4599@G4597) ((lambda (G459c@ver G459d@name) (begin (G457f@verify-name G459d@name) (call-with-values (lambda () (G2fd9@library-body-expander G459d@name G4590@exp* G458f@imp* G458e@b* '#f)) (lambda (G45a7@G45a0 G45a8@G45a1 G45a9@G45a2 G45aa@G45a3 G45ab@G45a4 G45ac@G45a5 G45ad@G45a6) ((lambda (G45b5@export-env G45b6@export-subst G45b7@visit-code G45b8@invoke-code G45b9@visit-req* G45ba@invoke-req* G45bb@imp*) (values G459d@name G459c@ver G45bb@imp* G45ba@invoke-req* G45b9@visit-req* G45b8@invoke-code G45b7@visit-code G45b6@export-subst G45b5@export-env)) G45ad@G45a6 G45ac@G45a5 G45ab@G45a4 G45aa@G45a3 G45a9@G45a2 G45a8@G45a1 G45a7@G45a0))))) G4599@G4597 G4598@G4596)))) G4589@G4585 G4588@G4584 G4587@G4583 G4586@G4582))))) (set! G2fdd@parse-top-level-program (lambda (G45c3@e*) ((lambda (G45c5@t) ((lambda (G45c7@ls/false) (if (and G45c7@ls/false (apply (lambda (G45c9@import G45ca@imp* G45cb@b*) (eq? (G3053@syntax->datum G45c9@import) 'import)) G45c7@ls/false)) (apply (lambda (G45cf@import G45d0@imp* G45d1@b*) (values G45d0@imp* G45d1@b*)) G45c7@ls/false) ((lambda (G45d5@t) ((lambda (G45d7@ls/false) (if (and G45d7@ls/false (apply (lambda (G45d9@import G45da@x G45db@y) (eq? (G3053@syntax->datum G45d9@import) 'import)) G45d7@ls/false)) (apply (lambda (G45df@import G45e0@x G45e1@y) (G304d@syntax-violation 'expander '"invalid syntax of top-level program" (G2d5d@syntax-car G45c3@e*))) G45d7@ls/false) ((lambda (G45e5@t) ((lambda (G45e7@ls/false) (if G45e7@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45e7@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G45e5@t))) (G2f62@syntax-dispatch G45e5@t '_))) G45d5@t))) (G2f62@syntax-dispatch G45d5@t '((any . any) . any)))) G45c5@t))) (G2f62@syntax-dispatch G45c5@t '((any . each-any) . each-any)))) G45c3@e*))) (set! G2fdf@top-level-expander (lambda (G45e9@e*) (call-with-values (lambda () (G2fdd@parse-top-level-program G45e9@e*)) (lambda (G45ed@G45eb G45ee@G45ec) ((lambda (G45f1@b* G45f2@imp*) (call-with-values (lambda () (G2fd9@library-body-expander '() '() G45f2@imp* G45f1@b* '#t)) (lambda (G45fc@G45f5 G45fd@G45f6 G45fe@G45f7 G45ff@G45f8 G4600@G45f9 G4601@G45fa G4602@G45fb) ((lambda (G460a@export-env G460b@export-subst G460c@visit-code G460d@invoke-code G460e@visit-req* G460f@invoke-req* G4610@imp*) (values G460f@invoke-req* G460d@invoke-code)) G4602@G45fb G4601@G45fa G4600@G45f9 G45ff@G45f8 G45fe@G45f7 G45fd@G45f6 G45fc@G45f5)))) G45ee@G45ec G45ed@G45eb))))) (set! G2fe5@G2fe0 (make-record-type-descriptor 'env '#f 'G2fe3 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fe7@G2fe2 '#f) (set! G2fe9@G2fe1 (make-record-constructor-descriptor G2fe5@G2fe0 '#f G2fe7@G2fe2)) (set! G2fec@env? (record-predicate G2fe5@G2fe0)) (set! G2fee@make-env (record-constructor G2fe9@G2fe1)) (set! G2ff0@env-names (record-accessor G2fe5@G2fe0 '0)) (set! G2ff2@env-labels (record-accessor G2fe5@G2fe0 '1)) (set! G2ff4@env-itc (record-accessor G2fe5@G2fe0 '2)) (set! G2ff6@set-env-names! (record-mutator G2fe5@G2fe0 '0)) (set! G2ff8@set-env-labels! (record-mutator G2fe5@G2fe0 '1)) (set! G2ffa@set-env-itc! (record-mutator G2fe5@G2fe0 '2)) (set! G2ffc@rp (G28fc@G282f@make-record-printer 'env (lambda (G4618@x G4619@p G461a@wr) (display '"#<environment>" G4619@p)))) (set! G3002@G2ffd (make-record-type-descriptor 'interaction-env '#f 'G3000 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3004@G2fff '#f) (set! G3006@G2ffe (make-record-constructor-descriptor G3002@G2ffd '#f G3004@G2fff)) (set! G3009@interaction-env? (record-predicate G3002@G2ffd)) (set! G300b@make-interaction-env (record-constructor G3006@G2ffe)) (set! G300d@interaction-env-rib (record-accessor G3002@G2ffd '0)) (set! G300f@interaction-env-r (record-accessor G3002@G2ffd '1)) (set! G3011@interaction-env-locs (record-accessor G3002@G2ffd '2)) (set! G3013@set-interaction-env-rib! (record-mutator G3002@G2ffd '0)) (set! G3015@set-interaction-env-r! (record-mutator G3002@G2ffd '1)) (set! G3017@set-interaction-env-locs! (record-mutator G3002@G2ffd '2)) (set! G3019@rp (G28fc@G282f@make-record-printer 'interaction-env (lambda (G461e@x G461f@p G4620@wr) (display '"#<environment>" G461f@p)))) (set! G301b@interaction-environment-symbols (lambda () (G3023@environment-symbols (G3059@interaction-environment)))) (set! G301d@environment-bindings (lambda (G4624@e) (vector->list (vector-map (lambda (G4626@name G4627@label) (G301f@parse-binding (cons G4626@name (G2b79@G2a1f@imported-label->binding G4627@label)))) (G2ff0@env-names G4624@e) (G2ff2@env-labels G4624@e))))) (set! G301f@parse-binding (lambda (G462a@b) (cons (car G462a@b) ((lambda (G462c@t) (if (memv G462c@t '(core-prim global)) 'procedure (if (memv G462c@t '(core-macro macro global-macro)) 'syntax (if (memv G462c@t '($core-rtd)) 'record (if (eq? (car G462a@b) (cadr G462a@b)) 'syntax 'unknown))))) (cadr G462a@b))))) (set! G3021@environment? (lambda (G462e@x) (or (G2fec@env? G462e@x) (G3009@interaction-env? G462e@x)))) (set! G3023@environment-symbols (lambda (G4630@x) (if (G2fec@env? G4630@x) (vector->list (G2ff0@env-names G4630@x)) (if (G3009@interaction-env? G4630@x) (map values (G2cfa@rib-sym* (G300d@interaction-env-rib G4630@x))) (assertion-violation 'environment-symbols '"not an environment" G4630@x))))) (set! G3025@environment (lambda G4632@imp* ((lambda (G4634@itc) ((lambda (G4638@G4636 G4639@G4637) ((lambda (G463c@swap) (dynamic-wind G463c@swap (lambda () (call-with-values (lambda () (G2fc9@parse-import-spec* G4632@imp*)) (lambda (G4640@G463e G4641@G463f) ((lambda (G4644@subst-labels G4645@subst-names) (G2fee@make-env G4645@subst-names G4644@subst-labels G4634@itc)) G4641@G463f G4640@G463e)))) G463c@swap)) (lambda () ((lambda (G4648@t) (begin (G4638@G4636 G4639@G4637) (set! G4639@G4637 G4648@t))) (G4638@G4636))))) G2fd3@imp-collector G4634@itc)) (G2fcd@make-collector)))) (set! G3027@null-environment (lambda (G464a@n) (begin (if (not (eqv? G464a@n '5)) (assertion-violation 'null-environment '"not 5" G464a@n) (void)) (G3025@environment '(psyntax null-environment-5))))) (set! G3029@scheme-report-environment (lambda (G464c@n) (begin (if (not (eqv? G464c@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G464c@n) (void)) (G3025@environment '(psyntax scheme-report-environment-5))))) (set! G302b@expand (lambda (G464e@x G464f@env) (if (G2fec@env? G464f@env) ((lambda (G4652@rib) ((lambda (G4654@x G4655@itc G4656@rtc G4657@vtc) ((lambda (G465c@x) (begin (G2d1a@seal-rib! G4652@rib) (values G465c@x (G4656@rtc)))) ((lambda (G4666@G465e G4667@G465f G4668@G4660 G4669@G4661 G466a@G4662 G466b@G4663 G466c@G4664 G466d@G4665) ((lambda (G4676@swap) (dynamic-wind G4676@swap (lambda () (G2f86@chi-expr G4654@x '() '())) G4676@swap)) (lambda () (begin ((lambda (G4678@t) (begin (G4666@G465e G466a@G4662) (set! G466a@G4662 G4678@t))) (G4666@G465e)) ((lambda (G467a@t) (begin (G4667@G465f G466b@G4663) (set! G466b@G4663 G467a@t))) (G4667@G465f)) ((lambda (G467c@t) (begin (G4668@G4660 G466c@G4664) (set! G466c@G4664 G467c@t))) (G4668@G4660)) ((lambda (G467e@t) (begin (G4669@G4661 G466d@G4665) (set! G466d@G4665 G467e@t))) (G4669@G4661)))))) G305b@top-level-context G2fcf@inv-collector G2fd1@vis-collector G2fd3@imp-collector '#f G4656@rtc G4657@vtc G4655@itc))) (G2d2d@make-stx G464e@x G2cdb@top-mark* (list G4652@rib) '()) (G2ff4@env-itc G464f@env) (G2fcd@make-collector) (G2fcd@make-collector))) (G2fcb@make-top-rib (G2ff0@env-names G464f@env) (G2ff2@env-labels G464f@env))) (if (G3009@interaction-env? G464f@env) ((lambda (G4680@rib G4681@r G4682@rtc) ((lambda (G4686@x) (call-with-values (lambda () ((lambda (G4692@G468a G4693@G468b G4694@G468c G4695@G468d G4696@G468e G4697@G468f G4698@G4690 G4699@G4691) ((lambda (G46a2@swap) (dynamic-wind G46a2@swap (lambda () (G2fd7@chi-interaction-expr G4686@x G4680@rib G4681@r)) G46a2@swap)) (lambda () (begin ((lambda (G46a4@t) (begin (G4692@G468a G4696@G468e) (set! G4696@G468e G46a4@t))) (G4692@G468a)) ((lambda (G46a6@t) (begin (G4693@G468b G4697@G468f) (set! G4697@G468f G46a6@t))) (G4693@G468b)) ((lambda (G46a8@t) (begin (G4694@G468c G4698@G4690) (set! G4698@G4690 G46a8@t))) (G4694@G468c)) ((lambda (G46aa@t) (begin (G4695@G468d G4699@G4691) (set! G4699@G4691 G46aa@t))) (G4695@G468d)))))) G305b@top-level-context G2fcf@inv-collector G2fd1@vis-collector G2fd3@imp-collector G464f@env G4682@rtc (G2fcd@make-collector) (G2fcd@make-collector))) (lambda (G46ac@G4688 G46ad@G4689) ((lambda (G46b0@r^ G46b1@e) (begin (G3015@set-interaction-env-r! G464f@env G46b0@r^) (values G46b1@e (G4682@rtc)))) G46ad@G4689 G46ac@G4688)))) (G2d2d@make-stx G464e@x G2cdb@top-mark* (list G4680@rib) '()))) (G300d@interaction-env-rib G464f@env) (G300f@interaction-env-r G464f@env) (G2fcd@make-collector)) (assertion-violation 'expand '"not an environment" G464f@env))))) (set! G302d@eval (lambda (G46b4@x G46b5@env) (begin (if (not (G3021@environment? G46b5@env)) (error 'eval '"not an environment" G46b5@env) (void)) (call-with-values (lambda () (G302b@expand G46b4@x G46b5@env)) (lambda (G46ba@G46b8 G46bb@G46b9) ((lambda (G46be@invoke-req* G46bf@x) (begin (for-each G2b7a@G2a21@invoke-library G46be@invoke-req*) (eval-core (G2953@G290b@expanded->core G46bf@x)))) G46bb@G46b9 G46ba@G46b8)))))) (set! G302f@library-expander (lambda G4727 ((lambda (G4728) (if (= G4728 '3) (apply (lambda (G46c2@x G46c3@filename G46c4@verify-name) ((lambda (G46c9@build-visit-code G46cb@visit!) (begin (set! G46c9@build-visit-code (lambda (G4715@macro*) (if (null? G4715@macro*) (G2cc1@G2c33@build-void) (G2cc0@G2c31@build-sequence '#f (map (lambda (G4717@x) ((lambda (G4719@loc G471a@src) (list 'set! G4719@loc G471a@src)) (car G4717@x) (cddr G4717@x))) G4715@macro*))))) (set! G46cb@visit! (lambda (G470d@macro*) (for-each (lambda (G470f@x) ((lambda (G4711@loc G4712@proc) (set-symbol-value! G4711@loc G4712@proc)) (car G470f@x) (cadr G470f@x))) G470d@macro*))) (call-with-values (lambda () (G2fdb@core-library-expander G46c2@x G46c4@verify-name)) (lambda (G46d5@G46cc G46d6@G46cd G46d7@G46ce G46d8@G46cf G46d9@G46d0 G46da@G46d1 G46db@G46d2 G46dc@G46d3 G46dd@G46d4) ((lambda (G46e7@export-env G46e8@export-subst G46e9@macro* G46ea@invoke-code G46eb@vis* G46ec@inv* G46ed@imp* G46ee@ver G46ef@name) ((lambda (G46f9@id G46fa@name G46fb@ver G46fc@imp* G46fd@vis* G46fe@inv* G46ff@visit-proc G4700@invoke-proc G4701@visit-code G4702@invoke-code) (begin (G2b78@G2a1d@install-library G46f9@id G46fa@name G46fb@ver G46fc@imp* G46fd@vis* G46fe@inv* G46e8@export-subst G46e7@export-env G46ff@visit-proc G4700@invoke-proc G4701@visit-code G4702@invoke-code '#t G46c3@filename) (values G46f9@id G46fa@name G46fb@ver G46fc@imp* G46fd@vis* G46fe@inv* G4702@invoke-code G4701@visit-code G46e8@export-subst G46e7@export-env))) (gensym) G46ef@name G46ee@ver (map G2b7e@G2a29@library-spec G46ed@imp*) (map G2b7e@G2a29@library-spec G46eb@vis*) (map G2b7e@G2a29@library-spec G46ec@inv*) (lambda () (G46cb@visit! G46e9@macro*)) (lambda () (eval-core (G2953@G290b@expanded->core G46ea@invoke-code))) (G46c9@build-visit-code G46e9@macro*) G46ea@invoke-code)) G46dd@G46d4 G46dc@G46d3 G46db@G46d2 G46da@G46d1 G46d9@G46d0 G46d8@G46cf G46d7@G46ce G46d6@G46cd G46d5@G46cc))))) '#f '#f)) G4727) (if (= G4728 '2) (apply (lambda (G471d@x G471e@filename) (G302f@library-expander G471d@x G471e@filename (lambda (G4721@x) (values)))) G4727) (if (= G4728 '1) (apply (lambda (G4723@x) (G302f@library-expander G4723@x '#f (lambda (G4725@x) (values)))) G4727) (error 'apply '"invalid arg count"))))) (length G4727)))) (set! G3031@boot-library-expand (lambda (G4729@x) (call-with-values (lambda () (G302f@library-expander G4729@x)) (lambda (G4735@G472b G4736@G472c G4737@G472d G4738@G472e G4739@G472f G473a@G4730 G473b@G4731 G473c@G4732 G473d@G4733 G473e@G4734) ((lambda (G4749@export-env G474a@export-subst G474b@visit-code G474c@invoke-code G474d@inv* G474e@vis* G474f@imp* G4750@ver G4751@name G4752@id) (values G4751@name G474c@invoke-code G474a@export-subst G4749@export-env)) G473e@G4734 G473d@G4733 G473c@G4732 G473b@G4731 G473a@G4730 G4739@G472f G4738@G472e G4737@G472d G4736@G472c G4735@G472b))))) (set! G3033@rev-map-append (lambda (G475d@f G475e@ls G475f@ac) (if (null? G475e@ls) G475f@ac (G3033@rev-map-append G475d@f (cdr G475e@ls) (cons (G475d@f (car G475e@ls)) G475f@ac))))) (set! G3035@build-exports (lambda (G4763@lex*+loc* G4764@init*) (G2cc0@G2c31@build-sequence '#f (cons (G2cc1@G2c33@build-void) (G3033@rev-map-append (lambda (G4767@x) (list 'set! (cdr G4767@x) (car G4767@x))) G4763@lex*+loc* G4764@init*))))) (set! G3037@make-export-subst (lambda (G4769@name* G476a@id*) (map (lambda (G476d@name G476e@id) ((lambda (G4771@label) (begin (if (not G4771@label) (G304d@syntax-violation '#f '"cannot export unbound identifier" G476e@id) (void)) (cons G476d@name G4771@label))) (G2d7d@id->label G476e@id))) G4769@name* G476a@id*))) (set! G3039@make-export-env/macros (lambda (G4773@lex* G4774@loc* G4775@r) ((lambda (G477a@lookup) (begin (set! G477a@lookup (lambda (G4797@x) ((letrec ((G4799@f (lambda (G479b@x G479c@lex* G479d@loc*) (if (pair? G479c@lex*) (if (eq? G479b@x (car G479c@lex*)) (car G479d@loc*) (G4799@f G479b@x (cdr G479c@lex*) (cdr G479d@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4799@f) G4797@x G4773@lex* G4774@loc*))) ((letrec ((G477b@f (lambda (G477d@r G477e@env G477f@global* G4780@macro*) (if (null? G477d@r) (values G477e@env G477f@global* G4780@macro*) ((lambda (G4785@x) ((lambda (G4787@label G4788@b) ((lambda (G478b@t) (if (memv G478b@t '(lexical)) ((lambda (G478d@v) ((lambda (G478f@loc G4790@type) (G477b@f (cdr G477d@r) (cons (cons* G4787@label G4790@type G478f@loc) G477e@env) (cons (cons (G2eee@lexical-var G478d@v) G478f@loc) G477f@global*) G4780@macro*)) (G477a@lookup (G2eee@lexical-var G478d@v)) (if (G2ef0@lexical-mutable? G478d@v) 'mutable 'global))) (G2d87@binding-value G4788@b)) (if (memv G478b@t '(local-macro)) ((lambda (G4793@loc) (G477b@f (cdr G477d@r) (cons (cons* G4787@label 'global-macro G4793@loc) G477e@env) G477f@global* (cons (cons G4793@loc (G2d87@binding-value G4788@b)) G4780@macro*))) (gensym)) (if (memv G478b@t '(local-macro!)) ((lambda (G4795@loc) (G477b@f (cdr G477d@r) (cons (cons* G4787@label 'global-macro! G4795@loc) G477e@env) G477f@global* (cons (cons G4795@loc (G2d87@binding-value G4788@b)) G4780@macro*))) (gensym)) (if (memv G478b@t '($rtd $module)) (G477b@f (cdr G477d@r) (cons G4785@x G477e@env) G477f@global* G4780@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d85@binding-type G4788@b) (G2d87@binding-value G4788@b))))))) (G2d85@binding-type G4788@b))) (car G4785@x) (cdr G4785@x))) (car G477d@r)))))) G477b@f) G4775@r '() '() '()))) '#f))) (set! G303b@generate-temporaries (lambda (G47a1@ls) ((lambda (G47a3@t) ((lambda (G47a5@ls/false) (if G47a5@ls/false (apply (lambda (G47a7@ls) (map (lambda (G47a9@x) (G2d2d@make-stx ((lambda (G47ab@x) (if (or (symbol? G47ab@x) (string? G47ab@x)) (gensym G47ab@x) (gensym 't))) (G3053@syntax->datum G47a9@x)) G2cdb@top-mark* '() '())) G47a7@ls)) G47a5@ls/false) ((lambda (G47ad@t) ((lambda (G47af@ls/false) (if G47af@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47af@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G47ad@t))) (G2f62@syntax-dispatch G47ad@t '_))) G47a3@t))) (G2f62@syntax-dispatch G47a3@t 'each-any))) G47a1@ls))) (set! G303d@free-identifier=? (lambda (G47b1@x G47b2@y) (if (G2d63@id? G47b1@x) (if (G2d63@id? G47b2@y) (G2d6b@free-id=? G47b1@x G47b2@y) (assertion-violation 'free-identifier=? '"not an identifier" G47b2@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47b1@x)))) (set! G303f@bound-identifier=? (lambda (G47b5@x G47b6@y) (if (G2d63@id? G47b5@x) (if (G2d63@id? G47b6@y) (G2d69@bound-id=? G47b5@x G47b6@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47b6@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47b5@x)))) (set! G3041@make-source-condition (lambda (G47b9@x) ((lambda (G47c3@G47be G47c5@G47c0 G47c7@G47bf G47ca@G47bd G47cc@make-source-condition G47ce@G47bb G47d0@G47bc G47d2@source-condition? G47d4@source-filename G47d6@source-character) (begin (set! G47c3@G47be (make-record-type-descriptor '&source-information G4c15@G4966@&condition-rtd 'G47c1 '#f '#f '#((immutable file-name) (immutable character)))) (set! G47c5@G47c0 '#f) (set! G47c7@G47bf (make-record-constructor-descriptor G47c3@G47be G4c16@G4968@&condition-rcd G47c5@G47c0)) (set! G47ca@G47bd (record-predicate G47c3@G47be)) (set! G47cc@make-source-condition (record-constructor G47c7@G47bf)) (set! G47ce@G47bb (record-accessor G47c3@G47be '0)) (set! G47d0@G47bc (record-accessor G47c3@G47be '1)) (set! G47d2@source-condition? (condition-predicate G47c3@G47be)) (set! G47d4@source-filename (condition-accessor G47c3@G47be G47ce@G47bb)) (set! G47d6@source-character (condition-accessor G47c3@G47be G47d0@G47bc)) (if (pair? G47b9@x) (G47cc@make-source-condition (car G47b9@x) (cdr G47b9@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3043@extract-position-condition (lambda (G47d7@x) (G3041@make-source-condition (G3045@expression-position G47d7@x)))) (set! G3045@expression-position (lambda (G47d9@x) (and (G2d2b@stx? G47d9@x) ((lambda (G47db@x) (and (G28f4@G281f@annotation? G47db@x) (G28f5@G2821@annotation-source G47db@x))) (G2d2f@stx-expr G47d9@x))))) (set! G3047@assertion-error (lambda (G47dd@expr G47de@pos) (raise (condition (G4c45@G4a28@make-assertion-violation) (G4c57@G4a58@make-who-condition 'assert) (G4c1b@G49bb@make-message-condition '"assertion failed") (G4c4d@G4a3e@make-irritants-condition (list G47dd@expr)) (G3041@make-source-condition G47de@pos))))) (set! G3049@syntax-error (lambda (G47e1@x . G47e3@args) (begin (if (not (for-all string? G47e3@args)) (assertion-violation 'syntax-error '"invalid argument" G47e3@args) (void)) (raise (condition (G4c1b@G49bb@make-message-condition (if (null? G47e3@args) '"invalid syntax" (apply string-append G47e3@args))) (G4c79@G4ab2@make-syntax-violation (G3053@syntax->datum G47e1@x) '#f) (G3043@extract-position-condition G47e1@x)))))) (set! G304b@syntax-violation* (lambda (G47e5@who G47e6@msg G47e7@form G47e8@condition-object) (begin (if (not (string? G47e6@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47e6@msg) (void)) ((lambda (G47ed@who) (raise (condition (if G47ed@who (G4c57@G4a58@make-who-condition G47ed@who) (condition)) (G4c1b@G49bb@make-message-condition G47e6@msg) G47e8@condition-object (G3043@extract-position-condition G47e7@form)))) (if (or (string? G47e5@who) (symbol? G47e5@who)) G47e5@who (if (not G47e5@who) ((lambda (G47ef@t) ((lambda (G47f1@ls/false) (if (and G47f1@ls/false (apply (lambda (G47f3@id) (G2d63@id? G47f3@id)) G47f1@ls/false)) (apply (lambda (G47f5@id) (G3053@syntax->datum G47f5@id)) G47f1@ls/false) ((lambda (G47f7@t) ((lambda (G47f9@ls/false) (if (and G47f9@ls/false (apply (lambda (G47fb@id G47fc@rest) (G2d63@id? G47fb@id)) G47f9@ls/false)) (apply (lambda (G47ff@id G4800@rest) (G3053@syntax->datum G47ff@id)) G47f9@ls/false) ((lambda (G4803@t) ((lambda (G4805@ls/false) (if G4805@ls/false (apply (lambda () '#f) G4805@ls/false) (G304d@syntax-violation '#f '"invalid syntax" G4803@t))) (G2f62@syntax-dispatch G4803@t '_))) G47f7@t))) (G2f62@syntax-dispatch G47f7@t '(any . any)))) G47ef@t))) (G2f62@syntax-dispatch G47ef@t 'any))) G47e7@form) (assertion-violation 'syntax-violation '"invalid who argument" G47e5@who))))))) (set! G304d@syntax-violation (lambda G4815 ((lambda (G4816) (if (= G4816 '3) (apply (lambda (G4807@who G4808@msg G4809@form) (G304d@syntax-violation G4807@who G4808@msg G4809@form '#f)) G4815) (if (= G4816 '4) (apply (lambda (G480d@who G480e@msg G480f@form G4810@subform) (G304b@syntax-violation* G480d@who G480e@msg G480f@form (G4c79@G4ab2@make-syntax-violation (G3053@syntax->datum G480f@form) (G3053@syntax->datum G4810@subform)))) G4815) (error 'apply '"invalid arg count")))) (length G4815)))) (set! G304f@identifier? (lambda (G4817@x) (G2d63@id? G4817@x))) (set! G3051@datum->syntax (lambda (G4819@id G481a@datum) (if (G2d63@id? G4819@id) (G2d41@datum->stx G4819@id G481a@datum) (assertion-violation 'datum->syntax '"not an identifier" G4819@id)))) (set! G3053@syntax->datum (lambda (G481d@x) (G2d79@stx->datum G481d@x))) (set! G3055@compile-r6rs-top-level (lambda (G481f@x*) (call-with-values (lambda () (G2fdf@top-level-expander G481f@x*)) (lambda (G4823@G4821 G4824@G4822) ((lambda (G4827@invoke-code G4828@lib*) (lambda () (begin (for-each G2b7a@G2a21@invoke-library G4828@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2953@G290b@expanded->core G4827@invoke-code)) (void)) (eval-core (G2953@G290b@expanded->core G4827@invoke-code))))) G4824@G4822 G4823@G4821))))) (set! G3057@pre-compile-r6rs-top-level (lambda (G482b@x*) (call-with-values (lambda () (G2fdf@top-level-expander G482b@x*)) (lambda (G482f@G482d G4830@G482e) ((lambda (G4833@invoke-code G4834@lib*) (begin (for-each G2b7a@G2a21@invoke-library G4834@lib*) (G28fd@G2831@compile-core (G2953@G290b@expanded->core G4833@invoke-code)))) G4830@G482e G482f@G482d))))) (set! G3059@interaction-environment ((lambda (G4837@the-env) (lambda () (or G4837@the-env ((lambda (G4839@lib G483a@rib) (begin ((lambda (G483d@subst) (begin (G2d04@set-rib-sym*! G483a@rib (map car G483d@subst)) (G2d06@set-rib-mark**! G483a@rib (map (lambda (G483f@x) G2cdb@top-mark*) G483d@subst)) (G2d08@set-rib-label*! G483a@rib (map cdr G483d@subst)))) (G2b4f@G29cb@library-subst G4839@lib)) ((lambda (G4841@env) (begin (set! G4837@the-env G4841@env) G4841@env)) (G300b@make-interaction-env G483a@rib '() '())))) (G2b73@G2a13@find-library-by-name '(mosh interaction)) (G2d0e@make-empty-rib))))) '#f)) (set! G305b@top-level-context (G28ff@G2835@make-parameter '#f)) (begin (set! G4951@G305b@top-level-context G305b@top-level-context) (set! G4950@G3059@interaction-environment G3059@interaction-environment) (set! G494f@G3057@pre-compile-r6rs-top-level G3057@pre-compile-r6rs-top-level) (set! G494e@G3055@compile-r6rs-top-level G3055@compile-r6rs-top-level) (set! G494d@G3053@syntax->datum G3053@syntax->datum) (set! G494c@G3051@datum->syntax G3051@datum->syntax) (set! G494b@G304f@identifier? G304f@identifier?) (set! G494a@G304d@syntax-violation G304d@syntax-violation) (set! G4949@G304b@syntax-violation* G304b@syntax-violation*) (set! G4948@G3049@syntax-error G3049@syntax-error) (set! G4947@G3047@assertion-error G3047@assertion-error) (set! G4946@G3045@expression-position G3045@expression-position) (set! G4945@G3043@extract-position-condition G3043@extract-position-condition) (set! G4944@G3041@make-source-condition G3041@make-source-condition) (set! G4943@G303f@bound-identifier=? G303f@bound-identifier=?) (set! G4942@G303d@free-identifier=? G303d@free-identifier=?) (set! G4941@G303b@generate-temporaries G303b@generate-temporaries) (set! G4940@G3039@make-export-env/macros G3039@make-export-env/macros) (set! G493f@G3037@make-export-subst G3037@make-export-subst) (set! G493e@G3035@build-exports G3035@build-exports) (set! G493d@G3033@rev-map-append G3033@rev-map-append) (set! G493c@G3031@boot-library-expand G3031@boot-library-expand) (set! G493b@G302f@library-expander G302f@library-expander) (set! G493a@G302d@eval G302d@eval) (set! G4939@G302b@expand G302b@expand) (set! G4938@G3029@scheme-report-environment G3029@scheme-report-environment) (set! G4937@G3027@null-environment G3027@null-environment) (set! G4936@G3025@environment G3025@environment) (set! G4935@G3023@environment-symbols G3023@environment-symbols) (set! G4934@G3021@environment? G3021@environment?) (set! G4933@G301f@parse-binding G301f@parse-binding) (set! G4932@G301d@environment-bindings G301d@environment-bindings) (set! G4931@G301b@interaction-environment-symbols G301b@interaction-environment-symbols) (set! G4930@G3019@rp G3019@rp) (set! G492f@G3017@set-interaction-env-locs! G3017@set-interaction-env-locs!) (set! G492e@G3015@set-interaction-env-r! G3015@set-interaction-env-r!) (set! G492d@G3013@set-interaction-env-rib! G3013@set-interaction-env-rib!) (set! G492c@G3011@interaction-env-locs G3011@interaction-env-locs) (set! G492b@G300f@interaction-env-r G300f@interaction-env-r) (set! G492a@G300d@interaction-env-rib G300d@interaction-env-rib) (set! G4929@G300b@make-interaction-env G300b@make-interaction-env) (set! G4928@G3009@interaction-env? G3009@interaction-env?) (set! G4927@G3006@G2ffe G3006@G2ffe) (set! G4926@G3004@G2fff G3004@G2fff) (set! G4925@G3002@G2ffd G3002@G2ffd) (set! G4924@G2ffc@rp G2ffc@rp) (set! G4923@G2ffa@set-env-itc! G2ffa@set-env-itc!) (set! G4922@G2ff8@set-env-labels! G2ff8@set-env-labels!) (set! G4921@G2ff6@set-env-names! G2ff6@set-env-names!) (set! G4920@G2ff4@env-itc G2ff4@env-itc) (set! G491f@G2ff2@env-labels G2ff2@env-labels) (set! G491e@G2ff0@env-names G2ff0@env-names) (set! G491d@G2fee@make-env G2fee@make-env) (set! G491c@G2fec@env? G2fec@env?) (set! G491b@G2fe9@G2fe1 G2fe9@G2fe1) (set! G491a@G2fe7@G2fe2 G2fe7@G2fe2) (set! G4919@G2fe5@G2fe0 G2fe5@G2fe0) (set! G4918@G2fdf@top-level-expander G2fdf@top-level-expander) (set! G4917@G2fdd@parse-top-level-program G2fdd@parse-top-level-program) (set! G4916@G2fdb@core-library-expander G2fdb@core-library-expander) (set! G4915@G2fd9@library-body-expander G2fd9@library-body-expander) (set! G4914@G2fd7@chi-interaction-expr G2fd7@chi-interaction-expr) (set! G4913@G2fd5@chi-library-internal G2fd5@chi-library-internal) (set! G4912@G2fd3@imp-collector G2fd3@imp-collector) (set! G4911@G2fd1@vis-collector G2fd1@vis-collector) (set! G4910@G2fcf@inv-collector G2fcf@inv-collector) (set! G490f@G2fcd@make-collector G2fcd@make-collector) (set! G490e@G2fcb@make-top-rib G2fcb@make-top-rib) (set! G490d@G2fc9@parse-import-spec* G2fc9@parse-import-spec*) (set! G490c@G2fc7@parse-library G2fc7@parse-library) (set! G490b@G2fc5@parse-library-name G2fc5@parse-library-name) (set! G490a@G2fc3@parse-exports G2fc3@parse-exports) (set! G4909@G2fc1@expand-transformer G2fc1@expand-transformer) (set! G4908@G2fbf@chi-body* G2fbf@chi-body*) (set! G4907@G2fbd@chi-internal-module G2fbd@chi-internal-module) (set! G4906@G2fbb@module-interface-exp-id* G2fbb@module-interface-exp-id*) (set! G4905@G2fb9@set-module-interface-exp-lab-vec! G2fb9@set-module-interface-exp-lab-vec!) (set! G4904@G2fb7@set-module-interface-exp-id-vec! G2fb7@set-module-interface-exp-id-vec!) (set! G4903@G2fb5@set-module-interface-first-mark! G2fb5@set-module-interface-first-mark!) (set! G4902@G2fb3@module-interface-exp-lab-vec G2fb3@module-interface-exp-lab-vec) (set! G4901@G2fb1@module-interface-exp-id-vec G2fb1@module-interface-exp-id-vec) (set! G4900@G2faf@module-interface-first-mark G2faf@module-interface-first-mark) (set! G48ff@G2fad@make-module-interface G2fad@make-module-interface) (set! G48fe@G2fab@module-interface? G2fab@module-interface?) (set! G48fd@G2fa8@G2fa0 G2fa8@G2fa0) (set! G48fc@G2fa6@G2fa1 G2fa6@G2fa1) (set! G48fb@G2fa4@G2f9f G2fa4@G2f9f) (set! G48fa@G2f9e@parse-module G2f9e@parse-module) (set! G48f9@G2f9c@chi-internal G2f9c@chi-internal) (set! G48f8@G2f9a@find-dups G2f9a@find-dups) (set! G48f7@G2f98@find-bound=? G2f98@find-bound=?) (set! G48f6@G2f96@chi-rhs* G2f96@chi-rhs*) (set! G48f5@G2f94@expand-interaction-rhs*/init* G2f94@expand-interaction-rhs*/init*) (set! G48f4@G2f92@chi-rhs G2f92@chi-rhs) (set! G48f3@G2f90@chi-defun G2f90@chi-defun) (set! G48f2@G2f8e@chi-lambda-clause* G2f8e@chi-lambda-clause*) (set! G48f1@G2f8c@chi-lambda-clause G2f8c@chi-lambda-clause) (set! G48f0@G2f8a@verify-formals G2f8a@verify-formals) (set! G48ef@G2f88@chi-set! G2f88@chi-set!) (set! G48ee@G2f86@chi-expr G2f86@chi-expr) (set! G48ed@G2f84@chi-application G2f84@chi-application) (set! G48ec@G2f82@chi-expr* G2f82@chi-expr*) (set! G48eb@G2f80@chi-global-macro G2f80@chi-global-macro) (set! G48ea@G2f7e@chi-local-macro G2f7e@chi-local-macro) (set! G48e9@G2f7c@chi-macro G2f7c@chi-macro) (set! G48e8@G2f7a@do-macro-call G2f7a@do-macro-call) (set! G48e7@G2f78@local-macro-transformer G2f78@local-macro-transformer) (set! G48e6@G2f76@macro-transformer G2f76@macro-transformer) (set! G48e5@G2f74@symbol-macro G2f74@symbol-macro) (set! G48e4@G2f72@file-options-macro G2f72@file-options-macro) (set! G48e3@G2f70@core-macro-transformer G2f70@core-macro-transformer) (set! G48e2@G2f6e@syntax-transformer G2f6e@syntax-transformer) (set! G48e1@G2f6c@ellipsis-map G2f6c@ellipsis-map) (set! G48e0@G2f6a@syntax-case-transformer G2f6a@syntax-case-transformer) (set! G48df@G2f68@verify-literals G2f68@verify-literals) (set! G48de@G2f66@underscore? G2f66@underscore?) (set! G48dd@G2f64@ellipsis? G2f64@ellipsis?) (set! G48dc@G2f62@syntax-dispatch G2f62@syntax-dispatch) (set! G48db@G2f60@convert-pattern G2f60@convert-pattern) (set! G48da@G2f5e@foreign-call-transformer G2f5e@foreign-call-transformer) (set! G48d9@G2f5c@parameterize-macro G2f5c@parameterize-macro) (set! G48d8@G2f5a@incorrect-usage-macro G2f5a@incorrect-usage-macro) (set! G48d7@G2f58@define-condition-type-macro G2f58@define-condition-type-macro) (set! G48d6@G2f56@define-record-type-macro G2f56@define-record-type-macro) (set! G48d5@G2f54@define-struct-macro G2f54@define-struct-macro) (set! G48d4@G2f52@quasisyntax-macro G2f52@quasisyntax-macro) (set! G48d3@G2f50@quasiquote-macro G2f50@quasiquote-macro) (set! G48d2@G2f4e@syntax-rules-macro G2f4e@syntax-rules-macro) (set! G48d1@G2f4c@include-into-macro G2f4c@include-into-macro) (set! G48d0@G2f4a@include-macro G2f4a@include-macro) (set! G48cf@G2f48@do-include G2f48@do-include) (set! G48ce@G2f46@cond-macro G2f46@cond-macro) (set! G48cd@G2f44@and-macro G2f44@and-macro) (set! G48cc@G2f42@or-macro G2f42@or-macro) (set! G48cb@G2f40@let*-macro G2f40@let*-macro) (set! G48ca@G2f3e@do-macro G2f3e@do-macro) (set! G48c9@G2f3c@identifier-syntax-macro G2f3c@identifier-syntax-macro) (set! G48c8@G2f3a@endianness-macro G2f3a@endianness-macro) (set! G48c7@G2f38@assert-macro G2f38@assert-macro) (set! G48c6@G2f36@delay-macro G2f36@delay-macro) (set! G48c5@G2f34@time-macro G2f34@time-macro) (set! G48c4@G2f32@define-enumeration-macro G2f32@define-enumeration-macro) (set! G48c3@G2f30@guard-macro G2f30@guard-macro) (set! G48c2@G2f2e@trace-letrec-syntax-macro G2f2e@trace-letrec-syntax-macro) (set! G48c1@G2f2c@trace-let-syntax-macro G2f2c@trace-let-syntax-macro) (set! G48c0@G2f2a@trace-let/rec-syntax G2f2a@trace-let/rec-syntax) (set! G48bf@G2f28@trace-define-syntax-macro G2f28@trace-define-syntax-macro) (set! G48be@G2f26@trace-define-macro G2f26@trace-define-macro) (set! G48bd@G2f24@trace-lambda-macro G2f24@trace-lambda-macro) (set! G48bc@G2f22@let*-values-macro G2f22@let*-values-macro) (set! G48bb@G2f20@let-values-macro G2f20@let-values-macro) (set! G48ba@G2f1e@let-macro G2f1e@let-macro) (set! G48b9@G2f1c@invalid-fmls-error G2f1c@invalid-fmls-error) (set! G48b8@G2f1a@with-syntax-macro G2f1a@with-syntax-macro) (set! G48b7@G2f18@bless G2f18@bless) (set! G48b6@G2f16@lambda-transformer G2f16@lambda-transformer) (set! G48b5@G2f14@case-lambda-transformer G2f14@case-lambda-transformer) (set! G48b4@G2f12@quote-transformer G2f12@quote-transformer) (set! G48b3@G2f10@case-macro G2f10@case-macro) (set! G48b2@G2f0e@or-transformer G2f0e@or-transformer) (set! G48b1@G2f0c@and-transformer G2f0c@and-transformer) (set! G48b0@G2f0a@if-transformer G2f0a@if-transformer) (set! G48af@G2f08@unless-macro G2f08@unless-macro) (set! G48ae@G2f06@when-macro G2f06@when-macro) (set! G48ad@G2f04@record-constructor-descriptor-transformer G2f04@record-constructor-descriptor-transformer) (set! G48ac@G2f02@record-type-descriptor-transformer G2f02@record-type-descriptor-transformer) (set! G48ab@G2f00@type-descriptor-transformer G2f00@type-descriptor-transformer) (set! G48aa@G2efe@fluid-let-syntax-transformer G2efe@fluid-let-syntax-transformer) (set! G48a9@G2efc@letrec*-transformer G2efc@letrec*-transformer) (set! G48a8@G2efa@letrec-transformer G2efa@letrec-transformer) (set! G48a7@G2ef8@letrec-helper G2ef8@letrec-helper) (set! G48a6@G2ef6@add-lexicals G2ef6@add-lexicals) (set! G48a5@G2ef4@add-lexical G2ef4@add-lexical) (set! G48a4@G2ef2@set-lexical-mutable! G2ef2@set-lexical-mutable!) (set! G48a3@G2ef0@lexical-mutable? G2ef0@lexical-mutable?) (set! G48a2@G2eee@lexical-var G2eee@lexical-var) (set! G48a1@G2eec@scheme-stx G2eec@scheme-stx) (set! G48a0@G2eea@scheme-stx-hashtable G2eea@scheme-stx-hashtable) (set! G489f@G2ee8@parse-define-syntax G2ee8@parse-define-syntax) (set! G489e@G2ee6@parse-define G2ee6@parse-define) (set! G489d@G2da3@make-eval-transformer G2da3@make-eval-transformer) (set! G489c@G2da1@variable-transformer-procedure G2da1@variable-transformer-procedure) (set! G489b@G2d9f@variable-transformer? G2d9f@variable-transformer?) (set! G489a@G2d9d@make-variable-transformer G2d9d@make-variable-transformer) (set! G4899@G2d9b@sanitize-binding G2d9b@sanitize-binding) (set! G4898@G2d8b@syntax-type G2d8b@syntax-type) (set! G4897@G2d89@raise-unbound-error G2d89@raise-unbound-error) (set! G4896@G2d87@binding-value G2d87@binding-value) (set! G4895@G2d85@binding-type G2d85@binding-type) (set! G4894@G2d83@make-binding G2d83@make-binding) (set! G4893@G2d81@label->binding G2d81@label->binding) (set! G4892@G2d7f@id->real-label G2d7f@id->real-label) (set! G4891@G2d7d@id->label G2d7d@id->label) (set! G4890@G2d7b@same-marks*? G2d7b@same-marks*?) (set! G488f@G2d79@stx->datum G2d79@stx->datum) (set! G488e@G2d77@strip G2d77@strip) (set! G488d@G2d75@strip-annotations G2d75@strip-annotations) (set! G488c@G2d73@self-evaluating? G2d73@self-evaluating?) (set! G488b@G2d71@bound-id-member? G2d71@bound-id-member?) (set! G488a@G2d6f@distinct-bound-ids? G2d6f@distinct-bound-ids?) (set! G4889@G2d6d@valid-bound-ids? G2d6d@valid-bound-ids?) (set! G4888@G2d6b@free-id=? G2d6b@free-id=?) (set! G4887@G2d69@bound-id=? G2d69@bound-id=?) (set! G4886@G2d67@same-marks? G2d67@same-marks?) (set! G4885@G2d65@id->sym G2d65@id->sym) (set! G4884@G2d63@id? G2d63@id?) (set! G4883@G2d61@syntax->list G2d61@syntax->list) (set! G4882@G2d5f@syntax-cdr G2d5f@syntax-cdr) (set! G4881@G2d5d@syntax-car G2d5d@syntax-car) (set! G4880@G2d5b@syntax-list? G2d5b@syntax-list?) (set! G487f@G2d59@syntax-null? G2d59@syntax-null?) (set! G487e@G2d57@syntax-vector? G2d57@syntax-vector?) (set! G487d@G2d55@syntax-pair? G2d55@syntax-pair?) (set! G487c@G2d53@syntax-vector->list G2d53@syntax-vector->list) (set! G487b@G2d51@syntax-kind? G2d51@syntax-kind?) (set! G487a@G2d4f@add-subst G2d4f@add-subst) (set! G4879@G2d4d@add-mark G2d4d@add-mark) (set! G4878@G2d4b@mkstx G2d4b@mkstx) (set! G4877@G2d49@join-wraps G2d49@join-wraps) (set! G4876@G2d47@anti-mark? G2d47@anti-mark?) (set! G4875@G2d45@anti-mark G2d45@anti-mark) (set! G4874@G2d43@gen-mark G2d43@gen-mark) (set! G4873@G2d41@datum->stx G2d41@datum->stx) (set! G4872@G2d3f@rp G2d3f@rp) (set! G4871@G2d3d@set-stx-ae*! G2d3d@set-stx-ae*!) (set! G4870@G2d3b@set-stx-subst*! G2d3b@set-stx-subst*!) (set! G486f@G2d39@set-stx-mark*! G2d39@set-stx-mark*!) (set! G486e@G2d37@set-stx-expr! G2d37@set-stx-expr!) (set! G486d@G2d35@stx-ae* G2d35@stx-ae*) (set! G486c@G2d33@stx-subst* G2d33@stx-subst*) (set! G486b@G2d31@stx-mark* G2d31@stx-mark*) (set! G486a@G2d2f@stx-expr G2d2f@stx-expr) (set! G4869@G2d2d@make-stx G2d2d@make-stx) (set! G4868@G2d2b@stx? G2d2b@stx?) (set! G4867@G2d28@G2d20 G2d28@G2d20) (set! G4866@G2d26@G2d21 G2d26@G2d21) (set! G4865@G2d24@G2d1f G2d24@G2d1f) (set! G4864@G2d1e@make-full-rib G2d1e@make-full-rib) (set! G4863@G2d1c@unseal-rib! G2d1c@unseal-rib!) (set! G4862@G2d1a@seal-rib! G2d1a@seal-rib!) (set! G4861@G2d18@make-rib-map G2d18@make-rib-map) (set! G4860@G2d16@extend-rib/nc! G2d16@extend-rib/nc!) (set! G485f@G2d14@extend-rib! G2d14@extend-rib!) (set! G485e@G2d12@find-label G2d12@find-label) (set! G485d@G2d10@make-cache-rib G2d10@make-cache-rib) (set! G485c@G2d0e@make-empty-rib G2d0e@make-empty-rib) (set! G485b@G2d0c@set-rib-cache! G2d0c@set-rib-cache!) (set! G485a@G2d0a@set-rib-sealed/freq! G2d0a@set-rib-sealed/freq!) (set! G4859@G2d08@set-rib-label*! G2d08@set-rib-label*!) (set! G4858@G2d06@set-rib-mark**! G2d06@set-rib-mark**!) (set! G4857@G2d04@set-rib-sym*! G2d04@set-rib-sym*!) (set! G4856@G2d02@rib-cache G2d02@rib-cache) (set! G4855@G2d00@rib-sealed/freq G2d00@rib-sealed/freq) (set! G4854@G2cfe@rib-label* G2cfe@rib-label*) (set! G4853@G2cfc@rib-mark** G2cfc@rib-mark**) (set! G4852@G2cfa@rib-sym* G2cfa@rib-sym*) (set! G4851@G2cf8@make-rib G2cf8@make-rib) (set! G4850@G2cf6@rib? G2cf6@rib?) (set! G484f@G2cf3@G2ceb G2cf3@G2ceb) (set! G484e@G2cf1@G2cec G2cf1@G2cec) (set! G484d@G2cef@G2cea G2cef@G2cea) (set! G484c@G2ce9@gen-define-label G2ce9@gen-define-label) (set! G484b@G2ce7@gen-define-label+loc G2ce7@gen-define-label+loc) (set! G484a@G2ce5@gen-top-level-label G2ce5@gen-top-level-label) (set! G4849@G2ce3@gen-label G2ce3@gen-label) (set! G4848@G2ce1@gen-global G2ce1@gen-global) (set! G4847@G2cdf@gen-lexical G2cdf@gen-lexical) (set! G4846@G2cdd@top-marked? G2cdd@top-marked?) (set! G4845@G2cdb@top-mark* G2cdb@top-mark*) (set! G4844@G2cd6@set-union G2cd6@set-union) (set! G4843@G2cd4@set-cons G2cd4@set-cons) (G2b70@G2a0d@current-library-expander G302f@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G495b@G4956 G495d@G4958 G495f@G4957 G4962@&condition? G4964@make-&condition G4966@&condition-rtd G4968@&condition-rcd G49b2@G49ad G49b4@G49af G49b6@G49ae G49b9@p? G49bb@make-message-condition G49bd@G49ac G49bf@message-condition? G49c1@condition-message G49c3@&message-rtd G49c5@&message-rcd G49cb@G49c6 G49cd@G49c8 G49cf@G49c7 G49d2@p? G49d4@make-warning G49d6@warning? G49d8@&warning-rtd G49da@&warning-rcd G49e0@G49db G49e2@G49dd G49e4@G49dc G49e7@p? G49e9@make-serious-condition G49eb@serious-condition? G49ed@&serious-rtd G49ef@&serious-rcd G49f5@G49f0 G49f7@G49f2 G49f9@G49f1 G49fc@p? G49fe@make-error G4a00@error? G4a02@&error-rtd G4a04@&error-rcd G4a0a@G4a05 G4a0c@G4a07 G4a0e@G4a06 G4a11@p? G4a13@make-violation G4a15@violation? G4a17@&violation-rtd G4a19@&violation-rcd G4a1f@G4a1a G4a21@G4a1c G4a23@G4a1b G4a26@p? G4a28@make-assertion-violation G4a2a@assertion-violation? G4a2c@&assertion-rtd G4a2e@&assertion-rcd G4a35@G4a30 G4a37@G4a32 G4a39@G4a31 G4a3c@p? G4a3e@make-irritants-condition G4a40@G4a2f G4a42@irritants-condition? G4a44@condition-irritants G4a46@&irritants-rtd G4a48@&irritants-rcd G4a4f@G4a4a G4a51@G4a4c G4a53@G4a4b G4a56@p? G4a58@make-who-condition G4a5a@G4a49 G4a5c@who-condition? G4a5e@condition-who G4a60@&who-rtd G4a62@&who-rcd G4a68@G4a63 G4a6a@G4a65 G4a6c@G4a64 G4a6f@p? G4a71@make-non-continuable-violation G4a73@non-continuable-violation? G4a75@&non-continuable-rtd G4a77@&non-continuable-rcd G4a7d@G4a78 G4a7f@G4a7a G4a81@G4a79 G4a84@p? G4a86@make-implementation-restriction-violation G4a88@implementation-restriction-violation? G4a8a@&implementation-restriction-rtd G4a8c@&implementation-restriction-rcd G4a92@G4a8d G4a94@G4a8f G4a96@G4a8e G4a99@p? G4a9b@make-lexical-violation G4a9d@lexical-violation? G4a9f@&lexical-rtd G4aa1@&lexical-rcd G4aa9@G4aa4 G4aab@G4aa6 G4aad@G4aa5 G4ab0@p? G4ab2@make-syntax-violation G4ab4@G4aa2 G4ab6@G4aa3 G4ab8@syntax-violation? G4aba@syntax-violation-form G4abc@syntax-violation-subform G4abe@&syntax-rtd G4ac0@&syntax-rcd G4ac6@G4ac1 G4ac8@G4ac3 G4aca@G4ac2 G4acd@p? G4acf@make-undefined-violation G4ad1@undefined-violation? G4ad3@&undefined-rtd G4ad5@&undefined-rcd G4adb@G4ad6 G4add@G4ad8 G4adf@G4ad7 G4ae2@p? G4ae4@make-i/o-error G4ae6@i/o-error? G4ae8@&i/o-rtd G4aea@&i/o-rcd G4af0@G4aeb G4af2@G4aed G4af4@G4aec G4af7@p? G4af9@make-i/o-read-error G4afb@i/o-read-error? G4afd@&i/o-read-rtd G4aff@&i/o-read-rcd G4b05@G4b00 G4b07@G4b02 G4b09@G4b01 G4b0c@p? G4b0e@make-i/o-write-error G4b10@i/o-write-error? G4b12@&i/o-write-rtd G4b14@&i/o-write-rcd G4b1b@G4b16 G4b1d@G4b18 G4b1f@G4b17 G4b22@p? G4b24@make-i/o-invalid-position-error G4b26@G4b15 G4b28@i/o-invalid-position-error? G4b2a@i/o-error-position G4b2c@&i/o-invalid-position-rtd G4b2e@&i/o-invalid-position-rcd G4b35@G4b30 G4b37@G4b32 G4b39@G4b31 G4b3c@p? G4b3e@make-i/o-filename-error G4b40@G4b2f G4b42@i/o-filename-error? G4b44@i/o-error-filename G4b46@&i/o-filename-rtd G4b48@&i/o-filename-rcd G4b4e@G4b49 G4b50@G4b4b G4b52@G4b4a G4b55@p? G4b57@make-i/o-file-protection-error G4b59@i/o-file-protection-error? G4b5b@&i/o-file-protection-rtd G4b5d@&i/o-file-protection-rcd G4b63@G4b5e G4b65@G4b60 G4b67@G4b5f G4b6a@p? G4b6c@make-i/o-file-is-read-only-error G4b6e@i/o-file-is-read-only-error? G4b70@&i/o-file-is-read-only-rtd G4b72@&i/o-file-is-read-only-rcd G4b78@G4b73 G4b7a@G4b75 G4b7c@G4b74 G4b7f@p? G4b81@make-i/o-file-already-exists-error G4b83@i/o-file-already-exists-error? G4b85@&i/o-file-already-exists-rtd G4b87@&i/o-file-already-exists-rcd G4b8d@G4b88 G4b8f@G4b8a G4b91@G4b89 G4b94@p? G4b96@make-i/o-file-does-not-exist-error G4b98@i/o-file-does-not-exist-error? G4b9a@&i/o-file-does-not-exist-rtd G4b9c@&i/o-file-does-not-exist-rcd G4ba3@G4b9e G4ba5@G4ba0 G4ba7@G4b9f G4baa@p? G4bac@make-i/o-port-error G4bae@G4b9d G4bb0@i/o-port-error? G4bb2@i/o-error-port G4bb4@&i/o-port-rtd G4bb6@&i/o-port-rcd G4bbc@G4bb7 G4bbe@G4bb9 G4bc0@G4bb8 G4bc3@p? G4bc5@make-i/o-decoding-error G4bc7@i/o-decoding-error? G4bc9@&i/o-decoding-rtd G4bcb@&i/o-decoding-rcd G4bd2@G4bcd G4bd4@G4bcf G4bd6@G4bce G4bd9@p? G4bdb@make-i/o-encoding-error G4bdd@G4bcc G4bdf@i/o-encoding-error? G4be1@i/o-encoding-error-char G4be3@&i/o-encoding-rtd G4be5@&i/o-encoding-rcd G4beb@G4be6 G4bed@G4be8 G4bef@G4be7 G4bf2@p? G4bf4@make-no-infinities-violation G4bf6@no-infinities-violation? G4bf8@&no-infinities-rtd G4bfa@&no-infinities-rcd G4c00@G4bfb G4c02@G4bfd G4c04@G4bfc G4c07@p? G4c09@make-no-nans-violation G4c0b@no-nans-violation? G4c0d@&no-nans-rtd G4c0f@&no-nans-rcd) (begin (set! G495b@G4956 (make-record-type-descriptor '&condition '#f 'G4959 '#f '#f '#())) (set! G495d@G4958 '#f) (set! G495f@G4957 (make-record-constructor-descriptor G495b@G4956 '#f G495d@G4958)) (set! G4962@&condition? (record-predicate G495b@G4956)) (set! G4964@make-&condition (record-constructor G495f@G4957)) (set! G4966@&condition-rtd G495b@G4956) (set! G4968@&condition-rcd G495f@G4957) (set! G49b2@G49ad (make-record-type-descriptor '&message G495b@G4956 'G49b0 '#f '#f '#((immutable message)))) (set! G49b4@G49af '#f) (set! G49b6@G49ae (make-record-constructor-descriptor G49b2@G49ad G495f@G4957 G49b4@G49af)) (set! G49b9@p? (record-predicate G49b2@G49ad)) (set! G49bb@make-message-condition (record-constructor G49b6@G49ae)) (set! G49bd@G49ac (record-accessor G49b2@G49ad '0)) (set! G49bf@message-condition? (condition-predicate G49b2@G49ad)) (set! G49c1@condition-message (condition-accessor G49b2@G49ad G49bd@G49ac)) (set! G49c3@&message-rtd G49b2@G49ad) (set! G49c5@&message-rcd G49b6@G49ae) (set! G49cb@G49c6 (make-record-type-descriptor '&warning G495b@G4956 'G49c9 '#f '#f '#())) (set! G49cd@G49c8 '#f) (set! G49cf@G49c7 (make-record-constructor-descriptor G49cb@G49c6 G495f@G4957 G49cd@G49c8)) (set! G49d2@p? (record-predicate G49cb@G49c6)) (set! G49d4@make-warning (record-constructor G49cf@G49c7)) (set! G49d6@warning? (condition-predicate G49cb@G49c6)) (set! G49d8@&warning-rtd G49cb@G49c6) (set! G49da@&warning-rcd G49cf@G49c7) (set! G49e0@G49db (make-record-type-descriptor '&serious G495b@G4956 'G49de '#f '#f '#())) (set! G49e2@G49dd '#f) (set! G49e4@G49dc (make-record-constructor-descriptor G49e0@G49db G495f@G4957 G49e2@G49dd)) (set! G49e7@p? (record-predicate G49e0@G49db)) (set! G49e9@make-serious-condition (record-constructor G49e4@G49dc)) (set! G49eb@serious-condition? (condition-predicate G49e0@G49db)) (set! G49ed@&serious-rtd G49e0@G49db) (set! G49ef@&serious-rcd G49e4@G49dc) (set! G49f5@G49f0 (make-record-type-descriptor '&error G49e0@G49db 'G49f3 '#f '#f '#())) (set! G49f7@G49f2 '#f) (set! G49f9@G49f1 (make-record-constructor-descriptor G49f5@G49f0 G49e4@G49dc G49f7@G49f2)) (set! G49fc@p? (record-predicate G49f5@G49f0)) (set! G49fe@make-error (record-constructor G49f9@G49f1)) (set! G4a00@error? (condition-predicate G49f5@G49f0)) (set! G4a02@&error-rtd G49f5@G49f0) (set! G4a04@&error-rcd G49f9@G49f1) (set! G4a0a@G4a05 (make-record-type-descriptor '&violation G49e0@G49db 'G4a08 '#f '#f '#())) (set! G4a0c@G4a07 '#f) (set! G4a0e@G4a06 (make-record-constructor-descriptor G4a0a@G4a05 G49e4@G49dc G4a0c@G4a07)) (set! G4a11@p? (record-predicate G4a0a@G4a05)) (set! G4a13@make-violation (record-constructor G4a0e@G4a06)) (set! G4a15@violation? (condition-predicate G4a0a@G4a05)) (set! G4a17@&violation-rtd G4a0a@G4a05) (set! G4a19@&violation-rcd G4a0e@G4a06) (set! G4a1f@G4a1a (make-record-type-descriptor '&assertion G4a0a@G4a05 'G4a1d '#f '#f '#())) (set! G4a21@G4a1c '#f) (set! G4a23@G4a1b (make-record-constructor-descriptor G4a1f@G4a1a G4a0e@G4a06 G4a21@G4a1c)) (set! G4a26@p? (record-predicate G4a1f@G4a1a)) (set! G4a28@make-assertion-violation (record-constructor G4a23@G4a1b)) (set! G4a2a@assertion-violation? (condition-predicate G4a1f@G4a1a)) (set! G4a2c@&assertion-rtd G4a1f@G4a1a) (set! G4a2e@&assertion-rcd G4a23@G4a1b) (set! G4a35@G4a30 (make-record-type-descriptor '&irritants G495b@G4956 'G4a33 '#f '#f '#((immutable irritants)))) (set! G4a37@G4a32 '#f) (set! G4a39@G4a31 (make-record-constructor-descriptor G4a35@G4a30 G495f@G4957 G4a37@G4a32)) (set! G4a3c@p? (record-predicate G4a35@G4a30)) (set! G4a3e@make-irritants-condition (record-constructor G4a39@G4a31)) (set! G4a40@G4a2f (record-accessor G4a35@G4a30 '0)) (set! G4a42@irritants-condition? (condition-predicate G4a35@G4a30)) (set! G4a44@condition-irritants (condition-accessor G4a35@G4a30 G4a40@G4a2f)) (set! G4a46@&irritants-rtd G4a35@G4a30) (set! G4a48@&irritants-rcd G4a39@G4a31) (set! G4a4f@G4a4a (make-record-type-descriptor '&who G495b@G4956 'G4a4d '#f '#f '#((immutable who)))) (set! G4a51@G4a4c '#f) (set! G4a53@G4a4b (make-record-constructor-descriptor G4a4f@G4a4a G495f@G4957 G4a51@G4a4c)) (set! G4a56@p? (record-predicate G4a4f@G4a4a)) (set! G4a58@make-who-condition (record-constructor G4a53@G4a4b)) (set! G4a5a@G4a49 (record-accessor G4a4f@G4a4a '0)) (set! G4a5c@who-condition? (condition-predicate G4a4f@G4a4a)) (set! G4a5e@condition-who (condition-accessor G4a4f@G4a4a G4a5a@G4a49)) (set! G4a60@&who-rtd G4a4f@G4a4a) (set! G4a62@&who-rcd G4a53@G4a4b) (set! G4a68@G4a63 (make-record-type-descriptor '&non-continuable G4a0a@G4a05 'G4a66 '#f '#f '#())) (set! G4a6a@G4a65 '#f) (set! G4a6c@G4a64 (make-record-constructor-descriptor G4a68@G4a63 G4a0e@G4a06 G4a6a@G4a65)) (set! G4a6f@p? (record-predicate G4a68@G4a63)) (set! G4a71@make-non-continuable-violation (record-constructor G4a6c@G4a64)) (set! G4a73@non-continuable-violation? (condition-predicate G4a68@G4a63)) (set! G4a75@&non-continuable-rtd G4a68@G4a63) (set! G4a77@&non-continuable-rcd G4a6c@G4a64) (set! G4a7d@G4a78 (make-record-type-descriptor '&implementation-restriction G4a0a@G4a05 'G4a7b '#f '#f '#())) (set! G4a7f@G4a7a '#f) (set! G4a81@G4a79 (make-record-constructor-descriptor G4a7d@G4a78 G4a0e@G4a06 G4a7f@G4a7a)) (set! G4a84@p? (record-predicate G4a7d@G4a78)) (set! G4a86@make-implementation-restriction-violation (record-constructor G4a81@G4a79)) (set! G4a88@implementation-restriction-violation? (condition-predicate G4a7d@G4a78)) (set! G4a8a@&implementation-restriction-rtd G4a7d@G4a78) (set! G4a8c@&implementation-restriction-rcd G4a81@G4a79) (set! G4a92@G4a8d (make-record-type-descriptor '&lexical G4a0a@G4a05 'G4a90 '#f '#f '#())) (set! G4a94@G4a8f '#f) (set! G4a96@G4a8e (make-record-constructor-descriptor G4a92@G4a8d G4a0e@G4a06 G4a94@G4a8f)) (set! G4a99@p? (record-predicate G4a92@G4a8d)) (set! G4a9b@make-lexical-violation (record-constructor G4a96@G4a8e)) (set! G4a9d@lexical-violation? (condition-predicate G4a92@G4a8d)) (set! G4a9f@&lexical-rtd G4a92@G4a8d) (set! G4aa1@&lexical-rcd G4a96@G4a8e) (set! G4aa9@G4aa4 (make-record-type-descriptor '&syntax G4a0a@G4a05 'G4aa7 '#f '#f '#((immutable form) (immutable subform)))) (set! G4aab@G4aa6 '#f) (set! G4aad@G4aa5 (make-record-constructor-descriptor G4aa9@G4aa4 G4a0e@G4a06 G4aab@G4aa6)) (set! G4ab0@p? (record-predicate G4aa9@G4aa4)) (set! G4ab2@make-syntax-violation (record-constructor G4aad@G4aa5)) (set! G4ab4@G4aa2 (record-accessor G4aa9@G4aa4 '0)) (set! G4ab6@G4aa3 (record-accessor G4aa9@G4aa4 '1)) (set! G4ab8@syntax-violation? (condition-predicate G4aa9@G4aa4)) (set! G4aba@syntax-violation-form (condition-accessor G4aa9@G4aa4 G4ab4@G4aa2)) (set! G4abc@syntax-violation-subform (condition-accessor G4aa9@G4aa4 G4ab6@G4aa3)) (set! G4abe@&syntax-rtd G4aa9@G4aa4) (set! G4ac0@&syntax-rcd G4aad@G4aa5) (set! G4ac6@G4ac1 (make-record-type-descriptor '&undefined G4a0a@G4a05 'G4ac4 '#f '#f '#())) (set! G4ac8@G4ac3 '#f) (set! G4aca@G4ac2 (make-record-constructor-descriptor G4ac6@G4ac1 G4a0e@G4a06 G4ac8@G4ac3)) (set! G4acd@p? (record-predicate G4ac6@G4ac1)) (set! G4acf@make-undefined-violation (record-constructor G4aca@G4ac2)) (set! G4ad1@undefined-violation? (condition-predicate G4ac6@G4ac1)) (set! G4ad3@&undefined-rtd G4ac6@G4ac1) (set! G4ad5@&undefined-rcd G4aca@G4ac2) (set! G4adb@G4ad6 (make-record-type-descriptor '&i/o G49f5@G49f0 'G4ad9 '#f '#f '#())) (set! G4add@G4ad8 '#f) (set! G4adf@G4ad7 (make-record-constructor-descriptor G4adb@G4ad6 G49f9@G49f1 G4add@G4ad8)) (set! G4ae2@p? (record-predicate G4adb@G4ad6)) (set! G4ae4@make-i/o-error (record-constructor G4adf@G4ad7)) (set! G4ae6@i/o-error? (condition-predicate G4adb@G4ad6)) (set! G4ae8@&i/o-rtd G4adb@G4ad6) (set! G4aea@&i/o-rcd G4adf@G4ad7) (set! G4af0@G4aeb (make-record-type-descriptor '&i/o-read G4adb@G4ad6 'G4aee '#f '#f '#())) (set! G4af2@G4aed '#f) (set! G4af4@G4aec (make-record-constructor-descriptor G4af0@G4aeb G4adf@G4ad7 G4af2@G4aed)) (set! G4af7@p? (record-predicate G4af0@G4aeb)) (set! G4af9@make-i/o-read-error (record-constructor G4af4@G4aec)) (set! G4afb@i/o-read-error? (condition-predicate G4af0@G4aeb)) (set! G4afd@&i/o-read-rtd G4af0@G4aeb) (set! G4aff@&i/o-read-rcd G4af4@G4aec) (set! G4b05@G4b00 (make-record-type-descriptor '&i/o-write G4adb@G4ad6 'G4b03 '#f '#f '#())) (set! G4b07@G4b02 '#f) (set! G4b09@G4b01 (make-record-constructor-descriptor G4b05@G4b00 G4adf@G4ad7 G4b07@G4b02)) (set! G4b0c@p? (record-predicate G4b05@G4b00)) (set! G4b0e@make-i/o-write-error (record-constructor G4b09@G4b01)) (set! G4b10@i/o-write-error? (condition-predicate G4b05@G4b00)) (set! G4b12@&i/o-write-rtd G4b05@G4b00) (set! G4b14@&i/o-write-rcd G4b09@G4b01) (set! G4b1b@G4b16 (make-record-type-descriptor '&i/o-invalid-position G4adb@G4ad6 'G4b19 '#f '#f '#((immutable position)))) (set! G4b1d@G4b18 '#f) (set! G4b1f@G4b17 (make-record-constructor-descriptor G4b1b@G4b16 G4adf@G4ad7 G4b1d@G4b18)) (set! G4b22@p? (record-predicate G4b1b@G4b16)) (set! G4b24@make-i/o-invalid-position-error (record-constructor G4b1f@G4b17)) (set! G4b26@G4b15 (record-accessor G4b1b@G4b16 '0)) (set! G4b28@i/o-invalid-position-error? (condition-predicate G4b1b@G4b16)) (set! G4b2a@i/o-error-position (condition-accessor G4b1b@G4b16 G4b26@G4b15)) (set! G4b2c@&i/o-invalid-position-rtd G4b1b@G4b16) (set! G4b2e@&i/o-invalid-position-rcd G4b1f@G4b17) (set! G4b35@G4b30 (make-record-type-descriptor '&i/o-filename G4adb@G4ad6 'G4b33 '#f '#f '#((immutable filename)))) (set! G4b37@G4b32 '#f) (set! G4b39@G4b31 (make-record-constructor-descriptor G4b35@G4b30 G4adf@G4ad7 G4b37@G4b32)) (set! G4b3c@p? (record-predicate G4b35@G4b30)) (set! G4b3e@make-i/o-filename-error (record-constructor G4b39@G4b31)) (set! G4b40@G4b2f (record-accessor G4b35@G4b30 '0)) (set! G4b42@i/o-filename-error? (condition-predicate G4b35@G4b30)) (set! G4b44@i/o-error-filename (condition-accessor G4b35@G4b30 G4b40@G4b2f)) (set! G4b46@&i/o-filename-rtd G4b35@G4b30) (set! G4b48@&i/o-filename-rcd G4b39@G4b31) (set! G4b4e@G4b49 (make-record-type-descriptor '&i/o-file-protection G4b35@G4b30 'G4b4c '#f '#f '#())) (set! G4b50@G4b4b '#f) (set! G4b52@G4b4a (make-record-constructor-descriptor G4b4e@G4b49 G4b39@G4b31 G4b50@G4b4b)) (set! G4b55@p? (record-predicate G4b4e@G4b49)) (set! G4b57@make-i/o-file-protection-error (record-constructor G4b52@G4b4a)) (set! G4b59@i/o-file-protection-error? (condition-predicate G4b4e@G4b49)) (set! G4b5b@&i/o-file-protection-rtd G4b4e@G4b49) (set! G4b5d@&i/o-file-protection-rcd G4b52@G4b4a) (set! G4b63@G4b5e (make-record-type-descriptor '&i/o-file-is-read-only G4b4e@G4b49 'G4b61 '#f '#f '#())) (set! G4b65@G4b60 '#f) (set! G4b67@G4b5f (make-record-constructor-descriptor G4b63@G4b5e G4b52@G4b4a G4b65@G4b60)) (set! G4b6a@p? (record-predicate G4b63@G4b5e)) (set! G4b6c@make-i/o-file-is-read-only-error (record-constructor G4b67@G4b5f)) (set! G4b6e@i/o-file-is-read-only-error? (condition-predicate G4b63@G4b5e)) (set! G4b70@&i/o-file-is-read-only-rtd G4b63@G4b5e) (set! G4b72@&i/o-file-is-read-only-rcd G4b67@G4b5f) (set! G4b78@G4b73 (make-record-type-descriptor '&i/o-file-already-exists G4b35@G4b30 'G4b76 '#f '#f '#())) (set! G4b7a@G4b75 '#f) (set! G4b7c@G4b74 (make-record-constructor-descriptor G4b78@G4b73 G4b39@G4b31 G4b7a@G4b75)) (set! G4b7f@p? (record-predicate G4b78@G4b73)) (set! G4b81@make-i/o-file-already-exists-error (record-constructor G4b7c@G4b74)) (set! G4b83@i/o-file-already-exists-error? (condition-predicate G4b78@G4b73)) (set! G4b85@&i/o-file-already-exists-rtd G4b78@G4b73) (set! G4b87@&i/o-file-already-exists-rcd G4b7c@G4b74) (set! G4b8d@G4b88 (make-record-type-descriptor '&i/o-file-does-not-exist G4b35@G4b30 'G4b8b '#f '#f '#())) (set! G4b8f@G4b8a '#f) (set! G4b91@G4b89 (make-record-constructor-descriptor G4b8d@G4b88 G4b39@G4b31 G4b8f@G4b8a)) (set! G4b94@p? (record-predicate G4b8d@G4b88)) (set! G4b96@make-i/o-file-does-not-exist-error (record-constructor G4b91@G4b89)) (set! G4b98@i/o-file-does-not-exist-error? (condition-predicate G4b8d@G4b88)) (set! G4b9a@&i/o-file-does-not-exist-rtd G4b8d@G4b88) (set! G4b9c@&i/o-file-does-not-exist-rcd G4b91@G4b89) (set! G4ba3@G4b9e (make-record-type-descriptor '&i/o-port G4adb@G4ad6 'G4ba1 '#f '#f '#((immutable port)))) (set! G4ba5@G4ba0 '#f) (set! G4ba7@G4b9f (make-record-constructor-descriptor G4ba3@G4b9e G4adf@G4ad7 G4ba5@G4ba0)) (set! G4baa@p? (record-predicate G4ba3@G4b9e)) (set! G4bac@make-i/o-port-error (record-constructor G4ba7@G4b9f)) (set! G4bae@G4b9d (record-accessor G4ba3@G4b9e '0)) (set! G4bb0@i/o-port-error? (condition-predicate G4ba3@G4b9e)) (set! G4bb2@i/o-error-port (condition-accessor G4ba3@G4b9e G4bae@G4b9d)) (set! G4bb4@&i/o-port-rtd G4ba3@G4b9e) (set! G4bb6@&i/o-port-rcd G4ba7@G4b9f) (set! G4bbc@G4bb7 (make-record-type-descriptor '&i/o-decoding G4ba3@G4b9e 'G4bba '#f '#f '#())) (set! G4bbe@G4bb9 '#f) (set! G4bc0@G4bb8 (make-record-constructor-descriptor G4bbc@G4bb7 G4ba7@G4b9f G4bbe@G4bb9)) (set! G4bc3@p? (record-predicate G4bbc@G4bb7)) (set! G4bc5@make-i/o-decoding-error (record-constructor G4bc0@G4bb8)) (set! G4bc7@i/o-decoding-error? (condition-predicate G4bbc@G4bb7)) (set! G4bc9@&i/o-decoding-rtd G4bbc@G4bb7) (set! G4bcb@&i/o-decoding-rcd G4bc0@G4bb8) (set! G4bd2@G4bcd (make-record-type-descriptor '&i/o-encoding G4ba3@G4b9e 'G4bd0 '#f '#f '#((immutable char)))) (set! G4bd4@G4bcf '#f) (set! G4bd6@G4bce (make-record-constructor-descriptor G4bd2@G4bcd G4ba7@G4b9f G4bd4@G4bcf)) (set! G4bd9@p? (record-predicate G4bd2@G4bcd)) (set! G4bdb@make-i/o-encoding-error (record-constructor G4bd6@G4bce)) (set! G4bdd@G4bcc (record-accessor G4bd2@G4bcd '0)) (set! G4bdf@i/o-encoding-error? (condition-predicate G4bd2@G4bcd)) (set! G4be1@i/o-encoding-error-char (condition-accessor G4bd2@G4bcd G4bdd@G4bcc)) (set! G4be3@&i/o-encoding-rtd G4bd2@G4bcd) (set! G4be5@&i/o-encoding-rcd G4bd6@G4bce) (set! G4beb@G4be6 (make-record-type-descriptor '&no-infinities G4a7d@G4a78 'G4be9 '#f '#f '#())) (set! G4bed@G4be8 '#f) (set! G4bef@G4be7 (make-record-constructor-descriptor G4beb@G4be6 G4a81@G4a79 G4bed@G4be8)) (set! G4bf2@p? (record-predicate G4beb@G4be6)) (set! G4bf4@make-no-infinities-violation (record-constructor G4bef@G4be7)) (set! G4bf6@no-infinities-violation? (condition-predicate G4beb@G4be6)) (set! G4bf8@&no-infinities-rtd G4beb@G4be6) (set! G4bfa@&no-infinities-rcd G4bef@G4be7) (set! G4c00@G4bfb (make-record-type-descriptor '&no-nans G4a7d@G4a78 'G4bfe '#f '#f '#())) (set! G4c02@G4bfd '#f) (set! G4c04@G4bfc (make-record-constructor-descriptor G4c00@G4bfb G4a81@G4a79 G4c02@G4bfd)) (set! G4c07@p? (record-predicate G4c00@G4bfb)) (set! G4c09@make-no-nans-violation (record-constructor G4c04@G4bfc)) (set! G4c0b@no-nans-violation? (condition-predicate G4c00@G4bfb)) (set! G4c0d@&no-nans-rtd G4c00@G4bfb) (set! G4c0f@&no-nans-rcd G4c04@G4bfc) (begin (set! G4d00@G4c0f@&no-nans-rcd G4c0f@&no-nans-rcd) (set! G4cff@G4c0d@&no-nans-rtd G4c0d@&no-nans-rtd) (set! G4cfe@G4c0b@no-nans-violation? G4c0b@no-nans-violation?) (set! G4cfd@G4c09@make-no-nans-violation G4c09@make-no-nans-violation) (set! G4cfc@G4c07@p? G4c07@p?) (set! G4cfb@G4c04@G4bfc G4c04@G4bfc) (set! G4cfa@G4c02@G4bfd G4c02@G4bfd) (set! G4cf9@G4c00@G4bfb G4c00@G4bfb) (set! G4cf8@G4bfa@&no-infinities-rcd G4bfa@&no-infinities-rcd) (set! G4cf7@G4bf8@&no-infinities-rtd G4bf8@&no-infinities-rtd) (set! G4cf6@G4bf6@no-infinities-violation? G4bf6@no-infinities-violation?) (set! G4cf5@G4bf4@make-no-infinities-violation G4bf4@make-no-infinities-violation) (set! G4cf4@G4bf2@p? G4bf2@p?) (set! G4cf3@G4bef@G4be7 G4bef@G4be7) (set! G4cf2@G4bed@G4be8 G4bed@G4be8) (set! G4cf1@G4beb@G4be6 G4beb@G4be6) (set! G4cf0@G4be5@&i/o-encoding-rcd G4be5@&i/o-encoding-rcd) (set! G4cef@G4be3@&i/o-encoding-rtd G4be3@&i/o-encoding-rtd) (set! G4cee@G4be1@i/o-encoding-error-char G4be1@i/o-encoding-error-char) (set! G4ced@G4bdf@i/o-encoding-error? G4bdf@i/o-encoding-error?) (set! G4cec@G4bdd@G4bcc G4bdd@G4bcc) (set! G4ceb@G4bdb@make-i/o-encoding-error G4bdb@make-i/o-encoding-error) (set! G4cea@G4bd9@p? G4bd9@p?) (set! G4ce9@G4bd6@G4bce G4bd6@G4bce) (set! G4ce8@G4bd4@G4bcf G4bd4@G4bcf) (set! G4ce7@G4bd2@G4bcd G4bd2@G4bcd) (set! G4ce6@G4bcb@&i/o-decoding-rcd G4bcb@&i/o-decoding-rcd) (set! G4ce5@G4bc9@&i/o-decoding-rtd G4bc9@&i/o-decoding-rtd) (set! G4ce4@G4bc7@i/o-decoding-error? G4bc7@i/o-decoding-error?) (set! G4ce3@G4bc5@make-i/o-decoding-error G4bc5@make-i/o-decoding-error) (set! G4ce2@G4bc3@p? G4bc3@p?) (set! G4ce1@G4bc0@G4bb8 G4bc0@G4bb8) (set! G4ce0@G4bbe@G4bb9 G4bbe@G4bb9) (set! G4cdf@G4bbc@G4bb7 G4bbc@G4bb7) (set! G4cde@G4bb6@&i/o-port-rcd G4bb6@&i/o-port-rcd) (set! G4cdd@G4bb4@&i/o-port-rtd G4bb4@&i/o-port-rtd) (set! G4cdc@G4bb2@i/o-error-port G4bb2@i/o-error-port) (set! G4cdb@G4bb0@i/o-port-error? G4bb0@i/o-port-error?) (set! G4cda@G4bae@G4b9d G4bae@G4b9d) (set! G4cd9@G4bac@make-i/o-port-error G4bac@make-i/o-port-error) (set! G4cd8@G4baa@p? G4baa@p?) (set! G4cd7@G4ba7@G4b9f G4ba7@G4b9f) (set! G4cd6@G4ba5@G4ba0 G4ba5@G4ba0) (set! G4cd5@G4ba3@G4b9e G4ba3@G4b9e) (set! G4cd4@G4b9c@&i/o-file-does-not-exist-rcd G4b9c@&i/o-file-does-not-exist-rcd) (set! G4cd3@G4b9a@&i/o-file-does-not-exist-rtd G4b9a@&i/o-file-does-not-exist-rtd) (set! G4cd2@G4b98@i/o-file-does-not-exist-error? G4b98@i/o-file-does-not-exist-error?) (set! G4cd1@G4b96@make-i/o-file-does-not-exist-error G4b96@make-i/o-file-does-not-exist-error) (set! G4cd0@G4b94@p? G4b94@p?) (set! G4ccf@G4b91@G4b89 G4b91@G4b89) (set! G4cce@G4b8f@G4b8a G4b8f@G4b8a) (set! G4ccd@G4b8d@G4b88 G4b8d@G4b88) (set! G4ccc@G4b87@&i/o-file-already-exists-rcd G4b87@&i/o-file-already-exists-rcd) (set! G4ccb@G4b85@&i/o-file-already-exists-rtd G4b85@&i/o-file-already-exists-rtd) (set! G4cca@G4b83@i/o-file-already-exists-error? G4b83@i/o-file-already-exists-error?) (set! G4cc9@G4b81@make-i/o-file-already-exists-error G4b81@make-i/o-file-already-exists-error) (set! G4cc8@G4b7f@p? G4b7f@p?) (set! G4cc7@G4b7c@G4b74 G4b7c@G4b74) (set! G4cc6@G4b7a@G4b75 G4b7a@G4b75) (set! G4cc5@G4b78@G4b73 G4b78@G4b73) (set! G4cc4@G4b72@&i/o-file-is-read-only-rcd G4b72@&i/o-file-is-read-only-rcd) (set! G4cc3@G4b70@&i/o-file-is-read-only-rtd G4b70@&i/o-file-is-read-only-rtd) (set! G4cc2@G4b6e@i/o-file-is-read-only-error? G4b6e@i/o-file-is-read-only-error?) (set! G4cc1@G4b6c@make-i/o-file-is-read-only-error G4b6c@make-i/o-file-is-read-only-error) (set! G4cc0@G4b6a@p? G4b6a@p?) (set! G4cbf@G4b67@G4b5f G4b67@G4b5f) (set! G4cbe@G4b65@G4b60 G4b65@G4b60) (set! G4cbd@G4b63@G4b5e G4b63@G4b5e) (set! G4cbc@G4b5d@&i/o-file-protection-rcd G4b5d@&i/o-file-protection-rcd) (set! G4cbb@G4b5b@&i/o-file-protection-rtd G4b5b@&i/o-file-protection-rtd) (set! G4cba@G4b59@i/o-file-protection-error? G4b59@i/o-file-protection-error?) (set! G4cb9@G4b57@make-i/o-file-protection-error G4b57@make-i/o-file-protection-error) (set! G4cb8@G4b55@p? G4b55@p?) (set! G4cb7@G4b52@G4b4a G4b52@G4b4a) (set! G4cb6@G4b50@G4b4b G4b50@G4b4b) (set! G4cb5@G4b4e@G4b49 G4b4e@G4b49) (set! G4cb4@G4b48@&i/o-filename-rcd G4b48@&i/o-filename-rcd) (set! G4cb3@G4b46@&i/o-filename-rtd G4b46@&i/o-filename-rtd) (set! G4cb2@G4b44@i/o-error-filename G4b44@i/o-error-filename) (set! G4cb1@G4b42@i/o-filename-error? G4b42@i/o-filename-error?) (set! G4cb0@G4b40@G4b2f G4b40@G4b2f) (set! G4caf@G4b3e@make-i/o-filename-error G4b3e@make-i/o-filename-error) (set! G4cae@G4b3c@p? G4b3c@p?) (set! G4cad@G4b39@G4b31 G4b39@G4b31) (set! G4cac@G4b37@G4b32 G4b37@G4b32) (set! G4cab@G4b35@G4b30 G4b35@G4b30) (set! G4caa@G4b2e@&i/o-invalid-position-rcd G4b2e@&i/o-invalid-position-rcd) (set! G4ca9@G4b2c@&i/o-invalid-position-rtd G4b2c@&i/o-invalid-position-rtd) (set! G4ca8@G4b2a@i/o-error-position G4b2a@i/o-error-position) (set! G4ca7@G4b28@i/o-invalid-position-error? G4b28@i/o-invalid-position-error?) (set! G4ca6@G4b26@G4b15 G4b26@G4b15) (set! G4ca5@G4b24@make-i/o-invalid-position-error G4b24@make-i/o-invalid-position-error) (set! G4ca4@G4b22@p? G4b22@p?) (set! G4ca3@G4b1f@G4b17 G4b1f@G4b17) (set! G4ca2@G4b1d@G4b18 G4b1d@G4b18) (set! G4ca1@G4b1b@G4b16 G4b1b@G4b16) (set! G4ca0@G4b14@&i/o-write-rcd G4b14@&i/o-write-rcd) (set! G4c9f@G4b12@&i/o-write-rtd G4b12@&i/o-write-rtd) (set! G4c9e@G4b10@i/o-write-error? G4b10@i/o-write-error?) (set! G4c9d@G4b0e@make-i/o-write-error G4b0e@make-i/o-write-error) (set! G4c9c@G4b0c@p? G4b0c@p?) (set! G4c9b@G4b09@G4b01 G4b09@G4b01) (set! G4c9a@G4b07@G4b02 G4b07@G4b02) (set! G4c99@G4b05@G4b00 G4b05@G4b00) (set! G4c98@G4aff@&i/o-read-rcd G4aff@&i/o-read-rcd) (set! G4c97@G4afd@&i/o-read-rtd G4afd@&i/o-read-rtd) (set! G4c96@G4afb@i/o-read-error? G4afb@i/o-read-error?) (set! G4c95@G4af9@make-i/o-read-error G4af9@make-i/o-read-error) (set! G4c94@G4af7@p? G4af7@p?) (set! G4c93@G4af4@G4aec G4af4@G4aec) (set! G4c92@G4af2@G4aed G4af2@G4aed) (set! G4c91@G4af0@G4aeb G4af0@G4aeb) (set! G4c90@G4aea@&i/o-rcd G4aea@&i/o-rcd) (set! G4c8f@G4ae8@&i/o-rtd G4ae8@&i/o-rtd) (set! G4c8e@G4ae6@i/o-error? G4ae6@i/o-error?) (set! G4c8d@G4ae4@make-i/o-error G4ae4@make-i/o-error) (set! G4c8c@G4ae2@p? G4ae2@p?) (set! G4c8b@G4adf@G4ad7 G4adf@G4ad7) (set! G4c8a@G4add@G4ad8 G4add@G4ad8) (set! G4c89@G4adb@G4ad6 G4adb@G4ad6) (set! G4c88@G4ad5@&undefined-rcd G4ad5@&undefined-rcd) (set! G4c87@G4ad3@&undefined-rtd G4ad3@&undefined-rtd) (set! G4c86@G4ad1@undefined-violation? G4ad1@undefined-violation?) (set! G4c85@G4acf@make-undefined-violation G4acf@make-undefined-violation) (set! G4c84@G4acd@p? G4acd@p?) (set! G4c83@G4aca@G4ac2 G4aca@G4ac2) (set! G4c82@G4ac8@G4ac3 G4ac8@G4ac3) (set! G4c81@G4ac6@G4ac1 G4ac6@G4ac1) (set! G4c80@G4ac0@&syntax-rcd G4ac0@&syntax-rcd) (set! G4c7f@G4abe@&syntax-rtd G4abe@&syntax-rtd) (set! G4c7e@G4abc@syntax-violation-subform G4abc@syntax-violation-subform) (set! G4c7d@G4aba@syntax-violation-form G4aba@syntax-violation-form) (set! G4c7c@G4ab8@syntax-violation? G4ab8@syntax-violation?) (set! G4c7b@G4ab6@G4aa3 G4ab6@G4aa3) (set! G4c7a@G4ab4@G4aa2 G4ab4@G4aa2) (set! G4c79@G4ab2@make-syntax-violation G4ab2@make-syntax-violation) (set! G4c78@G4ab0@p? G4ab0@p?) (set! G4c77@G4aad@G4aa5 G4aad@G4aa5) (set! G4c76@G4aab@G4aa6 G4aab@G4aa6) (set! G4c75@G4aa9@G4aa4 G4aa9@G4aa4) (set! G4c74@G4aa1@&lexical-rcd G4aa1@&lexical-rcd) (set! G4c73@G4a9f@&lexical-rtd G4a9f@&lexical-rtd) (set! G4c72@G4a9d@lexical-violation? G4a9d@lexical-violation?) (set! G4c71@G4a9b@make-lexical-violation G4a9b@make-lexical-violation) (set! G4c70@G4a99@p? G4a99@p?) (set! G4c6f@G4a96@G4a8e G4a96@G4a8e) (set! G4c6e@G4a94@G4a8f G4a94@G4a8f) (set! G4c6d@G4a92@G4a8d G4a92@G4a8d) (set! G4c6c@G4a8c@&implementation-restriction-rcd G4a8c@&implementation-restriction-rcd) (set! G4c6b@G4a8a@&implementation-restriction-rtd G4a8a@&implementation-restriction-rtd) (set! G4c6a@G4a88@implementation-restriction-violation? G4a88@implementation-restriction-violation?) (set! G4c69@G4a86@make-implementation-restriction-violation G4a86@make-implementation-restriction-violation) (set! G4c68@G4a84@p? G4a84@p?) (set! G4c67@G4a81@G4a79 G4a81@G4a79) (set! G4c66@G4a7f@G4a7a G4a7f@G4a7a) (set! G4c65@G4a7d@G4a78 G4a7d@G4a78) (set! G4c64@G4a77@&non-continuable-rcd G4a77@&non-continuable-rcd) (set! G4c63@G4a75@&non-continuable-rtd G4a75@&non-continuable-rtd) (set! G4c62@G4a73@non-continuable-violation? G4a73@non-continuable-violation?) (set! G4c61@G4a71@make-non-continuable-violation G4a71@make-non-continuable-violation) (set! G4c60@G4a6f@p? G4a6f@p?) (set! G4c5f@G4a6c@G4a64 G4a6c@G4a64) (set! G4c5e@G4a6a@G4a65 G4a6a@G4a65) (set! G4c5d@G4a68@G4a63 G4a68@G4a63) (set! G4c5c@G4a62@&who-rcd G4a62@&who-rcd) (set! G4c5b@G4a60@&who-rtd G4a60@&who-rtd) (set! G4c5a@G4a5e@condition-who G4a5e@condition-who) (set! G4c59@G4a5c@who-condition? G4a5c@who-condition?) (set! G4c58@G4a5a@G4a49 G4a5a@G4a49) (set! G4c57@G4a58@make-who-condition G4a58@make-who-condition) (set! G4c56@G4a56@p? G4a56@p?) (set! G4c55@G4a53@G4a4b G4a53@G4a4b) (set! G4c54@G4a51@G4a4c G4a51@G4a4c) (set! G4c53@G4a4f@G4a4a G4a4f@G4a4a) (set! G4c52@G4a48@&irritants-rcd G4a48@&irritants-rcd) (set! G4c51@G4a46@&irritants-rtd G4a46@&irritants-rtd) (set! G4c50@G4a44@condition-irritants G4a44@condition-irritants) (set! G4c4f@G4a42@irritants-condition? G4a42@irritants-condition?) (set! G4c4e@G4a40@G4a2f G4a40@G4a2f) (set! G4c4d@G4a3e@make-irritants-condition G4a3e@make-irritants-condition) (set! G4c4c@G4a3c@p? G4a3c@p?) (set! G4c4b@G4a39@G4a31 G4a39@G4a31) (set! G4c4a@G4a37@G4a32 G4a37@G4a32) (set! G4c49@G4a35@G4a30 G4a35@G4a30) (set! G4c48@G4a2e@&assertion-rcd G4a2e@&assertion-rcd) (set! G4c47@G4a2c@&assertion-rtd G4a2c@&assertion-rtd) (set! G4c46@G4a2a@assertion-violation? G4a2a@assertion-violation?) (set! G4c45@G4a28@make-assertion-violation G4a28@make-assertion-violation) (set! G4c44@G4a26@p? G4a26@p?) (set! G4c43@G4a23@G4a1b G4a23@G4a1b) (set! G4c42@G4a21@G4a1c G4a21@G4a1c) (set! G4c41@G4a1f@G4a1a G4a1f@G4a1a) (set! G4c40@G4a19@&violation-rcd G4a19@&violation-rcd) (set! G4c3f@G4a17@&violation-rtd G4a17@&violation-rtd) (set! G4c3e@G4a15@violation? G4a15@violation?) (set! G4c3d@G4a13@make-violation G4a13@make-violation) (set! G4c3c@G4a11@p? G4a11@p?) (set! G4c3b@G4a0e@G4a06 G4a0e@G4a06) (set! G4c3a@G4a0c@G4a07 G4a0c@G4a07) (set! G4c39@G4a0a@G4a05 G4a0a@G4a05) (set! G4c38@G4a04@&error-rcd G4a04@&error-rcd) (set! G4c37@G4a02@&error-rtd G4a02@&error-rtd) (set! G4c36@G4a00@error? G4a00@error?) (set! G4c35@G49fe@make-error G49fe@make-error) (set! G4c34@G49fc@p? G49fc@p?) (set! G4c33@G49f9@G49f1 G49f9@G49f1) (set! G4c32@G49f7@G49f2 G49f7@G49f2) (set! G4c31@G49f5@G49f0 G49f5@G49f0) (set! G4c30@G49ef@&serious-rcd G49ef@&serious-rcd) (set! G4c2f@G49ed@&serious-rtd G49ed@&serious-rtd) (set! G4c2e@G49eb@serious-condition? G49eb@serious-condition?) (set! G4c2d@G49e9@make-serious-condition G49e9@make-serious-condition) (set! G4c2c@G49e7@p? G49e7@p?) (set! G4c2b@G49e4@G49dc G49e4@G49dc) (set! G4c2a@G49e2@G49dd G49e2@G49dd) (set! G4c29@G49e0@G49db G49e0@G49db) (set! G4c28@G49da@&warning-rcd G49da@&warning-rcd) (set! G4c27@G49d8@&warning-rtd G49d8@&warning-rtd) (set! G4c26@G49d6@warning? G49d6@warning?) (set! G4c25@G49d4@make-warning G49d4@make-warning) (set! G4c24@G49d2@p? G49d2@p?) (set! G4c23@G49cf@G49c7 G49cf@G49c7) (set! G4c22@G49cd@G49c8 G49cd@G49c8) (set! G4c21@G49cb@G49c6 G49cb@G49c6) (set! G4c20@G49c5@&message-rcd G49c5@&message-rcd) (set! G4c1f@G49c3@&message-rtd G49c3@&message-rtd) (set! G4c1e@G49c1@condition-message G49c1@condition-message) (set! G4c1d@G49bf@message-condition? G49bf@message-condition?) (set! G4c1c@G49bd@G49ac G49bd@G49ac) (set! G4c1b@G49bb@make-message-condition G49bb@make-message-condition) (set! G4c1a@G49b9@p? G49b9@p?) (set! G4c19@G49b6@G49ae G49b6@G49ae) (set! G4c18@G49b4@G49af G49b4@G49af) (set! G4c17@G49b2@G49ad G49b2@G49ad) (set! G4c16@G4968@&condition-rcd G4968@&condition-rcd) (set! G4c15@G4966@&condition-rtd G4966@&condition-rtd) (set! G4c14@G4964@make-&condition G4964@make-&condition) (set! G4c13@G4962@&condition? G4962@&condition?) (set! G4c12@G495f@G4957 G495f@G4957) (set! G4c11@G495d@G4958 G495d@G4958) (set! G4c10@G495b@G4956 G495b@G4956)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2950@G2905@current-primitive-locations (lambda (G50e9@x) ((lambda (G50eb@t) (if G50eb@t (cdr G50eb@t) '#f)) (assq G50e9@x '((&no-nans-rcd . G4d00@G4c0f@&no-nans-rcd) (&no-nans-rtd . G4cff@G4c0d@&no-nans-rtd) (&no-infinities-rcd . G4cf8@G4bfa@&no-infinities-rcd) (&no-infinities-rtd . G4cf7@G4bf8@&no-infinities-rtd) (&i/o-encoding-rcd . G4cf0@G4be5@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4cef@G4be3@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4ce6@G4bcb@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4ce5@G4bc9@&i/o-decoding-rtd) (&i/o-port-rcd . G4cde@G4bb6@&i/o-port-rcd) (&i/o-port-rtd . G4cdd@G4bb4@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cd4@G4b9c@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cd3@G4b9a@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4ccc@G4b87@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4ccb@G4b85@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cc4@G4b72@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cc3@G4b70@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4cbc@G4b5d@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4cbb@G4b5b@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4cb4@G4b48@&i/o-filename-rcd) (&i/o-filename-rtd . G4cb3@G4b46@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4caa@G4b2e@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4ca9@G4b2c@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4ca0@G4b14@&i/o-write-rcd) (&i/o-write-rtd . G4c9f@G4b12@&i/o-write-rtd) (&i/o-read-rcd . G4c98@G4aff@&i/o-read-rcd) (&i/o-read-rtd . G4c97@G4afd@&i/o-read-rtd) (&i/o-rcd . G4c90@G4aea@&i/o-rcd) (&i/o-rtd . G4c8f@G4ae8@&i/o-rtd) (&undefined-rcd . G4c88@G4ad5@&undefined-rcd) (&undefined-rtd . G4c87@G4ad3@&undefined-rtd) (&syntax-rcd . G4c80@G4ac0@&syntax-rcd) (&syntax-rtd . G4c7f@G4abe@&syntax-rtd) (&lexical-rcd . G4c74@G4aa1@&lexical-rcd) (&lexical-rtd . G4c73@G4a9f@&lexical-rtd) (&implementation-restriction-rcd . G4c6c@G4a8c@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c6b@G4a8a@&implementation-restriction-rtd) (&non-continuable-rcd . G4c64@G4a77@&non-continuable-rcd) (&non-continuable-rtd . G4c63@G4a75@&non-continuable-rtd) (&who-rcd . G4c5c@G4a62@&who-rcd) (&who-rtd . G4c5b@G4a60@&who-rtd) (&irritants-rcd . G4c52@G4a48@&irritants-rcd) (&irritants-rtd . G4c51@G4a46@&irritants-rtd) (&assertion-rcd . G4c48@G4a2e@&assertion-rcd) (&assertion-rtd . G4c47@G4a2c@&assertion-rtd) (&violation-rcd . G4c40@G4a19@&violation-rcd) (&violation-rtd . G4c3f@G4a17@&violation-rtd) (&error-rcd . G4c38@G4a04@&error-rcd) (&error-rtd . G4c37@G4a02@&error-rtd) (&serious-rcd . G4c30@G49ef@&serious-rcd) (&serious-rtd . G4c2f@G49ed@&serious-rtd) (&warning-rcd . G4c28@G49da@&warning-rcd) (&warning-rtd . G4c27@G49d8@&warning-rtd) (&message-rcd . G4c20@G49c5@&message-rcd) (&message-rtd . G4c1f@G49c3@&message-rtd) (&condition-rcd . G4c16@G4968@&condition-rcd) (&condition-rtd . G4c15@G4966@&condition-rtd) (syntax-error . G4948@G3049@syntax-error) (syntax-dispatch . G48dc@G2f62@syntax-dispatch) (load . G4dd2@G4d16@load) (interaction-environment . G4950@G3059@interaction-environment) (make-parameter . G28ff@G2835@make-parameter) (make-variable-transformer . G489a@G2d9d@make-variable-transformer) (identifier? . G494b@G304f@identifier?) (generate-temporaries . G4941@G303b@generate-temporaries) (free-identifier=? . G4942@G303d@free-identifier=?) (syntax->datum . G494d@G3053@syntax->datum) (datum->syntax . G494c@G3051@datum->syntax) (bound-identifier=? . G4943@G303f@bound-identifier=?) (make-i/o-write-error . G4c9d@G4b0e@make-i/o-write-error) (make-i/o-read-error . G4c95@G4af9@make-i/o-read-error) (make-i/o-port-error . G4cd9@G4bac@make-i/o-port-error) (make-i/o-invalid-position-error . G4ca5@G4b24@make-i/o-invalid-position-error) (make-i/o-filename-error . G4caf@G4b3e@make-i/o-filename-error) (make-i/o-file-protection-error . G4cb9@G4b57@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cc1@G4b6c@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cd1@G4b96@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cc9@G4b81@make-i/o-file-already-exists-error) (make-i/o-error . G4c8d@G4ae4@make-i/o-error) (make-i/o-encoding-error . G4ceb@G4bdb@make-i/o-encoding-error) (make-i/o-decoding-error . G4ce3@G4bc5@make-i/o-decoding-error) (i/o-write-error? . G4c9e@G4b10@i/o-write-error?) (i/o-read-error? . G4c96@G4afb@i/o-read-error?) (i/o-port-error? . G4cdb@G4bb0@i/o-port-error?) (i/o-invalid-position-error? . G4ca7@G4b28@i/o-invalid-position-error?) (i/o-filename-error? . G4cb1@G4b42@i/o-filename-error?) (i/o-file-protection-error? . G4cba@G4b59@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cc2@G4b6e@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cd2@G4b98@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cca@G4b83@i/o-file-already-exists-error?) (i/o-error? . G4c8e@G4ae6@i/o-error?) (i/o-error-position . G4ca8@G4b2a@i/o-error-position) (i/o-error-port . G4cdc@G4bb2@i/o-error-port) (i/o-error-filename . G4cb2@G4b44@i/o-error-filename) (i/o-encoding-error? . G4ced@G4bdf@i/o-encoding-error?) (i/o-encoding-error-char . G4cee@G4be1@i/o-encoding-error-char) (i/o-decoding-error? . G4ce4@G4bc7@i/o-decoding-error?) (scheme-report-environment . G4938@G3029@scheme-report-environment) (null-environment . G4937@G3027@null-environment) (command-line . G4dcf@G4d10@command-line) (eval . G493a@G302d@eval) (environment . G4936@G3025@environment) (who-condition? . G4c59@G4a5c@who-condition?) (warning? . G4c26@G49d6@warning?) (violation? . G4c3e@G4a15@violation?) (undefined-violation? . G4c86@G4ad1@undefined-violation?) (syntax-violation? . G4c7c@G4ab8@syntax-violation?) (syntax-violation-subform . G4c7e@G4abc@syntax-violation-subform) (syntax-violation-form . G4c7d@G4aba@syntax-violation-form) (syntax-violation . G494a@G304d@syntax-violation) (serious-condition? . G4c2e@G49eb@serious-condition?) (non-continuable-violation? . G4c62@G4a73@non-continuable-violation?) (message-condition? . G4c1d@G49bf@message-condition?) (make-who-condition . G4c57@G4a58@make-who-condition) (make-warning . G4c25@G49d4@make-warning) (make-violation . G4c3d@G4a13@make-violation) (make-undefined-violation . G4c85@G4acf@make-undefined-violation) (make-syntax-violation . G4c79@G4ab2@make-syntax-violation) (make-serious-condition . G4c2d@G49e9@make-serious-condition) (make-non-continuable-violation . G4c61@G4a71@make-non-continuable-violation) (make-message-condition . G4c1b@G49bb@make-message-condition) (make-lexical-violation . G4c71@G4a9b@make-lexical-violation) (make-irritants-condition . G4c4d@G4a3e@make-irritants-condition) (make-implementation-restriction-violation . G4c69@G4a86@make-implementation-restriction-violation) (make-error . G4c35@G49fe@make-error) (make-assertion-violation . G4c45@G4a28@make-assertion-violation) (lexical-violation? . G4c72@G4a9d@lexical-violation?) (irritants-condition? . G4c4f@G4a42@irritants-condition?) (implementation-restriction-violation? . G4c6a@G4a88@implementation-restriction-violation?) (error? . G4c36@G4a00@error?) (condition-who . G4c5a@G4a5e@condition-who) (condition-message . G4c1e@G49c1@condition-message) (condition-irritants . G4c50@G4a44@condition-irritants) (assertion-violation? . G4c46@G4a2a@assertion-violation?) (no-nans-violation? . G4cfe@G4c0b@no-nans-violation?) (no-infinities-violation? . G4cf6@G4bf6@no-infinities-violation?) (make-no-nans-violation . G4cfd@G4c09@make-no-nans-violation) (make-no-infinities-violation . G4cf5@G4bf4@make-no-infinities-violation)))))) (G2b78@G2a1d@install-library 'G50bc '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G5091) (format . G508c) (string-split . G5082) (call-process . G507c) (set-current-directory! . G5078) (expand-path . G5077) (current-directory . G5076) (%spawn . G5075) (%waitpid . G5074) (%ffi-supported? . G5073) (%ffi-pointer-ref . G5072) (%ffi-pointer->string . G5071) (%ffi-call->string-or-zero . G5070) (%ffi-call->void* . G506f) (%ffi-call->void . G506e) (%ffi-call->int . G506d) (%ffi-lookup . G506c) (%ffi-open . G506b) (%fork . G506a) (%pipe . G5069) (string-upcase . G5059) (string-titlecase . G5058) (string-normalize-nfkd . G5057) (string-normalize-nfkc . G5056) (string-normalize-nfd . G5055) (string-normalize-nfc . G5054) (string-foldcase . G5053) (string-downcase . G5052) (string-ci>? . G5051) (string-ci>=? . G5050) (string-ci=? . G504f) (string-ci<? . G504e) (string-ci<=? . G504d) (char-whitespace? . G504c) (char-upper-case? . G504b) (char-title-case? . G504a) (char-numeric? . G5049) (char-lower-case? . G5048) (char-general-category . G5047) (char-upcase . G5046) (char-titlecase . G5045) (char-foldcase . G5044) (char-downcase . G5043) (char-ci>? . G5042) (char-ci>=? . G5041) (char-ci=? . G5040) (char-ci<? . G503f) (char-ci<=? . G503e) (char-alphabetic? . G503d) (make-variable-transformer . G2d9c) (identifier? . G304e) (generate-temporaries . G303a) (free-identifier=? . G303c) (syntax->datum . G3052) (datum->syntax . G3050) (bound-identifier=? . G303e) (record-type-descriptor? . G503c) (record-predicate . G503b) (record-mutator . G503a) (record-constructor . G5039) (record-accessor . G5038) (make-record-type-descriptor . G5037) (make-record-constructor-descriptor . G5036) (record? . G5035) (record-type-uid . G5034) (record-type-sealed? . G5033) (record-type-parent . G5032) (record-type-opaque? . G5031) (record-type-name . G5030) (record-type-generative? . G502f) (record-type-field-names . G502e) (record-rtd . G502d) (record-field-mutable? . G502c) (delete-file . G502b) (file-exists? . G502a) (vector-sort! . G5029) (vector-sort . G5028) (list-sort . G5027) (symbol-hash . G5026) (string-ci-hash . G5025) (string-hash . G5024) (equal-hash . G5023) (hashtable-equivalence-function . G5022) (make-hashtable . G5021) (hashtable-hash-function . G5020) (make-eqv-hashtable . G501f) (make-eq-hashtable . G501e) (hashtable? . G501d) (hashtable-update! . G501c) (hashtable-size . G501b) (hashtable-set! . G501a) (hashtable-ref . G5019) (hashtable-mutable? . G5018) (hashtable-keys . G5017) (hashtable-entries . G5016) (hashtable-delete! . G5015) (hashtable-copy . G5014) (hashtable-contains? . G5013) (hashtable-clear! . G5012) (call-with-output-file . G5011) (call-with-input-file . G5010) (write-char . G500f) (write . G500e) (with-output-to-file . G500d) (with-input-from-file . G500c) (read-char . G500b) (read . G500a) (peek-char . G5009) (open-output-file . G5008) (open-input-file . G5007) (newline . G5006) (display . G5005) (close-output-port . G5004) (close-input-port . G5003) (eof-object? . G5002) (eof-object . G5001) (current-error-port . G5000) (current-output-port . G4fff) (current-input-port . G4ffe) (output-port? . G4ffd) (input-port? . G4ffc) (utf-8-codec . G4ffb) (utf-16-codec . G4ffa) (transcoder-error-handling-mode . G4ff9) (transcoder-eol-style . G4ff8) (transcoder-codec . G4ff7) (transcoded-port . G4ff6) (textual-port? . G4ff5) (string->bytevector . G4ff4) (standard-output-port . G4ff3) (standard-input-port . G4ff2) (standard-error-port . G4ff1) (set-port-position! . G4ff0) (put-u8 . G4fef) (put-string . G4fee) (put-datum . G4fed) (put-char . G4fec) (put-bytevector . G4feb) (port? . G4fea) (port-transcoder . G4fe9) (port-position . G4fe8) (port-has-set-port-position!? . G4fe7) (port-has-port-position? . G4fe6) (port-eof? . G4fe5) (output-port-buffer-mode . G4fe4) (open-string-output-port . G4fe3) (open-string-input-port . G4fe2) (open-file-output-port . G4fe1) (open-file-input/output-port . G4fe0) (open-file-input-port . G4fdf) (open-bytevector-output-port . G4fde) (open-bytevector-input-port . G4fdd) (native-transcoder . G4fdc) (native-eol-style . G4fdb) (make-transcoder . G4fda) (latin-1-codec . G4fd9) (make-i/o-write-error . G4b0d) (make-i/o-read-error . G4af8) (make-i/o-port-error . G4bab) (make-i/o-invalid-position-error . G4b23) (make-i/o-filename-error . G4b3d) (make-i/o-file-protection-error . G4b56) (make-i/o-file-is-read-only-error . G4b6b) (make-i/o-file-does-not-exist-error . G4b95) (make-i/o-file-already-exists-error . G4b80) (make-i/o-error . G4ae3) (make-i/o-encoding-error . G4bda) (make-i/o-decoding-error . G4bc4) (make-custom-textual-output-port . G4fd8) (make-custom-textual-input/output-port . G4fd7) (make-custom-textual-input-port . G4fd6) (make-custom-binary-output-port . G4fd5) (make-custom-binary-input/output-port . G4fd4) (make-custom-binary-input-port . G4fd3) (make-bytevector . G4fd2) (lookahead-u8 . G4fd1) (lookahead-char . G4fd0) (i/o-write-error? . G4b0f) (i/o-read-error? . G4afa) (i/o-port-error? . G4baf) (i/o-invalid-position-error? . G4b27) (i/o-filename-error? . G4b41) (i/o-file-protection-error? . G4b58) (i/o-file-is-read-only-error? . G4b6d) (i/o-file-does-not-exist-error? . G4b97) (i/o-file-already-exists-error? . G4b82) (i/o-error? . G4ae5) (i/o-error-position . G4b29) (i/o-error-port . G4bb1) (i/o-error-filename . G4b43) (i/o-encoding-error? . G4bde) (i/o-encoding-error-char . G4be0) (i/o-decoding-error? . G4bc6) (get-u8 . G4fcf) (get-string-n! . G4fce) (get-string-n . G4fcd) (get-string-all . G4fcc) (get-line . G4fcb) (get-datum . G4fca) (get-char . G4fc9) (get-bytevector-some . G4fc8) (get-bytevector-n! . G4fc7) (get-bytevector-n . G4fc6) (get-bytevector-all . G4fc5) (flush-output-port . G4fc4) (close-port . G4fc3) (exit . G4fbb) (command-line . G4d0f) (string-fill! . G4fba) (string-set! . G4fb9) (set-cdr! . G4fb8) (set-car! . G4fb7) (remove . G4fb6) (remv . G4fb5) (remp . G4fb4) (remq . G4fb3) (partition . G4fb2) (memv . G4fb1) (memq . G4fb0) (memp . G4faf) (member . G4fae) (exists . G4fad) (for-all . G4fac) (fold-right . G4fab) (fold-left . G4faa) (find . G4fa9) (filter . G4fa8) (cons* . G4fa7) (assv . G4fa6) (assq . G4fa5) (assp . G4fa4) (assoc . G4fa3) (call-with-string-output-port . G4fa2) (call-with-port . G4fa1) (call-with-bytevector-output-port . G4fa0) (bytevector->string . G4f9f) (buffer-mode? . G4f9e) (binary-port? . G4f9d) (with-exception-handler . G4f9c) (raise-continuable . G4f9b) (raise . G4f9a) (eval . G302c) (environment . G3024) (make-enumeration . G4f99) (enum-set=? . G4f98) (enum-set-universe . G4f97) (enum-set-union . G4f96) (enum-set-subset? . G4f95) (enum-set-projection . G4f94) (enum-set-member? . G4f93) (enum-set-intersection . G4f92) (enum-set-indexer . G4f91) (enum-set-difference . G4f90) (enum-set-constructor . G4f8f) (enum-set-complement . G4f8e) (enum-set->list . G4f8d) (who-condition? . G4a5b) (warning? . G49d5) (violation? . G4a14) (undefined-violation? . G4ad0) (syntax-violation? . G4ab7) (syntax-violation-subform . G4abb) (syntax-violation-form . G4ab9) (syntax-violation . G304c) (simple-conditions . G4f8c) (serious-condition? . G49ea) (non-continuable-violation? . G4a72) (message-condition? . G49be) (make-who-condition . G4a57) (make-warning . G49d3) (make-violation . G4a12) (make-undefined-violation . G4ace) (make-syntax-violation . G4ab1) (make-serious-condition . G49e8) (make-non-continuable-violation . G4a70) (make-message-condition . G49ba) (make-lexical-violation . G4a9a) (make-irritants-condition . G4a3d) (make-implementation-restriction-violation . G4a85) (make-error . G49fd) (make-assertion-violation . G4a27) (lexical-violation? . G4a9c) (irritants-condition? . G4a41) (implementation-restriction-violation? . G4a87) (error? . G49ff) (condition-who . G4a5d) (condition-predicate . G4f8b) (condition-message . G49c0) (condition-irritants . G4a43) (condition-accessor . G4f8a) (condition . G4f89) (assertion-violation? . G4a29) (condition? . G4f88) (utf32->string . G4f87) (utf16->string . G4f86) (utf8->string . G4f85) (uint-list->bytevector . G4f84) (u8-list->bytevector . G4f83) (string->utf8 . G4f82) (string->utf32 . G4f81) (string->utf16 . G4f80) (sint-list->bytevector . G4f7f) (native-endianness . G4f7e) (bytevector? . G4f7d) (bytevector=? . G4f7c) (bytevector-uint-set! . G4f7b) (bytevector-uint-ref . G4f7a) (bytevector-u8-set! . G4f79) (bytevector-u8-ref . G4f78) (bytevector-u64-set! . G4f77) (bytevector-u64-ref . G4f76) (bytevector-u64-native-set! . G4f75) (bytevector-u64-native-ref . G4f74) (bytevector-u32-set! . G4f73) (bytevector-u32-ref . G4f72) (bytevector-u32-native-set! . G4f71) (bytevector-u32-native-ref . G4f70) (bytevector-u16-set! . G4f6f) (bytevector-u16-ref . G4f6e) (bytevector-u16-native-set! . G4f6d) (bytevector-u16-native-ref . G4f6c) (bytevector-sint-set! . G4f6b) (bytevector-sint-ref . G4f6a) (bytevector-s8-set! . G4f69) (bytevector-s8-ref . G4f68) (bytevector-s64-set! . G4f67) (bytevector-s64-ref . G4f66) (bytevector-s64-native-set! . G4f65) (bytevector-s64-native-ref . G4f64) (bytevector-s32-set! . G4f63) (bytevector-s32-ref . G4f62) (bytevector-s32-native-set! . G4f61) (bytevector-s32-native-ref . G4f60) (bytevector-s16-set! . G4f5f) (bytevector-s16-ref . G4f5e) (bytevector-s16-native-set! . G4f5d) (bytevector-s16-native-ref . G4f5c) (bytevector-length . G4f5b) (bytevector-ieee-single-ref . G4f5a) (bytevector-ieee-single-set! . G4f59) (bytevector-ieee-single-native-set! . G4f58) (bytevector-ieee-single-native-ref . G4f57) (bytevector-ieee-double-set! . G4f56) (bytevector-ieee-double-ref . G4f55) (bytevector-ieee-double-native-set! . G4f54) (bytevector-ieee-double-native-ref . G4f53) (bytevector-fill! . G4f52) (bytevector-copy! . G4f51) (bytevector-copy . G4f50) (bytevector->uint-list . G4f4f) (bytevector->u8-list . G4f4e) (bytevector->sint-list . G4f4d) (no-nans-violation? . G4c0a) (no-infinities-violation? . G4bf5) (make-no-nans-violation . G4c08) (make-no-infinities-violation . G4bf3) (real->flonum . G4f4c) (flzero? . G4f4b) (fltruncate . G4f4a) (fltan . G4f49) (flsqrt . G4f48) (flsin . G4f47) (flround . G4f46) (flpositive? . G4f45) (flonum? . G4f44) (flodd? . G4f43) (flnumerator . G4f42) (flnegative? . G4f41) (flnan? . G4f40) (flmod0 . G4f3f) (flmod . G4f3e) (flmin . G4f3d) (flmax . G4f3c) (fllog . G4f3b) (flinteger? . G4f3a) (flinfinite? . G4f39) (flfloor . G4f38) (flfinite? . G4f37) (flexpt . G4f36) (flexp . G4f35) (fleven? . G4f34) (fldiv0-and-mod0 . G4f33) (fldiv0 . G4f32) (fldiv-and-mod . G4f31) (fldiv . G4f30) (fldenominator . G4f2f) (flcos . G4f2e) (flceiling . G4f2d) (flatan . G4f2c) (flasin . G4f2b) (flacos . G4f2a) (flabs . G4f29) (fl>? . G4f28) (fl>=? . G4f27) (fl=? . G4f26) (fl<? . G4f25) (fl<=? . G4f24) (fl/ . G4f23) (fl- . G4f22) (fl+ . G4f21) (fl* . G4f20) (fixnum->flonum . G4f1f) (fxzero? . G4f1e) (fxxor . G4f1d) (fxrotate-bit-field . G4f1c) (fxreverse-bit-field . G4f1b) (fxpositive? . G4f1a) (fxodd? . G4f19) (fxnot . G4f18) (fxnegative? . G4f17) (fxmod0 . G4f16) (fxmod . G4f15) (fxmin . G4f14) (fxmax . G4f13) (fxlength . G4f12) (fxior . G4f11) (fxif . G4f10) (fxfirst-bit-set . G4f0f) (fxeven? . G4f0e) (fxdiv0-and-mod0 . G4f0d) (fxdiv0 . G4f0c) (fxdiv-and-mod . G4f0b) (fxdiv . G4f0a) (fxcopy-bit-field . G4f09) (fxcopy-bit . G4f08) (fxbit-set? . G4f07) (fxbit-field . G4f06) (fxbit-count . G4f05) (fxarithmetic-shift-right . G4f04) (fxarithmetic-shift-left . G4f03) (fxarithmetic-shift . G4f02) (fxand . G4f01) (fx>? . G4f00) (fx>=? . G4eff) (fx=? . G4efe) (fx<? . G4efd) (fx<=? . G4efc) (fx-/carry . G4efb) (fx- . G4efa) (fx+/carry . G4ef9) (fx+ . G4ef8) (fx*/carry . G4ef7) (fx* . G4ef6) (greatest-fixnum . G4ef5) (least-fixnum . G4ef4) (fixnum-width . G4ef3) (fixnum? . G4ef2) (bitwise-rotate-bit-field . G4ef1) (bitwise-reverse-bit-field . G4ef0) (bitwise-length . G4eef) (bitwise-if . G4eee) (bitwise-first-bit-set . G4eed) (bitwise-copy-bit-field . G4eec) (bitwise-copy-bit . G4eeb) (bitwise-bit-set? . G4eea) (bitwise-bit-field . G4ee9) (bitwise-bit-count . G4ee8) (bitwise-xor . G4ee7) (bitwise-ior . G4ee6) (bitwise-and . G4ee5) (bitwise-not . G4ee4) (bitwise-arithmetic-shift-right . G4ee3) (bitwise-arithmetic-shift-left . G4ee2) (bitwise-arithmetic-shift . G4ee1) (zero? . G4ee0) (vector? . G4edf) (vector-set! . G4ede) (vector-ref . G4edd) (vector-map . G4edc) (vector-length . G4edb) (vector-for-each . G4eda) (vector-fill! . G4ed9) (vector->list . G4ed8) (vector . G4ed7) (values . G4ed6) (truncate . G4ed5) (tan . G4ed4) (symbol? . G4ed3) (symbol=? . G4ed2) (symbol->string . G4ed1) (substring . G4ed0) (string? . G4ecf) (string>? . G4ece) (string>=? . G4ecd) (string=? . G4ecc) (string<? . G4ecb) (string<=? . G4eca) (string-ref . G4ec9) (string-length . G4ec8) (string-for-each . G4ec7) (string-copy . G4ec6) (string-append . G4ec5) (string->symbol . G4ec4) (string->number . G4ec3) (string->list . G4ec2) (string . G4ec1) (sqrt . G4ec0) (sin . G4ebf) (round . G4ebe) (reverse . G4ebd) (real? . G4ebc) (real-valued? . G4ebb) (real-part . G4eba) (rationalize . G4eb9) (rational? . G4eb8) (rational-valued? . G4eb7) (procedure? . G4eb6) (positive? . G4eb5) (pair? . G4eb4) (odd? . G4eb3) (numerator . G4eb2) (number? . G4eb1) (number->string . G4eb0) (null? . G4eaf) (not . G4eae) (negative? . G4ead) (nan? . G4eac) (min . G4eab) (max . G4eaa) (map . G4ea9) (make-vector . G4ea8) (make-string . G4ea7) (make-rectangular . G4ea6) (make-polar . G4ea5) (magnitude . G4ea4) (log . G4ea3) (list? . G4ea2) (list-tail . G4ea1) (list-ref . G4ea0) (list->vector . G4e9f) (list->string . G4e9e) (list . G4e9d) (length . G4e9c) (lcm . G4e9b) (integer? . G4e9a) (integer-valued? . G4e99) (integer->char . G4e98) (infinite? . G4e97) (inexact? . G4e96) (inexact . G4e95) (imag-part . G4e94) (gcd . G4e93) (for-each . G4e92) (floor . G4e91) (finite? . G4e90) (expt . G4e8f) (exp . G4e8e) (exact? . G4e8d) (exact-integer-sqrt . G4e8c) (exact . G4e8b) (even? . G4e8a) (error . G4e89) (eqv? . G4e88) (equal? . G4e87) (eq? . G4e86) (dynamic-wind . G4e85) (div0-and-mod0 . G4e84) (mod0 . G4e83) (div0 . G4e82) (div-and-mod . G4e81) (mod . G4e80) (div . G4e7f) (denominator . G4e7e) (cos . G4e7d) (cons . G4e7c) (complex? . G4e7b) (char? . G4e7a) (char>? . G4e79) (char>=? . G4e78) (char=? . G4e77) (char<? . G4e76) (char<=? . G4e75) (char->integer . G4e74) (ceiling . G4e73) (call-with-values . G4e72) (call/cc . G4e71) (call-with-current-continuation . G4e70) (cddddr . G4e6f) (cdddar . G4e6e) (cddadr . G4e6d) (cddaar . G4e6c) (cdaddr . G4e6b) (cdadar . G4e6a) (cdaadr . G4e69) (cdaaar . G4e68) (cadddr . G4e67) (caddar . G4e66) (cadadr . G4e65) (cadaar . G4e64) (caaddr . G4e63) (caadar . G4e62) (caaadr . G4e61) (caaaar . G4e60) (cdddr . G4e5f) (cddar . G4e5e) (cdadr . G4e5d) (cdaar . G4e5c) (caddr . G4e5b) (cadar . G4e5a) (caadr . G4e59) (caaar . G4e58) (cddr . G4e57) (cdar . G4e56) (cadr . G4e55) (caar . G4e54) (cdr . G4e53) (car . G4e52) (boolean? . G4e51) (boolean=? . G4e50) (atan . G4e4f) (assertion-violation . G4e4e) (asin . G4e4d) (apply . G4e4c) (append . G4e4b) (angle . G4e4a) (acos . G4e49) (abs . G4e48) (/ . G4e47) (* . G4e46) (- . G4e45) (+ . G4e44) (>= . G4e43) (> . G4e42) (= . G4e41) (<= . G4e40) (< . G4e3f) (library . G4e3e) (export . G4e3d) (&no-nans . G4e3c) (&no-infinities . G4e3b) (&i/o-encoding . G4e3a) (&i/o-decoding . G4e39) (&i/o-port . G4e38) (&i/o-file-does-not-exist . G4e37) (&i/o-file-already-exists . G4e36) (&i/o-file-is-read-only . G4e35) (&i/o-file-protection . G4e34) (&i/o-filename . G4e33) (&i/o-invalid-position . G4e32) (&i/o-write . G4e31) (&i/o-read . G4e30) (&i/o . G4e2f) (&undefined . G4e2e) (&syntax . G4e2d) (&lexical . G4e2c) (&implementation-restriction . G4e2b) (&non-continuable . G4e2a) (&who . G4e29) (&irritants . G4e28) (&assertion . G4e27) (&violation . G4e26) (&error . G4e25) (&serious . G4e24) (&warning . G4e23) (&message . G4e22) (&condition . G4e21) (define-condition-type . G4e20) (define-enumeration . G4e1f) (define-record-type . G4e1e) (parent-rtd . G4e1d) (nongenerative . G4e1c) (opaque . G4e1b) (sealed . G4e1a) (protocol . G4e19) (parent . G4e18) (immutable . G4e17) (mutable . G4e16) (fields . G4e15) (error-handling-mode . G4e14) (file-options . G4e13) (buffer-mode . G4e12) (eol-style . G4e11) (guard . G4e10) (unsyntax-splicing . G4e0d) (unsyntax . G4e0c) (unquote-splicing . G4e0b) (unquote . G4e0a) (_ . G4e09) (else . G4e08) (=> . G4e07) (... . G4e06) (assert . G4e05) (endianness . G4e04) (do . G4e01) (cond . G4e00) (let* . G4dff) (let . G4dfe) (let*-values . G4dfd) (let-values . G4dfc) (identifier-syntax . G4dfb) (with-syntax . G4dfa) (quasisyntax . G4df9) (quasiquote . G4df8) (syntax-rules . G4df7) (include . G4df6) (record-constructor-descriptor . G4df4) (record-type-descriptor . G4df3) (case . G4df2) (unless . G4df0) (when . G4def) (or . G4dee) (and . G4ded) (if . G4dec) (letrec* . G4deb) (letrec . G4dea) (case-lambda . G4de8) (lambda . G4de7) (syntax . G4de6) (syntax-case . G4de5) (quote . G4de4) (letrec-syntax . G4de2) (let-syntax . G4de1) (set! . G4de0) (import . G4ddf) (begin . G4dde) (define-syntax . G4ddc) (define . G4ddb)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50bd '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fbc) (unquote-splicing . G4e0b) (unquote . G4e0a) (_ . G4e09) (else . G4e08) (=> . G4e07) (... . G4e06) (delay . G4e03) (do . G4e01) (cond . G4e00) (let* . G4dff) (let . G4dfe) (quasiquote . G4df8) (syntax-rules . G4df7) (case . G4df2) (or . G4dee) (and . G4ded) (if . G4dec) (letrec . G4dea) (lambda . G4de7) (quote . G4de4) (letrec-syntax . G4de2) (let-syntax . G4de1) (set! . G4de0) (begin . G4dde) (define-syntax . G4ddc) (define . G4ddb)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50be '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5051) (string-ci>=? . G5050) (string-ci=? . G504f) (string-ci<? . G504e) (string-ci<=? . G504d) (char-whitespace? . G504c) (char-upper-case? . G504b) (char-numeric? . G5049) (char-lower-case? . G5048) (char-upcase . G5046) (char-downcase . G5043) (char-ci>? . G5042) (char-ci>=? . G5041) (char-ci=? . G5040) (char-ci<? . G503f) (char-ci<=? . G503e) (char-alphabetic? . G503d) (call-with-output-file . G5011) (call-with-input-file . G5010) (write-char . G500f) (write . G500e) (with-output-to-file . G500d) (with-input-from-file . G500c) (read-char . G500b) (read . G500a) (peek-char . G5009) (open-output-file . G5008) (open-input-file . G5007) (newline . G5006) (display . G5005) (close-output-port . G5004) (close-input-port . G5003) (eof-object . G5001) (current-output-port . G4fff) (current-input-port . G4ffe) (output-port? . G4ffd) (input-port? . G4ffc) (scheme-report-environment . G3028) (quotient . G4fc2) (null-environment . G3026) (remainder . G4fc1) (modulo . G4fc0) (inexact->exact . G4fbf) (force . G4fbe) (exact->inexact . G4fbd) (make-promise . G4fbc) (string-fill! . G4fba) (string-set! . G4fb9) (set-cdr! . G4fb8) (set-car! . G4fb7) (memv . G4fb1) (memq . G4fb0) (member . G4fae) (assv . G4fa6) (assq . G4fa5) (assoc . G4fa3) (eval . G302c) (zero? . G4ee0) (vector? . G4edf) (vector-set! . G4ede) (vector-ref . G4edd) (vector-length . G4edb) (vector-fill! . G4ed9) (vector->list . G4ed8) (vector . G4ed7) (values . G4ed6) (truncate . G4ed5) (tan . G4ed4) (symbol? . G4ed3) (symbol->string . G4ed1) (substring . G4ed0) (string? . G4ecf) (string>? . G4ece) (string>=? . G4ecd) (string=? . G4ecc) (string<? . G4ecb) (string<=? . G4eca) (string-ref . G4ec9) (string-length . G4ec8) (string-copy . G4ec6) (string-append . G4ec5) (string->symbol . G4ec4) (string->number . G4ec3) (string->list . G4ec2) (string . G4ec1) (sqrt . G4ec0) (sin . G4ebf) (round . G4ebe) (reverse . G4ebd) (real? . G4ebc) (real-part . G4eba) (rationalize . G4eb9) (rational? . G4eb8) (procedure? . G4eb6) (positive? . G4eb5) (pair? . G4eb4) (odd? . G4eb3) (numerator . G4eb2) (number? . G4eb1) (number->string . G4eb0) (not . G4eae) (negative? . G4ead) (min . G4eab) (max . G4eaa) (map . G4ea9) (make-vector . G4ea8) (make-string . G4ea7) (make-rectangular . G4ea6) (make-polar . G4ea5) (magnitude . G4ea4) (log . G4ea3) (list? . G4ea2) (list-tail . G4ea1) (list-ref . G4ea0) (list->vector . G4e9f) (list->string . G4e9e) (list . G4e9d) (length . G4e9c) (lcm . G4e9b) (integer? . G4e9a) (integer->char . G4e98) (inexact? . G4e96) (imag-part . G4e94) (gcd . G4e93) (for-each . G4e92) (floor . G4e91) (expt . G4e8f) (exp . G4e8e) (exact? . G4e8d) (even? . G4e8a) (eqv? . G4e88) (equal? . G4e87) (eq? . G4e86) (dynamic-wind . G4e85) (denominator . G4e7e) (cos . G4e7d) (cons . G4e7c) (complex? . G4e7b) (char? . G4e7a) (char>? . G4e79) (char>=? . G4e78) (char=? . G4e77) (char<? . G4e76) (char<=? . G4e75) (char->integer . G4e74) (ceiling . G4e73) (call-with-values . G4e72) (call-with-current-continuation . G4e70) (cddddr . G4e6f) (cdddar . G4e6e) (cddadr . G4e6d) (cddaar . G4e6c) (cdaddr . G4e6b) (cdadar . G4e6a) (cdaadr . G4e69) (cdaaar . G4e68) (cadddr . G4e67) (caddar . G4e66) (cadadr . G4e65) (cadaar . G4e64) (caaddr . G4e63) (caadar . G4e62) (caaadr . G4e61) (caaaar . G4e60) (cdddr . G4e5f) (cddar . G4e5e) (cdadr . G4e5d) (cdaar . G4e5c) (caddr . G4e5b) (cadar . G4e5a) (caadr . G4e59) (caaar . G4e58) (cddr . G4e57) (cdar . G4e56) (cadr . G4e55) (caar . G4e54) (cdr . G4e53) (car . G4e52) (boolean? . G4e51) (atan . G4e4f) (asin . G4e4d) (apply . G4e4c) (append . G4e4b) (angle . G4e4a) (acos . G4e49) (abs . G4e48) (/ . G4e47) (* . G4e46) (- . G4e45) (+ . G4e44) (>= . G4e43) (> . G4e42) (= . G4e41) (<= . G4e40) (< . G4e3f) (unquote-splicing . G4e0b) (unquote . G4e0a) (else . G4e08) (=> . G4e07) (... . G4e06) (delay . G4e03) (do . G4e01) (cond . G4e00) (let* . G4dff) (let . G4dfe) (quasiquote . G4df8) (syntax-rules . G4df7) (case . G4df2) (or . G4dee) (and . G4ded) (if . G4dec) (letrec . G4dea) (lambda . G4de7) (quote . G4de4) (letrec-syntax . G4de2) (let-syntax . G4de1) (set! . G4de0) (begin . G4dde) (define-syntax . G4ddc) (define . G4ddb)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50bf '(psyntax modules) '() '() '() '() '((module . G4ddd)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50c0 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50c1 '(rnrs) '(6) '() '() '() '((regexp? . G50b4) (string-upcase . G5059) (string-titlecase . G5058) (string-normalize-nfkd . G5057) (string-normalize-nfkc . G5056) (string-normalize-nfd . G5055) (string-normalize-nfc . G5054) (string-foldcase . G5053) (string-downcase . G5052) (string-ci>? . G5051) (string-ci>=? . G5050) (string-ci=? . G504f) (string-ci<? . G504e) (string-ci<=? . G504d) (char-whitespace? . G504c) (char-upper-case? . G504b) (char-title-case? . G504a) (char-numeric? . G5049) (char-lower-case? . G5048) (char-general-category . G5047) (char-upcase . G5046) (char-titlecase . G5045) (char-foldcase . G5044) (char-downcase . G5043) (char-ci>? . G5042) (char-ci>=? . G5041) (char-ci=? . G5040) (char-ci<? . G503f) (char-ci<=? . G503e) (char-alphabetic? . G503d) (make-variable-transformer . G2d9c) (identifier? . G304e) (generate-temporaries . G303a) (free-identifier=? . G303c) (syntax->datum . G3052) (datum->syntax . G3050) (bound-identifier=? . G303e) (record-type-descriptor? . G503c) (record-predicate . G503b) (record-mutator . G503a) (record-constructor . G5039) (record-accessor . G5038) (make-record-type-descriptor . G5037) (make-record-constructor-descriptor . G5036) (record? . G5035) (record-type-uid . G5034) (record-type-sealed? . G5033) (record-type-parent . G5032) (record-type-opaque? . G5031) (record-type-name . G5030) (record-type-generative? . G502f) (record-type-field-names . G502e) (record-rtd . G502d) (record-field-mutable? . G502c) (delete-file . G502b) (file-exists? . G502a) (vector-sort! . G5029) (vector-sort . G5028) (list-sort . G5027) (symbol-hash . G5026) (string-ci-hash . G5025) (string-hash . G5024) (equal-hash . G5023) (hashtable-equivalence-function . G5022) (make-hashtable . G5021) (hashtable-hash-function . G5020) (make-eqv-hashtable . G501f) (make-eq-hashtable . G501e) (hashtable? . G501d) (hashtable-update! . G501c) (hashtable-size . G501b) (hashtable-set! . G501a) (hashtable-ref . G5019) (hashtable-mutable? . G5018) (hashtable-keys . G5017) (hashtable-entries . G5016) (hashtable-delete! . G5015) (hashtable-copy . G5014) (hashtable-contains? . G5013) (hashtable-clear! . G5012) (call-with-output-file . G5011) (call-with-input-file . G5010) (write-char . G500f) (write . G500e) (with-output-to-file . G500d) (with-input-from-file . G500c) (read-char . G500b) (read . G500a) (peek-char . G5009) (open-output-file . G5008) (open-input-file . G5007) (newline . G5006) (display . G5005) (close-output-port . G5004) (close-input-port . G5003) (eof-object? . G5002) (eof-object . G5001) (current-error-port . G5000) (current-output-port . G4fff) (current-input-port . G4ffe) (output-port? . G4ffd) (input-port? . G4ffc) (utf-8-codec . G4ffb) (utf-16-codec . G4ffa) (transcoder-error-handling-mode . G4ff9) (transcoder-eol-style . G4ff8) (transcoder-codec . G4ff7) (transcoded-port . G4ff6) (textual-port? . G4ff5) (string->bytevector . G4ff4) (standard-output-port . G4ff3) (standard-input-port . G4ff2) (standard-error-port . G4ff1) (set-port-position! . G4ff0) (put-u8 . G4fef) (put-string . G4fee) (put-datum . G4fed) (put-char . G4fec) (put-bytevector . G4feb) (port? . G4fea) (port-transcoder . G4fe9) (port-position . G4fe8) (port-has-set-port-position!? . G4fe7) (port-has-port-position? . G4fe6) (port-eof? . G4fe5) (output-port-buffer-mode . G4fe4) (open-string-output-port . G4fe3) (open-string-input-port . G4fe2) (open-file-output-port . G4fe1) (open-file-input/output-port . G4fe0) (open-file-input-port . G4fdf) (open-bytevector-output-port . G4fde) (open-bytevector-input-port . G4fdd) (native-transcoder . G4fdc) (native-eol-style . G4fdb) (make-transcoder . G4fda) (latin-1-codec . G4fd9) (make-i/o-write-error . G4b0d) (make-i/o-read-error . G4af8) (make-i/o-port-error . G4bab) (make-i/o-invalid-position-error . G4b23) (make-i/o-filename-error . G4b3d) (make-i/o-file-protection-error . G4b56) (make-i/o-file-is-read-only-error . G4b6b) (make-i/o-file-does-not-exist-error . G4b95) (make-i/o-file-already-exists-error . G4b80) (make-i/o-error . G4ae3) (make-i/o-encoding-error . G4bda) (make-i/o-decoding-error . G4bc4) (make-custom-textual-output-port . G4fd8) (make-custom-textual-input/output-port . G4fd7) (make-custom-textual-input-port . G4fd6) (make-custom-binary-output-port . G4fd5) (make-custom-binary-input/output-port . G4fd4) (make-custom-binary-input-port . G4fd3) (make-bytevector . G4fd2) (lookahead-u8 . G4fd1) (lookahead-char . G4fd0) (i/o-write-error? . G4b0f) (i/o-read-error? . G4afa) (i/o-port-error? . G4baf) (i/o-invalid-position-error? . G4b27) (i/o-filename-error? . G4b41) (i/o-file-protection-error? . G4b58) (i/o-file-is-read-only-error? . G4b6d) (i/o-file-does-not-exist-error? . G4b97) (i/o-file-already-exists-error? . G4b82) (i/o-error? . G4ae5) (i/o-error-position . G4b29) (i/o-error-port . G4bb1) (i/o-error-filename . G4b43) (i/o-encoding-error? . G4bde) (i/o-encoding-error-char . G4be0) (i/o-decoding-error? . G4bc6) (get-u8 . G4fcf) (get-string-n! . G4fce) (get-string-n . G4fcd) (get-string-all . G4fcc) (get-line . G4fcb) (get-datum . G4fca) (get-char . G4fc9) (get-bytevector-some . G4fc8) (get-bytevector-n! . G4fc7) (get-bytevector-n . G4fc6) (get-bytevector-all . G4fc5) (flush-output-port . G4fc4) (close-port . G4fc3) (exit . G4fbb) (command-line . G4d0f) (remove . G4fb6) (remv . G4fb5) (remp . G4fb4) (remq . G4fb3) (partition . G4fb2) (memv . G4fb1) (memq . G4fb0) (memp . G4faf) (member . G4fae) (exists . G4fad) (for-all . G4fac) (fold-right . G4fab) (fold-left . G4faa) (find . G4fa9) (filter . G4fa8) (cons* . G4fa7) (assv . G4fa6) (assq . G4fa5) (assp . G4fa4) (assoc . G4fa3) (call-with-string-output-port . G4fa2) (call-with-port . G4fa1) (call-with-bytevector-output-port . G4fa0) (bytevector->string . G4f9f) (buffer-mode? . G4f9e) (binary-port? . G4f9d) (with-exception-handler . G4f9c) (raise-continuable . G4f9b) (raise . G4f9a) (make-enumeration . G4f99) (enum-set=? . G4f98) (enum-set-universe . G4f97) (enum-set-union . G4f96) (enum-set-subset? . G4f95) (enum-set-projection . G4f94) (enum-set-member? . G4f93) (enum-set-intersection . G4f92) (enum-set-indexer . G4f91) (enum-set-difference . G4f90) (enum-set-constructor . G4f8f) (enum-set-complement . G4f8e) (enum-set->list . G4f8d) (who-condition? . G4a5b) (warning? . G49d5) (violation? . G4a14) (undefined-violation? . G4ad0) (syntax-violation? . G4ab7) (syntax-violation-subform . G4abb) (syntax-violation-form . G4ab9) (syntax-violation . G304c) (simple-conditions . G4f8c) (serious-condition? . G49ea) (non-continuable-violation? . G4a72) (message-condition? . G49be) (make-who-condition . G4a57) (make-warning . G49d3) (make-violation . G4a12) (make-undefined-violation . G4ace) (make-syntax-violation . G4ab1) (make-serious-condition . G49e8) (make-non-continuable-violation . G4a70) (make-message-condition . G49ba) (make-lexical-violation . G4a9a) (make-irritants-condition . G4a3d) (make-implementation-restriction-violation . G4a85) (make-error . G49fd) (make-assertion-violation . G4a27) (lexical-violation? . G4a9c) (irritants-condition? . G4a41) (implementation-restriction-violation? . G4a87) (error? . G49ff) (condition-who . G4a5d) (condition-predicate . G4f8b) (condition-message . G49c0) (condition-irritants . G4a43) (condition-accessor . G4f8a) (condition . G4f89) (assertion-violation? . G4a29) (condition? . G4f88) (utf32->string . G4f87) (utf16->string . G4f86) (utf8->string . G4f85) (uint-list->bytevector . G4f84) (u8-list->bytevector . G4f83) (string->utf8 . G4f82) (string->utf32 . G4f81) (string->utf16 . G4f80) (sint-list->bytevector . G4f7f) (native-endianness . G4f7e) (bytevector? . G4f7d) (bytevector=? . G4f7c) (bytevector-uint-set! . G4f7b) (bytevector-uint-ref . G4f7a) (bytevector-u8-set! . G4f79) (bytevector-u8-ref . G4f78) (bytevector-u64-set! . G4f77) (bytevector-u64-ref . G4f76) (bytevector-u64-native-set! . G4f75) (bytevector-u64-native-ref . G4f74) (bytevector-u32-set! . G4f73) (bytevector-u32-ref . G4f72) (bytevector-u32-native-set! . G4f71) (bytevector-u32-native-ref . G4f70) (bytevector-u16-set! . G4f6f) (bytevector-u16-ref . G4f6e) (bytevector-u16-native-set! . G4f6d) (bytevector-u16-native-ref . G4f6c) (bytevector-sint-set! . G4f6b) (bytevector-sint-ref . G4f6a) (bytevector-s8-set! . G4f69) (bytevector-s8-ref . G4f68) (bytevector-s64-set! . G4f67) (bytevector-s64-ref . G4f66) (bytevector-s64-native-set! . G4f65) (bytevector-s64-native-ref . G4f64) (bytevector-s32-set! . G4f63) (bytevector-s32-ref . G4f62) (bytevector-s32-native-set! . G4f61) (bytevector-s32-native-ref . G4f60) (bytevector-s16-set! . G4f5f) (bytevector-s16-ref . G4f5e) (bytevector-s16-native-set! . G4f5d) (bytevector-s16-native-ref . G4f5c) (bytevector-length . G4f5b) (bytevector-ieee-single-ref . G4f5a) (bytevector-ieee-single-set! . G4f59) (bytevector-ieee-single-native-set! . G4f58) (bytevector-ieee-single-native-ref . G4f57) (bytevector-ieee-double-set! . G4f56) (bytevector-ieee-double-ref . G4f55) (bytevector-ieee-double-native-set! . G4f54) (bytevector-ieee-double-native-ref . G4f53) (bytevector-fill! . G4f52) (bytevector-copy! . G4f51) (bytevector-copy . G4f50) (bytevector->uint-list . G4f4f) (bytevector->u8-list . G4f4e) (bytevector->sint-list . G4f4d) (no-nans-violation? . G4c0a) (no-infinities-violation? . G4bf5) (make-no-nans-violation . G4c08) (make-no-infinities-violation . G4bf3) (real->flonum . G4f4c) (flzero? . G4f4b) (fltruncate . G4f4a) (fltan . G4f49) (flsqrt . G4f48) (flsin . G4f47) (flround . G4f46) (flpositive? . G4f45) (flonum? . G4f44) (flodd? . G4f43) (flnumerator . G4f42) (flnegative? . G4f41) (flnan? . G4f40) (flmod0 . G4f3f) (flmod . G4f3e) (flmin . G4f3d) (flmax . G4f3c) (fllog . G4f3b) (flinteger? . G4f3a) (flinfinite? . G4f39) (flfloor . G4f38) (flfinite? . G4f37) (flexpt . G4f36) (flexp . G4f35) (fleven? . G4f34) (fldiv0-and-mod0 . G4f33) (fldiv0 . G4f32) (fldiv-and-mod . G4f31) (fldiv . G4f30) (fldenominator . G4f2f) (flcos . G4f2e) (flceiling . G4f2d) (flatan . G4f2c) (flasin . G4f2b) (flacos . G4f2a) (flabs . G4f29) (fl>? . G4f28) (fl>=? . G4f27) (fl=? . G4f26) (fl<? . G4f25) (fl<=? . G4f24) (fl/ . G4f23) (fl- . G4f22) (fl+ . G4f21) (fl* . G4f20) (fixnum->flonum . G4f1f) (fxzero? . G4f1e) (fxxor . G4f1d) (fxrotate-bit-field . G4f1c) (fxreverse-bit-field . G4f1b) (fxpositive? . G4f1a) (fxodd? . G4f19) (fxnot . G4f18) (fxnegative? . G4f17) (fxmod0 . G4f16) (fxmod . G4f15) (fxmin . G4f14) (fxmax . G4f13) (fxlength . G4f12) (fxior . G4f11) (fxif . G4f10) (fxfirst-bit-set . G4f0f) (fxeven? . G4f0e) (fxdiv0-and-mod0 . G4f0d) (fxdiv0 . G4f0c) (fxdiv-and-mod . G4f0b) (fxdiv . G4f0a) (fxcopy-bit-field . G4f09) (fxcopy-bit . G4f08) (fxbit-set? . G4f07) (fxbit-field . G4f06) (fxbit-count . G4f05) (fxarithmetic-shift-right . G4f04) (fxarithmetic-shift-left . G4f03) (fxarithmetic-shift . G4f02) (fxand . G4f01) (fx>? . G4f00) (fx>=? . G4eff) (fx=? . G4efe) (fx<? . G4efd) (fx<=? . G4efc) (fx-/carry . G4efb) (fx- . G4efa) (fx+/carry . G4ef9) (fx+ . G4ef8) (fx*/carry . G4ef7) (fx* . G4ef6) (greatest-fixnum . G4ef5) (least-fixnum . G4ef4) (fixnum-width . G4ef3) (fixnum? . G4ef2) (bitwise-rotate-bit-field . G4ef1) (bitwise-reverse-bit-field . G4ef0) (bitwise-length . G4eef) (bitwise-if . G4eee) (bitwise-first-bit-set . G4eed) (bitwise-copy-bit-field . G4eec) (bitwise-copy-bit . G4eeb) (bitwise-bit-set? . G4eea) (bitwise-bit-field . G4ee9) (bitwise-bit-count . G4ee8) (bitwise-xor . G4ee7) (bitwise-ior . G4ee6) (bitwise-and . G4ee5) (bitwise-not . G4ee4) (bitwise-arithmetic-shift-right . G4ee3) (bitwise-arithmetic-shift-left . G4ee2) (bitwise-arithmetic-shift . G4ee1) (zero? . G4ee0) (vector? . G4edf) (vector-set! . G4ede) (vector-ref . G4edd) (vector-map . G4edc) (vector-length . G4edb) (vector-for-each . G4eda) (vector-fill! . G4ed9) (vector->list . G4ed8) (vector . G4ed7) (values . G4ed6) (truncate . G4ed5) (tan . G4ed4) (symbol? . G4ed3) (symbol=? . G4ed2) (symbol->string . G4ed1) (substring . G4ed0) (string? . G4ecf) (string>? . G4ece) (string>=? . G4ecd) (string=? . G4ecc) (string<? . G4ecb) (string<=? . G4eca) (string-ref . G4ec9) (string-length . G4ec8) (string-for-each . G4ec7) (string-copy . G4ec6) (string-append . G4ec5) (string->symbol . G4ec4) (string->number . G4ec3) (string->list . G4ec2) (string . G4ec1) (sqrt . G4ec0) (sin . G4ebf) (round . G4ebe) (reverse . G4ebd) (real? . G4ebc) (real-valued? . G4ebb) (real-part . G4eba) (rationalize . G4eb9) (rational? . G4eb8) (rational-valued? . G4eb7) (procedure? . G4eb6) (positive? . G4eb5) (pair? . G4eb4) (odd? . G4eb3) (numerator . G4eb2) (number? . G4eb1) (number->string . G4eb0) (null? . G4eaf) (not . G4eae) (negative? . G4ead) (nan? . G4eac) (min . G4eab) (max . G4eaa) (map . G4ea9) (make-vector . G4ea8) (make-string . G4ea7) (make-rectangular . G4ea6) (make-polar . G4ea5) (magnitude . G4ea4) (log . G4ea3) (list? . G4ea2) (list-tail . G4ea1) (list-ref . G4ea0) (list->vector . G4e9f) (list->string . G4e9e) (list . G4e9d) (length . G4e9c) (lcm . G4e9b) (integer? . G4e9a) (integer-valued? . G4e99) (integer->char . G4e98) (infinite? . G4e97) (inexact? . G4e96) (inexact . G4e95) (imag-part . G4e94) (gcd . G4e93) (for-each . G4e92) (floor . G4e91) (finite? . G4e90) (expt . G4e8f) (exp . G4e8e) (exact? . G4e8d) (exact-integer-sqrt . G4e8c) (exact . G4e8b) (even? . G4e8a) (error . G4e89) (eqv? . G4e88) (equal? . G4e87) (eq? . G4e86) (dynamic-wind . G4e85) (div0-and-mod0 . G4e84) (mod0 . G4e83) (div0 . G4e82) (div-and-mod . G4e81) (mod . G4e80) (div . G4e7f) (denominator . G4e7e) (cos . G4e7d) (cons . G4e7c) (complex? . G4e7b) (char? . G4e7a) (char>? . G4e79) (char>=? . G4e78) (char=? . G4e77) (char<? . G4e76) (char<=? . G4e75) (char->integer . G4e74) (ceiling . G4e73) (call-with-values . G4e72) (call/cc . G4e71) (call-with-current-continuation . G4e70) (cddddr . G4e6f) (cdddar . G4e6e) (cddadr . G4e6d) (cddaar . G4e6c) (cdaddr . G4e6b) (cdadar . G4e6a) (cdaadr . G4e69) (cdaaar . G4e68) (cadddr . G4e67) (caddar . G4e66) (cadadr . G4e65) (cadaar . G4e64) (caaddr . G4e63) (caadar . G4e62) (caaadr . G4e61) (caaaar . G4e60) (cdddr . G4e5f) (cddar . G4e5e) (cdadr . G4e5d) (cdaar . G4e5c) (caddr . G4e5b) (cadar . G4e5a) (caadr . G4e59) (caaar . G4e58) (cddr . G4e57) (cdar . G4e56) (cadr . G4e55) (caar . G4e54) (cdr . G4e53) (car . G4e52) (boolean? . G4e51) (boolean=? . G4e50) (atan . G4e4f) (assertion-violation . G4e4e) (asin . G4e4d) (apply . G4e4c) (append . G4e4b) (angle . G4e4a) (acos . G4e49) (abs . G4e48) (/ . G4e47) (* . G4e46) (- . G4e45) (+ . G4e44) (>= . G4e43) (> . G4e42) (= . G4e41) (<= . G4e40) (< . G4e3f) (&no-nans . G4e3c) (&no-infinities . G4e3b) (&i/o-encoding . G4e3a) (&i/o-decoding . G4e39) (&i/o-port . G4e38) (&i/o-file-does-not-exist . G4e37) (&i/o-file-already-exists . G4e36) (&i/o-file-is-read-only . G4e35) (&i/o-file-protection . G4e34) (&i/o-filename . G4e33) (&i/o-invalid-position . G4e32) (&i/o-write . G4e31) (&i/o-read . G4e30) (&i/o . G4e2f) (&undefined . G4e2e) (&syntax . G4e2d) (&lexical . G4e2c) (&implementation-restriction . G4e2b) (&non-continuable . G4e2a) (&who . G4e29) (&irritants . G4e28) (&assertion . G4e27) (&violation . G4e26) (&error . G4e25) (&serious . G4e24) (&warning . G4e23) (&message . G4e22) (&condition . G4e21) (define-condition-type . G4e20) (define-enumeration . G4e1f) (define-record-type . G4e1e) (parent-rtd . G4e1d) (nongenerative . G4e1c) (opaque . G4e1b) (sealed . G4e1a) (protocol . G4e19) (parent . G4e18) (immutable . G4e17) (mutable . G4e16) (fields . G4e15) (error-handling-mode . G4e14) (file-options . G4e13) (buffer-mode . G4e12) (eol-style . G4e11) (guard . G4e10) (unsyntax-splicing . G4e0d) (unsyntax . G4e0c) (unquote-splicing . G4e0b) (unquote . G4e0a) (_ . G4e09) (else . G4e08) (=> . G4e07) (... . G4e06) (assert . G4e05) (endianness . G4e04) (do . G4e01) (cond . G4e00) (let* . G4dff) (let . G4dfe) (let*-values . G4dfd) (let-values . G4dfc) (identifier-syntax . G4dfb) (with-syntax . G4dfa) (quasisyntax . G4df9) (quasiquote . G4df8) (syntax-rules . G4df7) (record-constructor-descriptor . G4df4) (record-type-descriptor . G4df3) (case . G4df2) (unless . G4df0) (when . G4def) (or . G4dee) (and . G4ded) (if . G4dec) (letrec* . G4deb) (letrec . G4dea) (case-lambda . G4de8) (lambda . G4de7) (syntax . G4de6) (syntax-case . G4de5) (quote . G4de4) (letrec-syntax . G4de2) (let-syntax . G4de1) (set! . G4de0) (begin . G4dde) (define-syntax . G4ddc) (define . G4ddb)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50c2 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3028) (quotient . G4fc2) (null-environment . G3026) (remainder . G4fc1) (modulo . G4fc0) (inexact->exact . G4fbf) (force . G4fbe) (exact->inexact . G4fbd) (make-promise . G4fbc) (delay . G4e03)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50c3 '(rnrs control) '(6) '() '() '() '((do . G4e01) (unless . G4df0) (when . G4def) (case-lambda . G4de8)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50c4 '(rnrs eval) '(6) '() '() '() '((eval . G302c) (environment . G3024)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50c5 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fb8) (set-car! . G4fb7)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50c6 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fba) (string-set! . G4fb9)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50c7 '(rnrs programs) '(6) '() '() '() '((exit . G4fbb) (command-line . G4d0f)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50c8 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d9c) (identifier? . G304e) (generate-temporaries . G303a) (free-identifier=? . G303c) (syntax->datum . G3052) (datum->syntax . G3050) (bound-identifier=? . G303e) (syntax-violation . G304c) (unsyntax-splicing . G4e0d) (unsyntax . G4e0c) (_ . G4e09) (... . G4e06) (with-syntax . G4dfa) (quasisyntax . G4df9) (syntax . G4de6) (syntax-case . G4de5)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50c9 '(rnrs files) '(6) '() '() '() '((delete-file . G502b) (file-exists? . G502a) (make-i/o-write-error . G4b0d) (make-i/o-read-error . G4af8) (make-i/o-port-error . G4bab) (make-i/o-invalid-position-error . G4b23) (make-i/o-filename-error . G4b3d) (make-i/o-file-protection-error . G4b56) (make-i/o-file-is-read-only-error . G4b6b) (make-i/o-file-does-not-exist-error . G4b95) (make-i/o-file-already-exists-error . G4b80) (make-i/o-error . G4ae3) (i/o-write-error? . G4b0f) (i/o-read-error? . G4afa) (i/o-port-error? . G4baf) (i/o-invalid-position-error? . G4b27) (i/o-filename-error? . G4b41) (i/o-file-protection-error? . G4b58) (i/o-file-is-read-only-error? . G4b6d) (i/o-file-does-not-exist-error? . G4b97) (i/o-file-already-exists-error? . G4b82) (i/o-error? . G4ae5) (i/o-error-position . G4b29) (i/o-error-port . G4bb1) (i/o-error-filename . G4b43) (&i/o-port . G4e38) (&i/o-file-does-not-exist . G4e37) (&i/o-file-already-exists . G4e36) (&i/o-file-is-read-only . G4e35) (&i/o-file-protection . G4e34) (&i/o-filename . G4e33) (&i/o-invalid-position . G4e32) (&i/o-write . G4e31) (&i/o-read . G4e30) (&i/o . G4e2f)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50ca '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5029) (vector-sort . G5028) (list-sort . G5027)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50cb '(rnrs base) '(6) '() '() '() '((zero? . G4ee0) (vector? . G4edf) (vector-set! . G4ede) (vector-ref . G4edd) (vector-map . G4edc) (vector-length . G4edb) (vector-for-each . G4eda) (vector-fill! . G4ed9) (vector->list . G4ed8) (vector . G4ed7) (values . G4ed6) (truncate . G4ed5) (tan . G4ed4) (symbol? . G4ed3) (symbol=? . G4ed2) (symbol->string . G4ed1) (substring . G4ed0) (string? . G4ecf) (string>? . G4ece) (string>=? . G4ecd) (string=? . G4ecc) (string<? . G4ecb) (string<=? . G4eca) (string-ref . G4ec9) (string-length . G4ec8) (string-for-each . G4ec7) (string-copy . G4ec6) (string-append . G4ec5) (string->symbol . G4ec4) (string->number . G4ec3) (string->list . G4ec2) (string . G4ec1) (sqrt . G4ec0) (sin . G4ebf) (round . G4ebe) (reverse . G4ebd) (real? . G4ebc) (real-valued? . G4ebb) (real-part . G4eba) (rationalize . G4eb9) (rational? . G4eb8) (rational-valued? . G4eb7) (procedure? . G4eb6) (positive? . G4eb5) (pair? . G4eb4) (odd? . G4eb3) (numerator . G4eb2) (number? . G4eb1) (number->string . G4eb0) (null? . G4eaf) (not . G4eae) (negative? . G4ead) (nan? . G4eac) (min . G4eab) (max . G4eaa) (map . G4ea9) (make-vector . G4ea8) (make-string . G4ea7) (make-rectangular . G4ea6) (make-polar . G4ea5) (magnitude . G4ea4) (log . G4ea3) (list? . G4ea2) (list-tail . G4ea1) (list-ref . G4ea0) (list->vector . G4e9f) (list->string . G4e9e) (list . G4e9d) (length . G4e9c) (lcm . G4e9b) (integer? . G4e9a) (integer-valued? . G4e99) (integer->char . G4e98) (infinite? . G4e97) (inexact? . G4e96) (inexact . G4e95) (imag-part . G4e94) (gcd . G4e93) (for-each . G4e92) (floor . G4e91) (finite? . G4e90) (expt . G4e8f) (exp . G4e8e) (exact? . G4e8d) (exact-integer-sqrt . G4e8c) (exact . G4e8b) (even? . G4e8a) (error . G4e89) (eqv? . G4e88) (equal? . G4e87) (eq? . G4e86) (dynamic-wind . G4e85) (div0-and-mod0 . G4e84) (mod0 . G4e83) (div0 . G4e82) (div-and-mod . G4e81) (mod . G4e80) (div . G4e7f) (denominator . G4e7e) (cos . G4e7d) (cons . G4e7c) (complex? . G4e7b) (char? . G4e7a) (char>? . G4e79) (char>=? . G4e78) (char=? . G4e77) (char<? . G4e76) (char<=? . G4e75) (char->integer . G4e74) (ceiling . G4e73) (call-with-values . G4e72) (call/cc . G4e71) (call-with-current-continuation . G4e70) (cddddr . G4e6f) (cdddar . G4e6e) (cddadr . G4e6d) (cddaar . G4e6c) (cdaddr . G4e6b) (cdadar . G4e6a) (cdaadr . G4e69) (cdaaar . G4e68) (cadddr . G4e67) (caddar . G4e66) (cadadr . G4e65) (cadaar . G4e64) (caaddr . G4e63) (caadar . G4e62) (caaadr . G4e61) (caaaar . G4e60) (cdddr . G4e5f) (cddar . G4e5e) (cdadr . G4e5d) (cdaar . G4e5c) (caddr . G4e5b) (cadar . G4e5a) (caadr . G4e59) (caaar . G4e58) (cddr . G4e57) (cdar . G4e56) (cadr . G4e55) (caar . G4e54) (cdr . G4e53) (car . G4e52) (boolean? . G4e51) (boolean=? . G4e50) (atan . G4e4f) (assertion-violation . G4e4e) (asin . G4e4d) (apply . G4e4c) (append . G4e4b) (angle . G4e4a) (acos . G4e49) (abs . G4e48) (/ . G4e47) (* . G4e46) (- . G4e45) (+ . G4e44) (>= . G4e43) (> . G4e42) (= . G4e41) (<= . G4e40) (< . G4e3f) (unquote-splicing . G4e0b) (unquote . G4e0a) (_ . G4e09) (else . G4e08) (=> . G4e07) (... . G4e06) (assert . G4e05) (cond . G4e00) (let* . G4dff) (let . G4dfe) (let*-values . G4dfd) (let-values . G4dfc) (identifier-syntax . G4dfb) (quasiquote . G4df8) (syntax-rules . G4df7) (case . G4df2) (or . G4dee) (and . G4ded) (if . G4dec) (letrec* . G4deb) (letrec . G4dea) (lambda . G4de7) (quote . G4de4) (letrec-syntax . G4de2) (let-syntax . G4de1) (set! . G4de0) (begin . G4dde) (define-syntax . G4ddc) (define . G4ddb)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50cc '(rnrs lists) '(6) '() '() '() '((remove . G4fb6) (remv . G4fb5) (remp . G4fb4) (remq . G4fb3) (partition . G4fb2) (memv . G4fb1) (memq . G4fb0) (memp . G4faf) (member . G4fae) (exists . G4fad) (for-all . G4fac) (fold-right . G4fab) (fold-left . G4faa) (find . G4fa9) (filter . G4fa8) (cons* . G4fa7) (assv . G4fa6) (assq . G4fa5) (assp . G4fa4) (assoc . G4fa3)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50cd '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5011) (call-with-input-file . G5010) (write-char . G500f) (write . G500e) (with-output-to-file . G500d) (with-input-from-file . G500c) (read-char . G500b) (read . G500a) (peek-char . G5009) (open-output-file . G5008) (open-input-file . G5007) (newline . G5006) (display . G5005) (close-output-port . G5004) (close-input-port . G5003) (eof-object? . G5002) (eof-object . G5001) (current-error-port . G5000) (current-output-port . G4fff) (current-input-port . G4ffe) (output-port? . G4ffd) (input-port? . G4ffc) (make-i/o-write-error . G4b0d) (make-i/o-read-error . G4af8) (make-i/o-port-error . G4bab) (make-i/o-invalid-position-error . G4b23) (make-i/o-filename-error . G4b3d) (make-i/o-file-protection-error . G4b56) (make-i/o-file-is-read-only-error . G4b6b) (make-i/o-file-does-not-exist-error . G4b95) (make-i/o-file-already-exists-error . G4b80) (make-i/o-error . G4ae3) (i/o-write-error? . G4b0f) (i/o-read-error? . G4afa) (i/o-port-error? . G4baf) (i/o-invalid-position-error? . G4b27) (i/o-filename-error? . G4b41) (i/o-file-protection-error? . G4b58) (i/o-file-is-read-only-error? . G4b6d) (i/o-file-does-not-exist-error? . G4b97) (i/o-file-already-exists-error? . G4b82) (i/o-error? . G4ae5) (i/o-error-position . G4b29) (i/o-error-port . G4bb1) (i/o-error-filename . G4b43) (&i/o-port . G4e38) (&i/o-file-does-not-exist . G4e37) (&i/o-file-already-exists . G4e36) (&i/o-file-is-read-only . G4e35) (&i/o-file-protection . G4e34) (&i/o-filename . G4e33) (&i/o-invalid-position . G4e32) (&i/o-write . G4e31) (&i/o-read . G4e30) (&i/o . G4e2f)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50ce '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fd2) (utf32->string . G4f87) (utf16->string . G4f86) (utf8->string . G4f85) (uint-list->bytevector . G4f84) (u8-list->bytevector . G4f83) (string->utf8 . G4f82) (string->utf32 . G4f81) (string->utf16 . G4f80) (sint-list->bytevector . G4f7f) (native-endianness . G4f7e) (bytevector? . G4f7d) (bytevector=? . G4f7c) (bytevector-uint-set! . G4f7b) (bytevector-uint-ref . G4f7a) (bytevector-u8-set! . G4f79) (bytevector-u8-ref . G4f78) (bytevector-u64-set! . G4f77) (bytevector-u64-ref . G4f76) (bytevector-u64-native-set! . G4f75) (bytevector-u64-native-ref . G4f74) (bytevector-u32-set! . G4f73) (bytevector-u32-ref . G4f72) (bytevector-u32-native-set! . G4f71) (bytevector-u32-native-ref . G4f70) (bytevector-u16-set! . G4f6f) (bytevector-u16-ref . G4f6e) (bytevector-u16-native-set! . G4f6d) (bytevector-u16-native-ref . G4f6c) (bytevector-sint-set! . G4f6b) (bytevector-sint-ref . G4f6a) (bytevector-s8-set! . G4f69) (bytevector-s8-ref . G4f68) (bytevector-s64-set! . G4f67) (bytevector-s64-ref . G4f66) (bytevector-s64-native-set! . G4f65) (bytevector-s64-native-ref . G4f64) (bytevector-s32-set! . G4f63) (bytevector-s32-ref . G4f62) (bytevector-s32-native-set! . G4f61) (bytevector-s32-native-ref . G4f60) (bytevector-s16-set! . G4f5f) (bytevector-s16-ref . G4f5e) (bytevector-s16-native-set! . G4f5d) (bytevector-s16-native-ref . G4f5c) (bytevector-length . G4f5b) (bytevector-ieee-single-ref . G4f5a) (bytevector-ieee-single-set! . G4f59) (bytevector-ieee-single-native-set! . G4f58) (bytevector-ieee-single-native-ref . G4f57) (bytevector-ieee-double-set! . G4f56) (bytevector-ieee-double-ref . G4f55) (bytevector-ieee-double-native-set! . G4f54) (bytevector-ieee-double-native-ref . G4f53) (bytevector-fill! . G4f52) (bytevector-copy! . G4f51) (bytevector-copy . G4f50) (bytevector->uint-list . G4f4f) (bytevector->u8-list . G4f4e) (bytevector->sint-list . G4f4d) (endianness . G4e04)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50cf '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5059) (string-titlecase . G5058) (string-normalize-nfkd . G5057) (string-normalize-nfkc . G5056) (string-normalize-nfd . G5055) (string-normalize-nfc . G5054) (string-foldcase . G5053) (string-downcase . G5052) (string-ci>? . G5051) (string-ci>=? . G5050) (string-ci=? . G504f) (string-ci<? . G504e) (string-ci<=? . G504d) (char-whitespace? . G504c) (char-upper-case? . G504b) (char-title-case? . G504a) (char-numeric? . G5049) (char-lower-case? . G5048) (char-general-category . G5047) (char-upcase . G5046) (char-titlecase . G5045) (char-foldcase . G5044) (char-downcase . G5043) (char-ci>? . G5042) (char-ci>=? . G5041) (char-ci=? . G5040) (char-ci<? . G503f) (char-ci<=? . G503e) (char-alphabetic? . G503d)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50d0 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f9c) (raise-continuable . G4f9b) (raise . G4f9a) (guard . G4e10) (else . G4e08) (=> . G4e07)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50d1 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4ef1) (bitwise-reverse-bit-field . G4ef0) (bitwise-length . G4eef) (bitwise-if . G4eee) (bitwise-first-bit-set . G4eed) (bitwise-copy-bit-field . G4eec) (bitwise-copy-bit . G4eeb) (bitwise-bit-set? . G4eea) (bitwise-bit-field . G4ee9) (bitwise-bit-count . G4ee8) (bitwise-xor . G4ee7) (bitwise-ior . G4ee6) (bitwise-and . G4ee5) (bitwise-not . G4ee4) (bitwise-arithmetic-shift-right . G4ee3) (bitwise-arithmetic-shift-left . G4ee2) (bitwise-arithmetic-shift . G4ee1)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50d2 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f1e) (fxxor . G4f1d) (fxrotate-bit-field . G4f1c) (fxreverse-bit-field . G4f1b) (fxpositive? . G4f1a) (fxodd? . G4f19) (fxnot . G4f18) (fxnegative? . G4f17) (fxmod0 . G4f16) (fxmod . G4f15) (fxmin . G4f14) (fxmax . G4f13) (fxlength . G4f12) (fxior . G4f11) (fxif . G4f10) (fxfirst-bit-set . G4f0f) (fxeven? . G4f0e) (fxdiv0-and-mod0 . G4f0d) (fxdiv0 . G4f0c) (fxdiv-and-mod . G4f0b) (fxdiv . G4f0a) (fxcopy-bit-field . G4f09) (fxcopy-bit . G4f08) (fxbit-set? . G4f07) (fxbit-field . G4f06) (fxbit-count . G4f05) (fxarithmetic-shift-right . G4f04) (fxarithmetic-shift-left . G4f03) (fxarithmetic-shift . G4f02) (fxand . G4f01) (fx>? . G4f00) (fx>=? . G4eff) (fx=? . G4efe) (fx<? . G4efd) (fx<=? . G4efc) (fx-/carry . G4efb) (fx- . G4efa) (fx+/carry . G4ef9) (fx+ . G4ef8) (fx*/carry . G4ef7) (fx* . G4ef6) (greatest-fixnum . G4ef5) (least-fixnum . G4ef4) (fixnum-width . G4ef3) (fixnum? . G4ef2)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50d3 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c0a) (no-infinities-violation? . G4bf5) (make-no-nans-violation . G4c08) (make-no-infinities-violation . G4bf3) (real->flonum . G4f4c) (flzero? . G4f4b) (fltruncate . G4f4a) (fltan . G4f49) (flsqrt . G4f48) (flsin . G4f47) (flround . G4f46) (flpositive? . G4f45) (flonum? . G4f44) (flodd? . G4f43) (flnumerator . G4f42) (flnegative? . G4f41) (flnan? . G4f40) (flmod0 . G4f3f) (flmod . G4f3e) (flmin . G4f3d) (flmax . G4f3c) (fllog . G4f3b) (flinteger? . G4f3a) (flinfinite? . G4f39) (flfloor . G4f38) (flfinite? . G4f37) (flexpt . G4f36) (flexp . G4f35) (fleven? . G4f34) (fldiv0-and-mod0 . G4f33) (fldiv0 . G4f32) (fldiv-and-mod . G4f31) (fldiv . G4f30) (fldenominator . G4f2f) (flcos . G4f2e) (flceiling . G4f2d) (flatan . G4f2c) (flasin . G4f2b) (flacos . G4f2a) (flabs . G4f29) (fl>? . G4f28) (fl>=? . G4f27) (fl=? . G4f26) (fl<? . G4f25) (fl<=? . G4f24) (fl/ . G4f23) (fl- . G4f22) (fl+ . G4f21) (fl* . G4f20) (fixnum->flonum . G4f1f) (&no-nans . G4e3c) (&no-infinities . G4e3b)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50d4 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5026) (string-ci-hash . G5025) (string-hash . G5024) (equal-hash . G5023) (hashtable-equivalence-function . G5022) (make-hashtable . G5021) (hashtable-hash-function . G5020) (make-eqv-hashtable . G501f) (make-eq-hashtable . G501e) (hashtable? . G501d) (hashtable-update! . G501c) (hashtable-size . G501b) (hashtable-set! . G501a) (hashtable-ref . G5019) (hashtable-mutable? . G5018) (hashtable-keys . G5017) (hashtable-entries . G5016) (hashtable-delete! . G5015) (hashtable-copy . G5014) (hashtable-contains? . G5013) (hashtable-clear! . G5012)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50d5 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G5002) (eof-object . G5001) (current-error-port . G5000) (current-output-port . G4fff) (current-input-port . G4ffe) (output-port? . G4ffd) (input-port? . G4ffc) (utf-8-codec . G4ffb) (utf-16-codec . G4ffa) (transcoder-error-handling-mode . G4ff9) (transcoder-eol-style . G4ff8) (transcoder-codec . G4ff7) (transcoded-port . G4ff6) (textual-port? . G4ff5) (string->bytevector . G4ff4) (standard-output-port . G4ff3) (standard-input-port . G4ff2) (standard-error-port . G4ff1) (set-port-position! . G4ff0) (put-u8 . G4fef) (put-string . G4fee) (put-datum . G4fed) (put-char . G4fec) (put-bytevector . G4feb) (port? . G4fea) (port-transcoder . G4fe9) (port-position . G4fe8) (port-has-set-port-position!? . G4fe7) (port-has-port-position? . G4fe6) (port-eof? . G4fe5) (output-port-buffer-mode . G4fe4) (open-string-output-port . G4fe3) (open-string-input-port . G4fe2) (open-file-output-port . G4fe1) (open-file-input/output-port . G4fe0) (open-file-input-port . G4fdf) (open-bytevector-output-port . G4fde) (open-bytevector-input-port . G4fdd) (native-transcoder . G4fdc) (native-eol-style . G4fdb) (make-transcoder . G4fda) (latin-1-codec . G4fd9) (make-i/o-write-error . G4b0d) (make-i/o-read-error . G4af8) (make-i/o-port-error . G4bab) (make-i/o-invalid-position-error . G4b23) (make-i/o-filename-error . G4b3d) (make-i/o-file-protection-error . G4b56) (make-i/o-file-is-read-only-error . G4b6b) (make-i/o-file-does-not-exist-error . G4b95) (make-i/o-file-already-exists-error . G4b80) (make-i/o-error . G4ae3) (make-i/o-encoding-error . G4bda) (make-i/o-decoding-error . G4bc4) (make-custom-textual-output-port . G4fd8) (make-custom-textual-input/output-port . G4fd7) (make-custom-textual-input-port . G4fd6) (make-custom-binary-output-port . G4fd5) (make-custom-binary-input/output-port . G4fd4) (make-custom-binary-input-port . G4fd3) (lookahead-u8 . G4fd1) (lookahead-char . G4fd0) (i/o-write-error? . G4b0f) (i/o-read-error? . G4afa) (i/o-port-error? . G4baf) (i/o-invalid-position-error? . G4b27) (i/o-filename-error? . G4b41) (i/o-file-protection-error? . G4b58) (i/o-file-is-read-only-error? . G4b6d) (i/o-file-does-not-exist-error? . G4b97) (i/o-file-already-exists-error? . G4b82) (i/o-error? . G4ae5) (i/o-error-position . G4b29) (i/o-error-port . G4bb1) (i/o-error-filename . G4b43) (i/o-encoding-error? . G4bde) (i/o-encoding-error-char . G4be0) (i/o-decoding-error? . G4bc6) (get-u8 . G4fcf) (get-string-n! . G4fce) (get-string-n . G4fcd) (get-string-all . G4fcc) (get-line . G4fcb) (get-datum . G4fca) (get-char . G4fc9) (get-bytevector-some . G4fc8) (get-bytevector-n! . G4fc7) (get-bytevector-n . G4fc6) (get-bytevector-all . G4fc5) (flush-output-port . G4fc4) (close-port . G4fc3) (call-with-string-output-port . G4fa2) (call-with-port . G4fa1) (call-with-bytevector-output-port . G4fa0) (bytevector->string . G4f9f) (buffer-mode? . G4f9e) (binary-port? . G4f9d) (&i/o-encoding . G4e3a) (&i/o-decoding . G4e39) (&i/o-port . G4e38) (&i/o-file-does-not-exist . G4e37) (&i/o-file-already-exists . G4e36) (&i/o-file-is-read-only . G4e35) (&i/o-file-protection . G4e34) (&i/o-filename . G4e33) (&i/o-invalid-position . G4e32) (&i/o-write . G4e31) (&i/o-read . G4e30) (&i/o . G4e2f) (error-handling-mode . G4e14) (file-options . G4e13) (buffer-mode . G4e12) (eol-style . G4e11)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50d6 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f99) (enum-set=? . G4f98) (enum-set-universe . G4f97) (enum-set-union . G4f96) (enum-set-subset? . G4f95) (enum-set-projection . G4f94) (enum-set-member? . G4f93) (enum-set-intersection . G4f92) (enum-set-indexer . G4f91) (enum-set-difference . G4f90) (enum-set-constructor . G4f8f) (enum-set-complement . G4f8e) (enum-set->list . G4f8d) (define-enumeration . G4e1f)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50d7 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a5b) (warning? . G49d5) (violation? . G4a14) (undefined-violation? . G4ad0) (syntax-violation? . G4ab7) (syntax-violation-subform . G4abb) (syntax-violation-form . G4ab9) (syntax-violation . G304c) (simple-conditions . G4f8c) (serious-condition? . G49ea) (non-continuable-violation? . G4a72) (message-condition? . G49be) (make-who-condition . G4a57) (make-warning . G49d3) (make-violation . G4a12) (make-undefined-violation . G4ace) (make-syntax-violation . G4ab1) (make-serious-condition . G49e8) (make-non-continuable-violation . G4a70) (make-message-condition . G49ba) (make-lexical-violation . G4a9a) (make-irritants-condition . G4a3d) (make-implementation-restriction-violation . G4a85) (make-error . G49fd) (make-assertion-violation . G4a27) (lexical-violation? . G4a9c) (irritants-condition? . G4a41) (implementation-restriction-violation? . G4a87) (error? . G49ff) (condition-who . G4a5d) (condition-predicate . G4f8b) (condition-message . G49c0) (condition-irritants . G4a43) (condition-accessor . G4f8a) (condition . G4f89) (assertion-violation? . G4a29) (condition? . G4f88) (&undefined . G4e2e) (&syntax . G4e2d) (&lexical . G4e2c) (&implementation-restriction . G4e2b) (&non-continuable . G4e2a) (&who . G4e29) (&irritants . G4e28) (&assertion . G4e27) (&violation . G4e26) (&error . G4e25) (&serious . G4e24) (&warning . G4e23) (&message . G4e22) (&condition . G4e21) (define-condition-type . G4e20)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50d8 '(rnrs records inspection) '(6) '() '() '() '((record? . G5035) (record-type-uid . G5034) (record-type-sealed? . G5033) (record-type-parent . G5032) (record-type-opaque? . G5031) (record-type-name . G5030) (record-type-generative? . G502f) (record-type-field-names . G502e) (record-rtd . G502d) (record-field-mutable? . G502c)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50d9 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G503c) (record-predicate . G503b) (record-mutator . G503a) (record-constructor . G5039) (record-accessor . G5038) (make-record-type-descriptor . G5037) (make-record-constructor-descriptor . G5036)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50da '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e1e) (parent-rtd . G4e1d) (nongenerative . G4e1c) (opaque . G4e1b) (sealed . G4e1a) (protocol . G4e19) (parent . G4e18) (immutable . G4e17) (mutable . G4e16) (fields . G4e15) (record-constructor-descriptor . G4df4) (record-type-descriptor . G4df3)) '() values values '#f '#f '#t '#f) (G2b78@G2a1d@install-library 'G50db '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c0e) (&no-nans-rtd . G4c0c) (&no-infinities-rcd . G4bf9) (&no-infinities-rtd . G4bf7) (&i/o-encoding-rcd . G4be4) (&i/o-encoding-rtd . G4be2) (&i/o-decoding-rcd . G4bca) (&i/o-decoding-rtd . G4bc8) (&i/o-port-rcd . G4bb5) (&i/o-port-rtd . G4bb3) (&i/o-file-does-not-exist-rcd . G4b9b) (&i/o-file-does-not-exist-rtd . G4b99) (&i/o-file-already-exists-rcd . G4b86) (&i/o-file-already-exists-rtd . G4b84) (&i/o-file-is-read-only-rcd . G4b71) (&i/o-file-is-read-only-rtd . G4b6f) (&i/o-file-protection-rcd . G4b5c) (&i/o-file-protection-rtd . G4b5a) (&i/o-filename-rcd . G4b47) (&i/o-filename-rtd . G4b45) (&i/o-invalid-position-rcd . G4b2d) (&i/o-invalid-position-rtd . G4b2b) (&i/o-write-rcd . G4b13) (&i/o-write-rtd . G4b11) (&i/o-read-rcd . G4afe) (&i/o-read-rtd . G4afc) (&i/o-rcd . G4ae9) (&i/o-rtd . G4ae7) (&undefined-rcd . G4ad4) (&undefined-rtd . G4ad2) (&syntax-rcd . G4abf) (&syntax-rtd . G4abd) (&lexical-rcd . G4aa0) (&lexical-rtd . G4a9e) (&implementation-restriction-rcd . G4a8b) (&implementation-restriction-rtd . G4a89) (&non-continuable-rcd . G4a76) (&non-continuable-rtd . G4a74) (&who-rcd . G4a61) (&who-rtd . G4a5f) (&irritants-rcd . G4a47) (&irritants-rtd . G4a45) (&assertion-rcd . G4a2d) (&assertion-rtd . G4a2b) (&violation-rcd . G4a18) (&violation-rtd . G4a16) (&error-rcd . G4a03) (&error-rtd . G4a01) (&serious-rcd . G49ee) (&serious-rtd . G49ec) (&warning-rcd . G49d9) (&warning-rtd . G49d7) (&message-rcd . G49c4) (&message-rtd . G49c2) (&condition-rcd . G4967) (&condition-rtd . G4965) (syntax-error . G3048) (syntax-dispatch . G2f61) (pretty-print . G50bb) (eval-core . G50ba) (set-symbol-value! . G50b9) (symbol-value . G50b8) (gensym . G50b7) (void . G50b6) (load . G4d15) (interaction-environment . G3058) (char-ready? . G50b5) (regexp? . G50b4) (read-line . G50b3) (dotted-list? . G50b2) (circular-list? . G50b1) (proper-list? . G50b0) (circular-list . G50af) (last . G50ae) (last-pair . G50ad) (not-pair? . G50ac) (split-at! . G50ab) (split-at . G50aa) (list= . G50a9) (list-copy . G50a8) (list-tabulate . G50a7) (make-list . G50a6) (xcons . G50a5) (tenth . G50a4) (ninth . G50a3) (eighth . G50a2) (seventh . G50a1) (sixth . G50a0) (fifth . G509f) (drop-right! . G509e) (drop-right . G509d) (take-right . G509c) (take! . G509b) (drop . G509a) (take . G5099) (car+cdr . G5098) (third . G5097) (second . G5096) (first . G5095) (iota . G5094) (every . G5093) (ungensym . G5092) (alist->eq-hash-table . G5091) (assoc-ref . G5090) (alist-cons . G508f) (append-map . G508e) (print . G508d) (format . G508c) (standard-library-path . G508b) (file-newer? . G508a) (stat-mtime . G5089) (write-to-file . G5088) (file->list . G5087) (file->string . G5086) (digit->integer . G5085) (call-with-string-input-port . G5084) (call-with-string-io . G5083) (string-split . G5082) (bytevector-for-each . G5081) (string->regexp . G5080) (rxmatch . G507f) (regexp-replace-all . G507e) (hashtable-for-each . G507d) (call-process . G507c) (local-tz-offset . G507b) (microseconds . G507a) (readdir . G5079) (set-current-directory! . G5078) (expand-path . G5077) (current-directory . G5076) (%spawn . G5075) (%waitpid . G5074) (%ffi-supported? . G5073) (%ffi-pointer-ref . G5072) (%ffi-pointer->string . G5071) (%ffi-call->string-or-zero . G5070) (%ffi-call->void* . G506f) (%ffi-call->void . G506e) (%ffi-call->int . G506d) (%ffi-lookup . G506c) (%ffi-open . G506b) (%fork . G506a) (%pipe . G5069) (get-environment-variables . G5068) (get-environment-variable . G5067) (get-timeofday . G5066) (get-command-line . G5065) (sys-display . G5064) (source-info . G5063) (make-compiler-instruction . G5062) (make-instruction . G5061) (set-source-info! . G5060) (bignum? . G505f) (make-complex . G505e) (fast-equal? . G505d) (fasl-read . G505c) (fasl-write . G505b) (receive . G505a) (make-parameter . G2834) (string-upcase . G5059) (string-titlecase . G5058) (string-normalize-nfkd . G5057) (string-normalize-nfkc . G5056) (string-normalize-nfd . G5055) (string-normalize-nfc . G5054) (string-foldcase . G5053) (string-downcase . G5052) (string-ci>? . G5051) (string-ci>=? . G5050) (string-ci=? . G504f) (string-ci<? . G504e) (string-ci<=? . G504d) (char-whitespace? . G504c) (char-upper-case? . G504b) (char-title-case? . G504a) (char-numeric? . G5049) (char-lower-case? . G5048) (char-general-category . G5047) (char-upcase . G5046) (char-titlecase . G5045) (char-foldcase . G5044) (char-downcase . G5043) (char-ci>? . G5042) (char-ci>=? . G5041) (char-ci=? . G5040) (char-ci<? . G503f) (char-ci<=? . G503e) (char-alphabetic? . G503d) (make-variable-transformer . G2d9c) (identifier? . G304e) (generate-temporaries . G303a) (free-identifier=? . G303c) (syntax->datum . G3052) (datum->syntax . G3050) (bound-identifier=? . G303e) (record-type-descriptor? . G503c) (record-predicate . G503b) (record-mutator . G503a) (record-constructor . G5039) (record-accessor . G5038) (make-record-type-descriptor . G5037) (make-record-constructor-descriptor . G5036) (record? . G5035) (record-type-uid . G5034) (record-type-sealed? . G5033) (record-type-parent . G5032) (record-type-opaque? . G5031) (record-type-name . G5030) (record-type-generative? . G502f) (record-type-field-names . G502e) (record-rtd . G502d) (record-field-mutable? . G502c) (delete-file . G502b) (file-exists? . G502a) (vector-sort! . G5029) (vector-sort . G5028) (list-sort . G5027) (symbol-hash . G5026) (string-ci-hash . G5025) (string-hash . G5024) (equal-hash . G5023) (hashtable-equivalence-function . G5022) (make-hashtable . G5021) (hashtable-hash-function . G5020) (make-eqv-hashtable . G501f) (make-eq-hashtable . G501e) (hashtable? . G501d) (hashtable-update! . G501c) (hashtable-size . G501b) (hashtable-set! . G501a) (hashtable-ref . G5019) (hashtable-mutable? . G5018) (hashtable-keys . G5017) (hashtable-entries . G5016) (hashtable-delete! . G5015) (hashtable-copy . G5014) (hashtable-contains? . G5013) (hashtable-clear! . G5012) (call-with-output-file . G5011) (call-with-input-file . G5010) (write-char . G500f) (write . G500e) (with-output-to-file . G500d) (with-input-from-file . G500c) (read-char . G500b) (read . G500a) (peek-char . G5009) (open-output-file . G5008) (open-input-file . G5007) (newline . G5006) (display . G5005) (close-output-port . G5004) (close-input-port . G5003) (eof-object? . G5002) (eof-object . G5001) (current-error-port . G5000) (current-output-port . G4fff) (current-input-port . G4ffe) (output-port? . G4ffd) (input-port? . G4ffc) (utf-8-codec . G4ffb) (utf-16-codec . G4ffa) (transcoder-error-handling-mode . G4ff9) (transcoder-eol-style . G4ff8) (transcoder-codec . G4ff7) (transcoded-port . G4ff6) (textual-port? . G4ff5) (string->bytevector . G4ff4) (standard-output-port . G4ff3) (standard-input-port . G4ff2) (standard-error-port . G4ff1) (set-port-position! . G4ff0) (put-u8 . G4fef) (put-string . G4fee) (put-datum . G4fed) (put-char . G4fec) (put-bytevector . G4feb) (port? . G4fea) (port-transcoder . G4fe9) (port-position . G4fe8) (port-has-set-port-position!? . G4fe7) (port-has-port-position? . G4fe6) (port-eof? . G4fe5) (output-port-buffer-mode . G4fe4) (open-string-output-port . G4fe3) (open-string-input-port . G4fe2) (open-file-output-port . G4fe1) (open-file-input/output-port . G4fe0) (open-file-input-port . G4fdf) (open-bytevector-output-port . G4fde) (open-bytevector-input-port . G4fdd) (native-transcoder . G4fdc) (native-eol-style . G4fdb) (make-transcoder . G4fda) (latin-1-codec . G4fd9) (make-i/o-write-error . G4b0d) (make-i/o-read-error . G4af8) (make-i/o-port-error . G4bab) (make-i/o-invalid-position-error . G4b23) (make-i/o-filename-error . G4b3d) (make-i/o-file-protection-error . G4b56) (make-i/o-file-is-read-only-error . G4b6b) (make-i/o-file-does-not-exist-error . G4b95) (make-i/o-file-already-exists-error . G4b80) (make-i/o-error . G4ae3) (make-i/o-encoding-error . G4bda) (make-i/o-decoding-error . G4bc4) (make-custom-textual-output-port . G4fd8) (make-custom-textual-input/output-port . G4fd7) (make-custom-textual-input-port . G4fd6) (make-custom-binary-output-port . G4fd5) (make-custom-binary-input/output-port . G4fd4) (make-custom-binary-input-port . G4fd3) (make-bytevector . G4fd2) (lookahead-u8 . G4fd1) (lookahead-char . G4fd0) (i/o-write-error? . G4b0f) (i/o-read-error? . G4afa) (i/o-port-error? . G4baf) (i/o-invalid-position-error? . G4b27) (i/o-filename-error? . G4b41) (i/o-file-protection-error? . G4b58) (i/o-file-is-read-only-error? . G4b6d) (i/o-file-does-not-exist-error? . G4b97) (i/o-file-already-exists-error? . G4b82) (i/o-error? . G4ae5) (i/o-error-position . G4b29) (i/o-error-port . G4bb1) (i/o-error-filename . G4b43) (i/o-encoding-error? . G4bde) (i/o-encoding-error-char . G4be0) (i/o-decoding-error? . G4bc6) (get-u8 . G4fcf) (get-string-n! . G4fce) (get-string-n . G4fcd) (get-string-all . G4fcc) (get-line . G4fcb) (get-datum . G4fca) (get-char . G4fc9) (get-bytevector-some . G4fc8) (get-bytevector-n! . G4fc7) (get-bytevector-n . G4fc6) (get-bytevector-all . G4fc5) (flush-output-port . G4fc4) (close-port . G4fc3) (scheme-report-environment . G3028) (quotient . G4fc2) (null-environment . G3026) (remainder . G4fc1) (modulo . G4fc0) (inexact->exact . G4fbf) (force . G4fbe) (exact->inexact . G4fbd) (make-promise . G4fbc) (exit . G4fbb) (command-line . G4d0f) (string-fill! . G4fba) (string-set! . G4fb9) (set-cdr! . G4fb8) (set-car! . G4fb7) (remove . G4fb6) (remv . G4fb5) (remp . G4fb4) (remq . G4fb3) (partition . G4fb2) (memv . G4fb1) (memq . G4fb0) (memp . G4faf) (member . G4fae) (exists . G4fad) (for-all . G4fac) (fold-right . G4fab) (fold-left . G4faa) (find . G4fa9) (filter . G4fa8) (cons* . G4fa7) (assv . G4fa6) (assq . G4fa5) (assp . G4fa4) (assoc . G4fa3) (call-with-string-output-port . G4fa2) (call-with-port . G4fa1) (call-with-bytevector-output-port . G4fa0) (bytevector->string . G4f9f) (buffer-mode? . G4f9e) (binary-port? . G4f9d) (with-exception-handler . G4f9c) (raise-continuable . G4f9b) (raise . G4f9a) (eval . G302c) (environment . G3024) (make-enumeration . G4f99) (enum-set=? . G4f98) (enum-set-universe . G4f97) (enum-set-union . G4f96) (enum-set-subset? . G4f95) (enum-set-projection . G4f94) (enum-set-member? . G4f93) (enum-set-intersection . G4f92) (enum-set-indexer . G4f91) (enum-set-difference . G4f90) (enum-set-constructor . G4f8f) (enum-set-complement . G4f8e) (enum-set->list . G4f8d) (who-condition? . G4a5b) (warning? . G49d5) (violation? . G4a14) (undefined-violation? . G4ad0) (syntax-violation? . G4ab7) (syntax-violation-subform . G4abb) (syntax-violation-form . G4ab9) (syntax-violation . G304c) (simple-conditions . G4f8c) (serious-condition? . G49ea) (non-continuable-violation? . G4a72) (message-condition? . G49be) (make-who-condition . G4a57) (make-warning . G49d3) (make-violation . G4a12) (make-undefined-violation . G4ace) (make-syntax-violation . G4ab1) (make-serious-condition . G49e8) (make-non-continuable-violation . G4a70) (make-message-condition . G49ba) (make-lexical-violation . G4a9a) (make-irritants-condition . G4a3d) (make-implementation-restriction-violation . G4a85) (make-error . G49fd) (make-assertion-violation . G4a27) (lexical-violation? . G4a9c) (irritants-condition? . G4a41) (implementation-restriction-violation? . G4a87) (error? . G49ff) (condition-who . G4a5d) (condition-predicate . G4f8b) (condition-message . G49c0) (condition-irritants . G4a43) (condition-accessor . G4f8a) (condition . G4f89) (assertion-violation? . G4a29) (condition? . G4f88) (utf32->string . G4f87) (utf16->string . G4f86) (utf8->string . G4f85) (uint-list->bytevector . G4f84) (u8-list->bytevector . G4f83) (string->utf8 . G4f82) (string->utf32 . G4f81) (string->utf16 . G4f80) (sint-list->bytevector . G4f7f) (native-endianness . G4f7e) (bytevector? . G4f7d) (bytevector=? . G4f7c) (bytevector-uint-set! . G4f7b) (bytevector-uint-ref . G4f7a) (bytevector-u8-set! . G4f79) (bytevector-u8-ref . G4f78) (bytevector-u64-set! . G4f77) (bytevector-u64-ref . G4f76) (bytevector-u64-native-set! . G4f75) (bytevector-u64-native-ref . G4f74) (bytevector-u32-set! . G4f73) (bytevector-u32-ref . G4f72) (bytevector-u32-native-set! . G4f71) (bytevector-u32-native-ref . G4f70) (bytevector-u16-set! . G4f6f) (bytevector-u16-ref . G4f6e) (bytevector-u16-native-set! . G4f6d) (bytevector-u16-native-ref . G4f6c) (bytevector-sint-set! . G4f6b) (bytevector-sint-ref . G4f6a) (bytevector-s8-set! . G4f69) (bytevector-s8-ref . G4f68) (bytevector-s64-set! . G4f67) (bytevector-s64-ref . G4f66) (bytevector-s64-native-set! . G4f65) (bytevector-s64-native-ref . G4f64) (bytevector-s32-set! . G4f63) (bytevector-s32-ref . G4f62) (bytevector-s32-native-set! . G4f61) (bytevector-s32-native-ref . G4f60) (bytevector-s16-set! . G4f5f) (bytevector-s16-ref . G4f5e) (bytevector-s16-native-set! . G4f5d) (bytevector-s16-native-ref . G4f5c) (bytevector-length . G4f5b) (bytevector-ieee-single-ref . G4f5a) (bytevector-ieee-single-set! . G4f59) (bytevector-ieee-single-native-set! . G4f58) (bytevector-ieee-single-native-ref . G4f57) (bytevector-ieee-double-set! . G4f56) (bytevector-ieee-double-ref . G4f55) (bytevector-ieee-double-native-set! . G4f54) (bytevector-ieee-double-native-ref . G4f53) (bytevector-fill! . G4f52) (bytevector-copy! . G4f51) (bytevector-copy . G4f50) (bytevector->uint-list . G4f4f) (bytevector->u8-list . G4f4e) (bytevector->sint-list . G4f4d) (no-nans-violation? . G4c0a) (no-infinities-violation? . G4bf5) (make-no-nans-violation . G4c08) (make-no-infinities-violation . G4bf3) (real->flonum . G4f4c) (flzero? . G4f4b) (fltruncate . G4f4a) (fltan . G4f49) (flsqrt . G4f48) (flsin . G4f47) (flround . G4f46) (flpositive? . G4f45) (flonum? . G4f44) (flodd? . G4f43) (flnumerator . G4f42) (flnegative? . G4f41) (flnan? . G4f40) (flmod0 . G4f3f) (flmod . G4f3e) (flmin . G4f3d) (flmax . G4f3c) (fllog . G4f3b) (flinteger? . G4f3a) (flinfinite? . G4f39) (flfloor . G4f38) (flfinite? . G4f37) (flexpt . G4f36) (flexp . G4f35) (fleven? . G4f34) (fldiv0-and-mod0 . G4f33) (fldiv0 . G4f32) (fldiv-and-mod . G4f31) (fldiv . G4f30) (fldenominator . G4f2f) (flcos . G4f2e) (flceiling . G4f2d) (flatan . G4f2c) (flasin . G4f2b) (flacos . G4f2a) (flabs . G4f29) (fl>? . G4f28) (fl>=? . G4f27) (fl=? . G4f26) (fl<? . G4f25) (fl<=? . G4f24) (fl/ . G4f23) (fl- . G4f22) (fl+ . G4f21) (fl* . G4f20) (fixnum->flonum . G4f1f) (fxzero? . G4f1e) (fxxor . G4f1d) (fxrotate-bit-field . G4f1c) (fxreverse-bit-field . G4f1b) (fxpositive? . G4f1a) (fxodd? . G4f19) (fxnot . G4f18) (fxnegative? . G4f17) (fxmod0 . G4f16) (fxmod . G4f15) (fxmin . G4f14) (fxmax . G4f13) (fxlength . G4f12) (fxior . G4f11) (fxif . G4f10) (fxfirst-bit-set . G4f0f) (fxeven? . G4f0e) (fxdiv0-and-mod0 . G4f0d) (fxdiv0 . G4f0c) (fxdiv-and-mod . G4f0b) (fxdiv . G4f0a) (fxcopy-bit-field . G4f09) (fxcopy-bit . G4f08) (fxbit-set? . G4f07) (fxbit-field . G4f06) (fxbit-count . G4f05) (fxarithmetic-shift-right . G4f04) (fxarithmetic-shift-left . G4f03) (fxarithmetic-shift . G4f02) (fxand . G4f01) (fx>? . G4f00) (fx>=? . G4eff) (fx=? . G4efe) (fx<? . G4efd) (fx<=? . G4efc) (fx-/carry . G4efb) (fx- . G4efa) (fx+/carry . G4ef9) (fx+ . G4ef8) (fx*/carry . G4ef7) (fx* . G4ef6) (greatest-fixnum . G4ef5) (least-fixnum . G4ef4) (fixnum-width . G4ef3) (fixnum? . G4ef2) (bitwise-rotate-bit-field . G4ef1) (bitwise-reverse-bit-field . G4ef0) (bitwise-length . G4eef) (bitwise-if . G4eee) (bitwise-first-bit-set . G4eed) (bitwise-copy-bit-field . G4eec) (bitwise-copy-bit . G4eeb) (bitwise-bit-set? . G4eea) (bitwise-bit-field . G4ee9) (bitwise-bit-count . G4ee8) (bitwise-xor . G4ee7) (bitwise-ior . G4ee6) (bitwise-and . G4ee5) (bitwise-not . G4ee4) (bitwise-arithmetic-shift-right . G4ee3) (bitwise-arithmetic-shift-left . G4ee2) (bitwise-arithmetic-shift . G4ee1) (zero? . G4ee0) (vector? . G4edf) (vector-set! . G4ede) (vector-ref . G4edd) (vector-map . G4edc) (vector-length . G4edb) (vector-for-each . G4eda) (vector-fill! . G4ed9) (vector->list . G4ed8) (vector . G4ed7) (values . G4ed6) (truncate . G4ed5) (tan . G4ed4) (symbol? . G4ed3) (symbol=? . G4ed2) (symbol->string . G4ed1) (substring . G4ed0) (string? . G4ecf) (string>? . G4ece) (string>=? . G4ecd) (string=? . G4ecc) (string<? . G4ecb) (string<=? . G4eca) (string-ref . G4ec9) (string-length . G4ec8) (string-for-each . G4ec7) (string-copy . G4ec6) (string-append . G4ec5) (string->symbol . G4ec4) (string->number . G4ec3) (string->list . G4ec2) (string . G4ec1) (sqrt . G4ec0) (sin . G4ebf) (round . G4ebe) (reverse . G4ebd) (real? . G4ebc) (real-valued? . G4ebb) (real-part . G4eba) (rationalize . G4eb9) (rational? . G4eb8) (rational-valued? . G4eb7) (procedure? . G4eb6) (positive? . G4eb5) (pair? . G4eb4) (odd? . G4eb3) (numerator . G4eb2) (number? . G4eb1) (number->string . G4eb0) (null? . G4eaf) (not . G4eae) (negative? . G4ead) (nan? . G4eac) (min . G4eab) (max . G4eaa) (map . G4ea9) (make-vector . G4ea8) (make-string . G4ea7) (make-rectangular . G4ea6) (make-polar . G4ea5) (magnitude . G4ea4) (log . G4ea3) (list? . G4ea2) (list-tail . G4ea1) (list-ref . G4ea0) (list->vector . G4e9f) (list->string . G4e9e) (list . G4e9d) (length . G4e9c) (lcm . G4e9b) (integer? . G4e9a) (integer-valued? . G4e99) (integer->char . G4e98) (infinite? . G4e97) (inexact? . G4e96) (inexact . G4e95) (imag-part . G4e94) (gcd . G4e93) (for-each . G4e92) (floor . G4e91) (finite? . G4e90) (expt . G4e8f) (exp . G4e8e) (exact? . G4e8d) (exact-integer-sqrt . G4e8c) (exact . G4e8b) (even? . G4e8a) (error . G4e89) (eqv? . G4e88) (equal? . G4e87) (eq? . G4e86) (dynamic-wind . G4e85) (div0-and-mod0 . G4e84) (mod0 . G4e83) (div0 . G4e82) (div-and-mod . G4e81) (mod . G4e80) (div . G4e7f) (denominator . G4e7e) (cos . G4e7d) (cons . G4e7c) (complex? . G4e7b) (char? . G4e7a) (char>? . G4e79) (char>=? . G4e78) (char=? . G4e77) (char<? . G4e76) (char<=? . G4e75) (char->integer . G4e74) (ceiling . G4e73) (call-with-values . G4e72) (call/cc . G4e71) (call-with-current-continuation . G4e70) (cddddr . G4e6f) (cdddar . G4e6e) (cddadr . G4e6d) (cddaar . G4e6c) (cdaddr . G4e6b) (cdadar . G4e6a) (cdaadr . G4e69) (cdaaar . G4e68) (cadddr . G4e67) (caddar . G4e66) (cadadr . G4e65) (cadaar . G4e64) (caaddr . G4e63) (caadar . G4e62) (caaadr . G4e61) (caaaar . G4e60) (cdddr . G4e5f) (cddar . G4e5e) (cdadr . G4e5d) (cdaar . G4e5c) (caddr . G4e5b) (cadar . G4e5a) (caadr . G4e59) (caaar . G4e58) (cddr . G4e57) (cdar . G4e56) (cadr . G4e55) (caar . G4e54) (cdr . G4e53) (car . G4e52) (boolean? . G4e51) (boolean=? . G4e50) (atan . G4e4f) (assertion-violation . G4e4e) (asin . G4e4d) (apply . G4e4c) (append . G4e4b) (angle . G4e4a) (acos . G4e49) (abs . G4e48) (/ . G4e47) (* . G4e46) (- . G4e45) (+ . G4e44) (>= . G4e43) (> . G4e42) (= . G4e41) (<= . G4e40) (< . G4e3f) (library . G4e3e) (export . G4e3d) (&no-nans . G4e3c) (&no-infinities . G4e3b) (&i/o-encoding . G4e3a) (&i/o-decoding . G4e39) (&i/o-port . G4e38) (&i/o-file-does-not-exist . G4e37) (&i/o-file-already-exists . G4e36) (&i/o-file-is-read-only . G4e35) (&i/o-file-protection . G4e34) (&i/o-filename . G4e33) (&i/o-invalid-position . G4e32) (&i/o-write . G4e31) (&i/o-read . G4e30) (&i/o . G4e2f) (&undefined . G4e2e) (&syntax . G4e2d) (&lexical . G4e2c) (&implementation-restriction . G4e2b) (&non-continuable . G4e2a) (&who . G4e29) (&irritants . G4e28) (&assertion . G4e27) (&violation . G4e26) (&error . G4e25) (&serious . G4e24) (&warning . G4e23) (&message . G4e22) (&condition . G4e21) (define-condition-type . G4e20) (define-enumeration . G4e1f) (define-record-type . G4e1e) (parent-rtd . G4e1d) (nongenerative . G4e1c) (opaque . G4e1b) (sealed . G4e1a) (protocol . G4e19) (parent . G4e18) (immutable . G4e17) (mutable . G4e16) (fields . G4e15) (error-handling-mode . G4e14) (file-options . G4e13) (buffer-mode . G4e12) (eol-style . G4e11) (guard . G4e10) (trace-define . G4e0f) (trace-lambda . G4e0e) (unsyntax-splicing . G4e0d) (unsyntax . G4e0c) (unquote-splicing . G4e0b) (unquote . G4e0a) (_ . G4e09) (else . G4e08) (=> . G4e07) (... . G4e06) (assert . G4e05) (endianness . G4e04) (delay . G4e03) (time . G4e02) (do . G4e01) (cond . G4e00) (let* . G4dff) (let . G4dfe) (let*-values . G4dfd) (let-values . G4dfc) (identifier-syntax . G4dfb) (with-syntax . G4dfa) (quasisyntax . G4df9) (quasiquote . G4df8) (syntax-rules . G4df7) (include . G4df6) (define-struct . G4df5) (record-constructor-descriptor . G4df4) (record-type-descriptor . G4df3) (case . G4df2) (parameterize . G4df1) (unless . G4df0) (when . G4def) (or . G4dee) (and . G4ded) (if . G4dec) (letrec* . G4deb) (letrec . G4dea) (type-descriptor . G4de9) (case-lambda . G4de8) (lambda . G4de7) (syntax . G4de6) (syntax-case . G4de5) (quote . G4de4) (foreign-call . G4de3) (letrec-syntax . G4de2) (let-syntax . G4de1) (set! . G4de0) (import . G4ddf) (begin . G4dde) (module . G4ddd) (define-syntax . G4ddc) (define . G4ddb)) '((G4c0e core-prim . &no-nans-rcd) (G4c0c core-prim . &no-nans-rtd) (G4bf9 core-prim . &no-infinities-rcd) (G4bf7 core-prim . &no-infinities-rtd) (G4be4 core-prim . &i/o-encoding-rcd) (G4be2 core-prim . &i/o-encoding-rtd) (G4bca core-prim . &i/o-decoding-rcd) (G4bc8 core-prim . &i/o-decoding-rtd) (G4bb5 core-prim . &i/o-port-rcd) (G4bb3 core-prim . &i/o-port-rtd) (G4b9b core-prim . &i/o-file-does-not-exist-rcd) (G4b99 core-prim . &i/o-file-does-not-exist-rtd) (G4b86 core-prim . &i/o-file-already-exists-rcd) (G4b84 core-prim . &i/o-file-already-exists-rtd) (G4b71 core-prim . &i/o-file-is-read-only-rcd) (G4b6f core-prim . &i/o-file-is-read-only-rtd) (G4b5c core-prim . &i/o-file-protection-rcd) (G4b5a core-prim . &i/o-file-protection-rtd) (G4b47 core-prim . &i/o-filename-rcd) (G4b45 core-prim . &i/o-filename-rtd) (G4b2d core-prim . &i/o-invalid-position-rcd) (G4b2b core-prim . &i/o-invalid-position-rtd) (G4b13 core-prim . &i/o-write-rcd) (G4b11 core-prim . &i/o-write-rtd) (G4afe core-prim . &i/o-read-rcd) (G4afc core-prim . &i/o-read-rtd) (G4ae9 core-prim . &i/o-rcd) (G4ae7 core-prim . &i/o-rtd) (G4ad4 core-prim . &undefined-rcd) (G4ad2 core-prim . &undefined-rtd) (G4abf core-prim . &syntax-rcd) (G4abd core-prim . &syntax-rtd) (G4aa0 core-prim . &lexical-rcd) (G4a9e core-prim . &lexical-rtd) (G4a8b core-prim . &implementation-restriction-rcd) (G4a89 core-prim . &implementation-restriction-rtd) (G4a76 core-prim . &non-continuable-rcd) (G4a74 core-prim . &non-continuable-rtd) (G4a61 core-prim . &who-rcd) (G4a5f core-prim . &who-rtd) (G4a47 core-prim . &irritants-rcd) (G4a45 core-prim . &irritants-rtd) (G4a2d core-prim . &assertion-rcd) (G4a2b core-prim . &assertion-rtd) (G4a18 core-prim . &violation-rcd) (G4a16 core-prim . &violation-rtd) (G4a03 core-prim . &error-rcd) (G4a01 core-prim . &error-rtd) (G49ee core-prim . &serious-rcd) (G49ec core-prim . &serious-rtd) (G49d9 core-prim . &warning-rcd) (G49d7 core-prim . &warning-rtd) (G49c4 core-prim . &message-rcd) (G49c2 core-prim . &message-rtd) (G4967 core-prim . &condition-rcd) (G4965 core-prim . &condition-rtd) (G3048 core-prim . syntax-error) (G2f61 core-prim . syntax-dispatch) (G50bb core-prim . pretty-print) (G50ba core-prim . eval-core) (G50b9 core-prim . set-symbol-value!) (G50b8 core-prim . symbol-value) (G50b7 core-prim . gensym) (G50b6 core-prim . void) (G4d15 core-prim . load) (G3058 core-prim . interaction-environment) (G50b5 core-prim . char-ready?) (G50b4 core-prim . regexp?) (G50b3 core-prim . read-line) (G50b2 core-prim . dotted-list?) (G50b1 core-prim . circular-list?) (G50b0 core-prim . proper-list?) (G50af core-prim . circular-list) (G50ae core-prim . last) (G50ad core-prim . last-pair) (G50ac core-prim . not-pair?) (G50ab core-prim . split-at!) (G50aa core-prim . split-at) (G50a9 core-prim . list=) (G50a8 core-prim . list-copy) (G50a7 core-prim . list-tabulate) (G50a6 core-prim . make-list) (G50a5 core-prim . xcons) (G50a4 core-prim . tenth) (G50a3 core-prim . ninth) (G50a2 core-prim . eighth) (G50a1 core-prim . seventh) (G50a0 core-prim . sixth) (G509f core-prim . fifth) (G509e core-prim . drop-right!) (G509d core-prim . drop-right) (G509c core-prim . take-right) (G509b core-prim . take!) (G509a core-prim . drop) (G5099 core-prim . take) (G5098 core-prim . car+cdr) (G5097 core-prim . third) (G5096 core-prim . second) (G5095 core-prim . first) (G5094 core-prim . iota) (G5093 core-prim . every) (G5092 core-prim . ungensym) (G5091 core-prim . alist->eq-hash-table) (G5090 core-prim . assoc-ref) (G508f core-prim . alist-cons) (G508e core-prim . append-map) (G508d core-prim . print) (G508c core-prim . format) (G508b core-prim . standard-library-path) (G508a core-prim . file-newer?) (G5089 core-prim . stat-mtime) (G5088 core-prim . write-to-file) (G5087 core-prim . file->list) (G5086 core-prim . file->string) (G5085 core-prim . digit->integer) (G5084 core-prim . call-with-string-input-port) (G5083 core-prim . call-with-string-io) (G5082 core-prim . string-split) (G5081 core-prim . bytevector-for-each) (G5080 core-prim . string->regexp) (G507f core-prim . rxmatch) (G507e core-prim . regexp-replace-all) (G507d core-prim . hashtable-for-each) (G507c core-prim . call-process) (G507b core-prim . local-tz-offset) (G507a core-prim . microseconds) (G5079 core-prim . readdir) (G5078 core-prim . set-current-directory!) (G5077 core-prim . expand-path) (G5076 core-prim . current-directory) (G5075 core-prim . %spawn) (G5074 core-prim . %waitpid) (G5073 core-prim . %ffi-supported?) (G5072 core-prim . %ffi-pointer-ref) (G5071 core-prim . %ffi-pointer->string) (G5070 core-prim . %ffi-call->string-or-zero) (G506f core-prim . %ffi-call->void*) (G506e core-prim . %ffi-call->void) (G506d core-prim . %ffi-call->int) (G506c core-prim . %ffi-lookup) (G506b core-prim . %ffi-open) (G506a core-prim . %fork) (G5069 core-prim . %pipe) (G5068 core-prim . get-environment-variables) (G5067 core-prim . get-environment-variable) (G5066 core-prim . get-timeofday) (G5065 core-prim . get-command-line) (G5064 core-prim . sys-display) (G5063 core-prim . source-info) (G5062 core-prim . make-compiler-instruction) (G5061 core-prim . make-instruction) (G5060 core-prim . set-source-info!) (G505f core-prim . bignum?) (G505e core-prim . make-complex) (G505d core-prim . fast-equal?) (G505c core-prim . fasl-read) (G505b core-prim . fasl-write) (G505a core-prim . receive) (G2834 core-prim . make-parameter) (G5059 core-prim . string-upcase) (G5058 core-prim . string-titlecase) (G5057 core-prim . string-normalize-nfkd) (G5056 core-prim . string-normalize-nfkc) (G5055 core-prim . string-normalize-nfd) (G5054 core-prim . string-normalize-nfc) (G5053 core-prim . string-foldcase) (G5052 core-prim . string-downcase) (G5051 core-prim . string-ci>?) (G5050 core-prim . string-ci>=?) (G504f core-prim . string-ci=?) (G504e core-prim . string-ci<?) (G504d core-prim . string-ci<=?) (G504c core-prim . char-whitespace?) (G504b core-prim . char-upper-case?) (G504a core-prim . char-title-case?) (G5049 core-prim . char-numeric?) (G5048 core-prim . char-lower-case?) (G5047 core-prim . char-general-category) (G5046 core-prim . char-upcase) (G5045 core-prim . char-titlecase) (G5044 core-prim . char-foldcase) (G5043 core-prim . char-downcase) (G5042 core-prim . char-ci>?) (G5041 core-prim . char-ci>=?) (G5040 core-prim . char-ci=?) (G503f core-prim . char-ci<?) (G503e core-prim . char-ci<=?) (G503d core-prim . char-alphabetic?) (G2d9c core-prim . make-variable-transformer) (G304e core-prim . identifier?) (G303a core-prim . generate-temporaries) (G303c core-prim . free-identifier=?) (G3052 core-prim . syntax->datum) (G3050 core-prim . datum->syntax) (G303e core-prim . bound-identifier=?) (G503c core-prim . record-type-descriptor?) (G503b core-prim . record-predicate) (G503a core-prim . record-mutator) (G5039 core-prim . record-constructor) (G5038 core-prim . record-accessor) (G5037 core-prim . make-record-type-descriptor) (G5036 core-prim . make-record-constructor-descriptor) (G5035 core-prim . record?) (G5034 core-prim . record-type-uid) (G5033 core-prim . record-type-sealed?) (G5032 core-prim . record-type-parent) (G5031 core-prim . record-type-opaque?) (G5030 core-prim . record-type-name) (G502f core-prim . record-type-generative?) (G502e core-prim . record-type-field-names) (G502d core-prim . record-rtd) (G502c core-prim . record-field-mutable?) (G502b core-prim . delete-file) (G502a core-prim . file-exists?) (G5029 core-prim . vector-sort!) (G5028 core-prim . vector-sort) (G5027 core-prim . list-sort) (G5026 core-prim . symbol-hash) (G5025 core-prim . string-ci-hash) (G5024 core-prim . string-hash) (G5023 core-prim . equal-hash) (G5022 core-prim . hashtable-equivalence-function) (G5021 core-prim . make-hashtable) (G5020 core-prim . hashtable-hash-function) (G501f core-prim . make-eqv-hashtable) (G501e core-prim . make-eq-hashtable) (G501d core-prim . hashtable?) (G501c core-prim . hashtable-update!) (G501b core-prim . hashtable-size) (G501a core-prim . hashtable-set!) (G5019 core-prim . hashtable-ref) (G5018 core-prim . hashtable-mutable?) (G5017 core-prim . hashtable-keys) (G5016 core-prim . hashtable-entries) (G5015 core-prim . hashtable-delete!) (G5014 core-prim . hashtable-copy) (G5013 core-prim . hashtable-contains?) (G5012 core-prim . hashtable-clear!) (G5011 core-prim . call-with-output-file) (G5010 core-prim . call-with-input-file) (G500f core-prim . write-char) (G500e core-prim . write) (G500d core-prim . with-output-to-file) (G500c core-prim . with-input-from-file) (G500b core-prim . read-char) (G500a core-prim . read) (G5009 core-prim . peek-char) (G5008 core-prim . open-output-file) (G5007 core-prim . open-input-file) (G5006 core-prim . newline) (G5005 core-prim . display) (G5004 core-prim . close-output-port) (G5003 core-prim . close-input-port) (G5002 core-prim . eof-object?) (G5001 core-prim . eof-object) (G5000 core-prim . current-error-port) (G4fff core-prim . current-output-port) (G4ffe core-prim . current-input-port) (G4ffd core-prim . output-port?) (G4ffc core-prim . input-port?) (G4ffb core-prim . utf-8-codec) (G4ffa core-prim . utf-16-codec) (G4ff9 core-prim . transcoder-error-handling-mode) (G4ff8 core-prim . transcoder-eol-style) (G4ff7 core-prim . transcoder-codec) (G4ff6 core-prim . transcoded-port) (G4ff5 core-prim . textual-port?) (G4ff4 core-prim . string->bytevector) (G4ff3 core-prim . standard-output-port) (G4ff2 core-prim . standard-input-port) (G4ff1 core-prim . standard-error-port) (G4ff0 core-prim . set-port-position!) (G4fef core-prim . put-u8) (G4fee core-prim . put-string) (G4fed core-prim . put-datum) (G4fec core-prim . put-char) (G4feb core-prim . put-bytevector) (G4fea core-prim . port?) (G4fe9 core-prim . port-transcoder) (G4fe8 core-prim . port-position) (G4fe7 core-prim . port-has-set-port-position!?) (G4fe6 core-prim . port-has-port-position?) (G4fe5 core-prim . port-eof?) (G4fe4 core-prim . output-port-buffer-mode) (G4fe3 core-prim . open-string-output-port) (G4fe2 core-prim . open-string-input-port) (G4fe1 core-prim . open-file-output-port) (G4fe0 core-prim . open-file-input/output-port) (G4fdf core-prim . open-file-input-port) (G4fde core-prim . open-bytevector-output-port) (G4fdd core-prim . open-bytevector-input-port) (G4fdc core-prim . native-transcoder) (G4fdb core-prim . native-eol-style) (G4fda core-prim . make-transcoder) (G4fd9 core-prim . latin-1-codec) (G4b0d core-prim . make-i/o-write-error) (G4af8 core-prim . make-i/o-read-error) (G4bab core-prim . make-i/o-port-error) (G4b23 core-prim . make-i/o-invalid-position-error) (G4b3d core-prim . make-i/o-filename-error) (G4b56 core-prim . make-i/o-file-protection-error) (G4b6b core-prim . make-i/o-file-is-read-only-error) (G4b95 core-prim . make-i/o-file-does-not-exist-error) (G4b80 core-prim . make-i/o-file-already-exists-error) (G4ae3 core-prim . make-i/o-error) (G4bda core-prim . make-i/o-encoding-error) (G4bc4 core-prim . make-i/o-decoding-error) (G4fd8 core-prim . make-custom-textual-output-port) (G4fd7 core-prim . make-custom-textual-input/output-port) (G4fd6 core-prim . make-custom-textual-input-port) (G4fd5 core-prim . make-custom-binary-output-port) (G4fd4 core-prim . make-custom-binary-input/output-port) (G4fd3 core-prim . make-custom-binary-input-port) (G4fd2 core-prim . make-bytevector) (G4fd1 core-prim . lookahead-u8) (G4fd0 core-prim . lookahead-char) (G4b0f core-prim . i/o-write-error?) (G4afa core-prim . i/o-read-error?) (G4baf core-prim . i/o-port-error?) (G4b27 core-prim . i/o-invalid-position-error?) (G4b41 core-prim . i/o-filename-error?) (G4b58 core-prim . i/o-file-protection-error?) (G4b6d core-prim . i/o-file-is-read-only-error?) (G4b97 core-prim . i/o-file-does-not-exist-error?) (G4b82 core-prim . i/o-file-already-exists-error?) (G4ae5 core-prim . i/o-error?) (G4b29 core-prim . i/o-error-position) (G4bb1 core-prim . i/o-error-port) (G4b43 core-prim . i/o-error-filename) (G4bde core-prim . i/o-encoding-error?) (G4be0 core-prim . i/o-encoding-error-char) (G4bc6 core-prim . i/o-decoding-error?) (G4fcf core-prim . get-u8) (G4fce core-prim . get-string-n!) (G4fcd core-prim . get-string-n) (G4fcc core-prim . get-string-all) (G4fcb core-prim . get-line) (G4fca core-prim . get-datum) (G4fc9 core-prim . get-char) (G4fc8 core-prim . get-bytevector-some) (G4fc7 core-prim . get-bytevector-n!) (G4fc6 core-prim . get-bytevector-n) (G4fc5 core-prim . get-bytevector-all) (G4fc4 core-prim . flush-output-port) (G4fc3 core-prim . close-port) (G3028 core-prim . scheme-report-environment) (G4fc2 core-prim . quotient) (G3026 core-prim . null-environment) (G4fc1 core-prim . remainder) (G4fc0 core-prim . modulo) (G4fbf core-prim . inexact->exact) (G4fbe core-prim . force) (G4fbd core-prim . exact->inexact) (G4fbc core-prim . make-promise) (G4fbb core-prim . exit) (G4d0f core-prim . command-line) (G4fba core-prim . string-fill!) (G4fb9 core-prim . string-set!) (G4fb8 core-prim . set-cdr!) (G4fb7 core-prim . set-car!) (G4fb6 core-prim . remove) (G4fb5 core-prim . remv) (G4fb4 core-prim . remp) (G4fb3 core-prim . remq) (G4fb2 core-prim . partition) (G4fb1 core-prim . memv) (G4fb0 core-prim . memq) (G4faf core-prim . memp) (G4fae core-prim . member) (G4fad core-prim . exists) (G4fac core-prim . for-all) (G4fab core-prim . fold-right) (G4faa core-prim . fold-left) (G4fa9 core-prim . find) (G4fa8 core-prim . filter) (G4fa7 core-prim . cons*) (G4fa6 core-prim . assv) (G4fa5 core-prim . assq) (G4fa4 core-prim . assp) (G4fa3 core-prim . assoc) (G4fa2 core-prim . call-with-string-output-port) (G4fa1 core-prim . call-with-port) (G4fa0 core-prim . call-with-bytevector-output-port) (G4f9f core-prim . bytevector->string) (G4f9e core-prim . buffer-mode?) (G4f9d core-prim . binary-port?) (G4f9c core-prim . with-exception-handler) (G4f9b core-prim . raise-continuable) (G4f9a core-prim . raise) (G302c core-prim . eval) (G3024 core-prim . environment) (G4f99 core-prim . make-enumeration) (G4f98 core-prim . enum-set=?) (G4f97 core-prim . enum-set-universe) (G4f96 core-prim . enum-set-union) (G4f95 core-prim . enum-set-subset?) (G4f94 core-prim . enum-set-projection) (G4f93 core-prim . enum-set-member?) (G4f92 core-prim . enum-set-intersection) (G4f91 core-prim . enum-set-indexer) (G4f90 core-prim . enum-set-difference) (G4f8f core-prim . enum-set-constructor) (G4f8e core-prim . enum-set-complement) (G4f8d core-prim . enum-set->list) (G4a5b core-prim . who-condition?) (G49d5 core-prim . warning?) (G4a14 core-prim . violation?) (G4ad0 core-prim . undefined-violation?) (G4ab7 core-prim . syntax-violation?) (G4abb core-prim . syntax-violation-subform) (G4ab9 core-prim . syntax-violation-form) (G304c core-prim . syntax-violation) (G4f8c core-prim . simple-conditions) (G49ea core-prim . serious-condition?) (G4a72 core-prim . non-continuable-violation?) (G49be core-prim . message-condition?) (G4a57 core-prim . make-who-condition) (G49d3 core-prim . make-warning) (G4a12 core-prim . make-violation) (G4ace core-prim . make-undefined-violation) (G4ab1 core-prim . make-syntax-violation) (G49e8 core-prim . make-serious-condition) (G4a70 core-prim . make-non-continuable-violation) (G49ba core-prim . make-message-condition) (G4a9a core-prim . make-lexical-violation) (G4a3d core-prim . make-irritants-condition) (G4a85 core-prim . make-implementation-restriction-violation) (G49fd core-prim . make-error) (G4a27 core-prim . make-assertion-violation) (G4a9c core-prim . lexical-violation?) (G4a41 core-prim . irritants-condition?) (G4a87 core-prim . implementation-restriction-violation?) (G49ff core-prim . error?) (G4a5d core-prim . condition-who) (G4f8b core-prim . condition-predicate) (G49c0 core-prim . condition-message) (G4a43 core-prim . condition-irritants) (G4f8a core-prim . condition-accessor) (G4f89 core-prim . condition) (G4a29 core-prim . assertion-violation?) (G4f88 core-prim . condition?) (G4f87 core-prim . utf32->string) (G4f86 core-prim . utf16->string) (G4f85 core-prim . utf8->string) (G4f84 core-prim . uint-list->bytevector) (G4f83 core-prim . u8-list->bytevector) (G4f82 core-prim . string->utf8) (G4f81 core-prim . string->utf32) (G4f80 core-prim . string->utf16) (G4f7f core-prim . sint-list->bytevector) (G4f7e core-prim . native-endianness) (G4f7d core-prim . bytevector?) (G4f7c core-prim . bytevector=?) (G4f7b core-prim . bytevector-uint-set!) (G4f7a core-prim . bytevector-uint-ref) (G4f79 core-prim . bytevector-u8-set!) (G4f78 core-prim . bytevector-u8-ref) (G4f77 core-prim . bytevector-u64-set!) (G4f76 core-prim . bytevector-u64-ref) (G4f75 core-prim . bytevector-u64-native-set!) (G4f74 core-prim . bytevector-u64-native-ref) (G4f73 core-prim . bytevector-u32-set!) (G4f72 core-prim . bytevector-u32-ref) (G4f71 core-prim . bytevector-u32-native-set!) (G4f70 core-prim . bytevector-u32-native-ref) (G4f6f core-prim . bytevector-u16-set!) (G4f6e core-prim . bytevector-u16-ref) (G4f6d core-prim . bytevector-u16-native-set!) (G4f6c core-prim . bytevector-u16-native-ref) (G4f6b core-prim . bytevector-sint-set!) (G4f6a core-prim . bytevector-sint-ref) (G4f69 core-prim . bytevector-s8-set!) (G4f68 core-prim . bytevector-s8-ref) (G4f67 core-prim . bytevector-s64-set!) (G4f66 core-prim . bytevector-s64-ref) (G4f65 core-prim . bytevector-s64-native-set!) (G4f64 core-prim . bytevector-s64-native-ref) (G4f63 core-prim . bytevector-s32-set!) (G4f62 core-prim . bytevector-s32-ref) (G4f61 core-prim . bytevector-s32-native-set!) (G4f60 core-prim . bytevector-s32-native-ref) (G4f5f core-prim . bytevector-s16-set!) (G4f5e core-prim . bytevector-s16-ref) (G4f5d core-prim . bytevector-s16-native-set!) (G4f5c core-prim . bytevector-s16-native-ref) (G4f5b core-prim . bytevector-length) (G4f5a core-prim . bytevector-ieee-single-ref) (G4f59 core-prim . bytevector-ieee-single-set!) (G4f58 core-prim . bytevector-ieee-single-native-set!) (G4f57 core-prim . bytevector-ieee-single-native-ref) (G4f56 core-prim . bytevector-ieee-double-set!) (G4f55 core-prim . bytevector-ieee-double-ref) (G4f54 core-prim . bytevector-ieee-double-native-set!) (G4f53 core-prim . bytevector-ieee-double-native-ref) (G4f52 core-prim . bytevector-fill!) (G4f51 core-prim . bytevector-copy!) (G4f50 core-prim . bytevector-copy) (G4f4f core-prim . bytevector->uint-list) (G4f4e core-prim . bytevector->u8-list) (G4f4d core-prim . bytevector->sint-list) (G4c0a core-prim . no-nans-violation?) (G4bf5 core-prim . no-infinities-violation?) (G4c08 core-prim . make-no-nans-violation) (G4bf3 core-prim . make-no-infinities-violation) (G4f4c core-prim . real->flonum) (G4f4b core-prim . flzero?) (G4f4a core-prim . fltruncate) (G4f49 core-prim . fltan) (G4f48 core-prim . flsqrt) (G4f47 core-prim . flsin) (G4f46 core-prim . flround) (G4f45 core-prim . flpositive?) (G4f44 core-prim . flonum?) (G4f43 core-prim . flodd?) (G4f42 core-prim . flnumerator) (G4f41 core-prim . flnegative?) (G4f40 core-prim . flnan?) (G4f3f core-prim . flmod0) (G4f3e core-prim . flmod) (G4f3d core-prim . flmin) (G4f3c core-prim . flmax) (G4f3b core-prim . fllog) (G4f3a core-prim . flinteger?) (G4f39 core-prim . flinfinite?) (G4f38 core-prim . flfloor) (G4f37 core-prim . flfinite?) (G4f36 core-prim . flexpt) (G4f35 core-prim . flexp) (G4f34 core-prim . fleven?) (G4f33 core-prim . fldiv0-and-mod0) (G4f32 core-prim . fldiv0) (G4f31 core-prim . fldiv-and-mod) (G4f30 core-prim . fldiv) (G4f2f core-prim . fldenominator) (G4f2e core-prim . flcos) (G4f2d core-prim . flceiling) (G4f2c core-prim . flatan) (G4f2b core-prim . flasin) (G4f2a core-prim . flacos) (G4f29 core-prim . flabs) (G4f28 core-prim . fl>?) (G4f27 core-prim . fl>=?) (G4f26 core-prim . fl=?) (G4f25 core-prim . fl<?) (G4f24 core-prim . fl<=?) (G4f23 core-prim . fl/) (G4f22 core-prim . fl-) (G4f21 core-prim . fl+) (G4f20 core-prim . fl*) (G4f1f core-prim . fixnum->flonum) (G4f1e core-prim . fxzero?) (G4f1d core-prim . fxxor) (G4f1c core-prim . fxrotate-bit-field) (G4f1b core-prim . fxreverse-bit-field) (G4f1a core-prim . fxpositive?) (G4f19 core-prim . fxodd?) (G4f18 core-prim . fxnot) (G4f17 core-prim . fxnegative?) (G4f16 core-prim . fxmod0) (G4f15 core-prim . fxmod) (G4f14 core-prim . fxmin) (G4f13 core-prim . fxmax) (G4f12 core-prim . fxlength) (G4f11 core-prim . fxior) (G4f10 core-prim . fxif) (G4f0f core-prim . fxfirst-bit-set) (G4f0e core-prim . fxeven?) (G4f0d core-prim . fxdiv0-and-mod0) (G4f0c core-prim . fxdiv0) (G4f0b core-prim . fxdiv-and-mod) (G4f0a core-prim . fxdiv) (G4f09 core-prim . fxcopy-bit-field) (G4f08 core-prim . fxcopy-bit) (G4f07 core-prim . fxbit-set?) (G4f06 core-prim . fxbit-field) (G4f05 core-prim . fxbit-count) (G4f04 core-prim . fxarithmetic-shift-right) (G4f03 core-prim . fxarithmetic-shift-left) (G4f02 core-prim . fxarithmetic-shift) (G4f01 core-prim . fxand) (G4f00 core-prim . fx>?) (G4eff core-prim . fx>=?) (G4efe core-prim . fx=?) (G4efd core-prim . fx<?) (G4efc core-prim . fx<=?) (G4efb core-prim . fx-/carry) (G4efa core-prim . fx-) (G4ef9 core-prim . fx+/carry) (G4ef8 core-prim . fx+) (G4ef7 core-prim . fx*/carry) (G4ef6 core-prim . fx*) (G4ef5 core-prim . greatest-fixnum) (G4ef4 core-prim . least-fixnum) (G4ef3 core-prim . fixnum-width) (G4ef2 core-prim . fixnum?) (G4ef1 core-prim . bitwise-rotate-bit-field) (G4ef0 core-prim . bitwise-reverse-bit-field) (G4eef core-prim . bitwise-length) (G4eee core-prim . bitwise-if) (G4eed core-prim . bitwise-first-bit-set) (G4eec core-prim . bitwise-copy-bit-field) (G4eeb core-prim . bitwise-copy-bit) (G4eea core-prim . bitwise-bit-set?) (G4ee9 core-prim . bitwise-bit-field) (G4ee8 core-prim . bitwise-bit-count) (G4ee7 core-prim . bitwise-xor) (G4ee6 core-prim . bitwise-ior) (G4ee5 core-prim . bitwise-and) (G4ee4 core-prim . bitwise-not) (G4ee3 core-prim . bitwise-arithmetic-shift-right) (G4ee2 core-prim . bitwise-arithmetic-shift-left) (G4ee1 core-prim . bitwise-arithmetic-shift) (G4ee0 core-prim . zero?) (G4edf core-prim . vector?) (G4ede core-prim . vector-set!) (G4edd core-prim . vector-ref) (G4edc core-prim . vector-map) (G4edb core-prim . vector-length) (G4eda core-prim . vector-for-each) (G4ed9 core-prim . vector-fill!) (G4ed8 core-prim . vector->list) (G4ed7 core-prim . vector) (G4ed6 core-prim . values) (G4ed5 core-prim . truncate) (G4ed4 core-prim . tan) (G4ed3 core-prim . symbol?) (G4ed2 core-prim . symbol=?) (G4ed1 core-prim . symbol->string) (G4ed0 core-prim . substring) (G4ecf core-prim . string?) (G4ece core-prim . string>?) (G4ecd core-prim . string>=?) (G4ecc core-prim . string=?) (G4ecb core-prim . string<?) (G4eca core-prim . string<=?) (G4ec9 core-prim . string-ref) (G4ec8 core-prim . string-length) (G4ec7 core-prim . string-for-each) (G4ec6 core-prim . string-copy) (G4ec5 core-prim . string-append) (G4ec4 core-prim . string->symbol) (G4ec3 core-prim . string->number) (G4ec2 core-prim . string->list) (G4ec1 core-prim . string) (G4ec0 core-prim . sqrt) (G4ebf core-prim . sin) (G4ebe core-prim . round) (G4ebd core-prim . reverse) (G4ebc core-prim . real?) (G4ebb core-prim . real-valued?) (G4eba core-prim . real-part) (G4eb9 core-prim . rationalize) (G4eb8 core-prim . rational?) (G4eb7 core-prim . rational-valued?) (G4eb6 core-prim . procedure?) (G4eb5 core-prim . positive?) (G4eb4 core-prim . pair?) (G4eb3 core-prim . odd?) (G4eb2 core-prim . numerator) (G4eb1 core-prim . number?) (G4eb0 core-prim . number->string) (G4eaf core-prim . null?) (G4eae core-prim . not) (G4ead core-prim . negative?) (G4eac core-prim . nan?) (G4eab core-prim . min) (G4eaa core-prim . max) (G4ea9 core-prim . map) (G4ea8 core-prim . make-vector) (G4ea7 core-prim . make-string) (G4ea6 core-prim . make-rectangular) (G4ea5 core-prim . make-polar) (G4ea4 core-prim . magnitude) (G4ea3 core-prim . log) (G4ea2 core-prim . list?) (G4ea1 core-prim . list-tail) (G4ea0 core-prim . list-ref) (G4e9f core-prim . list->vector) (G4e9e core-prim . list->string) (G4e9d core-prim . list) (G4e9c core-prim . length) (G4e9b core-prim . lcm) (G4e9a core-prim . integer?) (G4e99 core-prim . integer-valued?) (G4e98 core-prim . integer->char) (G4e97 core-prim . infinite?) (G4e96 core-prim . inexact?) (G4e95 core-prim . inexact) (G4e94 core-prim . imag-part) (G4e93 core-prim . gcd) (G4e92 core-prim . for-each) (G4e91 core-prim . floor) (G4e90 core-prim . finite?) (G4e8f core-prim . expt) (G4e8e core-prim . exp) (G4e8d core-prim . exact?) (G4e8c core-prim . exact-integer-sqrt) (G4e8b core-prim . exact) (G4e8a core-prim . even?) (G4e89 core-prim . error) (G4e88 core-prim . eqv?) (G4e87 core-prim . equal?) (G4e86 core-prim . eq?) (G4e85 core-prim . dynamic-wind) (G4e84 core-prim . div0-and-mod0) (G4e83 core-prim . mod0) (G4e82 core-prim . div0) (G4e81 core-prim . div-and-mod) (G4e80 core-prim . mod) (G4e7f core-prim . div) (G4e7e core-prim . denominator) (G4e7d core-prim . cos) (G4e7c core-prim . cons) (G4e7b core-prim . complex?) (G4e7a core-prim . char?) (G4e79 core-prim . char>?) (G4e78 core-prim . char>=?) (G4e77 core-prim . char=?) (G4e76 core-prim . char<?) (G4e75 core-prim . char<=?) (G4e74 core-prim . char->integer) (G4e73 core-prim . ceiling) (G4e72 core-prim . call-with-values) (G4e71 core-prim . call/cc) (G4e70 core-prim . call-with-current-continuation) (G4e6f core-prim . cddddr) (G4e6e core-prim . cdddar) (G4e6d core-prim . cddadr) (G4e6c core-prim . cddaar) (G4e6b core-prim . cdaddr) (G4e6a core-prim . cdadar) (G4e69 core-prim . cdaadr) (G4e68 core-prim . cdaaar) (G4e67 core-prim . cadddr) (G4e66 core-prim . caddar) (G4e65 core-prim . cadadr) (G4e64 core-prim . cadaar) (G4e63 core-prim . caaddr) (G4e62 core-prim . caadar) (G4e61 core-prim . caaadr) (G4e60 core-prim . caaaar) (G4e5f core-prim . cdddr) (G4e5e core-prim . cddar) (G4e5d core-prim . cdadr) (G4e5c core-prim . cdaar) (G4e5b core-prim . caddr) (G4e5a core-prim . cadar) (G4e59 core-prim . caadr) (G4e58 core-prim . caaar) (G4e57 core-prim . cddr) (G4e56 core-prim . cdar) (G4e55 core-prim . cadr) (G4e54 core-prim . caar) (G4e53 core-prim . cdr) (G4e52 core-prim . car) (G4e51 core-prim . boolean?) (G4e50 core-prim . boolean=?) (G4e4f core-prim . atan) (G4e4e core-prim . assertion-violation) (G4e4d core-prim . asin) (G4e4c core-prim . apply) (G4e4b core-prim . append) (G4e4a core-prim . angle) (G4e49 core-prim . acos) (G4e48 core-prim . abs) (G4e47 core-prim . /) (G4e46 core-prim . *) (G4e45 core-prim . -) (G4e44 core-prim . +) (G4e43 core-prim . >=) (G4e42 core-prim . >) (G4e41 core-prim . =) (G4e40 core-prim . <=) (G4e3f core-prim . <) (G4e3e core-prim . library) (G4e3d core-prim . export) (G4e3c $core-rtd &no-nans-rtd &no-nans-rcd) (G4e3b $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e3a $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e39 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e38 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e37 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e36 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e35 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e34 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e33 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e32 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e31 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e30 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e2f $core-rtd &i/o-rtd &i/o-rcd) (G4e2e $core-rtd &undefined-rtd &undefined-rcd) (G4e2d $core-rtd &syntax-rtd &syntax-rcd) (G4e2c $core-rtd &lexical-rtd &lexical-rcd) (G4e2b $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e2a $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e29 $core-rtd &who-rtd &who-rcd) (G4e28 $core-rtd &irritants-rtd &irritants-rcd) (G4e27 $core-rtd &assertion-rtd &assertion-rcd) (G4e26 $core-rtd &violation-rtd &violation-rcd) (G4e25 $core-rtd &error-rtd &error-rcd) (G4e24 $core-rtd &serious-rtd &serious-rcd) (G4e23 $core-rtd &warning-rtd &warning-rcd) (G4e22 $core-rtd &message-rtd &message-rcd) (G4e21 $core-rtd &condition-rtd &condition-rcd) (G4e20 macro . define-condition-type) (G4e1f macro . define-enumeration) (G4e1e macro . define-record-type) (G4e1d macro . parent-rtd) (G4e1c macro . nongenerative) (G4e1b macro . opaque) (G4e1a macro . sealed) (G4e19 macro . protocol) (G4e18 macro . parent) (G4e17 macro . immutable) (G4e16 macro . mutable) (G4e15 macro . fields) (G4e14 macro . error-handling-mode) (G4e13 macro . file-options) (G4e12 macro . buffer-mode) (G4e11 macro . eol-style) (G4e10 macro . guard) (G4e0f macro . trace-define) (G4e0e macro . trace-lambda) (G4e0d macro . unsyntax-splicing) (G4e0c macro . unsyntax) (G4e0b macro . unquote-splicing) (G4e0a macro . unquote) (G4e09 macro . _) (G4e08 macro . else) (G4e07 macro . =>) (G4e06 macro . ...) (G4e05 macro . assert) (G4e04 macro . endianness) (G4e03 macro . delay) (G4e02 macro . time) (G4e01 macro . do) (G4e00 macro . cond) (G4dff macro . let*) (G4dfe macro . let) (G4dfd macro . let*-values) (G4dfc macro . let-values) (G4dfb macro . identifier-syntax) (G4dfa macro . with-syntax) (G4df9 macro . quasisyntax) (G4df8 macro . quasiquote) (G4df7 macro . syntax-rules) (G4df6 macro . include) (G4df5 macro . define-struct) (G4df4 core-macro . record-constructor-descriptor) (G4df3 core-macro . record-type-descriptor) (G4df2 macro . case) (G4df1 macro . parameterize) (G4df0 macro . unless) (G4def macro . when) (G4dee core-macro . or) (G4ded core-macro . and) (G4dec core-macro . if) (G4deb core-macro . letrec*) (G4dea core-macro . letrec) (G4de9 core-macro . type-descriptor) (G4de8 core-macro . case-lambda) (G4de7 core-macro . lambda) (G4de6 core-macro . syntax) (G4de5 core-macro . syntax-case) (G4de4 core-macro . quote) (G4de3 core-macro . foreign-call) (G4de2 letrec-syntax) (G4de1 let-syntax) (G4de0 set!) (G4ddf import) (G4dde begin) (G4ddd module) (G4ddc define-syntax) (G4ddb define)) values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50dc '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50bb) (eval-core . G50ba) (set-symbol-value! . G50b9) (symbol-value . G50b8) (gensym . G50b7) (void . G50b6)) '() values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50dd '(mosh) '() '() '() '() '((set-symbol-value! . G50b9) (symbol-value . G50b8) (ungensym . G5092) (alist->eq-hash-table . G5091) (assoc-ref . G5090) (alist-cons . G508f) (print . G508d) (format . G508c) (standard-library-path . G508b) (file-newer? . G508a) (stat-mtime . G5089) (write-to-file . G5088) (file->list . G5087) (file->string . G5086) (digit->integer . G5085) (call-with-string-input-port . G5084) (call-with-string-io . G5083) (string-split . G5082) (bytevector-for-each . G5081) (string->regexp . G5080) (rxmatch . G507f) (regexp-replace-all . G507e) (hashtable-for-each . G507d) (set-current-directory! . G5078) (expand-path . G5077) (current-directory . G5076) (get-timeofday . G5066) (get-command-line . G5065) (sys-display . G5064) (source-info . G5063) (make-compiler-instruction . G5062) (make-instruction . G5061) (set-source-info! . G5060) (bignum? . G505f) (make-complex . G505e) (fast-equal? . G505d) (fasl-read . G505c) (fasl-write . G505b) (include . G4df6)) '() values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50de '(mosh backend) '() '() '() '() '((receive . G505a)) '() values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50df '(mosh file) '() '() '() '() '((read-line . G50b3) (file-newer? . G508a) (stat-mtime . G5089) (write-to-file . G5088) (file->list . G5087) (file->string . G5086)) '() values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50e0 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G5081)) '() values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50e1 '(mosh number) '() '() '() '() '((digit->integer . G5085)) '() values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50e2 '(mosh string) '() '() '() '() '((print . G508d) (format . G508c) (call-with-string-input-port . G5084) (call-with-string-io . G5083) (string-split . G5082) (string->regexp . G5080)) '() values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50e3 '(mosh list) '() '() '() '() '((assoc-ref . G5090)) '() values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50e4 '(mosh regexp) '() '() '() '() '((rxmatch . G507f) (regexp-replace-all . G507e)) '() values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50e5 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G507d)) '() values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50e6 '(mosh parameters) '() '() '() '() '((make-parameter . G2834) (parameterize . G4df1)) '() values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50e7 '(system) '() '() '() '() '((call-process . G507c) (local-tz-offset . G507b) (microseconds . G507a) (readdir . G5079) (set-current-directory! . G5078) (expand-path . G5077) (current-directory . G5076) (%spawn . G5075) (%waitpid . G5074) (%ffi-supported? . G5073) (%ffi-pointer-ref . G5072) (%ffi-pointer->string . G5071) (%ffi-call->string-or-zero . G5070) (%ffi-call->void* . G506f) (%ffi-call->void . G506e) (%ffi-call->int . G506d) (%ffi-lookup . G506c) (%ffi-open . G506b) (%fork . G506a) (%pipe . G5069) (get-environment-variables . G5068) (get-environment-variable . G5067)) '() values values '#f '#f '#f '#f) (G2b78@G2a1d@install-library 'G50e8 '(srfi :1) '() '() '() '() '((dotted-list? . G50b2) (circular-list? . G50b1) (proper-list? . G50b0) (circular-list . G50af) (last . G50ae) (last-pair . G50ad) (not-pair? . G50ac) (split-at! . G50ab) (split-at . G50aa) (list= . G50a9) (list-copy . G50a8) (list-tabulate . G50a7) (make-list . G50a6) (xcons . G50a5) (tenth . G50a4) (ninth . G50a3) (eighth . G50a2) (seventh . G50a1) (sixth . G50a0) (fifth . G509f) (drop-right! . G509e) (drop-right . G509d) (take-right . G509c) (take! . G509b) (drop . G509a) (take . G5099) (car+cdr . G5098) (third . G5097) (second . G5096) (first . G5095) (iota . G5094) (every . G5093) (alist-cons . G508f) (append-map . G508e)) '() values values '#f '#f '#f '#f))
((lambda (G4d04@add-library-path! G4d06@parse-and-add-library-path G4d08@for-each-with-index G4d0a@conditioon-printer G4d0c@repl G4d0e@trace-printer G4d10@command-line G4d12@local-library-path G4d14@load/args G4d16@load G4d18@ironscheme-build G4d1a@eval-top-level G4d1c@compile-system-libraries G4d1e@compile G4d20@compile->closure G4d22@pre-compile-r6rs-file G4d24@load-r6rs-top-level) (begin (set! G4d04@add-library-path! (lambda (G4d3f@path) (G2b68@G29fd@library-path (append (G2b68@G29fd@library-path) (list G4d3f@path))))) (set! G4d06@parse-and-add-library-path (lambda (G4d41@paths G4d42@message) ((lambda (G4d45@t) (if G4d45@t ((lambda (G4d47@paths) (for-each (lambda (G4d49@path) (if (file-exists? G4d49@path) (G4d04@add-library-path! (expand-path G4d49@path)) (format (current-error-port) G4d42@message G4d49@path))) (reverse (string-split G4d47@paths '#\:)))) G4d45@t) (void))) G4d41@paths))) (set! G4d08@for-each-with-index (lambda (G4d4b@proc G4d4c@lst) (letrec ((G4d4f@loop (lambda (G4d51@i G4d52@lst) (if (null? G4d52@lst) (if '#f '#f (void)) (begin (G4d4b@proc G4d51@i (car G4d52@lst)) (G4d4f@loop (+ G4d51@i '1) (cdr G4d52@lst))))))) (G4d4f@loop '1 G4d4c@lst)))) (set! G4d0a@conditioon-printer (lambda (G4d55@e G4d56@port) ((lambda (G4d5a@ref) (begin (set! G4d5a@ref (lambda (G4d69@rtd G4d6a@i G4d6b@x) ((lambda (G4d6f@val) (if (symbol? G4d6f@val) (ungensym G4d6f@val) G4d6f@val)) ((record-accessor G4d69@rtd G4d6a@i) G4d6b@x)))) (begin (display '" Condition components:\n" G4d56@port) (G4d08@for-each-with-index (lambda (G4d5b@i G4d5c@x) ((lambda (G4d5f@rtd) (begin (format G4d56@port '"   ~d. ~a" G4d5b@i (record-type-name G4d5f@rtd)) ((lambda (G4d61@v) ((lambda (G4d63@t) (if (memv G4d63@t '(0)) (newline G4d56@port) (if (memv G4d63@t '(1)) (begin (display '": " G4d56@port) (write (G4d5a@ref G4d5f@rtd '0 G4d5c@x) G4d56@port) (newline G4d56@port)) (begin (display '":\n" G4d56@port) ((letrec ((G4d65@f (lambda (G4d67@i) (if (not (= G4d67@i (vector-length G4d61@v))) (begin (display '"       " G4d56@port) (display (vector-ref G4d61@v G4d67@i) G4d56@port) (display '": " G4d56@port) (write (G4d5a@ref G4d5f@rtd G4d67@i G4d5c@x) G4d56@port) (newline G4d56@port) (G4d65@f (+ G4d67@i '1))) (void))))) G4d65@f) '0))))) (vector-length G4d61@v))) (record-type-field-names G4d5f@rtd)))) (record-rtd G4d5c@x))) (simple-conditions G4d55@e))))) '#f))) (set! G4d0c@repl (lambda G4d71@x ((lambda (G4d74@rec) (begin (set! G4d74@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d77@G4d75) (lambda () (with-exception-handler (lambda (G4d79@e) ((call/cc (lambda (G4d7b@G4d76) (G4d77@G4d75 (lambda () (if '#t (begin (display '"\n" (current-error-port)) (G4d0a@conditioon-printer G4d79@e (current-error-port))) (G4d7b@G4d76 (lambda () (raise-continuable G4d79@e)))))))))) (lambda () ((letrec ((G4d7d@loop (lambda (G4d7f@line G4d80@accum) ((lambda (G4d84@parentheses-ok? G4d86@eval-string-print) (begin (set! G4d84@parentheses-ok? (lambda (G4d8b@text) ((letrec ((G4d8d@loop (lambda (G4d8f@chars G4d90@p0 G4d91@p1) (if (null? G4d8f@chars) (= '0 G4d90@p0 G4d91@p1) ((lambda (G4d95@t) (if (memv G4d95@t '(#\()) (G4d8d@loop (cdr G4d8f@chars) (+ G4d90@p0 '1) G4d91@p1) (if (memv G4d95@t '(#\))) (G4d8d@loop (cdr G4d8f@chars) (- G4d90@p0 '1) G4d91@p1) (if (memv G4d95@t '(#\[)) (G4d8d@loop (cdr G4d8f@chars) G4d90@p0 (+ G4d91@p1 '1)) (if (memv G4d95@t '(#\])) (G4d8d@loop (cdr G4d8f@chars) G4d90@p0 (- G4d91@p1 '1)) (G4d8d@loop (cdr G4d8f@chars) G4d90@p0 G4d91@p1)))))) (car G4d8f@chars)))))) G4d8d@loop) (string->list G4d8b@text) '0 '0))) (set! G4d86@eval-string-print (lambda (G4d89@text) (if (not (or (string=? '"\n" G4d89@text) (= '0 (string-length G4d89@text)))) (write (G4d1a@eval-top-level (call-with-port (open-string-input-port G4d89@text) read))) (void)))) (if (eof-object? G4d7f@line) (begin (G4d86@eval-string-print G4d80@accum) (exit)) ((lambda (G4d87@current) (if (G4d84@parentheses-ok? G4d87@current) (G4d86@eval-string-print G4d87@current) (G4d7d@loop (get-line (current-input-port)) G4d87@current))) (string-append G4d80@accum G4d7f@line))))) '#f '#f)))) G4d7d@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d74@rec)))) (G4d74@rec))) '#f))) (set! G4d0e@trace-printer (G28ff@G2835@make-parameter write)) (set! G4d10@command-line (G28ff@G2835@make-parameter (get-command-line))) (set! G4d12@local-library-path (lambda (G4d97@filename) (cons (expand-path '".") (G2b68@G29fd@library-path)))) (set! G4d14@load/args (lambda (G4d99@filename . G4d9b@args) (begin (apply G4d24@load-r6rs-top-level G4d99@filename 'load G4d9b@args) (void)))) (set! G4d16@load (lambda (G4d9d@filename) (begin (apply G4d24@load-r6rs-top-level G4d9d@filename 'load (G4d10@command-line)) (void)))) (set! G4d18@ironscheme-build (lambda () (G4d16@load '"ironscheme-buildscript.ss"))) (set! G4d1a@eval-top-level (lambda (G4d9f@x) (G493a@G302d@eval G4d9f@x (G4950@G3059@interaction-environment)))) (set! G4d1c@compile-system-libraries (lambda () (G4d1a@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d1e@compile (lambda (G4da1@filename) (G4d24@load-r6rs-top-level G4da1@filename 'compile))) (set! G4d20@compile->closure (lambda (G4da3@filename) (G4d24@load-r6rs-top-level G4da3@filename 'closure))) (set! G4d22@pre-compile-r6rs-file (lambda (G4da5@filename) (G4d24@load-r6rs-top-level G4da5@filename 'compile))) (set! G4d24@load-r6rs-top-level (lambda (G4da7@filename G4da8@how . G4dab@args) ((lambda (G4daf@G4dad G4db0@G4dae) ((lambda (G4db3@swap) (dynamic-wind G4db3@swap (lambda () ((lambda (G4db5@x*) ((lambda (G4db7@t) (if (memv G4db7@t '(closure)) (G494f@G3057@pre-compile-r6rs-top-level G4db5@x*) (if (memv G4db7@t '(load)) ((lambda (G4dbb@G4db9 G4dbc@G4dba) ((lambda (G4dbf@swap) (dynamic-wind G4dbf@swap (lambda () ((G494e@G3055@compile-r6rs-top-level G4db5@x*))) G4dbf@swap)) (lambda () ((lambda (G4dc1@t) (begin (G4dbb@G4db9 G4dbc@G4dba) (set! G4dbc@G4dba G4dc1@t))) (G4dbb@G4db9))))) G4d10@command-line (cons G4da7@filename (car G4dab@args))) (if (memv G4db7@t '(compile)) (begin (G494e@G3055@compile-r6rs-top-level G4db5@x*) (G2b6c@G2a05@serialize-all G28fa@G282b@serialize-library G2954@G290d@compile-core-expr)) (if '#f '#f (void)))))) G4da8@how)) (with-input-from-file G4da7@filename (lambda () ((letrec ((G4dc3@f (lambda () ((lambda (G4dc5@x) (if (eof-object? G4dc5@x) '() (cons G4dc5@x (G4dc3@f)))) (G28f2@G281b@read-annotated))))) G4dc3@f)))))) G4db3@swap)) (lambda () ((lambda (G4dc7@t) (begin (G4daf@G4dad G4db0@G4dae) (set! G4db0@G4dae G4dc7@t))) (G4daf@G4dad))))) G2b68@G29fd@library-path (G4d12@local-library-path G4da7@filename)))) (begin (set! G4dd9@G4d24@load-r6rs-top-level G4d24@load-r6rs-top-level) (set! G4dd8@G4d22@pre-compile-r6rs-file G4d22@pre-compile-r6rs-file) (set! G4dd7@G4d20@compile->closure G4d20@compile->closure) (set! G4dd6@G4d1e@compile G4d1e@compile) (set! G4dd5@G4d1c@compile-system-libraries G4d1c@compile-system-libraries) (set! G4dd4@G4d1a@eval-top-level G4d1a@eval-top-level) (set! G4dd3@G4d18@ironscheme-build G4d18@ironscheme-build) (set! G4dd2@G4d16@load G4d16@load) (set! G4dd1@G4d14@load/args G4d14@load/args) (set! G4dd0@G4d12@local-library-path G4d12@local-library-path) (set! G4dcf@G4d10@command-line G4d10@command-line) (set! G4dce@G4d0e@trace-printer G4d0e@trace-printer) (set! G4dcd@G4d0c@repl G4d0c@repl) (set! G4dcc@G4d0a@conditioon-printer G4d0a@conditioon-printer) (set! G4dcb@G4d08@for-each-with-index G4d08@for-each-with-index) (set! G4dca@G4d06@parse-and-add-library-path G4d06@parse-and-add-library-path) (set! G4dc9@G4d04@add-library-path! G4d04@add-library-path!) (G2b6d@G2a07@current-precompiled-library-loader G28fb@G282d@load-serialized-library) (set-symbol-value! 'load G4d16@load) (set-symbol-value! 'pre-compile-r6rs-file G4d22@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d1a@eval-top-level) (set-symbol-value! 'int-env-syms G4931@G301b@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2953@G290b@expanded->core) (set-symbol-value! 'trace-printer G4d0e@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d25@c) (condition (G4c61@G4a71@make-non-continuable-violation) (G4c57@G4a58@make-who-condition 'raise) (G4c1b@G49bb@make-message-condition '"returned from non-continuable exception") (G4c4d@G4a3e@make-irritants-condition (list G4d25@c))))) (G4d06@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4d06@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2b68@G29fd@library-path (append (G2b68@G29fd@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4d27@prefix) (G2b69@G29ff@library-extensions (G4d27@prefix '".mosh" (G2b69@G29ff@library-extensions)))) (lambda (G4d29@ext G4d2a@ls) (append (map (lambda (G4d2d@x) (string-append G4d29@ext G4d2d@x)) G4d2a@ls) G4d2a@ls))) ((lambda (G4d2f@args G4d30@port) ((lambda (G4d34@ref) (begin (set! G4d34@ref (lambda (G4d37@rtd G4d38@i G4d39@x) ((lambda (G4d3d@val) (if (symbol? G4d3d@val) (ungensym G4d3d@val) G4d3d@val)) ((record-accessor G4d37@rtd G4d38@i) G4d39@x)))) (with-exception-handler (lambda (G4d35@c) (G4d0a@conditioon-printer G4d35@c (current-error-port))) (lambda () (if (null? G4d2f@args) (G4d0c@repl) (G4d24@load-r6rs-top-level (car G4d2f@args) 'load (cdr G4d2f@args))))))) '#f)) (G4d10@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
