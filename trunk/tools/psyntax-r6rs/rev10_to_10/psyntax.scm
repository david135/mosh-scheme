;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2890@read-annotated G2892@annotation-stripped G2894@annotation? G2896@annotation-source G2898@annotation-expression G289a@scm->fasl G289c@fasl-save G289e@fasl-load G28a0@serialize-library G28a2@load-serialized-library G28a4@make-record-printer G28a6@compile-core G28a8@read-library-source-file G28aa@make-parameter G2944@file-options-spec) (begin (set! G2890@read-annotated read) (set! G2892@annotation-stripped (lambda (G2945@x) (G2898@annotation-expression G2945@x))) (set! G2894@annotation? (lambda (G2947@x) (source-info G2947@x))) (set! G2896@annotation-source (lambda (G2949@x) (source-info G2949@x))) (set! G2898@annotation-expression (lambda (G294b@x) (if (pair? G294b@x) (cons (car G294b@x) (cdr G294b@x)) (display '"line:46\n")))) (set! G289a@scm->fasl (lambda (G294d@filename) (string-append G294d@filename '".fasl"))) (set! G289c@fasl-save (lambda (G294f@filename G2950@obj) (call-with-port (open-file-output-port G294f@filename) (lambda (G2953@port) ((symbol-value 'fasl-write!) G2950@obj G2953@port))))) (set! G289e@fasl-load (lambda (G2955@filename) (call-with-port (open-file-input-port G2955@filename) (symbol-value 'fasl-read!)))) (set! G28a0@serialize-library (lambda (G2957@filename G2958@obj) (begin (format '#t '"serialize-library ~a\n..." G2957@filename) ((lambda (G295b@fasl-file) (begin (if (file-exists? G295b@fasl-file) (delete-file G295b@fasl-file) (void)) (call/cc (lambda (G295e@G295d) (with-exception-handler (lambda (G2960@c) (G295e@G295d (if '#t (begin (format '#t '"Warning:serialize-library failed " G2957@filename) (if (file-exists? G295b@fasl-file) (delete-file G295b@fasl-file) (void)) '#f) (raise G2960@c)))) (lambda () (begin '#f (G289c@fasl-save G295b@fasl-file G2958@obj) (display '"OK\n")))))))) (G289a@scm->fasl G2957@filename))))) (set! G28a2@load-serialized-library (lambda (G2962@filename G2963@obj) ((lambda (G2966@fasl-file) (if (if (file-exists? G2966@fasl-file) (begin '#f ((symbol-value 'file-newer?) G2966@fasl-file G2962@filename)) '#f) ((lambda (G2968@expanded2core) ((lambda (G296a@code) ((lambda (G296c@pivot) ((lambda (G296e@visit) ((lambda (G2970@visit-proc) ((lambda () (begin (set-car! G296c@pivot G2970@visit-proc) ((lambda (G2972@pivot) ((lambda (G2974@invoke) ((lambda () (begin (set-car! G2972@pivot (lambda () (eval-core G2974@invoke))) (apply G2963@obj G296a@code))))) (G2968@expanded2core (car G2972@pivot)))) (cdr G296c@pivot)) '#t)))) (lambda () (eval-core G296e@visit)))) (G2968@expanded2core (car G296c@pivot)))) (cddddr (cddddr G296a@code)))) (G289e@fasl-load G2966@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G289a@scm->fasl G2962@filename)))) (set! G28a4@make-record-printer (lambda (G2976@name G2977@printer) (lambda G297a@x (begin (display '"record printer") (for-each display G297a@x))))) (set! G28a6@compile-core (lambda G297c@x (apply error 'comile-core '"not implementated" G297c@x))) (set! G28a8@read-library-source-file (lambda (G297e@file-name) (with-input-from-file G297e@file-name G2890@read-annotated))) (set! G28aa@make-parameter (lambda G298e ((lambda (G298f) (if (= G298f '1) (apply (lambda (G2980@x) (G28aa@make-parameter G2980@x (lambda (G2982@x) G2982@x))) G298e) (if (= G298f '2) (apply (lambda (G2984@x G2985@fender) ((lambda (G2988@x) (lambda G298c ((lambda (G298d) (if (= G298d '0) (apply (lambda () G2988@x) G298c) (if (= G298d '1) (apply (lambda (G298a@v) (set! G2988@x (G2985@fender G298a@v))) G298c) (error 'apply '"invalid arg count")))) (length G298c)))) (G2985@fender G2984@x))) G298e) (error 'apply '"invalid arg count")))) (length G298e)))) (set! G2944@file-options-spec (lambda (G2990@x) G2990@x)) (begin (set! G29a0@G2944@file-options-spec G2944@file-options-spec) (set! G299f@G28aa@make-parameter G28aa@make-parameter) (set! G299e@G28a8@read-library-source-file G28a8@read-library-source-file) (set! G299d@G28a6@compile-core G28a6@compile-core) (set! G299c@G28a4@make-record-printer G28a4@make-record-printer) (set! G299b@G28a2@load-serialized-library G28a2@load-serialized-library) (set! G299a@G28a0@serialize-library G28a0@serialize-library) (set! G2999@G289e@fasl-load G289e@fasl-load) (set! G2998@G289c@fasl-save G289c@fasl-save) (set! G2997@G289a@scm->fasl G289a@scm->fasl) (set! G2996@G2898@annotation-expression G2898@annotation-expression) (set! G2995@G2896@annotation-source G2896@annotation-source) (set! G2994@G2894@annotation? G2894@annotation?) (set! G2993@G2892@annotation-stripped G2892@annotation-stripped) (set! G2992@G2890@read-annotated G2890@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G29a5@current-primitive-locations G29a7@mutable? G29a9@rewriter G29ab@expanded->core G29ad@compile-core-expr G29af@pretty-print G29b1@compile-core-expr-to-port) (begin (set! G29a5@current-primitive-locations (G299f@G28aa@make-parameter (lambda (G29b2@x) '#f) (lambda (G29b4@p) G29b4@p))) (set! G29a7@mutable? (lambda (G29b6@x) ((lambda (G29b9@simple?) (begin (set! G29b9@simple? (lambda (G29ba@x) ((lambda (G29bc@t) (if G29bc@t G29bc@t ((lambda (G29be@t) (if G29be@t G29be@t ((lambda (G29c0@t) (if G29c0@t G29c0@t ((lambda (G29c2@t) (if G29c2@t G29c2@t ((lambda (G29c4@t) (if G29c4@t G29c4@t ((lambda (G29c6@t) (if G29c6@t G29c6@t (begin '#f (number? G29ba@x)))) (bytevector? G29ba@x)))) (string? G29ba@x)))) (boolean? G29ba@x)))) (symbol? G29ba@x)))) (char? G29ba@x)))) (null? G29ba@x)))) (not (G29b9@simple? G29b6@x)))) '#f))) (set! G29a9@rewriter (lambda (G29c8@quote-hack?) ((lambda (G29cb@f) (begin (set! G29cb@f (lambda (G29cc@x) (if (pair? G29cc@x) ((lambda (G29ce@t) (if (memv G29ce@t '(quote)) (if (if G29c8@quote-hack? (begin '#f (G29a7@mutable? (cadr G29cc@x))) '#f) ((lambda (G29d0@g) (begin (set-symbol-value! G29d0@g (cadr G29cc@x)) G29d0@g)) (gensym)) G29cc@x) (if (memv G29ce@t '(case-lambda)) (cons 'case-lambda (map (lambda (G29d2@x) (cons (car G29d2@x) (map G29cb@f (cdr G29d2@x)))) (cdr G29cc@x))) (if (memv G29ce@t '(lambda)) (cons* 'lambda (cadr G29cc@x) (map G29cb@f (cddr G29cc@x))) (if (memv G29ce@t '(letrec)) ((lambda (G29d4@bindings G29d5@body*) ((lambda (G29d8@lhs* G29d9@rhs*) (cons* 'letrec (map list G29d8@lhs* (map G29cb@f G29d9@rhs*)) (map G29cb@f G29d5@body*))) (map car G29d4@bindings) (map cadr G29d4@bindings))) (cadr G29cc@x) (cddr G29cc@x)) (if (memv G29ce@t '(letrec*)) ((lambda (G29dc@bindings G29dd@body*) ((lambda (G29e0@lhs* G29e1@rhs*) (cons* 'letrec* (map list G29e0@lhs* (map G29cb@f G29e1@rhs*)) (map G29cb@f G29dd@body*))) (map car G29dc@bindings) (map cadr G29dc@bindings))) (cadr G29cc@x) (cddr G29cc@x)) (if (memv G29ce@t '(library-letrec*)) ((lambda (G29e4@name G29e5@x) ((lambda (G29e8@bindings G29e9@body*) ((lambda (G29ec@lhs* G29ed@lhs** G29ee@rhs*) (cons* 'library-letrec* G29e4@name (map list G29ec@lhs* G29ed@lhs** (map G29cb@f G29ee@rhs*)) (map G29cb@f G29e9@body*))) (map car G29e8@bindings) (map cadr G29e8@bindings) (map caddr G29e8@bindings))) (cadr G29e5@x) (cddr G29e5@x))) (cadr G29cc@x) (cdr G29cc@x)) (if (memv G29ce@t '(begin)) (cons 'begin (map G29cb@f (cdr G29cc@x))) (if (memv G29ce@t '(set!)) (list 'set! (cadr G29cc@x) (G29cb@f (caddr G29cc@x))) (if (memv G29ce@t '(primitive)) ((lambda (G29f2@op) ((lambda (G29f4@t) (if G29f4@t ((lambda (G29f6@loc) G29f6@loc) G29f4@t) G29f2@op)) ((G29a5@current-primitive-locations) G29f2@op))) (cadr G29cc@x)) (if (memv G29ce@t '(define)) G29cc@x (if (list? G29cc@x) (map G29cb@f G29cc@x) (error 'rewrite '"invalid form ~s ~s" G29cc@x (list? G29cc@x)))))))))))))) (car G29cc@x)) G29cc@x))) G29cb@f)) '#f))) (set! G29ab@expanded->core (lambda (G29f8@x) ((G29a9@rewriter '#t) G29f8@x))) (set! G29ad@compile-core-expr (lambda (G29fa@x) ((G29a9@rewriter '#f) G29fa@x))) (set! G29af@pretty-print write) (set! G29b1@compile-core-expr-to-port (lambda (G29fc@x G29fd@p) (G29af@pretty-print ((G29a9@rewriter '#f) G29fc@x) G29fd@p))) (begin (set! G2a06@G29b1@compile-core-expr-to-port G29b1@compile-core-expr-to-port) (set! G2a05@G29af@pretty-print G29af@pretty-print) (set! G2a04@G29ad@compile-core-expr G29ad@compile-core-expr) (set! G2a03@G29ab@expanded->core G29ab@expanded->core) (set! G2a02@G29a9@rewriter G29a9@rewriter) (set! G2a01@G29a7@mutable? G29a7@mutable?) (set! G2a00@G29a5@current-primitive-locations G29a5@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a60@make-collection G2a62@current-library-collection G2a68@G2a63 G2a6a@G2a65 G2a6c@G2a64 G2a71@library? G2a73@make-library G2a75@library-id G2a77@library-name G2a79@library-version G2a7b@library-imp* G2a7d@library-vis* G2a7f@library-inv* G2a81@library-subst G2a83@library-env G2a85@library-visit-state G2a87@library-invoke-state G2a89@library-visit-code G2a8b@library-invoke-code G2a8d@library-visible? G2a8f@library-source-file-name G2a91@set-library-id! G2a93@set-library-name! G2a95@set-library-version! G2a97@set-library-imp*! G2a99@set-library-vis*! G2a9b@set-library-inv*! G2a9d@set-library-subst! G2a9f@set-library-env! G2aa1@set-library-visit-state! G2aa3@set-library-invoke-state! G2aa5@set-library-visit-code! G2aa7@set-library-invoke-code! G2aa9@set-library-visible?! G2aab@set-library-source-file-name! G2aad@rp G2aaf@find-dependencies G2ab1@find-library-by G2ab3@library-path G2ab5@library-extensions G2ab7@library-name->file-name G2ab9@file-locator G2abb@serialize-all G2abd@current-precompiled-library-loader G2abf@try-load-from-file G2ac1@library-loader G2ac3@current-library-expander G2ac5@external-pending-libraries G2ac7@find-external-library G2ac9@find-library-by-name G2acb@library-exists? G2acd@find-library-by-spec/die G2acf@label->binding-table G2ad1@install-library-record G2ad3@install-library G2ad5@imported-label->binding G2ad7@invoke-library G2ad9@visit-library G2adb@invoke-library-by-spec G2add@installed-libraries G2adf@library-spec) (begin (set! G2a60@make-collection (lambda () ((lambda (G2ae0@set) ((lambda (G2ae3@set-cons) (begin (set! G2ae3@set-cons (lambda (G2ae8@x G2ae9@ls) (if (memq G2ae8@x G2ae9@ls) G2ae9@ls (cons G2ae8@x G2ae9@ls)))) (lambda G2ae6 ((lambda (G2ae7) (if (= G2ae7 '0) (apply (lambda () G2ae0@set) G2ae6) (if (= G2ae7 '1) (apply (lambda (G2ae4@x) (set! G2ae0@set (G2ae3@set-cons G2ae4@x G2ae0@set))) G2ae6) (error 'apply '"invalid arg count")))) (length G2ae6))))) '#f)) '()))) (set! G2a62@current-library-collection (G299f@G28aa@make-parameter (G2a60@make-collection) (lambda (G2aec@x) (begin (if (not (procedure? G2aec@x)) (assertion-violation 'current-library-collection '"not a procedure" G2aec@x) (void)) G2aec@x)))) (set! G2a68@G2a63 (make-record-type-descriptor 'library '#f 'G2a66 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a6a@G2a65 '#f) (set! G2a6c@G2a64 (make-record-constructor-descriptor G2a68@G2a63 '#f G2a6a@G2a65)) (set! G2a71@library? (record-predicate G2a68@G2a63)) (set! G2a73@make-library (record-constructor G2a6c@G2a64)) (set! G2a75@library-id (record-accessor G2a68@G2a63 '0)) (set! G2a77@library-name (record-accessor G2a68@G2a63 '1)) (set! G2a79@library-version (record-accessor G2a68@G2a63 '2)) (set! G2a7b@library-imp* (record-accessor G2a68@G2a63 '3)) (set! G2a7d@library-vis* (record-accessor G2a68@G2a63 '4)) (set! G2a7f@library-inv* (record-accessor G2a68@G2a63 '5)) (set! G2a81@library-subst (record-accessor G2a68@G2a63 '6)) (set! G2a83@library-env (record-accessor G2a68@G2a63 '7)) (set! G2a85@library-visit-state (record-accessor G2a68@G2a63 '8)) (set! G2a87@library-invoke-state (record-accessor G2a68@G2a63 '9)) (set! G2a89@library-visit-code (record-accessor G2a68@G2a63 '10)) (set! G2a8b@library-invoke-code (record-accessor G2a68@G2a63 '11)) (set! G2a8d@library-visible? (record-accessor G2a68@G2a63 '12)) (set! G2a8f@library-source-file-name (record-accessor G2a68@G2a63 '13)) (set! G2a91@set-library-id! (record-mutator G2a68@G2a63 '0)) (set! G2a93@set-library-name! (record-mutator G2a68@G2a63 '1)) (set! G2a95@set-library-version! (record-mutator G2a68@G2a63 '2)) (set! G2a97@set-library-imp*! (record-mutator G2a68@G2a63 '3)) (set! G2a99@set-library-vis*! (record-mutator G2a68@G2a63 '4)) (set! G2a9b@set-library-inv*! (record-mutator G2a68@G2a63 '5)) (set! G2a9d@set-library-subst! (record-mutator G2a68@G2a63 '6)) (set! G2a9f@set-library-env! (record-mutator G2a68@G2a63 '7)) (set! G2aa1@set-library-visit-state! (record-mutator G2a68@G2a63 '8)) (set! G2aa3@set-library-invoke-state! (record-mutator G2a68@G2a63 '9)) (set! G2aa5@set-library-visit-code! (record-mutator G2a68@G2a63 '10)) (set! G2aa7@set-library-invoke-code! (record-mutator G2a68@G2a63 '11)) (set! G2aa9@set-library-visible?! (record-mutator G2a68@G2a63 '12)) (set! G2aab@set-library-source-file-name! (record-mutator G2a68@G2a63 '13)) (set! G2aad@rp (G299c@G28a4@make-record-printer 'library (lambda (G2aee@x G2aef@p G2af0@wr) (begin (if (not (G2a71@library? G2aee@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a79@library-version G2aee@x)) (G2a77@library-name G2aee@x) (append (G2a77@library-name G2aee@x) (list (G2a79@library-version G2aee@x))))) G2aef@p))))) (set! G2aaf@find-dependencies (lambda (G2af4@ls) (if (null? G2af4@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2ab1@find-library-by (lambda (G2af6@pred) ((letrec ((G2af8@f (lambda (G2afa@ls) (if (null? G2afa@ls) '#f (if (G2af6@pred (car G2afa@ls)) (car G2afa@ls) (G2af8@f (cdr G2afa@ls))))))) G2af8@f) ((G2a62@current-library-collection))))) (set! G2ab3@library-path (G299f@G28aa@make-parameter '(".") (lambda (G2afc@x) (if (if (list? G2afc@x) (begin '#f (for-all string? G2afc@x)) '#f) (map (lambda (G2afe@x) G2afe@x) G2afc@x) (assertion-violation 'library-path '"not a list of strings" G2afc@x))))) (set! G2ab5@library-extensions (G299f@G28aa@make-parameter '(".sls" ".ss" ".scm") (lambda (G2b00@x) (if (if (list? G2b00@x) (begin '#f (for-all string? G2b00@x)) '#f) (map (lambda (G2b02@x) G2b02@x) G2b00@x) (assertion-violation 'library-extensions '"not a list of strings" G2b00@x))))) (set! G2ab7@library-name->file-name (lambda (G2b04@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2b08@G2b06 G2b09@G2b07) ((lambda (G2b0c@extract G2b0d@p) ((lambda (G2b11@display-hex) (begin (set! G2b11@display-hex (lambda (G2b20@n) (if (<= '0 G2b20@n '9) (display G2b20@n G2b0d@p) (display (integer->char (+ (char->integer '#\A) (- G2b20@n '10))) G2b0d@p)))) (begin ((letrec ((G2b12@f (lambda (G2b14@ls) (if (not (null? G2b14@ls)) (begin (display '"/" G2b0d@p) (for-each (lambda (G2b16@c) (if ((lambda (G2b18@t) (if G2b18@t G2b18@t ((lambda (G2b1a@t) (if G2b1a@t G2b1a@t ((lambda (G2b1c@t) (if G2b1c@t G2b1c@t (begin '#f (memv G2b16@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2b16@c '#\9)))) (char<=? '#\A G2b16@c '#\Z)))) (char<=? '#\a G2b16@c '#\z)) (display G2b16@c G2b0d@p) (begin (display '"%" G2b0d@p) ((lambda (G2b1e@n) (begin (G2b11@display-hex (quotient G2b1e@n '16)) (G2b11@display-hex (remainder G2b1e@n '16)))) (char->integer G2b16@c))))) (string->list (symbol->string (car G2b14@ls)))) (G2b12@f (cdr G2b14@ls))) (void))))) G2b12@f) G2b04@x) (G2b0c@extract)))) '#f)) G2b09@G2b07 G2b08@G2b06))))) (set! G2ab9@file-locator (G299f@G28aa@make-parameter (lambda (G2b22@x) ((lambda (G2b24@str) ((letrec ((G2b26@f (lambda (G2b28@ls G2b29@exts G2b2a@failed-list) (if (null? G2b28@ls) ((lambda () ((lambda (G2b36@G2b31 G2b38@G2b33 G2b3a@G2b32 G2b3f@G2b30 G2b41@make-library-resolution-condition G2b43@G2b2e G2b45@G2b2f G2b47@library-resolution-condition? G2b49@condition-library G2b4b@condition-files) (begin (set! G2b36@G2b31 (make-record-type-descriptor '&library-resolution &condition-rtd 'G2b34 '#f '#f '#((immutable library) (immutable files)))) (set! G2b38@G2b33 '#f) (set! G2b3a@G2b32 (make-record-constructor-descriptor G2b36@G2b31 &condition-rcd G2b38@G2b33)) (set! G2b3f@G2b30 (record-predicate G2b36@G2b31)) (set! G2b41@make-library-resolution-condition (record-constructor G2b3a@G2b32)) (set! G2b43@G2b2e (record-accessor G2b36@G2b31 '0)) (set! G2b45@G2b2f (record-accessor G2b36@G2b31 '1)) (set! G2b47@library-resolution-condition? (condition-predicate G2b36@G2b31)) (set! G2b49@condition-library (condition-accessor G2b36@G2b31 G2b43@G2b2e)) (set! G2b4b@condition-files (condition-accessor G2b36@G2b31 G2b45@G2b2f)) (raise (condition (G4c4c@G4b3a@make-error) (G4c66@G4b90@make-who-condition 'expander) (G4c38@G4afa@make-message-condition '"cannot locate library in library-path") (G2b41@make-library-resolution-condition G2b22@x (reverse G2b2a@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2b29@exts) (G2b26@f (cdr G2b28@ls) (G2ab5@library-extensions) G2b2a@failed-list) ((lambda (G2b4c@name) (if (file-exists? G2b4c@name) G2b4c@name (G2b26@f G2b28@ls (cdr G2b29@exts) (cons G2b4c@name G2b2a@failed-list)))) (string-append (car G2b28@ls) G2b24@str (car G2b29@exts)))))))) G2b26@f) (G2ab3@library-path) (G2ab5@library-extensions) '())) (G2ab7@library-name->file-name G2b22@x))) (lambda (G2b4e@f) (if (procedure? G2b4e@f) G2b4e@f (assertion-violation 'file-locator '"not a procedure" G2b4e@f))))) (set! G2abb@serialize-all (lambda (G2b50@serialize G2b51@compile) ((lambda (G2b55@library-desc) (begin (set! G2b55@library-desc (lambda (G2b58@x) (list (G2a75@library-id G2b58@x) (G2a77@library-name G2b58@x)))) (for-each (lambda (G2b56@x) (if (G2a8f@library-source-file-name G2b56@x) (G2b50@serialize (G2a8f@library-source-file-name G2b56@x) (list (G2a75@library-id G2b56@x) (G2a77@library-name G2b56@x) (G2a79@library-version G2b56@x) (map G2b55@library-desc (G2a7b@library-imp* G2b56@x)) (map G2b55@library-desc (G2a7d@library-vis* G2b56@x)) (map G2b55@library-desc (G2a7f@library-inv* G2b56@x)) (G2a81@library-subst G2b56@x) (G2a83@library-env G2b56@x) (G2b51@compile (G2a89@library-visit-code G2b56@x)) (G2b51@compile (G2a8b@library-invoke-code G2b56@x)) (G2a8d@library-visible? G2b56@x))) (void))) ((G2a62@current-library-collection))))) '#f))) (set! G2abd@current-precompiled-library-loader (G299f@G28aa@make-parameter (lambda (G2b5a@filename G2b5b@sk) '#f))) (set! G2abf@try-load-from-file (lambda (G2b5e@filename) ((G2abd@current-precompiled-library-loader) G2b5e@filename (lambda G2b84 ((lambda (G2b85) (if (= G2b85 '11) (apply (lambda (G2b60@id G2b61@name G2b62@ver G2b63@imp* G2b64@vis* G2b65@inv* G2b66@exp-subst G2b67@exp-env G2b68@visit-proc G2b69@invoke-proc G2b6a@visible?) ((letrec ((G2b76@f (lambda (G2b78@deps) (if (null? G2b78@deps) (begin (G2ad3@install-library G2b60@id G2b61@name G2b62@ver G2b63@imp* G2b64@vis* G2b65@inv* G2b66@exp-subst G2b67@exp-env G2b68@visit-proc G2b69@invoke-proc '#f '#f G2b6a@visible? '#f) '#t) ((lambda (G2b7a@d) ((lambda (G2b7c@label G2b7d@dname) ((lambda (G2b80@l) (if (if (G2a71@library? G2b80@l) (begin '#f (eq? G2b7c@label (G2a75@library-id G2b80@l))) '#f) (G2b76@f (cdr G2b78@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b61@name G2b7d@dname G2b5e@filename G2b80@l G2b7c@label (G2a75@library-id G2b80@l)) '#f))) (G2ac9@find-library-by-name G2b7d@dname))) (car G2b7a@d) (cadr G2b7a@d))) (car G2b78@deps)))))) G2b76@f) (append G2b63@imp* G2b64@vis* G2b65@inv*))) G2b84) (if (>= G2b85 '0) (apply (lambda G2b82@others '#f) G2b84) (error 'apply '"invalid arg count")))) (length G2b84)))))) (set! G2ac1@library-loader (G299f@G28aa@make-parameter (lambda (G2b86@x) ((lambda (G2b88@file-name) (if (not G2b88@file-name) (assertion-violation '#f '"cannot file library" G2b86@x) ((lambda (G2b8a@t) (if G2b8a@t G2b8a@t (begin '#f ((G2ac3@current-library-expander) (G299e@G28a8@read-library-source-file G2b88@file-name) G2b88@file-name (lambda (G2b8c@name) (if (not (equal? G2b8c@name G2b86@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b90@G2b8e G2b91@G2b8f) ((lambda (G2b94@e G2b95@p) (begin (display '"expected to find library " G2b95@p) (write G2b86@x G2b95@p) (display '" in file " G2b95@p) (display G2b88@file-name G2b95@p) (display '", found " G2b95@p) (write G2b8c@name G2b95@p) (display '" instead" G2b95@p) (G2b94@e))) G2b91@G2b8f G2b90@G2b8e)))) (void))))))) (G2abf@try-load-from-file G2b88@file-name)))) ((G2ab9@file-locator) G2b86@x))) (lambda (G2b98@f) (if (procedure? G2b98@f) G2b98@f (assertion-violation 'library-locator '"not a procedure" G2b98@f))))) (set! G2ac3@current-library-expander (G299f@G28aa@make-parameter (lambda (G2b9a@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b9c@f) (if (procedure? G2b9c@f) G2b9c@f (assertion-violation 'library-expander '"not a procedure" G2b9c@f))))) (set! G2ac5@external-pending-libraries (G299f@G28aa@make-parameter '())) (set! G2ac7@find-external-library (lambda (G2b9e@name) (begin (if (member G2b9e@name (G2ac5@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b9e@name) (void)) ((lambda (G2ba2@G2ba0@external-pending-libraries G2ba3@G2ba1@external-pending-libraries) ((lambda (G2ba6@swap) (dynamic-wind G2ba6@swap (lambda () (begin ((G2ac1@library-loader) G2b9e@name) ((lambda (G2ba8@t) (if G2ba8@t G2ba8@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b9e@name)))) (G2ab1@find-library-by (lambda (G2baa@x) (equal? (G2a77@library-name G2baa@x) G2b9e@name)))))) G2ba6@swap)) (lambda () ((lambda (G2bac@t) (begin (G2ba2@G2ba0@external-pending-libraries G2ba3@G2ba1@external-pending-libraries) (set! G2ba3@G2ba1@external-pending-libraries G2bac@t))) (G2ba2@G2ba0@external-pending-libraries))))) G2ac5@external-pending-libraries (cons G2b9e@name (G2ac5@external-pending-libraries)))))) (set! G2ac9@find-library-by-name (lambda (G2bae@name) ((lambda (G2bb0@t) (if G2bb0@t G2bb0@t (begin '#f (G2ac7@find-external-library G2bae@name)))) (G2ab1@find-library-by (lambda (G2bb2@x) (equal? (G2a77@library-name G2bb2@x) G2bae@name)))))) (set! G2acb@library-exists? (lambda (G2bb4@name) (if (G2ab1@find-library-by (lambda (G2bb6@x) (equal? (G2a77@library-name G2bb6@x) G2bb4@name))) (begin '#f '#t) '#f))) (set! G2acd@find-library-by-spec/die (lambda (G2bb8@spec) ((lambda (G2bba@id) ((lambda (G2bbc@t) (if G2bbc@t G2bbc@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2bb8@spec)))) (G2ab1@find-library-by (lambda (G2bbe@x) (eq? G2bba@id (G2a75@library-id G2bbe@x)))))) (car G2bb8@spec)))) (set! G2acf@label->binding-table (make-eq-hashtable)) (set! G2ad1@install-library-record (lambda (G2bc0@lib) (begin ((lambda (G2bc2@exp-env) (for-each (lambda (G2bc4@x) ((lambda (G2bc6@label G2bc7@binding) ((lambda (G2bca@binding) (hashtable-set! G2acf@label->binding-table G2bc6@label G2bca@binding)) ((lambda (G2bcc@t) (if (memv G2bcc@t '(global)) (cons 'global (cons G2bc0@lib (cdr G2bc7@binding))) (if (memv G2bcc@t '(global-macro)) (cons 'global-macro (cons G2bc0@lib (cdr G2bc7@binding))) (if (memv G2bcc@t '(global-macro!)) (cons 'global-macro! (cons G2bc0@lib (cdr G2bc7@binding))) G2bc7@binding)))) (car G2bc7@binding)))) (car G2bc4@x) (cdr G2bc4@x))) G2bc2@exp-env)) (G2a83@library-env G2bc0@lib)) ((G2a62@current-library-collection) G2bc0@lib)))) (set! G2ad3@install-library (lambda (G2bce@id G2bcf@name G2bd0@ver G2bd1@imp* G2bd2@vis* G2bd3@inv* G2bd4@exp-subst G2bd5@exp-env G2bd6@visit-proc G2bd7@invoke-proc G2bd8@visit-code G2bd9@invoke-code G2bda@visible? G2bdb@source-file-name) ((lambda (G2bea@imp-lib* G2beb@vis-lib* G2bec@inv-lib*) (begin (if (not (if (symbol? G2bce@id) (if (list? G2bcf@name) (begin '#f (list? G2bd0@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2bce@id G2bcf@name G2bd0@ver) (void)) (if (G2acb@library-exists? G2bcf@name) (assertion-violation 'install-library '"library is already installed" G2bcf@name) (void)) ((lambda (G2bf0@lib) (G2ad1@install-library-record G2bf0@lib)) (G2a73@make-library G2bce@id G2bcf@name G2bd0@ver G2bea@imp-lib* G2beb@vis-lib* G2bec@inv-lib* G2bd4@exp-subst G2bd5@exp-env G2bd6@visit-proc G2bd7@invoke-proc G2bd8@visit-code G2bd9@invoke-code G2bda@visible? G2bdb@source-file-name)))) (map G2acd@find-library-by-spec/die G2bd1@imp*) (map G2acd@find-library-by-spec/die G2bd2@vis*) (map G2acd@find-library-by-spec/die G2bd3@inv*)))) (set! G2ad5@imported-label->binding (lambda (G2bf2@lab) (hashtable-ref G2acf@label->binding-table G2bf2@lab '#f))) (set! G2ad7@invoke-library (lambda (G2bf4@lib) ((lambda (G2bf6@invoke) (if (procedure? G2bf6@invoke) (begin (G2aa3@set-library-invoke-state! G2bf4@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2bf4@lib))) (for-each G2ad7@invoke-library (G2a7f@library-inv* G2bf4@lib)) (G2aa3@set-library-invoke-state! G2bf4@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2bf4@lib))) (G2bf6@invoke) (G2aa3@set-library-invoke-state! G2bf4@lib '#t)) (void))) (G2a87@library-invoke-state G2bf4@lib)))) (set! G2ad9@visit-library (lambda (G2bf8@lib) ((lambda (G2bfa@visit) (if (procedure? G2bfa@visit) (begin (G2aa1@set-library-visit-state! G2bf8@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bf8@lib))) (for-each G2ad7@invoke-library (G2a7d@library-vis* G2bf8@lib)) (G2aa1@set-library-visit-state! G2bf8@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bf8@lib))) (G2bfa@visit) (G2aa1@set-library-visit-state! G2bf8@lib '#t)) (void))) (G2a85@library-visit-state G2bf8@lib)))) (set! G2adb@invoke-library-by-spec (lambda (G2bfc@spec) (G2ad7@invoke-library (G2acd@find-library-by-spec/die G2bfc@spec)))) (set! G2add@installed-libraries (lambda G2c06 ((lambda (G2c07) (if (= G2c07 '1) (apply (lambda (G2bfe@all?) ((letrec ((G2c00@f (lambda (G2c02@ls) (if (null? G2c02@ls) '() (if ((lambda (G2c04@t) (if G2c04@t G2c04@t (begin '#f (G2a8d@library-visible? (car G2c02@ls))))) G2bfe@all?) (cons (car G2c02@ls) (G2c00@f (cdr G2c02@ls))) (G2c00@f (cdr G2c02@ls))))))) G2c00@f) ((G2a62@current-library-collection)))) G2c06) (if (= G2c07 '0) (apply (lambda () (G2add@installed-libraries '#f)) G2c06) (error 'apply '"invalid arg count")))) (length G2c06)))) (set! G2adf@library-spec (lambda (G2c08@x) (begin (if (not (G2a71@library? G2c08@x)) (assertion-violation 'library-spec '"not a library" G2c08@x) (void)) (list (G2a75@library-id G2c08@x) (G2a77@library-name G2c08@x) (G2a79@library-version G2c08@x))))) (begin (set! G2c46@G2adf@library-spec G2adf@library-spec) (set! G2c45@G2add@installed-libraries G2add@installed-libraries) (set! G2c44@G2adb@invoke-library-by-spec G2adb@invoke-library-by-spec) (set! G2c43@G2ad9@visit-library G2ad9@visit-library) (set! G2c42@G2ad7@invoke-library G2ad7@invoke-library) (set! G2c41@G2ad5@imported-label->binding G2ad5@imported-label->binding) (set! G2c40@G2ad3@install-library G2ad3@install-library) (set! G2c3f@G2ad1@install-library-record G2ad1@install-library-record) (set! G2c3e@G2acf@label->binding-table G2acf@label->binding-table) (set! G2c3d@G2acd@find-library-by-spec/die G2acd@find-library-by-spec/die) (set! G2c3c@G2acb@library-exists? G2acb@library-exists?) (set! G2c3b@G2ac9@find-library-by-name G2ac9@find-library-by-name) (set! G2c3a@G2ac7@find-external-library G2ac7@find-external-library) (set! G2c39@G2ac5@external-pending-libraries G2ac5@external-pending-libraries) (set! G2c38@G2ac3@current-library-expander G2ac3@current-library-expander) (set! G2c37@G2ac1@library-loader G2ac1@library-loader) (set! G2c36@G2abf@try-load-from-file G2abf@try-load-from-file) (set! G2c35@G2abd@current-precompiled-library-loader G2abd@current-precompiled-library-loader) (set! G2c34@G2abb@serialize-all G2abb@serialize-all) (set! G2c33@G2ab9@file-locator G2ab9@file-locator) (set! G2c32@G2ab7@library-name->file-name G2ab7@library-name->file-name) (set! G2c31@G2ab5@library-extensions G2ab5@library-extensions) (set! G2c30@G2ab3@library-path G2ab3@library-path) (set! G2c2f@G2ab1@find-library-by G2ab1@find-library-by) (set! G2c2e@G2aaf@find-dependencies G2aaf@find-dependencies) (set! G2c2d@G2aad@rp G2aad@rp) (set! G2c2c@G2aab@set-library-source-file-name! G2aab@set-library-source-file-name!) (set! G2c2b@G2aa9@set-library-visible?! G2aa9@set-library-visible?!) (set! G2c2a@G2aa7@set-library-invoke-code! G2aa7@set-library-invoke-code!) (set! G2c29@G2aa5@set-library-visit-code! G2aa5@set-library-visit-code!) (set! G2c28@G2aa3@set-library-invoke-state! G2aa3@set-library-invoke-state!) (set! G2c27@G2aa1@set-library-visit-state! G2aa1@set-library-visit-state!) (set! G2c26@G2a9f@set-library-env! G2a9f@set-library-env!) (set! G2c25@G2a9d@set-library-subst! G2a9d@set-library-subst!) (set! G2c24@G2a9b@set-library-inv*! G2a9b@set-library-inv*!) (set! G2c23@G2a99@set-library-vis*! G2a99@set-library-vis*!) (set! G2c22@G2a97@set-library-imp*! G2a97@set-library-imp*!) (set! G2c21@G2a95@set-library-version! G2a95@set-library-version!) (set! G2c20@G2a93@set-library-name! G2a93@set-library-name!) (set! G2c1f@G2a91@set-library-id! G2a91@set-library-id!) (set! G2c1e@G2a8f@library-source-file-name G2a8f@library-source-file-name) (set! G2c1d@G2a8d@library-visible? G2a8d@library-visible?) (set! G2c1c@G2a8b@library-invoke-code G2a8b@library-invoke-code) (set! G2c1b@G2a89@library-visit-code G2a89@library-visit-code) (set! G2c1a@G2a87@library-invoke-state G2a87@library-invoke-state) (set! G2c19@G2a85@library-visit-state G2a85@library-visit-state) (set! G2c18@G2a83@library-env G2a83@library-env) (set! G2c17@G2a81@library-subst G2a81@library-subst) (set! G2c16@G2a7f@library-inv* G2a7f@library-inv*) (set! G2c15@G2a7d@library-vis* G2a7d@library-vis*) (set! G2c14@G2a7b@library-imp* G2a7b@library-imp*) (set! G2c13@G2a79@library-version G2a79@library-version) (set! G2c12@G2a77@library-name G2a77@library-name) (set! G2c11@G2a75@library-id G2a75@library-id) (set! G2c10@G2a73@make-library G2a73@make-library) (set! G2c0f@G2a71@library? G2a71@library?) (set! G2c0e@G2a6c@G2a64 G2a6c@G2a64) (set! G2c0d@G2a6a@G2a65 G2a6a@G2a65) (set! G2c0c@G2a68@G2a63 G2a68@G2a63) (set! G2c0b@G2a62@current-library-collection G2a62@current-library-collection) (set! G2c0a@G2a60@make-collection G2a60@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2c49@build-global-define G2ccd@build-lambda G2ccf@build-case-lambda G2cd1@build-let G2d19@build-sequence G2d1b@build-void G2d1d@build-letrec G2d1f@build-letrec* G2d21@build-library-letrec* G2d23@build-receive) (begin (set! G2c49@build-global-define (lambda (G2d24@x) (G2d1b@build-void))) (set! G2ccd@build-lambda (lambda (G2d26@ae G2d27@vars G2d28@exp) (list 'lambda G2d27@vars G2d28@exp))) (set! G2ccf@build-case-lambda (lambda (G2d2c@ae G2d2d@vars* G2d2e@exp*) ((lambda (G2d33@build-error G2d35@build-pred G2d37@build-apply G2d39@expand-case-lambda) (begin (set! G2d33@build-error (lambda (G2d68@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2d35@build-pred (lambda (G2d52@ae G2d53@n G2d54@vars) (call-with-values (lambda () ((letrec ((G2d5a@f (lambda (G2d5c@vars G2d5d@count) (if (pair? G2d5c@vars) (G2d5a@f (cdr G2d5c@vars) (+ G2d5d@count '1)) (if (null? G2d5c@vars) (values G2d5d@count '=) (values G2d5d@count '>=)))))) G2d5a@f) G2d54@vars '0)) (lambda (G2d60@G2d58 G2d61@G2d59) ((lambda (G2d64@pred G2d65@count) (list (list 'primitive G2d64@pred) G2d53@n (list 'quote G2d65@count))) G2d61@G2d59 G2d60@G2d58))))) (set! G2d37@build-apply (lambda (G2d4a@ae G2d4b@g G2d4c@vars G2d4d@exp) (list '(primitive apply) (G2ccd@build-lambda G2d4a@ae G2d4c@vars G2d4d@exp) G2d4b@g))) (set! G2d39@expand-case-lambda (lambda (G2d3a@ae G2d3b@vars G2d3c@exp*) ((lambda (G2d40@g G2d41@n) (list 'lambda G2d40@g (G2cd1@build-let G2d3a@ae (list G2d41@n) (list (list '(primitive length) G2d40@g)) ((letrec ((G2d44@f (lambda (G2d46@vars* G2d47@exp*) (if (null? G2d46@vars*) (G2d33@build-error G2d3a@ae) (list 'if (G2d35@build-pred G2d3a@ae G2d41@n (car G2d46@vars*)) (G2d37@build-apply G2d3a@ae G2d40@g (car G2d46@vars*) (car G2d47@exp*)) (G2d44@f (cdr G2d46@vars*) (cdr G2d47@exp*))))))) G2d44@f) G2d2d@vars* G2d3c@exp*)))) (gensym) (gensym)))) (if (= (length G2d2e@exp*) '1) (G2ccd@build-lambda G2d2c@ae (car G2d2d@vars*) (car G2d2e@exp*)) (G2d39@expand-case-lambda G2d2c@ae G2d2d@vars* G2d2e@exp*)))) '#f '#f '#f '#f))) (set! G2cd1@build-let (lambda (G2d6a@ae G2d6b@lhs* G2d6c@rhs* G2d6d@body) (cons (G2ccd@build-lambda G2d6a@ae G2d6b@lhs* G2d6d@body) G2d6c@rhs*))) (set! G2d19@build-sequence (lambda (G2d72@ae G2d73@exps) ((letrec ((G2d76@loop (lambda (G2d78@exps) (if (null? (cdr G2d78@exps)) (car G2d78@exps) (if (equal? (car G2d78@exps) (G2d1b@build-void)) (G2d76@loop (cdr G2d78@exps)) (cons 'begin G2d78@exps)))))) G2d76@loop) G2d73@exps))) (set! G2d1b@build-void (lambda () '((primitive void)))) (set! G2d1d@build-letrec (lambda (G2d7a@ae G2d7b@vars G2d7c@val-exps G2d7d@body-exp) (if (null? G2d7b@vars) G2d7d@body-exp (list 'letrec (map list G2d7b@vars G2d7c@val-exps) G2d7d@body-exp)))) (set! G2d1f@build-letrec* (lambda (G2d82@ae G2d83@vars G2d84@val-exps G2d85@body-exp) (if (null? G2d83@vars) G2d85@body-exp (G2cd1@build-let G2d82@ae G2d83@vars (map (lambda (G2d8a@x) (list 'quote '#f)) G2d83@vars) (G2d19@build-sequence G2d82@ae (append (map (lambda (G2d8c@lhs G2d8d@rhs) (list 'set! G2d8c@lhs G2d8d@rhs)) G2d83@vars G2d84@val-exps) (list G2d85@body-exp))))))) (set! G2d21@build-library-letrec* (lambda (G2d90@ae G2d91@name G2d92@vars G2d93@locs G2d94@val-exps G2d95@body-exp) (list 'library-letrec* G2d91@name (map list G2d92@vars G2d93@locs G2d94@val-exps) G2d95@body-exp))) (set! G2d23@build-receive (lambda (G2d9c@ae G2d9d@vars G2d9e@producer G2d9f@body*) (begin (display '"************** in ") (cons 'receive (cons G2d9d@vars (cons G2d9e@producer G2d9f@body*)))))) (begin (set! G2dad@G2d23@build-receive G2d23@build-receive) (set! G2dac@G2d21@build-library-letrec* G2d21@build-library-letrec*) (set! G2dab@G2d1f@build-letrec* G2d1f@build-letrec*) (set! G2daa@G2d1d@build-letrec G2d1d@build-letrec) (set! G2da9@G2d1b@build-void G2d1b@build-void) (set! G2da8@G2d19@build-sequence G2d19@build-sequence) (set! G2da7@G2cd1@build-let G2cd1@build-let) (set! G2da6@G2ccf@build-case-lambda G2ccf@build-case-lambda) (set! G2da5@G2ccd@build-lambda G2ccd@build-lambda) (set! G2da4@G2c49@build-global-define G2c49@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2dba@set-cons G2dbc@set-union G2dc1@top-mark* G2dc3@top-marked? G2dc5@gen-lexical G2dc7@gen-global G2dc9@gen-label G2dcb@gen-top-level-label G2dcd@gen-define-label+loc G2dcf@gen-define-label G2dd5@G2dd0 G2dd7@G2dd2 G2dd9@G2dd1 G2dde@rib? G2de0@make-rib G2de2@rib-sym* G2de4@rib-mark** G2de6@rib-label* G2de8@rib-sealed/freq G2dea@rib-cache G2dec@set-rib-sym*! G2dee@set-rib-mark**! G2df0@set-rib-label*! G2df2@set-rib-sealed/freq! G2df4@set-rib-cache! G2df6@make-empty-rib G2df8@make-cache-rib G2dfa@find-label G2dfc@extend-rib! G2dfe@extend-rib/nc! G2e00@make-rib-map G2e02@seal-rib! G2e04@unseal-rib! G2e06@make-full-rib G2e0c@G2e07 G2e0e@G2e09 G2e10@G2e08 G2e15@stx? G2e17@make-stx G2e19@stx-expr G2e1b@stx-mark* G2e1d@stx-subst* G2e1f@stx-ae* G2e21@set-stx-expr! G2e23@set-stx-mark*! G2e25@set-stx-subst*! G2e27@set-stx-ae*! G2e29@rp G2e2b@datum->stx G2e2d@gen-mark G2e2f@anti-mark G2e31@anti-mark? G2e33@join-wraps G2e35@mkstx G2e37@add-mark G2e39@add-subst G2e3b@syntax-kind? G2e3d@syntax-vector->list G2e3f@syntax-pair? G2e41@syntax-vector? G2e43@syntax-null? G2e45@syntax-list? G2e47@syntax-car G2e49@syntax-cdr G2e4b@syntax->list G2e4d@id? G2e4f@id->sym G2e51@same-marks? G2e53@bound-id=? G2e55@free-id=? G2e57@valid-bound-ids? G2e59@distinct-bound-ids? G2e5b@bound-id-member? G2e5d@self-evaluating? G2e5f@strip-annotations G2e61@strip G2e63@stx->datum G2e65@same-marks*? G2e67@id->label G2e69@id->real-label G2e6b@label->binding G2e6d@make-binding G2e6f@binding-type G2e71@binding-value G2e73@raise-unbound-error G2e75@syntax-type G2e8c@sanitize-binding G2e8e@make-variable-transformer G2e90@variable-transformer? G2e92@variable-transformer-procedure G2e94@make-eval-transformer G3018@parse-define G301a@parse-define-syntax G301c@scheme-stx-hashtable G301e@scheme-stx G3020@lexical-var G3022@lexical-mutable? G3024@set-lexical-mutable! G3026@add-lexical G3028@add-lexicals G302a@letrec-helper G302c@letrec-transformer G302e@letrec*-transformer G3030@fluid-let-syntax-transformer G3032@type-descriptor-transformer G3034@record-type-descriptor-transformer G3036@record-constructor-descriptor-transformer G3038@when-macro G303a@unless-macro G303c@if-transformer G303e@case-macro G3040@quote-transformer G3042@case-lambda-transformer G3044@lambda-transformer G3046@bless G3048@with-syntax-macro G304a@invalid-fmls-error G304c@let-macro G304e@let-values-macro G3050@let*-values-macro G3052@trace-lambda-macro G3054@trace-define-macro G3056@trace-define-syntax-macro G3058@trace-let/rec-syntax G305a@trace-let-syntax-macro G305c@trace-letrec-syntax-macro G305e@guard-macro G3060@define-enumeration-macro G3062@time-macro G3064@delay-macro G3066@assert-macro G3068@endianness-macro G306a@identifier-syntax-macro G306c@do-macro G306e@let*-macro G3070@or-macro G3072@and-macro G3074@cond-macro G3076@do-include G3078@include-macro G307a@include-into-macro G307c@syntax-rules-macro G307e@quasiquote-macro G3080@quasisyntax-macro G3082@define-struct-macro G3084@define-record-type-macro G3086@define-condition-type-macro G3088@incorrect-usage-macro G308a@parameterize-macro G308c@foreign-call-transformer G308e@convert-pattern G3090@syntax-dispatch G3092@ellipsis? G3094@underscore? G3096@verify-literals G3098@syntax-case-transformer G309a@ellipsis-map G309c@syntax-transformer G309e@core-macro-transformer G30a0@file-options-macro G30a2@symbol-macro G30a4@macro-transformer G30a6@local-macro-transformer G30a8@do-macro-call G30aa@chi-macro G30ac@chi-local-macro G30ae@chi-global-macro G30b0@chi-expr* G30b2@chi-application G30b4@chi-expr G30b6@chi-set! G30b8@verify-formals G30ba@chi-lambda-clause G30bc@chi-lambda-clause* G30be@chi-defun G30c0@chi-rhs G30c2@expand-interaction-rhs*/init* G30c4@chi-rhs* G30c6@find-bound=? G30c8@find-dups G30ca@chi-internal G30cc@parse-module G30d2@G30cd G30d4@G30cf G30d6@G30ce G30db@module-interface? G30dd@make-module-interface G30df@module-interface-first-mark G30e1@module-interface-exp-id-vec G30e3@module-interface-exp-lab-vec G30e5@set-module-interface-first-mark! G30e7@set-module-interface-exp-id-vec! G30e9@set-module-interface-exp-lab-vec! G30eb@module-interface-exp-id* G30ed@chi-internal-module G30ef@chi-body* G30f1@expand-transformer G30f3@parse-exports G30f5@parse-library-name G30f7@parse-library G30f9@parse-import-spec* G30fb@make-top-rib G30fd@make-collector G30ff@inv-collector G3101@vis-collector G3103@imp-collector G3105@chi-library-internal G3107@chi-interaction-expr G3109@library-body-expander G310b@core-library-expander G310d@parse-top-level-program G310f@top-level-expander G3115@G3110 G3117@G3112 G3119@G3111 G311e@env? G3120@make-env G3122@env-names G3124@env-labels G3126@env-itc G3128@set-env-names! G312a@set-env-labels! G312c@set-env-itc! G312e@rp G3134@G312f G3136@G3131 G3138@G3130 G313d@interaction-env? G313f@make-interaction-env G3141@interaction-env-rib G3143@interaction-env-r G3145@interaction-env-locs G3147@set-interaction-env-rib! G3149@set-interaction-env-r! G314b@set-interaction-env-locs! G314d@rp G314f@interaction-environment-symbols G3151@environment-bindings G3153@parse-binding G3155@environment? G3157@environment-symbols G3159@environment G315b@null-environment G315d@scheme-report-environment G315f@expand G3161@eval G3163@library-expander G3165@boot-library-expand G3167@rev-map-append G3169@build-exports G316b@make-export-subst G316d@make-export-env/macros G316f@generate-temporaries G3171@free-identifier=? G3173@bound-identifier=? G3175@make-source-condition G3177@extract-position-condition G3179@expression-position G317b@assertion-error G317d@syntax-error G317f@extract-trace G3181@syntax-violation* G3183@syntax-violation G3185@identifier? G3187@datum->syntax G3189@syntax->datum G318b@compile-r6rs-top-level G318d@pre-compile-r6rs-top-level G318f@interaction-environment G3191@top-level-context) (begin (set! G2dba@set-cons (lambda (G3192@x G3193@ls) (if (memq G3192@x G3193@ls) G3193@ls (cons G3192@x G3193@ls)))) (set! G2dbc@set-union (lambda (G3196@ls1 G3197@ls2) (if (null? G3196@ls1) G3197@ls2 (if (memq (car G3196@ls1) G3197@ls2) (G2dbc@set-union (cdr G3196@ls1) G3197@ls2) (cons (car G3196@ls1) (G2dbc@set-union (cdr G3196@ls1) G3197@ls2)))))) (set! G2dc1@top-mark* '(top)) (set! G2dc3@top-marked? (lambda (G319a@m*) (memq 'top G319a@m*))) (set! G2dc5@gen-lexical (lambda (G319c@sym) (if (symbol? G319c@sym) (gensym G319c@sym) (if (G2e15@stx? G319c@sym) (G2dc5@gen-lexical (G2e4f@id->sym G319c@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G319c@sym))))) (set! G2dc7@gen-global (lambda (G319e@x) (G2dc5@gen-lexical G319e@x))) (set! G2dc9@gen-label (lambda (G31a0@_) (gensym))) (set! G2dcb@gen-top-level-label (lambda (G31a2@id G31a3@rib) ((lambda (G31a7@find) (begin (set! G31a7@find (lambda (G31b2@sym G31b3@mark* G31b4@sym* G31b5@mark** G31b6@label*) (if (pair? G31b4@sym*) (begin '#f (if (if (eq? G31b2@sym (car G31b4@sym*)) (begin '#f (G2e51@same-marks? G31b3@mark* (car G31b5@mark**))) '#f) (car G31b6@label*) (G31a7@find G31b2@sym G31b3@mark* (cdr G31b4@sym*) (cdr G31b5@mark**) (cdr G31b6@label*)))) '#f))) ((lambda (G31a8@sym G31a9@mark*) ((lambda (G31ac@sym*) ((lambda (G31ae@t) (if G31ae@t ((lambda (G31b0@label) (if (G2c41@G2ad5@imported-label->binding G31b0@label) (gensym) G31b0@label)) G31ae@t) (gensym))) (if (memq G31a8@sym (G2de2@rib-sym* G31a3@rib)) (begin '#f (G31a7@find G31a8@sym G31a9@mark* G31ac@sym* (G2de4@rib-mark** G31a3@rib) (G2de6@rib-label* G31a3@rib))) '#f))) (G2de2@rib-sym* G31a3@rib))) (G2e4f@id->sym G31a2@id) (G2e1b@stx-mark* G31a2@id)))) '#f))) (set! G2dcd@gen-define-label+loc (lambda (G31bc@id G31bd@rib) ((lambda (G31c0@t) (if G31c0@t ((lambda (G31c2@env) ((lambda (G31c4@label G31c5@locs) (values G31c4@label ((lambda (G31c8@t) (if G31c8@t (cdr G31c8@t) ((lambda (G31ca@loc) (begin (G314b@set-interaction-env-locs! G31c2@env (cons (cons G31c4@label G31ca@loc) G31c5@locs)) G31ca@loc)) (G2dc5@gen-lexical G31bc@id)))) (assq G31c4@label G31c5@locs)))) (G2dcb@gen-top-level-label G31bc@id G31bd@rib) (G3145@interaction-env-locs G31c2@env))) G31c0@t) (values (gensym) (G2dc5@gen-lexical G31bc@id)))) (G3191@top-level-context)))) (set! G2dcf@gen-define-label (lambda (G31cc@id G31cd@rib) (if (G3191@top-level-context) (G2dcb@gen-top-level-label G31cc@id G31cd@rib) (gensym)))) (set! G2dd5@G2dd0 (make-record-type-descriptor 'rib '#f 'G2dd3 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2dd7@G2dd2 '#f) (set! G2dd9@G2dd1 (make-record-constructor-descriptor G2dd5@G2dd0 '#f G2dd7@G2dd2)) (set! G2dde@rib? (record-predicate G2dd5@G2dd0)) (set! G2de0@make-rib (record-constructor G2dd9@G2dd1)) (set! G2de2@rib-sym* (record-accessor G2dd5@G2dd0 '0)) (set! G2de4@rib-mark** (record-accessor G2dd5@G2dd0 '1)) (set! G2de6@rib-label* (record-accessor G2dd5@G2dd0 '2)) (set! G2de8@rib-sealed/freq (record-accessor G2dd5@G2dd0 '3)) (set! G2dea@rib-cache (record-accessor G2dd5@G2dd0 '4)) (set! G2dec@set-rib-sym*! (record-mutator G2dd5@G2dd0 '0)) (set! G2dee@set-rib-mark**! (record-mutator G2dd5@G2dd0 '1)) (set! G2df0@set-rib-label*! (record-mutator G2dd5@G2dd0 '2)) (set! G2df2@set-rib-sealed/freq! (record-mutator G2dd5@G2dd0 '3)) (set! G2df4@set-rib-cache! (record-mutator G2dd5@G2dd0 '4)) (set! G2df6@make-empty-rib (lambda () (G2de0@make-rib '() '() '() '#f '#f))) (set! G2df8@make-cache-rib (lambda () (G2de0@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2dfa@find-label (lambda (G31d0@rib G31d1@sym G31d2@mark*) ((lambda (G31d6@ht) (if G31d6@ht (begin '#f ((lambda (G31d8@cv) ((lambda (G31da@t) (if G31da@t (cdr G31da@t) '#f)) (if G31d8@cv (begin '#f (assp (lambda (G31dc@m) (G2e51@same-marks? G31d2@mark* G31dc@m)) G31d8@cv)) '#f))) (hashtable-ref G31d6@ht G31d1@sym '#f))) '#f)) (G2dea@rib-cache G31d0@rib)))) (set! G2dfc@extend-rib! (lambda (G31de@rib G31df@id G31e0@label) ((lambda (G31e5@find) (begin (set! G31e5@find (lambda (G31f6@sym G31f7@mark* G31f8@sym* G31f9@mark** G31fa@label*) (if (pair? G31f8@sym*) (begin '#f (if (if (eq? G31f6@sym (car G31f8@sym*)) (begin '#f (G2e51@same-marks? G31f7@mark* (car G31f9@mark**))) '#f) G31fa@label* (G31e5@find G31f6@sym G31f7@mark* (cdr G31f8@sym*) (cdr G31f9@mark**) (cdr G31fa@label*)))) '#f))) (begin (if (G2de8@rib-sealed/freq G31de@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G31de@rib) (void)) ((lambda (G31e6@sym G31e7@mark*) ((lambda (G31ea@sym*) ((lambda (G31ec@t) (if G31ec@t ((lambda (G31ee@p) (if (not (eq? G31e0@label G31ee@p)) (G3183@syntax-violation '#f '"multiple definitions of identifier" G31df@id) (void))) G31ec@t) ((lambda (G31f0@t) (if G31f0@t ((lambda (G31f2@p) (if (not (eq? G31e0@label (car G31f2@p))) (if (G3191@top-level-context) (set-car! G31f2@p G31e0@label) (G3183@syntax-violation '#f '"multiple definitions of identifier" G31df@id)) (void))) G31f0@t) (begin (if (G2dea@rib-cache G31de@rib) (hashtable-update! (G2dea@rib-cache G31de@rib) G31e6@sym (lambda (G31f4@e) (cons (cons G31e7@mark* G31e0@label) G31f4@e)) '()) (void)) (G2dec@set-rib-sym*! G31de@rib (cons G31e6@sym G31ea@sym*)) (G2dee@set-rib-mark**! G31de@rib (cons G31e7@mark* (G2de4@rib-mark** G31de@rib))) (G2df0@set-rib-label*! G31de@rib (cons G31e0@label (G2de6@rib-label* G31de@rib)))))) (if (memq G31e6@sym (G2de2@rib-sym* G31de@rib)) (begin '#f (G31e5@find G31e6@sym G31e7@mark* G31ea@sym* (G2de4@rib-mark** G31de@rib) (G2de6@rib-label* G31de@rib))) '#f)))) (G2dfa@find-label G31de@rib G31e6@sym G31e7@mark*))) (G2de2@rib-sym* G31de@rib))) (G2e4f@id->sym G31df@id) (G2e1b@stx-mark* G31df@id))))) '#f))) (set! G2dfe@extend-rib/nc! (lambda (G3200@rib G3201@id G3202@label) ((lambda (G3206@sym G3207@mark*) ((lambda (G320a@sym*) (begin (if (G2dea@rib-cache G3200@rib) (hashtable-update! (G2dea@rib-cache G3200@rib) G3206@sym (lambda (G320c@e) (cons (cons G3207@mark* G3202@label) G320c@e)) '()) (void)) (G2dec@set-rib-sym*! G3200@rib (cons G3206@sym G320a@sym*)) (G2dee@set-rib-mark**! G3200@rib (cons G3207@mark* (G2de4@rib-mark** G3200@rib))) (G2df0@set-rib-label*! G3200@rib (cons G3202@label (G2de6@rib-label* G3200@rib))))) (G2de2@rib-sym* G3200@rib))) (G2e4f@id->sym G3201@id) (G2e1b@stx-mark* G3201@id)))) (set! G2e00@make-rib-map (lambda (G320e@sym*) ((lambda (G3210@ht) ((letrec ((G3212@f (lambda (G3214@i G3215@sym*) (if (null? G3215@sym*) G3210@ht (begin (hashtable-update! G3210@ht (car G3215@sym*) (lambda (G3218@x) (cons G3214@i G3218@x)) '()) (G3212@f (+ G3214@i '1) (cdr G3215@sym*))))))) G3212@f) '0 G320e@sym*)) (make-eq-hashtable)))) (set! G2e02@seal-rib! (lambda (G321a@rib) ((lambda (G321c@sym*) (if (not (null? G321c@sym*)) (begin (G2dec@set-rib-sym*! G321a@rib (list->vector G321c@sym*)) (G2dee@set-rib-mark**! G321a@rib (list->vector (G2de4@rib-mark** G321a@rib))) (G2df0@set-rib-label*! G321a@rib (list->vector (G2de6@rib-label* G321a@rib))) (G2df2@set-rib-sealed/freq! G321a@rib (G2e00@make-rib-map G321c@sym*))) (void))) (G2de2@rib-sym* G321a@rib)))) (set! G2e04@unseal-rib! (lambda (G321e@rib) (if (G2de8@rib-sealed/freq G321e@rib) (begin (G2df2@set-rib-sealed/freq! G321e@rib '#f) (G2dec@set-rib-sym*! G321e@rib (vector->list (G2de2@rib-sym* G321e@rib))) (G2dee@set-rib-mark**! G321e@rib (vector->list (G2de4@rib-mark** G321e@rib))) (G2df0@set-rib-label*! G321e@rib (vector->list (G2de6@rib-label* G321e@rib)))) (void)))) (set! G2e06@make-full-rib (lambda (G3220@id* G3221@label*) ((lambda (G3224@r) (begin (G2e02@seal-rib! G3224@r) G3224@r)) (G2de0@make-rib (map G2e4f@id->sym G3220@id*) (map G2e1b@stx-mark* G3220@id*) G3221@label* '#f '#f)))) (set! G2e0c@G2e07 (make-record-type-descriptor 'stx '#f 'G2e0a '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2e0e@G2e09 '#f) (set! G2e10@G2e08 (make-record-constructor-descriptor G2e0c@G2e07 '#f G2e0e@G2e09)) (set! G2e15@stx? (record-predicate G2e0c@G2e07)) (set! G2e17@make-stx (record-constructor G2e10@G2e08)) (set! G2e19@stx-expr (record-accessor G2e0c@G2e07 '0)) (set! G2e1b@stx-mark* (record-accessor G2e0c@G2e07 '1)) (set! G2e1d@stx-subst* (record-accessor G2e0c@G2e07 '2)) (set! G2e1f@stx-ae* (record-accessor G2e0c@G2e07 '3)) (set! G2e21@set-stx-expr! (record-mutator G2e0c@G2e07 '0)) (set! G2e23@set-stx-mark*! (record-mutator G2e0c@G2e07 '1)) (set! G2e25@set-stx-subst*! (record-mutator G2e0c@G2e07 '2)) (set! G2e27@set-stx-ae*! (record-mutator G2e0c@G2e07 '3)) (set! G2e29@rp (G299c@G28a4@make-record-printer 'stx (lambda (G3226@x G3227@p G3228@wr) (begin (display '"#<syntax " G3227@p) (write (G2e63@stx->datum G3226@x) G3227@p) ((lambda (G322c@expr) (if (G2994@G2894@annotation? G322c@expr) ((lambda (G322e@src) (if (pair? G322e@src) (begin (display '" [" G3227@p) (display (cdr G322e@src) G3227@p) (display '" of " G3227@p) (display (car G322e@src) G3227@p) (display '"]" G3227@p)) (void))) (G2995@G2896@annotation-source G322c@expr)) (void))) (G2e19@stx-expr G3226@x)) (display '">" G3227@p))))) (set! G2e2b@datum->stx (lambda (G3230@id G3231@datum) (G2e17@make-stx G3231@datum (G2e1b@stx-mark* G3230@id) (G2e1d@stx-subst* G3230@id) (G2e1f@stx-ae* G3230@id)))) (set! G2e2d@gen-mark (lambda () (string '#\m))) (set! G2e2f@anti-mark '#f) (set! G2e31@anti-mark? not) (set! G2e33@join-wraps (lambda (G3234@m1* G3235@s1* G3236@ae1* G3237@e) ((lambda (G323d@cancel) (begin (set! G323d@cancel (lambda (G3244@ls1 G3245@ls2) ((letrec ((G3248@f (lambda (G324a@x G324b@ls1) (if (null? G324b@ls1) (cdr G3245@ls2) (cons G324a@x (G3248@f (car G324b@ls1) (cdr G324b@ls1))))))) G3248@f) (car G3244@ls1) (cdr G3244@ls1)))) ((lambda (G323e@m2* G323f@s2* G3240@ae2*) (if (if (not (null? G3234@m1*)) (if (not (null? G323e@m2*)) (begin '#f (G2e31@anti-mark? (car G323e@m2*))) '#f) '#f) (values (G323d@cancel G3234@m1* G323e@m2*) (G323d@cancel G3235@s1* G323f@s2*) (G323d@cancel G3236@ae1* G3240@ae2*)) (values (append G3234@m1* G323e@m2*) (append G3235@s1* G323f@s2*) (append G3236@ae1* G3240@ae2*)))) (G2e1b@stx-mark* G3237@e) (G2e1d@stx-subst* G3237@e) (G2e1f@stx-ae* G3237@e)))) '#f))) (set! G2e35@mkstx (lambda (G324e@e G324f@m* G3250@s* G3251@ae*) (if (if (G2e15@stx? G324e@e) (begin '#f (not (G2dc3@top-marked? G324f@m*))) '#f) (call-with-values (lambda () (G2e33@join-wraps G324f@m* G3250@s* G3251@ae* G324e@e)) (lambda (G3259@G3256 G325a@G3257 G325b@G3258) ((lambda (G325f@ae* G3260@s* G3261@m*) (G2e17@make-stx (G2e19@stx-expr G324e@e) G3261@m* G3260@s* G325f@ae*)) G325b@G3258 G325a@G3257 G3259@G3256))) (G2e17@make-stx G324e@e G324f@m* G3250@s* G3251@ae*)))) (set! G2e37@add-mark (lambda (G3265@m G3266@e G3267@ae) (G2e35@mkstx G3266@e (list G3265@m) '(shift) (list G3267@ae)))) (set! G2e39@add-subst (lambda (G326b@subst G326c@e) (G2e35@mkstx G326c@e '() (list G326b@subst) '()))) (set! G2e3b@syntax-kind? (lambda (G326f@x G3270@p?) (if (G2e15@stx? G326f@x) (G2e3b@syntax-kind? (G2e19@stx-expr G326f@x) G3270@p?) (if (G2994@G2894@annotation? G326f@x) (G2e3b@syntax-kind? (G2996@G2898@annotation-expression G326f@x) G3270@p?) (G3270@p? G326f@x))))) (set! G2e3d@syntax-vector->list (lambda (G3273@x) (if (G2e15@stx? G3273@x) ((lambda (G3275@ls G3276@m* G3277@s* G3278@ae*) (map (lambda (G327d@x) (G2e35@mkstx G327d@x G3276@m* G3277@s* G3278@ae*)) G3275@ls)) (G2e3d@syntax-vector->list (G2e19@stx-expr G3273@x)) (G2e1b@stx-mark* G3273@x) (G2e1d@stx-subst* G3273@x) (G2e1f@stx-ae* G3273@x)) (if (G2994@G2894@annotation? G3273@x) (G2e3d@syntax-vector->list (G2996@G2898@annotation-expression G3273@x)) (if (vector? G3273@x) (vector->list G3273@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3273@x)))))) (set! G2e3f@syntax-pair? (lambda (G327f@x) (G2e3b@syntax-kind? G327f@x pair?))) (set! G2e41@syntax-vector? (lambda (G3281@x) (G2e3b@syntax-kind? G3281@x vector?))) (set! G2e43@syntax-null? (lambda (G3283@x) (G2e3b@syntax-kind? G3283@x null?))) (set! G2e45@syntax-list? (lambda (G3285@x) ((lambda (G3287@t) (if G3287@t G3287@t (begin '#f (if (G2e3f@syntax-pair? G3285@x) (begin '#f (G2e45@syntax-list? (G2e49@syntax-cdr G3285@x))) '#f)))) (G2e43@syntax-null? G3285@x)))) (set! G2e47@syntax-car (lambda (G3289@x) (if (G2e15@stx? G3289@x) (G2e35@mkstx (G2e47@syntax-car (G2e19@stx-expr G3289@x)) (G2e1b@stx-mark* G3289@x) (G2e1d@stx-subst* G3289@x) (G2e1f@stx-ae* G3289@x)) (if (G2994@G2894@annotation? G3289@x) (G2e47@syntax-car (G2996@G2898@annotation-expression G3289@x)) (if (pair? G3289@x) (car G3289@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3289@x)))))) (set! G2e49@syntax-cdr (lambda (G328b@x) (if (G2e15@stx? G328b@x) (G2e35@mkstx (G2e49@syntax-cdr (G2e19@stx-expr G328b@x)) (G2e1b@stx-mark* G328b@x) (G2e1d@stx-subst* G328b@x) (G2e1f@stx-ae* G328b@x)) (if (G2994@G2894@annotation? G328b@x) (G2e49@syntax-cdr (G2996@G2898@annotation-expression G328b@x)) (if (pair? G328b@x) (cdr G328b@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G328b@x)))))) (set! G2e4b@syntax->list (lambda (G328d@x) (if (G2e3f@syntax-pair? G328d@x) (cons (G2e47@syntax-car G328d@x) (G2e4b@syntax->list (G2e49@syntax-cdr G328d@x))) (if (G2e43@syntax-null? G328d@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G328d@x))))) (set! G2e4d@id? (lambda (G328f@x) (if (G2e15@stx? G328f@x) (begin '#f ((lambda (G3291@expr) (symbol? (if (G2994@G2894@annotation? G3291@expr) (G2993@G2892@annotation-stripped G3291@expr) G3291@expr))) (G2e19@stx-expr G328f@x))) '#f))) (set! G2e4f@id->sym (lambda (G3293@x) (begin (if (not (G2e15@stx? G3293@x)) (error 'id->sym '"BUG in ikarus: not an id" G3293@x) (void)) ((lambda (G3295@expr) ((lambda (G3297@sym) (if (symbol? G3297@sym) G3297@sym (error 'id->sym '"BUG in ikarus: not an id" G3293@x))) (if (G2994@G2894@annotation? G3295@expr) (G2993@G2892@annotation-stripped G3295@expr) G3295@expr))) (G2e19@stx-expr G3293@x))))) (set! G2e51@same-marks? (lambda (G3299@x G329a@y) ((lambda (G329d@t) (if G329d@t G329d@t (begin '#f (if (pair? G3299@x) (if (pair? G329a@y) (if (eq? (car G3299@x) (car G329a@y)) (begin '#f (G2e51@same-marks? (cdr G3299@x) (cdr G329a@y))) '#f) '#f) '#f)))) (if (null? G3299@x) (begin '#f (null? G329a@y)) '#f)))) (set! G2e53@bound-id=? (lambda (G329f@x G32a0@y) (if (eq? (G2e4f@id->sym G329f@x) (G2e4f@id->sym G32a0@y)) (begin '#f (G2e51@same-marks? (G2e1b@stx-mark* G329f@x) (G2e1b@stx-mark* G32a0@y))) '#f))) (set! G2e55@free-id=? (lambda (G32a3@i G32a4@j) ((lambda (G32a7@t0 G32a8@t1) (if ((lambda (G32ab@t) (if G32ab@t G32ab@t (begin '#f G32a8@t1))) G32a7@t0) (eq? G32a7@t0 G32a8@t1) (eq? (G2e4f@id->sym G32a3@i) (G2e4f@id->sym G32a4@j)))) (G2e69@id->real-label G32a3@i) (G2e69@id->real-label G32a4@j)))) (set! G2e57@valid-bound-ids? (lambda (G32ad@id*) (if (for-all G2e4d@id? G32ad@id*) (begin '#f (G2e59@distinct-bound-ids? G32ad@id*)) '#f))) (set! G2e59@distinct-bound-ids? (lambda (G32af@id*) ((lambda (G32b1@t) (if G32b1@t G32b1@t (begin '#f (if (not (G2e5b@bound-id-member? (car G32af@id*) (cdr G32af@id*))) (begin '#f (G2e59@distinct-bound-ids? (cdr G32af@id*))) '#f)))) (null? G32af@id*)))) (set! G2e5b@bound-id-member? (lambda (G32b3@id G32b4@id*) (if (pair? G32b4@id*) (begin '#f ((lambda (G32b7@t) (if G32b7@t G32b7@t (begin '#f (G2e5b@bound-id-member? G32b3@id (cdr G32b4@id*))))) (G2e53@bound-id=? G32b3@id (car G32b4@id*)))) '#f))) (set! G2e5d@self-evaluating? (lambda (G32b9@x) ((lambda (G32bb@t) (if G32bb@t G32bb@t ((lambda (G32bd@t) (if G32bd@t G32bd@t ((lambda (G32bf@t) (if G32bf@t G32bf@t ((lambda (G32c1@t) (if G32c1@t G32c1@t ((lambda (G32c3@t) (if G32c3@t G32c3@t (begin '#f (bytevector? G32b9@x)))) (regexp? G32b9@x)))) (boolean? G32b9@x)))) (char? G32b9@x)))) (string? G32b9@x)))) (number? G32b9@x)))) (set! G2e5f@strip-annotations (lambda (G32c5@x) (if (pair? G32c5@x) (cons (G2e5f@strip-annotations (car G32c5@x)) (G2e5f@strip-annotations (cdr G32c5@x))) (if (vector? G32c5@x) (vector-map G2e5f@strip-annotations G32c5@x) (if (G2994@G2894@annotation? G32c5@x) (G2993@G2892@annotation-stripped G32c5@x) G32c5@x))))) (set! G2e61@strip (lambda (G32c7@x G32c8@m*) (if (G2dc3@top-marked? G32c8@m*) (if ((lambda (G32cb@t) (if G32cb@t G32cb@t ((lambda (G32cd@t) (if G32cd@t G32cd@t (begin '#f (if (vector? G32c7@x) (if (> (vector-length G32c7@x) '0) (begin '#f (G2994@G2894@annotation? (vector-ref G32c7@x '0))) '#f) '#f)))) (if (pair? G32c7@x) (begin '#f (G2994@G2894@annotation? (car G32c7@x))) '#f)))) (G2994@G2894@annotation? G32c7@x)) (G2e5f@strip-annotations G32c7@x) G32c7@x) ((letrec ((G32cf@f (lambda (G32d1@x) (if (G2e15@stx? G32d1@x) (G2e61@strip (G2e19@stx-expr G32d1@x) (G2e1b@stx-mark* G32d1@x)) (if (G2994@G2894@annotation? G32d1@x) (G2993@G2892@annotation-stripped G32d1@x) (if (pair? G32d1@x) ((lambda (G32d3@a G32d4@d) (if (if (eq? G32d3@a (car G32d1@x)) (begin '#f (eq? G32d4@d (cdr G32d1@x))) '#f) G32d1@x (cons G32d3@a G32d4@d))) (G32cf@f (car G32d1@x)) (G32cf@f (cdr G32d1@x))) (if (vector? G32d1@x) ((lambda (G32d7@old) ((lambda (G32d9@new) (if (for-all eq? G32d7@old G32d9@new) G32d1@x (list->vector G32d9@new))) (map G32cf@f G32d7@old))) (vector->list G32d1@x)) G32d1@x))))))) G32cf@f) G32c7@x)))) (set! G2e63@stx->datum (lambda (G32db@x) (G2e61@strip G32db@x '()))) (set! G2e65@same-marks*? (lambda (G32dd@mark* G32de@mark** G32df@si) (if (null? G32df@si) '#f (if (G2e51@same-marks? G32dd@mark* (vector-ref G32de@mark** (car G32df@si))) (car G32df@si) (G2e65@same-marks*? G32dd@mark* G32de@mark** (cdr G32df@si)))))) (set! G2e67@id->label (lambda (G32e3@id) ((lambda (G32e5@t) (if G32e5@t G32e5@t (begin '#f ((lambda (G32e7@t) (if G32e7@t ((lambda (G32e9@env) ((lambda (G32eb@rib) (call-with-values (lambda () (G2dcd@gen-define-label+loc G32e3@id G32eb@rib)) (lambda (G32ef@G32ed G32f0@G32ee) ((lambda (G32f3@loc_ G32f4@lab) (begin (G2dfc@extend-rib! G32eb@rib G32e3@id G32f4@lab) G32f4@lab)) G32f0@G32ee G32ef@G32ed)))) (G3141@interaction-env-rib G32e9@env))) G32e7@t) '#f)) (G3191@top-level-context))))) (G2e69@id->real-label G32e3@id)))) (set! G2e69@id->real-label (lambda (G32f7@id) ((lambda (G32f9@sym) ((letrec ((G32fb@search (lambda (G32fd@subst* G32fe@mark*) (if (null? G32fd@subst*) '#f (if (eq? (car G32fd@subst*) 'shift) (G32fb@search (cdr G32fd@subst*) (cdr G32fe@mark*)) ((lambda (G3301@rib) ((lambda (G3303@t) (if G3303@t ((lambda (G3305@ht) ((lambda (G3307@si) ((lambda (G3309@i) (if G3309@i (vector-ref (G2de6@rib-label* G3301@rib) G3309@i) (G32fb@search (cdr G32fd@subst*) G32fe@mark*))) (if G3307@si (begin '#f (G2e65@same-marks*? G32fe@mark* (G2de4@rib-mark** G3301@rib) (reverse G3307@si))) '#f))) (hashtable-ref G3305@ht G32f9@sym '#f))) G3303@t) ((lambda (G330b@t) (if G330b@t G330b@t (begin '#f ((letrec ((G330d@f (lambda (G330f@sym* G3310@mark** G3311@label*) (if (null? G330f@sym*) (G32fb@search (cdr G32fd@subst*) G32fe@mark*) (if (if (eq? (car G330f@sym*) G32f9@sym) (begin '#f (G2e51@same-marks? (car G3310@mark**) G32fe@mark*)) '#f) (car G3311@label*) (G330d@f (cdr G330f@sym*) (cdr G3310@mark**) (cdr G3311@label*))))))) G330d@f) (G2de2@rib-sym* G3301@rib) (G2de4@rib-mark** G3301@rib) (G2de6@rib-label* G3301@rib))))) (G2dfa@find-label G3301@rib G32f9@sym G32fe@mark*)))) (G2de8@rib-sealed/freq G3301@rib))) (car G32fd@subst*))))))) G32fb@search) (G2e1d@stx-subst* G32f7@id) (G2e1b@stx-mark* G32f7@id))) (G2e4f@id->sym G32f7@id)))) (set! G2e6b@label->binding (lambda (G3315@x G3316@r) ((lambda (G3319@t) (if G3319@t ((lambda (G331b@b) (if (if (pair? G331b@b) (begin '#f (eq? (car G331b@b) '$core-rtd)) '#f) (cons '$rtd (map G3046@bless (cdr G331b@b))) (if (if (pair? G331b@b) (begin '#f (eq? (car G331b@b) 'global-rtd)) '#f) ((lambda (G331d@lib G331e@loc) (cons '$rtd (symbol-value G331e@loc))) (cadr G331b@b) (cddr G331b@b)) G331b@b))) G3319@t) ((lambda (G3321@t) (if G3321@t (cdr G3321@t) ((lambda (G3323@t) (if G3323@t ((lambda (G3325@env) ((lambda (G3327@t) (if G3327@t ((lambda (G3329@p) (cons* 'lexical (cdr G3329@p) '#f)) G3327@t) '(displaced-lexical . #f))) (assq G3315@x (G3145@interaction-env-locs G3325@env)))) G3323@t) '(displaced-lexical . #f))) (G3191@top-level-context)))) (assq G3315@x G3316@r)))) (G2c41@G2ad5@imported-label->binding G3315@x)))) (set! G2e6d@make-binding cons) (set! G2e6f@binding-type car) (set! G2e71@binding-value cdr) (set! G2e73@raise-unbound-error (lambda (G332b@id) (G3181@syntax-violation* '#f '"unbound identifier" G332b@id (G4c8a@G4c02@make-undefined-violation)))) (set! G2e75@syntax-type (lambda (G332d@e G332e@r) (if (G2e4d@id? G332d@e) ((lambda (G3331@id) ((lambda (G3333@label) ((lambda (G3335@b) ((lambda (G3337@type) ((lambda () (begin (if (not G3333@label) (G2e73@raise-unbound-error G3331@id) (void)) ((lambda (G3339@t) (if (memv G3339@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G3337@type (G2e71@binding-value G3335@b) G3331@id) (values 'other '#f '#f))) G3337@type))))) (G2e6f@binding-type G3335@b))) (G2e6b@label->binding G3333@label G332e@r))) (G2e67@id->label G3331@id))) G332d@e) (if (G2e3f@syntax-pair? G332d@e) ((lambda (G333b@id) (if (G2e4d@id? G333b@id) ((lambda (G333d@label) ((lambda (G333f@b) ((lambda (G3341@type) ((lambda () (begin (if (not G333d@label) (G2e73@raise-unbound-error G333b@id) (void)) ((lambda (G3343@t) (if (memv G3343@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G3341@type (G2e71@binding-value G333f@b) G333b@id) (values 'call '#f '#f))) G3341@type))))) (G2e6f@binding-type G333f@b))) (G2e6b@label->binding G333d@label G332e@r))) (G2e67@id->label G333b@id)) (values 'call '#f '#f))) (G2e47@syntax-car G332d@e)) ((lambda (G3345@d) (if (G2e5d@self-evaluating? G3345@d) (values 'constant G3345@d '#f) (values 'other '#f '#f))) (G2e63@stx->datum G332d@e)))))) (set! G2e8c@sanitize-binding (lambda (G3347@x G3348@src) (if (procedure? G3347@x) (cons* 'local-macro G3347@x G3348@src) (if (if (pair? G3347@x) (if (eq? (car G3347@x) 'macro!) (begin '#f (procedure? (cdr G3347@x))) '#f) '#f) (cons* 'local-macro! (cdr G3347@x) G3348@src) (if (if (pair? G3347@x) (begin '#f (eq? (car G3347@x) '$rtd)) '#f) G3347@x (assertion-violation 'expand '"invalid transformer" G3347@x)))))) (set! G2e8e@make-variable-transformer (lambda (G334b@x) (if (procedure? G334b@x) (cons 'macro! G334b@x) (assertion-violation 'make-variable-transformer '"not a procedure" G334b@x)))) (set! G2e90@variable-transformer? (lambda (G334d@x) (if (pair? G334d@x) (if (eq? (car G334d@x) 'macro!) (begin '#f (procedure? (cdr G334d@x))) '#f) '#f))) (set! G2e92@variable-transformer-procedure (lambda (G334f@x) (if (G2e90@variable-transformer? G334f@x) (cdr G334f@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G334f@x)))) (set! G2e94@make-eval-transformer (lambda (G3351@x) (G2e8c@sanitize-binding (eval-core (G2a03@G29ab@expanded->core G3351@x)) G3351@x))) (set! G3018@parse-define (lambda (G3353@x) ((lambda (G3355@t) ((lambda (G3357@ls/false) (if (if G3357@ls/false (begin '#f (apply (lambda (G3359@id G335a@fmls G335b@b G335c@b*) (G2e4d@id? G3359@id)) G3357@ls/false)) '#f) (apply (lambda (G3361@id G3362@fmls G3363@b G3364@b*) (begin (G30b8@verify-formals G3362@fmls G3353@x) (values G3361@id (cons 'defun (cons G3362@fmls (cons G3363@b G3364@b*)))))) G3357@ls/false) ((lambda (G3369@t) ((lambda (G336b@ls/false) (if (if G336b@ls/false (begin '#f (apply (lambda (G336d@id G336e@val) (G2e4d@id? G336d@id)) G336b@ls/false)) '#f) (apply (lambda (G3371@id G3372@val) (values G3371@id (cons 'expr G3372@val))) G336b@ls/false) ((lambda (G3375@t) ((lambda (G3377@ls/false) (if (if G3377@ls/false (begin '#f (apply (lambda (G3379@id) (G2e4d@id? G3379@id)) G3377@ls/false)) '#f) (apply (lambda (G337b@id) (values G337b@id (cons 'expr (G3046@bless '(void))))) G3377@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3375@t))) (G3090@syntax-dispatch G3375@t '(_ any)))) G3369@t))) (G3090@syntax-dispatch G3369@t '(_ any any)))) G3355@t))) (G3090@syntax-dispatch G3355@t '(_ (any . any) any . each-any)))) G3353@x))) (set! G301a@parse-define-syntax (lambda (G337d@x) ((lambda (G337f@t) ((lambda (G3381@ls/false) (if (if G3381@ls/false (begin '#f (apply (lambda (G3383@id G3384@val) (G2e4d@id? G3383@id)) G3381@ls/false)) '#f) (apply (lambda (G3387@id G3388@val) (values G3387@id G3388@val)) G3381@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G337f@t))) (G3090@syntax-dispatch G337f@t '(_ any any)))) G337d@x))) (set! G301c@scheme-stx-hashtable (make-eq-hashtable)) (set! G301e@scheme-stx (lambda (G338b@sym) ((lambda (G338d@t) (if G338d@t G338d@t (begin '#f ((lambda (G338f@subst) ((lambda (G3391@stx) ((lambda (G3393@stx) ((lambda () (begin (hashtable-set! G301c@scheme-stx-hashtable G338b@sym G3393@stx) G3393@stx)))) ((lambda (G3395@t) (if G3395@t ((lambda (G3397@x) ((lambda (G3399@name G339a@label) (G2e39@add-subst (G2de0@make-rib (list G3399@name) (list G2dc1@top-mark*) (list G339a@label) '#f '#f) G3391@stx)) (car G3397@x) (cdr G3397@x))) G3395@t) G3391@stx)) (assq G338b@sym G338f@subst)))) (G2e17@make-stx G338b@sym G2dc1@top-mark* '() '()))) (G2c17@G2a81@library-subst (G2c3b@G2ac9@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G301c@scheme-stx-hashtable G338b@sym '#f)))) (set! G3020@lexical-var car) (set! G3022@lexical-mutable? cdr) (set! G3024@set-lexical-mutable! set-cdr!) (set! G3026@add-lexical (lambda (G339d@lab G339e@lex G339f@r) (cons (cons* G339d@lab 'lexical G339e@lex '#f) G339f@r))) (set! G3028@add-lexicals (lambda (G33a3@lab* G33a4@lex* G33a5@r) (if (null? G33a3@lab*) G33a5@r (G3028@add-lexicals (cdr G33a3@lab*) (cdr G33a4@lex*) (G3026@add-lexical (car G33a3@lab*) (car G33a4@lex*) G33a5@r))))) (set! G302a@letrec-helper (lambda (G33a9@e G33aa@r G33ab@mr G33ac@build) ((lambda (G33b1@t) ((lambda (G33b3@ls/false) (if G33b3@ls/false (apply (lambda (G33b5@lhs* G33b6@rhs* G33b7@b G33b8@b*) (if (not (G2e57@valid-bound-ids? G33b5@lhs*)) (G304a@invalid-fmls-error G33a9@e G33b5@lhs*) ((lambda (G33bd@lex* G33be@lab*) ((lambda (G33c1@rib G33c2@r) ((lambda (G33c5@body G33c6@rhs*) (G33ac@build '#f G33bd@lex* G33c6@rhs* G33c5@body)) (G30ca@chi-internal (G2e39@add-subst G33c1@rib (cons G33b7@b G33b8@b*)) G33c2@r G33ab@mr) (G30b0@chi-expr* (map (lambda (G33c9@x) (G2e39@add-subst G33c1@rib G33c9@x)) G33b6@rhs*) G33c2@r G33ab@mr))) (G2e06@make-full-rib G33b5@lhs* G33be@lab*) (G3028@add-lexicals G33be@lab* G33bd@lex* G33aa@r))) (map G2dc5@gen-lexical G33b5@lhs*) (map G2dc9@gen-label G33b5@lhs*)))) G33b3@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G33b1@t))) (G3090@syntax-dispatch G33b1@t '(_ #(each (any any)) any . each-any)))) G33a9@e))) (set! G302c@letrec-transformer (lambda (G33cb@e G33cc@r G33cd@mr) (G302a@letrec-helper G33cb@e G33cc@r G33cd@mr G2daa@G2d1d@build-letrec))) (set! G302e@letrec*-transformer (lambda (G33d1@e G33d2@r G33d3@mr) (G302a@letrec-helper G33d1@e G33d2@r G33d3@mr G2dab@G2d1f@build-letrec*))) (set! G3030@fluid-let-syntax-transformer (lambda (G33d7@e G33d8@r G33d9@mr) ((lambda (G33de@lookup) (begin (set! G33de@lookup (lambda (G33f1@x) ((lambda (G33f3@t) (if G33f3@t G33f3@t (begin '#f (G3183@syntax-violation '#f '"unbound identifier" G33d7@e G33f1@x)))) (G2e67@id->label G33f1@x)))) ((lambda (G33df@t) ((lambda (G33e1@ls/false) (if G33e1@ls/false (apply (lambda (G33e3@lhs* G33e4@rhs* G33e5@b G33e6@b*) (if (not (G2e57@valid-bound-ids? G33e3@lhs*)) (G304a@invalid-fmls-error G33d7@e G33e3@lhs*) ((lambda (G33eb@lab* G33ec@rhs*) (G30ca@chi-internal (cons G33e5@b G33e6@b*) (append (map cons G33eb@lab* G33ec@rhs*) G33d8@r) (append (map cons G33eb@lab* G33ec@rhs*) G33d9@mr))) (map G33de@lookup G33e3@lhs*) (map (lambda (G33ef@x) (G2e94@make-eval-transformer (G30f1@expand-transformer G33ef@x G33d9@mr))) G33e4@rhs*)))) G33e1@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G33df@t))) (G3090@syntax-dispatch G33df@t '(_ #(each (any any)) any . each-any)))) G33d7@e))) '#f))) (set! G3032@type-descriptor-transformer (lambda (G33f5@e G33f6@r G33f7@mr) ((lambda (G33fb@t) ((lambda (G33fd@ls/false) (if (if G33fd@ls/false (begin '#f (apply (lambda (G33ff@id) (G2e4d@id? G33ff@id)) G33fd@ls/false)) '#f) (apply (lambda (G3401@id) ((lambda (G3403@lab) ((lambda (G3405@b) ((lambda (G3407@type) ((lambda () (begin (if (not G3403@lab) (G2e73@raise-unbound-error G3401@id) (void)) (if (not (if (eq? G3407@type '$rtd) (begin '#f (not (list? (G2e71@binding-value G3405@b)))) '#f)) (G3183@syntax-violation '#f '"not a record type" G33f5@e) (void)) (list 'quote (G2e71@binding-value G3405@b)))))) (G2e6f@binding-type G3405@b))) (G2e6b@label->binding G3403@lab G33f6@r))) (G2e67@id->label G3401@id))) G33fd@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G33fb@t))) (G3090@syntax-dispatch G33fb@t '(_ any)))) G33f5@e))) (set! G3034@record-type-descriptor-transformer (lambda (G3409@e G340a@r G340b@mr) ((lambda (G340f@t) ((lambda (G3411@ls/false) (if (if G3411@ls/false (begin '#f (apply (lambda (G3413@id) (G2e4d@id? G3413@id)) G3411@ls/false)) '#f) (apply (lambda (G3415@id) ((lambda (G3417@lab) ((lambda (G3419@b) ((lambda (G341b@type) ((lambda () (begin (if (not G3417@lab) (G2e73@raise-unbound-error G3415@id) (void)) (if (not (if (eq? G341b@type '$rtd) (begin '#f (list? (G2e71@binding-value G3419@b))) '#f)) (G3183@syntax-violation '#f '"not a record type" G3409@e) (void)) (G30b4@chi-expr (car (G2e71@binding-value G3419@b)) G340a@r G340b@mr))))) (G2e6f@binding-type G3419@b))) (G2e6b@label->binding G3417@lab G340a@r))) (G2e67@id->label G3415@id))) G3411@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G340f@t))) (G3090@syntax-dispatch G340f@t '(_ any)))) G3409@e))) (set! G3036@record-constructor-descriptor-transformer (lambda (G341d@e G341e@r G341f@mr) ((lambda (G3423@t) ((lambda (G3425@ls/false) (if (if G3425@ls/false (begin '#f (apply (lambda (G3427@id) (G2e4d@id? G3427@id)) G3425@ls/false)) '#f) (apply (lambda (G3429@id) ((lambda (G342b@lab) ((lambda (G342d@b) ((lambda (G342f@type) ((lambda () (begin (if (not G342b@lab) (G2e73@raise-unbound-error G3429@id) (void)) (if (not (if (eq? G342f@type '$rtd) (begin '#f (list? (G2e71@binding-value G342d@b))) '#f)) (G3183@syntax-violation '#f '"invalid type" G341d@e) (void)) (G30b4@chi-expr (cadr (G2e71@binding-value G342d@b)) G341e@r G341f@mr))))) (G2e6f@binding-type G342d@b))) (G2e6b@label->binding G342b@lab G341e@r))) (G2e67@id->label G3429@id))) G3425@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3423@t))) (G3090@syntax-dispatch G3423@t '(_ any)))) G341d@e))) (set! G3038@when-macro (lambda (G3431@e) ((lambda (G3433@t) ((lambda (G3435@ls/false) (if G3435@ls/false (apply (lambda (G3437@test G3438@e G3439@e*) (G3046@bless (list 'if G3437@test (cons 'begin (cons G3438@e G3439@e*))))) G3435@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3433@t))) (G3090@syntax-dispatch G3433@t '(_ any any . each-any)))) G3431@e))) (set! G303a@unless-macro (lambda (G343d@e) ((lambda (G343f@t) ((lambda (G3441@ls/false) (if G3441@ls/false (apply (lambda (G3443@test G3444@e G3445@e*) (G3046@bless (list 'if (list 'not G3443@test) (cons 'begin (cons G3444@e G3445@e*))))) G3441@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G343f@t))) (G3090@syntax-dispatch G343f@t '(_ any any . each-any)))) G343d@e))) (set! G303c@if-transformer (lambda (G3449@e G344a@r G344b@mr) ((lambda (G344f@t) ((lambda (G3451@ls/false) (if G3451@ls/false (apply (lambda (G3453@e0 G3454@e1 G3455@e2) (list 'if (G30b4@chi-expr G3453@e0 G344a@r G344b@mr) (G30b4@chi-expr G3454@e1 G344a@r G344b@mr) (G30b4@chi-expr G3455@e2 G344a@r G344b@mr))) G3451@ls/false) ((lambda (G3459@t) ((lambda (G345b@ls/false) (if G345b@ls/false (apply (lambda (G345d@e0 G345e@e1) (list 'if (G30b4@chi-expr G345d@e0 G344a@r G344b@mr) (G30b4@chi-expr G345e@e1 G344a@r G344b@mr) (G2da9@G2d1b@build-void))) G345b@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3459@t))) (G3090@syntax-dispatch G3459@t '(_ any any)))) G344f@t))) (G3090@syntax-dispatch G344f@t '(_ any any any)))) G3449@e))) (set! G303e@case-macro (lambda (G3461@e) ((lambda (G3464@build-last G3466@build-one) (begin (set! G3464@build-last (lambda (G348b@cls) ((lambda (G348d@t) ((lambda (G348f@ls/false) (if G348f@ls/false (apply (lambda (G3491@e G3492@e*) (cons 'begin (cons G3491@e G3492@e*))) G348f@ls/false) ((lambda (G3495@t) ((lambda (G3497@ls/false) (if G3497@ls/false (apply (lambda () (G3466@build-one G348b@cls '(if #f #f))) G3497@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3495@t))) (G3090@syntax-dispatch G3495@t '_))) G348d@t))) (G3090@syntax-dispatch G348d@t '(#(scheme-id else) any . each-any)))) G348b@cls))) (set! G3466@build-one (lambda (G347d@cls G347e@k) ((lambda (G3481@t) ((lambda (G3483@ls/false) (if G3483@ls/false (apply (lambda (G3485@d* G3486@e G3487@e*) (list 'if (list 'memv 't (list 'quote G3485@d*)) (cons 'begin (cons G3486@e G3487@e*)) G347e@k)) G3483@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3481@t))) (G3090@syntax-dispatch G3481@t '(each-any any . each-any)))) G347d@cls))) ((lambda (G3467@t) ((lambda (G3469@ls/false) (if G3469@ls/false (apply (lambda (G346b@expr) (G3046@bless (cons 'let (cons (list (list 't G346b@expr)) '((if #f #f)))))) G3469@ls/false) ((lambda (G346d@t) ((lambda (G346f@ls/false) (if G346f@ls/false (apply (lambda (G3471@expr G3472@cls G3473@cls*) (G3046@bless (list 'let (list (list 't G3471@expr)) ((letrec ((G3477@f (lambda (G3479@cls G347a@cls*) (if (null? G347a@cls*) (G3464@build-last G3479@cls) (G3466@build-one G3479@cls (G3477@f (car G347a@cls*) (cdr G347a@cls*))))))) G3477@f) G3472@cls G3473@cls*)))) G346f@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G346d@t))) (G3090@syntax-dispatch G346d@t '(_ any any . each-any)))) G3467@t))) (G3090@syntax-dispatch G3467@t '(_ any)))) G3461@e))) '#f '#f))) (set! G3040@quote-transformer (lambda (G3499@e G349a@r G349b@mr) ((lambda (G349f@t) ((lambda (G34a1@ls/false) (if G34a1@ls/false (apply (lambda (G34a3@datum) (list 'quote (G2e63@stx->datum G34a3@datum))) G34a1@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G349f@t))) (G3090@syntax-dispatch G349f@t '(_ any)))) G3499@e))) (set! G3042@case-lambda-transformer (lambda (G34a5@e G34a6@r G34a7@mr) ((lambda (G34ab@t) ((lambda (G34ad@ls/false) (if G34ad@ls/false (apply (lambda (G34af@fmls* G34b0@b* G34b1@b**) (call-with-values (lambda () (G30bc@chi-lambda-clause* G34a5@e G34af@fmls* (map cons G34b0@b* G34b1@b**) G34a6@r G34a7@mr)) (lambda (G34b7@G34b5 G34b8@G34b6) ((lambda (G34bb@body* G34bc@fmls*) (G2da6@G2ccf@build-case-lambda '#f G34bc@fmls* G34bb@body*)) G34b8@G34b6 G34b7@G34b5)))) G34ad@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G34ab@t))) (G3090@syntax-dispatch G34ab@t '(_ . #(each (any any . each-any)))))) G34a5@e))) (set! G3044@lambda-transformer (lambda (G34bf@e G34c0@r G34c1@mr) ((lambda (G34c5@t) ((lambda (G34c7@ls/false) (if G34c7@ls/false (apply (lambda (G34c9@fmls G34ca@b G34cb@b*) (call-with-values (lambda () (G30ba@chi-lambda-clause G34bf@e G34c9@fmls (cons G34ca@b G34cb@b*) G34c0@r G34c1@mr)) (lambda (G34d1@G34cf G34d2@G34d0) ((lambda (G34d5@body G34d6@fmls) (G2da5@G2ccd@build-lambda '#f G34d6@fmls G34d5@body)) G34d2@G34d0 G34d1@G34cf)))) G34c7@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G34c5@t))) (G3090@syntax-dispatch G34c5@t '(_ any any . each-any)))) G34bf@e))) (set! G3046@bless (lambda (G34d9@x) (G2e35@mkstx ((letrec ((G34db@f (lambda (G34dd@x) (if (G2e15@stx? G34dd@x) G34dd@x (if (pair? G34dd@x) (cons (G34db@f (car G34dd@x)) (G34db@f (cdr G34dd@x))) (if (symbol? G34dd@x) (G301e@scheme-stx G34dd@x) (if (vector? G34dd@x) (vector-map G34db@f G34dd@x) G34dd@x))))))) G34db@f) G34d9@x) '() '() '()))) (set! G3048@with-syntax-macro (lambda (G34df@e) ((lambda (G34e1@t) ((lambda (G34e3@ls/false) (if G34e3@ls/false (apply (lambda (G34e5@pat* G34e6@expr* G34e7@b G34e8@b*) ((lambda (G34ed@idn*) (begin (G30b8@verify-formals (map car G34ed@idn*) G34df@e) ((lambda (G34ef@t*) (G3046@bless (list 'let (map list G34ef@t* G34e6@expr*) ((letrec ((G34f1@f (lambda (G34f3@pat* G34f4@t*) (if (null? G34f3@pat*) (cons 'begin (cons '#f (cons G34e7@b G34e8@b*))) (list 'syntax-case (car G34f4@t*) '() (list (car G34f3@pat*) (G34f1@f (cdr G34f3@pat*) (cdr G34f4@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G34f3@pat*)) (car G34f4@t*)))))))) G34f1@f) G34e5@pat* G34ef@t*)))) (G316f@generate-temporaries G34e6@expr*)))) ((letrec ((G34f7@f (lambda (G34f9@pat*) (if (null? G34f9@pat*) '() (call-with-values (lambda () (G308e@convert-pattern (car G34f9@pat*) '())) (lambda (G34fd@G34fb G34fe@G34fc) ((lambda (G3501@idn* G3502@pat) (append G3501@idn* (G34f7@f (cdr G34f9@pat*)))) G34fe@G34fc G34fd@G34fb))))))) G34f7@f) G34e5@pat*))) G34e3@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G34e1@t))) (G3090@syntax-dispatch G34e1@t '(_ #(each (any any)) any . each-any)))) G34df@e))) (set! G304a@invalid-fmls-error (lambda (G3505@stx G3506@fmls) ((lambda (G3509@t) ((lambda (G350b@ls/false) (if G350b@ls/false (apply (lambda (G350d@id* G350e@last) ((letrec ((G3511@f (lambda (G3513@id*) (if (null? G3513@id*) (values) (if (not (G2e4d@id? (car G3513@id*))) (G3183@syntax-violation '#f '"not an identifier" G3505@stx (car G3513@id*)) (begin (G3511@f (cdr G3513@id*)) (if (G2e5b@bound-id-member? (car G3513@id*) (cdr G3513@id*)) (G3183@syntax-violation '#f '"duplicate binding" G3505@stx (car G3513@id*)) (void)))))))) G3511@f) (if (G2e4d@id? G350e@last) (cons G350e@last G350d@id*) (if (G2e43@syntax-null? G350e@last) G350d@id* (G3183@syntax-violation '#f '"not an identifier" G3505@stx G350e@last))))) G350b@ls/false) ((lambda (G3515@t) ((lambda (G3517@ls/false) (if G3517@ls/false (apply (lambda () (G3183@syntax-violation '#f '"malformed binding form" G3505@stx G3506@fmls)) G3517@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3515@t))) (G3090@syntax-dispatch G3515@t '_))) G3509@t))) (G3090@syntax-dispatch G3509@t '#(each+ any () any)))) G3506@fmls))) (set! G304c@let-macro (lambda (G3519@stx) ((lambda (G351b@t) ((lambda (G351d@ls/false) (if G351d@ls/false (apply (lambda (G351f@lhs* G3520@rhs* G3521@b G3522@b*) (if (G2e57@valid-bound-ids? G351f@lhs*) (G3046@bless (cons (cons 'lambda (cons G351f@lhs* (cons G3521@b G3522@b*))) G3520@rhs*)) (G304a@invalid-fmls-error G3519@stx G351f@lhs*))) G351d@ls/false) ((lambda (G3527@t) ((lambda (G3529@ls/false) (if (if G3529@ls/false (begin '#f (apply (lambda (G352b@f G352c@lhs* G352d@rhs* G352e@b G352f@b*) (G2e4d@id? G352b@f)) G3529@ls/false)) '#f) (apply (lambda (G3535@f G3536@lhs* G3537@rhs* G3538@b G3539@b*) (if (G2e57@valid-bound-ids? G3536@lhs*) (G3046@bless (cons (list 'letrec (list (list G3535@f (cons 'lambda (cons G3536@lhs* (cons G3538@b G3539@b*))))) G3535@f) G3537@rhs*)) (G304a@invalid-fmls-error G3519@stx G3536@lhs*))) G3529@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3527@t))) (G3090@syntax-dispatch G3527@t '(_ any #(each (any any)) any . each-any)))) G351b@t))) (G3090@syntax-dispatch G351b@t '(_ #(each (any any)) any . each-any)))) G3519@stx))) (set! G304e@let-values-macro (lambda (G353f@stx) ((lambda (G3542@rename G3544@rename*) (begin (set! G3542@rename (lambda (G35a4@x G35a5@old* G35a6@new*) (begin (if (not (G2e4d@id? G35a4@x)) (G3183@syntax-violation '#f '"not an indentifier" G353f@stx G35a4@x) (void)) (if (G2e5b@bound-id-member? G35a4@x G35a5@old*) (G3183@syntax-violation '#f '"duplicate binding" G353f@stx G35a4@x) (void)) ((lambda (G35aa@y) (values G35aa@y (cons G35a4@x G35a5@old*) (cons G35aa@y G35a6@new*))) (gensym (G3189@syntax->datum G35a4@x)))))) (set! G3544@rename* (lambda (G3592@x* G3593@old* G3594@new*) (if (null? G3592@x*) (values '() G3593@old* G3594@new*) (call-with-values (lambda () (G3542@rename (car G3592@x*) G3593@old* G3594@new*)) (lambda (G3598@x G3599@old* G359a@new*) (call-with-values (lambda () (G3544@rename* (cdr G3592@x*) G3599@old* G359a@new*)) (lambda (G359e@x* G359f@old* G35a0@new*) (values (cons G3598@x G359e@x*) G359f@old* G35a0@new*)))))))) ((lambda (G3545@t) ((lambda (G3547@ls/false) (if G3547@ls/false (apply (lambda (G3549@b G354a@b*) (cons* (G3046@bless 'let) '() G3549@b G354a@b*)) G3547@ls/false) ((lambda (G354d@t) ((lambda (G354f@ls/false) (if G354f@ls/false (apply (lambda (G3551@lhs* G3552@rhs* G3553@b G3554@b*) (G3046@bless ((letrec ((G3559@f (lambda (G355b@lhs* G355c@rhs* G355d@old* G355e@new*) (if (null? G355b@lhs*) (cons 'let (cons (map list G355d@old* G355e@new*) (cons G3553@b G3554@b*))) ((lambda (G3563@t) ((lambda (G3565@ls/false) (if G3565@ls/false (apply (lambda (G3567@x*) (call-with-values (lambda () (G3544@rename* G3567@x* G355d@old* G355e@new*)) (lambda (G356c@G3569 G356d@G356a G356e@G356b) ((lambda (G3572@new* G3573@old* G3574@y*) (list 'call-with-values (list 'lambda '() (car G355c@rhs*)) (list 'lambda G3574@y* (G3559@f (cdr G355b@lhs*) (cdr G355c@rhs*) G3573@old* G3572@new*)))) G356e@G356b G356d@G356a G356c@G3569)))) G3565@ls/false) ((lambda (G3578@t) ((lambda (G357a@ls/false) (if G357a@ls/false (apply (lambda (G357c@x* G357d@x) (call-with-values (lambda () (G3542@rename G357d@x G355d@old* G355e@new*)) (lambda (G3580@y G3581@old* G3582@new*) (call-with-values (lambda () (G3544@rename* G357c@x* G3581@old* G3582@new*)) (lambda (G3586@y* G3587@old* G3588@new*) (list 'call-with-values (list 'lambda '() (car G355c@rhs*)) (list 'lambda (append G3586@y* G3580@y) (G3559@f (cdr G355b@lhs*) (cdr G355c@rhs*) G3587@old* G3588@new*)))))))) G357a@ls/false) ((lambda (G358c@t) ((lambda (G358e@ls/false) (if G358e@ls/false (apply (lambda (G3590@others) (G3183@syntax-violation '#f '"malformed bindings" G353f@stx G3590@others)) G358e@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G358c@t))) (G3090@syntax-dispatch G358c@t 'any))) G3578@t))) (G3090@syntax-dispatch G3578@t '#(each+ any () any)))) G3563@t))) (G3090@syntax-dispatch G3563@t 'each-any))) (car G355b@lhs*)))))) G3559@f) G3551@lhs* G3552@rhs* '() '()))) G354f@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G354d@t))) (G3090@syntax-dispatch G354d@t '(_ #(each (any any)) any . each-any)))) G3545@t))) (G3090@syntax-dispatch G3545@t '(_ () any . each-any)))) G353f@stx))) '#f '#f))) (set! G3050@let*-values-macro (lambda (G35ac@stx) ((lambda (G35af@check) (begin (set! G35af@check (lambda (G35de@x*) (if (not (null? G35de@x*)) ((lambda (G35e0@x) (begin (if (not (G2e4d@id? G35e0@x)) (G3183@syntax-violation '#f '"not an identifier" G35ac@stx G35e0@x) (void)) (G35af@check (cdr G35de@x*)) (if (G2e5b@bound-id-member? G35e0@x (cdr G35de@x*)) (G3183@syntax-violation '#f '"duplicate identifier" G35ac@stx G35e0@x) (void)))) (car G35de@x*)) (void)))) ((lambda (G35b0@t) ((lambda (G35b2@ls/false) (if G35b2@ls/false (apply (lambda (G35b4@b G35b5@b*) (cons* (G3046@bless 'let) '() G35b4@b G35b5@b*)) G35b2@ls/false) ((lambda (G35b8@t) ((lambda (G35ba@ls/false) (if G35ba@ls/false (apply (lambda (G35bc@lhs* G35bd@rhs* G35be@b G35bf@b*) (G3046@bless ((letrec ((G35c4@f (lambda (G35c6@lhs* G35c7@rhs*) (if (null? G35c6@lhs*) (cons 'begin (cons G35be@b G35bf@b*)) ((lambda (G35ca@t) ((lambda (G35cc@ls/false) (if G35cc@ls/false (apply (lambda (G35ce@x*) (begin (G35af@check G35ce@x*) (list 'call-with-values (list 'lambda '() (car G35c7@rhs*)) (list 'lambda G35ce@x* (G35c4@f (cdr G35c6@lhs*) (cdr G35c7@rhs*)))))) G35cc@ls/false) ((lambda (G35d0@t) ((lambda (G35d2@ls/false) (if G35d2@ls/false (apply (lambda (G35d4@x* G35d5@x) (begin (G35af@check (cons G35d5@x G35d4@x*)) (list 'call-with-values (list 'lambda '() (car G35c7@rhs*)) (list 'lambda (append G35d4@x* G35d5@x) (G35c4@f (cdr G35c6@lhs*) (cdr G35c7@rhs*)))))) G35d2@ls/false) ((lambda (G35d8@t) ((lambda (G35da@ls/false) (if G35da@ls/false (apply (lambda (G35dc@others) (G3183@syntax-violation '#f '"malformed bindings" G35ac@stx G35dc@others)) G35da@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G35d8@t))) (G3090@syntax-dispatch G35d8@t 'any))) G35d0@t))) (G3090@syntax-dispatch G35d0@t '#(each+ any () any)))) G35ca@t))) (G3090@syntax-dispatch G35ca@t 'each-any))) (car G35c6@lhs*)))))) G35c4@f) G35bc@lhs* G35bd@rhs*))) G35ba@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G35b8@t))) (G3090@syntax-dispatch G35b8@t '(_ #(each (any any)) any . each-any)))) G35b0@t))) (G3090@syntax-dispatch G35b0@t '(_ () any . each-any)))) G35ac@stx))) '#f))) (set! G3052@trace-lambda-macro (lambda (G35e2@stx) ((lambda (G35e4@t) ((lambda (G35e6@ls/false) (if G35e6@ls/false (apply (lambda (G35e8@who G35e9@fmls G35ea@b G35eb@b*) (if (G2e57@valid-bound-ids? G35e9@fmls) (G3046@bless (list 'make-traced-procedure (list 'quote G35e8@who) (cons 'lambda (cons G35e9@fmls (cons G35ea@b G35eb@b*))))) (G304a@invalid-fmls-error G35e2@stx G35e9@fmls))) G35e6@ls/false) ((lambda (G35f0@t) ((lambda (G35f2@ls/false) (if G35f2@ls/false (apply (lambda (G35f4@who G35f5@fmls G35f6@last G35f7@b G35f8@b*) (if (G2e57@valid-bound-ids? (cons G35f6@last G35f5@fmls)) (G3046@bless (list 'make-traced-procedure (list 'quote G35f4@who) (cons 'lambda (cons (append G35f5@fmls G35f6@last) (cons G35f7@b G35f8@b*))))) (G304a@invalid-fmls-error G35e2@stx (append G35f5@fmls G35f6@last)))) G35f2@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G35f0@t))) (G3090@syntax-dispatch G35f0@t '(_ any #(each+ any () any) any . each-any)))) G35e4@t))) (G3090@syntax-dispatch G35e4@t '(_ any each-any any . each-any)))) G35e2@stx))) (set! G3054@trace-define-macro (lambda (G35fe@stx) ((lambda (G3600@t) ((lambda (G3602@ls/false) (if G3602@ls/false (apply (lambda (G3604@who G3605@fmls G3606@b G3607@b*) (if (G2e57@valid-bound-ids? G3605@fmls) (G3046@bless (list 'define G3604@who (list 'make-traced-procedure (list 'quote G3604@who) (cons 'lambda (cons G3605@fmls (cons G3606@b G3607@b*)))))) (G304a@invalid-fmls-error G35fe@stx G3605@fmls))) G3602@ls/false) ((lambda (G360c@t) ((lambda (G360e@ls/false) (if G360e@ls/false (apply (lambda (G3610@who G3611@fmls G3612@last G3613@b G3614@b*) (if (G2e57@valid-bound-ids? (cons G3612@last G3611@fmls)) (G3046@bless (list 'define G3610@who (list 'make-traced-procedure (list 'quote G3610@who) (cons 'lambda (cons (append G3611@fmls G3612@last) (cons G3613@b G3614@b*)))))) (G304a@invalid-fmls-error G35fe@stx (append G3611@fmls G3612@last)))) G360e@ls/false) ((lambda (G361a@t) ((lambda (G361c@ls/false) (if G361c@ls/false (apply (lambda (G361e@who G361f@expr) (if (G2e4d@id? G361e@who) (G3046@bless (list 'define G361e@who (list 'let (list (list 'v G361f@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G361e@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3183@syntax-violation '#f '"invalid name" G35fe@stx))) G361c@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G361a@t))) (G3090@syntax-dispatch G361a@t '(_ any any)))) G360c@t))) (G3090@syntax-dispatch G360c@t '(_ (any . #(each+ any () any)) any . each-any)))) G3600@t))) (G3090@syntax-dispatch G3600@t '(_ (any . each-any) any . each-any)))) G35fe@stx))) (set! G3056@trace-define-syntax-macro (lambda (G3622@stx) ((lambda (G3624@t) ((lambda (G3626@ls/false) (if G3626@ls/false (apply (lambda (G3628@who G3629@expr) (if (G2e4d@id? G3628@who) (G3046@bless (list 'define-syntax G3628@who (list 'make-traced-macro (list 'quote G3628@who) G3629@expr))) (G3183@syntax-violation '#f '"invalid name" G3622@stx))) G3626@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3624@t))) (G3090@syntax-dispatch G3624@t '(_ any any)))) G3622@stx))) (set! G3058@trace-let/rec-syntax (lambda (G362c@who) (lambda (G362e@stx) ((lambda (G3630@t) ((lambda (G3632@ls/false) (if G3632@ls/false (apply (lambda (G3634@lhs* G3635@rhs* G3636@b G3637@b*) (if (G2e57@valid-bound-ids? G3634@lhs*) ((lambda (G363c@rhs*) (G3046@bless (cons G362c@who (cons (map list G3634@lhs* G363c@rhs*) (cons G3636@b G3637@b*))))) (map (lambda (G363e@lhs G363f@rhs) (list 'make-traced-macro (list 'quote G363e@lhs) G363f@rhs)) G3634@lhs* G3635@rhs*)) (G304a@invalid-fmls-error G362e@stx G3634@lhs*))) G3632@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3630@t))) (G3090@syntax-dispatch G3630@t '(_ #(each (any any)) any . each-any)))) G362e@stx)))) (set! G305a@trace-let-syntax-macro (G3058@trace-let/rec-syntax 'let-syntax)) (set! G305c@trace-letrec-syntax-macro (G3058@trace-let/rec-syntax 'letrec-syntax)) (set! G305e@guard-macro (lambda (G3642@x) ((lambda (G3645@gen-clauses) (begin (set! G3645@gen-clauses (lambda (G365c@con G365d@outerk G365e@clause*) ((lambda (G3663@f G3665@f*) (begin (set! G3663@f (lambda (G3696@x G3697@k) ((lambda (G369a@t) ((lambda (G369c@ls/false) (if G369c@ls/false (apply (lambda (G369e@e G369f@p) ((lambda (G36a2@t) (list 'let (list (list G36a2@t G369e@e)) (list 'if G36a2@t (list G369f@p G36a2@t) G3697@k))) (gensym))) G369c@ls/false) ((lambda (G36a4@t) ((lambda (G36a6@ls/false) (if G36a6@ls/false (apply (lambda (G36a8@e) ((lambda (G36aa@t) (list 'let (list (list G36aa@t G36a8@e)) (list 'if G36aa@t G36aa@t G3697@k))) (gensym))) G36a6@ls/false) ((lambda (G36ac@t) ((lambda (G36ae@ls/false) (if G36ae@ls/false (apply (lambda (G36b0@e G36b1@v G36b2@v*) (list 'if G36b0@e (cons 'begin (cons G36b1@v G36b2@v*)) G3697@k)) G36ae@ls/false) ((lambda (G36b6@t) ((lambda (G36b8@ls/false) (if G36b8@ls/false (apply (lambda () (G3183@syntax-violation '#f '"invalid guard clause" G3696@x)) G36b8@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G36b6@t))) (G3090@syntax-dispatch G36b6@t '_))) G36ac@t))) (G3090@syntax-dispatch G36ac@t '(any any . each-any)))) G36a4@t))) (G3090@syntax-dispatch G36a4@t '(any)))) G369a@t))) (G3090@syntax-dispatch G369a@t '(any #(scheme-id =>) any)))) G3696@x))) (set! G3665@f* (lambda (G3670@x*) ((lambda (G3672@t) ((lambda (G3674@ls/false) (if G3674@ls/false (apply (lambda () (values (list 'raise G365c@con) '#t)) G3674@ls/false) ((lambda (G3676@t) ((lambda (G3678@ls/false) (if G3678@ls/false (apply (lambda (G367a@e G367b@e*) (values (cons 'begin (cons G367a@e G367b@e*)) '#f)) G3678@ls/false) ((lambda (G367e@t) ((lambda (G3680@ls/false) (if G3680@ls/false (apply (lambda (G3682@cls G3683@cls*) (call-with-values (lambda () (G3665@f* G3683@cls*)) (lambda (G3688@G3686 G3689@G3687) ((lambda (G368c@g G368d@e) (values (G3663@f G3682@cls G368d@e) G368c@g)) G3689@G3687 G3688@G3686)))) G3680@ls/false) ((lambda (G3690@t) ((lambda (G3692@ls/false) (if G3692@ls/false (apply (lambda (G3694@others) (G3183@syntax-violation '#f '"invalid guard clause" G3694@others)) G3692@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3690@t))) (G3090@syntax-dispatch G3690@t 'any))) G367e@t))) (G3090@syntax-dispatch G367e@t '(any . any)))) G3676@t))) (G3090@syntax-dispatch G3676@t '((#(scheme-id else) any . each-any))))) G3672@t))) (G3090@syntax-dispatch G3672@t '()))) G3670@x*))) (call-with-values (lambda () (G3665@f* G365e@clause*)) (lambda (G3668@G3666 G3669@G3667) ((lambda (G366c@raisek G366d@code) (if G366c@raisek (list G365d@outerk G366d@code) G366d@code)) G3669@G3667 G3668@G3666))))) '#f '#f))) ((lambda (G3646@t) ((lambda (G3648@ls/false) (if (if G3648@ls/false (begin '#f (apply (lambda (G364a@con G364b@clause* G364c@b G364d@b*) (G2e4d@id? G364a@con)) G3648@ls/false)) '#f) (apply (lambda (G3652@con G3653@clause* G3654@b G3655@b*) ((lambda (G365a@outerk) (G3046@bless (list 'call/cc (list 'lambda (list G365a@outerk) (list 'with-exception-handler (list 'lambda (list G3652@con) (G3645@gen-clauses G3652@con G365a@outerk G3653@clause*)) (cons 'lambda (cons '() (cons '#f (cons G3654@b G3655@b*))))))))) (gensym))) G3648@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3646@t))) (G3090@syntax-dispatch G3646@t '(_ (any . each-any) any . each-any)))) G3642@x))) '#f))) (set! G3060@define-enumeration-macro (lambda (G36ba@stx) ((lambda (G36bd@set? G36bf@remove-dups) (begin (set! G36bd@set? (lambda (G36d6@x) ((lambda (G36d8@t) (if G36d8@t G36d8@t (begin '#f (if (not (memq (car G36d6@x) (cdr G36d6@x))) (begin '#f (G36bd@set? (cdr G36d6@x))) '#f)))) (null? G36d6@x)))) (set! G36bf@remove-dups (lambda (G36d4@ls) (if (null? G36d4@ls) '() (cons (car G36d4@ls) (G36bf@remove-dups (remq (car G36d4@ls) (cdr G36d4@ls))))))) ((lambda (G36c0@t) ((lambda (G36c2@ls/false) (if (if G36c2@ls/false (begin '#f (apply (lambda (G36c4@name G36c5@id* G36c6@maker) (if (G2e4d@id? G36c4@name) (if (G2e4d@id? G36c6@maker) (begin '#f (for-all G2e4d@id? G36c5@id*)) '#f) '#f)) G36c2@ls/false)) '#f) (apply (lambda (G36ca@name G36cb@id* G36cc@maker) ((lambda (G36d0@name* G36d1@mk) (G3046@bless (list 'begin (list 'define G36d1@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G36d0@name*)))) (list 'define-syntax G36ca@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G36d0@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G36ca@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G36cc@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G36cc@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G36d0@name*)) (cons 'syntax-violation (cons (list 'quote G36cc@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G36d1@mk '('(n* ...)))))))))))) (G36bf@remove-dups (G3189@syntax->datum G36cb@id*)) (gensym))) G36c2@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G36c0@t))) (G3090@syntax-dispatch G36c0@t '(_ any each-any any)))) G36ba@stx))) '#f '#f))) (set! G3062@time-macro (lambda (G36da@stx) ((lambda (G36dc@t) ((lambda (G36de@ls/false) (if G36de@ls/false (apply (lambda (G36e0@expr) ((lambda (G36e2@str) (G3046@bless (list 'time-it G36e2@str (list 'lambda '() G36e0@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G36e6@G36e4 G36e7@G36e5) ((lambda (G36ea@e G36eb@p) (begin (write (G3189@syntax->datum G36e0@expr) G36eb@p) (G36ea@e))) G36e7@G36e5 G36e6@G36e4))))) G36de@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G36dc@t))) (G3090@syntax-dispatch G36dc@t '(_ any)))) G36da@stx))) (set! G3064@delay-macro (lambda (G36ee@stx) ((lambda (G36f0@t) ((lambda (G36f2@ls/false) (if G36f2@ls/false (apply (lambda (G36f4@expr) (G3046@bless (list 'make-promise (list 'lambda '() G36f4@expr)))) G36f2@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G36f0@t))) (G3090@syntax-dispatch G36f0@t '(_ any)))) G36ee@stx))) (set! G3066@assert-macro (lambda (G36f6@stx) ((lambda (G36f8@t) ((lambda (G36fa@ls/false) (if G36fa@ls/false (apply (lambda (G36fc@expr) ((lambda (G36fe@pos) (G3046@bless (list 'unless G36fc@expr (list 'assertion-error (list 'quote G36fc@expr) (list 'quote G36fe@pos))))) ((lambda (G3700@t) (if G3700@t G3700@t (begin '#f (G3179@expression-position G36fc@expr)))) (G3179@expression-position G36f6@stx)))) G36fa@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G36f8@t))) (G3090@syntax-dispatch G36f8@t '(_ any)))) G36f6@stx))) (set! G3068@endianness-macro (lambda (G3702@stx) ((lambda (G3704@t) ((lambda (G3706@ls/false) (if G3706@ls/false (apply (lambda (G3708@e) ((lambda (G370a@t) (if (memv G370a@t '(little)) (G3046@bless ''little) (if (memv G370a@t '(big)) (G3046@bless ''big) (G3183@syntax-violation '#f '"endianness must be big or little" G3702@stx)))) (G3189@syntax->datum G3708@e))) G3706@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3704@t))) (G3090@syntax-dispatch G3704@t '(_ any)))) G3702@stx))) (set! G306a@identifier-syntax-macro (lambda (G370c@stx) ((lambda (G370e@t) ((lambda (G3710@ls/false) (if G3710@ls/false (apply (lambda (G3712@expr) (G3046@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G3712@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G3712@expr) '((syntax (e* ...)))))))))) G3710@ls/false) ((lambda (G3714@t) ((lambda (G3716@ls/false) (if (if G3716@ls/false (begin '#f (apply (lambda (G3718@id1 G3719@expr1 G371a@id2 G371b@expr2 G371c@expr3) (if (G2e4d@id? G3718@id1) (if (G2e4d@id? G371a@id2) (begin '#f (G2e4d@id? G371b@expr2)) '#f) '#f)) G3716@ls/false)) '#f) (apply (lambda (G3722@id1 G3723@expr1 G3724@id2 G3725@expr2 G3726@expr3) (G3046@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G3723@expr1)) (list (list 'set! 'id G3725@expr2) (list 'syntax G3726@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G3723@expr1 '(e* ...))))))))) G3716@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3714@t))) (G3090@syntax-dispatch G3714@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G370e@t))) (G3090@syntax-dispatch G370e@t '(_ any)))) G370c@stx))) (set! G306c@do-macro (lambda (G372c@stx) ((lambda (G372f@bind) (begin (set! G372f@bind (lambda (G3746@x) ((lambda (G3748@t) ((lambda (G374a@ls/false) (if G374a@ls/false (apply (lambda (G374c@x G374d@init) (list G374c@x G374d@init G374c@x)) G374a@ls/false) ((lambda (G3750@t) ((lambda (G3752@ls/false) (if G3752@ls/false (apply (lambda (G3754@x G3755@init G3756@step) (list G3754@x G3755@init G3756@step)) G3752@ls/false) ((lambda (G375a@t) ((lambda (G375c@ls/false) (if G375c@ls/false (apply (lambda () (G3183@syntax-violation '#f '"invalid binding" G372c@stx)) G375c@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G375a@t))) (G3090@syntax-dispatch G375a@t '_))) G3750@t))) (G3090@syntax-dispatch G3750@t '(any any any)))) G3748@t))) (G3090@syntax-dispatch G3748@t '(any any)))) G3746@x))) ((lambda (G3730@t) ((lambda (G3732@ls/false) (if G3732@ls/false (apply (lambda (G3734@binding* G3735@test G3736@expr* G3737@command*) ((lambda (G373c@t) ((lambda (G373e@ls/false) (if G373e@ls/false (apply (lambda (G3740@x* G3741@init* G3742@step*) (if (G2e57@valid-bound-ids? G3740@x*) (G3046@bless (list 'letrec (list (list 'loop (list 'lambda G3740@x* (list 'if G3735@test (cons 'begin (cons '(if #f #f) G3736@expr*)) (cons 'begin (append G3737@command* (list (cons 'loop G3742@step*)))))))) (cons 'loop G3741@init*))) (G3183@syntax-violation '#f '"invalid bindings" G372c@stx))) G373e@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G373c@t))) (G3090@syntax-dispatch G373c@t '#(each (any any any))))) (map G372f@bind G3734@binding*))) G3732@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3730@t))) (G3090@syntax-dispatch G3730@t '(_ each-any (any . each-any) . each-any)))) G372c@stx))) '#f))) (set! G306e@let*-macro (lambda (G375e@stx) ((lambda (G3760@t) ((lambda (G3762@ls/false) (if (if G3762@ls/false (begin '#f (apply (lambda (G3764@lhs* G3765@rhs* G3766@b G3767@b*) (for-all G2e4d@id? G3764@lhs*)) G3762@ls/false)) '#f) (apply (lambda (G376c@lhs* G376d@rhs* G376e@b G376f@b*) (G3046@bless ((letrec ((G3774@f (lambda (G3776@x*) (if (null? G3776@x*) (cons 'let (cons '() (cons G376e@b G376f@b*))) (list 'let (list (car G3776@x*)) (G3774@f (cdr G3776@x*))))))) G3774@f) (map list G376c@lhs* G376d@rhs*)))) G3762@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3760@t))) (G3090@syntax-dispatch G3760@t '(_ #(each (any any)) any . each-any)))) G375e@stx))) (set! G3070@or-macro (lambda (G3778@stx) ((lambda (G377a@t) ((lambda (G377c@ls/false) (if G377c@ls/false (apply (lambda () '#f) G377c@ls/false) ((lambda (G377e@t) ((lambda (G3780@ls/false) (if G3780@ls/false (apply (lambda (G3782@e G3783@e*) (G3046@bless ((letrec ((G3786@f (lambda (G3788@e G3789@e*) (if (null? G3789@e*) (list 'begin '#f G3788@e) (list 'let (list (list 't G3788@e)) (list 'if 't 't (G3786@f (car G3789@e*) (cdr G3789@e*)))))))) G3786@f) G3782@e G3783@e*))) G3780@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G377e@t))) (G3090@syntax-dispatch G377e@t '(_ any . each-any)))) G377a@t))) (G3090@syntax-dispatch G377a@t '(_)))) G3778@stx))) (set! G3072@and-macro (lambda (G378c@stx) ((lambda (G378e@t) ((lambda (G3790@ls/false) (if G3790@ls/false (apply (lambda () '#t) G3790@ls/false) ((lambda (G3792@t) ((lambda (G3794@ls/false) (if G3794@ls/false (apply (lambda (G3796@e G3797@e*) (G3046@bless ((letrec ((G379a@f (lambda (G379c@e G379d@e*) (if (null? G379d@e*) (list 'begin '#f G379c@e) (cons 'if (cons G379c@e (cons (G379a@f (car G379d@e*) (cdr G379d@e*)) '(#f)))))))) G379a@f) G3796@e G3797@e*))) G3794@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3792@t))) (G3090@syntax-dispatch G3792@t '(_ any . each-any)))) G378e@t))) (G3090@syntax-dispatch G378e@t '(_)))) G378c@stx))) (set! G3074@cond-macro (lambda (G37a0@stx) ((lambda (G37a2@t) ((lambda (G37a4@ls/false) (if G37a4@ls/false (apply (lambda (G37a6@cls G37a7@cls*) (G3046@bless ((letrec ((G37aa@f (lambda (G37ac@cls G37ad@cls*) (if (null? G37ad@cls*) ((lambda (G37b0@t) ((lambda (G37b2@ls/false) (if G37b2@ls/false (apply (lambda (G37b4@e G37b5@e*) (cons 'begin (cons G37b4@e G37b5@e*))) G37b2@ls/false) ((lambda (G37b8@t) ((lambda (G37ba@ls/false) (if G37ba@ls/false (apply (lambda (G37bc@e G37bd@p) (list 'let (list (list 't G37bc@e)) (list 'if 't (cons G37bd@p '(t))))) G37ba@ls/false) ((lambda (G37c0@t) ((lambda (G37c2@ls/false) (if G37c2@ls/false (apply (lambda (G37c4@e) (cons 'or (cons G37c4@e '((if #f #f))))) G37c2@ls/false) ((lambda (G37c6@t) ((lambda (G37c8@ls/false) (if G37c8@ls/false (apply (lambda (G37ca@e G37cb@e*) (list 'if G37ca@e (cons 'begin G37cb@e*))) G37c8@ls/false) ((lambda (G37ce@t) ((lambda (G37d0@ls/false) (if G37d0@ls/false (apply (lambda () (G3183@syntax-violation '#f '"invalid last clause" G37a0@stx)) G37d0@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G37ce@t))) (G3090@syntax-dispatch G37ce@t '_))) G37c6@t))) (G3090@syntax-dispatch G37c6@t '(any . each-any)))) G37c0@t))) (G3090@syntax-dispatch G37c0@t '(any)))) G37b8@t))) (G3090@syntax-dispatch G37b8@t '(any #(scheme-id =>) any)))) G37b0@t))) (G3090@syntax-dispatch G37b0@t '(#(scheme-id else) any . each-any)))) G37ac@cls) ((lambda (G37d2@t) ((lambda (G37d4@ls/false) (if G37d4@ls/false (apply (lambda (G37d6@e G37d7@e*) (G3183@syntax-violation '#f '"incorrect position of keyword else" G37a0@stx)) G37d4@ls/false) ((lambda (G37da@t) ((lambda (G37dc@ls/false) (if G37dc@ls/false (apply (lambda (G37de@e G37df@p) (list 'let (list (list 't G37de@e)) (list 'if 't (cons G37df@p '(t)) (G37aa@f (car G37ad@cls*) (cdr G37ad@cls*))))) G37dc@ls/false) ((lambda (G37e2@t) ((lambda (G37e4@ls/false) (if G37e4@ls/false (apply (lambda (G37e6@e) (list 'or G37e6@e (G37aa@f (car G37ad@cls*) (cdr G37ad@cls*)))) G37e4@ls/false) ((lambda (G37e8@t) ((lambda (G37ea@ls/false) (if G37ea@ls/false (apply (lambda (G37ec@e G37ed@e*) (list 'if G37ec@e (cons 'begin G37ed@e*) (G37aa@f (car G37ad@cls*) (cdr G37ad@cls*)))) G37ea@ls/false) ((lambda (G37f0@t) ((lambda (G37f2@ls/false) (if G37f2@ls/false (apply (lambda () (G3183@syntax-violation '#f '"invalid last clause" G37a0@stx)) G37f2@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G37f0@t))) (G3090@syntax-dispatch G37f0@t '_))) G37e8@t))) (G3090@syntax-dispatch G37e8@t '(any . each-any)))) G37e2@t))) (G3090@syntax-dispatch G37e2@t '(any)))) G37da@t))) (G3090@syntax-dispatch G37da@t '(any #(scheme-id =>) any)))) G37d2@t))) (G3090@syntax-dispatch G37d2@t '(#(scheme-id else) any . each-any)))) G37ac@cls))))) G37aa@f) G37a6@cls G37a7@cls*))) G37a4@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G37a2@t))) (G3090@syntax-dispatch G37a2@t '(_ any . each-any)))) G37a0@stx))) (set! G3076@do-include (lambda (G37f4@stx G37f5@id G37f6@filename) ((lambda (G37fa@filename) (begin (if (not (if (string? G37fa@filename) (begin '#f (G2e4d@id? G37f5@id)) '#f)) (G3183@syntax-violation '#f '"invalid syntax" G37f4@stx) (void)) (cons (G3046@bless 'begin) (with-input-from-file G37fa@filename (lambda () ((letrec ((G37fc@f (lambda (G37fe@ls) ((lambda (G3800@x) (if (eof-object? G3800@x) (reverse G37fe@ls) (G37fc@f (cons (G2e2b@datum->stx G37f5@id G3800@x) G37fe@ls)))) (G2992@G2890@read-annotated))))) G37fc@f) '())))))) (G2e63@stx->datum G37f6@filename)))) (set! G3078@include-macro (lambda (G3802@e) ((lambda (G3804@t) ((lambda (G3806@ls/false) (if G3806@ls/false (apply (lambda (G3808@id G3809@filename) (G3076@do-include G3802@e G3808@id G3809@filename)) G3806@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3804@t))) (G3090@syntax-dispatch G3804@t '(any any)))) G3802@e))) (set! G307a@include-into-macro (lambda (G380c@e) ((lambda (G380e@t) ((lambda (G3810@ls/false) (if G3810@ls/false (apply (lambda (G3812@id G3813@filename) (G3076@do-include G380c@e G3812@id G3813@filename)) G3810@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G380e@t))) (G3090@syntax-dispatch G380e@t '(_ any any)))) G380c@e))) (set! G307c@syntax-rules-macro (lambda (G3816@e) ((lambda (G3818@t) ((lambda (G381a@ls/false) (if G381a@ls/false (apply (lambda (G381c@lits G381d@pat* G381e@tmp*) (begin (G3096@verify-literals G381c@lits G3816@e) (G3046@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G381c@lits (map (lambda (G3822@pat G3823@tmp) ((lambda (G3826@t) ((lambda (G3828@ls/false) (if G3828@ls/false (apply (lambda (G382a@rest) (list (cons 'g G382a@rest) (list 'syntax G3823@tmp))) G3828@ls/false) ((lambda (G382c@t) ((lambda (G382e@ls/false) (if G382e@ls/false (apply (lambda () (G3183@syntax-violation '#f '"invalid syntax-rules pattern" G3816@e G3822@pat)) G382e@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G382c@t))) (G3090@syntax-dispatch G382c@t '_))) G3826@t))) (G3090@syntax-dispatch G3826@t '(_ . any)))) G3822@pat)) G381d@pat* G381e@tmp*)))))))) G381a@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3818@t))) (G3090@syntax-dispatch G3818@t '(_ each-any . #(each (any any)))))) G3816@e))) (set! G307e@quasiquote-macro ((lambda () ((lambda (G3831@datum G385a@quasicons* G385c@quasicons G385e@quasiappend G3860@quasivector G3862@vquasi G3864@quasi) (begin (set! G3831@datum (lambda (G393f@x) (list (G301e@scheme-stx 'quote) (G2e35@mkstx G393f@x '() '() '())))) (set! G385a@quasicons* (lambda (G3937@x G3938@y) ((letrec ((G393b@f (lambda (G393d@x) (if (null? G393d@x) G3938@y (G385c@quasicons (car G393d@x) (G393b@f (cdr G393d@x))))))) G393b@f) G3937@x))) (set! G385c@quasicons (lambda (G3911@x G3912@y) ((lambda (G3915@t) ((lambda (G3917@ls/false) (if G3917@ls/false (apply (lambda (G3919@dy) ((lambda (G391b@t) ((lambda (G391d@ls/false) (if G391d@ls/false (apply (lambda (G391f@dx) (list (G301e@scheme-stx 'quote) (cons G391f@dx G3919@dy))) G391d@ls/false) ((lambda (G3921@t) ((lambda (G3923@ls/false) (if G3923@ls/false (apply (lambda () ((lambda (G3925@t) ((lambda (G3927@ls/false) (if G3927@ls/false (apply (lambda () (list (G301e@scheme-stx 'list) G3911@x)) G3927@ls/false) ((lambda (G3929@t) ((lambda (G392b@ls/false) (if G392b@ls/false (apply (lambda () (list (G301e@scheme-stx 'cons) G3911@x G3912@y)) G392b@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3929@t))) (G3090@syntax-dispatch G3929@t '_))) G3925@t))) (G3090@syntax-dispatch G3925@t '()))) G3919@dy)) G3923@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3921@t))) (G3090@syntax-dispatch G3921@t '_))) G391b@t))) (G3090@syntax-dispatch G391b@t '(#(scheme-id quote) any)))) G3911@x)) G3917@ls/false) ((lambda (G392d@t) ((lambda (G392f@ls/false) (if G392f@ls/false (apply (lambda (G3931@stuff) (cons* (G301e@scheme-stx 'list) G3911@x G3931@stuff)) G392f@ls/false) ((lambda (G3933@t) ((lambda (G3935@ls/false) (if G3935@ls/false (apply (lambda () (list (G301e@scheme-stx 'cons) G3911@x G3912@y)) G3935@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3933@t))) (G3090@syntax-dispatch G3933@t '_))) G392d@t))) (G3090@syntax-dispatch G392d@t '(#(scheme-id list) . each-any)))) G3915@t))) (G3090@syntax-dispatch G3915@t '(#(scheme-id quote) any)))) G3912@y))) (set! G385e@quasiappend (lambda (G38f7@x G38f8@y) ((lambda (G38fb@ls) (if (null? G38fb@ls) (list (G301e@scheme-stx 'quote) '()) (if (null? (cdr G38fb@ls)) (car G38fb@ls) (cons* (G301e@scheme-stx 'append) G38fb@ls)))) ((letrec ((G38fd@f (lambda (G38ff@x) (if (null? G38ff@x) ((lambda (G3901@t) ((lambda (G3903@ls/false) (if G3903@ls/false (apply (lambda () '()) G3903@ls/false) ((lambda (G3905@t) ((lambda (G3907@ls/false) (if G3907@ls/false (apply (lambda () (list G38f8@y)) G3907@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3905@t))) (G3090@syntax-dispatch G3905@t '_))) G3901@t))) (G3090@syntax-dispatch G3901@t '(#(scheme-id quote) ())))) G38f8@y) ((lambda (G3909@t) ((lambda (G390b@ls/false) (if G390b@ls/false (apply (lambda () (G38fd@f (cdr G38ff@x))) G390b@ls/false) ((lambda (G390d@t) ((lambda (G390f@ls/false) (if G390f@ls/false (apply (lambda () (cons (car G38ff@x) (G38fd@f (cdr G38ff@x)))) G390f@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G390d@t))) (G3090@syntax-dispatch G390d@t '_))) G3909@t))) (G3090@syntax-dispatch G3909@t '(#(scheme-id quote) ())))) (car G38ff@x)))))) G38fd@f) G38f7@x)))) (set! G3860@quasivector (lambda (G38c5@x) ((lambda (G38c7@pat-x) ((lambda (G38c9@t) ((lambda (G38cb@ls/false) (if G38cb@ls/false (apply (lambda (G38cd@x*) (list (G301e@scheme-stx 'quote) (list->vector G38cd@x*))) G38cb@ls/false) ((lambda (G38cf@t) ((lambda (G38d1@ls/false) (if G38d1@ls/false (apply (lambda () ((letrec ((G38d3@f (lambda (G38d5@x G38d6@k) ((lambda (G38d9@t) ((lambda (G38db@ls/false) (if G38db@ls/false (apply (lambda (G38dd@x*) (G38d6@k (map (lambda (G38df@x) (list (G301e@scheme-stx 'quote) G38df@x)) G38dd@x*))) G38db@ls/false) ((lambda (G38e1@t) ((lambda (G38e3@ls/false) (if G38e3@ls/false (apply (lambda (G38e5@x*) (G38d6@k G38e5@x*)) G38e3@ls/false) ((lambda (G38e7@t) ((lambda (G38e9@ls/false) (if G38e9@ls/false (apply (lambda (G38eb@x G38ec@y) (G38d3@f G38ec@y (lambda (G38ef@ls) (G38d6@k (cons G38eb@x G38ef@ls))))) G38e9@ls/false) ((lambda (G38f1@t) ((lambda (G38f3@ls/false) (if G38f3@ls/false (apply (lambda () (list (G301e@scheme-stx 'list->vector) G38c7@pat-x)) G38f3@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G38f1@t))) (G3090@syntax-dispatch G38f1@t '_))) G38e7@t))) (G3090@syntax-dispatch G38e7@t '(#(scheme-id cons) any any)))) G38e1@t))) (G3090@syntax-dispatch G38e1@t '(#(scheme-id list) . each-any)))) G38d9@t))) (G3090@syntax-dispatch G38d9@t '(#(scheme-id quote) each-any)))) G38d5@x)))) G38d3@f) G38c5@x (lambda (G38f5@ls) (cons* (G301e@scheme-stx 'vector) G38f5@ls)))) G38d1@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G38cf@t))) (G3090@syntax-dispatch G38cf@t '_))) G38c9@t))) (G3090@syntax-dispatch G38c9@t '(#(scheme-id quote) each-any)))) G38c7@pat-x)) G38c5@x))) (set! G3862@vquasi (lambda (G38a3@p G38a4@lev) ((lambda (G38a7@t) ((lambda (G38a9@ls/false) (if G38a9@ls/false (apply (lambda (G38ab@p G38ac@q) ((lambda (G38af@t) ((lambda (G38b1@ls/false) (if G38b1@ls/false (apply (lambda (G38b3@p) (if (= G38a4@lev '0) (G385a@quasicons* G38b3@p (G3862@vquasi G38ac@q G38a4@lev)) (G385c@quasicons (G385c@quasicons (G3831@datum 'unquote) (G3864@quasi G38b3@p (- G38a4@lev '1))) (G3862@vquasi G38ac@q G38a4@lev)))) G38b1@ls/false) ((lambda (G38b5@t) ((lambda (G38b7@ls/false) (if G38b7@ls/false (apply (lambda (G38b9@p) (if (= G38a4@lev '0) (G385e@quasiappend G38b9@p (G3862@vquasi G38ac@q G38a4@lev)) (G385c@quasicons (G385c@quasicons (G3831@datum 'unquote-splicing) (G3864@quasi G38b9@p (- G38a4@lev '1))) (G3862@vquasi G38ac@q G38a4@lev)))) G38b7@ls/false) ((lambda (G38bb@t) ((lambda (G38bd@ls/false) (if G38bd@ls/false (apply (lambda (G38bf@p) (G385c@quasicons (G3864@quasi G38bf@p G38a4@lev) (G3862@vquasi G38ac@q G38a4@lev))) G38bd@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G38bb@t))) (G3090@syntax-dispatch G38bb@t 'any))) G38b5@t))) (G3090@syntax-dispatch G38b5@t '(#(scheme-id unquote-splicing) . each-any)))) G38af@t))) (G3090@syntax-dispatch G38af@t '(#(scheme-id unquote) . each-any)))) G38ab@p)) G38a9@ls/false) ((lambda (G38c1@t) ((lambda (G38c3@ls/false) (if G38c3@ls/false (apply (lambda () (list (G301e@scheme-stx 'quote) '())) G38c3@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G38c1@t))) (G3090@syntax-dispatch G38c1@t '()))) G38a7@t))) (G3090@syntax-dispatch G38a7@t '(any . any)))) G38a3@p))) (set! G3864@quasi (lambda (G386d@p G386e@lev) ((lambda (G3871@t) ((lambda (G3873@ls/false) (if G3873@ls/false (apply (lambda (G3875@p) (if (= G386e@lev '0) G3875@p (G385c@quasicons (G3831@datum 'unquote) (G3864@quasi (list G3875@p) (- G386e@lev '1))))) G3873@ls/false) ((lambda (G3877@t) ((lambda (G3879@ls/false) (if G3879@ls/false (apply (lambda (G387b@p G387c@q) (if (= G386e@lev '0) (G385a@quasicons* G387b@p (G3864@quasi G387c@q G386e@lev)) (G385c@quasicons (G385c@quasicons (G3831@datum 'unquote) (G3864@quasi G387b@p (- G386e@lev '1))) (G3864@quasi G387c@q G386e@lev)))) G3879@ls/false) ((lambda (G387f@t) ((lambda (G3881@ls/false) (if G3881@ls/false (apply (lambda (G3883@p G3884@q) (if (= G386e@lev '0) (G385e@quasiappend G3883@p (G3864@quasi G3884@q G386e@lev)) (G385c@quasicons (G385c@quasicons (G3831@datum 'unquote-splicing) (G3864@quasi G3883@p (- G386e@lev '1))) (G3864@quasi G3884@q G386e@lev)))) G3881@ls/false) ((lambda (G3887@t) ((lambda (G3889@ls/false) (if G3889@ls/false (apply (lambda (G388b@p) (G385c@quasicons (G3831@datum 'quasiquote) (G3864@quasi (list G388b@p) (+ G386e@lev '1)))) G3889@ls/false) ((lambda (G388d@t) ((lambda (G388f@ls/false) (if G388f@ls/false (apply (lambda (G3891@p G3892@q) (G385c@quasicons (G3864@quasi G3891@p G386e@lev) (G3864@quasi G3892@q G386e@lev))) G388f@ls/false) ((lambda (G3895@t) ((lambda (G3897@ls/false) (if (if G3897@ls/false (begin '#f (apply (lambda (G3899@x) (not (G2e15@stx? G3899@x))) G3897@ls/false)) '#f) (apply (lambda (G389b@x) (G3860@quasivector (G3862@vquasi G389b@x G386e@lev))) G3897@ls/false) ((lambda (G389d@t) ((lambda (G389f@ls/false) (if G389f@ls/false (apply (lambda (G38a1@p) (list (G301e@scheme-stx 'quote) G38a1@p)) G389f@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G389d@t))) (G3090@syntax-dispatch G389d@t 'any))) G3895@t))) (G3090@syntax-dispatch G3895@t '#(vector each-any)))) G388d@t))) (G3090@syntax-dispatch G388d@t '(any . any)))) G3887@t))) (G3090@syntax-dispatch G3887@t '(#(scheme-id quasiquote) any)))) G387f@t))) (G3090@syntax-dispatch G387f@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3877@t))) (G3090@syntax-dispatch G3877@t '((#(scheme-id unquote) . each-any) . any)))) G3871@t))) (G3090@syntax-dispatch G3871@t '(#(scheme-id unquote) any)))) G386d@p))) (lambda (G3865@x) ((lambda (G3867@t) ((lambda (G3869@ls/false) (if G3869@ls/false (apply (lambda (G386b@e) (G3864@quasi G386b@e '0)) G3869@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3867@t))) (G3090@syntax-dispatch G3867@t '(_ any)))) G3865@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G3080@quasisyntax-macro ((lambda () ((lambda (G3942@quasi) (begin (set! G3942@quasi (lambda (G395a@p G395b@lev) ((lambda (G395e@t) ((lambda (G3960@ls/false) (if G3960@ls/false (apply (lambda (G3962@p) (if (= G395b@lev '0) ((lambda (G3964@g) (values (list G3964@g) (list G3962@p) G3964@g)) (gensym)) (call-with-values (lambda () (G3942@quasi G3962@p (- G395b@lev '1))) (lambda (G3969@G3966 G396a@G3967 G396b@G3968) ((lambda (G396f@p G3970@rhs* G3971@lhs*) (values G3971@lhs* G3970@rhs* (list 'unsyntax G396f@p))) G396b@G3968 G396a@G3967 G3969@G3966))))) G3960@ls/false) ((lambda (G3975@t) ((lambda (G3977@ls/false) (if (if G3977@ls/false (begin '#f (apply (lambda () (= G395b@lev '0)) G3977@ls/false)) '#f) (apply (lambda () (G3183@syntax-violation '#f '"incorrect use of unsyntax" G395a@p)) G3977@ls/false) ((lambda (G3979@t) ((lambda (G397b@ls/false) (if G397b@ls/false (apply (lambda (G397d@p* G397e@q) (call-with-values (lambda () (G3942@quasi G397e@q G395b@lev)) (lambda (G3984@G3981 G3985@G3982 G3986@G3983) ((lambda (G398a@q G398b@rhs* G398c@lhs*) (if (= G395b@lev '0) ((lambda (G3990@g*) (values (append G3990@g* G398c@lhs*) (append G397d@p* G398b@rhs*) (append G3990@g* G398a@q))) (map (lambda (G3992@x) (gensym)) G397d@p*)) (call-with-values (lambda () (G3942@quasi G397d@p* (- G395b@lev '1))) (lambda (G3997@G3994 G3998@G3995 G3999@G3996) ((lambda (G399d@p* G399e@rhs2* G399f@lhs2*) (values (append G399f@lhs2* G398c@lhs*) (append G399e@rhs2* G398b@rhs*) (cons (cons 'unsyntax G399d@p*) G398a@q))) G3999@G3996 G3998@G3995 G3997@G3994))))) G3986@G3983 G3985@G3982 G3984@G3981)))) G397b@ls/false) ((lambda (G39a3@t) ((lambda (G39a5@ls/false) (if G39a5@ls/false (apply (lambda (G39a7@p* G39a8@q) (call-with-values (lambda () (G3942@quasi G39a8@q G395b@lev)) (lambda (G39ae@G39ab G39af@G39ac G39b0@G39ad) ((lambda (G39b4@q G39b5@rhs* G39b6@lhs*) (if (= G395b@lev '0) ((lambda (G39ba@g*) (values (append (map (lambda (G39bc@g) (cons G39bc@g '(...))) G39ba@g*) G39b6@lhs*) (append G39a7@p* G39b5@rhs*) (append (apply append (map (lambda (G39be@g) (cons G39be@g '(...))) G39ba@g*)) G39b4@q))) (map (lambda (G39c0@x) (gensym)) G39a7@p*)) (call-with-values (lambda () (G3942@quasi G39a7@p* (- G395b@lev '1))) (lambda (G39c5@G39c2 G39c6@G39c3 G39c7@G39c4) ((lambda (G39cb@p* G39cc@rhs2* G39cd@lhs2*) (values (append G39cd@lhs2* G39b6@lhs*) (append G39cc@rhs2* G39b5@rhs*) (cons (cons 'unsyntax-splicing G39cb@p*) G39b4@q))) G39c7@G39c4 G39c6@G39c3 G39c5@G39c2))))) G39b0@G39ad G39af@G39ac G39ae@G39ab)))) G39a5@ls/false) ((lambda (G39d1@t) ((lambda (G39d3@ls/false) (if (if G39d3@ls/false (begin '#f (apply (lambda () (= G395b@lev '0)) G39d3@ls/false)) '#f) (apply (lambda () (G3183@syntax-violation '#f '"incorrect use of unsyntax-splicing" G395a@p)) G39d3@ls/false) ((lambda (G39d5@t) ((lambda (G39d7@ls/false) (if G39d7@ls/false (apply (lambda (G39d9@p) (call-with-values (lambda () (G3942@quasi G39d9@p (+ G395b@lev '1))) (lambda (G39de@G39db G39df@G39dc G39e0@G39dd) ((lambda (G39e4@p G39e5@rhs* G39e6@lhs*) (values G39e6@lhs* G39e5@rhs* (list 'quasisyntax G39e4@p))) G39e0@G39dd G39df@G39dc G39de@G39db)))) G39d7@ls/false) ((lambda (G39ea@t) ((lambda (G39ec@ls/false) (if G39ec@ls/false (apply (lambda (G39ee@p G39ef@q) (call-with-values (lambda () (G3942@quasi G39ee@p G395b@lev)) (lambda (G39f8@G39f2 G39f9@G39f3 G39fa@G39f4) (call-with-values (lambda () (G3942@quasi G39ef@q G395b@lev)) (lambda (G39fe@G39f5 G39ff@G39f6 G3a00@G39f7) ((lambda (G3a04@q G3a05@rhs2* G3a06@lhs2* G3a07@p G3a08@rhs* G3a09@lhs*) (values (append G3a06@lhs2* G3a09@lhs*) (append G3a05@rhs2* G3a08@rhs*) (cons G3a07@p G3a04@q))) G3a00@G39f7 G39ff@G39f6 G39fe@G39f5 G39fa@G39f4 G39f9@G39f3 G39f8@G39f2)))))) G39ec@ls/false) ((lambda (G3a10@t) ((lambda (G3a12@ls/false) (if G3a12@ls/false (apply (lambda (G3a14@x*) (call-with-values (lambda () (G3942@quasi G3a14@x* G395b@lev)) (lambda (G3a19@G3a16 G3a1a@G3a17 G3a1b@G3a18) ((lambda (G3a1f@x* G3a20@rhs* G3a21@lhs*) (values G3a21@lhs* G3a20@rhs* (list->vector G3a1f@x*))) G3a1b@G3a18 G3a1a@G3a17 G3a19@G3a16)))) G3a12@ls/false) ((lambda (G3a25@t) ((lambda (G3a27@ls/false) (if G3a27@ls/false (apply (lambda () (values '() '() G395a@p)) G3a27@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3a25@t))) (G3090@syntax-dispatch G3a25@t '_))) G3a10@t))) (G3090@syntax-dispatch G3a10@t '#(vector each-any)))) G39ea@t))) (G3090@syntax-dispatch G39ea@t '(any . any)))) G39d5@t))) (G3090@syntax-dispatch G39d5@t '(#(scheme-id quasisyntax) any)))) G39d1@t))) (G3090@syntax-dispatch G39d1@t '#(scheme-id unsyntax-splicing)))) G39a3@t))) (G3090@syntax-dispatch G39a3@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3979@t))) (G3090@syntax-dispatch G3979@t '((#(scheme-id unsyntax) . each-any) . any)))) G3975@t))) (G3090@syntax-dispatch G3975@t '#(scheme-id unsyntax)))) G395e@t))) (G3090@syntax-dispatch G395e@t '(#(scheme-id unsyntax) any)))) G395a@p))) (lambda (G3943@x) ((lambda (G3945@t) ((lambda (G3947@ls/false) (if G3947@ls/false (apply (lambda (G3949@e) (call-with-values (lambda () (G3942@quasi G3949@e '0)) (lambda (G394e@G394b G394f@G394c G3950@G394d) ((lambda (G3954@v G3955@rhs* G3956@lhs*) (G3046@bless (list 'syntax-case (cons 'list G3955@rhs*) '() (list G3956@lhs* (list 'syntax G3954@v))))) G3950@G394d G394f@G394c G394e@G394b)))) G3947@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3945@t))) (G3090@syntax-dispatch G3945@t '(_ any)))) G3943@x)))) '#f)))) (set! G3082@define-struct-macro (lambda (G3a29@stx) (G3183@syntax-violation '#f '"define-struct not supported" G3a29@stx))) (set! G3084@define-record-type-macro (lambda (G3a2b@x) ((lambda (G3a2e@id G3a30@get-record-name G3a32@get-record-constructor-name G3a34@get-record-predicate-name G3a36@get-clause G3a38@foo-rtd-code G3a3a@parent-rtd-code G3a3c@parent-rcd-code G3a3e@foo-rcd-code G3a40@get-protocol-code G3a42@get-fields G3a44@get-mutator-indices G3a46@get-mutators G3a48@get-accessors G3a4a@enumerate G3a4c@do-define-record G3a4e@verify-clauses) (begin (set! G3a2e@id (lambda (G3c25@ctxt . G3c27@str*) (G3187@datum->syntax G3c25@ctxt (string->symbol (apply string-append (map (lambda (G3c29@x) (if (symbol? G3c29@x) (symbol->string G3c29@x) (if (string? G3c29@x) G3c29@x (assertion-violation 'define-record-type '"BUG")))) G3c27@str*)))))) (set! G3a30@get-record-name (lambda (G3c13@spec) ((lambda (G3c15@t) ((lambda (G3c17@ls/false) (if G3c17@ls/false (apply (lambda (G3c19@foo G3c1a@make-foo G3c1b@foo?) G3c19@foo) G3c17@ls/false) ((lambda (G3c1f@t) ((lambda (G3c21@ls/false) (if G3c21@ls/false (apply (lambda (G3c23@foo) G3c23@foo) G3c21@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3c1f@t))) (G3090@syntax-dispatch G3c1f@t 'any))) G3c15@t))) (G3090@syntax-dispatch G3c15@t '(any any any)))) G3c13@spec))) (set! G3a32@get-record-constructor-name (lambda (G3bff@spec) ((lambda (G3c01@t) ((lambda (G3c03@ls/false) (if G3c03@ls/false (apply (lambda (G3c05@foo G3c06@make-foo G3c07@foo?) G3c06@make-foo) G3c03@ls/false) ((lambda (G3c0b@t) ((lambda (G3c0d@ls/false) (if (if G3c0d@ls/false (begin '#f (apply (lambda (G3c0f@foo) (G2e4d@id? G3c0f@foo)) G3c0d@ls/false)) '#f) (apply (lambda (G3c11@foo) (G3a2e@id G3c11@foo '"make-" (G2e63@stx->datum G3c11@foo))) G3c0d@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3c0b@t))) (G3090@syntax-dispatch G3c0b@t 'any))) G3c01@t))) (G3090@syntax-dispatch G3c01@t '(any any any)))) G3bff@spec))) (set! G3a34@get-record-predicate-name (lambda (G3beb@spec) ((lambda (G3bed@t) ((lambda (G3bef@ls/false) (if G3bef@ls/false (apply (lambda (G3bf1@foo G3bf2@make-foo G3bf3@foo?) G3bf3@foo?) G3bef@ls/false) ((lambda (G3bf7@t) ((lambda (G3bf9@ls/false) (if (if G3bf9@ls/false (begin '#f (apply (lambda (G3bfb@foo) (G2e4d@id? G3bfb@foo)) G3bf9@ls/false)) '#f) (apply (lambda (G3bfd@foo) (G3a2e@id G3bfd@foo (G2e63@stx->datum G3bfd@foo) '"?")) G3bf9@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3bf7@t))) (G3090@syntax-dispatch G3bf7@t 'any))) G3bed@t))) (G3090@syntax-dispatch G3bed@t '(any any any)))) G3beb@spec))) (set! G3a36@get-clause (lambda (G3bd9@id G3bda@ls) ((lambda (G3bdd@t) ((lambda (G3bdf@ls/false) (if G3bdf@ls/false (apply (lambda () '#f) G3bdf@ls/false) ((lambda (G3be1@t) ((lambda (G3be3@ls/false) (if G3be3@ls/false (apply (lambda (G3be5@x G3be6@rest G3be7@ls) (if (G2e55@free-id=? (G3046@bless G3bd9@id) G3be5@x) (cons G3be5@x G3be6@rest) (G3a36@get-clause G3bd9@id G3be7@ls))) G3be3@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3be1@t))) (G3090@syntax-dispatch G3be1@t '((any . any) . any)))) G3bdd@t))) (G3090@syntax-dispatch G3bdd@t '()))) G3bda@ls))) (set! G3a38@foo-rtd-code (lambda (G3b87@name G3b88@clause* G3b89@parent-rtd-code) ((lambda (G3b8e@convert-field-spec*) (begin (set! G3b8e@convert-field-spec* (lambda (G3bbf@ls) (list->vector (map (lambda (G3bc1@x) ((lambda (G3bc3@t) ((lambda (G3bc5@ls/false) (if G3bc5@ls/false (apply (lambda (G3bc7@name G3bc8@rest) (list 'mutable G3bc7@name)) G3bc5@ls/false) ((lambda (G3bcb@t) ((lambda (G3bcd@ls/false) (if G3bcd@ls/false (apply (lambda (G3bcf@name G3bd0@rest) (list 'immutable G3bcf@name)) G3bcd@ls/false) ((lambda (G3bd3@t) ((lambda (G3bd5@ls/false) (if G3bd5@ls/false (apply (lambda (G3bd7@name) (list 'immutable G3bd7@name)) G3bd5@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3bd3@t))) (G3090@syntax-dispatch G3bd3@t 'any))) G3bcb@t))) (G3090@syntax-dispatch G3bcb@t '(#(scheme-id immutable) any . any)))) G3bc3@t))) (G3090@syntax-dispatch G3bc3@t '(#(scheme-id mutable) any . any)))) G3bc1@x)) G3bbf@ls)))) ((lambda (G3b8f@uid-code G3b90@sealed? G3b91@opaque? G3b92@fields) (G3046@bless (list 'make-record-type-descriptor (list 'quote G3b87@name) G3b89@parent-rtd-code G3b8f@uid-code G3b90@sealed? G3b91@opaque? G3b92@fields))) ((lambda (G3b97@t) ((lambda (G3b99@ls/false) (if G3b99@ls/false (apply (lambda () (list 'quote (gensym))) G3b99@ls/false) ((lambda (G3b9b@t) ((lambda (G3b9d@ls/false) (if G3b9d@ls/false (apply (lambda (G3b9f@uid) (list 'quote G3b9f@uid)) G3b9d@ls/false) ((lambda (G3ba1@t) ((lambda (G3ba3@ls/false) (if G3ba3@ls/false (apply (lambda () '#f) G3ba3@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3ba1@t))) (G3090@syntax-dispatch G3ba1@t '_))) G3b9b@t))) (G3090@syntax-dispatch G3b9b@t '(_ any)))) G3b97@t))) (G3090@syntax-dispatch G3b97@t '(_)))) (G3a36@get-clause 'nongenerative G3b88@clause*)) ((lambda (G3ba5@t) ((lambda (G3ba7@ls/false) (if G3ba7@ls/false (apply (lambda () '#t) G3ba7@ls/false) ((lambda (G3ba9@t) ((lambda (G3bab@ls/false) (if G3bab@ls/false (apply (lambda () '#f) G3bab@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3ba9@t))) (G3090@syntax-dispatch G3ba9@t '_))) G3ba5@t))) (G3090@syntax-dispatch G3ba5@t '(_ #(atom #t))))) (G3a36@get-clause 'sealed G3b88@clause*)) ((lambda (G3bad@t) ((lambda (G3baf@ls/false) (if G3baf@ls/false (apply (lambda () '#t) G3baf@ls/false) ((lambda (G3bb1@t) ((lambda (G3bb3@ls/false) (if G3bb3@ls/false (apply (lambda () '#f) G3bb3@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3bb1@t))) (G3090@syntax-dispatch G3bb1@t '_))) G3bad@t))) (G3090@syntax-dispatch G3bad@t '(_ #(atom #t))))) (G3a36@get-clause 'opaque G3b88@clause*)) ((lambda (G3bb5@t) ((lambda (G3bb7@ls/false) (if G3bb7@ls/false (apply (lambda (G3bb9@field-spec*) (list 'quote (G3b8e@convert-field-spec* G3bb9@field-spec*))) G3bb7@ls/false) ((lambda (G3bbb@t) ((lambda (G3bbd@ls/false) (if G3bbd@ls/false (apply (lambda () ''#()) G3bbd@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3bbb@t))) (G3090@syntax-dispatch G3bbb@t '_))) G3bb5@t))) (G3090@syntax-dispatch G3bb5@t '(_ . each-any)))) (G3a36@get-clause 'fields G3b88@clause*))))) '#f))) (set! G3a3a@parent-rtd-code (lambda (G3b6f@clause*) ((lambda (G3b71@t) ((lambda (G3b73@ls/false) (if G3b73@ls/false (apply (lambda (G3b75@name) (list 'record-type-descriptor G3b75@name)) G3b73@ls/false) ((lambda (G3b77@t) ((lambda (G3b79@ls/false) (if G3b79@ls/false (apply (lambda () ((lambda (G3b7b@t) ((lambda (G3b7d@ls/false) (if G3b7d@ls/false (apply (lambda (G3b7f@rtd G3b80@rcd) G3b7f@rtd) G3b7d@ls/false) ((lambda (G3b83@t) ((lambda (G3b85@ls/false) (if G3b85@ls/false (apply (lambda () '#f) G3b85@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3b83@t))) (G3090@syntax-dispatch G3b83@t '#(atom #f)))) G3b7b@t))) (G3090@syntax-dispatch G3b7b@t '(_ any any)))) (G3a36@get-clause 'parent-rtd G3b6f@clause*))) G3b79@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3b77@t))) (G3090@syntax-dispatch G3b77@t '#(atom #f)))) G3b71@t))) (G3090@syntax-dispatch G3b71@t '(_ any)))) (G3a36@get-clause 'parent G3b6f@clause*)))) (set! G3a3c@parent-rcd-code (lambda (G3b57@clause*) ((lambda (G3b59@t) ((lambda (G3b5b@ls/false) (if G3b5b@ls/false (apply (lambda (G3b5d@name) (list 'record-constructor-descriptor G3b5d@name)) G3b5b@ls/false) ((lambda (G3b5f@t) ((lambda (G3b61@ls/false) (if G3b61@ls/false (apply (lambda () ((lambda (G3b63@t) ((lambda (G3b65@ls/false) (if G3b65@ls/false (apply (lambda (G3b67@rtd G3b68@rcd) G3b68@rcd) G3b65@ls/false) ((lambda (G3b6b@t) ((lambda (G3b6d@ls/false) (if G3b6d@ls/false (apply (lambda () '#f) G3b6d@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3b6b@t))) (G3090@syntax-dispatch G3b6b@t '#(atom #f)))) G3b63@t))) (G3090@syntax-dispatch G3b63@t '(_ any any)))) (G3a36@get-clause 'parent-rtd G3b57@clause*))) G3b61@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3b5f@t))) (G3090@syntax-dispatch G3b5f@t '#(atom #f)))) G3b59@t))) (G3090@syntax-dispatch G3b59@t '(_ any)))) (G3a36@get-clause 'parent G3b57@clause*)))) (set! G3a3e@foo-rcd-code (lambda (G3b4f@clause* G3b50@foo-rtd G3b51@protocol G3b52@parent-rcd-code) (list 'make-record-constructor-descriptor G3b50@foo-rtd G3b52@parent-rcd-code G3b51@protocol))) (set! G3a40@get-protocol-code (lambda (G3b43@clause*) ((lambda (G3b45@t) ((lambda (G3b47@ls/false) (if G3b47@ls/false (apply (lambda (G3b49@expr) G3b49@expr) G3b47@ls/false) ((lambda (G3b4b@t) ((lambda (G3b4d@ls/false) (if G3b4d@ls/false (apply (lambda () '#f) G3b4d@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3b4b@t))) (G3090@syntax-dispatch G3b4b@t '_))) G3b45@t))) (G3090@syntax-dispatch G3b45@t '(_ any)))) (G3a36@get-clause 'protocol G3b43@clause*)))) (set! G3a42@get-fields (lambda (G3b31@clause*) ((lambda (G3b33@t) ((lambda (G3b35@ls/false) (if G3b35@ls/false (apply (lambda () '()) G3b35@ls/false) ((lambda (G3b37@t) ((lambda (G3b39@ls/false) (if G3b39@ls/false (apply (lambda (G3b3b@f*) G3b3b@f*) G3b39@ls/false) ((lambda (G3b3d@t) ((lambda (G3b3f@ls/false) (if G3b3f@ls/false (apply (lambda (G3b41@rest) (G3a42@get-fields G3b41@rest)) G3b3f@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3b3d@t))) (G3090@syntax-dispatch G3b3d@t '(_ . any)))) G3b37@t))) (G3090@syntax-dispatch G3b37@t '((#(scheme-id fields) . each-any) . _)))) G3b33@t))) (G3090@syntax-dispatch G3b33@t '()))) G3b31@clause*))) (set! G3a44@get-mutator-indices (lambda (G3b19@fields) ((letrec ((G3b1b@f (lambda (G3b1d@fields G3b1e@i) ((lambda (G3b21@t) ((lambda (G3b23@ls/false) (if G3b23@ls/false (apply (lambda () '()) G3b23@ls/false) ((lambda (G3b25@t) ((lambda (G3b27@ls/false) (if G3b27@ls/false (apply (lambda (G3b29@rest) (cons G3b1e@i (G3b1b@f G3b29@rest (+ G3b1e@i '1)))) G3b27@ls/false) ((lambda (G3b2b@t) ((lambda (G3b2d@ls/false) (if G3b2d@ls/false (apply (lambda (G3b2f@rest) (G3b1b@f G3b2f@rest (+ G3b1e@i '1))) G3b2d@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3b2b@t))) (G3090@syntax-dispatch G3b2b@t '(_ . any)))) G3b25@t))) (G3090@syntax-dispatch G3b25@t '((#(scheme-id mutable) . _) . any)))) G3b21@t))) (G3090@syntax-dispatch G3b21@t '()))) G3b1d@fields)))) G3b1b@f) G3b19@fields '0))) (set! G3a46@get-mutators (lambda (G3aef@foo G3af0@fields) ((lambda (G3af4@gen-name) (begin (set! G3af4@gen-name (lambda (G3b17@x) (G3187@datum->syntax G3aef@foo (string->symbol (string-append (symbol->string (G3189@syntax->datum G3aef@foo)) '"-" (symbol->string (G3189@syntax->datum G3b17@x)) '"-set!"))))) ((letrec ((G3af5@f (lambda (G3af7@fields) ((lambda (G3af9@t) ((lambda (G3afb@ls/false) (if G3afb@ls/false (apply (lambda () '()) G3afb@ls/false) ((lambda (G3afd@t) ((lambda (G3aff@ls/false) (if G3aff@ls/false (apply (lambda (G3b01@name G3b02@accessor G3b03@mutator G3b04@rest) (cons G3b03@mutator (G3af5@f G3b04@rest))) G3aff@ls/false) ((lambda (G3b09@t) ((lambda (G3b0b@ls/false) (if G3b0b@ls/false (apply (lambda (G3b0d@name G3b0e@rest) (cons (G3af4@gen-name G3b0d@name) (G3af5@f G3b0e@rest))) G3b0b@ls/false) ((lambda (G3b11@t) ((lambda (G3b13@ls/false) (if G3b13@ls/false (apply (lambda (G3b15@rest) (G3af5@f G3b15@rest)) G3b13@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3b11@t))) (G3090@syntax-dispatch G3b11@t '(_ . any)))) G3b09@t))) (G3090@syntax-dispatch G3b09@t '((#(scheme-id mutable) any) . any)))) G3afd@t))) (G3090@syntax-dispatch G3afd@t '((#(scheme-id mutable) any any any) . any)))) G3af9@t))) (G3090@syntax-dispatch G3af9@t '()))) G3af7@fields)))) G3af5@f) G3af0@fields))) '#f))) (set! G3a48@get-accessors (lambda (G3aab@foo G3aac@fields) ((lambda (G3ab0@gen-name) (begin (set! G3ab0@gen-name (lambda (G3aed@x) (G3187@datum->syntax G3aab@foo (string->symbol (string-append (symbol->string (G3189@syntax->datum G3aab@foo)) '"-" (symbol->string (G3189@syntax->datum G3aed@x))))))) (map (lambda (G3ab1@field) ((lambda (G3ab3@t) ((lambda (G3ab5@ls/false) (if (if G3ab5@ls/false (begin '#f (apply (lambda (G3ab7@name G3ab8@accessor G3ab9@mutator) (G2e4d@id? G3ab8@accessor)) G3ab5@ls/false)) '#f) (apply (lambda (G3abd@name G3abe@accessor G3abf@mutator) G3abe@accessor) G3ab5@ls/false) ((lambda (G3ac3@t) ((lambda (G3ac5@ls/false) (if (if G3ac5@ls/false (begin '#f (apply (lambda (G3ac7@name G3ac8@accessor) (G2e4d@id? G3ac8@accessor)) G3ac5@ls/false)) '#f) (apply (lambda (G3acb@name G3acc@accessor) G3acc@accessor) G3ac5@ls/false) ((lambda (G3acf@t) ((lambda (G3ad1@ls/false) (if (if G3ad1@ls/false (begin '#f (apply (lambda (G3ad3@name) (G2e4d@id? G3ad3@name)) G3ad1@ls/false)) '#f) (apply (lambda (G3ad5@name) (G3ab0@gen-name G3ad5@name)) G3ad1@ls/false) ((lambda (G3ad7@t) ((lambda (G3ad9@ls/false) (if (if G3ad9@ls/false (begin '#f (apply (lambda (G3adb@name) (G2e4d@id? G3adb@name)) G3ad9@ls/false)) '#f) (apply (lambda (G3add@name) (G3ab0@gen-name G3add@name)) G3ad9@ls/false) ((lambda (G3adf@t) ((lambda (G3ae1@ls/false) (if (if G3ae1@ls/false (begin '#f (apply (lambda (G3ae3@name) (G2e4d@id? G3ae3@name)) G3ae1@ls/false)) '#f) (apply (lambda (G3ae5@name) (G3ab0@gen-name G3ae5@name)) G3ae1@ls/false) ((lambda (G3ae7@t) ((lambda (G3ae9@ls/false) (if G3ae9@ls/false (apply (lambda (G3aeb@others) (G3183@syntax-violation '#f '"invalid field spec" G3ab1@field)) G3ae9@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3ae7@t))) (G3090@syntax-dispatch G3ae7@t 'any))) G3adf@t))) (G3090@syntax-dispatch G3adf@t 'any))) G3ad7@t))) (G3090@syntax-dispatch G3ad7@t '(#(scheme-id immutable) any)))) G3acf@t))) (G3090@syntax-dispatch G3acf@t '(#(scheme-id mutable) any)))) G3ac3@t))) (G3090@syntax-dispatch G3ac3@t '(#(scheme-id immutable) any any)))) G3ab3@t))) (G3090@syntax-dispatch G3ab3@t '(#(scheme-id mutable) any any any)))) G3ab1@field)) G3aac@fields))) '#f))) (set! G3a4a@enumerate (lambda (G3aa3@ls) ((letrec ((G3aa5@f (lambda (G3aa7@ls G3aa8@i) (if (null? G3aa7@ls) '() (cons G3aa8@i (G3aa5@f (cdr G3aa7@ls) (+ G3aa8@i '1))))))) G3aa5@f) G3aa3@ls '0))) (set! G3a4c@do-define-record (lambda (G3a7b@namespec G3a7c@clause*) ((lambda (G3a7f@foo) ((lambda (G3a81@foo-rtd) ((lambda (G3a83@foo-rcd) ((lambda (G3a85@protocol) ((lambda (G3a87@make-foo) ((lambda (G3a89@fields) ((lambda (G3a8b@idx*) ((lambda (G3a8d@foo-x*) ((lambda (G3a8f@set-foo-x!*) ((lambda (G3a91@set-foo-idx*) ((lambda (G3a93@foo?) ((lambda (G3a95@foo-rtd-code) ((lambda (G3a97@foo-rcd-code) ((lambda (G3a99@protocol-code) ((lambda () (G3046@bless (cons 'begin (cons (list 'define G3a81@foo-rtd G3a95@foo-rtd-code) (cons (list 'define G3a85@protocol G3a99@protocol-code) (cons (list 'define G3a83@foo-rcd G3a97@foo-rcd-code) (cons (list 'define-syntax G3a7f@foo (list 'list ''$rtd (list 'syntax G3a81@foo-rtd) (list 'syntax G3a83@foo-rcd))) (cons (list 'define G3a93@foo? (list 'record-predicate G3a81@foo-rtd)) (cons (list 'define G3a87@make-foo (list 'record-constructor G3a83@foo-rcd)) (append (map (lambda (G3a9b@foo-x G3a9c@idx) (list 'define G3a9b@foo-x (list 'record-accessor G3a81@foo-rtd G3a9c@idx))) G3a8d@foo-x* G3a8b@idx*) (map (lambda (G3a9f@set-foo-x! G3aa0@idx) (list 'define G3a9f@set-foo-x! (list 'record-mutator G3a81@foo-rtd G3aa0@idx))) G3a8f@set-foo-x!* G3a91@set-foo-idx*))))))))))))) (G3a40@get-protocol-code G3a7c@clause*))) (G3a3e@foo-rcd-code G3a7c@clause* G3a81@foo-rtd G3a85@protocol (G3a3c@parent-rcd-code G3a7c@clause*)))) (G3a38@foo-rtd-code G3a7f@foo G3a7c@clause* (G3a3a@parent-rtd-code G3a7c@clause*)))) (G3a34@get-record-predicate-name G3a7b@namespec))) (G3a44@get-mutator-indices G3a89@fields))) (G3a46@get-mutators G3a7f@foo G3a89@fields))) (G3a48@get-accessors G3a7f@foo G3a89@fields))) (G3a4a@enumerate G3a89@fields))) (G3a42@get-fields G3a7c@clause*))) (G3a32@get-record-constructor-name G3a7b@namespec))) (gensym))) (gensym))) (gensym))) (G3a30@get-record-name G3a7b@namespec)))) (set! G3a4e@verify-clauses (lambda (G3a57@x G3a58@cls*) ((lambda (G3a5c@valid-kwds G3a5e@free-id-member?) (begin (set! G3a5c@valid-kwds (map G3046@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3a5e@free-id-member? (lambda (G3a75@x G3a76@ls) (if (pair? G3a76@ls) (begin '#f ((lambda (G3a79@t) (if G3a79@t G3a79@t (begin '#f (G3a5e@free-id-member? G3a75@x (cdr G3a76@ls))))) (G2e55@free-id=? G3a75@x (car G3a76@ls)))) '#f))) ((letrec ((G3a5f@f (lambda (G3a61@cls* G3a62@seen*) (if (not (null? G3a61@cls*)) ((lambda (G3a65@t) ((lambda (G3a67@ls/false) (if G3a67@ls/false (apply (lambda (G3a69@kwd G3a6a@rest) (if ((lambda (G3a6d@t) (if G3a6d@t G3a6d@t (begin '#f (not (G3a5e@free-id-member? G3a69@kwd G3a5c@valid-kwds))))) (not (G2e4d@id? G3a69@kwd))) (G3183@syntax-violation '#f '"not a valid define-record-type keyword" G3a69@kwd) (if (G2e5b@bound-id-member? G3a69@kwd G3a62@seen*) (G3183@syntax-violation '#f '"duplicate use of keyword " G3a57@x G3a69@kwd) (G3a5f@f (cdr G3a61@cls*) (cons G3a69@kwd G3a62@seen*))))) G3a67@ls/false) ((lambda (G3a6f@t) ((lambda (G3a71@ls/false) (if G3a71@ls/false (apply (lambda (G3a73@cls) (G3183@syntax-violation '#f '"malformed define-record-type clause" G3a73@cls)) G3a71@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3a6f@t))) (G3090@syntax-dispatch G3a6f@t 'any))) G3a65@t))) (G3090@syntax-dispatch G3a65@t '(any . any)))) (car G3a61@cls*)) (void))))) G3a5f@f) G3a58@cls* '()))) '#f '#f))) ((lambda (G3a4f@t) ((lambda (G3a51@ls/false) (if G3a51@ls/false (apply (lambda (G3a53@namespec G3a54@clause*) (begin (G3a4e@verify-clauses G3a2b@x G3a54@clause*) (G3a4c@do-define-record G3a53@namespec G3a54@clause*))) G3a51@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3a4f@t))) (G3090@syntax-dispatch G3a4f@t '(_ any . each-any)))) G3a2b@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3086@define-condition-type-macro (lambda (G3c2b@x) ((lambda (G3c2e@mkname) (begin (set! G3c2e@mkname (lambda (G3c5b@name G3c5c@suffix) (G3187@datum->syntax G3c5b@name (string->symbol (string-append (symbol->string (G3189@syntax->datum G3c5b@name)) G3c5c@suffix))))) ((lambda (G3c2f@t) ((lambda (G3c31@ls/false) (if (if G3c31@ls/false (begin '#f (apply (lambda (G3c33@ctxt G3c34@name G3c35@super G3c36@constructor G3c37@predicate G3c38@field* G3c39@accessor*) (if (G2e4d@id? G3c34@name) (if (G2e4d@id? G3c35@super) (if (G2e4d@id? G3c36@constructor) (if (G2e4d@id? G3c37@predicate) (if (for-all G2e4d@id? G3c38@field*) (begin '#f (for-all G2e4d@id? G3c39@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3c31@ls/false)) '#f) (apply (lambda (G3c41@ctxt G3c42@name G3c43@super G3c44@constructor G3c45@predicate G3c46@field* G3c47@accessor*) ((lambda (G3c4f@aux-accessor*) (G3046@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3c42@name G3c44@constructor (gensym)) (cons (list 'parent G3c43@super) (cons (cons 'fields (map (lambda (G3c51@field G3c52@aux) (list 'immutable G3c51@field G3c52@aux)) G3c46@field* G3c4f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3c45@predicate (list 'condition-predicate (list 'record-type-descriptor G3c42@name))) (map (lambda (G3c55@accessor G3c56@aux) (list 'define G3c55@accessor (list 'condition-accessor (list 'record-type-descriptor G3c42@name) G3c56@aux))) G3c47@accessor* G3c4f@aux-accessor*)))))) (map (lambda (G3c59@x) (gensym)) G3c47@accessor*))) G3c31@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3c2f@t))) (G3090@syntax-dispatch G3c2f@t '(any any any any any . #(each (any any)))))) G3c2b@x))) '#f))) (set! G3088@incorrect-usage-macro (lambda (G3c5f@e) (G3183@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3c5f@e))) (set! G308a@parameterize-macro (lambda (G3c61@e) ((lambda (G3c63@t) ((lambda (G3c65@ls/false) (if G3c65@ls/false (apply (lambda (G3c67@b G3c68@b*) (G3046@bless (cons 'let (cons '() (cons G3c67@b G3c68@b*))))) G3c65@ls/false) ((lambda (G3c6b@t) ((lambda (G3c6d@ls/false) (if G3c6d@ls/false (apply (lambda (G3c6f@olhs* G3c70@orhs* G3c71@b G3c72@b*) ((lambda (G3c77@lhs* G3c78@rhs*) (G3046@bless (cons (list 'lambda (append G3c77@lhs* G3c78@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3c7b@lhs G3c7c@rhs) (list 'let (list (list 't (list G3c7b@lhs))) (list G3c7b@lhs G3c7c@rhs) (cons 'set! (cons G3c7c@rhs '(t))))) G3c77@lhs* G3c78@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3c71@b G3c72@b*))) '(swap)))))) (append G3c6f@olhs* G3c70@orhs*)))) (G316f@generate-temporaries G3c6f@olhs*) (G316f@generate-temporaries G3c70@orhs*))) G3c6d@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3c6b@t))) (G3090@syntax-dispatch G3c6b@t '(_ #(each (any any)) any . each-any)))) G3c63@t))) (G3090@syntax-dispatch G3c63@t '(_ () any . each-any)))) G3c61@e))) (set! G308c@foreign-call-transformer (lambda (G3c7f@e G3c80@r G3c81@mr) ((lambda (G3c85@t) ((lambda (G3c87@ls/false) (if G3c87@ls/false (apply (lambda (G3c89@name G3c8a@arg*) (cons 'foreign-call (cons (G30b4@chi-expr G3c89@name G3c80@r G3c81@mr) (G30b0@chi-expr* G3c8a@arg* G3c80@r G3c81@mr)))) G3c87@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3c85@t))) (G3090@syntax-dispatch G3c85@t '(_ any . each-any)))) G3c7f@e))) (set! G308e@convert-pattern (lambda (G3c8d@pattern G3c8e@keys) ((lambda (G3c92@cvt* G3c94@cvt) (begin (set! G3c92@cvt* (lambda (G3d23@p* G3d24@n G3d25@ids) (if (null? G3d23@p*) (values '() G3d25@ids) (call-with-values (lambda () (G3c92@cvt* (cdr G3d23@p*) G3d24@n G3d25@ids)) (lambda (G3d2b@G3d29 G3d2c@G3d2a) ((lambda (G3d2f@ids G3d30@y) (call-with-values (lambda () (G3c94@cvt (car G3d23@p*) G3d24@n G3d2f@ids)) (lambda (G3d35@G3d33 G3d36@G3d34) ((lambda (G3d39@ids G3d3a@x) (values (cons G3d3a@x G3d30@y) G3d39@ids)) G3d36@G3d34 G3d35@G3d33)))) G3d2c@G3d2a G3d2b@G3d29)))))) (set! G3c94@cvt (lambda (G3c95@p G3c96@n G3c97@ids) ((lambda (G3c9b@t) ((lambda (G3c9d@ls/false) (if (if G3c9d@ls/false (begin '#f (apply (lambda (G3c9f@id) (G2e4d@id? G3c9f@id)) G3c9d@ls/false)) '#f) (apply (lambda (G3ca1@id) (if (G2e5b@bound-id-member? G3c95@p G3c8e@keys) (values (vector 'free-id G3c95@p) G3c97@ids) (if (G2e55@free-id=? G3c95@p (G301e@scheme-stx '_)) (values '_ G3c97@ids) (values 'any (cons (cons G3c95@p G3c96@n) G3c97@ids))))) G3c9d@ls/false) ((lambda (G3ca3@t) ((lambda (G3ca5@ls/false) (if (if G3ca5@ls/false (begin '#f (apply (lambda (G3ca7@p G3ca8@dots) (G3092@ellipsis? G3ca8@dots)) G3ca5@ls/false)) '#f) (apply (lambda (G3cab@p G3cac@dots) (call-with-values (lambda () (G3c94@cvt G3cab@p (+ G3c96@n '1) G3c97@ids)) (lambda (G3cb1@G3caf G3cb2@G3cb0) ((lambda (G3cb5@ids G3cb6@p) (values (if (eq? G3cb6@p 'any) 'each-any (vector 'each G3cb6@p)) G3cb5@ids)) G3cb2@G3cb0 G3cb1@G3caf)))) G3ca5@ls/false) ((lambda (G3cb9@t) ((lambda (G3cbb@ls/false) (if (if G3cbb@ls/false (begin '#f (apply (lambda (G3cbd@x G3cbe@dots G3cbf@ys G3cc0@z) (G3092@ellipsis? G3cbe@dots)) G3cbb@ls/false)) '#f) (apply (lambda (G3cc5@x G3cc6@dots G3cc7@ys G3cc8@z) (call-with-values (lambda () (G3c94@cvt G3cc8@z G3c96@n G3c97@ids)) (lambda (G3ccf@G3ccd G3cd0@G3cce) ((lambda (G3cd3@ids G3cd4@z) (call-with-values (lambda () (G3c92@cvt* G3cc7@ys G3c96@n G3cd3@ids)) (lambda (G3cd9@G3cd7 G3cda@G3cd8) ((lambda (G3cdd@ids G3cde@ys) (call-with-values (lambda () (G3c94@cvt G3cc5@x (+ G3c96@n '1) G3cdd@ids)) (lambda (G3ce3@G3ce1 G3ce4@G3ce2) ((lambda (G3ce7@ids G3ce8@x) (values (vector 'each+ G3ce8@x (reverse G3cde@ys) G3cd4@z) G3ce7@ids)) G3ce4@G3ce2 G3ce3@G3ce1)))) G3cda@G3cd8 G3cd9@G3cd7)))) G3cd0@G3cce G3ccf@G3ccd)))) G3cbb@ls/false) ((lambda (G3ceb@t) ((lambda (G3ced@ls/false) (if G3ced@ls/false (apply (lambda (G3cef@x G3cf0@y) (call-with-values (lambda () (G3c94@cvt G3cf0@y G3c96@n G3c97@ids)) (lambda (G3cf5@G3cf3 G3cf6@G3cf4) ((lambda (G3cf9@ids G3cfa@y) (call-with-values (lambda () (G3c94@cvt G3cef@x G3c96@n G3cf9@ids)) (lambda (G3cff@G3cfd G3d00@G3cfe) ((lambda (G3d03@ids G3d04@x) (values (cons G3d04@x G3cfa@y) G3d03@ids)) G3d00@G3cfe G3cff@G3cfd)))) G3cf6@G3cf4 G3cf5@G3cf3)))) G3ced@ls/false) ((lambda (G3d07@t) ((lambda (G3d09@ls/false) (if G3d09@ls/false (apply (lambda () (values '() G3c97@ids)) G3d09@ls/false) ((lambda (G3d0b@t) ((lambda (G3d0d@ls/false) (if (if G3d0d@ls/false (begin '#f (apply (lambda (G3d0f@p) (not (G2e15@stx? G3d0f@p))) G3d0d@ls/false)) '#f) (apply (lambda (G3d11@p) (call-with-values (lambda () (G3c94@cvt G3d11@p G3c96@n G3c97@ids)) (lambda (G3d15@G3d13 G3d16@G3d14) ((lambda (G3d19@ids G3d1a@p) (values (vector 'vector G3d1a@p) G3d19@ids)) G3d16@G3d14 G3d15@G3d13)))) G3d0d@ls/false) ((lambda (G3d1d@t) ((lambda (G3d1f@ls/false) (if G3d1f@ls/false (apply (lambda (G3d21@datum) (values (vector 'atom (G2e63@stx->datum G3d21@datum)) G3c97@ids)) G3d1f@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3d1d@t))) (G3090@syntax-dispatch G3d1d@t 'any))) G3d0b@t))) (G3090@syntax-dispatch G3d0b@t '#(vector each-any)))) G3d07@t))) (G3090@syntax-dispatch G3d07@t '()))) G3ceb@t))) (G3090@syntax-dispatch G3ceb@t '(any . any)))) G3cb9@t))) (G3090@syntax-dispatch G3cb9@t '(any any . #(each+ any () any))))) G3ca3@t))) (G3090@syntax-dispatch G3ca3@t '(any any)))) G3c9b@t))) (G3090@syntax-dispatch G3c9b@t 'any))) G3c95@p))) (G3c94@cvt G3c8d@pattern '0 '()))) '#f '#f))) (set! G3090@syntax-dispatch ((lambda () ((lambda (G3d3e@stx^ G3d40@match-each G3d42@match-each+ G3d44@match-each-any G3d46@match-empty G3d48@combine G3d4a@match* G3d4c@match) (begin (set! G3d3e@stx^ (lambda (G3e07@e G3e08@m* G3e09@s* G3e0a@ae*) (if (if (null? G3e08@m*) (if (null? G3e09@s*) (begin '#f (null? G3e0a@ae*)) '#f) '#f) G3e07@e (G2e35@mkstx G3e07@e G3e08@m* G3e09@s* G3e0a@ae*)))) (set! G3d40@match-each (lambda (G3dea@e G3deb@p G3dec@m* G3ded@s* G3dee@ae*) (if (pair? G3dea@e) ((lambda (G3df4@first) (if G3df4@first (begin '#f ((lambda (G3df6@rest) (if G3df6@rest (begin '#f (cons G3df4@first G3df6@rest)) '#f)) (G3d40@match-each (cdr G3dea@e) G3deb@p G3dec@m* G3ded@s* G3dee@ae*))) '#f)) (G3d4c@match (car G3dea@e) G3deb@p G3dec@m* G3ded@s* G3dee@ae* '())) (if (null? G3dea@e) '() (if (G2e15@stx? G3dea@e) (if (not (G2dc3@top-marked? G3dec@m*)) (begin '#f (call-with-values (lambda () (G2e33@join-wraps G3dec@m* G3ded@s* G3dee@ae* G3dea@e)) (lambda (G3dfb@G3df8 G3dfc@G3df9 G3dfd@G3dfa) ((lambda (G3e01@ae* G3e02@s* G3e03@m*) (G3d40@match-each (G2e19@stx-expr G3dea@e) G3deb@p G3e03@m* G3e02@s* G3e01@ae*)) G3dfd@G3dfa G3dfc@G3df9 G3dfb@G3df8)))) '#f) (if (G2994@G2894@annotation? G3dea@e) (G3d40@match-each (G2996@G2898@annotation-expression G3dea@e) G3deb@p G3dec@m* G3ded@s* G3dee@ae*) '#f)))))) (set! G3d42@match-each+ (lambda (G3db0@e G3db1@x-pat G3db2@y-pat G3db3@z-pat G3db4@m* G3db5@s* G3db6@ae* G3db7@r) ((letrec ((G3dc0@f (lambda (G3dc2@e G3dc3@m* G3dc4@s* G3dc5@ae*) (if (pair? G3dc2@e) (call-with-values (lambda () (G3dc0@f (cdr G3dc2@e) G3dc3@m* G3dc4@s* G3dc5@ae*)) (lambda (G3dcd@G3dca G3dce@G3dcb G3dcf@G3dcc) ((lambda (G3dd3@r G3dd4@y-pat G3dd5@xr*) (if G3dd3@r (if (null? G3dd4@y-pat) ((lambda (G3dd9@xr) (if G3dd9@xr (values (cons G3dd9@xr G3dd5@xr*) G3dd4@y-pat G3dd3@r) (values '#f '#f '#f))) (G3d4c@match (car G3dc2@e) G3db1@x-pat G3dc3@m* G3dc4@s* G3dc5@ae* '())) (values '() (cdr G3dd4@y-pat) (G3d4c@match (car G3dc2@e) (car G3dd4@y-pat) G3dc3@m* G3dc4@s* G3dc5@ae* G3dd3@r))) (values '#f '#f '#f))) G3dcf@G3dcc G3dce@G3dcb G3dcd@G3dca))) (if (G2e15@stx? G3dc2@e) (if (G2dc3@top-marked? G3dc3@m*) (values '() G3db2@y-pat (G3d4c@match G3dc2@e G3db3@z-pat G3dc3@m* G3dc4@s* G3dc5@ae* G3db7@r)) (call-with-values (lambda () (G2e33@join-wraps G3dc3@m* G3dc4@s* G3dc5@ae* G3dc2@e)) (lambda (G3dde@G3ddb G3ddf@G3ddc G3de0@G3ddd) ((lambda (G3de4@ae* G3de5@s* G3de6@m*) (G3dc0@f (G2e19@stx-expr G3dc2@e) G3de6@m* G3de5@s* G3de4@ae*)) G3de0@G3ddd G3ddf@G3ddc G3dde@G3ddb)))) (if (G2994@G2894@annotation? G3dc2@e) (G3dc0@f (G2996@G2898@annotation-expression G3dc2@e) G3dc3@m* G3dc4@s* G3dc5@ae*) (values '() G3db2@y-pat (G3d4c@match G3dc2@e G3db3@z-pat G3dc3@m* G3dc4@s* G3dc5@ae* G3db7@r)))))))) G3dc0@f) G3db0@e G3db4@m* G3db5@s* G3db6@ae*))) (set! G3d44@match-each-any (lambda (G3d97@e G3d98@m* G3d99@s* G3d9a@ae*) (if (pair? G3d97@e) ((lambda (G3d9f@l) (if G3d9f@l (begin '#f (cons (G3d3e@stx^ (car G3d97@e) G3d98@m* G3d99@s* G3d9a@ae*) G3d9f@l)) '#f)) (G3d44@match-each-any (cdr G3d97@e) G3d98@m* G3d99@s* G3d9a@ae*)) (if (null? G3d97@e) '() (if (G2e15@stx? G3d97@e) (if (not (G2dc3@top-marked? G3d98@m*)) (begin '#f (call-with-values (lambda () (G2e33@join-wraps G3d98@m* G3d99@s* G3d9a@ae* G3d97@e)) (lambda (G3da4@G3da1 G3da5@G3da2 G3da6@G3da3) ((lambda (G3daa@ae* G3dab@s* G3dac@m*) (G3d44@match-each-any (G2e19@stx-expr G3d97@e) G3dac@m* G3dab@s* G3daa@ae*)) G3da6@G3da3 G3da5@G3da2 G3da4@G3da1)))) '#f) (if (G2994@G2894@annotation? G3d97@e) (G3d44@match-each-any (G2996@G2898@annotation-expression G3d97@e) G3d98@m* G3d99@s* G3d9a@ae*) '#f)))))) (set! G3d46@match-empty (lambda (G3d91@p G3d92@r) (if (null? G3d91@p) G3d92@r (if (eq? G3d91@p '_) G3d92@r (if (eq? G3d91@p 'any) (cons '() G3d92@r) (if (pair? G3d91@p) (G3d46@match-empty (car G3d91@p) (G3d46@match-empty (cdr G3d91@p) G3d92@r)) (if (eq? G3d91@p 'each-any) (cons '() G3d92@r) ((lambda (G3d95@t) (if (memv G3d95@t '(each)) (G3d46@match-empty (vector-ref G3d91@p '1) G3d92@r) (if (memv G3d95@t '(each+)) (G3d46@match-empty (vector-ref G3d91@p '1) (G3d46@match-empty (reverse (vector-ref G3d91@p '2)) (G3d46@match-empty (vector-ref G3d91@p '3) G3d92@r))) (if (memv G3d95@t '(free-id atom)) G3d92@r (if (memv G3d95@t '(scheme-id atom)) G3d92@r (if (memv G3d95@t '(vector)) (G3d46@match-empty (vector-ref G3d91@p '1) G3d92@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d91@p))))))) (vector-ref G3d91@p '0))))))))) (set! G3d48@combine (lambda (G3d8d@r* G3d8e@r) (if (null? (car G3d8d@r*)) G3d8e@r (cons (map car G3d8d@r*) (G3d48@combine (map cdr G3d8d@r*) G3d8e@r))))) (set! G3d4a@match* (lambda (G3d6c@e G3d6d@p G3d6e@m* G3d6f@s* G3d70@ae* G3d71@r) (if (null? G3d6d@p) (if (null? G3d6c@e) (begin '#f G3d71@r) '#f) (if (pair? G3d6d@p) (if (pair? G3d6c@e) (begin '#f (G3d4c@match (car G3d6c@e) (car G3d6d@p) G3d6e@m* G3d6f@s* G3d70@ae* (G3d4c@match (cdr G3d6c@e) (cdr G3d6d@p) G3d6e@m* G3d6f@s* G3d70@ae* G3d71@r))) '#f) (if (eq? G3d6d@p 'each-any) ((lambda (G3d78@l) (if G3d78@l (begin '#f (cons G3d78@l G3d71@r)) '#f)) (G3d44@match-each-any G3d6c@e G3d6e@m* G3d6f@s* G3d70@ae*)) ((lambda (G3d7a@t) (if (memv G3d7a@t '(each)) (if (null? G3d6c@e) (G3d46@match-empty (vector-ref G3d6d@p '1) G3d71@r) ((lambda (G3d7c@r*) (if G3d7c@r* (begin '#f (G3d48@combine G3d7c@r* G3d71@r)) '#f)) (G3d40@match-each G3d6c@e (vector-ref G3d6d@p '1) G3d6e@m* G3d6f@s* G3d70@ae*))) (if (memv G3d7a@t '(free-id)) (if (symbol? G3d6c@e) (if (G2dc3@top-marked? G3d6e@m*) (if (G2e55@free-id=? (G3d3e@stx^ G3d6c@e G3d6e@m* G3d6f@s* G3d70@ae*) (vector-ref G3d6d@p '1)) (begin '#f G3d71@r) '#f) '#f) '#f) (if (memv G3d7a@t '(scheme-id)) (if (symbol? G3d6c@e) (if (G2dc3@top-marked? G3d6e@m*) (if (G2e55@free-id=? (G3d3e@stx^ G3d6c@e G3d6e@m* G3d6f@s* G3d70@ae*) (G301e@scheme-stx (vector-ref G3d6d@p '1))) (begin '#f G3d71@r) '#f) '#f) '#f) (if (memv G3d7a@t '(each+)) (call-with-values (lambda () (G3d42@match-each+ G3d6c@e (vector-ref G3d6d@p '1) (vector-ref G3d6d@p '2) (vector-ref G3d6d@p '3) G3d6e@m* G3d6f@s* G3d70@ae* G3d71@r)) (lambda (G3d81@G3d7e G3d82@G3d7f G3d83@G3d80) ((lambda (G3d87@r G3d88@y-pat G3d89@xr*) (if G3d87@r (if (null? G3d88@y-pat) (begin '#f (if (null? G3d89@xr*) (G3d46@match-empty (vector-ref G3d6d@p '1) G3d87@r) (G3d48@combine G3d89@xr* G3d87@r))) '#f) '#f)) G3d83@G3d80 G3d82@G3d7f G3d81@G3d7e))) (if (memv G3d7a@t '(atom)) (if (equal? (vector-ref G3d6d@p '1) (G2e61@strip G3d6c@e G3d6e@m*)) (begin '#f G3d71@r) '#f) (if (memv G3d7a@t '(vector)) (if (vector? G3d6c@e) (begin '#f (G3d4c@match (vector->list G3d6c@e) (vector-ref G3d6d@p '1) G3d6e@m* G3d6f@s* G3d70@ae* G3d71@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d6d@p)))))))) (vector-ref G3d6d@p '0))))))) (set! G3d4c@match (lambda (G3d51@e G3d52@p G3d53@m* G3d54@s* G3d55@ae* G3d56@r) (if (not G3d56@r) '#f (if (eq? G3d52@p '_) G3d56@r (if (eq? G3d52@p 'any) (cons (G3d3e@stx^ G3d51@e G3d53@m* G3d54@s* G3d55@ae*) G3d56@r) (if (G2e15@stx? G3d51@e) (if (not (G2dc3@top-marked? G3d53@m*)) (begin '#f (call-with-values (lambda () (G2e33@join-wraps G3d53@m* G3d54@s* G3d55@ae* G3d51@e)) (lambda (G3d60@G3d5d G3d61@G3d5e G3d62@G3d5f) ((lambda (G3d66@ae* G3d67@s* G3d68@m*) (G3d4c@match (G2e19@stx-expr G3d51@e) G3d52@p G3d68@m* G3d67@s* G3d66@ae* G3d56@r)) G3d62@G3d5f G3d61@G3d5e G3d60@G3d5d)))) '#f) (if (G2994@G2894@annotation? G3d51@e) (G3d4c@match (G2996@G2898@annotation-expression G3d51@e) G3d52@p G3d53@m* G3d54@s* G3d55@ae* G3d56@r) (G3d4a@match* G3d51@e G3d52@p G3d53@m* G3d54@s* G3d55@ae* G3d56@r)))))))) (lambda (G3d4d@e G3d4e@p) (G3d4c@match G3d4d@e G3d4e@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3092@ellipsis? (lambda (G3e0f@x) (if (G2e4d@id? G3e0f@x) (begin '#f (G2e55@free-id=? G3e0f@x (G301e@scheme-stx '...))) '#f))) (set! G3094@underscore? (lambda (G3e11@x) (if (G2e4d@id? G3e11@x) (begin '#f (G2e55@free-id=? G3e11@x (G301e@scheme-stx '_))) '#f))) (set! G3096@verify-literals (lambda (G3e13@lits G3e14@expr) (for-each (lambda (G3e17@x) (if ((lambda (G3e19@t) (if G3e19@t G3e19@t ((lambda (G3e1b@t) (if G3e1b@t G3e1b@t (begin '#f (G3094@underscore? G3e17@x)))) (G3092@ellipsis? G3e17@x)))) (not (G2e4d@id? G3e17@x))) (G3183@syntax-violation '#f '"invalid literal" G3e14@expr G3e17@x) (void))) G3e13@lits))) (set! G3098@syntax-case-transformer ((lambda () ((lambda (G3e1e@build-dispatch-call G3e20@invalid-ids-error G3e22@gen-clause G3e24@gen-syntax-case) (begin (set! G3e1e@build-dispatch-call (lambda (G3e8d@pvars G3e8e@expr G3e8f@y G3e90@r G3e91@mr) ((lambda (G3e97@ids G3e98@levels) ((lambda (G3e9b@labels G3e9c@new-vars) ((lambda (G3e9f@body) (list '(primitive apply) (G2da5@G2ccd@build-lambda '#f G3e9c@new-vars G3e9f@body) G3e8f@y)) (G30b4@chi-expr (G2e39@add-subst (G2e06@make-full-rib G3e97@ids G3e9b@labels) G3e8e@expr) (append (map (lambda (G3ea1@label G3ea2@var G3ea3@level) (cons G3ea1@label (G2e6d@make-binding 'syntax (cons G3ea2@var G3ea3@level)))) G3e9b@labels G3e9c@new-vars (map cdr G3e8d@pvars)) G3e90@r) G3e91@mr))) (map G2dc9@gen-label G3e97@ids) (map G2dc5@gen-lexical G3e97@ids))) (map car G3e8d@pvars) (map cdr G3e8d@pvars)))) (set! G3e20@invalid-ids-error (lambda (G3e81@id* G3e82@e G3e83@class) ((letrec ((G3e87@find (lambda (G3e89@id* G3e8a@ok*) (if (null? G3e89@id*) (G3183@syntax-violation '#f '"invalid syntax" G3e82@e) (if (G2e4d@id? (car G3e89@id*)) (if (G2e5b@bound-id-member? (car G3e89@id*) G3e8a@ok*) (G317d@syntax-error (car G3e89@id*) '"duplicate " G3e83@class) (G3e87@find (cdr G3e89@id*) (cons (car G3e89@id*) G3e8a@ok*))) (G317d@syntax-error (car G3e89@id*) '"invalid " G3e83@class)))))) G3e87@find) G3e81@id* '()))) (set! G3e22@gen-clause (lambda (G3e5b@x G3e5c@keys G3e5d@clauses G3e5e@r G3e5f@mr G3e60@pat G3e61@fender G3e62@expr) (call-with-values (lambda () (G308e@convert-pattern G3e60@pat G3e5c@keys)) (lambda (G3e6d@G3e6b G3e6e@G3e6c) ((lambda (G3e71@pvars G3e72@p) (if (not (G2e59@distinct-bound-ids? (map car G3e71@pvars))) (G3e20@invalid-ids-error (map car G3e71@pvars) G3e60@pat '"pattern variable") (if (not (for-all (lambda (G3e75@x) (not (G3092@ellipsis? (car G3e75@x)))) G3e71@pvars)) (G3183@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3e60@pat) ((lambda (G3e77@y) ((lambda (G3e79@test) ((lambda (G3e7b@conseq) ((lambda (G3e7d@altern) (list (G2da5@G2ccd@build-lambda '#f (list G3e77@y) (list 'if G3e79@test G3e7b@conseq G3e7d@altern)) (list '(primitive syntax-dispatch) G3e5b@x (list 'quote G3e72@p)))) (G3e24@gen-syntax-case G3e5b@x G3e5c@keys G3e5d@clauses G3e5e@r G3e5f@mr))) (G3e1e@build-dispatch-call G3e71@pvars G3e62@expr G3e77@y G3e5e@r G3e5f@mr))) (if (eq? G3e61@fender '#t) G3e77@y ((lambda (G3e7f@call) (list 'if G3e77@y G3e7f@call (list 'quote '#f))) (G3e1e@build-dispatch-call G3e71@pvars G3e61@fender G3e77@y G3e5e@r G3e5f@mr))))) (G2dc5@gen-lexical 'tmp))))) G3e6e@G3e6c G3e6d@G3e6b))))) (set! G3e24@gen-syntax-case (lambda (G3e39@x G3e3a@keys G3e3b@clauses G3e3c@r G3e3d@mr) (if (null? G3e3b@clauses) (list '(primitive syntax-error) G3e39@x) ((lambda (G3e43@t) ((lambda (G3e45@ls/false) (if G3e45@ls/false (apply (lambda (G3e47@pat G3e48@expr) (if (if (G2e4d@id? G3e47@pat) (if (not (G2e5b@bound-id-member? G3e47@pat G3e3a@keys)) (begin '#f (not (G3092@ellipsis? G3e47@pat))) '#f) '#f) (if (G2e55@free-id=? G3e47@pat (G301e@scheme-stx '_)) (G30b4@chi-expr G3e48@expr G3e3c@r G3e3d@mr) ((lambda (G3e4b@lab G3e4c@lex) ((lambda (G3e4f@body) (list (G2da5@G2ccd@build-lambda '#f (list G3e4c@lex) G3e4f@body) G3e39@x)) (G30b4@chi-expr (G2e39@add-subst (G2e06@make-full-rib (list G3e47@pat) (list G3e4b@lab)) G3e48@expr) (cons (cons G3e4b@lab (G2e6d@make-binding 'syntax (cons G3e4c@lex '0))) G3e3c@r) G3e3d@mr))) (G2dc9@gen-label G3e47@pat) (G2dc5@gen-lexical G3e47@pat))) (G3e22@gen-clause G3e39@x G3e3a@keys (cdr G3e3b@clauses) G3e3c@r G3e3d@mr G3e47@pat '#t G3e48@expr))) G3e45@ls/false) ((lambda (G3e51@t) ((lambda (G3e53@ls/false) (if G3e53@ls/false (apply (lambda (G3e55@pat G3e56@fender G3e57@expr) (G3e22@gen-clause G3e39@x G3e3a@keys (cdr G3e3b@clauses) G3e3c@r G3e3d@mr G3e55@pat G3e56@fender G3e57@expr)) G3e53@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3e51@t))) (G3090@syntax-dispatch G3e51@t '(any any any)))) G3e43@t))) (G3090@syntax-dispatch G3e43@t '(any any)))) (car G3e3b@clauses))))) (lambda (G3e25@e G3e26@r G3e27@mr) ((lambda (G3e2b@t) ((lambda (G3e2d@ls/false) (if G3e2d@ls/false (apply (lambda (G3e2f@expr G3e30@keys G3e31@clauses) (begin (G3096@verify-literals G3e30@keys G3e25@e) ((lambda (G3e35@x) ((lambda (G3e37@body) (list (G2da5@G2ccd@build-lambda '#f (list G3e35@x) G3e37@body) (G30b4@chi-expr G3e2f@expr G3e26@r G3e27@mr))) (G3e24@gen-syntax-case G3e35@x G3e30@keys G3e31@clauses G3e26@r G3e27@mr))) (G2dc5@gen-lexical 'tmp)))) G3e2d@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3e2b@t))) (G3090@syntax-dispatch G3e2b@t '(_ any each-any . each-any)))) G3e25@e)))) '#f '#f '#f '#f)))) (set! G309a@ellipsis-map (lambda (G3ea7@proc G3ea8@ls . G3eab@ls*) ((lambda (G3eae@who) (begin (set! G3eae@who '...) (begin (if (not (list? G3ea8@ls)) (assertion-violation G3eae@who '"not a list" G3ea8@ls) (void)) (if (not (null? G3eab@ls*)) ((lambda (G3eaf@n) (for-each (lambda (G3eb1@x) (begin (if (not (list? G3eb1@x)) (assertion-violation G3eae@who '"not a list" G3eb1@x) (void)) (if (not (= (length G3eb1@x) G3eaf@n)) (assertion-violation G3eae@who '"length mismatch" G3ea8@ls G3eb1@x) (void)))) G3eab@ls*)) (length G3ea8@ls)) (void)) (apply map G3ea7@proc G3ea8@ls G3eab@ls*)))) '#f))) (set! G309c@syntax-transformer ((lambda () ((lambda (G3eb4@gen-syntax G3eb6@gen-ref G3eb8@gen-append G3eba@gen-mappend G3ebc@gen-map G3ebe@gen-cons G3ec0@gen-vector G3ec2@regen) (begin (set! G3eb4@gen-syntax (lambda (G3f27@src G3f28@e G3f29@r G3f2a@maps G3f2b@ellipsis? G3f2c@vec?) ((lambda (G3f33@t) ((lambda (G3f35@ls/false) (if (if G3f35@ls/false (begin '#f (apply (lambda (G3f37@dots) (G3f2b@ellipsis? G3f37@dots)) G3f35@ls/false)) '#f) (apply (lambda (G3f39@dots) (G3183@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f27@src)) G3f35@ls/false) ((lambda (G3f3b@t) ((lambda (G3f3d@ls/false) (if (if G3f3d@ls/false (begin '#f (apply (lambda (G3f3f@id) (G2e4d@id? G3f3f@id)) G3f3d@ls/false)) '#f) (apply (lambda (G3f41@id) ((lambda (G3f43@label) ((lambda (G3f45@b) ((lambda () (if (eq? (G2e6f@binding-type G3f45@b) 'syntax) (call-with-values (lambda () ((lambda (G3f49@var.lev) (G3eb6@gen-ref G3f27@src (car G3f49@var.lev) (cdr G3f49@var.lev) G3f2a@maps)) (G2e71@binding-value G3f45@b))) (lambda (G3f4b@G3f47 G3f4c@G3f48) ((lambda (G3f4f@maps G3f50@var) (values (list 'ref G3f50@var) G3f4f@maps)) G3f4c@G3f48 G3f4b@G3f47))) (values (list 'quote G3f28@e) G3f2a@maps))))) (G2e6b@label->binding G3f43@label G3f29@r))) (G2e67@id->label G3f28@e))) G3f3d@ls/false) ((lambda (G3f53@t) ((lambda (G3f55@ls/false) (if (if G3f55@ls/false (begin '#f (apply (lambda (G3f57@dots G3f58@e) (G3f2b@ellipsis? G3f57@dots)) G3f55@ls/false)) '#f) (apply (lambda (G3f5b@dots G3f5c@e) (if G3f2c@vec? (G3183@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f27@src) (G3eb4@gen-syntax G3f27@src G3f5c@e G3f29@r G3f2a@maps (lambda (G3f5f@x) '#f) '#f))) G3f55@ls/false) ((lambda (G3f61@t) ((lambda (G3f63@ls/false) (if (if G3f63@ls/false (begin '#f (apply (lambda (G3f65@x G3f66@dots G3f67@y) (G3f2b@ellipsis? G3f66@dots)) G3f63@ls/false)) '#f) (apply (lambda (G3f6b@x G3f6c@dots G3f6d@y) ((letrec ((G3f71@f (lambda (G3f73@y G3f74@k) ((lambda (G3f77@t) ((lambda (G3f79@ls/false) (if G3f79@ls/false (apply (lambda () (G3f74@k G3f2a@maps)) G3f79@ls/false) ((lambda (G3f7b@t) ((lambda (G3f7d@ls/false) (if (if G3f7d@ls/false (begin '#f (apply (lambda (G3f7f@dots G3f80@y) (G3f2b@ellipsis? G3f7f@dots)) G3f7d@ls/false)) '#f) (apply (lambda (G3f83@dots G3f84@y) (G3f71@f G3f84@y (lambda (G3f87@maps) (call-with-values (lambda () (G3f74@k (cons '() G3f87@maps))) (lambda (G3f8b@G3f89 G3f8c@G3f8a) ((lambda (G3f8f@maps G3f90@x) (if (null? (car G3f8f@maps)) (G3183@syntax-violation '#f '"extra ellipsis in syntax form" G3f27@src) (values (G3eba@gen-mappend G3f90@x (car G3f8f@maps)) (cdr G3f8f@maps)))) G3f8c@G3f8a G3f8b@G3f89)))))) G3f7d@ls/false) ((lambda (G3f93@t) ((lambda (G3f95@ls/false) (if G3f95@ls/false (apply (lambda () (call-with-values (lambda () (G3eb4@gen-syntax G3f27@src G3f73@y G3f29@r G3f2a@maps G3f2b@ellipsis? G3f2c@vec?)) (lambda (G3f99@G3f97 G3f9a@G3f98) ((lambda (G3f9d@maps G3f9e@y) (call-with-values (lambda () (G3f74@k G3f9d@maps)) (lambda (G3fa3@G3fa1 G3fa4@G3fa2) ((lambda (G3fa7@maps G3fa8@x) (values (G3eb8@gen-append G3fa8@x G3f9e@y) G3fa7@maps)) G3fa4@G3fa2 G3fa3@G3fa1)))) G3f9a@G3f98 G3f99@G3f97)))) G3f95@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3f93@t))) (G3090@syntax-dispatch G3f93@t '_))) G3f7b@t))) (G3090@syntax-dispatch G3f7b@t '(any . any)))) G3f77@t))) (G3090@syntax-dispatch G3f77@t '()))) G3f73@y)))) G3f71@f) G3f6d@y (lambda (G3fab@maps) (call-with-values (lambda () (G3eb4@gen-syntax G3f27@src G3f6b@x G3f29@r (cons '() G3fab@maps) G3f2b@ellipsis? '#f)) (lambda (G3faf@G3fad G3fb0@G3fae) ((lambda (G3fb3@maps G3fb4@x) (if (null? (car G3fb3@maps)) (G3183@syntax-violation '#f '"extra ellipsis in syntax form" G3f27@src) (values (G3ebc@gen-map G3fb4@x (car G3fb3@maps)) (cdr G3fb3@maps)))) G3fb0@G3fae G3faf@G3fad)))))) G3f63@ls/false) ((lambda (G3fb7@t) ((lambda (G3fb9@ls/false) (if G3fb9@ls/false (apply (lambda (G3fbb@x G3fbc@y) (call-with-values (lambda () (G3eb4@gen-syntax G3f27@src G3fbb@x G3f29@r G3f2a@maps G3f2b@ellipsis? '#f)) (lambda (G3fc1@G3fbf G3fc2@G3fc0) ((lambda (G3fc5@maps G3fc6@xnew) (call-with-values (lambda () (G3eb4@gen-syntax G3f27@src G3fbc@y G3f29@r G3fc5@maps G3f2b@ellipsis? G3f2c@vec?)) (lambda (G3fcb@G3fc9 G3fcc@G3fca) ((lambda (G3fcf@maps G3fd0@ynew) (values (G3ebe@gen-cons G3f28@e G3fbb@x G3fbc@y G3fc6@xnew G3fd0@ynew) G3fcf@maps)) G3fcc@G3fca G3fcb@G3fc9)))) G3fc2@G3fc0 G3fc1@G3fbf)))) G3fb9@ls/false) ((lambda (G3fd3@t) ((lambda (G3fd5@ls/false) (if G3fd5@ls/false (apply (lambda (G3fd7@ls) (call-with-values (lambda () (G3eb4@gen-syntax G3f27@src G3fd7@ls G3f29@r G3f2a@maps G3f2b@ellipsis? '#t)) (lambda (G3fdb@G3fd9 G3fdc@G3fda) ((lambda (G3fdf@maps G3fe0@lsnew) (values (G3ec0@gen-vector G3f28@e G3fd7@ls G3fe0@lsnew) G3fdf@maps)) G3fdc@G3fda G3fdb@G3fd9)))) G3fd5@ls/false) ((lambda (G3fe3@t) ((lambda (G3fe5@ls/false) (if G3fe5@ls/false (apply (lambda () (values (list 'quote G3f28@e) G3f2a@maps)) G3fe5@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3fe3@t))) (G3090@syntax-dispatch G3fe3@t '_))) G3fd3@t))) (G3090@syntax-dispatch G3fd3@t '#(vector each-any)))) G3fb7@t))) (G3090@syntax-dispatch G3fb7@t '(any . any)))) G3f61@t))) (G3090@syntax-dispatch G3f61@t '(any any . any)))) G3f53@t))) (G3090@syntax-dispatch G3f53@t '(any any)))) G3f3b@t))) (G3090@syntax-dispatch G3f3b@t 'any))) G3f33@t))) (G3090@syntax-dispatch G3f33@t 'any))) G3f28@e))) (set! G3eb6@gen-ref (lambda (G3f0f@src G3f10@var G3f11@level G3f12@maps) (if (= G3f11@level '0) (values G3f10@var G3f12@maps) (if (null? G3f12@maps) (G3183@syntax-violation '#f '"missing ellipsis in syntax form" G3f0f@src) (call-with-values (lambda () (G3eb6@gen-ref G3f0f@src G3f10@var (- G3f11@level '1) (cdr G3f12@maps))) (lambda (G3f19@G3f17 G3f1a@G3f18) ((lambda (G3f1d@outer-maps G3f1e@outer-var) ((lambda (G3f21@t) (if G3f21@t ((lambda (G3f23@b) (values (cdr G3f23@b) G3f12@maps)) G3f21@t) ((lambda (G3f25@inner-var) (values G3f25@inner-var (cons (cons (cons G3f1e@outer-var G3f25@inner-var) (car G3f12@maps)) G3f1d@outer-maps))) (G2dc5@gen-lexical 'tmp)))) (assq G3f1e@outer-var (car G3f12@maps)))) G3f1a@G3f18 G3f19@G3f17))))))) (set! G3eb8@gen-append (lambda (G3f0b@x G3f0c@y) (if (equal? G3f0c@y ''()) G3f0b@x (list 'append G3f0b@x G3f0c@y)))) (set! G3eba@gen-mappend (lambda (G3f07@e G3f08@map-env) (list 'apply '(primitive append) (G3ebc@gen-map G3f07@e G3f08@map-env)))) (set! G3ebc@gen-map (lambda (G3ef5@e G3ef6@map-env) ((lambda (G3ef9@formals G3efa@actuals) (if (eq? (car G3ef5@e) 'ref) (car G3efa@actuals) (if (for-all (lambda (G3efd@x) (if (eq? (car G3efd@x) 'ref) (begin '#f (memq (cadr G3efd@x) G3ef9@formals)) '#f)) (cdr G3ef5@e)) ((lambda (G3eff@args) (cons 'map (cons (list 'primitive (car G3ef5@e)) G3eff@args))) (map ((lambda (G3f01@r) (lambda (G3f03@x) (cdr (assq (cadr G3f03@x) G3f01@r)))) (map cons G3ef9@formals G3efa@actuals)) (cdr G3ef5@e))) (cons* 'map (list 'lambda G3ef9@formals G3ef5@e) G3efa@actuals)))) (map cdr G3ef6@map-env) (map (lambda (G3f05@x) (list 'ref (car G3f05@x))) G3ef6@map-env)))) (set! G3ebe@gen-cons (lambda (G3ee5@e G3ee6@x G3ee7@y G3ee8@xnew G3ee9@ynew) ((lambda (G3eef@t) (if (memv G3eef@t '(quote)) (if (eq? (car G3ee8@xnew) 'quote) ((lambda (G3ef1@xnew G3ef2@ynew) (if (if (eq? G3ef1@xnew G3ee6@x) (begin '#f (eq? G3ef2@ynew G3ee7@y)) '#f) (list 'quote G3ee5@e) (list 'quote (cons G3ef1@xnew G3ef2@ynew)))) (cadr G3ee8@xnew) (cadr G3ee9@ynew)) (if (null? (cadr G3ee9@ynew)) (list 'list G3ee8@xnew) (list 'cons G3ee8@xnew G3ee9@ynew))) (if (memv G3eef@t '(list)) (cons 'list (cons G3ee8@xnew (cdr G3ee9@ynew))) (list 'cons G3ee8@xnew G3ee9@ynew)))) (car G3ee9@ynew)))) (set! G3ec0@gen-vector (lambda (G3edf@e G3ee0@ls G3ee1@lsnew) (if (eq? (car G3ee1@lsnew) 'quote) (if (eq? (cadr G3ee1@lsnew) G3ee0@ls) (list 'quote G3edf@e) (list 'quote (list->vector (cadr G3ee1@lsnew)))) (if (eq? (car G3ee1@lsnew) 'list) (cons 'vector (cdr G3ee1@lsnew)) (list 'list->vector G3ee1@lsnew))))) (set! G3ec2@regen (lambda (G3ed9@x) ((lambda (G3edb@t) (if (memv G3edb@t '(ref)) (cadr G3ed9@x) (if (memv G3edb@t '(primitive)) (list 'primitive (cadr G3ed9@x)) (if (memv G3edb@t '(quote)) (list 'quote (cadr G3ed9@x)) (if (memv G3edb@t '(lambda)) (G2da5@G2ccd@build-lambda '#f (cadr G3ed9@x) (G3ec2@regen (caddr G3ed9@x))) (if (memv G3edb@t '(map)) ((lambda (G3edd@ls) (cons '(primitive ellipsis-map) G3edd@ls)) (map G3ec2@regen (cdr G3ed9@x))) (cons (list 'primitive (car G3ed9@x)) (map G3ec2@regen (cdr G3ed9@x))))))))) (car G3ed9@x)))) (lambda (G3ec3@e G3ec4@r G3ec5@mr) ((lambda (G3ec9@t) ((lambda (G3ecb@ls/false) (if G3ecb@ls/false (apply (lambda (G3ecd@x) (call-with-values (lambda () (G3eb4@gen-syntax G3ec3@e G3ecd@x G3ec4@r '() G3092@ellipsis? '#f)) (lambda (G3ed1@G3ecf G3ed2@G3ed0) ((lambda (G3ed5@maps G3ed6@e) (G3ec2@regen G3ed6@e)) G3ed2@G3ed0 G3ed1@G3ecf)))) G3ecb@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3ec9@t))) (G3090@syntax-dispatch G3ec9@t '(_ any)))) G3ec3@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G309e@core-macro-transformer (lambda (G3fe7@name) ((lambda (G3fe9@t) (if (memv G3fe9@t '(quote)) G3040@quote-transformer (if (memv G3fe9@t '(lambda)) G3044@lambda-transformer (if (memv G3fe9@t '(case-lambda)) G3042@case-lambda-transformer (if (memv G3fe9@t '(letrec)) G302c@letrec-transformer (if (memv G3fe9@t '(letrec*)) G302e@letrec*-transformer (if (memv G3fe9@t '(if)) G303c@if-transformer (if (memv G3fe9@t '(foreign-call)) G308c@foreign-call-transformer (if (memv G3fe9@t '(syntax-case)) G3098@syntax-case-transformer (if (memv G3fe9@t '(syntax)) G309c@syntax-transformer (if (memv G3fe9@t '(type-descriptor)) G3032@type-descriptor-transformer (if (memv G3fe9@t '(record-type-descriptor)) G3034@record-type-descriptor-transformer (if (memv G3fe9@t '(record-constructor-descriptor)) G3036@record-constructor-descriptor-transformer (if (memv G3fe9@t '(fluid-let-syntax)) G3030@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3fe7@name))))))))))))))) G3fe7@name))) (set! G30a0@file-options-macro (lambda (G3feb@x) ((lambda (G3fee@valid-option?) (begin (set! G3fee@valid-option? (lambda (G3ff7@x) (if (G2e4d@id? G3ff7@x) (begin '#f (memq (G2e4f@id->sym G3ff7@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3fef@t) ((lambda (G3ff1@ls/false) (if (if G3ff1@ls/false (begin '#f (apply (lambda (G3ff3@opt*) (if (for-all G3fee@valid-option? G3ff3@opt*) (begin '#f (G29a0@G2944@file-options-spec (map G2e4f@id->sym G3ff3@opt*))) '#f)) G3ff1@ls/false)) '#f) (apply (lambda (G3ff5@opt*) (G3046@bless (list 'quote (G29a0@G2944@file-options-spec (map G2e4f@id->sym G3ff5@opt*))))) G3ff1@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3fef@t))) (G3090@syntax-dispatch G3fef@t '(_ . each-any)))) G3feb@x))) '#f))) (set! G30a2@symbol-macro (lambda (G3ff9@x G3ffa@set) ((lambda (G3ffd@t) ((lambda (G3fff@ls/false) (if (if G3fff@ls/false (begin '#f (apply (lambda (G4001@name) (if (G2e4d@id? G4001@name) (begin '#f (memq (G2e4f@id->sym G4001@name) G3ffa@set)) '#f)) G3fff@ls/false)) '#f) (apply (lambda (G4003@name) (G3046@bless (list 'quote G4003@name))) G3fff@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G3ffd@t))) (G3090@syntax-dispatch G3ffd@t '(_ any)))) G3ff9@x))) (set! G30a4@macro-transformer (lambda (G4005@x) (if (procedure? G4005@x) G4005@x (if (symbol? G4005@x) ((lambda (G4007@t) (if (memv G4007@t '(define-record-type)) G3084@define-record-type-macro (if (memv G4007@t '(define-struct)) G3082@define-struct-macro (if (memv G4007@t '(include)) G3078@include-macro (if (memv G4007@t '(cond)) G3074@cond-macro (if (memv G4007@t '(let)) G304c@let-macro (if (memv G4007@t '(do)) G306c@do-macro (if (memv G4007@t '(or)) G3070@or-macro (if (memv G4007@t '(and)) G3072@and-macro (if (memv G4007@t '(let*)) G306e@let*-macro (if (memv G4007@t '(let-values)) G304e@let-values-macro (if (memv G4007@t '(let*-values)) G3050@let*-values-macro (if (memv G4007@t '(syntax-rules)) G307c@syntax-rules-macro (if (memv G4007@t '(quasiquote)) G307e@quasiquote-macro (if (memv G4007@t '(quasisyntax)) G3080@quasisyntax-macro (if (memv G4007@t '(with-syntax)) G3048@with-syntax-macro (if (memv G4007@t '(when)) G3038@when-macro (if (memv G4007@t '(unless)) G303a@unless-macro (if (memv G4007@t '(case)) G303e@case-macro (if (memv G4007@t '(identifier-syntax)) G306a@identifier-syntax-macro (if (memv G4007@t '(time)) G3062@time-macro (if (memv G4007@t '(delay)) G3064@delay-macro (if (memv G4007@t '(assert)) G3066@assert-macro (if (memv G4007@t '(endianness)) G3068@endianness-macro (if (memv G4007@t '(guard)) G305e@guard-macro (if (memv G4007@t '(define-enumeration)) G3060@define-enumeration-macro (if (memv G4007@t '(trace-lambda)) G3052@trace-lambda-macro (if (memv G4007@t '(trace-define)) G3054@trace-define-macro (if (memv G4007@t '(trace-define-syntax)) G3056@trace-define-syntax-macro (if (memv G4007@t '(trace-let-syntax)) G305a@trace-let-syntax-macro (if (memv G4007@t '(trace-letrec-syntax)) G305c@trace-letrec-syntax-macro (if (memv G4007@t '(define-condition-type)) G3086@define-condition-type-macro (if (memv G4007@t '(parameterize)) G308a@parameterize-macro (if (memv G4007@t '(include-into)) G307a@include-into-macro (if (memv G4007@t '(eol-style)) (lambda (G4009@x) (G30a2@symbol-macro G4009@x '(none lf cr crlf nel crnel ls))) (if (memv G4007@t '(error-handling-mode)) (lambda (G400b@x) (G30a2@symbol-macro G400b@x '(ignore raise replace))) (if (memv G4007@t '(buffer-mode)) (lambda (G400d@x) (G30a2@symbol-macro G400d@x '(none line block))) (if (memv G4007@t '(file-options)) G30a0@file-options-macro (if (memv G4007@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G3088@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G4005@x)))))))))))))))))))))))))))))))))))))))) G4005@x) (error 'core-macro-transformer '"BUG: invalid macro" G4005@x))))) (set! G30a6@local-macro-transformer (lambda (G400f@x) (car G400f@x))) (set! G30a8@do-macro-call (lambda (G4011@transformer G4012@expr) ((lambda (G4015@out) (begin ((letrec ((G4017@f (lambda (G4019@x) (if (not (G2e15@stx? G4019@x)) (if (pair? G4019@x) (begin (G4017@f (car G4019@x)) (G4017@f (cdr G4019@x))) (if (vector? G4019@x) (vector-for-each G4017@f G4019@x) (if (symbol? G4019@x) (G3183@syntax-violation '#f '"raw symbol encountered in output of macro" G4012@expr G4019@x) (void)))) (void))))) G4017@f) G4015@out) (G2e37@add-mark (G2e2d@gen-mark) G4015@out G4012@expr))) (G4011@transformer (G2e37@add-mark G2e2f@anti-mark G4012@expr '#f))))) (set! G30aa@chi-macro (lambda (G401b@p G401c@e) (G30a8@do-macro-call (G30a4@macro-transformer G401b@p) G401c@e))) (set! G30ac@chi-local-macro (lambda (G401f@p G4020@e) (G30a8@do-macro-call (G30a6@local-macro-transformer G401f@p) G4020@e))) (set! G30ae@chi-global-macro (lambda (G4023@p G4024@e) ((lambda (G4027@lib G4028@loc) (begin (G2c43@G2ad9@visit-library G4027@lib) ((lambda (G402b@x) ((lambda (G402d@transformer) (G30a8@do-macro-call G402d@transformer G4024@e)) (if (procedure? G402b@x) G402b@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G402b@x)))) (symbol-value G4028@loc)))) (car G4023@p) (cdr G4023@p)))) (set! G30b0@chi-expr* (lambda (G402f@e* G4030@r G4031@mr) (if (null? G402f@e*) '() ((lambda (G4035@e) (cons G4035@e (G30b0@chi-expr* (cdr G402f@e*) G4030@r G4031@mr))) (G30b4@chi-expr (car G402f@e*) G4030@r G4031@mr))))) (set! G30b2@chi-application (lambda (G4037@e G4038@r G4039@mr) ((lambda (G403d@t) ((lambda (G403f@ls/false) (if G403f@ls/false (apply (lambda (G4041@rator G4042@rands) ((lambda (G4045@rator) (cons G4045@rator (G30b0@chi-expr* G4042@rands G4038@r G4039@mr))) (G30b4@chi-expr G4041@rator G4038@r G4039@mr))) G403f@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G403d@t))) (G3090@syntax-dispatch G403d@t '(any . each-any)))) G4037@e))) (set! G30b4@chi-expr (lambda (G4047@e G4048@r G4049@mr) (call-with-values (lambda () (G2e75@syntax-type G4047@e G4048@r)) (lambda (G4050@G404d G4051@G404e G4052@G404f) ((lambda (G4056@kwd G4057@value G4058@type) ((lambda (G405c@t) (if (memv G405c@t '(core-macro)) ((lambda (G405e@transformer) (G405e@transformer G4047@e G4048@r G4049@mr)) (G309e@core-macro-transformer G4057@value)) (if (memv G405c@t '(global)) ((lambda (G4060@lib) ((lambda (G4062@loc) ((lambda () (begin ((G30ff@inv-collector) G4060@lib) G4062@loc)))) (cdr G4057@value))) (car G4057@value)) (if (memv G405c@t '(core-prim)) ((lambda (G4064@name) (list 'primitive G4064@name)) G4057@value) (if (memv G405c@t '(call)) (G30b2@chi-application G4047@e G4048@r G4049@mr) (if (memv G405c@t '(lexical)) ((lambda (G4066@lex) G4066@lex) (G3020@lexical-var G4057@value)) (if (memv G405c@t '(global-macro global-macro!)) (G30b4@chi-expr (G30ae@chi-global-macro G4057@value G4047@e) G4048@r G4049@mr) (if (memv G405c@t '(local-macro local-macro!)) (G30b4@chi-expr (G30ac@chi-local-macro G4057@value G4047@e) G4048@r G4049@mr) (if (memv G405c@t '(macro macro!)) (G30b4@chi-expr (G30aa@chi-macro G4057@value G4047@e) G4048@r G4049@mr) (if (memv G405c@t '(constant)) ((lambda (G4068@datum) (list 'quote G4068@datum)) G4057@value) (if (memv G405c@t '(set!)) (G30b6@chi-set! G4047@e G4048@r G4049@mr) (if (memv G405c@t '(begin)) ((lambda (G406a@t) ((lambda (G406c@ls/false) (if G406c@ls/false (apply (lambda (G406e@x G406f@x*) (G2da8@G2d19@build-sequence '#f (G30b0@chi-expr* (cons G406e@x G406f@x*) G4048@r G4049@mr))) G406c@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G406a@t))) (G3090@syntax-dispatch G406a@t '(_ any . each-any)))) G4047@e) (if (memv G405c@t '(let-syntax letrec-syntax)) ((lambda (G4072@t) ((lambda (G4074@ls/false) (if (if G4074@ls/false (begin '#f (apply (lambda (G4076@xlhs* G4077@xrhs* G4078@xbody G4079@xbody*) (if (not (G2e57@valid-bound-ids? G4076@xlhs*)) (G3183@syntax-violation '#f '"invalid identifiers" G4047@e) (void))) G4074@ls/false)) '#f) (apply (lambda (G407e@xlhs* G407f@xrhs* G4080@xbody G4081@xbody*) ((lambda (G4086@xlab*) ((lambda (G4088@xrib) ((lambda (G408a@xb*) ((lambda () (G2da8@G2d19@build-sequence '#f (G30b0@chi-expr* (map (lambda (G408c@x) (G2e39@add-subst G4088@xrib G408c@x)) (cons G4080@xbody G4081@xbody*)) (append (map cons G4086@xlab* G408a@xb*) G4048@r) (append (map cons G4086@xlab* G408a@xb*) G4049@mr)))))) (map (lambda (G408e@x) (G2e94@make-eval-transformer (G30f1@expand-transformer (if (eq? G4058@type 'let-syntax) G408e@x (G2e39@add-subst G4088@xrib G408e@x)) G4049@mr))) G407f@xrhs*))) (G2e06@make-full-rib G407e@xlhs* G4086@xlab*))) (map G2dc9@gen-label G407e@xlhs*))) G4074@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G4072@t))) (G3090@syntax-dispatch G4072@t '(_ #(each (any any)) any . each-any)))) G4047@e) (if (memv G405c@t '(displaced-lexical)) (G3183@syntax-violation '#f '"identifier out of context" G4047@e) (if (memv G405c@t '(syntax)) (G3183@syntax-violation '#f '"reference to pattern variable outside a syntax form" G4047@e) (if (memv G405c@t '(define define-syntax module import library)) (G3183@syntax-violation '#f (string-append ((lambda (G4090@t) (if (memv G4090@t '(define)) '"a definition" (if (memv G4090@t '(define-syntax)) '"a define-syntax" (if (memv G4090@t '(module)) '"a module definition" (if (memv G4090@t '(library)) '"a library definition" (if (memv G4090@t '(import)) '"an import declaration" (if (memv G4090@t '(export)) '"an export declaration" '"a non-expression"))))))) G4058@type) '" was found where an expression was expected") G4047@e) (if (memv G405c@t '(mutable)) (G3183@syntax-violation '#f '"attempt to reference an unexportable variable" G4047@e) (G3183@syntax-violation '#f '"invalid expression" G4047@e)))))))))))))))))) G4058@type)) G4052@G404f G4051@G404e G4050@G404d))))) (set! G30b6@chi-set! (lambda (G4092@e G4093@r G4094@mr) ((lambda (G4098@t) ((lambda (G409a@ls/false) (if (if G409a@ls/false (begin '#f (apply (lambda (G409c@x G409d@v) (G2e4d@id? G409c@x)) G409a@ls/false)) '#f) (apply (lambda (G40a0@x G40a1@v) (call-with-values (lambda () (G2e75@syntax-type G40a0@x G4093@r)) (lambda (G40a7@G40a4 G40a8@G40a5 G40a9@G40a6) ((lambda (G40ad@kwd G40ae@value G40af@type) ((lambda (G40b3@t) (if (memv G40b3@t '(lexical)) (begin (G3024@set-lexical-mutable! G40ae@value '#t) (list 'set! (G3020@lexical-var G40ae@value) (G30b4@chi-expr G40a1@v G4093@r G4094@mr))) (if (memv G40b3@t '(core-prim)) (G3183@syntax-violation '#f '"cannot modify imported core primitive" G4092@e) (if (memv G40b3@t '(global)) (G3183@syntax-violation '#f '"attempt to modify imported binding" G4092@e) (if (memv G40b3@t '(global-macro!)) (G30b4@chi-expr (G30ae@chi-global-macro G40ae@value G4092@e) G4093@r G4094@mr) (if (memv G40b3@t '(local-macro!)) (G30b4@chi-expr (G30ac@chi-local-macro G40ae@value G4092@e) G4093@r G4094@mr) (if (memv G40b3@t '(mutable)) (G3183@syntax-violation '#f '"attempt to assign to an unexportable variable" G4092@e) (G3183@syntax-violation '#f '"invalid syntax" G4092@e)))))))) G40af@type)) G40a9@G40a6 G40a8@G40a5 G40a7@G40a4)))) G409a@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G4098@t))) (G3090@syntax-dispatch G4098@t '(_ any any)))) G4092@e))) (set! G30b8@verify-formals (lambda (G40b5@fmls G40b6@stx) ((lambda (G40b9@t) ((lambda (G40bb@ls/false) (if G40bb@ls/false (apply (lambda (G40bd@x*) (if (not (G2e57@valid-bound-ids? G40bd@x*)) (G304a@invalid-fmls-error G40b6@stx G40b5@fmls) (void))) G40bb@ls/false) ((lambda (G40bf@t) ((lambda (G40c1@ls/false) (if G40c1@ls/false (apply (lambda (G40c3@x* G40c4@x) (if (not (G2e57@valid-bound-ids? (cons G40c4@x G40c3@x*))) (G304a@invalid-fmls-error G40b6@stx G40b5@fmls) (void))) G40c1@ls/false) ((lambda (G40c7@t) ((lambda (G40c9@ls/false) (if G40c9@ls/false (apply (lambda () (G3183@syntax-violation '#f '"invalid syntax" G40b6@stx)) G40c9@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G40c7@t))) (G3090@syntax-dispatch G40c7@t '_))) G40bf@t))) (G3090@syntax-dispatch G40bf@t '#(each+ any () any)))) G40b9@t))) (G3090@syntax-dispatch G40b9@t 'each-any))) G40b5@fmls))) (set! G30ba@chi-lambda-clause (lambda (G40cb@stx G40cc@fmls G40cd@body* G40ce@r G40cf@mr) ((lambda (G40d5@t) ((lambda (G40d7@ls/false) (if G40d7@ls/false (apply (lambda (G40d9@x*) (begin (G30b8@verify-formals G40cc@fmls G40cb@stx) ((lambda (G40db@lex* G40dc@lab*) (values G40db@lex* (G30ca@chi-internal (G2e39@add-subst (G2e06@make-full-rib G40d9@x* G40dc@lab*) G40cd@body*) (G3028@add-lexicals G40dc@lab* G40db@lex* G40ce@r) G40cf@mr))) (map G2dc5@gen-lexical G40d9@x*) (map G2dc9@gen-label G40d9@x*)))) G40d7@ls/false) ((lambda (G40df@t) ((lambda (G40e1@ls/false) (if G40e1@ls/false (apply (lambda (G40e3@x* G40e4@x) (begin (G30b8@verify-formals G40cc@fmls G40cb@stx) ((lambda (G40e7@lex* G40e8@lab* G40e9@lex G40ea@lab) (values (append G40e7@lex* G40e9@lex) (G30ca@chi-internal (G2e39@add-subst (G2e06@make-full-rib (cons G40e4@x G40e3@x*) (cons G40ea@lab G40e8@lab*)) G40cd@body*) (G3028@add-lexicals (cons G40ea@lab G40e8@lab*) (cons G40e9@lex G40e7@lex*) G40ce@r) G40cf@mr))) (map G2dc5@gen-lexical G40e3@x*) (map G2dc9@gen-label G40e3@x*) (G2dc5@gen-lexical G40e4@x) (G2dc9@gen-label G40e4@x)))) G40e1@ls/false) ((lambda (G40ef@t) ((lambda (G40f1@ls/false) (if G40f1@ls/false (apply (lambda () (G3183@syntax-violation '#f '"invalid syntax" G40cc@fmls)) G40f1@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G40ef@t))) (G3090@syntax-dispatch G40ef@t '_))) G40df@t))) (G3090@syntax-dispatch G40df@t '#(each+ any () any)))) G40d5@t))) (G3090@syntax-dispatch G40d5@t 'each-any))) G40cc@fmls))) (set! G30bc@chi-lambda-clause* (lambda (G40f3@stx G40f4@fmls* G40f5@body** G40f6@r G40f7@mr) (if (null? G40f4@fmls*) (values '() '()) (call-with-values (lambda () (G30ba@chi-lambda-clause G40f3@stx (car G40f4@fmls*) (car G40f5@body**) G40f6@r G40f7@mr)) (lambda (G40ff@G40fd G4100@G40fe) ((lambda (G4103@b G4104@a) (call-with-values (lambda () (G30bc@chi-lambda-clause* G40f3@stx (cdr G40f4@fmls*) (cdr G40f5@body**) G40f6@r G40f7@mr)) (lambda (G4109@G4107 G410a@G4108) ((lambda (G410d@b* G410e@a*) (values (cons G4104@a G410e@a*) (cons G4103@b G410d@b*))) G410a@G4108 G4109@G4107)))) G4100@G40fe G40ff@G40fd)))))) (set! G30be@chi-defun (lambda (G4111@x G4112@r G4113@mr) ((lambda (G4117@fmls G4118@body*) (call-with-values (lambda () (G30ba@chi-lambda-clause G4117@fmls G4117@fmls G4118@body* G4112@r G4113@mr)) (lambda (G411d@G411b G411e@G411c) ((lambda (G4121@body G4122@fmls) (G2da5@G2ccd@build-lambda '#f G4122@fmls G4121@body)) G411e@G411c G411d@G411b)))) (car G4111@x) (cdr G4111@x)))) (set! G30c0@chi-rhs (lambda (G4125@rhs G4126@r G4127@mr) ((lambda (G412b@t) (if (memv G412b@t '(defun)) (G30be@chi-defun (cdr G4125@rhs) G4126@r G4127@mr) (if (memv G412b@t '(expr)) ((lambda (G412d@expr) (G30b4@chi-expr G412d@expr G4126@r G4127@mr)) (cdr G4125@rhs)) (if (memv G412b@t '(top-expr)) ((lambda (G412f@expr) (G2da8@G2d19@build-sequence '#f (list (G30b4@chi-expr G412f@expr G4126@r G4127@mr) (G2da9@G2d1b@build-void)))) (cdr G4125@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G4125@rhs))))) (car G4125@rhs)))) (set! G30c2@expand-interaction-rhs*/init* (lambda (G4131@lhs* G4132@rhs* G4133@init* G4134@r G4135@mr) ((letrec ((G413b@f (lambda (G413d@lhs* G413e@rhs*) (if (null? G413d@lhs*) (map (lambda (G4141@x) (G30b4@chi-expr G4141@x G4134@r G4135@mr)) G4133@init*) ((lambda (G4143@lhs G4144@rhs) ((lambda (G4147@t) (if (memv G4147@t '(defun)) ((lambda (G4149@rhs) (cons (list 'set! G4143@lhs G4149@rhs) (G413b@f (cdr G413d@lhs*) (cdr G413e@rhs*)))) (G30be@chi-defun (cdr G4144@rhs) G4134@r G4135@mr)) (if (memv G4147@t '(expr)) ((lambda (G414b@rhs) (cons (list 'set! G4143@lhs G414b@rhs) (G413b@f (cdr G413d@lhs*) (cdr G413e@rhs*)))) (G30b4@chi-expr (cdr G4144@rhs) G4134@r G4135@mr)) (if (memv G4147@t '(top-expr)) ((lambda (G414d@e) (cons G414d@e (G413b@f (cdr G413d@lhs*) (cdr G413e@rhs*)))) (G30b4@chi-expr (cdr G4144@rhs) G4134@r G4135@mr)) (error 'expand-interaction '"invallid" G4144@rhs))))) (car G4144@rhs))) (car G413d@lhs*) (car G413e@rhs*)))))) G413b@f) G4131@lhs* G4132@rhs*))) (set! G30c4@chi-rhs* (lambda (G414f@rhs* G4150@r G4151@mr) ((letrec ((G4155@f (lambda (G4157@ls) (if (null? G4157@ls) '() ((lambda (G4159@a) (cons G4159@a (G4155@f (cdr G4157@ls)))) (G30c0@chi-rhs (car G4157@ls) G4150@r G4151@mr)))))) G4155@f) G414f@rhs*))) (set! G30c6@find-bound=? (lambda (G415b@x G415c@lhs* G415d@rhs*) (if (null? G415c@lhs*) '#f (if (G2e53@bound-id=? G415b@x (car G415c@lhs*)) (car G415d@rhs*) (G30c6@find-bound=? G415b@x (cdr G415c@lhs*) (cdr G415d@rhs*)))))) (set! G30c8@find-dups (lambda (G4161@ls) ((letrec ((G4163@f (lambda (G4165@ls G4166@dups) (if (null? G4165@ls) G4166@dups ((lambda (G4169@t) (if G4169@t ((lambda (G416b@x) (G4163@f (cdr G4165@ls) (cons (list (car G4165@ls) G416b@x) G4166@dups))) G4169@t) (G4163@f (cdr G4165@ls) G4166@dups))) (G30c6@find-bound=? (car G4165@ls) (cdr G4165@ls) (cdr G4165@ls))))))) G4163@f) G4161@ls '()))) (set! G30ca@chi-internal (lambda (G416d@e* G416e@r G416f@mr) ((lambda (G4173@rib) (call-with-values (lambda () (G30ef@chi-body* (map (lambda (G417d@x) (G2e39@add-subst G4173@rib G417d@x)) (G2e4b@syntax->list G416d@e*)) G416e@r G416f@mr '() '() '() '() '() G4173@rib '#f)) (lambda (G417f@G4175 G4180@G4176 G4181@G4177 G4182@G4178 G4183@G4179 G4184@G417a G4185@G417b G4186@G417c) ((lambda (G418f@_exp* G4190@kwd* G4191@mod** G4192@rhs* G4193@lex* G4194@mr G4195@r G4196@e*) (begin (if (null? G4196@e*) (G3183@syntax-violation '#f '"no expression in body" G4196@e*) (void)) ((lambda (G419f@init*) ((lambda (G41a1@rhs*) ((lambda () (G2dab@G2d1f@build-letrec* '#f (reverse G4193@lex*) (reverse G41a1@rhs*) (G2da8@G2d19@build-sequence '#f G419f@init*))))) (G30c4@chi-rhs* G4192@rhs* G4195@r G4194@mr))) (G30b0@chi-expr* (append (apply append (reverse G4191@mod**)) G4196@e*) G4195@r G4194@mr)))) G4186@G417c G4185@G417b G4184@G417a G4183@G4179 G4182@G4178 G4181@G4177 G4180@G4176 G417f@G4175)))) (G2df6@make-empty-rib)))) (set! G30cc@parse-module (lambda (G41a3@e) ((lambda (G41a5@t) ((lambda (G41a7@ls/false) (if G41a7@ls/false (apply (lambda (G41a9@export* G41aa@b*) (begin (if (not (for-all G2e4d@id? G41a9@export*)) (G3183@syntax-violation '#f '"module exports must be identifiers" G41a3@e) (void)) (values '#f (list->vector G41a9@export*) G41aa@b*))) G41a7@ls/false) ((lambda (G41ad@t) ((lambda (G41af@ls/false) (if G41af@ls/false (apply (lambda (G41b1@name G41b2@export* G41b3@b*) (begin (if (not (G2e4d@id? G41b1@name)) (G3183@syntax-violation '#f '"module name must be an identifier" G41a3@e) (void)) (if (not (for-all G2e4d@id? G41b2@export*)) (G3183@syntax-violation '#f '"module exports must be identifiers" G41a3@e) (void)) (values G41b1@name (list->vector G41b2@export*) G41b3@b*))) G41af@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G41ad@t))) (G3090@syntax-dispatch G41ad@t '(_ any each-any . each-any)))) G41a5@t))) (G3090@syntax-dispatch G41a5@t '(_ each-any . each-any)))) G41a3@e))) (set! G30d2@G30cd (make-record-type-descriptor 'module-interface '#f 'G30d0 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G30d4@G30cf '#f) (set! G30d6@G30ce (make-record-constructor-descriptor G30d2@G30cd '#f G30d4@G30cf)) (set! G30db@module-interface? (record-predicate G30d2@G30cd)) (set! G30dd@make-module-interface (record-constructor G30d6@G30ce)) (set! G30df@module-interface-first-mark (record-accessor G30d2@G30cd '0)) (set! G30e1@module-interface-exp-id-vec (record-accessor G30d2@G30cd '1)) (set! G30e3@module-interface-exp-lab-vec (record-accessor G30d2@G30cd '2)) (set! G30e5@set-module-interface-first-mark! (record-mutator G30d2@G30cd '0)) (set! G30e7@set-module-interface-exp-id-vec! (record-mutator G30d2@G30cd '1)) (set! G30e9@set-module-interface-exp-lab-vec! (record-mutator G30d2@G30cd '2)) (set! G30eb@module-interface-exp-id* (lambda (G41b7@iface G41b8@id) ((lambda (G41bc@diff-marks) (begin (set! G41bc@diff-marks (lambda (G41c3@ls G41c4@x) (begin (if (null? G41c3@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G41c7@a) (if (eq? G41c7@a G41c4@x) '() (cons G41c7@a (G41bc@diff-marks (cdr G41c3@ls) G41c4@x)))) (car G41c3@ls))))) ((lambda (G41bd@diff G41be@id-vec) (if (null? G41bd@diff) G41be@id-vec (vector-map (lambda (G41c1@x) (G2e17@make-stx (G2e19@stx-expr G41c1@x) (append G41bd@diff (G2e1b@stx-mark* G41c1@x)) '() '())) G41be@id-vec))) (G41bc@diff-marks (G2e1b@stx-mark* G41b8@id) (G30df@module-interface-first-mark G41b7@iface)) (G30e1@module-interface-exp-id-vec G41b7@iface)))) '#f))) (set! G30ed@chi-internal-module (lambda (G41c9@e G41ca@r G41cb@mr G41cc@lex* G41cd@rhs* G41ce@mod** G41cf@kwd*) (call-with-values (lambda () (G30cc@parse-module G41c9@e)) (lambda (G41da@G41d7 G41db@G41d8 G41dc@G41d9) ((lambda (G41e0@e* G41e1@exp-id* G41e2@name) ((lambda (G41e6@rib) ((lambda (G41e8@e*) ((lambda () (call-with-values (lambda () (G30ef@chi-body* G41e8@e* G41ca@r G41cb@mr G41cc@lex* G41cd@rhs* G41ce@mod** G41cf@kwd* '() G41e6@rib '#f)) (lambda (G41f2@G41ea G41f3@G41eb G41f4@G41ec G41f5@G41ed G41f6@G41ee G41f7@G41ef G41f8@G41f0 G41f9@G41f1) ((lambda (G4202@_exp* G4203@kwd* G4204@mod** G4205@rhs* G4206@lex* G4207@mr G4208@r G4209@e*) ((lambda (G4212@exp-lab* G4213@mod**) (if (not G41e2@name) (values G4206@lex* G4205@rhs* G41e1@exp-id* G4212@exp-lab* G4208@r G4207@mr G4213@mod** G4203@kwd*) ((lambda (G4216@lab G4217@iface) (values G4206@lex* G4205@rhs* (vector G41e2@name) (vector G4216@lab) (cons (cons G4216@lab (cons '$module G4217@iface)) G4208@r) (cons (cons G4216@lab (cons '$module G4217@iface)) G4207@mr) G4213@mod** G4203@kwd*)) (G2dc9@gen-label 'module) (G30dd@make-module-interface (car (G2e1b@stx-mark* G41e2@name)) (vector-map (lambda (G421a@x) (G2e17@make-stx (G2e19@stx-expr G421a@x) (G2e1b@stx-mark* G421a@x) '() '())) G41e1@exp-id*) G4212@exp-lab*)))) (vector-map (lambda (G421c@x) ((lambda (G421e@t) (if G421e@t G421e@t (begin '#f (G3183@syntax-violation '#f '"cannot find module export" G421c@x)))) (G2e67@id->label (G2e17@make-stx (G2e4f@id->sym G421c@x) (G2e1b@stx-mark* G421c@x) (list G41e6@rib) '())))) G41e1@exp-id*) (cons G4209@e* G4204@mod**))) G41f9@G41f1 G41f8@G41f0 G41f7@G41ef G41f6@G41ee G41f5@G41ed G41f4@G41ec G41f3@G41eb G41f2@G41ea)))))) (map (lambda (G4220@x) (G2e39@add-subst G41e6@rib G4220@x)) (G2e4b@syntax->list G41e0@e*)))) (G2df6@make-empty-rib))) G41dc@G41d9 G41db@G41d8 G41da@G41d7))))) (set! G30ef@chi-body* (lambda (G4222@e* G4223@r G4224@mr G4225@lex* G4226@rhs* G4227@mod** G4228@kwd* G4229@exp* G422a@rib G422b@top?) (if (null? G4222@e*) (values G4222@e* G4223@r G4224@mr G4225@lex* G4226@rhs* G4227@mod** G4228@kwd* G4229@exp*) ((lambda (G4236@e) (call-with-values (lambda () (G2e75@syntax-type G4236@e G4223@r)) (lambda (G423b@G4238 G423c@G4239 G423d@G423a) ((lambda (G4241@kwd G4242@value G4243@type) ((lambda (G4247@kwd*) ((lambda (G4249@t) (if (memv G4249@t '(define)) (call-with-values (lambda () (G3018@parse-define G4236@e)) (lambda (G424d@G424b G424e@G424c) ((lambda (G4251@rhs G4252@id) (begin (if (G2e5b@bound-id-member? G4252@id G4247@kwd*) (G3183@syntax-violation '#f '"cannot redefine keyword" G4236@e) (void)) (call-with-values (lambda () (G2dcd@gen-define-label+loc G4252@id G422a@rib)) (lambda (G4257@G4255 G4258@G4256) ((lambda (G425b@lex G425c@lab) (begin (G2dfc@extend-rib! G422a@rib G4252@id G425c@lab) (G30ef@chi-body* (cdr G4222@e*) (G3026@add-lexical G425c@lab G425b@lex G4223@r) G4224@mr (cons G425b@lex G4225@lex*) (cons G4251@rhs G4226@rhs*) G4227@mod** G4247@kwd* G4229@exp* G422a@rib G422b@top?))) G4258@G4256 G4257@G4255))))) G424e@G424c G424d@G424b))) (if (memv G4249@t '(define-syntax)) (call-with-values (lambda () (G301a@parse-define-syntax G4236@e)) (lambda (G4261@G425f G4262@G4260) ((lambda (G4265@rhs G4266@id) (begin (if (G2e5b@bound-id-member? G4266@id G4247@kwd*) (G3183@syntax-violation '#f '"cannot redefine keyword" G4236@e) (void)) ((lambda (G4269@lab G426a@expanded-rhs) (begin (G2dfc@extend-rib! G422a@rib G4266@id G4269@lab) ((lambda (G426d@b) (G30ef@chi-body* (cdr G4222@e*) (cons (cons G4269@lab G426d@b) G4223@r) (cons (cons G4269@lab G426d@b) G4224@mr) G4225@lex* G4226@rhs* G4227@mod** G4247@kwd* G4229@exp* G422a@rib G422b@top?)) (G2e94@make-eval-transformer G426a@expanded-rhs)))) (G2dcf@gen-define-label G4266@id G422a@rib) (G30f1@expand-transformer G4265@rhs G4224@mr)))) G4262@G4260 G4261@G425f))) (if (memv G4249@t '(let-syntax letrec-syntax)) ((lambda (G426f@t) ((lambda (G4271@ls/false) (if (if G4271@ls/false (begin '#f (apply (lambda (G4273@xlhs* G4274@xrhs* G4275@xbody*) (if (not (G2e57@valid-bound-ids? G4273@xlhs*)) (G3183@syntax-violation '#f '"invalid identifiers" G4236@e) (void))) G4271@ls/false)) '#f) (apply (lambda (G4279@xlhs* G427a@xrhs* G427b@xbody*) ((lambda (G427f@xlab*) ((lambda (G4281@xrib) ((lambda (G4283@xb*) ((lambda () (G30ef@chi-body* (append (map (lambda (G4285@x) (G2e39@add-subst G4281@xrib G4285@x)) G427b@xbody*) (cdr G4222@e*)) (append (map cons G427f@xlab* G4283@xb*) G4223@r) (append (map cons G427f@xlab* G4283@xb*) G4224@mr) G4225@lex* G4226@rhs* G4227@mod** G4247@kwd* G4229@exp* G422a@rib G422b@top?)))) (map (lambda (G4287@x) (G2e94@make-eval-transformer (G30f1@expand-transformer (if (eq? G4243@type 'let-syntax) G4287@x (G2e39@add-subst G4281@xrib G4287@x)) G4224@mr))) G427a@xrhs*))) (G2e06@make-full-rib G4279@xlhs* G427f@xlab*))) (map G2dc9@gen-label G4279@xlhs*))) G4271@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G426f@t))) (G3090@syntax-dispatch G426f@t '(_ #(each (any any)) . each-any)))) G4236@e) (if (memv G4249@t '(begin)) ((lambda (G4289@t) ((lambda (G428b@ls/false) (if G428b@ls/false (apply (lambda (G428d@x*) (G30ef@chi-body* (append G428d@x* (cdr G4222@e*)) G4223@r G4224@mr G4225@lex* G4226@rhs* G4227@mod** G4247@kwd* G4229@exp* G422a@rib G422b@top?)) G428b@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G4289@t))) (G3090@syntax-dispatch G4289@t '(_ . each-any)))) G4236@e) (if (memv G4249@t '(global-macro global-macro!)) (G30ef@chi-body* (cons (G2e39@add-subst G422a@rib (G30ae@chi-global-macro G4242@value G4236@e)) (cdr G4222@e*)) G4223@r G4224@mr G4225@lex* G4226@rhs* G4227@mod** G4247@kwd* G4229@exp* G422a@rib G422b@top?) (if (memv G4249@t '(local-macro local-macro!)) (G30ef@chi-body* (cons (G2e39@add-subst G422a@rib (G30ac@chi-local-macro G4242@value G4236@e)) (cdr G4222@e*)) G4223@r G4224@mr G4225@lex* G4226@rhs* G4227@mod** G4247@kwd* G4229@exp* G422a@rib G422b@top?) (if (memv G4249@t '(macro macro!)) (G30ef@chi-body* (cons (G2e39@add-subst G422a@rib (G30aa@chi-macro G4242@value G4236@e)) (cdr G4222@e*)) G4223@r G4224@mr G4225@lex* G4226@rhs* G4227@mod** G4247@kwd* G4229@exp* G422a@rib G422b@top?) (if (memv G4249@t '(module)) (call-with-values (lambda () (G30ed@chi-internal-module G4236@e G4223@r G4224@mr G4225@lex* G4226@rhs* G4227@mod** G4247@kwd*)) (lambda (G4297@G428f G4298@G4290 G4299@G4291 G429a@G4292 G429b@G4293 G429c@G4294 G429d@G4295 G429e@G4296) ((lambda (G42a7@kwd* G42a8@mod** G42a9@mr G42aa@r G42ab@m-exp-lab* G42ac@m-exp-id* G42ad@rhs* G42ae@lex*) (begin (vector-for-each (lambda (G42b7@id G42b8@lab) (G2dfc@extend-rib! G422a@rib G42b7@id G42b8@lab)) G42ac@m-exp-id* G42ab@m-exp-lab*) (G30ef@chi-body* (cdr G4222@e*) G42aa@r G42a9@mr G42ae@lex* G42ad@rhs* G42a8@mod** G42a7@kwd* G4229@exp* G422a@rib G422b@top?))) G429e@G4296 G429d@G4295 G429c@G4294 G429b@G4293 G429a@G4292 G4299@G4291 G4298@G4290 G4297@G428f))) (if (memv G4249@t '(library)) (begin (G3163@library-expander (G2e63@stx->datum G4236@e)) (G30ef@chi-body* (cdr G4222@e*) G4223@r G4224@mr G4225@lex* G4226@rhs* G4227@mod** G4247@kwd* G4229@exp* G422a@rib G422b@top?)) (if (memv G4249@t '(export)) ((lambda (G42bb@t) ((lambda (G42bd@ls/false) (if G42bd@ls/false (apply (lambda (G42bf@exp-decl*) (G30ef@chi-body* (cdr G4222@e*) G4223@r G4224@mr G4225@lex* G4226@rhs* G4227@mod** G4247@kwd* (append G42bf@exp-decl* G4229@exp*) G422a@rib G422b@top?)) G42bd@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G42bb@t))) (G3090@syntax-dispatch G42bb@t '(_ . each-any)))) G4236@e) (if (memv G4249@t '(import)) ((lambda () ((lambda (G42c2@module-import? G42c4@module-import G42c6@library-import) (begin (set! G42c2@module-import? (lambda (G430e@e) ((lambda (G4310@t) ((lambda (G4312@ls/false) (if (if G4312@ls/false (begin '#f (apply (lambda (G4314@id) (G2e4d@id? G4314@id)) G4312@ls/false)) '#f) (apply (lambda (G4316@id) '#t) G4312@ls/false) ((lambda (G4318@t) ((lambda (G431a@ls/false) (if G431a@ls/false (apply (lambda (G431c@imp*) '#f) G431a@ls/false) ((lambda (G431e@t) ((lambda (G4320@ls/false) (if G4320@ls/false (apply (lambda () (G3183@syntax-violation '#f '"malformed import form" G430e@e)) G4320@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G431e@t))) (G3090@syntax-dispatch G431e@t '_))) G4318@t))) (G3090@syntax-dispatch G4318@t '(_ . each-any)))) G4310@t))) (G3090@syntax-dispatch G4310@t '(_ any)))) G430e@e))) (set! G42c4@module-import (lambda (G42ef@e G42f0@r) ((lambda (G42f3@t) ((lambda (G42f5@ls/false) (if (if G42f5@ls/false (begin '#f (apply (lambda (G42f7@id) (G2e4d@id? G42f7@id)) G42f5@ls/false)) '#f) (apply (lambda (G42f9@id) (call-with-values (lambda () (G2e75@syntax-type G42f9@id G42f0@r)) (lambda (G42fe@G42fb G42ff@G42fc G4300@G42fd) ((lambda (G4304@kwd G4305@value G4306@type) ((lambda (G430a@t) (if (memv G430a@t '($module)) ((lambda (G430c@iface) (values (G30eb@module-interface-exp-id* G430c@iface G42f9@id) (G30e3@module-interface-exp-lab-vec G430c@iface))) G4305@value) (G3183@syntax-violation '#f '"invalid import" G42ef@e))) G4306@type)) G4300@G42fd G42ff@G42fc G42fe@G42fb)))) G42f5@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G42f3@t))) (G3090@syntax-dispatch G42f3@t '(_ any)))) G42ef@e))) (set! G42c6@library-import (lambda (G42d5@e) ((lambda (G42d7@t) ((lambda (G42d9@ls/false) (if G42d9@ls/false (apply (lambda (G42db@ctxt G42dc@imp*) (call-with-values (lambda () (G30f9@parse-import-spec* (G3189@syntax->datum G42dc@imp*))) (lambda (G42e1@G42df G42e2@G42e0) ((lambda (G42e5@subst-labels G42e6@subst-names) (values (vector-map (lambda (G42e9@name) (G2e2b@datum->stx G42db@ctxt G42e9@name)) G42e6@subst-names) G42e5@subst-labels)) G42e2@G42e0 G42e1@G42df)))) G42d9@ls/false) ((lambda (G42eb@t) ((lambda (G42ed@ls/false) (if G42ed@ls/false (apply (lambda () (G3183@syntax-violation '#f '"invalid import form" G42d5@e)) G42ed@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G42eb@t))) (G3090@syntax-dispatch G42eb@t '_))) G42d7@t))) (G3090@syntax-dispatch G42d7@t '(any . each-any)))) G42d5@e))) (begin (call-with-values (lambda () (if (G42c2@module-import? G4236@e) (G42c4@module-import G4236@e G4223@r) (G42c6@library-import G4236@e))) (lambda (G42c9@G42c7 G42ca@G42c8) ((lambda (G42cd@lab* G42ce@id*) (vector-for-each (lambda (G42d1@id G42d2@lab) (G2dfc@extend-rib! G422a@rib G42d1@id G42d2@lab)) G42ce@id* G42cd@lab*)) G42ca@G42c8 G42c9@G42c7))) (G30ef@chi-body* (cdr G4222@e*) G4223@r G4224@mr G4225@lex* G4226@rhs* G4227@mod** G4247@kwd* G4229@exp* G422a@rib G422b@top?)))) '#f '#f '#f))) (if G422b@top? (G30ef@chi-body* (cdr G4222@e*) G4223@r G4224@mr (cons (G2dc5@gen-lexical 'dummy) G4225@lex*) (cons (cons 'top-expr G4236@e) G4226@rhs*) G4227@mod** G4247@kwd* G4229@exp* G422a@rib G422b@top?) (values G4222@e* G4223@r G4224@mr G4225@lex* G4226@rhs* G4227@mod** G4247@kwd* G4229@exp*)))))))))))))) G4243@type)) (if (G2e4d@id? G4241@kwd) (cons G4241@kwd G4228@kwd*) G4228@kwd*))) G423d@G423a G423c@G4239 G423b@G4238)))) (car G4222@e*))))) (set! G30f1@expand-transformer (lambda (G4322@expr G4323@r) ((lambda (G4326@rtc) ((lambda (G4328@expanded-rhs) (begin (for-each ((lambda (G432a@mark-visit) (lambda (G432c@x) (begin (G2c42@G2ad7@invoke-library G432c@x) (G432a@mark-visit G432c@x)))) (G3101@vis-collector)) (G4326@rtc)) G4328@expanded-rhs)) ((lambda (G4332@G432e@inv-collector G4333@G432f@vis-collector G4334@G4330@inv-collector G4335@G4331@vis-collector) ((lambda (G433a@swap) (dynamic-wind G433a@swap (lambda () (G30b4@chi-expr G4322@expr G4323@r G4323@r)) G433a@swap)) (lambda () (begin ((lambda (G433c@t) (begin (G4332@G432e@inv-collector G4334@G4330@inv-collector) (set! G4334@G4330@inv-collector G433c@t))) (G4332@G432e@inv-collector)) ((lambda (G433e@t) (begin (G4333@G432f@vis-collector G4335@G4331@vis-collector) (set! G4335@G4331@vis-collector G433e@t))) (G4333@G432f@vis-collector)))))) G30ff@inv-collector G3101@vis-collector G4326@rtc (lambda (G4340@x) (values))))) (G30fd@make-collector)))) (set! G30f3@parse-exports (lambda (G4342@exp*) ((letrec ((G4344@f (lambda (G4346@exp* G4347@int* G4348@ext*) (if (null? G4346@exp*) (begin (if (not (G2e57@valid-bound-ids? G4348@ext*)) (G3183@syntax-violation 'export '"invalid exports" (G30c8@find-dups G4348@ext*)) (void)) (values (map G3189@syntax->datum G4348@ext*) G4347@int*)) ((lambda (G434c@t) ((lambda (G434e@ls/false) (if G434e@ls/false (apply (lambda (G4350@rename G4351@i* G4352@e*) (begin (if (not (if (eq? (G3189@syntax->datum G4350@rename) 'rename) (if (for-all G2e4d@id? G4351@i*) (begin '#f (for-all G2e4d@id? G4352@e*)) '#f) '#f)) (G3183@syntax-violation 'export '"invalid export specifier" (car G4346@exp*)) (void)) (G4344@f (cdr G4346@exp*) (append G4351@i* G4347@int*) (append G4352@e* G4348@ext*)))) G434e@ls/false) ((lambda (G4356@t) ((lambda (G4358@ls/false) (if G4358@ls/false (apply (lambda (G435a@ie) (begin (if (not (G2e4d@id? G435a@ie)) (G3183@syntax-violation 'export '"invalid export" G435a@ie) (void)) (G4344@f (cdr G4346@exp*) (cons G435a@ie G4347@int*) (cons G435a@ie G4348@ext*)))) G4358@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G4356@t))) (G3090@syntax-dispatch G4356@t 'any))) G434c@t))) (G3090@syntax-dispatch G434c@t '(any . #(each (any any)))))) (car G4346@exp*)))))) G4344@f) G4342@exp* '() '()))) (set! G30f5@parse-library-name (lambda (G435c@spec) ((lambda (G435f@parse) (begin (set! G435f@parse (lambda (G436a@x) ((lambda (G436c@t) ((lambda (G436e@ls/false) (if (if G436e@ls/false (begin '#f (apply (lambda (G4370@v*) (for-all (lambda (G4372@x) ((lambda (G4374@x) (if (integer? G4374@x) (begin '#f (exact? G4374@x)) '#f)) (G3189@syntax->datum G4372@x))) G4370@v*)) G436e@ls/false)) '#f) (apply (lambda (G4376@v*) (values '() (map G3189@syntax->datum G4376@v*))) G436e@ls/false) ((lambda (G4378@t) ((lambda (G437a@ls/false) (if (if G437a@ls/false (begin '#f (apply (lambda (G437c@x G437d@rest) (symbol? (G3189@syntax->datum G437c@x))) G437a@ls/false)) '#f) (apply (lambda (G4380@x G4381@rest) (call-with-values (lambda () (G435f@parse G4381@rest)) (lambda (G4386@G4384 G4387@G4385) ((lambda (G438a@v* G438b@x*) (values (cons (G3189@syntax->datum G4380@x) G438b@x*) G438a@v*)) G4387@G4385 G4386@G4384)))) G437a@ls/false) ((lambda (G438e@t) ((lambda (G4390@ls/false) (if G4390@ls/false (apply (lambda () (values '() '())) G4390@ls/false) ((lambda (G4392@t) ((lambda (G4394@ls/false) (if G4394@ls/false (apply (lambda () (G3183@syntax-violation '#f '"invalid library name" G435c@spec)) G4394@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G4392@t))) (G3090@syntax-dispatch G4392@t '_))) G438e@t))) (G3090@syntax-dispatch G438e@t '()))) G4378@t))) (G3090@syntax-dispatch G4378@t '(any . any)))) G436c@t))) (G3090@syntax-dispatch G436c@t '(each-any)))) G436a@x))) (call-with-values (lambda () (G435f@parse G435c@spec)) (lambda (G4362@G4360 G4363@G4361) ((lambda (G4366@ver* G4367@name*) (begin (if (null? G4367@name*) (G3183@syntax-violation '#f '"empty library name" G435c@spec) (void)) (values G4367@name* G4366@ver*))) G4363@G4361 G4362@G4360))))) '#f))) (set! G30f7@parse-library (lambda (G4396@e) ((lambda (G4398@t) ((lambda (G439a@ls/false) (if (if G439a@ls/false (begin '#f (apply (lambda (G439c@library G439d@name* G439e@export G439f@exp* G43a0@import G43a1@imp* G43a2@b*) (if (eq? (G3189@syntax->datum G439e@export) 'export) (if (eq? (G3189@syntax->datum G43a0@import) 'import) (begin '#f (eq? (G3189@syntax->datum G439c@library) 'library)) '#f) '#f)) G439a@ls/false)) '#f) (apply (lambda (G43aa@library G43ab@name* G43ac@export G43ad@exp* G43ae@import G43af@imp* G43b0@b*) (values G43ab@name* G43ad@exp* G43af@imp* G43b0@b*)) G439a@ls/false) ((lambda (G43b8@t) ((lambda (G43ba@ls/false) (if G43ba@ls/false (apply (lambda () (G3183@syntax-violation '#f '"malformed library" G4396@e)) G43ba@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G43b8@t))) (G3090@syntax-dispatch G43b8@t '_))) G4398@t))) (G3090@syntax-dispatch G4398@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4396@e))) (set! G30f9@parse-import-spec* ((lambda () ((lambda (G43bd@idsyn? G43bf@dup-error G43c1@merge-substs G43c3@exclude* G43c5@find* G43c7@rem* G43c9@remove-dups G43cb@parse-library-name G43cd@import-library G43cf@get-import G43d1@add-imports!) (begin (set! G43bd@idsyn? (lambda (G45bc@x) (symbol? (G3189@syntax->datum G45bc@x)))) (set! G43bf@dup-error (lambda (G45ba@name) (G3183@syntax-violation 'import '"two imports with different bindings" G45ba@name))) (set! G43c1@merge-substs (lambda (G45a8@s G45a9@subst) ((lambda (G45ad@insert-to-subst) (begin (set! G45ad@insert-to-subst (lambda (G45ae@a G45af@subst) ((lambda (G45b2@name G45b3@label) ((lambda (G45b6@t) (if G45b6@t ((lambda (G45b8@x) (if (eq? (cdr G45b8@x) G45b3@label) G45af@subst (G43bf@dup-error G45b2@name))) G45b6@t) (cons G45ae@a G45af@subst))) (assq G45b2@name G45af@subst))) (car G45ae@a) (cdr G45ae@a)))) (if (null? G45a8@s) G45a9@subst (G45ad@insert-to-subst (car G45a8@s) (G43c1@merge-substs (cdr G45a8@s) G45a9@subst))))) '#f))) (set! G43c3@exclude* (lambda (G457e@sym* G457f@subst) ((lambda (G4583@exclude) (begin (set! G4583@exclude (lambda (G4598@sym G4599@subst) (if (null? G4599@subst) (G3183@syntax-violation 'import '"cannot rename unbound identifier" G4598@sym) (if (eq? G4598@sym (caar G4599@subst)) (values (cdar G4599@subst) (cdr G4599@subst)) ((lambda (G459c@a) (call-with-values (lambda () (G4583@exclude G4598@sym (cdr G4599@subst))) (lambda (G45a0@G459e G45a1@G459f) ((lambda (G45a4@subst G45a5@old) (values G45a5@old (cons G459c@a G45a4@subst))) G45a1@G459f G45a0@G459e)))) (car G4599@subst)))))) (if (null? G457e@sym*) (values '() G457f@subst) (call-with-values (lambda () (G4583@exclude (car G457e@sym*) G457f@subst)) (lambda (G4586@G4584 G4587@G4585) ((lambda (G458a@subst G458b@old) (call-with-values (lambda () (G43c3@exclude* (cdr G457e@sym*) G458a@subst)) (lambda (G4590@G458e G4591@G458f) ((lambda (G4594@subst G4595@old*) (values (cons G458b@old G4595@old*) G4594@subst)) G4591@G458f G4590@G458e)))) G4587@G4585 G4586@G4584)))))) '#f))) (set! G43c5@find* (lambda (G4576@sym* G4577@subst) (map (lambda (G457a@x) ((lambda (G457c@t) (if G457c@t (cdr G457c@t) (G3183@syntax-violation 'import '"cannot find identifier" G457a@x))) (assq G457a@x G4577@subst))) G4576@sym*))) (set! G43c7@rem* (lambda (G456e@sym* G456f@subst) ((letrec ((G4572@f (lambda (G4574@subst) (if (null? G4574@subst) '() (if (memq (caar G4574@subst) G456e@sym*) (G4572@f (cdr G4574@subst)) (cons (car G4574@subst) (G4572@f (cdr G4574@subst)))))))) G4572@f) G456f@subst))) (set! G43c9@remove-dups (lambda (G456c@ls) (if (null? G456c@ls) '() (if (memq (car G456c@ls) (cdr G456c@ls)) (G43c9@remove-dups (cdr G456c@ls)) (cons (car G456c@ls) (G43c9@remove-dups (cdr G456c@ls))))))) (set! G43cb@parse-library-name (lambda (G4486@spec) ((lambda (G4489@subversion? G448b@subversion-pred G448d@version-pred) (begin (set! G4489@subversion? (lambda (G4568@x) ((lambda (G456a@x) (if (integer? G456a@x) (if (exact? G456a@x) (begin '#f (>= G456a@x '0)) '#f) '#f)) (G3189@syntax->datum G4568@x)))) (set! G448b@subversion-pred (lambda (G4508@x*) ((lambda (G450a@t) ((lambda (G450c@ls/false) (if (if G450c@ls/false (begin '#f (apply (lambda (G450e@n) (G4489@subversion? G450e@n)) G450c@ls/false)) '#f) (apply (lambda (G4510@n) (lambda (G4512@x) (= G4512@x (G3189@syntax->datum G4510@n)))) G450c@ls/false) ((lambda (G4514@t) ((lambda (G4516@ls/false) (if (if G4516@ls/false (begin '#f (apply (lambda (G4518@p? G4519@sub*) (eq? (G3189@syntax->datum G4518@p?) 'and)) G4516@ls/false)) '#f) (apply (lambda (G451c@p? G451d@sub*) ((lambda (G4520@p*) (lambda (G4522@x) (for-all (lambda (G4524@p) (G4524@p G4522@x)) G4520@p*))) (map G448b@subversion-pred G451d@sub*))) G4516@ls/false) ((lambda (G4526@t) ((lambda (G4528@ls/false) (if (if G4528@ls/false (begin '#f (apply (lambda (G452a@p? G452b@sub*) (eq? (G3189@syntax->datum G452a@p?) 'or)) G4528@ls/false)) '#f) (apply (lambda (G452e@p? G452f@sub*) ((lambda (G4532@p*) (lambda (G4534@x) (exists (lambda (G4536@p) (G4536@p G4534@x)) G4532@p*))) (map G448b@subversion-pred G452f@sub*))) G4528@ls/false) ((lambda (G4538@t) ((lambda (G453a@ls/false) (if (if G453a@ls/false (begin '#f (apply (lambda (G453c@p? G453d@sub) (eq? (G3189@syntax->datum G453c@p?) 'not)) G453a@ls/false)) '#f) (apply (lambda (G4540@p? G4541@sub) ((lambda (G4544@p) (lambda (G4546@x) (not (G4544@p G4546@x)))) (G448b@subversion-pred G4541@sub))) G453a@ls/false) ((lambda (G4548@t) ((lambda (G454a@ls/false) (if (if G454a@ls/false (begin '#f (apply (lambda (G454c@p? G454d@n) (if (eq? (G3189@syntax->datum G454c@p?) '<=) (begin '#f (G4489@subversion? G454d@n)) '#f)) G454a@ls/false)) '#f) (apply (lambda (G4550@p? G4551@n) (lambda (G4554@x) (<= G4554@x (G3189@syntax->datum G4551@n)))) G454a@ls/false) ((lambda (G4556@t) ((lambda (G4558@ls/false) (if (if G4558@ls/false (begin '#f (apply (lambda (G455a@p? G455b@n) (if (eq? (G3189@syntax->datum G455a@p?) '>=) (begin '#f (G4489@subversion? G455b@n)) '#f)) G4558@ls/false)) '#f) (apply (lambda (G455e@p? G455f@n) (lambda (G4562@x) (>= G4562@x (G3189@syntax->datum G455f@n)))) G4558@ls/false) ((lambda (G4564@t) ((lambda (G4566@ls/false) (if G4566@ls/false (apply (lambda () (G3183@syntax-violation 'import '"invalid sub-version spec" G4486@spec G4508@x*)) G4566@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G4564@t))) (G3090@syntax-dispatch G4564@t '_))) G4556@t))) (G3090@syntax-dispatch G4556@t '(any any)))) G4548@t))) (G3090@syntax-dispatch G4548@t '(any any)))) G4538@t))) (G3090@syntax-dispatch G4538@t '(any any)))) G4526@t))) (G3090@syntax-dispatch G4526@t '(any . each-any)))) G4514@t))) (G3090@syntax-dispatch G4514@t '(any . each-any)))) G450a@t))) (G3090@syntax-dispatch G450a@t 'any))) G4508@x*))) (set! G448d@version-pred (lambda (G44b8@x*) ((lambda (G44ba@t) ((lambda (G44bc@ls/false) (if G44bc@ls/false (apply (lambda () (lambda (G44be@x) '#t)) G44bc@ls/false) ((lambda (G44c0@t) ((lambda (G44c2@ls/false) (if (if G44c2@ls/false (begin '#f (apply (lambda (G44c4@c G44c5@ver*) (eq? (G3189@syntax->datum G44c4@c) 'and)) G44c2@ls/false)) '#f) (apply (lambda (G44c8@c G44c9@ver*) ((lambda (G44cc@p*) (lambda (G44ce@x) (for-all (lambda (G44d0@p) (G44d0@p G44ce@x)) G44cc@p*))) (map G448d@version-pred G44c9@ver*))) G44c2@ls/false) ((lambda (G44d2@t) ((lambda (G44d4@ls/false) (if (if G44d4@ls/false (begin '#f (apply (lambda (G44d6@c G44d7@ver*) (eq? (G3189@syntax->datum G44d6@c) 'or)) G44d4@ls/false)) '#f) (apply (lambda (G44da@c G44db@ver*) ((lambda (G44de@p*) (lambda (G44e0@x) (exists (lambda (G44e2@p) (G44e2@p G44e0@x)) G44de@p*))) (map G448d@version-pred G44db@ver*))) G44d4@ls/false) ((lambda (G44e4@t) ((lambda (G44e6@ls/false) (if (if G44e6@ls/false (begin '#f (apply (lambda (G44e8@c G44e9@ver) (eq? (G3189@syntax->datum G44e8@c) 'not)) G44e6@ls/false)) '#f) (apply (lambda (G44ec@c G44ed@ver) ((lambda (G44f0@p) (lambda (G44f2@x) (not (G44f0@p G44f2@x)))) (G448d@version-pred G44ed@ver))) G44e6@ls/false) ((lambda (G44f4@t) ((lambda (G44f6@ls/false) (if G44f6@ls/false (apply (lambda (G44f8@sub*) ((lambda (G44fa@p*) (lambda (G44fc@x) ((letrec ((G44fe@f (lambda (G4500@p* G4501@x) (if (null? G4500@p*) '#t (if (null? G4501@x) '#f (if ((car G4500@p*) (car G4501@x)) (begin '#f (G44fe@f (cdr G4500@p*) (cdr G4501@x))) '#f)))))) G44fe@f) G44fa@p* G44fc@x))) (map G448b@subversion-pred G44f8@sub*))) G44f6@ls/false) ((lambda (G4504@t) ((lambda (G4506@ls/false) (if G4506@ls/false (apply (lambda () (G3183@syntax-violation 'import '"invalid version spec" G4486@spec G44b8@x*)) G4506@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G4504@t))) (G3090@syntax-dispatch G4504@t '_))) G44f4@t))) (G3090@syntax-dispatch G44f4@t 'each-any))) G44e4@t))) (G3090@syntax-dispatch G44e4@t '(any any)))) G44d2@t))) (G3090@syntax-dispatch G44d2@t '(any . each-any)))) G44c0@t))) (G3090@syntax-dispatch G44c0@t '(any . each-any)))) G44ba@t))) (G3090@syntax-dispatch G44ba@t '()))) G44b8@x*))) ((letrec ((G448e@f (lambda (G4490@x) ((lambda (G4492@t) ((lambda (G4494@ls/false) (if G4494@ls/false (apply (lambda (G4496@version-spec*) (values '() (G448d@version-pred G4496@version-spec*))) G4494@ls/false) ((lambda (G4498@t) ((lambda (G449a@ls/false) (if (if G449a@ls/false (begin '#f (apply (lambda (G449c@x G449d@x*) (G43bd@idsyn? G449c@x)) G449a@ls/false)) '#f) (apply (lambda (G44a0@x G44a1@x*) (call-with-values (lambda () (G448e@f G44a1@x*)) (lambda (G44a6@G44a4 G44a7@G44a5) ((lambda (G44aa@pred G44ab@name) (values (cons (G3189@syntax->datum G44a0@x) G44ab@name) G44aa@pred)) G44a7@G44a5 G44a6@G44a4)))) G449a@ls/false) ((lambda (G44ae@t) ((lambda (G44b0@ls/false) (if G44b0@ls/false (apply (lambda () (values '() (lambda (G44b2@x) '#t))) G44b0@ls/false) ((lambda (G44b4@t) ((lambda (G44b6@ls/false) (if G44b6@ls/false (apply (lambda () (G3183@syntax-violation '#f '"invalid import spec" G4486@spec)) G44b6@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G44b4@t))) (G3090@syntax-dispatch G44b4@t '_))) G44ae@t))) (G3090@syntax-dispatch G44ae@t '()))) G4498@t))) (G3090@syntax-dispatch G4498@t '(any . any)))) G4492@t))) (G3090@syntax-dispatch G4492@t '(each-any)))) G4490@x)))) G448e@f) G4486@spec))) '#f '#f '#f))) (set! G43cd@import-library (lambda (G4478@spec*) (call-with-values (lambda () (G43cb@parse-library-name G4478@spec*)) (lambda (G447c@G447a G447d@G447b) ((lambda (G4480@pred G4481@name) (begin (if (null? G4481@name) (G3183@syntax-violation 'import '"empty library name" G4478@spec*) (void)) ((lambda (G4484@lib) (begin (if (not G4484@lib) (G3183@syntax-violation 'import '"cannot find library with required name" G4481@name) (void)) (if (not (G4480@pred (G2c13@G2a79@library-version G4484@lib))) (G3183@syntax-violation 'import '"library does not satisfy version specification" G4478@spec* G4484@lib) (void)) ((G3103@imp-collector) G4484@lib) (G2c17@G2a81@library-subst G4484@lib))) (G2c3b@G2ac9@find-library-by-name G4481@name)))) G447d@G447b G447c@G447a))))) (set! G43cf@get-import (lambda (G43ea@spec) ((lambda (G43ec@t) ((lambda (G43ee@ls/false) (if (if G43ee@ls/false (begin '#f (apply (lambda (G43f0@x G43f1@x*) (not (memq (G3189@syntax->datum G43f0@x) '(for rename except only prefix library)))) G43ee@ls/false)) '#f) (apply (lambda (G43f4@x G43f5@x*) (G43cd@import-library (cons G43f4@x G43f5@x*))) G43ee@ls/false) ((lambda (G43f8@t) ((lambda (G43fa@ls/false) (if (if G43fa@ls/false (begin '#f (apply (lambda (G43fc@rename G43fd@isp G43fe@old* G43ff@new*) (if (eq? (G3189@syntax->datum G43fc@rename) 'rename) (if (for-all G43bd@idsyn? G43fe@old*) (begin '#f (for-all G43bd@idsyn? G43ff@new*)) '#f) '#f)) G43fa@ls/false)) '#f) (apply (lambda (G4404@rename G4405@isp G4406@old* G4407@new*) ((lambda (G440c@subst G440d@old* G440e@new*) ((lambda (G4412@old-label*) ((lambda (G4414@subst) (G43c1@merge-substs (map cons G440e@new* G4412@old-label*) G4414@subst)) (G43c7@rem* G440d@old* G440c@subst))) (G43c5@find* G440d@old* G440c@subst))) (G43cf@get-import G4405@isp) (map G3189@syntax->datum G4406@old*) (map G3189@syntax->datum G4407@new*))) G43fa@ls/false) ((lambda (G4416@t) ((lambda (G4418@ls/false) (if (if G4418@ls/false (begin '#f (apply (lambda (G441a@except G441b@isp G441c@sym*) (if (eq? (G3189@syntax->datum G441a@except) 'except) (begin '#f (for-all G43bd@idsyn? G441c@sym*)) '#f)) G4418@ls/false)) '#f) (apply (lambda (G4420@except G4421@isp G4422@sym*) ((lambda (G4426@subst) (G43c7@rem* (map G3189@syntax->datum G4422@sym*) G4426@subst)) (G43cf@get-import G4421@isp))) G4418@ls/false) ((lambda (G4428@t) ((lambda (G442a@ls/false) (if (if G442a@ls/false (begin '#f (apply (lambda (G442c@only G442d@isp G442e@sym*) (if (eq? (G3189@syntax->datum G442c@only) 'only) (begin '#f (for-all G43bd@idsyn? G442e@sym*)) '#f)) G442a@ls/false)) '#f) (apply (lambda (G4432@only G4433@isp G4434@sym*) ((lambda (G4438@subst G4439@sym*) ((lambda (G443c@sym*) ((lambda (G443e@lab*) (map cons G443c@sym* G443e@lab*)) (G43c5@find* G443c@sym* G4438@subst))) (G43c9@remove-dups G4439@sym*))) (G43cf@get-import G4433@isp) (map G3189@syntax->datum G4434@sym*))) G442a@ls/false) ((lambda (G4440@t) ((lambda (G4442@ls/false) (if (if G4442@ls/false (begin '#f (apply (lambda (G4444@prefix G4445@isp G4446@p) (if (eq? (G3189@syntax->datum G4444@prefix) 'prefix) (begin '#f (G43bd@idsyn? G4446@p)) '#f)) G4442@ls/false)) '#f) (apply (lambda (G444a@prefix G444b@isp G444c@p) ((lambda (G4450@subst G4451@prefix) (map (lambda (G4454@x) (cons (string->symbol (string-append G4451@prefix (symbol->string (car G4454@x)))) (cdr G4454@x))) G4450@subst)) (G43cf@get-import G444b@isp) (symbol->string (G3189@syntax->datum G444c@p)))) G4442@ls/false) ((lambda (G4456@t) ((lambda (G4458@ls/false) (if (if G4458@ls/false (begin '#f (apply (lambda (G445a@library G445b@spec*) (eq? (G3189@syntax->datum G445a@library) 'library)) G4458@ls/false)) '#f) (apply (lambda (G445e@library G445f@spec*) (G43cd@import-library G445f@spec*)) G4458@ls/false) ((lambda (G4462@t) ((lambda (G4464@ls/false) (if (if G4464@ls/false (begin '#f (apply (lambda (G4466@for G4467@isp G4468@rest) (eq? (G3189@syntax->datum G4466@for) 'for)) G4464@ls/false)) '#f) (apply (lambda (G446c@for G446d@isp G446e@rest) (G43cf@get-import G446d@isp)) G4464@ls/false) ((lambda (G4472@t) ((lambda (G4474@ls/false) (if G4474@ls/false (apply (lambda (G4476@spec) (G3183@syntax-violation 'import '"invalid import spec" G4476@spec)) G4474@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G4472@t))) (G3090@syntax-dispatch G4472@t 'any))) G4462@t))) (G3090@syntax-dispatch G4462@t '(any any . any)))) G4456@t))) (G3090@syntax-dispatch G4456@t '(any each-any)))) G4440@t))) (G3090@syntax-dispatch G4440@t '(any any any)))) G4428@t))) (G3090@syntax-dispatch G4428@t '(any any . each-any)))) G4416@t))) (G3090@syntax-dispatch G4416@t '(any any . each-any)))) G43f8@t))) (G3090@syntax-dispatch G43f8@t '(any any . #(each (any any)))))) G43ec@t))) (G3090@syntax-dispatch G43ec@t '(any . each-any)))) G43ea@spec))) (set! G43d1@add-imports! (lambda (G43da@imp G43db@h) ((lambda (G43de@subst) (for-each (lambda (G43e0@x) ((lambda (G43e2@name G43e3@label) ((lambda (G43e6@t) (if G43e6@t ((lambda (G43e8@l) (if (not (eq? G43e8@l G43e3@label)) (G43bf@dup-error G43e2@name) (void))) G43e6@t) (hashtable-set! G43db@h G43e2@name G43e3@label))) (hashtable-ref G43db@h G43e2@name '#f))) (car G43e0@x) (cdr G43e0@x))) G43de@subst)) (G43cf@get-import G43da@imp)))) (lambda (G43d2@imp*) ((letrec ((G43d4@f (lambda (G43d6@imp* G43d7@h) (if (null? G43d6@imp*) (hashtable-entries G43d7@h) (begin (G43d1@add-imports! (car G43d6@imp*) G43d7@h) (G43d4@f (cdr G43d6@imp*) G43d7@h)))))) G43d4@f) G43d2@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G30fb@make-top-rib (lambda (G45be@names G45bf@labels) ((lambda (G45c2@rib) (begin (vector-for-each (lambda (G45c4@name G45c5@label) (begin (if (not (symbol? G45c4@name)) (error 'make-top-rib '"BUG: not a symbol" G45c4@name) (void)) (G2dfe@extend-rib/nc! G45c2@rib (G2e17@make-stx G45c4@name G2dc1@top-mark* '() '()) G45c5@label))) G45be@names G45bf@labels) G45c2@rib)) (G2df8@make-cache-rib)))) (set! G30fd@make-collector (lambda () ((lambda (G45c8@ls) (lambda G45cc ((lambda (G45cd) (if (= G45cd '0) (apply (lambda () G45c8@ls) G45cc) (if (= G45cd '1) (apply (lambda (G45ca@x) (set! G45c8@ls (G2dba@set-cons G45ca@x G45c8@ls))) G45cc) (error 'apply '"invalid arg count")))) (length G45cc)))) '()))) (set! G30ff@inv-collector (G299f@G28aa@make-parameter (lambda G45ce@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G45d0@x) (begin (if (not (procedure? G45d0@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G45d0@x) (void)) G45d0@x)))) (set! G3101@vis-collector (G299f@G28aa@make-parameter (lambda G45d2@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G45d4@x) (begin (if (not (procedure? G45d4@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G45d4@x) (void)) G45d4@x)))) (set! G3103@imp-collector (G299f@G28aa@make-parameter (lambda G45d6@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G45d8@x) (begin (if (not (procedure? G45d8@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G45d8@x) (void)) G45d8@x)))) (set! G3105@chi-library-internal (lambda (G45da@e* G45db@rib G45dc@top?) (call-with-values (lambda () (G30ef@chi-body* G45da@e* '() '() '() '() '() '() '() G45db@rib G45dc@top?)) (lambda (G45e8@G45e0 G45e9@G45e1 G45ea@G45e2 G45eb@G45e3 G45ec@G45e4 G45ed@G45e5 G45ee@G45e6 G45ef@G45e7) ((lambda (G45f8@exp* G45f9@_kwd* G45fa@mod** G45fb@rhs* G45fc@lex* G45fd@mr G45fe@r G45ff@e*) (values (append (apply append (reverse G45fa@mod**)) G45ff@e*) G45fe@r G45fd@mr (reverse G45fc@lex*) (reverse G45fb@rhs*) G45f8@exp*)) G45ef@G45e7 G45ee@G45e6 G45ed@G45e5 G45ec@G45e4 G45eb@G45e3 G45ea@G45e2 G45e9@G45e1 G45e8@G45e0))))) (set! G3107@chi-interaction-expr (lambda (G4608@e G4609@rib G460a@r) (call-with-values (lambda () (G30ef@chi-body* (list G4608@e) G460a@r G460a@r '() '() '() '() '() G4609@rib '#t)) (lambda (G4616@G460e G4617@G460f G4618@G4610 G4619@G4611 G461a@G4612 G461b@G4613 G461c@G4614 G461d@G4615) ((lambda (G4626@_exp* G4627@_kwd* G4628@mod** G4629@rhs* G462a@lex* G462b@mr G462c@r G462d@e*) ((lambda (G4636@e*) ((lambda (G4638@e) (values G4638@e G462c@r)) (if (null? G4636@e*) (G2da9@G2d1b@build-void) (if (null? (cdr G4636@e*)) (car G4636@e*) (G2da8@G2d19@build-sequence '#f G4636@e*))))) (G30c2@expand-interaction-rhs*/init* (reverse G462a@lex*) (reverse G4629@rhs*) (append (apply append (reverse G4628@mod**)) G462d@e*) G462c@r G462b@mr))) G461d@G4615 G461c@G4614 G461b@G4613 G461a@G4612 G4619@G4611 G4618@G4610 G4617@G460f G4616@G460e))))) (set! G3109@library-body-expander (lambda (G463a@name G463b@main-exp* G463c@imp* G463d@b* G463e@top?) ((lambda (G4645@itc) (begin (set! G4645@itc (G30fd@make-collector)) ((lambda (G464a@G4646@imp-collector G464b@G4647@top-level-context G464c@G4648@imp-collector G464d@G4649@top-level-context) ((lambda (G4652@swap) (dynamic-wind G4652@swap (lambda () (call-with-values (lambda () (G30f9@parse-import-spec* G463c@imp*)) (lambda (G4656@G4654 G4657@G4655) ((lambda (G465a@subst-labels G465b@subst-names) ((lambda (G465e@rib) ((lambda (G4661@wrap) (begin (set! G4661@wrap (lambda (G46cd@x) (G2e17@make-stx G46cd@x G2dc1@top-mark* (list G465e@rib) '()))) ((lambda (G4662@b* G4663@main-exp* G4664@rtc G4665@vtc) ((lambda (G466e@G466a@inv-collector G466f@G466b@vis-collector G4670@G466c@inv-collector G4671@G466d@vis-collector) ((lambda (G4676@swap) (dynamic-wind G4676@swap (lambda () (call-with-values (lambda () (G3105@chi-library-internal G4662@b* G465e@rib G463e@top?)) (lambda (G467e@G4678 G467f@G4679 G4680@G467a G4681@G467b G4682@G467c G4683@G467d) ((lambda (G468a@internal-exp* G468b@rhs* G468c@lex* G468d@mr G468e@r G468f@init*) (call-with-values (lambda () (G30f3@parse-exports (append G4663@main-exp* G468a@internal-exp*))) (lambda (G4698@G4696 G4699@G4697) ((lambda (G469c@exp-id* G469d@exp-name*) (begin (G2e02@seal-rib! G465e@rib) ((lambda (G46a0@init*) ((lambda (G46a2@rhs*) ((lambda () (begin (G2e04@unseal-rib! G465e@rib) ((lambda (G46a4@loc* G46a5@export-subst) ((lambda (G46a9@errstr) (begin (set! G46a9@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G316d@make-export-env/macros G468c@lex* G46a4@loc* G468e@r)) (lambda (G46ad@G46aa G46ae@G46ab G46af@G46ac) ((lambda (G46b3@macro* G46b4@global* G46b5@export-env) (begin (for-each (lambda (G46b9@s) ((lambda (G46bb@name G46bc@label) ((lambda (G46bf@p) (if G46bf@p ((lambda (G46c1@b) ((lambda (G46c3@type) (if (eq? G46c3@type 'mutable) (G3183@syntax-violation 'export G46a9@errstr G46bb@name) (void))) (car G46c1@b))) (cdr G46bf@p)) (void))) (assq G46bc@label G46b5@export-env))) (car G46b9@s) (cdr G46b9@s))) G46a5@export-subst) ((lambda (G46c5@invoke-body G46c6@invoke-definitions) (values (G4645@itc) (G4664@rtc) (G4665@vtc) (G2da8@G2d19@build-sequence '#f (append G46c6@invoke-definitions (list G46c5@invoke-body))) G46b3@macro* G46a5@export-subst G46b5@export-env)) (G2dab@G2d1f@build-letrec* '#f G468c@lex* G46a2@rhs* (G3169@build-exports G46b4@global* G46a0@init*)) (map G2da4@G2c49@build-global-define (map cdr G46b4@global*))))) G46af@G46ac G46ae@G46ab G46ad@G46aa))))) '#f)) (map G2dc7@gen-global G468c@lex*) (G316b@make-export-subst G469d@exp-name* G469c@exp-id*)))))) (G30c4@chi-rhs* G468b@rhs* G468e@r G468d@mr))) (G30b0@chi-expr* G468f@init* G468e@r G468d@mr)))) G4699@G4697 G4698@G4696)))) G4683@G467d G4682@G467c G4681@G467b G4680@G467a G467f@G4679 G467e@G4678)))) G4676@swap)) (lambda () (begin ((lambda (G46c9@t) (begin (G466e@G466a@inv-collector G4670@G466c@inv-collector) (set! G4670@G466c@inv-collector G46c9@t))) (G466e@G466a@inv-collector)) ((lambda (G46cb@t) (begin (G466f@G466b@vis-collector G4671@G466d@vis-collector) (set! G4671@G466d@vis-collector G46cb@t))) (G466f@G466b@vis-collector)))))) G30ff@inv-collector G3101@vis-collector G4664@rtc G4665@vtc)) (map G4661@wrap G463d@b*) (map G4661@wrap G463b@main-exp*) (G30fd@make-collector) (G30fd@make-collector)))) '#f)) (G30fb@make-top-rib G465b@subst-names G465a@subst-labels))) G4657@G4655 G4656@G4654)))) G4652@swap)) (lambda () (begin ((lambda (G46cf@t) (begin (G464a@G4646@imp-collector G464c@G4648@imp-collector) (set! G464c@G4648@imp-collector G46cf@t))) (G464a@G4646@imp-collector)) ((lambda (G46d1@t) (begin (G464b@G4647@top-level-context G464d@G4649@top-level-context) (set! G464d@G4649@top-level-context G46d1@t))) (G464b@G4647@top-level-context)))))) G3103@imp-collector G3191@top-level-context G4645@itc '#f))) '#f))) (set! G310b@core-library-expander (lambda (G46d3@e G46d4@verify-name) (call-with-values (lambda () (G30f7@parse-library G46d3@e)) (lambda (G46db@G46d7 G46dc@G46d8 G46dd@G46d9 G46de@G46da) ((lambda (G46e3@b* G46e4@imp* G46e5@exp* G46e6@name*) (call-with-values (lambda () (G30f5@parse-library-name G46e6@name*)) (lambda (G46ed@G46eb G46ee@G46ec) ((lambda (G46f1@ver G46f2@name) (begin (G46d4@verify-name G46f2@name) (call-with-values (lambda () (G3109@library-body-expander G46f2@name G46e5@exp* G46e4@imp* G46e3@b* '#f)) (lambda (G46fc@G46f5 G46fd@G46f6 G46fe@G46f7 G46ff@G46f8 G4700@G46f9 G4701@G46fa G4702@G46fb) ((lambda (G470a@export-env G470b@export-subst G470c@visit-code G470d@invoke-code G470e@visit-req* G470f@invoke-req* G4710@imp*) (values G46f2@name G46f1@ver G4710@imp* G470f@invoke-req* G470e@visit-req* G470d@invoke-code G470c@visit-code G470b@export-subst G470a@export-env)) G4702@G46fb G4701@G46fa G4700@G46f9 G46ff@G46f8 G46fe@G46f7 G46fd@G46f6 G46fc@G46f5))))) G46ee@G46ec G46ed@G46eb)))) G46de@G46da G46dd@G46d9 G46dc@G46d8 G46db@G46d7))))) (set! G310d@parse-top-level-program (lambda (G4718@e*) ((lambda (G471a@t) ((lambda (G471c@ls/false) (if (if G471c@ls/false (begin '#f (apply (lambda (G471e@import G471f@imp* G4720@b*) (eq? (G3189@syntax->datum G471e@import) 'import)) G471c@ls/false)) '#f) (apply (lambda (G4724@import G4725@imp* G4726@b*) (values G4725@imp* G4726@b*)) G471c@ls/false) ((lambda (G472a@t) ((lambda (G472c@ls/false) (if (if G472c@ls/false (begin '#f (apply (lambda (G472e@import G472f@x G4730@y) (eq? (G3189@syntax->datum G472e@import) 'import)) G472c@ls/false)) '#f) (apply (lambda (G4734@import G4735@x G4736@y) (G3183@syntax-violation 'expander '"invalid syntax of top-level program" (G2e47@syntax-car G4718@e*))) G472c@ls/false) ((lambda (G473a@t) ((lambda (G473c@ls/false) (if G473c@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G473c@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G473a@t))) (G3090@syntax-dispatch G473a@t '_))) G472a@t))) (G3090@syntax-dispatch G472a@t '((any . any) . any)))) G471a@t))) (G3090@syntax-dispatch G471a@t '((any . each-any) . each-any)))) G4718@e*))) (set! G310f@top-level-expander (lambda (G473e@e*) (call-with-values (lambda () (G310d@parse-top-level-program G473e@e*)) (lambda (G4742@G4740 G4743@G4741) ((lambda (G4746@b* G4747@imp*) (call-with-values (lambda () (G3109@library-body-expander '() '() G4747@imp* G4746@b* '#t)) (lambda (G4751@G474a G4752@G474b G4753@G474c G4754@G474d G4755@G474e G4756@G474f G4757@G4750) ((lambda (G475f@export-env G4760@export-subst G4761@visit-code G4762@invoke-code G4763@visit-req* G4764@invoke-req* G4765@imp*) (values G4764@invoke-req* G4762@invoke-code)) G4757@G4750 G4756@G474f G4755@G474e G4754@G474d G4753@G474c G4752@G474b G4751@G474a)))) G4743@G4741 G4742@G4740))))) (set! G3115@G3110 (make-record-type-descriptor 'env '#f 'G3113 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G3117@G3112 '#f) (set! G3119@G3111 (make-record-constructor-descriptor G3115@G3110 '#f G3117@G3112)) (set! G311e@env? (record-predicate G3115@G3110)) (set! G3120@make-env (record-constructor G3119@G3111)) (set! G3122@env-names (record-accessor G3115@G3110 '0)) (set! G3124@env-labels (record-accessor G3115@G3110 '1)) (set! G3126@env-itc (record-accessor G3115@G3110 '2)) (set! G3128@set-env-names! (record-mutator G3115@G3110 '0)) (set! G312a@set-env-labels! (record-mutator G3115@G3110 '1)) (set! G312c@set-env-itc! (record-mutator G3115@G3110 '2)) (set! G312e@rp (G299c@G28a4@make-record-printer 'env (lambda (G476d@x G476e@p G476f@wr) (display '"#<environment>" G476e@p)))) (set! G3134@G312f (make-record-type-descriptor 'interaction-env '#f 'G3132 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3136@G3131 '#f) (set! G3138@G3130 (make-record-constructor-descriptor G3134@G312f '#f G3136@G3131)) (set! G313d@interaction-env? (record-predicate G3134@G312f)) (set! G313f@make-interaction-env (record-constructor G3138@G3130)) (set! G3141@interaction-env-rib (record-accessor G3134@G312f '0)) (set! G3143@interaction-env-r (record-accessor G3134@G312f '1)) (set! G3145@interaction-env-locs (record-accessor G3134@G312f '2)) (set! G3147@set-interaction-env-rib! (record-mutator G3134@G312f '0)) (set! G3149@set-interaction-env-r! (record-mutator G3134@G312f '1)) (set! G314b@set-interaction-env-locs! (record-mutator G3134@G312f '2)) (set! G314d@rp (G299c@G28a4@make-record-printer 'interaction-env (lambda (G4773@x G4774@p G4775@wr) (display '"#<environment>" G4774@p)))) (set! G314f@interaction-environment-symbols (lambda () (G3157@environment-symbols (G318f@interaction-environment)))) (set! G3151@environment-bindings (lambda (G4779@e) (vector->list (vector-map (lambda (G477b@name G477c@label) (G3153@parse-binding (cons G477b@name (G2c41@G2ad5@imported-label->binding G477c@label)))) (G3122@env-names G4779@e) (G3124@env-labels G4779@e))))) (set! G3153@parse-binding (lambda (G477f@b) (cons (car G477f@b) ((lambda (G4781@t) (if (memv G4781@t '(core-prim global)) 'procedure (if (memv G4781@t '(core-macro macro global-macro)) 'syntax (if (memv G4781@t '($core-rtd)) 'record (if (eq? (car G477f@b) (cadr G477f@b)) 'syntax 'unknown))))) (cadr G477f@b))))) (set! G3155@environment? (lambda (G4783@x) ((lambda (G4785@t) (if G4785@t G4785@t (begin '#f (G313d@interaction-env? G4783@x)))) (G311e@env? G4783@x)))) (set! G3157@environment-symbols (lambda (G4787@x) (if (G311e@env? G4787@x) (vector->list (G3122@env-names G4787@x)) (if (G313d@interaction-env? G4787@x) (map values (G2de2@rib-sym* (G3141@interaction-env-rib G4787@x))) (assertion-violation 'environment-symbols '"not an environment" G4787@x))))) (set! G3159@environment (lambda G4789@imp* ((lambda (G478b@itc) ((lambda (G478f@G478d@imp-collector G4790@G478e@imp-collector) ((lambda (G4793@swap) (dynamic-wind G4793@swap (lambda () (call-with-values (lambda () (G30f9@parse-import-spec* G4789@imp*)) (lambda (G4797@G4795 G4798@G4796) ((lambda (G479b@subst-labels G479c@subst-names) (G3120@make-env G479c@subst-names G479b@subst-labels G478b@itc)) G4798@G4796 G4797@G4795)))) G4793@swap)) (lambda () ((lambda (G479f@t) (begin (G478f@G478d@imp-collector G4790@G478e@imp-collector) (set! G4790@G478e@imp-collector G479f@t))) (G478f@G478d@imp-collector))))) G3103@imp-collector G478b@itc)) (G30fd@make-collector)))) (set! G315b@null-environment (lambda (G47a1@n) (begin (if (not (eqv? G47a1@n '5)) (assertion-violation 'null-environment '"not 5" G47a1@n) (void)) (G3159@environment '(psyntax null-environment-5))))) (set! G315d@scheme-report-environment (lambda (G47a3@n) (begin (if (not (eqv? G47a3@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G47a3@n) (void)) (G3159@environment '(psyntax scheme-report-environment-5))))) (set! G315f@expand (lambda (G47a5@x G47a6@env) (if (G311e@env? G47a6@env) ((lambda (G47a9@rib) ((lambda (G47ab@x G47ac@itc G47ad@rtc G47ae@vtc) ((lambda (G47b3@x) (begin (G2e02@seal-rib! G47a9@rib) (values G47b3@x (G47ad@rtc)))) ((lambda (G47bd@G47b5@top-level-context G47be@G47b6@inv-collector G47bf@G47b7@vis-collector G47c0@G47b8@imp-collector G47c1@G47b9@top-level-context G47c2@G47ba@inv-collector G47c3@G47bb@vis-collector G47c4@G47bc@imp-collector) ((lambda (G47cd@swap) (dynamic-wind G47cd@swap (lambda () (G30b4@chi-expr G47ab@x '() '())) G47cd@swap)) (lambda () (begin ((lambda (G47cf@t) (begin (G47bd@G47b5@top-level-context G47c1@G47b9@top-level-context) (set! G47c1@G47b9@top-level-context G47cf@t))) (G47bd@G47b5@top-level-context)) ((lambda (G47d1@t) (begin (G47be@G47b6@inv-collector G47c2@G47ba@inv-collector) (set! G47c2@G47ba@inv-collector G47d1@t))) (G47be@G47b6@inv-collector)) ((lambda (G47d3@t) (begin (G47bf@G47b7@vis-collector G47c3@G47bb@vis-collector) (set! G47c3@G47bb@vis-collector G47d3@t))) (G47bf@G47b7@vis-collector)) ((lambda (G47d5@t) (begin (G47c0@G47b8@imp-collector G47c4@G47bc@imp-collector) (set! G47c4@G47bc@imp-collector G47d5@t))) (G47c0@G47b8@imp-collector)))))) G3191@top-level-context G30ff@inv-collector G3101@vis-collector G3103@imp-collector '#f G47ad@rtc G47ae@vtc G47ac@itc))) (G2e17@make-stx G47a5@x G2dc1@top-mark* (list G47a9@rib) '()) (G3126@env-itc G47a6@env) (G30fd@make-collector) (G30fd@make-collector))) (G30fb@make-top-rib (G3122@env-names G47a6@env) (G3124@env-labels G47a6@env))) (if (G313d@interaction-env? G47a6@env) ((lambda (G47d7@rib G47d8@r G47d9@rtc) ((lambda (G47dd@x) (call-with-values (lambda () ((lambda (G47e9@G47e1@top-level-context G47ea@G47e2@inv-collector G47eb@G47e3@vis-collector G47ec@G47e4@imp-collector G47ed@G47e5@top-level-context G47ee@G47e6@inv-collector G47ef@G47e7@vis-collector G47f0@G47e8@imp-collector) ((lambda (G47f9@swap) (dynamic-wind G47f9@swap (lambda () (G3107@chi-interaction-expr G47dd@x G47d7@rib G47d8@r)) G47f9@swap)) (lambda () (begin ((lambda (G47fb@t) (begin (G47e9@G47e1@top-level-context G47ed@G47e5@top-level-context) (set! G47ed@G47e5@top-level-context G47fb@t))) (G47e9@G47e1@top-level-context)) ((lambda (G47fd@t) (begin (G47ea@G47e2@inv-collector G47ee@G47e6@inv-collector) (set! G47ee@G47e6@inv-collector G47fd@t))) (G47ea@G47e2@inv-collector)) ((lambda (G47ff@t) (begin (G47eb@G47e3@vis-collector G47ef@G47e7@vis-collector) (set! G47ef@G47e7@vis-collector G47ff@t))) (G47eb@G47e3@vis-collector)) ((lambda (G4801@t) (begin (G47ec@G47e4@imp-collector G47f0@G47e8@imp-collector) (set! G47f0@G47e8@imp-collector G4801@t))) (G47ec@G47e4@imp-collector)))))) G3191@top-level-context G30ff@inv-collector G3101@vis-collector G3103@imp-collector G47a6@env G47d9@rtc (G30fd@make-collector) (G30fd@make-collector))) (lambda (G4803@G47df G4804@G47e0) ((lambda (G4807@r^ G4808@e) (begin (G3149@set-interaction-env-r! G47a6@env G4807@r^) (values G4808@e (G47d9@rtc)))) G4804@G47e0 G4803@G47df)))) (G2e17@make-stx G47a5@x G2dc1@top-mark* (list G47d7@rib) '()))) (G3141@interaction-env-rib G47a6@env) (G3143@interaction-env-r G47a6@env) (G30fd@make-collector)) (assertion-violation 'expand '"not an environment" G47a6@env))))) (set! G3161@eval (lambda (G480b@x G480c@env) (begin (if (not (G3155@environment? G480c@env)) (error 'eval '"not an environment" G480c@env) (void)) (call-with-values (lambda () (G315f@expand G480b@x G480c@env)) (lambda (G4811@G480f G4812@G4810) ((lambda (G4815@invoke-req* G4816@x) (begin (for-each G2c42@G2ad7@invoke-library G4815@invoke-req*) (eval-core (G2a03@G29ab@expanded->core G4816@x)))) G4812@G4810 G4811@G480f)))))) (set! G3163@library-expander (lambda G487e ((lambda (G487f) (if (= G487f '3) (apply (lambda (G4819@x G481a@filename G481b@verify-name) ((lambda (G4820@build-visit-code G4822@visit!) (begin (set! G4820@build-visit-code (lambda (G486c@macro*) (if (null? G486c@macro*) (G2da9@G2d1b@build-void) (G2da8@G2d19@build-sequence '#f (map (lambda (G486e@x) ((lambda (G4870@loc G4871@src) (list 'set! G4870@loc G4871@src)) (car G486e@x) (cddr G486e@x))) G486c@macro*))))) (set! G4822@visit! (lambda (G4864@macro*) (for-each (lambda (G4866@x) ((lambda (G4868@loc G4869@proc) (set-symbol-value! G4868@loc G4869@proc)) (car G4866@x) (cadr G4866@x))) G4864@macro*))) (call-with-values (lambda () (G310b@core-library-expander G4819@x G481b@verify-name)) (lambda (G482c@G4823 G482d@G4824 G482e@G4825 G482f@G4826 G4830@G4827 G4831@G4828 G4832@G4829 G4833@G482a G4834@G482b) ((lambda (G483e@export-env G483f@export-subst G4840@macro* G4841@invoke-code G4842@vis* G4843@inv* G4844@imp* G4845@ver G4846@name) ((lambda (G4850@id G4851@name G4852@ver G4853@imp* G4854@vis* G4855@inv* G4856@visit-proc G4857@invoke-proc G4858@visit-code G4859@invoke-code) (begin (G2c40@G2ad3@install-library G4850@id G4851@name G4852@ver G4853@imp* G4854@vis* G4855@inv* G483f@export-subst G483e@export-env G4856@visit-proc G4857@invoke-proc G4858@visit-code G4859@invoke-code '#t G481a@filename) (values G4850@id G4851@name G4852@ver G4853@imp* G4854@vis* G4855@inv* G4859@invoke-code G4858@visit-code G483f@export-subst G483e@export-env))) (gensym) G4846@name G4845@ver (map G2c46@G2adf@library-spec G4844@imp*) (map G2c46@G2adf@library-spec G4842@vis*) (map G2c46@G2adf@library-spec G4843@inv*) (lambda () (G4822@visit! G4840@macro*)) (lambda () (eval-core (G2a03@G29ab@expanded->core G4841@invoke-code))) (G4820@build-visit-code G4840@macro*) G4841@invoke-code)) G4834@G482b G4833@G482a G4832@G4829 G4831@G4828 G4830@G4827 G482f@G4826 G482e@G4825 G482d@G4824 G482c@G4823))))) '#f '#f)) G487e) (if (= G487f '2) (apply (lambda (G4874@x G4875@filename) (G3163@library-expander G4874@x G4875@filename (lambda (G4878@x) (values)))) G487e) (if (= G487f '1) (apply (lambda (G487a@x) (G3163@library-expander G487a@x '#f (lambda (G487c@x) (values)))) G487e) (error 'apply '"invalid arg count"))))) (length G487e)))) (set! G3165@boot-library-expand (lambda (G4880@x) (call-with-values (lambda () (G3163@library-expander G4880@x)) (lambda (G488c@G4882 G488d@G4883 G488e@G4884 G488f@G4885 G4890@G4886 G4891@G4887 G4892@G4888 G4893@G4889 G4894@G488a G4895@G488b) ((lambda (G48a0@export-env G48a1@export-subst G48a2@visit-code G48a3@invoke-code G48a4@inv* G48a5@vis* G48a6@imp* G48a7@ver G48a8@name G48a9@id) (values G48a8@name G48a3@invoke-code G48a1@export-subst G48a0@export-env)) G4895@G488b G4894@G488a G4893@G4889 G4892@G4888 G4891@G4887 G4890@G4886 G488f@G4885 G488e@G4884 G488d@G4883 G488c@G4882))))) (set! G3167@rev-map-append (lambda (G48b4@f G48b5@ls G48b6@ac) (if (null? G48b5@ls) G48b6@ac (G3167@rev-map-append G48b4@f (cdr G48b5@ls) (cons (G48b4@f (car G48b5@ls)) G48b6@ac))))) (set! G3169@build-exports (lambda (G48ba@lex*+loc* G48bb@init*) (G2da8@G2d19@build-sequence '#f (cons (G2da9@G2d1b@build-void) (G3167@rev-map-append (lambda (G48be@x) (list 'set! (cdr G48be@x) (car G48be@x))) G48ba@lex*+loc* G48bb@init*))))) (set! G316b@make-export-subst (lambda (G48c0@name* G48c1@id*) (map (lambda (G48c4@name G48c5@id) ((lambda (G48c8@label) (begin (if (not G48c8@label) (G3183@syntax-violation '#f '"cannot export unbound identifier" G48c5@id) (void)) (cons G48c4@name G48c8@label))) (G2e67@id->label G48c5@id))) G48c0@name* G48c1@id*))) (set! G316d@make-export-env/macros (lambda (G48ca@lex* G48cb@loc* G48cc@r) ((lambda (G48d1@lookup) (begin (set! G48d1@lookup (lambda (G48ee@x) ((letrec ((G48f0@f (lambda (G48f2@x G48f3@lex* G48f4@loc*) (if (pair? G48f3@lex*) (if (eq? G48f2@x (car G48f3@lex*)) (car G48f4@loc*) (G48f0@f G48f2@x (cdr G48f3@lex*) (cdr G48f4@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G48f0@f) G48ee@x G48ca@lex* G48cb@loc*))) ((letrec ((G48d2@f (lambda (G48d4@r G48d5@env G48d6@global* G48d7@macro*) (if (null? G48d4@r) (values G48d5@env G48d6@global* G48d7@macro*) ((lambda (G48dc@x) ((lambda (G48de@label G48df@b) ((lambda (G48e2@t) (if (memv G48e2@t '(lexical)) ((lambda (G48e4@v) ((lambda (G48e6@loc G48e7@type) (G48d2@f (cdr G48d4@r) (cons (cons* G48de@label G48e7@type G48e6@loc) G48d5@env) (cons (cons (G3020@lexical-var G48e4@v) G48e6@loc) G48d6@global*) G48d7@macro*)) (G48d1@lookup (G3020@lexical-var G48e4@v)) (if (G3022@lexical-mutable? G48e4@v) 'mutable 'global))) (G2e71@binding-value G48df@b)) (if (memv G48e2@t '(local-macro)) ((lambda (G48ea@loc) (G48d2@f (cdr G48d4@r) (cons (cons* G48de@label 'global-macro G48ea@loc) G48d5@env) G48d6@global* (cons (cons G48ea@loc (G2e71@binding-value G48df@b)) G48d7@macro*))) (gensym)) (if (memv G48e2@t '(local-macro!)) ((lambda (G48ec@loc) (G48d2@f (cdr G48d4@r) (cons (cons* G48de@label 'global-macro! G48ec@loc) G48d5@env) G48d6@global* (cons (cons G48ec@loc (G2e71@binding-value G48df@b)) G48d7@macro*))) (gensym)) (if (memv G48e2@t '($rtd $module)) (G48d2@f (cdr G48d4@r) (cons G48dc@x G48d5@env) G48d6@global* G48d7@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2e6f@binding-type G48df@b) (G2e71@binding-value G48df@b))))))) (G2e6f@binding-type G48df@b))) (car G48dc@x) (cdr G48dc@x))) (car G48d4@r)))))) G48d2@f) G48cc@r '() '() '()))) '#f))) (set! G316f@generate-temporaries (lambda (G48f8@ls) ((lambda (G48fa@t) ((lambda (G48fc@ls/false) (if G48fc@ls/false (apply (lambda (G48fe@ls) (map (lambda (G4900@x) (G2e17@make-stx ((lambda (G4902@x) (if ((lambda (G4904@t) (if G4904@t G4904@t (begin '#f (string? G4902@x)))) (symbol? G4902@x)) (gensym G4902@x) (gensym 't))) (G3189@syntax->datum G4900@x)) G2dc1@top-mark* '() '())) G48fe@ls)) G48fc@ls/false) ((lambda (G4906@t) ((lambda (G4908@ls/false) (if G4908@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4908@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G4906@t))) (G3090@syntax-dispatch G4906@t '_))) G48fa@t))) (G3090@syntax-dispatch G48fa@t 'each-any))) G48f8@ls))) (set! G3171@free-identifier=? (lambda (G490a@x G490b@y) (if (G2e4d@id? G490a@x) (if (G2e4d@id? G490b@y) (G2e55@free-id=? G490a@x G490b@y) (assertion-violation 'free-identifier=? '"not an identifier" G490b@y)) (assertion-violation 'free-identifier=? '"not an identifier" G490a@x)))) (set! G3173@bound-identifier=? (lambda (G490e@x G490f@y) (if (G2e4d@id? G490e@x) (if (G2e4d@id? G490f@y) (G2e53@bound-id=? G490e@x G490f@y) (assertion-violation 'bound-identifier=? '"not an identifier" G490f@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G490e@x)))) (set! G3175@make-source-condition (lambda (G4912@x) ((lambda (G491c@G4917 G491e@G4919 G4920@G4918 G4925@G4916 G4927@make-source-condition G4929@G4914 G492b@G4915 G492d@source-condition? G492f@source-filename G4931@source-character) (begin (set! G491c@G4917 (make-record-type-descriptor '&source-information &condition-rtd 'G491a '#f '#f '#((immutable file-name) (immutable character)))) (set! G491e@G4919 '#f) (set! G4920@G4918 (make-record-constructor-descriptor G491c@G4917 &condition-rcd G491e@G4919)) (set! G4925@G4916 (record-predicate G491c@G4917)) (set! G4927@make-source-condition (record-constructor G4920@G4918)) (set! G4929@G4914 (record-accessor G491c@G4917 '0)) (set! G492b@G4915 (record-accessor G491c@G4917 '1)) (set! G492d@source-condition? (condition-predicate G491c@G4917)) (set! G492f@source-filename (condition-accessor G491c@G4917 G4929@G4914)) (set! G4931@source-character (condition-accessor G491c@G4917 G492b@G4915)) (if (pair? G4912@x) (G4927@make-source-condition (car G4912@x) (cdr G4912@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3177@extract-position-condition (lambda (G4932@x) (G3175@make-source-condition (G3179@expression-position G4932@x)))) (set! G3179@expression-position (lambda (G4934@x) (if (G2e15@stx? G4934@x) (begin '#f ((lambda (G4936@x) (if (G2994@G2894@annotation? G4936@x) (begin '#f (G2995@G2896@annotation-source G4936@x)) '#f)) (G2e19@stx-expr G4934@x))) '#f))) (set! G317b@assertion-error (lambda (G4938@expr G4939@pos) (raise (condition (G4c58@G4b62@make-assertion-violation) (G4c66@G4b90@make-who-condition 'assert) (G4c38@G4afa@make-message-condition '"assertion failed") (G4c5e@G4b77@make-irritants-condition (list G4938@expr)) (G3175@make-source-condition G4939@pos))))) (set! G317d@syntax-error (lambda (G493c@x . G493e@args) (begin (if (not (for-all string? G493e@args)) (assertion-violation 'syntax-error '"invalid argument" G493e@args) (void)) (raise (condition (G4c38@G4afa@make-message-condition (if (null? G493e@args) '"invalid syntax" (apply string-append G493e@args))) (G4c80@G4be6@make-syntax-violation (G3189@syntax->datum G493c@x) '#f) (G3177@extract-position-condition G493c@x) (G317f@extract-trace G493c@x)))))) (set! G317f@extract-trace (lambda (G4940@x) ((lambda (G4949@G4944 G494b@G4946 G494d@G4945 G4952@G4943 G4954@make-trace G4956@G4942 G4958@trace? G495a@trace-form) (begin (set! G4949@G4944 (make-record-type-descriptor '&trace &condition-rtd 'G4947 '#f '#f '#((immutable form)))) (set! G494b@G4946 '#f) (set! G494d@G4945 (make-record-constructor-descriptor G4949@G4944 &condition-rcd G494b@G4946)) (set! G4952@G4943 (record-predicate G4949@G4944)) (set! G4954@make-trace (record-constructor G494d@G4945)) (set! G4956@G4942 (record-accessor G4949@G4944 '0)) (set! G4958@trace? (condition-predicate G4949@G4944)) (set! G495a@trace-form (condition-accessor G4949@G4944 G4956@G4942)) ((letrec ((G495b@f (lambda (G495d@x) (if (G2e15@stx? G495d@x) (apply condition (G4954@make-trace G495d@x) (map G495b@f (G2e1f@stx-ae* G495d@x))) (if (G2994@G2894@annotation? G495d@x) (G4954@make-trace (G2e17@make-stx G495d@x '() '() '())) (condition)))))) G495b@f) G4940@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3181@syntax-violation* (lambda (G495f@who G4960@msg G4961@form G4962@condition-object) (begin (if (not (string? G4960@msg)) (assertion-violation 'syntax-violation '"message is not a string" G4960@msg) (void)) ((lambda (G4967@who) (raise (condition (if G4967@who (G4c66@G4b90@make-who-condition G4967@who) (condition)) (G4c38@G4afa@make-message-condition G4960@msg) G4962@condition-object (G3177@extract-position-condition G4961@form) (G317f@extract-trace G4961@form)))) (if ((lambda (G4969@t) (if G4969@t G4969@t (begin '#f (symbol? G495f@who)))) (string? G495f@who)) G495f@who (if (not G495f@who) ((lambda (G496b@t) ((lambda (G496d@ls/false) (if (if G496d@ls/false (begin '#f (apply (lambda (G496f@id) (G2e4d@id? G496f@id)) G496d@ls/false)) '#f) (apply (lambda (G4971@id) (G3189@syntax->datum G4971@id)) G496d@ls/false) ((lambda (G4973@t) ((lambda (G4975@ls/false) (if (if G4975@ls/false (begin '#f (apply (lambda (G4977@id G4978@rest) (G2e4d@id? G4977@id)) G4975@ls/false)) '#f) (apply (lambda (G497b@id G497c@rest) (G3189@syntax->datum G497b@id)) G4975@ls/false) ((lambda (G497f@t) ((lambda (G4981@ls/false) (if G4981@ls/false (apply (lambda () '#f) G4981@ls/false) (G3183@syntax-violation '#f '"invalid syntax" G497f@t))) (G3090@syntax-dispatch G497f@t '_))) G4973@t))) (G3090@syntax-dispatch G4973@t '(any . any)))) G496b@t))) (G3090@syntax-dispatch G496b@t 'any))) G4961@form) (assertion-violation 'syntax-violation '"invalid who argument" G495f@who))))))) (set! G3183@syntax-violation (lambda G4991 ((lambda (G4992) (if (= G4992 '3) (apply (lambda (G4983@who G4984@msg G4985@form) (G3183@syntax-violation G4983@who G4984@msg G4985@form '#f)) G4991) (if (= G4992 '4) (apply (lambda (G4989@who G498a@msg G498b@form G498c@subform) (G3181@syntax-violation* G4989@who G498a@msg G498b@form (G4c80@G4be6@make-syntax-violation (G3189@syntax->datum G498b@form) (G3189@syntax->datum G498c@subform)))) G4991) (error 'apply '"invalid arg count")))) (length G4991)))) (set! G3185@identifier? (lambda (G4993@x) (G2e4d@id? G4993@x))) (set! G3187@datum->syntax (lambda (G4995@id G4996@datum) (if (G2e4d@id? G4995@id) (G2e2b@datum->stx G4995@id G4996@datum) (assertion-violation 'datum->syntax '"not an identifier" G4995@id)))) (set! G3189@syntax->datum (lambda (G4999@x) (G2e63@stx->datum G4999@x))) (set! G318b@compile-r6rs-top-level (lambda (G499b@x*) (call-with-values (lambda () (G310f@top-level-expander G499b@x*)) (lambda (G499f@G499d G49a0@G499e) ((lambda (G49a3@invoke-code G49a4@lib*) (lambda () (begin (for-each G2c42@G2ad7@invoke-library G49a4@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2a03@G29ab@expanded->core G49a3@invoke-code)) (void)) (eval-core (G2a03@G29ab@expanded->core G49a3@invoke-code))))) G49a0@G499e G499f@G499d))))) (set! G318d@pre-compile-r6rs-top-level (lambda (G49a7@x*) (call-with-values (lambda () (G310f@top-level-expander G49a7@x*)) (lambda (G49ab@G49a9 G49ac@G49aa) ((lambda (G49af@invoke-code G49b0@lib*) (begin (for-each G2c42@G2ad7@invoke-library G49b0@lib*) (G299d@G28a6@compile-core (G2a03@G29ab@expanded->core G49af@invoke-code)))) G49ac@G49aa G49ab@G49a9))))) (set! G318f@interaction-environment ((lambda (G49b3@the-env) (lambda () ((lambda (G49b5@t) (if G49b5@t G49b5@t (begin '#f ((lambda (G49b7@lib G49b8@rib) (begin ((lambda (G49bb@subst) (begin (G2dec@set-rib-sym*! G49b8@rib (map car G49bb@subst)) (G2dee@set-rib-mark**! G49b8@rib (map (lambda (G49bd@x) G2dc1@top-mark*) G49bb@subst)) (G2df0@set-rib-label*! G49b8@rib (map cdr G49bb@subst)))) (G2c17@G2a81@library-subst G49b7@lib)) ((lambda (G49bf@env) (begin (set! G49b3@the-env G49bf@env) G49bf@env)) (G313f@make-interaction-env G49b8@rib '() '())))) (G2c3b@G2ac9@find-library-by-name '(mosh interaction)) (G2df8@make-cache-rib))))) G49b3@the-env))) '#f)) (set! G3191@top-level-context (G299f@G28aa@make-parameter '#f)) (begin (set! G4ace@G3191@top-level-context G3191@top-level-context) (set! G4acd@G318f@interaction-environment G318f@interaction-environment) (set! G4acc@G318d@pre-compile-r6rs-top-level G318d@pre-compile-r6rs-top-level) (set! G4acb@G318b@compile-r6rs-top-level G318b@compile-r6rs-top-level) (set! G4aca@G3189@syntax->datum G3189@syntax->datum) (set! G4ac9@G3187@datum->syntax G3187@datum->syntax) (set! G4ac8@G3185@identifier? G3185@identifier?) (set! G4ac7@G3183@syntax-violation G3183@syntax-violation) (set! G4ac6@G3181@syntax-violation* G3181@syntax-violation*) (set! G4ac5@G317f@extract-trace G317f@extract-trace) (set! G4ac4@G317d@syntax-error G317d@syntax-error) (set! G4ac3@G317b@assertion-error G317b@assertion-error) (set! G4ac2@G3179@expression-position G3179@expression-position) (set! G4ac1@G3177@extract-position-condition G3177@extract-position-condition) (set! G4ac0@G3175@make-source-condition G3175@make-source-condition) (set! G4abf@G3173@bound-identifier=? G3173@bound-identifier=?) (set! G4abe@G3171@free-identifier=? G3171@free-identifier=?) (set! G4abd@G316f@generate-temporaries G316f@generate-temporaries) (set! G4abc@G316d@make-export-env/macros G316d@make-export-env/macros) (set! G4abb@G316b@make-export-subst G316b@make-export-subst) (set! G4aba@G3169@build-exports G3169@build-exports) (set! G4ab9@G3167@rev-map-append G3167@rev-map-append) (set! G4ab8@G3165@boot-library-expand G3165@boot-library-expand) (set! G4ab7@G3163@library-expander G3163@library-expander) (set! G4ab6@G3161@eval G3161@eval) (set! G4ab5@G315f@expand G315f@expand) (set! G4ab4@G315d@scheme-report-environment G315d@scheme-report-environment) (set! G4ab3@G315b@null-environment G315b@null-environment) (set! G4ab2@G3159@environment G3159@environment) (set! G4ab1@G3157@environment-symbols G3157@environment-symbols) (set! G4ab0@G3155@environment? G3155@environment?) (set! G4aaf@G3153@parse-binding G3153@parse-binding) (set! G4aae@G3151@environment-bindings G3151@environment-bindings) (set! G4aad@G314f@interaction-environment-symbols G314f@interaction-environment-symbols) (set! G4aac@G314d@rp G314d@rp) (set! G4aab@G314b@set-interaction-env-locs! G314b@set-interaction-env-locs!) (set! G4aaa@G3149@set-interaction-env-r! G3149@set-interaction-env-r!) (set! G4aa9@G3147@set-interaction-env-rib! G3147@set-interaction-env-rib!) (set! G4aa8@G3145@interaction-env-locs G3145@interaction-env-locs) (set! G4aa7@G3143@interaction-env-r G3143@interaction-env-r) (set! G4aa6@G3141@interaction-env-rib G3141@interaction-env-rib) (set! G4aa5@G313f@make-interaction-env G313f@make-interaction-env) (set! G4aa4@G313d@interaction-env? G313d@interaction-env?) (set! G4aa3@G3138@G3130 G3138@G3130) (set! G4aa2@G3136@G3131 G3136@G3131) (set! G4aa1@G3134@G312f G3134@G312f) (set! G4aa0@G312e@rp G312e@rp) (set! G4a9f@G312c@set-env-itc! G312c@set-env-itc!) (set! G4a9e@G312a@set-env-labels! G312a@set-env-labels!) (set! G4a9d@G3128@set-env-names! G3128@set-env-names!) (set! G4a9c@G3126@env-itc G3126@env-itc) (set! G4a9b@G3124@env-labels G3124@env-labels) (set! G4a9a@G3122@env-names G3122@env-names) (set! G4a99@G3120@make-env G3120@make-env) (set! G4a98@G311e@env? G311e@env?) (set! G4a97@G3119@G3111 G3119@G3111) (set! G4a96@G3117@G3112 G3117@G3112) (set! G4a95@G3115@G3110 G3115@G3110) (set! G4a94@G310f@top-level-expander G310f@top-level-expander) (set! G4a93@G310d@parse-top-level-program G310d@parse-top-level-program) (set! G4a92@G310b@core-library-expander G310b@core-library-expander) (set! G4a91@G3109@library-body-expander G3109@library-body-expander) (set! G4a90@G3107@chi-interaction-expr G3107@chi-interaction-expr) (set! G4a8f@G3105@chi-library-internal G3105@chi-library-internal) (set! G4a8e@G3103@imp-collector G3103@imp-collector) (set! G4a8d@G3101@vis-collector G3101@vis-collector) (set! G4a8c@G30ff@inv-collector G30ff@inv-collector) (set! G4a8b@G30fd@make-collector G30fd@make-collector) (set! G4a8a@G30fb@make-top-rib G30fb@make-top-rib) (set! G4a89@G30f9@parse-import-spec* G30f9@parse-import-spec*) (set! G4a88@G30f7@parse-library G30f7@parse-library) (set! G4a87@G30f5@parse-library-name G30f5@parse-library-name) (set! G4a86@G30f3@parse-exports G30f3@parse-exports) (set! G4a85@G30f1@expand-transformer G30f1@expand-transformer) (set! G4a84@G30ef@chi-body* G30ef@chi-body*) (set! G4a83@G30ed@chi-internal-module G30ed@chi-internal-module) (set! G4a82@G30eb@module-interface-exp-id* G30eb@module-interface-exp-id*) (set! G4a81@G30e9@set-module-interface-exp-lab-vec! G30e9@set-module-interface-exp-lab-vec!) (set! G4a80@G30e7@set-module-interface-exp-id-vec! G30e7@set-module-interface-exp-id-vec!) (set! G4a7f@G30e5@set-module-interface-first-mark! G30e5@set-module-interface-first-mark!) (set! G4a7e@G30e3@module-interface-exp-lab-vec G30e3@module-interface-exp-lab-vec) (set! G4a7d@G30e1@module-interface-exp-id-vec G30e1@module-interface-exp-id-vec) (set! G4a7c@G30df@module-interface-first-mark G30df@module-interface-first-mark) (set! G4a7b@G30dd@make-module-interface G30dd@make-module-interface) (set! G4a7a@G30db@module-interface? G30db@module-interface?) (set! G4a79@G30d6@G30ce G30d6@G30ce) (set! G4a78@G30d4@G30cf G30d4@G30cf) (set! G4a77@G30d2@G30cd G30d2@G30cd) (set! G4a76@G30cc@parse-module G30cc@parse-module) (set! G4a75@G30ca@chi-internal G30ca@chi-internal) (set! G4a74@G30c8@find-dups G30c8@find-dups) (set! G4a73@G30c6@find-bound=? G30c6@find-bound=?) (set! G4a72@G30c4@chi-rhs* G30c4@chi-rhs*) (set! G4a71@G30c2@expand-interaction-rhs*/init* G30c2@expand-interaction-rhs*/init*) (set! G4a70@G30c0@chi-rhs G30c0@chi-rhs) (set! G4a6f@G30be@chi-defun G30be@chi-defun) (set! G4a6e@G30bc@chi-lambda-clause* G30bc@chi-lambda-clause*) (set! G4a6d@G30ba@chi-lambda-clause G30ba@chi-lambda-clause) (set! G4a6c@G30b8@verify-formals G30b8@verify-formals) (set! G4a6b@G30b6@chi-set! G30b6@chi-set!) (set! G4a6a@G30b4@chi-expr G30b4@chi-expr) (set! G4a69@G30b2@chi-application G30b2@chi-application) (set! G4a68@G30b0@chi-expr* G30b0@chi-expr*) (set! G4a67@G30ae@chi-global-macro G30ae@chi-global-macro) (set! G4a66@G30ac@chi-local-macro G30ac@chi-local-macro) (set! G4a65@G30aa@chi-macro G30aa@chi-macro) (set! G4a64@G30a8@do-macro-call G30a8@do-macro-call) (set! G4a63@G30a6@local-macro-transformer G30a6@local-macro-transformer) (set! G4a62@G30a4@macro-transformer G30a4@macro-transformer) (set! G4a61@G30a2@symbol-macro G30a2@symbol-macro) (set! G4a60@G30a0@file-options-macro G30a0@file-options-macro) (set! G4a5f@G309e@core-macro-transformer G309e@core-macro-transformer) (set! G4a5e@G309c@syntax-transformer G309c@syntax-transformer) (set! G4a5d@G309a@ellipsis-map G309a@ellipsis-map) (set! G4a5c@G3098@syntax-case-transformer G3098@syntax-case-transformer) (set! G4a5b@G3096@verify-literals G3096@verify-literals) (set! G4a5a@G3094@underscore? G3094@underscore?) (set! G4a59@G3092@ellipsis? G3092@ellipsis?) (set! G4a58@G3090@syntax-dispatch G3090@syntax-dispatch) (set! G4a57@G308e@convert-pattern G308e@convert-pattern) (set! G4a56@G308c@foreign-call-transformer G308c@foreign-call-transformer) (set! G4a55@G308a@parameterize-macro G308a@parameterize-macro) (set! G4a54@G3088@incorrect-usage-macro G3088@incorrect-usage-macro) (set! G4a53@G3086@define-condition-type-macro G3086@define-condition-type-macro) (set! G4a52@G3084@define-record-type-macro G3084@define-record-type-macro) (set! G4a51@G3082@define-struct-macro G3082@define-struct-macro) (set! G4a50@G3080@quasisyntax-macro G3080@quasisyntax-macro) (set! G4a4f@G307e@quasiquote-macro G307e@quasiquote-macro) (set! G4a4e@G307c@syntax-rules-macro G307c@syntax-rules-macro) (set! G4a4d@G307a@include-into-macro G307a@include-into-macro) (set! G4a4c@G3078@include-macro G3078@include-macro) (set! G4a4b@G3076@do-include G3076@do-include) (set! G4a4a@G3074@cond-macro G3074@cond-macro) (set! G4a49@G3072@and-macro G3072@and-macro) (set! G4a48@G3070@or-macro G3070@or-macro) (set! G4a47@G306e@let*-macro G306e@let*-macro) (set! G4a46@G306c@do-macro G306c@do-macro) (set! G4a45@G306a@identifier-syntax-macro G306a@identifier-syntax-macro) (set! G4a44@G3068@endianness-macro G3068@endianness-macro) (set! G4a43@G3066@assert-macro G3066@assert-macro) (set! G4a42@G3064@delay-macro G3064@delay-macro) (set! G4a41@G3062@time-macro G3062@time-macro) (set! G4a40@G3060@define-enumeration-macro G3060@define-enumeration-macro) (set! G4a3f@G305e@guard-macro G305e@guard-macro) (set! G4a3e@G305c@trace-letrec-syntax-macro G305c@trace-letrec-syntax-macro) (set! G4a3d@G305a@trace-let-syntax-macro G305a@trace-let-syntax-macro) (set! G4a3c@G3058@trace-let/rec-syntax G3058@trace-let/rec-syntax) (set! G4a3b@G3056@trace-define-syntax-macro G3056@trace-define-syntax-macro) (set! G4a3a@G3054@trace-define-macro G3054@trace-define-macro) (set! G4a39@G3052@trace-lambda-macro G3052@trace-lambda-macro) (set! G4a38@G3050@let*-values-macro G3050@let*-values-macro) (set! G4a37@G304e@let-values-macro G304e@let-values-macro) (set! G4a36@G304c@let-macro G304c@let-macro) (set! G4a35@G304a@invalid-fmls-error G304a@invalid-fmls-error) (set! G4a34@G3048@with-syntax-macro G3048@with-syntax-macro) (set! G4a33@G3046@bless G3046@bless) (set! G4a32@G3044@lambda-transformer G3044@lambda-transformer) (set! G4a31@G3042@case-lambda-transformer G3042@case-lambda-transformer) (set! G4a30@G3040@quote-transformer G3040@quote-transformer) (set! G4a2f@G303e@case-macro G303e@case-macro) (set! G4a2e@G303c@if-transformer G303c@if-transformer) (set! G4a2d@G303a@unless-macro G303a@unless-macro) (set! G4a2c@G3038@when-macro G3038@when-macro) (set! G4a2b@G3036@record-constructor-descriptor-transformer G3036@record-constructor-descriptor-transformer) (set! G4a2a@G3034@record-type-descriptor-transformer G3034@record-type-descriptor-transformer) (set! G4a29@G3032@type-descriptor-transformer G3032@type-descriptor-transformer) (set! G4a28@G3030@fluid-let-syntax-transformer G3030@fluid-let-syntax-transformer) (set! G4a27@G302e@letrec*-transformer G302e@letrec*-transformer) (set! G4a26@G302c@letrec-transformer G302c@letrec-transformer) (set! G4a25@G302a@letrec-helper G302a@letrec-helper) (set! G4a24@G3028@add-lexicals G3028@add-lexicals) (set! G4a23@G3026@add-lexical G3026@add-lexical) (set! G4a22@G3024@set-lexical-mutable! G3024@set-lexical-mutable!) (set! G4a21@G3022@lexical-mutable? G3022@lexical-mutable?) (set! G4a20@G3020@lexical-var G3020@lexical-var) (set! G4a1f@G301e@scheme-stx G301e@scheme-stx) (set! G4a1e@G301c@scheme-stx-hashtable G301c@scheme-stx-hashtable) (set! G4a1d@G301a@parse-define-syntax G301a@parse-define-syntax) (set! G4a1c@G3018@parse-define G3018@parse-define) (set! G4a1b@G2e94@make-eval-transformer G2e94@make-eval-transformer) (set! G4a1a@G2e92@variable-transformer-procedure G2e92@variable-transformer-procedure) (set! G4a19@G2e90@variable-transformer? G2e90@variable-transformer?) (set! G4a18@G2e8e@make-variable-transformer G2e8e@make-variable-transformer) (set! G4a17@G2e8c@sanitize-binding G2e8c@sanitize-binding) (set! G4a16@G2e75@syntax-type G2e75@syntax-type) (set! G4a15@G2e73@raise-unbound-error G2e73@raise-unbound-error) (set! G4a14@G2e71@binding-value G2e71@binding-value) (set! G4a13@G2e6f@binding-type G2e6f@binding-type) (set! G4a12@G2e6d@make-binding G2e6d@make-binding) (set! G4a11@G2e6b@label->binding G2e6b@label->binding) (set! G4a10@G2e69@id->real-label G2e69@id->real-label) (set! G4a0f@G2e67@id->label G2e67@id->label) (set! G4a0e@G2e65@same-marks*? G2e65@same-marks*?) (set! G4a0d@G2e63@stx->datum G2e63@stx->datum) (set! G4a0c@G2e61@strip G2e61@strip) (set! G4a0b@G2e5f@strip-annotations G2e5f@strip-annotations) (set! G4a0a@G2e5d@self-evaluating? G2e5d@self-evaluating?) (set! G4a09@G2e5b@bound-id-member? G2e5b@bound-id-member?) (set! G4a08@G2e59@distinct-bound-ids? G2e59@distinct-bound-ids?) (set! G4a07@G2e57@valid-bound-ids? G2e57@valid-bound-ids?) (set! G4a06@G2e55@free-id=? G2e55@free-id=?) (set! G4a05@G2e53@bound-id=? G2e53@bound-id=?) (set! G4a04@G2e51@same-marks? G2e51@same-marks?) (set! G4a03@G2e4f@id->sym G2e4f@id->sym) (set! G4a02@G2e4d@id? G2e4d@id?) (set! G4a01@G2e4b@syntax->list G2e4b@syntax->list) (set! G4a00@G2e49@syntax-cdr G2e49@syntax-cdr) (set! G49ff@G2e47@syntax-car G2e47@syntax-car) (set! G49fe@G2e45@syntax-list? G2e45@syntax-list?) (set! G49fd@G2e43@syntax-null? G2e43@syntax-null?) (set! G49fc@G2e41@syntax-vector? G2e41@syntax-vector?) (set! G49fb@G2e3f@syntax-pair? G2e3f@syntax-pair?) (set! G49fa@G2e3d@syntax-vector->list G2e3d@syntax-vector->list) (set! G49f9@G2e3b@syntax-kind? G2e3b@syntax-kind?) (set! G49f8@G2e39@add-subst G2e39@add-subst) (set! G49f7@G2e37@add-mark G2e37@add-mark) (set! G49f6@G2e35@mkstx G2e35@mkstx) (set! G49f5@G2e33@join-wraps G2e33@join-wraps) (set! G49f4@G2e31@anti-mark? G2e31@anti-mark?) (set! G49f3@G2e2f@anti-mark G2e2f@anti-mark) (set! G49f2@G2e2d@gen-mark G2e2d@gen-mark) (set! G49f1@G2e2b@datum->stx G2e2b@datum->stx) (set! G49f0@G2e29@rp G2e29@rp) (set! G49ef@G2e27@set-stx-ae*! G2e27@set-stx-ae*!) (set! G49ee@G2e25@set-stx-subst*! G2e25@set-stx-subst*!) (set! G49ed@G2e23@set-stx-mark*! G2e23@set-stx-mark*!) (set! G49ec@G2e21@set-stx-expr! G2e21@set-stx-expr!) (set! G49eb@G2e1f@stx-ae* G2e1f@stx-ae*) (set! G49ea@G2e1d@stx-subst* G2e1d@stx-subst*) (set! G49e9@G2e1b@stx-mark* G2e1b@stx-mark*) (set! G49e8@G2e19@stx-expr G2e19@stx-expr) (set! G49e7@G2e17@make-stx G2e17@make-stx) (set! G49e6@G2e15@stx? G2e15@stx?) (set! G49e5@G2e10@G2e08 G2e10@G2e08) (set! G49e4@G2e0e@G2e09 G2e0e@G2e09) (set! G49e3@G2e0c@G2e07 G2e0c@G2e07) (set! G49e2@G2e06@make-full-rib G2e06@make-full-rib) (set! G49e1@G2e04@unseal-rib! G2e04@unseal-rib!) (set! G49e0@G2e02@seal-rib! G2e02@seal-rib!) (set! G49df@G2e00@make-rib-map G2e00@make-rib-map) (set! G49de@G2dfe@extend-rib/nc! G2dfe@extend-rib/nc!) (set! G49dd@G2dfc@extend-rib! G2dfc@extend-rib!) (set! G49dc@G2dfa@find-label G2dfa@find-label) (set! G49db@G2df8@make-cache-rib G2df8@make-cache-rib) (set! G49da@G2df6@make-empty-rib G2df6@make-empty-rib) (set! G49d9@G2df4@set-rib-cache! G2df4@set-rib-cache!) (set! G49d8@G2df2@set-rib-sealed/freq! G2df2@set-rib-sealed/freq!) (set! G49d7@G2df0@set-rib-label*! G2df0@set-rib-label*!) (set! G49d6@G2dee@set-rib-mark**! G2dee@set-rib-mark**!) (set! G49d5@G2dec@set-rib-sym*! G2dec@set-rib-sym*!) (set! G49d4@G2dea@rib-cache G2dea@rib-cache) (set! G49d3@G2de8@rib-sealed/freq G2de8@rib-sealed/freq) (set! G49d2@G2de6@rib-label* G2de6@rib-label*) (set! G49d1@G2de4@rib-mark** G2de4@rib-mark**) (set! G49d0@G2de2@rib-sym* G2de2@rib-sym*) (set! G49cf@G2de0@make-rib G2de0@make-rib) (set! G49ce@G2dde@rib? G2dde@rib?) (set! G49cd@G2dd9@G2dd1 G2dd9@G2dd1) (set! G49cc@G2dd7@G2dd2 G2dd7@G2dd2) (set! G49cb@G2dd5@G2dd0 G2dd5@G2dd0) (set! G49ca@G2dcf@gen-define-label G2dcf@gen-define-label) (set! G49c9@G2dcd@gen-define-label+loc G2dcd@gen-define-label+loc) (set! G49c8@G2dcb@gen-top-level-label G2dcb@gen-top-level-label) (set! G49c7@G2dc9@gen-label G2dc9@gen-label) (set! G49c6@G2dc7@gen-global G2dc7@gen-global) (set! G49c5@G2dc5@gen-lexical G2dc5@gen-lexical) (set! G49c4@G2dc3@top-marked? G2dc3@top-marked?) (set! G49c3@G2dc1@top-mark* G2dc1@top-mark*) (set! G49c2@G2dbc@set-union G2dbc@set-union) (set! G49c1@G2dba@set-cons G2dba@set-cons) (G2c38@G2ac3@current-library-expander G3163@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4ad8@G4ad3 G4ada@G4ad5 G4adc@G4ad4 G4ae1@&condition? G4ae3@make-&condition G4ae5@&condition-rtd G4ae7@&condition-rcd G4aef@G4aea G4af1@G4aec G4af3@G4aeb G4af8@G4ae9 G4afa@make-message-condition G4afc@G4ae8 G4afe@message-condition? G4b00@condition-message G4b07@G4b02 G4b09@G4b04 G4b0b@G4b03 G4b10@G4b01 G4b12@make-warning G4b14@warning? G4b1b@G4b16 G4b1d@G4b18 G4b1f@G4b17 G4b24@G4b15 G4b26@make-serious-condition G4b28@serious-condition? G4b2f@G4b2a G4b31@G4b2c G4b33@G4b2b G4b38@G4b29 G4b3a@make-error G4b3c@error? G4b43@G4b3e G4b45@G4b40 G4b47@G4b3f G4b4c@G4b3d G4b4e@make-violation G4b50@violation? G4b57@G4b52 G4b59@G4b54 G4b5b@G4b53 G4b60@G4b51 G4b62@make-assertion-violation G4b64@assertion-violation? G4b6c@G4b67 G4b6e@G4b69 G4b70@G4b68 G4b75@G4b66 G4b77@make-irritants-condition G4b79@G4b65 G4b7b@irritants-condition? G4b7d@condition-irritants G4b85@G4b80 G4b87@G4b82 G4b89@G4b81 G4b8e@G4b7f G4b90@make-who-condition G4b92@G4b7e G4b94@who-condition? G4b96@condition-who G4b9d@G4b98 G4b9f@G4b9a G4ba1@G4b99 G4ba6@G4b97 G4ba8@make-non-continuable-violation G4baa@non-continuable-violation? G4bb1@G4bac G4bb3@G4bae G4bb5@G4bad G4bba@G4bab G4bbc@make-implementation-restriction-violation G4bbe@implementation-restriction-violation? G4bc5@G4bc0 G4bc7@G4bc2 G4bc9@G4bc1 G4bce@G4bbf G4bd0@make-lexical-violation G4bd2@lexical-violation? G4bdb@G4bd6 G4bdd@G4bd8 G4bdf@G4bd7 G4be4@G4bd5 G4be6@make-syntax-violation G4be8@G4bd3 G4bea@G4bd4 G4bec@syntax-violation? G4bee@syntax-violation-form G4bf0@syntax-violation-subform G4bf7@G4bf2 G4bf9@G4bf4 G4bfb@G4bf3 G4c00@G4bf1 G4c02@make-undefined-violation G4c04@undefined-violation? G4c0b@G4c06 G4c0d@G4c08 G4c0f@G4c07 G4c14@G4c05 G4c16@make-no-infinities-violation G4c18@no-infinities-violation? G4c1f@G4c1a G4c21@G4c1c G4c23@G4c1b G4c28@G4c19 G4c2a@make-no-nans-violation G4c2c@no-nans-violation?) (begin (set! G4ad8@G4ad3 (make-record-type-descriptor '&condition '#f 'G4ad6 '#f '#f '#())) (set! G4ada@G4ad5 '#f) (set! G4adc@G4ad4 (make-record-constructor-descriptor G4ad8@G4ad3 '#f G4ada@G4ad5)) (set! G4ae1@&condition? (record-predicate G4ad8@G4ad3)) (set! G4ae3@make-&condition (record-constructor G4adc@G4ad4)) (set! G4ae5@&condition-rtd G4ad8@G4ad3) (set! G4ae7@&condition-rcd G4adc@G4ad4) (set! G4aef@G4aea (make-record-type-descriptor '&message G4ad8@G4ad3 'G4aed '#f '#f '#((immutable message)))) (set! G4af1@G4aec '#f) (set! G4af3@G4aeb (make-record-constructor-descriptor G4aef@G4aea G4adc@G4ad4 G4af1@G4aec)) (set! G4af8@G4ae9 (record-predicate G4aef@G4aea)) (set! G4afa@make-message-condition (record-constructor G4af3@G4aeb)) (set! G4afc@G4ae8 (record-accessor G4aef@G4aea '0)) (set! G4afe@message-condition? (condition-predicate G4aef@G4aea)) (set! G4b00@condition-message (condition-accessor G4aef@G4aea G4afc@G4ae8)) (set! G4b07@G4b02 (make-record-type-descriptor '&warning G4ad8@G4ad3 'G4b05 '#f '#f '#())) (set! G4b09@G4b04 '#f) (set! G4b0b@G4b03 (make-record-constructor-descriptor G4b07@G4b02 G4adc@G4ad4 G4b09@G4b04)) (set! G4b10@G4b01 (record-predicate G4b07@G4b02)) (set! G4b12@make-warning (record-constructor G4b0b@G4b03)) (set! G4b14@warning? (condition-predicate G4b07@G4b02)) (set! G4b1b@G4b16 (make-record-type-descriptor '&serious G4ad8@G4ad3 'G4b19 '#f '#f '#())) (set! G4b1d@G4b18 '#f) (set! G4b1f@G4b17 (make-record-constructor-descriptor G4b1b@G4b16 G4adc@G4ad4 G4b1d@G4b18)) (set! G4b24@G4b15 (record-predicate G4b1b@G4b16)) (set! G4b26@make-serious-condition (record-constructor G4b1f@G4b17)) (set! G4b28@serious-condition? (condition-predicate G4b1b@G4b16)) (set! G4b2f@G4b2a (make-record-type-descriptor '&error G4b1b@G4b16 'G4b2d '#f '#f '#())) (set! G4b31@G4b2c '#f) (set! G4b33@G4b2b (make-record-constructor-descriptor G4b2f@G4b2a G4b1f@G4b17 G4b31@G4b2c)) (set! G4b38@G4b29 (record-predicate G4b2f@G4b2a)) (set! G4b3a@make-error (record-constructor G4b33@G4b2b)) (set! G4b3c@error? (condition-predicate G4b2f@G4b2a)) (set! G4b43@G4b3e (make-record-type-descriptor '&violation G4b1b@G4b16 'G4b41 '#f '#f '#())) (set! G4b45@G4b40 '#f) (set! G4b47@G4b3f (make-record-constructor-descriptor G4b43@G4b3e G4b1f@G4b17 G4b45@G4b40)) (set! G4b4c@G4b3d (record-predicate G4b43@G4b3e)) (set! G4b4e@make-violation (record-constructor G4b47@G4b3f)) (set! G4b50@violation? (condition-predicate G4b43@G4b3e)) (set! G4b57@G4b52 (make-record-type-descriptor '&assertion G4b43@G4b3e 'G4b55 '#f '#f '#())) (set! G4b59@G4b54 '#f) (set! G4b5b@G4b53 (make-record-constructor-descriptor G4b57@G4b52 G4b47@G4b3f G4b59@G4b54)) (set! G4b60@G4b51 (record-predicate G4b57@G4b52)) (set! G4b62@make-assertion-violation (record-constructor G4b5b@G4b53)) (set! G4b64@assertion-violation? (condition-predicate G4b57@G4b52)) (set! G4b6c@G4b67 (make-record-type-descriptor '&irritants G4ad8@G4ad3 'G4b6a '#f '#f '#((immutable irritants)))) (set! G4b6e@G4b69 '#f) (set! G4b70@G4b68 (make-record-constructor-descriptor G4b6c@G4b67 G4adc@G4ad4 G4b6e@G4b69)) (set! G4b75@G4b66 (record-predicate G4b6c@G4b67)) (set! G4b77@make-irritants-condition (record-constructor G4b70@G4b68)) (set! G4b79@G4b65 (record-accessor G4b6c@G4b67 '0)) (set! G4b7b@irritants-condition? (condition-predicate G4b6c@G4b67)) (set! G4b7d@condition-irritants (condition-accessor G4b6c@G4b67 G4b79@G4b65)) (set! G4b85@G4b80 (make-record-type-descriptor '&who G4ad8@G4ad3 'G4b83 '#f '#f '#((immutable who)))) (set! G4b87@G4b82 '#f) (set! G4b89@G4b81 (make-record-constructor-descriptor G4b85@G4b80 G4adc@G4ad4 G4b87@G4b82)) (set! G4b8e@G4b7f (record-predicate G4b85@G4b80)) (set! G4b90@make-who-condition (record-constructor G4b89@G4b81)) (set! G4b92@G4b7e (record-accessor G4b85@G4b80 '0)) (set! G4b94@who-condition? (condition-predicate G4b85@G4b80)) (set! G4b96@condition-who (condition-accessor G4b85@G4b80 G4b92@G4b7e)) (set! G4b9d@G4b98 (make-record-type-descriptor '&non-continuable G4b43@G4b3e 'G4b9b '#f '#f '#())) (set! G4b9f@G4b9a '#f) (set! G4ba1@G4b99 (make-record-constructor-descriptor G4b9d@G4b98 G4b47@G4b3f G4b9f@G4b9a)) (set! G4ba6@G4b97 (record-predicate G4b9d@G4b98)) (set! G4ba8@make-non-continuable-violation (record-constructor G4ba1@G4b99)) (set! G4baa@non-continuable-violation? (condition-predicate G4b9d@G4b98)) (set! G4bb1@G4bac (make-record-type-descriptor '&implementation-restriction G4b43@G4b3e 'G4baf '#f '#f '#())) (set! G4bb3@G4bae '#f) (set! G4bb5@G4bad (make-record-constructor-descriptor G4bb1@G4bac G4b47@G4b3f G4bb3@G4bae)) (set! G4bba@G4bab (record-predicate G4bb1@G4bac)) (set! G4bbc@make-implementation-restriction-violation (record-constructor G4bb5@G4bad)) (set! G4bbe@implementation-restriction-violation? (condition-predicate G4bb1@G4bac)) (set! G4bc5@G4bc0 (make-record-type-descriptor '&lexical G4b43@G4b3e 'G4bc3 '#f '#f '#())) (set! G4bc7@G4bc2 '#f) (set! G4bc9@G4bc1 (make-record-constructor-descriptor G4bc5@G4bc0 G4b47@G4b3f G4bc7@G4bc2)) (set! G4bce@G4bbf (record-predicate G4bc5@G4bc0)) (set! G4bd0@make-lexical-violation (record-constructor G4bc9@G4bc1)) (set! G4bd2@lexical-violation? (condition-predicate G4bc5@G4bc0)) (set! G4bdb@G4bd6 (make-record-type-descriptor '&syntax G4b43@G4b3e 'G4bd9 '#f '#f '#((immutable form) (immutable subform)))) (set! G4bdd@G4bd8 '#f) (set! G4bdf@G4bd7 (make-record-constructor-descriptor G4bdb@G4bd6 G4b47@G4b3f G4bdd@G4bd8)) (set! G4be4@G4bd5 (record-predicate G4bdb@G4bd6)) (set! G4be6@make-syntax-violation (record-constructor G4bdf@G4bd7)) (set! G4be8@G4bd3 (record-accessor G4bdb@G4bd6 '0)) (set! G4bea@G4bd4 (record-accessor G4bdb@G4bd6 '1)) (set! G4bec@syntax-violation? (condition-predicate G4bdb@G4bd6)) (set! G4bee@syntax-violation-form (condition-accessor G4bdb@G4bd6 G4be8@G4bd3)) (set! G4bf0@syntax-violation-subform (condition-accessor G4bdb@G4bd6 G4bea@G4bd4)) (set! G4bf7@G4bf2 (make-record-type-descriptor '&undefined G4b43@G4b3e 'G4bf5 '#f '#f '#())) (set! G4bf9@G4bf4 '#f) (set! G4bfb@G4bf3 (make-record-constructor-descriptor G4bf7@G4bf2 G4b47@G4b3f G4bf9@G4bf4)) (set! G4c00@G4bf1 (record-predicate G4bf7@G4bf2)) (set! G4c02@make-undefined-violation (record-constructor G4bfb@G4bf3)) (set! G4c04@undefined-violation? (condition-predicate G4bf7@G4bf2)) (set! G4c0b@G4c06 (make-record-type-descriptor '&no-infinities G4bb1@G4bac 'G4c09 '#f '#f '#())) (set! G4c0d@G4c08 '#f) (set! G4c0f@G4c07 (make-record-constructor-descriptor G4c0b@G4c06 G4bb5@G4bad G4c0d@G4c08)) (set! G4c14@G4c05 (record-predicate G4c0b@G4c06)) (set! G4c16@make-no-infinities-violation (record-constructor G4c0f@G4c07)) (set! G4c18@no-infinities-violation? (condition-predicate G4c0b@G4c06)) (set! G4c1f@G4c1a (make-record-type-descriptor '&no-nans G4bb1@G4bac 'G4c1d '#f '#f '#())) (set! G4c21@G4c1c '#f) (set! G4c23@G4c1b (make-record-constructor-descriptor G4c1f@G4c1a G4bb5@G4bad G4c21@G4c1c)) (set! G4c28@G4c19 (record-predicate G4c1f@G4c1a)) (set! G4c2a@make-no-nans-violation (record-constructor G4c23@G4c1b)) (set! G4c2c@no-nans-violation? (condition-predicate G4c1f@G4c1a)) (begin (set! G4c97@G4c2c@no-nans-violation? G4c2c@no-nans-violation?) (set! G4c96@G4c2a@make-no-nans-violation G4c2a@make-no-nans-violation) (set! G4c95@G4c28@G4c19 G4c28@G4c19) (set! G4c94@G4c23@G4c1b G4c23@G4c1b) (set! G4c93@G4c21@G4c1c G4c21@G4c1c) (set! G4c92@G4c1f@G4c1a G4c1f@G4c1a) (set! G4c91@G4c18@no-infinities-violation? G4c18@no-infinities-violation?) (set! G4c90@G4c16@make-no-infinities-violation G4c16@make-no-infinities-violation) (set! G4c8f@G4c14@G4c05 G4c14@G4c05) (set! G4c8e@G4c0f@G4c07 G4c0f@G4c07) (set! G4c8d@G4c0d@G4c08 G4c0d@G4c08) (set! G4c8c@G4c0b@G4c06 G4c0b@G4c06) (set! G4c8b@G4c04@undefined-violation? G4c04@undefined-violation?) (set! G4c8a@G4c02@make-undefined-violation G4c02@make-undefined-violation) (set! G4c89@G4c00@G4bf1 G4c00@G4bf1) (set! G4c88@G4bfb@G4bf3 G4bfb@G4bf3) (set! G4c87@G4bf9@G4bf4 G4bf9@G4bf4) (set! G4c86@G4bf7@G4bf2 G4bf7@G4bf2) (set! G4c85@G4bf0@syntax-violation-subform G4bf0@syntax-violation-subform) (set! G4c84@G4bee@syntax-violation-form G4bee@syntax-violation-form) (set! G4c83@G4bec@syntax-violation? G4bec@syntax-violation?) (set! G4c82@G4bea@G4bd4 G4bea@G4bd4) (set! G4c81@G4be8@G4bd3 G4be8@G4bd3) (set! G4c80@G4be6@make-syntax-violation G4be6@make-syntax-violation) (set! G4c7f@G4be4@G4bd5 G4be4@G4bd5) (set! G4c7e@G4bdf@G4bd7 G4bdf@G4bd7) (set! G4c7d@G4bdd@G4bd8 G4bdd@G4bd8) (set! G4c7c@G4bdb@G4bd6 G4bdb@G4bd6) (set! G4c7b@G4bd2@lexical-violation? G4bd2@lexical-violation?) (set! G4c7a@G4bd0@make-lexical-violation G4bd0@make-lexical-violation) (set! G4c79@G4bce@G4bbf G4bce@G4bbf) (set! G4c78@G4bc9@G4bc1 G4bc9@G4bc1) (set! G4c77@G4bc7@G4bc2 G4bc7@G4bc2) (set! G4c76@G4bc5@G4bc0 G4bc5@G4bc0) (set! G4c75@G4bbe@implementation-restriction-violation? G4bbe@implementation-restriction-violation?) (set! G4c74@G4bbc@make-implementation-restriction-violation G4bbc@make-implementation-restriction-violation) (set! G4c73@G4bba@G4bab G4bba@G4bab) (set! G4c72@G4bb5@G4bad G4bb5@G4bad) (set! G4c71@G4bb3@G4bae G4bb3@G4bae) (set! G4c70@G4bb1@G4bac G4bb1@G4bac) (set! G4c6f@G4baa@non-continuable-violation? G4baa@non-continuable-violation?) (set! G4c6e@G4ba8@make-non-continuable-violation G4ba8@make-non-continuable-violation) (set! G4c6d@G4ba6@G4b97 G4ba6@G4b97) (set! G4c6c@G4ba1@G4b99 G4ba1@G4b99) (set! G4c6b@G4b9f@G4b9a G4b9f@G4b9a) (set! G4c6a@G4b9d@G4b98 G4b9d@G4b98) (set! G4c69@G4b96@condition-who G4b96@condition-who) (set! G4c68@G4b94@who-condition? G4b94@who-condition?) (set! G4c67@G4b92@G4b7e G4b92@G4b7e) (set! G4c66@G4b90@make-who-condition G4b90@make-who-condition) (set! G4c65@G4b8e@G4b7f G4b8e@G4b7f) (set! G4c64@G4b89@G4b81 G4b89@G4b81) (set! G4c63@G4b87@G4b82 G4b87@G4b82) (set! G4c62@G4b85@G4b80 G4b85@G4b80) (set! G4c61@G4b7d@condition-irritants G4b7d@condition-irritants) (set! G4c60@G4b7b@irritants-condition? G4b7b@irritants-condition?) (set! G4c5f@G4b79@G4b65 G4b79@G4b65) (set! G4c5e@G4b77@make-irritants-condition G4b77@make-irritants-condition) (set! G4c5d@G4b75@G4b66 G4b75@G4b66) (set! G4c5c@G4b70@G4b68 G4b70@G4b68) (set! G4c5b@G4b6e@G4b69 G4b6e@G4b69) (set! G4c5a@G4b6c@G4b67 G4b6c@G4b67) (set! G4c59@G4b64@assertion-violation? G4b64@assertion-violation?) (set! G4c58@G4b62@make-assertion-violation G4b62@make-assertion-violation) (set! G4c57@G4b60@G4b51 G4b60@G4b51) (set! G4c56@G4b5b@G4b53 G4b5b@G4b53) (set! G4c55@G4b59@G4b54 G4b59@G4b54) (set! G4c54@G4b57@G4b52 G4b57@G4b52) (set! G4c53@G4b50@violation? G4b50@violation?) (set! G4c52@G4b4e@make-violation G4b4e@make-violation) (set! G4c51@G4b4c@G4b3d G4b4c@G4b3d) (set! G4c50@G4b47@G4b3f G4b47@G4b3f) (set! G4c4f@G4b45@G4b40 G4b45@G4b40) (set! G4c4e@G4b43@G4b3e G4b43@G4b3e) (set! G4c4d@G4b3c@error? G4b3c@error?) (set! G4c4c@G4b3a@make-error G4b3a@make-error) (set! G4c4b@G4b38@G4b29 G4b38@G4b29) (set! G4c4a@G4b33@G4b2b G4b33@G4b2b) (set! G4c49@G4b31@G4b2c G4b31@G4b2c) (set! G4c48@G4b2f@G4b2a G4b2f@G4b2a) (set! G4c47@G4b28@serious-condition? G4b28@serious-condition?) (set! G4c46@G4b26@make-serious-condition G4b26@make-serious-condition) (set! G4c45@G4b24@G4b15 G4b24@G4b15) (set! G4c44@G4b1f@G4b17 G4b1f@G4b17) (set! G4c43@G4b1d@G4b18 G4b1d@G4b18) (set! G4c42@G4b1b@G4b16 G4b1b@G4b16) (set! G4c41@G4b14@warning? G4b14@warning?) (set! G4c40@G4b12@make-warning G4b12@make-warning) (set! G4c3f@G4b10@G4b01 G4b10@G4b01) (set! G4c3e@G4b0b@G4b03 G4b0b@G4b03) (set! G4c3d@G4b09@G4b04 G4b09@G4b04) (set! G4c3c@G4b07@G4b02 G4b07@G4b02) (set! G4c3b@G4b00@condition-message G4b00@condition-message) (set! G4c3a@G4afe@message-condition? G4afe@message-condition?) (set! G4c39@G4afc@G4ae8 G4afc@G4ae8) (set! G4c38@G4afa@make-message-condition G4afa@make-message-condition) (set! G4c37@G4af8@G4ae9 G4af8@G4ae9) (set! G4c36@G4af3@G4aeb G4af3@G4aeb) (set! G4c35@G4af1@G4aec G4af1@G4aec) (set! G4c34@G4aef@G4aea G4aef@G4aea) (set! G4c33@G4ae7@&condition-rcd G4ae7@&condition-rcd) (set! G4c32@G4ae5@&condition-rtd G4ae5@&condition-rtd) (set! G4c31@G4ae3@make-&condition G4ae3@make-&condition) (set! G4c30@G4ae1@&condition? G4ae1@&condition?) (set! G4c2f@G4adc@G4ad4 G4adc@G4ad4) (set! G4c2e@G4ada@G4ad5 G4ada@G4ad5) (set! G4c2d@G4ad8@G4ad3 G4ad8@G4ad3)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4c9f@G4c9a G4ca1@G4c9c G4ca3@G4c9b G4ca8@G4c99 G4caa@make-i/o-error G4cac@i/o-error? G4cb3@G4cae G4cb5@G4cb0 G4cb7@G4caf G4cbc@G4cad G4cbe@make-i/o-read-error G4cc0@i/o-read-error? G4cc7@G4cc2 G4cc9@G4cc4 G4ccb@G4cc3 G4cd0@G4cc1 G4cd2@make-i/o-write-error G4cd4@i/o-write-error? G4cdc@G4cd7 G4cde@G4cd9 G4ce0@G4cd8 G4ce5@G4cd6 G4ce7@make-i/o-invalid-position-error G4ce9@G4cd5 G4ceb@i/o-invalid-position-error? G4ced@i/o-error-position G4cf5@G4cf0 G4cf7@G4cf2 G4cf9@G4cf1 G4cfe@G4cef G4d00@make-i/o-filename-error G4d02@G4cee G4d04@i/o-filename-error? G4d06@i/o-error-filename G4d0d@G4d08 G4d0f@G4d0a G4d11@G4d09 G4d16@G4d07 G4d18@make-i/o-file-protection-error G4d1a@i/o-file-protection-error? G4d21@G4d1c G4d23@G4d1e G4d25@G4d1d G4d2a@G4d1b G4d2c@make-i/o-file-is-read-only-error G4d2e@i/o-file-is-read-only-error? G4d35@G4d30 G4d37@G4d32 G4d39@G4d31 G4d3e@G4d2f G4d40@make-i/o-file-already-exists-error G4d42@i/o-file-already-exists-error? G4d49@G4d44 G4d4b@G4d46 G4d4d@G4d45 G4d52@G4d43 G4d54@make-i/o-file-does-not-exist-error G4d56@i/o-file-does-not-exist-error? G4d5e@G4d59 G4d60@G4d5b G4d62@G4d5a G4d67@G4d58 G4d69@make-i/o-port-error G4d6b@G4d57 G4d6d@i/o-port-error? G4d6f@i/o-error-port G4d76@G4d71 G4d78@G4d73 G4d7a@G4d72 G4d7f@G4d70 G4d81@make-i/o-decoding-error G4d83@i/o-decoding-error? G4d8b@G4d86 G4d8d@G4d88 G4d8f@G4d87 G4d94@G4d85 G4d96@make-i/o-encoding-error G4d98@G4d84 G4d9a@i/o-encoding-error? G4d9c@i/o-encoding-error-char) (begin (set! G4c9f@G4c9a (make-record-type-descriptor '&i/o &error-rtd 'G4c9d '#f '#f '#())) (set! G4ca1@G4c9c '#f) (set! G4ca3@G4c9b (make-record-constructor-descriptor G4c9f@G4c9a &error-rcd G4ca1@G4c9c)) (set! G4ca8@G4c99 (record-predicate G4c9f@G4c9a)) (set! G4caa@make-i/o-error (record-constructor G4ca3@G4c9b)) (set! G4cac@i/o-error? (condition-predicate G4c9f@G4c9a)) (set! G4cb3@G4cae (make-record-type-descriptor '&i/o-read G4c9f@G4c9a 'G4cb1 '#f '#f '#())) (set! G4cb5@G4cb0 '#f) (set! G4cb7@G4caf (make-record-constructor-descriptor G4cb3@G4cae G4ca3@G4c9b G4cb5@G4cb0)) (set! G4cbc@G4cad (record-predicate G4cb3@G4cae)) (set! G4cbe@make-i/o-read-error (record-constructor G4cb7@G4caf)) (set! G4cc0@i/o-read-error? (condition-predicate G4cb3@G4cae)) (set! G4cc7@G4cc2 (make-record-type-descriptor '&i/o-write G4c9f@G4c9a 'G4cc5 '#f '#f '#())) (set! G4cc9@G4cc4 '#f) (set! G4ccb@G4cc3 (make-record-constructor-descriptor G4cc7@G4cc2 G4ca3@G4c9b G4cc9@G4cc4)) (set! G4cd0@G4cc1 (record-predicate G4cc7@G4cc2)) (set! G4cd2@make-i/o-write-error (record-constructor G4ccb@G4cc3)) (set! G4cd4@i/o-write-error? (condition-predicate G4cc7@G4cc2)) (set! G4cdc@G4cd7 (make-record-type-descriptor '&i/o-invalid-position G4c9f@G4c9a 'G4cda '#f '#f '#((immutable position)))) (set! G4cde@G4cd9 '#f) (set! G4ce0@G4cd8 (make-record-constructor-descriptor G4cdc@G4cd7 G4ca3@G4c9b G4cde@G4cd9)) (set! G4ce5@G4cd6 (record-predicate G4cdc@G4cd7)) (set! G4ce7@make-i/o-invalid-position-error (record-constructor G4ce0@G4cd8)) (set! G4ce9@G4cd5 (record-accessor G4cdc@G4cd7 '0)) (set! G4ceb@i/o-invalid-position-error? (condition-predicate G4cdc@G4cd7)) (set! G4ced@i/o-error-position (condition-accessor G4cdc@G4cd7 G4ce9@G4cd5)) (set! G4cf5@G4cf0 (make-record-type-descriptor '&i/o-filename G4c9f@G4c9a 'G4cf3 '#f '#f '#((immutable filename)))) (set! G4cf7@G4cf2 '#f) (set! G4cf9@G4cf1 (make-record-constructor-descriptor G4cf5@G4cf0 G4ca3@G4c9b G4cf7@G4cf2)) (set! G4cfe@G4cef (record-predicate G4cf5@G4cf0)) (set! G4d00@make-i/o-filename-error (record-constructor G4cf9@G4cf1)) (set! G4d02@G4cee (record-accessor G4cf5@G4cf0 '0)) (set! G4d04@i/o-filename-error? (condition-predicate G4cf5@G4cf0)) (set! G4d06@i/o-error-filename (condition-accessor G4cf5@G4cf0 G4d02@G4cee)) (set! G4d0d@G4d08 (make-record-type-descriptor '&i/o-file-protection G4c9f@G4c9a 'G4d0b '#f '#f '#())) (set! G4d0f@G4d0a '#f) (set! G4d11@G4d09 (make-record-constructor-descriptor G4d0d@G4d08 G4ca3@G4c9b G4d0f@G4d0a)) (set! G4d16@G4d07 (record-predicate G4d0d@G4d08)) (set! G4d18@make-i/o-file-protection-error (record-constructor G4d11@G4d09)) (set! G4d1a@i/o-file-protection-error? (condition-predicate G4d0d@G4d08)) (set! G4d21@G4d1c (make-record-type-descriptor '&i/o-file-is-read-only G4d0d@G4d08 'G4d1f '#f '#f '#())) (set! G4d23@G4d1e '#f) (set! G4d25@G4d1d (make-record-constructor-descriptor G4d21@G4d1c G4d11@G4d09 G4d23@G4d1e)) (set! G4d2a@G4d1b (record-predicate G4d21@G4d1c)) (set! G4d2c@make-i/o-file-is-read-only-error (record-constructor G4d25@G4d1d)) (set! G4d2e@i/o-file-is-read-only-error? (condition-predicate G4d21@G4d1c)) (set! G4d35@G4d30 (make-record-type-descriptor '&i/o-file-already-exists G4cf5@G4cf0 'G4d33 '#f '#f '#())) (set! G4d37@G4d32 '#f) (set! G4d39@G4d31 (make-record-constructor-descriptor G4d35@G4d30 G4cf9@G4cf1 G4d37@G4d32)) (set! G4d3e@G4d2f (record-predicate G4d35@G4d30)) (set! G4d40@make-i/o-file-already-exists-error (record-constructor G4d39@G4d31)) (set! G4d42@i/o-file-already-exists-error? (condition-predicate G4d35@G4d30)) (set! G4d49@G4d44 (make-record-type-descriptor '&i/o-file-does-not-exist G4cf5@G4cf0 'G4d47 '#f '#f '#())) (set! G4d4b@G4d46 '#f) (set! G4d4d@G4d45 (make-record-constructor-descriptor G4d49@G4d44 G4cf9@G4cf1 G4d4b@G4d46)) (set! G4d52@G4d43 (record-predicate G4d49@G4d44)) (set! G4d54@make-i/o-file-does-not-exist-error (record-constructor G4d4d@G4d45)) (set! G4d56@i/o-file-does-not-exist-error? (condition-predicate G4d49@G4d44)) (set! G4d5e@G4d59 (make-record-type-descriptor '&i/o-port G4c9f@G4c9a 'G4d5c '#f '#f '#((immutable port)))) (set! G4d60@G4d5b '#f) (set! G4d62@G4d5a (make-record-constructor-descriptor G4d5e@G4d59 G4ca3@G4c9b G4d60@G4d5b)) (set! G4d67@G4d58 (record-predicate G4d5e@G4d59)) (set! G4d69@make-i/o-port-error (record-constructor G4d62@G4d5a)) (set! G4d6b@G4d57 (record-accessor G4d5e@G4d59 '0)) (set! G4d6d@i/o-port-error? (condition-predicate G4d5e@G4d59)) (set! G4d6f@i/o-error-port (condition-accessor G4d5e@G4d59 G4d6b@G4d57)) (set! G4d76@G4d71 (make-record-type-descriptor '&i/o-decoding G4d5e@G4d59 'G4d74 '#f '#f '#())) (set! G4d78@G4d73 '#f) (set! G4d7a@G4d72 (make-record-constructor-descriptor G4d76@G4d71 G4d62@G4d5a G4d78@G4d73)) (set! G4d7f@G4d70 (record-predicate G4d76@G4d71)) (set! G4d81@make-i/o-decoding-error (record-constructor G4d7a@G4d72)) (set! G4d83@i/o-decoding-error? (condition-predicate G4d76@G4d71)) (set! G4d8b@G4d86 (make-record-type-descriptor '&i/o-encoding G4d5e@G4d59 'G4d89 '#f '#f '#((immutable char)))) (set! G4d8d@G4d88 '#f) (set! G4d8f@G4d87 (make-record-constructor-descriptor G4d8b@G4d86 G4d62@G4d5a G4d8d@G4d88)) (set! G4d94@G4d85 (record-predicate G4d8b@G4d86)) (set! G4d96@make-i/o-encoding-error (record-constructor G4d8f@G4d87)) (set! G4d98@G4d84 (record-accessor G4d8b@G4d86 '0)) (set! G4d9a@i/o-encoding-error? (condition-predicate G4d8b@G4d86)) (set! G4d9c@i/o-encoding-error-char (condition-accessor G4d8b@G4d86 G4d98@G4d84)) (begin (set! G4dec@G4d9c@i/o-encoding-error-char G4d9c@i/o-encoding-error-char) (set! G4deb@G4d9a@i/o-encoding-error? G4d9a@i/o-encoding-error?) (set! G4dea@G4d98@G4d84 G4d98@G4d84) (set! G4de9@G4d96@make-i/o-encoding-error G4d96@make-i/o-encoding-error) (set! G4de8@G4d94@G4d85 G4d94@G4d85) (set! G4de7@G4d8f@G4d87 G4d8f@G4d87) (set! G4de6@G4d8d@G4d88 G4d8d@G4d88) (set! G4de5@G4d8b@G4d86 G4d8b@G4d86) (set! G4de4@G4d83@i/o-decoding-error? G4d83@i/o-decoding-error?) (set! G4de3@G4d81@make-i/o-decoding-error G4d81@make-i/o-decoding-error) (set! G4de2@G4d7f@G4d70 G4d7f@G4d70) (set! G4de1@G4d7a@G4d72 G4d7a@G4d72) (set! G4de0@G4d78@G4d73 G4d78@G4d73) (set! G4ddf@G4d76@G4d71 G4d76@G4d71) (set! G4dde@G4d6f@i/o-error-port G4d6f@i/o-error-port) (set! G4ddd@G4d6d@i/o-port-error? G4d6d@i/o-port-error?) (set! G4ddc@G4d6b@G4d57 G4d6b@G4d57) (set! G4ddb@G4d69@make-i/o-port-error G4d69@make-i/o-port-error) (set! G4dda@G4d67@G4d58 G4d67@G4d58) (set! G4dd9@G4d62@G4d5a G4d62@G4d5a) (set! G4dd8@G4d60@G4d5b G4d60@G4d5b) (set! G4dd7@G4d5e@G4d59 G4d5e@G4d59) (set! G4dd6@G4d56@i/o-file-does-not-exist-error? G4d56@i/o-file-does-not-exist-error?) (set! G4dd5@G4d54@make-i/o-file-does-not-exist-error G4d54@make-i/o-file-does-not-exist-error) (set! G4dd4@G4d52@G4d43 G4d52@G4d43) (set! G4dd3@G4d4d@G4d45 G4d4d@G4d45) (set! G4dd2@G4d4b@G4d46 G4d4b@G4d46) (set! G4dd1@G4d49@G4d44 G4d49@G4d44) (set! G4dd0@G4d42@i/o-file-already-exists-error? G4d42@i/o-file-already-exists-error?) (set! G4dcf@G4d40@make-i/o-file-already-exists-error G4d40@make-i/o-file-already-exists-error) (set! G4dce@G4d3e@G4d2f G4d3e@G4d2f) (set! G4dcd@G4d39@G4d31 G4d39@G4d31) (set! G4dcc@G4d37@G4d32 G4d37@G4d32) (set! G4dcb@G4d35@G4d30 G4d35@G4d30) (set! G4dca@G4d2e@i/o-file-is-read-only-error? G4d2e@i/o-file-is-read-only-error?) (set! G4dc9@G4d2c@make-i/o-file-is-read-only-error G4d2c@make-i/o-file-is-read-only-error) (set! G4dc8@G4d2a@G4d1b G4d2a@G4d1b) (set! G4dc7@G4d25@G4d1d G4d25@G4d1d) (set! G4dc6@G4d23@G4d1e G4d23@G4d1e) (set! G4dc5@G4d21@G4d1c G4d21@G4d1c) (set! G4dc4@G4d1a@i/o-file-protection-error? G4d1a@i/o-file-protection-error?) (set! G4dc3@G4d18@make-i/o-file-protection-error G4d18@make-i/o-file-protection-error) (set! G4dc2@G4d16@G4d07 G4d16@G4d07) (set! G4dc1@G4d11@G4d09 G4d11@G4d09) (set! G4dc0@G4d0f@G4d0a G4d0f@G4d0a) (set! G4dbf@G4d0d@G4d08 G4d0d@G4d08) (set! G4dbe@G4d06@i/o-error-filename G4d06@i/o-error-filename) (set! G4dbd@G4d04@i/o-filename-error? G4d04@i/o-filename-error?) (set! G4dbc@G4d02@G4cee G4d02@G4cee) (set! G4dbb@G4d00@make-i/o-filename-error G4d00@make-i/o-filename-error) (set! G4dba@G4cfe@G4cef G4cfe@G4cef) (set! G4db9@G4cf9@G4cf1 G4cf9@G4cf1) (set! G4db8@G4cf7@G4cf2 G4cf7@G4cf2) (set! G4db7@G4cf5@G4cf0 G4cf5@G4cf0) (set! G4db6@G4ced@i/o-error-position G4ced@i/o-error-position) (set! G4db5@G4ceb@i/o-invalid-position-error? G4ceb@i/o-invalid-position-error?) (set! G4db4@G4ce9@G4cd5 G4ce9@G4cd5) (set! G4db3@G4ce7@make-i/o-invalid-position-error G4ce7@make-i/o-invalid-position-error) (set! G4db2@G4ce5@G4cd6 G4ce5@G4cd6) (set! G4db1@G4ce0@G4cd8 G4ce0@G4cd8) (set! G4db0@G4cde@G4cd9 G4cde@G4cd9) (set! G4daf@G4cdc@G4cd7 G4cdc@G4cd7) (set! G4dae@G4cd4@i/o-write-error? G4cd4@i/o-write-error?) (set! G4dad@G4cd2@make-i/o-write-error G4cd2@make-i/o-write-error) (set! G4dac@G4cd0@G4cc1 G4cd0@G4cc1) (set! G4dab@G4ccb@G4cc3 G4ccb@G4cc3) (set! G4daa@G4cc9@G4cc4 G4cc9@G4cc4) (set! G4da9@G4cc7@G4cc2 G4cc7@G4cc2) (set! G4da8@G4cc0@i/o-read-error? G4cc0@i/o-read-error?) (set! G4da7@G4cbe@make-i/o-read-error G4cbe@make-i/o-read-error) (set! G4da6@G4cbc@G4cad G4cbc@G4cad) (set! G4da5@G4cb7@G4caf G4cb7@G4caf) (set! G4da4@G4cb5@G4cb0 G4cb5@G4cb0) (set! G4da3@G4cb3@G4cae G4cb3@G4cae) (set! G4da2@G4cac@i/o-error? G4cac@i/o-error?) (set! G4da1@G4caa@make-i/o-error G4caa@make-i/o-error) (set! G4da0@G4ca8@G4c99 G4ca8@G4c99) (set! G4d9f@G4ca3@G4c9b G4ca3@G4c9b) (set! G4d9e@G4ca1@G4c9c G4ca1@G4c9c) (set! G4d9d@G4c9f@G4c9a G4c9f@G4c9a)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2a00@G29a5@current-primitive-locations (lambda (G51c2@x) ((lambda (G51c4@t) (if G51c4@t (cdr G51c4@t) '#f)) (assq G51c2@x '((syntax-error . G4ac4@G317d@syntax-error) (syntax-dispatch . G4a58@G3090@syntax-dispatch) (load . G4e89@G4dfb@load) (interaction-environment . G4acd@G318f@interaction-environment) (make-parameter . G299f@G28aa@make-parameter) (make-variable-transformer . G4a18@G2e8e@make-variable-transformer) (identifier? . G4ac8@G3185@identifier?) (generate-temporaries . G4abd@G316f@generate-temporaries) (free-identifier=? . G4abe@G3171@free-identifier=?) (syntax->datum . G4aca@G3189@syntax->datum) (datum->syntax . G4ac9@G3187@datum->syntax) (bound-identifier=? . G4abf@G3173@bound-identifier=?) (make-i/o-write-error . G4dad@G4cd2@make-i/o-write-error) (make-i/o-read-error . G4da7@G4cbe@make-i/o-read-error) (make-i/o-port-error . G4ddb@G4d69@make-i/o-port-error) (make-i/o-invalid-position-error . G4db3@G4ce7@make-i/o-invalid-position-error) (make-i/o-filename-error . G4dbb@G4d00@make-i/o-filename-error) (make-i/o-file-protection-error . G4dc3@G4d18@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4dc9@G4d2c@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4dd5@G4d54@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4dcf@G4d40@make-i/o-file-already-exists-error) (make-i/o-error . G4da1@G4caa@make-i/o-error) (make-i/o-encoding-error . G4de9@G4d96@make-i/o-encoding-error) (make-i/o-decoding-error . G4de3@G4d81@make-i/o-decoding-error) (i/o-write-error? . G4dae@G4cd4@i/o-write-error?) (i/o-read-error? . G4da8@G4cc0@i/o-read-error?) (i/o-port-error? . G4ddd@G4d6d@i/o-port-error?) (i/o-invalid-position-error? . G4db5@G4ceb@i/o-invalid-position-error?) (i/o-filename-error? . G4dbd@G4d04@i/o-filename-error?) (i/o-file-protection-error? . G4dc4@G4d1a@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4dca@G4d2e@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4dd6@G4d56@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4dd0@G4d42@i/o-file-already-exists-error?) (i/o-error? . G4da2@G4cac@i/o-error?) (i/o-error-port . G4dde@G4d6f@i/o-error-port) (i/o-error-filename . G4dbe@G4d06@i/o-error-filename) (i/o-encoding-error? . G4deb@G4d9a@i/o-encoding-error?) (i/o-encoding-error-char . G4dec@G4d9c@i/o-encoding-error-char) (i/o-decoding-error? . G4de4@G4d83@i/o-decoding-error?) (scheme-report-environment . G4ab4@G315d@scheme-report-environment) (null-environment . G4ab3@G315b@null-environment) (command-line . G4e86@G4df5@command-line) (eval . G4ab6@G3161@eval) (environment . G4ab2@G3159@environment) (who-condition? . G4c68@G4b94@who-condition?) (warning? . G4c41@G4b14@warning?) (violation? . G4c53@G4b50@violation?) (undefined-violation? . G4c8b@G4c04@undefined-violation?) (syntax-violation? . G4c83@G4bec@syntax-violation?) (syntax-violation-subform . G4c85@G4bf0@syntax-violation-subform) (syntax-violation-form . G4c84@G4bee@syntax-violation-form) (syntax-violation . G4ac7@G3183@syntax-violation) (serious-condition? . G4c47@G4b28@serious-condition?) (non-continuable-violation? . G4c6f@G4baa@non-continuable-violation?) (message-condition? . G4c3a@G4afe@message-condition?) (make-who-condition . G4c66@G4b90@make-who-condition) (make-warning . G4c40@G4b12@make-warning) (make-violation . G4c52@G4b4e@make-violation) (make-undefined-violation . G4c8a@G4c02@make-undefined-violation) (make-syntax-violation . G4c80@G4be6@make-syntax-violation) (make-serious-condition . G4c46@G4b26@make-serious-condition) (make-non-continuable-violation . G4c6e@G4ba8@make-non-continuable-violation) (make-message-condition . G4c38@G4afa@make-message-condition) (make-lexical-violation . G4c7a@G4bd0@make-lexical-violation) (make-irritants-condition . G4c5e@G4b77@make-irritants-condition) (make-implementation-restriction-violation . G4c74@G4bbc@make-implementation-restriction-violation) (make-error . G4c4c@G4b3a@make-error) (make-assertion-violation . G4c58@G4b62@make-assertion-violation) (lexical-violation? . G4c7b@G4bd2@lexical-violation?) (irritants-condition? . G4c60@G4b7b@irritants-condition?) (implementation-restriction-violation? . G4c75@G4bbe@implementation-restriction-violation?) (error? . G4c4d@G4b3c@error?) (condition-who . G4c69@G4b96@condition-who) (condition-message . G4c3b@G4b00@condition-message) (condition-irritants . G4c61@G4b7d@condition-irritants) (assertion-violation? . G4c59@G4b64@assertion-violation?) (no-nans-violation? . G4c97@G4c2c@no-nans-violation?) (no-infinities-violation? . G4c91@G4c18@no-infinities-violation?) (make-no-nans-violation . G4c96@G4c2a@make-no-nans-violation) (make-no-infinities-violation . G4c90@G4c16@make-no-infinities-violation)))))) (G2c40@G2ad3@install-library 'G5195 '(mosh interaction) '() '() '() '() '((string-upcase . G5110) (string-titlecase . G510f) (string-normalize-nfkd . G510e) (string-normalize-nfkc . G510d) (string-normalize-nfd . G510c) (string-normalize-nfc . G510b) (string-foldcase . G510a) (string-downcase . G5109) (string-ci>? . G5108) (string-ci>=? . G5107) (string-ci=? . G5106) (string-ci<? . G5105) (string-ci<=? . G5104) (char-whitespace? . G5103) (char-upper-case? . G5102) (char-title-case? . G5101) (char-numeric? . G5100) (char-lower-case? . G50ff) (char-general-category . G50fe) (char-upcase . G50fd) (char-titlecase . G50fc) (char-foldcase . G50fb) (char-downcase . G50fa) (char-ci>? . G50f9) (char-ci>=? . G50f8) (char-ci=? . G50f7) (char-ci<? . G50f6) (char-ci<=? . G50f5) (char-alphabetic? . G50f4) (make-variable-transformer . G2e8d) (identifier? . G3184) (generate-temporaries . G316e) (free-identifier=? . G3170) (syntax->datum . G3188) (datum->syntax . G3186) (bound-identifier=? . G3172) (record-type-descriptor? . G50f3) (record-predicate . G50f2) (record-mutator . G50f1) (record-constructor . G50f0) (record-accessor . G50ef) (make-record-type-descriptor . G50ee) (make-record-constructor-descriptor . G50ed) (record? . G50ec) (record-type-uid . G50eb) (record-type-sealed? . G50ea) (record-type-parent . G50e9) (record-type-opaque? . G50e8) (record-type-name . G50e7) (record-type-generative? . G50e6) (record-type-field-names . G50e5) (record-rtd . G50e4) (record-field-mutable? . G50e3) (delete-file . G50e2) (file-exists? . G50e1) (vector-sort! . G50e0) (vector-sort . G50df) (list-sort . G50de) (symbol-hash . G50dd) (string-ci-hash . G50dc) (string-hash . G50db) (equal-hash . G50da) (hashtable-equivalence-function . G50d9) (make-hashtable . G50d8) (hashtable-hash-function . G50d7) (make-eqv-hashtable . G50d6) (make-eq-hashtable . G50d5) (hashtable? . G50d4) (hashtable-update! . G50d3) (hashtable-size . G50d2) (hashtable-set! . G50d1) (hashtable-ref . G50d0) (hashtable-mutable? . G50cf) (hashtable-keys . G50ce) (hashtable-entries . G50cd) (hashtable-delete! . G50cc) (hashtable-copy . G50cb) (hashtable-contains? . G50ca) (hashtable-clear! . G50c9) (call-with-output-file . G50c8) (call-with-input-file . G50c7) (write-char . G50c6) (write . G50c5) (with-output-to-file . G50c4) (with-input-from-file . G50c3) (read-char . G50c2) (read . G50c1) (peek-char . G50c0) (open-output-file . G50bf) (open-input-file . G50be) (newline . G50bd) (display . G50bc) (close-output-port . G50bb) (close-input-port . G50ba) (eof-object? . G50b9) (eof-object . G50b8) (current-error-port . G50b7) (current-output-port . G50b6) (current-input-port . G50b5) (output-port? . G50b4) (input-port? . G50b3) (utf-8-codec . G50b2) (utf-16-codec . G50b1) (transcoder-error-handling-mode . G50b0) (transcoder-eol-style . G50af) (transcoder-codec . G50ae) (transcoded-port . G50ad) (textual-port? . G50ac) (string->bytevector . G50ab) (standard-output-port . G50aa) (standard-input-port . G50a9) (standard-error-port . G50a8) (set-port-position! . G50a7) (put-u8 . G50a6) (put-string . G50a5) (put-datum . G50a4) (put-char . G50a3) (put-bytevector . G50a2) (port? . G50a1) (port-transcoder . G50a0) (port-position . G509f) (port-has-set-port-position!? . G509e) (port-has-port-position? . G509d) (port-eof? . G509c) (output-port-buffer-mode . G509b) (open-string-output-port . G509a) (open-string-input-port . G5099) (open-file-output-port . G5098) (open-file-input/output-port . G5097) (open-file-input-port . G5096) (open-bytevector-output-port . G5095) (open-bytevector-input-port . G5094) (native-transcoder . G5093) (native-eol-style . G5092) (make-transcoder . G5091) (latin-1-codec . G5090) (make-i/o-write-error . G4cd1) (make-i/o-read-error . G4cbd) (make-i/o-port-error . G4d68) (make-i/o-invalid-position-error . G4ce6) (make-i/o-filename-error . G4cff) (make-i/o-file-protection-error . G4d17) (make-i/o-file-is-read-only-error . G4d2b) (make-i/o-file-does-not-exist-error . G4d53) (make-i/o-file-already-exists-error . G4d3f) (make-i/o-error . G4ca9) (make-i/o-encoding-error . G4d95) (make-i/o-decoding-error . G4d80) (make-custom-textual-output-port . G508f) (make-custom-textual-input/output-port . G508e) (make-custom-textual-input-port . G508d) (make-custom-binary-output-port . G508c) (make-custom-binary-input/output-port . G508b) (make-custom-binary-input-port . G508a) (make-bytevector . G5089) (lookahead-u8 . G5088) (lookahead-char . G5087) (i/o-write-error? . G4cd3) (i/o-read-error? . G4cbf) (i/o-port-error? . G4d6c) (i/o-invalid-position-error? . G4cea) (i/o-filename-error? . G4d03) (i/o-file-protection-error? . G4d19) (i/o-file-is-read-only-error? . G4d2d) (i/o-file-does-not-exist-error? . G4d55) (i/o-file-already-exists-error? . G4d41) (i/o-error? . G4cab) (i/o-error-port . G4d6e) (i/o-error-filename . G4d05) (i/o-encoding-error? . G4d99) (i/o-encoding-error-char . G4d9b) (i/o-decoding-error? . G4d82) (get-u8 . G5086) (get-string-n! . G5085) (get-string-n . G5084) (get-string-all . G5083) (get-line . G5082) (get-datum . G5081) (get-char . G5080) (get-bytevector-some . G507f) (get-bytevector-n! . G507e) (get-bytevector-n . G507d) (get-bytevector-all . G507c) (flush-output-port . G507b) (close-port . G507a) (exit . G5073) (command-line . G4df4) (string-fill! . G5072) (string-set! . G5071) (set-cdr! . G5070) (set-car! . G506f) (remove . G506e) (remv . G506d) (remp . G506c) (remq . G506b) (partition . G506a) (memv . G5069) (memq . G5068) (memp . G5067) (member . G5066) (exists . G5065) (for-all . G5064) (fold-right . G5063) (fold-left . G5062) (find . G5061) (filter . G5060) (cons* . G505f) (assv . G505e) (assq . G505d) (assp . G505c) (assoc . G505b) (call-with-string-output-port . G505a) (call-with-port . G5059) (call-with-bytevector-output-port . G5058) (bytevector->string . G5057) (buffer-mode? . G5056) (binary-port? . G5055) (with-exception-handler . G5054) (raise-continuable . G5053) (raise . G5052) (eval . G3160) (environment . G3158) (make-enumeration . G5051) (enum-set=? . G5050) (enum-set-universe . G504f) (enum-set-union . G504e) (enum-set-subset? . G504d) (enum-set-projection . G504c) (enum-set-member? . G504b) (enum-set-intersection . G504a) (enum-set-indexer . G5049) (enum-set-difference . G5048) (enum-set-constructor . G5047) (enum-set-complement . G5046) (enum-set->list . G5045) (who-condition? . G4b93) (warning? . G4b13) (violation? . G4b4f) (undefined-violation? . G4c03) (syntax-violation? . G4beb) (syntax-violation-subform . G4bef) (syntax-violation-form . G4bed) (syntax-violation . G3182) (simple-conditions . G5044) (serious-condition? . G4b27) (non-continuable-violation? . G4ba9) (message-condition? . G4afd) (make-who-condition . G4b8f) (make-warning . G4b11) (make-violation . G4b4d) (make-undefined-violation . G4c01) (make-syntax-violation . G4be5) (make-serious-condition . G4b25) (make-non-continuable-violation . G4ba7) (make-message-condition . G4af9) (make-lexical-violation . G4bcf) (make-irritants-condition . G4b76) (make-implementation-restriction-violation . G4bbb) (make-error . G4b39) (make-assertion-violation . G4b61) (lexical-violation? . G4bd1) (irritants-condition? . G4b7a) (implementation-restriction-violation? . G4bbd) (error? . G4b3b) (condition-who . G4b95) (condition-predicate . G5043) (condition-message . G4aff) (condition-irritants . G4b7c) (condition-accessor . G5042) (condition . G5041) (assertion-violation? . G4b63) (condition? . G5040) (utf32->string . G503f) (utf16->string . G503e) (utf8->string . G503d) (uint-list->bytevector . G503c) (u8-list->bytevector . G503b) (string->utf8 . G503a) (string->utf32 . G5039) (string->utf16 . G5038) (sint-list->bytevector . G5037) (native-endianness . G5036) (bytevector? . G5035) (bytevector=? . G5034) (bytevector-uint-set! . G5033) (bytevector-uint-ref . G5032) (bytevector-u8-set! . G5031) (bytevector-u8-ref . G5030) (bytevector-u64-set! . G502f) (bytevector-u64-ref . G502e) (bytevector-u64-native-set! . G502d) (bytevector-u64-native-ref . G502c) (bytevector-u32-set! . G502b) (bytevector-u32-ref . G502a) (bytevector-u32-native-set! . G5029) (bytevector-u32-native-ref . G5028) (bytevector-u16-set! . G5027) (bytevector-u16-ref . G5026) (bytevector-u16-native-set! . G5025) (bytevector-u16-native-ref . G5024) (bytevector-sint-set! . G5023) (bytevector-sint-ref . G5022) (bytevector-s8-set! . G5021) (bytevector-s8-ref . G5020) (bytevector-s64-set! . G501f) (bytevector-s64-ref . G501e) (bytevector-s64-native-set! . G501d) (bytevector-s64-native-ref . G501c) (bytevector-s32-set! . G501b) (bytevector-s32-ref . G501a) (bytevector-s32-native-set! . G5019) (bytevector-s32-native-ref . G5018) (bytevector-s16-set! . G5017) (bytevector-s16-ref . G5016) (bytevector-s16-native-set! . G5015) (bytevector-s16-native-ref . G5014) (bytevector-length . G5013) (bytevector-ieee-single-ref . G5012) (bytevector-ieee-single-set! . G5011) (bytevector-ieee-single-native-set! . G5010) (bytevector-ieee-single-native-ref . G500f) (bytevector-ieee-double-set! . G500e) (bytevector-ieee-double-ref . G500d) (bytevector-ieee-double-native-set! . G500c) (bytevector-ieee-double-native-ref . G500b) (bytevector-fill! . G500a) (bytevector-copy! . G5009) (bytevector-copy . G5008) (bytevector->uint-list . G5007) (bytevector->u8-list . G5006) (bytevector->sint-list . G5005) (no-nans-violation? . G4c2b) (no-infinities-violation? . G4c17) (make-no-nans-violation . G4c29) (make-no-infinities-violation . G4c15) (real->flonum . G5004) (flzero? . G5003) (fltruncate . G5002) (fltan . G5001) (flsqrt . G5000) (flsin . G4fff) (flround . G4ffe) (flpositive? . G4ffd) (flonum? . G4ffc) (flodd? . G4ffb) (flnumerator . G4ffa) (flnegative? . G4ff9) (flnan? . G4ff8) (flmod0 . G4ff7) (flmod . G4ff6) (flmin . G4ff5) (flmax . G4ff4) (fllog . G4ff3) (flinteger? . G4ff2) (flinfinite? . G4ff1) (flfloor . G4ff0) (flfinite? . G4fef) (flexpt . G4fee) (flexp . G4fed) (fleven? . G4fec) (fldiv0-and-mod0 . G4feb) (fldiv0 . G4fea) (fldiv-and-mod . G4fe9) (fldiv . G4fe8) (fldenominator . G4fe7) (flcos . G4fe6) (flceiling . G4fe5) (flatan . G4fe4) (flasin . G4fe3) (flacos . G4fe2) (flabs . G4fe1) (fl>? . G4fe0) (fl>=? . G4fdf) (fl=? . G4fde) (fl<? . G4fdd) (fl<=? . G4fdc) (fl/ . G4fdb) (fl- . G4fda) (fl+ . G4fd9) (fl* . G4fd8) (fixnum->flonum . G4fd7) (fxzero? . G4fd6) (fxxor . G4fd5) (fxrotate-bit-field . G4fd4) (fxreverse-bit-field . G4fd3) (fxpositive? . G4fd2) (fxodd? . G4fd1) (fxnot . G4fd0) (fxnegative? . G4fcf) (fxmod0 . G4fce) (fxmod . G4fcd) (fxmin . G4fcc) (fxmax . G4fcb) (fxlength . G4fca) (fxior . G4fc9) (fxif . G4fc8) (fxfirst-bit-set . G4fc7) (fxeven? . G4fc6) (fxdiv0-and-mod0 . G4fc5) (fxdiv0 . G4fc4) (fxdiv-and-mod . G4fc3) (fxdiv . G4fc2) (fxcopy-bit-field . G4fc1) (fxcopy-bit . G4fc0) (fxbit-set? . G4fbf) (fxbit-field . G4fbe) (fxbit-count . G4fbd) (fxarithmetic-shift-right . G4fbc) (fxarithmetic-shift-left . G4fbb) (fxarithmetic-shift . G4fba) (fxand . G4fb9) (fx>? . G4fb8) (fx>=? . G4fb7) (fx=? . G4fb6) (fx<? . G4fb5) (fx<=? . G4fb4) (fx-/carry . G4fb3) (fx- . G4fb2) (fx+/carry . G4fb1) (fx+ . G4fb0) (fx*/carry . G4faf) (fx* . G4fae) (greatest-fixnum . G4fad) (least-fixnum . G4fac) (fixnum-width . G4fab) (fixnum? . G4faa) (bitwise-rotate-bit-field . G4fa9) (bitwise-reverse-bit-field . G4fa8) (bitwise-length . G4fa7) (bitwise-if . G4fa6) (bitwise-first-bit-set . G4fa5) (bitwise-copy-bit-field . G4fa4) (bitwise-copy-bit . G4fa3) (bitwise-bit-set? . G4fa2) (bitwise-bit-field . G4fa1) (bitwise-bit-count . G4fa0) (bitwise-xor . G4f9f) (bitwise-ior . G4f9e) (bitwise-and . G4f9d) (bitwise-not . G4f9c) (bitwise-arithmetic-shift-right . G4f9b) (bitwise-arithmetic-shift-left . G4f9a) (bitwise-arithmetic-shift . G4f99) (zero? . G4f98) (vector? . G4f97) (vector-set! . G4f96) (vector-ref . G4f95) (vector-map . G4f94) (vector-length . G4f93) (vector-for-each . G4f92) (vector-fill! . G4f91) (vector->list . G4f90) (vector . G4f8f) (values . G4f8e) (truncate . G4f8d) (tan . G4f8c) (symbol? . G4f8b) (symbol=? . G4f8a) (symbol->string . G4f89) (substring . G4f88) (string? . G4f87) (string>? . G4f86) (string>=? . G4f85) (string=? . G4f84) (string<? . G4f83) (string<=? . G4f82) (string-ref . G4f81) (string-length . G4f80) (string-for-each . G4f7f) (string-copy . G4f7e) (string-append . G4f7d) (string->symbol . G4f7c) (string->number . G4f7b) (string->list . G4f7a) (string . G4f79) (sqrt . G4f78) (sin . G4f77) (round . G4f76) (reverse . G4f75) (real? . G4f74) (real-valued? . G4f73) (real-part . G4f72) (rationalize . G4f71) (rational? . G4f70) (rational-valued? . G4f6f) (procedure? . G4f6e) (positive? . G4f6d) (pair? . G4f6c) (odd? . G4f6b) (numerator . G4f6a) (number? . G4f69) (number->string . G4f68) (null? . G4f67) (not . G4f66) (negative? . G4f65) (nan? . G4f64) (min . G4f63) (max . G4f62) (map . G4f61) (make-vector . G4f60) (make-string . G4f5f) (make-rectangular . G4f5e) (make-polar . G4f5d) (magnitude . G4f5c) (log . G4f5b) (list? . G4f5a) (list-tail . G4f59) (list-ref . G4f58) (list->vector . G4f57) (list->string . G4f56) (list . G4f55) (length . G4f54) (lcm . G4f53) (integer? . G4f52) (integer-valued? . G4f51) (integer->char . G4f50) (infinite? . G4f4f) (inexact? . G4f4e) (inexact . G4f4d) (imag-part . G4f4c) (gcd . G4f4b) (for-each . G4f4a) (floor . G4f49) (finite? . G4f48) (expt . G4f47) (exp . G4f46) (exact? . G4f45) (exact-integer-sqrt . G4f44) (exact . G4f43) (even? . G4f42) (error . G4f41) (eqv? . G4f40) (equal? . G4f3f) (eq? . G4f3e) (dynamic-wind . G4f3d) (div0-and-mod0 . G4f3c) (mod0 . G4f3b) (div0 . G4f3a) (div-and-mod . G4f39) (mod . G4f38) (div . G4f37) (denominator . G4f36) (cos . G4f35) (cons . G4f34) (complex? . G4f33) (char? . G4f32) (char>? . G4f31) (char>=? . G4f30) (char=? . G4f2f) (char<? . G4f2e) (char<=? . G4f2d) (char->integer . G4f2c) (ceiling . G4f2b) (call-with-values . G4f2a) (call/cc . G4f29) (call-with-current-continuation . G4f28) (cddddr . G4f27) (cdddar . G4f26) (cddadr . G4f25) (cddaar . G4f24) (cdaddr . G4f23) (cdadar . G4f22) (cdaadr . G4f21) (cdaaar . G4f20) (cadddr . G4f1f) (caddar . G4f1e) (cadadr . G4f1d) (cadaar . G4f1c) (caaddr . G4f1b) (caadar . G4f1a) (caaadr . G4f19) (caaaar . G4f18) (cdddr . G4f17) (cddar . G4f16) (cdadr . G4f15) (cdaar . G4f14) (caddr . G4f13) (cadar . G4f12) (caadr . G4f11) (caaar . G4f10) (cddr . G4f0f) (cdar . G4f0e) (cadr . G4f0d) (caar . G4f0c) (cdr . G4f0b) (car . G4f0a) (boolean? . G4f09) (boolean=? . G4f08) (atan . G4f07) (assertion-violation . G4f06) (asin . G4f05) (apply . G4f04) (append . G4f03) (angle . G4f02) (acos . G4f01) (abs . G4f00) (/ . G4eff) (* . G4efe) (- . G4efd) (+ . G4efc) (>= . G4efb) (> . G4efa) (= . G4ef9) (<= . G4ef8) (< . G4ef7) (library . G4ef6) (export . G4ef5) (&no-nans . G4ef4) (&no-infinities . G4ef3) (&i/o-encoding . G4ef2) (&i/o-decoding . G4ef1) (&i/o-port . G4ef0) (&i/o-file-does-not-exist . G4eef) (&i/o-file-already-exists . G4eee) (&i/o-file-is-read-only . G4eed) (&i/o-file-protection . G4eec) (&i/o-filename . G4eeb) (&i/o-invalid-position . G4eea) (&i/o-write . G4ee9) (&i/o-read . G4ee8) (&i/o . G4ee7) (&undefined . G4ee6) (&syntax . G4ee5) (&lexical . G4ee4) (&implementation-restriction . G4ee3) (&non-continuable . G4ee2) (&who . G4ee1) (&irritants . G4ee0) (&assertion . G4edf) (&violation . G4ede) (&error . G4edd) (&serious . G4edc) (&warning . G4edb) (&message . G4eda) (&condition . G4ed9) (define-condition-type . G4ed8) (define-enumeration . G4ed7) (define-record-type . G4ed6) (parent-rtd . G4ed5) (nongenerative . G4ed4) (opaque . G4ed3) (sealed . G4ed2) (protocol . G4ed1) (parent . G4ed0) (immutable . G4ecf) (mutable . G4ece) (fields . G4ecd) (error-handling-mode . G4ecc) (file-options . G4ecb) (buffer-mode . G4eca) (eol-style . G4ec9) (guard . G4ec8) (unsyntax-splicing . G4ec5) (unsyntax . G4ec4) (unquote-splicing . G4ec3) (unquote . G4ec2) (_ . G4ec1) (else . G4ec0) (=> . G4ebf) (... . G4ebe) (assert . G4ebd) (endianness . G4ebc) (or . G4eb9) (and . G4eb8) (do . G4eb7) (cond . G4eb6) (let* . G4eb5) (let . G4eb4) (let*-values . G4eb3) (let-values . G4eb2) (identifier-syntax . G4eb1) (with-syntax . G4eb0) (quasisyntax . G4eaf) (quasiquote . G4eae) (syntax-rules . G4ead) (include . G4eac) (record-constructor-descriptor . G4eaa) (record-type-descriptor . G4ea9) (case . G4ea8) (unless . G4ea6) (when . G4ea5) (if . G4ea4) (letrec* . G4ea3) (letrec . G4ea2) (case-lambda . G4ea0) (lambda . G4e9f) (syntax . G4e9e) (syntax-case . G4e9d) (quote . G4e9c) (letrec-syntax . G4e9a) (let-syntax . G4e99) (set! . G4e98) (import . G4e97) (begin . G4e96) (define-syntax . G4e94) (define . G4e93)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G5196 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4ec3) (unquote . G4ec2) (delay . G4ebb) (or . G4eb9) (and . G4eb8) (do . G4eb7) (cond . G4eb6) (let* . G4eb5) (let . G4eb4) (quasiquote . G4eae) (syntax-rules . G4ead) (case . G4ea8) (if . G4ea4) (letrec . G4ea2) (lambda . G4e9f) (quote . G4e9c) (letrec-syntax . G4e9a) (let-syntax . G4e99) (set! . G4e98) (begin . G4e96) (define-syntax . G4e94) (define . G4e93)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G5197 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5108) (string-ci>=? . G5107) (string-ci=? . G5106) (string-ci<? . G5105) (string-ci<=? . G5104) (char-whitespace? . G5103) (char-upper-case? . G5102) (char-numeric? . G5100) (char-lower-case? . G50ff) (char-upcase . G50fd) (char-downcase . G50fa) (char-ci>? . G50f9) (char-ci>=? . G50f8) (char-ci=? . G50f7) (char-ci<? . G50f6) (char-ci<=? . G50f5) (char-alphabetic? . G50f4) (call-with-output-file . G50c8) (call-with-input-file . G50c7) (write-char . G50c6) (write . G50c5) (with-output-to-file . G50c4) (with-input-from-file . G50c3) (read-char . G50c2) (read . G50c1) (peek-char . G50c0) (open-output-file . G50bf) (open-input-file . G50be) (newline . G50bd) (display . G50bc) (close-output-port . G50bb) (close-input-port . G50ba) (eof-object . G50b8) (current-output-port . G50b6) (current-input-port . G50b5) (output-port? . G50b4) (input-port? . G50b3) (scheme-report-environment . G315c) (quotient . G5079) (null-environment . G315a) (remainder . G5078) (modulo . G5077) (inexact->exact . G5076) (force . G5075) (exact->inexact . G5074) (string-fill! . G5072) (string-set! . G5071) (set-cdr! . G5070) (set-car! . G506f) (memv . G5069) (memq . G5068) (member . G5066) (assv . G505e) (assq . G505d) (assoc . G505b) (eval . G3160) (zero? . G4f98) (vector? . G4f97) (vector-set! . G4f96) (vector-ref . G4f95) (vector-length . G4f93) (vector-fill! . G4f91) (vector->list . G4f90) (vector . G4f8f) (values . G4f8e) (truncate . G4f8d) (tan . G4f8c) (symbol? . G4f8b) (symbol->string . G4f89) (substring . G4f88) (string? . G4f87) (string>? . G4f86) (string>=? . G4f85) (string=? . G4f84) (string<? . G4f83) (string<=? . G4f82) (string-ref . G4f81) (string-length . G4f80) (string-copy . G4f7e) (string-append . G4f7d) (string->symbol . G4f7c) (string->number . G4f7b) (string->list . G4f7a) (string . G4f79) (sqrt . G4f78) (sin . G4f77) (round . G4f76) (reverse . G4f75) (real? . G4f74) (real-part . G4f72) (rationalize . G4f71) (rational? . G4f70) (procedure? . G4f6e) (positive? . G4f6d) (pair? . G4f6c) (odd? . G4f6b) (numerator . G4f6a) (number? . G4f69) (number->string . G4f68) (not . G4f66) (negative? . G4f65) (min . G4f63) (max . G4f62) (map . G4f61) (make-vector . G4f60) (make-string . G4f5f) (make-rectangular . G4f5e) (make-polar . G4f5d) (magnitude . G4f5c) (log . G4f5b) (list? . G4f5a) (list-tail . G4f59) (list-ref . G4f58) (list->vector . G4f57) (list->string . G4f56) (list . G4f55) (length . G4f54) (lcm . G4f53) (integer? . G4f52) (integer->char . G4f50) (inexact? . G4f4e) (imag-part . G4f4c) (gcd . G4f4b) (for-each . G4f4a) (floor . G4f49) (expt . G4f47) (exp . G4f46) (exact? . G4f45) (even? . G4f42) (eqv? . G4f40) (equal? . G4f3f) (eq? . G4f3e) (dynamic-wind . G4f3d) (denominator . G4f36) (cos . G4f35) (cons . G4f34) (complex? . G4f33) (char? . G4f32) (char>? . G4f31) (char>=? . G4f30) (char=? . G4f2f) (char<? . G4f2e) (char<=? . G4f2d) (char->integer . G4f2c) (ceiling . G4f2b) (call-with-values . G4f2a) (call-with-current-continuation . G4f28) (cddddr . G4f27) (cdddar . G4f26) (cddadr . G4f25) (cddaar . G4f24) (cdaddr . G4f23) (cdadar . G4f22) (cdaadr . G4f21) (cdaaar . G4f20) (cadddr . G4f1f) (caddar . G4f1e) (cadadr . G4f1d) (cadaar . G4f1c) (caaddr . G4f1b) (caadar . G4f1a) (caaadr . G4f19) (caaaar . G4f18) (cdddr . G4f17) (cddar . G4f16) (cdadr . G4f15) (cdaar . G4f14) (caddr . G4f13) (cadar . G4f12) (caadr . G4f11) (caaar . G4f10) (cddr . G4f0f) (cdar . G4f0e) (cadr . G4f0d) (caar . G4f0c) (cdr . G4f0b) (car . G4f0a) (boolean? . G4f09) (atan . G4f07) (asin . G4f05) (apply . G4f04) (append . G4f03) (angle . G4f02) (acos . G4f01) (abs . G4f00) (/ . G4eff) (* . G4efe) (- . G4efd) (+ . G4efc) (>= . G4efb) (> . G4efa) (= . G4ef9) (<= . G4ef8) (< . G4ef7) (unquote-splicing . G4ec3) (unquote . G4ec2) (delay . G4ebb) (or . G4eb9) (and . G4eb8) (do . G4eb7) (cond . G4eb6) (let* . G4eb5) (let . G4eb4) (quasiquote . G4eae) (syntax-rules . G4ead) (case . G4ea8) (if . G4ea4) (letrec . G4ea2) (lambda . G4e9f) (quote . G4e9c) (letrec-syntax . G4e9a) (let-syntax . G4e99) (set! . G4e98) (begin . G4e96) (define-syntax . G4e94) (define . G4e93)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G5198 '(psyntax modules) '() '() '() '() '((module . G4e95)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G5199 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G519a '(rnrs) '(6) '() '() '() '((regexp? . G5155) (string-upcase . G5110) (string-titlecase . G510f) (string-normalize-nfkd . G510e) (string-normalize-nfkc . G510d) (string-normalize-nfd . G510c) (string-normalize-nfc . G510b) (string-foldcase . G510a) (string-downcase . G5109) (string-ci>? . G5108) (string-ci>=? . G5107) (string-ci=? . G5106) (string-ci<? . G5105) (string-ci<=? . G5104) (char-whitespace? . G5103) (char-upper-case? . G5102) (char-title-case? . G5101) (char-numeric? . G5100) (char-lower-case? . G50ff) (char-general-category . G50fe) (char-upcase . G50fd) (char-titlecase . G50fc) (char-foldcase . G50fb) (char-downcase . G50fa) (char-ci>? . G50f9) (char-ci>=? . G50f8) (char-ci=? . G50f7) (char-ci<? . G50f6) (char-ci<=? . G50f5) (char-alphabetic? . G50f4) (make-variable-transformer . G2e8d) (identifier? . G3184) (generate-temporaries . G316e) (free-identifier=? . G3170) (syntax->datum . G3188) (datum->syntax . G3186) (bound-identifier=? . G3172) (record-type-descriptor? . G50f3) (record-predicate . G50f2) (record-mutator . G50f1) (record-constructor . G50f0) (record-accessor . G50ef) (make-record-type-descriptor . G50ee) (make-record-constructor-descriptor . G50ed) (record? . G50ec) (record-type-uid . G50eb) (record-type-sealed? . G50ea) (record-type-parent . G50e9) (record-type-opaque? . G50e8) (record-type-name . G50e7) (record-type-generative? . G50e6) (record-type-field-names . G50e5) (record-rtd . G50e4) (record-field-mutable? . G50e3) (delete-file . G50e2) (file-exists? . G50e1) (vector-sort! . G50e0) (vector-sort . G50df) (list-sort . G50de) (symbol-hash . G50dd) (string-ci-hash . G50dc) (string-hash . G50db) (equal-hash . G50da) (hashtable-equivalence-function . G50d9) (make-hashtable . G50d8) (hashtable-hash-function . G50d7) (make-eqv-hashtable . G50d6) (make-eq-hashtable . G50d5) (hashtable? . G50d4) (hashtable-update! . G50d3) (hashtable-size . G50d2) (hashtable-set! . G50d1) (hashtable-ref . G50d0) (hashtable-mutable? . G50cf) (hashtable-keys . G50ce) (hashtable-entries . G50cd) (hashtable-delete! . G50cc) (hashtable-copy . G50cb) (hashtable-contains? . G50ca) (hashtable-clear! . G50c9) (call-with-output-file . G50c8) (call-with-input-file . G50c7) (write-char . G50c6) (write . G50c5) (with-output-to-file . G50c4) (with-input-from-file . G50c3) (read-char . G50c2) (read . G50c1) (peek-char . G50c0) (open-output-file . G50bf) (open-input-file . G50be) (newline . G50bd) (display . G50bc) (close-output-port . G50bb) (close-input-port . G50ba) (eof-object? . G50b9) (eof-object . G50b8) (current-error-port . G50b7) (current-output-port . G50b6) (current-input-port . G50b5) (output-port? . G50b4) (input-port? . G50b3) (utf-8-codec . G50b2) (utf-16-codec . G50b1) (transcoder-error-handling-mode . G50b0) (transcoder-eol-style . G50af) (transcoder-codec . G50ae) (transcoded-port . G50ad) (textual-port? . G50ac) (string->bytevector . G50ab) (standard-output-port . G50aa) (standard-input-port . G50a9) (standard-error-port . G50a8) (set-port-position! . G50a7) (put-u8 . G50a6) (put-string . G50a5) (put-datum . G50a4) (put-char . G50a3) (put-bytevector . G50a2) (port? . G50a1) (port-transcoder . G50a0) (port-position . G509f) (port-has-set-port-position!? . G509e) (port-has-port-position? . G509d) (port-eof? . G509c) (output-port-buffer-mode . G509b) (open-string-output-port . G509a) (open-string-input-port . G5099) (open-file-output-port . G5098) (open-file-input/output-port . G5097) (open-file-input-port . G5096) (open-bytevector-output-port . G5095) (open-bytevector-input-port . G5094) (native-transcoder . G5093) (native-eol-style . G5092) (make-transcoder . G5091) (latin-1-codec . G5090) (make-i/o-write-error . G4cd1) (make-i/o-read-error . G4cbd) (make-i/o-port-error . G4d68) (make-i/o-invalid-position-error . G4ce6) (make-i/o-filename-error . G4cff) (make-i/o-file-protection-error . G4d17) (make-i/o-file-is-read-only-error . G4d2b) (make-i/o-file-does-not-exist-error . G4d53) (make-i/o-file-already-exists-error . G4d3f) (make-i/o-error . G4ca9) (make-i/o-encoding-error . G4d95) (make-i/o-decoding-error . G4d80) (make-custom-textual-output-port . G508f) (make-custom-textual-input/output-port . G508e) (make-custom-textual-input-port . G508d) (make-custom-binary-output-port . G508c) (make-custom-binary-input/output-port . G508b) (make-custom-binary-input-port . G508a) (make-bytevector . G5089) (lookahead-u8 . G5088) (lookahead-char . G5087) (i/o-write-error? . G4cd3) (i/o-read-error? . G4cbf) (i/o-port-error? . G4d6c) (i/o-invalid-position-error? . G4cea) (i/o-filename-error? . G4d03) (i/o-file-protection-error? . G4d19) (i/o-file-is-read-only-error? . G4d2d) (i/o-file-does-not-exist-error? . G4d55) (i/o-file-already-exists-error? . G4d41) (i/o-error? . G4cab) (i/o-error-port . G4d6e) (i/o-error-filename . G4d05) (i/o-encoding-error? . G4d99) (i/o-encoding-error-char . G4d9b) (i/o-decoding-error? . G4d82) (get-u8 . G5086) (get-string-n! . G5085) (get-string-n . G5084) (get-string-all . G5083) (get-line . G5082) (get-datum . G5081) (get-char . G5080) (get-bytevector-some . G507f) (get-bytevector-n! . G507e) (get-bytevector-n . G507d) (get-bytevector-all . G507c) (flush-output-port . G507b) (close-port . G507a) (exit . G5073) (command-line . G4df4) (remove . G506e) (remv . G506d) (remp . G506c) (remq . G506b) (partition . G506a) (memv . G5069) (memq . G5068) (memp . G5067) (member . G5066) (exists . G5065) (for-all . G5064) (fold-right . G5063) (fold-left . G5062) (find . G5061) (filter . G5060) (cons* . G505f) (assv . G505e) (assq . G505d) (assp . G505c) (assoc . G505b) (call-with-string-output-port . G505a) (call-with-port . G5059) (call-with-bytevector-output-port . G5058) (bytevector->string . G5057) (buffer-mode? . G5056) (binary-port? . G5055) (with-exception-handler . G5054) (raise-continuable . G5053) (raise . G5052) (make-enumeration . G5051) (enum-set=? . G5050) (enum-set-universe . G504f) (enum-set-union . G504e) (enum-set-subset? . G504d) (enum-set-projection . G504c) (enum-set-member? . G504b) (enum-set-intersection . G504a) (enum-set-indexer . G5049) (enum-set-difference . G5048) (enum-set-constructor . G5047) (enum-set-complement . G5046) (enum-set->list . G5045) (who-condition? . G4b93) (warning? . G4b13) (violation? . G4b4f) (undefined-violation? . G4c03) (syntax-violation? . G4beb) (syntax-violation-subform . G4bef) (syntax-violation-form . G4bed) (syntax-violation . G3182) (simple-conditions . G5044) (serious-condition? . G4b27) (non-continuable-violation? . G4ba9) (message-condition? . G4afd) (make-who-condition . G4b8f) (make-warning . G4b11) (make-violation . G4b4d) (make-undefined-violation . G4c01) (make-syntax-violation . G4be5) (make-serious-condition . G4b25) (make-non-continuable-violation . G4ba7) (make-message-condition . G4af9) (make-lexical-violation . G4bcf) (make-irritants-condition . G4b76) (make-implementation-restriction-violation . G4bbb) (make-error . G4b39) (make-assertion-violation . G4b61) (lexical-violation? . G4bd1) (irritants-condition? . G4b7a) (implementation-restriction-violation? . G4bbd) (error? . G4b3b) (condition-who . G4b95) (condition-predicate . G5043) (condition-message . G4aff) (condition-irritants . G4b7c) (condition-accessor . G5042) (condition . G5041) (assertion-violation? . G4b63) (condition? . G5040) (utf32->string . G503f) (utf16->string . G503e) (utf8->string . G503d) (uint-list->bytevector . G503c) (u8-list->bytevector . G503b) (string->utf8 . G503a) (string->utf32 . G5039) (string->utf16 . G5038) (sint-list->bytevector . G5037) (native-endianness . G5036) (bytevector? . G5035) (bytevector=? . G5034) (bytevector-uint-set! . G5033) (bytevector-uint-ref . G5032) (bytevector-u8-set! . G5031) (bytevector-u8-ref . G5030) (bytevector-u64-set! . G502f) (bytevector-u64-ref . G502e) (bytevector-u64-native-set! . G502d) (bytevector-u64-native-ref . G502c) (bytevector-u32-set! . G502b) (bytevector-u32-ref . G502a) (bytevector-u32-native-set! . G5029) (bytevector-u32-native-ref . G5028) (bytevector-u16-set! . G5027) (bytevector-u16-ref . G5026) (bytevector-u16-native-set! . G5025) (bytevector-u16-native-ref . G5024) (bytevector-sint-set! . G5023) (bytevector-sint-ref . G5022) (bytevector-s8-set! . G5021) (bytevector-s8-ref . G5020) (bytevector-s64-set! . G501f) (bytevector-s64-ref . G501e) (bytevector-s64-native-set! . G501d) (bytevector-s64-native-ref . G501c) (bytevector-s32-set! . G501b) (bytevector-s32-ref . G501a) (bytevector-s32-native-set! . G5019) (bytevector-s32-native-ref . G5018) (bytevector-s16-set! . G5017) (bytevector-s16-ref . G5016) (bytevector-s16-native-set! . G5015) (bytevector-s16-native-ref . G5014) (bytevector-length . G5013) (bytevector-ieee-single-ref . G5012) (bytevector-ieee-single-set! . G5011) (bytevector-ieee-single-native-set! . G5010) (bytevector-ieee-single-native-ref . G500f) (bytevector-ieee-double-set! . G500e) (bytevector-ieee-double-ref . G500d) (bytevector-ieee-double-native-set! . G500c) (bytevector-ieee-double-native-ref . G500b) (bytevector-fill! . G500a) (bytevector-copy! . G5009) (bytevector-copy . G5008) (bytevector->uint-list . G5007) (bytevector->u8-list . G5006) (bytevector->sint-list . G5005) (no-nans-violation? . G4c2b) (no-infinities-violation? . G4c17) (make-no-nans-violation . G4c29) (make-no-infinities-violation . G4c15) (real->flonum . G5004) (flzero? . G5003) (fltruncate . G5002) (fltan . G5001) (flsqrt . G5000) (flsin . G4fff) (flround . G4ffe) (flpositive? . G4ffd) (flonum? . G4ffc) (flodd? . G4ffb) (flnumerator . G4ffa) (flnegative? . G4ff9) (flnan? . G4ff8) (flmod0 . G4ff7) (flmod . G4ff6) (flmin . G4ff5) (flmax . G4ff4) (fllog . G4ff3) (flinteger? . G4ff2) (flinfinite? . G4ff1) (flfloor . G4ff0) (flfinite? . G4fef) (flexpt . G4fee) (flexp . G4fed) (fleven? . G4fec) (fldiv0-and-mod0 . G4feb) (fldiv0 . G4fea) (fldiv-and-mod . G4fe9) (fldiv . G4fe8) (fldenominator . G4fe7) (flcos . G4fe6) (flceiling . G4fe5) (flatan . G4fe4) (flasin . G4fe3) (flacos . G4fe2) (flabs . G4fe1) (fl>? . G4fe0) (fl>=? . G4fdf) (fl=? . G4fde) (fl<? . G4fdd) (fl<=? . G4fdc) (fl/ . G4fdb) (fl- . G4fda) (fl+ . G4fd9) (fl* . G4fd8) (fixnum->flonum . G4fd7) (fxzero? . G4fd6) (fxxor . G4fd5) (fxrotate-bit-field . G4fd4) (fxreverse-bit-field . G4fd3) (fxpositive? . G4fd2) (fxodd? . G4fd1) (fxnot . G4fd0) (fxnegative? . G4fcf) (fxmod0 . G4fce) (fxmod . G4fcd) (fxmin . G4fcc) (fxmax . G4fcb) (fxlength . G4fca) (fxior . G4fc9) (fxif . G4fc8) (fxfirst-bit-set . G4fc7) (fxeven? . G4fc6) (fxdiv0-and-mod0 . G4fc5) (fxdiv0 . G4fc4) (fxdiv-and-mod . G4fc3) (fxdiv . G4fc2) (fxcopy-bit-field . G4fc1) (fxcopy-bit . G4fc0) (fxbit-set? . G4fbf) (fxbit-field . G4fbe) (fxbit-count . G4fbd) (fxarithmetic-shift-right . G4fbc) (fxarithmetic-shift-left . G4fbb) (fxarithmetic-shift . G4fba) (fxand . G4fb9) (fx>? . G4fb8) (fx>=? . G4fb7) (fx=? . G4fb6) (fx<? . G4fb5) (fx<=? . G4fb4) (fx-/carry . G4fb3) (fx- . G4fb2) (fx+/carry . G4fb1) (fx+ . G4fb0) (fx*/carry . G4faf) (fx* . G4fae) (greatest-fixnum . G4fad) (least-fixnum . G4fac) (fixnum-width . G4fab) (fixnum? . G4faa) (bitwise-rotate-bit-field . G4fa9) (bitwise-reverse-bit-field . G4fa8) (bitwise-length . G4fa7) (bitwise-if . G4fa6) (bitwise-first-bit-set . G4fa5) (bitwise-copy-bit-field . G4fa4) (bitwise-copy-bit . G4fa3) (bitwise-bit-set? . G4fa2) (bitwise-bit-field . G4fa1) (bitwise-bit-count . G4fa0) (bitwise-xor . G4f9f) (bitwise-ior . G4f9e) (bitwise-and . G4f9d) (bitwise-not . G4f9c) (bitwise-arithmetic-shift-right . G4f9b) (bitwise-arithmetic-shift-left . G4f9a) (bitwise-arithmetic-shift . G4f99) (zero? . G4f98) (vector? . G4f97) (vector-set! . G4f96) (vector-ref . G4f95) (vector-map . G4f94) (vector-length . G4f93) (vector-for-each . G4f92) (vector-fill! . G4f91) (vector->list . G4f90) (vector . G4f8f) (values . G4f8e) (truncate . G4f8d) (tan . G4f8c) (symbol? . G4f8b) (symbol=? . G4f8a) (symbol->string . G4f89) (substring . G4f88) (string? . G4f87) (string>? . G4f86) (string>=? . G4f85) (string=? . G4f84) (string<? . G4f83) (string<=? . G4f82) (string-ref . G4f81) (string-length . G4f80) (string-for-each . G4f7f) (string-copy . G4f7e) (string-append . G4f7d) (string->symbol . G4f7c) (string->number . G4f7b) (string->list . G4f7a) (string . G4f79) (sqrt . G4f78) (sin . G4f77) (round . G4f76) (reverse . G4f75) (real? . G4f74) (real-valued? . G4f73) (real-part . G4f72) (rationalize . G4f71) (rational? . G4f70) (rational-valued? . G4f6f) (procedure? . G4f6e) (positive? . G4f6d) (pair? . G4f6c) (odd? . G4f6b) (numerator . G4f6a) (number? . G4f69) (number->string . G4f68) (null? . G4f67) (not . G4f66) (negative? . G4f65) (nan? . G4f64) (min . G4f63) (max . G4f62) (map . G4f61) (make-vector . G4f60) (make-string . G4f5f) (make-rectangular . G4f5e) (make-polar . G4f5d) (magnitude . G4f5c) (log . G4f5b) (list? . G4f5a) (list-tail . G4f59) (list-ref . G4f58) (list->vector . G4f57) (list->string . G4f56) (list . G4f55) (length . G4f54) (lcm . G4f53) (integer? . G4f52) (integer-valued? . G4f51) (integer->char . G4f50) (infinite? . G4f4f) (inexact? . G4f4e) (inexact . G4f4d) (imag-part . G4f4c) (gcd . G4f4b) (for-each . G4f4a) (floor . G4f49) (finite? . G4f48) (expt . G4f47) (exp . G4f46) (exact? . G4f45) (exact-integer-sqrt . G4f44) (exact . G4f43) (even? . G4f42) (error . G4f41) (eqv? . G4f40) (equal? . G4f3f) (eq? . G4f3e) (dynamic-wind . G4f3d) (div0-and-mod0 . G4f3c) (mod0 . G4f3b) (div0 . G4f3a) (div-and-mod . G4f39) (mod . G4f38) (div . G4f37) (denominator . G4f36) (cos . G4f35) (cons . G4f34) (complex? . G4f33) (char? . G4f32) (char>? . G4f31) (char>=? . G4f30) (char=? . G4f2f) (char<? . G4f2e) (char<=? . G4f2d) (char->integer . G4f2c) (ceiling . G4f2b) (call-with-values . G4f2a) (call/cc . G4f29) (call-with-current-continuation . G4f28) (cddddr . G4f27) (cdddar . G4f26) (cddadr . G4f25) (cddaar . G4f24) (cdaddr . G4f23) (cdadar . G4f22) (cdaadr . G4f21) (cdaaar . G4f20) (cadddr . G4f1f) (caddar . G4f1e) (cadadr . G4f1d) (cadaar . G4f1c) (caaddr . G4f1b) (caadar . G4f1a) (caaadr . G4f19) (caaaar . G4f18) (cdddr . G4f17) (cddar . G4f16) (cdadr . G4f15) (cdaar . G4f14) (caddr . G4f13) (cadar . G4f12) (caadr . G4f11) (caaar . G4f10) (cddr . G4f0f) (cdar . G4f0e) (cadr . G4f0d) (caar . G4f0c) (cdr . G4f0b) (car . G4f0a) (boolean? . G4f09) (boolean=? . G4f08) (atan . G4f07) (assertion-violation . G4f06) (asin . G4f05) (apply . G4f04) (append . G4f03) (angle . G4f02) (acos . G4f01) (abs . G4f00) (/ . G4eff) (* . G4efe) (- . G4efd) (+ . G4efc) (>= . G4efb) (> . G4efa) (= . G4ef9) (<= . G4ef8) (< . G4ef7) (&no-nans . G4ef4) (&no-infinities . G4ef3) (&i/o-encoding . G4ef2) (&i/o-decoding . G4ef1) (&i/o-port . G4ef0) (&i/o-file-does-not-exist . G4eef) (&i/o-file-already-exists . G4eee) (&i/o-file-is-read-only . G4eed) (&i/o-file-protection . G4eec) (&i/o-filename . G4eeb) (&i/o-invalid-position . G4eea) (&i/o-write . G4ee9) (&i/o-read . G4ee8) (&i/o . G4ee7) (&undefined . G4ee6) (&syntax . G4ee5) (&lexical . G4ee4) (&implementation-restriction . G4ee3) (&non-continuable . G4ee2) (&who . G4ee1) (&irritants . G4ee0) (&assertion . G4edf) (&violation . G4ede) (&error . G4edd) (&serious . G4edc) (&warning . G4edb) (&message . G4eda) (&condition . G4ed9) (define-condition-type . G4ed8) (define-enumeration . G4ed7) (define-record-type . G4ed6) (parent-rtd . G4ed5) (nongenerative . G4ed4) (opaque . G4ed3) (sealed . G4ed2) (protocol . G4ed1) (parent . G4ed0) (immutable . G4ecf) (mutable . G4ece) (fields . G4ecd) (error-handling-mode . G4ecc) (file-options . G4ecb) (buffer-mode . G4eca) (eol-style . G4ec9) (guard . G4ec8) (unsyntax-splicing . G4ec5) (unsyntax . G4ec4) (unquote-splicing . G4ec3) (unquote . G4ec2) (_ . G4ec1) (else . G4ec0) (=> . G4ebf) (... . G4ebe) (assert . G4ebd) (endianness . G4ebc) (or . G4eb9) (and . G4eb8) (do . G4eb7) (cond . G4eb6) (let* . G4eb5) (let . G4eb4) (let*-values . G4eb3) (let-values . G4eb2) (identifier-syntax . G4eb1) (with-syntax . G4eb0) (quasisyntax . G4eaf) (quasiquote . G4eae) (syntax-rules . G4ead) (record-constructor-descriptor . G4eaa) (record-type-descriptor . G4ea9) (case . G4ea8) (unless . G4ea6) (when . G4ea5) (if . G4ea4) (letrec* . G4ea3) (letrec . G4ea2) (case-lambda . G4ea0) (lambda . G4e9f) (syntax . G4e9e) (syntax-case . G4e9d) (quote . G4e9c) (letrec-syntax . G4e9a) (let-syntax . G4e99) (set! . G4e98) (begin . G4e96) (define-syntax . G4e94) (define . G4e93)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G519b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G315c) (quotient . G5079) (null-environment . G315a) (remainder . G5078) (modulo . G5077) (inexact->exact . G5076) (force . G5075) (exact->inexact . G5074) (delay . G4ebb)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G519c '(rnrs control) '(6) '() '() '() '((do . G4eb7) (unless . G4ea6) (when . G4ea5) (case-lambda . G4ea0)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G519d '(rnrs eval) '(6) '() '() '() '((eval . G3160) (environment . G3158)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G519e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G5070) (set-car! . G506f)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G519f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G5072) (string-set! . G5071)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51a0 '(rnrs programs) '(6) '() '() '() '((exit . G5073) (command-line . G4df4)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51a1 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2e8d) (identifier? . G3184) (generate-temporaries . G316e) (free-identifier=? . G3170) (syntax->datum . G3188) (datum->syntax . G3186) (bound-identifier=? . G3172) (syntax-violation . G3182) (unsyntax-splicing . G4ec5) (unsyntax . G4ec4) (_ . G4ec1) (... . G4ebe) (with-syntax . G4eb0) (quasisyntax . G4eaf) (syntax . G4e9e) (syntax-case . G4e9d)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51a2 '(rnrs files) '(6) '() '() '() '((delete-file . G50e2) (file-exists? . G50e1) (make-i/o-write-error . G4cd1) (make-i/o-read-error . G4cbd) (make-i/o-port-error . G4d68) (make-i/o-invalid-position-error . G4ce6) (make-i/o-filename-error . G4cff) (make-i/o-file-protection-error . G4d17) (make-i/o-file-is-read-only-error . G4d2b) (make-i/o-file-does-not-exist-error . G4d53) (make-i/o-file-already-exists-error . G4d3f) (make-i/o-error . G4ca9) (i/o-write-error? . G4cd3) (i/o-read-error? . G4cbf) (i/o-port-error? . G4d6c) (i/o-invalid-position-error? . G4cea) (i/o-filename-error? . G4d03) (i/o-file-protection-error? . G4d19) (i/o-file-is-read-only-error? . G4d2d) (i/o-file-does-not-exist-error? . G4d55) (i/o-file-already-exists-error? . G4d41) (i/o-error? . G4cab) (i/o-error-port . G4d6e) (i/o-error-filename . G4d05) (&i/o-port . G4ef0) (&i/o-file-does-not-exist . G4eef) (&i/o-file-already-exists . G4eee) (&i/o-file-is-read-only . G4eed) (&i/o-file-protection . G4eec) (&i/o-filename . G4eeb) (&i/o-invalid-position . G4eea) (&i/o-write . G4ee9) (&i/o-read . G4ee8) (&i/o . G4ee7)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51a3 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G50e0) (vector-sort . G50df) (list-sort . G50de)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51a4 '(rnrs base) '(6) '() '() '() '((zero? . G4f98) (vector? . G4f97) (vector-set! . G4f96) (vector-ref . G4f95) (vector-map . G4f94) (vector-length . G4f93) (vector-for-each . G4f92) (vector-fill! . G4f91) (vector->list . G4f90) (vector . G4f8f) (values . G4f8e) (truncate . G4f8d) (tan . G4f8c) (symbol? . G4f8b) (symbol=? . G4f8a) (symbol->string . G4f89) (substring . G4f88) (string? . G4f87) (string>? . G4f86) (string>=? . G4f85) (string=? . G4f84) (string<? . G4f83) (string<=? . G4f82) (string-ref . G4f81) (string-length . G4f80) (string-for-each . G4f7f) (string-copy . G4f7e) (string-append . G4f7d) (string->symbol . G4f7c) (string->number . G4f7b) (string->list . G4f7a) (string . G4f79) (sqrt . G4f78) (sin . G4f77) (round . G4f76) (reverse . G4f75) (real? . G4f74) (real-valued? . G4f73) (real-part . G4f72) (rationalize . G4f71) (rational? . G4f70) (rational-valued? . G4f6f) (procedure? . G4f6e) (positive? . G4f6d) (pair? . G4f6c) (odd? . G4f6b) (numerator . G4f6a) (number? . G4f69) (number->string . G4f68) (null? . G4f67) (not . G4f66) (negative? . G4f65) (nan? . G4f64) (min . G4f63) (max . G4f62) (map . G4f61) (make-vector . G4f60) (make-string . G4f5f) (make-rectangular . G4f5e) (make-polar . G4f5d) (magnitude . G4f5c) (log . G4f5b) (list? . G4f5a) (list-tail . G4f59) (list-ref . G4f58) (list->vector . G4f57) (list->string . G4f56) (list . G4f55) (length . G4f54) (lcm . G4f53) (integer? . G4f52) (integer-valued? . G4f51) (integer->char . G4f50) (infinite? . G4f4f) (inexact? . G4f4e) (inexact . G4f4d) (imag-part . G4f4c) (gcd . G4f4b) (for-each . G4f4a) (floor . G4f49) (finite? . G4f48) (expt . G4f47) (exp . G4f46) (exact? . G4f45) (exact-integer-sqrt . G4f44) (exact . G4f43) (even? . G4f42) (error . G4f41) (eqv? . G4f40) (equal? . G4f3f) (eq? . G4f3e) (dynamic-wind . G4f3d) (div0-and-mod0 . G4f3c) (mod0 . G4f3b) (div0 . G4f3a) (div-and-mod . G4f39) (mod . G4f38) (div . G4f37) (denominator . G4f36) (cos . G4f35) (cons . G4f34) (complex? . G4f33) (char? . G4f32) (char>? . G4f31) (char>=? . G4f30) (char=? . G4f2f) (char<? . G4f2e) (char<=? . G4f2d) (char->integer . G4f2c) (ceiling . G4f2b) (call-with-values . G4f2a) (call/cc . G4f29) (call-with-current-continuation . G4f28) (cddddr . G4f27) (cdddar . G4f26) (cddadr . G4f25) (cddaar . G4f24) (cdaddr . G4f23) (cdadar . G4f22) (cdaadr . G4f21) (cdaaar . G4f20) (cadddr . G4f1f) (caddar . G4f1e) (cadadr . G4f1d) (cadaar . G4f1c) (caaddr . G4f1b) (caadar . G4f1a) (caaadr . G4f19) (caaaar . G4f18) (cdddr . G4f17) (cddar . G4f16) (cdadr . G4f15) (cdaar . G4f14) (caddr . G4f13) (cadar . G4f12) (caadr . G4f11) (caaar . G4f10) (cddr . G4f0f) (cdar . G4f0e) (cadr . G4f0d) (caar . G4f0c) (cdr . G4f0b) (car . G4f0a) (boolean? . G4f09) (boolean=? . G4f08) (atan . G4f07) (assertion-violation . G4f06) (asin . G4f05) (apply . G4f04) (append . G4f03) (angle . G4f02) (acos . G4f01) (abs . G4f00) (/ . G4eff) (* . G4efe) (- . G4efd) (+ . G4efc) (>= . G4efb) (> . G4efa) (= . G4ef9) (<= . G4ef8) (< . G4ef7) (unquote-splicing . G4ec3) (unquote . G4ec2) (_ . G4ec1) (else . G4ec0) (=> . G4ebf) (... . G4ebe) (assert . G4ebd) (or . G4eb9) (and . G4eb8) (cond . G4eb6) (let* . G4eb5) (let . G4eb4) (let*-values . G4eb3) (let-values . G4eb2) (identifier-syntax . G4eb1) (quasiquote . G4eae) (syntax-rules . G4ead) (case . G4ea8) (if . G4ea4) (letrec* . G4ea3) (letrec . G4ea2) (lambda . G4e9f) (quote . G4e9c) (letrec-syntax . G4e9a) (let-syntax . G4e99) (set! . G4e98) (begin . G4e96) (define-syntax . G4e94) (define . G4e93)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51a5 '(rnrs lists) '(6) '() '() '() '((remove . G506e) (remv . G506d) (remp . G506c) (remq . G506b) (partition . G506a) (memv . G5069) (memq . G5068) (memp . G5067) (member . G5066) (exists . G5065) (for-all . G5064) (fold-right . G5063) (fold-left . G5062) (find . G5061) (filter . G5060) (cons* . G505f) (assv . G505e) (assq . G505d) (assp . G505c) (assoc . G505b)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51a6 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G50c8) (call-with-input-file . G50c7) (write-char . G50c6) (write . G50c5) (with-output-to-file . G50c4) (with-input-from-file . G50c3) (read-char . G50c2) (read . G50c1) (peek-char . G50c0) (open-output-file . G50bf) (open-input-file . G50be) (newline . G50bd) (display . G50bc) (close-output-port . G50bb) (close-input-port . G50ba) (eof-object? . G50b9) (eof-object . G50b8) (current-error-port . G50b7) (current-output-port . G50b6) (current-input-port . G50b5) (output-port? . G50b4) (input-port? . G50b3) (make-i/o-write-error . G4cd1) (make-i/o-read-error . G4cbd) (make-i/o-port-error . G4d68) (make-i/o-invalid-position-error . G4ce6) (make-i/o-filename-error . G4cff) (make-i/o-file-protection-error . G4d17) (make-i/o-file-is-read-only-error . G4d2b) (make-i/o-file-does-not-exist-error . G4d53) (make-i/o-file-already-exists-error . G4d3f) (make-i/o-error . G4ca9) (i/o-write-error? . G4cd3) (i/o-read-error? . G4cbf) (i/o-port-error? . G4d6c) (i/o-invalid-position-error? . G4cea) (i/o-filename-error? . G4d03) (i/o-file-protection-error? . G4d19) (i/o-file-is-read-only-error? . G4d2d) (i/o-file-does-not-exist-error? . G4d55) (i/o-file-already-exists-error? . G4d41) (i/o-error? . G4cab) (i/o-error-port . G4d6e) (i/o-error-filename . G4d05) (&i/o-port . G4ef0) (&i/o-file-does-not-exist . G4eef) (&i/o-file-already-exists . G4eee) (&i/o-file-is-read-only . G4eed) (&i/o-file-protection . G4eec) (&i/o-filename . G4eeb) (&i/o-invalid-position . G4eea) (&i/o-write . G4ee9) (&i/o-read . G4ee8) (&i/o . G4ee7)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51a7 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G5089) (utf32->string . G503f) (utf16->string . G503e) (utf8->string . G503d) (uint-list->bytevector . G503c) (u8-list->bytevector . G503b) (string->utf8 . G503a) (string->utf32 . G5039) (string->utf16 . G5038) (sint-list->bytevector . G5037) (native-endianness . G5036) (bytevector? . G5035) (bytevector=? . G5034) (bytevector-uint-set! . G5033) (bytevector-uint-ref . G5032) (bytevector-u8-set! . G5031) (bytevector-u8-ref . G5030) (bytevector-u64-set! . G502f) (bytevector-u64-ref . G502e) (bytevector-u64-native-set! . G502d) (bytevector-u64-native-ref . G502c) (bytevector-u32-set! . G502b) (bytevector-u32-ref . G502a) (bytevector-u32-native-set! . G5029) (bytevector-u32-native-ref . G5028) (bytevector-u16-set! . G5027) (bytevector-u16-ref . G5026) (bytevector-u16-native-set! . G5025) (bytevector-u16-native-ref . G5024) (bytevector-sint-set! . G5023) (bytevector-sint-ref . G5022) (bytevector-s8-set! . G5021) (bytevector-s8-ref . G5020) (bytevector-s64-set! . G501f) (bytevector-s64-ref . G501e) (bytevector-s64-native-set! . G501d) (bytevector-s64-native-ref . G501c) (bytevector-s32-set! . G501b) (bytevector-s32-ref . G501a) (bytevector-s32-native-set! . G5019) (bytevector-s32-native-ref . G5018) (bytevector-s16-set! . G5017) (bytevector-s16-ref . G5016) (bytevector-s16-native-set! . G5015) (bytevector-s16-native-ref . G5014) (bytevector-length . G5013) (bytevector-ieee-single-ref . G5012) (bytevector-ieee-single-set! . G5011) (bytevector-ieee-single-native-set! . G5010) (bytevector-ieee-single-native-ref . G500f) (bytevector-ieee-double-set! . G500e) (bytevector-ieee-double-ref . G500d) (bytevector-ieee-double-native-set! . G500c) (bytevector-ieee-double-native-ref . G500b) (bytevector-fill! . G500a) (bytevector-copy! . G5009) (bytevector-copy . G5008) (bytevector->uint-list . G5007) (bytevector->u8-list . G5006) (bytevector->sint-list . G5005) (endianness . G4ebc)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51a8 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5110) (string-titlecase . G510f) (string-normalize-nfkd . G510e) (string-normalize-nfkc . G510d) (string-normalize-nfd . G510c) (string-normalize-nfc . G510b) (string-foldcase . G510a) (string-downcase . G5109) (string-ci>? . G5108) (string-ci>=? . G5107) (string-ci=? . G5106) (string-ci<? . G5105) (string-ci<=? . G5104) (char-whitespace? . G5103) (char-upper-case? . G5102) (char-title-case? . G5101) (char-numeric? . G5100) (char-lower-case? . G50ff) (char-general-category . G50fe) (char-upcase . G50fd) (char-titlecase . G50fc) (char-foldcase . G50fb) (char-downcase . G50fa) (char-ci>? . G50f9) (char-ci>=? . G50f8) (char-ci=? . G50f7) (char-ci<? . G50f6) (char-ci<=? . G50f5) (char-alphabetic? . G50f4)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51a9 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G5054) (raise-continuable . G5053) (raise . G5052) (guard . G4ec8) (else . G4ec0) (=> . G4ebf)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51aa '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4fa9) (bitwise-reverse-bit-field . G4fa8) (bitwise-length . G4fa7) (bitwise-if . G4fa6) (bitwise-first-bit-set . G4fa5) (bitwise-copy-bit-field . G4fa4) (bitwise-copy-bit . G4fa3) (bitwise-bit-set? . G4fa2) (bitwise-bit-field . G4fa1) (bitwise-bit-count . G4fa0) (bitwise-xor . G4f9f) (bitwise-ior . G4f9e) (bitwise-and . G4f9d) (bitwise-not . G4f9c) (bitwise-arithmetic-shift-right . G4f9b) (bitwise-arithmetic-shift-left . G4f9a) (bitwise-arithmetic-shift . G4f99)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51ab '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4fd6) (fxxor . G4fd5) (fxrotate-bit-field . G4fd4) (fxreverse-bit-field . G4fd3) (fxpositive? . G4fd2) (fxodd? . G4fd1) (fxnot . G4fd0) (fxnegative? . G4fcf) (fxmod0 . G4fce) (fxmod . G4fcd) (fxmin . G4fcc) (fxmax . G4fcb) (fxlength . G4fca) (fxior . G4fc9) (fxif . G4fc8) (fxfirst-bit-set . G4fc7) (fxeven? . G4fc6) (fxdiv0-and-mod0 . G4fc5) (fxdiv0 . G4fc4) (fxdiv-and-mod . G4fc3) (fxdiv . G4fc2) (fxcopy-bit-field . G4fc1) (fxcopy-bit . G4fc0) (fxbit-set? . G4fbf) (fxbit-field . G4fbe) (fxbit-count . G4fbd) (fxarithmetic-shift-right . G4fbc) (fxarithmetic-shift-left . G4fbb) (fxarithmetic-shift . G4fba) (fxand . G4fb9) (fx>? . G4fb8) (fx>=? . G4fb7) (fx=? . G4fb6) (fx<? . G4fb5) (fx<=? . G4fb4) (fx-/carry . G4fb3) (fx- . G4fb2) (fx+/carry . G4fb1) (fx+ . G4fb0) (fx*/carry . G4faf) (fx* . G4fae) (greatest-fixnum . G4fad) (least-fixnum . G4fac) (fixnum-width . G4fab) (fixnum? . G4faa)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51ac '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c2b) (no-infinities-violation? . G4c17) (make-no-nans-violation . G4c29) (make-no-infinities-violation . G4c15) (real->flonum . G5004) (flzero? . G5003) (fltruncate . G5002) (fltan . G5001) (flsqrt . G5000) (flsin . G4fff) (flround . G4ffe) (flpositive? . G4ffd) (flonum? . G4ffc) (flodd? . G4ffb) (flnumerator . G4ffa) (flnegative? . G4ff9) (flnan? . G4ff8) (flmod0 . G4ff7) (flmod . G4ff6) (flmin . G4ff5) (flmax . G4ff4) (fllog . G4ff3) (flinteger? . G4ff2) (flinfinite? . G4ff1) (flfloor . G4ff0) (flfinite? . G4fef) (flexpt . G4fee) (flexp . G4fed) (fleven? . G4fec) (fldiv0-and-mod0 . G4feb) (fldiv0 . G4fea) (fldiv-and-mod . G4fe9) (fldiv . G4fe8) (fldenominator . G4fe7) (flcos . G4fe6) (flceiling . G4fe5) (flatan . G4fe4) (flasin . G4fe3) (flacos . G4fe2) (flabs . G4fe1) (fl>? . G4fe0) (fl>=? . G4fdf) (fl=? . G4fde) (fl<? . G4fdd) (fl<=? . G4fdc) (fl/ . G4fdb) (fl- . G4fda) (fl+ . G4fd9) (fl* . G4fd8) (fixnum->flonum . G4fd7) (&no-nans . G4ef4) (&no-infinities . G4ef3)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51ad '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G50dd) (string-ci-hash . G50dc) (string-hash . G50db) (equal-hash . G50da) (hashtable-equivalence-function . G50d9) (make-hashtable . G50d8) (hashtable-hash-function . G50d7) (make-eqv-hashtable . G50d6) (make-eq-hashtable . G50d5) (hashtable? . G50d4) (hashtable-update! . G50d3) (hashtable-size . G50d2) (hashtable-set! . G50d1) (hashtable-ref . G50d0) (hashtable-mutable? . G50cf) (hashtable-keys . G50ce) (hashtable-entries . G50cd) (hashtable-delete! . G50cc) (hashtable-copy . G50cb) (hashtable-contains? . G50ca) (hashtable-clear! . G50c9)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51ae '(rnrs io ports) '(6) '() '() '() '((eof-object? . G50b9) (eof-object . G50b8) (current-error-port . G50b7) (current-output-port . G50b6) (current-input-port . G50b5) (output-port? . G50b4) (input-port? . G50b3) (utf-8-codec . G50b2) (utf-16-codec . G50b1) (transcoder-error-handling-mode . G50b0) (transcoder-eol-style . G50af) (transcoder-codec . G50ae) (transcoded-port . G50ad) (textual-port? . G50ac) (string->bytevector . G50ab) (standard-output-port . G50aa) (standard-input-port . G50a9) (standard-error-port . G50a8) (set-port-position! . G50a7) (put-u8 . G50a6) (put-string . G50a5) (put-datum . G50a4) (put-char . G50a3) (put-bytevector . G50a2) (port? . G50a1) (port-transcoder . G50a0) (port-position . G509f) (port-has-set-port-position!? . G509e) (port-has-port-position? . G509d) (port-eof? . G509c) (output-port-buffer-mode . G509b) (open-string-output-port . G509a) (open-string-input-port . G5099) (open-file-output-port . G5098) (open-file-input/output-port . G5097) (open-file-input-port . G5096) (open-bytevector-output-port . G5095) (open-bytevector-input-port . G5094) (native-transcoder . G5093) (native-eol-style . G5092) (make-transcoder . G5091) (latin-1-codec . G5090) (make-i/o-write-error . G4cd1) (make-i/o-read-error . G4cbd) (make-i/o-port-error . G4d68) (make-i/o-invalid-position-error . G4ce6) (make-i/o-filename-error . G4cff) (make-i/o-file-protection-error . G4d17) (make-i/o-file-is-read-only-error . G4d2b) (make-i/o-file-does-not-exist-error . G4d53) (make-i/o-file-already-exists-error . G4d3f) (make-i/o-error . G4ca9) (make-i/o-encoding-error . G4d95) (make-i/o-decoding-error . G4d80) (make-custom-textual-output-port . G508f) (make-custom-textual-input/output-port . G508e) (make-custom-textual-input-port . G508d) (make-custom-binary-output-port . G508c) (make-custom-binary-input/output-port . G508b) (make-custom-binary-input-port . G508a) (lookahead-u8 . G5088) (lookahead-char . G5087) (i/o-write-error? . G4cd3) (i/o-read-error? . G4cbf) (i/o-port-error? . G4d6c) (i/o-invalid-position-error? . G4cea) (i/o-filename-error? . G4d03) (i/o-file-protection-error? . G4d19) (i/o-file-is-read-only-error? . G4d2d) (i/o-file-does-not-exist-error? . G4d55) (i/o-file-already-exists-error? . G4d41) (i/o-error? . G4cab) (i/o-error-port . G4d6e) (i/o-error-filename . G4d05) (i/o-encoding-error? . G4d99) (i/o-encoding-error-char . G4d9b) (i/o-decoding-error? . G4d82) (get-u8 . G5086) (get-string-n! . G5085) (get-string-n . G5084) (get-string-all . G5083) (get-line . G5082) (get-datum . G5081) (get-char . G5080) (get-bytevector-some . G507f) (get-bytevector-n! . G507e) (get-bytevector-n . G507d) (get-bytevector-all . G507c) (flush-output-port . G507b) (close-port . G507a) (call-with-string-output-port . G505a) (call-with-port . G5059) (call-with-bytevector-output-port . G5058) (bytevector->string . G5057) (buffer-mode? . G5056) (binary-port? . G5055) (&i/o-encoding . G4ef2) (&i/o-decoding . G4ef1) (&i/o-port . G4ef0) (&i/o-file-does-not-exist . G4eef) (&i/o-file-already-exists . G4eee) (&i/o-file-is-read-only . G4eed) (&i/o-file-protection . G4eec) (&i/o-filename . G4eeb) (&i/o-invalid-position . G4eea) (&i/o-write . G4ee9) (&i/o-read . G4ee8) (&i/o . G4ee7) (error-handling-mode . G4ecc) (file-options . G4ecb) (buffer-mode . G4eca) (eol-style . G4ec9)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51af '(rnrs enums) '(6) '() '() '() '((make-enumeration . G5051) (enum-set=? . G5050) (enum-set-universe . G504f) (enum-set-union . G504e) (enum-set-subset? . G504d) (enum-set-projection . G504c) (enum-set-member? . G504b) (enum-set-intersection . G504a) (enum-set-indexer . G5049) (enum-set-difference . G5048) (enum-set-constructor . G5047) (enum-set-complement . G5046) (enum-set->list . G5045) (define-enumeration . G4ed7)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51b0 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4b93) (warning? . G4b13) (violation? . G4b4f) (undefined-violation? . G4c03) (syntax-violation? . G4beb) (syntax-violation-subform . G4bef) (syntax-violation-form . G4bed) (syntax-violation . G3182) (simple-conditions . G5044) (serious-condition? . G4b27) (non-continuable-violation? . G4ba9) (message-condition? . G4afd) (make-who-condition . G4b8f) (make-warning . G4b11) (make-violation . G4b4d) (make-undefined-violation . G4c01) (make-syntax-violation . G4be5) (make-serious-condition . G4b25) (make-non-continuable-violation . G4ba7) (make-message-condition . G4af9) (make-lexical-violation . G4bcf) (make-irritants-condition . G4b76) (make-implementation-restriction-violation . G4bbb) (make-error . G4b39) (make-assertion-violation . G4b61) (lexical-violation? . G4bd1) (irritants-condition? . G4b7a) (implementation-restriction-violation? . G4bbd) (error? . G4b3b) (condition-who . G4b95) (condition-predicate . G5043) (condition-message . G4aff) (condition-irritants . G4b7c) (condition-accessor . G5042) (condition . G5041) (assertion-violation? . G4b63) (condition? . G5040) (&undefined . G4ee6) (&syntax . G4ee5) (&lexical . G4ee4) (&implementation-restriction . G4ee3) (&non-continuable . G4ee2) (&who . G4ee1) (&irritants . G4ee0) (&assertion . G4edf) (&violation . G4ede) (&error . G4edd) (&serious . G4edc) (&warning . G4edb) (&message . G4eda) (&condition . G4ed9) (define-condition-type . G4ed8)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51b1 '(rnrs records inspection) '(6) '() '() '() '((record? . G50ec) (record-type-uid . G50eb) (record-type-sealed? . G50ea) (record-type-parent . G50e9) (record-type-opaque? . G50e8) (record-type-name . G50e7) (record-type-generative? . G50e6) (record-type-field-names . G50e5) (record-rtd . G50e4) (record-field-mutable? . G50e3)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51b2 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G50f3) (record-predicate . G50f2) (record-mutator . G50f1) (record-constructor . G50f0) (record-accessor . G50ef) (make-record-type-descriptor . G50ee) (make-record-constructor-descriptor . G50ed)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51b3 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4ed6) (parent-rtd . G4ed5) (nongenerative . G4ed4) (opaque . G4ed3) (sealed . G4ed2) (protocol . G4ed1) (parent . G4ed0) (immutable . G4ecf) (mutable . G4ece) (fields . G4ecd) (record-constructor-descriptor . G4eaa) (record-type-descriptor . G4ea9)) '() values values '#f '#f '#t '#f) (G2c40@G2ad3@install-library 'G51b4 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G5194) (&no-nans-rtd . G5193) (&no-infinities-rcd . G5192) (&no-infinities-rtd . G5191) (&i/o-encoding-rcd . G5190) (&i/o-encoding-rtd . G518f) (&i/o-decoding-rcd . G518e) (&i/o-decoding-rtd . G518d) (&i/o-port-rcd . G518c) (&i/o-port-rtd . G518b) (&i/o-file-does-not-exist-rcd . G518a) (&i/o-file-does-not-exist-rtd . G5189) (&i/o-file-already-exists-rcd . G5188) (&i/o-file-already-exists-rtd . G5187) (&i/o-file-is-read-only-rcd . G5186) (&i/o-file-is-read-only-rtd . G5185) (&i/o-file-protection-rcd . G5184) (&i/o-file-protection-rtd . G5183) (&i/o-filename-rcd . G5182) (&i/o-filename-rtd . G5181) (&i/o-invalid-position-rcd . G5180) (&i/o-invalid-position-rtd . G517f) (&i/o-write-rcd . G517e) (&i/o-write-rtd . G517d) (&i/o-read-rcd . G517c) (&i/o-read-rtd . G517b) (&i/o-rcd . G517a) (&i/o-rtd . G5179) (&undefined-rcd . G5178) (&undefined-rtd . G5177) (&syntax-rcd . G5176) (&syntax-rtd . G5175) (&lexical-rcd . G5174) (&lexical-rtd . G5173) (&implementation-restriction-rcd . G5172) (&implementation-restriction-rtd . G5171) (&non-continuable-rcd . G5170) (&non-continuable-rtd . G516f) (&who-rcd . G516e) (&who-rtd . G516d) (&irritants-rcd . G516c) (&irritants-rtd . G516b) (&assertion-rcd . G516a) (&assertion-rtd . G5169) (&violation-rcd . G5168) (&violation-rtd . G5167) (&error-rcd . G5166) (&error-rtd . G5165) (&serious-rcd . G5164) (&serious-rtd . G5163) (&warning-rcd . G5162) (&warning-rtd . G5161) (&message-rcd . G5160) (&message-rtd . G515f) (&condition-rcd . G515e) (&condition-rtd . G515d) (syntax-error . G317c) (syntax-dispatch . G308f) (pretty-print . G515c) (eval-core . G515b) (set-symbol-value! . G515a) (symbol-value . G5159) (gensym . G5158) (void . G5157) (load . G4dfa) (interaction-environment . G318e) (char-ready? . G5156) (regexp? . G5155) (read-line . G5154) (dotted-list? . G5153) (circular-list? . G5152) (proper-list? . G5151) (circular-list . G5150) (last . G514f) (last-pair . G514e) (not-pair? . G514d) (split-at! . G514c) (split-at . G514b) (list= . G514a) (list-copy . G5149) (list-tabulate . G5148) (make-list . G5147) (xcons . G5146) (tenth . G5145) (ninth . G5144) (eighth . G5143) (seventh . G5142) (sixth . G5141) (fifth . G5140) (drop-right! . G513f) (drop-right . G513e) (take-right . G513d) (take! . G513c) (drop . G513b) (take . G513a) (car+cdr . G5139) (third . G5138) (second . G5137) (first . G5136) (iota . G5135) (every . G5134) (assoc-ref . G5133) (alist-cons . G5132) (print . G5131) (format . G5130) (standard-library-path . G512f) (file-newer? . G512e) (stat-mtime . G512d) (current-directory . G512c) (write-to-file . G512b) (file->list . G512a) (file->string . G5129) (digit->integer . G5128) (call-with-string-input-port . G5127) (call-with-string-io . G5126) (string-split . G5125) (bytevector-for-each . G5124) (string->regexp . G5123) (rxmatch . G5122) (regexp-replace-all . G5121) (hashtable-for-each . G5120) (readdir . G511f) (get-environment-variables . G511e) (get-environment-variable . G511d) (get-timeofday . G511c) (get-command-line . G511b) (sys-display . G511a) (source-info . G5119) (make-compiler-instruction . G5118) (make-instruction . G5117) (set-source-info! . G5116) (bignum? . G5115) (make-complex . G5114) (fasl-read . G5113) (fasl-write . G5112) (receive . G5111) (make-parameter . G28a9) (string-upcase . G5110) (string-titlecase . G510f) (string-normalize-nfkd . G510e) (string-normalize-nfkc . G510d) (string-normalize-nfd . G510c) (string-normalize-nfc . G510b) (string-foldcase . G510a) (string-downcase . G5109) (string-ci>? . G5108) (string-ci>=? . G5107) (string-ci=? . G5106) (string-ci<? . G5105) (string-ci<=? . G5104) (char-whitespace? . G5103) (char-upper-case? . G5102) (char-title-case? . G5101) (char-numeric? . G5100) (char-lower-case? . G50ff) (char-general-category . G50fe) (char-upcase . G50fd) (char-titlecase . G50fc) (char-foldcase . G50fb) (char-downcase . G50fa) (char-ci>? . G50f9) (char-ci>=? . G50f8) (char-ci=? . G50f7) (char-ci<? . G50f6) (char-ci<=? . G50f5) (char-alphabetic? . G50f4) (make-variable-transformer . G2e8d) (identifier? . G3184) (generate-temporaries . G316e) (free-identifier=? . G3170) (syntax->datum . G3188) (datum->syntax . G3186) (bound-identifier=? . G3172) (record-type-descriptor? . G50f3) (record-predicate . G50f2) (record-mutator . G50f1) (record-constructor . G50f0) (record-accessor . G50ef) (make-record-type-descriptor . G50ee) (make-record-constructor-descriptor . G50ed) (record? . G50ec) (record-type-uid . G50eb) (record-type-sealed? . G50ea) (record-type-parent . G50e9) (record-type-opaque? . G50e8) (record-type-name . G50e7) (record-type-generative? . G50e6) (record-type-field-names . G50e5) (record-rtd . G50e4) (record-field-mutable? . G50e3) (delete-file . G50e2) (file-exists? . G50e1) (vector-sort! . G50e0) (vector-sort . G50df) (list-sort . G50de) (symbol-hash . G50dd) (string-ci-hash . G50dc) (string-hash . G50db) (equal-hash . G50da) (hashtable-equivalence-function . G50d9) (make-hashtable . G50d8) (hashtable-hash-function . G50d7) (make-eqv-hashtable . G50d6) (make-eq-hashtable . G50d5) (hashtable? . G50d4) (hashtable-update! . G50d3) (hashtable-size . G50d2) (hashtable-set! . G50d1) (hashtable-ref . G50d0) (hashtable-mutable? . G50cf) (hashtable-keys . G50ce) (hashtable-entries . G50cd) (hashtable-delete! . G50cc) (hashtable-copy . G50cb) (hashtable-contains? . G50ca) (hashtable-clear! . G50c9) (call-with-output-file . G50c8) (call-with-input-file . G50c7) (write-char . G50c6) (write . G50c5) (with-output-to-file . G50c4) (with-input-from-file . G50c3) (read-char . G50c2) (read . G50c1) (peek-char . G50c0) (open-output-file . G50bf) (open-input-file . G50be) (newline . G50bd) (display . G50bc) (close-output-port . G50bb) (close-input-port . G50ba) (eof-object? . G50b9) (eof-object . G50b8) (current-error-port . G50b7) (current-output-port . G50b6) (current-input-port . G50b5) (output-port? . G50b4) (input-port? . G50b3) (utf-8-codec . G50b2) (utf-16-codec . G50b1) (transcoder-error-handling-mode . G50b0) (transcoder-eol-style . G50af) (transcoder-codec . G50ae) (transcoded-port . G50ad) (textual-port? . G50ac) (string->bytevector . G50ab) (standard-output-port . G50aa) (standard-input-port . G50a9) (standard-error-port . G50a8) (set-port-position! . G50a7) (put-u8 . G50a6) (put-string . G50a5) (put-datum . G50a4) (put-char . G50a3) (put-bytevector . G50a2) (port? . G50a1) (port-transcoder . G50a0) (port-position . G509f) (port-has-set-port-position!? . G509e) (port-has-port-position? . G509d) (port-eof? . G509c) (output-port-buffer-mode . G509b) (open-string-output-port . G509a) (open-string-input-port . G5099) (open-file-output-port . G5098) (open-file-input/output-port . G5097) (open-file-input-port . G5096) (open-bytevector-output-port . G5095) (open-bytevector-input-port . G5094) (native-transcoder . G5093) (native-eol-style . G5092) (make-transcoder . G5091) (latin-1-codec . G5090) (make-i/o-write-error . G4cd1) (make-i/o-read-error . G4cbd) (make-i/o-port-error . G4d68) (make-i/o-invalid-position-error . G4ce6) (make-i/o-filename-error . G4cff) (make-i/o-file-protection-error . G4d17) (make-i/o-file-is-read-only-error . G4d2b) (make-i/o-file-does-not-exist-error . G4d53) (make-i/o-file-already-exists-error . G4d3f) (make-i/o-error . G4ca9) (make-i/o-encoding-error . G4d95) (make-i/o-decoding-error . G4d80) (make-custom-textual-output-port . G508f) (make-custom-textual-input/output-port . G508e) (make-custom-textual-input-port . G508d) (make-custom-binary-output-port . G508c) (make-custom-binary-input/output-port . G508b) (make-custom-binary-input-port . G508a) (make-bytevector . G5089) (lookahead-u8 . G5088) (lookahead-char . G5087) (i/o-write-error? . G4cd3) (i/o-read-error? . G4cbf) (i/o-port-error? . G4d6c) (i/o-invalid-position-error? . G4cea) (i/o-filename-error? . G4d03) (i/o-file-protection-error? . G4d19) (i/o-file-is-read-only-error? . G4d2d) (i/o-file-does-not-exist-error? . G4d55) (i/o-file-already-exists-error? . G4d41) (i/o-error? . G4cab) (i/o-error-port . G4d6e) (i/o-error-filename . G4d05) (i/o-encoding-error? . G4d99) (i/o-encoding-error-char . G4d9b) (i/o-decoding-error? . G4d82) (get-u8 . G5086) (get-string-n! . G5085) (get-string-n . G5084) (get-string-all . G5083) (get-line . G5082) (get-datum . G5081) (get-char . G5080) (get-bytevector-some . G507f) (get-bytevector-n! . G507e) (get-bytevector-n . G507d) (get-bytevector-all . G507c) (flush-output-port . G507b) (close-port . G507a) (scheme-report-environment . G315c) (quotient . G5079) (null-environment . G315a) (remainder . G5078) (modulo . G5077) (inexact->exact . G5076) (force . G5075) (exact->inexact . G5074) (exit . G5073) (command-line . G4df4) (string-fill! . G5072) (string-set! . G5071) (set-cdr! . G5070) (set-car! . G506f) (remove . G506e) (remv . G506d) (remp . G506c) (remq . G506b) (partition . G506a) (memv . G5069) (memq . G5068) (memp . G5067) (member . G5066) (exists . G5065) (for-all . G5064) (fold-right . G5063) (fold-left . G5062) (find . G5061) (filter . G5060) (cons* . G505f) (assv . G505e) (assq . G505d) (assp . G505c) (assoc . G505b) (call-with-string-output-port . G505a) (call-with-port . G5059) (call-with-bytevector-output-port . G5058) (bytevector->string . G5057) (buffer-mode? . G5056) (binary-port? . G5055) (with-exception-handler . G5054) (raise-continuable . G5053) (raise . G5052) (eval . G3160) (environment . G3158) (make-enumeration . G5051) (enum-set=? . G5050) (enum-set-universe . G504f) (enum-set-union . G504e) (enum-set-subset? . G504d) (enum-set-projection . G504c) (enum-set-member? . G504b) (enum-set-intersection . G504a) (enum-set-indexer . G5049) (enum-set-difference . G5048) (enum-set-constructor . G5047) (enum-set-complement . G5046) (enum-set->list . G5045) (who-condition? . G4b93) (warning? . G4b13) (violation? . G4b4f) (undefined-violation? . G4c03) (syntax-violation? . G4beb) (syntax-violation-subform . G4bef) (syntax-violation-form . G4bed) (syntax-violation . G3182) (simple-conditions . G5044) (serious-condition? . G4b27) (non-continuable-violation? . G4ba9) (message-condition? . G4afd) (make-who-condition . G4b8f) (make-warning . G4b11) (make-violation . G4b4d) (make-undefined-violation . G4c01) (make-syntax-violation . G4be5) (make-serious-condition . G4b25) (make-non-continuable-violation . G4ba7) (make-message-condition . G4af9) (make-lexical-violation . G4bcf) (make-irritants-condition . G4b76) (make-implementation-restriction-violation . G4bbb) (make-error . G4b39) (make-assertion-violation . G4b61) (lexical-violation? . G4bd1) (irritants-condition? . G4b7a) (implementation-restriction-violation? . G4bbd) (error? . G4b3b) (condition-who . G4b95) (condition-predicate . G5043) (condition-message . G4aff) (condition-irritants . G4b7c) (condition-accessor . G5042) (condition . G5041) (assertion-violation? . G4b63) (condition? . G5040) (utf32->string . G503f) (utf16->string . G503e) (utf8->string . G503d) (uint-list->bytevector . G503c) (u8-list->bytevector . G503b) (string->utf8 . G503a) (string->utf32 . G5039) (string->utf16 . G5038) (sint-list->bytevector . G5037) (native-endianness . G5036) (bytevector? . G5035) (bytevector=? . G5034) (bytevector-uint-set! . G5033) (bytevector-uint-ref . G5032) (bytevector-u8-set! . G5031) (bytevector-u8-ref . G5030) (bytevector-u64-set! . G502f) (bytevector-u64-ref . G502e) (bytevector-u64-native-set! . G502d) (bytevector-u64-native-ref . G502c) (bytevector-u32-set! . G502b) (bytevector-u32-ref . G502a) (bytevector-u32-native-set! . G5029) (bytevector-u32-native-ref . G5028) (bytevector-u16-set! . G5027) (bytevector-u16-ref . G5026) (bytevector-u16-native-set! . G5025) (bytevector-u16-native-ref . G5024) (bytevector-sint-set! . G5023) (bytevector-sint-ref . G5022) (bytevector-s8-set! . G5021) (bytevector-s8-ref . G5020) (bytevector-s64-set! . G501f) (bytevector-s64-ref . G501e) (bytevector-s64-native-set! . G501d) (bytevector-s64-native-ref . G501c) (bytevector-s32-set! . G501b) (bytevector-s32-ref . G501a) (bytevector-s32-native-set! . G5019) (bytevector-s32-native-ref . G5018) (bytevector-s16-set! . G5017) (bytevector-s16-ref . G5016) (bytevector-s16-native-set! . G5015) (bytevector-s16-native-ref . G5014) (bytevector-length . G5013) (bytevector-ieee-single-ref . G5012) (bytevector-ieee-single-set! . G5011) (bytevector-ieee-single-native-set! . G5010) (bytevector-ieee-single-native-ref . G500f) (bytevector-ieee-double-set! . G500e) (bytevector-ieee-double-ref . G500d) (bytevector-ieee-double-native-set! . G500c) (bytevector-ieee-double-native-ref . G500b) (bytevector-fill! . G500a) (bytevector-copy! . G5009) (bytevector-copy . G5008) (bytevector->uint-list . G5007) (bytevector->u8-list . G5006) (bytevector->sint-list . G5005) (no-nans-violation? . G4c2b) (no-infinities-violation? . G4c17) (make-no-nans-violation . G4c29) (make-no-infinities-violation . G4c15) (real->flonum . G5004) (flzero? . G5003) (fltruncate . G5002) (fltan . G5001) (flsqrt . G5000) (flsin . G4fff) (flround . G4ffe) (flpositive? . G4ffd) (flonum? . G4ffc) (flodd? . G4ffb) (flnumerator . G4ffa) (flnegative? . G4ff9) (flnan? . G4ff8) (flmod0 . G4ff7) (flmod . G4ff6) (flmin . G4ff5) (flmax . G4ff4) (fllog . G4ff3) (flinteger? . G4ff2) (flinfinite? . G4ff1) (flfloor . G4ff0) (flfinite? . G4fef) (flexpt . G4fee) (flexp . G4fed) (fleven? . G4fec) (fldiv0-and-mod0 . G4feb) (fldiv0 . G4fea) (fldiv-and-mod . G4fe9) (fldiv . G4fe8) (fldenominator . G4fe7) (flcos . G4fe6) (flceiling . G4fe5) (flatan . G4fe4) (flasin . G4fe3) (flacos . G4fe2) (flabs . G4fe1) (fl>? . G4fe0) (fl>=? . G4fdf) (fl=? . G4fde) (fl<? . G4fdd) (fl<=? . G4fdc) (fl/ . G4fdb) (fl- . G4fda) (fl+ . G4fd9) (fl* . G4fd8) (fixnum->flonum . G4fd7) (fxzero? . G4fd6) (fxxor . G4fd5) (fxrotate-bit-field . G4fd4) (fxreverse-bit-field . G4fd3) (fxpositive? . G4fd2) (fxodd? . G4fd1) (fxnot . G4fd0) (fxnegative? . G4fcf) (fxmod0 . G4fce) (fxmod . G4fcd) (fxmin . G4fcc) (fxmax . G4fcb) (fxlength . G4fca) (fxior . G4fc9) (fxif . G4fc8) (fxfirst-bit-set . G4fc7) (fxeven? . G4fc6) (fxdiv0-and-mod0 . G4fc5) (fxdiv0 . G4fc4) (fxdiv-and-mod . G4fc3) (fxdiv . G4fc2) (fxcopy-bit-field . G4fc1) (fxcopy-bit . G4fc0) (fxbit-set? . G4fbf) (fxbit-field . G4fbe) (fxbit-count . G4fbd) (fxarithmetic-shift-right . G4fbc) (fxarithmetic-shift-left . G4fbb) (fxarithmetic-shift . G4fba) (fxand . G4fb9) (fx>? . G4fb8) (fx>=? . G4fb7) (fx=? . G4fb6) (fx<? . G4fb5) (fx<=? . G4fb4) (fx-/carry . G4fb3) (fx- . G4fb2) (fx+/carry . G4fb1) (fx+ . G4fb0) (fx*/carry . G4faf) (fx* . G4fae) (greatest-fixnum . G4fad) (least-fixnum . G4fac) (fixnum-width . G4fab) (fixnum? . G4faa) (bitwise-rotate-bit-field . G4fa9) (bitwise-reverse-bit-field . G4fa8) (bitwise-length . G4fa7) (bitwise-if . G4fa6) (bitwise-first-bit-set . G4fa5) (bitwise-copy-bit-field . G4fa4) (bitwise-copy-bit . G4fa3) (bitwise-bit-set? . G4fa2) (bitwise-bit-field . G4fa1) (bitwise-bit-count . G4fa0) (bitwise-xor . G4f9f) (bitwise-ior . G4f9e) (bitwise-and . G4f9d) (bitwise-not . G4f9c) (bitwise-arithmetic-shift-right . G4f9b) (bitwise-arithmetic-shift-left . G4f9a) (bitwise-arithmetic-shift . G4f99) (zero? . G4f98) (vector? . G4f97) (vector-set! . G4f96) (vector-ref . G4f95) (vector-map . G4f94) (vector-length . G4f93) (vector-for-each . G4f92) (vector-fill! . G4f91) (vector->list . G4f90) (vector . G4f8f) (values . G4f8e) (truncate . G4f8d) (tan . G4f8c) (symbol? . G4f8b) (symbol=? . G4f8a) (symbol->string . G4f89) (substring . G4f88) (string? . G4f87) (string>? . G4f86) (string>=? . G4f85) (string=? . G4f84) (string<? . G4f83) (string<=? . G4f82) (string-ref . G4f81) (string-length . G4f80) (string-for-each . G4f7f) (string-copy . G4f7e) (string-append . G4f7d) (string->symbol . G4f7c) (string->number . G4f7b) (string->list . G4f7a) (string . G4f79) (sqrt . G4f78) (sin . G4f77) (round . G4f76) (reverse . G4f75) (real? . G4f74) (real-valued? . G4f73) (real-part . G4f72) (rationalize . G4f71) (rational? . G4f70) (rational-valued? . G4f6f) (procedure? . G4f6e) (positive? . G4f6d) (pair? . G4f6c) (odd? . G4f6b) (numerator . G4f6a) (number? . G4f69) (number->string . G4f68) (null? . G4f67) (not . G4f66) (negative? . G4f65) (nan? . G4f64) (min . G4f63) (max . G4f62) (map . G4f61) (make-vector . G4f60) (make-string . G4f5f) (make-rectangular . G4f5e) (make-polar . G4f5d) (magnitude . G4f5c) (log . G4f5b) (list? . G4f5a) (list-tail . G4f59) (list-ref . G4f58) (list->vector . G4f57) (list->string . G4f56) (list . G4f55) (length . G4f54) (lcm . G4f53) (integer? . G4f52) (integer-valued? . G4f51) (integer->char . G4f50) (infinite? . G4f4f) (inexact? . G4f4e) (inexact . G4f4d) (imag-part . G4f4c) (gcd . G4f4b) (for-each . G4f4a) (floor . G4f49) (finite? . G4f48) (expt . G4f47) (exp . G4f46) (exact? . G4f45) (exact-integer-sqrt . G4f44) (exact . G4f43) (even? . G4f42) (error . G4f41) (eqv? . G4f40) (equal? . G4f3f) (eq? . G4f3e) (dynamic-wind . G4f3d) (div0-and-mod0 . G4f3c) (mod0 . G4f3b) (div0 . G4f3a) (div-and-mod . G4f39) (mod . G4f38) (div . G4f37) (denominator . G4f36) (cos . G4f35) (cons . G4f34) (complex? . G4f33) (char? . G4f32) (char>? . G4f31) (char>=? . G4f30) (char=? . G4f2f) (char<? . G4f2e) (char<=? . G4f2d) (char->integer . G4f2c) (ceiling . G4f2b) (call-with-values . G4f2a) (call/cc . G4f29) (call-with-current-continuation . G4f28) (cddddr . G4f27) (cdddar . G4f26) (cddadr . G4f25) (cddaar . G4f24) (cdaddr . G4f23) (cdadar . G4f22) (cdaadr . G4f21) (cdaaar . G4f20) (cadddr . G4f1f) (caddar . G4f1e) (cadadr . G4f1d) (cadaar . G4f1c) (caaddr . G4f1b) (caadar . G4f1a) (caaadr . G4f19) (caaaar . G4f18) (cdddr . G4f17) (cddar . G4f16) (cdadr . G4f15) (cdaar . G4f14) (caddr . G4f13) (cadar . G4f12) (caadr . G4f11) (caaar . G4f10) (cddr . G4f0f) (cdar . G4f0e) (cadr . G4f0d) (caar . G4f0c) (cdr . G4f0b) (car . G4f0a) (boolean? . G4f09) (boolean=? . G4f08) (atan . G4f07) (assertion-violation . G4f06) (asin . G4f05) (apply . G4f04) (append . G4f03) (angle . G4f02) (acos . G4f01) (abs . G4f00) (/ . G4eff) (* . G4efe) (- . G4efd) (+ . G4efc) (>= . G4efb) (> . G4efa) (= . G4ef9) (<= . G4ef8) (< . G4ef7) (library . G4ef6) (export . G4ef5) (&no-nans . G4ef4) (&no-infinities . G4ef3) (&i/o-encoding . G4ef2) (&i/o-decoding . G4ef1) (&i/o-port . G4ef0) (&i/o-file-does-not-exist . G4eef) (&i/o-file-already-exists . G4eee) (&i/o-file-is-read-only . G4eed) (&i/o-file-protection . G4eec) (&i/o-filename . G4eeb) (&i/o-invalid-position . G4eea) (&i/o-write . G4ee9) (&i/o-read . G4ee8) (&i/o . G4ee7) (&undefined . G4ee6) (&syntax . G4ee5) (&lexical . G4ee4) (&implementation-restriction . G4ee3) (&non-continuable . G4ee2) (&who . G4ee1) (&irritants . G4ee0) (&assertion . G4edf) (&violation . G4ede) (&error . G4edd) (&serious . G4edc) (&warning . G4edb) (&message . G4eda) (&condition . G4ed9) (define-condition-type . G4ed8) (define-enumeration . G4ed7) (define-record-type . G4ed6) (parent-rtd . G4ed5) (nongenerative . G4ed4) (opaque . G4ed3) (sealed . G4ed2) (protocol . G4ed1) (parent . G4ed0) (immutable . G4ecf) (mutable . G4ece) (fields . G4ecd) (error-handling-mode . G4ecc) (file-options . G4ecb) (buffer-mode . G4eca) (eol-style . G4ec9) (guard . G4ec8) (trace-define . G4ec7) (trace-lambda . G4ec6) (unsyntax-splicing . G4ec5) (unsyntax . G4ec4) (unquote-splicing . G4ec3) (unquote . G4ec2) (_ . G4ec1) (else . G4ec0) (=> . G4ebf) (... . G4ebe) (assert . G4ebd) (endianness . G4ebc) (delay . G4ebb) (time . G4eba) (or . G4eb9) (and . G4eb8) (do . G4eb7) (cond . G4eb6) (let* . G4eb5) (let . G4eb4) (let*-values . G4eb3) (let-values . G4eb2) (identifier-syntax . G4eb1) (with-syntax . G4eb0) (quasisyntax . G4eaf) (quasiquote . G4eae) (syntax-rules . G4ead) (include . G4eac) (define-struct . G4eab) (record-constructor-descriptor . G4eaa) (record-type-descriptor . G4ea9) (case . G4ea8) (parameterize . G4ea7) (unless . G4ea6) (when . G4ea5) (if . G4ea4) (letrec* . G4ea3) (letrec . G4ea2) (type-descriptor . G4ea1) (case-lambda . G4ea0) (lambda . G4e9f) (syntax . G4e9e) (syntax-case . G4e9d) (quote . G4e9c) (foreign-call . G4e9b) (letrec-syntax . G4e9a) (let-syntax . G4e99) (set! . G4e98) (import . G4e97) (begin . G4e96) (module . G4e95) (define-syntax . G4e94) (define . G4e93)) '((G5194 core-prim . &no-nans-rcd) (G5193 core-prim . &no-nans-rtd) (G5192 core-prim . &no-infinities-rcd) (G5191 core-prim . &no-infinities-rtd) (G5190 core-prim . &i/o-encoding-rcd) (G518f core-prim . &i/o-encoding-rtd) (G518e core-prim . &i/o-decoding-rcd) (G518d core-prim . &i/o-decoding-rtd) (G518c core-prim . &i/o-port-rcd) (G518b core-prim . &i/o-port-rtd) (G518a core-prim . &i/o-file-does-not-exist-rcd) (G5189 core-prim . &i/o-file-does-not-exist-rtd) (G5188 core-prim . &i/o-file-already-exists-rcd) (G5187 core-prim . &i/o-file-already-exists-rtd) (G5186 core-prim . &i/o-file-is-read-only-rcd) (G5185 core-prim . &i/o-file-is-read-only-rtd) (G5184 core-prim . &i/o-file-protection-rcd) (G5183 core-prim . &i/o-file-protection-rtd) (G5182 core-prim . &i/o-filename-rcd) (G5181 core-prim . &i/o-filename-rtd) (G5180 core-prim . &i/o-invalid-position-rcd) (G517f core-prim . &i/o-invalid-position-rtd) (G517e core-prim . &i/o-write-rcd) (G517d core-prim . &i/o-write-rtd) (G517c core-prim . &i/o-read-rcd) (G517b core-prim . &i/o-read-rtd) (G517a core-prim . &i/o-rcd) (G5179 core-prim . &i/o-rtd) (G5178 core-prim . &undefined-rcd) (G5177 core-prim . &undefined-rtd) (G5176 core-prim . &syntax-rcd) (G5175 core-prim . &syntax-rtd) (G5174 core-prim . &lexical-rcd) (G5173 core-prim . &lexical-rtd) (G5172 core-prim . &implementation-restriction-rcd) (G5171 core-prim . &implementation-restriction-rtd) (G5170 core-prim . &non-continuable-rcd) (G516f core-prim . &non-continuable-rtd) (G516e core-prim . &who-rcd) (G516d core-prim . &who-rtd) (G516c core-prim . &irritants-rcd) (G516b core-prim . &irritants-rtd) (G516a core-prim . &assertion-rcd) (G5169 core-prim . &assertion-rtd) (G5168 core-prim . &violation-rcd) (G5167 core-prim . &violation-rtd) (G5166 core-prim . &error-rcd) (G5165 core-prim . &error-rtd) (G5164 core-prim . &serious-rcd) (G5163 core-prim . &serious-rtd) (G5162 core-prim . &warning-rcd) (G5161 core-prim . &warning-rtd) (G5160 core-prim . &message-rcd) (G515f core-prim . &message-rtd) (G515e core-prim . &condition-rcd) (G515d core-prim . &condition-rtd) (G317c core-prim . syntax-error) (G308f core-prim . syntax-dispatch) (G515c core-prim . pretty-print) (G515b core-prim . eval-core) (G515a core-prim . set-symbol-value!) (G5159 core-prim . symbol-value) (G5158 core-prim . gensym) (G5157 core-prim . void) (G4dfa core-prim . load) (G318e core-prim . interaction-environment) (G5156 core-prim . char-ready?) (G5155 core-prim . regexp?) (G5154 core-prim . read-line) (G5153 core-prim . dotted-list?) (G5152 core-prim . circular-list?) (G5151 core-prim . proper-list?) (G5150 core-prim . circular-list) (G514f core-prim . last) (G514e core-prim . last-pair) (G514d core-prim . not-pair?) (G514c core-prim . split-at!) (G514b core-prim . split-at) (G514a core-prim . list=) (G5149 core-prim . list-copy) (G5148 core-prim . list-tabulate) (G5147 core-prim . make-list) (G5146 core-prim . xcons) (G5145 core-prim . tenth) (G5144 core-prim . ninth) (G5143 core-prim . eighth) (G5142 core-prim . seventh) (G5141 core-prim . sixth) (G5140 core-prim . fifth) (G513f core-prim . drop-right!) (G513e core-prim . drop-right) (G513d core-prim . take-right) (G513c core-prim . take!) (G513b core-prim . drop) (G513a core-prim . take) (G5139 core-prim . car+cdr) (G5138 core-prim . third) (G5137 core-prim . second) (G5136 core-prim . first) (G5135 core-prim . iota) (G5134 core-prim . every) (G5133 core-prim . assoc-ref) (G5132 core-prim . alist-cons) (G5131 core-prim . print) (G5130 core-prim . format) (G512f core-prim . standard-library-path) (G512e core-prim . file-newer?) (G512d core-prim . stat-mtime) (G512c core-prim . current-directory) (G512b core-prim . write-to-file) (G512a core-prim . file->list) (G5129 core-prim . file->string) (G5128 core-prim . digit->integer) (G5127 core-prim . call-with-string-input-port) (G5126 core-prim . call-with-string-io) (G5125 core-prim . string-split) (G5124 core-prim . bytevector-for-each) (G5123 core-prim . string->regexp) (G5122 core-prim . rxmatch) (G5121 core-prim . regexp-replace-all) (G5120 core-prim . hashtable-for-each) (G511f core-prim . readdir) (G511e core-prim . get-environment-variables) (G511d core-prim . get-environment-variable) (G511c core-prim . get-timeofday) (G511b core-prim . get-command-line) (G511a core-prim . sys-display) (G5119 core-prim . source-info) (G5118 core-prim . make-compiler-instruction) (G5117 core-prim . make-instruction) (G5116 core-prim . set-source-info!) (G5115 core-prim . bignum?) (G5114 core-prim . make-complex) (G5113 core-prim . fasl-read) (G5112 core-prim . fasl-write) (G5111 core-prim . receive) (G28a9 core-prim . make-parameter) (G5110 core-prim . string-upcase) (G510f core-prim . string-titlecase) (G510e core-prim . string-normalize-nfkd) (G510d core-prim . string-normalize-nfkc) (G510c core-prim . string-normalize-nfd) (G510b core-prim . string-normalize-nfc) (G510a core-prim . string-foldcase) (G5109 core-prim . string-downcase) (G5108 core-prim . string-ci>?) (G5107 core-prim . string-ci>=?) (G5106 core-prim . string-ci=?) (G5105 core-prim . string-ci<?) (G5104 core-prim . string-ci<=?) (G5103 core-prim . char-whitespace?) (G5102 core-prim . char-upper-case?) (G5101 core-prim . char-title-case?) (G5100 core-prim . char-numeric?) (G50ff core-prim . char-lower-case?) (G50fe core-prim . char-general-category) (G50fd core-prim . char-upcase) (G50fc core-prim . char-titlecase) (G50fb core-prim . char-foldcase) (G50fa core-prim . char-downcase) (G50f9 core-prim . char-ci>?) (G50f8 core-prim . char-ci>=?) (G50f7 core-prim . char-ci=?) (G50f6 core-prim . char-ci<?) (G50f5 core-prim . char-ci<=?) (G50f4 core-prim . char-alphabetic?) (G2e8d core-prim . make-variable-transformer) (G3184 core-prim . identifier?) (G316e core-prim . generate-temporaries) (G3170 core-prim . free-identifier=?) (G3188 core-prim . syntax->datum) (G3186 core-prim . datum->syntax) (G3172 core-prim . bound-identifier=?) (G50f3 core-prim . record-type-descriptor?) (G50f2 core-prim . record-predicate) (G50f1 core-prim . record-mutator) (G50f0 core-prim . record-constructor) (G50ef core-prim . record-accessor) (G50ee core-prim . make-record-type-descriptor) (G50ed core-prim . make-record-constructor-descriptor) (G50ec core-prim . record?) (G50eb core-prim . record-type-uid) (G50ea core-prim . record-type-sealed?) (G50e9 core-prim . record-type-parent) (G50e8 core-prim . record-type-opaque?) (G50e7 core-prim . record-type-name) (G50e6 core-prim . record-type-generative?) (G50e5 core-prim . record-type-field-names) (G50e4 core-prim . record-rtd) (G50e3 core-prim . record-field-mutable?) (G50e2 core-prim . delete-file) (G50e1 core-prim . file-exists?) (G50e0 core-prim . vector-sort!) (G50df core-prim . vector-sort) (G50de core-prim . list-sort) (G50dd core-prim . symbol-hash) (G50dc core-prim . string-ci-hash) (G50db core-prim . string-hash) (G50da core-prim . equal-hash) (G50d9 core-prim . hashtable-equivalence-function) (G50d8 core-prim . make-hashtable) (G50d7 core-prim . hashtable-hash-function) (G50d6 core-prim . make-eqv-hashtable) (G50d5 core-prim . make-eq-hashtable) (G50d4 core-prim . hashtable?) (G50d3 core-prim . hashtable-update!) (G50d2 core-prim . hashtable-size) (G50d1 core-prim . hashtable-set!) (G50d0 core-prim . hashtable-ref) (G50cf core-prim . hashtable-mutable?) (G50ce core-prim . hashtable-keys) (G50cd core-prim . hashtable-entries) (G50cc core-prim . hashtable-delete!) (G50cb core-prim . hashtable-copy) (G50ca core-prim . hashtable-contains?) (G50c9 core-prim . hashtable-clear!) (G50c8 core-prim . call-with-output-file) (G50c7 core-prim . call-with-input-file) (G50c6 core-prim . write-char) (G50c5 core-prim . write) (G50c4 core-prim . with-output-to-file) (G50c3 core-prim . with-input-from-file) (G50c2 core-prim . read-char) (G50c1 core-prim . read) (G50c0 core-prim . peek-char) (G50bf core-prim . open-output-file) (G50be core-prim . open-input-file) (G50bd core-prim . newline) (G50bc core-prim . display) (G50bb core-prim . close-output-port) (G50ba core-prim . close-input-port) (G50b9 core-prim . eof-object?) (G50b8 core-prim . eof-object) (G50b7 core-prim . current-error-port) (G50b6 core-prim . current-output-port) (G50b5 core-prim . current-input-port) (G50b4 core-prim . output-port?) (G50b3 core-prim . input-port?) (G50b2 core-prim . utf-8-codec) (G50b1 core-prim . utf-16-codec) (G50b0 core-prim . transcoder-error-handling-mode) (G50af core-prim . transcoder-eol-style) (G50ae core-prim . transcoder-codec) (G50ad core-prim . transcoded-port) (G50ac core-prim . textual-port?) (G50ab core-prim . string->bytevector) (G50aa core-prim . standard-output-port) (G50a9 core-prim . standard-input-port) (G50a8 core-prim . standard-error-port) (G50a7 core-prim . set-port-position!) (G50a6 core-prim . put-u8) (G50a5 core-prim . put-string) (G50a4 core-prim . put-datum) (G50a3 core-prim . put-char) (G50a2 core-prim . put-bytevector) (G50a1 core-prim . port?) (G50a0 core-prim . port-transcoder) (G509f core-prim . port-position) (G509e core-prim . port-has-set-port-position!?) (G509d core-prim . port-has-port-position?) (G509c core-prim . port-eof?) (G509b core-prim . output-port-buffer-mode) (G509a core-prim . open-string-output-port) (G5099 core-prim . open-string-input-port) (G5098 core-prim . open-file-output-port) (G5097 core-prim . open-file-input/output-port) (G5096 core-prim . open-file-input-port) (G5095 core-prim . open-bytevector-output-port) (G5094 core-prim . open-bytevector-input-port) (G5093 core-prim . native-transcoder) (G5092 core-prim . native-eol-style) (G5091 core-prim . make-transcoder) (G5090 core-prim . latin-1-codec) (G4cd1 core-prim . make-i/o-write-error) (G4cbd core-prim . make-i/o-read-error) (G4d68 core-prim . make-i/o-port-error) (G4ce6 core-prim . make-i/o-invalid-position-error) (G4cff core-prim . make-i/o-filename-error) (G4d17 core-prim . make-i/o-file-protection-error) (G4d2b core-prim . make-i/o-file-is-read-only-error) (G4d53 core-prim . make-i/o-file-does-not-exist-error) (G4d3f core-prim . make-i/o-file-already-exists-error) (G4ca9 core-prim . make-i/o-error) (G4d95 core-prim . make-i/o-encoding-error) (G4d80 core-prim . make-i/o-decoding-error) (G508f core-prim . make-custom-textual-output-port) (G508e core-prim . make-custom-textual-input/output-port) (G508d core-prim . make-custom-textual-input-port) (G508c core-prim . make-custom-binary-output-port) (G508b core-prim . make-custom-binary-input/output-port) (G508a core-prim . make-custom-binary-input-port) (G5089 core-prim . make-bytevector) (G5088 core-prim . lookahead-u8) (G5087 core-prim . lookahead-char) (G4cd3 core-prim . i/o-write-error?) (G4cbf core-prim . i/o-read-error?) (G4d6c core-prim . i/o-port-error?) (G4cea core-prim . i/o-invalid-position-error?) (G4d03 core-prim . i/o-filename-error?) (G4d19 core-prim . i/o-file-protection-error?) (G4d2d core-prim . i/o-file-is-read-only-error?) (G4d55 core-prim . i/o-file-does-not-exist-error?) (G4d41 core-prim . i/o-file-already-exists-error?) (G4cab core-prim . i/o-error?) (G4d6e core-prim . i/o-error-port) (G4d05 core-prim . i/o-error-filename) (G4d99 core-prim . i/o-encoding-error?) (G4d9b core-prim . i/o-encoding-error-char) (G4d82 core-prim . i/o-decoding-error?) (G5086 core-prim . get-u8) (G5085 core-prim . get-string-n!) (G5084 core-prim . get-string-n) (G5083 core-prim . get-string-all) (G5082 core-prim . get-line) (G5081 core-prim . get-datum) (G5080 core-prim . get-char) (G507f core-prim . get-bytevector-some) (G507e core-prim . get-bytevector-n!) (G507d core-prim . get-bytevector-n) (G507c core-prim . get-bytevector-all) (G507b core-prim . flush-output-port) (G507a core-prim . close-port) (G315c core-prim . scheme-report-environment) (G5079 core-prim . quotient) (G315a core-prim . null-environment) (G5078 core-prim . remainder) (G5077 core-prim . modulo) (G5076 core-prim . inexact->exact) (G5075 core-prim . force) (G5074 core-prim . exact->inexact) (G5073 core-prim . exit) (G4df4 core-prim . command-line) (G5072 core-prim . string-fill!) (G5071 core-prim . string-set!) (G5070 core-prim . set-cdr!) (G506f core-prim . set-car!) (G506e core-prim . remove) (G506d core-prim . remv) (G506c core-prim . remp) (G506b core-prim . remq) (G506a core-prim . partition) (G5069 core-prim . memv) (G5068 core-prim . memq) (G5067 core-prim . memp) (G5066 core-prim . member) (G5065 core-prim . exists) (G5064 core-prim . for-all) (G5063 core-prim . fold-right) (G5062 core-prim . fold-left) (G5061 core-prim . find) (G5060 core-prim . filter) (G505f core-prim . cons*) (G505e core-prim . assv) (G505d core-prim . assq) (G505c core-prim . assp) (G505b core-prim . assoc) (G505a core-prim . call-with-string-output-port) (G5059 core-prim . call-with-port) (G5058 core-prim . call-with-bytevector-output-port) (G5057 core-prim . bytevector->string) (G5056 core-prim . buffer-mode?) (G5055 core-prim . binary-port?) (G5054 core-prim . with-exception-handler) (G5053 core-prim . raise-continuable) (G5052 core-prim . raise) (G3160 core-prim . eval) (G3158 core-prim . environment) (G5051 core-prim . make-enumeration) (G5050 core-prim . enum-set=?) (G504f core-prim . enum-set-universe) (G504e core-prim . enum-set-union) (G504d core-prim . enum-set-subset?) (G504c core-prim . enum-set-projection) (G504b core-prim . enum-set-member?) (G504a core-prim . enum-set-intersection) (G5049 core-prim . enum-set-indexer) (G5048 core-prim . enum-set-difference) (G5047 core-prim . enum-set-constructor) (G5046 core-prim . enum-set-complement) (G5045 core-prim . enum-set->list) (G4b93 core-prim . who-condition?) (G4b13 core-prim . warning?) (G4b4f core-prim . violation?) (G4c03 core-prim . undefined-violation?) (G4beb core-prim . syntax-violation?) (G4bef core-prim . syntax-violation-subform) (G4bed core-prim . syntax-violation-form) (G3182 core-prim . syntax-violation) (G5044 core-prim . simple-conditions) (G4b27 core-prim . serious-condition?) (G4ba9 core-prim . non-continuable-violation?) (G4afd core-prim . message-condition?) (G4b8f core-prim . make-who-condition) (G4b11 core-prim . make-warning) (G4b4d core-prim . make-violation) (G4c01 core-prim . make-undefined-violation) (G4be5 core-prim . make-syntax-violation) (G4b25 core-prim . make-serious-condition) (G4ba7 core-prim . make-non-continuable-violation) (G4af9 core-prim . make-message-condition) (G4bcf core-prim . make-lexical-violation) (G4b76 core-prim . make-irritants-condition) (G4bbb core-prim . make-implementation-restriction-violation) (G4b39 core-prim . make-error) (G4b61 core-prim . make-assertion-violation) (G4bd1 core-prim . lexical-violation?) (G4b7a core-prim . irritants-condition?) (G4bbd core-prim . implementation-restriction-violation?) (G4b3b core-prim . error?) (G4b95 core-prim . condition-who) (G5043 core-prim . condition-predicate) (G4aff core-prim . condition-message) (G4b7c core-prim . condition-irritants) (G5042 core-prim . condition-accessor) (G5041 core-prim . condition) (G4b63 core-prim . assertion-violation?) (G5040 core-prim . condition?) (G503f core-prim . utf32->string) (G503e core-prim . utf16->string) (G503d core-prim . utf8->string) (G503c core-prim . uint-list->bytevector) (G503b core-prim . u8-list->bytevector) (G503a core-prim . string->utf8) (G5039 core-prim . string->utf32) (G5038 core-prim . string->utf16) (G5037 core-prim . sint-list->bytevector) (G5036 core-prim . native-endianness) (G5035 core-prim . bytevector?) (G5034 core-prim . bytevector=?) (G5033 core-prim . bytevector-uint-set!) (G5032 core-prim . bytevector-uint-ref) (G5031 core-prim . bytevector-u8-set!) (G5030 core-prim . bytevector-u8-ref) (G502f core-prim . bytevector-u64-set!) (G502e core-prim . bytevector-u64-ref) (G502d core-prim . bytevector-u64-native-set!) (G502c core-prim . bytevector-u64-native-ref) (G502b core-prim . bytevector-u32-set!) (G502a core-prim . bytevector-u32-ref) (G5029 core-prim . bytevector-u32-native-set!) (G5028 core-prim . bytevector-u32-native-ref) (G5027 core-prim . bytevector-u16-set!) (G5026 core-prim . bytevector-u16-ref) (G5025 core-prim . bytevector-u16-native-set!) (G5024 core-prim . bytevector-u16-native-ref) (G5023 core-prim . bytevector-sint-set!) (G5022 core-prim . bytevector-sint-ref) (G5021 core-prim . bytevector-s8-set!) (G5020 core-prim . bytevector-s8-ref) (G501f core-prim . bytevector-s64-set!) (G501e core-prim . bytevector-s64-ref) (G501d core-prim . bytevector-s64-native-set!) (G501c core-prim . bytevector-s64-native-ref) (G501b core-prim . bytevector-s32-set!) (G501a core-prim . bytevector-s32-ref) (G5019 core-prim . bytevector-s32-native-set!) (G5018 core-prim . bytevector-s32-native-ref) (G5017 core-prim . bytevector-s16-set!) (G5016 core-prim . bytevector-s16-ref) (G5015 core-prim . bytevector-s16-native-set!) (G5014 core-prim . bytevector-s16-native-ref) (G5013 core-prim . bytevector-length) (G5012 core-prim . bytevector-ieee-single-ref) (G5011 core-prim . bytevector-ieee-single-set!) (G5010 core-prim . bytevector-ieee-single-native-set!) (G500f core-prim . bytevector-ieee-single-native-ref) (G500e core-prim . bytevector-ieee-double-set!) (G500d core-prim . bytevector-ieee-double-ref) (G500c core-prim . bytevector-ieee-double-native-set!) (G500b core-prim . bytevector-ieee-double-native-ref) (G500a core-prim . bytevector-fill!) (G5009 core-prim . bytevector-copy!) (G5008 core-prim . bytevector-copy) (G5007 core-prim . bytevector->uint-list) (G5006 core-prim . bytevector->u8-list) (G5005 core-prim . bytevector->sint-list) (G4c2b core-prim . no-nans-violation?) (G4c17 core-prim . no-infinities-violation?) (G4c29 core-prim . make-no-nans-violation) (G4c15 core-prim . make-no-infinities-violation) (G5004 core-prim . real->flonum) (G5003 core-prim . flzero?) (G5002 core-prim . fltruncate) (G5001 core-prim . fltan) (G5000 core-prim . flsqrt) (G4fff core-prim . flsin) (G4ffe core-prim . flround) (G4ffd core-prim . flpositive?) (G4ffc core-prim . flonum?) (G4ffb core-prim . flodd?) (G4ffa core-prim . flnumerator) (G4ff9 core-prim . flnegative?) (G4ff8 core-prim . flnan?) (G4ff7 core-prim . flmod0) (G4ff6 core-prim . flmod) (G4ff5 core-prim . flmin) (G4ff4 core-prim . flmax) (G4ff3 core-prim . fllog) (G4ff2 core-prim . flinteger?) (G4ff1 core-prim . flinfinite?) (G4ff0 core-prim . flfloor) (G4fef core-prim . flfinite?) (G4fee core-prim . flexpt) (G4fed core-prim . flexp) (G4fec core-prim . fleven?) (G4feb core-prim . fldiv0-and-mod0) (G4fea core-prim . fldiv0) (G4fe9 core-prim . fldiv-and-mod) (G4fe8 core-prim . fldiv) (G4fe7 core-prim . fldenominator) (G4fe6 core-prim . flcos) (G4fe5 core-prim . flceiling) (G4fe4 core-prim . flatan) (G4fe3 core-prim . flasin) (G4fe2 core-prim . flacos) (G4fe1 core-prim . flabs) (G4fe0 core-prim . fl>?) (G4fdf core-prim . fl>=?) (G4fde core-prim . fl=?) (G4fdd core-prim . fl<?) (G4fdc core-prim . fl<=?) (G4fdb core-prim . fl/) (G4fda core-prim . fl-) (G4fd9 core-prim . fl+) (G4fd8 core-prim . fl*) (G4fd7 core-prim . fixnum->flonum) (G4fd6 core-prim . fxzero?) (G4fd5 core-prim . fxxor) (G4fd4 core-prim . fxrotate-bit-field) (G4fd3 core-prim . fxreverse-bit-field) (G4fd2 core-prim . fxpositive?) (G4fd1 core-prim . fxodd?) (G4fd0 core-prim . fxnot) (G4fcf core-prim . fxnegative?) (G4fce core-prim . fxmod0) (G4fcd core-prim . fxmod) (G4fcc core-prim . fxmin) (G4fcb core-prim . fxmax) (G4fca core-prim . fxlength) (G4fc9 core-prim . fxior) (G4fc8 core-prim . fxif) (G4fc7 core-prim . fxfirst-bit-set) (G4fc6 core-prim . fxeven?) (G4fc5 core-prim . fxdiv0-and-mod0) (G4fc4 core-prim . fxdiv0) (G4fc3 core-prim . fxdiv-and-mod) (G4fc2 core-prim . fxdiv) (G4fc1 core-prim . fxcopy-bit-field) (G4fc0 core-prim . fxcopy-bit) (G4fbf core-prim . fxbit-set?) (G4fbe core-prim . fxbit-field) (G4fbd core-prim . fxbit-count) (G4fbc core-prim . fxarithmetic-shift-right) (G4fbb core-prim . fxarithmetic-shift-left) (G4fba core-prim . fxarithmetic-shift) (G4fb9 core-prim . fxand) (G4fb8 core-prim . fx>?) (G4fb7 core-prim . fx>=?) (G4fb6 core-prim . fx=?) (G4fb5 core-prim . fx<?) (G4fb4 core-prim . fx<=?) (G4fb3 core-prim . fx-/carry) (G4fb2 core-prim . fx-) (G4fb1 core-prim . fx+/carry) (G4fb0 core-prim . fx+) (G4faf core-prim . fx*/carry) (G4fae core-prim . fx*) (G4fad core-prim . greatest-fixnum) (G4fac core-prim . least-fixnum) (G4fab core-prim . fixnum-width) (G4faa core-prim . fixnum?) (G4fa9 core-prim . bitwise-rotate-bit-field) (G4fa8 core-prim . bitwise-reverse-bit-field) (G4fa7 core-prim . bitwise-length) (G4fa6 core-prim . bitwise-if) (G4fa5 core-prim . bitwise-first-bit-set) (G4fa4 core-prim . bitwise-copy-bit-field) (G4fa3 core-prim . bitwise-copy-bit) (G4fa2 core-prim . bitwise-bit-set?) (G4fa1 core-prim . bitwise-bit-field) (G4fa0 core-prim . bitwise-bit-count) (G4f9f core-prim . bitwise-xor) (G4f9e core-prim . bitwise-ior) (G4f9d core-prim . bitwise-and) (G4f9c core-prim . bitwise-not) (G4f9b core-prim . bitwise-arithmetic-shift-right) (G4f9a core-prim . bitwise-arithmetic-shift-left) (G4f99 core-prim . bitwise-arithmetic-shift) (G4f98 core-prim . zero?) (G4f97 core-prim . vector?) (G4f96 core-prim . vector-set!) (G4f95 core-prim . vector-ref) (G4f94 core-prim . vector-map) (G4f93 core-prim . vector-length) (G4f92 core-prim . vector-for-each) (G4f91 core-prim . vector-fill!) (G4f90 core-prim . vector->list) (G4f8f core-prim . vector) (G4f8e core-prim . values) (G4f8d core-prim . truncate) (G4f8c core-prim . tan) (G4f8b core-prim . symbol?) (G4f8a core-prim . symbol=?) (G4f89 core-prim . symbol->string) (G4f88 core-prim . substring) (G4f87 core-prim . string?) (G4f86 core-prim . string>?) (G4f85 core-prim . string>=?) (G4f84 core-prim . string=?) (G4f83 core-prim . string<?) (G4f82 core-prim . string<=?) (G4f81 core-prim . string-ref) (G4f80 core-prim . string-length) (G4f7f core-prim . string-for-each) (G4f7e core-prim . string-copy) (G4f7d core-prim . string-append) (G4f7c core-prim . string->symbol) (G4f7b core-prim . string->number) (G4f7a core-prim . string->list) (G4f79 core-prim . string) (G4f78 core-prim . sqrt) (G4f77 core-prim . sin) (G4f76 core-prim . round) (G4f75 core-prim . reverse) (G4f74 core-prim . real?) (G4f73 core-prim . real-valued?) (G4f72 core-prim . real-part) (G4f71 core-prim . rationalize) (G4f70 core-prim . rational?) (G4f6f core-prim . rational-valued?) (G4f6e core-prim . procedure?) (G4f6d core-prim . positive?) (G4f6c core-prim . pair?) (G4f6b core-prim . odd?) (G4f6a core-prim . numerator) (G4f69 core-prim . number?) (G4f68 core-prim . number->string) (G4f67 core-prim . null?) (G4f66 core-prim . not) (G4f65 core-prim . negative?) (G4f64 core-prim . nan?) (G4f63 core-prim . min) (G4f62 core-prim . max) (G4f61 core-prim . map) (G4f60 core-prim . make-vector) (G4f5f core-prim . make-string) (G4f5e core-prim . make-rectangular) (G4f5d core-prim . make-polar) (G4f5c core-prim . magnitude) (G4f5b core-prim . log) (G4f5a core-prim . list?) (G4f59 core-prim . list-tail) (G4f58 core-prim . list-ref) (G4f57 core-prim . list->vector) (G4f56 core-prim . list->string) (G4f55 core-prim . list) (G4f54 core-prim . length) (G4f53 core-prim . lcm) (G4f52 core-prim . integer?) (G4f51 core-prim . integer-valued?) (G4f50 core-prim . integer->char) (G4f4f core-prim . infinite?) (G4f4e core-prim . inexact?) (G4f4d core-prim . inexact) (G4f4c core-prim . imag-part) (G4f4b core-prim . gcd) (G4f4a core-prim . for-each) (G4f49 core-prim . floor) (G4f48 core-prim . finite?) (G4f47 core-prim . expt) (G4f46 core-prim . exp) (G4f45 core-prim . exact?) (G4f44 core-prim . exact-integer-sqrt) (G4f43 core-prim . exact) (G4f42 core-prim . even?) (G4f41 core-prim . error) (G4f40 core-prim . eqv?) (G4f3f core-prim . equal?) (G4f3e core-prim . eq?) (G4f3d core-prim . dynamic-wind) (G4f3c core-prim . div0-and-mod0) (G4f3b core-prim . mod0) (G4f3a core-prim . div0) (G4f39 core-prim . div-and-mod) (G4f38 core-prim . mod) (G4f37 core-prim . div) (G4f36 core-prim . denominator) (G4f35 core-prim . cos) (G4f34 core-prim . cons) (G4f33 core-prim . complex?) (G4f32 core-prim . char?) (G4f31 core-prim . char>?) (G4f30 core-prim . char>=?) (G4f2f core-prim . char=?) (G4f2e core-prim . char<?) (G4f2d core-prim . char<=?) (G4f2c core-prim . char->integer) (G4f2b core-prim . ceiling) (G4f2a core-prim . call-with-values) (G4f29 core-prim . call/cc) (G4f28 core-prim . call-with-current-continuation) (G4f27 core-prim . cddddr) (G4f26 core-prim . cdddar) (G4f25 core-prim . cddadr) (G4f24 core-prim . cddaar) (G4f23 core-prim . cdaddr) (G4f22 core-prim . cdadar) (G4f21 core-prim . cdaadr) (G4f20 core-prim . cdaaar) (G4f1f core-prim . cadddr) (G4f1e core-prim . caddar) (G4f1d core-prim . cadadr) (G4f1c core-prim . cadaar) (G4f1b core-prim . caaddr) (G4f1a core-prim . caadar) (G4f19 core-prim . caaadr) (G4f18 core-prim . caaaar) (G4f17 core-prim . cdddr) (G4f16 core-prim . cddar) (G4f15 core-prim . cdadr) (G4f14 core-prim . cdaar) (G4f13 core-prim . caddr) (G4f12 core-prim . cadar) (G4f11 core-prim . caadr) (G4f10 core-prim . caaar) (G4f0f core-prim . cddr) (G4f0e core-prim . cdar) (G4f0d core-prim . cadr) (G4f0c core-prim . caar) (G4f0b core-prim . cdr) (G4f0a core-prim . car) (G4f09 core-prim . boolean?) (G4f08 core-prim . boolean=?) (G4f07 core-prim . atan) (G4f06 core-prim . assertion-violation) (G4f05 core-prim . asin) (G4f04 core-prim . apply) (G4f03 core-prim . append) (G4f02 core-prim . angle) (G4f01 core-prim . acos) (G4f00 core-prim . abs) (G4eff core-prim . /) (G4efe core-prim . *) (G4efd core-prim . -) (G4efc core-prim . +) (G4efb core-prim . >=) (G4efa core-prim . >) (G4ef9 core-prim . =) (G4ef8 core-prim . <=) (G4ef7 core-prim . <) (G4ef6 core-prim . library) (G4ef5 core-prim . export) (G4ef4 $core-rtd &no-nans-rtd &no-nans-rcd) (G4ef3 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4ef2 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4ef1 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4ef0 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4eef $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4eee $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4eed $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4eec $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4eeb $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4eea $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4ee9 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4ee8 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4ee7 $core-rtd &i/o-rtd &i/o-rcd) (G4ee6 $core-rtd &undefined-rtd &undefined-rcd) (G4ee5 $core-rtd &syntax-rtd &syntax-rcd) (G4ee4 $core-rtd &lexical-rtd &lexical-rcd) (G4ee3 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4ee2 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4ee1 $core-rtd &who-rtd &who-rcd) (G4ee0 $core-rtd &irritants-rtd &irritants-rcd) (G4edf $core-rtd &assertion-rtd &assertion-rcd) (G4ede $core-rtd &violation-rtd &violation-rcd) (G4edd $core-rtd &error-rtd &error-rcd) (G4edc $core-rtd &serious-rtd &serious-rcd) (G4edb $core-rtd &warning-rtd &warning-rcd) (G4eda $core-rtd &message-rtd &message-rcd) (G4ed9 $core-rtd &condition-rtd &condition-rcd) (G4ed8 macro . define-condition-type) (G4ed7 macro . define-enumeration) (G4ed6 macro . define-record-type) (G4ed5 macro . parent-rtd) (G4ed4 macro . nongenerative) (G4ed3 macro . opaque) (G4ed2 macro . sealed) (G4ed1 macro . protocol) (G4ed0 macro . parent) (G4ecf macro . immutable) (G4ece macro . mutable) (G4ecd macro . fields) (G4ecc macro . error-handling-mode) (G4ecb macro . file-options) (G4eca macro . buffer-mode) (G4ec9 macro . eol-style) (G4ec8 macro . guard) (G4ec7 macro . trace-define) (G4ec6 macro . trace-lambda) (G4ec5 macro . unsyntax-splicing) (G4ec4 macro . unsyntax) (G4ec3 macro . unquote-splicing) (G4ec2 macro . unquote) (G4ec1 macro . _) (G4ec0 macro . else) (G4ebf macro . =>) (G4ebe macro . ...) (G4ebd macro . assert) (G4ebc macro . endianness) (G4ebb macro . delay) (G4eba macro . time) (G4eb9 macro . or) (G4eb8 macro . and) (G4eb7 macro . do) (G4eb6 macro . cond) (G4eb5 macro . let*) (G4eb4 macro . let) (G4eb3 macro . let*-values) (G4eb2 macro . let-values) (G4eb1 macro . identifier-syntax) (G4eb0 macro . with-syntax) (G4eaf macro . quasisyntax) (G4eae macro . quasiquote) (G4ead macro . syntax-rules) (G4eac macro . include) (G4eab macro . define-struct) (G4eaa core-macro . record-constructor-descriptor) (G4ea9 core-macro . record-type-descriptor) (G4ea8 macro . case) (G4ea7 macro . parameterize) (G4ea6 macro . unless) (G4ea5 macro . when) (G4ea4 core-macro . if) (G4ea3 core-macro . letrec*) (G4ea2 core-macro . letrec) (G4ea1 core-macro . type-descriptor) (G4ea0 core-macro . case-lambda) (G4e9f core-macro . lambda) (G4e9e core-macro . syntax) (G4e9d core-macro . syntax-case) (G4e9c core-macro . quote) (G4e9b core-macro . foreign-call) (G4e9a letrec-syntax) (G4e99 let-syntax) (G4e98 set!) (G4e97 import) (G4e96 begin) (G4e95 module) (G4e94 define-syntax) (G4e93 define)) values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51b5 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G515c) (eval-core . G515b) (set-symbol-value! . G515a) (symbol-value . G5159) (gensym . G5158) (void . G5157)) '() values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51b6 '(mosh) '() '() '() '() '((set-symbol-value! . G515a) (symbol-value . G5159) (assoc-ref . G5133) (alist-cons . G5132) (print . G5131) (format . G5130) (standard-library-path . G512f) (file-newer? . G512e) (stat-mtime . G512d) (current-directory . G512c) (write-to-file . G512b) (file->list . G512a) (file->string . G5129) (digit->integer . G5128) (call-with-string-input-port . G5127) (call-with-string-io . G5126) (string-split . G5125) (bytevector-for-each . G5124) (string->regexp . G5123) (rxmatch . G5122) (regexp-replace-all . G5121) (hashtable-for-each . G5120) (get-timeofday . G511c) (get-command-line . G511b) (sys-display . G511a) (source-info . G5119) (make-compiler-instruction . G5118) (make-instruction . G5117) (set-source-info! . G5116) (bignum? . G5115) (make-complex . G5114) (fasl-read . G5113) (fasl-write . G5112) (include . G4eac)) '() values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51b7 '(mosh backend) '() '() '() '() '((receive . G5111)) '() values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51b8 '(mosh file) '() '() '() '() '((read-line . G5154) (file-newer? . G512e) (stat-mtime . G512d) (current-directory . G512c) (write-to-file . G512b) (file->list . G512a) (file->string . G5129)) '() values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51b9 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G5124)) '() values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51ba '(mosh number) '() '() '() '() '((digit->integer . G5128)) '() values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51bb '(mosh string) '() '() '() '() '((print . G5131) (format . G5130) (call-with-string-input-port . G5127) (call-with-string-io . G5126) (string-split . G5125) (string->regexp . G5123)) '() values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51bc '(mosh list) '() '() '() '() '((assoc-ref . G5133)) '() values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51bd '(mosh regexp) '() '() '() '() '((rxmatch . G5122) (regexp-replace-all . G5121)) '() values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51be '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5120)) '() values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51bf '(mosh parameters) '() '() '() '() '((make-parameter . G28a9) (parameterize . G4ea7)) '() values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51c0 '(system) '() '() '() '() '((readdir . G511f) (get-environment-variables . G511e) (get-environment-variable . G511d)) '() values values '#f '#f '#f '#f) (G2c40@G2ad3@install-library 'G51c1 '(srfi :1) '() '() '() '() '((dotted-list? . G5153) (circular-list? . G5152) (proper-list? . G5151) (circular-list . G5150) (last . G514f) (last-pair . G514e) (not-pair? . G514d) (split-at! . G514c) (split-at . G514b) (list= . G514a) (list-copy . G5149) (list-tabulate . G5148) (make-list . G5147) (xcons . G5146) (tenth . G5145) (ninth . G5144) (eighth . G5143) (seventh . G5142) (sixth . G5141) (fifth . G5140) (drop-right! . G513f) (drop-right . G513e) (take-right . G513d) (take! . G513c) (drop . G513b) (take . G513a) (car+cdr . G5139) (third . G5138) (second . G5137) (first . G5136) (iota . G5135) (every . G5134) (alist-cons . G5132)) '() values values '#f '#f '#f '#f))
((lambda (G4def@for-each-with-index G4df1@repl G4df3@trace-printer G4df5@command-line G4df7@local-library-path G4df9@load/args G4dfb@load G4dfd@ironscheme-build G4dff@eval-top-level G4e01@compile-system-libraries G4e03@compile G4e05@compile->closure G4e07@pre-compile-r6rs-file G4e09@load-r6rs-top-level G4e0b@write-record) (begin (set! G4def@for-each-with-index (lambda (G4e20@proc G4e21@lst) (letrec ((G4e24@loop (lambda (G4e26@i G4e27@lst) (if (null? G4e27@lst) (if '#f '#f (void)) (begin (G4e20@proc G4e26@i (car G4e27@lst)) (G4e24@loop (+ G4e26@i '1) (cdr G4e27@lst))))))) (G4e24@loop '1 G4e21@lst)))) (set! G4df1@repl (lambda G4e2a@x ((lambda (G4e2d@rec) (begin (set! G4e2d@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4e2f@G4e2e) (with-exception-handler (lambda (G4e31@e) (G4e2f@G4e2e (if '#t (G4def@for-each-with-index (lambda (G4e33@i G4e34@x) ((lambda (G4e37@rtd) (begin (format '#t '"   ~d. ~a" G4e33@i (record-type-name G4e37@rtd)) ((lambda (G4e39@v) ((lambda (G4e3b@t) (if (memv G4e3b@t '(0)) (newline) (if (memv G4e3b@t '(1)) (begin (display '": ") (write ((record-accessor G4e37@rtd '0) G4e34@x)) (newline)) (begin (display '":\n") ((letrec ((G4e3d@f (lambda (G4e3f@i) (if (not (= G4e3f@i (vector-length G4e39@v))) (begin (display '"       ") (display (vector-ref G4e39@v G4e3f@i)) (display '": ") (write ((record-accessor G4e37@rtd G4e3f@i) G4e34@x)) (newline) (G4e3d@f (+ G4e3f@i '1))) (void))))) G4e3d@f) '0))))) (vector-length G4e39@v))) (record-type-field-names G4e37@rtd)))) (record-rtd G4e34@x))) (simple-conditions G4e31@e)) (raise G4e31@e)))) (lambda () (begin '#f ((lambda (G4e41@line) (if (eof-object? G4e41@line) (exit) (write (G4dff@eval-top-level (call-with-port (open-string-input-port G4e41@line) read))))) (get-line (current-input-port)))))))) (newline) (G4e2d@rec)))) (G4e2d@rec))) '#f))) (set! G4df3@trace-printer (G299f@G28aa@make-parameter write)) (set! G4df5@command-line (G299f@G28aa@make-parameter (get-command-line))) (set! G4df7@local-library-path (lambda (G4e43@filename) (cons '"." (G2c30@G2ab3@library-path)))) (set! G4df9@load/args (lambda (G4e45@filename . G4e47@args) (begin (apply G4e09@load-r6rs-top-level G4e45@filename 'load G4e47@args) (void)))) (set! G4dfb@load (lambda (G4e49@filename) (begin (apply G4e09@load-r6rs-top-level G4e49@filename 'load (G4df5@command-line)) (void)))) (set! G4dfd@ironscheme-build (lambda () (G4dfb@load '"ironscheme-buildscript.ss"))) (set! G4dff@eval-top-level (lambda (G4e4b@x) (G4ab6@G3161@eval G4e4b@x (G4acd@G318f@interaction-environment)))) (set! G4e01@compile-system-libraries (lambda () (G4dff@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4e03@compile (lambda (G4e4d@filename) (G4e09@load-r6rs-top-level G4e4d@filename 'compile))) (set! G4e05@compile->closure (lambda (G4e4f@filename) (G4e09@load-r6rs-top-level G4e4f@filename 'closure))) (set! G4e07@pre-compile-r6rs-file (lambda (G4e51@filename) (G4e09@load-r6rs-top-level G4e51@filename 'compile))) (set! G4e09@load-r6rs-top-level (lambda (G4e53@filename G4e54@how . G4e57@args) ((lambda (G4e5b@G4e59@library-path G4e5c@G4e5a@library-path) ((lambda (G4e5f@swap) (dynamic-wind G4e5f@swap (lambda () ((lambda (G4e61@x*) ((lambda (G4e63@t) (if (memv G4e63@t '(closure)) (G4acc@G318d@pre-compile-r6rs-top-level G4e61@x*) (if (memv G4e63@t '(load)) ((lambda (G4e67@G4e65@command-line G4e68@G4e66@command-line) ((lambda (G4e6b@swap) (dynamic-wind G4e6b@swap (lambda () ((G4acb@G318b@compile-r6rs-top-level G4e61@x*))) G4e6b@swap)) (lambda () ((lambda (G4e6d@t) (begin (G4e67@G4e65@command-line G4e68@G4e66@command-line) (set! G4e68@G4e66@command-line G4e6d@t))) (G4e67@G4e65@command-line))))) G4df5@command-line (cons G4e53@filename (car G4e57@args))) (if (memv G4e63@t '(compile)) (begin (G4acb@G318b@compile-r6rs-top-level G4e61@x*) (G2c34@G2abb@serialize-all G299a@G28a0@serialize-library G2a04@G29ad@compile-core-expr)) (if '#f '#f (void)))))) G4e54@how)) (with-input-from-file G4e53@filename (lambda () ((letrec ((G4e6f@f (lambda () ((lambda (G4e71@x) (if (eof-object? G4e71@x) '() (cons G4e71@x (G4e6f@f)))) (G2992@G2890@read-annotated))))) G4e6f@f)))))) G4e5f@swap)) (lambda () ((lambda (G4e73@t) (begin (G4e5b@G4e59@library-path G4e5c@G4e5a@library-path) (set! G4e5c@G4e5a@library-path G4e73@t))) (G4e5b@G4e59@library-path))))) G2c30@G2ab3@library-path (G4df7@local-library-path G4e53@filename)))) (set! G4e0b@write-record (lambda (G4e75@record G4e76@port) ((lambda (G4e79@rtd) (begin (format G4e76@port '"    ~a" (record-type-name G4e79@rtd)) ((lambda (G4e7b@v) ((lambda (G4e7d@t) (if (memv G4e7d@t '(0)) (newline) (if (memv G4e7d@t '(1)) (begin (display '": " G4e76@port) (write ((record-accessor G4e79@rtd '0) G4e75@record) G4e76@port) (newline G4e76@port)) (begin (display '":\n") ((letrec ((G4e7f@f (lambda (G4e81@i) (if (not (= G4e81@i (vector-length G4e7b@v))) (begin (display '"       " G4e76@port) (display (vector-ref G4e7b@v G4e81@i) G4e76@port) (display '": " G4e76@port) (write ((record-accessor G4e79@rtd G4e81@i) G4e75@record) G4e76@port) (newline G4e76@port) (G4e7f@f (+ G4e81@i '1))) (void))))) G4e7f@f) '0))))) (vector-length G4e7b@v))) (record-type-field-names G4e79@rtd)))) (record-rtd G4e75@record)))) (begin (set! G4e91@G4e0b@write-record G4e0b@write-record) (set! G4e90@G4e09@load-r6rs-top-level G4e09@load-r6rs-top-level) (set! G4e8f@G4e07@pre-compile-r6rs-file G4e07@pre-compile-r6rs-file) (set! G4e8e@G4e05@compile->closure G4e05@compile->closure) (set! G4e8d@G4e03@compile G4e03@compile) (set! G4e8c@G4e01@compile-system-libraries G4e01@compile-system-libraries) (set! G4e8b@G4dff@eval-top-level G4dff@eval-top-level) (set! G4e8a@G4dfd@ironscheme-build G4dfd@ironscheme-build) (set! G4e89@G4dfb@load G4dfb@load) (set! G4e88@G4df9@load/args G4df9@load/args) (set! G4e87@G4df7@local-library-path G4df7@local-library-path) (set! G4e86@G4df5@command-line G4df5@command-line) (set! G4e85@G4df3@trace-printer G4df3@trace-printer) (set! G4e84@G4df1@repl G4df1@repl) (set! G4e83@G4def@for-each-with-index G4def@for-each-with-index) (G2c35@G2abd@current-precompiled-library-loader G299b@G28a2@load-serialized-library) (set-symbol-value! 'load G4dfb@load) (set-symbol-value! 'pre-compile-r6rs-file G4e07@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4dff@eval-top-level) (set-symbol-value! 'int-env-syms G4aad@G314f@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2a03@G29ab@expanded->core) (set-symbol-value! 'trace-printer G4df3@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2c30@G2ab3@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4e0c@args G4e0d@port) (with-exception-handler (lambda (G4e10@c) (begin (display '" Condition components:\n" G4e0d@port) (G4def@for-each-with-index (lambda (G4e12@i G4e13@x) ((lambda (G4e16@rtd) (begin (format G4e0d@port '"   ~d. ~a" G4e12@i (record-type-name G4e16@rtd)) ((lambda (G4e18@v) ((lambda (G4e1a@t) (if (memv G4e1a@t '(0)) (newline) (if (memv G4e1a@t '(1)) (begin (display '": ") (write ((record-accessor G4e16@rtd '0) G4e13@x)) (newline)) (begin (display '":\n") ((letrec ((G4e1c@f (lambda (G4e1e@i) (if (not (= G4e1e@i (vector-length G4e18@v))) (begin (display '"       ") (display (vector-ref G4e18@v G4e1e@i)) (display '": ") (write ((record-accessor G4e16@rtd G4e1e@i) G4e13@x)) (newline) (G4e1c@f (+ G4e1e@i '1))) (void))))) G4e1c@f) '0))))) (vector-length G4e18@v))) (record-type-field-names G4e16@rtd)))) (record-rtd G4e13@x))) (simple-conditions G4e10@c)))) (lambda () (if (null? G4e0c@args) (G4df1@repl) (G4e09@load-r6rs-top-level (car G4e0c@args) 'load (cdr G4e0c@args)))))) (G4df5@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
