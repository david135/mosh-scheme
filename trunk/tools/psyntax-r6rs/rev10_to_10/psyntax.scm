;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2810@read-annotated G2812@annotation-stripped G2814@annotation? G2816@annotation-source G2818@annotation-expression G281a@scm->fasl G281c@fasl-save G281e@fasl-load G2820@serialize-library G2822@load-serialized-library G2824@make-record-printer G2826@compile-core G2828@read-library-source-file G282a@make-parameter G2896@file-options-spec) (begin (set! G2810@read-annotated read) (set! G2812@annotation-stripped (lambda (G2897@x) (G2818@annotation-expression G2897@x))) (set! G2814@annotation? (lambda (G2899@x) (source-info G2899@x))) (set! G2816@annotation-source (lambda (G289b@x) (source-info G289b@x))) (set! G2818@annotation-expression (lambda (G289d@x) (if (pair? G289d@x) (cons (car G289d@x) (cdr G289d@x)) (display '"line:46\n")))) (set! G281a@scm->fasl (lambda (G289f@filename) (string-append G289f@filename '".fasl"))) (set! G281c@fasl-save (lambda (G28a1@filename G28a2@obj) (call-with-port (open-file-output-port G28a1@filename) (lambda (G28a5@port) ((symbol-value 'fasl-write!) G28a2@obj G28a5@port))))) (set! G281e@fasl-load (lambda (G28a7@filename) (call-with-port (open-file-input-port G28a7@filename) (symbol-value 'fasl-read!)))) (set! G2820@serialize-library (lambda (G28a9@filename G28aa@obj) (begin (format '#t '"serialize-library ~a\n..." G28a9@filename) ((lambda (G28ad@fasl-file) (begin (if (file-exists? G28ad@fasl-file) (delete-file G28ad@fasl-file) (void)) ((call/cc (lambda (G28b1@G28af) (lambda () (with-exception-handler (lambda (G28b3@c) ((call/cc (lambda (G28b5@G28b0) (G28b1@G28af (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28a9@filename) (if (file-exists? G28ad@fasl-file) (delete-file G28ad@fasl-file) (void)) '#f) (G28b5@G28b0 (lambda () (raise-continuable G28b3@c)))))))))) (lambda () (begin (G281c@fasl-save G28ad@fasl-file G28aa@obj) (display '"OK\n")))))))))) (G281a@scm->fasl G28a9@filename))))) (set! G2822@load-serialized-library (lambda (G28b7@filename G28b8@obj) ((lambda (G28bb@fasl-file) (if (and (file-exists? G28bb@fasl-file) ((symbol-value 'file-newer?) G28bb@fasl-file G28b7@filename)) ((lambda (G28bd@expanded2core) ((lambda (G28bf@code) ((lambda (G28c1@pivot) ((lambda (G28c3@visit) ((lambda (G28c5@visit-proc) ((lambda () (begin (set-car! G28c1@pivot G28c5@visit-proc) ((lambda (G28c7@pivot) ((lambda (G28c9@invoke) ((lambda () (begin (set-car! G28c7@pivot (lambda () (eval-core G28c9@invoke))) (apply G28b8@obj G28bf@code))))) (G28bd@expanded2core (car G28c7@pivot)))) (cdr G28c1@pivot)) '#t)))) (lambda () (eval-core G28c3@visit)))) (G28bd@expanded2core (car G28c1@pivot)))) (cddddr (cddddr G28bf@code)))) (G281e@fasl-load G28bb@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G281a@scm->fasl G28b7@filename)))) (set! G2824@make-record-printer (lambda (G28cb@name G28cc@printer) (lambda G28cf@x (begin (display '"record printer") (for-each display G28cf@x))))) (set! G2826@compile-core (lambda G28d1@x (apply error 'comile-core '"not implementated" G28d1@x))) (set! G2828@read-library-source-file (lambda (G28d3@file-name) (with-input-from-file G28d3@file-name G2810@read-annotated))) (set! G282a@make-parameter (lambda G28e3 ((lambda (G28e4) (if (= G28e4 '1) (apply (lambda (G28d5@x) (G282a@make-parameter G28d5@x (lambda (G28d7@x) G28d7@x))) G28e3) (if (= G28e4 '2) (apply (lambda (G28d9@x G28da@fender) ((lambda (G28dd@x) (lambda G28e1 ((lambda (G28e2) (if (= G28e2 '0) (apply (lambda () G28dd@x) G28e1) (if (= G28e2 '1) (apply (lambda (G28df@v) (set! G28dd@x (G28da@fender G28df@v))) G28e1) (error 'apply '"invalid arg count")))) (length G28e1)))) (G28da@fender G28d9@x))) G28e3) (error 'apply '"invalid arg count")))) (length G28e3)))) (set! G2896@file-options-spec (lambda (G28e5@x) G28e5@x)) (begin (set! G28f5@G2896@file-options-spec G2896@file-options-spec) (set! G28f4@G282a@make-parameter G282a@make-parameter) (set! G28f3@G2828@read-library-source-file G2828@read-library-source-file) (set! G28f2@G2826@compile-core G2826@compile-core) (set! G28f1@G2824@make-record-printer G2824@make-record-printer) (set! G28f0@G2822@load-serialized-library G2822@load-serialized-library) (set! G28ef@G2820@serialize-library G2820@serialize-library) (set! G28ee@G281e@fasl-load G281e@fasl-load) (set! G28ed@G281c@fasl-save G281c@fasl-save) (set! G28ec@G281a@scm->fasl G281a@scm->fasl) (set! G28eb@G2818@annotation-expression G2818@annotation-expression) (set! G28ea@G2816@annotation-source G2816@annotation-source) (set! G28e9@G2814@annotation? G2814@annotation?) (set! G28e8@G2812@annotation-stripped G2812@annotation-stripped) (set! G28e7@G2810@read-annotated G2810@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G28fa@current-primitive-locations G28fc@mutable? G28fe@rewriter G2900@expanded->core G2902@compile-core-expr G2904@pretty-print G2906@compile-core-expr-to-port) (begin (set! G28fa@current-primitive-locations (G28f4@G282a@make-parameter (lambda (G2907@x) '#f) (lambda (G2909@p) G2909@p))) (set! G28fc@mutable? (lambda (G290b@x) (or (pair? G290b@x) (vector? G290b@x) (hashtable? G290b@x)))) (set! G28fe@rewriter (lambda (G290d@quote-hack?) ((lambda (G2910@f) (begin (set! G2910@f (lambda (G2911@x) (if (pair? G2911@x) ((lambda (G2913@t) (if (memv G2913@t '(quote)) (if (and G290d@quote-hack? (G28fc@mutable? (cadr G2911@x))) ((lambda (G2915@g) (begin (set-symbol-value! G2915@g (cadr G2911@x)) G2915@g)) (gensym)) G2911@x) (if (memv G2913@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2917@x) (cons (car G2917@x) (map G2910@f (cdr G2917@x)))) (cdr G2911@x))) (if (memv G2913@t '(lambda)) (cons* 'lambda (cadr G2911@x) (map G2910@f (cddr G2911@x))) (if (memv G2913@t '(letrec)) ((lambda (G2919@bindings G291a@body*) ((lambda (G291d@lhs* G291e@rhs*) (cons* 'letrec (map list G291d@lhs* (map G2910@f G291e@rhs*)) (map G2910@f G291a@body*))) (map car G2919@bindings) (map cadr G2919@bindings))) (cadr G2911@x) (cddr G2911@x)) (if (memv G2913@t '(letrec*)) ((lambda (G2921@bindings G2922@body*) ((lambda (G2925@lhs* G2926@rhs*) (cons* 'letrec* (map list G2925@lhs* (map G2910@f G2926@rhs*)) (map G2910@f G2922@body*))) (map car G2921@bindings) (map cadr G2921@bindings))) (cadr G2911@x) (cddr G2911@x)) (if (memv G2913@t '(library-letrec*)) ((lambda (G2929@name G292a@x) ((lambda (G292d@bindings G292e@body*) ((lambda (G2931@lhs* G2932@lhs** G2933@rhs*) (cons* 'library-letrec* G2929@name (map list G2931@lhs* G2932@lhs** (map G2910@f G2933@rhs*)) (map G2910@f G292e@body*))) (map car G292d@bindings) (map cadr G292d@bindings) (map caddr G292d@bindings))) (cadr G292a@x) (cddr G292a@x))) (cadr G2911@x) (cdr G2911@x)) (if (memv G2913@t '(begin)) (cons 'begin (map G2910@f (cdr G2911@x))) (if (memv G2913@t '(set!)) (list 'set! (cadr G2911@x) (G2910@f (caddr G2911@x))) (if (memv G2913@t '(primitive)) ((lambda (G2937@op) ((lambda (G2939@t) (if G2939@t ((lambda (G293b@loc) G293b@loc) G2939@t) G2937@op)) ((G28fa@current-primitive-locations) G2937@op))) (cadr G2911@x)) (if (memv G2913@t '(define)) G2911@x (if (list? G2911@x) (map G2910@f G2911@x) (error 'rewrite '"invalid form ~s ~s" G2911@x (list? G2911@x)))))))))))))) (car G2911@x)) G2911@x))) G2910@f)) '#f))) (set! G2900@expanded->core (lambda (G293d@x) ((G28fe@rewriter '#t) G293d@x))) (set! G2902@compile-core-expr (lambda (G293f@x) ((G28fe@rewriter '#f) G293f@x))) (set! G2904@pretty-print write) (set! G2906@compile-core-expr-to-port (lambda (G2941@x G2942@p) (G2904@pretty-print ((G28fe@rewriter '#f) G2941@x) G2942@p))) (begin (set! G294b@G2906@compile-core-expr-to-port G2906@compile-core-expr-to-port) (set! G294a@G2904@pretty-print G2904@pretty-print) (set! G2949@G2902@compile-core-expr G2902@compile-core-expr) (set! G2948@G2900@expanded->core G2900@expanded->core) (set! G2947@G28fe@rewriter G28fe@rewriter) (set! G2946@G28fc@mutable? G28fc@mutable?) (set! G2945@G28fa@current-primitive-locations G28fa@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29a1@make-collection G29a3@current-library-collection G29a9@G29a4 G29ab@G29a6 G29ad@G29a5 G29b0@library? G29b2@make-library G29b4@library-id G29b6@library-name G29b8@library-version G29ba@library-imp* G29bc@library-vis* G29be@library-inv* G29c0@library-subst G29c2@library-env G29c4@library-visit-state G29c6@library-invoke-state G29c8@library-visit-code G29ca@library-invoke-code G29cc@library-visible? G29ce@library-source-file-name G29d0@set-library-id! G29d2@set-library-name! G29d4@set-library-version! G29d6@set-library-imp*! G29d8@set-library-vis*! G29da@set-library-inv*! G29dc@set-library-subst! G29de@set-library-env! G29e0@set-library-visit-state! G29e2@set-library-invoke-state! G29e4@set-library-visit-code! G29e6@set-library-invoke-code! G29e8@set-library-visible?! G29ea@set-library-source-file-name! G29ec@rp G29ee@find-dependencies G29f0@find-library-by G29f2@library-path G29f4@library-extensions G29f6@library-name->file-name G29f8@file-locator G29fa@serialize-all G29fc@current-precompiled-library-loader G29fe@try-load-from-file G2a00@library-loader G2a02@current-library-expander G2a04@external-pending-libraries G2a06@find-external-library G2a08@find-library-by-name G2a0a@library-exists? G2a0c@find-library-by-spec/die G2a0e@label->binding-table G2a10@install-library-record G2a12@install-library G2a14@imported-label->binding G2a16@invoke-library G2a18@visit-library G2a1a@invoke-library-by-spec G2a1c@installed-libraries G2a1e@library-spec) (begin (set! G29a1@make-collection (lambda () ((lambda (G2a1f@set) ((lambda (G2a22@set-cons) (begin (set! G2a22@set-cons (lambda (G2a27@x G2a28@ls) (if (memq G2a27@x G2a28@ls) G2a28@ls (cons G2a27@x G2a28@ls)))) (lambda G2a25 ((lambda (G2a26) (if (= G2a26 '0) (apply (lambda () G2a1f@set) G2a25) (if (= G2a26 '1) (apply (lambda (G2a23@x) (set! G2a1f@set (G2a22@set-cons G2a23@x G2a1f@set))) G2a25) (error 'apply '"invalid arg count")))) (length G2a25))))) '#f)) '()))) (set! G29a3@current-library-collection (G28f4@G282a@make-parameter (G29a1@make-collection) (lambda (G2a2b@x) (begin (if (not (procedure? G2a2b@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a2b@x) (void)) G2a2b@x)))) (set! G29a9@G29a4 (make-record-type-descriptor 'library '#f 'G29a7 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29ab@G29a6 '#f) (set! G29ad@G29a5 (make-record-constructor-descriptor G29a9@G29a4 '#f G29ab@G29a6)) (set! G29b0@library? (record-predicate G29a9@G29a4)) (set! G29b2@make-library (record-constructor G29ad@G29a5)) (set! G29b4@library-id (record-accessor G29a9@G29a4 '0)) (set! G29b6@library-name (record-accessor G29a9@G29a4 '1)) (set! G29b8@library-version (record-accessor G29a9@G29a4 '2)) (set! G29ba@library-imp* (record-accessor G29a9@G29a4 '3)) (set! G29bc@library-vis* (record-accessor G29a9@G29a4 '4)) (set! G29be@library-inv* (record-accessor G29a9@G29a4 '5)) (set! G29c0@library-subst (record-accessor G29a9@G29a4 '6)) (set! G29c2@library-env (record-accessor G29a9@G29a4 '7)) (set! G29c4@library-visit-state (record-accessor G29a9@G29a4 '8)) (set! G29c6@library-invoke-state (record-accessor G29a9@G29a4 '9)) (set! G29c8@library-visit-code (record-accessor G29a9@G29a4 '10)) (set! G29ca@library-invoke-code (record-accessor G29a9@G29a4 '11)) (set! G29cc@library-visible? (record-accessor G29a9@G29a4 '12)) (set! G29ce@library-source-file-name (record-accessor G29a9@G29a4 '13)) (set! G29d0@set-library-id! (record-mutator G29a9@G29a4 '0)) (set! G29d2@set-library-name! (record-mutator G29a9@G29a4 '1)) (set! G29d4@set-library-version! (record-mutator G29a9@G29a4 '2)) (set! G29d6@set-library-imp*! (record-mutator G29a9@G29a4 '3)) (set! G29d8@set-library-vis*! (record-mutator G29a9@G29a4 '4)) (set! G29da@set-library-inv*! (record-mutator G29a9@G29a4 '5)) (set! G29dc@set-library-subst! (record-mutator G29a9@G29a4 '6)) (set! G29de@set-library-env! (record-mutator G29a9@G29a4 '7)) (set! G29e0@set-library-visit-state! (record-mutator G29a9@G29a4 '8)) (set! G29e2@set-library-invoke-state! (record-mutator G29a9@G29a4 '9)) (set! G29e4@set-library-visit-code! (record-mutator G29a9@G29a4 '10)) (set! G29e6@set-library-invoke-code! (record-mutator G29a9@G29a4 '11)) (set! G29e8@set-library-visible?! (record-mutator G29a9@G29a4 '12)) (set! G29ea@set-library-source-file-name! (record-mutator G29a9@G29a4 '13)) (set! G29ec@rp (G28f1@G2824@make-record-printer 'library (lambda (G2a2d@x G2a2e@p G2a2f@wr) (begin (if (not (G29b0@library? G2a2d@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29b8@library-version G2a2d@x)) (G29b6@library-name G2a2d@x) (append (G29b6@library-name G2a2d@x) (list (G29b8@library-version G2a2d@x))))) G2a2e@p))))) (set! G29ee@find-dependencies (lambda (G2a33@ls) (if (null? G2a33@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29f0@find-library-by (lambda (G2a35@pred) ((letrec ((G2a37@f (lambda (G2a39@ls) (if (null? G2a39@ls) '#f (if (G2a35@pred (car G2a39@ls)) (car G2a39@ls) (G2a37@f (cdr G2a39@ls))))))) G2a37@f) ((G29a3@current-library-collection))))) (set! G29f2@library-path (G28f4@G282a@make-parameter '(".") (lambda (G2a3b@x) (if (and (list? G2a3b@x) (for-all string? G2a3b@x)) (map (lambda (G2a3d@x) G2a3d@x) G2a3b@x) (assertion-violation 'library-path '"not a list of strings" G2a3b@x))))) (set! G29f4@library-extensions (G28f4@G282a@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a3f@x) (if (and (list? G2a3f@x) (for-all string? G2a3f@x)) (map (lambda (G2a41@x) G2a41@x) G2a3f@x) (assertion-violation 'library-extensions '"not a list of strings" G2a3f@x))))) (set! G29f6@library-name->file-name (lambda (G2a43@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a47@G2a45 G2a48@G2a46) ((lambda (G2a4b@extract G2a4c@p) ((lambda (G2a50@display-hex) (begin (set! G2a50@display-hex (lambda (G2a59@n) (if (<= '0 G2a59@n '9) (display G2a59@n G2a4c@p) (display (integer->char (+ (char->integer '#\A) (- G2a59@n '10))) G2a4c@p)))) (begin ((letrec ((G2a51@f (lambda (G2a53@ls) (if (not (null? G2a53@ls)) (begin (display '"/" G2a4c@p) (for-each (lambda (G2a55@c) (if (or (char<=? '#\a G2a55@c '#\z) (char<=? '#\A G2a55@c '#\Z) (char<=? '#\0 G2a55@c '#\9) (memv G2a55@c '(#\- #\. #\_ #\~))) (display G2a55@c G2a4c@p) (begin (display '"%" G2a4c@p) ((lambda (G2a57@n) (begin (G2a50@display-hex (quotient G2a57@n '16)) (G2a50@display-hex (remainder G2a57@n '16)))) (char->integer G2a55@c))))) (string->list (symbol->string (car G2a53@ls)))) (G2a51@f (cdr G2a53@ls))) (void))))) G2a51@f) G2a43@x) (G2a4b@extract)))) '#f)) G2a48@G2a46 G2a47@G2a45))))) (set! G29f8@file-locator (G28f4@G282a@make-parameter (lambda (G2a5b@x) ((lambda (G2a5d@str) ((letrec ((G2a5f@f (lambda (G2a61@ls G2a62@exts G2a63@failed-list) (if (null? G2a61@ls) ((lambda () ((lambda (G2a6f@G2a6a G2a71@G2a6c G2a73@G2a6b G2a76@G2a69 G2a78@make-library-resolution-condition G2a7a@G2a67 G2a7c@G2a68 G2a7e@library-resolution-condition? G2a80@condition-library G2a82@condition-files) (begin (set! G2a6f@G2a6a (make-record-type-descriptor '&library-resolution G4c0a@G495b@&condition-rtd 'G2a6d '#f '#f '#((immutable library) (immutable files)))) (set! G2a71@G2a6c '#f) (set! G2a73@G2a6b (make-record-constructor-descriptor G2a6f@G2a6a G4c0b@G495d@&condition-rcd G2a71@G2a6c)) (set! G2a76@G2a69 (record-predicate G2a6f@G2a6a)) (set! G2a78@make-library-resolution-condition (record-constructor G2a73@G2a6b)) (set! G2a7a@G2a67 (record-accessor G2a6f@G2a6a '0)) (set! G2a7c@G2a68 (record-accessor G2a6f@G2a6a '1)) (set! G2a7e@library-resolution-condition? (condition-predicate G2a6f@G2a6a)) (set! G2a80@condition-library (condition-accessor G2a6f@G2a6a G2a7a@G2a67)) (set! G2a82@condition-files (condition-accessor G2a6f@G2a6a G2a7c@G2a68)) (raise (condition (G4c2a@G49f3@make-error) (G4c4c@G4a4d@make-who-condition 'expander) (G4c10@G49b0@make-message-condition '"cannot locate library in library-path") (G2a78@make-library-resolution-condition G2a5b@x (reverse G2a63@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a62@exts) (G2a5f@f (cdr G2a61@ls) (G29f4@library-extensions) G2a63@failed-list) ((lambda (G2a83@name) (if (file-exists? G2a83@name) G2a83@name (G2a5f@f G2a61@ls (cdr G2a62@exts) (cons G2a83@name G2a63@failed-list)))) (string-append (car G2a61@ls) G2a5d@str (car G2a62@exts)))))))) G2a5f@f) (G29f2@library-path) (G29f4@library-extensions) '())) (G29f6@library-name->file-name G2a5b@x))) (lambda (G2a85@f) (if (procedure? G2a85@f) G2a85@f (assertion-violation 'file-locator '"not a procedure" G2a85@f))))) (set! G29fa@serialize-all (lambda (G2a87@serialize G2a88@compile) ((lambda (G2a8c@library-desc) (begin (set! G2a8c@library-desc (lambda (G2a8f@x) (list (G29b4@library-id G2a8f@x) (G29b6@library-name G2a8f@x)))) (for-each (lambda (G2a8d@x) (if (G29ce@library-source-file-name G2a8d@x) (G2a87@serialize (G29ce@library-source-file-name G2a8d@x) (list (G29b4@library-id G2a8d@x) (G29b6@library-name G2a8d@x) (G29b8@library-version G2a8d@x) (map G2a8c@library-desc (G29ba@library-imp* G2a8d@x)) (map G2a8c@library-desc (G29bc@library-vis* G2a8d@x)) (map G2a8c@library-desc (G29be@library-inv* G2a8d@x)) (G29c0@library-subst G2a8d@x) (G29c2@library-env G2a8d@x) (G2a88@compile (G29c8@library-visit-code G2a8d@x)) (G2a88@compile (G29ca@library-invoke-code G2a8d@x)) (G29cc@library-visible? G2a8d@x))) (void))) ((G29a3@current-library-collection))))) '#f))) (set! G29fc@current-precompiled-library-loader (G28f4@G282a@make-parameter (lambda (G2a91@filename G2a92@sk) '#f))) (set! G29fe@try-load-from-file (lambda (G2a95@filename) ((G29fc@current-precompiled-library-loader) G2a95@filename (lambda G2abb ((lambda (G2abc) (if (= G2abc '11) (apply (lambda (G2a97@id G2a98@name G2a99@ver G2a9a@imp* G2a9b@vis* G2a9c@inv* G2a9d@exp-subst G2a9e@exp-env G2a9f@visit-proc G2aa0@invoke-proc G2aa1@visible?) ((letrec ((G2aad@f (lambda (G2aaf@deps) (if (null? G2aaf@deps) (begin (G2a12@install-library G2a97@id G2a98@name G2a99@ver G2a9a@imp* G2a9b@vis* G2a9c@inv* G2a9d@exp-subst G2a9e@exp-env G2a9f@visit-proc G2aa0@invoke-proc '#f '#f G2aa1@visible? '#f) '#t) ((lambda (G2ab1@d) ((lambda (G2ab3@label G2ab4@dname) ((lambda (G2ab7@l) (if (and (G29b0@library? G2ab7@l) (eq? G2ab3@label (G29b4@library-id G2ab7@l))) (G2aad@f (cdr G2aaf@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2a98@name G2ab4@dname G2a95@filename G2ab7@l G2ab3@label (G29b4@library-id G2ab7@l)) '#f))) (G2a08@find-library-by-name G2ab4@dname))) (car G2ab1@d) (cadr G2ab1@d))) (car G2aaf@deps)))))) G2aad@f) (append G2a9a@imp* G2a9b@vis* G2a9c@inv*))) G2abb) (if (>= G2abc '0) (apply (lambda G2ab9@others '#f) G2abb) (error 'apply '"invalid arg count")))) (length G2abb)))))) (set! G2a00@library-loader (G28f4@G282a@make-parameter (lambda (G2abd@x) ((lambda (G2abf@file-name) (if (not G2abf@file-name) (assertion-violation '#f '"cannot file library" G2abd@x) (or (G29fe@try-load-from-file G2abf@file-name) ((G2a02@current-library-expander) (G28f3@G2828@read-library-source-file G2abf@file-name) G2abf@file-name (lambda (G2ac1@name) (if (not (fast-equal? G2ac1@name G2abd@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2ac5@G2ac3 G2ac6@G2ac4) ((lambda (G2ac9@e G2aca@p) (begin (display '"expected to find library " G2aca@p) (write G2abd@x G2aca@p) (display '" in file " G2aca@p) (display G2abf@file-name G2aca@p) (display '", found " G2aca@p) (write G2ac1@name G2aca@p) (display '" instead" G2aca@p) (G2ac9@e))) G2ac6@G2ac4 G2ac5@G2ac3)))) (void))))))) ((G29f8@file-locator) G2abd@x))) (lambda (G2acd@f) (if (procedure? G2acd@f) G2acd@f (assertion-violation 'library-locator '"not a procedure" G2acd@f))))) (set! G2a02@current-library-expander (G28f4@G282a@make-parameter (lambda (G2acf@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2ad1@f) (if (procedure? G2ad1@f) G2ad1@f (assertion-violation 'library-expander '"not a procedure" G2ad1@f))))) (set! G2a04@external-pending-libraries (G28f4@G282a@make-parameter '())) (set! G2a06@find-external-library (lambda (G2ad3@name) (begin (if (member G2ad3@name (G2a04@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2ad3@name) (void)) ((lambda (G2ad7@G2ad5 G2ad8@G2ad6) ((lambda (G2adb@swap) (dynamic-wind G2adb@swap (lambda () (begin ((G2a00@library-loader) G2ad3@name) (or (G29f0@find-library-by (lambda (G2add@x) (fast-equal? (G29b6@library-name G2add@x) G2ad3@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2ad3@name)))) G2adb@swap)) (lambda () ((lambda (G2adf@t) (begin (G2ad7@G2ad5 G2ad8@G2ad6) (set! G2ad8@G2ad6 G2adf@t))) (G2ad7@G2ad5))))) G2a04@external-pending-libraries (cons G2ad3@name (G2a04@external-pending-libraries)))))) (set! G2a08@find-library-by-name (lambda (G2ae1@name) (or (G29f0@find-library-by (lambda (G2ae3@x) (fast-equal? (G29b6@library-name G2ae3@x) G2ae1@name))) (G2a06@find-external-library G2ae1@name)))) (set! G2a0a@library-exists? (lambda (G2ae5@name) (and (G29f0@find-library-by (lambda (G2ae7@x) (fast-equal? (G29b6@library-name G2ae7@x) G2ae5@name))) '#t))) (set! G2a0c@find-library-by-spec/die (lambda (G2ae9@spec) ((lambda (G2aeb@id) (or (G29f0@find-library-by (lambda (G2aed@x) (eq? G2aeb@id (G29b4@library-id G2aed@x)))) (assertion-violation '#f '"cannot find library with required spec" G2ae9@spec))) (car G2ae9@spec)))) (set! G2a0e@label->binding-table (make-eq-hashtable)) (set! G2a10@install-library-record (lambda (G2aef@lib) (begin ((lambda (G2af1@exp-env) (for-each (lambda (G2af3@x) ((lambda (G2af5@label G2af6@binding) ((lambda (G2af9@binding) (hashtable-set! G2a0e@label->binding-table G2af5@label G2af9@binding)) ((lambda (G2afb@t) (if (memv G2afb@t '(global)) (cons 'global (cons G2aef@lib (cdr G2af6@binding))) (if (memv G2afb@t '(global-macro)) (cons 'global-macro (cons G2aef@lib (cdr G2af6@binding))) (if (memv G2afb@t '(global-macro!)) (cons 'global-macro! (cons G2aef@lib (cdr G2af6@binding))) G2af6@binding)))) (car G2af6@binding)))) (car G2af3@x) (cdr G2af3@x))) G2af1@exp-env)) (G29c2@library-env G2aef@lib)) ((G29a3@current-library-collection) G2aef@lib)))) (set! G2a12@install-library (lambda (G2afd@id G2afe@name G2aff@ver G2b00@imp* G2b01@vis* G2b02@inv* G2b03@exp-subst G2b04@exp-env G2b05@visit-proc G2b06@invoke-proc G2b07@visit-code G2b08@invoke-code G2b09@visible? G2b0a@source-file-name) ((lambda (G2b19@imp-lib* G2b1a@vis-lib* G2b1b@inv-lib*) (begin (if (not (and (symbol? G2afd@id) (list? G2afe@name) (list? G2aff@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2afd@id G2afe@name G2aff@ver) (void)) (if (G2a0a@library-exists? G2afe@name) (assertion-violation 'install-library '"library is already installed" G2afe@name) (void)) ((lambda (G2b1f@lib) (G2a10@install-library-record G2b1f@lib)) (G29b2@make-library G2afd@id G2afe@name G2aff@ver G2b19@imp-lib* G2b1a@vis-lib* G2b1b@inv-lib* G2b03@exp-subst G2b04@exp-env G2b05@visit-proc G2b06@invoke-proc G2b07@visit-code G2b08@invoke-code G2b09@visible? G2b0a@source-file-name)))) (map G2a0c@find-library-by-spec/die G2b00@imp*) (map G2a0c@find-library-by-spec/die G2b01@vis*) (map G2a0c@find-library-by-spec/die G2b02@inv*)))) (set! G2a14@imported-label->binding (lambda (G2b21@lab) (hashtable-ref G2a0e@label->binding-table G2b21@lab '#f))) (set! G2a16@invoke-library (lambda (G2b23@lib) ((lambda (G2b25@invoke) (if (procedure? G2b25@invoke) (begin (G29e2@set-library-invoke-state! G2b23@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b23@lib))) (for-each G2a16@invoke-library (G29be@library-inv* G2b23@lib)) (G29e2@set-library-invoke-state! G2b23@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b23@lib))) (G2b25@invoke) (G29e2@set-library-invoke-state! G2b23@lib '#t)) (void))) (G29c6@library-invoke-state G2b23@lib)))) (set! G2a18@visit-library (lambda (G2b27@lib) ((lambda (G2b29@visit) (if (procedure? G2b29@visit) (begin (G29e0@set-library-visit-state! G2b27@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b27@lib))) (for-each G2a16@invoke-library (G29bc@library-vis* G2b27@lib)) (G29e0@set-library-visit-state! G2b27@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b27@lib))) (G2b29@visit) (G29e0@set-library-visit-state! G2b27@lib '#t)) (void))) (G29c4@library-visit-state G2b27@lib)))) (set! G2a1a@invoke-library-by-spec (lambda (G2b2b@spec) (G2a16@invoke-library (G2a0c@find-library-by-spec/die G2b2b@spec)))) (set! G2a1c@installed-libraries (lambda G2b33 ((lambda (G2b34) (if (= G2b34 '1) (apply (lambda (G2b2d@all?) ((letrec ((G2b2f@f (lambda (G2b31@ls) (if (null? G2b31@ls) '() (if (or G2b2d@all? (G29cc@library-visible? (car G2b31@ls))) (cons (car G2b31@ls) (G2b2f@f (cdr G2b31@ls))) (G2b2f@f (cdr G2b31@ls))))))) G2b2f@f) ((G29a3@current-library-collection)))) G2b33) (if (= G2b34 '0) (apply (lambda () (G2a1c@installed-libraries '#f)) G2b33) (error 'apply '"invalid arg count")))) (length G2b33)))) (set! G2a1e@library-spec (lambda (G2b35@x) (begin (if (not (G29b0@library? G2b35@x)) (assertion-violation 'library-spec '"not a library" G2b35@x) (void)) (list (G29b4@library-id G2b35@x) (G29b6@library-name G2b35@x) (G29b8@library-version G2b35@x))))) (begin (set! G2b73@G2a1e@library-spec G2a1e@library-spec) (set! G2b72@G2a1c@installed-libraries G2a1c@installed-libraries) (set! G2b71@G2a1a@invoke-library-by-spec G2a1a@invoke-library-by-spec) (set! G2b70@G2a18@visit-library G2a18@visit-library) (set! G2b6f@G2a16@invoke-library G2a16@invoke-library) (set! G2b6e@G2a14@imported-label->binding G2a14@imported-label->binding) (set! G2b6d@G2a12@install-library G2a12@install-library) (set! G2b6c@G2a10@install-library-record G2a10@install-library-record) (set! G2b6b@G2a0e@label->binding-table G2a0e@label->binding-table) (set! G2b6a@G2a0c@find-library-by-spec/die G2a0c@find-library-by-spec/die) (set! G2b69@G2a0a@library-exists? G2a0a@library-exists?) (set! G2b68@G2a08@find-library-by-name G2a08@find-library-by-name) (set! G2b67@G2a06@find-external-library G2a06@find-external-library) (set! G2b66@G2a04@external-pending-libraries G2a04@external-pending-libraries) (set! G2b65@G2a02@current-library-expander G2a02@current-library-expander) (set! G2b64@G2a00@library-loader G2a00@library-loader) (set! G2b63@G29fe@try-load-from-file G29fe@try-load-from-file) (set! G2b62@G29fc@current-precompiled-library-loader G29fc@current-precompiled-library-loader) (set! G2b61@G29fa@serialize-all G29fa@serialize-all) (set! G2b60@G29f8@file-locator G29f8@file-locator) (set! G2b5f@G29f6@library-name->file-name G29f6@library-name->file-name) (set! G2b5e@G29f4@library-extensions G29f4@library-extensions) (set! G2b5d@G29f2@library-path G29f2@library-path) (set! G2b5c@G29f0@find-library-by G29f0@find-library-by) (set! G2b5b@G29ee@find-dependencies G29ee@find-dependencies) (set! G2b5a@G29ec@rp G29ec@rp) (set! G2b59@G29ea@set-library-source-file-name! G29ea@set-library-source-file-name!) (set! G2b58@G29e8@set-library-visible?! G29e8@set-library-visible?!) (set! G2b57@G29e6@set-library-invoke-code! G29e6@set-library-invoke-code!) (set! G2b56@G29e4@set-library-visit-code! G29e4@set-library-visit-code!) (set! G2b55@G29e2@set-library-invoke-state! G29e2@set-library-invoke-state!) (set! G2b54@G29e0@set-library-visit-state! G29e0@set-library-visit-state!) (set! G2b53@G29de@set-library-env! G29de@set-library-env!) (set! G2b52@G29dc@set-library-subst! G29dc@set-library-subst!) (set! G2b51@G29da@set-library-inv*! G29da@set-library-inv*!) (set! G2b50@G29d8@set-library-vis*! G29d8@set-library-vis*!) (set! G2b4f@G29d6@set-library-imp*! G29d6@set-library-imp*!) (set! G2b4e@G29d4@set-library-version! G29d4@set-library-version!) (set! G2b4d@G29d2@set-library-name! G29d2@set-library-name!) (set! G2b4c@G29d0@set-library-id! G29d0@set-library-id!) (set! G2b4b@G29ce@library-source-file-name G29ce@library-source-file-name) (set! G2b4a@G29cc@library-visible? G29cc@library-visible?) (set! G2b49@G29ca@library-invoke-code G29ca@library-invoke-code) (set! G2b48@G29c8@library-visit-code G29c8@library-visit-code) (set! G2b47@G29c6@library-invoke-state G29c6@library-invoke-state) (set! G2b46@G29c4@library-visit-state G29c4@library-visit-state) (set! G2b45@G29c2@library-env G29c2@library-env) (set! G2b44@G29c0@library-subst G29c0@library-subst) (set! G2b43@G29be@library-inv* G29be@library-inv*) (set! G2b42@G29bc@library-vis* G29bc@library-vis*) (set! G2b41@G29ba@library-imp* G29ba@library-imp*) (set! G2b40@G29b8@library-version G29b8@library-version) (set! G2b3f@G29b6@library-name G29b6@library-name) (set! G2b3e@G29b4@library-id G29b4@library-id) (set! G2b3d@G29b2@make-library G29b2@make-library) (set! G2b3c@G29b0@library? G29b0@library?) (set! G2b3b@G29ad@G29a5 G29ad@G29a5) (set! G2b3a@G29ab@G29a6 G29ab@G29a6) (set! G2b39@G29a9@G29a4 G29a9@G29a4) (set! G2b38@G29a3@current-library-collection G29a3@current-library-collection) (set! G2b37@G29a1@make-collection G29a1@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b76@build-global-define G2bf0@build-lambda G2bf2@build-case-lambda G2bf4@build-let G2c26@build-sequence G2c28@build-void G2c2a@build-letrec G2c2c@build-letrec* G2c2e@build-library-letrec* G2c30@build-receive) (begin (set! G2b76@build-global-define (lambda (G2c31@x) (G2c28@build-void))) (set! G2bf0@build-lambda (lambda (G2c33@ae G2c34@vars G2c35@exp) (list 'lambda G2c34@vars G2c35@exp))) (set! G2bf2@build-case-lambda (lambda (G2c39@ae G2c3a@vars* G2c3b@exp*) ((lambda (G2c40@build-error G2c42@build-pred G2c44@build-apply G2c46@expand-case-lambda) (begin (set! G2c40@build-error (lambda (G2c75@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c42@build-pred (lambda (G2c5f@ae G2c60@n G2c61@vars) (call-with-values (lambda () ((letrec ((G2c67@f (lambda (G2c69@vars G2c6a@count) (if (pair? G2c69@vars) (G2c67@f (cdr G2c69@vars) (+ G2c6a@count '1)) (if (null? G2c69@vars) (values G2c6a@count '=) (values G2c6a@count '>=)))))) G2c67@f) G2c61@vars '0)) (lambda (G2c6d@G2c65 G2c6e@G2c66) ((lambda (G2c71@pred G2c72@count) (list (list 'primitive G2c71@pred) G2c60@n (list 'quote G2c72@count))) G2c6e@G2c66 G2c6d@G2c65))))) (set! G2c44@build-apply (lambda (G2c57@ae G2c58@g G2c59@vars G2c5a@exp) (list '(primitive apply) (G2bf0@build-lambda G2c57@ae G2c59@vars G2c5a@exp) G2c58@g))) (set! G2c46@expand-case-lambda (lambda (G2c47@ae G2c48@vars G2c49@exp*) ((lambda (G2c4d@g G2c4e@n) (list 'lambda G2c4d@g (G2bf4@build-let G2c47@ae (list G2c4e@n) (list (list '(primitive length) G2c4d@g)) ((letrec ((G2c51@f (lambda (G2c53@vars* G2c54@exp*) (if (null? G2c53@vars*) (G2c40@build-error G2c47@ae) (list 'if (G2c42@build-pred G2c47@ae G2c4e@n (car G2c53@vars*)) (G2c44@build-apply G2c47@ae G2c4d@g (car G2c53@vars*) (car G2c54@exp*)) (G2c51@f (cdr G2c53@vars*) (cdr G2c54@exp*))))))) G2c51@f) G2c3a@vars* G2c49@exp*)))) (gensym) (gensym)))) (if (= (length G2c3b@exp*) '1) (G2bf0@build-lambda G2c39@ae (car G2c3a@vars*) (car G2c3b@exp*)) (G2c46@expand-case-lambda G2c39@ae G2c3a@vars* G2c3b@exp*)))) '#f '#f '#f '#f))) (set! G2bf4@build-let (lambda (G2c77@ae G2c78@lhs* G2c79@rhs* G2c7a@body) (cons (G2bf0@build-lambda G2c77@ae G2c78@lhs* G2c7a@body) G2c79@rhs*))) (set! G2c26@build-sequence (lambda (G2c7f@ae G2c80@exps) ((letrec ((G2c83@loop (lambda (G2c85@exps) (if (null? (cdr G2c85@exps)) (car G2c85@exps) (if (equal? (car G2c85@exps) (G2c28@build-void)) (G2c83@loop (cdr G2c85@exps)) (cons 'begin G2c85@exps)))))) G2c83@loop) G2c80@exps))) (set! G2c28@build-void (lambda () '((primitive void)))) (set! G2c2a@build-letrec (lambda (G2c87@ae G2c88@vars G2c89@val-exps G2c8a@body-exp) (if (null? G2c88@vars) G2c8a@body-exp (list 'letrec (map list G2c88@vars G2c89@val-exps) G2c8a@body-exp)))) (set! G2c2c@build-letrec* (lambda (G2c8f@ae G2c90@vars G2c91@val-exps G2c92@body-exp) (if (null? G2c90@vars) G2c92@body-exp (G2bf4@build-let G2c8f@ae G2c90@vars (map (lambda (G2c97@x) (list 'quote '#f)) G2c90@vars) (G2c26@build-sequence G2c8f@ae (append (map (lambda (G2c99@lhs G2c9a@rhs) (list 'set! G2c99@lhs G2c9a@rhs)) G2c90@vars G2c91@val-exps) (list G2c92@body-exp))))))) (set! G2c2e@build-library-letrec* (lambda (G2c9d@ae G2c9e@name G2c9f@vars G2ca0@locs G2ca1@val-exps G2ca2@body-exp) (list 'library-letrec* G2c9e@name (map list G2c9f@vars G2ca0@locs G2ca1@val-exps) G2ca2@body-exp))) (set! G2c30@build-receive (lambda (G2ca9@ae G2caa@vars G2cab@producer G2cac@body*) (begin (display '"************** in ") (cons 'receive (cons G2caa@vars (cons G2cab@producer G2cac@body*)))))) (begin (set! G2cba@G2c30@build-receive G2c30@build-receive) (set! G2cb9@G2c2e@build-library-letrec* G2c2e@build-library-letrec*) (set! G2cb8@G2c2c@build-letrec* G2c2c@build-letrec*) (set! G2cb7@G2c2a@build-letrec G2c2a@build-letrec) (set! G2cb6@G2c28@build-void G2c28@build-void) (set! G2cb5@G2c26@build-sequence G2c26@build-sequence) (set! G2cb4@G2bf4@build-let G2bf4@build-let) (set! G2cb3@G2bf2@build-case-lambda G2bf2@build-case-lambda) (set! G2cb2@G2bf0@build-lambda G2bf0@build-lambda) (set! G2cb1@G2b76@build-global-define G2b76@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cc9@set-cons G2ccb@set-union G2cd0@top-mark* G2cd2@top-marked? G2cd4@gen-lexical G2cd6@gen-global G2cd8@gen-label G2cda@gen-top-level-label G2cdc@gen-define-label+loc G2cde@gen-define-label G2ce4@G2cdf G2ce6@G2ce1 G2ce8@G2ce0 G2ceb@rib? G2ced@make-rib G2cef@rib-sym* G2cf1@rib-mark** G2cf3@rib-label* G2cf5@rib-sealed/freq G2cf7@rib-cache G2cf9@set-rib-sym*! G2cfb@set-rib-mark**! G2cfd@set-rib-label*! G2cff@set-rib-sealed/freq! G2d01@set-rib-cache! G2d03@make-empty-rib G2d05@make-cache-rib G2d07@find-label G2d09@extend-rib! G2d0b@extend-rib/nc! G2d0d@make-rib-map G2d0f@seal-rib! G2d11@unseal-rib! G2d13@make-full-rib G2d19@G2d14 G2d1b@G2d16 G2d1d@G2d15 G2d20@stx? G2d22@make-stx G2d24@stx-expr G2d26@stx-mark* G2d28@stx-subst* G2d2a@stx-ae* G2d2c@set-stx-expr! G2d2e@set-stx-mark*! G2d30@set-stx-subst*! G2d32@set-stx-ae*! G2d34@rp G2d36@datum->stx G2d38@gen-mark G2d3a@anti-mark G2d3c@anti-mark? G2d3e@join-wraps G2d40@mkstx G2d42@add-mark G2d44@add-subst G2d46@syntax-kind? G2d48@syntax-vector->list G2d4a@syntax-pair? G2d4c@syntax-vector? G2d4e@syntax-null? G2d50@syntax-list? G2d52@syntax-car G2d54@syntax-cdr G2d56@syntax->list G2d58@id? G2d5a@id->sym G2d5c@same-marks? G2d5e@bound-id=? G2d60@free-id=? G2d62@valid-bound-ids? G2d64@distinct-bound-ids? G2d66@bound-id-member? G2d68@self-evaluating? G2d6a@strip-annotations G2d6c@strip G2d6e@stx->datum G2d70@same-marks*? G2d72@id->label G2d74@id->real-label G2d76@label->binding G2d78@make-binding G2d7a@binding-type G2d7c@binding-value G2d7e@raise-unbound-error G2d80@syntax-type G2d90@sanitize-binding G2d92@make-variable-transformer G2d94@variable-transformer? G2d96@variable-transformer-procedure G2d98@make-eval-transformer G2edb@parse-define G2edd@parse-define-syntax G2edf@scheme-stx-hashtable G2ee1@scheme-stx G2ee3@lexical-var G2ee5@lexical-mutable? G2ee7@set-lexical-mutable! G2ee9@add-lexical G2eeb@add-lexicals G2eed@letrec-helper G2eef@letrec-transformer G2ef1@letrec*-transformer G2ef3@fluid-let-syntax-transformer G2ef5@type-descriptor-transformer G2ef7@record-type-descriptor-transformer G2ef9@record-constructor-descriptor-transformer G2efb@when-macro G2efd@unless-macro G2eff@if-transformer G2f01@and-transformer G2f03@or-transformer G2f05@case-macro G2f07@quote-transformer G2f09@case-lambda-transformer G2f0b@lambda-transformer G2f0d@bless G2f0f@with-syntax-macro G2f11@invalid-fmls-error G2f13@let-macro G2f15@let-values-macro G2f17@let*-values-macro G2f19@trace-lambda-macro G2f1b@trace-define-macro G2f1d@trace-define-syntax-macro G2f1f@trace-let/rec-syntax G2f21@trace-let-syntax-macro G2f23@trace-letrec-syntax-macro G2f25@guard-macro G2f27@define-enumeration-macro G2f29@time-macro G2f2b@delay-macro G2f2d@assert-macro G2f2f@endianness-macro G2f31@identifier-syntax-macro G2f33@do-macro G2f35@let*-macro G2f37@or-macro G2f39@and-macro G2f3b@cond-macro G2f3d@do-include G2f3f@include-macro G2f41@include-into-macro G2f43@syntax-rules-macro G2f45@quasiquote-macro G2f47@quasisyntax-macro G2f49@define-struct-macro G2f4b@define-record-type-macro G2f4d@define-condition-type-macro G2f4f@incorrect-usage-macro G2f51@parameterize-macro G2f53@foreign-call-transformer G2f55@convert-pattern G2f57@syntax-dispatch G2f59@ellipsis? G2f5b@underscore? G2f5d@verify-literals G2f5f@syntax-case-transformer G2f61@ellipsis-map G2f63@syntax-transformer G2f65@core-macro-transformer G2f67@file-options-macro G2f69@symbol-macro G2f6b@macro-transformer G2f6d@local-macro-transformer G2f6f@do-macro-call G2f71@chi-macro G2f73@chi-local-macro G2f75@chi-global-macro G2f77@chi-expr* G2f79@chi-application G2f7b@chi-expr G2f7d@chi-set! G2f7f@verify-formals G2f81@chi-lambda-clause G2f83@chi-lambda-clause* G2f85@chi-defun G2f87@chi-rhs G2f89@expand-interaction-rhs*/init* G2f8b@chi-rhs* G2f8d@find-bound=? G2f8f@find-dups G2f91@chi-internal G2f93@parse-module G2f99@G2f94 G2f9b@G2f96 G2f9d@G2f95 G2fa0@module-interface? G2fa2@make-module-interface G2fa4@module-interface-first-mark G2fa6@module-interface-exp-id-vec G2fa8@module-interface-exp-lab-vec G2faa@set-module-interface-first-mark! G2fac@set-module-interface-exp-id-vec! G2fae@set-module-interface-exp-lab-vec! G2fb0@module-interface-exp-id* G2fb2@chi-internal-module G2fb4@chi-body* G2fb6@expand-transformer G2fb8@parse-exports G2fba@parse-library-name G2fbc@parse-library G2fbe@parse-import-spec* G2fc0@make-top-rib G2fc2@make-collector G2fc4@inv-collector G2fc6@vis-collector G2fc8@imp-collector G2fca@chi-library-internal G2fcc@chi-interaction-expr G2fce@library-body-expander G2fd0@core-library-expander G2fd2@parse-top-level-program G2fd4@top-level-expander G2fda@G2fd5 G2fdc@G2fd7 G2fde@G2fd6 G2fe1@env? G2fe3@make-env G2fe5@env-names G2fe7@env-labels G2fe9@env-itc G2feb@set-env-names! G2fed@set-env-labels! G2fef@set-env-itc! G2ff1@rp G2ff7@G2ff2 G2ff9@G2ff4 G2ffb@G2ff3 G2ffe@interaction-env? G3000@make-interaction-env G3002@interaction-env-rib G3004@interaction-env-r G3006@interaction-env-locs G3008@set-interaction-env-rib! G300a@set-interaction-env-r! G300c@set-interaction-env-locs! G300e@rp G3010@interaction-environment-symbols G3012@environment-bindings G3014@parse-binding G3016@environment? G3018@environment-symbols G301a@environment G301c@null-environment G301e@scheme-report-environment G3020@expand G3022@eval G3024@library-expander G3026@boot-library-expand G3028@rev-map-append G302a@build-exports G302c@make-export-subst G302e@make-export-env/macros G3030@generate-temporaries G3032@free-identifier=? G3034@bound-identifier=? G3036@make-source-condition G3038@extract-position-condition G303a@expression-position G303c@assertion-error G303e@syntax-error G3040@syntax-violation* G3042@syntax-violation G3044@identifier? G3046@datum->syntax G3048@syntax->datum G304a@compile-r6rs-top-level G304c@pre-compile-r6rs-top-level G304e@interaction-environment G3050@top-level-context) (begin (set! G2cc9@set-cons (lambda (G3051@x G3052@ls) (if (memq G3051@x G3052@ls) G3052@ls (cons G3051@x G3052@ls)))) (set! G2ccb@set-union (lambda (G3055@ls1 G3056@ls2) (if (null? G3055@ls1) G3056@ls2 (if (memq (car G3055@ls1) G3056@ls2) (G2ccb@set-union (cdr G3055@ls1) G3056@ls2) (cons (car G3055@ls1) (G2ccb@set-union (cdr G3055@ls1) G3056@ls2)))))) (set! G2cd0@top-mark* '(top)) (set! G2cd2@top-marked? (lambda (G3059@m*) (memq 'top G3059@m*))) (set! G2cd4@gen-lexical (lambda (G305b@sym) (if (symbol? G305b@sym) (gensym G305b@sym) (if (G2d20@stx? G305b@sym) (G2cd4@gen-lexical (G2d5a@id->sym G305b@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G305b@sym))))) (set! G2cd6@gen-global (lambda (G305d@x) (G2cd4@gen-lexical G305d@x))) (set! G2cd8@gen-label (lambda (G305f@_) (gensym))) (set! G2cda@gen-top-level-label (lambda (G3061@id G3062@rib) ((lambda (G3066@find) (begin (set! G3066@find (lambda (G3071@sym G3072@mark* G3073@sym* G3074@mark** G3075@label*) (and (pair? G3073@sym*) (if (and (eq? G3071@sym (car G3073@sym*)) (G2d5c@same-marks? G3072@mark* (car G3074@mark**))) (car G3075@label*) (G3066@find G3071@sym G3072@mark* (cdr G3073@sym*) (cdr G3074@mark**) (cdr G3075@label*)))))) ((lambda (G3067@sym G3068@mark*) ((lambda (G306b@sym*) ((lambda (G306d@t) (if G306d@t ((lambda (G306f@label) (if (G2b6e@G2a14@imported-label->binding G306f@label) (gensym) G306f@label)) G306d@t) (gensym))) (and (memq G3067@sym (G2cef@rib-sym* G3062@rib)) (G3066@find G3067@sym G3068@mark* G306b@sym* (G2cf1@rib-mark** G3062@rib) (G2cf3@rib-label* G3062@rib))))) (G2cef@rib-sym* G3062@rib))) (G2d5a@id->sym G3061@id) (G2d26@stx-mark* G3061@id)))) '#f))) (set! G2cdc@gen-define-label+loc (lambda (G307b@id G307c@rib) ((lambda (G307f@t) (if G307f@t ((lambda (G3081@env) ((lambda (G3083@label G3084@locs) (values G3083@label ((lambda (G3087@t) (if G3087@t (cdr G3087@t) ((lambda (G3089@loc) (begin (G300c@set-interaction-env-locs! G3081@env (cons (cons G3083@label G3089@loc) G3084@locs)) G3089@loc)) (G2cd4@gen-lexical G307b@id)))) (assq G3083@label G3084@locs)))) (G2cda@gen-top-level-label G307b@id G307c@rib) (G3006@interaction-env-locs G3081@env))) G307f@t) (values (gensym) (G2cd4@gen-lexical G307b@id)))) (G3050@top-level-context)))) (set! G2cde@gen-define-label (lambda (G308b@id G308c@rib) (if (G3050@top-level-context) (G2cda@gen-top-level-label G308b@id G308c@rib) (gensym)))) (set! G2ce4@G2cdf (make-record-type-descriptor 'rib '#f 'G2ce2 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2ce6@G2ce1 '#f) (set! G2ce8@G2ce0 (make-record-constructor-descriptor G2ce4@G2cdf '#f G2ce6@G2ce1)) (set! G2ceb@rib? (record-predicate G2ce4@G2cdf)) (set! G2ced@make-rib (record-constructor G2ce8@G2ce0)) (set! G2cef@rib-sym* (record-accessor G2ce4@G2cdf '0)) (set! G2cf1@rib-mark** (record-accessor G2ce4@G2cdf '1)) (set! G2cf3@rib-label* (record-accessor G2ce4@G2cdf '2)) (set! G2cf5@rib-sealed/freq (record-accessor G2ce4@G2cdf '3)) (set! G2cf7@rib-cache (record-accessor G2ce4@G2cdf '4)) (set! G2cf9@set-rib-sym*! (record-mutator G2ce4@G2cdf '0)) (set! G2cfb@set-rib-mark**! (record-mutator G2ce4@G2cdf '1)) (set! G2cfd@set-rib-label*! (record-mutator G2ce4@G2cdf '2)) (set! G2cff@set-rib-sealed/freq! (record-mutator G2ce4@G2cdf '3)) (set! G2d01@set-rib-cache! (record-mutator G2ce4@G2cdf '4)) (set! G2d03@make-empty-rib (lambda () (G2ced@make-rib '() '() '() '#f '#f))) (set! G2d05@make-cache-rib (lambda () (G2ced@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d07@find-label (lambda (G308f@rib G3090@sym G3091@mark*) ((lambda (G3095@ht) (and G3095@ht ((lambda (G3097@cv) ((lambda (G3099@t) (if G3099@t (cdr G3099@t) '#f)) (and G3097@cv (assp (lambda (G309b@m) (G2d5c@same-marks? G3091@mark* G309b@m)) G3097@cv)))) (hashtable-ref G3095@ht G3090@sym '#f)))) (G2cf7@rib-cache G308f@rib)))) (set! G2d09@extend-rib! (lambda (G309d@rib G309e@id G309f@label) ((lambda (G30a4@find) (begin (set! G30a4@find (lambda (G30b5@sym G30b6@mark* G30b7@sym* G30b8@mark** G30b9@label*) (and (pair? G30b7@sym*) (if (and (eq? G30b5@sym (car G30b7@sym*)) (G2d5c@same-marks? G30b6@mark* (car G30b8@mark**))) G30b9@label* (G30a4@find G30b5@sym G30b6@mark* (cdr G30b7@sym*) (cdr G30b8@mark**) (cdr G30b9@label*)))))) (begin (if (G2cf5@rib-sealed/freq G309d@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G309d@rib) (void)) ((lambda (G30a5@sym G30a6@mark*) ((lambda (G30a9@sym*) ((lambda (G30ab@t) (if G30ab@t ((lambda (G30ad@p) (if (not (eq? G309f@label G30ad@p)) (G3042@syntax-violation '#f '"multiple definitions of identifier" G309e@id) (void))) G30ab@t) ((lambda (G30af@t) (if G30af@t ((lambda (G30b1@p) (if (not (eq? G309f@label (car G30b1@p))) (if (G3050@top-level-context) (set-car! G30b1@p G309f@label) (G3042@syntax-violation '#f '"multiple definitions of identifier" G309e@id)) (void))) G30af@t) (begin (if (G2cf7@rib-cache G309d@rib) (hashtable-update! (G2cf7@rib-cache G309d@rib) G30a5@sym (lambda (G30b3@e) (cons (cons G30a6@mark* G309f@label) G30b3@e)) '()) (void)) (G2cf9@set-rib-sym*! G309d@rib (cons G30a5@sym G30a9@sym*)) (G2cfb@set-rib-mark**! G309d@rib (cons G30a6@mark* (G2cf1@rib-mark** G309d@rib))) (G2cfd@set-rib-label*! G309d@rib (cons G309f@label (G2cf3@rib-label* G309d@rib)))))) (and (memq G30a5@sym (G2cef@rib-sym* G309d@rib)) (G30a4@find G30a5@sym G30a6@mark* G30a9@sym* (G2cf1@rib-mark** G309d@rib) (G2cf3@rib-label* G309d@rib)))))) (G2d07@find-label G309d@rib G30a5@sym G30a6@mark*))) (G2cef@rib-sym* G309d@rib))) (G2d5a@id->sym G309e@id) (G2d26@stx-mark* G309e@id))))) '#f))) (set! G2d0b@extend-rib/nc! (lambda (G30bf@rib G30c0@id G30c1@label) ((lambda (G30c5@sym G30c6@mark*) ((lambda (G30c9@sym*) (begin (if (G2cf7@rib-cache G30bf@rib) (hashtable-update! (G2cf7@rib-cache G30bf@rib) G30c5@sym (lambda (G30cb@e) (cons (cons G30c6@mark* G30c1@label) G30cb@e)) '()) (void)) (G2cf9@set-rib-sym*! G30bf@rib (cons G30c5@sym G30c9@sym*)) (G2cfb@set-rib-mark**! G30bf@rib (cons G30c6@mark* (G2cf1@rib-mark** G30bf@rib))) (G2cfd@set-rib-label*! G30bf@rib (cons G30c1@label (G2cf3@rib-label* G30bf@rib))))) (G2cef@rib-sym* G30bf@rib))) (G2d5a@id->sym G30c0@id) (G2d26@stx-mark* G30c0@id)))) (set! G2d0d@make-rib-map (lambda (G30cd@sym*) ((lambda (G30cf@ht) ((letrec ((G30d1@f (lambda (G30d3@i G30d4@sym*) (if (null? G30d4@sym*) G30cf@ht (begin (hashtable-update! G30cf@ht (car G30d4@sym*) (lambda (G30d7@x) (cons G30d3@i G30d7@x)) '()) (G30d1@f (+ G30d3@i '1) (cdr G30d4@sym*))))))) G30d1@f) '0 G30cd@sym*)) (make-eq-hashtable)))) (set! G2d0f@seal-rib! (lambda (G30d9@rib) ((lambda (G30db@sym*) (if (not (null? G30db@sym*)) (begin (G2cf9@set-rib-sym*! G30d9@rib (list->vector G30db@sym*)) (G2cfb@set-rib-mark**! G30d9@rib (list->vector (G2cf1@rib-mark** G30d9@rib))) (G2cfd@set-rib-label*! G30d9@rib (list->vector (G2cf3@rib-label* G30d9@rib))) (G2cff@set-rib-sealed/freq! G30d9@rib (G2d0d@make-rib-map G30db@sym*))) (void))) (G2cef@rib-sym* G30d9@rib)))) (set! G2d11@unseal-rib! (lambda (G30dd@rib) (if (G2cf5@rib-sealed/freq G30dd@rib) (begin (G2cff@set-rib-sealed/freq! G30dd@rib '#f) (G2cf9@set-rib-sym*! G30dd@rib (vector->list (G2cef@rib-sym* G30dd@rib))) (G2cfb@set-rib-mark**! G30dd@rib (vector->list (G2cf1@rib-mark** G30dd@rib))) (G2cfd@set-rib-label*! G30dd@rib (vector->list (G2cf3@rib-label* G30dd@rib)))) (void)))) (set! G2d13@make-full-rib (lambda (G30df@id* G30e0@label*) ((lambda (G30e3@r) (begin (G2d0f@seal-rib! G30e3@r) G30e3@r)) (G2ced@make-rib (map G2d5a@id->sym G30df@id*) (map G2d26@stx-mark* G30df@id*) G30e0@label* '#f '#f)))) (set! G2d19@G2d14 (make-record-type-descriptor 'stx '#f 'G2d17 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d1b@G2d16 '#f) (set! G2d1d@G2d15 (make-record-constructor-descriptor G2d19@G2d14 '#f G2d1b@G2d16)) (set! G2d20@stx? (record-predicate G2d19@G2d14)) (set! G2d22@make-stx (record-constructor G2d1d@G2d15)) (set! G2d24@stx-expr (record-accessor G2d19@G2d14 '0)) (set! G2d26@stx-mark* (record-accessor G2d19@G2d14 '1)) (set! G2d28@stx-subst* (record-accessor G2d19@G2d14 '2)) (set! G2d2a@stx-ae* (record-accessor G2d19@G2d14 '3)) (set! G2d2c@set-stx-expr! (record-mutator G2d19@G2d14 '0)) (set! G2d2e@set-stx-mark*! (record-mutator G2d19@G2d14 '1)) (set! G2d30@set-stx-subst*! (record-mutator G2d19@G2d14 '2)) (set! G2d32@set-stx-ae*! (record-mutator G2d19@G2d14 '3)) (set! G2d34@rp (G28f1@G2824@make-record-printer 'stx (lambda (G30e5@x G30e6@p G30e7@wr) (begin (display '"#<syntax " G30e6@p) (write (G2d6e@stx->datum G30e5@x) G30e6@p) ((lambda (G30eb@expr) (if (G28e9@G2814@annotation? G30eb@expr) ((lambda (G30ed@src) (if (pair? G30ed@src) (begin (display '" [" G30e6@p) (display (cdr G30ed@src) G30e6@p) (display '" of " G30e6@p) (display (car G30ed@src) G30e6@p) (display '"]" G30e6@p)) (void))) (G28ea@G2816@annotation-source G30eb@expr)) (void))) (G2d24@stx-expr G30e5@x)) (display '">" G30e6@p))))) (set! G2d36@datum->stx (lambda (G30ef@id G30f0@datum) (G2d22@make-stx G30f0@datum (G2d26@stx-mark* G30ef@id) (G2d28@stx-subst* G30ef@id) (G2d2a@stx-ae* G30ef@id)))) (set! G2d38@gen-mark (lambda () (string '#\m))) (set! G2d3a@anti-mark '#f) (set! G2d3c@anti-mark? not) (set! G2d3e@join-wraps (lambda (G30f3@m1* G30f4@s1* G30f5@ae1* G30f6@e) ((lambda (G30fc@cancel) (begin (set! G30fc@cancel (lambda (G3103@ls1 G3104@ls2) ((letrec ((G3107@f (lambda (G3109@x G310a@ls1) (if (null? G310a@ls1) (cdr G3104@ls2) (cons G3109@x (G3107@f (car G310a@ls1) (cdr G310a@ls1))))))) G3107@f) (car G3103@ls1) (cdr G3103@ls1)))) ((lambda (G30fd@m2* G30fe@s2* G30ff@ae2*) (if (and (not (null? G30f3@m1*)) (not (null? G30fd@m2*)) (G2d3c@anti-mark? (car G30fd@m2*))) (values (G30fc@cancel G30f3@m1* G30fd@m2*) (G30fc@cancel G30f4@s1* G30fe@s2*) (G30fc@cancel G30f5@ae1* G30ff@ae2*)) (values (append G30f3@m1* G30fd@m2*) (append G30f4@s1* G30fe@s2*) (append G30f5@ae1* G30ff@ae2*)))) (G2d26@stx-mark* G30f6@e) (G2d28@stx-subst* G30f6@e) (G2d2a@stx-ae* G30f6@e)))) '#f))) (set! G2d40@mkstx (lambda (G310d@e G310e@m* G310f@s* G3110@ae*) (if (and (G2d20@stx? G310d@e) (not (G2cd2@top-marked? G310e@m*))) (call-with-values (lambda () (G2d3e@join-wraps G310e@m* G310f@s* G3110@ae* G310d@e)) (lambda (G3118@G3115 G3119@G3116 G311a@G3117) ((lambda (G311e@ae* G311f@s* G3120@m*) (G2d22@make-stx (G2d24@stx-expr G310d@e) G3120@m* G311f@s* G311e@ae*)) G311a@G3117 G3119@G3116 G3118@G3115))) (G2d22@make-stx G310d@e G310e@m* G310f@s* G3110@ae*)))) (set! G2d42@add-mark (lambda (G3124@m G3125@e G3126@ae) (G2d40@mkstx G3125@e (list G3124@m) '(shift) (list G3126@ae)))) (set! G2d44@add-subst (lambda (G312a@subst G312b@e) (G2d40@mkstx G312b@e '() (list G312a@subst) '()))) (set! G2d46@syntax-kind? (lambda (G312e@x G312f@p?) (if (G2d20@stx? G312e@x) (G2d46@syntax-kind? (G2d24@stx-expr G312e@x) G312f@p?) (if (G28e9@G2814@annotation? G312e@x) (G2d46@syntax-kind? (G28eb@G2818@annotation-expression G312e@x) G312f@p?) (G312f@p? G312e@x))))) (set! G2d48@syntax-vector->list (lambda (G3132@x) (if (G2d20@stx? G3132@x) ((lambda (G3134@ls G3135@m* G3136@s* G3137@ae*) (map (lambda (G313c@x) (G2d40@mkstx G313c@x G3135@m* G3136@s* G3137@ae*)) G3134@ls)) (G2d48@syntax-vector->list (G2d24@stx-expr G3132@x)) (G2d26@stx-mark* G3132@x) (G2d28@stx-subst* G3132@x) (G2d2a@stx-ae* G3132@x)) (if (G28e9@G2814@annotation? G3132@x) (G2d48@syntax-vector->list (G28eb@G2818@annotation-expression G3132@x)) (if (vector? G3132@x) (vector->list G3132@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3132@x)))))) (set! G2d4a@syntax-pair? (lambda (G313e@x) (G2d46@syntax-kind? G313e@x pair?))) (set! G2d4c@syntax-vector? (lambda (G3140@x) (G2d46@syntax-kind? G3140@x vector?))) (set! G2d4e@syntax-null? (lambda (G3142@x) (G2d46@syntax-kind? G3142@x null?))) (set! G2d50@syntax-list? (lambda (G3144@x) (or (G2d4e@syntax-null? G3144@x) (and (G2d4a@syntax-pair? G3144@x) (G2d50@syntax-list? (G2d54@syntax-cdr G3144@x)))))) (set! G2d52@syntax-car (lambda (G3146@x) (if (G2d20@stx? G3146@x) (G2d40@mkstx (G2d52@syntax-car (G2d24@stx-expr G3146@x)) (G2d26@stx-mark* G3146@x) (G2d28@stx-subst* G3146@x) (G2d2a@stx-ae* G3146@x)) (if (G28e9@G2814@annotation? G3146@x) (G2d52@syntax-car (G28eb@G2818@annotation-expression G3146@x)) (if (pair? G3146@x) (car G3146@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3146@x)))))) (set! G2d54@syntax-cdr (lambda (G3148@x) (if (G2d20@stx? G3148@x) (G2d40@mkstx (G2d54@syntax-cdr (G2d24@stx-expr G3148@x)) (G2d26@stx-mark* G3148@x) (G2d28@stx-subst* G3148@x) (G2d2a@stx-ae* G3148@x)) (if (G28e9@G2814@annotation? G3148@x) (G2d54@syntax-cdr (G28eb@G2818@annotation-expression G3148@x)) (if (pair? G3148@x) (cdr G3148@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3148@x)))))) (set! G2d56@syntax->list (lambda (G314a@x) (if (G2d4a@syntax-pair? G314a@x) (cons (G2d52@syntax-car G314a@x) (G2d56@syntax->list (G2d54@syntax-cdr G314a@x))) (if (G2d4e@syntax-null? G314a@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G314a@x))))) (set! G2d58@id? (lambda (G314c@x) (and (G2d20@stx? G314c@x) ((lambda (G314e@expr) (symbol? (if (G28e9@G2814@annotation? G314e@expr) (G28e8@G2812@annotation-stripped G314e@expr) G314e@expr))) (G2d24@stx-expr G314c@x))))) (set! G2d5a@id->sym (lambda (G3150@x) (begin (if (not (G2d20@stx? G3150@x)) (error 'id->sym '"BUG in ikarus: not an id" G3150@x) (void)) ((lambda (G3152@expr) ((lambda (G3154@sym) (if (symbol? G3154@sym) G3154@sym (error 'id->sym '"BUG in ikarus: not an id" G3150@x))) (if (G28e9@G2814@annotation? G3152@expr) (G28e8@G2812@annotation-stripped G3152@expr) G3152@expr))) (G2d24@stx-expr G3150@x))))) (set! G2d5c@same-marks? (lambda (G3156@x G3157@y) (or (and (null? G3156@x) (null? G3157@y)) (and (pair? G3156@x) (pair? G3157@y) (eq? (car G3156@x) (car G3157@y)) (G2d5c@same-marks? (cdr G3156@x) (cdr G3157@y)))))) (set! G2d5e@bound-id=? (lambda (G315a@x G315b@y) (and (eq? (G2d5a@id->sym G315a@x) (G2d5a@id->sym G315b@y)) (G2d5c@same-marks? (G2d26@stx-mark* G315a@x) (G2d26@stx-mark* G315b@y))))) (set! G2d60@free-id=? (lambda (G315e@i G315f@j) ((lambda (G3162@t0 G3163@t1) (if (or G3162@t0 G3163@t1) (eq? G3162@t0 G3163@t1) (eq? (G2d5a@id->sym G315e@i) (G2d5a@id->sym G315f@j)))) (G2d74@id->real-label G315e@i) (G2d74@id->real-label G315f@j)))) (set! G2d62@valid-bound-ids? (lambda (G3166@id*) (and (for-all G2d58@id? G3166@id*) (G2d64@distinct-bound-ids? G3166@id*)))) (set! G2d64@distinct-bound-ids? (lambda (G3168@id*) (or (null? G3168@id*) (and (not (G2d66@bound-id-member? (car G3168@id*) (cdr G3168@id*))) (G2d64@distinct-bound-ids? (cdr G3168@id*)))))) (set! G2d66@bound-id-member? (lambda (G316a@id G316b@id*) (and (pair? G316b@id*) (or (G2d5e@bound-id=? G316a@id (car G316b@id*)) (G2d66@bound-id-member? G316a@id (cdr G316b@id*)))))) (set! G2d68@self-evaluating? (lambda (G316e@x) (or (number? G316e@x) (string? G316e@x) (char? G316e@x) (boolean? G316e@x) (regexp? G316e@x) (bytevector? G316e@x)))) (set! G2d6a@strip-annotations (lambda (G3170@x) (if (pair? G3170@x) (cons (G2d6a@strip-annotations (car G3170@x)) (G2d6a@strip-annotations (cdr G3170@x))) (if (vector? G3170@x) (vector-map G2d6a@strip-annotations G3170@x) (if (G28e9@G2814@annotation? G3170@x) (G28e8@G2812@annotation-stripped G3170@x) G3170@x))))) (set! G2d6c@strip (lambda (G3172@x G3173@m*) (if (G2cd2@top-marked? G3173@m*) (if (or (G28e9@G2814@annotation? G3172@x) (and (pair? G3172@x) (G28e9@G2814@annotation? (car G3172@x))) (and (vector? G3172@x) (> (vector-length G3172@x) '0) (G28e9@G2814@annotation? (vector-ref G3172@x '0)))) (G2d6a@strip-annotations G3172@x) G3172@x) ((letrec ((G3176@f (lambda (G3178@x) (if (G2d20@stx? G3178@x) (G2d6c@strip (G2d24@stx-expr G3178@x) (G2d26@stx-mark* G3178@x)) (if (G28e9@G2814@annotation? G3178@x) (G28e8@G2812@annotation-stripped G3178@x) (if (pair? G3178@x) ((lambda (G317a@a G317b@d) (if (and (eq? G317a@a (car G3178@x)) (eq? G317b@d (cdr G3178@x))) G3178@x (cons G317a@a G317b@d))) (G3176@f (car G3178@x)) (G3176@f (cdr G3178@x))) (if (vector? G3178@x) ((lambda (G317e@old) ((lambda (G3180@new) (if (for-all eq? G317e@old G3180@new) G3178@x (list->vector G3180@new))) (map G3176@f G317e@old))) (vector->list G3178@x)) G3178@x))))))) G3176@f) G3172@x)))) (set! G2d6e@stx->datum (lambda (G3182@x) (G2d6c@strip G3182@x '()))) (set! G2d70@same-marks*? (lambda (G3184@mark* G3185@mark** G3186@si) (if (null? G3186@si) '#f (if (G2d5c@same-marks? G3184@mark* (vector-ref G3185@mark** (car G3186@si))) (car G3186@si) (G2d70@same-marks*? G3184@mark* G3185@mark** (cdr G3186@si)))))) (set! G2d72@id->label (lambda (G318a@id) (or (G2d74@id->real-label G318a@id) ((lambda (G318c@t) (if G318c@t ((lambda (G318e@env) ((lambda (G3190@rib) (call-with-values (lambda () (G2cdc@gen-define-label+loc G318a@id G3190@rib)) (lambda (G3194@G3192 G3195@G3193) ((lambda (G3198@loc_ G3199@lab) (begin (G2d09@extend-rib! G3190@rib G318a@id G3199@lab) G3199@lab)) G3195@G3193 G3194@G3192)))) (G3002@interaction-env-rib G318e@env))) G318c@t) '#f)) (G3050@top-level-context))))) (set! G2d74@id->real-label (lambda (G319c@id) ((lambda (G319e@sym) ((letrec ((G31a0@search (lambda (G31a2@subst* G31a3@mark*) (if (null? G31a2@subst*) '#f (if (eq? (car G31a2@subst*) 'shift) (G31a0@search (cdr G31a2@subst*) (cdr G31a3@mark*)) ((lambda (G31a6@rib) ((lambda (G31a8@t) (if G31a8@t ((lambda (G31aa@ht) ((lambda (G31ac@si) ((lambda (G31ae@i) (if G31ae@i (vector-ref (G2cf3@rib-label* G31a6@rib) G31ae@i) (G31a0@search (cdr G31a2@subst*) G31a3@mark*))) (and G31ac@si (G2d70@same-marks*? G31a3@mark* (G2cf1@rib-mark** G31a6@rib) (reverse G31ac@si))))) (hashtable-ref G31aa@ht G319e@sym '#f))) G31a8@t) (or (G2d07@find-label G31a6@rib G319e@sym G31a3@mark*) ((letrec ((G31b0@f (lambda (G31b2@sym* G31b3@mark** G31b4@label*) (if (null? G31b2@sym*) (G31a0@search (cdr G31a2@subst*) G31a3@mark*) (if (and (eq? (car G31b2@sym*) G319e@sym) (G2d5c@same-marks? (car G31b3@mark**) G31a3@mark*)) (car G31b4@label*) (G31b0@f (cdr G31b2@sym*) (cdr G31b3@mark**) (cdr G31b4@label*))))))) G31b0@f) (G2cef@rib-sym* G31a6@rib) (G2cf1@rib-mark** G31a6@rib) (G2cf3@rib-label* G31a6@rib))))) (G2cf5@rib-sealed/freq G31a6@rib))) (car G31a2@subst*))))))) G31a0@search) (G2d28@stx-subst* G319c@id) (G2d26@stx-mark* G319c@id))) (G2d5a@id->sym G319c@id)))) (set! G2d76@label->binding (lambda (G31b8@x G31b9@r) ((lambda (G31bc@t) (if G31bc@t ((lambda (G31be@b) (if (and (pair? G31be@b) (eq? (car G31be@b) '$core-rtd)) (cons '$rtd (map G2f0d@bless (cdr G31be@b))) (if (and (pair? G31be@b) (eq? (car G31be@b) 'global-rtd)) ((lambda (G31c0@lib G31c1@loc) (cons '$rtd (symbol-value G31c1@loc))) (cadr G31be@b) (cddr G31be@b)) G31be@b))) G31bc@t) ((lambda (G31c4@t) (if G31c4@t (cdr G31c4@t) ((lambda (G31c6@t) (if G31c6@t ((lambda (G31c8@env) ((lambda (G31ca@t) (if G31ca@t ((lambda (G31cc@p) (cons* 'lexical (cdr G31cc@p) '#f)) G31ca@t) '(displaced-lexical . #f))) (assq G31b8@x (G3006@interaction-env-locs G31c8@env)))) G31c6@t) '(displaced-lexical . #f))) (G3050@top-level-context)))) (assq G31b8@x G31b9@r)))) (G2b6e@G2a14@imported-label->binding G31b8@x)))) (set! G2d78@make-binding cons) (set! G2d7a@binding-type car) (set! G2d7c@binding-value cdr) (set! G2d7e@raise-unbound-error (lambda (G31ce@id) (G3040@syntax-violation* '#f '"unbound identifier" G31ce@id (G4c7a@G4ac4@make-undefined-violation)))) (set! G2d80@syntax-type (lambda (G31d0@e G31d1@r) (if (G2d58@id? G31d0@e) ((lambda (G31d4@id) ((lambda (G31d6@label) ((lambda (G31d8@b) ((lambda (G31da@type) ((lambda () (begin (if (not G31d6@label) (G2d7e@raise-unbound-error G31d4@id) (void)) ((lambda (G31dc@t) (if (memv G31dc@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31da@type (G2d7c@binding-value G31d8@b) G31d4@id) (values 'other '#f '#f))) G31da@type))))) (G2d7a@binding-type G31d8@b))) (G2d76@label->binding G31d6@label G31d1@r))) (G2d72@id->label G31d4@id))) G31d0@e) (if (G2d4a@syntax-pair? G31d0@e) ((lambda (G31de@id) (if (G2d58@id? G31de@id) ((lambda (G31e0@label) ((lambda (G31e2@b) ((lambda (G31e4@type) ((lambda () (begin (if (not G31e0@label) (G2d7e@raise-unbound-error G31de@id) (void)) ((lambda (G31e6@t) (if (memv G31e6@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31e4@type (G2d7c@binding-value G31e2@b) G31de@id) (values 'call '#f '#f))) G31e4@type))))) (G2d7a@binding-type G31e2@b))) (G2d76@label->binding G31e0@label G31d1@r))) (G2d72@id->label G31de@id)) (values 'call '#f '#f))) (G2d52@syntax-car G31d0@e)) ((lambda (G31e8@d) (if (G2d68@self-evaluating? G31e8@d) (values 'constant G31e8@d '#f) (values 'other '#f '#f))) (G2d6e@stx->datum G31d0@e)))))) (set! G2d90@sanitize-binding (lambda (G31ea@x G31eb@src) (if (procedure? G31ea@x) (cons* 'local-macro G31ea@x G31eb@src) (if (and (pair? G31ea@x) (eq? (car G31ea@x) 'macro!) (procedure? (cdr G31ea@x))) (cons* 'local-macro! (cdr G31ea@x) G31eb@src) (if (and (pair? G31ea@x) (eq? (car G31ea@x) '$rtd)) G31ea@x (assertion-violation 'expand '"invalid transformer" G31ea@x)))))) (set! G2d92@make-variable-transformer (lambda (G31ee@x) (if (procedure? G31ee@x) (cons 'macro! G31ee@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31ee@x)))) (set! G2d94@variable-transformer? (lambda (G31f0@x) (and (pair? G31f0@x) (eq? (car G31f0@x) 'macro!) (procedure? (cdr G31f0@x))))) (set! G2d96@variable-transformer-procedure (lambda (G31f2@x) (if (G2d94@variable-transformer? G31f2@x) (cdr G31f2@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31f2@x)))) (set! G2d98@make-eval-transformer (lambda (G31f4@x) (G2d90@sanitize-binding (eval-core (G2948@G2900@expanded->core G31f4@x)) G31f4@x))) (set! G2edb@parse-define (lambda (G31f6@x) ((lambda (G31f8@t) ((lambda (G31fa@ls/false) (if (and G31fa@ls/false (apply (lambda (G31fc@id G31fd@fmls G31fe@b G31ff@b*) (G2d58@id? G31fc@id)) G31fa@ls/false)) (apply (lambda (G3204@id G3205@fmls G3206@b G3207@b*) (begin (G2f7f@verify-formals G3205@fmls G31f6@x) (values G3204@id (cons 'defun (cons G3205@fmls (cons G3206@b G3207@b*)))))) G31fa@ls/false) ((lambda (G320c@t) ((lambda (G320e@ls/false) (if (and G320e@ls/false (apply (lambda (G3210@id G3211@val) (G2d58@id? G3210@id)) G320e@ls/false)) (apply (lambda (G3214@id G3215@val) (values G3214@id (cons 'expr G3215@val))) G320e@ls/false) ((lambda (G3218@t) ((lambda (G321a@ls/false) (if (and G321a@ls/false (apply (lambda (G321c@id) (G2d58@id? G321c@id)) G321a@ls/false)) (apply (lambda (G321e@id) (values G321e@id (cons 'expr (G2f0d@bless '(void))))) G321a@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3218@t))) (G2f57@syntax-dispatch G3218@t '(_ any)))) G320c@t))) (G2f57@syntax-dispatch G320c@t '(_ any any)))) G31f8@t))) (G2f57@syntax-dispatch G31f8@t '(_ (any . any) any . each-any)))) G31f6@x))) (set! G2edd@parse-define-syntax (lambda (G3220@x) ((lambda (G3222@t) ((lambda (G3224@ls/false) (if (and G3224@ls/false (apply (lambda (G3226@id G3227@val) (G2d58@id? G3226@id)) G3224@ls/false)) (apply (lambda (G322a@id G322b@val) (values G322a@id G322b@val)) G3224@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3222@t))) (G2f57@syntax-dispatch G3222@t '(_ any any)))) G3220@x))) (set! G2edf@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ee1@scheme-stx (lambda (G322e@sym) (or (hashtable-ref G2edf@scheme-stx-hashtable G322e@sym '#f) ((lambda (G3230@subst) ((lambda (G3232@stx) ((lambda (G3234@stx) ((lambda () (begin (hashtable-set! G2edf@scheme-stx-hashtable G322e@sym G3234@stx) G3234@stx)))) ((lambda (G3236@t) (if G3236@t ((lambda (G3238@x) ((lambda (G323a@name G323b@label) (G2d44@add-subst (G2ced@make-rib (list G323a@name) (list G2cd0@top-mark*) (list G323b@label) '#f '#f) G3232@stx)) (car G3238@x) (cdr G3238@x))) G3236@t) G3232@stx)) (assq G322e@sym G3230@subst)))) (G2d22@make-stx G322e@sym G2cd0@top-mark* '() '()))) (G2b44@G29c0@library-subst (G2b68@G2a08@find-library-by-name '(psyntax system $all))))))) (set! G2ee3@lexical-var car) (set! G2ee5@lexical-mutable? cdr) (set! G2ee7@set-lexical-mutable! set-cdr!) (set! G2ee9@add-lexical (lambda (G323e@lab G323f@lex G3240@r) (cons (cons* G323e@lab 'lexical G323f@lex '#f) G3240@r))) (set! G2eeb@add-lexicals (lambda (G3244@lab* G3245@lex* G3246@r) (if (null? G3244@lab*) G3246@r (G2eeb@add-lexicals (cdr G3244@lab*) (cdr G3245@lex*) (G2ee9@add-lexical (car G3244@lab*) (car G3245@lex*) G3246@r))))) (set! G2eed@letrec-helper (lambda (G324a@e G324b@r G324c@mr G324d@build) ((lambda (G3252@t) ((lambda (G3254@ls/false) (if G3254@ls/false (apply (lambda (G3256@lhs* G3257@rhs* G3258@b G3259@b*) (if (not (G2d62@valid-bound-ids? G3256@lhs*)) (G2f11@invalid-fmls-error G324a@e G3256@lhs*) ((lambda (G325e@lex* G325f@lab*) ((lambda (G3262@rib G3263@r) ((lambda (G3266@body G3267@rhs*) (G324d@build '#f G325e@lex* G3267@rhs* G3266@body)) (G2f91@chi-internal (G2d44@add-subst G3262@rib (cons G3258@b G3259@b*)) G3263@r G324c@mr) (G2f77@chi-expr* (map (lambda (G326a@x) (G2d44@add-subst G3262@rib G326a@x)) G3257@rhs*) G3263@r G324c@mr))) (G2d13@make-full-rib G3256@lhs* G325f@lab*) (G2eeb@add-lexicals G325f@lab* G325e@lex* G324b@r))) (map G2cd4@gen-lexical G3256@lhs*) (map G2cd8@gen-label G3256@lhs*)))) G3254@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3252@t))) (G2f57@syntax-dispatch G3252@t '(_ #(each (any any)) any . each-any)))) G324a@e))) (set! G2eef@letrec-transformer (lambda (G326c@e G326d@r G326e@mr) (G2eed@letrec-helper G326c@e G326d@r G326e@mr G2cb7@G2c2a@build-letrec))) (set! G2ef1@letrec*-transformer (lambda (G3272@e G3273@r G3274@mr) (G2eed@letrec-helper G3272@e G3273@r G3274@mr G2cb8@G2c2c@build-letrec*))) (set! G2ef3@fluid-let-syntax-transformer (lambda (G3278@e G3279@r G327a@mr) ((lambda (G327f@lookup) (begin (set! G327f@lookup (lambda (G3292@x) (or (G2d72@id->label G3292@x) (G3042@syntax-violation '#f '"unbound identifier" G3278@e G3292@x)))) ((lambda (G3280@t) ((lambda (G3282@ls/false) (if G3282@ls/false (apply (lambda (G3284@lhs* G3285@rhs* G3286@b G3287@b*) (if (not (G2d62@valid-bound-ids? G3284@lhs*)) (G2f11@invalid-fmls-error G3278@e G3284@lhs*) ((lambda (G328c@lab* G328d@rhs*) (G2f91@chi-internal (cons G3286@b G3287@b*) (append (map cons G328c@lab* G328d@rhs*) G3279@r) (append (map cons G328c@lab* G328d@rhs*) G327a@mr))) (map G327f@lookup G3284@lhs*) (map (lambda (G3290@x) (G2d98@make-eval-transformer (G2fb6@expand-transformer G3290@x G327a@mr))) G3285@rhs*)))) G3282@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3280@t))) (G2f57@syntax-dispatch G3280@t '(_ #(each (any any)) any . each-any)))) G3278@e))) '#f))) (set! G2ef5@type-descriptor-transformer (lambda (G3294@e G3295@r G3296@mr) ((lambda (G329a@t) ((lambda (G329c@ls/false) (if (and G329c@ls/false (apply (lambda (G329e@id) (G2d58@id? G329e@id)) G329c@ls/false)) (apply (lambda (G32a0@id) ((lambda (G32a2@lab) ((lambda (G32a4@b) ((lambda (G32a6@type) ((lambda () (begin (if (not G32a2@lab) (G2d7e@raise-unbound-error G32a0@id) (void)) (if (not (and (eq? G32a6@type '$rtd) (not (list? (G2d7c@binding-value G32a4@b))))) (G3042@syntax-violation '#f '"not a record type" G3294@e) (void)) (list 'quote (G2d7c@binding-value G32a4@b)))))) (G2d7a@binding-type G32a4@b))) (G2d76@label->binding G32a2@lab G3295@r))) (G2d72@id->label G32a0@id))) G329c@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G329a@t))) (G2f57@syntax-dispatch G329a@t '(_ any)))) G3294@e))) (set! G2ef7@record-type-descriptor-transformer (lambda (G32a8@e G32a9@r G32aa@mr) ((lambda (G32ae@t) ((lambda (G32b0@ls/false) (if (and G32b0@ls/false (apply (lambda (G32b2@id) (G2d58@id? G32b2@id)) G32b0@ls/false)) (apply (lambda (G32b4@id) ((lambda (G32b6@lab) ((lambda (G32b8@b) ((lambda (G32ba@type) ((lambda () (begin (if (not G32b6@lab) (G2d7e@raise-unbound-error G32b4@id) (void)) (if (not (and (eq? G32ba@type '$rtd) (list? (G2d7c@binding-value G32b8@b)))) (G3042@syntax-violation '#f '"not a record type" G32a8@e) (void)) (G2f7b@chi-expr (car (G2d7c@binding-value G32b8@b)) G32a9@r G32aa@mr))))) (G2d7a@binding-type G32b8@b))) (G2d76@label->binding G32b6@lab G32a9@r))) (G2d72@id->label G32b4@id))) G32b0@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G32ae@t))) (G2f57@syntax-dispatch G32ae@t '(_ any)))) G32a8@e))) (set! G2ef9@record-constructor-descriptor-transformer (lambda (G32bc@e G32bd@r G32be@mr) ((lambda (G32c2@t) ((lambda (G32c4@ls/false) (if (and G32c4@ls/false (apply (lambda (G32c6@id) (G2d58@id? G32c6@id)) G32c4@ls/false)) (apply (lambda (G32c8@id) ((lambda (G32ca@lab) ((lambda (G32cc@b) ((lambda (G32ce@type) ((lambda () (begin (if (not G32ca@lab) (G2d7e@raise-unbound-error G32c8@id) (void)) (if (not (and (eq? G32ce@type '$rtd) (list? (G2d7c@binding-value G32cc@b)))) (G3042@syntax-violation '#f '"invalid type" G32bc@e) (void)) (G2f7b@chi-expr (cadr (G2d7c@binding-value G32cc@b)) G32bd@r G32be@mr))))) (G2d7a@binding-type G32cc@b))) (G2d76@label->binding G32ca@lab G32bd@r))) (G2d72@id->label G32c8@id))) G32c4@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G32c2@t))) (G2f57@syntax-dispatch G32c2@t '(_ any)))) G32bc@e))) (set! G2efb@when-macro (lambda (G32d0@e) ((lambda (G32d2@t) ((lambda (G32d4@ls/false) (if G32d4@ls/false (apply (lambda (G32d6@test G32d7@e G32d8@e*) (G2f0d@bless (list 'if G32d6@test (cons 'begin (cons G32d7@e G32d8@e*))))) G32d4@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G32d2@t))) (G2f57@syntax-dispatch G32d2@t '(_ any any . each-any)))) G32d0@e))) (set! G2efd@unless-macro (lambda (G32dc@e) ((lambda (G32de@t) ((lambda (G32e0@ls/false) (if G32e0@ls/false (apply (lambda (G32e2@test G32e3@e G32e4@e*) (G2f0d@bless (list 'if (list 'not G32e2@test) (cons 'begin (cons G32e3@e G32e4@e*))))) G32e0@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G32de@t))) (G2f57@syntax-dispatch G32de@t '(_ any any . each-any)))) G32dc@e))) (set! G2eff@if-transformer (lambda (G32e8@e G32e9@r G32ea@mr) ((lambda (G32ee@t) ((lambda (G32f0@ls/false) (if G32f0@ls/false (apply (lambda (G32f2@e0 G32f3@e1 G32f4@e2) (list 'if (G2f7b@chi-expr G32f2@e0 G32e9@r G32ea@mr) (G2f7b@chi-expr G32f3@e1 G32e9@r G32ea@mr) (G2f7b@chi-expr G32f4@e2 G32e9@r G32ea@mr))) G32f0@ls/false) ((lambda (G32f8@t) ((lambda (G32fa@ls/false) (if G32fa@ls/false (apply (lambda (G32fc@e0 G32fd@e1) (list 'if (G2f7b@chi-expr G32fc@e0 G32e9@r G32ea@mr) (G2f7b@chi-expr G32fd@e1 G32e9@r G32ea@mr) (G2cb6@G2c28@build-void))) G32fa@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G32f8@t))) (G2f57@syntax-dispatch G32f8@t '(_ any any)))) G32ee@t))) (G2f57@syntax-dispatch G32ee@t '(_ any any any)))) G32e8@e))) (set! G2f01@and-transformer (lambda (G3300@e G3301@r G3302@mr) ((lambda (G3306@t) ((lambda (G3308@ls/false) (if G3308@ls/false (apply (lambda (G330a@e*) (cons 'and (G2f77@chi-expr* G330a@e* G3301@r G3302@mr))) G3308@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3306@t))) (G2f57@syntax-dispatch G3306@t '(_ . each-any)))) G3300@e))) (set! G2f03@or-transformer (lambda (G330c@e G330d@r G330e@mr) ((lambda (G3312@t) ((lambda (G3314@ls/false) (if G3314@ls/false (apply (lambda (G3316@e*) (cons 'or (G2f77@chi-expr* G3316@e* G330d@r G330e@mr))) G3314@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3312@t))) (G2f57@syntax-dispatch G3312@t '(_ . each-any)))) G330c@e))) (set! G2f05@case-macro (lambda (G3318@e) ((lambda (G331b@build-last G331d@build-one) (begin (set! G331b@build-last (lambda (G3342@cls) ((lambda (G3344@t) ((lambda (G3346@ls/false) (if G3346@ls/false (apply (lambda (G3348@e G3349@e*) (cons 'begin (cons G3348@e G3349@e*))) G3346@ls/false) ((lambda (G334c@t) ((lambda (G334e@ls/false) (if G334e@ls/false (apply (lambda () (G331d@build-one G3342@cls '(if #f #f))) G334e@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G334c@t))) (G2f57@syntax-dispatch G334c@t '_))) G3344@t))) (G2f57@syntax-dispatch G3344@t '(#(scheme-id else) any . each-any)))) G3342@cls))) (set! G331d@build-one (lambda (G3334@cls G3335@k) ((lambda (G3338@t) ((lambda (G333a@ls/false) (if G333a@ls/false (apply (lambda (G333c@d* G333d@e G333e@e*) (list 'if (list 'memv 't (list 'quote G333c@d*)) (cons 'begin (cons G333d@e G333e@e*)) G3335@k)) G333a@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3338@t))) (G2f57@syntax-dispatch G3338@t '(each-any any . each-any)))) G3334@cls))) ((lambda (G331e@t) ((lambda (G3320@ls/false) (if G3320@ls/false (apply (lambda (G3322@expr) (G2f0d@bless (cons 'let (cons (list (list 't G3322@expr)) '((if #f #f)))))) G3320@ls/false) ((lambda (G3324@t) ((lambda (G3326@ls/false) (if G3326@ls/false (apply (lambda (G3328@expr G3329@cls G332a@cls*) (G2f0d@bless (list 'let (list (list 't G3328@expr)) ((letrec ((G332e@f (lambda (G3330@cls G3331@cls*) (if (null? G3331@cls*) (G331b@build-last G3330@cls) (G331d@build-one G3330@cls (G332e@f (car G3331@cls*) (cdr G3331@cls*))))))) G332e@f) G3329@cls G332a@cls*)))) G3326@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3324@t))) (G2f57@syntax-dispatch G3324@t '(_ any any . each-any)))) G331e@t))) (G2f57@syntax-dispatch G331e@t '(_ any)))) G3318@e))) '#f '#f))) (set! G2f07@quote-transformer (lambda (G3350@e G3351@r G3352@mr) ((lambda (G3356@t) ((lambda (G3358@ls/false) (if G3358@ls/false (apply (lambda (G335a@datum) (list 'quote (G2d6e@stx->datum G335a@datum))) G3358@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3356@t))) (G2f57@syntax-dispatch G3356@t '(_ any)))) G3350@e))) (set! G2f09@case-lambda-transformer (lambda (G335c@e G335d@r G335e@mr) ((lambda (G3362@t) ((lambda (G3364@ls/false) (if G3364@ls/false (apply (lambda (G3366@fmls* G3367@b* G3368@b**) (call-with-values (lambda () (G2f83@chi-lambda-clause* G335c@e G3366@fmls* (map cons G3367@b* G3368@b**) G335d@r G335e@mr)) (lambda (G336e@G336c G336f@G336d) ((lambda (G3372@body* G3373@fmls*) (G2cb3@G2bf2@build-case-lambda '#f G3373@fmls* G3372@body*)) G336f@G336d G336e@G336c)))) G3364@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3362@t))) (G2f57@syntax-dispatch G3362@t '(_ . #(each (any any . each-any)))))) G335c@e))) (set! G2f0b@lambda-transformer (lambda (G3376@e G3377@r G3378@mr) ((lambda (G337c@t) ((lambda (G337e@ls/false) (if G337e@ls/false (apply (lambda (G3380@fmls G3381@b G3382@b*) (call-with-values (lambda () (G2f81@chi-lambda-clause G3376@e G3380@fmls (cons G3381@b G3382@b*) G3377@r G3378@mr)) (lambda (G3388@G3386 G3389@G3387) ((lambda (G338c@body G338d@fmls) (G2cb2@G2bf0@build-lambda '#f G338d@fmls G338c@body)) G3389@G3387 G3388@G3386)))) G337e@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G337c@t))) (G2f57@syntax-dispatch G337c@t '(_ any any . each-any)))) G3376@e))) (set! G2f0d@bless (lambda (G3390@x) (G2d40@mkstx ((letrec ((G3392@f (lambda (G3394@x) (if (G2d20@stx? G3394@x) G3394@x (if (pair? G3394@x) (cons (G3392@f (car G3394@x)) (G3392@f (cdr G3394@x))) (if (symbol? G3394@x) (G2ee1@scheme-stx G3394@x) (if (vector? G3394@x) (vector-map G3392@f G3394@x) G3394@x))))))) G3392@f) G3390@x) '() '() '()))) (set! G2f0f@with-syntax-macro (lambda (G3396@e) ((lambda (G3398@t) ((lambda (G339a@ls/false) (if G339a@ls/false (apply (lambda (G339c@pat* G339d@expr* G339e@b G339f@b*) ((lambda (G33a4@idn*) (begin (G2f7f@verify-formals (map car G33a4@idn*) G3396@e) ((lambda (G33a6@t*) (G2f0d@bless (list 'let (map list G33a6@t* G339d@expr*) ((letrec ((G33a8@f (lambda (G33aa@pat* G33ab@t*) (if (null? G33aa@pat*) (cons 'begin (cons '#f (cons G339e@b G339f@b*))) (list 'syntax-case (car G33ab@t*) '() (list (car G33aa@pat*) (G33a8@f (cdr G33aa@pat*) (cdr G33ab@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33aa@pat*)) (car G33ab@t*)))))))) G33a8@f) G339c@pat* G33a6@t*)))) (G3030@generate-temporaries G339d@expr*)))) ((letrec ((G33ae@f (lambda (G33b0@pat*) (if (null? G33b0@pat*) '() (call-with-values (lambda () (G2f55@convert-pattern (car G33b0@pat*) '())) (lambda (G33b4@G33b2 G33b5@G33b3) ((lambda (G33b8@idn* G33b9@pat) (append G33b8@idn* (G33ae@f (cdr G33b0@pat*)))) G33b5@G33b3 G33b4@G33b2))))))) G33ae@f) G339c@pat*))) G339a@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3398@t))) (G2f57@syntax-dispatch G3398@t '(_ #(each (any any)) any . each-any)))) G3396@e))) (set! G2f11@invalid-fmls-error (lambda (G33bc@stx G33bd@fmls) ((lambda (G33c0@t) ((lambda (G33c2@ls/false) (if G33c2@ls/false (apply (lambda (G33c4@id* G33c5@last) ((letrec ((G33c8@f (lambda (G33ca@id*) (if (null? G33ca@id*) (values) (if (not (G2d58@id? (car G33ca@id*))) (G3042@syntax-violation '#f '"not an identifier" G33bc@stx (car G33ca@id*)) (begin (G33c8@f (cdr G33ca@id*)) (if (G2d66@bound-id-member? (car G33ca@id*) (cdr G33ca@id*)) (G3042@syntax-violation '#f '"duplicate binding" G33bc@stx (car G33ca@id*)) (void)))))))) G33c8@f) (if (G2d58@id? G33c5@last) (cons G33c5@last G33c4@id*) (if (G2d4e@syntax-null? G33c5@last) G33c4@id* (G3042@syntax-violation '#f '"not an identifier" G33bc@stx G33c5@last))))) G33c2@ls/false) ((lambda (G33cc@t) ((lambda (G33ce@ls/false) (if G33ce@ls/false (apply (lambda () (G3042@syntax-violation '#f '"malformed binding form" G33bc@stx G33bd@fmls)) G33ce@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G33cc@t))) (G2f57@syntax-dispatch G33cc@t '_))) G33c0@t))) (G2f57@syntax-dispatch G33c0@t '#(each+ any () any)))) G33bd@fmls))) (set! G2f13@let-macro (lambda (G33d0@stx) ((lambda (G33d2@t) ((lambda (G33d4@ls/false) (if G33d4@ls/false (apply (lambda (G33d6@lhs* G33d7@rhs* G33d8@b G33d9@b*) (if (G2d62@valid-bound-ids? G33d6@lhs*) (G2f0d@bless (cons (cons 'lambda (cons G33d6@lhs* (cons G33d8@b G33d9@b*))) G33d7@rhs*)) (G2f11@invalid-fmls-error G33d0@stx G33d6@lhs*))) G33d4@ls/false) ((lambda (G33de@t) ((lambda (G33e0@ls/false) (if (and G33e0@ls/false (apply (lambda (G33e2@f G33e3@lhs* G33e4@rhs* G33e5@b G33e6@b*) (G2d58@id? G33e2@f)) G33e0@ls/false)) (apply (lambda (G33ec@f G33ed@lhs* G33ee@rhs* G33ef@b G33f0@b*) (if (G2d62@valid-bound-ids? G33ed@lhs*) (G2f0d@bless (cons (list 'letrec (list (list G33ec@f (cons 'lambda (cons G33ed@lhs* (cons G33ef@b G33f0@b*))))) G33ec@f) G33ee@rhs*)) (G2f11@invalid-fmls-error G33d0@stx G33ed@lhs*))) G33e0@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G33de@t))) (G2f57@syntax-dispatch G33de@t '(_ any #(each (any any)) any . each-any)))) G33d2@t))) (G2f57@syntax-dispatch G33d2@t '(_ #(each (any any)) any . each-any)))) G33d0@stx))) (set! G2f15@let-values-macro (lambda (G33f6@stx) ((lambda (G33f9@rename G33fb@rename*) (begin (set! G33f9@rename (lambda (G345b@x G345c@old* G345d@new*) (begin (if (not (G2d58@id? G345b@x)) (G3042@syntax-violation '#f '"not an indentifier" G33f6@stx G345b@x) (void)) (if (G2d66@bound-id-member? G345b@x G345c@old*) (G3042@syntax-violation '#f '"duplicate binding" G33f6@stx G345b@x) (void)) ((lambda (G3461@y) (values G3461@y (cons G345b@x G345c@old*) (cons G3461@y G345d@new*))) (gensym (G3048@syntax->datum G345b@x)))))) (set! G33fb@rename* (lambda (G3449@x* G344a@old* G344b@new*) (if (null? G3449@x*) (values '() G344a@old* G344b@new*) (call-with-values (lambda () (G33f9@rename (car G3449@x*) G344a@old* G344b@new*)) (lambda (G344f@x G3450@old* G3451@new*) (call-with-values (lambda () (G33fb@rename* (cdr G3449@x*) G3450@old* G3451@new*)) (lambda (G3455@x* G3456@old* G3457@new*) (values (cons G344f@x G3455@x*) G3456@old* G3457@new*)))))))) ((lambda (G33fc@t) ((lambda (G33fe@ls/false) (if G33fe@ls/false (apply (lambda (G3400@b G3401@b*) (cons* (G2f0d@bless 'let) '() G3400@b G3401@b*)) G33fe@ls/false) ((lambda (G3404@t) ((lambda (G3406@ls/false) (if G3406@ls/false (apply (lambda (G3408@lhs* G3409@rhs* G340a@b G340b@b*) (G2f0d@bless ((letrec ((G3410@f (lambda (G3412@lhs* G3413@rhs* G3414@old* G3415@new*) (if (null? G3412@lhs*) (cons 'let (cons (map list G3414@old* G3415@new*) (cons G340a@b G340b@b*))) ((lambda (G341a@t) ((lambda (G341c@ls/false) (if G341c@ls/false (apply (lambda (G341e@x*) (call-with-values (lambda () (G33fb@rename* G341e@x* G3414@old* G3415@new*)) (lambda (G3423@G3420 G3424@G3421 G3425@G3422) ((lambda (G3429@new* G342a@old* G342b@y*) (list 'call-with-values (list 'lambda '() (car G3413@rhs*)) (list 'lambda G342b@y* (G3410@f (cdr G3412@lhs*) (cdr G3413@rhs*) G342a@old* G3429@new*)))) G3425@G3422 G3424@G3421 G3423@G3420)))) G341c@ls/false) ((lambda (G342f@t) ((lambda (G3431@ls/false) (if G3431@ls/false (apply (lambda (G3433@x* G3434@x) (call-with-values (lambda () (G33f9@rename G3434@x G3414@old* G3415@new*)) (lambda (G3437@y G3438@old* G3439@new*) (call-with-values (lambda () (G33fb@rename* G3433@x* G3438@old* G3439@new*)) (lambda (G343d@y* G343e@old* G343f@new*) (list 'call-with-values (list 'lambda '() (car G3413@rhs*)) (list 'lambda (append G343d@y* G3437@y) (G3410@f (cdr G3412@lhs*) (cdr G3413@rhs*) G343e@old* G343f@new*)))))))) G3431@ls/false) ((lambda (G3443@t) ((lambda (G3445@ls/false) (if G3445@ls/false (apply (lambda (G3447@others) (G3042@syntax-violation '#f '"malformed bindings" G33f6@stx G3447@others)) G3445@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3443@t))) (G2f57@syntax-dispatch G3443@t 'any))) G342f@t))) (G2f57@syntax-dispatch G342f@t '#(each+ any () any)))) G341a@t))) (G2f57@syntax-dispatch G341a@t 'each-any))) (car G3412@lhs*)))))) G3410@f) G3408@lhs* G3409@rhs* '() '()))) G3406@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3404@t))) (G2f57@syntax-dispatch G3404@t '(_ #(each (any any)) any . each-any)))) G33fc@t))) (G2f57@syntax-dispatch G33fc@t '(_ () any . each-any)))) G33f6@stx))) '#f '#f))) (set! G2f17@let*-values-macro (lambda (G3463@stx) ((lambda (G3466@check) (begin (set! G3466@check (lambda (G3495@x*) (if (not (null? G3495@x*)) ((lambda (G3497@x) (begin (if (not (G2d58@id? G3497@x)) (G3042@syntax-violation '#f '"not an identifier" G3463@stx G3497@x) (void)) (G3466@check (cdr G3495@x*)) (if (G2d66@bound-id-member? G3497@x (cdr G3495@x*)) (G3042@syntax-violation '#f '"duplicate identifier" G3463@stx G3497@x) (void)))) (car G3495@x*)) (void)))) ((lambda (G3467@t) ((lambda (G3469@ls/false) (if G3469@ls/false (apply (lambda (G346b@b G346c@b*) (cons* (G2f0d@bless 'let) '() G346b@b G346c@b*)) G3469@ls/false) ((lambda (G346f@t) ((lambda (G3471@ls/false) (if G3471@ls/false (apply (lambda (G3473@lhs* G3474@rhs* G3475@b G3476@b*) (G2f0d@bless ((letrec ((G347b@f (lambda (G347d@lhs* G347e@rhs*) (if (null? G347d@lhs*) (cons 'begin (cons G3475@b G3476@b*)) ((lambda (G3481@t) ((lambda (G3483@ls/false) (if G3483@ls/false (apply (lambda (G3485@x*) (begin (G3466@check G3485@x*) (list 'call-with-values (list 'lambda '() (car G347e@rhs*)) (list 'lambda G3485@x* (G347b@f (cdr G347d@lhs*) (cdr G347e@rhs*)))))) G3483@ls/false) ((lambda (G3487@t) ((lambda (G3489@ls/false) (if G3489@ls/false (apply (lambda (G348b@x* G348c@x) (begin (G3466@check (cons G348c@x G348b@x*)) (list 'call-with-values (list 'lambda '() (car G347e@rhs*)) (list 'lambda (append G348b@x* G348c@x) (G347b@f (cdr G347d@lhs*) (cdr G347e@rhs*)))))) G3489@ls/false) ((lambda (G348f@t) ((lambda (G3491@ls/false) (if G3491@ls/false (apply (lambda (G3493@others) (G3042@syntax-violation '#f '"malformed bindings" G3463@stx G3493@others)) G3491@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G348f@t))) (G2f57@syntax-dispatch G348f@t 'any))) G3487@t))) (G2f57@syntax-dispatch G3487@t '#(each+ any () any)))) G3481@t))) (G2f57@syntax-dispatch G3481@t 'each-any))) (car G347d@lhs*)))))) G347b@f) G3473@lhs* G3474@rhs*))) G3471@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G346f@t))) (G2f57@syntax-dispatch G346f@t '(_ #(each (any any)) any . each-any)))) G3467@t))) (G2f57@syntax-dispatch G3467@t '(_ () any . each-any)))) G3463@stx))) '#f))) (set! G2f19@trace-lambda-macro (lambda (G3499@stx) ((lambda (G349b@t) ((lambda (G349d@ls/false) (if G349d@ls/false (apply (lambda (G349f@who G34a0@fmls G34a1@b G34a2@b*) (if (G2d62@valid-bound-ids? G34a0@fmls) (G2f0d@bless (list 'make-traced-procedure (list 'quote G349f@who) (cons 'lambda (cons G34a0@fmls (cons G34a1@b G34a2@b*))))) (G2f11@invalid-fmls-error G3499@stx G34a0@fmls))) G349d@ls/false) ((lambda (G34a7@t) ((lambda (G34a9@ls/false) (if G34a9@ls/false (apply (lambda (G34ab@who G34ac@fmls G34ad@last G34ae@b G34af@b*) (if (G2d62@valid-bound-ids? (cons G34ad@last G34ac@fmls)) (G2f0d@bless (list 'make-traced-procedure (list 'quote G34ab@who) (cons 'lambda (cons (append G34ac@fmls G34ad@last) (cons G34ae@b G34af@b*))))) (G2f11@invalid-fmls-error G3499@stx (append G34ac@fmls G34ad@last)))) G34a9@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G34a7@t))) (G2f57@syntax-dispatch G34a7@t '(_ any #(each+ any () any) any . each-any)))) G349b@t))) (G2f57@syntax-dispatch G349b@t '(_ any each-any any . each-any)))) G3499@stx))) (set! G2f1b@trace-define-macro (lambda (G34b5@stx) ((lambda (G34b7@t) ((lambda (G34b9@ls/false) (if G34b9@ls/false (apply (lambda (G34bb@who G34bc@fmls G34bd@b G34be@b*) (if (G2d62@valid-bound-ids? G34bc@fmls) (G2f0d@bless (list 'define G34bb@who (list 'make-traced-procedure (list 'quote G34bb@who) (cons 'lambda (cons G34bc@fmls (cons G34bd@b G34be@b*)))))) (G2f11@invalid-fmls-error G34b5@stx G34bc@fmls))) G34b9@ls/false) ((lambda (G34c3@t) ((lambda (G34c5@ls/false) (if G34c5@ls/false (apply (lambda (G34c7@who G34c8@fmls G34c9@last G34ca@b G34cb@b*) (if (G2d62@valid-bound-ids? (cons G34c9@last G34c8@fmls)) (G2f0d@bless (list 'define G34c7@who (list 'make-traced-procedure (list 'quote G34c7@who) (cons 'lambda (cons (append G34c8@fmls G34c9@last) (cons G34ca@b G34cb@b*)))))) (G2f11@invalid-fmls-error G34b5@stx (append G34c8@fmls G34c9@last)))) G34c5@ls/false) ((lambda (G34d1@t) ((lambda (G34d3@ls/false) (if G34d3@ls/false (apply (lambda (G34d5@who G34d6@expr) (if (G2d58@id? G34d5@who) (G2f0d@bless (list 'define G34d5@who (list 'let (list (list 'v G34d6@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34d5@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3042@syntax-violation '#f '"invalid name" G34b5@stx))) G34d3@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G34d1@t))) (G2f57@syntax-dispatch G34d1@t '(_ any any)))) G34c3@t))) (G2f57@syntax-dispatch G34c3@t '(_ (any . #(each+ any () any)) any . each-any)))) G34b7@t))) (G2f57@syntax-dispatch G34b7@t '(_ (any . each-any) any . each-any)))) G34b5@stx))) (set! G2f1d@trace-define-syntax-macro (lambda (G34d9@stx) ((lambda (G34db@t) ((lambda (G34dd@ls/false) (if G34dd@ls/false (apply (lambda (G34df@who G34e0@expr) (if (G2d58@id? G34df@who) (G2f0d@bless (list 'define-syntax G34df@who (list 'make-traced-macro (list 'quote G34df@who) G34e0@expr))) (G3042@syntax-violation '#f '"invalid name" G34d9@stx))) G34dd@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G34db@t))) (G2f57@syntax-dispatch G34db@t '(_ any any)))) G34d9@stx))) (set! G2f1f@trace-let/rec-syntax (lambda (G34e3@who) (lambda (G34e5@stx) ((lambda (G34e7@t) ((lambda (G34e9@ls/false) (if G34e9@ls/false (apply (lambda (G34eb@lhs* G34ec@rhs* G34ed@b G34ee@b*) (if (G2d62@valid-bound-ids? G34eb@lhs*) ((lambda (G34f3@rhs*) (G2f0d@bless (cons G34e3@who (cons (map list G34eb@lhs* G34f3@rhs*) (cons G34ed@b G34ee@b*))))) (map (lambda (G34f5@lhs G34f6@rhs) (list 'make-traced-macro (list 'quote G34f5@lhs) G34f6@rhs)) G34eb@lhs* G34ec@rhs*)) (G2f11@invalid-fmls-error G34e5@stx G34eb@lhs*))) G34e9@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G34e7@t))) (G2f57@syntax-dispatch G34e7@t '(_ #(each (any any)) any . each-any)))) G34e5@stx)))) (set! G2f21@trace-let-syntax-macro (G2f1f@trace-let/rec-syntax 'let-syntax)) (set! G2f23@trace-letrec-syntax-macro (G2f1f@trace-let/rec-syntax 'letrec-syntax)) (set! G2f25@guard-macro (lambda (G34f9@x) ((lambda (G34fc@gen-clauses) (begin (set! G34fc@gen-clauses (lambda (G3513@con G3514@outerk G3515@clause*) ((lambda (G351a@f G351c@f*) (begin (set! G351a@f (lambda (G354f@x G3550@k) ((lambda (G3553@t) ((lambda (G3555@ls/false) (if G3555@ls/false (apply (lambda (G3557@e G3558@p) ((lambda (G355b@t) (list 'let (list (list G355b@t G3557@e)) (list 'if G355b@t (list G3558@p G355b@t) G3550@k))) (gensym))) G3555@ls/false) ((lambda (G355d@t) ((lambda (G355f@ls/false) (if G355f@ls/false (apply (lambda (G3561@e) ((lambda (G3563@t) (list 'let (list (list G3563@t G3561@e)) (list 'if G3563@t G3563@t G3550@k))) (gensym))) G355f@ls/false) ((lambda (G3565@t) ((lambda (G3567@ls/false) (if G3567@ls/false (apply (lambda (G3569@e G356a@v G356b@v*) (list 'if G3569@e (cons 'begin (cons G356a@v G356b@v*)) G3550@k)) G3567@ls/false) ((lambda (G356f@t) ((lambda (G3571@ls/false) (if G3571@ls/false (apply (lambda () (G3042@syntax-violation '#f '"invalid guard clause" G354f@x)) G3571@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G356f@t))) (G2f57@syntax-dispatch G356f@t '_))) G3565@t))) (G2f57@syntax-dispatch G3565@t '(any any . each-any)))) G355d@t))) (G2f57@syntax-dispatch G355d@t '(any)))) G3553@t))) (G2f57@syntax-dispatch G3553@t '(any #(scheme-id =>) any)))) G354f@x))) (set! G351c@f* (lambda (G3527@x*) ((lambda (G3529@t) ((lambda (G352b@ls/false) (if G352b@ls/false (apply (lambda () ((lambda (G352d@g) (values (list G352d@g (list 'lambda '() (list 'raise-continuable G3513@con))) G352d@g)) (gensym))) G352b@ls/false) ((lambda (G352f@t) ((lambda (G3531@ls/false) (if G3531@ls/false (apply (lambda (G3533@e G3534@e*) (values (cons 'begin (cons G3533@e G3534@e*)) '#f)) G3531@ls/false) ((lambda (G3537@t) ((lambda (G3539@ls/false) (if G3539@ls/false (apply (lambda (G353b@cls G353c@cls*) (call-with-values (lambda () (G351c@f* G353c@cls*)) (lambda (G3541@G353f G3542@G3540) ((lambda (G3545@g G3546@e) (values (G351a@f G353b@cls G3546@e) G3545@g)) G3542@G3540 G3541@G353f)))) G3539@ls/false) ((lambda (G3549@t) ((lambda (G354b@ls/false) (if G354b@ls/false (apply (lambda (G354d@others) (G3042@syntax-violation '#f '"invalid guard clause" G354d@others)) G354b@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3549@t))) (G2f57@syntax-dispatch G3549@t 'any))) G3537@t))) (G2f57@syntax-dispatch G3537@t '(any . any)))) G352f@t))) (G2f57@syntax-dispatch G352f@t '((#(scheme-id else) any . each-any))))) G3529@t))) (G2f57@syntax-dispatch G3529@t '()))) G3527@x*))) (call-with-values (lambda () (G351c@f* G3515@clause*)) (lambda (G351f@G351d G3520@G351e) ((lambda (G3523@raisek G3524@code) (if G3523@raisek (list (list 'call/cc (list 'lambda (list G3523@raisek) (list G3514@outerk (list 'lambda '() G3524@code))))) (list G3514@outerk (list 'lambda '() G3524@code)))) G3520@G351e G351f@G351d))))) '#f '#f))) ((lambda (G34fd@t) ((lambda (G34ff@ls/false) (if (and G34ff@ls/false (apply (lambda (G3501@con G3502@clause* G3503@b G3504@b*) (G2d58@id? G3501@con)) G34ff@ls/false)) (apply (lambda (G3509@con G350a@clause* G350b@b G350c@b*) ((lambda (G3511@outerk) (G2f0d@bless (list (list 'call/cc (list 'lambda (list G3511@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G3509@con) (G34fc@gen-clauses G3509@con G3511@outerk G350a@clause*)) (cons 'lambda (cons '() (cons G350b@b G350c@b*)))))))))) (gensym))) G34ff@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G34fd@t))) (G2f57@syntax-dispatch G34fd@t '(_ (any . each-any) any . each-any)))) G34f9@x))) '#f))) (set! G2f27@define-enumeration-macro (lambda (G3573@stx) ((lambda (G3576@set? G3578@remove-dups) (begin (set! G3576@set? (lambda (G358f@x) (or (null? G358f@x) (and (not (memq (car G358f@x) (cdr G358f@x))) (G3576@set? (cdr G358f@x)))))) (set! G3578@remove-dups (lambda (G358d@ls) (if (null? G358d@ls) '() (cons (car G358d@ls) (G3578@remove-dups (remq (car G358d@ls) (cdr G358d@ls))))))) ((lambda (G3579@t) ((lambda (G357b@ls/false) (if (and G357b@ls/false (apply (lambda (G357d@name G357e@id* G357f@maker) (and (G2d58@id? G357d@name) (G2d58@id? G357f@maker) (for-all G2d58@id? G357e@id*))) G357b@ls/false)) (apply (lambda (G3583@name G3584@id* G3585@maker) ((lambda (G3589@name* G358a@mk) (G2f0d@bless (list 'begin (list 'define G358a@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3589@name*)))) (list 'define-syntax G3583@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3589@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3583@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3585@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3585@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3589@name*)) (cons 'syntax-violation (cons (list 'quote G3585@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G358a@mk '('(n* ...)))))))))))) (G3578@remove-dups (G3048@syntax->datum G3584@id*)) (gensym))) G357b@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3579@t))) (G2f57@syntax-dispatch G3579@t '(_ any each-any any)))) G3573@stx))) '#f '#f))) (set! G2f29@time-macro (lambda (G3591@stx) ((lambda (G3593@t) ((lambda (G3595@ls/false) (if G3595@ls/false (apply (lambda (G3597@expr) ((lambda (G3599@str) (G2f0d@bless (list 'time-it G3599@str (list 'lambda '() G3597@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G359d@G359b G359e@G359c) ((lambda (G35a1@e G35a2@p) (begin (write (G3048@syntax->datum G3597@expr) G35a2@p) (G35a1@e))) G359e@G359c G359d@G359b))))) G3595@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3593@t))) (G2f57@syntax-dispatch G3593@t '(_ any)))) G3591@stx))) (set! G2f2b@delay-macro (lambda (G35a5@stx) ((lambda (G35a7@t) ((lambda (G35a9@ls/false) (if G35a9@ls/false (apply (lambda (G35ab@expr) (G2f0d@bless (list 'make-promise (list 'lambda '() G35ab@expr)))) G35a9@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G35a7@t))) (G2f57@syntax-dispatch G35a7@t '(_ any)))) G35a5@stx))) (set! G2f2d@assert-macro (lambda (G35ad@stx) ((lambda (G35af@t) ((lambda (G35b1@ls/false) (if G35b1@ls/false (apply (lambda (G35b3@expr) ((lambda (G35b5@pos) (G2f0d@bless (list 'unless G35b3@expr (list 'assertion-error (list 'quote G35b3@expr) (list 'quote G35b5@pos))))) (or (G303a@expression-position G35ad@stx) (G303a@expression-position G35b3@expr)))) G35b1@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G35af@t))) (G2f57@syntax-dispatch G35af@t '(_ any)))) G35ad@stx))) (set! G2f2f@endianness-macro (lambda (G35b7@stx) ((lambda (G35b9@t) ((lambda (G35bb@ls/false) (if G35bb@ls/false (apply (lambda (G35bd@e) ((lambda (G35bf@t) (if (memv G35bf@t '(little)) (G2f0d@bless ''little) (if (memv G35bf@t '(big)) (G2f0d@bless ''big) (G3042@syntax-violation '#f '"endianness must be big or little" G35b7@stx)))) (G3048@syntax->datum G35bd@e))) G35bb@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G35b9@t))) (G2f57@syntax-dispatch G35b9@t '(_ any)))) G35b7@stx))) (set! G2f31@identifier-syntax-macro (lambda (G35c1@stx) ((lambda (G35c3@t) ((lambda (G35c5@ls/false) (if G35c5@ls/false (apply (lambda (G35c7@expr) (G2f0d@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35c7@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35c7@expr) '((syntax (e* ...)))))))))) G35c5@ls/false) ((lambda (G35c9@t) ((lambda (G35cb@ls/false) (if (and G35cb@ls/false (apply (lambda (G35cd@id1 G35ce@expr1 G35cf@id2 G35d0@expr2 G35d1@expr3) (and (G2d58@id? G35cd@id1) (G2d58@id? G35cf@id2) (G2d58@id? G35d0@expr2))) G35cb@ls/false)) (apply (lambda (G35d7@id1 G35d8@expr1 G35d9@id2 G35da@expr2 G35db@expr3) (G2f0d@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35d8@expr1)) (list (list 'set! 'id G35da@expr2) (list 'syntax G35db@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35d8@expr1 '(e* ...))))))))) G35cb@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G35c9@t))) (G2f57@syntax-dispatch G35c9@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35c3@t))) (G2f57@syntax-dispatch G35c3@t '(_ any)))) G35c1@stx))) (set! G2f33@do-macro (lambda (G35e1@stx) ((lambda (G35e4@bind) (begin (set! G35e4@bind (lambda (G35fb@x) ((lambda (G35fd@t) ((lambda (G35ff@ls/false) (if G35ff@ls/false (apply (lambda (G3601@x G3602@init) (list G3601@x G3602@init G3601@x)) G35ff@ls/false) ((lambda (G3605@t) ((lambda (G3607@ls/false) (if G3607@ls/false (apply (lambda (G3609@x G360a@init G360b@step) (list G3609@x G360a@init G360b@step)) G3607@ls/false) ((lambda (G360f@t) ((lambda (G3611@ls/false) (if G3611@ls/false (apply (lambda () (G3042@syntax-violation '#f '"invalid binding" G35e1@stx)) G3611@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G360f@t))) (G2f57@syntax-dispatch G360f@t '_))) G3605@t))) (G2f57@syntax-dispatch G3605@t '(any any any)))) G35fd@t))) (G2f57@syntax-dispatch G35fd@t '(any any)))) G35fb@x))) ((lambda (G35e5@t) ((lambda (G35e7@ls/false) (if G35e7@ls/false (apply (lambda (G35e9@binding* G35ea@test G35eb@expr* G35ec@command*) ((lambda (G35f1@t) ((lambda (G35f3@ls/false) (if G35f3@ls/false (apply (lambda (G35f5@x* G35f6@init* G35f7@step*) (if (G2d62@valid-bound-ids? G35f5@x*) (G2f0d@bless (list 'letrec (list (list 'loop (list 'lambda G35f5@x* (list 'if G35ea@test (cons 'begin (cons '(if #f #f) G35eb@expr*)) (cons 'begin (append G35ec@command* (list (cons 'loop G35f7@step*)))))))) (cons 'loop G35f6@init*))) (G3042@syntax-violation '#f '"invalid bindings" G35e1@stx))) G35f3@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G35f1@t))) (G2f57@syntax-dispatch G35f1@t '#(each (any any any))))) (map G35e4@bind G35e9@binding*))) G35e7@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G35e5@t))) (G2f57@syntax-dispatch G35e5@t '(_ each-any (any . each-any) . each-any)))) G35e1@stx))) '#f))) (set! G2f35@let*-macro (lambda (G3613@stx) ((lambda (G3615@t) ((lambda (G3617@ls/false) (if (and G3617@ls/false (apply (lambda (G3619@lhs* G361a@rhs* G361b@b G361c@b*) (for-all G2d58@id? G3619@lhs*)) G3617@ls/false)) (apply (lambda (G3621@lhs* G3622@rhs* G3623@b G3624@b*) (G2f0d@bless ((letrec ((G3629@f (lambda (G362b@x*) (if (null? G362b@x*) (cons 'let (cons '() (cons G3623@b G3624@b*))) (list 'let (list (car G362b@x*)) (G3629@f (cdr G362b@x*))))))) G3629@f) (map list G3621@lhs* G3622@rhs*)))) G3617@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3615@t))) (G2f57@syntax-dispatch G3615@t '(_ #(each (any any)) any . each-any)))) G3613@stx))) (set! G2f37@or-macro (lambda (G362d@stx) ((lambda (G362f@t) ((lambda (G3631@ls/false) (if G3631@ls/false (apply (lambda () '#f) G3631@ls/false) ((lambda (G3633@t) ((lambda (G3635@ls/false) (if G3635@ls/false (apply (lambda (G3637@e G3638@e*) (G2f0d@bless ((letrec ((G363b@f (lambda (G363d@e G363e@e*) (if (null? G363e@e*) (list 'begin '#f G363d@e) (list 'let (list (list 't G363d@e)) (list 'if 't 't (G363b@f (car G363e@e*) (cdr G363e@e*)))))))) G363b@f) G3637@e G3638@e*))) G3635@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3633@t))) (G2f57@syntax-dispatch G3633@t '(_ any . each-any)))) G362f@t))) (G2f57@syntax-dispatch G362f@t '(_)))) G362d@stx))) (set! G2f39@and-macro (lambda (G3641@stx) ((lambda (G3643@t) ((lambda (G3645@ls/false) (if G3645@ls/false (apply (lambda () '#t) G3645@ls/false) ((lambda (G3647@t) ((lambda (G3649@ls/false) (if G3649@ls/false (apply (lambda (G364b@e G364c@e*) (G2f0d@bless ((letrec ((G364f@f (lambda (G3651@e G3652@e*) (if (null? G3652@e*) (list 'begin '#f G3651@e) (cons 'if (cons G3651@e (cons (G364f@f (car G3652@e*) (cdr G3652@e*)) '(#f)))))))) G364f@f) G364b@e G364c@e*))) G3649@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3647@t))) (G2f57@syntax-dispatch G3647@t '(_ any . each-any)))) G3643@t))) (G2f57@syntax-dispatch G3643@t '(_)))) G3641@stx))) (set! G2f3b@cond-macro (lambda (G3655@stx) ((lambda (G3657@t) ((lambda (G3659@ls/false) (if G3659@ls/false (apply (lambda (G365b@cls G365c@cls*) (G2f0d@bless ((letrec ((G365f@f (lambda (G3661@cls G3662@cls*) (if (null? G3662@cls*) ((lambda (G3665@t) ((lambda (G3667@ls/false) (if G3667@ls/false (apply (lambda (G3669@e G366a@e*) (cons 'begin (cons G3669@e G366a@e*))) G3667@ls/false) ((lambda (G366d@t) ((lambda (G366f@ls/false) (if G366f@ls/false (apply (lambda (G3671@e G3672@p) (list 'let (list (list 't G3671@e)) (list 'if 't (cons G3672@p '(t))))) G366f@ls/false) ((lambda (G3675@t) ((lambda (G3677@ls/false) (if G3677@ls/false (apply (lambda (G3679@e) (cons 'or (cons G3679@e '((if #f #f))))) G3677@ls/false) ((lambda (G367b@t) ((lambda (G367d@ls/false) (if G367d@ls/false (apply (lambda (G367f@e G3680@e*) (list 'if G367f@e (cons 'begin G3680@e*))) G367d@ls/false) ((lambda (G3683@t) ((lambda (G3685@ls/false) (if G3685@ls/false (apply (lambda () (G3042@syntax-violation '#f '"invalid last clause" G3655@stx)) G3685@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3683@t))) (G2f57@syntax-dispatch G3683@t '_))) G367b@t))) (G2f57@syntax-dispatch G367b@t '(any . each-any)))) G3675@t))) (G2f57@syntax-dispatch G3675@t '(any)))) G366d@t))) (G2f57@syntax-dispatch G366d@t '(any #(scheme-id =>) any)))) G3665@t))) (G2f57@syntax-dispatch G3665@t '(#(scheme-id else) any . each-any)))) G3661@cls) ((lambda (G3687@t) ((lambda (G3689@ls/false) (if G3689@ls/false (apply (lambda (G368b@e G368c@e*) (G3042@syntax-violation '#f '"incorrect position of keyword else" G3655@stx)) G3689@ls/false) ((lambda (G368f@t) ((lambda (G3691@ls/false) (if G3691@ls/false (apply (lambda (G3693@e G3694@p) (list 'let (list (list 't G3693@e)) (list 'if 't (cons G3694@p '(t)) (G365f@f (car G3662@cls*) (cdr G3662@cls*))))) G3691@ls/false) ((lambda (G3697@t) ((lambda (G3699@ls/false) (if G3699@ls/false (apply (lambda (G369b@e) (list 'or G369b@e (G365f@f (car G3662@cls*) (cdr G3662@cls*)))) G3699@ls/false) ((lambda (G369d@t) ((lambda (G369f@ls/false) (if G369f@ls/false (apply (lambda (G36a1@e G36a2@e*) (list 'if G36a1@e (cons 'begin G36a2@e*) (G365f@f (car G3662@cls*) (cdr G3662@cls*)))) G369f@ls/false) ((lambda (G36a5@t) ((lambda (G36a7@ls/false) (if G36a7@ls/false (apply (lambda () (G3042@syntax-violation '#f '"invalid last clause" G3655@stx)) G36a7@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G36a5@t))) (G2f57@syntax-dispatch G36a5@t '_))) G369d@t))) (G2f57@syntax-dispatch G369d@t '(any . each-any)))) G3697@t))) (G2f57@syntax-dispatch G3697@t '(any)))) G368f@t))) (G2f57@syntax-dispatch G368f@t '(any #(scheme-id =>) any)))) G3687@t))) (G2f57@syntax-dispatch G3687@t '(#(scheme-id else) any . each-any)))) G3661@cls))))) G365f@f) G365b@cls G365c@cls*))) G3659@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3657@t))) (G2f57@syntax-dispatch G3657@t '(_ any . each-any)))) G3655@stx))) (set! G2f3d@do-include (lambda (G36a9@stx G36aa@id G36ab@filename) ((lambda (G36af@filename) (begin (if (not (and (string? G36af@filename) (G2d58@id? G36aa@id))) (G3042@syntax-violation '#f '"invalid syntax" G36a9@stx) (void)) (cons (G2f0d@bless 'begin) (with-input-from-file G36af@filename (lambda () ((letrec ((G36b1@f (lambda (G36b3@ls) ((lambda (G36b5@x) (if (eof-object? G36b5@x) (reverse G36b3@ls) (G36b1@f (cons (G2d36@datum->stx G36aa@id G36b5@x) G36b3@ls)))) (G28e7@G2810@read-annotated))))) G36b1@f) '())))))) (G2d6e@stx->datum G36ab@filename)))) (set! G2f3f@include-macro (lambda (G36b7@e) ((lambda (G36b9@t) ((lambda (G36bb@ls/false) (if G36bb@ls/false (apply (lambda (G36bd@id G36be@filename) (G2f3d@do-include G36b7@e G36bd@id G36be@filename)) G36bb@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G36b9@t))) (G2f57@syntax-dispatch G36b9@t '(any any)))) G36b7@e))) (set! G2f41@include-into-macro (lambda (G36c1@e) ((lambda (G36c3@t) ((lambda (G36c5@ls/false) (if G36c5@ls/false (apply (lambda (G36c7@id G36c8@filename) (G2f3d@do-include G36c1@e G36c7@id G36c8@filename)) G36c5@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G36c3@t))) (G2f57@syntax-dispatch G36c3@t '(_ any any)))) G36c1@e))) (set! G2f43@syntax-rules-macro (lambda (G36cb@e) ((lambda (G36cd@t) ((lambda (G36cf@ls/false) (if G36cf@ls/false (apply (lambda (G36d1@lits G36d2@pat* G36d3@tmp*) (begin (G2f5d@verify-literals G36d1@lits G36cb@e) (G2f0d@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36d1@lits (map (lambda (G36d7@pat G36d8@tmp) ((lambda (G36db@t) ((lambda (G36dd@ls/false) (if G36dd@ls/false (apply (lambda (G36df@rest) (list (cons 'g G36df@rest) (list 'syntax G36d8@tmp))) G36dd@ls/false) ((lambda (G36e1@t) ((lambda (G36e3@ls/false) (if G36e3@ls/false (apply (lambda () (G3042@syntax-violation '#f '"invalid syntax-rules pattern" G36cb@e G36d7@pat)) G36e3@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G36e1@t))) (G2f57@syntax-dispatch G36e1@t '_))) G36db@t))) (G2f57@syntax-dispatch G36db@t '(_ . any)))) G36d7@pat)) G36d2@pat* G36d3@tmp*)))))))) G36cf@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G36cd@t))) (G2f57@syntax-dispatch G36cd@t '(_ each-any . #(each (any any)))))) G36cb@e))) (set! G2f45@quasiquote-macro ((lambda () ((lambda (G36e6@datum G3704@quasicons* G3706@quasicons G3708@quasiappend G370a@quasivector G370c@vquasi G370e@quasi) (begin (set! G36e6@datum (lambda (G37e9@x) (list (G2ee1@scheme-stx 'quote) (G2d40@mkstx G37e9@x '() '() '())))) (set! G3704@quasicons* (lambda (G37e1@x G37e2@y) ((letrec ((G37e5@f (lambda (G37e7@x) (if (null? G37e7@x) G37e2@y (G3706@quasicons (car G37e7@x) (G37e5@f (cdr G37e7@x))))))) G37e5@f) G37e1@x))) (set! G3706@quasicons (lambda (G37bb@x G37bc@y) ((lambda (G37bf@t) ((lambda (G37c1@ls/false) (if G37c1@ls/false (apply (lambda (G37c3@dy) ((lambda (G37c5@t) ((lambda (G37c7@ls/false) (if G37c7@ls/false (apply (lambda (G37c9@dx) (list (G2ee1@scheme-stx 'quote) (cons G37c9@dx G37c3@dy))) G37c7@ls/false) ((lambda (G37cb@t) ((lambda (G37cd@ls/false) (if G37cd@ls/false (apply (lambda () ((lambda (G37cf@t) ((lambda (G37d1@ls/false) (if G37d1@ls/false (apply (lambda () (list (G2ee1@scheme-stx 'list) G37bb@x)) G37d1@ls/false) ((lambda (G37d3@t) ((lambda (G37d5@ls/false) (if G37d5@ls/false (apply (lambda () (list (G2ee1@scheme-stx 'cons) G37bb@x G37bc@y)) G37d5@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G37d3@t))) (G2f57@syntax-dispatch G37d3@t '_))) G37cf@t))) (G2f57@syntax-dispatch G37cf@t '()))) G37c3@dy)) G37cd@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G37cb@t))) (G2f57@syntax-dispatch G37cb@t '_))) G37c5@t))) (G2f57@syntax-dispatch G37c5@t '(#(scheme-id quote) any)))) G37bb@x)) G37c1@ls/false) ((lambda (G37d7@t) ((lambda (G37d9@ls/false) (if G37d9@ls/false (apply (lambda (G37db@stuff) (cons* (G2ee1@scheme-stx 'list) G37bb@x G37db@stuff)) G37d9@ls/false) ((lambda (G37dd@t) ((lambda (G37df@ls/false) (if G37df@ls/false (apply (lambda () (list (G2ee1@scheme-stx 'cons) G37bb@x G37bc@y)) G37df@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G37dd@t))) (G2f57@syntax-dispatch G37dd@t '_))) G37d7@t))) (G2f57@syntax-dispatch G37d7@t '(#(scheme-id list) . each-any)))) G37bf@t))) (G2f57@syntax-dispatch G37bf@t '(#(scheme-id quote) any)))) G37bc@y))) (set! G3708@quasiappend (lambda (G37a1@x G37a2@y) ((lambda (G37a5@ls) (if (null? G37a5@ls) (list (G2ee1@scheme-stx 'quote) '()) (if (null? (cdr G37a5@ls)) (car G37a5@ls) (cons* (G2ee1@scheme-stx 'append) G37a5@ls)))) ((letrec ((G37a7@f (lambda (G37a9@x) (if (null? G37a9@x) ((lambda (G37ab@t) ((lambda (G37ad@ls/false) (if G37ad@ls/false (apply (lambda () '()) G37ad@ls/false) ((lambda (G37af@t) ((lambda (G37b1@ls/false) (if G37b1@ls/false (apply (lambda () (list G37a2@y)) G37b1@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G37af@t))) (G2f57@syntax-dispatch G37af@t '_))) G37ab@t))) (G2f57@syntax-dispatch G37ab@t '(#(scheme-id quote) ())))) G37a2@y) ((lambda (G37b3@t) ((lambda (G37b5@ls/false) (if G37b5@ls/false (apply (lambda () (G37a7@f (cdr G37a9@x))) G37b5@ls/false) ((lambda (G37b7@t) ((lambda (G37b9@ls/false) (if G37b9@ls/false (apply (lambda () (cons (car G37a9@x) (G37a7@f (cdr G37a9@x)))) G37b9@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G37b7@t))) (G2f57@syntax-dispatch G37b7@t '_))) G37b3@t))) (G2f57@syntax-dispatch G37b3@t '(#(scheme-id quote) ())))) (car G37a9@x)))))) G37a7@f) G37a1@x)))) (set! G370a@quasivector (lambda (G376f@x) ((lambda (G3771@pat-x) ((lambda (G3773@t) ((lambda (G3775@ls/false) (if G3775@ls/false (apply (lambda (G3777@x*) (list (G2ee1@scheme-stx 'quote) (list->vector G3777@x*))) G3775@ls/false) ((lambda (G3779@t) ((lambda (G377b@ls/false) (if G377b@ls/false (apply (lambda () ((letrec ((G377d@f (lambda (G377f@x G3780@k) ((lambda (G3783@t) ((lambda (G3785@ls/false) (if G3785@ls/false (apply (lambda (G3787@x*) (G3780@k (map (lambda (G3789@x) (list (G2ee1@scheme-stx 'quote) G3789@x)) G3787@x*))) G3785@ls/false) ((lambda (G378b@t) ((lambda (G378d@ls/false) (if G378d@ls/false (apply (lambda (G378f@x*) (G3780@k G378f@x*)) G378d@ls/false) ((lambda (G3791@t) ((lambda (G3793@ls/false) (if G3793@ls/false (apply (lambda (G3795@x G3796@y) (G377d@f G3796@y (lambda (G3799@ls) (G3780@k (cons G3795@x G3799@ls))))) G3793@ls/false) ((lambda (G379b@t) ((lambda (G379d@ls/false) (if G379d@ls/false (apply (lambda () (list (G2ee1@scheme-stx 'list->vector) G3771@pat-x)) G379d@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G379b@t))) (G2f57@syntax-dispatch G379b@t '_))) G3791@t))) (G2f57@syntax-dispatch G3791@t '(#(scheme-id cons) any any)))) G378b@t))) (G2f57@syntax-dispatch G378b@t '(#(scheme-id list) . each-any)))) G3783@t))) (G2f57@syntax-dispatch G3783@t '(#(scheme-id quote) each-any)))) G377f@x)))) G377d@f) G376f@x (lambda (G379f@ls) (cons* (G2ee1@scheme-stx 'vector) G379f@ls)))) G377b@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3779@t))) (G2f57@syntax-dispatch G3779@t '_))) G3773@t))) (G2f57@syntax-dispatch G3773@t '(#(scheme-id quote) each-any)))) G3771@pat-x)) G376f@x))) (set! G370c@vquasi (lambda (G374d@p G374e@lev) ((lambda (G3751@t) ((lambda (G3753@ls/false) (if G3753@ls/false (apply (lambda (G3755@p G3756@q) ((lambda (G3759@t) ((lambda (G375b@ls/false) (if G375b@ls/false (apply (lambda (G375d@p) (if (= G374e@lev '0) (G3704@quasicons* G375d@p (G370c@vquasi G3756@q G374e@lev)) (G3706@quasicons (G3706@quasicons (G36e6@datum 'unquote) (G370e@quasi G375d@p (- G374e@lev '1))) (G370c@vquasi G3756@q G374e@lev)))) G375b@ls/false) ((lambda (G375f@t) ((lambda (G3761@ls/false) (if G3761@ls/false (apply (lambda (G3763@p) (if (= G374e@lev '0) (G3708@quasiappend G3763@p (G370c@vquasi G3756@q G374e@lev)) (G3706@quasicons (G3706@quasicons (G36e6@datum 'unquote-splicing) (G370e@quasi G3763@p (- G374e@lev '1))) (G370c@vquasi G3756@q G374e@lev)))) G3761@ls/false) ((lambda (G3765@t) ((lambda (G3767@ls/false) (if G3767@ls/false (apply (lambda (G3769@p) (G3706@quasicons (G370e@quasi G3769@p G374e@lev) (G370c@vquasi G3756@q G374e@lev))) G3767@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3765@t))) (G2f57@syntax-dispatch G3765@t 'any))) G375f@t))) (G2f57@syntax-dispatch G375f@t '(#(scheme-id unquote-splicing) . each-any)))) G3759@t))) (G2f57@syntax-dispatch G3759@t '(#(scheme-id unquote) . each-any)))) G3755@p)) G3753@ls/false) ((lambda (G376b@t) ((lambda (G376d@ls/false) (if G376d@ls/false (apply (lambda () (list (G2ee1@scheme-stx 'quote) '())) G376d@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G376b@t))) (G2f57@syntax-dispatch G376b@t '()))) G3751@t))) (G2f57@syntax-dispatch G3751@t '(any . any)))) G374d@p))) (set! G370e@quasi (lambda (G3717@p G3718@lev) ((lambda (G371b@t) ((lambda (G371d@ls/false) (if G371d@ls/false (apply (lambda (G371f@p) (if (= G3718@lev '0) G371f@p (G3706@quasicons (G36e6@datum 'unquote) (G370e@quasi (list G371f@p) (- G3718@lev '1))))) G371d@ls/false) ((lambda (G3721@t) ((lambda (G3723@ls/false) (if G3723@ls/false (apply (lambda (G3725@p G3726@q) (if (= G3718@lev '0) (G3704@quasicons* G3725@p (G370e@quasi G3726@q G3718@lev)) (G3706@quasicons (G3706@quasicons (G36e6@datum 'unquote) (G370e@quasi G3725@p (- G3718@lev '1))) (G370e@quasi G3726@q G3718@lev)))) G3723@ls/false) ((lambda (G3729@t) ((lambda (G372b@ls/false) (if G372b@ls/false (apply (lambda (G372d@p G372e@q) (if (= G3718@lev '0) (G3708@quasiappend G372d@p (G370e@quasi G372e@q G3718@lev)) (G3706@quasicons (G3706@quasicons (G36e6@datum 'unquote-splicing) (G370e@quasi G372d@p (- G3718@lev '1))) (G370e@quasi G372e@q G3718@lev)))) G372b@ls/false) ((lambda (G3731@t) ((lambda (G3733@ls/false) (if G3733@ls/false (apply (lambda (G3735@p) (G3706@quasicons (G36e6@datum 'quasiquote) (G370e@quasi (list G3735@p) (+ G3718@lev '1)))) G3733@ls/false) ((lambda (G3737@t) ((lambda (G3739@ls/false) (if G3739@ls/false (apply (lambda (G373b@p G373c@q) (G3706@quasicons (G370e@quasi G373b@p G3718@lev) (G370e@quasi G373c@q G3718@lev))) G3739@ls/false) ((lambda (G373f@t) ((lambda (G3741@ls/false) (if (and G3741@ls/false (apply (lambda (G3743@x) (not (G2d20@stx? G3743@x))) G3741@ls/false)) (apply (lambda (G3745@x) (G370a@quasivector (G370c@vquasi G3745@x G3718@lev))) G3741@ls/false) ((lambda (G3747@t) ((lambda (G3749@ls/false) (if G3749@ls/false (apply (lambda (G374b@p) (list (G2ee1@scheme-stx 'quote) G374b@p)) G3749@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3747@t))) (G2f57@syntax-dispatch G3747@t 'any))) G373f@t))) (G2f57@syntax-dispatch G373f@t '#(vector each-any)))) G3737@t))) (G2f57@syntax-dispatch G3737@t '(any . any)))) G3731@t))) (G2f57@syntax-dispatch G3731@t '(#(scheme-id quasiquote) any)))) G3729@t))) (G2f57@syntax-dispatch G3729@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3721@t))) (G2f57@syntax-dispatch G3721@t '((#(scheme-id unquote) . each-any) . any)))) G371b@t))) (G2f57@syntax-dispatch G371b@t '(#(scheme-id unquote) any)))) G3717@p))) (lambda (G370f@x) ((lambda (G3711@t) ((lambda (G3713@ls/false) (if G3713@ls/false (apply (lambda (G3715@e) (G370e@quasi G3715@e '0)) G3713@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3711@t))) (G2f57@syntax-dispatch G3711@t '(_ any)))) G370f@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f47@quasisyntax-macro ((lambda () ((lambda (G37ec@quasi) (begin (set! G37ec@quasi (lambda (G3804@p G3805@lev) ((lambda (G3808@t) ((lambda (G380a@ls/false) (if G380a@ls/false (apply (lambda (G380c@p) (if (= G3805@lev '0) ((lambda (G380e@g) (values (list G380e@g) (list G380c@p) G380e@g)) (gensym)) (call-with-values (lambda () (G37ec@quasi G380c@p (- G3805@lev '1))) (lambda (G3813@G3810 G3814@G3811 G3815@G3812) ((lambda (G3819@p G381a@rhs* G381b@lhs*) (values G381b@lhs* G381a@rhs* (list 'unsyntax G3819@p))) G3815@G3812 G3814@G3811 G3813@G3810))))) G380a@ls/false) ((lambda (G381f@t) ((lambda (G3821@ls/false) (if (and G3821@ls/false (apply (lambda () (= G3805@lev '0)) G3821@ls/false)) (apply (lambda () (G3042@syntax-violation '#f '"incorrect use of unsyntax" G3804@p)) G3821@ls/false) ((lambda (G3823@t) ((lambda (G3825@ls/false) (if G3825@ls/false (apply (lambda (G3827@p* G3828@q) (call-with-values (lambda () (G37ec@quasi G3828@q G3805@lev)) (lambda (G382e@G382b G382f@G382c G3830@G382d) ((lambda (G3834@q G3835@rhs* G3836@lhs*) (if (= G3805@lev '0) ((lambda (G383a@g*) (values (append G383a@g* G3836@lhs*) (append G3827@p* G3835@rhs*) (append G383a@g* G3834@q))) (map (lambda (G383c@x) (gensym)) G3827@p*)) (call-with-values (lambda () (G37ec@quasi G3827@p* (- G3805@lev '1))) (lambda (G3841@G383e G3842@G383f G3843@G3840) ((lambda (G3847@p* G3848@rhs2* G3849@lhs2*) (values (append G3849@lhs2* G3836@lhs*) (append G3848@rhs2* G3835@rhs*) (cons (cons 'unsyntax G3847@p*) G3834@q))) G3843@G3840 G3842@G383f G3841@G383e))))) G3830@G382d G382f@G382c G382e@G382b)))) G3825@ls/false) ((lambda (G384d@t) ((lambda (G384f@ls/false) (if G384f@ls/false (apply (lambda (G3851@p* G3852@q) (call-with-values (lambda () (G37ec@quasi G3852@q G3805@lev)) (lambda (G3858@G3855 G3859@G3856 G385a@G3857) ((lambda (G385e@q G385f@rhs* G3860@lhs*) (if (= G3805@lev '0) ((lambda (G3864@g*) (values (append (map (lambda (G3866@g) (cons G3866@g '(...))) G3864@g*) G3860@lhs*) (append G3851@p* G385f@rhs*) (append (apply append (map (lambda (G3868@g) (cons G3868@g '(...))) G3864@g*)) G385e@q))) (map (lambda (G386a@x) (gensym)) G3851@p*)) (call-with-values (lambda () (G37ec@quasi G3851@p* (- G3805@lev '1))) (lambda (G386f@G386c G3870@G386d G3871@G386e) ((lambda (G3875@p* G3876@rhs2* G3877@lhs2*) (values (append G3877@lhs2* G3860@lhs*) (append G3876@rhs2* G385f@rhs*) (cons (cons 'unsyntax-splicing G3875@p*) G385e@q))) G3871@G386e G3870@G386d G386f@G386c))))) G385a@G3857 G3859@G3856 G3858@G3855)))) G384f@ls/false) ((lambda (G387b@t) ((lambda (G387d@ls/false) (if (and G387d@ls/false (apply (lambda () (= G3805@lev '0)) G387d@ls/false)) (apply (lambda () (G3042@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3804@p)) G387d@ls/false) ((lambda (G387f@t) ((lambda (G3881@ls/false) (if G3881@ls/false (apply (lambda (G3883@p) (call-with-values (lambda () (G37ec@quasi G3883@p (+ G3805@lev '1))) (lambda (G3888@G3885 G3889@G3886 G388a@G3887) ((lambda (G388e@p G388f@rhs* G3890@lhs*) (values G3890@lhs* G388f@rhs* (list 'quasisyntax G388e@p))) G388a@G3887 G3889@G3886 G3888@G3885)))) G3881@ls/false) ((lambda (G3894@t) ((lambda (G3896@ls/false) (if G3896@ls/false (apply (lambda (G3898@p G3899@q) (call-with-values (lambda () (G37ec@quasi G3898@p G3805@lev)) (lambda (G38a2@G389c G38a3@G389d G38a4@G389e) (call-with-values (lambda () (G37ec@quasi G3899@q G3805@lev)) (lambda (G38a8@G389f G38a9@G38a0 G38aa@G38a1) ((lambda (G38ae@q G38af@rhs2* G38b0@lhs2* G38b1@p G38b2@rhs* G38b3@lhs*) (values (append G38b0@lhs2* G38b3@lhs*) (append G38af@rhs2* G38b2@rhs*) (cons G38b1@p G38ae@q))) G38aa@G38a1 G38a9@G38a0 G38a8@G389f G38a4@G389e G38a3@G389d G38a2@G389c)))))) G3896@ls/false) ((lambda (G38ba@t) ((lambda (G38bc@ls/false) (if G38bc@ls/false (apply (lambda (G38be@x*) (call-with-values (lambda () (G37ec@quasi G38be@x* G3805@lev)) (lambda (G38c3@G38c0 G38c4@G38c1 G38c5@G38c2) ((lambda (G38c9@x* G38ca@rhs* G38cb@lhs*) (values G38cb@lhs* G38ca@rhs* (list->vector G38c9@x*))) G38c5@G38c2 G38c4@G38c1 G38c3@G38c0)))) G38bc@ls/false) ((lambda (G38cf@t) ((lambda (G38d1@ls/false) (if G38d1@ls/false (apply (lambda () (values '() '() G3804@p)) G38d1@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G38cf@t))) (G2f57@syntax-dispatch G38cf@t '_))) G38ba@t))) (G2f57@syntax-dispatch G38ba@t '#(vector each-any)))) G3894@t))) (G2f57@syntax-dispatch G3894@t '(any . any)))) G387f@t))) (G2f57@syntax-dispatch G387f@t '(#(scheme-id quasisyntax) any)))) G387b@t))) (G2f57@syntax-dispatch G387b@t '#(scheme-id unsyntax-splicing)))) G384d@t))) (G2f57@syntax-dispatch G384d@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3823@t))) (G2f57@syntax-dispatch G3823@t '((#(scheme-id unsyntax) . each-any) . any)))) G381f@t))) (G2f57@syntax-dispatch G381f@t '#(scheme-id unsyntax)))) G3808@t))) (G2f57@syntax-dispatch G3808@t '(#(scheme-id unsyntax) any)))) G3804@p))) (lambda (G37ed@x) ((lambda (G37ef@t) ((lambda (G37f1@ls/false) (if G37f1@ls/false (apply (lambda (G37f3@e) (call-with-values (lambda () (G37ec@quasi G37f3@e '0)) (lambda (G37f8@G37f5 G37f9@G37f6 G37fa@G37f7) ((lambda (G37fe@v G37ff@rhs* G3800@lhs*) (G2f0d@bless (list 'syntax-case (cons 'list G37ff@rhs*) '() (list G3800@lhs* (list 'syntax G37fe@v))))) G37fa@G37f7 G37f9@G37f6 G37f8@G37f5)))) G37f1@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G37ef@t))) (G2f57@syntax-dispatch G37ef@t '(_ any)))) G37ed@x)))) '#f)))) (set! G2f49@define-struct-macro (lambda (G38d3@stx) (G3042@syntax-violation '#f '"define-struct not supported" G38d3@stx))) (set! G2f4b@define-record-type-macro (lambda (G38d5@x) ((lambda (G38d8@id G38da@get-record-name G38dc@get-record-constructor-name G38de@get-record-predicate-name G38e0@get-clause G38e2@foo-rtd-code G38e4@parent-rtd-code G38e6@parent-rcd-code G38e8@foo-rcd-code G38ea@get-protocol-code G38ec@get-fields G38ee@get-mutator-indices G38f0@get-mutators G38f2@get-accessors G38f4@enumerate G38f6@do-define-record G38f8@verify-clauses) (begin (set! G38d8@id (lambda (G3acb@ctxt . G3acd@str*) (G3046@datum->syntax G3acb@ctxt (string->symbol (apply string-append (map (lambda (G3acf@x) (if (symbol? G3acf@x) (symbol->string G3acf@x) (if (string? G3acf@x) G3acf@x (assertion-violation 'define-record-type '"BUG")))) G3acd@str*)))))) (set! G38da@get-record-name (lambda (G3ab9@spec) ((lambda (G3abb@t) ((lambda (G3abd@ls/false) (if G3abd@ls/false (apply (lambda (G3abf@foo G3ac0@make-foo G3ac1@foo?) G3abf@foo) G3abd@ls/false) ((lambda (G3ac5@t) ((lambda (G3ac7@ls/false) (if G3ac7@ls/false (apply (lambda (G3ac9@foo) G3ac9@foo) G3ac7@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3ac5@t))) (G2f57@syntax-dispatch G3ac5@t 'any))) G3abb@t))) (G2f57@syntax-dispatch G3abb@t '(any any any)))) G3ab9@spec))) (set! G38dc@get-record-constructor-name (lambda (G3aa5@spec) ((lambda (G3aa7@t) ((lambda (G3aa9@ls/false) (if G3aa9@ls/false (apply (lambda (G3aab@foo G3aac@make-foo G3aad@foo?) G3aac@make-foo) G3aa9@ls/false) ((lambda (G3ab1@t) ((lambda (G3ab3@ls/false) (if (and G3ab3@ls/false (apply (lambda (G3ab5@foo) (G2d58@id? G3ab5@foo)) G3ab3@ls/false)) (apply (lambda (G3ab7@foo) (G38d8@id G3ab7@foo '"make-" (G2d6e@stx->datum G3ab7@foo))) G3ab3@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3ab1@t))) (G2f57@syntax-dispatch G3ab1@t 'any))) G3aa7@t))) (G2f57@syntax-dispatch G3aa7@t '(any any any)))) G3aa5@spec))) (set! G38de@get-record-predicate-name (lambda (G3a91@spec) ((lambda (G3a93@t) ((lambda (G3a95@ls/false) (if G3a95@ls/false (apply (lambda (G3a97@foo G3a98@make-foo G3a99@foo?) G3a99@foo?) G3a95@ls/false) ((lambda (G3a9d@t) ((lambda (G3a9f@ls/false) (if (and G3a9f@ls/false (apply (lambda (G3aa1@foo) (G2d58@id? G3aa1@foo)) G3a9f@ls/false)) (apply (lambda (G3aa3@foo) (G38d8@id G3aa3@foo (G2d6e@stx->datum G3aa3@foo) '"?")) G3a9f@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3a9d@t))) (G2f57@syntax-dispatch G3a9d@t 'any))) G3a93@t))) (G2f57@syntax-dispatch G3a93@t '(any any any)))) G3a91@spec))) (set! G38e0@get-clause (lambda (G3a7f@id G3a80@ls) ((lambda (G3a83@t) ((lambda (G3a85@ls/false) (if G3a85@ls/false (apply (lambda () '#f) G3a85@ls/false) ((lambda (G3a87@t) ((lambda (G3a89@ls/false) (if G3a89@ls/false (apply (lambda (G3a8b@x G3a8c@rest G3a8d@ls) (if (G2d60@free-id=? (G2f0d@bless G3a7f@id) G3a8b@x) (cons G3a8b@x G3a8c@rest) (G38e0@get-clause G3a7f@id G3a8d@ls))) G3a89@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3a87@t))) (G2f57@syntax-dispatch G3a87@t '((any . any) . any)))) G3a83@t))) (G2f57@syntax-dispatch G3a83@t '()))) G3a80@ls))) (set! G38e2@foo-rtd-code (lambda (G3a2d@name G3a2e@clause* G3a2f@parent-rtd-code) ((lambda (G3a34@convert-field-spec*) (begin (set! G3a34@convert-field-spec* (lambda (G3a65@ls) (list->vector (map (lambda (G3a67@x) ((lambda (G3a69@t) ((lambda (G3a6b@ls/false) (if G3a6b@ls/false (apply (lambda (G3a6d@name G3a6e@rest) (list 'mutable G3a6d@name)) G3a6b@ls/false) ((lambda (G3a71@t) ((lambda (G3a73@ls/false) (if G3a73@ls/false (apply (lambda (G3a75@name G3a76@rest) (list 'immutable G3a75@name)) G3a73@ls/false) ((lambda (G3a79@t) ((lambda (G3a7b@ls/false) (if G3a7b@ls/false (apply (lambda (G3a7d@name) (list 'immutable G3a7d@name)) G3a7b@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3a79@t))) (G2f57@syntax-dispatch G3a79@t 'any))) G3a71@t))) (G2f57@syntax-dispatch G3a71@t '(#(scheme-id immutable) any . any)))) G3a69@t))) (G2f57@syntax-dispatch G3a69@t '(#(scheme-id mutable) any . any)))) G3a67@x)) G3a65@ls)))) ((lambda (G3a35@uid-code G3a36@sealed? G3a37@opaque? G3a38@fields) (G2f0d@bless (list 'make-record-type-descriptor (list 'quote G3a2d@name) G3a2f@parent-rtd-code G3a35@uid-code G3a36@sealed? G3a37@opaque? G3a38@fields))) ((lambda (G3a3d@t) ((lambda (G3a3f@ls/false) (if G3a3f@ls/false (apply (lambda () (list 'quote (gensym))) G3a3f@ls/false) ((lambda (G3a41@t) ((lambda (G3a43@ls/false) (if G3a43@ls/false (apply (lambda (G3a45@uid) (list 'quote G3a45@uid)) G3a43@ls/false) ((lambda (G3a47@t) ((lambda (G3a49@ls/false) (if G3a49@ls/false (apply (lambda () '#f) G3a49@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3a47@t))) (G2f57@syntax-dispatch G3a47@t '_))) G3a41@t))) (G2f57@syntax-dispatch G3a41@t '(_ any)))) G3a3d@t))) (G2f57@syntax-dispatch G3a3d@t '(_)))) (G38e0@get-clause 'nongenerative G3a2e@clause*)) ((lambda (G3a4b@t) ((lambda (G3a4d@ls/false) (if G3a4d@ls/false (apply (lambda () '#t) G3a4d@ls/false) ((lambda (G3a4f@t) ((lambda (G3a51@ls/false) (if G3a51@ls/false (apply (lambda () '#f) G3a51@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3a4f@t))) (G2f57@syntax-dispatch G3a4f@t '_))) G3a4b@t))) (G2f57@syntax-dispatch G3a4b@t '(_ #(atom #t))))) (G38e0@get-clause 'sealed G3a2e@clause*)) ((lambda (G3a53@t) ((lambda (G3a55@ls/false) (if G3a55@ls/false (apply (lambda () '#t) G3a55@ls/false) ((lambda (G3a57@t) ((lambda (G3a59@ls/false) (if G3a59@ls/false (apply (lambda () '#f) G3a59@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3a57@t))) (G2f57@syntax-dispatch G3a57@t '_))) G3a53@t))) (G2f57@syntax-dispatch G3a53@t '(_ #(atom #t))))) (G38e0@get-clause 'opaque G3a2e@clause*)) ((lambda (G3a5b@t) ((lambda (G3a5d@ls/false) (if G3a5d@ls/false (apply (lambda (G3a5f@field-spec*) (list 'quote (G3a34@convert-field-spec* G3a5f@field-spec*))) G3a5d@ls/false) ((lambda (G3a61@t) ((lambda (G3a63@ls/false) (if G3a63@ls/false (apply (lambda () ''#()) G3a63@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3a61@t))) (G2f57@syntax-dispatch G3a61@t '_))) G3a5b@t))) (G2f57@syntax-dispatch G3a5b@t '(_ . each-any)))) (G38e0@get-clause 'fields G3a2e@clause*))))) '#f))) (set! G38e4@parent-rtd-code (lambda (G3a15@clause*) ((lambda (G3a17@t) ((lambda (G3a19@ls/false) (if G3a19@ls/false (apply (lambda (G3a1b@name) (list 'record-type-descriptor G3a1b@name)) G3a19@ls/false) ((lambda (G3a1d@t) ((lambda (G3a1f@ls/false) (if G3a1f@ls/false (apply (lambda () ((lambda (G3a21@t) ((lambda (G3a23@ls/false) (if G3a23@ls/false (apply (lambda (G3a25@rtd G3a26@rcd) G3a25@rtd) G3a23@ls/false) ((lambda (G3a29@t) ((lambda (G3a2b@ls/false) (if G3a2b@ls/false (apply (lambda () '#f) G3a2b@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3a29@t))) (G2f57@syntax-dispatch G3a29@t '#(atom #f)))) G3a21@t))) (G2f57@syntax-dispatch G3a21@t '(_ any any)))) (G38e0@get-clause 'parent-rtd G3a15@clause*))) G3a1f@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3a1d@t))) (G2f57@syntax-dispatch G3a1d@t '#(atom #f)))) G3a17@t))) (G2f57@syntax-dispatch G3a17@t '(_ any)))) (G38e0@get-clause 'parent G3a15@clause*)))) (set! G38e6@parent-rcd-code (lambda (G39fd@clause*) ((lambda (G39ff@t) ((lambda (G3a01@ls/false) (if G3a01@ls/false (apply (lambda (G3a03@name) (list 'record-constructor-descriptor G3a03@name)) G3a01@ls/false) ((lambda (G3a05@t) ((lambda (G3a07@ls/false) (if G3a07@ls/false (apply (lambda () ((lambda (G3a09@t) ((lambda (G3a0b@ls/false) (if G3a0b@ls/false (apply (lambda (G3a0d@rtd G3a0e@rcd) G3a0e@rcd) G3a0b@ls/false) ((lambda (G3a11@t) ((lambda (G3a13@ls/false) (if G3a13@ls/false (apply (lambda () '#f) G3a13@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3a11@t))) (G2f57@syntax-dispatch G3a11@t '#(atom #f)))) G3a09@t))) (G2f57@syntax-dispatch G3a09@t '(_ any any)))) (G38e0@get-clause 'parent-rtd G39fd@clause*))) G3a07@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3a05@t))) (G2f57@syntax-dispatch G3a05@t '#(atom #f)))) G39ff@t))) (G2f57@syntax-dispatch G39ff@t '(_ any)))) (G38e0@get-clause 'parent G39fd@clause*)))) (set! G38e8@foo-rcd-code (lambda (G39f5@clause* G39f6@foo-rtd G39f7@protocol G39f8@parent-rcd-code) (list 'make-record-constructor-descriptor G39f6@foo-rtd G39f8@parent-rcd-code G39f7@protocol))) (set! G38ea@get-protocol-code (lambda (G39e9@clause*) ((lambda (G39eb@t) ((lambda (G39ed@ls/false) (if G39ed@ls/false (apply (lambda (G39ef@expr) G39ef@expr) G39ed@ls/false) ((lambda (G39f1@t) ((lambda (G39f3@ls/false) (if G39f3@ls/false (apply (lambda () '#f) G39f3@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G39f1@t))) (G2f57@syntax-dispatch G39f1@t '_))) G39eb@t))) (G2f57@syntax-dispatch G39eb@t '(_ any)))) (G38e0@get-clause 'protocol G39e9@clause*)))) (set! G38ec@get-fields (lambda (G39d7@clause*) ((lambda (G39d9@t) ((lambda (G39db@ls/false) (if G39db@ls/false (apply (lambda () '()) G39db@ls/false) ((lambda (G39dd@t) ((lambda (G39df@ls/false) (if G39df@ls/false (apply (lambda (G39e1@f*) G39e1@f*) G39df@ls/false) ((lambda (G39e3@t) ((lambda (G39e5@ls/false) (if G39e5@ls/false (apply (lambda (G39e7@rest) (G38ec@get-fields G39e7@rest)) G39e5@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G39e3@t))) (G2f57@syntax-dispatch G39e3@t '(_ . any)))) G39dd@t))) (G2f57@syntax-dispatch G39dd@t '((#(scheme-id fields) . each-any) . _)))) G39d9@t))) (G2f57@syntax-dispatch G39d9@t '()))) G39d7@clause*))) (set! G38ee@get-mutator-indices (lambda (G39bf@fields) ((letrec ((G39c1@f (lambda (G39c3@fields G39c4@i) ((lambda (G39c7@t) ((lambda (G39c9@ls/false) (if G39c9@ls/false (apply (lambda () '()) G39c9@ls/false) ((lambda (G39cb@t) ((lambda (G39cd@ls/false) (if G39cd@ls/false (apply (lambda (G39cf@rest) (cons G39c4@i (G39c1@f G39cf@rest (+ G39c4@i '1)))) G39cd@ls/false) ((lambda (G39d1@t) ((lambda (G39d3@ls/false) (if G39d3@ls/false (apply (lambda (G39d5@rest) (G39c1@f G39d5@rest (+ G39c4@i '1))) G39d3@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G39d1@t))) (G2f57@syntax-dispatch G39d1@t '(_ . any)))) G39cb@t))) (G2f57@syntax-dispatch G39cb@t '((#(scheme-id mutable) . _) . any)))) G39c7@t))) (G2f57@syntax-dispatch G39c7@t '()))) G39c3@fields)))) G39c1@f) G39bf@fields '0))) (set! G38f0@get-mutators (lambda (G3995@foo G3996@fields) ((lambda (G399a@gen-name) (begin (set! G399a@gen-name (lambda (G39bd@x) (G3046@datum->syntax G3995@foo (string->symbol (string-append (symbol->string (G3048@syntax->datum G3995@foo)) '"-" (symbol->string (G3048@syntax->datum G39bd@x)) '"-set!"))))) ((letrec ((G399b@f (lambda (G399d@fields) ((lambda (G399f@t) ((lambda (G39a1@ls/false) (if G39a1@ls/false (apply (lambda () '()) G39a1@ls/false) ((lambda (G39a3@t) ((lambda (G39a5@ls/false) (if G39a5@ls/false (apply (lambda (G39a7@name G39a8@accessor G39a9@mutator G39aa@rest) (cons G39a9@mutator (G399b@f G39aa@rest))) G39a5@ls/false) ((lambda (G39af@t) ((lambda (G39b1@ls/false) (if G39b1@ls/false (apply (lambda (G39b3@name G39b4@rest) (cons (G399a@gen-name G39b3@name) (G399b@f G39b4@rest))) G39b1@ls/false) ((lambda (G39b7@t) ((lambda (G39b9@ls/false) (if G39b9@ls/false (apply (lambda (G39bb@rest) (G399b@f G39bb@rest)) G39b9@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G39b7@t))) (G2f57@syntax-dispatch G39b7@t '(_ . any)))) G39af@t))) (G2f57@syntax-dispatch G39af@t '((#(scheme-id mutable) any) . any)))) G39a3@t))) (G2f57@syntax-dispatch G39a3@t '((#(scheme-id mutable) any any any) . any)))) G399f@t))) (G2f57@syntax-dispatch G399f@t '()))) G399d@fields)))) G399b@f) G3996@fields))) '#f))) (set! G38f2@get-accessors (lambda (G3951@foo G3952@fields) ((lambda (G3956@gen-name) (begin (set! G3956@gen-name (lambda (G3993@x) (G3046@datum->syntax G3951@foo (string->symbol (string-append (symbol->string (G3048@syntax->datum G3951@foo)) '"-" (symbol->string (G3048@syntax->datum G3993@x))))))) (map (lambda (G3957@field) ((lambda (G3959@t) ((lambda (G395b@ls/false) (if (and G395b@ls/false (apply (lambda (G395d@name G395e@accessor G395f@mutator) (G2d58@id? G395e@accessor)) G395b@ls/false)) (apply (lambda (G3963@name G3964@accessor G3965@mutator) G3964@accessor) G395b@ls/false) ((lambda (G3969@t) ((lambda (G396b@ls/false) (if (and G396b@ls/false (apply (lambda (G396d@name G396e@accessor) (G2d58@id? G396e@accessor)) G396b@ls/false)) (apply (lambda (G3971@name G3972@accessor) G3972@accessor) G396b@ls/false) ((lambda (G3975@t) ((lambda (G3977@ls/false) (if (and G3977@ls/false (apply (lambda (G3979@name) (G2d58@id? G3979@name)) G3977@ls/false)) (apply (lambda (G397b@name) (G3956@gen-name G397b@name)) G3977@ls/false) ((lambda (G397d@t) ((lambda (G397f@ls/false) (if (and G397f@ls/false (apply (lambda (G3981@name) (G2d58@id? G3981@name)) G397f@ls/false)) (apply (lambda (G3983@name) (G3956@gen-name G3983@name)) G397f@ls/false) ((lambda (G3985@t) ((lambda (G3987@ls/false) (if (and G3987@ls/false (apply (lambda (G3989@name) (G2d58@id? G3989@name)) G3987@ls/false)) (apply (lambda (G398b@name) (G3956@gen-name G398b@name)) G3987@ls/false) ((lambda (G398d@t) ((lambda (G398f@ls/false) (if G398f@ls/false (apply (lambda (G3991@others) (G3042@syntax-violation '#f '"invalid field spec" G3957@field)) G398f@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G398d@t))) (G2f57@syntax-dispatch G398d@t 'any))) G3985@t))) (G2f57@syntax-dispatch G3985@t 'any))) G397d@t))) (G2f57@syntax-dispatch G397d@t '(#(scheme-id immutable) any)))) G3975@t))) (G2f57@syntax-dispatch G3975@t '(#(scheme-id mutable) any)))) G3969@t))) (G2f57@syntax-dispatch G3969@t '(#(scheme-id immutable) any any)))) G3959@t))) (G2f57@syntax-dispatch G3959@t '(#(scheme-id mutable) any any any)))) G3957@field)) G3952@fields))) '#f))) (set! G38f4@enumerate (lambda (G3949@ls) ((letrec ((G394b@f (lambda (G394d@ls G394e@i) (if (null? G394d@ls) '() (cons G394e@i (G394b@f (cdr G394d@ls) (+ G394e@i '1))))))) G394b@f) G3949@ls '0))) (set! G38f6@do-define-record (lambda (G3921@namespec G3922@clause*) ((lambda (G3925@foo) ((lambda (G3927@foo-rtd) ((lambda (G3929@foo-rcd) ((lambda (G392b@protocol) ((lambda (G392d@make-foo) ((lambda (G392f@fields) ((lambda (G3931@idx*) ((lambda (G3933@foo-x*) ((lambda (G3935@set-foo-x!*) ((lambda (G3937@set-foo-idx*) ((lambda (G3939@foo?) ((lambda (G393b@foo-rtd-code) ((lambda (G393d@foo-rcd-code) ((lambda (G393f@protocol-code) ((lambda () (G2f0d@bless (cons 'begin (cons (list 'define G3927@foo-rtd G393b@foo-rtd-code) (cons (list 'define G392b@protocol G393f@protocol-code) (cons (list 'define G3929@foo-rcd G393d@foo-rcd-code) (cons (list 'define-syntax G3925@foo (list 'list ''$rtd (list 'syntax G3927@foo-rtd) (list 'syntax G3929@foo-rcd))) (cons (list 'define G3939@foo? (list 'record-predicate G3927@foo-rtd)) (cons (list 'define G392d@make-foo (list 'record-constructor G3929@foo-rcd)) (append (map (lambda (G3941@foo-x G3942@idx) (list 'define G3941@foo-x (list 'record-accessor G3927@foo-rtd G3942@idx))) G3933@foo-x* G3931@idx*) (map (lambda (G3945@set-foo-x! G3946@idx) (list 'define G3945@set-foo-x! (list 'record-mutator G3927@foo-rtd G3946@idx))) G3935@set-foo-x!* G3937@set-foo-idx*))))))))))))) (G38ea@get-protocol-code G3922@clause*))) (G38e8@foo-rcd-code G3922@clause* G3927@foo-rtd G392b@protocol (G38e6@parent-rcd-code G3922@clause*)))) (G38e2@foo-rtd-code G3925@foo G3922@clause* (G38e4@parent-rtd-code G3922@clause*)))) (G38de@get-record-predicate-name G3921@namespec))) (G38ee@get-mutator-indices G392f@fields))) (G38f0@get-mutators G3925@foo G392f@fields))) (G38f2@get-accessors G3925@foo G392f@fields))) (G38f4@enumerate G392f@fields))) (G38ec@get-fields G3922@clause*))) (G38dc@get-record-constructor-name G3921@namespec))) (gensym))) (gensym))) (gensym))) (G38da@get-record-name G3921@namespec)))) (set! G38f8@verify-clauses (lambda (G3901@x G3902@cls*) ((lambda (G3906@valid-kwds G3908@free-id-member?) (begin (set! G3906@valid-kwds (map G2f0d@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3908@free-id-member? (lambda (G391d@x G391e@ls) (and (pair? G391e@ls) (or (G2d60@free-id=? G391d@x (car G391e@ls)) (G3908@free-id-member? G391d@x (cdr G391e@ls)))))) ((letrec ((G3909@f (lambda (G390b@cls* G390c@seen*) (if (not (null? G390b@cls*)) ((lambda (G390f@t) ((lambda (G3911@ls/false) (if G3911@ls/false (apply (lambda (G3913@kwd G3914@rest) (if (or (not (G2d58@id? G3913@kwd)) (not (G3908@free-id-member? G3913@kwd G3906@valid-kwds))) (G3042@syntax-violation '#f '"not a valid define-record-type keyword" G3913@kwd) (if (G2d66@bound-id-member? G3913@kwd G390c@seen*) (G3042@syntax-violation '#f '"duplicate use of keyword " G3901@x G3913@kwd) (G3909@f (cdr G390b@cls*) (cons G3913@kwd G390c@seen*))))) G3911@ls/false) ((lambda (G3917@t) ((lambda (G3919@ls/false) (if G3919@ls/false (apply (lambda (G391b@cls) (G3042@syntax-violation '#f '"malformed define-record-type clause" G391b@cls)) G3919@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3917@t))) (G2f57@syntax-dispatch G3917@t 'any))) G390f@t))) (G2f57@syntax-dispatch G390f@t '(any . any)))) (car G390b@cls*)) (void))))) G3909@f) G3902@cls* '()))) '#f '#f))) ((lambda (G38f9@t) ((lambda (G38fb@ls/false) (if G38fb@ls/false (apply (lambda (G38fd@namespec G38fe@clause*) (begin (G38f8@verify-clauses G38d5@x G38fe@clause*) (G38f6@do-define-record G38fd@namespec G38fe@clause*))) G38fb@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G38f9@t))) (G2f57@syntax-dispatch G38f9@t '(_ any . each-any)))) G38d5@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f4d@define-condition-type-macro (lambda (G3ad1@x) ((lambda (G3ad4@mkname) (begin (set! G3ad4@mkname (lambda (G3b01@name G3b02@suffix) (G3046@datum->syntax G3b01@name (string->symbol (string-append (symbol->string (G3048@syntax->datum G3b01@name)) G3b02@suffix))))) ((lambda (G3ad5@t) ((lambda (G3ad7@ls/false) (if (and G3ad7@ls/false (apply (lambda (G3ad9@ctxt G3ada@name G3adb@super G3adc@constructor G3add@predicate G3ade@field* G3adf@accessor*) (and (G2d58@id? G3ada@name) (G2d58@id? G3adb@super) (G2d58@id? G3adc@constructor) (G2d58@id? G3add@predicate) (for-all G2d58@id? G3ade@field*) (for-all G2d58@id? G3adf@accessor*))) G3ad7@ls/false)) (apply (lambda (G3ae7@ctxt G3ae8@name G3ae9@super G3aea@constructor G3aeb@predicate G3aec@field* G3aed@accessor*) ((lambda (G3af5@aux-accessor*) (G2f0d@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3ae8@name G3aea@constructor (gensym)) (cons (list 'parent G3ae9@super) (cons (cons 'fields (map (lambda (G3af7@field G3af8@aux) (list 'immutable G3af7@field G3af8@aux)) G3aec@field* G3af5@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3aeb@predicate (list 'condition-predicate (list 'record-type-descriptor G3ae8@name))) (map (lambda (G3afb@accessor G3afc@aux) (list 'define G3afb@accessor (list 'condition-accessor (list 'record-type-descriptor G3ae8@name) G3afc@aux))) G3aed@accessor* G3af5@aux-accessor*)))))) (map (lambda (G3aff@x) (gensym)) G3aed@accessor*))) G3ad7@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3ad5@t))) (G2f57@syntax-dispatch G3ad5@t '(any any any any any . #(each (any any)))))) G3ad1@x))) '#f))) (set! G2f4f@incorrect-usage-macro (lambda (G3b05@e) (G3042@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b05@e))) (set! G2f51@parameterize-macro (lambda (G3b07@e) ((lambda (G3b09@t) ((lambda (G3b0b@ls/false) (if G3b0b@ls/false (apply (lambda (G3b0d@b G3b0e@b*) (G2f0d@bless (cons 'let (cons '() (cons G3b0d@b G3b0e@b*))))) G3b0b@ls/false) ((lambda (G3b11@t) ((lambda (G3b13@ls/false) (if G3b13@ls/false (apply (lambda (G3b15@olhs* G3b16@orhs* G3b17@b G3b18@b*) ((lambda (G3b1d@lhs* G3b1e@rhs*) (G2f0d@bless (cons (list 'lambda (append G3b1d@lhs* G3b1e@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b21@lhs G3b22@rhs) (list 'let (list (list 't (list G3b21@lhs))) (list G3b21@lhs G3b22@rhs) (cons 'set! (cons G3b22@rhs '(t))))) G3b1d@lhs* G3b1e@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b17@b G3b18@b*))) '(swap)))))) (append G3b15@olhs* G3b16@orhs*)))) (G3030@generate-temporaries G3b15@olhs*) (G3030@generate-temporaries G3b16@orhs*))) G3b13@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3b11@t))) (G2f57@syntax-dispatch G3b11@t '(_ #(each (any any)) any . each-any)))) G3b09@t))) (G2f57@syntax-dispatch G3b09@t '(_ () any . each-any)))) G3b07@e))) (set! G2f53@foreign-call-transformer (lambda (G3b25@e G3b26@r G3b27@mr) ((lambda (G3b2b@t) ((lambda (G3b2d@ls/false) (if G3b2d@ls/false (apply (lambda (G3b2f@name G3b30@arg*) (cons 'foreign-call (cons (G2f7b@chi-expr G3b2f@name G3b26@r G3b27@mr) (G2f77@chi-expr* G3b30@arg* G3b26@r G3b27@mr)))) G3b2d@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3b2b@t))) (G2f57@syntax-dispatch G3b2b@t '(_ any . each-any)))) G3b25@e))) (set! G2f55@convert-pattern (lambda (G3b33@pattern G3b34@keys) ((lambda (G3b38@cvt* G3b3a@cvt) (begin (set! G3b38@cvt* (lambda (G3bc9@p* G3bca@n G3bcb@ids) (if (null? G3bc9@p*) (values '() G3bcb@ids) (call-with-values (lambda () (G3b38@cvt* (cdr G3bc9@p*) G3bca@n G3bcb@ids)) (lambda (G3bd1@G3bcf G3bd2@G3bd0) ((lambda (G3bd5@ids G3bd6@y) (call-with-values (lambda () (G3b3a@cvt (car G3bc9@p*) G3bca@n G3bd5@ids)) (lambda (G3bdb@G3bd9 G3bdc@G3bda) ((lambda (G3bdf@ids G3be0@x) (values (cons G3be0@x G3bd6@y) G3bdf@ids)) G3bdc@G3bda G3bdb@G3bd9)))) G3bd2@G3bd0 G3bd1@G3bcf)))))) (set! G3b3a@cvt (lambda (G3b3b@p G3b3c@n G3b3d@ids) ((lambda (G3b41@t) ((lambda (G3b43@ls/false) (if (and G3b43@ls/false (apply (lambda (G3b45@id) (G2d58@id? G3b45@id)) G3b43@ls/false)) (apply (lambda (G3b47@id) (if (G2d66@bound-id-member? G3b3b@p G3b34@keys) (values (vector 'free-id G3b3b@p) G3b3d@ids) (if (G2d60@free-id=? G3b3b@p (G2ee1@scheme-stx '_)) (values '_ G3b3d@ids) (values 'any (cons (cons G3b3b@p G3b3c@n) G3b3d@ids))))) G3b43@ls/false) ((lambda (G3b49@t) ((lambda (G3b4b@ls/false) (if (and G3b4b@ls/false (apply (lambda (G3b4d@p G3b4e@dots) (G2f59@ellipsis? G3b4e@dots)) G3b4b@ls/false)) (apply (lambda (G3b51@p G3b52@dots) (call-with-values (lambda () (G3b3a@cvt G3b51@p (+ G3b3c@n '1) G3b3d@ids)) (lambda (G3b57@G3b55 G3b58@G3b56) ((lambda (G3b5b@ids G3b5c@p) (values (if (eq? G3b5c@p 'any) 'each-any (vector 'each G3b5c@p)) G3b5b@ids)) G3b58@G3b56 G3b57@G3b55)))) G3b4b@ls/false) ((lambda (G3b5f@t) ((lambda (G3b61@ls/false) (if (and G3b61@ls/false (apply (lambda (G3b63@x G3b64@dots G3b65@ys G3b66@z) (G2f59@ellipsis? G3b64@dots)) G3b61@ls/false)) (apply (lambda (G3b6b@x G3b6c@dots G3b6d@ys G3b6e@z) (call-with-values (lambda () (G3b3a@cvt G3b6e@z G3b3c@n G3b3d@ids)) (lambda (G3b75@G3b73 G3b76@G3b74) ((lambda (G3b79@ids G3b7a@z) (call-with-values (lambda () (G3b38@cvt* G3b6d@ys G3b3c@n G3b79@ids)) (lambda (G3b7f@G3b7d G3b80@G3b7e) ((lambda (G3b83@ids G3b84@ys) (call-with-values (lambda () (G3b3a@cvt G3b6b@x (+ G3b3c@n '1) G3b83@ids)) (lambda (G3b89@G3b87 G3b8a@G3b88) ((lambda (G3b8d@ids G3b8e@x) (values (vector 'each+ G3b8e@x (reverse G3b84@ys) G3b7a@z) G3b8d@ids)) G3b8a@G3b88 G3b89@G3b87)))) G3b80@G3b7e G3b7f@G3b7d)))) G3b76@G3b74 G3b75@G3b73)))) G3b61@ls/false) ((lambda (G3b91@t) ((lambda (G3b93@ls/false) (if G3b93@ls/false (apply (lambda (G3b95@x G3b96@y) (call-with-values (lambda () (G3b3a@cvt G3b96@y G3b3c@n G3b3d@ids)) (lambda (G3b9b@G3b99 G3b9c@G3b9a) ((lambda (G3b9f@ids G3ba0@y) (call-with-values (lambda () (G3b3a@cvt G3b95@x G3b3c@n G3b9f@ids)) (lambda (G3ba5@G3ba3 G3ba6@G3ba4) ((lambda (G3ba9@ids G3baa@x) (values (cons G3baa@x G3ba0@y) G3ba9@ids)) G3ba6@G3ba4 G3ba5@G3ba3)))) G3b9c@G3b9a G3b9b@G3b99)))) G3b93@ls/false) ((lambda (G3bad@t) ((lambda (G3baf@ls/false) (if G3baf@ls/false (apply (lambda () (values '() G3b3d@ids)) G3baf@ls/false) ((lambda (G3bb1@t) ((lambda (G3bb3@ls/false) (if (and G3bb3@ls/false (apply (lambda (G3bb5@p) (not (G2d20@stx? G3bb5@p))) G3bb3@ls/false)) (apply (lambda (G3bb7@p) (call-with-values (lambda () (G3b3a@cvt G3bb7@p G3b3c@n G3b3d@ids)) (lambda (G3bbb@G3bb9 G3bbc@G3bba) ((lambda (G3bbf@ids G3bc0@p) (values (vector 'vector G3bc0@p) G3bbf@ids)) G3bbc@G3bba G3bbb@G3bb9)))) G3bb3@ls/false) ((lambda (G3bc3@t) ((lambda (G3bc5@ls/false) (if G3bc5@ls/false (apply (lambda (G3bc7@datum) (values (vector 'atom (G2d6e@stx->datum G3bc7@datum)) G3b3d@ids)) G3bc5@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3bc3@t))) (G2f57@syntax-dispatch G3bc3@t 'any))) G3bb1@t))) (G2f57@syntax-dispatch G3bb1@t '#(vector each-any)))) G3bad@t))) (G2f57@syntax-dispatch G3bad@t '()))) G3b91@t))) (G2f57@syntax-dispatch G3b91@t '(any . any)))) G3b5f@t))) (G2f57@syntax-dispatch G3b5f@t '(any any . #(each+ any () any))))) G3b49@t))) (G2f57@syntax-dispatch G3b49@t '(any any)))) G3b41@t))) (G2f57@syntax-dispatch G3b41@t 'any))) G3b3b@p))) (G3b3a@cvt G3b33@pattern '0 '()))) '#f '#f))) (set! G2f57@syntax-dispatch ((lambda () ((lambda (G3be4@stx^ G3be6@match-each G3be8@match-each+ G3bea@match-each-any G3bec@match-empty G3bee@combine G3bf0@match* G3bf2@match) (begin (set! G3be4@stx^ (lambda (G3cad@e G3cae@m* G3caf@s* G3cb0@ae*) (if (and (null? G3cae@m*) (null? G3caf@s*) (null? G3cb0@ae*)) G3cad@e (G2d40@mkstx G3cad@e G3cae@m* G3caf@s* G3cb0@ae*)))) (set! G3be6@match-each (lambda (G3c90@e G3c91@p G3c92@m* G3c93@s* G3c94@ae*) (if (pair? G3c90@e) ((lambda (G3c9a@first) (and G3c9a@first ((lambda (G3c9c@rest) (and G3c9c@rest (cons G3c9a@first G3c9c@rest))) (G3be6@match-each (cdr G3c90@e) G3c91@p G3c92@m* G3c93@s* G3c94@ae*)))) (G3bf2@match (car G3c90@e) G3c91@p G3c92@m* G3c93@s* G3c94@ae* '())) (if (null? G3c90@e) '() (if (G2d20@stx? G3c90@e) (and (not (G2cd2@top-marked? G3c92@m*)) (call-with-values (lambda () (G2d3e@join-wraps G3c92@m* G3c93@s* G3c94@ae* G3c90@e)) (lambda (G3ca1@G3c9e G3ca2@G3c9f G3ca3@G3ca0) ((lambda (G3ca7@ae* G3ca8@s* G3ca9@m*) (G3be6@match-each (G2d24@stx-expr G3c90@e) G3c91@p G3ca9@m* G3ca8@s* G3ca7@ae*)) G3ca3@G3ca0 G3ca2@G3c9f G3ca1@G3c9e)))) (if (G28e9@G2814@annotation? G3c90@e) (G3be6@match-each (G28eb@G2818@annotation-expression G3c90@e) G3c91@p G3c92@m* G3c93@s* G3c94@ae*) '#f)))))) (set! G3be8@match-each+ (lambda (G3c56@e G3c57@x-pat G3c58@y-pat G3c59@z-pat G3c5a@m* G3c5b@s* G3c5c@ae* G3c5d@r) ((letrec ((G3c66@f (lambda (G3c68@e G3c69@m* G3c6a@s* G3c6b@ae*) (if (pair? G3c68@e) (call-with-values (lambda () (G3c66@f (cdr G3c68@e) G3c69@m* G3c6a@s* G3c6b@ae*)) (lambda (G3c73@G3c70 G3c74@G3c71 G3c75@G3c72) ((lambda (G3c79@r G3c7a@y-pat G3c7b@xr*) (if G3c79@r (if (null? G3c7a@y-pat) ((lambda (G3c7f@xr) (if G3c7f@xr (values (cons G3c7f@xr G3c7b@xr*) G3c7a@y-pat G3c79@r) (values '#f '#f '#f))) (G3bf2@match (car G3c68@e) G3c57@x-pat G3c69@m* G3c6a@s* G3c6b@ae* '())) (values '() (cdr G3c7a@y-pat) (G3bf2@match (car G3c68@e) (car G3c7a@y-pat) G3c69@m* G3c6a@s* G3c6b@ae* G3c79@r))) (values '#f '#f '#f))) G3c75@G3c72 G3c74@G3c71 G3c73@G3c70))) (if (G2d20@stx? G3c68@e) (if (G2cd2@top-marked? G3c69@m*) (values '() G3c58@y-pat (G3bf2@match G3c68@e G3c59@z-pat G3c69@m* G3c6a@s* G3c6b@ae* G3c5d@r)) (call-with-values (lambda () (G2d3e@join-wraps G3c69@m* G3c6a@s* G3c6b@ae* G3c68@e)) (lambda (G3c84@G3c81 G3c85@G3c82 G3c86@G3c83) ((lambda (G3c8a@ae* G3c8b@s* G3c8c@m*) (G3c66@f (G2d24@stx-expr G3c68@e) G3c8c@m* G3c8b@s* G3c8a@ae*)) G3c86@G3c83 G3c85@G3c82 G3c84@G3c81)))) (if (G28e9@G2814@annotation? G3c68@e) (G3c66@f (G28eb@G2818@annotation-expression G3c68@e) G3c69@m* G3c6a@s* G3c6b@ae*) (values '() G3c58@y-pat (G3bf2@match G3c68@e G3c59@z-pat G3c69@m* G3c6a@s* G3c6b@ae* G3c5d@r)))))))) G3c66@f) G3c56@e G3c5a@m* G3c5b@s* G3c5c@ae*))) (set! G3bea@match-each-any (lambda (G3c3d@e G3c3e@m* G3c3f@s* G3c40@ae*) (if (pair? G3c3d@e) ((lambda (G3c45@l) (and G3c45@l (cons (G3be4@stx^ (car G3c3d@e) G3c3e@m* G3c3f@s* G3c40@ae*) G3c45@l))) (G3bea@match-each-any (cdr G3c3d@e) G3c3e@m* G3c3f@s* G3c40@ae*)) (if (null? G3c3d@e) '() (if (G2d20@stx? G3c3d@e) (and (not (G2cd2@top-marked? G3c3e@m*)) (call-with-values (lambda () (G2d3e@join-wraps G3c3e@m* G3c3f@s* G3c40@ae* G3c3d@e)) (lambda (G3c4a@G3c47 G3c4b@G3c48 G3c4c@G3c49) ((lambda (G3c50@ae* G3c51@s* G3c52@m*) (G3bea@match-each-any (G2d24@stx-expr G3c3d@e) G3c52@m* G3c51@s* G3c50@ae*)) G3c4c@G3c49 G3c4b@G3c48 G3c4a@G3c47)))) (if (G28e9@G2814@annotation? G3c3d@e) (G3bea@match-each-any (G28eb@G2818@annotation-expression G3c3d@e) G3c3e@m* G3c3f@s* G3c40@ae*) '#f)))))) (set! G3bec@match-empty (lambda (G3c37@p G3c38@r) (if (null? G3c37@p) G3c38@r (if (eq? G3c37@p '_) G3c38@r (if (eq? G3c37@p 'any) (cons '() G3c38@r) (if (pair? G3c37@p) (G3bec@match-empty (car G3c37@p) (G3bec@match-empty (cdr G3c37@p) G3c38@r)) (if (eq? G3c37@p 'each-any) (cons '() G3c38@r) ((lambda (G3c3b@t) (if (memv G3c3b@t '(each)) (G3bec@match-empty (vector-ref G3c37@p '1) G3c38@r) (if (memv G3c3b@t '(each+)) (G3bec@match-empty (vector-ref G3c37@p '1) (G3bec@match-empty (reverse (vector-ref G3c37@p '2)) (G3bec@match-empty (vector-ref G3c37@p '3) G3c38@r))) (if (memv G3c3b@t '(free-id atom)) G3c38@r (if (memv G3c3b@t '(scheme-id atom)) G3c38@r (if (memv G3c3b@t '(vector)) (G3bec@match-empty (vector-ref G3c37@p '1) G3c38@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c37@p))))))) (vector-ref G3c37@p '0))))))))) (set! G3bee@combine (lambda (G3c33@r* G3c34@r) (if (null? (car G3c33@r*)) G3c34@r (cons (map car G3c33@r*) (G3bee@combine (map cdr G3c33@r*) G3c34@r))))) (set! G3bf0@match* (lambda (G3c12@e G3c13@p G3c14@m* G3c15@s* G3c16@ae* G3c17@r) (if (null? G3c13@p) (and (null? G3c12@e) G3c17@r) (if (pair? G3c13@p) (and (pair? G3c12@e) (G3bf2@match (car G3c12@e) (car G3c13@p) G3c14@m* G3c15@s* G3c16@ae* (G3bf2@match (cdr G3c12@e) (cdr G3c13@p) G3c14@m* G3c15@s* G3c16@ae* G3c17@r))) (if (eq? G3c13@p 'each-any) ((lambda (G3c1e@l) (and G3c1e@l (cons G3c1e@l G3c17@r))) (G3bea@match-each-any G3c12@e G3c14@m* G3c15@s* G3c16@ae*)) ((lambda (G3c20@t) (if (memv G3c20@t '(each)) (if (null? G3c12@e) (G3bec@match-empty (vector-ref G3c13@p '1) G3c17@r) ((lambda (G3c22@r*) (and G3c22@r* (G3bee@combine G3c22@r* G3c17@r))) (G3be6@match-each G3c12@e (vector-ref G3c13@p '1) G3c14@m* G3c15@s* G3c16@ae*))) (if (memv G3c20@t '(free-id)) (and (symbol? G3c12@e) (G2cd2@top-marked? G3c14@m*) (G2d60@free-id=? (G3be4@stx^ G3c12@e G3c14@m* G3c15@s* G3c16@ae*) (vector-ref G3c13@p '1)) G3c17@r) (if (memv G3c20@t '(scheme-id)) (and (symbol? G3c12@e) (G2cd2@top-marked? G3c14@m*) (G2d60@free-id=? (G3be4@stx^ G3c12@e G3c14@m* G3c15@s* G3c16@ae*) (G2ee1@scheme-stx (vector-ref G3c13@p '1))) G3c17@r) (if (memv G3c20@t '(each+)) (call-with-values (lambda () (G3be8@match-each+ G3c12@e (vector-ref G3c13@p '1) (vector-ref G3c13@p '2) (vector-ref G3c13@p '3) G3c14@m* G3c15@s* G3c16@ae* G3c17@r)) (lambda (G3c27@G3c24 G3c28@G3c25 G3c29@G3c26) ((lambda (G3c2d@r G3c2e@y-pat G3c2f@xr*) (and G3c2d@r (null? G3c2e@y-pat) (if (null? G3c2f@xr*) (G3bec@match-empty (vector-ref G3c13@p '1) G3c2d@r) (G3bee@combine G3c2f@xr* G3c2d@r)))) G3c29@G3c26 G3c28@G3c25 G3c27@G3c24))) (if (memv G3c20@t '(atom)) (and (fast-equal? (vector-ref G3c13@p '1) (G2d6c@strip G3c12@e G3c14@m*)) G3c17@r) (if (memv G3c20@t '(vector)) (and (vector? G3c12@e) (G3bf2@match (vector->list G3c12@e) (vector-ref G3c13@p '1) G3c14@m* G3c15@s* G3c16@ae* G3c17@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c13@p)))))))) (vector-ref G3c13@p '0))))))) (set! G3bf2@match (lambda (G3bf7@e G3bf8@p G3bf9@m* G3bfa@s* G3bfb@ae* G3bfc@r) (if (not G3bfc@r) '#f (if (eq? G3bf8@p '_) G3bfc@r (if (eq? G3bf8@p 'any) (cons (G3be4@stx^ G3bf7@e G3bf9@m* G3bfa@s* G3bfb@ae*) G3bfc@r) (if (G2d20@stx? G3bf7@e) (and (not (G2cd2@top-marked? G3bf9@m*)) (call-with-values (lambda () (G2d3e@join-wraps G3bf9@m* G3bfa@s* G3bfb@ae* G3bf7@e)) (lambda (G3c06@G3c03 G3c07@G3c04 G3c08@G3c05) ((lambda (G3c0c@ae* G3c0d@s* G3c0e@m*) (G3bf2@match (G2d24@stx-expr G3bf7@e) G3bf8@p G3c0e@m* G3c0d@s* G3c0c@ae* G3bfc@r)) G3c08@G3c05 G3c07@G3c04 G3c06@G3c03)))) (if (G28e9@G2814@annotation? G3bf7@e) (G3bf2@match (G28eb@G2818@annotation-expression G3bf7@e) G3bf8@p G3bf9@m* G3bfa@s* G3bfb@ae* G3bfc@r) (G3bf0@match* G3bf7@e G3bf8@p G3bf9@m* G3bfa@s* G3bfb@ae* G3bfc@r)))))))) (lambda (G3bf3@e G3bf4@p) (G3bf2@match G3bf3@e G3bf4@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f59@ellipsis? (lambda (G3cb5@x) (and (G2d58@id? G3cb5@x) (G2d60@free-id=? G3cb5@x (G2ee1@scheme-stx '...))))) (set! G2f5b@underscore? (lambda (G3cb7@x) (and (G2d58@id? G3cb7@x) (G2d60@free-id=? G3cb7@x (G2ee1@scheme-stx '_))))) (set! G2f5d@verify-literals (lambda (G3cb9@lits G3cba@expr) (for-each (lambda (G3cbd@x) (if (or (not (G2d58@id? G3cbd@x)) (G2f59@ellipsis? G3cbd@x) (G2f5b@underscore? G3cbd@x)) (G3042@syntax-violation '#f '"invalid literal" G3cba@expr G3cbd@x) (void))) G3cb9@lits))) (set! G2f5f@syntax-case-transformer ((lambda () ((lambda (G3cc0@build-dispatch-call G3cc2@invalid-ids-error G3cc4@gen-clause G3cc6@gen-syntax-case) (begin (set! G3cc0@build-dispatch-call (lambda (G3d2f@pvars G3d30@expr G3d31@y G3d32@r G3d33@mr) ((lambda (G3d39@ids G3d3a@levels) ((lambda (G3d3d@labels G3d3e@new-vars) ((lambda (G3d41@body) (list '(primitive apply) (G2cb2@G2bf0@build-lambda '#f G3d3e@new-vars G3d41@body) G3d31@y)) (G2f7b@chi-expr (G2d44@add-subst (G2d13@make-full-rib G3d39@ids G3d3d@labels) G3d30@expr) (append (map (lambda (G3d43@label G3d44@var G3d45@level) (cons G3d43@label (G2d78@make-binding 'syntax (cons G3d44@var G3d45@level)))) G3d3d@labels G3d3e@new-vars (map cdr G3d2f@pvars)) G3d32@r) G3d33@mr))) (map G2cd8@gen-label G3d39@ids) (map G2cd4@gen-lexical G3d39@ids))) (map car G3d2f@pvars) (map cdr G3d2f@pvars)))) (set! G3cc2@invalid-ids-error (lambda (G3d23@id* G3d24@e G3d25@class) ((letrec ((G3d29@find (lambda (G3d2b@id* G3d2c@ok*) (if (null? G3d2b@id*) (G3042@syntax-violation '#f '"invalid syntax" G3d24@e) (if (G2d58@id? (car G3d2b@id*)) (if (G2d66@bound-id-member? (car G3d2b@id*) G3d2c@ok*) (G303e@syntax-error (car G3d2b@id*) '"duplicate " G3d25@class) (G3d29@find (cdr G3d2b@id*) (cons (car G3d2b@id*) G3d2c@ok*))) (G303e@syntax-error (car G3d2b@id*) '"invalid " G3d25@class)))))) G3d29@find) G3d23@id* '()))) (set! G3cc4@gen-clause (lambda (G3cfd@x G3cfe@keys G3cff@clauses G3d00@r G3d01@mr G3d02@pat G3d03@fender G3d04@expr) (call-with-values (lambda () (G2f55@convert-pattern G3d02@pat G3cfe@keys)) (lambda (G3d0f@G3d0d G3d10@G3d0e) ((lambda (G3d13@pvars G3d14@p) (if (not (G2d64@distinct-bound-ids? (map car G3d13@pvars))) (G3cc2@invalid-ids-error (map car G3d13@pvars) G3d02@pat '"pattern variable") (if (not (for-all (lambda (G3d17@x) (not (G2f59@ellipsis? (car G3d17@x)))) G3d13@pvars)) (G3042@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d02@pat) ((lambda (G3d19@y) ((lambda (G3d1b@test) ((lambda (G3d1d@conseq) ((lambda (G3d1f@altern) (list (G2cb2@G2bf0@build-lambda '#f (list G3d19@y) (list 'if G3d1b@test G3d1d@conseq G3d1f@altern)) (list '(primitive syntax-dispatch) G3cfd@x (list 'quote G3d14@p)))) (G3cc6@gen-syntax-case G3cfd@x G3cfe@keys G3cff@clauses G3d00@r G3d01@mr))) (G3cc0@build-dispatch-call G3d13@pvars G3d04@expr G3d19@y G3d00@r G3d01@mr))) (if (eq? G3d03@fender '#t) G3d19@y ((lambda (G3d21@call) (list 'if G3d19@y G3d21@call (list 'quote '#f))) (G3cc0@build-dispatch-call G3d13@pvars G3d03@fender G3d19@y G3d00@r G3d01@mr))))) (G2cd4@gen-lexical 'tmp))))) G3d10@G3d0e G3d0f@G3d0d))))) (set! G3cc6@gen-syntax-case (lambda (G3cdb@x G3cdc@keys G3cdd@clauses G3cde@r G3cdf@mr) (if (null? G3cdd@clauses) (list '(primitive syntax-error) G3cdb@x) ((lambda (G3ce5@t) ((lambda (G3ce7@ls/false) (if G3ce7@ls/false (apply (lambda (G3ce9@pat G3cea@expr) (if (and (G2d58@id? G3ce9@pat) (not (G2d66@bound-id-member? G3ce9@pat G3cdc@keys)) (not (G2f59@ellipsis? G3ce9@pat))) (if (G2d60@free-id=? G3ce9@pat (G2ee1@scheme-stx '_)) (G2f7b@chi-expr G3cea@expr G3cde@r G3cdf@mr) ((lambda (G3ced@lab G3cee@lex) ((lambda (G3cf1@body) (list (G2cb2@G2bf0@build-lambda '#f (list G3cee@lex) G3cf1@body) G3cdb@x)) (G2f7b@chi-expr (G2d44@add-subst (G2d13@make-full-rib (list G3ce9@pat) (list G3ced@lab)) G3cea@expr) (cons (cons G3ced@lab (G2d78@make-binding 'syntax (cons G3cee@lex '0))) G3cde@r) G3cdf@mr))) (G2cd8@gen-label G3ce9@pat) (G2cd4@gen-lexical G3ce9@pat))) (G3cc4@gen-clause G3cdb@x G3cdc@keys (cdr G3cdd@clauses) G3cde@r G3cdf@mr G3ce9@pat '#t G3cea@expr))) G3ce7@ls/false) ((lambda (G3cf3@t) ((lambda (G3cf5@ls/false) (if G3cf5@ls/false (apply (lambda (G3cf7@pat G3cf8@fender G3cf9@expr) (G3cc4@gen-clause G3cdb@x G3cdc@keys (cdr G3cdd@clauses) G3cde@r G3cdf@mr G3cf7@pat G3cf8@fender G3cf9@expr)) G3cf5@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3cf3@t))) (G2f57@syntax-dispatch G3cf3@t '(any any any)))) G3ce5@t))) (G2f57@syntax-dispatch G3ce5@t '(any any)))) (car G3cdd@clauses))))) (lambda (G3cc7@e G3cc8@r G3cc9@mr) ((lambda (G3ccd@t) ((lambda (G3ccf@ls/false) (if G3ccf@ls/false (apply (lambda (G3cd1@expr G3cd2@keys G3cd3@clauses) (begin (G2f5d@verify-literals G3cd2@keys G3cc7@e) ((lambda (G3cd7@x) ((lambda (G3cd9@body) (list (G2cb2@G2bf0@build-lambda '#f (list G3cd7@x) G3cd9@body) (G2f7b@chi-expr G3cd1@expr G3cc8@r G3cc9@mr))) (G3cc6@gen-syntax-case G3cd7@x G3cd2@keys G3cd3@clauses G3cc8@r G3cc9@mr))) (G2cd4@gen-lexical 'tmp)))) G3ccf@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3ccd@t))) (G2f57@syntax-dispatch G3ccd@t '(_ any each-any . each-any)))) G3cc7@e)))) '#f '#f '#f '#f)))) (set! G2f61@ellipsis-map (lambda (G3d49@proc G3d4a@ls . G3d4d@ls*) ((lambda (G3d50@who) (begin (set! G3d50@who '...) (begin (if (not (list? G3d4a@ls)) (assertion-violation G3d50@who '"not a list" G3d4a@ls) (void)) (if (not (null? G3d4d@ls*)) ((lambda (G3d51@n) (for-each (lambda (G3d53@x) (begin (if (not (list? G3d53@x)) (assertion-violation G3d50@who '"not a list" G3d53@x) (void)) (if (not (= (length G3d53@x) G3d51@n)) (assertion-violation G3d50@who '"length mismatch" G3d4a@ls G3d53@x) (void)))) G3d4d@ls*)) (length G3d4a@ls)) (void)) (apply map G3d49@proc G3d4a@ls G3d4d@ls*)))) '#f))) (set! G2f63@syntax-transformer ((lambda () ((lambda (G3d56@gen-syntax G3d58@gen-ref G3d5a@gen-append G3d5c@gen-mappend G3d5e@gen-map G3d60@gen-cons G3d62@gen-vector G3d64@regen) (begin (set! G3d56@gen-syntax (lambda (G3dc9@src G3dca@e G3dcb@r G3dcc@maps G3dcd@ellipsis? G3dce@vec?) ((lambda (G3dd5@t) ((lambda (G3dd7@ls/false) (if (and G3dd7@ls/false (apply (lambda (G3dd9@dots) (G3dcd@ellipsis? G3dd9@dots)) G3dd7@ls/false)) (apply (lambda (G3ddb@dots) (G3042@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dc9@src)) G3dd7@ls/false) ((lambda (G3ddd@t) ((lambda (G3ddf@ls/false) (if (and G3ddf@ls/false (apply (lambda (G3de1@id) (G2d58@id? G3de1@id)) G3ddf@ls/false)) (apply (lambda (G3de3@id) ((lambda (G3de5@label) ((lambda (G3de7@b) ((lambda () (if (eq? (G2d7a@binding-type G3de7@b) 'syntax) (call-with-values (lambda () ((lambda (G3deb@var.lev) (G3d58@gen-ref G3dc9@src (car G3deb@var.lev) (cdr G3deb@var.lev) G3dcc@maps)) (G2d7c@binding-value G3de7@b))) (lambda (G3ded@G3de9 G3dee@G3dea) ((lambda (G3df1@maps G3df2@var) (values (list 'ref G3df2@var) G3df1@maps)) G3dee@G3dea G3ded@G3de9))) (values (list 'quote G3dca@e) G3dcc@maps))))) (G2d76@label->binding G3de5@label G3dcb@r))) (G2d72@id->label G3dca@e))) G3ddf@ls/false) ((lambda (G3df5@t) ((lambda (G3df7@ls/false) (if (and G3df7@ls/false (apply (lambda (G3df9@dots G3dfa@e) (G3dcd@ellipsis? G3df9@dots)) G3df7@ls/false)) (apply (lambda (G3dfd@dots G3dfe@e) (if G3dce@vec? (G3042@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dc9@src) (G3d56@gen-syntax G3dc9@src G3dfe@e G3dcb@r G3dcc@maps (lambda (G3e01@x) '#f) '#f))) G3df7@ls/false) ((lambda (G3e03@t) ((lambda (G3e05@ls/false) (if (and G3e05@ls/false (apply (lambda (G3e07@x G3e08@dots G3e09@y) (G3dcd@ellipsis? G3e08@dots)) G3e05@ls/false)) (apply (lambda (G3e0d@x G3e0e@dots G3e0f@y) ((letrec ((G3e13@f (lambda (G3e15@y G3e16@k) ((lambda (G3e19@t) ((lambda (G3e1b@ls/false) (if G3e1b@ls/false (apply (lambda () (G3e16@k G3dcc@maps)) G3e1b@ls/false) ((lambda (G3e1d@t) ((lambda (G3e1f@ls/false) (if (and G3e1f@ls/false (apply (lambda (G3e21@dots G3e22@y) (G3dcd@ellipsis? G3e21@dots)) G3e1f@ls/false)) (apply (lambda (G3e25@dots G3e26@y) (G3e13@f G3e26@y (lambda (G3e29@maps) (call-with-values (lambda () (G3e16@k (cons '() G3e29@maps))) (lambda (G3e2d@G3e2b G3e2e@G3e2c) ((lambda (G3e31@maps G3e32@x) (if (null? (car G3e31@maps)) (G3042@syntax-violation '#f '"extra ellipsis in syntax form" G3dc9@src) (values (G3d5c@gen-mappend G3e32@x (car G3e31@maps)) (cdr G3e31@maps)))) G3e2e@G3e2c G3e2d@G3e2b)))))) G3e1f@ls/false) ((lambda (G3e35@t) ((lambda (G3e37@ls/false) (if G3e37@ls/false (apply (lambda () (call-with-values (lambda () (G3d56@gen-syntax G3dc9@src G3e15@y G3dcb@r G3dcc@maps G3dcd@ellipsis? G3dce@vec?)) (lambda (G3e3b@G3e39 G3e3c@G3e3a) ((lambda (G3e3f@maps G3e40@y) (call-with-values (lambda () (G3e16@k G3e3f@maps)) (lambda (G3e45@G3e43 G3e46@G3e44) ((lambda (G3e49@maps G3e4a@x) (values (G3d5a@gen-append G3e4a@x G3e40@y) G3e49@maps)) G3e46@G3e44 G3e45@G3e43)))) G3e3c@G3e3a G3e3b@G3e39)))) G3e37@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3e35@t))) (G2f57@syntax-dispatch G3e35@t '_))) G3e1d@t))) (G2f57@syntax-dispatch G3e1d@t '(any . any)))) G3e19@t))) (G2f57@syntax-dispatch G3e19@t '()))) G3e15@y)))) G3e13@f) G3e0f@y (lambda (G3e4d@maps) (call-with-values (lambda () (G3d56@gen-syntax G3dc9@src G3e0d@x G3dcb@r (cons '() G3e4d@maps) G3dcd@ellipsis? '#f)) (lambda (G3e51@G3e4f G3e52@G3e50) ((lambda (G3e55@maps G3e56@x) (if (null? (car G3e55@maps)) (G3042@syntax-violation '#f '"extra ellipsis in syntax form" G3dc9@src) (values (G3d5e@gen-map G3e56@x (car G3e55@maps)) (cdr G3e55@maps)))) G3e52@G3e50 G3e51@G3e4f)))))) G3e05@ls/false) ((lambda (G3e59@t) ((lambda (G3e5b@ls/false) (if G3e5b@ls/false (apply (lambda (G3e5d@x G3e5e@y) (call-with-values (lambda () (G3d56@gen-syntax G3dc9@src G3e5d@x G3dcb@r G3dcc@maps G3dcd@ellipsis? '#f)) (lambda (G3e63@G3e61 G3e64@G3e62) ((lambda (G3e67@maps G3e68@xnew) (call-with-values (lambda () (G3d56@gen-syntax G3dc9@src G3e5e@y G3dcb@r G3e67@maps G3dcd@ellipsis? G3dce@vec?)) (lambda (G3e6d@G3e6b G3e6e@G3e6c) ((lambda (G3e71@maps G3e72@ynew) (values (G3d60@gen-cons G3dca@e G3e5d@x G3e5e@y G3e68@xnew G3e72@ynew) G3e71@maps)) G3e6e@G3e6c G3e6d@G3e6b)))) G3e64@G3e62 G3e63@G3e61)))) G3e5b@ls/false) ((lambda (G3e75@t) ((lambda (G3e77@ls/false) (if G3e77@ls/false (apply (lambda (G3e79@ls) (call-with-values (lambda () (G3d56@gen-syntax G3dc9@src G3e79@ls G3dcb@r G3dcc@maps G3dcd@ellipsis? '#t)) (lambda (G3e7d@G3e7b G3e7e@G3e7c) ((lambda (G3e81@maps G3e82@lsnew) (values (G3d62@gen-vector G3dca@e G3e79@ls G3e82@lsnew) G3e81@maps)) G3e7e@G3e7c G3e7d@G3e7b)))) G3e77@ls/false) ((lambda (G3e85@t) ((lambda (G3e87@ls/false) (if G3e87@ls/false (apply (lambda () (values (list 'quote G3dca@e) G3dcc@maps)) G3e87@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3e85@t))) (G2f57@syntax-dispatch G3e85@t '_))) G3e75@t))) (G2f57@syntax-dispatch G3e75@t '#(vector each-any)))) G3e59@t))) (G2f57@syntax-dispatch G3e59@t '(any . any)))) G3e03@t))) (G2f57@syntax-dispatch G3e03@t '(any any . any)))) G3df5@t))) (G2f57@syntax-dispatch G3df5@t '(any any)))) G3ddd@t))) (G2f57@syntax-dispatch G3ddd@t 'any))) G3dd5@t))) (G2f57@syntax-dispatch G3dd5@t 'any))) G3dca@e))) (set! G3d58@gen-ref (lambda (G3db1@src G3db2@var G3db3@level G3db4@maps) (if (= G3db3@level '0) (values G3db2@var G3db4@maps) (if (null? G3db4@maps) (G3042@syntax-violation '#f '"missing ellipsis in syntax form" G3db1@src) (call-with-values (lambda () (G3d58@gen-ref G3db1@src G3db2@var (- G3db3@level '1) (cdr G3db4@maps))) (lambda (G3dbb@G3db9 G3dbc@G3dba) ((lambda (G3dbf@outer-maps G3dc0@outer-var) ((lambda (G3dc3@t) (if G3dc3@t ((lambda (G3dc5@b) (values (cdr G3dc5@b) G3db4@maps)) G3dc3@t) ((lambda (G3dc7@inner-var) (values G3dc7@inner-var (cons (cons (cons G3dc0@outer-var G3dc7@inner-var) (car G3db4@maps)) G3dbf@outer-maps))) (G2cd4@gen-lexical 'tmp)))) (assq G3dc0@outer-var (car G3db4@maps)))) G3dbc@G3dba G3dbb@G3db9))))))) (set! G3d5a@gen-append (lambda (G3dad@x G3dae@y) (if (fast-equal? G3dae@y ''()) G3dad@x (list 'append G3dad@x G3dae@y)))) (set! G3d5c@gen-mappend (lambda (G3da9@e G3daa@map-env) (list 'apply '(primitive append) (G3d5e@gen-map G3da9@e G3daa@map-env)))) (set! G3d5e@gen-map (lambda (G3d97@e G3d98@map-env) ((lambda (G3d9b@formals G3d9c@actuals) (if (eq? (car G3d97@e) 'ref) (car G3d9c@actuals) (if (for-all (lambda (G3d9f@x) (and (eq? (car G3d9f@x) 'ref) (memq (cadr G3d9f@x) G3d9b@formals))) (cdr G3d97@e)) ((lambda (G3da1@args) (cons 'map (cons (list 'primitive (car G3d97@e)) G3da1@args))) (map ((lambda (G3da3@r) (lambda (G3da5@x) (cdr (assq (cadr G3da5@x) G3da3@r)))) (map cons G3d9b@formals G3d9c@actuals)) (cdr G3d97@e))) (cons* 'map (list 'lambda G3d9b@formals G3d97@e) G3d9c@actuals)))) (map cdr G3d98@map-env) (map (lambda (G3da7@x) (list 'ref (car G3da7@x))) G3d98@map-env)))) (set! G3d60@gen-cons (lambda (G3d87@e G3d88@x G3d89@y G3d8a@xnew G3d8b@ynew) ((lambda (G3d91@t) (if (memv G3d91@t '(quote)) (if (eq? (car G3d8a@xnew) 'quote) ((lambda (G3d93@xnew G3d94@ynew) (if (and (eq? G3d93@xnew G3d88@x) (eq? G3d94@ynew G3d89@y)) (list 'quote G3d87@e) (list 'quote (cons G3d93@xnew G3d94@ynew)))) (cadr G3d8a@xnew) (cadr G3d8b@ynew)) (if (null? (cadr G3d8b@ynew)) (list 'list G3d8a@xnew) (list 'cons G3d8a@xnew G3d8b@ynew))) (if (memv G3d91@t '(list)) (cons 'list (cons G3d8a@xnew (cdr G3d8b@ynew))) (list 'cons G3d8a@xnew G3d8b@ynew)))) (car G3d8b@ynew)))) (set! G3d62@gen-vector (lambda (G3d81@e G3d82@ls G3d83@lsnew) (if (eq? (car G3d83@lsnew) 'quote) (if (eq? (cadr G3d83@lsnew) G3d82@ls) (list 'quote G3d81@e) (list 'quote (list->vector (cadr G3d83@lsnew)))) (if (eq? (car G3d83@lsnew) 'list) (cons 'vector (cdr G3d83@lsnew)) (list 'list->vector G3d83@lsnew))))) (set! G3d64@regen (lambda (G3d7b@x) ((lambda (G3d7d@t) (if (memv G3d7d@t '(ref)) (cadr G3d7b@x) (if (memv G3d7d@t '(primitive)) (list 'primitive (cadr G3d7b@x)) (if (memv G3d7d@t '(quote)) (list 'quote (cadr G3d7b@x)) (if (memv G3d7d@t '(lambda)) (G2cb2@G2bf0@build-lambda '#f (cadr G3d7b@x) (G3d64@regen (caddr G3d7b@x))) (if (memv G3d7d@t '(map)) ((lambda (G3d7f@ls) (cons '(primitive ellipsis-map) G3d7f@ls)) (map G3d64@regen (cdr G3d7b@x))) (cons (list 'primitive (car G3d7b@x)) (map G3d64@regen (cdr G3d7b@x))))))))) (car G3d7b@x)))) (lambda (G3d65@e G3d66@r G3d67@mr) ((lambda (G3d6b@t) ((lambda (G3d6d@ls/false) (if G3d6d@ls/false (apply (lambda (G3d6f@x) (call-with-values (lambda () (G3d56@gen-syntax G3d65@e G3d6f@x G3d66@r '() G2f59@ellipsis? '#f)) (lambda (G3d73@G3d71 G3d74@G3d72) ((lambda (G3d77@maps G3d78@e) (G3d64@regen G3d78@e)) G3d74@G3d72 G3d73@G3d71)))) G3d6d@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3d6b@t))) (G2f57@syntax-dispatch G3d6b@t '(_ any)))) G3d65@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f65@core-macro-transformer (lambda (G3e89@name) ((lambda (G3e8b@t) (if (memv G3e8b@t '(quote)) G2f07@quote-transformer (if (memv G3e8b@t '(lambda)) G2f0b@lambda-transformer (if (memv G3e8b@t '(case-lambda)) G2f09@case-lambda-transformer (if (memv G3e8b@t '(letrec)) G2eef@letrec-transformer (if (memv G3e8b@t '(letrec*)) G2ef1@letrec*-transformer (if (memv G3e8b@t '(if)) G2eff@if-transformer (if (memv G3e8b@t '(and)) G2f01@and-transformer (if (memv G3e8b@t '(or)) G2f03@or-transformer (if (memv G3e8b@t '(foreign-call)) G2f53@foreign-call-transformer (if (memv G3e8b@t '(syntax-case)) G2f5f@syntax-case-transformer (if (memv G3e8b@t '(syntax)) G2f63@syntax-transformer (if (memv G3e8b@t '(type-descriptor)) G2ef5@type-descriptor-transformer (if (memv G3e8b@t '(record-type-descriptor)) G2ef7@record-type-descriptor-transformer (if (memv G3e8b@t '(record-constructor-descriptor)) G2ef9@record-constructor-descriptor-transformer (if (memv G3e8b@t '(fluid-let-syntax)) G2ef3@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e89@name))))))))))))))))) G3e89@name))) (set! G2f67@file-options-macro (lambda (G3e8d@x) ((lambda (G3e90@valid-option?) (begin (set! G3e90@valid-option? (lambda (G3e99@x) (and (G2d58@id? G3e99@x) (memq (G2d5a@id->sym G3e99@x) '(no-fail no-create no-truncate))))) ((lambda (G3e91@t) ((lambda (G3e93@ls/false) (if (and G3e93@ls/false (apply (lambda (G3e95@opt*) (and (for-all G3e90@valid-option? G3e95@opt*) (G28f5@G2896@file-options-spec (map G2d5a@id->sym G3e95@opt*)))) G3e93@ls/false)) (apply (lambda (G3e97@opt*) (G2f0d@bless (list 'quote (G28f5@G2896@file-options-spec (map G2d5a@id->sym G3e97@opt*))))) G3e93@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3e91@t))) (G2f57@syntax-dispatch G3e91@t '(_ . each-any)))) G3e8d@x))) '#f))) (set! G2f69@symbol-macro (lambda (G3e9b@x G3e9c@set) ((lambda (G3e9f@t) ((lambda (G3ea1@ls/false) (if (and G3ea1@ls/false (apply (lambda (G3ea3@name) (and (G2d58@id? G3ea3@name) (memq (G2d5a@id->sym G3ea3@name) G3e9c@set))) G3ea1@ls/false)) (apply (lambda (G3ea5@name) (G2f0d@bless (list 'quote G3ea5@name))) G3ea1@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3e9f@t))) (G2f57@syntax-dispatch G3e9f@t '(_ any)))) G3e9b@x))) (set! G2f6b@macro-transformer (lambda (G3ea7@x) (if (procedure? G3ea7@x) G3ea7@x (if (symbol? G3ea7@x) ((lambda (G3ea9@t) (if (memv G3ea9@t '(define-record-type)) G2f4b@define-record-type-macro (if (memv G3ea9@t '(define-struct)) G2f49@define-struct-macro (if (memv G3ea9@t '(include)) G2f3f@include-macro (if (memv G3ea9@t '(cond)) G2f3b@cond-macro (if (memv G3ea9@t '(let)) G2f13@let-macro (if (memv G3ea9@t '(do)) G2f33@do-macro (if (memv G3ea9@t '(or)) G2f37@or-macro (if (memv G3ea9@t '(and)) G2f39@and-macro (if (memv G3ea9@t '(let*)) G2f35@let*-macro (if (memv G3ea9@t '(let-values)) G2f15@let-values-macro (if (memv G3ea9@t '(let*-values)) G2f17@let*-values-macro (if (memv G3ea9@t '(syntax-rules)) G2f43@syntax-rules-macro (if (memv G3ea9@t '(quasiquote)) G2f45@quasiquote-macro (if (memv G3ea9@t '(quasisyntax)) G2f47@quasisyntax-macro (if (memv G3ea9@t '(with-syntax)) G2f0f@with-syntax-macro (if (memv G3ea9@t '(when)) G2efb@when-macro (if (memv G3ea9@t '(unless)) G2efd@unless-macro (if (memv G3ea9@t '(case)) G2f05@case-macro (if (memv G3ea9@t '(identifier-syntax)) G2f31@identifier-syntax-macro (if (memv G3ea9@t '(time)) G2f29@time-macro (if (memv G3ea9@t '(delay)) G2f2b@delay-macro (if (memv G3ea9@t '(assert)) G2f2d@assert-macro (if (memv G3ea9@t '(endianness)) G2f2f@endianness-macro (if (memv G3ea9@t '(guard)) G2f25@guard-macro (if (memv G3ea9@t '(define-enumeration)) G2f27@define-enumeration-macro (if (memv G3ea9@t '(trace-lambda)) G2f19@trace-lambda-macro (if (memv G3ea9@t '(trace-define)) G2f1b@trace-define-macro (if (memv G3ea9@t '(trace-define-syntax)) G2f1d@trace-define-syntax-macro (if (memv G3ea9@t '(trace-let-syntax)) G2f21@trace-let-syntax-macro (if (memv G3ea9@t '(trace-letrec-syntax)) G2f23@trace-letrec-syntax-macro (if (memv G3ea9@t '(define-condition-type)) G2f4d@define-condition-type-macro (if (memv G3ea9@t '(parameterize)) G2f51@parameterize-macro (if (memv G3ea9@t '(include-into)) G2f41@include-into-macro (if (memv G3ea9@t '(eol-style)) (lambda (G3eab@x) (G2f69@symbol-macro G3eab@x '(none lf cr crlf nel crnel ls))) (if (memv G3ea9@t '(error-handling-mode)) (lambda (G3ead@x) (G2f69@symbol-macro G3ead@x '(ignore raise replace))) (if (memv G3ea9@t '(buffer-mode)) (lambda (G3eaf@x) (G2f69@symbol-macro G3eaf@x '(none line block))) (if (memv G3ea9@t '(file-options)) G2f67@file-options-macro (if (memv G3ea9@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f4f@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3ea7@x)))))))))))))))))))))))))))))))))))))))) G3ea7@x) (error 'core-macro-transformer '"BUG: invalid macro" G3ea7@x))))) (set! G2f6d@local-macro-transformer (lambda (G3eb1@x) (car G3eb1@x))) (set! G2f6f@do-macro-call (lambda (G3eb3@transformer G3eb4@expr) ((lambda (G3eb7@out) (begin ((letrec ((G3eb9@f (lambda (G3ebb@x) (if (not (G2d20@stx? G3ebb@x)) (if (pair? G3ebb@x) (begin (G3eb9@f (car G3ebb@x)) (G3eb9@f (cdr G3ebb@x))) (if (vector? G3ebb@x) (vector-for-each G3eb9@f G3ebb@x) (if (symbol? G3ebb@x) (G3042@syntax-violation '#f '"raw symbol encountered in output of macro" G3eb4@expr G3ebb@x) (void)))) (void))))) G3eb9@f) G3eb7@out) (G2d42@add-mark (G2d38@gen-mark) G3eb7@out G3eb4@expr))) (G3eb3@transformer (G2d42@add-mark G2d3a@anti-mark G3eb4@expr '#f))))) (set! G2f71@chi-macro (lambda (G3ebd@p G3ebe@e) (G2f6f@do-macro-call (G2f6b@macro-transformer G3ebd@p) G3ebe@e))) (set! G2f73@chi-local-macro (lambda (G3ec1@p G3ec2@e) (G2f6f@do-macro-call (G2f6d@local-macro-transformer G3ec1@p) G3ec2@e))) (set! G2f75@chi-global-macro (lambda (G3ec5@p G3ec6@e) ((lambda (G3ec9@lib G3eca@loc) (begin (G2b70@G2a18@visit-library G3ec9@lib) ((lambda (G3ecd@x) ((lambda (G3ecf@transformer) (G2f6f@do-macro-call G3ecf@transformer G3ec6@e)) (if (procedure? G3ecd@x) G3ecd@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ecd@x)))) (symbol-value G3eca@loc)))) (car G3ec5@p) (cdr G3ec5@p)))) (set! G2f77@chi-expr* (lambda (G3ed1@e* G3ed2@r G3ed3@mr) (if (null? G3ed1@e*) '() ((lambda (G3ed7@e) (cons G3ed7@e (G2f77@chi-expr* (cdr G3ed1@e*) G3ed2@r G3ed3@mr))) (G2f7b@chi-expr (car G3ed1@e*) G3ed2@r G3ed3@mr))))) (set! G2f79@chi-application (lambda (G3ed9@e G3eda@r G3edb@mr) ((lambda (G3edf@t) ((lambda (G3ee1@ls/false) (if G3ee1@ls/false (apply (lambda (G3ee3@rator G3ee4@rands) ((lambda (G3ee7@rator) (cons G3ee7@rator (G2f77@chi-expr* G3ee4@rands G3eda@r G3edb@mr))) (G2f7b@chi-expr G3ee3@rator G3eda@r G3edb@mr))) G3ee1@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3edf@t))) (G2f57@syntax-dispatch G3edf@t '(any . each-any)))) G3ed9@e))) (set! G2f7b@chi-expr (lambda (G3ee9@e G3eea@r G3eeb@mr) (call-with-values (lambda () (G2d80@syntax-type G3ee9@e G3eea@r)) (lambda (G3ef2@G3eef G3ef3@G3ef0 G3ef4@G3ef1) ((lambda (G3ef8@kwd G3ef9@value G3efa@type) ((lambda (G3efe@t) (if (memv G3efe@t '(core-macro)) ((lambda (G3f00@transformer) (G3f00@transformer G3ee9@e G3eea@r G3eeb@mr)) (G2f65@core-macro-transformer G3ef9@value)) (if (memv G3efe@t '(global)) ((lambda (G3f02@lib) ((lambda (G3f04@loc) ((lambda () (begin ((G2fc4@inv-collector) G3f02@lib) G3f04@loc)))) (cdr G3ef9@value))) (car G3ef9@value)) (if (memv G3efe@t '(core-prim)) ((lambda (G3f06@name) (list 'primitive G3f06@name)) G3ef9@value) (if (memv G3efe@t '(call)) (G2f79@chi-application G3ee9@e G3eea@r G3eeb@mr) (if (memv G3efe@t '(lexical)) ((lambda (G3f08@lex) G3f08@lex) (G2ee3@lexical-var G3ef9@value)) (if (memv G3efe@t '(global-macro global-macro!)) (G2f7b@chi-expr (G2f75@chi-global-macro G3ef9@value G3ee9@e) G3eea@r G3eeb@mr) (if (memv G3efe@t '(local-macro local-macro!)) (G2f7b@chi-expr (G2f73@chi-local-macro G3ef9@value G3ee9@e) G3eea@r G3eeb@mr) (if (memv G3efe@t '(macro macro!)) (G2f7b@chi-expr (G2f71@chi-macro G3ef9@value G3ee9@e) G3eea@r G3eeb@mr) (if (memv G3efe@t '(constant)) ((lambda (G3f0a@datum) (list 'quote G3f0a@datum)) G3ef9@value) (if (memv G3efe@t '(set!)) (G2f7d@chi-set! G3ee9@e G3eea@r G3eeb@mr) (if (memv G3efe@t '(begin)) ((lambda (G3f0c@t) ((lambda (G3f0e@ls/false) (if G3f0e@ls/false (apply (lambda (G3f10@x G3f11@x*) (G2cb5@G2c26@build-sequence '#f (G2f77@chi-expr* (cons G3f10@x G3f11@x*) G3eea@r G3eeb@mr))) G3f0e@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3f0c@t))) (G2f57@syntax-dispatch G3f0c@t '(_ any . each-any)))) G3ee9@e) (if (memv G3efe@t '(let-syntax letrec-syntax)) ((lambda (G3f14@t) ((lambda (G3f16@ls/false) (if (and G3f16@ls/false (apply (lambda (G3f18@xlhs* G3f19@xrhs* G3f1a@xbody G3f1b@xbody*) (if (not (G2d62@valid-bound-ids? G3f18@xlhs*)) (G3042@syntax-violation '#f '"invalid identifiers" G3ee9@e) (void))) G3f16@ls/false)) (apply (lambda (G3f20@xlhs* G3f21@xrhs* G3f22@xbody G3f23@xbody*) ((lambda (G3f28@xlab*) ((lambda (G3f2a@xrib) ((lambda (G3f2c@xb*) ((lambda () (G2cb5@G2c26@build-sequence '#f (G2f77@chi-expr* (map (lambda (G3f2e@x) (G2d44@add-subst G3f2a@xrib G3f2e@x)) (cons G3f22@xbody G3f23@xbody*)) (append (map cons G3f28@xlab* G3f2c@xb*) G3eea@r) (append (map cons G3f28@xlab* G3f2c@xb*) G3eeb@mr)))))) (map (lambda (G3f30@x) (G2d98@make-eval-transformer (G2fb6@expand-transformer (if (eq? G3efa@type 'let-syntax) G3f30@x (G2d44@add-subst G3f2a@xrib G3f30@x)) G3eeb@mr))) G3f21@xrhs*))) (G2d13@make-full-rib G3f20@xlhs* G3f28@xlab*))) (map G2cd8@gen-label G3f20@xlhs*))) G3f16@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3f14@t))) (G2f57@syntax-dispatch G3f14@t '(_ #(each (any any)) any . each-any)))) G3ee9@e) (if (memv G3efe@t '(displaced-lexical)) (G3042@syntax-violation '#f '"identifier out of context" G3ee9@e) (if (memv G3efe@t '(syntax)) (G3042@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ee9@e) (if (memv G3efe@t '(define define-syntax module import library)) (G3042@syntax-violation '#f (string-append ((lambda (G3f32@t) (if (memv G3f32@t '(define)) '"a definition" (if (memv G3f32@t '(define-syntax)) '"a define-syntax" (if (memv G3f32@t '(module)) '"a module definition" (if (memv G3f32@t '(library)) '"a library definition" (if (memv G3f32@t '(import)) '"an import declaration" (if (memv G3f32@t '(export)) '"an export declaration" '"a non-expression"))))))) G3efa@type) '" was found where an expression was expected") G3ee9@e) (if (memv G3efe@t '(mutable)) (G3042@syntax-violation '#f '"attempt to reference an unexportable variable" G3ee9@e) (G3042@syntax-violation '#f '"invalid expression" G3ee9@e)))))))))))))))))) G3efa@type)) G3ef4@G3ef1 G3ef3@G3ef0 G3ef2@G3eef))))) (set! G2f7d@chi-set! (lambda (G3f34@e G3f35@r G3f36@mr) ((lambda (G3f3a@t) ((lambda (G3f3c@ls/false) (if (and G3f3c@ls/false (apply (lambda (G3f3e@x G3f3f@v) (G2d58@id? G3f3e@x)) G3f3c@ls/false)) (apply (lambda (G3f42@x G3f43@v) (call-with-values (lambda () (G2d80@syntax-type G3f42@x G3f35@r)) (lambda (G3f49@G3f46 G3f4a@G3f47 G3f4b@G3f48) ((lambda (G3f4f@kwd G3f50@value G3f51@type) ((lambda (G3f55@t) (if (memv G3f55@t '(lexical)) (begin (G2ee7@set-lexical-mutable! G3f50@value '#t) (list 'set! (G2ee3@lexical-var G3f50@value) (G2f7b@chi-expr G3f43@v G3f35@r G3f36@mr))) (if (memv G3f55@t '(core-prim)) (G3042@syntax-violation '#f '"cannot modify imported core primitive" G3f34@e) (if (memv G3f55@t '(global)) (G3042@syntax-violation '#f '"attempt to modify imported binding" G3f34@e) (if (memv G3f55@t '(global-macro!)) (G2f7b@chi-expr (G2f75@chi-global-macro G3f50@value G3f34@e) G3f35@r G3f36@mr) (if (memv G3f55@t '(local-macro!)) (G2f7b@chi-expr (G2f73@chi-local-macro G3f50@value G3f34@e) G3f35@r G3f36@mr) (if (memv G3f55@t '(mutable)) (G3042@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f34@e) (G3042@syntax-violation '#f '"invalid syntax" G3f34@e)))))))) G3f51@type)) G3f4b@G3f48 G3f4a@G3f47 G3f49@G3f46)))) G3f3c@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3f3a@t))) (G2f57@syntax-dispatch G3f3a@t '(_ any any)))) G3f34@e))) (set! G2f7f@verify-formals (lambda (G3f57@fmls G3f58@stx) ((lambda (G3f5b@t) ((lambda (G3f5d@ls/false) (if G3f5d@ls/false (apply (lambda (G3f5f@x*) (if (not (G2d62@valid-bound-ids? G3f5f@x*)) (G2f11@invalid-fmls-error G3f58@stx G3f57@fmls) (void))) G3f5d@ls/false) ((lambda (G3f61@t) ((lambda (G3f63@ls/false) (if G3f63@ls/false (apply (lambda (G3f65@x* G3f66@x) (if (not (G2d62@valid-bound-ids? (cons G3f66@x G3f65@x*))) (G2f11@invalid-fmls-error G3f58@stx G3f57@fmls) (void))) G3f63@ls/false) ((lambda (G3f69@t) ((lambda (G3f6b@ls/false) (if G3f6b@ls/false (apply (lambda () (G3042@syntax-violation '#f '"invalid syntax" G3f58@stx)) G3f6b@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3f69@t))) (G2f57@syntax-dispatch G3f69@t '_))) G3f61@t))) (G2f57@syntax-dispatch G3f61@t '#(each+ any () any)))) G3f5b@t))) (G2f57@syntax-dispatch G3f5b@t 'each-any))) G3f57@fmls))) (set! G2f81@chi-lambda-clause (lambda (G3f6d@stx G3f6e@fmls G3f6f@body* G3f70@r G3f71@mr) ((lambda (G3f77@t) ((lambda (G3f79@ls/false) (if G3f79@ls/false (apply (lambda (G3f7b@x*) (begin (G2f7f@verify-formals G3f6e@fmls G3f6d@stx) ((lambda (G3f7d@lex* G3f7e@lab*) (values G3f7d@lex* (G2f91@chi-internal (G2d44@add-subst (G2d13@make-full-rib G3f7b@x* G3f7e@lab*) G3f6f@body*) (G2eeb@add-lexicals G3f7e@lab* G3f7d@lex* G3f70@r) G3f71@mr))) (map G2cd4@gen-lexical G3f7b@x*) (map G2cd8@gen-label G3f7b@x*)))) G3f79@ls/false) ((lambda (G3f81@t) ((lambda (G3f83@ls/false) (if G3f83@ls/false (apply (lambda (G3f85@x* G3f86@x) (begin (G2f7f@verify-formals G3f6e@fmls G3f6d@stx) ((lambda (G3f89@lex* G3f8a@lab* G3f8b@lex G3f8c@lab) (values (append G3f89@lex* G3f8b@lex) (G2f91@chi-internal (G2d44@add-subst (G2d13@make-full-rib (cons G3f86@x G3f85@x*) (cons G3f8c@lab G3f8a@lab*)) G3f6f@body*) (G2eeb@add-lexicals (cons G3f8c@lab G3f8a@lab*) (cons G3f8b@lex G3f89@lex*) G3f70@r) G3f71@mr))) (map G2cd4@gen-lexical G3f85@x*) (map G2cd8@gen-label G3f85@x*) (G2cd4@gen-lexical G3f86@x) (G2cd8@gen-label G3f86@x)))) G3f83@ls/false) ((lambda (G3f91@t) ((lambda (G3f93@ls/false) (if G3f93@ls/false (apply (lambda () (G3042@syntax-violation '#f '"invalid syntax" G3f6e@fmls)) G3f93@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G3f91@t))) (G2f57@syntax-dispatch G3f91@t '_))) G3f81@t))) (G2f57@syntax-dispatch G3f81@t '#(each+ any () any)))) G3f77@t))) (G2f57@syntax-dispatch G3f77@t 'each-any))) G3f6e@fmls))) (set! G2f83@chi-lambda-clause* (lambda (G3f95@stx G3f96@fmls* G3f97@body** G3f98@r G3f99@mr) (if (null? G3f96@fmls*) (values '() '()) (call-with-values (lambda () (G2f81@chi-lambda-clause G3f95@stx (car G3f96@fmls*) (car G3f97@body**) G3f98@r G3f99@mr)) (lambda (G3fa1@G3f9f G3fa2@G3fa0) ((lambda (G3fa5@b G3fa6@a) (call-with-values (lambda () (G2f83@chi-lambda-clause* G3f95@stx (cdr G3f96@fmls*) (cdr G3f97@body**) G3f98@r G3f99@mr)) (lambda (G3fab@G3fa9 G3fac@G3faa) ((lambda (G3faf@b* G3fb0@a*) (values (cons G3fa6@a G3fb0@a*) (cons G3fa5@b G3faf@b*))) G3fac@G3faa G3fab@G3fa9)))) G3fa2@G3fa0 G3fa1@G3f9f)))))) (set! G2f85@chi-defun (lambda (G3fb3@x G3fb4@r G3fb5@mr) ((lambda (G3fb9@fmls G3fba@body*) (call-with-values (lambda () (G2f81@chi-lambda-clause G3fb9@fmls G3fb9@fmls G3fba@body* G3fb4@r G3fb5@mr)) (lambda (G3fbf@G3fbd G3fc0@G3fbe) ((lambda (G3fc3@body G3fc4@fmls) (G2cb2@G2bf0@build-lambda '#f G3fc4@fmls G3fc3@body)) G3fc0@G3fbe G3fbf@G3fbd)))) (car G3fb3@x) (cdr G3fb3@x)))) (set! G2f87@chi-rhs (lambda (G3fc7@rhs G3fc8@r G3fc9@mr) ((lambda (G3fcd@t) (if (memv G3fcd@t '(defun)) (G2f85@chi-defun (cdr G3fc7@rhs) G3fc8@r G3fc9@mr) (if (memv G3fcd@t '(expr)) ((lambda (G3fcf@expr) (G2f7b@chi-expr G3fcf@expr G3fc8@r G3fc9@mr)) (cdr G3fc7@rhs)) (if (memv G3fcd@t '(top-expr)) ((lambda (G3fd1@expr) (G2cb5@G2c26@build-sequence '#f (list (G2f7b@chi-expr G3fd1@expr G3fc8@r G3fc9@mr) (G2cb6@G2c28@build-void)))) (cdr G3fc7@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fc7@rhs))))) (car G3fc7@rhs)))) (set! G2f89@expand-interaction-rhs*/init* (lambda (G3fd3@lhs* G3fd4@rhs* G3fd5@init* G3fd6@r G3fd7@mr) ((letrec ((G3fdd@f (lambda (G3fdf@lhs* G3fe0@rhs*) (if (null? G3fdf@lhs*) (map (lambda (G3fe3@x) (G2f7b@chi-expr G3fe3@x G3fd6@r G3fd7@mr)) G3fd5@init*) ((lambda (G3fe5@lhs G3fe6@rhs) ((lambda (G3fe9@t) (if (memv G3fe9@t '(defun)) ((lambda (G3feb@rhs) (cons (list 'set! G3fe5@lhs G3feb@rhs) (G3fdd@f (cdr G3fdf@lhs*) (cdr G3fe0@rhs*)))) (G2f85@chi-defun (cdr G3fe6@rhs) G3fd6@r G3fd7@mr)) (if (memv G3fe9@t '(expr)) ((lambda (G3fed@rhs) (cons (list 'set! G3fe5@lhs G3fed@rhs) (G3fdd@f (cdr G3fdf@lhs*) (cdr G3fe0@rhs*)))) (G2f7b@chi-expr (cdr G3fe6@rhs) G3fd6@r G3fd7@mr)) (if (memv G3fe9@t '(top-expr)) ((lambda (G3fef@e) (cons G3fef@e (G3fdd@f (cdr G3fdf@lhs*) (cdr G3fe0@rhs*)))) (G2f7b@chi-expr (cdr G3fe6@rhs) G3fd6@r G3fd7@mr)) (error 'expand-interaction '"invallid" G3fe6@rhs))))) (car G3fe6@rhs))) (car G3fdf@lhs*) (car G3fe0@rhs*)))))) G3fdd@f) G3fd3@lhs* G3fd4@rhs*))) (set! G2f8b@chi-rhs* (lambda (G3ff1@rhs* G3ff2@r G3ff3@mr) ((letrec ((G3ff7@f (lambda (G3ff9@ls) (if (null? G3ff9@ls) '() ((lambda (G3ffb@a) (cons G3ffb@a (G3ff7@f (cdr G3ff9@ls)))) (G2f87@chi-rhs (car G3ff9@ls) G3ff2@r G3ff3@mr)))))) G3ff7@f) G3ff1@rhs*))) (set! G2f8d@find-bound=? (lambda (G3ffd@x G3ffe@lhs* G3fff@rhs*) (if (null? G3ffe@lhs*) '#f (if (G2d5e@bound-id=? G3ffd@x (car G3ffe@lhs*)) (car G3fff@rhs*) (G2f8d@find-bound=? G3ffd@x (cdr G3ffe@lhs*) (cdr G3fff@rhs*)))))) (set! G2f8f@find-dups (lambda (G4003@ls) ((letrec ((G4005@f (lambda (G4007@ls G4008@dups) (if (null? G4007@ls) G4008@dups ((lambda (G400b@t) (if G400b@t ((lambda (G400d@x) (G4005@f (cdr G4007@ls) (cons (list (car G4007@ls) G400d@x) G4008@dups))) G400b@t) (G4005@f (cdr G4007@ls) G4008@dups))) (G2f8d@find-bound=? (car G4007@ls) (cdr G4007@ls) (cdr G4007@ls))))))) G4005@f) G4003@ls '()))) (set! G2f91@chi-internal (lambda (G400f@e* G4010@r G4011@mr) ((lambda (G4015@rib) (call-with-values (lambda () (G2fb4@chi-body* (map (lambda (G401f@x) (G2d44@add-subst G4015@rib G401f@x)) (G2d56@syntax->list G400f@e*)) G4010@r G4011@mr '() '() '() '() '() G4015@rib '#f)) (lambda (G4021@G4017 G4022@G4018 G4023@G4019 G4024@G401a G4025@G401b G4026@G401c G4027@G401d G4028@G401e) ((lambda (G4031@_exp* G4032@kwd* G4033@mod** G4034@rhs* G4035@lex* G4036@mr G4037@r G4038@e*) (begin (if (null? G4038@e*) (G3042@syntax-violation '#f '"no expression in body" G4038@e*) (void)) ((lambda (G4041@init*) ((lambda (G4043@rhs*) ((lambda () (G2cb8@G2c2c@build-letrec* '#f (reverse G4035@lex*) (reverse G4043@rhs*) (G2cb5@G2c26@build-sequence '#f G4041@init*))))) (G2f8b@chi-rhs* G4034@rhs* G4037@r G4036@mr))) (G2f77@chi-expr* (append (apply append (reverse G4033@mod**)) G4038@e*) G4037@r G4036@mr)))) G4028@G401e G4027@G401d G4026@G401c G4025@G401b G4024@G401a G4023@G4019 G4022@G4018 G4021@G4017)))) (G2d03@make-empty-rib)))) (set! G2f93@parse-module (lambda (G4045@e) ((lambda (G4047@t) ((lambda (G4049@ls/false) (if G4049@ls/false (apply (lambda (G404b@export* G404c@b*) (begin (if (not (for-all G2d58@id? G404b@export*)) (G3042@syntax-violation '#f '"module exports must be identifiers" G4045@e) (void)) (values '#f (list->vector G404b@export*) G404c@b*))) G4049@ls/false) ((lambda (G404f@t) ((lambda (G4051@ls/false) (if G4051@ls/false (apply (lambda (G4053@name G4054@export* G4055@b*) (begin (if (not (G2d58@id? G4053@name)) (G3042@syntax-violation '#f '"module name must be an identifier" G4045@e) (void)) (if (not (for-all G2d58@id? G4054@export*)) (G3042@syntax-violation '#f '"module exports must be identifiers" G4045@e) (void)) (values G4053@name (list->vector G4054@export*) G4055@b*))) G4051@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G404f@t))) (G2f57@syntax-dispatch G404f@t '(_ any each-any . each-any)))) G4047@t))) (G2f57@syntax-dispatch G4047@t '(_ each-any . each-any)))) G4045@e))) (set! G2f99@G2f94 (make-record-type-descriptor 'module-interface '#f 'G2f97 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2f9b@G2f96 '#f) (set! G2f9d@G2f95 (make-record-constructor-descriptor G2f99@G2f94 '#f G2f9b@G2f96)) (set! G2fa0@module-interface? (record-predicate G2f99@G2f94)) (set! G2fa2@make-module-interface (record-constructor G2f9d@G2f95)) (set! G2fa4@module-interface-first-mark (record-accessor G2f99@G2f94 '0)) (set! G2fa6@module-interface-exp-id-vec (record-accessor G2f99@G2f94 '1)) (set! G2fa8@module-interface-exp-lab-vec (record-accessor G2f99@G2f94 '2)) (set! G2faa@set-module-interface-first-mark! (record-mutator G2f99@G2f94 '0)) (set! G2fac@set-module-interface-exp-id-vec! (record-mutator G2f99@G2f94 '1)) (set! G2fae@set-module-interface-exp-lab-vec! (record-mutator G2f99@G2f94 '2)) (set! G2fb0@module-interface-exp-id* (lambda (G4059@iface G405a@id) ((lambda (G405e@diff-marks) (begin (set! G405e@diff-marks (lambda (G4065@ls G4066@x) (begin (if (null? G4065@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4069@a) (if (eq? G4069@a G4066@x) '() (cons G4069@a (G405e@diff-marks (cdr G4065@ls) G4066@x)))) (car G4065@ls))))) ((lambda (G405f@diff G4060@id-vec) (if (null? G405f@diff) G4060@id-vec (vector-map (lambda (G4063@x) (G2d22@make-stx (G2d24@stx-expr G4063@x) (append G405f@diff (G2d26@stx-mark* G4063@x)) '() '())) G4060@id-vec))) (G405e@diff-marks (G2d26@stx-mark* G405a@id) (G2fa4@module-interface-first-mark G4059@iface)) (G2fa6@module-interface-exp-id-vec G4059@iface)))) '#f))) (set! G2fb2@chi-internal-module (lambda (G406b@e G406c@r G406d@mr G406e@lex* G406f@rhs* G4070@mod** G4071@kwd*) (call-with-values (lambda () (G2f93@parse-module G406b@e)) (lambda (G407c@G4079 G407d@G407a G407e@G407b) ((lambda (G4082@e* G4083@exp-id* G4084@name) ((lambda (G4088@rib) ((lambda (G408a@e*) ((lambda () (call-with-values (lambda () (G2fb4@chi-body* G408a@e* G406c@r G406d@mr G406e@lex* G406f@rhs* G4070@mod** G4071@kwd* '() G4088@rib '#f)) (lambda (G4094@G408c G4095@G408d G4096@G408e G4097@G408f G4098@G4090 G4099@G4091 G409a@G4092 G409b@G4093) ((lambda (G40a4@_exp* G40a5@kwd* G40a6@mod** G40a7@rhs* G40a8@lex* G40a9@mr G40aa@r G40ab@e*) ((lambda (G40b4@exp-lab* G40b5@mod**) (if (not G4084@name) (values G40a8@lex* G40a7@rhs* G4083@exp-id* G40b4@exp-lab* G40aa@r G40a9@mr G40b5@mod** G40a5@kwd*) ((lambda (G40b8@lab G40b9@iface) (values G40a8@lex* G40a7@rhs* (vector G4084@name) (vector G40b8@lab) (cons (cons G40b8@lab (cons '$module G40b9@iface)) G40aa@r) (cons (cons G40b8@lab (cons '$module G40b9@iface)) G40a9@mr) G40b5@mod** G40a5@kwd*)) (G2cd8@gen-label 'module) (G2fa2@make-module-interface (car (G2d26@stx-mark* G4084@name)) (vector-map (lambda (G40bc@x) (G2d22@make-stx (G2d24@stx-expr G40bc@x) (G2d26@stx-mark* G40bc@x) '() '())) G4083@exp-id*) G40b4@exp-lab*)))) (vector-map (lambda (G40be@x) (or (G2d72@id->label (G2d22@make-stx (G2d5a@id->sym G40be@x) (G2d26@stx-mark* G40be@x) (list G4088@rib) '())) (G3042@syntax-violation '#f '"cannot find module export" G40be@x))) G4083@exp-id*) (cons G40ab@e* G40a6@mod**))) G409b@G4093 G409a@G4092 G4099@G4091 G4098@G4090 G4097@G408f G4096@G408e G4095@G408d G4094@G408c)))))) (map (lambda (G40c0@x) (G2d44@add-subst G4088@rib G40c0@x)) (G2d56@syntax->list G4082@e*)))) (G2d03@make-empty-rib))) G407e@G407b G407d@G407a G407c@G4079))))) (set! G2fb4@chi-body* (lambda (G40c2@e* G40c3@r G40c4@mr G40c5@lex* G40c6@rhs* G40c7@mod** G40c8@kwd* G40c9@exp* G40ca@rib G40cb@top?) (if (null? G40c2@e*) (values G40c2@e* G40c3@r G40c4@mr G40c5@lex* G40c6@rhs* G40c7@mod** G40c8@kwd* G40c9@exp*) ((lambda (G40d6@e) (call-with-values (lambda () (G2d80@syntax-type G40d6@e G40c3@r)) (lambda (G40db@G40d8 G40dc@G40d9 G40dd@G40da) ((lambda (G40e1@kwd G40e2@value G40e3@type) ((lambda (G40e7@kwd*) ((lambda (G40e9@t) (if (memv G40e9@t '(define)) (call-with-values (lambda () (G2edb@parse-define G40d6@e)) (lambda (G40ed@G40eb G40ee@G40ec) ((lambda (G40f1@rhs G40f2@id) (begin (if (G2d66@bound-id-member? G40f2@id G40e7@kwd*) (G3042@syntax-violation '#f '"cannot redefine keyword" G40d6@e) (void)) (call-with-values (lambda () (G2cdc@gen-define-label+loc G40f2@id G40ca@rib)) (lambda (G40f7@G40f5 G40f8@G40f6) ((lambda (G40fb@lex G40fc@lab) (begin (G2d09@extend-rib! G40ca@rib G40f2@id G40fc@lab) (G2fb4@chi-body* (cdr G40c2@e*) (G2ee9@add-lexical G40fc@lab G40fb@lex G40c3@r) G40c4@mr (cons G40fb@lex G40c5@lex*) (cons G40f1@rhs G40c6@rhs*) G40c7@mod** G40e7@kwd* G40c9@exp* G40ca@rib G40cb@top?))) G40f8@G40f6 G40f7@G40f5))))) G40ee@G40ec G40ed@G40eb))) (if (memv G40e9@t '(define-syntax)) (call-with-values (lambda () (G2edd@parse-define-syntax G40d6@e)) (lambda (G4101@G40ff G4102@G4100) ((lambda (G4105@rhs G4106@id) (begin (if (G2d66@bound-id-member? G4106@id G40e7@kwd*) (G3042@syntax-violation '#f '"cannot redefine keyword" G40d6@e) (void)) ((lambda (G4109@lab G410a@expanded-rhs) (begin (G2d09@extend-rib! G40ca@rib G4106@id G4109@lab) ((lambda (G410d@b) (G2fb4@chi-body* (cdr G40c2@e*) (cons (cons G4109@lab G410d@b) G40c3@r) (cons (cons G4109@lab G410d@b) G40c4@mr) G40c5@lex* G40c6@rhs* G40c7@mod** G40e7@kwd* G40c9@exp* G40ca@rib G40cb@top?)) (G2d98@make-eval-transformer G410a@expanded-rhs)))) (G2cde@gen-define-label G4106@id G40ca@rib) (G2fb6@expand-transformer G4105@rhs G40c4@mr)))) G4102@G4100 G4101@G40ff))) (if (memv G40e9@t '(let-syntax letrec-syntax)) ((lambda (G410f@t) ((lambda (G4111@ls/false) (if (and G4111@ls/false (apply (lambda (G4113@xlhs* G4114@xrhs* G4115@xbody*) (if (not (G2d62@valid-bound-ids? G4113@xlhs*)) (G3042@syntax-violation '#f '"invalid identifiers" G40d6@e) (void))) G4111@ls/false)) (apply (lambda (G4119@xlhs* G411a@xrhs* G411b@xbody*) ((lambda (G411f@xlab*) ((lambda (G4121@xrib) ((lambda (G4123@xb*) ((lambda () (G2fb4@chi-body* (append (map (lambda (G4125@x) (G2d44@add-subst G4121@xrib G4125@x)) G411b@xbody*) (cdr G40c2@e*)) (append (map cons G411f@xlab* G4123@xb*) G40c3@r) (append (map cons G411f@xlab* G4123@xb*) G40c4@mr) G40c5@lex* G40c6@rhs* G40c7@mod** G40e7@kwd* G40c9@exp* G40ca@rib G40cb@top?)))) (map (lambda (G4127@x) (G2d98@make-eval-transformer (G2fb6@expand-transformer (if (eq? G40e3@type 'let-syntax) G4127@x (G2d44@add-subst G4121@xrib G4127@x)) G40c4@mr))) G411a@xrhs*))) (G2d13@make-full-rib G4119@xlhs* G411f@xlab*))) (map G2cd8@gen-label G4119@xlhs*))) G4111@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G410f@t))) (G2f57@syntax-dispatch G410f@t '(_ #(each (any any)) . each-any)))) G40d6@e) (if (memv G40e9@t '(begin)) ((lambda (G4129@t) ((lambda (G412b@ls/false) (if G412b@ls/false (apply (lambda (G412d@x*) (G2fb4@chi-body* (append G412d@x* (cdr G40c2@e*)) G40c3@r G40c4@mr G40c5@lex* G40c6@rhs* G40c7@mod** G40e7@kwd* G40c9@exp* G40ca@rib G40cb@top?)) G412b@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G4129@t))) (G2f57@syntax-dispatch G4129@t '(_ . each-any)))) G40d6@e) (if (memv G40e9@t '(global-macro global-macro!)) (G2fb4@chi-body* (cons (G2d44@add-subst G40ca@rib (G2f75@chi-global-macro G40e2@value G40d6@e)) (cdr G40c2@e*)) G40c3@r G40c4@mr G40c5@lex* G40c6@rhs* G40c7@mod** G40e7@kwd* G40c9@exp* G40ca@rib G40cb@top?) (if (memv G40e9@t '(local-macro local-macro!)) (G2fb4@chi-body* (cons (G2d44@add-subst G40ca@rib (G2f73@chi-local-macro G40e2@value G40d6@e)) (cdr G40c2@e*)) G40c3@r G40c4@mr G40c5@lex* G40c6@rhs* G40c7@mod** G40e7@kwd* G40c9@exp* G40ca@rib G40cb@top?) (if (memv G40e9@t '(macro macro!)) (G2fb4@chi-body* (cons (G2d44@add-subst G40ca@rib (G2f71@chi-macro G40e2@value G40d6@e)) (cdr G40c2@e*)) G40c3@r G40c4@mr G40c5@lex* G40c6@rhs* G40c7@mod** G40e7@kwd* G40c9@exp* G40ca@rib G40cb@top?) (if (memv G40e9@t '(module)) (call-with-values (lambda () (G2fb2@chi-internal-module G40d6@e G40c3@r G40c4@mr G40c5@lex* G40c6@rhs* G40c7@mod** G40e7@kwd*)) (lambda (G4137@G412f G4138@G4130 G4139@G4131 G413a@G4132 G413b@G4133 G413c@G4134 G413d@G4135 G413e@G4136) ((lambda (G4147@kwd* G4148@mod** G4149@mr G414a@r G414b@m-exp-lab* G414c@m-exp-id* G414d@rhs* G414e@lex*) (begin (vector-for-each (lambda (G4157@id G4158@lab) (G2d09@extend-rib! G40ca@rib G4157@id G4158@lab)) G414c@m-exp-id* G414b@m-exp-lab*) (G2fb4@chi-body* (cdr G40c2@e*) G414a@r G4149@mr G414e@lex* G414d@rhs* G4148@mod** G4147@kwd* G40c9@exp* G40ca@rib G40cb@top?))) G413e@G4136 G413d@G4135 G413c@G4134 G413b@G4133 G413a@G4132 G4139@G4131 G4138@G4130 G4137@G412f))) (if (memv G40e9@t '(library)) (begin (G3024@library-expander (G2d6e@stx->datum G40d6@e)) (G2fb4@chi-body* (cdr G40c2@e*) G40c3@r G40c4@mr G40c5@lex* G40c6@rhs* G40c7@mod** G40e7@kwd* G40c9@exp* G40ca@rib G40cb@top?)) (if (memv G40e9@t '(export)) ((lambda (G415b@t) ((lambda (G415d@ls/false) (if G415d@ls/false (apply (lambda (G415f@exp-decl*) (G2fb4@chi-body* (cdr G40c2@e*) G40c3@r G40c4@mr G40c5@lex* G40c6@rhs* G40c7@mod** G40e7@kwd* (append G415f@exp-decl* G40c9@exp*) G40ca@rib G40cb@top?)) G415d@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G415b@t))) (G2f57@syntax-dispatch G415b@t '(_ . each-any)))) G40d6@e) (if (memv G40e9@t '(import)) ((lambda () ((lambda (G4162@module-import? G4164@module-import G4166@library-import) (begin (set! G4162@module-import? (lambda (G41ae@e) ((lambda (G41b0@t) ((lambda (G41b2@ls/false) (if (and G41b2@ls/false (apply (lambda (G41b4@id) (G2d58@id? G41b4@id)) G41b2@ls/false)) (apply (lambda (G41b6@id) '#t) G41b2@ls/false) ((lambda (G41b8@t) ((lambda (G41ba@ls/false) (if G41ba@ls/false (apply (lambda (G41bc@imp*) '#f) G41ba@ls/false) ((lambda (G41be@t) ((lambda (G41c0@ls/false) (if G41c0@ls/false (apply (lambda () (G3042@syntax-violation '#f '"malformed import form" G41ae@e)) G41c0@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G41be@t))) (G2f57@syntax-dispatch G41be@t '_))) G41b8@t))) (G2f57@syntax-dispatch G41b8@t '(_ . each-any)))) G41b0@t))) (G2f57@syntax-dispatch G41b0@t '(_ any)))) G41ae@e))) (set! G4164@module-import (lambda (G418f@e G4190@r) ((lambda (G4193@t) ((lambda (G4195@ls/false) (if (and G4195@ls/false (apply (lambda (G4197@id) (G2d58@id? G4197@id)) G4195@ls/false)) (apply (lambda (G4199@id) (call-with-values (lambda () (G2d80@syntax-type G4199@id G4190@r)) (lambda (G419e@G419b G419f@G419c G41a0@G419d) ((lambda (G41a4@kwd G41a5@value G41a6@type) ((lambda (G41aa@t) (if (memv G41aa@t '($module)) ((lambda (G41ac@iface) (values (G2fb0@module-interface-exp-id* G41ac@iface G4199@id) (G2fa8@module-interface-exp-lab-vec G41ac@iface))) G41a5@value) (G3042@syntax-violation '#f '"invalid import" G418f@e))) G41a6@type)) G41a0@G419d G419f@G419c G419e@G419b)))) G4195@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G4193@t))) (G2f57@syntax-dispatch G4193@t '(_ any)))) G418f@e))) (set! G4166@library-import (lambda (G4175@e) ((lambda (G4177@t) ((lambda (G4179@ls/false) (if G4179@ls/false (apply (lambda (G417b@ctxt G417c@imp*) (call-with-values (lambda () (G2fbe@parse-import-spec* (G3048@syntax->datum G417c@imp*))) (lambda (G4181@G417f G4182@G4180) ((lambda (G4185@subst-labels G4186@subst-names) (values (vector-map (lambda (G4189@name) (G2d36@datum->stx G417b@ctxt G4189@name)) G4186@subst-names) G4185@subst-labels)) G4182@G4180 G4181@G417f)))) G4179@ls/false) ((lambda (G418b@t) ((lambda (G418d@ls/false) (if G418d@ls/false (apply (lambda () (G3042@syntax-violation '#f '"invalid import form" G4175@e)) G418d@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G418b@t))) (G2f57@syntax-dispatch G418b@t '_))) G4177@t))) (G2f57@syntax-dispatch G4177@t '(any . each-any)))) G4175@e))) (begin (call-with-values (lambda () (if (G4162@module-import? G40d6@e) (G4164@module-import G40d6@e G40c3@r) (G4166@library-import G40d6@e))) (lambda (G4169@G4167 G416a@G4168) ((lambda (G416d@lab* G416e@id*) (vector-for-each (lambda (G4171@id G4172@lab) (G2d09@extend-rib! G40ca@rib G4171@id G4172@lab)) G416e@id* G416d@lab*)) G416a@G4168 G4169@G4167))) (G2fb4@chi-body* (cdr G40c2@e*) G40c3@r G40c4@mr G40c5@lex* G40c6@rhs* G40c7@mod** G40e7@kwd* G40c9@exp* G40ca@rib G40cb@top?)))) '#f '#f '#f))) (if G40cb@top? (G2fb4@chi-body* (cdr G40c2@e*) G40c3@r G40c4@mr (cons (G2cd4@gen-lexical 'dummy) G40c5@lex*) (cons (cons 'top-expr G40d6@e) G40c6@rhs*) G40c7@mod** G40e7@kwd* G40c9@exp* G40ca@rib G40cb@top?) (values G40c2@e* G40c3@r G40c4@mr G40c5@lex* G40c6@rhs* G40c7@mod** G40e7@kwd* G40c9@exp*)))))))))))))) G40e3@type)) (if (G2d58@id? G40e1@kwd) (cons G40e1@kwd G40c8@kwd*) G40c8@kwd*))) G40dd@G40da G40dc@G40d9 G40db@G40d8)))) (car G40c2@e*))))) (set! G2fb6@expand-transformer (lambda (G41c2@expr G41c3@r) ((lambda (G41c6@rtc) ((lambda (G41c8@expanded-rhs) (begin (for-each ((lambda (G41ca@mark-visit) (lambda (G41cc@x) (begin (G2b6f@G2a16@invoke-library G41cc@x) (G41ca@mark-visit G41cc@x)))) (G2fc6@vis-collector)) (G41c6@rtc)) G41c8@expanded-rhs)) ((lambda (G41d2@G41ce G41d3@G41cf G41d4@G41d0 G41d5@G41d1) ((lambda (G41da@swap) (dynamic-wind G41da@swap (lambda () (G2f7b@chi-expr G41c2@expr G41c3@r G41c3@r)) G41da@swap)) (lambda () (begin ((lambda (G41dc@t) (begin (G41d2@G41ce G41d4@G41d0) (set! G41d4@G41d0 G41dc@t))) (G41d2@G41ce)) ((lambda (G41de@t) (begin (G41d3@G41cf G41d5@G41d1) (set! G41d5@G41d1 G41de@t))) (G41d3@G41cf)))))) G2fc4@inv-collector G2fc6@vis-collector G41c6@rtc (lambda (G41e0@x) (values))))) (G2fc2@make-collector)))) (set! G2fb8@parse-exports (lambda (G41e2@exp*) ((letrec ((G41e4@f (lambda (G41e6@exp* G41e7@int* G41e8@ext*) (if (null? G41e6@exp*) (begin (if (not (G2d62@valid-bound-ids? G41e8@ext*)) (G3042@syntax-violation 'export '"invalid exports" (G2f8f@find-dups G41e8@ext*)) (void)) (values (map G3048@syntax->datum G41e8@ext*) G41e7@int*)) ((lambda (G41ec@t) ((lambda (G41ee@ls/false) (if G41ee@ls/false (apply (lambda (G41f0@rename G41f1@i* G41f2@e*) (begin (if (not (and (eq? (G3048@syntax->datum G41f0@rename) 'rename) (for-all G2d58@id? G41f1@i*) (for-all G2d58@id? G41f2@e*))) (G3042@syntax-violation 'export '"invalid export specifier" (car G41e6@exp*)) (void)) (G41e4@f (cdr G41e6@exp*) (append G41f1@i* G41e7@int*) (append G41f2@e* G41e8@ext*)))) G41ee@ls/false) ((lambda (G41f6@t) ((lambda (G41f8@ls/false) (if G41f8@ls/false (apply (lambda (G41fa@ie) (begin (if (not (G2d58@id? G41fa@ie)) (G3042@syntax-violation 'export '"invalid export" G41fa@ie) (void)) (G41e4@f (cdr G41e6@exp*) (cons G41fa@ie G41e7@int*) (cons G41fa@ie G41e8@ext*)))) G41f8@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G41f6@t))) (G2f57@syntax-dispatch G41f6@t 'any))) G41ec@t))) (G2f57@syntax-dispatch G41ec@t '(any . #(each (any any)))))) (car G41e6@exp*)))))) G41e4@f) G41e2@exp* '() '()))) (set! G2fba@parse-library-name (lambda (G41fc@spec) ((lambda (G41ff@parse) (begin (set! G41ff@parse (lambda (G420a@x) ((lambda (G420c@t) ((lambda (G420e@ls/false) (if (and G420e@ls/false (apply (lambda (G4210@v*) (for-all (lambda (G4212@x) ((lambda (G4214@x) (and (integer? G4214@x) (exact? G4214@x))) (G3048@syntax->datum G4212@x))) G4210@v*)) G420e@ls/false)) (apply (lambda (G4216@v*) (values '() (map G3048@syntax->datum G4216@v*))) G420e@ls/false) ((lambda (G4218@t) ((lambda (G421a@ls/false) (if (and G421a@ls/false (apply (lambda (G421c@x G421d@rest) (symbol? (G3048@syntax->datum G421c@x))) G421a@ls/false)) (apply (lambda (G4220@x G4221@rest) (call-with-values (lambda () (G41ff@parse G4221@rest)) (lambda (G4226@G4224 G4227@G4225) ((lambda (G422a@v* G422b@x*) (values (cons (G3048@syntax->datum G4220@x) G422b@x*) G422a@v*)) G4227@G4225 G4226@G4224)))) G421a@ls/false) ((lambda (G422e@t) ((lambda (G4230@ls/false) (if G4230@ls/false (apply (lambda () (values '() '())) G4230@ls/false) ((lambda (G4232@t) ((lambda (G4234@ls/false) (if G4234@ls/false (apply (lambda () (G3042@syntax-violation '#f '"invalid library name" G41fc@spec)) G4234@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G4232@t))) (G2f57@syntax-dispatch G4232@t '_))) G422e@t))) (G2f57@syntax-dispatch G422e@t '()))) G4218@t))) (G2f57@syntax-dispatch G4218@t '(any . any)))) G420c@t))) (G2f57@syntax-dispatch G420c@t '(each-any)))) G420a@x))) (call-with-values (lambda () (G41ff@parse G41fc@spec)) (lambda (G4202@G4200 G4203@G4201) ((lambda (G4206@ver* G4207@name*) (begin (if (null? G4207@name*) (G3042@syntax-violation '#f '"empty library name" G41fc@spec) (void)) (values G4207@name* G4206@ver*))) G4203@G4201 G4202@G4200))))) '#f))) (set! G2fbc@parse-library (lambda (G4236@e) ((lambda (G4238@t) ((lambda (G423a@ls/false) (if (and G423a@ls/false (apply (lambda (G423c@library G423d@name* G423e@export G423f@exp* G4240@import G4241@imp* G4242@b*) (and (eq? (G3048@syntax->datum G423e@export) 'export) (eq? (G3048@syntax->datum G4240@import) 'import) (eq? (G3048@syntax->datum G423c@library) 'library))) G423a@ls/false)) (apply (lambda (G424a@library G424b@name* G424c@export G424d@exp* G424e@import G424f@imp* G4250@b*) (values G424b@name* G424d@exp* G424f@imp* G4250@b*)) G423a@ls/false) ((lambda (G4258@t) ((lambda (G425a@ls/false) (if G425a@ls/false (apply (lambda () (G3042@syntax-violation '#f '"malformed library" G4236@e)) G425a@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G4258@t))) (G2f57@syntax-dispatch G4258@t '_))) G4238@t))) (G2f57@syntax-dispatch G4238@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4236@e))) (set! G2fbe@parse-import-spec* ((lambda () ((lambda (G425d@idsyn? G425f@dup-error G4261@merge-substs G4263@exclude* G4265@find* G4267@rem* G4269@remove-dups G426b@parse-library-name G426d@import-library G426f@get-import G4271@add-imports!) (begin (set! G425d@idsyn? (lambda (G445c@x) (symbol? (G3048@syntax->datum G445c@x)))) (set! G425f@dup-error (lambda (G445a@name) (G3042@syntax-violation 'import '"two imports with different bindings" G445a@name))) (set! G4261@merge-substs (lambda (G4448@s G4449@subst) ((lambda (G444d@insert-to-subst) (begin (set! G444d@insert-to-subst (lambda (G444e@a G444f@subst) ((lambda (G4452@name G4453@label) ((lambda (G4456@t) (if G4456@t ((lambda (G4458@x) (if (eq? (cdr G4458@x) G4453@label) G444f@subst (G425f@dup-error G4452@name))) G4456@t) (cons G444e@a G444f@subst))) (assq G4452@name G444f@subst))) (car G444e@a) (cdr G444e@a)))) (if (null? G4448@s) G4449@subst (G444d@insert-to-subst (car G4448@s) (G4261@merge-substs (cdr G4448@s) G4449@subst))))) '#f))) (set! G4263@exclude* (lambda (G441e@sym* G441f@subst) ((lambda (G4423@exclude) (begin (set! G4423@exclude (lambda (G4438@sym G4439@subst) (if (null? G4439@subst) (G3042@syntax-violation 'import '"cannot rename unbound identifier" G4438@sym) (if (eq? G4438@sym (caar G4439@subst)) (values (cdar G4439@subst) (cdr G4439@subst)) ((lambda (G443c@a) (call-with-values (lambda () (G4423@exclude G4438@sym (cdr G4439@subst))) (lambda (G4440@G443e G4441@G443f) ((lambda (G4444@subst G4445@old) (values G4445@old (cons G443c@a G4444@subst))) G4441@G443f G4440@G443e)))) (car G4439@subst)))))) (if (null? G441e@sym*) (values '() G441f@subst) (call-with-values (lambda () (G4423@exclude (car G441e@sym*) G441f@subst)) (lambda (G4426@G4424 G4427@G4425) ((lambda (G442a@subst G442b@old) (call-with-values (lambda () (G4263@exclude* (cdr G441e@sym*) G442a@subst)) (lambda (G4430@G442e G4431@G442f) ((lambda (G4434@subst G4435@old*) (values (cons G442b@old G4435@old*) G4434@subst)) G4431@G442f G4430@G442e)))) G4427@G4425 G4426@G4424)))))) '#f))) (set! G4265@find* (lambda (G4416@sym* G4417@subst) (map (lambda (G441a@x) ((lambda (G441c@t) (if G441c@t (cdr G441c@t) (G3042@syntax-violation 'import '"cannot find identifier" G441a@x))) (assq G441a@x G4417@subst))) G4416@sym*))) (set! G4267@rem* (lambda (G440e@sym* G440f@subst) ((letrec ((G4412@f (lambda (G4414@subst) (if (null? G4414@subst) '() (if (memq (caar G4414@subst) G440e@sym*) (G4412@f (cdr G4414@subst)) (cons (car G4414@subst) (G4412@f (cdr G4414@subst)))))))) G4412@f) G440f@subst))) (set! G4269@remove-dups (lambda (G440c@ls) (if (null? G440c@ls) '() (if (memq (car G440c@ls) (cdr G440c@ls)) (G4269@remove-dups (cdr G440c@ls)) (cons (car G440c@ls) (G4269@remove-dups (cdr G440c@ls))))))) (set! G426b@parse-library-name (lambda (G4326@spec) ((lambda (G4329@subversion? G432b@subversion-pred G432d@version-pred) (begin (set! G4329@subversion? (lambda (G4408@x) ((lambda (G440a@x) (and (integer? G440a@x) (exact? G440a@x) (>= G440a@x '0))) (G3048@syntax->datum G4408@x)))) (set! G432b@subversion-pred (lambda (G43a8@x*) ((lambda (G43aa@t) ((lambda (G43ac@ls/false) (if (and G43ac@ls/false (apply (lambda (G43ae@n) (G4329@subversion? G43ae@n)) G43ac@ls/false)) (apply (lambda (G43b0@n) (lambda (G43b2@x) (= G43b2@x (G3048@syntax->datum G43b0@n)))) G43ac@ls/false) ((lambda (G43b4@t) ((lambda (G43b6@ls/false) (if (and G43b6@ls/false (apply (lambda (G43b8@p? G43b9@sub*) (eq? (G3048@syntax->datum G43b8@p?) 'and)) G43b6@ls/false)) (apply (lambda (G43bc@p? G43bd@sub*) ((lambda (G43c0@p*) (lambda (G43c2@x) (for-all (lambda (G43c4@p) (G43c4@p G43c2@x)) G43c0@p*))) (map G432b@subversion-pred G43bd@sub*))) G43b6@ls/false) ((lambda (G43c6@t) ((lambda (G43c8@ls/false) (if (and G43c8@ls/false (apply (lambda (G43ca@p? G43cb@sub*) (eq? (G3048@syntax->datum G43ca@p?) 'or)) G43c8@ls/false)) (apply (lambda (G43ce@p? G43cf@sub*) ((lambda (G43d2@p*) (lambda (G43d4@x) (exists (lambda (G43d6@p) (G43d6@p G43d4@x)) G43d2@p*))) (map G432b@subversion-pred G43cf@sub*))) G43c8@ls/false) ((lambda (G43d8@t) ((lambda (G43da@ls/false) (if (and G43da@ls/false (apply (lambda (G43dc@p? G43dd@sub) (eq? (G3048@syntax->datum G43dc@p?) 'not)) G43da@ls/false)) (apply (lambda (G43e0@p? G43e1@sub) ((lambda (G43e4@p) (lambda (G43e6@x) (not (G43e4@p G43e6@x)))) (G432b@subversion-pred G43e1@sub))) G43da@ls/false) ((lambda (G43e8@t) ((lambda (G43ea@ls/false) (if (and G43ea@ls/false (apply (lambda (G43ec@p? G43ed@n) (and (eq? (G3048@syntax->datum G43ec@p?) '<=) (G4329@subversion? G43ed@n))) G43ea@ls/false)) (apply (lambda (G43f0@p? G43f1@n) (lambda (G43f4@x) (<= G43f4@x (G3048@syntax->datum G43f1@n)))) G43ea@ls/false) ((lambda (G43f6@t) ((lambda (G43f8@ls/false) (if (and G43f8@ls/false (apply (lambda (G43fa@p? G43fb@n) (and (eq? (G3048@syntax->datum G43fa@p?) '>=) (G4329@subversion? G43fb@n))) G43f8@ls/false)) (apply (lambda (G43fe@p? G43ff@n) (lambda (G4402@x) (>= G4402@x (G3048@syntax->datum G43ff@n)))) G43f8@ls/false) ((lambda (G4404@t) ((lambda (G4406@ls/false) (if G4406@ls/false (apply (lambda () (G3042@syntax-violation 'import '"invalid sub-version spec" G4326@spec G43a8@x*)) G4406@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G4404@t))) (G2f57@syntax-dispatch G4404@t '_))) G43f6@t))) (G2f57@syntax-dispatch G43f6@t '(any any)))) G43e8@t))) (G2f57@syntax-dispatch G43e8@t '(any any)))) G43d8@t))) (G2f57@syntax-dispatch G43d8@t '(any any)))) G43c6@t))) (G2f57@syntax-dispatch G43c6@t '(any . each-any)))) G43b4@t))) (G2f57@syntax-dispatch G43b4@t '(any . each-any)))) G43aa@t))) (G2f57@syntax-dispatch G43aa@t 'any))) G43a8@x*))) (set! G432d@version-pred (lambda (G4358@x*) ((lambda (G435a@t) ((lambda (G435c@ls/false) (if G435c@ls/false (apply (lambda () (lambda (G435e@x) '#t)) G435c@ls/false) ((lambda (G4360@t) ((lambda (G4362@ls/false) (if (and G4362@ls/false (apply (lambda (G4364@c G4365@ver*) (eq? (G3048@syntax->datum G4364@c) 'and)) G4362@ls/false)) (apply (lambda (G4368@c G4369@ver*) ((lambda (G436c@p*) (lambda (G436e@x) (for-all (lambda (G4370@p) (G4370@p G436e@x)) G436c@p*))) (map G432d@version-pred G4369@ver*))) G4362@ls/false) ((lambda (G4372@t) ((lambda (G4374@ls/false) (if (and G4374@ls/false (apply (lambda (G4376@c G4377@ver*) (eq? (G3048@syntax->datum G4376@c) 'or)) G4374@ls/false)) (apply (lambda (G437a@c G437b@ver*) ((lambda (G437e@p*) (lambda (G4380@x) (exists (lambda (G4382@p) (G4382@p G4380@x)) G437e@p*))) (map G432d@version-pred G437b@ver*))) G4374@ls/false) ((lambda (G4384@t) ((lambda (G4386@ls/false) (if (and G4386@ls/false (apply (lambda (G4388@c G4389@ver) (eq? (G3048@syntax->datum G4388@c) 'not)) G4386@ls/false)) (apply (lambda (G438c@c G438d@ver) ((lambda (G4390@p) (lambda (G4392@x) (not (G4390@p G4392@x)))) (G432d@version-pred G438d@ver))) G4386@ls/false) ((lambda (G4394@t) ((lambda (G4396@ls/false) (if G4396@ls/false (apply (lambda (G4398@sub*) ((lambda (G439a@p*) (lambda (G439c@x) ((letrec ((G439e@f (lambda (G43a0@p* G43a1@x) (if (null? G43a0@p*) '#t (if (null? G43a1@x) '#f (and ((car G43a0@p*) (car G43a1@x)) (G439e@f (cdr G43a0@p*) (cdr G43a1@x)))))))) G439e@f) G439a@p* G439c@x))) (map G432b@subversion-pred G4398@sub*))) G4396@ls/false) ((lambda (G43a4@t) ((lambda (G43a6@ls/false) (if G43a6@ls/false (apply (lambda () (G3042@syntax-violation 'import '"invalid version spec" G4326@spec G4358@x*)) G43a6@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G43a4@t))) (G2f57@syntax-dispatch G43a4@t '_))) G4394@t))) (G2f57@syntax-dispatch G4394@t 'each-any))) G4384@t))) (G2f57@syntax-dispatch G4384@t '(any any)))) G4372@t))) (G2f57@syntax-dispatch G4372@t '(any . each-any)))) G4360@t))) (G2f57@syntax-dispatch G4360@t '(any . each-any)))) G435a@t))) (G2f57@syntax-dispatch G435a@t '()))) G4358@x*))) ((letrec ((G432e@f (lambda (G4330@x) ((lambda (G4332@t) ((lambda (G4334@ls/false) (if G4334@ls/false (apply (lambda (G4336@version-spec*) (values '() (G432d@version-pred G4336@version-spec*))) G4334@ls/false) ((lambda (G4338@t) ((lambda (G433a@ls/false) (if (and G433a@ls/false (apply (lambda (G433c@x G433d@x*) (G425d@idsyn? G433c@x)) G433a@ls/false)) (apply (lambda (G4340@x G4341@x*) (call-with-values (lambda () (G432e@f G4341@x*)) (lambda (G4346@G4344 G4347@G4345) ((lambda (G434a@pred G434b@name) (values (cons (G3048@syntax->datum G4340@x) G434b@name) G434a@pred)) G4347@G4345 G4346@G4344)))) G433a@ls/false) ((lambda (G434e@t) ((lambda (G4350@ls/false) (if G4350@ls/false (apply (lambda () (values '() (lambda (G4352@x) '#t))) G4350@ls/false) ((lambda (G4354@t) ((lambda (G4356@ls/false) (if G4356@ls/false (apply (lambda () (G3042@syntax-violation '#f '"invalid import spec" G4326@spec)) G4356@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G4354@t))) (G2f57@syntax-dispatch G4354@t '_))) G434e@t))) (G2f57@syntax-dispatch G434e@t '()))) G4338@t))) (G2f57@syntax-dispatch G4338@t '(any . any)))) G4332@t))) (G2f57@syntax-dispatch G4332@t '(each-any)))) G4330@x)))) G432e@f) G4326@spec))) '#f '#f '#f))) (set! G426d@import-library (lambda (G4318@spec*) (call-with-values (lambda () (G426b@parse-library-name G4318@spec*)) (lambda (G431c@G431a G431d@G431b) ((lambda (G4320@pred G4321@name) (begin (if (null? G4321@name) (G3042@syntax-violation 'import '"empty library name" G4318@spec*) (void)) ((lambda (G4324@lib) (begin (if (not G4324@lib) (G3042@syntax-violation 'import '"cannot find library with required name" G4321@name) (void)) (if (not (G4320@pred (G2b40@G29b8@library-version G4324@lib))) (G3042@syntax-violation 'import '"library does not satisfy version specification" G4318@spec* G4324@lib) (void)) ((G2fc8@imp-collector) G4324@lib) (G2b44@G29c0@library-subst G4324@lib))) (G2b68@G2a08@find-library-by-name G4321@name)))) G431d@G431b G431c@G431a))))) (set! G426f@get-import (lambda (G428a@spec) ((lambda (G428c@t) ((lambda (G428e@ls/false) (if (and G428e@ls/false (apply (lambda (G4290@x G4291@x*) (not (memq (G3048@syntax->datum G4290@x) '(for rename except only prefix library)))) G428e@ls/false)) (apply (lambda (G4294@x G4295@x*) (G426d@import-library (cons G4294@x G4295@x*))) G428e@ls/false) ((lambda (G4298@t) ((lambda (G429a@ls/false) (if (and G429a@ls/false (apply (lambda (G429c@rename G429d@isp G429e@old* G429f@new*) (and (eq? (G3048@syntax->datum G429c@rename) 'rename) (for-all G425d@idsyn? G429e@old*) (for-all G425d@idsyn? G429f@new*))) G429a@ls/false)) (apply (lambda (G42a4@rename G42a5@isp G42a6@old* G42a7@new*) ((lambda (G42ac@subst G42ad@old* G42ae@new*) ((lambda (G42b2@old-label*) ((lambda (G42b4@subst) (G4261@merge-substs (map cons G42ae@new* G42b2@old-label*) G42b4@subst)) (G4267@rem* G42ad@old* G42ac@subst))) (G4265@find* G42ad@old* G42ac@subst))) (G426f@get-import G42a5@isp) (map G3048@syntax->datum G42a6@old*) (map G3048@syntax->datum G42a7@new*))) G429a@ls/false) ((lambda (G42b6@t) ((lambda (G42b8@ls/false) (if (and G42b8@ls/false (apply (lambda (G42ba@except G42bb@isp G42bc@sym*) (and (eq? (G3048@syntax->datum G42ba@except) 'except) (for-all G425d@idsyn? G42bc@sym*))) G42b8@ls/false)) (apply (lambda (G42c0@except G42c1@isp G42c2@sym*) ((lambda (G42c6@subst) (G4267@rem* (map G3048@syntax->datum G42c2@sym*) G42c6@subst)) (G426f@get-import G42c1@isp))) G42b8@ls/false) ((lambda (G42c8@t) ((lambda (G42ca@ls/false) (if (and G42ca@ls/false (apply (lambda (G42cc@only G42cd@isp G42ce@sym*) (and (eq? (G3048@syntax->datum G42cc@only) 'only) (for-all G425d@idsyn? G42ce@sym*))) G42ca@ls/false)) (apply (lambda (G42d2@only G42d3@isp G42d4@sym*) ((lambda (G42d8@subst G42d9@sym*) ((lambda (G42dc@sym*) ((lambda (G42de@lab*) (map cons G42dc@sym* G42de@lab*)) (G4265@find* G42dc@sym* G42d8@subst))) (G4269@remove-dups G42d9@sym*))) (G426f@get-import G42d3@isp) (map G3048@syntax->datum G42d4@sym*))) G42ca@ls/false) ((lambda (G42e0@t) ((lambda (G42e2@ls/false) (if (and G42e2@ls/false (apply (lambda (G42e4@prefix G42e5@isp G42e6@p) (and (eq? (G3048@syntax->datum G42e4@prefix) 'prefix) (G425d@idsyn? G42e6@p))) G42e2@ls/false)) (apply (lambda (G42ea@prefix G42eb@isp G42ec@p) ((lambda (G42f0@subst G42f1@prefix) (map (lambda (G42f4@x) (cons (string->symbol (string-append G42f1@prefix (symbol->string (car G42f4@x)))) (cdr G42f4@x))) G42f0@subst)) (G426f@get-import G42eb@isp) (symbol->string (G3048@syntax->datum G42ec@p)))) G42e2@ls/false) ((lambda (G42f6@t) ((lambda (G42f8@ls/false) (if (and G42f8@ls/false (apply (lambda (G42fa@library G42fb@spec*) (eq? (G3048@syntax->datum G42fa@library) 'library)) G42f8@ls/false)) (apply (lambda (G42fe@library G42ff@spec*) (G426d@import-library G42ff@spec*)) G42f8@ls/false) ((lambda (G4302@t) ((lambda (G4304@ls/false) (if (and G4304@ls/false (apply (lambda (G4306@for G4307@isp G4308@rest) (eq? (G3048@syntax->datum G4306@for) 'for)) G4304@ls/false)) (apply (lambda (G430c@for G430d@isp G430e@rest) (G426f@get-import G430d@isp)) G4304@ls/false) ((lambda (G4312@t) ((lambda (G4314@ls/false) (if G4314@ls/false (apply (lambda (G4316@spec) (G3042@syntax-violation 'import '"invalid import spec" G4316@spec)) G4314@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G4312@t))) (G2f57@syntax-dispatch G4312@t 'any))) G4302@t))) (G2f57@syntax-dispatch G4302@t '(any any . any)))) G42f6@t))) (G2f57@syntax-dispatch G42f6@t '(any each-any)))) G42e0@t))) (G2f57@syntax-dispatch G42e0@t '(any any any)))) G42c8@t))) (G2f57@syntax-dispatch G42c8@t '(any any . each-any)))) G42b6@t))) (G2f57@syntax-dispatch G42b6@t '(any any . each-any)))) G4298@t))) (G2f57@syntax-dispatch G4298@t '(any any . #(each (any any)))))) G428c@t))) (G2f57@syntax-dispatch G428c@t '(any . each-any)))) G428a@spec))) (set! G4271@add-imports! (lambda (G427a@imp G427b@h) ((lambda (G427e@subst) (for-each (lambda (G4280@x) ((lambda (G4282@name G4283@label) ((lambda (G4286@t) (if G4286@t ((lambda (G4288@l) (if (not (eq? G4288@l G4283@label)) (G425f@dup-error G4282@name) (void))) G4286@t) (hashtable-set! G427b@h G4282@name G4283@label))) (hashtable-ref G427b@h G4282@name '#f))) (car G4280@x) (cdr G4280@x))) G427e@subst)) (G426f@get-import G427a@imp)))) (lambda (G4272@imp*) ((letrec ((G4274@f (lambda (G4276@imp* G4277@h) (if (null? G4276@imp*) (hashtable-entries G4277@h) (begin (G4271@add-imports! (car G4276@imp*) G4277@h) (G4274@f (cdr G4276@imp*) G4277@h)))))) G4274@f) G4272@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fc0@make-top-rib (lambda (G445e@names G445f@labels) ((lambda (G4462@rib) (begin (vector-for-each (lambda (G4464@name G4465@label) (begin (if (not (symbol? G4464@name)) (error 'make-top-rib '"BUG: not a symbol" G4464@name) (void)) (G2d0b@extend-rib/nc! G4462@rib (G2d22@make-stx G4464@name G2cd0@top-mark* '() '()) G4465@label))) G445e@names G445f@labels) G4462@rib)) (G2d05@make-cache-rib)))) (set! G2fc2@make-collector (lambda () ((lambda (G4468@ls) (lambda G446c ((lambda (G446d) (if (= G446d '0) (apply (lambda () G4468@ls) G446c) (if (= G446d '1) (apply (lambda (G446a@x) (set! G4468@ls (G2cc9@set-cons G446a@x G4468@ls))) G446c) (error 'apply '"invalid arg count")))) (length G446c)))) '()))) (set! G2fc4@inv-collector (G28f4@G282a@make-parameter (lambda G446e@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4470@x) (begin (if (not (procedure? G4470@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4470@x) (void)) G4470@x)))) (set! G2fc6@vis-collector (G28f4@G282a@make-parameter (lambda G4472@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G4474@x) (begin (if (not (procedure? G4474@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G4474@x) (void)) G4474@x)))) (set! G2fc8@imp-collector (G28f4@G282a@make-parameter (lambda G4476@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4478@x) (begin (if (not (procedure? G4478@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4478@x) (void)) G4478@x)))) (set! G2fca@chi-library-internal (lambda (G447a@e* G447b@rib G447c@top?) (call-with-values (lambda () (G2fb4@chi-body* G447a@e* '() '() '() '() '() '() '() G447b@rib G447c@top?)) (lambda (G4488@G4480 G4489@G4481 G448a@G4482 G448b@G4483 G448c@G4484 G448d@G4485 G448e@G4486 G448f@G4487) ((lambda (G4498@exp* G4499@_kwd* G449a@mod** G449b@rhs* G449c@lex* G449d@mr G449e@r G449f@e*) (values (append (apply append (reverse G449a@mod**)) G449f@e*) G449e@r G449d@mr (reverse G449c@lex*) (reverse G449b@rhs*) G4498@exp*)) G448f@G4487 G448e@G4486 G448d@G4485 G448c@G4484 G448b@G4483 G448a@G4482 G4489@G4481 G4488@G4480))))) (set! G2fcc@chi-interaction-expr (lambda (G44a8@e G44a9@rib G44aa@r) (call-with-values (lambda () (G2fb4@chi-body* (list G44a8@e) G44aa@r G44aa@r '() '() '() '() '() G44a9@rib '#t)) (lambda (G44b6@G44ae G44b7@G44af G44b8@G44b0 G44b9@G44b1 G44ba@G44b2 G44bb@G44b3 G44bc@G44b4 G44bd@G44b5) ((lambda (G44c6@_exp* G44c7@_kwd* G44c8@mod** G44c9@rhs* G44ca@lex* G44cb@mr G44cc@r G44cd@e*) ((lambda (G44d6@e*) ((lambda (G44d8@e) (values G44d8@e G44cc@r)) (if (null? G44d6@e*) (G2cb6@G2c28@build-void) (if (null? (cdr G44d6@e*)) (car G44d6@e*) (G2cb5@G2c26@build-sequence '#f G44d6@e*))))) (G2f89@expand-interaction-rhs*/init* (reverse G44ca@lex*) (reverse G44c9@rhs*) (append (apply append (reverse G44c8@mod**)) G44cd@e*) G44cc@r G44cb@mr))) G44bd@G44b5 G44bc@G44b4 G44bb@G44b3 G44ba@G44b2 G44b9@G44b1 G44b8@G44b0 G44b7@G44af G44b6@G44ae))))) (set! G2fce@library-body-expander (lambda (G44da@name G44db@main-exp* G44dc@imp* G44dd@b* G44de@top?) ((lambda (G44e5@itc) (begin (set! G44e5@itc (G2fc2@make-collector)) ((lambda (G44ea@G44e6 G44eb@G44e7 G44ec@G44e8 G44ed@G44e9) ((lambda (G44f2@swap) (dynamic-wind G44f2@swap (lambda () (call-with-values (lambda () (G2fbe@parse-import-spec* G44dc@imp*)) (lambda (G44f6@G44f4 G44f7@G44f5) ((lambda (G44fa@subst-labels G44fb@subst-names) ((lambda (G44fe@rib) ((lambda (G4501@wrap) (begin (set! G4501@wrap (lambda (G456d@x) (G2d22@make-stx G456d@x G2cd0@top-mark* (list G44fe@rib) '()))) ((lambda (G4502@b* G4503@main-exp* G4504@rtc G4505@vtc) ((lambda (G450e@G450a G450f@G450b G4510@G450c G4511@G450d) ((lambda (G4516@swap) (dynamic-wind G4516@swap (lambda () (call-with-values (lambda () (G2fca@chi-library-internal G4502@b* G44fe@rib G44de@top?)) (lambda (G451e@G4518 G451f@G4519 G4520@G451a G4521@G451b G4522@G451c G4523@G451d) ((lambda (G452a@internal-exp* G452b@rhs* G452c@lex* G452d@mr G452e@r G452f@init*) (call-with-values (lambda () (G2fb8@parse-exports (append G4503@main-exp* G452a@internal-exp*))) (lambda (G4538@G4536 G4539@G4537) ((lambda (G453c@exp-id* G453d@exp-name*) (begin (G2d0f@seal-rib! G44fe@rib) ((lambda (G4540@init*) ((lambda (G4542@rhs*) ((lambda () (begin (G2d11@unseal-rib! G44fe@rib) ((lambda (G4544@loc* G4545@export-subst) ((lambda (G4549@errstr) (begin (set! G4549@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G302e@make-export-env/macros G452c@lex* G4544@loc* G452e@r)) (lambda (G454d@G454a G454e@G454b G454f@G454c) ((lambda (G4553@macro* G4554@global* G4555@export-env) (begin (for-each (lambda (G4559@s) ((lambda (G455b@name G455c@label) ((lambda (G455f@p) (if G455f@p ((lambda (G4561@b) ((lambda (G4563@type) (if (eq? G4563@type 'mutable) (G3042@syntax-violation 'export G4549@errstr G455b@name) (void))) (car G4561@b))) (cdr G455f@p)) (void))) (assq G455c@label G4555@export-env))) (car G4559@s) (cdr G4559@s))) G4545@export-subst) ((lambda (G4565@invoke-body G4566@invoke-definitions) (values (G44e5@itc) (G4504@rtc) (G4505@vtc) (G2cb5@G2c26@build-sequence '#f (append G4566@invoke-definitions (list G4565@invoke-body))) G4553@macro* G4545@export-subst G4555@export-env)) (G2cb8@G2c2c@build-letrec* '#f G452c@lex* G4542@rhs* (G302a@build-exports G4554@global* G4540@init*)) (map G2cb1@G2b76@build-global-define (map cdr G4554@global*))))) G454f@G454c G454e@G454b G454d@G454a))))) '#f)) (map G2cd6@gen-global G452c@lex*) (G302c@make-export-subst G453d@exp-name* G453c@exp-id*)))))) (G2f8b@chi-rhs* G452b@rhs* G452e@r G452d@mr))) (G2f77@chi-expr* G452f@init* G452e@r G452d@mr)))) G4539@G4537 G4538@G4536)))) G4523@G451d G4522@G451c G4521@G451b G4520@G451a G451f@G4519 G451e@G4518)))) G4516@swap)) (lambda () (begin ((lambda (G4569@t) (begin (G450e@G450a G4510@G450c) (set! G4510@G450c G4569@t))) (G450e@G450a)) ((lambda (G456b@t) (begin (G450f@G450b G4511@G450d) (set! G4511@G450d G456b@t))) (G450f@G450b)))))) G2fc4@inv-collector G2fc6@vis-collector G4504@rtc G4505@vtc)) (map G4501@wrap G44dd@b*) (map G4501@wrap G44db@main-exp*) (G2fc2@make-collector) (G2fc2@make-collector)))) '#f)) (G2fc0@make-top-rib G44fb@subst-names G44fa@subst-labels))) G44f7@G44f5 G44f6@G44f4)))) G44f2@swap)) (lambda () (begin ((lambda (G456f@t) (begin (G44ea@G44e6 G44ec@G44e8) (set! G44ec@G44e8 G456f@t))) (G44ea@G44e6)) ((lambda (G4571@t) (begin (G44eb@G44e7 G44ed@G44e9) (set! G44ed@G44e9 G4571@t))) (G44eb@G44e7)))))) G2fc8@imp-collector G3050@top-level-context G44e5@itc '#f))) '#f))) (set! G2fd0@core-library-expander (lambda (G4573@e G4574@verify-name) (call-with-values (lambda () (G2fbc@parse-library G4573@e)) (lambda (G457b@G4577 G457c@G4578 G457d@G4579 G457e@G457a) ((lambda (G4583@b* G4584@imp* G4585@exp* G4586@name*) (call-with-values (lambda () (G2fba@parse-library-name G4586@name*)) (lambda (G458d@G458b G458e@G458c) ((lambda (G4591@ver G4592@name) (begin (G4574@verify-name G4592@name) (call-with-values (lambda () (G2fce@library-body-expander G4592@name G4585@exp* G4584@imp* G4583@b* '#f)) (lambda (G459c@G4595 G459d@G4596 G459e@G4597 G459f@G4598 G45a0@G4599 G45a1@G459a G45a2@G459b) ((lambda (G45aa@export-env G45ab@export-subst G45ac@visit-code G45ad@invoke-code G45ae@visit-req* G45af@invoke-req* G45b0@imp*) (values G4592@name G4591@ver G45b0@imp* G45af@invoke-req* G45ae@visit-req* G45ad@invoke-code G45ac@visit-code G45ab@export-subst G45aa@export-env)) G45a2@G459b G45a1@G459a G45a0@G4599 G459f@G4598 G459e@G4597 G459d@G4596 G459c@G4595))))) G458e@G458c G458d@G458b)))) G457e@G457a G457d@G4579 G457c@G4578 G457b@G4577))))) (set! G2fd2@parse-top-level-program (lambda (G45b8@e*) ((lambda (G45ba@t) ((lambda (G45bc@ls/false) (if (and G45bc@ls/false (apply (lambda (G45be@import G45bf@imp* G45c0@b*) (eq? (G3048@syntax->datum G45be@import) 'import)) G45bc@ls/false)) (apply (lambda (G45c4@import G45c5@imp* G45c6@b*) (values G45c5@imp* G45c6@b*)) G45bc@ls/false) ((lambda (G45ca@t) ((lambda (G45cc@ls/false) (if (and G45cc@ls/false (apply (lambda (G45ce@import G45cf@x G45d0@y) (eq? (G3048@syntax->datum G45ce@import) 'import)) G45cc@ls/false)) (apply (lambda (G45d4@import G45d5@x G45d6@y) (G3042@syntax-violation 'expander '"invalid syntax of top-level program" (G2d52@syntax-car G45b8@e*))) G45cc@ls/false) ((lambda (G45da@t) ((lambda (G45dc@ls/false) (if G45dc@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45dc@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G45da@t))) (G2f57@syntax-dispatch G45da@t '_))) G45ca@t))) (G2f57@syntax-dispatch G45ca@t '((any . any) . any)))) G45ba@t))) (G2f57@syntax-dispatch G45ba@t '((any . each-any) . each-any)))) G45b8@e*))) (set! G2fd4@top-level-expander (lambda (G45de@e*) (call-with-values (lambda () (G2fd2@parse-top-level-program G45de@e*)) (lambda (G45e2@G45e0 G45e3@G45e1) ((lambda (G45e6@b* G45e7@imp*) (call-with-values (lambda () (G2fce@library-body-expander '() '() G45e7@imp* G45e6@b* '#t)) (lambda (G45f1@G45ea G45f2@G45eb G45f3@G45ec G45f4@G45ed G45f5@G45ee G45f6@G45ef G45f7@G45f0) ((lambda (G45ff@export-env G4600@export-subst G4601@visit-code G4602@invoke-code G4603@visit-req* G4604@invoke-req* G4605@imp*) (values G4604@invoke-req* G4602@invoke-code)) G45f7@G45f0 G45f6@G45ef G45f5@G45ee G45f4@G45ed G45f3@G45ec G45f2@G45eb G45f1@G45ea)))) G45e3@G45e1 G45e2@G45e0))))) (set! G2fda@G2fd5 (make-record-type-descriptor 'env '#f 'G2fd8 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fdc@G2fd7 '#f) (set! G2fde@G2fd6 (make-record-constructor-descriptor G2fda@G2fd5 '#f G2fdc@G2fd7)) (set! G2fe1@env? (record-predicate G2fda@G2fd5)) (set! G2fe3@make-env (record-constructor G2fde@G2fd6)) (set! G2fe5@env-names (record-accessor G2fda@G2fd5 '0)) (set! G2fe7@env-labels (record-accessor G2fda@G2fd5 '1)) (set! G2fe9@env-itc (record-accessor G2fda@G2fd5 '2)) (set! G2feb@set-env-names! (record-mutator G2fda@G2fd5 '0)) (set! G2fed@set-env-labels! (record-mutator G2fda@G2fd5 '1)) (set! G2fef@set-env-itc! (record-mutator G2fda@G2fd5 '2)) (set! G2ff1@rp (G28f1@G2824@make-record-printer 'env (lambda (G460d@x G460e@p G460f@wr) (display '"#<environment>" G460e@p)))) (set! G2ff7@G2ff2 (make-record-type-descriptor 'interaction-env '#f 'G2ff5 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2ff9@G2ff4 '#f) (set! G2ffb@G2ff3 (make-record-constructor-descriptor G2ff7@G2ff2 '#f G2ff9@G2ff4)) (set! G2ffe@interaction-env? (record-predicate G2ff7@G2ff2)) (set! G3000@make-interaction-env (record-constructor G2ffb@G2ff3)) (set! G3002@interaction-env-rib (record-accessor G2ff7@G2ff2 '0)) (set! G3004@interaction-env-r (record-accessor G2ff7@G2ff2 '1)) (set! G3006@interaction-env-locs (record-accessor G2ff7@G2ff2 '2)) (set! G3008@set-interaction-env-rib! (record-mutator G2ff7@G2ff2 '0)) (set! G300a@set-interaction-env-r! (record-mutator G2ff7@G2ff2 '1)) (set! G300c@set-interaction-env-locs! (record-mutator G2ff7@G2ff2 '2)) (set! G300e@rp (G28f1@G2824@make-record-printer 'interaction-env (lambda (G4613@x G4614@p G4615@wr) (display '"#<environment>" G4614@p)))) (set! G3010@interaction-environment-symbols (lambda () (G3018@environment-symbols (G304e@interaction-environment)))) (set! G3012@environment-bindings (lambda (G4619@e) (vector->list (vector-map (lambda (G461b@name G461c@label) (G3014@parse-binding (cons G461b@name (G2b6e@G2a14@imported-label->binding G461c@label)))) (G2fe5@env-names G4619@e) (G2fe7@env-labels G4619@e))))) (set! G3014@parse-binding (lambda (G461f@b) (cons (car G461f@b) ((lambda (G4621@t) (if (memv G4621@t '(core-prim global)) 'procedure (if (memv G4621@t '(core-macro macro global-macro)) 'syntax (if (memv G4621@t '($core-rtd)) 'record (if (eq? (car G461f@b) (cadr G461f@b)) 'syntax 'unknown))))) (cadr G461f@b))))) (set! G3016@environment? (lambda (G4623@x) (or (G2fe1@env? G4623@x) (G2ffe@interaction-env? G4623@x)))) (set! G3018@environment-symbols (lambda (G4625@x) (if (G2fe1@env? G4625@x) (vector->list (G2fe5@env-names G4625@x)) (if (G2ffe@interaction-env? G4625@x) (map values (G2cef@rib-sym* (G3002@interaction-env-rib G4625@x))) (assertion-violation 'environment-symbols '"not an environment" G4625@x))))) (set! G301a@environment (lambda G4627@imp* ((lambda (G4629@itc) ((lambda (G462d@G462b G462e@G462c) ((lambda (G4631@swap) (dynamic-wind G4631@swap (lambda () (call-with-values (lambda () (G2fbe@parse-import-spec* G4627@imp*)) (lambda (G4635@G4633 G4636@G4634) ((lambda (G4639@subst-labels G463a@subst-names) (G2fe3@make-env G463a@subst-names G4639@subst-labels G4629@itc)) G4636@G4634 G4635@G4633)))) G4631@swap)) (lambda () ((lambda (G463d@t) (begin (G462d@G462b G462e@G462c) (set! G462e@G462c G463d@t))) (G462d@G462b))))) G2fc8@imp-collector G4629@itc)) (G2fc2@make-collector)))) (set! G301c@null-environment (lambda (G463f@n) (begin (if (not (eqv? G463f@n '5)) (assertion-violation 'null-environment '"not 5" G463f@n) (void)) (G301a@environment '(psyntax null-environment-5))))) (set! G301e@scheme-report-environment (lambda (G4641@n) (begin (if (not (eqv? G4641@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4641@n) (void)) (G301a@environment '(psyntax scheme-report-environment-5))))) (set! G3020@expand (lambda (G4643@x G4644@env) (if (G2fe1@env? G4644@env) ((lambda (G4647@rib) ((lambda (G4649@x G464a@itc G464b@rtc G464c@vtc) ((lambda (G4651@x) (begin (G2d0f@seal-rib! G4647@rib) (values G4651@x (G464b@rtc)))) ((lambda (G465b@G4653 G465c@G4654 G465d@G4655 G465e@G4656 G465f@G4657 G4660@G4658 G4661@G4659 G4662@G465a) ((lambda (G466b@swap) (dynamic-wind G466b@swap (lambda () (G2f7b@chi-expr G4649@x '() '())) G466b@swap)) (lambda () (begin ((lambda (G466d@t) (begin (G465b@G4653 G465f@G4657) (set! G465f@G4657 G466d@t))) (G465b@G4653)) ((lambda (G466f@t) (begin (G465c@G4654 G4660@G4658) (set! G4660@G4658 G466f@t))) (G465c@G4654)) ((lambda (G4671@t) (begin (G465d@G4655 G4661@G4659) (set! G4661@G4659 G4671@t))) (G465d@G4655)) ((lambda (G4673@t) (begin (G465e@G4656 G4662@G465a) (set! G4662@G465a G4673@t))) (G465e@G4656)))))) G3050@top-level-context G2fc4@inv-collector G2fc6@vis-collector G2fc8@imp-collector '#f G464b@rtc G464c@vtc G464a@itc))) (G2d22@make-stx G4643@x G2cd0@top-mark* (list G4647@rib) '()) (G2fe9@env-itc G4644@env) (G2fc2@make-collector) (G2fc2@make-collector))) (G2fc0@make-top-rib (G2fe5@env-names G4644@env) (G2fe7@env-labels G4644@env))) (if (G2ffe@interaction-env? G4644@env) ((lambda (G4675@rib G4676@r G4677@rtc) ((lambda (G467b@x) (call-with-values (lambda () ((lambda (G4687@G467f G4688@G4680 G4689@G4681 G468a@G4682 G468b@G4683 G468c@G4684 G468d@G4685 G468e@G4686) ((lambda (G4697@swap) (dynamic-wind G4697@swap (lambda () (G2fcc@chi-interaction-expr G467b@x G4675@rib G4676@r)) G4697@swap)) (lambda () (begin ((lambda (G4699@t) (begin (G4687@G467f G468b@G4683) (set! G468b@G4683 G4699@t))) (G4687@G467f)) ((lambda (G469b@t) (begin (G4688@G4680 G468c@G4684) (set! G468c@G4684 G469b@t))) (G4688@G4680)) ((lambda (G469d@t) (begin (G4689@G4681 G468d@G4685) (set! G468d@G4685 G469d@t))) (G4689@G4681)) ((lambda (G469f@t) (begin (G468a@G4682 G468e@G4686) (set! G468e@G4686 G469f@t))) (G468a@G4682)))))) G3050@top-level-context G2fc4@inv-collector G2fc6@vis-collector G2fc8@imp-collector G4644@env G4677@rtc (G2fc2@make-collector) (G2fc2@make-collector))) (lambda (G46a1@G467d G46a2@G467e) ((lambda (G46a5@r^ G46a6@e) (begin (G300a@set-interaction-env-r! G4644@env G46a5@r^) (values G46a6@e (G4677@rtc)))) G46a2@G467e G46a1@G467d)))) (G2d22@make-stx G4643@x G2cd0@top-mark* (list G4675@rib) '()))) (G3002@interaction-env-rib G4644@env) (G3004@interaction-env-r G4644@env) (G2fc2@make-collector)) (assertion-violation 'expand '"not an environment" G4644@env))))) (set! G3022@eval (lambda (G46a9@x G46aa@env) (begin (if (not (G3016@environment? G46aa@env)) (error 'eval '"not an environment" G46aa@env) (void)) (call-with-values (lambda () (G3020@expand G46a9@x G46aa@env)) (lambda (G46af@G46ad G46b0@G46ae) ((lambda (G46b3@invoke-req* G46b4@x) (begin (for-each G2b6f@G2a16@invoke-library G46b3@invoke-req*) (eval-core (G2948@G2900@expanded->core G46b4@x)))) G46b0@G46ae G46af@G46ad)))))) (set! G3024@library-expander (lambda G471c ((lambda (G471d) (if (= G471d '3) (apply (lambda (G46b7@x G46b8@filename G46b9@verify-name) ((lambda (G46be@build-visit-code G46c0@visit!) (begin (set! G46be@build-visit-code (lambda (G470a@macro*) (if (null? G470a@macro*) (G2cb6@G2c28@build-void) (G2cb5@G2c26@build-sequence '#f (map (lambda (G470c@x) ((lambda (G470e@loc G470f@src) (list 'set! G470e@loc G470f@src)) (car G470c@x) (cddr G470c@x))) G470a@macro*))))) (set! G46c0@visit! (lambda (G4702@macro*) (for-each (lambda (G4704@x) ((lambda (G4706@loc G4707@proc) (set-symbol-value! G4706@loc G4707@proc)) (car G4704@x) (cadr G4704@x))) G4702@macro*))) (call-with-values (lambda () (G2fd0@core-library-expander G46b7@x G46b9@verify-name)) (lambda (G46ca@G46c1 G46cb@G46c2 G46cc@G46c3 G46cd@G46c4 G46ce@G46c5 G46cf@G46c6 G46d0@G46c7 G46d1@G46c8 G46d2@G46c9) ((lambda (G46dc@export-env G46dd@export-subst G46de@macro* G46df@invoke-code G46e0@vis* G46e1@inv* G46e2@imp* G46e3@ver G46e4@name) ((lambda (G46ee@id G46ef@name G46f0@ver G46f1@imp* G46f2@vis* G46f3@inv* G46f4@visit-proc G46f5@invoke-proc G46f6@visit-code G46f7@invoke-code) (begin (G2b6d@G2a12@install-library G46ee@id G46ef@name G46f0@ver G46f1@imp* G46f2@vis* G46f3@inv* G46dd@export-subst G46dc@export-env G46f4@visit-proc G46f5@invoke-proc G46f6@visit-code G46f7@invoke-code '#t G46b8@filename) (values G46ee@id G46ef@name G46f0@ver G46f1@imp* G46f2@vis* G46f3@inv* G46f7@invoke-code G46f6@visit-code G46dd@export-subst G46dc@export-env))) (gensym) G46e4@name G46e3@ver (map G2b73@G2a1e@library-spec G46e2@imp*) (map G2b73@G2a1e@library-spec G46e0@vis*) (map G2b73@G2a1e@library-spec G46e1@inv*) (lambda () (G46c0@visit! G46de@macro*)) (lambda () (eval-core (G2948@G2900@expanded->core G46df@invoke-code))) (G46be@build-visit-code G46de@macro*) G46df@invoke-code)) G46d2@G46c9 G46d1@G46c8 G46d0@G46c7 G46cf@G46c6 G46ce@G46c5 G46cd@G46c4 G46cc@G46c3 G46cb@G46c2 G46ca@G46c1))))) '#f '#f)) G471c) (if (= G471d '2) (apply (lambda (G4712@x G4713@filename) (G3024@library-expander G4712@x G4713@filename (lambda (G4716@x) (values)))) G471c) (if (= G471d '1) (apply (lambda (G4718@x) (G3024@library-expander G4718@x '#f (lambda (G471a@x) (values)))) G471c) (error 'apply '"invalid arg count"))))) (length G471c)))) (set! G3026@boot-library-expand (lambda (G471e@x) (call-with-values (lambda () (G3024@library-expander G471e@x)) (lambda (G472a@G4720 G472b@G4721 G472c@G4722 G472d@G4723 G472e@G4724 G472f@G4725 G4730@G4726 G4731@G4727 G4732@G4728 G4733@G4729) ((lambda (G473e@export-env G473f@export-subst G4740@visit-code G4741@invoke-code G4742@inv* G4743@vis* G4744@imp* G4745@ver G4746@name G4747@id) (values G4746@name G4741@invoke-code G473f@export-subst G473e@export-env)) G4733@G4729 G4732@G4728 G4731@G4727 G4730@G4726 G472f@G4725 G472e@G4724 G472d@G4723 G472c@G4722 G472b@G4721 G472a@G4720))))) (set! G3028@rev-map-append (lambda (G4752@f G4753@ls G4754@ac) (if (null? G4753@ls) G4754@ac (G3028@rev-map-append G4752@f (cdr G4753@ls) (cons (G4752@f (car G4753@ls)) G4754@ac))))) (set! G302a@build-exports (lambda (G4758@lex*+loc* G4759@init*) (G2cb5@G2c26@build-sequence '#f (cons (G2cb6@G2c28@build-void) (G3028@rev-map-append (lambda (G475c@x) (list 'set! (cdr G475c@x) (car G475c@x))) G4758@lex*+loc* G4759@init*))))) (set! G302c@make-export-subst (lambda (G475e@name* G475f@id*) (map (lambda (G4762@name G4763@id) ((lambda (G4766@label) (begin (if (not G4766@label) (G3042@syntax-violation '#f '"cannot export unbound identifier" G4763@id) (void)) (cons G4762@name G4766@label))) (G2d72@id->label G4763@id))) G475e@name* G475f@id*))) (set! G302e@make-export-env/macros (lambda (G4768@lex* G4769@loc* G476a@r) ((lambda (G476f@lookup) (begin (set! G476f@lookup (lambda (G478c@x) ((letrec ((G478e@f (lambda (G4790@x G4791@lex* G4792@loc*) (if (pair? G4791@lex*) (if (eq? G4790@x (car G4791@lex*)) (car G4792@loc*) (G478e@f G4790@x (cdr G4791@lex*) (cdr G4792@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G478e@f) G478c@x G4768@lex* G4769@loc*))) ((letrec ((G4770@f (lambda (G4772@r G4773@env G4774@global* G4775@macro*) (if (null? G4772@r) (values G4773@env G4774@global* G4775@macro*) ((lambda (G477a@x) ((lambda (G477c@label G477d@b) ((lambda (G4780@t) (if (memv G4780@t '(lexical)) ((lambda (G4782@v) ((lambda (G4784@loc G4785@type) (G4770@f (cdr G4772@r) (cons (cons* G477c@label G4785@type G4784@loc) G4773@env) (cons (cons (G2ee3@lexical-var G4782@v) G4784@loc) G4774@global*) G4775@macro*)) (G476f@lookup (G2ee3@lexical-var G4782@v)) (if (G2ee5@lexical-mutable? G4782@v) 'mutable 'global))) (G2d7c@binding-value G477d@b)) (if (memv G4780@t '(local-macro)) ((lambda (G4788@loc) (G4770@f (cdr G4772@r) (cons (cons* G477c@label 'global-macro G4788@loc) G4773@env) G4774@global* (cons (cons G4788@loc (G2d7c@binding-value G477d@b)) G4775@macro*))) (gensym)) (if (memv G4780@t '(local-macro!)) ((lambda (G478a@loc) (G4770@f (cdr G4772@r) (cons (cons* G477c@label 'global-macro! G478a@loc) G4773@env) G4774@global* (cons (cons G478a@loc (G2d7c@binding-value G477d@b)) G4775@macro*))) (gensym)) (if (memv G4780@t '($rtd $module)) (G4770@f (cdr G4772@r) (cons G477a@x G4773@env) G4774@global* G4775@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d7a@binding-type G477d@b) (G2d7c@binding-value G477d@b))))))) (G2d7a@binding-type G477d@b))) (car G477a@x) (cdr G477a@x))) (car G4772@r)))))) G4770@f) G476a@r '() '() '()))) '#f))) (set! G3030@generate-temporaries (lambda (G4796@ls) ((lambda (G4798@t) ((lambda (G479a@ls/false) (if G479a@ls/false (apply (lambda (G479c@ls) (map (lambda (G479e@x) (G2d22@make-stx ((lambda (G47a0@x) (if (or (symbol? G47a0@x) (string? G47a0@x)) (gensym G47a0@x) (gensym 't))) (G3048@syntax->datum G479e@x)) G2cd0@top-mark* '() '())) G479c@ls)) G479a@ls/false) ((lambda (G47a2@t) ((lambda (G47a4@ls/false) (if G47a4@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47a4@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G47a2@t))) (G2f57@syntax-dispatch G47a2@t '_))) G4798@t))) (G2f57@syntax-dispatch G4798@t 'each-any))) G4796@ls))) (set! G3032@free-identifier=? (lambda (G47a6@x G47a7@y) (if (G2d58@id? G47a6@x) (if (G2d58@id? G47a7@y) (G2d60@free-id=? G47a6@x G47a7@y) (assertion-violation 'free-identifier=? '"not an identifier" G47a7@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47a6@x)))) (set! G3034@bound-identifier=? (lambda (G47aa@x G47ab@y) (if (G2d58@id? G47aa@x) (if (G2d58@id? G47ab@y) (G2d5e@bound-id=? G47aa@x G47ab@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47ab@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47aa@x)))) (set! G3036@make-source-condition (lambda (G47ae@x) ((lambda (G47b8@G47b3 G47ba@G47b5 G47bc@G47b4 G47bf@G47b2 G47c1@make-source-condition G47c3@G47b0 G47c5@G47b1 G47c7@source-condition? G47c9@source-filename G47cb@source-character) (begin (set! G47b8@G47b3 (make-record-type-descriptor '&source-information G4c0a@G495b@&condition-rtd 'G47b6 '#f '#f '#((immutable file-name) (immutable character)))) (set! G47ba@G47b5 '#f) (set! G47bc@G47b4 (make-record-constructor-descriptor G47b8@G47b3 G4c0b@G495d@&condition-rcd G47ba@G47b5)) (set! G47bf@G47b2 (record-predicate G47b8@G47b3)) (set! G47c1@make-source-condition (record-constructor G47bc@G47b4)) (set! G47c3@G47b0 (record-accessor G47b8@G47b3 '0)) (set! G47c5@G47b1 (record-accessor G47b8@G47b3 '1)) (set! G47c7@source-condition? (condition-predicate G47b8@G47b3)) (set! G47c9@source-filename (condition-accessor G47b8@G47b3 G47c3@G47b0)) (set! G47cb@source-character (condition-accessor G47b8@G47b3 G47c5@G47b1)) (if (pair? G47ae@x) (G47c1@make-source-condition (car G47ae@x) (cdr G47ae@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3038@extract-position-condition (lambda (G47cc@x) (G3036@make-source-condition (G303a@expression-position G47cc@x)))) (set! G303a@expression-position (lambda (G47ce@x) (and (G2d20@stx? G47ce@x) ((lambda (G47d0@x) (and (G28e9@G2814@annotation? G47d0@x) (G28ea@G2816@annotation-source G47d0@x))) (G2d24@stx-expr G47ce@x))))) (set! G303c@assertion-error (lambda (G47d2@expr G47d3@pos) (raise (condition (G4c3a@G4a1d@make-assertion-violation) (G4c4c@G4a4d@make-who-condition 'assert) (G4c10@G49b0@make-message-condition '"assertion failed") (G4c42@G4a33@make-irritants-condition (list G47d2@expr)) (G3036@make-source-condition G47d3@pos))))) (set! G303e@syntax-error (lambda (G47d6@x . G47d8@args) (begin (if (not (for-all string? G47d8@args)) (assertion-violation 'syntax-error '"invalid argument" G47d8@args) (void)) (raise (condition (G4c10@G49b0@make-message-condition (if (null? G47d8@args) '"invalid syntax" (apply string-append G47d8@args))) (G4c6e@G4aa7@make-syntax-violation (G3048@syntax->datum G47d6@x) '#f) (G3038@extract-position-condition G47d6@x)))))) (set! G3040@syntax-violation* (lambda (G47da@who G47db@msg G47dc@form G47dd@condition-object) (begin (if (not (string? G47db@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47db@msg) (void)) ((lambda (G47e2@who) (raise (condition (if G47e2@who (G4c4c@G4a4d@make-who-condition G47e2@who) (condition)) (G4c10@G49b0@make-message-condition G47db@msg) G47dd@condition-object (G3038@extract-position-condition G47dc@form)))) (if (or (string? G47da@who) (symbol? G47da@who)) G47da@who (if (not G47da@who) ((lambda (G47e4@t) ((lambda (G47e6@ls/false) (if (and G47e6@ls/false (apply (lambda (G47e8@id) (G2d58@id? G47e8@id)) G47e6@ls/false)) (apply (lambda (G47ea@id) (G3048@syntax->datum G47ea@id)) G47e6@ls/false) ((lambda (G47ec@t) ((lambda (G47ee@ls/false) (if (and G47ee@ls/false (apply (lambda (G47f0@id G47f1@rest) (G2d58@id? G47f0@id)) G47ee@ls/false)) (apply (lambda (G47f4@id G47f5@rest) (G3048@syntax->datum G47f4@id)) G47ee@ls/false) ((lambda (G47f8@t) ((lambda (G47fa@ls/false) (if G47fa@ls/false (apply (lambda () '#f) G47fa@ls/false) (G3042@syntax-violation '#f '"invalid syntax" G47f8@t))) (G2f57@syntax-dispatch G47f8@t '_))) G47ec@t))) (G2f57@syntax-dispatch G47ec@t '(any . any)))) G47e4@t))) (G2f57@syntax-dispatch G47e4@t 'any))) G47dc@form) (assertion-violation 'syntax-violation '"invalid who argument" G47da@who))))))) (set! G3042@syntax-violation (lambda G480a ((lambda (G480b) (if (= G480b '3) (apply (lambda (G47fc@who G47fd@msg G47fe@form) (G3042@syntax-violation G47fc@who G47fd@msg G47fe@form '#f)) G480a) (if (= G480b '4) (apply (lambda (G4802@who G4803@msg G4804@form G4805@subform) (G3040@syntax-violation* G4802@who G4803@msg G4804@form (G4c6e@G4aa7@make-syntax-violation (G3048@syntax->datum G4804@form) (G3048@syntax->datum G4805@subform)))) G480a) (error 'apply '"invalid arg count")))) (length G480a)))) (set! G3044@identifier? (lambda (G480c@x) (G2d58@id? G480c@x))) (set! G3046@datum->syntax (lambda (G480e@id G480f@datum) (if (G2d58@id? G480e@id) (G2d36@datum->stx G480e@id G480f@datum) (assertion-violation 'datum->syntax '"not an identifier" G480e@id)))) (set! G3048@syntax->datum (lambda (G4812@x) (G2d6e@stx->datum G4812@x))) (set! G304a@compile-r6rs-top-level (lambda (G4814@x*) (call-with-values (lambda () (G2fd4@top-level-expander G4814@x*)) (lambda (G4818@G4816 G4819@G4817) ((lambda (G481c@invoke-code G481d@lib*) (lambda () (begin (for-each G2b6f@G2a16@invoke-library G481d@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2948@G2900@expanded->core G481c@invoke-code)) (void)) (eval-core (G2948@G2900@expanded->core G481c@invoke-code))))) G4819@G4817 G4818@G4816))))) (set! G304c@pre-compile-r6rs-top-level (lambda (G4820@x*) (call-with-values (lambda () (G2fd4@top-level-expander G4820@x*)) (lambda (G4824@G4822 G4825@G4823) ((lambda (G4828@invoke-code G4829@lib*) (begin (for-each G2b6f@G2a16@invoke-library G4829@lib*) (G28f2@G2826@compile-core (G2948@G2900@expanded->core G4828@invoke-code)))) G4825@G4823 G4824@G4822))))) (set! G304e@interaction-environment ((lambda (G482c@the-env) (lambda () (or G482c@the-env ((lambda (G482e@lib G482f@rib) (begin ((lambda (G4832@subst) (begin (G2cf9@set-rib-sym*! G482f@rib (map car G4832@subst)) (G2cfb@set-rib-mark**! G482f@rib (map (lambda (G4834@x) G2cd0@top-mark*) G4832@subst)) (G2cfd@set-rib-label*! G482f@rib (map cdr G4832@subst)))) (G2b44@G29c0@library-subst G482e@lib)) ((lambda (G4836@env) (begin (set! G482c@the-env G4836@env) G4836@env)) (G3000@make-interaction-env G482f@rib '() '())))) (G2b68@G2a08@find-library-by-name '(mosh interaction)) (G2d03@make-empty-rib))))) '#f)) (set! G3050@top-level-context (G28f4@G282a@make-parameter '#f)) (begin (set! G4946@G3050@top-level-context G3050@top-level-context) (set! G4945@G304e@interaction-environment G304e@interaction-environment) (set! G4944@G304c@pre-compile-r6rs-top-level G304c@pre-compile-r6rs-top-level) (set! G4943@G304a@compile-r6rs-top-level G304a@compile-r6rs-top-level) (set! G4942@G3048@syntax->datum G3048@syntax->datum) (set! G4941@G3046@datum->syntax G3046@datum->syntax) (set! G4940@G3044@identifier? G3044@identifier?) (set! G493f@G3042@syntax-violation G3042@syntax-violation) (set! G493e@G3040@syntax-violation* G3040@syntax-violation*) (set! G493d@G303e@syntax-error G303e@syntax-error) (set! G493c@G303c@assertion-error G303c@assertion-error) (set! G493b@G303a@expression-position G303a@expression-position) (set! G493a@G3038@extract-position-condition G3038@extract-position-condition) (set! G4939@G3036@make-source-condition G3036@make-source-condition) (set! G4938@G3034@bound-identifier=? G3034@bound-identifier=?) (set! G4937@G3032@free-identifier=? G3032@free-identifier=?) (set! G4936@G3030@generate-temporaries G3030@generate-temporaries) (set! G4935@G302e@make-export-env/macros G302e@make-export-env/macros) (set! G4934@G302c@make-export-subst G302c@make-export-subst) (set! G4933@G302a@build-exports G302a@build-exports) (set! G4932@G3028@rev-map-append G3028@rev-map-append) (set! G4931@G3026@boot-library-expand G3026@boot-library-expand) (set! G4930@G3024@library-expander G3024@library-expander) (set! G492f@G3022@eval G3022@eval) (set! G492e@G3020@expand G3020@expand) (set! G492d@G301e@scheme-report-environment G301e@scheme-report-environment) (set! G492c@G301c@null-environment G301c@null-environment) (set! G492b@G301a@environment G301a@environment) (set! G492a@G3018@environment-symbols G3018@environment-symbols) (set! G4929@G3016@environment? G3016@environment?) (set! G4928@G3014@parse-binding G3014@parse-binding) (set! G4927@G3012@environment-bindings G3012@environment-bindings) (set! G4926@G3010@interaction-environment-symbols G3010@interaction-environment-symbols) (set! G4925@G300e@rp G300e@rp) (set! G4924@G300c@set-interaction-env-locs! G300c@set-interaction-env-locs!) (set! G4923@G300a@set-interaction-env-r! G300a@set-interaction-env-r!) (set! G4922@G3008@set-interaction-env-rib! G3008@set-interaction-env-rib!) (set! G4921@G3006@interaction-env-locs G3006@interaction-env-locs) (set! G4920@G3004@interaction-env-r G3004@interaction-env-r) (set! G491f@G3002@interaction-env-rib G3002@interaction-env-rib) (set! G491e@G3000@make-interaction-env G3000@make-interaction-env) (set! G491d@G2ffe@interaction-env? G2ffe@interaction-env?) (set! G491c@G2ffb@G2ff3 G2ffb@G2ff3) (set! G491b@G2ff9@G2ff4 G2ff9@G2ff4) (set! G491a@G2ff7@G2ff2 G2ff7@G2ff2) (set! G4919@G2ff1@rp G2ff1@rp) (set! G4918@G2fef@set-env-itc! G2fef@set-env-itc!) (set! G4917@G2fed@set-env-labels! G2fed@set-env-labels!) (set! G4916@G2feb@set-env-names! G2feb@set-env-names!) (set! G4915@G2fe9@env-itc G2fe9@env-itc) (set! G4914@G2fe7@env-labels G2fe7@env-labels) (set! G4913@G2fe5@env-names G2fe5@env-names) (set! G4912@G2fe3@make-env G2fe3@make-env) (set! G4911@G2fe1@env? G2fe1@env?) (set! G4910@G2fde@G2fd6 G2fde@G2fd6) (set! G490f@G2fdc@G2fd7 G2fdc@G2fd7) (set! G490e@G2fda@G2fd5 G2fda@G2fd5) (set! G490d@G2fd4@top-level-expander G2fd4@top-level-expander) (set! G490c@G2fd2@parse-top-level-program G2fd2@parse-top-level-program) (set! G490b@G2fd0@core-library-expander G2fd0@core-library-expander) (set! G490a@G2fce@library-body-expander G2fce@library-body-expander) (set! G4909@G2fcc@chi-interaction-expr G2fcc@chi-interaction-expr) (set! G4908@G2fca@chi-library-internal G2fca@chi-library-internal) (set! G4907@G2fc8@imp-collector G2fc8@imp-collector) (set! G4906@G2fc6@vis-collector G2fc6@vis-collector) (set! G4905@G2fc4@inv-collector G2fc4@inv-collector) (set! G4904@G2fc2@make-collector G2fc2@make-collector) (set! G4903@G2fc0@make-top-rib G2fc0@make-top-rib) (set! G4902@G2fbe@parse-import-spec* G2fbe@parse-import-spec*) (set! G4901@G2fbc@parse-library G2fbc@parse-library) (set! G4900@G2fba@parse-library-name G2fba@parse-library-name) (set! G48ff@G2fb8@parse-exports G2fb8@parse-exports) (set! G48fe@G2fb6@expand-transformer G2fb6@expand-transformer) (set! G48fd@G2fb4@chi-body* G2fb4@chi-body*) (set! G48fc@G2fb2@chi-internal-module G2fb2@chi-internal-module) (set! G48fb@G2fb0@module-interface-exp-id* G2fb0@module-interface-exp-id*) (set! G48fa@G2fae@set-module-interface-exp-lab-vec! G2fae@set-module-interface-exp-lab-vec!) (set! G48f9@G2fac@set-module-interface-exp-id-vec! G2fac@set-module-interface-exp-id-vec!) (set! G48f8@G2faa@set-module-interface-first-mark! G2faa@set-module-interface-first-mark!) (set! G48f7@G2fa8@module-interface-exp-lab-vec G2fa8@module-interface-exp-lab-vec) (set! G48f6@G2fa6@module-interface-exp-id-vec G2fa6@module-interface-exp-id-vec) (set! G48f5@G2fa4@module-interface-first-mark G2fa4@module-interface-first-mark) (set! G48f4@G2fa2@make-module-interface G2fa2@make-module-interface) (set! G48f3@G2fa0@module-interface? G2fa0@module-interface?) (set! G48f2@G2f9d@G2f95 G2f9d@G2f95) (set! G48f1@G2f9b@G2f96 G2f9b@G2f96) (set! G48f0@G2f99@G2f94 G2f99@G2f94) (set! G48ef@G2f93@parse-module G2f93@parse-module) (set! G48ee@G2f91@chi-internal G2f91@chi-internal) (set! G48ed@G2f8f@find-dups G2f8f@find-dups) (set! G48ec@G2f8d@find-bound=? G2f8d@find-bound=?) (set! G48eb@G2f8b@chi-rhs* G2f8b@chi-rhs*) (set! G48ea@G2f89@expand-interaction-rhs*/init* G2f89@expand-interaction-rhs*/init*) (set! G48e9@G2f87@chi-rhs G2f87@chi-rhs) (set! G48e8@G2f85@chi-defun G2f85@chi-defun) (set! G48e7@G2f83@chi-lambda-clause* G2f83@chi-lambda-clause*) (set! G48e6@G2f81@chi-lambda-clause G2f81@chi-lambda-clause) (set! G48e5@G2f7f@verify-formals G2f7f@verify-formals) (set! G48e4@G2f7d@chi-set! G2f7d@chi-set!) (set! G48e3@G2f7b@chi-expr G2f7b@chi-expr) (set! G48e2@G2f79@chi-application G2f79@chi-application) (set! G48e1@G2f77@chi-expr* G2f77@chi-expr*) (set! G48e0@G2f75@chi-global-macro G2f75@chi-global-macro) (set! G48df@G2f73@chi-local-macro G2f73@chi-local-macro) (set! G48de@G2f71@chi-macro G2f71@chi-macro) (set! G48dd@G2f6f@do-macro-call G2f6f@do-macro-call) (set! G48dc@G2f6d@local-macro-transformer G2f6d@local-macro-transformer) (set! G48db@G2f6b@macro-transformer G2f6b@macro-transformer) (set! G48da@G2f69@symbol-macro G2f69@symbol-macro) (set! G48d9@G2f67@file-options-macro G2f67@file-options-macro) (set! G48d8@G2f65@core-macro-transformer G2f65@core-macro-transformer) (set! G48d7@G2f63@syntax-transformer G2f63@syntax-transformer) (set! G48d6@G2f61@ellipsis-map G2f61@ellipsis-map) (set! G48d5@G2f5f@syntax-case-transformer G2f5f@syntax-case-transformer) (set! G48d4@G2f5d@verify-literals G2f5d@verify-literals) (set! G48d3@G2f5b@underscore? G2f5b@underscore?) (set! G48d2@G2f59@ellipsis? G2f59@ellipsis?) (set! G48d1@G2f57@syntax-dispatch G2f57@syntax-dispatch) (set! G48d0@G2f55@convert-pattern G2f55@convert-pattern) (set! G48cf@G2f53@foreign-call-transformer G2f53@foreign-call-transformer) (set! G48ce@G2f51@parameterize-macro G2f51@parameterize-macro) (set! G48cd@G2f4f@incorrect-usage-macro G2f4f@incorrect-usage-macro) (set! G48cc@G2f4d@define-condition-type-macro G2f4d@define-condition-type-macro) (set! G48cb@G2f4b@define-record-type-macro G2f4b@define-record-type-macro) (set! G48ca@G2f49@define-struct-macro G2f49@define-struct-macro) (set! G48c9@G2f47@quasisyntax-macro G2f47@quasisyntax-macro) (set! G48c8@G2f45@quasiquote-macro G2f45@quasiquote-macro) (set! G48c7@G2f43@syntax-rules-macro G2f43@syntax-rules-macro) (set! G48c6@G2f41@include-into-macro G2f41@include-into-macro) (set! G48c5@G2f3f@include-macro G2f3f@include-macro) (set! G48c4@G2f3d@do-include G2f3d@do-include) (set! G48c3@G2f3b@cond-macro G2f3b@cond-macro) (set! G48c2@G2f39@and-macro G2f39@and-macro) (set! G48c1@G2f37@or-macro G2f37@or-macro) (set! G48c0@G2f35@let*-macro G2f35@let*-macro) (set! G48bf@G2f33@do-macro G2f33@do-macro) (set! G48be@G2f31@identifier-syntax-macro G2f31@identifier-syntax-macro) (set! G48bd@G2f2f@endianness-macro G2f2f@endianness-macro) (set! G48bc@G2f2d@assert-macro G2f2d@assert-macro) (set! G48bb@G2f2b@delay-macro G2f2b@delay-macro) (set! G48ba@G2f29@time-macro G2f29@time-macro) (set! G48b9@G2f27@define-enumeration-macro G2f27@define-enumeration-macro) (set! G48b8@G2f25@guard-macro G2f25@guard-macro) (set! G48b7@G2f23@trace-letrec-syntax-macro G2f23@trace-letrec-syntax-macro) (set! G48b6@G2f21@trace-let-syntax-macro G2f21@trace-let-syntax-macro) (set! G48b5@G2f1f@trace-let/rec-syntax G2f1f@trace-let/rec-syntax) (set! G48b4@G2f1d@trace-define-syntax-macro G2f1d@trace-define-syntax-macro) (set! G48b3@G2f1b@trace-define-macro G2f1b@trace-define-macro) (set! G48b2@G2f19@trace-lambda-macro G2f19@trace-lambda-macro) (set! G48b1@G2f17@let*-values-macro G2f17@let*-values-macro) (set! G48b0@G2f15@let-values-macro G2f15@let-values-macro) (set! G48af@G2f13@let-macro G2f13@let-macro) (set! G48ae@G2f11@invalid-fmls-error G2f11@invalid-fmls-error) (set! G48ad@G2f0f@with-syntax-macro G2f0f@with-syntax-macro) (set! G48ac@G2f0d@bless G2f0d@bless) (set! G48ab@G2f0b@lambda-transformer G2f0b@lambda-transformer) (set! G48aa@G2f09@case-lambda-transformer G2f09@case-lambda-transformer) (set! G48a9@G2f07@quote-transformer G2f07@quote-transformer) (set! G48a8@G2f05@case-macro G2f05@case-macro) (set! G48a7@G2f03@or-transformer G2f03@or-transformer) (set! G48a6@G2f01@and-transformer G2f01@and-transformer) (set! G48a5@G2eff@if-transformer G2eff@if-transformer) (set! G48a4@G2efd@unless-macro G2efd@unless-macro) (set! G48a3@G2efb@when-macro G2efb@when-macro) (set! G48a2@G2ef9@record-constructor-descriptor-transformer G2ef9@record-constructor-descriptor-transformer) (set! G48a1@G2ef7@record-type-descriptor-transformer G2ef7@record-type-descriptor-transformer) (set! G48a0@G2ef5@type-descriptor-transformer G2ef5@type-descriptor-transformer) (set! G489f@G2ef3@fluid-let-syntax-transformer G2ef3@fluid-let-syntax-transformer) (set! G489e@G2ef1@letrec*-transformer G2ef1@letrec*-transformer) (set! G489d@G2eef@letrec-transformer G2eef@letrec-transformer) (set! G489c@G2eed@letrec-helper G2eed@letrec-helper) (set! G489b@G2eeb@add-lexicals G2eeb@add-lexicals) (set! G489a@G2ee9@add-lexical G2ee9@add-lexical) (set! G4899@G2ee7@set-lexical-mutable! G2ee7@set-lexical-mutable!) (set! G4898@G2ee5@lexical-mutable? G2ee5@lexical-mutable?) (set! G4897@G2ee3@lexical-var G2ee3@lexical-var) (set! G4896@G2ee1@scheme-stx G2ee1@scheme-stx) (set! G4895@G2edf@scheme-stx-hashtable G2edf@scheme-stx-hashtable) (set! G4894@G2edd@parse-define-syntax G2edd@parse-define-syntax) (set! G4893@G2edb@parse-define G2edb@parse-define) (set! G4892@G2d98@make-eval-transformer G2d98@make-eval-transformer) (set! G4891@G2d96@variable-transformer-procedure G2d96@variable-transformer-procedure) (set! G4890@G2d94@variable-transformer? G2d94@variable-transformer?) (set! G488f@G2d92@make-variable-transformer G2d92@make-variable-transformer) (set! G488e@G2d90@sanitize-binding G2d90@sanitize-binding) (set! G488d@G2d80@syntax-type G2d80@syntax-type) (set! G488c@G2d7e@raise-unbound-error G2d7e@raise-unbound-error) (set! G488b@G2d7c@binding-value G2d7c@binding-value) (set! G488a@G2d7a@binding-type G2d7a@binding-type) (set! G4889@G2d78@make-binding G2d78@make-binding) (set! G4888@G2d76@label->binding G2d76@label->binding) (set! G4887@G2d74@id->real-label G2d74@id->real-label) (set! G4886@G2d72@id->label G2d72@id->label) (set! G4885@G2d70@same-marks*? G2d70@same-marks*?) (set! G4884@G2d6e@stx->datum G2d6e@stx->datum) (set! G4883@G2d6c@strip G2d6c@strip) (set! G4882@G2d6a@strip-annotations G2d6a@strip-annotations) (set! G4881@G2d68@self-evaluating? G2d68@self-evaluating?) (set! G4880@G2d66@bound-id-member? G2d66@bound-id-member?) (set! G487f@G2d64@distinct-bound-ids? G2d64@distinct-bound-ids?) (set! G487e@G2d62@valid-bound-ids? G2d62@valid-bound-ids?) (set! G487d@G2d60@free-id=? G2d60@free-id=?) (set! G487c@G2d5e@bound-id=? G2d5e@bound-id=?) (set! G487b@G2d5c@same-marks? G2d5c@same-marks?) (set! G487a@G2d5a@id->sym G2d5a@id->sym) (set! G4879@G2d58@id? G2d58@id?) (set! G4878@G2d56@syntax->list G2d56@syntax->list) (set! G4877@G2d54@syntax-cdr G2d54@syntax-cdr) (set! G4876@G2d52@syntax-car G2d52@syntax-car) (set! G4875@G2d50@syntax-list? G2d50@syntax-list?) (set! G4874@G2d4e@syntax-null? G2d4e@syntax-null?) (set! G4873@G2d4c@syntax-vector? G2d4c@syntax-vector?) (set! G4872@G2d4a@syntax-pair? G2d4a@syntax-pair?) (set! G4871@G2d48@syntax-vector->list G2d48@syntax-vector->list) (set! G4870@G2d46@syntax-kind? G2d46@syntax-kind?) (set! G486f@G2d44@add-subst G2d44@add-subst) (set! G486e@G2d42@add-mark G2d42@add-mark) (set! G486d@G2d40@mkstx G2d40@mkstx) (set! G486c@G2d3e@join-wraps G2d3e@join-wraps) (set! G486b@G2d3c@anti-mark? G2d3c@anti-mark?) (set! G486a@G2d3a@anti-mark G2d3a@anti-mark) (set! G4869@G2d38@gen-mark G2d38@gen-mark) (set! G4868@G2d36@datum->stx G2d36@datum->stx) (set! G4867@G2d34@rp G2d34@rp) (set! G4866@G2d32@set-stx-ae*! G2d32@set-stx-ae*!) (set! G4865@G2d30@set-stx-subst*! G2d30@set-stx-subst*!) (set! G4864@G2d2e@set-stx-mark*! G2d2e@set-stx-mark*!) (set! G4863@G2d2c@set-stx-expr! G2d2c@set-stx-expr!) (set! G4862@G2d2a@stx-ae* G2d2a@stx-ae*) (set! G4861@G2d28@stx-subst* G2d28@stx-subst*) (set! G4860@G2d26@stx-mark* G2d26@stx-mark*) (set! G485f@G2d24@stx-expr G2d24@stx-expr) (set! G485e@G2d22@make-stx G2d22@make-stx) (set! G485d@G2d20@stx? G2d20@stx?) (set! G485c@G2d1d@G2d15 G2d1d@G2d15) (set! G485b@G2d1b@G2d16 G2d1b@G2d16) (set! G485a@G2d19@G2d14 G2d19@G2d14) (set! G4859@G2d13@make-full-rib G2d13@make-full-rib) (set! G4858@G2d11@unseal-rib! G2d11@unseal-rib!) (set! G4857@G2d0f@seal-rib! G2d0f@seal-rib!) (set! G4856@G2d0d@make-rib-map G2d0d@make-rib-map) (set! G4855@G2d0b@extend-rib/nc! G2d0b@extend-rib/nc!) (set! G4854@G2d09@extend-rib! G2d09@extend-rib!) (set! G4853@G2d07@find-label G2d07@find-label) (set! G4852@G2d05@make-cache-rib G2d05@make-cache-rib) (set! G4851@G2d03@make-empty-rib G2d03@make-empty-rib) (set! G4850@G2d01@set-rib-cache! G2d01@set-rib-cache!) (set! G484f@G2cff@set-rib-sealed/freq! G2cff@set-rib-sealed/freq!) (set! G484e@G2cfd@set-rib-label*! G2cfd@set-rib-label*!) (set! G484d@G2cfb@set-rib-mark**! G2cfb@set-rib-mark**!) (set! G484c@G2cf9@set-rib-sym*! G2cf9@set-rib-sym*!) (set! G484b@G2cf7@rib-cache G2cf7@rib-cache) (set! G484a@G2cf5@rib-sealed/freq G2cf5@rib-sealed/freq) (set! G4849@G2cf3@rib-label* G2cf3@rib-label*) (set! G4848@G2cf1@rib-mark** G2cf1@rib-mark**) (set! G4847@G2cef@rib-sym* G2cef@rib-sym*) (set! G4846@G2ced@make-rib G2ced@make-rib) (set! G4845@G2ceb@rib? G2ceb@rib?) (set! G4844@G2ce8@G2ce0 G2ce8@G2ce0) (set! G4843@G2ce6@G2ce1 G2ce6@G2ce1) (set! G4842@G2ce4@G2cdf G2ce4@G2cdf) (set! G4841@G2cde@gen-define-label G2cde@gen-define-label) (set! G4840@G2cdc@gen-define-label+loc G2cdc@gen-define-label+loc) (set! G483f@G2cda@gen-top-level-label G2cda@gen-top-level-label) (set! G483e@G2cd8@gen-label G2cd8@gen-label) (set! G483d@G2cd6@gen-global G2cd6@gen-global) (set! G483c@G2cd4@gen-lexical G2cd4@gen-lexical) (set! G483b@G2cd2@top-marked? G2cd2@top-marked?) (set! G483a@G2cd0@top-mark* G2cd0@top-mark*) (set! G4839@G2ccb@set-union G2ccb@set-union) (set! G4838@G2cc9@set-cons G2cc9@set-cons) (G2b65@G2a02@current-library-expander G3024@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4950@G494b G4952@G494d G4954@G494c G4957@&condition? G4959@make-&condition G495b@&condition-rtd G495d@&condition-rcd G49a7@G49a2 G49a9@G49a4 G49ab@G49a3 G49ae@p? G49b0@make-message-condition G49b2@G49a1 G49b4@message-condition? G49b6@condition-message G49b8@&message-rtd G49ba@&message-rcd G49c0@G49bb G49c2@G49bd G49c4@G49bc G49c7@p? G49c9@make-warning G49cb@warning? G49cd@&warning-rtd G49cf@&warning-rcd G49d5@G49d0 G49d7@G49d2 G49d9@G49d1 G49dc@p? G49de@make-serious-condition G49e0@serious-condition? G49e2@&serious-rtd G49e4@&serious-rcd G49ea@G49e5 G49ec@G49e7 G49ee@G49e6 G49f1@p? G49f3@make-error G49f5@error? G49f7@&error-rtd G49f9@&error-rcd G49ff@G49fa G4a01@G49fc G4a03@G49fb G4a06@p? G4a08@make-violation G4a0a@violation? G4a0c@&violation-rtd G4a0e@&violation-rcd G4a14@G4a0f G4a16@G4a11 G4a18@G4a10 G4a1b@p? G4a1d@make-assertion-violation G4a1f@assertion-violation? G4a21@&assertion-rtd G4a23@&assertion-rcd G4a2a@G4a25 G4a2c@G4a27 G4a2e@G4a26 G4a31@p? G4a33@make-irritants-condition G4a35@G4a24 G4a37@irritants-condition? G4a39@condition-irritants G4a3b@&irritants-rtd G4a3d@&irritants-rcd G4a44@G4a3f G4a46@G4a41 G4a48@G4a40 G4a4b@p? G4a4d@make-who-condition G4a4f@G4a3e G4a51@who-condition? G4a53@condition-who G4a55@&who-rtd G4a57@&who-rcd G4a5d@G4a58 G4a5f@G4a5a G4a61@G4a59 G4a64@p? G4a66@make-non-continuable-violation G4a68@non-continuable-violation? G4a6a@&non-continuable-rtd G4a6c@&non-continuable-rcd G4a72@G4a6d G4a74@G4a6f G4a76@G4a6e G4a79@p? G4a7b@make-implementation-restriction-violation G4a7d@implementation-restriction-violation? G4a7f@&implementation-restriction-rtd G4a81@&implementation-restriction-rcd G4a87@G4a82 G4a89@G4a84 G4a8b@G4a83 G4a8e@p? G4a90@make-lexical-violation G4a92@lexical-violation? G4a94@&lexical-rtd G4a96@&lexical-rcd G4a9e@G4a99 G4aa0@G4a9b G4aa2@G4a9a G4aa5@p? G4aa7@make-syntax-violation G4aa9@G4a97 G4aab@G4a98 G4aad@syntax-violation? G4aaf@syntax-violation-form G4ab1@syntax-violation-subform G4ab3@&syntax-rtd G4ab5@&syntax-rcd G4abb@G4ab6 G4abd@G4ab8 G4abf@G4ab7 G4ac2@p? G4ac4@make-undefined-violation G4ac6@undefined-violation? G4ac8@&undefined-rtd G4aca@&undefined-rcd G4ad0@G4acb G4ad2@G4acd G4ad4@G4acc G4ad7@p? G4ad9@make-i/o-error G4adb@i/o-error? G4add@&i/o-rtd G4adf@&i/o-rcd G4ae5@G4ae0 G4ae7@G4ae2 G4ae9@G4ae1 G4aec@p? G4aee@make-i/o-read-error G4af0@i/o-read-error? G4af2@&i/o-read-rtd G4af4@&i/o-read-rcd G4afa@G4af5 G4afc@G4af7 G4afe@G4af6 G4b01@p? G4b03@make-i/o-write-error G4b05@i/o-write-error? G4b07@&i/o-write-rtd G4b09@&i/o-write-rcd G4b10@G4b0b G4b12@G4b0d G4b14@G4b0c G4b17@p? G4b19@make-i/o-invalid-position-error G4b1b@G4b0a G4b1d@i/o-invalid-position-error? G4b1f@i/o-error-position G4b21@&i/o-invalid-position-rtd G4b23@&i/o-invalid-position-rcd G4b2a@G4b25 G4b2c@G4b27 G4b2e@G4b26 G4b31@p? G4b33@make-i/o-filename-error G4b35@G4b24 G4b37@i/o-filename-error? G4b39@i/o-error-filename G4b3b@&i/o-filename-rtd G4b3d@&i/o-filename-rcd G4b43@G4b3e G4b45@G4b40 G4b47@G4b3f G4b4a@p? G4b4c@make-i/o-file-protection-error G4b4e@i/o-file-protection-error? G4b50@&i/o-file-protection-rtd G4b52@&i/o-file-protection-rcd G4b58@G4b53 G4b5a@G4b55 G4b5c@G4b54 G4b5f@p? G4b61@make-i/o-file-is-read-only-error G4b63@i/o-file-is-read-only-error? G4b65@&i/o-file-is-read-only-rtd G4b67@&i/o-file-is-read-only-rcd G4b6d@G4b68 G4b6f@G4b6a G4b71@G4b69 G4b74@p? G4b76@make-i/o-file-already-exists-error G4b78@i/o-file-already-exists-error? G4b7a@&i/o-file-already-exists-rtd G4b7c@&i/o-file-already-exists-rcd G4b82@G4b7d G4b84@G4b7f G4b86@G4b7e G4b89@p? G4b8b@make-i/o-file-does-not-exist-error G4b8d@i/o-file-does-not-exist-error? G4b8f@&i/o-file-does-not-exist-rtd G4b91@&i/o-file-does-not-exist-rcd G4b98@G4b93 G4b9a@G4b95 G4b9c@G4b94 G4b9f@p? G4ba1@make-i/o-port-error G4ba3@G4b92 G4ba5@i/o-port-error? G4ba7@i/o-error-port G4ba9@&i/o-port-rtd G4bab@&i/o-port-rcd G4bb1@G4bac G4bb3@G4bae G4bb5@G4bad G4bb8@p? G4bba@make-i/o-decoding-error G4bbc@i/o-decoding-error? G4bbe@&i/o-decoding-rtd G4bc0@&i/o-decoding-rcd G4bc7@G4bc2 G4bc9@G4bc4 G4bcb@G4bc3 G4bce@p? G4bd0@make-i/o-encoding-error G4bd2@G4bc1 G4bd4@i/o-encoding-error? G4bd6@i/o-encoding-error-char G4bd8@&i/o-encoding-rtd G4bda@&i/o-encoding-rcd G4be0@G4bdb G4be2@G4bdd G4be4@G4bdc G4be7@p? G4be9@make-no-infinities-violation G4beb@no-infinities-violation? G4bed@&no-infinities-rtd G4bef@&no-infinities-rcd G4bf5@G4bf0 G4bf7@G4bf2 G4bf9@G4bf1 G4bfc@p? G4bfe@make-no-nans-violation G4c00@no-nans-violation? G4c02@&no-nans-rtd G4c04@&no-nans-rcd) (begin (set! G4950@G494b (make-record-type-descriptor '&condition '#f 'G494e '#f '#f '#())) (set! G4952@G494d '#f) (set! G4954@G494c (make-record-constructor-descriptor G4950@G494b '#f G4952@G494d)) (set! G4957@&condition? (record-predicate G4950@G494b)) (set! G4959@make-&condition (record-constructor G4954@G494c)) (set! G495b@&condition-rtd G4950@G494b) (set! G495d@&condition-rcd G4954@G494c) (set! G49a7@G49a2 (make-record-type-descriptor '&message G4950@G494b 'G49a5 '#f '#f '#((immutable message)))) (set! G49a9@G49a4 '#f) (set! G49ab@G49a3 (make-record-constructor-descriptor G49a7@G49a2 G4954@G494c G49a9@G49a4)) (set! G49ae@p? (record-predicate G49a7@G49a2)) (set! G49b0@make-message-condition (record-constructor G49ab@G49a3)) (set! G49b2@G49a1 (record-accessor G49a7@G49a2 '0)) (set! G49b4@message-condition? (condition-predicate G49a7@G49a2)) (set! G49b6@condition-message (condition-accessor G49a7@G49a2 G49b2@G49a1)) (set! G49b8@&message-rtd G49a7@G49a2) (set! G49ba@&message-rcd G49ab@G49a3) (set! G49c0@G49bb (make-record-type-descriptor '&warning G4950@G494b 'G49be '#f '#f '#())) (set! G49c2@G49bd '#f) (set! G49c4@G49bc (make-record-constructor-descriptor G49c0@G49bb G4954@G494c G49c2@G49bd)) (set! G49c7@p? (record-predicate G49c0@G49bb)) (set! G49c9@make-warning (record-constructor G49c4@G49bc)) (set! G49cb@warning? (condition-predicate G49c0@G49bb)) (set! G49cd@&warning-rtd G49c0@G49bb) (set! G49cf@&warning-rcd G49c4@G49bc) (set! G49d5@G49d0 (make-record-type-descriptor '&serious G4950@G494b 'G49d3 '#f '#f '#())) (set! G49d7@G49d2 '#f) (set! G49d9@G49d1 (make-record-constructor-descriptor G49d5@G49d0 G4954@G494c G49d7@G49d2)) (set! G49dc@p? (record-predicate G49d5@G49d0)) (set! G49de@make-serious-condition (record-constructor G49d9@G49d1)) (set! G49e0@serious-condition? (condition-predicate G49d5@G49d0)) (set! G49e2@&serious-rtd G49d5@G49d0) (set! G49e4@&serious-rcd G49d9@G49d1) (set! G49ea@G49e5 (make-record-type-descriptor '&error G49d5@G49d0 'G49e8 '#f '#f '#())) (set! G49ec@G49e7 '#f) (set! G49ee@G49e6 (make-record-constructor-descriptor G49ea@G49e5 G49d9@G49d1 G49ec@G49e7)) (set! G49f1@p? (record-predicate G49ea@G49e5)) (set! G49f3@make-error (record-constructor G49ee@G49e6)) (set! G49f5@error? (condition-predicate G49ea@G49e5)) (set! G49f7@&error-rtd G49ea@G49e5) (set! G49f9@&error-rcd G49ee@G49e6) (set! G49ff@G49fa (make-record-type-descriptor '&violation G49d5@G49d0 'G49fd '#f '#f '#())) (set! G4a01@G49fc '#f) (set! G4a03@G49fb (make-record-constructor-descriptor G49ff@G49fa G49d9@G49d1 G4a01@G49fc)) (set! G4a06@p? (record-predicate G49ff@G49fa)) (set! G4a08@make-violation (record-constructor G4a03@G49fb)) (set! G4a0a@violation? (condition-predicate G49ff@G49fa)) (set! G4a0c@&violation-rtd G49ff@G49fa) (set! G4a0e@&violation-rcd G4a03@G49fb) (set! G4a14@G4a0f (make-record-type-descriptor '&assertion G49ff@G49fa 'G4a12 '#f '#f '#())) (set! G4a16@G4a11 '#f) (set! G4a18@G4a10 (make-record-constructor-descriptor G4a14@G4a0f G4a03@G49fb G4a16@G4a11)) (set! G4a1b@p? (record-predicate G4a14@G4a0f)) (set! G4a1d@make-assertion-violation (record-constructor G4a18@G4a10)) (set! G4a1f@assertion-violation? (condition-predicate G4a14@G4a0f)) (set! G4a21@&assertion-rtd G4a14@G4a0f) (set! G4a23@&assertion-rcd G4a18@G4a10) (set! G4a2a@G4a25 (make-record-type-descriptor '&irritants G4950@G494b 'G4a28 '#f '#f '#((immutable irritants)))) (set! G4a2c@G4a27 '#f) (set! G4a2e@G4a26 (make-record-constructor-descriptor G4a2a@G4a25 G4954@G494c G4a2c@G4a27)) (set! G4a31@p? (record-predicate G4a2a@G4a25)) (set! G4a33@make-irritants-condition (record-constructor G4a2e@G4a26)) (set! G4a35@G4a24 (record-accessor G4a2a@G4a25 '0)) (set! G4a37@irritants-condition? (condition-predicate G4a2a@G4a25)) (set! G4a39@condition-irritants (condition-accessor G4a2a@G4a25 G4a35@G4a24)) (set! G4a3b@&irritants-rtd G4a2a@G4a25) (set! G4a3d@&irritants-rcd G4a2e@G4a26) (set! G4a44@G4a3f (make-record-type-descriptor '&who G4950@G494b 'G4a42 '#f '#f '#((immutable who)))) (set! G4a46@G4a41 '#f) (set! G4a48@G4a40 (make-record-constructor-descriptor G4a44@G4a3f G4954@G494c G4a46@G4a41)) (set! G4a4b@p? (record-predicate G4a44@G4a3f)) (set! G4a4d@make-who-condition (record-constructor G4a48@G4a40)) (set! G4a4f@G4a3e (record-accessor G4a44@G4a3f '0)) (set! G4a51@who-condition? (condition-predicate G4a44@G4a3f)) (set! G4a53@condition-who (condition-accessor G4a44@G4a3f G4a4f@G4a3e)) (set! G4a55@&who-rtd G4a44@G4a3f) (set! G4a57@&who-rcd G4a48@G4a40) (set! G4a5d@G4a58 (make-record-type-descriptor '&non-continuable G49ff@G49fa 'G4a5b '#f '#f '#())) (set! G4a5f@G4a5a '#f) (set! G4a61@G4a59 (make-record-constructor-descriptor G4a5d@G4a58 G4a03@G49fb G4a5f@G4a5a)) (set! G4a64@p? (record-predicate G4a5d@G4a58)) (set! G4a66@make-non-continuable-violation (record-constructor G4a61@G4a59)) (set! G4a68@non-continuable-violation? (condition-predicate G4a5d@G4a58)) (set! G4a6a@&non-continuable-rtd G4a5d@G4a58) (set! G4a6c@&non-continuable-rcd G4a61@G4a59) (set! G4a72@G4a6d (make-record-type-descriptor '&implementation-restriction G49ff@G49fa 'G4a70 '#f '#f '#())) (set! G4a74@G4a6f '#f) (set! G4a76@G4a6e (make-record-constructor-descriptor G4a72@G4a6d G4a03@G49fb G4a74@G4a6f)) (set! G4a79@p? (record-predicate G4a72@G4a6d)) (set! G4a7b@make-implementation-restriction-violation (record-constructor G4a76@G4a6e)) (set! G4a7d@implementation-restriction-violation? (condition-predicate G4a72@G4a6d)) (set! G4a7f@&implementation-restriction-rtd G4a72@G4a6d) (set! G4a81@&implementation-restriction-rcd G4a76@G4a6e) (set! G4a87@G4a82 (make-record-type-descriptor '&lexical G49ff@G49fa 'G4a85 '#f '#f '#())) (set! G4a89@G4a84 '#f) (set! G4a8b@G4a83 (make-record-constructor-descriptor G4a87@G4a82 G4a03@G49fb G4a89@G4a84)) (set! G4a8e@p? (record-predicate G4a87@G4a82)) (set! G4a90@make-lexical-violation (record-constructor G4a8b@G4a83)) (set! G4a92@lexical-violation? (condition-predicate G4a87@G4a82)) (set! G4a94@&lexical-rtd G4a87@G4a82) (set! G4a96@&lexical-rcd G4a8b@G4a83) (set! G4a9e@G4a99 (make-record-type-descriptor '&syntax G49ff@G49fa 'G4a9c '#f '#f '#((immutable form) (immutable subform)))) (set! G4aa0@G4a9b '#f) (set! G4aa2@G4a9a (make-record-constructor-descriptor G4a9e@G4a99 G4a03@G49fb G4aa0@G4a9b)) (set! G4aa5@p? (record-predicate G4a9e@G4a99)) (set! G4aa7@make-syntax-violation (record-constructor G4aa2@G4a9a)) (set! G4aa9@G4a97 (record-accessor G4a9e@G4a99 '0)) (set! G4aab@G4a98 (record-accessor G4a9e@G4a99 '1)) (set! G4aad@syntax-violation? (condition-predicate G4a9e@G4a99)) (set! G4aaf@syntax-violation-form (condition-accessor G4a9e@G4a99 G4aa9@G4a97)) (set! G4ab1@syntax-violation-subform (condition-accessor G4a9e@G4a99 G4aab@G4a98)) (set! G4ab3@&syntax-rtd G4a9e@G4a99) (set! G4ab5@&syntax-rcd G4aa2@G4a9a) (set! G4abb@G4ab6 (make-record-type-descriptor '&undefined G49ff@G49fa 'G4ab9 '#f '#f '#())) (set! G4abd@G4ab8 '#f) (set! G4abf@G4ab7 (make-record-constructor-descriptor G4abb@G4ab6 G4a03@G49fb G4abd@G4ab8)) (set! G4ac2@p? (record-predicate G4abb@G4ab6)) (set! G4ac4@make-undefined-violation (record-constructor G4abf@G4ab7)) (set! G4ac6@undefined-violation? (condition-predicate G4abb@G4ab6)) (set! G4ac8@&undefined-rtd G4abb@G4ab6) (set! G4aca@&undefined-rcd G4abf@G4ab7) (set! G4ad0@G4acb (make-record-type-descriptor '&i/o G49ea@G49e5 'G4ace '#f '#f '#())) (set! G4ad2@G4acd '#f) (set! G4ad4@G4acc (make-record-constructor-descriptor G4ad0@G4acb G49ee@G49e6 G4ad2@G4acd)) (set! G4ad7@p? (record-predicate G4ad0@G4acb)) (set! G4ad9@make-i/o-error (record-constructor G4ad4@G4acc)) (set! G4adb@i/o-error? (condition-predicate G4ad0@G4acb)) (set! G4add@&i/o-rtd G4ad0@G4acb) (set! G4adf@&i/o-rcd G4ad4@G4acc) (set! G4ae5@G4ae0 (make-record-type-descriptor '&i/o-read G4ad0@G4acb 'G4ae3 '#f '#f '#())) (set! G4ae7@G4ae2 '#f) (set! G4ae9@G4ae1 (make-record-constructor-descriptor G4ae5@G4ae0 G4ad4@G4acc G4ae7@G4ae2)) (set! G4aec@p? (record-predicate G4ae5@G4ae0)) (set! G4aee@make-i/o-read-error (record-constructor G4ae9@G4ae1)) (set! G4af0@i/o-read-error? (condition-predicate G4ae5@G4ae0)) (set! G4af2@&i/o-read-rtd G4ae5@G4ae0) (set! G4af4@&i/o-read-rcd G4ae9@G4ae1) (set! G4afa@G4af5 (make-record-type-descriptor '&i/o-write G4ad0@G4acb 'G4af8 '#f '#f '#())) (set! G4afc@G4af7 '#f) (set! G4afe@G4af6 (make-record-constructor-descriptor G4afa@G4af5 G4ad4@G4acc G4afc@G4af7)) (set! G4b01@p? (record-predicate G4afa@G4af5)) (set! G4b03@make-i/o-write-error (record-constructor G4afe@G4af6)) (set! G4b05@i/o-write-error? (condition-predicate G4afa@G4af5)) (set! G4b07@&i/o-write-rtd G4afa@G4af5) (set! G4b09@&i/o-write-rcd G4afe@G4af6) (set! G4b10@G4b0b (make-record-type-descriptor '&i/o-invalid-position G4ad0@G4acb 'G4b0e '#f '#f '#((immutable position)))) (set! G4b12@G4b0d '#f) (set! G4b14@G4b0c (make-record-constructor-descriptor G4b10@G4b0b G4ad4@G4acc G4b12@G4b0d)) (set! G4b17@p? (record-predicate G4b10@G4b0b)) (set! G4b19@make-i/o-invalid-position-error (record-constructor G4b14@G4b0c)) (set! G4b1b@G4b0a (record-accessor G4b10@G4b0b '0)) (set! G4b1d@i/o-invalid-position-error? (condition-predicate G4b10@G4b0b)) (set! G4b1f@i/o-error-position (condition-accessor G4b10@G4b0b G4b1b@G4b0a)) (set! G4b21@&i/o-invalid-position-rtd G4b10@G4b0b) (set! G4b23@&i/o-invalid-position-rcd G4b14@G4b0c) (set! G4b2a@G4b25 (make-record-type-descriptor '&i/o-filename G4ad0@G4acb 'G4b28 '#f '#f '#((immutable filename)))) (set! G4b2c@G4b27 '#f) (set! G4b2e@G4b26 (make-record-constructor-descriptor G4b2a@G4b25 G4ad4@G4acc G4b2c@G4b27)) (set! G4b31@p? (record-predicate G4b2a@G4b25)) (set! G4b33@make-i/o-filename-error (record-constructor G4b2e@G4b26)) (set! G4b35@G4b24 (record-accessor G4b2a@G4b25 '0)) (set! G4b37@i/o-filename-error? (condition-predicate G4b2a@G4b25)) (set! G4b39@i/o-error-filename (condition-accessor G4b2a@G4b25 G4b35@G4b24)) (set! G4b3b@&i/o-filename-rtd G4b2a@G4b25) (set! G4b3d@&i/o-filename-rcd G4b2e@G4b26) (set! G4b43@G4b3e (make-record-type-descriptor '&i/o-file-protection G4b2a@G4b25 'G4b41 '#f '#f '#())) (set! G4b45@G4b40 '#f) (set! G4b47@G4b3f (make-record-constructor-descriptor G4b43@G4b3e G4b2e@G4b26 G4b45@G4b40)) (set! G4b4a@p? (record-predicate G4b43@G4b3e)) (set! G4b4c@make-i/o-file-protection-error (record-constructor G4b47@G4b3f)) (set! G4b4e@i/o-file-protection-error? (condition-predicate G4b43@G4b3e)) (set! G4b50@&i/o-file-protection-rtd G4b43@G4b3e) (set! G4b52@&i/o-file-protection-rcd G4b47@G4b3f) (set! G4b58@G4b53 (make-record-type-descriptor '&i/o-file-is-read-only G4b43@G4b3e 'G4b56 '#f '#f '#())) (set! G4b5a@G4b55 '#f) (set! G4b5c@G4b54 (make-record-constructor-descriptor G4b58@G4b53 G4b47@G4b3f G4b5a@G4b55)) (set! G4b5f@p? (record-predicate G4b58@G4b53)) (set! G4b61@make-i/o-file-is-read-only-error (record-constructor G4b5c@G4b54)) (set! G4b63@i/o-file-is-read-only-error? (condition-predicate G4b58@G4b53)) (set! G4b65@&i/o-file-is-read-only-rtd G4b58@G4b53) (set! G4b67@&i/o-file-is-read-only-rcd G4b5c@G4b54) (set! G4b6d@G4b68 (make-record-type-descriptor '&i/o-file-already-exists G4b2a@G4b25 'G4b6b '#f '#f '#())) (set! G4b6f@G4b6a '#f) (set! G4b71@G4b69 (make-record-constructor-descriptor G4b6d@G4b68 G4b2e@G4b26 G4b6f@G4b6a)) (set! G4b74@p? (record-predicate G4b6d@G4b68)) (set! G4b76@make-i/o-file-already-exists-error (record-constructor G4b71@G4b69)) (set! G4b78@i/o-file-already-exists-error? (condition-predicate G4b6d@G4b68)) (set! G4b7a@&i/o-file-already-exists-rtd G4b6d@G4b68) (set! G4b7c@&i/o-file-already-exists-rcd G4b71@G4b69) (set! G4b82@G4b7d (make-record-type-descriptor '&i/o-file-does-not-exist G4b2a@G4b25 'G4b80 '#f '#f '#())) (set! G4b84@G4b7f '#f) (set! G4b86@G4b7e (make-record-constructor-descriptor G4b82@G4b7d G4b2e@G4b26 G4b84@G4b7f)) (set! G4b89@p? (record-predicate G4b82@G4b7d)) (set! G4b8b@make-i/o-file-does-not-exist-error (record-constructor G4b86@G4b7e)) (set! G4b8d@i/o-file-does-not-exist-error? (condition-predicate G4b82@G4b7d)) (set! G4b8f@&i/o-file-does-not-exist-rtd G4b82@G4b7d) (set! G4b91@&i/o-file-does-not-exist-rcd G4b86@G4b7e) (set! G4b98@G4b93 (make-record-type-descriptor '&i/o-port G4ad0@G4acb 'G4b96 '#f '#f '#((immutable port)))) (set! G4b9a@G4b95 '#f) (set! G4b9c@G4b94 (make-record-constructor-descriptor G4b98@G4b93 G4ad4@G4acc G4b9a@G4b95)) (set! G4b9f@p? (record-predicate G4b98@G4b93)) (set! G4ba1@make-i/o-port-error (record-constructor G4b9c@G4b94)) (set! G4ba3@G4b92 (record-accessor G4b98@G4b93 '0)) (set! G4ba5@i/o-port-error? (condition-predicate G4b98@G4b93)) (set! G4ba7@i/o-error-port (condition-accessor G4b98@G4b93 G4ba3@G4b92)) (set! G4ba9@&i/o-port-rtd G4b98@G4b93) (set! G4bab@&i/o-port-rcd G4b9c@G4b94) (set! G4bb1@G4bac (make-record-type-descriptor '&i/o-decoding G4b98@G4b93 'G4baf '#f '#f '#())) (set! G4bb3@G4bae '#f) (set! G4bb5@G4bad (make-record-constructor-descriptor G4bb1@G4bac G4b9c@G4b94 G4bb3@G4bae)) (set! G4bb8@p? (record-predicate G4bb1@G4bac)) (set! G4bba@make-i/o-decoding-error (record-constructor G4bb5@G4bad)) (set! G4bbc@i/o-decoding-error? (condition-predicate G4bb1@G4bac)) (set! G4bbe@&i/o-decoding-rtd G4bb1@G4bac) (set! G4bc0@&i/o-decoding-rcd G4bb5@G4bad) (set! G4bc7@G4bc2 (make-record-type-descriptor '&i/o-encoding G4b98@G4b93 'G4bc5 '#f '#f '#((immutable char)))) (set! G4bc9@G4bc4 '#f) (set! G4bcb@G4bc3 (make-record-constructor-descriptor G4bc7@G4bc2 G4b9c@G4b94 G4bc9@G4bc4)) (set! G4bce@p? (record-predicate G4bc7@G4bc2)) (set! G4bd0@make-i/o-encoding-error (record-constructor G4bcb@G4bc3)) (set! G4bd2@G4bc1 (record-accessor G4bc7@G4bc2 '0)) (set! G4bd4@i/o-encoding-error? (condition-predicate G4bc7@G4bc2)) (set! G4bd6@i/o-encoding-error-char (condition-accessor G4bc7@G4bc2 G4bd2@G4bc1)) (set! G4bd8@&i/o-encoding-rtd G4bc7@G4bc2) (set! G4bda@&i/o-encoding-rcd G4bcb@G4bc3) (set! G4be0@G4bdb (make-record-type-descriptor '&no-infinities G4a72@G4a6d 'G4bde '#f '#f '#())) (set! G4be2@G4bdd '#f) (set! G4be4@G4bdc (make-record-constructor-descriptor G4be0@G4bdb G4a76@G4a6e G4be2@G4bdd)) (set! G4be7@p? (record-predicate G4be0@G4bdb)) (set! G4be9@make-no-infinities-violation (record-constructor G4be4@G4bdc)) (set! G4beb@no-infinities-violation? (condition-predicate G4be0@G4bdb)) (set! G4bed@&no-infinities-rtd G4be0@G4bdb) (set! G4bef@&no-infinities-rcd G4be4@G4bdc) (set! G4bf5@G4bf0 (make-record-type-descriptor '&no-nans G4a72@G4a6d 'G4bf3 '#f '#f '#())) (set! G4bf7@G4bf2 '#f) (set! G4bf9@G4bf1 (make-record-constructor-descriptor G4bf5@G4bf0 G4a76@G4a6e G4bf7@G4bf2)) (set! G4bfc@p? (record-predicate G4bf5@G4bf0)) (set! G4bfe@make-no-nans-violation (record-constructor G4bf9@G4bf1)) (set! G4c00@no-nans-violation? (condition-predicate G4bf5@G4bf0)) (set! G4c02@&no-nans-rtd G4bf5@G4bf0) (set! G4c04@&no-nans-rcd G4bf9@G4bf1) (begin (set! G4cf5@G4c04@&no-nans-rcd G4c04@&no-nans-rcd) (set! G4cf4@G4c02@&no-nans-rtd G4c02@&no-nans-rtd) (set! G4cf3@G4c00@no-nans-violation? G4c00@no-nans-violation?) (set! G4cf2@G4bfe@make-no-nans-violation G4bfe@make-no-nans-violation) (set! G4cf1@G4bfc@p? G4bfc@p?) (set! G4cf0@G4bf9@G4bf1 G4bf9@G4bf1) (set! G4cef@G4bf7@G4bf2 G4bf7@G4bf2) (set! G4cee@G4bf5@G4bf0 G4bf5@G4bf0) (set! G4ced@G4bef@&no-infinities-rcd G4bef@&no-infinities-rcd) (set! G4cec@G4bed@&no-infinities-rtd G4bed@&no-infinities-rtd) (set! G4ceb@G4beb@no-infinities-violation? G4beb@no-infinities-violation?) (set! G4cea@G4be9@make-no-infinities-violation G4be9@make-no-infinities-violation) (set! G4ce9@G4be7@p? G4be7@p?) (set! G4ce8@G4be4@G4bdc G4be4@G4bdc) (set! G4ce7@G4be2@G4bdd G4be2@G4bdd) (set! G4ce6@G4be0@G4bdb G4be0@G4bdb) (set! G4ce5@G4bda@&i/o-encoding-rcd G4bda@&i/o-encoding-rcd) (set! G4ce4@G4bd8@&i/o-encoding-rtd G4bd8@&i/o-encoding-rtd) (set! G4ce3@G4bd6@i/o-encoding-error-char G4bd6@i/o-encoding-error-char) (set! G4ce2@G4bd4@i/o-encoding-error? G4bd4@i/o-encoding-error?) (set! G4ce1@G4bd2@G4bc1 G4bd2@G4bc1) (set! G4ce0@G4bd0@make-i/o-encoding-error G4bd0@make-i/o-encoding-error) (set! G4cdf@G4bce@p? G4bce@p?) (set! G4cde@G4bcb@G4bc3 G4bcb@G4bc3) (set! G4cdd@G4bc9@G4bc4 G4bc9@G4bc4) (set! G4cdc@G4bc7@G4bc2 G4bc7@G4bc2) (set! G4cdb@G4bc0@&i/o-decoding-rcd G4bc0@&i/o-decoding-rcd) (set! G4cda@G4bbe@&i/o-decoding-rtd G4bbe@&i/o-decoding-rtd) (set! G4cd9@G4bbc@i/o-decoding-error? G4bbc@i/o-decoding-error?) (set! G4cd8@G4bba@make-i/o-decoding-error G4bba@make-i/o-decoding-error) (set! G4cd7@G4bb8@p? G4bb8@p?) (set! G4cd6@G4bb5@G4bad G4bb5@G4bad) (set! G4cd5@G4bb3@G4bae G4bb3@G4bae) (set! G4cd4@G4bb1@G4bac G4bb1@G4bac) (set! G4cd3@G4bab@&i/o-port-rcd G4bab@&i/o-port-rcd) (set! G4cd2@G4ba9@&i/o-port-rtd G4ba9@&i/o-port-rtd) (set! G4cd1@G4ba7@i/o-error-port G4ba7@i/o-error-port) (set! G4cd0@G4ba5@i/o-port-error? G4ba5@i/o-port-error?) (set! G4ccf@G4ba3@G4b92 G4ba3@G4b92) (set! G4cce@G4ba1@make-i/o-port-error G4ba1@make-i/o-port-error) (set! G4ccd@G4b9f@p? G4b9f@p?) (set! G4ccc@G4b9c@G4b94 G4b9c@G4b94) (set! G4ccb@G4b9a@G4b95 G4b9a@G4b95) (set! G4cca@G4b98@G4b93 G4b98@G4b93) (set! G4cc9@G4b91@&i/o-file-does-not-exist-rcd G4b91@&i/o-file-does-not-exist-rcd) (set! G4cc8@G4b8f@&i/o-file-does-not-exist-rtd G4b8f@&i/o-file-does-not-exist-rtd) (set! G4cc7@G4b8d@i/o-file-does-not-exist-error? G4b8d@i/o-file-does-not-exist-error?) (set! G4cc6@G4b8b@make-i/o-file-does-not-exist-error G4b8b@make-i/o-file-does-not-exist-error) (set! G4cc5@G4b89@p? G4b89@p?) (set! G4cc4@G4b86@G4b7e G4b86@G4b7e) (set! G4cc3@G4b84@G4b7f G4b84@G4b7f) (set! G4cc2@G4b82@G4b7d G4b82@G4b7d) (set! G4cc1@G4b7c@&i/o-file-already-exists-rcd G4b7c@&i/o-file-already-exists-rcd) (set! G4cc0@G4b7a@&i/o-file-already-exists-rtd G4b7a@&i/o-file-already-exists-rtd) (set! G4cbf@G4b78@i/o-file-already-exists-error? G4b78@i/o-file-already-exists-error?) (set! G4cbe@G4b76@make-i/o-file-already-exists-error G4b76@make-i/o-file-already-exists-error) (set! G4cbd@G4b74@p? G4b74@p?) (set! G4cbc@G4b71@G4b69 G4b71@G4b69) (set! G4cbb@G4b6f@G4b6a G4b6f@G4b6a) (set! G4cba@G4b6d@G4b68 G4b6d@G4b68) (set! G4cb9@G4b67@&i/o-file-is-read-only-rcd G4b67@&i/o-file-is-read-only-rcd) (set! G4cb8@G4b65@&i/o-file-is-read-only-rtd G4b65@&i/o-file-is-read-only-rtd) (set! G4cb7@G4b63@i/o-file-is-read-only-error? G4b63@i/o-file-is-read-only-error?) (set! G4cb6@G4b61@make-i/o-file-is-read-only-error G4b61@make-i/o-file-is-read-only-error) (set! G4cb5@G4b5f@p? G4b5f@p?) (set! G4cb4@G4b5c@G4b54 G4b5c@G4b54) (set! G4cb3@G4b5a@G4b55 G4b5a@G4b55) (set! G4cb2@G4b58@G4b53 G4b58@G4b53) (set! G4cb1@G4b52@&i/o-file-protection-rcd G4b52@&i/o-file-protection-rcd) (set! G4cb0@G4b50@&i/o-file-protection-rtd G4b50@&i/o-file-protection-rtd) (set! G4caf@G4b4e@i/o-file-protection-error? G4b4e@i/o-file-protection-error?) (set! G4cae@G4b4c@make-i/o-file-protection-error G4b4c@make-i/o-file-protection-error) (set! G4cad@G4b4a@p? G4b4a@p?) (set! G4cac@G4b47@G4b3f G4b47@G4b3f) (set! G4cab@G4b45@G4b40 G4b45@G4b40) (set! G4caa@G4b43@G4b3e G4b43@G4b3e) (set! G4ca9@G4b3d@&i/o-filename-rcd G4b3d@&i/o-filename-rcd) (set! G4ca8@G4b3b@&i/o-filename-rtd G4b3b@&i/o-filename-rtd) (set! G4ca7@G4b39@i/o-error-filename G4b39@i/o-error-filename) (set! G4ca6@G4b37@i/o-filename-error? G4b37@i/o-filename-error?) (set! G4ca5@G4b35@G4b24 G4b35@G4b24) (set! G4ca4@G4b33@make-i/o-filename-error G4b33@make-i/o-filename-error) (set! G4ca3@G4b31@p? G4b31@p?) (set! G4ca2@G4b2e@G4b26 G4b2e@G4b26) (set! G4ca1@G4b2c@G4b27 G4b2c@G4b27) (set! G4ca0@G4b2a@G4b25 G4b2a@G4b25) (set! G4c9f@G4b23@&i/o-invalid-position-rcd G4b23@&i/o-invalid-position-rcd) (set! G4c9e@G4b21@&i/o-invalid-position-rtd G4b21@&i/o-invalid-position-rtd) (set! G4c9d@G4b1f@i/o-error-position G4b1f@i/o-error-position) (set! G4c9c@G4b1d@i/o-invalid-position-error? G4b1d@i/o-invalid-position-error?) (set! G4c9b@G4b1b@G4b0a G4b1b@G4b0a) (set! G4c9a@G4b19@make-i/o-invalid-position-error G4b19@make-i/o-invalid-position-error) (set! G4c99@G4b17@p? G4b17@p?) (set! G4c98@G4b14@G4b0c G4b14@G4b0c) (set! G4c97@G4b12@G4b0d G4b12@G4b0d) (set! G4c96@G4b10@G4b0b G4b10@G4b0b) (set! G4c95@G4b09@&i/o-write-rcd G4b09@&i/o-write-rcd) (set! G4c94@G4b07@&i/o-write-rtd G4b07@&i/o-write-rtd) (set! G4c93@G4b05@i/o-write-error? G4b05@i/o-write-error?) (set! G4c92@G4b03@make-i/o-write-error G4b03@make-i/o-write-error) (set! G4c91@G4b01@p? G4b01@p?) (set! G4c90@G4afe@G4af6 G4afe@G4af6) (set! G4c8f@G4afc@G4af7 G4afc@G4af7) (set! G4c8e@G4afa@G4af5 G4afa@G4af5) (set! G4c8d@G4af4@&i/o-read-rcd G4af4@&i/o-read-rcd) (set! G4c8c@G4af2@&i/o-read-rtd G4af2@&i/o-read-rtd) (set! G4c8b@G4af0@i/o-read-error? G4af0@i/o-read-error?) (set! G4c8a@G4aee@make-i/o-read-error G4aee@make-i/o-read-error) (set! G4c89@G4aec@p? G4aec@p?) (set! G4c88@G4ae9@G4ae1 G4ae9@G4ae1) (set! G4c87@G4ae7@G4ae2 G4ae7@G4ae2) (set! G4c86@G4ae5@G4ae0 G4ae5@G4ae0) (set! G4c85@G4adf@&i/o-rcd G4adf@&i/o-rcd) (set! G4c84@G4add@&i/o-rtd G4add@&i/o-rtd) (set! G4c83@G4adb@i/o-error? G4adb@i/o-error?) (set! G4c82@G4ad9@make-i/o-error G4ad9@make-i/o-error) (set! G4c81@G4ad7@p? G4ad7@p?) (set! G4c80@G4ad4@G4acc G4ad4@G4acc) (set! G4c7f@G4ad2@G4acd G4ad2@G4acd) (set! G4c7e@G4ad0@G4acb G4ad0@G4acb) (set! G4c7d@G4aca@&undefined-rcd G4aca@&undefined-rcd) (set! G4c7c@G4ac8@&undefined-rtd G4ac8@&undefined-rtd) (set! G4c7b@G4ac6@undefined-violation? G4ac6@undefined-violation?) (set! G4c7a@G4ac4@make-undefined-violation G4ac4@make-undefined-violation) (set! G4c79@G4ac2@p? G4ac2@p?) (set! G4c78@G4abf@G4ab7 G4abf@G4ab7) (set! G4c77@G4abd@G4ab8 G4abd@G4ab8) (set! G4c76@G4abb@G4ab6 G4abb@G4ab6) (set! G4c75@G4ab5@&syntax-rcd G4ab5@&syntax-rcd) (set! G4c74@G4ab3@&syntax-rtd G4ab3@&syntax-rtd) (set! G4c73@G4ab1@syntax-violation-subform G4ab1@syntax-violation-subform) (set! G4c72@G4aaf@syntax-violation-form G4aaf@syntax-violation-form) (set! G4c71@G4aad@syntax-violation? G4aad@syntax-violation?) (set! G4c70@G4aab@G4a98 G4aab@G4a98) (set! G4c6f@G4aa9@G4a97 G4aa9@G4a97) (set! G4c6e@G4aa7@make-syntax-violation G4aa7@make-syntax-violation) (set! G4c6d@G4aa5@p? G4aa5@p?) (set! G4c6c@G4aa2@G4a9a G4aa2@G4a9a) (set! G4c6b@G4aa0@G4a9b G4aa0@G4a9b) (set! G4c6a@G4a9e@G4a99 G4a9e@G4a99) (set! G4c69@G4a96@&lexical-rcd G4a96@&lexical-rcd) (set! G4c68@G4a94@&lexical-rtd G4a94@&lexical-rtd) (set! G4c67@G4a92@lexical-violation? G4a92@lexical-violation?) (set! G4c66@G4a90@make-lexical-violation G4a90@make-lexical-violation) (set! G4c65@G4a8e@p? G4a8e@p?) (set! G4c64@G4a8b@G4a83 G4a8b@G4a83) (set! G4c63@G4a89@G4a84 G4a89@G4a84) (set! G4c62@G4a87@G4a82 G4a87@G4a82) (set! G4c61@G4a81@&implementation-restriction-rcd G4a81@&implementation-restriction-rcd) (set! G4c60@G4a7f@&implementation-restriction-rtd G4a7f@&implementation-restriction-rtd) (set! G4c5f@G4a7d@implementation-restriction-violation? G4a7d@implementation-restriction-violation?) (set! G4c5e@G4a7b@make-implementation-restriction-violation G4a7b@make-implementation-restriction-violation) (set! G4c5d@G4a79@p? G4a79@p?) (set! G4c5c@G4a76@G4a6e G4a76@G4a6e) (set! G4c5b@G4a74@G4a6f G4a74@G4a6f) (set! G4c5a@G4a72@G4a6d G4a72@G4a6d) (set! G4c59@G4a6c@&non-continuable-rcd G4a6c@&non-continuable-rcd) (set! G4c58@G4a6a@&non-continuable-rtd G4a6a@&non-continuable-rtd) (set! G4c57@G4a68@non-continuable-violation? G4a68@non-continuable-violation?) (set! G4c56@G4a66@make-non-continuable-violation G4a66@make-non-continuable-violation) (set! G4c55@G4a64@p? G4a64@p?) (set! G4c54@G4a61@G4a59 G4a61@G4a59) (set! G4c53@G4a5f@G4a5a G4a5f@G4a5a) (set! G4c52@G4a5d@G4a58 G4a5d@G4a58) (set! G4c51@G4a57@&who-rcd G4a57@&who-rcd) (set! G4c50@G4a55@&who-rtd G4a55@&who-rtd) (set! G4c4f@G4a53@condition-who G4a53@condition-who) (set! G4c4e@G4a51@who-condition? G4a51@who-condition?) (set! G4c4d@G4a4f@G4a3e G4a4f@G4a3e) (set! G4c4c@G4a4d@make-who-condition G4a4d@make-who-condition) (set! G4c4b@G4a4b@p? G4a4b@p?) (set! G4c4a@G4a48@G4a40 G4a48@G4a40) (set! G4c49@G4a46@G4a41 G4a46@G4a41) (set! G4c48@G4a44@G4a3f G4a44@G4a3f) (set! G4c47@G4a3d@&irritants-rcd G4a3d@&irritants-rcd) (set! G4c46@G4a3b@&irritants-rtd G4a3b@&irritants-rtd) (set! G4c45@G4a39@condition-irritants G4a39@condition-irritants) (set! G4c44@G4a37@irritants-condition? G4a37@irritants-condition?) (set! G4c43@G4a35@G4a24 G4a35@G4a24) (set! G4c42@G4a33@make-irritants-condition G4a33@make-irritants-condition) (set! G4c41@G4a31@p? G4a31@p?) (set! G4c40@G4a2e@G4a26 G4a2e@G4a26) (set! G4c3f@G4a2c@G4a27 G4a2c@G4a27) (set! G4c3e@G4a2a@G4a25 G4a2a@G4a25) (set! G4c3d@G4a23@&assertion-rcd G4a23@&assertion-rcd) (set! G4c3c@G4a21@&assertion-rtd G4a21@&assertion-rtd) (set! G4c3b@G4a1f@assertion-violation? G4a1f@assertion-violation?) (set! G4c3a@G4a1d@make-assertion-violation G4a1d@make-assertion-violation) (set! G4c39@G4a1b@p? G4a1b@p?) (set! G4c38@G4a18@G4a10 G4a18@G4a10) (set! G4c37@G4a16@G4a11 G4a16@G4a11) (set! G4c36@G4a14@G4a0f G4a14@G4a0f) (set! G4c35@G4a0e@&violation-rcd G4a0e@&violation-rcd) (set! G4c34@G4a0c@&violation-rtd G4a0c@&violation-rtd) (set! G4c33@G4a0a@violation? G4a0a@violation?) (set! G4c32@G4a08@make-violation G4a08@make-violation) (set! G4c31@G4a06@p? G4a06@p?) (set! G4c30@G4a03@G49fb G4a03@G49fb) (set! G4c2f@G4a01@G49fc G4a01@G49fc) (set! G4c2e@G49ff@G49fa G49ff@G49fa) (set! G4c2d@G49f9@&error-rcd G49f9@&error-rcd) (set! G4c2c@G49f7@&error-rtd G49f7@&error-rtd) (set! G4c2b@G49f5@error? G49f5@error?) (set! G4c2a@G49f3@make-error G49f3@make-error) (set! G4c29@G49f1@p? G49f1@p?) (set! G4c28@G49ee@G49e6 G49ee@G49e6) (set! G4c27@G49ec@G49e7 G49ec@G49e7) (set! G4c26@G49ea@G49e5 G49ea@G49e5) (set! G4c25@G49e4@&serious-rcd G49e4@&serious-rcd) (set! G4c24@G49e2@&serious-rtd G49e2@&serious-rtd) (set! G4c23@G49e0@serious-condition? G49e0@serious-condition?) (set! G4c22@G49de@make-serious-condition G49de@make-serious-condition) (set! G4c21@G49dc@p? G49dc@p?) (set! G4c20@G49d9@G49d1 G49d9@G49d1) (set! G4c1f@G49d7@G49d2 G49d7@G49d2) (set! G4c1e@G49d5@G49d0 G49d5@G49d0) (set! G4c1d@G49cf@&warning-rcd G49cf@&warning-rcd) (set! G4c1c@G49cd@&warning-rtd G49cd@&warning-rtd) (set! G4c1b@G49cb@warning? G49cb@warning?) (set! G4c1a@G49c9@make-warning G49c9@make-warning) (set! G4c19@G49c7@p? G49c7@p?) (set! G4c18@G49c4@G49bc G49c4@G49bc) (set! G4c17@G49c2@G49bd G49c2@G49bd) (set! G4c16@G49c0@G49bb G49c0@G49bb) (set! G4c15@G49ba@&message-rcd G49ba@&message-rcd) (set! G4c14@G49b8@&message-rtd G49b8@&message-rtd) (set! G4c13@G49b6@condition-message G49b6@condition-message) (set! G4c12@G49b4@message-condition? G49b4@message-condition?) (set! G4c11@G49b2@G49a1 G49b2@G49a1) (set! G4c10@G49b0@make-message-condition G49b0@make-message-condition) (set! G4c0f@G49ae@p? G49ae@p?) (set! G4c0e@G49ab@G49a3 G49ab@G49a3) (set! G4c0d@G49a9@G49a4 G49a9@G49a4) (set! G4c0c@G49a7@G49a2 G49a7@G49a2) (set! G4c0b@G495d@&condition-rcd G495d@&condition-rcd) (set! G4c0a@G495b@&condition-rtd G495b@&condition-rtd) (set! G4c09@G4959@make-&condition G4959@make-&condition) (set! G4c08@G4957@&condition? G4957@&condition?) (set! G4c07@G4954@G494c G4954@G494c) (set! G4c06@G4952@G494d G4952@G494d) (set! G4c05@G4950@G494b G4950@G494b)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2945@G28fa@current-primitive-locations (lambda (G50d3@x) ((lambda (G50d5@t) (if G50d5@t (cdr G50d5@t) '#f)) (assq G50d3@x '((&no-nans-rcd . G4cf5@G4c04@&no-nans-rcd) (&no-nans-rtd . G4cf4@G4c02@&no-nans-rtd) (&no-infinities-rcd . G4ced@G4bef@&no-infinities-rcd) (&no-infinities-rtd . G4cec@G4bed@&no-infinities-rtd) (&i/o-encoding-rcd . G4ce5@G4bda@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4ce4@G4bd8@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4cdb@G4bc0@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4cda@G4bbe@&i/o-decoding-rtd) (&i/o-port-rcd . G4cd3@G4bab@&i/o-port-rcd) (&i/o-port-rtd . G4cd2@G4ba9@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cc9@G4b91@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cc8@G4b8f@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cc1@G4b7c@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cc0@G4b7a@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cb9@G4b67@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cb8@G4b65@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4cb1@G4b52@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4cb0@G4b50@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4ca9@G4b3d@&i/o-filename-rcd) (&i/o-filename-rtd . G4ca8@G4b3b@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4c9f@G4b23@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4c9e@G4b21@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4c95@G4b09@&i/o-write-rcd) (&i/o-write-rtd . G4c94@G4b07@&i/o-write-rtd) (&i/o-read-rcd . G4c8d@G4af4@&i/o-read-rcd) (&i/o-read-rtd . G4c8c@G4af2@&i/o-read-rtd) (&i/o-rcd . G4c85@G4adf@&i/o-rcd) (&i/o-rtd . G4c84@G4add@&i/o-rtd) (&undefined-rcd . G4c7d@G4aca@&undefined-rcd) (&undefined-rtd . G4c7c@G4ac8@&undefined-rtd) (&syntax-rcd . G4c75@G4ab5@&syntax-rcd) (&syntax-rtd . G4c74@G4ab3@&syntax-rtd) (&lexical-rcd . G4c69@G4a96@&lexical-rcd) (&lexical-rtd . G4c68@G4a94@&lexical-rtd) (&implementation-restriction-rcd . G4c61@G4a81@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c60@G4a7f@&implementation-restriction-rtd) (&non-continuable-rcd . G4c59@G4a6c@&non-continuable-rcd) (&non-continuable-rtd . G4c58@G4a6a@&non-continuable-rtd) (&who-rcd . G4c51@G4a57@&who-rcd) (&who-rtd . G4c50@G4a55@&who-rtd) (&irritants-rcd . G4c47@G4a3d@&irritants-rcd) (&irritants-rtd . G4c46@G4a3b@&irritants-rtd) (&assertion-rcd . G4c3d@G4a23@&assertion-rcd) (&assertion-rtd . G4c3c@G4a21@&assertion-rtd) (&violation-rcd . G4c35@G4a0e@&violation-rcd) (&violation-rtd . G4c34@G4a0c@&violation-rtd) (&error-rcd . G4c2d@G49f9@&error-rcd) (&error-rtd . G4c2c@G49f7@&error-rtd) (&serious-rcd . G4c25@G49e4@&serious-rcd) (&serious-rtd . G4c24@G49e2@&serious-rtd) (&warning-rcd . G4c1d@G49cf@&warning-rcd) (&warning-rtd . G4c1c@G49cd@&warning-rtd) (&message-rcd . G4c15@G49ba@&message-rcd) (&message-rtd . G4c14@G49b8@&message-rtd) (&condition-rcd . G4c0b@G495d@&condition-rcd) (&condition-rtd . G4c0a@G495b@&condition-rtd) (syntax-error . G493d@G303e@syntax-error) (syntax-dispatch . G48d1@G2f57@syntax-dispatch) (load . G4dc7@G4d0b@load) (interaction-environment . G4945@G304e@interaction-environment) (make-parameter . G28f4@G282a@make-parameter) (make-variable-transformer . G488f@G2d92@make-variable-transformer) (identifier? . G4940@G3044@identifier?) (generate-temporaries . G4936@G3030@generate-temporaries) (free-identifier=? . G4937@G3032@free-identifier=?) (syntax->datum . G4942@G3048@syntax->datum) (datum->syntax . G4941@G3046@datum->syntax) (bound-identifier=? . G4938@G3034@bound-identifier=?) (make-i/o-write-error . G4c92@G4b03@make-i/o-write-error) (make-i/o-read-error . G4c8a@G4aee@make-i/o-read-error) (make-i/o-port-error . G4cce@G4ba1@make-i/o-port-error) (make-i/o-invalid-position-error . G4c9a@G4b19@make-i/o-invalid-position-error) (make-i/o-filename-error . G4ca4@G4b33@make-i/o-filename-error) (make-i/o-file-protection-error . G4cae@G4b4c@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cb6@G4b61@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cc6@G4b8b@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cbe@G4b76@make-i/o-file-already-exists-error) (make-i/o-error . G4c82@G4ad9@make-i/o-error) (make-i/o-encoding-error . G4ce0@G4bd0@make-i/o-encoding-error) (make-i/o-decoding-error . G4cd8@G4bba@make-i/o-decoding-error) (i/o-write-error? . G4c93@G4b05@i/o-write-error?) (i/o-read-error? . G4c8b@G4af0@i/o-read-error?) (i/o-port-error? . G4cd0@G4ba5@i/o-port-error?) (i/o-invalid-position-error? . G4c9c@G4b1d@i/o-invalid-position-error?) (i/o-filename-error? . G4ca6@G4b37@i/o-filename-error?) (i/o-file-protection-error? . G4caf@G4b4e@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cb7@G4b63@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cc7@G4b8d@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cbf@G4b78@i/o-file-already-exists-error?) (i/o-error? . G4c83@G4adb@i/o-error?) (i/o-error-position . G4c9d@G4b1f@i/o-error-position) (i/o-error-port . G4cd1@G4ba7@i/o-error-port) (i/o-error-filename . G4ca7@G4b39@i/o-error-filename) (i/o-encoding-error? . G4ce2@G4bd4@i/o-encoding-error?) (i/o-encoding-error-char . G4ce3@G4bd6@i/o-encoding-error-char) (i/o-decoding-error? . G4cd9@G4bbc@i/o-decoding-error?) (scheme-report-environment . G492d@G301e@scheme-report-environment) (null-environment . G492c@G301c@null-environment) (command-line . G4dc4@G4d05@command-line) (eval . G492f@G3022@eval) (environment . G492b@G301a@environment) (who-condition? . G4c4e@G4a51@who-condition?) (warning? . G4c1b@G49cb@warning?) (violation? . G4c33@G4a0a@violation?) (undefined-violation? . G4c7b@G4ac6@undefined-violation?) (syntax-violation? . G4c71@G4aad@syntax-violation?) (syntax-violation-subform . G4c73@G4ab1@syntax-violation-subform) (syntax-violation-form . G4c72@G4aaf@syntax-violation-form) (syntax-violation . G493f@G3042@syntax-violation) (serious-condition? . G4c23@G49e0@serious-condition?) (non-continuable-violation? . G4c57@G4a68@non-continuable-violation?) (message-condition? . G4c12@G49b4@message-condition?) (make-who-condition . G4c4c@G4a4d@make-who-condition) (make-warning . G4c1a@G49c9@make-warning) (make-violation . G4c32@G4a08@make-violation) (make-undefined-violation . G4c7a@G4ac4@make-undefined-violation) (make-syntax-violation . G4c6e@G4aa7@make-syntax-violation) (make-serious-condition . G4c22@G49de@make-serious-condition) (make-non-continuable-violation . G4c56@G4a66@make-non-continuable-violation) (make-message-condition . G4c10@G49b0@make-message-condition) (make-lexical-violation . G4c66@G4a90@make-lexical-violation) (make-irritants-condition . G4c42@G4a33@make-irritants-condition) (make-implementation-restriction-violation . G4c5e@G4a7b@make-implementation-restriction-violation) (make-error . G4c2a@G49f3@make-error) (make-assertion-violation . G4c3a@G4a1d@make-assertion-violation) (lexical-violation? . G4c67@G4a92@lexical-violation?) (irritants-condition? . G4c44@G4a37@irritants-condition?) (implementation-restriction-violation? . G4c5f@G4a7d@implementation-restriction-violation?) (error? . G4c2b@G49f5@error?) (condition-who . G4c4f@G4a53@condition-who) (condition-message . G4c13@G49b6@condition-message) (condition-irritants . G4c45@G4a39@condition-irritants) (assertion-violation? . G4c3b@G4a1f@assertion-violation?) (no-nans-violation? . G4cf3@G4c00@no-nans-violation?) (no-infinities-violation? . G4ceb@G4beb@no-infinities-violation?) (make-no-nans-violation . G4cf2@G4bfe@make-no-nans-violation) (make-no-infinities-violation . G4cea@G4be9@make-no-infinities-violation)))))) (G2b6d@G2a12@install-library 'G50af '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G5084) (format . G507f) (string-split . G5075) (call-process . G506f) (set-current-directory! . G506b) (expand-path . G506a) (current-directory . G5069) (%spawn . G5068) (%waitpid . G5067) (%ffi-supported? . G5066) (%ffi-pointer-ref . G5065) (%ffi-pointer->string . G5064) (%ffi-call->string-or-zero . G5063) (%ffi-call->void* . G5062) (%ffi-call->void . G5061) (%ffi-call->int . G5060) (%ffi-lookup . G505f) (%ffi-open . G505e) (%fork . G505d) (%pipe . G505c) (p . G505b) (string-upcase . G504d) (string-titlecase . G504c) (string-normalize-nfkd . G504b) (string-normalize-nfkc . G504a) (string-normalize-nfd . G5049) (string-normalize-nfc . G5048) (string-foldcase . G5047) (string-downcase . G5046) (string-ci>? . G5045) (string-ci>=? . G5044) (string-ci=? . G5043) (string-ci<? . G5042) (string-ci<=? . G5041) (char-whitespace? . G5040) (char-upper-case? . G503f) (char-title-case? . G503e) (char-numeric? . G503d) (char-lower-case? . G503c) (char-general-category . G503b) (char-upcase . G503a) (char-titlecase . G5039) (char-foldcase . G5038) (char-downcase . G5037) (char-ci>? . G5036) (char-ci>=? . G5035) (char-ci=? . G5034) (char-ci<? . G5033) (char-ci<=? . G5032) (char-alphabetic? . G5031) (make-variable-transformer . G2d91) (identifier? . G3043) (generate-temporaries . G302f) (free-identifier=? . G3031) (syntax->datum . G3047) (datum->syntax . G3045) (bound-identifier=? . G3033) (record-type-descriptor? . G5030) (record-predicate . G502f) (record-mutator . G502e) (record-constructor . G502d) (record-accessor . G502c) (make-record-type-descriptor . G502b) (make-record-constructor-descriptor . G502a) (record? . G5029) (record-type-uid . G5028) (record-type-sealed? . G5027) (record-type-parent . G5026) (record-type-opaque? . G5025) (record-type-name . G5024) (record-type-generative? . G5023) (record-type-field-names . G5022) (record-rtd . G5021) (record-field-mutable? . G5020) (delete-file . G501f) (file-exists? . G501e) (vector-sort! . G501d) (vector-sort . G501c) (list-sort . G501b) (symbol-hash . G501a) (string-ci-hash . G5019) (string-hash . G5018) (equal-hash . G5017) (hashtable-equivalence-function . G5016) (make-hashtable . G5015) (hashtable-hash-function . G5014) (make-eqv-hashtable . G5013) (make-eq-hashtable . G5012) (hashtable? . G5011) (hashtable-update! . G5010) (hashtable-size . G500f) (hashtable-set! . G500e) (hashtable-ref . G500d) (hashtable-mutable? . G500c) (hashtable-keys . G500b) (hashtable-entries . G500a) (hashtable-delete! . G5009) (hashtable-copy . G5008) (hashtable-contains? . G5007) (hashtable-clear! . G5006) (call-with-output-file . G5005) (call-with-input-file . G5004) (write-char . G5003) (write . G5002) (with-output-to-file . G5001) (with-input-from-file . G5000) (read-char . G4fff) (read . G4ffe) (peek-char . G4ffd) (open-output-file . G4ffc) (open-input-file . G4ffb) (newline . G4ffa) (display . G4ff9) (close-output-port . G4ff8) (close-input-port . G4ff7) (eof-object? . G4ff6) (eof-object . G4ff5) (current-error-port . G4ff4) (current-output-port . G4ff3) (current-input-port . G4ff2) (output-port? . G4ff1) (input-port? . G4ff0) (utf-8-codec . G4fef) (utf-16-codec . G4fee) (transcoder-error-handling-mode . G4fed) (transcoder-eol-style . G4fec) (transcoder-codec . G4feb) (transcoded-port . G4fea) (textual-port? . G4fe9) (string->bytevector . G4fe8) (standard-output-port . G4fe7) (standard-input-port . G4fe6) (standard-error-port . G4fe5) (set-port-position! . G4fe4) (put-u8 . G4fe3) (put-string . G4fe2) (put-datum . G4fe1) (put-char . G4fe0) (put-bytevector . G4fdf) (port? . G4fde) (port-transcoder . G4fdd) (port-position . G4fdc) (port-has-set-port-position!? . G4fdb) (port-has-port-position? . G4fda) (port-eof? . G4fd9) (output-port-buffer-mode . G4fd8) (open-string-output-port . G4fd7) (open-string-input-port . G4fd6) (open-file-output-port . G4fd5) (open-file-input/output-port . G4fd4) (open-file-input-port . G4fd3) (open-bytevector-output-port . G4fd2) (open-bytevector-input-port . G4fd1) (native-transcoder . G4fd0) (native-eol-style . G4fcf) (make-transcoder . G4fce) (latin-1-codec . G4fcd) (make-i/o-write-error . G4b02) (make-i/o-read-error . G4aed) (make-i/o-port-error . G4ba0) (make-i/o-invalid-position-error . G4b18) (make-i/o-filename-error . G4b32) (make-i/o-file-protection-error . G4b4b) (make-i/o-file-is-read-only-error . G4b60) (make-i/o-file-does-not-exist-error . G4b8a) (make-i/o-file-already-exists-error . G4b75) (make-i/o-error . G4ad8) (make-i/o-encoding-error . G4bcf) (make-i/o-decoding-error . G4bb9) (make-custom-textual-output-port . G4fcc) (make-custom-textual-input/output-port . G4fcb) (make-custom-textual-input-port . G4fca) (make-custom-binary-output-port . G4fc9) (make-custom-binary-input/output-port . G4fc8) (make-custom-binary-input-port . G4fc7) (make-bytevector . G4fc6) (lookahead-u8 . G4fc5) (lookahead-char . G4fc4) (i/o-write-error? . G4b04) (i/o-read-error? . G4aef) (i/o-port-error? . G4ba4) (i/o-invalid-position-error? . G4b1c) (i/o-filename-error? . G4b36) (i/o-file-protection-error? . G4b4d) (i/o-file-is-read-only-error? . G4b62) (i/o-file-does-not-exist-error? . G4b8c) (i/o-file-already-exists-error? . G4b77) (i/o-error? . G4ada) (i/o-error-position . G4b1e) (i/o-error-port . G4ba6) (i/o-error-filename . G4b38) (i/o-encoding-error? . G4bd3) (i/o-encoding-error-char . G4bd5) (i/o-decoding-error? . G4bbb) (get-u8 . G4fc3) (get-string-n! . G4fc2) (get-string-n . G4fc1) (get-string-all . G4fc0) (get-line . G4fbf) (get-datum . G4fbe) (get-char . G4fbd) (get-bytevector-some . G4fbc) (get-bytevector-n! . G4fbb) (get-bytevector-n . G4fba) (get-bytevector-all . G4fb9) (flush-output-port . G4fb8) (close-port . G4fb7) (exit . G4faf) (command-line . G4d04) (string-fill! . G4fae) (string-set! . G4fad) (set-cdr! . G4fac) (set-car! . G4fab) (remove . G4faa) (remv . G4fa9) (remp . G4fa8) (remq . G4fa7) (partition . G4fa6) (memv . G4fa5) (memq . G4fa4) (memp . G4fa3) (member . G4fa2) (exists . G4fa1) (for-all . G4fa0) (fold-right . G4f9f) (fold-left . G4f9e) (find . G4f9d) (filter . G4f9c) (cons* . G4f9b) (assv . G4f9a) (assq . G4f99) (assp . G4f98) (assoc . G4f97) (call-with-string-output-port . G4f96) (call-with-port . G4f95) (call-with-bytevector-output-port . G4f94) (bytevector->string . G4f93) (buffer-mode? . G4f92) (binary-port? . G4f91) (with-exception-handler . G4f90) (raise-continuable . G4f8f) (raise . G4f8e) (eval . G3021) (environment . G3019) (make-enumeration . G4f8d) (enum-set=? . G4f8c) (enum-set-universe . G4f8b) (enum-set-union . G4f8a) (enum-set-subset? . G4f89) (enum-set-projection . G4f88) (enum-set-member? . G4f87) (enum-set-intersection . G4f86) (enum-set-indexer . G4f85) (enum-set-difference . G4f84) (enum-set-constructor . G4f83) (enum-set-complement . G4f82) (enum-set->list . G4f81) (who-condition? . G4a50) (warning? . G49ca) (violation? . G4a09) (undefined-violation? . G4ac5) (syntax-violation? . G4aac) (syntax-violation-subform . G4ab0) (syntax-violation-form . G4aae) (syntax-violation . G3041) (simple-conditions . G4f80) (serious-condition? . G49df) (non-continuable-violation? . G4a67) (message-condition? . G49b3) (make-who-condition . G4a4c) (make-warning . G49c8) (make-violation . G4a07) (make-undefined-violation . G4ac3) (make-syntax-violation . G4aa6) (make-serious-condition . G49dd) (make-non-continuable-violation . G4a65) (make-message-condition . G49af) (make-lexical-violation . G4a8f) (make-irritants-condition . G4a32) (make-implementation-restriction-violation . G4a7a) (make-error . G49f2) (make-assertion-violation . G4a1c) (lexical-violation? . G4a91) (irritants-condition? . G4a36) (implementation-restriction-violation? . G4a7c) (error? . G49f4) (condition-who . G4a52) (condition-predicate . G4f7f) (condition-message . G49b5) (condition-irritants . G4a38) (condition-accessor . G4f7e) (condition . G4f7d) (assertion-violation? . G4a1e) (condition? . G4f7c) (utf32->string . G4f7b) (utf16->string . G4f7a) (utf8->string . G4f79) (uint-list->bytevector . G4f78) (u8-list->bytevector . G4f77) (string->utf8 . G4f76) (string->utf32 . G4f75) (string->utf16 . G4f74) (sint-list->bytevector . G4f73) (native-endianness . G4f72) (bytevector? . G4f71) (bytevector=? . G4f70) (bytevector-uint-set! . G4f6f) (bytevector-uint-ref . G4f6e) (bytevector-u8-set! . G4f6d) (bytevector-u8-ref . G4f6c) (bytevector-u64-set! . G4f6b) (bytevector-u64-ref . G4f6a) (bytevector-u64-native-set! . G4f69) (bytevector-u64-native-ref . G4f68) (bytevector-u32-set! . G4f67) (bytevector-u32-ref . G4f66) (bytevector-u32-native-set! . G4f65) (bytevector-u32-native-ref . G4f64) (bytevector-u16-set! . G4f63) (bytevector-u16-ref . G4f62) (bytevector-u16-native-set! . G4f61) (bytevector-u16-native-ref . G4f60) (bytevector-sint-set! . G4f5f) (bytevector-sint-ref . G4f5e) (bytevector-s8-set! . G4f5d) (bytevector-s8-ref . G4f5c) (bytevector-s64-set! . G4f5b) (bytevector-s64-ref . G4f5a) (bytevector-s64-native-set! . G4f59) (bytevector-s64-native-ref . G4f58) (bytevector-s32-set! . G4f57) (bytevector-s32-ref . G4f56) (bytevector-s32-native-set! . G4f55) (bytevector-s32-native-ref . G4f54) (bytevector-s16-set! . G4f53) (bytevector-s16-ref . G4f52) (bytevector-s16-native-set! . G4f51) (bytevector-s16-native-ref . G4f50) (bytevector-length . G4f4f) (bytevector-ieee-single-ref . G4f4e) (bytevector-ieee-single-set! . G4f4d) (bytevector-ieee-single-native-set! . G4f4c) (bytevector-ieee-single-native-ref . G4f4b) (bytevector-ieee-double-set! . G4f4a) (bytevector-ieee-double-ref . G4f49) (bytevector-ieee-double-native-set! . G4f48) (bytevector-ieee-double-native-ref . G4f47) (bytevector-fill! . G4f46) (bytevector-copy! . G4f45) (bytevector-copy . G4f44) (bytevector->uint-list . G4f43) (bytevector->u8-list . G4f42) (bytevector->sint-list . G4f41) (no-nans-violation? . G4bff) (no-infinities-violation? . G4bea) (make-no-nans-violation . G4bfd) (make-no-infinities-violation . G4be8) (real->flonum . G4f40) (flzero? . G4f3f) (fltruncate . G4f3e) (fltan . G4f3d) (flsqrt . G4f3c) (flsin . G4f3b) (flround . G4f3a) (flpositive? . G4f39) (flonum? . G4f38) (flodd? . G4f37) (flnumerator . G4f36) (flnegative? . G4f35) (flnan? . G4f34) (flmod0 . G4f33) (flmod . G4f32) (flmin . G4f31) (flmax . G4f30) (fllog . G4f2f) (flinteger? . G4f2e) (flinfinite? . G4f2d) (flfloor . G4f2c) (flfinite? . G4f2b) (flexpt . G4f2a) (flexp . G4f29) (fleven? . G4f28) (fldiv0-and-mod0 . G4f27) (fldiv0 . G4f26) (fldiv-and-mod . G4f25) (fldiv . G4f24) (fldenominator . G4f23) (flcos . G4f22) (flceiling . G4f21) (flatan . G4f20) (flasin . G4f1f) (flacos . G4f1e) (flabs . G4f1d) (fl>? . G4f1c) (fl>=? . G4f1b) (fl=? . G4f1a) (fl<? . G4f19) (fl<=? . G4f18) (fl/ . G4f17) (fl- . G4f16) (fl+ . G4f15) (fl* . G4f14) (fixnum->flonum . G4f13) (fxzero? . G4f12) (fxxor . G4f11) (fxrotate-bit-field . G4f10) (fxreverse-bit-field . G4f0f) (fxpositive? . G4f0e) (fxodd? . G4f0d) (fxnot . G4f0c) (fxnegative? . G4f0b) (fxmod0 . G4f0a) (fxmod . G4f09) (fxmin . G4f08) (fxmax . G4f07) (fxlength . G4f06) (fxior . G4f05) (fxif . G4f04) (fxfirst-bit-set . G4f03) (fxeven? . G4f02) (fxdiv0-and-mod0 . G4f01) (fxdiv0 . G4f00) (fxdiv-and-mod . G4eff) (fxdiv . G4efe) (fxcopy-bit-field . G4efd) (fxcopy-bit . G4efc) (fxbit-set? . G4efb) (fxbit-field . G4efa) (fxbit-count . G4ef9) (fxarithmetic-shift-right . G4ef8) (fxarithmetic-shift-left . G4ef7) (fxarithmetic-shift . G4ef6) (fxand . G4ef5) (fx>? . G4ef4) (fx>=? . G4ef3) (fx=? . G4ef2) (fx<? . G4ef1) (fx<=? . G4ef0) (fx-/carry . G4eef) (fx- . G4eee) (fx+/carry . G4eed) (fx+ . G4eec) (fx*/carry . G4eeb) (fx* . G4eea) (greatest-fixnum . G4ee9) (least-fixnum . G4ee8) (fixnum-width . G4ee7) (fixnum? . G4ee6) (bitwise-rotate-bit-field . G4ee5) (bitwise-reverse-bit-field . G4ee4) (bitwise-length . G4ee3) (bitwise-if . G4ee2) (bitwise-first-bit-set . G4ee1) (bitwise-copy-bit-field . G4ee0) (bitwise-copy-bit . G4edf) (bitwise-bit-set? . G4ede) (bitwise-bit-field . G4edd) (bitwise-bit-count . G4edc) (bitwise-xor . G4edb) (bitwise-ior . G4eda) (bitwise-and . G4ed9) (bitwise-not . G4ed8) (bitwise-arithmetic-shift-right . G4ed7) (bitwise-arithmetic-shift-left . G4ed6) (bitwise-arithmetic-shift . G4ed5) (zero? . G4ed4) (vector? . G4ed3) (vector-set! . G4ed2) (vector-ref . G4ed1) (vector-map . G4ed0) (vector-length . G4ecf) (vector-for-each . G4ece) (vector-fill! . G4ecd) (vector->list . G4ecc) (vector . G4ecb) (values . G4eca) (truncate . G4ec9) (tan . G4ec8) (symbol? . G4ec7) (symbol=? . G4ec6) (symbol->string . G4ec5) (substring . G4ec4) (string? . G4ec3) (string>? . G4ec2) (string>=? . G4ec1) (string=? . G4ec0) (string<? . G4ebf) (string<=? . G4ebe) (string-ref . G4ebd) (string-length . G4ebc) (string-for-each . G4ebb) (string-copy . G4eba) (string-append . G4eb9) (string->symbol . G4eb8) (string->number . G4eb7) (string->list . G4eb6) (string . G4eb5) (sqrt . G4eb4) (sin . G4eb3) (round . G4eb2) (reverse . G4eb1) (real? . G4eb0) (real-valued? . G4eaf) (real-part . G4eae) (rationalize . G4ead) (rational? . G4eac) (rational-valued? . G4eab) (procedure? . G4eaa) (positive? . G4ea9) (pair? . G4ea8) (odd? . G4ea7) (numerator . G4ea6) (number? . G4ea5) (number->string . G4ea4) (null? . G4ea3) (not . G4ea2) (negative? . G4ea1) (nan? . G4ea0) (min . G4e9f) (max . G4e9e) (map . G4e9d) (make-vector . G4e9c) (make-string . G4e9b) (make-rectangular . G4e9a) (make-polar . G4e99) (magnitude . G4e98) (log . G4e97) (list? . G4e96) (list-tail . G4e95) (list-ref . G4e94) (list->vector . G4e93) (list->string . G4e92) (list . G4e91) (length . G4e90) (lcm . G4e8f) (integer? . G4e8e) (integer-valued? . G4e8d) (integer->char . G4e8c) (infinite? . G4e8b) (inexact? . G4e8a) (inexact . G4e89) (imag-part . G4e88) (gcd . G4e87) (for-each . G4e86) (floor . G4e85) (finite? . G4e84) (expt . G4e83) (exp . G4e82) (exact? . G4e81) (exact-integer-sqrt . G4e80) (exact . G4e7f) (even? . G4e7e) (error . G4e7d) (eqv? . G4e7c) (equal? . G4e7b) (eq? . G4e7a) (dynamic-wind . G4e79) (div0-and-mod0 . G4e78) (mod0 . G4e77) (div0 . G4e76) (div-and-mod . G4e75) (mod . G4e74) (div . G4e73) (denominator . G4e72) (cos . G4e71) (cons . G4e70) (complex? . G4e6f) (char? . G4e6e) (char>? . G4e6d) (char>=? . G4e6c) (char=? . G4e6b) (char<? . G4e6a) (char<=? . G4e69) (char->integer . G4e68) (ceiling . G4e67) (call-with-values . G4e66) (call/cc . G4e65) (call-with-current-continuation . G4e64) (cddddr . G4e63) (cdddar . G4e62) (cddadr . G4e61) (cddaar . G4e60) (cdaddr . G4e5f) (cdadar . G4e5e) (cdaadr . G4e5d) (cdaaar . G4e5c) (cadddr . G4e5b) (caddar . G4e5a) (cadadr . G4e59) (cadaar . G4e58) (caaddr . G4e57) (caadar . G4e56) (caaadr . G4e55) (caaaar . G4e54) (cdddr . G4e53) (cddar . G4e52) (cdadr . G4e51) (cdaar . G4e50) (caddr . G4e4f) (cadar . G4e4e) (caadr . G4e4d) (caaar . G4e4c) (cddr . G4e4b) (cdar . G4e4a) (cadr . G4e49) (caar . G4e48) (cdr . G4e47) (car . G4e46) (boolean? . G4e45) (boolean=? . G4e44) (atan . G4e43) (assertion-violation . G4e42) (asin . G4e41) (apply . G4e40) (append . G4e3f) (angle . G4e3e) (acos . G4e3d) (abs . G4e3c) (/ . G4e3b) (* . G4e3a) (- . G4e39) (+ . G4e38) (>= . G4e37) (> . G4e36) (= . G4e35) (<= . G4e34) (< . G4e33) (library . G4e32) (&no-nans . G4e31) (&no-infinities . G4e30) (&i/o-encoding . G4e2f) (&i/o-decoding . G4e2e) (&i/o-port . G4e2d) (&i/o-file-does-not-exist . G4e2c) (&i/o-file-already-exists . G4e2b) (&i/o-file-is-read-only . G4e2a) (&i/o-file-protection . G4e29) (&i/o-filename . G4e28) (&i/o-invalid-position . G4e27) (&i/o-write . G4e26) (&i/o-read . G4e25) (&i/o . G4e24) (&undefined . G4e23) (&syntax . G4e22) (&lexical . G4e21) (&implementation-restriction . G4e20) (&non-continuable . G4e1f) (&who . G4e1e) (&irritants . G4e1d) (&assertion . G4e1c) (&violation . G4e1b) (&error . G4e1a) (&serious . G4e19) (&warning . G4e18) (&message . G4e17) (&condition . G4e16) (define-condition-type . G4e15) (define-enumeration . G4e14) (define-record-type . G4e13) (parent-rtd . G4e12) (nongenerative . G4e11) (opaque . G4e10) (sealed . G4e0f) (protocol . G4e0e) (parent . G4e0d) (immutable . G4e0c) (mutable . G4e0b) (fields . G4e0a) (error-handling-mode . G4e09) (file-options . G4e08) (buffer-mode . G4e07) (eol-style . G4e06) (guard . G4e05) (unsyntax-splicing . G4e02) (unsyntax . G4e01) (unquote-splicing . G4e00) (unquote . G4dff) (_ . G4dfe) (else . G4dfd) (=> . G4dfc) (... . G4dfb) (assert . G4dfa) (endianness . G4df9) (do . G4df6) (cond . G4df5) (let* . G4df4) (let . G4df3) (let*-values . G4df2) (let-values . G4df1) (identifier-syntax . G4df0) (with-syntax . G4def) (quasisyntax . G4dee) (quasiquote . G4ded) (syntax-rules . G4dec) (include . G4deb) (record-constructor-descriptor . G4de9) (record-type-descriptor . G4de8) (case . G4de7) (unless . G4de5) (when . G4de4) (or . G4de3) (and . G4de2) (if . G4de1) (letrec* . G4de0) (letrec . G4ddf) (case-lambda . G4ddd) (lambda . G4ddc) (syntax . G4ddb) (syntax-case . G4dda) (quote . G4dd9) (letrec-syntax . G4dd7) (let-syntax . G4dd6) (set! . G4dd5) (import . G4dd4) (begin . G4dd3) (define-syntax . G4dd1) (define . G4dd0)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50b0 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fb0) (unquote-splicing . G4e00) (unquote . G4dff) (_ . G4dfe) (else . G4dfd) (=> . G4dfc) (... . G4dfb) (delay . G4df8) (do . G4df6) (cond . G4df5) (let* . G4df4) (let . G4df3) (quasiquote . G4ded) (syntax-rules . G4dec) (case . G4de7) (or . G4de3) (and . G4de2) (if . G4de1) (letrec . G4ddf) (lambda . G4ddc) (quote . G4dd9) (letrec-syntax . G4dd7) (let-syntax . G4dd6) (set! . G4dd5) (begin . G4dd3) (define-syntax . G4dd1) (define . G4dd0)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50b1 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5045) (string-ci>=? . G5044) (string-ci=? . G5043) (string-ci<? . G5042) (string-ci<=? . G5041) (char-whitespace? . G5040) (char-upper-case? . G503f) (char-numeric? . G503d) (char-lower-case? . G503c) (char-upcase . G503a) (char-downcase . G5037) (char-ci>? . G5036) (char-ci>=? . G5035) (char-ci=? . G5034) (char-ci<? . G5033) (char-ci<=? . G5032) (char-alphabetic? . G5031) (call-with-output-file . G5005) (call-with-input-file . G5004) (write-char . G5003) (write . G5002) (with-output-to-file . G5001) (with-input-from-file . G5000) (read-char . G4fff) (read . G4ffe) (peek-char . G4ffd) (open-output-file . G4ffc) (open-input-file . G4ffb) (newline . G4ffa) (display . G4ff9) (close-output-port . G4ff8) (close-input-port . G4ff7) (eof-object . G4ff5) (current-output-port . G4ff3) (current-input-port . G4ff2) (output-port? . G4ff1) (input-port? . G4ff0) (scheme-report-environment . G301d) (quotient . G4fb6) (null-environment . G301b) (remainder . G4fb5) (modulo . G4fb4) (inexact->exact . G4fb3) (force . G4fb2) (exact->inexact . G4fb1) (make-promise . G4fb0) (string-fill! . G4fae) (string-set! . G4fad) (set-cdr! . G4fac) (set-car! . G4fab) (memv . G4fa5) (memq . G4fa4) (member . G4fa2) (assv . G4f9a) (assq . G4f99) (assoc . G4f97) (eval . G3021) (zero? . G4ed4) (vector? . G4ed3) (vector-set! . G4ed2) (vector-ref . G4ed1) (vector-length . G4ecf) (vector-fill! . G4ecd) (vector->list . G4ecc) (vector . G4ecb) (values . G4eca) (truncate . G4ec9) (tan . G4ec8) (symbol? . G4ec7) (symbol->string . G4ec5) (substring . G4ec4) (string? . G4ec3) (string>? . G4ec2) (string>=? . G4ec1) (string=? . G4ec0) (string<? . G4ebf) (string<=? . G4ebe) (string-ref . G4ebd) (string-length . G4ebc) (string-copy . G4eba) (string-append . G4eb9) (string->symbol . G4eb8) (string->number . G4eb7) (string->list . G4eb6) (string . G4eb5) (sqrt . G4eb4) (sin . G4eb3) (round . G4eb2) (reverse . G4eb1) (real? . G4eb0) (real-part . G4eae) (rationalize . G4ead) (rational? . G4eac) (procedure? . G4eaa) (positive? . G4ea9) (pair? . G4ea8) (odd? . G4ea7) (numerator . G4ea6) (number? . G4ea5) (number->string . G4ea4) (not . G4ea2) (negative? . G4ea1) (min . G4e9f) (max . G4e9e) (map . G4e9d) (make-vector . G4e9c) (make-string . G4e9b) (make-rectangular . G4e9a) (make-polar . G4e99) (magnitude . G4e98) (log . G4e97) (list? . G4e96) (list-tail . G4e95) (list-ref . G4e94) (list->vector . G4e93) (list->string . G4e92) (list . G4e91) (length . G4e90) (lcm . G4e8f) (integer? . G4e8e) (integer->char . G4e8c) (inexact? . G4e8a) (imag-part . G4e88) (gcd . G4e87) (for-each . G4e86) (floor . G4e85) (expt . G4e83) (exp . G4e82) (exact? . G4e81) (even? . G4e7e) (eqv? . G4e7c) (equal? . G4e7b) (eq? . G4e7a) (dynamic-wind . G4e79) (denominator . G4e72) (cos . G4e71) (cons . G4e70) (complex? . G4e6f) (char? . G4e6e) (char>? . G4e6d) (char>=? . G4e6c) (char=? . G4e6b) (char<? . G4e6a) (char<=? . G4e69) (char->integer . G4e68) (ceiling . G4e67) (call-with-values . G4e66) (call-with-current-continuation . G4e64) (cddddr . G4e63) (cdddar . G4e62) (cddadr . G4e61) (cddaar . G4e60) (cdaddr . G4e5f) (cdadar . G4e5e) (cdaadr . G4e5d) (cdaaar . G4e5c) (cadddr . G4e5b) (caddar . G4e5a) (cadadr . G4e59) (cadaar . G4e58) (caaddr . G4e57) (caadar . G4e56) (caaadr . G4e55) (caaaar . G4e54) (cdddr . G4e53) (cddar . G4e52) (cdadr . G4e51) (cdaar . G4e50) (caddr . G4e4f) (cadar . G4e4e) (caadr . G4e4d) (caaar . G4e4c) (cddr . G4e4b) (cdar . G4e4a) (cadr . G4e49) (caar . G4e48) (cdr . G4e47) (car . G4e46) (boolean? . G4e45) (atan . G4e43) (asin . G4e41) (apply . G4e40) (append . G4e3f) (angle . G4e3e) (acos . G4e3d) (abs . G4e3c) (/ . G4e3b) (* . G4e3a) (- . G4e39) (+ . G4e38) (>= . G4e37) (> . G4e36) (= . G4e35) (<= . G4e34) (< . G4e33) (unquote-splicing . G4e00) (unquote . G4dff) (else . G4dfd) (=> . G4dfc) (... . G4dfb) (delay . G4df8) (do . G4df6) (cond . G4df5) (let* . G4df4) (let . G4df3) (quasiquote . G4ded) (syntax-rules . G4dec) (case . G4de7) (or . G4de3) (and . G4de2) (if . G4de1) (letrec . G4ddf) (lambda . G4ddc) (quote . G4dd9) (letrec-syntax . G4dd7) (let-syntax . G4dd6) (set! . G4dd5) (begin . G4dd3) (define-syntax . G4dd1) (define . G4dd0)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50b2 '(psyntax modules) '() '() '() '() '((module . G4dd2)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50b3 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50b4 '(rnrs) '(6) '() '() '() '((regexp? . G50a7) (string-upcase . G504d) (string-titlecase . G504c) (string-normalize-nfkd . G504b) (string-normalize-nfkc . G504a) (string-normalize-nfd . G5049) (string-normalize-nfc . G5048) (string-foldcase . G5047) (string-downcase . G5046) (string-ci>? . G5045) (string-ci>=? . G5044) (string-ci=? . G5043) (string-ci<? . G5042) (string-ci<=? . G5041) (char-whitespace? . G5040) (char-upper-case? . G503f) (char-title-case? . G503e) (char-numeric? . G503d) (char-lower-case? . G503c) (char-general-category . G503b) (char-upcase . G503a) (char-titlecase . G5039) (char-foldcase . G5038) (char-downcase . G5037) (char-ci>? . G5036) (char-ci>=? . G5035) (char-ci=? . G5034) (char-ci<? . G5033) (char-ci<=? . G5032) (char-alphabetic? . G5031) (make-variable-transformer . G2d91) (identifier? . G3043) (generate-temporaries . G302f) (free-identifier=? . G3031) (syntax->datum . G3047) (datum->syntax . G3045) (bound-identifier=? . G3033) (record-type-descriptor? . G5030) (record-predicate . G502f) (record-mutator . G502e) (record-constructor . G502d) (record-accessor . G502c) (make-record-type-descriptor . G502b) (make-record-constructor-descriptor . G502a) (record? . G5029) (record-type-uid . G5028) (record-type-sealed? . G5027) (record-type-parent . G5026) (record-type-opaque? . G5025) (record-type-name . G5024) (record-type-generative? . G5023) (record-type-field-names . G5022) (record-rtd . G5021) (record-field-mutable? . G5020) (delete-file . G501f) (file-exists? . G501e) (vector-sort! . G501d) (vector-sort . G501c) (list-sort . G501b) (symbol-hash . G501a) (string-ci-hash . G5019) (string-hash . G5018) (equal-hash . G5017) (hashtable-equivalence-function . G5016) (make-hashtable . G5015) (hashtable-hash-function . G5014) (make-eqv-hashtable . G5013) (make-eq-hashtable . G5012) (hashtable? . G5011) (hashtable-update! . G5010) (hashtable-size . G500f) (hashtable-set! . G500e) (hashtable-ref . G500d) (hashtable-mutable? . G500c) (hashtable-keys . G500b) (hashtable-entries . G500a) (hashtable-delete! . G5009) (hashtable-copy . G5008) (hashtable-contains? . G5007) (hashtable-clear! . G5006) (call-with-output-file . G5005) (call-with-input-file . G5004) (write-char . G5003) (write . G5002) (with-output-to-file . G5001) (with-input-from-file . G5000) (read-char . G4fff) (read . G4ffe) (peek-char . G4ffd) (open-output-file . G4ffc) (open-input-file . G4ffb) (newline . G4ffa) (display . G4ff9) (close-output-port . G4ff8) (close-input-port . G4ff7) (eof-object? . G4ff6) (eof-object . G4ff5) (current-error-port . G4ff4) (current-output-port . G4ff3) (current-input-port . G4ff2) (output-port? . G4ff1) (input-port? . G4ff0) (utf-8-codec . G4fef) (utf-16-codec . G4fee) (transcoder-error-handling-mode . G4fed) (transcoder-eol-style . G4fec) (transcoder-codec . G4feb) (transcoded-port . G4fea) (textual-port? . G4fe9) (string->bytevector . G4fe8) (standard-output-port . G4fe7) (standard-input-port . G4fe6) (standard-error-port . G4fe5) (set-port-position! . G4fe4) (put-u8 . G4fe3) (put-string . G4fe2) (put-datum . G4fe1) (put-char . G4fe0) (put-bytevector . G4fdf) (port? . G4fde) (port-transcoder . G4fdd) (port-position . G4fdc) (port-has-set-port-position!? . G4fdb) (port-has-port-position? . G4fda) (port-eof? . G4fd9) (output-port-buffer-mode . G4fd8) (open-string-output-port . G4fd7) (open-string-input-port . G4fd6) (open-file-output-port . G4fd5) (open-file-input/output-port . G4fd4) (open-file-input-port . G4fd3) (open-bytevector-output-port . G4fd2) (open-bytevector-input-port . G4fd1) (native-transcoder . G4fd0) (native-eol-style . G4fcf) (make-transcoder . G4fce) (latin-1-codec . G4fcd) (make-i/o-write-error . G4b02) (make-i/o-read-error . G4aed) (make-i/o-port-error . G4ba0) (make-i/o-invalid-position-error . G4b18) (make-i/o-filename-error . G4b32) (make-i/o-file-protection-error . G4b4b) (make-i/o-file-is-read-only-error . G4b60) (make-i/o-file-does-not-exist-error . G4b8a) (make-i/o-file-already-exists-error . G4b75) (make-i/o-error . G4ad8) (make-i/o-encoding-error . G4bcf) (make-i/o-decoding-error . G4bb9) (make-custom-textual-output-port . G4fcc) (make-custom-textual-input/output-port . G4fcb) (make-custom-textual-input-port . G4fca) (make-custom-binary-output-port . G4fc9) (make-custom-binary-input/output-port . G4fc8) (make-custom-binary-input-port . G4fc7) (make-bytevector . G4fc6) (lookahead-u8 . G4fc5) (lookahead-char . G4fc4) (i/o-write-error? . G4b04) (i/o-read-error? . G4aef) (i/o-port-error? . G4ba4) (i/o-invalid-position-error? . G4b1c) (i/o-filename-error? . G4b36) (i/o-file-protection-error? . G4b4d) (i/o-file-is-read-only-error? . G4b62) (i/o-file-does-not-exist-error? . G4b8c) (i/o-file-already-exists-error? . G4b77) (i/o-error? . G4ada) (i/o-error-position . G4b1e) (i/o-error-port . G4ba6) (i/o-error-filename . G4b38) (i/o-encoding-error? . G4bd3) (i/o-encoding-error-char . G4bd5) (i/o-decoding-error? . G4bbb) (get-u8 . G4fc3) (get-string-n! . G4fc2) (get-string-n . G4fc1) (get-string-all . G4fc0) (get-line . G4fbf) (get-datum . G4fbe) (get-char . G4fbd) (get-bytevector-some . G4fbc) (get-bytevector-n! . G4fbb) (get-bytevector-n . G4fba) (get-bytevector-all . G4fb9) (flush-output-port . G4fb8) (close-port . G4fb7) (exit . G4faf) (command-line . G4d04) (remove . G4faa) (remv . G4fa9) (remp . G4fa8) (remq . G4fa7) (partition . G4fa6) (memv . G4fa5) (memq . G4fa4) (memp . G4fa3) (member . G4fa2) (exists . G4fa1) (for-all . G4fa0) (fold-right . G4f9f) (fold-left . G4f9e) (find . G4f9d) (filter . G4f9c) (cons* . G4f9b) (assv . G4f9a) (assq . G4f99) (assp . G4f98) (assoc . G4f97) (call-with-string-output-port . G4f96) (call-with-port . G4f95) (call-with-bytevector-output-port . G4f94) (bytevector->string . G4f93) (buffer-mode? . G4f92) (binary-port? . G4f91) (with-exception-handler . G4f90) (raise-continuable . G4f8f) (raise . G4f8e) (make-enumeration . G4f8d) (enum-set=? . G4f8c) (enum-set-universe . G4f8b) (enum-set-union . G4f8a) (enum-set-subset? . G4f89) (enum-set-projection . G4f88) (enum-set-member? . G4f87) (enum-set-intersection . G4f86) (enum-set-indexer . G4f85) (enum-set-difference . G4f84) (enum-set-constructor . G4f83) (enum-set-complement . G4f82) (enum-set->list . G4f81) (who-condition? . G4a50) (warning? . G49ca) (violation? . G4a09) (undefined-violation? . G4ac5) (syntax-violation? . G4aac) (syntax-violation-subform . G4ab0) (syntax-violation-form . G4aae) (syntax-violation . G3041) (simple-conditions . G4f80) (serious-condition? . G49df) (non-continuable-violation? . G4a67) (message-condition? . G49b3) (make-who-condition . G4a4c) (make-warning . G49c8) (make-violation . G4a07) (make-undefined-violation . G4ac3) (make-syntax-violation . G4aa6) (make-serious-condition . G49dd) (make-non-continuable-violation . G4a65) (make-message-condition . G49af) (make-lexical-violation . G4a8f) (make-irritants-condition . G4a32) (make-implementation-restriction-violation . G4a7a) (make-error . G49f2) (make-assertion-violation . G4a1c) (lexical-violation? . G4a91) (irritants-condition? . G4a36) (implementation-restriction-violation? . G4a7c) (error? . G49f4) (condition-who . G4a52) (condition-predicate . G4f7f) (condition-message . G49b5) (condition-irritants . G4a38) (condition-accessor . G4f7e) (condition . G4f7d) (assertion-violation? . G4a1e) (condition? . G4f7c) (utf32->string . G4f7b) (utf16->string . G4f7a) (utf8->string . G4f79) (uint-list->bytevector . G4f78) (u8-list->bytevector . G4f77) (string->utf8 . G4f76) (string->utf32 . G4f75) (string->utf16 . G4f74) (sint-list->bytevector . G4f73) (native-endianness . G4f72) (bytevector? . G4f71) (bytevector=? . G4f70) (bytevector-uint-set! . G4f6f) (bytevector-uint-ref . G4f6e) (bytevector-u8-set! . G4f6d) (bytevector-u8-ref . G4f6c) (bytevector-u64-set! . G4f6b) (bytevector-u64-ref . G4f6a) (bytevector-u64-native-set! . G4f69) (bytevector-u64-native-ref . G4f68) (bytevector-u32-set! . G4f67) (bytevector-u32-ref . G4f66) (bytevector-u32-native-set! . G4f65) (bytevector-u32-native-ref . G4f64) (bytevector-u16-set! . G4f63) (bytevector-u16-ref . G4f62) (bytevector-u16-native-set! . G4f61) (bytevector-u16-native-ref . G4f60) (bytevector-sint-set! . G4f5f) (bytevector-sint-ref . G4f5e) (bytevector-s8-set! . G4f5d) (bytevector-s8-ref . G4f5c) (bytevector-s64-set! . G4f5b) (bytevector-s64-ref . G4f5a) (bytevector-s64-native-set! . G4f59) (bytevector-s64-native-ref . G4f58) (bytevector-s32-set! . G4f57) (bytevector-s32-ref . G4f56) (bytevector-s32-native-set! . G4f55) (bytevector-s32-native-ref . G4f54) (bytevector-s16-set! . G4f53) (bytevector-s16-ref . G4f52) (bytevector-s16-native-set! . G4f51) (bytevector-s16-native-ref . G4f50) (bytevector-length . G4f4f) (bytevector-ieee-single-ref . G4f4e) (bytevector-ieee-single-set! . G4f4d) (bytevector-ieee-single-native-set! . G4f4c) (bytevector-ieee-single-native-ref . G4f4b) (bytevector-ieee-double-set! . G4f4a) (bytevector-ieee-double-ref . G4f49) (bytevector-ieee-double-native-set! . G4f48) (bytevector-ieee-double-native-ref . G4f47) (bytevector-fill! . G4f46) (bytevector-copy! . G4f45) (bytevector-copy . G4f44) (bytevector->uint-list . G4f43) (bytevector->u8-list . G4f42) (bytevector->sint-list . G4f41) (no-nans-violation? . G4bff) (no-infinities-violation? . G4bea) (make-no-nans-violation . G4bfd) (make-no-infinities-violation . G4be8) (real->flonum . G4f40) (flzero? . G4f3f) (fltruncate . G4f3e) (fltan . G4f3d) (flsqrt . G4f3c) (flsin . G4f3b) (flround . G4f3a) (flpositive? . G4f39) (flonum? . G4f38) (flodd? . G4f37) (flnumerator . G4f36) (flnegative? . G4f35) (flnan? . G4f34) (flmod0 . G4f33) (flmod . G4f32) (flmin . G4f31) (flmax . G4f30) (fllog . G4f2f) (flinteger? . G4f2e) (flinfinite? . G4f2d) (flfloor . G4f2c) (flfinite? . G4f2b) (flexpt . G4f2a) (flexp . G4f29) (fleven? . G4f28) (fldiv0-and-mod0 . G4f27) (fldiv0 . G4f26) (fldiv-and-mod . G4f25) (fldiv . G4f24) (fldenominator . G4f23) (flcos . G4f22) (flceiling . G4f21) (flatan . G4f20) (flasin . G4f1f) (flacos . G4f1e) (flabs . G4f1d) (fl>? . G4f1c) (fl>=? . G4f1b) (fl=? . G4f1a) (fl<? . G4f19) (fl<=? . G4f18) (fl/ . G4f17) (fl- . G4f16) (fl+ . G4f15) (fl* . G4f14) (fixnum->flonum . G4f13) (fxzero? . G4f12) (fxxor . G4f11) (fxrotate-bit-field . G4f10) (fxreverse-bit-field . G4f0f) (fxpositive? . G4f0e) (fxodd? . G4f0d) (fxnot . G4f0c) (fxnegative? . G4f0b) (fxmod0 . G4f0a) (fxmod . G4f09) (fxmin . G4f08) (fxmax . G4f07) (fxlength . G4f06) (fxior . G4f05) (fxif . G4f04) (fxfirst-bit-set . G4f03) (fxeven? . G4f02) (fxdiv0-and-mod0 . G4f01) (fxdiv0 . G4f00) (fxdiv-and-mod . G4eff) (fxdiv . G4efe) (fxcopy-bit-field . G4efd) (fxcopy-bit . G4efc) (fxbit-set? . G4efb) (fxbit-field . G4efa) (fxbit-count . G4ef9) (fxarithmetic-shift-right . G4ef8) (fxarithmetic-shift-left . G4ef7) (fxarithmetic-shift . G4ef6) (fxand . G4ef5) (fx>? . G4ef4) (fx>=? . G4ef3) (fx=? . G4ef2) (fx<? . G4ef1) (fx<=? . G4ef0) (fx-/carry . G4eef) (fx- . G4eee) (fx+/carry . G4eed) (fx+ . G4eec) (fx*/carry . G4eeb) (fx* . G4eea) (greatest-fixnum . G4ee9) (least-fixnum . G4ee8) (fixnum-width . G4ee7) (fixnum? . G4ee6) (bitwise-rotate-bit-field . G4ee5) (bitwise-reverse-bit-field . G4ee4) (bitwise-length . G4ee3) (bitwise-if . G4ee2) (bitwise-first-bit-set . G4ee1) (bitwise-copy-bit-field . G4ee0) (bitwise-copy-bit . G4edf) (bitwise-bit-set? . G4ede) (bitwise-bit-field . G4edd) (bitwise-bit-count . G4edc) (bitwise-xor . G4edb) (bitwise-ior . G4eda) (bitwise-and . G4ed9) (bitwise-not . G4ed8) (bitwise-arithmetic-shift-right . G4ed7) (bitwise-arithmetic-shift-left . G4ed6) (bitwise-arithmetic-shift . G4ed5) (zero? . G4ed4) (vector? . G4ed3) (vector-set! . G4ed2) (vector-ref . G4ed1) (vector-map . G4ed0) (vector-length . G4ecf) (vector-for-each . G4ece) (vector-fill! . G4ecd) (vector->list . G4ecc) (vector . G4ecb) (values . G4eca) (truncate . G4ec9) (tan . G4ec8) (symbol? . G4ec7) (symbol=? . G4ec6) (symbol->string . G4ec5) (substring . G4ec4) (string? . G4ec3) (string>? . G4ec2) (string>=? . G4ec1) (string=? . G4ec0) (string<? . G4ebf) (string<=? . G4ebe) (string-ref . G4ebd) (string-length . G4ebc) (string-for-each . G4ebb) (string-copy . G4eba) (string-append . G4eb9) (string->symbol . G4eb8) (string->number . G4eb7) (string->list . G4eb6) (string . G4eb5) (sqrt . G4eb4) (sin . G4eb3) (round . G4eb2) (reverse . G4eb1) (real? . G4eb0) (real-valued? . G4eaf) (real-part . G4eae) (rationalize . G4ead) (rational? . G4eac) (rational-valued? . G4eab) (procedure? . G4eaa) (positive? . G4ea9) (pair? . G4ea8) (odd? . G4ea7) (numerator . G4ea6) (number? . G4ea5) (number->string . G4ea4) (null? . G4ea3) (not . G4ea2) (negative? . G4ea1) (nan? . G4ea0) (min . G4e9f) (max . G4e9e) (map . G4e9d) (make-vector . G4e9c) (make-string . G4e9b) (make-rectangular . G4e9a) (make-polar . G4e99) (magnitude . G4e98) (log . G4e97) (list? . G4e96) (list-tail . G4e95) (list-ref . G4e94) (list->vector . G4e93) (list->string . G4e92) (list . G4e91) (length . G4e90) (lcm . G4e8f) (integer? . G4e8e) (integer-valued? . G4e8d) (integer->char . G4e8c) (infinite? . G4e8b) (inexact? . G4e8a) (inexact . G4e89) (imag-part . G4e88) (gcd . G4e87) (for-each . G4e86) (floor . G4e85) (finite? . G4e84) (expt . G4e83) (exp . G4e82) (exact? . G4e81) (exact-integer-sqrt . G4e80) (exact . G4e7f) (even? . G4e7e) (error . G4e7d) (eqv? . G4e7c) (equal? . G4e7b) (eq? . G4e7a) (dynamic-wind . G4e79) (div0-and-mod0 . G4e78) (mod0 . G4e77) (div0 . G4e76) (div-and-mod . G4e75) (mod . G4e74) (div . G4e73) (denominator . G4e72) (cos . G4e71) (cons . G4e70) (complex? . G4e6f) (char? . G4e6e) (char>? . G4e6d) (char>=? . G4e6c) (char=? . G4e6b) (char<? . G4e6a) (char<=? . G4e69) (char->integer . G4e68) (ceiling . G4e67) (call-with-values . G4e66) (call/cc . G4e65) (call-with-current-continuation . G4e64) (cddddr . G4e63) (cdddar . G4e62) (cddadr . G4e61) (cddaar . G4e60) (cdaddr . G4e5f) (cdadar . G4e5e) (cdaadr . G4e5d) (cdaaar . G4e5c) (cadddr . G4e5b) (caddar . G4e5a) (cadadr . G4e59) (cadaar . G4e58) (caaddr . G4e57) (caadar . G4e56) (caaadr . G4e55) (caaaar . G4e54) (cdddr . G4e53) (cddar . G4e52) (cdadr . G4e51) (cdaar . G4e50) (caddr . G4e4f) (cadar . G4e4e) (caadr . G4e4d) (caaar . G4e4c) (cddr . G4e4b) (cdar . G4e4a) (cadr . G4e49) (caar . G4e48) (cdr . G4e47) (car . G4e46) (boolean? . G4e45) (boolean=? . G4e44) (atan . G4e43) (assertion-violation . G4e42) (asin . G4e41) (apply . G4e40) (append . G4e3f) (angle . G4e3e) (acos . G4e3d) (abs . G4e3c) (/ . G4e3b) (* . G4e3a) (- . G4e39) (+ . G4e38) (>= . G4e37) (> . G4e36) (= . G4e35) (<= . G4e34) (< . G4e33) (&no-nans . G4e31) (&no-infinities . G4e30) (&i/o-encoding . G4e2f) (&i/o-decoding . G4e2e) (&i/o-port . G4e2d) (&i/o-file-does-not-exist . G4e2c) (&i/o-file-already-exists . G4e2b) (&i/o-file-is-read-only . G4e2a) (&i/o-file-protection . G4e29) (&i/o-filename . G4e28) (&i/o-invalid-position . G4e27) (&i/o-write . G4e26) (&i/o-read . G4e25) (&i/o . G4e24) (&undefined . G4e23) (&syntax . G4e22) (&lexical . G4e21) (&implementation-restriction . G4e20) (&non-continuable . G4e1f) (&who . G4e1e) (&irritants . G4e1d) (&assertion . G4e1c) (&violation . G4e1b) (&error . G4e1a) (&serious . G4e19) (&warning . G4e18) (&message . G4e17) (&condition . G4e16) (define-condition-type . G4e15) (define-enumeration . G4e14) (define-record-type . G4e13) (parent-rtd . G4e12) (nongenerative . G4e11) (opaque . G4e10) (sealed . G4e0f) (protocol . G4e0e) (parent . G4e0d) (immutable . G4e0c) (mutable . G4e0b) (fields . G4e0a) (error-handling-mode . G4e09) (file-options . G4e08) (buffer-mode . G4e07) (eol-style . G4e06) (guard . G4e05) (unsyntax-splicing . G4e02) (unsyntax . G4e01) (unquote-splicing . G4e00) (unquote . G4dff) (_ . G4dfe) (else . G4dfd) (=> . G4dfc) (... . G4dfb) (assert . G4dfa) (endianness . G4df9) (do . G4df6) (cond . G4df5) (let* . G4df4) (let . G4df3) (let*-values . G4df2) (let-values . G4df1) (identifier-syntax . G4df0) (with-syntax . G4def) (quasisyntax . G4dee) (quasiquote . G4ded) (syntax-rules . G4dec) (record-constructor-descriptor . G4de9) (record-type-descriptor . G4de8) (case . G4de7) (unless . G4de5) (when . G4de4) (or . G4de3) (and . G4de2) (if . G4de1) (letrec* . G4de0) (letrec . G4ddf) (case-lambda . G4ddd) (lambda . G4ddc) (syntax . G4ddb) (syntax-case . G4dda) (quote . G4dd9) (letrec-syntax . G4dd7) (let-syntax . G4dd6) (set! . G4dd5) (begin . G4dd3) (define-syntax . G4dd1) (define . G4dd0)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50b5 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G301d) (quotient . G4fb6) (null-environment . G301b) (remainder . G4fb5) (modulo . G4fb4) (inexact->exact . G4fb3) (force . G4fb2) (exact->inexact . G4fb1) (make-promise . G4fb0) (delay . G4df8)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50b6 '(rnrs control) '(6) '() '() '() '((do . G4df6) (unless . G4de5) (when . G4de4) (case-lambda . G4ddd)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50b7 '(rnrs eval) '(6) '() '() '() '((eval . G3021) (environment . G3019)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50b8 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fac) (set-car! . G4fab)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50b9 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fae) (string-set! . G4fad)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50ba '(rnrs programs) '(6) '() '() '() '((exit . G4faf) (command-line . G4d04)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50bb '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d91) (identifier? . G3043) (generate-temporaries . G302f) (free-identifier=? . G3031) (syntax->datum . G3047) (datum->syntax . G3045) (bound-identifier=? . G3033) (syntax-violation . G3041) (unsyntax-splicing . G4e02) (unsyntax . G4e01) (_ . G4dfe) (... . G4dfb) (with-syntax . G4def) (quasisyntax . G4dee) (syntax . G4ddb) (syntax-case . G4dda)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50bc '(rnrs files) '(6) '() '() '() '((delete-file . G501f) (file-exists? . G501e) (make-i/o-write-error . G4b02) (make-i/o-read-error . G4aed) (make-i/o-port-error . G4ba0) (make-i/o-invalid-position-error . G4b18) (make-i/o-filename-error . G4b32) (make-i/o-file-protection-error . G4b4b) (make-i/o-file-is-read-only-error . G4b60) (make-i/o-file-does-not-exist-error . G4b8a) (make-i/o-file-already-exists-error . G4b75) (make-i/o-error . G4ad8) (i/o-write-error? . G4b04) (i/o-read-error? . G4aef) (i/o-port-error? . G4ba4) (i/o-invalid-position-error? . G4b1c) (i/o-filename-error? . G4b36) (i/o-file-protection-error? . G4b4d) (i/o-file-is-read-only-error? . G4b62) (i/o-file-does-not-exist-error? . G4b8c) (i/o-file-already-exists-error? . G4b77) (i/o-error? . G4ada) (i/o-error-position . G4b1e) (i/o-error-port . G4ba6) (i/o-error-filename . G4b38) (&i/o-port . G4e2d) (&i/o-file-does-not-exist . G4e2c) (&i/o-file-already-exists . G4e2b) (&i/o-file-is-read-only . G4e2a) (&i/o-file-protection . G4e29) (&i/o-filename . G4e28) (&i/o-invalid-position . G4e27) (&i/o-write . G4e26) (&i/o-read . G4e25) (&i/o . G4e24)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50bd '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G501d) (vector-sort . G501c) (list-sort . G501b)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50be '(rnrs base) '(6) '() '() '() '((zero? . G4ed4) (vector? . G4ed3) (vector-set! . G4ed2) (vector-ref . G4ed1) (vector-map . G4ed0) (vector-length . G4ecf) (vector-for-each . G4ece) (vector-fill! . G4ecd) (vector->list . G4ecc) (vector . G4ecb) (values . G4eca) (truncate . G4ec9) (tan . G4ec8) (symbol? . G4ec7) (symbol=? . G4ec6) (symbol->string . G4ec5) (substring . G4ec4) (string? . G4ec3) (string>? . G4ec2) (string>=? . G4ec1) (string=? . G4ec0) (string<? . G4ebf) (string<=? . G4ebe) (string-ref . G4ebd) (string-length . G4ebc) (string-for-each . G4ebb) (string-copy . G4eba) (string-append . G4eb9) (string->symbol . G4eb8) (string->number . G4eb7) (string->list . G4eb6) (string . G4eb5) (sqrt . G4eb4) (sin . G4eb3) (round . G4eb2) (reverse . G4eb1) (real? . G4eb0) (real-valued? . G4eaf) (real-part . G4eae) (rationalize . G4ead) (rational? . G4eac) (rational-valued? . G4eab) (procedure? . G4eaa) (positive? . G4ea9) (pair? . G4ea8) (odd? . G4ea7) (numerator . G4ea6) (number? . G4ea5) (number->string . G4ea4) (null? . G4ea3) (not . G4ea2) (negative? . G4ea1) (nan? . G4ea0) (min . G4e9f) (max . G4e9e) (map . G4e9d) (make-vector . G4e9c) (make-string . G4e9b) (make-rectangular . G4e9a) (make-polar . G4e99) (magnitude . G4e98) (log . G4e97) (list? . G4e96) (list-tail . G4e95) (list-ref . G4e94) (list->vector . G4e93) (list->string . G4e92) (list . G4e91) (length . G4e90) (lcm . G4e8f) (integer? . G4e8e) (integer-valued? . G4e8d) (integer->char . G4e8c) (infinite? . G4e8b) (inexact? . G4e8a) (inexact . G4e89) (imag-part . G4e88) (gcd . G4e87) (for-each . G4e86) (floor . G4e85) (finite? . G4e84) (expt . G4e83) (exp . G4e82) (exact? . G4e81) (exact-integer-sqrt . G4e80) (exact . G4e7f) (even? . G4e7e) (error . G4e7d) (eqv? . G4e7c) (equal? . G4e7b) (eq? . G4e7a) (dynamic-wind . G4e79) (div0-and-mod0 . G4e78) (mod0 . G4e77) (div0 . G4e76) (div-and-mod . G4e75) (mod . G4e74) (div . G4e73) (denominator . G4e72) (cos . G4e71) (cons . G4e70) (complex? . G4e6f) (char? . G4e6e) (char>? . G4e6d) (char>=? . G4e6c) (char=? . G4e6b) (char<? . G4e6a) (char<=? . G4e69) (char->integer . G4e68) (ceiling . G4e67) (call-with-values . G4e66) (call/cc . G4e65) (call-with-current-continuation . G4e64) (cddddr . G4e63) (cdddar . G4e62) (cddadr . G4e61) (cddaar . G4e60) (cdaddr . G4e5f) (cdadar . G4e5e) (cdaadr . G4e5d) (cdaaar . G4e5c) (cadddr . G4e5b) (caddar . G4e5a) (cadadr . G4e59) (cadaar . G4e58) (caaddr . G4e57) (caadar . G4e56) (caaadr . G4e55) (caaaar . G4e54) (cdddr . G4e53) (cddar . G4e52) (cdadr . G4e51) (cdaar . G4e50) (caddr . G4e4f) (cadar . G4e4e) (caadr . G4e4d) (caaar . G4e4c) (cddr . G4e4b) (cdar . G4e4a) (cadr . G4e49) (caar . G4e48) (cdr . G4e47) (car . G4e46) (boolean? . G4e45) (boolean=? . G4e44) (atan . G4e43) (assertion-violation . G4e42) (asin . G4e41) (apply . G4e40) (append . G4e3f) (angle . G4e3e) (acos . G4e3d) (abs . G4e3c) (/ . G4e3b) (* . G4e3a) (- . G4e39) (+ . G4e38) (>= . G4e37) (> . G4e36) (= . G4e35) (<= . G4e34) (< . G4e33) (unquote-splicing . G4e00) (unquote . G4dff) (_ . G4dfe) (else . G4dfd) (=> . G4dfc) (... . G4dfb) (assert . G4dfa) (cond . G4df5) (let* . G4df4) (let . G4df3) (let*-values . G4df2) (let-values . G4df1) (identifier-syntax . G4df0) (quasiquote . G4ded) (syntax-rules . G4dec) (case . G4de7) (or . G4de3) (and . G4de2) (if . G4de1) (letrec* . G4de0) (letrec . G4ddf) (lambda . G4ddc) (quote . G4dd9) (letrec-syntax . G4dd7) (let-syntax . G4dd6) (set! . G4dd5) (begin . G4dd3) (define-syntax . G4dd1) (define . G4dd0)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50bf '(rnrs lists) '(6) '() '() '() '((remove . G4faa) (remv . G4fa9) (remp . G4fa8) (remq . G4fa7) (partition . G4fa6) (memv . G4fa5) (memq . G4fa4) (memp . G4fa3) (member . G4fa2) (exists . G4fa1) (for-all . G4fa0) (fold-right . G4f9f) (fold-left . G4f9e) (find . G4f9d) (filter . G4f9c) (cons* . G4f9b) (assv . G4f9a) (assq . G4f99) (assp . G4f98) (assoc . G4f97)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50c0 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5005) (call-with-input-file . G5004) (write-char . G5003) (write . G5002) (with-output-to-file . G5001) (with-input-from-file . G5000) (read-char . G4fff) (read . G4ffe) (peek-char . G4ffd) (open-output-file . G4ffc) (open-input-file . G4ffb) (newline . G4ffa) (display . G4ff9) (close-output-port . G4ff8) (close-input-port . G4ff7) (eof-object? . G4ff6) (eof-object . G4ff5) (current-error-port . G4ff4) (current-output-port . G4ff3) (current-input-port . G4ff2) (output-port? . G4ff1) (input-port? . G4ff0) (make-i/o-write-error . G4b02) (make-i/o-read-error . G4aed) (make-i/o-port-error . G4ba0) (make-i/o-invalid-position-error . G4b18) (make-i/o-filename-error . G4b32) (make-i/o-file-protection-error . G4b4b) (make-i/o-file-is-read-only-error . G4b60) (make-i/o-file-does-not-exist-error . G4b8a) (make-i/o-file-already-exists-error . G4b75) (make-i/o-error . G4ad8) (i/o-write-error? . G4b04) (i/o-read-error? . G4aef) (i/o-port-error? . G4ba4) (i/o-invalid-position-error? . G4b1c) (i/o-filename-error? . G4b36) (i/o-file-protection-error? . G4b4d) (i/o-file-is-read-only-error? . G4b62) (i/o-file-does-not-exist-error? . G4b8c) (i/o-file-already-exists-error? . G4b77) (i/o-error? . G4ada) (i/o-error-position . G4b1e) (i/o-error-port . G4ba6) (i/o-error-filename . G4b38) (&i/o-port . G4e2d) (&i/o-file-does-not-exist . G4e2c) (&i/o-file-already-exists . G4e2b) (&i/o-file-is-read-only . G4e2a) (&i/o-file-protection . G4e29) (&i/o-filename . G4e28) (&i/o-invalid-position . G4e27) (&i/o-write . G4e26) (&i/o-read . G4e25) (&i/o . G4e24)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50c1 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fc6) (utf32->string . G4f7b) (utf16->string . G4f7a) (utf8->string . G4f79) (uint-list->bytevector . G4f78) (u8-list->bytevector . G4f77) (string->utf8 . G4f76) (string->utf32 . G4f75) (string->utf16 . G4f74) (sint-list->bytevector . G4f73) (native-endianness . G4f72) (bytevector? . G4f71) (bytevector=? . G4f70) (bytevector-uint-set! . G4f6f) (bytevector-uint-ref . G4f6e) (bytevector-u8-set! . G4f6d) (bytevector-u8-ref . G4f6c) (bytevector-u64-set! . G4f6b) (bytevector-u64-ref . G4f6a) (bytevector-u64-native-set! . G4f69) (bytevector-u64-native-ref . G4f68) (bytevector-u32-set! . G4f67) (bytevector-u32-ref . G4f66) (bytevector-u32-native-set! . G4f65) (bytevector-u32-native-ref . G4f64) (bytevector-u16-set! . G4f63) (bytevector-u16-ref . G4f62) (bytevector-u16-native-set! . G4f61) (bytevector-u16-native-ref . G4f60) (bytevector-sint-set! . G4f5f) (bytevector-sint-ref . G4f5e) (bytevector-s8-set! . G4f5d) (bytevector-s8-ref . G4f5c) (bytevector-s64-set! . G4f5b) (bytevector-s64-ref . G4f5a) (bytevector-s64-native-set! . G4f59) (bytevector-s64-native-ref . G4f58) (bytevector-s32-set! . G4f57) (bytevector-s32-ref . G4f56) (bytevector-s32-native-set! . G4f55) (bytevector-s32-native-ref . G4f54) (bytevector-s16-set! . G4f53) (bytevector-s16-ref . G4f52) (bytevector-s16-native-set! . G4f51) (bytevector-s16-native-ref . G4f50) (bytevector-length . G4f4f) (bytevector-ieee-single-ref . G4f4e) (bytevector-ieee-single-set! . G4f4d) (bytevector-ieee-single-native-set! . G4f4c) (bytevector-ieee-single-native-ref . G4f4b) (bytevector-ieee-double-set! . G4f4a) (bytevector-ieee-double-ref . G4f49) (bytevector-ieee-double-native-set! . G4f48) (bytevector-ieee-double-native-ref . G4f47) (bytevector-fill! . G4f46) (bytevector-copy! . G4f45) (bytevector-copy . G4f44) (bytevector->uint-list . G4f43) (bytevector->u8-list . G4f42) (bytevector->sint-list . G4f41) (endianness . G4df9)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50c2 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G504d) (string-titlecase . G504c) (string-normalize-nfkd . G504b) (string-normalize-nfkc . G504a) (string-normalize-nfd . G5049) (string-normalize-nfc . G5048) (string-foldcase . G5047) (string-downcase . G5046) (string-ci>? . G5045) (string-ci>=? . G5044) (string-ci=? . G5043) (string-ci<? . G5042) (string-ci<=? . G5041) (char-whitespace? . G5040) (char-upper-case? . G503f) (char-title-case? . G503e) (char-numeric? . G503d) (char-lower-case? . G503c) (char-general-category . G503b) (char-upcase . G503a) (char-titlecase . G5039) (char-foldcase . G5038) (char-downcase . G5037) (char-ci>? . G5036) (char-ci>=? . G5035) (char-ci=? . G5034) (char-ci<? . G5033) (char-ci<=? . G5032) (char-alphabetic? . G5031)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50c3 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f90) (raise-continuable . G4f8f) (raise . G4f8e) (guard . G4e05) (else . G4dfd) (=> . G4dfc)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50c4 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4ee5) (bitwise-reverse-bit-field . G4ee4) (bitwise-length . G4ee3) (bitwise-if . G4ee2) (bitwise-first-bit-set . G4ee1) (bitwise-copy-bit-field . G4ee0) (bitwise-copy-bit . G4edf) (bitwise-bit-set? . G4ede) (bitwise-bit-field . G4edd) (bitwise-bit-count . G4edc) (bitwise-xor . G4edb) (bitwise-ior . G4eda) (bitwise-and . G4ed9) (bitwise-not . G4ed8) (bitwise-arithmetic-shift-right . G4ed7) (bitwise-arithmetic-shift-left . G4ed6) (bitwise-arithmetic-shift . G4ed5)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50c5 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f12) (fxxor . G4f11) (fxrotate-bit-field . G4f10) (fxreverse-bit-field . G4f0f) (fxpositive? . G4f0e) (fxodd? . G4f0d) (fxnot . G4f0c) (fxnegative? . G4f0b) (fxmod0 . G4f0a) (fxmod . G4f09) (fxmin . G4f08) (fxmax . G4f07) (fxlength . G4f06) (fxior . G4f05) (fxif . G4f04) (fxfirst-bit-set . G4f03) (fxeven? . G4f02) (fxdiv0-and-mod0 . G4f01) (fxdiv0 . G4f00) (fxdiv-and-mod . G4eff) (fxdiv . G4efe) (fxcopy-bit-field . G4efd) (fxcopy-bit . G4efc) (fxbit-set? . G4efb) (fxbit-field . G4efa) (fxbit-count . G4ef9) (fxarithmetic-shift-right . G4ef8) (fxarithmetic-shift-left . G4ef7) (fxarithmetic-shift . G4ef6) (fxand . G4ef5) (fx>? . G4ef4) (fx>=? . G4ef3) (fx=? . G4ef2) (fx<? . G4ef1) (fx<=? . G4ef0) (fx-/carry . G4eef) (fx- . G4eee) (fx+/carry . G4eed) (fx+ . G4eec) (fx*/carry . G4eeb) (fx* . G4eea) (greatest-fixnum . G4ee9) (least-fixnum . G4ee8) (fixnum-width . G4ee7) (fixnum? . G4ee6)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50c6 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4bff) (no-infinities-violation? . G4bea) (make-no-nans-violation . G4bfd) (make-no-infinities-violation . G4be8) (real->flonum . G4f40) (flzero? . G4f3f) (fltruncate . G4f3e) (fltan . G4f3d) (flsqrt . G4f3c) (flsin . G4f3b) (flround . G4f3a) (flpositive? . G4f39) (flonum? . G4f38) (flodd? . G4f37) (flnumerator . G4f36) (flnegative? . G4f35) (flnan? . G4f34) (flmod0 . G4f33) (flmod . G4f32) (flmin . G4f31) (flmax . G4f30) (fllog . G4f2f) (flinteger? . G4f2e) (flinfinite? . G4f2d) (flfloor . G4f2c) (flfinite? . G4f2b) (flexpt . G4f2a) (flexp . G4f29) (fleven? . G4f28) (fldiv0-and-mod0 . G4f27) (fldiv0 . G4f26) (fldiv-and-mod . G4f25) (fldiv . G4f24) (fldenominator . G4f23) (flcos . G4f22) (flceiling . G4f21) (flatan . G4f20) (flasin . G4f1f) (flacos . G4f1e) (flabs . G4f1d) (fl>? . G4f1c) (fl>=? . G4f1b) (fl=? . G4f1a) (fl<? . G4f19) (fl<=? . G4f18) (fl/ . G4f17) (fl- . G4f16) (fl+ . G4f15) (fl* . G4f14) (fixnum->flonum . G4f13) (&no-nans . G4e31) (&no-infinities . G4e30)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50c7 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G501a) (string-ci-hash . G5019) (string-hash . G5018) (equal-hash . G5017) (hashtable-equivalence-function . G5016) (make-hashtable . G5015) (hashtable-hash-function . G5014) (make-eqv-hashtable . G5013) (make-eq-hashtable . G5012) (hashtable? . G5011) (hashtable-update! . G5010) (hashtable-size . G500f) (hashtable-set! . G500e) (hashtable-ref . G500d) (hashtable-mutable? . G500c) (hashtable-keys . G500b) (hashtable-entries . G500a) (hashtable-delete! . G5009) (hashtable-copy . G5008) (hashtable-contains? . G5007) (hashtable-clear! . G5006)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50c8 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4ff6) (eof-object . G4ff5) (current-error-port . G4ff4) (current-output-port . G4ff3) (current-input-port . G4ff2) (output-port? . G4ff1) (input-port? . G4ff0) (utf-8-codec . G4fef) (utf-16-codec . G4fee) (transcoder-error-handling-mode . G4fed) (transcoder-eol-style . G4fec) (transcoder-codec . G4feb) (transcoded-port . G4fea) (textual-port? . G4fe9) (string->bytevector . G4fe8) (standard-output-port . G4fe7) (standard-input-port . G4fe6) (standard-error-port . G4fe5) (set-port-position! . G4fe4) (put-u8 . G4fe3) (put-string . G4fe2) (put-datum . G4fe1) (put-char . G4fe0) (put-bytevector . G4fdf) (port? . G4fde) (port-transcoder . G4fdd) (port-position . G4fdc) (port-has-set-port-position!? . G4fdb) (port-has-port-position? . G4fda) (port-eof? . G4fd9) (output-port-buffer-mode . G4fd8) (open-string-output-port . G4fd7) (open-string-input-port . G4fd6) (open-file-output-port . G4fd5) (open-file-input/output-port . G4fd4) (open-file-input-port . G4fd3) (open-bytevector-output-port . G4fd2) (open-bytevector-input-port . G4fd1) (native-transcoder . G4fd0) (native-eol-style . G4fcf) (make-transcoder . G4fce) (latin-1-codec . G4fcd) (make-i/o-write-error . G4b02) (make-i/o-read-error . G4aed) (make-i/o-port-error . G4ba0) (make-i/o-invalid-position-error . G4b18) (make-i/o-filename-error . G4b32) (make-i/o-file-protection-error . G4b4b) (make-i/o-file-is-read-only-error . G4b60) (make-i/o-file-does-not-exist-error . G4b8a) (make-i/o-file-already-exists-error . G4b75) (make-i/o-error . G4ad8) (make-i/o-encoding-error . G4bcf) (make-i/o-decoding-error . G4bb9) (make-custom-textual-output-port . G4fcc) (make-custom-textual-input/output-port . G4fcb) (make-custom-textual-input-port . G4fca) (make-custom-binary-output-port . G4fc9) (make-custom-binary-input/output-port . G4fc8) (make-custom-binary-input-port . G4fc7) (lookahead-u8 . G4fc5) (lookahead-char . G4fc4) (i/o-write-error? . G4b04) (i/o-read-error? . G4aef) (i/o-port-error? . G4ba4) (i/o-invalid-position-error? . G4b1c) (i/o-filename-error? . G4b36) (i/o-file-protection-error? . G4b4d) (i/o-file-is-read-only-error? . G4b62) (i/o-file-does-not-exist-error? . G4b8c) (i/o-file-already-exists-error? . G4b77) (i/o-error? . G4ada) (i/o-error-position . G4b1e) (i/o-error-port . G4ba6) (i/o-error-filename . G4b38) (i/o-encoding-error? . G4bd3) (i/o-encoding-error-char . G4bd5) (i/o-decoding-error? . G4bbb) (get-u8 . G4fc3) (get-string-n! . G4fc2) (get-string-n . G4fc1) (get-string-all . G4fc0) (get-line . G4fbf) (get-datum . G4fbe) (get-char . G4fbd) (get-bytevector-some . G4fbc) (get-bytevector-n! . G4fbb) (get-bytevector-n . G4fba) (get-bytevector-all . G4fb9) (flush-output-port . G4fb8) (close-port . G4fb7) (call-with-string-output-port . G4f96) (call-with-port . G4f95) (call-with-bytevector-output-port . G4f94) (bytevector->string . G4f93) (buffer-mode? . G4f92) (binary-port? . G4f91) (&i/o-encoding . G4e2f) (&i/o-decoding . G4e2e) (&i/o-port . G4e2d) (&i/o-file-does-not-exist . G4e2c) (&i/o-file-already-exists . G4e2b) (&i/o-file-is-read-only . G4e2a) (&i/o-file-protection . G4e29) (&i/o-filename . G4e28) (&i/o-invalid-position . G4e27) (&i/o-write . G4e26) (&i/o-read . G4e25) (&i/o . G4e24) (error-handling-mode . G4e09) (file-options . G4e08) (buffer-mode . G4e07) (eol-style . G4e06)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50c9 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f8d) (enum-set=? . G4f8c) (enum-set-universe . G4f8b) (enum-set-union . G4f8a) (enum-set-subset? . G4f89) (enum-set-projection . G4f88) (enum-set-member? . G4f87) (enum-set-intersection . G4f86) (enum-set-indexer . G4f85) (enum-set-difference . G4f84) (enum-set-constructor . G4f83) (enum-set-complement . G4f82) (enum-set->list . G4f81) (define-enumeration . G4e14)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50ca '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a50) (warning? . G49ca) (violation? . G4a09) (undefined-violation? . G4ac5) (syntax-violation? . G4aac) (syntax-violation-subform . G4ab0) (syntax-violation-form . G4aae) (syntax-violation . G3041) (simple-conditions . G4f80) (serious-condition? . G49df) (non-continuable-violation? . G4a67) (message-condition? . G49b3) (make-who-condition . G4a4c) (make-warning . G49c8) (make-violation . G4a07) (make-undefined-violation . G4ac3) (make-syntax-violation . G4aa6) (make-serious-condition . G49dd) (make-non-continuable-violation . G4a65) (make-message-condition . G49af) (make-lexical-violation . G4a8f) (make-irritants-condition . G4a32) (make-implementation-restriction-violation . G4a7a) (make-error . G49f2) (make-assertion-violation . G4a1c) (lexical-violation? . G4a91) (irritants-condition? . G4a36) (implementation-restriction-violation? . G4a7c) (error? . G49f4) (condition-who . G4a52) (condition-predicate . G4f7f) (condition-message . G49b5) (condition-irritants . G4a38) (condition-accessor . G4f7e) (condition . G4f7d) (assertion-violation? . G4a1e) (condition? . G4f7c) (&undefined . G4e23) (&syntax . G4e22) (&lexical . G4e21) (&implementation-restriction . G4e20) (&non-continuable . G4e1f) (&who . G4e1e) (&irritants . G4e1d) (&assertion . G4e1c) (&violation . G4e1b) (&error . G4e1a) (&serious . G4e19) (&warning . G4e18) (&message . G4e17) (&condition . G4e16) (define-condition-type . G4e15)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50cb '(rnrs records inspection) '(6) '() '() '() '((record? . G5029) (record-type-uid . G5028) (record-type-sealed? . G5027) (record-type-parent . G5026) (record-type-opaque? . G5025) (record-type-name . G5024) (record-type-generative? . G5023) (record-type-field-names . G5022) (record-rtd . G5021) (record-field-mutable? . G5020)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50cc '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G5030) (record-predicate . G502f) (record-mutator . G502e) (record-constructor . G502d) (record-accessor . G502c) (make-record-type-descriptor . G502b) (make-record-constructor-descriptor . G502a)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50cd '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e13) (parent-rtd . G4e12) (nongenerative . G4e11) (opaque . G4e10) (sealed . G4e0f) (protocol . G4e0e) (parent . G4e0d) (immutable . G4e0c) (mutable . G4e0b) (fields . G4e0a) (record-constructor-descriptor . G4de9) (record-type-descriptor . G4de8)) '() values values '#f '#f '#t '#f) (G2b6d@G2a12@install-library 'G50ce '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c03) (&no-nans-rtd . G4c01) (&no-infinities-rcd . G4bee) (&no-infinities-rtd . G4bec) (&i/o-encoding-rcd . G4bd9) (&i/o-encoding-rtd . G4bd7) (&i/o-decoding-rcd . G4bbf) (&i/o-decoding-rtd . G4bbd) (&i/o-port-rcd . G4baa) (&i/o-port-rtd . G4ba8) (&i/o-file-does-not-exist-rcd . G4b90) (&i/o-file-does-not-exist-rtd . G4b8e) (&i/o-file-already-exists-rcd . G4b7b) (&i/o-file-already-exists-rtd . G4b79) (&i/o-file-is-read-only-rcd . G4b66) (&i/o-file-is-read-only-rtd . G4b64) (&i/o-file-protection-rcd . G4b51) (&i/o-file-protection-rtd . G4b4f) (&i/o-filename-rcd . G4b3c) (&i/o-filename-rtd . G4b3a) (&i/o-invalid-position-rcd . G4b22) (&i/o-invalid-position-rtd . G4b20) (&i/o-write-rcd . G4b08) (&i/o-write-rtd . G4b06) (&i/o-read-rcd . G4af3) (&i/o-read-rtd . G4af1) (&i/o-rcd . G4ade) (&i/o-rtd . G4adc) (&undefined-rcd . G4ac9) (&undefined-rtd . G4ac7) (&syntax-rcd . G4ab4) (&syntax-rtd . G4ab2) (&lexical-rcd . G4a95) (&lexical-rtd . G4a93) (&implementation-restriction-rcd . G4a80) (&implementation-restriction-rtd . G4a7e) (&non-continuable-rcd . G4a6b) (&non-continuable-rtd . G4a69) (&who-rcd . G4a56) (&who-rtd . G4a54) (&irritants-rcd . G4a3c) (&irritants-rtd . G4a3a) (&assertion-rcd . G4a22) (&assertion-rtd . G4a20) (&violation-rcd . G4a0d) (&violation-rtd . G4a0b) (&error-rcd . G49f8) (&error-rtd . G49f6) (&serious-rcd . G49e3) (&serious-rtd . G49e1) (&warning-rcd . G49ce) (&warning-rtd . G49cc) (&message-rcd . G49b9) (&message-rtd . G49b7) (&condition-rcd . G495c) (&condition-rtd . G495a) (syntax-error . G303d) (syntax-dispatch . G2f56) (pretty-print . G50ae) (eval-core . G50ad) (set-symbol-value! . G50ac) (symbol-value . G50ab) (gensym . G50aa) (void . G50a9) (load . G4d0a) (interaction-environment . G304d) (char-ready? . G50a8) (regexp? . G50a7) (read-line . G50a6) (dotted-list? . G50a5) (circular-list? . G50a4) (proper-list? . G50a3) (circular-list . G50a2) (last . G50a1) (last-pair . G50a0) (not-pair? . G509f) (split-at! . G509e) (split-at . G509d) (list= . G509c) (list-copy . G509b) (list-tabulate . G509a) (make-list . G5099) (xcons . G5098) (tenth . G5097) (ninth . G5096) (eighth . G5095) (seventh . G5094) (sixth . G5093) (fifth . G5092) (drop-right! . G5091) (drop-right . G5090) (take-right . G508f) (take! . G508e) (drop . G508d) (take . G508c) (car+cdr . G508b) (third . G508a) (second . G5089) (first . G5088) (iota . G5087) (every . G5086) (ungensym . G5085) (alist->eq-hash-table . G5084) (assoc-ref . G5083) (alist-cons . G5082) (append-map . G5081) (print . G5080) (format . G507f) (standard-library-path . G507e) (file-newer? . G507d) (stat-mtime . G507c) (write-to-file . G507b) (file->list . G507a) (file->string . G5079) (digit->integer . G5078) (call-with-string-input-port . G5077) (call-with-string-io . G5076) (string-split . G5075) (bytevector-for-each . G5074) (string->regexp . G5073) (rxmatch . G5072) (regexp-replace-all . G5071) (hashtable-for-each . G5070) (call-process . G506f) (local-tz-offset . G506e) (microseconds . G506d) (readdir . G506c) (set-current-directory! . G506b) (expand-path . G506a) (current-directory . G5069) (%spawn . G5068) (%waitpid . G5067) (%ffi-supported? . G5066) (%ffi-pointer-ref . G5065) (%ffi-pointer->string . G5064) (%ffi-call->string-or-zero . G5063) (%ffi-call->void* . G5062) (%ffi-call->void . G5061) (%ffi-call->int . G5060) (%ffi-lookup . G505f) (%ffi-open . G505e) (%fork . G505d) (%pipe . G505c) (p . G505b) (get-environment-variables . G505a) (get-environment-variable . G5059) (get-timeofday . G5058) (get-command-line . G5057) (sys-display . G5056) (source-info . G5055) (make-compiler-instruction . G5054) (make-instruction . G5053) (set-source-info! . G5052) (bignum? . G5051) (fast-equal? . G5050) (fasl-read . G504f) (fasl-write . G504e) (make-parameter . G2829) (string-upcase . G504d) (string-titlecase . G504c) (string-normalize-nfkd . G504b) (string-normalize-nfkc . G504a) (string-normalize-nfd . G5049) (string-normalize-nfc . G5048) (string-foldcase . G5047) (string-downcase . G5046) (string-ci>? . G5045) (string-ci>=? . G5044) (string-ci=? . G5043) (string-ci<? . G5042) (string-ci<=? . G5041) (char-whitespace? . G5040) (char-upper-case? . G503f) (char-title-case? . G503e) (char-numeric? . G503d) (char-lower-case? . G503c) (char-general-category . G503b) (char-upcase . G503a) (char-titlecase . G5039) (char-foldcase . G5038) (char-downcase . G5037) (char-ci>? . G5036) (char-ci>=? . G5035) (char-ci=? . G5034) (char-ci<? . G5033) (char-ci<=? . G5032) (char-alphabetic? . G5031) (make-variable-transformer . G2d91) (identifier? . G3043) (generate-temporaries . G302f) (free-identifier=? . G3031) (syntax->datum . G3047) (datum->syntax . G3045) (bound-identifier=? . G3033) (record-type-descriptor? . G5030) (record-predicate . G502f) (record-mutator . G502e) (record-constructor . G502d) (record-accessor . G502c) (make-record-type-descriptor . G502b) (make-record-constructor-descriptor . G502a) (record? . G5029) (record-type-uid . G5028) (record-type-sealed? . G5027) (record-type-parent . G5026) (record-type-opaque? . G5025) (record-type-name . G5024) (record-type-generative? . G5023) (record-type-field-names . G5022) (record-rtd . G5021) (record-field-mutable? . G5020) (delete-file . G501f) (file-exists? . G501e) (vector-sort! . G501d) (vector-sort . G501c) (list-sort . G501b) (symbol-hash . G501a) (string-ci-hash . G5019) (string-hash . G5018) (equal-hash . G5017) (hashtable-equivalence-function . G5016) (make-hashtable . G5015) (hashtable-hash-function . G5014) (make-eqv-hashtable . G5013) (make-eq-hashtable . G5012) (hashtable? . G5011) (hashtable-update! . G5010) (hashtable-size . G500f) (hashtable-set! . G500e) (hashtable-ref . G500d) (hashtable-mutable? . G500c) (hashtable-keys . G500b) (hashtable-entries . G500a) (hashtable-delete! . G5009) (hashtable-copy . G5008) (hashtable-contains? . G5007) (hashtable-clear! . G5006) (call-with-output-file . G5005) (call-with-input-file . G5004) (write-char . G5003) (write . G5002) (with-output-to-file . G5001) (with-input-from-file . G5000) (read-char . G4fff) (read . G4ffe) (peek-char . G4ffd) (open-output-file . G4ffc) (open-input-file . G4ffb) (newline . G4ffa) (display . G4ff9) (close-output-port . G4ff8) (close-input-port . G4ff7) (eof-object? . G4ff6) (eof-object . G4ff5) (current-error-port . G4ff4) (current-output-port . G4ff3) (current-input-port . G4ff2) (output-port? . G4ff1) (input-port? . G4ff0) (utf-8-codec . G4fef) (utf-16-codec . G4fee) (transcoder-error-handling-mode . G4fed) (transcoder-eol-style . G4fec) (transcoder-codec . G4feb) (transcoded-port . G4fea) (textual-port? . G4fe9) (string->bytevector . G4fe8) (standard-output-port . G4fe7) (standard-input-port . G4fe6) (standard-error-port . G4fe5) (set-port-position! . G4fe4) (put-u8 . G4fe3) (put-string . G4fe2) (put-datum . G4fe1) (put-char . G4fe0) (put-bytevector . G4fdf) (port? . G4fde) (port-transcoder . G4fdd) (port-position . G4fdc) (port-has-set-port-position!? . G4fdb) (port-has-port-position? . G4fda) (port-eof? . G4fd9) (output-port-buffer-mode . G4fd8) (open-string-output-port . G4fd7) (open-string-input-port . G4fd6) (open-file-output-port . G4fd5) (open-file-input/output-port . G4fd4) (open-file-input-port . G4fd3) (open-bytevector-output-port . G4fd2) (open-bytevector-input-port . G4fd1) (native-transcoder . G4fd0) (native-eol-style . G4fcf) (make-transcoder . G4fce) (latin-1-codec . G4fcd) (make-i/o-write-error . G4b02) (make-i/o-read-error . G4aed) (make-i/o-port-error . G4ba0) (make-i/o-invalid-position-error . G4b18) (make-i/o-filename-error . G4b32) (make-i/o-file-protection-error . G4b4b) (make-i/o-file-is-read-only-error . G4b60) (make-i/o-file-does-not-exist-error . G4b8a) (make-i/o-file-already-exists-error . G4b75) (make-i/o-error . G4ad8) (make-i/o-encoding-error . G4bcf) (make-i/o-decoding-error . G4bb9) (make-custom-textual-output-port . G4fcc) (make-custom-textual-input/output-port . G4fcb) (make-custom-textual-input-port . G4fca) (make-custom-binary-output-port . G4fc9) (make-custom-binary-input/output-port . G4fc8) (make-custom-binary-input-port . G4fc7) (make-bytevector . G4fc6) (lookahead-u8 . G4fc5) (lookahead-char . G4fc4) (i/o-write-error? . G4b04) (i/o-read-error? . G4aef) (i/o-port-error? . G4ba4) (i/o-invalid-position-error? . G4b1c) (i/o-filename-error? . G4b36) (i/o-file-protection-error? . G4b4d) (i/o-file-is-read-only-error? . G4b62) (i/o-file-does-not-exist-error? . G4b8c) (i/o-file-already-exists-error? . G4b77) (i/o-error? . G4ada) (i/o-error-position . G4b1e) (i/o-error-port . G4ba6) (i/o-error-filename . G4b38) (i/o-encoding-error? . G4bd3) (i/o-encoding-error-char . G4bd5) (i/o-decoding-error? . G4bbb) (get-u8 . G4fc3) (get-string-n! . G4fc2) (get-string-n . G4fc1) (get-string-all . G4fc0) (get-line . G4fbf) (get-datum . G4fbe) (get-char . G4fbd) (get-bytevector-some . G4fbc) (get-bytevector-n! . G4fbb) (get-bytevector-n . G4fba) (get-bytevector-all . G4fb9) (flush-output-port . G4fb8) (close-port . G4fb7) (scheme-report-environment . G301d) (quotient . G4fb6) (null-environment . G301b) (remainder . G4fb5) (modulo . G4fb4) (inexact->exact . G4fb3) (force . G4fb2) (exact->inexact . G4fb1) (make-promise . G4fb0) (exit . G4faf) (command-line . G4d04) (string-fill! . G4fae) (string-set! . G4fad) (set-cdr! . G4fac) (set-car! . G4fab) (remove . G4faa) (remv . G4fa9) (remp . G4fa8) (remq . G4fa7) (partition . G4fa6) (memv . G4fa5) (memq . G4fa4) (memp . G4fa3) (member . G4fa2) (exists . G4fa1) (for-all . G4fa0) (fold-right . G4f9f) (fold-left . G4f9e) (find . G4f9d) (filter . G4f9c) (cons* . G4f9b) (assv . G4f9a) (assq . G4f99) (assp . G4f98) (assoc . G4f97) (call-with-string-output-port . G4f96) (call-with-port . G4f95) (call-with-bytevector-output-port . G4f94) (bytevector->string . G4f93) (buffer-mode? . G4f92) (binary-port? . G4f91) (with-exception-handler . G4f90) (raise-continuable . G4f8f) (raise . G4f8e) (eval . G3021) (environment . G3019) (make-enumeration . G4f8d) (enum-set=? . G4f8c) (enum-set-universe . G4f8b) (enum-set-union . G4f8a) (enum-set-subset? . G4f89) (enum-set-projection . G4f88) (enum-set-member? . G4f87) (enum-set-intersection . G4f86) (enum-set-indexer . G4f85) (enum-set-difference . G4f84) (enum-set-constructor . G4f83) (enum-set-complement . G4f82) (enum-set->list . G4f81) (who-condition? . G4a50) (warning? . G49ca) (violation? . G4a09) (undefined-violation? . G4ac5) (syntax-violation? . G4aac) (syntax-violation-subform . G4ab0) (syntax-violation-form . G4aae) (syntax-violation . G3041) (simple-conditions . G4f80) (serious-condition? . G49df) (non-continuable-violation? . G4a67) (message-condition? . G49b3) (make-who-condition . G4a4c) (make-warning . G49c8) (make-violation . G4a07) (make-undefined-violation . G4ac3) (make-syntax-violation . G4aa6) (make-serious-condition . G49dd) (make-non-continuable-violation . G4a65) (make-message-condition . G49af) (make-lexical-violation . G4a8f) (make-irritants-condition . G4a32) (make-implementation-restriction-violation . G4a7a) (make-error . G49f2) (make-assertion-violation . G4a1c) (lexical-violation? . G4a91) (irritants-condition? . G4a36) (implementation-restriction-violation? . G4a7c) (error? . G49f4) (condition-who . G4a52) (condition-predicate . G4f7f) (condition-message . G49b5) (condition-irritants . G4a38) (condition-accessor . G4f7e) (condition . G4f7d) (assertion-violation? . G4a1e) (condition? . G4f7c) (utf32->string . G4f7b) (utf16->string . G4f7a) (utf8->string . G4f79) (uint-list->bytevector . G4f78) (u8-list->bytevector . G4f77) (string->utf8 . G4f76) (string->utf32 . G4f75) (string->utf16 . G4f74) (sint-list->bytevector . G4f73) (native-endianness . G4f72) (bytevector? . G4f71) (bytevector=? . G4f70) (bytevector-uint-set! . G4f6f) (bytevector-uint-ref . G4f6e) (bytevector-u8-set! . G4f6d) (bytevector-u8-ref . G4f6c) (bytevector-u64-set! . G4f6b) (bytevector-u64-ref . G4f6a) (bytevector-u64-native-set! . G4f69) (bytevector-u64-native-ref . G4f68) (bytevector-u32-set! . G4f67) (bytevector-u32-ref . G4f66) (bytevector-u32-native-set! . G4f65) (bytevector-u32-native-ref . G4f64) (bytevector-u16-set! . G4f63) (bytevector-u16-ref . G4f62) (bytevector-u16-native-set! . G4f61) (bytevector-u16-native-ref . G4f60) (bytevector-sint-set! . G4f5f) (bytevector-sint-ref . G4f5e) (bytevector-s8-set! . G4f5d) (bytevector-s8-ref . G4f5c) (bytevector-s64-set! . G4f5b) (bytevector-s64-ref . G4f5a) (bytevector-s64-native-set! . G4f59) (bytevector-s64-native-ref . G4f58) (bytevector-s32-set! . G4f57) (bytevector-s32-ref . G4f56) (bytevector-s32-native-set! . G4f55) (bytevector-s32-native-ref . G4f54) (bytevector-s16-set! . G4f53) (bytevector-s16-ref . G4f52) (bytevector-s16-native-set! . G4f51) (bytevector-s16-native-ref . G4f50) (bytevector-length . G4f4f) (bytevector-ieee-single-ref . G4f4e) (bytevector-ieee-single-set! . G4f4d) (bytevector-ieee-single-native-set! . G4f4c) (bytevector-ieee-single-native-ref . G4f4b) (bytevector-ieee-double-set! . G4f4a) (bytevector-ieee-double-ref . G4f49) (bytevector-ieee-double-native-set! . G4f48) (bytevector-ieee-double-native-ref . G4f47) (bytevector-fill! . G4f46) (bytevector-copy! . G4f45) (bytevector-copy . G4f44) (bytevector->uint-list . G4f43) (bytevector->u8-list . G4f42) (bytevector->sint-list . G4f41) (no-nans-violation? . G4bff) (no-infinities-violation? . G4bea) (make-no-nans-violation . G4bfd) (make-no-infinities-violation . G4be8) (real->flonum . G4f40) (flzero? . G4f3f) (fltruncate . G4f3e) (fltan . G4f3d) (flsqrt . G4f3c) (flsin . G4f3b) (flround . G4f3a) (flpositive? . G4f39) (flonum? . G4f38) (flodd? . G4f37) (flnumerator . G4f36) (flnegative? . G4f35) (flnan? . G4f34) (flmod0 . G4f33) (flmod . G4f32) (flmin . G4f31) (flmax . G4f30) (fllog . G4f2f) (flinteger? . G4f2e) (flinfinite? . G4f2d) (flfloor . G4f2c) (flfinite? . G4f2b) (flexpt . G4f2a) (flexp . G4f29) (fleven? . G4f28) (fldiv0-and-mod0 . G4f27) (fldiv0 . G4f26) (fldiv-and-mod . G4f25) (fldiv . G4f24) (fldenominator . G4f23) (flcos . G4f22) (flceiling . G4f21) (flatan . G4f20) (flasin . G4f1f) (flacos . G4f1e) (flabs . G4f1d) (fl>? . G4f1c) (fl>=? . G4f1b) (fl=? . G4f1a) (fl<? . G4f19) (fl<=? . G4f18) (fl/ . G4f17) (fl- . G4f16) (fl+ . G4f15) (fl* . G4f14) (fixnum->flonum . G4f13) (fxzero? . G4f12) (fxxor . G4f11) (fxrotate-bit-field . G4f10) (fxreverse-bit-field . G4f0f) (fxpositive? . G4f0e) (fxodd? . G4f0d) (fxnot . G4f0c) (fxnegative? . G4f0b) (fxmod0 . G4f0a) (fxmod . G4f09) (fxmin . G4f08) (fxmax . G4f07) (fxlength . G4f06) (fxior . G4f05) (fxif . G4f04) (fxfirst-bit-set . G4f03) (fxeven? . G4f02) (fxdiv0-and-mod0 . G4f01) (fxdiv0 . G4f00) (fxdiv-and-mod . G4eff) (fxdiv . G4efe) (fxcopy-bit-field . G4efd) (fxcopy-bit . G4efc) (fxbit-set? . G4efb) (fxbit-field . G4efa) (fxbit-count . G4ef9) (fxarithmetic-shift-right . G4ef8) (fxarithmetic-shift-left . G4ef7) (fxarithmetic-shift . G4ef6) (fxand . G4ef5) (fx>? . G4ef4) (fx>=? . G4ef3) (fx=? . G4ef2) (fx<? . G4ef1) (fx<=? . G4ef0) (fx-/carry . G4eef) (fx- . G4eee) (fx+/carry . G4eed) (fx+ . G4eec) (fx*/carry . G4eeb) (fx* . G4eea) (greatest-fixnum . G4ee9) (least-fixnum . G4ee8) (fixnum-width . G4ee7) (fixnum? . G4ee6) (bitwise-rotate-bit-field . G4ee5) (bitwise-reverse-bit-field . G4ee4) (bitwise-length . G4ee3) (bitwise-if . G4ee2) (bitwise-first-bit-set . G4ee1) (bitwise-copy-bit-field . G4ee0) (bitwise-copy-bit . G4edf) (bitwise-bit-set? . G4ede) (bitwise-bit-field . G4edd) (bitwise-bit-count . G4edc) (bitwise-xor . G4edb) (bitwise-ior . G4eda) (bitwise-and . G4ed9) (bitwise-not . G4ed8) (bitwise-arithmetic-shift-right . G4ed7) (bitwise-arithmetic-shift-left . G4ed6) (bitwise-arithmetic-shift . G4ed5) (zero? . G4ed4) (vector? . G4ed3) (vector-set! . G4ed2) (vector-ref . G4ed1) (vector-map . G4ed0) (vector-length . G4ecf) (vector-for-each . G4ece) (vector-fill! . G4ecd) (vector->list . G4ecc) (vector . G4ecb) (values . G4eca) (truncate . G4ec9) (tan . G4ec8) (symbol? . G4ec7) (symbol=? . G4ec6) (symbol->string . G4ec5) (substring . G4ec4) (string? . G4ec3) (string>? . G4ec2) (string>=? . G4ec1) (string=? . G4ec0) (string<? . G4ebf) (string<=? . G4ebe) (string-ref . G4ebd) (string-length . G4ebc) (string-for-each . G4ebb) (string-copy . G4eba) (string-append . G4eb9) (string->symbol . G4eb8) (string->number . G4eb7) (string->list . G4eb6) (string . G4eb5) (sqrt . G4eb4) (sin . G4eb3) (round . G4eb2) (reverse . G4eb1) (real? . G4eb0) (real-valued? . G4eaf) (real-part . G4eae) (rationalize . G4ead) (rational? . G4eac) (rational-valued? . G4eab) (procedure? . G4eaa) (positive? . G4ea9) (pair? . G4ea8) (odd? . G4ea7) (numerator . G4ea6) (number? . G4ea5) (number->string . G4ea4) (null? . G4ea3) (not . G4ea2) (negative? . G4ea1) (nan? . G4ea0) (min . G4e9f) (max . G4e9e) (map . G4e9d) (make-vector . G4e9c) (make-string . G4e9b) (make-rectangular . G4e9a) (make-polar . G4e99) (magnitude . G4e98) (log . G4e97) (list? . G4e96) (list-tail . G4e95) (list-ref . G4e94) (list->vector . G4e93) (list->string . G4e92) (list . G4e91) (length . G4e90) (lcm . G4e8f) (integer? . G4e8e) (integer-valued? . G4e8d) (integer->char . G4e8c) (infinite? . G4e8b) (inexact? . G4e8a) (inexact . G4e89) (imag-part . G4e88) (gcd . G4e87) (for-each . G4e86) (floor . G4e85) (finite? . G4e84) (expt . G4e83) (exp . G4e82) (exact? . G4e81) (exact-integer-sqrt . G4e80) (exact . G4e7f) (even? . G4e7e) (error . G4e7d) (eqv? . G4e7c) (equal? . G4e7b) (eq? . G4e7a) (dynamic-wind . G4e79) (div0-and-mod0 . G4e78) (mod0 . G4e77) (div0 . G4e76) (div-and-mod . G4e75) (mod . G4e74) (div . G4e73) (denominator . G4e72) (cos . G4e71) (cons . G4e70) (complex? . G4e6f) (char? . G4e6e) (char>? . G4e6d) (char>=? . G4e6c) (char=? . G4e6b) (char<? . G4e6a) (char<=? . G4e69) (char->integer . G4e68) (ceiling . G4e67) (call-with-values . G4e66) (call/cc . G4e65) (call-with-current-continuation . G4e64) (cddddr . G4e63) (cdddar . G4e62) (cddadr . G4e61) (cddaar . G4e60) (cdaddr . G4e5f) (cdadar . G4e5e) (cdaadr . G4e5d) (cdaaar . G4e5c) (cadddr . G4e5b) (caddar . G4e5a) (cadadr . G4e59) (cadaar . G4e58) (caaddr . G4e57) (caadar . G4e56) (caaadr . G4e55) (caaaar . G4e54) (cdddr . G4e53) (cddar . G4e52) (cdadr . G4e51) (cdaar . G4e50) (caddr . G4e4f) (cadar . G4e4e) (caadr . G4e4d) (caaar . G4e4c) (cddr . G4e4b) (cdar . G4e4a) (cadr . G4e49) (caar . G4e48) (cdr . G4e47) (car . G4e46) (boolean? . G4e45) (boolean=? . G4e44) (atan . G4e43) (assertion-violation . G4e42) (asin . G4e41) (apply . G4e40) (append . G4e3f) (angle . G4e3e) (acos . G4e3d) (abs . G4e3c) (/ . G4e3b) (* . G4e3a) (- . G4e39) (+ . G4e38) (>= . G4e37) (> . G4e36) (= . G4e35) (<= . G4e34) (< . G4e33) (library . G4e32) (&no-nans . G4e31) (&no-infinities . G4e30) (&i/o-encoding . G4e2f) (&i/o-decoding . G4e2e) (&i/o-port . G4e2d) (&i/o-file-does-not-exist . G4e2c) (&i/o-file-already-exists . G4e2b) (&i/o-file-is-read-only . G4e2a) (&i/o-file-protection . G4e29) (&i/o-filename . G4e28) (&i/o-invalid-position . G4e27) (&i/o-write . G4e26) (&i/o-read . G4e25) (&i/o . G4e24) (&undefined . G4e23) (&syntax . G4e22) (&lexical . G4e21) (&implementation-restriction . G4e20) (&non-continuable . G4e1f) (&who . G4e1e) (&irritants . G4e1d) (&assertion . G4e1c) (&violation . G4e1b) (&error . G4e1a) (&serious . G4e19) (&warning . G4e18) (&message . G4e17) (&condition . G4e16) (define-condition-type . G4e15) (define-enumeration . G4e14) (define-record-type . G4e13) (parent-rtd . G4e12) (nongenerative . G4e11) (opaque . G4e10) (sealed . G4e0f) (protocol . G4e0e) (parent . G4e0d) (immutable . G4e0c) (mutable . G4e0b) (fields . G4e0a) (error-handling-mode . G4e09) (file-options . G4e08) (buffer-mode . G4e07) (eol-style . G4e06) (guard . G4e05) (trace-define . G4e04) (trace-lambda . G4e03) (unsyntax-splicing . G4e02) (unsyntax . G4e01) (unquote-splicing . G4e00) (unquote . G4dff) (_ . G4dfe) (else . G4dfd) (=> . G4dfc) (... . G4dfb) (assert . G4dfa) (endianness . G4df9) (delay . G4df8) (time . G4df7) (do . G4df6) (cond . G4df5) (let* . G4df4) (let . G4df3) (let*-values . G4df2) (let-values . G4df1) (identifier-syntax . G4df0) (with-syntax . G4def) (quasisyntax . G4dee) (quasiquote . G4ded) (syntax-rules . G4dec) (include . G4deb) (define-struct . G4dea) (record-constructor-descriptor . G4de9) (record-type-descriptor . G4de8) (case . G4de7) (parameterize . G4de6) (unless . G4de5) (when . G4de4) (or . G4de3) (and . G4de2) (if . G4de1) (letrec* . G4de0) (letrec . G4ddf) (type-descriptor . G4dde) (case-lambda . G4ddd) (lambda . G4ddc) (syntax . G4ddb) (syntax-case . G4dda) (quote . G4dd9) (foreign-call . G4dd8) (letrec-syntax . G4dd7) (let-syntax . G4dd6) (set! . G4dd5) (import . G4dd4) (begin . G4dd3) (module . G4dd2) (define-syntax . G4dd1) (define . G4dd0)) '((G4c03 core-prim . &no-nans-rcd) (G4c01 core-prim . &no-nans-rtd) (G4bee core-prim . &no-infinities-rcd) (G4bec core-prim . &no-infinities-rtd) (G4bd9 core-prim . &i/o-encoding-rcd) (G4bd7 core-prim . &i/o-encoding-rtd) (G4bbf core-prim . &i/o-decoding-rcd) (G4bbd core-prim . &i/o-decoding-rtd) (G4baa core-prim . &i/o-port-rcd) (G4ba8 core-prim . &i/o-port-rtd) (G4b90 core-prim . &i/o-file-does-not-exist-rcd) (G4b8e core-prim . &i/o-file-does-not-exist-rtd) (G4b7b core-prim . &i/o-file-already-exists-rcd) (G4b79 core-prim . &i/o-file-already-exists-rtd) (G4b66 core-prim . &i/o-file-is-read-only-rcd) (G4b64 core-prim . &i/o-file-is-read-only-rtd) (G4b51 core-prim . &i/o-file-protection-rcd) (G4b4f core-prim . &i/o-file-protection-rtd) (G4b3c core-prim . &i/o-filename-rcd) (G4b3a core-prim . &i/o-filename-rtd) (G4b22 core-prim . &i/o-invalid-position-rcd) (G4b20 core-prim . &i/o-invalid-position-rtd) (G4b08 core-prim . &i/o-write-rcd) (G4b06 core-prim . &i/o-write-rtd) (G4af3 core-prim . &i/o-read-rcd) (G4af1 core-prim . &i/o-read-rtd) (G4ade core-prim . &i/o-rcd) (G4adc core-prim . &i/o-rtd) (G4ac9 core-prim . &undefined-rcd) (G4ac7 core-prim . &undefined-rtd) (G4ab4 core-prim . &syntax-rcd) (G4ab2 core-prim . &syntax-rtd) (G4a95 core-prim . &lexical-rcd) (G4a93 core-prim . &lexical-rtd) (G4a80 core-prim . &implementation-restriction-rcd) (G4a7e core-prim . &implementation-restriction-rtd) (G4a6b core-prim . &non-continuable-rcd) (G4a69 core-prim . &non-continuable-rtd) (G4a56 core-prim . &who-rcd) (G4a54 core-prim . &who-rtd) (G4a3c core-prim . &irritants-rcd) (G4a3a core-prim . &irritants-rtd) (G4a22 core-prim . &assertion-rcd) (G4a20 core-prim . &assertion-rtd) (G4a0d core-prim . &violation-rcd) (G4a0b core-prim . &violation-rtd) (G49f8 core-prim . &error-rcd) (G49f6 core-prim . &error-rtd) (G49e3 core-prim . &serious-rcd) (G49e1 core-prim . &serious-rtd) (G49ce core-prim . &warning-rcd) (G49cc core-prim . &warning-rtd) (G49b9 core-prim . &message-rcd) (G49b7 core-prim . &message-rtd) (G495c core-prim . &condition-rcd) (G495a core-prim . &condition-rtd) (G303d core-prim . syntax-error) (G2f56 core-prim . syntax-dispatch) (G50ae core-prim . pretty-print) (G50ad core-prim . eval-core) (G50ac core-prim . set-symbol-value!) (G50ab core-prim . symbol-value) (G50aa core-prim . gensym) (G50a9 core-prim . void) (G4d0a core-prim . load) (G304d core-prim . interaction-environment) (G50a8 core-prim . char-ready?) (G50a7 core-prim . regexp?) (G50a6 core-prim . read-line) (G50a5 core-prim . dotted-list?) (G50a4 core-prim . circular-list?) (G50a3 core-prim . proper-list?) (G50a2 core-prim . circular-list) (G50a1 core-prim . last) (G50a0 core-prim . last-pair) (G509f core-prim . not-pair?) (G509e core-prim . split-at!) (G509d core-prim . split-at) (G509c core-prim . list=) (G509b core-prim . list-copy) (G509a core-prim . list-tabulate) (G5099 core-prim . make-list) (G5098 core-prim . xcons) (G5097 core-prim . tenth) (G5096 core-prim . ninth) (G5095 core-prim . eighth) (G5094 core-prim . seventh) (G5093 core-prim . sixth) (G5092 core-prim . fifth) (G5091 core-prim . drop-right!) (G5090 core-prim . drop-right) (G508f core-prim . take-right) (G508e core-prim . take!) (G508d core-prim . drop) (G508c core-prim . take) (G508b core-prim . car+cdr) (G508a core-prim . third) (G5089 core-prim . second) (G5088 core-prim . first) (G5087 core-prim . iota) (G5086 core-prim . every) (G5085 core-prim . ungensym) (G5084 core-prim . alist->eq-hash-table) (G5083 core-prim . assoc-ref) (G5082 core-prim . alist-cons) (G5081 core-prim . append-map) (G5080 core-prim . print) (G507f core-prim . format) (G507e core-prim . standard-library-path) (G507d core-prim . file-newer?) (G507c core-prim . stat-mtime) (G507b core-prim . write-to-file) (G507a core-prim . file->list) (G5079 core-prim . file->string) (G5078 core-prim . digit->integer) (G5077 core-prim . call-with-string-input-port) (G5076 core-prim . call-with-string-io) (G5075 core-prim . string-split) (G5074 core-prim . bytevector-for-each) (G5073 core-prim . string->regexp) (G5072 core-prim . rxmatch) (G5071 core-prim . regexp-replace-all) (G5070 core-prim . hashtable-for-each) (G506f core-prim . call-process) (G506e core-prim . local-tz-offset) (G506d core-prim . microseconds) (G506c core-prim . readdir) (G506b core-prim . set-current-directory!) (G506a core-prim . expand-path) (G5069 core-prim . current-directory) (G5068 core-prim . %spawn) (G5067 core-prim . %waitpid) (G5066 core-prim . %ffi-supported?) (G5065 core-prim . %ffi-pointer-ref) (G5064 core-prim . %ffi-pointer->string) (G5063 core-prim . %ffi-call->string-or-zero) (G5062 core-prim . %ffi-call->void*) (G5061 core-prim . %ffi-call->void) (G5060 core-prim . %ffi-call->int) (G505f core-prim . %ffi-lookup) (G505e core-prim . %ffi-open) (G505d core-prim . %fork) (G505c core-prim . %pipe) (G505b core-prim . p) (G505a core-prim . get-environment-variables) (G5059 core-prim . get-environment-variable) (G5058 core-prim . get-timeofday) (G5057 core-prim . get-command-line) (G5056 core-prim . sys-display) (G5055 core-prim . source-info) (G5054 core-prim . make-compiler-instruction) (G5053 core-prim . make-instruction) (G5052 core-prim . set-source-info!) (G5051 core-prim . bignum?) (G5050 core-prim . fast-equal?) (G504f core-prim . fasl-read) (G504e core-prim . fasl-write) (G2829 core-prim . make-parameter) (G504d core-prim . string-upcase) (G504c core-prim . string-titlecase) (G504b core-prim . string-normalize-nfkd) (G504a core-prim . string-normalize-nfkc) (G5049 core-prim . string-normalize-nfd) (G5048 core-prim . string-normalize-nfc) (G5047 core-prim . string-foldcase) (G5046 core-prim . string-downcase) (G5045 core-prim . string-ci>?) (G5044 core-prim . string-ci>=?) (G5043 core-prim . string-ci=?) (G5042 core-prim . string-ci<?) (G5041 core-prim . string-ci<=?) (G5040 core-prim . char-whitespace?) (G503f core-prim . char-upper-case?) (G503e core-prim . char-title-case?) (G503d core-prim . char-numeric?) (G503c core-prim . char-lower-case?) (G503b core-prim . char-general-category) (G503a core-prim . char-upcase) (G5039 core-prim . char-titlecase) (G5038 core-prim . char-foldcase) (G5037 core-prim . char-downcase) (G5036 core-prim . char-ci>?) (G5035 core-prim . char-ci>=?) (G5034 core-prim . char-ci=?) (G5033 core-prim . char-ci<?) (G5032 core-prim . char-ci<=?) (G5031 core-prim . char-alphabetic?) (G2d91 core-prim . make-variable-transformer) (G3043 core-prim . identifier?) (G302f core-prim . generate-temporaries) (G3031 core-prim . free-identifier=?) (G3047 core-prim . syntax->datum) (G3045 core-prim . datum->syntax) (G3033 core-prim . bound-identifier=?) (G5030 core-prim . record-type-descriptor?) (G502f core-prim . record-predicate) (G502e core-prim . record-mutator) (G502d core-prim . record-constructor) (G502c core-prim . record-accessor) (G502b core-prim . make-record-type-descriptor) (G502a core-prim . make-record-constructor-descriptor) (G5029 core-prim . record?) (G5028 core-prim . record-type-uid) (G5027 core-prim . record-type-sealed?) (G5026 core-prim . record-type-parent) (G5025 core-prim . record-type-opaque?) (G5024 core-prim . record-type-name) (G5023 core-prim . record-type-generative?) (G5022 core-prim . record-type-field-names) (G5021 core-prim . record-rtd) (G5020 core-prim . record-field-mutable?) (G501f core-prim . delete-file) (G501e core-prim . file-exists?) (G501d core-prim . vector-sort!) (G501c core-prim . vector-sort) (G501b core-prim . list-sort) (G501a core-prim . symbol-hash) (G5019 core-prim . string-ci-hash) (G5018 core-prim . string-hash) (G5017 core-prim . equal-hash) (G5016 core-prim . hashtable-equivalence-function) (G5015 core-prim . make-hashtable) (G5014 core-prim . hashtable-hash-function) (G5013 core-prim . make-eqv-hashtable) (G5012 core-prim . make-eq-hashtable) (G5011 core-prim . hashtable?) (G5010 core-prim . hashtable-update!) (G500f core-prim . hashtable-size) (G500e core-prim . hashtable-set!) (G500d core-prim . hashtable-ref) (G500c core-prim . hashtable-mutable?) (G500b core-prim . hashtable-keys) (G500a core-prim . hashtable-entries) (G5009 core-prim . hashtable-delete!) (G5008 core-prim . hashtable-copy) (G5007 core-prim . hashtable-contains?) (G5006 core-prim . hashtable-clear!) (G5005 core-prim . call-with-output-file) (G5004 core-prim . call-with-input-file) (G5003 core-prim . write-char) (G5002 core-prim . write) (G5001 core-prim . with-output-to-file) (G5000 core-prim . with-input-from-file) (G4fff core-prim . read-char) (G4ffe core-prim . read) (G4ffd core-prim . peek-char) (G4ffc core-prim . open-output-file) (G4ffb core-prim . open-input-file) (G4ffa core-prim . newline) (G4ff9 core-prim . display) (G4ff8 core-prim . close-output-port) (G4ff7 core-prim . close-input-port) (G4ff6 core-prim . eof-object?) (G4ff5 core-prim . eof-object) (G4ff4 core-prim . current-error-port) (G4ff3 core-prim . current-output-port) (G4ff2 core-prim . current-input-port) (G4ff1 core-prim . output-port?) (G4ff0 core-prim . input-port?) (G4fef core-prim . utf-8-codec) (G4fee core-prim . utf-16-codec) (G4fed core-prim . transcoder-error-handling-mode) (G4fec core-prim . transcoder-eol-style) (G4feb core-prim . transcoder-codec) (G4fea core-prim . transcoded-port) (G4fe9 core-prim . textual-port?) (G4fe8 core-prim . string->bytevector) (G4fe7 core-prim . standard-output-port) (G4fe6 core-prim . standard-input-port) (G4fe5 core-prim . standard-error-port) (G4fe4 core-prim . set-port-position!) (G4fe3 core-prim . put-u8) (G4fe2 core-prim . put-string) (G4fe1 core-prim . put-datum) (G4fe0 core-prim . put-char) (G4fdf core-prim . put-bytevector) (G4fde core-prim . port?) (G4fdd core-prim . port-transcoder) (G4fdc core-prim . port-position) (G4fdb core-prim . port-has-set-port-position!?) (G4fda core-prim . port-has-port-position?) (G4fd9 core-prim . port-eof?) (G4fd8 core-prim . output-port-buffer-mode) (G4fd7 core-prim . open-string-output-port) (G4fd6 core-prim . open-string-input-port) (G4fd5 core-prim . open-file-output-port) (G4fd4 core-prim . open-file-input/output-port) (G4fd3 core-prim . open-file-input-port) (G4fd2 core-prim . open-bytevector-output-port) (G4fd1 core-prim . open-bytevector-input-port) (G4fd0 core-prim . native-transcoder) (G4fcf core-prim . native-eol-style) (G4fce core-prim . make-transcoder) (G4fcd core-prim . latin-1-codec) (G4b02 core-prim . make-i/o-write-error) (G4aed core-prim . make-i/o-read-error) (G4ba0 core-prim . make-i/o-port-error) (G4b18 core-prim . make-i/o-invalid-position-error) (G4b32 core-prim . make-i/o-filename-error) (G4b4b core-prim . make-i/o-file-protection-error) (G4b60 core-prim . make-i/o-file-is-read-only-error) (G4b8a core-prim . make-i/o-file-does-not-exist-error) (G4b75 core-prim . make-i/o-file-already-exists-error) (G4ad8 core-prim . make-i/o-error) (G4bcf core-prim . make-i/o-encoding-error) (G4bb9 core-prim . make-i/o-decoding-error) (G4fcc core-prim . make-custom-textual-output-port) (G4fcb core-prim . make-custom-textual-input/output-port) (G4fca core-prim . make-custom-textual-input-port) (G4fc9 core-prim . make-custom-binary-output-port) (G4fc8 core-prim . make-custom-binary-input/output-port) (G4fc7 core-prim . make-custom-binary-input-port) (G4fc6 core-prim . make-bytevector) (G4fc5 core-prim . lookahead-u8) (G4fc4 core-prim . lookahead-char) (G4b04 core-prim . i/o-write-error?) (G4aef core-prim . i/o-read-error?) (G4ba4 core-prim . i/o-port-error?) (G4b1c core-prim . i/o-invalid-position-error?) (G4b36 core-prim . i/o-filename-error?) (G4b4d core-prim . i/o-file-protection-error?) (G4b62 core-prim . i/o-file-is-read-only-error?) (G4b8c core-prim . i/o-file-does-not-exist-error?) (G4b77 core-prim . i/o-file-already-exists-error?) (G4ada core-prim . i/o-error?) (G4b1e core-prim . i/o-error-position) (G4ba6 core-prim . i/o-error-port) (G4b38 core-prim . i/o-error-filename) (G4bd3 core-prim . i/o-encoding-error?) (G4bd5 core-prim . i/o-encoding-error-char) (G4bbb core-prim . i/o-decoding-error?) (G4fc3 core-prim . get-u8) (G4fc2 core-prim . get-string-n!) (G4fc1 core-prim . get-string-n) (G4fc0 core-prim . get-string-all) (G4fbf core-prim . get-line) (G4fbe core-prim . get-datum) (G4fbd core-prim . get-char) (G4fbc core-prim . get-bytevector-some) (G4fbb core-prim . get-bytevector-n!) (G4fba core-prim . get-bytevector-n) (G4fb9 core-prim . get-bytevector-all) (G4fb8 core-prim . flush-output-port) (G4fb7 core-prim . close-port) (G301d core-prim . scheme-report-environment) (G4fb6 core-prim . quotient) (G301b core-prim . null-environment) (G4fb5 core-prim . remainder) (G4fb4 core-prim . modulo) (G4fb3 core-prim . inexact->exact) (G4fb2 core-prim . force) (G4fb1 core-prim . exact->inexact) (G4fb0 core-prim . make-promise) (G4faf core-prim . exit) (G4d04 core-prim . command-line) (G4fae core-prim . string-fill!) (G4fad core-prim . string-set!) (G4fac core-prim . set-cdr!) (G4fab core-prim . set-car!) (G4faa core-prim . remove) (G4fa9 core-prim . remv) (G4fa8 core-prim . remp) (G4fa7 core-prim . remq) (G4fa6 core-prim . partition) (G4fa5 core-prim . memv) (G4fa4 core-prim . memq) (G4fa3 core-prim . memp) (G4fa2 core-prim . member) (G4fa1 core-prim . exists) (G4fa0 core-prim . for-all) (G4f9f core-prim . fold-right) (G4f9e core-prim . fold-left) (G4f9d core-prim . find) (G4f9c core-prim . filter) (G4f9b core-prim . cons*) (G4f9a core-prim . assv) (G4f99 core-prim . assq) (G4f98 core-prim . assp) (G4f97 core-prim . assoc) (G4f96 core-prim . call-with-string-output-port) (G4f95 core-prim . call-with-port) (G4f94 core-prim . call-with-bytevector-output-port) (G4f93 core-prim . bytevector->string) (G4f92 core-prim . buffer-mode?) (G4f91 core-prim . binary-port?) (G4f90 core-prim . with-exception-handler) (G4f8f core-prim . raise-continuable) (G4f8e core-prim . raise) (G3021 core-prim . eval) (G3019 core-prim . environment) (G4f8d core-prim . make-enumeration) (G4f8c core-prim . enum-set=?) (G4f8b core-prim . enum-set-universe) (G4f8a core-prim . enum-set-union) (G4f89 core-prim . enum-set-subset?) (G4f88 core-prim . enum-set-projection) (G4f87 core-prim . enum-set-member?) (G4f86 core-prim . enum-set-intersection) (G4f85 core-prim . enum-set-indexer) (G4f84 core-prim . enum-set-difference) (G4f83 core-prim . enum-set-constructor) (G4f82 core-prim . enum-set-complement) (G4f81 core-prim . enum-set->list) (G4a50 core-prim . who-condition?) (G49ca core-prim . warning?) (G4a09 core-prim . violation?) (G4ac5 core-prim . undefined-violation?) (G4aac core-prim . syntax-violation?) (G4ab0 core-prim . syntax-violation-subform) (G4aae core-prim . syntax-violation-form) (G3041 core-prim . syntax-violation) (G4f80 core-prim . simple-conditions) (G49df core-prim . serious-condition?) (G4a67 core-prim . non-continuable-violation?) (G49b3 core-prim . message-condition?) (G4a4c core-prim . make-who-condition) (G49c8 core-prim . make-warning) (G4a07 core-prim . make-violation) (G4ac3 core-prim . make-undefined-violation) (G4aa6 core-prim . make-syntax-violation) (G49dd core-prim . make-serious-condition) (G4a65 core-prim . make-non-continuable-violation) (G49af core-prim . make-message-condition) (G4a8f core-prim . make-lexical-violation) (G4a32 core-prim . make-irritants-condition) (G4a7a core-prim . make-implementation-restriction-violation) (G49f2 core-prim . make-error) (G4a1c core-prim . make-assertion-violation) (G4a91 core-prim . lexical-violation?) (G4a36 core-prim . irritants-condition?) (G4a7c core-prim . implementation-restriction-violation?) (G49f4 core-prim . error?) (G4a52 core-prim . condition-who) (G4f7f core-prim . condition-predicate) (G49b5 core-prim . condition-message) (G4a38 core-prim . condition-irritants) (G4f7e core-prim . condition-accessor) (G4f7d core-prim . condition) (G4a1e core-prim . assertion-violation?) (G4f7c core-prim . condition?) (G4f7b core-prim . utf32->string) (G4f7a core-prim . utf16->string) (G4f79 core-prim . utf8->string) (G4f78 core-prim . uint-list->bytevector) (G4f77 core-prim . u8-list->bytevector) (G4f76 core-prim . string->utf8) (G4f75 core-prim . string->utf32) (G4f74 core-prim . string->utf16) (G4f73 core-prim . sint-list->bytevector) (G4f72 core-prim . native-endianness) (G4f71 core-prim . bytevector?) (G4f70 core-prim . bytevector=?) (G4f6f core-prim . bytevector-uint-set!) (G4f6e core-prim . bytevector-uint-ref) (G4f6d core-prim . bytevector-u8-set!) (G4f6c core-prim . bytevector-u8-ref) (G4f6b core-prim . bytevector-u64-set!) (G4f6a core-prim . bytevector-u64-ref) (G4f69 core-prim . bytevector-u64-native-set!) (G4f68 core-prim . bytevector-u64-native-ref) (G4f67 core-prim . bytevector-u32-set!) (G4f66 core-prim . bytevector-u32-ref) (G4f65 core-prim . bytevector-u32-native-set!) (G4f64 core-prim . bytevector-u32-native-ref) (G4f63 core-prim . bytevector-u16-set!) (G4f62 core-prim . bytevector-u16-ref) (G4f61 core-prim . bytevector-u16-native-set!) (G4f60 core-prim . bytevector-u16-native-ref) (G4f5f core-prim . bytevector-sint-set!) (G4f5e core-prim . bytevector-sint-ref) (G4f5d core-prim . bytevector-s8-set!) (G4f5c core-prim . bytevector-s8-ref) (G4f5b core-prim . bytevector-s64-set!) (G4f5a core-prim . bytevector-s64-ref) (G4f59 core-prim . bytevector-s64-native-set!) (G4f58 core-prim . bytevector-s64-native-ref) (G4f57 core-prim . bytevector-s32-set!) (G4f56 core-prim . bytevector-s32-ref) (G4f55 core-prim . bytevector-s32-native-set!) (G4f54 core-prim . bytevector-s32-native-ref) (G4f53 core-prim . bytevector-s16-set!) (G4f52 core-prim . bytevector-s16-ref) (G4f51 core-prim . bytevector-s16-native-set!) (G4f50 core-prim . bytevector-s16-native-ref) (G4f4f core-prim . bytevector-length) (G4f4e core-prim . bytevector-ieee-single-ref) (G4f4d core-prim . bytevector-ieee-single-set!) (G4f4c core-prim . bytevector-ieee-single-native-set!) (G4f4b core-prim . bytevector-ieee-single-native-ref) (G4f4a core-prim . bytevector-ieee-double-set!) (G4f49 core-prim . bytevector-ieee-double-ref) (G4f48 core-prim . bytevector-ieee-double-native-set!) (G4f47 core-prim . bytevector-ieee-double-native-ref) (G4f46 core-prim . bytevector-fill!) (G4f45 core-prim . bytevector-copy!) (G4f44 core-prim . bytevector-copy) (G4f43 core-prim . bytevector->uint-list) (G4f42 core-prim . bytevector->u8-list) (G4f41 core-prim . bytevector->sint-list) (G4bff core-prim . no-nans-violation?) (G4bea core-prim . no-infinities-violation?) (G4bfd core-prim . make-no-nans-violation) (G4be8 core-prim . make-no-infinities-violation) (G4f40 core-prim . real->flonum) (G4f3f core-prim . flzero?) (G4f3e core-prim . fltruncate) (G4f3d core-prim . fltan) (G4f3c core-prim . flsqrt) (G4f3b core-prim . flsin) (G4f3a core-prim . flround) (G4f39 core-prim . flpositive?) (G4f38 core-prim . flonum?) (G4f37 core-prim . flodd?) (G4f36 core-prim . flnumerator) (G4f35 core-prim . flnegative?) (G4f34 core-prim . flnan?) (G4f33 core-prim . flmod0) (G4f32 core-prim . flmod) (G4f31 core-prim . flmin) (G4f30 core-prim . flmax) (G4f2f core-prim . fllog) (G4f2e core-prim . flinteger?) (G4f2d core-prim . flinfinite?) (G4f2c core-prim . flfloor) (G4f2b core-prim . flfinite?) (G4f2a core-prim . flexpt) (G4f29 core-prim . flexp) (G4f28 core-prim . fleven?) (G4f27 core-prim . fldiv0-and-mod0) (G4f26 core-prim . fldiv0) (G4f25 core-prim . fldiv-and-mod) (G4f24 core-prim . fldiv) (G4f23 core-prim . fldenominator) (G4f22 core-prim . flcos) (G4f21 core-prim . flceiling) (G4f20 core-prim . flatan) (G4f1f core-prim . flasin) (G4f1e core-prim . flacos) (G4f1d core-prim . flabs) (G4f1c core-prim . fl>?) (G4f1b core-prim . fl>=?) (G4f1a core-prim . fl=?) (G4f19 core-prim . fl<?) (G4f18 core-prim . fl<=?) (G4f17 core-prim . fl/) (G4f16 core-prim . fl-) (G4f15 core-prim . fl+) (G4f14 core-prim . fl*) (G4f13 core-prim . fixnum->flonum) (G4f12 core-prim . fxzero?) (G4f11 core-prim . fxxor) (G4f10 core-prim . fxrotate-bit-field) (G4f0f core-prim . fxreverse-bit-field) (G4f0e core-prim . fxpositive?) (G4f0d core-prim . fxodd?) (G4f0c core-prim . fxnot) (G4f0b core-prim . fxnegative?) (G4f0a core-prim . fxmod0) (G4f09 core-prim . fxmod) (G4f08 core-prim . fxmin) (G4f07 core-prim . fxmax) (G4f06 core-prim . fxlength) (G4f05 core-prim . fxior) (G4f04 core-prim . fxif) (G4f03 core-prim . fxfirst-bit-set) (G4f02 core-prim . fxeven?) (G4f01 core-prim . fxdiv0-and-mod0) (G4f00 core-prim . fxdiv0) (G4eff core-prim . fxdiv-and-mod) (G4efe core-prim . fxdiv) (G4efd core-prim . fxcopy-bit-field) (G4efc core-prim . fxcopy-bit) (G4efb core-prim . fxbit-set?) (G4efa core-prim . fxbit-field) (G4ef9 core-prim . fxbit-count) (G4ef8 core-prim . fxarithmetic-shift-right) (G4ef7 core-prim . fxarithmetic-shift-left) (G4ef6 core-prim . fxarithmetic-shift) (G4ef5 core-prim . fxand) (G4ef4 core-prim . fx>?) (G4ef3 core-prim . fx>=?) (G4ef2 core-prim . fx=?) (G4ef1 core-prim . fx<?) (G4ef0 core-prim . fx<=?) (G4eef core-prim . fx-/carry) (G4eee core-prim . fx-) (G4eed core-prim . fx+/carry) (G4eec core-prim . fx+) (G4eeb core-prim . fx*/carry) (G4eea core-prim . fx*) (G4ee9 core-prim . greatest-fixnum) (G4ee8 core-prim . least-fixnum) (G4ee7 core-prim . fixnum-width) (G4ee6 core-prim . fixnum?) (G4ee5 core-prim . bitwise-rotate-bit-field) (G4ee4 core-prim . bitwise-reverse-bit-field) (G4ee3 core-prim . bitwise-length) (G4ee2 core-prim . bitwise-if) (G4ee1 core-prim . bitwise-first-bit-set) (G4ee0 core-prim . bitwise-copy-bit-field) (G4edf core-prim . bitwise-copy-bit) (G4ede core-prim . bitwise-bit-set?) (G4edd core-prim . bitwise-bit-field) (G4edc core-prim . bitwise-bit-count) (G4edb core-prim . bitwise-xor) (G4eda core-prim . bitwise-ior) (G4ed9 core-prim . bitwise-and) (G4ed8 core-prim . bitwise-not) (G4ed7 core-prim . bitwise-arithmetic-shift-right) (G4ed6 core-prim . bitwise-arithmetic-shift-left) (G4ed5 core-prim . bitwise-arithmetic-shift) (G4ed4 core-prim . zero?) (G4ed3 core-prim . vector?) (G4ed2 core-prim . vector-set!) (G4ed1 core-prim . vector-ref) (G4ed0 core-prim . vector-map) (G4ecf core-prim . vector-length) (G4ece core-prim . vector-for-each) (G4ecd core-prim . vector-fill!) (G4ecc core-prim . vector->list) (G4ecb core-prim . vector) (G4eca core-prim . values) (G4ec9 core-prim . truncate) (G4ec8 core-prim . tan) (G4ec7 core-prim . symbol?) (G4ec6 core-prim . symbol=?) (G4ec5 core-prim . symbol->string) (G4ec4 core-prim . substring) (G4ec3 core-prim . string?) (G4ec2 core-prim . string>?) (G4ec1 core-prim . string>=?) (G4ec0 core-prim . string=?) (G4ebf core-prim . string<?) (G4ebe core-prim . string<=?) (G4ebd core-prim . string-ref) (G4ebc core-prim . string-length) (G4ebb core-prim . string-for-each) (G4eba core-prim . string-copy) (G4eb9 core-prim . string-append) (G4eb8 core-prim . string->symbol) (G4eb7 core-prim . string->number) (G4eb6 core-prim . string->list) (G4eb5 core-prim . string) (G4eb4 core-prim . sqrt) (G4eb3 core-prim . sin) (G4eb2 core-prim . round) (G4eb1 core-prim . reverse) (G4eb0 core-prim . real?) (G4eaf core-prim . real-valued?) (G4eae core-prim . real-part) (G4ead core-prim . rationalize) (G4eac core-prim . rational?) (G4eab core-prim . rational-valued?) (G4eaa core-prim . procedure?) (G4ea9 core-prim . positive?) (G4ea8 core-prim . pair?) (G4ea7 core-prim . odd?) (G4ea6 core-prim . numerator) (G4ea5 core-prim . number?) (G4ea4 core-prim . number->string) (G4ea3 core-prim . null?) (G4ea2 core-prim . not) (G4ea1 core-prim . negative?) (G4ea0 core-prim . nan?) (G4e9f core-prim . min) (G4e9e core-prim . max) (G4e9d core-prim . map) (G4e9c core-prim . make-vector) (G4e9b core-prim . make-string) (G4e9a core-prim . make-rectangular) (G4e99 core-prim . make-polar) (G4e98 core-prim . magnitude) (G4e97 core-prim . log) (G4e96 core-prim . list?) (G4e95 core-prim . list-tail) (G4e94 core-prim . list-ref) (G4e93 core-prim . list->vector) (G4e92 core-prim . list->string) (G4e91 core-prim . list) (G4e90 core-prim . length) (G4e8f core-prim . lcm) (G4e8e core-prim . integer?) (G4e8d core-prim . integer-valued?) (G4e8c core-prim . integer->char) (G4e8b core-prim . infinite?) (G4e8a core-prim . inexact?) (G4e89 core-prim . inexact) (G4e88 core-prim . imag-part) (G4e87 core-prim . gcd) (G4e86 core-prim . for-each) (G4e85 core-prim . floor) (G4e84 core-prim . finite?) (G4e83 core-prim . expt) (G4e82 core-prim . exp) (G4e81 core-prim . exact?) (G4e80 core-prim . exact-integer-sqrt) (G4e7f core-prim . exact) (G4e7e core-prim . even?) (G4e7d core-prim . error) (G4e7c core-prim . eqv?) (G4e7b core-prim . equal?) (G4e7a core-prim . eq?) (G4e79 core-prim . dynamic-wind) (G4e78 core-prim . div0-and-mod0) (G4e77 core-prim . mod0) (G4e76 core-prim . div0) (G4e75 core-prim . div-and-mod) (G4e74 core-prim . mod) (G4e73 core-prim . div) (G4e72 core-prim . denominator) (G4e71 core-prim . cos) (G4e70 core-prim . cons) (G4e6f core-prim . complex?) (G4e6e core-prim . char?) (G4e6d core-prim . char>?) (G4e6c core-prim . char>=?) (G4e6b core-prim . char=?) (G4e6a core-prim . char<?) (G4e69 core-prim . char<=?) (G4e68 core-prim . char->integer) (G4e67 core-prim . ceiling) (G4e66 core-prim . call-with-values) (G4e65 core-prim . call/cc) (G4e64 core-prim . call-with-current-continuation) (G4e63 core-prim . cddddr) (G4e62 core-prim . cdddar) (G4e61 core-prim . cddadr) (G4e60 core-prim . cddaar) (G4e5f core-prim . cdaddr) (G4e5e core-prim . cdadar) (G4e5d core-prim . cdaadr) (G4e5c core-prim . cdaaar) (G4e5b core-prim . cadddr) (G4e5a core-prim . caddar) (G4e59 core-prim . cadadr) (G4e58 core-prim . cadaar) (G4e57 core-prim . caaddr) (G4e56 core-prim . caadar) (G4e55 core-prim . caaadr) (G4e54 core-prim . caaaar) (G4e53 core-prim . cdddr) (G4e52 core-prim . cddar) (G4e51 core-prim . cdadr) (G4e50 core-prim . cdaar) (G4e4f core-prim . caddr) (G4e4e core-prim . cadar) (G4e4d core-prim . caadr) (G4e4c core-prim . caaar) (G4e4b core-prim . cddr) (G4e4a core-prim . cdar) (G4e49 core-prim . cadr) (G4e48 core-prim . caar) (G4e47 core-prim . cdr) (G4e46 core-prim . car) (G4e45 core-prim . boolean?) (G4e44 core-prim . boolean=?) (G4e43 core-prim . atan) (G4e42 core-prim . assertion-violation) (G4e41 core-prim . asin) (G4e40 core-prim . apply) (G4e3f core-prim . append) (G4e3e core-prim . angle) (G4e3d core-prim . acos) (G4e3c core-prim . abs) (G4e3b core-prim . /) (G4e3a core-prim . *) (G4e39 core-prim . -) (G4e38 core-prim . +) (G4e37 core-prim . >=) (G4e36 core-prim . >) (G4e35 core-prim . =) (G4e34 core-prim . <=) (G4e33 core-prim . <) (G4e32 core-prim . library) (G4e31 $core-rtd &no-nans-rtd &no-nans-rcd) (G4e30 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e2f $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e2e $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e2d $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e2c $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e2b $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e2a $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e29 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e28 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e27 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e26 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e25 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e24 $core-rtd &i/o-rtd &i/o-rcd) (G4e23 $core-rtd &undefined-rtd &undefined-rcd) (G4e22 $core-rtd &syntax-rtd &syntax-rcd) (G4e21 $core-rtd &lexical-rtd &lexical-rcd) (G4e20 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e1f $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e1e $core-rtd &who-rtd &who-rcd) (G4e1d $core-rtd &irritants-rtd &irritants-rcd) (G4e1c $core-rtd &assertion-rtd &assertion-rcd) (G4e1b $core-rtd &violation-rtd &violation-rcd) (G4e1a $core-rtd &error-rtd &error-rcd) (G4e19 $core-rtd &serious-rtd &serious-rcd) (G4e18 $core-rtd &warning-rtd &warning-rcd) (G4e17 $core-rtd &message-rtd &message-rcd) (G4e16 $core-rtd &condition-rtd &condition-rcd) (G4e15 macro . define-condition-type) (G4e14 macro . define-enumeration) (G4e13 macro . define-record-type) (G4e12 macro . parent-rtd) (G4e11 macro . nongenerative) (G4e10 macro . opaque) (G4e0f macro . sealed) (G4e0e macro . protocol) (G4e0d macro . parent) (G4e0c macro . immutable) (G4e0b macro . mutable) (G4e0a macro . fields) (G4e09 macro . error-handling-mode) (G4e08 macro . file-options) (G4e07 macro . buffer-mode) (G4e06 macro . eol-style) (G4e05 macro . guard) (G4e04 macro . trace-define) (G4e03 macro . trace-lambda) (G4e02 macro . unsyntax-splicing) (G4e01 macro . unsyntax) (G4e00 macro . unquote-splicing) (G4dff macro . unquote) (G4dfe macro . _) (G4dfd macro . else) (G4dfc macro . =>) (G4dfb macro . ...) (G4dfa macro . assert) (G4df9 macro . endianness) (G4df8 macro . delay) (G4df7 macro . time) (G4df6 macro . do) (G4df5 macro . cond) (G4df4 macro . let*) (G4df3 macro . let) (G4df2 macro . let*-values) (G4df1 macro . let-values) (G4df0 macro . identifier-syntax) (G4def macro . with-syntax) (G4dee macro . quasisyntax) (G4ded macro . quasiquote) (G4dec macro . syntax-rules) (G4deb macro . include) (G4dea macro . define-struct) (G4de9 core-macro . record-constructor-descriptor) (G4de8 core-macro . record-type-descriptor) (G4de7 macro . case) (G4de6 macro . parameterize) (G4de5 macro . unless) (G4de4 macro . when) (G4de3 core-macro . or) (G4de2 core-macro . and) (G4de1 core-macro . if) (G4de0 core-macro . letrec*) (G4ddf core-macro . letrec) (G4dde core-macro . type-descriptor) (G4ddd core-macro . case-lambda) (G4ddc core-macro . lambda) (G4ddb core-macro . syntax) (G4dda core-macro . syntax-case) (G4dd9 core-macro . quote) (G4dd8 core-macro . foreign-call) (G4dd7 letrec-syntax) (G4dd6 let-syntax) (G4dd5 set!) (G4dd4 import) (G4dd3 begin) (G4dd2 module) (G4dd1 define-syntax) (G4dd0 define)) values values '#f '#f '#f '#f) (G2b6d@G2a12@install-library 'G50cf '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50ae) (eval-core . G50ad) (set-symbol-value! . G50ac) (symbol-value . G50ab) (gensym . G50aa) (void . G50a9)) '() values values '#f '#f '#f '#f) (G2b6d@G2a12@install-library 'G50d0 '(mosh) '() '() '() '() '((set-symbol-value! . G50ac) (symbol-value . G50ab) (read-line . G50a6) (ungensym . G5085) (alist->eq-hash-table . G5084) (assoc-ref . G5083) (print . G5080) (format . G507f) (standard-library-path . G507e) (file-newer? . G507d) (stat-mtime . G507c) (write-to-file . G507b) (file->list . G507a) (file->string . G5079) (digit->integer . G5078) (call-with-string-input-port . G5077) (call-with-string-io . G5076) (string-split . G5075) (bytevector-for-each . G5074) (string->regexp . G5073) (rxmatch . G5072) (regexp-replace-all . G5071) (hashtable-for-each . G5070) (readdir . G506c) (set-current-directory! . G506b) (expand-path . G506a) (current-directory . G5069) (p . G505b) (get-timeofday . G5058) (get-command-line . G5057) (sys-display . G5056) (source-info . G5055) (make-compiler-instruction . G5054) (make-instruction . G5053) (set-source-info! . G5052) (bignum? . G5051) (fast-equal? . G5050) (fasl-read . G504f) (fasl-write . G504e) (include . G4deb)) '() values values '#f '#f '#f '#f) (G2b6d@G2a12@install-library 'G50d1 '(system) '() '() '() '() '((call-process . G506f) (local-tz-offset . G506e) (microseconds . G506d) (expand-path . G506a) (%spawn . G5068) (%waitpid . G5067) (%ffi-supported? . G5066) (%ffi-pointer-ref . G5065) (%ffi-pointer->string . G5064) (%ffi-call->string-or-zero . G5063) (%ffi-call->void* . G5062) (%ffi-call->void . G5061) (%ffi-call->int . G5060) (%ffi-lookup . G505f) (%ffi-open . G505e) (%fork . G505d) (%pipe . G505c) (get-environment-variables . G505a) (get-environment-variable . G5059) (make-parameter . G2829) (parameterize . G4de6)) '() values values '#f '#f '#f '#f) (G2b6d@G2a12@install-library 'G50d2 '(srfi :1) '() '() '() '() '((dotted-list? . G50a5) (circular-list? . G50a4) (proper-list? . G50a3) (circular-list . G50a2) (last . G50a1) (last-pair . G50a0) (not-pair? . G509f) (split-at! . G509e) (split-at . G509d) (list= . G509c) (list-copy . G509b) (list-tabulate . G509a) (make-list . G5099) (xcons . G5098) (tenth . G5097) (ninth . G5096) (eighth . G5095) (seventh . G5094) (sixth . G5093) (fifth . G5092) (drop-right! . G5091) (drop-right . G5090) (take-right . G508f) (take! . G508e) (drop . G508d) (take . G508c) (car+cdr . G508b) (third . G508a) (second . G5089) (first . G5088) (iota . G5087) (every . G5086) (alist-cons . G5082) (append-map . G5081)) '() values values '#f '#f '#f '#f))
((lambda (G4cf9@add-library-path! G4cfb@parse-and-add-library-path G4cfd@for-each-with-index G4cff@conditioon-printer G4d01@repl G4d03@trace-printer G4d05@command-line G4d07@local-library-path G4d09@load/args G4d0b@load G4d0d@ironscheme-build G4d0f@eval-top-level G4d11@compile-system-libraries G4d13@compile G4d15@compile->closure G4d17@pre-compile-r6rs-file G4d19@load-r6rs-top-level) (begin (set! G4cf9@add-library-path! (lambda (G4d34@path) (G2b5d@G29f2@library-path (append (G2b5d@G29f2@library-path) (list G4d34@path))))) (set! G4cfb@parse-and-add-library-path (lambda (G4d36@paths G4d37@message) ((lambda (G4d3a@t) (if G4d3a@t ((lambda (G4d3c@paths) (for-each (lambda (G4d3e@path) (if (file-exists? G4d3e@path) (G4cf9@add-library-path! (expand-path G4d3e@path)) (format (current-error-port) G4d37@message G4d3e@path))) (reverse (string-split G4d3c@paths '#\:)))) G4d3a@t) (void))) G4d36@paths))) (set! G4cfd@for-each-with-index (lambda (G4d40@proc G4d41@lst) (letrec ((G4d44@loop (lambda (G4d46@i G4d47@lst) (if (null? G4d47@lst) (if '#f '#f (void)) (begin (G4d40@proc G4d46@i (car G4d47@lst)) (G4d44@loop (+ G4d46@i '1) (cdr G4d47@lst))))))) (G4d44@loop '1 G4d41@lst)))) (set! G4cff@conditioon-printer (lambda (G4d4a@e G4d4b@port) ((lambda (G4d4f@ref) (begin (set! G4d4f@ref (lambda (G4d5e@rtd G4d5f@i G4d60@x) ((lambda (G4d64@val) (if (symbol? G4d64@val) (ungensym G4d64@val) G4d64@val)) ((record-accessor G4d5e@rtd G4d5f@i) G4d60@x)))) (begin (display '" Condition components:\n" G4d4b@port) (G4cfd@for-each-with-index (lambda (G4d50@i G4d51@x) ((lambda (G4d54@rtd) (begin (format G4d4b@port '"   ~d. ~a" G4d50@i (record-type-name G4d54@rtd)) ((lambda (G4d56@v) ((lambda (G4d58@t) (if (memv G4d58@t '(0)) (newline G4d4b@port) (if (memv G4d58@t '(1)) (begin (display '": " G4d4b@port) (write (G4d4f@ref G4d54@rtd '0 G4d51@x) G4d4b@port) (newline G4d4b@port)) (begin (display '":\n" G4d4b@port) ((letrec ((G4d5a@f (lambda (G4d5c@i) (if (not (= G4d5c@i (vector-length G4d56@v))) (begin (display '"       " G4d4b@port) (display (vector-ref G4d56@v G4d5c@i) G4d4b@port) (display '": " G4d4b@port) (write (G4d4f@ref G4d54@rtd G4d5c@i G4d51@x) G4d4b@port) (newline G4d4b@port) (G4d5a@f (+ G4d5c@i '1))) (void))))) G4d5a@f) '0))))) (vector-length G4d56@v))) (record-type-field-names G4d54@rtd)))) (record-rtd G4d51@x))) (simple-conditions G4d4a@e))))) '#f))) (set! G4d01@repl (lambda G4d66@x ((lambda (G4d69@rec) (begin (set! G4d69@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d6c@G4d6a) (lambda () (with-exception-handler (lambda (G4d6e@e) ((call/cc (lambda (G4d70@G4d6b) (G4d6c@G4d6a (lambda () (if '#t (begin (display '"\n" (current-error-port)) (G4cff@conditioon-printer G4d6e@e (current-error-port))) (G4d70@G4d6b (lambda () (raise-continuable G4d6e@e)))))))))) (lambda () ((letrec ((G4d72@loop (lambda (G4d74@line G4d75@accum) ((lambda (G4d79@parentheses-ok? G4d7b@eval-string-print) (begin (set! G4d79@parentheses-ok? (lambda (G4d80@text) ((letrec ((G4d82@loop (lambda (G4d84@chars G4d85@p0 G4d86@p1) (if (null? G4d84@chars) (= '0 G4d85@p0 G4d86@p1) ((lambda (G4d8a@t) (if (memv G4d8a@t '(#\()) (G4d82@loop (cdr G4d84@chars) (+ G4d85@p0 '1) G4d86@p1) (if (memv G4d8a@t '(#\))) (G4d82@loop (cdr G4d84@chars) (- G4d85@p0 '1) G4d86@p1) (if (memv G4d8a@t '(#\[)) (G4d82@loop (cdr G4d84@chars) G4d85@p0 (+ G4d86@p1 '1)) (if (memv G4d8a@t '(#\])) (G4d82@loop (cdr G4d84@chars) G4d85@p0 (- G4d86@p1 '1)) (G4d82@loop (cdr G4d84@chars) G4d85@p0 G4d86@p1)))))) (car G4d84@chars)))))) G4d82@loop) (string->list G4d80@text) '0 '0))) (set! G4d7b@eval-string-print (lambda (G4d7e@text) (if (not (or (string=? '"\n" G4d7e@text) (= '0 (string-length G4d7e@text)))) (write (G4d0f@eval-top-level (call-with-port (open-string-input-port G4d7e@text) read))) (void)))) (if (eof-object? G4d74@line) (begin (G4d7b@eval-string-print G4d75@accum) (exit)) ((lambda (G4d7c@current) (if (G4d79@parentheses-ok? G4d7c@current) (G4d7b@eval-string-print G4d7c@current) (G4d72@loop (get-line (current-input-port)) G4d7c@current))) (string-append G4d75@accum G4d74@line))))) '#f '#f)))) G4d72@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d69@rec)))) (G4d69@rec))) '#f))) (set! G4d03@trace-printer (G28f4@G282a@make-parameter write)) (set! G4d05@command-line (G28f4@G282a@make-parameter (get-command-line))) (set! G4d07@local-library-path (lambda (G4d8c@filename) (cons (expand-path '".") (G2b5d@G29f2@library-path)))) (set! G4d09@load/args (lambda (G4d8e@filename . G4d90@args) (begin (apply G4d19@load-r6rs-top-level G4d8e@filename 'load G4d90@args) (void)))) (set! G4d0b@load (lambda (G4d92@filename) (begin (apply G4d19@load-r6rs-top-level G4d92@filename 'load (G4d05@command-line)) (void)))) (set! G4d0d@ironscheme-build (lambda () (G4d0b@load '"ironscheme-buildscript.ss"))) (set! G4d0f@eval-top-level (lambda (G4d94@x) (G492f@G3022@eval G4d94@x (G4945@G304e@interaction-environment)))) (set! G4d11@compile-system-libraries (lambda () (G4d0f@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d13@compile (lambda (G4d96@filename) (G4d19@load-r6rs-top-level G4d96@filename 'compile))) (set! G4d15@compile->closure (lambda (G4d98@filename) (G4d19@load-r6rs-top-level G4d98@filename 'closure))) (set! G4d17@pre-compile-r6rs-file (lambda (G4d9a@filename) (G4d19@load-r6rs-top-level G4d9a@filename 'compile))) (set! G4d19@load-r6rs-top-level (lambda (G4d9c@filename G4d9d@how . G4da0@args) ((lambda (G4da4@G4da2 G4da5@G4da3) ((lambda (G4da8@swap) (dynamic-wind G4da8@swap (lambda () ((lambda (G4daa@x*) ((lambda (G4dac@t) (if (memv G4dac@t '(closure)) (G4944@G304c@pre-compile-r6rs-top-level G4daa@x*) (if (memv G4dac@t '(load)) ((lambda (G4db0@G4dae G4db1@G4daf) ((lambda (G4db4@swap) (dynamic-wind G4db4@swap (lambda () ((G4943@G304a@compile-r6rs-top-level G4daa@x*))) G4db4@swap)) (lambda () ((lambda (G4db6@t) (begin (G4db0@G4dae G4db1@G4daf) (set! G4db1@G4daf G4db6@t))) (G4db0@G4dae))))) G4d05@command-line (cons G4d9c@filename (car G4da0@args))) (if (memv G4dac@t '(compile)) (begin (G4943@G304a@compile-r6rs-top-level G4daa@x*) (G2b61@G29fa@serialize-all G28ef@G2820@serialize-library G2949@G2902@compile-core-expr)) (if '#f '#f (void)))))) G4d9d@how)) (with-input-from-file G4d9c@filename (lambda () ((letrec ((G4db8@f (lambda () ((lambda (G4dba@x) (if (eof-object? G4dba@x) '() (cons G4dba@x (G4db8@f)))) (G28e7@G2810@read-annotated))))) G4db8@f)))))) G4da8@swap)) (lambda () ((lambda (G4dbc@t) (begin (G4da4@G4da2 G4da5@G4da3) (set! G4da5@G4da3 G4dbc@t))) (G4da4@G4da2))))) G2b5d@G29f2@library-path (G4d07@local-library-path G4d9c@filename)))) (begin (set! G4dce@G4d19@load-r6rs-top-level G4d19@load-r6rs-top-level) (set! G4dcd@G4d17@pre-compile-r6rs-file G4d17@pre-compile-r6rs-file) (set! G4dcc@G4d15@compile->closure G4d15@compile->closure) (set! G4dcb@G4d13@compile G4d13@compile) (set! G4dca@G4d11@compile-system-libraries G4d11@compile-system-libraries) (set! G4dc9@G4d0f@eval-top-level G4d0f@eval-top-level) (set! G4dc8@G4d0d@ironscheme-build G4d0d@ironscheme-build) (set! G4dc7@G4d0b@load G4d0b@load) (set! G4dc6@G4d09@load/args G4d09@load/args) (set! G4dc5@G4d07@local-library-path G4d07@local-library-path) (set! G4dc4@G4d05@command-line G4d05@command-line) (set! G4dc3@G4d03@trace-printer G4d03@trace-printer) (set! G4dc2@G4d01@repl G4d01@repl) (set! G4dc1@G4cff@conditioon-printer G4cff@conditioon-printer) (set! G4dc0@G4cfd@for-each-with-index G4cfd@for-each-with-index) (set! G4dbf@G4cfb@parse-and-add-library-path G4cfb@parse-and-add-library-path) (set! G4dbe@G4cf9@add-library-path! G4cf9@add-library-path!) (G2b62@G29fc@current-precompiled-library-loader G28f0@G2822@load-serialized-library) (set-symbol-value! 'load G4d0b@load) (set-symbol-value! 'pre-compile-r6rs-file G4d17@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d0f@eval-top-level) (set-symbol-value! 'int-env-syms G4926@G3010@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2948@G2900@expanded->core) (set-symbol-value! 'trace-printer G4d03@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d1a@c) (condition (G4c56@G4a66@make-non-continuable-violation) (G4c4c@G4a4d@make-who-condition 'raise) (G4c10@G49b0@make-message-condition '"returned from non-continuable exception") (G4c42@G4a33@make-irritants-condition (list G4d1a@c))))) (G4cfb@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4cfb@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2b5d@G29f2@library-path (append (G2b5d@G29f2@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4d1c@prefix) (G2b5e@G29f4@library-extensions (G4d1c@prefix '".mosh" (G2b5e@G29f4@library-extensions)))) (lambda (G4d1e@ext G4d1f@ls) (append (map (lambda (G4d22@x) (string-append G4d1e@ext G4d22@x)) G4d1f@ls) G4d1f@ls))) ((lambda (G4d24@args G4d25@port) ((lambda (G4d29@ref) (begin (set! G4d29@ref (lambda (G4d2c@rtd G4d2d@i G4d2e@x) ((lambda (G4d32@val) (if (symbol? G4d32@val) (ungensym G4d32@val) G4d32@val)) ((record-accessor G4d2c@rtd G4d2d@i) G4d2e@x)))) (with-exception-handler (lambda (G4d2a@c) (G4cff@conditioon-printer G4d2a@c (current-error-port))) (lambda () (if (null? G4d24@args) (G4d01@repl) (G4d19@load-r6rs-top-level (car G4d24@args) 'load (cdr G4d24@args))))))) '#f)) (G4d05@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
