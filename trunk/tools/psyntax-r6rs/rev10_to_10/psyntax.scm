;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G10231@read-annotated G10233@annotation-stripped G10235@annotation? G10237@annotation-source G10239@annotation-expression G10241@serialize-library G10243@load-serialized-library G10245@make-record-printer G10247@compile-core G10249@read-library-source-file G10251@make-parameter G10405@file-options-spec) (begin (set! G10231@read-annotated read) (set! G10233@annotation-stripped (lambda (G10406@x) (G10239@annotation-expression G10406@x))) (set! G10235@annotation? (lambda (G10408@x) (source-info G10408@x))) (set! G10237@annotation-source (lambda (G10410@x) (source-info G10410@x))) (set! G10239@annotation-expression (lambda (G10412@x) (if (pair? G10412@x) (cons (car G10412@x) (cdr G10412@x)) (display '"line:46\n")))) (set! G10241@serialize-library (lambda G10414@x (begin (display G10414@x) '#f))) (set! G10243@load-serialized-library (lambda G10416@x '#f)) (set! G10245@make-record-printer (lambda (G10418@name G10419@printer) (lambda G10422@x (begin (display '"record printer") (for-each display G10422@x))))) (set! G10247@compile-core (lambda G10424@x (apply error 'comile-core '"not implementated" G10424@x))) (set! G10249@read-library-source-file (lambda (G10426@file-name) (with-input-from-file G10426@file-name G10231@read-annotated))) (set! G10251@make-parameter (lambda G10442 ((lambda (G10443) (if (= G10443 '1) (apply (lambda (G10428@x) (G10251@make-parameter G10428@x (lambda (G10430@x) G10430@x))) G10442) (if (= G10443 '2) (apply (lambda (G10432@x G10433@fender) (begin (if (procedure? G10433@fender) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((lambda (G10436@x) (lambda G10440 ((lambda (G10441) (if (= G10441 '0) (apply (lambda () G10436@x) G10440) (if (= G10441 '1) (apply (lambda (G10438@v) (set! G10436@x (G10433@fender G10438@v))) G10440) (error 'apply '"invalid arg count")))) (length G10440)))) (G10433@fender G10432@x)))) G10442) (error 'apply '"invalid arg count")))) (length G10442)))) (set! G10405@file-options-spec (lambda (G10444@x) G10444@x)) (begin (set! G10457@G10405@file-options-spec G10405@file-options-spec) (set! G10456@G10251@make-parameter G10251@make-parameter) (set! G10455@G10249@read-library-source-file G10249@read-library-source-file) (set! G10454@G10247@compile-core G10247@compile-core) (set! G10453@G10245@make-record-printer G10245@make-record-printer) (set! G10452@G10243@load-serialized-library G10243@load-serialized-library) (set! G10451@G10241@serialize-library G10241@serialize-library) (set! G10450@G10239@annotation-expression G10239@annotation-expression) (set! G10449@G10237@annotation-source G10237@annotation-source) (set! G10448@G10235@annotation? G10235@annotation?) (set! G10447@G10233@annotation-stripped G10233@annotation-stripped) (set! G10446@G10231@read-annotated G10231@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G10462@current-primitive-locations G10464@mutable? G10466@rewriter G10468@expanded->core G10470@compile-core-expr G10472@pretty-print G10474@compile-core-expr-to-port) (begin (set! G10462@current-primitive-locations (G10456@G10251@make-parameter (lambda (G10475@x) '#f) (lambda (G10477@p) (begin (if (procedure? G10477@p) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) G10477@p)))) (set! G10464@mutable? (lambda (G10479@x) ((lambda (G10482@simple?) (begin (set! G10482@simple? (lambda (G10483@x) ((lambda (G10485@t) (if G10485@t G10485@t ((lambda (G10487@t) (if G10487@t G10487@t ((lambda (G10489@t) (if G10489@t G10489@t ((lambda (G10491@t) (if G10491@t G10491@t ((lambda (G10493@t) (if G10493@t G10493@t ((lambda (G10495@t) (if G10495@t G10495@t (begin '#f (number? G10483@x)))) (bytevector? G10483@x)))) (string? G10483@x)))) (boolean? G10483@x)))) (symbol? G10483@x)))) (char? G10483@x)))) (null? G10483@x)))) (not (G10482@simple? G10479@x)))) '#f))) (set! G10466@rewriter (lambda (G10497@quote-hack?) ((lambda (G10500@f) (begin (set! G10500@f (lambda (G10501@x) (if (pair? G10501@x) ((lambda (G10503@t) (if (eqv? G10503@t 'quote) (if (if G10497@quote-hack? (begin '#f (G10464@mutable? (cadr G10501@x))) '#f) ((lambda (G10542@g) (begin (set-symbol-value! G10542@g (cadr G10501@x)) G10542@g)) (gensym)) G10501@x) (if (eqv? G10503@t 'case-lambda) (cons 'case-lambda (map (lambda (G10540@x) (cons (car G10540@x) (map G10500@f (cdr G10540@x)))) (cdr G10501@x))) (if (eqv? G10503@t 'lambda) (cons* 'lambda (cadr G10501@x) (map G10500@f (cddr G10501@x))) (if (eqv? G10503@t 'letrec) ((lambda (G10532@bindings G10533@body*) ((lambda (G10536@lhs* G10537@rhs*) (cons* 'letrec (map list G10536@lhs* (map G10500@f G10537@rhs*)) (map G10500@f G10533@body*))) (map car G10532@bindings) (map cadr G10532@bindings))) (cadr G10501@x) (cddr G10501@x)) (if (eqv? G10503@t 'letrec*) ((lambda (G10524@bindings G10525@body*) ((lambda (G10528@lhs* G10529@rhs*) (cons* 'letrec* (map list G10528@lhs* (map G10500@f G10529@rhs*)) (map G10500@f G10525@body*))) (map car G10524@bindings) (map cadr G10524@bindings))) (cadr G10501@x) (cddr G10501@x)) (if (eqv? G10503@t 'library-letrec*) ((lambda (G10510@name G10511@x) ((lambda (G10514@bindings G10515@body*) ((lambda (G10518@lhs* G10519@lhs** G10520@rhs*) (cons* 'library-letrec* G10510@name (map list G10518@lhs* G10519@lhs** (map G10500@f G10520@rhs*)) (map G10500@f G10515@body*))) (map car G10514@bindings) (map cadr G10514@bindings) (map caddr G10514@bindings))) (cadr G10511@x) (cddr G10511@x))) (cadr G10501@x) (cdr G10501@x)) (if (eqv? G10503@t 'begin) (cons 'begin (map G10500@f (cdr G10501@x))) (if (eqv? G10503@t 'set!) (list 'set! (cadr G10501@x) (G10500@f (caddr G10501@x))) (if (eqv? G10503@t 'primitive) ((lambda (G10504@op) ((lambda (G10506@t) (if G10506@t ((lambda (G10508@loc) G10508@loc) G10506@t) G10504@op)) ((G10462@current-primitive-locations) G10504@op))) (cadr G10501@x)) (if (eqv? G10503@t 'define) G10501@x (if (list? G10501@x) (map G10500@f G10501@x) (error 'rewrite '"invalid form ~s ~s" G10501@x (list? G10501@x)))))))))))))) (car G10501@x)) G10501@x))) G10500@f)) '#f))) (set! G10468@expanded->core (lambda (G10544@x) ((G10466@rewriter '#t) G10544@x))) (set! G10470@compile-core-expr (lambda (G10546@x) ((G10466@rewriter '#f) G10546@x))) (set! G10472@pretty-print write) (set! G10474@compile-core-expr-to-port (lambda (G10548@x G10549@p) (G10472@pretty-print ((G10466@rewriter '#f) G10548@x) G10549@p))) (begin (set! G10558@G10474@compile-core-expr-to-port G10474@compile-core-expr-to-port) (set! G10557@G10472@pretty-print G10472@pretty-print) (set! G10556@G10470@compile-core-expr G10470@compile-core-expr) (set! G10555@G10468@expanded->core G10468@expanded->core) (set! G10554@G10466@rewriter G10466@rewriter) (set! G10553@G10464@mutable? G10464@mutable?) (set! G10552@G10462@current-primitive-locations G10462@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G10648@make-collection G10650@current-library-collection G10656@G10651 G10658@G10653 G10660@G10652 G10665@library? G10667@make-library G10669@library-id G10671@library-name G10673@library-version G10675@library-imp* G10677@library-vis* G10679@library-inv* G10681@library-subst G10683@library-env G10685@library-visit-state G10687@library-invoke-state G10689@library-visit-code G10691@library-invoke-code G10693@library-visible? G10695@library-source-file-name G10697@set-library-id! G10699@set-library-name! G10701@set-library-version! G10703@set-library-imp*! G10705@set-library-vis*! G10707@set-library-inv*! G10709@set-library-subst! G10711@set-library-env! G10713@set-library-visit-state! G10715@set-library-invoke-state! G10717@set-library-visit-code! G10719@set-library-invoke-code! G10721@set-library-visible?! G10723@set-library-source-file-name! G10725@rp G10727@find-dependencies G10729@find-library-by G10731@library-path G10733@library-extensions G10735@library-name->file-name G10737@file-locator G10739@serialize-all G10741@current-precompiled-library-loader G10743@try-load-from-file G10745@library-loader G10747@current-library-expander G10749@external-pending-libraries G10751@find-external-library G10753@find-library-by-name G10755@library-exists? G10757@find-library-by-spec/die G10759@label->binding-table G10761@install-library-record G10763@install-library G10765@imported-label->binding G10767@invoke-library G10769@visit-library G10771@invoke-library-by-spec G10773@installed-libraries G10775@library-spec) (begin (set! G10648@make-collection (lambda () ((lambda (G10776@set) ((lambda (G10779@set-cons) (begin (set! G10779@set-cons (lambda (G10784@x G10785@ls) (if (memq G10784@x G10785@ls) G10785@ls (cons G10784@x G10785@ls)))) (lambda G10782 ((lambda (G10783) (if (= G10783 '0) (apply (lambda () G10776@set) G10782) (if (= G10783 '1) (apply (lambda (G10780@x) (set! G10776@set (G10779@set-cons G10780@x G10776@set))) G10782) (error 'apply '"invalid arg count")))) (length G10782))))) '#f)) '()))) (set! G10650@current-library-collection (G10456@G10251@make-parameter (G10648@make-collection) (lambda (G10788@x) (begin (if (procedure? G10788@x) (void) (assertion-violation 'current-library-collection '"not a procedure" G10788@x)) G10788@x)))) (set! G10656@G10651 (make-record-type-descriptor 'library '#f 'G10654 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G10658@G10653 '#f) (set! G10660@G10652 (make-record-constructor-descriptor G10656@G10651 '#f G10658@G10653)) (set! G10665@library? (record-predicate G10656@G10651)) (set! G10667@make-library (record-constructor G10660@G10652)) (set! G10669@library-id (record-accessor G10656@G10651 '0)) (set! G10671@library-name (record-accessor G10656@G10651 '1)) (set! G10673@library-version (record-accessor G10656@G10651 '2)) (set! G10675@library-imp* (record-accessor G10656@G10651 '3)) (set! G10677@library-vis* (record-accessor G10656@G10651 '4)) (set! G10679@library-inv* (record-accessor G10656@G10651 '5)) (set! G10681@library-subst (record-accessor G10656@G10651 '6)) (set! G10683@library-env (record-accessor G10656@G10651 '7)) (set! G10685@library-visit-state (record-accessor G10656@G10651 '8)) (set! G10687@library-invoke-state (record-accessor G10656@G10651 '9)) (set! G10689@library-visit-code (record-accessor G10656@G10651 '10)) (set! G10691@library-invoke-code (record-accessor G10656@G10651 '11)) (set! G10693@library-visible? (record-accessor G10656@G10651 '12)) (set! G10695@library-source-file-name (record-accessor G10656@G10651 '13)) (set! G10697@set-library-id! (record-mutator G10656@G10651 '0)) (set! G10699@set-library-name! (record-mutator G10656@G10651 '1)) (set! G10701@set-library-version! (record-mutator G10656@G10651 '2)) (set! G10703@set-library-imp*! (record-mutator G10656@G10651 '3)) (set! G10705@set-library-vis*! (record-mutator G10656@G10651 '4)) (set! G10707@set-library-inv*! (record-mutator G10656@G10651 '5)) (set! G10709@set-library-subst! (record-mutator G10656@G10651 '6)) (set! G10711@set-library-env! (record-mutator G10656@G10651 '7)) (set! G10713@set-library-visit-state! (record-mutator G10656@G10651 '8)) (set! G10715@set-library-invoke-state! (record-mutator G10656@G10651 '9)) (set! G10717@set-library-visit-code! (record-mutator G10656@G10651 '10)) (set! G10719@set-library-invoke-code! (record-mutator G10656@G10651 '11)) (set! G10721@set-library-visible?! (record-mutator G10656@G10651 '12)) (set! G10723@set-library-source-file-name! (record-mutator G10656@G10651 '13)) (set! G10725@rp (G10453@G10245@make-record-printer 'library (lambda (G10790@x G10791@p) (begin (if (G10665@library? G10790@x) (void) (assertion-violation 'record-type-printer '"not a library")) (display (format '"#<library ~s>" (if (null? (G10673@library-version G10790@x)) (G10671@library-name G10790@x) (append (G10671@library-name G10790@x) (list (G10673@library-version G10790@x))))) G10791@p))))) (set! G10727@find-dependencies (lambda (G10794@ls) (if (null? G10794@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G10729@find-library-by (lambda (G10796@pred) ((letrec ((G10798@f (lambda (G10800@ls) (if (null? G10800@ls) '#f (if (G10796@pred (car G10800@ls)) (car G10800@ls) (G10798@f (cdr G10800@ls))))))) G10798@f) ((G10650@current-library-collection))))) (set! G10731@library-path (G10456@G10251@make-parameter '(".") (lambda (G10802@x) (if (if (list? G10802@x) (begin '#f (for-all string? G10802@x)) '#f) (map (lambda (G10804@x) G10804@x) G10802@x) (assertion-violation 'library-path '"not a list of strings" G10802@x))))) (set! G10733@library-extensions (G10456@G10251@make-parameter '(".sls" ".ss" ".scm") (lambda (G10806@x) (if (if (list? G10806@x) (begin '#f (for-all string? G10806@x)) '#f) (map (lambda (G10808@x) G10808@x) G10806@x) (assertion-violation 'library-extensions '"not a list of strings" G10806@x))))) (set! G10735@library-name->file-name (lambda (G10810@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G10814@G10812 G10815@G10813) ((lambda (G10818@extract G10819@p) ((lambda (G10823@display-hex) (begin (set! G10823@display-hex (lambda (G10838@n) (if (<= '0 G10838@n '9) (display G10838@n G10819@p) (display (integer->char (+ (char->integer '#\A) (- G10838@n '10))) G10819@p)))) (begin ((letrec ((G10824@f (lambda (G10826@ls) (if (null? G10826@ls) (void) (begin (display '"/" G10819@p) (for-each (lambda (G10828@c) (if ((lambda (G10830@t) (if G10830@t G10830@t ((lambda (G10832@t) (if G10832@t G10832@t ((lambda (G10834@t) (if G10834@t G10834@t (begin '#f (memv G10828@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G10828@c '#\9)))) (char<=? '#\A G10828@c '#\Z)))) (char<=? '#\a G10828@c '#\z)) (display G10828@c G10819@p) (begin (display '"%" G10819@p) ((lambda (G10836@n) (begin (G10823@display-hex (quotient G10836@n '16)) (G10823@display-hex (remainder G10836@n '16)))) (char->integer G10828@c))))) (string->list (symbol->string (car G10826@ls)))) (G10824@f (cdr G10826@ls))))))) G10824@f) G10810@x) (G10818@extract)))) '#f)) G10815@G10813 G10814@G10812))))) (set! G10737@file-locator (G10456@G10251@make-parameter (lambda (G10840@x) ((lambda (G10842@str) ((letrec ((G10844@f (lambda (G10846@ls G10847@exts G10848@failed-list) (if (null? G10846@ls) ((lambda () ((lambda (G10860@G10855 G10862@G10857 G10864@G10856 G10869@G10854 G10871@make-library-resolution-condition G10873@G10852 G10875@G10853 G10877@library-resolution-condition? G10879@condition-library G10881@condition-files) (begin (set! G10860@G10855 (make-record-type-descriptor '&library-resolution &condition-rtd 'G10858 '#f '#f '#((immutable library) (immutable files)))) (set! G10862@G10857 '#f) (set! G10864@G10856 (make-record-constructor-descriptor G10860@G10855 &condition-rcd G10862@G10857)) (set! G10869@G10854 (record-predicate G10860@G10855)) (set! G10871@make-library-resolution-condition (record-constructor G10864@G10856)) (set! G10873@G10852 (record-accessor G10860@G10855 '0)) (set! G10875@G10853 (record-accessor G10860@G10855 '1)) (set! G10877@library-resolution-condition? (condition-predicate G10860@G10855)) (set! G10879@condition-library (condition-accessor G10860@G10855 G10873@G10852)) (set! G10881@condition-files (condition-accessor G10860@G10855 G10875@G10853)) (raise (condition (G19185@G18951@make-error) (G19211@G19037@make-who-condition 'expander) (G19165@G18887@make-message-condition '"cannot locate library in library-path") (G10871@make-library-resolution-condition G10840@x (reverse G10848@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G10847@exts) (G10844@f (cdr G10846@ls) (G10733@library-extensions) G10848@failed-list) ((lambda (G10882@name) (if (file-exists? G10882@name) G10882@name (G10844@f G10846@ls (cdr G10847@exts) (cons G10882@name G10848@failed-list)))) (string-append (car G10846@ls) G10842@str (car G10847@exts)))))))) G10844@f) (G10731@library-path) (G10733@library-extensions) '())) (G10735@library-name->file-name G10840@x))) (lambda (G10884@f) (if (procedure? G10884@f) G10884@f (assertion-violation 'file-locator '"not a procedure" G10884@f))))) (set! G10739@serialize-all (lambda (G10886@serialize G10887@compile) ((lambda (G10891@library-desc) (begin (set! G10891@library-desc (lambda (G10894@x) (list (G10669@library-id G10894@x) (G10671@library-name G10894@x)))) (for-each (lambda (G10892@x) (if (G10695@library-source-file-name G10892@x) (G10886@serialize (G10695@library-source-file-name G10892@x) (list (G10669@library-id G10892@x) (G10671@library-name G10892@x) (G10673@library-version G10892@x) (map G10891@library-desc (G10675@library-imp* G10892@x)) (map G10891@library-desc (G10677@library-vis* G10892@x)) (map G10891@library-desc (G10679@library-inv* G10892@x)) (G10681@library-subst G10892@x) (G10683@library-env G10892@x) (G10887@compile (G10689@library-visit-code G10892@x)) (G10887@compile (G10691@library-invoke-code G10892@x)) (G10693@library-visible? G10892@x))) (void))) ((G10650@current-library-collection))))) '#f))) (set! G10741@current-precompiled-library-loader (G10456@G10251@make-parameter (lambda (G10896@filename G10897@sk) '#f))) (set! G10743@try-load-from-file (lambda (G10900@filename) ((G10741@current-precompiled-library-loader) G10900@filename (lambda G10938 ((lambda (G10939) (if (= G10939 '11) (apply (lambda (G10902@id G10903@name G10904@ver G10905@imp* G10906@vis* G10907@inv* G10908@exp-subst G10909@exp-env G10910@visit-proc G10911@invoke-proc G10912@visible?) ((letrec ((G10924@f (lambda (G10926@deps) (if (null? G10926@deps) (begin (G10763@install-library G10902@id G10903@name G10904@ver G10905@imp* G10906@vis* G10907@inv* G10908@exp-subst G10909@exp-env G10910@visit-proc G10911@invoke-proc '#f '#f G10912@visible? '#f) '#t) ((lambda (G10928@d) ((lambda (G10930@label G10931@dname) ((lambda (G10934@l) (if (if (G10665@library? G10934@l) (begin '#f (eq? G10930@label (G10669@library-id G10934@l))) '#f) (G10924@f (cdr G10926@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source.\n" G10903@name G10931@dname G10900@filename) '#f))) (G10753@find-library-by-name G10931@dname))) (car G10928@d) (cadr G10928@d))) (car G10926@deps)))))) G10924@f) (append G10905@imp* G10906@vis* G10907@inv*))) G10938) (if (>= G10939 '0) (apply (lambda G10936@others '#f) G10938) (error 'apply '"invalid arg count")))) (length G10938)))))) (set! G10745@library-loader (G10456@G10251@make-parameter (lambda (G10940@x) ((lambda (G10942@file-name) (if (not G10942@file-name) (assertion-violation '#f '"cannot file library" G10940@x) ((lambda (G10944@t) (if G10944@t G10944@t (begin '#f ((G10747@current-library-expander) (G10455@G10249@read-library-source-file G10942@file-name) G10942@file-name (lambda (G10946@name) (if (equal? G10946@name G10940@x) (void) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G10950@G10948 G10951@G10949) ((lambda (G10954@e G10955@p) (begin (display '"expected to find library " G10955@p) (write G10940@x G10955@p) (display '" in file " G10955@p) (display G10942@file-name G10955@p) (display '", found " G10955@p) (write G10946@name G10955@p) (display '" instead" G10955@p) (G10954@e))) G10951@G10949 G10950@G10948)))))))))) (G10743@try-load-from-file G10942@file-name)))) ((G10737@file-locator) G10940@x))) (lambda (G10958@f) (if (procedure? G10958@f) G10958@f (assertion-violation 'library-locator '"not a procedure" G10958@f))))) (set! G10747@current-library-expander (G10456@G10251@make-parameter (lambda (G10960@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G10962@f) (if (procedure? G10962@f) G10962@f (assertion-violation 'library-expander '"not a procedure" G10962@f))))) (set! G10749@external-pending-libraries (G10456@G10251@make-parameter '())) (set! G10751@find-external-library (lambda (G10964@name) (begin (if (member G10964@name (G10749@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G10964@name) (void)) ((lambda (G10968@G10966@external-pending-libraries G10969@G10967@external-pending-libraries) ((lambda (G10972@swap) (dynamic-wind G10972@swap (lambda () (begin ((G10745@library-loader) G10964@name) ((lambda (G10974@t) (if G10974@t G10974@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G10964@name)))) (G10729@find-library-by (lambda (G10976@x) (equal? (G10671@library-name G10976@x) G10964@name)))))) G10972@swap)) (lambda () ((lambda (G10978@t) (begin (G10968@G10966@external-pending-libraries G10969@G10967@external-pending-libraries) (set! G10969@G10967@external-pending-libraries G10978@t))) (G10968@G10966@external-pending-libraries))))) G10749@external-pending-libraries (cons G10964@name (G10749@external-pending-libraries)))))) (set! G10753@find-library-by-name (lambda (G10980@name) ((lambda (G10982@t) (if G10982@t G10982@t (begin '#f (G10751@find-external-library G10980@name)))) (G10729@find-library-by (lambda (G10984@x) (equal? (G10671@library-name G10984@x) G10980@name)))))) (set! G10755@library-exists? (lambda (G10986@name) (if (G10729@find-library-by (lambda (G10988@x) (equal? (G10671@library-name G10988@x) G10986@name))) (begin '#f '#t) '#f))) (set! G10757@find-library-by-spec/die (lambda (G10990@spec) ((lambda (G10992@id) ((lambda (G10994@t) (if G10994@t G10994@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G10990@spec)))) (G10729@find-library-by (lambda (G10996@x) (eq? G10992@id (G10669@library-id G10996@x)))))) (car G10990@spec)))) (set! G10759@label->binding-table (make-eq-hashtable)) (set! G10761@install-library-record (lambda (G10998@lib) (begin ((lambda (G11000@exp-env) (for-each (lambda (G11002@x) ((lambda (G11004@label G11005@binding) ((lambda (G11008@binding) (hashtable-set! G10759@label->binding-table G11004@label G11008@binding)) ((lambda (G11010@t) (if (eqv? G11010@t 'global) (cons 'global (cons G10998@lib (cdr G11005@binding))) (if (eqv? G11010@t 'global-macro) (cons 'global-macro (cons G10998@lib (cdr G11005@binding))) (if (eqv? G11010@t 'global-macro!) (cons 'global-macro! (cons G10998@lib (cdr G11005@binding))) G11005@binding)))) (car G11005@binding)))) (car G11002@x) (cdr G11002@x))) G11000@exp-env)) (G10683@library-env G10998@lib)) ((G10650@current-library-collection) G10998@lib)))) (set! G10763@install-library (lambda (G11011@id G11012@name G11013@ver G11014@imp* G11015@vis* G11016@inv* G11017@exp-subst G11018@exp-env G11019@visit-proc G11020@invoke-proc G11021@visit-code G11022@invoke-code G11023@visible? G11024@source-file-name) ((lambda (G11039@imp-lib* G11040@vis-lib* G11041@inv-lib*) (begin (if (if (symbol? G11011@id) (if (list? G11012@name) (begin '#f (list? G11013@ver)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" G11011@id G11012@name G11013@ver)) (if (G10755@library-exists? G11012@name) (assertion-violation 'install-library '"library is already installed" G11012@name) (void)) ((lambda (G11045@lib) (G10761@install-library-record G11045@lib)) (G10667@make-library G11011@id G11012@name G11013@ver G11039@imp-lib* G11040@vis-lib* G11041@inv-lib* G11017@exp-subst G11018@exp-env G11019@visit-proc G11020@invoke-proc G11021@visit-code G11022@invoke-code G11023@visible? G11024@source-file-name)))) (map G10757@find-library-by-spec/die G11014@imp*) (map G10757@find-library-by-spec/die G11015@vis*) (map G10757@find-library-by-spec/die G11016@inv*)))) (set! G10765@imported-label->binding (lambda (G11047@lab) (hashtable-ref G10759@label->binding-table G11047@lab '#f))) (set! G10767@invoke-library (lambda (G11049@lib) ((lambda (G11051@invoke) (if (procedure? G11051@invoke) (begin (G10715@set-library-invoke-state! G11049@lib (lambda () (assertion-violation 'invoke '"circularity detected" G11049@lib))) (for-each G10767@invoke-library (G10679@library-inv* G11049@lib)) (G10715@set-library-invoke-state! G11049@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G11049@lib))) (G11051@invoke) (G10715@set-library-invoke-state! G11049@lib '#t)) (void))) (G10687@library-invoke-state G11049@lib)))) (set! G10769@visit-library (lambda (G11053@lib) ((lambda (G11055@visit) (if (procedure? G11055@visit) (begin (G10713@set-library-visit-state! G11053@lib (lambda () (assertion-violation 'visit '"circularity detected" G11053@lib))) (for-each G10767@invoke-library (G10677@library-vis* G11053@lib)) (G10713@set-library-visit-state! G11053@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G11053@lib))) (G11055@visit) (G10713@set-library-visit-state! G11053@lib '#t)) (void))) (G10685@library-visit-state G11053@lib)))) (set! G10771@invoke-library-by-spec (lambda (G11057@spec) (G10767@invoke-library (G10757@find-library-by-spec/die G11057@spec)))) (set! G10773@installed-libraries (lambda G11067 ((lambda (G11068) (if (= G11068 '1) (apply (lambda (G11059@all?) ((letrec ((G11061@f (lambda (G11063@ls) (if (null? G11063@ls) '() (if ((lambda (G11065@t) (if G11065@t G11065@t (begin '#f (G10693@library-visible? (car G11063@ls))))) G11059@all?) (cons (car G11063@ls) (G11061@f (cdr G11063@ls))) (G11061@f (cdr G11063@ls))))))) G11061@f) ((G10650@current-library-collection)))) G11067) (if (= G11068 '0) (apply (lambda () (G10773@installed-libraries '#f)) G11067) (error 'apply '"invalid arg count")))) (length G11067)))) (set! G10775@library-spec (lambda (G11069@x) (begin (if (G10665@library? G11069@x) (void) (assertion-violation 'library-spec '"not a library" G11069@x)) (list (G10669@library-id G11069@x) (G10671@library-name G11069@x) (G10673@library-version G11069@x))))) (begin (set! G11131@G10775@library-spec G10775@library-spec) (set! G11130@G10773@installed-libraries G10773@installed-libraries) (set! G11129@G10771@invoke-library-by-spec G10771@invoke-library-by-spec) (set! G11128@G10769@visit-library G10769@visit-library) (set! G11127@G10767@invoke-library G10767@invoke-library) (set! G11126@G10765@imported-label->binding G10765@imported-label->binding) (set! G11125@G10763@install-library G10763@install-library) (set! G11124@G10761@install-library-record G10761@install-library-record) (set! G11123@G10759@label->binding-table G10759@label->binding-table) (set! G11122@G10757@find-library-by-spec/die G10757@find-library-by-spec/die) (set! G11121@G10755@library-exists? G10755@library-exists?) (set! G11120@G10753@find-library-by-name G10753@find-library-by-name) (set! G11119@G10751@find-external-library G10751@find-external-library) (set! G11118@G10749@external-pending-libraries G10749@external-pending-libraries) (set! G11117@G10747@current-library-expander G10747@current-library-expander) (set! G11116@G10745@library-loader G10745@library-loader) (set! G11115@G10743@try-load-from-file G10743@try-load-from-file) (set! G11114@G10741@current-precompiled-library-loader G10741@current-precompiled-library-loader) (set! G11113@G10739@serialize-all G10739@serialize-all) (set! G11112@G10737@file-locator G10737@file-locator) (set! G11111@G10735@library-name->file-name G10735@library-name->file-name) (set! G11110@G10733@library-extensions G10733@library-extensions) (set! G11109@G10731@library-path G10731@library-path) (set! G11108@G10729@find-library-by G10729@find-library-by) (set! G11107@G10727@find-dependencies G10727@find-dependencies) (set! G11106@G10725@rp G10725@rp) (set! G11105@G10723@set-library-source-file-name! G10723@set-library-source-file-name!) (set! G11104@G10721@set-library-visible?! G10721@set-library-visible?!) (set! G11103@G10719@set-library-invoke-code! G10719@set-library-invoke-code!) (set! G11102@G10717@set-library-visit-code! G10717@set-library-visit-code!) (set! G11101@G10715@set-library-invoke-state! G10715@set-library-invoke-state!) (set! G11100@G10713@set-library-visit-state! G10713@set-library-visit-state!) (set! G11099@G10711@set-library-env! G10711@set-library-env!) (set! G11098@G10709@set-library-subst! G10709@set-library-subst!) (set! G11097@G10707@set-library-inv*! G10707@set-library-inv*!) (set! G11096@G10705@set-library-vis*! G10705@set-library-vis*!) (set! G11095@G10703@set-library-imp*! G10703@set-library-imp*!) (set! G11094@G10701@set-library-version! G10701@set-library-version!) (set! G11093@G10699@set-library-name! G10699@set-library-name!) (set! G11092@G10697@set-library-id! G10697@set-library-id!) (set! G11091@G10695@library-source-file-name G10695@library-source-file-name) (set! G11090@G10693@library-visible? G10693@library-visible?) (set! G11089@G10691@library-invoke-code G10691@library-invoke-code) (set! G11088@G10689@library-visit-code G10689@library-visit-code) (set! G11087@G10687@library-invoke-state G10687@library-invoke-state) (set! G11086@G10685@library-visit-state G10685@library-visit-state) (set! G11085@G10683@library-env G10683@library-env) (set! G11084@G10681@library-subst G10681@library-subst) (set! G11083@G10679@library-inv* G10679@library-inv*) (set! G11082@G10677@library-vis* G10677@library-vis*) (set! G11081@G10675@library-imp* G10675@library-imp*) (set! G11080@G10673@library-version G10673@library-version) (set! G11079@G10671@library-name G10671@library-name) (set! G11078@G10669@library-id G10669@library-id) (set! G11077@G10667@make-library G10667@make-library) (set! G11076@G10665@library? G10665@library?) (set! G11075@G10660@G10652 G10660@G10652) (set! G11074@G10658@G10653 G10658@G10653) (set! G11073@G10656@G10651 G10656@G10651) (set! G11072@G10650@current-library-collection G10650@current-library-collection) (set! G11071@G10648@make-collection G10648@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G11134@build-global-define G11266@build-lambda G11268@build-case-lambda G11270@build-let G11342@build-sequence G11344@build-void G11346@build-letrec G11348@build-letrec* G11350@build-library-letrec* G11352@build-receive) (begin (set! G11134@build-global-define (lambda (G11353@x) (G11344@build-void))) (set! G11266@build-lambda (lambda (G11355@ae G11356@vars G11357@exp) (list 'lambda G11356@vars G11357@exp))) (set! G11268@build-case-lambda (lambda (G11361@ae G11362@vars* G11363@exp*) ((lambda (G11368@build-error G11370@build-pred G11372@build-apply G11374@expand-case-lambda) (begin (set! G11368@build-error (lambda (G11421@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G11370@build-pred (lambda (G11399@ae G11400@n G11401@vars) (call-with-values (lambda () ((letrec ((G11407@f (lambda (G11409@vars G11410@count) (if (pair? G11409@vars) (G11407@f (cdr G11409@vars) (+ G11410@count '1)) (if (null? G11409@vars) (values G11410@count '=) (values G11410@count '>=)))))) G11407@f) G11401@vars '0)) (lambda (G11413@G11405 G11414@G11406) ((lambda (G11417@pred G11418@count) (list (list 'primitive G11417@pred) G11400@n (list 'quote G11418@count))) G11414@G11406 G11413@G11405))))) (set! G11372@build-apply (lambda (G11391@ae G11392@g G11393@vars G11394@exp) (list '(primitive apply) (G11266@build-lambda G11391@ae G11393@vars G11394@exp) G11392@g))) (set! G11374@expand-case-lambda (lambda (G11375@ae G11376@vars G11377@exp*) ((lambda (G11381@g G11382@n) (list 'lambda G11381@g (G11270@build-let G11375@ae (list G11382@n) (list (list '(primitive length) G11381@g)) ((letrec ((G11385@f (lambda (G11387@vars* G11388@exp*) (if (null? G11387@vars*) (G11368@build-error G11375@ae) (list 'if (G11370@build-pred G11375@ae G11382@n (car G11387@vars*)) (G11372@build-apply G11375@ae G11381@g (car G11387@vars*) (car G11388@exp*)) (G11385@f (cdr G11387@vars*) (cdr G11388@exp*))))))) G11385@f) G11362@vars* G11377@exp*)))) (gensym) (gensym)))) (if (= (length G11363@exp*) '1) (G11266@build-lambda G11361@ae (car G11362@vars*) (car G11363@exp*)) (G11374@expand-case-lambda G11361@ae G11362@vars* G11363@exp*)))) '#f '#f '#f '#f))) (set! G11270@build-let (lambda (G11423@ae G11424@lhs* G11425@rhs* G11426@body) (cons (G11266@build-lambda G11423@ae G11424@lhs* G11426@body) G11425@rhs*))) (set! G11342@build-sequence (lambda (G11431@ae G11432@exps) ((letrec ((G11435@loop (lambda (G11437@exps) (if (null? (cdr G11437@exps)) (car G11437@exps) (if (equal? (car G11437@exps) (G11344@build-void)) (G11435@loop (cdr G11437@exps)) (cons 'begin G11437@exps)))))) G11435@loop) G11432@exps))) (set! G11344@build-void (lambda () '((primitive void)))) (set! G11346@build-letrec (lambda (G11439@ae G11440@vars G11441@val-exps G11442@body-exp) (if (null? G11440@vars) G11442@body-exp (list 'letrec (map list G11440@vars G11441@val-exps) G11442@body-exp)))) (set! G11348@build-letrec* (lambda (G11447@ae G11448@vars G11449@val-exps G11450@body-exp) (if (null? G11448@vars) G11450@body-exp (G11270@build-let G11447@ae G11448@vars (map (lambda (G11455@x) (list 'quote '#f)) G11448@vars) (G11342@build-sequence G11447@ae (append (map (lambda (G11457@lhs G11458@rhs) (list 'set! G11457@lhs G11458@rhs)) G11448@vars G11449@val-exps) (list G11450@body-exp))))))) (set! G11350@build-library-letrec* (lambda (G11461@ae G11462@name G11463@vars G11464@locs G11465@val-exps G11466@body-exp) (list 'library-letrec* G11462@name (map list G11463@vars G11464@locs G11465@val-exps) G11466@body-exp))) (set! G11352@build-receive (lambda (G11473@ae G11474@vars G11475@producer G11476@body*) (begin (display '"************** in ") (cons 'receive (cons G11474@vars (cons G11475@producer G11476@body*)))))) (begin (set! G11490@G11352@build-receive G11352@build-receive) (set! G11489@G11350@build-library-letrec* G11350@build-library-letrec*) (set! G11488@G11348@build-letrec* G11348@build-letrec*) (set! G11487@G11346@build-letrec G11346@build-letrec) (set! G11486@G11344@build-void G11344@build-void) (set! G11485@G11342@build-sequence G11342@build-sequence) (set! G11484@G11270@build-let G11270@build-let) (set! G11483@G11268@build-case-lambda G11268@build-case-lambda) (set! G11482@G11266@build-lambda G11266@build-lambda) (set! G11481@G11134@build-global-define G11134@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G11503@set-cons G11505@set-union G11510@top-mark* G11512@top-marked? G11514@gen-lexical G11516@gen-global G11518@gen-label G11520@gen-top-level-label G11522@gen-define-label+loc G11524@gen-define-label G11530@G11525 G11532@G11527 G11534@G11526 G11539@rib? G11541@make-rib G11543@rib-sym* G11545@rib-mark** G11547@rib-label* G11549@rib-sealed/freq G11551@set-rib-sym*! G11553@set-rib-mark**! G11555@set-rib-label*! G11557@set-rib-sealed/freq! G11559@make-empty-rib G11561@extend-rib! G11563@make-rib-map G11565@seal-rib! G11567@unseal-rib! G11569@make-full-rib G11575@G11570 G11577@G11572 G11579@G11571 G11584@stx? G11586@make-stx G11588@stx-expr G11590@stx-mark* G11592@stx-subst* G11594@stx-ae* G11596@set-stx-expr! G11598@set-stx-mark*! G11600@set-stx-subst*! G11602@set-stx-ae*! G11604@rp G11606@datum->stx G11608@gen-mark G11610@anti-mark G11612@anti-mark? G11614@join-wraps G11616@mkstx G11618@add-mark G11620@add-subst G11622@syntax-kind? G11624@syntax-vector->list G11626@syntax-pair? G11628@syntax-vector? G11630@syntax-null? G11632@syntax-list? G11634@syntax-car G11636@syntax-cdr G11638@syntax->list G11640@id? G11642@id->sym G11644@same-marks? G11646@bound-id=? G11648@free-id=? G11650@valid-bound-ids? G11652@distinct-bound-ids? G11654@bound-id-member? G11656@self-evaluating? G11658@strip-annotations G11660@strip G11662@stx->datum G11664@same-marks*? G11666@id->label G11668@id->real-label G11670@label->binding G11672@make-binding G11674@binding-type G11676@binding-value G11678@raise-unbound-error G11680@syntax-type G11703@sanitize-binding G11705@make-variable-transformer G11707@variable-transformer? G11709@variable-transformer-procedure G11711@make-eval-transformer G12099@parse-define G12101@parse-define-syntax G12103@scheme-stx-hashtable G12105@scheme-stx G12107@lexical-var G12109@lexical-mutable? G12111@set-lexical-mutable! G12113@add-lexical G12115@add-lexicals G12117@letrec-helper G12119@letrec-transformer G12121@letrec*-transformer G12123@fluid-let-syntax-transformer G12125@type-descriptor-transformer G12127@record-type-descriptor-transformer G12129@record-constructor-descriptor-transformer G12131@when-transformer G12133@unless-transformer G12135@if-transformer G12137@case-transformer G12139@quote-transformer G12141@case-lambda-transformer G12143@lambda-transformer G12145@bless G12147@with-syntax-macro G12149@invalid-fmls-error G12151@let-macro G12153@let-values-macro G12155@let*-values-macro G12157@trace-lambda-macro G12159@trace-define-macro G12161@trace-define-syntax-macro G12163@trace-let/rec-syntax G12165@trace-let-syntax-macro G12167@trace-letrec-syntax-macro G12169@guard-macro G12171@define-enumeration-macro G12173@time-macro G12175@delay-macro G12177@assert-macro G12179@endianness-macro G12181@identifier-syntax-macro G12183@do-macro G12185@let*-macro G12187@or-macro G12189@and-macro G12191@cond-macro G12193@do-include G12195@include-macro G12197@include-into-macro G12199@syntax-rules-macro G12201@quasiquote-macro G12203@quasisyntax-macro G12205@define-struct-macro G12207@define-record-type-macro G12209@define-condition-type-macro G12211@incorrect-usage-macro G12213@parameterize-transformer G12215@foreign-call-transformer G12217@convert-pattern G12219@syntax-dispatch G12221@ellipsis? G12223@underscore? G12225@verify-literals G12227@syntax-case-transformer G12229@ellipsis-map G12231@syntax-transformer G12233@core-macro-transformer G12235@file-options-macro G12237@symbol-macro G12239@macro-transformer G12241@local-macro-transformer G12243@do-macro-call G12245@chi-macro G12247@chi-local-macro G12249@chi-global-macro G12251@chi-expr* G12253@chi-application G12255@chi-expr G12257@chi-set! G12259@verify-formals G12261@chi-lambda-clause G12263@chi-lambda-clause* G12265@chi-defun G12267@chi-rhs G12269@expand-interaction-rhs*/init* G12271@chi-rhs* G12273@find-bound=? G12275@find-dups G12277@chi-internal G12279@parse-module G12285@G12280 G12287@G12282 G12289@G12281 G12294@module-interface? G12296@make-module-interface G12298@module-interface-first-mark G12300@module-interface-exp-id-vec G12302@module-interface-exp-lab-vec G12304@set-module-interface-first-mark! G12306@set-module-interface-exp-id-vec! G12308@set-module-interface-exp-lab-vec! G12310@module-interface-exp-id* G12312@chi-internal-module G12314@chi-body* G12316@expand-transformer G12318@parse-exports G12320@parse-library-name G12322@parse-library G12324@parse-import-spec* G12326@make-top-rib G12328@make-collector G12330@inv-collector G12332@vis-collector G12334@imp-collector G12336@chi-library-internal G12338@chi-interaction-expr G12340@library-body-expander G12342@core-library-expander G12344@parse-top-level-program G12346@top-level-expander G12352@G12347 G12354@G12349 G12356@G12348 G12361@env? G12363@make-env G12365@env-names G12367@env-labels G12369@env-itc G12371@set-env-names! G12373@set-env-labels! G12375@set-env-itc! G12377@rp G12383@G12378 G12385@G12380 G12387@G12379 G12392@interaction-env? G12394@make-interaction-env G12396@interaction-env-rib G12398@interaction-env-r G12400@interaction-env-locs G12402@set-interaction-env-rib! G12404@set-interaction-env-r! G12406@set-interaction-env-locs! G12408@rp G12410@interaction-environment-symbols G12412@environment-symbols G12414@environment? G12416@environment G12418@null-environment G12420@scheme-report-environment G12422@expand G12424@eval G12426@library-expander G12428@boot-library-expand G12430@rev-map-append G12432@build-exports G12434@make-export-subst G12436@make-export-env/macros G12438@generate-temporaries G12440@free-identifier=? G12442@bound-identifier=? G12444@extract-position-condition G12446@syntax-error G12448@extract-trace G12450@syntax-violation* G12452@syntax-violation G12454@identifier? G12456@datum->syntax G12458@syntax->datum G12460@compile-r6rs-top-level G12462@pre-compile-r6rs-top-level G12464@interaction-environment G12466@top-level-context) (begin (set! G11503@set-cons (lambda (G12467@x G12468@ls) (if (memq G12467@x G12468@ls) G12468@ls (cons G12467@x G12468@ls)))) (set! G11505@set-union (lambda (G12471@ls1 G12472@ls2) (if (null? G12471@ls1) G12472@ls2 (if (memq (car G12471@ls1) G12472@ls2) (G11505@set-union (cdr G12471@ls1) G12472@ls2) (cons (car G12471@ls1) (G11505@set-union (cdr G12471@ls1) G12472@ls2)))))) (set! G11510@top-mark* '(top)) (set! G11512@top-marked? (lambda (G12475@m*) (memq 'top G12475@m*))) (set! G11514@gen-lexical (lambda (G12477@sym) (if (symbol? G12477@sym) (gensym G12477@sym) (if (G11584@stx? G12477@sym) (G11514@gen-lexical (G11642@id->sym G12477@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G12477@sym))))) (set! G11516@gen-global (lambda (G12479@x) (G11514@gen-lexical G12479@x))) (set! G11518@gen-label (lambda (G12481@_) (gensym))) (set! G11520@gen-top-level-label (lambda (G12483@id G12484@rib) ((lambda (G12488@find) (begin (set! G12488@find (lambda (G12499@sym G12500@mark* G12501@sym* G12502@mark** G12503@label*) (if (pair? G12501@sym*) (begin '#f (if (if (eq? G12499@sym (car G12501@sym*)) (begin '#f (G11644@same-marks? G12500@mark* (car G12502@mark**))) '#f) (car G12503@label*) (G12488@find G12499@sym G12500@mark* (cdr G12501@sym*) (cdr G12502@mark**) (cdr G12503@label*)))) '#f))) ((lambda (G12489@sym G12490@mark*) ((lambda (G12493@sym*) ((lambda (G12495@t) (if G12495@t ((lambda (G12497@label) (if (G11126@G10765@imported-label->binding G12497@label) (gensym) G12497@label)) G12495@t) (gensym))) (if (memq G12489@sym (G11543@rib-sym* G12484@rib)) (begin '#f (G12488@find G12489@sym G12490@mark* G12493@sym* (G11545@rib-mark** G12484@rib) (G11547@rib-label* G12484@rib))) '#f))) (G11543@rib-sym* G12484@rib))) (G11642@id->sym G12483@id) (G11590@stx-mark* G12483@id)))) '#f))) (set! G11522@gen-define-label+loc (lambda (G12509@id G12510@rib) ((lambda (G12513@t) (if G12513@t ((lambda (G12515@env) ((lambda (G12517@label G12518@locs) (values G12517@label ((lambda (G12521@t) (if G12521@t (cdr G12521@t) ((lambda (G12523@loc) (begin (G12406@set-interaction-env-locs! G12515@env (cons (cons G12517@label G12523@loc) G12518@locs)) G12523@loc)) (G11514@gen-lexical G12509@id)))) (assq G12517@label G12518@locs)))) (G11520@gen-top-level-label G12509@id G12510@rib) (G12400@interaction-env-locs G12515@env))) G12513@t) (values (gensym) (G11514@gen-lexical G12509@id)))) (G12466@top-level-context)))) (set! G11524@gen-define-label (lambda (G12525@id G12526@rib) (if (G12466@top-level-context) (G11520@gen-top-level-label G12525@id G12526@rib) (gensym)))) (set! G11530@G11525 (make-record-type-descriptor 'rib '#f 'G11528 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! G11532@G11527 '#f) (set! G11534@G11526 (make-record-constructor-descriptor G11530@G11525 '#f G11532@G11527)) (set! G11539@rib? (record-predicate G11530@G11525)) (set! G11541@make-rib (record-constructor G11534@G11526)) (set! G11543@rib-sym* (record-accessor G11530@G11525 '0)) (set! G11545@rib-mark** (record-accessor G11530@G11525 '1)) (set! G11547@rib-label* (record-accessor G11530@G11525 '2)) (set! G11549@rib-sealed/freq (record-accessor G11530@G11525 '3)) (set! G11551@set-rib-sym*! (record-mutator G11530@G11525 '0)) (set! G11553@set-rib-mark**! (record-mutator G11530@G11525 '1)) (set! G11555@set-rib-label*! (record-mutator G11530@G11525 '2)) (set! G11557@set-rib-sealed/freq! (record-mutator G11530@G11525 '3)) (set! G11559@make-empty-rib (lambda () (G11541@make-rib '() '() '() '#f))) (set! G11561@extend-rib! (lambda (G12529@rib G12530@id G12531@label) ((lambda (G12536@find) (begin (set! G12536@find (lambda (G12547@sym G12548@mark* G12549@sym* G12550@mark** G12551@label*) (if (pair? G12549@sym*) (begin '#f (if (if (eq? G12547@sym (car G12549@sym*)) (begin '#f (G11644@same-marks? G12548@mark* (car G12550@mark**))) '#f) G12551@label* (G12536@find G12547@sym G12548@mark* (cdr G12549@sym*) (cdr G12550@mark**) (cdr G12551@label*)))) '#f))) (begin (if (G11549@rib-sealed/freq G12529@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G12529@rib) (void)) ((lambda (G12537@sym G12538@mark*) ((lambda (G12541@sym*) ((lambda (G12543@t) (if G12543@t ((lambda (G12545@p) (if (eq? G12531@label (car G12545@p)) (void) (if (G12466@top-level-context) (set-car! G12545@p G12531@label) (G12452@syntax-violation '#f '"cannot redefine" G12530@id)))) G12543@t) (begin (G11551@set-rib-sym*! G12529@rib (cons G12537@sym G12541@sym*)) (G11553@set-rib-mark**! G12529@rib (cons G12538@mark* (G11545@rib-mark** G12529@rib))) (G11555@set-rib-label*! G12529@rib (cons G12531@label (G11547@rib-label* G12529@rib)))))) (if (memq G12537@sym (G11543@rib-sym* G12529@rib)) (begin '#f (G12536@find G12537@sym G12538@mark* G12541@sym* (G11545@rib-mark** G12529@rib) (G11547@rib-label* G12529@rib))) '#f))) (G11543@rib-sym* G12529@rib))) (G11642@id->sym G12530@id) (G11590@stx-mark* G12530@id))))) '#f))) (set! G11563@make-rib-map (lambda (G12557@sym*) ((lambda (G12559@ht) ((letrec ((G12561@f (lambda (G12563@i G12564@sym*) (if (null? G12564@sym*) G12559@ht (begin (hashtable-update! G12559@ht (car G12564@sym*) (lambda (G12567@x) (cons G12563@i G12567@x)) '()) (G12561@f (+ G12563@i '1) (cdr G12564@sym*))))))) G12561@f) '0 G12557@sym*)) (make-eq-hashtable)))) (set! G11565@seal-rib! (lambda (G12569@rib) ((lambda (G12571@sym*) (if (null? G12571@sym*) (void) (begin (G11551@set-rib-sym*! G12569@rib (list->vector G12571@sym*)) (G11553@set-rib-mark**! G12569@rib (list->vector (G11545@rib-mark** G12569@rib))) (G11555@set-rib-label*! G12569@rib (list->vector (G11547@rib-label* G12569@rib))) (G11557@set-rib-sealed/freq! G12569@rib (G11563@make-rib-map G12571@sym*))))) (G11543@rib-sym* G12569@rib)))) (set! G11567@unseal-rib! (lambda (G12573@rib) (if (G11549@rib-sealed/freq G12573@rib) (begin (G11557@set-rib-sealed/freq! G12573@rib '#f) (G11551@set-rib-sym*! G12573@rib (vector->list (G11543@rib-sym* G12573@rib))) (G11553@set-rib-mark**! G12573@rib (vector->list (G11545@rib-mark** G12573@rib))) (G11555@set-rib-label*! G12573@rib (vector->list (G11547@rib-label* G12573@rib)))) (void)))) (set! G11569@make-full-rib (lambda (G12575@id* G12576@label*) ((lambda (G12579@r) (begin (G11565@seal-rib! G12579@r) G12579@r)) (G11541@make-rib (map G11642@id->sym G12575@id*) (map G11590@stx-mark* G12575@id*) G12576@label* '#f)))) (set! G11575@G11570 (make-record-type-descriptor 'stx '#f 'G11573 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G11577@G11572 '#f) (set! G11579@G11571 (make-record-constructor-descriptor G11575@G11570 '#f G11577@G11572)) (set! G11584@stx? (record-predicate G11575@G11570)) (set! G11586@make-stx (record-constructor G11579@G11571)) (set! G11588@stx-expr (record-accessor G11575@G11570 '0)) (set! G11590@stx-mark* (record-accessor G11575@G11570 '1)) (set! G11592@stx-subst* (record-accessor G11575@G11570 '2)) (set! G11594@stx-ae* (record-accessor G11575@G11570 '3)) (set! G11596@set-stx-expr! (record-mutator G11575@G11570 '0)) (set! G11598@set-stx-mark*! (record-mutator G11575@G11570 '1)) (set! G11600@set-stx-subst*! (record-mutator G11575@G11570 '2)) (set! G11602@set-stx-ae*! (record-mutator G11575@G11570 '3)) (set! G11604@rp (G10453@G10245@make-record-printer 'stx (lambda (G12581@x G12582@p) (begin (display '"#<syntax " G12582@p) (write (G11662@stx->datum G12581@x) G12582@p) ((lambda (G12585@expr) (if (G10448@G10235@annotation? G12585@expr) ((lambda (G12587@src) (if (pair? G12587@src) (begin (display '" [" G12582@p) (display (cdr G12587@src) G12582@p) (display '" of " G12582@p) (display (car G12587@src) G12582@p) (display '"]" G12582@p)) (void))) (G10449@G10237@annotation-source G12585@expr)) (void))) (G11588@stx-expr G12581@x)) (display '">" G12582@p))))) (set! G11606@datum->stx (lambda (G12589@id G12590@datum) (G11586@make-stx G12590@datum (G11590@stx-mark* G12589@id) (G11592@stx-subst* G12589@id) (G11594@stx-ae* G12589@id)))) (set! G11608@gen-mark (lambda () (string '#\m))) (set! G11610@anti-mark '#f) (set! G11612@anti-mark? not) (set! G11614@join-wraps (lambda (G12593@m1* G12594@s1* G12595@ae1* G12596@e) ((lambda (G12602@cancel) (begin (set! G12602@cancel (lambda (G12609@ls1 G12610@ls2) ((letrec ((G12613@f (lambda (G12615@x G12616@ls1) (if (null? G12616@ls1) (cdr G12610@ls2) (cons G12615@x (G12613@f (car G12616@ls1) (cdr G12616@ls1))))))) G12613@f) (car G12609@ls1) (cdr G12609@ls1)))) ((lambda (G12603@m2* G12604@s2* G12605@ae2*) (if (if (not (null? G12593@m1*)) (if (not (null? G12603@m2*)) (begin '#f (G11612@anti-mark? (car G12603@m2*))) '#f) '#f) (values (G12602@cancel G12593@m1* G12603@m2*) (G12602@cancel G12594@s1* G12604@s2*) (G12602@cancel G12595@ae1* G12605@ae2*)) (values (append G12593@m1* G12603@m2*) (append G12594@s1* G12604@s2*) (append G12595@ae1* G12605@ae2*)))) (G11590@stx-mark* G12596@e) (G11592@stx-subst* G12596@e) (G11594@stx-ae* G12596@e)))) '#f))) (set! G11616@mkstx (lambda (G12619@e G12620@m* G12621@s* G12622@ae*) (if (G11584@stx? G12619@e) (call-with-values (lambda () (G11614@join-wraps G12620@m* G12621@s* G12622@ae* G12619@e)) (lambda (G12630@G12627 G12631@G12628 G12632@G12629) ((lambda (G12636@ae* G12637@s* G12638@m*) (G11586@make-stx (G11588@stx-expr G12619@e) G12638@m* G12637@s* G12636@ae*)) G12632@G12629 G12631@G12628 G12630@G12627))) (G11586@make-stx G12619@e G12620@m* G12621@s* G12622@ae*)))) (set! G11618@add-mark (lambda (G12642@m G12643@e G12644@ae) (G11616@mkstx G12643@e (list G12642@m) '(shift) (list G12644@ae)))) (set! G11620@add-subst (lambda (G12648@subst G12649@e) (G11616@mkstx G12649@e '() (list G12648@subst) '()))) (set! G11622@syntax-kind? (lambda (G12652@x G12653@p?) (if (G11584@stx? G12652@x) (G11622@syntax-kind? (G11588@stx-expr G12652@x) G12653@p?) (if (G10448@G10235@annotation? G12652@x) (G11622@syntax-kind? (G10450@G10239@annotation-expression G12652@x) G12653@p?) (G12653@p? G12652@x))))) (set! G11624@syntax-vector->list (lambda (G12656@x) (if (G11584@stx? G12656@x) ((lambda (G12658@ls G12659@m* G12660@s* G12661@ae*) (map (lambda (G12666@x) (G11616@mkstx G12666@x G12659@m* G12660@s* G12661@ae*)) G12658@ls)) (G11624@syntax-vector->list (G11588@stx-expr G12656@x)) (G11590@stx-mark* G12656@x) (G11592@stx-subst* G12656@x) (G11594@stx-ae* G12656@x)) (if (G10448@G10235@annotation? G12656@x) (G11624@syntax-vector->list (G10450@G10239@annotation-expression G12656@x)) (if (vector? G12656@x) (vector->list G12656@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G12656@x)))))) (set! G11626@syntax-pair? (lambda (G12668@x) (G11622@syntax-kind? G12668@x pair?))) (set! G11628@syntax-vector? (lambda (G12670@x) (G11622@syntax-kind? G12670@x vector?))) (set! G11630@syntax-null? (lambda (G12672@x) (G11622@syntax-kind? G12672@x null?))) (set! G11632@syntax-list? (lambda (G12674@x) ((lambda (G12676@t) (if G12676@t G12676@t (begin '#f (if (G11626@syntax-pair? G12674@x) (begin '#f (G11632@syntax-list? (G11636@syntax-cdr G12674@x))) '#f)))) (G11630@syntax-null? G12674@x)))) (set! G11634@syntax-car (lambda (G12678@x) (if (G11584@stx? G12678@x) (G11616@mkstx (G11634@syntax-car (G11588@stx-expr G12678@x)) (G11590@stx-mark* G12678@x) (G11592@stx-subst* G12678@x) (G11594@stx-ae* G12678@x)) (if (G10448@G10235@annotation? G12678@x) (G11634@syntax-car (G10450@G10239@annotation-expression G12678@x)) (if (pair? G12678@x) (car G12678@x) (assertion-violation 'syntax-car '"BUG: not a pair" G12678@x)))))) (set! G11636@syntax-cdr (lambda (G12680@x) (if (G11584@stx? G12680@x) (G11616@mkstx (G11636@syntax-cdr (G11588@stx-expr G12680@x)) (G11590@stx-mark* G12680@x) (G11592@stx-subst* G12680@x) (G11594@stx-ae* G12680@x)) (if (G10448@G10235@annotation? G12680@x) (G11636@syntax-cdr (G10450@G10239@annotation-expression G12680@x)) (if (pair? G12680@x) (cdr G12680@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G12680@x)))))) (set! G11638@syntax->list (lambda (G12682@x) (if (G11626@syntax-pair? G12682@x) (cons (G11634@syntax-car G12682@x) (G11638@syntax->list (G11636@syntax-cdr G12682@x))) (if (G11630@syntax-null? G12682@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G12682@x))))) (set! G11640@id? (lambda (G12684@x) (if (G11584@stx? G12684@x) (begin '#f ((lambda (G12686@expr) (symbol? (if (G10448@G10235@annotation? G12686@expr) (G10447@G10233@annotation-stripped G12686@expr) G12686@expr))) (G11588@stx-expr G12684@x))) '#f))) (set! G11642@id->sym (lambda (G12688@x) (begin (if (G11584@stx? G12688@x) (void) (error 'id->sym '"BUG in ikarus: not an id" G12688@x)) ((lambda (G12690@expr) ((lambda (G12692@sym) (if (symbol? G12692@sym) G12692@sym (error 'id->sym '"BUG in ikarus: not an id" G12688@x))) (if (G10448@G10235@annotation? G12690@expr) (G10447@G10233@annotation-stripped G12690@expr) G12690@expr))) (G11588@stx-expr G12688@x))))) (set! G11644@same-marks? (lambda (G12694@x G12695@y) ((lambda (G12698@t) (if G12698@t G12698@t (begin '#f (if (pair? G12694@x) (if (pair? G12695@y) (if (eq? (car G12694@x) (car G12695@y)) (begin '#f (G11644@same-marks? (cdr G12694@x) (cdr G12695@y))) '#f) '#f) '#f)))) (if (null? G12694@x) (begin '#f (null? G12695@y)) '#f)))) (set! G11646@bound-id=? (lambda (G12700@x G12701@y) (if (eq? (G11642@id->sym G12700@x) (G11642@id->sym G12701@y)) (begin '#f (G11644@same-marks? (G11590@stx-mark* G12700@x) (G11590@stx-mark* G12701@y))) '#f))) (set! G11648@free-id=? (lambda (G12704@i G12705@j) ((lambda (G12708@t0 G12709@t1) (if ((lambda (G12712@t) (if G12712@t G12712@t (begin '#f G12709@t1))) G12708@t0) (eq? G12708@t0 G12709@t1) (eq? (G11642@id->sym G12704@i) (G11642@id->sym G12705@j)))) (G11668@id->real-label G12704@i) (G11668@id->real-label G12705@j)))) (set! G11650@valid-bound-ids? (lambda (G12714@id*) (if (for-all G11640@id? G12714@id*) (begin '#f (G11652@distinct-bound-ids? G12714@id*)) '#f))) (set! G11652@distinct-bound-ids? (lambda (G12716@id*) ((lambda (G12718@t) (if G12718@t G12718@t (begin '#f (if (not (G11654@bound-id-member? (car G12716@id*) (cdr G12716@id*))) (begin '#f (G11652@distinct-bound-ids? (cdr G12716@id*))) '#f)))) (null? G12716@id*)))) (set! G11654@bound-id-member? (lambda (G12720@id G12721@id*) (if (pair? G12721@id*) (begin '#f ((lambda (G12724@t) (if G12724@t G12724@t (begin '#f (G11654@bound-id-member? G12720@id (cdr G12721@id*))))) (G11646@bound-id=? G12720@id (car G12721@id*)))) '#f))) (set! G11656@self-evaluating? (lambda (G12726@x) ((lambda (G12728@t) (if G12728@t G12728@t ((lambda (G12730@t) (if G12730@t G12730@t ((lambda (G12732@t) (if G12732@t G12732@t ((lambda (G12734@t) (if G12734@t G12734@t (begin '#f (bytevector? G12726@x)))) (boolean? G12726@x)))) (char? G12726@x)))) (string? G12726@x)))) (number? G12726@x)))) (set! G11658@strip-annotations (lambda (G12736@x) (if (pair? G12736@x) (cons (G11658@strip-annotations (car G12736@x)) (G11658@strip-annotations (cdr G12736@x))) (if (vector? G12736@x) (vector-map G11658@strip-annotations G12736@x) (if (G10448@G10235@annotation? G12736@x) (G10447@G10233@annotation-stripped G12736@x) G12736@x))))) (set! G11660@strip (lambda (G12738@x G12739@m*) (if (G11512@top-marked? G12739@m*) (if ((lambda (G12742@t) (if G12742@t G12742@t ((lambda (G12744@t) (if G12744@t G12744@t (begin '#f (if (vector? G12738@x) (if (> (vector-length G12738@x) '0) (begin '#f (G10448@G10235@annotation? (vector-ref G12738@x '0))) '#f) '#f)))) (if (pair? G12738@x) (begin '#f (G10448@G10235@annotation? (car G12738@x))) '#f)))) (G10448@G10235@annotation? G12738@x)) (G11658@strip-annotations G12738@x) G12738@x) ((letrec ((G12746@f (lambda (G12748@x) (if (G11584@stx? G12748@x) (G11660@strip (G11588@stx-expr G12748@x) (G11590@stx-mark* G12748@x)) (if (G10448@G10235@annotation? G12748@x) (G10447@G10233@annotation-stripped G12748@x) (if (pair? G12748@x) ((lambda (G12750@a G12751@d) (if (if (eq? G12750@a (car G12748@x)) (begin '#f (eq? G12751@d (cdr G12748@x))) '#f) G12748@x (cons G12750@a G12751@d))) (G12746@f (car G12748@x)) (G12746@f (cdr G12748@x))) (if (vector? G12748@x) ((lambda (G12754@old) ((lambda (G12756@new) (if (for-all eq? G12754@old G12756@new) G12748@x (list->vector G12756@new))) (map G12746@f G12754@old))) (vector->list G12748@x)) G12748@x))))))) G12746@f) G12738@x)))) (set! G11662@stx->datum (lambda (G12758@x) (G11660@strip G12758@x '()))) (set! G11664@same-marks*? (lambda (G12760@mark* G12761@mark** G12762@si) (if (null? G12762@si) '#f (if (G11644@same-marks? G12760@mark* (vector-ref G12761@mark** (car G12762@si))) (car G12762@si) (G11664@same-marks*? G12760@mark* G12761@mark** (cdr G12762@si)))))) (set! G11666@id->label (lambda (G12766@id) ((lambda (G12768@t) (if G12768@t G12768@t (begin '#f ((lambda (G12770@t) (if G12770@t ((lambda (G12772@env) ((lambda (G12774@rib) (call-with-values (lambda () (G11522@gen-define-label+loc G12766@id G12774@rib)) (lambda (G12778@G12776 G12779@G12777) ((lambda (G12782@loc_ G12783@lab) (begin (G11561@extend-rib! G12774@rib G12766@id G12783@lab) G12783@lab)) G12779@G12777 G12778@G12776)))) (G12396@interaction-env-rib G12772@env))) G12770@t) '#f)) (G12466@top-level-context))))) (G11668@id->real-label G12766@id)))) (set! G11668@id->real-label (lambda (G12786@id) ((lambda (G12788@sym) ((letrec ((G12790@search (lambda (G12792@subst* G12793@mark*) (if (null? G12792@subst*) '#f (if (eq? (car G12792@subst*) 'shift) (G12790@search (cdr G12792@subst*) (cdr G12793@mark*)) ((lambda (G12796@rib) ((lambda (G12798@t) (if G12798@t ((lambda (G12800@ht) ((lambda (G12802@si) ((lambda (G12804@i) (if G12804@i (vector-ref (G11547@rib-label* G12796@rib) G12804@i) (G12790@search (cdr G12792@subst*) G12793@mark*))) (if G12802@si (begin '#f (G11664@same-marks*? G12793@mark* (G11545@rib-mark** G12796@rib) (reverse G12802@si))) '#f))) (hashtable-ref G12800@ht G12788@sym '#f))) G12798@t) ((letrec ((G12806@f (lambda (G12808@sym* G12809@mark** G12810@label*) (if (null? G12808@sym*) (G12790@search (cdr G12792@subst*) G12793@mark*) (if (if (eq? (car G12808@sym*) G12788@sym) (begin '#f (G11644@same-marks? (car G12809@mark**) G12793@mark*)) '#f) (car G12810@label*) (G12806@f (cdr G12808@sym*) (cdr G12809@mark**) (cdr G12810@label*))))))) G12806@f) (G11543@rib-sym* G12796@rib) (G11545@rib-mark** G12796@rib) (G11547@rib-label* G12796@rib)))) (G11549@rib-sealed/freq G12796@rib))) (car G12792@subst*))))))) G12790@search) (G11592@stx-subst* G12786@id) (G11590@stx-mark* G12786@id))) (G11642@id->sym G12786@id)))) (set! G11670@label->binding (lambda (G12814@x G12815@r) ((lambda (G12818@t) (if G12818@t ((lambda (G12820@b) (if (if (pair? G12820@b) (begin '#f (eq? (car G12820@b) '$core-rtd)) '#f) (cons '$rtd (map G12145@bless (cdr G12820@b))) (if (if (pair? G12820@b) (begin '#f (eq? (car G12820@b) 'global-rtd)) '#f) ((lambda (G12822@lib G12823@loc) (cons '$rtd (symbol-value G12823@loc))) (cadr G12820@b) (cddr G12820@b)) G12820@b))) G12818@t) ((lambda (G12826@t) (if G12826@t (cdr G12826@t) ((lambda (G12828@t) (if G12828@t ((lambda (G12830@env) ((lambda (G12832@t) (if G12832@t ((lambda (G12834@p) (cons* 'lexical (cdr G12834@p) '#f)) G12832@t) '(displaced-lexical . #f))) (assq G12814@x (G12400@interaction-env-locs G12830@env)))) G12828@t) '(displaced-lexical . #f))) (G12466@top-level-context)))) (assq G12814@x G12815@r)))) (G11126@G10765@imported-label->binding G12814@x)))) (set! G11672@make-binding cons) (set! G11674@binding-type car) (set! G11676@binding-value cdr) (set! G11678@raise-unbound-error (lambda (G12836@id) (G12450@syntax-violation* '#f '"unbound identifier" G12836@id (G19247@G19151@make-undefined-violation)))) (set! G11680@syntax-type (lambda (G12838@e G12839@r) (if (G11640@id? G12838@e) ((lambda (G12842@id) ((lambda (G12844@label) ((lambda (G12846@b) ((lambda (G12848@type) ((lambda () (begin (if G12844@label (void) (G11678@raise-unbound-error G12842@id)) ((lambda (G12850@t) (if (memv G12850@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values G12848@type (G11676@binding-value G12846@b) G12842@id) (values 'other '#f '#f))) G12848@type))))) (G11674@binding-type G12846@b))) (G11670@label->binding G12844@label G12839@r))) (G11666@id->label G12842@id))) G12838@e) (if (G11626@syntax-pair? G12838@e) ((lambda (G12851@id) (if (G11640@id? G12851@id) ((lambda (G12853@label) ((lambda (G12855@b) ((lambda (G12857@type) ((lambda () (begin (if G12853@label (void) (G11678@raise-unbound-error G12851@id)) ((lambda (G12859@t) (if (memv G12859@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values G12857@type (G11676@binding-value G12855@b) G12851@id) (values 'call '#f '#f))) G12857@type))))) (G11674@binding-type G12855@b))) (G11670@label->binding G12853@label G12839@r))) (G11666@id->label G12851@id)) (values 'call '#f '#f))) (G11634@syntax-car G12838@e)) ((lambda (G12860@d) (if (G11656@self-evaluating? G12860@d) (values 'constant G12860@d '#f) (values 'other '#f '#f))) (G11662@stx->datum G12838@e)))))) (set! G11703@sanitize-binding (lambda (G12862@x G12863@src) (if (procedure? G12862@x) (cons* 'local-macro G12862@x G12863@src) (if (if (pair? G12862@x) (if (eq? (car G12862@x) 'macro!) (begin '#f (procedure? (cdr G12862@x))) '#f) '#f) (cons* 'local-macro! (cdr G12862@x) G12863@src) (if (if (pair? G12862@x) (begin '#f (eq? (car G12862@x) '$rtd)) '#f) G12862@x (assertion-violation 'expand '"invalid transformer" G12862@x)))))) (set! G11705@make-variable-transformer (lambda (G12866@x) (if (procedure? G12866@x) (cons 'macro! G12866@x) (assertion-violation 'make-variable-transformer '"not a procedure" G12866@x)))) (set! G11707@variable-transformer? (lambda (G12868@x) (if (pair? G12868@x) (if (eq? (car G12868@x) 'macro!) (begin '#f (procedure? (cdr G12868@x))) '#f) '#f))) (set! G11709@variable-transformer-procedure (lambda (G12870@x) (if (G11707@variable-transformer? G12870@x) (cdr G12870@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G12870@x)))) (set! G11711@make-eval-transformer (lambda (G12872@x) (G11703@sanitize-binding (eval-core (G10555@G10468@expanded->core G12872@x)) G12872@x))) (set! G12099@parse-define (lambda (G12874@x) ((lambda (G12876@t) ((lambda (G12878@ls/false) (if (if G12878@ls/false (begin '#f (apply (lambda (G12880@id G12881@fmls G12882@b G12883@b*) (G11640@id? G12880@id)) G12878@ls/false)) '#f) (apply (lambda (G12888@id G12889@fmls G12890@b G12891@b*) (begin (G12259@verify-formals G12889@fmls G12874@x) (values G12888@id (cons 'defun (cons G12889@fmls (cons G12890@b G12891@b*)))))) G12878@ls/false) ((lambda (G12896@t) ((lambda (G12898@ls/false) (if (if G12898@ls/false (begin '#f (apply (lambda (G12900@id G12901@val) (G11640@id? G12900@id)) G12898@ls/false)) '#f) (apply (lambda (G12904@id G12905@val) (values G12904@id (cons 'expr G12905@val))) G12898@ls/false) ((lambda (G12908@t) ((lambda (G12910@ls/false) (if (if G12910@ls/false (begin '#f (apply (lambda (G12912@id) (G11640@id? G12912@id)) G12910@ls/false)) '#f) (apply (lambda (G12914@id) (values G12914@id (cons 'expr (G12145@bless '(void))))) G12910@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G12908@t))) (G12219@syntax-dispatch G12908@t '(_ any)))) G12896@t))) (G12219@syntax-dispatch G12896@t '(_ any any)))) G12876@t))) (G12219@syntax-dispatch G12876@t '(_ (any . any) any . each-any)))) G12874@x))) (set! G12101@parse-define-syntax (lambda (G12916@x) ((lambda (G12918@t) ((lambda (G12920@ls/false) (if (if G12920@ls/false (begin '#f (apply (lambda (G12922@id G12923@val) (G11640@id? G12922@id)) G12920@ls/false)) '#f) (apply (lambda (G12926@id G12927@val) (values G12926@id G12927@val)) G12920@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G12918@t))) (G12219@syntax-dispatch G12918@t '(_ any any)))) G12916@x))) (set! G12103@scheme-stx-hashtable (make-eq-hashtable)) (set! G12105@scheme-stx (lambda (G12930@sym) ((lambda (G12932@t) (if G12932@t G12932@t (begin '#f ((lambda (G12934@subst) ((lambda (G12936@stx) ((lambda (G12938@stx) ((lambda () (begin (hashtable-set! G12103@scheme-stx-hashtable G12930@sym G12938@stx) G12938@stx)))) ((lambda (G12940@t) (if G12940@t ((lambda (G12942@x) ((lambda (G12944@name G12945@label) (G11620@add-subst (G11541@make-rib (list G12944@name) (list G11510@top-mark*) (list G12945@label) '#f) G12936@stx)) (car G12942@x) (cdr G12942@x))) G12940@t) G12936@stx)) (assq G12930@sym G12934@subst)))) (G11586@make-stx G12930@sym G11510@top-mark* '() '()))) (G11084@G10681@library-subst (G11120@G10753@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G12103@scheme-stx-hashtable G12930@sym '#f)))) (set! G12107@lexical-var car) (set! G12109@lexical-mutable? cdr) (set! G12111@set-lexical-mutable! set-cdr!) (set! G12113@add-lexical (lambda (G12948@lab G12949@lex G12950@r) (cons (cons* G12948@lab 'lexical G12949@lex '#f) G12950@r))) (set! G12115@add-lexicals (lambda (G12954@lab* G12955@lex* G12956@r) (if (null? G12954@lab*) G12956@r (G12115@add-lexicals (cdr G12954@lab*) (cdr G12955@lex*) (G12113@add-lexical (car G12954@lab*) (car G12955@lex*) G12956@r))))) (set! G12117@letrec-helper (lambda (G12960@e G12961@r G12962@mr G12963@build) ((lambda (G12968@t) ((lambda (G12970@ls/false) (if G12970@ls/false (apply (lambda (G12972@lhs* G12973@rhs* G12974@b G12975@b*) (if (not (G11650@valid-bound-ids? G12972@lhs*)) (G12149@invalid-fmls-error G12960@e G12972@lhs*) ((lambda (G12980@lex* G12981@lab*) ((lambda (G12984@rib G12985@r) ((lambda (G12988@body G12989@rhs*) (G12963@build '#f G12980@lex* G12989@rhs* G12988@body)) (G12277@chi-internal (G11620@add-subst G12984@rib (cons G12974@b G12975@b*)) G12985@r G12962@mr) (G12251@chi-expr* (map (lambda (G12992@x) (G11620@add-subst G12984@rib G12992@x)) G12973@rhs*) G12985@r G12962@mr))) (G11569@make-full-rib G12972@lhs* G12981@lab*) (G12115@add-lexicals G12981@lab* G12980@lex* G12961@r))) (map G11514@gen-lexical G12972@lhs*) (map G11518@gen-label G12972@lhs*)))) G12970@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G12968@t))) (G12219@syntax-dispatch G12968@t '(_ #(each (any any)) any . each-any)))) G12960@e))) (set! G12119@letrec-transformer (lambda (G12994@e G12995@r G12996@mr) (G12117@letrec-helper G12994@e G12995@r G12996@mr G11487@G11346@build-letrec))) (set! G12121@letrec*-transformer (lambda (G13000@e G13001@r G13002@mr) (G12117@letrec-helper G13000@e G13001@r G13002@mr G11488@G11348@build-letrec*))) (set! G12123@fluid-let-syntax-transformer (lambda (G13006@e G13007@r G13008@mr) ((lambda (G13013@lookup) (begin (set! G13013@lookup (lambda (G13032@x) ((lambda (G13034@t) (if G13034@t G13034@t (begin '#f (G12452@syntax-violation '#f '"unbound identifier" G13006@e G13032@x)))) (G11666@id->label G13032@x)))) ((lambda (G13014@t) ((lambda (G13016@ls/false) (if G13016@ls/false (apply (lambda (G13018@lhs* G13019@rhs* G13020@b G13021@b*) (if (not (G11650@valid-bound-ids? G13018@lhs*)) (G12149@invalid-fmls-error G13006@e G13018@lhs*) ((lambda (G13026@lab* G13027@rhs*) (G12277@chi-internal (cons G13020@b G13021@b*) (append (map cons G13026@lab* G13027@rhs*) G13007@r) (append (map cons G13026@lab* G13027@rhs*) G13008@mr))) (map G13013@lookup G13018@lhs*) (map (lambda (G13030@x) (G11711@make-eval-transformer (G12316@expand-transformer G13030@x G13008@mr))) G13019@rhs*)))) G13016@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13014@t))) (G12219@syntax-dispatch G13014@t '(_ #(each (any any)) any . each-any)))) G13006@e))) '#f))) (set! G12125@type-descriptor-transformer (lambda (G13036@e G13037@r G13038@mr) ((lambda (G13042@t) ((lambda (G13044@ls/false) (if (if G13044@ls/false (begin '#f (apply (lambda (G13046@id) (G11640@id? G13046@id)) G13044@ls/false)) '#f) (apply (lambda (G13048@id) ((lambda (G13050@lab) ((lambda (G13052@b) ((lambda (G13054@type) ((lambda () (begin (if G13050@lab (void) (G11678@raise-unbound-error G13048@id)) (if (if (eq? G13054@type '$rtd) (begin '#f (not (list? (G11676@binding-value G13052@b)))) '#f) (void) (G12452@syntax-violation '#f '"not a record type" G13036@e)) (list 'quote (G11676@binding-value G13052@b)))))) (G11674@binding-type G13052@b))) (G11670@label->binding G13050@lab G13037@r))) (G11666@id->label G13048@id))) G13044@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13042@t))) (G12219@syntax-dispatch G13042@t '(_ any)))) G13036@e))) (set! G12127@record-type-descriptor-transformer (lambda (G13056@e G13057@r G13058@mr) ((lambda (G13062@t) ((lambda (G13064@ls/false) (if (if G13064@ls/false (begin '#f (apply (lambda (G13066@id) (G11640@id? G13066@id)) G13064@ls/false)) '#f) (apply (lambda (G13068@id) ((lambda (G13070@lab) ((lambda (G13072@b) ((lambda (G13074@type) ((lambda () (begin (if G13070@lab (void) (G11678@raise-unbound-error G13068@id)) (if (if (eq? G13074@type '$rtd) (begin '#f (list? (G11676@binding-value G13072@b))) '#f) (void) (G12452@syntax-violation '#f '"not a record type" G13056@e)) (G12255@chi-expr (car (G11676@binding-value G13072@b)) G13057@r G13058@mr))))) (G11674@binding-type G13072@b))) (G11670@label->binding G13070@lab G13057@r))) (G11666@id->label G13068@id))) G13064@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13062@t))) (G12219@syntax-dispatch G13062@t '(_ any)))) G13056@e))) (set! G12129@record-constructor-descriptor-transformer (lambda (G13076@e G13077@r G13078@mr) ((lambda (G13082@t) ((lambda (G13084@ls/false) (if (if G13084@ls/false (begin '#f (apply (lambda (G13086@id) (G11640@id? G13086@id)) G13084@ls/false)) '#f) (apply (lambda (G13088@id) ((lambda (G13090@lab) ((lambda (G13092@b) ((lambda (G13094@type) ((lambda () (begin (if G13090@lab (void) (G11678@raise-unbound-error G13088@id)) (if (if (eq? G13094@type '$rtd) (begin '#f (list? (G11676@binding-value G13092@b))) '#f) (void) (G12452@syntax-violation '#f '"invalid type" G13076@e)) (G12255@chi-expr (cadr (G11676@binding-value G13092@b)) G13077@r G13078@mr))))) (G11674@binding-type G13092@b))) (G11670@label->binding G13090@lab G13077@r))) (G11666@id->label G13088@id))) G13084@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13082@t))) (G12219@syntax-dispatch G13082@t '(_ any)))) G13076@e))) (set! G12131@when-transformer (lambda (G13096@e G13097@r G13098@mr) ((lambda (G13102@t) ((lambda (G13104@ls/false) (if G13104@ls/false (apply (lambda (G13106@test G13107@e G13108@e*) (list 'if (G12255@chi-expr G13106@test G13097@r G13098@mr) (G11485@G11342@build-sequence '#f (G12251@chi-expr* (cons G13107@e G13108@e*) G13097@r G13098@mr)) (G11486@G11344@build-void))) G13104@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13102@t))) (G12219@syntax-dispatch G13102@t '(_ any any . each-any)))) G13096@e))) (set! G12133@unless-transformer (lambda (G13112@e G13113@r G13114@mr) ((lambda (G13118@t) ((lambda (G13120@ls/false) (if G13120@ls/false (apply (lambda (G13122@test G13123@e G13124@e*) (list 'if (G12255@chi-expr G13122@test G13113@r G13114@mr) (G11486@G11344@build-void) (G11485@G11342@build-sequence '#f (G12251@chi-expr* (cons G13123@e G13124@e*) G13113@r G13114@mr)))) G13120@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13118@t))) (G12219@syntax-dispatch G13118@t '(_ any any . each-any)))) G13112@e))) (set! G12135@if-transformer (lambda (G13128@e G13129@r G13130@mr) ((lambda (G13134@t) ((lambda (G13136@ls/false) (if G13136@ls/false (apply (lambda (G13138@e0 G13139@e1 G13140@e2) (list 'if (G12255@chi-expr G13138@e0 G13129@r G13130@mr) (G12255@chi-expr G13139@e1 G13129@r G13130@mr) (G12255@chi-expr G13140@e2 G13129@r G13130@mr))) G13136@ls/false) ((lambda (G13144@t) ((lambda (G13146@ls/false) (if G13146@ls/false (apply (lambda (G13148@e0 G13149@e1) (list 'if (G12255@chi-expr G13148@e0 G13129@r G13130@mr) (G12255@chi-expr G13149@e1 G13129@r G13130@mr) (G11486@G11344@build-void))) G13146@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13144@t))) (G12219@syntax-dispatch G13144@t '(_ any any)))) G13134@t))) (G12219@syntax-dispatch G13134@t '(_ any any any)))) G13128@e))) (set! G12137@case-transformer (lambda (G13152@e G13153@r G13154@mr) ((lambda (G13159@build-one G13161@build-last) (begin (set! G13159@build-one (lambda (G13216@t G13217@cls G13218@rest) ((lambda (G13222@t) ((lambda (G13224@ls/false) (if G13224@ls/false (apply (lambda (G13226@d* G13227@e G13228@e*) (list 'if ((lambda (G13232@data) (if (= '1 (length G13232@data)) (list '(primitive eqv?) G13216@t (list 'quote (car G13232@data))) (list '(primitive memv) G13216@t (list 'quote G13232@data)))) (G11662@stx->datum G13226@d*)) (G11485@G11342@build-sequence '#f (G12251@chi-expr* (cons G13227@e G13228@e*) G13153@r G13154@mr)) G13218@rest)) G13224@ls/false) ((lambda (G13234@t) ((lambda (G13236@ls/false) (if G13236@ls/false (apply (lambda (G13238@else) (G12452@syntax-violation '#f '"invalid syntax" G13152@e)) G13236@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13234@t))) (G12219@syntax-dispatch G13234@t 'any))) G13222@t))) (G12219@syntax-dispatch G13222@t '(each-any any . each-any)))) G13217@cls))) (set! G13161@build-last (lambda (G13186@t G13187@cls) ((lambda (G13190@t) ((lambda (G13192@ls/false) (if G13192@ls/false (apply (lambda (G13194@d* G13195@e G13196@e*) (G13159@build-one G13186@t G13187@cls (G11486@G11344@build-void))) G13192@ls/false) ((lambda (G13200@t) ((lambda (G13202@ls/false) (if G13202@ls/false (apply (lambda (G13204@else-kwd G13205@x G13206@x*) (if (if (G11640@id? G13204@else-kwd) (begin '#f (G11648@free-id=? G13204@else-kwd (G12105@scheme-stx 'else))) '#f) (G11485@G11342@build-sequence '#f (G12251@chi-expr* (cons G13205@x G13206@x*) G13153@r G13154@mr)) (G12452@syntax-violation '#f '"invalid syntax" G13152@e))) G13202@ls/false) ((lambda (G13210@t) ((lambda (G13212@ls/false) (if G13212@ls/false (apply (lambda (G13214@else) (G12452@syntax-violation '#f '"invalid syntax" G13152@e)) G13212@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13210@t))) (G12219@syntax-dispatch G13210@t 'any))) G13200@t))) (G12219@syntax-dispatch G13200@t '(any any . each-any)))) G13190@t))) (G12219@syntax-dispatch G13190@t '(each-any any . each-any)))) G13187@cls))) ((lambda (G13162@t) ((lambda (G13164@ls/false) (if G13164@ls/false (apply (lambda (G13166@expr) (G11485@G11342@build-sequence '#f (list (G12255@chi-expr G13166@expr G13153@r G13154@mr) (G11486@G11344@build-void)))) G13164@ls/false) ((lambda (G13168@t) ((lambda (G13170@ls/false) (if G13170@ls/false (apply (lambda (G13172@expr G13173@cls G13174@cls*) ((lambda (G13178@t) (G11484@G11270@build-let '#f (list G13178@t) (list (G12255@chi-expr G13172@expr G13153@r G13154@mr)) ((letrec ((G13180@f (lambda (G13182@cls G13183@cls*) (if (null? G13183@cls*) (G13161@build-last G13178@t G13182@cls) (G13159@build-one G13178@t G13182@cls (G13180@f (car G13183@cls*) (cdr G13183@cls*))))))) G13180@f) G13173@cls G13174@cls*))) (G11514@gen-lexical 't))) G13170@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13168@t))) (G12219@syntax-dispatch G13168@t '(_ any any . each-any)))) G13162@t))) (G12219@syntax-dispatch G13162@t '(_ any)))) G13152@e))) '#f '#f))) (set! G12139@quote-transformer (lambda (G13240@e G13241@r G13242@mr) ((lambda (G13246@t) ((lambda (G13248@ls/false) (if G13248@ls/false (apply (lambda (G13250@datum) (list 'quote (G11662@stx->datum G13250@datum))) G13248@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13246@t))) (G12219@syntax-dispatch G13246@t '(_ any)))) G13240@e))) (set! G12141@case-lambda-transformer (lambda (G13252@e G13253@r G13254@mr) ((lambda (G13258@t) ((lambda (G13260@ls/false) (if G13260@ls/false (apply (lambda (G13262@fmls* G13263@b* G13264@b**) (call-with-values (lambda () (G12263@chi-lambda-clause* G13252@e G13262@fmls* (map cons G13263@b* G13264@b**) G13253@r G13254@mr)) (lambda (G13270@G13268 G13271@G13269) ((lambda (G13274@body* G13275@fmls*) (G11483@G11268@build-case-lambda '#f G13275@fmls* G13274@body*)) G13271@G13269 G13270@G13268)))) G13260@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13258@t))) (G12219@syntax-dispatch G13258@t '(_ . #(each (any any . each-any)))))) G13252@e))) (set! G12143@lambda-transformer (lambda (G13278@e G13279@r G13280@mr) ((lambda (G13284@t) ((lambda (G13286@ls/false) (if G13286@ls/false (apply (lambda (G13288@fmls G13289@b G13290@b*) (call-with-values (lambda () (G12261@chi-lambda-clause G13278@e G13288@fmls (cons G13289@b G13290@b*) G13279@r G13280@mr)) (lambda (G13296@G13294 G13297@G13295) ((lambda (G13300@body G13301@fmls) (G11482@G11266@build-lambda '#f G13301@fmls G13300@body)) G13297@G13295 G13296@G13294)))) G13286@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13284@t))) (G12219@syntax-dispatch G13284@t '(_ any any . each-any)))) G13278@e))) (set! G12145@bless (lambda (G13304@x) (G11616@mkstx ((letrec ((G13306@f (lambda (G13308@x) (if (G11584@stx? G13308@x) G13308@x (if (pair? G13308@x) (cons (G13306@f (car G13308@x)) (G13306@f (cdr G13308@x))) (if (symbol? G13308@x) (G12105@scheme-stx G13308@x) (if (vector? G13308@x) (vector-map G13306@f G13308@x) G13308@x))))))) G13306@f) G13304@x) '() '() '()))) (set! G12147@with-syntax-macro (lambda (G13310@e) ((lambda (G13312@t) ((lambda (G13314@ls/false) (if G13314@ls/false (apply (lambda (G13316@pat* G13317@expr* G13318@b G13319@b*) ((lambda (G13324@idn*) (begin (G12259@verify-formals (map car G13324@idn*) G13310@e) ((lambda (G13326@t*) (G12145@bless (list 'let (map list G13326@t* G13317@expr*) ((letrec ((G13328@f (lambda (G13330@pat* G13331@t*) (if (null? G13330@pat*) (cons 'begin (cons '#f (cons G13318@b G13319@b*))) (list 'syntax-case (car G13331@t*) '() (list (car G13330@pat*) (G13328@f (cdr G13330@pat*) (cdr G13331@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G13330@pat*)) (car G13331@t*)))))))) G13328@f) G13316@pat* G13326@t*)))) (G12438@generate-temporaries G13317@expr*)))) ((letrec ((G13334@f (lambda (G13336@pat*) (if (null? G13336@pat*) '() (call-with-values (lambda () (G12217@convert-pattern (car G13336@pat*) '())) (lambda (G13340@G13338 G13341@G13339) ((lambda (G13344@idn* G13345@pat) (append G13344@idn* (G13334@f (cdr G13336@pat*)))) G13341@G13339 G13340@G13338))))))) G13334@f) G13316@pat*))) G13314@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13312@t))) (G12219@syntax-dispatch G13312@t '(_ #(each (any any)) any . each-any)))) G13310@e))) (set! G12149@invalid-fmls-error (lambda (G13348@stx G13349@fmls) ((lambda (G13352@t) ((lambda (G13354@ls/false) (if G13354@ls/false (apply (lambda (G13356@id* G13357@last) ((letrec ((G13360@f (lambda (G13362@id*) (if (null? G13362@id*) (values) (if (not (G11640@id? (car G13362@id*))) (G12452@syntax-violation '#f '"not an identifier" G13348@stx (car G13362@id*)) (begin (G13360@f (cdr G13362@id*)) (if (G11654@bound-id-member? (car G13362@id*) (cdr G13362@id*)) (G12452@syntax-violation '#f '"duplicate binding" G13348@stx (car G13362@id*)) (void)))))))) G13360@f) (if (G11640@id? G13357@last) (cons G13357@last G13356@id*) (if (G11630@syntax-null? G13357@last) G13356@id* (G12452@syntax-violation '#f '"not an identifier" G13348@stx G13357@last))))) G13354@ls/false) ((lambda (G13364@t) ((lambda (G13366@ls/false) (if G13366@ls/false (apply (lambda () (G12452@syntax-violation '#f '"malformed binding form" G13348@stx G13349@fmls)) G13366@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13364@t))) (G12219@syntax-dispatch G13364@t '_))) G13352@t))) (G12219@syntax-dispatch G13352@t '#(each+ any () any)))) G13349@fmls))) (set! G12151@let-macro (lambda (G13368@stx) ((lambda (G13370@t) ((lambda (G13372@ls/false) (if G13372@ls/false (apply (lambda (G13374@lhs* G13375@rhs* G13376@b G13377@b*) (if (G11650@valid-bound-ids? G13374@lhs*) (G12145@bless (cons (cons 'lambda (cons G13374@lhs* (cons G13376@b G13377@b*))) G13375@rhs*)) (G12149@invalid-fmls-error G13368@stx G13374@lhs*))) G13372@ls/false) ((lambda (G13382@t) ((lambda (G13384@ls/false) (if (if G13384@ls/false (begin '#f (apply (lambda (G13386@f G13387@lhs* G13388@rhs* G13389@b G13390@b*) (G11640@id? G13386@f)) G13384@ls/false)) '#f) (apply (lambda (G13396@f G13397@lhs* G13398@rhs* G13399@b G13400@b*) (if (G11650@valid-bound-ids? G13397@lhs*) (G12145@bless (cons (list 'letrec (list (list G13396@f (cons 'lambda (cons G13397@lhs* (cons G13399@b G13400@b*))))) G13396@f) G13398@rhs*)) (G12149@invalid-fmls-error G13368@stx G13397@lhs*))) G13384@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13382@t))) (G12219@syntax-dispatch G13382@t '(_ any #(each (any any)) any . each-any)))) G13370@t))) (G12219@syntax-dispatch G13370@t '(_ #(each (any any)) any . each-any)))) G13368@stx))) (set! G12153@let-values-macro (lambda (G13406@stx) ((lambda (G13409@rename G13411@rename*) (begin (set! G13409@rename (lambda (G13507@x G13508@old* G13509@new*) (begin (if (G11640@id? G13507@x) (void) (G12452@syntax-violation '#f '"not an indentifier" G13406@stx G13507@x)) (if (G11654@bound-id-member? G13507@x G13508@old*) (G12452@syntax-violation '#f '"duplicate binding" G13406@stx G13507@x) (void)) ((lambda (G13513@y) (values G13513@y (cons G13507@x G13508@old*) (cons G13513@y G13509@new*))) (gensym (G12458@syntax->datum G13507@x)))))) (set! G13411@rename* (lambda (G13489@x* G13490@old* G13491@new*) (if (null? G13489@x*) (values '() G13490@old* G13491@new*) (call-with-values (lambda () (G13409@rename (car G13489@x*) G13490@old* G13491@new*)) (lambda (G13495@x G13496@old* G13497@new*) (call-with-values (lambda () (G13411@rename* (cdr G13489@x*) G13496@old* G13497@new*)) (lambda (G13501@x* G13502@old* G13503@new*) (values (cons G13495@x G13501@x*) G13502@old* G13503@new*)))))))) ((lambda (G13412@t) ((lambda (G13414@ls/false) (if G13414@ls/false (apply (lambda (G13416@b G13417@b*) (cons* (G12145@bless 'let) '() G13416@b G13417@b*)) G13414@ls/false) ((lambda (G13420@t) ((lambda (G13422@ls/false) (if G13422@ls/false (apply (lambda (G13424@lhs* G13425@rhs* G13426@b G13427@b*) (G12145@bless ((letrec ((G13432@f (lambda (G13434@lhs* G13435@rhs* G13436@old* G13437@new*) (if (null? G13434@lhs*) (cons 'let (cons (map list G13436@old* G13437@new*) (cons G13426@b G13427@b*))) ((lambda (G13442@t) ((lambda (G13444@ls/false) (if G13444@ls/false (apply (lambda (G13446@x*) (call-with-values (lambda () (G13411@rename* G13446@x* G13436@old* G13437@new*)) (lambda (G13451@G13448 G13452@G13449 G13453@G13450) ((lambda (G13457@new* G13458@old* G13459@y*) (list 'call-with-values (list 'lambda '() (car G13435@rhs*)) (list 'lambda G13459@y* (G13432@f (cdr G13434@lhs*) (cdr G13435@rhs*) G13458@old* G13457@new*)))) G13453@G13450 G13452@G13449 G13451@G13448)))) G13444@ls/false) ((lambda (G13463@t) ((lambda (G13465@ls/false) (if G13465@ls/false (apply (lambda (G13467@x* G13468@x) (call-with-values (lambda () (G13409@rename G13468@x G13436@old* G13437@new*)) (lambda (G13471@y G13472@old* G13473@new*) (call-with-values (lambda () (G13411@rename* G13467@x* G13472@old* G13473@new*)) (lambda (G13477@y* G13478@old* G13479@new*) (list 'call-with-values (list 'lambda '() (car G13435@rhs*)) (list 'lambda (append G13477@y* G13471@y) (G13432@f (cdr G13434@lhs*) (cdr G13435@rhs*) G13478@old* G13479@new*)))))))) G13465@ls/false) ((lambda (G13483@t) ((lambda (G13485@ls/false) (if G13485@ls/false (apply (lambda (G13487@others) (G12452@syntax-violation '#f '"malformed bindings" G13406@stx G13487@others)) G13485@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13483@t))) (G12219@syntax-dispatch G13483@t 'any))) G13463@t))) (G12219@syntax-dispatch G13463@t '#(each+ any () any)))) G13442@t))) (G12219@syntax-dispatch G13442@t 'each-any))) (car G13434@lhs*)))))) G13432@f) G13424@lhs* G13425@rhs* '() '()))) G13422@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13420@t))) (G12219@syntax-dispatch G13420@t '(_ #(each (any any)) any . each-any)))) G13412@t))) (G12219@syntax-dispatch G13412@t '(_ () any . each-any)))) G13406@stx))) '#f '#f))) (set! G12155@let*-values-macro (lambda (G13515@stx) ((lambda (G13518@check) (begin (set! G13518@check (lambda (G13565@x*) (if (null? G13565@x*) (void) ((lambda (G13567@x) (begin (if (G11640@id? G13567@x) (void) (G12452@syntax-violation '#f '"not an identifier" G13515@stx G13567@x)) (G13518@check (cdr G13565@x*)) (if (G11654@bound-id-member? G13567@x (cdr G13565@x*)) (G12452@syntax-violation '#f '"duplicate identifier" G13515@stx G13567@x) (void)))) (car G13565@x*))))) ((lambda (G13519@t) ((lambda (G13521@ls/false) (if G13521@ls/false (apply (lambda (G13523@b G13524@b*) (cons* (G12145@bless 'let) '() G13523@b G13524@b*)) G13521@ls/false) ((lambda (G13527@t) ((lambda (G13529@ls/false) (if G13529@ls/false (apply (lambda (G13531@lhs* G13532@rhs* G13533@b G13534@b*) (G12145@bless ((letrec ((G13539@f (lambda (G13541@lhs* G13542@rhs*) (if (null? G13541@lhs*) (cons 'begin (cons G13533@b G13534@b*)) ((lambda (G13545@t) ((lambda (G13547@ls/false) (if G13547@ls/false (apply (lambda (G13549@x*) (begin (G13518@check G13549@x*) (list 'call-with-values (list 'lambda '() (car G13542@rhs*)) (list 'lambda G13549@x* (G13539@f (cdr G13541@lhs*) (cdr G13542@rhs*)))))) G13547@ls/false) ((lambda (G13551@t) ((lambda (G13553@ls/false) (if G13553@ls/false (apply (lambda (G13555@x* G13556@x) (begin (G13518@check (cons G13556@x G13555@x*)) (list 'call-with-values (list 'lambda '() (car G13542@rhs*)) (list 'lambda (append G13555@x* G13556@x) (G13539@f (cdr G13541@lhs*) (cdr G13542@rhs*)))))) G13553@ls/false) ((lambda (G13559@t) ((lambda (G13561@ls/false) (if G13561@ls/false (apply (lambda (G13563@others) (G12452@syntax-violation '#f '"malformed bindings" G13515@stx G13563@others)) G13561@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13559@t))) (G12219@syntax-dispatch G13559@t 'any))) G13551@t))) (G12219@syntax-dispatch G13551@t '#(each+ any () any)))) G13545@t))) (G12219@syntax-dispatch G13545@t 'each-any))) (car G13541@lhs*)))))) G13539@f) G13531@lhs* G13532@rhs*))) G13529@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13527@t))) (G12219@syntax-dispatch G13527@t '(_ #(each (any any)) any . each-any)))) G13519@t))) (G12219@syntax-dispatch G13519@t '(_ () any . each-any)))) G13515@stx))) '#f))) (set! G12157@trace-lambda-macro (lambda (G13569@stx) ((lambda (G13571@t) ((lambda (G13573@ls/false) (if G13573@ls/false (apply (lambda (G13575@who G13576@fmls G13577@b G13578@b*) (if (G11650@valid-bound-ids? G13576@fmls) (G12145@bless (list 'make-traced-procedure (list 'quote G13575@who) (cons 'lambda (cons G13576@fmls (cons G13577@b G13578@b*))))) (G12149@invalid-fmls-error G13569@stx G13576@fmls))) G13573@ls/false) ((lambda (G13583@t) ((lambda (G13585@ls/false) (if G13585@ls/false (apply (lambda (G13587@who G13588@fmls G13589@last G13590@b G13591@b*) (if (G11650@valid-bound-ids? (cons G13589@last G13588@fmls)) (G12145@bless (list 'make-traced-procedure (list 'quote G13587@who) (cons 'lambda (cons (append G13588@fmls G13589@last) (cons G13590@b G13591@b*))))) (G12149@invalid-fmls-error G13569@stx (append G13588@fmls G13589@last)))) G13585@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13583@t))) (G12219@syntax-dispatch G13583@t '(_ any #(each+ any () any) any . each-any)))) G13571@t))) (G12219@syntax-dispatch G13571@t '(_ any each-any any . each-any)))) G13569@stx))) (set! G12159@trace-define-macro (lambda (G13597@stx) ((lambda (G13599@t) ((lambda (G13601@ls/false) (if G13601@ls/false (apply (lambda (G13603@who G13604@fmls G13605@b G13606@b*) (if (G11650@valid-bound-ids? G13604@fmls) (G12145@bless (list 'define G13603@who (list 'make-traced-procedure (list 'quote G13603@who) (cons 'lambda (cons G13604@fmls (cons G13605@b G13606@b*)))))) (G12149@invalid-fmls-error G13597@stx G13604@fmls))) G13601@ls/false) ((lambda (G13611@t) ((lambda (G13613@ls/false) (if G13613@ls/false (apply (lambda (G13615@who G13616@fmls G13617@last G13618@b G13619@b*) (if (G11650@valid-bound-ids? (cons G13617@last G13616@fmls)) (G12145@bless (list 'define G13615@who (list 'make-traced-procedure (list 'quote G13615@who) (cons 'lambda (cons (append G13616@fmls G13617@last) (cons G13618@b G13619@b*)))))) (G12149@invalid-fmls-error G13597@stx (append G13616@fmls G13617@last)))) G13613@ls/false) ((lambda (G13625@t) ((lambda (G13627@ls/false) (if G13627@ls/false (apply (lambda (G13629@who G13630@expr) (if (G11640@id? G13629@who) (G12145@bless (list 'define G13629@who (list 'let (list (list 'v G13630@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G13629@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G12452@syntax-violation '#f '"invalid name" G13597@stx))) G13627@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13625@t))) (G12219@syntax-dispatch G13625@t '(_ any any)))) G13611@t))) (G12219@syntax-dispatch G13611@t '(_ (any . #(each+ any () any)) any . each-any)))) G13599@t))) (G12219@syntax-dispatch G13599@t '(_ (any . each-any) any . each-any)))) G13597@stx))) (set! G12161@trace-define-syntax-macro (lambda (G13633@stx) ((lambda (G13635@t) ((lambda (G13637@ls/false) (if G13637@ls/false (apply (lambda (G13639@who G13640@expr) (if (G11640@id? G13639@who) (G12145@bless (list 'define-syntax G13639@who (list 'make-traced-macro (list 'quote G13639@who) G13640@expr))) (G12452@syntax-violation '#f '"invalid name" G13633@stx))) G13637@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13635@t))) (G12219@syntax-dispatch G13635@t '(_ any any)))) G13633@stx))) (set! G12163@trace-let/rec-syntax (lambda (G13643@who) (lambda (G13645@stx) ((lambda (G13647@t) ((lambda (G13649@ls/false) (if G13649@ls/false (apply (lambda (G13651@lhs* G13652@rhs* G13653@b G13654@b*) (if (G11650@valid-bound-ids? G13651@lhs*) ((lambda (G13659@rhs*) (G12145@bless (cons G13643@who (cons (map list G13651@lhs* G13659@rhs*) (cons G13653@b G13654@b*))))) (map (lambda (G13661@lhs G13662@rhs) (list 'make-traced-macro (list 'quote G13661@lhs) G13662@rhs)) G13651@lhs* G13652@rhs*)) (G12149@invalid-fmls-error G13645@stx G13651@lhs*))) G13649@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13647@t))) (G12219@syntax-dispatch G13647@t '(_ #(each (any any)) any . each-any)))) G13645@stx)))) (set! G12165@trace-let-syntax-macro (G12163@trace-let/rec-syntax 'let-syntax)) (set! G12167@trace-letrec-syntax-macro (G12163@trace-let/rec-syntax 'letrec-syntax)) (set! G12169@guard-macro (lambda (G13665@x) ((lambda (G13668@gen-clauses) (begin (set! G13668@gen-clauses (lambda (G13691@con G13692@outerk G13693@clause*) ((lambda (G13698@f G13700@f*) (begin (set! G13698@f (lambda (G13749@x G13750@k) ((lambda (G13753@t) ((lambda (G13755@ls/false) (if G13755@ls/false (apply (lambda (G13757@e G13758@p) ((lambda (G13761@t) (list 'let (list (list G13761@t G13757@e)) (list 'if G13761@t (list G13758@p G13761@t) G13750@k))) (gensym))) G13755@ls/false) ((lambda (G13763@t) ((lambda (G13765@ls/false) (if G13765@ls/false (apply (lambda (G13767@e) ((lambda (G13769@t) (list 'let (list (list G13769@t G13767@e)) (list 'if G13769@t G13769@t G13750@k))) (gensym))) G13765@ls/false) ((lambda (G13771@t) ((lambda (G13773@ls/false) (if G13773@ls/false (apply (lambda (G13775@e G13776@v G13777@v*) (list 'if G13775@e (cons 'begin (cons G13776@v G13777@v*)) G13750@k)) G13773@ls/false) ((lambda (G13781@t) ((lambda (G13783@ls/false) (if G13783@ls/false (apply (lambda () (G12452@syntax-violation '#f '"invalid guard clause" G13749@x)) G13783@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13781@t))) (G12219@syntax-dispatch G13781@t '_))) G13771@t))) (G12219@syntax-dispatch G13771@t '(any any . each-any)))) G13763@t))) (G12219@syntax-dispatch G13763@t '(any)))) G13753@t))) (G12219@syntax-dispatch G13753@t '(any #(scheme-id =>) any)))) G13749@x))) (set! G13700@f* (lambda (G13711@x*) ((lambda (G13713@t) ((lambda (G13715@ls/false) (if G13715@ls/false (apply (lambda () (values (list 'raise G13691@con) '#t)) G13715@ls/false) ((lambda (G13717@t) ((lambda (G13719@ls/false) (if G13719@ls/false (apply (lambda (G13721@e G13722@e*) (values (cons 'begin (cons G13721@e G13722@e*)) '#f)) G13719@ls/false) ((lambda (G13725@t) ((lambda (G13727@ls/false) (if G13727@ls/false (apply (lambda (G13729@cls G13730@cls*) (call-with-values (lambda () (G13700@f* G13730@cls*)) (lambda (G13735@G13733 G13736@G13734) ((lambda (G13739@g G13740@e) (values (G13698@f G13729@cls G13740@e) G13739@g)) G13736@G13734 G13735@G13733)))) G13727@ls/false) ((lambda (G13743@t) ((lambda (G13745@ls/false) (if G13745@ls/false (apply (lambda (G13747@others) (G12452@syntax-violation '#f '"invalid guard clause" G13747@others)) G13745@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13743@t))) (G12219@syntax-dispatch G13743@t 'any))) G13725@t))) (G12219@syntax-dispatch G13725@t '(any . any)))) G13717@t))) (G12219@syntax-dispatch G13717@t '((#(scheme-id else) any . each-any))))) G13713@t))) (G12219@syntax-dispatch G13713@t '()))) G13711@x*))) (call-with-values (lambda () (G13700@f* G13693@clause*)) (lambda (G13703@G13701 G13704@G13702) ((lambda (G13707@raisek G13708@code) (if G13707@raisek (list G13692@outerk G13708@code) G13708@code)) G13704@G13702 G13703@G13701))))) '#f '#f))) ((lambda (G13669@t) ((lambda (G13671@ls/false) (if (if G13671@ls/false (begin '#f (apply (lambda (G13673@con G13674@clause* G13675@b G13676@b*) (G11640@id? G13673@con)) G13671@ls/false)) '#f) (apply (lambda (G13681@con G13682@clause* G13683@b G13684@b*) ((lambda (G13689@outerk) (G12145@bless (list 'call/cc (list 'lambda (list G13689@outerk) (list 'with-exception-handler (list 'lambda (list G13681@con) (G13668@gen-clauses G13681@con G13689@outerk G13682@clause*)) (cons 'lambda (cons '() (cons '#f (cons G13683@b G13684@b*))))))))) (gensym))) G13671@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13669@t))) (G12219@syntax-dispatch G13669@t '(_ (any . each-any) any . each-any)))) G13665@x))) '#f))) (set! G12171@define-enumeration-macro (lambda (G13785@stx) ((lambda (G13788@set? G13790@remove-dups) (begin (set! G13788@set? (lambda (G13813@x) ((lambda (G13815@t) (if G13815@t G13815@t (begin '#f (if (not (memq (car G13813@x) (cdr G13813@x))) (begin '#f (G13788@set? (cdr G13813@x))) '#f)))) (null? G13813@x)))) (set! G13790@remove-dups (lambda (G13811@ls) (if (null? G13811@ls) '() (cons (car G13811@ls) (G13790@remove-dups (remq (car G13811@ls) (cdr G13811@ls))))))) ((lambda (G13791@t) ((lambda (G13793@ls/false) (if (if G13793@ls/false (begin '#f (apply (lambda (G13795@name G13796@id* G13797@maker) (if (G11640@id? G13795@name) (if (G11640@id? G13797@maker) (begin '#f (for-all G11640@id? G13796@id*)) '#f) '#f)) G13793@ls/false)) '#f) (apply (lambda (G13801@name G13802@id* G13803@maker) ((lambda (G13807@name* G13808@mk) (G12145@bless (list 'begin (list 'define G13808@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G13807@name*)))) (list 'define-syntax G13801@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G13807@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G13801@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G13803@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G13803@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G13807@name*)) (cons 'syntax-violation (cons (list 'quote G13803@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G13808@mk '('(n* ...)))))))))))) (G13790@remove-dups (G12458@syntax->datum G13802@id*)) (gensym))) G13793@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13791@t))) (G12219@syntax-dispatch G13791@t '(_ any each-any any)))) G13785@stx))) '#f '#f))) (set! G12173@time-macro (lambda (G13817@stx) ((lambda (G13819@t) ((lambda (G13821@ls/false) (if G13821@ls/false (apply (lambda (G13823@expr) ((lambda (G13825@str) (G12145@bless (list 'time-it G13825@str (list 'lambda '() G13823@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G13829@G13827 G13830@G13828) ((lambda (G13833@e G13834@p) (begin (write (G12458@syntax->datum G13823@expr) G13834@p) (G13833@e))) G13830@G13828 G13829@G13827))))) G13821@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13819@t))) (G12219@syntax-dispatch G13819@t '(_ any)))) G13817@stx))) (set! G12175@delay-macro (lambda (G13837@stx) ((lambda (G13839@t) ((lambda (G13841@ls/false) (if G13841@ls/false (apply (lambda (G13843@expr) (G12145@bless (list 'make-promise (list 'lambda '() G13843@expr)))) G13841@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13839@t))) (G12219@syntax-dispatch G13839@t '(_ any)))) G13837@stx))) (set! G12177@assert-macro (lambda (G13845@stx) ((lambda (G13847@t) ((lambda (G13849@ls/false) (if G13849@ls/false (apply (lambda (G13851@expr) (G12145@bless (list 'unless G13851@expr (list 'assertion-violation ''assert '"assertion failed" (list 'quote G13851@expr))))) G13849@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13847@t))) (G12219@syntax-dispatch G13847@t '(_ any)))) G13845@stx))) (set! G12179@endianness-macro (lambda (G13853@stx) ((lambda (G13855@t) ((lambda (G13857@ls/false) (if G13857@ls/false (apply (lambda (G13859@e) ((lambda (G13861@t) (if (eqv? G13861@t 'little) (G12145@bless ''little) (if (eqv? G13861@t 'big) (G12145@bless ''big) (G12452@syntax-violation '#f '"endianness must be big or little" G13853@stx)))) (G12458@syntax->datum G13859@e))) G13857@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13855@t))) (G12219@syntax-dispatch G13855@t '(_ any)))) G13853@stx))) (set! G12181@identifier-syntax-macro (lambda (G13862@stx) ((lambda (G13864@t) ((lambda (G13866@ls/false) (if G13866@ls/false (apply (lambda (G13868@expr) (G12145@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G13868@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G13868@expr) '((syntax (e* ...)))))))))) G13866@ls/false) ((lambda (G13870@t) ((lambda (G13872@ls/false) (if (if G13872@ls/false (begin '#f (apply (lambda (G13874@id1 G13875@expr1 G13876@id2 G13877@expr2 G13878@expr3) (if (G11640@id? G13874@id1) (if (G11640@id? G13876@id2) (begin '#f (G11640@id? G13877@expr2)) '#f) '#f)) G13872@ls/false)) '#f) (apply (lambda (G13884@id1 G13885@expr1 G13886@id2 G13887@expr2 G13888@expr3) (G12145@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G13885@expr1)) (list (list 'set! 'id G13887@expr2) (list 'syntax G13888@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G13885@expr1 '(e* ...))))))))) G13872@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13870@t))) (G12219@syntax-dispatch G13870@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G13864@t))) (G12219@syntax-dispatch G13864@t '(_ any)))) G13862@stx))) (set! G12183@do-macro (lambda (G13894@stx) ((lambda (G13897@bind) (begin (set! G13897@bind (lambda (G13920@x) ((lambda (G13922@t) ((lambda (G13924@ls/false) (if G13924@ls/false (apply (lambda (G13926@x G13927@init) (list G13926@x G13927@init G13926@x)) G13924@ls/false) ((lambda (G13930@t) ((lambda (G13932@ls/false) (if G13932@ls/false (apply (lambda (G13934@x G13935@init G13936@step) (list G13934@x G13935@init G13936@step)) G13932@ls/false) ((lambda (G13940@t) ((lambda (G13942@ls/false) (if G13942@ls/false (apply (lambda () (G12452@syntax-violation '#f '"invalid binding" G13894@stx)) G13942@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13940@t))) (G12219@syntax-dispatch G13940@t '_))) G13930@t))) (G12219@syntax-dispatch G13930@t '(any any any)))) G13922@t))) (G12219@syntax-dispatch G13922@t '(any any)))) G13920@x))) ((lambda (G13898@t) ((lambda (G13900@ls/false) (if G13900@ls/false (apply (lambda (G13902@binding* G13903@test G13904@expr* G13905@command*) ((lambda (G13910@t) ((lambda (G13912@ls/false) (if G13912@ls/false (apply (lambda (G13914@x* G13915@init* G13916@step*) (if (G11650@valid-bound-ids? G13914@x*) (G12145@bless (list 'letrec (list (list 'loop (list 'lambda G13914@x* (list 'if G13903@test (cons 'begin (cons '(if #f #f) G13904@expr*)) (cons 'begin (append G13905@command* (list (cons 'loop G13916@step*)))))))) (cons 'loop G13915@init*))) (G12452@syntax-violation '#f '"invalid bindings" G13894@stx))) G13912@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13910@t))) (G12219@syntax-dispatch G13910@t '#(each (any any any))))) (map G13897@bind G13902@binding*))) G13900@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13898@t))) (G12219@syntax-dispatch G13898@t '(_ each-any (any . each-any) . each-any)))) G13894@stx))) '#f))) (set! G12185@let*-macro (lambda (G13944@stx) ((lambda (G13946@t) ((lambda (G13948@ls/false) (if (if G13948@ls/false (begin '#f (apply (lambda (G13950@lhs* G13951@rhs* G13952@b G13953@b*) (for-all G11640@id? G13950@lhs*)) G13948@ls/false)) '#f) (apply (lambda (G13958@lhs* G13959@rhs* G13960@b G13961@b*) (G12145@bless ((letrec ((G13966@f (lambda (G13968@x*) (if (null? G13968@x*) (cons 'let (cons '() (cons G13960@b G13961@b*))) (list 'let (list (car G13968@x*)) (G13966@f (cdr G13968@x*))))))) G13966@f) (map list G13958@lhs* G13959@rhs*)))) G13948@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13946@t))) (G12219@syntax-dispatch G13946@t '(_ #(each (any any)) any . each-any)))) G13944@stx))) (set! G12187@or-macro (lambda (G13970@stx) ((lambda (G13972@t) ((lambda (G13974@ls/false) (if G13974@ls/false (apply (lambda () '#f) G13974@ls/false) ((lambda (G13976@t) ((lambda (G13978@ls/false) (if G13978@ls/false (apply (lambda (G13980@e G13981@e*) (G12145@bless ((letrec ((G13984@f (lambda (G13986@e G13987@e*) (if (null? G13987@e*) (list 'begin '#f G13986@e) (list 'let (list (list 't G13986@e)) (list 'if 't 't (G13984@f (car G13987@e*) (cdr G13987@e*)))))))) G13984@f) G13980@e G13981@e*))) G13978@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13976@t))) (G12219@syntax-dispatch G13976@t '(_ any . each-any)))) G13972@t))) (G12219@syntax-dispatch G13972@t '(_)))) G13970@stx))) (set! G12189@and-macro (lambda (G13990@stx) ((lambda (G13992@t) ((lambda (G13994@ls/false) (if G13994@ls/false (apply (lambda () '#t) G13994@ls/false) ((lambda (G13996@t) ((lambda (G13998@ls/false) (if G13998@ls/false (apply (lambda (G14000@e G14001@e*) (G12145@bless ((letrec ((G14004@f (lambda (G14006@e G14007@e*) (if (null? G14007@e*) (list 'begin '#f G14006@e) (cons 'if (cons G14006@e (cons (G14004@f (car G14007@e*) (cdr G14007@e*)) '(#f)))))))) G14004@f) G14000@e G14001@e*))) G13998@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G13996@t))) (G12219@syntax-dispatch G13996@t '(_ any . each-any)))) G13992@t))) (G12219@syntax-dispatch G13992@t '(_)))) G13990@stx))) (set! G12191@cond-macro (lambda (G14010@stx) ((lambda (G14012@t) ((lambda (G14014@ls/false) (if G14014@ls/false (apply (lambda (G14016@cls G14017@cls*) (G12145@bless ((letrec ((G14020@f (lambda (G14022@cls G14023@cls*) (if (null? G14023@cls*) ((lambda (G14026@t) ((lambda (G14028@ls/false) (if G14028@ls/false (apply (lambda (G14030@e G14031@e*) (cons 'begin (cons G14030@e G14031@e*))) G14028@ls/false) ((lambda (G14034@t) ((lambda (G14036@ls/false) (if G14036@ls/false (apply (lambda (G14038@e G14039@p) (list 'let (list (list 't G14038@e)) (list 'if 't (cons G14039@p '(t))))) G14036@ls/false) ((lambda (G14042@t) ((lambda (G14044@ls/false) (if G14044@ls/false (apply (lambda (G14046@e) (cons 'or (cons G14046@e '((if #f #f))))) G14044@ls/false) ((lambda (G14048@t) ((lambda (G14050@ls/false) (if G14050@ls/false (apply (lambda (G14052@e G14053@e*) (list 'if G14052@e (cons 'begin G14053@e*))) G14050@ls/false) ((lambda (G14056@t) ((lambda (G14058@ls/false) (if G14058@ls/false (apply (lambda () (G12452@syntax-violation '#f '"invalid last clause" G14010@stx)) G14058@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14056@t))) (G12219@syntax-dispatch G14056@t '_))) G14048@t))) (G12219@syntax-dispatch G14048@t '(any . each-any)))) G14042@t))) (G12219@syntax-dispatch G14042@t '(any)))) G14034@t))) (G12219@syntax-dispatch G14034@t '(any #(scheme-id =>) any)))) G14026@t))) (G12219@syntax-dispatch G14026@t '(#(scheme-id else) any . each-any)))) G14022@cls) ((lambda (G14060@t) ((lambda (G14062@ls/false) (if G14062@ls/false (apply (lambda (G14064@e G14065@e*) (G12452@syntax-violation '#f '"incorrect position of keyword else" G14010@stx)) G14062@ls/false) ((lambda (G14068@t) ((lambda (G14070@ls/false) (if G14070@ls/false (apply (lambda (G14072@e G14073@p) (list 'let (list (list 't G14072@e)) (list 'if 't (cons G14073@p '(t)) (G14020@f (car G14023@cls*) (cdr G14023@cls*))))) G14070@ls/false) ((lambda (G14076@t) ((lambda (G14078@ls/false) (if G14078@ls/false (apply (lambda (G14080@e) (list 'or G14080@e (G14020@f (car G14023@cls*) (cdr G14023@cls*)))) G14078@ls/false) ((lambda (G14082@t) ((lambda (G14084@ls/false) (if G14084@ls/false (apply (lambda (G14086@e G14087@e*) (list 'if G14086@e (cons 'begin G14087@e*) (G14020@f (car G14023@cls*) (cdr G14023@cls*)))) G14084@ls/false) ((lambda (G14090@t) ((lambda (G14092@ls/false) (if G14092@ls/false (apply (lambda () (G12452@syntax-violation '#f '"invalid last clause" G14010@stx)) G14092@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14090@t))) (G12219@syntax-dispatch G14090@t '_))) G14082@t))) (G12219@syntax-dispatch G14082@t '(any . each-any)))) G14076@t))) (G12219@syntax-dispatch G14076@t '(any)))) G14068@t))) (G12219@syntax-dispatch G14068@t '(any #(scheme-id =>) any)))) G14060@t))) (G12219@syntax-dispatch G14060@t '(#(scheme-id else) any . each-any)))) G14022@cls))))) G14020@f) G14016@cls G14017@cls*))) G14014@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14012@t))) (G12219@syntax-dispatch G14012@t '(_ any . each-any)))) G14010@stx))) (set! G12193@do-include (lambda (G14094@stx G14095@id G14096@filename) ((lambda (G14100@filename) (begin (if (if (string? G14100@filename) (begin '#f (G11640@id? G14095@id)) '#f) (void) (G12452@syntax-violation '#f '"invalid syntax" G14094@stx)) (cons (G12145@bless 'begin) (with-input-from-file G14100@filename (lambda () ((letrec ((G14102@f (lambda (G14104@ls) ((lambda (G14106@x) (if (eof-object? G14106@x) (reverse G14104@ls) (G14102@f (cons (G11606@datum->stx G14095@id G14106@x) G14104@ls)))) (G10446@G10231@read-annotated))))) G14102@f) '())))))) (G11662@stx->datum G14096@filename)))) (set! G12195@include-macro (lambda (G14108@e) ((lambda (G14110@t) ((lambda (G14112@ls/false) (if G14112@ls/false (apply (lambda (G14114@id G14115@filename) (G12193@do-include G14108@e G14114@id G14115@filename)) G14112@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14110@t))) (G12219@syntax-dispatch G14110@t '(any any)))) G14108@e))) (set! G12197@include-into-macro (lambda (G14118@e) ((lambda (G14120@t) ((lambda (G14122@ls/false) (if G14122@ls/false (apply (lambda (G14124@id G14125@filename) (G12193@do-include G14118@e G14124@id G14125@filename)) G14122@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14120@t))) (G12219@syntax-dispatch G14120@t '(_ any any)))) G14118@e))) (set! G12199@syntax-rules-macro (lambda (G14128@e) ((lambda (G14130@t) ((lambda (G14132@ls/false) (if G14132@ls/false (apply (lambda (G14134@lits G14135@pat* G14136@tmp*) (begin (G12225@verify-literals G14134@lits G14128@e) (G12145@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G14134@lits (map (lambda (G14140@pat G14141@tmp) ((lambda (G14144@t) ((lambda (G14146@ls/false) (if G14146@ls/false (apply (lambda (G14148@rest) (list (cons 'g G14148@rest) (list 'syntax G14141@tmp))) G14146@ls/false) ((lambda (G14150@t) ((lambda (G14152@ls/false) (if G14152@ls/false (apply (lambda () (G12452@syntax-violation '#f '"invalid syntax-rules pattern" G14128@e G14140@pat)) G14152@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14150@t))) (G12219@syntax-dispatch G14150@t '_))) G14144@t))) (G12219@syntax-dispatch G14144@t '(_ . any)))) G14140@pat)) G14135@pat* G14136@tmp*)))))))) G14132@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14130@t))) (G12219@syntax-dispatch G14130@t '(_ each-any . #(each (any any)))))) G14128@e))) (set! G12201@quasiquote-macro ((lambda () ((lambda (G14155@datum G14196@quasicons* G14198@quasicons G14200@quasiappend G14202@quasivector G14204@vquasi G14206@quasi) (begin (set! G14155@datum (lambda (G14425@x) (list (G12105@scheme-stx 'quote) (G11616@mkstx G14425@x '() '() '())))) (set! G14196@quasicons* (lambda (G14417@x G14418@y) ((letrec ((G14421@f (lambda (G14423@x) (if (null? G14423@x) G14418@y (G14198@quasicons (car G14423@x) (G14421@f (cdr G14423@x))))))) G14421@f) G14417@x))) (set! G14198@quasicons (lambda (G14379@x G14380@y) ((lambda (G14383@t) ((lambda (G14385@ls/false) (if G14385@ls/false (apply (lambda (G14387@dy) ((lambda (G14389@t) ((lambda (G14391@ls/false) (if G14391@ls/false (apply (lambda (G14393@dx) (list (G12105@scheme-stx 'quote) (cons G14393@dx G14387@dy))) G14391@ls/false) ((lambda (G14395@t) ((lambda (G14397@ls/false) (if G14397@ls/false (apply (lambda () ((lambda (G14399@t) ((lambda (G14401@ls/false) (if G14401@ls/false (apply (lambda () (list (G12105@scheme-stx 'list) G14379@x)) G14401@ls/false) ((lambda (G14403@t) ((lambda (G14405@ls/false) (if G14405@ls/false (apply (lambda () (list (G12105@scheme-stx 'cons) G14379@x G14380@y)) G14405@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14403@t))) (G12219@syntax-dispatch G14403@t '_))) G14399@t))) (G12219@syntax-dispatch G14399@t '()))) G14387@dy)) G14397@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14395@t))) (G12219@syntax-dispatch G14395@t '_))) G14389@t))) (G12219@syntax-dispatch G14389@t '(#(scheme-id quote) any)))) G14379@x)) G14385@ls/false) ((lambda (G14407@t) ((lambda (G14409@ls/false) (if G14409@ls/false (apply (lambda (G14411@stuff) (cons* (G12105@scheme-stx 'list) G14379@x G14411@stuff)) G14409@ls/false) ((lambda (G14413@t) ((lambda (G14415@ls/false) (if G14415@ls/false (apply (lambda () (list (G12105@scheme-stx 'cons) G14379@x G14380@y)) G14415@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14413@t))) (G12219@syntax-dispatch G14413@t '_))) G14407@t))) (G12219@syntax-dispatch G14407@t '(#(scheme-id list) . each-any)))) G14383@t))) (G12219@syntax-dispatch G14383@t '(#(scheme-id quote) any)))) G14380@y))) (set! G14200@quasiappend (lambda (G14353@x G14354@y) ((lambda (G14357@ls) (if (null? G14357@ls) (list (G12105@scheme-stx 'quote) '()) (if (null? (cdr G14357@ls)) (car G14357@ls) (cons* (G12105@scheme-stx 'append) G14357@ls)))) ((letrec ((G14359@f (lambda (G14361@x) (if (null? G14361@x) ((lambda (G14363@t) ((lambda (G14365@ls/false) (if G14365@ls/false (apply (lambda () '()) G14365@ls/false) ((lambda (G14367@t) ((lambda (G14369@ls/false) (if G14369@ls/false (apply (lambda () (list G14354@y)) G14369@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14367@t))) (G12219@syntax-dispatch G14367@t '_))) G14363@t))) (G12219@syntax-dispatch G14363@t '(#(scheme-id quote) ())))) G14354@y) ((lambda (G14371@t) ((lambda (G14373@ls/false) (if G14373@ls/false (apply (lambda () (G14359@f (cdr G14361@x))) G14373@ls/false) ((lambda (G14375@t) ((lambda (G14377@ls/false) (if G14377@ls/false (apply (lambda () (cons (car G14361@x) (G14359@f (cdr G14361@x)))) G14377@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14375@t))) (G12219@syntax-dispatch G14375@t '_))) G14371@t))) (G12219@syntax-dispatch G14371@t '(#(scheme-id quote) ())))) (car G14361@x)))))) G14359@f) G14353@x)))) (set! G14202@quasivector (lambda (G14303@x) ((lambda (G14305@pat-x) ((lambda (G14307@t) ((lambda (G14309@ls/false) (if G14309@ls/false (apply (lambda (G14311@x*) (list (G12105@scheme-stx 'quote) (list->vector G14311@x*))) G14309@ls/false) ((lambda (G14313@t) ((lambda (G14315@ls/false) (if G14315@ls/false (apply (lambda () ((letrec ((G14317@f (lambda (G14319@x G14320@k) ((lambda (G14323@t) ((lambda (G14325@ls/false) (if G14325@ls/false (apply (lambda (G14327@x*) (G14320@k (map (lambda (G14329@x) (list (G12105@scheme-stx 'quote) G14329@x)) G14327@x*))) G14325@ls/false) ((lambda (G14331@t) ((lambda (G14333@ls/false) (if G14333@ls/false (apply (lambda (G14335@x*) (G14320@k G14335@x*)) G14333@ls/false) ((lambda (G14337@t) ((lambda (G14339@ls/false) (if G14339@ls/false (apply (lambda (G14341@x G14342@y) (G14317@f G14342@y (lambda (G14345@ls) (G14320@k (cons G14341@x G14345@ls))))) G14339@ls/false) ((lambda (G14347@t) ((lambda (G14349@ls/false) (if G14349@ls/false (apply (lambda () (list (G12105@scheme-stx 'list->vector) G14305@pat-x)) G14349@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14347@t))) (G12219@syntax-dispatch G14347@t '_))) G14337@t))) (G12219@syntax-dispatch G14337@t '(#(scheme-id cons) any any)))) G14331@t))) (G12219@syntax-dispatch G14331@t '(#(scheme-id list) . each-any)))) G14323@t))) (G12219@syntax-dispatch G14323@t '(#(scheme-id quote) each-any)))) G14319@x)))) G14317@f) G14303@x (lambda (G14351@ls) (cons* (G12105@scheme-stx 'vector) G14351@ls)))) G14315@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14313@t))) (G12219@syntax-dispatch G14313@t '_))) G14307@t))) (G12219@syntax-dispatch G14307@t '(#(scheme-id quote) each-any)))) G14305@pat-x)) G14303@x))) (set! G14204@vquasi (lambda (G14269@p G14270@lev) ((lambda (G14273@t) ((lambda (G14275@ls/false) (if G14275@ls/false (apply (lambda (G14277@p G14278@q) ((lambda (G14281@t) ((lambda (G14283@ls/false) (if G14283@ls/false (apply (lambda (G14285@p) (if (= G14270@lev '0) (G14196@quasicons* G14285@p (G14204@vquasi G14278@q G14270@lev)) (G14198@quasicons (G14198@quasicons (G14155@datum 'unquote) (G14206@quasi G14285@p (- G14270@lev '1))) (G14204@vquasi G14278@q G14270@lev)))) G14283@ls/false) ((lambda (G14287@t) ((lambda (G14289@ls/false) (if G14289@ls/false (apply (lambda (G14291@p) (if (= G14270@lev '0) (G14200@quasiappend G14291@p (G14204@vquasi G14278@q G14270@lev)) (G14198@quasicons (G14198@quasicons (G14155@datum 'unquote-splicing) (G14206@quasi G14291@p (- G14270@lev '1))) (G14204@vquasi G14278@q G14270@lev)))) G14289@ls/false) ((lambda (G14293@t) ((lambda (G14295@ls/false) (if G14295@ls/false (apply (lambda (G14297@p) (G14198@quasicons (G14206@quasi G14297@p G14270@lev) (G14204@vquasi G14278@q G14270@lev))) G14295@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14293@t))) (G12219@syntax-dispatch G14293@t 'any))) G14287@t))) (G12219@syntax-dispatch G14287@t '(#(scheme-id unquote-splicing) . each-any)))) G14281@t))) (G12219@syntax-dispatch G14281@t '(#(scheme-id unquote) . each-any)))) G14277@p)) G14275@ls/false) ((lambda (G14299@t) ((lambda (G14301@ls/false) (if G14301@ls/false (apply (lambda () (list (G12105@scheme-stx 'quote) '())) G14301@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14299@t))) (G12219@syntax-dispatch G14299@t '()))) G14273@t))) (G12219@syntax-dispatch G14273@t '(any . any)))) G14269@p))) (set! G14206@quasi (lambda (G14215@p G14216@lev) ((lambda (G14219@t) ((lambda (G14221@ls/false) (if G14221@ls/false (apply (lambda (G14223@p) (if (= G14216@lev '0) G14223@p (G14198@quasicons (G14155@datum 'unquote) (G14206@quasi (list G14223@p) (- G14216@lev '1))))) G14221@ls/false) ((lambda (G14225@t) ((lambda (G14227@ls/false) (if G14227@ls/false (apply (lambda (G14229@p G14230@q) (if (= G14216@lev '0) (G14196@quasicons* G14229@p (G14206@quasi G14230@q G14216@lev)) (G14198@quasicons (G14198@quasicons (G14155@datum 'unquote) (G14206@quasi G14229@p (- G14216@lev '1))) (G14206@quasi G14230@q G14216@lev)))) G14227@ls/false) ((lambda (G14233@t) ((lambda (G14235@ls/false) (if G14235@ls/false (apply (lambda (G14237@p G14238@q) (if (= G14216@lev '0) (G14200@quasiappend G14237@p (G14206@quasi G14238@q G14216@lev)) (G14198@quasicons (G14198@quasicons (G14155@datum 'unquote-splicing) (G14206@quasi G14237@p (- G14216@lev '1))) (G14206@quasi G14238@q G14216@lev)))) G14235@ls/false) ((lambda (G14241@t) ((lambda (G14243@ls/false) (if G14243@ls/false (apply (lambda (G14245@p) (G14198@quasicons (G14155@datum 'quasiquote) (G14206@quasi (list G14245@p) (+ G14216@lev '1)))) G14243@ls/false) ((lambda (G14247@t) ((lambda (G14249@ls/false) (if G14249@ls/false (apply (lambda (G14251@p G14252@q) (G14198@quasicons (G14206@quasi G14251@p G14216@lev) (G14206@quasi G14252@q G14216@lev))) G14249@ls/false) ((lambda (G14255@t) ((lambda (G14257@ls/false) (if (if G14257@ls/false (begin '#f (apply (lambda (G14259@x) (not (G11584@stx? G14259@x))) G14257@ls/false)) '#f) (apply (lambda (G14261@x) (G14202@quasivector (G14204@vquasi G14261@x G14216@lev))) G14257@ls/false) ((lambda (G14263@t) ((lambda (G14265@ls/false) (if G14265@ls/false (apply (lambda (G14267@p) (list (G12105@scheme-stx 'quote) G14267@p)) G14265@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14263@t))) (G12219@syntax-dispatch G14263@t 'any))) G14255@t))) (G12219@syntax-dispatch G14255@t '#(vector each-any)))) G14247@t))) (G12219@syntax-dispatch G14247@t '(any . any)))) G14241@t))) (G12219@syntax-dispatch G14241@t '(#(scheme-id quasiquote) any)))) G14233@t))) (G12219@syntax-dispatch G14233@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G14225@t))) (G12219@syntax-dispatch G14225@t '((#(scheme-id unquote) . each-any) . any)))) G14219@t))) (G12219@syntax-dispatch G14219@t '(#(scheme-id unquote) any)))) G14215@p))) (lambda (G14207@x) ((lambda (G14209@t) ((lambda (G14211@ls/false) (if G14211@ls/false (apply (lambda (G14213@e) (G14206@quasi G14213@e '0)) G14211@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14209@t))) (G12219@syntax-dispatch G14209@t '(_ any)))) G14207@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G12203@quasisyntax-macro ((lambda () ((lambda (G14428@quasi) (begin (set! G14428@quasi (lambda (G14452@p G14453@lev) ((lambda (G14456@t) ((lambda (G14458@ls/false) (if G14458@ls/false (apply (lambda (G14460@p) (if (= G14453@lev '0) ((lambda (G14462@g) (values (list G14462@g) (list G14460@p) G14462@g)) (gensym)) (call-with-values (lambda () (G14428@quasi G14460@p (- G14453@lev '1))) (lambda (G14467@G14464 G14468@G14465 G14469@G14466) ((lambda (G14473@p G14474@rhs* G14475@lhs*) (values G14475@lhs* G14474@rhs* (list 'unsyntax G14473@p))) G14469@G14466 G14468@G14465 G14467@G14464))))) G14458@ls/false) ((lambda (G14479@t) ((lambda (G14481@ls/false) (if (if G14481@ls/false (begin '#f (apply (lambda () (= G14453@lev '0)) G14481@ls/false)) '#f) (apply (lambda () (G12452@syntax-violation '#f '"incorrect use of unsyntax" G14452@p)) G14481@ls/false) ((lambda (G14483@t) ((lambda (G14485@ls/false) (if G14485@ls/false (apply (lambda (G14487@p G14488@q) (call-with-values (lambda () (G14428@quasi G14488@q G14453@lev)) (lambda (G14494@G14491 G14495@G14492 G14496@G14493) ((lambda (G14500@q G14501@rhs* G14502@lhs*) (if (= G14453@lev '0) ((lambda (G14506@g) (values (cons (cons G14506@g '(...)) G14502@lhs*) (cons G14487@p G14501@rhs*) (cons G14506@g (cons '... G14500@q)))) (gensym)) (call-with-values (lambda () (G14428@quasi G14487@p (- G14453@lev '1))) (lambda (G14511@G14508 G14512@G14509 G14513@G14510) ((lambda (G14517@p G14518@rhs2* G14519@lhs2*) (values (append G14519@lhs2* G14502@lhs*) (append G14518@rhs2* G14501@rhs*) (cons (list 'unsyntax-splicing G14517@p) G14500@q))) G14513@G14510 G14512@G14509 G14511@G14508))))) G14496@G14493 G14495@G14492 G14494@G14491)))) G14485@ls/false) ((lambda (G14523@t) ((lambda (G14525@ls/false) (if (if G14525@ls/false (begin '#f (apply (lambda () (= G14453@lev '0)) G14525@ls/false)) '#f) (apply (lambda () (G12452@syntax-violation '#f '"incorrect use of unsyntax-splicing" G14452@p)) G14525@ls/false) ((lambda (G14527@t) ((lambda (G14529@ls/false) (if G14529@ls/false (apply (lambda (G14531@p) (call-with-values (lambda () (G14428@quasi G14531@p (+ G14453@lev '1))) (lambda (G14536@G14533 G14537@G14534 G14538@G14535) ((lambda (G14542@p G14543@rhs* G14544@lhs*) (values G14544@lhs* G14543@rhs* (list 'quasisyntax G14542@p))) G14538@G14535 G14537@G14534 G14536@G14533)))) G14529@ls/false) ((lambda (G14548@t) ((lambda (G14550@ls/false) (if G14550@ls/false (apply (lambda (G14552@p G14553@q) (call-with-values (lambda () (G14428@quasi G14552@p G14453@lev)) (lambda (G14562@G14556 G14563@G14557 G14564@G14558) (call-with-values (lambda () (G14428@quasi G14553@q G14453@lev)) (lambda (G14568@G14559 G14569@G14560 G14570@G14561) ((lambda (G14574@q G14575@rhs2* G14576@lhs2* G14577@p G14578@rhs* G14579@lhs*) (values (append G14576@lhs2* G14579@lhs*) (append G14575@rhs2* G14578@rhs*) (cons G14577@p G14574@q))) G14570@G14561 G14569@G14560 G14568@G14559 G14564@G14558 G14563@G14557 G14562@G14556)))))) G14550@ls/false) ((lambda (G14586@t) ((lambda (G14588@ls/false) (if (if G14588@ls/false (begin '#f (apply (lambda (G14590@x) (not (G11584@stx? G14452@p))) G14588@ls/false)) '#f) (apply (lambda (G14592@x) (call-with-values (lambda () ((letrec ((G14597@f (lambda (G14599@x) (if (null? G14599@x) (values '() '() '()) (call-with-values (lambda () (G14428@quasi (car G14599@x) G14453@lev)) (lambda (G14604@G14601 G14605@G14602 G14606@G14603) ((lambda (G14610@a G14611@rhs* G14612@lhs*) (call-with-values (lambda () (G14597@f (cdr G14599@x))) (lambda (G14619@G14616 G14620@G14617 G14621@G14618) ((lambda (G14625@d G14626@rhs2* G14627@lhs2*) (values (append G14612@lhs* G14627@lhs2*) (append G14611@rhs* G14626@rhs2*) (cons G14610@a G14625@d))) G14621@G14618 G14620@G14617 G14619@G14616)))) G14606@G14603 G14605@G14602 G14604@G14601))))))) G14597@f) G14592@x)) (lambda (G14631@G14594 G14632@G14595 G14633@G14596) ((lambda (G14637@x* G14638@rhs* G14639@lhs*) (values G14639@lhs* G14638@rhs* (list->vector G14637@x*))) G14633@G14596 G14632@G14595 G14631@G14594)))) G14588@ls/false) ((lambda (G14643@t) ((lambda (G14645@ls/false) (if G14645@ls/false (apply (lambda () (values '() '() G14452@p)) G14645@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14643@t))) (G12219@syntax-dispatch G14643@t '_))) G14586@t))) (G12219@syntax-dispatch G14586@t '#(vector each-any)))) G14548@t))) (G12219@syntax-dispatch G14548@t '(any . any)))) G14527@t))) (G12219@syntax-dispatch G14527@t '(#(scheme-id quasisyntax) any)))) G14523@t))) (G12219@syntax-dispatch G14523@t '#(scheme-id unsyntax-splicing)))) G14483@t))) (G12219@syntax-dispatch G14483@t '((#(scheme-id unsyntax-splicing) any) . any)))) G14479@t))) (G12219@syntax-dispatch G14479@t '#(scheme-id unsyntax)))) G14456@t))) (G12219@syntax-dispatch G14456@t '(#(scheme-id unsyntax) any)))) G14452@p))) (lambda (G14429@x) ((lambda (G14431@t) ((lambda (G14433@ls/false) (if G14433@ls/false (apply (lambda (G14435@e) (call-with-values (lambda () (G14428@quasi G14435@e '0)) (lambda (G14440@G14437 G14441@G14438 G14442@G14439) ((lambda (G14446@v G14447@rhs* G14448@lhs*) (G12145@bless (list 'syntax-case (cons 'list G14447@rhs*) '() (list G14448@lhs* (list 'syntax G14446@v))))) G14442@G14439 G14441@G14438 G14440@G14437)))) G14433@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14431@t))) (G12219@syntax-dispatch G14431@t '(_ any)))) G14429@x)))) '#f)))) (set! G12205@define-struct-macro (lambda (G14647@stx) (G12452@syntax-violation '#f '"define-struct not supported" G14647@stx))) (set! G12207@define-record-type-macro (lambda (G14649@x) ((lambda (G14652@id G14654@get-record-name G14656@get-record-constructor-name G14658@get-record-predicate-name G14660@get-clause G14662@foo-rtd-code G14664@parent-rtd-code G14666@parent-rcd-code G14668@foo-rcd-code G14670@get-protocol-code G14672@get-fields G14674@get-mutator-indices G14676@get-mutators G14678@get-accessors G14680@enumerate G14682@do-define-record G14684@verify-clauses) (begin (set! G14652@id (lambda (G15155@ctxt . G15157@str*) (G12456@datum->syntax G15155@ctxt (string->symbol (apply string-append (map (lambda (G15159@x) (if (symbol? G15159@x) (symbol->string G15159@x) (if (string? G15159@x) G15159@x (assertion-violation 'define-record-type '"BUG")))) G15157@str*)))))) (set! G14654@get-record-name (lambda (G15137@spec) ((lambda (G15139@t) ((lambda (G15141@ls/false) (if G15141@ls/false (apply (lambda (G15143@foo G15144@make-foo G15145@foo?) G15143@foo) G15141@ls/false) ((lambda (G15149@t) ((lambda (G15151@ls/false) (if G15151@ls/false (apply (lambda (G15153@foo) G15153@foo) G15151@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15149@t))) (G12219@syntax-dispatch G15149@t 'any))) G15139@t))) (G12219@syntax-dispatch G15139@t '(any any any)))) G15137@spec))) (set! G14656@get-record-constructor-name (lambda (G15117@spec) ((lambda (G15119@t) ((lambda (G15121@ls/false) (if G15121@ls/false (apply (lambda (G15123@foo G15124@make-foo G15125@foo?) G15124@make-foo) G15121@ls/false) ((lambda (G15129@t) ((lambda (G15131@ls/false) (if (if G15131@ls/false (begin '#f (apply (lambda (G15133@foo) (G11640@id? G15133@foo)) G15131@ls/false)) '#f) (apply (lambda (G15135@foo) (G14652@id G15135@foo '"make-" (G11662@stx->datum G15135@foo))) G15131@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15129@t))) (G12219@syntax-dispatch G15129@t 'any))) G15119@t))) (G12219@syntax-dispatch G15119@t '(any any any)))) G15117@spec))) (set! G14658@get-record-predicate-name (lambda (G15097@spec) ((lambda (G15099@t) ((lambda (G15101@ls/false) (if G15101@ls/false (apply (lambda (G15103@foo G15104@make-foo G15105@foo?) G15105@foo?) G15101@ls/false) ((lambda (G15109@t) ((lambda (G15111@ls/false) (if (if G15111@ls/false (begin '#f (apply (lambda (G15113@foo) (G11640@id? G15113@foo)) G15111@ls/false)) '#f) (apply (lambda (G15115@foo) (G14652@id G15115@foo (G11662@stx->datum G15115@foo) '"?")) G15111@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15109@t))) (G12219@syntax-dispatch G15109@t 'any))) G15099@t))) (G12219@syntax-dispatch G15099@t '(any any any)))) G15097@spec))) (set! G14660@get-clause (lambda (G15079@id G15080@ls) ((lambda (G15083@t) ((lambda (G15085@ls/false) (if G15085@ls/false (apply (lambda () '#f) G15085@ls/false) ((lambda (G15087@t) ((lambda (G15089@ls/false) (if G15089@ls/false (apply (lambda (G15091@x G15092@rest G15093@ls) (if (G11648@free-id=? (G12145@bless G15079@id) G15091@x) (cons G15091@x G15092@rest) (G14660@get-clause G15079@id G15093@ls))) G15089@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15087@t))) (G12219@syntax-dispatch G15087@t '((any . any) . any)))) G15083@t))) (G12219@syntax-dispatch G15083@t '()))) G15080@ls))) (set! G14662@foo-rtd-code (lambda (G14997@name G14998@clause* G14999@parent-rtd-code) ((lambda (G15004@convert-field-spec*) (begin (set! G15004@convert-field-spec* (lambda (G15053@ls) (list->vector (map (lambda (G15055@x) ((lambda (G15057@t) ((lambda (G15059@ls/false) (if G15059@ls/false (apply (lambda (G15061@name G15062@rest) (list 'mutable G15061@name)) G15059@ls/false) ((lambda (G15065@t) ((lambda (G15067@ls/false) (if G15067@ls/false (apply (lambda (G15069@name G15070@rest) (list 'immutable G15069@name)) G15067@ls/false) ((lambda (G15073@t) ((lambda (G15075@ls/false) (if G15075@ls/false (apply (lambda (G15077@name) (list 'immutable G15077@name)) G15075@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15073@t))) (G12219@syntax-dispatch G15073@t 'any))) G15065@t))) (G12219@syntax-dispatch G15065@t '(#(scheme-id immutable) any . any)))) G15057@t))) (G12219@syntax-dispatch G15057@t '(#(scheme-id mutable) any . any)))) G15055@x)) G15053@ls)))) ((lambda (G15005@uid-code G15006@sealed? G15007@opaque? G15008@fields) (G12145@bless (list 'make-record-type-descriptor (list 'quote G14997@name) G14999@parent-rtd-code G15005@uid-code G15006@sealed? G15007@opaque? G15008@fields))) ((lambda (G15013@t) ((lambda (G15015@ls/false) (if G15015@ls/false (apply (lambda () (list 'quote (gensym))) G15015@ls/false) ((lambda (G15017@t) ((lambda (G15019@ls/false) (if G15019@ls/false (apply (lambda (G15021@uid) (list 'quote G15021@uid)) G15019@ls/false) ((lambda (G15023@t) ((lambda (G15025@ls/false) (if G15025@ls/false (apply (lambda () '#f) G15025@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15023@t))) (G12219@syntax-dispatch G15023@t '_))) G15017@t))) (G12219@syntax-dispatch G15017@t '(_ any)))) G15013@t))) (G12219@syntax-dispatch G15013@t '(_)))) (G14660@get-clause 'nongenerative G14998@clause*)) ((lambda (G15027@t) ((lambda (G15029@ls/false) (if G15029@ls/false (apply (lambda () '#t) G15029@ls/false) ((lambda (G15031@t) ((lambda (G15033@ls/false) (if G15033@ls/false (apply (lambda () '#f) G15033@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15031@t))) (G12219@syntax-dispatch G15031@t '_))) G15027@t))) (G12219@syntax-dispatch G15027@t '(_ #(atom #t))))) (G14660@get-clause 'sealed G14998@clause*)) ((lambda (G15035@t) ((lambda (G15037@ls/false) (if G15037@ls/false (apply (lambda () '#t) G15037@ls/false) ((lambda (G15039@t) ((lambda (G15041@ls/false) (if G15041@ls/false (apply (lambda () '#f) G15041@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15039@t))) (G12219@syntax-dispatch G15039@t '_))) G15035@t))) (G12219@syntax-dispatch G15035@t '(_ #(atom #t))))) (G14660@get-clause 'opaque G14998@clause*)) ((lambda (G15043@t) ((lambda (G15045@ls/false) (if G15045@ls/false (apply (lambda (G15047@field-spec*) (list 'quote (G15004@convert-field-spec* G15047@field-spec*))) G15045@ls/false) ((lambda (G15049@t) ((lambda (G15051@ls/false) (if G15051@ls/false (apply (lambda () ''#()) G15051@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15049@t))) (G12219@syntax-dispatch G15049@t '_))) G15043@t))) (G12219@syntax-dispatch G15043@t '(_ . each-any)))) (G14660@get-clause 'fields G14998@clause*))))) '#f))) (set! G14664@parent-rtd-code (lambda (G14973@clause*) ((lambda (G14975@t) ((lambda (G14977@ls/false) (if G14977@ls/false (apply (lambda (G14979@name) (list 'record-type-descriptor G14979@name)) G14977@ls/false) ((lambda (G14981@t) ((lambda (G14983@ls/false) (if G14983@ls/false (apply (lambda () ((lambda (G14985@t) ((lambda (G14987@ls/false) (if G14987@ls/false (apply (lambda (G14989@rtd G14990@rcd) G14989@rtd) G14987@ls/false) ((lambda (G14993@t) ((lambda (G14995@ls/false) (if G14995@ls/false (apply (lambda () '#f) G14995@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14993@t))) (G12219@syntax-dispatch G14993@t '#(atom #f)))) G14985@t))) (G12219@syntax-dispatch G14985@t '(_ any any)))) (G14660@get-clause 'parent-rtd G14973@clause*))) G14983@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14981@t))) (G12219@syntax-dispatch G14981@t '#(atom #f)))) G14975@t))) (G12219@syntax-dispatch G14975@t '(_ any)))) (G14660@get-clause 'parent G14973@clause*)))) (set! G14666@parent-rcd-code (lambda (G14949@clause*) ((lambda (G14951@t) ((lambda (G14953@ls/false) (if G14953@ls/false (apply (lambda (G14955@name) (list 'record-constructor-descriptor G14955@name)) G14953@ls/false) ((lambda (G14957@t) ((lambda (G14959@ls/false) (if G14959@ls/false (apply (lambda () ((lambda (G14961@t) ((lambda (G14963@ls/false) (if G14963@ls/false (apply (lambda (G14965@rtd G14966@rcd) G14966@rcd) G14963@ls/false) ((lambda (G14969@t) ((lambda (G14971@ls/false) (if G14971@ls/false (apply (lambda () '#f) G14971@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14969@t))) (G12219@syntax-dispatch G14969@t '#(atom #f)))) G14961@t))) (G12219@syntax-dispatch G14961@t '(_ any any)))) (G14660@get-clause 'parent-rtd G14949@clause*))) G14959@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14957@t))) (G12219@syntax-dispatch G14957@t '#(atom #f)))) G14951@t))) (G12219@syntax-dispatch G14951@t '(_ any)))) (G14660@get-clause 'parent G14949@clause*)))) (set! G14668@foo-rcd-code (lambda (G14941@clause* G14942@foo-rtd G14943@protocol G14944@parent-rcd-code) (list 'make-record-constructor-descriptor G14942@foo-rtd G14944@parent-rcd-code G14943@protocol))) (set! G14670@get-protocol-code (lambda (G14929@clause*) ((lambda (G14931@t) ((lambda (G14933@ls/false) (if G14933@ls/false (apply (lambda (G14935@expr) G14935@expr) G14933@ls/false) ((lambda (G14937@t) ((lambda (G14939@ls/false) (if G14939@ls/false (apply (lambda () '#f) G14939@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14937@t))) (G12219@syntax-dispatch G14937@t '_))) G14931@t))) (G12219@syntax-dispatch G14931@t '(_ any)))) (G14660@get-clause 'protocol G14929@clause*)))) (set! G14672@get-fields (lambda (G14911@clause*) ((lambda (G14913@t) ((lambda (G14915@ls/false) (if G14915@ls/false (apply (lambda () '()) G14915@ls/false) ((lambda (G14917@t) ((lambda (G14919@ls/false) (if G14919@ls/false (apply (lambda (G14921@f*) G14921@f*) G14919@ls/false) ((lambda (G14923@t) ((lambda (G14925@ls/false) (if G14925@ls/false (apply (lambda (G14927@rest) (G14672@get-fields G14927@rest)) G14925@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14923@t))) (G12219@syntax-dispatch G14923@t '(_ . any)))) G14917@t))) (G12219@syntax-dispatch G14917@t '((#(scheme-id fields) . each-any) . _)))) G14913@t))) (G12219@syntax-dispatch G14913@t '()))) G14911@clause*))) (set! G14674@get-mutator-indices (lambda (G14887@fields) ((letrec ((G14889@f (lambda (G14891@fields G14892@i) ((lambda (G14895@t) ((lambda (G14897@ls/false) (if G14897@ls/false (apply (lambda () '()) G14897@ls/false) ((lambda (G14899@t) ((lambda (G14901@ls/false) (if G14901@ls/false (apply (lambda (G14903@rest) (cons G14892@i (G14889@f G14903@rest (+ G14892@i '1)))) G14901@ls/false) ((lambda (G14905@t) ((lambda (G14907@ls/false) (if G14907@ls/false (apply (lambda (G14909@rest) (G14889@f G14909@rest (+ G14892@i '1))) G14907@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14905@t))) (G12219@syntax-dispatch G14905@t '(_ . any)))) G14899@t))) (G12219@syntax-dispatch G14899@t '((#(scheme-id mutable) . _) . any)))) G14895@t))) (G12219@syntax-dispatch G14895@t '()))) G14891@fields)))) G14889@f) G14887@fields '0))) (set! G14676@get-mutators (lambda (G14845@foo G14846@fields) ((lambda (G14850@gen-name) (begin (set! G14850@gen-name (lambda (G14885@x) (G12456@datum->syntax G14845@foo (string->symbol (string-append (symbol->string (G12458@syntax->datum G14845@foo)) '"-" (symbol->string (G12458@syntax->datum G14885@x)) '"-set!"))))) ((letrec ((G14851@f (lambda (G14853@fields) ((lambda (G14855@t) ((lambda (G14857@ls/false) (if G14857@ls/false (apply (lambda () '()) G14857@ls/false) ((lambda (G14859@t) ((lambda (G14861@ls/false) (if G14861@ls/false (apply (lambda (G14863@name G14864@accessor G14865@mutator G14866@rest) (cons G14865@mutator (G14851@f G14866@rest))) G14861@ls/false) ((lambda (G14871@t) ((lambda (G14873@ls/false) (if G14873@ls/false (apply (lambda (G14875@name G14876@rest) (cons (G14850@gen-name G14875@name) (G14851@f G14876@rest))) G14873@ls/false) ((lambda (G14879@t) ((lambda (G14881@ls/false) (if G14881@ls/false (apply (lambda (G14883@rest) (G14851@f G14883@rest)) G14881@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14879@t))) (G12219@syntax-dispatch G14879@t '(_ . any)))) G14871@t))) (G12219@syntax-dispatch G14871@t '((#(scheme-id mutable) any) . any)))) G14859@t))) (G12219@syntax-dispatch G14859@t '((#(scheme-id mutable) any any any) . any)))) G14855@t))) (G12219@syntax-dispatch G14855@t '()))) G14853@fields)))) G14851@f) G14846@fields))) '#f))) (set! G14678@get-accessors (lambda (G14777@foo G14778@fields) ((lambda (G14782@gen-name) (begin (set! G14782@gen-name (lambda (G14843@x) (G12456@datum->syntax G14777@foo (string->symbol (string-append (symbol->string (G12458@syntax->datum G14777@foo)) '"-" (symbol->string (G12458@syntax->datum G14843@x))))))) (map (lambda (G14783@field) ((lambda (G14785@t) ((lambda (G14787@ls/false) (if (if G14787@ls/false (begin '#f (apply (lambda (G14789@name G14790@accessor G14791@mutator) (G11640@id? G14790@accessor)) G14787@ls/false)) '#f) (apply (lambda (G14795@name G14796@accessor G14797@mutator) G14796@accessor) G14787@ls/false) ((lambda (G14801@t) ((lambda (G14803@ls/false) (if (if G14803@ls/false (begin '#f (apply (lambda (G14805@name G14806@accessor) (G11640@id? G14806@accessor)) G14803@ls/false)) '#f) (apply (lambda (G14809@name G14810@accessor) G14810@accessor) G14803@ls/false) ((lambda (G14813@t) ((lambda (G14815@ls/false) (if (if G14815@ls/false (begin '#f (apply (lambda (G14817@name) (G11640@id? G14817@name)) G14815@ls/false)) '#f) (apply (lambda (G14819@name) (G14782@gen-name G14819@name)) G14815@ls/false) ((lambda (G14821@t) ((lambda (G14823@ls/false) (if (if G14823@ls/false (begin '#f (apply (lambda (G14825@name) (G11640@id? G14825@name)) G14823@ls/false)) '#f) (apply (lambda (G14827@name) (G14782@gen-name G14827@name)) G14823@ls/false) ((lambda (G14829@t) ((lambda (G14831@ls/false) (if (if G14831@ls/false (begin '#f (apply (lambda (G14833@name) (G11640@id? G14833@name)) G14831@ls/false)) '#f) (apply (lambda (G14835@name) (G14782@gen-name G14835@name)) G14831@ls/false) ((lambda (G14837@t) ((lambda (G14839@ls/false) (if G14839@ls/false (apply (lambda (G14841@others) (G12452@syntax-violation '#f '"invalid field spec" G14783@field)) G14839@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14837@t))) (G12219@syntax-dispatch G14837@t 'any))) G14829@t))) (G12219@syntax-dispatch G14829@t 'any))) G14821@t))) (G12219@syntax-dispatch G14821@t '(#(scheme-id immutable) any)))) G14813@t))) (G12219@syntax-dispatch G14813@t '(#(scheme-id mutable) any)))) G14801@t))) (G12219@syntax-dispatch G14801@t '(#(scheme-id immutable) any any)))) G14785@t))) (G12219@syntax-dispatch G14785@t '(#(scheme-id mutable) any any any)))) G14783@field)) G14778@fields))) '#f))) (set! G14680@enumerate (lambda (G14769@ls) ((letrec ((G14771@f (lambda (G14773@ls G14774@i) (if (null? G14773@ls) '() (cons G14774@i (G14771@f (cdr G14773@ls) (+ G14774@i '1))))))) G14771@f) G14769@ls '0))) (set! G14682@do-define-record (lambda (G14729@namespec G14730@clause*) ((lambda (G14733@foo) ((lambda (G14735@foo-rtd) ((lambda (G14737@foo-rcd) ((lambda (G14739@protocol) ((lambda (G14741@make-foo) ((lambda (G14743@fields) ((lambda (G14745@idx*) ((lambda (G14747@foo-x*) ((lambda (G14749@set-foo-x!*) ((lambda (G14751@set-foo-idx*) ((lambda (G14753@foo?) ((lambda (G14755@foo-rtd-code) ((lambda (G14757@foo-rcd-code) ((lambda (G14759@protocol-code) ((lambda () (G12145@bless (cons 'begin (cons (list 'define G14735@foo-rtd G14755@foo-rtd-code) (cons (list 'define G14739@protocol G14759@protocol-code) (cons (list 'define G14737@foo-rcd G14757@foo-rcd-code) (cons (list 'define-syntax G14733@foo (list 'list ''$rtd (list 'syntax G14735@foo-rtd) (list 'syntax G14737@foo-rcd))) (cons (list 'define G14753@foo? (list 'record-predicate G14735@foo-rtd)) (cons (list 'define G14741@make-foo (list 'record-constructor G14737@foo-rcd)) (append (map (lambda (G14761@foo-x G14762@idx) (list 'define G14761@foo-x (list 'record-accessor G14735@foo-rtd G14762@idx))) G14747@foo-x* G14745@idx*) (map (lambda (G14765@set-foo-x! G14766@idx) (list 'define G14765@set-foo-x! (list 'record-mutator G14735@foo-rtd G14766@idx))) G14749@set-foo-x!* G14751@set-foo-idx*))))))))))))) (G14670@get-protocol-code G14730@clause*))) (G14668@foo-rcd-code G14730@clause* G14735@foo-rtd G14739@protocol (G14666@parent-rcd-code G14730@clause*)))) (G14662@foo-rtd-code G14733@foo G14730@clause* (G14664@parent-rtd-code G14730@clause*)))) (G14658@get-record-predicate-name G14729@namespec))) (G14674@get-mutator-indices G14743@fields))) (G14676@get-mutators G14733@foo G14743@fields))) (G14678@get-accessors G14733@foo G14743@fields))) (G14680@enumerate G14743@fields))) (G14672@get-fields G14730@clause*))) (G14656@get-record-constructor-name G14729@namespec))) (gensym))) (gensym))) (gensym))) (G14654@get-record-name G14729@namespec)))) (set! G14684@verify-clauses (lambda (G14693@x G14694@cls*) ((lambda (G14698@valid-kwds G14700@free-id-member?) (begin (set! G14698@valid-kwds (map G12145@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G14700@free-id-member? (lambda (G14723@x G14724@ls) (if (pair? G14724@ls) (begin '#f ((lambda (G14727@t) (if G14727@t G14727@t (begin '#f (G14700@free-id-member? G14723@x (cdr G14724@ls))))) (G11648@free-id=? G14723@x (car G14724@ls)))) '#f))) ((letrec ((G14701@f (lambda (G14703@cls* G14704@seen*) (if (null? G14703@cls*) (void) ((lambda (G14707@t) ((lambda (G14709@ls/false) (if G14709@ls/false (apply (lambda (G14711@kwd G14712@rest) (if ((lambda (G14715@t) (if G14715@t G14715@t (begin '#f (not (G14700@free-id-member? G14711@kwd G14698@valid-kwds))))) (not (G11640@id? G14711@kwd))) (G12452@syntax-violation '#f '"not a valid define-record-type keyword" G14711@kwd) (if (G11654@bound-id-member? G14711@kwd G14704@seen*) (G12452@syntax-violation '#f '"duplicate use of keyword " G14693@x G14711@kwd) (G14701@f (cdr G14703@cls*) (cons G14711@kwd G14704@seen*))))) G14709@ls/false) ((lambda (G14717@t) ((lambda (G14719@ls/false) (if G14719@ls/false (apply (lambda (G14721@cls) (G12452@syntax-violation '#f '"malformed define-record-type clause" G14721@cls)) G14719@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14717@t))) (G12219@syntax-dispatch G14717@t 'any))) G14707@t))) (G12219@syntax-dispatch G14707@t '(any . any)))) (car G14703@cls*)))))) G14701@f) G14694@cls* '()))) '#f '#f))) ((lambda (G14685@t) ((lambda (G14687@ls/false) (if G14687@ls/false (apply (lambda (G14689@namespec G14690@clause*) (begin (G14684@verify-clauses G14649@x G14690@clause*) (G14682@do-define-record G14689@namespec G14690@clause*))) G14687@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G14685@t))) (G12219@syntax-dispatch G14685@t '(_ any . each-any)))) G14649@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12209@define-condition-type-macro (lambda (G15161@x) ((lambda (G15164@mkname) (begin (set! G15164@mkname (lambda (G15209@name G15210@suffix) (G12456@datum->syntax G15209@name (string->symbol (string-append (symbol->string (G12458@syntax->datum G15209@name)) G15210@suffix))))) ((lambda (G15165@t) ((lambda (G15167@ls/false) (if (if G15167@ls/false (begin '#f (apply (lambda (G15169@ctxt G15170@name G15171@super G15172@constructor G15173@predicate G15174@field* G15175@accessor*) (if (G11640@id? G15170@name) (if (G11640@id? G15171@super) (if (G11640@id? G15172@constructor) (if (G11640@id? G15173@predicate) (if (for-all G11640@id? G15174@field*) (begin '#f (for-all G11640@id? G15175@accessor*)) '#f) '#f) '#f) '#f) '#f)) G15167@ls/false)) '#f) (apply (lambda (G15183@ctxt G15184@name G15185@super G15186@constructor G15187@predicate G15188@field* G15189@accessor*) ((lambda (G15197@aux-accessor*) (G12145@bless (cons 'begin (cons (cons 'define-record-type (cons (list G15184@name G15186@constructor (gensym)) (cons (list 'parent G15185@super) (cons (cons 'fields (map (lambda (G15199@field G15200@aux) (list 'immutable G15199@field G15200@aux)) G15188@field* G15197@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G15187@predicate (list 'condition-predicate (list 'record-type-descriptor G15184@name))) (map (lambda (G15203@accessor G15204@aux) (list 'define G15203@accessor (list 'condition-accessor (list 'record-type-descriptor G15184@name) G15204@aux))) G15189@accessor* G15197@aux-accessor*)))))) (map (lambda (G15207@x) (gensym)) G15189@accessor*))) G15167@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15165@t))) (G12219@syntax-dispatch G15165@t '(any any any any any . #(each (any any)))))) G15161@x))) '#f))) (set! G12211@incorrect-usage-macro (lambda (G15213@e) (G12452@syntax-violation '#f '"incorrect usage of auxiliary keyword" G15213@e))) (set! G12213@parameterize-transformer (lambda (G15215@e G15216@r G15217@mr) ((lambda (G15221@t) ((lambda (G15223@ls/false) (if G15223@ls/false (apply (lambda (G15225@b G15226@b*) (G12277@chi-internal (cons G15225@b G15226@b*) G15216@r G15217@mr)) G15223@ls/false) ((lambda (G15229@t) ((lambda (G15231@ls/false) (if G15231@ls/false (apply (lambda (G15233@olhs* G15234@orhs* G15235@b G15236@b*) ((lambda (G15241@lhs* G15242@rhs* G15243@t* G15244@swap) (G11484@G11270@build-let '#f (append G15241@lhs* G15242@rhs*) (append (G12251@chi-expr* G15233@olhs* G15216@r G15217@mr) (G12251@chi-expr* G15234@orhs* G15216@r G15217@mr)) (G11484@G11270@build-let '#f (list G15244@swap) (list (G11482@G11266@build-lambda '#f '() (G11485@G11342@build-sequence '#f (map (lambda (G15249@t G15250@lhs G15251@rhs) (G11484@G11270@build-let '#f (list G15249@t) (list (list G15250@lhs)) (G11485@G11342@build-sequence '#f (list (list G15250@lhs G15251@rhs) (list 'set! G15251@rhs G15249@t))))) G15243@t* G15241@lhs* G15242@rhs*)))) (list '(primitive dynamic-wind) G15244@swap (G11482@G11266@build-lambda '#f '() (G12277@chi-internal (cons G15235@b G15236@b*) G15216@r G15217@mr)) G15244@swap)))) (map (lambda (G15255@x) (G11514@gen-lexical 'lhs)) G15233@olhs*) (map (lambda (G15257@x) (G11514@gen-lexical 'rhs)) G15233@olhs*) (map (lambda (G15259@x) (G11514@gen-lexical 't)) G15233@olhs*) (G11514@gen-lexical 'swap))) G15231@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15229@t))) (G12219@syntax-dispatch G15229@t '(_ #(each (any any)) any . each-any)))) G15221@t))) (G12219@syntax-dispatch G15221@t '(_ () any . each-any)))) G15215@e))) (set! G12215@foreign-call-transformer (lambda (G15261@e G15262@r G15263@mr) ((lambda (G15267@t) ((lambda (G15269@ls/false) (if G15269@ls/false (apply (lambda (G15271@name G15272@arg*) (cons 'foreign-call (cons (G12255@chi-expr G15271@name G15262@r G15263@mr) (G12251@chi-expr* G15272@arg* G15262@r G15263@mr)))) G15269@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15267@t))) (G12219@syntax-dispatch G15267@t '(_ any . each-any)))) G15261@e))) (set! G12217@convert-pattern (lambda (G15275@pattern G15276@keys) ((lambda (G15280@cvt* G15282@cvt) (begin (set! G15280@cvt* (lambda (G15425@p* G15426@n G15427@ids) (if (null? G15425@p*) (values '() G15427@ids) (call-with-values (lambda () (G15280@cvt* (cdr G15425@p*) G15426@n G15427@ids)) (lambda (G15433@G15431 G15434@G15432) ((lambda (G15437@ids G15438@y) (call-with-values (lambda () (G15282@cvt (car G15425@p*) G15426@n G15437@ids)) (lambda (G15443@G15441 G15444@G15442) ((lambda (G15447@ids G15448@x) (values (cons G15448@x G15438@y) G15447@ids)) G15444@G15442 G15443@G15441)))) G15434@G15432 G15433@G15431)))))) (set! G15282@cvt (lambda (G15283@p G15284@n G15285@ids) ((lambda (G15289@t) ((lambda (G15291@ls/false) (if (if G15291@ls/false (begin '#f (apply (lambda (G15293@id) (G11640@id? G15293@id)) G15291@ls/false)) '#f) (apply (lambda (G15295@id) (if (G11654@bound-id-member? G15283@p G15276@keys) (values (vector 'free-id G15283@p) G15285@ids) (if (G11648@free-id=? G15283@p (G12105@scheme-stx '_)) (values '_ G15285@ids) (values 'any (cons (cons G15283@p G15284@n) G15285@ids))))) G15291@ls/false) ((lambda (G15297@t) ((lambda (G15299@ls/false) (if (if G15299@ls/false (begin '#f (apply (lambda (G15301@p G15302@dots) (G12221@ellipsis? G15302@dots)) G15299@ls/false)) '#f) (apply (lambda (G15305@p G15306@dots) (call-with-values (lambda () (G15282@cvt G15305@p (+ G15284@n '1) G15285@ids)) (lambda (G15311@G15309 G15312@G15310) ((lambda (G15315@ids G15316@p) (values (if (eq? G15316@p 'any) 'each-any (vector 'each G15316@p)) G15315@ids)) G15312@G15310 G15311@G15309)))) G15299@ls/false) ((lambda (G15319@t) ((lambda (G15321@ls/false) (if (if G15321@ls/false (begin '#f (apply (lambda (G15323@x G15324@dots G15325@ys G15326@z) (G12221@ellipsis? G15324@dots)) G15321@ls/false)) '#f) (apply (lambda (G15331@x G15332@dots G15333@ys G15334@z) (call-with-values (lambda () (G15282@cvt G15334@z G15284@n G15285@ids)) (lambda (G15341@G15339 G15342@G15340) ((lambda (G15345@ids G15346@z) (call-with-values (lambda () (G15280@cvt* G15333@ys G15284@n G15345@ids)) (lambda (G15351@G15349 G15352@G15350) ((lambda (G15355@ids G15356@ys) (call-with-values (lambda () (G15282@cvt G15331@x (+ G15284@n '1) G15355@ids)) (lambda (G15361@G15359 G15362@G15360) ((lambda (G15365@ids G15366@x) (values (vector 'each+ G15366@x (reverse G15356@ys) G15346@z) G15365@ids)) G15362@G15360 G15361@G15359)))) G15352@G15350 G15351@G15349)))) G15342@G15340 G15341@G15339)))) G15321@ls/false) ((lambda (G15369@t) ((lambda (G15371@ls/false) (if G15371@ls/false (apply (lambda (G15373@x G15374@y) (call-with-values (lambda () (G15282@cvt G15374@y G15284@n G15285@ids)) (lambda (G15379@G15377 G15380@G15378) ((lambda (G15383@ids G15384@y) (call-with-values (lambda () (G15282@cvt G15373@x G15284@n G15383@ids)) (lambda (G15389@G15387 G15390@G15388) ((lambda (G15393@ids G15394@x) (values (cons G15394@x G15384@y) G15393@ids)) G15390@G15388 G15389@G15387)))) G15380@G15378 G15379@G15377)))) G15371@ls/false) ((lambda (G15397@t) ((lambda (G15399@ls/false) (if G15399@ls/false (apply (lambda () (values '() G15285@ids)) G15399@ls/false) ((lambda (G15401@t) ((lambda (G15403@ls/false) (if (if G15403@ls/false (begin '#f (apply (lambda (G15405@p) (not (G11584@stx? G15405@p))) G15403@ls/false)) '#f) (apply (lambda (G15407@p) (call-with-values (lambda () (G15282@cvt G15407@p G15284@n G15285@ids)) (lambda (G15411@G15409 G15412@G15410) ((lambda (G15415@ids G15416@p) (values (vector 'vector G15416@p) G15415@ids)) G15412@G15410 G15411@G15409)))) G15403@ls/false) ((lambda (G15419@t) ((lambda (G15421@ls/false) (if G15421@ls/false (apply (lambda (G15423@datum) (values (vector 'atom (G11662@stx->datum G15423@datum)) G15285@ids)) G15421@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15419@t))) (G12219@syntax-dispatch G15419@t 'any))) G15401@t))) (G12219@syntax-dispatch G15401@t '#(vector each-any)))) G15397@t))) (G12219@syntax-dispatch G15397@t '()))) G15369@t))) (G12219@syntax-dispatch G15369@t '(any . any)))) G15319@t))) (G12219@syntax-dispatch G15319@t '(any any . #(each+ any () any))))) G15297@t))) (G12219@syntax-dispatch G15297@t '(any any)))) G15289@t))) (G12219@syntax-dispatch G15289@t 'any))) G15283@p))) (G15282@cvt G15275@pattern '0 '()))) '#f '#f))) (set! G12219@syntax-dispatch (lambda (G15451@e G15452@p) ((lambda (G15456@stx^ G15458@match-each G15460@match-each+ G15462@match-each-any G15464@match-empty G15466@combine G15468@match* G15470@match) (begin (set! G15456@stx^ (lambda (G15651@e G15652@m* G15653@s* G15654@ae*) (if (if (null? G15652@m*) (if (null? G15653@s*) (begin '#f (null? G15654@ae*)) '#f) '#f) G15651@e (G11616@mkstx G15651@e G15652@m* G15653@s* G15654@ae*)))) (set! G15458@match-each (lambda (G15622@e G15623@p G15624@m* G15625@s* G15626@ae*) (if (pair? G15622@e) ((lambda (G15632@first) (if G15632@first (begin '#f ((lambda (G15634@rest) (if G15634@rest (begin '#f (cons G15632@first G15634@rest)) '#f)) (G15458@match-each (cdr G15622@e) G15623@p G15624@m* G15625@s* G15626@ae*))) '#f)) (G15470@match (car G15622@e) G15623@p G15624@m* G15625@s* G15626@ae* '())) (if (null? G15622@e) '() (if (G11584@stx? G15622@e) (if (not (G11512@top-marked? G15624@m*)) (begin '#f (call-with-values (lambda () (G11614@join-wraps G15624@m* G15625@s* G15626@ae* G15622@e)) (lambda (G15639@G15636 G15640@G15637 G15641@G15638) ((lambda (G15645@ae* G15646@s* G15647@m*) (G15458@match-each (G11588@stx-expr G15622@e) G15623@p G15647@m* G15646@s* G15645@ae*)) G15641@G15638 G15640@G15637 G15639@G15636)))) '#f) (if (G10448@G10235@annotation? G15622@e) (G15458@match-each (G10450@G10239@annotation-expression G15622@e) G15623@p G15624@m* G15625@s* G15626@ae*) '#f)))))) (set! G15460@match-each+ (lambda (G15564@e G15565@x-pat G15566@y-pat G15567@z-pat G15568@m* G15569@s* G15570@ae* G15571@r) ((letrec ((G15580@f (lambda (G15582@e G15583@m* G15584@s* G15585@ae*) (if (pair? G15582@e) (call-with-values (lambda () (G15580@f (cdr G15582@e) G15583@m* G15584@s* G15585@ae*)) (lambda (G15593@G15590 G15594@G15591 G15595@G15592) ((lambda (G15599@r G15600@y-pat G15601@xr*) (if G15599@r (if (null? G15600@y-pat) ((lambda (G15605@xr) (if G15605@xr (values (cons G15605@xr G15601@xr*) G15600@y-pat G15599@r) (values '#f '#f '#f))) (G15470@match (car G15582@e) G15565@x-pat G15583@m* G15584@s* G15585@ae* '())) (values '() (cdr G15600@y-pat) (G15470@match (car G15582@e) (car G15600@y-pat) G15583@m* G15584@s* G15585@ae* G15599@r))) (values '#f '#f '#f))) G15595@G15592 G15594@G15591 G15593@G15590))) (if (G11584@stx? G15582@e) (if (G11512@top-marked? G15583@m*) (values '() G15566@y-pat (G15470@match G15582@e G15567@z-pat G15583@m* G15584@s* G15585@ae* G15571@r)) (call-with-values (lambda () (G11614@join-wraps G15583@m* G15584@s* G15585@ae* G15582@e)) (lambda (G15610@G15607 G15611@G15608 G15612@G15609) ((lambda (G15616@ae* G15617@s* G15618@m*) (G15580@f (G11588@stx-expr G15582@e) G15618@m* G15617@s* G15616@ae*)) G15612@G15609 G15611@G15608 G15610@G15607)))) (if (G10448@G10235@annotation? G15582@e) (G15580@f (G10450@G10239@annotation-expression G15582@e) G15583@m* G15584@s* G15585@ae*) (values '() G15566@y-pat (G15470@match G15582@e G15567@z-pat G15583@m* G15584@s* G15585@ae* G15571@r)))))))) G15580@f) G15564@e G15568@m* G15569@s* G15570@ae*))) (set! G15462@match-each-any (lambda (G15539@e G15540@m* G15541@s* G15542@ae*) (if (pair? G15539@e) ((lambda (G15547@l) (if G15547@l (begin '#f (cons (G15456@stx^ (car G15539@e) G15540@m* G15541@s* G15542@ae*) G15547@l)) '#f)) (G15462@match-each-any (cdr G15539@e) G15540@m* G15541@s* G15542@ae*)) (if (null? G15539@e) '() (if (G11584@stx? G15539@e) (if (not (G11512@top-marked? G15540@m*)) (begin '#f (call-with-values (lambda () (G11614@join-wraps G15540@m* G15541@s* G15542@ae* G15539@e)) (lambda (G15552@G15549 G15553@G15550 G15554@G15551) ((lambda (G15558@ae* G15559@s* G15560@m*) (G15462@match-each-any (G11588@stx-expr G15539@e) G15560@m* G15559@s* G15558@ae*)) G15554@G15551 G15553@G15550 G15552@G15549)))) '#f) (if (G10448@G10235@annotation? G15539@e) (G15462@match-each-any (G10450@G10239@annotation-expression G15539@e) G15540@m* G15541@s* G15542@ae*) '#f)))))) (set! G15464@match-empty (lambda (G15534@p G15535@r) (if (null? G15534@p) G15535@r (if (eq? G15534@p '_) G15535@r (if (eq? G15534@p 'any) (cons '() G15535@r) (if (pair? G15534@p) (G15464@match-empty (car G15534@p) (G15464@match-empty (cdr G15534@p) G15535@r)) (if (eq? G15534@p 'each-any) (cons '() G15535@r) ((lambda (G15538@t) (if (eqv? G15538@t 'each) (G15464@match-empty (vector-ref G15534@p '1) G15535@r) (if (eqv? G15538@t 'each+) (G15464@match-empty (vector-ref G15534@p '1) (G15464@match-empty (reverse (vector-ref G15534@p '2)) (G15464@match-empty (vector-ref G15534@p '3) G15535@r))) (if (memv G15538@t '(free-id atom)) G15535@r (if (memv G15538@t '(scheme-id atom)) G15535@r (if (eqv? G15538@t 'vector) (G15464@match-empty (vector-ref G15534@p '1) G15535@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G15534@p))))))) (vector-ref G15534@p '0))))))))) (set! G15466@combine (lambda (G15530@r* G15531@r) (if (null? (car G15530@r*)) G15531@r (cons (map car G15530@r*) (G15466@combine (map cdr G15530@r*) G15531@r))))) (set! G15468@match* (lambda (G15498@e G15499@p G15500@m* G15501@s* G15502@ae* G15503@r) (if (null? G15499@p) (if (null? G15498@e) (begin '#f G15503@r) '#f) (if (pair? G15499@p) (if (pair? G15498@e) (begin '#f (G15470@match (car G15498@e) (car G15499@p) G15500@m* G15501@s* G15502@ae* (G15470@match (cdr G15498@e) (cdr G15499@p) G15500@m* G15501@s* G15502@ae* G15503@r))) '#f) (if (eq? G15499@p 'each-any) ((lambda (G15510@l) (if G15510@l (begin '#f (cons G15510@l G15503@r)) '#f)) (G15462@match-each-any G15498@e G15500@m* G15501@s* G15502@ae*)) ((lambda (G15512@t) (if (eqv? G15512@t 'each) (if (null? G15498@e) (G15464@match-empty (vector-ref G15499@p '1) G15503@r) ((lambda (G15528@r*) (if G15528@r* (begin '#f (G15466@combine G15528@r* G15503@r)) '#f)) (G15458@match-each G15498@e (vector-ref G15499@p '1) G15500@m* G15501@s* G15502@ae*))) (if (eqv? G15512@t 'free-id) (if (symbol? G15498@e) (if (G11512@top-marked? G15500@m*) (if (G11648@free-id=? (G15456@stx^ G15498@e G15500@m* G15501@s* G15502@ae*) (vector-ref G15499@p '1)) (begin '#f G15503@r) '#f) '#f) '#f) (if (eqv? G15512@t 'scheme-id) (if (symbol? G15498@e) (if (G11512@top-marked? G15500@m*) (if (G11648@free-id=? (G15456@stx^ G15498@e G15500@m* G15501@s* G15502@ae*) (G12105@scheme-stx (vector-ref G15499@p '1))) (begin '#f G15503@r) '#f) '#f) '#f) (if (eqv? G15512@t 'each+) (call-with-values (lambda () (G15460@match-each+ G15498@e (vector-ref G15499@p '1) (vector-ref G15499@p '2) (vector-ref G15499@p '3) G15500@m* G15501@s* G15502@ae* G15503@r)) (lambda (G15516@G15513 G15517@G15514 G15518@G15515) ((lambda (G15522@r G15523@y-pat G15524@xr*) (if G15522@r (if (null? G15523@y-pat) (begin '#f (if (null? G15524@xr*) (G15464@match-empty (vector-ref G15499@p '1) G15522@r) (G15466@combine G15524@xr* G15522@r))) '#f) '#f)) G15518@G15515 G15517@G15514 G15516@G15513))) (if (eqv? G15512@t 'atom) (if (equal? (vector-ref G15499@p '1) (G11660@strip G15498@e G15500@m*)) (begin '#f G15503@r) '#f) (if (eqv? G15512@t 'vector) (if (vector? G15498@e) (begin '#f (G15470@match (vector->list G15498@e) (vector-ref G15499@p '1) G15500@m* G15501@s* G15502@ae* G15503@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G15499@p)))))))) (vector-ref G15499@p '0))))))) (set! G15470@match (lambda (G15471@e G15472@p G15473@m* G15474@s* G15475@ae* G15476@r) (if (not G15476@r) '#f (if (eq? G15472@p '_) G15476@r (if (eq? G15472@p 'any) (cons (G15456@stx^ G15471@e G15473@m* G15474@s* G15475@ae*) G15476@r) (if (G11584@stx? G15471@e) (if (not (G11512@top-marked? G15473@m*)) (begin '#f (call-with-values (lambda () (G11614@join-wraps G15473@m* G15474@s* G15475@ae* G15471@e)) (lambda (G15486@G15483 G15487@G15484 G15488@G15485) ((lambda (G15492@ae* G15493@s* G15494@m*) (G15470@match (G11588@stx-expr G15471@e) G15472@p G15494@m* G15493@s* G15492@ae* G15476@r)) G15488@G15485 G15487@G15484 G15486@G15483)))) '#f) (if (G10448@G10235@annotation? G15471@e) (G15470@match (G10450@G10239@annotation-expression G15471@e) G15472@p G15473@m* G15474@s* G15475@ae* G15476@r) (G15468@match* G15471@e G15472@p G15473@m* G15474@s* G15475@ae* G15476@r)))))))) (G15470@match G15451@e G15452@p '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12221@ellipsis? (lambda (G15659@x) (if (G11640@id? G15659@x) (begin '#f (G11648@free-id=? G15659@x (G12105@scheme-stx '...))) '#f))) (set! G12223@underscore? (lambda (G15661@x) (if (G11640@id? G15661@x) (begin '#f (G11648@free-id=? G15661@x (G12105@scheme-stx '_))) '#f))) (set! G12225@verify-literals (lambda (G15663@lits G15664@expr) (for-each (lambda (G15667@x) (if ((lambda (G15669@t) (if G15669@t G15669@t ((lambda (G15671@t) (if G15671@t G15671@t (begin '#f (G12223@underscore? G15667@x)))) (G12221@ellipsis? G15667@x)))) (not (G11640@id? G15667@x))) (G12452@syntax-violation '#f '"invalid literal" G15664@expr G15667@x) (void))) G15663@lits))) (set! G12227@syntax-case-transformer ((lambda () ((lambda (G15674@build-dispatch-call G15676@invalid-ids-error G15678@gen-clause G15680@gen-syntax-case) (begin (set! G15674@build-dispatch-call (lambda (G15785@pvars G15786@expr G15787@y G15788@r G15789@mr) ((lambda (G15795@ids G15796@levels) ((lambda (G15799@labels G15800@new-vars) ((lambda (G15803@body) (list '(primitive apply) (G11482@G11266@build-lambda '#f G15800@new-vars G15803@body) G15787@y)) (G12255@chi-expr (G11620@add-subst (G11569@make-full-rib G15795@ids G15799@labels) G15786@expr) (append (map (lambda (G15805@label G15806@var G15807@level) (cons G15805@label (G11672@make-binding 'syntax (cons G15806@var G15807@level)))) G15799@labels G15800@new-vars (map cdr G15785@pvars)) G15788@r) G15789@mr))) (map G11518@gen-label G15795@ids) (map G11514@gen-lexical G15795@ids))) (map car G15785@pvars) (map cdr G15785@pvars)))) (set! G15676@invalid-ids-error (lambda (G15773@id* G15774@e G15775@class) ((letrec ((G15779@find (lambda (G15781@id* G15782@ok*) (if (null? G15781@id*) (G12452@syntax-violation '#f '"invalid syntax" G15774@e) (if (G11640@id? (car G15781@id*)) (if (G11654@bound-id-member? (car G15781@id*) G15782@ok*) (G12446@syntax-error (car G15781@id*) '"duplicate " G15775@class) (G15779@find (cdr G15781@id*) (cons (car G15781@id*) G15782@ok*))) (G12446@syntax-error (car G15781@id*) '"invalid " G15775@class)))))) G15779@find) G15773@id* '()))) (set! G15678@gen-clause (lambda (G15735@x G15736@keys G15737@clauses G15738@r G15739@mr G15740@pat G15741@fender G15742@expr) (call-with-values (lambda () (G12217@convert-pattern G15740@pat G15736@keys)) (lambda (G15753@G15751 G15754@G15752) ((lambda (G15757@pvars G15758@p) (if (not (G11652@distinct-bound-ids? (map car G15757@pvars))) (G15676@invalid-ids-error (map car G15757@pvars) G15740@pat '"pattern variable") (if (not (for-all (lambda (G15761@x) (not (G12221@ellipsis? (car G15761@x)))) G15757@pvars)) (G12452@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G15740@pat) ((lambda (G15763@y) ((lambda (G15765@test) ((lambda (G15767@conseq) ((lambda (G15769@altern) (list (G11482@G11266@build-lambda '#f (list G15763@y) (list 'if G15765@test G15767@conseq G15769@altern)) (list '(primitive syntax-dispatch) G15735@x (list 'quote G15758@p)))) (G15680@gen-syntax-case G15735@x G15736@keys G15737@clauses G15738@r G15739@mr))) (G15674@build-dispatch-call G15757@pvars G15742@expr G15763@y G15738@r G15739@mr))) (if (eq? G15741@fender '#t) G15763@y ((lambda (G15771@call) (list 'if G15763@y G15771@call (list 'quote '#f))) (G15674@build-dispatch-call G15757@pvars G15741@fender G15763@y G15738@r G15739@mr))))) (G11514@gen-lexical 'tmp))))) G15754@G15752 G15753@G15751))))) (set! G15680@gen-syntax-case (lambda (G15701@x G15702@keys G15703@clauses G15704@r G15705@mr) (if (null? G15703@clauses) (list '(primitive syntax-error) G15701@x) ((lambda (G15711@t) ((lambda (G15713@ls/false) (if G15713@ls/false (apply (lambda (G15715@pat G15716@expr) (if (if (G11640@id? G15715@pat) (if (not (G11654@bound-id-member? G15715@pat G15702@keys)) (begin '#f (not (G12221@ellipsis? G15715@pat))) '#f) '#f) (if (G11648@free-id=? G15715@pat (G12105@scheme-stx '_)) (G12255@chi-expr G15716@expr G15704@r G15705@mr) ((lambda (G15719@lab G15720@lex) ((lambda (G15723@body) (list (G11482@G11266@build-lambda '#f (list G15720@lex) G15723@body) G15701@x)) (G12255@chi-expr (G11620@add-subst (G11569@make-full-rib (list G15715@pat) (list G15719@lab)) G15716@expr) (cons (cons G15719@lab (G11672@make-binding 'syntax (cons G15720@lex '0))) G15704@r) G15705@mr))) (G11518@gen-label G15715@pat) (G11514@gen-lexical G15715@pat))) (G15678@gen-clause G15701@x G15702@keys (cdr G15703@clauses) G15704@r G15705@mr G15715@pat '#t G15716@expr))) G15713@ls/false) ((lambda (G15725@t) ((lambda (G15727@ls/false) (if G15727@ls/false (apply (lambda (G15729@pat G15730@fender G15731@expr) (G15678@gen-clause G15701@x G15702@keys (cdr G15703@clauses) G15704@r G15705@mr G15729@pat G15730@fender G15731@expr)) G15727@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15725@t))) (G12219@syntax-dispatch G15725@t '(any any any)))) G15711@t))) (G12219@syntax-dispatch G15711@t '(any any)))) (car G15703@clauses))))) (lambda (G15681@e G15682@r G15683@mr) ((lambda (G15687@t) ((lambda (G15689@ls/false) (if G15689@ls/false (apply (lambda (G15691@expr G15692@keys G15693@clauses) (begin (G12225@verify-literals G15692@keys G15681@e) ((lambda (G15697@x) ((lambda (G15699@body) (list (G11482@G11266@build-lambda '#f (list G15697@x) G15699@body) (G12255@chi-expr G15691@expr G15682@r G15683@mr))) (G15680@gen-syntax-case G15697@x G15692@keys G15693@clauses G15682@r G15683@mr))) (G11514@gen-lexical 'tmp)))) G15689@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15687@t))) (G12219@syntax-dispatch G15687@t '(_ any each-any . each-any)))) G15681@e)))) '#f '#f '#f '#f)))) (set! G12229@ellipsis-map (lambda (G15811@proc G15812@ls . G15815@ls*) ((lambda (G15818@who) (begin (set! G15818@who '...) (begin (if (list? G15812@ls) (void) (assertion-violation G15818@who '"not a list" G15812@ls)) (if (null? G15815@ls*) (void) ((lambda (G15819@n) (for-each (lambda (G15821@x) (begin (if (list? G15821@x) (void) (assertion-violation G15818@who '"not a list" G15821@x)) (if (= (length G15821@x) G15819@n) (void) (assertion-violation G15818@who '"length mismatch" G15812@ls G15821@x)))) G15815@ls*)) (length G15812@ls))) (apply map G15811@proc G15812@ls G15815@ls*)))) '#f))) (set! G12231@syntax-transformer ((lambda () ((lambda (G15824@gen-syntax G15826@gen-ref G15828@gen-append G15830@gen-mappend G15832@gen-map G15834@gen-cons G15836@gen-vector G15838@regen) (begin (set! G15824@gen-syntax (lambda (G15937@src G15938@e G15939@r G15940@maps G15941@ellipsis? G15942@vec?) ((lambda (G15949@t) ((lambda (G15951@ls/false) (if (if G15951@ls/false (begin '#f (apply (lambda (G15953@dots) (G15941@ellipsis? G15953@dots)) G15951@ls/false)) '#f) (apply (lambda (G15955@dots) (G12452@syntax-violation '#f '"misplaced ellipsis in syntax form" G15937@src)) G15951@ls/false) ((lambda (G15957@t) ((lambda (G15959@ls/false) (if (if G15959@ls/false (begin '#f (apply (lambda (G15961@id) (G11640@id? G15961@id)) G15959@ls/false)) '#f) (apply (lambda (G15963@id) ((lambda (G15965@label) ((lambda (G15967@b) ((lambda () (if (eq? (G11674@binding-type G15967@b) 'syntax) (call-with-values (lambda () ((lambda (G15971@var.lev) (G15826@gen-ref G15937@src (car G15971@var.lev) (cdr G15971@var.lev) G15940@maps)) (G11676@binding-value G15967@b))) (lambda (G15973@G15969 G15974@G15970) ((lambda (G15977@maps G15978@var) (values (list 'ref G15978@var) G15977@maps)) G15974@G15970 G15973@G15969))) (values (list 'quote G15938@e) G15940@maps))))) (G11670@label->binding G15965@label G15939@r))) (G11666@id->label G15938@e))) G15959@ls/false) ((lambda (G15981@t) ((lambda (G15983@ls/false) (if (if G15983@ls/false (begin '#f (apply (lambda (G15985@dots G15986@e) (G15941@ellipsis? G15985@dots)) G15983@ls/false)) '#f) (apply (lambda (G15989@dots G15990@e) (if G15942@vec? (G12452@syntax-violation '#f '"misplaced ellipsis in syntax form" G15937@src) (G15824@gen-syntax G15937@src G15990@e G15939@r G15940@maps (lambda (G15993@x) '#f) '#f))) G15983@ls/false) ((lambda (G15995@t) ((lambda (G15997@ls/false) (if (if G15997@ls/false (begin '#f (apply (lambda (G15999@x G16000@dots G16001@y) (G15941@ellipsis? G16000@dots)) G15997@ls/false)) '#f) (apply (lambda (G16005@x G16006@dots G16007@y) ((letrec ((G16011@f (lambda (G16013@y G16014@k) ((lambda (G16017@t) ((lambda (G16019@ls/false) (if G16019@ls/false (apply (lambda () (G16014@k G15940@maps)) G16019@ls/false) ((lambda (G16021@t) ((lambda (G16023@ls/false) (if (if G16023@ls/false (begin '#f (apply (lambda (G16025@dots G16026@y) (G15941@ellipsis? G16025@dots)) G16023@ls/false)) '#f) (apply (lambda (G16029@dots G16030@y) (G16011@f G16030@y (lambda (G16033@maps) (call-with-values (lambda () (G16014@k (cons '() G16033@maps))) (lambda (G16037@G16035 G16038@G16036) ((lambda (G16041@maps G16042@x) (if (null? (car G16041@maps)) (G12452@syntax-violation '#f '"extra ellipsis in syntax form" G15937@src) (values (G15830@gen-mappend G16042@x (car G16041@maps)) (cdr G16041@maps)))) G16038@G16036 G16037@G16035)))))) G16023@ls/false) ((lambda (G16045@t) ((lambda (G16047@ls/false) (if G16047@ls/false (apply (lambda () (call-with-values (lambda () (G15824@gen-syntax G15937@src G16013@y G15939@r G15940@maps G15941@ellipsis? G15942@vec?)) (lambda (G16051@G16049 G16052@G16050) ((lambda (G16055@maps G16056@y) (call-with-values (lambda () (G16014@k G16055@maps)) (lambda (G16061@G16059 G16062@G16060) ((lambda (G16065@maps G16066@x) (values (G15828@gen-append G16066@x G16056@y) G16065@maps)) G16062@G16060 G16061@G16059)))) G16052@G16050 G16051@G16049)))) G16047@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16045@t))) (G12219@syntax-dispatch G16045@t '_))) G16021@t))) (G12219@syntax-dispatch G16021@t '(any . any)))) G16017@t))) (G12219@syntax-dispatch G16017@t '()))) G16013@y)))) G16011@f) G16007@y (lambda (G16069@maps) (call-with-values (lambda () (G15824@gen-syntax G15937@src G16005@x G15939@r (cons '() G16069@maps) G15941@ellipsis? '#f)) (lambda (G16073@G16071 G16074@G16072) ((lambda (G16077@maps G16078@x) (if (null? (car G16077@maps)) (G12452@syntax-violation '#f '"extra ellipsis in syntax form" G15937@src) (values (G15832@gen-map G16078@x (car G16077@maps)) (cdr G16077@maps)))) G16074@G16072 G16073@G16071)))))) G15997@ls/false) ((lambda (G16081@t) ((lambda (G16083@ls/false) (if G16083@ls/false (apply (lambda (G16085@x G16086@y) (call-with-values (lambda () (G15824@gen-syntax G15937@src G16085@x G15939@r G15940@maps G15941@ellipsis? '#f)) (lambda (G16091@G16089 G16092@G16090) ((lambda (G16095@maps G16096@xnew) (call-with-values (lambda () (G15824@gen-syntax G15937@src G16086@y G15939@r G16095@maps G15941@ellipsis? G15942@vec?)) (lambda (G16101@G16099 G16102@G16100) ((lambda (G16105@maps G16106@ynew) (values (G15834@gen-cons G15938@e G16085@x G16086@y G16096@xnew G16106@ynew) G16105@maps)) G16102@G16100 G16101@G16099)))) G16092@G16090 G16091@G16089)))) G16083@ls/false) ((lambda (G16109@t) ((lambda (G16111@ls/false) (if G16111@ls/false (apply (lambda (G16113@ls) (call-with-values (lambda () (G15824@gen-syntax G15937@src G16113@ls G15939@r G15940@maps G15941@ellipsis? '#t)) (lambda (G16117@G16115 G16118@G16116) ((lambda (G16121@maps G16122@lsnew) (values (G15836@gen-vector G15938@e G16113@ls G16122@lsnew) G16121@maps)) G16118@G16116 G16117@G16115)))) G16111@ls/false) ((lambda (G16125@t) ((lambda (G16127@ls/false) (if G16127@ls/false (apply (lambda () (values (list 'quote G15938@e) G15940@maps)) G16127@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16125@t))) (G12219@syntax-dispatch G16125@t '_))) G16109@t))) (G12219@syntax-dispatch G16109@t '#(vector each-any)))) G16081@t))) (G12219@syntax-dispatch G16081@t '(any . any)))) G15995@t))) (G12219@syntax-dispatch G15995@t '(any any . any)))) G15981@t))) (G12219@syntax-dispatch G15981@t '(any any)))) G15957@t))) (G12219@syntax-dispatch G15957@t 'any))) G15949@t))) (G12219@syntax-dispatch G15949@t 'any))) G15938@e))) (set! G15826@gen-ref (lambda (G15913@src G15914@var G15915@level G15916@maps) (if (= G15915@level '0) (values G15914@var G15916@maps) (if (null? G15916@maps) (G12452@syntax-violation '#f '"missing ellipsis in syntax form" G15913@src) (call-with-values (lambda () (G15826@gen-ref G15913@src G15914@var (- G15915@level '1) (cdr G15916@maps))) (lambda (G15923@G15921 G15924@G15922) ((lambda (G15927@outer-maps G15928@outer-var) ((lambda (G15931@t) (if G15931@t ((lambda (G15933@b) (values (cdr G15933@b) G15916@maps)) G15931@t) ((lambda (G15935@inner-var) (values G15935@inner-var (cons (cons (cons G15928@outer-var G15935@inner-var) (car G15916@maps)) G15927@outer-maps))) (G11514@gen-lexical 'tmp)))) (assq G15928@outer-var (car G15916@maps)))) G15924@G15922 G15923@G15921))))))) (set! G15828@gen-append (lambda (G15909@x G15910@y) (if (equal? G15910@y ''()) G15909@x (list 'append G15909@x G15910@y)))) (set! G15830@gen-mappend (lambda (G15905@e G15906@map-env) (list 'apply '(primitive append) (G15832@gen-map G15905@e G15906@map-env)))) (set! G15832@gen-map (lambda (G15887@e G15888@map-env) ((lambda (G15891@formals G15892@actuals) (if (eq? (car G15887@e) 'ref) (car G15892@actuals) (if (for-all (lambda (G15895@x) (if (eq? (car G15895@x) 'ref) (begin '#f (memq (cadr G15895@x) G15891@formals)) '#f)) (cdr G15887@e)) ((lambda (G15897@args) (cons 'map (cons (list 'primitive (car G15887@e)) G15897@args))) (map ((lambda (G15899@r) (lambda (G15901@x) (cdr (assq (cadr G15901@x) G15899@r)))) (map cons G15891@formals G15892@actuals)) (cdr G15887@e))) (cons* 'map (list 'lambda G15891@formals G15887@e) G15892@actuals)))) (map cdr G15888@map-env) (map (lambda (G15903@x) (list 'ref (car G15903@x))) G15888@map-env)))) (set! G15834@gen-cons (lambda (G15872@e G15873@x G15874@y G15875@xnew G15876@ynew) ((lambda (G15882@t) (if (eqv? G15882@t 'quote) (if (eq? (car G15875@xnew) 'quote) ((lambda (G15883@xnew G15884@ynew) (if (if (eq? G15883@xnew G15873@x) (begin '#f (eq? G15884@ynew G15874@y)) '#f) (list 'quote G15872@e) (list 'quote (cons G15883@xnew G15884@ynew)))) (cadr G15875@xnew) (cadr G15876@ynew)) (if (null? (cadr G15876@ynew)) (list 'list G15875@xnew) (list 'cons G15875@xnew G15876@ynew))) (if (eqv? G15882@t 'list) (cons 'list (cons G15875@xnew (cdr G15876@ynew))) (list 'cons G15875@xnew G15876@ynew)))) (car G15876@ynew)))) (set! G15836@gen-vector (lambda (G15866@e G15867@ls G15868@lsnew) (if (eq? (car G15868@lsnew) 'quote) (if (eq? (cadr G15868@lsnew) G15867@ls) (list 'quote G15866@e) (list 'quote (list->vector (cadr G15868@lsnew)))) (if (eq? (car G15868@lsnew) 'list) (cons 'vector (cdr G15868@lsnew)) (list 'list->vector G15868@lsnew))))) (set! G15838@regen (lambda (G15861@x) ((lambda (G15863@t) (if (eqv? G15863@t 'ref) (cadr G15861@x) (if (eqv? G15863@t 'primitive) (list 'primitive (cadr G15861@x)) (if (eqv? G15863@t 'quote) (list 'quote (cadr G15861@x)) (if (eqv? G15863@t 'lambda) (G11482@G11266@build-lambda '#f (cadr G15861@x) (G15838@regen (caddr G15861@x))) (if (eqv? G15863@t 'map) ((lambda (G15864@ls) (cons '(primitive ellipsis-map) G15864@ls)) (map G15838@regen (cdr G15861@x))) (cons (list 'primitive (car G15861@x)) (map G15838@regen (cdr G15861@x))))))))) (car G15861@x)))) (lambda (G15839@e G15840@r G15841@mr) ((lambda (G15845@t) ((lambda (G15847@ls/false) (if G15847@ls/false (apply (lambda (G15849@x) (call-with-values (lambda () (G15824@gen-syntax G15839@e G15849@x G15840@r '() G12221@ellipsis? '#f)) (lambda (G15853@G15851 G15854@G15852) ((lambda (G15857@maps G15858@e) (G15838@regen G15858@e)) G15854@G15852 G15853@G15851)))) G15847@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G15845@t))) (G12219@syntax-dispatch G15845@t '(_ any)))) G15839@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G12233@core-macro-transformer (lambda (G16129@name) ((lambda (G16131@t) (if (eqv? G16131@t 'quote) G12139@quote-transformer (if (eqv? G16131@t 'lambda) G12143@lambda-transformer (if (eqv? G16131@t 'case-lambda) G12141@case-lambda-transformer (if (eqv? G16131@t 'letrec) G12119@letrec-transformer (if (eqv? G16131@t 'letrec*) G12121@letrec*-transformer (if (eqv? G16131@t 'case) G12137@case-transformer (if (eqv? G16131@t 'if) G12135@if-transformer (if (eqv? G16131@t 'when) G12131@when-transformer (if (eqv? G16131@t 'unless) G12133@unless-transformer (if (eqv? G16131@t 'parameterize) G12213@parameterize-transformer (if (eqv? G16131@t 'foreign-call) G12215@foreign-call-transformer (if (eqv? G16131@t 'syntax-case) G12227@syntax-case-transformer (if (eqv? G16131@t 'syntax) G12231@syntax-transformer (if (eqv? G16131@t 'type-descriptor) G12125@type-descriptor-transformer (if (eqv? G16131@t 'record-type-descriptor) G12127@record-type-descriptor-transformer (if (eqv? G16131@t 'record-constructor-descriptor) G12129@record-constructor-descriptor-transformer (if (eqv? G16131@t 'fluid-let-syntax) G12123@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G16129@name))))))))))))))))))) G16129@name))) (set! G12235@file-options-macro (lambda (G16132@x) ((lambda (G16134@t) ((lambda (G16136@ls/false) (if (if G16136@ls/false (begin '#f (apply (lambda (G16138@opt*) (if (for-all G11640@id? G16138@opt*) (begin '#f (G10457@G10405@file-options-spec (map G11642@id->sym G16138@opt*))) '#f)) G16136@ls/false)) '#f) (apply (lambda (G16140@opt*) (G12145@bless (list 'quote (G10457@G10405@file-options-spec (map G11642@id->sym G16140@opt*))))) G16136@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16134@t))) (G12219@syntax-dispatch G16134@t '(_ . each-any)))) G16132@x))) (set! G12237@symbol-macro (lambda (G16142@x G16143@set) ((lambda (G16146@t) ((lambda (G16148@ls/false) (if (if G16148@ls/false (begin '#f (apply (lambda (G16150@name) (if (G11640@id? G16150@name) (begin '#f (memq (G11642@id->sym G16150@name) G16143@set)) '#f)) G16148@ls/false)) '#f) (apply (lambda (G16152@name) (G12145@bless (list 'quote G16152@name))) G16148@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16146@t))) (G12219@syntax-dispatch G16146@t '(_ any)))) G16142@x))) (set! G12239@macro-transformer (lambda (G16154@x) (if (procedure? G16154@x) G16154@x (if (symbol? G16154@x) ((lambda (G16156@t) (if (eqv? G16156@t 'define-record-type) G12207@define-record-type-macro (if (eqv? G16156@t 'define-struct) G12205@define-struct-macro (if (eqv? G16156@t 'include) G12195@include-macro (if (eqv? G16156@t 'cond) G12191@cond-macro (if (eqv? G16156@t 'let) G12151@let-macro (if (eqv? G16156@t 'do) G12183@do-macro (if (eqv? G16156@t 'or) G12187@or-macro (if (eqv? G16156@t 'and) G12189@and-macro (if (eqv? G16156@t 'let*) G12185@let*-macro (if (eqv? G16156@t 'let-values) G12153@let-values-macro (if (eqv? G16156@t 'let*-values) G12155@let*-values-macro (if (eqv? G16156@t 'syntax-rules) G12199@syntax-rules-macro (if (eqv? G16156@t 'quasiquote) G12201@quasiquote-macro (if (eqv? G16156@t 'quasisyntax) G12203@quasisyntax-macro (if (eqv? G16156@t 'with-syntax) G12147@with-syntax-macro (if (eqv? G16156@t 'identifier-syntax) G12181@identifier-syntax-macro (if (eqv? G16156@t 'time) G12173@time-macro (if (eqv? G16156@t 'delay) G12175@delay-macro (if (eqv? G16156@t 'assert) G12177@assert-macro (if (eqv? G16156@t 'endianness) G12179@endianness-macro (if (eqv? G16156@t 'guard) G12169@guard-macro (if (eqv? G16156@t 'define-enumeration) G12171@define-enumeration-macro (if (eqv? G16156@t 'trace-lambda) G12157@trace-lambda-macro (if (eqv? G16156@t 'trace-define) G12159@trace-define-macro (if (eqv? G16156@t 'trace-define-syntax) G12161@trace-define-syntax-macro (if (eqv? G16156@t 'trace-let-syntax) G12165@trace-let-syntax-macro (if (eqv? G16156@t 'trace-letrec-syntax) G12167@trace-letrec-syntax-macro (if (eqv? G16156@t 'define-condition-type) G12209@define-condition-type-macro (if (eqv? G16156@t 'include-into) G12197@include-into-macro (if (eqv? G16156@t 'eol-style) (lambda (G16161@x) (G12237@symbol-macro G16161@x '(none lf cr crlf nel crnel ls))) (if (eqv? G16156@t 'error-handling-mode) (lambda (G16159@x) (G12237@symbol-macro G16159@x '(ignore raise replace))) (if (eqv? G16156@t 'buffer-mode) (lambda (G16157@x) (G12237@symbol-macro G16157@x '(none line block))) (if (eqv? G16156@t 'file-options) G12235@file-options-macro (if (memv G16156@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G12211@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G16154@x)))))))))))))))))))))))))))))))))))) G16154@x) (error 'core-macro-transformer '"BUG: invalid macro" G16154@x))))) (set! G12241@local-macro-transformer (lambda (G16163@x) (car G16163@x))) (set! G12243@do-macro-call (lambda (G16165@transformer G16166@expr) ((lambda (G16169@out) (begin ((letrec ((G16171@f (lambda (G16173@x) (if (G11584@stx? G16173@x) (void) (if (pair? G16173@x) (begin (G16171@f (car G16173@x)) (G16171@f (cdr G16173@x))) (if (vector? G16173@x) (vector-for-each G16171@f G16173@x) (if (symbol? G16173@x) (G12452@syntax-violation '#f '"raw symbol encountered in output of macro" G16166@expr G16173@x) (void)))))))) G16171@f) G16169@out) (G11618@add-mark (G11608@gen-mark) G16169@out G16166@expr))) (G16165@transformer (G11618@add-mark G11610@anti-mark G16166@expr '#f))))) (set! G12245@chi-macro (lambda (G16175@p G16176@e) (G12243@do-macro-call (G12239@macro-transformer G16175@p) G16176@e))) (set! G12247@chi-local-macro (lambda (G16179@p G16180@e) (G12243@do-macro-call (G12241@local-macro-transformer G16179@p) G16180@e))) (set! G12249@chi-global-macro (lambda (G16183@p G16184@e) ((lambda (G16187@lib G16188@loc) (begin (G11128@G10769@visit-library G16187@lib) ((lambda (G16191@x) ((lambda (G16193@transformer) (G12243@do-macro-call G16193@transformer G16184@e)) (if (procedure? G16191@x) G16191@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G16191@x)))) (symbol-value G16188@loc)))) (car G16183@p) (cdr G16183@p)))) (set! G12251@chi-expr* (lambda (G16195@e* G16196@r G16197@mr) (if (null? G16195@e*) '() ((lambda (G16201@e) (cons G16201@e (G12251@chi-expr* (cdr G16195@e*) G16196@r G16197@mr))) (G12255@chi-expr (car G16195@e*) G16196@r G16197@mr))))) (set! G12253@chi-application (lambda (G16203@e G16204@r G16205@mr) ((lambda (G16209@t) ((lambda (G16211@ls/false) (if G16211@ls/false (apply (lambda (G16213@rator G16214@rands) ((lambda (G16217@rator) (cons G16217@rator (G12251@chi-expr* G16214@rands G16204@r G16205@mr))) (G12255@chi-expr G16213@rator G16204@r G16205@mr))) G16211@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16209@t))) (G12219@syntax-dispatch G16209@t '(any . each-any)))) G16203@e))) (set! G12255@chi-expr (lambda (G16219@e G16220@r G16221@mr) (call-with-values (lambda () (G11680@syntax-type G16219@e G16220@r)) (lambda (G16228@G16225 G16229@G16226 G16230@G16227) ((lambda (G16234@kwd G16235@value G16236@type) ((lambda (G16240@t) (if (eqv? G16240@t 'core-macro) ((lambda (G16290@transformer) (G16290@transformer G16219@e G16220@r G16221@mr)) (G12233@core-macro-transformer G16235@value)) (if (eqv? G16240@t 'global) ((lambda (G16286@lib) ((lambda (G16288@loc) ((lambda () (begin ((G12330@inv-collector) G16286@lib) G16288@loc)))) (cdr G16235@value))) (car G16235@value)) (if (eqv? G16240@t 'core-prim) ((lambda (G16284@name) (list 'primitive G16284@name)) G16235@value) (if (eqv? G16240@t 'call) (G12253@chi-application G16219@e G16220@r G16221@mr) (if (eqv? G16240@t 'lexical) ((lambda (G16282@lex) G16282@lex) (G12107@lexical-var G16235@value)) (if (memv G16240@t '(global-macro global-macro!)) (G12255@chi-expr (G12249@chi-global-macro G16235@value G16219@e) G16220@r G16221@mr) (if (memv G16240@t '(local-macro local-macro!)) (G12255@chi-expr (G12247@chi-local-macro G16235@value G16219@e) G16220@r G16221@mr) (if (memv G16240@t '(macro macro!)) (G12255@chi-expr (G12245@chi-macro G16235@value G16219@e) G16220@r G16221@mr) (if (eqv? G16240@t 'constant) ((lambda (G16280@datum) (list 'quote G16280@datum)) G16235@value) (if (eqv? G16240@t 'set!) (G12257@chi-set! G16219@e G16220@r G16221@mr) (if (eqv? G16240@t 'begin) ((lambda (G16272@t) ((lambda (G16274@ls/false) (if G16274@ls/false (apply (lambda (G16276@x G16277@x*) (G11485@G11342@build-sequence '#f (G12251@chi-expr* (cons G16276@x G16277@x*) G16220@r G16221@mr))) G16274@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16272@t))) (G12219@syntax-dispatch G16272@t '(_ any . each-any)))) G16219@e) (if (memv G16240@t '(let-syntax letrec-syntax)) ((lambda (G16242@t) ((lambda (G16244@ls/false) (if (if G16244@ls/false (begin '#f (apply (lambda (G16246@xlhs* G16247@xrhs* G16248@xbody G16249@xbody*) (if (G11650@valid-bound-ids? G16246@xlhs*) (void) (G12452@syntax-violation '#f '"invalid identifiers" G16219@e))) G16244@ls/false)) '#f) (apply (lambda (G16254@xlhs* G16255@xrhs* G16256@xbody G16257@xbody*) ((lambda (G16262@xlab*) ((lambda (G16264@xrib) ((lambda (G16266@xb*) ((lambda () (G11485@G11342@build-sequence '#f (G12251@chi-expr* (map (lambda (G16268@x) (G11620@add-subst G16264@xrib G16268@x)) (cons G16256@xbody G16257@xbody*)) (append (map cons G16262@xlab* G16266@xb*) G16220@r) (append (map cons G16262@xlab* G16266@xb*) G16221@mr)))))) (map (lambda (G16270@x) (G11711@make-eval-transformer (G12316@expand-transformer (if (eq? G16236@type 'let-syntax) G16270@x (G11620@add-subst G16264@xrib G16270@x)) G16221@mr))) G16255@xrhs*))) (G11569@make-full-rib G16254@xlhs* G16262@xlab*))) (map G11518@gen-label G16254@xlhs*))) G16244@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16242@t))) (G12219@syntax-dispatch G16242@t '(_ #(each (any any)) any . each-any)))) G16219@e) (if (eqv? G16240@t 'displaced-lexical) (G12452@syntax-violation '#f '"identifier out of context" G16219@e) (if (eqv? G16240@t 'syntax) (G12452@syntax-violation '#f '"reference to pattern variable outside a syntax form" G16219@e) (if (memv G16240@t '(define define-syntax module import library)) (G12452@syntax-violation '#f (string-append ((lambda (G16241@t) (if (eqv? G16241@t 'define) '"a definition" (if (eqv? G16241@t 'define-syntax) '"a define-syntax" (if (eqv? G16241@t 'module) '"a module definition" (if (eqv? G16241@t 'library) '"a library definition" (if (eqv? G16241@t 'import) '"an import declaration" '"a non-expression")))))) G16236@type) '" was found where an expression was expected") G16219@e) (if (eqv? G16240@t 'mutable) (G12452@syntax-violation '#f '"attempt to reference an unexportable variable" G16219@e) (G12452@syntax-violation '#f '"invalid expression" G16219@e)))))))))))))))))) G16236@type)) G16230@G16227 G16229@G16226 G16228@G16225))))) (set! G12257@chi-set! (lambda (G16292@e G16293@r G16294@mr) ((lambda (G16298@t) ((lambda (G16300@ls/false) (if (if G16300@ls/false (begin '#f (apply (lambda (G16302@x G16303@v) (G11640@id? G16302@x)) G16300@ls/false)) '#f) (apply (lambda (G16306@x G16307@v) (call-with-values (lambda () (G11680@syntax-type G16306@x G16293@r)) (lambda (G16313@G16310 G16314@G16311 G16315@G16312) ((lambda (G16319@kwd G16320@value G16321@type) ((lambda (G16325@t) (if (eqv? G16325@t 'lexical) (begin (G12111@set-lexical-mutable! G16320@value '#t) (list 'set! (G12107@lexical-var G16320@value) (G12255@chi-expr G16307@v G16293@r G16294@mr))) (if (eqv? G16325@t 'core-prim) (G12452@syntax-violation '#f '"cannot modify imported core primitive" G16292@e) (if (eqv? G16325@t 'global) (G12452@syntax-violation '#f '"attempt to modify imported binding" G16292@e) (if (eqv? G16325@t 'global-macro!) (G12255@chi-expr (G12249@chi-global-macro G16320@value G16292@e) G16293@r G16294@mr) (if (eqv? G16325@t 'local-macro!) (G12255@chi-expr (G12247@chi-local-macro G16320@value G16292@e) G16293@r G16294@mr) (if (eqv? G16325@t 'mutable) (G12452@syntax-violation '#f '"attempt to assign to an unexportable variable" G16292@e) (G12452@syntax-violation '#f '"invalid syntax" G16292@e)))))))) G16321@type)) G16315@G16312 G16314@G16311 G16313@G16310)))) G16300@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16298@t))) (G12219@syntax-dispatch G16298@t '(_ any any)))) G16292@e))) (set! G12259@verify-formals (lambda (G16326@fmls G16327@stx) ((lambda (G16330@t) ((lambda (G16332@ls/false) (if G16332@ls/false (apply (lambda (G16334@x*) (if (G11650@valid-bound-ids? G16334@x*) (void) (G12149@invalid-fmls-error G16327@stx G16326@fmls))) G16332@ls/false) ((lambda (G16336@t) ((lambda (G16338@ls/false) (if G16338@ls/false (apply (lambda (G16340@x* G16341@x) (if (G11650@valid-bound-ids? (cons G16341@x G16340@x*)) (void) (G12149@invalid-fmls-error G16327@stx G16326@fmls))) G16338@ls/false) ((lambda (G16344@t) ((lambda (G16346@ls/false) (if G16346@ls/false (apply (lambda () (G12452@syntax-violation '#f '"invalid syntax" G16327@stx)) G16346@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16344@t))) (G12219@syntax-dispatch G16344@t '_))) G16336@t))) (G12219@syntax-dispatch G16336@t '#(each+ any () any)))) G16330@t))) (G12219@syntax-dispatch G16330@t 'each-any))) G16326@fmls))) (set! G12261@chi-lambda-clause (lambda (G16348@stx G16349@fmls G16350@body* G16351@r G16352@mr) ((lambda (G16358@t) ((lambda (G16360@ls/false) (if G16360@ls/false (apply (lambda (G16362@x*) (begin (G12259@verify-formals G16349@fmls G16348@stx) ((lambda (G16364@lex* G16365@lab*) (values G16364@lex* (G12277@chi-internal (G11620@add-subst (G11569@make-full-rib G16362@x* G16365@lab*) G16350@body*) (G12115@add-lexicals G16365@lab* G16364@lex* G16351@r) G16352@mr))) (map G11514@gen-lexical G16362@x*) (map G11518@gen-label G16362@x*)))) G16360@ls/false) ((lambda (G16368@t) ((lambda (G16370@ls/false) (if G16370@ls/false (apply (lambda (G16372@x* G16373@x) (begin (G12259@verify-formals G16349@fmls G16348@stx) ((lambda (G16376@lex* G16377@lab* G16378@lex G16379@lab) (values (append G16376@lex* G16378@lex) (G12277@chi-internal (G11620@add-subst (G11569@make-full-rib (cons G16373@x G16372@x*) (cons G16379@lab G16377@lab*)) G16350@body*) (G12115@add-lexicals (cons G16379@lab G16377@lab*) (cons G16378@lex G16376@lex*) G16351@r) G16352@mr))) (map G11514@gen-lexical G16372@x*) (map G11518@gen-label G16372@x*) (G11514@gen-lexical G16373@x) (G11518@gen-label G16373@x)))) G16370@ls/false) ((lambda (G16384@t) ((lambda (G16386@ls/false) (if G16386@ls/false (apply (lambda () (G12452@syntax-violation '#f '"invalid syntax" G16349@fmls)) G16386@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16384@t))) (G12219@syntax-dispatch G16384@t '_))) G16368@t))) (G12219@syntax-dispatch G16368@t '#(each+ any () any)))) G16358@t))) (G12219@syntax-dispatch G16358@t 'each-any))) G16349@fmls))) (set! G12263@chi-lambda-clause* (lambda (G16388@stx G16389@fmls* G16390@body** G16391@r G16392@mr) (if (null? G16389@fmls*) (values '() '()) (call-with-values (lambda () (G12261@chi-lambda-clause G16388@stx (car G16389@fmls*) (car G16390@body**) G16391@r G16392@mr)) (lambda (G16400@G16398 G16401@G16399) ((lambda (G16404@b G16405@a) (call-with-values (lambda () (G12263@chi-lambda-clause* G16388@stx (cdr G16389@fmls*) (cdr G16390@body**) G16391@r G16392@mr)) (lambda (G16410@G16408 G16411@G16409) ((lambda (G16414@b* G16415@a*) (values (cons G16405@a G16415@a*) (cons G16404@b G16414@b*))) G16411@G16409 G16410@G16408)))) G16401@G16399 G16400@G16398)))))) (set! G12265@chi-defun (lambda (G16418@x G16419@r G16420@mr) ((lambda (G16424@fmls G16425@body*) (call-with-values (lambda () (G12261@chi-lambda-clause G16424@fmls G16424@fmls G16425@body* G16419@r G16420@mr)) (lambda (G16430@G16428 G16431@G16429) ((lambda (G16434@body G16435@fmls) (G11482@G11266@build-lambda '#f G16435@fmls G16434@body)) G16431@G16429 G16430@G16428)))) (car G16418@x) (cdr G16418@x)))) (set! G12267@chi-rhs (lambda (G16438@rhs G16439@r G16440@mr) ((lambda (G16444@t) (if (eqv? G16444@t 'defun) (G12265@chi-defun (cdr G16438@rhs) G16439@r G16440@mr) (if (eqv? G16444@t 'expr) ((lambda (G16447@expr) (G12255@chi-expr G16447@expr G16439@r G16440@mr)) (cdr G16438@rhs)) (if (eqv? G16444@t 'top-expr) ((lambda (G16445@expr) (G11485@G11342@build-sequence '#f (list (G12255@chi-expr G16445@expr G16439@r G16440@mr) (G11486@G11344@build-void)))) (cdr G16438@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G16438@rhs))))) (car G16438@rhs)))) (set! G12269@expand-interaction-rhs*/init* (lambda (G16449@lhs* G16450@rhs* G16451@init* G16452@r G16453@mr) ((letrec ((G16459@f (lambda (G16461@lhs* G16462@rhs*) (if (null? G16461@lhs*) (map (lambda (G16465@x) (G12255@chi-expr G16465@x G16452@r G16453@mr)) G16451@init*) ((lambda (G16467@lhs G16468@rhs) ((lambda (G16471@t) (if (eqv? G16471@t 'defun) ((lambda (G16476@rhs) (cons (list 'set! G16467@lhs G16476@rhs) (G16459@f (cdr G16461@lhs*) (cdr G16462@rhs*)))) (G12265@chi-defun (cdr G16468@rhs) G16452@r G16453@mr)) (if (eqv? G16471@t 'expr) ((lambda (G16474@rhs) (cons (list 'set! G16467@lhs G16474@rhs) (G16459@f (cdr G16461@lhs*) (cdr G16462@rhs*)))) (G12255@chi-expr (cdr G16468@rhs) G16452@r G16453@mr)) (if (eqv? G16471@t 'top-expr) ((lambda (G16472@e) (cons G16472@e (G16459@f (cdr G16461@lhs*) (cdr G16462@rhs*)))) (G12255@chi-expr (cdr G16468@rhs) G16452@r G16453@mr)) (error 'expand-interaction '"invallid" G16468@rhs))))) (car G16468@rhs))) (car G16461@lhs*) (car G16462@rhs*)))))) G16459@f) G16449@lhs* G16450@rhs*))) (set! G12271@chi-rhs* (lambda (G16478@rhs* G16479@r G16480@mr) ((letrec ((G16484@f (lambda (G16486@ls) (if (null? G16486@ls) '() ((lambda (G16488@a) (cons G16488@a (G16484@f (cdr G16486@ls)))) (G12267@chi-rhs (car G16486@ls) G16479@r G16480@mr)))))) G16484@f) G16478@rhs*))) (set! G12273@find-bound=? (lambda (G16490@x G16491@lhs* G16492@rhs*) (if (null? G16491@lhs*) '#f (if (G11646@bound-id=? G16490@x (car G16491@lhs*)) (car G16492@rhs*) (G12273@find-bound=? G16490@x (cdr G16491@lhs*) (cdr G16492@rhs*)))))) (set! G12275@find-dups (lambda (G16496@ls) ((letrec ((G16498@f (lambda (G16500@ls G16501@dups) (if (null? G16500@ls) G16501@dups ((lambda (G16504@t) (if G16504@t ((lambda (G16506@x) (G16498@f (cdr G16500@ls) (cons (list (car G16500@ls) G16506@x) G16501@dups))) G16504@t) (G16498@f (cdr G16500@ls) G16501@dups))) (G12273@find-bound=? (car G16500@ls) (cdr G16500@ls) (cdr G16500@ls))))))) G16498@f) G16496@ls '()))) (set! G12277@chi-internal (lambda (G16508@e* G16509@r G16510@mr) ((lambda (G16514@rib) (call-with-values (lambda () (G12314@chi-body* (map (lambda (G16523@x) (G11620@add-subst G16514@rib G16523@x)) (G11638@syntax->list G16508@e*)) G16509@r G16510@mr '() '() '() '() G16514@rib '#f)) (lambda (G16525@G16516 G16526@G16517 G16527@G16518 G16528@G16519 G16529@G16520 G16530@G16521 G16531@G16522) ((lambda (G16539@kwd* G16540@mod** G16541@rhs* G16542@lex* G16543@mr G16544@r G16545@e*) (begin (if (null? G16545@e*) (G12452@syntax-violation '#f '"no expression in body" G16545@e*) (void)) ((lambda (G16553@init*) ((lambda (G16555@rhs*) ((lambda () (G11488@G11348@build-letrec* '#f (reverse G16542@lex*) (reverse G16555@rhs*) (G11485@G11342@build-sequence '#f G16553@init*))))) (G12271@chi-rhs* G16541@rhs* G16544@r G16543@mr))) (G12251@chi-expr* (append (apply append (reverse G16540@mod**)) G16545@e*) G16544@r G16543@mr)))) G16531@G16522 G16530@G16521 G16529@G16520 G16528@G16519 G16527@G16518 G16526@G16517 G16525@G16516)))) (G11559@make-empty-rib)))) (set! G12279@parse-module (lambda (G16557@e) ((lambda (G16559@t) ((lambda (G16561@ls/false) (if G16561@ls/false (apply (lambda (G16563@export* G16564@b*) (begin (if (for-all G11640@id? G16563@export*) (void) (G12452@syntax-violation '#f '"module exports must be identifiers" G16557@e)) (values '#f (list->vector G16563@export*) G16564@b*))) G16561@ls/false) ((lambda (G16567@t) ((lambda (G16569@ls/false) (if G16569@ls/false (apply (lambda (G16571@name G16572@export* G16573@b*) (begin (if (G11640@id? G16571@name) (void) (G12452@syntax-violation '#f '"module name must be an identifier" G16557@e)) (if (for-all G11640@id? G16572@export*) (void) (G12452@syntax-violation '#f '"module exports must be identifiers" G16557@e)) (values G16571@name (list->vector G16572@export*) G16573@b*))) G16569@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16567@t))) (G12219@syntax-dispatch G16567@t '(_ any each-any . each-any)))) G16559@t))) (G12219@syntax-dispatch G16559@t '(_ each-any . each-any)))) G16557@e))) (set! G12285@G12280 (make-record-type-descriptor 'module-interface '#f 'G12283 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G12287@G12282 '#f) (set! G12289@G12281 (make-record-constructor-descriptor G12285@G12280 '#f G12287@G12282)) (set! G12294@module-interface? (record-predicate G12285@G12280)) (set! G12296@make-module-interface (record-constructor G12289@G12281)) (set! G12298@module-interface-first-mark (record-accessor G12285@G12280 '0)) (set! G12300@module-interface-exp-id-vec (record-accessor G12285@G12280 '1)) (set! G12302@module-interface-exp-lab-vec (record-accessor G12285@G12280 '2)) (set! G12304@set-module-interface-first-mark! (record-mutator G12285@G12280 '0)) (set! G12306@set-module-interface-exp-id-vec! (record-mutator G12285@G12280 '1)) (set! G12308@set-module-interface-exp-lab-vec! (record-mutator G12285@G12280 '2)) (set! G12310@module-interface-exp-id* (lambda (G16577@iface G16578@id) ((lambda (G16582@diff-marks) (begin (set! G16582@diff-marks (lambda (G16589@ls G16590@x) (begin (if (null? G16589@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G16593@a) (if (eq? G16593@a G16590@x) '() (cons G16593@a (G16582@diff-marks (cdr G16589@ls) G16590@x)))) (car G16589@ls))))) ((lambda (G16583@diff G16584@id-vec) (if (null? G16583@diff) G16584@id-vec (vector-map (lambda (G16587@x) (G11586@make-stx (G11588@stx-expr G16587@x) (append G16583@diff (G11590@stx-mark* G16587@x)) '() '())) G16584@id-vec))) (G16582@diff-marks (G11590@stx-mark* G16578@id) (G12298@module-interface-first-mark G16577@iface)) (G12300@module-interface-exp-id-vec G16577@iface)))) '#f))) (set! G12312@chi-internal-module (lambda (G16595@e G16596@r G16597@mr G16598@lex* G16599@rhs* G16600@mod** G16601@kwd*) (call-with-values (lambda () (G12279@parse-module G16595@e)) (lambda (G16612@G16609 G16613@G16610 G16614@G16611) ((lambda (G16618@e* G16619@exp-id* G16620@name) ((lambda (G16624@rib) ((lambda (G16626@e*) ((lambda () (call-with-values (lambda () (G12314@chi-body* G16626@e* G16596@r G16597@mr G16598@lex* G16599@rhs* G16600@mod** G16601@kwd* G16624@rib '#f)) (lambda (G16635@G16628 G16636@G16629 G16637@G16630 G16638@G16631 G16639@G16632 G16640@G16633 G16641@G16634) ((lambda (G16649@kwd* G16650@mod** G16651@rhs* G16652@lex* G16653@mr G16654@r G16655@e*) ((lambda (G16663@exp-lab* G16664@mod**) (if (not G16620@name) (values G16652@lex* G16651@rhs* G16619@exp-id* G16663@exp-lab* G16654@r G16653@mr G16664@mod** G16649@kwd*) ((lambda (G16667@lab G16668@iface) (values G16652@lex* G16651@rhs* (vector G16620@name) (vector G16667@lab) (cons (cons G16667@lab (cons '$module G16668@iface)) G16654@r) (cons (cons G16667@lab (cons '$module G16668@iface)) G16653@mr) G16664@mod** G16649@kwd*)) (G11518@gen-label 'module) (G12296@make-module-interface (car (G11590@stx-mark* G16620@name)) (vector-map (lambda (G16671@x) (G11586@make-stx (G11588@stx-expr G16671@x) (G11590@stx-mark* G16671@x) '() '())) G16619@exp-id*) G16663@exp-lab*)))) (vector-map (lambda (G16673@x) ((lambda (G16675@t) (if G16675@t G16675@t (begin '#f (G12452@syntax-violation '#f '"cannot find module export" G16673@x)))) (G11666@id->label (G11586@make-stx (G11642@id->sym G16673@x) (G11590@stx-mark* G16673@x) (list G16624@rib) '())))) G16619@exp-id*) (cons G16655@e* G16650@mod**))) G16641@G16634 G16640@G16633 G16639@G16632 G16638@G16631 G16637@G16630 G16636@G16629 G16635@G16628)))))) (map (lambda (G16677@x) (G11620@add-subst G16624@rib G16677@x)) (G11638@syntax->list G16618@e*)))) (G11559@make-empty-rib))) G16614@G16611 G16613@G16610 G16612@G16609))))) (set! G12314@chi-body* (lambda (G16679@e* G16680@r G16681@mr G16682@lex* G16683@rhs* G16684@mod** G16685@kwd* G16686@rib G16687@top?) (if (null? G16679@e*) (values G16679@e* G16680@r G16681@mr G16682@lex* G16683@rhs* G16684@mod** G16685@kwd*) ((lambda (G16697@e) (call-with-values (lambda () (G11680@syntax-type G16697@e G16680@r)) (lambda (G16702@G16699 G16703@G16700 G16704@G16701) ((lambda (G16708@kwd G16709@value G16710@type) ((lambda (G16714@kwd*) ((lambda (G16716@t) (if (eqv? G16716@t 'define) (call-with-values (lambda () (G12099@parse-define G16697@e)) (lambda (G16907@G16905 G16908@G16906) ((lambda (G16911@rhs G16912@id) (begin (if (G11654@bound-id-member? G16912@id G16714@kwd*) (G12452@syntax-violation '#f '"cannot redefine keyword" G16697@e) (void)) (call-with-values (lambda () (G11522@gen-define-label+loc G16912@id G16686@rib)) (lambda (G16917@G16915 G16918@G16916) ((lambda (G16921@lex G16922@lab) (begin (G11561@extend-rib! G16686@rib G16912@id G16922@lab) (G12314@chi-body* (cdr G16679@e*) (G12113@add-lexical G16922@lab G16921@lex G16680@r) G16681@mr (cons G16921@lex G16682@lex*) (cons G16911@rhs G16683@rhs*) G16684@mod** G16714@kwd* G16686@rib G16687@top?))) G16918@G16916 G16917@G16915))))) G16908@G16906 G16907@G16905))) (if (eqv? G16716@t 'define-syntax) (call-with-values (lambda () (G12101@parse-define-syntax G16697@e)) (lambda (G16891@G16889 G16892@G16890) ((lambda (G16895@rhs G16896@id) (begin (if (G11654@bound-id-member? G16896@id G16714@kwd*) (G12452@syntax-violation '#f '"cannot redefine keyword" G16697@e) (void)) ((lambda (G16899@lab G16900@expanded-rhs) (begin (G11561@extend-rib! G16686@rib G16896@id G16899@lab) ((lambda (G16903@b) (G12314@chi-body* (cdr G16679@e*) (cons (cons G16899@lab G16903@b) G16680@r) (cons (cons G16899@lab G16903@b) G16681@mr) G16682@lex* G16683@rhs* G16684@mod** G16714@kwd* G16686@rib G16687@top?)) (G11711@make-eval-transformer G16900@expanded-rhs)))) (G11524@gen-define-label G16896@id G16686@rib) (G12316@expand-transformer G16895@rhs G16681@mr)))) G16892@G16890 G16891@G16889))) (if (memv G16716@t '(let-syntax letrec-syntax)) ((lambda (G16863@t) ((lambda (G16865@ls/false) (if (if G16865@ls/false (begin '#f (apply (lambda (G16867@xlhs* G16868@xrhs* G16869@xbody*) (if (G11650@valid-bound-ids? G16867@xlhs*) (void) (G12452@syntax-violation '#f '"invalid identifiers" G16697@e))) G16865@ls/false)) '#f) (apply (lambda (G16873@xlhs* G16874@xrhs* G16875@xbody*) ((lambda (G16879@xlab*) ((lambda (G16881@xrib) ((lambda (G16883@xb*) ((lambda () (G12314@chi-body* (append (map (lambda (G16885@x) (G11620@add-subst G16881@xrib G16885@x)) G16875@xbody*) (cdr G16679@e*)) (append (map cons G16879@xlab* G16883@xb*) G16680@r) (append (map cons G16879@xlab* G16883@xb*) G16681@mr) G16682@lex* G16683@rhs* G16684@mod** G16714@kwd* G16686@rib G16687@top?)))) (map (lambda (G16887@x) (G11711@make-eval-transformer (G12316@expand-transformer (if (eq? G16710@type 'let-syntax) G16887@x (G11620@add-subst G16881@xrib G16887@x)) G16681@mr))) G16874@xrhs*))) (G11569@make-full-rib G16873@xlhs* G16879@xlab*))) (map G11518@gen-label G16873@xlhs*))) G16865@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16863@t))) (G12219@syntax-dispatch G16863@t '(_ #(each (any any)) . each-any)))) G16697@e) (if (eqv? G16716@t 'begin) ((lambda (G16857@t) ((lambda (G16859@ls/false) (if G16859@ls/false (apply (lambda (G16861@x*) (G12314@chi-body* (append G16861@x* (cdr G16679@e*)) G16680@r G16681@mr G16682@lex* G16683@rhs* G16684@mod** G16714@kwd* G16686@rib G16687@top?)) G16859@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16857@t))) (G12219@syntax-dispatch G16857@t '(_ . each-any)))) G16697@e) (if (memv G16716@t '(global-macro global-macro!)) (G12314@chi-body* (cons (G11620@add-subst G16686@rib (G12249@chi-global-macro G16709@value G16697@e)) (cdr G16679@e*)) G16680@r G16681@mr G16682@lex* G16683@rhs* G16684@mod** G16714@kwd* G16686@rib G16687@top?) (if (memv G16716@t '(local-macro local-macro!)) (G12314@chi-body* (cons (G11620@add-subst G16686@rib (G12247@chi-local-macro G16709@value G16697@e)) (cdr G16679@e*)) G16680@r G16681@mr G16682@lex* G16683@rhs* G16684@mod** G16714@kwd* G16686@rib G16687@top?) (if (memv G16716@t '(macro macro!)) (G12314@chi-body* (cons (G11620@add-subst G16686@rib (G12245@chi-macro G16709@value G16697@e)) (cdr G16679@e*)) G16680@r G16681@mr G16682@lex* G16683@rhs* G16684@mod** G16714@kwd* G16686@rib G16687@top?) (if (eqv? G16716@t 'module) (call-with-values (lambda () (G12312@chi-internal-module G16697@e G16680@r G16681@mr G16682@lex* G16683@rhs* G16684@mod** G16714@kwd*)) (lambda (G16821@G16813 G16822@G16814 G16823@G16815 G16824@G16816 G16825@G16817 G16826@G16818 G16827@G16819 G16828@G16820) ((lambda (G16837@kwd* G16838@mod** G16839@mr G16840@r G16841@m-exp-lab* G16842@m-exp-id* G16843@rhs* G16844@lex*) (begin (vector-for-each (lambda (G16853@id G16854@lab) (G11561@extend-rib! G16686@rib G16853@id G16854@lab)) G16842@m-exp-id* G16841@m-exp-lab*) (G12314@chi-body* (cdr G16679@e*) G16840@r G16839@mr G16844@lex* G16843@rhs* G16838@mod** G16837@kwd* G16686@rib G16687@top?))) G16828@G16820 G16827@G16819 G16826@G16818 G16825@G16817 G16824@G16816 G16823@G16815 G16822@G16814 G16821@G16813))) (if (eqv? G16716@t 'library) (begin (G12426@library-expander (G11662@stx->datum G16697@e)) (G12314@chi-body* (cdr G16679@e*) G16680@r G16681@mr G16682@lex* G16683@rhs* G16684@mod** G16714@kwd* G16686@rib G16687@top?)) (if (eqv? G16716@t 'import) (begin ((lambda () ((lambda (G16718@module-import? G16720@module-import G16722@library-import) (begin (set! G16718@module-import? (lambda (G16793@e) ((lambda (G16795@t) ((lambda (G16797@ls/false) (if (if G16797@ls/false (begin '#f (apply (lambda (G16799@id) (G11640@id? G16799@id)) G16797@ls/false)) '#f) (apply (lambda (G16801@id) '#t) G16797@ls/false) ((lambda (G16803@t) ((lambda (G16805@ls/false) (if G16805@ls/false (apply (lambda (G16807@imp*) '#f) G16805@ls/false) ((lambda (G16809@t) ((lambda (G16811@ls/false) (if G16811@ls/false (apply (lambda () (G12452@syntax-violation '#f '"malformed import form" G16793@e)) G16811@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16809@t))) (G12219@syntax-dispatch G16809@t '_))) G16803@t))) (G12219@syntax-dispatch G16803@t '(_ . each-any)))) G16795@t))) (G12219@syntax-dispatch G16795@t '(_ any)))) G16793@e))) (set! G16720@module-import (lambda (G16763@e G16764@r) ((lambda (G16767@t) ((lambda (G16769@ls/false) (if (if G16769@ls/false (begin '#f (apply (lambda (G16771@id) (G11640@id? G16771@id)) G16769@ls/false)) '#f) (apply (lambda (G16773@id) (call-with-values (lambda () (G11680@syntax-type G16773@id G16764@r)) (lambda (G16778@G16775 G16779@G16776 G16780@G16777) ((lambda (G16784@kwd G16785@value G16786@type) ((lambda (G16790@t) (if (eqv? G16790@t '$module) ((lambda (G16791@iface) (values (G12310@module-interface-exp-id* G16791@iface G16773@id) (G12302@module-interface-exp-lab-vec G16791@iface))) G16785@value) (G12452@syntax-violation '#f '"invalid import" G16763@e))) G16786@type)) G16780@G16777 G16779@G16776 G16778@G16775)))) G16769@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16767@t))) (G12219@syntax-dispatch G16767@t '(_ any)))) G16763@e))) (set! G16722@library-import (lambda (G16737@e) ((lambda (G16739@t) ((lambda (G16741@ls/false) (if G16741@ls/false (apply (lambda (G16743@ctxt G16744@imp*) (call-with-values (lambda () (G12324@parse-import-spec* (G12458@syntax->datum G16744@imp*))) (lambda (G16749@G16747 G16750@G16748) ((lambda (G16753@subst-labels G16754@subst-names) (values (vector-map (lambda (G16757@name) (G11606@datum->stx G16743@ctxt G16757@name)) G16754@subst-names) G16753@subst-labels)) G16750@G16748 G16749@G16747)))) G16741@ls/false) ((lambda (G16759@t) ((lambda (G16761@ls/false) (if G16761@ls/false (apply (lambda () (G12452@syntax-violation '#f '"invalid import form" G16737@e)) G16761@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16759@t))) (G12219@syntax-dispatch G16759@t '_))) G16739@t))) (G12219@syntax-dispatch G16739@t '(any . each-any)))) G16737@e))) (call-with-values (lambda () (if (G16718@module-import? G16697@e) (G16720@module-import G16697@e G16680@r) (G16722@library-import G16697@e))) (lambda (G16725@G16723 G16726@G16724) ((lambda (G16729@lab* G16730@id*) (vector-for-each (lambda (G16733@id G16734@lab) (G11561@extend-rib! G16686@rib G16733@id G16734@lab)) G16730@id* G16729@lab*)) G16726@G16724 G16725@G16723))))) '#f '#f '#f))) (G12314@chi-body* (cdr G16679@e*) G16680@r G16681@mr G16682@lex* G16683@rhs* G16684@mod** G16714@kwd* G16686@rib G16687@top?)) (if G16687@top? (G12314@chi-body* (cdr G16679@e*) G16680@r G16681@mr (cons (G11514@gen-lexical 'dummy) G16682@lex*) (cons (cons 'top-expr G16697@e) G16683@rhs*) G16684@mod** G16714@kwd* G16686@rib G16687@top?) (values G16679@e* G16680@r G16681@mr G16682@lex* G16683@rhs* G16684@mod** G16714@kwd*))))))))))))) G16710@type)) (if (G11640@id? G16708@kwd) (cons G16708@kwd G16685@kwd*) G16685@kwd*))) G16704@G16701 G16703@G16700 G16702@G16699)))) (car G16679@e*))))) (set! G12316@expand-transformer (lambda (G16925@expr G16926@r) ((lambda (G16929@rtc) ((lambda (G16931@expanded-rhs) (begin (for-each ((lambda (G16933@mark-visit) (lambda (G16935@x) (begin (G11127@G10767@invoke-library G16935@x) (G16933@mark-visit G16935@x)))) (G12332@vis-collector)) (G16929@rtc)) G16931@expanded-rhs)) ((lambda (G16941@G16937@inv-collector G16942@G16938@vis-collector G16943@G16939@inv-collector G16944@G16940@vis-collector) ((lambda (G16949@swap) (dynamic-wind G16949@swap (lambda () (G12255@chi-expr G16925@expr G16926@r G16926@r)) G16949@swap)) (lambda () (begin ((lambda (G16951@t) (begin (G16941@G16937@inv-collector G16943@G16939@inv-collector) (set! G16943@G16939@inv-collector G16951@t))) (G16941@G16937@inv-collector)) ((lambda (G16953@t) (begin (G16942@G16938@vis-collector G16944@G16940@vis-collector) (set! G16944@G16940@vis-collector G16953@t))) (G16942@G16938@vis-collector)))))) G12330@inv-collector G12332@vis-collector G16929@rtc (lambda (G16955@x) (values))))) (G12328@make-collector)))) (set! G12318@parse-exports (lambda (G16957@exp*) ((lambda (G16960@idsyn?) (begin (set! G16960@idsyn? (lambda (G16989@x) (symbol? (G12458@syntax->datum G16989@x)))) ((letrec ((G16961@f (lambda (G16963@exp* G16964@int* G16965@ext*) (if (null? G16963@exp*) (begin ((lambda (G16969@id*) (if (G11650@valid-bound-ids? G16969@id*) (void) (G12452@syntax-violation 'export '"invalid exports" (G12275@find-dups G16969@id*)))) (map (lambda (G16971@x) (G11586@make-stx G16971@x G11510@top-mark* '() '())) G16965@ext*)) (values (map G12458@syntax->datum G16964@int*) (map G12458@syntax->datum G16965@ext*))) ((lambda (G16973@t) ((lambda (G16975@ls/false) (if G16975@ls/false (apply (lambda (G16977@rename G16978@i* G16979@e*) (begin (if (if (eq? (G12458@syntax->datum G16977@rename) 'rename) (if (for-all G16960@idsyn? G16978@i*) (begin '#f (for-all G16960@idsyn? G16979@e*)) '#f) '#f) (void) (G12452@syntax-violation 'export '"invalid export specifier" (car G16963@exp*))) (G16961@f (cdr G16963@exp*) (append G16978@i* G16964@int*) (append G16979@e* G16965@ext*)))) G16975@ls/false) ((lambda (G16983@t) ((lambda (G16985@ls/false) (if G16985@ls/false (apply (lambda (G16987@ie) (begin (if (G16960@idsyn? G16987@ie) (void) (G12452@syntax-violation 'export '"invalid export" G16987@ie)) (G16961@f (cdr G16963@exp*) (cons G16987@ie G16964@int*) (cons G16987@ie G16965@ext*)))) G16985@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G16983@t))) (G12219@syntax-dispatch G16983@t 'any))) G16973@t))) (G12219@syntax-dispatch G16973@t '(any . #(each (any any)))))) (car G16963@exp*)))))) G16961@f) G16957@exp* '() '()))) '#f))) (set! G12320@parse-library-name (lambda (G16991@spec) ((lambda (G16994@parse) (begin (set! G16994@parse (lambda (G17005@x) ((lambda (G17007@t) ((lambda (G17009@ls/false) (if (if G17009@ls/false (begin '#f (apply (lambda (G17011@v*) (for-all (lambda (G17013@x) ((lambda (G17015@x) (if (integer? G17015@x) (begin '#f (exact? G17015@x)) '#f)) (G12458@syntax->datum G17013@x))) G17011@v*)) G17009@ls/false)) '#f) (apply (lambda (G17017@v*) (values '() (map G12458@syntax->datum G17017@v*))) G17009@ls/false) ((lambda (G17019@t) ((lambda (G17021@ls/false) (if (if G17021@ls/false (begin '#f (apply (lambda (G17023@x G17024@rest) (symbol? (G12458@syntax->datum G17023@x))) G17021@ls/false)) '#f) (apply (lambda (G17027@x G17028@rest) (call-with-values (lambda () (G16994@parse G17028@rest)) (lambda (G17033@G17031 G17034@G17032) ((lambda (G17037@v* G17038@x*) (values (cons (G12458@syntax->datum G17027@x) G17038@x*) G17037@v*)) G17034@G17032 G17033@G17031)))) G17021@ls/false) ((lambda (G17041@t) ((lambda (G17043@ls/false) (if G17043@ls/false (apply (lambda () (values '() '())) G17043@ls/false) ((lambda (G17045@t) ((lambda (G17047@ls/false) (if G17047@ls/false (apply (lambda () (G12452@syntax-violation '#f '"invalid library name" G16991@spec)) G17047@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G17045@t))) (G12219@syntax-dispatch G17045@t '_))) G17041@t))) (G12219@syntax-dispatch G17041@t '()))) G17019@t))) (G12219@syntax-dispatch G17019@t '(any . any)))) G17007@t))) (G12219@syntax-dispatch G17007@t '(each-any)))) G17005@x))) (call-with-values (lambda () (G16994@parse G16991@spec)) (lambda (G16997@G16995 G16998@G16996) ((lambda (G17001@ver* G17002@name*) (begin (if (null? G17002@name*) (G12452@syntax-violation '#f '"empty library name" G16991@spec) (void)) (values G17002@name* G17001@ver*))) G16998@G16996 G16997@G16995))))) '#f))) (set! G12322@parse-library (lambda (G17049@e) ((lambda (G17051@t) ((lambda (G17053@ls/false) (if (if G17053@ls/false (begin '#f (apply (lambda (G17055@library G17056@name* G17057@export G17058@exp* G17059@import G17060@imp* G17061@b*) (if (eq? (G12458@syntax->datum G17057@export) 'export) (if (eq? (G12458@syntax->datum G17059@import) 'import) (begin '#f (eq? (G12458@syntax->datum G17055@library) 'library)) '#f) '#f)) G17053@ls/false)) '#f) (apply (lambda (G17069@library G17070@name* G17071@export G17072@exp* G17073@import G17074@imp* G17075@b*) (values G17070@name* G17072@exp* G17074@imp* G17075@b*)) G17053@ls/false) ((lambda (G17083@t) ((lambda (G17085@ls/false) (if G17085@ls/false (apply (lambda () (G12452@syntax-violation '#f '"malformed library" G17049@e)) G17085@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G17083@t))) (G12219@syntax-dispatch G17083@t '_))) G17051@t))) (G12219@syntax-dispatch G17051@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G17049@e))) (set! G12324@parse-import-spec* (lambda (G17087@imp*) ((lambda (G17090@idsyn? G17092@dup-error G17094@merge-substs G17096@exclude* G17098@find* G17100@rem* G17102@remove-dups G17104@parse-library-name G17106@import-library G17108@get-import G17110@add-imports!) (begin (set! G17090@idsyn? (lambda (G17597@x) (symbol? (G12458@syntax->datum G17597@x)))) (set! G17092@dup-error (lambda (G17595@name) (G12452@syntax-violation 'import '"two imports with different bindings" G17595@name))) (set! G17094@merge-substs (lambda (G17577@s G17578@subst) ((lambda (G17582@insert-to-subst) (begin (set! G17582@insert-to-subst (lambda (G17583@a G17584@subst) ((lambda (G17587@name G17588@label) ((lambda (G17591@t) (if G17591@t ((lambda (G17593@x) (if (eq? (cdr G17593@x) G17588@label) G17584@subst (G17092@dup-error G17587@name))) G17591@t) (cons G17583@a G17584@subst))) (assq G17587@name G17584@subst))) (car G17583@a) (cdr G17583@a)))) (if (null? G17577@s) G17578@subst (G17582@insert-to-subst (car G17577@s) (G17094@merge-substs (cdr G17577@s) G17578@subst))))) '#f))) (set! G17096@exclude* (lambda (G17535@sym* G17536@subst) ((lambda (G17540@exclude) (begin (set! G17540@exclude (lambda (G17561@sym G17562@subst) (if (null? G17562@subst) (G12452@syntax-violation 'import '"cannot rename unbound identifier" G17561@sym) (if (eq? G17561@sym (caar G17562@subst)) (values (cdar G17562@subst) (cdr G17562@subst)) ((lambda (G17565@a) (call-with-values (lambda () (G17540@exclude G17561@sym (cdr G17562@subst))) (lambda (G17569@G17567 G17570@G17568) ((lambda (G17573@subst G17574@old) (values G17574@old (cons G17565@a G17573@subst))) G17570@G17568 G17569@G17567)))) (car G17562@subst)))))) (if (null? G17535@sym*) (values '() G17536@subst) (call-with-values (lambda () (G17540@exclude (car G17535@sym*) G17536@subst)) (lambda (G17543@G17541 G17544@G17542) ((lambda (G17547@subst G17548@old) (call-with-values (lambda () (G17096@exclude* (cdr G17535@sym*) G17547@subst)) (lambda (G17553@G17551 G17554@G17552) ((lambda (G17557@subst G17558@old*) (values (cons G17548@old G17558@old*) G17557@subst)) G17554@G17552 G17553@G17551)))) G17544@G17542 G17543@G17541)))))) '#f))) (set! G17098@find* (lambda (G17527@sym* G17528@subst) (map (lambda (G17531@x) ((lambda (G17533@t) (if G17533@t (cdr G17533@t) (G12452@syntax-violation 'import '"cannot find identifier" G17531@x))) (assq G17531@x G17528@subst))) G17527@sym*))) (set! G17100@rem* (lambda (G17519@sym* G17520@subst) ((letrec ((G17523@f (lambda (G17525@subst) (if (null? G17525@subst) '() (if (memq (caar G17525@subst) G17519@sym*) (G17523@f (cdr G17525@subst)) (cons (car G17525@subst) (G17523@f (cdr G17525@subst)))))))) G17523@f) G17520@subst))) (set! G17102@remove-dups (lambda (G17517@ls) (if (null? G17517@ls) '() (if (memq (car G17517@ls) (cdr G17517@ls)) (G17102@remove-dups (cdr G17517@ls)) (cons (car G17517@ls) (G17102@remove-dups (cdr G17517@ls))))))) (set! G17104@parse-library-name (lambda (G17289@spec) ((lambda (G17292@subversion? G17294@subversion-pred G17296@version-pred) (begin (set! G17292@subversion? (lambda (G17515@x) (if (integer? G17515@x) (if (exact? G17515@x) (begin '#f (>= G17515@x '0)) '#f) '#f))) (set! G17294@subversion-pred (lambda (G17419@x*) ((lambda (G17421@t) ((lambda (G17423@ls/false) (if (if G17423@ls/false (begin '#f (apply (lambda (G17425@n) (G17292@subversion? (G12458@syntax->datum G17425@n))) G17423@ls/false)) '#f) (apply (lambda (G17427@n) (lambda (G17429@x) (= G17429@x (G12458@syntax->datum G17427@n)))) G17423@ls/false) ((lambda (G17431@t) ((lambda (G17433@ls/false) (if (if G17433@ls/false (begin '#f (apply (lambda (G17435@p? G17436@sub*) (eq? (G12458@syntax->datum G17435@p?) 'and)) G17433@ls/false)) '#f) (apply (lambda (G17439@p? G17440@sub*) ((lambda (G17443@p*) (lambda (G17445@x) (for-all (lambda (G17447@p) (G17447@p G17445@x)) G17443@p*))) (map G17294@subversion-pred G17440@sub*))) G17433@ls/false) ((lambda (G17449@t) ((lambda (G17451@ls/false) (if (if G17451@ls/false (begin '#f (apply (lambda (G17453@p? G17454@sub*) (eq? (G12458@syntax->datum G17453@p?) 'or)) G17451@ls/false)) '#f) (apply (lambda (G17457@p? G17458@sub*) ((lambda (G17461@p*) (lambda (G17463@x) (exists (lambda (G17465@p) (G17465@p G17463@x)) G17461@p*))) (map G17294@subversion-pred G17458@sub*))) G17451@ls/false) ((lambda (G17467@t) ((lambda (G17469@ls/false) (if (if G17469@ls/false (begin '#f (apply (lambda (G17471@p? G17472@sub) (eq? (G12458@syntax->datum G17471@p?) 'not)) G17469@ls/false)) '#f) (apply (lambda (G17475@p? G17476@sub) ((lambda (G17479@p) (lambda (G17481@x) (not (G17479@p G17481@x)))) (G17294@subversion-pred G17476@sub))) G17469@ls/false) ((lambda (G17483@t) ((lambda (G17485@ls/false) (if (if G17485@ls/false (begin '#f (apply (lambda (G17487@p? G17488@n) (if (eq? (G12458@syntax->datum G17487@p?) '<=) (begin '#f (G17292@subversion? (G12458@syntax->datum G17488@n))) '#f)) G17485@ls/false)) '#f) (apply (lambda (G17491@p? G17492@n) (lambda (G17495@x) (<= G17495@x (G12458@syntax->datum G17492@n)))) G17485@ls/false) ((lambda (G17497@t) ((lambda (G17499@ls/false) (if (if G17499@ls/false (begin '#f (apply (lambda (G17501@p? G17502@n) (if (eq? (G12458@syntax->datum G17501@p?) '>=) (begin '#f (G17292@subversion? G17502@n)) '#f)) G17499@ls/false)) '#f) (apply (lambda (G17505@p? G17506@n) (lambda (G17509@x) (>= G17509@x (G12458@syntax->datum G17506@n)))) G17499@ls/false) ((lambda (G17511@t) ((lambda (G17513@ls/false) (if G17513@ls/false (apply (lambda () (G12452@syntax-violation 'import '"invalid sub-version spec" G17289@spec G17419@x*)) G17513@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G17511@t))) (G12219@syntax-dispatch G17511@t '_))) G17497@t))) (G12219@syntax-dispatch G17497@t '(any any)))) G17483@t))) (G12219@syntax-dispatch G17483@t '(any any)))) G17467@t))) (G12219@syntax-dispatch G17467@t '(any any)))) G17449@t))) (G12219@syntax-dispatch G17449@t '(any . each-any)))) G17431@t))) (G12219@syntax-dispatch G17431@t '(any . each-any)))) G17421@t))) (G12219@syntax-dispatch G17421@t 'any))) G17419@x*))) (set! G17296@version-pred (lambda (G17339@x*) ((lambda (G17341@t) ((lambda (G17343@ls/false) (if G17343@ls/false (apply (lambda () (lambda (G17345@x) '#t)) G17343@ls/false) ((lambda (G17347@t) ((lambda (G17349@ls/false) (if (if G17349@ls/false (begin '#f (apply (lambda (G17351@c G17352@ver*) (eq? (G12458@syntax->datum G17351@c) 'and)) G17349@ls/false)) '#f) (apply (lambda (G17355@c G17356@ver*) ((lambda (G17359@p*) (lambda (G17361@x) (for-all (lambda (G17363@p) (G17363@p G17361@x)) G17359@p*))) (map G17296@version-pred G17356@ver*))) G17349@ls/false) ((lambda (G17365@t) ((lambda (G17367@ls/false) (if (if G17367@ls/false (begin '#f (apply (lambda (G17369@c G17370@ver*) (eq? (G12458@syntax->datum G17369@c) 'or)) G17367@ls/false)) '#f) (apply (lambda (G17373@c G17374@ver*) ((lambda (G17377@p*) (lambda (G17379@x) (exists (lambda (G17381@p) (G17381@p G17379@x)) G17377@p*))) (map G17296@version-pred G17374@ver*))) G17367@ls/false) ((lambda (G17383@t) ((lambda (G17385@ls/false) (if (if G17385@ls/false (begin '#f (apply (lambda (G17387@c G17388@ver) (eq? (G12458@syntax->datum G17387@c) 'not)) G17385@ls/false)) '#f) (apply (lambda (G17391@c G17392@ver) ((lambda (G17395@p) (lambda (G17397@x) (not (G17395@p G17397@x)))) (G17296@version-pred G17392@ver))) G17385@ls/false) ((lambda (G17399@t) ((lambda (G17401@ls/false) (if G17401@ls/false (apply (lambda (G17403@sub*) ((lambda (G17405@p*) (lambda (G17407@x) ((letrec ((G17409@f (lambda (G17411@p* G17412@x) (if (null? G17411@p*) '#t (if (null? G17412@x) '#f (if ((car G17411@p*) (car G17412@x)) (begin '#f (G17409@f (cdr G17411@p*) (cdr G17412@x))) '#f)))))) G17409@f) G17405@p* G17407@x))) (map G17294@subversion-pred G17403@sub*))) G17401@ls/false) ((lambda (G17415@t) ((lambda (G17417@ls/false) (if G17417@ls/false (apply (lambda () (G12452@syntax-violation 'import '"invalid version spec" G17289@spec G17339@x*)) G17417@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G17415@t))) (G12219@syntax-dispatch G17415@t '_))) G17399@t))) (G12219@syntax-dispatch G17399@t 'each-any))) G17383@t))) (G12219@syntax-dispatch G17383@t '(any any)))) G17365@t))) (G12219@syntax-dispatch G17365@t '(any . each-any)))) G17347@t))) (G12219@syntax-dispatch G17347@t '(any . each-any)))) G17341@t))) (G12219@syntax-dispatch G17341@t '()))) G17339@x*))) ((letrec ((G17297@f (lambda (G17299@x) ((lambda (G17301@t) ((lambda (G17303@ls/false) (if G17303@ls/false (apply (lambda (G17305@version-spec*) (values '() (G17296@version-pred G17305@version-spec*))) G17303@ls/false) ((lambda (G17307@t) ((lambda (G17309@ls/false) (if (if G17309@ls/false (begin '#f (apply (lambda (G17311@x G17312@x*) (G17090@idsyn? G17311@x)) G17309@ls/false)) '#f) (apply (lambda (G17315@x G17316@x*) (call-with-values (lambda () (G17297@f G17316@x*)) (lambda (G17321@G17319 G17322@G17320) ((lambda (G17325@pred G17326@name) (values (cons (G12458@syntax->datum G17315@x) G17326@name) G17325@pred)) G17322@G17320 G17321@G17319)))) G17309@ls/false) ((lambda (G17329@t) ((lambda (G17331@ls/false) (if G17331@ls/false (apply (lambda () (values '() (lambda (G17333@x) '#t))) G17331@ls/false) ((lambda (G17335@t) ((lambda (G17337@ls/false) (if G17337@ls/false (apply (lambda () (G12452@syntax-violation '#f '"invalid import spec" G17289@spec)) G17337@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G17335@t))) (G12219@syntax-dispatch G17335@t '_))) G17329@t))) (G12219@syntax-dispatch G17329@t '()))) G17307@t))) (G12219@syntax-dispatch G17307@t '(any . any)))) G17301@t))) (G12219@syntax-dispatch G17301@t '(each-any)))) G17299@x)))) G17297@f) G17289@spec))) '#f '#f '#f))) (set! G17106@import-library (lambda (G17275@spec*) (call-with-values (lambda () (G17104@parse-library-name G17275@spec*)) (lambda (G17279@G17277 G17280@G17278) ((lambda (G17283@pred G17284@name) (begin (if (null? G17284@name) (G12452@syntax-violation 'import '"empty library name" G17275@spec*) (void)) ((lambda (G17287@lib) (begin (if G17287@lib (void) (G12452@syntax-violation 'import '"cannot find library with required name" G17284@name)) (if (G17283@pred (G11080@G10673@library-version G17287@lib)) (void) (G12452@syntax-violation 'import '"library does not satisfy version specification" G17275@spec* G17287@lib)) ((G12334@imp-collector) G17287@lib) (G11084@G10681@library-subst G17287@lib))) (G11120@G10753@find-library-by-name G17284@name)))) G17280@G17278 G17279@G17277))))) (set! G17108@get-import (lambda (G17133@spec) ((lambda (G17135@t) ((lambda (G17137@ls/false) (if (if G17137@ls/false (begin '#f (apply (lambda (G17139@x G17140@x*) (not (memq (G12458@syntax->datum G17139@x) '(for rename except only prefix library)))) G17137@ls/false)) '#f) (apply (lambda (G17143@x G17144@x*) (G17106@import-library (cons G17143@x G17144@x*))) G17137@ls/false) ((lambda (G17147@t) ((lambda (G17149@ls/false) (if (if G17149@ls/false (begin '#f (apply (lambda (G17151@rename G17152@isp G17153@old* G17154@new*) (if (eq? (G12458@syntax->datum G17151@rename) 'rename) (if (for-all G17090@idsyn? G17153@old*) (begin '#f (for-all G17090@idsyn? G17154@new*)) '#f) '#f)) G17149@ls/false)) '#f) (apply (lambda (G17159@rename G17160@isp G17161@old* G17162@new*) ((lambda (G17167@subst G17168@old* G17169@new*) ((lambda (G17173@old-label*) ((lambda (G17175@subst) (G17094@merge-substs (map cons G17169@new* G17173@old-label*) G17175@subst)) (G17100@rem* G17168@old* G17167@subst))) (G17098@find* G17168@old* G17167@subst))) (G17108@get-import G17160@isp) (map G12458@syntax->datum G17161@old*) (map G12458@syntax->datum G17162@new*))) G17149@ls/false) ((lambda (G17177@t) ((lambda (G17179@ls/false) (if (if G17179@ls/false (begin '#f (apply (lambda (G17181@except G17182@isp G17183@sym*) (if (eq? (G12458@syntax->datum G17181@except) 'except) (begin '#f (for-all G17090@idsyn? G17183@sym*)) '#f)) G17179@ls/false)) '#f) (apply (lambda (G17187@except G17188@isp G17189@sym*) ((lambda (G17193@subst) (G17100@rem* (map G12458@syntax->datum G17189@sym*) G17193@subst)) (G17108@get-import G17188@isp))) G17179@ls/false) ((lambda (G17195@t) ((lambda (G17197@ls/false) (if (if G17197@ls/false (begin '#f (apply (lambda (G17199@only G17200@isp G17201@sym*) (if (eq? (G12458@syntax->datum G17199@only) 'only) (begin '#f (for-all G17090@idsyn? G17201@sym*)) '#f)) G17197@ls/false)) '#f) (apply (lambda (G17205@only G17206@isp G17207@sym*) ((lambda (G17211@subst G17212@sym*) ((lambda (G17215@sym*) ((lambda (G17217@lab*) (map cons G17215@sym* G17217@lab*)) (G17098@find* G17215@sym* G17211@subst))) (G17102@remove-dups G17212@sym*))) (G17108@get-import G17206@isp) (map G12458@syntax->datum G17207@sym*))) G17197@ls/false) ((lambda (G17219@t) ((lambda (G17221@ls/false) (if (if G17221@ls/false (begin '#f (apply (lambda (G17223@prefix G17224@isp G17225@p) (if (eq? (G12458@syntax->datum G17223@prefix) 'prefix) (begin '#f (G17090@idsyn? G17225@p)) '#f)) G17221@ls/false)) '#f) (apply (lambda (G17229@prefix G17230@isp G17231@p) ((lambda (G17235@subst G17236@prefix) (map (lambda (G17239@x) (cons (string->symbol (string-append G17236@prefix (symbol->string (car G17239@x)))) (cdr G17239@x))) G17235@subst)) (G17108@get-import G17230@isp) (symbol->string (G12458@syntax->datum G17231@p)))) G17221@ls/false) ((lambda (G17241@t) ((lambda (G17243@ls/false) (if (if G17243@ls/false (begin '#f (apply (lambda (G17245@library G17246@spec*) (eq? (G12458@syntax->datum G17245@library) 'library)) G17243@ls/false)) '#f) (apply (lambda (G17249@library G17250@spec*) (G17106@import-library G17250@spec*)) G17243@ls/false) ((lambda (G17253@t) ((lambda (G17255@ls/false) (if (if G17255@ls/false (begin '#f (apply (lambda (G17257@for G17258@isp G17259@rest) (eq? (G12458@syntax->datum G17257@for) 'for)) G17255@ls/false)) '#f) (apply (lambda (G17263@for G17264@isp G17265@rest) (G17108@get-import G17264@isp)) G17255@ls/false) ((lambda (G17269@t) ((lambda (G17271@ls/false) (if G17271@ls/false (apply (lambda (G17273@spec) (G12452@syntax-violation 'import '"invalid import spec" G17273@spec)) G17271@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G17269@t))) (G12219@syntax-dispatch G17269@t 'any))) G17253@t))) (G12219@syntax-dispatch G17253@t '(any any . any)))) G17241@t))) (G12219@syntax-dispatch G17241@t '(any each-any)))) G17219@t))) (G12219@syntax-dispatch G17219@t '(any any any)))) G17195@t))) (G12219@syntax-dispatch G17195@t '(any any . each-any)))) G17177@t))) (G12219@syntax-dispatch G17177@t '(any any . each-any)))) G17147@t))) (G12219@syntax-dispatch G17147@t '(any any . #(each (any any)))))) G17135@t))) (G12219@syntax-dispatch G17135@t '(any . each-any)))) G17133@spec))) (set! G17110@add-imports! (lambda (G17117@imp G17118@h) ((lambda (G17121@subst) (for-each (lambda (G17123@x) ((lambda (G17125@name G17126@label) ((lambda (G17129@t) (if G17129@t ((lambda (G17131@l) (if (eq? G17131@l G17126@label) (void) (G17092@dup-error G17125@name))) G17129@t) (hashtable-set! G17118@h G17125@name G17126@label))) (hashtable-ref G17118@h G17125@name '#f))) (car G17123@x) (cdr G17123@x))) G17121@subst)) (G17108@get-import G17117@imp)))) ((letrec ((G17111@f (lambda (G17113@imp* G17114@h) (if (null? G17113@imp*) (hashtable-entries G17114@h) (begin (G17110@add-imports! (car G17113@imp*) G17114@h) (G17111@f (cdr G17113@imp*) G17114@h)))))) G17111@f) G17087@imp* (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12326@make-top-rib (lambda (G17599@names G17600@labels) ((lambda (G17603@rib) (begin (vector-for-each (lambda (G17605@name G17606@label) (begin (if (symbol? G17605@name) (void) (error 'make-top-rib '"BUG: not a symbol" G17605@name)) (G11561@extend-rib! G17603@rib (G11586@make-stx G17605@name G11510@top-mark* '() '()) G17606@label))) G17599@names G17600@labels) G17603@rib)) (G11559@make-empty-rib)))) (set! G12328@make-collector (lambda () ((lambda (G17609@ls) (lambda G17613 ((lambda (G17614) (if (= G17614 '0) (apply (lambda () G17609@ls) G17613) (if (= G17614 '1) (apply (lambda (G17611@x) (set! G17609@ls (G11503@set-cons G17611@x G17609@ls))) G17613) (error 'apply '"invalid arg count")))) (length G17613)))) '()))) (set! G12330@inv-collector (G10456@G10251@make-parameter (lambda G17615@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G17617@x) (begin (if (procedure? G17617@x) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" G17617@x)) G17617@x)))) (set! G12332@vis-collector (G10456@G10251@make-parameter (lambda G17619@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G17621@x) (begin (if (procedure? G17621@x) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" G17621@x)) G17621@x)))) (set! G12334@imp-collector (G10456@G10251@make-parameter (lambda G17623@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G17625@x) (begin (if (procedure? G17625@x) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" G17625@x)) G17625@x)))) (set! G12336@chi-library-internal (lambda (G17627@e* G17628@rib G17629@top?) (call-with-values (lambda () (G12314@chi-body* G17627@e* '() '() '() '() '() '() G17628@rib G17629@top?)) (lambda (G17640@G17633 G17641@G17634 G17642@G17635 G17643@G17636 G17644@G17637 G17645@G17638 G17646@G17639) ((lambda (G17654@_kwd* G17655@mod** G17656@rhs* G17657@lex* G17658@mr G17659@r G17660@e*) (values (append (apply append (reverse G17655@mod**)) G17660@e*) G17659@r G17658@mr (reverse G17657@lex*) (reverse G17656@rhs*))) G17646@G17639 G17645@G17638 G17644@G17637 G17643@G17636 G17642@G17635 G17641@G17634 G17640@G17633))))) (set! G12338@chi-interaction-expr (lambda (G17668@e G17669@rib G17670@r) (call-with-values (lambda () (G12314@chi-body* (list G17668@e) G17670@r G17670@r '() '() '() '() G17669@rib '#t)) (lambda (G17681@G17674 G17682@G17675 G17683@G17676 G17684@G17677 G17685@G17678 G17686@G17679 G17687@G17680) ((lambda (G17695@_kwd* G17696@mod** G17697@rhs* G17698@lex* G17699@mr G17700@r G17701@e*) ((lambda (G17709@e*) ((lambda (G17711@e) (values G17711@e G17700@r)) (if (null? G17709@e*) (G11486@G11344@build-void) (if (null? (cdr G17709@e*)) (car G17709@e*) (G11485@G11342@build-sequence '#f G17709@e*))))) (G12269@expand-interaction-rhs*/init* (reverse G17698@lex*) (reverse G17697@rhs*) (append (apply append (reverse G17696@mod**)) G17701@e*) G17700@r G17699@mr))) G17687@G17680 G17686@G17679 G17685@G17678 G17684@G17677 G17683@G17676 G17682@G17675 G17681@G17674))))) (set! G12340@library-body-expander (lambda (G17713@name G17714@exp* G17715@imp* G17716@b* G17717@top?) ((lambda (G17724@itc) (begin (set! G17724@itc (G12328@make-collector)) ((lambda (G17729@G17725@imp-collector G17730@G17726@top-level-context G17731@G17727@imp-collector G17732@G17728@top-level-context) ((lambda (G17737@swap) (dynamic-wind G17737@swap (lambda () (call-with-values (lambda () (G12318@parse-exports G17714@exp*)) (lambda (G17741@G17739 G17742@G17740) ((lambda (G17745@exp-ext* G17746@exp-int*) (call-with-values (lambda () (G12324@parse-import-spec* G17715@imp*)) (lambda (G17751@G17749 G17752@G17750) ((lambda (G17755@subst-labels G17756@subst-names) ((lambda (G17759@rib) ((lambda (G17761@b* G17762@rtc G17763@vtc) ((lambda (G17771@G17767@inv-collector G17772@G17768@vis-collector G17773@G17769@inv-collector G17774@G17770@vis-collector) ((lambda (G17779@swap) (dynamic-wind G17779@swap (lambda () (call-with-values (lambda () (G12336@chi-library-internal G17761@b* G17759@rib G17717@top?)) (lambda (G17786@G17781 G17787@G17782 G17788@G17783 G17789@G17784 G17790@G17785) ((lambda (G17796@rhs* G17797@lex* G17798@mr G17799@r G17800@init*) (begin (G11565@seal-rib! G17759@rib) ((lambda (G17806@init*) ((lambda (G17808@rhs*) ((lambda () (begin (G11567@unseal-rib! G17759@rib) ((lambda (G17810@loc* G17811@export-subst) ((lambda (G17815@errstr) (begin (set! G17815@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G12436@make-export-env/macros G17797@lex* G17810@loc* G17799@r)) (lambda (G17819@G17816 G17820@G17817 G17821@G17818) ((lambda (G17825@macro* G17826@global* G17827@export-env) (begin (for-each (lambda (G17831@s) ((lambda (G17833@name G17834@label) ((lambda (G17837@p) (if G17837@p ((lambda (G17839@b) ((lambda (G17841@type) (if (eq? G17841@type 'mutable) (G12452@syntax-violation 'export G17815@errstr G17833@name) (void))) (car G17839@b))) (cdr G17837@p)) (void))) (assq G17834@label G17827@export-env))) (car G17831@s) (cdr G17831@s))) G17811@export-subst) ((lambda (G17843@invoke-body G17844@invoke-definitions) (values (G17724@itc) (G17762@rtc) (G17763@vtc) (G11485@G11342@build-sequence '#f (append G17844@invoke-definitions (list G17843@invoke-body))) G17825@macro* G17811@export-subst G17827@export-env)) (G11488@G11348@build-letrec* '#f G17797@lex* G17808@rhs* (G12432@build-exports G17826@global* G17806@init*)) (map G11481@G11134@build-global-define (map cdr G17826@global*))))) G17821@G17818 G17820@G17817 G17819@G17816))))) '#f)) (map G11516@gen-global G17797@lex*) (G12434@make-export-subst G17746@exp-int* G17745@exp-ext* G17759@rib)))))) (G12271@chi-rhs* G17796@rhs* G17799@r G17798@mr))) (G12251@chi-expr* G17800@init* G17799@r G17798@mr)))) G17790@G17785 G17789@G17784 G17788@G17783 G17787@G17782 G17786@G17781)))) G17779@swap)) (lambda () (begin ((lambda (G17847@t) (begin (G17771@G17767@inv-collector G17773@G17769@inv-collector) (set! G17773@G17769@inv-collector G17847@t))) (G17771@G17767@inv-collector)) ((lambda (G17849@t) (begin (G17772@G17768@vis-collector G17774@G17770@vis-collector) (set! G17774@G17770@vis-collector G17849@t))) (G17772@G17768@vis-collector)))))) G12330@inv-collector G12332@vis-collector G17762@rtc G17763@vtc)) (map (lambda (G17851@x) (G11586@make-stx G17851@x G11510@top-mark* (list G17759@rib) '())) G17716@b*) (G12328@make-collector) (G12328@make-collector))) (G12326@make-top-rib G17756@subst-names G17755@subst-labels))) G17752@G17750 G17751@G17749)))) G17742@G17740 G17741@G17739)))) G17737@swap)) (lambda () (begin ((lambda (G17853@t) (begin (G17729@G17725@imp-collector G17731@G17727@imp-collector) (set! G17731@G17727@imp-collector G17853@t))) (G17729@G17725@imp-collector)) ((lambda (G17855@t) (begin (G17730@G17726@top-level-context G17732@G17728@top-level-context) (set! G17732@G17728@top-level-context G17855@t))) (G17730@G17726@top-level-context)))))) G12334@imp-collector G12466@top-level-context G17724@itc '#f))) '#f))) (set! G12342@core-library-expander (lambda (G17857@e G17858@verify-name) (call-with-values (lambda () (G12322@parse-library G17857@e)) (lambda (G17865@G17861 G17866@G17862 G17867@G17863 G17868@G17864) ((lambda (G17873@b* G17874@imp* G17875@exp* G17876@name*) (call-with-values (lambda () (G12320@parse-library-name G17876@name*)) (lambda (G17883@G17881 G17884@G17882) ((lambda (G17887@ver G17888@name) (begin (G17858@verify-name G17888@name) (call-with-values (lambda () (G12340@library-body-expander G17888@name G17875@exp* G17874@imp* G17873@b* '#f)) (lambda (G17898@G17891 G17899@G17892 G17900@G17893 G17901@G17894 G17902@G17895 G17903@G17896 G17904@G17897) ((lambda (G17912@export-env G17913@export-subst G17914@visit-code G17915@invoke-code G17916@visit-req* G17917@invoke-req* G17918@imp*) (values G17888@name G17887@ver G17918@imp* G17917@invoke-req* G17916@visit-req* G17915@invoke-code G17914@visit-code G17913@export-subst G17912@export-env)) G17904@G17897 G17903@G17896 G17902@G17895 G17901@G17894 G17900@G17893 G17899@G17892 G17898@G17891))))) G17884@G17882 G17883@G17881)))) G17868@G17864 G17867@G17863 G17866@G17862 G17865@G17861))))) (set! G12344@parse-top-level-program (lambda (G17926@e*) ((lambda (G17928@t) ((lambda (G17930@ls/false) (if (if G17930@ls/false (begin '#f (apply (lambda (G17932@import G17933@imp* G17934@b*) (eq? (G12458@syntax->datum G17932@import) 'import)) G17930@ls/false)) '#f) (apply (lambda (G17938@import G17939@imp* G17940@b*) (values G17939@imp* G17940@b*)) G17930@ls/false) ((lambda (G17944@t) ((lambda (G17946@ls/false) (if (if G17946@ls/false (begin '#f (apply (lambda (G17948@import G17949@x G17950@y) (eq? (G12458@syntax->datum G17948@import) 'import)) G17946@ls/false)) '#f) (apply (lambda (G17954@import G17955@x G17956@y) (G12452@syntax-violation 'expander '"invalid syntax of top-level program" (G11634@syntax-car G17926@e*))) G17946@ls/false) ((lambda (G17960@t) ((lambda (G17962@ls/false) (if G17962@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G17962@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G17960@t))) (G12219@syntax-dispatch G17960@t '_))) G17944@t))) (G12219@syntax-dispatch G17944@t '((any . any) . any)))) G17928@t))) (G12219@syntax-dispatch G17928@t '((any . each-any) . each-any)))) G17926@e*))) (set! G12346@top-level-expander (lambda (G17964@e*) (call-with-values (lambda () (G12344@parse-top-level-program G17964@e*)) (lambda (G17968@G17966 G17969@G17967) ((lambda (G17972@b* G17973@imp*) (call-with-values (lambda () (G12340@library-body-expander '() '() G17973@imp* G17972@b* '#t)) (lambda (G17983@G17976 G17984@G17977 G17985@G17978 G17986@G17979 G17987@G17980 G17988@G17981 G17989@G17982) ((lambda (G17997@export-env G17998@export-subst G17999@visit-code G18000@invoke-code G18001@visit-req* G18002@invoke-req* G18003@imp*) (values G18002@invoke-req* G18000@invoke-code)) G17989@G17982 G17988@G17981 G17987@G17980 G17986@G17979 G17985@G17978 G17984@G17977 G17983@G17976)))) G17969@G17967 G17968@G17966))))) (set! G12352@G12347 (make-record-type-descriptor 'env '#f 'G12350 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G12354@G12349 '#f) (set! G12356@G12348 (make-record-constructor-descriptor G12352@G12347 '#f G12354@G12349)) (set! G12361@env? (record-predicate G12352@G12347)) (set! G12363@make-env (record-constructor G12356@G12348)) (set! G12365@env-names (record-accessor G12352@G12347 '0)) (set! G12367@env-labels (record-accessor G12352@G12347 '1)) (set! G12369@env-itc (record-accessor G12352@G12347 '2)) (set! G12371@set-env-names! (record-mutator G12352@G12347 '0)) (set! G12373@set-env-labels! (record-mutator G12352@G12347 '1)) (set! G12375@set-env-itc! (record-mutator G12352@G12347 '2)) (set! G12377@rp (G10453@G10245@make-record-printer 'env (lambda (G18011@x G18012@p) (display '"#<environment>" G18012@p)))) (set! G12383@G12378 (make-record-type-descriptor 'interaction-env '#f 'G12381 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G12385@G12380 '#f) (set! G12387@G12379 (make-record-constructor-descriptor G12383@G12378 '#f G12385@G12380)) (set! G12392@interaction-env? (record-predicate G12383@G12378)) (set! G12394@make-interaction-env (record-constructor G12387@G12379)) (set! G12396@interaction-env-rib (record-accessor G12383@G12378 '0)) (set! G12398@interaction-env-r (record-accessor G12383@G12378 '1)) (set! G12400@interaction-env-locs (record-accessor G12383@G12378 '2)) (set! G12402@set-interaction-env-rib! (record-mutator G12383@G12378 '0)) (set! G12404@set-interaction-env-r! (record-mutator G12383@G12378 '1)) (set! G12406@set-interaction-env-locs! (record-mutator G12383@G12378 '2)) (set! G12408@rp (G10453@G10245@make-record-printer 'interaction-env (lambda (G18015@x G18016@p) (display '"#<environment>" G18016@p)))) (set! G12410@interaction-environment-symbols (lambda () (map (lambda (G18019@x) G18019@x) (G11543@rib-sym* (G12396@interaction-env-rib (G12464@interaction-environment)))))) (set! G12412@environment-symbols (lambda (G18021@e) (vector->list (G12365@env-names G18021@e)))) (set! G12414@environment? (lambda (G18023@x) ((lambda (G18025@t) (if G18025@t G18025@t (begin '#f (G12392@interaction-env? G18023@x)))) (G12361@env? G18023@x)))) (set! G12416@environment (lambda G18027@imp* ((lambda (G18029@itc) ((lambda (G18033@G18031@imp-collector G18034@G18032@imp-collector) ((lambda (G18037@swap) (dynamic-wind G18037@swap (lambda () (call-with-values (lambda () (G12324@parse-import-spec* G18027@imp*)) (lambda (G18041@G18039 G18042@G18040) ((lambda (G18045@subst-labels G18046@subst-names) (G12363@make-env G18046@subst-names G18045@subst-labels G18029@itc)) G18042@G18040 G18041@G18039)))) G18037@swap)) (lambda () ((lambda (G18049@t) (begin (G18033@G18031@imp-collector G18034@G18032@imp-collector) (set! G18034@G18032@imp-collector G18049@t))) (G18033@G18031@imp-collector))))) G12334@imp-collector G18029@itc)) (G12328@make-collector)))) (set! G12418@null-environment (lambda (G18051@n) (begin (if (eqv? G18051@n '5) (void) (assertion-violation 'null-environment '"not 5" G18051@n)) (G12416@environment '(psyntax null-environment-5))))) (set! G12420@scheme-report-environment (lambda (G18053@n) (begin (if (eqv? G18053@n '5) (void) (assertion-violation 'scheme-report-environment '"not 5" G18053@n)) (G12416@environment '(psyntax scheme-report-environment-5))))) (set! G12422@expand (lambda (G18055@x G18056@env) (if (G12361@env? G18056@env) ((lambda (G18059@rib) ((lambda (G18061@x G18062@itc G18063@rtc G18064@vtc) ((lambda (G18069@x) (begin (G11565@seal-rib! G18059@rib) (values G18069@x (G18063@rtc)))) ((lambda (G18077@G18071@inv-collector G18078@G18072@vis-collector G18079@G18073@imp-collector G18080@G18074@inv-collector G18081@G18075@vis-collector G18082@G18076@imp-collector) ((lambda (G18089@swap) (dynamic-wind G18089@swap (lambda () (G12255@chi-expr G18061@x '() '())) G18089@swap)) (lambda () (begin ((lambda (G18091@t) (begin (G18077@G18071@inv-collector G18080@G18074@inv-collector) (set! G18080@G18074@inv-collector G18091@t))) (G18077@G18071@inv-collector)) ((lambda (G18093@t) (begin (G18078@G18072@vis-collector G18081@G18075@vis-collector) (set! G18081@G18075@vis-collector G18093@t))) (G18078@G18072@vis-collector)) ((lambda (G18095@t) (begin (G18079@G18073@imp-collector G18082@G18076@imp-collector) (set! G18082@G18076@imp-collector G18095@t))) (G18079@G18073@imp-collector)))))) G12330@inv-collector G12332@vis-collector G12334@imp-collector G18063@rtc G18064@vtc G18062@itc))) (G11586@make-stx G18055@x G11510@top-mark* (list G18059@rib) '()) (G12369@env-itc G18056@env) (G12328@make-collector) (G12328@make-collector))) (G12326@make-top-rib (G12365@env-names G18056@env) (G12367@env-labels G18056@env))) (if (G12392@interaction-env? G18056@env) ((lambda (G18097@rib G18098@r G18099@rtc) ((lambda (G18103@x) (call-with-values (lambda () ((lambda (G18115@G18107@top-level-context G18116@G18108@inv-collector G18117@G18109@vis-collector G18118@G18110@imp-collector G18119@G18111@top-level-context G18120@G18112@inv-collector G18121@G18113@vis-collector G18122@G18114@imp-collector) ((lambda (G18131@swap) (dynamic-wind G18131@swap (lambda () (G12338@chi-interaction-expr G18103@x G18097@rib G18098@r)) G18131@swap)) (lambda () (begin ((lambda (G18133@t) (begin (G18115@G18107@top-level-context G18119@G18111@top-level-context) (set! G18119@G18111@top-level-context G18133@t))) (G18115@G18107@top-level-context)) ((lambda (G18135@t) (begin (G18116@G18108@inv-collector G18120@G18112@inv-collector) (set! G18120@G18112@inv-collector G18135@t))) (G18116@G18108@inv-collector)) ((lambda (G18137@t) (begin (G18117@G18109@vis-collector G18121@G18113@vis-collector) (set! G18121@G18113@vis-collector G18137@t))) (G18117@G18109@vis-collector)) ((lambda (G18139@t) (begin (G18118@G18110@imp-collector G18122@G18114@imp-collector) (set! G18122@G18114@imp-collector G18139@t))) (G18118@G18110@imp-collector)))))) G12466@top-level-context G12330@inv-collector G12332@vis-collector G12334@imp-collector G18056@env G18099@rtc (G12328@make-collector) (G12328@make-collector))) (lambda (G18141@G18105 G18142@G18106) ((lambda (G18145@r^ G18146@e) (begin (G12404@set-interaction-env-r! G18056@env G18145@r^) (values G18146@e (G18099@rtc)))) G18142@G18106 G18141@G18105)))) (G11586@make-stx G18055@x G11510@top-mark* (list G18097@rib) '()))) (G12396@interaction-env-rib G18056@env) (G12398@interaction-env-r G18056@env) (G12328@make-collector)) (assertion-violation 'expand '"not an environment" G18056@env))))) (set! G12424@eval (lambda (G18149@x G18150@env) (begin (if (G12414@environment? G18150@env) (void) (error 'eval '"not an environment" G18150@env)) (call-with-values (lambda () (G12422@expand G18149@x G18150@env)) (lambda (G18155@G18153 G18156@G18154) ((lambda (G18159@invoke-req* G18160@x) (begin (for-each G11127@G10767@invoke-library G18159@invoke-req*) (eval-core (G10555@G10468@expanded->core G18160@x)))) G18156@G18154 G18155@G18153)))))) (set! G12426@library-expander (lambda G18264 ((lambda (G18265) (if (= G18265 '3) (apply (lambda (G18163@x G18164@filename G18165@verify-name) ((lambda (G18170@build-visit-code G18172@visit!) (begin (set! G18170@build-visit-code (lambda (G18246@macro*) (if (null? G18246@macro*) (G11486@G11344@build-void) (G11485@G11342@build-sequence '#f (map (lambda (G18248@x) ((lambda (G18250@loc G18251@src) (list 'set! G18250@loc G18251@src)) (car G18248@x) (cddr G18248@x))) G18246@macro*))))) (set! G18172@visit! (lambda (G18238@macro*) (for-each (lambda (G18240@x) ((lambda (G18242@loc G18243@proc) (set-symbol-value! G18242@loc G18243@proc)) (car G18240@x) (cadr G18240@x))) G18238@macro*))) (call-with-values (lambda () (G12342@core-library-expander G18163@x G18165@verify-name)) (lambda (G18182@G18173 G18183@G18174 G18184@G18175 G18185@G18176 G18186@G18177 G18187@G18178 G18188@G18179 G18189@G18180 G18190@G18181) ((lambda (G18200@export-env G18201@export-subst G18202@macro* G18203@invoke-code G18204@vis* G18205@inv* G18206@imp* G18207@ver G18208@name) ((lambda (G18218@id G18219@name G18220@ver G18221@imp* G18222@vis* G18223@inv* G18224@visit-proc G18225@invoke-proc G18226@visit-code G18227@invoke-code) (begin (G11125@G10763@install-library G18218@id G18219@name G18220@ver G18221@imp* G18222@vis* G18223@inv* G18201@export-subst G18200@export-env G18224@visit-proc G18225@invoke-proc G18226@visit-code G18227@invoke-code '#t G18164@filename) (values G18218@id G18219@name G18220@ver G18221@imp* G18222@vis* G18223@inv* G18227@invoke-code G18226@visit-code G18201@export-subst G18200@export-env))) (gensym) G18208@name G18207@ver (map G11131@G10775@library-spec G18206@imp*) (map G11131@G10775@library-spec G18204@vis*) (map G11131@G10775@library-spec G18205@inv*) (lambda () (G18172@visit! G18202@macro*)) (lambda () (eval-core (G10555@G10468@expanded->core G18203@invoke-code))) (G18170@build-visit-code G18202@macro*) G18203@invoke-code)) G18190@G18181 G18189@G18180 G18188@G18179 G18187@G18178 G18186@G18177 G18185@G18176 G18184@G18175 G18183@G18174 G18182@G18173))))) '#f '#f)) G18264) (if (= G18265 '2) (apply (lambda (G18254@x G18255@filename) (G12426@library-expander G18254@x G18255@filename (lambda (G18258@x) (values)))) G18264) (if (= G18265 '1) (apply (lambda (G18260@x) (G12426@library-expander G18260@x '#f (lambda (G18262@x) (values)))) G18264) (error 'apply '"invalid arg count"))))) (length G18264)))) (set! G12428@boot-library-expand (lambda (G18266@x) (call-with-values (lambda () (G12426@library-expander G18266@x)) (lambda (G18278@G18268 G18279@G18269 G18280@G18270 G18281@G18271 G18282@G18272 G18283@G18273 G18284@G18274 G18285@G18275 G18286@G18276 G18287@G18277) ((lambda (G18298@export-env G18299@export-subst G18300@visit-code G18301@invoke-code G18302@inv* G18303@vis* G18304@imp* G18305@ver G18306@name G18307@id) (values G18306@name G18301@invoke-code G18299@export-subst G18298@export-env)) G18287@G18277 G18286@G18276 G18285@G18275 G18284@G18274 G18283@G18273 G18282@G18272 G18281@G18271 G18280@G18270 G18279@G18269 G18278@G18268))))) (set! G12430@rev-map-append (lambda (G18318@f G18319@ls G18320@ac) (if (null? G18319@ls) G18320@ac (G12430@rev-map-append G18318@f (cdr G18319@ls) (cons (G18318@f (car G18319@ls)) G18320@ac))))) (set! G12432@build-exports (lambda (G18324@lex*+loc* G18325@init*) (G11485@G11342@build-sequence '#f (cons (G11486@G11344@build-void) (G12430@rev-map-append (lambda (G18328@x) (list 'set! (cdr G18328@x) (car G18328@x))) G18324@lex*+loc* G18325@init*))))) (set! G12434@make-export-subst (lambda (G18330@int* G18331@ext* G18332@rib) (map (lambda (G18336@int G18337@ext) ((lambda (G18340@id) ((lambda (G18342@label) ((lambda () (begin (if G18342@label (void) (G12452@syntax-violation '#f '"cannot export unbound identifier" G18340@id)) (cons G18337@ext G18342@label))))) (G11666@id->label G18340@id))) (G11586@make-stx G18336@int G11510@top-mark* (list G18332@rib) '()))) G18330@int* G18331@ext*))) (set! G12436@make-export-env/macros (lambda (G18344@lex* G18345@loc* G18346@r) ((lambda (G18351@lookup) (begin (set! G18351@lookup (lambda (G18379@x) ((letrec ((G18381@f (lambda (G18383@x G18384@lex* G18385@loc*) (if (pair? G18384@lex*) (if (eq? G18383@x (car G18384@lex*)) (car G18385@loc*) (G18381@f G18383@x (cdr G18384@lex*) (cdr G18385@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G18381@f) G18379@x G18344@lex* G18345@loc*))) ((letrec ((G18352@f (lambda (G18354@r G18355@env G18356@global* G18357@macro*) (if (null? G18354@r) (values G18355@env G18356@global* G18357@macro*) ((lambda (G18362@x) ((lambda (G18364@label G18365@b) ((lambda (G18368@t) (if (eqv? G18368@t 'lexical) ((lambda (G18373@v) ((lambda (G18375@loc G18376@type) (G18352@f (cdr G18354@r) (cons (cons* G18364@label G18376@type G18375@loc) G18355@env) (cons (cons (G12107@lexical-var G18373@v) G18375@loc) G18356@global*) G18357@macro*)) (G18351@lookup (G12107@lexical-var G18373@v)) (if (G12109@lexical-mutable? G18373@v) 'mutable 'global))) (G11676@binding-value G18365@b)) (if (eqv? G18368@t 'local-macro) ((lambda (G18371@loc) (G18352@f (cdr G18354@r) (cons (cons* G18364@label 'global-macro G18371@loc) G18355@env) G18356@global* (cons (cons G18371@loc (G11676@binding-value G18365@b)) G18357@macro*))) (gensym)) (if (eqv? G18368@t 'local-macro!) ((lambda (G18369@loc) (G18352@f (cdr G18354@r) (cons (cons* G18364@label 'global-macro! G18369@loc) G18355@env) G18356@global* (cons (cons G18369@loc (G11676@binding-value G18365@b)) G18357@macro*))) (gensym)) (if (memv G18368@t '($rtd $module)) (G18352@f (cdr G18354@r) (cons G18362@x G18355@env) G18356@global* G18357@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G11674@binding-type G18365@b) (G11676@binding-value G18365@b))))))) (G11674@binding-type G18365@b))) (car G18362@x) (cdr G18362@x))) (car G18354@r)))))) G18352@f) G18346@r '() '() '()))) '#f))) (set! G12438@generate-temporaries (lambda (G18389@ls) ((lambda (G18391@t) ((lambda (G18393@ls/false) (if G18393@ls/false (apply (lambda (G18395@ls) (map (lambda (G18397@x) (G11586@make-stx ((lambda (G18399@x) (if ((lambda (G18401@t) (if G18401@t G18401@t (begin '#f (string? G18399@x)))) (symbol? G18399@x)) (gensym G18399@x) (gensym 't))) (G12458@syntax->datum G18397@x)) G11510@top-mark* '() '())) G18395@ls)) G18393@ls/false) ((lambda (G18403@t) ((lambda (G18405@ls/false) (if G18405@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G18405@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G18403@t))) (G12219@syntax-dispatch G18403@t '_))) G18391@t))) (G12219@syntax-dispatch G18391@t 'each-any))) G18389@ls))) (set! G12440@free-identifier=? (lambda (G18407@x G18408@y) (if (G11640@id? G18407@x) (if (G11640@id? G18408@y) (G11648@free-id=? G18407@x G18408@y) (assertion-violation 'free-identifier=? '"not an identifier" G18408@y)) (assertion-violation 'free-identifier=? '"not an identifier" G18407@x)))) (set! G12442@bound-identifier=? (lambda (G18411@x G18412@y) (if (G11640@id? G18411@x) (if (G11640@id? G18412@y) (G11646@bound-id=? G18411@x G18412@y) (assertion-violation 'bound-identifier=? '"not an identifier" G18412@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G18411@x)))) (set! G12444@extract-position-condition (lambda (G18415@x) ((lambda (G18425@G18420 G18427@G18422 G18429@G18421 G18434@G18419 G18436@make-source-condition G18438@G18417 G18440@G18418 G18442@source-condition? G18444@source-filename G18446@source-line) (begin (set! G18425@G18420 (make-record-type-descriptor '&source-information &condition-rtd 'G18423 '#f '#f '#((immutable file-name) (immutable line)))) (set! G18427@G18422 '#f) (set! G18429@G18421 (make-record-constructor-descriptor G18425@G18420 &condition-rcd G18427@G18422)) (set! G18434@G18419 (record-predicate G18425@G18420)) (set! G18436@make-source-condition (record-constructor G18429@G18421)) (set! G18438@G18417 (record-accessor G18425@G18420 '0)) (set! G18440@G18418 (record-accessor G18425@G18420 '1)) (set! G18442@source-condition? (condition-predicate G18425@G18420)) (set! G18444@source-filename (condition-accessor G18425@G18420 G18438@G18417)) (set! G18446@source-line (condition-accessor G18425@G18420 G18440@G18418)) (if (G11584@stx? G18415@x) ((lambda (G18447@x) (if (G10448@G10235@annotation? G18447@x) ((lambda (G18449@src) (if (pair? G18449@src) (G18436@make-source-condition (car G18449@src) (cdr G18449@src)) (condition))) (G10449@G10237@annotation-source G18447@x)) (condition))) (G11588@stx-expr G18415@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12446@syntax-error (lambda (G18451@x . G18453@args) (begin (if (for-all string? G18453@args) (void) (assertion-violation 'syntax-error '"invalid argument" G18453@args)) (raise (condition (G19165@G18887@make-message-condition (if (null? G18453@args) '"invalid syntax" (apply string-append G18453@args))) (G19237@G19123@make-syntax-violation (G12458@syntax->datum G18451@x) '#f) (G12444@extract-position-condition G18451@x) (G12448@extract-trace G18451@x)))))) (set! G12448@extract-trace (lambda (G18455@x) ((lambda (G18464@G18459 G18466@G18461 G18468@G18460 G18473@G18458 G18475@make-trace G18477@G18457 G18479@trace? G18481@trace-form) (begin (set! G18464@G18459 (make-record-type-descriptor '&trace &condition-rtd 'G18462 '#f '#f '#((immutable form)))) (set! G18466@G18461 '#f) (set! G18468@G18460 (make-record-constructor-descriptor G18464@G18459 &condition-rcd G18466@G18461)) (set! G18473@G18458 (record-predicate G18464@G18459)) (set! G18475@make-trace (record-constructor G18468@G18460)) (set! G18477@G18457 (record-accessor G18464@G18459 '0)) (set! G18479@trace? (condition-predicate G18464@G18459)) (set! G18481@trace-form (condition-accessor G18464@G18459 G18477@G18457)) ((letrec ((G18482@f (lambda (G18484@x) (if (G11584@stx? G18484@x) (apply condition (G18475@make-trace G18484@x) (map G18482@f (G11594@stx-ae* G18484@x))) (if (G10448@G10235@annotation? G18484@x) (G18475@make-trace (G11586@make-stx G18484@x '() '() '())) (condition)))))) G18482@f) G18455@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12450@syntax-violation* (lambda (G18486@who G18487@msg G18488@form G18489@condition-object) (begin (if (string? G18487@msg) (void) (assertion-violation 'syntax-violation '"message is not a string" G18487@msg)) ((lambda (G18494@who) (raise (condition (if G18494@who (G19211@G19037@make-who-condition G18494@who) (condition)) (G19165@G18887@make-message-condition G18487@msg) G18489@condition-object (G12444@extract-position-condition G18488@form) (G12448@extract-trace G18488@form)))) (if ((lambda (G18496@t) (if G18496@t G18496@t (begin '#f (symbol? G18486@who)))) (string? G18486@who)) G18486@who (if (not G18486@who) ((lambda (G18498@t) ((lambda (G18500@ls/false) (if (if G18500@ls/false (begin '#f (apply (lambda (G18502@id) (G11640@id? G18502@id)) G18500@ls/false)) '#f) (apply (lambda (G18504@id) (G12458@syntax->datum G18504@id)) G18500@ls/false) ((lambda (G18506@t) ((lambda (G18508@ls/false) (if (if G18508@ls/false (begin '#f (apply (lambda (G18510@id G18511@rest) (G11640@id? G18510@id)) G18508@ls/false)) '#f) (apply (lambda (G18514@id G18515@rest) (G12458@syntax->datum G18514@id)) G18508@ls/false) ((lambda (G18518@t) ((lambda (G18520@ls/false) (if G18520@ls/false (apply (lambda () '#f) G18520@ls/false) (G12452@syntax-violation '#f '"invalid syntax" G18518@t))) (G12219@syntax-dispatch G18518@t '_))) G18506@t))) (G12219@syntax-dispatch G18506@t '(any . any)))) G18498@t))) (G12219@syntax-dispatch G18498@t 'any))) G18488@form) (assertion-violation 'syntax-violation '"invalid who argument" G18486@who))))))) (set! G12452@syntax-violation (lambda G18536 ((lambda (G18537) (if (= G18537 '3) (apply (lambda (G18522@who G18523@msg G18524@form) (G12452@syntax-violation G18522@who G18523@msg G18524@form '#f)) G18536) (if (= G18537 '4) (apply (lambda (G18528@who G18529@msg G18530@form G18531@subform) (G12450@syntax-violation* G18528@who G18529@msg G18530@form (G19237@G19123@make-syntax-violation (G12458@syntax->datum G18530@form) (G12458@syntax->datum G18531@subform)))) G18536) (error 'apply '"invalid arg count")))) (length G18536)))) (set! G12454@identifier? (lambda (G18538@x) (G11640@id? G18538@x))) (set! G12456@datum->syntax (lambda (G18540@id G18541@datum) (if (G11640@id? G18540@id) (G11606@datum->stx G18540@id G18541@datum) (assertion-violation 'datum->syntax '"not an identifier" G18540@id)))) (set! G12458@syntax->datum (lambda (G18544@x) (G11662@stx->datum G18544@x))) (set! G12460@compile-r6rs-top-level (lambda (G18546@x*) (call-with-values (lambda () (G12346@top-level-expander G18546@x*)) (lambda (G18550@G18548 G18551@G18549) ((lambda (G18554@invoke-code G18555@lib*) (lambda () (begin (for-each G11127@G10767@invoke-library G18555@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G10555@G10468@expanded->core G18554@invoke-code)) (void)) (eval-core (G10555@G10468@expanded->core G18554@invoke-code))))) G18551@G18549 G18550@G18548))))) (set! G12462@pre-compile-r6rs-top-level (lambda (G18558@x*) (call-with-values (lambda () (G12346@top-level-expander G18558@x*)) (lambda (G18562@G18560 G18563@G18561) ((lambda (G18566@invoke-code G18567@lib*) (begin (for-each G11127@G10767@invoke-library G18567@lib*) (G10454@G10247@compile-core (G10555@G10468@expanded->core G18566@invoke-code)))) G18563@G18561 G18562@G18560))))) (set! G12464@interaction-environment ((lambda (G18570@the-env) (lambda () ((lambda (G18572@t) (if G18572@t G18572@t (begin '#f ((lambda (G18574@lib G18575@rib) (begin ((lambda (G18578@subst) (begin (G11551@set-rib-sym*! G18575@rib (map car G18578@subst)) (G11553@set-rib-mark**! G18575@rib (map (lambda (G18580@x) G11510@top-mark*) G18578@subst)) (G11555@set-rib-label*! G18575@rib (map cdr G18578@subst)))) (G11084@G10681@library-subst G18574@lib)) ((lambda (G18582@env) (begin (set! G18570@the-env G18582@env) G18582@env)) (G12394@make-interaction-env G18575@rib '() '())))) (G11120@G10753@find-library-by-name '(rnrs)) (G11559@make-empty-rib))))) G18570@the-env))) '#f)) (set! G12466@top-level-context (G10456@G10251@make-parameter '#f)) (begin (set! G18843@G12466@top-level-context G12466@top-level-context) (set! G18842@G12464@interaction-environment G12464@interaction-environment) (set! G18841@G12462@pre-compile-r6rs-top-level G12462@pre-compile-r6rs-top-level) (set! G18840@G12460@compile-r6rs-top-level G12460@compile-r6rs-top-level) (set! G18839@G12458@syntax->datum G12458@syntax->datum) (set! G18838@G12456@datum->syntax G12456@datum->syntax) (set! G18837@G12454@identifier? G12454@identifier?) (set! G18836@G12452@syntax-violation G12452@syntax-violation) (set! G18835@G12450@syntax-violation* G12450@syntax-violation*) (set! G18834@G12448@extract-trace G12448@extract-trace) (set! G18833@G12446@syntax-error G12446@syntax-error) (set! G18832@G12444@extract-position-condition G12444@extract-position-condition) (set! G18831@G12442@bound-identifier=? G12442@bound-identifier=?) (set! G18830@G12440@free-identifier=? G12440@free-identifier=?) (set! G18829@G12438@generate-temporaries G12438@generate-temporaries) (set! G18828@G12436@make-export-env/macros G12436@make-export-env/macros) (set! G18827@G12434@make-export-subst G12434@make-export-subst) (set! G18826@G12432@build-exports G12432@build-exports) (set! G18825@G12430@rev-map-append G12430@rev-map-append) (set! G18824@G12428@boot-library-expand G12428@boot-library-expand) (set! G18823@G12426@library-expander G12426@library-expander) (set! G18822@G12424@eval G12424@eval) (set! G18821@G12422@expand G12422@expand) (set! G18820@G12420@scheme-report-environment G12420@scheme-report-environment) (set! G18819@G12418@null-environment G12418@null-environment) (set! G18818@G12416@environment G12416@environment) (set! G18817@G12414@environment? G12414@environment?) (set! G18816@G12412@environment-symbols G12412@environment-symbols) (set! G18815@G12410@interaction-environment-symbols G12410@interaction-environment-symbols) (set! G18814@G12408@rp G12408@rp) (set! G18813@G12406@set-interaction-env-locs! G12406@set-interaction-env-locs!) (set! G18812@G12404@set-interaction-env-r! G12404@set-interaction-env-r!) (set! G18811@G12402@set-interaction-env-rib! G12402@set-interaction-env-rib!) (set! G18810@G12400@interaction-env-locs G12400@interaction-env-locs) (set! G18809@G12398@interaction-env-r G12398@interaction-env-r) (set! G18808@G12396@interaction-env-rib G12396@interaction-env-rib) (set! G18807@G12394@make-interaction-env G12394@make-interaction-env) (set! G18806@G12392@interaction-env? G12392@interaction-env?) (set! G18805@G12387@G12379 G12387@G12379) (set! G18804@G12385@G12380 G12385@G12380) (set! G18803@G12383@G12378 G12383@G12378) (set! G18802@G12377@rp G12377@rp) (set! G18801@G12375@set-env-itc! G12375@set-env-itc!) (set! G18800@G12373@set-env-labels! G12373@set-env-labels!) (set! G18799@G12371@set-env-names! G12371@set-env-names!) (set! G18798@G12369@env-itc G12369@env-itc) (set! G18797@G12367@env-labels G12367@env-labels) (set! G18796@G12365@env-names G12365@env-names) (set! G18795@G12363@make-env G12363@make-env) (set! G18794@G12361@env? G12361@env?) (set! G18793@G12356@G12348 G12356@G12348) (set! G18792@G12354@G12349 G12354@G12349) (set! G18791@G12352@G12347 G12352@G12347) (set! G18790@G12346@top-level-expander G12346@top-level-expander) (set! G18789@G12344@parse-top-level-program G12344@parse-top-level-program) (set! G18788@G12342@core-library-expander G12342@core-library-expander) (set! G18787@G12340@library-body-expander G12340@library-body-expander) (set! G18786@G12338@chi-interaction-expr G12338@chi-interaction-expr) (set! G18785@G12336@chi-library-internal G12336@chi-library-internal) (set! G18784@G12334@imp-collector G12334@imp-collector) (set! G18783@G12332@vis-collector G12332@vis-collector) (set! G18782@G12330@inv-collector G12330@inv-collector) (set! G18781@G12328@make-collector G12328@make-collector) (set! G18780@G12326@make-top-rib G12326@make-top-rib) (set! G18779@G12324@parse-import-spec* G12324@parse-import-spec*) (set! G18778@G12322@parse-library G12322@parse-library) (set! G18777@G12320@parse-library-name G12320@parse-library-name) (set! G18776@G12318@parse-exports G12318@parse-exports) (set! G18775@G12316@expand-transformer G12316@expand-transformer) (set! G18774@G12314@chi-body* G12314@chi-body*) (set! G18773@G12312@chi-internal-module G12312@chi-internal-module) (set! G18772@G12310@module-interface-exp-id* G12310@module-interface-exp-id*) (set! G18771@G12308@set-module-interface-exp-lab-vec! G12308@set-module-interface-exp-lab-vec!) (set! G18770@G12306@set-module-interface-exp-id-vec! G12306@set-module-interface-exp-id-vec!) (set! G18769@G12304@set-module-interface-first-mark! G12304@set-module-interface-first-mark!) (set! G18768@G12302@module-interface-exp-lab-vec G12302@module-interface-exp-lab-vec) (set! G18767@G12300@module-interface-exp-id-vec G12300@module-interface-exp-id-vec) (set! G18766@G12298@module-interface-first-mark G12298@module-interface-first-mark) (set! G18765@G12296@make-module-interface G12296@make-module-interface) (set! G18764@G12294@module-interface? G12294@module-interface?) (set! G18763@G12289@G12281 G12289@G12281) (set! G18762@G12287@G12282 G12287@G12282) (set! G18761@G12285@G12280 G12285@G12280) (set! G18760@G12279@parse-module G12279@parse-module) (set! G18759@G12277@chi-internal G12277@chi-internal) (set! G18758@G12275@find-dups G12275@find-dups) (set! G18757@G12273@find-bound=? G12273@find-bound=?) (set! G18756@G12271@chi-rhs* G12271@chi-rhs*) (set! G18755@G12269@expand-interaction-rhs*/init* G12269@expand-interaction-rhs*/init*) (set! G18754@G12267@chi-rhs G12267@chi-rhs) (set! G18753@G12265@chi-defun G12265@chi-defun) (set! G18752@G12263@chi-lambda-clause* G12263@chi-lambda-clause*) (set! G18751@G12261@chi-lambda-clause G12261@chi-lambda-clause) (set! G18750@G12259@verify-formals G12259@verify-formals) (set! G18749@G12257@chi-set! G12257@chi-set!) (set! G18748@G12255@chi-expr G12255@chi-expr) (set! G18747@G12253@chi-application G12253@chi-application) (set! G18746@G12251@chi-expr* G12251@chi-expr*) (set! G18745@G12249@chi-global-macro G12249@chi-global-macro) (set! G18744@G12247@chi-local-macro G12247@chi-local-macro) (set! G18743@G12245@chi-macro G12245@chi-macro) (set! G18742@G12243@do-macro-call G12243@do-macro-call) (set! G18741@G12241@local-macro-transformer G12241@local-macro-transformer) (set! G18740@G12239@macro-transformer G12239@macro-transformer) (set! G18739@G12237@symbol-macro G12237@symbol-macro) (set! G18738@G12235@file-options-macro G12235@file-options-macro) (set! G18737@G12233@core-macro-transformer G12233@core-macro-transformer) (set! G18736@G12231@syntax-transformer G12231@syntax-transformer) (set! G18735@G12229@ellipsis-map G12229@ellipsis-map) (set! G18734@G12227@syntax-case-transformer G12227@syntax-case-transformer) (set! G18733@G12225@verify-literals G12225@verify-literals) (set! G18732@G12223@underscore? G12223@underscore?) (set! G18731@G12221@ellipsis? G12221@ellipsis?) (set! G18730@G12219@syntax-dispatch G12219@syntax-dispatch) (set! G18729@G12217@convert-pattern G12217@convert-pattern) (set! G18728@G12215@foreign-call-transformer G12215@foreign-call-transformer) (set! G18727@G12213@parameterize-transformer G12213@parameterize-transformer) (set! G18726@G12211@incorrect-usage-macro G12211@incorrect-usage-macro) (set! G18725@G12209@define-condition-type-macro G12209@define-condition-type-macro) (set! G18724@G12207@define-record-type-macro G12207@define-record-type-macro) (set! G18723@G12205@define-struct-macro G12205@define-struct-macro) (set! G18722@G12203@quasisyntax-macro G12203@quasisyntax-macro) (set! G18721@G12201@quasiquote-macro G12201@quasiquote-macro) (set! G18720@G12199@syntax-rules-macro G12199@syntax-rules-macro) (set! G18719@G12197@include-into-macro G12197@include-into-macro) (set! G18718@G12195@include-macro G12195@include-macro) (set! G18717@G12193@do-include G12193@do-include) (set! G18716@G12191@cond-macro G12191@cond-macro) (set! G18715@G12189@and-macro G12189@and-macro) (set! G18714@G12187@or-macro G12187@or-macro) (set! G18713@G12185@let*-macro G12185@let*-macro) (set! G18712@G12183@do-macro G12183@do-macro) (set! G18711@G12181@identifier-syntax-macro G12181@identifier-syntax-macro) (set! G18710@G12179@endianness-macro G12179@endianness-macro) (set! G18709@G12177@assert-macro G12177@assert-macro) (set! G18708@G12175@delay-macro G12175@delay-macro) (set! G18707@G12173@time-macro G12173@time-macro) (set! G18706@G12171@define-enumeration-macro G12171@define-enumeration-macro) (set! G18705@G12169@guard-macro G12169@guard-macro) (set! G18704@G12167@trace-letrec-syntax-macro G12167@trace-letrec-syntax-macro) (set! G18703@G12165@trace-let-syntax-macro G12165@trace-let-syntax-macro) (set! G18702@G12163@trace-let/rec-syntax G12163@trace-let/rec-syntax) (set! G18701@G12161@trace-define-syntax-macro G12161@trace-define-syntax-macro) (set! G18700@G12159@trace-define-macro G12159@trace-define-macro) (set! G18699@G12157@trace-lambda-macro G12157@trace-lambda-macro) (set! G18698@G12155@let*-values-macro G12155@let*-values-macro) (set! G18697@G12153@let-values-macro G12153@let-values-macro) (set! G18696@G12151@let-macro G12151@let-macro) (set! G18695@G12149@invalid-fmls-error G12149@invalid-fmls-error) (set! G18694@G12147@with-syntax-macro G12147@with-syntax-macro) (set! G18693@G12145@bless G12145@bless) (set! G18692@G12143@lambda-transformer G12143@lambda-transformer) (set! G18691@G12141@case-lambda-transformer G12141@case-lambda-transformer) (set! G18690@G12139@quote-transformer G12139@quote-transformer) (set! G18689@G12137@case-transformer G12137@case-transformer) (set! G18688@G12135@if-transformer G12135@if-transformer) (set! G18687@G12133@unless-transformer G12133@unless-transformer) (set! G18686@G12131@when-transformer G12131@when-transformer) (set! G18685@G12129@record-constructor-descriptor-transformer G12129@record-constructor-descriptor-transformer) (set! G18684@G12127@record-type-descriptor-transformer G12127@record-type-descriptor-transformer) (set! G18683@G12125@type-descriptor-transformer G12125@type-descriptor-transformer) (set! G18682@G12123@fluid-let-syntax-transformer G12123@fluid-let-syntax-transformer) (set! G18681@G12121@letrec*-transformer G12121@letrec*-transformer) (set! G18680@G12119@letrec-transformer G12119@letrec-transformer) (set! G18679@G12117@letrec-helper G12117@letrec-helper) (set! G18678@G12115@add-lexicals G12115@add-lexicals) (set! G18677@G12113@add-lexical G12113@add-lexical) (set! G18676@G12111@set-lexical-mutable! G12111@set-lexical-mutable!) (set! G18675@G12109@lexical-mutable? G12109@lexical-mutable?) (set! G18674@G12107@lexical-var G12107@lexical-var) (set! G18673@G12105@scheme-stx G12105@scheme-stx) (set! G18672@G12103@scheme-stx-hashtable G12103@scheme-stx-hashtable) (set! G18671@G12101@parse-define-syntax G12101@parse-define-syntax) (set! G18670@G12099@parse-define G12099@parse-define) (set! G18669@G11711@make-eval-transformer G11711@make-eval-transformer) (set! G18668@G11709@variable-transformer-procedure G11709@variable-transformer-procedure) (set! G18667@G11707@variable-transformer? G11707@variable-transformer?) (set! G18666@G11705@make-variable-transformer G11705@make-variable-transformer) (set! G18665@G11703@sanitize-binding G11703@sanitize-binding) (set! G18664@G11680@syntax-type G11680@syntax-type) (set! G18663@G11678@raise-unbound-error G11678@raise-unbound-error) (set! G18662@G11676@binding-value G11676@binding-value) (set! G18661@G11674@binding-type G11674@binding-type) (set! G18660@G11672@make-binding G11672@make-binding) (set! G18659@G11670@label->binding G11670@label->binding) (set! G18658@G11668@id->real-label G11668@id->real-label) (set! G18657@G11666@id->label G11666@id->label) (set! G18656@G11664@same-marks*? G11664@same-marks*?) (set! G18655@G11662@stx->datum G11662@stx->datum) (set! G18654@G11660@strip G11660@strip) (set! G18653@G11658@strip-annotations G11658@strip-annotations) (set! G18652@G11656@self-evaluating? G11656@self-evaluating?) (set! G18651@G11654@bound-id-member? G11654@bound-id-member?) (set! G18650@G11652@distinct-bound-ids? G11652@distinct-bound-ids?) (set! G18649@G11650@valid-bound-ids? G11650@valid-bound-ids?) (set! G18648@G11648@free-id=? G11648@free-id=?) (set! G18647@G11646@bound-id=? G11646@bound-id=?) (set! G18646@G11644@same-marks? G11644@same-marks?) (set! G18645@G11642@id->sym G11642@id->sym) (set! G18644@G11640@id? G11640@id?) (set! G18643@G11638@syntax->list G11638@syntax->list) (set! G18642@G11636@syntax-cdr G11636@syntax-cdr) (set! G18641@G11634@syntax-car G11634@syntax-car) (set! G18640@G11632@syntax-list? G11632@syntax-list?) (set! G18639@G11630@syntax-null? G11630@syntax-null?) (set! G18638@G11628@syntax-vector? G11628@syntax-vector?) (set! G18637@G11626@syntax-pair? G11626@syntax-pair?) (set! G18636@G11624@syntax-vector->list G11624@syntax-vector->list) (set! G18635@G11622@syntax-kind? G11622@syntax-kind?) (set! G18634@G11620@add-subst G11620@add-subst) (set! G18633@G11618@add-mark G11618@add-mark) (set! G18632@G11616@mkstx G11616@mkstx) (set! G18631@G11614@join-wraps G11614@join-wraps) (set! G18630@G11612@anti-mark? G11612@anti-mark?) (set! G18629@G11610@anti-mark G11610@anti-mark) (set! G18628@G11608@gen-mark G11608@gen-mark) (set! G18627@G11606@datum->stx G11606@datum->stx) (set! G18626@G11604@rp G11604@rp) (set! G18625@G11602@set-stx-ae*! G11602@set-stx-ae*!) (set! G18624@G11600@set-stx-subst*! G11600@set-stx-subst*!) (set! G18623@G11598@set-stx-mark*! G11598@set-stx-mark*!) (set! G18622@G11596@set-stx-expr! G11596@set-stx-expr!) (set! G18621@G11594@stx-ae* G11594@stx-ae*) (set! G18620@G11592@stx-subst* G11592@stx-subst*) (set! G18619@G11590@stx-mark* G11590@stx-mark*) (set! G18618@G11588@stx-expr G11588@stx-expr) (set! G18617@G11586@make-stx G11586@make-stx) (set! G18616@G11584@stx? G11584@stx?) (set! G18615@G11579@G11571 G11579@G11571) (set! G18614@G11577@G11572 G11577@G11572) (set! G18613@G11575@G11570 G11575@G11570) (set! G18612@G11569@make-full-rib G11569@make-full-rib) (set! G18611@G11567@unseal-rib! G11567@unseal-rib!) (set! G18610@G11565@seal-rib! G11565@seal-rib!) (set! G18609@G11563@make-rib-map G11563@make-rib-map) (set! G18608@G11561@extend-rib! G11561@extend-rib!) (set! G18607@G11559@make-empty-rib G11559@make-empty-rib) (set! G18606@G11557@set-rib-sealed/freq! G11557@set-rib-sealed/freq!) (set! G18605@G11555@set-rib-label*! G11555@set-rib-label*!) (set! G18604@G11553@set-rib-mark**! G11553@set-rib-mark**!) (set! G18603@G11551@set-rib-sym*! G11551@set-rib-sym*!) (set! G18602@G11549@rib-sealed/freq G11549@rib-sealed/freq) (set! G18601@G11547@rib-label* G11547@rib-label*) (set! G18600@G11545@rib-mark** G11545@rib-mark**) (set! G18599@G11543@rib-sym* G11543@rib-sym*) (set! G18598@G11541@make-rib G11541@make-rib) (set! G18597@G11539@rib? G11539@rib?) (set! G18596@G11534@G11526 G11534@G11526) (set! G18595@G11532@G11527 G11532@G11527) (set! G18594@G11530@G11525 G11530@G11525) (set! G18593@G11524@gen-define-label G11524@gen-define-label) (set! G18592@G11522@gen-define-label+loc G11522@gen-define-label+loc) (set! G18591@G11520@gen-top-level-label G11520@gen-top-level-label) (set! G18590@G11518@gen-label G11518@gen-label) (set! G18589@G11516@gen-global G11516@gen-global) (set! G18588@G11514@gen-lexical G11514@gen-lexical) (set! G18587@G11512@top-marked? G11512@top-marked?) (set! G18586@G11510@top-mark* G11510@top-mark*) (set! G18585@G11505@set-union G11505@set-union) (set! G18584@G11503@set-cons G11503@set-cons) (G11117@G10747@current-library-expander G12426@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G18853@G18848 G18855@G18850 G18857@G18849 G18862@&condition? G18864@make-&condition G18866@&condition-rtd G18868@&condition-rcd G18876@G18871 G18878@G18873 G18880@G18872 G18885@G18870 G18887@make-message-condition G18889@G18869 G18891@message-condition? G18893@condition-message G18900@G18895 G18902@G18897 G18904@G18896 G18909@G18894 G18911@make-warning G18913@warning? G18920@G18915 G18922@G18917 G18924@G18916 G18929@G18914 G18931@make-serious-condition G18933@serious-condition? G18940@G18935 G18942@G18937 G18944@G18936 G18949@G18934 G18951@make-error G18953@error? G18960@G18955 G18962@G18957 G18964@G18956 G18969@G18954 G18971@make-violation G18973@violation? G18980@G18975 G18982@G18977 G18984@G18976 G18989@G18974 G18991@make-assertion-violation G18993@assertion-violation? G19001@G18996 G19003@G18998 G19005@G18997 G19010@G18995 G19012@make-irritants-condition G19014@G18994 G19016@irritants-condition? G19018@condition-irritants G19026@G19021 G19028@G19023 G19030@G19022 G19035@G19020 G19037@make-who-condition G19039@G19019 G19041@who-condition? G19043@condition-who G19050@G19045 G19052@G19047 G19054@G19046 G19059@G19044 G19061@make-non-continuable-violation G19063@non-continuable-violation? G19070@G19065 G19072@G19067 G19074@G19066 G19079@G19064 G19081@make-implementation-restriction-violation G19083@implementation-restriction-violation? G19090@G19085 G19092@G19087 G19094@G19086 G19099@G19084 G19101@make-lexical-violation G19103@lexical-violation? G19112@G19107 G19114@G19109 G19116@G19108 G19121@G19106 G19123@make-syntax-violation G19125@G19104 G19127@G19105 G19129@syntax-violation? G19131@syntax-violation-form G19133@syntax-violation-subform G19140@G19135 G19142@G19137 G19144@G19136 G19149@G19134 G19151@make-undefined-violation G19153@undefined-violation?) (begin (set! G18853@G18848 (make-record-type-descriptor '&condition '#f 'G18851 '#f '#f '#())) (set! G18855@G18850 '#f) (set! G18857@G18849 (make-record-constructor-descriptor G18853@G18848 '#f G18855@G18850)) (set! G18862@&condition? (record-predicate G18853@G18848)) (set! G18864@make-&condition (record-constructor G18857@G18849)) (set! G18866@&condition-rtd G18853@G18848) (set! G18868@&condition-rcd G18857@G18849) (set! G18876@G18871 (make-record-type-descriptor '&message G18853@G18848 'G18874 '#f '#f '#((immutable message)))) (set! G18878@G18873 '#f) (set! G18880@G18872 (make-record-constructor-descriptor G18876@G18871 G18857@G18849 G18878@G18873)) (set! G18885@G18870 (record-predicate G18876@G18871)) (set! G18887@make-message-condition (record-constructor G18880@G18872)) (set! G18889@G18869 (record-accessor G18876@G18871 '0)) (set! G18891@message-condition? (condition-predicate G18876@G18871)) (set! G18893@condition-message (condition-accessor G18876@G18871 G18889@G18869)) (set! G18900@G18895 (make-record-type-descriptor '&warning G18853@G18848 'G18898 '#f '#f '#())) (set! G18902@G18897 '#f) (set! G18904@G18896 (make-record-constructor-descriptor G18900@G18895 G18857@G18849 G18902@G18897)) (set! G18909@G18894 (record-predicate G18900@G18895)) (set! G18911@make-warning (record-constructor G18904@G18896)) (set! G18913@warning? (condition-predicate G18900@G18895)) (set! G18920@G18915 (make-record-type-descriptor '&serious G18853@G18848 'G18918 '#f '#f '#())) (set! G18922@G18917 '#f) (set! G18924@G18916 (make-record-constructor-descriptor G18920@G18915 G18857@G18849 G18922@G18917)) (set! G18929@G18914 (record-predicate G18920@G18915)) (set! G18931@make-serious-condition (record-constructor G18924@G18916)) (set! G18933@serious-condition? (condition-predicate G18920@G18915)) (set! G18940@G18935 (make-record-type-descriptor '&error G18920@G18915 'G18938 '#f '#f '#())) (set! G18942@G18937 '#f) (set! G18944@G18936 (make-record-constructor-descriptor G18940@G18935 G18924@G18916 G18942@G18937)) (set! G18949@G18934 (record-predicate G18940@G18935)) (set! G18951@make-error (record-constructor G18944@G18936)) (set! G18953@error? (condition-predicate G18940@G18935)) (set! G18960@G18955 (make-record-type-descriptor '&violation G18920@G18915 'G18958 '#f '#f '#())) (set! G18962@G18957 '#f) (set! G18964@G18956 (make-record-constructor-descriptor G18960@G18955 G18924@G18916 G18962@G18957)) (set! G18969@G18954 (record-predicate G18960@G18955)) (set! G18971@make-violation (record-constructor G18964@G18956)) (set! G18973@violation? (condition-predicate G18960@G18955)) (set! G18980@G18975 (make-record-type-descriptor '&assertion G18960@G18955 'G18978 '#f '#f '#())) (set! G18982@G18977 '#f) (set! G18984@G18976 (make-record-constructor-descriptor G18980@G18975 G18964@G18956 G18982@G18977)) (set! G18989@G18974 (record-predicate G18980@G18975)) (set! G18991@make-assertion-violation (record-constructor G18984@G18976)) (set! G18993@assertion-violation? (condition-predicate G18980@G18975)) (set! G19001@G18996 (make-record-type-descriptor '&irritants G18853@G18848 'G18999 '#f '#f '#((immutable irritants)))) (set! G19003@G18998 '#f) (set! G19005@G18997 (make-record-constructor-descriptor G19001@G18996 G18857@G18849 G19003@G18998)) (set! G19010@G18995 (record-predicate G19001@G18996)) (set! G19012@make-irritants-condition (record-constructor G19005@G18997)) (set! G19014@G18994 (record-accessor G19001@G18996 '0)) (set! G19016@irritants-condition? (condition-predicate G19001@G18996)) (set! G19018@condition-irritants (condition-accessor G19001@G18996 G19014@G18994)) (set! G19026@G19021 (make-record-type-descriptor '&who G18853@G18848 'G19024 '#f '#f '#((immutable who)))) (set! G19028@G19023 '#f) (set! G19030@G19022 (make-record-constructor-descriptor G19026@G19021 G18857@G18849 G19028@G19023)) (set! G19035@G19020 (record-predicate G19026@G19021)) (set! G19037@make-who-condition (record-constructor G19030@G19022)) (set! G19039@G19019 (record-accessor G19026@G19021 '0)) (set! G19041@who-condition? (condition-predicate G19026@G19021)) (set! G19043@condition-who (condition-accessor G19026@G19021 G19039@G19019)) (set! G19050@G19045 (make-record-type-descriptor '&non-continuable G18960@G18955 'G19048 '#f '#f '#())) (set! G19052@G19047 '#f) (set! G19054@G19046 (make-record-constructor-descriptor G19050@G19045 G18964@G18956 G19052@G19047)) (set! G19059@G19044 (record-predicate G19050@G19045)) (set! G19061@make-non-continuable-violation (record-constructor G19054@G19046)) (set! G19063@non-continuable-violation? (condition-predicate G19050@G19045)) (set! G19070@G19065 (make-record-type-descriptor '&implementation-restriction G18960@G18955 'G19068 '#f '#f '#())) (set! G19072@G19067 '#f) (set! G19074@G19066 (make-record-constructor-descriptor G19070@G19065 G18964@G18956 G19072@G19067)) (set! G19079@G19064 (record-predicate G19070@G19065)) (set! G19081@make-implementation-restriction-violation (record-constructor G19074@G19066)) (set! G19083@implementation-restriction-violation? (condition-predicate G19070@G19065)) (set! G19090@G19085 (make-record-type-descriptor '&lexical G18960@G18955 'G19088 '#f '#f '#())) (set! G19092@G19087 '#f) (set! G19094@G19086 (make-record-constructor-descriptor G19090@G19085 G18964@G18956 G19092@G19087)) (set! G19099@G19084 (record-predicate G19090@G19085)) (set! G19101@make-lexical-violation (record-constructor G19094@G19086)) (set! G19103@lexical-violation? (condition-predicate G19090@G19085)) (set! G19112@G19107 (make-record-type-descriptor '&syntax G18960@G18955 'G19110 '#f '#f '#((immutable form) (immutable subform)))) (set! G19114@G19109 '#f) (set! G19116@G19108 (make-record-constructor-descriptor G19112@G19107 G18964@G18956 G19114@G19109)) (set! G19121@G19106 (record-predicate G19112@G19107)) (set! G19123@make-syntax-violation (record-constructor G19116@G19108)) (set! G19125@G19104 (record-accessor G19112@G19107 '0)) (set! G19127@G19105 (record-accessor G19112@G19107 '1)) (set! G19129@syntax-violation? (condition-predicate G19112@G19107)) (set! G19131@syntax-violation-form (condition-accessor G19112@G19107 G19125@G19104)) (set! G19133@syntax-violation-subform (condition-accessor G19112@G19107 G19127@G19105)) (set! G19140@G19135 (make-record-type-descriptor '&undefined G18960@G18955 'G19138 '#f '#f '#())) (set! G19142@G19137 '#f) (set! G19144@G19136 (make-record-constructor-descriptor G19140@G19135 G18964@G18956 G19142@G19137)) (set! G19149@G19134 (record-predicate G19140@G19135)) (set! G19151@make-undefined-violation (record-constructor G19144@G19136)) (set! G19153@undefined-violation? (condition-predicate G19140@G19135)) (begin (set! G19248@G19153@undefined-violation? G19153@undefined-violation?) (set! G19247@G19151@make-undefined-violation G19151@make-undefined-violation) (set! G19246@G19149@G19134 G19149@G19134) (set! G19245@G19144@G19136 G19144@G19136) (set! G19244@G19142@G19137 G19142@G19137) (set! G19243@G19140@G19135 G19140@G19135) (set! G19242@G19133@syntax-violation-subform G19133@syntax-violation-subform) (set! G19241@G19131@syntax-violation-form G19131@syntax-violation-form) (set! G19240@G19129@syntax-violation? G19129@syntax-violation?) (set! G19239@G19127@G19105 G19127@G19105) (set! G19238@G19125@G19104 G19125@G19104) (set! G19237@G19123@make-syntax-violation G19123@make-syntax-violation) (set! G19236@G19121@G19106 G19121@G19106) (set! G19235@G19116@G19108 G19116@G19108) (set! G19234@G19114@G19109 G19114@G19109) (set! G19233@G19112@G19107 G19112@G19107) (set! G19232@G19103@lexical-violation? G19103@lexical-violation?) (set! G19231@G19101@make-lexical-violation G19101@make-lexical-violation) (set! G19230@G19099@G19084 G19099@G19084) (set! G19229@G19094@G19086 G19094@G19086) (set! G19228@G19092@G19087 G19092@G19087) (set! G19227@G19090@G19085 G19090@G19085) (set! G19226@G19083@implementation-restriction-violation? G19083@implementation-restriction-violation?) (set! G19225@G19081@make-implementation-restriction-violation G19081@make-implementation-restriction-violation) (set! G19224@G19079@G19064 G19079@G19064) (set! G19223@G19074@G19066 G19074@G19066) (set! G19222@G19072@G19067 G19072@G19067) (set! G19221@G19070@G19065 G19070@G19065) (set! G19220@G19063@non-continuable-violation? G19063@non-continuable-violation?) (set! G19219@G19061@make-non-continuable-violation G19061@make-non-continuable-violation) (set! G19218@G19059@G19044 G19059@G19044) (set! G19217@G19054@G19046 G19054@G19046) (set! G19216@G19052@G19047 G19052@G19047) (set! G19215@G19050@G19045 G19050@G19045) (set! G19214@G19043@condition-who G19043@condition-who) (set! G19213@G19041@who-condition? G19041@who-condition?) (set! G19212@G19039@G19019 G19039@G19019) (set! G19211@G19037@make-who-condition G19037@make-who-condition) (set! G19210@G19035@G19020 G19035@G19020) (set! G19209@G19030@G19022 G19030@G19022) (set! G19208@G19028@G19023 G19028@G19023) (set! G19207@G19026@G19021 G19026@G19021) (set! G19206@G19018@condition-irritants G19018@condition-irritants) (set! G19205@G19016@irritants-condition? G19016@irritants-condition?) (set! G19204@G19014@G18994 G19014@G18994) (set! G19203@G19012@make-irritants-condition G19012@make-irritants-condition) (set! G19202@G19010@G18995 G19010@G18995) (set! G19201@G19005@G18997 G19005@G18997) (set! G19200@G19003@G18998 G19003@G18998) (set! G19199@G19001@G18996 G19001@G18996) (set! G19198@G18993@assertion-violation? G18993@assertion-violation?) (set! G19197@G18991@make-assertion-violation G18991@make-assertion-violation) (set! G19196@G18989@G18974 G18989@G18974) (set! G19195@G18984@G18976 G18984@G18976) (set! G19194@G18982@G18977 G18982@G18977) (set! G19193@G18980@G18975 G18980@G18975) (set! G19192@G18973@violation? G18973@violation?) (set! G19191@G18971@make-violation G18971@make-violation) (set! G19190@G18969@G18954 G18969@G18954) (set! G19189@G18964@G18956 G18964@G18956) (set! G19188@G18962@G18957 G18962@G18957) (set! G19187@G18960@G18955 G18960@G18955) (set! G19186@G18953@error? G18953@error?) (set! G19185@G18951@make-error G18951@make-error) (set! G19184@G18949@G18934 G18949@G18934) (set! G19183@G18944@G18936 G18944@G18936) (set! G19182@G18942@G18937 G18942@G18937) (set! G19181@G18940@G18935 G18940@G18935) (set! G19180@G18933@serious-condition? G18933@serious-condition?) (set! G19179@G18931@make-serious-condition G18931@make-serious-condition) (set! G19178@G18929@G18914 G18929@G18914) (set! G19177@G18924@G18916 G18924@G18916) (set! G19176@G18922@G18917 G18922@G18917) (set! G19175@G18920@G18915 G18920@G18915) (set! G19174@G18913@warning? G18913@warning?) (set! G19173@G18911@make-warning G18911@make-warning) (set! G19172@G18909@G18894 G18909@G18894) (set! G19171@G18904@G18896 G18904@G18896) (set! G19170@G18902@G18897 G18902@G18897) (set! G19169@G18900@G18895 G18900@G18895) (set! G19168@G18893@condition-message G18893@condition-message) (set! G19167@G18891@message-condition? G18891@message-condition?) (set! G19166@G18889@G18869 G18889@G18869) (set! G19165@G18887@make-message-condition G18887@make-message-condition) (set! G19164@G18885@G18870 G18885@G18870) (set! G19163@G18880@G18872 G18880@G18872) (set! G19162@G18878@G18873 G18878@G18873) (set! G19161@G18876@G18871 G18876@G18871) (set! G19160@G18868@&condition-rcd G18868@&condition-rcd) (set! G19159@G18866@&condition-rtd G18866@&condition-rtd) (set! G19158@G18864@make-&condition G18864@make-&condition) (set! G19157@G18862@&condition? G18862@&condition?) (set! G19156@G18857@G18849 G18857@G18849) (set! G19155@G18855@G18850 G18855@G18850) (set! G19154@G18853@G18848 G18853@G18848)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G19256@G19251 G19258@G19253 G19260@G19252 G19265@G19250 G19267@make-i/o-error G19269@i/o-error? G19276@G19271 G19278@G19273 G19280@G19272 G19285@G19270 G19287@make-i/o-read-error G19289@i/o-read-error? G19296@G19291 G19298@G19293 G19300@G19292 G19305@G19290 G19307@make-i/o-write-error G19309@i/o-write-error? G19317@G19312 G19319@G19314 G19321@G19313 G19326@G19311 G19328@make-i/o-invalid-position-error G19330@G19310 G19332@i/o-invalid-position-error? G19334@i/o-error-position G19342@G19337 G19344@G19339 G19346@G19338 G19351@G19336 G19353@make-i/o-filename-error G19355@G19335 G19357@i/o-filename-error? G19359@i/o-error-filename G19366@G19361 G19368@G19363 G19370@G19362 G19375@G19360 G19377@make-i/o-file-protection-error G19379@i/o-file-protection-error? G19386@G19381 G19388@G19383 G19390@G19382 G19395@G19380 G19397@make-i/o-file-is-read-only-error G19399@i/o-file-is-read-only-error? G19406@G19401 G19408@G19403 G19410@G19402 G19415@G19400 G19417@make-i/o-file-already-exists-error G19419@i/o-file-already-exists-error? G19426@G19421 G19428@G19423 G19430@G19422 G19435@G19420 G19437@make-i/o-file-does-not-exist-error G19439@i/o-file-does-not-exist-error? G19447@G19442 G19449@G19444 G19451@G19443 G19456@G19441 G19458@make-i/o-port-error G19460@G19440 G19462@i/o-port-error? G19464@i/o-error-port G19471@G19466 G19473@G19468 G19475@G19467 G19480@G19465 G19482@make-i/o-decoding-error G19484@i/o-decoding-error? G19492@G19487 G19494@G19489 G19496@G19488 G19501@G19486 G19503@make-i/o-encoding-error G19505@G19485 G19507@i/o-encoding-error? G19509@i/o-encoding-error-char) (begin (set! G19256@G19251 (make-record-type-descriptor '&i/o &error-rtd 'G19254 '#f '#f '#())) (set! G19258@G19253 '#f) (set! G19260@G19252 (make-record-constructor-descriptor G19256@G19251 &error-rcd G19258@G19253)) (set! G19265@G19250 (record-predicate G19256@G19251)) (set! G19267@make-i/o-error (record-constructor G19260@G19252)) (set! G19269@i/o-error? (condition-predicate G19256@G19251)) (set! G19276@G19271 (make-record-type-descriptor '&i/o-read G19256@G19251 'G19274 '#f '#f '#())) (set! G19278@G19273 '#f) (set! G19280@G19272 (make-record-constructor-descriptor G19276@G19271 G19260@G19252 G19278@G19273)) (set! G19285@G19270 (record-predicate G19276@G19271)) (set! G19287@make-i/o-read-error (record-constructor G19280@G19272)) (set! G19289@i/o-read-error? (condition-predicate G19276@G19271)) (set! G19296@G19291 (make-record-type-descriptor '&i/o-write G19256@G19251 'G19294 '#f '#f '#())) (set! G19298@G19293 '#f) (set! G19300@G19292 (make-record-constructor-descriptor G19296@G19291 G19260@G19252 G19298@G19293)) (set! G19305@G19290 (record-predicate G19296@G19291)) (set! G19307@make-i/o-write-error (record-constructor G19300@G19292)) (set! G19309@i/o-write-error? (condition-predicate G19296@G19291)) (set! G19317@G19312 (make-record-type-descriptor '&i/o-invalid-position G19256@G19251 'G19315 '#f '#f '#((immutable position)))) (set! G19319@G19314 '#f) (set! G19321@G19313 (make-record-constructor-descriptor G19317@G19312 G19260@G19252 G19319@G19314)) (set! G19326@G19311 (record-predicate G19317@G19312)) (set! G19328@make-i/o-invalid-position-error (record-constructor G19321@G19313)) (set! G19330@G19310 (record-accessor G19317@G19312 '0)) (set! G19332@i/o-invalid-position-error? (condition-predicate G19317@G19312)) (set! G19334@i/o-error-position (condition-accessor G19317@G19312 G19330@G19310)) (set! G19342@G19337 (make-record-type-descriptor '&i/o-filename G19256@G19251 'G19340 '#f '#f '#((immutable filename)))) (set! G19344@G19339 '#f) (set! G19346@G19338 (make-record-constructor-descriptor G19342@G19337 G19260@G19252 G19344@G19339)) (set! G19351@G19336 (record-predicate G19342@G19337)) (set! G19353@make-i/o-filename-error (record-constructor G19346@G19338)) (set! G19355@G19335 (record-accessor G19342@G19337 '0)) (set! G19357@i/o-filename-error? (condition-predicate G19342@G19337)) (set! G19359@i/o-error-filename (condition-accessor G19342@G19337 G19355@G19335)) (set! G19366@G19361 (make-record-type-descriptor '&i/o-file-protection G19256@G19251 'G19364 '#f '#f '#())) (set! G19368@G19363 '#f) (set! G19370@G19362 (make-record-constructor-descriptor G19366@G19361 G19260@G19252 G19368@G19363)) (set! G19375@G19360 (record-predicate G19366@G19361)) (set! G19377@make-i/o-file-protection-error (record-constructor G19370@G19362)) (set! G19379@i/o-file-protection-error? (condition-predicate G19366@G19361)) (set! G19386@G19381 (make-record-type-descriptor '&i/o-file-is-read-only G19366@G19361 'G19384 '#f '#f '#())) (set! G19388@G19383 '#f) (set! G19390@G19382 (make-record-constructor-descriptor G19386@G19381 G19370@G19362 G19388@G19383)) (set! G19395@G19380 (record-predicate G19386@G19381)) (set! G19397@make-i/o-file-is-read-only-error (record-constructor G19390@G19382)) (set! G19399@i/o-file-is-read-only-error? (condition-predicate G19386@G19381)) (set! G19406@G19401 (make-record-type-descriptor '&i/o-file-already-exists G19342@G19337 'G19404 '#f '#f '#())) (set! G19408@G19403 '#f) (set! G19410@G19402 (make-record-constructor-descriptor G19406@G19401 G19346@G19338 G19408@G19403)) (set! G19415@G19400 (record-predicate G19406@G19401)) (set! G19417@make-i/o-file-already-exists-error (record-constructor G19410@G19402)) (set! G19419@i/o-file-already-exists-error? (condition-predicate G19406@G19401)) (set! G19426@G19421 (make-record-type-descriptor '&i/o-file-does-not-exist G19342@G19337 'G19424 '#f '#f '#())) (set! G19428@G19423 '#f) (set! G19430@G19422 (make-record-constructor-descriptor G19426@G19421 G19346@G19338 G19428@G19423)) (set! G19435@G19420 (record-predicate G19426@G19421)) (set! G19437@make-i/o-file-does-not-exist-error (record-constructor G19430@G19422)) (set! G19439@i/o-file-does-not-exist-error? (condition-predicate G19426@G19421)) (set! G19447@G19442 (make-record-type-descriptor '&i/o-port G19256@G19251 'G19445 '#f '#f '#((immutable port)))) (set! G19449@G19444 '#f) (set! G19451@G19443 (make-record-constructor-descriptor G19447@G19442 G19260@G19252 G19449@G19444)) (set! G19456@G19441 (record-predicate G19447@G19442)) (set! G19458@make-i/o-port-error (record-constructor G19451@G19443)) (set! G19460@G19440 (record-accessor G19447@G19442 '0)) (set! G19462@i/o-port-error? (condition-predicate G19447@G19442)) (set! G19464@i/o-error-port (condition-accessor G19447@G19442 G19460@G19440)) (set! G19471@G19466 (make-record-type-descriptor '&i/o-decoding G19447@G19442 'G19469 '#f '#f '#())) (set! G19473@G19468 '#f) (set! G19475@G19467 (make-record-constructor-descriptor G19471@G19466 G19451@G19443 G19473@G19468)) (set! G19480@G19465 (record-predicate G19471@G19466)) (set! G19482@make-i/o-decoding-error (record-constructor G19475@G19467)) (set! G19484@i/o-decoding-error? (condition-predicate G19471@G19466)) (set! G19492@G19487 (make-record-type-descriptor '&i/o-encoding G19447@G19442 'G19490 '#f '#f '#((immutable char)))) (set! G19494@G19489 '#f) (set! G19496@G19488 (make-record-constructor-descriptor G19492@G19487 G19451@G19443 G19494@G19489)) (set! G19501@G19486 (record-predicate G19492@G19487)) (set! G19503@make-i/o-encoding-error (record-constructor G19496@G19488)) (set! G19505@G19485 (record-accessor G19492@G19487 '0)) (set! G19507@i/o-encoding-error? (condition-predicate G19492@G19487)) (set! G19509@i/o-encoding-error-char (condition-accessor G19492@G19487 G19505@G19485)) (begin (set! G19589@G19509@i/o-encoding-error-char G19509@i/o-encoding-error-char) (set! G19588@G19507@i/o-encoding-error? G19507@i/o-encoding-error?) (set! G19587@G19505@G19485 G19505@G19485) (set! G19586@G19503@make-i/o-encoding-error G19503@make-i/o-encoding-error) (set! G19585@G19501@G19486 G19501@G19486) (set! G19584@G19496@G19488 G19496@G19488) (set! G19583@G19494@G19489 G19494@G19489) (set! G19582@G19492@G19487 G19492@G19487) (set! G19581@G19484@i/o-decoding-error? G19484@i/o-decoding-error?) (set! G19580@G19482@make-i/o-decoding-error G19482@make-i/o-decoding-error) (set! G19579@G19480@G19465 G19480@G19465) (set! G19578@G19475@G19467 G19475@G19467) (set! G19577@G19473@G19468 G19473@G19468) (set! G19576@G19471@G19466 G19471@G19466) (set! G19575@G19464@i/o-error-port G19464@i/o-error-port) (set! G19574@G19462@i/o-port-error? G19462@i/o-port-error?) (set! G19573@G19460@G19440 G19460@G19440) (set! G19572@G19458@make-i/o-port-error G19458@make-i/o-port-error) (set! G19571@G19456@G19441 G19456@G19441) (set! G19570@G19451@G19443 G19451@G19443) (set! G19569@G19449@G19444 G19449@G19444) (set! G19568@G19447@G19442 G19447@G19442) (set! G19567@G19439@i/o-file-does-not-exist-error? G19439@i/o-file-does-not-exist-error?) (set! G19566@G19437@make-i/o-file-does-not-exist-error G19437@make-i/o-file-does-not-exist-error) (set! G19565@G19435@G19420 G19435@G19420) (set! G19564@G19430@G19422 G19430@G19422) (set! G19563@G19428@G19423 G19428@G19423) (set! G19562@G19426@G19421 G19426@G19421) (set! G19561@G19419@i/o-file-already-exists-error? G19419@i/o-file-already-exists-error?) (set! G19560@G19417@make-i/o-file-already-exists-error G19417@make-i/o-file-already-exists-error) (set! G19559@G19415@G19400 G19415@G19400) (set! G19558@G19410@G19402 G19410@G19402) (set! G19557@G19408@G19403 G19408@G19403) (set! G19556@G19406@G19401 G19406@G19401) (set! G19555@G19399@i/o-file-is-read-only-error? G19399@i/o-file-is-read-only-error?) (set! G19554@G19397@make-i/o-file-is-read-only-error G19397@make-i/o-file-is-read-only-error) (set! G19553@G19395@G19380 G19395@G19380) (set! G19552@G19390@G19382 G19390@G19382) (set! G19551@G19388@G19383 G19388@G19383) (set! G19550@G19386@G19381 G19386@G19381) (set! G19549@G19379@i/o-file-protection-error? G19379@i/o-file-protection-error?) (set! G19548@G19377@make-i/o-file-protection-error G19377@make-i/o-file-protection-error) (set! G19547@G19375@G19360 G19375@G19360) (set! G19546@G19370@G19362 G19370@G19362) (set! G19545@G19368@G19363 G19368@G19363) (set! G19544@G19366@G19361 G19366@G19361) (set! G19543@G19359@i/o-error-filename G19359@i/o-error-filename) (set! G19542@G19357@i/o-filename-error? G19357@i/o-filename-error?) (set! G19541@G19355@G19335 G19355@G19335) (set! G19540@G19353@make-i/o-filename-error G19353@make-i/o-filename-error) (set! G19539@G19351@G19336 G19351@G19336) (set! G19538@G19346@G19338 G19346@G19338) (set! G19537@G19344@G19339 G19344@G19339) (set! G19536@G19342@G19337 G19342@G19337) (set! G19535@G19334@i/o-error-position G19334@i/o-error-position) (set! G19534@G19332@i/o-invalid-position-error? G19332@i/o-invalid-position-error?) (set! G19533@G19330@G19310 G19330@G19310) (set! G19532@G19328@make-i/o-invalid-position-error G19328@make-i/o-invalid-position-error) (set! G19531@G19326@G19311 G19326@G19311) (set! G19530@G19321@G19313 G19321@G19313) (set! G19529@G19319@G19314 G19319@G19314) (set! G19528@G19317@G19312 G19317@G19312) (set! G19527@G19309@i/o-write-error? G19309@i/o-write-error?) (set! G19526@G19307@make-i/o-write-error G19307@make-i/o-write-error) (set! G19525@G19305@G19290 G19305@G19290) (set! G19524@G19300@G19292 G19300@G19292) (set! G19523@G19298@G19293 G19298@G19293) (set! G19522@G19296@G19291 G19296@G19291) (set! G19521@G19289@i/o-read-error? G19289@i/o-read-error?) (set! G19520@G19287@make-i/o-read-error G19287@make-i/o-read-error) (set! G19519@G19285@G19270 G19285@G19270) (set! G19518@G19280@G19272 G19280@G19272) (set! G19517@G19278@G19273 G19278@G19273) (set! G19516@G19276@G19271 G19276@G19271) (set! G19515@G19269@i/o-error? G19269@i/o-error?) (set! G19514@G19267@make-i/o-error G19267@make-i/o-error) (set! G19513@G19265@G19250 G19265@G19250) (set! G19512@G19260@G19252 G19260@G19252) (set! G19511@G19258@G19253 G19258@G19253) (set! G19510@G19256@G19251 G19256@G19251)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G10552@G10462@current-primitive-locations (lambda (G20552@x) ((lambda (G20554@t) (if G20554@t (cdr G20554@t) '#f)) (assq G20552@x '((syntax-error . G18833@G12446@syntax-error) (syntax-dispatch . G18730@G12219@syntax-dispatch) (load . G19740@G19604@load) (interaction-environment . G18842@G12464@interaction-environment) (make-variable-transformer . G18666@G11705@make-variable-transformer) (identifier? . G18837@G12454@identifier?) (generate-temporaries . G18829@G12438@generate-temporaries) (free-identifier=? . G18830@G12440@free-identifier=?) (syntax->datum . G18839@G12458@syntax->datum) (datum->syntax . G18838@G12456@datum->syntax) (bound-identifier=? . G18831@G12442@bound-identifier=?) (make-i/o-write-error . G19526@G19307@make-i/o-write-error) (make-i/o-read-error . G19520@G19287@make-i/o-read-error) (make-i/o-port-error . G19572@G19458@make-i/o-port-error) (make-i/o-invalid-position-error . G19532@G19328@make-i/o-invalid-position-error) (make-i/o-filename-error . G19540@G19353@make-i/o-filename-error) (make-i/o-file-protection-error . G19548@G19377@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G19554@G19397@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G19566@G19437@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G19560@G19417@make-i/o-file-already-exists-error) (make-i/o-error . G19514@G19267@make-i/o-error) (make-i/o-encoding-error . G19586@G19503@make-i/o-encoding-error) (make-i/o-decoding-error . G19580@G19482@make-i/o-decoding-error) (i/o-write-error? . G19527@G19309@i/o-write-error?) (i/o-read-error? . G19521@G19289@i/o-read-error?) (i/o-port-error? . G19574@G19462@i/o-port-error?) (i/o-invalid-position-error? . G19534@G19332@i/o-invalid-position-error?) (i/o-filename-error? . G19542@G19357@i/o-filename-error?) (i/o-file-protection-error? . G19549@G19379@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G19555@G19399@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G19567@G19439@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G19561@G19419@i/o-file-already-exists-error?) (i/o-error? . G19515@G19269@i/o-error?) (i/o-error-port . G19575@G19464@i/o-error-port) (i/o-error-filename . G19543@G19359@i/o-error-filename) (i/o-encoding-error? . G19588@G19507@i/o-encoding-error?) (i/o-encoding-error-char . G19589@G19509@i/o-encoding-error-char) (i/o-decoding-error? . G19581@G19484@i/o-decoding-error?) (scheme-report-environment . G18820@G12420@scheme-report-environment) (null-environment . G18819@G12418@null-environment) (command-line . G19737@G19598@command-line) (eval . G18822@G12424@eval) (environment . G18818@G12416@environment) (who-condition? . G19213@G19041@who-condition?) (warning? . G19174@G18913@warning?) (violation? . G19192@G18973@violation?) (undefined-violation? . G19248@G19153@undefined-violation?) (syntax-violation? . G19240@G19129@syntax-violation?) (syntax-violation-subform . G19242@G19133@syntax-violation-subform) (syntax-violation-form . G19241@G19131@syntax-violation-form) (syntax-violation . G18836@G12452@syntax-violation) (serious-condition? . G19180@G18933@serious-condition?) (non-continuable-violation? . G19220@G19063@non-continuable-violation?) (message-condition? . G19167@G18891@message-condition?) (make-who-condition . G19211@G19037@make-who-condition) (make-warning . G19173@G18911@make-warning) (make-violation . G19191@G18971@make-violation) (make-undefined-violation . G19247@G19151@make-undefined-violation) (make-syntax-violation . G19237@G19123@make-syntax-violation) (make-serious-condition . G19179@G18931@make-serious-condition) (make-non-continuable-violation . G19219@G19061@make-non-continuable-violation) (make-message-condition . G19165@G18887@make-message-condition) (make-lexical-violation . G19231@G19101@make-lexical-violation) (make-irritants-condition . G19203@G19012@make-irritants-condition) (make-implementation-restriction-violation . G19225@G19081@make-implementation-restriction-violation) (make-error . G19185@G18951@make-error) (make-assertion-violation . G19197@G18991@make-assertion-violation) (lexical-violation? . G19232@G19103@lexical-violation?) (irritants-condition? . G19205@G19016@irritants-condition?) (implementation-restriction-violation? . G19226@G19083@implementation-restriction-violation?) (error? . G19186@G18953@error?) (condition-who . G19214@G19043@condition-who) (condition-message . G19168@G18893@condition-message) (condition-irritants . G19206@G19018@condition-irritants) (assertion-violation? . G19198@G18993@assertion-violation?)))))) (G11125@G10763@install-library 'G20508 '(ikarus interaction) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20509 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G19797) (unquote . G19796) (delay . G19789) (or . G19787) (and . G19786) (do . G19785) (cond . G19784) (let* . G19783) (let . G19782) (quasiquote . G19776) (syntax-rules . G19775) (case . G19770) (if . G19766) (letrec . G19764) (lambda . G19761) (quote . G19758) (letrec-syntax . G19756) (let-syntax . G19755) (set! . G19754) (begin . G19752) (define-syntax . G19750) (define . G19749)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20510 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G20378) (string-ci>=? . G20377) (string-ci=? . G20376) (string-ci<? . G20375) (string-ci<=? . G20374) (char-whitespace? . G20373) (char-upper-case? . G20372) (char-numeric? . G20370) (char-lower-case? . G20369) (char-upcase . G20367) (char-downcase . G20364) (char-ci>? . G20363) (char-ci>=? . G20362) (char-ci=? . G20361) (char-ci<? . G20360) (char-ci<=? . G20359) (char-alphabetic? . G20358) (call-with-output-file . G20314) (call-with-input-file . G20313) (write-char . G20312) (write . G20311) (with-output-to-file . G20310) (with-input-from-file . G20309) (read-char . G20308) (read . G20307) (peek-char . G20306) (open-output-file . G20305) (open-input-file . G20304) (newline . G20303) (display . G20302) (close-output-port . G20301) (close-input-port . G20300) (eof-object . G20298) (current-output-port . G20296) (current-input-port . G20295) (output-port? . G20294) (input-port? . G20293) (scheme-report-environment . G12419) (quotient . G20235) (null-environment . G12417) (remainder . G20234) (modulo . G20233) (inexact->exact . G20232) (force . G20231) (exact->inexact . G20230) (string-fill! . G20228) (string-set! . G20227) (set-cdr! . G20226) (set-car! . G20225) (memv . G20219) (memq . G20218) (member . G20216) (assv . G20208) (assq . G20207) (assoc . G20205) (eval . G12423) (zero? . G20008) (vector? . G20007) (vector-set! . G20006) (vector-ref . G20005) (vector-length . G20003) (vector-fill! . G20001) (vector->list . G20000) (vector . G19999) (values . G19998) (truncate . G19997) (tan . G19996) (symbol? . G19995) (symbol->string . G19993) (substring . G19992) (string? . G19991) (string>? . G19990) (string>=? . G19989) (string=? . G19988) (string<? . G19987) (string<=? . G19986) (string-ref . G19985) (string-length . G19984) (string-copy . G19982) (string-append . G19981) (string->symbol . G19980) (string->number . G19979) (string->list . G19978) (string . G19977) (sqrt . G19976) (sin . G19975) (round . G19974) (reverse . G19973) (real? . G19972) (real-part . G19970) (rationalize . G19969) (rational? . G19968) (procedure? . G19966) (positive? . G19965) (pair? . G19964) (odd? . G19963) (numerator . G19962) (number? . G19961) (number->string . G19960) (not . G19958) (negative? . G19957) (min . G19955) (max . G19954) (map . G19953) (make-vector . G19952) (make-string . G19951) (make-rectangular . G19950) (make-polar . G19949) (magnitude . G19948) (log . G19947) (list? . G19946) (list-tail . G19945) (list-ref . G19944) (list->vector . G19943) (list->string . G19942) (list . G19941) (length . G19940) (lcm . G19939) (integer? . G19938) (integer->char . G19936) (inexact? . G19934) (imag-part . G19932) (gcd . G19931) (for-each . G19930) (floor . G19929) (expt . G19927) (exp . G19926) (exact? . G19925) (even? . G19922) (eqv? . G19920) (equal? . G19919) (eq? . G19918) (dynamic-wind . G19917) (denominator . G19910) (cos . G19909) (cons . G19908) (complex? . G19907) (char? . G19906) (char>? . G19905) (char>=? . G19904) (char=? . G19903) (char<? . G19902) (char<=? . G19901) (char->integer . G19900) (ceiling . G19899) (call-with-values . G19898) (call-with-current-continuation . G19896) (cddddr . G19895) (cdddar . G19894) (cddadr . G19893) (cddaar . G19892) (cdaddr . G19891) (cdadar . G19890) (cdaadr . G19889) (cdaaar . G19888) (cadddr . G19887) (caddar . G19886) (cadadr . G19885) (cadaar . G19884) (caaddr . G19883) (caadar . G19882) (caaadr . G19881) (caaaar . G19880) (cdddr . G19879) (cddar . G19878) (cdadr . G19877) (cdaar . G19876) (caddr . G19875) (cadar . G19874) (caadr . G19873) (caaar . G19872) (cddr . G19871) (cdar . G19870) (cadr . G19869) (caar . G19868) (cdr . G19867) (car . G19866) (boolean? . G19865) (atan . G19863) (asin . G19861) (apply . G19860) (append . G19859) (angle . G19858) (acos . G19857) (abs . G19856) (/ . G19855) (* . G19854) (- . G19853) (+ . G19852) (>= . G19851) (> . G19850) (= . G19849) (<= . G19848) (< . G19847) (unquote-splicing . G19797) (unquote . G19796) (delay . G19789) (or . G19787) (and . G19786) (do . G19785) (cond . G19784) (let* . G19783) (let . G19782) (quasiquote . G19776) (syntax-rules . G19775) (case . G19770) (if . G19766) (letrec . G19764) (lambda . G19761) (quote . G19758) (letrec-syntax . G19756) (let-syntax . G19755) (set! . G19754) (begin . G19752) (define-syntax . G19750) (define . G19749)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20511 '(psyntax modules) '() '() '() '() '((module . G19751)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20512 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20513 '(rnrs) '(6) '() '() '() '((regexp? . G20444) (string-upcase . G20386) (string-titlecase . G20385) (string-normalize-nfkd . G20384) (string-normalize-nfkc . G20383) (string-normalize-nfd . G20382) (string-normalize-nfc . G20381) (string-foldcase . G20380) (string-downcase . G20379) (string-ci>? . G20378) (string-ci>=? . G20377) (string-ci=? . G20376) (string-ci<? . G20375) (string-ci<=? . G20374) (char-whitespace? . G20373) (char-upper-case? . G20372) (char-title-case? . G20371) (char-numeric? . G20370) (char-lower-case? . G20369) (char-general-category . G20368) (char-upcase . G20367) (char-titlecase . G20366) (char-foldcase . G20365) (char-downcase . G20364) (char-ci>? . G20363) (char-ci>=? . G20362) (char-ci=? . G20361) (char-ci<? . G20360) (char-ci<=? . G20359) (char-alphabetic? . G20358) (make-variable-transformer . G11704) (identifier? . G12453) (generate-temporaries . G12437) (free-identifier=? . G12439) (syntax->datum . G12457) (datum->syntax . G12455) (bound-identifier=? . G12441) (record-type-descriptor? . G20357) (record-predicate . G20356) (record-mutator . G20355) (record-constructor . G20354) (record-accessor . G20353) (make-record-type-descriptor . G20352) (make-record-constructor-descriptor . G20351) (record? . G20350) (record-type-uid . G20349) (record-type-sealed? . G20348) (record-type-parent . G20347) (record-type-opaque? . G20346) (record-type-name . G20345) (record-type-generative? . G20344) (record-type-field-names . G20343) (record-rtd . G20342) (record-field-mutable? . G20341) (delete-file . G20340) (file-exists? . G20339) (vector-sort! . G20338) (vector-sort . G20337) (list-sort . G20336) (symbol-hash . G20335) (string-ci-hash . G20334) (string-hash . G20333) (equal-hash . G20332) (hashtable-equivalence-function . G20331) (make-hashtable . G20330) (hashtable-hash-function . G20329) (make-eqv-hashtable . G20328) (make-eq-hashtable . G20327) (hashtable? . G20326) (hashtable-update! . G20325) (hashtable-size . G20324) (hashtable-set! . G20323) (hashtable-ref . G20322) (hashtable-mutable? . G20321) (hashtable-keys . G20320) (hashtable-entries . G20319) (hashtable-delete! . G20318) (hashtable-copy . G20317) (hashtable-contains? . G20316) (hashtable-clear! . G20315) (call-with-output-file . G20314) (call-with-input-file . G20313) (write-char . G20312) (write . G20311) (with-output-to-file . G20310) (with-input-from-file . G20309) (read-char . G20308) (read . G20307) (peek-char . G20306) (open-output-file . G20305) (open-input-file . G20304) (newline . G20303) (display . G20302) (close-output-port . G20301) (close-input-port . G20300) (eof-object? . G20299) (eof-object . G20298) (current-error-port . G20297) (current-output-port . G20296) (current-input-port . G20295) (output-port? . G20294) (input-port? . G20293) (utf-8-codec . G20292) (utf-16-codec . G20291) (transcoder-error-handling-mode . G20290) (transcoder-eol-style . G20289) (transcoder-codec . G20288) (transcoded-port . G20287) (textual-port? . G20286) (string->bytevector . G20285) (standard-output-port . G20284) (standard-input-port . G20283) (standard-error-port . G20282) (set-port-position! . G20281) (put-u8 . G20280) (put-string . G20279) (put-datum . G20278) (put-char . G20277) (put-bytevector . G20276) (port? . G20275) (port-transcoder . G20274) (port-position . G20273) (port-has-set-port-position!? . G20272) (port-has-port-position? . G20271) (port-eof? . G20270) (output-port-buffer-mode . G20269) (open-string-output-port . G20268) (open-string-input-port . G20267) (open-file-output-port . G20266) (open-file-input/output-port . G20265) (open-file-input-port . G20264) (open-bytevector-output-port . G20263) (open-bytevector-input-port . G20262) (native-transcoder . G20261) (native-eol-style . G20260) (make-transcoder . G20259) (latin-1-codec . G20258) (make-i/o-write-error . G19306) (make-i/o-read-error . G19286) (make-i/o-port-error . G19457) (make-i/o-invalid-position-error . G19327) (make-i/o-filename-error . G19352) (make-i/o-file-protection-error . G19376) (make-i/o-file-is-read-only-error . G19396) (make-i/o-file-does-not-exist-error . G19436) (make-i/o-file-already-exists-error . G19416) (make-i/o-error . G19266) (make-i/o-encoding-error . G19502) (make-i/o-decoding-error . G19481) (make-custom-textual-output-port . G20257) (make-custom-textual-input/output-port . G20256) (make-custom-textual-input-port . G20255) (make-custom-binary-output-port . G20254) (make-custom-binary-input/output-port . G20253) (make-custom-binary-input-port . G20252) (make-bytevector . G20251) (lookahead-u8 . G20250) (lookahead-char . G20249) (i/o-write-error? . G19308) (i/o-read-error? . G19288) (i/o-port-error? . G19461) (i/o-invalid-position-error? . G19331) (i/o-filename-error? . G19356) (i/o-file-protection-error? . G19378) (i/o-file-is-read-only-error? . G19398) (i/o-file-does-not-exist-error? . G19438) (i/o-file-already-exists-error? . G19418) (i/o-error? . G19268) (i/o-error-port . G19463) (i/o-error-filename . G19358) (i/o-encoding-error? . G19506) (i/o-encoding-error-char . G19508) (i/o-decoding-error? . G19483) (get-u8 . G20248) (get-string-n! . G20247) (get-string-n . G20246) (get-string-all . G20245) (get-line . G20244) (get-datum . G20243) (get-char . G20242) (get-bytevector-some . G20241) (get-bytevector-n! . G20240) (get-bytevector-n . G20239) (get-bytevector-all . G20238) (flush-output-port . G20237) (close-port . G20236) (exit . G20229) (command-line . G19597) (remove . G20224) (remv . G20223) (remp . G20222) (remq . G20221) (partition . G20220) (memv . G20219) (memq . G20218) (memp . G20217) (member . G20216) (exists . G20215) (for-all . G20214) (fold-right . G20213) (fold-left . G20212) (find . G20211) (filter . G20210) (cons* . G20209) (assv . G20208) (assq . G20207) (assp . G20206) (assoc . G20205) (call-with-string-output-port . G20204) (call-with-port . G20203) (call-with-bytevector-output-port . G20202) (bytevector->string . G20201) (buffer-mode? . G20200) (binary-port? . G20199) (with-exception-handler . G20198) (raise-continuable . G20197) (raise . G20196) (make-enumeration . G20195) (enum-set=? . G20194) (enum-set-universe . G20193) (enum-set-union . G20192) (enum-set-subset? . G20191) (enum-set-projection . G20190) (enum-set-member? . G20189) (enum-set-intersection . G20188) (enum-set-indexer . G20187) (enum-set-difference . G20186) (enum-set-constructor . G20185) (enum-set-complement . G20184) (enum-set->list . G20183) (who-condition? . G19040) (warning? . G18912) (violation? . G18972) (undefined-violation? . G19152) (syntax-violation? . G19128) (syntax-violation-subform . G19132) (syntax-violation-form . G19130) (syntax-violation . G12451) (simple-conditions . G20182) (serious-condition? . G18932) (non-continuable-violation? . G19062) (message-condition? . G18890) (make-who-condition . G19036) (make-warning . G18910) (make-violation . G18970) (make-undefined-violation . G19150) (make-syntax-violation . G19122) (make-serious-condition . G18930) (make-non-continuable-violation . G19060) (make-message-condition . G18886) (make-lexical-violation . G19100) (make-irritants-condition . G19011) (make-implementation-restriction-violation . G19080) (make-error . G18950) (make-assertion-violation . G18990) (lexical-violation? . G19102) (irritants-condition? . G19015) (implementation-restriction-violation? . G19082) (error? . G18952) (condition-who . G19042) (condition-predicate . G20181) (condition-message . G18892) (condition-irritants . G19017) (condition-accessor . G20180) (condition . G20179) (assertion-violation? . G18992) (condition? . G20178) (utf32->string . G20177) (utf16->string . G20176) (utf8->string . G20175) (uint-list->bytevector . G20174) (u8-list->bytevector . G20173) (string->utf8 . G20172) (string->utf32 . G20171) (string->utf16 . G20170) (sint-list->bytevector . G20169) (native-endianness . G20168) (bytevector? . G20167) (bytevector=? . G20166) (bytevector-uint-set! . G20165) (bytevector-uint-ref . G20164) (bytevector-u8-set! . G20163) (bytevector-u8-ref . G20162) (bytevector-u64-set! . G20161) (bytevector-u64-ref . G20160) (bytevector-u64-native-set! . G20159) (bytevector-u64-native-ref . G20158) (bytevector-u32-set! . G20157) (bytevector-u32-ref . G20156) (bytevector-u32-native-set! . G20155) (bytevector-u32-native-ref . G20154) (bytevector-u16-set! . G20153) (bytevector-u16-ref . G20152) (bytevector-u16-native-set! . G20151) (bytevector-u16-native-ref . G20150) (bytevector-sint-set! . G20149) (bytevector-sint-ref . G20148) (bytevector-s8-set! . G20147) (bytevector-s8-ref . G20146) (bytevector-s64-set! . G20145) (bytevector-s64-ref . G20144) (bytevector-s64-native-set! . G20143) (bytevector-s64-native-ref . G20142) (bytevector-s32-set! . G20141) (bytevector-s32-ref . G20140) (bytevector-s32-native-set! . G20139) (bytevector-s32-native-ref . G20138) (bytevector-s16-set! . G20137) (bytevector-s16-ref . G20136) (bytevector-s16-native-set! . G20135) (bytevector-s16-native-ref . G20134) (bytevector-length . G20133) (bytevector-ieee-single-ref . G20132) (bytevector-ieee-single-native-set! . G20131) (bytevector-ieee-single-native-ref . G20130) (bytevector-ieee-double-ref . G20129) (bytevector-ieee-double-native-set! . G20128) (bytevector-ieee-double-native-ref . G20127) (bytevector-fill! . G20126) (bytevector-copy! . G20125) (bytevector-copy . G20124) (bytevector->uint-list . G20123) (bytevector->u8-list . G20122) (bytevector->sint-list . G20121) (no-nans-violation? . G20120) (no-infinities-violation? . G20119) (make-no-nans-violation . G20118) (make-no-infinities-violation . G20117) (real->flonum . G20116) (flzero? . G20115) (fltruncate . G20114) (fltan . G20113) (flsqrt . G20112) (flsin . G20111) (flround . G20110) (flpositive? . G20109) (flonum? . G20108) (flodd? . G20107) (flnumerator . G20106) (flnegative? . G20105) (flnan? . G20104) (flmod0 . G20103) (flmod . G20102) (flmin . G20101) (flmax . G20100) (fllog . G20099) (flinteger? . G20098) (flinfinite? . G20097) (flfloor . G20096) (flfinite? . G20095) (flexpt . G20094) (flexp . G20093) (fleven? . G20092) (fldiv0-and-mod0 . G20091) (fldiv0 . G20090) (fldiv-and-mod . G20089) (fldiv . G20088) (fldenominator . G20087) (flcos . G20086) (flceiling . G20085) (flatan . G20084) (flasin . G20083) (flacos . G20082) (flabs . G20081) (fl>? . G20080) (fl>=? . G20079) (fl=? . G20078) (fl<? . G20077) (fl<=? . G20076) (fl/ . G20075) (fl- . G20074) (fl+ . G20073) (fl* . G20072) (fixnum->flonum . G20071) (fxzero? . G20070) (fxxor . G20069) (fxrotate-bit-field . G20068) (fxreverse-bit-field . G20067) (fxpositive? . G20066) (fxodd? . G20065) (fxnot . G20064) (fxnegative? . G20063) (fxmod0 . G20062) (fxmod . G20061) (fxmin . G20060) (fxmax . G20059) (fxlength . G20058) (fxior . G20057) (fxif . G20056) (fxfirst-bit-set . G20055) (fxeven? . G20054) (fxdiv0-and-mod0 . G20053) (fxdiv0 . G20052) (fxdiv-and-mod . G20051) (fxdiv . G20050) (fxcopy-bit-field . G20049) (fxcopy-bit . G20048) (fxbit-set? . G20047) (fxbit-field . G20046) (fxbit-count . G20045) (fxarithmetic-shift-right . G20044) (fxarithmetic-shift-left . G20043) (fxarithmetic-shift . G20042) (fxand . G20041) (fx>? . G20040) (fx>=? . G20039) (fx=? . G20038) (fx<? . G20037) (fx<=? . G20036) (fx-/carry . G20035) (fx- . G20034) (fx+/carry . G20033) (fx+ . G20032) (fx*/carry . G20031) (fx* . G20030) (greatest-fixnum . G20029) (least-fixnum . G20028) (fixnum-width . G20027) (fixnum? . G20026) (bitwise-rotate-bit-field . G20025) (bitwise-reverse-bit-field . G20024) (bitwise-length . G20023) (bitwise-if . G20022) (bitwise-first-bit-set . G20021) (bitwise-copy-bit-field . G20020) (bitwise-copy-bit . G20019) (bitwise-bit-set? . G20018) (bitwise-bit-field . G20017) (bitwise-bit-count . G20016) (bitwise-xor . G20015) (bitwise-ior . G20014) (bitwise-and . G20013) (bitwise-not . G20012) (bitwise-arithmetic-shift-right . G20011) (bitwise-arithmetic-shift-left . G20010) (bitwise-arithmetic-shift . G20009) (zero? . G20008) (vector? . G20007) (vector-set! . G20006) (vector-ref . G20005) (vector-map . G20004) (vector-length . G20003) (vector-for-each . G20002) (vector-fill! . G20001) (vector->list . G20000) (vector . G19999) (values . G19998) (truncate . G19997) (tan . G19996) (symbol? . G19995) (symbol=? . G19994) (symbol->string . G19993) (substring . G19992) (string? . G19991) (string>? . G19990) (string>=? . G19989) (string=? . G19988) (string<? . G19987) (string<=? . G19986) (string-ref . G19985) (string-length . G19984) (string-for-each . G19983) (string-copy . G19982) (string-append . G19981) (string->symbol . G19980) (string->number . G19979) (string->list . G19978) (string . G19977) (sqrt . G19976) (sin . G19975) (round . G19974) (reverse . G19973) (real? . G19972) (real-valued? . G19971) (real-part . G19970) (rationalize . G19969) (rational? . G19968) (rational-valued? . G19967) (procedure? . G19966) (positive? . G19965) (pair? . G19964) (odd? . G19963) (numerator . G19962) (number? . G19961) (number->string . G19960) (null? . G19959) (not . G19958) (negative? . G19957) (nan? . G19956) (min . G19955) (max . G19954) (map . G19953) (make-vector . G19952) (make-string . G19951) (make-rectangular . G19950) (make-polar . G19949) (magnitude . G19948) (log . G19947) (list? . G19946) (list-tail . G19945) (list-ref . G19944) (list->vector . G19943) (list->string . G19942) (list . G19941) (length . G19940) (lcm . G19939) (integer? . G19938) (integer-valued? . G19937) (integer->char . G19936) (infinite? . G19935) (inexact? . G19934) (inexact . G19933) (imag-part . G19932) (gcd . G19931) (for-each . G19930) (floor . G19929) (finite? . G19928) (expt . G19927) (exp . G19926) (exact? . G19925) (exact-integer-sqrt . G19924) (exact . G19923) (even? . G19922) (error . G19921) (eqv? . G19920) (equal? . G19919) (eq? . G19918) (dynamic-wind . G19917) (div0-and-mod0 . G19916) (mod0 . G19915) (div0 . G19914) (div-and-mod . G19913) (mod . G19912) (div . G19911) (denominator . G19910) (cos . G19909) (cons . G19908) (complex? . G19907) (char? . G19906) (char>? . G19905) (char>=? . G19904) (char=? . G19903) (char<? . G19902) (char<=? . G19901) (char->integer . G19900) (ceiling . G19899) (call-with-values . G19898) (call/cc . G19897) (call-with-current-continuation . G19896) (cddddr . G19895) (cdddar . G19894) (cddadr . G19893) (cddaar . G19892) (cdaddr . G19891) (cdadar . G19890) (cdaadr . G19889) (cdaaar . G19888) (cadddr . G19887) (caddar . G19886) (cadadr . G19885) (cadaar . G19884) (caaddr . G19883) (caadar . G19882) (caaadr . G19881) (caaaar . G19880) (cdddr . G19879) (cddar . G19878) (cdadr . G19877) (cdaar . G19876) (caddr . G19875) (cadar . G19874) (caadr . G19873) (caaar . G19872) (cddr . G19871) (cdar . G19870) (cadr . G19869) (caar . G19868) (cdr . G19867) (car . G19866) (boolean? . G19865) (boolean=? . G19864) (atan . G19863) (assertion-violation . G19862) (asin . G19861) (apply . G19860) (append . G19859) (angle . G19858) (acos . G19857) (abs . G19856) (/ . G19855) (* . G19854) (- . G19853) (+ . G19852) (>= . G19851) (> . G19850) (= . G19849) (<= . G19848) (< . G19847) (&no-nans . G19846) (&no-infinities . G19845) (&i/o-encoding . G19844) (&i/o-decoding . G19843) (&i/o-port . G19842) (&i/o-file-does-not-exist . G19841) (&i/o-file-already-exists . G19840) (&i/o-file-is-read-only . G19839) (&i/o-file-protection . G19838) (&i/o-filename . G19837) (&i/o-invalid-position . G19836) (&i/o-write . G19835) (&i/o-read . G19834) (&i/o . G19833) (&undefined . G19832) (&syntax . G19831) (&lexical . G19830) (&implementation-restriction . G19829) (&non-continuable . G19828) (&who . G19827) (&irritants . G19826) (&assertion . G19825) (&violation . G19824) (&error . G19823) (&serious . G19822) (&warning . G19821) (&message . G19820) (&condition . G19819) (define-condition-type . G19818) (define-enumeration . G19817) (define-record-type . G19816) (parent-rtd . G19815) (nongenerative . G19814) (opaque . G19813) (sealed . G19812) (protocol . G19811) (parent . G19810) (immutable . G19809) (mutable . G19808) (fields . G19807) (error-handling-mode . G19806) (file-options . G19805) (buffer-mode . G19804) (eol-style . G19803) (guard . G19802) (unsyntax-splicing . G19799) (unsyntax . G19798) (unquote-splicing . G19797) (unquote . G19796) (_ . G19795) (else . G19794) (=> . G19793) (... . G19792) (assert . G19791) (endianness . G19790) (or . G19787) (and . G19786) (do . G19785) (cond . G19784) (let* . G19783) (let . G19782) (let*-values . G19781) (let-values . G19780) (identifier-syntax . G19779) (with-syntax . G19778) (quasisyntax . G19777) (quasiquote . G19776) (syntax-rules . G19775) (record-constructor-descriptor . G19772) (record-type-descriptor . G19771) (case . G19770) (unless . G19768) (when . G19767) (if . G19766) (letrec* . G19765) (letrec . G19764) (case-lambda . G19762) (lambda . G19761) (syntax . G19760) (syntax-case . G19759) (quote . G19758) (letrec-syntax . G19756) (let-syntax . G19755) (set! . G19754) (begin . G19752) (define-syntax . G19750) (define . G19749)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20514 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G12419) (quotient . G20235) (null-environment . G12417) (remainder . G20234) (modulo . G20233) (inexact->exact . G20232) (force . G20231) (exact->inexact . G20230) (delay . G19789)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20515 '(rnrs control) '(6) '() '() '() '((do . G19785) (unless . G19768) (when . G19767) (case-lambda . G19762)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20516 '(rnrs eval) '(6) '() '() '() '((eval . G12423) (environment . G12415)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20517 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G20226) (set-car! . G20225)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20518 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G20228) (string-set! . G20227)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20519 '(rnrs programs) '(6) '() '() '() '((exit . G20229) (command-line . G19597)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20520 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G11704) (identifier? . G12453) (generate-temporaries . G12437) (free-identifier=? . G12439) (syntax->datum . G12457) (datum->syntax . G12455) (bound-identifier=? . G12441) (syntax-violation . G12451) (unsyntax-splicing . G19799) (unsyntax . G19798) (_ . G19795) (... . G19792) (with-syntax . G19778) (quasisyntax . G19777) (syntax . G19760) (syntax-case . G19759)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20521 '(rnrs files) '(6) '() '() '() '((delete-file . G20340) (file-exists? . G20339) (make-i/o-write-error . G19306) (make-i/o-read-error . G19286) (make-i/o-port-error . G19457) (make-i/o-invalid-position-error . G19327) (make-i/o-filename-error . G19352) (make-i/o-file-protection-error . G19376) (make-i/o-file-is-read-only-error . G19396) (make-i/o-file-does-not-exist-error . G19436) (make-i/o-file-already-exists-error . G19416) (make-i/o-error . G19266) (i/o-write-error? . G19308) (i/o-read-error? . G19288) (i/o-port-error? . G19461) (i/o-invalid-position-error? . G19331) (i/o-filename-error? . G19356) (i/o-file-protection-error? . G19378) (i/o-file-is-read-only-error? . G19398) (i/o-file-does-not-exist-error? . G19438) (i/o-file-already-exists-error? . G19418) (i/o-error? . G19268) (i/o-error-port . G19463) (i/o-error-filename . G19358) (&i/o-port . G19842) (&i/o-file-does-not-exist . G19841) (&i/o-file-already-exists . G19840) (&i/o-file-is-read-only . G19839) (&i/o-file-protection . G19838) (&i/o-filename . G19837) (&i/o-invalid-position . G19836) (&i/o-write . G19835) (&i/o-read . G19834) (&i/o . G19833)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20522 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G20338) (vector-sort . G20337) (list-sort . G20336)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20523 '(rnrs base) '(6) '() '() '() '((zero? . G20008) (vector? . G20007) (vector-set! . G20006) (vector-ref . G20005) (vector-map . G20004) (vector-length . G20003) (vector-for-each . G20002) (vector-fill! . G20001) (vector->list . G20000) (vector . G19999) (values . G19998) (truncate . G19997) (tan . G19996) (symbol? . G19995) (symbol=? . G19994) (symbol->string . G19993) (substring . G19992) (string? . G19991) (string>? . G19990) (string>=? . G19989) (string=? . G19988) (string<? . G19987) (string<=? . G19986) (string-ref . G19985) (string-length . G19984) (string-for-each . G19983) (string-copy . G19982) (string-append . G19981) (string->symbol . G19980) (string->number . G19979) (string->list . G19978) (string . G19977) (sqrt . G19976) (sin . G19975) (round . G19974) (reverse . G19973) (real? . G19972) (real-valued? . G19971) (real-part . G19970) (rationalize . G19969) (rational? . G19968) (rational-valued? . G19967) (procedure? . G19966) (positive? . G19965) (pair? . G19964) (odd? . G19963) (numerator . G19962) (number? . G19961) (number->string . G19960) (null? . G19959) (not . G19958) (negative? . G19957) (nan? . G19956) (min . G19955) (max . G19954) (map . G19953) (make-vector . G19952) (make-string . G19951) (make-rectangular . G19950) (make-polar . G19949) (magnitude . G19948) (log . G19947) (list? . G19946) (list-tail . G19945) (list-ref . G19944) (list->vector . G19943) (list->string . G19942) (list . G19941) (length . G19940) (lcm . G19939) (integer? . G19938) (integer-valued? . G19937) (integer->char . G19936) (infinite? . G19935) (inexact? . G19934) (inexact . G19933) (imag-part . G19932) (gcd . G19931) (for-each . G19930) (floor . G19929) (finite? . G19928) (expt . G19927) (exp . G19926) (exact? . G19925) (exact-integer-sqrt . G19924) (exact . G19923) (even? . G19922) (error . G19921) (eqv? . G19920) (equal? . G19919) (eq? . G19918) (dynamic-wind . G19917) (div0-and-mod0 . G19916) (mod0 . G19915) (div0 . G19914) (div-and-mod . G19913) (mod . G19912) (div . G19911) (denominator . G19910) (cos . G19909) (cons . G19908) (complex? . G19907) (char? . G19906) (char>? . G19905) (char>=? . G19904) (char=? . G19903) (char<? . G19902) (char<=? . G19901) (char->integer . G19900) (ceiling . G19899) (call-with-values . G19898) (call/cc . G19897) (call-with-current-continuation . G19896) (cddddr . G19895) (cdddar . G19894) (cddadr . G19893) (cddaar . G19892) (cdaddr . G19891) (cdadar . G19890) (cdaadr . G19889) (cdaaar . G19888) (cadddr . G19887) (caddar . G19886) (cadadr . G19885) (cadaar . G19884) (caaddr . G19883) (caadar . G19882) (caaadr . G19881) (caaaar . G19880) (cdddr . G19879) (cddar . G19878) (cdadr . G19877) (cdaar . G19876) (caddr . G19875) (cadar . G19874) (caadr . G19873) (caaar . G19872) (cddr . G19871) (cdar . G19870) (cadr . G19869) (caar . G19868) (cdr . G19867) (car . G19866) (boolean? . G19865) (boolean=? . G19864) (atan . G19863) (assertion-violation . G19862) (asin . G19861) (apply . G19860) (append . G19859) (angle . G19858) (acos . G19857) (abs . G19856) (/ . G19855) (* . G19854) (- . G19853) (+ . G19852) (>= . G19851) (> . G19850) (= . G19849) (<= . G19848) (< . G19847) (unquote-splicing . G19797) (unquote . G19796) (_ . G19795) (else . G19794) (=> . G19793) (... . G19792) (assert . G19791) (or . G19787) (and . G19786) (cond . G19784) (let* . G19783) (let . G19782) (let*-values . G19781) (let-values . G19780) (identifier-syntax . G19779) (quasiquote . G19776) (syntax-rules . G19775) (case . G19770) (if . G19766) (letrec* . G19765) (letrec . G19764) (lambda . G19761) (quote . G19758) (letrec-syntax . G19756) (let-syntax . G19755) (set! . G19754) (begin . G19752) (define-syntax . G19750) (define . G19749)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20524 '(rnrs lists) '(6) '() '() '() '((remove . G20224) (remv . G20223) (remp . G20222) (remq . G20221) (partition . G20220) (memv . G20219) (memq . G20218) (memp . G20217) (member . G20216) (exists . G20215) (for-all . G20214) (fold-right . G20213) (fold-left . G20212) (find . G20211) (filter . G20210) (cons* . G20209) (assv . G20208) (assq . G20207) (assp . G20206) (assoc . G20205)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20525 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G20314) (call-with-input-file . G20313) (write-char . G20312) (write . G20311) (with-output-to-file . G20310) (with-input-from-file . G20309) (read-char . G20308) (read . G20307) (peek-char . G20306) (open-output-file . G20305) (open-input-file . G20304) (newline . G20303) (display . G20302) (close-output-port . G20301) (close-input-port . G20300) (eof-object? . G20299) (eof-object . G20298) (current-error-port . G20297) (current-output-port . G20296) (current-input-port . G20295) (output-port? . G20294) (input-port? . G20293) (make-i/o-write-error . G19306) (make-i/o-read-error . G19286) (make-i/o-port-error . G19457) (make-i/o-invalid-position-error . G19327) (make-i/o-filename-error . G19352) (make-i/o-file-protection-error . G19376) (make-i/o-file-is-read-only-error . G19396) (make-i/o-file-does-not-exist-error . G19436) (make-i/o-file-already-exists-error . G19416) (make-i/o-error . G19266) (i/o-write-error? . G19308) (i/o-read-error? . G19288) (i/o-port-error? . G19461) (i/o-invalid-position-error? . G19331) (i/o-filename-error? . G19356) (i/o-file-protection-error? . G19378) (i/o-file-is-read-only-error? . G19398) (i/o-file-does-not-exist-error? . G19438) (i/o-file-already-exists-error? . G19418) (i/o-error? . G19268) (i/o-error-port . G19463) (i/o-error-filename . G19358) (&i/o-port . G19842) (&i/o-file-does-not-exist . G19841) (&i/o-file-already-exists . G19840) (&i/o-file-is-read-only . G19839) (&i/o-file-protection . G19838) (&i/o-filename . G19837) (&i/o-invalid-position . G19836) (&i/o-write . G19835) (&i/o-read . G19834) (&i/o . G19833)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20526 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G20251) (utf32->string . G20177) (utf16->string . G20176) (utf8->string . G20175) (uint-list->bytevector . G20174) (u8-list->bytevector . G20173) (string->utf8 . G20172) (string->utf32 . G20171) (string->utf16 . G20170) (sint-list->bytevector . G20169) (native-endianness . G20168) (bytevector? . G20167) (bytevector=? . G20166) (bytevector-uint-set! . G20165) (bytevector-uint-ref . G20164) (bytevector-u8-set! . G20163) (bytevector-u8-ref . G20162) (bytevector-u64-set! . G20161) (bytevector-u64-ref . G20160) (bytevector-u64-native-set! . G20159) (bytevector-u64-native-ref . G20158) (bytevector-u32-set! . G20157) (bytevector-u32-ref . G20156) (bytevector-u32-native-set! . G20155) (bytevector-u32-native-ref . G20154) (bytevector-u16-set! . G20153) (bytevector-u16-ref . G20152) (bytevector-u16-native-set! . G20151) (bytevector-u16-native-ref . G20150) (bytevector-sint-set! . G20149) (bytevector-sint-ref . G20148) (bytevector-s8-set! . G20147) (bytevector-s8-ref . G20146) (bytevector-s64-set! . G20145) (bytevector-s64-ref . G20144) (bytevector-s64-native-set! . G20143) (bytevector-s64-native-ref . G20142) (bytevector-s32-set! . G20141) (bytevector-s32-ref . G20140) (bytevector-s32-native-set! . G20139) (bytevector-s32-native-ref . G20138) (bytevector-s16-set! . G20137) (bytevector-s16-ref . G20136) (bytevector-s16-native-set! . G20135) (bytevector-s16-native-ref . G20134) (bytevector-length . G20133) (bytevector-ieee-single-ref . G20132) (bytevector-ieee-single-native-set! . G20131) (bytevector-ieee-single-native-ref . G20130) (bytevector-ieee-double-ref . G20129) (bytevector-ieee-double-native-set! . G20128) (bytevector-ieee-double-native-ref . G20127) (bytevector-fill! . G20126) (bytevector-copy! . G20125) (bytevector-copy . G20124) (bytevector->uint-list . G20123) (bytevector->u8-list . G20122) (bytevector->sint-list . G20121) (endianness . G19790)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20527 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G20386) (string-titlecase . G20385) (string-normalize-nfkd . G20384) (string-normalize-nfkc . G20383) (string-normalize-nfd . G20382) (string-normalize-nfc . G20381) (string-foldcase . G20380) (string-downcase . G20379) (string-ci>? . G20378) (string-ci>=? . G20377) (string-ci=? . G20376) (string-ci<? . G20375) (string-ci<=? . G20374) (char-whitespace? . G20373) (char-upper-case? . G20372) (char-title-case? . G20371) (char-numeric? . G20370) (char-lower-case? . G20369) (char-general-category . G20368) (char-upcase . G20367) (char-titlecase . G20366) (char-foldcase . G20365) (char-downcase . G20364) (char-ci>? . G20363) (char-ci>=? . G20362) (char-ci=? . G20361) (char-ci<? . G20360) (char-ci<=? . G20359) (char-alphabetic? . G20358)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20528 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G20198) (raise-continuable . G20197) (raise . G20196) (guard . G19802) (else . G19794) (=> . G19793)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20529 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G20025) (bitwise-reverse-bit-field . G20024) (bitwise-length . G20023) (bitwise-if . G20022) (bitwise-first-bit-set . G20021) (bitwise-copy-bit-field . G20020) (bitwise-copy-bit . G20019) (bitwise-bit-set? . G20018) (bitwise-bit-field . G20017) (bitwise-bit-count . G20016) (bitwise-xor . G20015) (bitwise-ior . G20014) (bitwise-and . G20013) (bitwise-not . G20012) (bitwise-arithmetic-shift-right . G20011) (bitwise-arithmetic-shift-left . G20010) (bitwise-arithmetic-shift . G20009)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20530 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G20070) (fxxor . G20069) (fxrotate-bit-field . G20068) (fxreverse-bit-field . G20067) (fxpositive? . G20066) (fxodd? . G20065) (fxnot . G20064) (fxnegative? . G20063) (fxmod0 . G20062) (fxmod . G20061) (fxmin . G20060) (fxmax . G20059) (fxlength . G20058) (fxior . G20057) (fxif . G20056) (fxfirst-bit-set . G20055) (fxeven? . G20054) (fxdiv0-and-mod0 . G20053) (fxdiv0 . G20052) (fxdiv-and-mod . G20051) (fxdiv . G20050) (fxcopy-bit-field . G20049) (fxcopy-bit . G20048) (fxbit-set? . G20047) (fxbit-field . G20046) (fxbit-count . G20045) (fxarithmetic-shift-right . G20044) (fxarithmetic-shift-left . G20043) (fxarithmetic-shift . G20042) (fxand . G20041) (fx>? . G20040) (fx>=? . G20039) (fx=? . G20038) (fx<? . G20037) (fx<=? . G20036) (fx-/carry . G20035) (fx- . G20034) (fx+/carry . G20033) (fx+ . G20032) (fx*/carry . G20031) (fx* . G20030) (greatest-fixnum . G20029) (least-fixnum . G20028) (fixnum-width . G20027) (fixnum? . G20026)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20531 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G20120) (no-infinities-violation? . G20119) (make-no-nans-violation . G20118) (make-no-infinities-violation . G20117) (real->flonum . G20116) (flzero? . G20115) (fltruncate . G20114) (fltan . G20113) (flsqrt . G20112) (flsin . G20111) (flround . G20110) (flpositive? . G20109) (flonum? . G20108) (flodd? . G20107) (flnumerator . G20106) (flnegative? . G20105) (flnan? . G20104) (flmod0 . G20103) (flmod . G20102) (flmin . G20101) (flmax . G20100) (fllog . G20099) (flinteger? . G20098) (flinfinite? . G20097) (flfloor . G20096) (flfinite? . G20095) (flexpt . G20094) (flexp . G20093) (fleven? . G20092) (fldiv0-and-mod0 . G20091) (fldiv0 . G20090) (fldiv-and-mod . G20089) (fldiv . G20088) (fldenominator . G20087) (flcos . G20086) (flceiling . G20085) (flatan . G20084) (flasin . G20083) (flacos . G20082) (flabs . G20081) (fl>? . G20080) (fl>=? . G20079) (fl=? . G20078) (fl<? . G20077) (fl<=? . G20076) (fl/ . G20075) (fl- . G20074) (fl+ . G20073) (fl* . G20072) (fixnum->flonum . G20071) (&no-nans . G19846) (&no-infinities . G19845)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20532 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G20335) (string-ci-hash . G20334) (string-hash . G20333) (equal-hash . G20332) (hashtable-equivalence-function . G20331) (make-hashtable . G20330) (hashtable-hash-function . G20329) (make-eqv-hashtable . G20328) (make-eq-hashtable . G20327) (hashtable? . G20326) (hashtable-update! . G20325) (hashtable-size . G20324) (hashtable-set! . G20323) (hashtable-ref . G20322) (hashtable-mutable? . G20321) (hashtable-keys . G20320) (hashtable-entries . G20319) (hashtable-delete! . G20318) (hashtable-copy . G20317) (hashtable-contains? . G20316) (hashtable-clear! . G20315)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20533 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G20299) (eof-object . G20298) (current-error-port . G20297) (current-output-port . G20296) (current-input-port . G20295) (output-port? . G20294) (input-port? . G20293) (utf-8-codec . G20292) (utf-16-codec . G20291) (transcoder-error-handling-mode . G20290) (transcoder-eol-style . G20289) (transcoder-codec . G20288) (transcoded-port . G20287) (textual-port? . G20286) (string->bytevector . G20285) (standard-output-port . G20284) (standard-input-port . G20283) (standard-error-port . G20282) (set-port-position! . G20281) (put-u8 . G20280) (put-string . G20279) (put-datum . G20278) (put-char . G20277) (put-bytevector . G20276) (port? . G20275) (port-transcoder . G20274) (port-position . G20273) (port-has-set-port-position!? . G20272) (port-has-port-position? . G20271) (port-eof? . G20270) (output-port-buffer-mode . G20269) (open-string-output-port . G20268) (open-string-input-port . G20267) (open-file-output-port . G20266) (open-file-input/output-port . G20265) (open-file-input-port . G20264) (open-bytevector-output-port . G20263) (open-bytevector-input-port . G20262) (native-transcoder . G20261) (native-eol-style . G20260) (make-transcoder . G20259) (latin-1-codec . G20258) (make-i/o-write-error . G19306) (make-i/o-read-error . G19286) (make-i/o-port-error . G19457) (make-i/o-invalid-position-error . G19327) (make-i/o-filename-error . G19352) (make-i/o-file-protection-error . G19376) (make-i/o-file-is-read-only-error . G19396) (make-i/o-file-does-not-exist-error . G19436) (make-i/o-file-already-exists-error . G19416) (make-i/o-error . G19266) (make-i/o-encoding-error . G19502) (make-i/o-decoding-error . G19481) (make-custom-textual-output-port . G20257) (make-custom-textual-input/output-port . G20256) (make-custom-textual-input-port . G20255) (make-custom-binary-output-port . G20254) (make-custom-binary-input/output-port . G20253) (make-custom-binary-input-port . G20252) (lookahead-u8 . G20250) (lookahead-char . G20249) (i/o-write-error? . G19308) (i/o-read-error? . G19288) (i/o-port-error? . G19461) (i/o-invalid-position-error? . G19331) (i/o-filename-error? . G19356) (i/o-file-protection-error? . G19378) (i/o-file-is-read-only-error? . G19398) (i/o-file-does-not-exist-error? . G19438) (i/o-file-already-exists-error? . G19418) (i/o-error? . G19268) (i/o-error-port . G19463) (i/o-error-filename . G19358) (i/o-encoding-error? . G19506) (i/o-encoding-error-char . G19508) (i/o-decoding-error? . G19483) (get-u8 . G20248) (get-string-n! . G20247) (get-string-n . G20246) (get-string-all . G20245) (get-line . G20244) (get-datum . G20243) (get-char . G20242) (get-bytevector-some . G20241) (get-bytevector-n! . G20240) (get-bytevector-n . G20239) (get-bytevector-all . G20238) (flush-output-port . G20237) (close-port . G20236) (call-with-string-output-port . G20204) (call-with-port . G20203) (call-with-bytevector-output-port . G20202) (bytevector->string . G20201) (buffer-mode? . G20200) (binary-port? . G20199) (&i/o-encoding . G19844) (&i/o-decoding . G19843) (&i/o-port . G19842) (&i/o-file-does-not-exist . G19841) (&i/o-file-already-exists . G19840) (&i/o-file-is-read-only . G19839) (&i/o-file-protection . G19838) (&i/o-filename . G19837) (&i/o-invalid-position . G19836) (&i/o-write . G19835) (&i/o-read . G19834) (&i/o . G19833) (error-handling-mode . G19806) (file-options . G19805) (buffer-mode . G19804) (eol-style . G19803)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20534 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G20195) (enum-set=? . G20194) (enum-set-universe . G20193) (enum-set-union . G20192) (enum-set-subset? . G20191) (enum-set-projection . G20190) (enum-set-member? . G20189) (enum-set-intersection . G20188) (enum-set-indexer . G20187) (enum-set-difference . G20186) (enum-set-constructor . G20185) (enum-set-complement . G20184) (enum-set->list . G20183) (define-enumeration . G19817)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20535 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G19040) (warning? . G18912) (violation? . G18972) (undefined-violation? . G19152) (syntax-violation? . G19128) (syntax-violation-subform . G19132) (syntax-violation-form . G19130) (syntax-violation . G12451) (simple-conditions . G20182) (serious-condition? . G18932) (non-continuable-violation? . G19062) (message-condition? . G18890) (make-who-condition . G19036) (make-warning . G18910) (make-violation . G18970) (make-undefined-violation . G19150) (make-syntax-violation . G19122) (make-serious-condition . G18930) (make-non-continuable-violation . G19060) (make-message-condition . G18886) (make-lexical-violation . G19100) (make-irritants-condition . G19011) (make-implementation-restriction-violation . G19080) (make-error . G18950) (make-assertion-violation . G18990) (lexical-violation? . G19102) (irritants-condition? . G19015) (implementation-restriction-violation? . G19082) (error? . G18952) (condition-who . G19042) (condition-predicate . G20181) (condition-message . G18892) (condition-irritants . G19017) (condition-accessor . G20180) (condition . G20179) (assertion-violation? . G18992) (condition? . G20178) (&undefined . G19832) (&syntax . G19831) (&lexical . G19830) (&implementation-restriction . G19829) (&non-continuable . G19828) (&who . G19827) (&irritants . G19826) (&assertion . G19825) (&violation . G19824) (&error . G19823) (&serious . G19822) (&warning . G19821) (&message . G19820) (&condition . G19819) (define-condition-type . G19818)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20536 '(rnrs records inspection) '(6) '() '() '() '((record? . G20350) (record-type-uid . G20349) (record-type-sealed? . G20348) (record-type-parent . G20347) (record-type-opaque? . G20346) (record-type-name . G20345) (record-type-generative? . G20344) (record-type-field-names . G20343) (record-rtd . G20342) (record-field-mutable? . G20341)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20537 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G20357) (record-predicate . G20356) (record-mutator . G20355) (record-constructor . G20354) (record-accessor . G20353) (make-record-type-descriptor . G20352) (make-record-constructor-descriptor . G20351)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20538 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G19816) (parent-rtd . G19815) (nongenerative . G19814) (opaque . G19813) (sealed . G19812) (protocol . G19811) (parent . G19810) (immutable . G19809) (mutable . G19808) (fields . G19807) (record-constructor-descriptor . G19772) (record-type-descriptor . G19771)) '() values values '#f '#f '#t '#f) (G11125@G10763@install-library 'G20539 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G20507) (&no-nans-rtd . G20506) (&no-infinities-rcd . G20505) (&no-infinities-rtd . G20504) (&i/o-encoding-rcd . G20503) (&i/o-encoding-rtd . G20502) (&i/o-decoding-rcd . G20501) (&i/o-decoding-rtd . G20500) (&i/o-port-rcd . G20499) (&i/o-port-rtd . G20498) (&i/o-file-does-not-exist-rcd . G20497) (&i/o-file-does-not-exist-rtd . G20496) (&i/o-file-already-exists-rcd . G20495) (&i/o-file-already-exists-rtd . G20494) (&i/o-file-is-read-only-rcd . G20493) (&i/o-file-is-read-only-rtd . G20492) (&i/o-file-protection-rcd . G20491) (&i/o-file-protection-rtd . G20490) (&i/o-filename-rcd . G20489) (&i/o-filename-rtd . G20488) (&i/o-invalid-position-rcd . G20487) (&i/o-invalid-position-rtd . G20486) (&i/o-write-rcd . G20485) (&i/o-write-rtd . G20484) (&i/o-read-rcd . G20483) (&i/o-read-rtd . G20482) (&i/o-rcd . G20481) (&i/o-rtd . G20480) (&undefined-rcd . G20479) (&undefined-rtd . G20478) (&syntax-rcd . G20477) (&syntax-rtd . G20476) (&lexical-rcd . G20475) (&lexical-rtd . G20474) (&implementation-restriction-rcd . G20473) (&implementation-restriction-rtd . G20472) (&non-continuable-rcd . G20471) (&non-continuable-rtd . G20470) (&who-rcd . G20469) (&who-rtd . G20468) (&irritants-rcd . G20467) (&irritants-rtd . G20466) (&assertion-rcd . G20465) (&assertion-rtd . G20464) (&violation-rcd . G20463) (&violation-rtd . G20462) (&error-rcd . G20461) (&error-rtd . G20460) (&serious-rcd . G20459) (&serious-rtd . G20458) (&warning-rcd . G20457) (&warning-rtd . G20456) (&message-rcd . G20455) (&message-rtd . G20454) (&condition-rcd . G20453) (&condition-rtd . G20452) (syntax-error . G12445) (syntax-dispatch . G12218) (pretty-print . G20451) (eval-core . G20450) (set-symbol-value! . G20449) (symbol-value . G20448) (gensym . G20447) (void . G20446) (load . G19603) (interaction-environment . G12463) (char-ready? . G20445) (regexp? . G20444) (read-line . G20443) (dotted-list? . G20442) (circular-list? . G20441) (proper-list? . G20440) (circular-list . G20439) (last . G20438) (last-pair . G20437) (not-pair? . G20436) (split-at! . G20435) (split-at . G20434) (list= . G20433) (list-copy . G20432) (list-tabulate . G20431) (make-list . G20430) (xcons . G20429) (tenth . G20428) (ninth . G20427) (eighth . G20426) (seventh . G20425) (sixth . G20424) (fifth . G20423) (drop-right! . G20422) (drop-right . G20421) (take-right . G20420) (take! . G20419) (drop . G20418) (take . G20417) (car+cdr . G20416) (third . G20415) (second . G20414) (first . G20413) (assoc-ref . G20412) (alist-cons . G20411) (print . G20410) (format . G20409) (standard-library-path . G20408) (current-directory . G20407) (write-to-file . G20406) (file->list . G20405) (file->string . G20404) (digit->integer . G20403) (call-with-string-input-port . G20402) (call-with-string-io . G20401) (string-split . G20400) (bytevector-for-each . G20399) (string->regexp . G20398) (rxmatch . G20397) (regexp-replace-all . G20396) (hashtable-for-each . G20395) (readdir . G20394) (get-environment-variables . G20393) (get-environment-variable . G20392) (get-command-line . G20391) (sys-display . G20390) (source-info . G20389) (set-source-info! . G20388) (receive . G20387) (string-upcase . G20386) (string-titlecase . G20385) (string-normalize-nfkd . G20384) (string-normalize-nfkc . G20383) (string-normalize-nfd . G20382) (string-normalize-nfc . G20381) (string-foldcase . G20380) (string-downcase . G20379) (string-ci>? . G20378) (string-ci>=? . G20377) (string-ci=? . G20376) (string-ci<? . G20375) (string-ci<=? . G20374) (char-whitespace? . G20373) (char-upper-case? . G20372) (char-title-case? . G20371) (char-numeric? . G20370) (char-lower-case? . G20369) (char-general-category . G20368) (char-upcase . G20367) (char-titlecase . G20366) (char-foldcase . G20365) (char-downcase . G20364) (char-ci>? . G20363) (char-ci>=? . G20362) (char-ci=? . G20361) (char-ci<? . G20360) (char-ci<=? . G20359) (char-alphabetic? . G20358) (make-variable-transformer . G11704) (identifier? . G12453) (generate-temporaries . G12437) (free-identifier=? . G12439) (syntax->datum . G12457) (datum->syntax . G12455) (bound-identifier=? . G12441) (record-type-descriptor? . G20357) (record-predicate . G20356) (record-mutator . G20355) (record-constructor . G20354) (record-accessor . G20353) (make-record-type-descriptor . G20352) (make-record-constructor-descriptor . G20351) (record? . G20350) (record-type-uid . G20349) (record-type-sealed? . G20348) (record-type-parent . G20347) (record-type-opaque? . G20346) (record-type-name . G20345) (record-type-generative? . G20344) (record-type-field-names . G20343) (record-rtd . G20342) (record-field-mutable? . G20341) (delete-file . G20340) (file-exists? . G20339) (vector-sort! . G20338) (vector-sort . G20337) (list-sort . G20336) (symbol-hash . G20335) (string-ci-hash . G20334) (string-hash . G20333) (equal-hash . G20332) (hashtable-equivalence-function . G20331) (make-hashtable . G20330) (hashtable-hash-function . G20329) (make-eqv-hashtable . G20328) (make-eq-hashtable . G20327) (hashtable? . G20326) (hashtable-update! . G20325) (hashtable-size . G20324) (hashtable-set! . G20323) (hashtable-ref . G20322) (hashtable-mutable? . G20321) (hashtable-keys . G20320) (hashtable-entries . G20319) (hashtable-delete! . G20318) (hashtable-copy . G20317) (hashtable-contains? . G20316) (hashtable-clear! . G20315) (call-with-output-file . G20314) (call-with-input-file . G20313) (write-char . G20312) (write . G20311) (with-output-to-file . G20310) (with-input-from-file . G20309) (read-char . G20308) (read . G20307) (peek-char . G20306) (open-output-file . G20305) (open-input-file . G20304) (newline . G20303) (display . G20302) (close-output-port . G20301) (close-input-port . G20300) (eof-object? . G20299) (eof-object . G20298) (current-error-port . G20297) (current-output-port . G20296) (current-input-port . G20295) (output-port? . G20294) (input-port? . G20293) (utf-8-codec . G20292) (utf-16-codec . G20291) (transcoder-error-handling-mode . G20290) (transcoder-eol-style . G20289) (transcoder-codec . G20288) (transcoded-port . G20287) (textual-port? . G20286) (string->bytevector . G20285) (standard-output-port . G20284) (standard-input-port . G20283) (standard-error-port . G20282) (set-port-position! . G20281) (put-u8 . G20280) (put-string . G20279) (put-datum . G20278) (put-char . G20277) (put-bytevector . G20276) (port? . G20275) (port-transcoder . G20274) (port-position . G20273) (port-has-set-port-position!? . G20272) (port-has-port-position? . G20271) (port-eof? . G20270) (output-port-buffer-mode . G20269) (open-string-output-port . G20268) (open-string-input-port . G20267) (open-file-output-port . G20266) (open-file-input/output-port . G20265) (open-file-input-port . G20264) (open-bytevector-output-port . G20263) (open-bytevector-input-port . G20262) (native-transcoder . G20261) (native-eol-style . G20260) (make-transcoder . G20259) (latin-1-codec . G20258) (make-i/o-write-error . G19306) (make-i/o-read-error . G19286) (make-i/o-port-error . G19457) (make-i/o-invalid-position-error . G19327) (make-i/o-filename-error . G19352) (make-i/o-file-protection-error . G19376) (make-i/o-file-is-read-only-error . G19396) (make-i/o-file-does-not-exist-error . G19436) (make-i/o-file-already-exists-error . G19416) (make-i/o-error . G19266) (make-i/o-encoding-error . G19502) (make-i/o-decoding-error . G19481) (make-custom-textual-output-port . G20257) (make-custom-textual-input/output-port . G20256) (make-custom-textual-input-port . G20255) (make-custom-binary-output-port . G20254) (make-custom-binary-input/output-port . G20253) (make-custom-binary-input-port . G20252) (make-bytevector . G20251) (lookahead-u8 . G20250) (lookahead-char . G20249) (i/o-write-error? . G19308) (i/o-read-error? . G19288) (i/o-port-error? . G19461) (i/o-invalid-position-error? . G19331) (i/o-filename-error? . G19356) (i/o-file-protection-error? . G19378) (i/o-file-is-read-only-error? . G19398) (i/o-file-does-not-exist-error? . G19438) (i/o-file-already-exists-error? . G19418) (i/o-error? . G19268) (i/o-error-port . G19463) (i/o-error-filename . G19358) (i/o-encoding-error? . G19506) (i/o-encoding-error-char . G19508) (i/o-decoding-error? . G19483) (get-u8 . G20248) (get-string-n! . G20247) (get-string-n . G20246) (get-string-all . G20245) (get-line . G20244) (get-datum . G20243) (get-char . G20242) (get-bytevector-some . G20241) (get-bytevector-n! . G20240) (get-bytevector-n . G20239) (get-bytevector-all . G20238) (flush-output-port . G20237) (close-port . G20236) (scheme-report-environment . G12419) (quotient . G20235) (null-environment . G12417) (remainder . G20234) (modulo . G20233) (inexact->exact . G20232) (force . G20231) (exact->inexact . G20230) (exit . G20229) (command-line . G19597) (string-fill! . G20228) (string-set! . G20227) (set-cdr! . G20226) (set-car! . G20225) (remove . G20224) (remv . G20223) (remp . G20222) (remq . G20221) (partition . G20220) (memv . G20219) (memq . G20218) (memp . G20217) (member . G20216) (exists . G20215) (for-all . G20214) (fold-right . G20213) (fold-left . G20212) (find . G20211) (filter . G20210) (cons* . G20209) (assv . G20208) (assq . G20207) (assp . G20206) (assoc . G20205) (call-with-string-output-port . G20204) (call-with-port . G20203) (call-with-bytevector-output-port . G20202) (bytevector->string . G20201) (buffer-mode? . G20200) (binary-port? . G20199) (with-exception-handler . G20198) (raise-continuable . G20197) (raise . G20196) (eval . G12423) (environment . G12415) (make-enumeration . G20195) (enum-set=? . G20194) (enum-set-universe . G20193) (enum-set-union . G20192) (enum-set-subset? . G20191) (enum-set-projection . G20190) (enum-set-member? . G20189) (enum-set-intersection . G20188) (enum-set-indexer . G20187) (enum-set-difference . G20186) (enum-set-constructor . G20185) (enum-set-complement . G20184) (enum-set->list . G20183) (who-condition? . G19040) (warning? . G18912) (violation? . G18972) (undefined-violation? . G19152) (syntax-violation? . G19128) (syntax-violation-subform . G19132) (syntax-violation-form . G19130) (syntax-violation . G12451) (simple-conditions . G20182) (serious-condition? . G18932) (non-continuable-violation? . G19062) (message-condition? . G18890) (make-who-condition . G19036) (make-warning . G18910) (make-violation . G18970) (make-undefined-violation . G19150) (make-syntax-violation . G19122) (make-serious-condition . G18930) (make-non-continuable-violation . G19060) (make-message-condition . G18886) (make-lexical-violation . G19100) (make-irritants-condition . G19011) (make-implementation-restriction-violation . G19080) (make-error . G18950) (make-assertion-violation . G18990) (lexical-violation? . G19102) (irritants-condition? . G19015) (implementation-restriction-violation? . G19082) (error? . G18952) (condition-who . G19042) (condition-predicate . G20181) (condition-message . G18892) (condition-irritants . G19017) (condition-accessor . G20180) (condition . G20179) (assertion-violation? . G18992) (condition? . G20178) (utf32->string . G20177) (utf16->string . G20176) (utf8->string . G20175) (uint-list->bytevector . G20174) (u8-list->bytevector . G20173) (string->utf8 . G20172) (string->utf32 . G20171) (string->utf16 . G20170) (sint-list->bytevector . G20169) (native-endianness . G20168) (bytevector? . G20167) (bytevector=? . G20166) (bytevector-uint-set! . G20165) (bytevector-uint-ref . G20164) (bytevector-u8-set! . G20163) (bytevector-u8-ref . G20162) (bytevector-u64-set! . G20161) (bytevector-u64-ref . G20160) (bytevector-u64-native-set! . G20159) (bytevector-u64-native-ref . G20158) (bytevector-u32-set! . G20157) (bytevector-u32-ref . G20156) (bytevector-u32-native-set! . G20155) (bytevector-u32-native-ref . G20154) (bytevector-u16-set! . G20153) (bytevector-u16-ref . G20152) (bytevector-u16-native-set! . G20151) (bytevector-u16-native-ref . G20150) (bytevector-sint-set! . G20149) (bytevector-sint-ref . G20148) (bytevector-s8-set! . G20147) (bytevector-s8-ref . G20146) (bytevector-s64-set! . G20145) (bytevector-s64-ref . G20144) (bytevector-s64-native-set! . G20143) (bytevector-s64-native-ref . G20142) (bytevector-s32-set! . G20141) (bytevector-s32-ref . G20140) (bytevector-s32-native-set! . G20139) (bytevector-s32-native-ref . G20138) (bytevector-s16-set! . G20137) (bytevector-s16-ref . G20136) (bytevector-s16-native-set! . G20135) (bytevector-s16-native-ref . G20134) (bytevector-length . G20133) (bytevector-ieee-single-ref . G20132) (bytevector-ieee-single-native-set! . G20131) (bytevector-ieee-single-native-ref . G20130) (bytevector-ieee-double-ref . G20129) (bytevector-ieee-double-native-set! . G20128) (bytevector-ieee-double-native-ref . G20127) (bytevector-fill! . G20126) (bytevector-copy! . G20125) (bytevector-copy . G20124) (bytevector->uint-list . G20123) (bytevector->u8-list . G20122) (bytevector->sint-list . G20121) (no-nans-violation? . G20120) (no-infinities-violation? . G20119) (make-no-nans-violation . G20118) (make-no-infinities-violation . G20117) (real->flonum . G20116) (flzero? . G20115) (fltruncate . G20114) (fltan . G20113) (flsqrt . G20112) (flsin . G20111) (flround . G20110) (flpositive? . G20109) (flonum? . G20108) (flodd? . G20107) (flnumerator . G20106) (flnegative? . G20105) (flnan? . G20104) (flmod0 . G20103) (flmod . G20102) (flmin . G20101) (flmax . G20100) (fllog . G20099) (flinteger? . G20098) (flinfinite? . G20097) (flfloor . G20096) (flfinite? . G20095) (flexpt . G20094) (flexp . G20093) (fleven? . G20092) (fldiv0-and-mod0 . G20091) (fldiv0 . G20090) (fldiv-and-mod . G20089) (fldiv . G20088) (fldenominator . G20087) (flcos . G20086) (flceiling . G20085) (flatan . G20084) (flasin . G20083) (flacos . G20082) (flabs . G20081) (fl>? . G20080) (fl>=? . G20079) (fl=? . G20078) (fl<? . G20077) (fl<=? . G20076) (fl/ . G20075) (fl- . G20074) (fl+ . G20073) (fl* . G20072) (fixnum->flonum . G20071) (fxzero? . G20070) (fxxor . G20069) (fxrotate-bit-field . G20068) (fxreverse-bit-field . G20067) (fxpositive? . G20066) (fxodd? . G20065) (fxnot . G20064) (fxnegative? . G20063) (fxmod0 . G20062) (fxmod . G20061) (fxmin . G20060) (fxmax . G20059) (fxlength . G20058) (fxior . G20057) (fxif . G20056) (fxfirst-bit-set . G20055) (fxeven? . G20054) (fxdiv0-and-mod0 . G20053) (fxdiv0 . G20052) (fxdiv-and-mod . G20051) (fxdiv . G20050) (fxcopy-bit-field . G20049) (fxcopy-bit . G20048) (fxbit-set? . G20047) (fxbit-field . G20046) (fxbit-count . G20045) (fxarithmetic-shift-right . G20044) (fxarithmetic-shift-left . G20043) (fxarithmetic-shift . G20042) (fxand . G20041) (fx>? . G20040) (fx>=? . G20039) (fx=? . G20038) (fx<? . G20037) (fx<=? . G20036) (fx-/carry . G20035) (fx- . G20034) (fx+/carry . G20033) (fx+ . G20032) (fx*/carry . G20031) (fx* . G20030) (greatest-fixnum . G20029) (least-fixnum . G20028) (fixnum-width . G20027) (fixnum? . G20026) (bitwise-rotate-bit-field . G20025) (bitwise-reverse-bit-field . G20024) (bitwise-length . G20023) (bitwise-if . G20022) (bitwise-first-bit-set . G20021) (bitwise-copy-bit-field . G20020) (bitwise-copy-bit . G20019) (bitwise-bit-set? . G20018) (bitwise-bit-field . G20017) (bitwise-bit-count . G20016) (bitwise-xor . G20015) (bitwise-ior . G20014) (bitwise-and . G20013) (bitwise-not . G20012) (bitwise-arithmetic-shift-right . G20011) (bitwise-arithmetic-shift-left . G20010) (bitwise-arithmetic-shift . G20009) (zero? . G20008) (vector? . G20007) (vector-set! . G20006) (vector-ref . G20005) (vector-map . G20004) (vector-length . G20003) (vector-for-each . G20002) (vector-fill! . G20001) (vector->list . G20000) (vector . G19999) (values . G19998) (truncate . G19997) (tan . G19996) (symbol? . G19995) (symbol=? . G19994) (symbol->string . G19993) (substring . G19992) (string? . G19991) (string>? . G19990) (string>=? . G19989) (string=? . G19988) (string<? . G19987) (string<=? . G19986) (string-ref . G19985) (string-length . G19984) (string-for-each . G19983) (string-copy . G19982) (string-append . G19981) (string->symbol . G19980) (string->number . G19979) (string->list . G19978) (string . G19977) (sqrt . G19976) (sin . G19975) (round . G19974) (reverse . G19973) (real? . G19972) (real-valued? . G19971) (real-part . G19970) (rationalize . G19969) (rational? . G19968) (rational-valued? . G19967) (procedure? . G19966) (positive? . G19965) (pair? . G19964) (odd? . G19963) (numerator . G19962) (number? . G19961) (number->string . G19960) (null? . G19959) (not . G19958) (negative? . G19957) (nan? . G19956) (min . G19955) (max . G19954) (map . G19953) (make-vector . G19952) (make-string . G19951) (make-rectangular . G19950) (make-polar . G19949) (magnitude . G19948) (log . G19947) (list? . G19946) (list-tail . G19945) (list-ref . G19944) (list->vector . G19943) (list->string . G19942) (list . G19941) (length . G19940) (lcm . G19939) (integer? . G19938) (integer-valued? . G19937) (integer->char . G19936) (infinite? . G19935) (inexact? . G19934) (inexact . G19933) (imag-part . G19932) (gcd . G19931) (for-each . G19930) (floor . G19929) (finite? . G19928) (expt . G19927) (exp . G19926) (exact? . G19925) (exact-integer-sqrt . G19924) (exact . G19923) (even? . G19922) (error . G19921) (eqv? . G19920) (equal? . G19919) (eq? . G19918) (dynamic-wind . G19917) (div0-and-mod0 . G19916) (mod0 . G19915) (div0 . G19914) (div-and-mod . G19913) (mod . G19912) (div . G19911) (denominator . G19910) (cos . G19909) (cons . G19908) (complex? . G19907) (char? . G19906) (char>? . G19905) (char>=? . G19904) (char=? . G19903) (char<? . G19902) (char<=? . G19901) (char->integer . G19900) (ceiling . G19899) (call-with-values . G19898) (call/cc . G19897) (call-with-current-continuation . G19896) (cddddr . G19895) (cdddar . G19894) (cddadr . G19893) (cddaar . G19892) (cdaddr . G19891) (cdadar . G19890) (cdaadr . G19889) (cdaaar . G19888) (cadddr . G19887) (caddar . G19886) (cadadr . G19885) (cadaar . G19884) (caaddr . G19883) (caadar . G19882) (caaadr . G19881) (caaaar . G19880) (cdddr . G19879) (cddar . G19878) (cdadr . G19877) (cdaar . G19876) (caddr . G19875) (cadar . G19874) (caadr . G19873) (caaar . G19872) (cddr . G19871) (cdar . G19870) (cadr . G19869) (caar . G19868) (cdr . G19867) (car . G19866) (boolean? . G19865) (boolean=? . G19864) (atan . G19863) (assertion-violation . G19862) (asin . G19861) (apply . G19860) (append . G19859) (angle . G19858) (acos . G19857) (abs . G19856) (/ . G19855) (* . G19854) (- . G19853) (+ . G19852) (>= . G19851) (> . G19850) (= . G19849) (<= . G19848) (< . G19847) (&no-nans . G19846) (&no-infinities . G19845) (&i/o-encoding . G19844) (&i/o-decoding . G19843) (&i/o-port . G19842) (&i/o-file-does-not-exist . G19841) (&i/o-file-already-exists . G19840) (&i/o-file-is-read-only . G19839) (&i/o-file-protection . G19838) (&i/o-filename . G19837) (&i/o-invalid-position . G19836) (&i/o-write . G19835) (&i/o-read . G19834) (&i/o . G19833) (&undefined . G19832) (&syntax . G19831) (&lexical . G19830) (&implementation-restriction . G19829) (&non-continuable . G19828) (&who . G19827) (&irritants . G19826) (&assertion . G19825) (&violation . G19824) (&error . G19823) (&serious . G19822) (&warning . G19821) (&message . G19820) (&condition . G19819) (define-condition-type . G19818) (define-enumeration . G19817) (define-record-type . G19816) (parent-rtd . G19815) (nongenerative . G19814) (opaque . G19813) (sealed . G19812) (protocol . G19811) (parent . G19810) (immutable . G19809) (mutable . G19808) (fields . G19807) (error-handling-mode . G19806) (file-options . G19805) (buffer-mode . G19804) (eol-style . G19803) (guard . G19802) (trace-define . G19801) (trace-lambda . G19800) (unsyntax-splicing . G19799) (unsyntax . G19798) (unquote-splicing . G19797) (unquote . G19796) (_ . G19795) (else . G19794) (=> . G19793) (... . G19792) (assert . G19791) (endianness . G19790) (delay . G19789) (time . G19788) (or . G19787) (and . G19786) (do . G19785) (cond . G19784) (let* . G19783) (let . G19782) (let*-values . G19781) (let-values . G19780) (identifier-syntax . G19779) (with-syntax . G19778) (quasisyntax . G19777) (quasiquote . G19776) (syntax-rules . G19775) (include . G19774) (define-struct . G19773) (record-constructor-descriptor . G19772) (record-type-descriptor . G19771) (case . G19770) (parameterize . G19769) (unless . G19768) (when . G19767) (if . G19766) (letrec* . G19765) (letrec . G19764) (type-descriptor . G19763) (case-lambda . G19762) (lambda . G19761) (syntax . G19760) (syntax-case . G19759) (quote . G19758) (foreign-call . G19757) (letrec-syntax . G19756) (let-syntax . G19755) (set! . G19754) (import . G19753) (begin . G19752) (module . G19751) (define-syntax . G19750) (define . G19749)) '((G20507 core-prim . &no-nans-rcd) (G20506 core-prim . &no-nans-rtd) (G20505 core-prim . &no-infinities-rcd) (G20504 core-prim . &no-infinities-rtd) (G20503 core-prim . &i/o-encoding-rcd) (G20502 core-prim . &i/o-encoding-rtd) (G20501 core-prim . &i/o-decoding-rcd) (G20500 core-prim . &i/o-decoding-rtd) (G20499 core-prim . &i/o-port-rcd) (G20498 core-prim . &i/o-port-rtd) (G20497 core-prim . &i/o-file-does-not-exist-rcd) (G20496 core-prim . &i/o-file-does-not-exist-rtd) (G20495 core-prim . &i/o-file-already-exists-rcd) (G20494 core-prim . &i/o-file-already-exists-rtd) (G20493 core-prim . &i/o-file-is-read-only-rcd) (G20492 core-prim . &i/o-file-is-read-only-rtd) (G20491 core-prim . &i/o-file-protection-rcd) (G20490 core-prim . &i/o-file-protection-rtd) (G20489 core-prim . &i/o-filename-rcd) (G20488 core-prim . &i/o-filename-rtd) (G20487 core-prim . &i/o-invalid-position-rcd) (G20486 core-prim . &i/o-invalid-position-rtd) (G20485 core-prim . &i/o-write-rcd) (G20484 core-prim . &i/o-write-rtd) (G20483 core-prim . &i/o-read-rcd) (G20482 core-prim . &i/o-read-rtd) (G20481 core-prim . &i/o-rcd) (G20480 core-prim . &i/o-rtd) (G20479 core-prim . &undefined-rcd) (G20478 core-prim . &undefined-rtd) (G20477 core-prim . &syntax-rcd) (G20476 core-prim . &syntax-rtd) (G20475 core-prim . &lexical-rcd) (G20474 core-prim . &lexical-rtd) (G20473 core-prim . &implementation-restriction-rcd) (G20472 core-prim . &implementation-restriction-rtd) (G20471 core-prim . &non-continuable-rcd) (G20470 core-prim . &non-continuable-rtd) (G20469 core-prim . &who-rcd) (G20468 core-prim . &who-rtd) (G20467 core-prim . &irritants-rcd) (G20466 core-prim . &irritants-rtd) (G20465 core-prim . &assertion-rcd) (G20464 core-prim . &assertion-rtd) (G20463 core-prim . &violation-rcd) (G20462 core-prim . &violation-rtd) (G20461 core-prim . &error-rcd) (G20460 core-prim . &error-rtd) (G20459 core-prim . &serious-rcd) (G20458 core-prim . &serious-rtd) (G20457 core-prim . &warning-rcd) (G20456 core-prim . &warning-rtd) (G20455 core-prim . &message-rcd) (G20454 core-prim . &message-rtd) (G20453 core-prim . &condition-rcd) (G20452 core-prim . &condition-rtd) (G12445 core-prim . syntax-error) (G12218 core-prim . syntax-dispatch) (G20451 core-prim . pretty-print) (G20450 core-prim . eval-core) (G20449 core-prim . set-symbol-value!) (G20448 core-prim . symbol-value) (G20447 core-prim . gensym) (G20446 core-prim . void) (G19603 core-prim . load) (G12463 core-prim . interaction-environment) (G20445 core-prim . char-ready?) (G20444 core-prim . regexp?) (G20443 core-prim . read-line) (G20442 core-prim . dotted-list?) (G20441 core-prim . circular-list?) (G20440 core-prim . proper-list?) (G20439 core-prim . circular-list) (G20438 core-prim . last) (G20437 core-prim . last-pair) (G20436 core-prim . not-pair?) (G20435 core-prim . split-at!) (G20434 core-prim . split-at) (G20433 core-prim . list=) (G20432 core-prim . list-copy) (G20431 core-prim . list-tabulate) (G20430 core-prim . make-list) (G20429 core-prim . xcons) (G20428 core-prim . tenth) (G20427 core-prim . ninth) (G20426 core-prim . eighth) (G20425 core-prim . seventh) (G20424 core-prim . sixth) (G20423 core-prim . fifth) (G20422 core-prim . drop-right!) (G20421 core-prim . drop-right) (G20420 core-prim . take-right) (G20419 core-prim . take!) (G20418 core-prim . drop) (G20417 core-prim . take) (G20416 core-prim . car+cdr) (G20415 core-prim . third) (G20414 core-prim . second) (G20413 core-prim . first) (G20412 core-prim . assoc-ref) (G20411 core-prim . alist-cons) (G20410 core-prim . print) (G20409 core-prim . format) (G20408 core-prim . standard-library-path) (G20407 core-prim . current-directory) (G20406 core-prim . write-to-file) (G20405 core-prim . file->list) (G20404 core-prim . file->string) (G20403 core-prim . digit->integer) (G20402 core-prim . call-with-string-input-port) (G20401 core-prim . call-with-string-io) (G20400 core-prim . string-split) (G20399 core-prim . bytevector-for-each) (G20398 core-prim . string->regexp) (G20397 core-prim . rxmatch) (G20396 core-prim . regexp-replace-all) (G20395 core-prim . hashtable-for-each) (G20394 core-prim . readdir) (G20393 core-prim . get-environment-variables) (G20392 core-prim . get-environment-variable) (G20391 core-prim . get-command-line) (G20390 core-prim . sys-display) (G20389 core-prim . source-info) (G20388 core-prim . set-source-info!) (G20387 core-prim . receive) (G20386 core-prim . string-upcase) (G20385 core-prim . string-titlecase) (G20384 core-prim . string-normalize-nfkd) (G20383 core-prim . string-normalize-nfkc) (G20382 core-prim . string-normalize-nfd) (G20381 core-prim . string-normalize-nfc) (G20380 core-prim . string-foldcase) (G20379 core-prim . string-downcase) (G20378 core-prim . string-ci>?) (G20377 core-prim . string-ci>=?) (G20376 core-prim . string-ci=?) (G20375 core-prim . string-ci<?) (G20374 core-prim . string-ci<=?) (G20373 core-prim . char-whitespace?) (G20372 core-prim . char-upper-case?) (G20371 core-prim . char-title-case?) (G20370 core-prim . char-numeric?) (G20369 core-prim . char-lower-case?) (G20368 core-prim . char-general-category) (G20367 core-prim . char-upcase) (G20366 core-prim . char-titlecase) (G20365 core-prim . char-foldcase) (G20364 core-prim . char-downcase) (G20363 core-prim . char-ci>?) (G20362 core-prim . char-ci>=?) (G20361 core-prim . char-ci=?) (G20360 core-prim . char-ci<?) (G20359 core-prim . char-ci<=?) (G20358 core-prim . char-alphabetic?) (G11704 core-prim . make-variable-transformer) (G12453 core-prim . identifier?) (G12437 core-prim . generate-temporaries) (G12439 core-prim . free-identifier=?) (G12457 core-prim . syntax->datum) (G12455 core-prim . datum->syntax) (G12441 core-prim . bound-identifier=?) (G20357 core-prim . record-type-descriptor?) (G20356 core-prim . record-predicate) (G20355 core-prim . record-mutator) (G20354 core-prim . record-constructor) (G20353 core-prim . record-accessor) (G20352 core-prim . make-record-type-descriptor) (G20351 core-prim . make-record-constructor-descriptor) (G20350 core-prim . record?) (G20349 core-prim . record-type-uid) (G20348 core-prim . record-type-sealed?) (G20347 core-prim . record-type-parent) (G20346 core-prim . record-type-opaque?) (G20345 core-prim . record-type-name) (G20344 core-prim . record-type-generative?) (G20343 core-prim . record-type-field-names) (G20342 core-prim . record-rtd) (G20341 core-prim . record-field-mutable?) (G20340 core-prim . delete-file) (G20339 core-prim . file-exists?) (G20338 core-prim . vector-sort!) (G20337 core-prim . vector-sort) (G20336 core-prim . list-sort) (G20335 core-prim . symbol-hash) (G20334 core-prim . string-ci-hash) (G20333 core-prim . string-hash) (G20332 core-prim . equal-hash) (G20331 core-prim . hashtable-equivalence-function) (G20330 core-prim . make-hashtable) (G20329 core-prim . hashtable-hash-function) (G20328 core-prim . make-eqv-hashtable) (G20327 core-prim . make-eq-hashtable) (G20326 core-prim . hashtable?) (G20325 core-prim . hashtable-update!) (G20324 core-prim . hashtable-size) (G20323 core-prim . hashtable-set!) (G20322 core-prim . hashtable-ref) (G20321 core-prim . hashtable-mutable?) (G20320 core-prim . hashtable-keys) (G20319 core-prim . hashtable-entries) (G20318 core-prim . hashtable-delete!) (G20317 core-prim . hashtable-copy) (G20316 core-prim . hashtable-contains?) (G20315 core-prim . hashtable-clear!) (G20314 core-prim . call-with-output-file) (G20313 core-prim . call-with-input-file) (G20312 core-prim . write-char) (G20311 core-prim . write) (G20310 core-prim . with-output-to-file) (G20309 core-prim . with-input-from-file) (G20308 core-prim . read-char) (G20307 core-prim . read) (G20306 core-prim . peek-char) (G20305 core-prim . open-output-file) (G20304 core-prim . open-input-file) (G20303 core-prim . newline) (G20302 core-prim . display) (G20301 core-prim . close-output-port) (G20300 core-prim . close-input-port) (G20299 core-prim . eof-object?) (G20298 core-prim . eof-object) (G20297 core-prim . current-error-port) (G20296 core-prim . current-output-port) (G20295 core-prim . current-input-port) (G20294 core-prim . output-port?) (G20293 core-prim . input-port?) (G20292 core-prim . utf-8-codec) (G20291 core-prim . utf-16-codec) (G20290 core-prim . transcoder-error-handling-mode) (G20289 core-prim . transcoder-eol-style) (G20288 core-prim . transcoder-codec) (G20287 core-prim . transcoded-port) (G20286 core-prim . textual-port?) (G20285 core-prim . string->bytevector) (G20284 core-prim . standard-output-port) (G20283 core-prim . standard-input-port) (G20282 core-prim . standard-error-port) (G20281 core-prim . set-port-position!) (G20280 core-prim . put-u8) (G20279 core-prim . put-string) (G20278 core-prim . put-datum) (G20277 core-prim . put-char) (G20276 core-prim . put-bytevector) (G20275 core-prim . port?) (G20274 core-prim . port-transcoder) (G20273 core-prim . port-position) (G20272 core-prim . port-has-set-port-position!?) (G20271 core-prim . port-has-port-position?) (G20270 core-prim . port-eof?) (G20269 core-prim . output-port-buffer-mode) (G20268 core-prim . open-string-output-port) (G20267 core-prim . open-string-input-port) (G20266 core-prim . open-file-output-port) (G20265 core-prim . open-file-input/output-port) (G20264 core-prim . open-file-input-port) (G20263 core-prim . open-bytevector-output-port) (G20262 core-prim . open-bytevector-input-port) (G20261 core-prim . native-transcoder) (G20260 core-prim . native-eol-style) (G20259 core-prim . make-transcoder) (G20258 core-prim . latin-1-codec) (G19306 core-prim . make-i/o-write-error) (G19286 core-prim . make-i/o-read-error) (G19457 core-prim . make-i/o-port-error) (G19327 core-prim . make-i/o-invalid-position-error) (G19352 core-prim . make-i/o-filename-error) (G19376 core-prim . make-i/o-file-protection-error) (G19396 core-prim . make-i/o-file-is-read-only-error) (G19436 core-prim . make-i/o-file-does-not-exist-error) (G19416 core-prim . make-i/o-file-already-exists-error) (G19266 core-prim . make-i/o-error) (G19502 core-prim . make-i/o-encoding-error) (G19481 core-prim . make-i/o-decoding-error) (G20257 core-prim . make-custom-textual-output-port) (G20256 core-prim . make-custom-textual-input/output-port) (G20255 core-prim . make-custom-textual-input-port) (G20254 core-prim . make-custom-binary-output-port) (G20253 core-prim . make-custom-binary-input/output-port) (G20252 core-prim . make-custom-binary-input-port) (G20251 core-prim . make-bytevector) (G20250 core-prim . lookahead-u8) (G20249 core-prim . lookahead-char) (G19308 core-prim . i/o-write-error?) (G19288 core-prim . i/o-read-error?) (G19461 core-prim . i/o-port-error?) (G19331 core-prim . i/o-invalid-position-error?) (G19356 core-prim . i/o-filename-error?) (G19378 core-prim . i/o-file-protection-error?) (G19398 core-prim . i/o-file-is-read-only-error?) (G19438 core-prim . i/o-file-does-not-exist-error?) (G19418 core-prim . i/o-file-already-exists-error?) (G19268 core-prim . i/o-error?) (G19463 core-prim . i/o-error-port) (G19358 core-prim . i/o-error-filename) (G19506 core-prim . i/o-encoding-error?) (G19508 core-prim . i/o-encoding-error-char) (G19483 core-prim . i/o-decoding-error?) (G20248 core-prim . get-u8) (G20247 core-prim . get-string-n!) (G20246 core-prim . get-string-n) (G20245 core-prim . get-string-all) (G20244 core-prim . get-line) (G20243 core-prim . get-datum) (G20242 core-prim . get-char) (G20241 core-prim . get-bytevector-some) (G20240 core-prim . get-bytevector-n!) (G20239 core-prim . get-bytevector-n) (G20238 core-prim . get-bytevector-all) (G20237 core-prim . flush-output-port) (G20236 core-prim . close-port) (G12419 core-prim . scheme-report-environment) (G20235 core-prim . quotient) (G12417 core-prim . null-environment) (G20234 core-prim . remainder) (G20233 core-prim . modulo) (G20232 core-prim . inexact->exact) (G20231 core-prim . force) (G20230 core-prim . exact->inexact) (G20229 core-prim . exit) (G19597 core-prim . command-line) (G20228 core-prim . string-fill!) (G20227 core-prim . string-set!) (G20226 core-prim . set-cdr!) (G20225 core-prim . set-car!) (G20224 core-prim . remove) (G20223 core-prim . remv) (G20222 core-prim . remp) (G20221 core-prim . remq) (G20220 core-prim . partition) (G20219 core-prim . memv) (G20218 core-prim . memq) (G20217 core-prim . memp) (G20216 core-prim . member) (G20215 core-prim . exists) (G20214 core-prim . for-all) (G20213 core-prim . fold-right) (G20212 core-prim . fold-left) (G20211 core-prim . find) (G20210 core-prim . filter) (G20209 core-prim . cons*) (G20208 core-prim . assv) (G20207 core-prim . assq) (G20206 core-prim . assp) (G20205 core-prim . assoc) (G20204 core-prim . call-with-string-output-port) (G20203 core-prim . call-with-port) (G20202 core-prim . call-with-bytevector-output-port) (G20201 core-prim . bytevector->string) (G20200 core-prim . buffer-mode?) (G20199 core-prim . binary-port?) (G20198 core-prim . with-exception-handler) (G20197 core-prim . raise-continuable) (G20196 core-prim . raise) (G12423 core-prim . eval) (G12415 core-prim . environment) (G20195 core-prim . make-enumeration) (G20194 core-prim . enum-set=?) (G20193 core-prim . enum-set-universe) (G20192 core-prim . enum-set-union) (G20191 core-prim . enum-set-subset?) (G20190 core-prim . enum-set-projection) (G20189 core-prim . enum-set-member?) (G20188 core-prim . enum-set-intersection) (G20187 core-prim . enum-set-indexer) (G20186 core-prim . enum-set-difference) (G20185 core-prim . enum-set-constructor) (G20184 core-prim . enum-set-complement) (G20183 core-prim . enum-set->list) (G19040 core-prim . who-condition?) (G18912 core-prim . warning?) (G18972 core-prim . violation?) (G19152 core-prim . undefined-violation?) (G19128 core-prim . syntax-violation?) (G19132 core-prim . syntax-violation-subform) (G19130 core-prim . syntax-violation-form) (G12451 core-prim . syntax-violation) (G20182 core-prim . simple-conditions) (G18932 core-prim . serious-condition?) (G19062 core-prim . non-continuable-violation?) (G18890 core-prim . message-condition?) (G19036 core-prim . make-who-condition) (G18910 core-prim . make-warning) (G18970 core-prim . make-violation) (G19150 core-prim . make-undefined-violation) (G19122 core-prim . make-syntax-violation) (G18930 core-prim . make-serious-condition) (G19060 core-prim . make-non-continuable-violation) (G18886 core-prim . make-message-condition) (G19100 core-prim . make-lexical-violation) (G19011 core-prim . make-irritants-condition) (G19080 core-prim . make-implementation-restriction-violation) (G18950 core-prim . make-error) (G18990 core-prim . make-assertion-violation) (G19102 core-prim . lexical-violation?) (G19015 core-prim . irritants-condition?) (G19082 core-prim . implementation-restriction-violation?) (G18952 core-prim . error?) (G19042 core-prim . condition-who) (G20181 core-prim . condition-predicate) (G18892 core-prim . condition-message) (G19017 core-prim . condition-irritants) (G20180 core-prim . condition-accessor) (G20179 core-prim . condition) (G18992 core-prim . assertion-violation?) (G20178 core-prim . condition?) (G20177 core-prim . utf32->string) (G20176 core-prim . utf16->string) (G20175 core-prim . utf8->string) (G20174 core-prim . uint-list->bytevector) (G20173 core-prim . u8-list->bytevector) (G20172 core-prim . string->utf8) (G20171 core-prim . string->utf32) (G20170 core-prim . string->utf16) (G20169 core-prim . sint-list->bytevector) (G20168 core-prim . native-endianness) (G20167 core-prim . bytevector?) (G20166 core-prim . bytevector=?) (G20165 core-prim . bytevector-uint-set!) (G20164 core-prim . bytevector-uint-ref) (G20163 core-prim . bytevector-u8-set!) (G20162 core-prim . bytevector-u8-ref) (G20161 core-prim . bytevector-u64-set!) (G20160 core-prim . bytevector-u64-ref) (G20159 core-prim . bytevector-u64-native-set!) (G20158 core-prim . bytevector-u64-native-ref) (G20157 core-prim . bytevector-u32-set!) (G20156 core-prim . bytevector-u32-ref) (G20155 core-prim . bytevector-u32-native-set!) (G20154 core-prim . bytevector-u32-native-ref) (G20153 core-prim . bytevector-u16-set!) (G20152 core-prim . bytevector-u16-ref) (G20151 core-prim . bytevector-u16-native-set!) (G20150 core-prim . bytevector-u16-native-ref) (G20149 core-prim . bytevector-sint-set!) (G20148 core-prim . bytevector-sint-ref) (G20147 core-prim . bytevector-s8-set!) (G20146 core-prim . bytevector-s8-ref) (G20145 core-prim . bytevector-s64-set!) (G20144 core-prim . bytevector-s64-ref) (G20143 core-prim . bytevector-s64-native-set!) (G20142 core-prim . bytevector-s64-native-ref) (G20141 core-prim . bytevector-s32-set!) (G20140 core-prim . bytevector-s32-ref) (G20139 core-prim . bytevector-s32-native-set!) (G20138 core-prim . bytevector-s32-native-ref) (G20137 core-prim . bytevector-s16-set!) (G20136 core-prim . bytevector-s16-ref) (G20135 core-prim . bytevector-s16-native-set!) (G20134 core-prim . bytevector-s16-native-ref) (G20133 core-prim . bytevector-length) (G20132 core-prim . bytevector-ieee-single-ref) (G20131 core-prim . bytevector-ieee-single-native-set!) (G20130 core-prim . bytevector-ieee-single-native-ref) (G20129 core-prim . bytevector-ieee-double-ref) (G20128 core-prim . bytevector-ieee-double-native-set!) (G20127 core-prim . bytevector-ieee-double-native-ref) (G20126 core-prim . bytevector-fill!) (G20125 core-prim . bytevector-copy!) (G20124 core-prim . bytevector-copy) (G20123 core-prim . bytevector->uint-list) (G20122 core-prim . bytevector->u8-list) (G20121 core-prim . bytevector->sint-list) (G20120 core-prim . no-nans-violation?) (G20119 core-prim . no-infinities-violation?) (G20118 core-prim . make-no-nans-violation) (G20117 core-prim . make-no-infinities-violation) (G20116 core-prim . real->flonum) (G20115 core-prim . flzero?) (G20114 core-prim . fltruncate) (G20113 core-prim . fltan) (G20112 core-prim . flsqrt) (G20111 core-prim . flsin) (G20110 core-prim . flround) (G20109 core-prim . flpositive?) (G20108 core-prim . flonum?) (G20107 core-prim . flodd?) (G20106 core-prim . flnumerator) (G20105 core-prim . flnegative?) (G20104 core-prim . flnan?) (G20103 core-prim . flmod0) (G20102 core-prim . flmod) (G20101 core-prim . flmin) (G20100 core-prim . flmax) (G20099 core-prim . fllog) (G20098 core-prim . flinteger?) (G20097 core-prim . flinfinite?) (G20096 core-prim . flfloor) (G20095 core-prim . flfinite?) (G20094 core-prim . flexpt) (G20093 core-prim . flexp) (G20092 core-prim . fleven?) (G20091 core-prim . fldiv0-and-mod0) (G20090 core-prim . fldiv0) (G20089 core-prim . fldiv-and-mod) (G20088 core-prim . fldiv) (G20087 core-prim . fldenominator) (G20086 core-prim . flcos) (G20085 core-prim . flceiling) (G20084 core-prim . flatan) (G20083 core-prim . flasin) (G20082 core-prim . flacos) (G20081 core-prim . flabs) (G20080 core-prim . fl>?) (G20079 core-prim . fl>=?) (G20078 core-prim . fl=?) (G20077 core-prim . fl<?) (G20076 core-prim . fl<=?) (G20075 core-prim . fl/) (G20074 core-prim . fl-) (G20073 core-prim . fl+) (G20072 core-prim . fl*) (G20071 core-prim . fixnum->flonum) (G20070 core-prim . fxzero?) (G20069 core-prim . fxxor) (G20068 core-prim . fxrotate-bit-field) (G20067 core-prim . fxreverse-bit-field) (G20066 core-prim . fxpositive?) (G20065 core-prim . fxodd?) (G20064 core-prim . fxnot) (G20063 core-prim . fxnegative?) (G20062 core-prim . fxmod0) (G20061 core-prim . fxmod) (G20060 core-prim . fxmin) (G20059 core-prim . fxmax) (G20058 core-prim . fxlength) (G20057 core-prim . fxior) (G20056 core-prim . fxif) (G20055 core-prim . fxfirst-bit-set) (G20054 core-prim . fxeven?) (G20053 core-prim . fxdiv0-and-mod0) (G20052 core-prim . fxdiv0) (G20051 core-prim . fxdiv-and-mod) (G20050 core-prim . fxdiv) (G20049 core-prim . fxcopy-bit-field) (G20048 core-prim . fxcopy-bit) (G20047 core-prim . fxbit-set?) (G20046 core-prim . fxbit-field) (G20045 core-prim . fxbit-count) (G20044 core-prim . fxarithmetic-shift-right) (G20043 core-prim . fxarithmetic-shift-left) (G20042 core-prim . fxarithmetic-shift) (G20041 core-prim . fxand) (G20040 core-prim . fx>?) (G20039 core-prim . fx>=?) (G20038 core-prim . fx=?) (G20037 core-prim . fx<?) (G20036 core-prim . fx<=?) (G20035 core-prim . fx-/carry) (G20034 core-prim . fx-) (G20033 core-prim . fx+/carry) (G20032 core-prim . fx+) (G20031 core-prim . fx*/carry) (G20030 core-prim . fx*) (G20029 core-prim . greatest-fixnum) (G20028 core-prim . least-fixnum) (G20027 core-prim . fixnum-width) (G20026 core-prim . fixnum?) (G20025 core-prim . bitwise-rotate-bit-field) (G20024 core-prim . bitwise-reverse-bit-field) (G20023 core-prim . bitwise-length) (G20022 core-prim . bitwise-if) (G20021 core-prim . bitwise-first-bit-set) (G20020 core-prim . bitwise-copy-bit-field) (G20019 core-prim . bitwise-copy-bit) (G20018 core-prim . bitwise-bit-set?) (G20017 core-prim . bitwise-bit-field) (G20016 core-prim . bitwise-bit-count) (G20015 core-prim . bitwise-xor) (G20014 core-prim . bitwise-ior) (G20013 core-prim . bitwise-and) (G20012 core-prim . bitwise-not) (G20011 core-prim . bitwise-arithmetic-shift-right) (G20010 core-prim . bitwise-arithmetic-shift-left) (G20009 core-prim . bitwise-arithmetic-shift) (G20008 core-prim . zero?) (G20007 core-prim . vector?) (G20006 core-prim . vector-set!) (G20005 core-prim . vector-ref) (G20004 core-prim . vector-map) (G20003 core-prim . vector-length) (G20002 core-prim . vector-for-each) (G20001 core-prim . vector-fill!) (G20000 core-prim . vector->list) (G19999 core-prim . vector) (G19998 core-prim . values) (G19997 core-prim . truncate) (G19996 core-prim . tan) (G19995 core-prim . symbol?) (G19994 core-prim . symbol=?) (G19993 core-prim . symbol->string) (G19992 core-prim . substring) (G19991 core-prim . string?) (G19990 core-prim . string>?) (G19989 core-prim . string>=?) (G19988 core-prim . string=?) (G19987 core-prim . string<?) (G19986 core-prim . string<=?) (G19985 core-prim . string-ref) (G19984 core-prim . string-length) (G19983 core-prim . string-for-each) (G19982 core-prim . string-copy) (G19981 core-prim . string-append) (G19980 core-prim . string->symbol) (G19979 core-prim . string->number) (G19978 core-prim . string->list) (G19977 core-prim . string) (G19976 core-prim . sqrt) (G19975 core-prim . sin) (G19974 core-prim . round) (G19973 core-prim . reverse) (G19972 core-prim . real?) (G19971 core-prim . real-valued?) (G19970 core-prim . real-part) (G19969 core-prim . rationalize) (G19968 core-prim . rational?) (G19967 core-prim . rational-valued?) (G19966 core-prim . procedure?) (G19965 core-prim . positive?) (G19964 core-prim . pair?) (G19963 core-prim . odd?) (G19962 core-prim . numerator) (G19961 core-prim . number?) (G19960 core-prim . number->string) (G19959 core-prim . null?) (G19958 core-prim . not) (G19957 core-prim . negative?) (G19956 core-prim . nan?) (G19955 core-prim . min) (G19954 core-prim . max) (G19953 core-prim . map) (G19952 core-prim . make-vector) (G19951 core-prim . make-string) (G19950 core-prim . make-rectangular) (G19949 core-prim . make-polar) (G19948 core-prim . magnitude) (G19947 core-prim . log) (G19946 core-prim . list?) (G19945 core-prim . list-tail) (G19944 core-prim . list-ref) (G19943 core-prim . list->vector) (G19942 core-prim . list->string) (G19941 core-prim . list) (G19940 core-prim . length) (G19939 core-prim . lcm) (G19938 core-prim . integer?) (G19937 core-prim . integer-valued?) (G19936 core-prim . integer->char) (G19935 core-prim . infinite?) (G19934 core-prim . inexact?) (G19933 core-prim . inexact) (G19932 core-prim . imag-part) (G19931 core-prim . gcd) (G19930 core-prim . for-each) (G19929 core-prim . floor) (G19928 core-prim . finite?) (G19927 core-prim . expt) (G19926 core-prim . exp) (G19925 core-prim . exact?) (G19924 core-prim . exact-integer-sqrt) (G19923 core-prim . exact) (G19922 core-prim . even?) (G19921 core-prim . error) (G19920 core-prim . eqv?) (G19919 core-prim . equal?) (G19918 core-prim . eq?) (G19917 core-prim . dynamic-wind) (G19916 core-prim . div0-and-mod0) (G19915 core-prim . mod0) (G19914 core-prim . div0) (G19913 core-prim . div-and-mod) (G19912 core-prim . mod) (G19911 core-prim . div) (G19910 core-prim . denominator) (G19909 core-prim . cos) (G19908 core-prim . cons) (G19907 core-prim . complex?) (G19906 core-prim . char?) (G19905 core-prim . char>?) (G19904 core-prim . char>=?) (G19903 core-prim . char=?) (G19902 core-prim . char<?) (G19901 core-prim . char<=?) (G19900 core-prim . char->integer) (G19899 core-prim . ceiling) (G19898 core-prim . call-with-values) (G19897 core-prim . call/cc) (G19896 core-prim . call-with-current-continuation) (G19895 core-prim . cddddr) (G19894 core-prim . cdddar) (G19893 core-prim . cddadr) (G19892 core-prim . cddaar) (G19891 core-prim . cdaddr) (G19890 core-prim . cdadar) (G19889 core-prim . cdaadr) (G19888 core-prim . cdaaar) (G19887 core-prim . cadddr) (G19886 core-prim . caddar) (G19885 core-prim . cadadr) (G19884 core-prim . cadaar) (G19883 core-prim . caaddr) (G19882 core-prim . caadar) (G19881 core-prim . caaadr) (G19880 core-prim . caaaar) (G19879 core-prim . cdddr) (G19878 core-prim . cddar) (G19877 core-prim . cdadr) (G19876 core-prim . cdaar) (G19875 core-prim . caddr) (G19874 core-prim . cadar) (G19873 core-prim . caadr) (G19872 core-prim . caaar) (G19871 core-prim . cddr) (G19870 core-prim . cdar) (G19869 core-prim . cadr) (G19868 core-prim . caar) (G19867 core-prim . cdr) (G19866 core-prim . car) (G19865 core-prim . boolean?) (G19864 core-prim . boolean=?) (G19863 core-prim . atan) (G19862 core-prim . assertion-violation) (G19861 core-prim . asin) (G19860 core-prim . apply) (G19859 core-prim . append) (G19858 core-prim . angle) (G19857 core-prim . acos) (G19856 core-prim . abs) (G19855 core-prim . /) (G19854 core-prim . *) (G19853 core-prim . -) (G19852 core-prim . +) (G19851 core-prim . >=) (G19850 core-prim . >) (G19849 core-prim . =) (G19848 core-prim . <=) (G19847 core-prim . <) (G19846 $core-rtd &no-nans-rtd &no-nans-rcd) (G19845 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G19844 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G19843 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G19842 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G19841 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G19840 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G19839 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G19838 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G19837 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G19836 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G19835 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G19834 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G19833 $core-rtd &i/o-rtd &i/o-rcd) (G19832 $core-rtd &undefined-rtd &undefined-rcd) (G19831 $core-rtd &syntax-rtd &syntax-rcd) (G19830 $core-rtd &lexical-rtd &lexical-rcd) (G19829 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G19828 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G19827 $core-rtd &who-rtd &who-rcd) (G19826 $core-rtd &irritants-rtd &irritants-rcd) (G19825 $core-rtd &assertion-rtd &assertion-rcd) (G19824 $core-rtd &violation-rtd &violation-rcd) (G19823 $core-rtd &error-rtd &error-rcd) (G19822 $core-rtd &serious-rtd &serious-rcd) (G19821 $core-rtd &warning-rtd &warning-rcd) (G19820 $core-rtd &message-rtd &message-rcd) (G19819 $core-rtd &condition-rtd &condition-rcd) (G19818 macro . define-condition-type) (G19817 macro . define-enumeration) (G19816 macro . define-record-type) (G19815 macro . parent-rtd) (G19814 macro . nongenerative) (G19813 macro . opaque) (G19812 macro . sealed) (G19811 macro . protocol) (G19810 macro . parent) (G19809 macro . immutable) (G19808 macro . mutable) (G19807 macro . fields) (G19806 macro . error-handling-mode) (G19805 macro . file-options) (G19804 macro . buffer-mode) (G19803 macro . eol-style) (G19802 macro . guard) (G19801 macro . trace-define) (G19800 macro . trace-lambda) (G19799 macro . unsyntax-splicing) (G19798 macro . unsyntax) (G19797 macro . unquote-splicing) (G19796 macro . unquote) (G19795 macro . _) (G19794 macro . else) (G19793 macro . =>) (G19792 macro . ...) (G19791 macro . assert) (G19790 macro . endianness) (G19789 macro . delay) (G19788 macro . time) (G19787 macro . or) (G19786 macro . and) (G19785 macro . do) (G19784 macro . cond) (G19783 macro . let*) (G19782 macro . let) (G19781 macro . let*-values) (G19780 macro . let-values) (G19779 macro . identifier-syntax) (G19778 macro . with-syntax) (G19777 macro . quasisyntax) (G19776 macro . quasiquote) (G19775 macro . syntax-rules) (G19774 macro . include) (G19773 macro . define-struct) (G19772 core-macro . record-constructor-descriptor) (G19771 core-macro . record-type-descriptor) (G19770 core-macro . case) (G19769 core-macro . parameterize) (G19768 core-macro . unless) (G19767 core-macro . when) (G19766 core-macro . if) (G19765 core-macro . letrec*) (G19764 core-macro . letrec) (G19763 core-macro . type-descriptor) (G19762 core-macro . case-lambda) (G19761 core-macro . lambda) (G19760 core-macro . syntax) (G19759 core-macro . syntax-case) (G19758 core-macro . quote) (G19757 core-macro . foreign-call) (G19756 letrec-syntax) (G19755 let-syntax) (G19754 set!) (G19753 import) (G19752 begin) (G19751 module) (G19750 define-syntax) (G19749 define)) values values '#f '#f '#f '#f) (G11125@G10763@install-library 'G20540 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G20451) (eval-core . G20450) (set-symbol-value! . G20449) (symbol-value . G20448) (gensym . G20447) (void . G20446)) '() values values '#f '#f '#f '#f) (G11125@G10763@install-library 'G20541 '(mosh) '() '() '() '() '((symbol-value . G20448) (standard-library-path . G20408) (get-command-line . G20391) (sys-display . G20390) (source-info . G20389) (set-source-info! . G20388)) '() values values '#f '#f '#f '#f) (G11125@G10763@install-library 'G20542 '(mosh backend) '() '() '() '() '((receive . G20387)) '() values values '#f '#f '#f '#f) (G11125@G10763@install-library 'G20543 '(mosh file) '() '() '() '() '((read-line . G20443) (current-directory . G20407) (write-to-file . G20406) (file->list . G20405) (file->string . G20404)) '() values values '#f '#f '#f '#f) (G11125@G10763@install-library 'G20544 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G20399)) '() values values '#f '#f '#f '#f) (G11125@G10763@install-library 'G20545 '(mosh number) '() '() '() '() '((digit->integer . G20403)) '() values values '#f '#f '#f '#f) (G11125@G10763@install-library 'G20546 '(mosh string) '() '() '() '() '((print . G20410) (format . G20409) (call-with-string-input-port . G20402) (call-with-string-io . G20401) (string-split . G20400) (string->regexp . G20398)) '() values values '#f '#f '#f '#f) (G11125@G10763@install-library 'G20547 '(mosh list) '() '() '() '() '((assoc-ref . G20412)) '() values values '#f '#f '#f '#f) (G11125@G10763@install-library 'G20548 '(mosh regexp) '() '() '() '() '((rxmatch . G20397) (regexp-replace-all . G20396)) '() values values '#f '#f '#f '#f) (G11125@G10763@install-library 'G20549 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G20395)) '() values values '#f '#f '#f '#f) (G11125@G10763@install-library 'G20550 '(system) '() '() '() '() '((readdir . G20394) (get-environment-variables . G20393) (get-environment-variable . G20392)) '() values values '#f '#f '#f '#f) (G11125@G10763@install-library 'G20551 '(srfi-1) '() '() '() '() '((dotted-list? . G20442) (circular-list? . G20441) (proper-list? . G20440) (circular-list . G20439) (last . G20438) (last-pair . G20437) (not-pair? . G20436) (split-at! . G20435) (split-at . G20434) (list= . G20433) (list-copy . G20432) (list-tabulate . G20431) (make-list . G20430) (xcons . G20429) (tenth . G20428) (ninth . G20427) (eighth . G20426) (seventh . G20425) (sixth . G20424) (fifth . G20423) (drop-right! . G20422) (drop-right . G20421) (take-right . G20420) (take! . G20419) (drop . G20418) (take . G20417) (car+cdr . G20416) (third . G20415) (second . G20414) (first . G20413) (alist-cons . G20411)) '() values values '#f '#f '#f '#f))
((lambda (G19592@for-each-with-index G19594@repl G19596@trace-printer G19598@command-line G19600@local-library-path G19602@load/args G19604@load G19606@ironscheme-build G19608@eval-top-level G19610@compile-system-libraries G19612@compile G19614@compile->closure G19616@load-r6rs-top-level G19618@write-record) (begin (set! G19592@for-each-with-index (lambda (G19638@proc G19639@lst) (letrec ((G19642@loop (lambda (G19644@i G19645@lst) (if (null? G19645@lst) (if '#f '#f (void)) (begin (G19638@proc G19644@i (car G19645@lst)) (G19642@loop (+ G19644@i '1) (cdr G19645@lst))))))) (G19642@loop '1 G19639@lst)))) (set! G19594@repl (lambda G19648@x ((lambda (G19651@rec) (begin (set! G19651@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G19653@G19652) (with-exception-handler (lambda (G19655@e) (G19653@G19652 (if '#t (G19592@for-each-with-index (lambda (G19657@i G19658@x) ((lambda (G19661@rtd) (begin (format '#t '"   ~d. ~a" G19657@i (record-type-name G19661@rtd)) ((lambda (G19663@v) ((lambda (G19665@t) (if (eqv? G19665@t '0) (newline) (if (eqv? G19665@t '1) (begin (display '": ") (write ((record-accessor G19661@rtd '0) G19658@x)) (newline)) (begin (display '":\n") ((letrec ((G19666@f (lambda (G19668@i) (if (= G19668@i (vector-length G19663@v)) (void) (begin (display '"       ") (display (vector-ref G19663@v G19668@i)) (display '": ") (write ((record-accessor G19661@rtd G19668@i) G19658@x)) (newline) (G19666@f (+ G19668@i '1))))))) G19666@f) '0))))) (vector-length G19663@v))) (record-type-field-names G19661@rtd)))) (record-rtd G19658@x))) (simple-conditions G19655@e)) (raise G19655@e)))) (lambda () (begin '#f ((lambda (G19670@line) (if (eof-object? G19670@line) (exit) (display (G19608@eval-top-level (call-with-port (open-string-input-port G19670@line) read))))) (get-line (current-input-port)))))))) (newline) (G19651@rec)))) (G19651@rec))) '#f))) (set! G19596@trace-printer (G10456@G10251@make-parameter write)) (set! G19598@command-line (G10456@G10251@make-parameter (get-command-line))) (set! G19600@local-library-path (lambda (G19672@filename) (cons '"." (G11109@G10731@library-path)))) (set! G19602@load/args (lambda (G19674@filename . G19676@args) (begin (apply G19616@load-r6rs-top-level G19674@filename 'load G19676@args) (void)))) (set! G19604@load (lambda (G19678@filename) (begin (apply G19616@load-r6rs-top-level G19678@filename 'load (G19598@command-line)) (void)))) (set! G19606@ironscheme-build (lambda () (G19604@load '"ironscheme-buildscript.ss"))) (set! G19608@eval-top-level (lambda (G19680@x) (G18822@G12424@eval G19680@x (G18842@G12464@interaction-environment)))) (set! G19610@compile-system-libraries (lambda () (G19608@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G19612@compile (lambda (G19682@filename) (G19616@load-r6rs-top-level G19682@filename 'compile))) (set! G19614@compile->closure (lambda (G19684@filename) (G19616@load-r6rs-top-level G19684@filename 'closure))) (set! G19616@load-r6rs-top-level (lambda (G19686@filename G19687@how . G19690@args) ((lambda (G19694@G19692@library-path G19695@G19693@library-path) ((lambda (G19698@swap) (dynamic-wind G19698@swap (lambda () ((lambda (G19700@x*) ((lambda (G19702@t) (if (eqv? G19702@t 'closure) (G18841@G12462@pre-compile-r6rs-top-level G19700@x*) (if (eqv? G19702@t 'load) ((lambda (G19705@G19703@command-line G19706@G19704@command-line) ((lambda (G19709@swap) (dynamic-wind G19709@swap (lambda () ((G18840@G12460@compile-r6rs-top-level G19700@x*))) G19709@swap)) (lambda () ((lambda (G19711@t) (begin (G19705@G19703@command-line G19706@G19704@command-line) (set! G19706@G19704@command-line G19711@t))) (G19705@G19703@command-line))))) G19598@command-line (cons G19686@filename (map (lambda (G19713@x) (format '"~a" G19713@x)) G19690@args))) (if (eqv? G19702@t 'compile) (begin (G18840@G12460@compile-r6rs-top-level G19700@x*) (G11113@G10739@serialize-all G10451@G10241@serialize-library G10556@G10470@compile-core-expr)) (void))))) G19687@how)) (with-input-from-file G19686@filename (lambda () ((letrec ((G19715@f (lambda () ((lambda (G19717@x) (if (eof-object? G19717@x) '() (cons G19717@x (G19715@f)))) (G10446@G10231@read-annotated))))) G19715@f)))))) G19698@swap)) (lambda () ((lambda (G19719@t) (begin (G19694@G19692@library-path G19695@G19693@library-path) (set! G19695@G19693@library-path G19719@t))) (G19694@G19692@library-path))))) G11109@G10731@library-path (G19600@local-library-path G19686@filename)))) (set! G19618@write-record (lambda (G19721@record G19722@port) ((lambda (G19725@rtd) (begin (format G19722@port '"    ~a" (record-type-name G19725@rtd)) ((lambda (G19727@v) ((lambda (G19729@t) (if (eqv? G19729@t '0) (newline) (if (eqv? G19729@t '1) (begin (display '": " G19722@port) (write ((record-accessor G19725@rtd '0) G19721@record) G19722@port) (newline G19722@port)) (begin (display '":\n") ((letrec ((G19730@f (lambda (G19732@i) (if (= G19732@i (vector-length G19727@v)) (void) (begin (display '"       " G19722@port) (display (vector-ref G19727@v G19732@i) G19722@port) (display '": " G19722@port) (write ((record-accessor G19725@rtd G19732@i) G19721@record) G19722@port) (newline G19722@port) (G19730@f (+ G19732@i '1))))))) G19730@f) '0))))) (vector-length G19727@v))) (record-type-field-names G19725@rtd)))) (record-rtd G19721@record)))) (begin (set! G19747@G19618@write-record G19618@write-record) (set! G19746@G19616@load-r6rs-top-level G19616@load-r6rs-top-level) (set! G19745@G19614@compile->closure G19614@compile->closure) (set! G19744@G19612@compile G19612@compile) (set! G19743@G19610@compile-system-libraries G19610@compile-system-libraries) (set! G19742@G19608@eval-top-level G19608@eval-top-level) (set! G19741@G19606@ironscheme-build G19606@ironscheme-build) (set! G19740@G19604@load G19604@load) (set! G19739@G19602@load/args G19602@load/args) (set! G19738@G19600@local-library-path G19600@local-library-path) (set! G19737@G19598@command-line G19598@command-line) (set! G19736@G19596@trace-printer G19596@trace-printer) (set! G19735@G19594@repl G19594@repl) (set! G19734@G19592@for-each-with-index G19592@for-each-with-index) (G11114@G10741@current-precompiled-library-loader G10452@G10243@load-serialized-library) (set-symbol-value! 'load G19604@load) (set-symbol-value! 'eval-r6rs G19608@eval-top-level) (set-symbol-value! 'int-env-syms G18815@G12410@interaction-environment-symbols) (set-symbol-value! 'expanded2core G10555@G10468@expanded->core) (set-symbol-value! 'trace-printer G19596@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G11109@G10731@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G19619@args G19620@port) (with-exception-handler (lambda (G19623@c) (begin (display '" Condition components:\n" G19620@port) (G19592@for-each-with-index (lambda (G19625@i G19626@x) ((lambda (G19629@rtd) (begin (format G19620@port '"   ~d. ~a" G19625@i (record-type-name G19629@rtd)) ((lambda (G19631@v) ((lambda (G19633@t) (if (eqv? G19633@t '0) (newline) (if (eqv? G19633@t '1) (begin (display '": ") (write ((record-accessor G19629@rtd '0) G19626@x)) (newline)) (begin (display '":\n") ((letrec ((G19634@f (lambda (G19636@i) (if (= G19636@i (vector-length G19631@v)) (void) (begin (display '"       ") (display (vector-ref G19631@v G19636@i)) (display '": ") (write ((record-accessor G19629@rtd G19636@i) G19626@x)) (newline) (G19634@f (+ G19636@i '1))))))) G19634@f) '0))))) (vector-length G19631@v))) (record-type-field-names G19629@rtd)))) (record-rtd G19626@x))) (simple-conditions G19623@c)))) (lambda () (if (null? G19619@args) (G19594@repl) (G19616@load-r6rs-top-level (car G19619@args) 'load))))) (G19598@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
