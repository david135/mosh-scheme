;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define G10434 '#f) (define G10435 '#f) (define G10436 '#f) (define G10437 '#f) (define G10438 '#f) (define G10439 '#f) (define G10440 '#f) (define G10441 '#f) (define G10442 '#f) (define G10443 '#f) (define G10444 '#f) (define G10445 '#f) ((lambda (G10219 G10221 G10223 G10225 G10227 G10229 G10231 G10233 G10235 G10237 G10239 G10393) (begin (set! G10219 read) (set! G10221 (lambda (G10394) (G10227 G10394))) (set! G10223 (lambda (G10396) (source-info G10396))) (set! G10225 (lambda (G10398) (source-info G10398))) (set! G10227 (lambda (G10400) (if (pair? G10400) (cons (car G10400) (cdr G10400)) (display '"line:46\n")))) (set! G10229 (lambda G10402 (begin (display G10402) '#f))) (set! G10231 (lambda G10404 '#f)) (set! G10233 (lambda (G10406 G10407) (lambda G10410 (begin (display '"record printer") (for-each display G10410))))) (set! G10235 (lambda G10412 (apply error 'comile-core '"not implementated" G10412))) (set! G10237 (lambda (G10414) (with-input-from-file G10414 G10219))) (set! G10239 (lambda G10430 ((lambda (G10431) (if (= G10431 '1) (apply (lambda (G10416) (G10239 G10416 (lambda (G10418) G10418))) G10430) (if (= G10431 '2) (apply (lambda (G10420 G10421) (begin (if (procedure? G10421) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((lambda (G10424) (lambda G10428 ((lambda (G10429) (if (= G10429 '0) (apply (lambda () G10424) G10428) (if (= G10429 '1) (apply (lambda (G10426) (set! G10424 (G10421 G10426))) G10428) (error 'apply '"invalid arg count")))) (length G10428)))) (G10421 G10420)))) G10430) (error 'apply '"invalid arg count")))) (length G10430)))) (set! G10393 (lambda (G10432) G10432)) (begin (set! G10445 G10393) (set! G10444 G10239) (set! G10443 G10237) (set! G10442 G10235) (set! G10441 G10233) (set! G10440 G10231) (set! G10439 G10229) (set! G10438 G10227) (set! G10437 G10225) (set! G10436 G10223) (set! G10435 G10221) (set! G10434 G10219)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G10540 '#f) (define G10541 '#f) (define G10542 '#f) (define G10543 '#f) (define G10544 '#f) (define G10545 '#f) (define G10546 '#f) ((lambda (G10450 G10452 G10454 G10456 G10458 G10460 G10462) (begin (set! G10450 (G10444 (lambda (G10463) '#f) (lambda (G10465) (begin (if (procedure? G10465) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) G10465)))) (set! G10452 (lambda (G10467) ((lambda (G10470) (begin (set! G10470 (lambda (G10471) ((lambda (G10473) (if G10473 G10473 ((lambda (G10475) (if G10475 G10475 ((lambda (G10477) (if G10477 G10477 ((lambda (G10479) (if G10479 G10479 ((lambda (G10481) (if G10481 G10481 ((lambda (G10483) (if G10483 G10483 (begin '#f (number? G10471)))) (bytevector? G10471)))) (string? G10471)))) (boolean? G10471)))) (symbol? G10471)))) (char? G10471)))) (null? G10471)))) (not (G10470 G10467)))) '#f))) (set! G10454 (lambda (G10485) ((lambda (G10488) (begin (set! G10488 (lambda (G10489) (if (pair? G10489) ((lambda (G10491) (if (eqv? G10491 'quote) (if (if G10485 (begin '#f (G10452 (cadr G10489))) '#f) ((lambda (G10530) (begin (set-symbol-value! G10530 (cadr G10489)) G10530)) (gensym)) G10489) (if (eqv? G10491 'case-lambda) (cons 'case-lambda (map (lambda (G10528) (cons (car G10528) (map G10488 (cdr G10528)))) (cdr G10489))) (if (eqv? G10491 'lambda) (cons* 'lambda (cadr G10489) (map G10488 (cddr G10489))) (if (eqv? G10491 'letrec) ((lambda (G10520 G10521) ((lambda (G10524 G10525) (cons* 'letrec (map list G10524 (map G10488 G10525)) (map G10488 G10521))) (map car G10520) (map cadr G10520))) (cadr G10489) (cddr G10489)) (if (eqv? G10491 'letrec*) ((lambda (G10512 G10513) ((lambda (G10516 G10517) (cons* 'letrec* (map list G10516 (map G10488 G10517)) (map G10488 G10513))) (map car G10512) (map cadr G10512))) (cadr G10489) (cddr G10489)) (if (eqv? G10491 'library-letrec*) ((lambda (G10498 G10499) ((lambda (G10502 G10503) ((lambda (G10506 G10507 G10508) (cons* 'library-letrec* G10498 (map list G10506 G10507 (map G10488 G10508)) (map G10488 G10503))) (map car G10502) (map cadr G10502) (map caddr G10502))) (cadr G10499) (cddr G10499))) (cadr G10489) (cdr G10489)) (if (eqv? G10491 'begin) (cons 'begin (map G10488 (cdr G10489))) (if (eqv? G10491 'set!) (list 'set! (cadr G10489) (G10488 (caddr G10489))) (if (eqv? G10491 'primitive) ((lambda (G10492) ((lambda (G10494) (if G10494 ((lambda (G10496) G10496) G10494) G10492)) ((G10450) G10492))) (cadr G10489)) (if (eqv? G10491 'define) G10489 (if (list? G10489) (map G10488 G10489) (error 'rewrite '"invalid form ~s ~s" G10489 (list? G10489)))))))))))))) (car G10489)) G10489))) G10488)) '#f))) (set! G10456 (lambda (G10532) ((G10454 '#t) G10532))) (set! G10458 (lambda (G10534) ((G10454 '#f) G10534))) (set! G10460 write) (set! G10462 (lambda (G10536 G10537) (G10460 ((G10454 '#f) G10536) G10537))) (begin (set! G10546 G10462) (set! G10545 G10460) (set! G10544 G10458) (set! G10543 G10456) (set! G10542 G10454) (set! G10541 G10452) (set! G10540 G10450)))) '#f '#f '#f '#f '#f '#f '#f))
(void)
(begin (define G11059 '#f) (define G11060 '#f) (define G11061 '#f) (define G11062 '#f) (define G11063 '#f) (define G11064 '#f) (define G11065 '#f) (define G11066 '#f) (define G11067 '#f) (define G11068 '#f) (define G11069 '#f) (define G11070 '#f) (define G11071 '#f) (define G11072 '#f) (define G11073 '#f) (define G11074 '#f) (define G11075 '#f) (define G11076 '#f) (define G11077 '#f) (define G11078 '#f) (define G11079 '#f) (define G11080 '#f) (define G11081 '#f) (define G11082 '#f) (define G11083 '#f) (define G11084 '#f) (define G11085 '#f) (define G11086 '#f) (define G11087 '#f) (define G11088 '#f) (define G11089 '#f) (define G11090 '#f) (define G11091 '#f) (define G11092 '#f) (define G11093 '#f) (define G11094 '#f) (define G11095 '#f) (define G11096 '#f) (define G11097 '#f) (define G11098 '#f) (define G11099 '#f) (define G11100 '#f) (define G11101 '#f) (define G11102 '#f) (define G11103 '#f) (define G11104 '#f) (define G11105 '#f) (define G11106 '#f) (define G11107 '#f) (define G11108 '#f) (define G11109 '#f) (define G11110 '#f) (define G11111 '#f) (define G11112 '#f) (define G11113 '#f) (define G11114 '#f) (define G11115 '#f) (define G11116 '#f) (define G11117 '#f) (define G11118 '#f) (define G11119 '#f) ((lambda (G10636 G10638 G10644 G10646 G10648 G10653 G10655 G10657 G10659 G10661 G10663 G10665 G10667 G10669 G10671 G10673 G10675 G10677 G10679 G10681 G10683 G10685 G10687 G10689 G10691 G10693 G10695 G10697 G10699 G10701 G10703 G10705 G10707 G10709 G10711 G10713 G10715 G10717 G10719 G10721 G10723 G10725 G10727 G10729 G10731 G10733 G10735 G10737 G10739 G10741 G10743 G10745 G10747 G10749 G10751 G10753 G10755 G10757 G10759 G10761 G10763) (begin (set! G10636 (lambda () ((lambda (G10764) ((lambda (G10767) (begin (set! G10767 (lambda (G10772 G10773) (if (memq G10772 G10773) G10773 (cons G10772 G10773)))) (lambda G10770 ((lambda (G10771) (if (= G10771 '0) (apply (lambda () G10764) G10770) (if (= G10771 '1) (apply (lambda (G10768) (set! G10764 (G10767 G10768 G10764))) G10770) (error 'apply '"invalid arg count")))) (length G10770))))) '#f)) '()))) (set! G10638 (G10444 (G10636) (lambda (G10776) (begin (if (procedure? G10776) (void) (assertion-violation 'current-library-collection '"not a procedure" G10776)) G10776)))) (set! G10644 (make-record-type-descriptor 'library '#f 'G10642 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G10646 '#f) (set! G10648 (make-record-constructor-descriptor G10644 '#f G10646)) (set! G10653 (record-predicate G10644)) (set! G10655 (record-constructor G10648)) (set! G10657 (record-accessor G10644 '0)) (set! G10659 (record-accessor G10644 '1)) (set! G10661 (record-accessor G10644 '2)) (set! G10663 (record-accessor G10644 '3)) (set! G10665 (record-accessor G10644 '4)) (set! G10667 (record-accessor G10644 '5)) (set! G10669 (record-accessor G10644 '6)) (set! G10671 (record-accessor G10644 '7)) (set! G10673 (record-accessor G10644 '8)) (set! G10675 (record-accessor G10644 '9)) (set! G10677 (record-accessor G10644 '10)) (set! G10679 (record-accessor G10644 '11)) (set! G10681 (record-accessor G10644 '12)) (set! G10683 (record-accessor G10644 '13)) (set! G10685 (record-mutator G10644 '0)) (set! G10687 (record-mutator G10644 '1)) (set! G10689 (record-mutator G10644 '2)) (set! G10691 (record-mutator G10644 '3)) (set! G10693 (record-mutator G10644 '4)) (set! G10695 (record-mutator G10644 '5)) (set! G10697 (record-mutator G10644 '6)) (set! G10699 (record-mutator G10644 '7)) (set! G10701 (record-mutator G10644 '8)) (set! G10703 (record-mutator G10644 '9)) (set! G10705 (record-mutator G10644 '10)) (set! G10707 (record-mutator G10644 '11)) (set! G10709 (record-mutator G10644 '12)) (set! G10711 (record-mutator G10644 '13)) (set! G10713 (G10441 'library (lambda (G10778 G10779) (begin (if (G10653 G10778) (void) (assertion-violation 'record-type-printer '"not a library")) (display (format '"#<library ~s>" (if (null? (G10661 G10778)) (G10659 G10778) (append (G10659 G10778) (list (G10661 G10778))))) G10779))))) (set! G10715 (lambda (G10782) (if (null? G10782) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G10717 (lambda (G10784) ((letrec ((G10786 (lambda (G10788) (if (null? G10788) '#f (if (G10784 (car G10788)) (car G10788) (G10786 (cdr G10788))))))) G10786) ((G10638))))) (set! G10719 (G10444 '(".") (lambda (G10790) (if (if (list? G10790) (begin '#f (for-all string? G10790)) '#f) (map (lambda (G10792) G10792) G10790) (assertion-violation 'library-path '"not a list of strings" G10790))))) (set! G10721 (G10444 '(".sls" ".ss" ".scm") (lambda (G10794) (if (if (list? G10794) (begin '#f (for-all string? G10794)) '#f) (map (lambda (G10796) G10796) G10794) (assertion-violation 'library-extensions '"not a list of strings" G10794))))) (set! G10723 (lambda (G10798) (call-with-values (lambda () (open-string-output-port)) (lambda (G10802 G10803) ((lambda (G10806 G10807) ((lambda (G10811) (begin (set! G10811 (lambda (G10826) (if (<= '0 G10826 '9) (display G10826 G10807) (display (integer->char (+ (char->integer '#\A) (- G10826 '10))) G10807)))) (begin ((letrec ((G10812 (lambda (G10814) (if (null? G10814) (void) (begin (display '"/" G10807) (for-each (lambda (G10816) (if ((lambda (G10818) (if G10818 G10818 ((lambda (G10820) (if G10820 G10820 ((lambda (G10822) (if G10822 G10822 (begin '#f (memv G10816 '(#\- #\. #\_ #\~))))) (char<=? '#\nul G10816 '#\9)))) (char<=? '#\A G10816 '#\Z)))) (char<=? '#\a G10816 '#\z)) (display G10816 G10807) (begin (display '"%" G10807) ((lambda (G10824) (begin (G10811 (quotient G10824 '16)) (G10811 (remainder G10824 '16)))) (char->integer G10816))))) (string->list (symbol->string (car G10814)))) (G10812 (cdr G10814))))))) G10812) G10798) (G10806)))) '#f)) G10803 G10802))))) (set! G10725 (G10444 (lambda (G10828) ((lambda (G10830) ((letrec ((G10832 (lambda (G10834 G10835 G10836) (if (null? G10834) ((lambda () ((lambda (G10848 G10850 G10852 G10857 G10859 G10861 G10863 G10865 G10867 G10869) (begin (set! G10848 (make-record-type-descriptor '&library-resolution &condition-rtd 'G10846 '#f '#f '#((immutable library) (immutable files)))) (set! G10850 '#f) (set! G10852 (make-record-constructor-descriptor G10848 &condition-rcd G10850)) (set! G10857 (record-predicate G10848)) (set! G10859 (record-constructor G10852)) (set! G10861 (record-accessor G10848 '0)) (set! G10863 (record-accessor G10848 '1)) (set! G10865 (condition-predicate G10848)) (set! G10867 (condition-accessor G10848 G10861)) (set! G10869 (condition-accessor G10848 G10863)) (raise (condition (G19162) (G19188 'expander) (G19142 '"cannot locate library in library-path") (G10859 G10828 (reverse G10836)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G10835) (G10832 (cdr G10834) (G10721) G10836) ((lambda (G10870) (if (file-exists? G10870) G10870 (G10832 G10834 (cdr G10835) (cons G10870 G10836)))) (string-append (car G10834) G10830 (car G10835)))))))) G10832) (G10719) (G10721) '())) (G10723 G10828))) (lambda (G10872) (if (procedure? G10872) G10872 (assertion-violation 'file-locator '"not a procedure" G10872))))) (set! G10727 (lambda (G10874 G10875) ((lambda (G10879) (begin (set! G10879 (lambda (G10882) (list (G10657 G10882) (G10659 G10882)))) (for-each (lambda (G10880) (if (G10683 G10880) (G10874 (G10683 G10880) (list (G10657 G10880) (G10659 G10880) (G10661 G10880) (map G10879 (G10663 G10880)) (map G10879 (G10665 G10880)) (map G10879 (G10667 G10880)) (G10669 G10880) (G10671 G10880) (G10875 (G10677 G10880)) (G10875 (G10679 G10880)) (G10681 G10880))) (void))) ((G10638))))) '#f))) (set! G10729 (G10444 (lambda (G10884 G10885) '#f))) (set! G10731 (lambda (G10888) ((G10729) G10888 (lambda G10926 ((lambda (G10927) (if (= G10927 '11) (apply (lambda (G10890 G10891 G10892 G10893 G10894 G10895 G10896 G10897 G10898 G10899 G10900) ((letrec ((G10912 (lambda (G10914) (if (null? G10914) (begin (G10751 G10890 G10891 G10892 G10893 G10894 G10895 G10896 G10897 G10898 G10899 '#f '#f G10900 '#f) '#t) ((lambda (G10916) ((lambda (G10918 G10919) ((lambda (G10922) (if (if (G10653 G10922) (begin '#f (eq? G10918 (G10657 G10922))) '#f) (G10912 (cdr G10914)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source.\n" G10891 G10919 G10888) '#f))) (G10741 G10919))) (car G10916) (cadr G10916))) (car G10914)))))) G10912) (append G10893 G10894 G10895))) G10926) (if (>= G10927 '0) (apply (lambda G10924 '#f) G10926) (error 'apply '"invalid arg count")))) (length G10926)))))) (set! G10733 (G10444 (lambda (G10928) ((lambda (G10930) (if (not G10930) (assertion-violation '#f '"cannot file library" G10928) ((lambda (G10932) (if G10932 G10932 (begin '#f ((G10735) (G10443 G10930) G10930 (lambda (G10934) (if (equal? G10934 G10928) (void) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G10938 G10939) ((lambda (G10942 G10943) (begin (display '"expected to find library " G10943) (write G10928 G10943) (display '" in file " G10943) (display G10930 G10943) (display '", found " G10943) (write G10934 G10943) (display '" instead" G10943) (G10942))) G10939 G10938)))))))))) (G10731 G10930)))) ((G10725) G10928))) (lambda (G10946) (if (procedure? G10946) G10946 (assertion-violation 'library-locator '"not a procedure" G10946))))) (set! G10735 (G10444 (lambda (G10948) (assertion-violation 'library-expander '"not initialized")) (lambda (G10950) (if (procedure? G10950) G10950 (assertion-violation 'library-expander '"not a procedure" G10950))))) (set! G10737 (G10444 '())) (set! G10739 (lambda (G10952) (begin (if (member G10952 (G10737)) (assertion-violation '#f '"circular attempt to import library was detected" G10952) (void)) ((lambda (G10956 G10957) ((lambda (G10960) (dynamic-wind G10960 (lambda () (begin ((G10733) G10952) ((lambda (G10962) (if G10962 G10962 (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G10952)))) (G10717 (lambda (G10964) (equal? (G10659 G10964) G10952)))))) G10960)) (lambda () ((lambda (G10966) (begin (G10956 G10957) (set! G10957 G10966))) (G10956))))) G10737 (cons G10952 (G10737)))))) (set! G10741 (lambda (G10968) ((lambda (G10970) (if G10970 G10970 (begin '#f (G10739 G10968)))) (G10717 (lambda (G10972) (equal? (G10659 G10972) G10968)))))) (set! G10743 (lambda (G10974) (if (G10717 (lambda (G10976) (equal? (G10659 G10976) G10974))) (begin '#f '#t) '#f))) (set! G10745 (lambda (G10978) ((lambda (G10980) ((lambda (G10982) (if G10982 G10982 (begin '#f (assertion-violation '#f '"cannot find library with required spec" G10978)))) (G10717 (lambda (G10984) (eq? G10980 (G10657 G10984)))))) (car G10978)))) (set! G10747 (make-eq-hashtable)) (set! G10749 (lambda (G10986) (begin ((lambda (G10988) (for-each (lambda (G10990) ((lambda (G10992 G10993) ((lambda (G10996) (hashtable-set! G10747 G10992 G10996)) ((lambda (G10998) (if (eqv? G10998 'global) (cons 'global (cons G10986 (cdr G10993))) (if (eqv? G10998 'global-macro) (cons 'global-macro (cons G10986 (cdr G10993))) (if (eqv? G10998 'global-macro!) (cons 'global-macro! (cons G10986 (cdr G10993))) G10993)))) (car G10993)))) (car G10990) (cdr G10990))) G10988)) (G10671 G10986)) ((G10638) G10986)))) (set! G10751 (lambda (G10999 G11000 G11001 G11002 G11003 G11004 G11005 G11006 G11007 G11008 G11009 G11010 G11011 G11012) ((lambda (G11027 G11028 G11029) (begin (if (if (symbol? G10999) (if (list? G11000) (begin '#f (list? G11001)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" G10999 G11000 G11001)) (if (G10743 G11000) (assertion-violation 'install-library '"library is already installed" G11000) (void)) ((lambda (G11033) (G10749 G11033)) (G10655 G10999 G11000 G11001 G11027 G11028 G11029 G11005 G11006 G11007 G11008 G11009 G11010 G11011 G11012)))) (map G10745 G11002) (map G10745 G11003) (map G10745 G11004)))) (set! G10753 (lambda (G11035) (hashtable-ref G10747 G11035 '#f))) (set! G10755 (lambda (G11037) ((lambda (G11039) (if (procedure? G11039) (begin (G10703 G11037 (lambda () (assertion-violation 'invoke '"circularity detected" G11037))) (for-each G10755 (G10667 G11037)) (G10703 G11037 (lambda () (assertion-violation 'invoke '"first invoke did not return" G11037))) (G11039) (G10703 G11037 '#t)) (void))) (G10675 G11037)))) (set! G10757 (lambda (G11041) ((lambda (G11043) (if (procedure? G11043) (begin (G10701 G11041 (lambda () (assertion-violation 'visit '"circularity detected" G11041))) (for-each G10755 (G10665 G11041)) (G10701 G11041 (lambda () (assertion-violation 'invoke '"first visit did not return" G11041))) (G11043) (G10701 G11041 '#t)) (void))) (G10673 G11041)))) (set! G10759 (lambda (G11045) (G10755 (G10745 G11045)))) (set! G10761 (lambda G11055 ((lambda (G11056) (if (= G11056 '1) (apply (lambda (G11047) ((letrec ((G11049 (lambda (G11051) (if (null? G11051) '() (if ((lambda (G11053) (if G11053 G11053 (begin '#f (G10681 (car G11051))))) G11047) (cons (car G11051) (G11049 (cdr G11051))) (G11049 (cdr G11051))))))) G11049) ((G10638)))) G11055) (if (= G11056 '0) (apply (lambda () (G10761 '#f)) G11055) (error 'apply '"invalid arg count")))) (length G11055)))) (set! G10763 (lambda (G11057) (begin (if (G10653 G11057) (void) (assertion-violation 'library-spec '"not a library" G11057)) (list (G10657 G11057) (G10659 G11057) (G10661 G11057))))) (begin (set! G11119 G10763) (set! G11118 G10761) (set! G11117 G10759) (set! G11116 G10757) (set! G11115 G10755) (set! G11114 G10753) (set! G11113 G10751) (set! G11112 G10749) (set! G11111 G10747) (set! G11110 G10745) (set! G11109 G10743) (set! G11108 G10741) (set! G11107 G10739) (set! G11106 G10737) (set! G11105 G10735) (set! G11104 G10733) (set! G11103 G10731) (set! G11102 G10729) (set! G11101 G10727) (set! G11100 G10725) (set! G11099 G10723) (set! G11098 G10721) (set! G11097 G10719) (set! G11096 G10717) (set! G11095 G10715) (set! G11094 G10713) (set! G11093 G10711) (set! G11092 G10709) (set! G11091 G10707) (set! G11090 G10705) (set! G11089 G10703) (set! G11088 G10701) (set! G11087 G10699) (set! G11086 G10697) (set! G11085 G10695) (set! G11084 G10693) (set! G11083 G10691) (set! G11082 G10689) (set! G11081 G10687) (set! G11080 G10685) (set! G11079 G10683) (set! G11078 G10681) (set! G11077 G10679) (set! G11076 G10677) (set! G11075 G10675) (set! G11074 G10673) (set! G11073 G10671) (set! G11072 G10669) (set! G11071 G10667) (set! G11070 G10665) (set! G11069 G10663) (set! G11068 G10661) (set! G11067 G10659) (set! G11066 G10657) (set! G11065 G10655) (set! G11064 G10653) (set! G11063 G10648) (set! G11062 G10646) (set! G11061 G10644) (set! G11060 G10638) (set! G11059 G10636)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G11459 '#f) (define G11460 '#f) (define G11461 '#f) (define G11462 '#f) (define G11463 '#f) (define G11464 '#f) (define G11465 '#f) (define G11466 '#f) (define G11467 '#f) ((lambda (G11122 G11254 G11256 G11258 G11330 G11332 G11334 G11336 G11338) (begin (set! G11122 (lambda (G11339) (cons 'define (cons G11339 '('#f))))) (set! G11254 (lambda (G11341 G11342 G11343) (list 'lambda G11342 G11343))) (set! G11256 (lambda (G11347 G11348 G11349) ((lambda (G11354 G11356 G11358 G11360) (begin (set! G11354 (lambda (G11407) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G11356 (lambda (G11385 G11386 G11387) (call-with-values (lambda () ((letrec ((G11393 (lambda (G11395 G11396) (if (pair? G11395) (G11393 (cdr G11395) (+ G11396 '1)) (if (null? G11395) (values G11396 '=) (values G11396 '>=)))))) G11393) G11387 '0)) (lambda (G11399 G11400) ((lambda (G11403 G11404) (list (list 'primitive G11403) G11386 (list 'quote G11404))) G11400 G11399))))) (set! G11358 (lambda (G11377 G11378 G11379 G11380) (list '(primitive apply) (G11254 G11377 G11379 G11380) G11378))) (set! G11360 (lambda (G11361 G11362 G11363) ((lambda (G11367 G11368) (list 'lambda G11367 (G11258 G11361 (list G11368) (list (list '(primitive length) G11367)) ((letrec ((G11371 (lambda (G11373 G11374) (if (null? G11373) (G11354 G11361) (list 'if (G11356 G11361 G11368 (car G11373)) (G11358 G11361 G11367 (car G11373) (car G11374)) (G11371 (cdr G11373) (cdr G11374))))))) G11371) G11348 G11363)))) (gensym) (gensym)))) (if (= (length G11349) '1) (G11254 G11347 (car G11348) (car G11349)) (G11360 G11347 G11348 G11349)))) '#f '#f '#f '#f))) (set! G11258 (lambda (G11409 G11410 G11411 G11412) (cons (G11254 G11409 G11410 G11412) G11411))) (set! G11330 (lambda (G11417 G11418) ((letrec ((G11421 (lambda (G11423) (if (null? (cdr G11423)) (car G11423) (if (equal? (car G11423) (G11332)) (G11421 (cdr G11423)) (cons 'begin G11423)))))) G11421) G11418))) (set! G11332 (lambda () '((primitive void)))) (set! G11334 (lambda (G11425 G11426 G11427 G11428) (if (null? G11426) G11428 (list 'letrec (map list G11426 G11427) G11428)))) (set! G11336 (lambda (G11433 G11434 G11435 G11436) (if (null? G11434) G11436 (G11258 G11433 G11434 (map (lambda (G11441) (list 'quote '#f)) G11434) (G11330 G11433 (append (map (lambda (G11443 G11444) (list 'set! G11443 G11444)) G11434 G11435) (list G11436))))))) (set! G11338 (lambda (G11447 G11448 G11449 G11450 G11451 G11452) (list 'library-letrec* G11448 (map list G11449 G11450 G11451) G11452))) (begin (set! G11467 G11338) (set! G11466 G11336) (set! G11465 G11334) (set! G11464 G11332) (set! G11463 G11330) (set! G11462 G11258) (set! G11461 G11256) (set! G11460 G11254) (set! G11459 G11122)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G18561 '#f) (define G18562 '#f) (define G18563 '#f) (define G18564 '#f) (define G18565 '#f) (define G18566 '#f) (define G18567 '#f) (define G18568 '#f) (define G18569 '#f) (define G18570 '#f) (define G18571 '#f) (define G18572 '#f) (define G18573 '#f) (define G18574 '#f) (define G18575 '#f) (define G18576 '#f) (define G18577 '#f) (define G18578 '#f) (define G18579 '#f) (define G18580 '#f) (define G18581 '#f) (define G18582 '#f) (define G18583 '#f) (define G18584 '#f) (define G18585 '#f) (define G18586 '#f) (define G18587 '#f) (define G18588 '#f) (define G18589 '#f) (define G18590 '#f) (define G18591 '#f) (define G18592 '#f) (define G18593 '#f) (define G18594 '#f) (define G18595 '#f) (define G18596 '#f) (define G18597 '#f) (define G18598 '#f) (define G18599 '#f) (define G18600 '#f) (define G18601 '#f) (define G18602 '#f) (define G18603 '#f) (define G18604 '#f) (define G18605 '#f) (define G18606 '#f) (define G18607 '#f) (define G18608 '#f) (define G18609 '#f) (define G18610 '#f) (define G18611 '#f) (define G18612 '#f) (define G18613 '#f) (define G18614 '#f) (define G18615 '#f) (define G18616 '#f) (define G18617 '#f) (define G18618 '#f) (define G18619 '#f) (define G18620 '#f) (define G18621 '#f) (define G18622 '#f) (define G18623 '#f) (define G18624 '#f) (define G18625 '#f) (define G18626 '#f) (define G18627 '#f) (define G18628 '#f) (define G18629 '#f) (define G18630 '#f) (define G18631 '#f) (define G18632 '#f) (define G18633 '#f) (define G18634 '#f) (define G18635 '#f) (define G18636 '#f) (define G18637 '#f) (define G18638 '#f) (define G18639 '#f) (define G18640 '#f) (define G18641 '#f) (define G18642 '#f) (define G18643 '#f) (define G18644 '#f) (define G18645 '#f) (define G18646 '#f) (define G18647 '#f) (define G18648 '#f) (define G18649 '#f) (define G18650 '#f) (define G18651 '#f) (define G18652 '#f) (define G18653 '#f) (define G18654 '#f) (define G18655 '#f) (define G18656 '#f) (define G18657 '#f) (define G18658 '#f) (define G18659 '#f) (define G18660 '#f) (define G18661 '#f) (define G18662 '#f) (define G18663 '#f) (define G18664 '#f) (define G18665 '#f) (define G18666 '#f) (define G18667 '#f) (define G18668 '#f) (define G18669 '#f) (define G18670 '#f) (define G18671 '#f) (define G18672 '#f) (define G18673 '#f) (define G18674 '#f) (define G18675 '#f) (define G18676 '#f) (define G18677 '#f) (define G18678 '#f) (define G18679 '#f) (define G18680 '#f) (define G18681 '#f) (define G18682 '#f) (define G18683 '#f) (define G18684 '#f) (define G18685 '#f) (define G18686 '#f) (define G18687 '#f) (define G18688 '#f) (define G18689 '#f) (define G18690 '#f) (define G18691 '#f) (define G18692 '#f) (define G18693 '#f) (define G18694 '#f) (define G18695 '#f) (define G18696 '#f) (define G18697 '#f) (define G18698 '#f) (define G18699 '#f) (define G18700 '#f) (define G18701 '#f) (define G18702 '#f) (define G18703 '#f) (define G18704 '#f) (define G18705 '#f) (define G18706 '#f) (define G18707 '#f) (define G18708 '#f) (define G18709 '#f) (define G18710 '#f) (define G18711 '#f) (define G18712 '#f) (define G18713 '#f) (define G18714 '#f) (define G18715 '#f) (define G18716 '#f) (define G18717 '#f) (define G18718 '#f) (define G18719 '#f) (define G18720 '#f) (define G18721 '#f) (define G18722 '#f) (define G18723 '#f) (define G18724 '#f) (define G18725 '#f) (define G18726 '#f) (define G18727 '#f) (define G18728 '#f) (define G18729 '#f) (define G18730 '#f) (define G18731 '#f) (define G18732 '#f) (define G18733 '#f) (define G18734 '#f) (define G18735 '#f) (define G18736 '#f) (define G18737 '#f) (define G18738 '#f) (define G18739 '#f) (define G18740 '#f) (define G18741 '#f) (define G18742 '#f) (define G18743 '#f) (define G18744 '#f) (define G18745 '#f) (define G18746 '#f) (define G18747 '#f) (define G18748 '#f) (define G18749 '#f) (define G18750 '#f) (define G18751 '#f) (define G18752 '#f) (define G18753 '#f) (define G18754 '#f) (define G18755 '#f) (define G18756 '#f) (define G18757 '#f) (define G18758 '#f) (define G18759 '#f) (define G18760 '#f) (define G18761 '#f) (define G18762 '#f) (define G18763 '#f) (define G18764 '#f) (define G18765 '#f) (define G18766 '#f) (define G18767 '#f) (define G18768 '#f) (define G18769 '#f) (define G18770 '#f) (define G18771 '#f) (define G18772 '#f) (define G18773 '#f) (define G18774 '#f) (define G18775 '#f) (define G18776 '#f) (define G18777 '#f) (define G18778 '#f) (define G18779 '#f) (define G18780 '#f) (define G18781 '#f) (define G18782 '#f) (define G18783 '#f) (define G18784 '#f) (define G18785 '#f) (define G18786 '#f) (define G18787 '#f) (define G18788 '#f) (define G18789 '#f) (define G18790 '#f) (define G18791 '#f) (define G18792 '#f) (define G18793 '#f) (define G18794 '#f) (define G18795 '#f) (define G18796 '#f) (define G18797 '#f) (define G18798 '#f) (define G18799 '#f) (define G18800 '#f) (define G18801 '#f) (define G18802 '#f) (define G18803 '#f) (define G18804 '#f) (define G18805 '#f) (define G18806 '#f) (define G18807 '#f) (define G18808 '#f) (define G18809 '#f) (define G18810 '#f) (define G18811 '#f) (define G18812 '#f) (define G18813 '#f) (define G18814 '#f) (define G18815 '#f) (define G18816 '#f) (define G18817 '#f) (define G18818 '#f) (define G18819 '#f) (define G18820 '#f) ((lambdabegin (set! G11480 (lambda (G12444 G12445) (if (memq G12444 G12445) G12445 (cons G12444 G12445)))) (set! G11482 (lambda (G12448 G12449) (if (null? G12448) G12449 (if (memq (car G12448) G12449) (G11482 (cdr G12448) G12449) (cons (car G12448) (G11482 (cdr G12448) G12449)))))) (set! G11487 '(top)) (set! G11489 (lambda (G12452) (memq 'top G12452))) (set! G11491 (lambda (G12454) (if (symbol? G12454) (gensym G12454) (if (G11561 G12454) (G11491 (G11619 G12454)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G12454))))) (set! G11493 (lambda (G12456) (G11491 G12456))) (set! G11495 (lambda (G12458) (gensym))) (set! G11497 (lambda (G12460 G12461) ((lambda (G12465) (begin (set! G12465 (lambda (G12476 G12477 G12478 G12479 G12480) (if (pair? G12478) (begin '#f (if (if (eq? G12476 (car G12478)) (begin '#f (G11621 G12477 (car G12479))) '#f) (car G12480) (G12465 G12476 G12477 (cdr G12478) (cdr G12479) (cdr G12480)))) '#f))) ((lambda (G12466 G12467) ((lambda (G12470) ((lambda (G12472) (if G12472 ((lambda (G12474) (if (G11114 G12474) (gensym) G12474)) G12472) (gensym))) (if (memq G12466 (G11520 G12461)) (begin '#f (G12465 G12466 G12467 G12470 (G11522 G12461) (G11524 G12461))) '#f))) (G11520 G12461))) (G11619 G12460) (G11567 G12460)))) '#f))) (set! G11499 (lambda (G12486 G12487) ((lambda (G12490) (if G12490 ((lambda (G12492) ((lambda (G12494 G12495) (values G12494 ((lambda (G12498) (if G12498 (cdr G12498) ((lambda (G12500) (begin (G12383 G12492 (cons (cons G12494 G12500) G12495)) G12500)) (G11491 G12486)))) (assq G12494 G12495)))) (G11497 G12486 G12487) (G12377 G12492))) G12490) (values (gensym) (G11491 G12486)))) (G12443)))) (set! G11501 (lambda (G12502 G12503) (if (G12443) (G11497 G12502 G12503) (gensym)))) (set! G11507 (make-record-type-descriptor 'rib '#f 'G11505 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! G11509 '#f) (set! G11511 (make-record-constructor-descriptor G11507 '#f G11509)) (set! G11516 (record-predicate G11507)) (set! G11518 (record-constructor G11511)) (set! G11520 (record-accessor G11507 '0)) (set! G11522 (record-accessor G11507 '1)) (set! G11524 (record-accessor G11507 '2)) (set! G11526 (record-accessor G11507 '3)) (set! G11528 (record-mutator G11507 '0)) (set! G11530 (record-mutator G11507 '1)) (set! G11532 (record-mutator G11507 '2)) (set! G11534 (record-mutator G11507 '3)) (set! G11536 (lambda () (G11518 '() '() '() '#f))) (set! G11538 (lambda (G12506 G12507 G12508) ((lambda (G12513) (begin (set! G12513 (lambda (G12524 G12525 G12526 G12527 G12528) (if (pair? G12526) (begin '#f (if (if (eq? G12524 (car G12526)) (begin '#f (G11621 G12525 (car G12527))) '#f) G12528 (G12513 G12524 G12525 (cdr G12526) (cdr G12527) (cdr G12528)))) '#f))) (begin (if (G11526 G12506) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G12506) (void)) ((lambda (G12514 G12515) ((lambda (G12518) ((lambda (G12520) (if G12520 ((lambda (G12522) (if (eq? G12508 (car G12522)) (void) (if (G12443) (set-car! G12522 G12508) (G12429 '#f '"cannot redefine" G12507)))) G12520) (begin (G11528 G12506 (cons G12514 G12518)) (G11530 G12506 (cons G12515 (G11522 G12506))) (G11532 G12506 (cons G12508 (G11524 G12506)))))) (if (memq G12514 (G11520 G12506)) (begin '#f (G12513 G12514 G12515 G12518 (G11522 G12506) (G11524 G12506))) '#f))) (G11520 G12506))) (G11619 G12507) (G11567 G12507))))) '#f))) (set! G11540 (lambda (G12534) ((lambda (G12536) ((letrec ((G12538 (lambda (G12540 G12541) (if (null? G12541) G12536 (begin (hashtable-update! G12536 (car G12541) (lambda (G12544) (cons G12540 G12544)) '()) (G12538 (+ G12540 '1) (cdr G12541))))))) G12538) '0 G12534)) (make-eq-hashtable)))) (set! G11542 (lambda (G12546) ((lambda (G12548) (if (null? G12548) (void) (begin (G11528 G12546 (list->vector G12548)) (G11530 G12546 (list->vector (G11522 G12546))) (G11532 G12546 (list->vector (G11524 G12546))) (G11534 G12546 (G11540 G12548))))) (G11520 G12546)))) (set! G11544 (lambda (G12550) (if (G11526 G12550) (begin (G11534 G12550 '#f) (G11528 G12550 (vector->list (G11520 G12550))) (G11530 G12550 (vector->list (G11522 G12550))) (G11532 G12550 (vector->list (G11524 G12550)))) (void)))) (set! G11546 (lambda (G12552 G12553) ((lambda (G12556) (begin (G11542 G12556) G12556)) (G11518 (map G11619 G12552) (map G11567 G12552) G12553 '#f)))) (set! G11552 (make-record-type-descriptor 'stx '#f 'G11550 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G11554 '#f) (set! G11556 (make-record-constructor-descriptor G11552 '#f G11554)) (set! G11561 (record-predicate G11552)) (set! G11563 (record-constructor G11556)) (set! G11565 (record-accessor G11552 '0)) (set! G11567 (record-accessor G11552 '1)) (set! G11569 (record-accessor G11552 '2)) (set! G11571 (record-accessor G11552 '3)) (set! G11573 (record-mutator G11552 '0)) (set! G11575 (record-mutator G11552 '1)) (set! G11577 (record-mutator G11552 '2)) (set! G11579 (record-mutator G11552 '3)) (set! G11581 (G10441 'stx (lambda (G12558 G12559) (begin (display '"#<syntax " G12559) (write (G11639 G12558) G12559) ((lambda (G12562) (if (G10436 G12562) ((lambda (G12564) (if (pair? G12564) (begin (display '" [" G12559) (display (cdr G12564) G12559) (display '" of " G12559) (display (car G12564) G12559) (display '"]" G12559)) (void))) (G10437 G12562)) (void))) (G11565 G12558)) (display '">" G12559))))) (set! G11583 (lambda (G12566 G12567) (G11563 G12567 (G11567 G12566) (G11569 G12566) (G11571 G12566)))) (set! G11585 (lambda () (string '#\m))) (set! G11587 '#f) (set! G11589 not) (set! G11591 (lambda (G12570 G12571 G12572 G12573) ((lambda (G12579) (begin (set! G12579 (lambda (G12586 G12587) ((letrec ((G12590 (lambda (G12592 G12593) (if (null? G12593) (cdr G12587) (cons G12592 (G12590 (car G12593) (cdr G12593))))))) G12590) (car G12586) (cdr G12586)))) ((lambda (G12580 G12581 G12582) (if (if (not (null? G12570)) (if (not (null? G12580)) (begin '#f (G11589 (car G12580))) '#f) '#f) (values (G12579 G12570 G12580) (G12579 G12571 G12581) (G12579 G12572 G12582)) (values (append G12570 G12580) (append G12571 G12581) (append G12572 G12582)))) (G11567 G12573) (G11569 G12573) (G11571 G12573)))) '#f))) (set! G11593 (lambda (G12596 G12597 G12598 G12599) (if (G11561 G12596) (call-with-values (lambda () (G11591 G12597 G12598 G12599 G12596)) (lambda (G12607 G12608 G12609) ((lambda (G12613 G12614 G12615) (G11563 (G11565 G12596) G12615 G12614 G12613)) G12609 G12608 G12607))) (G11563 G12596 G12597 G12598 G12599)))) (set! G11595 (lambda (G12619 G12620 G12621) (G11593 G12620 (list G12619) '(shift) (list G12621)))) (set! G11597 (lambda (G12625 G12626) (G11593 G12626 '() (list G12625) '()))) (set! G11599 (lambda (G12629 G12630) (if (G11561 G12629) (G11599 (G11565 G12629) G12630) (if (G10436 G12629) (G11599 (G10438 G12629) G12630) (G12630 G12629))))) (set! G11601 (lambda (G12633) (if (G11561 G12633) ((lambda (G12635 G12636 G12637 G12638) (map (lambda (G12643) (G11593 G12643 G12636 G12637 G12638)) G12635)) (G11601 (G11565 G12633)) (G11567 G12633) (G11569 G12633) (G11571 G12633)) (if (G10436 G12633) (G11601 (G10438 G12633)) (if (vector? G12633) (vector->list G12633) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G12633)))))) (set! G11603 (lambda (G12645) (G11599 G12645 pair?))) (set! G11605 (lambda (G12647) (G11599 G12647 vector?))) (set! G11607 (lambda (G12649) (G11599 G12649 null?))) (set! G11609 (lambda (G12651) ((lambda (G12653) (if G12653 G12653 (begin '#f (if (G11603 G12651) (begin '#f (G11609 (G11613 G12651))) '#f)))) (G11607 G12651)))) (set! G11611 (lambda (G12655) (if (G11561 G12655) (G11593 (G11611 (G11565 G12655)) (G11567 G12655) (G11569 G12655) (G11571 G12655)) (if (G10436 G12655) (G11611 (G10438 G12655)) (if (pair? G12655) (car G12655) (assertion-violation 'syntax-car '"BUG: not a pair" G12655)))))) (set! G11613 (lambda (G12657) (if (G11561 G12657) (G11593 (G11613 (G11565 G12657)) (G11567 G12657) (G11569 G12657) (G11571 G12657)) (if (G10436 G12657) (G11613 (G10438 G12657)) (if (pair? G12657) (cdr G12657) (assertion-violation 'syntax-cdr '"BUG: not a pair" G12657)))))) (set! G11615 (lambda (G12659) (if (G11603 G12659) (cons (G11611 G12659) (G11615 (G11613 G12659))) (if (G11607 G12659) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G12659))))) (set! G11617 (lambda (G12661) (if (G11561 G12661) (begin '#f ((lambda (G12663) (symbol? (if (G10436 G12663) (G10435 G12663) G12663))) (G11565 G12661))) '#f))) (set! G11619 (lambda (G12665) (begin (if (G11561 G12665) (void) (error 'id->sym '"BUG in ikarus: not an id" G12665)) ((lambda (G12667) ((lambda (G12669) (if (symbol? G12669) G12669 (error 'id->sym '"BUG in ikarus: not an id" G12665))) (if (G10436 G12667) (G10435 G12667) G12667))) (G11565 G12665))))) (set! G11621 (lambda (G12671 G12672) ((lambda (G12675) (if G12675 G12675 (begin '#f (if (pair? G12671) (if (pair? G12672) (if (eq? (car G12671) (car G12672)) (begin '#f (G11621 (cdr G12671) (cdr G12672))) '#f) '#f) '#f)))) (if (null? G12671) (begin '#f (null? G12672)) '#f)))) (set! G11623 (lambda (G12677 G12678) (if (eq? (G11619 G12677) (G11619 G12678)) (begin '#f (G11621 (G11567 G12677) (G11567 G12678))) '#f))) (set! G11625 (lambda (G12681 G12682) ((lambda (G12685 G12686) (if ((lambda (G12689) (if G12689 G12689 (begin '#f G12686))) G12685) (eq? G12685 G12686) (eq? (G11619 G12681) (G11619 G12682)))) (G11645 G12681) (G11645 G12682)))) (set! G11627 (lambda (G12691) (if (for-all G11617 G12691) (begin '#f (G11629 G12691)) '#f))) (set! G11629 (lambda (G12693) ((lambda (G12695) (if G12695 G12695 (begin '#f (if (not (G11631 (car G12693) (cdr G12693))) (begin '#f (G11629 (cdr G12693))) '#f)))) (null? G12693)))) (set! G11631 (lambda (G12697 G12698) (if (pair? G12698) (begin '#f ((lambda (G12701) (if G12701 G12701 (begin '#f (G11631 G12697 (cdr G12698))))) (G11623 G12697 (car G12698)))) '#f))) (set! G11633 (lambda (G12703) ((lambda (G12705) (if G12705 G12705 ((lambda (G12707) (if G12707 G12707 ((lambda (G12709) (if G12709 G12709 ((lambda (G12711) (if G12711 G12711 (begin '#f (bytevector? G12703)))) (boolean? G12703)))) (char? G12703)))) (string? G12703)))) (number? G12703)))) (set! G11635 (lambda (G12713) (if (pair? G12713) (cons (G11635 (car G12713)) (G11635 (cdr G12713))) (if (vector? G12713) (vector-map G11635 G12713) (if (G10436 G12713) (G10435 G12713) G12713))))) (set! G11637 (lambda (G12715 G12716) (if (G11489 G12716) (if ((lambda (G12719) (if G12719 G12719 ((lambda (G12721) (if G12721 G12721 (begin '#f (if (vector? G12715) (if (> (vector-length G12715) '0) (begin '#f (G10436 (vector-ref G12715 '0))) '#f) '#f)))) (if (pair? G12715) (begin '#f (G10436 (car G12715))) '#f)))) (G10436 G12715)) (G11635 G12715) G12715) ((letrec ((G12723 (lambda (G12725) (if (G11561 G12725) (G11637 (G11565 G12725) (G11567 G12725)) (if (G10436 G12725) (G10435 G12725) (if (pair? G12725) ((lambda (G12727 G12728) (if (if (eq? G12727 (car G12725)) (begin '#f (eq? G12728 (cdr G12725))) '#f) G12725 (cons G12727 G12728))) (G12723 (car G12725)) (G12723 (cdr G12725))) (if (vector? G12725) ((lambda (G12731) ((lambda (G12733) (if (for-all eq? G12731 G12733) G12725 (list->vector G12733))) (map G12723 G12731))) (vector->list G12725)) G12725))))))) G12723) G12715)))) (set! G11639 (lambda (G12735) (G11637 G12735 '()))) (set! G11641 (lambda (G12737 G12738 G12739) (if (null? G12739) '#f (if (G11621 G12737 (vector-ref G12738 (car G12739))) (car G12739) (G11641 G12737 G12738 (cdr G12739)))))) (set! G11643 (lambda (G12743) ((lambda (G12745) (if G12745 G12745 (begin '#f ((lambda (G12747) (if G12747 ((lambda (G12749) ((lambda (G12751) (call-with-values (lambda () (G11499 G12743 G12751)) (lambda (G12755 G12756) ((lambda (G12759 G12760) (begin (G11538 G12751 G12743 G12760) G12760)) G12756 G12755)))) (G12373 G12749))) G12747) '#f)) (G12443))))) (G11645 G12743)))) (set! G11645 (lambda (G12763) ((lambda (G12765) ((letrec ((G12767 (lambda (G12769 G12770) (if (null? G12769) '#f (if (eq? (car G12769) 'shift) (G12767 (cdr G12769) (cdr G12770)) ((lambda (G12773) ((lambda (G12775) (if G12775 ((lambda (G12777) ((lambda (G12779) ((lambda (G12781) (if G12781 (vector-ref (G11524 G12773) G12781) (G12767 (cdr G12769) G12770))) (if G12779 (begin '#f (G11641 G12770 (G11522 G12773) (reverse G12779))) '#f))) (hashtable-ref G12777 G12765 '#f))) G12775) ((letrec ((G12783 (lambda (G12785 G12786 G12787) (if (null? G12785) (G12767 (cdr G12769) G12770) (if (if (eq? (car G12785) G12765) (begin '#f (G11621 (car G12786) G12770)) '#f) (car G12787) (G12783 (cdr G12785) (cdr G12786) (cdr G12787))))))) G12783) (G11520 G12773) (G11522 G12773) (G11524 G12773)))) (G11526 G12773))) (car G12769))))))) G12767) (G11569 G12763) (G11567 G12763))) (G11619 G12763)))) (set! G11647 (lambda (G12791 G12792) ((lambda (G12795) (if G12795 ((lambda (G12797) (if (if (pair? G12797) (begin '#f (eq? (car G12797) '$core-rtd)) '#f) (cons '$rtd (map G12122 (cdr G12797))) (if (if (pair? G12797) (begin '#f (eq? (car G12797) 'global-rtd)) '#f) ((lambda (G12799 G12800) (cons '$rtd (symbol-value G12800))) (cadr G12797) (cddr G12797)) G12797))) G12795) ((lambda (G12803) (if G12803 (cdr G12803) ((lambda (G12805) (if G12805 ((lambda (G12807) ((lambda (G12809) (if G12809 ((lambda (G12811) (cons* 'lexical (cdr G12811) '#f)) G12809) '(displaced-lexical . #f))) (assq G12791 (G12377 G12807)))) G12805) '(displaced-lexical . #f))) (G12443)))) (assq G12791 G12792)))) (G11114 G12791)))) (set! G11649 cons) (set! G11651 car) (set! G11653 cdr) (set! G11655 (lambda (G12813) (G12427 '#f '"unbound identifier" G12813 (G19224)))) (set! G11657 (lambda (G12815 G12816) (if (G11617 G12815) ((lambda (G12819) ((lambda (G12821) ((lambda (G12823) ((lambda (G12825) ((lambda () (begin (if G12821 (void) (G11655 G12819)) ((lambda (G12827) (if (memv G12827 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values G12825 (G11653 G12823) G12819) (values 'other '#f '#f))) G12825))))) (G11651 G12823))) (G11647 G12821 G12816))) (G11643 G12819))) G12815) (if (G11603 G12815) ((lambda (G12828) (if (G11617 G12828) ((lambda (G12830) ((lambda (G12832) ((lambda (G12834) ((lambda () (begin (if G12830 (void) (G11655 G12828)) ((lambda (G12836) (if (memv G12836 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values G12834 (G11653 G12832) G12828) (values 'call '#f '#f))) G12834))))) (G11651 G12832))) (G11647 G12830 G12816))) (G11643 G12828)) (values 'call '#f '#f))) (G11611 G12815)) ((lambda (G12837) (if (G11633 G12837) (values 'constant G12837 '#f) (values 'other '#f '#f))) (G11639 G12815)))))) (set! G11680 (lambda (G12839 G12840) (if (procedure? G12839) (cons* 'local-macro G12839 G12840) (if (if (pair? G12839) (if (eq? (car G12839) 'macro!) (begin '#f (procedure? (cdr G12839))) '#f) '#f) (cons* 'local-macro! (cdr G12839) G12840) (if (if (pair? G12839) (begin '#f (eq? (car G12839) '$rtd)) '#f) G12839 (assertion-violation 'expand '"invalid transformer" G12839)))))) (set! G11682 (lambda (G12843) (if (procedure? G12843) (cons 'macro! G12843) (assertion-violation 'make-variable-transformer '"not a procedure" G12843)))) (set! G11684 (lambda (G12845) (if (pair? G12845) (if (eq? (car G12845) 'macro!) (begin '#f (procedure? (cdr G12845))) '#f) '#f))) (set! G11686 (lambda (G12847) (if (G11684 G12847) (cdr G12847) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G12847)))) (set! G11688 (lambda (G12849) (G11680 (eval-core (G10543 G12849)) G12849))) (set! G12076 (lambda (G12851) ((lambda (G12853) ((lambda (G12855) (if (if G12855 (begin '#f (apply (lambda (G12857 G12858 G12859 G12860) (G11617 G12857)) G12855)) '#f) (apply (lambda (G12865 G12866 G12867 G12868) (begin (G12236 G12866 G12851) (values G12865 (cons 'defun (cons G12866 (cons G12867 G12868)))))) G12855) ((lambda (G12873) ((lambda (G12875) (if (if G12875 (begin '#f (apply (lambda (G12877 G12878) (G11617 G12877)) G12875)) '#f) (apply (lambda (G12881 G12882) (values G12881 (cons 'expr G12882))) G12875) ((lambda (G12885) ((lambda (G12887) (if (if G12887 (begin '#f (apply (lambda (G12889) (G11617 G12889)) G12887)) '#f) (apply (lambda (G12891) (values G12891 (cons 'expr (G12122 '(void))))) G12887) (G12429 '#f '"invalid syntax" G12885))) (G12196 G12885 '(_ any)))) G12873))) (G12196 G12873 '(_ any any)))) G12853))) (G12196 G12853 '(_ (any . any) any . each-any)))) G12851))) (set! G12078 (lambda (G12893) ((lambda (G12895) ((lambda (G12897) (if (if G12897 (begin '#f (apply (lambda (G12899 G12900) (G11617 G12899)) G12897)) '#f) (apply (lambda (G12903 G12904) (values G12903 G12904)) G12897) (G12429 '#f '"invalid syntax" G12895))) (G12196 G12895 '(_ any any)))) G12893))) (set! G12080 (make-eq-hashtable)) (set! G12082 (lambda (G12907) ((lambda (G12909) (if G12909 G12909 (begin '#f ((lambda (G12911) ((lambda (G12913) ((lambda (G12915) ((lambda () (begin (hashtable-set! G12080 G12907 G12915) G12915)))) ((lambda (G12917) (if G12917 ((lambda (G12919) ((lambda (G12921 G12922) (G11597 (G11518 (list G12921) (list G11487) (list G12922) '#f) G12913)) (car G12919) (cdr G12919))) G12917) G12913)) (assq G12907 G12911)))) (G11563 G12907 G11487 '() '()))) (G11072 (G11108 '(psyntax system $all))))))) (hashtable-ref G12080 G12907 '#f)))) (set! G12084 car) (set! G12086 cdr) (set! G12088 set-cdr!) (set! G12090 (lambda (G12925 G12926 G12927) (cons (cons* G12925 'lexical G12926 '#f) G12927))) (set! G12092 (lambda (G12931 G12932 G12933) (if (null? G12931) G12933 (G12092 (cdr G12931) (cdr G12932) (G12090 (car G12931) (car G12932) G12933))))) (set! G12094 (lambda (G12937 G12938 G12939 G12940) ((lambda (G12945) ((lambda (G12947) (if G12947 (apply (lambda (G12949 G12950 G12951 G12952) (if (not (G11627 G12949)) (G12126 G12937 G12949) ((lambda (G12957 G12958) ((lambda (G12961 G12962) ((lambda (G12965 G12966) (G12940 '#f G12957 G12966 G12965)) (G12254 (G11597 G12961 (cons G12951 G12952)) G12962 G12939) (G12228 (map (lambda (G12969) (G11597 G12961 G12969)) G12950) G12962 G12939))) (G11546 G12949 G12958) (G12092 G12958 G12957 G12938))) (map G11491 G12949) (map G11495 G12949)))) G12947) (G12429 '#f '"invalid syntax" G12945))) (G12196 G12945 '(_ #(each (any any)) any . each-any)))) G12937))) (set! G12096 (lambda (G12971 G12972 G12973) (G12094 G12971 G12972 G12973 G11465))) (set! G12098 (lambda (G12977 G12978 G12979) (G12094 G12977 G12978 G12979 G11466))) (set! G12100 (lambda (G12983 G12984 G12985) ((lambda (G12990) (begin (set! G12990 (lambda (G13009) ((lambda (G13011) (if G13011 G13011 (begin '#f (G12429 '#f '"unbound identifier" G12983 G13009)))) (G11643 G13009)))) ((lambda (G12991) ((lambda (G12993) (if G12993 (apply (lambda (G12995 G12996 G12997 G12998) (if (not (G11627 G12995)) (G12126 G12983 G12995) ((lambda (G13003 G13004) (G12254 (cons G12997 G12998) (append (map cons G13003 G13004) G12984) (append (map cons G13003 G13004) G12985))) (map G12990 G12995) (map (lambda (G13007) (G11688 (G12293 G13007 G12985))) G12996)))) G12993) (G12429 '#f '"invalid syntax" G12991))) (G12196 G12991 '(_ #(each (any any)) any . each-any)))) G12983))) '#f))) (set! G12102 (lambda (G13013 G13014 G13015) ((lambda (G13019) ((lambda (G13021) (if (if G13021 (begin '#f (apply (lambda (G13023) (G11617 G13023)) G13021)) '#f) (apply (lambda (G13025) ((lambda (G13027) ((lambda (G13029) ((lambda (G13031) ((lambda () (begin (if G13027 (void) (G11655 G13025)) (if (if (eq? G13031 '$rtd) (begin '#f (not (list? (G11653 G13029)))) '#f) (void) (G12429 '#f '"not a record type" G13013)) (list 'quote (G11653 G13029)))))) (G11651 G13029))) (G11647 G13027 G13014))) (G11643 G13025))) G13021) (G12429 '#f '"invalid syntax" G13019))) (G12196 G13019 '(_ any)))) G13013))) (set! G12104 (lambda (G13033 G13034 G13035) ((lambda (G13039) ((lambda (G13041) (if (if G13041 (begin '#f (apply (lambda (G13043) (G11617 G13043)) G13041)) '#f) (apply (lambda (G13045) ((lambda (G13047) ((lambda (G13049) ((lambda (G13051) ((lambda () (begin (if G13047 (void) (G11655 G13045)) (if (if (eq? G13051 '$rtd) (begin '#f (list? (G11653 G13049))) '#f) (void) (G12429 '#f '"not a record type" G13033)) (G12232 (car (G11653 G13049)) G13034 G13035))))) (G11651 G13049))) (G11647 G13047 G13034))) (G11643 G13045))) G13041) (G12429 '#f '"invalid syntax" G13039))) (G12196 G13039 '(_ any)))) G13033))) (set! G12106 (lambda (G13053 G13054 G13055) ((lambda (G13059) ((lambda (G13061) (if (if G13061 (begin '#f (apply (lambda (G13063) (G11617 G13063)) G13061)) '#f) (apply (lambda (G13065) ((lambda (G13067) ((lambda (G13069) ((lambda (G13071) ((lambda () (begin (if G13067 (void) (G11655 G13065)) (if (if (eq? G13071 '$rtd) (begin '#f (list? (G11653 G13069))) '#f) (void) (G12429 '#f '"invalid type" G13053)) (G12232 (cadr (G11653 G13069)) G13054 G13055))))) (G11651 G13069))) (G11647 G13067 G13054))) (G11643 G13065))) G13061) (G12429 '#f '"invalid syntax" G13059))) (G12196 G13059 '(_ any)))) G13053))) (set! G12108 (lambda (G13073 G13074 G13075) ((lambda (G13079) ((lambda (G13081) (if G13081 (apply (lambda (G13083 G13084 G13085) (list 'if (G12232 G13083 G13074 G13075) (G11463 '#f (G12228 (cons G13084 G13085) G13074 G13075)) (G11464))) G13081) (G12429 '#f '"invalid syntax" G13079))) (G12196 G13079 '(_ any any . each-any)))) G13073))) (set! G12110 (lambda (G13089 G13090 G13091) ((lambda (G13095) ((lambda (G13097) (if G13097 (apply (lambda (G13099 G13100 G13101) (list 'if (G12232 G13099 G13090 G13091) (G11464) (G11463 '#f (G12228 (cons G13100 G13101) G13090 G13091)))) G13097) (G12429 '#f '"invalid syntax" G13095))) (G12196 G13095 '(_ any any . each-any)))) G13089))) (set! G12112 (lambda (G13105 G13106 G13107) ((lambda (G13111) ((lambda (G13113) (if G13113 (apply (lambda (G13115 G13116 G13117) (list 'if (G12232 G13115 G13106 G13107) (G12232 G13116 G13106 G13107) (G12232 G13117 G13106 G13107))) G13113) ((lambda (G13121) ((lambda (G13123) (if G13123 (apply (lambda (G13125 G13126) (list 'if (G12232 G13125 G13106 G13107) (G12232 G13126 G13106 G13107) (G11464))) G13123) (G12429 '#f '"invalid syntax" G13121))) (G12196 G13121 '(_ any any)))) G13111))) (G12196 G13111 '(_ any any any)))) G13105))) (set! G12114 (lambda (G13129 G13130 G13131) ((lambda (G13136 G13138) (begin (set! G13136 (lambda (G13193 G13194 G13195) ((lambda (G13199) ((lambda (G13201) (if G13201 (apply (lambda (G13203 G13204 G13205) (list 'if ((lambda (G13209) (if (= '1 (length G13209)) (list '(primitive eqv?) G13193 (list 'quote (car G13209))) (list '(primitive memv) G13193 (list 'quote G13209)))) (G11639 G13203)) (G11463 '#f (G12228 (cons G13204 G13205) G13130 G13131)) G13195)) G13201) ((lambda (G13211) ((lambda (G13213) (if G13213 (apply (lambda (G13215) (G12429 '#f '"invalid syntax" G13129)) G13213) (G12429 '#f '"invalid syntax" G13211))) (G12196 G13211 'any))) G13199))) (G12196 G13199 '(each-any any . each-any)))) G13194))) (set! G13138 (lambda (G13163 G13164) ((lambda (G13167) ((lambda (G13169) (if G13169 (apply (lambda (G13171 G13172 G13173) (G13136 G13163 G13164 (G11464))) G13169) ((lambda (G13177) ((lambda (G13179) (if G13179 (apply (lambda (G13181 G13182 G13183) (if (if (G11617 G13181) (begin '#f (G11625 G13181 (G12082 'else))) '#f) (G11463 '#f (G12228 (cons G13182 G13183) G13130 G13131)) (G12429 '#f '"invalid syntax" G13129))) G13179) ((lambda (G13187) ((lambda (G13189) (if G13189 (apply (lambda (G13191) (G12429 '#f '"invalid syntax" G13129)) G13189) (G12429 '#f '"invalid syntax" G13187))) (G12196 G13187 'any))) G13177))) (G12196 G13177 '(any any . each-any)))) G13167))) (G12196 G13167 '(each-any any . each-any)))) G13164))) ((lambda (G13139) ((lambda (G13141) (if G13141 (apply (lambda (G13143) (G11463 '#f (list (G12232 G13143 G13130 G13131) (G11464)))) G13141) ((lambda (G13145) ((lambda (G13147) (if G13147 (apply (lambda (G13149 G13150 G13151) ((lambda (G13155) (G11462 '#f (list G13155) (list (G12232 G13149 G13130 G13131)) ((letrec ((G13157 (lambda (G13159 G13160) (if (null? G13160) (G13138 G13155 G13159) (G13136 G13155 G13159 (G13157 (car G13160) (cdr G13160))))))) G13157) G13150 G13151))) (G11491 't))) G13147) (G12429 '#f '"invalid syntax" G13145))) (G12196 G13145 '(_ any any . each-any)))) G13139))) (G12196 G13139 '(_ any)))) G13129))) '#f '#f))) (set! G12116 (lambda (G13217 G13218 G13219) ((lambda (G13223) ((lambda (G13225) (if G13225 (apply (lambda (G13227) (list 'quote (G11639 G13227))) G13225) (G12429 '#f '"invalid syntax" G13223))) (G12196 G13223 '(_ any)))) G13217))) (set! G12118 (lambda (G13229 G13230 G13231) ((lambda (G13235) ((lambda (G13237) (if G13237 (apply (lambda (G13239 G13240 G13241) (call-with-values (lambda () (G12240 G13229 G13239 (map cons G13240 G13241) G13230 G13231)) (lambda (G13247 G13248) ((lambda (G13251 G13252) (G11461 '#f G13252 G13251)) G13248 G13247)))) G13237) (G12429 '#f '"invalid syntax" G13235))) (G12196 G13235 '(_ . #(each (any any . each-any)))))) G13229))) (set! G12120 (lambda (G13255 G13256 G13257) ((lambda (G13261) ((lambda (G13263) (if G13263 (apply (lambda (G13265 G13266 G13267) (call-with-values (lambda () (G12238 G13255 G13265 (cons G13266 G13267) G13256 G13257)) (lambda (G13273 G13274) ((lambda (G13277 G13278) (G11460 '#f G13278 G13277)) G13274 G13273)))) G13263) (G12429 '#f '"invalid syntax" G13261))) (G12196 G13261 '(_ any any . each-any)))) G13255))) (set! G12122 (lambda (G13281) (G11593 ((letrec ((G13283 (lambda (G13285) (if (G11561 G13285) G13285 (if (pair? G13285) (cons (G13283 (car G13285)) (G13283 (cdr G13285))) (if (symbol? G13285) (G12082 G13285) (if (vector? G13285) (vector-map G13283 G13285) G13285))))))) G13283) G13281) '() '() '()))) (set! G12124 (lambda (G13287) ((lambda (G13289) ((lambda (G13291) (if G13291 (apply (lambda (G13293 G13294 G13295 G13296) ((lambda (G13301) (begin (G12236 (map car G13301) G13287) ((lambda (G13303) (G12122 (list 'let (map list G13303 G13294) ((letrec ((G13305 (lambda (G13307 G13308) (if (null? G13307) (cons 'begin (cons '#f (cons G13295 G13296))) (list 'syntax-case (car G13308) '() (list (car G13307) (G13305 (cdr G13307) (cdr G13308))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G13307)) (car G13308)))))))) G13305) G13293 G13303)))) (G12415 G13294)))) ((letrec ((G13311 (lambda (G13313) (if (null? G13313) '() (call-with-values (lambda () (G12194 (car G13313) '())) (lambda (G13317 G13318) ((lambda (G13321 G13322) (append G13321 (G13311 (cdr G13313)))) G13318 G13317))))))) G13311) G13293))) G13291) (G12429 '#f '"invalid syntax" G13289))) (G12196 G13289 '(_ #(each (any any)) any . each-any)))) G13287))) (set! G12126 (lambda (G13325 G13326) ((lambda (G13329) ((lambda (G13331) (if G13331 (apply (lambda (G13333 G13334) ((letrec ((G13337 (lambda (G13339) (if (null? G13339) (values) (if (not (G11617 (car G13339))) (G12429 '#f '"not an identifier" G13325 (car G13339)) (begin (G13337 (cdr G13339)) (if (G11631 (car G13339) (cdr G13339)) (G12429 '#f '"duplicate binding" G13325 (car G13339)) (void)))))))) G13337) (if (G11617 G13334) (cons G13334 G13333) (if (G11607 G13334) G13333 (G12429 '#f '"not an identifier" G13325 G13334))))) G13331) ((lambda (G13341) ((lambda (G13343) (if G13343 (apply (lambda () (G12429 '#f '"malformed binding form" G13325 G13326)) G13343) (G12429 '#f '"invalid syntax" G13341))) (G12196 G13341 '_))) G13329))) (G12196 G13329 '#(each+ any () any)))) G13326))) (set! G12128 (lambda (G13345) ((lambda (G13347) ((lambda (G13349) (if G13349 (apply (lambda (G13351 G13352 G13353 G13354) (if (G11627 G13351) (G12122 (cons (cons 'lambda (cons G13351 (cons G13353 G13354))) G13352)) (G12126 G13345 G13351))) G13349) ((lambda (G13359) ((lambda (G13361) (if (if G13361 (begin '#f (apply (lambda (G13363 G13364 G13365 G13366 G13367) (G11617 G13363)) G13361)) '#f) (apply (lambda (G13373 G13374 G13375 G13376 G13377) (if (G11627 G13374) (G12122 (cons (list 'letrec (list (list G13373 (cons 'lambda (cons G13374 (cons G13376 G13377))))) G13373) G13375)) (G12126 G13345 G13374))) G13361) (G12429 '#f '"invalid syntax" G13359))) (G12196 G13359 '(_ any #(each (any any)) any . each-any)))) G13347))) (G12196 G13347 '(_ #(each (any any)) any . each-any)))) G13345))) (set! G12130 (lambda (G13383) ((lambda (G13386 G13388) (begin (set! G13386 (lambda (G13484 G13485 G13486) (begin (if (G11617 G13484) (void) (G12429 '#f '"not an indentifier" G13383 G13484)) (if (G11631 G13484 G13485) (G12429 '#f '"duplicate binding" G13383 G13484) (void)) ((lambda (G13490) (values G13490 (cons G13484 G13485) (cons G13490 G13486))) (gensym (G12435 G13484)))))) (set! G13388 (lambda (G13466 G13467 G13468) (if (null? G13466) (values '() G13467 G13468) (call-with-values (lambda () (G13386 (car G13466) G13467 G13468)) (lambda (G13472 G13473 G13474) (call-with-values (lambda () (G13388 (cdr G13466) G13473 G13474)) (lambda (G13478 G13479 G13480) (values (cons G13472 G13478) G13479 G13480)))))))) ((lambda (G13389) ((lambda (G13391) (if G13391 (apply (lambda (G13393 G13394) (cons* (G12122 'let) '() G13393 G13394)) G13391) ((lambda (G13397) ((lambda (G13399) (if G13399 (apply (lambda (G13401 G13402 G13403 G13404) (G12122 ((letrec ((G13409 (lambda (G13411 G13412 G13413 G13414) (if (null? G13411) (cons 'let (cons (map list G13413 G13414) (cons G13403 G13404))) ((lambda (G13419) ((lambda (G13421) (if G13421 (apply (lambda (G13423) (call-with-values (lambda () (G13388 G13423 G13413 G13414)) (lambda (G13428 G13429 G13430) ((lambda (G13434 G13435 G13436) (list 'call-with-values (list 'lambda '() (car G13412)) (list 'lambda G13436 (G13409 (cdr G13411) (cdr G13412) G13435 G13434)))) G13430 G13429 G13428)))) G13421) ((lambda (G13440) ((lambda (G13442) (if G13442 (apply (lambda (G13444 G13445) (call-with-values (lambda () (G13386 G13445 G13413 G13414)) (lambda (G13448 G13449 G13450) (call-with-values (lambda () (G13388 G13444 G13449 G13450)) (lambda (G13454 G13455 G13456) (list 'call-with-values (list 'lambda '() (car G13412)) (list 'lambda (append G13454 G13448) (G13409 (cdr G13411) (cdr G13412) G13455 G13456)))))))) G13442) ((lambda (G13460) ((lambda (G13462) (if G13462 (apply (lambda (G13464) (G12429 '#f '"malformed bindings" G13383 G13464)) G13462) (G12429 '#f '"invalid syntax" G13460))) (G12196 G13460 'any))) G13440))) (G12196 G13440 '#(each+ any () any)))) G13419))) (G12196 G13419 'each-any))) (car G13411)))))) G13409) G13401 G13402 '() '()))) G13399) (G12429 '#f '"invalid syntax" G13397))) (G12196 G13397 '(_ #(each (any any)) any . each-any)))) G13389))) (G12196 G13389 '(_ () any . each-any)))) G13383))) '#f '#f))) (set! G12132 (lambda (G13492) ((lambda (G13495) (begin (set! G13495 (lambda (G13542) (if (null? G13542) (void) ((lambda (G13544) (begin (if (G11617 G13544) (void) (G12429 '#f '"not an identifier" G13492 G13544)) (G13495 (cdr G13542)) (if (G11631 G13544 (cdr G13542)) (G12429 '#f '"duplicate identifier" G13492 G13544) (void)))) (car G13542))))) ((lambda (G13496) ((lambda (G13498) (if G13498 (apply (lambda (G13500 G13501) (cons* (G12122 'let) '() G13500 G13501)) G13498) ((lambda (G13504) ((lambda (G13506) (if G13506 (apply (lambda (G13508 G13509 G13510 G13511) (G12122 ((letrec ((G13516 (lambda (G13518 G13519) (if (null? G13518) (cons 'begin (cons G13510 G13511)) ((lambda (G13522) ((lambda (G13524) (if G13524 (apply (lambda (G13526) (begin (G13495 G13526) (list 'call-with-values (list 'lambda '() (car G13519)) (list 'lambda G13526 (G13516 (cdr G13518) (cdr G13519)))))) G13524) ((lambda (G13528) ((lambda (G13530) (if G13530 (apply (lambda (G13532 G13533) (begin (G13495 (cons G13533 G13532)) (list 'call-with-values (list 'lambda '() (car G13519)) (list 'lambda (append G13532 G13533) (G13516 (cdr G13518) (cdr G13519)))))) G13530) ((lambda (G13536) ((lambda (G13538) (if G13538 (apply (lambda (G13540) (G12429 '#f '"malformed bindings" G13492 G13540)) G13538) (G12429 '#f '"invalid syntax" G13536))) (G12196 G13536 'any))) G13528))) (G12196 G13528 '#(each+ any () any)))) G13522))) (G12196 G13522 'each-any))) (car G13518)))))) G13516) G13508 G13509))) G13506) (G12429 '#f '"invalid syntax" G13504))) (G12196 G13504 '(_ #(each (any any)) any . each-any)))) G13496))) (G12196 G13496 '(_ () any . each-any)))) G13492))) '#f))) (set! G12134 (lambda (G13546) ((lambda (G13548) ((lambda (G13550) (if G13550 (apply (lambda (G13552 G13553 G13554 G13555) (if (G11627 G13553) (G12122 (list 'make-traced-procedure (list 'quote G13552) (cons 'lambda (cons G13553 (cons G13554 G13555))))) (G12126 G13546 G13553))) G13550) ((lambda (G13560) ((lambda (G13562) (if G13562 (apply (lambda (G13564 G13565 G13566 G13567 G13568) (if (G11627 (cons G13566 G13565)) (G12122 (list 'make-traced-procedure (list 'quote G13564) (cons 'lambda (cons (append G13565 G13566) (cons G13567 G13568))))) (G12126 G13546 (append G13565 G13566)))) G13562) (G12429 '#f '"invalid syntax" G13560))) (G12196 G13560 '(_ any #(each+ any () any) any . each-any)))) G13548))) (G12196 G13548 '(_ any each-any any . each-any)))) G13546))) (set! G12136 (lambda (G13574) ((lambda (G13576) ((lambda (G13578) (if G13578 (apply (lambda (G13580 G13581 G13582 G13583) (if (G11627 G13581) (G12122 (list 'define G13580 (list 'make-traced-procedure (list 'quote G13580) (cons 'lambda (cons G13581 (cons G13582 G13583)))))) (G12126 G13574 G13581))) G13578) ((lambda (G13588) ((lambda (G13590) (if G13590 (apply (lambda (G13592 G13593 G13594 G13595 G13596) (if (G11627 (cons G13594 G13593)) (G12122 (list 'define G13592 (list 'make-traced-procedure (list 'quote G13592) (cons 'lambda (cons (append G13593 G13594) (cons G13595 G13596)))))) (G12126 G13574 (append G13593 G13594)))) G13590) ((lambda (G13602) ((lambda (G13604) (if G13604 (apply (lambda (G13606 G13607) (if (G11617 G13606) (G12122 (list 'define G13606 (list 'let (list (list 'v G13607)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G13606) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G12429 '#f '"invalid name" G13574))) G13604) (G12429 '#f '"invalid syntax" G13602))) (G12196 G13602 '(_ any any)))) G13588))) (G12196 G13588 '(_ (any . #(each+ any () any)) any . each-any)))) G13576))) (G12196 G13576 '(_ (any . each-any) any . each-any)))) G13574))) (set! G12138 (lambda (G13610) ((lambda (G13612) ((lambda (G13614) (if G13614 (apply (lambda (G13616 G13617) (if (G11617 G13616) (G12122 (list 'define-syntax G13616 (list 'make-traced-macro (list 'quote G13616) G13617))) (G12429 '#f '"invalid name" G13610))) G13614) (G12429 '#f '"invalid syntax" G13612))) (G12196 G13612 '(_ any any)))) G13610))) (set! G12140 (lambda (G13620) (lambda (G13622) ((lambda (G13624) ((lambda (G13626) (if G13626 (apply (lambda (G13628 G13629 G13630 G13631) (if (G11627 G13628) ((lambda (G13636) (G12122 (cons G13620 (cons (map list G13628 G13636) (cons G13630 G13631))))) (map (lambda (G13638 G13639) (list 'make-traced-macro (list 'quote G13638) G13639)) G13628 G13629)) (G12126 G13622 G13628))) G13626) (G12429 '#f '"invalid syntax" G13624))) (G12196 G13624 '(_ #(each (any any)) any . each-any)))) G13622)))) (set! G12142 (G12140 'let-syntax)) (set! G12144 (G12140 'letrec-syntax)) (set! G12146 (lambda (G13642) ((lambda (G13645) (begin (set! G13645 (lambda (G13668 G13669 G13670) ((lambda (G13675 G13677) (begin (set! G13675 (lambda (G13726 G13727) ((lambda (G13730) ((lambda (G13732) (if G13732 (apply (lambda (G13734 G13735) ((lambda (G13738) (list 'let (list (list G13738 G13734)) (list 'if G13738 (list G13735 G13738) G13727))) (gensym))) G13732) ((lambda (G13740) ((lambda (G13742) (if G13742 (apply (lambda (G13744) ((lambda (G13746) (list 'let (list (list G13746 G13744)) (list 'if G13746 G13746 G13727))) (gensym))) G13742) ((lambda (G13748) ((lambda (G13750) (if G13750 (apply (lambda (G13752 G13753 G13754) (list 'if G13752 (cons 'begin (cons G13753 G13754)) G13727)) G13750) ((lambda (G13758) ((lambda (G13760) (if G13760 (apply (lambda () (G12429 '#f '"invalid guard clause" G13726)) G13760) (G12429 '#f '"invalid syntax" G13758))) (G12196 G13758 '_))) G13748))) (G12196 G13748 '(any any . each-any)))) G13740))) (G12196 G13740 '(any)))) G13730))) (G12196 G13730 '(any #(scheme-id =>) any)))) G13726))) (set! G13677 (lambda (G13688) ((lambda (G13690) ((lambda (G13692) (if G13692 (apply (lambda () (values (list 'raise G13668) '#t)) G13692) ((lambda (G13694) ((lambda (G13696) (if G13696 (apply (lambda (G13698 G13699) (values (cons 'begin (cons G13698 G13699)) '#f)) G13696) ((lambda (G13702) ((lambda (G13704) (if G13704 (apply (lambda (G13706 G13707) (call-with-values (lambda () (G13677 G13707)) (lambda (G13712 G13713) ((lambda (G13716 G13717) (values (G13675 G13706 G13717) G13716)) G13713 G13712)))) G13704) ((lambda (G13720) ((lambda (G13722) (if G13722 (apply (lambda (G13724) (G12429 '#f '"invalid guard clause" G13724)) G13722) (G12429 '#f '"invalid syntax" G13720))) (G12196 G13720 'any))) G13702))) (G12196 G13702 '(any . any)))) G13694))) (G12196 G13694 '((#(scheme-id else) any . each-any))))) G13690))) (G12196 G13690 '()))) G13688))) (call-with-values (lambda () (G13677 G13670)) (lambda (G13680 G13681) ((lambda (G13684 G13685) (if G13684 (list G13669 G13685) G13685)) G13681 G13680))))) '#f '#f))) ((lambda (G13646) ((lambda (G13648) (if (if G13648 (begin '#f (apply (lambda (G13650 G13651 G13652 G13653) (G11617 G13650)) G13648)) '#f) (apply (lambda (G13658 G13659 G13660 G13661) ((lambda (G13666) (G12122 (list 'call/cc (list 'lambda (list G13666) (list 'with-exception-handler (list 'lambda (list G13658) (G13645 G13658 G13666 G13659)) (cons 'lambda (cons '() (cons '#f (cons G13660 G13661))))))))) (gensym))) G13648) (G12429 '#f '"invalid syntax" G13646))) (G12196 G13646 '(_ (any . each-any) any . each-any)))) G13642))) '#f))) (set! G12148 (lambda (G13762) ((lambda (G13765 G13767) (begin (set! G13765 (lambda (G13790) ((lambda (G13792) (if G13792 G13792 (begin '#f (if (not (memq (car G13790) (cdr G13790))) (begin '#f (G13765 (cdr G13790))) '#f)))) (null? G13790)))) (set! G13767 (lambda (G13788) (if (null? G13788) '() (cons (car G13788) (G13767 (remq (car G13788) (cdr G13788))))))) ((lambda (G13768) ((lambda (G13770) (if (if G13770 (begin '#f (apply (lambda (G13772 G13773 G13774) (if (G11617 G13772) (if (G11617 G13774) (begin '#f (for-all G11617 G13773)) '#f) '#f)) G13770)) '#f) (apply (lambda (G13778 G13779 G13780) ((lambda (G13784 G13785) (G12122 (list 'begin (list 'define G13785 (list 'enum-set-constructor (list 'make-enumeration (list 'quote G13784)))) (list 'define-syntax G13778 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G13784)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G13778) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G13780 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G13780) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G13784)) (cons 'syntax-violation (cons (list 'quote G13780) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G13785 '('(n* ...)))))))))))) (G13767 (G12435 G13779)) (gensym))) G13770) (G12429 '#f '"invalid syntax" G13768))) (G12196 G13768 '(_ any each-any any)))) G13762))) '#f '#f))) (set! G12150 (lambda (G13794) ((lambda (G13796) ((lambda (G13798) (if G13798 (apply (lambda (G13800) ((lambda (G13802) (G12122 (list 'time-it G13802 (list 'lambda '() G13800)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G13806 G13807) ((lambda (G13810 G13811) (begin (write (G12435 G13800) G13811) (G13810))) G13807 G13806))))) G13798) (G12429 '#f '"invalid syntax" G13796))) (G12196 G13796 '(_ any)))) G13794))) (set! G12152 (lambda (G13814) ((lambda (G13816) ((lambda (G13818) (if G13818 (apply (lambda (G13820) (G12122 (list 'make-promise (list 'lambda '() G13820)))) G13818) (G12429 '#f '"invalid syntax" G13816))) (G12196 G13816 '(_ any)))) G13814))) (set! G12154 (lambda (G13822) ((lambda (G13824) ((lambda (G13826) (if G13826 (apply (lambda (G13828) (G12122 (list 'unless G13828 (list 'assertion-violation ''assert '"assertion failed" (list 'quote G13828))))) G13826) (G12429 '#f '"invalid syntax" G13824))) (G12196 G13824 '(_ any)))) G13822))) (set! G12156 (lambda (G13830) ((lambda (G13832) ((lambda (G13834) (if G13834 (apply (lambda (G13836) ((lambda (G13838) (if (eqv? G13838 'little) (G12122 ''little) (if (eqv? G13838 'big) (G12122 ''big) (G12429 '#f '"endianness must be big or little" G13830)))) (G12435 G13836))) G13834) (G12429 '#f '"invalid syntax" G13832))) (G12196 G13832 '(_ any)))) G13830))) (set! G12158 (lambda (G13839) ((lambda (G13841) ((lambda (G13843) (if G13843 (apply (lambda (G13845) (G12122 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G13845)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G13845) '((syntax (e* ...)))))))))) G13843) ((lambda (G13847) ((lambda (G13849) (if (if G13849 (begin '#f (apply (lambda (G13851 G13852 G13853 G13854 G13855) (if (G11617 G13851) (if (G11617 G13853) (begin '#f (G11617 G13854)) '#f) '#f)) G13849)) '#f) (apply (lambda (G13861 G13862 G13863 G13864 G13865) (G12122 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G13862)) (list (list 'set! 'id G13864) (list 'syntax G13865)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G13862 '(e* ...))))))))) G13849) (G12429 '#f '"invalid syntax" G13847))) (G12196 G13847 '(_ (any any) ((#(scheme-id set!) any any) any))))) G13841))) (G12196 G13841 '(_ any)))) G13839))) (set! G12160 (lambda (G13871) ((lambda (G13874) (begin (set! G13874 (lambda (G13897) ((lambda (G13899) ((lambda (G13901) (if G13901 (apply (lambda (G13903 G13904) (list G13903 G13904 G13903)) G13901) ((lambda (G13907) ((lambda (G13909) (if G13909 (apply (lambda (G13911 G13912 G13913) (list G13911 G13912 G13913)) G13909) ((lambda (G13917) ((lambda (G13919) (if G13919 (apply (lambda () (G12429 '#f '"invalid binding" G13871)) G13919) (G12429 '#f '"invalid syntax" G13917))) (G12196 G13917 '_))) G13907))) (G12196 G13907 '(any any any)))) G13899))) (G12196 G13899 '(any any)))) G13897))) ((lambda (G13875) ((lambda (G13877) (if G13877 (apply (lambda (G13879 G13880 G13881 G13882) ((lambda (G13887) ((lambda (G13889) (if G13889 (apply (lambda (G13891 G13892 G13893) (if (G11627 G13891) (G12122 (list 'letrec (list (list 'loop (list 'lambda G13891 (list 'if G13880 (cons 'begin (cons '(if #f #f) G13881)) (cons 'begin (append G13882 (list (cons 'loop G13893)))))))) (cons 'loop G13892))) (G12429 '#f '"invalid bindings" G13871))) G13889) (G12429 '#f '"invalid syntax" G13887))) (G12196 G13887 '#(each (any any any))))) (map G13874 G13879))) G13877) (G12429 '#f '"invalid syntax" G13875))) (G12196 G13875 '(_ each-any (any . each-any) . each-any)))) G13871))) '#f))) (set! G12162 (lambda (G13921) ((lambda (G13923) ((lambda (G13925) (if (if G13925 (begin '#f (apply (lambda (G13927 G13928 G13929 G13930) (for-all G11617 G13927)) G13925)) '#f) (apply (lambda (G13935 G13936 G13937 G13938) (G12122 ((letrec ((G13943 (lambda (G13945) (if (null? G13945) (cons 'let (cons '() (cons G13937 G13938))) (list 'let (list (car G13945)) (G13943 (cdr G13945))))))) G13943) (map list G13935 G13936)))) G13925) (G12429 '#f '"invalid syntax" G13923))) (G12196 G13923 '(_ #(each (any any)) any . each-any)))) G13921))) (set! G12164 (lambda (G13947) ((lambda (G13949) ((lambda (G13951) (if G13951 (apply (lambda () '#f) G13951) ((lambda (G13953) ((lambda (G13955) (if G13955 (apply (lambda (G13957 G13958) (G12122 ((letrec ((G13961 (lambda (G13963 G13964) (if (null? G13964) (list 'begin '#f G13963) (list 'let (list (list 't G13963)) (list 'if 't 't (G13961 (car G13964) (cdr G13964)))))))) G13961) G13957 G13958))) G13955) (G12429 '#f '"invalid syntax" G13953))) (G12196 G13953 '(_ any . each-any)))) G13949))) (G12196 G13949 '(_)))) G13947))) (set! G12166 (lambda (G13967) ((lambda (G13969) ((lambda (G13971) (if G13971 (apply (lambda () '#t) G13971) ((lambda (G13973) ((lambda (G13975) (if G13975 (apply (lambda (G13977 G13978) (G12122 ((letrec ((G13981 (lambda (G13983 G13984) (if (null? G13984) (list 'begin '#f G13983) (cons 'if (cons G13983 (cons (G13981 (car G13984) (cdr G13984)) '(#f)))))))) G13981) G13977 G13978))) G13975) (G12429 '#f '"invalid syntax" G13973))) (G12196 G13973 '(_ any . each-any)))) G13969))) (G12196 G13969 '(_)))) G13967))) (set! G12168 (lambda (G13987) ((lambda (G13989) ((lambda (G13991) (if G13991 (apply (lambda (G13993 G13994) (G12122 ((letrec ((G13997 (lambda (G13999 G14000) (if (null? G14000) ((lambda (G14003) ((lambda (G14005) (if G14005 (apply (lambda (G14007 G14008) (cons 'begin (cons G14007 G14008))) G14005) ((lambda (G14011) ((lambda (G14013) (if G14013 (apply (lambda (G14015 G14016) (list 'let (list (list 't G14015)) (list 'if 't (cons G14016 '(t))))) G14013) ((lambda (G14019) ((lambda (G14021) (if G14021 (apply (lambda (G14023) (cons 'or (cons G14023 '((if #f #f))))) G14021) ((lambda (G14025) ((lambda (G14027) (if G14027 (apply (lambda (G14029 G14030) (list 'if G14029 (cons 'begin G14030))) G14027) ((lambda (G14033) ((lambda (G14035) (if G14035 (apply (lambda () (G12429 '#f '"invalid last clause" G13987)) G14035) (G12429 '#f '"invalid syntax" G14033))) (G12196 G14033 '_))) G14025))) (G12196 G14025 '(any . each-any)))) G14019))) (G12196 G14019 '(any)))) G14011))) (G12196 G14011 '(any #(scheme-id =>) any)))) G14003))) (G12196 G14003 '(#(scheme-id else) any . each-any)))) G13999) ((lambda (G14037) ((lambda (G14039) (if G14039 (apply (lambda (G14041 G14042) (G12429 '#f '"incorrect position of keyword else" G13987)) G14039) ((lambda (G14045) ((lambda (G14047) (if G14047 (apply (lambda (G14049 G14050) (list 'let (list (list 't G14049)) (list 'if 't (cons G14050 '(t)) (G13997 (car G14000) (cdr G14000))))) G14047) ((lambda (G14053) ((lambda (G14055) (if G14055 (apply (lambda (G14057) (list 'or G14057 (G13997 (car G14000) (cdr G14000)))) G14055) ((lambda (G14059) ((lambda (G14061) (if G14061 (apply (lambda (G14063 G14064) (list 'if G14063 (cons 'begin G14064) (G13997 (car G14000) (cdr G14000)))) G14061) ((lambda (G14067) ((lambda (G14069) (if G14069 (apply (lambda () (G12429 '#f '"invalid last clause" G13987)) G14069) (G12429 '#f '"invalid syntax" G14067))) (G12196 G14067 '_))) G14059))) (G12196 G14059 '(any . each-any)))) G14053))) (G12196 G14053 '(any)))) G14045))) (G12196 G14045 '(any #(scheme-id =>) any)))) G14037))) (G12196 G14037 '(#(scheme-id else) any . each-any)))) G13999))))) G13997) G13993 G13994))) G13991) (G12429 '#f '"invalid syntax" G13989))) (G12196 G13989 '(_ any . each-any)))) G13987))) (set! G12170 (lambda (G14071 G14072 G14073) ((lambda (G14077) (begin (if (if (string? G14077) (begin '#f (G11617 G14072)) '#f) (void) (G12429 '#f '"invalid syntax" G14071)) (cons (G12122 'begin) (with-input-from-file G14077 (lambda () ((letrec ((G14079 (lambda (G14081) ((lambda (G14083) (if (eof-object? G14083) (reverse G14081) (G14079 (cons (G11583 G14072 G14083) G14081)))) (G10434))))) G14079) '())))))) (G11639 G14073)))) (set! G12172 (lambda (G14085) ((lambda (G14087) ((lambda (G14089) (if G14089 (apply (lambda (G14091 G14092) (G12170 G14085 G14091 G14092)) G14089) (G12429 '#f '"invalid syntax" G14087))) (G12196 G14087 '(any any)))) G14085))) (set! G12174 (lambda (G14095) ((lambda (G14097) ((lambda (G14099) (if G14099 (apply (lambda (G14101 G14102) (G12170 G14095 G14101 G14102)) G14099) (G12429 '#f '"invalid syntax" G14097))) (G12196 G14097 '(_ any any)))) G14095))) (set! G12176 (lambda (G14105) ((lambda (G14107) ((lambda (G14109) (if G14109 (apply (lambda (G14111 G14112 G14113) (begin (G12202 G14111 G14105) (G12122 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G14111 (map (lambda (G14117 G14118) ((lambda (G14121) ((lambda (G14123) (if G14123 (apply (lambda (G14125) (list (cons 'g G14125) (list 'syntax G14118))) G14123) ((lambda (G14127) ((lambda (G14129) (if G14129 (apply (lambda () (G12429 '#f '"invalid syntax-rules pattern" G14105 G14117)) G14129) (G12429 '#f '"invalid syntax" G14127))) (G12196 G14127 '_))) G14121))) (G12196 G14121 '(_ . any)))) G14117)) G14112 G14113)))))))) G14109) (G12429 '#f '"invalid syntax" G14107))) (G12196 G14107 '(_ each-any . #(each (any any)))))) G14105))) (set! G12178 ((lambda () ((lambda (G14132 G14173 G14175 G14177 G14179 G14181 G14183) (begin (set! G14132 (lambda (G14402) (list (G12082 'quote) (G11593 G14402 '() '() '())))) (set! G14173 (lambda (G14394 G14395) ((letrec ((G14398 (lambda (G14400) (if (null? G14400) G14395 (G14175 (car G14400) (G14398 (cdr G14400))))))) G14398) G14394))) (set! G14175 (lambda (G14356 G14357) ((lambda (G14360) ((lambda (G14362) (if G14362 (apply (lambda (G14364) ((lambda (G14366) ((lambda (G14368) (if G14368 (apply (lambda (G14370) (list (G12082 'quote) (cons G14370 G14364))) G14368) ((lambda (G14372) ((lambda (G14374) (if G14374 (apply (lambda () ((lambda (G14376) ((lambda (G14378) (if G14378 (apply (lambda () (list (G12082 'list) G14356)) G14378) ((lambda (G14380) ((lambda (G14382) (if G14382 (apply (lambda () (list (G12082 'cons) G14356 G14357)) G14382) (G12429 '#f '"invalid syntax" G14380))) (G12196 G14380 '_))) G14376))) (G12196 G14376 '()))) G14364)) G14374) (G12429 '#f '"invalid syntax" G14372))) (G12196 G14372 '_))) G14366))) (G12196 G14366 '(#(scheme-id quote) any)))) G14356)) G14362) ((lambda (G14384) ((lambda (G14386) (if G14386 (apply (lambda (G14388) (cons* (G12082 'list) G14356 G14388)) G14386) ((lambda (G14390) ((lambda (G14392) (if G14392 (apply (lambda () (list (G12082 'cons) G14356 G14357)) G14392) (G12429 '#f '"invalid syntax" G14390))) (G12196 G14390 '_))) G14384))) (G12196 G14384 '(#(scheme-id list) . each-any)))) G14360))) (G12196 G14360 '(#(scheme-id quote) any)))) G14357))) (set! G14177 (lambda (G14330 G14331) ((lambda (G14334) (if (null? G14334) (list (G12082 'quote) '()) (if (null? (cdr G14334)) (car G14334) (cons* (G12082 'append) G14334)))) ((letrec ((G14336 (lambda (G14338) (if (null? G14338) ((lambda (G14340) ((lambda (G14342) (if G14342 (apply (lambda () '()) G14342) ((lambda (G14344) ((lambda (G14346) (if G14346 (apply (lambda () (list G14331)) G14346) (G12429 '#f '"invalid syntax" G14344))) (G12196 G14344 '_))) G14340))) (G12196 G14340 '(#(scheme-id quote) ())))) G14331) ((lambda (G14348) ((lambda (G14350) (if G14350 (apply (lambda () (G14336 (cdr G14338))) G14350) ((lambda (G14352) ((lambda (G14354) (if G14354 (apply (lambda () (cons (car G14338) (G14336 (cdr G14338)))) G14354) (G12429 '#f '"invalid syntax" G14352))) (G12196 G14352 '_))) G14348))) (G12196 G14348 '(#(scheme-id quote) ())))) (car G14338)))))) G14336) G14330)))) (set! G14179 (lambda (G14280) ((lambda (G14282) ((lambda (G14284) ((lambda (G14286) (if G14286 (apply (lambda (G14288) (list (G12082 'quote) (list->vector G14288))) G14286) ((lambda (G14290) ((lambda (G14292) (if G14292 (apply (lambda () ((letrec ((G14294 (lambda (G14296 G14297) ((lambda (G14300) ((lambda (G14302) (if G14302 (apply (lambda (G14304) (G14297 (map (lambda (G14306) (list (G12082 'quote) G14306)) G14304))) G14302) ((lambda (G14308) ((lambda (G14310) (if G14310 (apply (lambda (G14312) (G14297 G14312)) G14310) ((lambda (G14314) ((lambda (G14316) (if G14316 (apply (lambda (G14318 G14319) (G14294 G14319 (lambda (G14322) (G14297 (cons G14318 G14322))))) G14316) ((lambda (G14324) ((lambda (G14326) (if G14326 (apply (lambda () (list (G12082 'list->vector) G14282)) G14326) (G12429 '#f '"invalid syntax" G14324))) (G12196 G14324 '_))) G14314))) (G12196 G14314 '(#(scheme-id cons) any any)))) G14308))) (G12196 G14308 '(#(scheme-id list) . each-any)))) G14300))) (G12196 G14300 '(#(scheme-id quote) each-any)))) G14296)))) G14294) G14280 (lambda (G14328) (cons* (G12082 'vector) G14328)))) G14292) (G12429 '#f '"invalid syntax" G14290))) (G12196 G14290 '_))) G14284))) (G12196 G14284 '(#(scheme-id quote) each-any)))) G14282)) G14280))) (set! G14181 (lambda (G14246 G14247) ((lambda (G14250) ((lambda (G14252) (if G14252 (apply (lambda (G14254 G14255) ((lambda (G14258) ((lambda (G14260) (if G14260 (apply (lambda (G14262) (if (= G14247 '0) (G14173 G14262 (G14181 G14255 G14247)) (G14175 (G14175 (G14132 'unquote) (G14183 G14262 (- G14247 '1))) (G14181 G14255 G14247)))) G14260) ((lambda (G14264) ((lambda (G14266) (if G14266 (apply (lambda (G14268) (if (= G14247 '0) (G14177 G14268 (G14181 G14255 G14247)) (G14175 (G14175 (G14132 'unquote-splicing) (G14183 G14268 (- G14247 '1))) (G14181 G14255 G14247)))) G14266) ((lambda (G14270) ((lambda (G14272) (if G14272 (apply (lambda (G14274) (G14175 (G14183 G14274 G14247) (G14181 G14255 G14247))) G14272) (G12429 '#f '"invalid syntax" G14270))) (G12196 G14270 'any))) G14264))) (G12196 G14264 '(#(scheme-id unquote-splicing) . each-any)))) G14258))) (G12196 G14258 '(#(scheme-id unquote) . each-any)))) G14254)) G14252) ((lambda (G14276) ((lambda (G14278) (if G14278 (apply (lambda () (list (G12082 'quote) '())) G14278) (G12429 '#f '"invalid syntax" G14276))) (G12196 G14276 '()))) G14250))) (G12196 G14250 '(any . any)))) G14246))) (set! G14183 (lambda (G14192 G14193) ((lambda (G14196) ((lambda (G14198) (if G14198 (apply (lambda (G14200) (if (= G14193 '0) G14200 (G14175 (G14132 'unquote) (G14183 (list G14200) (- G14193 '1))))) G14198) ((lambda (G14202) ((lambda (G14204) (if G14204 (apply (lambda (G14206 G14207) (if (= G14193 '0) (G14173 G14206 (G14183 G14207 G14193)) (G14175 (G14175 (G14132 'unquote) (G14183 G14206 (- G14193 '1))) (G14183 G14207 G14193)))) G14204) ((lambda (G14210) ((lambda (G14212) (if G14212 (apply (lambda (G14214 G14215) (if (= G14193 '0) (G14177 G14214 (G14183 G14215 G14193)) (G14175 (G14175 (G14132 'unquote-splicing) (G14183 G14214 (- G14193 '1))) (G14183 G14215 G14193)))) G14212) ((lambda (G14218) ((lambda (G14220) (if G14220 (apply (lambda (G14222) (G14175 (G14132 'quasiquote) (G14183 (list G14222) (+ G14193 '1)))) G14220) ((lambda (G14224) ((lambda (G14226) (if G14226 (apply (lambda (G14228 G14229) (G14175 (G14183 G14228 G14193) (G14183 G14229 G14193))) G14226) ((lambda (G14232) ((lambda (G14234) (if (if G14234 (begin '#f (apply (lambda (G14236) (not (G11561 G14236))) G14234)) '#f) (apply (lambda (G14238) (G14179 (G14181 G14238 G14193))) G14234) ((lambda (G14240) ((lambda (G14242) (if G14242 (apply (lambda (G14244) (list (G12082 'quote) G14244)) G14242) (G12429 '#f '"invalid syntax" G14240))) (G12196 G14240 'any))) G14232))) (G12196 G14232 '#(vector each-any)))) G14224))) (G12196 G14224 '(any . any)))) G14218))) (G12196 G14218 '(#(scheme-id quasiquote) any)))) G14210))) (G12196 G14210 '((#(scheme-id unquote-splicing) . each-any) . any)))) G14202))) (G12196 G14202 '((#(scheme-id unquote) . each-any) . any)))) G14196))) (G12196 G14196 '(#(scheme-id unquote) any)))) G14192))) (lambda (G14184) ((lambda (G14186) ((lambda (G14188) (if G14188 (apply (lambda (G14190) (G14183 G14190 '0)) G14188) (G12429 '#f '"invalid syntax" G14186))) (G12196 G14186 '(_ any)))) G14184)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G12180 ((lambda () ((lambda (G14405) (begin (set! G14405 (lambda (G14429 G14430) ((lambda (G14433) ((lambda (G14435) (if G14435 (apply (lambda (G14437) (if (= G14430 '0) ((lambda (G14439) (values (list G14439) (list G14437) G14439)) (gensym)) (call-with-values (lambda () (G14405 G14437 (- G14430 '1))) (lambda (G14444 G14445 G14446) ((lambda (G14450 G14451 G14452) (values G14452 G14451 (list 'unsyntax G14450))) G14446 G14445 G14444))))) G14435) ((lambda (G14456) ((lambda (G14458) (if (if G14458 (begin '#f (apply (lambda () (= G14430 '0)) G14458)) '#f) (apply (lambda () (G12429 '#f '"incorrect use of unsyntax" G14429)) G14458) ((lambda (G14460) ((lambda (G14462) (if G14462 (apply (lambda (G14464 G14465) (call-with-values (lambda () (G14405 G14465 G14430)) (lambda (G14471 G14472 G14473) ((lambda (G14477 G14478 G14479) (if (= G14430 '0) ((lambda (G14483) (values (cons (cons G14483 '(...)) G14479) (cons G14464 G14478) (cons G14483 (cons '... G14477)))) (gensym)) (call-with-values (lambda () (G14405 G14464 (- G14430 '1))) (lambda (G14488 G14489 G14490) ((lambda (G14494 G14495 G14496) (values (append G14496 G14479) (append G14495 G14478) (cons (list 'unsyntax-splicing G14494) G14477))) G14490 G14489 G14488))))) G14473 G14472 G14471)))) G14462) ((lambda (G14500) ((lambda (G14502) (if (if G14502 (begin '#f (apply (lambda () (= G14430 '0)) G14502)) '#f) (apply (lambda () (G12429 '#f '"incorrect use of unsyntax-splicing" G14429)) G14502) ((lambda (G14504) ((lambda (G14506) (if G14506 (apply (lambda (G14508) (call-with-values (lambda () (G14405 G14508 (+ G14430 '1))) (lambda (G14513 G14514 G14515) ((lambda (G14519 G14520 G14521) (values G14521 G14520 (list 'quasisyntax G14519))) G14515 G14514 G14513)))) G14506) ((lambda (G14525) ((lambda (G14527) (if G14527 (apply (lambda (G14529 G14530) (call-with-values (lambda () (G14405 G14529 G14430)) (lambda (G14539 G14540 G14541) (call-with-values (lambda () (G14405 G14530 G14430)) (lambda (G14545 G14546 G14547) ((lambda (G14551 G14552 G14553 G14554 G14555 G14556) (values (append G14553 G14556) (append G14552 G14555) (cons G14554 G14551))) G14547 G14546 G14545 G14541 G14540 G14539)))))) G14527) ((lambda (G14563) ((lambda (G14565) (if (if G14565 (begin '#f (apply (lambda (G14567) (not (G11561 G14429))) G14565)) '#f) (apply (lambda (G14569) (call-with-values (lambda () ((letrec ((G14574 (lambda (G14576) (if (null? G14576) (values '() '() '()) (call-with-values (lambda () (G14405 (car G14576) G14430)) (lambda (G14581 G14582 G14583) ((lambda (G14587 G14588 G14589) (call-with-values (lambda () (G14574 (cdr G14576))) (lambda (G14596 G14597 G14598) ((lambda (G14602 G14603 G14604) (values (append G14589 G14604) (append G14588 G14603) (cons G14587 G14602))) G14598 G14597 G14596)))) G14583 G14582 G14581))))))) G14574) G14569)) (lambda (G14608 G14609 G14610) ((lambda (G14614 G14615 G14616) (values G14616 G14615 (list->vector G14614))) G14610 G14609 G14608)))) G14565) ((lambda (G14620) ((lambda (G14622) (if G14622 (apply (lambda () (values '() '() G14429)) G14622) (G12429 '#f '"invalid syntax" G14620))) (G12196 G14620 '_))) G14563))) (G12196 G14563 '#(vector each-any)))) G14525))) (G12196 G14525 '(any . any)))) G14504))) (G12196 G14504 '(#(scheme-id quasisyntax) any)))) G14500))) (G12196 G14500 '#(scheme-id unsyntax-splicing)))) G14460))) (G12196 G14460 '((#(scheme-id unsyntax-splicing) any) . any)))) G14456))) (G12196 G14456 '#(scheme-id unsyntax)))) G14433))) (G12196 G14433 '(#(scheme-id unsyntax) any)))) G14429))) (lambda (G14406) ((lambda (G14408) ((lambda (G14410) (if G14410 (apply (lambda (G14412) (call-with-values (lambda () (G14405 G14412 '0)) (lambda (G14417 G14418 G14419) ((lambda (G14423 G14424 G14425) (G12122 (list 'syntax-case (cons 'list G14424) '() (list G14425 (list 'syntax G14423))))) G14419 G14418 G14417)))) G14410) (G12429 '#f '"invalid syntax" G14408))) (G12196 G14408 '(_ any)))) G14406)))) '#f)))) (set! G12182 (lambda (G14624) (G12429 '#f '"define-struct not supported" G14624))) (set! G12184 (lambda (G14626) ((lambda (G14629 G14631 G14633 G14635 G14637 G14639 G14641 G14643 G14645 G14647 G14649 G14651 G14653 G14655 G14657 G14659 G14661) (begin (set! G14629 (lambda (G15132 . G15134) (G12433 G15132 (string->symbol (apply string-append (map (lambda (G15136) (if (symbol? G15136) (symbol->string G15136) (if (string? G15136) G15136 (assertion-violation 'define-record-type '"BUG")))) G15134)))))) (set! G14631 (lambda (G15114) ((lambda (G15116) ((lambda (G15118) (if G15118 (apply (lambda (G15120 G15121 G15122) G15120) G15118) ((lambda (G15126) ((lambda (G15128) (if G15128 (apply (lambda (G15130) G15130) G15128) (G12429 '#f '"invalid syntax" G15126))) (G12196 G15126 'any))) G15116))) (G12196 G15116 '(any any any)))) G15114))) (set! G14633 (lambda (G15094) ((lambda (G15096) ((lambda (G15098) (if G15098 (apply (lambda (G15100 G15101 G15102) G15101) G15098) ((lambda (G15106) ((lambda (G15108) (if (if G15108 (begin '#f (apply (lambda (G15110) (G11617 G15110)) G15108)) '#f) (apply (lambda (G15112) (G14629 G15112 '"make-" (G11639 G15112))) G15108) (G12429 '#f '"invalid syntax" G15106))) (G12196 G15106 'any))) G15096))) (G12196 G15096 '(any any any)))) G15094))) (set! G14635 (lambda (G15074) ((lambda (G15076) ((lambda (G15078) (if G15078 (apply (lambda (G15080 G15081 G15082) G15082) G15078) ((lambda (G15086) ((lambda (G15088) (if (if G15088 (begin '#f (apply (lambda (G15090) (G11617 G15090)) G15088)) '#f) (apply (lambda (G15092) (G14629 G15092 (G11639 G15092) '"?")) G15088) (G12429 '#f '"invalid syntax" G15086))) (G12196 G15086 'any))) G15076))) (G12196 G15076 '(any any any)))) G15074))) (set! G14637 (lambda (G15056 G15057) ((lambda (G15060) ((lambda (G15062) (if G15062 (apply (lambda () '#f) G15062) ((lambda (G15064) ((lambda (G15066) (if G15066 (apply (lambda (G15068 G15069 G15070) (if (G11625 (G12122 G15056) G15068) (cons G15068 G15069) (G14637 G15056 G15070))) G15066) (G12429 '#f '"invalid syntax" G15064))) (G12196 G15064 '((any . any) . any)))) G15060))) (G12196 G15060 '()))) G15057))) (set! G14639 (lambda (G14974 G14975 G14976) ((lambda (G14981) (begin (set! G14981 (lambda (G15030) (list->vector (map (lambda (G15032) ((lambda (G15034) ((lambda (G15036) (if G15036 (apply (lambda (G15038 G15039) (list 'mutable G15038)) G15036) ((lambda (G15042) ((lambda (G15044) (if G15044 (apply (lambda (G15046 G15047) (list 'immutable G15046)) G15044) ((lambda (G15050) ((lambda (G15052) (if G15052 (apply (lambda (G15054) (list 'immutable G15054)) G15052) (G12429 '#f '"invalid syntax" G15050))) (G12196 G15050 'any))) G15042))) (G12196 G15042 '(#(scheme-id immutable) any . any)))) G15034))) (G12196 G15034 '(#(scheme-id mutable) any . any)))) G15032)) G15030)))) ((lambda (G14982 G14983 G14984 G14985) (G12122 (list 'make-record-type-descriptor (list 'quote G14974) G14976 G14982 G14983 G14984 G14985))) ((lambda (G14990) ((lambda (G14992) (if G14992 (apply (lambda () (list 'quote (gensym))) G14992) ((lambda (G14994) ((lambda (G14996) (if G14996 (apply (lambda (G14998) (list 'quote G14998)) G14996) ((lambda (G15000) ((lambda (G15002) (if G15002 (apply (lambda () '#f) G15002) (G12429 '#f '"invalid syntax" G15000))) (G12196 G15000 '_))) G14994))) (G12196 G14994 '(_ any)))) G14990))) (G12196 G14990 '(_)))) (G14637 'nongenerative G14975)) ((lambda (G15004) ((lambda (G15006) (if G15006 (apply (lambda () '#t) G15006) ((lambda (G15008) ((lambda (G15010) (if G15010 (apply (lambda () '#f) G15010) (G12429 '#f '"invalid syntax" G15008))) (G12196 G15008 '_))) G15004))) (G12196 G15004 '(_ #(atom #t))))) (G14637 'sealed G14975)) ((lambda (G15012) ((lambda (G15014) (if G15014 (apply (lambda () '#t) G15014) ((lambda (G15016) ((lambda (G15018) (if G15018 (apply (lambda () '#f) G15018) (G12429 '#f '"invalid syntax" G15016))) (G12196 G15016 '_))) G15012))) (G12196 G15012 '(_ #(atom #t))))) (G14637 'opaque G14975)) ((lambda (G15020) ((lambda (G15022) (if G15022 (apply (lambda (G15024) (list 'quote (G14981 G15024))) G15022) ((lambda (G15026) ((lambda (G15028) (if G15028 (apply (lambda () ''#()) G15028) (G12429 '#f '"invalid syntax" G15026))) (G12196 G15026 '_))) G15020))) (G12196 G15020 '(_ . each-any)))) (G14637 'fields G14975))))) '#f))) (set! G14641 (lambda (G14950) ((lambda (G14952) ((lambda (G14954) (if G14954 (apply (lambda (G14956) (list 'record-type-descriptor G14956)) G14954) ((lambda (G14958) ((lambda (G14960) (if G14960 (apply (lambda () ((lambda (G14962) ((lambda (G14964) (if G14964 (apply (lambda (G14966 G14967) G14966) G14964) ((lambda (G14970) ((lambda (G14972) (if G14972 (apply (lambda () '#f) G14972) (G12429 '#f '"invalid syntax" G14970))) (G12196 G14970 '#(atom #f)))) G14962))) (G12196 G14962 '(_ any any)))) (G14637 'parent-rtd G14950))) G14960) (G12429 '#f '"invalid syntax" G14958))) (G12196 G14958 '#(atom #f)))) G14952))) (G12196 G14952 '(_ any)))) (G14637 'parent G14950)))) (set! G14643 (lambda (G14926) ((lambda (G14928) ((lambda (G14930) (if G14930 (apply (lambda (G14932) (list 'record-constructor-descriptor G14932)) G14930) ((lambda (G14934) ((lambda (G14936) (if G14936 (apply (lambda () ((lambda (G14938) ((lambda (G14940) (if G14940 (apply (lambda (G14942 G14943) G14943) G14940) ((lambda (G14946) ((lambda (G14948) (if G14948 (apply (lambda () '#f) G14948) (G12429 '#f '"invalid syntax" G14946))) (G12196 G14946 '#(atom #f)))) G14938))) (G12196 G14938 '(_ any any)))) (G14637 'parent-rtd G14926))) G14936) (G12429 '#f '"invalid syntax" G14934))) (G12196 G14934 '#(atom #f)))) G14928))) (G12196 G14928 '(_ any)))) (G14637 'parent G14926)))) (set! G14645 (lambda (G14918 G14919 G14920 G14921) (list 'make-record-constructor-descriptor G14919 G14921 G14920))) (set! G14647 (lambda (G14906) ((lambda (G14908) ((lambda (G14910) (if G14910 (apply (lambda (G14912) G14912) G14910) ((lambda (G14914) ((lambda (G14916) (if G14916 (apply (lambda () '#f) G14916) (G12429 '#f '"invalid syntax" G14914))) (G12196 G14914 '_))) G14908))) (G12196 G14908 '(_ any)))) (G14637 'protocol G14906)))) (set! G14649 (lambda (G14888) ((lambda (G14890) ((lambda (G14892) (if G14892 (apply (lambda () '()) G14892) ((lambda (G14894) ((lambda (G14896) (if G14896 (apply (lambda (G14898) G14898) G14896) ((lambda (G14900) ((lambda (G14902) (if G14902 (apply (lambda (G14904) (G14649 G14904)) G14902) (G12429 '#f '"invalid syntax" G14900))) (G12196 G14900 '(_ . any)))) G14894))) (G12196 G14894 '((#(scheme-id fields) . each-any) . _)))) G14890))) (G12196 G14890 '()))) G14888))) (set! G14651 (lambda (G14864) ((letrec ((G14866 (lambda (G14868 G14869) ((lambda (G14872) ((lambda (G14874) (if G14874 (apply (lambda () '()) G14874) ((lambda (G14876) ((lambda (G14878) (if G14878 (apply (lambda (G14880) (cons G14869 (G14866 G14880 (+ G14869 '1)))) G14878) ((lambda (G14882) ((lambda (G14884) (if G14884 (apply (lambda (G14886) (G14866 G14886 (+ G14869 '1))) G14884) (G12429 '#f '"invalid syntax" G14882))) (G12196 G14882 '(_ . any)))) G14876))) (G12196 G14876 '((#(scheme-id mutable) . _) . any)))) G14872))) (G12196 G14872 '()))) G14868)))) G14866) G14864 '0))) (set! G14653 (lambda (G14822 G14823) ((lambda (G14827) (begin (set! G14827 (lambda (G14862) (G12433 G14822 (string->symbol (string-append (symbol->string (G12435 G14822)) '"-" (symbol->string (G12435 G14862)) '"-set!"))))) ((letrec ((G14828 (lambda (G14830) ((lambda (G14832) ((lambda (G14834) (if G14834 (apply (lambda () '()) G14834) ((lambda (G14836) ((lambda (G14838) (if G14838 (apply (lambda (G14840 G14841 G14842 G14843) (cons G14842 (G14828 G14843))) G14838) ((lambda (G14848) ((lambda (G14850) (if G14850 (apply (lambda (G14852 G14853) (cons (G14827 G14852) (G14828 G14853))) G14850) ((lambda (G14856) ((lambda (G14858) (if G14858 (apply (lambda (G14860) (G14828 G14860)) G14858) (G12429 '#f '"invalid syntax" G14856))) (G12196 G14856 '(_ . any)))) G14848))) (G12196 G14848 '((#(scheme-id mutable) any) . any)))) G14836))) (G12196 G14836 '((#(scheme-id mutable) any any any) . any)))) G14832))) (G12196 G14832 '()))) G14830)))) G14828) G14823))) '#f))) (set! G14655 (lambda (G14754 G14755) ((lambda (G14759) (begin (set! G14759 (lambda (G14820) (G12433 G14754 (string->symbol (string-append (symbol->string (G12435 G14754)) '"-" (symbol->string (G12435 G14820))))))) (map (lambda (G14760) ((lambda (G14762) ((lambda (G14764) (if (if G14764 (begin '#f (apply (lambda (G14766 G14767 G14768) (G11617 G14767)) G14764)) '#f) (apply (lambda (G14772 G14773 G14774) G14773) G14764) ((lambda (G14778) ((lambda (G14780) (if (if G14780 (begin '#f (apply (lambda (G14782 G14783) (G11617 G14783)) G14780)) '#f) (apply (lambda (G14786 G14787) G14787) G14780) ((lambda (G14790) ((lambda (G14792) (if (if G14792 (begin '#f (apply (lambda (G14794) (G11617 G14794)) G14792)) '#f) (apply (lambda (G14796) (G14759 G14796)) G14792) ((lambda (G14798) ((lambda (G14800) (if (if G14800 (begin '#f (apply (lambda (G14802) (G11617 G14802)) G14800)) '#f) (apply (lambda (G14804) (G14759 G14804)) G14800) ((lambda (G14806) ((lambda (G14808) (if (if G14808 (begin '#f (apply (lambda (G14810) (G11617 G14810)) G14808)) '#f) (apply (lambda (G14812) (G14759 G14812)) G14808) ((lambda (G14814) ((lambda (G14816) (if G14816 (apply (lambda (G14818) (G12429 '#f '"invalid field spec" G14760)) G14816) (G12429 '#f '"invalid syntax" G14814))) (G12196 G14814 'any))) G14806))) (G12196 G14806 'any))) G14798))) (G12196 G14798 '(#(scheme-id immutable) any)))) G14790))) (G12196 G14790 '(#(scheme-id mutable) any)))) G14778))) (G12196 G14778 '(#(scheme-id immutable) any any)))) G14762))) (G12196 G14762 '(#(scheme-id mutable) any any any)))) G14760)) G14755))) '#f))) (set! G14657 (lambda (G14746) ((letrec ((G14748 (lambda (G14750 G14751) (if (null? G14750) '() (cons G14751 (G14748 (cdr G14750) (+ G14751 '1))))))) G14748) G14746 '0))) (set! G14659 (lambda (G14706 G14707) ((lambda (G14710) ((lambda (G14712) ((lambda (G14714) ((lambda (G14716) ((lambda (G14718) ((lambda (G14720) ((lambda (G14722) ((lambda (G14724) ((lambda (G14726) ((lambda (G14728) ((lambda (G14730) ((lambda (G14732) ((lambda (G14734) ((lambda (G14736) ((lambda () (G12122 (cons 'begin (cons (list 'define G14712 G14732) (cons (list 'define G14716 G14736) (cons (list 'define G14714 G14734) (cons (list 'define-syntax G14710 (list 'list ''$rtd (list 'syntax G14712) (list 'syntax G14714))) (cons (list 'define G14730 (list 'record-predicate G14712)) (cons (list 'define G14718 (list 'record-constructor G14714)) (append (map (lambda (G14738 G14739) (list 'define G14738 (list 'record-accessor G14712 G14739))) G14724 G14722) (map (lambda (G14742 G14743) (list 'define G14742 (list 'record-mutator G14712 G14743))) G14726 G14728))))))))))))) (G14647 G14707))) (G14645 G14707 G14712 G14716 (G14643 G14707)))) (G14639 G14710 G14707 (G14641 G14707)))) (G14635 G14706))) (G14651 G14720))) (G14653 G14710 G14720))) (G14655 G14710 G14720))) (G14657 G14720))) (G14649 G14707))) (G14633 G14706))) (gensym))) (gensym))) (gensym))) (G14631 G14706)))) (set! G14661 (lambda (G14670 G14671) ((lambda (G14675 G14677) (begin (set! G14675 (map G12122 '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G14677 (lambda (G14700 G14701) (if (pair? G14701) (begin '#f ((lambda (G14704) (if G14704 G14704 (begin '#f (G14677 G14700 (cdr G14701))))) (G11625 G14700 (car G14701)))) '#f))) ((letrec ((G14678 (lambda (G14680 G14681) (if (null? G14680) (void) ((lambda (G14684) ((lambda (G14686) (if G14686 (apply (lambda (G14688 G14689) (if ((lambda (G14692) (if G14692 G14692 (begin '#f (not (G14677 G14688 G14675))))) (not (G11617 G14688))) (G12429 '#f '"not a valid define-record-type keyword" G14688) (if (G11631 G14688 G14681) (G12429 '#f '"duplicate use of keyword " G14670 G14688) (G14678 (cdr G14680) (cons G14688 G14681))))) G14686) ((lambda (G14694) ((lambda (G14696) (if G14696 (apply (lambda (G14698) (G12429 '#f '"malformed define-record-type clause" G14698)) G14696) (G12429 '#f '"invalid syntax" G14694))) (G12196 G14694 'any))) G14684))) (G12196 G14684 '(any . any)))) (car G14680)))))) G14678) G14671 '()))) '#f '#f))) ((lambda (G14662) ((lambda (G14664) (if G14664 (apply (lambda (G14666 G14667) (begin (G14661 G14626 G14667) (G14659 G14666 G14667))) G14664) (G12429 '#f '"invalid syntax" G14662))) (G12196 G14662 '(_ any . each-any)))) G14626))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12186 (lambda (G15138) ((lambda (G15141) (begin (set! G15141 (lambda (G15186 G15187) (G12433 G15186 (string->symbol (string-append (symbol->string (G12435 G15186)) G15187))))) ((lambda (G15142) ((lambda (G15144) (if (if G15144 (begin '#f (apply (lambda (G15146 G15147 G15148 G15149 G15150 G15151 G15152) (if (G11617 G15147) (if (G11617 G15148) (if (G11617 G15149) (if (G11617 G15150) (if (for-all G11617 G15151) (begin '#f (for-all G11617 G15152)) '#f) '#f) '#f) '#f) '#f)) G15144)) '#f) (apply (lambda (G15160 G15161 G15162 G15163 G15164 G15165 G15166) ((lambda (G15174) (G12122 (cons 'begin (cons (cons 'define-record-type (cons (list G15161 G15163 (gensym)) (cons (list 'parent G15162) (cons (cons 'fields (map (lambda (G15176 G15177) (list 'immutable G15176 G15177)) G15165 G15174)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G15164 (list 'condition-predicate (list 'record-type-descriptor G15161))) (map (lambda (G15180 G15181) (list 'define G15180 (list 'condition-accessor (list 'record-type-descriptor G15161) G15181))) G15166 G15174)))))) (map (lambda (G15184) (gensym)) G15166))) G15144) (G12429 '#f '"invalid syntax" G15142))) (G12196 G15142 '(any any any any any . #(each (any any)))))) G15138))) '#f))) (set! G12188 (lambda (G15190) (G12429 '#f '"incorrect usage of auxiliary keyword" G15190))) (set! G12190 (lambda (G15192 G15193 G15194) ((lambda (G15198) ((lambda (G15200) (if G15200 (apply (lambda (G15202 G15203) (G12254 (cons G15202 G15203) G15193 G15194)) G15200) ((lambda (G15206) ((lambda (G15208) (if G15208 (apply (lambda (G15210 G15211 G15212 G15213) ((lambda (G15218 G15219 G15220 G15221) (G11462 '#f (append G15218 G15219) (append (G12228 G15210 G15193 G15194) (G12228 G15211 G15193 G15194)) (G11462 '#f (list G15221) (list (G11460 '#f '() (G11463 '#f (map (lambda (G15226 G15227 G15228) (G11462 '#f (list G15226) (list (list G15227)) (G11463 '#f (list (list G15227 G15228) (list 'set! G15228 G15226))))) G15220 G15218 G15219)))) (list '(primitive dynamic-wind) G15221 (G11460 '#f '() (G12254 (cons G15212 G15213) G15193 G15194)) G15221)))) (map (lambda (G15232) (G11491 'lhs)) G15210) (map (lambda (G15234) (G11491 'rhs)) G15210) (map (lambda (G15236) (G11491 't)) G15210) (G11491 'swap))) G15208) (G12429 '#f '"invalid syntax" G15206))) (G12196 G15206 '(_ #(each (any any)) any . each-any)))) G15198))) (G12196 G15198 '(_ () any . each-any)))) G15192))) (set! G12192 (lambda (G15238 G15239 G15240) ((lambda (G15244) ((lambda (G15246) (if G15246 (apply (lambda (G15248 G15249) (cons 'foreign-call (cons (G12232 G15248 G15239 G15240) (G12228 G15249 G15239 G15240)))) G15246) (G12429 '#f '"invalid syntax" G15244))) (G12196 G15244 '(_ any . each-any)))) G15238))) (set! G12194 (lambda (G15252 G15253) ((lambda (G15257 G15259) (begin (set! G15257 (lambda (G15402 G15403 G15404) (if (null? G15402) (values '() G15404) (call-with-values (lambda () (G15257 (cdr G15402) G15403 G15404)) (lambda (G15410 G15411) ((lambda (G15414 G15415) (call-with-values (lambda () (G15259 (car G15402) G15403 G15414)) (lambda (G15420 G15421) ((lambda (G15424 G15425) (values (cons G15425 G15415) G15424)) G15421 G15420)))) G15411 G15410)))))) (set! G15259 (lambda (G15260 G15261 G15262) ((lambda (G15266) ((lambda (G15268) (if (if G15268 (begin '#f (apply (lambda (G15270) (G11617 G15270)) G15268)) '#f) (apply (lambda (G15272) (if (G11631 G15260 G15253) (values (vector 'free-id G15260) G15262) (if (G11625 G15260 (G12082 '_)) (values '_ G15262) (values 'any (cons (cons G15260 G15261) G15262))))) G15268) ((lambda (G15274) ((lambda (G15276) (if (if G15276 (begin '#f (apply (lambda (G15278 G15279) (G12198 G15279)) G15276)) '#f) (apply (lambda (G15282 G15283) (call-with-values (lambda () (G15259 G15282 (+ G15261 '1) G15262)) (lambda (G15288 G15289) ((lambda (G15292 G15293) (values (if (eq? G15293 'any) 'each-any (vector 'each G15293)) G15292)) G15289 G15288)))) G15276) ((lambda (G15296) ((lambda (G15298) (if (if G15298 (begin '#f (apply (lambda (G15300 G15301 G15302 G15303) (G12198 G15301)) G15298)) '#f) (apply (lambda (G15308 G15309 G15310 G15311) (call-with-values (lambda () (G15259 G15311 G15261 G15262)) (lambda (G15318 G15319) ((lambda (G15322 G15323) (call-with-values (lambda () (G15257 G15310 G15261 G15322)) (lambda (G15328 G15329) ((lambda (G15332 G15333) (call-with-values (lambda () (G15259 G15308 (+ G15261 '1) G15332)) (lambda (G15338 G15339) ((lambda (G15342 G15343) (values (vector 'each+ G15343 (reverse G15333) G15323) G15342)) G15339 G15338)))) G15329 G15328)))) G15319 G15318)))) G15298) ((lambda (G15346) ((lambda (G15348) (if G15348 (apply (lambda (G15350 G15351) (call-with-values (lambda () (G15259 G15351 G15261 G15262)) (lambda (G15356 G15357) ((lambda (G15360 G15361) (call-with-values (lambda () (G15259 G15350 G15261 G15360)) (lambda (G15366 G15367) ((lambda (G15370 G15371) (values (cons G15371 G15361) G15370)) G15367 G15366)))) G15357 G15356)))) G15348) ((lambda (G15374) ((lambda (G15376) (if G15376 (apply (lambda () (values '() G15262)) G15376) ((lambda (G15378) ((lambda (G15380) (if (if G15380 (begin '#f (apply (lambda (G15382) (not (G11561 G15382))) G15380)) '#f) (apply (lambda (G15384) (call-with-values (lambda () (G15259 G15384 G15261 G15262)) (lambda (G15388 G15389) ((lambda (G15392 G15393) (values (vector 'vector G15393) G15392)) G15389 G15388)))) G15380) ((lambda (G15396) ((lambda (G15398) (if G15398 (apply (lambda (G15400) (values (vector 'atom (G11639 G15400)) G15262)) G15398) (G12429 '#f '"invalid syntax" G15396))) (G12196 G15396 'any))) G15378))) (G12196 G15378 '#(vector each-any)))) G15374))) (G12196 G15374 '()))) G15346))) (G12196 G15346 '(any . any)))) G15296))) (G12196 G15296 '(any any . #(each+ any () any))))) G15274))) (G12196 G15274 '(any any)))) G15266))) (G12196 G15266 'any))) G15260))) (G15259 G15252 '0 '()))) '#f '#f))) (set! G12196 (lambda (G15428 G15429) ((lambda (G15433 G15435 G15437 G15439 G15441 G15443 G15445 G15447) (begin (set! G15433 (lambda (G15628 G15629 G15630 G15631) (if (if (null? G15629) (if (null? G15630) (begin '#f (null? G15631)) '#f) '#f) G15628 (G11593 G15628 G15629 G15630 G15631)))) (set! G15435 (lambda (G15599 G15600 G15601 G15602 G15603) (if (pair? G15599) ((lambda (G15609) (if G15609 (begin '#f ((lambda (G15611) (if G15611 (begin '#f (cons G15609 G15611)) '#f)) (G15435 (cdr G15599) G15600 G15601 G15602 G15603))) '#f)) (G15447 (car G15599) G15600 G15601 G15602 G15603 '())) (if (null? G15599) '() (if (G11561 G15599) (if (not (G11489 G15601)) (begin '#f (call-with-values (lambda () (G11591 G15601 G15602 G15603 G15599)) (lambda (G15616 G15617 G15618) ((lambda (G15622 G15623 G15624) (G15435 (G11565 G15599) G15600 G15624 G15623 G15622)) G15618 G15617 G15616)))) '#f) (if (G10436 G15599) (G15435 (G10438 G15599) G15600 G15601 G15602 G15603) '#f)))))) (set! G15437 (lambda (G15541 G15542 G15543 G15544 G15545 G15546 G15547 G15548) ((letrec ((G15557 (lambda (G15559 G15560 G15561 G15562) (if (pair? G15559) (call-with-values (lambda () (G15557 (cdr G15559) G15560 G15561 G15562)) (lambda (G15570 G15571 G15572) ((lambda (G15576 G15577 G15578) (if G15576 (if (null? G15577) ((lambda (G15582) (if G15582 (values (cons G15582 G15578) G15577 G15576) (values '#f '#f '#f))) (G15447 (car G15559) G15542 G15560 G15561 G15562 '())) (values '() (cdr G15577) (G15447 (car G15559) (car G15577) G15560 G15561 G15562 G15576))) (values '#f '#f '#f))) G15572 G15571 G15570))) (if (G11561 G15559) (if (G11489 G15560) (values '() G15543 (G15447 G15559 G15544 G15560 G15561 G15562 G15548)) (call-with-values (lambda () (G11591 G15560 G15561 G15562 G15559)) (lambda (G15587 G15588 G15589) ((lambda (G15593 G15594 G15595) (G15557 (G11565 G15559) G15595 G15594 G15593)) G15589 G15588 G15587)))) (if (G10436 G15559) (G15557 (G10438 G15559) G15560 G15561 G15562) (values '() G15543 (G15447 G15559 G15544 G15560 G15561 G15562 G15548)))))))) G15557) G15541 G15545 G15546 G15547))) (set! G15439 (lambda (G15516 G15517 G15518 G15519) (if (pair? G15516) ((lambda (G15524) (if G15524 (begin '#f (cons (G15433 (car G15516) G15517 G15518 G15519) G15524)) '#f)) (G15439 (cdr G15516) G15517 G15518 G15519)) (if (null? G15516) '() (if (G11561 G15516) (if (not (G11489 G15517)) (begin '#f (call-with-values (lambda () (G11591 G15517 G15518 G15519 G15516)) (lambda (G15529 G15530 G15531) ((lambda (G15535 G15536 G15537) (G15439 (G11565 G15516) G15537 G15536 G15535)) G15531 G15530 G15529)))) '#f) (if (G10436 G15516) (G15439 (G10438 G15516) G15517 G15518 G15519) '#f)))))) (set! G15441 (lambda (G15511 G15512) (if (null? G15511) G15512 (if (eq? G15511 '_) G15512 (if (eq? G15511 'any) (cons '() G15512) (if (pair? G15511) (G15441 (car G15511) (G15441 (cdr G15511) G15512)) (if (eq? G15511 'each-any) (cons '() G15512) ((lambda (G15515) (if (eqv? G15515 'each) (G15441 (vector-ref G15511 '1) G15512) (if (eqv? G15515 'each+) (G15441 (vector-ref G15511 '1) (G15441 (reverse (vector-ref G15511 '2)) (G15441 (vector-ref G15511 '3) G15512))) (if (memv G15515 '(free-id atom)) G15512 (if (memv G15515 '(scheme-id atom)) G15512 (if (eqv? G15515 'vector) (G15441 (vector-ref G15511 '1) G15512) (assertion-violation 'syntax-dispatch '"invalid pattern" G15511))))))) (vector-ref G15511 '0))))))))) (set! G15443 (lambda (G15507 G15508) (if (null? (car G15507)) G15508 (cons (map car G15507) (G15443 (map cdr G15507) G15508))))) (set! G15445 (lambda (G15475 G15476 G15477 G15478 G15479 G15480) (if (null? G15476) (if (null? G15475) (begin '#f G15480) '#f) (if (pair? G15476) (if (pair? G15475) (begin '#f (G15447 (car G15475) (car G15476) G15477 G15478 G15479 (G15447 (cdr G15475) (cdr G15476) G15477 G15478 G15479 G15480))) '#f) (if (eq? G15476 'each-any) ((lambda (G15487) (if G15487 (begin '#f (cons G15487 G15480)) '#f)) (G15439 G15475 G15477 G15478 G15479)) ((lambda (G15489) (if (eqv? G15489 'each) (if (null? G15475) (G15441 (vector-ref G15476 '1) G15480) ((lambda (G15505) (if G15505 (begin '#f (G15443 G15505 G15480)) '#f)) (G15435 G15475 (vector-ref G15476 '1) G15477 G15478 G15479))) (if (eqv? G15489 'free-id) (if (symbol? G15475) (if (G11489 G15477) (if (G11625 (G15433 G15475 G15477 G15478 G15479) (vector-ref G15476 '1)) (begin '#f G15480) '#f) '#f) '#f) (if (eqv? G15489 'scheme-id) (if (symbol? G15475) (if (G11489 G15477) (if (G11625 (G15433 G15475 G15477 G15478 G15479) (G12082 (vector-ref G15476 '1))) (begin '#f G15480) '#f) '#f) '#f) (if (eqv? G15489 'each+) (call-with-values (lambda () (G15437 G15475 (vector-ref G15476 '1) (vector-ref G15476 '2) (vector-ref G15476 '3) G15477 G15478 G15479 G15480)) (lambda (G15493 G15494 G15495) ((lambda (G15499 G15500 G15501) (if G15499 (if (null? G15500) (begin '#f (if (null? G15501) (G15441 (vector-ref G15476 '1) G15499) (G15443 G15501 G15499))) '#f) '#f)) G15495 G15494 G15493))) (if (eqv? G15489 'atom) (if (equal? (vector-ref G15476 '1) (G11637 G15475 G15477)) (begin '#f G15480) '#f) (if (eqv? G15489 'vector) (if (vector? G15475) (begin '#f (G15447 (vector->list G15475) (vector-ref G15476 '1) G15477 G15478 G15479 G15480)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G15476)))))))) (vector-ref G15476 '0))))))) (set! G15447 (lambda (G15448 G15449 G15450 G15451 G15452 G15453) (if (not G15453) '#f (if (eq? G15449 '_) G15453 (if (eq? G15449 'any) (cons (G15433 G15448 G15450 G15451 G15452) G15453) (if (G11561 G15448) (if (not (G11489 G15450)) (begin '#f (call-with-values (lambda () (G11591 G15450 G15451 G15452 G15448)) (lambda (G15463 G15464 G15465) ((lambda (G15469 G15470 G15471) (G15447 (G11565 G15448) G15449 G15471 G15470 G15469 G15453)) G15465 G15464 G15463)))) '#f) (if (G10436 G15448) (G15447 (G10438 G15448) G15449 G15450 G15451 G15452 G15453) (G15445 G15448 G15449 G15450 G15451 G15452 G15453)))))))) (G15447 G15428 G15429 '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12198 (lambda (G15636) (if (G11617 G15636) (begin '#f (G11625 G15636 (G12082 '...))) '#f))) (set! G12200 (lambda (G15638) (if (G11617 G15638) (begin '#f (G11625 G15638 (G12082 '_))) '#f))) (set! G12202 (lambda (G15640 G15641) (for-each (lambda (G15644) (if ((lambda (G15646) (if G15646 G15646 ((lambda (G15648) (if G15648 G15648 (begin '#f (G12200 G15644)))) (G12198 G15644)))) (not (G11617 G15644))) (G12429 '#f '"invalid literal" G15641 G15644) (void))) G15640))) (set! G12204 ((lambda () ((lambda (G15651 G15653 G15655 G15657) (begin (set! G15651 (lambda (G15762 G15763 G15764 G15765 G15766) ((lambda (G15772 G15773) ((lambda (G15776 G15777) ((lambda (G15780) (list '(primitive apply) (G11460 '#f G15777 G15780) G15764)) (G12232 (G11597 (G11546 G15772 G15776) G15763) (append (map (lambda (G15782 G15783 G15784) (cons G15782 (G11649 'syntax (cons G15783 G15784)))) G15776 G15777 (map cdr G15762)) G15765) G15766))) (map G11495 G15772) (map G11491 G15772))) (map car G15762) (map cdr G15762)))) (set! G15653 (lambda (G15750 G15751 G15752) ((letrec ((G15756 (lambda (G15758 G15759) (if (null? G15758) (G12429 '#f '"invalid syntax" G15751) (if (G11617 (car G15758)) (if (G11631 (car G15758) G15759) (G12423 (car G15758) '"duplicate " G15752) (G15756 (cdr G15758) (cons (car G15758) G15759))) (G12423 (car G15758) '"invalid " G15752)))))) G15756) G15750 '()))) (set! G15655 (lambda (G15712 G15713 G15714 G15715 G15716 G15717 G15718 G15719) (call-with-values (lambda () (G12194 G15717 G15713)) (lambda (G15730 G15731) ((lambda (G15734 G15735) (if (not (G11629 (map car G15734))) (G15653 (map car G15734) G15717 '"pattern variable") (if (not (for-all (lambda (G15738) (not (G12198 (car G15738)))) G15734)) (G12429 '#f '"misplaced ellipsis in syntax-case pattern" G15717) ((lambda (G15740) ((lambda (G15742) ((lambda (G15744) ((lambda (G15746) (list (G11460 '#f (list G15740) (list 'if G15742 G15744 G15746)) (list '(primitive syntax-dispatch) G15712 (list 'quote G15735)))) (G15657 G15712 G15713 G15714 G15715 G15716))) (G15651 G15734 G15719 G15740 G15715 G15716))) (if (eq? G15718 '#t) G15740 ((lambda (G15748) (list 'if G15740 G15748 (list 'quote '#f))) (G15651 G15734 G15718 G15740 G15715 G15716))))) (G11491 'tmp))))) G15731 G15730))))) (set! G15657 (lambda (G15678 G15679 G15680 G15681 G15682) (if (null? G15680) (list '(primitive syntax-error) G15678) ((lambda (G15688) ((lambda (G15690) (if G15690 (apply (lambda (G15692 G15693) (if (if (G11617 G15692) (if (not (G11631 G15692 G15679)) (begin '#f (not (G12198 G15692))) '#f) '#f) (if (G11625 G15692 (G12082 '_)) (G12232 G15693 G15681 G15682) ((lambda (G15696 G15697) ((lambda (G15700) (list (G11460 '#f (list G15697) G15700) G15678)) (G12232 (G11597 (G11546 (list G15692) (list G15696)) G15693) (cons (cons G15696 (G11649 'syntax (cons G15697 '0))) G15681) G15682))) (G11495 G15692) (G11491 G15692))) (G15655 G15678 G15679 (cdr G15680) G15681 G15682 G15692 '#t G15693))) G15690) ((lambda (G15702) ((lambda (G15704) (if G15704 (apply (lambda (G15706 G15707 G15708) (G15655 G15678 G15679 (cdr G15680) G15681 G15682 G15706 G15707 G15708)) G15704) (G12429 '#f '"invalid syntax" G15702))) (G12196 G15702 '(any any any)))) G15688))) (G12196 G15688 '(any any)))) (car G15680))))) (lambda (G15658 G15659 G15660) ((lambda (G15664) ((lambda (G15666) (if G15666 (apply (lambda (G15668 G15669 G15670) (begin (G12202 G15669 G15658) ((lambda (G15674) ((lambda (G15676) (list (G11460 '#f (list G15674) G15676) (G12232 G15668 G15659 G15660))) (G15657 G15674 G15669 G15670 G15659 G15660))) (G11491 'tmp)))) G15666) (G12429 '#f '"invalid syntax" G15664))) (G12196 G15664 '(_ any each-any . each-any)))) G15658)))) '#f '#f '#f '#f)))) (set! G12206 (lambda (G15788 G15789 . G15792) ((lambda (G15795) (begin (set! G15795 '...) (begin (if (list? G15789) (void) (assertion-violation G15795 '"not a list" G15789)) (if (null? G15792) (void) ((lambda (G15796) (for-each (lambda (G15798) (begin (if (list? G15798) (void) (assertion-violation G15795 '"not a list" G15798)) (if (= (length G15798) G15796) (void) (assertion-violation G15795 '"length mismatch" G15789 G15798)))) G15792)) (length G15789))) (apply map G15788 G15789 G15792)))) '#f))) (set! G12208 ((lambda () ((lambda (G15801 G15803 G15805 G15807 G15809 G15811 G15813 G15815) (begin (set! G15801 (lambda (G15914 G15915 G15916 G15917 G15918 G15919) ((lambda (G15926) ((lambda (G15928) (if (if G15928 (begin '#f (apply (lambda (G15930) (G15918 G15930)) G15928)) '#f) (apply (lambda (G15932) (G12429 '#f '"misplaced ellipsis in syntax form" G15914)) G15928) ((lambda (G15934) ((lambda (G15936) (if (if G15936 (begin '#f (apply (lambda (G15938) (G11617 G15938)) G15936)) '#f) (apply (lambda (G15940) ((lambda (G15942) ((lambda (G15944) ((lambda () (if (eq? (G11651 G15944) 'syntax) (call-with-values (lambda () ((lambda (G15948) (G15803 G15914 (car G15948) (cdr G15948) G15917)) (G11653 G15944))) (lambda (G15950 G15951) ((lambda (G15954 G15955) (values (list 'ref G15955) G15954)) G15951 G15950))) (values (list 'quote G15915) G15917))))) (G11647 G15942 G15916))) (G11643 G15915))) G15936) ((lambda (G15958) ((lambda (G15960) (if (if G15960 (begin '#f (apply (lambda (G15962 G15963) (G15918 G15962)) G15960)) '#f) (apply (lambda (G15966 G15967) (if G15919 (G12429 '#f '"misplaced ellipsis in syntax form" G15914) (G15801 G15914 G15967 G15916 G15917 (lambda (G15970) '#f) '#f))) G15960) ((lambda (G15972) ((lambda (G15974) (if (if G15974 (begin '#f (apply (lambda (G15976 G15977 G15978) (G15918 G15977)) G15974)) '#f) (apply (lambda (G15982 G15983 G15984) ((letrec ((G15988 (lambda (G15990 G15991) ((lambda (G15994) ((lambda (G15996) (if G15996 (apply (lambda () (G15991 G15917)) G15996) ((lambda (G15998) ((lambda (G16000) (if (if G16000 (begin '#f (apply (lambda (G16002 G16003) (G15918 G16002)) G16000)) '#f) (apply (lambda (G16006 G16007) (G15988 G16007 (lambda (G16010) (call-with-values (lambda () (G15991 (cons '() G16010))) (lambda (G16014 G16015) ((lambda (G16018 G16019) (if (null? (car G16018)) (G12429 '#f '"extra ellipsis in syntax form" G15914) (values (G15807 G16019 (car G16018)) (cdr G16018)))) G16015 G16014)))))) G16000) ((lambda (G16022) ((lambda (G16024) (if G16024 (apply (lambda () (call-with-values (lambda () (G15801 G15914 G15990 G15916 G15917 G15918 G15919)) (lambda (G16028 G16029) ((lambda (G16032 G16033) (call-with-values (lambda () (G15991 G16032)) (lambda (G16038 G16039) ((lambda (G16042 G16043) (values (G15805 G16043 G16033) G16042)) G16039 G16038)))) G16029 G16028)))) G16024) (G12429 '#f '"invalid syntax" G16022))) (G12196 G16022 '_))) G15998))) (G12196 G15998 '(any . any)))) G15994))) (G12196 G15994 '()))) G15990)))) G15988) G15984 (lambda (G16046) (call-with-values (lambda () (G15801 G15914 G15982 G15916 (cons '() G16046) G15918 '#f)) (lambda (G16050 G16051) ((lambda (G16054 G16055) (if (null? (car G16054)) (G12429 '#f '"extra ellipsis in syntax form" G15914) (values (G15809 G16055 (car G16054)) (cdr G16054)))) G16051 G16050)))))) G15974) ((lambda (G16058) ((lambda (G16060) (if G16060 (apply (lambda (G16062 G16063) (call-with-values (lambda () (G15801 G15914 G16062 G15916 G15917 G15918 '#f)) (lambda (G16068 G16069) ((lambda (G16072 G16073) (call-with-values (lambda () (G15801 G15914 G16063 G15916 G16072 G15918 G15919)) (lambda (G16078 G16079) ((lambda (G16082 G16083) (values (G15811 G15915 G16062 G16063 G16073 G16083) G16082)) G16079 G16078)))) G16069 G16068)))) G16060) ((lambda (G16086) ((lambda (G16088) (if G16088 (apply (lambda (G16090) (call-with-values (lambda () (G15801 G15914 G16090 G15916 G15917 G15918 '#t)) (lambda (G16094 G16095) ((lambda (G16098 G16099) (values (G15813 G15915 G16090 G16099) G16098)) G16095 G16094)))) G16088) ((lambda (G16102) ((lambda (G16104) (if G16104 (apply (lambda () (values (list 'quote G15915) G15917)) G16104) (G12429 '#f '"invalid syntax" G16102))) (G12196 G16102 '_))) G16086))) (G12196 G16086 '#(vector each-any)))) G16058))) (G12196 G16058 '(any . any)))) G15972))) (G12196 G15972 '(any any . any)))) G15958))) (G12196 G15958 '(any any)))) G15934))) (G12196 G15934 'any))) G15926))) (G12196 G15926 'any))) G15915))) (set! G15803 (lambda (G15890 G15891 G15892 G15893) (if (= G15892 '0) (values G15891 G15893) (if (null? G15893) (G12429 '#f '"missing ellipsis in syntax form" G15890) (call-with-values (lambda () (G15803 G15890 G15891 (- G15892 '1) (cdr G15893))) (lambda (G15900 G15901) ((lambda (G15904 G15905) ((lambda (G15908) (if G15908 ((lambda (G15910) (values (cdr G15910) G15893)) G15908) ((lambda (G15912) (values G15912 (cons (cons (cons G15905 G15912) (car G15893)) G15904))) (G11491 'tmp)))) (assq G15905 (car G15893)))) G15901 G15900))))))) (set! G15805 (lambda (G15886 G15887) (if (equal? G15887 ''()) G15886 (list 'append G15886 G15887)))) (set! G15807 (lambda (G15882 G15883) (list 'apply '(primitive append) (G15809 G15882 G15883)))) (set! G15809 (lambda (G15864 G15865) ((lambda (G15868 G15869) (if (eq? (car G15864) 'ref) (car G15869) (if (for-all (lambda (G15872) (if (eq? (car G15872) 'ref) (begin '#f (memq (cadr G15872) G15868)) '#f)) (cdr G15864)) ((lambda (G15874) (cons 'map (cons (list 'primitive (car G15864)) G15874))) (map ((lambda (G15876) (lambda (G15878) (cdr (assq (cadr G15878) G15876)))) (map cons G15868 G15869)) (cdr G15864))) (cons* 'map (list 'lambda G15868 G15864) G15869)))) (map cdr G15865) (map (lambda (G15880) (list 'ref (car G15880))) G15865)))) (set! G15811 (lambda (G15849 G15850 G15851 G15852 G15853) ((lambda (G15859) (if (eqv? G15859 'quote) (if (eq? (car G15852) 'quote) ((lambda (G15860 G15861) (if (if (eq? G15860 G15850) (begin '#f (eq? G15861 G15851)) '#f) (list 'quote G15849) (list 'quote (cons G15860 G15861)))) (cadr G15852) (cadr G15853)) (if (null? (cadr G15853)) (list 'list G15852) (list 'cons G15852 G15853))) (if (eqv? G15859 'list) (cons 'list (cons G15852 (cdr G15853))) (list 'cons G15852 G15853)))) (car G15853)))) (set! G15813 (lambda (G15843 G15844 G15845) (if (eq? (car G15845) 'quote) (if (eq? (cadr G15845) G15844) (list 'quote G15843) (list 'quote (list->vector (cadr G15845)))) (if (eq? (car G15845) 'list) (cons 'vector (cdr G15845)) (list 'list->vector G15845))))) (set! G15815 (lambda (G15838) ((lambda (G15840) (if (eqv? G15840 'ref) (cadr G15838) (if (eqv? G15840 'primitive) (list 'primitive (cadr G15838)) (if (eqv? G15840 'quote) (list 'quote (cadr G15838)) (if (eqv? G15840 'lambda) (G11460 '#f (cadr G15838) (G15815 (caddr G15838))) (if (eqv? G15840 'map) ((lambda (G15841) (cons '(primitive ellipsis-map) G15841)) (map G15815 (cdr G15838))) (cons (list 'primitive (car G15838)) (map G15815 (cdr G15838))))))))) (car G15838)))) (lambda (G15816 G15817 G15818) ((lambda (G15822) ((lambda (G15824) (if G15824 (apply (lambda (G15826) (call-with-values (lambda () (G15801 G15816 G15826 G15817 '() G12198 '#f)) (lambda (G15830 G15831) ((lambda (G15834 G15835) (G15815 G15835)) G15831 G15830)))) G15824) (G12429 '#f '"invalid syntax" G15822))) (G12196 G15822 '(_ any)))) G15816)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G12210 (lambda (G16106) ((lambda (G16108) (if (eqv? G16108 'quote) G12116 (if (eqv? G16108 'lambda) G12120 (if (eqv? G16108 'case-lambda) G12118 (if (eqv? G16108 'letrec) G12096 (if (eqv? G16108 'letrec*) G12098 (if (eqv? G16108 'case) G12114 (if (eqv? G16108 'if) G12112 (if (eqv? G16108 'when) G12108 (if (eqv? G16108 'unless) G12110 (if (eqv? G16108 'parameterize) G12190 (if (eqv? G16108 'foreign-call) G12192 (if (eqv? G16108 'syntax-case) G12204 (if (eqv? G16108 'syntax) G12208 (if (eqv? G16108 'type-descriptor) G12102 (if (eqv? G16108 'record-type-descriptor) G12104 (if (eqv? G16108 'record-constructor-descriptor) G12106 (if (eqv? G16108 'fluid-let-syntax) G12100 (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G16106))))))))))))))))))) G16106))) (set! G12212 (lambda (G16109) ((lambda (G16111) ((lambda (G16113) (if (if G16113 (begin '#f (apply (lambda (G16115) (if (for-all G11617 G16115) (begin '#f (G10445 (map G11619 G16115))) '#f)) G16113)) '#f) (apply (lambda (G16117) (G12122 (list 'quote (G10445 (map G11619 G16117))))) G16113) (G12429 '#f '"invalid syntax" G16111))) (G12196 G16111 '(_ . each-any)))) G16109))) (set! G12214 (lambda (G16119 G16120) ((lambda (G16123) ((lambda (G16125) (if (if G16125 (begin '#f (apply (lambda (G16127) (if (G11617 G16127) (begin '#f (memq (G11619 G16127) G16120)) '#f)) G16125)) '#f) (apply (lambda (G16129) (G12122 (list 'quote G16129))) G16125) (G12429 '#f '"invalid syntax" G16123))) (G12196 G16123 '(_ any)))) G16119))) (set! G12216 (lambda (G16131) (if (procedure? G16131) G16131 (if (symbol? G16131) ((lambda (G16133) (if (eqv? G16133 'define-record-type) G12184 (if (eqv? G16133 'define-struct) G12182 (if (eqv? G16133 'include) G12172 (if (eqv? G16133 'cond) G12168 (if (eqv? G16133 'let) G12128 (if (eqv? G16133 'do) G12160 (if (eqv? G16133 'or) G12164 (if (eqv? G16133 'and) G12166 (if (eqv? G16133 'let*) G12162 (if (eqv? G16133 'let-values) G12130 (if (eqv? G16133 'let*-values) G12132 (if (eqv? G16133 'syntax-rules) G12176 (if (eqv? G16133 'quasiquote) G12178 (if (eqv? G16133 'quasisyntax) G12180 (if (eqv? G16133 'with-syntax) G12124 (if (eqv? G16133 'identifier-syntax) G12158 (if (eqv? G16133 'time) G12150 (if (eqv? G16133 'delay) G12152 (if (eqv? G16133 'assert) G12154 (if (eqv? G16133 'endianness) G12156 (if (eqv? G16133 'guard) G12146 (if (eqv? G16133 'define-enumeration) G12148 (if (eqv? G16133 'trace-lambda) G12134 (if (eqv? G16133 'trace-define) G12136 (if (eqv? G16133 'trace-define-syntax) G12138 (if (eqv? G16133 'trace-let-syntax) G12142 (if (eqv? G16133 'trace-letrec-syntax) G12144 (if (eqv? G16133 'define-condition-type) G12186 (if (eqv? G16133 'include-into) G12174 (if (eqv? G16133 'eol-style) (lambda (G16138) (G12214 G16138 '(none lf cr crlf nel crnel ls))) (if (eqv? G16133 'error-handling-mode) (lambda (G16136) (G12214 G16136 '(ignore raise replace))) (if (eqv? G16133 'buffer-mode) (lambda (G16134) (G12214 G16134 '(none line block))) (if (eqv? G16133 'file-options) G12212 (if (memv G16133 '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G12188 (error 'macro-transformer '"BUG: invalid macro" G16131)))))))))))))))))))))))))))))))))))) G16131) (error 'core-macro-transformer '"BUG: invalid macro" G16131))))) (set! G12218 (lambda (G16140) (car G16140))) (set! G12220 (lambda (G16142 G16143) ((lambda (G16146) (begin ((letrec ((G16148 (lambda (G16150) (if (G11561 G16150) (void) (if (pair? G16150) (begin (G16148 (car G16150)) (G16148 (cdr G16150))) (if (vector? G16150) (vector-for-each G16148 G16150) (if (symbol? G16150) (G12429 '#f '"raw symbol encountered in output of macro" G16143 G16150) (void)))))))) G16148) G16146) (G11595 (G11585) G16146 G16143))) (G16142 (G11595 G11587 G16143 '#f))))) (set! G12222 (lambda (G16152 G16153) (G12220 (G12216 G16152) G16153))) (set! G12224 (lambda (G16156 G16157) (G12220 (G12218 G16156) G16157))) (set! G12226 (lambda (G16160 G16161) ((lambda (G16164 G16165) (begin (G11116 G16164) ((lambda (G16168) ((lambda (G16170) (G12220 G16170 G16161)) (if (procedure? G16168) G16168 (assertion-violation 'chi-global-macro '"BUG: not a procedure" G16168)))) (symbol-value G16165)))) (car G16160) (cdr G16160)))) (set! G12228 (lambda (G16172 G16173 G16174) (if (null? G16172) '() ((lambda (G16178) (cons G16178 (G12228 (cdr G16172) G16173 G16174))) (G12232 (car G16172) G16173 G16174))))) (set! G12230 (lambda (G16180 G16181 G16182) ((lambda (G16186) ((lambda (G16188) (if G16188 (apply (lambda (G16190 G16191) ((lambda (G16194) (cons G16194 (G12228 G16191 G16181 G16182))) (G12232 G16190 G16181 G16182))) G16188) (G12429 '#f '"invalid syntax" G16186))) (G12196 G16186 '(any . each-any)))) G16180))) (set! G12232 (lambda (G16196 G16197 G16198) (call-with-values (lambda () (G11657 G16196 G16197)) (lambda (G16205 G16206 G16207) ((lambda (G16211 G16212 G16213) ((lambda (G16217) (if (eqv? G16217 'core-macro) ((lambda (G16267) (G16267 G16196 G16197 G16198)) (G12210 G16212)) (if (eqv? G16217 'global) ((lambda (G16263) ((lambda (G16265) ((lambda () (begin ((G12307) G16263) G16265)))) (cdr G16212))) (car G16212)) (if (eqv? G16217 'core-prim) ((lambda (G16261) (list 'primitive G16261)) G16212) (if (eqv? G16217 'call) (G12230 G16196 G16197 G16198) (if (eqv? G16217 'lexical) ((lambda (G16259) G16259) (G12084 G16212)) (if (memv G16217 '(global-macro global-macro!)) (G12232 (G12226 G16212 G16196) G16197 G16198) (if (memv G16217 '(local-macro local-macro!)) (G12232 (G12224 G16212 G16196) G16197 G16198) (if (memv G16217 '(macro macro!)) (G12232 (G12222 G16212 G16196) G16197 G16198) (if (eqv? G16217 'constant) ((lambda (G16257) (list 'quote G16257)) G16212) (if (eqv? G16217 'set!) (G12234 G16196 G16197 G16198) (if (eqv? G16217 'begin) ((lambda (G16249) ((lambda (G16251) (if G16251 (apply (lambda (G16253 G16254) (G11463 '#f (G12228 (cons G16253 G16254) G16197 G16198))) G16251) (G12429 '#f '"invalid syntax" G16249))) (G12196 G16249 '(_ any . each-any)))) G16196) (if (memv G16217 '(let-syntax letrec-syntax)) ((lambda (G16219) ((lambda (G16221) (if (if G16221 (begin '#f (apply (lambda (G16223 G16224 G16225 G16226) (if (G11627 G16223) (void) (G12429 '#f '"invalid identifiers" G16196))) G16221)) '#f) (apply (lambda (G16231 G16232 G16233 G16234) ((lambda (G16239) ((lambda (G16241) ((lambda (G16243) ((lambda () (G11463 '#f (G12228 (map (lambda (G16245) (G11597 G16241 G16245)) (cons G16233 G16234)) (append (map cons G16239 G16243) G16197) (append (map cons G16239 G16243) G16198)))))) (map (lambda (G16247) (G11688 (G12293 (if (eq? G16213 'let-syntax) G16247 (G11597 G16241 G16247)) G16198))) G16232))) (G11546 G16231 G16239))) (map G11495 G16231))) G16221) (G12429 '#f '"invalid syntax" G16219))) (G12196 G16219 '(_ #(each (any any)) any . each-any)))) G16196) (if (eqv? G16217 'displaced-lexical) (G12429 '#f '"identifier out of context" G16196) (if (eqv? G16217 'syntax) (G12429 '#f '"reference to pattern variable outside a syntax form" G16196) (if (memv G16217 '(define define-syntax module import library)) (G12429 '#f (string-append ((lambda (G16218) (if (eqv? G16218 'define) '"a definition" (if (eqv? G16218 'define-syntax) '"a define-syntax" (if (eqv? G16218 'module) '"a module definition" (if (eqv? G16218 'library) '"a library definition" (if (eqv? G16218 'import) '"an import declaration" '"a non-expression")))))) G16213) '" was found where an expression was expected") G16196) (if (eqv? G16217 'mutable) (G12429 '#f '"attempt to reference an unexportable variable" G16196) (G12429 '#f '"invalid expression" G16196)))))))))))))))))) G16213)) G16207 G16206 G16205))))) (set! G12234 (lambda (G16269 G16270 G16271) ((lambda (G16275) ((lambda (G16277) (if (if G16277 (begin '#f (apply (lambda (G16279 G16280) (G11617 G16279)) G16277)) '#f) (apply (lambda (G16283 G16284) (call-with-values (lambda () (G11657 G16283 G16270)) (lambda (G16290 G16291 G16292) ((lambda (G16296 G16297 G16298) ((lambda (G16302) (if (eqv? G16302 'lexical) (begin (G12088 G16297 '#t) (list 'set! (G12084 G16297) (G12232 G16284 G16270 G16271))) (if (eqv? G16302 'core-prim) (G12429 '#f '"cannot modify imported core primitive" G16269) (if (eqv? G16302 'global) (G12429 '#f '"attempt to modify imported binding" G16269) (if (eqv? G16302 'global-macro!) (G12232 (G12226 G16297 G16269) G16270 G16271) (if (eqv? G16302 'local-macro!) (G12232 (G12224 G16297 G16269) G16270 G16271) (if (eqv? G16302 'mutable) (G12429 '#f '"attempt to assign to an unexportable variable" G16269) (G12429 '#f '"invalid syntax" G16269)))))))) G16298)) G16292 G16291 G16290)))) G16277) (G12429 '#f '"invalid syntax" G16275))) (G12196 G16275 '(_ any any)))) G16269))) (set! G12236 (lambda (G16303 G16304) ((lambda (G16307) ((lambda (G16309) (if G16309 (apply (lambda (G16311) (if (G11627 G16311) (void) (G12126 G16304 G16303))) G16309) ((lambda (G16313) ((lambda (G16315) (if G16315 (apply (lambda (G16317 G16318) (if (G11627 (cons G16318 G16317)) (void) (G12126 G16304 G16303))) G16315) ((lambda (G16321) ((lambda (G16323) (if G16323 (apply (lambda () (G12429 '#f '"invalid syntax" G16304)) G16323) (G12429 '#f '"invalid syntax" G16321))) (G12196 G16321 '_))) G16313))) (G12196 G16313 '#(each+ any () any)))) G16307))) (G12196 G16307 'each-any))) G16303))) (set! G12238 (lambda (G16325 G16326 G16327 G16328 G16329) ((lambda (G16335) ((lambda (G16337) (if G16337 (apply (lambda (G16339) (begin (G12236 G16326 G16325) ((lambda (G16341 G16342) (values G16341 (G12254 (G11597 (G11546 G16339 G16342) G16327) (G12092 G16342 G16341 G16328) G16329))) (map G11491 G16339) (map G11495 G16339)))) G16337) ((lambda (G16345) ((lambda (G16347) (if G16347 (apply (lambda (G16349 G16350) (begin (G12236 G16326 G16325) ((lambda (G16353 G16354 G16355 G16356) (values (append G16353 G16355) (G12254 (G11597 (G11546 (cons G16350 G16349) (cons G16356 G16354)) G16327) (G12092 (cons G16356 G16354) (cons G16355 G16353) G16328) G16329))) (map G11491 G16349) (map G11495 G16349) (G11491 G16350) (G11495 G16350)))) G16347) ((lambda (G16361) ((lambda (G16363) (if G16363 (apply (lambda () (G12429 '#f '"invalid syntax" G16326)) G16363) (G12429 '#f '"invalid syntax" G16361))) (G12196 G16361 '_))) G16345))) (G12196 G16345 '#(each+ any () any)))) G16335))) (G12196 G16335 'each-any))) G16326))) (set! G12240 (lambda (G16365 G16366 G16367 G16368 G16369) (if (null? G16366) (values '() '()) (call-with-values (lambda () (G12238 G16365 (car G16366) (car G16367) G16368 G16369)) (lambda (G16377 G16378) ((lambda (G16381 G16382) (call-with-values (lambda () (G12240 G16365 (cdr G16366) (cdr G16367) G16368 G16369)) (lambda (G16387 G16388) ((lambda (G16391 G16392) (values (cons G16382 G16392) (cons G16381 G16391))) G16388 G16387)))) G16378 G16377)))))) (set! G12242 (lambda (G16395 G16396 G16397) ((lambda (G16401 G16402) (call-with-values (lambda () (G12238 G16401 G16401 G16402 G16396 G16397)) (lambda (G16407 G16408) ((lambda (G16411 G16412) (G11460 '#f G16412 G16411)) G16408 G16407)))) (car G16395) (cdr G16395)))) (set! G12244 (lambda (G16415 G16416 G16417) ((lambda (G16421) (if (eqv? G16421 'defun) (G12242 (cdr G16415) G16416 G16417) (if (eqv? G16421 'expr) ((lambda (G16424) (G12232 G16424 G16416 G16417)) (cdr G16415)) (if (eqv? G16421 'top-expr) ((lambda (G16422) (G11463 '#f (list (G12232 G16422 G16416 G16417) (G11464)))) (cdr G16415)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G16415))))) (car G16415)))) (set! G12246 (lambda (G16426 G16427 G16428 G16429 G16430) ((letrec ((G16436 (lambda (G16438 G16439) (if (null? G16438) (map (lambda (G16442) (G12232 G16442 G16429 G16430)) G16428) ((lambda (G16444 G16445) ((lambda (G16448) (if (eqv? G16448 'defun) ((lambda (G16453) (cons (list 'set! G16444 G16453) (G16436 (cdr G16438) (cdr G16439)))) (G12242 (cdr G16445) G16429 G16430)) (if (eqv? G16448 'expr) ((lambda (G16451) (cons (list 'set! G16444 G16451) (G16436 (cdr G16438) (cdr G16439)))) (G12232 (cdr G16445) G16429 G16430)) (if (eqv? G16448 'top-expr) ((lambda (G16449) (cons G16449 (G16436 (cdr G16438) (cdr G16439)))) (G12232 (cdr G16445) G16429 G16430)) (error 'expand-interaction '"invallid" G16445))))) (car G16445))) (car G16438) (car G16439)))))) G16436) G16426 G16427))) (set! G12248 (lambda (G16455 G16456 G16457) ((letrec ((G16461 (lambda (G16463) (if (null? G16463) '() ((lambda (G16465) (cons G16465 (G16461 (cdr G16463)))) (G12244 (car G16463) G16456 G16457)))))) G16461) G16455))) (set! G12250 (lambda (G16467 G16468 G16469) (if (null? G16468) '#f (if (G11623 G16467 (car G16468)) (car G16469) (G12250 G16467 (cdr G16468) (cdr G16469)))))) (set! G12252 (lambda (G16473) ((letrec ((G16475 (lambda (G16477 G16478) (if (null? G16477) G16478 ((lambda (G16481) (if G16481 ((lambda (G16483) (G16475 (cdr G16477) (cons (list (car G16477) G16483) G16478))) G16481) (G16475 (cdr G16477) G16478))) (G12250 (car G16477) (cdr G16477) (cdr G16477))))))) G16475) G16473 '()))) (set! G12254 (lambda (G16485 G16486 G16487) ((lambda (G16491) (call-with-values (lambda () (G12291 (map (lambda (G16500) (G11597 G16491 G16500)) (G11615 G16485)) G16486 G16487 '() '() '() '() G16491 '#f)) (lambda (G16502 G16503 G16504 G16505 G16506 G16507 G16508) ((lambda (G16516 G16517 G16518 G16519 G16520 G16521 G16522) (begin (if (null? G16522) (G12429 '#f '"no expression in body" G16522) (void)) ((lambda (G16530) ((lambda (G16532) ((lambda () (G11466 '#f (reverse G16519) (reverse G16532) (G11463 '#f G16530))))) (G12248 G16518 G16521 G16520))) (G12228 (append (apply append (reverse G16517)) G16522) G16521 G16520)))) G16508 G16507 G16506 G16505 G16504 G16503 G16502)))) (G11536)))) (set! G12256 (lambda (G16534) ((lambda (G16536) ((lambda (G16538) (if G16538 (apply (lambda (G16540 G16541) (begin (if (for-all G11617 G16540) (void) (G12429 '#f '"module exports must be identifiers" G16534)) (values '#f (list->vector G16540) G16541))) G16538) ((lambda (G16544) ((lambda (G16546) (if G16546 (apply (lambda (G16548 G16549 G16550) (begin (if (G11617 G16548) (void) (G12429 '#f '"module name must be an identifier" G16534)) (if (for-all G11617 G16549) (void) (G12429 '#f '"module exports must be identifiers" G16534)) (values G16548 (list->vector G16549) G16550))) G16546) (G12429 '#f '"invalid syntax" G16544))) (G12196 G16544 '(_ any each-any . each-any)))) G16536))) (G12196 G16536 '(_ each-any . each-any)))) G16534))) (set! G12262 (make-record-type-descriptor 'module-interface '#f 'G12260 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G12264 '#f) (set! G12266 (make-record-constructor-descriptor G12262 '#f G12264)) (set! G12271 (record-predicate G12262)) (set! G12273 (record-constructor G12266)) (set! G12275 (record-accessor G12262 '0)) (set! G12277 (record-accessor G12262 '1)) (set! G12279 (record-accessor G12262 '2)) (set! G12281 (record-mutator G12262 '0)) (set! G12283 (record-mutator G12262 '1)) (set! G12285 (record-mutator G12262 '2)) (set! G12287 (lambda (G16554 G16555) ((lambda (G16559) (begin (set! G16559 (lambda (G16566 G16567) (begin (if (null? G16566) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G16570) (if (eq? G16570 G16567) '() (cons G16570 (G16559 (cdr G16566) G16567)))) (car G16566))))) ((lambda (G16560 G16561) (if (null? G16560) G16561 (vector-map (lambda (G16564) (G11563 (G11565 G16564) (append G16560 (G11567 G16564)) '() '())) G16561))) (G16559 (G11567 G16555) (G12275 G16554)) (G12277 G16554)))) '#f))) (set! G12289 (lambda (G16572 G16573 G16574 G16575 G16576 G16577 G16578) (call-with-values (lambda () (G12256 G16572)) (lambda (G16589 G16590 G16591) ((lambda (G16595 G16596 G16597) ((lambda (G16601) ((lambda (G16603) ((lambda () (call-with-values (lambda () (G12291 G16603 G16573 G16574 G16575 G16576 G16577 G16578 G16601 '#f)) (lambda (G16612 G16613 G16614 G16615 G16616 G16617 G16618) ((lambda (G16626 G16627 G16628 G16629 G16630 G16631 G16632) ((lambda (G16640 G16641) (if (not G16597) (values G16629 G16628 G16596 G16640 G16631 G16630 G16641 G16626) ((lambda (G16644 G16645) (values G16629 G16628 (vector G16597) (vector G16644) (cons (cons G16644 (cons '$module G16645)) G16631) (cons (cons G16644 (cons '$module G16645)) G16630) G16641 G16626)) (G11495 'module) (G12273 (car (G11567 G16597)) (vector-map (lambda (G16648) (G11563 (G11565 G16648) (G11567 G16648) '() '())) G16596) G16640)))) (vector-map (lambda (G16650) ((lambda (G16652) (if G16652 G16652 (begin '#f (G12429 '#f '"cannot find module export" G16650)))) (G11643 (G11563 (G11619 G16650) (G11567 G16650) (list G16601) '())))) G16596) (cons G16632 G16627))) G16618 G16617 G16616 G16615 G16614 G16613 G16612)))))) (map (lambda (G16654) (G11597 G16601 G16654)) (G11615 G16595)))) (G11536))) G16591 G16590 G16589))))) (set! G12291 (lambda (G16656 G16657 G16658 G16659 G16660 G16661 G16662 G16663 G16664) (if (null? G16656) (values G16656 G16657 G16658 G16659 G16660 G16661 G16662) ((lambda (G16674) (call-with-values (lambda () (G11657 G16674 G16657)) (lambda (G16679 G16680 G16681) ((lambda (G16685 G16686 G16687) ((lambda (G16691) ((lambda (G16693) (if (eqv? G16693 'define) (call-with-values (lambda () (G12076 G16674)) (lambda (G16884 G16885) ((lambda (G16888 G16889) (begin (if (G11631 G16889 G16691) (G12429 '#f '"cannot redefine keyword" G16674) (void)) (call-with-values (lambda () (G11499 G16889 G16663)) (lambda (G16894 G16895) ((lambda (G16898 G16899) (begin (G11538 G16663 G16889 G16899) (G12291 (cdr G16656) (G12090 G16899 G16898 G16657) G16658 (cons G16898 G16659) (cons G16888 G16660) G16661 G16691 G16663 G16664))) G16895 G16894))))) G16885 G16884))) (if (eqv? G16693 'define-syntax) (call-with-values (lambda () (G12078 G16674)) (lambda (G16868 G16869) ((lambda (G16872 G16873) (begin (if (G11631 G16873 G16691) (G12429 '#f '"cannot redefine keyword" G16674) (void)) ((lambda (G16876 G16877) (begin (G11538 G16663 G16873 G16876) ((lambda (G16880) (G12291 (cdr G16656) (cons (cons G16876 G16880) G16657) (cons (cons G16876 G16880) G16658) G16659 G16660 G16661 G16691 G16663 G16664)) (G11688 G16877)))) (G11501 G16873 G16663) (G12293 G16872 G16658)))) G16869 G16868))) (if (memv G16693 '(let-syntax letrec-syntax)) ((lambda (G16840) ((lambda (G16842) (if (if G16842 (begin '#f (apply (lambda (G16844 G16845 G16846) (if (G11627 G16844) (void) (G12429 '#f '"invalid identifiers" G16674))) G16842)) '#f) (apply (lambda (G16850 G16851 G16852) ((lambda (G16856) ((lambda (G16858) ((lambda (G16860) ((lambda () (G12291 (append (map (lambda (G16862) (G11597 G16858 G16862)) G16852) (cdr G16656)) (append (map cons G16856 G16860) G16657) (append (map cons G16856 G16860) G16658) G16659 G16660 G16661 G16691 G16663 G16664)))) (map (lambda (G16864) (G11688 (G12293 (if (eq? G16687 'let-syntax) G16864 (G11597 G16858 G16864)) G16658))) G16851))) (G11546 G16850 G16856))) (map G11495 G16850))) G16842) (G12429 '#f '"invalid syntax" G16840))) (G12196 G16840 '(_ #(each (any any)) . each-any)))) G16674) (if (eqv? G16693 'begin) ((lambda (G16834) ((lambda (G16836) (if G16836 (apply (lambda (G16838) (G12291 (append G16838 (cdr G16656)) G16657 G16658 G16659 G16660 G16661 G16691 G16663 G16664)) G16836) (G12429 '#f '"invalid syntax" G16834))) (G12196 G16834 '(_ . each-any)))) G16674) (if (memv G16693 '(global-macro global-macro!)) (G12291 (cons (G11597 G16663 (G12226 G16686 G16674)) (cdr G16656)) G16657 G16658 G16659 G16660 G16661 G16691 G16663 G16664) (if (memv G16693 '(local-macro local-macro!)) (G12291 (cons (G11597 G16663 (G12224 G16686 G16674)) (cdr G16656)) G16657 G16658 G16659 G16660 G16661 G16691 G16663 G16664) (if (memv G16693 '(macro macro!)) (G12291 (cons (G11597 G16663 (G12222 G16686 G16674)) (cdr G16656)) G16657 G16658 G16659 G16660 G16661 G16691 G16663 G16664) (if (eqv? G16693 'module) (call-with-values (lambda () (G12289 G16674 G16657 G16658 G16659 G16660 G16661 G16691)) (lambda (G16798 G16799 G16800 G16801 G16802 G16803 G16804 G16805) ((lambda (G16814 G16815 G16816 G16817 G16818 G16819 G16820 G16821) (begin (vector-for-each (lambda (G16830 G16831) (G11538 G16663 G16830 G16831)) G16819 G16818) (G12291 (cdr G16656) G16817 G16816 G16821 G16820 G16815 G16814 G16663 G16664))) G16805 G16804 G16803 G16802 G16801 G16800 G16799 G16798))) (if (eqv? G16693 'library) (begin (G12403 (G11639 G16674)) (G12291 (cdr G16656) G16657 G16658 G16659 G16660 G16661 G16691 G16663 G16664)) (if (eqv? G16693 'import) (begin ((lambda () ((lambda (G16695 G16697 G16699) (begin (set! G16695 (lambda (G16770) ((lambda (G16772) ((lambda (G16774) (if (if G16774 (begin '#f (apply (lambda (G16776) (G11617 G16776)) G16774)) '#f) (apply (lambda (G16778) '#t) G16774) ((lambda (G16780) ((lambda (G16782) (if G16782 (apply (lambda (G16784) '#f) G16782) ((lambda (G16786) ((lambda (G16788) (if G16788 (apply (lambda () (G12429 '#f '"malformed import form" G16770)) G16788) (G12429 '#f '"invalid syntax" G16786))) (G12196 G16786 '_))) G16780))) (G12196 G16780 '(_ . each-any)))) G16772))) (G12196 G16772 '(_ any)))) G16770))) (set! G16697 (lambda (G16740 G16741) ((lambda (G16744) ((lambda (G16746) (if (if G16746 (begin '#f (apply (lambda (G16748) (G11617 G16748)) G16746)) '#f) (apply (lambda (G16750) (call-with-values (lambda () (G11657 G16750 G16741)) (lambda (G16755 G16756 G16757) ((lambda (G16761 G16762 G16763) ((lambda (G16767) (if (eqv? G16767 '$module) ((lambda (G16768) (values (G12287 G16768 G16750) (G12279 G16768))) G16762) (G12429 '#f '"invalid import" G16740))) G16763)) G16757 G16756 G16755)))) G16746) (G12429 '#f '"invalid syntax" G16744))) (G12196 G16744 '(_ any)))) G16740))) (set! G16699 (lambda (G16714) ((lambda (G16716) ((lambda (G16718) (if G16718 (apply (lambda (G16720 G16721) (call-with-values (lambda () (G12301 (G12435 G16721))) (lambda (G16726 G16727) ((lambda (G16730 G16731) (values (vector-map (lambda (G16734) (G11583 G16720 G16734)) G16731) G16730)) G16727 G16726)))) G16718) ((lambda (G16736) ((lambda (G16738) (if G16738 (apply (lambda () (G12429 '#f '"invalid import form" G16714)) G16738) (G12429 '#f '"invalid syntax" G16736))) (G12196 G16736 '_))) G16716))) (G12196 G16716 '(any . each-any)))) G16714))) (call-with-values (lambda () (if (G16695 G16674) (G16697 G16674 G16657) (G16699 G16674))) (lambda (G16702 G16703) ((lambda (G16706 G16707) (vector-for-each (lambda (G16710 G16711) (G11538 G16663 G16710 G16711)) G16707 G16706)) G16703 G16702))))) '#f '#f '#f))) (G12291 (cdr G16656) G16657 G16658 G16659 G16660 G16661 G16691 G16663 G16664)) (if G16664 (G12291 (cdr G16656) G16657 G16658 (cons (G11491 'dummy) G16659) (cons (cons 'top-expr G16674) G16660) G16661 G16691 G16663 G16664) (values G16656 G16657 G16658 G16659 G16660 G16661 G16691))))))))))))) G16687)) (if (G11617 G16685) (cons G16685 G16662) G16662))) G16681 G16680 G16679)))) (car G16656))))) (set! G12293 (lambda (G16902 G16903) ((lambda (G16906) ((lambda (G16908) (begin (for-each ((lambda (G16910) (lambda (G16912) (begin (G11115 G16912) (G16910 G16912)))) (G12309)) (G16906)) G16908)) ((lambda (G16918 G16919 G16920 G16921) ((lambda (G16926) (dynamic-wind G16926 (lambda () (G12232 G16902 G16903 G16903)) G16926)) (lambda () (begin ((lambda (G16928) (begin (G16918 G16920) (set! G16920 G16928))) (G16918)) ((lambda (G16930) (begin (G16919 G16921) (set! G16921 G16930))) (G16919)))))) G12307 G12309 G16906 (lambda (G16932) (values))))) (G12305)))) (set! G12295 (lambda (G16934) ((lambda (G16937) (begin (set! G16937 (lambda (G16966) (symbol? (G12435 G16966)))) ((letrec ((G16938 (lambda (G16940 G16941 G16942) (if (null? G16940) (begin ((lambda (G16946) (if (G11627 G16946) (void) (G12429 'export '"invalid exports" (G12252 G16946)))) (map (lambda (G16948) (G11563 G16948 G11487 '() '())) G16942)) (values (map G12435 G16941) (map G12435 G16942))) ((lambda (G16950) ((lambda (G16952) (if G16952 (apply (lambda (G16954 G16955 G16956) (begin (if (if (eq? (G12435 G16954) 'rename) (if (for-all G16937 G16955) (begin '#f (for-all G16937 G16956)) '#f) '#f) (void) (G12429 'export '"invalid export specifier" (car G16940))) (G16938 (cdr G16940) (append G16955 G16941) (append G16956 G16942)))) G16952) ((lambda (G16960) ((lambda (G16962) (if G16962 (apply (lambda (G16964) (begin (if (G16937 G16964) (void) (G12429 'export '"invalid export" G16964)) (G16938 (cdr G16940) (cons G16964 G16941) (cons G16964 G16942)))) G16962) (G12429 '#f '"invalid syntax" G16960))) (G12196 G16960 'any))) G16950))) (G12196 G16950 '(any . #(each (any any)))))) (car G16940)))))) G16938) G16934 '() '()))) '#f))) (set! G12297 (lambda (G16968) ((lambda (G16971) (begin (set! G16971 (lambda (G16982) ((lambda (G16984) ((lambda (G16986) (if (if G16986 (begin '#f (apply (lambda (G16988) (for-all (lambda (G16990) ((lambda (G16992) (if (integer? G16992) (begin '#f (exact? G16992)) '#f)) (G12435 G16990))) G16988)) G16986)) '#f) (apply (lambda (G16994) (values '() (map G12435 G16994))) G16986) ((lambda (G16996) ((lambda (G16998) (if (if G16998 (begin '#f (apply (lambda (G17000 G17001) (symbol? (G12435 G17000))) G16998)) '#f) (apply (lambda (G17004 G17005) (call-with-values (lambda () (G16971 G17005)) (lambda (G17010 G17011) ((lambda (G17014 G17015) (values (cons (G12435 G17004) G17015) G17014)) G17011 G17010)))) G16998) ((lambda (G17018) ((lambda (G17020) (if G17020 (apply (lambda () (values '() '())) G17020) ((lambda (G17022) ((lambda (G17024) (if G17024 (apply (lambda () (G12429 '#f '"invalid library name" G16968)) G17024) (G12429 '#f '"invalid syntax" G17022))) (G12196 G17022 '_))) G17018))) (G12196 G17018 '()))) G16996))) (G12196 G16996 '(any . any)))) G16984))) (G12196 G16984 '(each-any)))) G16982))) (call-with-values (lambda () (G16971 G16968)) (lambda (G16974 G16975) ((lambda (G16978 G16979) (begin (if (null? G16979) (G12429 '#f '"empty library name" G16968) (void)) (values G16979 G16978))) G16975 G16974))))) '#f))) (set! G12299 (lambda (G17026) ((lambda (G17028) ((lambda (G17030) (if (if G17030 (begin '#f (apply (lambda (G17032 G17033 G17034 G17035 G17036 G17037 G17038) (if (eq? (G12435 G17034) 'export) (if (eq? (G12435 G17036) 'import) (begin '#f (eq? (G12435 G17032) 'library)) '#f) '#f)) G17030)) '#f) (apply (lambda (G17046 G17047 G17048 G17049 G17050 G17051 G17052) (values G17047 G17049 G17051 G17052)) G17030) ((lambda (G17060) ((lambda (G17062) (if G17062 (apply (lambda () (G12429 '#f '"malformed library" G17026)) G17062) (G12429 '#f '"invalid syntax" G17060))) (G12196 G17060 '_))) G17028))) (G12196 G17028 '(any each-any (any . each-any) (any . each-any) . each-any)))) G17026))) (set! G12301 (lambda (G17064) ((lambda (G17067 G17069 G17071 G17073 G17075 G17077 G17079 G17081 G17083 G17085 G17087) (begin (set! G17067 (lambda (G17574) (symbol? (G12435 G17574)))) (set! G17069 (lambda (G17572) (G12429 'import '"two imports with different bindings" G17572))) (set! G17071 (lambda (G17554 G17555) ((lambda (G17559) (begin (set! G17559 (lambda (G17560 G17561) ((lambda (G17564 G17565) ((lambda (G17568) (if G17568 ((lambda (G17570) (if (eq? (cdr G17570) G17565) G17561 (G17069 G17564))) G17568) (cons G17560 G17561))) (assq G17564 G17561))) (car G17560) (cdr G17560)))) (if (null? G17554) G17555 (G17559 (car G17554) (G17071 (cdr G17554) G17555))))) '#f))) (set! G17073 (lambda (G17512 G17513) ((lambda (G17517) (begin (set! G17517 (lambda (G17538 G17539) (if (null? G17539) (G12429 'import '"cannot rename unbound identifier" G17538) (if (eq? G17538 (caar G17539)) (values (cdar G17539) (cdr G17539)) ((lambda (G17542) (call-with-values (lambda () (G17517 G17538 (cdr G17539))) (lambda (G17546 G17547) ((lambda (G17550 G17551) (values G17551 (cons G17542 G17550))) G17547 G17546)))) (car G17539)))))) (if (null? G17512) (values '() G17513) (call-with-values (lambda () (G17517 (car G17512) G17513)) (lambda (G17520 G17521) ((lambda (G17524 G17525) (call-with-values (lambda () (G17073 (cdr G17512) G17524)) (lambda (G17530 G17531) ((lambda (G17534 G17535) (values (cons G17525 G17535) G17534)) G17531 G17530)))) G17521 G17520)))))) '#f))) (set! G17075 (lambda (G17504 G17505) (map (lambda (G17508) ((lambda (G17510) (if G17510 (cdr G17510) (G12429 'import '"cannot find identifier" G17508))) (assq G17508 G17505))) G17504))) (set! G17077 (lambda (G17496 G17497) ((letrec ((G17500 (lambda (G17502) (if (null? G17502) '() (if (memq (caar G17502) G17496) (G17500 (cdr G17502)) (cons (car G17502) (G17500 (cdr G17502)))))))) G17500) G17497))) (set! G17079 (lambda (G17494) (if (null? G17494) '() (if (memq (car G17494) (cdr G17494)) (G17079 (cdr G17494)) (cons (car G17494) (G17079 (cdr G17494))))))) (set! G17081 (lambda (G17266) ((lambda (G17269 G17271 G17273) (begin (set! G17269 (lambda (G17492) (if (integer? G17492) (if (exact? G17492) (begin '#f (>= G17492 '0)) '#f) '#f))) (set! G17271 (lambda (G17396) ((lambda (G17398) ((lambda (G17400) (if (if G17400 (begin '#f (apply (lambda (G17402) (G17269 (G12435 G17402))) G17400)) '#f) (apply (lambda (G17404) (lambda (G17406) (= G17406 (G12435 G17404)))) G17400) ((lambda (G17408) ((lambda (G17410) (if (if G17410 (begin '#f (apply (lambda (G17412 G17413) (eq? (G12435 G17412) 'and)) G17410)) '#f) (apply (lambda (G17416 G17417) ((lambda (G17420) (lambda (G17422) (for-all (lambda (G17424) (G17424 G17422)) G17420))) (map G17271 G17417))) G17410) ((lambda (G17426) ((lambda (G17428) (if (if G17428 (begin '#f (apply (lambda (G17430 G17431) (eq? (G12435 G17430) 'or)) G17428)) '#f) (apply (lambda (G17434 G17435) ((lambda (G17438) (lambda (G17440) (exists (lambda (G17442) (G17442 G17440)) G17438))) (map G17271 G17435))) G17428) ((lambda (G17444) ((lambda (G17446) (if (if G17446 (begin '#f (apply (lambda (G17448 G17449) (eq? (G12435 G17448) 'not)) G17446)) '#f) (apply (lambda (G17452 G17453) ((lambda (G17456) (lambda (G17458) (not (G17456 G17458)))) (G17271 G17453))) G17446) ((lambda (G17460) ((lambda (G17462) (if (if G17462 (begin '#f (apply (lambda (G17464 G17465) (if (eq? (G12435 G17464) '<=) (begin '#f (G17269 (G12435 G17465))) '#f)) G17462)) '#f) (apply (lambda (G17468 G17469) (lambda (G17472) (<= G17472 (G12435 G17469)))) G17462) ((lambda (G17474) ((lambda (G17476) (if (if G17476 (begin '#f (apply (lambda (G17478 G17479) (if (eq? (G12435 G17478) '>=) (begin '#f (G17269 G17479)) '#f)) G17476)) '#f) (apply (lambda (G17482 G17483) (lambda (G17486) (>= G17486 (G12435 G17483)))) G17476) ((lambda (G17488) ((lambda (G17490) (if G17490 (apply (lambda () (G12429 'import '"invalid sub-version spec" G17266 G17396)) G17490) (G12429 '#f '"invalid syntax" G17488))) (G12196 G17488 '_))) G17474))) (G12196 G17474 '(any any)))) G17460))) (G12196 G17460 '(any any)))) G17444))) (G12196 G17444 '(any any)))) G17426))) (G12196 G17426 '(any . each-any)))) G17408))) (G12196 G17408 '(any . each-any)))) G17398))) (G12196 G17398 'any))) G17396))) (set! G17273 (lambda (G17316) ((lambda (G17318) ((lambda (G17320) (if G17320 (apply (lambda () (lambda (G17322) '#t)) G17320) ((lambda (G17324) ((lambda (G17326) (if (if G17326 (begin '#f (apply (lambda (G17328 G17329) (eq? (G12435 G17328) 'and)) G17326)) '#f) (apply (lambda (G17332 G17333) ((lambda (G17336) (lambda (G17338) (for-all (lambda (G17340) (G17340 G17338)) G17336))) (map G17273 G17333))) G17326) ((lambda (G17342) ((lambda (G17344) (if (if G17344 (begin '#f (apply (lambda (G17346 G17347) (eq? (G12435 G17346) 'or)) G17344)) '#f) (apply (lambda (G17350 G17351) ((lambda (G17354) (lambda (G17356) (exists (lambda (G17358) (G17358 G17356)) G17354))) (map G17273 G17351))) G17344) ((lambda (G17360) ((lambda (G17362) (if (if G17362 (begin '#f (apply (lambda (G17364 G17365) (eq? (G12435 G17364) 'not)) G17362)) '#f) (apply (lambda (G17368 G17369) ((lambda (G17372) (lambda (G17374) (not (G17372 G17374)))) (G17273 G17369))) G17362) ((lambda (G17376) ((lambda (G17378) (if G17378 (apply (lambda (G17380) ((lambda (G17382) (lambda (G17384) ((letrec ((G17386 (lambda (G17388 G17389) (if (null? G17388) '#t (if (null? G17389) '#f (if ((car G17388) (car G17389)) (begin '#f (G17386 (cdr G17388) (cdr G17389))) '#f)))))) G17386) G17382 G17384))) (map G17271 G17380))) G17378) ((lambda (G17392) ((lambda (G17394) (if G17394 (apply (lambda () (G12429 'import '"invalid version spec" G17266 G17316)) G17394) (G12429 '#f '"invalid syntax" G17392))) (G12196 G17392 '_))) G17376))) (G12196 G17376 'each-any))) G17360))) (G12196 G17360 '(any any)))) G17342))) (G12196 G17342 '(any . each-any)))) G17324))) (G12196 G17324 '(any . each-any)))) G17318))) (G12196 G17318 '()))) G17316))) ((letrec ((G17274 (lambda (G17276) ((lambda (G17278) ((lambda (G17280) (if G17280 (apply (lambda (G17282) (values '() (G17273 G17282))) G17280) ((lambda (G17284) ((lambda (G17286) (if (if G17286 (begin '#f (apply (lambda (G17288 G17289) (G17067 G17288)) G17286)) '#f) (apply (lambda (G17292 G17293) (call-with-values (lambda () (G17274 G17293)) (lambda (G17298 G17299) ((lambda (G17302 G17303) (values (cons (G12435 G17292) G17303) G17302)) G17299 G17298)))) G17286) ((lambda (G17306) ((lambda (G17308) (if G17308 (apply (lambda () (values '() (lambda (G17310) '#t))) G17308) ((lambda (G17312) ((lambda (G17314) (if G17314 (apply (lambda () (G12429 '#f '"invalid import spec" G17266)) G17314) (G12429 '#f '"invalid syntax" G17312))) (G12196 G17312 '_))) G17306))) (G12196 G17306 '()))) G17284))) (G12196 G17284 '(any . any)))) G17278))) (G12196 G17278 '(each-any)))) G17276)))) G17274) G17266))) '#f '#f '#f))) (set! G17083 (lambda (G17252) (call-with-values (lambda () (G17081 G17252)) (lambda (G17256 G17257) ((lambda (G17260 G17261) (begin (if (null? G17261) (G12429 'import '"empty library name" G17252) (void)) ((lambda (G17264) (begin (if G17264 (void) (G12429 'import '"cannot find library with required name" G17261)) (if (G17260 (G11068 G17264)) (void) (G12429 'import '"library does not satisfy version specification" G17252 G17264)) ((G12311) G17264) (G11072 G17264))) (G11108 G17261)))) G17257 G17256))))) (set! G17085 (lambda (G17110) ((lambda (G17112) ((lambda (G17114) (if (if G17114 (begin '#f (apply (lambda (G17116 G17117) (not (memq (G12435 G17116) '(for rename except only prefix library)))) G17114)) '#f) (apply (lambda (G17120 G17121) (G17083 (cons G17120 G17121))) G17114) ((lambda (G17124) ((lambda (G17126) (if (if G17126 (begin '#f (apply (lambda (G17128 G17129 G17130 G17131) (if (eq? (G12435 G17128) 'rename) (if (for-all G17067 G17130) (begin '#f (for-all G17067 G17131)) '#f) '#f)) G17126)) '#f) (apply (lambda (G17136 G17137 G17138 G17139) ((lambda (G17144 G17145 G17146) ((lambda (G17150) ((lambda (G17152) (G17071 (map cons G17146 G17150) G17152)) (G17077 G17145 G17144))) (G17075 G17145 G17144))) (G17085 G17137) (map G12435 G17138) (map G12435 G17139))) G17126) ((lambda (G17154) ((lambda (G17156) (if (if G17156 (begin '#f (apply (lambda (G17158 G17159 G17160) (if (eq? (G12435 G17158) 'except) (begin '#f (for-all G17067 G17160)) '#f)) G17156)) '#f) (apply (lambda (G17164 G17165 G17166) ((lambda (G17170) (G17077 (map G12435 G17166) G17170)) (G17085 G17165))) G17156) ((lambda (G17172) ((lambda (G17174) (if (if G17174 (begin '#f (apply (lambda (G17176 G17177 G17178) (if (eq? (G12435 G17176) 'only) (begin '#f (for-all G17067 G17178)) '#f)) G17174)) '#f) (apply (lambda (G17182 G17183 G17184) ((lambda (G17188 G17189) ((lambda (G17192) ((lambda (G17194) (map cons G17192 G17194)) (G17075 G17192 G17188))) (G17079 G17189))) (G17085 G17183) (map G12435 G17184))) G17174) ((lambda (G17196) ((lambda (G17198) (if (if G17198 (begin '#f (apply (lambda (G17200 G17201 G17202) (if (eq? (G12435 G17200) 'prefix) (begin '#f (G17067 G17202)) '#f)) G17198)) '#f) (apply (lambda (G17206 G17207 G17208) ((lambda (G17212 G17213) (map (lambda (G17216) (cons (string->symbol (string-append G17213 (symbol->string (car G17216)))) (cdr G17216))) G17212)) (G17085 G17207) (symbol->string (G12435 G17208)))) G17198) ((lambda (G17218) ((lambda (G17220) (if (if G17220 (begin '#f (apply (lambda (G17222 G17223) (eq? (G12435 G17222) 'library)) G17220)) '#f) (apply (lambda (G17226 G17227) (G17083 G17227)) G17220) ((lambda (G17230) ((lambda (G17232) (if (if G17232 (begin '#f (apply (lambda (G17234 G17235 G17236) (eq? (G12435 G17234) 'for)) G17232)) '#f) (apply (lambda (G17240 G17241 G17242) (G17085 G17241)) G17232) ((lambda (G17246) ((lambda (G17248) (if G17248 (apply (lambda (G17250) (G12429 'import '"invalid import spec" G17250)) G17248) (G12429 '#f '"invalid syntax" G17246))) (G12196 G17246 'any))) G17230))) (G12196 G17230 '(any any . any)))) G17218))) (G12196 G17218 '(any each-any)))) G17196))) (G12196 G17196 '(any any any)))) G17172))) (G12196 G17172 '(any any . each-any)))) G17154))) (G12196 G17154 '(any any . each-any)))) G17124))) (G12196 G17124 '(any any . #(each (any any)))))) G17112))) (G12196 G17112 '(any . each-any)))) G17110))) (set! G17087 (lambda (G17094 G17095) ((lambda (G17098) (for-each (lambda (G17100) ((lambda (G17102 G17103) ((lambda (G17106) (if G17106 ((lambda (G17108) (if (eq? G17108 G17103) (void) (G17069 G17102))) G17106) (hashtable-set! G17095 G17102 G17103))) (hashtable-ref G17095 G17102 '#f))) (car G17100) (cdr G17100))) G17098)) (G17085 G17094)))) ((letrec ((G17088 (lambda (G17090 G17091) (if (null? G17090) (hashtable-entries G17091) (begin (G17087 (car G17090) G17091) (G17088 (cdr G17090) G17091)))))) G17088) G17064 (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12303 (lambda (G17576 G17577) ((lambda (G17580) (begin (vector-for-each (lambda (G17582 G17583) (begin (if (symbol? G17582) (void) (error 'make-top-rib '"BUG: not a symbol" G17582)) (G11538 G17580 (G11563 G17582 G11487 '() '()) G17583))) G17576 G17577) G17580)) (G11536)))) (set! G12305 (lambda () ((lambda (G17586) (lambda G17590 ((lambda (G17591) (if (= G17591 '0) (apply (lambda () G17586) G17590) (if (= G17591 '1) (apply (lambda (G17588) (set! G17586 (G11480 G17588 G17586))) G17590) (error 'apply '"invalid arg count")))) (length G17590)))) '()))) (set! G12307 (G10444 (lambda G17592 (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G17594) (begin (if (procedure? G17594) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" G17594)) G17594)))) (set! G12309 (G10444 (lambda G17596 (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G17598) (begin (if (procedure? G17598) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" G17598)) G17598)))) (set! G12311 (G10444 (lambda G17600 (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G17602) (begin (if (procedure? G17602) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" G17602)) G17602)))) (set! G12313 (lambda (G17604 G17605 G17606) (call-with-values (lambda () (G12291 G17604 '() '() '() '() '() '() G17605 G17606)) (lambda (G17617 G17618 G17619 G17620 G17621 G17622 G17623) ((lambda (G17631 G17632 G17633 G17634 G17635 G17636 G17637) (values (append (apply append (reverse G17632)) G17637) G17636 G17635 (reverse G17634) (reverse G17633))) G17623 G17622 G17621 G17620 G17619 G17618 G17617))))) (set! G12315 (lambda (G17645 G17646 G17647) (call-with-values (lambda () (G12291 (list G17645) G17647 G17647 '() '() '() '() G17646 '#t)) (lambda (G17658 G17659 G17660 G17661 G17662 G17663 G17664) ((lambda (G17672 G17673 G17674 G17675 G17676 G17677 G17678) ((lambda (G17686) ((lambda (G17688) (values G17688 G17677)) (if (null? G17686) (G11464) (if (null? (cdr G17686)) (car G17686) (G11463 '#f G17686))))) (G12246 (reverse G17675) (reverse G17674) (append (apply append (reverse G17673)) G17678) G17677 G17676))) G17664 G17663 G17662 G17661 G17660 G17659 G17658))))) (set! G12317 (lambda (G17690 G17691 G17692 G17693 G17694) ((lambda (G17701) (begin (set! G17701 (G12305)) ((lambda (G17706 G17707 G17708 G17709) ((lambda (G17714) (dynamic-wind G17714 (lambda () (call-with-values (lambda () (G12295 G17691)) (lambda (G17718 G17719) ((lambda (G17722 G17723) (call-with-values (lambda () (G12301 G17692)) (lambda (G17728 G17729) ((lambda (G17732 G17733) ((lambda (G17736) ((lambda (G17738 G17739 G17740) ((lambda (G17748 G17749 G17750 G17751) ((lambda (G17756) (dynamic-wind G17756 (lambda () (call-with-values (lambda () (G12313 G17738 G17736 G17694)) (lambda (G17763 G17764 G17765 G17766 G17767) ((lambda (G17773 G17774 G17775 G17776 G17777) (begin (G11542 G17736) ((lambda (G17783) ((lambda (G17785) ((lambda () (begin (G11544 G17736) ((lambda (G17787 G17788) ((lambda (G17792) (begin (set! G17792 '"attempt to export mutated variable") (call-with-values (lambda () (G12413 G17774 G17787 G17776)) (lambda (G17796 G17797 G17798) ((lambda (G17802 G17803 G17804) (begin (for-each (lambda (G17808) ((lambda (G17810 G17811) ((lambda (G17814) (if G17814 ((lambda (G17816) ((lambda (G17818) (if (eq? G17818 'mutable) (G12429 'export G17792 G17810) (void))) (car G17816))) (cdr G17814)) (void))) (assq G17811 G17804))) (car G17808) (cdr G17808))) G17788) ((lambda (G17820 G17821) (values (G17701) (G17739) (G17740) (G11463 '#f (append G17821 (list G17820))) G17802 G17788 G17804)) (G11466 '#f G17774 G17785 (G12409 G17803 G17783)) (map G11459 (map cdr G17803))))) G17798 G17797 G17796))))) '#f)) (map G11493 G17774) (G12411 G17723 G17722 G17736)))))) (G12248 G17773 G17776 G17775))) (G12228 G17777 G17776 G17775)))) G17767 G17766 G17765 G17764 G17763)))) G17756)) (lambda () (begin ((lambda (G17824) (begin (G17748 G17750) (set! G17750 G17824))) (G17748)) ((lambda (G17826) (begin (G17749 G17751) (set! G17751 G17826))) (G17749)))))) G12307 G12309 G17739 G17740)) (map (lambda (G17828) (G11563 G17828 G11487 (list G17736) '())) G17693) (G12305) (G12305))) (G12303 G17733 G17732))) G17729 G17728)))) G17719 G17718)))) G17714)) (lambda () (begin ((lambda (G17830) (begin (G17706 G17708) (set! G17708 G17830))) (G17706)) ((lambda (G17832) (begin (G17707 G17709) (set! G17709 G17832))) (G17707)))))) G12311 G12443 G17701 '#f))) '#f))) (set! G12319 (lambda (G17834 G17835) (call-with-values (lambda () (G12299 G17834)) (lambda (G17842 G17843 G17844 G17845) ((lambda (G17850 G17851 G17852 G17853) (call-with-values (lambda () (G12297 G17853)) (lambda (G17860 G17861) ((lambda (G17864 G17865) (begin (G17835 G17865) (call-with-values (lambda () (G12317 G17865 G17852 G17851 G17850 '#f)) (lambda (G17875 G17876 G17877 G17878 G17879 G17880 G17881) ((lambda (G17889 G17890 G17891 G17892 G17893 G17894 G17895) (values G17865 G17864 G17895 G17894 G17893 G17892 G17891 G17890 G17889)) G17881 G17880 G17879 G17878 G17877 G17876 G17875))))) G17861 G17860)))) G17845 G17844 G17843 G17842))))) (set! G12321 (lambda (G17903) ((lambda (G17905) ((lambda (G17907) (if (if G17907 (begin '#f (apply (lambda (G17909 G17910 G17911) (eq? (G12435 G17909) 'import)) G17907)) '#f) (apply (lambda (G17915 G17916 G17917) (values G17916 G17917)) G17907) ((lambda (G17921) ((lambda (G17923) (if (if G17923 (begin '#f (apply (lambda (G17925 G17926 G17927) (eq? (G12435 G17925) 'import)) G17923)) '#f) (apply (lambda (G17931 G17932 G17933) (G12429 'expander '"invalid syntax of top-level program" (G11611 G17903))) G17923) ((lambda (G17937) ((lambda (G17939) (if G17939 (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G17939) (G12429 '#f '"invalid syntax" G17937))) (G12196 G17937 '_))) G17921))) (G12196 G17921 '((any . any) . any)))) G17905))) (G12196 G17905 '((any . each-any) . each-any)))) G17903))) (set! G12323 (lambda (G17941) (call-with-values (lambda () (G12321 G17941)) (lambda (G17945 G17946) ((lambda (G17949 G17950) (call-with-values (lambda () (G12317 '() '() G17950 G17949 '#t)) (lambda (G17960 G17961 G17962 G17963 G17964 G17965 G17966) ((lambda (G17974 G17975 G17976 G17977 G17978 G17979 G17980) (values G17979 G17977)) G17966 G17965 G17964 G17963 G17962 G17961 G17960)))) G17946 G17945))))) (set! G12329 (make-record-type-descriptor 'env '#f 'G12327 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G12331 '#f) (set! G12333 (make-record-constructor-descriptor G12329 '#f G12331)) (set! G12338 (record-predicate G12329)) (set! G12340 (record-constructor G12333)) (set! G12342 (record-accessor G12329 '0)) (set! G12344 (record-accessor G12329 '1)) (set! G12346 (record-accessor G12329 '2)) (set! G12348 (record-mutator G12329 '0)) (set! G12350 (record-mutator G12329 '1)) (set! G12352 (record-mutator G12329 '2)) (set! G12354 (G10441 'env (lambda (G17988 G17989) (display '"#<environment>" G17989)))) (set! G12360 (make-record-type-descriptor 'interaction-env '#f 'G12358 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G12362 '#f) (set! G12364 (make-record-constructor-descriptor G12360 '#f G12362)) (set! G12369 (record-predicate G12360)) (set! G12371 (record-constructor G12364)) (set! G12373 (record-accessor G12360 '0)) (set! G12375 (record-accessor G12360 '1)) (set! G12377 (record-accessor G12360 '2)) (set! G12379 (record-mutator G12360 '0)) (set! G12381 (record-mutator G12360 '1)) (set! G12383 (record-mutator G12360 '2)) (set! G12385 (G10441 'interaction-env (lambda (G17992 G17993) (display '"#<environment>" G17993)))) (set! G12387 (lambda () (map (lambda (G17996) G17996) (G11520 (G12373 (G12441)))))) (set! G12389 (lambda (G17998) (vector->list (G12342 G17998)))) (set! G12391 (lambda (G18000) ((lambda (G18002) (if G18002 G18002 (begin '#f (G12369 G18000)))) (G12338 G18000)))) (set! G12393 (lambda G18004 ((lambda (G18006) ((lambda (G18010 G18011) ((lambda (G18014) (dynamic-wind G18014 (lambda () (call-with-values (lambda () (G12301 G18004)) (lambda (G18018 G18019) ((lambda (G18022 G18023) (G12340 G18023 G18022 G18006)) G18019 G18018)))) G18014)) (lambda () ((lambda (G18026) (begin (G18010 G18011) (set! G18011 G18026))) (G18010))))) G12311 G18006)) (G12305)))) (set! G12395 (lambda (G18028) (begin (if (eqv? G18028 '5) (void) (assertion-violation 'null-environment '"not 5" G18028)) (G12393 '(psyntax null-environment-5))))) (set! G12397 (lambda (G18030) (begin (if (eqv? G18030 '5) (void) (assertion-violation 'scheme-report-environment '"not 5" G18030)) (G12393 '(psyntax scheme-report-environment-5))))) (set! G12399 (lambda (G18032 G18033) (if (G12338 G18033) ((lambda (G18036) ((lambda (G18038 G18039 G18040 G18041) ((lambda (G18046) (begin (G11542 G18036) (values G18046 (G18040)))) ((lambda (G18054 G18055 G18056 G18057 G18058 G18059) ((lambda (G18066) (dynamic-wind G18066 (lambda () (G12232 G18038 '() '())) G18066)) (lambda () (begin ((lambda (G18068) (begin (G18054 G18057) (set! G18057 G18068))) (G18054)) ((lambda (G18070) (begin (G18055 G18058) (set! G18058 G18070))) (G18055)) ((lambda (G18072) (begin (G18056 G18059) (set! G18059 G18072))) (G18056)))))) G12307 G12309 G12311 G18040 G18041 G18039))) (G11563 G18032 G11487 (list G18036) '()) (G12346 G18033) (G12305) (G12305))) (G12303 (G12342 G18033) (G12344 G18033))) (if (G12369 G18033) ((lambda (G18074 G18075 G18076) ((lambda (G18080) (call-with-values (lambda () ((lambda (G18092 G18093 G18094 G18095 G18096 G18097 G18098 G18099) ((lambda (G18108) (dynamic-wind G18108 (lambda () (G12315 G18080 G18074 G18075)) G18108)) (lambda () (begin ((lambda (G18110) (begin (G18092 G18096) (set! G18096 G18110))) (G18092)) ((lambda (G18112) (begin (G18093 G18097) (set! G18097 G18112))) (G18093)) ((lambda (G18114) (begin (G18094 G18098) (set! G18098 G18114))) (G18094)) ((lambda (G18116) (begin (G18095 G18099) (set! G18099 G18116))) (G18095)))))) G12443 G12307 G12309 G12311 G18033 G18076 (G12305) (G12305))) (lambda (G18118 G18119) ((lambda (G18122 G18123) (begin (G12381 G18033 G18122) (values G18123 (G18076)))) G18119 G18118)))) (G11563 G18032 G11487 (list G18074) '()))) (G12373 G18033) (G12375 G18033) (G12305)) (assertion-violation 'expand '"not an environment" G18033))))) (set! G12401 (lambda (G18126 G18127) (begin (if (G12391 G18127) (void) (error 'eval '"not an environment" G18127)) (call-with-values (lambda () (G12399 G18126 G18127)) (lambda (G18132 G18133) ((lambda (G18136 G18137) (begin (for-each G11115 G18136) (eval-core (G10543 G18137)))) G18133 G18132)))))) (set! G12403 (lambda G18241 ((lambda (G18242) (if (= G18242 '3) (apply (lambda (G18140 G18141 G18142) ((lambda (G18147 G18149) (begin (set! G18147 (lambda (G18223) (if (null? G18223) (G11464) (G11463 '#f (map (lambda (G18225) ((lambda (G18227 G18228) (list 'set! G18227 G18228)) (car G18225) (cddr G18225))) G18223))))) (set! G18149 (lambda (G18215) (for-each (lambda (G18217) ((lambda (G18219 G18220) (set-symbol-value! G18219 G18220)) (car G18217) (cadr G18217))) G18215))) (call-with-values (lambda () (G12319 G18140 G18142)) (lambda (G18159 G18160 G18161 G18162 G18163 G18164 G18165 G18166 G18167) ((lambda (G18177 G18178 G18179 G18180 G18181 G18182 G18183 G18184 G18185) ((lambda (G18195 G18196 G18197 G18198 G18199 G18200 G18201 G18202 G18203 G18204) (begin (G11113 G18195 G18196 G18197 G18198 G18199 G18200 G18178 G18177 G18201 G18202 G18203 G18204 '#t G18141) (values G18195 G18196 G18197 G18198 G18199 G18200 G18204 G18203 G18178 G18177))) (gensym) G18185 G18184 (map G11119 G18183) (map G11119 G18181) (map G11119 G18182) (lambda () (G18149 G18179)) (lambda () (eval-core (G10543 G18180))) (G18147 G18179) G18180)) G18167 G18166 G18165 G18164 G18163 G18162 G18161 G18160 G18159))))) '#f '#f)) G18241) (if (= G18242 '2) (apply (lambda (G18231 G18232) (G12403 G18231 G18232 (lambda (G18235) (values)))) G18241) (if (= G18242 '1) (apply (lambda (G18237) (G12403 G18237 '#f (lambda (G18239) (values)))) G18241) (error 'apply '"invalid arg count"))))) (length G18241)))) (set! G12405 (lambda (G18243) (call-with-values (lambda () (G12403 G18243)) (lambda (G18255 G18256 G18257 G18258 G18259 G18260 G18261 G18262 G18263 G18264) ((lambda (G18275 G18276 G18277 G18278 G18279 G18280 G18281 G18282 G18283 G18284) (values G18283 G18278 G18276 G18275)) G18264 G18263 G18262 G18261 G18260 G18259 G18258 G18257 G18256 G18255))))) (set! G12407 (lambda (G18295 G18296 G18297) (if (null? G18296) G18297 (G12407 G18295 (cdr G18296) (cons (G18295 (car G18296)) G18297))))) (set! G12409 (lambda (G18301 G18302) (G11463 '#f (cons (G11464) (G12407 (lambda (G18305) (list 'set! (cdr G18305) (car G18305))) G18301 G18302))))) (set! G12411 (lambda (G18307 G18308 G18309) (map (lambda (G18313 G18314) ((lambda (G18317) ((lambda (G18319) ((lambda () (begin (if G18319 (void) (G12429 '#f '"cannot export unbound identifier" G18317)) (cons G18314 G18319))))) (G11643 G18317))) (G11563 G18313 G11487 (list G18309) '()))) G18307 G18308))) (set! G12413 (lambda (G18321 G18322 G18323) ((lambda (G18328) (begin (set! G18328 (lambda (G18356) ((letrec ((G18358 (lambda (G18360 G18361 G18362) (if (pair? G18361) (if (eq? G18360 (car G18361)) (car G18362) (G18358 G18360 (cdr G18361) (cdr G18362))) (assertion-violation 'lookup-make-export '"BUG"))))) G18358) G18356 G18321 G18322))) ((letrec ((G18329 (lambda (G18331 G18332 G18333 G18334) (if (null? G18331) (values G18332 G18333 G18334) ((lambda (G18339) ((lambda (G18341 G18342) ((lambda (G18345) (if (eqv? G18345 'lexical) ((lambda (G18350) ((lambda (G18352 G18353) (G18329 (cdr G18331) (cons (cons* G18341 G18353 G18352) G18332) (cons (cons (G12084 G18350) G18352) G18333) G18334)) (G18328 (G12084 G18350)) (if (G12086 G18350) 'mutable 'global))) (G11653 G18342)) (if (eqv? G18345 'local-macro) ((lambda (G18348) (G18329 (cdr G18331) (cons (cons* G18341 'global-macro G18348) G18332) G18333 (cons (cons G18348 (G11653 G18342)) G18334))) (gensym)) (if (eqv? G18345 'local-macro!) ((lambda (G18346) (G18329 (cdr G18331) (cons (cons* G18341 'global-macro! G18346) G18332) G18333 (cons (cons G18346 (G11653 G18342)) G18334))) (gensym)) (if (memv G18345 '($rtd $module)) (G18329 (cdr G18331) (cons G18339 G18332) G18333 G18334) (assertion-violation 'expander '"BUG: do not know how to export" (G11651 G18342) (G11653 G18342))))))) (G11651 G18342))) (car G18339) (cdr G18339))) (car G18331)))))) G18329) G18323 '() '() '()))) '#f))) (set! G12415 (lambda (G18366) ((lambda (G18368) ((lambda (G18370) (if G18370 (apply (lambda (G18372) (map (lambda (G18374) (G11563 ((lambda (G18376) (if ((lambda (G18378) (if G18378 G18378 (begin '#f (string? G18376)))) (symbol? G18376)) (gensym G18376) (gensym 't))) (G12435 G18374)) G11487 '() '())) G18372)) G18370) ((lambda (G18380) ((lambda (G18382) (if G18382 (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G18382) (G12429 '#f '"invalid syntax" G18380))) (G12196 G18380 '_))) G18368))) (G12196 G18368 'each-any))) G18366))) (set! G12417 (lambda (G18384 G18385) (if (G11617 G18384) (if (G11617 G18385) (G11625 G18384 G18385) (assertion-violation 'free-identifier=? '"not an identifier" G18385)) (assertion-violation 'free-identifier=? '"not an identifier" G18384)))) (set! G12419 (lambda (G18388 G18389) (if (G11617 G18388) (if (G11617 G18389) (G11623 G18388 G18389) (assertion-violation 'bound-identifier=? '"not an identifier" G18389)) (assertion-violation 'bound-identifier=? '"not an identifier" G18388)))) (set! G12421 (lambda (G18392) ((lambda (G18402 G18404 G18406 G18411 G18413 G18415 G18417 G18419 G18421 G18423) (begin (set! G18402 (make-record-type-descriptor '&source-information &condition-rtd 'G18400 '#f '#f '#((immutable file-name) (immutable line)))) (set! G18404 '#f) (set! G18406 (make-record-constructor-descriptor G18402 &condition-rcd G18404)) (set! G18411 (record-predicate G18402)) (set! G18413 (record-constructor G18406)) (set! G18415 (record-accessor G18402 '0)) (set! G18417 (record-accessor G18402 '1)) (set! G18419 (condition-predicate G18402)) (set! G18421 (condition-accessor G18402 G18415)) (set! G18423 (condition-accessor G18402 G18417)) (if (G11561 G18392) ((lambda (G18424) (if (G10436 G18424) ((lambda (G18426) (if (pair? G18426) (G18413 (car G18426) (cdr G18426)) (condition))) (G10437 G18424)) (condition))) (G11565 G18392)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12423 (lambda (G18428 . G18430) (begin (if (for-all string? G18430) (void) (assertion-violation 'syntax-error '"invalid argument" G18430)) (raise (condition (G19142 (if (null? G18430) '"invalid syntax" (apply string-append G18430))) (G19214 (G12435 G18428) '#f) (G12421 G18428) (G12425 G18428)))))) (set! G12425 (lambda (G18432) ((lambda (G18441 G18443 G18445 G18450 G18452 G18454 G18456 G18458) (begin (set! G18441 (make-record-type-descriptor '&trace &condition-rtd 'G18439 '#f '#f '#((immutable form)))) (set! G18443 '#f) (set! G18445 (make-record-constructor-descriptor G18441 &condition-rcd G18443)) (set! G18450 (record-predicate G18441)) (set! G18452 (record-constructor G18445)) (set! G18454 (record-accessor G18441 '0)) (set! G18456 (condition-predicate G18441)) (set! G18458 (condition-accessor G18441 G18454)) ((letrec ((G18459 (lambda (G18461) (if (G11561 G18461) (apply condition (G18452 G18461) (map G18459 (G11571 G18461))) (if (G10436 G18461) (G18452 (G11563 G18461 '() '() '())) (condition)))))) G18459) G18432))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12427 (lambda (G18463 G18464 G18465 G18466) (begin (if (string? G18464) (void) (assertion-violation 'syntax-violation '"message is not a string" G18464)) ((lambda (G18471) (raise (condition (if G18471 (G19188 G18471) (condition)) (G19142 G18464) G18466 (G12421 G18465) (G12425 G18465)))) (if ((lambda (G18473) (if G18473 G18473 (begin '#f (symbol? G18463)))) (string? G18463)) G18463 (if (not G18463) ((lambda (G18475) ((lambda (G18477) (if (if G18477 (begin '#f (apply (lambda (G18479) (G11617 G18479)) G18477)) '#f) (apply (lambda (G18481) (G12435 G18481)) G18477) ((lambda (G18483) ((lambda (G18485) (if (if G18485 (begin '#f (apply (lambda (G18487 G18488) (G11617 G18487)) G18485)) '#f) (apply (lambda (G18491 G18492) (G12435 G18491)) G18485) ((lambda (G18495) ((lambda (G18497) (if G18497 (apply (lambda () '#f) G18497) (G12429 '#f '"invalid syntax" G18495))) (G12196 G18495 '_))) G18483))) (G12196 G18483 '(any . any)))) G18475))) (G12196 G18475 'any))) G18465) (assertion-violation 'syntax-violation '"invalid who argument" G18463))))))) (set! G12429 (lambda G18513 ((lambda (G18514) (if (= G18514 '3) (apply (lambda (G18499 G18500 G18501) (G12429 G18499 G18500 G18501 '#f)) G18513) (if (= G18514 '4) (apply (lambda (G18505 G18506 G18507 G18508) (G12427 G18505 G18506 G18507 (G19214 (G12435 G18507) (G12435 G18508)))) G18513) (error 'apply '"invalid arg count")))) (length G18513)))) (set! G12431 (lambda (G18515) (G11617 G18515))) (set! G12433 (lambda (G18517 G18518) (if (G11617 G18517) (G11583 G18517 G18518) (assertion-violation 'datum->syntax '"not an identifier" G18517)))) (set! G12435 (lambda (G18521) (G11639 G18521))) (set! G12437 (lambda (G18523) (call-with-values (lambda () (G12323 G18523)) (lambda (G18527 G18528) ((lambda (G18531 G18532) (lambda () (begin (for-each G11115 G18532) (eval-core (G10543 G18531))))) G18528 G18527))))) (set! G12439 (lambda (G18535) (call-with-values (lambda () (G12323 G18535)) (lambda (G18539 G18540) ((lambda (G18543 G18544) (begin (for-each G11115 G18544) (G10442 (G10543 G18543)))) G18540 G18539))))) (set! G12441 ((lambda (G18547) (lambda () ((lambda (G18549) (if G18549 G18549 (begin '#f ((lambda (G18551 G18552) (begin ((lambda (G18555) (begin (G11528 G18552 (map car G18555)) (G11530 G18552 (map (lambda (G18557) G11487) G18555)) (G11532 G18552 (map cdr G18555)))) (G11072 G18551)) ((lambda (G18559) (begin (set! G18547 G18559) G18559)) (G12371 G18552 '() '())))) (G11108 '(rnrs)) (G11536))))) G18547))) '#f)) (set! G12443 (G10444 '#f)) (begin (set! G18820 G12443) (set! G18819 G12441) (set! G18818 G12439) (set! G18817 G12437) (set! G18816 G12435) (set! G18815 G12433) (set! G18814 G12431) (set! G18813 G12429) (set! G18812 G12427) (set! G18811 G12425) (set! G18810 G12423) (set! G18809 G12421) (set! G18808 G12419) (set! G18807 G12417) (set! G18806 G12415) (set! G18805 G12413) (set! G18804 G12411) (set! G18803 G12409) (set! G18802 G12407) (set! G18801 G12405) (set! G18800 G12403) (set! G18799 G12401) (set! G18798 G12399) (set! G18797 G12397) (set! G18796 G12395) (set! G18795 G12393) (set! G18794 G12391) (set! G18793 G12389) (set! G18792 G12387) (set! G18791 G12385) (set! G18790 G12383) (set! G18789 G12381) (set! G18788 G12379) (set! G18787 G12377) (set! G18786 G12375) (set! G18785 G12373) (set! G18784 G12371) (set! G18783 G12369) (set! G18782 G12364) (set! G18781 G12362) (set! G18780 G12360) (set! G18779 G12354) (set! G18778 G12352) (set! G18777 G12350) (set! G18776 G12348) (set! G18775 G12346) (set! G18774 G12344) (set! G18773 G12342) (set! G18772 G12340) (set! G18771 G12338) (set! G18770 G12333) (set! G18769 G12331) (set! G18768 G12329) (set! G18767 G12323) (set! G18766 G12321) (set! G18765 G12319) (set! G18764 G12317) (set! G18763 G12315) (set! G18762 G12313) (set! G18761 G12311) (set! G18760 G12309) (set! G18759 G12307) (set! G18758 G12305) (set! G18757 G12303) (set! G18756 G12301) (set! G18755 G12299) (set! G18754 G12297) (set! G18753 G12295) (set! G18752 G12293) (set! G18751 G12291) (set! G18750 G12289) (set! G18749 G12287) (set! G18748 G12285) (set! G18747 G12283) (set! G18746 G12281) (set! G18745 G12279) (set! G18744 G12277) (set! G18743 G12275) (set! G18742 G12273) (set! G18741 G12271) (set! G18740 G12266) (set! G18739 G12264) (set! G18738 G12262) (set! G18737 G12256) (set! G18736 G12254) (set! G18735 G12252) (set! G18734 G12250) (set! G18733 G12248) (set! G18732 G12246) (set! G18731 G12244) (set! G18730 G12242) (set! G18729 G12240) (set! G18728 G12238) (set! G18727 G12236) (set! G18726 G12234) (set! G18725 G12232) (set! G18724 G12230) (set! G18723 G12228) (set! G18722 G12226) (set! G18721 G12224) (set! G18720 G12222) (set! G18719 G12220) (set! G18718 G12218) (set! G18717 G12216) (set! G18716 G12214) (set! G18715 G12212) (set! G18714 G12210) (set! G18713 G12208) (set! G18712 G12206) (set! G18711 G12204) (set! G18710 G12202) (set! G18709 G12200) (set! G18708 G12198) (set! G18707 G12196) (set! G18706 G12194) (set! G18705 G12192) (set! G18704 G12190) (set! G18703 G12188) (set! G18702 G12186) (set! G18701 G12184) (set! G18700 G12182) (set! G18699 G12180) (set! G18698 G12178) (set! G18697 G12176) (set! G18696 G12174) (set! G18695 G12172) (set! G18694 G12170) (set! G18693 G12168) (set! G18692 G12166) (set! G18691 G12164) (set! G18690 G12162) (set! G18689 G12160) (set! G18688 G12158) (set! G18687 G12156) (set! G18686 G12154) (set! G18685 G12152) (set! G18684 G12150) (set! G18683 G12148) (set! G18682 G12146) (set! G18681 G12144) (set! G18680 G12142) (set! G18679 G12140) (set! G18678 G12138) (set! G18677 G12136) (set! G18676 G12134) (set! G18675 G12132) (set! G18674 G12130) (set! G18673 G12128) (set! G18672 G12126) (set! G18671 G12124) (set! G18670 G12122) (set! G18669 G12120) (set! G18668 G12118) (set! G18667 G12116) (set! G18666 G12114) (set! G18665 G12112) (set! G18664 G12110) (set! G18663 G12108) (set! G18662 G12106) (set! G18661 G12104) (set! G18660 G12102) (set! G18659 G12100) (set! G18658 G12098) (set! G18657 G12096) (set! G18656 G12094) (set! G18655 G12092) (set! G18654 G12090) (set! G18653 G12088) (set! G18652 G12086) (set! G18651 G12084) (set! G18650 G12082) (set! G18649 G12080) (set! G18648 G12078) (set! G18647 G12076) (set! G18646 G11688) (set! G18645 G11686) (set! G18644 G11684) (set! G18643 G11682) (set! G18642 G11680) (set! G18641 G11657) (set! G18640 G11655) (set! G18639 G11653) (set! G18638 G11651) (set! G18637 G11649) (set! G18636 G11647) (set! G18635 G11645) (set! G18634 G11643) (set! G18633 G11641) (set! G18632 G11639) (set! G18631 G11637) (set! G18630 G11635) (set! G18629 G11633) (set! G18628 G11631) (set! G18627 G11629) (set! G18626 G11627) (set! G18625 G11625) (set! G18624 G11623) (set! G18623 G11621) (set! G18622 G11619) (set! G18621 G11617) (set! G18620 G11615) (set! G18619 G11613) (set! G18618 G11611) (set! G18617 G11609) (set! G18616 G11607) (set! G18615 G11605) (set! G18614 G11603) (set! G18613 G11601) (set! G18612 G11599) (set! G18611 G11597) (set! G18610 G11595) (set! G18609 G11593) (set! G18608 G11591) (set! G18607 G11589) (set! G18606 G11587) (set! G18605 G11585) (set! G18604 G11583) (set! G18603 G11581) (set! G18602 G11579) (set! G18601 G11577) (set! G18600 G11575) (set! G18599 G11573) (set! G18598 G11571) (set! G18597 G11569) (set! G18596 G11567) (set! G18595 G11565) (set! G18594 G11563) (set! G18593 G11561) (set! G18592 G11556) (set! G18591 G11554) (set! G18590 G11552) (set! G18589 G11546) (set! G18588 G11544) (set! G18587 G11542) (set! G18586 G11540) (set! G18585 G11538) (set! G18584 G11536) (set! G18583 G11534) (set! G18582 G11532) (set! G18581 G11530) (set! G18580 G11528) (set! G18579 G11526) (set! G18578 G11524) (set! G18577 G11522) (set! G18576 G11520) (set! G18575 G11518) (set! G18574 G11516) (set! G18573 G11511) (set! G18572 G11509) (set! G18571 G11507) (set! G18570 G11501) (set! G18569 G11499) (set! G18568 G11497) (set! G18567 G11495) (set! G18566 G11493) (set! G18565 G11491) (set! G18564 G11489) (set! G18563 G11487) (set! G18562 G11482) (set! G18561 G11480) (G11105 G12403)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G19131 '#f) (define G19132 '#f) (define G19133 '#f) (define G19134 '#f) (define G19135 '#f) (define G19136 '#f) (define G19137 '#f) (define G19138 '#f) (define G19139 '#f) (define G19140 '#f) (define G19141 '#f) (define G19142 '#f) (define G19143 '#f) (define G19144 '#f) (define G19145 '#f) (define G19146 '#f) (define G19147 '#f) (define G19148 '#f) (define G19149 '#f) (define G19150 '#f) (define G19151 '#f) (define G19152 '#f) (define G19153 '#f) (define G19154 '#f) (define G19155 '#f) (define G19156 '#f) (define G19157 '#f) (define G19158 '#f) (define G19159 '#f) (define G19160 '#f) (define G19161 '#f) (define G19162 '#f) (define G19163 '#f) (define G19164 '#f) (define G19165 '#f) (define G19166 '#f) (define G19167 '#f) (define G19168 '#f) (define G19169 '#f) (define G19170 '#f) (define G19171 '#f) (define G19172 '#f) (define G19173 '#f) (define G19174 '#f) (define G19175 '#f) (define G19176 '#f) (define G19177 '#f) (define G19178 '#f) (define G19179 '#f) (define G19180 '#f) (define G19181 '#f) (define G19182 '#f) (define G19183 '#f) (define G19184 '#f) (define G19185 '#f) (define G19186 '#f) (define G19187 '#f) (define G19188 '#f) (define G19189 '#f) (define G19190 '#f) (define G19191 '#f) (define G19192 '#f) (define G19193 '#f) (define G19194 '#f) (define G19195 '#f) (define G19196 '#f) (define G19197 '#f) (define G19198 '#f) (define G19199 '#f) (define G19200 '#f) (define G19201 '#f) (define G19202 '#f) (define G19203 '#f) (define G19204 '#f) (define G19205 '#f) (define G19206 '#f) (define G19207 '#f) (define G19208 '#f) (define G19209 '#f) (define G19210 '#f) (define G19211 '#f) (define G19212 '#f) (define G19213 '#f) (define G19214 '#f) (define G19215 '#f) (define G19216 '#f) (define G19217 '#f) (define G19218 '#f) (define G19219 '#f) (define G19220 '#f) (define G19221 '#f) (define G19222 '#f) (define G19223 '#f) (define G19224 '#f) (define G19225 '#f) ((lambdabegin (set! G18830 (make-record-type-descriptor '&condition '#f 'G18828 '#f '#f '#())) (set! G18832 '#f) (set! G18834 (make-record-constructor-descriptor G18830 '#f G18832)) (set! G18839 (record-predicate G18830)) (set! G18841 (record-constructor G18834)) (set! G18843 G18830) (set! G18845 G18834) (set! G18853 (make-record-type-descriptor '&message G18830 'G18851 '#f '#f '#((immutable message)))) (set! G18855 '#f) (set! G18857 (make-record-constructor-descriptor G18853 G18834 G18855)) (set! G18862 (record-predicate G18853)) (set! G18864 (record-constructor G18857)) (set! G18866 (record-accessor G18853 '0)) (set! G18868 (condition-predicate G18853)) (set! G18870 (condition-accessor G18853 G18866)) (set! G18877 (make-record-type-descriptor '&warning G18830 'G18875 '#f '#f '#())) (set! G18879 '#f) (set! G18881 (make-record-constructor-descriptor G18877 G18834 G18879)) (set! G18886 (record-predicate G18877)) (set! G18888 (record-constructor G18881)) (set! G18890 (condition-predicate G18877)) (set! G18897 (make-record-type-descriptor '&serious G18830 'G18895 '#f '#f '#())) (set! G18899 '#f) (set! G18901 (make-record-constructor-descriptor G18897 G18834 G18899)) (set! G18906 (record-predicate G18897)) (set! G18908 (record-constructor G18901)) (set! G18910 (condition-predicate G18897)) (set! G18917 (make-record-type-descriptor '&error G18897 'G18915 '#f '#f '#())) (set! G18919 '#f) (set! G18921 (make-record-constructor-descriptor G18917 G18901 G18919)) (set! G18926 (record-predicate G18917)) (set! G18928 (record-constructor G18921)) (set! G18930 (condition-predicate G18917)) (set! G18937 (make-record-type-descriptor '&violation G18897 'G18935 '#f '#f '#())) (set! G18939 '#f) (set! G18941 (make-record-constructor-descriptor G18937 G18901 G18939)) (set! G18946 (record-predicate G18937)) (set! G18948 (record-constructor G18941)) (set! G18950 (condition-predicate G18937)) (set! G18957 (make-record-type-descriptor '&assertion G18937 'G18955 '#f '#f '#())) (set! G18959 '#f) (set! G18961 (make-record-constructor-descriptor G18957 G18941 G18959)) (set! G18966 (record-predicate G18957)) (set! G18968 (record-constructor G18961)) (set! G18970 (condition-predicate G18957)) (set! G18978 (make-record-type-descriptor '&irritants G18830 'G18976 '#f '#f '#((immutable irritants)))) (set! G18980 '#f) (set! G18982 (make-record-constructor-descriptor G18978 G18834 G18980)) (set! G18987 (record-predicate G18978)) (set! G18989 (record-constructor G18982)) (set! G18991 (record-accessor G18978 '0)) (set! G18993 (condition-predicate G18978)) (set! G18995 (condition-accessor G18978 G18991)) (set! G19003 (make-record-type-descriptor '&who G18830 'G19001 '#f '#f '#((immutable who)))) (set! G19005 '#f) (set! G19007 (make-record-constructor-descriptor G19003 G18834 G19005)) (set! G19012 (record-predicate G19003)) (set! G19014 (record-constructor G19007)) (set! G19016 (record-accessor G19003 '0)) (set! G19018 (condition-predicate G19003)) (set! G19020 (condition-accessor G19003 G19016)) (set! G19027 (make-record-type-descriptor '&non-continuable G18937 'G19025 '#f '#f '#())) (set! G19029 '#f) (set! G19031 (make-record-constructor-descriptor G19027 G18941 G19029)) (set! G19036 (record-predicate G19027)) (set! G19038 (record-constructor G19031)) (set! G19040 (condition-predicate G19027)) (set! G19047 (make-record-type-descriptor '&implementation-restriction G18937 'G19045 '#f '#f '#())) (set! G19049 '#f) (set! G19051 (make-record-constructor-descriptor G19047 G18941 G19049)) (set! G19056 (record-predicate G19047)) (set! G19058 (record-constructor G19051)) (set! G19060 (condition-predicate G19047)) (set! G19067 (make-record-type-descriptor '&lexical G18937 'G19065 '#f '#f '#())) (set! G19069 '#f) (set! G19071 (make-record-constructor-descriptor G19067 G18941 G19069)) (set! G19076 (record-predicate G19067)) (set! G19078 (record-constructor G19071)) (set! G19080 (condition-predicate G19067)) (set! G19089 (make-record-type-descriptor '&syntax G18937 'G19087 '#f '#f '#((immutable form) (immutable subform)))) (set! G19091 '#f) (set! G19093 (make-record-constructor-descriptor G19089 G18941 G19091)) (set! G19098 (record-predicate G19089)) (set! G19100 (record-constructor G19093)) (set! G19102 (record-accessor G19089 '0)) (set! G19104 (record-accessor G19089 '1)) (set! G19106 (condition-predicate G19089)) (set! G19108 (condition-accessor G19089 G19102)) (set! G19110 (condition-accessor G19089 G19104)) (set! G19117 (make-record-type-descriptor '&undefined G18937 'G19115 '#f '#f '#())) (set! G19119 '#f) (set! G19121 (make-record-constructor-descriptor G19117 G18941 G19119)) (set! G19126 (record-predicate G19117)) (set! G19128 (record-constructor G19121)) (set! G19130 (condition-predicate G19117)) (begin (set! G19225 G19130) (set! G19224 G19128) (set! G19223 G19126) (set! G19222 G19121) (set! G19221 G19119) (set! G19220 G19117) (set! G19219 G19110) (set! G19218 G19108) (set! G19217 G19106) (set! G19216 G19104) (set! G19215 G19102) (set! G19214 G19100) (set! G19213 G19098) (set! G19212 G19093) (set! G19211 G19091) (set! G19210 G19089) (set! G19209 G19080) (set! G19208 G19078) (set! G19207 G19076) (set! G19206 G19071) (set! G19205 G19069) (set! G19204 G19067) (set! G19203 G19060) (set! G19202 G19058) (set! G19201 G19056) (set! G19200 G19051) (set! G19199 G19049) (set! G19198 G19047) (set! G19197 G19040) (set! G19196 G19038) (set! G19195 G19036) (set! G19194 G19031) (set! G19193 G19029) (set! G19192 G19027) (set! G19191 G19020) (set! G19190 G19018) (set! G19189 G19016) (set! G19188 G19014) (set! G19187 G19012) (set! G19186 G19007) (set! G19185 G19005) (set! G19184 G19003) (set! G19183 G18995) (set! G19182 G18993) (set! G19181 G18991) (set! G19180 G18989) (set! G19179 G18987) (set! G19178 G18982) (set! G19177 G18980) (set! G19176 G18978) (set! G19175 G18970) (set! G19174 G18968) (set! G19173 G18966) (set! G19172 G18961) (set! G19171 G18959) (set! G19170 G18957) (set! G19169 G18950) (set! G19168 G18948) (set! G19167 G18946) (set! G19166 G18941) (set! G19165 G18939) (set! G19164 G18937) (set! G19163 G18930) (set! G19162 G18928) (set! G19161 G18926) (set! G19160 G18921) (set! G19159 G18919) (set! G19158 G18917) (set! G19157 G18910) (set! G19156 G18908) (set! G19155 G18906) (set! G19154 G18901) (set! G19153 G18899) (set! G19152 G18897) (set! G19151 G18890) (set! G19150 G18888) (set! G19149 G18886) (set! G19148 G18881) (set! G19147 G18879) (set! G19146 G18877) (set! G19145 G18870) (set! G19144 G18868) (set! G19143 G18866) (set! G19142 G18864) (set! G19141 G18862) (set! G19140 G18857) (set! G19139 G18855) (set! G19138 G18853) (set! G19137 G18845) (set! G19136 G18843) (set! G19135 G18841) (set! G19134 G18839) (set! G19133 G18834) (set! G19132 G18832) (set! G19131 G18830)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G19487 '#f) (define G19488 '#f) (define G19489 '#f) (define G19490 '#f) (define G19491 '#f) (define G19492 '#f) (define G19493 '#f) (define G19494 '#f) (define G19495 '#f) (define G19496 '#f) (define G19497 '#f) (define G19498 '#f) (define G19499 '#f) (define G19500 '#f) (define G19501 '#f) (define G19502 '#f) (define G19503 '#f) (define G19504 '#f) (define G19505 '#f) (define G19506 '#f) (define G19507 '#f) (define G19508 '#f) (define G19509 '#f) (define G19510 '#f) (define G19511 '#f) (define G19512 '#f) (define G19513 '#f) (define G19514 '#f) (define G19515 '#f) (define G19516 '#f) (define G19517 '#f) (define G19518 '#f) (define G19519 '#f) (define G19520 '#f) (define G19521 '#f) (define G19522 '#f) (define G19523 '#f) (define G19524 '#f) (define G19525 '#f) (define G19526 '#f) (define G19527 '#f) (define G19528 '#f) (define G19529 '#f) (define G19530 '#f) (define G19531 '#f) (define G19532 '#f) (define G19533 '#f) (define G19534 '#f) (define G19535 '#f) (define G19536 '#f) (define G19537 '#f) (define G19538 '#f) (define G19539 '#f) (define G19540 '#f) (define G19541 '#f) (define G19542 '#f) (define G19543 '#f) (define G19544 '#f) (define G19545 '#f) (define G19546 '#f) (define G19547 '#f) (define G19548 '#f) (define G19549 '#f) (define G19550 '#f) (define G19551 '#f) (define G19552 '#f) (define G19553 '#f) (define G19554 '#f) (define G19555 '#f) (define G19556 '#f) (define G19557 '#f) (define G19558 '#f) (define G19559 '#f) (define G19560 '#f) (define G19561 '#f) (define G19562 '#f) (define G19563 '#f) (define G19564 '#f) (define G19565 '#f) (define G19566 '#f) ((lambdabegin (set! G19233 (make-record-type-descriptor '&i/o &error-rtd 'G19231 '#f '#f '#())) (set! G19235 '#f) (set! G19237 (make-record-constructor-descriptor G19233 &error-rcd G19235)) (set! G19242 (record-predicate G19233)) (set! G19244 (record-constructor G19237)) (set! G19246 (condition-predicate G19233)) (set! G19253 (make-record-type-descriptor '&i/o-read G19233 'G19251 '#f '#f '#())) (set! G19255 '#f) (set! G19257 (make-record-constructor-descriptor G19253 G19237 G19255)) (set! G19262 (record-predicate G19253)) (set! G19264 (record-constructor G19257)) (set! G19266 (condition-predicate G19253)) (set! G19273 (make-record-type-descriptor '&i/o-write G19233 'G19271 '#f '#f '#())) (set! G19275 '#f) (set! G19277 (make-record-constructor-descriptor G19273 G19237 G19275)) (set! G19282 (record-predicate G19273)) (set! G19284 (record-constructor G19277)) (set! G19286 (condition-predicate G19273)) (set! G19294 (make-record-type-descriptor '&i/o-invalid-position G19233 'G19292 '#f '#f '#((immutable position)))) (set! G19296 '#f) (set! G19298 (make-record-constructor-descriptor G19294 G19237 G19296)) (set! G19303 (record-predicate G19294)) (set! G19305 (record-constructor G19298)) (set! G19307 (record-accessor G19294 '0)) (set! G19309 (condition-predicate G19294)) (set! G19311 (condition-accessor G19294 G19307)) (set! G19319 (make-record-type-descriptor '&i/o-filename G19233 'G19317 '#f '#f '#((immutable filename)))) (set! G19321 '#f) (set! G19323 (make-record-constructor-descriptor G19319 G19237 G19321)) (set! G19328 (record-predicate G19319)) (set! G19330 (record-constructor G19323)) (set! G19332 (record-accessor G19319 '0)) (set! G19334 (condition-predicate G19319)) (set! G19336 (condition-accessor G19319 G19332)) (set! G19343 (make-record-type-descriptor '&i/o-file-protection G19233 'G19341 '#f '#f '#())) (set! G19345 '#f) (set! G19347 (make-record-constructor-descriptor G19343 G19237 G19345)) (set! G19352 (record-predicate G19343)) (set! G19354 (record-constructor G19347)) (set! G19356 (condition-predicate G19343)) (set! G19363 (make-record-type-descriptor '&i/o-file-is-read-only G19343 'G19361 '#f '#f '#())) (set! G19365 '#f) (set! G19367 (make-record-constructor-descriptor G19363 G19347 G19365)) (set! G19372 (record-predicate G19363)) (set! G19374 (record-constructor G19367)) (set! G19376 (condition-predicate G19363)) (set! G19383 (make-record-type-descriptor '&i/o-file-already-exists G19319 'G19381 '#f '#f '#())) (set! G19385 '#f) (set! G19387 (make-record-constructor-descriptor G19383 G19323 G19385)) (set! G19392 (record-predicate G19383)) (set! G19394 (record-constructor G19387)) (set! G19396 (condition-predicate G19383)) (set! G19403 (make-record-type-descriptor '&i/o-file-does-not-exist G19319 'G19401 '#f '#f '#())) (set! G19405 '#f) (set! G19407 (make-record-constructor-descriptor G19403 G19323 G19405)) (set! G19412 (record-predicate G19403)) (set! G19414 (record-constructor G19407)) (set! G19416 (condition-predicate G19403)) (set! G19424 (make-record-type-descriptor '&i/o-port G19233 'G19422 '#f '#f '#((immutable port)))) (set! G19426 '#f) (set! G19428 (make-record-constructor-descriptor G19424 G19237 G19426)) (set! G19433 (record-predicate G19424)) (set! G19435 (record-constructor G19428)) (set! G19437 (record-accessor G19424 '0)) (set! G19439 (condition-predicate G19424)) (set! G19441 (condition-accessor G19424 G19437)) (set! G19448 (make-record-type-descriptor '&i/o-decoding G19424 'G19446 '#f '#f '#())) (set! G19450 '#f) (set! G19452 (make-record-constructor-descriptor G19448 G19428 G19450)) (set! G19457 (record-predicate G19448)) (set! G19459 (record-constructor G19452)) (set! G19461 (condition-predicate G19448)) (set! G19469 (make-record-type-descriptor '&i/o-encoding G19424 'G19467 '#f '#f '#((immutable char)))) (set! G19471 '#f) (set! G19473 (make-record-constructor-descriptor G19469 G19428 G19471)) (set! G19478 (record-predicate G19469)) (set! G19480 (record-constructor G19473)) (set! G19482 (record-accessor G19469 '0)) (set! G19484 (condition-predicate G19469)) (set! G19486 (condition-accessor G19469 G19482)) (begin (set! G19566 G19486) (set! G19565 G19484) (set! G19564 G19482) (set! G19563 G19480) (set! G19562 G19478) (set! G19561 G19473) (set! G19560 G19471) (set! G19559 G19469) (set! G19558 G19461) (set! G19557 G19459) (set! G19556 G19457) (set! G19555 G19452) (set! G19554 G19450) (set! G19553 G19448) (set! G19552 G19441) (set! G19551 G19439) (set! G19550 G19437) (set! G19549 G19435) (set! G19548 G19433) (set! G19547 G19428) (set! G19546 G19426) (set! G19545 G19424) (set! G19544 G19416) (set! G19543 G19414) (set! G19542 G19412) (set! G19541 G19407) (set! G19540 G19405) (set! G19539 G19403) (set! G19538 G19396) (set! G19537 G19394) (set! G19536 G19392) (set! G19535 G19387) (set! G19534 G19385) (set! G19533 G19383) (set! G19532 G19376) (set! G19531 G19374) (set! G19530 G19372) (set! G19529 G19367) (set! G19528 G19365) (set! G19527 G19363) (set! G19526 G19356) (set! G19525 G19354) (set! G19524 G19352) (set! G19523 G19347) (set! G19522 G19345) (set! G19521 G19343) (set! G19520 G19336) (set! G19519 G19334) (set! G19518 G19332) (set! G19517 G19330) (set! G19516 G19328) (set! G19515 G19323) (set! G19514 G19321) (set! G19513 G19319) (set! G19512 G19311) (set! G19511 G19309) (set! G19510 G19307) (set! G19509 G19305) (set! G19508 G19303) (set! G19507 G19298) (set! G19506 G19296) (set! G19505 G19294) (set! G19504 G19286) (set! G19503 G19284) (set! G19502 G19282) (set! G19501 G19277) (set! G19500 G19275) (set! G19499 G19273) (set! G19498 G19266) (set! G19497 G19264) (set! G19496 G19262) (set! G19495 G19257) (set! G19494 G19255) (set! G19493 G19253) (set! G19492 G19246) (set! G19491 G19244) (set! G19490 G19242) (set! G19489 G19237) (set! G19488 G19235) (set! G19487 G19233)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (G10540 (lambda (G20500) ((lambda (G20502) (if G20502 (cdr G20502) '#f)) (assq G20500 '((syntax-error . G18810) (syntax-dispatch . G18707) (load . G19690) (interaction-environment . G18819) (make-variable-transformer . G18643) (identifier? . G18814) (generate-temporaries . G18806) (free-identifier=? . G18807) (syntax->datum . G18816) (datum->syntax . G18815) (bound-identifier=? . G18808) (make-i/o-write-error . G19503) (make-i/o-read-error . G19497) (make-i/o-port-error . G19549) (make-i/o-invalid-position-error . G19509) (make-i/o-filename-error . G19517) (make-i/o-file-protection-error . G19525) (make-i/o-file-is-read-only-error . G19531) (make-i/o-file-does-not-exist-error . G19543) (make-i/o-file-already-exists-error . G19537) (make-i/o-error . G19491) (make-i/o-encoding-error . G19563) (make-i/o-decoding-error . G19557) (i/o-write-error? . G19504) (i/o-read-error? . G19498) (i/o-port-error? . G19551) (i/o-invalid-position-error? . G19511) (i/o-filename-error? . G19519) (i/o-file-protection-error? . G19526) (i/o-file-is-read-only-error? . G19532) (i/o-file-does-not-exist-error? . G19544) (i/o-file-already-exists-error? . G19538) (i/o-error? . G19492) (i/o-error-port . G19552) (i/o-error-filename . G19520) (i/o-encoding-error? . G19565) (i/o-encoding-error-char . G19566) (i/o-decoding-error? . G19558) (scheme-report-environment . G18797) (null-environment . G18796) (command-line . G19687) (eval . G18799) (environment . G18795) (who-condition? . G19190) (warning? . G19151) (violation? . G19169) (undefined-violation? . G19225) (syntax-violation? . G19217) (syntax-violation-subform . G19219) (syntax-violation-form . G19218) (syntax-violation . G18813) (serious-condition? . G19157) (non-continuable-violation? . G19197) (message-condition? . G19144) (make-who-condition . G19188) (make-warning . G19150) (make-violation . G19168) (make-undefined-violation . G19224) (make-syntax-violation . G19214) (make-serious-condition . G19156) (make-non-continuable-violation . G19196) (make-message-condition . G19142) (make-lexical-violation . G19208) (make-irritants-condition . G19180) (make-implementation-restriction-violation . G19202) (make-error . G19162) (make-assertion-violation . G19174) (lexical-violation? . G19209) (irritants-condition? . G19182) (implementation-restriction-violation? . G19203) (error? . G19163) (condition-who . G19191) (condition-message . G19145) (condition-irritants . G19183) (assertion-violation? . G19175)))))) (G11113 'G20457 '(ikarus interaction) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11113 'G20458 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G19747) (unquote . G19746) (delay . G19739) (or . G19737) (and . G19736) (do . G19735) (cond . G19734) (let* . G19733) (let . G19732) (quasiquote . G19726) (syntax-rules . G19725) (case . G19720) (if . G19716) (letrec . G19714) (lambda . G19711) (quote . G19708) (letrec-syntax . G19706) (let-syntax . G19705) (set! . G19704) (begin . G19702) (define-syntax . G19700) (define . G19699)) '() values values '#f '#f '#t '#f) (G11113 'G20459 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G20328) (string-ci>=? . G20327) (string-ci=? . G20326) (string-ci<? . G20325) (string-ci<=? . G20324) (char-whitespace? . G20323) (char-upper-case? . G20322) (char-numeric? . G20320) (char-lower-case? . G20319) (char-upcase . G20317) (char-downcase . G20314) (char-ci>? . G20313) (char-ci>=? . G20312) (char-ci=? . G20311) (char-ci<? . G20310) (char-ci<=? . G20309) (char-alphabetic? . G20308) (call-with-output-file . G20264) (call-with-input-file . G20263) (write-char . G20262) (write . G20261) (with-output-to-file . G20260) (with-input-from-file . G20259) (read-char . G20258) (read . G20257) (peek-char . G20256) (open-output-file . G20255) (open-input-file . G20254) (newline . G20253) (display . G20252) (close-output-port . G20251) (close-input-port . G20250) (eof-object . G20248) (current-output-port . G20246) (current-input-port . G20245) (output-port? . G20244) (input-port? . G20243) (scheme-report-environment . G12396) (quotient . G20185) (null-environment . G12394) (remainder . G20184) (modulo . G20183) (inexact->exact . G20182) (force . G20181) (exact->inexact . G20180) (string-fill! . G20178) (string-set! . G20177) (set-cdr! . G20176) (set-car! . G20175) (memv . G20169) (memq . G20168) (member . G20166) (assv . G20158) (assq . G20157) (assoc . G20155) (eval . G12400) (zero? . G19958) (vector? . G19957) (vector-set! . G19956) (vector-ref . G19955) (vector-length . G19953) (vector-fill! . G19951) (vector->list . G19950) (vector . G19949) (values . G19948) (truncate . G19947) (tan . G19946) (symbol? . G19945) (symbol->string . G19943) (substring . G19942) (string? . G19941) (string>? . G19940) (string>=? . G19939) (string=? . G19938) (string<? . G19937) (string<=? . G19936) (string-ref . G19935) (string-length . G19934) (string-copy . G19932) (string-append . G19931) (string->symbol . G19930) (string->number . G19929) (string->list . G19928) (string . G19927) (sqrt . G19926) (sin . G19925) (round . G19924) (reverse . G19923) (real? . G19922) (real-part . G19920) (rationalize . G19919) (rational? . G19918) (procedure? . G19916) (positive? . G19915) (pair? . G19914) (odd? . G19913) (numerator . G19912) (number? . G19911) (number->string . G19910) (not . G19908) (negative? . G19907) (min . G19905) (max . G19904) (map . G19903) (make-vector . G19902) (make-string . G19901) (make-rectangular . G19900) (make-polar . G19899) (magnitude . G19898) (log . G19897) (list? . G19896) (list-tail . G19895) (list-ref . G19894) (list->vector . G19893) (list->string . G19892) (list . G19891) (length . G19890) (lcm . G19889) (integer? . G19888) (integer->char . G19886) (inexact? . G19884) (imag-part . G19882) (gcd . G19881) (for-each . G19880) (floor . G19879) (expt . G19877) (exp . G19876) (exact? . G19875) (even? . G19872) (eqv? . G19870) (equal? . G19869) (eq? . G19868) (dynamic-wind . G19867) (denominator . G19860) (cos . G19859) (cons . G19858) (complex? . G19857) (char? . G19856) (char>? . G19855) (char>=? . G19854) (char=? . G19853) (char<? . G19852) (char<=? . G19851) (char->integer . G19850) (ceiling . G19849) (call-with-values . G19848) (call-with-current-continuation . G19846) (cddddr . G19845) (cdddar . G19844) (cddadr . G19843) (cddaar . G19842) (cdaddr . G19841) (cdadar . G19840) (cdaadr . G19839) (cdaaar . G19838) (cadddr . G19837) (caddar . G19836) (cadadr . G19835) (cadaar . G19834) (caaddr . G19833) (caadar . G19832) (caaadr . G19831) (caaaar . G19830) (cdddr . G19829) (cddar . G19828) (cdadr . G19827) (cdaar . G19826) (caddr . G19825) (cadar . G19824) (caadr . G19823) (caaar . G19822) (cddr . G19821) (cdar . G19820) (cadr . G19819) (caar . G19818) (cdr . G19817) (car . G19816) (boolean? . G19815) (atan . G19813) (asin . G19811) (apply . G19810) (append . G19809) (angle . G19808) (acos . G19807) (abs . G19806) (/ . G19805) (* . G19804) (- . G19803) (+ . G19802) (>= . G19801) (> . G19800) (= . G19799) (<= . G19798) (< . G19797) (unquote-splicing . G19747) (unquote . G19746) (delay . G19739) (or . G19737) (and . G19736) (do . G19735) (cond . G19734) (let* . G19733) (let . G19732) (quasiquote . G19726) (syntax-rules . G19725) (case . G19720) (if . G19716) (letrec . G19714) (lambda . G19711) (quote . G19708) (letrec-syntax . G19706) (let-syntax . G19705) (set! . G19704) (begin . G19702) (define-syntax . G19700) (define . G19699)) '() values values '#f '#f '#t '#f) (G11113 'G20460 '(psyntax modules) '() '() '() '() '((module . G19701)) '() values values '#f '#f '#t '#f) (G11113 'G20461 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11113 'G20462 '(rnrs) '(6) '() '() '() '((regexp? . G20393) (string-upcase . G20336) (string-titlecase . G20335) (string-normalize-nfkd . G20334) (string-normalize-nfkc . G20333) (string-normalize-nfd . G20332) (string-normalize-nfc . G20331) (string-foldcase . G20330) (string-downcase . G20329) (string-ci>? . G20328) (string-ci>=? . G20327) (string-ci=? . G20326) (string-ci<? . G20325) (string-ci<=? . G20324) (char-whitespace? . G20323) (char-upper-case? . G20322) (char-title-case? . G20321) (char-numeric? . G20320) (char-lower-case? . G20319) (char-general-category . G20318) (char-upcase . G20317) (char-titlecase . G20316) (char-foldcase . G20315) (char-downcase . G20314) (char-ci>? . G20313) (char-ci>=? . G20312) (char-ci=? . G20311) (char-ci<? . G20310) (char-ci<=? . G20309) (char-alphabetic? . G20308) (make-variable-transformer . G11681) (identifier? . G12430) (generate-temporaries . G12414) (free-identifier=? . G12416) (syntax->datum . G12434) (datum->syntax . G12432) (bound-identifier=? . G12418) (record-type-descriptor? . G20307) (record-predicate . G20306) (record-mutator . G20305) (record-constructor . G20304) (record-accessor . G20303) (make-record-type-descriptor . G20302) (make-record-constructor-descriptor . G20301) (record? . G20300) (record-type-uid . G20299) (record-type-sealed? . G20298) (record-type-parent . G20297) (record-type-opaque? . G20296) (record-type-name . G20295) (record-type-generative? . G20294) (record-type-field-names . G20293) (record-rtd . G20292) (record-field-mutable? . G20291) (delete-file . G20290) (file-exists? . G20289) (vector-sort! . G20288) (vector-sort . G20287) (list-sort . G20286) (symbol-hash . G20285) (string-ci-hash . G20284) (string-hash . G20283) (equal-hash . G20282) (hashtable-equivalence-function . G20281) (make-hashtable . G20280) (hashtable-hash-function . G20279) (make-eqv-hashtable . G20278) (make-eq-hashtable . G20277) (hashtable? . G20276) (hashtable-update! . G20275) (hashtable-size . G20274) (hashtable-set! . G20273) (hashtable-ref . G20272) (hashtable-mutable? . G20271) (hashtable-keys . G20270) (hashtable-entries . G20269) (hashtable-delete! . G20268) (hashtable-copy . G20267) (hashtable-contains? . G20266) (hashtable-clear! . G20265) (call-with-output-file . G20264) (call-with-input-file . G20263) (write-char . G20262) (write . G20261) (with-output-to-file . G20260) (with-input-from-file . G20259) (read-char . G20258) (read . G20257) (peek-char . G20256) (open-output-file . G20255) (open-input-file . G20254) (newline . G20253) (display . G20252) (close-output-port . G20251) (close-input-port . G20250) (eof-object? . G20249) (eof-object . G20248) (current-error-port . G20247) (current-output-port . G20246) (current-input-port . G20245) (output-port? . G20244) (input-port? . G20243) (utf-8-codec . G20242) (utf-16-codec . G20241) (transcoder-error-handling-mode . G20240) (transcoder-eol-style . G20239) (transcoder-codec . G20238) (transcoded-port . G20237) (textual-port? . G20236) (string->bytevector . G20235) (standard-output-port . G20234) (standard-input-port . G20233) (standard-error-port . G20232) (set-port-position! . G20231) (put-u8 . G20230) (put-string . G20229) (put-datum . G20228) (put-char . G20227) (put-bytevector . G20226) (port? . G20225) (port-transcoder . G20224) (port-position . G20223) (port-has-set-port-position!? . G20222) (port-has-port-position? . G20221) (port-eof? . G20220) (output-port-buffer-mode . G20219) (open-string-output-port . G20218) (open-string-input-port . G20217) (open-file-output-port . G20216) (open-file-input/output-port . G20215) (open-file-input-port . G20214) (open-bytevector-output-port . G20213) (open-bytevector-input-port . G20212) (native-transcoder . G20211) (native-eol-style . G20210) (make-transcoder . G20209) (latin-1-codec . G20208) (make-i/o-write-error . G19283) (make-i/o-read-error . G19263) (make-i/o-port-error . G19434) (make-i/o-invalid-position-error . G19304) (make-i/o-filename-error . G19329) (make-i/o-file-protection-error . G19353) (make-i/o-file-is-read-only-error . G19373) (make-i/o-file-does-not-exist-error . G19413) (make-i/o-file-already-exists-error . G19393) (make-i/o-error . G19243) (make-i/o-encoding-error . G19479) (make-i/o-decoding-error . G19458) (make-custom-textual-output-port . G20207) (make-custom-textual-input/output-port . G20206) (make-custom-textual-input-port . G20205) (make-custom-binary-output-port . G20204) (make-custom-binary-input/output-port . G20203) (make-custom-binary-input-port . G20202) (make-bytevector . G20201) (lookahead-u8 . G20200) (lookahead-char . G20199) (i/o-write-error? . G19285) (i/o-read-error? . G19265) (i/o-port-error? . G19438) (i/o-invalid-position-error? . G19308) (i/o-filename-error? . G19333) (i/o-file-protection-error? . G19355) (i/o-file-is-read-only-error? . G19375) (i/o-file-does-not-exist-error? . G19415) (i/o-file-already-exists-error? . G19395) (i/o-error? . G19245) (i/o-error-port . G19440) (i/o-error-filename . G19335) (i/o-encoding-error? . G19483) (i/o-encoding-error-char . G19485) (i/o-decoding-error? . G19460) (get-u8 . G20198) (get-string-n! . G20197) (get-string-n . G20196) (get-string-all . G20195) (get-line . G20194) (get-datum . G20193) (get-char . G20192) (get-bytevector-some . G20191) (get-bytevector-n! . G20190) (get-bytevector-n . G20189) (get-bytevector-all . G20188) (flush-output-port . G20187) (close-port . G20186) (exit . G20179) (command-line . G19572) (remove . G20174) (remv . G20173) (remp . G20172) (remq . G20171) (partition . G20170) (memv . G20169) (memq . G20168) (memp . G20167) (member . G20166) (exists . G20165) (for-all . G20164) (fold-right . G20163) (fold-left . G20162) (find . G20161) (filter . G20160) (cons* . G20159) (assv . G20158) (assq . G20157) (assp . G20156) (assoc . G20155) (call-with-string-output-port . G20154) (call-with-port . G20153) (call-with-bytevector-output-port . G20152) (bytevector->string . G20151) (buffer-mode? . G20150) (binary-port? . G20149) (with-exception-handler . G20148) (raise-continuable . G20147) (raise . G20146) (make-enumeration . G20145) (enum-set=? . G20144) (enum-set-universe . G20143) (enum-set-union . G20142) (enum-set-subset? . G20141) (enum-set-projection . G20140) (enum-set-member? . G20139) (enum-set-intersection . G20138) (enum-set-indexer . G20137) (enum-set-difference . G20136) (enum-set-constructor . G20135) (enum-set-complement . G20134) (enum-set->list . G20133) (who-condition? . G19017) (warning? . G18889) (violation? . G18949) (undefined-violation? . G19129) (syntax-violation? . G19105) (syntax-violation-subform . G19109) (syntax-violation-form . G19107) (syntax-violation . G12428) (simple-conditions . G20132) (serious-condition? . G18909) (non-continuable-violation? . G19039) (message-condition? . G18867) (make-who-condition . G19013) (make-warning . G18887) (make-violation . G18947) (make-undefined-violation . G19127) (make-syntax-violation . G19099) (make-serious-condition . G18907) (make-non-continuable-violation . G19037) (make-message-condition . G18863) (make-lexical-violation . G19077) (make-irritants-condition . G18988) (make-implementation-restriction-violation . G19057) (make-error . G18927) (make-assertion-violation . G18967) (lexical-violation? . G19079) (irritants-condition? . G18992) (implementation-restriction-violation? . G19059) (error? . G18929) (condition-who . G19019) (condition-predicate . G20131) (condition-message . G18869) (condition-irritants . G18994) (condition-accessor . G20130) (condition . G20129) (assertion-violation? . G18969) (condition? . G20128) (utf32->string . G20127) (utf16->string . G20126) (utf8->string . G20125) (uint-list->bytevector . G20124) (u8-list->bytevector . G20123) (string->utf8 . G20122) (string->utf32 . G20121) (string->utf16 . G20120) (sint-list->bytevector . G20119) (native-endianness . G20118) (bytevector? . G20117) (bytevector=? . G20116) (bytevector-uint-set! . G20115) (bytevector-uint-ref . G20114) (bytevector-u8-set! . G20113) (bytevector-u8-ref . G20112) (bytevector-u64-set! . G20111) (bytevector-u64-ref . G20110) (bytevector-u64-native-set! . G20109) (bytevector-u64-native-ref . G20108) (bytevector-u32-set! . G20107) (bytevector-u32-ref . G20106) (bytevector-u32-native-set! . G20105) (bytevector-u32-native-ref . G20104) (bytevector-u16-set! . G20103) (bytevector-u16-ref . G20102) (bytevector-u16-native-set! . G20101) (bytevector-u16-native-ref . G20100) (bytevector-sint-set! . G20099) (bytevector-sint-ref . G20098) (bytevector-s8-set! . G20097) (bytevector-s8-ref . G20096) (bytevector-s64-set! . G20095) (bytevector-s64-ref . G20094) (bytevector-s64-native-set! . G20093) (bytevector-s64-native-ref . G20092) (bytevector-s32-set! . G20091) (bytevector-s32-ref . G20090) (bytevector-s32-native-set! . G20089) (bytevector-s32-native-ref . G20088) (bytevector-s16-set! . G20087) (bytevector-s16-ref . G20086) (bytevector-s16-native-set! . G20085) (bytevector-s16-native-ref . G20084) (bytevector-length . G20083) (bytevector-ieee-single-ref . G20082) (bytevector-ieee-single-native-set! . G20081) (bytevector-ieee-single-native-ref . G20080) (bytevector-ieee-double-ref . G20079) (bytevector-ieee-double-native-set! . G20078) (bytevector-ieee-double-native-ref . G20077) (bytevector-fill! . G20076) (bytevector-copy! . G20075) (bytevector-copy . G20074) (bytevector->uint-list . G20073) (bytevector->u8-list . G20072) (bytevector->sint-list . G20071) (no-nans-violation? . G20070) (no-infinities-violation? . G20069) (make-no-nans-violation . G20068) (make-no-infinities-violation . G20067) (real->flonum . G20066) (flzero? . G20065) (fltruncate . G20064) (fltan . G20063) (flsqrt . G20062) (flsin . G20061) (flround . G20060) (flpositive? . G20059) (flonum? . G20058) (flodd? . G20057) (flnumerator . G20056) (flnegative? . G20055) (flnan? . G20054) (flmod0 . G20053) (flmod . G20052) (flmin . G20051) (flmax . G20050) (fllog . G20049) (flinteger? . G20048) (flinfinite? . G20047) (flfloor . G20046) (flfinite? . G20045) (flexpt . G20044) (flexp . G20043) (fleven? . G20042) (fldiv0-and-mod0 . G20041) (fldiv0 . G20040) (fldiv-and-mod . G20039) (fldiv . G20038) (fldenominator . G20037) (flcos . G20036) (flceiling . G20035) (flatan . G20034) (flasin . G20033) (flacos . G20032) (flabs . G20031) (fl>? . G20030) (fl>=? . G20029) (fl=? . G20028) (fl<? . G20027) (fl<=? . G20026) (fl/ . G20025) (fl- . G20024) (fl+ . G20023) (fl* . G20022) (fixnum->flonum . G20021) (fxzero? . G20020) (fxxor . G20019) (fxrotate-bit-field . G20018) (fxreverse-bit-field . G20017) (fxpositive? . G20016) (fxodd? . G20015) (fxnot . G20014) (fxnegative? . G20013) (fxmod0 . G20012) (fxmod . G20011) (fxmin . G20010) (fxmax . G20009) (fxlength . G20008) (fxior . G20007) (fxif . G20006) (fxfirst-bit-set . G20005) (fxeven? . G20004) (fxdiv0-and-mod0 . G20003) (fxdiv0 . G20002) (fxdiv-and-mod . G20001) (fxdiv . G20000) (fxcopy-bit-field . G19999) (fxcopy-bit . G19998) (fxbit-set? . G19997) (fxbit-field . G19996) (fxbit-count . G19995) (fxarithmetic-shift-right . G19994) (fxarithmetic-shift-left . G19993) (fxarithmetic-shift . G19992) (fxand . G19991) (fx>? . G19990) (fx>=? . G19989) (fx=? . G19988) (fx<? . G19987) (fx<=? . G19986) (fx-/carry . G19985) (fx- . G19984) (fx+/carry . G19983) (fx+ . G19982) (fx*/carry . G19981) (fx* . G19980) (greatest-fixnum . G19979) (least-fixnum . G19978) (fixnum-width . G19977) (fixnum? . G19976) (bitwise-rotate-bit-field . G19975) (bitwise-reverse-bit-field . G19974) (bitwise-length . G19973) (bitwise-if . G19972) (bitwise-first-bit-set . G19971) (bitwise-copy-bit-field . G19970) (bitwise-copy-bit . G19969) (bitwise-bit-set? . G19968) (bitwise-bit-field . G19967) (bitwise-bit-count . G19966) (bitwise-xor . G19965) (bitwise-ior . G19964) (bitwise-and . G19963) (bitwise-not . G19962) (bitwise-arithmetic-shift-right . G19961) (bitwise-arithmetic-shift-left . G19960) (bitwise-arithmetic-shift . G19959) (zero? . G19958) (vector? . G19957) (vector-set! . G19956) (vector-ref . G19955) (vector-map . G19954) (vector-length . G19953) (vector-for-each . G19952) (vector-fill! . G19951) (vector->list . G19950) (vector . G19949) (values . G19948) (truncate . G19947) (tan . G19946) (symbol? . G19945) (symbol=? . G19944) (symbol->string . G19943) (substring . G19942) (string? . G19941) (string>? . G19940) (string>=? . G19939) (string=? . G19938) (string<? . G19937) (string<=? . G19936) (string-ref . G19935) (string-length . G19934) (string-for-each . G19933) (string-copy . G19932) (string-append . G19931) (string->symbol . G19930) (string->number . G19929) (string->list . G19928) (string . G19927) (sqrt . G19926) (sin . G19925) (round . G19924) (reverse . G19923) (real? . G19922) (real-valued? . G19921) (real-part . G19920) (rationalize . G19919) (rational? . G19918) (rational-valued? . G19917) (procedure? . G19916) (positive? . G19915) (pair? . G19914) (odd? . G19913) (numerator . G19912) (number? . G19911) (number->string . G19910) (null? . G19909) (not . G19908) (negative? . G19907) (nan? . G19906) (min . G19905) (max . G19904) (map . G19903) (make-vector . G19902) (make-string . G19901) (make-rectangular . G19900) (make-polar . G19899) (magnitude . G19898) (log . G19897) (list? . G19896) (list-tail . G19895) (list-ref . G19894) (list->vector . G19893) (list->string . G19892) (list . G19891) (length . G19890) (lcm . G19889) (integer? . G19888) (integer-valued? . G19887) (integer->char . G19886) (infinite? . G19885) (inexact? . G19884) (inexact . G19883) (imag-part . G19882) (gcd . G19881) (for-each . G19880) (floor . G19879) (finite? . G19878) (expt . G19877) (exp . G19876) (exact? . G19875) (exact-integer-sqrt . G19874) (exact . G19873) (even? . G19872) (error . G19871) (eqv? . G19870) (equal? . G19869) (eq? . G19868) (dynamic-wind . G19867) (div0-and-mod0 . G19866) (mod0 . G19865) (div0 . G19864) (div-and-mod . G19863) (mod . G19862) (div . G19861) (denominator . G19860) (cos . G19859) (cons . G19858) (complex? . G19857) (char? . G19856) (char>? . G19855) (char>=? . G19854) (char=? . G19853) (char<? . G19852) (char<=? . G19851) (char->integer . G19850) (ceiling . G19849) (call-with-values . G19848) (call/cc . G19847) (call-with-current-continuation . G19846) (cddddr . G19845) (cdddar . G19844) (cddadr . G19843) (cddaar . G19842) (cdaddr . G19841) (cdadar . G19840) (cdaadr . G19839) (cdaaar . G19838) (cadddr . G19837) (caddar . G19836) (cadadr . G19835) (cadaar . G19834) (caaddr . G19833) (caadar . G19832) (caaadr . G19831) (caaaar . G19830) (cdddr . G19829) (cddar . G19828) (cdadr . G19827) (cdaar . G19826) (caddr . G19825) (cadar . G19824) (caadr . G19823) (caaar . G19822) (cddr . G19821) (cdar . G19820) (cadr . G19819) (caar . G19818) (cdr . G19817) (car . G19816) (boolean? . G19815) (boolean=? . G19814) (atan . G19813) (assertion-violation . G19812) (asin . G19811) (apply . G19810) (append . G19809) (angle . G19808) (acos . G19807) (abs . G19806) (/ . G19805) (* . G19804) (- . G19803) (+ . G19802) (>= . G19801) (> . G19800) (= . G19799) (<= . G19798) (< . G19797) (&no-nans . G19796) (&no-infinities . G19795) (&i/o-encoding . G19794) (&i/o-decoding . G19793) (&i/o-port . G19792) (&i/o-file-does-not-exist . G19791) (&i/o-file-already-exists . G19790) (&i/o-file-is-read-only . G19789) (&i/o-file-protection . G19788) (&i/o-filename . G19787) (&i/o-invalid-position . G19786) (&i/o-write . G19785) (&i/o-read . G19784) (&i/o . G19783) (&undefined . G19782) (&syntax . G19781) (&lexical . G19780) (&implementation-restriction . G19779) (&non-continuable . G19778) (&who . G19777) (&irritants . G19776) (&assertion . G19775) (&violation . G19774) (&error . G19773) (&serious . G19772) (&warning . G19771) (&message . G19770) (&condition . G19769) (define-condition-type . G19768) (define-enumeration . G19767) (define-record-type . G19766) (parent-rtd . G19765) (nongenerative . G19764) (opaque . G19763) (sealed . G19762) (protocol . G19761) (parent . G19760) (immutable . G19759) (mutable . G19758) (fields . G19757) (error-handling-mode . G19756) (file-options . G19755) (buffer-mode . G19754) (eol-style . G19753) (guard . G19752) (unsyntax-splicing . G19749) (unsyntax . G19748) (unquote-splicing . G19747) (unquote . G19746) (_ . G19745) (else . G19744) (=> . G19743) (... . G19742) (assert . G19741) (endianness . G19740) (or . G19737) (and . G19736) (do . G19735) (cond . G19734) (let* . G19733) (let . G19732) (let*-values . G19731) (let-values . G19730) (identifier-syntax . G19729) (with-syntax . G19728) (quasisyntax . G19727) (quasiquote . G19726) (syntax-rules . G19725) (record-constructor-descriptor . G19722) (record-type-descriptor . G19721) (case . G19720) (unless . G19718) (when . G19717) (if . G19716) (letrec* . G19715) (letrec . G19714) (case-lambda . G19712) (lambda . G19711) (syntax . G19710) (syntax-case . G19709) (quote . G19708) (letrec-syntax . G19706) (let-syntax . G19705) (set! . G19704) (begin . G19702) (define-syntax . G19700) (define . G19699)) '() values values '#f '#f '#t '#f) (G11113 'G20463 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G12396) (quotient . G20185) (null-environment . G12394) (remainder . G20184) (modulo . G20183) (inexact->exact . G20182) (force . G20181) (exact->inexact . G20180) (delay . G19739)) '() values values '#f '#f '#t '#f) (G11113 'G20464 '(rnrs control) '(6) '() '() '() '((do . G19735) (unless . G19718) (when . G19717) (case-lambda . G19712)) '() values values '#f '#f '#t '#f) (G11113 'G20465 '(rnrs eval) '(6) '() '() '() '((eval . G12400) (environment . G12392)) '() values values '#f '#f '#t '#f) (G11113 'G20466 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G20176) (set-car! . G20175)) '() values values '#f '#f '#t '#f) (G11113 'G20467 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G20178) (string-set! . G20177)) '() values values '#f '#f '#t '#f) (G11113 'G20468 '(rnrs programs) '(6) '() '() '() '((exit . G20179) (command-line . G19572)) '() values values '#f '#f '#t '#f) (G11113 'G20469 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G11681) (identifier? . G12430) (generate-temporaries . G12414) (free-identifier=? . G12416) (syntax->datum . G12434) (datum->syntax . G12432) (bound-identifier=? . G12418) (syntax-violation . G12428) (unsyntax-splicing . G19749) (unsyntax . G19748) (_ . G19745) (... . G19742) (with-syntax . G19728) (quasisyntax . G19727) (syntax . G19710) (syntax-case . G19709)) '() values values '#f '#f '#t '#f) (G11113 'G20470 '(rnrs files) '(6) '() '() '() '((delete-file . G20290) (file-exists? . G20289) (make-i/o-write-error . G19283) (make-i/o-read-error . G19263) (make-i/o-port-error . G19434) (make-i/o-invalid-position-error . G19304) (make-i/o-filename-error . G19329) (make-i/o-file-protection-error . G19353) (make-i/o-file-is-read-only-error . G19373) (make-i/o-file-does-not-exist-error . G19413) (make-i/o-file-already-exists-error . G19393) (make-i/o-error . G19243) (i/o-write-error? . G19285) (i/o-read-error? . G19265) (i/o-port-error? . G19438) (i/o-invalid-position-error? . G19308) (i/o-filename-error? . G19333) (i/o-file-protection-error? . G19355) (i/o-file-is-read-only-error? . G19375) (i/o-file-does-not-exist-error? . G19415) (i/o-file-already-exists-error? . G19395) (i/o-error? . G19245) (i/o-error-port . G19440) (i/o-error-filename . G19335) (&i/o-port . G19792) (&i/o-file-does-not-exist . G19791) (&i/o-file-already-exists . G19790) (&i/o-file-is-read-only . G19789) (&i/o-file-protection . G19788) (&i/o-filename . G19787) (&i/o-invalid-position . G19786) (&i/o-write . G19785) (&i/o-read . G19784) (&i/o . G19783)) '() values values '#f '#f '#t '#f) (G11113 'G20471 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G20288) (vector-sort . G20287) (list-sort . G20286)) '() values values '#f '#f '#t '#f) (G11113 'G20472 '(rnrs base) '(6) '() '() '() '((zero? . G19958) (vector? . G19957) (vector-set! . G19956) (vector-ref . G19955) (vector-map . G19954) (vector-length . G19953) (vector-for-each . G19952) (vector-fill! . G19951) (vector->list . G19950) (vector . G19949) (values . G19948) (truncate . G19947) (tan . G19946) (symbol? . G19945) (symbol=? . G19944) (symbol->string . G19943) (substring . G19942) (string? . G19941) (string>? . G19940) (string>=? . G19939) (string=? . G19938) (string<? . G19937) (string<=? . G19936) (string-ref . G19935) (string-length . G19934) (string-for-each . G19933) (string-copy . G19932) (string-append . G19931) (string->symbol . G19930) (string->number . G19929) (string->list . G19928) (string . G19927) (sqrt . G19926) (sin . G19925) (round . G19924) (reverse . G19923) (real? . G19922) (real-valued? . G19921) (real-part . G19920) (rationalize . G19919) (rational? . G19918) (rational-valued? . G19917) (procedure? . G19916) (positive? . G19915) (pair? . G19914) (odd? . G19913) (numerator . G19912) (number? . G19911) (number->string . G19910) (null? . G19909) (not . G19908) (negative? . G19907) (nan? . G19906) (min . G19905) (max . G19904) (map . G19903) (make-vector . G19902) (make-string . G19901) (make-rectangular . G19900) (make-polar . G19899) (magnitude . G19898) (log . G19897) (list? . G19896) (list-tail . G19895) (list-ref . G19894) (list->vector . G19893) (list->string . G19892) (list . G19891) (length . G19890) (lcm . G19889) (integer? . G19888) (integer-valued? . G19887) (integer->char . G19886) (infinite? . G19885) (inexact? . G19884) (inexact . G19883) (imag-part . G19882) (gcd . G19881) (for-each . G19880) (floor . G19879) (finite? . G19878) (expt . G19877) (exp . G19876) (exact? . G19875) (exact-integer-sqrt . G19874) (exact . G19873) (even? . G19872) (error . G19871) (eqv? . G19870) (equal? . G19869) (eq? . G19868) (dynamic-wind . G19867) (div0-and-mod0 . G19866) (mod0 . G19865) (div0 . G19864) (div-and-mod . G19863) (mod . G19862) (div . G19861) (denominator . G19860) (cos . G19859) (cons . G19858) (complex? . G19857) (char? . G19856) (char>? . G19855) (char>=? . G19854) (char=? . G19853) (char<? . G19852) (char<=? . G19851) (char->integer . G19850) (ceiling . G19849) (call-with-values . G19848) (call/cc . G19847) (call-with-current-continuation . G19846) (cddddr . G19845) (cdddar . G19844) (cddadr . G19843) (cddaar . G19842) (cdaddr . G19841) (cdadar . G19840) (cdaadr . G19839) (cdaaar . G19838) (cadddr . G19837) (caddar . G19836) (cadadr . G19835) (cadaar . G19834) (caaddr . G19833) (caadar . G19832) (caaadr . G19831) (caaaar . G19830) (cdddr . G19829) (cddar . G19828) (cdadr . G19827) (cdaar . G19826) (caddr . G19825) (cadar . G19824) (caadr . G19823) (caaar . G19822) (cddr . G19821) (cdar . G19820) (cadr . G19819) (caar . G19818) (cdr . G19817) (car . G19816) (boolean? . G19815) (boolean=? . G19814) (atan . G19813) (assertion-violation . G19812) (asin . G19811) (apply . G19810) (append . G19809) (angle . G19808) (acos . G19807) (abs . G19806) (/ . G19805) (* . G19804) (- . G19803) (+ . G19802) (>= . G19801) (> . G19800) (= . G19799) (<= . G19798) (< . G19797) (unquote-splicing . G19747) (unquote . G19746) (_ . G19745) (else . G19744) (=> . G19743) (... . G19742) (assert . G19741) (or . G19737) (and . G19736) (cond . G19734) (let* . G19733) (let . G19732) (let*-values . G19731) (let-values . G19730) (identifier-syntax . G19729) (quasiquote . G19726) (syntax-rules . G19725) (case . G19720) (if . G19716) (letrec* . G19715) (letrec . G19714) (lambda . G19711) (quote . G19708) (letrec-syntax . G19706) (let-syntax . G19705) (set! . G19704) (begin . G19702) (define-syntax . G19700) (define . G19699)) '() values values '#f '#f '#t '#f) (G11113 'G20473 '(rnrs lists) '(6) '() '() '() '((remove . G20174) (remv . G20173) (remp . G20172) (remq . G20171) (partition . G20170) (memv . G20169) (memq . G20168) (memp . G20167) (member . G20166) (exists . G20165) (for-all . G20164) (fold-right . G20163) (fold-left . G20162) (find . G20161) (filter . G20160) (cons* . G20159) (assv . G20158) (assq . G20157) (assp . G20156) (assoc . G20155)) '() values values '#f '#f '#t '#f) (G11113 'G20474 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G20264) (call-with-input-file . G20263) (write-char . G20262) (write . G20261) (with-output-to-file . G20260) (with-input-from-file . G20259) (read-char . G20258) (read . G20257) (peek-char . G20256) (open-output-file . G20255) (open-input-file . G20254) (newline . G20253) (display . G20252) (close-output-port . G20251) (close-input-port . G20250) (eof-object? . G20249) (eof-object . G20248) (current-error-port . G20247) (current-output-port . G20246) (current-input-port . G20245) (output-port? . G20244) (input-port? . G20243) (make-i/o-write-error . G19283) (make-i/o-read-error . G19263) (make-i/o-port-error . G19434) (make-i/o-invalid-position-error . G19304) (make-i/o-filename-error . G19329) (make-i/o-file-protection-error . G19353) (make-i/o-file-is-read-only-error . G19373) (make-i/o-file-does-not-exist-error . G19413) (make-i/o-file-already-exists-error . G19393) (make-i/o-error . G19243) (i/o-write-error? . G19285) (i/o-read-error? . G19265) (i/o-port-error? . G19438) (i/o-invalid-position-error? . G19308) (i/o-filename-error? . G19333) (i/o-file-protection-error? . G19355) (i/o-file-is-read-only-error? . G19375) (i/o-file-does-not-exist-error? . G19415) (i/o-file-already-exists-error? . G19395) (i/o-error? . G19245) (i/o-error-port . G19440) (i/o-error-filename . G19335) (&i/o-port . G19792) (&i/o-file-does-not-exist . G19791) (&i/o-file-already-exists . G19790) (&i/o-file-is-read-only . G19789) (&i/o-file-protection . G19788) (&i/o-filename . G19787) (&i/o-invalid-position . G19786) (&i/o-write . G19785) (&i/o-read . G19784) (&i/o . G19783)) '() values values '#f '#f '#t '#f) (G11113 'G20475 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G20201) (utf32->string . G20127) (utf16->string . G20126) (utf8->string . G20125) (uint-list->bytevector . G20124) (u8-list->bytevector . G20123) (string->utf8 . G20122) (string->utf32 . G20121) (string->utf16 . G20120) (sint-list->bytevector . G20119) (native-endianness . G20118) (bytevector? . G20117) (bytevector=? . G20116) (bytevector-uint-set! . G20115) (bytevector-uint-ref . G20114) (bytevector-u8-set! . G20113) (bytevector-u8-ref . G20112) (bytevector-u64-set! . G20111) (bytevector-u64-ref . G20110) (bytevector-u64-native-set! . G20109) (bytevector-u64-native-ref . G20108) (bytevector-u32-set! . G20107) (bytevector-u32-ref . G20106) (bytevector-u32-native-set! . G20105) (bytevector-u32-native-ref . G20104) (bytevector-u16-set! . G20103) (bytevector-u16-ref . G20102) (bytevector-u16-native-set! . G20101) (bytevector-u16-native-ref . G20100) (bytevector-sint-set! . G20099) (bytevector-sint-ref . G20098) (bytevector-s8-set! . G20097) (bytevector-s8-ref . G20096) (bytevector-s64-set! . G20095) (bytevector-s64-ref . G20094) (bytevector-s64-native-set! . G20093) (bytevector-s64-native-ref . G20092) (bytevector-s32-set! . G20091) (bytevector-s32-ref . G20090) (bytevector-s32-native-set! . G20089) (bytevector-s32-native-ref . G20088) (bytevector-s16-set! . G20087) (bytevector-s16-ref . G20086) (bytevector-s16-native-set! . G20085) (bytevector-s16-native-ref . G20084) (bytevector-length . G20083) (bytevector-ieee-single-ref . G20082) (bytevector-ieee-single-native-set! . G20081) (bytevector-ieee-single-native-ref . G20080) (bytevector-ieee-double-ref . G20079) (bytevector-ieee-double-native-set! . G20078) (bytevector-ieee-double-native-ref . G20077) (bytevector-fill! . G20076) (bytevector-copy! . G20075) (bytevector-copy . G20074) (bytevector->uint-list . G20073) (bytevector->u8-list . G20072) (bytevector->sint-list . G20071) (endianness . G19740)) '() values values '#f '#f '#t '#f) (G11113 'G20476 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G20336) (string-titlecase . G20335) (string-normalize-nfkd . G20334) (string-normalize-nfkc . G20333) (string-normalize-nfd . G20332) (string-normalize-nfc . G20331) (string-foldcase . G20330) (string-downcase . G20329) (string-ci>? . G20328) (string-ci>=? . G20327) (string-ci=? . G20326) (string-ci<? . G20325) (string-ci<=? . G20324) (char-whitespace? . G20323) (char-upper-case? . G20322) (char-title-case? . G20321) (char-numeric? . G20320) (char-lower-case? . G20319) (char-general-category . G20318) (char-upcase . G20317) (char-titlecase . G20316) (char-foldcase . G20315) (char-downcase . G20314) (char-ci>? . G20313) (char-ci>=? . G20312) (char-ci=? . G20311) (char-ci<? . G20310) (char-ci<=? . G20309) (char-alphabetic? . G20308)) '() values values '#f '#f '#t '#f) (G11113 'G20477 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G20148) (raise-continuable . G20147) (raise . G20146) (guard . G19752) (else . G19744) (=> . G19743)) '() values values '#f '#f '#t '#f) (G11113 'G20478 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G19975) (bitwise-reverse-bit-field . G19974) (bitwise-length . G19973) (bitwise-if . G19972) (bitwise-first-bit-set . G19971) (bitwise-copy-bit-field . G19970) (bitwise-copy-bit . G19969) (bitwise-bit-set? . G19968) (bitwise-bit-field . G19967) (bitwise-bit-count . G19966) (bitwise-xor . G19965) (bitwise-ior . G19964) (bitwise-and . G19963) (bitwise-not . G19962) (bitwise-arithmetic-shift-right . G19961) (bitwise-arithmetic-shift-left . G19960) (bitwise-arithmetic-shift . G19959)) '() values values '#f '#f '#t '#f) (G11113 'G20479 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G20020) (fxxor . G20019) (fxrotate-bit-field . G20018) (fxreverse-bit-field . G20017) (fxpositive? . G20016) (fxodd? . G20015) (fxnot . G20014) (fxnegative? . G20013) (fxmod0 . G20012) (fxmod . G20011) (fxmin . G20010) (fxmax . G20009) (fxlength . G20008) (fxior . G20007) (fxif . G20006) (fxfirst-bit-set . G20005) (fxeven? . G20004) (fxdiv0-and-mod0 . G20003) (fxdiv0 . G20002) (fxdiv-and-mod . G20001) (fxdiv . G20000) (fxcopy-bit-field . G19999) (fxcopy-bit . G19998) (fxbit-set? . G19997) (fxbit-field . G19996) (fxbit-count . G19995) (fxarithmetic-shift-right . G19994) (fxarithmetic-shift-left . G19993) (fxarithmetic-shift . G19992) (fxand . G19991) (fx>? . G19990) (fx>=? . G19989) (fx=? . G19988) (fx<? . G19987) (fx<=? . G19986) (fx-/carry . G19985) (fx- . G19984) (fx+/carry . G19983) (fx+ . G19982) (fx*/carry . G19981) (fx* . G19980) (greatest-fixnum . G19979) (least-fixnum . G19978) (fixnum-width . G19977) (fixnum? . G19976)) '() values values '#f '#f '#t '#f) (G11113 'G20480 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G20070) (no-infinities-violation? . G20069) (make-no-nans-violation . G20068) (make-no-infinities-violation . G20067) (real->flonum . G20066) (flzero? . G20065) (fltruncate . G20064) (fltan . G20063) (flsqrt . G20062) (flsin . G20061) (flround . G20060) (flpositive? . G20059) (flonum? . G20058) (flodd? . G20057) (flnumerator . G20056) (flnegative? . G20055) (flnan? . G20054) (flmod0 . G20053) (flmod . G20052) (flmin . G20051) (flmax . G20050) (fllog . G20049) (flinteger? . G20048) (flinfinite? . G20047) (flfloor . G20046) (flfinite? . G20045) (flexpt . G20044) (flexp . G20043) (fleven? . G20042) (fldiv0-and-mod0 . G20041) (fldiv0 . G20040) (fldiv-and-mod . G20039) (fldiv . G20038) (fldenominator . G20037) (flcos . G20036) (flceiling . G20035) (flatan . G20034) (flasin . G20033) (flacos . G20032) (flabs . G20031) (fl>? . G20030) (fl>=? . G20029) (fl=? . G20028) (fl<? . G20027) (fl<=? . G20026) (fl/ . G20025) (fl- . G20024) (fl+ . G20023) (fl* . G20022) (fixnum->flonum . G20021) (&no-nans . G19796) (&no-infinities . G19795)) '() values values '#f '#f '#t '#f) (G11113 'G20481 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G20285) (string-ci-hash . G20284) (string-hash . G20283) (equal-hash . G20282) (hashtable-equivalence-function . G20281) (make-hashtable . G20280) (hashtable-hash-function . G20279) (make-eqv-hashtable . G20278) (make-eq-hashtable . G20277) (hashtable? . G20276) (hashtable-update! . G20275) (hashtable-size . G20274) (hashtable-set! . G20273) (hashtable-ref . G20272) (hashtable-mutable? . G20271) (hashtable-keys . G20270) (hashtable-entries . G20269) (hashtable-delete! . G20268) (hashtable-copy . G20267) (hashtable-contains? . G20266) (hashtable-clear! . G20265)) '() values values '#f '#f '#t '#f) (G11113 'G20482 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G20249) (eof-object . G20248) (current-error-port . G20247) (current-output-port . G20246) (current-input-port . G20245) (output-port? . G20244) (input-port? . G20243) (utf-8-codec . G20242) (utf-16-codec . G20241) (transcoder-error-handling-mode . G20240) (transcoder-eol-style . G20239) (transcoder-codec . G20238) (transcoded-port . G20237) (textual-port? . G20236) (string->bytevector . G20235) (standard-output-port . G20234) (standard-input-port . G20233) (standard-error-port . G20232) (set-port-position! . G20231) (put-u8 . G20230) (put-string . G20229) (put-datum . G20228) (put-char . G20227) (put-bytevector . G20226) (port? . G20225) (port-transcoder . G20224) (port-position . G20223) (port-has-set-port-position!? . G20222) (port-has-port-position? . G20221) (port-eof? . G20220) (output-port-buffer-mode . G20219) (open-string-output-port . G20218) (open-string-input-port . G20217) (open-file-output-port . G20216) (open-file-input/output-port . G20215) (open-file-input-port . G20214) (open-bytevector-output-port . G20213) (open-bytevector-input-port . G20212) (native-transcoder . G20211) (native-eol-style . G20210) (make-transcoder . G20209) (latin-1-codec . G20208) (make-i/o-write-error . G19283) (make-i/o-read-error . G19263) (make-i/o-port-error . G19434) (make-i/o-invalid-position-error . G19304) (make-i/o-filename-error . G19329) (make-i/o-file-protection-error . G19353) (make-i/o-file-is-read-only-error . G19373) (make-i/o-file-does-not-exist-error . G19413) (make-i/o-file-already-exists-error . G19393) (make-i/o-error . G19243) (make-i/o-encoding-error . G19479) (make-i/o-decoding-error . G19458) (make-custom-textual-output-port . G20207) (make-custom-textual-input/output-port . G20206) (make-custom-textual-input-port . G20205) (make-custom-binary-output-port . G20204) (make-custom-binary-input/output-port . G20203) (make-custom-binary-input-port . G20202) (lookahead-u8 . G20200) (lookahead-char . G20199) (i/o-write-error? . G19285) (i/o-read-error? . G19265) (i/o-port-error? . G19438) (i/o-invalid-position-error? . G19308) (i/o-filename-error? . G19333) (i/o-file-protection-error? . G19355) (i/o-file-is-read-only-error? . G19375) (i/o-file-does-not-exist-error? . G19415) (i/o-file-already-exists-error? . G19395) (i/o-error? . G19245) (i/o-error-port . G19440) (i/o-error-filename . G19335) (i/o-encoding-error? . G19483) (i/o-encoding-error-char . G19485) (i/o-decoding-error? . G19460) (get-u8 . G20198) (get-string-n! . G20197) (get-string-n . G20196) (get-string-all . G20195) (get-line . G20194) (get-datum . G20193) (get-char . G20192) (get-bytevector-some . G20191) (get-bytevector-n! . G20190) (get-bytevector-n . G20189) (get-bytevector-all . G20188) (flush-output-port . G20187) (close-port . G20186) (call-with-string-output-port . G20154) (call-with-port . G20153) (call-with-bytevector-output-port . G20152) (bytevector->string . G20151) (buffer-mode? . G20150) (binary-port? . G20149) (&i/o-encoding . G19794) (&i/o-decoding . G19793) (&i/o-port . G19792) (&i/o-file-does-not-exist . G19791) (&i/o-file-already-exists . G19790) (&i/o-file-is-read-only . G19789) (&i/o-file-protection . G19788) (&i/o-filename . G19787) (&i/o-invalid-position . G19786) (&i/o-write . G19785) (&i/o-read . G19784) (&i/o . G19783) (error-handling-mode . G19756) (file-options . G19755) (buffer-mode . G19754) (eol-style . G19753)) '() values values '#f '#f '#t '#f) (G11113 'G20483 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G20145) (enum-set=? . G20144) (enum-set-universe . G20143) (enum-set-union . G20142) (enum-set-subset? . G20141) (enum-set-projection . G20140) (enum-set-member? . G20139) (enum-set-intersection . G20138) (enum-set-indexer . G20137) (enum-set-difference . G20136) (enum-set-constructor . G20135) (enum-set-complement . G20134) (enum-set->list . G20133) (define-enumeration . G19767)) '() values values '#f '#f '#t '#f) (G11113 'G20484 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G19017) (warning? . G18889) (violation? . G18949) (undefined-violation? . G19129) (syntax-violation? . G19105) (syntax-violation-subform . G19109) (syntax-violation-form . G19107) (syntax-violation . G12428) (simple-conditions . G20132) (serious-condition? . G18909) (non-continuable-violation? . G19039) (message-condition? . G18867) (make-who-condition . G19013) (make-warning . G18887) (make-violation . G18947) (make-undefined-violation . G19127) (make-syntax-violation . G19099) (make-serious-condition . G18907) (make-non-continuable-violation . G19037) (make-message-condition . G18863) (make-lexical-violation . G19077) (make-irritants-condition . G18988) (make-implementation-restriction-violation . G19057) (make-error . G18927) (make-assertion-violation . G18967) (lexical-violation? . G19079) (irritants-condition? . G18992) (implementation-restriction-violation? . G19059) (error? . G18929) (condition-who . G19019) (condition-predicate . G20131) (condition-message . G18869) (condition-irritants . G18994) (condition-accessor . G20130) (condition . G20129) (assertion-violation? . G18969) (condition? . G20128) (&undefined . G19782) (&syntax . G19781) (&lexical . G19780) (&implementation-restriction . G19779) (&non-continuable . G19778) (&who . G19777) (&irritants . G19776) (&assertion . G19775) (&violation . G19774) (&error . G19773) (&serious . G19772) (&warning . G19771) (&message . G19770) (&condition . G19769) (define-condition-type . G19768)) '() values values '#f '#f '#t '#f) (G11113 'G20485 '(rnrs records inspection) '(6) '() '() '() '((record? . G20300) (record-type-uid . G20299) (record-type-sealed? . G20298) (record-type-parent . G20297) (record-type-opaque? . G20296) (record-type-name . G20295) (record-type-generative? . G20294) (record-type-field-names . G20293) (record-rtd . G20292) (record-field-mutable? . G20291)) '() values values '#f '#f '#t '#f) (G11113 'G20486 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G20307) (record-predicate . G20306) (record-mutator . G20305) (record-constructor . G20304) (record-accessor . G20303) (make-record-type-descriptor . G20302) (make-record-constructor-descriptor . G20301)) '() values values '#f '#f '#t '#f) (G11113 'G20487 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G19766) (parent-rtd . G19765) (nongenerative . G19764) (opaque . G19763) (sealed . G19762) (protocol . G19761) (parent . G19760) (immutable . G19759) (mutable . G19758) (fields . G19757) (record-constructor-descriptor . G19722) (record-type-descriptor . G19721)) '() values values '#f '#f '#t '#f) (G11113 'G20488 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G20456) (&no-nans-rtd . G20455) (&no-infinities-rcd . G20454) (&no-infinities-rtd . G20453) (&i/o-encoding-rcd . G20452) (&i/o-encoding-rtd . G20451) (&i/o-decoding-rcd . G20450) (&i/o-decoding-rtd . G20449) (&i/o-port-rcd . G20448) (&i/o-port-rtd . G20447) (&i/o-file-does-not-exist-rcd . G20446) (&i/o-file-does-not-exist-rtd . G20445) (&i/o-file-already-exists-rcd . G20444) (&i/o-file-already-exists-rtd . G20443) (&i/o-file-is-read-only-rcd . G20442) (&i/o-file-is-read-only-rtd . G20441) (&i/o-file-protection-rcd . G20440) (&i/o-file-protection-rtd . G20439) (&i/o-filename-rcd . G20438) (&i/o-filename-rtd . G20437) (&i/o-invalid-position-rcd . G20436) (&i/o-invalid-position-rtd . G20435) (&i/o-write-rcd . G20434) (&i/o-write-rtd . G20433) (&i/o-read-rcd . G20432) (&i/o-read-rtd . G20431) (&i/o-rcd . G20430) (&i/o-rtd . G20429) (&undefined-rcd . G20428) (&undefined-rtd . G20427) (&syntax-rcd . G20426) (&syntax-rtd . G20425) (&lexical-rcd . G20424) (&lexical-rtd . G20423) (&implementation-restriction-rcd . G20422) (&implementation-restriction-rtd . G20421) (&non-continuable-rcd . G20420) (&non-continuable-rtd . G20419) (&who-rcd . G20418) (&who-rtd . G20417) (&irritants-rcd . G20416) (&irritants-rtd . G20415) (&assertion-rcd . G20414) (&assertion-rtd . G20413) (&violation-rcd . G20412) (&violation-rtd . G20411) (&error-rcd . G20410) (&error-rtd . G20409) (&serious-rcd . G20408) (&serious-rtd . G20407) (&warning-rcd . G20406) (&warning-rtd . G20405) (&message-rcd . G20404) (&message-rtd . G20403) (&condition-rcd . G20402) (&condition-rtd . G20401) (syntax-error . G12422) (syntax-dispatch . G12195) (pretty-print . G20400) (eval-core . G20399) (set-symbol-value! . G20398) (symbol-value . G20397) (gensym . G20396) (void . G20395) (load . G19578) (interaction-environment . G12440) (char-ready? . G20394) (regexp? . G20393) (read-line . G20392) (dotted-list? . G20391) (circular-list? . G20390) (proper-list? . G20389) (circular-list . G20388) (last . G20387) (last-pair . G20386) (not-pair? . G20385) (split-at! . G20384) (split-at . G20383) (list= . G20382) (list-copy . G20381) (list-tabulate . G20380) (make-list . G20379) (xcons . G20378) (tenth . G20377) (ninth . G20376) (eighth . G20375) (seventh . G20374) (sixth . G20373) (fifth . G20372) (drop-right! . G20371) (drop-right . G20370) (take-right . G20369) (take! . G20368) (drop . G20367) (take . G20366) (car+cdr . G20365) (third . G20364) (second . G20363) (first . G20362) (assoc-ref . G20361) (alist-cons . G20360) (print . G20359) (format . G20358) (standard-library-path . G20357) (current-directory . G20356) (write-to-file . G20355) (file->list . G20354) (file->string . G20353) (digit->integer . G20352) (call-with-string-input-port . G20351) (call-with-string-io . G20350) (string-split . G20349) (bytevector-for-each . G20348) (string->regexp . G20347) (rxmatch . G20346) (regexp-replace-all . G20345) (hashtable-for-each . G20344) (readdir . G20343) (get-environment-variables . G20342) (get-environment-variable . G20341) (get-command-line . G20340) (sys-display . G20339) (source-info . G20338) (set-source-info! . G20337) (string-upcase . G20336) (string-titlecase . G20335) (string-normalize-nfkd . G20334) (string-normalize-nfkc . G20333) (string-normalize-nfd . G20332) (string-normalize-nfc . G20331) (string-foldcase . G20330) (string-downcase . G20329) (string-ci>? . G20328) (string-ci>=? . G20327) (string-ci=? . G20326) (string-ci<? . G20325) (string-ci<=? . G20324) (char-whitespace? . G20323) (char-upper-case? . G20322) (char-title-case? . G20321) (char-numeric? . G20320) (char-lower-case? . G20319) (char-general-category . G20318) (char-upcase . G20317) (char-titlecase . G20316) (char-foldcase . G20315) (char-downcase . G20314) (char-ci>? . G20313) (char-ci>=? . G20312) (char-ci=? . G20311) (char-ci<? . G20310) (char-ci<=? . G20309) (char-alphabetic? . G20308) (make-variable-transformer . G11681) (identifier? . G12430) (generate-temporaries . G12414) (free-identifier=? . G12416) (syntax->datum . G12434) (datum->syntax . G12432) (bound-identifier=? . G12418) (record-type-descriptor? . G20307) (record-predicate . G20306) (record-mutator . G20305) (record-constructor . G20304) (record-accessor . G20303) (make-record-type-descriptor . G20302) (make-record-constructor-descriptor . G20301) (record? . G20300) (record-type-uid . G20299) (record-type-sealed? . G20298) (record-type-parent . G20297) (record-type-opaque? . G20296) (record-type-name . G20295) (record-type-generative? . G20294) (record-type-field-names . G20293) (record-rtd . G20292) (record-field-mutable? . G20291) (delete-file . G20290) (file-exists? . G20289) (vector-sort! . G20288) (vector-sort . G20287) (list-sort . G20286) (symbol-hash . G20285) (string-ci-hash . G20284) (string-hash . G20283) (equal-hash . G20282) (hashtable-equivalence-function . G20281) (make-hashtable . G20280) (hashtable-hash-function . G20279) (make-eqv-hashtable . G20278) (make-eq-hashtable . G20277) (hashtable? . G20276) (hashtable-update! . G20275) (hashtable-size . G20274) (hashtable-set! . G20273) (hashtable-ref . G20272) (hashtable-mutable? . G20271) (hashtable-keys . G20270) (hashtable-entries . G20269) (hashtable-delete! . G20268) (hashtable-copy . G20267) (hashtable-contains? . G20266) (hashtable-clear! . G20265) (call-with-output-file . G20264) (call-with-input-file . G20263) (write-char . G20262) (write . G20261) (with-output-to-file . G20260) (with-input-from-file . G20259) (read-char . G20258) (read . G20257) (peek-char . G20256) (open-output-file . G20255) (open-input-file . G20254) (newline . G20253) (display . G20252) (close-output-port . G20251) (close-input-port . G20250) (eof-object? . G20249) (eof-object . G20248) (current-error-port . G20247) (current-output-port . G20246) (current-input-port . G20245) (output-port? . G20244) (input-port? . G20243) (utf-8-codec . G20242) (utf-16-codec . G20241) (transcoder-error-handling-mode . G20240) (transcoder-eol-style . G20239) (transcoder-codec . G20238) (transcoded-port . G20237) (textual-port? . G20236) (string->bytevector . G20235) (standard-output-port . G20234) (standard-input-port . G20233) (standard-error-port . G20232) (set-port-position! . G20231) (put-u8 . G20230) (put-string . G20229) (put-datum . G20228) (put-char . G20227) (put-bytevector . G20226) (port? . G20225) (port-transcoder . G20224) (port-position . G20223) (port-has-set-port-position!? . G20222) (port-has-port-position? . G20221) (port-eof? . G20220) (output-port-buffer-mode . G20219) (open-string-output-port . G20218) (open-string-input-port . G20217) (open-file-output-port . G20216) (open-file-input/output-port . G20215) (open-file-input-port . G20214) (open-bytevector-output-port . G20213) (open-bytevector-input-port . G20212) (native-transcoder . G20211) (native-eol-style . G20210) (make-transcoder . G20209) (latin-1-codec . G20208) (make-i/o-write-error . G19283) (make-i/o-read-error . G19263) (make-i/o-port-error . G19434) (make-i/o-invalid-position-error . G19304) (make-i/o-filename-error . G19329) (make-i/o-file-protection-error . G19353) (make-i/o-file-is-read-only-error . G19373) (make-i/o-file-does-not-exist-error . G19413) (make-i/o-file-already-exists-error . G19393) (make-i/o-error . G19243) (make-i/o-encoding-error . G19479) (make-i/o-decoding-error . G19458) (make-custom-textual-output-port . G20207) (make-custom-textual-input/output-port . G20206) (make-custom-textual-input-port . G20205) (make-custom-binary-output-port . G20204) (make-custom-binary-input/output-port . G20203) (make-custom-binary-input-port . G20202) (make-bytevector . G20201) (lookahead-u8 . G20200) (lookahead-char . G20199) (i/o-write-error? . G19285) (i/o-read-error? . G19265) (i/o-port-error? . G19438) (i/o-invalid-position-error? . G19308) (i/o-filename-error? . G19333) (i/o-file-protection-error? . G19355) (i/o-file-is-read-only-error? . G19375) (i/o-file-does-not-exist-error? . G19415) (i/o-file-already-exists-error? . G19395) (i/o-error? . G19245) (i/o-error-port . G19440) (i/o-error-filename . G19335) (i/o-encoding-error? . G19483) (i/o-encoding-error-char . G19485) (i/o-decoding-error? . G19460) (get-u8 . G20198) (get-string-n! . G20197) (get-string-n . G20196) (get-string-all . G20195) (get-line . G20194) (get-datum . G20193) (get-char . G20192) (get-bytevector-some . G20191) (get-bytevector-n! . G20190) (get-bytevector-n . G20189) (get-bytevector-all . G20188) (flush-output-port . G20187) (close-port . G20186) (scheme-report-environment . G12396) (quotient . G20185) (null-environment . G12394) (remainder . G20184) (modulo . G20183) (inexact->exact . G20182) (force . G20181) (exact->inexact . G20180) (exit . G20179) (command-line . G19572) (string-fill! . G20178) (string-set! . G20177) (set-cdr! . G20176) (set-car! . G20175) (remove . G20174) (remv . G20173) (remp . G20172) (remq . G20171) (partition . G20170) (memv . G20169) (memq . G20168) (memp . G20167) (member . G20166) (exists . G20165) (for-all . G20164) (fold-right . G20163) (fold-left . G20162) (find . G20161) (filter . G20160) (cons* . G20159) (assv . G20158) (assq . G20157) (assp . G20156) (assoc . G20155) (call-with-string-output-port . G20154) (call-with-port . G20153) (call-with-bytevector-output-port . G20152) (bytevector->string . G20151) (buffer-mode? . G20150) (binary-port? . G20149) (with-exception-handler . G20148) (raise-continuable . G20147) (raise . G20146) (eval . G12400) (environment . G12392) (make-enumeration . G20145) (enum-set=? . G20144) (enum-set-universe . G20143) (enum-set-union . G20142) (enum-set-subset? . G20141) (enum-set-projection . G20140) (enum-set-member? . G20139) (enum-set-intersection . G20138) (enum-set-indexer . G20137) (enum-set-difference . G20136) (enum-set-constructor . G20135) (enum-set-complement . G20134) (enum-set->list . G20133) (who-condition? . G19017) (warning? . G18889) (violation? . G18949) (undefined-violation? . G19129) (syntax-violation? . G19105) (syntax-violation-subform . G19109) (syntax-violation-form . G19107) (syntax-violation . G12428) (simple-conditions . G20132) (serious-condition? . G18909) (non-continuable-violation? . G19039) (message-condition? . G18867) (make-who-condition . G19013) (make-warning . G18887) (make-violation . G18947) (make-undefined-violation . G19127) (make-syntax-violation . G19099) (make-serious-condition . G18907) (make-non-continuable-violation . G19037) (make-message-condition . G18863) (make-lexical-violation . G19077) (make-irritants-condition . G18988) (make-implementation-restriction-violation . G19057) (make-error . G18927) (make-assertion-violation . G18967) (lexical-violation? . G19079) (irritants-condition? . G18992) (implementation-restriction-violation? . G19059) (error? . G18929) (condition-who . G19019) (condition-predicate . G20131) (condition-message . G18869) (condition-irritants . G18994) (condition-accessor . G20130) (condition . G20129) (assertion-violation? . G18969) (condition? . G20128) (utf32->string . G20127) (utf16->string . G20126) (utf8->string . G20125) (uint-list->bytevector . G20124) (u8-list->bytevector . G20123) (string->utf8 . G20122) (string->utf32 . G20121) (string->utf16 . G20120) (sint-list->bytevector . G20119) (native-endianness . G20118) (bytevector? . G20117) (bytevector=? . G20116) (bytevector-uint-set! . G20115) (bytevector-uint-ref . G20114) (bytevector-u8-set! . G20113) (bytevector-u8-ref . G20112) (bytevector-u64-set! . G20111) (bytevector-u64-ref . G20110) (bytevector-u64-native-set! . G20109) (bytevector-u64-native-ref . G20108) (bytevector-u32-set! . G20107) (bytevector-u32-ref . G20106) (bytevector-u32-native-set! . G20105) (bytevector-u32-native-ref . G20104) (bytevector-u16-set! . G20103) (bytevector-u16-ref . G20102) (bytevector-u16-native-set! . G20101) (bytevector-u16-native-ref . G20100) (bytevector-sint-set! . G20099) (bytevector-sint-ref . G20098) (bytevector-s8-set! . G20097) (bytevector-s8-ref . G20096) (bytevector-s64-set! . G20095) (bytevector-s64-ref . G20094) (bytevector-s64-native-set! . G20093) (bytevector-s64-native-ref . G20092) (bytevector-s32-set! . G20091) (bytevector-s32-ref . G20090) (bytevector-s32-native-set! . G20089) (bytevector-s32-native-ref . G20088) (bytevector-s16-set! . G20087) (bytevector-s16-ref . G20086) (bytevector-s16-native-set! . G20085) (bytevector-s16-native-ref . G20084) (bytevector-length . G20083) (bytevector-ieee-single-ref . G20082) (bytevector-ieee-single-native-set! . G20081) (bytevector-ieee-single-native-ref . G20080) (bytevector-ieee-double-ref . G20079) (bytevector-ieee-double-native-set! . G20078) (bytevector-ieee-double-native-ref . G20077) (bytevector-fill! . G20076) (bytevector-copy! . G20075) (bytevector-copy . G20074) (bytevector->uint-list . G20073) (bytevector->u8-list . G20072) (bytevector->sint-list . G20071) (no-nans-violation? . G20070) (no-infinities-violation? . G20069) (make-no-nans-violation . G20068) (make-no-infinities-violation . G20067) (real->flonum . G20066) (flzero? . G20065) (fltruncate . G20064) (fltan . G20063) (flsqrt . G20062) (flsin . G20061) (flround . G20060) (flpositive? . G20059) (flonum? . G20058) (flodd? . G20057) (flnumerator . G20056) (flnegative? . G20055) (flnan? . G20054) (flmod0 . G20053) (flmod . G20052) (flmin . G20051) (flmax . G20050) (fllog . G20049) (flinteger? . G20048) (flinfinite? . G20047) (flfloor . G20046) (flfinite? . G20045) (flexpt . G20044) (flexp . G20043) (fleven? . G20042) (fldiv0-and-mod0 . G20041) (fldiv0 . G20040) (fldiv-and-mod . G20039) (fldiv . G20038) (fldenominator . G20037) (flcos . G20036) (flceiling . G20035) (flatan . G20034) (flasin . G20033) (flacos . G20032) (flabs . G20031) (fl>? . G20030) (fl>=? . G20029) (fl=? . G20028) (fl<? . G20027) (fl<=? . G20026) (fl/ . G20025) (fl- . G20024) (fl+ . G20023) (fl* . G20022) (fixnum->flonum . G20021) (fxzero? . G20020) (fxxor . G20019) (fxrotate-bit-field . G20018) (fxreverse-bit-field . G20017) (fxpositive? . G20016) (fxodd? . G20015) (fxnot . G20014) (fxnegative? . G20013) (fxmod0 . G20012) (fxmod . G20011) (fxmin . G20010) (fxmax . G20009) (fxlength . G20008) (fxior . G20007) (fxif . G20006) (fxfirst-bit-set . G20005) (fxeven? . G20004) (fxdiv0-and-mod0 . G20003) (fxdiv0 . G20002) (fxdiv-and-mod . G20001) (fxdiv . G20000) (fxcopy-bit-field . G19999) (fxcopy-bit . G19998) (fxbit-set? . G19997) (fxbit-field . G19996) (fxbit-count . G19995) (fxarithmetic-shift-right . G19994) (fxarithmetic-shift-left . G19993) (fxarithmetic-shift . G19992) (fxand . G19991) (fx>? . G19990) (fx>=? . G19989) (fx=? . G19988) (fx<? . G19987) (fx<=? . G19986) (fx-/carry . G19985) (fx- . G19984) (fx+/carry . G19983) (fx+ . G19982) (fx*/carry . G19981) (fx* . G19980) (greatest-fixnum . G19979) (least-fixnum . G19978) (fixnum-width . G19977) (fixnum? . G19976) (bitwise-rotate-bit-field . G19975) (bitwise-reverse-bit-field . G19974) (bitwise-length . G19973) (bitwise-if . G19972) (bitwise-first-bit-set . G19971) (bitwise-copy-bit-field . G19970) (bitwise-copy-bit . G19969) (bitwise-bit-set? . G19968) (bitwise-bit-field . G19967) (bitwise-bit-count . G19966) (bitwise-xor . G19965) (bitwise-ior . G19964) (bitwise-and . G19963) (bitwise-not . G19962) (bitwise-arithmetic-shift-right . G19961) (bitwise-arithmetic-shift-left . G19960) (bitwise-arithmetic-shift . G19959) (zero? . G19958) (vector? . G19957) (vector-set! . G19956) (vector-ref . G19955) (vector-map . G19954) (vector-length . G19953) (vector-for-each . G19952) (vector-fill! . G19951) (vector->list . G19950) (vector . G19949) (values . G19948) (truncate . G19947) (tan . G19946) (symbol? . G19945) (symbol=? . G19944) (symbol->string . G19943) (substring . G19942) (string? . G19941) (string>? . G19940) (string>=? . G19939) (string=? . G19938) (string<? . G19937) (string<=? . G19936) (string-ref . G19935) (string-length . G19934) (string-for-each . G19933) (string-copy . G19932) (string-append . G19931) (string->symbol . G19930) (string->number . G19929) (string->list . G19928) (string . G19927) (sqrt . G19926) (sin . G19925) (round . G19924) (reverse . G19923) (real? . G19922) (real-valued? . G19921) (real-part . G19920) (rationalize . G19919) (rational? . G19918) (rational-valued? . G19917) (procedure? . G19916) (positive? . G19915) (pair? . G19914) (odd? . G19913) (numerator . G19912) (number? . G19911) (number->string . G19910) (null? . G19909) (not . G19908) (negative? . G19907) (nan? . G19906) (min . G19905) (max . G19904) (map . G19903) (make-vector . G19902) (make-string . G19901) (make-rectangular . G19900) (make-polar . G19899) (magnitude . G19898) (log . G19897) (list? . G19896) (list-tail . G19895) (list-ref . G19894) (list->vector . G19893) (list->string . G19892) (list . G19891) (length . G19890) (lcm . G19889) (integer? . G19888) (integer-valued? . G19887) (integer->char . G19886) (infinite? . G19885) (inexact? . G19884) (inexact . G19883) (imag-part . G19882) (gcd . G19881) (for-each . G19880) (floor . G19879) (finite? . G19878) (expt . G19877) (exp . G19876) (exact? . G19875) (exact-integer-sqrt . G19874) (exact . G19873) (even? . G19872) (error . G19871) (eqv? . G19870) (equal? . G19869) (eq? . G19868) (dynamic-wind . G19867) (div0-and-mod0 . G19866) (mod0 . G19865) (div0 . G19864) (div-and-mod . G19863) (mod . G19862) (div . G19861) (denominator . G19860) (cos . G19859) (cons . G19858) (complex? . G19857) (char? . G19856) (char>? . G19855) (char>=? . G19854) (char=? . G19853) (char<? . G19852) (char<=? . G19851) (char->integer . G19850) (ceiling . G19849) (call-with-values . G19848) (call/cc . G19847) (call-with-current-continuation . G19846) (cddddr . G19845) (cdddar . G19844) (cddadr . G19843) (cddaar . G19842) (cdaddr . G19841) (cdadar . G19840) (cdaadr . G19839) (cdaaar . G19838) (cadddr . G19837) (caddar . G19836) (cadadr . G19835) (cadaar . G19834) (caaddr . G19833) (caadar . G19832) (caaadr . G19831) (caaaar . G19830) (cdddr . G19829) (cddar . G19828) (cdadr . G19827) (cdaar . G19826) (caddr . G19825) (cadar . G19824) (caadr . G19823) (caaar . G19822) (cddr . G19821) (cdar . G19820) (cadr . G19819) (caar . G19818) (cdr . G19817) (car . G19816) (boolean? . G19815) (boolean=? . G19814) (atan . G19813) (assertion-violation . G19812) (asin . G19811) (apply . G19810) (append . G19809) (angle . G19808) (acos . G19807) (abs . G19806) (/ . G19805) (* . G19804) (- . G19803) (+ . G19802) (>= . G19801) (> . G19800) (= . G19799) (<= . G19798) (< . G19797) (&no-nans . G19796) (&no-infinities . G19795) (&i/o-encoding . G19794) (&i/o-decoding . G19793) (&i/o-port . G19792) (&i/o-file-does-not-exist . G19791) (&i/o-file-already-exists . G19790) (&i/o-file-is-read-only . G19789) (&i/o-file-protection . G19788) (&i/o-filename . G19787) (&i/o-invalid-position . G19786) (&i/o-write . G19785) (&i/o-read . G19784) (&i/o . G19783) (&undefined . G19782) (&syntax . G19781) (&lexical . G19780) (&implementation-restriction . G19779) (&non-continuable . G19778) (&who . G19777) (&irritants . G19776) (&assertion . G19775) (&violation . G19774) (&error . G19773) (&serious . G19772) (&warning . G19771) (&message . G19770) (&condition . G19769) (define-condition-type . G19768) (define-enumeration . G19767) (define-record-type . G19766) (parent-rtd . G19765) (nongenerative . G19764) (opaque . G19763) (sealed . G19762) (protocol . G19761) (parent . G19760) (immutable . G19759) (mutable . G19758) (fields . G19757) (error-handling-mode . G19756) (file-options . G19755) (buffer-mode . G19754) (eol-style . G19753) (guard . G19752) (trace-define . G19751) (trace-lambda . G19750) (unsyntax-splicing . G19749) (unsyntax . G19748) (unquote-splicing . G19747) (unquote . G19746) (_ . G19745) (else . G19744) (=> . G19743) (... . G19742) (assert . G19741) (endianness . G19740) (delay . G19739) (time . G19738) (or . G19737) (and . G19736) (do . G19735) (cond . G19734) (let* . G19733) (let . G19732) (let*-values . G19731) (let-values . G19730) (identifier-syntax . G19729) (with-syntax . G19728) (quasisyntax . G19727) (quasiquote . G19726) (syntax-rules . G19725) (include . G19724) (define-struct . G19723) (record-constructor-descriptor . G19722) (record-type-descriptor . G19721) (case . G19720) (parameterize . G19719) (unless . G19718) (when . G19717) (if . G19716) (letrec* . G19715) (letrec . G19714) (type-descriptor . G19713) (case-lambda . G19712) (lambda . G19711) (syntax . G19710) (syntax-case . G19709) (quote . G19708) (foreign-call . G19707) (letrec-syntax . G19706) (let-syntax . G19705) (set! . G19704) (import . G19703) (begin . G19702) (module . G19701) (define-syntax . G19700) (define . G19699)) '((G20456 core-prim . &no-nans-rcd) (G20455 core-prim . &no-nans-rtd) (G20454 core-prim . &no-infinities-rcd) (G20453 core-prim . &no-infinities-rtd) (G20452 core-prim . &i/o-encoding-rcd) (G20451 core-prim . &i/o-encoding-rtd) (G20450 core-prim . &i/o-decoding-rcd) (G20449 core-prim . &i/o-decoding-rtd) (G20448 core-prim . &i/o-port-rcd) (G20447 core-prim . &i/o-port-rtd) (G20446 core-prim . &i/o-file-does-not-exist-rcd) (G20445 core-prim . &i/o-file-does-not-exist-rtd) (G20444 core-prim . &i/o-file-already-exists-rcd) (G20443 core-prim . &i/o-file-already-exists-rtd) (G20442 core-prim . &i/o-file-is-read-only-rcd) (G20441 core-prim . &i/o-file-is-read-only-rtd) (G20440 core-prim . &i/o-file-protection-rcd) (G20439 core-prim . &i/o-file-protection-rtd) (G20438 core-prim . &i/o-filename-rcd) (G20437 core-prim . &i/o-filename-rtd) (G20436 core-prim . &i/o-invalid-position-rcd) (G20435 core-prim . &i/o-invalid-position-rtd) (G20434 core-prim . &i/o-write-rcd) (G20433 core-prim . &i/o-write-rtd) (G20432 core-prim . &i/o-read-rcd) (G20431 core-prim . &i/o-read-rtd) (G20430 core-prim . &i/o-rcd) (G20429 core-prim . &i/o-rtd) (G20428 core-prim . &undefined-rcd) (G20427 core-prim . &undefined-rtd) (G20426 core-prim . &syntax-rcd) (G20425 core-prim . &syntax-rtd) (G20424 core-prim . &lexical-rcd) (G20423 core-prim . &lexical-rtd) (G20422 core-prim . &implementation-restriction-rcd) (G20421 core-prim . &implementation-restriction-rtd) (G20420 core-prim . &non-continuable-rcd) (G20419 core-prim . &non-continuable-rtd) (G20418 core-prim . &who-rcd) (G20417 core-prim . &who-rtd) (G20416 core-prim . &irritants-rcd) (G20415 core-prim . &irritants-rtd) (G20414 core-prim . &assertion-rcd) (G20413 core-prim . &assertion-rtd) (G20412 core-prim . &violation-rcd) (G20411 core-prim . &violation-rtd) (G20410 core-prim . &error-rcd) (G20409 core-prim . &error-rtd) (G20408 core-prim . &serious-rcd) (G20407 core-prim . &serious-rtd) (G20406 core-prim . &warning-rcd) (G20405 core-prim . &warning-rtd) (G20404 core-prim . &message-rcd) (G20403 core-prim . &message-rtd) (G20402 core-prim . &condition-rcd) (G20401 core-prim . &condition-rtd) (G12422 core-prim . syntax-error) (G12195 core-prim . syntax-dispatch) (G20400 core-prim . pretty-print) (G20399 core-prim . eval-core) (G20398 core-prim . set-symbol-value!) (G20397 core-prim . symbol-value) (G20396 core-prim . gensym) (G20395 core-prim . void) (G19578 core-prim . load) (G12440 core-prim . interaction-environment) (G20394 core-prim . char-ready?) (G20393 core-prim . regexp?) (G20392 core-prim . read-line) (G20391 core-prim . dotted-list?) (G20390 core-prim . circular-list?) (G20389 core-prim . proper-list?) (G20388 core-prim . circular-list) (G20387 core-prim . last) (G20386 core-prim . last-pair) (G20385 core-prim . not-pair?) (G20384 core-prim . split-at!) (G20383 core-prim . split-at) (G20382 core-prim . list=) (G20381 core-prim . list-copy) (G20380 core-prim . list-tabulate) (G20379 core-prim . make-list) (G20378 core-prim . xcons) (G20377 core-prim . tenth) (G20376 core-prim . ninth) (G20375 core-prim . eighth) (G20374 core-prim . seventh) (G20373 core-prim . sixth) (G20372 core-prim . fifth) (G20371 core-prim . drop-right!) (G20370 core-prim . drop-right) (G20369 core-prim . take-right) (G20368 core-prim . take!) (G20367 core-prim . drop) (G20366 core-prim . take) (G20365 core-prim . car+cdr) (G20364 core-prim . third) (G20363 core-prim . second) (G20362 core-prim . first) (G20361 core-prim . assoc-ref) (G20360 core-prim . alist-cons) (G20359 core-prim . print) (G20358 core-prim . format) (G20357 core-prim . standard-library-path) (G20356 core-prim . current-directory) (G20355 core-prim . write-to-file) (G20354 core-prim . file->list) (G20353 core-prim . file->string) (G20352 core-prim . digit->integer) (G20351 core-prim . call-with-string-input-port) (G20350 core-prim . call-with-string-io) (G20349 core-prim . string-split) (G20348 core-prim . bytevector-for-each) (G20347 core-prim . string->regexp) (G20346 core-prim . rxmatch) (G20345 core-prim . regexp-replace-all) (G20344 core-prim . hashtable-for-each) (G20343 core-prim . readdir) (G20342 core-prim . get-environment-variables) (G20341 core-prim . get-environment-variable) (G20340 core-prim . get-command-line) (G20339 core-prim . sys-display) (G20338 core-prim . source-info) (G20337 core-prim . set-source-info!) (G20336 core-prim . string-upcase) (G20335 core-prim . string-titlecase) (G20334 core-prim . string-normalize-nfkd) (G20333 core-prim . string-normalize-nfkc) (G20332 core-prim . string-normalize-nfd) (G20331 core-prim . string-normalize-nfc) (G20330 core-prim . string-foldcase) (G20329 core-prim . string-downcase) (G20328 core-prim . string-ci>?) (G20327 core-prim . string-ci>=?) (G20326 core-prim . string-ci=?) (G20325 core-prim . string-ci<?) (G20324 core-prim . string-ci<=?) (G20323 core-prim . char-whitespace?) (G20322 core-prim . char-upper-case?) (G20321 core-prim . char-title-case?) (G20320 core-prim . char-numeric?) (G20319 core-prim . char-lower-case?) (G20318 core-prim . char-general-category) (G20317 core-prim . char-upcase) (G20316 core-prim . char-titlecase) (G20315 core-prim . char-foldcase) (G20314 core-prim . char-downcase) (G20313 core-prim . char-ci>?) (G20312 core-prim . char-ci>=?) (G20311 core-prim . char-ci=?) (G20310 core-prim . char-ci<?) (G20309 core-prim . char-ci<=?) (G20308 core-prim . char-alphabetic?) (G11681 core-prim . make-variable-transformer) (G12430 core-prim . identifier?) (G12414 core-prim . generate-temporaries) (G12416 core-prim . free-identifier=?) (G12434 core-prim . syntax->datum) (G12432 core-prim . datum->syntax) (G12418 core-prim . bound-identifier=?) (G20307 core-prim . record-type-descriptor?) (G20306 core-prim . record-predicate) (G20305 core-prim . record-mutator) (G20304 core-prim . record-constructor) (G20303 core-prim . record-accessor) (G20302 core-prim . make-record-type-descriptor) (G20301 core-prim . make-record-constructor-descriptor) (G20300 core-prim . record?) (G20299 core-prim . record-type-uid) (G20298 core-prim . record-type-sealed?) (G20297 core-prim . record-type-parent) (G20296 core-prim . record-type-opaque?) (G20295 core-prim . record-type-name) (G20294 core-prim . record-type-generative?) (G20293 core-prim . record-type-field-names) (G20292 core-prim . record-rtd) (G20291 core-prim . record-field-mutable?) (G20290 core-prim . delete-file) (G20289 core-prim . file-exists?) (G20288 core-prim . vector-sort!) (G20287 core-prim . vector-sort) (G20286 core-prim . list-sort) (G20285 core-prim . symbol-hash) (G20284 core-prim . string-ci-hash) (G20283 core-prim . string-hash) (G20282 core-prim . equal-hash) (G20281 core-prim . hashtable-equivalence-function) (G20280 core-prim . make-hashtable) (G20279 core-prim . hashtable-hash-function) (G20278 core-prim . make-eqv-hashtable) (G20277 core-prim . make-eq-hashtable) (G20276 core-prim . hashtable?) (G20275 core-prim . hashtable-update!) (G20274 core-prim . hashtable-size) (G20273 core-prim . hashtable-set!) (G20272 core-prim . hashtable-ref) (G20271 core-prim . hashtable-mutable?) (G20270 core-prim . hashtable-keys) (G20269 core-prim . hashtable-entries) (G20268 core-prim . hashtable-delete!) (G20267 core-prim . hashtable-copy) (G20266 core-prim . hashtable-contains?) (G20265 core-prim . hashtable-clear!) (G20264 core-prim . call-with-output-file) (G20263 core-prim . call-with-input-file) (G20262 core-prim . write-char) (G20261 core-prim . write) (G20260 core-prim . with-output-to-file) (G20259 core-prim . with-input-from-file) (G20258 core-prim . read-char) (G20257 core-prim . read) (G20256 core-prim . peek-char) (G20255 core-prim . open-output-file) (G20254 core-prim . open-input-file) (G20253 core-prim . newline) (G20252 core-prim . display) (G20251 core-prim . close-output-port) (G20250 core-prim . close-input-port) (G20249 core-prim . eof-object?) (G20248 core-prim . eof-object) (G20247 core-prim . current-error-port) (G20246 core-prim . current-output-port) (G20245 core-prim . current-input-port) (G20244 core-prim . output-port?) (G20243 core-prim . input-port?) (G20242 core-prim . utf-8-codec) (G20241 core-prim . utf-16-codec) (G20240 core-prim . transcoder-error-handling-mode) (G20239 core-prim . transcoder-eol-style) (G20238 core-prim . transcoder-codec) (G20237 core-prim . transcoded-port) (G20236 core-prim . textual-port?) (G20235 core-prim . string->bytevector) (G20234 core-prim . standard-output-port) (G20233 core-prim . standard-input-port) (G20232 core-prim . standard-error-port) (G20231 core-prim . set-port-position!) (G20230 core-prim . put-u8) (G20229 core-prim . put-string) (G20228 core-prim . put-datum) (G20227 core-prim . put-char) (G20226 core-prim . put-bytevector) (G20225 core-prim . port?) (G20224 core-prim . port-transcoder) (G20223 core-prim . port-position) (G20222 core-prim . port-has-set-port-position!?) (G20221 core-prim . port-has-port-position?) (G20220 core-prim . port-eof?) (G20219 core-prim . output-port-buffer-mode) (G20218 core-prim . open-string-output-port) (G20217 core-prim . open-string-input-port) (G20216 core-prim . open-file-output-port) (G20215 core-prim . open-file-input/output-port) (G20214 core-prim . open-file-input-port) (G20213 core-prim . open-bytevector-output-port) (G20212 core-prim . open-bytevector-input-port) (G20211 core-prim . native-transcoder) (G20210 core-prim . native-eol-style) (G20209 core-prim . make-transcoder) (G20208 core-prim . latin-1-codec) (G19283 core-prim . make-i/o-write-error) (G19263 core-prim . make-i/o-read-error) (G19434 core-prim . make-i/o-port-error) (G19304 core-prim . make-i/o-invalid-position-error) (G19329 core-prim . make-i/o-filename-error) (G19353 core-prim . make-i/o-file-protection-error) (G19373 core-prim . make-i/o-file-is-read-only-error) (G19413 core-prim . make-i/o-file-does-not-exist-error) (G19393 core-prim . make-i/o-file-already-exists-error) (G19243 core-prim . make-i/o-error) (G19479 core-prim . make-i/o-encoding-error) (G19458 core-prim . make-i/o-decoding-error) (G20207 core-prim . make-custom-textual-output-port) (G20206 core-prim . make-custom-textual-input/output-port) (G20205 core-prim . make-custom-textual-input-port) (G20204 core-prim . make-custom-binary-output-port) (G20203 core-prim . make-custom-binary-input/output-port) (G20202 core-prim . make-custom-binary-input-port) (G20201 core-prim . make-bytevector) (G20200 core-prim . lookahead-u8) (G20199 core-prim . lookahead-char) (G19285 core-prim . i/o-write-error?) (G19265 core-prim . i/o-read-error?) (G19438 core-prim . i/o-port-error?) (G19308 core-prim . i/o-invalid-position-error?) (G19333 core-prim . i/o-filename-error?) (G19355 core-prim . i/o-file-protection-error?) (G19375 core-prim . i/o-file-is-read-only-error?) (G19415 core-prim . i/o-file-does-not-exist-error?) (G19395 core-prim . i/o-file-already-exists-error?) (G19245 core-prim . i/o-error?) (G19440 core-prim . i/o-error-port) (G19335 core-prim . i/o-error-filename) (G19483 core-prim . i/o-encoding-error?) (G19485 core-prim . i/o-encoding-error-char) (G19460 core-prim . i/o-decoding-error?) (G20198 core-prim . get-u8) (G20197 core-prim . get-string-n!) (G20196 core-prim . get-string-n) (G20195 core-prim . get-string-all) (G20194 core-prim . get-line) (G20193 core-prim . get-datum) (G20192 core-prim . get-char) (G20191 core-prim . get-bytevector-some) (G20190 core-prim . get-bytevector-n!) (G20189 core-prim . get-bytevector-n) (G20188 core-prim . get-bytevector-all) (G20187 core-prim . flush-output-port) (G20186 core-prim . close-port) (G12396 core-prim . scheme-report-environment) (G20185 core-prim . quotient) (G12394 core-prim . null-environment) (G20184 core-prim . remainder) (G20183 core-prim . modulo) (G20182 core-prim . inexact->exact) (G20181 core-prim . force) (G20180 core-prim . exact->inexact) (G20179 core-prim . exit) (G19572 core-prim . command-line) (G20178 core-prim . string-fill!) (G20177 core-prim . string-set!) (G20176 core-prim . set-cdr!) (G20175 core-prim . set-car!) (G20174 core-prim . remove) (G20173 core-prim . remv) (G20172 core-prim . remp) (G20171 core-prim . remq) (G20170 core-prim . partition) (G20169 core-prim . memv) (G20168 core-prim . memq) (G20167 core-prim . memp) (G20166 core-prim . member) (G20165 core-prim . exists) (G20164 core-prim . for-all) (G20163 core-prim . fold-right) (G20162 core-prim . fold-left) (G20161 core-prim . find) (G20160 core-prim . filter) (G20159 core-prim . cons*) (G20158 core-prim . assv) (G20157 core-prim . assq) (G20156 core-prim . assp) (G20155 core-prim . assoc) (G20154 core-prim . call-with-string-output-port) (G20153 core-prim . call-with-port) (G20152 core-prim . call-with-bytevector-output-port) (G20151 core-prim . bytevector->string) (G20150 core-prim . buffer-mode?) (G20149 core-prim . binary-port?) (G20148 core-prim . with-exception-handler) (G20147 core-prim . raise-continuable) (G20146 core-prim . raise) (G12400 core-prim . eval) (G12392 core-prim . environment) (G20145 core-prim . make-enumeration) (G20144 core-prim . enum-set=?) (G20143 core-prim . enum-set-universe) (G20142 core-prim . enum-set-union) (G20141 core-prim . enum-set-subset?) (G20140 core-prim . enum-set-projection) (G20139 core-prim . enum-set-member?) (G20138 core-prim . enum-set-intersection) (G20137 core-prim . enum-set-indexer) (G20136 core-prim . enum-set-difference) (G20135 core-prim . enum-set-constructor) (G20134 core-prim . enum-set-complement) (G20133 core-prim . enum-set->list) (G19017 core-prim . who-condition?) (G18889 core-prim . warning?) (G18949 core-prim . violation?) (G19129 core-prim . undefined-violation?) (G19105 core-prim . syntax-violation?) (G19109 core-prim . syntax-violation-subform) (G19107 core-prim . syntax-violation-form) (G12428 core-prim . syntax-violation) (G20132 core-prim . simple-conditions) (G18909 core-prim . serious-condition?) (G19039 core-prim . non-continuable-violation?) (G18867 core-prim . message-condition?) (G19013 core-prim . make-who-condition) (G18887 core-prim . make-warning) (G18947 core-prim . make-violation) (G19127 core-prim . make-undefined-violation) (G19099 core-prim . make-syntax-violation) (G18907 core-prim . make-serious-condition) (G19037 core-prim . make-non-continuable-violation) (G18863 core-prim . make-message-condition) (G19077 core-prim . make-lexical-violation) (G18988 core-prim . make-irritants-condition) (G19057 core-prim . make-implementation-restriction-violation) (G18927 core-prim . make-error) (G18967 core-prim . make-assertion-violation) (G19079 core-prim . lexical-violation?) (G18992 core-prim . irritants-condition?) (G19059 core-prim . implementation-restriction-violation?) (G18929 core-prim . error?) (G19019 core-prim . condition-who) (G20131 core-prim . condition-predicate) (G18869 core-prim . condition-message) (G18994 core-prim . condition-irritants) (G20130 core-prim . condition-accessor) (G20129 core-prim . condition) (G18969 core-prim . assertion-violation?) (G20128 core-prim . condition?) (G20127 core-prim . utf32->string) (G20126 core-prim . utf16->string) (G20125 core-prim . utf8->string) (G20124 core-prim . uint-list->bytevector) (G20123 core-prim . u8-list->bytevector) (G20122 core-prim . string->utf8) (G20121 core-prim . string->utf32) (G20120 core-prim . string->utf16) (G20119 core-prim . sint-list->bytevector) (G20118 core-prim . native-endianness) (G20117 core-prim . bytevector?) (G20116 core-prim . bytevector=?) (G20115 core-prim . bytevector-uint-set!) (G20114 core-prim . bytevector-uint-ref) (G20113 core-prim . bytevector-u8-set!) (G20112 core-prim . bytevector-u8-ref) (G20111 core-prim . bytevector-u64-set!) (G20110 core-prim . bytevector-u64-ref) (G20109 core-prim . bytevector-u64-native-set!) (G20108 core-prim . bytevector-u64-native-ref) (G20107 core-prim . bytevector-u32-set!) (G20106 core-prim . bytevector-u32-ref) (G20105 core-prim . bytevector-u32-native-set!) (G20104 core-prim . bytevector-u32-native-ref) (G20103 core-prim . bytevector-u16-set!) (G20102 core-prim . bytevector-u16-ref) (G20101 core-prim . bytevector-u16-native-set!) (G20100 core-prim . bytevector-u16-native-ref) (G20099 core-prim . bytevector-sint-set!) (G20098 core-prim . bytevector-sint-ref) (G20097 core-prim . bytevector-s8-set!) (G20096 core-prim . bytevector-s8-ref) (G20095 core-prim . bytevector-s64-set!) (G20094 core-prim . bytevector-s64-ref) (G20093 core-prim . bytevector-s64-native-set!) (G20092 core-prim . bytevector-s64-native-ref) (G20091 core-prim . bytevector-s32-set!) (G20090 core-prim . bytevector-s32-ref) (G20089 core-prim . bytevector-s32-native-set!) (G20088 core-prim . bytevector-s32-native-ref) (G20087 core-prim . bytevector-s16-set!) (G20086 core-prim . bytevector-s16-ref) (G20085 core-prim . bytevector-s16-native-set!) (G20084 core-prim . bytevector-s16-native-ref) (G20083 core-prim . bytevector-length) (G20082 core-prim . bytevector-ieee-single-ref) (G20081 core-prim . bytevector-ieee-single-native-set!) (G20080 core-prim . bytevector-ieee-single-native-ref) (G20079 core-prim . bytevector-ieee-double-ref) (G20078 core-prim . bytevector-ieee-double-native-set!) (G20077 core-prim . bytevector-ieee-double-native-ref) (G20076 core-prim . bytevector-fill!) (G20075 core-prim . bytevector-copy!) (G20074 core-prim . bytevector-copy) (G20073 core-prim . bytevector->uint-list) (G20072 core-prim . bytevector->u8-list) (G20071 core-prim . bytevector->sint-list) (G20070 core-prim . no-nans-violation?) (G20069 core-prim . no-infinities-violation?) (G20068 core-prim . make-no-nans-violation) (G20067 core-prim . make-no-infinities-violation) (G20066 core-prim . real->flonum) (G20065 core-prim . flzero?) (G20064 core-prim . fltruncate) (G20063 core-prim . fltan) (G20062 core-prim . flsqrt) (G20061 core-prim . flsin) (G20060 core-prim . flround) (G20059 core-prim . flpositive?) (G20058 core-prim . flonum?) (G20057 core-prim . flodd?) (G20056 core-prim . flnumerator) (G20055 core-prim . flnegative?) (G20054 core-prim . flnan?) (G20053 core-prim . flmod0) (G20052 core-prim . flmod) (G20051 core-prim . flmin) (G20050 core-prim . flmax) (G20049 core-prim . fllog) (G20048 core-prim . flinteger?) (G20047 core-prim . flinfinite?) (G20046 core-prim . flfloor) (G20045 core-prim . flfinite?) (G20044 core-prim . flexpt) (G20043 core-prim . flexp) (G20042 core-prim . fleven?) (G20041 core-prim . fldiv0-and-mod0) (G20040 core-prim . fldiv0) (G20039 core-prim . fldiv-and-mod) (G20038 core-prim . fldiv) (G20037 core-prim . fldenominator) (G20036 core-prim . flcos) (G20035 core-prim . flceiling) (G20034 core-prim . flatan) (G20033 core-prim . flasin) (G20032 core-prim . flacos) (G20031 core-prim . flabs) (G20030 core-prim . fl>?) (G20029 core-prim . fl>=?) (G20028 core-prim . fl=?) (G20027 core-prim . fl<?) (G20026 core-prim . fl<=?) (G20025 core-prim . fl/) (G20024 core-prim . fl-) (G20023 core-prim . fl+) (G20022 core-prim . fl*) (G20021 core-prim . fixnum->flonum) (G20020 core-prim . fxzero?) (G20019 core-prim . fxxor) (G20018 core-prim . fxrotate-bit-field) (G20017 core-prim . fxreverse-bit-field) (G20016 core-prim . fxpositive?) (G20015 core-prim . fxodd?) (G20014 core-prim . fxnot) (G20013 core-prim . fxnegative?) (G20012 core-prim . fxmod0) (G20011 core-prim . fxmod) (G20010 core-prim . fxmin) (G20009 core-prim . fxmax) (G20008 core-prim . fxlength) (G20007 core-prim . fxior) (G20006 core-prim . fxif) (G20005 core-prim . fxfirst-bit-set) (G20004 core-prim . fxeven?) (G20003 core-prim . fxdiv0-and-mod0) (G20002 core-prim . fxdiv0) (G20001 core-prim . fxdiv-and-mod) (G20000 core-prim . fxdiv) (G19999 core-prim . fxcopy-bit-field) (G19998 core-prim . fxcopy-bit) (G19997 core-prim . fxbit-set?) (G19996 core-prim . fxbit-field) (G19995 core-prim . fxbit-count) (G19994 core-prim . fxarithmetic-shift-right) (G19993 core-prim . fxarithmetic-shift-left) (G19992 core-prim . fxarithmetic-shift) (G19991 core-prim . fxand) (G19990 core-prim . fx>?) (G19989 core-prim . fx>=?) (G19988 core-prim . fx=?) (G19987 core-prim . fx<?) (G19986 core-prim . fx<=?) (G19985 core-prim . fx-/carry) (G19984 core-prim . fx-) (G19983 core-prim . fx+/carry) (G19982 core-prim . fx+) (G19981 core-prim . fx*/carry) (G19980 core-prim . fx*) (G19979 core-prim . greatest-fixnum) (G19978 core-prim . least-fixnum) (G19977 core-prim . fixnum-width) (G19976 core-prim . fixnum?) (G19975 core-prim . bitwise-rotate-bit-field) (G19974 core-prim . bitwise-reverse-bit-field) (G19973 core-prim . bitwise-length) (G19972 core-prim . bitwise-if) (G19971 core-prim . bitwise-first-bit-set) (G19970 core-prim . bitwise-copy-bit-field) (G19969 core-prim . bitwise-copy-bit) (G19968 core-prim . bitwise-bit-set?) (G19967 core-prim . bitwise-bit-field) (G19966 core-prim . bitwise-bit-count) (G19965 core-prim . bitwise-xor) (G19964 core-prim . bitwise-ior) (G19963 core-prim . bitwise-and) (G19962 core-prim . bitwise-not) (G19961 core-prim . bitwise-arithmetic-shift-right) (G19960 core-prim . bitwise-arithmetic-shift-left) (G19959 core-prim . bitwise-arithmetic-shift) (G19958 core-prim . zero?) (G19957 core-prim . vector?) (G19956 core-prim . vector-set!) (G19955 core-prim . vector-ref) (G19954 core-prim . vector-map) (G19953 core-prim . vector-length) (G19952 core-prim . vector-for-each) (G19951 core-prim . vector-fill!) (G19950 core-prim . vector->list) (G19949 core-prim . vector) (G19948 core-prim . values) (G19947 core-prim . truncate) (G19946 core-prim . tan) (G19945 core-prim . symbol?) (G19944 core-prim . symbol=?) (G19943 core-prim . symbol->string) (G19942 core-prim . substring) (G19941 core-prim . string?) (G19940 core-prim . string>?) (G19939 core-prim . string>=?) (G19938 core-prim . string=?) (G19937 core-prim . string<?) (G19936 core-prim . string<=?) (G19935 core-prim . string-ref) (G19934 core-prim . string-length) (G19933 core-prim . string-for-each) (G19932 core-prim . string-copy) (G19931 core-prim . string-append) (G19930 core-prim . string->symbol) (G19929 core-prim . string->number) (G19928 core-prim . string->list) (G19927 core-prim . string) (G19926 core-prim . sqrt) (G19925 core-prim . sin) (G19924 core-prim . round) (G19923 core-prim . reverse) (G19922 core-prim . real?) (G19921 core-prim . real-valued?) (G19920 core-prim . real-part) (G19919 core-prim . rationalize) (G19918 core-prim . rational?) (G19917 core-prim . rational-valued?) (G19916 core-prim . procedure?) (G19915 core-prim . positive?) (G19914 core-prim . pair?) (G19913 core-prim . odd?) (G19912 core-prim . numerator) (G19911 core-prim . number?) (G19910 core-prim . number->string) (G19909 core-prim . null?) (G19908 core-prim . not) (G19907 core-prim . negative?) (G19906 core-prim . nan?) (G19905 core-prim . min) (G19904 core-prim . max) (G19903 core-prim . map) (G19902 core-prim . make-vector) (G19901 core-prim . make-string) (G19900 core-prim . make-rectangular) (G19899 core-prim . make-polar) (G19898 core-prim . magnitude) (G19897 core-prim . log) (G19896 core-prim . list?) (G19895 core-prim . list-tail) (G19894 core-prim . list-ref) (G19893 core-prim . list->vector) (G19892 core-prim . list->string) (G19891 core-prim . list) (G19890 core-prim . length) (G19889 core-prim . lcm) (G19888 core-prim . integer?) (G19887 core-prim . integer-valued?) (G19886 core-prim . integer->char) (G19885 core-prim . infinite?) (G19884 core-prim . inexact?) (G19883 core-prim . inexact) (G19882 core-prim . imag-part) (G19881 core-prim . gcd) (G19880 core-prim . for-each) (G19879 core-prim . floor) (G19878 core-prim . finite?) (G19877 core-prim . expt) (G19876 core-prim . exp) (G19875 core-prim . exact?) (G19874 core-prim . exact-integer-sqrt) (G19873 core-prim . exact) (G19872 core-prim . even?) (G19871 core-prim . error) (G19870 core-prim . eqv?) (G19869 core-prim . equal?) (G19868 core-prim . eq?) (G19867 core-prim . dynamic-wind) (G19866 core-prim . div0-and-mod0) (G19865 core-prim . mod0) (G19864 core-prim . div0) (G19863 core-prim . div-and-mod) (G19862 core-prim . mod) (G19861 core-prim . div) (G19860 core-prim . denominator) (G19859 core-prim . cos) (G19858 core-prim . cons) (G19857 core-prim . complex?) (G19856 core-prim . char?) (G19855 core-prim . char>?) (G19854 core-prim . char>=?) (G19853 core-prim . char=?) (G19852 core-prim . char<?) (G19851 core-prim . char<=?) (G19850 core-prim . char->integer) (G19849 core-prim . ceiling) (G19848 core-prim . call-with-values) (G19847 core-prim . call/cc) (G19846 core-prim . call-with-current-continuation) (G19845 core-prim . cddddr) (G19844 core-prim . cdddar) (G19843 core-prim . cddadr) (G19842 core-prim . cddaar) (G19841 core-prim . cdaddr) (G19840 core-prim . cdadar) (G19839 core-prim . cdaadr) (G19838 core-prim . cdaaar) (G19837 core-prim . cadddr) (G19836 core-prim . caddar) (G19835 core-prim . cadadr) (G19834 core-prim . cadaar) (G19833 core-prim . caaddr) (G19832 core-prim . caadar) (G19831 core-prim . caaadr) (G19830 core-prim . caaaar) (G19829 core-prim . cdddr) (G19828 core-prim . cddar) (G19827 core-prim . cdadr) (G19826 core-prim . cdaar) (G19825 core-prim . caddr) (G19824 core-prim . cadar) (G19823 core-prim . caadr) (G19822 core-prim . caaar) (G19821 core-prim . cddr) (G19820 core-prim . cdar) (G19819 core-prim . cadr) (G19818 core-prim . caar) (G19817 core-prim . cdr) (G19816 core-prim . car) (G19815 core-prim . boolean?) (G19814 core-prim . boolean=?) (G19813 core-prim . atan) (G19812 core-prim . assertion-violation) (G19811 core-prim . asin) (G19810 core-prim . apply) (G19809 core-prim . append) (G19808 core-prim . angle) (G19807 core-prim . acos) (G19806 core-prim . abs) (G19805 core-prim . /) (G19804 core-prim . *) (G19803 core-prim . -) (G19802 core-prim . +) (G19801 core-prim . >=) (G19800 core-prim . >) (G19799 core-prim . =) (G19798 core-prim . <=) (G19797 core-prim . <) (G19796 $core-rtd &no-nans-rtd &no-nans-rcd) (G19795 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G19794 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G19793 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G19792 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G19791 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G19790 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G19789 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G19788 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G19787 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G19786 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G19785 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G19784 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G19783 $core-rtd &i/o-rtd &i/o-rcd) (G19782 $core-rtd &undefined-rtd &undefined-rcd) (G19781 $core-rtd &syntax-rtd &syntax-rcd) (G19780 $core-rtd &lexical-rtd &lexical-rcd) (G19779 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G19778 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G19777 $core-rtd &who-rtd &who-rcd) (G19776 $core-rtd &irritants-rtd &irritants-rcd) (G19775 $core-rtd &assertion-rtd &assertion-rcd) (G19774 $core-rtd &violation-rtd &violation-rcd) (G19773 $core-rtd &error-rtd &error-rcd) (G19772 $core-rtd &serious-rtd &serious-rcd) (G19771 $core-rtd &warning-rtd &warning-rcd) (G19770 $core-rtd &message-rtd &message-rcd) (G19769 $core-rtd &condition-rtd &condition-rcd) (G19768 macro . define-condition-type) (G19767 macro . define-enumeration) (G19766 macro . define-record-type) (G19765 macro . parent-rtd) (G19764 macro . nongenerative) (G19763 macro . opaque) (G19762 macro . sealed) (G19761 macro . protocol) (G19760 macro . parent) (G19759 macro . immutable) (G19758 macro . mutable) (G19757 macro . fields) (G19756 macro . error-handling-mode) (G19755 macro . file-options) (G19754 macro . buffer-mode) (G19753 macro . eol-style) (G19752 macro . guard) (G19751 macro . trace-define) (G19750 macro . trace-lambda) (G19749 macro . unsyntax-splicing) (G19748 macro . unsyntax) (G19747 macro . unquote-splicing) (G19746 macro . unquote) (G19745 macro . _) (G19744 macro . else) (G19743 macro . =>) (G19742 macro . ...) (G19741 macro . assert) (G19740 macro . endianness) (G19739 macro . delay) (G19738 macro . time) (G19737 macro . or) (G19736 macro . and) (G19735 macro . do) (G19734 macro . cond) (G19733 macro . let*) (G19732 macro . let) (G19731 macro . let*-values) (G19730 macro . let-values) (G19729 macro . identifier-syntax) (G19728 macro . with-syntax) (G19727 macro . quasisyntax) (G19726 macro . quasiquote) (G19725 macro . syntax-rules) (G19724 macro . include) (G19723 macro . define-struct) (G19722 core-macro . record-constructor-descriptor) (G19721 core-macro . record-type-descriptor) (G19720 core-macro . case) (G19719 core-macro . parameterize) (G19718 core-macro . unless) (G19717 core-macro . when) (G19716 core-macro . if) (G19715 core-macro . letrec*) (G19714 core-macro . letrec) (G19713 core-macro . type-descriptor) (G19712 core-macro . case-lambda) (G19711 core-macro . lambda) (G19710 core-macro . syntax) (G19709 core-macro . syntax-case) (G19708 core-macro . quote) (G19707 core-macro . foreign-call) (G19706 letrec-syntax) (G19705 let-syntax) (G19704 set!) (G19703 import) (G19702 begin) (G19701 module) (G19700 define-syntax) (G19699 define)) values values '#f '#f '#f '#f) (G11113 'G20489 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G20400) (eval-core . G20399) (set-symbol-value! . G20398) (symbol-value . G20397) (gensym . G20396) (void . G20395)) '() values values '#f '#f '#f '#f) (G11113 'G20490 '(mosh) '() '() '() '() '((standard-library-path . G20357) (get-command-line . G20340) (sys-display . G20339) (source-info . G20338) (set-source-info! . G20337)) '() values values '#f '#f '#f '#f) (G11113 'G20491 '(mosh file) '() '() '() '() '((read-line . G20392) (current-directory . G20356) (write-to-file . G20355) (file->list . G20354) (file->string . G20353)) '() values values '#f '#f '#f '#f) (G11113 'G20492 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G20348)) '() values values '#f '#f '#f '#f) (G11113 'G20493 '(mosh number) '() '() '() '() '((digit->integer . G20352)) '() values values '#f '#f '#f '#f) (G11113 'G20494 '(mosh string) '() '() '() '() '((print . G20359) (format . G20358) (call-with-string-input-port . G20351) (call-with-string-io . G20350) (string-split . G20349) (string->regexp . G20347)) '() values values '#f '#f '#f '#f) (G11113 'G20495 '(mosh list) '() '() '() '() '((assoc-ref . G20361)) '() values values '#f '#f '#f '#f) (G11113 'G20496 '(mosh regexp) '() '() '() '() '((rxmatch . G20346) (regexp-replace-all . G20345)) '() values values '#f '#f '#f '#f) (G11113 'G20497 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G20344)) '() values values '#f '#f '#f '#f) (G11113 'G20498 '(system) '() '() '() '() '((readdir . G20343) (get-environment-variables . G20342) (get-environment-variable . G20341)) '() values values '#f '#f '#f '#f) (G11113 'G20499 '(srfi-1) '() '() '() '() '((dotted-list? . G20391) (circular-list? . G20390) (proper-list? . G20389) (circular-list . G20388) (last . G20387) (last-pair . G20386) (not-pair? . G20385) (split-at! . G20384) (split-at . G20383) (list= . G20382) (list-copy . G20381) (list-tabulate . G20380) (make-list . G20379) (xcons . G20378) (tenth . G20377) (ninth . G20376) (eighth . G20375) (seventh . G20374) (sixth . G20373) (fifth . G20372) (drop-right! . G20371) (drop-right . G20370) (take-right . G20369) (take! . G20368) (drop . G20367) (take . G20366) (car+cdr . G20365) (third . G20364) (second . G20363) (first . G20362) (alist-cons . G20360)) '() values values '#f '#f '#f '#f))
(begin (define G19685 '#f) (define G19686 '#f) (define G19687 '#f) (define G19688 '#f) (define G19689 '#f) (define G19690 '#f) (define G19691 '#f) (define G19692 '#f) (define G19693 '#f) (define G19694 '#f) (define G19695 '#f) (define G19696 '#f) (define G19697 '#f) ((lambda (G19569 G19571 G19573 G19575 G19577 G19579 G19581 G19583 G19585 G19587 G19589 G19591 G19593) (begin (set! G19569 (lambda (G19613 G19614) (letrec ((G19617 (lambda (G19619 G19620) (if (null? G19620) (if '#f '#f (void)) (begin (G19613 G19619 (car G19620)) (G19617 (+ G19619 '1) (cdr G19620))))))) (G19617 '1 G19614)))) (set! G19571 (G10444 write)) (set! G19573 (G10444 (get-command-line))) (set! G19575 (lambda (G19623) (cons '"." (G11097)))) (set! G19577 (lambda (G19625 . G19627) (begin (apply G19591 G19625 'load G19627) (void)))) (set! G19579 (lambda (G19629) (begin (apply G19591 G19629 'load (G19573)) (void)))) (set! G19581 (lambda () (G19579 '"ironscheme-buildscript.ss"))) (set! G19583 (lambda (G19631) (G18799 G19631 (G18819)))) (set! G19585 (lambda () (G19583 '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G19587 (lambda (G19633) (G19591 G19633 'compile))) (set! G19589 (lambda (G19635) (G19591 G19635 'closure))) (set! G19591 (lambda (G19637 G19638 . G19641) ((lambda (G19645 G19646) ((lambda (G19649) (dynamic-wind G19649 (lambda () ((lambda (G19651) ((lambda (G19653) (if (eqv? G19653 'closure) (G18818 G19651) (if (eqv? G19653 'load) ((lambda (G19656 G19657) ((lambda (G19660) (dynamic-wind G19660 (lambda () ((G18817 G19651))) G19660)) (lambda () ((lambda (G19662) (begin (G19656 G19657) (set! G19657 G19662))) (G19656))))) G19573 (cons G19637 (map (lambda (G19664) (format '"~a" G19664)) G19641))) (if (eqv? G19653 'compile) (begin (G18817 G19651) (G11101 G10439 G10544)) (void))))) G19638)) (with-input-from-file G19637 (lambda () ((letrec ((G19666 (lambda () ((lambda (G19668) (if (eof-object? G19668) '() (cons G19668 (G19666)))) (G10434))))) G19666)))))) G19649)) (lambda () ((lambda (G19670) (begin (G19645 G19646) (set! G19646 G19670))) (G19645))))) G11097 (G19575 G19637)))) (set! G19593 (lambda (G19672 G19673) ((lambda (G19676) (begin (format G19673 '"    ~a" (record-type-name G19676)) ((lambda (G19678) ((lambda (G19680) (if (eqv? G19680 '0) (newline) (if (eqv? G19680 '1) (begin (display '": " G19673) (write ((record-accessor G19676 '0) G19672) G19673) (newline G19673)) (begin (display '":\n") ((letrec ((G19681 (lambda (G19683) (if (= G19683 (vector-length G19678)) (void) (begin (display '"       " G19673) (display (vector-ref G19678 G19683) G19673) (display '": " G19673) (write ((record-accessor G19676 G19683) G19672) G19673) (newline G19673) (G19681 (+ G19683 '1))))))) G19681) '0))))) (vector-length G19678))) (record-type-field-names G19676)))) (record-rtd G19672)))) (begin (set! G19697 G19593) (set! G19696 G19591) (set! G19695 G19589) (set! G19694 G19587) (set! G19693 G19585) (set! G19692 G19583) (set! G19691 G19581) (set! G19690 G19579) (set! G19689 G19577) (set! G19688 G19575) (set! G19687 G19573) (set! G19686 G19571) (set! G19685 G19569) (G11102 G10440) (set-symbol-value! 'load G19579) (set-symbol-value! 'eval-r6rs G19583) (set-symbol-value! 'int-env-syms G18792) (set-symbol-value! 'expanded2core G10543) (set-symbol-value! 'trace-printer G19571) (G11097 (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G19594 G19595) (with-exception-handler (lambda (G19598) (begin (display '" Condition components:\n" G19595) (G19569 (lambda (G19600 G19601) ((lambda (G19604) (begin (format G19595 '"   ~d. ~a" G19600 (record-type-name G19604)) ((lambda (G19606) ((lambda (G19608) (if (eqv? G19608 '0) (newline) (if (eqv? G19608 '1) (begin (display '": ") (write ((record-accessor G19604 '0) G19601)) (newline)) (begin (display '":\n") ((letrec ((G19609 (lambda (G19611) (if (= G19611 (vector-length G19606)) (void) (begin (display '"       ") (display (vector-ref G19606 G19611)) (display '": ") (write ((record-accessor G19604 G19611) G19601)) (newline) (G19609 (+ G19611 '1))))))) G19609) '0))))) (vector-length G19606))) (record-type-field-names G19604)))) (record-rtd G19601))) (simple-conditions G19598)))) (lambda () (G19591 (car G19594) 'load)))) (G19573) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
