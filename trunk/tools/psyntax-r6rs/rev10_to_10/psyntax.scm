;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2628@read-annotated G262a@annotation-stripped G262c@annotation? G262e@annotation-source G2630@annotation-expression G2632@scm->fasl G2634@fasl-save G2636@fasl-load G2638@serialize-library G263a@load-serialized-library G263c@make-record-printer G263e@compile-core G2640@read-library-source-file G2642@make-parameter G26a6@file-options-spec) (begin (set! G2628@read-annotated read) (set! G262a@annotation-stripped (lambda (G26a7@x) (G2630@annotation-expression G26a7@x))) (set! G262c@annotation? (lambda (G26a9@x) (source-info G26a9@x))) (set! G262e@annotation-source (lambda (G26ab@x) (source-info G26ab@x))) (set! G2630@annotation-expression (lambda (G26ad@x) (if (pair? G26ad@x) (cons (car G26ad@x) (cdr G26ad@x)) (display '"line:46\n")))) (set! G2632@scm->fasl (lambda (G26af@filename) (string-append G26af@filename '".fasl"))) (set! G2634@fasl-save (lambda (G26b1@filename G26b2@obj) (call-with-port (open-file-output-port G26b1@filename) (lambda (G26b5@port) ((symbol-value 'fasl-write!) G26b2@obj G26b5@port))))) (set! G2636@fasl-load (lambda (G26b7@filename) (call-with-port (open-file-input-port G26b7@filename) (symbol-value 'fasl-read!)))) (set! G2638@serialize-library (lambda (G26b9@filename G26ba@obj) (begin (format '#t '"serialize-library ~a\n..." G26b9@filename) ((lambda (G26bd@expanded2core) ((lambda (G26bf@compile) ((lambda (G26c1@code) ((lambda (G26c3@pivot) ((lambda (G26c5@visit) ((lambda () (begin (set-car! G26c3@pivot G26c5@visit) ((lambda (G26c7@pivot) ((lambda (G26c9@invoke) ((lambda () (set-car! G26c7@pivot G26c9@invoke)))) (G26bf@compile (G26bd@expanded2core (car G26c7@pivot))))) (cdr G26c3@pivot)))))) (G26bf@compile (G26bd@expanded2core (car G26c3@pivot))))) (cddddr (cddddr G26c1@code)))) G26ba@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (G26cb@fasl-file) (begin (if (file-exists? G26cb@fasl-file) (delete-file G26cb@fasl-file) (void)) ((call/cc (lambda (G26cf@G26cd) (lambda () (with-exception-handler (lambda (G26d1@c) ((call/cc (lambda (G26d3@G26ce) (G26cf@G26cd (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G26b9@filename) (if (file-exists? G26cb@fasl-file) (delete-file G26cb@fasl-file) (void)) '#f) (G26d3@G26ce (lambda () (raise-continuable G26d1@c)))))))))) (lambda () (begin (G2634@fasl-save G26cb@fasl-file G26ba@obj) (display '"OK\n")))))))))) (G2632@scm->fasl G26b9@filename))))) (set! G263a@load-serialized-library (lambda (G26d5@filename G26d6@obj) ((lambda (G26d9@fasl-file) (if (and (file-exists? G26d9@fasl-file) ((symbol-value 'file-newer?) G26d9@fasl-file G26d5@filename)) ((lambda (G26db@expanded2core) ((lambda (G26dd@eval-compiled-core) ((lambda (G26df@code) ((lambda (G26e1@pivot) ((lambda (G26e3@visit) ((lambda (G26e5@visit-proc) ((lambda () (begin (set-car! G26e1@pivot G26e5@visit-proc) ((lambda (G26e7@pivot) ((lambda (G26e9@invoke) ((lambda () (begin (set-car! G26e7@pivot (lambda () (G26dd@eval-compiled-core G26e9@invoke))) (apply G26d6@obj G26df@code))))) (car G26e7@pivot))) (cdr G26e1@pivot)) '#t)))) (lambda () (G26dd@eval-compiled-core G26e3@visit)))) (car G26e1@pivot))) (cddddr (cddddr G26df@code)))) (G2636@fasl-load G26d9@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (G2632@scm->fasl G26d5@filename)))) (set! G263c@make-record-printer (lambda (G26eb@name G26ec@printer) (lambda G26ef@x (begin (display '"record printer") (for-each display G26ef@x))))) (set! G263e@compile-core (lambda G26f1@x (apply error 'comile-core '"not implementated" G26f1@x))) (set! G2640@read-library-source-file (lambda (G26f3@file-name) (with-input-from-file G26f3@file-name G2628@read-annotated))) (set! G2642@make-parameter (lambda G2703 ((lambda (G2704) (if (= G2704 '1) (apply (lambda (G26f5@x) (G2642@make-parameter G26f5@x (lambda (G26f7@x) G26f7@x))) G2703) (if (= G2704 '2) (apply (lambda (G26f9@x G26fa@fender) ((lambda (G26fd@x) (lambda G2701 ((lambda (G2702) (if (= G2702 '0) (apply (lambda () G26fd@x) G2701) (if (= G2702 '1) (apply (lambda (G26ff@v) (set! G26fd@x (G26fa@fender G26ff@v))) G2701) (error 'apply '"invalid arg count")))) (length G2701)))) (G26fa@fender G26f9@x))) G2703) (error 'apply '"invalid arg count")))) (length G2703)))) (set! G26a6@file-options-spec (lambda (G2705@x) G2705@x)) (begin (set! G2715@G26a6@file-options-spec G26a6@file-options-spec) (set! G2714@G2642@make-parameter G2642@make-parameter) (set! G2713@G2640@read-library-source-file G2640@read-library-source-file) (set! G2712@G263e@compile-core G263e@compile-core) (set! G2711@G263c@make-record-printer G263c@make-record-printer) (set! G2710@G263a@load-serialized-library G263a@load-serialized-library) (set! G270f@G2638@serialize-library G2638@serialize-library) (set! G270e@G2636@fasl-load G2636@fasl-load) (set! G270d@G2634@fasl-save G2634@fasl-save) (set! G270c@G2632@scm->fasl G2632@scm->fasl) (set! G270b@G2630@annotation-expression G2630@annotation-expression) (set! G270a@G262e@annotation-source G262e@annotation-source) (set! G2709@G262c@annotation? G262c@annotation?) (set! G2708@G262a@annotation-stripped G262a@annotation-stripped) (set! G2707@G2628@read-annotated G2628@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G271a@current-primitive-locations G271c@mutable? G271e@rewriter G2720@expanded->core G2722@compile-core-expr G2724@pretty-print G2726@compile-core-expr-to-port) (begin (set! G271a@current-primitive-locations (G2714@G2642@make-parameter (lambda (G2727@x) '#f) (lambda (G2729@p) G2729@p))) (set! G271c@mutable? (lambda (G272b@x) (or (pair? G272b@x) (vector? G272b@x) (hashtable? G272b@x)))) (set! G271e@rewriter (lambda (G272d@quote-hack?) ((lambda (G2730@f) (begin (set! G2730@f (lambda (G2731@x) (if (pair? G2731@x) ((lambda (G2733@t) (if (memv G2733@t '(quote)) (if (and G272d@quote-hack? (G271c@mutable? (cadr G2731@x))) ((lambda (G2735@g) (begin (set-symbol-value! G2735@g (cadr G2731@x)) G2735@g)) (gensym)) G2731@x) (if (memv G2733@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2737@x) (cons (car G2737@x) (map G2730@f (cdr G2737@x)))) (cdr G2731@x))) (if (memv G2733@t '(lambda)) (cons* 'lambda (cadr G2731@x) (map G2730@f (cddr G2731@x))) (if (memv G2733@t '(letrec)) ((lambda (G2739@bindings G273a@body*) ((lambda (G273d@lhs* G273e@rhs*) (cons* 'letrec (map list G273d@lhs* (map G2730@f G273e@rhs*)) (map G2730@f G273a@body*))) (map car G2739@bindings) (map cadr G2739@bindings))) (cadr G2731@x) (cddr G2731@x)) (if (memv G2733@t '(letrec*)) ((lambda (G2741@bindings G2742@body*) ((lambda (G2745@lhs* G2746@rhs*) (cons* 'letrec* (map list G2745@lhs* (map G2730@f G2746@rhs*)) (map G2730@f G2742@body*))) (map car G2741@bindings) (map cadr G2741@bindings))) (cadr G2731@x) (cddr G2731@x)) (if (memv G2733@t '(library-letrec*)) ((lambda (G2749@name G274a@x) ((lambda (G274d@bindings G274e@body*) ((lambda (G2751@lhs* G2752@lhs** G2753@rhs*) (cons* 'library-letrec* G2749@name (map list G2751@lhs* G2752@lhs** (map G2730@f G2753@rhs*)) (map G2730@f G274e@body*))) (map car G274d@bindings) (map cadr G274d@bindings) (map caddr G274d@bindings))) (cadr G274a@x) (cddr G274a@x))) (cadr G2731@x) (cdr G2731@x)) (if (memv G2733@t '(begin)) (cons 'begin (map G2730@f (cdr G2731@x))) (if (memv G2733@t '(set!)) (list 'set! (cadr G2731@x) (G2730@f (caddr G2731@x))) (if (memv G2733@t '(primitive)) ((lambda (G2757@op) ((lambda (G2759@t) (if G2759@t ((lambda (G275b@loc) G275b@loc) G2759@t) G2757@op)) ((G271a@current-primitive-locations) G2757@op))) (cadr G2731@x)) (if (memv G2733@t '(define)) G2731@x (if (list? G2731@x) (map G2730@f G2731@x) (error 'rewrite '"invalid form ~s ~s" G2731@x (list? G2731@x)))))))))))))) (car G2731@x)) G2731@x))) G2730@f)) '#f))) (set! G2720@expanded->core (lambda (G275d@x) ((G271e@rewriter '#f) G275d@x))) (set! G2722@compile-core-expr (lambda (G275f@x) ((G271e@rewriter '#f) G275f@x))) (set! G2724@pretty-print write) (set! G2726@compile-core-expr-to-port (lambda (G2761@x G2762@p) (G2724@pretty-print ((G271e@rewriter '#f) G2761@x) G2762@p))) (begin (set! G276b@G2726@compile-core-expr-to-port G2726@compile-core-expr-to-port) (set! G276a@G2724@pretty-print G2724@pretty-print) (set! G2769@G2722@compile-core-expr G2722@compile-core-expr) (set! G2768@G2720@expanded->core G2720@expanded->core) (set! G2767@G271e@rewriter G271e@rewriter) (set! G2766@G271c@mutable? G271c@mutable?) (set! G2765@G271a@current-primitive-locations G271a@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G27ba@make-collection G27bc@current-library-collection G27c2@G27bd G27c4@G27bf G27c6@G27be G27c9@library? G27cb@make-library G27cd@library-id G27cf@library-name G27d1@library-version G27d3@library-imp* G27d5@library-vis* G27d7@library-inv* G27d9@library-subst G27db@library-env G27dd@library-visit-state G27df@library-invoke-state G27e1@library-visit-code G27e3@library-invoke-code G27e5@library-visible? G27e7@library-source-file-name G27e9@set-library-id! G27eb@set-library-name! G27ed@set-library-version! G27ef@set-library-imp*! G27f1@set-library-vis*! G27f3@set-library-inv*! G27f5@set-library-subst! G27f7@set-library-env! G27f9@set-library-visit-state! G27fb@set-library-invoke-state! G27fd@set-library-visit-code! G27ff@set-library-invoke-code! G2801@set-library-visible?! G2803@set-library-source-file-name! G2805@rp G2807@find-dependencies G2809@find-library-by G280b@library-path G280d@library-extensions G280f@library-name->file-name G2811@file-locator G2813@serialize-all G2815@current-precompiled-library-loader G2817@try-load-from-file G2819@library-loader G281b@current-library-expander G281d@external-pending-libraries G281f@find-external-library G2821@find-library-by-name G2823@library-exists? G2825@find-library-by-spec/die G2827@label->binding-table G2829@install-library-record G282b@install-library G282d@imported-label->binding G282f@invoke-library G2831@visit-library G2833@invoke-library-by-spec G2835@installed-libraries G2837@library-spec) (begin (set! G27ba@make-collection (lambda () ((lambda (G2838@set) ((lambda (G283b@set-cons) (begin (set! G283b@set-cons (lambda (G2840@x G2841@ls) (if (memq G2840@x G2841@ls) G2841@ls (cons G2840@x G2841@ls)))) (lambda G283e ((lambda (G283f) (if (= G283f '0) (apply (lambda () G2838@set) G283e) (if (= G283f '1) (apply (lambda (G283c@x) (set! G2838@set (G283b@set-cons G283c@x G2838@set))) G283e) (error 'apply '"invalid arg count")))) (length G283e))))) '#f)) '()))) (set! G27bc@current-library-collection (G2714@G2642@make-parameter (G27ba@make-collection) (lambda (G2844@x) (begin (if (not (procedure? G2844@x)) (assertion-violation 'current-library-collection '"not a procedure" G2844@x) (void)) G2844@x)))) (set! G27c2@G27bd (make-record-type-descriptor 'library '#f 'G27c0 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G27c4@G27bf '#f) (set! G27c6@G27be (make-record-constructor-descriptor G27c2@G27bd '#f G27c4@G27bf)) (set! G27c9@library? (record-predicate G27c2@G27bd)) (set! G27cb@make-library (record-constructor G27c6@G27be)) (set! G27cd@library-id (record-accessor G27c2@G27bd '0)) (set! G27cf@library-name (record-accessor G27c2@G27bd '1)) (set! G27d1@library-version (record-accessor G27c2@G27bd '2)) (set! G27d3@library-imp* (record-accessor G27c2@G27bd '3)) (set! G27d5@library-vis* (record-accessor G27c2@G27bd '4)) (set! G27d7@library-inv* (record-accessor G27c2@G27bd '5)) (set! G27d9@library-subst (record-accessor G27c2@G27bd '6)) (set! G27db@library-env (record-accessor G27c2@G27bd '7)) (set! G27dd@library-visit-state (record-accessor G27c2@G27bd '8)) (set! G27df@library-invoke-state (record-accessor G27c2@G27bd '9)) (set! G27e1@library-visit-code (record-accessor G27c2@G27bd '10)) (set! G27e3@library-invoke-code (record-accessor G27c2@G27bd '11)) (set! G27e5@library-visible? (record-accessor G27c2@G27bd '12)) (set! G27e7@library-source-file-name (record-accessor G27c2@G27bd '13)) (set! G27e9@set-library-id! (record-mutator G27c2@G27bd '0)) (set! G27eb@set-library-name! (record-mutator G27c2@G27bd '1)) (set! G27ed@set-library-version! (record-mutator G27c2@G27bd '2)) (set! G27ef@set-library-imp*! (record-mutator G27c2@G27bd '3)) (set! G27f1@set-library-vis*! (record-mutator G27c2@G27bd '4)) (set! G27f3@set-library-inv*! (record-mutator G27c2@G27bd '5)) (set! G27f5@set-library-subst! (record-mutator G27c2@G27bd '6)) (set! G27f7@set-library-env! (record-mutator G27c2@G27bd '7)) (set! G27f9@set-library-visit-state! (record-mutator G27c2@G27bd '8)) (set! G27fb@set-library-invoke-state! (record-mutator G27c2@G27bd '9)) (set! G27fd@set-library-visit-code! (record-mutator G27c2@G27bd '10)) (set! G27ff@set-library-invoke-code! (record-mutator G27c2@G27bd '11)) (set! G2801@set-library-visible?! (record-mutator G27c2@G27bd '12)) (set! G2803@set-library-source-file-name! (record-mutator G27c2@G27bd '13)) (set! G2805@rp (G2711@G263c@make-record-printer 'library (lambda (G2846@x G2847@p G2848@wr) (begin (if (not (G27c9@library? G2846@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G27d1@library-version G2846@x)) (G27cf@library-name G2846@x) (append (G27cf@library-name G2846@x) (list (G27d1@library-version G2846@x))))) G2847@p))))) (set! G2807@find-dependencies (lambda (G284c@ls) (if (null? G284c@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2809@find-library-by (lambda (G284e@pred) ((letrec ((G2850@f (lambda (G2852@ls) (if (null? G2852@ls) '#f (if (G284e@pred (car G2852@ls)) (car G2852@ls) (G2850@f (cdr G2852@ls))))))) G2850@f) ((G27bc@current-library-collection))))) (set! G280b@library-path (G2714@G2642@make-parameter '(".") (lambda (G2854@x) (if (and (list? G2854@x) (for-all string? G2854@x)) (map (lambda (G2856@x) G2856@x) G2854@x) (assertion-violation 'library-path '"not a list of strings" G2854@x))))) (set! G280d@library-extensions (G2714@G2642@make-parameter '(".sls" ".ss" ".scm") (lambda (G2858@x) (if (and (list? G2858@x) (for-all string? G2858@x)) (map (lambda (G285a@x) G285a@x) G2858@x) (assertion-violation 'library-extensions '"not a list of strings" G2858@x))))) (set! G280f@library-name->file-name (lambda (G285c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2860@G285e G2861@G285f) ((lambda (G2864@extract G2865@p) ((lambda (G2869@display-hex) (begin (set! G2869@display-hex (lambda (G2872@n) (if (<= '0 G2872@n '9) (display G2872@n G2865@p) (display (integer->char (+ (char->integer '#\A) (- G2872@n '10))) G2865@p)))) (begin ((letrec ((G286a@f (lambda (G286c@ls) (if (not (null? G286c@ls)) (begin (display '"/" G2865@p) (for-each (lambda (G286e@c) (if (or (char<=? '#\a G286e@c '#\z) (char<=? '#\A G286e@c '#\Z) (char<=? '#\0 G286e@c '#\9) (memv G286e@c '(#\- #\. #\_ #\~))) (display G286e@c G2865@p) (begin (display '"%" G2865@p) ((lambda (G2870@n) (begin (G2869@display-hex (quotient G2870@n '16)) (G2869@display-hex (remainder G2870@n '16)))) (char->integer G286e@c))))) (string->list (symbol->string (car G286c@ls)))) (G286a@f (cdr G286c@ls))) (void))))) G286a@f) G285c@x) (G2864@extract)))) '#f)) G2861@G285f G2860@G285e))))) (set! G2811@file-locator (G2714@G2642@make-parameter (lambda (G2874@x) ((lambda (G2876@str) ((letrec ((G2878@f (lambda (G287a@ls G287b@exts G287c@failed-list) (if (null? G287a@ls) ((lambda () ((lambda (G2888@G2883 G288a@G2885 G288c@G2884 G288f@G2882 G2891@make-library-resolution-condition G2893@G2880 G2895@G2881 G2897@library-resolution-condition? G2899@condition-library G289b@condition-files) (begin (set! G2888@G2883 (make-record-type-descriptor '&library-resolution G49ec@G473f@&condition-rtd 'G2886 '#f '#f '#((immutable library) (immutable files)))) (set! G288a@G2885 '#f) (set! G288c@G2884 (make-record-constructor-descriptor G2888@G2883 G49ed@G4741@&condition-rcd G288a@G2885)) (set! G288f@G2882 (record-predicate G2888@G2883)) (set! G2891@make-library-resolution-condition (record-constructor G288c@G2884)) (set! G2893@G2880 (record-accessor G2888@G2883 '0)) (set! G2895@G2881 (record-accessor G2888@G2883 '1)) (set! G2897@library-resolution-condition? (condition-predicate G2888@G2883)) (set! G2899@condition-library (condition-accessor G2888@G2883 G2893@G2880)) (set! G289b@condition-files (condition-accessor G2888@G2883 G2895@G2881)) (raise (condition (G4a0c@G47d5@make-error) (G4a2e@G482f@make-who-condition 'expander) (G49f2@G4792@make-message-condition '"cannot locate library in library-path") (G2891@make-library-resolution-condition G2874@x (reverse G287c@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G287b@exts) (G2878@f (cdr G287a@ls) (G280d@library-extensions) G287c@failed-list) ((lambda (G289c@name) (if (file-exists? G289c@name) G289c@name (G2878@f G287a@ls (cdr G287b@exts) (cons G289c@name G287c@failed-list)))) (string-append (car G287a@ls) G2876@str (car G287b@exts)))))))) G2878@f) (G280b@library-path) (G280d@library-extensions) '())) (G280f@library-name->file-name G2874@x))) (lambda (G289e@f) (if (procedure? G289e@f) G289e@f (assertion-violation 'file-locator '"not a procedure" G289e@f))))) (set! G2813@serialize-all (lambda (G28a0@serialize G28a1@compile) ((lambda (G28a5@library-desc) (begin (set! G28a5@library-desc (lambda (G28a8@x) (list (G27cd@library-id G28a8@x) (G27cf@library-name G28a8@x)))) (for-each (lambda (G28a6@x) (if (G27e7@library-source-file-name G28a6@x) (G28a0@serialize (G27e7@library-source-file-name G28a6@x) (list (G27cd@library-id G28a6@x) (G27cf@library-name G28a6@x) (G27d1@library-version G28a6@x) (map G28a5@library-desc (G27d3@library-imp* G28a6@x)) (map G28a5@library-desc (G27d5@library-vis* G28a6@x)) (map G28a5@library-desc (G27d7@library-inv* G28a6@x)) (G27d9@library-subst G28a6@x) (G27db@library-env G28a6@x) (G28a1@compile (G27e1@library-visit-code G28a6@x)) (G28a1@compile (G27e3@library-invoke-code G28a6@x)) (G27e5@library-visible? G28a6@x))) (void))) ((G27bc@current-library-collection))))) '#f))) (set! G2815@current-precompiled-library-loader (G2714@G2642@make-parameter (lambda (G28aa@filename G28ab@sk) '#f))) (set! G2817@try-load-from-file (lambda (G28ae@filename) ((G2815@current-precompiled-library-loader) G28ae@filename (lambda G28d4 ((lambda (G28d5) (if (= G28d5 '11) (apply (lambda (G28b0@id G28b1@name G28b2@ver G28b3@imp* G28b4@vis* G28b5@inv* G28b6@exp-subst G28b7@exp-env G28b8@visit-proc G28b9@invoke-proc G28ba@visible?) ((letrec ((G28c6@f (lambda (G28c8@deps) (if (null? G28c8@deps) (begin (G282b@install-library G28b0@id G28b1@name G28b2@ver G28b3@imp* G28b4@vis* G28b5@inv* G28b6@exp-subst G28b7@exp-env G28b8@visit-proc G28b9@invoke-proc '#f '#f G28ba@visible? '#f) '#t) ((lambda (G28ca@d) ((lambda (G28cc@label G28cd@dname) ((lambda (G28d0@l) (if (and (G27c9@library? G28d0@l) (eq? G28cc@label (G27cd@library-id G28d0@l))) (G28c6@f (cdr G28c8@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G28b1@name G28cd@dname G28ae@filename G28d0@l G28cc@label (G27cd@library-id G28d0@l)) '#f))) (G2821@find-library-by-name G28cd@dname))) (car G28ca@d) (cadr G28ca@d))) (car G28c8@deps)))))) G28c6@f) (append G28b3@imp* G28b4@vis* G28b5@inv*))) G28d4) (if (>= G28d5 '0) (apply (lambda G28d2@others '#f) G28d4) (error 'apply '"invalid arg count")))) (length G28d4)))))) (set! G2819@library-loader (G2714@G2642@make-parameter (lambda (G28d6@x) ((lambda (G28d8@file-name) (if (not G28d8@file-name) (assertion-violation '#f '"cannot file library" G28d6@x) (or (G2817@try-load-from-file G28d8@file-name) ((G281b@current-library-expander) (G2713@G2640@read-library-source-file G28d8@file-name) G28d8@file-name (lambda (G28da@name) (if (not (fast-equal? G28da@name G28d6@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G28de@G28dc G28df@G28dd) ((lambda (G28e2@e G28e3@p) (begin (display '"expected to find library " G28e3@p) (write G28d6@x G28e3@p) (display '" in file " G28e3@p) (display G28d8@file-name G28e3@p) (display '", found " G28e3@p) (write G28da@name G28e3@p) (display '" instead" G28e3@p) (G28e2@e))) G28df@G28dd G28de@G28dc)))) (void))))))) ((G2811@file-locator) G28d6@x))) (lambda (G28e6@f) (if (procedure? G28e6@f) G28e6@f (assertion-violation 'library-locator '"not a procedure" G28e6@f))))) (set! G281b@current-library-expander (G2714@G2642@make-parameter (lambda (G28e8@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G28ea@f) (if (procedure? G28ea@f) G28ea@f (assertion-violation 'library-expander '"not a procedure" G28ea@f))))) (set! G281d@external-pending-libraries (G2714@G2642@make-parameter '())) (set! G281f@find-external-library (lambda (G28ec@name) (begin (if (member G28ec@name (G281d@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G28ec@name) (void)) ((lambda (G28f0@G28ee G28f1@G28ef) ((lambda (G28f4@swap) (dynamic-wind G28f4@swap (lambda () (begin ((G2819@library-loader) G28ec@name) (or (G2809@find-library-by (lambda (G28f6@x) (fast-equal? (G27cf@library-name G28f6@x) G28ec@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G28ec@name)))) G28f4@swap)) (lambda () ((lambda (G28f8@t) (begin (G28f0@G28ee G28f1@G28ef) (set! G28f1@G28ef G28f8@t))) (G28f0@G28ee))))) G281d@external-pending-libraries (cons G28ec@name (G281d@external-pending-libraries)))))) (set! G2821@find-library-by-name (lambda (G28fa@name) (or (G2809@find-library-by (lambda (G28fc@x) (fast-equal? (G27cf@library-name G28fc@x) G28fa@name))) (G281f@find-external-library G28fa@name)))) (set! G2823@library-exists? (lambda (G28fe@name) (and (G2809@find-library-by (lambda (G2900@x) (fast-equal? (G27cf@library-name G2900@x) G28fe@name))) '#t))) (set! G2825@find-library-by-spec/die (lambda (G2902@spec) ((lambda (G2904@id) (or (G2809@find-library-by (lambda (G2906@x) (eq? G2904@id (G27cd@library-id G2906@x)))) (assertion-violation '#f '"cannot find library with required spec" G2902@spec))) (car G2902@spec)))) (set! G2827@label->binding-table (make-eq-hashtable)) (set! G2829@install-library-record (lambda (G2908@lib) (begin ((lambda (G290a@exp-env) (for-each (lambda (G290c@x) ((lambda (G290e@label G290f@binding) ((lambda (G2912@binding) (hashtable-set! G2827@label->binding-table G290e@label G2912@binding)) ((lambda (G2914@t) (if (memv G2914@t '(global)) (cons 'global (cons G2908@lib (cdr G290f@binding))) (if (memv G2914@t '(global-macro)) (cons 'global-macro (cons G2908@lib (cdr G290f@binding))) (if (memv G2914@t '(global-macro!)) (cons 'global-macro! (cons G2908@lib (cdr G290f@binding))) G290f@binding)))) (car G290f@binding)))) (car G290c@x) (cdr G290c@x))) G290a@exp-env)) (G27db@library-env G2908@lib)) ((G27bc@current-library-collection) G2908@lib)))) (set! G282b@install-library (lambda (G2916@id G2917@name G2918@ver G2919@imp* G291a@vis* G291b@inv* G291c@exp-subst G291d@exp-env G291e@visit-proc G291f@invoke-proc G2920@visit-code G2921@invoke-code G2922@visible? G2923@source-file-name) ((lambda (G2932@imp-lib* G2933@vis-lib* G2934@inv-lib*) (begin (if (not (and (symbol? G2916@id) (list? G2917@name) (list? G2918@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2916@id G2917@name G2918@ver) (void)) (if (G2823@library-exists? G2917@name) (assertion-violation 'install-library '"library is already installed" G2917@name) (void)) ((lambda (G2938@lib) (G2829@install-library-record G2938@lib)) (G27cb@make-library G2916@id G2917@name G2918@ver G2932@imp-lib* G2933@vis-lib* G2934@inv-lib* G291c@exp-subst G291d@exp-env G291e@visit-proc G291f@invoke-proc G2920@visit-code G2921@invoke-code G2922@visible? G2923@source-file-name)))) (map G2825@find-library-by-spec/die G2919@imp*) (map G2825@find-library-by-spec/die G291a@vis*) (map G2825@find-library-by-spec/die G291b@inv*)))) (set! G282d@imported-label->binding (lambda (G293a@lab) (hashtable-ref G2827@label->binding-table G293a@lab '#f))) (set! G282f@invoke-library (lambda (G293c@lib) ((lambda (G293e@invoke) (if (procedure? G293e@invoke) (begin (G27fb@set-library-invoke-state! G293c@lib (lambda () (assertion-violation 'invoke '"circularity detected" G293c@lib))) (for-each G282f@invoke-library (G27d7@library-inv* G293c@lib)) (G27fb@set-library-invoke-state! G293c@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G293c@lib))) (G293e@invoke) (G27fb@set-library-invoke-state! G293c@lib '#t)) (void))) (G27df@library-invoke-state G293c@lib)))) (set! G2831@visit-library (lambda (G2940@lib) ((lambda (G2942@visit) (if (procedure? G2942@visit) (begin (G27f9@set-library-visit-state! G2940@lib (lambda () (assertion-violation 'visit '"circularity detected" G2940@lib))) (for-each G282f@invoke-library (G27d5@library-vis* G2940@lib)) (G27f9@set-library-visit-state! G2940@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2940@lib))) (G2942@visit) (G27f9@set-library-visit-state! G2940@lib '#t)) (void))) (G27dd@library-visit-state G2940@lib)))) (set! G2833@invoke-library-by-spec (lambda (G2944@spec) (G282f@invoke-library (G2825@find-library-by-spec/die G2944@spec)))) (set! G2835@installed-libraries (lambda G294c ((lambda (G294d) (if (= G294d '1) (apply (lambda (G2946@all?) ((letrec ((G2948@f (lambda (G294a@ls) (if (null? G294a@ls) '() (if (or G2946@all? (G27e5@library-visible? (car G294a@ls))) (cons (car G294a@ls) (G2948@f (cdr G294a@ls))) (G2948@f (cdr G294a@ls))))))) G2948@f) ((G27bc@current-library-collection)))) G294c) (if (= G294d '0) (apply (lambda () (G2835@installed-libraries '#f)) G294c) (error 'apply '"invalid arg count")))) (length G294c)))) (set! G2837@library-spec (lambda (G294e@x) (begin (if (not (G27c9@library? G294e@x)) (assertion-violation 'library-spec '"not a library" G294e@x) (void)) (list (G27cd@library-id G294e@x) (G27cf@library-name G294e@x) (G27d1@library-version G294e@x))))) (begin (set! G298c@G2837@library-spec G2837@library-spec) (set! G298b@G2835@installed-libraries G2835@installed-libraries) (set! G298a@G2833@invoke-library-by-spec G2833@invoke-library-by-spec) (set! G2989@G2831@visit-library G2831@visit-library) (set! G2988@G282f@invoke-library G282f@invoke-library) (set! G2987@G282d@imported-label->binding G282d@imported-label->binding) (set! G2986@G282b@install-library G282b@install-library) (set! G2985@G2829@install-library-record G2829@install-library-record) (set! G2984@G2827@label->binding-table G2827@label->binding-table) (set! G2983@G2825@find-library-by-spec/die G2825@find-library-by-spec/die) (set! G2982@G2823@library-exists? G2823@library-exists?) (set! G2981@G2821@find-library-by-name G2821@find-library-by-name) (set! G2980@G281f@find-external-library G281f@find-external-library) (set! G297f@G281d@external-pending-libraries G281d@external-pending-libraries) (set! G297e@G281b@current-library-expander G281b@current-library-expander) (set! G297d@G2819@library-loader G2819@library-loader) (set! G297c@G2817@try-load-from-file G2817@try-load-from-file) (set! G297b@G2815@current-precompiled-library-loader G2815@current-precompiled-library-loader) (set! G297a@G2813@serialize-all G2813@serialize-all) (set! G2979@G2811@file-locator G2811@file-locator) (set! G2978@G280f@library-name->file-name G280f@library-name->file-name) (set! G2977@G280d@library-extensions G280d@library-extensions) (set! G2976@G280b@library-path G280b@library-path) (set! G2975@G2809@find-library-by G2809@find-library-by) (set! G2974@G2807@find-dependencies G2807@find-dependencies) (set! G2973@G2805@rp G2805@rp) (set! G2972@G2803@set-library-source-file-name! G2803@set-library-source-file-name!) (set! G2971@G2801@set-library-visible?! G2801@set-library-visible?!) (set! G2970@G27ff@set-library-invoke-code! G27ff@set-library-invoke-code!) (set! G296f@G27fd@set-library-visit-code! G27fd@set-library-visit-code!) (set! G296e@G27fb@set-library-invoke-state! G27fb@set-library-invoke-state!) (set! G296d@G27f9@set-library-visit-state! G27f9@set-library-visit-state!) (set! G296c@G27f7@set-library-env! G27f7@set-library-env!) (set! G296b@G27f5@set-library-subst! G27f5@set-library-subst!) (set! G296a@G27f3@set-library-inv*! G27f3@set-library-inv*!) (set! G2969@G27f1@set-library-vis*! G27f1@set-library-vis*!) (set! G2968@G27ef@set-library-imp*! G27ef@set-library-imp*!) (set! G2967@G27ed@set-library-version! G27ed@set-library-version!) (set! G2966@G27eb@set-library-name! G27eb@set-library-name!) (set! G2965@G27e9@set-library-id! G27e9@set-library-id!) (set! G2964@G27e7@library-source-file-name G27e7@library-source-file-name) (set! G2963@G27e5@library-visible? G27e5@library-visible?) (set! G2962@G27e3@library-invoke-code G27e3@library-invoke-code) (set! G2961@G27e1@library-visit-code G27e1@library-visit-code) (set! G2960@G27df@library-invoke-state G27df@library-invoke-state) (set! G295f@G27dd@library-visit-state G27dd@library-visit-state) (set! G295e@G27db@library-env G27db@library-env) (set! G295d@G27d9@library-subst G27d9@library-subst) (set! G295c@G27d7@library-inv* G27d7@library-inv*) (set! G295b@G27d5@library-vis* G27d5@library-vis*) (set! G295a@G27d3@library-imp* G27d3@library-imp*) (set! G2959@G27d1@library-version G27d1@library-version) (set! G2958@G27cf@library-name G27cf@library-name) (set! G2957@G27cd@library-id G27cd@library-id) (set! G2956@G27cb@make-library G27cb@make-library) (set! G2955@G27c9@library? G27c9@library?) (set! G2954@G27c6@G27be G27c6@G27be) (set! G2953@G27c4@G27bf G27c4@G27bf) (set! G2952@G27c2@G27bd G27c2@G27bd) (set! G2951@G27bc@current-library-collection G27bc@current-library-collection) (set! G2950@G27ba@make-collection G27ba@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G298f@build-global-define G2a00@build-lambda G2a02@build-case-lambda G2a04@build-let G2a32@build-sequence G2a34@build-void G2a36@build-letrec G2a38@build-letrec* G2a3a@build-library-letrec* G2a3c@build-receive) (begin (set! G298f@build-global-define (lambda (G2a3d@x) (G2a34@build-void))) (set! G2a00@build-lambda (lambda (G2a3f@ae G2a40@vars G2a41@exp) (list 'lambda G2a40@vars G2a41@exp))) (set! G2a02@build-case-lambda (lambda (G2a45@ae G2a46@vars* G2a47@exp*) ((lambda (G2a4c@build-error G2a4e@build-pred G2a50@build-apply G2a52@expand-case-lambda) (begin (set! G2a4c@build-error (lambda (G2a81@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2a4e@build-pred (lambda (G2a6b@ae G2a6c@n G2a6d@vars) (call-with-values (lambda () ((letrec ((G2a73@f (lambda (G2a75@vars G2a76@count) (if (pair? G2a75@vars) (G2a73@f (cdr G2a75@vars) (+ G2a76@count '1)) (if (null? G2a75@vars) (values G2a76@count '=) (values G2a76@count '>=)))))) G2a73@f) G2a6d@vars '0)) (lambda (G2a79@G2a71 G2a7a@G2a72) ((lambda (G2a7d@pred G2a7e@count) (list (list 'primitive G2a7d@pred) G2a6c@n (list 'quote G2a7e@count))) G2a7a@G2a72 G2a79@G2a71))))) (set! G2a50@build-apply (lambda (G2a63@ae G2a64@g G2a65@vars G2a66@exp) (list '(primitive apply) (G2a00@build-lambda G2a63@ae G2a65@vars G2a66@exp) G2a64@g))) (set! G2a52@expand-case-lambda (lambda (G2a53@ae G2a54@vars G2a55@exp*) ((lambda (G2a59@g G2a5a@n) (list 'lambda G2a59@g (G2a04@build-let G2a53@ae (list G2a5a@n) (list (list '(primitive length) G2a59@g)) ((letrec ((G2a5d@f (lambda (G2a5f@vars* G2a60@exp*) (if (null? G2a5f@vars*) (G2a4c@build-error G2a53@ae) (list 'if (G2a4e@build-pred G2a53@ae G2a5a@n (car G2a5f@vars*)) (G2a50@build-apply G2a53@ae G2a59@g (car G2a5f@vars*) (car G2a60@exp*)) (G2a5d@f (cdr G2a5f@vars*) (cdr G2a60@exp*))))))) G2a5d@f) G2a46@vars* G2a55@exp*)))) (gensym) (gensym)))) (if (= (length G2a47@exp*) '1) (G2a00@build-lambda G2a45@ae (car G2a46@vars*) (car G2a47@exp*)) (G2a52@expand-case-lambda G2a45@ae G2a46@vars* G2a47@exp*)))) '#f '#f '#f '#f))) (set! G2a04@build-let (lambda (G2a83@ae G2a84@lhs* G2a85@rhs* G2a86@body) (cons (G2a00@build-lambda G2a83@ae G2a84@lhs* G2a86@body) G2a85@rhs*))) (set! G2a32@build-sequence (lambda (G2a8b@ae G2a8c@exps) ((letrec ((G2a8f@loop (lambda (G2a91@exps) (if (null? (cdr G2a91@exps)) (car G2a91@exps) (if (equal? (car G2a91@exps) (G2a34@build-void)) (G2a8f@loop (cdr G2a91@exps)) (cons 'begin G2a91@exps)))))) G2a8f@loop) G2a8c@exps))) (set! G2a34@build-void (lambda () '((primitive void)))) (set! G2a36@build-letrec (lambda (G2a93@ae G2a94@vars G2a95@val-exps G2a96@body-exp) (if (null? G2a94@vars) G2a96@body-exp (list 'letrec (map list G2a94@vars G2a95@val-exps) G2a96@body-exp)))) (set! G2a38@build-letrec* (lambda (G2a9b@ae G2a9c@vars G2a9d@val-exps G2a9e@body-exp) (if (null? G2a9c@vars) G2a9e@body-exp (G2a04@build-let G2a9b@ae G2a9c@vars (map (lambda (G2aa3@x) (list 'quote '#f)) G2a9c@vars) (G2a32@build-sequence G2a9b@ae (append (map (lambda (G2aa5@lhs G2aa6@rhs) (list 'set! G2aa5@lhs G2aa6@rhs)) G2a9c@vars G2a9d@val-exps) (list G2a9e@body-exp))))))) (set! G2a3a@build-library-letrec* (lambda (G2aa9@ae G2aaa@name G2aab@vars G2aac@locs G2aad@val-exps G2aae@body-exp) (list 'library-letrec* G2aaa@name (map list G2aab@vars G2aac@locs G2aad@val-exps) G2aae@body-exp))) (set! G2a3c@build-receive (lambda (G2ab5@ae G2ab6@vars G2ab7@producer G2ab8@body*) (begin (display '"************** in ") (cons 'receive (cons G2ab6@vars (cons G2ab7@producer G2ab8@body*)))))) (begin (set! G2ac6@G2a3c@build-receive G2a3c@build-receive) (set! G2ac5@G2a3a@build-library-letrec* G2a3a@build-library-letrec*) (set! G2ac4@G2a38@build-letrec* G2a38@build-letrec*) (set! G2ac3@G2a36@build-letrec G2a36@build-letrec) (set! G2ac2@G2a34@build-void G2a34@build-void) (set! G2ac1@G2a32@build-sequence G2a32@build-sequence) (set! G2ac0@G2a04@build-let G2a04@build-let) (set! G2abf@G2a02@build-case-lambda G2a02@build-case-lambda) (set! G2abe@G2a00@build-lambda G2a00@build-lambda) (set! G2abd@G298f@build-global-define G298f@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2ad5@set-cons G2ad7@set-union G2adc@top-mark* G2ade@top-marked? G2ae0@gen-lexical G2ae2@gen-global G2ae4@gen-label G2ae6@gen-top-level-label G2ae8@gen-define-label+loc G2aea@gen-define-label G2af0@G2aeb G2af2@G2aed G2af4@G2aec G2af7@rib? G2af9@make-rib G2afb@rib-sym* G2afd@rib-mark** G2aff@rib-label* G2b01@rib-sealed/freq G2b03@rib-cache G2b05@set-rib-sym*! G2b07@set-rib-mark**! G2b09@set-rib-label*! G2b0b@set-rib-sealed/freq! G2b0d@set-rib-cache! G2b0f@make-empty-rib G2b11@extend-rib! G2b13@extend-rib/nc! G2b15@make-rib-map G2b17@seal-rib! G2b19@unseal-rib! G2b1b@make-full-rib G2b21@G2b1c G2b23@G2b1e G2b25@G2b1d G2b28@stx? G2b2a@make-stx G2b2c@stx-expr G2b2e@stx-mark* G2b30@stx-subst* G2b32@stx-ae* G2b34@set-stx-expr! G2b36@set-stx-mark*! G2b38@set-stx-subst*! G2b3a@set-stx-ae*! G2b3c@rp G2b3e@datum->stx G2b40@gen-mark G2b42@anti-mark G2b44@anti-mark? G2b46@join-wraps G2b48@mkstx G2b4a@add-mark G2b4c@add-subst G2b4e@syntax-kind? G2b50@syntax-vector->list G2b52@syntax-pair? G2b54@syntax-vector? G2b56@syntax-null? G2b58@syntax-list? G2b5a@syntax-car G2b5c@syntax-cdr G2b5e@syntax->list G2b60@id? G2b62@id->sym G2b64@same-marks? G2b66@bound-id=? G2b68@free-id=? G2b6a@valid-bound-ids? G2b6c@distinct-bound-ids? G2b6e@bound-id-member? G2b70@self-evaluating? G2b72@strip-annotations G2b74@strip G2b76@stx->datum G2b78@same-marks*? G2b7a@id->label G2b7c@id->real-label G2b7e@label->binding G2b80@make-binding G2b82@binding-type G2b84@binding-value G2b86@raise-unbound-error G2b88@syntax-type G2b96@sanitize-binding G2b98@make-variable-transformer G2b9a@variable-transformer? G2b9c@variable-transformer-procedure G2b9e@make-eval-transformer G2cd5@parse-define G2cd7@parse-define-syntax G2cd9@scheme-stx-hashtable G2cdb@scheme-stx G2cdd@lexical-var G2cdf@lexical-mutable? G2ce1@set-lexical-mutable! G2ce3@add-lexical G2ce5@add-lexicals G2ce7@letrec-helper G2ce9@letrec-transformer G2ceb@letrec*-transformer G2ced@fluid-let-syntax-transformer G2cef@type-descriptor-transformer G2cf1@record-type-descriptor-transformer G2cf3@record-constructor-descriptor-transformer G2cf5@when-macro G2cf7@unless-macro G2cf9@if-transformer G2cfb@and-transformer G2cfd@or-transformer G2cff@case-macro G2d01@quote-transformer G2d03@case-lambda-transformer G2d05@lambda-transformer G2d07@bless G2d09@with-syntax-macro G2d0b@invalid-fmls-error G2d0d@let-macro G2d0f@let-values-macro G2d11@let*-values-macro G2d13@trace-lambda-macro G2d15@trace-define-macro G2d17@trace-define-syntax-macro G2d19@trace-let/rec-syntax G2d1b@trace-let-syntax-macro G2d1d@trace-letrec-syntax-macro G2d1f@guard-macro G2d21@define-enumeration-macro G2d23@time-macro G2d25@delay-macro G2d27@assert-macro G2d29@endianness-macro G2d2b@identifier-syntax-macro G2d2d@do-macro G2d2f@let*-macro G2d31@or-macro G2d33@and-macro G2d35@cond-macro G2d37@do-include G2d39@include-macro G2d3b@include-into-macro G2d3d@syntax-rules-macro G2d3f@quasiquote-macro G2d41@quasisyntax-macro G2d43@define-struct-macro G2d45@define-record-type-macro G2d47@define-condition-type-macro G2d49@incorrect-usage-macro G2d4b@parameterize-macro G2d4d@foreign-call-transformer G2d4f@convert-pattern G2d51@syntax-dispatch G2d53@ellipsis? G2d55@underscore? G2d57@verify-literals G2d59@syntax-case-transformer G2d5b@ellipsis-map G2d5d@syntax-transformer G2d5f@core-macro-transformer G2d61@file-options-macro G2d63@symbol-macro G2d65@macro-transformer G2d67@local-macro-transformer G2d69@do-macro-call G2d6b@chi-macro G2d6d@chi-local-macro G2d6f@chi-global-macro G2d71@chi-expr* G2d73@chi-application G2d75@chi-expr G2d77@chi-set! G2d79@verify-formals G2d7b@chi-lambda-clause G2d7d@chi-lambda-clause* G2d7f@chi-defun G2d81@chi-rhs G2d83@expand-interaction-rhs*/init* G2d85@chi-rhs* G2d87@find-bound=? G2d89@find-dups G2d8b@chi-internal G2d8d@parse-module G2d93@G2d8e G2d95@G2d90 G2d97@G2d8f G2d9a@module-interface? G2d9c@make-module-interface G2d9e@module-interface-first-mark G2da0@module-interface-exp-id-vec G2da2@module-interface-exp-lab-vec G2da4@set-module-interface-first-mark! G2da6@set-module-interface-exp-id-vec! G2da8@set-module-interface-exp-lab-vec! G2daa@module-interface-exp-id* G2dac@chi-internal-module G2dae@chi-body* G2db0@expand-transformer G2db2@parse-exports G2db4@parse-library-name G2db6@parse-library G2db8@parse-import-spec* G2dba@make-top-rib G2dbc@make-collector G2dbe@inv-collector G2dc0@vis-collector G2dc2@imp-collector G2dc4@chi-library-internal G2dc6@chi-interaction-expr G2dc8@library-body-expander G2dca@core-library-expander G2dcc@parse-top-level-program G2dce@top-level-expander G2dd4@G2dcf G2dd6@G2dd1 G2dd8@G2dd0 G2ddb@env? G2ddd@make-env G2ddf@env-names G2de1@env-labels G2de3@env-itc G2de5@set-env-names! G2de7@set-env-labels! G2de9@set-env-itc! G2deb@rp G2df1@G2dec G2df3@G2dee G2df5@G2ded G2df8@interaction-env? G2dfa@make-interaction-env G2dfc@interaction-env-rib G2dfe@interaction-env-r G2e00@interaction-env-locs G2e02@set-interaction-env-rib! G2e04@set-interaction-env-r! G2e06@set-interaction-env-locs! G2e08@rp G2e0a@interaction-environment-symbols G2e0c@environment-bindings G2e0e@parse-binding G2e10@environment? G2e12@environment-symbols G2e14@environment G2e16@null-environment G2e18@scheme-report-environment G2e1a@expand G2e1c@eval G2e1e@library-expander G2e20@boot-library-expand G2e22@rev-map-append G2e24@build-exports G2e26@make-export-subst G2e28@make-export-env/macros G2e2a@generate-temporaries G2e2c@free-identifier=? G2e2e@bound-identifier=? G2e30@make-source-condition G2e32@extract-position-condition G2e34@expression-position G2e36@assertion-error G2e38@syntax-error G2e3a@syntax-violation* G2e3c@syntax-violation G2e3e@identifier? G2e40@datum->syntax G2e42@syntax->datum G2e44@compile-r6rs-top-level G2e46@pre-compile-r6rs-top-level G2e48@interaction-environment G2e4a@top-level-context) (begin (set! G2ad5@set-cons (lambda (G2e4b@x G2e4c@ls) (if (memq G2e4b@x G2e4c@ls) G2e4c@ls (cons G2e4b@x G2e4c@ls)))) (set! G2ad7@set-union (lambda (G2e4f@ls1 G2e50@ls2) (if (null? G2e4f@ls1) G2e50@ls2 (if (memq (car G2e4f@ls1) G2e50@ls2) (G2ad7@set-union (cdr G2e4f@ls1) G2e50@ls2) (cons (car G2e4f@ls1) (G2ad7@set-union (cdr G2e4f@ls1) G2e50@ls2)))))) (set! G2adc@top-mark* '(top)) (set! G2ade@top-marked? (lambda (G2e53@m*) (memq 'top G2e53@m*))) (set! G2ae0@gen-lexical (lambda (G2e55@sym) (if (symbol? G2e55@sym) (gensym G2e55@sym) (if (G2b28@stx? G2e55@sym) (G2ae0@gen-lexical (G2b62@id->sym G2e55@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G2e55@sym))))) (set! G2ae2@gen-global (lambda (G2e57@x) (G2ae0@gen-lexical G2e57@x))) (set! G2ae4@gen-label (lambda (G2e59@_) (gensym))) (set! G2ae6@gen-top-level-label (lambda (G2e5b@id G2e5c@rib) ((lambda (G2e60@find) (begin (set! G2e60@find (lambda (G2e6b@sym G2e6c@mark* G2e6d@sym* G2e6e@mark** G2e6f@label*) (and (pair? G2e6d@sym*) (if (and (eq? G2e6b@sym (car G2e6d@sym*)) (G2b64@same-marks? G2e6c@mark* (car G2e6e@mark**))) (car G2e6f@label*) (G2e60@find G2e6b@sym G2e6c@mark* (cdr G2e6d@sym*) (cdr G2e6e@mark**) (cdr G2e6f@label*)))))) ((lambda (G2e61@sym G2e62@mark*) ((lambda (G2e65@sym*) ((lambda (G2e67@t) (if G2e67@t ((lambda (G2e69@label) (if (G2987@G282d@imported-label->binding G2e69@label) (gensym) G2e69@label)) G2e67@t) (gensym))) (and (memq G2e61@sym (G2afb@rib-sym* G2e5c@rib)) (G2e60@find G2e61@sym G2e62@mark* G2e65@sym* (G2afd@rib-mark** G2e5c@rib) (G2aff@rib-label* G2e5c@rib))))) (G2afb@rib-sym* G2e5c@rib))) (G2b62@id->sym G2e5b@id) (G2b2e@stx-mark* G2e5b@id)))) '#f))) (set! G2ae8@gen-define-label+loc (lambda (G2e75@id G2e76@rib) ((lambda (G2e79@t) (if G2e79@t ((lambda (G2e7b@env) ((lambda (G2e7d@label G2e7e@locs) (values G2e7d@label ((lambda (G2e81@t) (if G2e81@t (cdr G2e81@t) ((lambda (G2e83@loc) (begin (G2e06@set-interaction-env-locs! G2e7b@env (cons (cons G2e7d@label G2e83@loc) G2e7e@locs)) G2e83@loc)) (G2ae0@gen-lexical G2e75@id)))) (assq G2e7d@label G2e7e@locs)))) (G2ae6@gen-top-level-label G2e75@id G2e76@rib) (G2e00@interaction-env-locs G2e7b@env))) G2e79@t) (values (gensym) (G2ae0@gen-lexical G2e75@id)))) (G2e4a@top-level-context)))) (set! G2aea@gen-define-label (lambda (G2e85@id G2e86@rib) (if (G2e4a@top-level-context) (G2ae6@gen-top-level-label G2e85@id G2e86@rib) (gensym)))) (set! G2af0@G2aeb (make-record-type-descriptor 'rib '#f 'G2aee '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2af2@G2aed '#f) (set! G2af4@G2aec (make-record-constructor-descriptor G2af0@G2aeb '#f G2af2@G2aed)) (set! G2af7@rib? (record-predicate G2af0@G2aeb)) (set! G2af9@make-rib (record-constructor G2af4@G2aec)) (set! G2afb@rib-sym* (record-accessor G2af0@G2aeb '0)) (set! G2afd@rib-mark** (record-accessor G2af0@G2aeb '1)) (set! G2aff@rib-label* (record-accessor G2af0@G2aeb '2)) (set! G2b01@rib-sealed/freq (record-accessor G2af0@G2aeb '3)) (set! G2b03@rib-cache (record-accessor G2af0@G2aeb '4)) (set! G2b05@set-rib-sym*! (record-mutator G2af0@G2aeb '0)) (set! G2b07@set-rib-mark**! (record-mutator G2af0@G2aeb '1)) (set! G2b09@set-rib-label*! (record-mutator G2af0@G2aeb '2)) (set! G2b0b@set-rib-sealed/freq! (record-mutator G2af0@G2aeb '3)) (set! G2b0d@set-rib-cache! (record-mutator G2af0@G2aeb '4)) (set! G2b0f@make-empty-rib (lambda () (G2af9@make-rib '() '() '() '#f '#f))) (set! G2b11@extend-rib! (lambda (G2e89@rib G2e8a@id G2e8b@label) ((lambda (G2e90@find) (begin (set! G2e90@find (lambda (G2e9d@sym G2e9e@mark* G2e9f@sym* G2ea0@mark** G2ea1@label*) (and (pair? G2e9f@sym*) (if (and (eq? G2e9d@sym (car G2e9f@sym*)) (G2b64@same-marks? G2e9e@mark* (car G2ea0@mark**))) G2ea1@label* (G2e90@find G2e9d@sym G2e9e@mark* (cdr G2e9f@sym*) (cdr G2ea0@mark**) (cdr G2ea1@label*)))))) (begin (if (G2b01@rib-sealed/freq G2e89@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G2e89@rib) (void)) ((lambda (G2e91@sym G2e92@mark*) ((lambda (G2e95@sym*) ((lambda (G2e97@t) (if G2e97@t ((lambda (G2e99@p) (if (not (eq? G2e8b@label (car G2e99@p))) (if (G2e4a@top-level-context) (set-car! G2e99@p G2e8b@label) (G2e3c@syntax-violation '#f '"multiple definitions of identifier" G2e8a@id)) (void))) G2e97@t) (begin (if (G2b03@rib-cache G2e89@rib) (hashtable-update! (G2b03@rib-cache G2e89@rib) G2e91@sym (lambda (G2e9b@e) (cons (cons G2e92@mark* G2e8b@label) G2e9b@e)) '()) (void)) (G2b05@set-rib-sym*! G2e89@rib (cons G2e91@sym G2e95@sym*)) (G2b07@set-rib-mark**! G2e89@rib (cons G2e92@mark* (G2afd@rib-mark** G2e89@rib))) (G2b09@set-rib-label*! G2e89@rib (cons G2e8b@label (G2aff@rib-label* G2e89@rib)))))) (and (memq G2e91@sym (G2afb@rib-sym* G2e89@rib)) (G2e90@find G2e91@sym G2e92@mark* G2e95@sym* (G2afd@rib-mark** G2e89@rib) (G2aff@rib-label* G2e89@rib))))) (G2afb@rib-sym* G2e89@rib))) (G2b62@id->sym G2e8a@id) (G2b2e@stx-mark* G2e8a@id))))) '#f))) (set! G2b13@extend-rib/nc! (lambda (G2ea7@rib G2ea8@id G2ea9@label) ((lambda (G2ead@sym G2eae@mark*) ((lambda (G2eb1@sym*) (begin (if (G2b03@rib-cache G2ea7@rib) (hashtable-update! (G2b03@rib-cache G2ea7@rib) G2ead@sym (lambda (G2eb3@e) (cons (cons G2eae@mark* G2ea9@label) G2eb3@e)) '()) (void)) (G2b05@set-rib-sym*! G2ea7@rib (cons G2ead@sym G2eb1@sym*)) (G2b07@set-rib-mark**! G2ea7@rib (cons G2eae@mark* (G2afd@rib-mark** G2ea7@rib))) (G2b09@set-rib-label*! G2ea7@rib (cons G2ea9@label (G2aff@rib-label* G2ea7@rib))))) (G2afb@rib-sym* G2ea7@rib))) (G2b62@id->sym G2ea8@id) (G2b2e@stx-mark* G2ea8@id)))) (set! G2b15@make-rib-map (lambda (G2eb5@sym*) ((lambda (G2eb7@ht) ((letrec ((G2eb9@f (lambda (G2ebb@i G2ebc@sym*) (if (null? G2ebc@sym*) G2eb7@ht (begin (hashtable-update! G2eb7@ht (car G2ebc@sym*) (lambda (G2ebf@x) (cons G2ebb@i G2ebf@x)) '()) (G2eb9@f (+ G2ebb@i '1) (cdr G2ebc@sym*))))))) G2eb9@f) '0 G2eb5@sym*)) (make-eq-hashtable)))) (set! G2b17@seal-rib! (lambda (G2ec1@rib) ((lambda (G2ec3@sym*) (if (not (null? G2ec3@sym*)) (begin (G2b05@set-rib-sym*! G2ec1@rib (list->vector G2ec3@sym*)) (G2b07@set-rib-mark**! G2ec1@rib (list->vector (G2afd@rib-mark** G2ec1@rib))) (G2b09@set-rib-label*! G2ec1@rib (list->vector (G2aff@rib-label* G2ec1@rib))) (G2b0b@set-rib-sealed/freq! G2ec1@rib (G2b15@make-rib-map G2ec3@sym*))) (void))) (G2afb@rib-sym* G2ec1@rib)))) (set! G2b19@unseal-rib! (lambda (G2ec5@rib) (if (G2b01@rib-sealed/freq G2ec5@rib) (begin (G2b0b@set-rib-sealed/freq! G2ec5@rib '#f) (G2b05@set-rib-sym*! G2ec5@rib (vector->list (G2afb@rib-sym* G2ec5@rib))) (G2b07@set-rib-mark**! G2ec5@rib (vector->list (G2afd@rib-mark** G2ec5@rib))) (G2b09@set-rib-label*! G2ec5@rib (vector->list (G2aff@rib-label* G2ec5@rib)))) (void)))) (set! G2b1b@make-full-rib (lambda (G2ec7@id* G2ec8@label*) ((lambda (G2ecb@r) (begin (G2b17@seal-rib! G2ecb@r) G2ecb@r)) (G2af9@make-rib (map G2b62@id->sym G2ec7@id*) (map G2b2e@stx-mark* G2ec7@id*) G2ec8@label* '#f '#f)))) (set! G2b21@G2b1c (make-record-type-descriptor 'stx '#f 'G2b1f '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2b23@G2b1e '#f) (set! G2b25@G2b1d (make-record-constructor-descriptor G2b21@G2b1c '#f G2b23@G2b1e)) (set! G2b28@stx? (record-predicate G2b21@G2b1c)) (set! G2b2a@make-stx (record-constructor G2b25@G2b1d)) (set! G2b2c@stx-expr (record-accessor G2b21@G2b1c '0)) (set! G2b2e@stx-mark* (record-accessor G2b21@G2b1c '1)) (set! G2b30@stx-subst* (record-accessor G2b21@G2b1c '2)) (set! G2b32@stx-ae* (record-accessor G2b21@G2b1c '3)) (set! G2b34@set-stx-expr! (record-mutator G2b21@G2b1c '0)) (set! G2b36@set-stx-mark*! (record-mutator G2b21@G2b1c '1)) (set! G2b38@set-stx-subst*! (record-mutator G2b21@G2b1c '2)) (set! G2b3a@set-stx-ae*! (record-mutator G2b21@G2b1c '3)) (set! G2b3c@rp (G2711@G263c@make-record-printer 'stx (lambda (G2ecd@x G2ece@p G2ecf@wr) (begin (display '"#<syntax " G2ece@p) (write (G2b76@stx->datum G2ecd@x) G2ece@p) ((lambda (G2ed3@expr) (if (G2709@G262c@annotation? G2ed3@expr) ((lambda (G2ed5@src) (if (pair? G2ed5@src) (begin (display '" [" G2ece@p) (display (cdr G2ed5@src) G2ece@p) (display '" of " G2ece@p) (display (car G2ed5@src) G2ece@p) (display '"]" G2ece@p)) (void))) (G270a@G262e@annotation-source G2ed3@expr)) (void))) (G2b2c@stx-expr G2ecd@x)) (display '">" G2ece@p))))) (set! G2b3e@datum->stx (lambda (G2ed7@id G2ed8@datum) (G2b2a@make-stx G2ed8@datum (G2b2e@stx-mark* G2ed7@id) (G2b30@stx-subst* G2ed7@id) (G2b32@stx-ae* G2ed7@id)))) (set! G2b40@gen-mark (lambda () (string '#\m))) (set! G2b42@anti-mark '#f) (set! G2b44@anti-mark? not) (set! G2b46@join-wraps (lambda (G2edb@m1* G2edc@s1* G2edd@ae1* G2ede@e) ((lambda (G2ee4@cancel) (begin (set! G2ee4@cancel (lambda (G2eeb@ls1 G2eec@ls2) ((letrec ((G2eef@f (lambda (G2ef1@x G2ef2@ls1) (if (null? G2ef2@ls1) (cdr G2eec@ls2) (cons G2ef1@x (G2eef@f (car G2ef2@ls1) (cdr G2ef2@ls1))))))) G2eef@f) (car G2eeb@ls1) (cdr G2eeb@ls1)))) ((lambda (G2ee5@m2* G2ee6@s2* G2ee7@ae2*) (if (and (not (null? G2edb@m1*)) (not (null? G2ee5@m2*)) (G2b44@anti-mark? (car G2ee5@m2*))) (values (G2ee4@cancel G2edb@m1* G2ee5@m2*) (G2ee4@cancel G2edc@s1* G2ee6@s2*) (G2ee4@cancel G2edd@ae1* G2ee7@ae2*)) (values (append G2edb@m1* G2ee5@m2*) (append G2edc@s1* G2ee6@s2*) (append G2edd@ae1* G2ee7@ae2*)))) (G2b2e@stx-mark* G2ede@e) (G2b30@stx-subst* G2ede@e) (G2b32@stx-ae* G2ede@e)))) '#f))) (set! G2b48@mkstx (lambda (G2ef5@e G2ef6@m* G2ef7@s* G2ef8@ae*) (if (and (G2b28@stx? G2ef5@e) (not (G2ade@top-marked? G2ef6@m*))) (call-with-values (lambda () (G2b46@join-wraps G2ef6@m* G2ef7@s* G2ef8@ae* G2ef5@e)) (lambda (G2f00@G2efd G2f01@G2efe G2f02@G2eff) ((lambda (G2f06@ae* G2f07@s* G2f08@m*) (G2b2a@make-stx (G2b2c@stx-expr G2ef5@e) G2f08@m* G2f07@s* G2f06@ae*)) G2f02@G2eff G2f01@G2efe G2f00@G2efd))) (G2b2a@make-stx G2ef5@e G2ef6@m* G2ef7@s* G2ef8@ae*)))) (set! G2b4a@add-mark (lambda (G2f0c@m G2f0d@e G2f0e@ae) (G2b48@mkstx G2f0d@e (list G2f0c@m) '(shift) (list G2f0e@ae)))) (set! G2b4c@add-subst (lambda (G2f12@subst G2f13@e) (G2b48@mkstx G2f13@e '() (list G2f12@subst) '()))) (set! G2b4e@syntax-kind? (lambda (G2f16@x G2f17@p?) (if (G2b28@stx? G2f16@x) (G2b4e@syntax-kind? (G2b2c@stx-expr G2f16@x) G2f17@p?) (if (G2709@G262c@annotation? G2f16@x) (G2b4e@syntax-kind? (G270b@G2630@annotation-expression G2f16@x) G2f17@p?) (G2f17@p? G2f16@x))))) (set! G2b50@syntax-vector->list (lambda (G2f1a@x) (if (G2b28@stx? G2f1a@x) ((lambda (G2f1c@ls G2f1d@m* G2f1e@s* G2f1f@ae*) (map (lambda (G2f24@x) (G2b48@mkstx G2f24@x G2f1d@m* G2f1e@s* G2f1f@ae*)) G2f1c@ls)) (G2b50@syntax-vector->list (G2b2c@stx-expr G2f1a@x)) (G2b2e@stx-mark* G2f1a@x) (G2b30@stx-subst* G2f1a@x) (G2b32@stx-ae* G2f1a@x)) (if (G2709@G262c@annotation? G2f1a@x) (G2b50@syntax-vector->list (G270b@G2630@annotation-expression G2f1a@x)) (if (vector? G2f1a@x) (vector->list G2f1a@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G2f1a@x)))))) (set! G2b52@syntax-pair? (lambda (G2f26@x) (G2b4e@syntax-kind? G2f26@x pair?))) (set! G2b54@syntax-vector? (lambda (G2f28@x) (G2b4e@syntax-kind? G2f28@x vector?))) (set! G2b56@syntax-null? (lambda (G2f2a@x) (G2b4e@syntax-kind? G2f2a@x null?))) (set! G2b58@syntax-list? (lambda (G2f2c@x) (or (G2b56@syntax-null? G2f2c@x) (and (G2b52@syntax-pair? G2f2c@x) (G2b58@syntax-list? (G2b5c@syntax-cdr G2f2c@x)))))) (set! G2b5a@syntax-car (lambda (G2f2e@x) (if (G2b28@stx? G2f2e@x) (G2b48@mkstx (G2b5a@syntax-car (G2b2c@stx-expr G2f2e@x)) (G2b2e@stx-mark* G2f2e@x) (G2b30@stx-subst* G2f2e@x) (G2b32@stx-ae* G2f2e@x)) (if (G2709@G262c@annotation? G2f2e@x) (G2b5a@syntax-car (G270b@G2630@annotation-expression G2f2e@x)) (if (pair? G2f2e@x) (car G2f2e@x) (assertion-violation 'syntax-car '"BUG: not a pair" G2f2e@x)))))) (set! G2b5c@syntax-cdr (lambda (G2f30@x) (if (G2b28@stx? G2f30@x) (G2b48@mkstx (G2b5c@syntax-cdr (G2b2c@stx-expr G2f30@x)) (G2b2e@stx-mark* G2f30@x) (G2b30@stx-subst* G2f30@x) (G2b32@stx-ae* G2f30@x)) (if (G2709@G262c@annotation? G2f30@x) (G2b5c@syntax-cdr (G270b@G2630@annotation-expression G2f30@x)) (if (pair? G2f30@x) (cdr G2f30@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G2f30@x)))))) (set! G2b5e@syntax->list (lambda (G2f32@x) (if (G2b52@syntax-pair? G2f32@x) (cons (G2b5a@syntax-car G2f32@x) (G2b5e@syntax->list (G2b5c@syntax-cdr G2f32@x))) (if (G2b56@syntax-null? G2f32@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G2f32@x))))) (set! G2b60@id? (lambda (G2f34@x) (and (G2b28@stx? G2f34@x) ((lambda (G2f36@expr) (symbol? (if (G2709@G262c@annotation? G2f36@expr) (G2708@G262a@annotation-stripped G2f36@expr) G2f36@expr))) (G2b2c@stx-expr G2f34@x))))) (set! G2b62@id->sym (lambda (G2f38@x) (begin (if (not (G2b28@stx? G2f38@x)) (error 'id->sym '"BUG in ikarus: not an id" G2f38@x) (void)) ((lambda (G2f3a@expr) ((lambda (G2f3c@sym) (if (symbol? G2f3c@sym) G2f3c@sym (error 'id->sym '"BUG in ikarus: not an id" G2f38@x))) (if (G2709@G262c@annotation? G2f3a@expr) (G2708@G262a@annotation-stripped G2f3a@expr) G2f3a@expr))) (G2b2c@stx-expr G2f38@x))))) (set! G2b64@same-marks? (lambda (G2f3e@x G2f3f@y) (or (and (null? G2f3e@x) (null? G2f3f@y)) (and (pair? G2f3e@x) (pair? G2f3f@y) (eq? (car G2f3e@x) (car G2f3f@y)) (G2b64@same-marks? (cdr G2f3e@x) (cdr G2f3f@y)))))) (set! G2b66@bound-id=? (lambda (G2f42@x G2f43@y) (and (eq? (G2b62@id->sym G2f42@x) (G2b62@id->sym G2f43@y)) (G2b64@same-marks? (G2b2e@stx-mark* G2f42@x) (G2b2e@stx-mark* G2f43@y))))) (set! G2b68@free-id=? (lambda (G2f46@i G2f47@j) ((lambda (G2f4a@t0 G2f4b@t1) (if (or G2f4a@t0 G2f4b@t1) (eq? G2f4a@t0 G2f4b@t1) (eq? (G2b62@id->sym G2f46@i) (G2b62@id->sym G2f47@j)))) (G2b7c@id->real-label G2f46@i) (G2b7c@id->real-label G2f47@j)))) (set! G2b6a@valid-bound-ids? (lambda (G2f4e@id*) (and (for-all G2b60@id? G2f4e@id*) (G2b6c@distinct-bound-ids? G2f4e@id*)))) (set! G2b6c@distinct-bound-ids? (lambda (G2f50@id*) (or (null? G2f50@id*) (and (not (G2b6e@bound-id-member? (car G2f50@id*) (cdr G2f50@id*))) (G2b6c@distinct-bound-ids? (cdr G2f50@id*)))))) (set! G2b6e@bound-id-member? (lambda (G2f52@id G2f53@id*) (and (pair? G2f53@id*) (or (G2b66@bound-id=? G2f52@id (car G2f53@id*)) (G2b6e@bound-id-member? G2f52@id (cdr G2f53@id*)))))) (set! G2b70@self-evaluating? (lambda (G2f56@x) (or (number? G2f56@x) (string? G2f56@x) (char? G2f56@x) (boolean? G2f56@x) (regexp? G2f56@x) (bytevector? G2f56@x)))) (set! G2b72@strip-annotations (lambda (G2f58@x) (if (pair? G2f58@x) (cons (G2b72@strip-annotations (car G2f58@x)) (G2b72@strip-annotations (cdr G2f58@x))) (if (vector? G2f58@x) (vector-map G2b72@strip-annotations G2f58@x) (if (G2709@G262c@annotation? G2f58@x) (G2708@G262a@annotation-stripped G2f58@x) G2f58@x))))) (set! G2b74@strip (lambda (G2f5a@x G2f5b@m*) (if (G2ade@top-marked? G2f5b@m*) (if (or (G2709@G262c@annotation? G2f5a@x) (and (pair? G2f5a@x) (G2709@G262c@annotation? (car G2f5a@x))) (and (vector? G2f5a@x) (> (vector-length G2f5a@x) '0) (G2709@G262c@annotation? (vector-ref G2f5a@x '0)))) (G2b72@strip-annotations G2f5a@x) G2f5a@x) ((letrec ((G2f5e@f (lambda (G2f60@x) (if (G2b28@stx? G2f60@x) (G2b74@strip (G2b2c@stx-expr G2f60@x) (G2b2e@stx-mark* G2f60@x)) (if (G2709@G262c@annotation? G2f60@x) (G2708@G262a@annotation-stripped G2f60@x) (if (pair? G2f60@x) ((lambda (G2f62@a G2f63@d) (if (and (eq? G2f62@a (car G2f60@x)) (eq? G2f63@d (cdr G2f60@x))) G2f60@x (cons G2f62@a G2f63@d))) (G2f5e@f (car G2f60@x)) (G2f5e@f (cdr G2f60@x))) (if (vector? G2f60@x) ((lambda (G2f66@old) ((lambda (G2f68@new) (if (for-all eq? G2f66@old G2f68@new) G2f60@x (list->vector G2f68@new))) (map G2f5e@f G2f66@old))) (vector->list G2f60@x)) G2f60@x))))))) G2f5e@f) G2f5a@x)))) (set! G2b76@stx->datum (lambda (G2f6a@x) (G2b74@strip G2f6a@x '()))) (set! G2b78@same-marks*? (lambda (G2f6c@mark* G2f6d@mark** G2f6e@si) (if (null? G2f6e@si) '#f (if (G2b64@same-marks? G2f6c@mark* (vector-ref G2f6d@mark** (car G2f6e@si))) (car G2f6e@si) (G2b78@same-marks*? G2f6c@mark* G2f6d@mark** (cdr G2f6e@si)))))) (set! G2b7a@id->label (lambda (G2f72@id) (or (G2b7c@id->real-label G2f72@id) ((lambda (G2f74@t) (if G2f74@t ((lambda (G2f76@env) ((lambda (G2f78@rib) (call-with-values (lambda () (G2ae8@gen-define-label+loc G2f72@id G2f78@rib)) (lambda (G2f7c@G2f7a G2f7d@G2f7b) ((lambda (G2f80@loc_ G2f81@lab) (begin (G2b11@extend-rib! G2f78@rib G2f72@id G2f81@lab) G2f81@lab)) G2f7d@G2f7b G2f7c@G2f7a)))) (G2dfc@interaction-env-rib G2f76@env))) G2f74@t) '#f)) (G2e4a@top-level-context))))) (set! G2b7c@id->real-label (lambda (G2f84@id) ((lambda (G2f86@sym) ((letrec ((G2f88@search (lambda (G2f8a@subst* G2f8b@mark*) (if (null? G2f8a@subst*) '#f (if (eq? (car G2f8a@subst*) 'shift) (G2f88@search (cdr G2f8a@subst*) (cdr G2f8b@mark*)) ((lambda (G2f8e@rib) ((lambda (G2f90@t) (if G2f90@t ((lambda (G2f92@ht) ((lambda (G2f94@si) ((lambda (G2f96@i) (if G2f96@i (vector-ref (G2aff@rib-label* G2f8e@rib) G2f96@i) (G2f88@search (cdr G2f8a@subst*) G2f8b@mark*))) (and G2f94@si (G2b78@same-marks*? G2f8b@mark* (G2afd@rib-mark** G2f8e@rib) (reverse G2f94@si))))) (hashtable-ref G2f92@ht G2f86@sym '#f))) G2f90@t) ((letrec ((G2f98@f (lambda (G2f9a@sym* G2f9b@mark** G2f9c@label*) (if (null? G2f9a@sym*) (G2f88@search (cdr G2f8a@subst*) G2f8b@mark*) (if (and (eq? (car G2f9a@sym*) G2f86@sym) (G2b64@same-marks? (car G2f9b@mark**) G2f8b@mark*)) (car G2f9c@label*) (G2f98@f (cdr G2f9a@sym*) (cdr G2f9b@mark**) (cdr G2f9c@label*))))))) G2f98@f) (G2afb@rib-sym* G2f8e@rib) (G2afd@rib-mark** G2f8e@rib) (G2aff@rib-label* G2f8e@rib)))) (G2b01@rib-sealed/freq G2f8e@rib))) (car G2f8a@subst*))))))) G2f88@search) (G2b30@stx-subst* G2f84@id) (G2b2e@stx-mark* G2f84@id))) (G2b62@id->sym G2f84@id)))) (set! G2b7e@label->binding (lambda (G2fa0@x G2fa1@r) ((lambda (G2fa4@t) (if G2fa4@t ((lambda (G2fa6@b) (if (and (pair? G2fa6@b) (eq? (car G2fa6@b) '$core-rtd)) (cons '$rtd (map G2d07@bless (cdr G2fa6@b))) (if (and (pair? G2fa6@b) (eq? (car G2fa6@b) 'global-rtd)) ((lambda (G2fa8@lib G2fa9@loc) (cons '$rtd (symbol-value G2fa9@loc))) (cadr G2fa6@b) (cddr G2fa6@b)) G2fa6@b))) G2fa4@t) ((lambda (G2fac@t) (if G2fac@t (cdr G2fac@t) ((lambda (G2fae@t) (if G2fae@t ((lambda (G2fb0@env) ((lambda (G2fb2@t) (if G2fb2@t ((lambda (G2fb4@p) (cons* 'lexical (cdr G2fb4@p) '#f)) G2fb2@t) '(displaced-lexical . #f))) (assq G2fa0@x (G2e00@interaction-env-locs G2fb0@env)))) G2fae@t) '(displaced-lexical . #f))) (G2e4a@top-level-context)))) (assq G2fa0@x G2fa1@r)))) (G2987@G282d@imported-label->binding G2fa0@x)))) (set! G2b80@make-binding cons) (set! G2b82@binding-type car) (set! G2b84@binding-value cdr) (set! G2b86@raise-unbound-error (lambda (G2fb6@id) (G2e3a@syntax-violation* '#f '"unbound identifier" G2fb6@id (G4a5c@G48a6@make-undefined-violation)))) (set! G2b88@syntax-type (lambda (G2fb8@e G2fb9@r) (if (G2b60@id? G2fb8@e) ((lambda (G2fbc@id) ((lambda (G2fbe@label) ((lambda (G2fc0@b) ((lambda (G2fc2@type) ((lambda () (begin (if (not G2fbe@label) (G2b86@raise-unbound-error G2fbc@id) (void)) ((lambda (G2fc4@t) (if (memv G2fc4@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G2fc2@type (G2b84@binding-value G2fc0@b) G2fbc@id) (values 'other '#f '#f))) G2fc2@type))))) (G2b82@binding-type G2fc0@b))) (G2b7e@label->binding G2fbe@label G2fb9@r))) (G2b7a@id->label G2fbc@id))) G2fb8@e) (if (G2b52@syntax-pair? G2fb8@e) ((lambda (G2fc6@id) (if (G2b60@id? G2fc6@id) ((lambda (G2fc8@label) ((lambda (G2fca@b) ((lambda (G2fcc@type) ((lambda () (begin (if (not G2fc8@label) (G2b86@raise-unbound-error G2fc6@id) (void)) ((lambda (G2fce@t) (if (memv G2fce@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G2fcc@type (G2b84@binding-value G2fca@b) G2fc6@id) (values 'call '#f '#f))) G2fcc@type))))) (G2b82@binding-type G2fca@b))) (G2b7e@label->binding G2fc8@label G2fb9@r))) (G2b7a@id->label G2fc6@id)) (values 'call '#f '#f))) (G2b5a@syntax-car G2fb8@e)) ((lambda (G2fd0@d) (if (G2b70@self-evaluating? G2fd0@d) (values 'constant G2fd0@d '#f) (values 'other '#f '#f))) (G2b76@stx->datum G2fb8@e)))))) (set! G2b96@sanitize-binding (lambda (G2fd2@x G2fd3@src) (if (procedure? G2fd2@x) (cons* 'local-macro G2fd2@x G2fd3@src) (if (and (pair? G2fd2@x) (eq? (car G2fd2@x) 'macro!) (procedure? (cdr G2fd2@x))) (cons* 'local-macro! (cdr G2fd2@x) G2fd3@src) (if (and (pair? G2fd2@x) (eq? (car G2fd2@x) '$rtd)) G2fd2@x (assertion-violation 'expand '"invalid transformer" G2fd2@x)))))) (set! G2b98@make-variable-transformer (lambda (G2fd6@x) (if (procedure? G2fd6@x) (cons 'macro! G2fd6@x) (assertion-violation 'make-variable-transformer '"not a procedure" G2fd6@x)))) (set! G2b9a@variable-transformer? (lambda (G2fd8@x) (and (pair? G2fd8@x) (eq? (car G2fd8@x) 'macro!) (procedure? (cdr G2fd8@x))))) (set! G2b9c@variable-transformer-procedure (lambda (G2fda@x) (if (G2b9a@variable-transformer? G2fda@x) (cdr G2fda@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G2fda@x)))) (set! G2b9e@make-eval-transformer (lambda (G2fdc@x) (G2b96@sanitize-binding (eval-core (G2768@G2720@expanded->core G2fdc@x)) G2fdc@x))) (set! G2cd5@parse-define (lambda (G2fde@x) ((lambda (G2fe0@t) ((lambda (G2fe2@ls/false) (if (and G2fe2@ls/false (apply (lambda (G2fe4@id G2fe5@fmls G2fe6@b G2fe7@b*) (G2b60@id? G2fe4@id)) G2fe2@ls/false)) (apply (lambda (G2fec@id G2fed@fmls G2fee@b G2fef@b*) (begin (G2d79@verify-formals G2fed@fmls G2fde@x) (values G2fec@id (cons 'defun (cons G2fed@fmls (cons G2fee@b G2fef@b*)))))) G2fe2@ls/false) ((lambda (G2ff4@t) ((lambda (G2ff6@ls/false) (if (and G2ff6@ls/false (apply (lambda (G2ff8@id G2ff9@val) (G2b60@id? G2ff8@id)) G2ff6@ls/false)) (apply (lambda (G2ffc@id G2ffd@val) (values G2ffc@id (cons 'expr G2ffd@val))) G2ff6@ls/false) ((lambda (G3000@t) ((lambda (G3002@ls/false) (if (and G3002@ls/false (apply (lambda (G3004@id) (G2b60@id? G3004@id)) G3002@ls/false)) (apply (lambda (G3006@id) (values G3006@id (cons 'expr (G2d07@bless '(void))))) G3002@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3000@t))) (G2d51@syntax-dispatch G3000@t '(_ any)))) G2ff4@t))) (G2d51@syntax-dispatch G2ff4@t '(_ any any)))) G2fe0@t))) (G2d51@syntax-dispatch G2fe0@t '(_ (any . any) any . each-any)))) G2fde@x))) (set! G2cd7@parse-define-syntax (lambda (G3008@x) ((lambda (G300a@t) ((lambda (G300c@ls/false) (if (and G300c@ls/false (apply (lambda (G300e@id G300f@val) (G2b60@id? G300e@id)) G300c@ls/false)) (apply (lambda (G3012@id G3013@val) (values G3012@id G3013@val)) G300c@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G300a@t))) (G2d51@syntax-dispatch G300a@t '(_ any any)))) G3008@x))) (set! G2cd9@scheme-stx-hashtable (make-eq-hashtable)) (set! G2cdb@scheme-stx (lambda (G3016@sym) (or (hashtable-ref G2cd9@scheme-stx-hashtable G3016@sym '#f) ((lambda (G3018@subst) ((lambda (G301a@stx) ((lambda (G301c@stx) ((lambda () (begin (hashtable-set! G2cd9@scheme-stx-hashtable G3016@sym G301c@stx) G301c@stx)))) ((lambda (G301e@t) (if G301e@t ((lambda (G3020@x) ((lambda (G3022@name G3023@label) (G2b4c@add-subst (G2af9@make-rib (list G3022@name) (list G2adc@top-mark*) (list G3023@label) '#f '#f) G301a@stx)) (car G3020@x) (cdr G3020@x))) G301e@t) G301a@stx)) (assq G3016@sym G3018@subst)))) (G2b2a@make-stx G3016@sym G2adc@top-mark* '() '()))) (G295d@G27d9@library-subst (G2981@G2821@find-library-by-name '(psyntax system $all))))))) (set! G2cdd@lexical-var car) (set! G2cdf@lexical-mutable? cdr) (set! G2ce1@set-lexical-mutable! set-cdr!) (set! G2ce3@add-lexical (lambda (G3026@lab G3027@lex G3028@r) (cons (cons* G3026@lab 'lexical G3027@lex '#f) G3028@r))) (set! G2ce5@add-lexicals (lambda (G302c@lab* G302d@lex* G302e@r) (if (null? G302c@lab*) G302e@r (G2ce5@add-lexicals (cdr G302c@lab*) (cdr G302d@lex*) (G2ce3@add-lexical (car G302c@lab*) (car G302d@lex*) G302e@r))))) (set! G2ce7@letrec-helper (lambda (G3032@e G3033@r G3034@mr G3035@build) ((lambda (G303a@t) ((lambda (G303c@ls/false) (if G303c@ls/false (apply (lambda (G303e@lhs* G303f@rhs* G3040@b G3041@b*) (if (not (G2b6a@valid-bound-ids? G303e@lhs*)) (G2d0b@invalid-fmls-error G3032@e G303e@lhs*) ((lambda (G3046@lex* G3047@lab*) ((lambda (G304a@rib G304b@r) ((lambda (G304e@body G304f@rhs*) (G3035@build '#f G3046@lex* G304f@rhs* G304e@body)) (G2d8b@chi-internal (G2b4c@add-subst G304a@rib (cons G3040@b G3041@b*)) G304b@r G3034@mr) (G2d71@chi-expr* (map (lambda (G3052@x) (G2b4c@add-subst G304a@rib G3052@x)) G303f@rhs*) G304b@r G3034@mr))) (G2b1b@make-full-rib G303e@lhs* G3047@lab*) (G2ce5@add-lexicals G3047@lab* G3046@lex* G3033@r))) (map G2ae0@gen-lexical G303e@lhs*) (map G2ae4@gen-label G303e@lhs*)))) G303c@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G303a@t))) (G2d51@syntax-dispatch G303a@t '(_ #(each (any any)) any . each-any)))) G3032@e))) (set! G2ce9@letrec-transformer (lambda (G3054@e G3055@r G3056@mr) (G2ce7@letrec-helper G3054@e G3055@r G3056@mr G2ac3@G2a36@build-letrec))) (set! G2ceb@letrec*-transformer (lambda (G305a@e G305b@r G305c@mr) (G2ce7@letrec-helper G305a@e G305b@r G305c@mr G2ac4@G2a38@build-letrec*))) (set! G2ced@fluid-let-syntax-transformer (lambda (G3060@e G3061@r G3062@mr) ((lambda (G3067@lookup) (begin (set! G3067@lookup (lambda (G307a@x) (or (G2b7a@id->label G307a@x) (G2e3c@syntax-violation '#f '"unbound identifier" G3060@e G307a@x)))) ((lambda (G3068@t) ((lambda (G306a@ls/false) (if G306a@ls/false (apply (lambda (G306c@lhs* G306d@rhs* G306e@b G306f@b*) (if (not (G2b6a@valid-bound-ids? G306c@lhs*)) (G2d0b@invalid-fmls-error G3060@e G306c@lhs*) ((lambda (G3074@lab* G3075@rhs*) (G2d8b@chi-internal (cons G306e@b G306f@b*) (append (map cons G3074@lab* G3075@rhs*) G3061@r) (append (map cons G3074@lab* G3075@rhs*) G3062@mr))) (map G3067@lookup G306c@lhs*) (map (lambda (G3078@x) (G2b9e@make-eval-transformer (G2db0@expand-transformer G3078@x G3062@mr))) G306d@rhs*)))) G306a@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3068@t))) (G2d51@syntax-dispatch G3068@t '(_ #(each (any any)) any . each-any)))) G3060@e))) '#f))) (set! G2cef@type-descriptor-transformer (lambda (G307c@e G307d@r G307e@mr) ((lambda (G3082@t) ((lambda (G3084@ls/false) (if (and G3084@ls/false (apply (lambda (G3086@id) (G2b60@id? G3086@id)) G3084@ls/false)) (apply (lambda (G3088@id) ((lambda (G308a@lab) ((lambda (G308c@b) ((lambda (G308e@type) ((lambda () (begin (if (not G308a@lab) (G2b86@raise-unbound-error G3088@id) (void)) (if (not (and (eq? G308e@type '$rtd) (not (list? (G2b84@binding-value G308c@b))))) (G2e3c@syntax-violation '#f '"not a record type" G307c@e) (void)) (list 'quote (G2b84@binding-value G308c@b)))))) (G2b82@binding-type G308c@b))) (G2b7e@label->binding G308a@lab G307d@r))) (G2b7a@id->label G3088@id))) G3084@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3082@t))) (G2d51@syntax-dispatch G3082@t '(_ any)))) G307c@e))) (set! G2cf1@record-type-descriptor-transformer (lambda (G3090@e G3091@r G3092@mr) ((lambda (G3096@t) ((lambda (G3098@ls/false) (if (and G3098@ls/false (apply (lambda (G309a@id) (G2b60@id? G309a@id)) G3098@ls/false)) (apply (lambda (G309c@id) ((lambda (G309e@lab) ((lambda (G30a0@b) ((lambda (G30a2@type) ((lambda () (begin (if (not G309e@lab) (G2b86@raise-unbound-error G309c@id) (void)) (if (not (and (eq? G30a2@type '$rtd) (list? (G2b84@binding-value G30a0@b)))) (G2e3c@syntax-violation '#f '"not a record type" G3090@e) (void)) (G2d75@chi-expr (car (G2b84@binding-value G30a0@b)) G3091@r G3092@mr))))) (G2b82@binding-type G30a0@b))) (G2b7e@label->binding G309e@lab G3091@r))) (G2b7a@id->label G309c@id))) G3098@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3096@t))) (G2d51@syntax-dispatch G3096@t '(_ any)))) G3090@e))) (set! G2cf3@record-constructor-descriptor-transformer (lambda (G30a4@e G30a5@r G30a6@mr) ((lambda (G30aa@t) ((lambda (G30ac@ls/false) (if (and G30ac@ls/false (apply (lambda (G30ae@id) (G2b60@id? G30ae@id)) G30ac@ls/false)) (apply (lambda (G30b0@id) ((lambda (G30b2@lab) ((lambda (G30b4@b) ((lambda (G30b6@type) ((lambda () (begin (if (not G30b2@lab) (G2b86@raise-unbound-error G30b0@id) (void)) (if (not (and (eq? G30b6@type '$rtd) (list? (G2b84@binding-value G30b4@b)))) (G2e3c@syntax-violation '#f '"invalid type" G30a4@e) (void)) (G2d75@chi-expr (cadr (G2b84@binding-value G30b4@b)) G30a5@r G30a6@mr))))) (G2b82@binding-type G30b4@b))) (G2b7e@label->binding G30b2@lab G30a5@r))) (G2b7a@id->label G30b0@id))) G30ac@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G30aa@t))) (G2d51@syntax-dispatch G30aa@t '(_ any)))) G30a4@e))) (set! G2cf5@when-macro (lambda (G30b8@e) ((lambda (G30ba@t) ((lambda (G30bc@ls/false) (if G30bc@ls/false (apply (lambda (G30be@test G30bf@e G30c0@e*) (G2d07@bless (list 'if G30be@test (cons 'begin (cons G30bf@e G30c0@e*))))) G30bc@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G30ba@t))) (G2d51@syntax-dispatch G30ba@t '(_ any any . each-any)))) G30b8@e))) (set! G2cf7@unless-macro (lambda (G30c4@e) ((lambda (G30c6@t) ((lambda (G30c8@ls/false) (if G30c8@ls/false (apply (lambda (G30ca@test G30cb@e G30cc@e*) (G2d07@bless (list 'if (list 'not G30ca@test) (cons 'begin (cons G30cb@e G30cc@e*))))) G30c8@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G30c6@t))) (G2d51@syntax-dispatch G30c6@t '(_ any any . each-any)))) G30c4@e))) (set! G2cf9@if-transformer (lambda (G30d0@e G30d1@r G30d2@mr) ((lambda (G30d6@t) ((lambda (G30d8@ls/false) (if G30d8@ls/false (apply (lambda (G30da@e0 G30db@e1 G30dc@e2) (list 'if (G2d75@chi-expr G30da@e0 G30d1@r G30d2@mr) (G2d75@chi-expr G30db@e1 G30d1@r G30d2@mr) (G2d75@chi-expr G30dc@e2 G30d1@r G30d2@mr))) G30d8@ls/false) ((lambda (G30e0@t) ((lambda (G30e2@ls/false) (if G30e2@ls/false (apply (lambda (G30e4@e0 G30e5@e1) (list 'if (G2d75@chi-expr G30e4@e0 G30d1@r G30d2@mr) (G2d75@chi-expr G30e5@e1 G30d1@r G30d2@mr) (G2ac2@G2a34@build-void))) G30e2@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G30e0@t))) (G2d51@syntax-dispatch G30e0@t '(_ any any)))) G30d6@t))) (G2d51@syntax-dispatch G30d6@t '(_ any any any)))) G30d0@e))) (set! G2cfb@and-transformer (lambda (G30e8@e G30e9@r G30ea@mr) ((lambda (G30ee@t) ((lambda (G30f0@ls/false) (if G30f0@ls/false (apply (lambda (G30f2@e*) (cons 'and (G2d71@chi-expr* G30f2@e* G30e9@r G30ea@mr))) G30f0@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G30ee@t))) (G2d51@syntax-dispatch G30ee@t '(_ . each-any)))) G30e8@e))) (set! G2cfd@or-transformer (lambda (G30f4@e G30f5@r G30f6@mr) ((lambda (G30fa@t) ((lambda (G30fc@ls/false) (if G30fc@ls/false (apply (lambda (G30fe@e*) (cons 'or (G2d71@chi-expr* G30fe@e* G30f5@r G30f6@mr))) G30fc@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G30fa@t))) (G2d51@syntax-dispatch G30fa@t '(_ . each-any)))) G30f4@e))) (set! G2cff@case-macro (lambda (G3100@e) ((lambda (G3103@build-last G3105@build-one) (begin (set! G3103@build-last (lambda (G312a@cls) ((lambda (G312c@t) ((lambda (G312e@ls/false) (if G312e@ls/false (apply (lambda (G3130@e G3131@e*) (cons 'begin (cons G3130@e G3131@e*))) G312e@ls/false) ((lambda (G3134@t) ((lambda (G3136@ls/false) (if G3136@ls/false (apply (lambda () (G3105@build-one G312a@cls '(if #f #f))) G3136@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3134@t))) (G2d51@syntax-dispatch G3134@t '_))) G312c@t))) (G2d51@syntax-dispatch G312c@t '(#(scheme-id else) any . each-any)))) G312a@cls))) (set! G3105@build-one (lambda (G311c@cls G311d@k) ((lambda (G3120@t) ((lambda (G3122@ls/false) (if G3122@ls/false (apply (lambda (G3124@d* G3125@e G3126@e*) (list 'if (list 'memv 't (list 'quote G3124@d*)) (cons 'begin (cons G3125@e G3126@e*)) G311d@k)) G3122@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3120@t))) (G2d51@syntax-dispatch G3120@t '(each-any any . each-any)))) G311c@cls))) ((lambda (G3106@t) ((lambda (G3108@ls/false) (if G3108@ls/false (apply (lambda (G310a@expr) (G2d07@bless (cons 'let (cons (list (list 't G310a@expr)) '((if #f #f)))))) G3108@ls/false) ((lambda (G310c@t) ((lambda (G310e@ls/false) (if G310e@ls/false (apply (lambda (G3110@expr G3111@cls G3112@cls*) (G2d07@bless (list 'let (list (list 't G3110@expr)) ((letrec ((G3116@f (lambda (G3118@cls G3119@cls*) (if (null? G3119@cls*) (G3103@build-last G3118@cls) (G3105@build-one G3118@cls (G3116@f (car G3119@cls*) (cdr G3119@cls*))))))) G3116@f) G3111@cls G3112@cls*)))) G310e@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G310c@t))) (G2d51@syntax-dispatch G310c@t '(_ any any . each-any)))) G3106@t))) (G2d51@syntax-dispatch G3106@t '(_ any)))) G3100@e))) '#f '#f))) (set! G2d01@quote-transformer (lambda (G3138@e G3139@r G313a@mr) ((lambda (G313e@t) ((lambda (G3140@ls/false) (if G3140@ls/false (apply (lambda (G3142@datum) (list 'quote (G2b76@stx->datum G3142@datum))) G3140@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G313e@t))) (G2d51@syntax-dispatch G313e@t '(_ any)))) G3138@e))) (set! G2d03@case-lambda-transformer (lambda (G3144@e G3145@r G3146@mr) ((lambda (G314a@t) ((lambda (G314c@ls/false) (if G314c@ls/false (apply (lambda (G314e@fmls* G314f@b* G3150@b**) (call-with-values (lambda () (G2d7d@chi-lambda-clause* G3144@e G314e@fmls* (map cons G314f@b* G3150@b**) G3145@r G3146@mr)) (lambda (G3156@G3154 G3157@G3155) ((lambda (G315a@body* G315b@fmls*) (G2abf@G2a02@build-case-lambda '#f G315b@fmls* G315a@body*)) G3157@G3155 G3156@G3154)))) G314c@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G314a@t))) (G2d51@syntax-dispatch G314a@t '(_ . #(each (any any . each-any)))))) G3144@e))) (set! G2d05@lambda-transformer (lambda (G315e@e G315f@r G3160@mr) ((lambda (G3164@t) ((lambda (G3166@ls/false) (if G3166@ls/false (apply (lambda (G3168@fmls G3169@b G316a@b*) (call-with-values (lambda () (G2d7b@chi-lambda-clause G315e@e G3168@fmls (cons G3169@b G316a@b*) G315f@r G3160@mr)) (lambda (G3170@G316e G3171@G316f) ((lambda (G3174@body G3175@fmls) (G2abe@G2a00@build-lambda '#f G3175@fmls G3174@body)) G3171@G316f G3170@G316e)))) G3166@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3164@t))) (G2d51@syntax-dispatch G3164@t '(_ any any . each-any)))) G315e@e))) (set! G2d07@bless (lambda (G3178@x) (G2b48@mkstx ((letrec ((G317a@f (lambda (G317c@x) (if (G2b28@stx? G317c@x) G317c@x (if (pair? G317c@x) (cons (G317a@f (car G317c@x)) (G317a@f (cdr G317c@x))) (if (symbol? G317c@x) (G2cdb@scheme-stx G317c@x) (if (vector? G317c@x) (vector-map G317a@f G317c@x) G317c@x))))))) G317a@f) G3178@x) '() '() '()))) (set! G2d09@with-syntax-macro (lambda (G317e@e) ((lambda (G3180@t) ((lambda (G3182@ls/false) (if G3182@ls/false (apply (lambda (G3184@pat* G3185@expr* G3186@b G3187@b*) ((lambda (G318c@idn*) (begin (G2d79@verify-formals (map car G318c@idn*) G317e@e) ((lambda (G318e@t*) (G2d07@bless (list 'let (map list G318e@t* G3185@expr*) ((letrec ((G3190@f (lambda (G3192@pat* G3193@t*) (if (null? G3192@pat*) (cons 'begin (cons '#f (cons G3186@b G3187@b*))) (list 'syntax-case (car G3193@t*) '() (list (car G3192@pat*) (G3190@f (cdr G3192@pat*) (cdr G3193@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G3192@pat*)) (car G3193@t*)))))))) G3190@f) G3184@pat* G318e@t*)))) (G2e2a@generate-temporaries G3185@expr*)))) ((letrec ((G3196@f (lambda (G3198@pat*) (if (null? G3198@pat*) '() (call-with-values (lambda () (G2d4f@convert-pattern (car G3198@pat*) '())) (lambda (G319c@G319a G319d@G319b) ((lambda (G31a0@idn* G31a1@pat) (append G31a0@idn* (G3196@f (cdr G3198@pat*)))) G319d@G319b G319c@G319a))))))) G3196@f) G3184@pat*))) G3182@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3180@t))) (G2d51@syntax-dispatch G3180@t '(_ #(each (any any)) any . each-any)))) G317e@e))) (set! G2d0b@invalid-fmls-error (lambda (G31a4@stx G31a5@fmls) ((lambda (G31a8@t) ((lambda (G31aa@ls/false) (if G31aa@ls/false (apply (lambda (G31ac@id* G31ad@last) ((letrec ((G31b0@f (lambda (G31b2@id*) (if (null? G31b2@id*) (values) (if (not (G2b60@id? (car G31b2@id*))) (G2e3c@syntax-violation '#f '"not an identifier" G31a4@stx (car G31b2@id*)) (begin (G31b0@f (cdr G31b2@id*)) (if (G2b6e@bound-id-member? (car G31b2@id*) (cdr G31b2@id*)) (G2e3c@syntax-violation '#f '"duplicate binding" G31a4@stx (car G31b2@id*)) (void)))))))) G31b0@f) (if (G2b60@id? G31ad@last) (cons G31ad@last G31ac@id*) (if (G2b56@syntax-null? G31ad@last) G31ac@id* (G2e3c@syntax-violation '#f '"not an identifier" G31a4@stx G31ad@last))))) G31aa@ls/false) ((lambda (G31b4@t) ((lambda (G31b6@ls/false) (if G31b6@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"malformed binding form" G31a4@stx G31a5@fmls)) G31b6@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G31b4@t))) (G2d51@syntax-dispatch G31b4@t '_))) G31a8@t))) (G2d51@syntax-dispatch G31a8@t '#(each+ any () any)))) G31a5@fmls))) (set! G2d0d@let-macro (lambda (G31b8@stx) ((lambda (G31ba@t) ((lambda (G31bc@ls/false) (if G31bc@ls/false (apply (lambda (G31be@lhs* G31bf@rhs* G31c0@b G31c1@b*) (if (G2b6a@valid-bound-ids? G31be@lhs*) (G2d07@bless (cons (cons 'lambda (cons G31be@lhs* (cons G31c0@b G31c1@b*))) G31bf@rhs*)) (G2d0b@invalid-fmls-error G31b8@stx G31be@lhs*))) G31bc@ls/false) ((lambda (G31c6@t) ((lambda (G31c8@ls/false) (if (and G31c8@ls/false (apply (lambda (G31ca@f G31cb@lhs* G31cc@rhs* G31cd@b G31ce@b*) (G2b60@id? G31ca@f)) G31c8@ls/false)) (apply (lambda (G31d4@f G31d5@lhs* G31d6@rhs* G31d7@b G31d8@b*) (if (G2b6a@valid-bound-ids? G31d5@lhs*) (G2d07@bless (cons (list 'letrec (list (list G31d4@f (cons 'lambda (cons G31d5@lhs* (cons G31d7@b G31d8@b*))))) G31d4@f) G31d6@rhs*)) (G2d0b@invalid-fmls-error G31b8@stx G31d5@lhs*))) G31c8@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G31c6@t))) (G2d51@syntax-dispatch G31c6@t '(_ any #(each (any any)) any . each-any)))) G31ba@t))) (G2d51@syntax-dispatch G31ba@t '(_ #(each (any any)) any . each-any)))) G31b8@stx))) (set! G2d0f@let-values-macro (lambda (G31de@stx) ((lambda (G31e1@rename G31e3@rename*) (begin (set! G31e1@rename (lambda (G3243@x G3244@old* G3245@new*) (begin (if (not (G2b60@id? G3243@x)) (G2e3c@syntax-violation '#f '"not an indentifier" G31de@stx G3243@x) (void)) (if (G2b6e@bound-id-member? G3243@x G3244@old*) (G2e3c@syntax-violation '#f '"duplicate binding" G31de@stx G3243@x) (void)) ((lambda (G3249@y) (values G3249@y (cons G3243@x G3244@old*) (cons G3249@y G3245@new*))) (gensym (G2e42@syntax->datum G3243@x)))))) (set! G31e3@rename* (lambda (G3231@x* G3232@old* G3233@new*) (if (null? G3231@x*) (values '() G3232@old* G3233@new*) (call-with-values (lambda () (G31e1@rename (car G3231@x*) G3232@old* G3233@new*)) (lambda (G3237@x G3238@old* G3239@new*) (call-with-values (lambda () (G31e3@rename* (cdr G3231@x*) G3238@old* G3239@new*)) (lambda (G323d@x* G323e@old* G323f@new*) (values (cons G3237@x G323d@x*) G323e@old* G323f@new*)))))))) ((lambda (G31e4@t) ((lambda (G31e6@ls/false) (if G31e6@ls/false (apply (lambda (G31e8@b G31e9@b*) (cons* (G2d07@bless 'let) '() G31e8@b G31e9@b*)) G31e6@ls/false) ((lambda (G31ec@t) ((lambda (G31ee@ls/false) (if G31ee@ls/false (apply (lambda (G31f0@lhs* G31f1@rhs* G31f2@b G31f3@b*) (G2d07@bless ((letrec ((G31f8@f (lambda (G31fa@lhs* G31fb@rhs* G31fc@old* G31fd@new*) (if (null? G31fa@lhs*) (cons 'let (cons (map list G31fc@old* G31fd@new*) (cons G31f2@b G31f3@b*))) ((lambda (G3202@t) ((lambda (G3204@ls/false) (if G3204@ls/false (apply (lambda (G3206@x*) (call-with-values (lambda () (G31e3@rename* G3206@x* G31fc@old* G31fd@new*)) (lambda (G320b@G3208 G320c@G3209 G320d@G320a) ((lambda (G3211@new* G3212@old* G3213@y*) (list 'call-with-values (list 'lambda '() (car G31fb@rhs*)) (list 'lambda G3213@y* (G31f8@f (cdr G31fa@lhs*) (cdr G31fb@rhs*) G3212@old* G3211@new*)))) G320d@G320a G320c@G3209 G320b@G3208)))) G3204@ls/false) ((lambda (G3217@t) ((lambda (G3219@ls/false) (if G3219@ls/false (apply (lambda (G321b@x* G321c@x) (call-with-values (lambda () (G31e1@rename G321c@x G31fc@old* G31fd@new*)) (lambda (G321f@y G3220@old* G3221@new*) (call-with-values (lambda () (G31e3@rename* G321b@x* G3220@old* G3221@new*)) (lambda (G3225@y* G3226@old* G3227@new*) (list 'call-with-values (list 'lambda '() (car G31fb@rhs*)) (list 'lambda (append G3225@y* G321f@y) (G31f8@f (cdr G31fa@lhs*) (cdr G31fb@rhs*) G3226@old* G3227@new*)))))))) G3219@ls/false) ((lambda (G322b@t) ((lambda (G322d@ls/false) (if G322d@ls/false (apply (lambda (G322f@others) (G2e3c@syntax-violation '#f '"malformed bindings" G31de@stx G322f@others)) G322d@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G322b@t))) (G2d51@syntax-dispatch G322b@t 'any))) G3217@t))) (G2d51@syntax-dispatch G3217@t '#(each+ any () any)))) G3202@t))) (G2d51@syntax-dispatch G3202@t 'each-any))) (car G31fa@lhs*)))))) G31f8@f) G31f0@lhs* G31f1@rhs* '() '()))) G31ee@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G31ec@t))) (G2d51@syntax-dispatch G31ec@t '(_ #(each (any any)) any . each-any)))) G31e4@t))) (G2d51@syntax-dispatch G31e4@t '(_ () any . each-any)))) G31de@stx))) '#f '#f))) (set! G2d11@let*-values-macro (lambda (G324b@stx) ((lambda (G324e@check) (begin (set! G324e@check (lambda (G327d@x*) (if (not (null? G327d@x*)) ((lambda (G327f@x) (begin (if (not (G2b60@id? G327f@x)) (G2e3c@syntax-violation '#f '"not an identifier" G324b@stx G327f@x) (void)) (G324e@check (cdr G327d@x*)) (if (G2b6e@bound-id-member? G327f@x (cdr G327d@x*)) (G2e3c@syntax-violation '#f '"duplicate identifier" G324b@stx G327f@x) (void)))) (car G327d@x*)) (void)))) ((lambda (G324f@t) ((lambda (G3251@ls/false) (if G3251@ls/false (apply (lambda (G3253@b G3254@b*) (cons* (G2d07@bless 'let) '() G3253@b G3254@b*)) G3251@ls/false) ((lambda (G3257@t) ((lambda (G3259@ls/false) (if G3259@ls/false (apply (lambda (G325b@lhs* G325c@rhs* G325d@b G325e@b*) (G2d07@bless ((letrec ((G3263@f (lambda (G3265@lhs* G3266@rhs*) (if (null? G3265@lhs*) (cons 'begin (cons G325d@b G325e@b*)) ((lambda (G3269@t) ((lambda (G326b@ls/false) (if G326b@ls/false (apply (lambda (G326d@x*) (begin (G324e@check G326d@x*) (list 'call-with-values (list 'lambda '() (car G3266@rhs*)) (list 'lambda G326d@x* (G3263@f (cdr G3265@lhs*) (cdr G3266@rhs*)))))) G326b@ls/false) ((lambda (G326f@t) ((lambda (G3271@ls/false) (if G3271@ls/false (apply (lambda (G3273@x* G3274@x) (begin (G324e@check (cons G3274@x G3273@x*)) (list 'call-with-values (list 'lambda '() (car G3266@rhs*)) (list 'lambda (append G3273@x* G3274@x) (G3263@f (cdr G3265@lhs*) (cdr G3266@rhs*)))))) G3271@ls/false) ((lambda (G3277@t) ((lambda (G3279@ls/false) (if G3279@ls/false (apply (lambda (G327b@others) (G2e3c@syntax-violation '#f '"malformed bindings" G324b@stx G327b@others)) G3279@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3277@t))) (G2d51@syntax-dispatch G3277@t 'any))) G326f@t))) (G2d51@syntax-dispatch G326f@t '#(each+ any () any)))) G3269@t))) (G2d51@syntax-dispatch G3269@t 'each-any))) (car G3265@lhs*)))))) G3263@f) G325b@lhs* G325c@rhs*))) G3259@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3257@t))) (G2d51@syntax-dispatch G3257@t '(_ #(each (any any)) any . each-any)))) G324f@t))) (G2d51@syntax-dispatch G324f@t '(_ () any . each-any)))) G324b@stx))) '#f))) (set! G2d13@trace-lambda-macro (lambda (G3281@stx) ((lambda (G3283@t) ((lambda (G3285@ls/false) (if G3285@ls/false (apply (lambda (G3287@who G3288@fmls G3289@b G328a@b*) (if (G2b6a@valid-bound-ids? G3288@fmls) (G2d07@bless (list 'make-traced-procedure (list 'quote G3287@who) (cons 'lambda (cons G3288@fmls (cons G3289@b G328a@b*))))) (G2d0b@invalid-fmls-error G3281@stx G3288@fmls))) G3285@ls/false) ((lambda (G328f@t) ((lambda (G3291@ls/false) (if G3291@ls/false (apply (lambda (G3293@who G3294@fmls G3295@last G3296@b G3297@b*) (if (G2b6a@valid-bound-ids? (cons G3295@last G3294@fmls)) (G2d07@bless (list 'make-traced-procedure (list 'quote G3293@who) (cons 'lambda (cons (append G3294@fmls G3295@last) (cons G3296@b G3297@b*))))) (G2d0b@invalid-fmls-error G3281@stx (append G3294@fmls G3295@last)))) G3291@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G328f@t))) (G2d51@syntax-dispatch G328f@t '(_ any #(each+ any () any) any . each-any)))) G3283@t))) (G2d51@syntax-dispatch G3283@t '(_ any each-any any . each-any)))) G3281@stx))) (set! G2d15@trace-define-macro (lambda (G329d@stx) ((lambda (G329f@t) ((lambda (G32a1@ls/false) (if G32a1@ls/false (apply (lambda (G32a3@who G32a4@fmls G32a5@b G32a6@b*) (if (G2b6a@valid-bound-ids? G32a4@fmls) (G2d07@bless (list 'define G32a3@who (list 'make-traced-procedure (list 'quote G32a3@who) (cons 'lambda (cons G32a4@fmls (cons G32a5@b G32a6@b*)))))) (G2d0b@invalid-fmls-error G329d@stx G32a4@fmls))) G32a1@ls/false) ((lambda (G32ab@t) ((lambda (G32ad@ls/false) (if G32ad@ls/false (apply (lambda (G32af@who G32b0@fmls G32b1@last G32b2@b G32b3@b*) (if (G2b6a@valid-bound-ids? (cons G32b1@last G32b0@fmls)) (G2d07@bless (list 'define G32af@who (list 'make-traced-procedure (list 'quote G32af@who) (cons 'lambda (cons (append G32b0@fmls G32b1@last) (cons G32b2@b G32b3@b*)))))) (G2d0b@invalid-fmls-error G329d@stx (append G32b0@fmls G32b1@last)))) G32ad@ls/false) ((lambda (G32b9@t) ((lambda (G32bb@ls/false) (if G32bb@ls/false (apply (lambda (G32bd@who G32be@expr) (if (G2b60@id? G32bd@who) (G2d07@bless (list 'define G32bd@who (list 'let (list (list 'v G32be@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G32bd@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G2e3c@syntax-violation '#f '"invalid name" G329d@stx))) G32bb@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G32b9@t))) (G2d51@syntax-dispatch G32b9@t '(_ any any)))) G32ab@t))) (G2d51@syntax-dispatch G32ab@t '(_ (any . #(each+ any () any)) any . each-any)))) G329f@t))) (G2d51@syntax-dispatch G329f@t '(_ (any . each-any) any . each-any)))) G329d@stx))) (set! G2d17@trace-define-syntax-macro (lambda (G32c1@stx) ((lambda (G32c3@t) ((lambda (G32c5@ls/false) (if G32c5@ls/false (apply (lambda (G32c7@who G32c8@expr) (if (G2b60@id? G32c7@who) (G2d07@bless (list 'define-syntax G32c7@who (list 'make-traced-macro (list 'quote G32c7@who) G32c8@expr))) (G2e3c@syntax-violation '#f '"invalid name" G32c1@stx))) G32c5@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G32c3@t))) (G2d51@syntax-dispatch G32c3@t '(_ any any)))) G32c1@stx))) (set! G2d19@trace-let/rec-syntax (lambda (G32cb@who) (lambda (G32cd@stx) ((lambda (G32cf@t) ((lambda (G32d1@ls/false) (if G32d1@ls/false (apply (lambda (G32d3@lhs* G32d4@rhs* G32d5@b G32d6@b*) (if (G2b6a@valid-bound-ids? G32d3@lhs*) ((lambda (G32db@rhs*) (G2d07@bless (cons G32cb@who (cons (map list G32d3@lhs* G32db@rhs*) (cons G32d5@b G32d6@b*))))) (map (lambda (G32dd@lhs G32de@rhs) (list 'make-traced-macro (list 'quote G32dd@lhs) G32de@rhs)) G32d3@lhs* G32d4@rhs*)) (G2d0b@invalid-fmls-error G32cd@stx G32d3@lhs*))) G32d1@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G32cf@t))) (G2d51@syntax-dispatch G32cf@t '(_ #(each (any any)) any . each-any)))) G32cd@stx)))) (set! G2d1b@trace-let-syntax-macro (G2d19@trace-let/rec-syntax 'let-syntax)) (set! G2d1d@trace-letrec-syntax-macro (G2d19@trace-let/rec-syntax 'letrec-syntax)) (set! G2d1f@guard-macro (lambda (G32e1@x) ((lambda (G32e4@gen-clauses) (begin (set! G32e4@gen-clauses (lambda (G32fb@con G32fc@outerk G32fd@clause*) ((lambda (G3302@f G3304@f*) (begin (set! G3302@f (lambda (G3337@x G3338@k) ((lambda (G333b@t) ((lambda (G333d@ls/false) (if G333d@ls/false (apply (lambda (G333f@e G3340@p) ((lambda (G3343@t) (list 'let (list (list G3343@t G333f@e)) (list 'if G3343@t (list G3340@p G3343@t) G3338@k))) (gensym))) G333d@ls/false) ((lambda (G3345@t) ((lambda (G3347@ls/false) (if G3347@ls/false (apply (lambda (G3349@e) ((lambda (G334b@t) (list 'let (list (list G334b@t G3349@e)) (list 'if G334b@t G334b@t G3338@k))) (gensym))) G3347@ls/false) ((lambda (G334d@t) ((lambda (G334f@ls/false) (if G334f@ls/false (apply (lambda (G3351@e G3352@v G3353@v*) (list 'if G3351@e (cons 'begin (cons G3352@v G3353@v*)) G3338@k)) G334f@ls/false) ((lambda (G3357@t) ((lambda (G3359@ls/false) (if G3359@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"invalid guard clause" G3337@x)) G3359@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3357@t))) (G2d51@syntax-dispatch G3357@t '_))) G334d@t))) (G2d51@syntax-dispatch G334d@t '(any any . each-any)))) G3345@t))) (G2d51@syntax-dispatch G3345@t '(any)))) G333b@t))) (G2d51@syntax-dispatch G333b@t '(any #(scheme-id =>) any)))) G3337@x))) (set! G3304@f* (lambda (G330f@x*) ((lambda (G3311@t) ((lambda (G3313@ls/false) (if G3313@ls/false (apply (lambda () ((lambda (G3315@g) (values (list G3315@g (list 'lambda '() (list 'raise-continuable G32fb@con))) G3315@g)) (gensym))) G3313@ls/false) ((lambda (G3317@t) ((lambda (G3319@ls/false) (if G3319@ls/false (apply (lambda (G331b@e G331c@e*) (values (cons 'begin (cons G331b@e G331c@e*)) '#f)) G3319@ls/false) ((lambda (G331f@t) ((lambda (G3321@ls/false) (if G3321@ls/false (apply (lambda (G3323@cls G3324@cls*) (call-with-values (lambda () (G3304@f* G3324@cls*)) (lambda (G3329@G3327 G332a@G3328) ((lambda (G332d@g G332e@e) (values (G3302@f G3323@cls G332e@e) G332d@g)) G332a@G3328 G3329@G3327)))) G3321@ls/false) ((lambda (G3331@t) ((lambda (G3333@ls/false) (if G3333@ls/false (apply (lambda (G3335@others) (G2e3c@syntax-violation '#f '"invalid guard clause" G3335@others)) G3333@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3331@t))) (G2d51@syntax-dispatch G3331@t 'any))) G331f@t))) (G2d51@syntax-dispatch G331f@t '(any . any)))) G3317@t))) (G2d51@syntax-dispatch G3317@t '((#(scheme-id else) any . each-any))))) G3311@t))) (G2d51@syntax-dispatch G3311@t '()))) G330f@x*))) (call-with-values (lambda () (G3304@f* G32fd@clause*)) (lambda (G3307@G3305 G3308@G3306) ((lambda (G330b@raisek G330c@code) (if G330b@raisek (list (list 'call/cc (list 'lambda (list G330b@raisek) (list G32fc@outerk (list 'lambda '() G330c@code))))) (list G32fc@outerk (list 'lambda '() G330c@code)))) G3308@G3306 G3307@G3305))))) '#f '#f))) ((lambda (G32e5@t) ((lambda (G32e7@ls/false) (if (and G32e7@ls/false (apply (lambda (G32e9@con G32ea@clause* G32eb@b G32ec@b*) (G2b60@id? G32e9@con)) G32e7@ls/false)) (apply (lambda (G32f1@con G32f2@clause* G32f3@b G32f4@b*) ((lambda (G32f9@outerk) (G2d07@bless (list (list 'call/cc (list 'lambda (list G32f9@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G32f1@con) (G32e4@gen-clauses G32f1@con G32f9@outerk G32f2@clause*)) (cons 'lambda (cons '() (cons G32f3@b G32f4@b*)))))))))) (gensym))) G32e7@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G32e5@t))) (G2d51@syntax-dispatch G32e5@t '(_ (any . each-any) any . each-any)))) G32e1@x))) '#f))) (set! G2d21@define-enumeration-macro (lambda (G335b@stx) ((lambda (G335e@set? G3360@remove-dups) (begin (set! G335e@set? (lambda (G3377@x) (or (null? G3377@x) (and (not (memq (car G3377@x) (cdr G3377@x))) (G335e@set? (cdr G3377@x)))))) (set! G3360@remove-dups (lambda (G3375@ls) (if (null? G3375@ls) '() (cons (car G3375@ls) (G3360@remove-dups (remq (car G3375@ls) (cdr G3375@ls))))))) ((lambda (G3361@t) ((lambda (G3363@ls/false) (if (and G3363@ls/false (apply (lambda (G3365@name G3366@id* G3367@maker) (and (G2b60@id? G3365@name) (G2b60@id? G3367@maker) (for-all G2b60@id? G3366@id*))) G3363@ls/false)) (apply (lambda (G336b@name G336c@id* G336d@maker) ((lambda (G3371@name* G3372@mk) (G2d07@bless (list 'begin (list 'define G3372@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3371@name*)))) (list 'define-syntax G336b@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3371@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G336b@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G336d@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G336d@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3371@name*)) (cons 'syntax-violation (cons (list 'quote G336d@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3372@mk '('(n* ...)))))))))))) (G3360@remove-dups (G2e42@syntax->datum G336c@id*)) (gensym))) G3363@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3361@t))) (G2d51@syntax-dispatch G3361@t '(_ any each-any any)))) G335b@stx))) '#f '#f))) (set! G2d23@time-macro (lambda (G3379@stx) ((lambda (G337b@t) ((lambda (G337d@ls/false) (if G337d@ls/false (apply (lambda (G337f@expr) ((lambda (G3381@str) (G2d07@bless (list 'time-it G3381@str (list 'lambda '() G337f@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3385@G3383 G3386@G3384) ((lambda (G3389@e G338a@p) (begin (write (G2e42@syntax->datum G337f@expr) G338a@p) (G3389@e))) G3386@G3384 G3385@G3383))))) G337d@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G337b@t))) (G2d51@syntax-dispatch G337b@t '(_ any)))) G3379@stx))) (set! G2d25@delay-macro (lambda (G338d@stx) ((lambda (G338f@t) ((lambda (G3391@ls/false) (if G3391@ls/false (apply (lambda (G3393@expr) (G2d07@bless (list 'make-promise (list 'lambda '() G3393@expr)))) G3391@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G338f@t))) (G2d51@syntax-dispatch G338f@t '(_ any)))) G338d@stx))) (set! G2d27@assert-macro (lambda (G3395@stx) ((lambda (G3397@t) ((lambda (G3399@ls/false) (if G3399@ls/false (apply (lambda (G339b@expr) ((lambda (G339d@pos) (G2d07@bless (list 'unless G339b@expr (list 'assertion-error (list 'quote G339b@expr) (list 'quote G339d@pos))))) (or (G2e34@expression-position G3395@stx) (G2e34@expression-position G339b@expr)))) G3399@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3397@t))) (G2d51@syntax-dispatch G3397@t '(_ any)))) G3395@stx))) (set! G2d29@endianness-macro (lambda (G339f@stx) ((lambda (G33a1@t) ((lambda (G33a3@ls/false) (if G33a3@ls/false (apply (lambda (G33a5@e) ((lambda (G33a7@t) (if (memv G33a7@t '(little)) (G2d07@bless ''little) (if (memv G33a7@t '(big)) (G2d07@bless ''big) (G2e3c@syntax-violation '#f '"endianness must be big or little" G339f@stx)))) (G2e42@syntax->datum G33a5@e))) G33a3@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G33a1@t))) (G2d51@syntax-dispatch G33a1@t '(_ any)))) G339f@stx))) (set! G2d2b@identifier-syntax-macro (lambda (G33a9@stx) ((lambda (G33ab@t) ((lambda (G33ad@ls/false) (if G33ad@ls/false (apply (lambda (G33af@expr) (G2d07@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G33af@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G33af@expr) '((syntax (e* ...)))))))))) G33ad@ls/false) ((lambda (G33b1@t) ((lambda (G33b3@ls/false) (if (and G33b3@ls/false (apply (lambda (G33b5@id1 G33b6@expr1 G33b7@id2 G33b8@expr2 G33b9@expr3) (and (G2b60@id? G33b5@id1) (G2b60@id? G33b7@id2) (G2b60@id? G33b8@expr2))) G33b3@ls/false)) (apply (lambda (G33bf@id1 G33c0@expr1 G33c1@id2 G33c2@expr2 G33c3@expr3) (G2d07@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G33c0@expr1)) (list (list 'set! 'id G33c2@expr2) (list 'syntax G33c3@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G33c0@expr1 '(e* ...))))))))) G33b3@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G33b1@t))) (G2d51@syntax-dispatch G33b1@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G33ab@t))) (G2d51@syntax-dispatch G33ab@t '(_ any)))) G33a9@stx))) (set! G2d2d@do-macro (lambda (G33c9@stx) ((lambda (G33cc@bind) (begin (set! G33cc@bind (lambda (G33e3@x) ((lambda (G33e5@t) ((lambda (G33e7@ls/false) (if G33e7@ls/false (apply (lambda (G33e9@x G33ea@init) (list G33e9@x G33ea@init G33e9@x)) G33e7@ls/false) ((lambda (G33ed@t) ((lambda (G33ef@ls/false) (if G33ef@ls/false (apply (lambda (G33f1@x G33f2@init G33f3@step) (list G33f1@x G33f2@init G33f3@step)) G33ef@ls/false) ((lambda (G33f7@t) ((lambda (G33f9@ls/false) (if G33f9@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"invalid binding" G33c9@stx)) G33f9@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G33f7@t))) (G2d51@syntax-dispatch G33f7@t '_))) G33ed@t))) (G2d51@syntax-dispatch G33ed@t '(any any any)))) G33e5@t))) (G2d51@syntax-dispatch G33e5@t '(any any)))) G33e3@x))) ((lambda (G33cd@t) ((lambda (G33cf@ls/false) (if G33cf@ls/false (apply (lambda (G33d1@binding* G33d2@test G33d3@expr* G33d4@command*) ((lambda (G33d9@t) ((lambda (G33db@ls/false) (if G33db@ls/false (apply (lambda (G33dd@x* G33de@init* G33df@step*) (if (G2b6a@valid-bound-ids? G33dd@x*) (G2d07@bless (list 'letrec (list (list 'loop (list 'lambda G33dd@x* (list 'if G33d2@test (cons 'begin (cons '(if #f #f) G33d3@expr*)) (cons 'begin (append G33d4@command* (list (cons 'loop G33df@step*)))))))) (cons 'loop G33de@init*))) (G2e3c@syntax-violation '#f '"invalid bindings" G33c9@stx))) G33db@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G33d9@t))) (G2d51@syntax-dispatch G33d9@t '#(each (any any any))))) (map G33cc@bind G33d1@binding*))) G33cf@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G33cd@t))) (G2d51@syntax-dispatch G33cd@t '(_ each-any (any . each-any) . each-any)))) G33c9@stx))) '#f))) (set! G2d2f@let*-macro (lambda (G33fb@stx) ((lambda (G33fd@t) ((lambda (G33ff@ls/false) (if (and G33ff@ls/false (apply (lambda (G3401@lhs* G3402@rhs* G3403@b G3404@b*) (for-all G2b60@id? G3401@lhs*)) G33ff@ls/false)) (apply (lambda (G3409@lhs* G340a@rhs* G340b@b G340c@b*) (G2d07@bless ((letrec ((G3411@f (lambda (G3413@x*) (if (null? G3413@x*) (cons 'let (cons '() (cons G340b@b G340c@b*))) (list 'let (list (car G3413@x*)) (G3411@f (cdr G3413@x*))))))) G3411@f) (map list G3409@lhs* G340a@rhs*)))) G33ff@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G33fd@t))) (G2d51@syntax-dispatch G33fd@t '(_ #(each (any any)) any . each-any)))) G33fb@stx))) (set! G2d31@or-macro (lambda (G3415@stx) ((lambda (G3417@t) ((lambda (G3419@ls/false) (if G3419@ls/false (apply (lambda () '#f) G3419@ls/false) ((lambda (G341b@t) ((lambda (G341d@ls/false) (if G341d@ls/false (apply (lambda (G341f@e G3420@e*) (G2d07@bless ((letrec ((G3423@f (lambda (G3425@e G3426@e*) (if (null? G3426@e*) (list 'begin '#f G3425@e) (list 'let (list (list 't G3425@e)) (list 'if 't 't (G3423@f (car G3426@e*) (cdr G3426@e*)))))))) G3423@f) G341f@e G3420@e*))) G341d@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G341b@t))) (G2d51@syntax-dispatch G341b@t '(_ any . each-any)))) G3417@t))) (G2d51@syntax-dispatch G3417@t '(_)))) G3415@stx))) (set! G2d33@and-macro (lambda (G3429@stx) ((lambda (G342b@t) ((lambda (G342d@ls/false) (if G342d@ls/false (apply (lambda () '#t) G342d@ls/false) ((lambda (G342f@t) ((lambda (G3431@ls/false) (if G3431@ls/false (apply (lambda (G3433@e G3434@e*) (G2d07@bless ((letrec ((G3437@f (lambda (G3439@e G343a@e*) (if (null? G343a@e*) (list 'begin '#f G3439@e) (cons 'if (cons G3439@e (cons (G3437@f (car G343a@e*) (cdr G343a@e*)) '(#f)))))))) G3437@f) G3433@e G3434@e*))) G3431@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G342f@t))) (G2d51@syntax-dispatch G342f@t '(_ any . each-any)))) G342b@t))) (G2d51@syntax-dispatch G342b@t '(_)))) G3429@stx))) (set! G2d35@cond-macro (lambda (G343d@stx) ((lambda (G343f@t) ((lambda (G3441@ls/false) (if G3441@ls/false (apply (lambda (G3443@cls G3444@cls*) (G2d07@bless ((letrec ((G3447@f (lambda (G3449@cls G344a@cls*) (if (null? G344a@cls*) ((lambda (G344d@t) ((lambda (G344f@ls/false) (if G344f@ls/false (apply (lambda (G3451@e G3452@e*) (cons 'begin (cons G3451@e G3452@e*))) G344f@ls/false) ((lambda (G3455@t) ((lambda (G3457@ls/false) (if G3457@ls/false (apply (lambda (G3459@e G345a@p) (list 'let (list (list 't G3459@e)) (list 'if 't (cons G345a@p '(t))))) G3457@ls/false) ((lambda (G345d@t) ((lambda (G345f@ls/false) (if G345f@ls/false (apply (lambda (G3461@e) (cons 'or (cons G3461@e '((if #f #f))))) G345f@ls/false) ((lambda (G3463@t) ((lambda (G3465@ls/false) (if G3465@ls/false (apply (lambda (G3467@e G3468@e*) (list 'if G3467@e (cons 'begin G3468@e*))) G3465@ls/false) ((lambda (G346b@t) ((lambda (G346d@ls/false) (if G346d@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"invalid last clause" G343d@stx)) G346d@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G346b@t))) (G2d51@syntax-dispatch G346b@t '_))) G3463@t))) (G2d51@syntax-dispatch G3463@t '(any . each-any)))) G345d@t))) (G2d51@syntax-dispatch G345d@t '(any)))) G3455@t))) (G2d51@syntax-dispatch G3455@t '(any #(scheme-id =>) any)))) G344d@t))) (G2d51@syntax-dispatch G344d@t '(#(scheme-id else) any . each-any)))) G3449@cls) ((lambda (G346f@t) ((lambda (G3471@ls/false) (if G3471@ls/false (apply (lambda (G3473@e G3474@e*) (G2e3c@syntax-violation '#f '"incorrect position of keyword else" G343d@stx)) G3471@ls/false) ((lambda (G3477@t) ((lambda (G3479@ls/false) (if G3479@ls/false (apply (lambda (G347b@e G347c@p) (list 'let (list (list 't G347b@e)) (list 'if 't (cons G347c@p '(t)) (G3447@f (car G344a@cls*) (cdr G344a@cls*))))) G3479@ls/false) ((lambda (G347f@t) ((lambda (G3481@ls/false) (if G3481@ls/false (apply (lambda (G3483@e) (list 'or G3483@e (G3447@f (car G344a@cls*) (cdr G344a@cls*)))) G3481@ls/false) ((lambda (G3485@t) ((lambda (G3487@ls/false) (if G3487@ls/false (apply (lambda (G3489@e G348a@e*) (list 'if G3489@e (cons 'begin G348a@e*) (G3447@f (car G344a@cls*) (cdr G344a@cls*)))) G3487@ls/false) ((lambda (G348d@t) ((lambda (G348f@ls/false) (if G348f@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"invalid last clause" G343d@stx)) G348f@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G348d@t))) (G2d51@syntax-dispatch G348d@t '_))) G3485@t))) (G2d51@syntax-dispatch G3485@t '(any . each-any)))) G347f@t))) (G2d51@syntax-dispatch G347f@t '(any)))) G3477@t))) (G2d51@syntax-dispatch G3477@t '(any #(scheme-id =>) any)))) G346f@t))) (G2d51@syntax-dispatch G346f@t '(#(scheme-id else) any . each-any)))) G3449@cls))))) G3447@f) G3443@cls G3444@cls*))) G3441@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G343f@t))) (G2d51@syntax-dispatch G343f@t '(_ any . each-any)))) G343d@stx))) (set! G2d37@do-include (lambda (G3491@stx G3492@id G3493@filename) ((lambda (G3497@filename) (begin (if (not (and (string? G3497@filename) (G2b60@id? G3492@id))) (G2e3c@syntax-violation '#f '"invalid syntax" G3491@stx) (void)) (cons (G2d07@bless 'begin) (with-input-from-file G3497@filename (lambda () ((letrec ((G3499@f (lambda (G349b@ls) ((lambda (G349d@x) (if (eof-object? G349d@x) (reverse G349b@ls) (G3499@f (cons (G2b3e@datum->stx G3492@id G349d@x) G349b@ls)))) (G2707@G2628@read-annotated))))) G3499@f) '())))))) (G2b76@stx->datum G3493@filename)))) (set! G2d39@include-macro (lambda (G349f@e) ((lambda (G34a1@t) ((lambda (G34a3@ls/false) (if G34a3@ls/false (apply (lambda (G34a5@id G34a6@filename) (G2d37@do-include G349f@e G34a5@id G34a6@filename)) G34a3@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G34a1@t))) (G2d51@syntax-dispatch G34a1@t '(any any)))) G349f@e))) (set! G2d3b@include-into-macro (lambda (G34a9@e) ((lambda (G34ab@t) ((lambda (G34ad@ls/false) (if G34ad@ls/false (apply (lambda (G34af@id G34b0@filename) (G2d37@do-include G34a9@e G34af@id G34b0@filename)) G34ad@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G34ab@t))) (G2d51@syntax-dispatch G34ab@t '(_ any any)))) G34a9@e))) (set! G2d3d@syntax-rules-macro (lambda (G34b3@e) ((lambda (G34b5@t) ((lambda (G34b7@ls/false) (if G34b7@ls/false (apply (lambda (G34b9@lits G34ba@pat* G34bb@tmp*) (begin (G2d57@verify-literals G34b9@lits G34b3@e) (G2d07@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G34b9@lits (map (lambda (G34bf@pat G34c0@tmp) ((lambda (G34c3@t) ((lambda (G34c5@ls/false) (if G34c5@ls/false (apply (lambda (G34c7@rest) (list (cons 'g G34c7@rest) (list 'syntax G34c0@tmp))) G34c5@ls/false) ((lambda (G34c9@t) ((lambda (G34cb@ls/false) (if G34cb@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"invalid syntax-rules pattern" G34b3@e G34bf@pat)) G34cb@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G34c9@t))) (G2d51@syntax-dispatch G34c9@t '_))) G34c3@t))) (G2d51@syntax-dispatch G34c3@t '(_ . any)))) G34bf@pat)) G34ba@pat* G34bb@tmp*)))))))) G34b7@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G34b5@t))) (G2d51@syntax-dispatch G34b5@t '(_ each-any . #(each (any any)))))) G34b3@e))) (set! G2d3f@quasiquote-macro ((lambda () ((lambda (G34ce@datum G34ea@quasicons* G34ec@quasicons G34ee@quasiappend G34f0@quasivector G34f2@vquasi G34f4@quasi) (begin (set! G34ce@datum (lambda (G35cf@x) (list (G2cdb@scheme-stx 'quote) (G2b48@mkstx G35cf@x '() '() '())))) (set! G34ea@quasicons* (lambda (G35c7@x G35c8@y) ((letrec ((G35cb@f (lambda (G35cd@x) (if (null? G35cd@x) G35c8@y (G34ec@quasicons (car G35cd@x) (G35cb@f (cdr G35cd@x))))))) G35cb@f) G35c7@x))) (set! G34ec@quasicons (lambda (G35a1@x G35a2@y) ((lambda (G35a5@t) ((lambda (G35a7@ls/false) (if G35a7@ls/false (apply (lambda (G35a9@dy) ((lambda (G35ab@t) ((lambda (G35ad@ls/false) (if G35ad@ls/false (apply (lambda (G35af@dx) (list (G2cdb@scheme-stx 'quote) (cons G35af@dx G35a9@dy))) G35ad@ls/false) ((lambda (G35b1@t) ((lambda (G35b3@ls/false) (if G35b3@ls/false (apply (lambda () ((lambda (G35b5@t) ((lambda (G35b7@ls/false) (if G35b7@ls/false (apply (lambda () (list (G2cdb@scheme-stx 'list) G35a1@x)) G35b7@ls/false) ((lambda (G35b9@t) ((lambda (G35bb@ls/false) (if G35bb@ls/false (apply (lambda () (list (G2cdb@scheme-stx 'cons) G35a1@x G35a2@y)) G35bb@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G35b9@t))) (G2d51@syntax-dispatch G35b9@t '_))) G35b5@t))) (G2d51@syntax-dispatch G35b5@t '()))) G35a9@dy)) G35b3@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G35b1@t))) (G2d51@syntax-dispatch G35b1@t '_))) G35ab@t))) (G2d51@syntax-dispatch G35ab@t '(#(scheme-id quote) any)))) G35a1@x)) G35a7@ls/false) ((lambda (G35bd@t) ((lambda (G35bf@ls/false) (if G35bf@ls/false (apply (lambda (G35c1@stuff) (cons* (G2cdb@scheme-stx 'list) G35a1@x G35c1@stuff)) G35bf@ls/false) ((lambda (G35c3@t) ((lambda (G35c5@ls/false) (if G35c5@ls/false (apply (lambda () (list (G2cdb@scheme-stx 'cons) G35a1@x G35a2@y)) G35c5@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G35c3@t))) (G2d51@syntax-dispatch G35c3@t '_))) G35bd@t))) (G2d51@syntax-dispatch G35bd@t '(#(scheme-id list) . each-any)))) G35a5@t))) (G2d51@syntax-dispatch G35a5@t '(#(scheme-id quote) any)))) G35a2@y))) (set! G34ee@quasiappend (lambda (G3587@x G3588@y) ((lambda (G358b@ls) (if (null? G358b@ls) (list (G2cdb@scheme-stx 'quote) '()) (if (null? (cdr G358b@ls)) (car G358b@ls) (cons* (G2cdb@scheme-stx 'append) G358b@ls)))) ((letrec ((G358d@f (lambda (G358f@x) (if (null? G358f@x) ((lambda (G3591@t) ((lambda (G3593@ls/false) (if G3593@ls/false (apply (lambda () '()) G3593@ls/false) ((lambda (G3595@t) ((lambda (G3597@ls/false) (if G3597@ls/false (apply (lambda () (list G3588@y)) G3597@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3595@t))) (G2d51@syntax-dispatch G3595@t '_))) G3591@t))) (G2d51@syntax-dispatch G3591@t '(#(scheme-id quote) ())))) G3588@y) ((lambda (G3599@t) ((lambda (G359b@ls/false) (if G359b@ls/false (apply (lambda () (G358d@f (cdr G358f@x))) G359b@ls/false) ((lambda (G359d@t) ((lambda (G359f@ls/false) (if G359f@ls/false (apply (lambda () (cons (car G358f@x) (G358d@f (cdr G358f@x)))) G359f@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G359d@t))) (G2d51@syntax-dispatch G359d@t '_))) G3599@t))) (G2d51@syntax-dispatch G3599@t '(#(scheme-id quote) ())))) (car G358f@x)))))) G358d@f) G3587@x)))) (set! G34f0@quasivector (lambda (G3555@x) ((lambda (G3557@pat-x) ((lambda (G3559@t) ((lambda (G355b@ls/false) (if G355b@ls/false (apply (lambda (G355d@x*) (list (G2cdb@scheme-stx 'quote) (list->vector G355d@x*))) G355b@ls/false) ((lambda (G355f@t) ((lambda (G3561@ls/false) (if G3561@ls/false (apply (lambda () ((letrec ((G3563@f (lambda (G3565@x G3566@k) ((lambda (G3569@t) ((lambda (G356b@ls/false) (if G356b@ls/false (apply (lambda (G356d@x*) (G3566@k (map (lambda (G356f@x) (list (G2cdb@scheme-stx 'quote) G356f@x)) G356d@x*))) G356b@ls/false) ((lambda (G3571@t) ((lambda (G3573@ls/false) (if G3573@ls/false (apply (lambda (G3575@x*) (G3566@k G3575@x*)) G3573@ls/false) ((lambda (G3577@t) ((lambda (G3579@ls/false) (if G3579@ls/false (apply (lambda (G357b@x G357c@y) (G3563@f G357c@y (lambda (G357f@ls) (G3566@k (cons G357b@x G357f@ls))))) G3579@ls/false) ((lambda (G3581@t) ((lambda (G3583@ls/false) (if G3583@ls/false (apply (lambda () (list (G2cdb@scheme-stx 'list->vector) G3557@pat-x)) G3583@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3581@t))) (G2d51@syntax-dispatch G3581@t '_))) G3577@t))) (G2d51@syntax-dispatch G3577@t '(#(scheme-id cons) any any)))) G3571@t))) (G2d51@syntax-dispatch G3571@t '(#(scheme-id list) . each-any)))) G3569@t))) (G2d51@syntax-dispatch G3569@t '(#(scheme-id quote) each-any)))) G3565@x)))) G3563@f) G3555@x (lambda (G3585@ls) (cons* (G2cdb@scheme-stx 'vector) G3585@ls)))) G3561@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G355f@t))) (G2d51@syntax-dispatch G355f@t '_))) G3559@t))) (G2d51@syntax-dispatch G3559@t '(#(scheme-id quote) each-any)))) G3557@pat-x)) G3555@x))) (set! G34f2@vquasi (lambda (G3533@p G3534@lev) ((lambda (G3537@t) ((lambda (G3539@ls/false) (if G3539@ls/false (apply (lambda (G353b@p G353c@q) ((lambda (G353f@t) ((lambda (G3541@ls/false) (if G3541@ls/false (apply (lambda (G3543@p) (if (= G3534@lev '0) (G34ea@quasicons* G3543@p (G34f2@vquasi G353c@q G3534@lev)) (G34ec@quasicons (G34ec@quasicons (G34ce@datum 'unquote) (G34f4@quasi G3543@p (- G3534@lev '1))) (G34f2@vquasi G353c@q G3534@lev)))) G3541@ls/false) ((lambda (G3545@t) ((lambda (G3547@ls/false) (if G3547@ls/false (apply (lambda (G3549@p) (if (= G3534@lev '0) (G34ee@quasiappend G3549@p (G34f2@vquasi G353c@q G3534@lev)) (G34ec@quasicons (G34ec@quasicons (G34ce@datum 'unquote-splicing) (G34f4@quasi G3549@p (- G3534@lev '1))) (G34f2@vquasi G353c@q G3534@lev)))) G3547@ls/false) ((lambda (G354b@t) ((lambda (G354d@ls/false) (if G354d@ls/false (apply (lambda (G354f@p) (G34ec@quasicons (G34f4@quasi G354f@p G3534@lev) (G34f2@vquasi G353c@q G3534@lev))) G354d@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G354b@t))) (G2d51@syntax-dispatch G354b@t 'any))) G3545@t))) (G2d51@syntax-dispatch G3545@t '(#(scheme-id unquote-splicing) . each-any)))) G353f@t))) (G2d51@syntax-dispatch G353f@t '(#(scheme-id unquote) . each-any)))) G353b@p)) G3539@ls/false) ((lambda (G3551@t) ((lambda (G3553@ls/false) (if G3553@ls/false (apply (lambda () (list (G2cdb@scheme-stx 'quote) '())) G3553@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3551@t))) (G2d51@syntax-dispatch G3551@t '()))) G3537@t))) (G2d51@syntax-dispatch G3537@t '(any . any)))) G3533@p))) (set! G34f4@quasi (lambda (G34fd@p G34fe@lev) ((lambda (G3501@t) ((lambda (G3503@ls/false) (if G3503@ls/false (apply (lambda (G3505@p) (if (= G34fe@lev '0) G3505@p (G34ec@quasicons (G34ce@datum 'unquote) (G34f4@quasi (list G3505@p) (- G34fe@lev '1))))) G3503@ls/false) ((lambda (G3507@t) ((lambda (G3509@ls/false) (if G3509@ls/false (apply (lambda (G350b@p G350c@q) (if (= G34fe@lev '0) (G34ea@quasicons* G350b@p (G34f4@quasi G350c@q G34fe@lev)) (G34ec@quasicons (G34ec@quasicons (G34ce@datum 'unquote) (G34f4@quasi G350b@p (- G34fe@lev '1))) (G34f4@quasi G350c@q G34fe@lev)))) G3509@ls/false) ((lambda (G350f@t) ((lambda (G3511@ls/false) (if G3511@ls/false (apply (lambda (G3513@p G3514@q) (if (= G34fe@lev '0) (G34ee@quasiappend G3513@p (G34f4@quasi G3514@q G34fe@lev)) (G34ec@quasicons (G34ec@quasicons (G34ce@datum 'unquote-splicing) (G34f4@quasi G3513@p (- G34fe@lev '1))) (G34f4@quasi G3514@q G34fe@lev)))) G3511@ls/false) ((lambda (G3517@t) ((lambda (G3519@ls/false) (if G3519@ls/false (apply (lambda (G351b@p) (G34ec@quasicons (G34ce@datum 'quasiquote) (G34f4@quasi (list G351b@p) (+ G34fe@lev '1)))) G3519@ls/false) ((lambda (G351d@t) ((lambda (G351f@ls/false) (if G351f@ls/false (apply (lambda (G3521@p G3522@q) (G34ec@quasicons (G34f4@quasi G3521@p G34fe@lev) (G34f4@quasi G3522@q G34fe@lev))) G351f@ls/false) ((lambda (G3525@t) ((lambda (G3527@ls/false) (if (and G3527@ls/false (apply (lambda (G3529@x) (not (G2b28@stx? G3529@x))) G3527@ls/false)) (apply (lambda (G352b@x) (G34f0@quasivector (G34f2@vquasi G352b@x G34fe@lev))) G3527@ls/false) ((lambda (G352d@t) ((lambda (G352f@ls/false) (if G352f@ls/false (apply (lambda (G3531@p) (list (G2cdb@scheme-stx 'quote) G3531@p)) G352f@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G352d@t))) (G2d51@syntax-dispatch G352d@t 'any))) G3525@t))) (G2d51@syntax-dispatch G3525@t '#(vector each-any)))) G351d@t))) (G2d51@syntax-dispatch G351d@t '(any . any)))) G3517@t))) (G2d51@syntax-dispatch G3517@t '(#(scheme-id quasiquote) any)))) G350f@t))) (G2d51@syntax-dispatch G350f@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3507@t))) (G2d51@syntax-dispatch G3507@t '((#(scheme-id unquote) . each-any) . any)))) G3501@t))) (G2d51@syntax-dispatch G3501@t '(#(scheme-id unquote) any)))) G34fd@p))) (lambda (G34f5@x) ((lambda (G34f7@t) ((lambda (G34f9@ls/false) (if G34f9@ls/false (apply (lambda (G34fb@e) (G34f4@quasi G34fb@e '0)) G34f9@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G34f7@t))) (G2d51@syntax-dispatch G34f7@t '(_ any)))) G34f5@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d41@quasisyntax-macro ((lambda () ((lambda (G35d2@quasi) (begin (set! G35d2@quasi (lambda (G35ea@p G35eb@lev) ((lambda (G35ee@t) ((lambda (G35f0@ls/false) (if G35f0@ls/false (apply (lambda (G35f2@p) (if (= G35eb@lev '0) ((lambda (G35f4@g) (values (list G35f4@g) (list G35f2@p) G35f4@g)) (gensym)) (call-with-values (lambda () (G35d2@quasi G35f2@p (- G35eb@lev '1))) (lambda (G35f9@G35f6 G35fa@G35f7 G35fb@G35f8) ((lambda (G35ff@p G3600@rhs* G3601@lhs*) (values G3601@lhs* G3600@rhs* (list 'unsyntax G35ff@p))) G35fb@G35f8 G35fa@G35f7 G35f9@G35f6))))) G35f0@ls/false) ((lambda (G3605@t) ((lambda (G3607@ls/false) (if (and G3607@ls/false (apply (lambda () (= G35eb@lev '0)) G3607@ls/false)) (apply (lambda () (G2e3c@syntax-violation '#f '"incorrect use of unsyntax" G35ea@p)) G3607@ls/false) ((lambda (G3609@t) ((lambda (G360b@ls/false) (if G360b@ls/false (apply (lambda (G360d@p* G360e@q) (call-with-values (lambda () (G35d2@quasi G360e@q G35eb@lev)) (lambda (G3614@G3611 G3615@G3612 G3616@G3613) ((lambda (G361a@q G361b@rhs* G361c@lhs*) (if (= G35eb@lev '0) ((lambda (G3620@g*) (values (append G3620@g* G361c@lhs*) (append G360d@p* G361b@rhs*) (append G3620@g* G361a@q))) (map (lambda (G3622@x) (gensym)) G360d@p*)) (call-with-values (lambda () (G35d2@quasi G360d@p* (- G35eb@lev '1))) (lambda (G3627@G3624 G3628@G3625 G3629@G3626) ((lambda (G362d@p* G362e@rhs2* G362f@lhs2*) (values (append G362f@lhs2* G361c@lhs*) (append G362e@rhs2* G361b@rhs*) (cons (cons 'unsyntax G362d@p*) G361a@q))) G3629@G3626 G3628@G3625 G3627@G3624))))) G3616@G3613 G3615@G3612 G3614@G3611)))) G360b@ls/false) ((lambda (G3633@t) ((lambda (G3635@ls/false) (if G3635@ls/false (apply (lambda (G3637@p* G3638@q) (call-with-values (lambda () (G35d2@quasi G3638@q G35eb@lev)) (lambda (G363e@G363b G363f@G363c G3640@G363d) ((lambda (G3644@q G3645@rhs* G3646@lhs*) (if (= G35eb@lev '0) ((lambda (G364a@g*) (values (append (map (lambda (G364c@g) (cons G364c@g '(...))) G364a@g*) G3646@lhs*) (append G3637@p* G3645@rhs*) (append (apply append (map (lambda (G364e@g) (cons G364e@g '(...))) G364a@g*)) G3644@q))) (map (lambda (G3650@x) (gensym)) G3637@p*)) (call-with-values (lambda () (G35d2@quasi G3637@p* (- G35eb@lev '1))) (lambda (G3655@G3652 G3656@G3653 G3657@G3654) ((lambda (G365b@p* G365c@rhs2* G365d@lhs2*) (values (append G365d@lhs2* G3646@lhs*) (append G365c@rhs2* G3645@rhs*) (cons (cons 'unsyntax-splicing G365b@p*) G3644@q))) G3657@G3654 G3656@G3653 G3655@G3652))))) G3640@G363d G363f@G363c G363e@G363b)))) G3635@ls/false) ((lambda (G3661@t) ((lambda (G3663@ls/false) (if (and G3663@ls/false (apply (lambda () (= G35eb@lev '0)) G3663@ls/false)) (apply (lambda () (G2e3c@syntax-violation '#f '"incorrect use of unsyntax-splicing" G35ea@p)) G3663@ls/false) ((lambda (G3665@t) ((lambda (G3667@ls/false) (if G3667@ls/false (apply (lambda (G3669@p) (call-with-values (lambda () (G35d2@quasi G3669@p (+ G35eb@lev '1))) (lambda (G366e@G366b G366f@G366c G3670@G366d) ((lambda (G3674@p G3675@rhs* G3676@lhs*) (values G3676@lhs* G3675@rhs* (list 'quasisyntax G3674@p))) G3670@G366d G366f@G366c G366e@G366b)))) G3667@ls/false) ((lambda (G367a@t) ((lambda (G367c@ls/false) (if G367c@ls/false (apply (lambda (G367e@p G367f@q) (call-with-values (lambda () (G35d2@quasi G367e@p G35eb@lev)) (lambda (G3688@G3682 G3689@G3683 G368a@G3684) (call-with-values (lambda () (G35d2@quasi G367f@q G35eb@lev)) (lambda (G368e@G3685 G368f@G3686 G3690@G3687) ((lambda (G3694@q G3695@rhs2* G3696@lhs2* G3697@p G3698@rhs* G3699@lhs*) (values (append G3696@lhs2* G3699@lhs*) (append G3695@rhs2* G3698@rhs*) (cons G3697@p G3694@q))) G3690@G3687 G368f@G3686 G368e@G3685 G368a@G3684 G3689@G3683 G3688@G3682)))))) G367c@ls/false) ((lambda (G36a0@t) ((lambda (G36a2@ls/false) (if G36a2@ls/false (apply (lambda (G36a4@x*) (call-with-values (lambda () (G35d2@quasi G36a4@x* G35eb@lev)) (lambda (G36a9@G36a6 G36aa@G36a7 G36ab@G36a8) ((lambda (G36af@x* G36b0@rhs* G36b1@lhs*) (values G36b1@lhs* G36b0@rhs* (list->vector G36af@x*))) G36ab@G36a8 G36aa@G36a7 G36a9@G36a6)))) G36a2@ls/false) ((lambda (G36b5@t) ((lambda (G36b7@ls/false) (if G36b7@ls/false (apply (lambda () (values '() '() G35ea@p)) G36b7@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G36b5@t))) (G2d51@syntax-dispatch G36b5@t '_))) G36a0@t))) (G2d51@syntax-dispatch G36a0@t '#(vector each-any)))) G367a@t))) (G2d51@syntax-dispatch G367a@t '(any . any)))) G3665@t))) (G2d51@syntax-dispatch G3665@t '(#(scheme-id quasisyntax) any)))) G3661@t))) (G2d51@syntax-dispatch G3661@t '#(scheme-id unsyntax-splicing)))) G3633@t))) (G2d51@syntax-dispatch G3633@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3609@t))) (G2d51@syntax-dispatch G3609@t '((#(scheme-id unsyntax) . each-any) . any)))) G3605@t))) (G2d51@syntax-dispatch G3605@t '#(scheme-id unsyntax)))) G35ee@t))) (G2d51@syntax-dispatch G35ee@t '(#(scheme-id unsyntax) any)))) G35ea@p))) (lambda (G35d3@x) ((lambda (G35d5@t) ((lambda (G35d7@ls/false) (if G35d7@ls/false (apply (lambda (G35d9@e) (call-with-values (lambda () (G35d2@quasi G35d9@e '0)) (lambda (G35de@G35db G35df@G35dc G35e0@G35dd) ((lambda (G35e4@v G35e5@rhs* G35e6@lhs*) (G2d07@bless (list 'syntax-case (cons 'list G35e5@rhs*) '() (list G35e6@lhs* (list 'syntax G35e4@v))))) G35e0@G35dd G35df@G35dc G35de@G35db)))) G35d7@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G35d5@t))) (G2d51@syntax-dispatch G35d5@t '(_ any)))) G35d3@x)))) '#f)))) (set! G2d43@define-struct-macro (lambda (G36b9@stx) (G2e3c@syntax-violation '#f '"define-struct not supported" G36b9@stx))) (set! G2d45@define-record-type-macro (lambda (G36bb@x) ((lambda (G36be@id G36c0@get-record-name G36c2@get-record-constructor-name G36c4@get-record-predicate-name G36c6@get-clause G36c8@foo-rtd-code G36ca@parent-rtd-code G36cc@parent-rcd-code G36ce@foo-rcd-code G36d0@get-protocol-code G36d2@get-fields G36d4@get-mutator-indices G36d6@get-mutators G36d8@get-accessors G36da@enumerate G36dc@do-define-record G36de@verify-clauses) (begin (set! G36be@id (lambda (G38b1@ctxt . G38b3@str*) (G2e40@datum->syntax G38b1@ctxt (string->symbol (apply string-append (map (lambda (G38b5@x) (if (symbol? G38b5@x) (symbol->string G38b5@x) (if (string? G38b5@x) G38b5@x (assertion-violation 'define-record-type '"BUG")))) G38b3@str*)))))) (set! G36c0@get-record-name (lambda (G389f@spec) ((lambda (G38a1@t) ((lambda (G38a3@ls/false) (if G38a3@ls/false (apply (lambda (G38a5@foo G38a6@make-foo G38a7@foo?) G38a5@foo) G38a3@ls/false) ((lambda (G38ab@t) ((lambda (G38ad@ls/false) (if G38ad@ls/false (apply (lambda (G38af@foo) G38af@foo) G38ad@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G38ab@t))) (G2d51@syntax-dispatch G38ab@t 'any))) G38a1@t))) (G2d51@syntax-dispatch G38a1@t '(any any any)))) G389f@spec))) (set! G36c2@get-record-constructor-name (lambda (G388b@spec) ((lambda (G388d@t) ((lambda (G388f@ls/false) (if G388f@ls/false (apply (lambda (G3891@foo G3892@make-foo G3893@foo?) G3892@make-foo) G388f@ls/false) ((lambda (G3897@t) ((lambda (G3899@ls/false) (if (and G3899@ls/false (apply (lambda (G389b@foo) (G2b60@id? G389b@foo)) G3899@ls/false)) (apply (lambda (G389d@foo) (G36be@id G389d@foo '"make-" (G2b76@stx->datum G389d@foo))) G3899@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3897@t))) (G2d51@syntax-dispatch G3897@t 'any))) G388d@t))) (G2d51@syntax-dispatch G388d@t '(any any any)))) G388b@spec))) (set! G36c4@get-record-predicate-name (lambda (G3877@spec) ((lambda (G3879@t) ((lambda (G387b@ls/false) (if G387b@ls/false (apply (lambda (G387d@foo G387e@make-foo G387f@foo?) G387f@foo?) G387b@ls/false) ((lambda (G3883@t) ((lambda (G3885@ls/false) (if (and G3885@ls/false (apply (lambda (G3887@foo) (G2b60@id? G3887@foo)) G3885@ls/false)) (apply (lambda (G3889@foo) (G36be@id G3889@foo (G2b76@stx->datum G3889@foo) '"?")) G3885@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3883@t))) (G2d51@syntax-dispatch G3883@t 'any))) G3879@t))) (G2d51@syntax-dispatch G3879@t '(any any any)))) G3877@spec))) (set! G36c6@get-clause (lambda (G3865@id G3866@ls) ((lambda (G3869@t) ((lambda (G386b@ls/false) (if G386b@ls/false (apply (lambda () '#f) G386b@ls/false) ((lambda (G386d@t) ((lambda (G386f@ls/false) (if G386f@ls/false (apply (lambda (G3871@x G3872@rest G3873@ls) (if (G2b68@free-id=? (G2d07@bless G3865@id) G3871@x) (cons G3871@x G3872@rest) (G36c6@get-clause G3865@id G3873@ls))) G386f@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G386d@t))) (G2d51@syntax-dispatch G386d@t '((any . any) . any)))) G3869@t))) (G2d51@syntax-dispatch G3869@t '()))) G3866@ls))) (set! G36c8@foo-rtd-code (lambda (G3813@name G3814@clause* G3815@parent-rtd-code) ((lambda (G381a@convert-field-spec*) (begin (set! G381a@convert-field-spec* (lambda (G384b@ls) (list->vector (map (lambda (G384d@x) ((lambda (G384f@t) ((lambda (G3851@ls/false) (if G3851@ls/false (apply (lambda (G3853@name G3854@rest) (list 'mutable G3853@name)) G3851@ls/false) ((lambda (G3857@t) ((lambda (G3859@ls/false) (if G3859@ls/false (apply (lambda (G385b@name G385c@rest) (list 'immutable G385b@name)) G3859@ls/false) ((lambda (G385f@t) ((lambda (G3861@ls/false) (if G3861@ls/false (apply (lambda (G3863@name) (list 'immutable G3863@name)) G3861@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G385f@t))) (G2d51@syntax-dispatch G385f@t 'any))) G3857@t))) (G2d51@syntax-dispatch G3857@t '(#(scheme-id immutable) any . any)))) G384f@t))) (G2d51@syntax-dispatch G384f@t '(#(scheme-id mutable) any . any)))) G384d@x)) G384b@ls)))) ((lambda (G381b@uid-code G381c@sealed? G381d@opaque? G381e@fields) (G2d07@bless (list 'make-record-type-descriptor (list 'quote G3813@name) G3815@parent-rtd-code G381b@uid-code G381c@sealed? G381d@opaque? G381e@fields))) ((lambda (G3823@t) ((lambda (G3825@ls/false) (if G3825@ls/false (apply (lambda () (list 'quote (gensym))) G3825@ls/false) ((lambda (G3827@t) ((lambda (G3829@ls/false) (if G3829@ls/false (apply (lambda (G382b@uid) (list 'quote G382b@uid)) G3829@ls/false) ((lambda (G382d@t) ((lambda (G382f@ls/false) (if G382f@ls/false (apply (lambda () '#f) G382f@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G382d@t))) (G2d51@syntax-dispatch G382d@t '_))) G3827@t))) (G2d51@syntax-dispatch G3827@t '(_ any)))) G3823@t))) (G2d51@syntax-dispatch G3823@t '(_)))) (G36c6@get-clause 'nongenerative G3814@clause*)) ((lambda (G3831@t) ((lambda (G3833@ls/false) (if G3833@ls/false (apply (lambda () '#t) G3833@ls/false) ((lambda (G3835@t) ((lambda (G3837@ls/false) (if G3837@ls/false (apply (lambda () '#f) G3837@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3835@t))) (G2d51@syntax-dispatch G3835@t '_))) G3831@t))) (G2d51@syntax-dispatch G3831@t '(_ #(atom #t))))) (G36c6@get-clause 'sealed G3814@clause*)) ((lambda (G3839@t) ((lambda (G383b@ls/false) (if G383b@ls/false (apply (lambda () '#t) G383b@ls/false) ((lambda (G383d@t) ((lambda (G383f@ls/false) (if G383f@ls/false (apply (lambda () '#f) G383f@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G383d@t))) (G2d51@syntax-dispatch G383d@t '_))) G3839@t))) (G2d51@syntax-dispatch G3839@t '(_ #(atom #t))))) (G36c6@get-clause 'opaque G3814@clause*)) ((lambda (G3841@t) ((lambda (G3843@ls/false) (if G3843@ls/false (apply (lambda (G3845@field-spec*) (list 'quote (G381a@convert-field-spec* G3845@field-spec*))) G3843@ls/false) ((lambda (G3847@t) ((lambda (G3849@ls/false) (if G3849@ls/false (apply (lambda () ''#()) G3849@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3847@t))) (G2d51@syntax-dispatch G3847@t '_))) G3841@t))) (G2d51@syntax-dispatch G3841@t '(_ . each-any)))) (G36c6@get-clause 'fields G3814@clause*))))) '#f))) (set! G36ca@parent-rtd-code (lambda (G37fb@clause*) ((lambda (G37fd@t) ((lambda (G37ff@ls/false) (if G37ff@ls/false (apply (lambda (G3801@name) (list 'record-type-descriptor G3801@name)) G37ff@ls/false) ((lambda (G3803@t) ((lambda (G3805@ls/false) (if G3805@ls/false (apply (lambda () ((lambda (G3807@t) ((lambda (G3809@ls/false) (if G3809@ls/false (apply (lambda (G380b@rtd G380c@rcd) G380b@rtd) G3809@ls/false) ((lambda (G380f@t) ((lambda (G3811@ls/false) (if G3811@ls/false (apply (lambda () '#f) G3811@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G380f@t))) (G2d51@syntax-dispatch G380f@t '#(atom #f)))) G3807@t))) (G2d51@syntax-dispatch G3807@t '(_ any any)))) (G36c6@get-clause 'parent-rtd G37fb@clause*))) G3805@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3803@t))) (G2d51@syntax-dispatch G3803@t '#(atom #f)))) G37fd@t))) (G2d51@syntax-dispatch G37fd@t '(_ any)))) (G36c6@get-clause 'parent G37fb@clause*)))) (set! G36cc@parent-rcd-code (lambda (G37e3@clause*) ((lambda (G37e5@t) ((lambda (G37e7@ls/false) (if G37e7@ls/false (apply (lambda (G37e9@name) (list 'record-constructor-descriptor G37e9@name)) G37e7@ls/false) ((lambda (G37eb@t) ((lambda (G37ed@ls/false) (if G37ed@ls/false (apply (lambda () ((lambda (G37ef@t) ((lambda (G37f1@ls/false) (if G37f1@ls/false (apply (lambda (G37f3@rtd G37f4@rcd) G37f4@rcd) G37f1@ls/false) ((lambda (G37f7@t) ((lambda (G37f9@ls/false) (if G37f9@ls/false (apply (lambda () '#f) G37f9@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G37f7@t))) (G2d51@syntax-dispatch G37f7@t '#(atom #f)))) G37ef@t))) (G2d51@syntax-dispatch G37ef@t '(_ any any)))) (G36c6@get-clause 'parent-rtd G37e3@clause*))) G37ed@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G37eb@t))) (G2d51@syntax-dispatch G37eb@t '#(atom #f)))) G37e5@t))) (G2d51@syntax-dispatch G37e5@t '(_ any)))) (G36c6@get-clause 'parent G37e3@clause*)))) (set! G36ce@foo-rcd-code (lambda (G37db@clause* G37dc@foo-rtd G37dd@protocol G37de@parent-rcd-code) (list 'make-record-constructor-descriptor G37dc@foo-rtd G37de@parent-rcd-code G37dd@protocol))) (set! G36d0@get-protocol-code (lambda (G37cf@clause*) ((lambda (G37d1@t) ((lambda (G37d3@ls/false) (if G37d3@ls/false (apply (lambda (G37d5@expr) G37d5@expr) G37d3@ls/false) ((lambda (G37d7@t) ((lambda (G37d9@ls/false) (if G37d9@ls/false (apply (lambda () '#f) G37d9@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G37d7@t))) (G2d51@syntax-dispatch G37d7@t '_))) G37d1@t))) (G2d51@syntax-dispatch G37d1@t '(_ any)))) (G36c6@get-clause 'protocol G37cf@clause*)))) (set! G36d2@get-fields (lambda (G37bd@clause*) ((lambda (G37bf@t) ((lambda (G37c1@ls/false) (if G37c1@ls/false (apply (lambda () '()) G37c1@ls/false) ((lambda (G37c3@t) ((lambda (G37c5@ls/false) (if G37c5@ls/false (apply (lambda (G37c7@f*) G37c7@f*) G37c5@ls/false) ((lambda (G37c9@t) ((lambda (G37cb@ls/false) (if G37cb@ls/false (apply (lambda (G37cd@rest) (G36d2@get-fields G37cd@rest)) G37cb@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G37c9@t))) (G2d51@syntax-dispatch G37c9@t '(_ . any)))) G37c3@t))) (G2d51@syntax-dispatch G37c3@t '((#(scheme-id fields) . each-any) . _)))) G37bf@t))) (G2d51@syntax-dispatch G37bf@t '()))) G37bd@clause*))) (set! G36d4@get-mutator-indices (lambda (G37a5@fields) ((letrec ((G37a7@f (lambda (G37a9@fields G37aa@i) ((lambda (G37ad@t) ((lambda (G37af@ls/false) (if G37af@ls/false (apply (lambda () '()) G37af@ls/false) ((lambda (G37b1@t) ((lambda (G37b3@ls/false) (if G37b3@ls/false (apply (lambda (G37b5@rest) (cons G37aa@i (G37a7@f G37b5@rest (+ G37aa@i '1)))) G37b3@ls/false) ((lambda (G37b7@t) ((lambda (G37b9@ls/false) (if G37b9@ls/false (apply (lambda (G37bb@rest) (G37a7@f G37bb@rest (+ G37aa@i '1))) G37b9@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G37b7@t))) (G2d51@syntax-dispatch G37b7@t '(_ . any)))) G37b1@t))) (G2d51@syntax-dispatch G37b1@t '((#(scheme-id mutable) . _) . any)))) G37ad@t))) (G2d51@syntax-dispatch G37ad@t '()))) G37a9@fields)))) G37a7@f) G37a5@fields '0))) (set! G36d6@get-mutators (lambda (G377b@foo G377c@fields) ((lambda (G3780@gen-name) (begin (set! G3780@gen-name (lambda (G37a3@x) (G2e40@datum->syntax G377b@foo (string->symbol (string-append (symbol->string (G2e42@syntax->datum G377b@foo)) '"-" (symbol->string (G2e42@syntax->datum G37a3@x)) '"-set!"))))) ((letrec ((G3781@f (lambda (G3783@fields) ((lambda (G3785@t) ((lambda (G3787@ls/false) (if G3787@ls/false (apply (lambda () '()) G3787@ls/false) ((lambda (G3789@t) ((lambda (G378b@ls/false) (if G378b@ls/false (apply (lambda (G378d@name G378e@accessor G378f@mutator G3790@rest) (cons G378f@mutator (G3781@f G3790@rest))) G378b@ls/false) ((lambda (G3795@t) ((lambda (G3797@ls/false) (if G3797@ls/false (apply (lambda (G3799@name G379a@rest) (cons (G3780@gen-name G3799@name) (G3781@f G379a@rest))) G3797@ls/false) ((lambda (G379d@t) ((lambda (G379f@ls/false) (if G379f@ls/false (apply (lambda (G37a1@rest) (G3781@f G37a1@rest)) G379f@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G379d@t))) (G2d51@syntax-dispatch G379d@t '(_ . any)))) G3795@t))) (G2d51@syntax-dispatch G3795@t '((#(scheme-id mutable) any) . any)))) G3789@t))) (G2d51@syntax-dispatch G3789@t '((#(scheme-id mutable) any any any) . any)))) G3785@t))) (G2d51@syntax-dispatch G3785@t '()))) G3783@fields)))) G3781@f) G377c@fields))) '#f))) (set! G36d8@get-accessors (lambda (G3737@foo G3738@fields) ((lambda (G373c@gen-name) (begin (set! G373c@gen-name (lambda (G3779@x) (G2e40@datum->syntax G3737@foo (string->symbol (string-append (symbol->string (G2e42@syntax->datum G3737@foo)) '"-" (symbol->string (G2e42@syntax->datum G3779@x))))))) (map (lambda (G373d@field) ((lambda (G373f@t) ((lambda (G3741@ls/false) (if (and G3741@ls/false (apply (lambda (G3743@name G3744@accessor G3745@mutator) (G2b60@id? G3744@accessor)) G3741@ls/false)) (apply (lambda (G3749@name G374a@accessor G374b@mutator) G374a@accessor) G3741@ls/false) ((lambda (G374f@t) ((lambda (G3751@ls/false) (if (and G3751@ls/false (apply (lambda (G3753@name G3754@accessor) (G2b60@id? G3754@accessor)) G3751@ls/false)) (apply (lambda (G3757@name G3758@accessor) G3758@accessor) G3751@ls/false) ((lambda (G375b@t) ((lambda (G375d@ls/false) (if (and G375d@ls/false (apply (lambda (G375f@name) (G2b60@id? G375f@name)) G375d@ls/false)) (apply (lambda (G3761@name) (G373c@gen-name G3761@name)) G375d@ls/false) ((lambda (G3763@t) ((lambda (G3765@ls/false) (if (and G3765@ls/false (apply (lambda (G3767@name) (G2b60@id? G3767@name)) G3765@ls/false)) (apply (lambda (G3769@name) (G373c@gen-name G3769@name)) G3765@ls/false) ((lambda (G376b@t) ((lambda (G376d@ls/false) (if (and G376d@ls/false (apply (lambda (G376f@name) (G2b60@id? G376f@name)) G376d@ls/false)) (apply (lambda (G3771@name) (G373c@gen-name G3771@name)) G376d@ls/false) ((lambda (G3773@t) ((lambda (G3775@ls/false) (if G3775@ls/false (apply (lambda (G3777@others) (G2e3c@syntax-violation '#f '"invalid field spec" G373d@field)) G3775@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3773@t))) (G2d51@syntax-dispatch G3773@t 'any))) G376b@t))) (G2d51@syntax-dispatch G376b@t 'any))) G3763@t))) (G2d51@syntax-dispatch G3763@t '(#(scheme-id immutable) any)))) G375b@t))) (G2d51@syntax-dispatch G375b@t '(#(scheme-id mutable) any)))) G374f@t))) (G2d51@syntax-dispatch G374f@t '(#(scheme-id immutable) any any)))) G373f@t))) (G2d51@syntax-dispatch G373f@t '(#(scheme-id mutable) any any any)))) G373d@field)) G3738@fields))) '#f))) (set! G36da@enumerate (lambda (G372f@ls) ((letrec ((G3731@f (lambda (G3733@ls G3734@i) (if (null? G3733@ls) '() (cons G3734@i (G3731@f (cdr G3733@ls) (+ G3734@i '1))))))) G3731@f) G372f@ls '0))) (set! G36dc@do-define-record (lambda (G3707@namespec G3708@clause*) ((lambda (G370b@foo) ((lambda (G370d@foo-rtd) ((lambda (G370f@foo-rcd) ((lambda (G3711@protocol) ((lambda (G3713@make-foo) ((lambda (G3715@fields) ((lambda (G3717@idx*) ((lambda (G3719@foo-x*) ((lambda (G371b@set-foo-x!*) ((lambda (G371d@set-foo-idx*) ((lambda (G371f@foo?) ((lambda (G3721@foo-rtd-code) ((lambda (G3723@foo-rcd-code) ((lambda (G3725@protocol-code) ((lambda () (G2d07@bless (cons 'begin (cons (list 'define G370d@foo-rtd G3721@foo-rtd-code) (cons (list 'define G3711@protocol G3725@protocol-code) (cons (list 'define G370f@foo-rcd G3723@foo-rcd-code) (cons (list 'define-syntax G370b@foo (list 'list ''$rtd (list 'syntax G370d@foo-rtd) (list 'syntax G370f@foo-rcd))) (cons (list 'define G371f@foo? (list 'record-predicate G370d@foo-rtd)) (cons (list 'define G3713@make-foo (list 'record-constructor G370f@foo-rcd)) (append (map (lambda (G3727@foo-x G3728@idx) (list 'define G3727@foo-x (list 'record-accessor G370d@foo-rtd G3728@idx))) G3719@foo-x* G3717@idx*) (map (lambda (G372b@set-foo-x! G372c@idx) (list 'define G372b@set-foo-x! (list 'record-mutator G370d@foo-rtd G372c@idx))) G371b@set-foo-x!* G371d@set-foo-idx*))))))))))))) (G36d0@get-protocol-code G3708@clause*))) (G36ce@foo-rcd-code G3708@clause* G370d@foo-rtd G3711@protocol (G36cc@parent-rcd-code G3708@clause*)))) (G36c8@foo-rtd-code G370b@foo G3708@clause* (G36ca@parent-rtd-code G3708@clause*)))) (G36c4@get-record-predicate-name G3707@namespec))) (G36d4@get-mutator-indices G3715@fields))) (G36d6@get-mutators G370b@foo G3715@fields))) (G36d8@get-accessors G370b@foo G3715@fields))) (G36da@enumerate G3715@fields))) (G36d2@get-fields G3708@clause*))) (G36c2@get-record-constructor-name G3707@namespec))) (gensym))) (gensym))) (gensym))) (G36c0@get-record-name G3707@namespec)))) (set! G36de@verify-clauses (lambda (G36e7@x G36e8@cls*) ((lambda (G36ec@valid-kwds G36ee@free-id-member?) (begin (set! G36ec@valid-kwds (map G2d07@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G36ee@free-id-member? (lambda (G3703@x G3704@ls) (and (pair? G3704@ls) (or (G2b68@free-id=? G3703@x (car G3704@ls)) (G36ee@free-id-member? G3703@x (cdr G3704@ls)))))) ((letrec ((G36ef@f (lambda (G36f1@cls* G36f2@seen*) (if (not (null? G36f1@cls*)) ((lambda (G36f5@t) ((lambda (G36f7@ls/false) (if G36f7@ls/false (apply (lambda (G36f9@kwd G36fa@rest) (if (or (not (G2b60@id? G36f9@kwd)) (not (G36ee@free-id-member? G36f9@kwd G36ec@valid-kwds))) (G2e3c@syntax-violation '#f '"not a valid define-record-type keyword" G36f9@kwd) (if (G2b6e@bound-id-member? G36f9@kwd G36f2@seen*) (G2e3c@syntax-violation '#f '"duplicate use of keyword " G36e7@x G36f9@kwd) (G36ef@f (cdr G36f1@cls*) (cons G36f9@kwd G36f2@seen*))))) G36f7@ls/false) ((lambda (G36fd@t) ((lambda (G36ff@ls/false) (if G36ff@ls/false (apply (lambda (G3701@cls) (G2e3c@syntax-violation '#f '"malformed define-record-type clause" G3701@cls)) G36ff@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G36fd@t))) (G2d51@syntax-dispatch G36fd@t 'any))) G36f5@t))) (G2d51@syntax-dispatch G36f5@t '(any . any)))) (car G36f1@cls*)) (void))))) G36ef@f) G36e8@cls* '()))) '#f '#f))) ((lambda (G36df@t) ((lambda (G36e1@ls/false) (if G36e1@ls/false (apply (lambda (G36e3@namespec G36e4@clause*) (begin (G36de@verify-clauses G36bb@x G36e4@clause*) (G36dc@do-define-record G36e3@namespec G36e4@clause*))) G36e1@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G36df@t))) (G2d51@syntax-dispatch G36df@t '(_ any . each-any)))) G36bb@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2d47@define-condition-type-macro (lambda (G38b7@x) ((lambda (G38ba@mkname) (begin (set! G38ba@mkname (lambda (G38e7@name G38e8@suffix) (G2e40@datum->syntax G38e7@name (string->symbol (string-append (symbol->string (G2e42@syntax->datum G38e7@name)) G38e8@suffix))))) ((lambda (G38bb@t) ((lambda (G38bd@ls/false) (if (and G38bd@ls/false (apply (lambda (G38bf@ctxt G38c0@name G38c1@super G38c2@constructor G38c3@predicate G38c4@field* G38c5@accessor*) (and (G2b60@id? G38c0@name) (G2b60@id? G38c1@super) (G2b60@id? G38c2@constructor) (G2b60@id? G38c3@predicate) (for-all G2b60@id? G38c4@field*) (for-all G2b60@id? G38c5@accessor*))) G38bd@ls/false)) (apply (lambda (G38cd@ctxt G38ce@name G38cf@super G38d0@constructor G38d1@predicate G38d2@field* G38d3@accessor*) ((lambda (G38db@aux-accessor*) (G2d07@bless (cons 'begin (cons (cons 'define-record-type (cons (list G38ce@name G38d0@constructor (gensym)) (cons (list 'parent G38cf@super) (cons (cons 'fields (map (lambda (G38dd@field G38de@aux) (list 'immutable G38dd@field G38de@aux)) G38d2@field* G38db@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G38d1@predicate (list 'condition-predicate (list 'record-type-descriptor G38ce@name))) (map (lambda (G38e1@accessor G38e2@aux) (list 'define G38e1@accessor (list 'condition-accessor (list 'record-type-descriptor G38ce@name) G38e2@aux))) G38d3@accessor* G38db@aux-accessor*)))))) (map (lambda (G38e5@x) (gensym)) G38d3@accessor*))) G38bd@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G38bb@t))) (G2d51@syntax-dispatch G38bb@t '(any any any any any . #(each (any any)))))) G38b7@x))) '#f))) (set! G2d49@incorrect-usage-macro (lambda (G38eb@e) (G2e3c@syntax-violation '#f '"incorrect usage of auxiliary keyword" G38eb@e))) (set! G2d4b@parameterize-macro (lambda (G38ed@e) ((lambda (G38ef@t) ((lambda (G38f1@ls/false) (if G38f1@ls/false (apply (lambda (G38f3@b G38f4@b*) (G2d07@bless (cons 'let (cons '() (cons G38f3@b G38f4@b*))))) G38f1@ls/false) ((lambda (G38f7@t) ((lambda (G38f9@ls/false) (if G38f9@ls/false (apply (lambda (G38fb@olhs* G38fc@orhs* G38fd@b G38fe@b*) ((lambda (G3903@lhs* G3904@rhs*) (G2d07@bless (cons (list 'lambda (append G3903@lhs* G3904@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3907@lhs G3908@rhs) (list 'let (list (list 't (list G3907@lhs))) (list G3907@lhs G3908@rhs) (cons 'set! (cons G3908@rhs '(t))))) G3903@lhs* G3904@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G38fd@b G38fe@b*))) '(swap)))))) (append G38fb@olhs* G38fc@orhs*)))) (G2e2a@generate-temporaries G38fb@olhs*) (G2e2a@generate-temporaries G38fc@orhs*))) G38f9@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G38f7@t))) (G2d51@syntax-dispatch G38f7@t '(_ #(each (any any)) any . each-any)))) G38ef@t))) (G2d51@syntax-dispatch G38ef@t '(_ () any . each-any)))) G38ed@e))) (set! G2d4d@foreign-call-transformer (lambda (G390b@e G390c@r G390d@mr) ((lambda (G3911@t) ((lambda (G3913@ls/false) (if G3913@ls/false (apply (lambda (G3915@name G3916@arg*) (cons 'foreign-call (cons (G2d75@chi-expr G3915@name G390c@r G390d@mr) (G2d71@chi-expr* G3916@arg* G390c@r G390d@mr)))) G3913@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3911@t))) (G2d51@syntax-dispatch G3911@t '(_ any . each-any)))) G390b@e))) (set! G2d4f@convert-pattern (lambda (G3919@pattern G391a@keys) ((lambda (G391e@cvt* G3920@cvt) (begin (set! G391e@cvt* (lambda (G39af@p* G39b0@n G39b1@ids) (if (null? G39af@p*) (values '() G39b1@ids) (call-with-values (lambda () (G391e@cvt* (cdr G39af@p*) G39b0@n G39b1@ids)) (lambda (G39b7@G39b5 G39b8@G39b6) ((lambda (G39bb@ids G39bc@y) (call-with-values (lambda () (G3920@cvt (car G39af@p*) G39b0@n G39bb@ids)) (lambda (G39c1@G39bf G39c2@G39c0) ((lambda (G39c5@ids G39c6@x) (values (cons G39c6@x G39bc@y) G39c5@ids)) G39c2@G39c0 G39c1@G39bf)))) G39b8@G39b6 G39b7@G39b5)))))) (set! G3920@cvt (lambda (G3921@p G3922@n G3923@ids) ((lambda (G3927@t) ((lambda (G3929@ls/false) (if (and G3929@ls/false (apply (lambda (G392b@id) (G2b60@id? G392b@id)) G3929@ls/false)) (apply (lambda (G392d@id) (if (G2b6e@bound-id-member? G3921@p G391a@keys) (values (vector 'free-id G3921@p) G3923@ids) (if (G2b68@free-id=? G3921@p (G2cdb@scheme-stx '_)) (values '_ G3923@ids) (values 'any (cons (cons G3921@p G3922@n) G3923@ids))))) G3929@ls/false) ((lambda (G392f@t) ((lambda (G3931@ls/false) (if (and G3931@ls/false (apply (lambda (G3933@p G3934@dots) (G2d53@ellipsis? G3934@dots)) G3931@ls/false)) (apply (lambda (G3937@p G3938@dots) (call-with-values (lambda () (G3920@cvt G3937@p (+ G3922@n '1) G3923@ids)) (lambda (G393d@G393b G393e@G393c) ((lambda (G3941@ids G3942@p) (values (if (eq? G3942@p 'any) 'each-any (vector 'each G3942@p)) G3941@ids)) G393e@G393c G393d@G393b)))) G3931@ls/false) ((lambda (G3945@t) ((lambda (G3947@ls/false) (if (and G3947@ls/false (apply (lambda (G3949@x G394a@dots G394b@ys G394c@z) (G2d53@ellipsis? G394a@dots)) G3947@ls/false)) (apply (lambda (G3951@x G3952@dots G3953@ys G3954@z) (call-with-values (lambda () (G3920@cvt G3954@z G3922@n G3923@ids)) (lambda (G395b@G3959 G395c@G395a) ((lambda (G395f@ids G3960@z) (call-with-values (lambda () (G391e@cvt* G3953@ys G3922@n G395f@ids)) (lambda (G3965@G3963 G3966@G3964) ((lambda (G3969@ids G396a@ys) (call-with-values (lambda () (G3920@cvt G3951@x (+ G3922@n '1) G3969@ids)) (lambda (G396f@G396d G3970@G396e) ((lambda (G3973@ids G3974@x) (values (vector 'each+ G3974@x (reverse G396a@ys) G3960@z) G3973@ids)) G3970@G396e G396f@G396d)))) G3966@G3964 G3965@G3963)))) G395c@G395a G395b@G3959)))) G3947@ls/false) ((lambda (G3977@t) ((lambda (G3979@ls/false) (if G3979@ls/false (apply (lambda (G397b@x G397c@y) (call-with-values (lambda () (G3920@cvt G397c@y G3922@n G3923@ids)) (lambda (G3981@G397f G3982@G3980) ((lambda (G3985@ids G3986@y) (call-with-values (lambda () (G3920@cvt G397b@x G3922@n G3985@ids)) (lambda (G398b@G3989 G398c@G398a) ((lambda (G398f@ids G3990@x) (values (cons G3990@x G3986@y) G398f@ids)) G398c@G398a G398b@G3989)))) G3982@G3980 G3981@G397f)))) G3979@ls/false) ((lambda (G3993@t) ((lambda (G3995@ls/false) (if G3995@ls/false (apply (lambda () (values '() G3923@ids)) G3995@ls/false) ((lambda (G3997@t) ((lambda (G3999@ls/false) (if (and G3999@ls/false (apply (lambda (G399b@p) (not (G2b28@stx? G399b@p))) G3999@ls/false)) (apply (lambda (G399d@p) (call-with-values (lambda () (G3920@cvt G399d@p G3922@n G3923@ids)) (lambda (G39a1@G399f G39a2@G39a0) ((lambda (G39a5@ids G39a6@p) (values (vector 'vector G39a6@p) G39a5@ids)) G39a2@G39a0 G39a1@G399f)))) G3999@ls/false) ((lambda (G39a9@t) ((lambda (G39ab@ls/false) (if G39ab@ls/false (apply (lambda (G39ad@datum) (values (vector 'atom (G2b76@stx->datum G39ad@datum)) G3923@ids)) G39ab@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G39a9@t))) (G2d51@syntax-dispatch G39a9@t 'any))) G3997@t))) (G2d51@syntax-dispatch G3997@t '#(vector each-any)))) G3993@t))) (G2d51@syntax-dispatch G3993@t '()))) G3977@t))) (G2d51@syntax-dispatch G3977@t '(any . any)))) G3945@t))) (G2d51@syntax-dispatch G3945@t '(any any . #(each+ any () any))))) G392f@t))) (G2d51@syntax-dispatch G392f@t '(any any)))) G3927@t))) (G2d51@syntax-dispatch G3927@t 'any))) G3921@p))) (G3920@cvt G3919@pattern '0 '()))) '#f '#f))) (set! G2d51@syntax-dispatch ((lambda () ((lambda (G39ca@stx^ G39cc@match-each G39ce@match-each+ G39d0@match-each-any G39d2@match-empty G39d4@combine G39d6@match* G39d8@match) (begin (set! G39ca@stx^ (lambda (G3a93@e G3a94@m* G3a95@s* G3a96@ae*) (if (and (null? G3a94@m*) (null? G3a95@s*) (null? G3a96@ae*)) G3a93@e (G2b48@mkstx G3a93@e G3a94@m* G3a95@s* G3a96@ae*)))) (set! G39cc@match-each (lambda (G3a76@e G3a77@p G3a78@m* G3a79@s* G3a7a@ae*) (if (pair? G3a76@e) ((lambda (G3a80@first) (and G3a80@first ((lambda (G3a82@rest) (and G3a82@rest (cons G3a80@first G3a82@rest))) (G39cc@match-each (cdr G3a76@e) G3a77@p G3a78@m* G3a79@s* G3a7a@ae*)))) (G39d8@match (car G3a76@e) G3a77@p G3a78@m* G3a79@s* G3a7a@ae* '())) (if (null? G3a76@e) '() (if (G2b28@stx? G3a76@e) (and (not (G2ade@top-marked? G3a78@m*)) (call-with-values (lambda () (G2b46@join-wraps G3a78@m* G3a79@s* G3a7a@ae* G3a76@e)) (lambda (G3a87@G3a84 G3a88@G3a85 G3a89@G3a86) ((lambda (G3a8d@ae* G3a8e@s* G3a8f@m*) (G39cc@match-each (G2b2c@stx-expr G3a76@e) G3a77@p G3a8f@m* G3a8e@s* G3a8d@ae*)) G3a89@G3a86 G3a88@G3a85 G3a87@G3a84)))) (if (G2709@G262c@annotation? G3a76@e) (G39cc@match-each (G270b@G2630@annotation-expression G3a76@e) G3a77@p G3a78@m* G3a79@s* G3a7a@ae*) '#f)))))) (set! G39ce@match-each+ (lambda (G3a3c@e G3a3d@x-pat G3a3e@y-pat G3a3f@z-pat G3a40@m* G3a41@s* G3a42@ae* G3a43@r) ((letrec ((G3a4c@f (lambda (G3a4e@e G3a4f@m* G3a50@s* G3a51@ae*) (if (pair? G3a4e@e) (call-with-values (lambda () (G3a4c@f (cdr G3a4e@e) G3a4f@m* G3a50@s* G3a51@ae*)) (lambda (G3a59@G3a56 G3a5a@G3a57 G3a5b@G3a58) ((lambda (G3a5f@r G3a60@y-pat G3a61@xr*) (if G3a5f@r (if (null? G3a60@y-pat) ((lambda (G3a65@xr) (if G3a65@xr (values (cons G3a65@xr G3a61@xr*) G3a60@y-pat G3a5f@r) (values '#f '#f '#f))) (G39d8@match (car G3a4e@e) G3a3d@x-pat G3a4f@m* G3a50@s* G3a51@ae* '())) (values '() (cdr G3a60@y-pat) (G39d8@match (car G3a4e@e) (car G3a60@y-pat) G3a4f@m* G3a50@s* G3a51@ae* G3a5f@r))) (values '#f '#f '#f))) G3a5b@G3a58 G3a5a@G3a57 G3a59@G3a56))) (if (G2b28@stx? G3a4e@e) (if (G2ade@top-marked? G3a4f@m*) (values '() G3a3e@y-pat (G39d8@match G3a4e@e G3a3f@z-pat G3a4f@m* G3a50@s* G3a51@ae* G3a43@r)) (call-with-values (lambda () (G2b46@join-wraps G3a4f@m* G3a50@s* G3a51@ae* G3a4e@e)) (lambda (G3a6a@G3a67 G3a6b@G3a68 G3a6c@G3a69) ((lambda (G3a70@ae* G3a71@s* G3a72@m*) (G3a4c@f (G2b2c@stx-expr G3a4e@e) G3a72@m* G3a71@s* G3a70@ae*)) G3a6c@G3a69 G3a6b@G3a68 G3a6a@G3a67)))) (if (G2709@G262c@annotation? G3a4e@e) (G3a4c@f (G270b@G2630@annotation-expression G3a4e@e) G3a4f@m* G3a50@s* G3a51@ae*) (values '() G3a3e@y-pat (G39d8@match G3a4e@e G3a3f@z-pat G3a4f@m* G3a50@s* G3a51@ae* G3a43@r)))))))) G3a4c@f) G3a3c@e G3a40@m* G3a41@s* G3a42@ae*))) (set! G39d0@match-each-any (lambda (G3a23@e G3a24@m* G3a25@s* G3a26@ae*) (if (pair? G3a23@e) ((lambda (G3a2b@l) (and G3a2b@l (cons (G39ca@stx^ (car G3a23@e) G3a24@m* G3a25@s* G3a26@ae*) G3a2b@l))) (G39d0@match-each-any (cdr G3a23@e) G3a24@m* G3a25@s* G3a26@ae*)) (if (null? G3a23@e) '() (if (G2b28@stx? G3a23@e) (and (not (G2ade@top-marked? G3a24@m*)) (call-with-values (lambda () (G2b46@join-wraps G3a24@m* G3a25@s* G3a26@ae* G3a23@e)) (lambda (G3a30@G3a2d G3a31@G3a2e G3a32@G3a2f) ((lambda (G3a36@ae* G3a37@s* G3a38@m*) (G39d0@match-each-any (G2b2c@stx-expr G3a23@e) G3a38@m* G3a37@s* G3a36@ae*)) G3a32@G3a2f G3a31@G3a2e G3a30@G3a2d)))) (if (G2709@G262c@annotation? G3a23@e) (G39d0@match-each-any (G270b@G2630@annotation-expression G3a23@e) G3a24@m* G3a25@s* G3a26@ae*) '#f)))))) (set! G39d2@match-empty (lambda (G3a1d@p G3a1e@r) (if (null? G3a1d@p) G3a1e@r (if (eq? G3a1d@p '_) G3a1e@r (if (eq? G3a1d@p 'any) (cons '() G3a1e@r) (if (pair? G3a1d@p) (G39d2@match-empty (car G3a1d@p) (G39d2@match-empty (cdr G3a1d@p) G3a1e@r)) (if (eq? G3a1d@p 'each-any) (cons '() G3a1e@r) ((lambda (G3a21@t) (if (memv G3a21@t '(each)) (G39d2@match-empty (vector-ref G3a1d@p '1) G3a1e@r) (if (memv G3a21@t '(each+)) (G39d2@match-empty (vector-ref G3a1d@p '1) (G39d2@match-empty (reverse (vector-ref G3a1d@p '2)) (G39d2@match-empty (vector-ref G3a1d@p '3) G3a1e@r))) (if (memv G3a21@t '(free-id atom)) G3a1e@r (if (memv G3a21@t '(scheme-id atom)) G3a1e@r (if (memv G3a21@t '(vector)) (G39d2@match-empty (vector-ref G3a1d@p '1) G3a1e@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3a1d@p))))))) (vector-ref G3a1d@p '0))))))))) (set! G39d4@combine (lambda (G3a19@r* G3a1a@r) (if (null? (car G3a19@r*)) G3a1a@r (cons (map car G3a19@r*) (G39d4@combine (map cdr G3a19@r*) G3a1a@r))))) (set! G39d6@match* (lambda (G39f8@e G39f9@p G39fa@m* G39fb@s* G39fc@ae* G39fd@r) (if (null? G39f9@p) (and (null? G39f8@e) G39fd@r) (if (pair? G39f9@p) (and (pair? G39f8@e) (G39d8@match (car G39f8@e) (car G39f9@p) G39fa@m* G39fb@s* G39fc@ae* (G39d8@match (cdr G39f8@e) (cdr G39f9@p) G39fa@m* G39fb@s* G39fc@ae* G39fd@r))) (if (eq? G39f9@p 'each-any) ((lambda (G3a04@l) (and G3a04@l (cons G3a04@l G39fd@r))) (G39d0@match-each-any G39f8@e G39fa@m* G39fb@s* G39fc@ae*)) ((lambda (G3a06@t) (if (memv G3a06@t '(each)) (if (null? G39f8@e) (G39d2@match-empty (vector-ref G39f9@p '1) G39fd@r) ((lambda (G3a08@r*) (and G3a08@r* (G39d4@combine G3a08@r* G39fd@r))) (G39cc@match-each G39f8@e (vector-ref G39f9@p '1) G39fa@m* G39fb@s* G39fc@ae*))) (if (memv G3a06@t '(free-id)) (and (symbol? G39f8@e) (G2ade@top-marked? G39fa@m*) (G2b68@free-id=? (G39ca@stx^ G39f8@e G39fa@m* G39fb@s* G39fc@ae*) (vector-ref G39f9@p '1)) G39fd@r) (if (memv G3a06@t '(scheme-id)) (and (symbol? G39f8@e) (G2ade@top-marked? G39fa@m*) (G2b68@free-id=? (G39ca@stx^ G39f8@e G39fa@m* G39fb@s* G39fc@ae*) (G2cdb@scheme-stx (vector-ref G39f9@p '1))) G39fd@r) (if (memv G3a06@t '(each+)) (call-with-values (lambda () (G39ce@match-each+ G39f8@e (vector-ref G39f9@p '1) (vector-ref G39f9@p '2) (vector-ref G39f9@p '3) G39fa@m* G39fb@s* G39fc@ae* G39fd@r)) (lambda (G3a0d@G3a0a G3a0e@G3a0b G3a0f@G3a0c) ((lambda (G3a13@r G3a14@y-pat G3a15@xr*) (and G3a13@r (null? G3a14@y-pat) (if (null? G3a15@xr*) (G39d2@match-empty (vector-ref G39f9@p '1) G3a13@r) (G39d4@combine G3a15@xr* G3a13@r)))) G3a0f@G3a0c G3a0e@G3a0b G3a0d@G3a0a))) (if (memv G3a06@t '(atom)) (and (fast-equal? (vector-ref G39f9@p '1) (G2b74@strip G39f8@e G39fa@m*)) G39fd@r) (if (memv G3a06@t '(vector)) (and (vector? G39f8@e) (G39d8@match (vector->list G39f8@e) (vector-ref G39f9@p '1) G39fa@m* G39fb@s* G39fc@ae* G39fd@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G39f9@p)))))))) (vector-ref G39f9@p '0))))))) (set! G39d8@match (lambda (G39dd@e G39de@p G39df@m* G39e0@s* G39e1@ae* G39e2@r) (if (not G39e2@r) '#f (if (eq? G39de@p '_) G39e2@r (if (eq? G39de@p 'any) (cons (G39ca@stx^ G39dd@e G39df@m* G39e0@s* G39e1@ae*) G39e2@r) (if (G2b28@stx? G39dd@e) (and (not (G2ade@top-marked? G39df@m*)) (call-with-values (lambda () (G2b46@join-wraps G39df@m* G39e0@s* G39e1@ae* G39dd@e)) (lambda (G39ec@G39e9 G39ed@G39ea G39ee@G39eb) ((lambda (G39f2@ae* G39f3@s* G39f4@m*) (G39d8@match (G2b2c@stx-expr G39dd@e) G39de@p G39f4@m* G39f3@s* G39f2@ae* G39e2@r)) G39ee@G39eb G39ed@G39ea G39ec@G39e9)))) (if (G2709@G262c@annotation? G39dd@e) (G39d8@match (G270b@G2630@annotation-expression G39dd@e) G39de@p G39df@m* G39e0@s* G39e1@ae* G39e2@r) (G39d6@match* G39dd@e G39de@p G39df@m* G39e0@s* G39e1@ae* G39e2@r)))))))) (lambda (G39d9@e G39da@p) (G39d8@match G39d9@e G39da@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d53@ellipsis? (lambda (G3a9b@x) (and (G2b60@id? G3a9b@x) (G2b68@free-id=? G3a9b@x (G2cdb@scheme-stx '...))))) (set! G2d55@underscore? (lambda (G3a9d@x) (and (G2b60@id? G3a9d@x) (G2b68@free-id=? G3a9d@x (G2cdb@scheme-stx '_))))) (set! G2d57@verify-literals (lambda (G3a9f@lits G3aa0@expr) (for-each (lambda (G3aa3@x) (if (or (not (G2b60@id? G3aa3@x)) (G2d53@ellipsis? G3aa3@x) (G2d55@underscore? G3aa3@x)) (G2e3c@syntax-violation '#f '"invalid literal" G3aa0@expr G3aa3@x) (void))) G3a9f@lits))) (set! G2d59@syntax-case-transformer ((lambda () ((lambda (G3aa6@build-dispatch-call G3aa8@invalid-ids-error G3aaa@gen-clause G3aac@gen-syntax-case) (begin (set! G3aa6@build-dispatch-call (lambda (G3b15@pvars G3b16@expr G3b17@y G3b18@r G3b19@mr) ((lambda (G3b1f@ids G3b20@levels) ((lambda (G3b23@labels G3b24@new-vars) ((lambda (G3b27@body) (list '(primitive apply) (G2abe@G2a00@build-lambda '#f G3b24@new-vars G3b27@body) G3b17@y)) (G2d75@chi-expr (G2b4c@add-subst (G2b1b@make-full-rib G3b1f@ids G3b23@labels) G3b16@expr) (append (map (lambda (G3b29@label G3b2a@var G3b2b@level) (cons G3b29@label (G2b80@make-binding 'syntax (cons G3b2a@var G3b2b@level)))) G3b23@labels G3b24@new-vars (map cdr G3b15@pvars)) G3b18@r) G3b19@mr))) (map G2ae4@gen-label G3b1f@ids) (map G2ae0@gen-lexical G3b1f@ids))) (map car G3b15@pvars) (map cdr G3b15@pvars)))) (set! G3aa8@invalid-ids-error (lambda (G3b09@id* G3b0a@e G3b0b@class) ((letrec ((G3b0f@find (lambda (G3b11@id* G3b12@ok*) (if (null? G3b11@id*) (G2e3c@syntax-violation '#f '"invalid syntax" G3b0a@e) (if (G2b60@id? (car G3b11@id*)) (if (G2b6e@bound-id-member? (car G3b11@id*) G3b12@ok*) (G2e38@syntax-error (car G3b11@id*) '"duplicate " G3b0b@class) (G3b0f@find (cdr G3b11@id*) (cons (car G3b11@id*) G3b12@ok*))) (G2e38@syntax-error (car G3b11@id*) '"invalid " G3b0b@class)))))) G3b0f@find) G3b09@id* '()))) (set! G3aaa@gen-clause (lambda (G3ae3@x G3ae4@keys G3ae5@clauses G3ae6@r G3ae7@mr G3ae8@pat G3ae9@fender G3aea@expr) (call-with-values (lambda () (G2d4f@convert-pattern G3ae8@pat G3ae4@keys)) (lambda (G3af5@G3af3 G3af6@G3af4) ((lambda (G3af9@pvars G3afa@p) (if (not (G2b6c@distinct-bound-ids? (map car G3af9@pvars))) (G3aa8@invalid-ids-error (map car G3af9@pvars) G3ae8@pat '"pattern variable") (if (not (for-all (lambda (G3afd@x) (not (G2d53@ellipsis? (car G3afd@x)))) G3af9@pvars)) (G2e3c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3ae8@pat) ((lambda (G3aff@y) ((lambda (G3b01@test) ((lambda (G3b03@conseq) ((lambda (G3b05@altern) (list (G2abe@G2a00@build-lambda '#f (list G3aff@y) (list 'if G3b01@test G3b03@conseq G3b05@altern)) (list '(primitive syntax-dispatch) G3ae3@x (list 'quote G3afa@p)))) (G3aac@gen-syntax-case G3ae3@x G3ae4@keys G3ae5@clauses G3ae6@r G3ae7@mr))) (G3aa6@build-dispatch-call G3af9@pvars G3aea@expr G3aff@y G3ae6@r G3ae7@mr))) (if (eq? G3ae9@fender '#t) G3aff@y ((lambda (G3b07@call) (list 'if G3aff@y G3b07@call (list 'quote '#f))) (G3aa6@build-dispatch-call G3af9@pvars G3ae9@fender G3aff@y G3ae6@r G3ae7@mr))))) (G2ae0@gen-lexical 'tmp))))) G3af6@G3af4 G3af5@G3af3))))) (set! G3aac@gen-syntax-case (lambda (G3ac1@x G3ac2@keys G3ac3@clauses G3ac4@r G3ac5@mr) (if (null? G3ac3@clauses) (list '(primitive syntax-error) G3ac1@x) ((lambda (G3acb@t) ((lambda (G3acd@ls/false) (if G3acd@ls/false (apply (lambda (G3acf@pat G3ad0@expr) (if (and (G2b60@id? G3acf@pat) (not (G2b6e@bound-id-member? G3acf@pat G3ac2@keys)) (not (G2d53@ellipsis? G3acf@pat))) (if (G2b68@free-id=? G3acf@pat (G2cdb@scheme-stx '_)) (G2d75@chi-expr G3ad0@expr G3ac4@r G3ac5@mr) ((lambda (G3ad3@lab G3ad4@lex) ((lambda (G3ad7@body) (list (G2abe@G2a00@build-lambda '#f (list G3ad4@lex) G3ad7@body) G3ac1@x)) (G2d75@chi-expr (G2b4c@add-subst (G2b1b@make-full-rib (list G3acf@pat) (list G3ad3@lab)) G3ad0@expr) (cons (cons G3ad3@lab (G2b80@make-binding 'syntax (cons G3ad4@lex '0))) G3ac4@r) G3ac5@mr))) (G2ae4@gen-label G3acf@pat) (G2ae0@gen-lexical G3acf@pat))) (G3aaa@gen-clause G3ac1@x G3ac2@keys (cdr G3ac3@clauses) G3ac4@r G3ac5@mr G3acf@pat '#t G3ad0@expr))) G3acd@ls/false) ((lambda (G3ad9@t) ((lambda (G3adb@ls/false) (if G3adb@ls/false (apply (lambda (G3add@pat G3ade@fender G3adf@expr) (G3aaa@gen-clause G3ac1@x G3ac2@keys (cdr G3ac3@clauses) G3ac4@r G3ac5@mr G3add@pat G3ade@fender G3adf@expr)) G3adb@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3ad9@t))) (G2d51@syntax-dispatch G3ad9@t '(any any any)))) G3acb@t))) (G2d51@syntax-dispatch G3acb@t '(any any)))) (car G3ac3@clauses))))) (lambda (G3aad@e G3aae@r G3aaf@mr) ((lambda (G3ab3@t) ((lambda (G3ab5@ls/false) (if G3ab5@ls/false (apply (lambda (G3ab7@expr G3ab8@keys G3ab9@clauses) (begin (G2d57@verify-literals G3ab8@keys G3aad@e) ((lambda (G3abd@x) ((lambda (G3abf@body) (list (G2abe@G2a00@build-lambda '#f (list G3abd@x) G3abf@body) (G2d75@chi-expr G3ab7@expr G3aae@r G3aaf@mr))) (G3aac@gen-syntax-case G3abd@x G3ab8@keys G3ab9@clauses G3aae@r G3aaf@mr))) (G2ae0@gen-lexical 'tmp)))) G3ab5@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3ab3@t))) (G2d51@syntax-dispatch G3ab3@t '(_ any each-any . each-any)))) G3aad@e)))) '#f '#f '#f '#f)))) (set! G2d5b@ellipsis-map (lambda (G3b2f@proc G3b30@ls . G3b33@ls*) ((lambda (G3b36@who) (begin (set! G3b36@who '...) (begin (if (not (list? G3b30@ls)) (assertion-violation G3b36@who '"not a list" G3b30@ls) (void)) (if (not (null? G3b33@ls*)) ((lambda (G3b37@n) (for-each (lambda (G3b39@x) (begin (if (not (list? G3b39@x)) (assertion-violation G3b36@who '"not a list" G3b39@x) (void)) (if (not (= (length G3b39@x) G3b37@n)) (assertion-violation G3b36@who '"length mismatch" G3b30@ls G3b39@x) (void)))) G3b33@ls*)) (length G3b30@ls)) (void)) (apply map G3b2f@proc G3b30@ls G3b33@ls*)))) '#f))) (set! G2d5d@syntax-transformer ((lambda () ((lambda (G3b3c@gen-syntax G3b3e@gen-ref G3b40@gen-append G3b42@gen-mappend G3b44@gen-map G3b46@gen-cons G3b48@gen-vector G3b4a@regen) (begin (set! G3b3c@gen-syntax (lambda (G3baf@src G3bb0@e G3bb1@r G3bb2@maps G3bb3@ellipsis? G3bb4@vec?) ((lambda (G3bbb@t) ((lambda (G3bbd@ls/false) (if (and G3bbd@ls/false (apply (lambda (G3bbf@dots) (G3bb3@ellipsis? G3bbf@dots)) G3bbd@ls/false)) (apply (lambda (G3bc1@dots) (G2e3c@syntax-violation '#f '"misplaced ellipsis in syntax form" G3baf@src)) G3bbd@ls/false) ((lambda (G3bc3@t) ((lambda (G3bc5@ls/false) (if (and G3bc5@ls/false (apply (lambda (G3bc7@id) (G2b60@id? G3bc7@id)) G3bc5@ls/false)) (apply (lambda (G3bc9@id) ((lambda (G3bcb@label) ((lambda (G3bcd@b) ((lambda () (if (eq? (G2b82@binding-type G3bcd@b) 'syntax) (call-with-values (lambda () ((lambda (G3bd1@var.lev) (G3b3e@gen-ref G3baf@src (car G3bd1@var.lev) (cdr G3bd1@var.lev) G3bb2@maps)) (G2b84@binding-value G3bcd@b))) (lambda (G3bd3@G3bcf G3bd4@G3bd0) ((lambda (G3bd7@maps G3bd8@var) (values (list 'ref G3bd8@var) G3bd7@maps)) G3bd4@G3bd0 G3bd3@G3bcf))) (values (list 'quote G3bb0@e) G3bb2@maps))))) (G2b7e@label->binding G3bcb@label G3bb1@r))) (G2b7a@id->label G3bb0@e))) G3bc5@ls/false) ((lambda (G3bdb@t) ((lambda (G3bdd@ls/false) (if (and G3bdd@ls/false (apply (lambda (G3bdf@dots G3be0@e) (G3bb3@ellipsis? G3bdf@dots)) G3bdd@ls/false)) (apply (lambda (G3be3@dots G3be4@e) (if G3bb4@vec? (G2e3c@syntax-violation '#f '"misplaced ellipsis in syntax form" G3baf@src) (G3b3c@gen-syntax G3baf@src G3be4@e G3bb1@r G3bb2@maps (lambda (G3be7@x) '#f) '#f))) G3bdd@ls/false) ((lambda (G3be9@t) ((lambda (G3beb@ls/false) (if (and G3beb@ls/false (apply (lambda (G3bed@x G3bee@dots G3bef@y) (G3bb3@ellipsis? G3bee@dots)) G3beb@ls/false)) (apply (lambda (G3bf3@x G3bf4@dots G3bf5@y) ((letrec ((G3bf9@f (lambda (G3bfb@y G3bfc@k) ((lambda (G3bff@t) ((lambda (G3c01@ls/false) (if G3c01@ls/false (apply (lambda () (G3bfc@k G3bb2@maps)) G3c01@ls/false) ((lambda (G3c03@t) ((lambda (G3c05@ls/false) (if (and G3c05@ls/false (apply (lambda (G3c07@dots G3c08@y) (G3bb3@ellipsis? G3c07@dots)) G3c05@ls/false)) (apply (lambda (G3c0b@dots G3c0c@y) (G3bf9@f G3c0c@y (lambda (G3c0f@maps) (call-with-values (lambda () (G3bfc@k (cons '() G3c0f@maps))) (lambda (G3c13@G3c11 G3c14@G3c12) ((lambda (G3c17@maps G3c18@x) (if (null? (car G3c17@maps)) (G2e3c@syntax-violation '#f '"extra ellipsis in syntax form" G3baf@src) (values (G3b42@gen-mappend G3c18@x (car G3c17@maps)) (cdr G3c17@maps)))) G3c14@G3c12 G3c13@G3c11)))))) G3c05@ls/false) ((lambda (G3c1b@t) ((lambda (G3c1d@ls/false) (if G3c1d@ls/false (apply (lambda () (call-with-values (lambda () (G3b3c@gen-syntax G3baf@src G3bfb@y G3bb1@r G3bb2@maps G3bb3@ellipsis? G3bb4@vec?)) (lambda (G3c21@G3c1f G3c22@G3c20) ((lambda (G3c25@maps G3c26@y) (call-with-values (lambda () (G3bfc@k G3c25@maps)) (lambda (G3c2b@G3c29 G3c2c@G3c2a) ((lambda (G3c2f@maps G3c30@x) (values (G3b40@gen-append G3c30@x G3c26@y) G3c2f@maps)) G3c2c@G3c2a G3c2b@G3c29)))) G3c22@G3c20 G3c21@G3c1f)))) G3c1d@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3c1b@t))) (G2d51@syntax-dispatch G3c1b@t '_))) G3c03@t))) (G2d51@syntax-dispatch G3c03@t '(any . any)))) G3bff@t))) (G2d51@syntax-dispatch G3bff@t '()))) G3bfb@y)))) G3bf9@f) G3bf5@y (lambda (G3c33@maps) (call-with-values (lambda () (G3b3c@gen-syntax G3baf@src G3bf3@x G3bb1@r (cons '() G3c33@maps) G3bb3@ellipsis? '#f)) (lambda (G3c37@G3c35 G3c38@G3c36) ((lambda (G3c3b@maps G3c3c@x) (if (null? (car G3c3b@maps)) (G2e3c@syntax-violation '#f '"extra ellipsis in syntax form" G3baf@src) (values (G3b44@gen-map G3c3c@x (car G3c3b@maps)) (cdr G3c3b@maps)))) G3c38@G3c36 G3c37@G3c35)))))) G3beb@ls/false) ((lambda (G3c3f@t) ((lambda (G3c41@ls/false) (if G3c41@ls/false (apply (lambda (G3c43@x G3c44@y) (call-with-values (lambda () (G3b3c@gen-syntax G3baf@src G3c43@x G3bb1@r G3bb2@maps G3bb3@ellipsis? '#f)) (lambda (G3c49@G3c47 G3c4a@G3c48) ((lambda (G3c4d@maps G3c4e@xnew) (call-with-values (lambda () (G3b3c@gen-syntax G3baf@src G3c44@y G3bb1@r G3c4d@maps G3bb3@ellipsis? G3bb4@vec?)) (lambda (G3c53@G3c51 G3c54@G3c52) ((lambda (G3c57@maps G3c58@ynew) (values (G3b46@gen-cons G3bb0@e G3c43@x G3c44@y G3c4e@xnew G3c58@ynew) G3c57@maps)) G3c54@G3c52 G3c53@G3c51)))) G3c4a@G3c48 G3c49@G3c47)))) G3c41@ls/false) ((lambda (G3c5b@t) ((lambda (G3c5d@ls/false) (if G3c5d@ls/false (apply (lambda (G3c5f@ls) (call-with-values (lambda () (G3b3c@gen-syntax G3baf@src G3c5f@ls G3bb1@r G3bb2@maps G3bb3@ellipsis? '#t)) (lambda (G3c63@G3c61 G3c64@G3c62) ((lambda (G3c67@maps G3c68@lsnew) (values (G3b48@gen-vector G3bb0@e G3c5f@ls G3c68@lsnew) G3c67@maps)) G3c64@G3c62 G3c63@G3c61)))) G3c5d@ls/false) ((lambda (G3c6b@t) ((lambda (G3c6d@ls/false) (if G3c6d@ls/false (apply (lambda () (values (list 'quote G3bb0@e) G3bb2@maps)) G3c6d@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3c6b@t))) (G2d51@syntax-dispatch G3c6b@t '_))) G3c5b@t))) (G2d51@syntax-dispatch G3c5b@t '#(vector each-any)))) G3c3f@t))) (G2d51@syntax-dispatch G3c3f@t '(any . any)))) G3be9@t))) (G2d51@syntax-dispatch G3be9@t '(any any . any)))) G3bdb@t))) (G2d51@syntax-dispatch G3bdb@t '(any any)))) G3bc3@t))) (G2d51@syntax-dispatch G3bc3@t 'any))) G3bbb@t))) (G2d51@syntax-dispatch G3bbb@t 'any))) G3bb0@e))) (set! G3b3e@gen-ref (lambda (G3b97@src G3b98@var G3b99@level G3b9a@maps) (if (= G3b99@level '0) (values G3b98@var G3b9a@maps) (if (null? G3b9a@maps) (G2e3c@syntax-violation '#f '"missing ellipsis in syntax form" G3b97@src) (call-with-values (lambda () (G3b3e@gen-ref G3b97@src G3b98@var (- G3b99@level '1) (cdr G3b9a@maps))) (lambda (G3ba1@G3b9f G3ba2@G3ba0) ((lambda (G3ba5@outer-maps G3ba6@outer-var) ((lambda (G3ba9@t) (if G3ba9@t ((lambda (G3bab@b) (values (cdr G3bab@b) G3b9a@maps)) G3ba9@t) ((lambda (G3bad@inner-var) (values G3bad@inner-var (cons (cons (cons G3ba6@outer-var G3bad@inner-var) (car G3b9a@maps)) G3ba5@outer-maps))) (G2ae0@gen-lexical 'tmp)))) (assq G3ba6@outer-var (car G3b9a@maps)))) G3ba2@G3ba0 G3ba1@G3b9f))))))) (set! G3b40@gen-append (lambda (G3b93@x G3b94@y) (if (fast-equal? G3b94@y ''()) G3b93@x (list 'append G3b93@x G3b94@y)))) (set! G3b42@gen-mappend (lambda (G3b8f@e G3b90@map-env) (list 'apply '(primitive append) (G3b44@gen-map G3b8f@e G3b90@map-env)))) (set! G3b44@gen-map (lambda (G3b7d@e G3b7e@map-env) ((lambda (G3b81@formals G3b82@actuals) (if (eq? (car G3b7d@e) 'ref) (car G3b82@actuals) (if (for-all (lambda (G3b85@x) (and (eq? (car G3b85@x) 'ref) (memq (cadr G3b85@x) G3b81@formals))) (cdr G3b7d@e)) ((lambda (G3b87@args) (cons 'map (cons (list 'primitive (car G3b7d@e)) G3b87@args))) (map ((lambda (G3b89@r) (lambda (G3b8b@x) (cdr (assq (cadr G3b8b@x) G3b89@r)))) (map cons G3b81@formals G3b82@actuals)) (cdr G3b7d@e))) (cons* 'map (list 'lambda G3b81@formals G3b7d@e) G3b82@actuals)))) (map cdr G3b7e@map-env) (map (lambda (G3b8d@x) (list 'ref (car G3b8d@x))) G3b7e@map-env)))) (set! G3b46@gen-cons (lambda (G3b6d@e G3b6e@x G3b6f@y G3b70@xnew G3b71@ynew) ((lambda (G3b77@t) (if (memv G3b77@t '(quote)) (if (eq? (car G3b70@xnew) 'quote) ((lambda (G3b79@xnew G3b7a@ynew) (if (and (eq? G3b79@xnew G3b6e@x) (eq? G3b7a@ynew G3b6f@y)) (list 'quote G3b6d@e) (list 'quote (cons G3b79@xnew G3b7a@ynew)))) (cadr G3b70@xnew) (cadr G3b71@ynew)) (if (null? (cadr G3b71@ynew)) (list 'list G3b70@xnew) (list 'cons G3b70@xnew G3b71@ynew))) (if (memv G3b77@t '(list)) (cons 'list (cons G3b70@xnew (cdr G3b71@ynew))) (list 'cons G3b70@xnew G3b71@ynew)))) (car G3b71@ynew)))) (set! G3b48@gen-vector (lambda (G3b67@e G3b68@ls G3b69@lsnew) (if (eq? (car G3b69@lsnew) 'quote) (if (eq? (cadr G3b69@lsnew) G3b68@ls) (list 'quote G3b67@e) (list 'quote (list->vector (cadr G3b69@lsnew)))) (if (eq? (car G3b69@lsnew) 'list) (cons 'vector (cdr G3b69@lsnew)) (list 'list->vector G3b69@lsnew))))) (set! G3b4a@regen (lambda (G3b61@x) ((lambda (G3b63@t) (if (memv G3b63@t '(ref)) (cadr G3b61@x) (if (memv G3b63@t '(primitive)) (list 'primitive (cadr G3b61@x)) (if (memv G3b63@t '(quote)) (list 'quote (cadr G3b61@x)) (if (memv G3b63@t '(lambda)) (G2abe@G2a00@build-lambda '#f (cadr G3b61@x) (G3b4a@regen (caddr G3b61@x))) (if (memv G3b63@t '(map)) ((lambda (G3b65@ls) (cons '(primitive ellipsis-map) G3b65@ls)) (map G3b4a@regen (cdr G3b61@x))) (cons (list 'primitive (car G3b61@x)) (map G3b4a@regen (cdr G3b61@x))))))))) (car G3b61@x)))) (lambda (G3b4b@e G3b4c@r G3b4d@mr) ((lambda (G3b51@t) ((lambda (G3b53@ls/false) (if G3b53@ls/false (apply (lambda (G3b55@x) (call-with-values (lambda () (G3b3c@gen-syntax G3b4b@e G3b55@x G3b4c@r '() G2d53@ellipsis? '#f)) (lambda (G3b59@G3b57 G3b5a@G3b58) ((lambda (G3b5d@maps G3b5e@e) (G3b4a@regen G3b5e@e)) G3b5a@G3b58 G3b59@G3b57)))) G3b53@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3b51@t))) (G2d51@syntax-dispatch G3b51@t '(_ any)))) G3b4b@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d5f@core-macro-transformer (lambda (G3c6f@name) ((lambda (G3c71@t) (if (memv G3c71@t '(quote)) G2d01@quote-transformer (if (memv G3c71@t '(lambda)) G2d05@lambda-transformer (if (memv G3c71@t '(case-lambda)) G2d03@case-lambda-transformer (if (memv G3c71@t '(letrec)) G2ce9@letrec-transformer (if (memv G3c71@t '(letrec*)) G2ceb@letrec*-transformer (if (memv G3c71@t '(if)) G2cf9@if-transformer (if (memv G3c71@t '(and)) G2cfb@and-transformer (if (memv G3c71@t '(or)) G2cfd@or-transformer (if (memv G3c71@t '(foreign-call)) G2d4d@foreign-call-transformer (if (memv G3c71@t '(syntax-case)) G2d59@syntax-case-transformer (if (memv G3c71@t '(syntax)) G2d5d@syntax-transformer (if (memv G3c71@t '(type-descriptor)) G2cef@type-descriptor-transformer (if (memv G3c71@t '(record-type-descriptor)) G2cf1@record-type-descriptor-transformer (if (memv G3c71@t '(record-constructor-descriptor)) G2cf3@record-constructor-descriptor-transformer (if (memv G3c71@t '(fluid-let-syntax)) G2ced@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3c6f@name))))))))))))))))) G3c6f@name))) (set! G2d61@file-options-macro (lambda (G3c73@x) ((lambda (G3c76@valid-option?) (begin (set! G3c76@valid-option? (lambda (G3c7f@x) (and (G2b60@id? G3c7f@x) (memq (G2b62@id->sym G3c7f@x) '(no-fail no-create no-truncate))))) ((lambda (G3c77@t) ((lambda (G3c79@ls/false) (if (and G3c79@ls/false (apply (lambda (G3c7b@opt*) (and (for-all G3c76@valid-option? G3c7b@opt*) (G2715@G26a6@file-options-spec (map G2b62@id->sym G3c7b@opt*)))) G3c79@ls/false)) (apply (lambda (G3c7d@opt*) (G2d07@bless (list 'quote (G2715@G26a6@file-options-spec (map G2b62@id->sym G3c7d@opt*))))) G3c79@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3c77@t))) (G2d51@syntax-dispatch G3c77@t '(_ . each-any)))) G3c73@x))) '#f))) (set! G2d63@symbol-macro (lambda (G3c81@x G3c82@set) ((lambda (G3c85@t) ((lambda (G3c87@ls/false) (if (and G3c87@ls/false (apply (lambda (G3c89@name) (and (G2b60@id? G3c89@name) (memq (G2b62@id->sym G3c89@name) G3c82@set))) G3c87@ls/false)) (apply (lambda (G3c8b@name) (G2d07@bless (list 'quote G3c8b@name))) G3c87@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3c85@t))) (G2d51@syntax-dispatch G3c85@t '(_ any)))) G3c81@x))) (set! G2d65@macro-transformer (lambda (G3c8d@x) (if (procedure? G3c8d@x) G3c8d@x (if (symbol? G3c8d@x) ((lambda (G3c8f@t) (if (memv G3c8f@t '(define-record-type)) G2d45@define-record-type-macro (if (memv G3c8f@t '(define-struct)) G2d43@define-struct-macro (if (memv G3c8f@t '(include)) G2d39@include-macro (if (memv G3c8f@t '(cond)) G2d35@cond-macro (if (memv G3c8f@t '(let)) G2d0d@let-macro (if (memv G3c8f@t '(do)) G2d2d@do-macro (if (memv G3c8f@t '(or)) G2d31@or-macro (if (memv G3c8f@t '(and)) G2d33@and-macro (if (memv G3c8f@t '(let*)) G2d2f@let*-macro (if (memv G3c8f@t '(let-values)) G2d0f@let-values-macro (if (memv G3c8f@t '(let*-values)) G2d11@let*-values-macro (if (memv G3c8f@t '(syntax-rules)) G2d3d@syntax-rules-macro (if (memv G3c8f@t '(quasiquote)) G2d3f@quasiquote-macro (if (memv G3c8f@t '(quasisyntax)) G2d41@quasisyntax-macro (if (memv G3c8f@t '(with-syntax)) G2d09@with-syntax-macro (if (memv G3c8f@t '(when)) G2cf5@when-macro (if (memv G3c8f@t '(unless)) G2cf7@unless-macro (if (memv G3c8f@t '(case)) G2cff@case-macro (if (memv G3c8f@t '(identifier-syntax)) G2d2b@identifier-syntax-macro (if (memv G3c8f@t '(time)) G2d23@time-macro (if (memv G3c8f@t '(delay)) G2d25@delay-macro (if (memv G3c8f@t '(assert)) G2d27@assert-macro (if (memv G3c8f@t '(endianness)) G2d29@endianness-macro (if (memv G3c8f@t '(guard)) G2d1f@guard-macro (if (memv G3c8f@t '(define-enumeration)) G2d21@define-enumeration-macro (if (memv G3c8f@t '(trace-lambda)) G2d13@trace-lambda-macro (if (memv G3c8f@t '(trace-define)) G2d15@trace-define-macro (if (memv G3c8f@t '(trace-define-syntax)) G2d17@trace-define-syntax-macro (if (memv G3c8f@t '(trace-let-syntax)) G2d1b@trace-let-syntax-macro (if (memv G3c8f@t '(trace-letrec-syntax)) G2d1d@trace-letrec-syntax-macro (if (memv G3c8f@t '(define-condition-type)) G2d47@define-condition-type-macro (if (memv G3c8f@t '(parameterize)) G2d4b@parameterize-macro (if (memv G3c8f@t '(include-into)) G2d3b@include-into-macro (if (memv G3c8f@t '(eol-style)) (lambda (G3c91@x) (G2d63@symbol-macro G3c91@x '(none lf cr crlf nel crnel ls))) (if (memv G3c8f@t '(error-handling-mode)) (lambda (G3c93@x) (G2d63@symbol-macro G3c93@x '(ignore raise replace))) (if (memv G3c8f@t '(buffer-mode)) (lambda (G3c95@x) (G2d63@symbol-macro G3c95@x '(none line block))) (if (memv G3c8f@t '(file-options)) G2d61@file-options-macro (if (memv G3c8f@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2d49@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3c8d@x)))))))))))))))))))))))))))))))))))))))) G3c8d@x) (error 'core-macro-transformer '"BUG: invalid macro" G3c8d@x))))) (set! G2d67@local-macro-transformer (lambda (G3c97@x) (car G3c97@x))) (set! G2d69@do-macro-call (lambda (G3c99@transformer G3c9a@expr) ((lambda (G3c9d@out) (begin ((letrec ((G3c9f@f (lambda (G3ca1@x) (if (not (G2b28@stx? G3ca1@x)) (if (pair? G3ca1@x) (begin (G3c9f@f (car G3ca1@x)) (G3c9f@f (cdr G3ca1@x))) (if (vector? G3ca1@x) (vector-for-each G3c9f@f G3ca1@x) (if (symbol? G3ca1@x) (G2e3c@syntax-violation '#f '"raw symbol encountered in output of macro" G3c9a@expr G3ca1@x) (void)))) (void))))) G3c9f@f) G3c9d@out) (G2b4a@add-mark (G2b40@gen-mark) G3c9d@out G3c9a@expr))) (G3c99@transformer (G2b4a@add-mark G2b42@anti-mark G3c9a@expr '#f))))) (set! G2d6b@chi-macro (lambda (G3ca3@p G3ca4@e) (G2d69@do-macro-call (G2d65@macro-transformer G3ca3@p) G3ca4@e))) (set! G2d6d@chi-local-macro (lambda (G3ca7@p G3ca8@e) (G2d69@do-macro-call (G2d67@local-macro-transformer G3ca7@p) G3ca8@e))) (set! G2d6f@chi-global-macro (lambda (G3cab@p G3cac@e) ((lambda (G3caf@lib G3cb0@loc) (begin (G2989@G2831@visit-library G3caf@lib) ((lambda (G3cb3@x) ((lambda (G3cb5@transformer) (G2d69@do-macro-call G3cb5@transformer G3cac@e)) (if (procedure? G3cb3@x) G3cb3@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3cb3@x)))) (symbol-value G3cb0@loc)))) (car G3cab@p) (cdr G3cab@p)))) (set! G2d71@chi-expr* (lambda (G3cb7@e* G3cb8@r G3cb9@mr) (if (null? G3cb7@e*) '() ((lambda (G3cbd@e) (cons G3cbd@e (G2d71@chi-expr* (cdr G3cb7@e*) G3cb8@r G3cb9@mr))) (G2d75@chi-expr (car G3cb7@e*) G3cb8@r G3cb9@mr))))) (set! G2d73@chi-application (lambda (G3cbf@e G3cc0@r G3cc1@mr) ((lambda (G3cc5@t) ((lambda (G3cc7@ls/false) (if G3cc7@ls/false (apply (lambda (G3cc9@rator G3cca@rands) ((lambda (G3ccd@rator) (cons G3ccd@rator (G2d71@chi-expr* G3cca@rands G3cc0@r G3cc1@mr))) (G2d75@chi-expr G3cc9@rator G3cc0@r G3cc1@mr))) G3cc7@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3cc5@t))) (G2d51@syntax-dispatch G3cc5@t '(any . each-any)))) G3cbf@e))) (set! G2d75@chi-expr (lambda (G3ccf@e G3cd0@r G3cd1@mr) (call-with-values (lambda () (G2b88@syntax-type G3ccf@e G3cd0@r)) (lambda (G3cd8@G3cd5 G3cd9@G3cd6 G3cda@G3cd7) ((lambda (G3cde@kwd G3cdf@value G3ce0@type) ((lambda (G3ce4@t) (if (memv G3ce4@t '(core-macro)) ((lambda (G3ce6@transformer) (G3ce6@transformer G3ccf@e G3cd0@r G3cd1@mr)) (G2d5f@core-macro-transformer G3cdf@value)) (if (memv G3ce4@t '(global)) ((lambda (G3ce8@lib) ((lambda (G3cea@loc) ((lambda () (begin ((G2dbe@inv-collector) G3ce8@lib) G3cea@loc)))) (cdr G3cdf@value))) (car G3cdf@value)) (if (memv G3ce4@t '(core-prim)) ((lambda (G3cec@name) (list 'primitive G3cec@name)) G3cdf@value) (if (memv G3ce4@t '(call)) (G2d73@chi-application G3ccf@e G3cd0@r G3cd1@mr) (if (memv G3ce4@t '(lexical)) ((lambda (G3cee@lex) G3cee@lex) (G2cdd@lexical-var G3cdf@value)) (if (memv G3ce4@t '(global-macro global-macro!)) (G2d75@chi-expr (G2d6f@chi-global-macro G3cdf@value G3ccf@e) G3cd0@r G3cd1@mr) (if (memv G3ce4@t '(local-macro local-macro!)) (G2d75@chi-expr (G2d6d@chi-local-macro G3cdf@value G3ccf@e) G3cd0@r G3cd1@mr) (if (memv G3ce4@t '(macro macro!)) (G2d75@chi-expr (G2d6b@chi-macro G3cdf@value G3ccf@e) G3cd0@r G3cd1@mr) (if (memv G3ce4@t '(constant)) ((lambda (G3cf0@datum) (list 'quote G3cf0@datum)) G3cdf@value) (if (memv G3ce4@t '(set!)) (G2d77@chi-set! G3ccf@e G3cd0@r G3cd1@mr) (if (memv G3ce4@t '(begin)) ((lambda (G3cf2@t) ((lambda (G3cf4@ls/false) (if G3cf4@ls/false (apply (lambda (G3cf6@x G3cf7@x*) (G2ac1@G2a32@build-sequence '#f (G2d71@chi-expr* (cons G3cf6@x G3cf7@x*) G3cd0@r G3cd1@mr))) G3cf4@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3cf2@t))) (G2d51@syntax-dispatch G3cf2@t '(_ any . each-any)))) G3ccf@e) (if (memv G3ce4@t '(let-syntax letrec-syntax)) ((lambda (G3cfa@t) ((lambda (G3cfc@ls/false) (if (and G3cfc@ls/false (apply (lambda (G3cfe@xlhs* G3cff@xrhs* G3d00@xbody G3d01@xbody*) (if (not (G2b6a@valid-bound-ids? G3cfe@xlhs*)) (G2e3c@syntax-violation '#f '"invalid identifiers" G3ccf@e) (void))) G3cfc@ls/false)) (apply (lambda (G3d06@xlhs* G3d07@xrhs* G3d08@xbody G3d09@xbody*) ((lambda (G3d0e@xlab*) ((lambda (G3d10@xrib) ((lambda (G3d12@xb*) ((lambda () (G2ac1@G2a32@build-sequence '#f (G2d71@chi-expr* (map (lambda (G3d14@x) (G2b4c@add-subst G3d10@xrib G3d14@x)) (cons G3d08@xbody G3d09@xbody*)) (append (map cons G3d0e@xlab* G3d12@xb*) G3cd0@r) (append (map cons G3d0e@xlab* G3d12@xb*) G3cd1@mr)))))) (map (lambda (G3d16@x) (G2b9e@make-eval-transformer (G2db0@expand-transformer (if (eq? G3ce0@type 'let-syntax) G3d16@x (G2b4c@add-subst G3d10@xrib G3d16@x)) G3cd1@mr))) G3d07@xrhs*))) (G2b1b@make-full-rib G3d06@xlhs* G3d0e@xlab*))) (map G2ae4@gen-label G3d06@xlhs*))) G3cfc@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3cfa@t))) (G2d51@syntax-dispatch G3cfa@t '(_ #(each (any any)) any . each-any)))) G3ccf@e) (if (memv G3ce4@t '(displaced-lexical)) (G2e3c@syntax-violation '#f '"identifier out of context" G3ccf@e) (if (memv G3ce4@t '(syntax)) (G2e3c@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ccf@e) (if (memv G3ce4@t '(define define-syntax module import library)) (G2e3c@syntax-violation '#f (string-append ((lambda (G3d18@t) (if (memv G3d18@t '(define)) '"a definition" (if (memv G3d18@t '(define-syntax)) '"a define-syntax" (if (memv G3d18@t '(module)) '"a module definition" (if (memv G3d18@t '(library)) '"a library definition" (if (memv G3d18@t '(import)) '"an import declaration" (if (memv G3d18@t '(export)) '"an export declaration" '"a non-expression"))))))) G3ce0@type) '" was found where an expression was expected") G3ccf@e) (if (memv G3ce4@t '(mutable)) (G2e3c@syntax-violation '#f '"attempt to reference an unexportable variable" G3ccf@e) (G2e3c@syntax-violation '#f '"invalid expression" G3ccf@e)))))))))))))))))) G3ce0@type)) G3cda@G3cd7 G3cd9@G3cd6 G3cd8@G3cd5))))) (set! G2d77@chi-set! (lambda (G3d1a@e G3d1b@r G3d1c@mr) ((lambda (G3d20@t) ((lambda (G3d22@ls/false) (if (and G3d22@ls/false (apply (lambda (G3d24@x G3d25@v) (G2b60@id? G3d24@x)) G3d22@ls/false)) (apply (lambda (G3d28@x G3d29@v) (call-with-values (lambda () (G2b88@syntax-type G3d28@x G3d1b@r)) (lambda (G3d2f@G3d2c G3d30@G3d2d G3d31@G3d2e) ((lambda (G3d35@kwd G3d36@value G3d37@type) ((lambda (G3d3b@t) (if (memv G3d3b@t '(lexical)) (begin (G2ce1@set-lexical-mutable! G3d36@value '#t) (list 'set! (G2cdd@lexical-var G3d36@value) (G2d75@chi-expr G3d29@v G3d1b@r G3d1c@mr))) (if (memv G3d3b@t '(core-prim)) (G2e3c@syntax-violation '#f '"cannot modify imported core primitive" G3d1a@e) (if (memv G3d3b@t '(global)) (G2e3c@syntax-violation '#f '"attempt to modify imported binding" G3d1a@e) (if (memv G3d3b@t '(global-macro!)) (G2d75@chi-expr (G2d6f@chi-global-macro G3d36@value G3d1a@e) G3d1b@r G3d1c@mr) (if (memv G3d3b@t '(local-macro!)) (G2d75@chi-expr (G2d6d@chi-local-macro G3d36@value G3d1a@e) G3d1b@r G3d1c@mr) (if (memv G3d3b@t '(mutable)) (G2e3c@syntax-violation '#f '"attempt to assign to an unexportable variable" G3d1a@e) (G2e3c@syntax-violation '#f '"invalid syntax" G3d1a@e)))))))) G3d37@type)) G3d31@G3d2e G3d30@G3d2d G3d2f@G3d2c)))) G3d22@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3d20@t))) (G2d51@syntax-dispatch G3d20@t '(_ any any)))) G3d1a@e))) (set! G2d79@verify-formals (lambda (G3d3d@fmls G3d3e@stx) ((lambda (G3d41@t) ((lambda (G3d43@ls/false) (if G3d43@ls/false (apply (lambda (G3d45@x*) (if (not (G2b6a@valid-bound-ids? G3d45@x*)) (G2d0b@invalid-fmls-error G3d3e@stx G3d3d@fmls) (void))) G3d43@ls/false) ((lambda (G3d47@t) ((lambda (G3d49@ls/false) (if G3d49@ls/false (apply (lambda (G3d4b@x* G3d4c@x) (if (not (G2b6a@valid-bound-ids? (cons G3d4c@x G3d4b@x*))) (G2d0b@invalid-fmls-error G3d3e@stx G3d3d@fmls) (void))) G3d49@ls/false) ((lambda (G3d4f@t) ((lambda (G3d51@ls/false) (if G3d51@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"invalid syntax" G3d3e@stx)) G3d51@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3d4f@t))) (G2d51@syntax-dispatch G3d4f@t '_))) G3d47@t))) (G2d51@syntax-dispatch G3d47@t '#(each+ any () any)))) G3d41@t))) (G2d51@syntax-dispatch G3d41@t 'each-any))) G3d3d@fmls))) (set! G2d7b@chi-lambda-clause (lambda (G3d53@stx G3d54@fmls G3d55@body* G3d56@r G3d57@mr) ((lambda (G3d5d@t) ((lambda (G3d5f@ls/false) (if G3d5f@ls/false (apply (lambda (G3d61@x*) (begin (G2d79@verify-formals G3d54@fmls G3d53@stx) ((lambda (G3d63@lex* G3d64@lab*) (values G3d63@lex* (G2d8b@chi-internal (G2b4c@add-subst (G2b1b@make-full-rib G3d61@x* G3d64@lab*) G3d55@body*) (G2ce5@add-lexicals G3d64@lab* G3d63@lex* G3d56@r) G3d57@mr))) (map G2ae0@gen-lexical G3d61@x*) (map G2ae4@gen-label G3d61@x*)))) G3d5f@ls/false) ((lambda (G3d67@t) ((lambda (G3d69@ls/false) (if G3d69@ls/false (apply (lambda (G3d6b@x* G3d6c@x) (begin (G2d79@verify-formals G3d54@fmls G3d53@stx) ((lambda (G3d6f@lex* G3d70@lab* G3d71@lex G3d72@lab) (values (append G3d6f@lex* G3d71@lex) (G2d8b@chi-internal (G2b4c@add-subst (G2b1b@make-full-rib (cons G3d6c@x G3d6b@x*) (cons G3d72@lab G3d70@lab*)) G3d55@body*) (G2ce5@add-lexicals (cons G3d72@lab G3d70@lab*) (cons G3d71@lex G3d6f@lex*) G3d56@r) G3d57@mr))) (map G2ae0@gen-lexical G3d6b@x*) (map G2ae4@gen-label G3d6b@x*) (G2ae0@gen-lexical G3d6c@x) (G2ae4@gen-label G3d6c@x)))) G3d69@ls/false) ((lambda (G3d77@t) ((lambda (G3d79@ls/false) (if G3d79@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"invalid syntax" G3d54@fmls)) G3d79@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3d77@t))) (G2d51@syntax-dispatch G3d77@t '_))) G3d67@t))) (G2d51@syntax-dispatch G3d67@t '#(each+ any () any)))) G3d5d@t))) (G2d51@syntax-dispatch G3d5d@t 'each-any))) G3d54@fmls))) (set! G2d7d@chi-lambda-clause* (lambda (G3d7b@stx G3d7c@fmls* G3d7d@body** G3d7e@r G3d7f@mr) (if (null? G3d7c@fmls*) (values '() '()) (call-with-values (lambda () (G2d7b@chi-lambda-clause G3d7b@stx (car G3d7c@fmls*) (car G3d7d@body**) G3d7e@r G3d7f@mr)) (lambda (G3d87@G3d85 G3d88@G3d86) ((lambda (G3d8b@b G3d8c@a) (call-with-values (lambda () (G2d7d@chi-lambda-clause* G3d7b@stx (cdr G3d7c@fmls*) (cdr G3d7d@body**) G3d7e@r G3d7f@mr)) (lambda (G3d91@G3d8f G3d92@G3d90) ((lambda (G3d95@b* G3d96@a*) (values (cons G3d8c@a G3d96@a*) (cons G3d8b@b G3d95@b*))) G3d92@G3d90 G3d91@G3d8f)))) G3d88@G3d86 G3d87@G3d85)))))) (set! G2d7f@chi-defun (lambda (G3d99@x G3d9a@r G3d9b@mr) ((lambda (G3d9f@fmls G3da0@body*) (call-with-values (lambda () (G2d7b@chi-lambda-clause G3d9f@fmls G3d9f@fmls G3da0@body* G3d9a@r G3d9b@mr)) (lambda (G3da5@G3da3 G3da6@G3da4) ((lambda (G3da9@body G3daa@fmls) (G2abe@G2a00@build-lambda '#f G3daa@fmls G3da9@body)) G3da6@G3da4 G3da5@G3da3)))) (car G3d99@x) (cdr G3d99@x)))) (set! G2d81@chi-rhs (lambda (G3dad@rhs G3dae@r G3daf@mr) ((lambda (G3db3@t) (if (memv G3db3@t '(defun)) (G2d7f@chi-defun (cdr G3dad@rhs) G3dae@r G3daf@mr) (if (memv G3db3@t '(expr)) ((lambda (G3db5@expr) (G2d75@chi-expr G3db5@expr G3dae@r G3daf@mr)) (cdr G3dad@rhs)) (if (memv G3db3@t '(top-expr)) ((lambda (G3db7@expr) (G2ac1@G2a32@build-sequence '#f (list (G2d75@chi-expr G3db7@expr G3dae@r G3daf@mr) (G2ac2@G2a34@build-void)))) (cdr G3dad@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3dad@rhs))))) (car G3dad@rhs)))) (set! G2d83@expand-interaction-rhs*/init* (lambda (G3db9@lhs* G3dba@rhs* G3dbb@init* G3dbc@r G3dbd@mr) ((letrec ((G3dc3@f (lambda (G3dc5@lhs* G3dc6@rhs*) (if (null? G3dc5@lhs*) (map (lambda (G3dc9@x) (G2d75@chi-expr G3dc9@x G3dbc@r G3dbd@mr)) G3dbb@init*) ((lambda (G3dcb@lhs G3dcc@rhs) ((lambda (G3dcf@t) (if (memv G3dcf@t '(defun)) ((lambda (G3dd1@rhs) (cons (list 'set! G3dcb@lhs G3dd1@rhs) (G3dc3@f (cdr G3dc5@lhs*) (cdr G3dc6@rhs*)))) (G2d7f@chi-defun (cdr G3dcc@rhs) G3dbc@r G3dbd@mr)) (if (memv G3dcf@t '(expr)) ((lambda (G3dd3@rhs) (cons (list 'set! G3dcb@lhs G3dd3@rhs) (G3dc3@f (cdr G3dc5@lhs*) (cdr G3dc6@rhs*)))) (G2d75@chi-expr (cdr G3dcc@rhs) G3dbc@r G3dbd@mr)) (if (memv G3dcf@t '(top-expr)) ((lambda (G3dd5@e) (cons G3dd5@e (G3dc3@f (cdr G3dc5@lhs*) (cdr G3dc6@rhs*)))) (G2d75@chi-expr (cdr G3dcc@rhs) G3dbc@r G3dbd@mr)) (error 'expand-interaction '"invallid" G3dcc@rhs))))) (car G3dcc@rhs))) (car G3dc5@lhs*) (car G3dc6@rhs*)))))) G3dc3@f) G3db9@lhs* G3dba@rhs*))) (set! G2d85@chi-rhs* (lambda (G3dd7@rhs* G3dd8@r G3dd9@mr) ((letrec ((G3ddd@f (lambda (G3ddf@ls) (if (null? G3ddf@ls) '() ((lambda (G3de1@a) (cons G3de1@a (G3ddd@f (cdr G3ddf@ls)))) (G2d81@chi-rhs (car G3ddf@ls) G3dd8@r G3dd9@mr)))))) G3ddd@f) G3dd7@rhs*))) (set! G2d87@find-bound=? (lambda (G3de3@x G3de4@lhs* G3de5@rhs*) (if (null? G3de4@lhs*) '#f (if (G2b66@bound-id=? G3de3@x (car G3de4@lhs*)) (car G3de5@rhs*) (G2d87@find-bound=? G3de3@x (cdr G3de4@lhs*) (cdr G3de5@rhs*)))))) (set! G2d89@find-dups (lambda (G3de9@ls) ((letrec ((G3deb@f (lambda (G3ded@ls G3dee@dups) (if (null? G3ded@ls) G3dee@dups ((lambda (G3df1@t) (if G3df1@t ((lambda (G3df3@x) (G3deb@f (cdr G3ded@ls) (cons (list (car G3ded@ls) G3df3@x) G3dee@dups))) G3df1@t) (G3deb@f (cdr G3ded@ls) G3dee@dups))) (G2d87@find-bound=? (car G3ded@ls) (cdr G3ded@ls) (cdr G3ded@ls))))))) G3deb@f) G3de9@ls '()))) (set! G2d8b@chi-internal (lambda (G3df5@e* G3df6@r G3df7@mr) ((lambda (G3dfb@rib) (call-with-values (lambda () (G2dae@chi-body* (map (lambda (G3e05@x) (G2b4c@add-subst G3dfb@rib G3e05@x)) (G2b5e@syntax->list G3df5@e*)) G3df6@r G3df7@mr '() '() '() '() '() G3dfb@rib '#f)) (lambda (G3e07@G3dfd G3e08@G3dfe G3e09@G3dff G3e0a@G3e00 G3e0b@G3e01 G3e0c@G3e02 G3e0d@G3e03 G3e0e@G3e04) ((lambda (G3e17@_exp* G3e18@kwd* G3e19@mod** G3e1a@rhs* G3e1b@lex* G3e1c@mr G3e1d@r G3e1e@e*) (begin (if (null? G3e1e@e*) (G2e3c@syntax-violation '#f '"no expression in body" G3e1e@e*) (void)) ((lambda (G3e27@init*) ((lambda (G3e29@rhs*) ((lambda () (G2ac4@G2a38@build-letrec* '#f (reverse G3e1b@lex*) (reverse G3e29@rhs*) (G2ac1@G2a32@build-sequence '#f G3e27@init*))))) (G2d85@chi-rhs* G3e1a@rhs* G3e1d@r G3e1c@mr))) (G2d71@chi-expr* (append (apply append (reverse G3e19@mod**)) G3e1e@e*) G3e1d@r G3e1c@mr)))) G3e0e@G3e04 G3e0d@G3e03 G3e0c@G3e02 G3e0b@G3e01 G3e0a@G3e00 G3e09@G3dff G3e08@G3dfe G3e07@G3dfd)))) (G2b0f@make-empty-rib)))) (set! G2d8d@parse-module (lambda (G3e2b@e) ((lambda (G3e2d@t) ((lambda (G3e2f@ls/false) (if G3e2f@ls/false (apply (lambda (G3e31@export* G3e32@b*) (begin (if (not (for-all G2b60@id? G3e31@export*)) (G2e3c@syntax-violation '#f '"module exports must be identifiers" G3e2b@e) (void)) (values '#f (list->vector G3e31@export*) G3e32@b*))) G3e2f@ls/false) ((lambda (G3e35@t) ((lambda (G3e37@ls/false) (if G3e37@ls/false (apply (lambda (G3e39@name G3e3a@export* G3e3b@b*) (begin (if (not (G2b60@id? G3e39@name)) (G2e3c@syntax-violation '#f '"module name must be an identifier" G3e2b@e) (void)) (if (not (for-all G2b60@id? G3e3a@export*)) (G2e3c@syntax-violation '#f '"module exports must be identifiers" G3e2b@e) (void)) (values G3e39@name (list->vector G3e3a@export*) G3e3b@b*))) G3e37@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3e35@t))) (G2d51@syntax-dispatch G3e35@t '(_ any each-any . each-any)))) G3e2d@t))) (G2d51@syntax-dispatch G3e2d@t '(_ each-any . each-any)))) G3e2b@e))) (set! G2d93@G2d8e (make-record-type-descriptor 'module-interface '#f 'G2d91 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2d95@G2d90 '#f) (set! G2d97@G2d8f (make-record-constructor-descriptor G2d93@G2d8e '#f G2d95@G2d90)) (set! G2d9a@module-interface? (record-predicate G2d93@G2d8e)) (set! G2d9c@make-module-interface (record-constructor G2d97@G2d8f)) (set! G2d9e@module-interface-first-mark (record-accessor G2d93@G2d8e '0)) (set! G2da0@module-interface-exp-id-vec (record-accessor G2d93@G2d8e '1)) (set! G2da2@module-interface-exp-lab-vec (record-accessor G2d93@G2d8e '2)) (set! G2da4@set-module-interface-first-mark! (record-mutator G2d93@G2d8e '0)) (set! G2da6@set-module-interface-exp-id-vec! (record-mutator G2d93@G2d8e '1)) (set! G2da8@set-module-interface-exp-lab-vec! (record-mutator G2d93@G2d8e '2)) (set! G2daa@module-interface-exp-id* (lambda (G3e3f@iface G3e40@id) ((lambda (G3e44@diff-marks) (begin (set! G3e44@diff-marks (lambda (G3e4b@ls G3e4c@x) (begin (if (null? G3e4b@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G3e4f@a) (if (eq? G3e4f@a G3e4c@x) '() (cons G3e4f@a (G3e44@diff-marks (cdr G3e4b@ls) G3e4c@x)))) (car G3e4b@ls))))) ((lambda (G3e45@diff G3e46@id-vec) (if (null? G3e45@diff) G3e46@id-vec (vector-map (lambda (G3e49@x) (G2b2a@make-stx (G2b2c@stx-expr G3e49@x) (append G3e45@diff (G2b2e@stx-mark* G3e49@x)) '() '())) G3e46@id-vec))) (G3e44@diff-marks (G2b2e@stx-mark* G3e40@id) (G2d9e@module-interface-first-mark G3e3f@iface)) (G2da0@module-interface-exp-id-vec G3e3f@iface)))) '#f))) (set! G2dac@chi-internal-module (lambda (G3e51@e G3e52@r G3e53@mr G3e54@lex* G3e55@rhs* G3e56@mod** G3e57@kwd*) (call-with-values (lambda () (G2d8d@parse-module G3e51@e)) (lambda (G3e62@G3e5f G3e63@G3e60 G3e64@G3e61) ((lambda (G3e68@e* G3e69@exp-id* G3e6a@name) ((lambda (G3e6e@rib) ((lambda (G3e70@e*) ((lambda () (call-with-values (lambda () (G2dae@chi-body* G3e70@e* G3e52@r G3e53@mr G3e54@lex* G3e55@rhs* G3e56@mod** G3e57@kwd* '() G3e6e@rib '#f)) (lambda (G3e7a@G3e72 G3e7b@G3e73 G3e7c@G3e74 G3e7d@G3e75 G3e7e@G3e76 G3e7f@G3e77 G3e80@G3e78 G3e81@G3e79) ((lambda (G3e8a@_exp* G3e8b@kwd* G3e8c@mod** G3e8d@rhs* G3e8e@lex* G3e8f@mr G3e90@r G3e91@e*) ((lambda (G3e9a@exp-lab* G3e9b@mod**) (if (not G3e6a@name) (values G3e8e@lex* G3e8d@rhs* G3e69@exp-id* G3e9a@exp-lab* G3e90@r G3e8f@mr G3e9b@mod** G3e8b@kwd*) ((lambda (G3e9e@lab G3e9f@iface) (values G3e8e@lex* G3e8d@rhs* (vector G3e6a@name) (vector G3e9e@lab) (cons (cons G3e9e@lab (cons '$module G3e9f@iface)) G3e90@r) (cons (cons G3e9e@lab (cons '$module G3e9f@iface)) G3e8f@mr) G3e9b@mod** G3e8b@kwd*)) (G2ae4@gen-label 'module) (G2d9c@make-module-interface (car (G2b2e@stx-mark* G3e6a@name)) (vector-map (lambda (G3ea2@x) (G2b2a@make-stx (G2b2c@stx-expr G3ea2@x) (G2b2e@stx-mark* G3ea2@x) '() '())) G3e69@exp-id*) G3e9a@exp-lab*)))) (vector-map (lambda (G3ea4@x) (or (G2b7a@id->label (G2b2a@make-stx (G2b62@id->sym G3ea4@x) (G2b2e@stx-mark* G3ea4@x) (list G3e6e@rib) '())) (G2e3c@syntax-violation '#f '"cannot find module export" G3ea4@x))) G3e69@exp-id*) (cons G3e91@e* G3e8c@mod**))) G3e81@G3e79 G3e80@G3e78 G3e7f@G3e77 G3e7e@G3e76 G3e7d@G3e75 G3e7c@G3e74 G3e7b@G3e73 G3e7a@G3e72)))))) (map (lambda (G3ea6@x) (G2b4c@add-subst G3e6e@rib G3ea6@x)) (G2b5e@syntax->list G3e68@e*)))) (G2b0f@make-empty-rib))) G3e64@G3e61 G3e63@G3e60 G3e62@G3e5f))))) (set! G2dae@chi-body* (lambda (G3ea8@e* G3ea9@r G3eaa@mr G3eab@lex* G3eac@rhs* G3ead@mod** G3eae@kwd* G3eaf@exp* G3eb0@rib G3eb1@top?) (if (null? G3ea8@e*) (values G3ea8@e* G3ea9@r G3eaa@mr G3eab@lex* G3eac@rhs* G3ead@mod** G3eae@kwd* G3eaf@exp*) ((lambda (G3ebc@e) (call-with-values (lambda () (G2b88@syntax-type G3ebc@e G3ea9@r)) (lambda (G3ec1@G3ebe G3ec2@G3ebf G3ec3@G3ec0) ((lambda (G3ec7@kwd G3ec8@value G3ec9@type) ((lambda (G3ecd@kwd*) ((lambda (G3ecf@t) (if (memv G3ecf@t '(define)) (call-with-values (lambda () (G2cd5@parse-define G3ebc@e)) (lambda (G3ed3@G3ed1 G3ed4@G3ed2) ((lambda (G3ed7@rhs G3ed8@id) (begin (if (G2b6e@bound-id-member? G3ed8@id G3ecd@kwd*) (G2e3c@syntax-violation '#f '"cannot redefine keyword" G3ebc@e) (void)) (call-with-values (lambda () (G2ae8@gen-define-label+loc G3ed8@id G3eb0@rib)) (lambda (G3edd@G3edb G3ede@G3edc) ((lambda (G3ee1@lex G3ee2@lab) (begin (G2b11@extend-rib! G3eb0@rib G3ed8@id G3ee2@lab) (G2dae@chi-body* (cdr G3ea8@e*) (G2ce3@add-lexical G3ee2@lab G3ee1@lex G3ea9@r) G3eaa@mr (cons G3ee1@lex G3eab@lex*) (cons G3ed7@rhs G3eac@rhs*) G3ead@mod** G3ecd@kwd* G3eaf@exp* G3eb0@rib G3eb1@top?))) G3ede@G3edc G3edd@G3edb))))) G3ed4@G3ed2 G3ed3@G3ed1))) (if (memv G3ecf@t '(define-syntax)) (call-with-values (lambda () (G2cd7@parse-define-syntax G3ebc@e)) (lambda (G3ee7@G3ee5 G3ee8@G3ee6) ((lambda (G3eeb@rhs G3eec@id) (begin (if (G2b6e@bound-id-member? G3eec@id G3ecd@kwd*) (G2e3c@syntax-violation '#f '"cannot redefine keyword" G3ebc@e) (void)) ((lambda (G3eef@lab G3ef0@expanded-rhs) (begin (G2b11@extend-rib! G3eb0@rib G3eec@id G3eef@lab) ((lambda (G3ef3@b) (G2dae@chi-body* (cdr G3ea8@e*) (cons (cons G3eef@lab G3ef3@b) G3ea9@r) (cons (cons G3eef@lab G3ef3@b) G3eaa@mr) G3eab@lex* G3eac@rhs* G3ead@mod** G3ecd@kwd* G3eaf@exp* G3eb0@rib G3eb1@top?)) (G2b9e@make-eval-transformer G3ef0@expanded-rhs)))) (G2aea@gen-define-label G3eec@id G3eb0@rib) (G2db0@expand-transformer G3eeb@rhs G3eaa@mr)))) G3ee8@G3ee6 G3ee7@G3ee5))) (if (memv G3ecf@t '(let-syntax letrec-syntax)) ((lambda (G3ef5@t) ((lambda (G3ef7@ls/false) (if (and G3ef7@ls/false (apply (lambda (G3ef9@xlhs* G3efa@xrhs* G3efb@xbody*) (if (not (G2b6a@valid-bound-ids? G3ef9@xlhs*)) (G2e3c@syntax-violation '#f '"invalid identifiers" G3ebc@e) (void))) G3ef7@ls/false)) (apply (lambda (G3eff@xlhs* G3f00@xrhs* G3f01@xbody*) ((lambda (G3f05@xlab*) ((lambda (G3f07@xrib) ((lambda (G3f09@xb*) ((lambda () (G2dae@chi-body* (append (map (lambda (G3f0b@x) (G2b4c@add-subst G3f07@xrib G3f0b@x)) G3f01@xbody*) (cdr G3ea8@e*)) (append (map cons G3f05@xlab* G3f09@xb*) G3ea9@r) (append (map cons G3f05@xlab* G3f09@xb*) G3eaa@mr) G3eab@lex* G3eac@rhs* G3ead@mod** G3ecd@kwd* G3eaf@exp* G3eb0@rib G3eb1@top?)))) (map (lambda (G3f0d@x) (G2b9e@make-eval-transformer (G2db0@expand-transformer (if (eq? G3ec9@type 'let-syntax) G3f0d@x (G2b4c@add-subst G3f07@xrib G3f0d@x)) G3eaa@mr))) G3f00@xrhs*))) (G2b1b@make-full-rib G3eff@xlhs* G3f05@xlab*))) (map G2ae4@gen-label G3eff@xlhs*))) G3ef7@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3ef5@t))) (G2d51@syntax-dispatch G3ef5@t '(_ #(each (any any)) . each-any)))) G3ebc@e) (if (memv G3ecf@t '(begin)) ((lambda (G3f0f@t) ((lambda (G3f11@ls/false) (if G3f11@ls/false (apply (lambda (G3f13@x*) (G2dae@chi-body* (append G3f13@x* (cdr G3ea8@e*)) G3ea9@r G3eaa@mr G3eab@lex* G3eac@rhs* G3ead@mod** G3ecd@kwd* G3eaf@exp* G3eb0@rib G3eb1@top?)) G3f11@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3f0f@t))) (G2d51@syntax-dispatch G3f0f@t '(_ . each-any)))) G3ebc@e) (if (memv G3ecf@t '(global-macro global-macro!)) (G2dae@chi-body* (cons (G2b4c@add-subst G3eb0@rib (G2d6f@chi-global-macro G3ec8@value G3ebc@e)) (cdr G3ea8@e*)) G3ea9@r G3eaa@mr G3eab@lex* G3eac@rhs* G3ead@mod** G3ecd@kwd* G3eaf@exp* G3eb0@rib G3eb1@top?) (if (memv G3ecf@t '(local-macro local-macro!)) (G2dae@chi-body* (cons (G2b4c@add-subst G3eb0@rib (G2d6d@chi-local-macro G3ec8@value G3ebc@e)) (cdr G3ea8@e*)) G3ea9@r G3eaa@mr G3eab@lex* G3eac@rhs* G3ead@mod** G3ecd@kwd* G3eaf@exp* G3eb0@rib G3eb1@top?) (if (memv G3ecf@t '(macro macro!)) (G2dae@chi-body* (cons (G2b4c@add-subst G3eb0@rib (G2d6b@chi-macro G3ec8@value G3ebc@e)) (cdr G3ea8@e*)) G3ea9@r G3eaa@mr G3eab@lex* G3eac@rhs* G3ead@mod** G3ecd@kwd* G3eaf@exp* G3eb0@rib G3eb1@top?) (if (memv G3ecf@t '(module)) (call-with-values (lambda () (G2dac@chi-internal-module G3ebc@e G3ea9@r G3eaa@mr G3eab@lex* G3eac@rhs* G3ead@mod** G3ecd@kwd*)) (lambda (G3f1d@G3f15 G3f1e@G3f16 G3f1f@G3f17 G3f20@G3f18 G3f21@G3f19 G3f22@G3f1a G3f23@G3f1b G3f24@G3f1c) ((lambda (G3f2d@kwd* G3f2e@mod** G3f2f@mr G3f30@r G3f31@m-exp-lab* G3f32@m-exp-id* G3f33@rhs* G3f34@lex*) (begin (vector-for-each (lambda (G3f3d@id G3f3e@lab) (G2b11@extend-rib! G3eb0@rib G3f3d@id G3f3e@lab)) G3f32@m-exp-id* G3f31@m-exp-lab*) (G2dae@chi-body* (cdr G3ea8@e*) G3f30@r G3f2f@mr G3f34@lex* G3f33@rhs* G3f2e@mod** G3f2d@kwd* G3eaf@exp* G3eb0@rib G3eb1@top?))) G3f24@G3f1c G3f23@G3f1b G3f22@G3f1a G3f21@G3f19 G3f20@G3f18 G3f1f@G3f17 G3f1e@G3f16 G3f1d@G3f15))) (if (memv G3ecf@t '(library)) (begin (G2e1e@library-expander (G2b76@stx->datum G3ebc@e)) (G2dae@chi-body* (cdr G3ea8@e*) G3ea9@r G3eaa@mr G3eab@lex* G3eac@rhs* G3ead@mod** G3ecd@kwd* G3eaf@exp* G3eb0@rib G3eb1@top?)) (if (memv G3ecf@t '(export)) ((lambda (G3f41@t) ((lambda (G3f43@ls/false) (if G3f43@ls/false (apply (lambda (G3f45@exp-decl*) (G2dae@chi-body* (cdr G3ea8@e*) G3ea9@r G3eaa@mr G3eab@lex* G3eac@rhs* G3ead@mod** G3ecd@kwd* (append G3f45@exp-decl* G3eaf@exp*) G3eb0@rib G3eb1@top?)) G3f43@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3f41@t))) (G2d51@syntax-dispatch G3f41@t '(_ . each-any)))) G3ebc@e) (if (memv G3ecf@t '(import)) ((lambda () ((lambda (G3f48@module-import? G3f4a@module-import G3f4c@library-import) (begin (set! G3f48@module-import? (lambda (G3f94@e) ((lambda (G3f96@t) ((lambda (G3f98@ls/false) (if (and G3f98@ls/false (apply (lambda (G3f9a@id) (G2b60@id? G3f9a@id)) G3f98@ls/false)) (apply (lambda (G3f9c@id) '#t) G3f98@ls/false) ((lambda (G3f9e@t) ((lambda (G3fa0@ls/false) (if G3fa0@ls/false (apply (lambda (G3fa2@imp*) '#f) G3fa0@ls/false) ((lambda (G3fa4@t) ((lambda (G3fa6@ls/false) (if G3fa6@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"malformed import form" G3f94@e)) G3fa6@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3fa4@t))) (G2d51@syntax-dispatch G3fa4@t '_))) G3f9e@t))) (G2d51@syntax-dispatch G3f9e@t '(_ . each-any)))) G3f96@t))) (G2d51@syntax-dispatch G3f96@t '(_ any)))) G3f94@e))) (set! G3f4a@module-import (lambda (G3f75@e G3f76@r) ((lambda (G3f79@t) ((lambda (G3f7b@ls/false) (if (and G3f7b@ls/false (apply (lambda (G3f7d@id) (G2b60@id? G3f7d@id)) G3f7b@ls/false)) (apply (lambda (G3f7f@id) (call-with-values (lambda () (G2b88@syntax-type G3f7f@id G3f76@r)) (lambda (G3f84@G3f81 G3f85@G3f82 G3f86@G3f83) ((lambda (G3f8a@kwd G3f8b@value G3f8c@type) ((lambda (G3f90@t) (if (memv G3f90@t '($module)) ((lambda (G3f92@iface) (values (G2daa@module-interface-exp-id* G3f92@iface G3f7f@id) (G2da2@module-interface-exp-lab-vec G3f92@iface))) G3f8b@value) (G2e3c@syntax-violation '#f '"invalid import" G3f75@e))) G3f8c@type)) G3f86@G3f83 G3f85@G3f82 G3f84@G3f81)))) G3f7b@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3f79@t))) (G2d51@syntax-dispatch G3f79@t '(_ any)))) G3f75@e))) (set! G3f4c@library-import (lambda (G3f5b@e) ((lambda (G3f5d@t) ((lambda (G3f5f@ls/false) (if G3f5f@ls/false (apply (lambda (G3f61@ctxt G3f62@imp*) (call-with-values (lambda () (G2db8@parse-import-spec* (G2e42@syntax->datum G3f62@imp*))) (lambda (G3f67@G3f65 G3f68@G3f66) ((lambda (G3f6b@subst-labels G3f6c@subst-names) (values (vector-map (lambda (G3f6f@name) (G2b3e@datum->stx G3f61@ctxt G3f6f@name)) G3f6c@subst-names) G3f6b@subst-labels)) G3f68@G3f66 G3f67@G3f65)))) G3f5f@ls/false) ((lambda (G3f71@t) ((lambda (G3f73@ls/false) (if G3f73@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"invalid import form" G3f5b@e)) G3f73@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3f71@t))) (G2d51@syntax-dispatch G3f71@t '_))) G3f5d@t))) (G2d51@syntax-dispatch G3f5d@t '(any . each-any)))) G3f5b@e))) (begin (call-with-values (lambda () (if (G3f48@module-import? G3ebc@e) (G3f4a@module-import G3ebc@e G3ea9@r) (G3f4c@library-import G3ebc@e))) (lambda (G3f4f@G3f4d G3f50@G3f4e) ((lambda (G3f53@lab* G3f54@id*) (vector-for-each (lambda (G3f57@id G3f58@lab) (G2b11@extend-rib! G3eb0@rib G3f57@id G3f58@lab)) G3f54@id* G3f53@lab*)) G3f50@G3f4e G3f4f@G3f4d))) (G2dae@chi-body* (cdr G3ea8@e*) G3ea9@r G3eaa@mr G3eab@lex* G3eac@rhs* G3ead@mod** G3ecd@kwd* G3eaf@exp* G3eb0@rib G3eb1@top?)))) '#f '#f '#f))) (if G3eb1@top? (G2dae@chi-body* (cdr G3ea8@e*) G3ea9@r G3eaa@mr (cons (G2ae0@gen-lexical 'dummy) G3eab@lex*) (cons (cons 'top-expr G3ebc@e) G3eac@rhs*) G3ead@mod** G3ecd@kwd* G3eaf@exp* G3eb0@rib G3eb1@top?) (values G3ea8@e* G3ea9@r G3eaa@mr G3eab@lex* G3eac@rhs* G3ead@mod** G3ecd@kwd* G3eaf@exp*)))))))))))))) G3ec9@type)) (if (G2b60@id? G3ec7@kwd) (cons G3ec7@kwd G3eae@kwd*) G3eae@kwd*))) G3ec3@G3ec0 G3ec2@G3ebf G3ec1@G3ebe)))) (car G3ea8@e*))))) (set! G2db0@expand-transformer (lambda (G3fa8@expr G3fa9@r) ((lambda (G3fac@rtc) ((lambda (G3fae@expanded-rhs) (begin (for-each ((lambda (G3fb0@mark-visit) (lambda (G3fb2@x) (begin (G2988@G282f@invoke-library G3fb2@x) (G3fb0@mark-visit G3fb2@x)))) (G2dc0@vis-collector)) (G3fac@rtc)) G3fae@expanded-rhs)) ((lambda (G3fb8@G3fb4 G3fb9@G3fb5 G3fba@G3fb6 G3fbb@G3fb7) ((lambda (G3fc0@swap) (dynamic-wind G3fc0@swap (lambda () (G2d75@chi-expr G3fa8@expr G3fa9@r G3fa9@r)) G3fc0@swap)) (lambda () (begin ((lambda (G3fc2@t) (begin (G3fb8@G3fb4 G3fba@G3fb6) (set! G3fba@G3fb6 G3fc2@t))) (G3fb8@G3fb4)) ((lambda (G3fc4@t) (begin (G3fb9@G3fb5 G3fbb@G3fb7) (set! G3fbb@G3fb7 G3fc4@t))) (G3fb9@G3fb5)))))) G2dbe@inv-collector G2dc0@vis-collector G3fac@rtc (lambda (G3fc6@x) (values))))) (G2dbc@make-collector)))) (set! G2db2@parse-exports (lambda (G3fc8@exp*) ((letrec ((G3fca@f (lambda (G3fcc@exp* G3fcd@int* G3fce@ext*) (if (null? G3fcc@exp*) (begin (if (not (G2b6a@valid-bound-ids? G3fce@ext*)) (G2e3c@syntax-violation 'export '"invalid exports" (G2d89@find-dups G3fce@ext*)) (void)) (values (map G2e42@syntax->datum G3fce@ext*) G3fcd@int*)) ((lambda (G3fd2@t) ((lambda (G3fd4@ls/false) (if G3fd4@ls/false (apply (lambda (G3fd6@rename G3fd7@i* G3fd8@e*) (begin (if (not (and (eq? (G2e42@syntax->datum G3fd6@rename) 'rename) (for-all G2b60@id? G3fd7@i*) (for-all G2b60@id? G3fd8@e*))) (G2e3c@syntax-violation 'export '"invalid export specifier" (car G3fcc@exp*)) (void)) (G3fca@f (cdr G3fcc@exp*) (append G3fd7@i* G3fcd@int*) (append G3fd8@e* G3fce@ext*)))) G3fd4@ls/false) ((lambda (G3fdc@t) ((lambda (G3fde@ls/false) (if G3fde@ls/false (apply (lambda (G3fe0@ie) (begin (if (not (G2b60@id? G3fe0@ie)) (G2e3c@syntax-violation 'export '"invalid export" G3fe0@ie) (void)) (G3fca@f (cdr G3fcc@exp*) (cons G3fe0@ie G3fcd@int*) (cons G3fe0@ie G3fce@ext*)))) G3fde@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G3fdc@t))) (G2d51@syntax-dispatch G3fdc@t 'any))) G3fd2@t))) (G2d51@syntax-dispatch G3fd2@t '(any . #(each (any any)))))) (car G3fcc@exp*)))))) G3fca@f) G3fc8@exp* '() '()))) (set! G2db4@parse-library-name (lambda (G3fe2@spec) ((lambda (G3fe5@parse) (begin (set! G3fe5@parse (lambda (G3ff0@x) ((lambda (G3ff2@t) ((lambda (G3ff4@ls/false) (if (and G3ff4@ls/false (apply (lambda (G3ff6@v*) (for-all (lambda (G3ff8@x) ((lambda (G3ffa@x) (and (integer? G3ffa@x) (exact? G3ffa@x))) (G2e42@syntax->datum G3ff8@x))) G3ff6@v*)) G3ff4@ls/false)) (apply (lambda (G3ffc@v*) (values '() (map G2e42@syntax->datum G3ffc@v*))) G3ff4@ls/false) ((lambda (G3ffe@t) ((lambda (G4000@ls/false) (if (and G4000@ls/false (apply (lambda (G4002@x G4003@rest) (symbol? (G2e42@syntax->datum G4002@x))) G4000@ls/false)) (apply (lambda (G4006@x G4007@rest) (call-with-values (lambda () (G3fe5@parse G4007@rest)) (lambda (G400c@G400a G400d@G400b) ((lambda (G4010@v* G4011@x*) (values (cons (G2e42@syntax->datum G4006@x) G4011@x*) G4010@v*)) G400d@G400b G400c@G400a)))) G4000@ls/false) ((lambda (G4014@t) ((lambda (G4016@ls/false) (if G4016@ls/false (apply (lambda () (values '() '())) G4016@ls/false) ((lambda (G4018@t) ((lambda (G401a@ls/false) (if G401a@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"invalid library name" G3fe2@spec)) G401a@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G4018@t))) (G2d51@syntax-dispatch G4018@t '_))) G4014@t))) (G2d51@syntax-dispatch G4014@t '()))) G3ffe@t))) (G2d51@syntax-dispatch G3ffe@t '(any . any)))) G3ff2@t))) (G2d51@syntax-dispatch G3ff2@t '(each-any)))) G3ff0@x))) (call-with-values (lambda () (G3fe5@parse G3fe2@spec)) (lambda (G3fe8@G3fe6 G3fe9@G3fe7) ((lambda (G3fec@ver* G3fed@name*) (begin (if (null? G3fed@name*) (G2e3c@syntax-violation '#f '"empty library name" G3fe2@spec) (void)) (values G3fed@name* G3fec@ver*))) G3fe9@G3fe7 G3fe8@G3fe6))))) '#f))) (set! G2db6@parse-library (lambda (G401c@e) ((lambda (G401e@t) ((lambda (G4020@ls/false) (if (and G4020@ls/false (apply (lambda (G4022@library G4023@name* G4024@export G4025@exp* G4026@import G4027@imp* G4028@b*) (and (eq? (G2e42@syntax->datum G4024@export) 'export) (eq? (G2e42@syntax->datum G4026@import) 'import) (eq? (G2e42@syntax->datum G4022@library) 'library))) G4020@ls/false)) (apply (lambda (G4030@library G4031@name* G4032@export G4033@exp* G4034@import G4035@imp* G4036@b*) (values G4031@name* G4033@exp* G4035@imp* G4036@b*)) G4020@ls/false) ((lambda (G403e@t) ((lambda (G4040@ls/false) (if G4040@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"malformed library" G401c@e)) G4040@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G403e@t))) (G2d51@syntax-dispatch G403e@t '_))) G401e@t))) (G2d51@syntax-dispatch G401e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G401c@e))) (set! G2db8@parse-import-spec* ((lambda () ((lambda (G4043@idsyn? G4045@dup-error G4047@merge-substs G4049@exclude* G404b@find* G404d@rem* G404f@remove-dups G4051@parse-library-name G4053@import-library G4055@get-import G4057@add-imports!) (begin (set! G4043@idsyn? (lambda (G4242@x) (symbol? (G2e42@syntax->datum G4242@x)))) (set! G4045@dup-error (lambda (G4240@name) (G2e3c@syntax-violation 'import '"two imports with different bindings" G4240@name))) (set! G4047@merge-substs (lambda (G422e@s G422f@subst) ((lambda (G4233@insert-to-subst) (begin (set! G4233@insert-to-subst (lambda (G4234@a G4235@subst) ((lambda (G4238@name G4239@label) ((lambda (G423c@t) (if G423c@t ((lambda (G423e@x) (if (eq? (cdr G423e@x) G4239@label) G4235@subst (G4045@dup-error G4238@name))) G423c@t) (cons G4234@a G4235@subst))) (assq G4238@name G4235@subst))) (car G4234@a) (cdr G4234@a)))) (if (null? G422e@s) G422f@subst (G4233@insert-to-subst (car G422e@s) (G4047@merge-substs (cdr G422e@s) G422f@subst))))) '#f))) (set! G4049@exclude* (lambda (G4204@sym* G4205@subst) ((lambda (G4209@exclude) (begin (set! G4209@exclude (lambda (G421e@sym G421f@subst) (if (null? G421f@subst) (G2e3c@syntax-violation 'import '"cannot rename unbound identifier" G421e@sym) (if (eq? G421e@sym (caar G421f@subst)) (values (cdar G421f@subst) (cdr G421f@subst)) ((lambda (G4222@a) (call-with-values (lambda () (G4209@exclude G421e@sym (cdr G421f@subst))) (lambda (G4226@G4224 G4227@G4225) ((lambda (G422a@subst G422b@old) (values G422b@old (cons G4222@a G422a@subst))) G4227@G4225 G4226@G4224)))) (car G421f@subst)))))) (if (null? G4204@sym*) (values '() G4205@subst) (call-with-values (lambda () (G4209@exclude (car G4204@sym*) G4205@subst)) (lambda (G420c@G420a G420d@G420b) ((lambda (G4210@subst G4211@old) (call-with-values (lambda () (G4049@exclude* (cdr G4204@sym*) G4210@subst)) (lambda (G4216@G4214 G4217@G4215) ((lambda (G421a@subst G421b@old*) (values (cons G4211@old G421b@old*) G421a@subst)) G4217@G4215 G4216@G4214)))) G420d@G420b G420c@G420a)))))) '#f))) (set! G404b@find* (lambda (G41fc@sym* G41fd@subst) (map (lambda (G4200@x) ((lambda (G4202@t) (if G4202@t (cdr G4202@t) (G2e3c@syntax-violation 'import '"cannot find identifier" G4200@x))) (assq G4200@x G41fd@subst))) G41fc@sym*))) (set! G404d@rem* (lambda (G41f4@sym* G41f5@subst) ((letrec ((G41f8@f (lambda (G41fa@subst) (if (null? G41fa@subst) '() (if (memq (caar G41fa@subst) G41f4@sym*) (G41f8@f (cdr G41fa@subst)) (cons (car G41fa@subst) (G41f8@f (cdr G41fa@subst)))))))) G41f8@f) G41f5@subst))) (set! G404f@remove-dups (lambda (G41f2@ls) (if (null? G41f2@ls) '() (if (memq (car G41f2@ls) (cdr G41f2@ls)) (G404f@remove-dups (cdr G41f2@ls)) (cons (car G41f2@ls) (G404f@remove-dups (cdr G41f2@ls))))))) (set! G4051@parse-library-name (lambda (G410c@spec) ((lambda (G410f@subversion? G4111@subversion-pred G4113@version-pred) (begin (set! G410f@subversion? (lambda (G41ee@x) ((lambda (G41f0@x) (and (integer? G41f0@x) (exact? G41f0@x) (>= G41f0@x '0))) (G2e42@syntax->datum G41ee@x)))) (set! G4111@subversion-pred (lambda (G418e@x*) ((lambda (G4190@t) ((lambda (G4192@ls/false) (if (and G4192@ls/false (apply (lambda (G4194@n) (G410f@subversion? G4194@n)) G4192@ls/false)) (apply (lambda (G4196@n) (lambda (G4198@x) (= G4198@x (G2e42@syntax->datum G4196@n)))) G4192@ls/false) ((lambda (G419a@t) ((lambda (G419c@ls/false) (if (and G419c@ls/false (apply (lambda (G419e@p? G419f@sub*) (eq? (G2e42@syntax->datum G419e@p?) 'and)) G419c@ls/false)) (apply (lambda (G41a2@p? G41a3@sub*) ((lambda (G41a6@p*) (lambda (G41a8@x) (for-all (lambda (G41aa@p) (G41aa@p G41a8@x)) G41a6@p*))) (map G4111@subversion-pred G41a3@sub*))) G419c@ls/false) ((lambda (G41ac@t) ((lambda (G41ae@ls/false) (if (and G41ae@ls/false (apply (lambda (G41b0@p? G41b1@sub*) (eq? (G2e42@syntax->datum G41b0@p?) 'or)) G41ae@ls/false)) (apply (lambda (G41b4@p? G41b5@sub*) ((lambda (G41b8@p*) (lambda (G41ba@x) (exists (lambda (G41bc@p) (G41bc@p G41ba@x)) G41b8@p*))) (map G4111@subversion-pred G41b5@sub*))) G41ae@ls/false) ((lambda (G41be@t) ((lambda (G41c0@ls/false) (if (and G41c0@ls/false (apply (lambda (G41c2@p? G41c3@sub) (eq? (G2e42@syntax->datum G41c2@p?) 'not)) G41c0@ls/false)) (apply (lambda (G41c6@p? G41c7@sub) ((lambda (G41ca@p) (lambda (G41cc@x) (not (G41ca@p G41cc@x)))) (G4111@subversion-pred G41c7@sub))) G41c0@ls/false) ((lambda (G41ce@t) ((lambda (G41d0@ls/false) (if (and G41d0@ls/false (apply (lambda (G41d2@p? G41d3@n) (and (eq? (G2e42@syntax->datum G41d2@p?) '<=) (G410f@subversion? G41d3@n))) G41d0@ls/false)) (apply (lambda (G41d6@p? G41d7@n) (lambda (G41da@x) (<= G41da@x (G2e42@syntax->datum G41d7@n)))) G41d0@ls/false) ((lambda (G41dc@t) ((lambda (G41de@ls/false) (if (and G41de@ls/false (apply (lambda (G41e0@p? G41e1@n) (and (eq? (G2e42@syntax->datum G41e0@p?) '>=) (G410f@subversion? G41e1@n))) G41de@ls/false)) (apply (lambda (G41e4@p? G41e5@n) (lambda (G41e8@x) (>= G41e8@x (G2e42@syntax->datum G41e5@n)))) G41de@ls/false) ((lambda (G41ea@t) ((lambda (G41ec@ls/false) (if G41ec@ls/false (apply (lambda () (G2e3c@syntax-violation 'import '"invalid sub-version spec" G410c@spec G418e@x*)) G41ec@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G41ea@t))) (G2d51@syntax-dispatch G41ea@t '_))) G41dc@t))) (G2d51@syntax-dispatch G41dc@t '(any any)))) G41ce@t))) (G2d51@syntax-dispatch G41ce@t '(any any)))) G41be@t))) (G2d51@syntax-dispatch G41be@t '(any any)))) G41ac@t))) (G2d51@syntax-dispatch G41ac@t '(any . each-any)))) G419a@t))) (G2d51@syntax-dispatch G419a@t '(any . each-any)))) G4190@t))) (G2d51@syntax-dispatch G4190@t 'any))) G418e@x*))) (set! G4113@version-pred (lambda (G413e@x*) ((lambda (G4140@t) ((lambda (G4142@ls/false) (if G4142@ls/false (apply (lambda () (lambda (G4144@x) '#t)) G4142@ls/false) ((lambda (G4146@t) ((lambda (G4148@ls/false) (if (and G4148@ls/false (apply (lambda (G414a@c G414b@ver*) (eq? (G2e42@syntax->datum G414a@c) 'and)) G4148@ls/false)) (apply (lambda (G414e@c G414f@ver*) ((lambda (G4152@p*) (lambda (G4154@x) (for-all (lambda (G4156@p) (G4156@p G4154@x)) G4152@p*))) (map G4113@version-pred G414f@ver*))) G4148@ls/false) ((lambda (G4158@t) ((lambda (G415a@ls/false) (if (and G415a@ls/false (apply (lambda (G415c@c G415d@ver*) (eq? (G2e42@syntax->datum G415c@c) 'or)) G415a@ls/false)) (apply (lambda (G4160@c G4161@ver*) ((lambda (G4164@p*) (lambda (G4166@x) (exists (lambda (G4168@p) (G4168@p G4166@x)) G4164@p*))) (map G4113@version-pred G4161@ver*))) G415a@ls/false) ((lambda (G416a@t) ((lambda (G416c@ls/false) (if (and G416c@ls/false (apply (lambda (G416e@c G416f@ver) (eq? (G2e42@syntax->datum G416e@c) 'not)) G416c@ls/false)) (apply (lambda (G4172@c G4173@ver) ((lambda (G4176@p) (lambda (G4178@x) (not (G4176@p G4178@x)))) (G4113@version-pred G4173@ver))) G416c@ls/false) ((lambda (G417a@t) ((lambda (G417c@ls/false) (if G417c@ls/false (apply (lambda (G417e@sub*) ((lambda (G4180@p*) (lambda (G4182@x) ((letrec ((G4184@f (lambda (G4186@p* G4187@x) (if (null? G4186@p*) '#t (if (null? G4187@x) '#f (and ((car G4186@p*) (car G4187@x)) (G4184@f (cdr G4186@p*) (cdr G4187@x)))))))) G4184@f) G4180@p* G4182@x))) (map G4111@subversion-pred G417e@sub*))) G417c@ls/false) ((lambda (G418a@t) ((lambda (G418c@ls/false) (if G418c@ls/false (apply (lambda () (G2e3c@syntax-violation 'import '"invalid version spec" G410c@spec G413e@x*)) G418c@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G418a@t))) (G2d51@syntax-dispatch G418a@t '_))) G417a@t))) (G2d51@syntax-dispatch G417a@t 'each-any))) G416a@t))) (G2d51@syntax-dispatch G416a@t '(any any)))) G4158@t))) (G2d51@syntax-dispatch G4158@t '(any . each-any)))) G4146@t))) (G2d51@syntax-dispatch G4146@t '(any . each-any)))) G4140@t))) (G2d51@syntax-dispatch G4140@t '()))) G413e@x*))) ((letrec ((G4114@f (lambda (G4116@x) ((lambda (G4118@t) ((lambda (G411a@ls/false) (if G411a@ls/false (apply (lambda (G411c@version-spec*) (values '() (G4113@version-pred G411c@version-spec*))) G411a@ls/false) ((lambda (G411e@t) ((lambda (G4120@ls/false) (if (and G4120@ls/false (apply (lambda (G4122@x G4123@x*) (G4043@idsyn? G4122@x)) G4120@ls/false)) (apply (lambda (G4126@x G4127@x*) (call-with-values (lambda () (G4114@f G4127@x*)) (lambda (G412c@G412a G412d@G412b) ((lambda (G4130@pred G4131@name) (values (cons (G2e42@syntax->datum G4126@x) G4131@name) G4130@pred)) G412d@G412b G412c@G412a)))) G4120@ls/false) ((lambda (G4134@t) ((lambda (G4136@ls/false) (if G4136@ls/false (apply (lambda () (values '() (lambda (G4138@x) '#t))) G4136@ls/false) ((lambda (G413a@t) ((lambda (G413c@ls/false) (if G413c@ls/false (apply (lambda () (G2e3c@syntax-violation '#f '"invalid import spec" G410c@spec)) G413c@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G413a@t))) (G2d51@syntax-dispatch G413a@t '_))) G4134@t))) (G2d51@syntax-dispatch G4134@t '()))) G411e@t))) (G2d51@syntax-dispatch G411e@t '(any . any)))) G4118@t))) (G2d51@syntax-dispatch G4118@t '(each-any)))) G4116@x)))) G4114@f) G410c@spec))) '#f '#f '#f))) (set! G4053@import-library (lambda (G40fe@spec*) (call-with-values (lambda () (G4051@parse-library-name G40fe@spec*)) (lambda (G4102@G4100 G4103@G4101) ((lambda (G4106@pred G4107@name) (begin (if (null? G4107@name) (G2e3c@syntax-violation 'import '"empty library name" G40fe@spec*) (void)) ((lambda (G410a@lib) (begin (if (not G410a@lib) (G2e3c@syntax-violation 'import '"cannot find library with required name" G4107@name) (void)) (if (not (G4106@pred (G2959@G27d1@library-version G410a@lib))) (G2e3c@syntax-violation 'import '"library does not satisfy version specification" G40fe@spec* G410a@lib) (void)) ((G2dc2@imp-collector) G410a@lib) (G295d@G27d9@library-subst G410a@lib))) (G2981@G2821@find-library-by-name G4107@name)))) G4103@G4101 G4102@G4100))))) (set! G4055@get-import (lambda (G4070@spec) ((lambda (G4072@t) ((lambda (G4074@ls/false) (if (and G4074@ls/false (apply (lambda (G4076@x G4077@x*) (not (memq (G2e42@syntax->datum G4076@x) '(for rename except only prefix library)))) G4074@ls/false)) (apply (lambda (G407a@x G407b@x*) (G4053@import-library (cons G407a@x G407b@x*))) G4074@ls/false) ((lambda (G407e@t) ((lambda (G4080@ls/false) (if (and G4080@ls/false (apply (lambda (G4082@rename G4083@isp G4084@old* G4085@new*) (and (eq? (G2e42@syntax->datum G4082@rename) 'rename) (for-all G4043@idsyn? G4084@old*) (for-all G4043@idsyn? G4085@new*))) G4080@ls/false)) (apply (lambda (G408a@rename G408b@isp G408c@old* G408d@new*) ((lambda (G4092@subst G4093@old* G4094@new*) ((lambda (G4098@old-label*) ((lambda (G409a@subst) (G4047@merge-substs (map cons G4094@new* G4098@old-label*) G409a@subst)) (G404d@rem* G4093@old* G4092@subst))) (G404b@find* G4093@old* G4092@subst))) (G4055@get-import G408b@isp) (map G2e42@syntax->datum G408c@old*) (map G2e42@syntax->datum G408d@new*))) G4080@ls/false) ((lambda (G409c@t) ((lambda (G409e@ls/false) (if (and G409e@ls/false (apply (lambda (G40a0@except G40a1@isp G40a2@sym*) (and (eq? (G2e42@syntax->datum G40a0@except) 'except) (for-all G4043@idsyn? G40a2@sym*))) G409e@ls/false)) (apply (lambda (G40a6@except G40a7@isp G40a8@sym*) ((lambda (G40ac@subst) (G404d@rem* (map G2e42@syntax->datum G40a8@sym*) G40ac@subst)) (G4055@get-import G40a7@isp))) G409e@ls/false) ((lambda (G40ae@t) ((lambda (G40b0@ls/false) (if (and G40b0@ls/false (apply (lambda (G40b2@only G40b3@isp G40b4@sym*) (and (eq? (G2e42@syntax->datum G40b2@only) 'only) (for-all G4043@idsyn? G40b4@sym*))) G40b0@ls/false)) (apply (lambda (G40b8@only G40b9@isp G40ba@sym*) ((lambda (G40be@subst G40bf@sym*) ((lambda (G40c2@sym*) ((lambda (G40c4@lab*) (map cons G40c2@sym* G40c4@lab*)) (G404b@find* G40c2@sym* G40be@subst))) (G404f@remove-dups G40bf@sym*))) (G4055@get-import G40b9@isp) (map G2e42@syntax->datum G40ba@sym*))) G40b0@ls/false) ((lambda (G40c6@t) ((lambda (G40c8@ls/false) (if (and G40c8@ls/false (apply (lambda (G40ca@prefix G40cb@isp G40cc@p) (and (eq? (G2e42@syntax->datum G40ca@prefix) 'prefix) (G4043@idsyn? G40cc@p))) G40c8@ls/false)) (apply (lambda (G40d0@prefix G40d1@isp G40d2@p) ((lambda (G40d6@subst G40d7@prefix) (map (lambda (G40da@x) (cons (string->symbol (string-append G40d7@prefix (symbol->string (car G40da@x)))) (cdr G40da@x))) G40d6@subst)) (G4055@get-import G40d1@isp) (symbol->string (G2e42@syntax->datum G40d2@p)))) G40c8@ls/false) ((lambda (G40dc@t) ((lambda (G40de@ls/false) (if (and G40de@ls/false (apply (lambda (G40e0@library G40e1@spec*) (eq? (G2e42@syntax->datum G40e0@library) 'library)) G40de@ls/false)) (apply (lambda (G40e4@library G40e5@spec*) (G4053@import-library G40e5@spec*)) G40de@ls/false) ((lambda (G40e8@t) ((lambda (G40ea@ls/false) (if (and G40ea@ls/false (apply (lambda (G40ec@for G40ed@isp G40ee@rest) (eq? (G2e42@syntax->datum G40ec@for) 'for)) G40ea@ls/false)) (apply (lambda (G40f2@for G40f3@isp G40f4@rest) (G4055@get-import G40f3@isp)) G40ea@ls/false) ((lambda (G40f8@t) ((lambda (G40fa@ls/false) (if G40fa@ls/false (apply (lambda (G40fc@spec) (G2e3c@syntax-violation 'import '"invalid import spec" G40fc@spec)) G40fa@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G40f8@t))) (G2d51@syntax-dispatch G40f8@t 'any))) G40e8@t))) (G2d51@syntax-dispatch G40e8@t '(any any . any)))) G40dc@t))) (G2d51@syntax-dispatch G40dc@t '(any each-any)))) G40c6@t))) (G2d51@syntax-dispatch G40c6@t '(any any any)))) G40ae@t))) (G2d51@syntax-dispatch G40ae@t '(any any . each-any)))) G409c@t))) (G2d51@syntax-dispatch G409c@t '(any any . each-any)))) G407e@t))) (G2d51@syntax-dispatch G407e@t '(any any . #(each (any any)))))) G4072@t))) (G2d51@syntax-dispatch G4072@t '(any . each-any)))) G4070@spec))) (set! G4057@add-imports! (lambda (G4060@imp G4061@h) ((lambda (G4064@subst) (for-each (lambda (G4066@x) ((lambda (G4068@name G4069@label) ((lambda (G406c@t) (if G406c@t ((lambda (G406e@l) (if (not (eq? G406e@l G4069@label)) (G4045@dup-error G4068@name) (void))) G406c@t) (hashtable-set! G4061@h G4068@name G4069@label))) (hashtable-ref G4061@h G4068@name '#f))) (car G4066@x) (cdr G4066@x))) G4064@subst)) (G4055@get-import G4060@imp)))) (lambda (G4058@imp*) ((letrec ((G405a@f (lambda (G405c@imp* G405d@h) (if (null? G405c@imp*) (hashtable-entries G405d@h) (begin (G4057@add-imports! (car G405c@imp*) G405d@h) (G405a@f (cdr G405c@imp*) G405d@h)))))) G405a@f) G4058@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2dba@make-top-rib (lambda (G4244@names G4245@labels) ((lambda (G4248@rib) (begin (vector-for-each (lambda (G424a@name G424b@label) (begin (if (not (symbol? G424a@name)) (error 'make-top-rib '"BUG: not a symbol" G424a@name) (void)) (G2b13@extend-rib/nc! G4248@rib (G2b2a@make-stx G424a@name G2adc@top-mark* '() '()) G424b@label))) G4244@names G4245@labels) G4248@rib)) (G2b0f@make-empty-rib)))) (set! G2dbc@make-collector (lambda () ((lambda (G424e@ls) (lambda G4252 ((lambda (G4253) (if (= G4253 '0) (apply (lambda () G424e@ls) G4252) (if (= G4253 '1) (apply (lambda (G4250@x) (set! G424e@ls (G2ad5@set-cons G4250@x G424e@ls))) G4252) (error 'apply '"invalid arg count")))) (length G4252)))) '()))) (set! G2dbe@inv-collector (G2714@G2642@make-parameter (lambda G4254@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4256@x) (begin (if (not (procedure? G4256@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4256@x) (void)) G4256@x)))) (set! G2dc0@vis-collector (G2714@G2642@make-parameter (lambda G4258@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G425a@x) (begin (if (not (procedure? G425a@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G425a@x) (void)) G425a@x)))) (set! G2dc2@imp-collector (G2714@G2642@make-parameter (lambda G425c@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G425e@x) (begin (if (not (procedure? G425e@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G425e@x) (void)) G425e@x)))) (set! G2dc4@chi-library-internal (lambda (G4260@e* G4261@rib G4262@top?) (call-with-values (lambda () (G2dae@chi-body* G4260@e* '() '() '() '() '() '() '() G4261@rib G4262@top?)) (lambda (G426e@G4266 G426f@G4267 G4270@G4268 G4271@G4269 G4272@G426a G4273@G426b G4274@G426c G4275@G426d) ((lambda (G427e@exp* G427f@_kwd* G4280@mod** G4281@rhs* G4282@lex* G4283@mr G4284@r G4285@e*) (values (append (apply append (reverse G4280@mod**)) G4285@e*) G4284@r G4283@mr (reverse G4282@lex*) (reverse G4281@rhs*) G427e@exp*)) G4275@G426d G4274@G426c G4273@G426b G4272@G426a G4271@G4269 G4270@G4268 G426f@G4267 G426e@G4266))))) (set! G2dc6@chi-interaction-expr (lambda (G428e@e G428f@rib G4290@r) (call-with-values (lambda () (G2dae@chi-body* (list G428e@e) G4290@r G4290@r '() '() '() '() '() G428f@rib '#t)) (lambda (G429c@G4294 G429d@G4295 G429e@G4296 G429f@G4297 G42a0@G4298 G42a1@G4299 G42a2@G429a G42a3@G429b) ((lambda (G42ac@_exp* G42ad@_kwd* G42ae@mod** G42af@rhs* G42b0@lex* G42b1@mr G42b2@r G42b3@e*) ((lambda (G42bc@e*) ((lambda (G42be@e) (values G42be@e G42b2@r)) (if (null? G42bc@e*) (G2ac2@G2a34@build-void) (if (null? (cdr G42bc@e*)) (car G42bc@e*) (G2ac1@G2a32@build-sequence '#f G42bc@e*))))) (G2d83@expand-interaction-rhs*/init* (reverse G42b0@lex*) (reverse G42af@rhs*) (append (apply append (reverse G42ae@mod**)) G42b3@e*) G42b2@r G42b1@mr))) G42a3@G429b G42a2@G429a G42a1@G4299 G42a0@G4298 G429f@G4297 G429e@G4296 G429d@G4295 G429c@G4294))))) (set! G2dc8@library-body-expander (lambda (G42c0@name G42c1@main-exp* G42c2@imp* G42c3@b* G42c4@top?) ((lambda (G42cb@itc) (begin (set! G42cb@itc (G2dbc@make-collector)) ((lambda (G42d0@G42cc G42d1@G42cd G42d2@G42ce G42d3@G42cf) ((lambda (G42d8@swap) (dynamic-wind G42d8@swap (lambda () (call-with-values (lambda () (G2db8@parse-import-spec* G42c2@imp*)) (lambda (G42dc@G42da G42dd@G42db) ((lambda (G42e0@subst-labels G42e1@subst-names) ((lambda (G42e4@rib) ((lambda (G42e7@wrap) (begin (set! G42e7@wrap (lambda (G4353@x) (G2b2a@make-stx G4353@x G2adc@top-mark* (list G42e4@rib) '()))) ((lambda (G42e8@b* G42e9@main-exp* G42ea@rtc G42eb@vtc) ((lambda (G42f4@G42f0 G42f5@G42f1 G42f6@G42f2 G42f7@G42f3) ((lambda (G42fc@swap) (dynamic-wind G42fc@swap (lambda () (call-with-values (lambda () (G2dc4@chi-library-internal G42e8@b* G42e4@rib G42c4@top?)) (lambda (G4304@G42fe G4305@G42ff G4306@G4300 G4307@G4301 G4308@G4302 G4309@G4303) ((lambda (G4310@internal-exp* G4311@rhs* G4312@lex* G4313@mr G4314@r G4315@init*) (call-with-values (lambda () (G2db2@parse-exports (append G42e9@main-exp* G4310@internal-exp*))) (lambda (G431e@G431c G431f@G431d) ((lambda (G4322@exp-id* G4323@exp-name*) (begin (G2b17@seal-rib! G42e4@rib) ((lambda (G4326@init*) ((lambda (G4328@rhs*) ((lambda () (begin (G2b19@unseal-rib! G42e4@rib) ((lambda (G432a@loc* G432b@export-subst) ((lambda (G432f@errstr) (begin (set! G432f@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G2e28@make-export-env/macros G4312@lex* G432a@loc* G4314@r)) (lambda (G4333@G4330 G4334@G4331 G4335@G4332) ((lambda (G4339@macro* G433a@global* G433b@export-env) (begin (for-each (lambda (G433f@s) ((lambda (G4341@name G4342@label) ((lambda (G4345@p) (if G4345@p ((lambda (G4347@b) ((lambda (G4349@type) (if (eq? G4349@type 'mutable) (G2e3c@syntax-violation 'export G432f@errstr G4341@name) (void))) (car G4347@b))) (cdr G4345@p)) (void))) (assq G4342@label G433b@export-env))) (car G433f@s) (cdr G433f@s))) G432b@export-subst) ((lambda (G434b@invoke-body G434c@invoke-definitions) (values (G42cb@itc) (G42ea@rtc) (G42eb@vtc) (G2ac1@G2a32@build-sequence '#f (append G434c@invoke-definitions (list G434b@invoke-body))) G4339@macro* G432b@export-subst G433b@export-env)) (G2ac4@G2a38@build-letrec* '#f G4312@lex* G4328@rhs* (G2e24@build-exports G433a@global* G4326@init*)) (map G2abd@G298f@build-global-define (map cdr G433a@global*))))) G4335@G4332 G4334@G4331 G4333@G4330))))) '#f)) (map G2ae2@gen-global G4312@lex*) (G2e26@make-export-subst G4323@exp-name* G4322@exp-id*)))))) (G2d85@chi-rhs* G4311@rhs* G4314@r G4313@mr))) (G2d71@chi-expr* G4315@init* G4314@r G4313@mr)))) G431f@G431d G431e@G431c)))) G4309@G4303 G4308@G4302 G4307@G4301 G4306@G4300 G4305@G42ff G4304@G42fe)))) G42fc@swap)) (lambda () (begin ((lambda (G434f@t) (begin (G42f4@G42f0 G42f6@G42f2) (set! G42f6@G42f2 G434f@t))) (G42f4@G42f0)) ((lambda (G4351@t) (begin (G42f5@G42f1 G42f7@G42f3) (set! G42f7@G42f3 G4351@t))) (G42f5@G42f1)))))) G2dbe@inv-collector G2dc0@vis-collector G42ea@rtc G42eb@vtc)) (map G42e7@wrap G42c3@b*) (map G42e7@wrap G42c1@main-exp*) (G2dbc@make-collector) (G2dbc@make-collector)))) '#f)) (G2dba@make-top-rib G42e1@subst-names G42e0@subst-labels))) G42dd@G42db G42dc@G42da)))) G42d8@swap)) (lambda () (begin ((lambda (G4355@t) (begin (G42d0@G42cc G42d2@G42ce) (set! G42d2@G42ce G4355@t))) (G42d0@G42cc)) ((lambda (G4357@t) (begin (G42d1@G42cd G42d3@G42cf) (set! G42d3@G42cf G4357@t))) (G42d1@G42cd)))))) G2dc2@imp-collector G2e4a@top-level-context G42cb@itc '#f))) '#f))) (set! G2dca@core-library-expander (lambda (G4359@e G435a@verify-name) (call-with-values (lambda () (G2db6@parse-library G4359@e)) (lambda (G4361@G435d G4362@G435e G4363@G435f G4364@G4360) ((lambda (G4369@b* G436a@imp* G436b@exp* G436c@name*) (call-with-values (lambda () (G2db4@parse-library-name G436c@name*)) (lambda (G4373@G4371 G4374@G4372) ((lambda (G4377@ver G4378@name) (begin (G435a@verify-name G4378@name) (call-with-values (lambda () (G2dc8@library-body-expander G4378@name G436b@exp* G436a@imp* G4369@b* '#f)) (lambda (G4382@G437b G4383@G437c G4384@G437d G4385@G437e G4386@G437f G4387@G4380 G4388@G4381) ((lambda (G4390@export-env G4391@export-subst G4392@visit-code G4393@invoke-code G4394@visit-req* G4395@invoke-req* G4396@imp*) (values G4378@name G4377@ver G4396@imp* G4395@invoke-req* G4394@visit-req* G4393@invoke-code G4392@visit-code G4391@export-subst G4390@export-env)) G4388@G4381 G4387@G4380 G4386@G437f G4385@G437e G4384@G437d G4383@G437c G4382@G437b))))) G4374@G4372 G4373@G4371)))) G4364@G4360 G4363@G435f G4362@G435e G4361@G435d))))) (set! G2dcc@parse-top-level-program (lambda (G439e@e*) ((lambda (G43a0@t) ((lambda (G43a2@ls/false) (if (and G43a2@ls/false (apply (lambda (G43a4@import G43a5@imp* G43a6@b*) (eq? (G2e42@syntax->datum G43a4@import) 'import)) G43a2@ls/false)) (apply (lambda (G43aa@import G43ab@imp* G43ac@b*) (values G43ab@imp* G43ac@b*)) G43a2@ls/false) ((lambda (G43b0@t) ((lambda (G43b2@ls/false) (if (and G43b2@ls/false (apply (lambda (G43b4@import G43b5@x G43b6@y) (eq? (G2e42@syntax->datum G43b4@import) 'import)) G43b2@ls/false)) (apply (lambda (G43ba@import G43bb@x G43bc@y) (G2e3c@syntax-violation 'expander '"invalid syntax of top-level program" (G2b5a@syntax-car G439e@e*))) G43b2@ls/false) ((lambda (G43c0@t) ((lambda (G43c2@ls/false) (if G43c2@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G43c2@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G43c0@t))) (G2d51@syntax-dispatch G43c0@t '_))) G43b0@t))) (G2d51@syntax-dispatch G43b0@t '((any . any) . any)))) G43a0@t))) (G2d51@syntax-dispatch G43a0@t '((any . each-any) . each-any)))) G439e@e*))) (set! G2dce@top-level-expander (lambda (G43c4@e*) (call-with-values (lambda () (G2dcc@parse-top-level-program G43c4@e*)) (lambda (G43c8@G43c6 G43c9@G43c7) ((lambda (G43cc@b* G43cd@imp*) (call-with-values (lambda () (G2dc8@library-body-expander '() '() G43cd@imp* G43cc@b* '#t)) (lambda (G43d7@G43d0 G43d8@G43d1 G43d9@G43d2 G43da@G43d3 G43db@G43d4 G43dc@G43d5 G43dd@G43d6) ((lambda (G43e5@export-env G43e6@export-subst G43e7@visit-code G43e8@invoke-code G43e9@visit-req* G43ea@invoke-req* G43eb@imp*) (values G43ea@invoke-req* G43e8@invoke-code)) G43dd@G43d6 G43dc@G43d5 G43db@G43d4 G43da@G43d3 G43d9@G43d2 G43d8@G43d1 G43d7@G43d0)))) G43c9@G43c7 G43c8@G43c6))))) (set! G2dd4@G2dcf (make-record-type-descriptor 'env '#f 'G2dd2 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2dd6@G2dd1 '#f) (set! G2dd8@G2dd0 (make-record-constructor-descriptor G2dd4@G2dcf '#f G2dd6@G2dd1)) (set! G2ddb@env? (record-predicate G2dd4@G2dcf)) (set! G2ddd@make-env (record-constructor G2dd8@G2dd0)) (set! G2ddf@env-names (record-accessor G2dd4@G2dcf '0)) (set! G2de1@env-labels (record-accessor G2dd4@G2dcf '1)) (set! G2de3@env-itc (record-accessor G2dd4@G2dcf '2)) (set! G2de5@set-env-names! (record-mutator G2dd4@G2dcf '0)) (set! G2de7@set-env-labels! (record-mutator G2dd4@G2dcf '1)) (set! G2de9@set-env-itc! (record-mutator G2dd4@G2dcf '2)) (set! G2deb@rp (G2711@G263c@make-record-printer 'env (lambda (G43f3@x G43f4@p G43f5@wr) (display '"#<environment>" G43f4@p)))) (set! G2df1@G2dec (make-record-type-descriptor 'interaction-env '#f 'G2def '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2df3@G2dee '#f) (set! G2df5@G2ded (make-record-constructor-descriptor G2df1@G2dec '#f G2df3@G2dee)) (set! G2df8@interaction-env? (record-predicate G2df1@G2dec)) (set! G2dfa@make-interaction-env (record-constructor G2df5@G2ded)) (set! G2dfc@interaction-env-rib (record-accessor G2df1@G2dec '0)) (set! G2dfe@interaction-env-r (record-accessor G2df1@G2dec '1)) (set! G2e00@interaction-env-locs (record-accessor G2df1@G2dec '2)) (set! G2e02@set-interaction-env-rib! (record-mutator G2df1@G2dec '0)) (set! G2e04@set-interaction-env-r! (record-mutator G2df1@G2dec '1)) (set! G2e06@set-interaction-env-locs! (record-mutator G2df1@G2dec '2)) (set! G2e08@rp (G2711@G263c@make-record-printer 'interaction-env (lambda (G43f9@x G43fa@p G43fb@wr) (display '"#<environment>" G43fa@p)))) (set! G2e0a@interaction-environment-symbols (lambda () (G2e12@environment-symbols (G2e48@interaction-environment)))) (set! G2e0c@environment-bindings (lambda (G43ff@e) (vector->list (vector-map (lambda (G4401@name G4402@label) (G2e0e@parse-binding (cons G4401@name (G2987@G282d@imported-label->binding G4402@label)))) (G2ddf@env-names G43ff@e) (G2de1@env-labels G43ff@e))))) (set! G2e0e@parse-binding (lambda (G4405@b) (cons (car G4405@b) ((lambda (G4407@t) (if (memv G4407@t '(core-prim global)) 'procedure (if (memv G4407@t '(core-macro macro global-macro)) 'syntax (if (memv G4407@t '($core-rtd)) 'record (if (eq? (car G4405@b) (cadr G4405@b)) 'syntax 'unknown))))) (cadr G4405@b))))) (set! G2e10@environment? (lambda (G4409@x) (or (G2ddb@env? G4409@x) (G2df8@interaction-env? G4409@x)))) (set! G2e12@environment-symbols (lambda (G440b@x) (if (G2ddb@env? G440b@x) (vector->list (G2ddf@env-names G440b@x)) (if (G2df8@interaction-env? G440b@x) (map values (G2afb@rib-sym* (G2dfc@interaction-env-rib G440b@x))) (assertion-violation 'environment-symbols '"not an environment" G440b@x))))) (set! G2e14@environment (lambda G440d@imp* ((lambda (G440f@itc) ((lambda (G4413@G4411 G4414@G4412) ((lambda (G4417@swap) (dynamic-wind G4417@swap (lambda () (call-with-values (lambda () (G2db8@parse-import-spec* G440d@imp*)) (lambda (G441b@G4419 G441c@G441a) ((lambda (G441f@subst-labels G4420@subst-names) (G2ddd@make-env G4420@subst-names G441f@subst-labels G440f@itc)) G441c@G441a G441b@G4419)))) G4417@swap)) (lambda () ((lambda (G4423@t) (begin (G4413@G4411 G4414@G4412) (set! G4414@G4412 G4423@t))) (G4413@G4411))))) G2dc2@imp-collector G440f@itc)) (G2dbc@make-collector)))) (set! G2e16@null-environment (lambda (G4425@n) (begin (if (not (eqv? G4425@n '5)) (assertion-violation 'null-environment '"not 5" G4425@n) (void)) (G2e14@environment '(psyntax null-environment-5))))) (set! G2e18@scheme-report-environment (lambda (G4427@n) (begin (if (not (eqv? G4427@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4427@n) (void)) (G2e14@environment '(psyntax scheme-report-environment-5))))) (set! G2e1a@expand (lambda (G4429@x G442a@env) (if (G2ddb@env? G442a@env) ((lambda (G442d@rib) ((lambda (G442f@x G4430@itc G4431@rtc G4432@vtc) ((lambda (G4437@x) (begin (G2b17@seal-rib! G442d@rib) (values G4437@x (G4431@rtc)))) ((lambda (G4441@G4439 G4442@G443a G4443@G443b G4444@G443c G4445@G443d G4446@G443e G4447@G443f G4448@G4440) ((lambda (G4451@swap) (dynamic-wind G4451@swap (lambda () (G2d75@chi-expr G442f@x '() '())) G4451@swap)) (lambda () (begin ((lambda (G4453@t) (begin (G4441@G4439 G4445@G443d) (set! G4445@G443d G4453@t))) (G4441@G4439)) ((lambda (G4455@t) (begin (G4442@G443a G4446@G443e) (set! G4446@G443e G4455@t))) (G4442@G443a)) ((lambda (G4457@t) (begin (G4443@G443b G4447@G443f) (set! G4447@G443f G4457@t))) (G4443@G443b)) ((lambda (G4459@t) (begin (G4444@G443c G4448@G4440) (set! G4448@G4440 G4459@t))) (G4444@G443c)))))) G2e4a@top-level-context G2dbe@inv-collector G2dc0@vis-collector G2dc2@imp-collector '#f G4431@rtc G4432@vtc G4430@itc))) (G2b2a@make-stx G4429@x G2adc@top-mark* (list G442d@rib) '()) (G2de3@env-itc G442a@env) (G2dbc@make-collector) (G2dbc@make-collector))) (G2dba@make-top-rib (G2ddf@env-names G442a@env) (G2de1@env-labels G442a@env))) (if (G2df8@interaction-env? G442a@env) ((lambda (G445b@rib G445c@r G445d@rtc) ((lambda (G4461@x) (call-with-values (lambda () ((lambda (G446d@G4465 G446e@G4466 G446f@G4467 G4470@G4468 G4471@G4469 G4472@G446a G4473@G446b G4474@G446c) ((lambda (G447d@swap) (dynamic-wind G447d@swap (lambda () (G2dc6@chi-interaction-expr G4461@x G445b@rib G445c@r)) G447d@swap)) (lambda () (begin ((lambda (G447f@t) (begin (G446d@G4465 G4471@G4469) (set! G4471@G4469 G447f@t))) (G446d@G4465)) ((lambda (G4481@t) (begin (G446e@G4466 G4472@G446a) (set! G4472@G446a G4481@t))) (G446e@G4466)) ((lambda (G4483@t) (begin (G446f@G4467 G4473@G446b) (set! G4473@G446b G4483@t))) (G446f@G4467)) ((lambda (G4485@t) (begin (G4470@G4468 G4474@G446c) (set! G4474@G446c G4485@t))) (G4470@G4468)))))) G2e4a@top-level-context G2dbe@inv-collector G2dc0@vis-collector G2dc2@imp-collector G442a@env G445d@rtc (G2dbc@make-collector) (G2dbc@make-collector))) (lambda (G4487@G4463 G4488@G4464) ((lambda (G448b@r^ G448c@e) (begin (G2e04@set-interaction-env-r! G442a@env G448b@r^) (values G448c@e (G445d@rtc)))) G4488@G4464 G4487@G4463)))) (G2b2a@make-stx G4429@x G2adc@top-mark* (list G445b@rib) '()))) (G2dfc@interaction-env-rib G442a@env) (G2dfe@interaction-env-r G442a@env) (G2dbc@make-collector)) (assertion-violation 'expand '"not an environment" G442a@env))))) (set! G2e1c@eval (lambda (G448f@x G4490@env) (begin (if (not (G2e10@environment? G4490@env)) (error 'eval '"not an environment" G4490@env) (void)) (call-with-values (lambda () (G2e1a@expand G448f@x G4490@env)) (lambda (G4495@G4493 G4496@G4494) ((lambda (G4499@invoke-req* G449a@x) (begin (for-each G2988@G282f@invoke-library G4499@invoke-req*) (eval-core (G2768@G2720@expanded->core G449a@x)))) G4496@G4494 G4495@G4493)))))) (set! G2e1e@library-expander (lambda G4502 ((lambda (G4503) (if (= G4503 '3) (apply (lambda (G449d@x G449e@filename G449f@verify-name) ((lambda (G44a4@build-visit-code G44a6@visit!) (begin (set! G44a4@build-visit-code (lambda (G44f0@macro*) (if (null? G44f0@macro*) (G2ac2@G2a34@build-void) (G2ac1@G2a32@build-sequence '#f (map (lambda (G44f2@x) ((lambda (G44f4@loc G44f5@src) (list 'set! G44f4@loc G44f5@src)) (car G44f2@x) (cddr G44f2@x))) G44f0@macro*))))) (set! G44a6@visit! (lambda (G44e8@macro*) (for-each (lambda (G44ea@x) ((lambda (G44ec@loc G44ed@proc) (set-symbol-value! G44ec@loc G44ed@proc)) (car G44ea@x) (cadr G44ea@x))) G44e8@macro*))) (call-with-values (lambda () (G2dca@core-library-expander G449d@x G449f@verify-name)) (lambda (G44b0@G44a7 G44b1@G44a8 G44b2@G44a9 G44b3@G44aa G44b4@G44ab G44b5@G44ac G44b6@G44ad G44b7@G44ae G44b8@G44af) ((lambda (G44c2@export-env G44c3@export-subst G44c4@macro* G44c5@invoke-code G44c6@vis* G44c7@inv* G44c8@imp* G44c9@ver G44ca@name) ((lambda (G44d4@id G44d5@name G44d6@ver G44d7@imp* G44d8@vis* G44d9@inv* G44da@visit-proc G44db@invoke-proc G44dc@visit-code G44dd@invoke-code) (begin (G2986@G282b@install-library G44d4@id G44d5@name G44d6@ver G44d7@imp* G44d8@vis* G44d9@inv* G44c3@export-subst G44c2@export-env G44da@visit-proc G44db@invoke-proc G44dc@visit-code G44dd@invoke-code '#t G449e@filename) (values G44d4@id G44d5@name G44d6@ver G44d7@imp* G44d8@vis* G44d9@inv* G44dd@invoke-code G44dc@visit-code G44c3@export-subst G44c2@export-env))) (gensym) G44ca@name G44c9@ver (map G298c@G2837@library-spec G44c8@imp*) (map G298c@G2837@library-spec G44c6@vis*) (map G298c@G2837@library-spec G44c7@inv*) (lambda () (G44a6@visit! G44c4@macro*)) (lambda () (eval-core (G2768@G2720@expanded->core G44c5@invoke-code))) (G44a4@build-visit-code G44c4@macro*) G44c5@invoke-code)) G44b8@G44af G44b7@G44ae G44b6@G44ad G44b5@G44ac G44b4@G44ab G44b3@G44aa G44b2@G44a9 G44b1@G44a8 G44b0@G44a7))))) '#f '#f)) G4502) (if (= G4503 '2) (apply (lambda (G44f8@x G44f9@filename) (G2e1e@library-expander G44f8@x G44f9@filename (lambda (G44fc@x) (values)))) G4502) (if (= G4503 '1) (apply (lambda (G44fe@x) (G2e1e@library-expander G44fe@x '#f (lambda (G4500@x) (values)))) G4502) (error 'apply '"invalid arg count"))))) (length G4502)))) (set! G2e20@boot-library-expand (lambda (G4504@x) (call-with-values (lambda () (G2e1e@library-expander G4504@x)) (lambda (G4510@G4506 G4511@G4507 G4512@G4508 G4513@G4509 G4514@G450a G4515@G450b G4516@G450c G4517@G450d G4518@G450e G4519@G450f) ((lambda (G4524@export-env G4525@export-subst G4526@visit-code G4527@invoke-code G4528@inv* G4529@vis* G452a@imp* G452b@ver G452c@name G452d@id) (values G452c@name G4527@invoke-code G4525@export-subst G4524@export-env)) G4519@G450f G4518@G450e G4517@G450d G4516@G450c G4515@G450b G4514@G450a G4513@G4509 G4512@G4508 G4511@G4507 G4510@G4506))))) (set! G2e22@rev-map-append (lambda (G4538@f G4539@ls G453a@ac) (if (null? G4539@ls) G453a@ac (G2e22@rev-map-append G4538@f (cdr G4539@ls) (cons (G4538@f (car G4539@ls)) G453a@ac))))) (set! G2e24@build-exports (lambda (G453e@lex*+loc* G453f@init*) (G2ac1@G2a32@build-sequence '#f (cons (G2ac2@G2a34@build-void) (G2e22@rev-map-append (lambda (G4542@x) (list 'set! (cdr G4542@x) (car G4542@x))) G453e@lex*+loc* G453f@init*))))) (set! G2e26@make-export-subst (lambda (G4544@name* G4545@id*) (map (lambda (G4548@name G4549@id) ((lambda (G454c@label) (begin (if (not G454c@label) (G2e3c@syntax-violation '#f '"cannot export unbound identifier" G4549@id) (void)) (cons G4548@name G454c@label))) (G2b7a@id->label G4549@id))) G4544@name* G4545@id*))) (set! G2e28@make-export-env/macros (lambda (G454e@lex* G454f@loc* G4550@r) ((lambda (G4555@lookup) (begin (set! G4555@lookup (lambda (G4572@x) ((letrec ((G4574@f (lambda (G4576@x G4577@lex* G4578@loc*) (if (pair? G4577@lex*) (if (eq? G4576@x (car G4577@lex*)) (car G4578@loc*) (G4574@f G4576@x (cdr G4577@lex*) (cdr G4578@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4574@f) G4572@x G454e@lex* G454f@loc*))) ((letrec ((G4556@f (lambda (G4558@r G4559@env G455a@global* G455b@macro*) (if (null? G4558@r) (values G4559@env G455a@global* G455b@macro*) ((lambda (G4560@x) ((lambda (G4562@label G4563@b) ((lambda (G4566@t) (if (memv G4566@t '(lexical)) ((lambda (G4568@v) ((lambda (G456a@loc G456b@type) (G4556@f (cdr G4558@r) (cons (cons* G4562@label G456b@type G456a@loc) G4559@env) (cons (cons (G2cdd@lexical-var G4568@v) G456a@loc) G455a@global*) G455b@macro*)) (G4555@lookup (G2cdd@lexical-var G4568@v)) (if (G2cdf@lexical-mutable? G4568@v) 'mutable 'global))) (G2b84@binding-value G4563@b)) (if (memv G4566@t '(local-macro)) ((lambda (G456e@loc) (G4556@f (cdr G4558@r) (cons (cons* G4562@label 'global-macro G456e@loc) G4559@env) G455a@global* (cons (cons G456e@loc (G2b84@binding-value G4563@b)) G455b@macro*))) (gensym)) (if (memv G4566@t '(local-macro!)) ((lambda (G4570@loc) (G4556@f (cdr G4558@r) (cons (cons* G4562@label 'global-macro! G4570@loc) G4559@env) G455a@global* (cons (cons G4570@loc (G2b84@binding-value G4563@b)) G455b@macro*))) (gensym)) (if (memv G4566@t '($rtd $module)) (G4556@f (cdr G4558@r) (cons G4560@x G4559@env) G455a@global* G455b@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2b82@binding-type G4563@b) (G2b84@binding-value G4563@b))))))) (G2b82@binding-type G4563@b))) (car G4560@x) (cdr G4560@x))) (car G4558@r)))))) G4556@f) G4550@r '() '() '()))) '#f))) (set! G2e2a@generate-temporaries (lambda (G457c@ls) ((lambda (G457e@t) ((lambda (G4580@ls/false) (if G4580@ls/false (apply (lambda (G4582@ls) (map (lambda (G4584@x) (G2b2a@make-stx ((lambda (G4586@x) (if (or (symbol? G4586@x) (string? G4586@x)) (gensym G4586@x) (gensym 't))) (G2e42@syntax->datum G4584@x)) G2adc@top-mark* '() '())) G4582@ls)) G4580@ls/false) ((lambda (G4588@t) ((lambda (G458a@ls/false) (if G458a@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G458a@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G4588@t))) (G2d51@syntax-dispatch G4588@t '_))) G457e@t))) (G2d51@syntax-dispatch G457e@t 'each-any))) G457c@ls))) (set! G2e2c@free-identifier=? (lambda (G458c@x G458d@y) (if (G2b60@id? G458c@x) (if (G2b60@id? G458d@y) (G2b68@free-id=? G458c@x G458d@y) (assertion-violation 'free-identifier=? '"not an identifier" G458d@y)) (assertion-violation 'free-identifier=? '"not an identifier" G458c@x)))) (set! G2e2e@bound-identifier=? (lambda (G4590@x G4591@y) (if (G2b60@id? G4590@x) (if (G2b60@id? G4591@y) (G2b66@bound-id=? G4590@x G4591@y) (assertion-violation 'bound-identifier=? '"not an identifier" G4591@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G4590@x)))) (set! G2e30@make-source-condition (lambda (G4594@x) ((lambda (G459e@G4599 G45a0@G459b G45a2@G459a G45a5@G4598 G45a7@make-source-condition G45a9@G4596 G45ab@G4597 G45ad@source-condition? G45af@source-filename G45b1@source-character) (begin (set! G459e@G4599 (make-record-type-descriptor '&source-information G49ec@G473f@&condition-rtd 'G459c '#f '#f '#((immutable file-name) (immutable character)))) (set! G45a0@G459b '#f) (set! G45a2@G459a (make-record-constructor-descriptor G459e@G4599 G49ed@G4741@&condition-rcd G45a0@G459b)) (set! G45a5@G4598 (record-predicate G459e@G4599)) (set! G45a7@make-source-condition (record-constructor G45a2@G459a)) (set! G45a9@G4596 (record-accessor G459e@G4599 '0)) (set! G45ab@G4597 (record-accessor G459e@G4599 '1)) (set! G45ad@source-condition? (condition-predicate G459e@G4599)) (set! G45af@source-filename (condition-accessor G459e@G4599 G45a9@G4596)) (set! G45b1@source-character (condition-accessor G459e@G4599 G45ab@G4597)) (if (pair? G4594@x) (G45a7@make-source-condition (car G4594@x) (cdr G4594@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2e32@extract-position-condition (lambda (G45b2@x) (G2e30@make-source-condition (G2e34@expression-position G45b2@x)))) (set! G2e34@expression-position (lambda (G45b4@x) (and (G2b28@stx? G45b4@x) ((lambda (G45b6@x) (and (G2709@G262c@annotation? G45b6@x) (G270a@G262e@annotation-source G45b6@x))) (G2b2c@stx-expr G45b4@x))))) (set! G2e36@assertion-error (lambda (G45b8@expr G45b9@pos) (raise (condition (G4a1c@G47ff@make-assertion-violation) (G4a2e@G482f@make-who-condition 'assert) (G49f2@G4792@make-message-condition '"assertion failed") (G4a24@G4815@make-irritants-condition (list G45b8@expr)) (G2e30@make-source-condition G45b9@pos))))) (set! G2e38@syntax-error (lambda (G45bc@x . G45be@args) (begin (if (not (for-all string? G45be@args)) (assertion-violation 'syntax-error '"invalid argument" G45be@args) (void)) (raise (condition (G49f2@G4792@make-message-condition (if (null? G45be@args) '"invalid syntax" (apply string-append G45be@args))) (G4a50@G4889@make-syntax-violation (G2e42@syntax->datum G45bc@x) '#f) (G2e32@extract-position-condition G45bc@x)))))) (set! G2e3a@syntax-violation* (lambda (G45c0@who G45c1@msg G45c2@form G45c3@condition-object) (begin (if (not (string? G45c1@msg)) (assertion-violation 'syntax-violation '"message is not a string" G45c1@msg) (void)) ((lambda (G45c8@who) (raise (condition (if G45c8@who (G4a2e@G482f@make-who-condition G45c8@who) (condition)) (G49f2@G4792@make-message-condition G45c1@msg) G45c3@condition-object (G2e32@extract-position-condition G45c2@form)))) (if (or (string? G45c0@who) (symbol? G45c0@who)) G45c0@who (if (not G45c0@who) ((lambda (G45ca@t) ((lambda (G45cc@ls/false) (if (and G45cc@ls/false (apply (lambda (G45ce@id) (G2b60@id? G45ce@id)) G45cc@ls/false)) (apply (lambda (G45d0@id) (G2e42@syntax->datum G45d0@id)) G45cc@ls/false) ((lambda (G45d2@t) ((lambda (G45d4@ls/false) (if (and G45d4@ls/false (apply (lambda (G45d6@id G45d7@rest) (G2b60@id? G45d6@id)) G45d4@ls/false)) (apply (lambda (G45da@id G45db@rest) (G2e42@syntax->datum G45da@id)) G45d4@ls/false) ((lambda (G45de@t) ((lambda (G45e0@ls/false) (if G45e0@ls/false (apply (lambda () '#f) G45e0@ls/false) (G2e3c@syntax-violation '#f '"invalid syntax" G45de@t))) (G2d51@syntax-dispatch G45de@t '_))) G45d2@t))) (G2d51@syntax-dispatch G45d2@t '(any . any)))) G45ca@t))) (G2d51@syntax-dispatch G45ca@t 'any))) G45c2@form) (assertion-violation 'syntax-violation '"invalid who argument" G45c0@who))))))) (set! G2e3c@syntax-violation (lambda G45f0 ((lambda (G45f1) (if (= G45f1 '3) (apply (lambda (G45e2@who G45e3@msg G45e4@form) (G2e3c@syntax-violation G45e2@who G45e3@msg G45e4@form '#f)) G45f0) (if (= G45f1 '4) (apply (lambda (G45e8@who G45e9@msg G45ea@form G45eb@subform) (G2e3a@syntax-violation* G45e8@who G45e9@msg G45ea@form (G4a50@G4889@make-syntax-violation (G2e42@syntax->datum G45ea@form) (G2e42@syntax->datum G45eb@subform)))) G45f0) (error 'apply '"invalid arg count")))) (length G45f0)))) (set! G2e3e@identifier? (lambda (G45f2@x) (G2b60@id? G45f2@x))) (set! G2e40@datum->syntax (lambda (G45f4@id G45f5@datum) (if (G2b60@id? G45f4@id) (G2b3e@datum->stx G45f4@id G45f5@datum) (assertion-violation 'datum->syntax '"not an identifier" G45f4@id)))) (set! G2e42@syntax->datum (lambda (G45f8@x) (G2b76@stx->datum G45f8@x))) (set! G2e44@compile-r6rs-top-level (lambda (G45fa@x*) (call-with-values (lambda () (G2dce@top-level-expander G45fa@x*)) (lambda (G45fe@G45fc G45ff@G45fd) ((lambda (G4602@invoke-code G4603@lib*) (lambda () (begin (for-each G2988@G282f@invoke-library G4603@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2768@G2720@expanded->core G4602@invoke-code)) (void)) (eval-core (G2768@G2720@expanded->core G4602@invoke-code))))) G45ff@G45fd G45fe@G45fc))))) (set! G2e46@pre-compile-r6rs-top-level (lambda (G4606@x*) (call-with-values (lambda () (G2dce@top-level-expander G4606@x*)) (lambda (G460a@G4608 G460b@G4609) ((lambda (G460e@invoke-code G460f@lib*) (begin (for-each G2988@G282f@invoke-library G460f@lib*) (G2712@G263e@compile-core (G2768@G2720@expanded->core G460e@invoke-code)))) G460b@G4609 G460a@G4608))))) (set! G2e48@interaction-environment ((lambda (G4612@the-env) (lambda () (or G4612@the-env ((lambda (G4614@lib G4615@rib) (begin ((lambda (G4618@subst) (begin (G2b05@set-rib-sym*! G4615@rib (map car G4618@subst)) (G2b07@set-rib-mark**! G4615@rib (map (lambda (G461a@x) G2adc@top-mark*) G4618@subst)) (G2b09@set-rib-label*! G4615@rib (map cdr G4618@subst)))) (G295d@G27d9@library-subst G4614@lib)) ((lambda (G461c@env) (begin (set! G4612@the-env G461c@env) G461c@env)) (G2dfa@make-interaction-env G4615@rib '() '())))) (G2981@G2821@find-library-by-name '(mosh interaction)) (G2b0f@make-empty-rib))))) '#f)) (set! G2e4a@top-level-context (G2714@G2642@make-parameter '#f)) (begin (set! G472a@G2e4a@top-level-context G2e4a@top-level-context) (set! G4729@G2e48@interaction-environment G2e48@interaction-environment) (set! G4728@G2e46@pre-compile-r6rs-top-level G2e46@pre-compile-r6rs-top-level) (set! G4727@G2e44@compile-r6rs-top-level G2e44@compile-r6rs-top-level) (set! G4726@G2e42@syntax->datum G2e42@syntax->datum) (set! G4725@G2e40@datum->syntax G2e40@datum->syntax) (set! G4724@G2e3e@identifier? G2e3e@identifier?) (set! G4723@G2e3c@syntax-violation G2e3c@syntax-violation) (set! G4722@G2e3a@syntax-violation* G2e3a@syntax-violation*) (set! G4721@G2e38@syntax-error G2e38@syntax-error) (set! G4720@G2e36@assertion-error G2e36@assertion-error) (set! G471f@G2e34@expression-position G2e34@expression-position) (set! G471e@G2e32@extract-position-condition G2e32@extract-position-condition) (set! G471d@G2e30@make-source-condition G2e30@make-source-condition) (set! G471c@G2e2e@bound-identifier=? G2e2e@bound-identifier=?) (set! G471b@G2e2c@free-identifier=? G2e2c@free-identifier=?) (set! G471a@G2e2a@generate-temporaries G2e2a@generate-temporaries) (set! G4719@G2e28@make-export-env/macros G2e28@make-export-env/macros) (set! G4718@G2e26@make-export-subst G2e26@make-export-subst) (set! G4717@G2e24@build-exports G2e24@build-exports) (set! G4716@G2e22@rev-map-append G2e22@rev-map-append) (set! G4715@G2e20@boot-library-expand G2e20@boot-library-expand) (set! G4714@G2e1e@library-expander G2e1e@library-expander) (set! G4713@G2e1c@eval G2e1c@eval) (set! G4712@G2e1a@expand G2e1a@expand) (set! G4711@G2e18@scheme-report-environment G2e18@scheme-report-environment) (set! G4710@G2e16@null-environment G2e16@null-environment) (set! G470f@G2e14@environment G2e14@environment) (set! G470e@G2e12@environment-symbols G2e12@environment-symbols) (set! G470d@G2e10@environment? G2e10@environment?) (set! G470c@G2e0e@parse-binding G2e0e@parse-binding) (set! G470b@G2e0c@environment-bindings G2e0c@environment-bindings) (set! G470a@G2e0a@interaction-environment-symbols G2e0a@interaction-environment-symbols) (set! G4709@G2e08@rp G2e08@rp) (set! G4708@G2e06@set-interaction-env-locs! G2e06@set-interaction-env-locs!) (set! G4707@G2e04@set-interaction-env-r! G2e04@set-interaction-env-r!) (set! G4706@G2e02@set-interaction-env-rib! G2e02@set-interaction-env-rib!) (set! G4705@G2e00@interaction-env-locs G2e00@interaction-env-locs) (set! G4704@G2dfe@interaction-env-r G2dfe@interaction-env-r) (set! G4703@G2dfc@interaction-env-rib G2dfc@interaction-env-rib) (set! G4702@G2dfa@make-interaction-env G2dfa@make-interaction-env) (set! G4701@G2df8@interaction-env? G2df8@interaction-env?) (set! G4700@G2df5@G2ded G2df5@G2ded) (set! G46ff@G2df3@G2dee G2df3@G2dee) (set! G46fe@G2df1@G2dec G2df1@G2dec) (set! G46fd@G2deb@rp G2deb@rp) (set! G46fc@G2de9@set-env-itc! G2de9@set-env-itc!) (set! G46fb@G2de7@set-env-labels! G2de7@set-env-labels!) (set! G46fa@G2de5@set-env-names! G2de5@set-env-names!) (set! G46f9@G2de3@env-itc G2de3@env-itc) (set! G46f8@G2de1@env-labels G2de1@env-labels) (set! G46f7@G2ddf@env-names G2ddf@env-names) (set! G46f6@G2ddd@make-env G2ddd@make-env) (set! G46f5@G2ddb@env? G2ddb@env?) (set! G46f4@G2dd8@G2dd0 G2dd8@G2dd0) (set! G46f3@G2dd6@G2dd1 G2dd6@G2dd1) (set! G46f2@G2dd4@G2dcf G2dd4@G2dcf) (set! G46f1@G2dce@top-level-expander G2dce@top-level-expander) (set! G46f0@G2dcc@parse-top-level-program G2dcc@parse-top-level-program) (set! G46ef@G2dca@core-library-expander G2dca@core-library-expander) (set! G46ee@G2dc8@library-body-expander G2dc8@library-body-expander) (set! G46ed@G2dc6@chi-interaction-expr G2dc6@chi-interaction-expr) (set! G46ec@G2dc4@chi-library-internal G2dc4@chi-library-internal) (set! G46eb@G2dc2@imp-collector G2dc2@imp-collector) (set! G46ea@G2dc0@vis-collector G2dc0@vis-collector) (set! G46e9@G2dbe@inv-collector G2dbe@inv-collector) (set! G46e8@G2dbc@make-collector G2dbc@make-collector) (set! G46e7@G2dba@make-top-rib G2dba@make-top-rib) (set! G46e6@G2db8@parse-import-spec* G2db8@parse-import-spec*) (set! G46e5@G2db6@parse-library G2db6@parse-library) (set! G46e4@G2db4@parse-library-name G2db4@parse-library-name) (set! G46e3@G2db2@parse-exports G2db2@parse-exports) (set! G46e2@G2db0@expand-transformer G2db0@expand-transformer) (set! G46e1@G2dae@chi-body* G2dae@chi-body*) (set! G46e0@G2dac@chi-internal-module G2dac@chi-internal-module) (set! G46df@G2daa@module-interface-exp-id* G2daa@module-interface-exp-id*) (set! G46de@G2da8@set-module-interface-exp-lab-vec! G2da8@set-module-interface-exp-lab-vec!) (set! G46dd@G2da6@set-module-interface-exp-id-vec! G2da6@set-module-interface-exp-id-vec!) (set! G46dc@G2da4@set-module-interface-first-mark! G2da4@set-module-interface-first-mark!) (set! G46db@G2da2@module-interface-exp-lab-vec G2da2@module-interface-exp-lab-vec) (set! G46da@G2da0@module-interface-exp-id-vec G2da0@module-interface-exp-id-vec) (set! G46d9@G2d9e@module-interface-first-mark G2d9e@module-interface-first-mark) (set! G46d8@G2d9c@make-module-interface G2d9c@make-module-interface) (set! G46d7@G2d9a@module-interface? G2d9a@module-interface?) (set! G46d6@G2d97@G2d8f G2d97@G2d8f) (set! G46d5@G2d95@G2d90 G2d95@G2d90) (set! G46d4@G2d93@G2d8e G2d93@G2d8e) (set! G46d3@G2d8d@parse-module G2d8d@parse-module) (set! G46d2@G2d8b@chi-internal G2d8b@chi-internal) (set! G46d1@G2d89@find-dups G2d89@find-dups) (set! G46d0@G2d87@find-bound=? G2d87@find-bound=?) (set! G46cf@G2d85@chi-rhs* G2d85@chi-rhs*) (set! G46ce@G2d83@expand-interaction-rhs*/init* G2d83@expand-interaction-rhs*/init*) (set! G46cd@G2d81@chi-rhs G2d81@chi-rhs) (set! G46cc@G2d7f@chi-defun G2d7f@chi-defun) (set! G46cb@G2d7d@chi-lambda-clause* G2d7d@chi-lambda-clause*) (set! G46ca@G2d7b@chi-lambda-clause G2d7b@chi-lambda-clause) (set! G46c9@G2d79@verify-formals G2d79@verify-formals) (set! G46c8@G2d77@chi-set! G2d77@chi-set!) (set! G46c7@G2d75@chi-expr G2d75@chi-expr) (set! G46c6@G2d73@chi-application G2d73@chi-application) (set! G46c5@G2d71@chi-expr* G2d71@chi-expr*) (set! G46c4@G2d6f@chi-global-macro G2d6f@chi-global-macro) (set! G46c3@G2d6d@chi-local-macro G2d6d@chi-local-macro) (set! G46c2@G2d6b@chi-macro G2d6b@chi-macro) (set! G46c1@G2d69@do-macro-call G2d69@do-macro-call) (set! G46c0@G2d67@local-macro-transformer G2d67@local-macro-transformer) (set! G46bf@G2d65@macro-transformer G2d65@macro-transformer) (set! G46be@G2d63@symbol-macro G2d63@symbol-macro) (set! G46bd@G2d61@file-options-macro G2d61@file-options-macro) (set! G46bc@G2d5f@core-macro-transformer G2d5f@core-macro-transformer) (set! G46bb@G2d5d@syntax-transformer G2d5d@syntax-transformer) (set! G46ba@G2d5b@ellipsis-map G2d5b@ellipsis-map) (set! G46b9@G2d59@syntax-case-transformer G2d59@syntax-case-transformer) (set! G46b8@G2d57@verify-literals G2d57@verify-literals) (set! G46b7@G2d55@underscore? G2d55@underscore?) (set! G46b6@G2d53@ellipsis? G2d53@ellipsis?) (set! G46b5@G2d51@syntax-dispatch G2d51@syntax-dispatch) (set! G46b4@G2d4f@convert-pattern G2d4f@convert-pattern) (set! G46b3@G2d4d@foreign-call-transformer G2d4d@foreign-call-transformer) (set! G46b2@G2d4b@parameterize-macro G2d4b@parameterize-macro) (set! G46b1@G2d49@incorrect-usage-macro G2d49@incorrect-usage-macro) (set! G46b0@G2d47@define-condition-type-macro G2d47@define-condition-type-macro) (set! G46af@G2d45@define-record-type-macro G2d45@define-record-type-macro) (set! G46ae@G2d43@define-struct-macro G2d43@define-struct-macro) (set! G46ad@G2d41@quasisyntax-macro G2d41@quasisyntax-macro) (set! G46ac@G2d3f@quasiquote-macro G2d3f@quasiquote-macro) (set! G46ab@G2d3d@syntax-rules-macro G2d3d@syntax-rules-macro) (set! G46aa@G2d3b@include-into-macro G2d3b@include-into-macro) (set! G46a9@G2d39@include-macro G2d39@include-macro) (set! G46a8@G2d37@do-include G2d37@do-include) (set! G46a7@G2d35@cond-macro G2d35@cond-macro) (set! G46a6@G2d33@and-macro G2d33@and-macro) (set! G46a5@G2d31@or-macro G2d31@or-macro) (set! G46a4@G2d2f@let*-macro G2d2f@let*-macro) (set! G46a3@G2d2d@do-macro G2d2d@do-macro) (set! G46a2@G2d2b@identifier-syntax-macro G2d2b@identifier-syntax-macro) (set! G46a1@G2d29@endianness-macro G2d29@endianness-macro) (set! G46a0@G2d27@assert-macro G2d27@assert-macro) (set! G469f@G2d25@delay-macro G2d25@delay-macro) (set! G469e@G2d23@time-macro G2d23@time-macro) (set! G469d@G2d21@define-enumeration-macro G2d21@define-enumeration-macro) (set! G469c@G2d1f@guard-macro G2d1f@guard-macro) (set! G469b@G2d1d@trace-letrec-syntax-macro G2d1d@trace-letrec-syntax-macro) (set! G469a@G2d1b@trace-let-syntax-macro G2d1b@trace-let-syntax-macro) (set! G4699@G2d19@trace-let/rec-syntax G2d19@trace-let/rec-syntax) (set! G4698@G2d17@trace-define-syntax-macro G2d17@trace-define-syntax-macro) (set! G4697@G2d15@trace-define-macro G2d15@trace-define-macro) (set! G4696@G2d13@trace-lambda-macro G2d13@trace-lambda-macro) (set! G4695@G2d11@let*-values-macro G2d11@let*-values-macro) (set! G4694@G2d0f@let-values-macro G2d0f@let-values-macro) (set! G4693@G2d0d@let-macro G2d0d@let-macro) (set! G4692@G2d0b@invalid-fmls-error G2d0b@invalid-fmls-error) (set! G4691@G2d09@with-syntax-macro G2d09@with-syntax-macro) (set! G4690@G2d07@bless G2d07@bless) (set! G468f@G2d05@lambda-transformer G2d05@lambda-transformer) (set! G468e@G2d03@case-lambda-transformer G2d03@case-lambda-transformer) (set! G468d@G2d01@quote-transformer G2d01@quote-transformer) (set! G468c@G2cff@case-macro G2cff@case-macro) (set! G468b@G2cfd@or-transformer G2cfd@or-transformer) (set! G468a@G2cfb@and-transformer G2cfb@and-transformer) (set! G4689@G2cf9@if-transformer G2cf9@if-transformer) (set! G4688@G2cf7@unless-macro G2cf7@unless-macro) (set! G4687@G2cf5@when-macro G2cf5@when-macro) (set! G4686@G2cf3@record-constructor-descriptor-transformer G2cf3@record-constructor-descriptor-transformer) (set! G4685@G2cf1@record-type-descriptor-transformer G2cf1@record-type-descriptor-transformer) (set! G4684@G2cef@type-descriptor-transformer G2cef@type-descriptor-transformer) (set! G4683@G2ced@fluid-let-syntax-transformer G2ced@fluid-let-syntax-transformer) (set! G4682@G2ceb@letrec*-transformer G2ceb@letrec*-transformer) (set! G4681@G2ce9@letrec-transformer G2ce9@letrec-transformer) (set! G4680@G2ce7@letrec-helper G2ce7@letrec-helper) (set! G467f@G2ce5@add-lexicals G2ce5@add-lexicals) (set! G467e@G2ce3@add-lexical G2ce3@add-lexical) (set! G467d@G2ce1@set-lexical-mutable! G2ce1@set-lexical-mutable!) (set! G467c@G2cdf@lexical-mutable? G2cdf@lexical-mutable?) (set! G467b@G2cdd@lexical-var G2cdd@lexical-var) (set! G467a@G2cdb@scheme-stx G2cdb@scheme-stx) (set! G4679@G2cd9@scheme-stx-hashtable G2cd9@scheme-stx-hashtable) (set! G4678@G2cd7@parse-define-syntax G2cd7@parse-define-syntax) (set! G4677@G2cd5@parse-define G2cd5@parse-define) (set! G4676@G2b9e@make-eval-transformer G2b9e@make-eval-transformer) (set! G4675@G2b9c@variable-transformer-procedure G2b9c@variable-transformer-procedure) (set! G4674@G2b9a@variable-transformer? G2b9a@variable-transformer?) (set! G4673@G2b98@make-variable-transformer G2b98@make-variable-transformer) (set! G4672@G2b96@sanitize-binding G2b96@sanitize-binding) (set! G4671@G2b88@syntax-type G2b88@syntax-type) (set! G4670@G2b86@raise-unbound-error G2b86@raise-unbound-error) (set! G466f@G2b84@binding-value G2b84@binding-value) (set! G466e@G2b82@binding-type G2b82@binding-type) (set! G466d@G2b80@make-binding G2b80@make-binding) (set! G466c@G2b7e@label->binding G2b7e@label->binding) (set! G466b@G2b7c@id->real-label G2b7c@id->real-label) (set! G466a@G2b7a@id->label G2b7a@id->label) (set! G4669@G2b78@same-marks*? G2b78@same-marks*?) (set! G4668@G2b76@stx->datum G2b76@stx->datum) (set! G4667@G2b74@strip G2b74@strip) (set! G4666@G2b72@strip-annotations G2b72@strip-annotations) (set! G4665@G2b70@self-evaluating? G2b70@self-evaluating?) (set! G4664@G2b6e@bound-id-member? G2b6e@bound-id-member?) (set! G4663@G2b6c@distinct-bound-ids? G2b6c@distinct-bound-ids?) (set! G4662@G2b6a@valid-bound-ids? G2b6a@valid-bound-ids?) (set! G4661@G2b68@free-id=? G2b68@free-id=?) (set! G4660@G2b66@bound-id=? G2b66@bound-id=?) (set! G465f@G2b64@same-marks? G2b64@same-marks?) (set! G465e@G2b62@id->sym G2b62@id->sym) (set! G465d@G2b60@id? G2b60@id?) (set! G465c@G2b5e@syntax->list G2b5e@syntax->list) (set! G465b@G2b5c@syntax-cdr G2b5c@syntax-cdr) (set! G465a@G2b5a@syntax-car G2b5a@syntax-car) (set! G4659@G2b58@syntax-list? G2b58@syntax-list?) (set! G4658@G2b56@syntax-null? G2b56@syntax-null?) (set! G4657@G2b54@syntax-vector? G2b54@syntax-vector?) (set! G4656@G2b52@syntax-pair? G2b52@syntax-pair?) (set! G4655@G2b50@syntax-vector->list G2b50@syntax-vector->list) (set! G4654@G2b4e@syntax-kind? G2b4e@syntax-kind?) (set! G4653@G2b4c@add-subst G2b4c@add-subst) (set! G4652@G2b4a@add-mark G2b4a@add-mark) (set! G4651@G2b48@mkstx G2b48@mkstx) (set! G4650@G2b46@join-wraps G2b46@join-wraps) (set! G464f@G2b44@anti-mark? G2b44@anti-mark?) (set! G464e@G2b42@anti-mark G2b42@anti-mark) (set! G464d@G2b40@gen-mark G2b40@gen-mark) (set! G464c@G2b3e@datum->stx G2b3e@datum->stx) (set! G464b@G2b3c@rp G2b3c@rp) (set! G464a@G2b3a@set-stx-ae*! G2b3a@set-stx-ae*!) (set! G4649@G2b38@set-stx-subst*! G2b38@set-stx-subst*!) (set! G4648@G2b36@set-stx-mark*! G2b36@set-stx-mark*!) (set! G4647@G2b34@set-stx-expr! G2b34@set-stx-expr!) (set! G4646@G2b32@stx-ae* G2b32@stx-ae*) (set! G4645@G2b30@stx-subst* G2b30@stx-subst*) (set! G4644@G2b2e@stx-mark* G2b2e@stx-mark*) (set! G4643@G2b2c@stx-expr G2b2c@stx-expr) (set! G4642@G2b2a@make-stx G2b2a@make-stx) (set! G4641@G2b28@stx? G2b28@stx?) (set! G4640@G2b25@G2b1d G2b25@G2b1d) (set! G463f@G2b23@G2b1e G2b23@G2b1e) (set! G463e@G2b21@G2b1c G2b21@G2b1c) (set! G463d@G2b1b@make-full-rib G2b1b@make-full-rib) (set! G463c@G2b19@unseal-rib! G2b19@unseal-rib!) (set! G463b@G2b17@seal-rib! G2b17@seal-rib!) (set! G463a@G2b15@make-rib-map G2b15@make-rib-map) (set! G4639@G2b13@extend-rib/nc! G2b13@extend-rib/nc!) (set! G4638@G2b11@extend-rib! G2b11@extend-rib!) (set! G4637@G2b0f@make-empty-rib G2b0f@make-empty-rib) (set! G4636@G2b0d@set-rib-cache! G2b0d@set-rib-cache!) (set! G4635@G2b0b@set-rib-sealed/freq! G2b0b@set-rib-sealed/freq!) (set! G4634@G2b09@set-rib-label*! G2b09@set-rib-label*!) (set! G4633@G2b07@set-rib-mark**! G2b07@set-rib-mark**!) (set! G4632@G2b05@set-rib-sym*! G2b05@set-rib-sym*!) (set! G4631@G2b03@rib-cache G2b03@rib-cache) (set! G4630@G2b01@rib-sealed/freq G2b01@rib-sealed/freq) (set! G462f@G2aff@rib-label* G2aff@rib-label*) (set! G462e@G2afd@rib-mark** G2afd@rib-mark**) (set! G462d@G2afb@rib-sym* G2afb@rib-sym*) (set! G462c@G2af9@make-rib G2af9@make-rib) (set! G462b@G2af7@rib? G2af7@rib?) (set! G462a@G2af4@G2aec G2af4@G2aec) (set! G4629@G2af2@G2aed G2af2@G2aed) (set! G4628@G2af0@G2aeb G2af0@G2aeb) (set! G4627@G2aea@gen-define-label G2aea@gen-define-label) (set! G4626@G2ae8@gen-define-label+loc G2ae8@gen-define-label+loc) (set! G4625@G2ae6@gen-top-level-label G2ae6@gen-top-level-label) (set! G4624@G2ae4@gen-label G2ae4@gen-label) (set! G4623@G2ae2@gen-global G2ae2@gen-global) (set! G4622@G2ae0@gen-lexical G2ae0@gen-lexical) (set! G4621@G2ade@top-marked? G2ade@top-marked?) (set! G4620@G2adc@top-mark* G2adc@top-mark*) (set! G461f@G2ad7@set-union G2ad7@set-union) (set! G461e@G2ad5@set-cons G2ad5@set-cons) (G297e@G281b@current-library-expander G2e1e@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4734@G472f G4736@G4731 G4738@G4730 G473b@&condition? G473d@make-&condition G473f@&condition-rtd G4741@&condition-rcd G4789@G4784 G478b@G4786 G478d@G4785 G4790@p? G4792@make-message-condition G4794@G4783 G4796@message-condition? G4798@condition-message G479a@&message-rtd G479c@&message-rcd G47a2@G479d G47a4@G479f G47a6@G479e G47a9@p? G47ab@make-warning G47ad@warning? G47af@&warning-rtd G47b1@&warning-rcd G47b7@G47b2 G47b9@G47b4 G47bb@G47b3 G47be@p? G47c0@make-serious-condition G47c2@serious-condition? G47c4@&serious-rtd G47c6@&serious-rcd G47cc@G47c7 G47ce@G47c9 G47d0@G47c8 G47d3@p? G47d5@make-error G47d7@error? G47d9@&error-rtd G47db@&error-rcd G47e1@G47dc G47e3@G47de G47e5@G47dd G47e8@p? G47ea@make-violation G47ec@violation? G47ee@&violation-rtd G47f0@&violation-rcd G47f6@G47f1 G47f8@G47f3 G47fa@G47f2 G47fd@p? G47ff@make-assertion-violation G4801@assertion-violation? G4803@&assertion-rtd G4805@&assertion-rcd G480c@G4807 G480e@G4809 G4810@G4808 G4813@p? G4815@make-irritants-condition G4817@G4806 G4819@irritants-condition? G481b@condition-irritants G481d@&irritants-rtd G481f@&irritants-rcd G4826@G4821 G4828@G4823 G482a@G4822 G482d@p? G482f@make-who-condition G4831@G4820 G4833@who-condition? G4835@condition-who G4837@&who-rtd G4839@&who-rcd G483f@G483a G4841@G483c G4843@G483b G4846@p? G4848@make-non-continuable-violation G484a@non-continuable-violation? G484c@&non-continuable-rtd G484e@&non-continuable-rcd G4854@G484f G4856@G4851 G4858@G4850 G485b@p? G485d@make-implementation-restriction-violation G485f@implementation-restriction-violation? G4861@&implementation-restriction-rtd G4863@&implementation-restriction-rcd G4869@G4864 G486b@G4866 G486d@G4865 G4870@p? G4872@make-lexical-violation G4874@lexical-violation? G4876@&lexical-rtd G4878@&lexical-rcd G4880@G487b G4882@G487d G4884@G487c G4887@p? G4889@make-syntax-violation G488b@G4879 G488d@G487a G488f@syntax-violation? G4891@syntax-violation-form G4893@syntax-violation-subform G4895@&syntax-rtd G4897@&syntax-rcd G489d@G4898 G489f@G489a G48a1@G4899 G48a4@p? G48a6@make-undefined-violation G48a8@undefined-violation? G48aa@&undefined-rtd G48ac@&undefined-rcd G48b2@G48ad G48b4@G48af G48b6@G48ae G48b9@p? G48bb@make-i/o-error G48bd@i/o-error? G48bf@&i/o-rtd G48c1@&i/o-rcd G48c7@G48c2 G48c9@G48c4 G48cb@G48c3 G48ce@p? G48d0@make-i/o-read-error G48d2@i/o-read-error? G48d4@&i/o-read-rtd G48d6@&i/o-read-rcd G48dc@G48d7 G48de@G48d9 G48e0@G48d8 G48e3@p? G48e5@make-i/o-write-error G48e7@i/o-write-error? G48e9@&i/o-write-rtd G48eb@&i/o-write-rcd G48f2@G48ed G48f4@G48ef G48f6@G48ee G48f9@p? G48fb@make-i/o-invalid-position-error G48fd@G48ec G48ff@i/o-invalid-position-error? G4901@i/o-error-position G4903@&i/o-invalid-position-rtd G4905@&i/o-invalid-position-rcd G490c@G4907 G490e@G4909 G4910@G4908 G4913@p? G4915@make-i/o-filename-error G4917@G4906 G4919@i/o-filename-error? G491b@i/o-error-filename G491d@&i/o-filename-rtd G491f@&i/o-filename-rcd G4925@G4920 G4927@G4922 G4929@G4921 G492c@p? G492e@make-i/o-file-protection-error G4930@i/o-file-protection-error? G4932@&i/o-file-protection-rtd G4934@&i/o-file-protection-rcd G493a@G4935 G493c@G4937 G493e@G4936 G4941@p? G4943@make-i/o-file-is-read-only-error G4945@i/o-file-is-read-only-error? G4947@&i/o-file-is-read-only-rtd G4949@&i/o-file-is-read-only-rcd G494f@G494a G4951@G494c G4953@G494b G4956@p? G4958@make-i/o-file-already-exists-error G495a@i/o-file-already-exists-error? G495c@&i/o-file-already-exists-rtd G495e@&i/o-file-already-exists-rcd G4964@G495f G4966@G4961 G4968@G4960 G496b@p? G496d@make-i/o-file-does-not-exist-error G496f@i/o-file-does-not-exist-error? G4971@&i/o-file-does-not-exist-rtd G4973@&i/o-file-does-not-exist-rcd G497a@G4975 G497c@G4977 G497e@G4976 G4981@p? G4983@make-i/o-port-error G4985@G4974 G4987@i/o-port-error? G4989@i/o-error-port G498b@&i/o-port-rtd G498d@&i/o-port-rcd G4993@G498e G4995@G4990 G4997@G498f G499a@p? G499c@make-i/o-decoding-error G499e@i/o-decoding-error? G49a0@&i/o-decoding-rtd G49a2@&i/o-decoding-rcd G49a9@G49a4 G49ab@G49a6 G49ad@G49a5 G49b0@p? G49b2@make-i/o-encoding-error G49b4@G49a3 G49b6@i/o-encoding-error? G49b8@i/o-encoding-error-char G49ba@&i/o-encoding-rtd G49bc@&i/o-encoding-rcd G49c2@G49bd G49c4@G49bf G49c6@G49be G49c9@p? G49cb@make-no-infinities-violation G49cd@no-infinities-violation? G49cf@&no-infinities-rtd G49d1@&no-infinities-rcd G49d7@G49d2 G49d9@G49d4 G49db@G49d3 G49de@p? G49e0@make-no-nans-violation G49e2@no-nans-violation? G49e4@&no-nans-rtd G49e6@&no-nans-rcd) (begin (set! G4734@G472f (make-record-type-descriptor '&condition '#f 'G4732 '#f '#f '#())) (set! G4736@G4731 '#f) (set! G4738@G4730 (make-record-constructor-descriptor G4734@G472f '#f G4736@G4731)) (set! G473b@&condition? (record-predicate G4734@G472f)) (set! G473d@make-&condition (record-constructor G4738@G4730)) (set! G473f@&condition-rtd G4734@G472f) (set! G4741@&condition-rcd G4738@G4730) (set! G4789@G4784 (make-record-type-descriptor '&message G4734@G472f 'G4787 '#f '#f '#((immutable message)))) (set! G478b@G4786 '#f) (set! G478d@G4785 (make-record-constructor-descriptor G4789@G4784 G4738@G4730 G478b@G4786)) (set! G4790@p? (record-predicate G4789@G4784)) (set! G4792@make-message-condition (record-constructor G478d@G4785)) (set! G4794@G4783 (record-accessor G4789@G4784 '0)) (set! G4796@message-condition? (condition-predicate G4789@G4784)) (set! G4798@condition-message (condition-accessor G4789@G4784 G4794@G4783)) (set! G479a@&message-rtd G4789@G4784) (set! G479c@&message-rcd G478d@G4785) (set! G47a2@G479d (make-record-type-descriptor '&warning G4734@G472f 'G47a0 '#f '#f '#())) (set! G47a4@G479f '#f) (set! G47a6@G479e (make-record-constructor-descriptor G47a2@G479d G4738@G4730 G47a4@G479f)) (set! G47a9@p? (record-predicate G47a2@G479d)) (set! G47ab@make-warning (record-constructor G47a6@G479e)) (set! G47ad@warning? (condition-predicate G47a2@G479d)) (set! G47af@&warning-rtd G47a2@G479d) (set! G47b1@&warning-rcd G47a6@G479e) (set! G47b7@G47b2 (make-record-type-descriptor '&serious G4734@G472f 'G47b5 '#f '#f '#())) (set! G47b9@G47b4 '#f) (set! G47bb@G47b3 (make-record-constructor-descriptor G47b7@G47b2 G4738@G4730 G47b9@G47b4)) (set! G47be@p? (record-predicate G47b7@G47b2)) (set! G47c0@make-serious-condition (record-constructor G47bb@G47b3)) (set! G47c2@serious-condition? (condition-predicate G47b7@G47b2)) (set! G47c4@&serious-rtd G47b7@G47b2) (set! G47c6@&serious-rcd G47bb@G47b3) (set! G47cc@G47c7 (make-record-type-descriptor '&error G47b7@G47b2 'G47ca '#f '#f '#())) (set! G47ce@G47c9 '#f) (set! G47d0@G47c8 (make-record-constructor-descriptor G47cc@G47c7 G47bb@G47b3 G47ce@G47c9)) (set! G47d3@p? (record-predicate G47cc@G47c7)) (set! G47d5@make-error (record-constructor G47d0@G47c8)) (set! G47d7@error? (condition-predicate G47cc@G47c7)) (set! G47d9@&error-rtd G47cc@G47c7) (set! G47db@&error-rcd G47d0@G47c8) (set! G47e1@G47dc (make-record-type-descriptor '&violation G47b7@G47b2 'G47df '#f '#f '#())) (set! G47e3@G47de '#f) (set! G47e5@G47dd (make-record-constructor-descriptor G47e1@G47dc G47bb@G47b3 G47e3@G47de)) (set! G47e8@p? (record-predicate G47e1@G47dc)) (set! G47ea@make-violation (record-constructor G47e5@G47dd)) (set! G47ec@violation? (condition-predicate G47e1@G47dc)) (set! G47ee@&violation-rtd G47e1@G47dc) (set! G47f0@&violation-rcd G47e5@G47dd) (set! G47f6@G47f1 (make-record-type-descriptor '&assertion G47e1@G47dc 'G47f4 '#f '#f '#())) (set! G47f8@G47f3 '#f) (set! G47fa@G47f2 (make-record-constructor-descriptor G47f6@G47f1 G47e5@G47dd G47f8@G47f3)) (set! G47fd@p? (record-predicate G47f6@G47f1)) (set! G47ff@make-assertion-violation (record-constructor G47fa@G47f2)) (set! G4801@assertion-violation? (condition-predicate G47f6@G47f1)) (set! G4803@&assertion-rtd G47f6@G47f1) (set! G4805@&assertion-rcd G47fa@G47f2) (set! G480c@G4807 (make-record-type-descriptor '&irritants G4734@G472f 'G480a '#f '#f '#((immutable irritants)))) (set! G480e@G4809 '#f) (set! G4810@G4808 (make-record-constructor-descriptor G480c@G4807 G4738@G4730 G480e@G4809)) (set! G4813@p? (record-predicate G480c@G4807)) (set! G4815@make-irritants-condition (record-constructor G4810@G4808)) (set! G4817@G4806 (record-accessor G480c@G4807 '0)) (set! G4819@irritants-condition? (condition-predicate G480c@G4807)) (set! G481b@condition-irritants (condition-accessor G480c@G4807 G4817@G4806)) (set! G481d@&irritants-rtd G480c@G4807) (set! G481f@&irritants-rcd G4810@G4808) (set! G4826@G4821 (make-record-type-descriptor '&who G4734@G472f 'G4824 '#f '#f '#((immutable who)))) (set! G4828@G4823 '#f) (set! G482a@G4822 (make-record-constructor-descriptor G4826@G4821 G4738@G4730 G4828@G4823)) (set! G482d@p? (record-predicate G4826@G4821)) (set! G482f@make-who-condition (record-constructor G482a@G4822)) (set! G4831@G4820 (record-accessor G4826@G4821 '0)) (set! G4833@who-condition? (condition-predicate G4826@G4821)) (set! G4835@condition-who (condition-accessor G4826@G4821 G4831@G4820)) (set! G4837@&who-rtd G4826@G4821) (set! G4839@&who-rcd G482a@G4822) (set! G483f@G483a (make-record-type-descriptor '&non-continuable G47e1@G47dc 'G483d '#f '#f '#())) (set! G4841@G483c '#f) (set! G4843@G483b (make-record-constructor-descriptor G483f@G483a G47e5@G47dd G4841@G483c)) (set! G4846@p? (record-predicate G483f@G483a)) (set! G4848@make-non-continuable-violation (record-constructor G4843@G483b)) (set! G484a@non-continuable-violation? (condition-predicate G483f@G483a)) (set! G484c@&non-continuable-rtd G483f@G483a) (set! G484e@&non-continuable-rcd G4843@G483b) (set! G4854@G484f (make-record-type-descriptor '&implementation-restriction G47e1@G47dc 'G4852 '#f '#f '#())) (set! G4856@G4851 '#f) (set! G4858@G4850 (make-record-constructor-descriptor G4854@G484f G47e5@G47dd G4856@G4851)) (set! G485b@p? (record-predicate G4854@G484f)) (set! G485d@make-implementation-restriction-violation (record-constructor G4858@G4850)) (set! G485f@implementation-restriction-violation? (condition-predicate G4854@G484f)) (set! G4861@&implementation-restriction-rtd G4854@G484f) (set! G4863@&implementation-restriction-rcd G4858@G4850) (set! G4869@G4864 (make-record-type-descriptor '&lexical G47e1@G47dc 'G4867 '#f '#f '#())) (set! G486b@G4866 '#f) (set! G486d@G4865 (make-record-constructor-descriptor G4869@G4864 G47e5@G47dd G486b@G4866)) (set! G4870@p? (record-predicate G4869@G4864)) (set! G4872@make-lexical-violation (record-constructor G486d@G4865)) (set! G4874@lexical-violation? (condition-predicate G4869@G4864)) (set! G4876@&lexical-rtd G4869@G4864) (set! G4878@&lexical-rcd G486d@G4865) (set! G4880@G487b (make-record-type-descriptor '&syntax G47e1@G47dc 'G487e '#f '#f '#((immutable form) (immutable subform)))) (set! G4882@G487d '#f) (set! G4884@G487c (make-record-constructor-descriptor G4880@G487b G47e5@G47dd G4882@G487d)) (set! G4887@p? (record-predicate G4880@G487b)) (set! G4889@make-syntax-violation (record-constructor G4884@G487c)) (set! G488b@G4879 (record-accessor G4880@G487b '0)) (set! G488d@G487a (record-accessor G4880@G487b '1)) (set! G488f@syntax-violation? (condition-predicate G4880@G487b)) (set! G4891@syntax-violation-form (condition-accessor G4880@G487b G488b@G4879)) (set! G4893@syntax-violation-subform (condition-accessor G4880@G487b G488d@G487a)) (set! G4895@&syntax-rtd G4880@G487b) (set! G4897@&syntax-rcd G4884@G487c) (set! G489d@G4898 (make-record-type-descriptor '&undefined G47e1@G47dc 'G489b '#f '#f '#())) (set! G489f@G489a '#f) (set! G48a1@G4899 (make-record-constructor-descriptor G489d@G4898 G47e5@G47dd G489f@G489a)) (set! G48a4@p? (record-predicate G489d@G4898)) (set! G48a6@make-undefined-violation (record-constructor G48a1@G4899)) (set! G48a8@undefined-violation? (condition-predicate G489d@G4898)) (set! G48aa@&undefined-rtd G489d@G4898) (set! G48ac@&undefined-rcd G48a1@G4899) (set! G48b2@G48ad (make-record-type-descriptor '&i/o G47cc@G47c7 'G48b0 '#f '#f '#())) (set! G48b4@G48af '#f) (set! G48b6@G48ae (make-record-constructor-descriptor G48b2@G48ad G47d0@G47c8 G48b4@G48af)) (set! G48b9@p? (record-predicate G48b2@G48ad)) (set! G48bb@make-i/o-error (record-constructor G48b6@G48ae)) (set! G48bd@i/o-error? (condition-predicate G48b2@G48ad)) (set! G48bf@&i/o-rtd G48b2@G48ad) (set! G48c1@&i/o-rcd G48b6@G48ae) (set! G48c7@G48c2 (make-record-type-descriptor '&i/o-read G48b2@G48ad 'G48c5 '#f '#f '#())) (set! G48c9@G48c4 '#f) (set! G48cb@G48c3 (make-record-constructor-descriptor G48c7@G48c2 G48b6@G48ae G48c9@G48c4)) (set! G48ce@p? (record-predicate G48c7@G48c2)) (set! G48d0@make-i/o-read-error (record-constructor G48cb@G48c3)) (set! G48d2@i/o-read-error? (condition-predicate G48c7@G48c2)) (set! G48d4@&i/o-read-rtd G48c7@G48c2) (set! G48d6@&i/o-read-rcd G48cb@G48c3) (set! G48dc@G48d7 (make-record-type-descriptor '&i/o-write G48b2@G48ad 'G48da '#f '#f '#())) (set! G48de@G48d9 '#f) (set! G48e0@G48d8 (make-record-constructor-descriptor G48dc@G48d7 G48b6@G48ae G48de@G48d9)) (set! G48e3@p? (record-predicate G48dc@G48d7)) (set! G48e5@make-i/o-write-error (record-constructor G48e0@G48d8)) (set! G48e7@i/o-write-error? (condition-predicate G48dc@G48d7)) (set! G48e9@&i/o-write-rtd G48dc@G48d7) (set! G48eb@&i/o-write-rcd G48e0@G48d8) (set! G48f2@G48ed (make-record-type-descriptor '&i/o-invalid-position G48b2@G48ad 'G48f0 '#f '#f '#((immutable position)))) (set! G48f4@G48ef '#f) (set! G48f6@G48ee (make-record-constructor-descriptor G48f2@G48ed G48b6@G48ae G48f4@G48ef)) (set! G48f9@p? (record-predicate G48f2@G48ed)) (set! G48fb@make-i/o-invalid-position-error (record-constructor G48f6@G48ee)) (set! G48fd@G48ec (record-accessor G48f2@G48ed '0)) (set! G48ff@i/o-invalid-position-error? (condition-predicate G48f2@G48ed)) (set! G4901@i/o-error-position (condition-accessor G48f2@G48ed G48fd@G48ec)) (set! G4903@&i/o-invalid-position-rtd G48f2@G48ed) (set! G4905@&i/o-invalid-position-rcd G48f6@G48ee) (set! G490c@G4907 (make-record-type-descriptor '&i/o-filename G48b2@G48ad 'G490a '#f '#f '#((immutable filename)))) (set! G490e@G4909 '#f) (set! G4910@G4908 (make-record-constructor-descriptor G490c@G4907 G48b6@G48ae G490e@G4909)) (set! G4913@p? (record-predicate G490c@G4907)) (set! G4915@make-i/o-filename-error (record-constructor G4910@G4908)) (set! G4917@G4906 (record-accessor G490c@G4907 '0)) (set! G4919@i/o-filename-error? (condition-predicate G490c@G4907)) (set! G491b@i/o-error-filename (condition-accessor G490c@G4907 G4917@G4906)) (set! G491d@&i/o-filename-rtd G490c@G4907) (set! G491f@&i/o-filename-rcd G4910@G4908) (set! G4925@G4920 (make-record-type-descriptor '&i/o-file-protection G490c@G4907 'G4923 '#f '#f '#())) (set! G4927@G4922 '#f) (set! G4929@G4921 (make-record-constructor-descriptor G4925@G4920 G4910@G4908 G4927@G4922)) (set! G492c@p? (record-predicate G4925@G4920)) (set! G492e@make-i/o-file-protection-error (record-constructor G4929@G4921)) (set! G4930@i/o-file-protection-error? (condition-predicate G4925@G4920)) (set! G4932@&i/o-file-protection-rtd G4925@G4920) (set! G4934@&i/o-file-protection-rcd G4929@G4921) (set! G493a@G4935 (make-record-type-descriptor '&i/o-file-is-read-only G4925@G4920 'G4938 '#f '#f '#())) (set! G493c@G4937 '#f) (set! G493e@G4936 (make-record-constructor-descriptor G493a@G4935 G4929@G4921 G493c@G4937)) (set! G4941@p? (record-predicate G493a@G4935)) (set! G4943@make-i/o-file-is-read-only-error (record-constructor G493e@G4936)) (set! G4945@i/o-file-is-read-only-error? (condition-predicate G493a@G4935)) (set! G4947@&i/o-file-is-read-only-rtd G493a@G4935) (set! G4949@&i/o-file-is-read-only-rcd G493e@G4936) (set! G494f@G494a (make-record-type-descriptor '&i/o-file-already-exists G490c@G4907 'G494d '#f '#f '#())) (set! G4951@G494c '#f) (set! G4953@G494b (make-record-constructor-descriptor G494f@G494a G4910@G4908 G4951@G494c)) (set! G4956@p? (record-predicate G494f@G494a)) (set! G4958@make-i/o-file-already-exists-error (record-constructor G4953@G494b)) (set! G495a@i/o-file-already-exists-error? (condition-predicate G494f@G494a)) (set! G495c@&i/o-file-already-exists-rtd G494f@G494a) (set! G495e@&i/o-file-already-exists-rcd G4953@G494b) (set! G4964@G495f (make-record-type-descriptor '&i/o-file-does-not-exist G490c@G4907 'G4962 '#f '#f '#())) (set! G4966@G4961 '#f) (set! G4968@G4960 (make-record-constructor-descriptor G4964@G495f G4910@G4908 G4966@G4961)) (set! G496b@p? (record-predicate G4964@G495f)) (set! G496d@make-i/o-file-does-not-exist-error (record-constructor G4968@G4960)) (set! G496f@i/o-file-does-not-exist-error? (condition-predicate G4964@G495f)) (set! G4971@&i/o-file-does-not-exist-rtd G4964@G495f) (set! G4973@&i/o-file-does-not-exist-rcd G4968@G4960) (set! G497a@G4975 (make-record-type-descriptor '&i/o-port G48b2@G48ad 'G4978 '#f '#f '#((immutable port)))) (set! G497c@G4977 '#f) (set! G497e@G4976 (make-record-constructor-descriptor G497a@G4975 G48b6@G48ae G497c@G4977)) (set! G4981@p? (record-predicate G497a@G4975)) (set! G4983@make-i/o-port-error (record-constructor G497e@G4976)) (set! G4985@G4974 (record-accessor G497a@G4975 '0)) (set! G4987@i/o-port-error? (condition-predicate G497a@G4975)) (set! G4989@i/o-error-port (condition-accessor G497a@G4975 G4985@G4974)) (set! G498b@&i/o-port-rtd G497a@G4975) (set! G498d@&i/o-port-rcd G497e@G4976) (set! G4993@G498e (make-record-type-descriptor '&i/o-decoding G497a@G4975 'G4991 '#f '#f '#())) (set! G4995@G4990 '#f) (set! G4997@G498f (make-record-constructor-descriptor G4993@G498e G497e@G4976 G4995@G4990)) (set! G499a@p? (record-predicate G4993@G498e)) (set! G499c@make-i/o-decoding-error (record-constructor G4997@G498f)) (set! G499e@i/o-decoding-error? (condition-predicate G4993@G498e)) (set! G49a0@&i/o-decoding-rtd G4993@G498e) (set! G49a2@&i/o-decoding-rcd G4997@G498f) (set! G49a9@G49a4 (make-record-type-descriptor '&i/o-encoding G497a@G4975 'G49a7 '#f '#f '#((immutable char)))) (set! G49ab@G49a6 '#f) (set! G49ad@G49a5 (make-record-constructor-descriptor G49a9@G49a4 G497e@G4976 G49ab@G49a6)) (set! G49b0@p? (record-predicate G49a9@G49a4)) (set! G49b2@make-i/o-encoding-error (record-constructor G49ad@G49a5)) (set! G49b4@G49a3 (record-accessor G49a9@G49a4 '0)) (set! G49b6@i/o-encoding-error? (condition-predicate G49a9@G49a4)) (set! G49b8@i/o-encoding-error-char (condition-accessor G49a9@G49a4 G49b4@G49a3)) (set! G49ba@&i/o-encoding-rtd G49a9@G49a4) (set! G49bc@&i/o-encoding-rcd G49ad@G49a5) (set! G49c2@G49bd (make-record-type-descriptor '&no-infinities G4854@G484f 'G49c0 '#f '#f '#())) (set! G49c4@G49bf '#f) (set! G49c6@G49be (make-record-constructor-descriptor G49c2@G49bd G4858@G4850 G49c4@G49bf)) (set! G49c9@p? (record-predicate G49c2@G49bd)) (set! G49cb@make-no-infinities-violation (record-constructor G49c6@G49be)) (set! G49cd@no-infinities-violation? (condition-predicate G49c2@G49bd)) (set! G49cf@&no-infinities-rtd G49c2@G49bd) (set! G49d1@&no-infinities-rcd G49c6@G49be) (set! G49d7@G49d2 (make-record-type-descriptor '&no-nans G4854@G484f 'G49d5 '#f '#f '#())) (set! G49d9@G49d4 '#f) (set! G49db@G49d3 (make-record-constructor-descriptor G49d7@G49d2 G4858@G4850 G49d9@G49d4)) (set! G49de@p? (record-predicate G49d7@G49d2)) (set! G49e0@make-no-nans-violation (record-constructor G49db@G49d3)) (set! G49e2@no-nans-violation? (condition-predicate G49d7@G49d2)) (set! G49e4@&no-nans-rtd G49d7@G49d2) (set! G49e6@&no-nans-rcd G49db@G49d3) (begin (set! G4ad7@G49e6@&no-nans-rcd G49e6@&no-nans-rcd) (set! G4ad6@G49e4@&no-nans-rtd G49e4@&no-nans-rtd) (set! G4ad5@G49e2@no-nans-violation? G49e2@no-nans-violation?) (set! G4ad4@G49e0@make-no-nans-violation G49e0@make-no-nans-violation) (set! G4ad3@G49de@p? G49de@p?) (set! G4ad2@G49db@G49d3 G49db@G49d3) (set! G4ad1@G49d9@G49d4 G49d9@G49d4) (set! G4ad0@G49d7@G49d2 G49d7@G49d2) (set! G4acf@G49d1@&no-infinities-rcd G49d1@&no-infinities-rcd) (set! G4ace@G49cf@&no-infinities-rtd G49cf@&no-infinities-rtd) (set! G4acd@G49cd@no-infinities-violation? G49cd@no-infinities-violation?) (set! G4acc@G49cb@make-no-infinities-violation G49cb@make-no-infinities-violation) (set! G4acb@G49c9@p? G49c9@p?) (set! G4aca@G49c6@G49be G49c6@G49be) (set! G4ac9@G49c4@G49bf G49c4@G49bf) (set! G4ac8@G49c2@G49bd G49c2@G49bd) (set! G4ac7@G49bc@&i/o-encoding-rcd G49bc@&i/o-encoding-rcd) (set! G4ac6@G49ba@&i/o-encoding-rtd G49ba@&i/o-encoding-rtd) (set! G4ac5@G49b8@i/o-encoding-error-char G49b8@i/o-encoding-error-char) (set! G4ac4@G49b6@i/o-encoding-error? G49b6@i/o-encoding-error?) (set! G4ac3@G49b4@G49a3 G49b4@G49a3) (set! G4ac2@G49b2@make-i/o-encoding-error G49b2@make-i/o-encoding-error) (set! G4ac1@G49b0@p? G49b0@p?) (set! G4ac0@G49ad@G49a5 G49ad@G49a5) (set! G4abf@G49ab@G49a6 G49ab@G49a6) (set! G4abe@G49a9@G49a4 G49a9@G49a4) (set! G4abd@G49a2@&i/o-decoding-rcd G49a2@&i/o-decoding-rcd) (set! G4abc@G49a0@&i/o-decoding-rtd G49a0@&i/o-decoding-rtd) (set! G4abb@G499e@i/o-decoding-error? G499e@i/o-decoding-error?) (set! G4aba@G499c@make-i/o-decoding-error G499c@make-i/o-decoding-error) (set! G4ab9@G499a@p? G499a@p?) (set! G4ab8@G4997@G498f G4997@G498f) (set! G4ab7@G4995@G4990 G4995@G4990) (set! G4ab6@G4993@G498e G4993@G498e) (set! G4ab5@G498d@&i/o-port-rcd G498d@&i/o-port-rcd) (set! G4ab4@G498b@&i/o-port-rtd G498b@&i/o-port-rtd) (set! G4ab3@G4989@i/o-error-port G4989@i/o-error-port) (set! G4ab2@G4987@i/o-port-error? G4987@i/o-port-error?) (set! G4ab1@G4985@G4974 G4985@G4974) (set! G4ab0@G4983@make-i/o-port-error G4983@make-i/o-port-error) (set! G4aaf@G4981@p? G4981@p?) (set! G4aae@G497e@G4976 G497e@G4976) (set! G4aad@G497c@G4977 G497c@G4977) (set! G4aac@G497a@G4975 G497a@G4975) (set! G4aab@G4973@&i/o-file-does-not-exist-rcd G4973@&i/o-file-does-not-exist-rcd) (set! G4aaa@G4971@&i/o-file-does-not-exist-rtd G4971@&i/o-file-does-not-exist-rtd) (set! G4aa9@G496f@i/o-file-does-not-exist-error? G496f@i/o-file-does-not-exist-error?) (set! G4aa8@G496d@make-i/o-file-does-not-exist-error G496d@make-i/o-file-does-not-exist-error) (set! G4aa7@G496b@p? G496b@p?) (set! G4aa6@G4968@G4960 G4968@G4960) (set! G4aa5@G4966@G4961 G4966@G4961) (set! G4aa4@G4964@G495f G4964@G495f) (set! G4aa3@G495e@&i/o-file-already-exists-rcd G495e@&i/o-file-already-exists-rcd) (set! G4aa2@G495c@&i/o-file-already-exists-rtd G495c@&i/o-file-already-exists-rtd) (set! G4aa1@G495a@i/o-file-already-exists-error? G495a@i/o-file-already-exists-error?) (set! G4aa0@G4958@make-i/o-file-already-exists-error G4958@make-i/o-file-already-exists-error) (set! G4a9f@G4956@p? G4956@p?) (set! G4a9e@G4953@G494b G4953@G494b) (set! G4a9d@G4951@G494c G4951@G494c) (set! G4a9c@G494f@G494a G494f@G494a) (set! G4a9b@G4949@&i/o-file-is-read-only-rcd G4949@&i/o-file-is-read-only-rcd) (set! G4a9a@G4947@&i/o-file-is-read-only-rtd G4947@&i/o-file-is-read-only-rtd) (set! G4a99@G4945@i/o-file-is-read-only-error? G4945@i/o-file-is-read-only-error?) (set! G4a98@G4943@make-i/o-file-is-read-only-error G4943@make-i/o-file-is-read-only-error) (set! G4a97@G4941@p? G4941@p?) (set! G4a96@G493e@G4936 G493e@G4936) (set! G4a95@G493c@G4937 G493c@G4937) (set! G4a94@G493a@G4935 G493a@G4935) (set! G4a93@G4934@&i/o-file-protection-rcd G4934@&i/o-file-protection-rcd) (set! G4a92@G4932@&i/o-file-protection-rtd G4932@&i/o-file-protection-rtd) (set! G4a91@G4930@i/o-file-protection-error? G4930@i/o-file-protection-error?) (set! G4a90@G492e@make-i/o-file-protection-error G492e@make-i/o-file-protection-error) (set! G4a8f@G492c@p? G492c@p?) (set! G4a8e@G4929@G4921 G4929@G4921) (set! G4a8d@G4927@G4922 G4927@G4922) (set! G4a8c@G4925@G4920 G4925@G4920) (set! G4a8b@G491f@&i/o-filename-rcd G491f@&i/o-filename-rcd) (set! G4a8a@G491d@&i/o-filename-rtd G491d@&i/o-filename-rtd) (set! G4a89@G491b@i/o-error-filename G491b@i/o-error-filename) (set! G4a88@G4919@i/o-filename-error? G4919@i/o-filename-error?) (set! G4a87@G4917@G4906 G4917@G4906) (set! G4a86@G4915@make-i/o-filename-error G4915@make-i/o-filename-error) (set! G4a85@G4913@p? G4913@p?) (set! G4a84@G4910@G4908 G4910@G4908) (set! G4a83@G490e@G4909 G490e@G4909) (set! G4a82@G490c@G4907 G490c@G4907) (set! G4a81@G4905@&i/o-invalid-position-rcd G4905@&i/o-invalid-position-rcd) (set! G4a80@G4903@&i/o-invalid-position-rtd G4903@&i/o-invalid-position-rtd) (set! G4a7f@G4901@i/o-error-position G4901@i/o-error-position) (set! G4a7e@G48ff@i/o-invalid-position-error? G48ff@i/o-invalid-position-error?) (set! G4a7d@G48fd@G48ec G48fd@G48ec) (set! G4a7c@G48fb@make-i/o-invalid-position-error G48fb@make-i/o-invalid-position-error) (set! G4a7b@G48f9@p? G48f9@p?) (set! G4a7a@G48f6@G48ee G48f6@G48ee) (set! G4a79@G48f4@G48ef G48f4@G48ef) (set! G4a78@G48f2@G48ed G48f2@G48ed) (set! G4a77@G48eb@&i/o-write-rcd G48eb@&i/o-write-rcd) (set! G4a76@G48e9@&i/o-write-rtd G48e9@&i/o-write-rtd) (set! G4a75@G48e7@i/o-write-error? G48e7@i/o-write-error?) (set! G4a74@G48e5@make-i/o-write-error G48e5@make-i/o-write-error) (set! G4a73@G48e3@p? G48e3@p?) (set! G4a72@G48e0@G48d8 G48e0@G48d8) (set! G4a71@G48de@G48d9 G48de@G48d9) (set! G4a70@G48dc@G48d7 G48dc@G48d7) (set! G4a6f@G48d6@&i/o-read-rcd G48d6@&i/o-read-rcd) (set! G4a6e@G48d4@&i/o-read-rtd G48d4@&i/o-read-rtd) (set! G4a6d@G48d2@i/o-read-error? G48d2@i/o-read-error?) (set! G4a6c@G48d0@make-i/o-read-error G48d0@make-i/o-read-error) (set! G4a6b@G48ce@p? G48ce@p?) (set! G4a6a@G48cb@G48c3 G48cb@G48c3) (set! G4a69@G48c9@G48c4 G48c9@G48c4) (set! G4a68@G48c7@G48c2 G48c7@G48c2) (set! G4a67@G48c1@&i/o-rcd G48c1@&i/o-rcd) (set! G4a66@G48bf@&i/o-rtd G48bf@&i/o-rtd) (set! G4a65@G48bd@i/o-error? G48bd@i/o-error?) (set! G4a64@G48bb@make-i/o-error G48bb@make-i/o-error) (set! G4a63@G48b9@p? G48b9@p?) (set! G4a62@G48b6@G48ae G48b6@G48ae) (set! G4a61@G48b4@G48af G48b4@G48af) (set! G4a60@G48b2@G48ad G48b2@G48ad) (set! G4a5f@G48ac@&undefined-rcd G48ac@&undefined-rcd) (set! G4a5e@G48aa@&undefined-rtd G48aa@&undefined-rtd) (set! G4a5d@G48a8@undefined-violation? G48a8@undefined-violation?) (set! G4a5c@G48a6@make-undefined-violation G48a6@make-undefined-violation) (set! G4a5b@G48a4@p? G48a4@p?) (set! G4a5a@G48a1@G4899 G48a1@G4899) (set! G4a59@G489f@G489a G489f@G489a) (set! G4a58@G489d@G4898 G489d@G4898) (set! G4a57@G4897@&syntax-rcd G4897@&syntax-rcd) (set! G4a56@G4895@&syntax-rtd G4895@&syntax-rtd) (set! G4a55@G4893@syntax-violation-subform G4893@syntax-violation-subform) (set! G4a54@G4891@syntax-violation-form G4891@syntax-violation-form) (set! G4a53@G488f@syntax-violation? G488f@syntax-violation?) (set! G4a52@G488d@G487a G488d@G487a) (set! G4a51@G488b@G4879 G488b@G4879) (set! G4a50@G4889@make-syntax-violation G4889@make-syntax-violation) (set! G4a4f@G4887@p? G4887@p?) (set! G4a4e@G4884@G487c G4884@G487c) (set! G4a4d@G4882@G487d G4882@G487d) (set! G4a4c@G4880@G487b G4880@G487b) (set! G4a4b@G4878@&lexical-rcd G4878@&lexical-rcd) (set! G4a4a@G4876@&lexical-rtd G4876@&lexical-rtd) (set! G4a49@G4874@lexical-violation? G4874@lexical-violation?) (set! G4a48@G4872@make-lexical-violation G4872@make-lexical-violation) (set! G4a47@G4870@p? G4870@p?) (set! G4a46@G486d@G4865 G486d@G4865) (set! G4a45@G486b@G4866 G486b@G4866) (set! G4a44@G4869@G4864 G4869@G4864) (set! G4a43@G4863@&implementation-restriction-rcd G4863@&implementation-restriction-rcd) (set! G4a42@G4861@&implementation-restriction-rtd G4861@&implementation-restriction-rtd) (set! G4a41@G485f@implementation-restriction-violation? G485f@implementation-restriction-violation?) (set! G4a40@G485d@make-implementation-restriction-violation G485d@make-implementation-restriction-violation) (set! G4a3f@G485b@p? G485b@p?) (set! G4a3e@G4858@G4850 G4858@G4850) (set! G4a3d@G4856@G4851 G4856@G4851) (set! G4a3c@G4854@G484f G4854@G484f) (set! G4a3b@G484e@&non-continuable-rcd G484e@&non-continuable-rcd) (set! G4a3a@G484c@&non-continuable-rtd G484c@&non-continuable-rtd) (set! G4a39@G484a@non-continuable-violation? G484a@non-continuable-violation?) (set! G4a38@G4848@make-non-continuable-violation G4848@make-non-continuable-violation) (set! G4a37@G4846@p? G4846@p?) (set! G4a36@G4843@G483b G4843@G483b) (set! G4a35@G4841@G483c G4841@G483c) (set! G4a34@G483f@G483a G483f@G483a) (set! G4a33@G4839@&who-rcd G4839@&who-rcd) (set! G4a32@G4837@&who-rtd G4837@&who-rtd) (set! G4a31@G4835@condition-who G4835@condition-who) (set! G4a30@G4833@who-condition? G4833@who-condition?) (set! G4a2f@G4831@G4820 G4831@G4820) (set! G4a2e@G482f@make-who-condition G482f@make-who-condition) (set! G4a2d@G482d@p? G482d@p?) (set! G4a2c@G482a@G4822 G482a@G4822) (set! G4a2b@G4828@G4823 G4828@G4823) (set! G4a2a@G4826@G4821 G4826@G4821) (set! G4a29@G481f@&irritants-rcd G481f@&irritants-rcd) (set! G4a28@G481d@&irritants-rtd G481d@&irritants-rtd) (set! G4a27@G481b@condition-irritants G481b@condition-irritants) (set! G4a26@G4819@irritants-condition? G4819@irritants-condition?) (set! G4a25@G4817@G4806 G4817@G4806) (set! G4a24@G4815@make-irritants-condition G4815@make-irritants-condition) (set! G4a23@G4813@p? G4813@p?) (set! G4a22@G4810@G4808 G4810@G4808) (set! G4a21@G480e@G4809 G480e@G4809) (set! G4a20@G480c@G4807 G480c@G4807) (set! G4a1f@G4805@&assertion-rcd G4805@&assertion-rcd) (set! G4a1e@G4803@&assertion-rtd G4803@&assertion-rtd) (set! G4a1d@G4801@assertion-violation? G4801@assertion-violation?) (set! G4a1c@G47ff@make-assertion-violation G47ff@make-assertion-violation) (set! G4a1b@G47fd@p? G47fd@p?) (set! G4a1a@G47fa@G47f2 G47fa@G47f2) (set! G4a19@G47f8@G47f3 G47f8@G47f3) (set! G4a18@G47f6@G47f1 G47f6@G47f1) (set! G4a17@G47f0@&violation-rcd G47f0@&violation-rcd) (set! G4a16@G47ee@&violation-rtd G47ee@&violation-rtd) (set! G4a15@G47ec@violation? G47ec@violation?) (set! G4a14@G47ea@make-violation G47ea@make-violation) (set! G4a13@G47e8@p? G47e8@p?) (set! G4a12@G47e5@G47dd G47e5@G47dd) (set! G4a11@G47e3@G47de G47e3@G47de) (set! G4a10@G47e1@G47dc G47e1@G47dc) (set! G4a0f@G47db@&error-rcd G47db@&error-rcd) (set! G4a0e@G47d9@&error-rtd G47d9@&error-rtd) (set! G4a0d@G47d7@error? G47d7@error?) (set! G4a0c@G47d5@make-error G47d5@make-error) (set! G4a0b@G47d3@p? G47d3@p?) (set! G4a0a@G47d0@G47c8 G47d0@G47c8) (set! G4a09@G47ce@G47c9 G47ce@G47c9) (set! G4a08@G47cc@G47c7 G47cc@G47c7) (set! G4a07@G47c6@&serious-rcd G47c6@&serious-rcd) (set! G4a06@G47c4@&serious-rtd G47c4@&serious-rtd) (set! G4a05@G47c2@serious-condition? G47c2@serious-condition?) (set! G4a04@G47c0@make-serious-condition G47c0@make-serious-condition) (set! G4a03@G47be@p? G47be@p?) (set! G4a02@G47bb@G47b3 G47bb@G47b3) (set! G4a01@G47b9@G47b4 G47b9@G47b4) (set! G4a00@G47b7@G47b2 G47b7@G47b2) (set! G49ff@G47b1@&warning-rcd G47b1@&warning-rcd) (set! G49fe@G47af@&warning-rtd G47af@&warning-rtd) (set! G49fd@G47ad@warning? G47ad@warning?) (set! G49fc@G47ab@make-warning G47ab@make-warning) (set! G49fb@G47a9@p? G47a9@p?) (set! G49fa@G47a6@G479e G47a6@G479e) (set! G49f9@G47a4@G479f G47a4@G479f) (set! G49f8@G47a2@G479d G47a2@G479d) (set! G49f7@G479c@&message-rcd G479c@&message-rcd) (set! G49f6@G479a@&message-rtd G479a@&message-rtd) (set! G49f5@G4798@condition-message G4798@condition-message) (set! G49f4@G4796@message-condition? G4796@message-condition?) (set! G49f3@G4794@G4783 G4794@G4783) (set! G49f2@G4792@make-message-condition G4792@make-message-condition) (set! G49f1@G4790@p? G4790@p?) (set! G49f0@G478d@G4785 G478d@G4785) (set! G49ef@G478b@G4786 G478b@G4786) (set! G49ee@G4789@G4784 G4789@G4784) (set! G49ed@G4741@&condition-rcd G4741@&condition-rcd) (set! G49ec@G473f@&condition-rtd G473f@&condition-rtd) (set! G49eb@G473d@make-&condition G473d@make-&condition) (set! G49ea@G473b@&condition? G473b@&condition?) (set! G49e9@G4738@G4730 G4738@G4730) (set! G49e8@G4736@G4731 G4736@G4731) (set! G49e7@G4734@G472f G4734@G472f)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2765@G271a@current-primitive-locations (lambda (G4eb8@x) ((lambda (G4eba@t) (if G4eba@t (cdr G4eba@t) '#f)) (assq G4eb8@x '((&no-nans-rcd . G4ad7@G49e6@&no-nans-rcd) (&no-nans-rtd . G4ad6@G49e4@&no-nans-rtd) (&no-infinities-rcd . G4acf@G49d1@&no-infinities-rcd) (&no-infinities-rtd . G4ace@G49cf@&no-infinities-rtd) (&i/o-encoding-rcd . G4ac7@G49bc@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4ac6@G49ba@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4abd@G49a2@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4abc@G49a0@&i/o-decoding-rtd) (&i/o-port-rcd . G4ab5@G498d@&i/o-port-rcd) (&i/o-port-rtd . G4ab4@G498b@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4aab@G4973@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4aaa@G4971@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4aa3@G495e@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4aa2@G495c@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4a9b@G4949@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4a9a@G4947@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4a93@G4934@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4a92@G4932@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4a8b@G491f@&i/o-filename-rcd) (&i/o-filename-rtd . G4a8a@G491d@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4a81@G4905@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4a80@G4903@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4a77@G48eb@&i/o-write-rcd) (&i/o-write-rtd . G4a76@G48e9@&i/o-write-rtd) (&i/o-read-rcd . G4a6f@G48d6@&i/o-read-rcd) (&i/o-read-rtd . G4a6e@G48d4@&i/o-read-rtd) (&i/o-rcd . G4a67@G48c1@&i/o-rcd) (&i/o-rtd . G4a66@G48bf@&i/o-rtd) (&undefined-rcd . G4a5f@G48ac@&undefined-rcd) (&undefined-rtd . G4a5e@G48aa@&undefined-rtd) (&syntax-rcd . G4a57@G4897@&syntax-rcd) (&syntax-rtd . G4a56@G4895@&syntax-rtd) (&lexical-rcd . G4a4b@G4878@&lexical-rcd) (&lexical-rtd . G4a4a@G4876@&lexical-rtd) (&implementation-restriction-rcd . G4a43@G4863@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4a42@G4861@&implementation-restriction-rtd) (&non-continuable-rcd . G4a3b@G484e@&non-continuable-rcd) (&non-continuable-rtd . G4a3a@G484c@&non-continuable-rtd) (&who-rcd . G4a33@G4839@&who-rcd) (&who-rtd . G4a32@G4837@&who-rtd) (&irritants-rcd . G4a29@G481f@&irritants-rcd) (&irritants-rtd . G4a28@G481d@&irritants-rtd) (&assertion-rcd . G4a1f@G4805@&assertion-rcd) (&assertion-rtd . G4a1e@G4803@&assertion-rtd) (&violation-rcd . G4a17@G47f0@&violation-rcd) (&violation-rtd . G4a16@G47ee@&violation-rtd) (&error-rcd . G4a0f@G47db@&error-rcd) (&error-rtd . G4a0e@G47d9@&error-rtd) (&serious-rcd . G4a07@G47c6@&serious-rcd) (&serious-rtd . G4a06@G47c4@&serious-rtd) (&warning-rcd . G49ff@G47b1@&warning-rcd) (&warning-rtd . G49fe@G47af@&warning-rtd) (&message-rcd . G49f7@G479c@&message-rcd) (&message-rtd . G49f6@G479a@&message-rtd) (&condition-rcd . G49ed@G4741@&condition-rcd) (&condition-rtd . G49ec@G473f@&condition-rtd) (syntax-error . G4721@G2e38@syntax-error) (syntax-dispatch . G46b5@G2d51@syntax-dispatch) (load . G4ba9@G4aed@load) (interaction-environment . G4729@G2e48@interaction-environment) (library-path . G2976@G280b@library-path) (make-parameter . G2714@G2642@make-parameter) (make-variable-transformer . G4673@G2b98@make-variable-transformer) (identifier? . G4724@G2e3e@identifier?) (generate-temporaries . G471a@G2e2a@generate-temporaries) (free-identifier=? . G471b@G2e2c@free-identifier=?) (syntax->datum . G4726@G2e42@syntax->datum) (datum->syntax . G4725@G2e40@datum->syntax) (bound-identifier=? . G471c@G2e2e@bound-identifier=?) (make-i/o-write-error . G4a74@G48e5@make-i/o-write-error) (make-i/o-read-error . G4a6c@G48d0@make-i/o-read-error) (make-i/o-port-error . G4ab0@G4983@make-i/o-port-error) (make-i/o-invalid-position-error . G4a7c@G48fb@make-i/o-invalid-position-error) (make-i/o-filename-error . G4a86@G4915@make-i/o-filename-error) (make-i/o-file-protection-error . G4a90@G492e@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4a98@G4943@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4aa8@G496d@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4aa0@G4958@make-i/o-file-already-exists-error) (make-i/o-error . G4a64@G48bb@make-i/o-error) (make-i/o-encoding-error . G4ac2@G49b2@make-i/o-encoding-error) (make-i/o-decoding-error . G4aba@G499c@make-i/o-decoding-error) (i/o-write-error? . G4a75@G48e7@i/o-write-error?) (i/o-read-error? . G4a6d@G48d2@i/o-read-error?) (i/o-port-error? . G4ab2@G4987@i/o-port-error?) (i/o-invalid-position-error? . G4a7e@G48ff@i/o-invalid-position-error?) (i/o-filename-error? . G4a88@G4919@i/o-filename-error?) (i/o-file-protection-error? . G4a91@G4930@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4a99@G4945@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4aa9@G496f@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4aa1@G495a@i/o-file-already-exists-error?) (i/o-error? . G4a65@G48bd@i/o-error?) (i/o-error-position . G4a7f@G4901@i/o-error-position) (i/o-error-port . G4ab3@G4989@i/o-error-port) (i/o-error-filename . G4a89@G491b@i/o-error-filename) (i/o-encoding-error? . G4ac4@G49b6@i/o-encoding-error?) (i/o-encoding-error-char . G4ac5@G49b8@i/o-encoding-error-char) (i/o-decoding-error? . G4abb@G499e@i/o-decoding-error?) (scheme-report-environment . G4711@G2e18@scheme-report-environment) (null-environment . G4710@G2e16@null-environment) (command-line . G4ba6@G4ae7@command-line) (eval . G4713@G2e1c@eval) (environment . G470f@G2e14@environment) (who-condition? . G4a30@G4833@who-condition?) (warning? . G49fd@G47ad@warning?) (violation? . G4a15@G47ec@violation?) (undefined-violation? . G4a5d@G48a8@undefined-violation?) (syntax-violation? . G4a53@G488f@syntax-violation?) (syntax-violation-subform . G4a55@G4893@syntax-violation-subform) (syntax-violation-form . G4a54@G4891@syntax-violation-form) (syntax-violation . G4723@G2e3c@syntax-violation) (serious-condition? . G4a05@G47c2@serious-condition?) (non-continuable-violation? . G4a39@G484a@non-continuable-violation?) (message-condition? . G49f4@G4796@message-condition?) (make-who-condition . G4a2e@G482f@make-who-condition) (make-warning . G49fc@G47ab@make-warning) (make-violation . G4a14@G47ea@make-violation) (make-undefined-violation . G4a5c@G48a6@make-undefined-violation) (make-syntax-violation . G4a50@G4889@make-syntax-violation) (make-serious-condition . G4a04@G47c0@make-serious-condition) (make-non-continuable-violation . G4a38@G4848@make-non-continuable-violation) (make-message-condition . G49f2@G4792@make-message-condition) (make-lexical-violation . G4a48@G4872@make-lexical-violation) (make-irritants-condition . G4a24@G4815@make-irritants-condition) (make-implementation-restriction-violation . G4a40@G485d@make-implementation-restriction-violation) (make-error . G4a0c@G47d5@make-error) (make-assertion-violation . G4a1c@G47ff@make-assertion-violation) (lexical-violation? . G4a49@G4874@lexical-violation?) (irritants-condition? . G4a26@G4819@irritants-condition?) (implementation-restriction-violation? . G4a41@G485f@implementation-restriction-violation?) (error? . G4a0d@G47d7@error?) (condition-who . G4a31@G4835@condition-who) (condition-message . G49f5@G4798@condition-message) (condition-irritants . G4a27@G481b@condition-irritants) (assertion-violation? . G4a1d@G4801@assertion-violation?) (no-nans-violation? . G4ad5@G49e2@no-nans-violation?) (no-infinities-violation? . G4acd@G49cd@no-infinities-violation?) (make-no-nans-violation . G4ad4@G49e0@make-no-nans-violation) (make-no-infinities-violation . G4acc@G49cb@make-no-infinities-violation)))))) (G2986@G282b@install-library 'G4e94 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G4e68) (format . G4e63) (string-split . G4e58) (call-process . G4e52) (set-current-directory! . G4e4e) (expand-path . G4e4d) (current-directory . G4e4c) (%spawn . G4e4b) (%waitpid . G4e4a) (%ffi-supported? . G4e49) (%ffi-pointer-ref . G4e48) (%ffi-pointer->string . G4e47) (%ffi-call->string-or-zero . G4e46) (%ffi-call->double . G4e45) (%ffi-call->void* . G4e44) (%ffi-call->void . G4e43) (%ffi-call->int . G4e42) (%ffi-lookup . G4e41) (%ffi-open . G4e40) (%fork . G4e3f) (%pipe . G4e3e) (p . G4e3d) (string-upcase . G4e2f) (string-titlecase . G4e2e) (string-normalize-nfkd . G4e2d) (string-normalize-nfkc . G4e2c) (string-normalize-nfd . G4e2b) (string-normalize-nfc . G4e2a) (string-foldcase . G4e29) (string-downcase . G4e28) (string-ci>? . G4e27) (string-ci>=? . G4e26) (string-ci=? . G4e25) (string-ci<? . G4e24) (string-ci<=? . G4e23) (char-whitespace? . G4e22) (char-upper-case? . G4e21) (char-title-case? . G4e20) (char-numeric? . G4e1f) (char-lower-case? . G4e1e) (char-general-category . G4e1d) (char-upcase . G4e1c) (char-titlecase . G4e1b) (char-foldcase . G4e1a) (char-downcase . G4e19) (char-ci>? . G4e18) (char-ci>=? . G4e17) (char-ci=? . G4e16) (char-ci<? . G4e15) (char-ci<=? . G4e14) (char-alphabetic? . G4e13) (make-variable-transformer . G2b97) (identifier? . G2e3d) (generate-temporaries . G2e29) (free-identifier=? . G2e2b) (syntax->datum . G2e41) (datum->syntax . G2e3f) (bound-identifier=? . G2e2d) (record-type-descriptor? . G4e12) (record-predicate . G4e11) (record-mutator . G4e10) (record-constructor . G4e0f) (record-accessor . G4e0e) (make-record-type-descriptor . G4e0d) (make-record-constructor-descriptor . G4e0c) (record? . G4e0b) (record-type-uid . G4e0a) (record-type-sealed? . G4e09) (record-type-parent . G4e08) (record-type-opaque? . G4e07) (record-type-name . G4e06) (record-type-generative? . G4e05) (record-type-field-names . G4e04) (record-rtd . G4e03) (record-field-mutable? . G4e02) (delete-file . G4e01) (file-exists? . G4e00) (vector-sort! . G4dff) (vector-sort . G4dfe) (list-sort . G4dfd) (symbol-hash . G4dfc) (string-ci-hash . G4dfb) (string-hash . G4dfa) (equal-hash . G4df9) (hashtable-equivalence-function . G4df8) (make-hashtable . G4df7) (hashtable-hash-function . G4df6) (make-eqv-hashtable . G4df5) (make-eq-hashtable . G4df4) (hashtable? . G4df3) (hashtable-update! . G4df2) (hashtable-size . G4df1) (hashtable-set! . G4df0) (hashtable-ref . G4def) (hashtable-mutable? . G4dee) (hashtable-keys . G4ded) (hashtable-entries . G4dec) (hashtable-delete! . G4deb) (hashtable-copy . G4dea) (hashtable-contains? . G4de9) (hashtable-clear! . G4de8) (call-with-output-file . G4de7) (call-with-input-file . G4de6) (write-char . G4de5) (write . G4de4) (with-output-to-file . G4de3) (with-input-from-file . G4de2) (read-char . G4de1) (read . G4de0) (peek-char . G4ddf) (open-output-file . G4dde) (open-input-file . G4ddd) (newline . G4ddc) (display . G4ddb) (close-output-port . G4dda) (close-input-port . G4dd9) (eof-object? . G4dd8) (eof-object . G4dd7) (current-error-port . G4dd6) (current-output-port . G4dd5) (current-input-port . G4dd4) (output-port? . G4dd3) (input-port? . G4dd2) (utf-8-codec . G4dd1) (utf-16-codec . G4dd0) (transcoder-error-handling-mode . G4dcf) (transcoder-eol-style . G4dce) (transcoder-codec . G4dcd) (transcoded-port . G4dcc) (textual-port? . G4dcb) (string->bytevector . G4dca) (standard-output-port . G4dc9) (standard-input-port . G4dc8) (standard-error-port . G4dc7) (set-port-position! . G4dc6) (put-u8 . G4dc5) (put-string . G4dc4) (put-datum . G4dc3) (put-char . G4dc2) (put-bytevector . G4dc1) (port? . G4dc0) (port-transcoder . G4dbf) (port-position . G4dbe) (port-has-set-port-position!? . G4dbd) (port-has-port-position? . G4dbc) (port-eof? . G4dbb) (output-port-buffer-mode . G4dba) (open-string-output-port . G4db9) (open-string-input-port . G4db8) (open-file-output-port . G4db7) (open-file-input/output-port . G4db6) (open-file-input-port . G4db5) (open-bytevector-output-port . G4db4) (open-bytevector-input-port . G4db3) (native-transcoder . G4db2) (native-eol-style . G4db1) (make-transcoder . G4db0) (latin-1-codec . G4daf) (make-i/o-write-error . G48e4) (make-i/o-read-error . G48cf) (make-i/o-port-error . G4982) (make-i/o-invalid-position-error . G48fa) (make-i/o-filename-error . G4914) (make-i/o-file-protection-error . G492d) (make-i/o-file-is-read-only-error . G4942) (make-i/o-file-does-not-exist-error . G496c) (make-i/o-file-already-exists-error . G4957) (make-i/o-error . G48ba) (make-i/o-encoding-error . G49b1) (make-i/o-decoding-error . G499b) (make-custom-textual-output-port . G4dae) (make-custom-textual-input/output-port . G4dad) (make-custom-textual-input-port . G4dac) (make-custom-binary-output-port . G4dab) (make-custom-binary-input/output-port . G4daa) (make-custom-binary-input-port . G4da9) (make-bytevector . G4da8) (lookahead-u8 . G4da7) (lookahead-char . G4da6) (i/o-write-error? . G48e6) (i/o-read-error? . G48d1) (i/o-port-error? . G4986) (i/o-invalid-position-error? . G48fe) (i/o-filename-error? . G4918) (i/o-file-protection-error? . G492f) (i/o-file-is-read-only-error? . G4944) (i/o-file-does-not-exist-error? . G496e) (i/o-file-already-exists-error? . G4959) (i/o-error? . G48bc) (i/o-error-position . G4900) (i/o-error-port . G4988) (i/o-error-filename . G491a) (i/o-encoding-error? . G49b5) (i/o-encoding-error-char . G49b7) (i/o-decoding-error? . G499d) (get-u8 . G4da5) (get-string-n! . G4da4) (get-string-n . G4da3) (get-string-all . G4da2) (get-line . G4da1) (get-datum . G4da0) (get-char . G4d9f) (get-bytevector-some . G4d9e) (get-bytevector-n! . G4d9d) (get-bytevector-n . G4d9c) (get-bytevector-all . G4d9b) (flush-output-port . G4d9a) (close-port . G4d99) (exit . G4d91) (command-line . G4ae6) (string-fill! . G4d90) (string-set! . G4d8f) (set-cdr! . G4d8e) (set-car! . G4d8d) (remove . G4d8c) (remv . G4d8b) (remp . G4d8a) (remq . G4d89) (partition . G4d88) (memv . G4d87) (memq . G4d86) (memp . G4d85) (member . G4d84) (exists . G4d83) (for-all . G4d82) (fold-right . G4d81) (fold-left . G4d80) (find . G4d7f) (filter . G4d7e) (cons* . G4d7d) (assv . G4d7c) (assq . G4d7b) (assp . G4d7a) (assoc . G4d79) (call-with-string-output-port . G4d78) (call-with-port . G4d77) (call-with-bytevector-output-port . G4d76) (bytevector->string . G4d75) (buffer-mode? . G4d74) (binary-port? . G4d73) (with-exception-handler . G4d72) (raise-continuable . G4d71) (raise . G4d70) (eval . G2e1b) (environment . G2e13) (make-enumeration . G4d6f) (enum-set=? . G4d6e) (enum-set-universe . G4d6d) (enum-set-union . G4d6c) (enum-set-subset? . G4d6b) (enum-set-projection . G4d6a) (enum-set-member? . G4d69) (enum-set-intersection . G4d68) (enum-set-indexer . G4d67) (enum-set-difference . G4d66) (enum-set-constructor . G4d65) (enum-set-complement . G4d64) (enum-set->list . G4d63) (who-condition? . G4832) (warning? . G47ac) (violation? . G47eb) (undefined-violation? . G48a7) (syntax-violation? . G488e) (syntax-violation-subform . G4892) (syntax-violation-form . G4890) (syntax-violation . G2e3b) (simple-conditions . G4d62) (serious-condition? . G47c1) (non-continuable-violation? . G4849) (message-condition? . G4795) (make-who-condition . G482e) (make-warning . G47aa) (make-violation . G47e9) (make-undefined-violation . G48a5) (make-syntax-violation . G4888) (make-serious-condition . G47bf) (make-non-continuable-violation . G4847) (make-message-condition . G4791) (make-lexical-violation . G4871) (make-irritants-condition . G4814) (make-implementation-restriction-violation . G485c) (make-error . G47d4) (make-assertion-violation . G47fe) (lexical-violation? . G4873) (irritants-condition? . G4818) (implementation-restriction-violation? . G485e) (error? . G47d6) (condition-who . G4834) (condition-predicate . G4d61) (condition-message . G4797) (condition-irritants . G481a) (condition-accessor . G4d60) (condition . G4d5f) (assertion-violation? . G4800) (condition? . G4d5e) (utf32->string . G4d5d) (utf16->string . G4d5c) (utf8->string . G4d5b) (uint-list->bytevector . G4d5a) (u8-list->bytevector . G4d59) (string->utf8 . G4d58) (string->utf32 . G4d57) (string->utf16 . G4d56) (sint-list->bytevector . G4d55) (native-endianness . G4d54) (bytevector? . G4d53) (bytevector=? . G4d52) (bytevector-uint-set! . G4d51) (bytevector-uint-ref . G4d50) (bytevector-u8-set! . G4d4f) (bytevector-u8-ref . G4d4e) (bytevector-u64-set! . G4d4d) (bytevector-u64-ref . G4d4c) (bytevector-u64-native-set! . G4d4b) (bytevector-u64-native-ref . G4d4a) (bytevector-u32-set! . G4d49) (bytevector-u32-ref . G4d48) (bytevector-u32-native-set! . G4d47) (bytevector-u32-native-ref . G4d46) (bytevector-u16-set! . G4d45) (bytevector-u16-ref . G4d44) (bytevector-u16-native-set! . G4d43) (bytevector-u16-native-ref . G4d42) (bytevector-sint-set! . G4d41) (bytevector-sint-ref . G4d40) (bytevector-s8-set! . G4d3f) (bytevector-s8-ref . G4d3e) (bytevector-s64-set! . G4d3d) (bytevector-s64-ref . G4d3c) (bytevector-s64-native-set! . G4d3b) (bytevector-s64-native-ref . G4d3a) (bytevector-s32-set! . G4d39) (bytevector-s32-ref . G4d38) (bytevector-s32-native-set! . G4d37) (bytevector-s32-native-ref . G4d36) (bytevector-s16-set! . G4d35) (bytevector-s16-ref . G4d34) (bytevector-s16-native-set! . G4d33) (bytevector-s16-native-ref . G4d32) (bytevector-length . G4d31) (bytevector-ieee-single-ref . G4d30) (bytevector-ieee-single-set! . G4d2f) (bytevector-ieee-single-native-set! . G4d2e) (bytevector-ieee-single-native-ref . G4d2d) (bytevector-ieee-double-set! . G4d2c) (bytevector-ieee-double-ref . G4d2b) (bytevector-ieee-double-native-set! . G4d2a) (bytevector-ieee-double-native-ref . G4d29) (bytevector-fill! . G4d28) (bytevector-copy! . G4d27) (bytevector-copy . G4d26) (bytevector->uint-list . G4d25) (bytevector->u8-list . G4d24) (bytevector->sint-list . G4d23) (no-nans-violation? . G49e1) (no-infinities-violation? . G49cc) (make-no-nans-violation . G49df) (make-no-infinities-violation . G49ca) (real->flonum . G4d22) (flzero? . G4d21) (fltruncate . G4d20) (fltan . G4d1f) (flsqrt . G4d1e) (flsin . G4d1d) (flround . G4d1c) (flpositive? . G4d1b) (flonum? . G4d1a) (flodd? . G4d19) (flnumerator . G4d18) (flnegative? . G4d17) (flnan? . G4d16) (flmod0 . G4d15) (flmod . G4d14) (flmin . G4d13) (flmax . G4d12) (fllog . G4d11) (flinteger? . G4d10) (flinfinite? . G4d0f) (flfloor . G4d0e) (flfinite? . G4d0d) (flexpt . G4d0c) (flexp . G4d0b) (fleven? . G4d0a) (fldiv0-and-mod0 . G4d09) (fldiv0 . G4d08) (fldiv-and-mod . G4d07) (fldiv . G4d06) (fldenominator . G4d05) (flcos . G4d04) (flceiling . G4d03) (flatan . G4d02) (flasin . G4d01) (flacos . G4d00) (flabs . G4cff) (fl>? . G4cfe) (fl>=? . G4cfd) (fl=? . G4cfc) (fl<? . G4cfb) (fl<=? . G4cfa) (fl/ . G4cf9) (fl- . G4cf8) (fl+ . G4cf7) (fl* . G4cf6) (fixnum->flonum . G4cf5) (fxzero? . G4cf4) (fxxor . G4cf3) (fxrotate-bit-field . G4cf2) (fxreverse-bit-field . G4cf1) (fxpositive? . G4cf0) (fxodd? . G4cef) (fxnot . G4cee) (fxnegative? . G4ced) (fxmod0 . G4cec) (fxmod . G4ceb) (fxmin . G4cea) (fxmax . G4ce9) (fxlength . G4ce8) (fxior . G4ce7) (fxif . G4ce6) (fxfirst-bit-set . G4ce5) (fxeven? . G4ce4) (fxdiv0-and-mod0 . G4ce3) (fxdiv0 . G4ce2) (fxdiv-and-mod . G4ce1) (fxdiv . G4ce0) (fxcopy-bit-field . G4cdf) (fxcopy-bit . G4cde) (fxbit-set? . G4cdd) (fxbit-field . G4cdc) (fxbit-count . G4cdb) (fxarithmetic-shift-right . G4cda) (fxarithmetic-shift-left . G4cd9) (fxarithmetic-shift . G4cd8) (fxand . G4cd7) (fx>? . G4cd6) (fx>=? . G4cd5) (fx=? . G4cd4) (fx<? . G4cd3) (fx<=? . G4cd2) (fx-/carry . G4cd1) (fx- . G4cd0) (fx+/carry . G4ccf) (fx+ . G4cce) (fx*/carry . G4ccd) (fx* . G4ccc) (greatest-fixnum . G4ccb) (least-fixnum . G4cca) (fixnum-width . G4cc9) (fixnum? . G4cc8) (bitwise-rotate-bit-field . G4cc7) (bitwise-reverse-bit-field . G4cc6) (bitwise-length . G4cc5) (bitwise-if . G4cc4) (bitwise-first-bit-set . G4cc3) (bitwise-copy-bit-field . G4cc2) (bitwise-copy-bit . G4cc1) (bitwise-bit-set? . G4cc0) (bitwise-bit-field . G4cbf) (bitwise-bit-count . G4cbe) (bitwise-xor . G4cbd) (bitwise-ior . G4cbc) (bitwise-and . G4cbb) (bitwise-not . G4cba) (bitwise-arithmetic-shift-right . G4cb9) (bitwise-arithmetic-shift-left . G4cb8) (bitwise-arithmetic-shift . G4cb7) (zero? . G4cb6) (vector? . G4cb5) (vector-set! . G4cb4) (vector-ref . G4cb3) (vector-map . G4cb2) (vector-length . G4cb1) (vector-for-each . G4cb0) (vector-fill! . G4caf) (vector->list . G4cae) (vector . G4cad) (values . G4cac) (truncate . G4cab) (tan . G4caa) (symbol? . G4ca9) (symbol=? . G4ca8) (symbol->string . G4ca7) (substring . G4ca6) (string? . G4ca5) (string>? . G4ca4) (string>=? . G4ca3) (string=? . G4ca2) (string<? . G4ca1) (string<=? . G4ca0) (string-ref . G4c9f) (string-length . G4c9e) (string-for-each . G4c9d) (string-copy . G4c9c) (string-append . G4c9b) (string->symbol . G4c9a) (string->number . G4c99) (string->list . G4c98) (string . G4c97) (sqrt . G4c96) (sin . G4c95) (round . G4c94) (reverse . G4c93) (real? . G4c92) (real-valued? . G4c91) (real-part . G4c90) (rationalize . G4c8f) (rational? . G4c8e) (rational-valued? . G4c8d) (procedure? . G4c8c) (positive? . G4c8b) (pair? . G4c8a) (odd? . G4c89) (numerator . G4c88) (number? . G4c87) (number->string . G4c86) (null? . G4c85) (not . G4c84) (negative? . G4c83) (nan? . G4c82) (min . G4c81) (max . G4c80) (map . G4c7f) (make-vector . G4c7e) (make-string . G4c7d) (make-rectangular . G4c7c) (make-polar . G4c7b) (magnitude . G4c7a) (log . G4c79) (list? . G4c78) (list-tail . G4c77) (list-ref . G4c76) (list->vector . G4c75) (list->string . G4c74) (list . G4c73) (length . G4c72) (lcm . G4c71) (integer? . G4c70) (integer-valued? . G4c6f) (integer->char . G4c6e) (infinite? . G4c6d) (inexact? . G4c6c) (inexact . G4c6b) (imag-part . G4c6a) (gcd . G4c69) (for-each . G4c68) (floor . G4c67) (finite? . G4c66) (expt . G4c65) (exp . G4c64) (exact? . G4c63) (exact-integer-sqrt . G4c62) (exact . G4c61) (even? . G4c60) (error . G4c5f) (eqv? . G4c5e) (equal? . G4c5d) (eq? . G4c5c) (dynamic-wind . G4c5b) (div0-and-mod0 . G4c5a) (mod0 . G4c59) (div0 . G4c58) (div-and-mod . G4c57) (mod . G4c56) (div . G4c55) (denominator . G4c54) (cos . G4c53) (cons . G4c52) (complex? . G4c51) (char? . G4c50) (char>? . G4c4f) (char>=? . G4c4e) (char=? . G4c4d) (char<? . G4c4c) (char<=? . G4c4b) (char->integer . G4c4a) (ceiling . G4c49) (call-with-values . G4c48) (call/cc . G4c47) (call-with-current-continuation . G4c46) (cddddr . G4c45) (cdddar . G4c44) (cddadr . G4c43) (cddaar . G4c42) (cdaddr . G4c41) (cdadar . G4c40) (cdaadr . G4c3f) (cdaaar . G4c3e) (cadddr . G4c3d) (caddar . G4c3c) (cadadr . G4c3b) (cadaar . G4c3a) (caaddr . G4c39) (caadar . G4c38) (caaadr . G4c37) (caaaar . G4c36) (cdddr . G4c35) (cddar . G4c34) (cdadr . G4c33) (cdaar . G4c32) (caddr . G4c31) (cadar . G4c30) (caadr . G4c2f) (caaar . G4c2e) (cddr . G4c2d) (cdar . G4c2c) (cadr . G4c2b) (caar . G4c2a) (cdr . G4c29) (car . G4c28) (boolean? . G4c27) (boolean=? . G4c26) (atan . G4c25) (assertion-violation . G4c24) (asin . G4c23) (apply . G4c22) (append . G4c21) (angle . G4c20) (acos . G4c1f) (abs . G4c1e) (/ . G4c1d) (* . G4c1c) (- . G4c1b) (+ . G4c1a) (>= . G4c19) (> . G4c18) (= . G4c17) (<= . G4c16) (< . G4c15) (library . G4c14) (&no-nans . G4c13) (&no-infinities . G4c12) (&i/o-encoding . G4c11) (&i/o-decoding . G4c10) (&i/o-port . G4c0f) (&i/o-file-does-not-exist . G4c0e) (&i/o-file-already-exists . G4c0d) (&i/o-file-is-read-only . G4c0c) (&i/o-file-protection . G4c0b) (&i/o-filename . G4c0a) (&i/o-invalid-position . G4c09) (&i/o-write . G4c08) (&i/o-read . G4c07) (&i/o . G4c06) (&undefined . G4c05) (&syntax . G4c04) (&lexical . G4c03) (&implementation-restriction . G4c02) (&non-continuable . G4c01) (&who . G4c00) (&irritants . G4bff) (&assertion . G4bfe) (&violation . G4bfd) (&error . G4bfc) (&serious . G4bfb) (&warning . G4bfa) (&message . G4bf9) (&condition . G4bf8) (define-condition-type . G4bf7) (define-enumeration . G4bf6) (define-record-type . G4bf5) (parent-rtd . G4bf4) (nongenerative . G4bf3) (opaque . G4bf2) (sealed . G4bf1) (protocol . G4bf0) (parent . G4bef) (immutable . G4bee) (mutable . G4bed) (fields . G4bec) (error-handling-mode . G4beb) (file-options . G4bea) (buffer-mode . G4be9) (eol-style . G4be8) (guard . G4be7) (unsyntax-splicing . G4be4) (unsyntax . G4be3) (unquote-splicing . G4be2) (unquote . G4be1) (_ . G4be0) (else . G4bdf) (=> . G4bde) (... . G4bdd) (assert . G4bdc) (endianness . G4bdb) (do . G4bd8) (cond . G4bd7) (let* . G4bd6) (let . G4bd5) (let*-values . G4bd4) (let-values . G4bd3) (identifier-syntax . G4bd2) (with-syntax . G4bd1) (quasisyntax . G4bd0) (quasiquote . G4bcf) (syntax-rules . G4bce) (include . G4bcd) (record-constructor-descriptor . G4bcb) (record-type-descriptor . G4bca) (case . G4bc9) (unless . G4bc7) (when . G4bc6) (or . G4bc5) (and . G4bc4) (if . G4bc3) (letrec* . G4bc2) (letrec . G4bc1) (case-lambda . G4bbf) (lambda . G4bbe) (syntax . G4bbd) (syntax-case . G4bbc) (quote . G4bbb) (letrec-syntax . G4bb9) (let-syntax . G4bb8) (set! . G4bb7) (import . G4bb6) (begin . G4bb5) (define-syntax . G4bb3) (define . G4bb2)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4e95 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4d92) (unquote-splicing . G4be2) (unquote . G4be1) (_ . G4be0) (else . G4bdf) (=> . G4bde) (... . G4bdd) (delay . G4bda) (do . G4bd8) (cond . G4bd7) (let* . G4bd6) (let . G4bd5) (quasiquote . G4bcf) (syntax-rules . G4bce) (case . G4bc9) (or . G4bc5) (and . G4bc4) (if . G4bc3) (letrec . G4bc1) (lambda . G4bbe) (quote . G4bbb) (letrec-syntax . G4bb9) (let-syntax . G4bb8) (set! . G4bb7) (begin . G4bb5) (define-syntax . G4bb3) (define . G4bb2)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4e96 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G4e27) (string-ci>=? . G4e26) (string-ci=? . G4e25) (string-ci<? . G4e24) (string-ci<=? . G4e23) (char-whitespace? . G4e22) (char-upper-case? . G4e21) (char-numeric? . G4e1f) (char-lower-case? . G4e1e) (char-upcase . G4e1c) (char-downcase . G4e19) (char-ci>? . G4e18) (char-ci>=? . G4e17) (char-ci=? . G4e16) (char-ci<? . G4e15) (char-ci<=? . G4e14) (char-alphabetic? . G4e13) (call-with-output-file . G4de7) (call-with-input-file . G4de6) (write-char . G4de5) (write . G4de4) (with-output-to-file . G4de3) (with-input-from-file . G4de2) (read-char . G4de1) (read . G4de0) (peek-char . G4ddf) (open-output-file . G4dde) (open-input-file . G4ddd) (newline . G4ddc) (display . G4ddb) (close-output-port . G4dda) (close-input-port . G4dd9) (eof-object . G4dd7) (current-output-port . G4dd5) (current-input-port . G4dd4) (output-port? . G4dd3) (input-port? . G4dd2) (scheme-report-environment . G2e17) (quotient . G4d98) (null-environment . G2e15) (remainder . G4d97) (modulo . G4d96) (inexact->exact . G4d95) (force . G4d94) (exact->inexact . G4d93) (make-promise . G4d92) (string-fill! . G4d90) (string-set! . G4d8f) (set-cdr! . G4d8e) (set-car! . G4d8d) (memv . G4d87) (memq . G4d86) (member . G4d84) (assv . G4d7c) (assq . G4d7b) (assoc . G4d79) (eval . G2e1b) (zero? . G4cb6) (vector? . G4cb5) (vector-set! . G4cb4) (vector-ref . G4cb3) (vector-length . G4cb1) (vector-fill! . G4caf) (vector->list . G4cae) (vector . G4cad) (values . G4cac) (truncate . G4cab) (tan . G4caa) (symbol? . G4ca9) (symbol->string . G4ca7) (substring . G4ca6) (string? . G4ca5) (string>? . G4ca4) (string>=? . G4ca3) (string=? . G4ca2) (string<? . G4ca1) (string<=? . G4ca0) (string-ref . G4c9f) (string-length . G4c9e) (string-copy . G4c9c) (string-append . G4c9b) (string->symbol . G4c9a) (string->number . G4c99) (string->list . G4c98) (string . G4c97) (sqrt . G4c96) (sin . G4c95) (round . G4c94) (reverse . G4c93) (real? . G4c92) (real-part . G4c90) (rationalize . G4c8f) (rational? . G4c8e) (procedure? . G4c8c) (positive? . G4c8b) (pair? . G4c8a) (odd? . G4c89) (numerator . G4c88) (number? . G4c87) (number->string . G4c86) (not . G4c84) (negative? . G4c83) (min . G4c81) (max . G4c80) (map . G4c7f) (make-vector . G4c7e) (make-string . G4c7d) (make-rectangular . G4c7c) (make-polar . G4c7b) (magnitude . G4c7a) (log . G4c79) (list? . G4c78) (list-tail . G4c77) (list-ref . G4c76) (list->vector . G4c75) (list->string . G4c74) (list . G4c73) (length . G4c72) (lcm . G4c71) (integer? . G4c70) (integer->char . G4c6e) (inexact? . G4c6c) (imag-part . G4c6a) (gcd . G4c69) (for-each . G4c68) (floor . G4c67) (expt . G4c65) (exp . G4c64) (exact? . G4c63) (even? . G4c60) (eqv? . G4c5e) (equal? . G4c5d) (eq? . G4c5c) (dynamic-wind . G4c5b) (denominator . G4c54) (cos . G4c53) (cons . G4c52) (complex? . G4c51) (char? . G4c50) (char>? . G4c4f) (char>=? . G4c4e) (char=? . G4c4d) (char<? . G4c4c) (char<=? . G4c4b) (char->integer . G4c4a) (ceiling . G4c49) (call-with-values . G4c48) (call-with-current-continuation . G4c46) (cddddr . G4c45) (cdddar . G4c44) (cddadr . G4c43) (cddaar . G4c42) (cdaddr . G4c41) (cdadar . G4c40) (cdaadr . G4c3f) (cdaaar . G4c3e) (cadddr . G4c3d) (caddar . G4c3c) (cadadr . G4c3b) (cadaar . G4c3a) (caaddr . G4c39) (caadar . G4c38) (caaadr . G4c37) (caaaar . G4c36) (cdddr . G4c35) (cddar . G4c34) (cdadr . G4c33) (cdaar . G4c32) (caddr . G4c31) (cadar . G4c30) (caadr . G4c2f) (caaar . G4c2e) (cddr . G4c2d) (cdar . G4c2c) (cadr . G4c2b) (caar . G4c2a) (cdr . G4c29) (car . G4c28) (boolean? . G4c27) (atan . G4c25) (asin . G4c23) (apply . G4c22) (append . G4c21) (angle . G4c20) (acos . G4c1f) (abs . G4c1e) (/ . G4c1d) (* . G4c1c) (- . G4c1b) (+ . G4c1a) (>= . G4c19) (> . G4c18) (= . G4c17) (<= . G4c16) (< . G4c15) (unquote-splicing . G4be2) (unquote . G4be1) (else . G4bdf) (=> . G4bde) (... . G4bdd) (delay . G4bda) (do . G4bd8) (cond . G4bd7) (let* . G4bd6) (let . G4bd5) (quasiquote . G4bcf) (syntax-rules . G4bce) (case . G4bc9) (or . G4bc5) (and . G4bc4) (if . G4bc3) (letrec . G4bc1) (lambda . G4bbe) (quote . G4bbb) (letrec-syntax . G4bb9) (let-syntax . G4bb8) (set! . G4bb7) (begin . G4bb5) (define-syntax . G4bb3) (define . G4bb2)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4e97 '(psyntax modules) '() '() '() '() '((module . G4bb4)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4e98 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4e99 '(rnrs) '(6) '() '() '() '((regexp? . G4e8c) (string-upcase . G4e2f) (string-titlecase . G4e2e) (string-normalize-nfkd . G4e2d) (string-normalize-nfkc . G4e2c) (string-normalize-nfd . G4e2b) (string-normalize-nfc . G4e2a) (string-foldcase . G4e29) (string-downcase . G4e28) (string-ci>? . G4e27) (string-ci>=? . G4e26) (string-ci=? . G4e25) (string-ci<? . G4e24) (string-ci<=? . G4e23) (char-whitespace? . G4e22) (char-upper-case? . G4e21) (char-title-case? . G4e20) (char-numeric? . G4e1f) (char-lower-case? . G4e1e) (char-general-category . G4e1d) (char-upcase . G4e1c) (char-titlecase . G4e1b) (char-foldcase . G4e1a) (char-downcase . G4e19) (char-ci>? . G4e18) (char-ci>=? . G4e17) (char-ci=? . G4e16) (char-ci<? . G4e15) (char-ci<=? . G4e14) (char-alphabetic? . G4e13) (make-variable-transformer . G2b97) (identifier? . G2e3d) (generate-temporaries . G2e29) (free-identifier=? . G2e2b) (syntax->datum . G2e41) (datum->syntax . G2e3f) (bound-identifier=? . G2e2d) (record-type-descriptor? . G4e12) (record-predicate . G4e11) (record-mutator . G4e10) (record-constructor . G4e0f) (record-accessor . G4e0e) (make-record-type-descriptor . G4e0d) (make-record-constructor-descriptor . G4e0c) (record? . G4e0b) (record-type-uid . G4e0a) (record-type-sealed? . G4e09) (record-type-parent . G4e08) (record-type-opaque? . G4e07) (record-type-name . G4e06) (record-type-generative? . G4e05) (record-type-field-names . G4e04) (record-rtd . G4e03) (record-field-mutable? . G4e02) (delete-file . G4e01) (file-exists? . G4e00) (vector-sort! . G4dff) (vector-sort . G4dfe) (list-sort . G4dfd) (symbol-hash . G4dfc) (string-ci-hash . G4dfb) (string-hash . G4dfa) (equal-hash . G4df9) (hashtable-equivalence-function . G4df8) (make-hashtable . G4df7) (hashtable-hash-function . G4df6) (make-eqv-hashtable . G4df5) (make-eq-hashtable . G4df4) (hashtable? . G4df3) (hashtable-update! . G4df2) (hashtable-size . G4df1) (hashtable-set! . G4df0) (hashtable-ref . G4def) (hashtable-mutable? . G4dee) (hashtable-keys . G4ded) (hashtable-entries . G4dec) (hashtable-delete! . G4deb) (hashtable-copy . G4dea) (hashtable-contains? . G4de9) (hashtable-clear! . G4de8) (call-with-output-file . G4de7) (call-with-input-file . G4de6) (write-char . G4de5) (write . G4de4) (with-output-to-file . G4de3) (with-input-from-file . G4de2) (read-char . G4de1) (read . G4de0) (peek-char . G4ddf) (open-output-file . G4dde) (open-input-file . G4ddd) (newline . G4ddc) (display . G4ddb) (close-output-port . G4dda) (close-input-port . G4dd9) (eof-object? . G4dd8) (eof-object . G4dd7) (current-error-port . G4dd6) (current-output-port . G4dd5) (current-input-port . G4dd4) (output-port? . G4dd3) (input-port? . G4dd2) (utf-8-codec . G4dd1) (utf-16-codec . G4dd0) (transcoder-error-handling-mode . G4dcf) (transcoder-eol-style . G4dce) (transcoder-codec . G4dcd) (transcoded-port . G4dcc) (textual-port? . G4dcb) (string->bytevector . G4dca) (standard-output-port . G4dc9) (standard-input-port . G4dc8) (standard-error-port . G4dc7) (set-port-position! . G4dc6) (put-u8 . G4dc5) (put-string . G4dc4) (put-datum . G4dc3) (put-char . G4dc2) (put-bytevector . G4dc1) (port? . G4dc0) (port-transcoder . G4dbf) (port-position . G4dbe) (port-has-set-port-position!? . G4dbd) (port-has-port-position? . G4dbc) (port-eof? . G4dbb) (output-port-buffer-mode . G4dba) (open-string-output-port . G4db9) (open-string-input-port . G4db8) (open-file-output-port . G4db7) (open-file-input/output-port . G4db6) (open-file-input-port . G4db5) (open-bytevector-output-port . G4db4) (open-bytevector-input-port . G4db3) (native-transcoder . G4db2) (native-eol-style . G4db1) (make-transcoder . G4db0) (latin-1-codec . G4daf) (make-i/o-write-error . G48e4) (make-i/o-read-error . G48cf) (make-i/o-port-error . G4982) (make-i/o-invalid-position-error . G48fa) (make-i/o-filename-error . G4914) (make-i/o-file-protection-error . G492d) (make-i/o-file-is-read-only-error . G4942) (make-i/o-file-does-not-exist-error . G496c) (make-i/o-file-already-exists-error . G4957) (make-i/o-error . G48ba) (make-i/o-encoding-error . G49b1) (make-i/o-decoding-error . G499b) (make-custom-textual-output-port . G4dae) (make-custom-textual-input/output-port . G4dad) (make-custom-textual-input-port . G4dac) (make-custom-binary-output-port . G4dab) (make-custom-binary-input/output-port . G4daa) (make-custom-binary-input-port . G4da9) (make-bytevector . G4da8) (lookahead-u8 . G4da7) (lookahead-char . G4da6) (i/o-write-error? . G48e6) (i/o-read-error? . G48d1) (i/o-port-error? . G4986) (i/o-invalid-position-error? . G48fe) (i/o-filename-error? . G4918) (i/o-file-protection-error? . G492f) (i/o-file-is-read-only-error? . G4944) (i/o-file-does-not-exist-error? . G496e) (i/o-file-already-exists-error? . G4959) (i/o-error? . G48bc) (i/o-error-position . G4900) (i/o-error-port . G4988) (i/o-error-filename . G491a) (i/o-encoding-error? . G49b5) (i/o-encoding-error-char . G49b7) (i/o-decoding-error? . G499d) (get-u8 . G4da5) (get-string-n! . G4da4) (get-string-n . G4da3) (get-string-all . G4da2) (get-line . G4da1) (get-datum . G4da0) (get-char . G4d9f) (get-bytevector-some . G4d9e) (get-bytevector-n! . G4d9d) (get-bytevector-n . G4d9c) (get-bytevector-all . G4d9b) (flush-output-port . G4d9a) (close-port . G4d99) (exit . G4d91) (command-line . G4ae6) (remove . G4d8c) (remv . G4d8b) (remp . G4d8a) (remq . G4d89) (partition . G4d88) (memv . G4d87) (memq . G4d86) (memp . G4d85) (member . G4d84) (exists . G4d83) (for-all . G4d82) (fold-right . G4d81) (fold-left . G4d80) (find . G4d7f) (filter . G4d7e) (cons* . G4d7d) (assv . G4d7c) (assq . G4d7b) (assp . G4d7a) (assoc . G4d79) (call-with-string-output-port . G4d78) (call-with-port . G4d77) (call-with-bytevector-output-port . G4d76) (bytevector->string . G4d75) (buffer-mode? . G4d74) (binary-port? . G4d73) (with-exception-handler . G4d72) (raise-continuable . G4d71) (raise . G4d70) (make-enumeration . G4d6f) (enum-set=? . G4d6e) (enum-set-universe . G4d6d) (enum-set-union . G4d6c) (enum-set-subset? . G4d6b) (enum-set-projection . G4d6a) (enum-set-member? . G4d69) (enum-set-intersection . G4d68) (enum-set-indexer . G4d67) (enum-set-difference . G4d66) (enum-set-constructor . G4d65) (enum-set-complement . G4d64) (enum-set->list . G4d63) (who-condition? . G4832) (warning? . G47ac) (violation? . G47eb) (undefined-violation? . G48a7) (syntax-violation? . G488e) (syntax-violation-subform . G4892) (syntax-violation-form . G4890) (syntax-violation . G2e3b) (simple-conditions . G4d62) (serious-condition? . G47c1) (non-continuable-violation? . G4849) (message-condition? . G4795) (make-who-condition . G482e) (make-warning . G47aa) (make-violation . G47e9) (make-undefined-violation . G48a5) (make-syntax-violation . G4888) (make-serious-condition . G47bf) (make-non-continuable-violation . G4847) (make-message-condition . G4791) (make-lexical-violation . G4871) (make-irritants-condition . G4814) (make-implementation-restriction-violation . G485c) (make-error . G47d4) (make-assertion-violation . G47fe) (lexical-violation? . G4873) (irritants-condition? . G4818) (implementation-restriction-violation? . G485e) (error? . G47d6) (condition-who . G4834) (condition-predicate . G4d61) (condition-message . G4797) (condition-irritants . G481a) (condition-accessor . G4d60) (condition . G4d5f) (assertion-violation? . G4800) (condition? . G4d5e) (utf32->string . G4d5d) (utf16->string . G4d5c) (utf8->string . G4d5b) (uint-list->bytevector . G4d5a) (u8-list->bytevector . G4d59) (string->utf8 . G4d58) (string->utf32 . G4d57) (string->utf16 . G4d56) (sint-list->bytevector . G4d55) (native-endianness . G4d54) (bytevector? . G4d53) (bytevector=? . G4d52) (bytevector-uint-set! . G4d51) (bytevector-uint-ref . G4d50) (bytevector-u8-set! . G4d4f) (bytevector-u8-ref . G4d4e) (bytevector-u64-set! . G4d4d) (bytevector-u64-ref . G4d4c) (bytevector-u64-native-set! . G4d4b) (bytevector-u64-native-ref . G4d4a) (bytevector-u32-set! . G4d49) (bytevector-u32-ref . G4d48) (bytevector-u32-native-set! . G4d47) (bytevector-u32-native-ref . G4d46) (bytevector-u16-set! . G4d45) (bytevector-u16-ref . G4d44) (bytevector-u16-native-set! . G4d43) (bytevector-u16-native-ref . G4d42) (bytevector-sint-set! . G4d41) (bytevector-sint-ref . G4d40) (bytevector-s8-set! . G4d3f) (bytevector-s8-ref . G4d3e) (bytevector-s64-set! . G4d3d) (bytevector-s64-ref . G4d3c) (bytevector-s64-native-set! . G4d3b) (bytevector-s64-native-ref . G4d3a) (bytevector-s32-set! . G4d39) (bytevector-s32-ref . G4d38) (bytevector-s32-native-set! . G4d37) (bytevector-s32-native-ref . G4d36) (bytevector-s16-set! . G4d35) (bytevector-s16-ref . G4d34) (bytevector-s16-native-set! . G4d33) (bytevector-s16-native-ref . G4d32) (bytevector-length . G4d31) (bytevector-ieee-single-ref . G4d30) (bytevector-ieee-single-set! . G4d2f) (bytevector-ieee-single-native-set! . G4d2e) (bytevector-ieee-single-native-ref . G4d2d) (bytevector-ieee-double-set! . G4d2c) (bytevector-ieee-double-ref . G4d2b) (bytevector-ieee-double-native-set! . G4d2a) (bytevector-ieee-double-native-ref . G4d29) (bytevector-fill! . G4d28) (bytevector-copy! . G4d27) (bytevector-copy . G4d26) (bytevector->uint-list . G4d25) (bytevector->u8-list . G4d24) (bytevector->sint-list . G4d23) (no-nans-violation? . G49e1) (no-infinities-violation? . G49cc) (make-no-nans-violation . G49df) (make-no-infinities-violation . G49ca) (real->flonum . G4d22) (flzero? . G4d21) (fltruncate . G4d20) (fltan . G4d1f) (flsqrt . G4d1e) (flsin . G4d1d) (flround . G4d1c) (flpositive? . G4d1b) (flonum? . G4d1a) (flodd? . G4d19) (flnumerator . G4d18) (flnegative? . G4d17) (flnan? . G4d16) (flmod0 . G4d15) (flmod . G4d14) (flmin . G4d13) (flmax . G4d12) (fllog . G4d11) (flinteger? . G4d10) (flinfinite? . G4d0f) (flfloor . G4d0e) (flfinite? . G4d0d) (flexpt . G4d0c) (flexp . G4d0b) (fleven? . G4d0a) (fldiv0-and-mod0 . G4d09) (fldiv0 . G4d08) (fldiv-and-mod . G4d07) (fldiv . G4d06) (fldenominator . G4d05) (flcos . G4d04) (flceiling . G4d03) (flatan . G4d02) (flasin . G4d01) (flacos . G4d00) (flabs . G4cff) (fl>? . G4cfe) (fl>=? . G4cfd) (fl=? . G4cfc) (fl<? . G4cfb) (fl<=? . G4cfa) (fl/ . G4cf9) (fl- . G4cf8) (fl+ . G4cf7) (fl* . G4cf6) (fixnum->flonum . G4cf5) (fxzero? . G4cf4) (fxxor . G4cf3) (fxrotate-bit-field . G4cf2) (fxreverse-bit-field . G4cf1) (fxpositive? . G4cf0) (fxodd? . G4cef) (fxnot . G4cee) (fxnegative? . G4ced) (fxmod0 . G4cec) (fxmod . G4ceb) (fxmin . G4cea) (fxmax . G4ce9) (fxlength . G4ce8) (fxior . G4ce7) (fxif . G4ce6) (fxfirst-bit-set . G4ce5) (fxeven? . G4ce4) (fxdiv0-and-mod0 . G4ce3) (fxdiv0 . G4ce2) (fxdiv-and-mod . G4ce1) (fxdiv . G4ce0) (fxcopy-bit-field . G4cdf) (fxcopy-bit . G4cde) (fxbit-set? . G4cdd) (fxbit-field . G4cdc) (fxbit-count . G4cdb) (fxarithmetic-shift-right . G4cda) (fxarithmetic-shift-left . G4cd9) (fxarithmetic-shift . G4cd8) (fxand . G4cd7) (fx>? . G4cd6) (fx>=? . G4cd5) (fx=? . G4cd4) (fx<? . G4cd3) (fx<=? . G4cd2) (fx-/carry . G4cd1) (fx- . G4cd0) (fx+/carry . G4ccf) (fx+ . G4cce) (fx*/carry . G4ccd) (fx* . G4ccc) (greatest-fixnum . G4ccb) (least-fixnum . G4cca) (fixnum-width . G4cc9) (fixnum? . G4cc8) (bitwise-rotate-bit-field . G4cc7) (bitwise-reverse-bit-field . G4cc6) (bitwise-length . G4cc5) (bitwise-if . G4cc4) (bitwise-first-bit-set . G4cc3) (bitwise-copy-bit-field . G4cc2) (bitwise-copy-bit . G4cc1) (bitwise-bit-set? . G4cc0) (bitwise-bit-field . G4cbf) (bitwise-bit-count . G4cbe) (bitwise-xor . G4cbd) (bitwise-ior . G4cbc) (bitwise-and . G4cbb) (bitwise-not . G4cba) (bitwise-arithmetic-shift-right . G4cb9) (bitwise-arithmetic-shift-left . G4cb8) (bitwise-arithmetic-shift . G4cb7) (zero? . G4cb6) (vector? . G4cb5) (vector-set! . G4cb4) (vector-ref . G4cb3) (vector-map . G4cb2) (vector-length . G4cb1) (vector-for-each . G4cb0) (vector-fill! . G4caf) (vector->list . G4cae) (vector . G4cad) (values . G4cac) (truncate . G4cab) (tan . G4caa) (symbol? . G4ca9) (symbol=? . G4ca8) (symbol->string . G4ca7) (substring . G4ca6) (string? . G4ca5) (string>? . G4ca4) (string>=? . G4ca3) (string=? . G4ca2) (string<? . G4ca1) (string<=? . G4ca0) (string-ref . G4c9f) (string-length . G4c9e) (string-for-each . G4c9d) (string-copy . G4c9c) (string-append . G4c9b) (string->symbol . G4c9a) (string->number . G4c99) (string->list . G4c98) (string . G4c97) (sqrt . G4c96) (sin . G4c95) (round . G4c94) (reverse . G4c93) (real? . G4c92) (real-valued? . G4c91) (real-part . G4c90) (rationalize . G4c8f) (rational? . G4c8e) (rational-valued? . G4c8d) (procedure? . G4c8c) (positive? . G4c8b) (pair? . G4c8a) (odd? . G4c89) (numerator . G4c88) (number? . G4c87) (number->string . G4c86) (null? . G4c85) (not . G4c84) (negative? . G4c83) (nan? . G4c82) (min . G4c81) (max . G4c80) (map . G4c7f) (make-vector . G4c7e) (make-string . G4c7d) (make-rectangular . G4c7c) (make-polar . G4c7b) (magnitude . G4c7a) (log . G4c79) (list? . G4c78) (list-tail . G4c77) (list-ref . G4c76) (list->vector . G4c75) (list->string . G4c74) (list . G4c73) (length . G4c72) (lcm . G4c71) (integer? . G4c70) (integer-valued? . G4c6f) (integer->char . G4c6e) (infinite? . G4c6d) (inexact? . G4c6c) (inexact . G4c6b) (imag-part . G4c6a) (gcd . G4c69) (for-each . G4c68) (floor . G4c67) (finite? . G4c66) (expt . G4c65) (exp . G4c64) (exact? . G4c63) (exact-integer-sqrt . G4c62) (exact . G4c61) (even? . G4c60) (error . G4c5f) (eqv? . G4c5e) (equal? . G4c5d) (eq? . G4c5c) (dynamic-wind . G4c5b) (div0-and-mod0 . G4c5a) (mod0 . G4c59) (div0 . G4c58) (div-and-mod . G4c57) (mod . G4c56) (div . G4c55) (denominator . G4c54) (cos . G4c53) (cons . G4c52) (complex? . G4c51) (char? . G4c50) (char>? . G4c4f) (char>=? . G4c4e) (char=? . G4c4d) (char<? . G4c4c) (char<=? . G4c4b) (char->integer . G4c4a) (ceiling . G4c49) (call-with-values . G4c48) (call/cc . G4c47) (call-with-current-continuation . G4c46) (cddddr . G4c45) (cdddar . G4c44) (cddadr . G4c43) (cddaar . G4c42) (cdaddr . G4c41) (cdadar . G4c40) (cdaadr . G4c3f) (cdaaar . G4c3e) (cadddr . G4c3d) (caddar . G4c3c) (cadadr . G4c3b) (cadaar . G4c3a) (caaddr . G4c39) (caadar . G4c38) (caaadr . G4c37) (caaaar . G4c36) (cdddr . G4c35) (cddar . G4c34) (cdadr . G4c33) (cdaar . G4c32) (caddr . G4c31) (cadar . G4c30) (caadr . G4c2f) (caaar . G4c2e) (cddr . G4c2d) (cdar . G4c2c) (cadr . G4c2b) (caar . G4c2a) (cdr . G4c29) (car . G4c28) (boolean? . G4c27) (boolean=? . G4c26) (atan . G4c25) (assertion-violation . G4c24) (asin . G4c23) (apply . G4c22) (append . G4c21) (angle . G4c20) (acos . G4c1f) (abs . G4c1e) (/ . G4c1d) (* . G4c1c) (- . G4c1b) (+ . G4c1a) (>= . G4c19) (> . G4c18) (= . G4c17) (<= . G4c16) (< . G4c15) (&no-nans . G4c13) (&no-infinities . G4c12) (&i/o-encoding . G4c11) (&i/o-decoding . G4c10) (&i/o-port . G4c0f) (&i/o-file-does-not-exist . G4c0e) (&i/o-file-already-exists . G4c0d) (&i/o-file-is-read-only . G4c0c) (&i/o-file-protection . G4c0b) (&i/o-filename . G4c0a) (&i/o-invalid-position . G4c09) (&i/o-write . G4c08) (&i/o-read . G4c07) (&i/o . G4c06) (&undefined . G4c05) (&syntax . G4c04) (&lexical . G4c03) (&implementation-restriction . G4c02) (&non-continuable . G4c01) (&who . G4c00) (&irritants . G4bff) (&assertion . G4bfe) (&violation . G4bfd) (&error . G4bfc) (&serious . G4bfb) (&warning . G4bfa) (&message . G4bf9) (&condition . G4bf8) (define-condition-type . G4bf7) (define-enumeration . G4bf6) (define-record-type . G4bf5) (parent-rtd . G4bf4) (nongenerative . G4bf3) (opaque . G4bf2) (sealed . G4bf1) (protocol . G4bf0) (parent . G4bef) (immutable . G4bee) (mutable . G4bed) (fields . G4bec) (error-handling-mode . G4beb) (file-options . G4bea) (buffer-mode . G4be9) (eol-style . G4be8) (guard . G4be7) (unsyntax-splicing . G4be4) (unsyntax . G4be3) (unquote-splicing . G4be2) (unquote . G4be1) (_ . G4be0) (else . G4bdf) (=> . G4bde) (... . G4bdd) (assert . G4bdc) (endianness . G4bdb) (do . G4bd8) (cond . G4bd7) (let* . G4bd6) (let . G4bd5) (let*-values . G4bd4) (let-values . G4bd3) (identifier-syntax . G4bd2) (with-syntax . G4bd1) (quasisyntax . G4bd0) (quasiquote . G4bcf) (syntax-rules . G4bce) (record-constructor-descriptor . G4bcb) (record-type-descriptor . G4bca) (case . G4bc9) (unless . G4bc7) (when . G4bc6) (or . G4bc5) (and . G4bc4) (if . G4bc3) (letrec* . G4bc2) (letrec . G4bc1) (case-lambda . G4bbf) (lambda . G4bbe) (syntax . G4bbd) (syntax-case . G4bbc) (quote . G4bbb) (letrec-syntax . G4bb9) (let-syntax . G4bb8) (set! . G4bb7) (begin . G4bb5) (define-syntax . G4bb3) (define . G4bb2)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4e9a '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G2e17) (quotient . G4d98) (null-environment . G2e15) (remainder . G4d97) (modulo . G4d96) (inexact->exact . G4d95) (force . G4d94) (exact->inexact . G4d93) (make-promise . G4d92) (delay . G4bda)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4e9b '(rnrs control) '(6) '() '() '() '((do . G4bd8) (unless . G4bc7) (when . G4bc6) (case-lambda . G4bbf)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4e9c '(rnrs eval) '(6) '() '() '() '((eval . G2e1b) (environment . G2e13)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4e9d '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4d8e) (set-car! . G4d8d)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4e9e '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4d90) (string-set! . G4d8f)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4e9f '(rnrs programs) '(6) '() '() '() '((exit . G4d91) (command-line . G4ae6)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4ea0 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2b97) (identifier? . G2e3d) (generate-temporaries . G2e29) (free-identifier=? . G2e2b) (syntax->datum . G2e41) (datum->syntax . G2e3f) (bound-identifier=? . G2e2d) (syntax-violation . G2e3b) (unsyntax-splicing . G4be4) (unsyntax . G4be3) (_ . G4be0) (... . G4bdd) (with-syntax . G4bd1) (quasisyntax . G4bd0) (syntax . G4bbd) (syntax-case . G4bbc)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4ea1 '(rnrs files) '(6) '() '() '() '((delete-file . G4e01) (file-exists? . G4e00) (make-i/o-write-error . G48e4) (make-i/o-read-error . G48cf) (make-i/o-port-error . G4982) (make-i/o-invalid-position-error . G48fa) (make-i/o-filename-error . G4914) (make-i/o-file-protection-error . G492d) (make-i/o-file-is-read-only-error . G4942) (make-i/o-file-does-not-exist-error . G496c) (make-i/o-file-already-exists-error . G4957) (make-i/o-error . G48ba) (i/o-write-error? . G48e6) (i/o-read-error? . G48d1) (i/o-port-error? . G4986) (i/o-invalid-position-error? . G48fe) (i/o-filename-error? . G4918) (i/o-file-protection-error? . G492f) (i/o-file-is-read-only-error? . G4944) (i/o-file-does-not-exist-error? . G496e) (i/o-file-already-exists-error? . G4959) (i/o-error? . G48bc) (i/o-error-position . G4900) (i/o-error-port . G4988) (i/o-error-filename . G491a) (&i/o-port . G4c0f) (&i/o-file-does-not-exist . G4c0e) (&i/o-file-already-exists . G4c0d) (&i/o-file-is-read-only . G4c0c) (&i/o-file-protection . G4c0b) (&i/o-filename . G4c0a) (&i/o-invalid-position . G4c09) (&i/o-write . G4c08) (&i/o-read . G4c07) (&i/o . G4c06)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4ea2 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G4dff) (vector-sort . G4dfe) (list-sort . G4dfd)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4ea3 '(rnrs base) '(6) '() '() '() '((zero? . G4cb6) (vector? . G4cb5) (vector-set! . G4cb4) (vector-ref . G4cb3) (vector-map . G4cb2) (vector-length . G4cb1) (vector-for-each . G4cb0) (vector-fill! . G4caf) (vector->list . G4cae) (vector . G4cad) (values . G4cac) (truncate . G4cab) (tan . G4caa) (symbol? . G4ca9) (symbol=? . G4ca8) (symbol->string . G4ca7) (substring . G4ca6) (string? . G4ca5) (string>? . G4ca4) (string>=? . G4ca3) (string=? . G4ca2) (string<? . G4ca1) (string<=? . G4ca0) (string-ref . G4c9f) (string-length . G4c9e) (string-for-each . G4c9d) (string-copy . G4c9c) (string-append . G4c9b) (string->symbol . G4c9a) (string->number . G4c99) (string->list . G4c98) (string . G4c97) (sqrt . G4c96) (sin . G4c95) (round . G4c94) (reverse . G4c93) (real? . G4c92) (real-valued? . G4c91) (real-part . G4c90) (rationalize . G4c8f) (rational? . G4c8e) (rational-valued? . G4c8d) (procedure? . G4c8c) (positive? . G4c8b) (pair? . G4c8a) (odd? . G4c89) (numerator . G4c88) (number? . G4c87) (number->string . G4c86) (null? . G4c85) (not . G4c84) (negative? . G4c83) (nan? . G4c82) (min . G4c81) (max . G4c80) (map . G4c7f) (make-vector . G4c7e) (make-string . G4c7d) (make-rectangular . G4c7c) (make-polar . G4c7b) (magnitude . G4c7a) (log . G4c79) (list? . G4c78) (list-tail . G4c77) (list-ref . G4c76) (list->vector . G4c75) (list->string . G4c74) (list . G4c73) (length . G4c72) (lcm . G4c71) (integer? . G4c70) (integer-valued? . G4c6f) (integer->char . G4c6e) (infinite? . G4c6d) (inexact? . G4c6c) (inexact . G4c6b) (imag-part . G4c6a) (gcd . G4c69) (for-each . G4c68) (floor . G4c67) (finite? . G4c66) (expt . G4c65) (exp . G4c64) (exact? . G4c63) (exact-integer-sqrt . G4c62) (exact . G4c61) (even? . G4c60) (error . G4c5f) (eqv? . G4c5e) (equal? . G4c5d) (eq? . G4c5c) (dynamic-wind . G4c5b) (div0-and-mod0 . G4c5a) (mod0 . G4c59) (div0 . G4c58) (div-and-mod . G4c57) (mod . G4c56) (div . G4c55) (denominator . G4c54) (cos . G4c53) (cons . G4c52) (complex? . G4c51) (char? . G4c50) (char>? . G4c4f) (char>=? . G4c4e) (char=? . G4c4d) (char<? . G4c4c) (char<=? . G4c4b) (char->integer . G4c4a) (ceiling . G4c49) (call-with-values . G4c48) (call/cc . G4c47) (call-with-current-continuation . G4c46) (cddddr . G4c45) (cdddar . G4c44) (cddadr . G4c43) (cddaar . G4c42) (cdaddr . G4c41) (cdadar . G4c40) (cdaadr . G4c3f) (cdaaar . G4c3e) (cadddr . G4c3d) (caddar . G4c3c) (cadadr . G4c3b) (cadaar . G4c3a) (caaddr . G4c39) (caadar . G4c38) (caaadr . G4c37) (caaaar . G4c36) (cdddr . G4c35) (cddar . G4c34) (cdadr . G4c33) (cdaar . G4c32) (caddr . G4c31) (cadar . G4c30) (caadr . G4c2f) (caaar . G4c2e) (cddr . G4c2d) (cdar . G4c2c) (cadr . G4c2b) (caar . G4c2a) (cdr . G4c29) (car . G4c28) (boolean? . G4c27) (boolean=? . G4c26) (atan . G4c25) (assertion-violation . G4c24) (asin . G4c23) (apply . G4c22) (append . G4c21) (angle . G4c20) (acos . G4c1f) (abs . G4c1e) (/ . G4c1d) (* . G4c1c) (- . G4c1b) (+ . G4c1a) (>= . G4c19) (> . G4c18) (= . G4c17) (<= . G4c16) (< . G4c15) (unquote-splicing . G4be2) (unquote . G4be1) (_ . G4be0) (else . G4bdf) (=> . G4bde) (... . G4bdd) (assert . G4bdc) (cond . G4bd7) (let* . G4bd6) (let . G4bd5) (let*-values . G4bd4) (let-values . G4bd3) (identifier-syntax . G4bd2) (quasiquote . G4bcf) (syntax-rules . G4bce) (case . G4bc9) (or . G4bc5) (and . G4bc4) (if . G4bc3) (letrec* . G4bc2) (letrec . G4bc1) (lambda . G4bbe) (quote . G4bbb) (letrec-syntax . G4bb9) (let-syntax . G4bb8) (set! . G4bb7) (begin . G4bb5) (define-syntax . G4bb3) (define . G4bb2)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4ea4 '(rnrs lists) '(6) '() '() '() '((remove . G4d8c) (remv . G4d8b) (remp . G4d8a) (remq . G4d89) (partition . G4d88) (memv . G4d87) (memq . G4d86) (memp . G4d85) (member . G4d84) (exists . G4d83) (for-all . G4d82) (fold-right . G4d81) (fold-left . G4d80) (find . G4d7f) (filter . G4d7e) (cons* . G4d7d) (assv . G4d7c) (assq . G4d7b) (assp . G4d7a) (assoc . G4d79)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4ea5 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4de7) (call-with-input-file . G4de6) (write-char . G4de5) (write . G4de4) (with-output-to-file . G4de3) (with-input-from-file . G4de2) (read-char . G4de1) (read . G4de0) (peek-char . G4ddf) (open-output-file . G4dde) (open-input-file . G4ddd) (newline . G4ddc) (display . G4ddb) (close-output-port . G4dda) (close-input-port . G4dd9) (eof-object? . G4dd8) (eof-object . G4dd7) (current-error-port . G4dd6) (current-output-port . G4dd5) (current-input-port . G4dd4) (output-port? . G4dd3) (input-port? . G4dd2) (make-i/o-write-error . G48e4) (make-i/o-read-error . G48cf) (make-i/o-port-error . G4982) (make-i/o-invalid-position-error . G48fa) (make-i/o-filename-error . G4914) (make-i/o-file-protection-error . G492d) (make-i/o-file-is-read-only-error . G4942) (make-i/o-file-does-not-exist-error . G496c) (make-i/o-file-already-exists-error . G4957) (make-i/o-error . G48ba) (i/o-write-error? . G48e6) (i/o-read-error? . G48d1) (i/o-port-error? . G4986) (i/o-invalid-position-error? . G48fe) (i/o-filename-error? . G4918) (i/o-file-protection-error? . G492f) (i/o-file-is-read-only-error? . G4944) (i/o-file-does-not-exist-error? . G496e) (i/o-file-already-exists-error? . G4959) (i/o-error? . G48bc) (i/o-error-position . G4900) (i/o-error-port . G4988) (i/o-error-filename . G491a) (&i/o-port . G4c0f) (&i/o-file-does-not-exist . G4c0e) (&i/o-file-already-exists . G4c0d) (&i/o-file-is-read-only . G4c0c) (&i/o-file-protection . G4c0b) (&i/o-filename . G4c0a) (&i/o-invalid-position . G4c09) (&i/o-write . G4c08) (&i/o-read . G4c07) (&i/o . G4c06)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4ea6 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4da8) (utf32->string . G4d5d) (utf16->string . G4d5c) (utf8->string . G4d5b) (uint-list->bytevector . G4d5a) (u8-list->bytevector . G4d59) (string->utf8 . G4d58) (string->utf32 . G4d57) (string->utf16 . G4d56) (sint-list->bytevector . G4d55) (native-endianness . G4d54) (bytevector? . G4d53) (bytevector=? . G4d52) (bytevector-uint-set! . G4d51) (bytevector-uint-ref . G4d50) (bytevector-u8-set! . G4d4f) (bytevector-u8-ref . G4d4e) (bytevector-u64-set! . G4d4d) (bytevector-u64-ref . G4d4c) (bytevector-u64-native-set! . G4d4b) (bytevector-u64-native-ref . G4d4a) (bytevector-u32-set! . G4d49) (bytevector-u32-ref . G4d48) (bytevector-u32-native-set! . G4d47) (bytevector-u32-native-ref . G4d46) (bytevector-u16-set! . G4d45) (bytevector-u16-ref . G4d44) (bytevector-u16-native-set! . G4d43) (bytevector-u16-native-ref . G4d42) (bytevector-sint-set! . G4d41) (bytevector-sint-ref . G4d40) (bytevector-s8-set! . G4d3f) (bytevector-s8-ref . G4d3e) (bytevector-s64-set! . G4d3d) (bytevector-s64-ref . G4d3c) (bytevector-s64-native-set! . G4d3b) (bytevector-s64-native-ref . G4d3a) (bytevector-s32-set! . G4d39) (bytevector-s32-ref . G4d38) (bytevector-s32-native-set! . G4d37) (bytevector-s32-native-ref . G4d36) (bytevector-s16-set! . G4d35) (bytevector-s16-ref . G4d34) (bytevector-s16-native-set! . G4d33) (bytevector-s16-native-ref . G4d32) (bytevector-length . G4d31) (bytevector-ieee-single-ref . G4d30) (bytevector-ieee-single-set! . G4d2f) (bytevector-ieee-single-native-set! . G4d2e) (bytevector-ieee-single-native-ref . G4d2d) (bytevector-ieee-double-set! . G4d2c) (bytevector-ieee-double-ref . G4d2b) (bytevector-ieee-double-native-set! . G4d2a) (bytevector-ieee-double-native-ref . G4d29) (bytevector-fill! . G4d28) (bytevector-copy! . G4d27) (bytevector-copy . G4d26) (bytevector->uint-list . G4d25) (bytevector->u8-list . G4d24) (bytevector->sint-list . G4d23) (endianness . G4bdb)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4ea7 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G4e2f) (string-titlecase . G4e2e) (string-normalize-nfkd . G4e2d) (string-normalize-nfkc . G4e2c) (string-normalize-nfd . G4e2b) (string-normalize-nfc . G4e2a) (string-foldcase . G4e29) (string-downcase . G4e28) (string-ci>? . G4e27) (string-ci>=? . G4e26) (string-ci=? . G4e25) (string-ci<? . G4e24) (string-ci<=? . G4e23) (char-whitespace? . G4e22) (char-upper-case? . G4e21) (char-title-case? . G4e20) (char-numeric? . G4e1f) (char-lower-case? . G4e1e) (char-general-category . G4e1d) (char-upcase . G4e1c) (char-titlecase . G4e1b) (char-foldcase . G4e1a) (char-downcase . G4e19) (char-ci>? . G4e18) (char-ci>=? . G4e17) (char-ci=? . G4e16) (char-ci<? . G4e15) (char-ci<=? . G4e14) (char-alphabetic? . G4e13)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4ea8 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4d72) (raise-continuable . G4d71) (raise . G4d70) (guard . G4be7) (else . G4bdf) (=> . G4bde)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4ea9 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4cc7) (bitwise-reverse-bit-field . G4cc6) (bitwise-length . G4cc5) (bitwise-if . G4cc4) (bitwise-first-bit-set . G4cc3) (bitwise-copy-bit-field . G4cc2) (bitwise-copy-bit . G4cc1) (bitwise-bit-set? . G4cc0) (bitwise-bit-field . G4cbf) (bitwise-bit-count . G4cbe) (bitwise-xor . G4cbd) (bitwise-ior . G4cbc) (bitwise-and . G4cbb) (bitwise-not . G4cba) (bitwise-arithmetic-shift-right . G4cb9) (bitwise-arithmetic-shift-left . G4cb8) (bitwise-arithmetic-shift . G4cb7)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4eaa '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4cf4) (fxxor . G4cf3) (fxrotate-bit-field . G4cf2) (fxreverse-bit-field . G4cf1) (fxpositive? . G4cf0) (fxodd? . G4cef) (fxnot . G4cee) (fxnegative? . G4ced) (fxmod0 . G4cec) (fxmod . G4ceb) (fxmin . G4cea) (fxmax . G4ce9) (fxlength . G4ce8) (fxior . G4ce7) (fxif . G4ce6) (fxfirst-bit-set . G4ce5) (fxeven? . G4ce4) (fxdiv0-and-mod0 . G4ce3) (fxdiv0 . G4ce2) (fxdiv-and-mod . G4ce1) (fxdiv . G4ce0) (fxcopy-bit-field . G4cdf) (fxcopy-bit . G4cde) (fxbit-set? . G4cdd) (fxbit-field . G4cdc) (fxbit-count . G4cdb) (fxarithmetic-shift-right . G4cda) (fxarithmetic-shift-left . G4cd9) (fxarithmetic-shift . G4cd8) (fxand . G4cd7) (fx>? . G4cd6) (fx>=? . G4cd5) (fx=? . G4cd4) (fx<? . G4cd3) (fx<=? . G4cd2) (fx-/carry . G4cd1) (fx- . G4cd0) (fx+/carry . G4ccf) (fx+ . G4cce) (fx*/carry . G4ccd) (fx* . G4ccc) (greatest-fixnum . G4ccb) (least-fixnum . G4cca) (fixnum-width . G4cc9) (fixnum? . G4cc8)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4eab '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G49e1) (no-infinities-violation? . G49cc) (make-no-nans-violation . G49df) (make-no-infinities-violation . G49ca) (real->flonum . G4d22) (flzero? . G4d21) (fltruncate . G4d20) (fltan . G4d1f) (flsqrt . G4d1e) (flsin . G4d1d) (flround . G4d1c) (flpositive? . G4d1b) (flonum? . G4d1a) (flodd? . G4d19) (flnumerator . G4d18) (flnegative? . G4d17) (flnan? . G4d16) (flmod0 . G4d15) (flmod . G4d14) (flmin . G4d13) (flmax . G4d12) (fllog . G4d11) (flinteger? . G4d10) (flinfinite? . G4d0f) (flfloor . G4d0e) (flfinite? . G4d0d) (flexpt . G4d0c) (flexp . G4d0b) (fleven? . G4d0a) (fldiv0-and-mod0 . G4d09) (fldiv0 . G4d08) (fldiv-and-mod . G4d07) (fldiv . G4d06) (fldenominator . G4d05) (flcos . G4d04) (flceiling . G4d03) (flatan . G4d02) (flasin . G4d01) (flacos . G4d00) (flabs . G4cff) (fl>? . G4cfe) (fl>=? . G4cfd) (fl=? . G4cfc) (fl<? . G4cfb) (fl<=? . G4cfa) (fl/ . G4cf9) (fl- . G4cf8) (fl+ . G4cf7) (fl* . G4cf6) (fixnum->flonum . G4cf5) (&no-nans . G4c13) (&no-infinities . G4c12)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4eac '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4dfc) (string-ci-hash . G4dfb) (string-hash . G4dfa) (equal-hash . G4df9) (hashtable-equivalence-function . G4df8) (make-hashtable . G4df7) (hashtable-hash-function . G4df6) (make-eqv-hashtable . G4df5) (make-eq-hashtable . G4df4) (hashtable? . G4df3) (hashtable-update! . G4df2) (hashtable-size . G4df1) (hashtable-set! . G4df0) (hashtable-ref . G4def) (hashtable-mutable? . G4dee) (hashtable-keys . G4ded) (hashtable-entries . G4dec) (hashtable-delete! . G4deb) (hashtable-copy . G4dea) (hashtable-contains? . G4de9) (hashtable-clear! . G4de8)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4ead '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4dd8) (eof-object . G4dd7) (current-error-port . G4dd6) (current-output-port . G4dd5) (current-input-port . G4dd4) (output-port? . G4dd3) (input-port? . G4dd2) (utf-8-codec . G4dd1) (utf-16-codec . G4dd0) (transcoder-error-handling-mode . G4dcf) (transcoder-eol-style . G4dce) (transcoder-codec . G4dcd) (transcoded-port . G4dcc) (textual-port? . G4dcb) (string->bytevector . G4dca) (standard-output-port . G4dc9) (standard-input-port . G4dc8) (standard-error-port . G4dc7) (set-port-position! . G4dc6) (put-u8 . G4dc5) (put-string . G4dc4) (put-datum . G4dc3) (put-char . G4dc2) (put-bytevector . G4dc1) (port? . G4dc0) (port-transcoder . G4dbf) (port-position . G4dbe) (port-has-set-port-position!? . G4dbd) (port-has-port-position? . G4dbc) (port-eof? . G4dbb) (output-port-buffer-mode . G4dba) (open-string-output-port . G4db9) (open-string-input-port . G4db8) (open-file-output-port . G4db7) (open-file-input/output-port . G4db6) (open-file-input-port . G4db5) (open-bytevector-output-port . G4db4) (open-bytevector-input-port . G4db3) (native-transcoder . G4db2) (native-eol-style . G4db1) (make-transcoder . G4db0) (latin-1-codec . G4daf) (make-i/o-write-error . G48e4) (make-i/o-read-error . G48cf) (make-i/o-port-error . G4982) (make-i/o-invalid-position-error . G48fa) (make-i/o-filename-error . G4914) (make-i/o-file-protection-error . G492d) (make-i/o-file-is-read-only-error . G4942) (make-i/o-file-does-not-exist-error . G496c) (make-i/o-file-already-exists-error . G4957) (make-i/o-error . G48ba) (make-i/o-encoding-error . G49b1) (make-i/o-decoding-error . G499b) (make-custom-textual-output-port . G4dae) (make-custom-textual-input/output-port . G4dad) (make-custom-textual-input-port . G4dac) (make-custom-binary-output-port . G4dab) (make-custom-binary-input/output-port . G4daa) (make-custom-binary-input-port . G4da9) (lookahead-u8 . G4da7) (lookahead-char . G4da6) (i/o-write-error? . G48e6) (i/o-read-error? . G48d1) (i/o-port-error? . G4986) (i/o-invalid-position-error? . G48fe) (i/o-filename-error? . G4918) (i/o-file-protection-error? . G492f) (i/o-file-is-read-only-error? . G4944) (i/o-file-does-not-exist-error? . G496e) (i/o-file-already-exists-error? . G4959) (i/o-error? . G48bc) (i/o-error-position . G4900) (i/o-error-port . G4988) (i/o-error-filename . G491a) (i/o-encoding-error? . G49b5) (i/o-encoding-error-char . G49b7) (i/o-decoding-error? . G499d) (get-u8 . G4da5) (get-string-n! . G4da4) (get-string-n . G4da3) (get-string-all . G4da2) (get-line . G4da1) (get-datum . G4da0) (get-char . G4d9f) (get-bytevector-some . G4d9e) (get-bytevector-n! . G4d9d) (get-bytevector-n . G4d9c) (get-bytevector-all . G4d9b) (flush-output-port . G4d9a) (close-port . G4d99) (call-with-string-output-port . G4d78) (call-with-port . G4d77) (call-with-bytevector-output-port . G4d76) (bytevector->string . G4d75) (buffer-mode? . G4d74) (binary-port? . G4d73) (&i/o-encoding . G4c11) (&i/o-decoding . G4c10) (&i/o-port . G4c0f) (&i/o-file-does-not-exist . G4c0e) (&i/o-file-already-exists . G4c0d) (&i/o-file-is-read-only . G4c0c) (&i/o-file-protection . G4c0b) (&i/o-filename . G4c0a) (&i/o-invalid-position . G4c09) (&i/o-write . G4c08) (&i/o-read . G4c07) (&i/o . G4c06) (error-handling-mode . G4beb) (file-options . G4bea) (buffer-mode . G4be9) (eol-style . G4be8)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4eae '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4d6f) (enum-set=? . G4d6e) (enum-set-universe . G4d6d) (enum-set-union . G4d6c) (enum-set-subset? . G4d6b) (enum-set-projection . G4d6a) (enum-set-member? . G4d69) (enum-set-intersection . G4d68) (enum-set-indexer . G4d67) (enum-set-difference . G4d66) (enum-set-constructor . G4d65) (enum-set-complement . G4d64) (enum-set->list . G4d63) (define-enumeration . G4bf6)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4eaf '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4832) (warning? . G47ac) (violation? . G47eb) (undefined-violation? . G48a7) (syntax-violation? . G488e) (syntax-violation-subform . G4892) (syntax-violation-form . G4890) (syntax-violation . G2e3b) (simple-conditions . G4d62) (serious-condition? . G47c1) (non-continuable-violation? . G4849) (message-condition? . G4795) (make-who-condition . G482e) (make-warning . G47aa) (make-violation . G47e9) (make-undefined-violation . G48a5) (make-syntax-violation . G4888) (make-serious-condition . G47bf) (make-non-continuable-violation . G4847) (make-message-condition . G4791) (make-lexical-violation . G4871) (make-irritants-condition . G4814) (make-implementation-restriction-violation . G485c) (make-error . G47d4) (make-assertion-violation . G47fe) (lexical-violation? . G4873) (irritants-condition? . G4818) (implementation-restriction-violation? . G485e) (error? . G47d6) (condition-who . G4834) (condition-predicate . G4d61) (condition-message . G4797) (condition-irritants . G481a) (condition-accessor . G4d60) (condition . G4d5f) (assertion-violation? . G4800) (condition? . G4d5e) (&undefined . G4c05) (&syntax . G4c04) (&lexical . G4c03) (&implementation-restriction . G4c02) (&non-continuable . G4c01) (&who . G4c00) (&irritants . G4bff) (&assertion . G4bfe) (&violation . G4bfd) (&error . G4bfc) (&serious . G4bfb) (&warning . G4bfa) (&message . G4bf9) (&condition . G4bf8) (define-condition-type . G4bf7)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4eb0 '(rnrs records inspection) '(6) '() '() '() '((record? . G4e0b) (record-type-uid . G4e0a) (record-type-sealed? . G4e09) (record-type-parent . G4e08) (record-type-opaque? . G4e07) (record-type-name . G4e06) (record-type-generative? . G4e05) (record-type-field-names . G4e04) (record-rtd . G4e03) (record-field-mutable? . G4e02)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4eb1 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G4e12) (record-predicate . G4e11) (record-mutator . G4e10) (record-constructor . G4e0f) (record-accessor . G4e0e) (make-record-type-descriptor . G4e0d) (make-record-constructor-descriptor . G4e0c)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4eb2 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4bf5) (parent-rtd . G4bf4) (nongenerative . G4bf3) (opaque . G4bf2) (sealed . G4bf1) (protocol . G4bf0) (parent . G4bef) (immutable . G4bee) (mutable . G4bed) (fields . G4bec) (record-constructor-descriptor . G4bcb) (record-type-descriptor . G4bca)) '() values values '#f '#f '#t '#f) (G2986@G282b@install-library 'G4eb3 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G49e5) (&no-nans-rtd . G49e3) (&no-infinities-rcd . G49d0) (&no-infinities-rtd . G49ce) (&i/o-encoding-rcd . G49bb) (&i/o-encoding-rtd . G49b9) (&i/o-decoding-rcd . G49a1) (&i/o-decoding-rtd . G499f) (&i/o-port-rcd . G498c) (&i/o-port-rtd . G498a) (&i/o-file-does-not-exist-rcd . G4972) (&i/o-file-does-not-exist-rtd . G4970) (&i/o-file-already-exists-rcd . G495d) (&i/o-file-already-exists-rtd . G495b) (&i/o-file-is-read-only-rcd . G4948) (&i/o-file-is-read-only-rtd . G4946) (&i/o-file-protection-rcd . G4933) (&i/o-file-protection-rtd . G4931) (&i/o-filename-rcd . G491e) (&i/o-filename-rtd . G491c) (&i/o-invalid-position-rcd . G4904) (&i/o-invalid-position-rtd . G4902) (&i/o-write-rcd . G48ea) (&i/o-write-rtd . G48e8) (&i/o-read-rcd . G48d5) (&i/o-read-rtd . G48d3) (&i/o-rcd . G48c0) (&i/o-rtd . G48be) (&undefined-rcd . G48ab) (&undefined-rtd . G48a9) (&syntax-rcd . G4896) (&syntax-rtd . G4894) (&lexical-rcd . G4877) (&lexical-rtd . G4875) (&implementation-restriction-rcd . G4862) (&implementation-restriction-rtd . G4860) (&non-continuable-rcd . G484d) (&non-continuable-rtd . G484b) (&who-rcd . G4838) (&who-rtd . G4836) (&irritants-rcd . G481e) (&irritants-rtd . G481c) (&assertion-rcd . G4804) (&assertion-rtd . G4802) (&violation-rcd . G47ef) (&violation-rtd . G47ed) (&error-rcd . G47da) (&error-rtd . G47d8) (&serious-rcd . G47c5) (&serious-rtd . G47c3) (&warning-rcd . G47b0) (&warning-rtd . G47ae) (&message-rcd . G479b) (&message-rtd . G4799) (&condition-rcd . G4740) (&condition-rtd . G473e) (syntax-error . G2e37) (syntax-dispatch . G2d50) (pretty-print . G4e93) (eval-core . G4e92) (set-symbol-value! . G4e91) (symbol-value . G4e90) (gensym . G4e8f) (void . G4e8e) (load . G4aec) (interaction-environment . G2e47) (char-ready? . G4e8d) (regexp? . G4e8c) (read-line . G4e8b) (dotted-list? . G4e8a) (circular-list? . G4e89) (proper-list? . G4e88) (circular-list . G4e87) (last . G4e86) (last-pair . G4e85) (not-pair? . G4e84) (split-at! . G4e83) (split-at . G4e82) (list= . G4e81) (list-copy . G4e80) (list-tabulate . G4e7f) (make-list . G4e7e) (xcons . G4e7d) (tenth . G4e7c) (ninth . G4e7b) (eighth . G4e7a) (seventh . G4e79) (sixth . G4e78) (fifth . G4e77) (drop-right! . G4e76) (drop-right . G4e75) (take-right . G4e74) (take! . G4e73) (drop . G4e72) (take . G4e71) (car+cdr . G4e70) (fourth . G4e6f) (third . G4e6e) (second . G4e6d) (first . G4e6c) (iota . G4e6b) (every . G4e6a) (ungensym . G4e69) (alist->eq-hash-table . G4e68) (assoc-ref . G4e67) (alist-cons . G4e66) (append-map . G4e65) (print . G4e64) (format . G4e63) (host-os . G4e62) (library-path . G280a) (standard-library-path . G4e61) (file-newer? . G4e60) (stat-mtime . G4e5f) (write-to-file . G4e5e) (file->list . G4e5d) (file->string . G4e5c) (digit->integer . G4e5b) (call-with-string-input-port . G4e5a) (call-with-string-io . G4e59) (string-split . G4e58) (bytevector-for-each . G4e57) (string->regexp . G4e56) (rxmatch . G4e55) (regexp-replace-all . G4e54) (hashtable-for-each . G4e53) (call-process . G4e52) (local-tz-offset . G4e51) (microseconds . G4e50) (readdir . G4e4f) (set-current-directory! . G4e4e) (expand-path . G4e4d) (current-directory . G4e4c) (%spawn . G4e4b) (%waitpid . G4e4a) (%ffi-supported? . G4e49) (%ffi-pointer-ref . G4e48) (%ffi-pointer->string . G4e47) (%ffi-call->string-or-zero . G4e46) (%ffi-call->double . G4e45) (%ffi-call->void* . G4e44) (%ffi-call->void . G4e43) (%ffi-call->int . G4e42) (%ffi-lookup . G4e41) (%ffi-open . G4e40) (%fork . G4e3f) (%pipe . G4e3e) (p . G4e3d) (get-environment-variables . G4e3c) (get-environment-variable . G4e3b) (get-timeofday . G4e3a) (get-command-line . G4e39) (sys-display . G4e38) (source-info . G4e37) (make-compiler-instruction . G4e36) (make-instruction . G4e35) (set-source-info! . G4e34) (bignum? . G4e33) (fast-equal? . G4e32) (fasl-read . G4e31) (fasl-write . G4e30) (make-parameter . G2641) (string-upcase . G4e2f) (string-titlecase . G4e2e) (string-normalize-nfkd . G4e2d) (string-normalize-nfkc . G4e2c) (string-normalize-nfd . G4e2b) (string-normalize-nfc . G4e2a) (string-foldcase . G4e29) (string-downcase . G4e28) (string-ci>? . G4e27) (string-ci>=? . G4e26) (string-ci=? . G4e25) (string-ci<? . G4e24) (string-ci<=? . G4e23) (char-whitespace? . G4e22) (char-upper-case? . G4e21) (char-title-case? . G4e20) (char-numeric? . G4e1f) (char-lower-case? . G4e1e) (char-general-category . G4e1d) (char-upcase . G4e1c) (char-titlecase . G4e1b) (char-foldcase . G4e1a) (char-downcase . G4e19) (char-ci>? . G4e18) (char-ci>=? . G4e17) (char-ci=? . G4e16) (char-ci<? . G4e15) (char-ci<=? . G4e14) (char-alphabetic? . G4e13) (make-variable-transformer . G2b97) (identifier? . G2e3d) (generate-temporaries . G2e29) (free-identifier=? . G2e2b) (syntax->datum . G2e41) (datum->syntax . G2e3f) (bound-identifier=? . G2e2d) (record-type-descriptor? . G4e12) (record-predicate . G4e11) (record-mutator . G4e10) (record-constructor . G4e0f) (record-accessor . G4e0e) (make-record-type-descriptor . G4e0d) (make-record-constructor-descriptor . G4e0c) (record? . G4e0b) (record-type-uid . G4e0a) (record-type-sealed? . G4e09) (record-type-parent . G4e08) (record-type-opaque? . G4e07) (record-type-name . G4e06) (record-type-generative? . G4e05) (record-type-field-names . G4e04) (record-rtd . G4e03) (record-field-mutable? . G4e02) (delete-file . G4e01) (file-exists? . G4e00) (vector-sort! . G4dff) (vector-sort . G4dfe) (list-sort . G4dfd) (symbol-hash . G4dfc) (string-ci-hash . G4dfb) (string-hash . G4dfa) (equal-hash . G4df9) (hashtable-equivalence-function . G4df8) (make-hashtable . G4df7) (hashtable-hash-function . G4df6) (make-eqv-hashtable . G4df5) (make-eq-hashtable . G4df4) (hashtable? . G4df3) (hashtable-update! . G4df2) (hashtable-size . G4df1) (hashtable-set! . G4df0) (hashtable-ref . G4def) (hashtable-mutable? . G4dee) (hashtable-keys . G4ded) (hashtable-entries . G4dec) (hashtable-delete! . G4deb) (hashtable-copy . G4dea) (hashtable-contains? . G4de9) (hashtable-clear! . G4de8) (call-with-output-file . G4de7) (call-with-input-file . G4de6) (write-char . G4de5) (write . G4de4) (with-output-to-file . G4de3) (with-input-from-file . G4de2) (read-char . G4de1) (read . G4de0) (peek-char . G4ddf) (open-output-file . G4dde) (open-input-file . G4ddd) (newline . G4ddc) (display . G4ddb) (close-output-port . G4dda) (close-input-port . G4dd9) (eof-object? . G4dd8) (eof-object . G4dd7) (current-error-port . G4dd6) (current-output-port . G4dd5) (current-input-port . G4dd4) (output-port? . G4dd3) (input-port? . G4dd2) (utf-8-codec . G4dd1) (utf-16-codec . G4dd0) (transcoder-error-handling-mode . G4dcf) (transcoder-eol-style . G4dce) (transcoder-codec . G4dcd) (transcoded-port . G4dcc) (textual-port? . G4dcb) (string->bytevector . G4dca) (standard-output-port . G4dc9) (standard-input-port . G4dc8) (standard-error-port . G4dc7) (set-port-position! . G4dc6) (put-u8 . G4dc5) (put-string . G4dc4) (put-datum . G4dc3) (put-char . G4dc2) (put-bytevector . G4dc1) (port? . G4dc0) (port-transcoder . G4dbf) (port-position . G4dbe) (port-has-set-port-position!? . G4dbd) (port-has-port-position? . G4dbc) (port-eof? . G4dbb) (output-port-buffer-mode . G4dba) (open-string-output-port . G4db9) (open-string-input-port . G4db8) (open-file-output-port . G4db7) (open-file-input/output-port . G4db6) (open-file-input-port . G4db5) (open-bytevector-output-port . G4db4) (open-bytevector-input-port . G4db3) (native-transcoder . G4db2) (native-eol-style . G4db1) (make-transcoder . G4db0) (latin-1-codec . G4daf) (make-i/o-write-error . G48e4) (make-i/o-read-error . G48cf) (make-i/o-port-error . G4982) (make-i/o-invalid-position-error . G48fa) (make-i/o-filename-error . G4914) (make-i/o-file-protection-error . G492d) (make-i/o-file-is-read-only-error . G4942) (make-i/o-file-does-not-exist-error . G496c) (make-i/o-file-already-exists-error . G4957) (make-i/o-error . G48ba) (make-i/o-encoding-error . G49b1) (make-i/o-decoding-error . G499b) (make-custom-textual-output-port . G4dae) (make-custom-textual-input/output-port . G4dad) (make-custom-textual-input-port . G4dac) (make-custom-binary-output-port . G4dab) (make-custom-binary-input/output-port . G4daa) (make-custom-binary-input-port . G4da9) (make-bytevector . G4da8) (lookahead-u8 . G4da7) (lookahead-char . G4da6) (i/o-write-error? . G48e6) (i/o-read-error? . G48d1) (i/o-port-error? . G4986) (i/o-invalid-position-error? . G48fe) (i/o-filename-error? . G4918) (i/o-file-protection-error? . G492f) (i/o-file-is-read-only-error? . G4944) (i/o-file-does-not-exist-error? . G496e) (i/o-file-already-exists-error? . G4959) (i/o-error? . G48bc) (i/o-error-position . G4900) (i/o-error-port . G4988) (i/o-error-filename . G491a) (i/o-encoding-error? . G49b5) (i/o-encoding-error-char . G49b7) (i/o-decoding-error? . G499d) (get-u8 . G4da5) (get-string-n! . G4da4) (get-string-n . G4da3) (get-string-all . G4da2) (get-line . G4da1) (get-datum . G4da0) (get-char . G4d9f) (get-bytevector-some . G4d9e) (get-bytevector-n! . G4d9d) (get-bytevector-n . G4d9c) (get-bytevector-all . G4d9b) (flush-output-port . G4d9a) (close-port . G4d99) (scheme-report-environment . G2e17) (quotient . G4d98) (null-environment . G2e15) (remainder . G4d97) (modulo . G4d96) (inexact->exact . G4d95) (force . G4d94) (exact->inexact . G4d93) (make-promise . G4d92) (exit . G4d91) (command-line . G4ae6) (string-fill! . G4d90) (string-set! . G4d8f) (set-cdr! . G4d8e) (set-car! . G4d8d) (remove . G4d8c) (remv . G4d8b) (remp . G4d8a) (remq . G4d89) (partition . G4d88) (memv . G4d87) (memq . G4d86) (memp . G4d85) (member . G4d84) (exists . G4d83) (for-all . G4d82) (fold-right . G4d81) (fold-left . G4d80) (find . G4d7f) (filter . G4d7e) (cons* . G4d7d) (assv . G4d7c) (assq . G4d7b) (assp . G4d7a) (assoc . G4d79) (call-with-string-output-port . G4d78) (call-with-port . G4d77) (call-with-bytevector-output-port . G4d76) (bytevector->string . G4d75) (buffer-mode? . G4d74) (binary-port? . G4d73) (with-exception-handler . G4d72) (raise-continuable . G4d71) (raise . G4d70) (eval . G2e1b) (environment . G2e13) (make-enumeration . G4d6f) (enum-set=? . G4d6e) (enum-set-universe . G4d6d) (enum-set-union . G4d6c) (enum-set-subset? . G4d6b) (enum-set-projection . G4d6a) (enum-set-member? . G4d69) (enum-set-intersection . G4d68) (enum-set-indexer . G4d67) (enum-set-difference . G4d66) (enum-set-constructor . G4d65) (enum-set-complement . G4d64) (enum-set->list . G4d63) (who-condition? . G4832) (warning? . G47ac) (violation? . G47eb) (undefined-violation? . G48a7) (syntax-violation? . G488e) (syntax-violation-subform . G4892) (syntax-violation-form . G4890) (syntax-violation . G2e3b) (simple-conditions . G4d62) (serious-condition? . G47c1) (non-continuable-violation? . G4849) (message-condition? . G4795) (make-who-condition . G482e) (make-warning . G47aa) (make-violation . G47e9) (make-undefined-violation . G48a5) (make-syntax-violation . G4888) (make-serious-condition . G47bf) (make-non-continuable-violation . G4847) (make-message-condition . G4791) (make-lexical-violation . G4871) (make-irritants-condition . G4814) (make-implementation-restriction-violation . G485c) (make-error . G47d4) (make-assertion-violation . G47fe) (lexical-violation? . G4873) (irritants-condition? . G4818) (implementation-restriction-violation? . G485e) (error? . G47d6) (condition-who . G4834) (condition-predicate . G4d61) (condition-message . G4797) (condition-irritants . G481a) (condition-accessor . G4d60) (condition . G4d5f) (assertion-violation? . G4800) (condition? . G4d5e) (utf32->string . G4d5d) (utf16->string . G4d5c) (utf8->string . G4d5b) (uint-list->bytevector . G4d5a) (u8-list->bytevector . G4d59) (string->utf8 . G4d58) (string->utf32 . G4d57) (string->utf16 . G4d56) (sint-list->bytevector . G4d55) (native-endianness . G4d54) (bytevector? . G4d53) (bytevector=? . G4d52) (bytevector-uint-set! . G4d51) (bytevector-uint-ref . G4d50) (bytevector-u8-set! . G4d4f) (bytevector-u8-ref . G4d4e) (bytevector-u64-set! . G4d4d) (bytevector-u64-ref . G4d4c) (bytevector-u64-native-set! . G4d4b) (bytevector-u64-native-ref . G4d4a) (bytevector-u32-set! . G4d49) (bytevector-u32-ref . G4d48) (bytevector-u32-native-set! . G4d47) (bytevector-u32-native-ref . G4d46) (bytevector-u16-set! . G4d45) (bytevector-u16-ref . G4d44) (bytevector-u16-native-set! . G4d43) (bytevector-u16-native-ref . G4d42) (bytevector-sint-set! . G4d41) (bytevector-sint-ref . G4d40) (bytevector-s8-set! . G4d3f) (bytevector-s8-ref . G4d3e) (bytevector-s64-set! . G4d3d) (bytevector-s64-ref . G4d3c) (bytevector-s64-native-set! . G4d3b) (bytevector-s64-native-ref . G4d3a) (bytevector-s32-set! . G4d39) (bytevector-s32-ref . G4d38) (bytevector-s32-native-set! . G4d37) (bytevector-s32-native-ref . G4d36) (bytevector-s16-set! . G4d35) (bytevector-s16-ref . G4d34) (bytevector-s16-native-set! . G4d33) (bytevector-s16-native-ref . G4d32) (bytevector-length . G4d31) (bytevector-ieee-single-ref . G4d30) (bytevector-ieee-single-set! . G4d2f) (bytevector-ieee-single-native-set! . G4d2e) (bytevector-ieee-single-native-ref . G4d2d) (bytevector-ieee-double-set! . G4d2c) (bytevector-ieee-double-ref . G4d2b) (bytevector-ieee-double-native-set! . G4d2a) (bytevector-ieee-double-native-ref . G4d29) (bytevector-fill! . G4d28) (bytevector-copy! . G4d27) (bytevector-copy . G4d26) (bytevector->uint-list . G4d25) (bytevector->u8-list . G4d24) (bytevector->sint-list . G4d23) (no-nans-violation? . G49e1) (no-infinities-violation? . G49cc) (make-no-nans-violation . G49df) (make-no-infinities-violation . G49ca) (real->flonum . G4d22) (flzero? . G4d21) (fltruncate . G4d20) (fltan . G4d1f) (flsqrt . G4d1e) (flsin . G4d1d) (flround . G4d1c) (flpositive? . G4d1b) (flonum? . G4d1a) (flodd? . G4d19) (flnumerator . G4d18) (flnegative? . G4d17) (flnan? . G4d16) (flmod0 . G4d15) (flmod . G4d14) (flmin . G4d13) (flmax . G4d12) (fllog . G4d11) (flinteger? . G4d10) (flinfinite? . G4d0f) (flfloor . G4d0e) (flfinite? . G4d0d) (flexpt . G4d0c) (flexp . G4d0b) (fleven? . G4d0a) (fldiv0-and-mod0 . G4d09) (fldiv0 . G4d08) (fldiv-and-mod . G4d07) (fldiv . G4d06) (fldenominator . G4d05) (flcos . G4d04) (flceiling . G4d03) (flatan . G4d02) (flasin . G4d01) (flacos . G4d00) (flabs . G4cff) (fl>? . G4cfe) (fl>=? . G4cfd) (fl=? . G4cfc) (fl<? . G4cfb) (fl<=? . G4cfa) (fl/ . G4cf9) (fl- . G4cf8) (fl+ . G4cf7) (fl* . G4cf6) (fixnum->flonum . G4cf5) (fxzero? . G4cf4) (fxxor . G4cf3) (fxrotate-bit-field . G4cf2) (fxreverse-bit-field . G4cf1) (fxpositive? . G4cf0) (fxodd? . G4cef) (fxnot . G4cee) (fxnegative? . G4ced) (fxmod0 . G4cec) (fxmod . G4ceb) (fxmin . G4cea) (fxmax . G4ce9) (fxlength . G4ce8) (fxior . G4ce7) (fxif . G4ce6) (fxfirst-bit-set . G4ce5) (fxeven? . G4ce4) (fxdiv0-and-mod0 . G4ce3) (fxdiv0 . G4ce2) (fxdiv-and-mod . G4ce1) (fxdiv . G4ce0) (fxcopy-bit-field . G4cdf) (fxcopy-bit . G4cde) (fxbit-set? . G4cdd) (fxbit-field . G4cdc) (fxbit-count . G4cdb) (fxarithmetic-shift-right . G4cda) (fxarithmetic-shift-left . G4cd9) (fxarithmetic-shift . G4cd8) (fxand . G4cd7) (fx>? . G4cd6) (fx>=? . G4cd5) (fx=? . G4cd4) (fx<? . G4cd3) (fx<=? . G4cd2) (fx-/carry . G4cd1) (fx- . G4cd0) (fx+/carry . G4ccf) (fx+ . G4cce) (fx*/carry . G4ccd) (fx* . G4ccc) (greatest-fixnum . G4ccb) (least-fixnum . G4cca) (fixnum-width . G4cc9) (fixnum? . G4cc8) (bitwise-rotate-bit-field . G4cc7) (bitwise-reverse-bit-field . G4cc6) (bitwise-length . G4cc5) (bitwise-if . G4cc4) (bitwise-first-bit-set . G4cc3) (bitwise-copy-bit-field . G4cc2) (bitwise-copy-bit . G4cc1) (bitwise-bit-set? . G4cc0) (bitwise-bit-field . G4cbf) (bitwise-bit-count . G4cbe) (bitwise-xor . G4cbd) (bitwise-ior . G4cbc) (bitwise-and . G4cbb) (bitwise-not . G4cba) (bitwise-arithmetic-shift-right . G4cb9) (bitwise-arithmetic-shift-left . G4cb8) (bitwise-arithmetic-shift . G4cb7) (zero? . G4cb6) (vector? . G4cb5) (vector-set! . G4cb4) (vector-ref . G4cb3) (vector-map . G4cb2) (vector-length . G4cb1) (vector-for-each . G4cb0) (vector-fill! . G4caf) (vector->list . G4cae) (vector . G4cad) (values . G4cac) (truncate . G4cab) (tan . G4caa) (symbol? . G4ca9) (symbol=? . G4ca8) (symbol->string . G4ca7) (substring . G4ca6) (string? . G4ca5) (string>? . G4ca4) (string>=? . G4ca3) (string=? . G4ca2) (string<? . G4ca1) (string<=? . G4ca0) (string-ref . G4c9f) (string-length . G4c9e) (string-for-each . G4c9d) (string-copy . G4c9c) (string-append . G4c9b) (string->symbol . G4c9a) (string->number . G4c99) (string->list . G4c98) (string . G4c97) (sqrt . G4c96) (sin . G4c95) (round . G4c94) (reverse . G4c93) (real? . G4c92) (real-valued? . G4c91) (real-part . G4c90) (rationalize . G4c8f) (rational? . G4c8e) (rational-valued? . G4c8d) (procedure? . G4c8c) (positive? . G4c8b) (pair? . G4c8a) (odd? . G4c89) (numerator . G4c88) (number? . G4c87) (number->string . G4c86) (null? . G4c85) (not . G4c84) (negative? . G4c83) (nan? . G4c82) (min . G4c81) (max . G4c80) (map . G4c7f) (make-vector . G4c7e) (make-string . G4c7d) (make-rectangular . G4c7c) (make-polar . G4c7b) (magnitude . G4c7a) (log . G4c79) (list? . G4c78) (list-tail . G4c77) (list-ref . G4c76) (list->vector . G4c75) (list->string . G4c74) (list . G4c73) (length . G4c72) (lcm . G4c71) (integer? . G4c70) (integer-valued? . G4c6f) (integer->char . G4c6e) (infinite? . G4c6d) (inexact? . G4c6c) (inexact . G4c6b) (imag-part . G4c6a) (gcd . G4c69) (for-each . G4c68) (floor . G4c67) (finite? . G4c66) (expt . G4c65) (exp . G4c64) (exact? . G4c63) (exact-integer-sqrt . G4c62) (exact . G4c61) (even? . G4c60) (error . G4c5f) (eqv? . G4c5e) (equal? . G4c5d) (eq? . G4c5c) (dynamic-wind . G4c5b) (div0-and-mod0 . G4c5a) (mod0 . G4c59) (div0 . G4c58) (div-and-mod . G4c57) (mod . G4c56) (div . G4c55) (denominator . G4c54) (cos . G4c53) (cons . G4c52) (complex? . G4c51) (char? . G4c50) (char>? . G4c4f) (char>=? . G4c4e) (char=? . G4c4d) (char<? . G4c4c) (char<=? . G4c4b) (char->integer . G4c4a) (ceiling . G4c49) (call-with-values . G4c48) (call/cc . G4c47) (call-with-current-continuation . G4c46) (cddddr . G4c45) (cdddar . G4c44) (cddadr . G4c43) (cddaar . G4c42) (cdaddr . G4c41) (cdadar . G4c40) (cdaadr . G4c3f) (cdaaar . G4c3e) (cadddr . G4c3d) (caddar . G4c3c) (cadadr . G4c3b) (cadaar . G4c3a) (caaddr . G4c39) (caadar . G4c38) (caaadr . G4c37) (caaaar . G4c36) (cdddr . G4c35) (cddar . G4c34) (cdadr . G4c33) (cdaar . G4c32) (caddr . G4c31) (cadar . G4c30) (caadr . G4c2f) (caaar . G4c2e) (cddr . G4c2d) (cdar . G4c2c) (cadr . G4c2b) (caar . G4c2a) (cdr . G4c29) (car . G4c28) (boolean? . G4c27) (boolean=? . G4c26) (atan . G4c25) (assertion-violation . G4c24) (asin . G4c23) (apply . G4c22) (append . G4c21) (angle . G4c20) (acos . G4c1f) (abs . G4c1e) (/ . G4c1d) (* . G4c1c) (- . G4c1b) (+ . G4c1a) (>= . G4c19) (> . G4c18) (= . G4c17) (<= . G4c16) (< . G4c15) (library . G4c14) (&no-nans . G4c13) (&no-infinities . G4c12) (&i/o-encoding . G4c11) (&i/o-decoding . G4c10) (&i/o-port . G4c0f) (&i/o-file-does-not-exist . G4c0e) (&i/o-file-already-exists . G4c0d) (&i/o-file-is-read-only . G4c0c) (&i/o-file-protection . G4c0b) (&i/o-filename . G4c0a) (&i/o-invalid-position . G4c09) (&i/o-write . G4c08) (&i/o-read . G4c07) (&i/o . G4c06) (&undefined . G4c05) (&syntax . G4c04) (&lexical . G4c03) (&implementation-restriction . G4c02) (&non-continuable . G4c01) (&who . G4c00) (&irritants . G4bff) (&assertion . G4bfe) (&violation . G4bfd) (&error . G4bfc) (&serious . G4bfb) (&warning . G4bfa) (&message . G4bf9) (&condition . G4bf8) (define-condition-type . G4bf7) (define-enumeration . G4bf6) (define-record-type . G4bf5) (parent-rtd . G4bf4) (nongenerative . G4bf3) (opaque . G4bf2) (sealed . G4bf1) (protocol . G4bf0) (parent . G4bef) (immutable . G4bee) (mutable . G4bed) (fields . G4bec) (error-handling-mode . G4beb) (file-options . G4bea) (buffer-mode . G4be9) (eol-style . G4be8) (guard . G4be7) (trace-define . G4be6) (trace-lambda . G4be5) (unsyntax-splicing . G4be4) (unsyntax . G4be3) (unquote-splicing . G4be2) (unquote . G4be1) (_ . G4be0) (else . G4bdf) (=> . G4bde) (... . G4bdd) (assert . G4bdc) (endianness . G4bdb) (delay . G4bda) (time . G4bd9) (do . G4bd8) (cond . G4bd7) (let* . G4bd6) (let . G4bd5) (let*-values . G4bd4) (let-values . G4bd3) (identifier-syntax . G4bd2) (with-syntax . G4bd1) (quasisyntax . G4bd0) (quasiquote . G4bcf) (syntax-rules . G4bce) (include . G4bcd) (define-struct . G4bcc) (record-constructor-descriptor . G4bcb) (record-type-descriptor . G4bca) (case . G4bc9) (parameterize . G4bc8) (unless . G4bc7) (when . G4bc6) (or . G4bc5) (and . G4bc4) (if . G4bc3) (letrec* . G4bc2) (letrec . G4bc1) (type-descriptor . G4bc0) (case-lambda . G4bbf) (lambda . G4bbe) (syntax . G4bbd) (syntax-case . G4bbc) (quote . G4bbb) (foreign-call . G4bba) (letrec-syntax . G4bb9) (let-syntax . G4bb8) (set! . G4bb7) (import . G4bb6) (begin . G4bb5) (module . G4bb4) (define-syntax . G4bb3) (define . G4bb2)) '((G49e5 core-prim . &no-nans-rcd) (G49e3 core-prim . &no-nans-rtd) (G49d0 core-prim . &no-infinities-rcd) (G49ce core-prim . &no-infinities-rtd) (G49bb core-prim . &i/o-encoding-rcd) (G49b9 core-prim . &i/o-encoding-rtd) (G49a1 core-prim . &i/o-decoding-rcd) (G499f core-prim . &i/o-decoding-rtd) (G498c core-prim . &i/o-port-rcd) (G498a core-prim . &i/o-port-rtd) (G4972 core-prim . &i/o-file-does-not-exist-rcd) (G4970 core-prim . &i/o-file-does-not-exist-rtd) (G495d core-prim . &i/o-file-already-exists-rcd) (G495b core-prim . &i/o-file-already-exists-rtd) (G4948 core-prim . &i/o-file-is-read-only-rcd) (G4946 core-prim . &i/o-file-is-read-only-rtd) (G4933 core-prim . &i/o-file-protection-rcd) (G4931 core-prim . &i/o-file-protection-rtd) (G491e core-prim . &i/o-filename-rcd) (G491c core-prim . &i/o-filename-rtd) (G4904 core-prim . &i/o-invalid-position-rcd) (G4902 core-prim . &i/o-invalid-position-rtd) (G48ea core-prim . &i/o-write-rcd) (G48e8 core-prim . &i/o-write-rtd) (G48d5 core-prim . &i/o-read-rcd) (G48d3 core-prim . &i/o-read-rtd) (G48c0 core-prim . &i/o-rcd) (G48be core-prim . &i/o-rtd) (G48ab core-prim . &undefined-rcd) (G48a9 core-prim . &undefined-rtd) (G4896 core-prim . &syntax-rcd) (G4894 core-prim . &syntax-rtd) (G4877 core-prim . &lexical-rcd) (G4875 core-prim . &lexical-rtd) (G4862 core-prim . &implementation-restriction-rcd) (G4860 core-prim . &implementation-restriction-rtd) (G484d core-prim . &non-continuable-rcd) (G484b core-prim . &non-continuable-rtd) (G4838 core-prim . &who-rcd) (G4836 core-prim . &who-rtd) (G481e core-prim . &irritants-rcd) (G481c core-prim . &irritants-rtd) (G4804 core-prim . &assertion-rcd) (G4802 core-prim . &assertion-rtd) (G47ef core-prim . &violation-rcd) (G47ed core-prim . &violation-rtd) (G47da core-prim . &error-rcd) (G47d8 core-prim . &error-rtd) (G47c5 core-prim . &serious-rcd) (G47c3 core-prim . &serious-rtd) (G47b0 core-prim . &warning-rcd) (G47ae core-prim . &warning-rtd) (G479b core-prim . &message-rcd) (G4799 core-prim . &message-rtd) (G4740 core-prim . &condition-rcd) (G473e core-prim . &condition-rtd) (G2e37 core-prim . syntax-error) (G2d50 core-prim . syntax-dispatch) (G4e93 core-prim . pretty-print) (G4e92 core-prim . eval-core) (G4e91 core-prim . set-symbol-value!) (G4e90 core-prim . symbol-value) (G4e8f core-prim . gensym) (G4e8e core-prim . void) (G4aec core-prim . load) (G2e47 core-prim . interaction-environment) (G4e8d core-prim . char-ready?) (G4e8c core-prim . regexp?) (G4e8b core-prim . read-line) (G4e8a core-prim . dotted-list?) (G4e89 core-prim . circular-list?) (G4e88 core-prim . proper-list?) (G4e87 core-prim . circular-list) (G4e86 core-prim . last) (G4e85 core-prim . last-pair) (G4e84 core-prim . not-pair?) (G4e83 core-prim . split-at!) (G4e82 core-prim . split-at) (G4e81 core-prim . list=) (G4e80 core-prim . list-copy) (G4e7f core-prim . list-tabulate) (G4e7e core-prim . make-list) (G4e7d core-prim . xcons) (G4e7c core-prim . tenth) (G4e7b core-prim . ninth) (G4e7a core-prim . eighth) (G4e79 core-prim . seventh) (G4e78 core-prim . sixth) (G4e77 core-prim . fifth) (G4e76 core-prim . drop-right!) (G4e75 core-prim . drop-right) (G4e74 core-prim . take-right) (G4e73 core-prim . take!) (G4e72 core-prim . drop) (G4e71 core-prim . take) (G4e70 core-prim . car+cdr) (G4e6f core-prim . fourth) (G4e6e core-prim . third) (G4e6d core-prim . second) (G4e6c core-prim . first) (G4e6b core-prim . iota) (G4e6a core-prim . every) (G4e69 core-prim . ungensym) (G4e68 core-prim . alist->eq-hash-table) (G4e67 core-prim . assoc-ref) (G4e66 core-prim . alist-cons) (G4e65 core-prim . append-map) (G4e64 core-prim . print) (G4e63 core-prim . format) (G4e62 core-prim . host-os) (G280a core-prim . library-path) (G4e61 core-prim . standard-library-path) (G4e60 core-prim . file-newer?) (G4e5f core-prim . stat-mtime) (G4e5e core-prim . write-to-file) (G4e5d core-prim . file->list) (G4e5c core-prim . file->string) (G4e5b core-prim . digit->integer) (G4e5a core-prim . call-with-string-input-port) (G4e59 core-prim . call-with-string-io) (G4e58 core-prim . string-split) (G4e57 core-prim . bytevector-for-each) (G4e56 core-prim . string->regexp) (G4e55 core-prim . rxmatch) (G4e54 core-prim . regexp-replace-all) (G4e53 core-prim . hashtable-for-each) (G4e52 core-prim . call-process) (G4e51 core-prim . local-tz-offset) (G4e50 core-prim . microseconds) (G4e4f core-prim . readdir) (G4e4e core-prim . set-current-directory!) (G4e4d core-prim . expand-path) (G4e4c core-prim . current-directory) (G4e4b core-prim . %spawn) (G4e4a core-prim . %waitpid) (G4e49 core-prim . %ffi-supported?) (G4e48 core-prim . %ffi-pointer-ref) (G4e47 core-prim . %ffi-pointer->string) (G4e46 core-prim . %ffi-call->string-or-zero) (G4e45 core-prim . %ffi-call->double) (G4e44 core-prim . %ffi-call->void*) (G4e43 core-prim . %ffi-call->void) (G4e42 core-prim . %ffi-call->int) (G4e41 core-prim . %ffi-lookup) (G4e40 core-prim . %ffi-open) (G4e3f core-prim . %fork) (G4e3e core-prim . %pipe) (G4e3d core-prim . p) (G4e3c core-prim . get-environment-variables) (G4e3b core-prim . get-environment-variable) (G4e3a core-prim . get-timeofday) (G4e39 core-prim . get-command-line) (G4e38 core-prim . sys-display) (G4e37 core-prim . source-info) (G4e36 core-prim . make-compiler-instruction) (G4e35 core-prim . make-instruction) (G4e34 core-prim . set-source-info!) (G4e33 core-prim . bignum?) (G4e32 core-prim . fast-equal?) (G4e31 core-prim . fasl-read) (G4e30 core-prim . fasl-write) (G2641 core-prim . make-parameter) (G4e2f core-prim . string-upcase) (G4e2e core-prim . string-titlecase) (G4e2d core-prim . string-normalize-nfkd) (G4e2c core-prim . string-normalize-nfkc) (G4e2b core-prim . string-normalize-nfd) (G4e2a core-prim . string-normalize-nfc) (G4e29 core-prim . string-foldcase) (G4e28 core-prim . string-downcase) (G4e27 core-prim . string-ci>?) (G4e26 core-prim . string-ci>=?) (G4e25 core-prim . string-ci=?) (G4e24 core-prim . string-ci<?) (G4e23 core-prim . string-ci<=?) (G4e22 core-prim . char-whitespace?) (G4e21 core-prim . char-upper-case?) (G4e20 core-prim . char-title-case?) (G4e1f core-prim . char-numeric?) (G4e1e core-prim . char-lower-case?) (G4e1d core-prim . char-general-category) (G4e1c core-prim . char-upcase) (G4e1b core-prim . char-titlecase) (G4e1a core-prim . char-foldcase) (G4e19 core-prim . char-downcase) (G4e18 core-prim . char-ci>?) (G4e17 core-prim . char-ci>=?) (G4e16 core-prim . char-ci=?) (G4e15 core-prim . char-ci<?) (G4e14 core-prim . char-ci<=?) (G4e13 core-prim . char-alphabetic?) (G2b97 core-prim . make-variable-transformer) (G2e3d core-prim . identifier?) (G2e29 core-prim . generate-temporaries) (G2e2b core-prim . free-identifier=?) (G2e41 core-prim . syntax->datum) (G2e3f core-prim . datum->syntax) (G2e2d core-prim . bound-identifier=?) (G4e12 core-prim . record-type-descriptor?) (G4e11 core-prim . record-predicate) (G4e10 core-prim . record-mutator) (G4e0f core-prim . record-constructor) (G4e0e core-prim . record-accessor) (G4e0d core-prim . make-record-type-descriptor) (G4e0c core-prim . make-record-constructor-descriptor) (G4e0b core-prim . record?) (G4e0a core-prim . record-type-uid) (G4e09 core-prim . record-type-sealed?) (G4e08 core-prim . record-type-parent) (G4e07 core-prim . record-type-opaque?) (G4e06 core-prim . record-type-name) (G4e05 core-prim . record-type-generative?) (G4e04 core-prim . record-type-field-names) (G4e03 core-prim . record-rtd) (G4e02 core-prim . record-field-mutable?) (G4e01 core-prim . delete-file) (G4e00 core-prim . file-exists?) (G4dff core-prim . vector-sort!) (G4dfe core-prim . vector-sort) (G4dfd core-prim . list-sort) (G4dfc core-prim . symbol-hash) (G4dfb core-prim . string-ci-hash) (G4dfa core-prim . string-hash) (G4df9 core-prim . equal-hash) (G4df8 core-prim . hashtable-equivalence-function) (G4df7 core-prim . make-hashtable) (G4df6 core-prim . hashtable-hash-function) (G4df5 core-prim . make-eqv-hashtable) (G4df4 core-prim . make-eq-hashtable) (G4df3 core-prim . hashtable?) (G4df2 core-prim . hashtable-update!) (G4df1 core-prim . hashtable-size) (G4df0 core-prim . hashtable-set!) (G4def core-prim . hashtable-ref) (G4dee core-prim . hashtable-mutable?) (G4ded core-prim . hashtable-keys) (G4dec core-prim . hashtable-entries) (G4deb core-prim . hashtable-delete!) (G4dea core-prim . hashtable-copy) (G4de9 core-prim . hashtable-contains?) (G4de8 core-prim . hashtable-clear!) (G4de7 core-prim . call-with-output-file) (G4de6 core-prim . call-with-input-file) (G4de5 core-prim . write-char) (G4de4 core-prim . write) (G4de3 core-prim . with-output-to-file) (G4de2 core-prim . with-input-from-file) (G4de1 core-prim . read-char) (G4de0 core-prim . read) (G4ddf core-prim . peek-char) (G4dde core-prim . open-output-file) (G4ddd core-prim . open-input-file) (G4ddc core-prim . newline) (G4ddb core-prim . display) (G4dda core-prim . close-output-port) (G4dd9 core-prim . close-input-port) (G4dd8 core-prim . eof-object?) (G4dd7 core-prim . eof-object) (G4dd6 core-prim . current-error-port) (G4dd5 core-prim . current-output-port) (G4dd4 core-prim . current-input-port) (G4dd3 core-prim . output-port?) (G4dd2 core-prim . input-port?) (G4dd1 core-prim . utf-8-codec) (G4dd0 core-prim . utf-16-codec) (G4dcf core-prim . transcoder-error-handling-mode) (G4dce core-prim . transcoder-eol-style) (G4dcd core-prim . transcoder-codec) (G4dcc core-prim . transcoded-port) (G4dcb core-prim . textual-port?) (G4dca core-prim . string->bytevector) (G4dc9 core-prim . standard-output-port) (G4dc8 core-prim . standard-input-port) (G4dc7 core-prim . standard-error-port) (G4dc6 core-prim . set-port-position!) (G4dc5 core-prim . put-u8) (G4dc4 core-prim . put-string) (G4dc3 core-prim . put-datum) (G4dc2 core-prim . put-char) (G4dc1 core-prim . put-bytevector) (G4dc0 core-prim . port?) (G4dbf core-prim . port-transcoder) (G4dbe core-prim . port-position) (G4dbd core-prim . port-has-set-port-position!?) (G4dbc core-prim . port-has-port-position?) (G4dbb core-prim . port-eof?) (G4dba core-prim . output-port-buffer-mode) (G4db9 core-prim . open-string-output-port) (G4db8 core-prim . open-string-input-port) (G4db7 core-prim . open-file-output-port) (G4db6 core-prim . open-file-input/output-port) (G4db5 core-prim . open-file-input-port) (G4db4 core-prim . open-bytevector-output-port) (G4db3 core-prim . open-bytevector-input-port) (G4db2 core-prim . native-transcoder) (G4db1 core-prim . native-eol-style) (G4db0 core-prim . make-transcoder) (G4daf core-prim . latin-1-codec) (G48e4 core-prim . make-i/o-write-error) (G48cf core-prim . make-i/o-read-error) (G4982 core-prim . make-i/o-port-error) (G48fa core-prim . make-i/o-invalid-position-error) (G4914 core-prim . make-i/o-filename-error) (G492d core-prim . make-i/o-file-protection-error) (G4942 core-prim . make-i/o-file-is-read-only-error) (G496c core-prim . make-i/o-file-does-not-exist-error) (G4957 core-prim . make-i/o-file-already-exists-error) (G48ba core-prim . make-i/o-error) (G49b1 core-prim . make-i/o-encoding-error) (G499b core-prim . make-i/o-decoding-error) (G4dae core-prim . make-custom-textual-output-port) (G4dad core-prim . make-custom-textual-input/output-port) (G4dac core-prim . make-custom-textual-input-port) (G4dab core-prim . make-custom-binary-output-port) (G4daa core-prim . make-custom-binary-input/output-port) (G4da9 core-prim . make-custom-binary-input-port) (G4da8 core-prim . make-bytevector) (G4da7 core-prim . lookahead-u8) (G4da6 core-prim . lookahead-char) (G48e6 core-prim . i/o-write-error?) (G48d1 core-prim . i/o-read-error?) (G4986 core-prim . i/o-port-error?) (G48fe core-prim . i/o-invalid-position-error?) (G4918 core-prim . i/o-filename-error?) (G492f core-prim . i/o-file-protection-error?) (G4944 core-prim . i/o-file-is-read-only-error?) (G496e core-prim . i/o-file-does-not-exist-error?) (G4959 core-prim . i/o-file-already-exists-error?) (G48bc core-prim . i/o-error?) (G4900 core-prim . i/o-error-position) (G4988 core-prim . i/o-error-port) (G491a core-prim . i/o-error-filename) (G49b5 core-prim . i/o-encoding-error?) (G49b7 core-prim . i/o-encoding-error-char) (G499d core-prim . i/o-decoding-error?) (G4da5 core-prim . get-u8) (G4da4 core-prim . get-string-n!) (G4da3 core-prim . get-string-n) (G4da2 core-prim . get-string-all) (G4da1 core-prim . get-line) (G4da0 core-prim . get-datum) (G4d9f core-prim . get-char) (G4d9e core-prim . get-bytevector-some) (G4d9d core-prim . get-bytevector-n!) (G4d9c core-prim . get-bytevector-n) (G4d9b core-prim . get-bytevector-all) (G4d9a core-prim . flush-output-port) (G4d99 core-prim . close-port) (G2e17 core-prim . scheme-report-environment) (G4d98 core-prim . quotient) (G2e15 core-prim . null-environment) (G4d97 core-prim . remainder) (G4d96 core-prim . modulo) (G4d95 core-prim . inexact->exact) (G4d94 core-prim . force) (G4d93 core-prim . exact->inexact) (G4d92 core-prim . make-promise) (G4d91 core-prim . exit) (G4ae6 core-prim . command-line) (G4d90 core-prim . string-fill!) (G4d8f core-prim . string-set!) (G4d8e core-prim . set-cdr!) (G4d8d core-prim . set-car!) (G4d8c core-prim . remove) (G4d8b core-prim . remv) (G4d8a core-prim . remp) (G4d89 core-prim . remq) (G4d88 core-prim . partition) (G4d87 core-prim . memv) (G4d86 core-prim . memq) (G4d85 core-prim . memp) (G4d84 core-prim . member) (G4d83 core-prim . exists) (G4d82 core-prim . for-all) (G4d81 core-prim . fold-right) (G4d80 core-prim . fold-left) (G4d7f core-prim . find) (G4d7e core-prim . filter) (G4d7d core-prim . cons*) (G4d7c core-prim . assv) (G4d7b core-prim . assq) (G4d7a core-prim . assp) (G4d79 core-prim . assoc) (G4d78 core-prim . call-with-string-output-port) (G4d77 core-prim . call-with-port) (G4d76 core-prim . call-with-bytevector-output-port) (G4d75 core-prim . bytevector->string) (G4d74 core-prim . buffer-mode?) (G4d73 core-prim . binary-port?) (G4d72 core-prim . with-exception-handler) (G4d71 core-prim . raise-continuable) (G4d70 core-prim . raise) (G2e1b core-prim . eval) (G2e13 core-prim . environment) (G4d6f core-prim . make-enumeration) (G4d6e core-prim . enum-set=?) (G4d6d core-prim . enum-set-universe) (G4d6c core-prim . enum-set-union) (G4d6b core-prim . enum-set-subset?) (G4d6a core-prim . enum-set-projection) (G4d69 core-prim . enum-set-member?) (G4d68 core-prim . enum-set-intersection) (G4d67 core-prim . enum-set-indexer) (G4d66 core-prim . enum-set-difference) (G4d65 core-prim . enum-set-constructor) (G4d64 core-prim . enum-set-complement) (G4d63 core-prim . enum-set->list) (G4832 core-prim . who-condition?) (G47ac core-prim . warning?) (G47eb core-prim . violation?) (G48a7 core-prim . undefined-violation?) (G488e core-prim . syntax-violation?) (G4892 core-prim . syntax-violation-subform) (G4890 core-prim . syntax-violation-form) (G2e3b core-prim . syntax-violation) (G4d62 core-prim . simple-conditions) (G47c1 core-prim . serious-condition?) (G4849 core-prim . non-continuable-violation?) (G4795 core-prim . message-condition?) (G482e core-prim . make-who-condition) (G47aa core-prim . make-warning) (G47e9 core-prim . make-violation) (G48a5 core-prim . make-undefined-violation) (G4888 core-prim . make-syntax-violation) (G47bf core-prim . make-serious-condition) (G4847 core-prim . make-non-continuable-violation) (G4791 core-prim . make-message-condition) (G4871 core-prim . make-lexical-violation) (G4814 core-prim . make-irritants-condition) (G485c core-prim . make-implementation-restriction-violation) (G47d4 core-prim . make-error) (G47fe core-prim . make-assertion-violation) (G4873 core-prim . lexical-violation?) (G4818 core-prim . irritants-condition?) (G485e core-prim . implementation-restriction-violation?) (G47d6 core-prim . error?) (G4834 core-prim . condition-who) (G4d61 core-prim . condition-predicate) (G4797 core-prim . condition-message) (G481a core-prim . condition-irritants) (G4d60 core-prim . condition-accessor) (G4d5f core-prim . condition) (G4800 core-prim . assertion-violation?) (G4d5e core-prim . condition?) (G4d5d core-prim . utf32->string) (G4d5c core-prim . utf16->string) (G4d5b core-prim . utf8->string) (G4d5a core-prim . uint-list->bytevector) (G4d59 core-prim . u8-list->bytevector) (G4d58 core-prim . string->utf8) (G4d57 core-prim . string->utf32) (G4d56 core-prim . string->utf16) (G4d55 core-prim . sint-list->bytevector) (G4d54 core-prim . native-endianness) (G4d53 core-prim . bytevector?) (G4d52 core-prim . bytevector=?) (G4d51 core-prim . bytevector-uint-set!) (G4d50 core-prim . bytevector-uint-ref) (G4d4f core-prim . bytevector-u8-set!) (G4d4e core-prim . bytevector-u8-ref) (G4d4d core-prim . bytevector-u64-set!) (G4d4c core-prim . bytevector-u64-ref) (G4d4b core-prim . bytevector-u64-native-set!) (G4d4a core-prim . bytevector-u64-native-ref) (G4d49 core-prim . bytevector-u32-set!) (G4d48 core-prim . bytevector-u32-ref) (G4d47 core-prim . bytevector-u32-native-set!) (G4d46 core-prim . bytevector-u32-native-ref) (G4d45 core-prim . bytevector-u16-set!) (G4d44 core-prim . bytevector-u16-ref) (G4d43 core-prim . bytevector-u16-native-set!) (G4d42 core-prim . bytevector-u16-native-ref) (G4d41 core-prim . bytevector-sint-set!) (G4d40 core-prim . bytevector-sint-ref) (G4d3f core-prim . bytevector-s8-set!) (G4d3e core-prim . bytevector-s8-ref) (G4d3d core-prim . bytevector-s64-set!) (G4d3c core-prim . bytevector-s64-ref) (G4d3b core-prim . bytevector-s64-native-set!) (G4d3a core-prim . bytevector-s64-native-ref) (G4d39 core-prim . bytevector-s32-set!) (G4d38 core-prim . bytevector-s32-ref) (G4d37 core-prim . bytevector-s32-native-set!) (G4d36 core-prim . bytevector-s32-native-ref) (G4d35 core-prim . bytevector-s16-set!) (G4d34 core-prim . bytevector-s16-ref) (G4d33 core-prim . bytevector-s16-native-set!) (G4d32 core-prim . bytevector-s16-native-ref) (G4d31 core-prim . bytevector-length) (G4d30 core-prim . bytevector-ieee-single-ref) (G4d2f core-prim . bytevector-ieee-single-set!) (G4d2e core-prim . bytevector-ieee-single-native-set!) (G4d2d core-prim . bytevector-ieee-single-native-ref) (G4d2c core-prim . bytevector-ieee-double-set!) (G4d2b core-prim . bytevector-ieee-double-ref) (G4d2a core-prim . bytevector-ieee-double-native-set!) (G4d29 core-prim . bytevector-ieee-double-native-ref) (G4d28 core-prim . bytevector-fill!) (G4d27 core-prim . bytevector-copy!) (G4d26 core-prim . bytevector-copy) (G4d25 core-prim . bytevector->uint-list) (G4d24 core-prim . bytevector->u8-list) (G4d23 core-prim . bytevector->sint-list) (G49e1 core-prim . no-nans-violation?) (G49cc core-prim . no-infinities-violation?) (G49df core-prim . make-no-nans-violation) (G49ca core-prim . make-no-infinities-violation) (G4d22 core-prim . real->flonum) (G4d21 core-prim . flzero?) (G4d20 core-prim . fltruncate) (G4d1f core-prim . fltan) (G4d1e core-prim . flsqrt) (G4d1d core-prim . flsin) (G4d1c core-prim . flround) (G4d1b core-prim . flpositive?) (G4d1a core-prim . flonum?) (G4d19 core-prim . flodd?) (G4d18 core-prim . flnumerator) (G4d17 core-prim . flnegative?) (G4d16 core-prim . flnan?) (G4d15 core-prim . flmod0) (G4d14 core-prim . flmod) (G4d13 core-prim . flmin) (G4d12 core-prim . flmax) (G4d11 core-prim . fllog) (G4d10 core-prim . flinteger?) (G4d0f core-prim . flinfinite?) (G4d0e core-prim . flfloor) (G4d0d core-prim . flfinite?) (G4d0c core-prim . flexpt) (G4d0b core-prim . flexp) (G4d0a core-prim . fleven?) (G4d09 core-prim . fldiv0-and-mod0) (G4d08 core-prim . fldiv0) (G4d07 core-prim . fldiv-and-mod) (G4d06 core-prim . fldiv) (G4d05 core-prim . fldenominator) (G4d04 core-prim . flcos) (G4d03 core-prim . flceiling) (G4d02 core-prim . flatan) (G4d01 core-prim . flasin) (G4d00 core-prim . flacos) (G4cff core-prim . flabs) (G4cfe core-prim . fl>?) (G4cfd core-prim . fl>=?) (G4cfc core-prim . fl=?) (G4cfb core-prim . fl<?) (G4cfa core-prim . fl<=?) (G4cf9 core-prim . fl/) (G4cf8 core-prim . fl-) (G4cf7 core-prim . fl+) (G4cf6 core-prim . fl*) (G4cf5 core-prim . fixnum->flonum) (G4cf4 core-prim . fxzero?) (G4cf3 core-prim . fxxor) (G4cf2 core-prim . fxrotate-bit-field) (G4cf1 core-prim . fxreverse-bit-field) (G4cf0 core-prim . fxpositive?) (G4cef core-prim . fxodd?) (G4cee core-prim . fxnot) (G4ced core-prim . fxnegative?) (G4cec core-prim . fxmod0) (G4ceb core-prim . fxmod) (G4cea core-prim . fxmin) (G4ce9 core-prim . fxmax) (G4ce8 core-prim . fxlength) (G4ce7 core-prim . fxior) (G4ce6 core-prim . fxif) (G4ce5 core-prim . fxfirst-bit-set) (G4ce4 core-prim . fxeven?) (G4ce3 core-prim . fxdiv0-and-mod0) (G4ce2 core-prim . fxdiv0) (G4ce1 core-prim . fxdiv-and-mod) (G4ce0 core-prim . fxdiv) (G4cdf core-prim . fxcopy-bit-field) (G4cde core-prim . fxcopy-bit) (G4cdd core-prim . fxbit-set?) (G4cdc core-prim . fxbit-field) (G4cdb core-prim . fxbit-count) (G4cda core-prim . fxarithmetic-shift-right) (G4cd9 core-prim . fxarithmetic-shift-left) (G4cd8 core-prim . fxarithmetic-shift) (G4cd7 core-prim . fxand) (G4cd6 core-prim . fx>?) (G4cd5 core-prim . fx>=?) (G4cd4 core-prim . fx=?) (G4cd3 core-prim . fx<?) (G4cd2 core-prim . fx<=?) (G4cd1 core-prim . fx-/carry) (G4cd0 core-prim . fx-) (G4ccf core-prim . fx+/carry) (G4cce core-prim . fx+) (G4ccd core-prim . fx*/carry) (G4ccc core-prim . fx*) (G4ccb core-prim . greatest-fixnum) (G4cca core-prim . least-fixnum) (G4cc9 core-prim . fixnum-width) (G4cc8 core-prim . fixnum?) (G4cc7 core-prim . bitwise-rotate-bit-field) (G4cc6 core-prim . bitwise-reverse-bit-field) (G4cc5 core-prim . bitwise-length) (G4cc4 core-prim . bitwise-if) (G4cc3 core-prim . bitwise-first-bit-set) (G4cc2 core-prim . bitwise-copy-bit-field) (G4cc1 core-prim . bitwise-copy-bit) (G4cc0 core-prim . bitwise-bit-set?) (G4cbf core-prim . bitwise-bit-field) (G4cbe core-prim . bitwise-bit-count) (G4cbd core-prim . bitwise-xor) (G4cbc core-prim . bitwise-ior) (G4cbb core-prim . bitwise-and) (G4cba core-prim . bitwise-not) (G4cb9 core-prim . bitwise-arithmetic-shift-right) (G4cb8 core-prim . bitwise-arithmetic-shift-left) (G4cb7 core-prim . bitwise-arithmetic-shift) (G4cb6 core-prim . zero?) (G4cb5 core-prim . vector?) (G4cb4 core-prim . vector-set!) (G4cb3 core-prim . vector-ref) (G4cb2 core-prim . vector-map) (G4cb1 core-prim . vector-length) (G4cb0 core-prim . vector-for-each) (G4caf core-prim . vector-fill!) (G4cae core-prim . vector->list) (G4cad core-prim . vector) (G4cac core-prim . values) (G4cab core-prim . truncate) (G4caa core-prim . tan) (G4ca9 core-prim . symbol?) (G4ca8 core-prim . symbol=?) (G4ca7 core-prim . symbol->string) (G4ca6 core-prim . substring) (G4ca5 core-prim . string?) (G4ca4 core-prim . string>?) (G4ca3 core-prim . string>=?) (G4ca2 core-prim . string=?) (G4ca1 core-prim . string<?) (G4ca0 core-prim . string<=?) (G4c9f core-prim . string-ref) (G4c9e core-prim . string-length) (G4c9d core-prim . string-for-each) (G4c9c core-prim . string-copy) (G4c9b core-prim . string-append) (G4c9a core-prim . string->symbol) (G4c99 core-prim . string->number) (G4c98 core-prim . string->list) (G4c97 core-prim . string) (G4c96 core-prim . sqrt) (G4c95 core-prim . sin) (G4c94 core-prim . round) (G4c93 core-prim . reverse) (G4c92 core-prim . real?) (G4c91 core-prim . real-valued?) (G4c90 core-prim . real-part) (G4c8f core-prim . rationalize) (G4c8e core-prim . rational?) (G4c8d core-prim . rational-valued?) (G4c8c core-prim . procedure?) (G4c8b core-prim . positive?) (G4c8a core-prim . pair?) (G4c89 core-prim . odd?) (G4c88 core-prim . numerator) (G4c87 core-prim . number?) (G4c86 core-prim . number->string) (G4c85 core-prim . null?) (G4c84 core-prim . not) (G4c83 core-prim . negative?) (G4c82 core-prim . nan?) (G4c81 core-prim . min) (G4c80 core-prim . max) (G4c7f core-prim . map) (G4c7e core-prim . make-vector) (G4c7d core-prim . make-string) (G4c7c core-prim . make-rectangular) (G4c7b core-prim . make-polar) (G4c7a core-prim . magnitude) (G4c79 core-prim . log) (G4c78 core-prim . list?) (G4c77 core-prim . list-tail) (G4c76 core-prim . list-ref) (G4c75 core-prim . list->vector) (G4c74 core-prim . list->string) (G4c73 core-prim . list) (G4c72 core-prim . length) (G4c71 core-prim . lcm) (G4c70 core-prim . integer?) (G4c6f core-prim . integer-valued?) (G4c6e core-prim . integer->char) (G4c6d core-prim . infinite?) (G4c6c core-prim . inexact?) (G4c6b core-prim . inexact) (G4c6a core-prim . imag-part) (G4c69 core-prim . gcd) (G4c68 core-prim . for-each) (G4c67 core-prim . floor) (G4c66 core-prim . finite?) (G4c65 core-prim . expt) (G4c64 core-prim . exp) (G4c63 core-prim . exact?) (G4c62 core-prim . exact-integer-sqrt) (G4c61 core-prim . exact) (G4c60 core-prim . even?) (G4c5f core-prim . error) (G4c5e core-prim . eqv?) (G4c5d core-prim . equal?) (G4c5c core-prim . eq?) (G4c5b core-prim . dynamic-wind) (G4c5a core-prim . div0-and-mod0) (G4c59 core-prim . mod0) (G4c58 core-prim . div0) (G4c57 core-prim . div-and-mod) (G4c56 core-prim . mod) (G4c55 core-prim . div) (G4c54 core-prim . denominator) (G4c53 core-prim . cos) (G4c52 core-prim . cons) (G4c51 core-prim . complex?) (G4c50 core-prim . char?) (G4c4f core-prim . char>?) (G4c4e core-prim . char>=?) (G4c4d core-prim . char=?) (G4c4c core-prim . char<?) (G4c4b core-prim . char<=?) (G4c4a core-prim . char->integer) (G4c49 core-prim . ceiling) (G4c48 core-prim . call-with-values) (G4c47 core-prim . call/cc) (G4c46 core-prim . call-with-current-continuation) (G4c45 core-prim . cddddr) (G4c44 core-prim . cdddar) (G4c43 core-prim . cddadr) (G4c42 core-prim . cddaar) (G4c41 core-prim . cdaddr) (G4c40 core-prim . cdadar) (G4c3f core-prim . cdaadr) (G4c3e core-prim . cdaaar) (G4c3d core-prim . cadddr) (G4c3c core-prim . caddar) (G4c3b core-prim . cadadr) (G4c3a core-prim . cadaar) (G4c39 core-prim . caaddr) (G4c38 core-prim . caadar) (G4c37 core-prim . caaadr) (G4c36 core-prim . caaaar) (G4c35 core-prim . cdddr) (G4c34 core-prim . cddar) (G4c33 core-prim . cdadr) (G4c32 core-prim . cdaar) (G4c31 core-prim . caddr) (G4c30 core-prim . cadar) (G4c2f core-prim . caadr) (G4c2e core-prim . caaar) (G4c2d core-prim . cddr) (G4c2c core-prim . cdar) (G4c2b core-prim . cadr) (G4c2a core-prim . caar) (G4c29 core-prim . cdr) (G4c28 core-prim . car) (G4c27 core-prim . boolean?) (G4c26 core-prim . boolean=?) (G4c25 core-prim . atan) (G4c24 core-prim . assertion-violation) (G4c23 core-prim . asin) (G4c22 core-prim . apply) (G4c21 core-prim . append) (G4c20 core-prim . angle) (G4c1f core-prim . acos) (G4c1e core-prim . abs) (G4c1d core-prim . /) (G4c1c core-prim . *) (G4c1b core-prim . -) (G4c1a core-prim . +) (G4c19 core-prim . >=) (G4c18 core-prim . >) (G4c17 core-prim . =) (G4c16 core-prim . <=) (G4c15 core-prim . <) (G4c14 core-prim . library) (G4c13 $core-rtd &no-nans-rtd &no-nans-rcd) (G4c12 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4c11 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4c10 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4c0f $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4c0e $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4c0d $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4c0c $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4c0b $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4c0a $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4c09 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4c08 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4c07 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4c06 $core-rtd &i/o-rtd &i/o-rcd) (G4c05 $core-rtd &undefined-rtd &undefined-rcd) (G4c04 $core-rtd &syntax-rtd &syntax-rcd) (G4c03 $core-rtd &lexical-rtd &lexical-rcd) (G4c02 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4c01 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4c00 $core-rtd &who-rtd &who-rcd) (G4bff $core-rtd &irritants-rtd &irritants-rcd) (G4bfe $core-rtd &assertion-rtd &assertion-rcd) (G4bfd $core-rtd &violation-rtd &violation-rcd) (G4bfc $core-rtd &error-rtd &error-rcd) (G4bfb $core-rtd &serious-rtd &serious-rcd) (G4bfa $core-rtd &warning-rtd &warning-rcd) (G4bf9 $core-rtd &message-rtd &message-rcd) (G4bf8 $core-rtd &condition-rtd &condition-rcd) (G4bf7 macro . define-condition-type) (G4bf6 macro . define-enumeration) (G4bf5 macro . define-record-type) (G4bf4 macro . parent-rtd) (G4bf3 macro . nongenerative) (G4bf2 macro . opaque) (G4bf1 macro . sealed) (G4bf0 macro . protocol) (G4bef macro . parent) (G4bee macro . immutable) (G4bed macro . mutable) (G4bec macro . fields) (G4beb macro . error-handling-mode) (G4bea macro . file-options) (G4be9 macro . buffer-mode) (G4be8 macro . eol-style) (G4be7 macro . guard) (G4be6 macro . trace-define) (G4be5 macro . trace-lambda) (G4be4 macro . unsyntax-splicing) (G4be3 macro . unsyntax) (G4be2 macro . unquote-splicing) (G4be1 macro . unquote) (G4be0 macro . _) (G4bdf macro . else) (G4bde macro . =>) (G4bdd macro . ...) (G4bdc macro . assert) (G4bdb macro . endianness) (G4bda macro . delay) (G4bd9 macro . time) (G4bd8 macro . do) (G4bd7 macro . cond) (G4bd6 macro . let*) (G4bd5 macro . let) (G4bd4 macro . let*-values) (G4bd3 macro . let-values) (G4bd2 macro . identifier-syntax) (G4bd1 macro . with-syntax) (G4bd0 macro . quasisyntax) (G4bcf macro . quasiquote) (G4bce macro . syntax-rules) (G4bcd macro . include) (G4bcc macro . define-struct) (G4bcb core-macro . record-constructor-descriptor) (G4bca core-macro . record-type-descriptor) (G4bc9 macro . case) (G4bc8 macro . parameterize) (G4bc7 macro . unless) (G4bc6 macro . when) (G4bc5 core-macro . or) (G4bc4 core-macro . and) (G4bc3 core-macro . if) (G4bc2 core-macro . letrec*) (G4bc1 core-macro . letrec) (G4bc0 core-macro . type-descriptor) (G4bbf core-macro . case-lambda) (G4bbe core-macro . lambda) (G4bbd core-macro . syntax) (G4bbc core-macro . syntax-case) (G4bbb core-macro . quote) (G4bba core-macro . foreign-call) (G4bb9 letrec-syntax) (G4bb8 let-syntax) (G4bb7 set!) (G4bb6 import) (G4bb5 begin) (G4bb4 module) (G4bb3 define-syntax) (G4bb2 define)) values values '#f '#f '#f '#f) (G2986@G282b@install-library 'G4eb4 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G4e93) (eval-core . G4e92) (set-symbol-value! . G4e91) (symbol-value . G4e90) (gensym . G4e8f) (void . G4e8e)) '() values values '#f '#f '#f '#f) (G2986@G282b@install-library 'G4eb5 '(mosh) '() '() '() '() '((set-symbol-value! . G4e91) (symbol-value . G4e90) (read-line . G4e8b) (ungensym . G4e69) (alist->eq-hash-table . G4e68) (assoc-ref . G4e67) (print . G4e64) (format . G4e63) (host-os . G4e62) (library-path . G280a) (standard-library-path . G4e61) (file-newer? . G4e60) (stat-mtime . G4e5f) (write-to-file . G4e5e) (file->list . G4e5d) (file->string . G4e5c) (digit->integer . G4e5b) (call-with-string-input-port . G4e5a) (call-with-string-io . G4e59) (string-split . G4e58) (bytevector-for-each . G4e57) (string->regexp . G4e56) (rxmatch . G4e55) (regexp-replace-all . G4e54) (hashtable-for-each . G4e53) (readdir . G4e4f) (set-current-directory! . G4e4e) (expand-path . G4e4d) (current-directory . G4e4c) (p . G4e3d) (get-timeofday . G4e3a) (get-command-line . G4e39) (sys-display . G4e38) (source-info . G4e37) (make-compiler-instruction . G4e36) (make-instruction . G4e35) (set-source-info! . G4e34) (bignum? . G4e33) (fast-equal? . G4e32) (fasl-read . G4e31) (fasl-write . G4e30) (include . G4bcd)) '() values values '#f '#f '#f '#f) (G2986@G282b@install-library 'G4eb6 '(system) '() '() '() '() '((call-process . G4e52) (local-tz-offset . G4e51) (microseconds . G4e50) (expand-path . G4e4d) (%spawn . G4e4b) (%waitpid . G4e4a) (%ffi-supported? . G4e49) (%ffi-pointer-ref . G4e48) (%ffi-pointer->string . G4e47) (%ffi-call->string-or-zero . G4e46) (%ffi-call->double . G4e45) (%ffi-call->void* . G4e44) (%ffi-call->void . G4e43) (%ffi-call->int . G4e42) (%ffi-lookup . G4e41) (%ffi-open . G4e40) (%fork . G4e3f) (%pipe . G4e3e) (get-environment-variables . G4e3c) (get-environment-variable . G4e3b) (make-parameter . G2641) (parameterize . G4bc8)) '() values values '#f '#f '#f '#f) (G2986@G282b@install-library 'G4eb7 '(mosh srfi :1) '() '() '() '() '((dotted-list? . G4e8a) (circular-list? . G4e89) (proper-list? . G4e88) (circular-list . G4e87) (last . G4e86) (last-pair . G4e85) (not-pair? . G4e84) (split-at! . G4e83) (split-at . G4e82) (list= . G4e81) (list-copy . G4e80) (list-tabulate . G4e7f) (make-list . G4e7e) (xcons . G4e7d) (tenth . G4e7c) (ninth . G4e7b) (eighth . G4e7a) (seventh . G4e79) (sixth . G4e78) (fifth . G4e77) (drop-right! . G4e76) (drop-right . G4e75) (take-right . G4e74) (take! . G4e73) (drop . G4e72) (take . G4e71) (car+cdr . G4e70) (fourth . G4e6f) (third . G4e6e) (second . G4e6d) (first . G4e6c) (iota . G4e6b) (every . G4e6a) (alist-cons . G4e66) (append-map . G4e65)) '() values values '#f '#f '#f '#f))
((lambda (G4adb@add-library-path! G4add@parse-and-add-library-path G4adf@for-each-with-index G4ae1@conditioon-printer G4ae3@repl G4ae5@trace-printer G4ae7@command-line G4ae9@local-library-path G4aeb@load/args G4aed@load G4aef@ironscheme-build G4af1@eval-top-level G4af3@compile-system-libraries G4af5@compile G4af7@compile->closure G4af9@pre-compile-r6rs-file G4afb@load-r6rs-top-level) (begin (set! G4adb@add-library-path! (lambda (G4b16@path) (G2976@G280b@library-path (append (G2976@G280b@library-path) (list G4b16@path))))) (set! G4add@parse-and-add-library-path (lambda (G4b18@paths G4b19@message) ((lambda (G4b1c@t) (if G4b1c@t ((lambda (G4b1e@paths) (for-each (lambda (G4b20@path) (if (file-exists? G4b20@path) (G4adb@add-library-path! (expand-path G4b20@path)) (format (current-error-port) G4b19@message G4b20@path))) (reverse (string-split G4b1e@paths '#\:)))) G4b1c@t) (void))) G4b18@paths))) (set! G4adf@for-each-with-index (lambda (G4b22@proc G4b23@lst) (letrec ((G4b26@loop (lambda (G4b28@i G4b29@lst) (if (null? G4b29@lst) (if '#f '#f (void)) (begin (G4b22@proc G4b28@i (car G4b29@lst)) (G4b26@loop (+ G4b28@i '1) (cdr G4b29@lst))))))) (G4b26@loop '1 G4b23@lst)))) (set! G4ae1@conditioon-printer (lambda (G4b2c@e G4b2d@port) ((lambda (G4b31@ref) (begin (set! G4b31@ref (lambda (G4b40@rtd G4b41@i G4b42@x) ((lambda (G4b46@val) (if (symbol? G4b46@val) (ungensym G4b46@val) G4b46@val)) ((record-accessor G4b40@rtd G4b41@i) G4b42@x)))) (begin (display '" Condition components:\n" G4b2d@port) (G4adf@for-each-with-index (lambda (G4b32@i G4b33@x) ((lambda (G4b36@rtd) (begin (format G4b2d@port '"   ~d. ~a" G4b32@i (record-type-name G4b36@rtd)) ((lambda (G4b38@v) ((lambda (G4b3a@t) (if (memv G4b3a@t '(0)) (newline G4b2d@port) (if (memv G4b3a@t '(1)) (begin (display '": " G4b2d@port) (write (G4b31@ref G4b36@rtd '0 G4b33@x) G4b2d@port) (newline G4b2d@port)) (begin (display '":\n" G4b2d@port) ((letrec ((G4b3c@f (lambda (G4b3e@i) (if (not (= G4b3e@i (vector-length G4b38@v))) (begin (display '"       " G4b2d@port) (display (vector-ref G4b38@v G4b3e@i) G4b2d@port) (display '": " G4b2d@port) (write (G4b31@ref G4b36@rtd G4b3e@i G4b33@x) G4b2d@port) (newline G4b2d@port) (G4b3c@f (+ G4b3e@i '1))) (void))))) G4b3c@f) '0))))) (vector-length G4b38@v))) (record-type-field-names G4b36@rtd)))) (record-rtd G4b33@x))) (simple-conditions G4b2c@e))))) '#f))) (set! G4ae3@repl (lambda G4b48@x ((lambda (G4b4b@rec) (begin (set! G4b4b@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4b4e@G4b4c) (lambda () (with-exception-handler (lambda (G4b50@e) ((call/cc (lambda (G4b52@G4b4d) (G4b4e@G4b4c (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? G4b50@e) (G4ae1@conditioon-printer G4b50@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" G4b50@e))) (G4b52@G4b4d (lambda () (raise-continuable G4b50@e)))))))))) (lambda () ((letrec ((G4b54@loop (lambda (G4b56@line G4b57@accum) ((lambda (G4b5b@parentheses-ok? G4b5d@eval-string-print) (begin (set! G4b5b@parentheses-ok? (lambda (G4b62@text) ((letrec ((G4b64@loop (lambda (G4b66@chars G4b67@p0 G4b68@p1) (if (null? G4b66@chars) (= '0 G4b67@p0 G4b68@p1) ((lambda (G4b6c@t) (if (memv G4b6c@t '(#\()) (G4b64@loop (cdr G4b66@chars) (+ G4b67@p0 '1) G4b68@p1) (if (memv G4b6c@t '(#\))) (G4b64@loop (cdr G4b66@chars) (- G4b67@p0 '1) G4b68@p1) (if (memv G4b6c@t '(#\[)) (G4b64@loop (cdr G4b66@chars) G4b67@p0 (+ G4b68@p1 '1)) (if (memv G4b6c@t '(#\])) (G4b64@loop (cdr G4b66@chars) G4b67@p0 (- G4b68@p1 '1)) (G4b64@loop (cdr G4b66@chars) G4b67@p0 G4b68@p1)))))) (car G4b66@chars)))))) G4b64@loop) (string->list G4b62@text) '0 '0))) (set! G4b5d@eval-string-print (lambda (G4b60@text) (if (not (or (string=? '"\n" G4b60@text) (= '0 (string-length G4b60@text)))) (write (G4af1@eval-top-level (call-with-port (open-string-input-port G4b60@text) read))) (void)))) (if (eof-object? G4b56@line) (begin (G4b5d@eval-string-print G4b57@accum) (exit)) ((lambda (G4b5e@current) (if (G4b5b@parentheses-ok? G4b5e@current) (G4b5d@eval-string-print G4b5e@current) (G4b54@loop (get-line (current-input-port)) G4b5e@current))) (string-append G4b57@accum G4b56@line))))) '#f '#f)))) G4b54@loop) (get-line (current-input-port)) '""))))))) (newline) (G4b4b@rec)))) (G4b4b@rec))) '#f))) (set! G4ae5@trace-printer (G2714@G2642@make-parameter write)) (set! G4ae7@command-line (G2714@G2642@make-parameter (get-command-line))) (set! G4ae9@local-library-path (lambda (G4b6e@filename) (cons (expand-path '".") (G2976@G280b@library-path)))) (set! G4aeb@load/args (lambda (G4b70@filename . G4b72@args) (begin (apply G4afb@load-r6rs-top-level G4b70@filename 'load G4b72@args) (void)))) (set! G4aed@load (lambda (G4b74@filename) (begin (apply G4afb@load-r6rs-top-level G4b74@filename 'load (G4ae7@command-line)) (void)))) (set! G4aef@ironscheme-build (lambda () (G4aed@load '"ironscheme-buildscript.ss"))) (set! G4af1@eval-top-level (lambda (G4b76@x) (G4713@G2e1c@eval G4b76@x (G4729@G2e48@interaction-environment)))) (set! G4af3@compile-system-libraries (lambda () (G4af1@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4af5@compile (lambda (G4b78@filename) (G4afb@load-r6rs-top-level G4b78@filename 'compile))) (set! G4af7@compile->closure (lambda (G4b7a@filename) (G4afb@load-r6rs-top-level G4b7a@filename 'closure))) (set! G4af9@pre-compile-r6rs-file (lambda (G4b7c@filename) (G4afb@load-r6rs-top-level G4b7c@filename 'compile))) (set! G4afb@load-r6rs-top-level (lambda (G4b7e@filename G4b7f@how . G4b82@args) ((lambda (G4b86@G4b84 G4b87@G4b85) ((lambda (G4b8a@swap) (dynamic-wind G4b8a@swap (lambda () ((lambda (G4b8c@x*) ((lambda (G4b8e@t) (if (memv G4b8e@t '(closure)) (G4728@G2e46@pre-compile-r6rs-top-level G4b8c@x*) (if (memv G4b8e@t '(load)) ((lambda (G4b92@G4b90 G4b93@G4b91) ((lambda (G4b96@swap) (dynamic-wind G4b96@swap (lambda () ((G4727@G2e44@compile-r6rs-top-level G4b8c@x*))) G4b96@swap)) (lambda () ((lambda (G4b98@t) (begin (G4b92@G4b90 G4b93@G4b91) (set! G4b93@G4b91 G4b98@t))) (G4b92@G4b90))))) G4ae7@command-line (cons G4b7e@filename (car G4b82@args))) (if (memv G4b8e@t '(compile)) (begin (G4727@G2e44@compile-r6rs-top-level G4b8c@x*) (G297a@G2813@serialize-all G270f@G2638@serialize-library G2769@G2722@compile-core-expr)) (if '#f '#f (void)))))) G4b7f@how)) (with-input-from-file G4b7e@filename (lambda () ((letrec ((G4b9a@f (lambda () ((lambda (G4b9c@x) (if (eof-object? G4b9c@x) '() (cons G4b9c@x (G4b9a@f)))) (G2707@G2628@read-annotated))))) G4b9a@f)))))) G4b8a@swap)) (lambda () ((lambda (G4b9e@t) (begin (G4b86@G4b84 G4b87@G4b85) (set! G4b87@G4b85 G4b9e@t))) (G4b86@G4b84))))) G2976@G280b@library-path (G4ae9@local-library-path G4b7e@filename)))) (begin (set! G4bb0@G4afb@load-r6rs-top-level G4afb@load-r6rs-top-level) (set! G4baf@G4af9@pre-compile-r6rs-file G4af9@pre-compile-r6rs-file) (set! G4bae@G4af7@compile->closure G4af7@compile->closure) (set! G4bad@G4af5@compile G4af5@compile) (set! G4bac@G4af3@compile-system-libraries G4af3@compile-system-libraries) (set! G4bab@G4af1@eval-top-level G4af1@eval-top-level) (set! G4baa@G4aef@ironscheme-build G4aef@ironscheme-build) (set! G4ba9@G4aed@load G4aed@load) (set! G4ba8@G4aeb@load/args G4aeb@load/args) (set! G4ba7@G4ae9@local-library-path G4ae9@local-library-path) (set! G4ba6@G4ae7@command-line G4ae7@command-line) (set! G4ba5@G4ae5@trace-printer G4ae5@trace-printer) (set! G4ba4@G4ae3@repl G4ae3@repl) (set! G4ba3@G4ae1@conditioon-printer G4ae1@conditioon-printer) (set! G4ba2@G4adf@for-each-with-index G4adf@for-each-with-index) (set! G4ba1@G4add@parse-and-add-library-path G4add@parse-and-add-library-path) (set! G4ba0@G4adb@add-library-path! G4adb@add-library-path!) (G297b@G2815@current-precompiled-library-loader G2710@G263a@load-serialized-library) (set-symbol-value! 'load G4aed@load) (set-symbol-value! 'pre-compile-r6rs-file G4af9@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4af1@eval-top-level) (set-symbol-value! 'int-env-syms G470a@G2e0a@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2768@G2720@expanded->core) (set-symbol-value! 'trace-printer G4ae5@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4afc@c) (condition (G4a38@G4848@make-non-continuable-violation) (G4a2e@G482f@make-who-condition 'raise) (G49f2@G4792@make-message-condition '"returned from non-continuable exception") (G4a24@G4815@make-irritants-condition (list G4afc@c))))) (G4add@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4add@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2976@G280b@library-path (append (G2976@G280b@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4afe@prefix) (G2977@G280d@library-extensions (G4afe@prefix '".mosh" (G2977@G280d@library-extensions)))) (lambda (G4b00@ext G4b01@ls) (append (map (lambda (G4b04@x) (string-append G4b00@ext G4b04@x)) G4b01@ls) G4b01@ls))) ((lambda (G4b06@args G4b07@port) ((lambda (G4b0b@ref) (begin (set! G4b0b@ref (lambda (G4b0e@rtd G4b0f@i G4b10@x) ((lambda (G4b14@val) (if (symbol? G4b14@val) (ungensym G4b14@val) G4b14@val)) ((record-accessor G4b0e@rtd G4b0f@i) G4b10@x)))) (with-exception-handler (lambda (G4b0c@c) (if (condition? G4b0c@c) (G4ae1@conditioon-printer G4b0c@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" G4b0c@c))) (lambda () (if (null? G4b06@args) (G4ae3@repl) (G4afb@load-r6rs-top-level (car G4b06@args) 'load (cdr G4b06@args))))))) '#f)) (G4ae7@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
