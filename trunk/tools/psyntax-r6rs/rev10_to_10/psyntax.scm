;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define G10447 '#f) (define G10448 '#f) (define G10449 '#f) (define G10450 '#f) (define G10451 '#f) (define G10452 '#f) (define G10453 '#f) (define G10454 '#f) (define G10455 '#f) (define G10456 '#f) (define G10457 '#f) (define G10458 '#f) ((lambda (G10232 G10234 G10236 G10238 G10240 G10242 G10244 G10246 G10248 G10250 G10252 G10406) (begin (set! G10232 read) (set! G10234 (lambda (G10407) (G10240 G10407))) (set! G10236 (lambda (G10409) (source-info G10409))) (set! G10238 (lambda (G10411) (source-info G10411))) (set! G10240 (lambda (G10413) (if (pair? G10413) (cons (car G10413) (cdr G10413)) (display '"line:46\n")))) (set! G10242 (lambda G10415 (begin (display G10415) '#f))) (set! G10244 (lambda G10417 '#f)) (set! G10246 (lambda (G10419 G10420) (lambda G10423 (begin (display '"record printer") (for-each display G10423))))) (set! G10248 (lambda G10425 (apply error 'comile-core '"not implementated" G10425))) (set! G10250 (lambda (G10427) (with-input-from-file G10427 G10232))) (set! G10252 (lambda G10443 ((lambda (G10444) (if (= G10444 '1) (apply (lambda (G10429) (G10252 G10429 (lambda (G10431) G10431))) G10443) (if (= G10444 '2) (apply (lambda (G10433 G10434) (begin (if (procedure? G10434) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((lambda (G10437) (lambda G10441 ((lambda (G10442) (if (= G10442 '0) (apply (lambda () G10437) G10441) (if (= G10442 '1) (apply (lambda (G10439) (set! G10437 (G10434 G10439))) G10441) (error 'apply '"invalid arg count")))) (length G10441)))) (G10434 G10433)))) G10443) (error 'apply '"invalid arg count")))) (length G10443)))) (set! G10406 (lambda (G10445) G10445)) (begin (set! G10458 G10406) (set! G10457 G10252) (set! G10456 G10250) (set! G10455 G10248) (set! G10454 G10246) (set! G10453 G10244) (set! G10452 G10242) (set! G10451 G10240) (set! G10450 G10238) (set! G10449 G10236) (set! G10448 G10234) (set! G10447 G10232)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G10553 '#f) (define G10554 '#f) (define G10555 '#f) (define G10556 '#f) (define G10557 '#f) (define G10558 '#f) (define G10559 '#f) ((lambda (G10463 G10465 G10467 G10469 G10471 G10473 G10475) (begin (set! G10463 (G10457 (lambda (G10476) '#f) (lambda (G10478) (begin (if (procedure? G10478) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) G10478)))) (set! G10465 (lambda (G10480) ((lambda (G10483) (begin (set! G10483 (lambda (G10484) ((lambda (G10486) (if G10486 G10486 ((lambda (G10488) (if G10488 G10488 ((lambda (G10490) (if G10490 G10490 ((lambda (G10492) (if G10492 G10492 ((lambda (G10494) (if G10494 G10494 ((lambda (G10496) (if G10496 G10496 (begin '#f (number? G10484)))) (bytevector? G10484)))) (string? G10484)))) (boolean? G10484)))) (symbol? G10484)))) (char? G10484)))) (null? G10484)))) (not (G10483 G10480)))) '#f))) (set! G10467 (lambda (G10498) ((lambda (G10501) (begin (set! G10501 (lambda (G10502) (if (pair? G10502) ((lambda (G10504) (if (eqv? G10504 'quote) (if (if G10498 (begin '#f (G10465 (cadr G10502))) '#f) ((lambda (G10543) (begin (set-symbol-value! G10543 (cadr G10502)) G10543)) (gensym)) G10502) (if (eqv? G10504 'case-lambda) (cons 'case-lambda (map (lambda (G10541) (cons (car G10541) (map G10501 (cdr G10541)))) (cdr G10502))) (if (eqv? G10504 'lambda) (cons* 'lambda (cadr G10502) (map G10501 (cddr G10502))) (if (eqv? G10504 'letrec) ((lambda (G10533 G10534) ((lambda (G10537 G10538) (cons* 'letrec (map list G10537 (map G10501 G10538)) (map G10501 G10534))) (map car G10533) (map cadr G10533))) (cadr G10502) (cddr G10502)) (if (eqv? G10504 'letrec*) ((lambda (G10525 G10526) ((lambda (G10529 G10530) (cons* 'letrec* (map list G10529 (map G10501 G10530)) (map G10501 G10526))) (map car G10525) (map cadr G10525))) (cadr G10502) (cddr G10502)) (if (eqv? G10504 'library-letrec*) ((lambda (G10511 G10512) ((lambda (G10515 G10516) ((lambda (G10519 G10520 G10521) (cons* 'library-letrec* G10511 (map list G10519 G10520 (map G10501 G10521)) (map G10501 G10516))) (map car G10515) (map cadr G10515) (map caddr G10515))) (cadr G10512) (cddr G10512))) (cadr G10502) (cdr G10502)) (if (eqv? G10504 'begin) (cons 'begin (map G10501 (cdr G10502))) (if (eqv? G10504 'set!) (list 'set! (cadr G10502) (G10501 (caddr G10502))) (if (eqv? G10504 'primitive) ((lambda (G10505) ((lambda (G10507) (if G10507 ((lambda (G10509) G10509) G10507) G10505)) ((G10463) G10505))) (cadr G10502)) (if (eqv? G10504 'define) G10502 (if (list? G10502) (map G10501 G10502) (error 'rewrite '"invalid form ~s ~s" G10502 (list? G10502)))))))))))))) (car G10502)) G10502))) G10501)) '#f))) (set! G10469 (lambda (G10545) ((G10467 '#t) G10545))) (set! G10471 (lambda (G10547) ((G10467 '#f) G10547))) (set! G10473 write) (set! G10475 (lambda (G10549 G10550) (G10473 ((G10467 '#f) G10549) G10550))) (begin (set! G10559 G10475) (set! G10558 G10473) (set! G10557 G10471) (set! G10556 G10469) (set! G10555 G10467) (set! G10554 G10465) (set! G10553 G10463)))) '#f '#f '#f '#f '#f '#f '#f))
(void)
(begin (define G11072 '#f) (define G11073 '#f) (define G11074 '#f) (define G11075 '#f) (define G11076 '#f) (define G11077 '#f) (define G11078 '#f) (define G11079 '#f) (define G11080 '#f) (define G11081 '#f) (define G11082 '#f) (define G11083 '#f) (define G11084 '#f) (define G11085 '#f) (define G11086 '#f) (define G11087 '#f) (define G11088 '#f) (define G11089 '#f) (define G11090 '#f) (define G11091 '#f) (define G11092 '#f) (define G11093 '#f) (define G11094 '#f) (define G11095 '#f) (define G11096 '#f) (define G11097 '#f) (define G11098 '#f) (define G11099 '#f) (define G11100 '#f) (define G11101 '#f) (define G11102 '#f) (define G11103 '#f) (define G11104 '#f) (define G11105 '#f) (define G11106 '#f) (define G11107 '#f) (define G11108 '#f) (define G11109 '#f) (define G11110 '#f) (define G11111 '#f) (define G11112 '#f) (define G11113 '#f) (define G11114 '#f) (define G11115 '#f) (define G11116 '#f) (define G11117 '#f) (define G11118 '#f) (define G11119 '#f) (define G11120 '#f) (define G11121 '#f) (define G11122 '#f) (define G11123 '#f) (define G11124 '#f) (define G11125 '#f) (define G11126 '#f) (define G11127 '#f) (define G11128 '#f) (define G11129 '#f) (define G11130 '#f) (define G11131 '#f) (define G11132 '#f) ((lambda (G10649 G10651 G10657 G10659 G10661 G10666 G10668 G10670 G10672 G10674 G10676 G10678 G10680 G10682 G10684 G10686 G10688 G10690 G10692 G10694 G10696 G10698 G10700 G10702 G10704 G10706 G10708 G10710 G10712 G10714 G10716 G10718 G10720 G10722 G10724 G10726 G10728 G10730 G10732 G10734 G10736 G10738 G10740 G10742 G10744 G10746 G10748 G10750 G10752 G10754 G10756 G10758 G10760 G10762 G10764 G10766 G10768 G10770 G10772 G10774 G10776) (begin (set! G10649 (lambda () ((lambda (G10777) ((lambda (G10780) (begin (set! G10780 (lambda (G10785 G10786) (if (memq G10785 G10786) G10786 (cons G10785 G10786)))) (lambda G10783 ((lambda (G10784) (if (= G10784 '0) (apply (lambda () G10777) G10783) (if (= G10784 '1) (apply (lambda (G10781) (set! G10777 (G10780 G10781 G10777))) G10783) (error 'apply '"invalid arg count")))) (length G10783))))) '#f)) '()))) (set! G10651 (G10457 (G10649) (lambda (G10789) (begin (if (procedure? G10789) (void) (assertion-violation 'current-library-collection '"not a procedure" G10789)) G10789)))) (set! G10657 (make-record-type-descriptor 'library '#f 'G10655 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G10659 '#f) (set! G10661 (make-record-constructor-descriptor G10657 '#f G10659)) (set! G10666 (record-predicate G10657)) (set! G10668 (record-constructor G10661)) (set! G10670 (record-accessor G10657 '0)) (set! G10672 (record-accessor G10657 '1)) (set! G10674 (record-accessor G10657 '2)) (set! G10676 (record-accessor G10657 '3)) (set! G10678 (record-accessor G10657 '4)) (set! G10680 (record-accessor G10657 '5)) (set! G10682 (record-accessor G10657 '6)) (set! G10684 (record-accessor G10657 '7)) (set! G10686 (record-accessor G10657 '8)) (set! G10688 (record-accessor G10657 '9)) (set! G10690 (record-accessor G10657 '10)) (set! G10692 (record-accessor G10657 '11)) (set! G10694 (record-accessor G10657 '12)) (set! G10696 (record-accessor G10657 '13)) (set! G10698 (record-mutator G10657 '0)) (set! G10700 (record-mutator G10657 '1)) (set! G10702 (record-mutator G10657 '2)) (set! G10704 (record-mutator G10657 '3)) (set! G10706 (record-mutator G10657 '4)) (set! G10708 (record-mutator G10657 '5)) (set! G10710 (record-mutator G10657 '6)) (set! G10712 (record-mutator G10657 '7)) (set! G10714 (record-mutator G10657 '8)) (set! G10716 (record-mutator G10657 '9)) (set! G10718 (record-mutator G10657 '10)) (set! G10720 (record-mutator G10657 '11)) (set! G10722 (record-mutator G10657 '12)) (set! G10724 (record-mutator G10657 '13)) (set! G10726 (G10454 'library (lambda (G10791 G10792) (begin (if (G10666 G10791) (void) (assertion-violation 'record-type-printer '"not a library")) (display (format '"#<library ~s>" (if (null? (G10674 G10791)) (G10672 G10791) (append (G10672 G10791) (list (G10674 G10791))))) G10792))))) (set! G10728 (lambda (G10795) (if (null? G10795) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G10730 (lambda (G10797) ((letrec ((G10799 (lambda (G10801) (if (null? G10801) '#f (if (G10797 (car G10801)) (car G10801) (G10799 (cdr G10801))))))) G10799) ((G10651))))) (set! G10732 (G10457 '(".") (lambda (G10803) (if (if (list? G10803) (begin '#f (for-all string? G10803)) '#f) (map (lambda (G10805) G10805) G10803) (assertion-violation 'library-path '"not a list of strings" G10803))))) (set! G10734 (G10457 '(".sls" ".ss" ".scm") (lambda (G10807) (if (if (list? G10807) (begin '#f (for-all string? G10807)) '#f) (map (lambda (G10809) G10809) G10807) (assertion-violation 'library-extensions '"not a list of strings" G10807))))) (set! G10736 (lambda (G10811) (call-with-values (lambda () (open-string-output-port)) (lambda (G10815 G10816) ((lambda (G10819 G10820) ((lambda (G10824) (begin (set! G10824 (lambda (G10839) (if (<= '0 G10839 '9) (display G10839 G10820) (display (integer->char (+ (char->integer '#\A) (- G10839 '10))) G10820)))) (begin ((letrec ((G10825 (lambda (G10827) (if (null? G10827) (void) (begin (display '"/" G10820) (for-each (lambda (G10829) (if ((lambda (G10831) (if G10831 G10831 ((lambda (G10833) (if G10833 G10833 ((lambda (G10835) (if G10835 G10835 (begin '#f (memv G10829 '(#\- #\. #\_ #\~))))) (char<=? '#\nul G10829 '#\9)))) (char<=? '#\A G10829 '#\Z)))) (char<=? '#\a G10829 '#\z)) (display G10829 G10820) (begin (display '"%" G10820) ((lambda (G10837) (begin (G10824 (quotient G10837 '16)) (G10824 (remainder G10837 '16)))) (char->integer G10829))))) (string->list (symbol->string (car G10827)))) (G10825 (cdr G10827))))))) G10825) G10811) (G10819)))) '#f)) G10816 G10815))))) (set! G10738 (G10457 (lambda (G10841) ((lambda (G10843) ((letrec ((G10845 (lambda (G10847 G10848 G10849) (if (null? G10847) ((lambda () ((lambda (G10861 G10863 G10865 G10870 G10872 G10874 G10876 G10878 G10880 G10882) (begin (set! G10861 (make-record-type-descriptor '&library-resolution &condition-rtd 'G10859 '#f '#f '#((immutable library) (immutable files)))) (set! G10863 '#f) (set! G10865 (make-record-constructor-descriptor G10861 &condition-rcd G10863)) (set! G10870 (record-predicate G10861)) (set! G10872 (record-constructor G10865)) (set! G10874 (record-accessor G10861 '0)) (set! G10876 (record-accessor G10861 '1)) (set! G10878 (condition-predicate G10861)) (set! G10880 (condition-accessor G10861 G10874)) (set! G10882 (condition-accessor G10861 G10876)) (raise (condition (G19186) (G19212 'expander) (G19166 '"cannot locate library in library-path") (G10872 G10841 (reverse G10849)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G10848) (G10845 (cdr G10847) (G10734) G10849) ((lambda (G10883) (if (file-exists? G10883) G10883 (G10845 G10847 (cdr G10848) (cons G10883 G10849)))) (string-append (car G10847) G10843 (car G10848)))))))) G10845) (G10732) (G10734) '())) (G10736 G10841))) (lambda (G10885) (if (procedure? G10885) G10885 (assertion-violation 'file-locator '"not a procedure" G10885))))) (set! G10740 (lambda (G10887 G10888) ((lambda (G10892) (begin (set! G10892 (lambda (G10895) (list (G10670 G10895) (G10672 G10895)))) (for-each (lambda (G10893) (if (G10696 G10893) (G10887 (G10696 G10893) (list (G10670 G10893) (G10672 G10893) (G10674 G10893) (map G10892 (G10676 G10893)) (map G10892 (G10678 G10893)) (map G10892 (G10680 G10893)) (G10682 G10893) (G10684 G10893) (G10888 (G10690 G10893)) (G10888 (G10692 G10893)) (G10694 G10893))) (void))) ((G10651))))) '#f))) (set! G10742 (G10457 (lambda (G10897 G10898) '#f))) (set! G10744 (lambda (G10901) ((G10742) G10901 (lambda G10939 ((lambda (G10940) (if (= G10940 '11) (apply (lambda (G10903 G10904 G10905 G10906 G10907 G10908 G10909 G10910 G10911 G10912 G10913) ((letrec ((G10925 (lambda (G10927) (if (null? G10927) (begin (G10764 G10903 G10904 G10905 G10906 G10907 G10908 G10909 G10910 G10911 G10912 '#f '#f G10913 '#f) '#t) ((lambda (G10929) ((lambda (G10931 G10932) ((lambda (G10935) (if (if (G10666 G10935) (begin '#f (eq? G10931 (G10670 G10935))) '#f) (G10925 (cdr G10927)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source.\n" G10904 G10932 G10901) '#f))) (G10754 G10932))) (car G10929) (cadr G10929))) (car G10927)))))) G10925) (append G10906 G10907 G10908))) G10939) (if (>= G10940 '0) (apply (lambda G10937 '#f) G10939) (error 'apply '"invalid arg count")))) (length G10939)))))) (set! G10746 (G10457 (lambda (G10941) ((lambda (G10943) (if (not G10943) (assertion-violation '#f '"cannot file library" G10941) ((lambda (G10945) (if G10945 G10945 (begin '#f ((G10748) (G10456 G10943) G10943 (lambda (G10947) (if (equal? G10947 G10941) (void) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G10951 G10952) ((lambda (G10955 G10956) (begin (display '"expected to find library " G10956) (write G10941 G10956) (display '" in file " G10956) (display G10943 G10956) (display '", found " G10956) (write G10947 G10956) (display '" instead" G10956) (G10955))) G10952 G10951)))))))))) (G10744 G10943)))) ((G10738) G10941))) (lambda (G10959) (if (procedure? G10959) G10959 (assertion-violation 'library-locator '"not a procedure" G10959))))) (set! G10748 (G10457 (lambda (G10961) (assertion-violation 'library-expander '"not initialized")) (lambda (G10963) (if (procedure? G10963) G10963 (assertion-violation 'library-expander '"not a procedure" G10963))))) (set! G10750 (G10457 '())) (set! G10752 (lambda (G10965) (begin (if (member G10965 (G10750)) (assertion-violation '#f '"circular attempt to import library was detected" G10965) (void)) ((lambda (G10969 G10970) ((lambda (G10973) (dynamic-wind G10973 (lambda () (begin ((G10746) G10965) ((lambda (G10975) (if G10975 G10975 (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G10965)))) (G10730 (lambda (G10977) (equal? (G10672 G10977) G10965)))))) G10973)) (lambda () ((lambda (G10979) (begin (G10969 G10970) (set! G10970 G10979))) (G10969))))) G10750 (cons G10965 (G10750)))))) (set! G10754 (lambda (G10981) ((lambda (G10983) (if G10983 G10983 (begin '#f (G10752 G10981)))) (G10730 (lambda (G10985) (equal? (G10672 G10985) G10981)))))) (set! G10756 (lambda (G10987) (if (G10730 (lambda (G10989) (equal? (G10672 G10989) G10987))) (begin '#f '#t) '#f))) (set! G10758 (lambda (G10991) ((lambda (G10993) ((lambda (G10995) (if G10995 G10995 (begin '#f (assertion-violation '#f '"cannot find library with required spec" G10991)))) (G10730 (lambda (G10997) (eq? G10993 (G10670 G10997)))))) (car G10991)))) (set! G10760 (make-eq-hashtable)) (set! G10762 (lambda (G10999) (begin ((lambda (G11001) (for-each (lambda (G11003) ((lambda (G11005 G11006) ((lambda (G11009) (hashtable-set! G10760 G11005 G11009)) ((lambda (G11011) (if (eqv? G11011 'global) (cons 'global (cons G10999 (cdr G11006))) (if (eqv? G11011 'global-macro) (cons 'global-macro (cons G10999 (cdr G11006))) (if (eqv? G11011 'global-macro!) (cons 'global-macro! (cons G10999 (cdr G11006))) G11006)))) (car G11006)))) (car G11003) (cdr G11003))) G11001)) (G10684 G10999)) ((G10651) G10999)))) (set! G10764 (lambda (G11012 G11013 G11014 G11015 G11016 G11017 G11018 G11019 G11020 G11021 G11022 G11023 G11024 G11025) ((lambda (G11040 G11041 G11042) (begin (if (if (symbol? G11012) (if (list? G11013) (begin '#f (list? G11014)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" G11012 G11013 G11014)) (if (G10756 G11013) (assertion-violation 'install-library '"library is already installed" G11013) (void)) ((lambda (G11046) (G10762 G11046)) (G10668 G11012 G11013 G11014 G11040 G11041 G11042 G11018 G11019 G11020 G11021 G11022 G11023 G11024 G11025)))) (map G10758 G11015) (map G10758 G11016) (map G10758 G11017)))) (set! G10766 (lambda (G11048) (hashtable-ref G10760 G11048 '#f))) (set! G10768 (lambda (G11050) ((lambda (G11052) (if (procedure? G11052) (begin (G10716 G11050 (lambda () (assertion-violation 'invoke '"circularity detected" G11050))) (for-each G10768 (G10680 G11050)) (G10716 G11050 (lambda () (assertion-violation 'invoke '"first invoke did not return" G11050))) (G11052) (G10716 G11050 '#t)) (void))) (G10688 G11050)))) (set! G10770 (lambda (G11054) ((lambda (G11056) (if (procedure? G11056) (begin (G10714 G11054 (lambda () (assertion-violation 'visit '"circularity detected" G11054))) (for-each G10768 (G10678 G11054)) (G10714 G11054 (lambda () (assertion-violation 'invoke '"first visit did not return" G11054))) (G11056) (G10714 G11054 '#t)) (void))) (G10686 G11054)))) (set! G10772 (lambda (G11058) (G10768 (G10758 G11058)))) (set! G10774 (lambda G11068 ((lambda (G11069) (if (= G11069 '1) (apply (lambda (G11060) ((letrec ((G11062 (lambda (G11064) (if (null? G11064) '() (if ((lambda (G11066) (if G11066 G11066 (begin '#f (G10694 (car G11064))))) G11060) (cons (car G11064) (G11062 (cdr G11064))) (G11062 (cdr G11064))))))) G11062) ((G10651)))) G11068) (if (= G11069 '0) (apply (lambda () (G10774 '#f)) G11068) (error 'apply '"invalid arg count")))) (length G11068)))) (set! G10776 (lambda (G11070) (begin (if (G10666 G11070) (void) (assertion-violation 'library-spec '"not a library" G11070)) (list (G10670 G11070) (G10672 G11070) (G10674 G11070))))) (begin (set! G11132 G10776) (set! G11131 G10774) (set! G11130 G10772) (set! G11129 G10770) (set! G11128 G10768) (set! G11127 G10766) (set! G11126 G10764) (set! G11125 G10762) (set! G11124 G10760) (set! G11123 G10758) (set! G11122 G10756) (set! G11121 G10754) (set! G11120 G10752) (set! G11119 G10750) (set! G11118 G10748) (set! G11117 G10746) (set! G11116 G10744) (set! G11115 G10742) (set! G11114 G10740) (set! G11113 G10738) (set! G11112 G10736) (set! G11111 G10734) (set! G11110 G10732) (set! G11109 G10730) (set! G11108 G10728) (set! G11107 G10726) (set! G11106 G10724) (set! G11105 G10722) (set! G11104 G10720) (set! G11103 G10718) (set! G11102 G10716) (set! G11101 G10714) (set! G11100 G10712) (set! G11099 G10710) (set! G11098 G10708) (set! G11097 G10706) (set! G11096 G10704) (set! G11095 G10702) (set! G11094 G10700) (set! G11093 G10698) (set! G11092 G10696) (set! G11091 G10694) (set! G11090 G10692) (set! G11089 G10690) (set! G11088 G10688) (set! G11087 G10686) (set! G11086 G10684) (set! G11085 G10682) (set! G11084 G10680) (set! G11083 G10678) (set! G11082 G10676) (set! G11081 G10674) (set! G11080 G10672) (set! G11079 G10670) (set! G11078 G10668) (set! G11077 G10666) (set! G11076 G10661) (set! G11075 G10659) (set! G11074 G10657) (set! G11073 G10651) (set! G11072 G10649)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G11482 '#f) (define G11483 '#f) (define G11484 '#f) (define G11485 '#f) (define G11486 '#f) (define G11487 '#f) (define G11488 '#f) (define G11489 '#f) (define G11490 '#f) (define G11491 '#f) ((lambda (G11135 G11267 G11269 G11271 G11343 G11345 G11347 G11349 G11351 G11353) (begin (set! G11135 (lambda (G11354) (cons 'define (cons G11354 '('#f))))) (set! G11267 (lambda (G11356 G11357 G11358) (list 'lambda G11357 G11358))) (set! G11269 (lambda (G11362 G11363 G11364) ((lambda (G11369 G11371 G11373 G11375) (begin (set! G11369 (lambda (G11422) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G11371 (lambda (G11400 G11401 G11402) (call-with-values (lambda () ((letrec ((G11408 (lambda (G11410 G11411) (if (pair? G11410) (G11408 (cdr G11410) (+ G11411 '1)) (if (null? G11410) (values G11411 '=) (values G11411 '>=)))))) G11408) G11402 '0)) (lambda (G11414 G11415) ((lambda (G11418 G11419) (list (list 'primitive G11418) G11401 (list 'quote G11419))) G11415 G11414))))) (set! G11373 (lambda (G11392 G11393 G11394 G11395) (list '(primitive apply) (G11267 G11392 G11394 G11395) G11393))) (set! G11375 (lambda (G11376 G11377 G11378) ((lambda (G11382 G11383) (list 'lambda G11382 (G11271 G11376 (list G11383) (list (list '(primitive length) G11382)) ((letrec ((G11386 (lambda (G11388 G11389) (if (null? G11388) (G11369 G11376) (list 'if (G11371 G11376 G11383 (car G11388)) (G11373 G11376 G11382 (car G11388) (car G11389)) (G11386 (cdr G11388) (cdr G11389))))))) G11386) G11363 G11378)))) (gensym) (gensym)))) (if (= (length G11364) '1) (G11267 G11362 (car G11363) (car G11364)) (G11375 G11362 G11363 G11364)))) '#f '#f '#f '#f))) (set! G11271 (lambda (G11424 G11425 G11426 G11427) (cons (G11267 G11424 G11425 G11427) G11426))) (set! G11343 (lambda (G11432 G11433) ((letrec ((G11436 (lambda (G11438) (if (null? (cdr G11438)) (car G11438) (if (equal? (car G11438) (G11345)) (G11436 (cdr G11438)) (cons 'begin G11438)))))) G11436) G11433))) (set! G11345 (lambda () '((primitive void)))) (set! G11347 (lambda (G11440 G11441 G11442 G11443) (if (null? G11441) G11443 (list 'letrec (map list G11441 G11442) G11443)))) (set! G11349 (lambda (G11448 G11449 G11450 G11451) (if (null? G11449) G11451 (G11271 G11448 G11449 (map (lambda (G11456) (list 'quote '#f)) G11449) (G11343 G11448 (append (map (lambda (G11458 G11459) (list 'set! G11458 G11459)) G11449 G11450) (list G11451))))))) (set! G11351 (lambda (G11462 G11463 G11464 G11465 G11466 G11467) (list 'library-letrec* G11463 (map list G11464 G11465 G11466) G11467))) (set! G11353 (lambda (G11474 G11475 G11476 G11477) (begin (display '"************** in ") (cons 'receive (cons G11475 (cons G11476 G11477)))))) (begin (set! G11491 G11353) (set! G11490 G11351) (set! G11489 G11349) (set! G11488 G11347) (set! G11487 G11345) (set! G11486 G11343) (set! G11485 G11271) (set! G11484 G11269) (set! G11483 G11267) (set! G11482 G11135)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G18585 '#f) (define G18586 '#f) (define G18587 '#f) (define G18588 '#f) (define G18589 '#f) (define G18590 '#f) (define G18591 '#f) (define G18592 '#f) (define G18593 '#f) (define G18594 '#f) (define G18595 '#f) (define G18596 '#f) (define G18597 '#f) (define G18598 '#f) (define G18599 '#f) (define G18600 '#f) (define G18601 '#f) (define G18602 '#f) (define G18603 '#f) (define G18604 '#f) (define G18605 '#f) (define G18606 '#f) (define G18607 '#f) (define G18608 '#f) (define G18609 '#f) (define G18610 '#f) (define G18611 '#f) (define G18612 '#f) (define G18613 '#f) (define G18614 '#f) (define G18615 '#f) (define G18616 '#f) (define G18617 '#f) (define G18618 '#f) (define G18619 '#f) (define G18620 '#f) (define G18621 '#f) (define G18622 '#f) (define G18623 '#f) (define G18624 '#f) (define G18625 '#f) (define G18626 '#f) (define G18627 '#f) (define G18628 '#f) (define G18629 '#f) (define G18630 '#f) (define G18631 '#f) (define G18632 '#f) (define G18633 '#f) (define G18634 '#f) (define G18635 '#f) (define G18636 '#f) (define G18637 '#f) (define G18638 '#f) (define G18639 '#f) (define G18640 '#f) (define G18641 '#f) (define G18642 '#f) (define G18643 '#f) (define G18644 '#f) (define G18645 '#f) (define G18646 '#f) (define G18647 '#f) (define G18648 '#f) (define G18649 '#f) (define G18650 '#f) (define G18651 '#f) (define G18652 '#f) (define G18653 '#f) (define G18654 '#f) (define G18655 '#f) (define G18656 '#f) (define G18657 '#f) (define G18658 '#f) (define G18659 '#f) (define G18660 '#f) (define G18661 '#f) (define G18662 '#f) (define G18663 '#f) (define G18664 '#f) (define G18665 '#f) (define G18666 '#f) (define G18667 '#f) (define G18668 '#f) (define G18669 '#f) (define G18670 '#f) (define G18671 '#f) (define G18672 '#f) (define G18673 '#f) (define G18674 '#f) (define G18675 '#f) (define G18676 '#f) (define G18677 '#f) (define G18678 '#f) (define G18679 '#f) (define G18680 '#f) (define G18681 '#f) (define G18682 '#f) (define G18683 '#f) (define G18684 '#f) (define G18685 '#f) (define G18686 '#f) (define G18687 '#f) (define G18688 '#f) (define G18689 '#f) (define G18690 '#f) (define G18691 '#f) (define G18692 '#f) (define G18693 '#f) (define G18694 '#f) (define G18695 '#f) (define G18696 '#f) (define G18697 '#f) (define G18698 '#f) (define G18699 '#f) (define G18700 '#f) (define G18701 '#f) (define G18702 '#f) (define G18703 '#f) (define G18704 '#f) (define G18705 '#f) (define G18706 '#f) (define G18707 '#f) (define G18708 '#f) (define G18709 '#f) (define G18710 '#f) (define G18711 '#f) (define G18712 '#f) (define G18713 '#f) (define G18714 '#f) (define G18715 '#f) (define G18716 '#f) (define G18717 '#f) (define G18718 '#f) (define G18719 '#f) (define G18720 '#f) (define G18721 '#f) (define G18722 '#f) (define G18723 '#f) (define G18724 '#f) (define G18725 '#f) (define G18726 '#f) (define G18727 '#f) (define G18728 '#f) (define G18729 '#f) (define G18730 '#f) (define G18731 '#f) (define G18732 '#f) (define G18733 '#f) (define G18734 '#f) (define G18735 '#f) (define G18736 '#f) (define G18737 '#f) (define G18738 '#f) (define G18739 '#f) (define G18740 '#f) (define G18741 '#f) (define G18742 '#f) (define G18743 '#f) (define G18744 '#f) (define G18745 '#f) (define G18746 '#f) (define G18747 '#f) (define G18748 '#f) (define G18749 '#f) (define G18750 '#f) (define G18751 '#f) (define G18752 '#f) (define G18753 '#f) (define G18754 '#f) (define G18755 '#f) (define G18756 '#f) (define G18757 '#f) (define G18758 '#f) (define G18759 '#f) (define G18760 '#f) (define G18761 '#f) (define G18762 '#f) (define G18763 '#f) (define G18764 '#f) (define G18765 '#f) (define G18766 '#f) (define G18767 '#f) (define G18768 '#f) (define G18769 '#f) (define G18770 '#f) (define G18771 '#f) (define G18772 '#f) (define G18773 '#f) (define G18774 '#f) (define G18775 '#f) (define G18776 '#f) (define G18777 '#f) (define G18778 '#f) (define G18779 '#f) (define G18780 '#f) (define G18781 '#f) (define G18782 '#f) (define G18783 '#f) (define G18784 '#f) (define G18785 '#f) (define G18786 '#f) (define G18787 '#f) (define G18788 '#f) (define G18789 '#f) (define G18790 '#f) (define G18791 '#f) (define G18792 '#f) (define G18793 '#f) (define G18794 '#f) (define G18795 '#f) (define G18796 '#f) (define G18797 '#f) (define G18798 '#f) (define G18799 '#f) (define G18800 '#f) (define G18801 '#f) (define G18802 '#f) (define G18803 '#f) (define G18804 '#f) (define G18805 '#f) (define G18806 '#f) (define G18807 '#f) (define G18808 '#f) (define G18809 '#f) (define G18810 '#f) (define G18811 '#f) (define G18812 '#f) (define G18813 '#f) (define G18814 '#f) (define G18815 '#f) (define G18816 '#f) (define G18817 '#f) (define G18818 '#f) (define G18819 '#f) (define G18820 '#f) (define G18821 '#f) (define G18822 '#f) (define G18823 '#f) (define G18824 '#f) (define G18825 '#f) (define G18826 '#f) (define G18827 '#f) (define G18828 '#f) (define G18829 '#f) (define G18830 '#f) (define G18831 '#f) (define G18832 '#f) (define G18833 '#f) (define G18834 '#f) (define G18835 '#f) (define G18836 '#f) (define G18837 '#f) (define G18838 '#f) (define G18839 '#f) (define G18840 '#f) (define G18841 '#f) (define G18842 '#f) (define G18843 '#f) (define G18844 '#f) ((lambdabegin (set! G11504 (lambda (G12468 G12469) (if (memq G12468 G12469) G12469 (cons G12468 G12469)))) (set! G11506 (lambda (G12472 G12473) (if (null? G12472) G12473 (if (memq (car G12472) G12473) (G11506 (cdr G12472) G12473) (cons (car G12472) (G11506 (cdr G12472) G12473)))))) (set! G11511 '(top)) (set! G11513 (lambda (G12476) (memq 'top G12476))) (set! G11515 (lambda (G12478) (if (symbol? G12478) (gensym G12478) (if (G11585 G12478) (G11515 (G11643 G12478)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G12478))))) (set! G11517 (lambda (G12480) (G11515 G12480))) (set! G11519 (lambda (G12482) (gensym))) (set! G11521 (lambda (G12484 G12485) ((lambda (G12489) (begin (set! G12489 (lambda (G12500 G12501 G12502 G12503 G12504) (if (pair? G12502) (begin '#f (if (if (eq? G12500 (car G12502)) (begin '#f (G11645 G12501 (car G12503))) '#f) (car G12504) (G12489 G12500 G12501 (cdr G12502) (cdr G12503) (cdr G12504)))) '#f))) ((lambda (G12490 G12491) ((lambda (G12494) ((lambda (G12496) (if G12496 ((lambda (G12498) (if (G11127 G12498) (gensym) G12498)) G12496) (gensym))) (if (memq G12490 (G11544 G12485)) (begin '#f (G12489 G12490 G12491 G12494 (G11546 G12485) (G11548 G12485))) '#f))) (G11544 G12485))) (G11643 G12484) (G11591 G12484)))) '#f))) (set! G11523 (lambda (G12510 G12511) ((lambda (G12514) (if G12514 ((lambda (G12516) ((lambda (G12518 G12519) (values G12518 ((lambda (G12522) (if G12522 (cdr G12522) ((lambda (G12524) (begin (G12407 G12516 (cons (cons G12518 G12524) G12519)) G12524)) (G11515 G12510)))) (assq G12518 G12519)))) (G11521 G12510 G12511) (G12401 G12516))) G12514) (values (gensym) (G11515 G12510)))) (G12467)))) (set! G11525 (lambda (G12526 G12527) (if (G12467) (G11521 G12526 G12527) (gensym)))) (set! G11531 (make-record-type-descriptor 'rib '#f 'G11529 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! G11533 '#f) (set! G11535 (make-record-constructor-descriptor G11531 '#f G11533)) (set! G11540 (record-predicate G11531)) (set! G11542 (record-constructor G11535)) (set! G11544 (record-accessor G11531 '0)) (set! G11546 (record-accessor G11531 '1)) (set! G11548 (record-accessor G11531 '2)) (set! G11550 (record-accessor G11531 '3)) (set! G11552 (record-mutator G11531 '0)) (set! G11554 (record-mutator G11531 '1)) (set! G11556 (record-mutator G11531 '2)) (set! G11558 (record-mutator G11531 '3)) (set! G11560 (lambda () (G11542 '() '() '() '#f))) (set! G11562 (lambda (G12530 G12531 G12532) ((lambda (G12537) (begin (set! G12537 (lambda (G12548 G12549 G12550 G12551 G12552) (if (pair? G12550) (begin '#f (if (if (eq? G12548 (car G12550)) (begin '#f (G11645 G12549 (car G12551))) '#f) G12552 (G12537 G12548 G12549 (cdr G12550) (cdr G12551) (cdr G12552)))) '#f))) (begin (if (G11550 G12530) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G12530) (void)) ((lambda (G12538 G12539) ((lambda (G12542) ((lambda (G12544) (if G12544 ((lambda (G12546) (if (eq? G12532 (car G12546)) (void) (if (G12467) (set-car! G12546 G12532) (G12453 '#f '"cannot redefine" G12531)))) G12544) (begin (G11552 G12530 (cons G12538 G12542)) (G11554 G12530 (cons G12539 (G11546 G12530))) (G11556 G12530 (cons G12532 (G11548 G12530)))))) (if (memq G12538 (G11544 G12530)) (begin '#f (G12537 G12538 G12539 G12542 (G11546 G12530) (G11548 G12530))) '#f))) (G11544 G12530))) (G11643 G12531) (G11591 G12531))))) '#f))) (set! G11564 (lambda (G12558) ((lambda (G12560) ((letrec ((G12562 (lambda (G12564 G12565) (if (null? G12565) G12560 (begin (hashtable-update! G12560 (car G12565) (lambda (G12568) (cons G12564 G12568)) '()) (G12562 (+ G12564 '1) (cdr G12565))))))) G12562) '0 G12558)) (make-eq-hashtable)))) (set! G11566 (lambda (G12570) ((lambda (G12572) (if (null? G12572) (void) (begin (G11552 G12570 (list->vector G12572)) (G11554 G12570 (list->vector (G11546 G12570))) (G11556 G12570 (list->vector (G11548 G12570))) (G11558 G12570 (G11564 G12572))))) (G11544 G12570)))) (set! G11568 (lambda (G12574) (if (G11550 G12574) (begin (G11558 G12574 '#f) (G11552 G12574 (vector->list (G11544 G12574))) (G11554 G12574 (vector->list (G11546 G12574))) (G11556 G12574 (vector->list (G11548 G12574)))) (void)))) (set! G11570 (lambda (G12576 G12577) ((lambda (G12580) (begin (G11566 G12580) G12580)) (G11542 (map G11643 G12576) (map G11591 G12576) G12577 '#f)))) (set! G11576 (make-record-type-descriptor 'stx '#f 'G11574 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G11578 '#f) (set! G11580 (make-record-constructor-descriptor G11576 '#f G11578)) (set! G11585 (record-predicate G11576)) (set! G11587 (record-constructor G11580)) (set! G11589 (record-accessor G11576 '0)) (set! G11591 (record-accessor G11576 '1)) (set! G11593 (record-accessor G11576 '2)) (set! G11595 (record-accessor G11576 '3)) (set! G11597 (record-mutator G11576 '0)) (set! G11599 (record-mutator G11576 '1)) (set! G11601 (record-mutator G11576 '2)) (set! G11603 (record-mutator G11576 '3)) (set! G11605 (G10454 'stx (lambda (G12582 G12583) (begin (display '"#<syntax " G12583) (write (G11663 G12582) G12583) ((lambda (G12586) (if (G10449 G12586) ((lambda (G12588) (if (pair? G12588) (begin (display '" [" G12583) (display (cdr G12588) G12583) (display '" of " G12583) (display (car G12588) G12583) (display '"]" G12583)) (void))) (G10450 G12586)) (void))) (G11589 G12582)) (display '">" G12583))))) (set! G11607 (lambda (G12590 G12591) (G11587 G12591 (G11591 G12590) (G11593 G12590) (G11595 G12590)))) (set! G11609 (lambda () (string '#\m))) (set! G11611 '#f) (set! G11613 not) (set! G11615 (lambda (G12594 G12595 G12596 G12597) ((lambda (G12603) (begin (set! G12603 (lambda (G12610 G12611) ((letrec ((G12614 (lambda (G12616 G12617) (if (null? G12617) (cdr G12611) (cons G12616 (G12614 (car G12617) (cdr G12617))))))) G12614) (car G12610) (cdr G12610)))) ((lambda (G12604 G12605 G12606) (if (if (not (null? G12594)) (if (not (null? G12604)) (begin '#f (G11613 (car G12604))) '#f) '#f) (values (G12603 G12594 G12604) (G12603 G12595 G12605) (G12603 G12596 G12606)) (values (append G12594 G12604) (append G12595 G12605) (append G12596 G12606)))) (G11591 G12597) (G11593 G12597) (G11595 G12597)))) '#f))) (set! G11617 (lambda (G12620 G12621 G12622 G12623) (if (G11585 G12620) (call-with-values (lambda () (G11615 G12621 G12622 G12623 G12620)) (lambda (G12631 G12632 G12633) ((lambda (G12637 G12638 G12639) (G11587 (G11589 G12620) G12639 G12638 G12637)) G12633 G12632 G12631))) (G11587 G12620 G12621 G12622 G12623)))) (set! G11619 (lambda (G12643 G12644 G12645) (G11617 G12644 (list G12643) '(shift) (list G12645)))) (set! G11621 (lambda (G12649 G12650) (G11617 G12650 '() (list G12649) '()))) (set! G11623 (lambda (G12653 G12654) (if (G11585 G12653) (G11623 (G11589 G12653) G12654) (if (G10449 G12653) (G11623 (G10451 G12653) G12654) (G12654 G12653))))) (set! G11625 (lambda (G12657) (if (G11585 G12657) ((lambda (G12659 G12660 G12661 G12662) (map (lambda (G12667) (G11617 G12667 G12660 G12661 G12662)) G12659)) (G11625 (G11589 G12657)) (G11591 G12657) (G11593 G12657) (G11595 G12657)) (if (G10449 G12657) (G11625 (G10451 G12657)) (if (vector? G12657) (vector->list G12657) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G12657)))))) (set! G11627 (lambda (G12669) (G11623 G12669 pair?))) (set! G11629 (lambda (G12671) (G11623 G12671 vector?))) (set! G11631 (lambda (G12673) (G11623 G12673 null?))) (set! G11633 (lambda (G12675) ((lambda (G12677) (if G12677 G12677 (begin '#f (if (G11627 G12675) (begin '#f (G11633 (G11637 G12675))) '#f)))) (G11631 G12675)))) (set! G11635 (lambda (G12679) (if (G11585 G12679) (G11617 (G11635 (G11589 G12679)) (G11591 G12679) (G11593 G12679) (G11595 G12679)) (if (G10449 G12679) (G11635 (G10451 G12679)) (if (pair? G12679) (car G12679) (assertion-violation 'syntax-car '"BUG: not a pair" G12679)))))) (set! G11637 (lambda (G12681) (if (G11585 G12681) (G11617 (G11637 (G11589 G12681)) (G11591 G12681) (G11593 G12681) (G11595 G12681)) (if (G10449 G12681) (G11637 (G10451 G12681)) (if (pair? G12681) (cdr G12681) (assertion-violation 'syntax-cdr '"BUG: not a pair" G12681)))))) (set! G11639 (lambda (G12683) (if (G11627 G12683) (cons (G11635 G12683) (G11639 (G11637 G12683))) (if (G11631 G12683) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G12683))))) (set! G11641 (lambda (G12685) (if (G11585 G12685) (begin '#f ((lambda (G12687) (symbol? (if (G10449 G12687) (G10448 G12687) G12687))) (G11589 G12685))) '#f))) (set! G11643 (lambda (G12689) (begin (if (G11585 G12689) (void) (error 'id->sym '"BUG in ikarus: not an id" G12689)) ((lambda (G12691) ((lambda (G12693) (if (symbol? G12693) G12693 (error 'id->sym '"BUG in ikarus: not an id" G12689))) (if (G10449 G12691) (G10448 G12691) G12691))) (G11589 G12689))))) (set! G11645 (lambda (G12695 G12696) ((lambda (G12699) (if G12699 G12699 (begin '#f (if (pair? G12695) (if (pair? G12696) (if (eq? (car G12695) (car G12696)) (begin '#f (G11645 (cdr G12695) (cdr G12696))) '#f) '#f) '#f)))) (if (null? G12695) (begin '#f (null? G12696)) '#f)))) (set! G11647 (lambda (G12701 G12702) (if (eq? (G11643 G12701) (G11643 G12702)) (begin '#f (G11645 (G11591 G12701) (G11591 G12702))) '#f))) (set! G11649 (lambda (G12705 G12706) ((lambda (G12709 G12710) (if ((lambda (G12713) (if G12713 G12713 (begin '#f G12710))) G12709) (eq? G12709 G12710) (eq? (G11643 G12705) (G11643 G12706)))) (G11669 G12705) (G11669 G12706)))) (set! G11651 (lambda (G12715) (if (for-all G11641 G12715) (begin '#f (G11653 G12715)) '#f))) (set! G11653 (lambda (G12717) ((lambda (G12719) (if G12719 G12719 (begin '#f (if (not (G11655 (car G12717) (cdr G12717))) (begin '#f (G11653 (cdr G12717))) '#f)))) (null? G12717)))) (set! G11655 (lambda (G12721 G12722) (if (pair? G12722) (begin '#f ((lambda (G12725) (if G12725 G12725 (begin '#f (G11655 G12721 (cdr G12722))))) (G11647 G12721 (car G12722)))) '#f))) (set! G11657 (lambda (G12727) ((lambda (G12729) (if G12729 G12729 ((lambda (G12731) (if G12731 G12731 ((lambda (G12733) (if G12733 G12733 ((lambda (G12735) (if G12735 G12735 (begin '#f (bytevector? G12727)))) (boolean? G12727)))) (char? G12727)))) (string? G12727)))) (number? G12727)))) (set! G11659 (lambda (G12737) (if (pair? G12737) (cons (G11659 (car G12737)) (G11659 (cdr G12737))) (if (vector? G12737) (vector-map G11659 G12737) (if (G10449 G12737) (G10448 G12737) G12737))))) (set! G11661 (lambda (G12739 G12740) (if (G11513 G12740) (if ((lambda (G12743) (if G12743 G12743 ((lambda (G12745) (if G12745 G12745 (begin '#f (if (vector? G12739) (if (> (vector-length G12739) '0) (begin '#f (G10449 (vector-ref G12739 '0))) '#f) '#f)))) (if (pair? G12739) (begin '#f (G10449 (car G12739))) '#f)))) (G10449 G12739)) (G11659 G12739) G12739) ((letrec ((G12747 (lambda (G12749) (if (G11585 G12749) (G11661 (G11589 G12749) (G11591 G12749)) (if (G10449 G12749) (G10448 G12749) (if (pair? G12749) ((lambda (G12751 G12752) (if (if (eq? G12751 (car G12749)) (begin '#f (eq? G12752 (cdr G12749))) '#f) G12749 (cons G12751 G12752))) (G12747 (car G12749)) (G12747 (cdr G12749))) (if (vector? G12749) ((lambda (G12755) ((lambda (G12757) (if (for-all eq? G12755 G12757) G12749 (list->vector G12757))) (map G12747 G12755))) (vector->list G12749)) G12749))))))) G12747) G12739)))) (set! G11663 (lambda (G12759) (G11661 G12759 '()))) (set! G11665 (lambda (G12761 G12762 G12763) (if (null? G12763) '#f (if (G11645 G12761 (vector-ref G12762 (car G12763))) (car G12763) (G11665 G12761 G12762 (cdr G12763)))))) (set! G11667 (lambda (G12767) ((lambda (G12769) (if G12769 G12769 (begin '#f ((lambda (G12771) (if G12771 ((lambda (G12773) ((lambda (G12775) (call-with-values (lambda () (G11523 G12767 G12775)) (lambda (G12779 G12780) ((lambda (G12783 G12784) (begin (G11562 G12775 G12767 G12784) G12784)) G12780 G12779)))) (G12397 G12773))) G12771) '#f)) (G12467))))) (G11669 G12767)))) (set! G11669 (lambda (G12787) ((lambda (G12789) ((letrec ((G12791 (lambda (G12793 G12794) (if (null? G12793) '#f (if (eq? (car G12793) 'shift) (G12791 (cdr G12793) (cdr G12794)) ((lambda (G12797) ((lambda (G12799) (if G12799 ((lambda (G12801) ((lambda (G12803) ((lambda (G12805) (if G12805 (vector-ref (G11548 G12797) G12805) (G12791 (cdr G12793) G12794))) (if G12803 (begin '#f (G11665 G12794 (G11546 G12797) (reverse G12803))) '#f))) (hashtable-ref G12801 G12789 '#f))) G12799) ((letrec ((G12807 (lambda (G12809 G12810 G12811) (if (null? G12809) (G12791 (cdr G12793) G12794) (if (if (eq? (car G12809) G12789) (begin '#f (G11645 (car G12810) G12794)) '#f) (car G12811) (G12807 (cdr G12809) (cdr G12810) (cdr G12811))))))) G12807) (G11544 G12797) (G11546 G12797) (G11548 G12797)))) (G11550 G12797))) (car G12793))))))) G12791) (G11593 G12787) (G11591 G12787))) (G11643 G12787)))) (set! G11671 (lambda (G12815 G12816) ((lambda (G12819) (if G12819 ((lambda (G12821) (if (if (pair? G12821) (begin '#f (eq? (car G12821) '$core-rtd)) '#f) (cons '$rtd (map G12146 (cdr G12821))) (if (if (pair? G12821) (begin '#f (eq? (car G12821) 'global-rtd)) '#f) ((lambda (G12823 G12824) (cons '$rtd (symbol-value G12824))) (cadr G12821) (cddr G12821)) G12821))) G12819) ((lambda (G12827) (if G12827 (cdr G12827) ((lambda (G12829) (if G12829 ((lambda (G12831) ((lambda (G12833) (if G12833 ((lambda (G12835) (cons* 'lexical (cdr G12835) '#f)) G12833) '(displaced-lexical . #f))) (assq G12815 (G12401 G12831)))) G12829) '(displaced-lexical . #f))) (G12467)))) (assq G12815 G12816)))) (G11127 G12815)))) (set! G11673 cons) (set! G11675 car) (set! G11677 cdr) (set! G11679 (lambda (G12837) (G12451 '#f '"unbound identifier" G12837 (G19248)))) (set! G11681 (lambda (G12839 G12840) (if (G11641 G12839) ((lambda (G12843) ((lambda (G12845) ((lambda (G12847) ((lambda (G12849) ((lambda () (begin (if G12845 (void) (G11679 G12843)) ((lambda (G12851) (if (memv G12851 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values G12849 (G11677 G12847) G12843) (values 'other '#f '#f))) G12849))))) (G11675 G12847))) (G11671 G12845 G12840))) (G11667 G12843))) G12839) (if (G11627 G12839) ((lambda (G12852) (if (G11641 G12852) ((lambda (G12854) ((lambda (G12856) ((lambda (G12858) ((lambda () (begin (if G12854 (void) (G11679 G12852)) ((lambda (G12860) (if (memv G12860 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values G12858 (G11677 G12856) G12852) (values 'call '#f '#f))) G12858))))) (G11675 G12856))) (G11671 G12854 G12840))) (G11667 G12852)) (values 'call '#f '#f))) (G11635 G12839)) ((lambda (G12861) (if (G11657 G12861) (values 'constant G12861 '#f) (values 'other '#f '#f))) (G11663 G12839)))))) (set! G11704 (lambda (G12863 G12864) (if (procedure? G12863) (cons* 'local-macro G12863 G12864) (if (if (pair? G12863) (if (eq? (car G12863) 'macro!) (begin '#f (procedure? (cdr G12863))) '#f) '#f) (cons* 'local-macro! (cdr G12863) G12864) (if (if (pair? G12863) (begin '#f (eq? (car G12863) '$rtd)) '#f) G12863 (assertion-violation 'expand '"invalid transformer" G12863)))))) (set! G11706 (lambda (G12867) (if (procedure? G12867) (cons 'macro! G12867) (assertion-violation 'make-variable-transformer '"not a procedure" G12867)))) (set! G11708 (lambda (G12869) (if (pair? G12869) (if (eq? (car G12869) 'macro!) (begin '#f (procedure? (cdr G12869))) '#f) '#f))) (set! G11710 (lambda (G12871) (if (G11708 G12871) (cdr G12871) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G12871)))) (set! G11712 (lambda (G12873) (G11704 (eval-core (G10556 G12873)) G12873))) (set! G12100 (lambda (G12875) ((lambda (G12877) ((lambda (G12879) (if (if G12879 (begin '#f (apply (lambda (G12881 G12882 G12883 G12884) (G11641 G12881)) G12879)) '#f) (apply (lambda (G12889 G12890 G12891 G12892) (begin (G12260 G12890 G12875) (values G12889 (cons 'defun (cons G12890 (cons G12891 G12892)))))) G12879) ((lambda (G12897) ((lambda (G12899) (if (if G12899 (begin '#f (apply (lambda (G12901 G12902) (G11641 G12901)) G12899)) '#f) (apply (lambda (G12905 G12906) (values G12905 (cons 'expr G12906))) G12899) ((lambda (G12909) ((lambda (G12911) (if (if G12911 (begin '#f (apply (lambda (G12913) (G11641 G12913)) G12911)) '#f) (apply (lambda (G12915) (values G12915 (cons 'expr (G12146 '(void))))) G12911) (G12453 '#f '"invalid syntax" G12909))) (G12220 G12909 '(_ any)))) G12897))) (G12220 G12897 '(_ any any)))) G12877))) (G12220 G12877 '(_ (any . any) any . each-any)))) G12875))) (set! G12102 (lambda (G12917) ((lambda (G12919) ((lambda (G12921) (if (if G12921 (begin '#f (apply (lambda (G12923 G12924) (G11641 G12923)) G12921)) '#f) (apply (lambda (G12927 G12928) (values G12927 G12928)) G12921) (G12453 '#f '"invalid syntax" G12919))) (G12220 G12919 '(_ any any)))) G12917))) (set! G12104 (make-eq-hashtable)) (set! G12106 (lambda (G12931) ((lambda (G12933) (if G12933 G12933 (begin '#f ((lambda (G12935) ((lambda (G12937) ((lambda (G12939) ((lambda () (begin (hashtable-set! G12104 G12931 G12939) G12939)))) ((lambda (G12941) (if G12941 ((lambda (G12943) ((lambda (G12945 G12946) (G11621 (G11542 (list G12945) (list G11511) (list G12946) '#f) G12937)) (car G12943) (cdr G12943))) G12941) G12937)) (assq G12931 G12935)))) (G11587 G12931 G11511 '() '()))) (G11085 (G11121 '(psyntax system $all))))))) (hashtable-ref G12104 G12931 '#f)))) (set! G12108 car) (set! G12110 cdr) (set! G12112 set-cdr!) (set! G12114 (lambda (G12949 G12950 G12951) (cons (cons* G12949 'lexical G12950 '#f) G12951))) (set! G12116 (lambda (G12955 G12956 G12957) (if (null? G12955) G12957 (G12116 (cdr G12955) (cdr G12956) (G12114 (car G12955) (car G12956) G12957))))) (set! G12118 (lambda (G12961 G12962 G12963 G12964) ((lambda (G12969) ((lambda (G12971) (if G12971 (apply (lambda (G12973 G12974 G12975 G12976) (if (not (G11651 G12973)) (G12150 G12961 G12973) ((lambda (G12981 G12982) ((lambda (G12985 G12986) ((lambda (G12989 G12990) (G12964 '#f G12981 G12990 G12989)) (G12278 (G11621 G12985 (cons G12975 G12976)) G12986 G12963) (G12252 (map (lambda (G12993) (G11621 G12985 G12993)) G12974) G12986 G12963))) (G11570 G12973 G12982) (G12116 G12982 G12981 G12962))) (map G11515 G12973) (map G11519 G12973)))) G12971) (G12453 '#f '"invalid syntax" G12969))) (G12220 G12969 '(_ #(each (any any)) any . each-any)))) G12961))) (set! G12120 (lambda (G12995 G12996 G12997) (G12118 G12995 G12996 G12997 G11488))) (set! G12122 (lambda (G13001 G13002 G13003) (G12118 G13001 G13002 G13003 G11489))) (set! G12124 (lambda (G13007 G13008 G13009) ((lambda (G13014) (begin (set! G13014 (lambda (G13033) ((lambda (G13035) (if G13035 G13035 (begin '#f (G12453 '#f '"unbound identifier" G13007 G13033)))) (G11667 G13033)))) ((lambda (G13015) ((lambda (G13017) (if G13017 (apply (lambda (G13019 G13020 G13021 G13022) (if (not (G11651 G13019)) (G12150 G13007 G13019) ((lambda (G13027 G13028) (G12278 (cons G13021 G13022) (append (map cons G13027 G13028) G13008) (append (map cons G13027 G13028) G13009))) (map G13014 G13019) (map (lambda (G13031) (G11712 (G12317 G13031 G13009))) G13020)))) G13017) (G12453 '#f '"invalid syntax" G13015))) (G12220 G13015 '(_ #(each (any any)) any . each-any)))) G13007))) '#f))) (set! G12126 (lambda (G13037 G13038 G13039) ((lambda (G13043) ((lambda (G13045) (if (if G13045 (begin '#f (apply (lambda (G13047) (G11641 G13047)) G13045)) '#f) (apply (lambda (G13049) ((lambda (G13051) ((lambda (G13053) ((lambda (G13055) ((lambda () (begin (if G13051 (void) (G11679 G13049)) (if (if (eq? G13055 '$rtd) (begin '#f (not (list? (G11677 G13053)))) '#f) (void) (G12453 '#f '"not a record type" G13037)) (list 'quote (G11677 G13053)))))) (G11675 G13053))) (G11671 G13051 G13038))) (G11667 G13049))) G13045) (G12453 '#f '"invalid syntax" G13043))) (G12220 G13043 '(_ any)))) G13037))) (set! G12128 (lambda (G13057 G13058 G13059) ((lambda (G13063) ((lambda (G13065) (if (if G13065 (begin '#f (apply (lambda (G13067) (G11641 G13067)) G13065)) '#f) (apply (lambda (G13069) ((lambda (G13071) ((lambda (G13073) ((lambda (G13075) ((lambda () (begin (if G13071 (void) (G11679 G13069)) (if (if (eq? G13075 '$rtd) (begin '#f (list? (G11677 G13073))) '#f) (void) (G12453 '#f '"not a record type" G13057)) (G12256 (car (G11677 G13073)) G13058 G13059))))) (G11675 G13073))) (G11671 G13071 G13058))) (G11667 G13069))) G13065) (G12453 '#f '"invalid syntax" G13063))) (G12220 G13063 '(_ any)))) G13057))) (set! G12130 (lambda (G13077 G13078 G13079) ((lambda (G13083) ((lambda (G13085) (if (if G13085 (begin '#f (apply (lambda (G13087) (G11641 G13087)) G13085)) '#f) (apply (lambda (G13089) ((lambda (G13091) ((lambda (G13093) ((lambda (G13095) ((lambda () (begin (if G13091 (void) (G11679 G13089)) (if (if (eq? G13095 '$rtd) (begin '#f (list? (G11677 G13093))) '#f) (void) (G12453 '#f '"invalid type" G13077)) (G12256 (cadr (G11677 G13093)) G13078 G13079))))) (G11675 G13093))) (G11671 G13091 G13078))) (G11667 G13089))) G13085) (G12453 '#f '"invalid syntax" G13083))) (G12220 G13083 '(_ any)))) G13077))) (set! G12132 (lambda (G13097 G13098 G13099) ((lambda (G13103) ((lambda (G13105) (if G13105 (apply (lambda (G13107 G13108 G13109) (list 'if (G12256 G13107 G13098 G13099) (G11486 '#f (G12252 (cons G13108 G13109) G13098 G13099)) (G11487))) G13105) (G12453 '#f '"invalid syntax" G13103))) (G12220 G13103 '(_ any any . each-any)))) G13097))) (set! G12134 (lambda (G13113 G13114 G13115) ((lambda (G13119) ((lambda (G13121) (if G13121 (apply (lambda (G13123 G13124 G13125) (list 'if (G12256 G13123 G13114 G13115) (G11487) (G11486 '#f (G12252 (cons G13124 G13125) G13114 G13115)))) G13121) (G12453 '#f '"invalid syntax" G13119))) (G12220 G13119 '(_ any any . each-any)))) G13113))) (set! G12136 (lambda (G13129 G13130 G13131) ((lambda (G13135) ((lambda (G13137) (if G13137 (apply (lambda (G13139 G13140 G13141) (list 'if (G12256 G13139 G13130 G13131) (G12256 G13140 G13130 G13131) (G12256 G13141 G13130 G13131))) G13137) ((lambda (G13145) ((lambda (G13147) (if G13147 (apply (lambda (G13149 G13150) (list 'if (G12256 G13149 G13130 G13131) (G12256 G13150 G13130 G13131) (G11487))) G13147) (G12453 '#f '"invalid syntax" G13145))) (G12220 G13145 '(_ any any)))) G13135))) (G12220 G13135 '(_ any any any)))) G13129))) (set! G12138 (lambda (G13153 G13154 G13155) ((lambda (G13160 G13162) (begin (set! G13160 (lambda (G13217 G13218 G13219) ((lambda (G13223) ((lambda (G13225) (if G13225 (apply (lambda (G13227 G13228 G13229) (list 'if ((lambda (G13233) (if (= '1 (length G13233)) (list '(primitive eqv?) G13217 (list 'quote (car G13233))) (list '(primitive memv) G13217 (list 'quote G13233)))) (G11663 G13227)) (G11486 '#f (G12252 (cons G13228 G13229) G13154 G13155)) G13219)) G13225) ((lambda (G13235) ((lambda (G13237) (if G13237 (apply (lambda (G13239) (G12453 '#f '"invalid syntax" G13153)) G13237) (G12453 '#f '"invalid syntax" G13235))) (G12220 G13235 'any))) G13223))) (G12220 G13223 '(each-any any . each-any)))) G13218))) (set! G13162 (lambda (G13187 G13188) ((lambda (G13191) ((lambda (G13193) (if G13193 (apply (lambda (G13195 G13196 G13197) (G13160 G13187 G13188 (G11487))) G13193) ((lambda (G13201) ((lambda (G13203) (if G13203 (apply (lambda (G13205 G13206 G13207) (if (if (G11641 G13205) (begin '#f (G11649 G13205 (G12106 'else))) '#f) (G11486 '#f (G12252 (cons G13206 G13207) G13154 G13155)) (G12453 '#f '"invalid syntax" G13153))) G13203) ((lambda (G13211) ((lambda (G13213) (if G13213 (apply (lambda (G13215) (G12453 '#f '"invalid syntax" G13153)) G13213) (G12453 '#f '"invalid syntax" G13211))) (G12220 G13211 'any))) G13201))) (G12220 G13201 '(any any . each-any)))) G13191))) (G12220 G13191 '(each-any any . each-any)))) G13188))) ((lambda (G13163) ((lambda (G13165) (if G13165 (apply (lambda (G13167) (G11486 '#f (list (G12256 G13167 G13154 G13155) (G11487)))) G13165) ((lambda (G13169) ((lambda (G13171) (if G13171 (apply (lambda (G13173 G13174 G13175) ((lambda (G13179) (G11485 '#f (list G13179) (list (G12256 G13173 G13154 G13155)) ((letrec ((G13181 (lambda (G13183 G13184) (if (null? G13184) (G13162 G13179 G13183) (G13160 G13179 G13183 (G13181 (car G13184) (cdr G13184))))))) G13181) G13174 G13175))) (G11515 't))) G13171) (G12453 '#f '"invalid syntax" G13169))) (G12220 G13169 '(_ any any . each-any)))) G13163))) (G12220 G13163 '(_ any)))) G13153))) '#f '#f))) (set! G12140 (lambda (G13241 G13242 G13243) ((lambda (G13247) ((lambda (G13249) (if G13249 (apply (lambda (G13251) (list 'quote (G11663 G13251))) G13249) (G12453 '#f '"invalid syntax" G13247))) (G12220 G13247 '(_ any)))) G13241))) (set! G12142 (lambda (G13253 G13254 G13255) ((lambda (G13259) ((lambda (G13261) (if G13261 (apply (lambda (G13263 G13264 G13265) (call-with-values (lambda () (G12264 G13253 G13263 (map cons G13264 G13265) G13254 G13255)) (lambda (G13271 G13272) ((lambda (G13275 G13276) (G11484 '#f G13276 G13275)) G13272 G13271)))) G13261) (G12453 '#f '"invalid syntax" G13259))) (G12220 G13259 '(_ . #(each (any any . each-any)))))) G13253))) (set! G12144 (lambda (G13279 G13280 G13281) ((lambda (G13285) ((lambda (G13287) (if G13287 (apply (lambda (G13289 G13290 G13291) (call-with-values (lambda () (G12262 G13279 G13289 (cons G13290 G13291) G13280 G13281)) (lambda (G13297 G13298) ((lambda (G13301 G13302) (G11483 '#f G13302 G13301)) G13298 G13297)))) G13287) (G12453 '#f '"invalid syntax" G13285))) (G12220 G13285 '(_ any any . each-any)))) G13279))) (set! G12146 (lambda (G13305) (G11617 ((letrec ((G13307 (lambda (G13309) (if (G11585 G13309) G13309 (if (pair? G13309) (cons (G13307 (car G13309)) (G13307 (cdr G13309))) (if (symbol? G13309) (G12106 G13309) (if (vector? G13309) (vector-map G13307 G13309) G13309))))))) G13307) G13305) '() '() '()))) (set! G12148 (lambda (G13311) ((lambda (G13313) ((lambda (G13315) (if G13315 (apply (lambda (G13317 G13318 G13319 G13320) ((lambda (G13325) (begin (G12260 (map car G13325) G13311) ((lambda (G13327) (G12146 (list 'let (map list G13327 G13318) ((letrec ((G13329 (lambda (G13331 G13332) (if (null? G13331) (cons 'begin (cons '#f (cons G13319 G13320))) (list 'syntax-case (car G13332) '() (list (car G13331) (G13329 (cdr G13331) (cdr G13332))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G13331)) (car G13332)))))))) G13329) G13317 G13327)))) (G12439 G13318)))) ((letrec ((G13335 (lambda (G13337) (if (null? G13337) '() (call-with-values (lambda () (G12218 (car G13337) '())) (lambda (G13341 G13342) ((lambda (G13345 G13346) (append G13345 (G13335 (cdr G13337)))) G13342 G13341))))))) G13335) G13317))) G13315) (G12453 '#f '"invalid syntax" G13313))) (G12220 G13313 '(_ #(each (any any)) any . each-any)))) G13311))) (set! G12150 (lambda (G13349 G13350) ((lambda (G13353) ((lambda (G13355) (if G13355 (apply (lambda (G13357 G13358) ((letrec ((G13361 (lambda (G13363) (if (null? G13363) (values) (if (not (G11641 (car G13363))) (G12453 '#f '"not an identifier" G13349 (car G13363)) (begin (G13361 (cdr G13363)) (if (G11655 (car G13363) (cdr G13363)) (G12453 '#f '"duplicate binding" G13349 (car G13363)) (void)))))))) G13361) (if (G11641 G13358) (cons G13358 G13357) (if (G11631 G13358) G13357 (G12453 '#f '"not an identifier" G13349 G13358))))) G13355) ((lambda (G13365) ((lambda (G13367) (if G13367 (apply (lambda () (G12453 '#f '"malformed binding form" G13349 G13350)) G13367) (G12453 '#f '"invalid syntax" G13365))) (G12220 G13365 '_))) G13353))) (G12220 G13353 '#(each+ any () any)))) G13350))) (set! G12152 (lambda (G13369) ((lambda (G13371) ((lambda (G13373) (if G13373 (apply (lambda (G13375 G13376 G13377 G13378) (if (G11651 G13375) (G12146 (cons (cons 'lambda (cons G13375 (cons G13377 G13378))) G13376)) (G12150 G13369 G13375))) G13373) ((lambda (G13383) ((lambda (G13385) (if (if G13385 (begin '#f (apply (lambda (G13387 G13388 G13389 G13390 G13391) (G11641 G13387)) G13385)) '#f) (apply (lambda (G13397 G13398 G13399 G13400 G13401) (if (G11651 G13398) (G12146 (cons (list 'letrec (list (list G13397 (cons 'lambda (cons G13398 (cons G13400 G13401))))) G13397) G13399)) (G12150 G13369 G13398))) G13385) (G12453 '#f '"invalid syntax" G13383))) (G12220 G13383 '(_ any #(each (any any)) any . each-any)))) G13371))) (G12220 G13371 '(_ #(each (any any)) any . each-any)))) G13369))) (set! G12154 (lambda (G13407) ((lambda (G13410 G13412) (begin (set! G13410 (lambda (G13508 G13509 G13510) (begin (if (G11641 G13508) (void) (G12453 '#f '"not an indentifier" G13407 G13508)) (if (G11655 G13508 G13509) (G12453 '#f '"duplicate binding" G13407 G13508) (void)) ((lambda (G13514) (values G13514 (cons G13508 G13509) (cons G13514 G13510))) (gensym (G12459 G13508)))))) (set! G13412 (lambda (G13490 G13491 G13492) (if (null? G13490) (values '() G13491 G13492) (call-with-values (lambda () (G13410 (car G13490) G13491 G13492)) (lambda (G13496 G13497 G13498) (call-with-values (lambda () (G13412 (cdr G13490) G13497 G13498)) (lambda (G13502 G13503 G13504) (values (cons G13496 G13502) G13503 G13504)))))))) ((lambda (G13413) ((lambda (G13415) (if G13415 (apply (lambda (G13417 G13418) (cons* (G12146 'let) '() G13417 G13418)) G13415) ((lambda (G13421) ((lambda (G13423) (if G13423 (apply (lambda (G13425 G13426 G13427 G13428) (G12146 ((letrec ((G13433 (lambda (G13435 G13436 G13437 G13438) (if (null? G13435) (cons 'let (cons (map list G13437 G13438) (cons G13427 G13428))) ((lambda (G13443) ((lambda (G13445) (if G13445 (apply (lambda (G13447) (call-with-values (lambda () (G13412 G13447 G13437 G13438)) (lambda (G13452 G13453 G13454) ((lambda (G13458 G13459 G13460) (list 'call-with-values (list 'lambda '() (car G13436)) (list 'lambda G13460 (G13433 (cdr G13435) (cdr G13436) G13459 G13458)))) G13454 G13453 G13452)))) G13445) ((lambda (G13464) ((lambda (G13466) (if G13466 (apply (lambda (G13468 G13469) (call-with-values (lambda () (G13410 G13469 G13437 G13438)) (lambda (G13472 G13473 G13474) (call-with-values (lambda () (G13412 G13468 G13473 G13474)) (lambda (G13478 G13479 G13480) (list 'call-with-values (list 'lambda '() (car G13436)) (list 'lambda (append G13478 G13472) (G13433 (cdr G13435) (cdr G13436) G13479 G13480)))))))) G13466) ((lambda (G13484) ((lambda (G13486) (if G13486 (apply (lambda (G13488) (G12453 '#f '"malformed bindings" G13407 G13488)) G13486) (G12453 '#f '"invalid syntax" G13484))) (G12220 G13484 'any))) G13464))) (G12220 G13464 '#(each+ any () any)))) G13443))) (G12220 G13443 'each-any))) (car G13435)))))) G13433) G13425 G13426 '() '()))) G13423) (G12453 '#f '"invalid syntax" G13421))) (G12220 G13421 '(_ #(each (any any)) any . each-any)))) G13413))) (G12220 G13413 '(_ () any . each-any)))) G13407))) '#f '#f))) (set! G12156 (lambda (G13516) ((lambda (G13519) (begin (set! G13519 (lambda (G13566) (if (null? G13566) (void) ((lambda (G13568) (begin (if (G11641 G13568) (void) (G12453 '#f '"not an identifier" G13516 G13568)) (G13519 (cdr G13566)) (if (G11655 G13568 (cdr G13566)) (G12453 '#f '"duplicate identifier" G13516 G13568) (void)))) (car G13566))))) ((lambda (G13520) ((lambda (G13522) (if G13522 (apply (lambda (G13524 G13525) (cons* (G12146 'let) '() G13524 G13525)) G13522) ((lambda (G13528) ((lambda (G13530) (if G13530 (apply (lambda (G13532 G13533 G13534 G13535) (G12146 ((letrec ((G13540 (lambda (G13542 G13543) (if (null? G13542) (cons 'begin (cons G13534 G13535)) ((lambda (G13546) ((lambda (G13548) (if G13548 (apply (lambda (G13550) (begin (G13519 G13550) (list 'call-with-values (list 'lambda '() (car G13543)) (list 'lambda G13550 (G13540 (cdr G13542) (cdr G13543)))))) G13548) ((lambda (G13552) ((lambda (G13554) (if G13554 (apply (lambda (G13556 G13557) (begin (G13519 (cons G13557 G13556)) (list 'call-with-values (list 'lambda '() (car G13543)) (list 'lambda (append G13556 G13557) (G13540 (cdr G13542) (cdr G13543)))))) G13554) ((lambda (G13560) ((lambda (G13562) (if G13562 (apply (lambda (G13564) (G12453 '#f '"malformed bindings" G13516 G13564)) G13562) (G12453 '#f '"invalid syntax" G13560))) (G12220 G13560 'any))) G13552))) (G12220 G13552 '#(each+ any () any)))) G13546))) (G12220 G13546 'each-any))) (car G13542)))))) G13540) G13532 G13533))) G13530) (G12453 '#f '"invalid syntax" G13528))) (G12220 G13528 '(_ #(each (any any)) any . each-any)))) G13520))) (G12220 G13520 '(_ () any . each-any)))) G13516))) '#f))) (set! G12158 (lambda (G13570) ((lambda (G13572) ((lambda (G13574) (if G13574 (apply (lambda (G13576 G13577 G13578 G13579) (if (G11651 G13577) (G12146 (list 'make-traced-procedure (list 'quote G13576) (cons 'lambda (cons G13577 (cons G13578 G13579))))) (G12150 G13570 G13577))) G13574) ((lambda (G13584) ((lambda (G13586) (if G13586 (apply (lambda (G13588 G13589 G13590 G13591 G13592) (if (G11651 (cons G13590 G13589)) (G12146 (list 'make-traced-procedure (list 'quote G13588) (cons 'lambda (cons (append G13589 G13590) (cons G13591 G13592))))) (G12150 G13570 (append G13589 G13590)))) G13586) (G12453 '#f '"invalid syntax" G13584))) (G12220 G13584 '(_ any #(each+ any () any) any . each-any)))) G13572))) (G12220 G13572 '(_ any each-any any . each-any)))) G13570))) (set! G12160 (lambda (G13598) ((lambda (G13600) ((lambda (G13602) (if G13602 (apply (lambda (G13604 G13605 G13606 G13607) (if (G11651 G13605) (G12146 (list 'define G13604 (list 'make-traced-procedure (list 'quote G13604) (cons 'lambda (cons G13605 (cons G13606 G13607)))))) (G12150 G13598 G13605))) G13602) ((lambda (G13612) ((lambda (G13614) (if G13614 (apply (lambda (G13616 G13617 G13618 G13619 G13620) (if (G11651 (cons G13618 G13617)) (G12146 (list 'define G13616 (list 'make-traced-procedure (list 'quote G13616) (cons 'lambda (cons (append G13617 G13618) (cons G13619 G13620)))))) (G12150 G13598 (append G13617 G13618)))) G13614) ((lambda (G13626) ((lambda (G13628) (if G13628 (apply (lambda (G13630 G13631) (if (G11641 G13630) (G12146 (list 'define G13630 (list 'let (list (list 'v G13631)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G13630) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G12453 '#f '"invalid name" G13598))) G13628) (G12453 '#f '"invalid syntax" G13626))) (G12220 G13626 '(_ any any)))) G13612))) (G12220 G13612 '(_ (any . #(each+ any () any)) any . each-any)))) G13600))) (G12220 G13600 '(_ (any . each-any) any . each-any)))) G13598))) (set! G12162 (lambda (G13634) ((lambda (G13636) ((lambda (G13638) (if G13638 (apply (lambda (G13640 G13641) (if (G11641 G13640) (G12146 (list 'define-syntax G13640 (list 'make-traced-macro (list 'quote G13640) G13641))) (G12453 '#f '"invalid name" G13634))) G13638) (G12453 '#f '"invalid syntax" G13636))) (G12220 G13636 '(_ any any)))) G13634))) (set! G12164 (lambda (G13644) (lambda (G13646) ((lambda (G13648) ((lambda (G13650) (if G13650 (apply (lambda (G13652 G13653 G13654 G13655) (if (G11651 G13652) ((lambda (G13660) (G12146 (cons G13644 (cons (map list G13652 G13660) (cons G13654 G13655))))) (map (lambda (G13662 G13663) (list 'make-traced-macro (list 'quote G13662) G13663)) G13652 G13653)) (G12150 G13646 G13652))) G13650) (G12453 '#f '"invalid syntax" G13648))) (G12220 G13648 '(_ #(each (any any)) any . each-any)))) G13646)))) (set! G12166 (G12164 'let-syntax)) (set! G12168 (G12164 'letrec-syntax)) (set! G12170 (lambda (G13666) ((lambda (G13669) (begin (set! G13669 (lambda (G13692 G13693 G13694) ((lambda (G13699 G13701) (begin (set! G13699 (lambda (G13750 G13751) ((lambda (G13754) ((lambda (G13756) (if G13756 (apply (lambda (G13758 G13759) ((lambda (G13762) (list 'let (list (list G13762 G13758)) (list 'if G13762 (list G13759 G13762) G13751))) (gensym))) G13756) ((lambda (G13764) ((lambda (G13766) (if G13766 (apply (lambda (G13768) ((lambda (G13770) (list 'let (list (list G13770 G13768)) (list 'if G13770 G13770 G13751))) (gensym))) G13766) ((lambda (G13772) ((lambda (G13774) (if G13774 (apply (lambda (G13776 G13777 G13778) (list 'if G13776 (cons 'begin (cons G13777 G13778)) G13751)) G13774) ((lambda (G13782) ((lambda (G13784) (if G13784 (apply (lambda () (G12453 '#f '"invalid guard clause" G13750)) G13784) (G12453 '#f '"invalid syntax" G13782))) (G12220 G13782 '_))) G13772))) (G12220 G13772 '(any any . each-any)))) G13764))) (G12220 G13764 '(any)))) G13754))) (G12220 G13754 '(any #(scheme-id =>) any)))) G13750))) (set! G13701 (lambda (G13712) ((lambda (G13714) ((lambda (G13716) (if G13716 (apply (lambda () (values (list 'raise G13692) '#t)) G13716) ((lambda (G13718) ((lambda (G13720) (if G13720 (apply (lambda (G13722 G13723) (values (cons 'begin (cons G13722 G13723)) '#f)) G13720) ((lambda (G13726) ((lambda (G13728) (if G13728 (apply (lambda (G13730 G13731) (call-with-values (lambda () (G13701 G13731)) (lambda (G13736 G13737) ((lambda (G13740 G13741) (values (G13699 G13730 G13741) G13740)) G13737 G13736)))) G13728) ((lambda (G13744) ((lambda (G13746) (if G13746 (apply (lambda (G13748) (G12453 '#f '"invalid guard clause" G13748)) G13746) (G12453 '#f '"invalid syntax" G13744))) (G12220 G13744 'any))) G13726))) (G12220 G13726 '(any . any)))) G13718))) (G12220 G13718 '((#(scheme-id else) any . each-any))))) G13714))) (G12220 G13714 '()))) G13712))) (call-with-values (lambda () (G13701 G13694)) (lambda (G13704 G13705) ((lambda (G13708 G13709) (if G13708 (list G13693 G13709) G13709)) G13705 G13704))))) '#f '#f))) ((lambda (G13670) ((lambda (G13672) (if (if G13672 (begin '#f (apply (lambda (G13674 G13675 G13676 G13677) (G11641 G13674)) G13672)) '#f) (apply (lambda (G13682 G13683 G13684 G13685) ((lambda (G13690) (G12146 (list 'call/cc (list 'lambda (list G13690) (list 'with-exception-handler (list 'lambda (list G13682) (G13669 G13682 G13690 G13683)) (cons 'lambda (cons '() (cons '#f (cons G13684 G13685))))))))) (gensym))) G13672) (G12453 '#f '"invalid syntax" G13670))) (G12220 G13670 '(_ (any . each-any) any . each-any)))) G13666))) '#f))) (set! G12172 (lambda (G13786) ((lambda (G13789 G13791) (begin (set! G13789 (lambda (G13814) ((lambda (G13816) (if G13816 G13816 (begin '#f (if (not (memq (car G13814) (cdr G13814))) (begin '#f (G13789 (cdr G13814))) '#f)))) (null? G13814)))) (set! G13791 (lambda (G13812) (if (null? G13812) '() (cons (car G13812) (G13791 (remq (car G13812) (cdr G13812))))))) ((lambda (G13792) ((lambda (G13794) (if (if G13794 (begin '#f (apply (lambda (G13796 G13797 G13798) (if (G11641 G13796) (if (G11641 G13798) (begin '#f (for-all G11641 G13797)) '#f) '#f)) G13794)) '#f) (apply (lambda (G13802 G13803 G13804) ((lambda (G13808 G13809) (G12146 (list 'begin (list 'define G13809 (list 'enum-set-constructor (list 'make-enumeration (list 'quote G13808)))) (list 'define-syntax G13802 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G13808)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G13802) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G13804 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G13804) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G13808)) (cons 'syntax-violation (cons (list 'quote G13804) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G13809 '('(n* ...)))))))))))) (G13791 (G12459 G13803)) (gensym))) G13794) (G12453 '#f '"invalid syntax" G13792))) (G12220 G13792 '(_ any each-any any)))) G13786))) '#f '#f))) (set! G12174 (lambda (G13818) ((lambda (G13820) ((lambda (G13822) (if G13822 (apply (lambda (G13824) ((lambda (G13826) (G12146 (list 'time-it G13826 (list 'lambda '() G13824)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G13830 G13831) ((lambda (G13834 G13835) (begin (write (G12459 G13824) G13835) (G13834))) G13831 G13830))))) G13822) (G12453 '#f '"invalid syntax" G13820))) (G12220 G13820 '(_ any)))) G13818))) (set! G12176 (lambda (G13838) ((lambda (G13840) ((lambda (G13842) (if G13842 (apply (lambda (G13844) (G12146 (list 'make-promise (list 'lambda '() G13844)))) G13842) (G12453 '#f '"invalid syntax" G13840))) (G12220 G13840 '(_ any)))) G13838))) (set! G12178 (lambda (G13846) ((lambda (G13848) ((lambda (G13850) (if G13850 (apply (lambda (G13852) (G12146 (list 'unless G13852 (list 'assertion-violation ''assert '"assertion failed" (list 'quote G13852))))) G13850) (G12453 '#f '"invalid syntax" G13848))) (G12220 G13848 '(_ any)))) G13846))) (set! G12180 (lambda (G13854) ((lambda (G13856) ((lambda (G13858) (if G13858 (apply (lambda (G13860) ((lambda (G13862) (if (eqv? G13862 'little) (G12146 ''little) (if (eqv? G13862 'big) (G12146 ''big) (G12453 '#f '"endianness must be big or little" G13854)))) (G12459 G13860))) G13858) (G12453 '#f '"invalid syntax" G13856))) (G12220 G13856 '(_ any)))) G13854))) (set! G12182 (lambda (G13863) ((lambda (G13865) ((lambda (G13867) (if G13867 (apply (lambda (G13869) (G12146 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G13869)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G13869) '((syntax (e* ...)))))))))) G13867) ((lambda (G13871) ((lambda (G13873) (if (if G13873 (begin '#f (apply (lambda (G13875 G13876 G13877 G13878 G13879) (if (G11641 G13875) (if (G11641 G13877) (begin '#f (G11641 G13878)) '#f) '#f)) G13873)) '#f) (apply (lambda (G13885 G13886 G13887 G13888 G13889) (G12146 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G13886)) (list (list 'set! 'id G13888) (list 'syntax G13889)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G13886 '(e* ...))))))))) G13873) (G12453 '#f '"invalid syntax" G13871))) (G12220 G13871 '(_ (any any) ((#(scheme-id set!) any any) any))))) G13865))) (G12220 G13865 '(_ any)))) G13863))) (set! G12184 (lambda (G13895) ((lambda (G13898) (begin (set! G13898 (lambda (G13921) ((lambda (G13923) ((lambda (G13925) (if G13925 (apply (lambda (G13927 G13928) (list G13927 G13928 G13927)) G13925) ((lambda (G13931) ((lambda (G13933) (if G13933 (apply (lambda (G13935 G13936 G13937) (list G13935 G13936 G13937)) G13933) ((lambda (G13941) ((lambda (G13943) (if G13943 (apply (lambda () (G12453 '#f '"invalid binding" G13895)) G13943) (G12453 '#f '"invalid syntax" G13941))) (G12220 G13941 '_))) G13931))) (G12220 G13931 '(any any any)))) G13923))) (G12220 G13923 '(any any)))) G13921))) ((lambda (G13899) ((lambda (G13901) (if G13901 (apply (lambda (G13903 G13904 G13905 G13906) ((lambda (G13911) ((lambda (G13913) (if G13913 (apply (lambda (G13915 G13916 G13917) (if (G11651 G13915) (G12146 (list 'letrec (list (list 'loop (list 'lambda G13915 (list 'if G13904 (cons 'begin (cons '(if #f #f) G13905)) (cons 'begin (append G13906 (list (cons 'loop G13917)))))))) (cons 'loop G13916))) (G12453 '#f '"invalid bindings" G13895))) G13913) (G12453 '#f '"invalid syntax" G13911))) (G12220 G13911 '#(each (any any any))))) (map G13898 G13903))) G13901) (G12453 '#f '"invalid syntax" G13899))) (G12220 G13899 '(_ each-any (any . each-any) . each-any)))) G13895))) '#f))) (set! G12186 (lambda (G13945) ((lambda (G13947) ((lambda (G13949) (if (if G13949 (begin '#f (apply (lambda (G13951 G13952 G13953 G13954) (for-all G11641 G13951)) G13949)) '#f) (apply (lambda (G13959 G13960 G13961 G13962) (G12146 ((letrec ((G13967 (lambda (G13969) (if (null? G13969) (cons 'let (cons '() (cons G13961 G13962))) (list 'let (list (car G13969)) (G13967 (cdr G13969))))))) G13967) (map list G13959 G13960)))) G13949) (G12453 '#f '"invalid syntax" G13947))) (G12220 G13947 '(_ #(each (any any)) any . each-any)))) G13945))) (set! G12188 (lambda (G13971) ((lambda (G13973) ((lambda (G13975) (if G13975 (apply (lambda () '#f) G13975) ((lambda (G13977) ((lambda (G13979) (if G13979 (apply (lambda (G13981 G13982) (G12146 ((letrec ((G13985 (lambda (G13987 G13988) (if (null? G13988) (list 'begin '#f G13987) (list 'let (list (list 't G13987)) (list 'if 't 't (G13985 (car G13988) (cdr G13988)))))))) G13985) G13981 G13982))) G13979) (G12453 '#f '"invalid syntax" G13977))) (G12220 G13977 '(_ any . each-any)))) G13973))) (G12220 G13973 '(_)))) G13971))) (set! G12190 (lambda (G13991) ((lambda (G13993) ((lambda (G13995) (if G13995 (apply (lambda () '#t) G13995) ((lambda (G13997) ((lambda (G13999) (if G13999 (apply (lambda (G14001 G14002) (G12146 ((letrec ((G14005 (lambda (G14007 G14008) (if (null? G14008) (list 'begin '#f G14007) (cons 'if (cons G14007 (cons (G14005 (car G14008) (cdr G14008)) '(#f)))))))) G14005) G14001 G14002))) G13999) (G12453 '#f '"invalid syntax" G13997))) (G12220 G13997 '(_ any . each-any)))) G13993))) (G12220 G13993 '(_)))) G13991))) (set! G12192 (lambda (G14011) ((lambda (G14013) ((lambda (G14015) (if G14015 (apply (lambda (G14017 G14018) (G12146 ((letrec ((G14021 (lambda (G14023 G14024) (if (null? G14024) ((lambda (G14027) ((lambda (G14029) (if G14029 (apply (lambda (G14031 G14032) (cons 'begin (cons G14031 G14032))) G14029) ((lambda (G14035) ((lambda (G14037) (if G14037 (apply (lambda (G14039 G14040) (list 'let (list (list 't G14039)) (list 'if 't (cons G14040 '(t))))) G14037) ((lambda (G14043) ((lambda (G14045) (if G14045 (apply (lambda (G14047) (cons 'or (cons G14047 '((if #f #f))))) G14045) ((lambda (G14049) ((lambda (G14051) (if G14051 (apply (lambda (G14053 G14054) (list 'if G14053 (cons 'begin G14054))) G14051) ((lambda (G14057) ((lambda (G14059) (if G14059 (apply (lambda () (G12453 '#f '"invalid last clause" G14011)) G14059) (G12453 '#f '"invalid syntax" G14057))) (G12220 G14057 '_))) G14049))) (G12220 G14049 '(any . each-any)))) G14043))) (G12220 G14043 '(any)))) G14035))) (G12220 G14035 '(any #(scheme-id =>) any)))) G14027))) (G12220 G14027 '(#(scheme-id else) any . each-any)))) G14023) ((lambda (G14061) ((lambda (G14063) (if G14063 (apply (lambda (G14065 G14066) (G12453 '#f '"incorrect position of keyword else" G14011)) G14063) ((lambda (G14069) ((lambda (G14071) (if G14071 (apply (lambda (G14073 G14074) (list 'let (list (list 't G14073)) (list 'if 't (cons G14074 '(t)) (G14021 (car G14024) (cdr G14024))))) G14071) ((lambda (G14077) ((lambda (G14079) (if G14079 (apply (lambda (G14081) (list 'or G14081 (G14021 (car G14024) (cdr G14024)))) G14079) ((lambda (G14083) ((lambda (G14085) (if G14085 (apply (lambda (G14087 G14088) (list 'if G14087 (cons 'begin G14088) (G14021 (car G14024) (cdr G14024)))) G14085) ((lambda (G14091) ((lambda (G14093) (if G14093 (apply (lambda () (G12453 '#f '"invalid last clause" G14011)) G14093) (G12453 '#f '"invalid syntax" G14091))) (G12220 G14091 '_))) G14083))) (G12220 G14083 '(any . each-any)))) G14077))) (G12220 G14077 '(any)))) G14069))) (G12220 G14069 '(any #(scheme-id =>) any)))) G14061))) (G12220 G14061 '(#(scheme-id else) any . each-any)))) G14023))))) G14021) G14017 G14018))) G14015) (G12453 '#f '"invalid syntax" G14013))) (G12220 G14013 '(_ any . each-any)))) G14011))) (set! G12194 (lambda (G14095 G14096 G14097) ((lambda (G14101) (begin (if (if (string? G14101) (begin '#f (G11641 G14096)) '#f) (void) (G12453 '#f '"invalid syntax" G14095)) (cons (G12146 'begin) (with-input-from-file G14101 (lambda () ((letrec ((G14103 (lambda (G14105) ((lambda (G14107) (if (eof-object? G14107) (reverse G14105) (G14103 (cons (G11607 G14096 G14107) G14105)))) (G10447))))) G14103) '())))))) (G11663 G14097)))) (set! G12196 (lambda (G14109) ((lambda (G14111) ((lambda (G14113) (if G14113 (apply (lambda (G14115 G14116) (G12194 G14109 G14115 G14116)) G14113) (G12453 '#f '"invalid syntax" G14111))) (G12220 G14111 '(any any)))) G14109))) (set! G12198 (lambda (G14119) ((lambda (G14121) ((lambda (G14123) (if G14123 (apply (lambda (G14125 G14126) (G12194 G14119 G14125 G14126)) G14123) (G12453 '#f '"invalid syntax" G14121))) (G12220 G14121 '(_ any any)))) G14119))) (set! G12200 (lambda (G14129) ((lambda (G14131) ((lambda (G14133) (if G14133 (apply (lambda (G14135 G14136 G14137) (begin (G12226 G14135 G14129) (G12146 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G14135 (map (lambda (G14141 G14142) ((lambda (G14145) ((lambda (G14147) (if G14147 (apply (lambda (G14149) (list (cons 'g G14149) (list 'syntax G14142))) G14147) ((lambda (G14151) ((lambda (G14153) (if G14153 (apply (lambda () (G12453 '#f '"invalid syntax-rules pattern" G14129 G14141)) G14153) (G12453 '#f '"invalid syntax" G14151))) (G12220 G14151 '_))) G14145))) (G12220 G14145 '(_ . any)))) G14141)) G14136 G14137)))))))) G14133) (G12453 '#f '"invalid syntax" G14131))) (G12220 G14131 '(_ each-any . #(each (any any)))))) G14129))) (set! G12202 ((lambda () ((lambda (G14156 G14197 G14199 G14201 G14203 G14205 G14207) (begin (set! G14156 (lambda (G14426) (list (G12106 'quote) (G11617 G14426 '() '() '())))) (set! G14197 (lambda (G14418 G14419) ((letrec ((G14422 (lambda (G14424) (if (null? G14424) G14419 (G14199 (car G14424) (G14422 (cdr G14424))))))) G14422) G14418))) (set! G14199 (lambda (G14380 G14381) ((lambda (G14384) ((lambda (G14386) (if G14386 (apply (lambda (G14388) ((lambda (G14390) ((lambda (G14392) (if G14392 (apply (lambda (G14394) (list (G12106 'quote) (cons G14394 G14388))) G14392) ((lambda (G14396) ((lambda (G14398) (if G14398 (apply (lambda () ((lambda (G14400) ((lambda (G14402) (if G14402 (apply (lambda () (list (G12106 'list) G14380)) G14402) ((lambda (G14404) ((lambda (G14406) (if G14406 (apply (lambda () (list (G12106 'cons) G14380 G14381)) G14406) (G12453 '#f '"invalid syntax" G14404))) (G12220 G14404 '_))) G14400))) (G12220 G14400 '()))) G14388)) G14398) (G12453 '#f '"invalid syntax" G14396))) (G12220 G14396 '_))) G14390))) (G12220 G14390 '(#(scheme-id quote) any)))) G14380)) G14386) ((lambda (G14408) ((lambda (G14410) (if G14410 (apply (lambda (G14412) (cons* (G12106 'list) G14380 G14412)) G14410) ((lambda (G14414) ((lambda (G14416) (if G14416 (apply (lambda () (list (G12106 'cons) G14380 G14381)) G14416) (G12453 '#f '"invalid syntax" G14414))) (G12220 G14414 '_))) G14408))) (G12220 G14408 '(#(scheme-id list) . each-any)))) G14384))) (G12220 G14384 '(#(scheme-id quote) any)))) G14381))) (set! G14201 (lambda (G14354 G14355) ((lambda (G14358) (if (null? G14358) (list (G12106 'quote) '()) (if (null? (cdr G14358)) (car G14358) (cons* (G12106 'append) G14358)))) ((letrec ((G14360 (lambda (G14362) (if (null? G14362) ((lambda (G14364) ((lambda (G14366) (if G14366 (apply (lambda () '()) G14366) ((lambda (G14368) ((lambda (G14370) (if G14370 (apply (lambda () (list G14355)) G14370) (G12453 '#f '"invalid syntax" G14368))) (G12220 G14368 '_))) G14364))) (G12220 G14364 '(#(scheme-id quote) ())))) G14355) ((lambda (G14372) ((lambda (G14374) (if G14374 (apply (lambda () (G14360 (cdr G14362))) G14374) ((lambda (G14376) ((lambda (G14378) (if G14378 (apply (lambda () (cons (car G14362) (G14360 (cdr G14362)))) G14378) (G12453 '#f '"invalid syntax" G14376))) (G12220 G14376 '_))) G14372))) (G12220 G14372 '(#(scheme-id quote) ())))) (car G14362)))))) G14360) G14354)))) (set! G14203 (lambda (G14304) ((lambda (G14306) ((lambda (G14308) ((lambda (G14310) (if G14310 (apply (lambda (G14312) (list (G12106 'quote) (list->vector G14312))) G14310) ((lambda (G14314) ((lambda (G14316) (if G14316 (apply (lambda () ((letrec ((G14318 (lambda (G14320 G14321) ((lambda (G14324) ((lambda (G14326) (if G14326 (apply (lambda (G14328) (G14321 (map (lambda (G14330) (list (G12106 'quote) G14330)) G14328))) G14326) ((lambda (G14332) ((lambda (G14334) (if G14334 (apply (lambda (G14336) (G14321 G14336)) G14334) ((lambda (G14338) ((lambda (G14340) (if G14340 (apply (lambda (G14342 G14343) (G14318 G14343 (lambda (G14346) (G14321 (cons G14342 G14346))))) G14340) ((lambda (G14348) ((lambda (G14350) (if G14350 (apply (lambda () (list (G12106 'list->vector) G14306)) G14350) (G12453 '#f '"invalid syntax" G14348))) (G12220 G14348 '_))) G14338))) (G12220 G14338 '(#(scheme-id cons) any any)))) G14332))) (G12220 G14332 '(#(scheme-id list) . each-any)))) G14324))) (G12220 G14324 '(#(scheme-id quote) each-any)))) G14320)))) G14318) G14304 (lambda (G14352) (cons* (G12106 'vector) G14352)))) G14316) (G12453 '#f '"invalid syntax" G14314))) (G12220 G14314 '_))) G14308))) (G12220 G14308 '(#(scheme-id quote) each-any)))) G14306)) G14304))) (set! G14205 (lambda (G14270 G14271) ((lambda (G14274) ((lambda (G14276) (if G14276 (apply (lambda (G14278 G14279) ((lambda (G14282) ((lambda (G14284) (if G14284 (apply (lambda (G14286) (if (= G14271 '0) (G14197 G14286 (G14205 G14279 G14271)) (G14199 (G14199 (G14156 'unquote) (G14207 G14286 (- G14271 '1))) (G14205 G14279 G14271)))) G14284) ((lambda (G14288) ((lambda (G14290) (if G14290 (apply (lambda (G14292) (if (= G14271 '0) (G14201 G14292 (G14205 G14279 G14271)) (G14199 (G14199 (G14156 'unquote-splicing) (G14207 G14292 (- G14271 '1))) (G14205 G14279 G14271)))) G14290) ((lambda (G14294) ((lambda (G14296) (if G14296 (apply (lambda (G14298) (G14199 (G14207 G14298 G14271) (G14205 G14279 G14271))) G14296) (G12453 '#f '"invalid syntax" G14294))) (G12220 G14294 'any))) G14288))) (G12220 G14288 '(#(scheme-id unquote-splicing) . each-any)))) G14282))) (G12220 G14282 '(#(scheme-id unquote) . each-any)))) G14278)) G14276) ((lambda (G14300) ((lambda (G14302) (if G14302 (apply (lambda () (list (G12106 'quote) '())) G14302) (G12453 '#f '"invalid syntax" G14300))) (G12220 G14300 '()))) G14274))) (G12220 G14274 '(any . any)))) G14270))) (set! G14207 (lambda (G14216 G14217) ((lambda (G14220) ((lambda (G14222) (if G14222 (apply (lambda (G14224) (if (= G14217 '0) G14224 (G14199 (G14156 'unquote) (G14207 (list G14224) (- G14217 '1))))) G14222) ((lambda (G14226) ((lambda (G14228) (if G14228 (apply (lambda (G14230 G14231) (if (= G14217 '0) (G14197 G14230 (G14207 G14231 G14217)) (G14199 (G14199 (G14156 'unquote) (G14207 G14230 (- G14217 '1))) (G14207 G14231 G14217)))) G14228) ((lambda (G14234) ((lambda (G14236) (if G14236 (apply (lambda (G14238 G14239) (if (= G14217 '0) (G14201 G14238 (G14207 G14239 G14217)) (G14199 (G14199 (G14156 'unquote-splicing) (G14207 G14238 (- G14217 '1))) (G14207 G14239 G14217)))) G14236) ((lambda (G14242) ((lambda (G14244) (if G14244 (apply (lambda (G14246) (G14199 (G14156 'quasiquote) (G14207 (list G14246) (+ G14217 '1)))) G14244) ((lambda (G14248) ((lambda (G14250) (if G14250 (apply (lambda (G14252 G14253) (G14199 (G14207 G14252 G14217) (G14207 G14253 G14217))) G14250) ((lambda (G14256) ((lambda (G14258) (if (if G14258 (begin '#f (apply (lambda (G14260) (not (G11585 G14260))) G14258)) '#f) (apply (lambda (G14262) (G14203 (G14205 G14262 G14217))) G14258) ((lambda (G14264) ((lambda (G14266) (if G14266 (apply (lambda (G14268) (list (G12106 'quote) G14268)) G14266) (G12453 '#f '"invalid syntax" G14264))) (G12220 G14264 'any))) G14256))) (G12220 G14256 '#(vector each-any)))) G14248))) (G12220 G14248 '(any . any)))) G14242))) (G12220 G14242 '(#(scheme-id quasiquote) any)))) G14234))) (G12220 G14234 '((#(scheme-id unquote-splicing) . each-any) . any)))) G14226))) (G12220 G14226 '((#(scheme-id unquote) . each-any) . any)))) G14220))) (G12220 G14220 '(#(scheme-id unquote) any)))) G14216))) (lambda (G14208) ((lambda (G14210) ((lambda (G14212) (if G14212 (apply (lambda (G14214) (G14207 G14214 '0)) G14212) (G12453 '#f '"invalid syntax" G14210))) (G12220 G14210 '(_ any)))) G14208)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G12204 ((lambda () ((lambda (G14429) (begin (set! G14429 (lambda (G14453 G14454) ((lambda (G14457) ((lambda (G14459) (if G14459 (apply (lambda (G14461) (if (= G14454 '0) ((lambda (G14463) (values (list G14463) (list G14461) G14463)) (gensym)) (call-with-values (lambda () (G14429 G14461 (- G14454 '1))) (lambda (G14468 G14469 G14470) ((lambda (G14474 G14475 G14476) (values G14476 G14475 (list 'unsyntax G14474))) G14470 G14469 G14468))))) G14459) ((lambda (G14480) ((lambda (G14482) (if (if G14482 (begin '#f (apply (lambda () (= G14454 '0)) G14482)) '#f) (apply (lambda () (G12453 '#f '"incorrect use of unsyntax" G14453)) G14482) ((lambda (G14484) ((lambda (G14486) (if G14486 (apply (lambda (G14488 G14489) (call-with-values (lambda () (G14429 G14489 G14454)) (lambda (G14495 G14496 G14497) ((lambda (G14501 G14502 G14503) (if (= G14454 '0) ((lambda (G14507) (values (cons (cons G14507 '(...)) G14503) (cons G14488 G14502) (cons G14507 (cons '... G14501)))) (gensym)) (call-with-values (lambda () (G14429 G14488 (- G14454 '1))) (lambda (G14512 G14513 G14514) ((lambda (G14518 G14519 G14520) (values (append G14520 G14503) (append G14519 G14502) (cons (list 'unsyntax-splicing G14518) G14501))) G14514 G14513 G14512))))) G14497 G14496 G14495)))) G14486) ((lambda (G14524) ((lambda (G14526) (if (if G14526 (begin '#f (apply (lambda () (= G14454 '0)) G14526)) '#f) (apply (lambda () (G12453 '#f '"incorrect use of unsyntax-splicing" G14453)) G14526) ((lambda (G14528) ((lambda (G14530) (if G14530 (apply (lambda (G14532) (call-with-values (lambda () (G14429 G14532 (+ G14454 '1))) (lambda (G14537 G14538 G14539) ((lambda (G14543 G14544 G14545) (values G14545 G14544 (list 'quasisyntax G14543))) G14539 G14538 G14537)))) G14530) ((lambda (G14549) ((lambda (G14551) (if G14551 (apply (lambda (G14553 G14554) (call-with-values (lambda () (G14429 G14553 G14454)) (lambda (G14563 G14564 G14565) (call-with-values (lambda () (G14429 G14554 G14454)) (lambda (G14569 G14570 G14571) ((lambda (G14575 G14576 G14577 G14578 G14579 G14580) (values (append G14577 G14580) (append G14576 G14579) (cons G14578 G14575))) G14571 G14570 G14569 G14565 G14564 G14563)))))) G14551) ((lambda (G14587) ((lambda (G14589) (if (if G14589 (begin '#f (apply (lambda (G14591) (not (G11585 G14453))) G14589)) '#f) (apply (lambda (G14593) (call-with-values (lambda () ((letrec ((G14598 (lambda (G14600) (if (null? G14600) (values '() '() '()) (call-with-values (lambda () (G14429 (car G14600) G14454)) (lambda (G14605 G14606 G14607) ((lambda (G14611 G14612 G14613) (call-with-values (lambda () (G14598 (cdr G14600))) (lambda (G14620 G14621 G14622) ((lambda (G14626 G14627 G14628) (values (append G14613 G14628) (append G14612 G14627) (cons G14611 G14626))) G14622 G14621 G14620)))) G14607 G14606 G14605))))))) G14598) G14593)) (lambda (G14632 G14633 G14634) ((lambda (G14638 G14639 G14640) (values G14640 G14639 (list->vector G14638))) G14634 G14633 G14632)))) G14589) ((lambda (G14644) ((lambda (G14646) (if G14646 (apply (lambda () (values '() '() G14453)) G14646) (G12453 '#f '"invalid syntax" G14644))) (G12220 G14644 '_))) G14587))) (G12220 G14587 '#(vector each-any)))) G14549))) (G12220 G14549 '(any . any)))) G14528))) (G12220 G14528 '(#(scheme-id quasisyntax) any)))) G14524))) (G12220 G14524 '#(scheme-id unsyntax-splicing)))) G14484))) (G12220 G14484 '((#(scheme-id unsyntax-splicing) any) . any)))) G14480))) (G12220 G14480 '#(scheme-id unsyntax)))) G14457))) (G12220 G14457 '(#(scheme-id unsyntax) any)))) G14453))) (lambda (G14430) ((lambda (G14432) ((lambda (G14434) (if G14434 (apply (lambda (G14436) (call-with-values (lambda () (G14429 G14436 '0)) (lambda (G14441 G14442 G14443) ((lambda (G14447 G14448 G14449) (G12146 (list 'syntax-case (cons 'list G14448) '() (list G14449 (list 'syntax G14447))))) G14443 G14442 G14441)))) G14434) (G12453 '#f '"invalid syntax" G14432))) (G12220 G14432 '(_ any)))) G14430)))) '#f)))) (set! G12206 (lambda (G14648) (G12453 '#f '"define-struct not supported" G14648))) (set! G12208 (lambda (G14650) ((lambda (G14653 G14655 G14657 G14659 G14661 G14663 G14665 G14667 G14669 G14671 G14673 G14675 G14677 G14679 G14681 G14683 G14685) (begin (set! G14653 (lambda (G15156 . G15158) (G12457 G15156 (string->symbol (apply string-append (map (lambda (G15160) (if (symbol? G15160) (symbol->string G15160) (if (string? G15160) G15160 (assertion-violation 'define-record-type '"BUG")))) G15158)))))) (set! G14655 (lambda (G15138) ((lambda (G15140) ((lambda (G15142) (if G15142 (apply (lambda (G15144 G15145 G15146) G15144) G15142) ((lambda (G15150) ((lambda (G15152) (if G15152 (apply (lambda (G15154) G15154) G15152) (G12453 '#f '"invalid syntax" G15150))) (G12220 G15150 'any))) G15140))) (G12220 G15140 '(any any any)))) G15138))) (set! G14657 (lambda (G15118) ((lambda (G15120) ((lambda (G15122) (if G15122 (apply (lambda (G15124 G15125 G15126) G15125) G15122) ((lambda (G15130) ((lambda (G15132) (if (if G15132 (begin '#f (apply (lambda (G15134) (G11641 G15134)) G15132)) '#f) (apply (lambda (G15136) (G14653 G15136 '"make-" (G11663 G15136))) G15132) (G12453 '#f '"invalid syntax" G15130))) (G12220 G15130 'any))) G15120))) (G12220 G15120 '(any any any)))) G15118))) (set! G14659 (lambda (G15098) ((lambda (G15100) ((lambda (G15102) (if G15102 (apply (lambda (G15104 G15105 G15106) G15106) G15102) ((lambda (G15110) ((lambda (G15112) (if (if G15112 (begin '#f (apply (lambda (G15114) (G11641 G15114)) G15112)) '#f) (apply (lambda (G15116) (G14653 G15116 (G11663 G15116) '"?")) G15112) (G12453 '#f '"invalid syntax" G15110))) (G12220 G15110 'any))) G15100))) (G12220 G15100 '(any any any)))) G15098))) (set! G14661 (lambda (G15080 G15081) ((lambda (G15084) ((lambda (G15086) (if G15086 (apply (lambda () '#f) G15086) ((lambda (G15088) ((lambda (G15090) (if G15090 (apply (lambda (G15092 G15093 G15094) (if (G11649 (G12146 G15080) G15092) (cons G15092 G15093) (G14661 G15080 G15094))) G15090) (G12453 '#f '"invalid syntax" G15088))) (G12220 G15088 '((any . any) . any)))) G15084))) (G12220 G15084 '()))) G15081))) (set! G14663 (lambda (G14998 G14999 G15000) ((lambda (G15005) (begin (set! G15005 (lambda (G15054) (list->vector (map (lambda (G15056) ((lambda (G15058) ((lambda (G15060) (if G15060 (apply (lambda (G15062 G15063) (list 'mutable G15062)) G15060) ((lambda (G15066) ((lambda (G15068) (if G15068 (apply (lambda (G15070 G15071) (list 'immutable G15070)) G15068) ((lambda (G15074) ((lambda (G15076) (if G15076 (apply (lambda (G15078) (list 'immutable G15078)) G15076) (G12453 '#f '"invalid syntax" G15074))) (G12220 G15074 'any))) G15066))) (G12220 G15066 '(#(scheme-id immutable) any . any)))) G15058))) (G12220 G15058 '(#(scheme-id mutable) any . any)))) G15056)) G15054)))) ((lambda (G15006 G15007 G15008 G15009) (G12146 (list 'make-record-type-descriptor (list 'quote G14998) G15000 G15006 G15007 G15008 G15009))) ((lambda (G15014) ((lambda (G15016) (if G15016 (apply (lambda () (list 'quote (gensym))) G15016) ((lambda (G15018) ((lambda (G15020) (if G15020 (apply (lambda (G15022) (list 'quote G15022)) G15020) ((lambda (G15024) ((lambda (G15026) (if G15026 (apply (lambda () '#f) G15026) (G12453 '#f '"invalid syntax" G15024))) (G12220 G15024 '_))) G15018))) (G12220 G15018 '(_ any)))) G15014))) (G12220 G15014 '(_)))) (G14661 'nongenerative G14999)) ((lambda (G15028) ((lambda (G15030) (if G15030 (apply (lambda () '#t) G15030) ((lambda (G15032) ((lambda (G15034) (if G15034 (apply (lambda () '#f) G15034) (G12453 '#f '"invalid syntax" G15032))) (G12220 G15032 '_))) G15028))) (G12220 G15028 '(_ #(atom #t))))) (G14661 'sealed G14999)) ((lambda (G15036) ((lambda (G15038) (if G15038 (apply (lambda () '#t) G15038) ((lambda (G15040) ((lambda (G15042) (if G15042 (apply (lambda () '#f) G15042) (G12453 '#f '"invalid syntax" G15040))) (G12220 G15040 '_))) G15036))) (G12220 G15036 '(_ #(atom #t))))) (G14661 'opaque G14999)) ((lambda (G15044) ((lambda (G15046) (if G15046 (apply (lambda (G15048) (list 'quote (G15005 G15048))) G15046) ((lambda (G15050) ((lambda (G15052) (if G15052 (apply (lambda () ''#()) G15052) (G12453 '#f '"invalid syntax" G15050))) (G12220 G15050 '_))) G15044))) (G12220 G15044 '(_ . each-any)))) (G14661 'fields G14999))))) '#f))) (set! G14665 (lambda (G14974) ((lambda (G14976) ((lambda (G14978) (if G14978 (apply (lambda (G14980) (list 'record-type-descriptor G14980)) G14978) ((lambda (G14982) ((lambda (G14984) (if G14984 (apply (lambda () ((lambda (G14986) ((lambda (G14988) (if G14988 (apply (lambda (G14990 G14991) G14990) G14988) ((lambda (G14994) ((lambda (G14996) (if G14996 (apply (lambda () '#f) G14996) (G12453 '#f '"invalid syntax" G14994))) (G12220 G14994 '#(atom #f)))) G14986))) (G12220 G14986 '(_ any any)))) (G14661 'parent-rtd G14974))) G14984) (G12453 '#f '"invalid syntax" G14982))) (G12220 G14982 '#(atom #f)))) G14976))) (G12220 G14976 '(_ any)))) (G14661 'parent G14974)))) (set! G14667 (lambda (G14950) ((lambda (G14952) ((lambda (G14954) (if G14954 (apply (lambda (G14956) (list 'record-constructor-descriptor G14956)) G14954) ((lambda (G14958) ((lambda (G14960) (if G14960 (apply (lambda () ((lambda (G14962) ((lambda (G14964) (if G14964 (apply (lambda (G14966 G14967) G14967) G14964) ((lambda (G14970) ((lambda (G14972) (if G14972 (apply (lambda () '#f) G14972) (G12453 '#f '"invalid syntax" G14970))) (G12220 G14970 '#(atom #f)))) G14962))) (G12220 G14962 '(_ any any)))) (G14661 'parent-rtd G14950))) G14960) (G12453 '#f '"invalid syntax" G14958))) (G12220 G14958 '#(atom #f)))) G14952))) (G12220 G14952 '(_ any)))) (G14661 'parent G14950)))) (set! G14669 (lambda (G14942 G14943 G14944 G14945) (list 'make-record-constructor-descriptor G14943 G14945 G14944))) (set! G14671 (lambda (G14930) ((lambda (G14932) ((lambda (G14934) (if G14934 (apply (lambda (G14936) G14936) G14934) ((lambda (G14938) ((lambda (G14940) (if G14940 (apply (lambda () '#f) G14940) (G12453 '#f '"invalid syntax" G14938))) (G12220 G14938 '_))) G14932))) (G12220 G14932 '(_ any)))) (G14661 'protocol G14930)))) (set! G14673 (lambda (G14912) ((lambda (G14914) ((lambda (G14916) (if G14916 (apply (lambda () '()) G14916) ((lambda (G14918) ((lambda (G14920) (if G14920 (apply (lambda (G14922) G14922) G14920) ((lambda (G14924) ((lambda (G14926) (if G14926 (apply (lambda (G14928) (G14673 G14928)) G14926) (G12453 '#f '"invalid syntax" G14924))) (G12220 G14924 '(_ . any)))) G14918))) (G12220 G14918 '((#(scheme-id fields) . each-any) . _)))) G14914))) (G12220 G14914 '()))) G14912))) (set! G14675 (lambda (G14888) ((letrec ((G14890 (lambda (G14892 G14893) ((lambda (G14896) ((lambda (G14898) (if G14898 (apply (lambda () '()) G14898) ((lambda (G14900) ((lambda (G14902) (if G14902 (apply (lambda (G14904) (cons G14893 (G14890 G14904 (+ G14893 '1)))) G14902) ((lambda (G14906) ((lambda (G14908) (if G14908 (apply (lambda (G14910) (G14890 G14910 (+ G14893 '1))) G14908) (G12453 '#f '"invalid syntax" G14906))) (G12220 G14906 '(_ . any)))) G14900))) (G12220 G14900 '((#(scheme-id mutable) . _) . any)))) G14896))) (G12220 G14896 '()))) G14892)))) G14890) G14888 '0))) (set! G14677 (lambda (G14846 G14847) ((lambda (G14851) (begin (set! G14851 (lambda (G14886) (G12457 G14846 (string->symbol (string-append (symbol->string (G12459 G14846)) '"-" (symbol->string (G12459 G14886)) '"-set!"))))) ((letrec ((G14852 (lambda (G14854) ((lambda (G14856) ((lambda (G14858) (if G14858 (apply (lambda () '()) G14858) ((lambda (G14860) ((lambda (G14862) (if G14862 (apply (lambda (G14864 G14865 G14866 G14867) (cons G14866 (G14852 G14867))) G14862) ((lambda (G14872) ((lambda (G14874) (if G14874 (apply (lambda (G14876 G14877) (cons (G14851 G14876) (G14852 G14877))) G14874) ((lambda (G14880) ((lambda (G14882) (if G14882 (apply (lambda (G14884) (G14852 G14884)) G14882) (G12453 '#f '"invalid syntax" G14880))) (G12220 G14880 '(_ . any)))) G14872))) (G12220 G14872 '((#(scheme-id mutable) any) . any)))) G14860))) (G12220 G14860 '((#(scheme-id mutable) any any any) . any)))) G14856))) (G12220 G14856 '()))) G14854)))) G14852) G14847))) '#f))) (set! G14679 (lambda (G14778 G14779) ((lambda (G14783) (begin (set! G14783 (lambda (G14844) (G12457 G14778 (string->symbol (string-append (symbol->string (G12459 G14778)) '"-" (symbol->string (G12459 G14844))))))) (map (lambda (G14784) ((lambda (G14786) ((lambda (G14788) (if (if G14788 (begin '#f (apply (lambda (G14790 G14791 G14792) (G11641 G14791)) G14788)) '#f) (apply (lambda (G14796 G14797 G14798) G14797) G14788) ((lambda (G14802) ((lambda (G14804) (if (if G14804 (begin '#f (apply (lambda (G14806 G14807) (G11641 G14807)) G14804)) '#f) (apply (lambda (G14810 G14811) G14811) G14804) ((lambda (G14814) ((lambda (G14816) (if (if G14816 (begin '#f (apply (lambda (G14818) (G11641 G14818)) G14816)) '#f) (apply (lambda (G14820) (G14783 G14820)) G14816) ((lambda (G14822) ((lambda (G14824) (if (if G14824 (begin '#f (apply (lambda (G14826) (G11641 G14826)) G14824)) '#f) (apply (lambda (G14828) (G14783 G14828)) G14824) ((lambda (G14830) ((lambda (G14832) (if (if G14832 (begin '#f (apply (lambda (G14834) (G11641 G14834)) G14832)) '#f) (apply (lambda (G14836) (G14783 G14836)) G14832) ((lambda (G14838) ((lambda (G14840) (if G14840 (apply (lambda (G14842) (G12453 '#f '"invalid field spec" G14784)) G14840) (G12453 '#f '"invalid syntax" G14838))) (G12220 G14838 'any))) G14830))) (G12220 G14830 'any))) G14822))) (G12220 G14822 '(#(scheme-id immutable) any)))) G14814))) (G12220 G14814 '(#(scheme-id mutable) any)))) G14802))) (G12220 G14802 '(#(scheme-id immutable) any any)))) G14786))) (G12220 G14786 '(#(scheme-id mutable) any any any)))) G14784)) G14779))) '#f))) (set! G14681 (lambda (G14770) ((letrec ((G14772 (lambda (G14774 G14775) (if (null? G14774) '() (cons G14775 (G14772 (cdr G14774) (+ G14775 '1))))))) G14772) G14770 '0))) (set! G14683 (lambda (G14730 G14731) ((lambda (G14734) ((lambda (G14736) ((lambda (G14738) ((lambda (G14740) ((lambda (G14742) ((lambda (G14744) ((lambda (G14746) ((lambda (G14748) ((lambda (G14750) ((lambda (G14752) ((lambda (G14754) ((lambda (G14756) ((lambda (G14758) ((lambda (G14760) ((lambda () (G12146 (cons 'begin (cons (list 'define G14736 G14756) (cons (list 'define G14740 G14760) (cons (list 'define G14738 G14758) (cons (list 'define-syntax G14734 (list 'list ''$rtd (list 'syntax G14736) (list 'syntax G14738))) (cons (list 'define G14754 (list 'record-predicate G14736)) (cons (list 'define G14742 (list 'record-constructor G14738)) (append (map (lambda (G14762 G14763) (list 'define G14762 (list 'record-accessor G14736 G14763))) G14748 G14746) (map (lambda (G14766 G14767) (list 'define G14766 (list 'record-mutator G14736 G14767))) G14750 G14752))))))))))))) (G14671 G14731))) (G14669 G14731 G14736 G14740 (G14667 G14731)))) (G14663 G14734 G14731 (G14665 G14731)))) (G14659 G14730))) (G14675 G14744))) (G14677 G14734 G14744))) (G14679 G14734 G14744))) (G14681 G14744))) (G14673 G14731))) (G14657 G14730))) (gensym))) (gensym))) (gensym))) (G14655 G14730)))) (set! G14685 (lambda (G14694 G14695) ((lambda (G14699 G14701) (begin (set! G14699 (map G12146 '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G14701 (lambda (G14724 G14725) (if (pair? G14725) (begin '#f ((lambda (G14728) (if G14728 G14728 (begin '#f (G14701 G14724 (cdr G14725))))) (G11649 G14724 (car G14725)))) '#f))) ((letrec ((G14702 (lambda (G14704 G14705) (if (null? G14704) (void) ((lambda (G14708) ((lambda (G14710) (if G14710 (apply (lambda (G14712 G14713) (if ((lambda (G14716) (if G14716 G14716 (begin '#f (not (G14701 G14712 G14699))))) (not (G11641 G14712))) (G12453 '#f '"not a valid define-record-type keyword" G14712) (if (G11655 G14712 G14705) (G12453 '#f '"duplicate use of keyword " G14694 G14712) (G14702 (cdr G14704) (cons G14712 G14705))))) G14710) ((lambda (G14718) ((lambda (G14720) (if G14720 (apply (lambda (G14722) (G12453 '#f '"malformed define-record-type clause" G14722)) G14720) (G12453 '#f '"invalid syntax" G14718))) (G12220 G14718 'any))) G14708))) (G12220 G14708 '(any . any)))) (car G14704)))))) G14702) G14695 '()))) '#f '#f))) ((lambda (G14686) ((lambda (G14688) (if G14688 (apply (lambda (G14690 G14691) (begin (G14685 G14650 G14691) (G14683 G14690 G14691))) G14688) (G12453 '#f '"invalid syntax" G14686))) (G12220 G14686 '(_ any . each-any)))) G14650))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12210 (lambda (G15162) ((lambda (G15165) (begin (set! G15165 (lambda (G15210 G15211) (G12457 G15210 (string->symbol (string-append (symbol->string (G12459 G15210)) G15211))))) ((lambda (G15166) ((lambda (G15168) (if (if G15168 (begin '#f (apply (lambda (G15170 G15171 G15172 G15173 G15174 G15175 G15176) (if (G11641 G15171) (if (G11641 G15172) (if (G11641 G15173) (if (G11641 G15174) (if (for-all G11641 G15175) (begin '#f (for-all G11641 G15176)) '#f) '#f) '#f) '#f) '#f)) G15168)) '#f) (apply (lambda (G15184 G15185 G15186 G15187 G15188 G15189 G15190) ((lambda (G15198) (G12146 (cons 'begin (cons (cons 'define-record-type (cons (list G15185 G15187 (gensym)) (cons (list 'parent G15186) (cons (cons 'fields (map (lambda (G15200 G15201) (list 'immutable G15200 G15201)) G15189 G15198)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G15188 (list 'condition-predicate (list 'record-type-descriptor G15185))) (map (lambda (G15204 G15205) (list 'define G15204 (list 'condition-accessor (list 'record-type-descriptor G15185) G15205))) G15190 G15198)))))) (map (lambda (G15208) (gensym)) G15190))) G15168) (G12453 '#f '"invalid syntax" G15166))) (G12220 G15166 '(any any any any any . #(each (any any)))))) G15162))) '#f))) (set! G12212 (lambda (G15214) (G12453 '#f '"incorrect usage of auxiliary keyword" G15214))) (set! G12214 (lambda (G15216 G15217 G15218) ((lambda (G15222) ((lambda (G15224) (if G15224 (apply (lambda (G15226 G15227) (G12278 (cons G15226 G15227) G15217 G15218)) G15224) ((lambda (G15230) ((lambda (G15232) (if G15232 (apply (lambda (G15234 G15235 G15236 G15237) ((lambda (G15242 G15243 G15244 G15245) (G11485 '#f (append G15242 G15243) (append (G12252 G15234 G15217 G15218) (G12252 G15235 G15217 G15218)) (G11485 '#f (list G15245) (list (G11483 '#f '() (G11486 '#f (map (lambda (G15250 G15251 G15252) (G11485 '#f (list G15250) (list (list G15251)) (G11486 '#f (list (list G15251 G15252) (list 'set! G15252 G15250))))) G15244 G15242 G15243)))) (list '(primitive dynamic-wind) G15245 (G11483 '#f '() (G12278 (cons G15236 G15237) G15217 G15218)) G15245)))) (map (lambda (G15256) (G11515 'lhs)) G15234) (map (lambda (G15258) (G11515 'rhs)) G15234) (map (lambda (G15260) (G11515 't)) G15234) (G11515 'swap))) G15232) (G12453 '#f '"invalid syntax" G15230))) (G12220 G15230 '(_ #(each (any any)) any . each-any)))) G15222))) (G12220 G15222 '(_ () any . each-any)))) G15216))) (set! G12216 (lambda (G15262 G15263 G15264) ((lambda (G15268) ((lambda (G15270) (if G15270 (apply (lambda (G15272 G15273) (cons 'foreign-call (cons (G12256 G15272 G15263 G15264) (G12252 G15273 G15263 G15264)))) G15270) (G12453 '#f '"invalid syntax" G15268))) (G12220 G15268 '(_ any . each-any)))) G15262))) (set! G12218 (lambda (G15276 G15277) ((lambda (G15281 G15283) (begin (set! G15281 (lambda (G15426 G15427 G15428) (if (null? G15426) (values '() G15428) (call-with-values (lambda () (G15281 (cdr G15426) G15427 G15428)) (lambda (G15434 G15435) ((lambda (G15438 G15439) (call-with-values (lambda () (G15283 (car G15426) G15427 G15438)) (lambda (G15444 G15445) ((lambda (G15448 G15449) (values (cons G15449 G15439) G15448)) G15445 G15444)))) G15435 G15434)))))) (set! G15283 (lambda (G15284 G15285 G15286) ((lambda (G15290) ((lambda (G15292) (if (if G15292 (begin '#f (apply (lambda (G15294) (G11641 G15294)) G15292)) '#f) (apply (lambda (G15296) (if (G11655 G15284 G15277) (values (vector 'free-id G15284) G15286) (if (G11649 G15284 (G12106 '_)) (values '_ G15286) (values 'any (cons (cons G15284 G15285) G15286))))) G15292) ((lambda (G15298) ((lambda (G15300) (if (if G15300 (begin '#f (apply (lambda (G15302 G15303) (G12222 G15303)) G15300)) '#f) (apply (lambda (G15306 G15307) (call-with-values (lambda () (G15283 G15306 (+ G15285 '1) G15286)) (lambda (G15312 G15313) ((lambda (G15316 G15317) (values (if (eq? G15317 'any) 'each-any (vector 'each G15317)) G15316)) G15313 G15312)))) G15300) ((lambda (G15320) ((lambda (G15322) (if (if G15322 (begin '#f (apply (lambda (G15324 G15325 G15326 G15327) (G12222 G15325)) G15322)) '#f) (apply (lambda (G15332 G15333 G15334 G15335) (call-with-values (lambda () (G15283 G15335 G15285 G15286)) (lambda (G15342 G15343) ((lambda (G15346 G15347) (call-with-values (lambda () (G15281 G15334 G15285 G15346)) (lambda (G15352 G15353) ((lambda (G15356 G15357) (call-with-values (lambda () (G15283 G15332 (+ G15285 '1) G15356)) (lambda (G15362 G15363) ((lambda (G15366 G15367) (values (vector 'each+ G15367 (reverse G15357) G15347) G15366)) G15363 G15362)))) G15353 G15352)))) G15343 G15342)))) G15322) ((lambda (G15370) ((lambda (G15372) (if G15372 (apply (lambda (G15374 G15375) (call-with-values (lambda () (G15283 G15375 G15285 G15286)) (lambda (G15380 G15381) ((lambda (G15384 G15385) (call-with-values (lambda () (G15283 G15374 G15285 G15384)) (lambda (G15390 G15391) ((lambda (G15394 G15395) (values (cons G15395 G15385) G15394)) G15391 G15390)))) G15381 G15380)))) G15372) ((lambda (G15398) ((lambda (G15400) (if G15400 (apply (lambda () (values '() G15286)) G15400) ((lambda (G15402) ((lambda (G15404) (if (if G15404 (begin '#f (apply (lambda (G15406) (not (G11585 G15406))) G15404)) '#f) (apply (lambda (G15408) (call-with-values (lambda () (G15283 G15408 G15285 G15286)) (lambda (G15412 G15413) ((lambda (G15416 G15417) (values (vector 'vector G15417) G15416)) G15413 G15412)))) G15404) ((lambda (G15420) ((lambda (G15422) (if G15422 (apply (lambda (G15424) (values (vector 'atom (G11663 G15424)) G15286)) G15422) (G12453 '#f '"invalid syntax" G15420))) (G12220 G15420 'any))) G15402))) (G12220 G15402 '#(vector each-any)))) G15398))) (G12220 G15398 '()))) G15370))) (G12220 G15370 '(any . any)))) G15320))) (G12220 G15320 '(any any . #(each+ any () any))))) G15298))) (G12220 G15298 '(any any)))) G15290))) (G12220 G15290 'any))) G15284))) (G15283 G15276 '0 '()))) '#f '#f))) (set! G12220 (lambda (G15452 G15453) ((lambda (G15457 G15459 G15461 G15463 G15465 G15467 G15469 G15471) (begin (set! G15457 (lambda (G15652 G15653 G15654 G15655) (if (if (null? G15653) (if (null? G15654) (begin '#f (null? G15655)) '#f) '#f) G15652 (G11617 G15652 G15653 G15654 G15655)))) (set! G15459 (lambda (G15623 G15624 G15625 G15626 G15627) (if (pair? G15623) ((lambda (G15633) (if G15633 (begin '#f ((lambda (G15635) (if G15635 (begin '#f (cons G15633 G15635)) '#f)) (G15459 (cdr G15623) G15624 G15625 G15626 G15627))) '#f)) (G15471 (car G15623) G15624 G15625 G15626 G15627 '())) (if (null? G15623) '() (if (G11585 G15623) (if (not (G11513 G15625)) (begin '#f (call-with-values (lambda () (G11615 G15625 G15626 G15627 G15623)) (lambda (G15640 G15641 G15642) ((lambda (G15646 G15647 G15648) (G15459 (G11589 G15623) G15624 G15648 G15647 G15646)) G15642 G15641 G15640)))) '#f) (if (G10449 G15623) (G15459 (G10451 G15623) G15624 G15625 G15626 G15627) '#f)))))) (set! G15461 (lambda (G15565 G15566 G15567 G15568 G15569 G15570 G15571 G15572) ((letrec ((G15581 (lambda (G15583 G15584 G15585 G15586) (if (pair? G15583) (call-with-values (lambda () (G15581 (cdr G15583) G15584 G15585 G15586)) (lambda (G15594 G15595 G15596) ((lambda (G15600 G15601 G15602) (if G15600 (if (null? G15601) ((lambda (G15606) (if G15606 (values (cons G15606 G15602) G15601 G15600) (values '#f '#f '#f))) (G15471 (car G15583) G15566 G15584 G15585 G15586 '())) (values '() (cdr G15601) (G15471 (car G15583) (car G15601) G15584 G15585 G15586 G15600))) (values '#f '#f '#f))) G15596 G15595 G15594))) (if (G11585 G15583) (if (G11513 G15584) (values '() G15567 (G15471 G15583 G15568 G15584 G15585 G15586 G15572)) (call-with-values (lambda () (G11615 G15584 G15585 G15586 G15583)) (lambda (G15611 G15612 G15613) ((lambda (G15617 G15618 G15619) (G15581 (G11589 G15583) G15619 G15618 G15617)) G15613 G15612 G15611)))) (if (G10449 G15583) (G15581 (G10451 G15583) G15584 G15585 G15586) (values '() G15567 (G15471 G15583 G15568 G15584 G15585 G15586 G15572)))))))) G15581) G15565 G15569 G15570 G15571))) (set! G15463 (lambda (G15540 G15541 G15542 G15543) (if (pair? G15540) ((lambda (G15548) (if G15548 (begin '#f (cons (G15457 (car G15540) G15541 G15542 G15543) G15548)) '#f)) (G15463 (cdr G15540) G15541 G15542 G15543)) (if (null? G15540) '() (if (G11585 G15540) (if (not (G11513 G15541)) (begin '#f (call-with-values (lambda () (G11615 G15541 G15542 G15543 G15540)) (lambda (G15553 G15554 G15555) ((lambda (G15559 G15560 G15561) (G15463 (G11589 G15540) G15561 G15560 G15559)) G15555 G15554 G15553)))) '#f) (if (G10449 G15540) (G15463 (G10451 G15540) G15541 G15542 G15543) '#f)))))) (set! G15465 (lambda (G15535 G15536) (if (null? G15535) G15536 (if (eq? G15535 '_) G15536 (if (eq? G15535 'any) (cons '() G15536) (if (pair? G15535) (G15465 (car G15535) (G15465 (cdr G15535) G15536)) (if (eq? G15535 'each-any) (cons '() G15536) ((lambda (G15539) (if (eqv? G15539 'each) (G15465 (vector-ref G15535 '1) G15536) (if (eqv? G15539 'each+) (G15465 (vector-ref G15535 '1) (G15465 (reverse (vector-ref G15535 '2)) (G15465 (vector-ref G15535 '3) G15536))) (if (memv G15539 '(free-id atom)) G15536 (if (memv G15539 '(scheme-id atom)) G15536 (if (eqv? G15539 'vector) (G15465 (vector-ref G15535 '1) G15536) (assertion-violation 'syntax-dispatch '"invalid pattern" G15535))))))) (vector-ref G15535 '0))))))))) (set! G15467 (lambda (G15531 G15532) (if (null? (car G15531)) G15532 (cons (map car G15531) (G15467 (map cdr G15531) G15532))))) (set! G15469 (lambda (G15499 G15500 G15501 G15502 G15503 G15504) (if (null? G15500) (if (null? G15499) (begin '#f G15504) '#f) (if (pair? G15500) (if (pair? G15499) (begin '#f (G15471 (car G15499) (car G15500) G15501 G15502 G15503 (G15471 (cdr G15499) (cdr G15500) G15501 G15502 G15503 G15504))) '#f) (if (eq? G15500 'each-any) ((lambda (G15511) (if G15511 (begin '#f (cons G15511 G15504)) '#f)) (G15463 G15499 G15501 G15502 G15503)) ((lambda (G15513) (if (eqv? G15513 'each) (if (null? G15499) (G15465 (vector-ref G15500 '1) G15504) ((lambda (G15529) (if G15529 (begin '#f (G15467 G15529 G15504)) '#f)) (G15459 G15499 (vector-ref G15500 '1) G15501 G15502 G15503))) (if (eqv? G15513 'free-id) (if (symbol? G15499) (if (G11513 G15501) (if (G11649 (G15457 G15499 G15501 G15502 G15503) (vector-ref G15500 '1)) (begin '#f G15504) '#f) '#f) '#f) (if (eqv? G15513 'scheme-id) (if (symbol? G15499) (if (G11513 G15501) (if (G11649 (G15457 G15499 G15501 G15502 G15503) (G12106 (vector-ref G15500 '1))) (begin '#f G15504) '#f) '#f) '#f) (if (eqv? G15513 'each+) (call-with-values (lambda () (G15461 G15499 (vector-ref G15500 '1) (vector-ref G15500 '2) (vector-ref G15500 '3) G15501 G15502 G15503 G15504)) (lambda (G15517 G15518 G15519) ((lambda (G15523 G15524 G15525) (if G15523 (if (null? G15524) (begin '#f (if (null? G15525) (G15465 (vector-ref G15500 '1) G15523) (G15467 G15525 G15523))) '#f) '#f)) G15519 G15518 G15517))) (if (eqv? G15513 'atom) (if (equal? (vector-ref G15500 '1) (G11661 G15499 G15501)) (begin '#f G15504) '#f) (if (eqv? G15513 'vector) (if (vector? G15499) (begin '#f (G15471 (vector->list G15499) (vector-ref G15500 '1) G15501 G15502 G15503 G15504)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G15500)))))))) (vector-ref G15500 '0))))))) (set! G15471 (lambda (G15472 G15473 G15474 G15475 G15476 G15477) (if (not G15477) '#f (if (eq? G15473 '_) G15477 (if (eq? G15473 'any) (cons (G15457 G15472 G15474 G15475 G15476) G15477) (if (G11585 G15472) (if (not (G11513 G15474)) (begin '#f (call-with-values (lambda () (G11615 G15474 G15475 G15476 G15472)) (lambda (G15487 G15488 G15489) ((lambda (G15493 G15494 G15495) (G15471 (G11589 G15472) G15473 G15495 G15494 G15493 G15477)) G15489 G15488 G15487)))) '#f) (if (G10449 G15472) (G15471 (G10451 G15472) G15473 G15474 G15475 G15476 G15477) (G15469 G15472 G15473 G15474 G15475 G15476 G15477)))))))) (G15471 G15452 G15453 '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12222 (lambda (G15660) (if (G11641 G15660) (begin '#f (G11649 G15660 (G12106 '...))) '#f))) (set! G12224 (lambda (G15662) (if (G11641 G15662) (begin '#f (G11649 G15662 (G12106 '_))) '#f))) (set! G12226 (lambda (G15664 G15665) (for-each (lambda (G15668) (if ((lambda (G15670) (if G15670 G15670 ((lambda (G15672) (if G15672 G15672 (begin '#f (G12224 G15668)))) (G12222 G15668)))) (not (G11641 G15668))) (G12453 '#f '"invalid literal" G15665 G15668) (void))) G15664))) (set! G12228 ((lambda () ((lambda (G15675 G15677 G15679 G15681) (begin (set! G15675 (lambda (G15786 G15787 G15788 G15789 G15790) ((lambda (G15796 G15797) ((lambda (G15800 G15801) ((lambda (G15804) (list '(primitive apply) (G11483 '#f G15801 G15804) G15788)) (G12256 (G11621 (G11570 G15796 G15800) G15787) (append (map (lambda (G15806 G15807 G15808) (cons G15806 (G11673 'syntax (cons G15807 G15808)))) G15800 G15801 (map cdr G15786)) G15789) G15790))) (map G11519 G15796) (map G11515 G15796))) (map car G15786) (map cdr G15786)))) (set! G15677 (lambda (G15774 G15775 G15776) ((letrec ((G15780 (lambda (G15782 G15783) (if (null? G15782) (G12453 '#f '"invalid syntax" G15775) (if (G11641 (car G15782)) (if (G11655 (car G15782) G15783) (G12447 (car G15782) '"duplicate " G15776) (G15780 (cdr G15782) (cons (car G15782) G15783))) (G12447 (car G15782) '"invalid " G15776)))))) G15780) G15774 '()))) (set! G15679 (lambda (G15736 G15737 G15738 G15739 G15740 G15741 G15742 G15743) (call-with-values (lambda () (G12218 G15741 G15737)) (lambda (G15754 G15755) ((lambda (G15758 G15759) (if (not (G11653 (map car G15758))) (G15677 (map car G15758) G15741 '"pattern variable") (if (not (for-all (lambda (G15762) (not (G12222 (car G15762)))) G15758)) (G12453 '#f '"misplaced ellipsis in syntax-case pattern" G15741) ((lambda (G15764) ((lambda (G15766) ((lambda (G15768) ((lambda (G15770) (list (G11483 '#f (list G15764) (list 'if G15766 G15768 G15770)) (list '(primitive syntax-dispatch) G15736 (list 'quote G15759)))) (G15681 G15736 G15737 G15738 G15739 G15740))) (G15675 G15758 G15743 G15764 G15739 G15740))) (if (eq? G15742 '#t) G15764 ((lambda (G15772) (list 'if G15764 G15772 (list 'quote '#f))) (G15675 G15758 G15742 G15764 G15739 G15740))))) (G11515 'tmp))))) G15755 G15754))))) (set! G15681 (lambda (G15702 G15703 G15704 G15705 G15706) (if (null? G15704) (list '(primitive syntax-error) G15702) ((lambda (G15712) ((lambda (G15714) (if G15714 (apply (lambda (G15716 G15717) (if (if (G11641 G15716) (if (not (G11655 G15716 G15703)) (begin '#f (not (G12222 G15716))) '#f) '#f) (if (G11649 G15716 (G12106 '_)) (G12256 G15717 G15705 G15706) ((lambda (G15720 G15721) ((lambda (G15724) (list (G11483 '#f (list G15721) G15724) G15702)) (G12256 (G11621 (G11570 (list G15716) (list G15720)) G15717) (cons (cons G15720 (G11673 'syntax (cons G15721 '0))) G15705) G15706))) (G11519 G15716) (G11515 G15716))) (G15679 G15702 G15703 (cdr G15704) G15705 G15706 G15716 '#t G15717))) G15714) ((lambda (G15726) ((lambda (G15728) (if G15728 (apply (lambda (G15730 G15731 G15732) (G15679 G15702 G15703 (cdr G15704) G15705 G15706 G15730 G15731 G15732)) G15728) (G12453 '#f '"invalid syntax" G15726))) (G12220 G15726 '(any any any)))) G15712))) (G12220 G15712 '(any any)))) (car G15704))))) (lambda (G15682 G15683 G15684) ((lambda (G15688) ((lambda (G15690) (if G15690 (apply (lambda (G15692 G15693 G15694) (begin (G12226 G15693 G15682) ((lambda (G15698) ((lambda (G15700) (list (G11483 '#f (list G15698) G15700) (G12256 G15692 G15683 G15684))) (G15681 G15698 G15693 G15694 G15683 G15684))) (G11515 'tmp)))) G15690) (G12453 '#f '"invalid syntax" G15688))) (G12220 G15688 '(_ any each-any . each-any)))) G15682)))) '#f '#f '#f '#f)))) (set! G12230 (lambda (G15812 G15813 . G15816) ((lambda (G15819) (begin (set! G15819 '...) (begin (if (list? G15813) (void) (assertion-violation G15819 '"not a list" G15813)) (if (null? G15816) (void) ((lambda (G15820) (for-each (lambda (G15822) (begin (if (list? G15822) (void) (assertion-violation G15819 '"not a list" G15822)) (if (= (length G15822) G15820) (void) (assertion-violation G15819 '"length mismatch" G15813 G15822)))) G15816)) (length G15813))) (apply map G15812 G15813 G15816)))) '#f))) (set! G12232 ((lambda () ((lambda (G15825 G15827 G15829 G15831 G15833 G15835 G15837 G15839) (begin (set! G15825 (lambda (G15938 G15939 G15940 G15941 G15942 G15943) ((lambda (G15950) ((lambda (G15952) (if (if G15952 (begin '#f (apply (lambda (G15954) (G15942 G15954)) G15952)) '#f) (apply (lambda (G15956) (G12453 '#f '"misplaced ellipsis in syntax form" G15938)) G15952) ((lambda (G15958) ((lambda (G15960) (if (if G15960 (begin '#f (apply (lambda (G15962) (G11641 G15962)) G15960)) '#f) (apply (lambda (G15964) ((lambda (G15966) ((lambda (G15968) ((lambda () (if (eq? (G11675 G15968) 'syntax) (call-with-values (lambda () ((lambda (G15972) (G15827 G15938 (car G15972) (cdr G15972) G15941)) (G11677 G15968))) (lambda (G15974 G15975) ((lambda (G15978 G15979) (values (list 'ref G15979) G15978)) G15975 G15974))) (values (list 'quote G15939) G15941))))) (G11671 G15966 G15940))) (G11667 G15939))) G15960) ((lambda (G15982) ((lambda (G15984) (if (if G15984 (begin '#f (apply (lambda (G15986 G15987) (G15942 G15986)) G15984)) '#f) (apply (lambda (G15990 G15991) (if G15943 (G12453 '#f '"misplaced ellipsis in syntax form" G15938) (G15825 G15938 G15991 G15940 G15941 (lambda (G15994) '#f) '#f))) G15984) ((lambda (G15996) ((lambda (G15998) (if (if G15998 (begin '#f (apply (lambda (G16000 G16001 G16002) (G15942 G16001)) G15998)) '#f) (apply (lambda (G16006 G16007 G16008) ((letrec ((G16012 (lambda (G16014 G16015) ((lambda (G16018) ((lambda (G16020) (if G16020 (apply (lambda () (G16015 G15941)) G16020) ((lambda (G16022) ((lambda (G16024) (if (if G16024 (begin '#f (apply (lambda (G16026 G16027) (G15942 G16026)) G16024)) '#f) (apply (lambda (G16030 G16031) (G16012 G16031 (lambda (G16034) (call-with-values (lambda () (G16015 (cons '() G16034))) (lambda (G16038 G16039) ((lambda (G16042 G16043) (if (null? (car G16042)) (G12453 '#f '"extra ellipsis in syntax form" G15938) (values (G15831 G16043 (car G16042)) (cdr G16042)))) G16039 G16038)))))) G16024) ((lambda (G16046) ((lambda (G16048) (if G16048 (apply (lambda () (call-with-values (lambda () (G15825 G15938 G16014 G15940 G15941 G15942 G15943)) (lambda (G16052 G16053) ((lambda (G16056 G16057) (call-with-values (lambda () (G16015 G16056)) (lambda (G16062 G16063) ((lambda (G16066 G16067) (values (G15829 G16067 G16057) G16066)) G16063 G16062)))) G16053 G16052)))) G16048) (G12453 '#f '"invalid syntax" G16046))) (G12220 G16046 '_))) G16022))) (G12220 G16022 '(any . any)))) G16018))) (G12220 G16018 '()))) G16014)))) G16012) G16008 (lambda (G16070) (call-with-values (lambda () (G15825 G15938 G16006 G15940 (cons '() G16070) G15942 '#f)) (lambda (G16074 G16075) ((lambda (G16078 G16079) (if (null? (car G16078)) (G12453 '#f '"extra ellipsis in syntax form" G15938) (values (G15833 G16079 (car G16078)) (cdr G16078)))) G16075 G16074)))))) G15998) ((lambda (G16082) ((lambda (G16084) (if G16084 (apply (lambda (G16086 G16087) (call-with-values (lambda () (G15825 G15938 G16086 G15940 G15941 G15942 '#f)) (lambda (G16092 G16093) ((lambda (G16096 G16097) (call-with-values (lambda () (G15825 G15938 G16087 G15940 G16096 G15942 G15943)) (lambda (G16102 G16103) ((lambda (G16106 G16107) (values (G15835 G15939 G16086 G16087 G16097 G16107) G16106)) G16103 G16102)))) G16093 G16092)))) G16084) ((lambda (G16110) ((lambda (G16112) (if G16112 (apply (lambda (G16114) (call-with-values (lambda () (G15825 G15938 G16114 G15940 G15941 G15942 '#t)) (lambda (G16118 G16119) ((lambda (G16122 G16123) (values (G15837 G15939 G16114 G16123) G16122)) G16119 G16118)))) G16112) ((lambda (G16126) ((lambda (G16128) (if G16128 (apply (lambda () (values (list 'quote G15939) G15941)) G16128) (G12453 '#f '"invalid syntax" G16126))) (G12220 G16126 '_))) G16110))) (G12220 G16110 '#(vector each-any)))) G16082))) (G12220 G16082 '(any . any)))) G15996))) (G12220 G15996 '(any any . any)))) G15982))) (G12220 G15982 '(any any)))) G15958))) (G12220 G15958 'any))) G15950))) (G12220 G15950 'any))) G15939))) (set! G15827 (lambda (G15914 G15915 G15916 G15917) (if (= G15916 '0) (values G15915 G15917) (if (null? G15917) (G12453 '#f '"missing ellipsis in syntax form" G15914) (call-with-values (lambda () (G15827 G15914 G15915 (- G15916 '1) (cdr G15917))) (lambda (G15924 G15925) ((lambda (G15928 G15929) ((lambda (G15932) (if G15932 ((lambda (G15934) (values (cdr G15934) G15917)) G15932) ((lambda (G15936) (values G15936 (cons (cons (cons G15929 G15936) (car G15917)) G15928))) (G11515 'tmp)))) (assq G15929 (car G15917)))) G15925 G15924))))))) (set! G15829 (lambda (G15910 G15911) (if (equal? G15911 ''()) G15910 (list 'append G15910 G15911)))) (set! G15831 (lambda (G15906 G15907) (list 'apply '(primitive append) (G15833 G15906 G15907)))) (set! G15833 (lambda (G15888 G15889) ((lambda (G15892 G15893) (if (eq? (car G15888) 'ref) (car G15893) (if (for-all (lambda (G15896) (if (eq? (car G15896) 'ref) (begin '#f (memq (cadr G15896) G15892)) '#f)) (cdr G15888)) ((lambda (G15898) (cons 'map (cons (list 'primitive (car G15888)) G15898))) (map ((lambda (G15900) (lambda (G15902) (cdr (assq (cadr G15902) G15900)))) (map cons G15892 G15893)) (cdr G15888))) (cons* 'map (list 'lambda G15892 G15888) G15893)))) (map cdr G15889) (map (lambda (G15904) (list 'ref (car G15904))) G15889)))) (set! G15835 (lambda (G15873 G15874 G15875 G15876 G15877) ((lambda (G15883) (if (eqv? G15883 'quote) (if (eq? (car G15876) 'quote) ((lambda (G15884 G15885) (if (if (eq? G15884 G15874) (begin '#f (eq? G15885 G15875)) '#f) (list 'quote G15873) (list 'quote (cons G15884 G15885)))) (cadr G15876) (cadr G15877)) (if (null? (cadr G15877)) (list 'list G15876) (list 'cons G15876 G15877))) (if (eqv? G15883 'list) (cons 'list (cons G15876 (cdr G15877))) (list 'cons G15876 G15877)))) (car G15877)))) (set! G15837 (lambda (G15867 G15868 G15869) (if (eq? (car G15869) 'quote) (if (eq? (cadr G15869) G15868) (list 'quote G15867) (list 'quote (list->vector (cadr G15869)))) (if (eq? (car G15869) 'list) (cons 'vector (cdr G15869)) (list 'list->vector G15869))))) (set! G15839 (lambda (G15862) ((lambda (G15864) (if (eqv? G15864 'ref) (cadr G15862) (if (eqv? G15864 'primitive) (list 'primitive (cadr G15862)) (if (eqv? G15864 'quote) (list 'quote (cadr G15862)) (if (eqv? G15864 'lambda) (G11483 '#f (cadr G15862) (G15839 (caddr G15862))) (if (eqv? G15864 'map) ((lambda (G15865) (cons '(primitive ellipsis-map) G15865)) (map G15839 (cdr G15862))) (cons (list 'primitive (car G15862)) (map G15839 (cdr G15862))))))))) (car G15862)))) (lambda (G15840 G15841 G15842) ((lambda (G15846) ((lambda (G15848) (if G15848 (apply (lambda (G15850) (call-with-values (lambda () (G15825 G15840 G15850 G15841 '() G12222 '#f)) (lambda (G15854 G15855) ((lambda (G15858 G15859) (G15839 G15859)) G15855 G15854)))) G15848) (G12453 '#f '"invalid syntax" G15846))) (G12220 G15846 '(_ any)))) G15840)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G12234 (lambda (G16130) ((lambda (G16132) (if (eqv? G16132 'quote) G12140 (if (eqv? G16132 'lambda) G12144 (if (eqv? G16132 'case-lambda) G12142 (if (eqv? G16132 'letrec) G12120 (if (eqv? G16132 'letrec*) G12122 (if (eqv? G16132 'case) G12138 (if (eqv? G16132 'if) G12136 (if (eqv? G16132 'when) G12132 (if (eqv? G16132 'unless) G12134 (if (eqv? G16132 'parameterize) G12214 (if (eqv? G16132 'foreign-call) G12216 (if (eqv? G16132 'syntax-case) G12228 (if (eqv? G16132 'syntax) G12232 (if (eqv? G16132 'type-descriptor) G12126 (if (eqv? G16132 'record-type-descriptor) G12128 (if (eqv? G16132 'record-constructor-descriptor) G12130 (if (eqv? G16132 'fluid-let-syntax) G12124 (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G16130))))))))))))))))))) G16130))) (set! G12236 (lambda (G16133) ((lambda (G16135) ((lambda (G16137) (if (if G16137 (begin '#f (apply (lambda (G16139) (if (for-all G11641 G16139) (begin '#f (G10458 (map G11643 G16139))) '#f)) G16137)) '#f) (apply (lambda (G16141) (G12146 (list 'quote (G10458 (map G11643 G16141))))) G16137) (G12453 '#f '"invalid syntax" G16135))) (G12220 G16135 '(_ . each-any)))) G16133))) (set! G12238 (lambda (G16143 G16144) ((lambda (G16147) ((lambda (G16149) (if (if G16149 (begin '#f (apply (lambda (G16151) (if (G11641 G16151) (begin '#f (memq (G11643 G16151) G16144)) '#f)) G16149)) '#f) (apply (lambda (G16153) (G12146 (list 'quote G16153))) G16149) (G12453 '#f '"invalid syntax" G16147))) (G12220 G16147 '(_ any)))) G16143))) (set! G12240 (lambda (G16155) (if (procedure? G16155) G16155 (if (symbol? G16155) ((lambda (G16157) (if (eqv? G16157 'define-record-type) G12208 (if (eqv? G16157 'define-struct) G12206 (if (eqv? G16157 'include) G12196 (if (eqv? G16157 'cond) G12192 (if (eqv? G16157 'let) G12152 (if (eqv? G16157 'do) G12184 (if (eqv? G16157 'or) G12188 (if (eqv? G16157 'and) G12190 (if (eqv? G16157 'let*) G12186 (if (eqv? G16157 'let-values) G12154 (if (eqv? G16157 'let*-values) G12156 (if (eqv? G16157 'syntax-rules) G12200 (if (eqv? G16157 'quasiquote) G12202 (if (eqv? G16157 'quasisyntax) G12204 (if (eqv? G16157 'with-syntax) G12148 (if (eqv? G16157 'identifier-syntax) G12182 (if (eqv? G16157 'time) G12174 (if (eqv? G16157 'delay) G12176 (if (eqv? G16157 'assert) G12178 (if (eqv? G16157 'endianness) G12180 (if (eqv? G16157 'guard) G12170 (if (eqv? G16157 'define-enumeration) G12172 (if (eqv? G16157 'trace-lambda) G12158 (if (eqv? G16157 'trace-define) G12160 (if (eqv? G16157 'trace-define-syntax) G12162 (if (eqv? G16157 'trace-let-syntax) G12166 (if (eqv? G16157 'trace-letrec-syntax) G12168 (if (eqv? G16157 'define-condition-type) G12210 (if (eqv? G16157 'include-into) G12198 (if (eqv? G16157 'eol-style) (lambda (G16162) (G12238 G16162 '(none lf cr crlf nel crnel ls))) (if (eqv? G16157 'error-handling-mode) (lambda (G16160) (G12238 G16160 '(ignore raise replace))) (if (eqv? G16157 'buffer-mode) (lambda (G16158) (G12238 G16158 '(none line block))) (if (eqv? G16157 'file-options) G12236 (if (memv G16157 '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G12212 (error 'macro-transformer '"BUG: invalid macro" G16155)))))))))))))))))))))))))))))))))))) G16155) (error 'core-macro-transformer '"BUG: invalid macro" G16155))))) (set! G12242 (lambda (G16164) (car G16164))) (set! G12244 (lambda (G16166 G16167) ((lambda (G16170) (begin ((letrec ((G16172 (lambda (G16174) (if (G11585 G16174) (void) (if (pair? G16174) (begin (G16172 (car G16174)) (G16172 (cdr G16174))) (if (vector? G16174) (vector-for-each G16172 G16174) (if (symbol? G16174) (G12453 '#f '"raw symbol encountered in output of macro" G16167 G16174) (void)))))))) G16172) G16170) (G11619 (G11609) G16170 G16167))) (G16166 (G11619 G11611 G16167 '#f))))) (set! G12246 (lambda (G16176 G16177) (G12244 (G12240 G16176) G16177))) (set! G12248 (lambda (G16180 G16181) (G12244 (G12242 G16180) G16181))) (set! G12250 (lambda (G16184 G16185) ((lambda (G16188 G16189) (begin (G11129 G16188) ((lambda (G16192) ((lambda (G16194) (G12244 G16194 G16185)) (if (procedure? G16192) G16192 (assertion-violation 'chi-global-macro '"BUG: not a procedure" G16192)))) (symbol-value G16189)))) (car G16184) (cdr G16184)))) (set! G12252 (lambda (G16196 G16197 G16198) (if (null? G16196) '() ((lambda (G16202) (cons G16202 (G12252 (cdr G16196) G16197 G16198))) (G12256 (car G16196) G16197 G16198))))) (set! G12254 (lambda (G16204 G16205 G16206) ((lambda (G16210) ((lambda (G16212) (if G16212 (apply (lambda (G16214 G16215) ((lambda (G16218) (cons G16218 (G12252 G16215 G16205 G16206))) (G12256 G16214 G16205 G16206))) G16212) (G12453 '#f '"invalid syntax" G16210))) (G12220 G16210 '(any . each-any)))) G16204))) (set! G12256 (lambda (G16220 G16221 G16222) (call-with-values (lambda () (G11681 G16220 G16221)) (lambda (G16229 G16230 G16231) ((lambda (G16235 G16236 G16237) ((lambda (G16241) (if (eqv? G16241 'core-macro) ((lambda (G16291) (G16291 G16220 G16221 G16222)) (G12234 G16236)) (if (eqv? G16241 'global) ((lambda (G16287) ((lambda (G16289) ((lambda () (begin ((G12331) G16287) G16289)))) (cdr G16236))) (car G16236)) (if (eqv? G16241 'core-prim) ((lambda (G16285) (list 'primitive G16285)) G16236) (if (eqv? G16241 'call) (G12254 G16220 G16221 G16222) (if (eqv? G16241 'lexical) ((lambda (G16283) G16283) (G12108 G16236)) (if (memv G16241 '(global-macro global-macro!)) (G12256 (G12250 G16236 G16220) G16221 G16222) (if (memv G16241 '(local-macro local-macro!)) (G12256 (G12248 G16236 G16220) G16221 G16222) (if (memv G16241 '(macro macro!)) (G12256 (G12246 G16236 G16220) G16221 G16222) (if (eqv? G16241 'constant) ((lambda (G16281) (list 'quote G16281)) G16236) (if (eqv? G16241 'set!) (G12258 G16220 G16221 G16222) (if (eqv? G16241 'begin) ((lambda (G16273) ((lambda (G16275) (if G16275 (apply (lambda (G16277 G16278) (G11486 '#f (G12252 (cons G16277 G16278) G16221 G16222))) G16275) (G12453 '#f '"invalid syntax" G16273))) (G12220 G16273 '(_ any . each-any)))) G16220) (if (memv G16241 '(let-syntax letrec-syntax)) ((lambda (G16243) ((lambda (G16245) (if (if G16245 (begin '#f (apply (lambda (G16247 G16248 G16249 G16250) (if (G11651 G16247) (void) (G12453 '#f '"invalid identifiers" G16220))) G16245)) '#f) (apply (lambda (G16255 G16256 G16257 G16258) ((lambda (G16263) ((lambda (G16265) ((lambda (G16267) ((lambda () (G11486 '#f (G12252 (map (lambda (G16269) (G11621 G16265 G16269)) (cons G16257 G16258)) (append (map cons G16263 G16267) G16221) (append (map cons G16263 G16267) G16222)))))) (map (lambda (G16271) (G11712 (G12317 (if (eq? G16237 'let-syntax) G16271 (G11621 G16265 G16271)) G16222))) G16256))) (G11570 G16255 G16263))) (map G11519 G16255))) G16245) (G12453 '#f '"invalid syntax" G16243))) (G12220 G16243 '(_ #(each (any any)) any . each-any)))) G16220) (if (eqv? G16241 'displaced-lexical) (G12453 '#f '"identifier out of context" G16220) (if (eqv? G16241 'syntax) (G12453 '#f '"reference to pattern variable outside a syntax form" G16220) (if (memv G16241 '(define define-syntax module import library)) (G12453 '#f (string-append ((lambda (G16242) (if (eqv? G16242 'define) '"a definition" (if (eqv? G16242 'define-syntax) '"a define-syntax" (if (eqv? G16242 'module) '"a module definition" (if (eqv? G16242 'library) '"a library definition" (if (eqv? G16242 'import) '"an import declaration" '"a non-expression")))))) G16237) '" was found where an expression was expected") G16220) (if (eqv? G16241 'mutable) (G12453 '#f '"attempt to reference an unexportable variable" G16220) (G12453 '#f '"invalid expression" G16220)))))))))))))))))) G16237)) G16231 G16230 G16229))))) (set! G12258 (lambda (G16293 G16294 G16295) ((lambda (G16299) ((lambda (G16301) (if (if G16301 (begin '#f (apply (lambda (G16303 G16304) (G11641 G16303)) G16301)) '#f) (apply (lambda (G16307 G16308) (call-with-values (lambda () (G11681 G16307 G16294)) (lambda (G16314 G16315 G16316) ((lambda (G16320 G16321 G16322) ((lambda (G16326) (if (eqv? G16326 'lexical) (begin (G12112 G16321 '#t) (list 'set! (G12108 G16321) (G12256 G16308 G16294 G16295))) (if (eqv? G16326 'core-prim) (G12453 '#f '"cannot modify imported core primitive" G16293) (if (eqv? G16326 'global) (G12453 '#f '"attempt to modify imported binding" G16293) (if (eqv? G16326 'global-macro!) (G12256 (G12250 G16321 G16293) G16294 G16295) (if (eqv? G16326 'local-macro!) (G12256 (G12248 G16321 G16293) G16294 G16295) (if (eqv? G16326 'mutable) (G12453 '#f '"attempt to assign to an unexportable variable" G16293) (G12453 '#f '"invalid syntax" G16293)))))))) G16322)) G16316 G16315 G16314)))) G16301) (G12453 '#f '"invalid syntax" G16299))) (G12220 G16299 '(_ any any)))) G16293))) (set! G12260 (lambda (G16327 G16328) ((lambda (G16331) ((lambda (G16333) (if G16333 (apply (lambda (G16335) (if (G11651 G16335) (void) (G12150 G16328 G16327))) G16333) ((lambda (G16337) ((lambda (G16339) (if G16339 (apply (lambda (G16341 G16342) (if (G11651 (cons G16342 G16341)) (void) (G12150 G16328 G16327))) G16339) ((lambda (G16345) ((lambda (G16347) (if G16347 (apply (lambda () (G12453 '#f '"invalid syntax" G16328)) G16347) (G12453 '#f '"invalid syntax" G16345))) (G12220 G16345 '_))) G16337))) (G12220 G16337 '#(each+ any () any)))) G16331))) (G12220 G16331 'each-any))) G16327))) (set! G12262 (lambda (G16349 G16350 G16351 G16352 G16353) ((lambda (G16359) ((lambda (G16361) (if G16361 (apply (lambda (G16363) (begin (G12260 G16350 G16349) ((lambda (G16365 G16366) (values G16365 (G12278 (G11621 (G11570 G16363 G16366) G16351) (G12116 G16366 G16365 G16352) G16353))) (map G11515 G16363) (map G11519 G16363)))) G16361) ((lambda (G16369) ((lambda (G16371) (if G16371 (apply (lambda (G16373 G16374) (begin (G12260 G16350 G16349) ((lambda (G16377 G16378 G16379 G16380) (values (append G16377 G16379) (G12278 (G11621 (G11570 (cons G16374 G16373) (cons G16380 G16378)) G16351) (G12116 (cons G16380 G16378) (cons G16379 G16377) G16352) G16353))) (map G11515 G16373) (map G11519 G16373) (G11515 G16374) (G11519 G16374)))) G16371) ((lambda (G16385) ((lambda (G16387) (if G16387 (apply (lambda () (G12453 '#f '"invalid syntax" G16350)) G16387) (G12453 '#f '"invalid syntax" G16385))) (G12220 G16385 '_))) G16369))) (G12220 G16369 '#(each+ any () any)))) G16359))) (G12220 G16359 'each-any))) G16350))) (set! G12264 (lambda (G16389 G16390 G16391 G16392 G16393) (if (null? G16390) (values '() '()) (call-with-values (lambda () (G12262 G16389 (car G16390) (car G16391) G16392 G16393)) (lambda (G16401 G16402) ((lambda (G16405 G16406) (call-with-values (lambda () (G12264 G16389 (cdr G16390) (cdr G16391) G16392 G16393)) (lambda (G16411 G16412) ((lambda (G16415 G16416) (values (cons G16406 G16416) (cons G16405 G16415))) G16412 G16411)))) G16402 G16401)))))) (set! G12266 (lambda (G16419 G16420 G16421) ((lambda (G16425 G16426) (call-with-values (lambda () (G12262 G16425 G16425 G16426 G16420 G16421)) (lambda (G16431 G16432) ((lambda (G16435 G16436) (G11483 '#f G16436 G16435)) G16432 G16431)))) (car G16419) (cdr G16419)))) (set! G12268 (lambda (G16439 G16440 G16441) ((lambda (G16445) (if (eqv? G16445 'defun) (G12266 (cdr G16439) G16440 G16441) (if (eqv? G16445 'expr) ((lambda (G16448) (G12256 G16448 G16440 G16441)) (cdr G16439)) (if (eqv? G16445 'top-expr) ((lambda (G16446) (G11486 '#f (list (G12256 G16446 G16440 G16441) (G11487)))) (cdr G16439)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G16439))))) (car G16439)))) (set! G12270 (lambda (G16450 G16451 G16452 G16453 G16454) ((letrec ((G16460 (lambda (G16462 G16463) (if (null? G16462) (map (lambda (G16466) (G12256 G16466 G16453 G16454)) G16452) ((lambda (G16468 G16469) ((lambda (G16472) (if (eqv? G16472 'defun) ((lambda (G16477) (cons (list 'set! G16468 G16477) (G16460 (cdr G16462) (cdr G16463)))) (G12266 (cdr G16469) G16453 G16454)) (if (eqv? G16472 'expr) ((lambda (G16475) (cons (list 'set! G16468 G16475) (G16460 (cdr G16462) (cdr G16463)))) (G12256 (cdr G16469) G16453 G16454)) (if (eqv? G16472 'top-expr) ((lambda (G16473) (cons G16473 (G16460 (cdr G16462) (cdr G16463)))) (G12256 (cdr G16469) G16453 G16454)) (error 'expand-interaction '"invallid" G16469))))) (car G16469))) (car G16462) (car G16463)))))) G16460) G16450 G16451))) (set! G12272 (lambda (G16479 G16480 G16481) ((letrec ((G16485 (lambda (G16487) (if (null? G16487) '() ((lambda (G16489) (cons G16489 (G16485 (cdr G16487)))) (G12268 (car G16487) G16480 G16481)))))) G16485) G16479))) (set! G12274 (lambda (G16491 G16492 G16493) (if (null? G16492) '#f (if (G11647 G16491 (car G16492)) (car G16493) (G12274 G16491 (cdr G16492) (cdr G16493)))))) (set! G12276 (lambda (G16497) ((letrec ((G16499 (lambda (G16501 G16502) (if (null? G16501) G16502 ((lambda (G16505) (if G16505 ((lambda (G16507) (G16499 (cdr G16501) (cons (list (car G16501) G16507) G16502))) G16505) (G16499 (cdr G16501) G16502))) (G12274 (car G16501) (cdr G16501) (cdr G16501))))))) G16499) G16497 '()))) (set! G12278 (lambda (G16509 G16510 G16511) ((lambda (G16515) (call-with-values (lambda () (G12315 (map (lambda (G16524) (G11621 G16515 G16524)) (G11639 G16509)) G16510 G16511 '() '() '() '() G16515 '#f)) (lambda (G16526 G16527 G16528 G16529 G16530 G16531 G16532) ((lambda (G16540 G16541 G16542 G16543 G16544 G16545 G16546) (begin (if (null? G16546) (G12453 '#f '"no expression in body" G16546) (void)) ((lambda (G16554) ((lambda (G16556) ((lambda () (G11489 '#f (reverse G16543) (reverse G16556) (G11486 '#f G16554))))) (G12272 G16542 G16545 G16544))) (G12252 (append (apply append (reverse G16541)) G16546) G16545 G16544)))) G16532 G16531 G16530 G16529 G16528 G16527 G16526)))) (G11560)))) (set! G12280 (lambda (G16558) ((lambda (G16560) ((lambda (G16562) (if G16562 (apply (lambda (G16564 G16565) (begin (if (for-all G11641 G16564) (void) (G12453 '#f '"module exports must be identifiers" G16558)) (values '#f (list->vector G16564) G16565))) G16562) ((lambda (G16568) ((lambda (G16570) (if G16570 (apply (lambda (G16572 G16573 G16574) (begin (if (G11641 G16572) (void) (G12453 '#f '"module name must be an identifier" G16558)) (if (for-all G11641 G16573) (void) (G12453 '#f '"module exports must be identifiers" G16558)) (values G16572 (list->vector G16573) G16574))) G16570) (G12453 '#f '"invalid syntax" G16568))) (G12220 G16568 '(_ any each-any . each-any)))) G16560))) (G12220 G16560 '(_ each-any . each-any)))) G16558))) (set! G12286 (make-record-type-descriptor 'module-interface '#f 'G12284 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G12288 '#f) (set! G12290 (make-record-constructor-descriptor G12286 '#f G12288)) (set! G12295 (record-predicate G12286)) (set! G12297 (record-constructor G12290)) (set! G12299 (record-accessor G12286 '0)) (set! G12301 (record-accessor G12286 '1)) (set! G12303 (record-accessor G12286 '2)) (set! G12305 (record-mutator G12286 '0)) (set! G12307 (record-mutator G12286 '1)) (set! G12309 (record-mutator G12286 '2)) (set! G12311 (lambda (G16578 G16579) ((lambda (G16583) (begin (set! G16583 (lambda (G16590 G16591) (begin (if (null? G16590) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G16594) (if (eq? G16594 G16591) '() (cons G16594 (G16583 (cdr G16590) G16591)))) (car G16590))))) ((lambda (G16584 G16585) (if (null? G16584) G16585 (vector-map (lambda (G16588) (G11587 (G11589 G16588) (append G16584 (G11591 G16588)) '() '())) G16585))) (G16583 (G11591 G16579) (G12299 G16578)) (G12301 G16578)))) '#f))) (set! G12313 (lambda (G16596 G16597 G16598 G16599 G16600 G16601 G16602) (call-with-values (lambda () (G12280 G16596)) (lambda (G16613 G16614 G16615) ((lambda (G16619 G16620 G16621) ((lambda (G16625) ((lambda (G16627) ((lambda () (call-with-values (lambda () (G12315 G16627 G16597 G16598 G16599 G16600 G16601 G16602 G16625 '#f)) (lambda (G16636 G16637 G16638 G16639 G16640 G16641 G16642) ((lambda (G16650 G16651 G16652 G16653 G16654 G16655 G16656) ((lambda (G16664 G16665) (if (not G16621) (values G16653 G16652 G16620 G16664 G16655 G16654 G16665 G16650) ((lambda (G16668 G16669) (values G16653 G16652 (vector G16621) (vector G16668) (cons (cons G16668 (cons '$module G16669)) G16655) (cons (cons G16668 (cons '$module G16669)) G16654) G16665 G16650)) (G11519 'module) (G12297 (car (G11591 G16621)) (vector-map (lambda (G16672) (G11587 (G11589 G16672) (G11591 G16672) '() '())) G16620) G16664)))) (vector-map (lambda (G16674) ((lambda (G16676) (if G16676 G16676 (begin '#f (G12453 '#f '"cannot find module export" G16674)))) (G11667 (G11587 (G11643 G16674) (G11591 G16674) (list G16625) '())))) G16620) (cons G16656 G16651))) G16642 G16641 G16640 G16639 G16638 G16637 G16636)))))) (map (lambda (G16678) (G11621 G16625 G16678)) (G11639 G16619)))) (G11560))) G16615 G16614 G16613))))) (set! G12315 (lambda (G16680 G16681 G16682 G16683 G16684 G16685 G16686 G16687 G16688) (if (null? G16680) (values G16680 G16681 G16682 G16683 G16684 G16685 G16686) ((lambda (G16698) (call-with-values (lambda () (G11681 G16698 G16681)) (lambda (G16703 G16704 G16705) ((lambda (G16709 G16710 G16711) ((lambda (G16715) ((lambda (G16717) (if (eqv? G16717 'define) (call-with-values (lambda () (G12100 G16698)) (lambda (G16908 G16909) ((lambda (G16912 G16913) (begin (if (G11655 G16913 G16715) (G12453 '#f '"cannot redefine keyword" G16698) (void)) (call-with-values (lambda () (G11523 G16913 G16687)) (lambda (G16918 G16919) ((lambda (G16922 G16923) (begin (G11562 G16687 G16913 G16923) (G12315 (cdr G16680) (G12114 G16923 G16922 G16681) G16682 (cons G16922 G16683) (cons G16912 G16684) G16685 G16715 G16687 G16688))) G16919 G16918))))) G16909 G16908))) (if (eqv? G16717 'define-syntax) (call-with-values (lambda () (G12102 G16698)) (lambda (G16892 G16893) ((lambda (G16896 G16897) (begin (if (G11655 G16897 G16715) (G12453 '#f '"cannot redefine keyword" G16698) (void)) ((lambda (G16900 G16901) (begin (G11562 G16687 G16897 G16900) ((lambda (G16904) (G12315 (cdr G16680) (cons (cons G16900 G16904) G16681) (cons (cons G16900 G16904) G16682) G16683 G16684 G16685 G16715 G16687 G16688)) (G11712 G16901)))) (G11525 G16897 G16687) (G12317 G16896 G16682)))) G16893 G16892))) (if (memv G16717 '(let-syntax letrec-syntax)) ((lambda (G16864) ((lambda (G16866) (if (if G16866 (begin '#f (apply (lambda (G16868 G16869 G16870) (if (G11651 G16868) (void) (G12453 '#f '"invalid identifiers" G16698))) G16866)) '#f) (apply (lambda (G16874 G16875 G16876) ((lambda (G16880) ((lambda (G16882) ((lambda (G16884) ((lambda () (G12315 (append (map (lambda (G16886) (G11621 G16882 G16886)) G16876) (cdr G16680)) (append (map cons G16880 G16884) G16681) (append (map cons G16880 G16884) G16682) G16683 G16684 G16685 G16715 G16687 G16688)))) (map (lambda (G16888) (G11712 (G12317 (if (eq? G16711 'let-syntax) G16888 (G11621 G16882 G16888)) G16682))) G16875))) (G11570 G16874 G16880))) (map G11519 G16874))) G16866) (G12453 '#f '"invalid syntax" G16864))) (G12220 G16864 '(_ #(each (any any)) . each-any)))) G16698) (if (eqv? G16717 'begin) ((lambda (G16858) ((lambda (G16860) (if G16860 (apply (lambda (G16862) (G12315 (append G16862 (cdr G16680)) G16681 G16682 G16683 G16684 G16685 G16715 G16687 G16688)) G16860) (G12453 '#f '"invalid syntax" G16858))) (G12220 G16858 '(_ . each-any)))) G16698) (if (memv G16717 '(global-macro global-macro!)) (G12315 (cons (G11621 G16687 (G12250 G16710 G16698)) (cdr G16680)) G16681 G16682 G16683 G16684 G16685 G16715 G16687 G16688) (if (memv G16717 '(local-macro local-macro!)) (G12315 (cons (G11621 G16687 (G12248 G16710 G16698)) (cdr G16680)) G16681 G16682 G16683 G16684 G16685 G16715 G16687 G16688) (if (memv G16717 '(macro macro!)) (G12315 (cons (G11621 G16687 (G12246 G16710 G16698)) (cdr G16680)) G16681 G16682 G16683 G16684 G16685 G16715 G16687 G16688) (if (eqv? G16717 'module) (call-with-values (lambda () (G12313 G16698 G16681 G16682 G16683 G16684 G16685 G16715)) (lambda (G16822 G16823 G16824 G16825 G16826 G16827 G16828 G16829) ((lambda (G16838 G16839 G16840 G16841 G16842 G16843 G16844 G16845) (begin (vector-for-each (lambda (G16854 G16855) (G11562 G16687 G16854 G16855)) G16843 G16842) (G12315 (cdr G16680) G16841 G16840 G16845 G16844 G16839 G16838 G16687 G16688))) G16829 G16828 G16827 G16826 G16825 G16824 G16823 G16822))) (if (eqv? G16717 'library) (begin (G12427 (G11663 G16698)) (G12315 (cdr G16680) G16681 G16682 G16683 G16684 G16685 G16715 G16687 G16688)) (if (eqv? G16717 'import) (begin ((lambda () ((lambda (G16719 G16721 G16723) (begin (set! G16719 (lambda (G16794) ((lambda (G16796) ((lambda (G16798) (if (if G16798 (begin '#f (apply (lambda (G16800) (G11641 G16800)) G16798)) '#f) (apply (lambda (G16802) '#t) G16798) ((lambda (G16804) ((lambda (G16806) (if G16806 (apply (lambda (G16808) '#f) G16806) ((lambda (G16810) ((lambda (G16812) (if G16812 (apply (lambda () (G12453 '#f '"malformed import form" G16794)) G16812) (G12453 '#f '"invalid syntax" G16810))) (G12220 G16810 '_))) G16804))) (G12220 G16804 '(_ . each-any)))) G16796))) (G12220 G16796 '(_ any)))) G16794))) (set! G16721 (lambda (G16764 G16765) ((lambda (G16768) ((lambda (G16770) (if (if G16770 (begin '#f (apply (lambda (G16772) (G11641 G16772)) G16770)) '#f) (apply (lambda (G16774) (call-with-values (lambda () (G11681 G16774 G16765)) (lambda (G16779 G16780 G16781) ((lambda (G16785 G16786 G16787) ((lambda (G16791) (if (eqv? G16791 '$module) ((lambda (G16792) (values (G12311 G16792 G16774) (G12303 G16792))) G16786) (G12453 '#f '"invalid import" G16764))) G16787)) G16781 G16780 G16779)))) G16770) (G12453 '#f '"invalid syntax" G16768))) (G12220 G16768 '(_ any)))) G16764))) (set! G16723 (lambda (G16738) ((lambda (G16740) ((lambda (G16742) (if G16742 (apply (lambda (G16744 G16745) (call-with-values (lambda () (G12325 (G12459 G16745))) (lambda (G16750 G16751) ((lambda (G16754 G16755) (values (vector-map (lambda (G16758) (G11607 G16744 G16758)) G16755) G16754)) G16751 G16750)))) G16742) ((lambda (G16760) ((lambda (G16762) (if G16762 (apply (lambda () (G12453 '#f '"invalid import form" G16738)) G16762) (G12453 '#f '"invalid syntax" G16760))) (G12220 G16760 '_))) G16740))) (G12220 G16740 '(any . each-any)))) G16738))) (call-with-values (lambda () (if (G16719 G16698) (G16721 G16698 G16681) (G16723 G16698))) (lambda (G16726 G16727) ((lambda (G16730 G16731) (vector-for-each (lambda (G16734 G16735) (G11562 G16687 G16734 G16735)) G16731 G16730)) G16727 G16726))))) '#f '#f '#f))) (G12315 (cdr G16680) G16681 G16682 G16683 G16684 G16685 G16715 G16687 G16688)) (if G16688 (G12315 (cdr G16680) G16681 G16682 (cons (G11515 'dummy) G16683) (cons (cons 'top-expr G16698) G16684) G16685 G16715 G16687 G16688) (values G16680 G16681 G16682 G16683 G16684 G16685 G16715))))))))))))) G16711)) (if (G11641 G16709) (cons G16709 G16686) G16686))) G16705 G16704 G16703)))) (car G16680))))) (set! G12317 (lambda (G16926 G16927) ((lambda (G16930) ((lambda (G16932) (begin (for-each ((lambda (G16934) (lambda (G16936) (begin (G11128 G16936) (G16934 G16936)))) (G12333)) (G16930)) G16932)) ((lambda (G16942 G16943 G16944 G16945) ((lambda (G16950) (dynamic-wind G16950 (lambda () (G12256 G16926 G16927 G16927)) G16950)) (lambda () (begin ((lambda (G16952) (begin (G16942 G16944) (set! G16944 G16952))) (G16942)) ((lambda (G16954) (begin (G16943 G16945) (set! G16945 G16954))) (G16943)))))) G12331 G12333 G16930 (lambda (G16956) (values))))) (G12329)))) (set! G12319 (lambda (G16958) ((lambda (G16961) (begin (set! G16961 (lambda (G16990) (symbol? (G12459 G16990)))) ((letrec ((G16962 (lambda (G16964 G16965 G16966) (if (null? G16964) (begin ((lambda (G16970) (if (G11651 G16970) (void) (G12453 'export '"invalid exports" (G12276 G16970)))) (map (lambda (G16972) (G11587 G16972 G11511 '() '())) G16966)) (values (map G12459 G16965) (map G12459 G16966))) ((lambda (G16974) ((lambda (G16976) (if G16976 (apply (lambda (G16978 G16979 G16980) (begin (if (if (eq? (G12459 G16978) 'rename) (if (for-all G16961 G16979) (begin '#f (for-all G16961 G16980)) '#f) '#f) (void) (G12453 'export '"invalid export specifier" (car G16964))) (G16962 (cdr G16964) (append G16979 G16965) (append G16980 G16966)))) G16976) ((lambda (G16984) ((lambda (G16986) (if G16986 (apply (lambda (G16988) (begin (if (G16961 G16988) (void) (G12453 'export '"invalid export" G16988)) (G16962 (cdr G16964) (cons G16988 G16965) (cons G16988 G16966)))) G16986) (G12453 '#f '"invalid syntax" G16984))) (G12220 G16984 'any))) G16974))) (G12220 G16974 '(any . #(each (any any)))))) (car G16964)))))) G16962) G16958 '() '()))) '#f))) (set! G12321 (lambda (G16992) ((lambda (G16995) (begin (set! G16995 (lambda (G17006) ((lambda (G17008) ((lambda (G17010) (if (if G17010 (begin '#f (apply (lambda (G17012) (for-all (lambda (G17014) ((lambda (G17016) (if (integer? G17016) (begin '#f (exact? G17016)) '#f)) (G12459 G17014))) G17012)) G17010)) '#f) (apply (lambda (G17018) (values '() (map G12459 G17018))) G17010) ((lambda (G17020) ((lambda (G17022) (if (if G17022 (begin '#f (apply (lambda (G17024 G17025) (symbol? (G12459 G17024))) G17022)) '#f) (apply (lambda (G17028 G17029) (call-with-values (lambda () (G16995 G17029)) (lambda (G17034 G17035) ((lambda (G17038 G17039) (values (cons (G12459 G17028) G17039) G17038)) G17035 G17034)))) G17022) ((lambda (G17042) ((lambda (G17044) (if G17044 (apply (lambda () (values '() '())) G17044) ((lambda (G17046) ((lambda (G17048) (if G17048 (apply (lambda () (G12453 '#f '"invalid library name" G16992)) G17048) (G12453 '#f '"invalid syntax" G17046))) (G12220 G17046 '_))) G17042))) (G12220 G17042 '()))) G17020))) (G12220 G17020 '(any . any)))) G17008))) (G12220 G17008 '(each-any)))) G17006))) (call-with-values (lambda () (G16995 G16992)) (lambda (G16998 G16999) ((lambda (G17002 G17003) (begin (if (null? G17003) (G12453 '#f '"empty library name" G16992) (void)) (values G17003 G17002))) G16999 G16998))))) '#f))) (set! G12323 (lambda (G17050) ((lambda (G17052) ((lambda (G17054) (if (if G17054 (begin '#f (apply (lambda (G17056 G17057 G17058 G17059 G17060 G17061 G17062) (if (eq? (G12459 G17058) 'export) (if (eq? (G12459 G17060) 'import) (begin '#f (eq? (G12459 G17056) 'library)) '#f) '#f)) G17054)) '#f) (apply (lambda (G17070 G17071 G17072 G17073 G17074 G17075 G17076) (values G17071 G17073 G17075 G17076)) G17054) ((lambda (G17084) ((lambda (G17086) (if G17086 (apply (lambda () (G12453 '#f '"malformed library" G17050)) G17086) (G12453 '#f '"invalid syntax" G17084))) (G12220 G17084 '_))) G17052))) (G12220 G17052 '(any each-any (any . each-any) (any . each-any) . each-any)))) G17050))) (set! G12325 (lambda (G17088) ((lambda (G17091 G17093 G17095 G17097 G17099 G17101 G17103 G17105 G17107 G17109 G17111) (begin (set! G17091 (lambda (G17598) (symbol? (G12459 G17598)))) (set! G17093 (lambda (G17596) (G12453 'import '"two imports with different bindings" G17596))) (set! G17095 (lambda (G17578 G17579) ((lambda (G17583) (begin (set! G17583 (lambda (G17584 G17585) ((lambda (G17588 G17589) ((lambda (G17592) (if G17592 ((lambda (G17594) (if (eq? (cdr G17594) G17589) G17585 (G17093 G17588))) G17592) (cons G17584 G17585))) (assq G17588 G17585))) (car G17584) (cdr G17584)))) (if (null? G17578) G17579 (G17583 (car G17578) (G17095 (cdr G17578) G17579))))) '#f))) (set! G17097 (lambda (G17536 G17537) ((lambda (G17541) (begin (set! G17541 (lambda (G17562 G17563) (if (null? G17563) (G12453 'import '"cannot rename unbound identifier" G17562) (if (eq? G17562 (caar G17563)) (values (cdar G17563) (cdr G17563)) ((lambda (G17566) (call-with-values (lambda () (G17541 G17562 (cdr G17563))) (lambda (G17570 G17571) ((lambda (G17574 G17575) (values G17575 (cons G17566 G17574))) G17571 G17570)))) (car G17563)))))) (if (null? G17536) (values '() G17537) (call-with-values (lambda () (G17541 (car G17536) G17537)) (lambda (G17544 G17545) ((lambda (G17548 G17549) (call-with-values (lambda () (G17097 (cdr G17536) G17548)) (lambda (G17554 G17555) ((lambda (G17558 G17559) (values (cons G17549 G17559) G17558)) G17555 G17554)))) G17545 G17544)))))) '#f))) (set! G17099 (lambda (G17528 G17529) (map (lambda (G17532) ((lambda (G17534) (if G17534 (cdr G17534) (G12453 'import '"cannot find identifier" G17532))) (assq G17532 G17529))) G17528))) (set! G17101 (lambda (G17520 G17521) ((letrec ((G17524 (lambda (G17526) (if (null? G17526) '() (if (memq (caar G17526) G17520) (G17524 (cdr G17526)) (cons (car G17526) (G17524 (cdr G17526)))))))) G17524) G17521))) (set! G17103 (lambda (G17518) (if (null? G17518) '() (if (memq (car G17518) (cdr G17518)) (G17103 (cdr G17518)) (cons (car G17518) (G17103 (cdr G17518))))))) (set! G17105 (lambda (G17290) ((lambda (G17293 G17295 G17297) (begin (set! G17293 (lambda (G17516) (if (integer? G17516) (if (exact? G17516) (begin '#f (>= G17516 '0)) '#f) '#f))) (set! G17295 (lambda (G17420) ((lambda (G17422) ((lambda (G17424) (if (if G17424 (begin '#f (apply (lambda (G17426) (G17293 (G12459 G17426))) G17424)) '#f) (apply (lambda (G17428) (lambda (G17430) (= G17430 (G12459 G17428)))) G17424) ((lambda (G17432) ((lambda (G17434) (if (if G17434 (begin '#f (apply (lambda (G17436 G17437) (eq? (G12459 G17436) 'and)) G17434)) '#f) (apply (lambda (G17440 G17441) ((lambda (G17444) (lambda (G17446) (for-all (lambda (G17448) (G17448 G17446)) G17444))) (map G17295 G17441))) G17434) ((lambda (G17450) ((lambda (G17452) (if (if G17452 (begin '#f (apply (lambda (G17454 G17455) (eq? (G12459 G17454) 'or)) G17452)) '#f) (apply (lambda (G17458 G17459) ((lambda (G17462) (lambda (G17464) (exists (lambda (G17466) (G17466 G17464)) G17462))) (map G17295 G17459))) G17452) ((lambda (G17468) ((lambda (G17470) (if (if G17470 (begin '#f (apply (lambda (G17472 G17473) (eq? (G12459 G17472) 'not)) G17470)) '#f) (apply (lambda (G17476 G17477) ((lambda (G17480) (lambda (G17482) (not (G17480 G17482)))) (G17295 G17477))) G17470) ((lambda (G17484) ((lambda (G17486) (if (if G17486 (begin '#f (apply (lambda (G17488 G17489) (if (eq? (G12459 G17488) '<=) (begin '#f (G17293 (G12459 G17489))) '#f)) G17486)) '#f) (apply (lambda (G17492 G17493) (lambda (G17496) (<= G17496 (G12459 G17493)))) G17486) ((lambda (G17498) ((lambda (G17500) (if (if G17500 (begin '#f (apply (lambda (G17502 G17503) (if (eq? (G12459 G17502) '>=) (begin '#f (G17293 G17503)) '#f)) G17500)) '#f) (apply (lambda (G17506 G17507) (lambda (G17510) (>= G17510 (G12459 G17507)))) G17500) ((lambda (G17512) ((lambda (G17514) (if G17514 (apply (lambda () (G12453 'import '"invalid sub-version spec" G17290 G17420)) G17514) (G12453 '#f '"invalid syntax" G17512))) (G12220 G17512 '_))) G17498))) (G12220 G17498 '(any any)))) G17484))) (G12220 G17484 '(any any)))) G17468))) (G12220 G17468 '(any any)))) G17450))) (G12220 G17450 '(any . each-any)))) G17432))) (G12220 G17432 '(any . each-any)))) G17422))) (G12220 G17422 'any))) G17420))) (set! G17297 (lambda (G17340) ((lambda (G17342) ((lambda (G17344) (if G17344 (apply (lambda () (lambda (G17346) '#t)) G17344) ((lambda (G17348) ((lambda (G17350) (if (if G17350 (begin '#f (apply (lambda (G17352 G17353) (eq? (G12459 G17352) 'and)) G17350)) '#f) (apply (lambda (G17356 G17357) ((lambda (G17360) (lambda (G17362) (for-all (lambda (G17364) (G17364 G17362)) G17360))) (map G17297 G17357))) G17350) ((lambda (G17366) ((lambda (G17368) (if (if G17368 (begin '#f (apply (lambda (G17370 G17371) (eq? (G12459 G17370) 'or)) G17368)) '#f) (apply (lambda (G17374 G17375) ((lambda (G17378) (lambda (G17380) (exists (lambda (G17382) (G17382 G17380)) G17378))) (map G17297 G17375))) G17368) ((lambda (G17384) ((lambda (G17386) (if (if G17386 (begin '#f (apply (lambda (G17388 G17389) (eq? (G12459 G17388) 'not)) G17386)) '#f) (apply (lambda (G17392 G17393) ((lambda (G17396) (lambda (G17398) (not (G17396 G17398)))) (G17297 G17393))) G17386) ((lambda (G17400) ((lambda (G17402) (if G17402 (apply (lambda (G17404) ((lambda (G17406) (lambda (G17408) ((letrec ((G17410 (lambda (G17412 G17413) (if (null? G17412) '#t (if (null? G17413) '#f (if ((car G17412) (car G17413)) (begin '#f (G17410 (cdr G17412) (cdr G17413))) '#f)))))) G17410) G17406 G17408))) (map G17295 G17404))) G17402) ((lambda (G17416) ((lambda (G17418) (if G17418 (apply (lambda () (G12453 'import '"invalid version spec" G17290 G17340)) G17418) (G12453 '#f '"invalid syntax" G17416))) (G12220 G17416 '_))) G17400))) (G12220 G17400 'each-any))) G17384))) (G12220 G17384 '(any any)))) G17366))) (G12220 G17366 '(any . each-any)))) G17348))) (G12220 G17348 '(any . each-any)))) G17342))) (G12220 G17342 '()))) G17340))) ((letrec ((G17298 (lambda (G17300) ((lambda (G17302) ((lambda (G17304) (if G17304 (apply (lambda (G17306) (values '() (G17297 G17306))) G17304) ((lambda (G17308) ((lambda (G17310) (if (if G17310 (begin '#f (apply (lambda (G17312 G17313) (G17091 G17312)) G17310)) '#f) (apply (lambda (G17316 G17317) (call-with-values (lambda () (G17298 G17317)) (lambda (G17322 G17323) ((lambda (G17326 G17327) (values (cons (G12459 G17316) G17327) G17326)) G17323 G17322)))) G17310) ((lambda (G17330) ((lambda (G17332) (if G17332 (apply (lambda () (values '() (lambda (G17334) '#t))) G17332) ((lambda (G17336) ((lambda (G17338) (if G17338 (apply (lambda () (G12453 '#f '"invalid import spec" G17290)) G17338) (G12453 '#f '"invalid syntax" G17336))) (G12220 G17336 '_))) G17330))) (G12220 G17330 '()))) G17308))) (G12220 G17308 '(any . any)))) G17302))) (G12220 G17302 '(each-any)))) G17300)))) G17298) G17290))) '#f '#f '#f))) (set! G17107 (lambda (G17276) (call-with-values (lambda () (G17105 G17276)) (lambda (G17280 G17281) ((lambda (G17284 G17285) (begin (if (null? G17285) (G12453 'import '"empty library name" G17276) (void)) ((lambda (G17288) (begin (if G17288 (void) (G12453 'import '"cannot find library with required name" G17285)) (if (G17284 (G11081 G17288)) (void) (G12453 'import '"library does not satisfy version specification" G17276 G17288)) ((G12335) G17288) (G11085 G17288))) (G11121 G17285)))) G17281 G17280))))) (set! G17109 (lambda (G17134) ((lambda (G17136) ((lambda (G17138) (if (if G17138 (begin '#f (apply (lambda (G17140 G17141) (not (memq (G12459 G17140) '(for rename except only prefix library)))) G17138)) '#f) (apply (lambda (G17144 G17145) (G17107 (cons G17144 G17145))) G17138) ((lambda (G17148) ((lambda (G17150) (if (if G17150 (begin '#f (apply (lambda (G17152 G17153 G17154 G17155) (if (eq? (G12459 G17152) 'rename) (if (for-all G17091 G17154) (begin '#f (for-all G17091 G17155)) '#f) '#f)) G17150)) '#f) (apply (lambda (G17160 G17161 G17162 G17163) ((lambda (G17168 G17169 G17170) ((lambda (G17174) ((lambda (G17176) (G17095 (map cons G17170 G17174) G17176)) (G17101 G17169 G17168))) (G17099 G17169 G17168))) (G17109 G17161) (map G12459 G17162) (map G12459 G17163))) G17150) ((lambda (G17178) ((lambda (G17180) (if (if G17180 (begin '#f (apply (lambda (G17182 G17183 G17184) (if (eq? (G12459 G17182) 'except) (begin '#f (for-all G17091 G17184)) '#f)) G17180)) '#f) (apply (lambda (G17188 G17189 G17190) ((lambda (G17194) (G17101 (map G12459 G17190) G17194)) (G17109 G17189))) G17180) ((lambda (G17196) ((lambda (G17198) (if (if G17198 (begin '#f (apply (lambda (G17200 G17201 G17202) (if (eq? (G12459 G17200) 'only) (begin '#f (for-all G17091 G17202)) '#f)) G17198)) '#f) (apply (lambda (G17206 G17207 G17208) ((lambda (G17212 G17213) ((lambda (G17216) ((lambda (G17218) (map cons G17216 G17218)) (G17099 G17216 G17212))) (G17103 G17213))) (G17109 G17207) (map G12459 G17208))) G17198) ((lambda (G17220) ((lambda (G17222) (if (if G17222 (begin '#f (apply (lambda (G17224 G17225 G17226) (if (eq? (G12459 G17224) 'prefix) (begin '#f (G17091 G17226)) '#f)) G17222)) '#f) (apply (lambda (G17230 G17231 G17232) ((lambda (G17236 G17237) (map (lambda (G17240) (cons (string->symbol (string-append G17237 (symbol->string (car G17240)))) (cdr G17240))) G17236)) (G17109 G17231) (symbol->string (G12459 G17232)))) G17222) ((lambda (G17242) ((lambda (G17244) (if (if G17244 (begin '#f (apply (lambda (G17246 G17247) (eq? (G12459 G17246) 'library)) G17244)) '#f) (apply (lambda (G17250 G17251) (G17107 G17251)) G17244) ((lambda (G17254) ((lambda (G17256) (if (if G17256 (begin '#f (apply (lambda (G17258 G17259 G17260) (eq? (G12459 G17258) 'for)) G17256)) '#f) (apply (lambda (G17264 G17265 G17266) (G17109 G17265)) G17256) ((lambda (G17270) ((lambda (G17272) (if G17272 (apply (lambda (G17274) (G12453 'import '"invalid import spec" G17274)) G17272) (G12453 '#f '"invalid syntax" G17270))) (G12220 G17270 'any))) G17254))) (G12220 G17254 '(any any . any)))) G17242))) (G12220 G17242 '(any each-any)))) G17220))) (G12220 G17220 '(any any any)))) G17196))) (G12220 G17196 '(any any . each-any)))) G17178))) (G12220 G17178 '(any any . each-any)))) G17148))) (G12220 G17148 '(any any . #(each (any any)))))) G17136))) (G12220 G17136 '(any . each-any)))) G17134))) (set! G17111 (lambda (G17118 G17119) ((lambda (G17122) (for-each (lambda (G17124) ((lambda (G17126 G17127) ((lambda (G17130) (if G17130 ((lambda (G17132) (if (eq? G17132 G17127) (void) (G17093 G17126))) G17130) (hashtable-set! G17119 G17126 G17127))) (hashtable-ref G17119 G17126 '#f))) (car G17124) (cdr G17124))) G17122)) (G17109 G17118)))) ((letrec ((G17112 (lambda (G17114 G17115) (if (null? G17114) (hashtable-entries G17115) (begin (G17111 (car G17114) G17115) (G17112 (cdr G17114) G17115)))))) G17112) G17088 (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12327 (lambda (G17600 G17601) ((lambda (G17604) (begin (vector-for-each (lambda (G17606 G17607) (begin (if (symbol? G17606) (void) (error 'make-top-rib '"BUG: not a symbol" G17606)) (G11562 G17604 (G11587 G17606 G11511 '() '()) G17607))) G17600 G17601) G17604)) (G11560)))) (set! G12329 (lambda () ((lambda (G17610) (lambda G17614 ((lambda (G17615) (if (= G17615 '0) (apply (lambda () G17610) G17614) (if (= G17615 '1) (apply (lambda (G17612) (set! G17610 (G11504 G17612 G17610))) G17614) (error 'apply '"invalid arg count")))) (length G17614)))) '()))) (set! G12331 (G10457 (lambda G17616 (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G17618) (begin (if (procedure? G17618) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" G17618)) G17618)))) (set! G12333 (G10457 (lambda G17620 (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G17622) (begin (if (procedure? G17622) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" G17622)) G17622)))) (set! G12335 (G10457 (lambda G17624 (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G17626) (begin (if (procedure? G17626) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" G17626)) G17626)))) (set! G12337 (lambda (G17628 G17629 G17630) (call-with-values (lambda () (G12315 G17628 '() '() '() '() '() '() G17629 G17630)) (lambda (G17641 G17642 G17643 G17644 G17645 G17646 G17647) ((lambda (G17655 G17656 G17657 G17658 G17659 G17660 G17661) (values (append (apply append (reverse G17656)) G17661) G17660 G17659 (reverse G17658) (reverse G17657))) G17647 G17646 G17645 G17644 G17643 G17642 G17641))))) (set! G12339 (lambda (G17669 G17670 G17671) (call-with-values (lambda () (G12315 (list G17669) G17671 G17671 '() '() '() '() G17670 '#t)) (lambda (G17682 G17683 G17684 G17685 G17686 G17687 G17688) ((lambda (G17696 G17697 G17698 G17699 G17700 G17701 G17702) ((lambda (G17710) ((lambda (G17712) (values G17712 G17701)) (if (null? G17710) (G11487) (if (null? (cdr G17710)) (car G17710) (G11486 '#f G17710))))) (G12270 (reverse G17699) (reverse G17698) (append (apply append (reverse G17697)) G17702) G17701 G17700))) G17688 G17687 G17686 G17685 G17684 G17683 G17682))))) (set! G12341 (lambda (G17714 G17715 G17716 G17717 G17718) ((lambda (G17725) (begin (set! G17725 (G12329)) ((lambda (G17730 G17731 G17732 G17733) ((lambda (G17738) (dynamic-wind G17738 (lambda () (call-with-values (lambda () (G12319 G17715)) (lambda (G17742 G17743) ((lambda (G17746 G17747) (call-with-values (lambda () (G12325 G17716)) (lambda (G17752 G17753) ((lambda (G17756 G17757) ((lambda (G17760) ((lambda (G17762 G17763 G17764) ((lambda (G17772 G17773 G17774 G17775) ((lambda (G17780) (dynamic-wind G17780 (lambda () (call-with-values (lambda () (G12337 G17762 G17760 G17718)) (lambda (G17787 G17788 G17789 G17790 G17791) ((lambda (G17797 G17798 G17799 G17800 G17801) (begin (G11566 G17760) ((lambda (G17807) ((lambda (G17809) ((lambda () (begin (G11568 G17760) ((lambda (G17811 G17812) ((lambda (G17816) (begin (set! G17816 '"attempt to export mutated variable") (call-with-values (lambda () (G12437 G17798 G17811 G17800)) (lambda (G17820 G17821 G17822) ((lambda (G17826 G17827 G17828) (begin (for-each (lambda (G17832) ((lambda (G17834 G17835) ((lambda (G17838) (if G17838 ((lambda (G17840) ((lambda (G17842) (if (eq? G17842 'mutable) (G12453 'export G17816 G17834) (void))) (car G17840))) (cdr G17838)) (void))) (assq G17835 G17828))) (car G17832) (cdr G17832))) G17812) ((lambda (G17844 G17845) (values (G17725) (G17763) (G17764) (G11486 '#f (append G17845 (list G17844))) G17826 G17812 G17828)) (G11489 '#f G17798 G17809 (G12433 G17827 G17807)) (map G11482 (map cdr G17827))))) G17822 G17821 G17820))))) '#f)) (map G11517 G17798) (G12435 G17747 G17746 G17760)))))) (G12272 G17797 G17800 G17799))) (G12252 G17801 G17800 G17799)))) G17791 G17790 G17789 G17788 G17787)))) G17780)) (lambda () (begin ((lambda (G17848) (begin (G17772 G17774) (set! G17774 G17848))) (G17772)) ((lambda (G17850) (begin (G17773 G17775) (set! G17775 G17850))) (G17773)))))) G12331 G12333 G17763 G17764)) (map (lambda (G17852) (G11587 G17852 G11511 (list G17760) '())) G17717) (G12329) (G12329))) (G12327 G17757 G17756))) G17753 G17752)))) G17743 G17742)))) G17738)) (lambda () (begin ((lambda (G17854) (begin (G17730 G17732) (set! G17732 G17854))) (G17730)) ((lambda (G17856) (begin (G17731 G17733) (set! G17733 G17856))) (G17731)))))) G12335 G12467 G17725 '#f))) '#f))) (set! G12343 (lambda (G17858 G17859) (call-with-values (lambda () (G12323 G17858)) (lambda (G17866 G17867 G17868 G17869) ((lambda (G17874 G17875 G17876 G17877) (call-with-values (lambda () (G12321 G17877)) (lambda (G17884 G17885) ((lambda (G17888 G17889) (begin (G17859 G17889) (call-with-values (lambda () (G12341 G17889 G17876 G17875 G17874 '#f)) (lambda (G17899 G17900 G17901 G17902 G17903 G17904 G17905) ((lambda (G17913 G17914 G17915 G17916 G17917 G17918 G17919) (values G17889 G17888 G17919 G17918 G17917 G17916 G17915 G17914 G17913)) G17905 G17904 G17903 G17902 G17901 G17900 G17899))))) G17885 G17884)))) G17869 G17868 G17867 G17866))))) (set! G12345 (lambda (G17927) ((lambda (G17929) ((lambda (G17931) (if (if G17931 (begin '#f (apply (lambda (G17933 G17934 G17935) (eq? (G12459 G17933) 'import)) G17931)) '#f) (apply (lambda (G17939 G17940 G17941) (values G17940 G17941)) G17931) ((lambda (G17945) ((lambda (G17947) (if (if G17947 (begin '#f (apply (lambda (G17949 G17950 G17951) (eq? (G12459 G17949) 'import)) G17947)) '#f) (apply (lambda (G17955 G17956 G17957) (G12453 'expander '"invalid syntax of top-level program" (G11635 G17927))) G17947) ((lambda (G17961) ((lambda (G17963) (if G17963 (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G17963) (G12453 '#f '"invalid syntax" G17961))) (G12220 G17961 '_))) G17945))) (G12220 G17945 '((any . any) . any)))) G17929))) (G12220 G17929 '((any . each-any) . each-any)))) G17927))) (set! G12347 (lambda (G17965) (call-with-values (lambda () (G12345 G17965)) (lambda (G17969 G17970) ((lambda (G17973 G17974) (call-with-values (lambda () (G12341 '() '() G17974 G17973 '#t)) (lambda (G17984 G17985 G17986 G17987 G17988 G17989 G17990) ((lambda (G17998 G17999 G18000 G18001 G18002 G18003 G18004) (values G18003 G18001)) G17990 G17989 G17988 G17987 G17986 G17985 G17984)))) G17970 G17969))))) (set! G12353 (make-record-type-descriptor 'env '#f 'G12351 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G12355 '#f) (set! G12357 (make-record-constructor-descriptor G12353 '#f G12355)) (set! G12362 (record-predicate G12353)) (set! G12364 (record-constructor G12357)) (set! G12366 (record-accessor G12353 '0)) (set! G12368 (record-accessor G12353 '1)) (set! G12370 (record-accessor G12353 '2)) (set! G12372 (record-mutator G12353 '0)) (set! G12374 (record-mutator G12353 '1)) (set! G12376 (record-mutator G12353 '2)) (set! G12378 (G10454 'env (lambda (G18012 G18013) (display '"#<environment>" G18013)))) (set! G12384 (make-record-type-descriptor 'interaction-env '#f 'G12382 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G12386 '#f) (set! G12388 (make-record-constructor-descriptor G12384 '#f G12386)) (set! G12393 (record-predicate G12384)) (set! G12395 (record-constructor G12388)) (set! G12397 (record-accessor G12384 '0)) (set! G12399 (record-accessor G12384 '1)) (set! G12401 (record-accessor G12384 '2)) (set! G12403 (record-mutator G12384 '0)) (set! G12405 (record-mutator G12384 '1)) (set! G12407 (record-mutator G12384 '2)) (set! G12409 (G10454 'interaction-env (lambda (G18016 G18017) (display '"#<environment>" G18017)))) (set! G12411 (lambda () (map (lambda (G18020) G18020) (G11544 (G12397 (G12465)))))) (set! G12413 (lambda (G18022) (vector->list (G12366 G18022)))) (set! G12415 (lambda (G18024) ((lambda (G18026) (if G18026 G18026 (begin '#f (G12393 G18024)))) (G12362 G18024)))) (set! G12417 (lambda G18028 ((lambda (G18030) ((lambda (G18034 G18035) ((lambda (G18038) (dynamic-wind G18038 (lambda () (call-with-values (lambda () (G12325 G18028)) (lambda (G18042 G18043) ((lambda (G18046 G18047) (G12364 G18047 G18046 G18030)) G18043 G18042)))) G18038)) (lambda () ((lambda (G18050) (begin (G18034 G18035) (set! G18035 G18050))) (G18034))))) G12335 G18030)) (G12329)))) (set! G12419 (lambda (G18052) (begin (if (eqv? G18052 '5) (void) (assertion-violation 'null-environment '"not 5" G18052)) (G12417 '(psyntax null-environment-5))))) (set! G12421 (lambda (G18054) (begin (if (eqv? G18054 '5) (void) (assertion-violation 'scheme-report-environment '"not 5" G18054)) (G12417 '(psyntax scheme-report-environment-5))))) (set! G12423 (lambda (G18056 G18057) (if (G12362 G18057) ((lambda (G18060) ((lambda (G18062 G18063 G18064 G18065) ((lambda (G18070) (begin (G11566 G18060) (values G18070 (G18064)))) ((lambda (G18078 G18079 G18080 G18081 G18082 G18083) ((lambda (G18090) (dynamic-wind G18090 (lambda () (G12256 G18062 '() '())) G18090)) (lambda () (begin ((lambda (G18092) (begin (G18078 G18081) (set! G18081 G18092))) (G18078)) ((lambda (G18094) (begin (G18079 G18082) (set! G18082 G18094))) (G18079)) ((lambda (G18096) (begin (G18080 G18083) (set! G18083 G18096))) (G18080)))))) G12331 G12333 G12335 G18064 G18065 G18063))) (G11587 G18056 G11511 (list G18060) '()) (G12370 G18057) (G12329) (G12329))) (G12327 (G12366 G18057) (G12368 G18057))) (if (G12393 G18057) ((lambda (G18098 G18099 G18100) ((lambda (G18104) (call-with-values (lambda () ((lambda (G18116 G18117 G18118 G18119 G18120 G18121 G18122 G18123) ((lambda (G18132) (dynamic-wind G18132 (lambda () (G12339 G18104 G18098 G18099)) G18132)) (lambda () (begin ((lambda (G18134) (begin (G18116 G18120) (set! G18120 G18134))) (G18116)) ((lambda (G18136) (begin (G18117 G18121) (set! G18121 G18136))) (G18117)) ((lambda (G18138) (begin (G18118 G18122) (set! G18122 G18138))) (G18118)) ((lambda (G18140) (begin (G18119 G18123) (set! G18123 G18140))) (G18119)))))) G12467 G12331 G12333 G12335 G18057 G18100 (G12329) (G12329))) (lambda (G18142 G18143) ((lambda (G18146 G18147) (begin (G12405 G18057 G18146) (values G18147 (G18100)))) G18143 G18142)))) (G11587 G18056 G11511 (list G18098) '()))) (G12397 G18057) (G12399 G18057) (G12329)) (assertion-violation 'expand '"not an environment" G18057))))) (set! G12425 (lambda (G18150 G18151) (begin (if (G12415 G18151) (void) (error 'eval '"not an environment" G18151)) (call-with-values (lambda () (G12423 G18150 G18151)) (lambda (G18156 G18157) ((lambda (G18160 G18161) (begin (for-each G11128 G18160) (eval-core (G10556 G18161)))) G18157 G18156)))))) (set! G12427 (lambda G18265 ((lambda (G18266) (if (= G18266 '3) (apply (lambda (G18164 G18165 G18166) ((lambda (G18171 G18173) (begin (set! G18171 (lambda (G18247) (if (null? G18247) (G11487) (G11486 '#f (map (lambda (G18249) ((lambda (G18251 G18252) (list 'set! G18251 G18252)) (car G18249) (cddr G18249))) G18247))))) (set! G18173 (lambda (G18239) (for-each (lambda (G18241) ((lambda (G18243 G18244) (set-symbol-value! G18243 G18244)) (car G18241) (cadr G18241))) G18239))) (call-with-values (lambda () (G12343 G18164 G18166)) (lambda (G18183 G18184 G18185 G18186 G18187 G18188 G18189 G18190 G18191) ((lambda (G18201 G18202 G18203 G18204 G18205 G18206 G18207 G18208 G18209) ((lambda (G18219 G18220 G18221 G18222 G18223 G18224 G18225 G18226 G18227 G18228) (begin (G11126 G18219 G18220 G18221 G18222 G18223 G18224 G18202 G18201 G18225 G18226 G18227 G18228 '#t G18165) (values G18219 G18220 G18221 G18222 G18223 G18224 G18228 G18227 G18202 G18201))) (gensym) G18209 G18208 (map G11132 G18207) (map G11132 G18205) (map G11132 G18206) (lambda () (G18173 G18203)) (lambda () (eval-core (G10556 G18204))) (G18171 G18203) G18204)) G18191 G18190 G18189 G18188 G18187 G18186 G18185 G18184 G18183))))) '#f '#f)) G18265) (if (= G18266 '2) (apply (lambda (G18255 G18256) (G12427 G18255 G18256 (lambda (G18259) (values)))) G18265) (if (= G18266 '1) (apply (lambda (G18261) (G12427 G18261 '#f (lambda (G18263) (values)))) G18265) (error 'apply '"invalid arg count"))))) (length G18265)))) (set! G12429 (lambda (G18267) (call-with-values (lambda () (G12427 G18267)) (lambda (G18279 G18280 G18281 G18282 G18283 G18284 G18285 G18286 G18287 G18288) ((lambda (G18299 G18300 G18301 G18302 G18303 G18304 G18305 G18306 G18307 G18308) (values G18307 G18302 G18300 G18299)) G18288 G18287 G18286 G18285 G18284 G18283 G18282 G18281 G18280 G18279))))) (set! G12431 (lambda (G18319 G18320 G18321) (if (null? G18320) G18321 (G12431 G18319 (cdr G18320) (cons (G18319 (car G18320)) G18321))))) (set! G12433 (lambda (G18325 G18326) (G11486 '#f (cons (G11487) (G12431 (lambda (G18329) (list 'set! (cdr G18329) (car G18329))) G18325 G18326))))) (set! G12435 (lambda (G18331 G18332 G18333) (map (lambda (G18337 G18338) ((lambda (G18341) ((lambda (G18343) ((lambda () (begin (if G18343 (void) (G12453 '#f '"cannot export unbound identifier" G18341)) (cons G18338 G18343))))) (G11667 G18341))) (G11587 G18337 G11511 (list G18333) '()))) G18331 G18332))) (set! G12437 (lambda (G18345 G18346 G18347) ((lambda (G18352) (begin (set! G18352 (lambda (G18380) ((letrec ((G18382 (lambda (G18384 G18385 G18386) (if (pair? G18385) (if (eq? G18384 (car G18385)) (car G18386) (G18382 G18384 (cdr G18385) (cdr G18386))) (assertion-violation 'lookup-make-export '"BUG"))))) G18382) G18380 G18345 G18346))) ((letrec ((G18353 (lambda (G18355 G18356 G18357 G18358) (if (null? G18355) (values G18356 G18357 G18358) ((lambda (G18363) ((lambda (G18365 G18366) ((lambda (G18369) (if (eqv? G18369 'lexical) ((lambda (G18374) ((lambda (G18376 G18377) (G18353 (cdr G18355) (cons (cons* G18365 G18377 G18376) G18356) (cons (cons (G12108 G18374) G18376) G18357) G18358)) (G18352 (G12108 G18374)) (if (G12110 G18374) 'mutable 'global))) (G11677 G18366)) (if (eqv? G18369 'local-macro) ((lambda (G18372) (G18353 (cdr G18355) (cons (cons* G18365 'global-macro G18372) G18356) G18357 (cons (cons G18372 (G11677 G18366)) G18358))) (gensym)) (if (eqv? G18369 'local-macro!) ((lambda (G18370) (G18353 (cdr G18355) (cons (cons* G18365 'global-macro! G18370) G18356) G18357 (cons (cons G18370 (G11677 G18366)) G18358))) (gensym)) (if (memv G18369 '($rtd $module)) (G18353 (cdr G18355) (cons G18363 G18356) G18357 G18358) (assertion-violation 'expander '"BUG: do not know how to export" (G11675 G18366) (G11677 G18366))))))) (G11675 G18366))) (car G18363) (cdr G18363))) (car G18355)))))) G18353) G18347 '() '() '()))) '#f))) (set! G12439 (lambda (G18390) ((lambda (G18392) ((lambda (G18394) (if G18394 (apply (lambda (G18396) (map (lambda (G18398) (G11587 ((lambda (G18400) (if ((lambda (G18402) (if G18402 G18402 (begin '#f (string? G18400)))) (symbol? G18400)) (gensym G18400) (gensym 't))) (G12459 G18398)) G11511 '() '())) G18396)) G18394) ((lambda (G18404) ((lambda (G18406) (if G18406 (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G18406) (G12453 '#f '"invalid syntax" G18404))) (G12220 G18404 '_))) G18392))) (G12220 G18392 'each-any))) G18390))) (set! G12441 (lambda (G18408 G18409) (if (G11641 G18408) (if (G11641 G18409) (G11649 G18408 G18409) (assertion-violation 'free-identifier=? '"not an identifier" G18409)) (assertion-violation 'free-identifier=? '"not an identifier" G18408)))) (set! G12443 (lambda (G18412 G18413) (if (G11641 G18412) (if (G11641 G18413) (G11647 G18412 G18413) (assertion-violation 'bound-identifier=? '"not an identifier" G18413)) (assertion-violation 'bound-identifier=? '"not an identifier" G18412)))) (set! G12445 (lambda (G18416) ((lambda (G18426 G18428 G18430 G18435 G18437 G18439 G18441 G18443 G18445 G18447) (begin (set! G18426 (make-record-type-descriptor '&source-information &condition-rtd 'G18424 '#f '#f '#((immutable file-name) (immutable line)))) (set! G18428 '#f) (set! G18430 (make-record-constructor-descriptor G18426 &condition-rcd G18428)) (set! G18435 (record-predicate G18426)) (set! G18437 (record-constructor G18430)) (set! G18439 (record-accessor G18426 '0)) (set! G18441 (record-accessor G18426 '1)) (set! G18443 (condition-predicate G18426)) (set! G18445 (condition-accessor G18426 G18439)) (set! G18447 (condition-accessor G18426 G18441)) (if (G11585 G18416) ((lambda (G18448) (if (G10449 G18448) ((lambda (G18450) (if (pair? G18450) (G18437 (car G18450) (cdr G18450)) (condition))) (G10450 G18448)) (condition))) (G11589 G18416)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12447 (lambda (G18452 . G18454) (begin (if (for-all string? G18454) (void) (assertion-violation 'syntax-error '"invalid argument" G18454)) (raise (condition (G19166 (if (null? G18454) '"invalid syntax" (apply string-append G18454))) (G19238 (G12459 G18452) '#f) (G12445 G18452) (G12449 G18452)))))) (set! G12449 (lambda (G18456) ((lambda (G18465 G18467 G18469 G18474 G18476 G18478 G18480 G18482) (begin (set! G18465 (make-record-type-descriptor '&trace &condition-rtd 'G18463 '#f '#f '#((immutable form)))) (set! G18467 '#f) (set! G18469 (make-record-constructor-descriptor G18465 &condition-rcd G18467)) (set! G18474 (record-predicate G18465)) (set! G18476 (record-constructor G18469)) (set! G18478 (record-accessor G18465 '0)) (set! G18480 (condition-predicate G18465)) (set! G18482 (condition-accessor G18465 G18478)) ((letrec ((G18483 (lambda (G18485) (if (G11585 G18485) (apply condition (G18476 G18485) (map G18483 (G11595 G18485))) (if (G10449 G18485) (G18476 (G11587 G18485 '() '() '())) (condition)))))) G18483) G18456))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12451 (lambda (G18487 G18488 G18489 G18490) (begin (if (string? G18488) (void) (assertion-violation 'syntax-violation '"message is not a string" G18488)) ((lambda (G18495) (raise (condition (if G18495 (G19212 G18495) (condition)) (G19166 G18488) G18490 (G12445 G18489) (G12449 G18489)))) (if ((lambda (G18497) (if G18497 G18497 (begin '#f (symbol? G18487)))) (string? G18487)) G18487 (if (not G18487) ((lambda (G18499) ((lambda (G18501) (if (if G18501 (begin '#f (apply (lambda (G18503) (G11641 G18503)) G18501)) '#f) (apply (lambda (G18505) (G12459 G18505)) G18501) ((lambda (G18507) ((lambda (G18509) (if (if G18509 (begin '#f (apply (lambda (G18511 G18512) (G11641 G18511)) G18509)) '#f) (apply (lambda (G18515 G18516) (G12459 G18515)) G18509) ((lambda (G18519) ((lambda (G18521) (if G18521 (apply (lambda () '#f) G18521) (G12453 '#f '"invalid syntax" G18519))) (G12220 G18519 '_))) G18507))) (G12220 G18507 '(any . any)))) G18499))) (G12220 G18499 'any))) G18489) (assertion-violation 'syntax-violation '"invalid who argument" G18487))))))) (set! G12453 (lambda G18537 ((lambda (G18538) (if (= G18538 '3) (apply (lambda (G18523 G18524 G18525) (G12453 G18523 G18524 G18525 '#f)) G18537) (if (= G18538 '4) (apply (lambda (G18529 G18530 G18531 G18532) (G12451 G18529 G18530 G18531 (G19238 (G12459 G18531) (G12459 G18532)))) G18537) (error 'apply '"invalid arg count")))) (length G18537)))) (set! G12455 (lambda (G18539) (G11641 G18539))) (set! G12457 (lambda (G18541 G18542) (if (G11641 G18541) (G11607 G18541 G18542) (assertion-violation 'datum->syntax '"not an identifier" G18541)))) (set! G12459 (lambda (G18545) (G11663 G18545))) (set! G12461 (lambda (G18547) (call-with-values (lambda () (G12347 G18547)) (lambda (G18551 G18552) ((lambda (G18555 G18556) (lambda () (begin (for-each G11128 G18556) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G10556 G18555)) (void)) (eval-core (G10556 G18555))))) G18552 G18551))))) (set! G12463 (lambda (G18559) (call-with-values (lambda () (G12347 G18559)) (lambda (G18563 G18564) ((lambda (G18567 G18568) (begin (for-each G11128 G18568) (G10455 (G10556 G18567)))) G18564 G18563))))) (set! G12465 ((lambda (G18571) (lambda () ((lambda (G18573) (if G18573 G18573 (begin '#f ((lambda (G18575 G18576) (begin ((lambda (G18579) (begin (G11552 G18576 (map car G18579)) (G11554 G18576 (map (lambda (G18581) G11511) G18579)) (G11556 G18576 (map cdr G18579)))) (G11085 G18575)) ((lambda (G18583) (begin (set! G18571 G18583) G18583)) (G12395 G18576 '() '())))) (G11121 '(rnrs)) (G11560))))) G18571))) '#f)) (set! G12467 (G10457 '#f)) (begin (set! G18844 G12467) (set! G18843 G12465) (set! G18842 G12463) (set! G18841 G12461) (set! G18840 G12459) (set! G18839 G12457) (set! G18838 G12455) (set! G18837 G12453) (set! G18836 G12451) (set! G18835 G12449) (set! G18834 G12447) (set! G18833 G12445) (set! G18832 G12443) (set! G18831 G12441) (set! G18830 G12439) (set! G18829 G12437) (set! G18828 G12435) (set! G18827 G12433) (set! G18826 G12431) (set! G18825 G12429) (set! G18824 G12427) (set! G18823 G12425) (set! G18822 G12423) (set! G18821 G12421) (set! G18820 G12419) (set! G18819 G12417) (set! G18818 G12415) (set! G18817 G12413) (set! G18816 G12411) (set! G18815 G12409) (set! G18814 G12407) (set! G18813 G12405) (set! G18812 G12403) (set! G18811 G12401) (set! G18810 G12399) (set! G18809 G12397) (set! G18808 G12395) (set! G18807 G12393) (set! G18806 G12388) (set! G18805 G12386) (set! G18804 G12384) (set! G18803 G12378) (set! G18802 G12376) (set! G18801 G12374) (set! G18800 G12372) (set! G18799 G12370) (set! G18798 G12368) (set! G18797 G12366) (set! G18796 G12364) (set! G18795 G12362) (set! G18794 G12357) (set! G18793 G12355) (set! G18792 G12353) (set! G18791 G12347) (set! G18790 G12345) (set! G18789 G12343) (set! G18788 G12341) (set! G18787 G12339) (set! G18786 G12337) (set! G18785 G12335) (set! G18784 G12333) (set! G18783 G12331) (set! G18782 G12329) (set! G18781 G12327) (set! G18780 G12325) (set! G18779 G12323) (set! G18778 G12321) (set! G18777 G12319) (set! G18776 G12317) (set! G18775 G12315) (set! G18774 G12313) (set! G18773 G12311) (set! G18772 G12309) (set! G18771 G12307) (set! G18770 G12305) (set! G18769 G12303) (set! G18768 G12301) (set! G18767 G12299) (set! G18766 G12297) (set! G18765 G12295) (set! G18764 G12290) (set! G18763 G12288) (set! G18762 G12286) (set! G18761 G12280) (set! G18760 G12278) (set! G18759 G12276) (set! G18758 G12274) (set! G18757 G12272) (set! G18756 G12270) (set! G18755 G12268) (set! G18754 G12266) (set! G18753 G12264) (set! G18752 G12262) (set! G18751 G12260) (set! G18750 G12258) (set! G18749 G12256) (set! G18748 G12254) (set! G18747 G12252) (set! G18746 G12250) (set! G18745 G12248) (set! G18744 G12246) (set! G18743 G12244) (set! G18742 G12242) (set! G18741 G12240) (set! G18740 G12238) (set! G18739 G12236) (set! G18738 G12234) (set! G18737 G12232) (set! G18736 G12230) (set! G18735 G12228) (set! G18734 G12226) (set! G18733 G12224) (set! G18732 G12222) (set! G18731 G12220) (set! G18730 G12218) (set! G18729 G12216) (set! G18728 G12214) (set! G18727 G12212) (set! G18726 G12210) (set! G18725 G12208) (set! G18724 G12206) (set! G18723 G12204) (set! G18722 G12202) (set! G18721 G12200) (set! G18720 G12198) (set! G18719 G12196) (set! G18718 G12194) (set! G18717 G12192) (set! G18716 G12190) (set! G18715 G12188) (set! G18714 G12186) (set! G18713 G12184) (set! G18712 G12182) (set! G18711 G12180) (set! G18710 G12178) (set! G18709 G12176) (set! G18708 G12174) (set! G18707 G12172) (set! G18706 G12170) (set! G18705 G12168) (set! G18704 G12166) (set! G18703 G12164) (set! G18702 G12162) (set! G18701 G12160) (set! G18700 G12158) (set! G18699 G12156) (set! G18698 G12154) (set! G18697 G12152) (set! G18696 G12150) (set! G18695 G12148) (set! G18694 G12146) (set! G18693 G12144) (set! G18692 G12142) (set! G18691 G12140) (set! G18690 G12138) (set! G18689 G12136) (set! G18688 G12134) (set! G18687 G12132) (set! G18686 G12130) (set! G18685 G12128) (set! G18684 G12126) (set! G18683 G12124) (set! G18682 G12122) (set! G18681 G12120) (set! G18680 G12118) (set! G18679 G12116) (set! G18678 G12114) (set! G18677 G12112) (set! G18676 G12110) (set! G18675 G12108) (set! G18674 G12106) (set! G18673 G12104) (set! G18672 G12102) (set! G18671 G12100) (set! G18670 G11712) (set! G18669 G11710) (set! G18668 G11708) (set! G18667 G11706) (set! G18666 G11704) (set! G18665 G11681) (set! G18664 G11679) (set! G18663 G11677) (set! G18662 G11675) (set! G18661 G11673) (set! G18660 G11671) (set! G18659 G11669) (set! G18658 G11667) (set! G18657 G11665) (set! G18656 G11663) (set! G18655 G11661) (set! G18654 G11659) (set! G18653 G11657) (set! G18652 G11655) (set! G18651 G11653) (set! G18650 G11651) (set! G18649 G11649) (set! G18648 G11647) (set! G18647 G11645) (set! G18646 G11643) (set! G18645 G11641) (set! G18644 G11639) (set! G18643 G11637) (set! G18642 G11635) (set! G18641 G11633) (set! G18640 G11631) (set! G18639 G11629) (set! G18638 G11627) (set! G18637 G11625) (set! G18636 G11623) (set! G18635 G11621) (set! G18634 G11619) (set! G18633 G11617) (set! G18632 G11615) (set! G18631 G11613) (set! G18630 G11611) (set! G18629 G11609) (set! G18628 G11607) (set! G18627 G11605) (set! G18626 G11603) (set! G18625 G11601) (set! G18624 G11599) (set! G18623 G11597) (set! G18622 G11595) (set! G18621 G11593) (set! G18620 G11591) (set! G18619 G11589) (set! G18618 G11587) (set! G18617 G11585) (set! G18616 G11580) (set! G18615 G11578) (set! G18614 G11576) (set! G18613 G11570) (set! G18612 G11568) (set! G18611 G11566) (set! G18610 G11564) (set! G18609 G11562) (set! G18608 G11560) (set! G18607 G11558) (set! G18606 G11556) (set! G18605 G11554) (set! G18604 G11552) (set! G18603 G11550) (set! G18602 G11548) (set! G18601 G11546) (set! G18600 G11544) (set! G18599 G11542) (set! G18598 G11540) (set! G18597 G11535) (set! G18596 G11533) (set! G18595 G11531) (set! G18594 G11525) (set! G18593 G11523) (set! G18592 G11521) (set! G18591 G11519) (set! G18590 G11517) (set! G18589 G11515) (set! G18588 G11513) (set! G18587 G11511) (set! G18586 G11506) (set! G18585 G11504) (G11118 G12427)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G19155 '#f) (define G19156 '#f) (define G19157 '#f) (define G19158 '#f) (define G19159 '#f) (define G19160 '#f) (define G19161 '#f) (define G19162 '#f) (define G19163 '#f) (define G19164 '#f) (define G19165 '#f) (define G19166 '#f) (define G19167 '#f) (define G19168 '#f) (define G19169 '#f) (define G19170 '#f) (define G19171 '#f) (define G19172 '#f) (define G19173 '#f) (define G19174 '#f) (define G19175 '#f) (define G19176 '#f) (define G19177 '#f) (define G19178 '#f) (define G19179 '#f) (define G19180 '#f) (define G19181 '#f) (define G19182 '#f) (define G19183 '#f) (define G19184 '#f) (define G19185 '#f) (define G19186 '#f) (define G19187 '#f) (define G19188 '#f) (define G19189 '#f) (define G19190 '#f) (define G19191 '#f) (define G19192 '#f) (define G19193 '#f) (define G19194 '#f) (define G19195 '#f) (define G19196 '#f) (define G19197 '#f) (define G19198 '#f) (define G19199 '#f) (define G19200 '#f) (define G19201 '#f) (define G19202 '#f) (define G19203 '#f) (define G19204 '#f) (define G19205 '#f) (define G19206 '#f) (define G19207 '#f) (define G19208 '#f) (define G19209 '#f) (define G19210 '#f) (define G19211 '#f) (define G19212 '#f) (define G19213 '#f) (define G19214 '#f) (define G19215 '#f) (define G19216 '#f) (define G19217 '#f) (define G19218 '#f) (define G19219 '#f) (define G19220 '#f) (define G19221 '#f) (define G19222 '#f) (define G19223 '#f) (define G19224 '#f) (define G19225 '#f) (define G19226 '#f) (define G19227 '#f) (define G19228 '#f) (define G19229 '#f) (define G19230 '#f) (define G19231 '#f) (define G19232 '#f) (define G19233 '#f) (define G19234 '#f) (define G19235 '#f) (define G19236 '#f) (define G19237 '#f) (define G19238 '#f) (define G19239 '#f) (define G19240 '#f) (define G19241 '#f) (define G19242 '#f) (define G19243 '#f) (define G19244 '#f) (define G19245 '#f) (define G19246 '#f) (define G19247 '#f) (define G19248 '#f) (define G19249 '#f) ((lambdabegin (set! G18854 (make-record-type-descriptor '&condition '#f 'G18852 '#f '#f '#())) (set! G18856 '#f) (set! G18858 (make-record-constructor-descriptor G18854 '#f G18856)) (set! G18863 (record-predicate G18854)) (set! G18865 (record-constructor G18858)) (set! G18867 G18854) (set! G18869 G18858) (set! G18877 (make-record-type-descriptor '&message G18854 'G18875 '#f '#f '#((immutable message)))) (set! G18879 '#f) (set! G18881 (make-record-constructor-descriptor G18877 G18858 G18879)) (set! G18886 (record-predicate G18877)) (set! G18888 (record-constructor G18881)) (set! G18890 (record-accessor G18877 '0)) (set! G18892 (condition-predicate G18877)) (set! G18894 (condition-accessor G18877 G18890)) (set! G18901 (make-record-type-descriptor '&warning G18854 'G18899 '#f '#f '#())) (set! G18903 '#f) (set! G18905 (make-record-constructor-descriptor G18901 G18858 G18903)) (set! G18910 (record-predicate G18901)) (set! G18912 (record-constructor G18905)) (set! G18914 (condition-predicate G18901)) (set! G18921 (make-record-type-descriptor '&serious G18854 'G18919 '#f '#f '#())) (set! G18923 '#f) (set! G18925 (make-record-constructor-descriptor G18921 G18858 G18923)) (set! G18930 (record-predicate G18921)) (set! G18932 (record-constructor G18925)) (set! G18934 (condition-predicate G18921)) (set! G18941 (make-record-type-descriptor '&error G18921 'G18939 '#f '#f '#())) (set! G18943 '#f) (set! G18945 (make-record-constructor-descriptor G18941 G18925 G18943)) (set! G18950 (record-predicate G18941)) (set! G18952 (record-constructor G18945)) (set! G18954 (condition-predicate G18941)) (set! G18961 (make-record-type-descriptor '&violation G18921 'G18959 '#f '#f '#())) (set! G18963 '#f) (set! G18965 (make-record-constructor-descriptor G18961 G18925 G18963)) (set! G18970 (record-predicate G18961)) (set! G18972 (record-constructor G18965)) (set! G18974 (condition-predicate G18961)) (set! G18981 (make-record-type-descriptor '&assertion G18961 'G18979 '#f '#f '#())) (set! G18983 '#f) (set! G18985 (make-record-constructor-descriptor G18981 G18965 G18983)) (set! G18990 (record-predicate G18981)) (set! G18992 (record-constructor G18985)) (set! G18994 (condition-predicate G18981)) (set! G19002 (make-record-type-descriptor '&irritants G18854 'G19000 '#f '#f '#((immutable irritants)))) (set! G19004 '#f) (set! G19006 (make-record-constructor-descriptor G19002 G18858 G19004)) (set! G19011 (record-predicate G19002)) (set! G19013 (record-constructor G19006)) (set! G19015 (record-accessor G19002 '0)) (set! G19017 (condition-predicate G19002)) (set! G19019 (condition-accessor G19002 G19015)) (set! G19027 (make-record-type-descriptor '&who G18854 'G19025 '#f '#f '#((immutable who)))) (set! G19029 '#f) (set! G19031 (make-record-constructor-descriptor G19027 G18858 G19029)) (set! G19036 (record-predicate G19027)) (set! G19038 (record-constructor G19031)) (set! G19040 (record-accessor G19027 '0)) (set! G19042 (condition-predicate G19027)) (set! G19044 (condition-accessor G19027 G19040)) (set! G19051 (make-record-type-descriptor '&non-continuable G18961 'G19049 '#f '#f '#())) (set! G19053 '#f) (set! G19055 (make-record-constructor-descriptor G19051 G18965 G19053)) (set! G19060 (record-predicate G19051)) (set! G19062 (record-constructor G19055)) (set! G19064 (condition-predicate G19051)) (set! G19071 (make-record-type-descriptor '&implementation-restriction G18961 'G19069 '#f '#f '#())) (set! G19073 '#f) (set! G19075 (make-record-constructor-descriptor G19071 G18965 G19073)) (set! G19080 (record-predicate G19071)) (set! G19082 (record-constructor G19075)) (set! G19084 (condition-predicate G19071)) (set! G19091 (make-record-type-descriptor '&lexical G18961 'G19089 '#f '#f '#())) (set! G19093 '#f) (set! G19095 (make-record-constructor-descriptor G19091 G18965 G19093)) (set! G19100 (record-predicate G19091)) (set! G19102 (record-constructor G19095)) (set! G19104 (condition-predicate G19091)) (set! G19113 (make-record-type-descriptor '&syntax G18961 'G19111 '#f '#f '#((immutable form) (immutable subform)))) (set! G19115 '#f) (set! G19117 (make-record-constructor-descriptor G19113 G18965 G19115)) (set! G19122 (record-predicate G19113)) (set! G19124 (record-constructor G19117)) (set! G19126 (record-accessor G19113 '0)) (set! G19128 (record-accessor G19113 '1)) (set! G19130 (condition-predicate G19113)) (set! G19132 (condition-accessor G19113 G19126)) (set! G19134 (condition-accessor G19113 G19128)) (set! G19141 (make-record-type-descriptor '&undefined G18961 'G19139 '#f '#f '#())) (set! G19143 '#f) (set! G19145 (make-record-constructor-descriptor G19141 G18965 G19143)) (set! G19150 (record-predicate G19141)) (set! G19152 (record-constructor G19145)) (set! G19154 (condition-predicate G19141)) (begin (set! G19249 G19154) (set! G19248 G19152) (set! G19247 G19150) (set! G19246 G19145) (set! G19245 G19143) (set! G19244 G19141) (set! G19243 G19134) (set! G19242 G19132) (set! G19241 G19130) (set! G19240 G19128) (set! G19239 G19126) (set! G19238 G19124) (set! G19237 G19122) (set! G19236 G19117) (set! G19235 G19115) (set! G19234 G19113) (set! G19233 G19104) (set! G19232 G19102) (set! G19231 G19100) (set! G19230 G19095) (set! G19229 G19093) (set! G19228 G19091) (set! G19227 G19084) (set! G19226 G19082) (set! G19225 G19080) (set! G19224 G19075) (set! G19223 G19073) (set! G19222 G19071) (set! G19221 G19064) (set! G19220 G19062) (set! G19219 G19060) (set! G19218 G19055) (set! G19217 G19053) (set! G19216 G19051) (set! G19215 G19044) (set! G19214 G19042) (set! G19213 G19040) (set! G19212 G19038) (set! G19211 G19036) (set! G19210 G19031) (set! G19209 G19029) (set! G19208 G19027) (set! G19207 G19019) (set! G19206 G19017) (set! G19205 G19015) (set! G19204 G19013) (set! G19203 G19011) (set! G19202 G19006) (set! G19201 G19004) (set! G19200 G19002) (set! G19199 G18994) (set! G19198 G18992) (set! G19197 G18990) (set! G19196 G18985) (set! G19195 G18983) (set! G19194 G18981) (set! G19193 G18974) (set! G19192 G18972) (set! G19191 G18970) (set! G19190 G18965) (set! G19189 G18963) (set! G19188 G18961) (set! G19187 G18954) (set! G19186 G18952) (set! G19185 G18950) (set! G19184 G18945) (set! G19183 G18943) (set! G19182 G18941) (set! G19181 G18934) (set! G19180 G18932) (set! G19179 G18930) (set! G19178 G18925) (set! G19177 G18923) (set! G19176 G18921) (set! G19175 G18914) (set! G19174 G18912) (set! G19173 G18910) (set! G19172 G18905) (set! G19171 G18903) (set! G19170 G18901) (set! G19169 G18894) (set! G19168 G18892) (set! G19167 G18890) (set! G19166 G18888) (set! G19165 G18886) (set! G19164 G18881) (set! G19163 G18879) (set! G19162 G18877) (set! G19161 G18869) (set! G19160 G18867) (set! G19159 G18865) (set! G19158 G18863) (set! G19157 G18858) (set! G19156 G18856) (set! G19155 G18854)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G19511 '#f) (define G19512 '#f) (define G19513 '#f) (define G19514 '#f) (define G19515 '#f) (define G19516 '#f) (define G19517 '#f) (define G19518 '#f) (define G19519 '#f) (define G19520 '#f) (define G19521 '#f) (define G19522 '#f) (define G19523 '#f) (define G19524 '#f) (define G19525 '#f) (define G19526 '#f) (define G19527 '#f) (define G19528 '#f) (define G19529 '#f) (define G19530 '#f) (define G19531 '#f) (define G19532 '#f) (define G19533 '#f) (define G19534 '#f) (define G19535 '#f) (define G19536 '#f) (define G19537 '#f) (define G19538 '#f) (define G19539 '#f) (define G19540 '#f) (define G19541 '#f) (define G19542 '#f) (define G19543 '#f) (define G19544 '#f) (define G19545 '#f) (define G19546 '#f) (define G19547 '#f) (define G19548 '#f) (define G19549 '#f) (define G19550 '#f) (define G19551 '#f) (define G19552 '#f) (define G19553 '#f) (define G19554 '#f) (define G19555 '#f) (define G19556 '#f) (define G19557 '#f) (define G19558 '#f) (define G19559 '#f) (define G19560 '#f) (define G19561 '#f) (define G19562 '#f) (define G19563 '#f) (define G19564 '#f) (define G19565 '#f) (define G19566 '#f) (define G19567 '#f) (define G19568 '#f) (define G19569 '#f) (define G19570 '#f) (define G19571 '#f) (define G19572 '#f) (define G19573 '#f) (define G19574 '#f) (define G19575 '#f) (define G19576 '#f) (define G19577 '#f) (define G19578 '#f) (define G19579 '#f) (define G19580 '#f) (define G19581 '#f) (define G19582 '#f) (define G19583 '#f) (define G19584 '#f) (define G19585 '#f) (define G19586 '#f) (define G19587 '#f) (define G19588 '#f) (define G19589 '#f) (define G19590 '#f) ((lambdabegin (set! G19257 (make-record-type-descriptor '&i/o &error-rtd 'G19255 '#f '#f '#())) (set! G19259 '#f) (set! G19261 (make-record-constructor-descriptor G19257 &error-rcd G19259)) (set! G19266 (record-predicate G19257)) (set! G19268 (record-constructor G19261)) (set! G19270 (condition-predicate G19257)) (set! G19277 (make-record-type-descriptor '&i/o-read G19257 'G19275 '#f '#f '#())) (set! G19279 '#f) (set! G19281 (make-record-constructor-descriptor G19277 G19261 G19279)) (set! G19286 (record-predicate G19277)) (set! G19288 (record-constructor G19281)) (set! G19290 (condition-predicate G19277)) (set! G19297 (make-record-type-descriptor '&i/o-write G19257 'G19295 '#f '#f '#())) (set! G19299 '#f) (set! G19301 (make-record-constructor-descriptor G19297 G19261 G19299)) (set! G19306 (record-predicate G19297)) (set! G19308 (record-constructor G19301)) (set! G19310 (condition-predicate G19297)) (set! G19318 (make-record-type-descriptor '&i/o-invalid-position G19257 'G19316 '#f '#f '#((immutable position)))) (set! G19320 '#f) (set! G19322 (make-record-constructor-descriptor G19318 G19261 G19320)) (set! G19327 (record-predicate G19318)) (set! G19329 (record-constructor G19322)) (set! G19331 (record-accessor G19318 '0)) (set! G19333 (condition-predicate G19318)) (set! G19335 (condition-accessor G19318 G19331)) (set! G19343 (make-record-type-descriptor '&i/o-filename G19257 'G19341 '#f '#f '#((immutable filename)))) (set! G19345 '#f) (set! G19347 (make-record-constructor-descriptor G19343 G19261 G19345)) (set! G19352 (record-predicate G19343)) (set! G19354 (record-constructor G19347)) (set! G19356 (record-accessor G19343 '0)) (set! G19358 (condition-predicate G19343)) (set! G19360 (condition-accessor G19343 G19356)) (set! G19367 (make-record-type-descriptor '&i/o-file-protection G19257 'G19365 '#f '#f '#())) (set! G19369 '#f) (set! G19371 (make-record-constructor-descriptor G19367 G19261 G19369)) (set! G19376 (record-predicate G19367)) (set! G19378 (record-constructor G19371)) (set! G19380 (condition-predicate G19367)) (set! G19387 (make-record-type-descriptor '&i/o-file-is-read-only G19367 'G19385 '#f '#f '#())) (set! G19389 '#f) (set! G19391 (make-record-constructor-descriptor G19387 G19371 G19389)) (set! G19396 (record-predicate G19387)) (set! G19398 (record-constructor G19391)) (set! G19400 (condition-predicate G19387)) (set! G19407 (make-record-type-descriptor '&i/o-file-already-exists G19343 'G19405 '#f '#f '#())) (set! G19409 '#f) (set! G19411 (make-record-constructor-descriptor G19407 G19347 G19409)) (set! G19416 (record-predicate G19407)) (set! G19418 (record-constructor G19411)) (set! G19420 (condition-predicate G19407)) (set! G19427 (make-record-type-descriptor '&i/o-file-does-not-exist G19343 'G19425 '#f '#f '#())) (set! G19429 '#f) (set! G19431 (make-record-constructor-descriptor G19427 G19347 G19429)) (set! G19436 (record-predicate G19427)) (set! G19438 (record-constructor G19431)) (set! G19440 (condition-predicate G19427)) (set! G19448 (make-record-type-descriptor '&i/o-port G19257 'G19446 '#f '#f '#((immutable port)))) (set! G19450 '#f) (set! G19452 (make-record-constructor-descriptor G19448 G19261 G19450)) (set! G19457 (record-predicate G19448)) (set! G19459 (record-constructor G19452)) (set! G19461 (record-accessor G19448 '0)) (set! G19463 (condition-predicate G19448)) (set! G19465 (condition-accessor G19448 G19461)) (set! G19472 (make-record-type-descriptor '&i/o-decoding G19448 'G19470 '#f '#f '#())) (set! G19474 '#f) (set! G19476 (make-record-constructor-descriptor G19472 G19452 G19474)) (set! G19481 (record-predicate G19472)) (set! G19483 (record-constructor G19476)) (set! G19485 (condition-predicate G19472)) (set! G19493 (make-record-type-descriptor '&i/o-encoding G19448 'G19491 '#f '#f '#((immutable char)))) (set! G19495 '#f) (set! G19497 (make-record-constructor-descriptor G19493 G19452 G19495)) (set! G19502 (record-predicate G19493)) (set! G19504 (record-constructor G19497)) (set! G19506 (record-accessor G19493 '0)) (set! G19508 (condition-predicate G19493)) (set! G19510 (condition-accessor G19493 G19506)) (begin (set! G19590 G19510) (set! G19589 G19508) (set! G19588 G19506) (set! G19587 G19504) (set! G19586 G19502) (set! G19585 G19497) (set! G19584 G19495) (set! G19583 G19493) (set! G19582 G19485) (set! G19581 G19483) (set! G19580 G19481) (set! G19579 G19476) (set! G19578 G19474) (set! G19577 G19472) (set! G19576 G19465) (set! G19575 G19463) (set! G19574 G19461) (set! G19573 G19459) (set! G19572 G19457) (set! G19571 G19452) (set! G19570 G19450) (set! G19569 G19448) (set! G19568 G19440) (set! G19567 G19438) (set! G19566 G19436) (set! G19565 G19431) (set! G19564 G19429) (set! G19563 G19427) (set! G19562 G19420) (set! G19561 G19418) (set! G19560 G19416) (set! G19559 G19411) (set! G19558 G19409) (set! G19557 G19407) (set! G19556 G19400) (set! G19555 G19398) (set! G19554 G19396) (set! G19553 G19391) (set! G19552 G19389) (set! G19551 G19387) (set! G19550 G19380) (set! G19549 G19378) (set! G19548 G19376) (set! G19547 G19371) (set! G19546 G19369) (set! G19545 G19367) (set! G19544 G19360) (set! G19543 G19358) (set! G19542 G19356) (set! G19541 G19354) (set! G19540 G19352) (set! G19539 G19347) (set! G19538 G19345) (set! G19537 G19343) (set! G19536 G19335) (set! G19535 G19333) (set! G19534 G19331) (set! G19533 G19329) (set! G19532 G19327) (set! G19531 G19322) (set! G19530 G19320) (set! G19529 G19318) (set! G19528 G19310) (set! G19527 G19308) (set! G19526 G19306) (set! G19525 G19301) (set! G19524 G19299) (set! G19523 G19297) (set! G19522 G19290) (set! G19521 G19288) (set! G19520 G19286) (set! G19519 G19281) (set! G19518 G19279) (set! G19517 G19277) (set! G19516 G19270) (set! G19515 G19268) (set! G19514 G19266) (set! G19513 G19261) (set! G19512 G19259) (set! G19511 G19257)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (G10553 (lambda (G20526) ((lambda (G20528) (if G20528 (cdr G20528) '#f)) (assq G20526 '((syntax-error . G18834) (syntax-dispatch . G18731) (load . G19714) (interaction-environment . G18843) (make-variable-transformer . G18667) (identifier? . G18838) (generate-temporaries . G18830) (free-identifier=? . G18831) (syntax->datum . G18840) (datum->syntax . G18839) (bound-identifier=? . G18832) (make-i/o-write-error . G19527) (make-i/o-read-error . G19521) (make-i/o-port-error . G19573) (make-i/o-invalid-position-error . G19533) (make-i/o-filename-error . G19541) (make-i/o-file-protection-error . G19549) (make-i/o-file-is-read-only-error . G19555) (make-i/o-file-does-not-exist-error . G19567) (make-i/o-file-already-exists-error . G19561) (make-i/o-error . G19515) (make-i/o-encoding-error . G19587) (make-i/o-decoding-error . G19581) (i/o-write-error? . G19528) (i/o-read-error? . G19522) (i/o-port-error? . G19575) (i/o-invalid-position-error? . G19535) (i/o-filename-error? . G19543) (i/o-file-protection-error? . G19550) (i/o-file-is-read-only-error? . G19556) (i/o-file-does-not-exist-error? . G19568) (i/o-file-already-exists-error? . G19562) (i/o-error? . G19516) (i/o-error-port . G19576) (i/o-error-filename . G19544) (i/o-encoding-error? . G19589) (i/o-encoding-error-char . G19590) (i/o-decoding-error? . G19582) (scheme-report-environment . G18821) (null-environment . G18820) (command-line . G19711) (eval . G18823) (environment . G18819) (who-condition? . G19214) (warning? . G19175) (violation? . G19193) (undefined-violation? . G19249) (syntax-violation? . G19241) (syntax-violation-subform . G19243) (syntax-violation-form . G19242) (syntax-violation . G18837) (serious-condition? . G19181) (non-continuable-violation? . G19221) (message-condition? . G19168) (make-who-condition . G19212) (make-warning . G19174) (make-violation . G19192) (make-undefined-violation . G19248) (make-syntax-violation . G19238) (make-serious-condition . G19180) (make-non-continuable-violation . G19220) (make-message-condition . G19166) (make-lexical-violation . G19232) (make-irritants-condition . G19204) (make-implementation-restriction-violation . G19226) (make-error . G19186) (make-assertion-violation . G19198) (lexical-violation? . G19233) (irritants-condition? . G19206) (implementation-restriction-violation? . G19227) (error? . G19187) (condition-who . G19215) (condition-message . G19169) (condition-irritants . G19207) (assertion-violation? . G19199)))))) (G11126 'G20482 '(ikarus interaction) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11126 'G20483 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G19771) (unquote . G19770) (delay . G19763) (or . G19761) (and . G19760) (do . G19759) (cond . G19758) (let* . G19757) (let . G19756) (quasiquote . G19750) (syntax-rules . G19749) (case . G19744) (if . G19740) (letrec . G19738) (lambda . G19735) (quote . G19732) (letrec-syntax . G19730) (let-syntax . G19729) (set! . G19728) (begin . G19726) (define-syntax . G19724) (define . G19723)) '() values values '#f '#f '#t '#f) (G11126 'G20484 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G20352) (string-ci>=? . G20351) (string-ci=? . G20350) (string-ci<? . G20349) (string-ci<=? . G20348) (char-whitespace? . G20347) (char-upper-case? . G20346) (char-numeric? . G20344) (char-lower-case? . G20343) (char-upcase . G20341) (char-downcase . G20338) (char-ci>? . G20337) (char-ci>=? . G20336) (char-ci=? . G20335) (char-ci<? . G20334) (char-ci<=? . G20333) (char-alphabetic? . G20332) (call-with-output-file . G20288) (call-with-input-file . G20287) (write-char . G20286) (write . G20285) (with-output-to-file . G20284) (with-input-from-file . G20283) (read-char . G20282) (read . G20281) (peek-char . G20280) (open-output-file . G20279) (open-input-file . G20278) (newline . G20277) (display . G20276) (close-output-port . G20275) (close-input-port . G20274) (eof-object . G20272) (current-output-port . G20270) (current-input-port . G20269) (output-port? . G20268) (input-port? . G20267) (scheme-report-environment . G12420) (quotient . G20209) (null-environment . G12418) (remainder . G20208) (modulo . G20207) (inexact->exact . G20206) (force . G20205) (exact->inexact . G20204) (string-fill! . G20202) (string-set! . G20201) (set-cdr! . G20200) (set-car! . G20199) (memv . G20193) (memq . G20192) (member . G20190) (assv . G20182) (assq . G20181) (assoc . G20179) (eval . G12424) (zero? . G19982) (vector? . G19981) (vector-set! . G19980) (vector-ref . G19979) (vector-length . G19977) (vector-fill! . G19975) (vector->list . G19974) (vector . G19973) (values . G19972) (truncate . G19971) (tan . G19970) (symbol? . G19969) (symbol->string . G19967) (substring . G19966) (string? . G19965) (string>? . G19964) (string>=? . G19963) (string=? . G19962) (string<? . G19961) (string<=? . G19960) (string-ref . G19959) (string-length . G19958) (string-copy . G19956) (string-append . G19955) (string->symbol . G19954) (string->number . G19953) (string->list . G19952) (string . G19951) (sqrt . G19950) (sin . G19949) (round . G19948) (reverse . G19947) (real? . G19946) (real-part . G19944) (rationalize . G19943) (rational? . G19942) (procedure? . G19940) (positive? . G19939) (pair? . G19938) (odd? . G19937) (numerator . G19936) (number? . G19935) (number->string . G19934) (not . G19932) (negative? . G19931) (min . G19929) (max . G19928) (map . G19927) (make-vector . G19926) (make-string . G19925) (make-rectangular . G19924) (make-polar . G19923) (magnitude . G19922) (log . G19921) (list? . G19920) (list-tail . G19919) (list-ref . G19918) (list->vector . G19917) (list->string . G19916) (list . G19915) (length . G19914) (lcm . G19913) (integer? . G19912) (integer->char . G19910) (inexact? . G19908) (imag-part . G19906) (gcd . G19905) (for-each . G19904) (floor . G19903) (expt . G19901) (exp . G19900) (exact? . G19899) (even? . G19896) (eqv? . G19894) (equal? . G19893) (eq? . G19892) (dynamic-wind . G19891) (denominator . G19884) (cos . G19883) (cons . G19882) (complex? . G19881) (char? . G19880) (char>? . G19879) (char>=? . G19878) (char=? . G19877) (char<? . G19876) (char<=? . G19875) (char->integer . G19874) (ceiling . G19873) (call-with-values . G19872) (call-with-current-continuation . G19870) (cddddr . G19869) (cdddar . G19868) (cddadr . G19867) (cddaar . G19866) (cdaddr . G19865) (cdadar . G19864) (cdaadr . G19863) (cdaaar . G19862) (cadddr . G19861) (caddar . G19860) (cadadr . G19859) (cadaar . G19858) (caaddr . G19857) (caadar . G19856) (caaadr . G19855) (caaaar . G19854) (cdddr . G19853) (cddar . G19852) (cdadr . G19851) (cdaar . G19850) (caddr . G19849) (cadar . G19848) (caadr . G19847) (caaar . G19846) (cddr . G19845) (cdar . G19844) (cadr . G19843) (caar . G19842) (cdr . G19841) (car . G19840) (boolean? . G19839) (atan . G19837) (asin . G19835) (apply . G19834) (append . G19833) (angle . G19832) (acos . G19831) (abs . G19830) (/ . G19829) (* . G19828) (- . G19827) (+ . G19826) (>= . G19825) (> . G19824) (= . G19823) (<= . G19822) (< . G19821) (unquote-splicing . G19771) (unquote . G19770) (delay . G19763) (or . G19761) (and . G19760) (do . G19759) (cond . G19758) (let* . G19757) (let . G19756) (quasiquote . G19750) (syntax-rules . G19749) (case . G19744) (if . G19740) (letrec . G19738) (lambda . G19735) (quote . G19732) (letrec-syntax . G19730) (let-syntax . G19729) (set! . G19728) (begin . G19726) (define-syntax . G19724) (define . G19723)) '() values values '#f '#f '#t '#f) (G11126 'G20485 '(psyntax modules) '() '() '() '() '((module . G19725)) '() values values '#f '#f '#t '#f) (G11126 'G20486 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11126 'G20487 '(rnrs) '(6) '() '() '() '((regexp? . G20418) (string-upcase . G20360) (string-titlecase . G20359) (string-normalize-nfkd . G20358) (string-normalize-nfkc . G20357) (string-normalize-nfd . G20356) (string-normalize-nfc . G20355) (string-foldcase . G20354) (string-downcase . G20353) (string-ci>? . G20352) (string-ci>=? . G20351) (string-ci=? . G20350) (string-ci<? . G20349) (string-ci<=? . G20348) (char-whitespace? . G20347) (char-upper-case? . G20346) (char-title-case? . G20345) (char-numeric? . G20344) (char-lower-case? . G20343) (char-general-category . G20342) (char-upcase . G20341) (char-titlecase . G20340) (char-foldcase . G20339) (char-downcase . G20338) (char-ci>? . G20337) (char-ci>=? . G20336) (char-ci=? . G20335) (char-ci<? . G20334) (char-ci<=? . G20333) (char-alphabetic? . G20332) (make-variable-transformer . G11705) (identifier? . G12454) (generate-temporaries . G12438) (free-identifier=? . G12440) (syntax->datum . G12458) (datum->syntax . G12456) (bound-identifier=? . G12442) (record-type-descriptor? . G20331) (record-predicate . G20330) (record-mutator . G20329) (record-constructor . G20328) (record-accessor . G20327) (make-record-type-descriptor . G20326) (make-record-constructor-descriptor . G20325) (record? . G20324) (record-type-uid . G20323) (record-type-sealed? . G20322) (record-type-parent . G20321) (record-type-opaque? . G20320) (record-type-name . G20319) (record-type-generative? . G20318) (record-type-field-names . G20317) (record-rtd . G20316) (record-field-mutable? . G20315) (delete-file . G20314) (file-exists? . G20313) (vector-sort! . G20312) (vector-sort . G20311) (list-sort . G20310) (symbol-hash . G20309) (string-ci-hash . G20308) (string-hash . G20307) (equal-hash . G20306) (hashtable-equivalence-function . G20305) (make-hashtable . G20304) (hashtable-hash-function . G20303) (make-eqv-hashtable . G20302) (make-eq-hashtable . G20301) (hashtable? . G20300) (hashtable-update! . G20299) (hashtable-size . G20298) (hashtable-set! . G20297) (hashtable-ref . G20296) (hashtable-mutable? . G20295) (hashtable-keys . G20294) (hashtable-entries . G20293) (hashtable-delete! . G20292) (hashtable-copy . G20291) (hashtable-contains? . G20290) (hashtable-clear! . G20289) (call-with-output-file . G20288) (call-with-input-file . G20287) (write-char . G20286) (write . G20285) (with-output-to-file . G20284) (with-input-from-file . G20283) (read-char . G20282) (read . G20281) (peek-char . G20280) (open-output-file . G20279) (open-input-file . G20278) (newline . G20277) (display . G20276) (close-output-port . G20275) (close-input-port . G20274) (eof-object? . G20273) (eof-object . G20272) (current-error-port . G20271) (current-output-port . G20270) (current-input-port . G20269) (output-port? . G20268) (input-port? . G20267) (utf-8-codec . G20266) (utf-16-codec . G20265) (transcoder-error-handling-mode . G20264) (transcoder-eol-style . G20263) (transcoder-codec . G20262) (transcoded-port . G20261) (textual-port? . G20260) (string->bytevector . G20259) (standard-output-port . G20258) (standard-input-port . G20257) (standard-error-port . G20256) (set-port-position! . G20255) (put-u8 . G20254) (put-string . G20253) (put-datum . G20252) (put-char . G20251) (put-bytevector . G20250) (port? . G20249) (port-transcoder . G20248) (port-position . G20247) (port-has-set-port-position!? . G20246) (port-has-port-position? . G20245) (port-eof? . G20244) (output-port-buffer-mode . G20243) (open-string-output-port . G20242) (open-string-input-port . G20241) (open-file-output-port . G20240) (open-file-input/output-port . G20239) (open-file-input-port . G20238) (open-bytevector-output-port . G20237) (open-bytevector-input-port . G20236) (native-transcoder . G20235) (native-eol-style . G20234) (make-transcoder . G20233) (latin-1-codec . G20232) (make-i/o-write-error . G19307) (make-i/o-read-error . G19287) (make-i/o-port-error . G19458) (make-i/o-invalid-position-error . G19328) (make-i/o-filename-error . G19353) (make-i/o-file-protection-error . G19377) (make-i/o-file-is-read-only-error . G19397) (make-i/o-file-does-not-exist-error . G19437) (make-i/o-file-already-exists-error . G19417) (make-i/o-error . G19267) (make-i/o-encoding-error . G19503) (make-i/o-decoding-error . G19482) (make-custom-textual-output-port . G20231) (make-custom-textual-input/output-port . G20230) (make-custom-textual-input-port . G20229) (make-custom-binary-output-port . G20228) (make-custom-binary-input/output-port . G20227) (make-custom-binary-input-port . G20226) (make-bytevector . G20225) (lookahead-u8 . G20224) (lookahead-char . G20223) (i/o-write-error? . G19309) (i/o-read-error? . G19289) (i/o-port-error? . G19462) (i/o-invalid-position-error? . G19332) (i/o-filename-error? . G19357) (i/o-file-protection-error? . G19379) (i/o-file-is-read-only-error? . G19399) (i/o-file-does-not-exist-error? . G19439) (i/o-file-already-exists-error? . G19419) (i/o-error? . G19269) (i/o-error-port . G19464) (i/o-error-filename . G19359) (i/o-encoding-error? . G19507) (i/o-encoding-error-char . G19509) (i/o-decoding-error? . G19484) (get-u8 . G20222) (get-string-n! . G20221) (get-string-n . G20220) (get-string-all . G20219) (get-line . G20218) (get-datum . G20217) (get-char . G20216) (get-bytevector-some . G20215) (get-bytevector-n! . G20214) (get-bytevector-n . G20213) (get-bytevector-all . G20212) (flush-output-port . G20211) (close-port . G20210) (exit . G20203) (command-line . G19596) (remove . G20198) (remv . G20197) (remp . G20196) (remq . G20195) (partition . G20194) (memv . G20193) (memq . G20192) (memp . G20191) (member . G20190) (exists . G20189) (for-all . G20188) (fold-right . G20187) (fold-left . G20186) (find . G20185) (filter . G20184) (cons* . G20183) (assv . G20182) (assq . G20181) (assp . G20180) (assoc . G20179) (call-with-string-output-port . G20178) (call-with-port . G20177) (call-with-bytevector-output-port . G20176) (bytevector->string . G20175) (buffer-mode? . G20174) (binary-port? . G20173) (with-exception-handler . G20172) (raise-continuable . G20171) (raise . G20170) (make-enumeration . G20169) (enum-set=? . G20168) (enum-set-universe . G20167) (enum-set-union . G20166) (enum-set-subset? . G20165) (enum-set-projection . G20164) (enum-set-member? . G20163) (enum-set-intersection . G20162) (enum-set-indexer . G20161) (enum-set-difference . G20160) (enum-set-constructor . G20159) (enum-set-complement . G20158) (enum-set->list . G20157) (who-condition? . G19041) (warning? . G18913) (violation? . G18973) (undefined-violation? . G19153) (syntax-violation? . G19129) (syntax-violation-subform . G19133) (syntax-violation-form . G19131) (syntax-violation . G12452) (simple-conditions . G20156) (serious-condition? . G18933) (non-continuable-violation? . G19063) (message-condition? . G18891) (make-who-condition . G19037) (make-warning . G18911) (make-violation . G18971) (make-undefined-violation . G19151) (make-syntax-violation . G19123) (make-serious-condition . G18931) (make-non-continuable-violation . G19061) (make-message-condition . G18887) (make-lexical-violation . G19101) (make-irritants-condition . G19012) (make-implementation-restriction-violation . G19081) (make-error . G18951) (make-assertion-violation . G18991) (lexical-violation? . G19103) (irritants-condition? . G19016) (implementation-restriction-violation? . G19083) (error? . G18953) (condition-who . G19043) (condition-predicate . G20155) (condition-message . G18893) (condition-irritants . G19018) (condition-accessor . G20154) (condition . G20153) (assertion-violation? . G18993) (condition? . G20152) (utf32->string . G20151) (utf16->string . G20150) (utf8->string . G20149) (uint-list->bytevector . G20148) (u8-list->bytevector . G20147) (string->utf8 . G20146) (string->utf32 . G20145) (string->utf16 . G20144) (sint-list->bytevector . G20143) (native-endianness . G20142) (bytevector? . G20141) (bytevector=? . G20140) (bytevector-uint-set! . G20139) (bytevector-uint-ref . G20138) (bytevector-u8-set! . G20137) (bytevector-u8-ref . G20136) (bytevector-u64-set! . G20135) (bytevector-u64-ref . G20134) (bytevector-u64-native-set! . G20133) (bytevector-u64-native-ref . G20132) (bytevector-u32-set! . G20131) (bytevector-u32-ref . G20130) (bytevector-u32-native-set! . G20129) (bytevector-u32-native-ref . G20128) (bytevector-u16-set! . G20127) (bytevector-u16-ref . G20126) (bytevector-u16-native-set! . G20125) (bytevector-u16-native-ref . G20124) (bytevector-sint-set! . G20123) (bytevector-sint-ref . G20122) (bytevector-s8-set! . G20121) (bytevector-s8-ref . G20120) (bytevector-s64-set! . G20119) (bytevector-s64-ref . G20118) (bytevector-s64-native-set! . G20117) (bytevector-s64-native-ref . G20116) (bytevector-s32-set! . G20115) (bytevector-s32-ref . G20114) (bytevector-s32-native-set! . G20113) (bytevector-s32-native-ref . G20112) (bytevector-s16-set! . G20111) (bytevector-s16-ref . G20110) (bytevector-s16-native-set! . G20109) (bytevector-s16-native-ref . G20108) (bytevector-length . G20107) (bytevector-ieee-single-ref . G20106) (bytevector-ieee-single-native-set! . G20105) (bytevector-ieee-single-native-ref . G20104) (bytevector-ieee-double-ref . G20103) (bytevector-ieee-double-native-set! . G20102) (bytevector-ieee-double-native-ref . G20101) (bytevector-fill! . G20100) (bytevector-copy! . G20099) (bytevector-copy . G20098) (bytevector->uint-list . G20097) (bytevector->u8-list . G20096) (bytevector->sint-list . G20095) (no-nans-violation? . G20094) (no-infinities-violation? . G20093) (make-no-nans-violation . G20092) (make-no-infinities-violation . G20091) (real->flonum . G20090) (flzero? . G20089) (fltruncate . G20088) (fltan . G20087) (flsqrt . G20086) (flsin . G20085) (flround . G20084) (flpositive? . G20083) (flonum? . G20082) (flodd? . G20081) (flnumerator . G20080) (flnegative? . G20079) (flnan? . G20078) (flmod0 . G20077) (flmod . G20076) (flmin . G20075) (flmax . G20074) (fllog . G20073) (flinteger? . G20072) (flinfinite? . G20071) (flfloor . G20070) (flfinite? . G20069) (flexpt . G20068) (flexp . G20067) (fleven? . G20066) (fldiv0-and-mod0 . G20065) (fldiv0 . G20064) (fldiv-and-mod . G20063) (fldiv . G20062) (fldenominator . G20061) (flcos . G20060) (flceiling . G20059) (flatan . G20058) (flasin . G20057) (flacos . G20056) (flabs . G20055) (fl>? . G20054) (fl>=? . G20053) (fl=? . G20052) (fl<? . G20051) (fl<=? . G20050) (fl/ . G20049) (fl- . G20048) (fl+ . G20047) (fl* . G20046) (fixnum->flonum . G20045) (fxzero? . G20044) (fxxor . G20043) (fxrotate-bit-field . G20042) (fxreverse-bit-field . G20041) (fxpositive? . G20040) (fxodd? . G20039) (fxnot . G20038) (fxnegative? . G20037) (fxmod0 . G20036) (fxmod . G20035) (fxmin . G20034) (fxmax . G20033) (fxlength . G20032) (fxior . G20031) (fxif . G20030) (fxfirst-bit-set . G20029) (fxeven? . G20028) (fxdiv0-and-mod0 . G20027) (fxdiv0 . G20026) (fxdiv-and-mod . G20025) (fxdiv . G20024) (fxcopy-bit-field . G20023) (fxcopy-bit . G20022) (fxbit-set? . G20021) (fxbit-field . G20020) (fxbit-count . G20019) (fxarithmetic-shift-right . G20018) (fxarithmetic-shift-left . G20017) (fxarithmetic-shift . G20016) (fxand . G20015) (fx>? . G20014) (fx>=? . G20013) (fx=? . G20012) (fx<? . G20011) (fx<=? . G20010) (fx-/carry . G20009) (fx- . G20008) (fx+/carry . G20007) (fx+ . G20006) (fx*/carry . G20005) (fx* . G20004) (greatest-fixnum . G20003) (least-fixnum . G20002) (fixnum-width . G20001) (fixnum? . G20000) (bitwise-rotate-bit-field . G19999) (bitwise-reverse-bit-field . G19998) (bitwise-length . G19997) (bitwise-if . G19996) (bitwise-first-bit-set . G19995) (bitwise-copy-bit-field . G19994) (bitwise-copy-bit . G19993) (bitwise-bit-set? . G19992) (bitwise-bit-field . G19991) (bitwise-bit-count . G19990) (bitwise-xor . G19989) (bitwise-ior . G19988) (bitwise-and . G19987) (bitwise-not . G19986) (bitwise-arithmetic-shift-right . G19985) (bitwise-arithmetic-shift-left . G19984) (bitwise-arithmetic-shift . G19983) (zero? . G19982) (vector? . G19981) (vector-set! . G19980) (vector-ref . G19979) (vector-map . G19978) (vector-length . G19977) (vector-for-each . G19976) (vector-fill! . G19975) (vector->list . G19974) (vector . G19973) (values . G19972) (truncate . G19971) (tan . G19970) (symbol? . G19969) (symbol=? . G19968) (symbol->string . G19967) (substring . G19966) (string? . G19965) (string>? . G19964) (string>=? . G19963) (string=? . G19962) (string<? . G19961) (string<=? . G19960) (string-ref . G19959) (string-length . G19958) (string-for-each . G19957) (string-copy . G19956) (string-append . G19955) (string->symbol . G19954) (string->number . G19953) (string->list . G19952) (string . G19951) (sqrt . G19950) (sin . G19949) (round . G19948) (reverse . G19947) (real? . G19946) (real-valued? . G19945) (real-part . G19944) (rationalize . G19943) (rational? . G19942) (rational-valued? . G19941) (procedure? . G19940) (positive? . G19939) (pair? . G19938) (odd? . G19937) (numerator . G19936) (number? . G19935) (number->string . G19934) (null? . G19933) (not . G19932) (negative? . G19931) (nan? . G19930) (min . G19929) (max . G19928) (map . G19927) (make-vector . G19926) (make-string . G19925) (make-rectangular . G19924) (make-polar . G19923) (magnitude . G19922) (log . G19921) (list? . G19920) (list-tail . G19919) (list-ref . G19918) (list->vector . G19917) (list->string . G19916) (list . G19915) (length . G19914) (lcm . G19913) (integer? . G19912) (integer-valued? . G19911) (integer->char . G19910) (infinite? . G19909) (inexact? . G19908) (inexact . G19907) (imag-part . G19906) (gcd . G19905) (for-each . G19904) (floor . G19903) (finite? . G19902) (expt . G19901) (exp . G19900) (exact? . G19899) (exact-integer-sqrt . G19898) (exact . G19897) (even? . G19896) (error . G19895) (eqv? . G19894) (equal? . G19893) (eq? . G19892) (dynamic-wind . G19891) (div0-and-mod0 . G19890) (mod0 . G19889) (div0 . G19888) (div-and-mod . G19887) (mod . G19886) (div . G19885) (denominator . G19884) (cos . G19883) (cons . G19882) (complex? . G19881) (char? . G19880) (char>? . G19879) (char>=? . G19878) (char=? . G19877) (char<? . G19876) (char<=? . G19875) (char->integer . G19874) (ceiling . G19873) (call-with-values . G19872) (call/cc . G19871) (call-with-current-continuation . G19870) (cddddr . G19869) (cdddar . G19868) (cddadr . G19867) (cddaar . G19866) (cdaddr . G19865) (cdadar . G19864) (cdaadr . G19863) (cdaaar . G19862) (cadddr . G19861) (caddar . G19860) (cadadr . G19859) (cadaar . G19858) (caaddr . G19857) (caadar . G19856) (caaadr . G19855) (caaaar . G19854) (cdddr . G19853) (cddar . G19852) (cdadr . G19851) (cdaar . G19850) (caddr . G19849) (cadar . G19848) (caadr . G19847) (caaar . G19846) (cddr . G19845) (cdar . G19844) (cadr . G19843) (caar . G19842) (cdr . G19841) (car . G19840) (boolean? . G19839) (boolean=? . G19838) (atan . G19837) (assertion-violation . G19836) (asin . G19835) (apply . G19834) (append . G19833) (angle . G19832) (acos . G19831) (abs . G19830) (/ . G19829) (* . G19828) (- . G19827) (+ . G19826) (>= . G19825) (> . G19824) (= . G19823) (<= . G19822) (< . G19821) (&no-nans . G19820) (&no-infinities . G19819) (&i/o-encoding . G19818) (&i/o-decoding . G19817) (&i/o-port . G19816) (&i/o-file-does-not-exist . G19815) (&i/o-file-already-exists . G19814) (&i/o-file-is-read-only . G19813) (&i/o-file-protection . G19812) (&i/o-filename . G19811) (&i/o-invalid-position . G19810) (&i/o-write . G19809) (&i/o-read . G19808) (&i/o . G19807) (&undefined . G19806) (&syntax . G19805) (&lexical . G19804) (&implementation-restriction . G19803) (&non-continuable . G19802) (&who . G19801) (&irritants . G19800) (&assertion . G19799) (&violation . G19798) (&error . G19797) (&serious . G19796) (&warning . G19795) (&message . G19794) (&condition . G19793) (define-condition-type . G19792) (define-enumeration . G19791) (define-record-type . G19790) (parent-rtd . G19789) (nongenerative . G19788) (opaque . G19787) (sealed . G19786) (protocol . G19785) (parent . G19784) (immutable . G19783) (mutable . G19782) (fields . G19781) (error-handling-mode . G19780) (file-options . G19779) (buffer-mode . G19778) (eol-style . G19777) (guard . G19776) (unsyntax-splicing . G19773) (unsyntax . G19772) (unquote-splicing . G19771) (unquote . G19770) (_ . G19769) (else . G19768) (=> . G19767) (... . G19766) (assert . G19765) (endianness . G19764) (or . G19761) (and . G19760) (do . G19759) (cond . G19758) (let* . G19757) (let . G19756) (let*-values . G19755) (let-values . G19754) (identifier-syntax . G19753) (with-syntax . G19752) (quasisyntax . G19751) (quasiquote . G19750) (syntax-rules . G19749) (record-constructor-descriptor . G19746) (record-type-descriptor . G19745) (case . G19744) (unless . G19742) (when . G19741) (if . G19740) (letrec* . G19739) (letrec . G19738) (case-lambda . G19736) (lambda . G19735) (syntax . G19734) (syntax-case . G19733) (quote . G19732) (letrec-syntax . G19730) (let-syntax . G19729) (set! . G19728) (begin . G19726) (define-syntax . G19724) (define . G19723)) '() values values '#f '#f '#t '#f) (G11126 'G20488 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G12420) (quotient . G20209) (null-environment . G12418) (remainder . G20208) (modulo . G20207) (inexact->exact . G20206) (force . G20205) (exact->inexact . G20204) (delay . G19763)) '() values values '#f '#f '#t '#f) (G11126 'G20489 '(rnrs control) '(6) '() '() '() '((do . G19759) (unless . G19742) (when . G19741) (case-lambda . G19736)) '() values values '#f '#f '#t '#f) (G11126 'G20490 '(rnrs eval) '(6) '() '() '() '((eval . G12424) (environment . G12416)) '() values values '#f '#f '#t '#f) (G11126 'G20491 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G20200) (set-car! . G20199)) '() values values '#f '#f '#t '#f) (G11126 'G20492 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G20202) (string-set! . G20201)) '() values values '#f '#f '#t '#f) (G11126 'G20493 '(rnrs programs) '(6) '() '() '() '((exit . G20203) (command-line . G19596)) '() values values '#f '#f '#t '#f) (G11126 'G20494 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G11705) (identifier? . G12454) (generate-temporaries . G12438) (free-identifier=? . G12440) (syntax->datum . G12458) (datum->syntax . G12456) (bound-identifier=? . G12442) (syntax-violation . G12452) (unsyntax-splicing . G19773) (unsyntax . G19772) (_ . G19769) (... . G19766) (with-syntax . G19752) (quasisyntax . G19751) (syntax . G19734) (syntax-case . G19733)) '() values values '#f '#f '#t '#f) (G11126 'G20495 '(rnrs files) '(6) '() '() '() '((delete-file . G20314) (file-exists? . G20313) (make-i/o-write-error . G19307) (make-i/o-read-error . G19287) (make-i/o-port-error . G19458) (make-i/o-invalid-position-error . G19328) (make-i/o-filename-error . G19353) (make-i/o-file-protection-error . G19377) (make-i/o-file-is-read-only-error . G19397) (make-i/o-file-does-not-exist-error . G19437) (make-i/o-file-already-exists-error . G19417) (make-i/o-error . G19267) (i/o-write-error? . G19309) (i/o-read-error? . G19289) (i/o-port-error? . G19462) (i/o-invalid-position-error? . G19332) (i/o-filename-error? . G19357) (i/o-file-protection-error? . G19379) (i/o-file-is-read-only-error? . G19399) (i/o-file-does-not-exist-error? . G19439) (i/o-file-already-exists-error? . G19419) (i/o-error? . G19269) (i/o-error-port . G19464) (i/o-error-filename . G19359) (&i/o-port . G19816) (&i/o-file-does-not-exist . G19815) (&i/o-file-already-exists . G19814) (&i/o-file-is-read-only . G19813) (&i/o-file-protection . G19812) (&i/o-filename . G19811) (&i/o-invalid-position . G19810) (&i/o-write . G19809) (&i/o-read . G19808) (&i/o . G19807)) '() values values '#f '#f '#t '#f) (G11126 'G20496 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G20312) (vector-sort . G20311) (list-sort . G20310)) '() values values '#f '#f '#t '#f) (G11126 'G20497 '(rnrs base) '(6) '() '() '() '((zero? . G19982) (vector? . G19981) (vector-set! . G19980) (vector-ref . G19979) (vector-map . G19978) (vector-length . G19977) (vector-for-each . G19976) (vector-fill! . G19975) (vector->list . G19974) (vector . G19973) (values . G19972) (truncate . G19971) (tan . G19970) (symbol? . G19969) (symbol=? . G19968) (symbol->string . G19967) (substring . G19966) (string? . G19965) (string>? . G19964) (string>=? . G19963) (string=? . G19962) (string<? . G19961) (string<=? . G19960) (string-ref . G19959) (string-length . G19958) (string-for-each . G19957) (string-copy . G19956) (string-append . G19955) (string->symbol . G19954) (string->number . G19953) (string->list . G19952) (string . G19951) (sqrt . G19950) (sin . G19949) (round . G19948) (reverse . G19947) (real? . G19946) (real-valued? . G19945) (real-part . G19944) (rationalize . G19943) (rational? . G19942) (rational-valued? . G19941) (procedure? . G19940) (positive? . G19939) (pair? . G19938) (odd? . G19937) (numerator . G19936) (number? . G19935) (number->string . G19934) (null? . G19933) (not . G19932) (negative? . G19931) (nan? . G19930) (min . G19929) (max . G19928) (map . G19927) (make-vector . G19926) (make-string . G19925) (make-rectangular . G19924) (make-polar . G19923) (magnitude . G19922) (log . G19921) (list? . G19920) (list-tail . G19919) (list-ref . G19918) (list->vector . G19917) (list->string . G19916) (list . G19915) (length . G19914) (lcm . G19913) (integer? . G19912) (integer-valued? . G19911) (integer->char . G19910) (infinite? . G19909) (inexact? . G19908) (inexact . G19907) (imag-part . G19906) (gcd . G19905) (for-each . G19904) (floor . G19903) (finite? . G19902) (expt . G19901) (exp . G19900) (exact? . G19899) (exact-integer-sqrt . G19898) (exact . G19897) (even? . G19896) (error . G19895) (eqv? . G19894) (equal? . G19893) (eq? . G19892) (dynamic-wind . G19891) (div0-and-mod0 . G19890) (mod0 . G19889) (div0 . G19888) (div-and-mod . G19887) (mod . G19886) (div . G19885) (denominator . G19884) (cos . G19883) (cons . G19882) (complex? . G19881) (char? . G19880) (char>? . G19879) (char>=? . G19878) (char=? . G19877) (char<? . G19876) (char<=? . G19875) (char->integer . G19874) (ceiling . G19873) (call-with-values . G19872) (call/cc . G19871) (call-with-current-continuation . G19870) (cddddr . G19869) (cdddar . G19868) (cddadr . G19867) (cddaar . G19866) (cdaddr . G19865) (cdadar . G19864) (cdaadr . G19863) (cdaaar . G19862) (cadddr . G19861) (caddar . G19860) (cadadr . G19859) (cadaar . G19858) (caaddr . G19857) (caadar . G19856) (caaadr . G19855) (caaaar . G19854) (cdddr . G19853) (cddar . G19852) (cdadr . G19851) (cdaar . G19850) (caddr . G19849) (cadar . G19848) (caadr . G19847) (caaar . G19846) (cddr . G19845) (cdar . G19844) (cadr . G19843) (caar . G19842) (cdr . G19841) (car . G19840) (boolean? . G19839) (boolean=? . G19838) (atan . G19837) (assertion-violation . G19836) (asin . G19835) (apply . G19834) (append . G19833) (angle . G19832) (acos . G19831) (abs . G19830) (/ . G19829) (* . G19828) (- . G19827) (+ . G19826) (>= . G19825) (> . G19824) (= . G19823) (<= . G19822) (< . G19821) (unquote-splicing . G19771) (unquote . G19770) (_ . G19769) (else . G19768) (=> . G19767) (... . G19766) (assert . G19765) (or . G19761) (and . G19760) (cond . G19758) (let* . G19757) (let . G19756) (let*-values . G19755) (let-values . G19754) (identifier-syntax . G19753) (quasiquote . G19750) (syntax-rules . G19749) (case . G19744) (if . G19740) (letrec* . G19739) (letrec . G19738) (lambda . G19735) (quote . G19732) (letrec-syntax . G19730) (let-syntax . G19729) (set! . G19728) (begin . G19726) (define-syntax . G19724) (define . G19723)) '() values values '#f '#f '#t '#f) (G11126 'G20498 '(rnrs lists) '(6) '() '() '() '((remove . G20198) (remv . G20197) (remp . G20196) (remq . G20195) (partition . G20194) (memv . G20193) (memq . G20192) (memp . G20191) (member . G20190) (exists . G20189) (for-all . G20188) (fold-right . G20187) (fold-left . G20186) (find . G20185) (filter . G20184) (cons* . G20183) (assv . G20182) (assq . G20181) (assp . G20180) (assoc . G20179)) '() values values '#f '#f '#t '#f) (G11126 'G20499 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G20288) (call-with-input-file . G20287) (write-char . G20286) (write . G20285) (with-output-to-file . G20284) (with-input-from-file . G20283) (read-char . G20282) (read . G20281) (peek-char . G20280) (open-output-file . G20279) (open-input-file . G20278) (newline . G20277) (display . G20276) (close-output-port . G20275) (close-input-port . G20274) (eof-object? . G20273) (eof-object . G20272) (current-error-port . G20271) (current-output-port . G20270) (current-input-port . G20269) (output-port? . G20268) (input-port? . G20267) (make-i/o-write-error . G19307) (make-i/o-read-error . G19287) (make-i/o-port-error . G19458) (make-i/o-invalid-position-error . G19328) (make-i/o-filename-error . G19353) (make-i/o-file-protection-error . G19377) (make-i/o-file-is-read-only-error . G19397) (make-i/o-file-does-not-exist-error . G19437) (make-i/o-file-already-exists-error . G19417) (make-i/o-error . G19267) (i/o-write-error? . G19309) (i/o-read-error? . G19289) (i/o-port-error? . G19462) (i/o-invalid-position-error? . G19332) (i/o-filename-error? . G19357) (i/o-file-protection-error? . G19379) (i/o-file-is-read-only-error? . G19399) (i/o-file-does-not-exist-error? . G19439) (i/o-file-already-exists-error? . G19419) (i/o-error? . G19269) (i/o-error-port . G19464) (i/o-error-filename . G19359) (&i/o-port . G19816) (&i/o-file-does-not-exist . G19815) (&i/o-file-already-exists . G19814) (&i/o-file-is-read-only . G19813) (&i/o-file-protection . G19812) (&i/o-filename . G19811) (&i/o-invalid-position . G19810) (&i/o-write . G19809) (&i/o-read . G19808) (&i/o . G19807)) '() values values '#f '#f '#t '#f) (G11126 'G20500 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G20225) (utf32->string . G20151) (utf16->string . G20150) (utf8->string . G20149) (uint-list->bytevector . G20148) (u8-list->bytevector . G20147) (string->utf8 . G20146) (string->utf32 . G20145) (string->utf16 . G20144) (sint-list->bytevector . G20143) (native-endianness . G20142) (bytevector? . G20141) (bytevector=? . G20140) (bytevector-uint-set! . G20139) (bytevector-uint-ref . G20138) (bytevector-u8-set! . G20137) (bytevector-u8-ref . G20136) (bytevector-u64-set! . G20135) (bytevector-u64-ref . G20134) (bytevector-u64-native-set! . G20133) (bytevector-u64-native-ref . G20132) (bytevector-u32-set! . G20131) (bytevector-u32-ref . G20130) (bytevector-u32-native-set! . G20129) (bytevector-u32-native-ref . G20128) (bytevector-u16-set! . G20127) (bytevector-u16-ref . G20126) (bytevector-u16-native-set! . G20125) (bytevector-u16-native-ref . G20124) (bytevector-sint-set! . G20123) (bytevector-sint-ref . G20122) (bytevector-s8-set! . G20121) (bytevector-s8-ref . G20120) (bytevector-s64-set! . G20119) (bytevector-s64-ref . G20118) (bytevector-s64-native-set! . G20117) (bytevector-s64-native-ref . G20116) (bytevector-s32-set! . G20115) (bytevector-s32-ref . G20114) (bytevector-s32-native-set! . G20113) (bytevector-s32-native-ref . G20112) (bytevector-s16-set! . G20111) (bytevector-s16-ref . G20110) (bytevector-s16-native-set! . G20109) (bytevector-s16-native-ref . G20108) (bytevector-length . G20107) (bytevector-ieee-single-ref . G20106) (bytevector-ieee-single-native-set! . G20105) (bytevector-ieee-single-native-ref . G20104) (bytevector-ieee-double-ref . G20103) (bytevector-ieee-double-native-set! . G20102) (bytevector-ieee-double-native-ref . G20101) (bytevector-fill! . G20100) (bytevector-copy! . G20099) (bytevector-copy . G20098) (bytevector->uint-list . G20097) (bytevector->u8-list . G20096) (bytevector->sint-list . G20095) (endianness . G19764)) '() values values '#f '#f '#t '#f) (G11126 'G20501 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G20360) (string-titlecase . G20359) (string-normalize-nfkd . G20358) (string-normalize-nfkc . G20357) (string-normalize-nfd . G20356) (string-normalize-nfc . G20355) (string-foldcase . G20354) (string-downcase . G20353) (string-ci>? . G20352) (string-ci>=? . G20351) (string-ci=? . G20350) (string-ci<? . G20349) (string-ci<=? . G20348) (char-whitespace? . G20347) (char-upper-case? . G20346) (char-title-case? . G20345) (char-numeric? . G20344) (char-lower-case? . G20343) (char-general-category . G20342) (char-upcase . G20341) (char-titlecase . G20340) (char-foldcase . G20339) (char-downcase . G20338) (char-ci>? . G20337) (char-ci>=? . G20336) (char-ci=? . G20335) (char-ci<? . G20334) (char-ci<=? . G20333) (char-alphabetic? . G20332)) '() values values '#f '#f '#t '#f) (G11126 'G20502 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G20172) (raise-continuable . G20171) (raise . G20170) (guard . G19776) (else . G19768) (=> . G19767)) '() values values '#f '#f '#t '#f) (G11126 'G20503 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G19999) (bitwise-reverse-bit-field . G19998) (bitwise-length . G19997) (bitwise-if . G19996) (bitwise-first-bit-set . G19995) (bitwise-copy-bit-field . G19994) (bitwise-copy-bit . G19993) (bitwise-bit-set? . G19992) (bitwise-bit-field . G19991) (bitwise-bit-count . G19990) (bitwise-xor . G19989) (bitwise-ior . G19988) (bitwise-and . G19987) (bitwise-not . G19986) (bitwise-arithmetic-shift-right . G19985) (bitwise-arithmetic-shift-left . G19984) (bitwise-arithmetic-shift . G19983)) '() values values '#f '#f '#t '#f) (G11126 'G20504 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G20044) (fxxor . G20043) (fxrotate-bit-field . G20042) (fxreverse-bit-field . G20041) (fxpositive? . G20040) (fxodd? . G20039) (fxnot . G20038) (fxnegative? . G20037) (fxmod0 . G20036) (fxmod . G20035) (fxmin . G20034) (fxmax . G20033) (fxlength . G20032) (fxior . G20031) (fxif . G20030) (fxfirst-bit-set . G20029) (fxeven? . G20028) (fxdiv0-and-mod0 . G20027) (fxdiv0 . G20026) (fxdiv-and-mod . G20025) (fxdiv . G20024) (fxcopy-bit-field . G20023) (fxcopy-bit . G20022) (fxbit-set? . G20021) (fxbit-field . G20020) (fxbit-count . G20019) (fxarithmetic-shift-right . G20018) (fxarithmetic-shift-left . G20017) (fxarithmetic-shift . G20016) (fxand . G20015) (fx>? . G20014) (fx>=? . G20013) (fx=? . G20012) (fx<? . G20011) (fx<=? . G20010) (fx-/carry . G20009) (fx- . G20008) (fx+/carry . G20007) (fx+ . G20006) (fx*/carry . G20005) (fx* . G20004) (greatest-fixnum . G20003) (least-fixnum . G20002) (fixnum-width . G20001) (fixnum? . G20000)) '() values values '#f '#f '#t '#f) (G11126 'G20505 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G20094) (no-infinities-violation? . G20093) (make-no-nans-violation . G20092) (make-no-infinities-violation . G20091) (real->flonum . G20090) (flzero? . G20089) (fltruncate . G20088) (fltan . G20087) (flsqrt . G20086) (flsin . G20085) (flround . G20084) (flpositive? . G20083) (flonum? . G20082) (flodd? . G20081) (flnumerator . G20080) (flnegative? . G20079) (flnan? . G20078) (flmod0 . G20077) (flmod . G20076) (flmin . G20075) (flmax . G20074) (fllog . G20073) (flinteger? . G20072) (flinfinite? . G20071) (flfloor . G20070) (flfinite? . G20069) (flexpt . G20068) (flexp . G20067) (fleven? . G20066) (fldiv0-and-mod0 . G20065) (fldiv0 . G20064) (fldiv-and-mod . G20063) (fldiv . G20062) (fldenominator . G20061) (flcos . G20060) (flceiling . G20059) (flatan . G20058) (flasin . G20057) (flacos . G20056) (flabs . G20055) (fl>? . G20054) (fl>=? . G20053) (fl=? . G20052) (fl<? . G20051) (fl<=? . G20050) (fl/ . G20049) (fl- . G20048) (fl+ . G20047) (fl* . G20046) (fixnum->flonum . G20045) (&no-nans . G19820) (&no-infinities . G19819)) '() values values '#f '#f '#t '#f) (G11126 'G20506 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G20309) (string-ci-hash . G20308) (string-hash . G20307) (equal-hash . G20306) (hashtable-equivalence-function . G20305) (make-hashtable . G20304) (hashtable-hash-function . G20303) (make-eqv-hashtable . G20302) (make-eq-hashtable . G20301) (hashtable? . G20300) (hashtable-update! . G20299) (hashtable-size . G20298) (hashtable-set! . G20297) (hashtable-ref . G20296) (hashtable-mutable? . G20295) (hashtable-keys . G20294) (hashtable-entries . G20293) (hashtable-delete! . G20292) (hashtable-copy . G20291) (hashtable-contains? . G20290) (hashtable-clear! . G20289)) '() values values '#f '#f '#t '#f) (G11126 'G20507 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G20273) (eof-object . G20272) (current-error-port . G20271) (current-output-port . G20270) (current-input-port . G20269) (output-port? . G20268) (input-port? . G20267) (utf-8-codec . G20266) (utf-16-codec . G20265) (transcoder-error-handling-mode . G20264) (transcoder-eol-style . G20263) (transcoder-codec . G20262) (transcoded-port . G20261) (textual-port? . G20260) (string->bytevector . G20259) (standard-output-port . G20258) (standard-input-port . G20257) (standard-error-port . G20256) (set-port-position! . G20255) (put-u8 . G20254) (put-string . G20253) (put-datum . G20252) (put-char . G20251) (put-bytevector . G20250) (port? . G20249) (port-transcoder . G20248) (port-position . G20247) (port-has-set-port-position!? . G20246) (port-has-port-position? . G20245) (port-eof? . G20244) (output-port-buffer-mode . G20243) (open-string-output-port . G20242) (open-string-input-port . G20241) (open-file-output-port . G20240) (open-file-input/output-port . G20239) (open-file-input-port . G20238) (open-bytevector-output-port . G20237) (open-bytevector-input-port . G20236) (native-transcoder . G20235) (native-eol-style . G20234) (make-transcoder . G20233) (latin-1-codec . G20232) (make-i/o-write-error . G19307) (make-i/o-read-error . G19287) (make-i/o-port-error . G19458) (make-i/o-invalid-position-error . G19328) (make-i/o-filename-error . G19353) (make-i/o-file-protection-error . G19377) (make-i/o-file-is-read-only-error . G19397) (make-i/o-file-does-not-exist-error . G19437) (make-i/o-file-already-exists-error . G19417) (make-i/o-error . G19267) (make-i/o-encoding-error . G19503) (make-i/o-decoding-error . G19482) (make-custom-textual-output-port . G20231) (make-custom-textual-input/output-port . G20230) (make-custom-textual-input-port . G20229) (make-custom-binary-output-port . G20228) (make-custom-binary-input/output-port . G20227) (make-custom-binary-input-port . G20226) (lookahead-u8 . G20224) (lookahead-char . G20223) (i/o-write-error? . G19309) (i/o-read-error? . G19289) (i/o-port-error? . G19462) (i/o-invalid-position-error? . G19332) (i/o-filename-error? . G19357) (i/o-file-protection-error? . G19379) (i/o-file-is-read-only-error? . G19399) (i/o-file-does-not-exist-error? . G19439) (i/o-file-already-exists-error? . G19419) (i/o-error? . G19269) (i/o-error-port . G19464) (i/o-error-filename . G19359) (i/o-encoding-error? . G19507) (i/o-encoding-error-char . G19509) (i/o-decoding-error? . G19484) (get-u8 . G20222) (get-string-n! . G20221) (get-string-n . G20220) (get-string-all . G20219) (get-line . G20218) (get-datum . G20217) (get-char . G20216) (get-bytevector-some . G20215) (get-bytevector-n! . G20214) (get-bytevector-n . G20213) (get-bytevector-all . G20212) (flush-output-port . G20211) (close-port . G20210) (call-with-string-output-port . G20178) (call-with-port . G20177) (call-with-bytevector-output-port . G20176) (bytevector->string . G20175) (buffer-mode? . G20174) (binary-port? . G20173) (&i/o-encoding . G19818) (&i/o-decoding . G19817) (&i/o-port . G19816) (&i/o-file-does-not-exist . G19815) (&i/o-file-already-exists . G19814) (&i/o-file-is-read-only . G19813) (&i/o-file-protection . G19812) (&i/o-filename . G19811) (&i/o-invalid-position . G19810) (&i/o-write . G19809) (&i/o-read . G19808) (&i/o . G19807) (error-handling-mode . G19780) (file-options . G19779) (buffer-mode . G19778) (eol-style . G19777)) '() values values '#f '#f '#t '#f) (G11126 'G20508 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G20169) (enum-set=? . G20168) (enum-set-universe . G20167) (enum-set-union . G20166) (enum-set-subset? . G20165) (enum-set-projection . G20164) (enum-set-member? . G20163) (enum-set-intersection . G20162) (enum-set-indexer . G20161) (enum-set-difference . G20160) (enum-set-constructor . G20159) (enum-set-complement . G20158) (enum-set->list . G20157) (define-enumeration . G19791)) '() values values '#f '#f '#t '#f) (G11126 'G20509 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G19041) (warning? . G18913) (violation? . G18973) (undefined-violation? . G19153) (syntax-violation? . G19129) (syntax-violation-subform . G19133) (syntax-violation-form . G19131) (syntax-violation . G12452) (simple-conditions . G20156) (serious-condition? . G18933) (non-continuable-violation? . G19063) (message-condition? . G18891) (make-who-condition . G19037) (make-warning . G18911) (make-violation . G18971) (make-undefined-violation . G19151) (make-syntax-violation . G19123) (make-serious-condition . G18931) (make-non-continuable-violation . G19061) (make-message-condition . G18887) (make-lexical-violation . G19101) (make-irritants-condition . G19012) (make-implementation-restriction-violation . G19081) (make-error . G18951) (make-assertion-violation . G18991) (lexical-violation? . G19103) (irritants-condition? . G19016) (implementation-restriction-violation? . G19083) (error? . G18953) (condition-who . G19043) (condition-predicate . G20155) (condition-message . G18893) (condition-irritants . G19018) (condition-accessor . G20154) (condition . G20153) (assertion-violation? . G18993) (condition? . G20152) (&undefined . G19806) (&syntax . G19805) (&lexical . G19804) (&implementation-restriction . G19803) (&non-continuable . G19802) (&who . G19801) (&irritants . G19800) (&assertion . G19799) (&violation . G19798) (&error . G19797) (&serious . G19796) (&warning . G19795) (&message . G19794) (&condition . G19793) (define-condition-type . G19792)) '() values values '#f '#f '#t '#f) (G11126 'G20510 '(rnrs records inspection) '(6) '() '() '() '((record? . G20324) (record-type-uid . G20323) (record-type-sealed? . G20322) (record-type-parent . G20321) (record-type-opaque? . G20320) (record-type-name . G20319) (record-type-generative? . G20318) (record-type-field-names . G20317) (record-rtd . G20316) (record-field-mutable? . G20315)) '() values values '#f '#f '#t '#f) (G11126 'G20511 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G20331) (record-predicate . G20330) (record-mutator . G20329) (record-constructor . G20328) (record-accessor . G20327) (make-record-type-descriptor . G20326) (make-record-constructor-descriptor . G20325)) '() values values '#f '#f '#t '#f) (G11126 'G20512 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G19790) (parent-rtd . G19789) (nongenerative . G19788) (opaque . G19787) (sealed . G19786) (protocol . G19785) (parent . G19784) (immutable . G19783) (mutable . G19782) (fields . G19781) (record-constructor-descriptor . G19746) (record-type-descriptor . G19745)) '() values values '#f '#f '#t '#f) (G11126 'G20513 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G20481) (&no-nans-rtd . G20480) (&no-infinities-rcd . G20479) (&no-infinities-rtd . G20478) (&i/o-encoding-rcd . G20477) (&i/o-encoding-rtd . G20476) (&i/o-decoding-rcd . G20475) (&i/o-decoding-rtd . G20474) (&i/o-port-rcd . G20473) (&i/o-port-rtd . G20472) (&i/o-file-does-not-exist-rcd . G20471) (&i/o-file-does-not-exist-rtd . G20470) (&i/o-file-already-exists-rcd . G20469) (&i/o-file-already-exists-rtd . G20468) (&i/o-file-is-read-only-rcd . G20467) (&i/o-file-is-read-only-rtd . G20466) (&i/o-file-protection-rcd . G20465) (&i/o-file-protection-rtd . G20464) (&i/o-filename-rcd . G20463) (&i/o-filename-rtd . G20462) (&i/o-invalid-position-rcd . G20461) (&i/o-invalid-position-rtd . G20460) (&i/o-write-rcd . G20459) (&i/o-write-rtd . G20458) (&i/o-read-rcd . G20457) (&i/o-read-rtd . G20456) (&i/o-rcd . G20455) (&i/o-rtd . G20454) (&undefined-rcd . G20453) (&undefined-rtd . G20452) (&syntax-rcd . G20451) (&syntax-rtd . G20450) (&lexical-rcd . G20449) (&lexical-rtd . G20448) (&implementation-restriction-rcd . G20447) (&implementation-restriction-rtd . G20446) (&non-continuable-rcd . G20445) (&non-continuable-rtd . G20444) (&who-rcd . G20443) (&who-rtd . G20442) (&irritants-rcd . G20441) (&irritants-rtd . G20440) (&assertion-rcd . G20439) (&assertion-rtd . G20438) (&violation-rcd . G20437) (&violation-rtd . G20436) (&error-rcd . G20435) (&error-rtd . G20434) (&serious-rcd . G20433) (&serious-rtd . G20432) (&warning-rcd . G20431) (&warning-rtd . G20430) (&message-rcd . G20429) (&message-rtd . G20428) (&condition-rcd . G20427) (&condition-rtd . G20426) (syntax-error . G12446) (syntax-dispatch . G12219) (pretty-print . G20425) (eval-core . G20424) (set-symbol-value! . G20423) (symbol-value . G20422) (gensym . G20421) (void . G20420) (load . G19602) (interaction-environment . G12464) (char-ready? . G20419) (regexp? . G20418) (read-line . G20417) (dotted-list? . G20416) (circular-list? . G20415) (proper-list? . G20414) (circular-list . G20413) (last . G20412) (last-pair . G20411) (not-pair? . G20410) (split-at! . G20409) (split-at . G20408) (list= . G20407) (list-copy . G20406) (list-tabulate . G20405) (make-list . G20404) (xcons . G20403) (tenth . G20402) (ninth . G20401) (eighth . G20400) (seventh . G20399) (sixth . G20398) (fifth . G20397) (drop-right! . G20396) (drop-right . G20395) (take-right . G20394) (take! . G20393) (drop . G20392) (take . G20391) (car+cdr . G20390) (third . G20389) (second . G20388) (first . G20387) (assoc-ref . G20386) (alist-cons . G20385) (print . G20384) (format . G20383) (standard-library-path . G20382) (current-directory . G20381) (write-to-file . G20380) (file->list . G20379) (file->string . G20378) (digit->integer . G20377) (call-with-string-input-port . G20376) (call-with-string-io . G20375) (string-split . G20374) (bytevector-for-each . G20373) (string->regexp . G20372) (rxmatch . G20371) (regexp-replace-all . G20370) (hashtable-for-each . G20369) (readdir . G20368) (get-environment-variables . G20367) (get-environment-variable . G20366) (get-command-line . G20365) (sys-display . G20364) (source-info . G20363) (set-source-info! . G20362) (receive . G20361) (string-upcase . G20360) (string-titlecase . G20359) (string-normalize-nfkd . G20358) (string-normalize-nfkc . G20357) (string-normalize-nfd . G20356) (string-normalize-nfc . G20355) (string-foldcase . G20354) (string-downcase . G20353) (string-ci>? . G20352) (string-ci>=? . G20351) (string-ci=? . G20350) (string-ci<? . G20349) (string-ci<=? . G20348) (char-whitespace? . G20347) (char-upper-case? . G20346) (char-title-case? . G20345) (char-numeric? . G20344) (char-lower-case? . G20343) (char-general-category . G20342) (char-upcase . G20341) (char-titlecase . G20340) (char-foldcase . G20339) (char-downcase . G20338) (char-ci>? . G20337) (char-ci>=? . G20336) (char-ci=? . G20335) (char-ci<? . G20334) (char-ci<=? . G20333) (char-alphabetic? . G20332) (make-variable-transformer . G11705) (identifier? . G12454) (generate-temporaries . G12438) (free-identifier=? . G12440) (syntax->datum . G12458) (datum->syntax . G12456) (bound-identifier=? . G12442) (record-type-descriptor? . G20331) (record-predicate . G20330) (record-mutator . G20329) (record-constructor . G20328) (record-accessor . G20327) (make-record-type-descriptor . G20326) (make-record-constructor-descriptor . G20325) (record? . G20324) (record-type-uid . G20323) (record-type-sealed? . G20322) (record-type-parent . G20321) (record-type-opaque? . G20320) (record-type-name . G20319) (record-type-generative? . G20318) (record-type-field-names . G20317) (record-rtd . G20316) (record-field-mutable? . G20315) (delete-file . G20314) (file-exists? . G20313) (vector-sort! . G20312) (vector-sort . G20311) (list-sort . G20310) (symbol-hash . G20309) (string-ci-hash . G20308) (string-hash . G20307) (equal-hash . G20306) (hashtable-equivalence-function . G20305) (make-hashtable . G20304) (hashtable-hash-function . G20303) (make-eqv-hashtable . G20302) (make-eq-hashtable . G20301) (hashtable? . G20300) (hashtable-update! . G20299) (hashtable-size . G20298) (hashtable-set! . G20297) (hashtable-ref . G20296) (hashtable-mutable? . G20295) (hashtable-keys . G20294) (hashtable-entries . G20293) (hashtable-delete! . G20292) (hashtable-copy . G20291) (hashtable-contains? . G20290) (hashtable-clear! . G20289) (call-with-output-file . G20288) (call-with-input-file . G20287) (write-char . G20286) (write . G20285) (with-output-to-file . G20284) (with-input-from-file . G20283) (read-char . G20282) (read . G20281) (peek-char . G20280) (open-output-file . G20279) (open-input-file . G20278) (newline . G20277) (display . G20276) (close-output-port . G20275) (close-input-port . G20274) (eof-object? . G20273) (eof-object . G20272) (current-error-port . G20271) (current-output-port . G20270) (current-input-port . G20269) (output-port? . G20268) (input-port? . G20267) (utf-8-codec . G20266) (utf-16-codec . G20265) (transcoder-error-handling-mode . G20264) (transcoder-eol-style . G20263) (transcoder-codec . G20262) (transcoded-port . G20261) (textual-port? . G20260) (string->bytevector . G20259) (standard-output-port . G20258) (standard-input-port . G20257) (standard-error-port . G20256) (set-port-position! . G20255) (put-u8 . G20254) (put-string . G20253) (put-datum . G20252) (put-char . G20251) (put-bytevector . G20250) (port? . G20249) (port-transcoder . G20248) (port-position . G20247) (port-has-set-port-position!? . G20246) (port-has-port-position? . G20245) (port-eof? . G20244) (output-port-buffer-mode . G20243) (open-string-output-port . G20242) (open-string-input-port . G20241) (open-file-output-port . G20240) (open-file-input/output-port . G20239) (open-file-input-port . G20238) (open-bytevector-output-port . G20237) (open-bytevector-input-port . G20236) (native-transcoder . G20235) (native-eol-style . G20234) (make-transcoder . G20233) (latin-1-codec . G20232) (make-i/o-write-error . G19307) (make-i/o-read-error . G19287) (make-i/o-port-error . G19458) (make-i/o-invalid-position-error . G19328) (make-i/o-filename-error . G19353) (make-i/o-file-protection-error . G19377) (make-i/o-file-is-read-only-error . G19397) (make-i/o-file-does-not-exist-error . G19437) (make-i/o-file-already-exists-error . G19417) (make-i/o-error . G19267) (make-i/o-encoding-error . G19503) (make-i/o-decoding-error . G19482) (make-custom-textual-output-port . G20231) (make-custom-textual-input/output-port . G20230) (make-custom-textual-input-port . G20229) (make-custom-binary-output-port . G20228) (make-custom-binary-input/output-port . G20227) (make-custom-binary-input-port . G20226) (make-bytevector . G20225) (lookahead-u8 . G20224) (lookahead-char . G20223) (i/o-write-error? . G19309) (i/o-read-error? . G19289) (i/o-port-error? . G19462) (i/o-invalid-position-error? . G19332) (i/o-filename-error? . G19357) (i/o-file-protection-error? . G19379) (i/o-file-is-read-only-error? . G19399) (i/o-file-does-not-exist-error? . G19439) (i/o-file-already-exists-error? . G19419) (i/o-error? . G19269) (i/o-error-port . G19464) (i/o-error-filename . G19359) (i/o-encoding-error? . G19507) (i/o-encoding-error-char . G19509) (i/o-decoding-error? . G19484) (get-u8 . G20222) (get-string-n! . G20221) (get-string-n . G20220) (get-string-all . G20219) (get-line . G20218) (get-datum . G20217) (get-char . G20216) (get-bytevector-some . G20215) (get-bytevector-n! . G20214) (get-bytevector-n . G20213) (get-bytevector-all . G20212) (flush-output-port . G20211) (close-port . G20210) (scheme-report-environment . G12420) (quotient . G20209) (null-environment . G12418) (remainder . G20208) (modulo . G20207) (inexact->exact . G20206) (force . G20205) (exact->inexact . G20204) (exit . G20203) (command-line . G19596) (string-fill! . G20202) (string-set! . G20201) (set-cdr! . G20200) (set-car! . G20199) (remove . G20198) (remv . G20197) (remp . G20196) (remq . G20195) (partition . G20194) (memv . G20193) (memq . G20192) (memp . G20191) (member . G20190) (exists . G20189) (for-all . G20188) (fold-right . G20187) (fold-left . G20186) (find . G20185) (filter . G20184) (cons* . G20183) (assv . G20182) (assq . G20181) (assp . G20180) (assoc . G20179) (call-with-string-output-port . G20178) (call-with-port . G20177) (call-with-bytevector-output-port . G20176) (bytevector->string . G20175) (buffer-mode? . G20174) (binary-port? . G20173) (with-exception-handler . G20172) (raise-continuable . G20171) (raise . G20170) (eval . G12424) (environment . G12416) (make-enumeration . G20169) (enum-set=? . G20168) (enum-set-universe . G20167) (enum-set-union . G20166) (enum-set-subset? . G20165) (enum-set-projection . G20164) (enum-set-member? . G20163) (enum-set-intersection . G20162) (enum-set-indexer . G20161) (enum-set-difference . G20160) (enum-set-constructor . G20159) (enum-set-complement . G20158) (enum-set->list . G20157) (who-condition? . G19041) (warning? . G18913) (violation? . G18973) (undefined-violation? . G19153) (syntax-violation? . G19129) (syntax-violation-subform . G19133) (syntax-violation-form . G19131) (syntax-violation . G12452) (simple-conditions . G20156) (serious-condition? . G18933) (non-continuable-violation? . G19063) (message-condition? . G18891) (make-who-condition . G19037) (make-warning . G18911) (make-violation . G18971) (make-undefined-violation . G19151) (make-syntax-violation . G19123) (make-serious-condition . G18931) (make-non-continuable-violation . G19061) (make-message-condition . G18887) (make-lexical-violation . G19101) (make-irritants-condition . G19012) (make-implementation-restriction-violation . G19081) (make-error . G18951) (make-assertion-violation . G18991) (lexical-violation? . G19103) (irritants-condition? . G19016) (implementation-restriction-violation? . G19083) (error? . G18953) (condition-who . G19043) (condition-predicate . G20155) (condition-message . G18893) (condition-irritants . G19018) (condition-accessor . G20154) (condition . G20153) (assertion-violation? . G18993) (condition? . G20152) (utf32->string . G20151) (utf16->string . G20150) (utf8->string . G20149) (uint-list->bytevector . G20148) (u8-list->bytevector . G20147) (string->utf8 . G20146) (string->utf32 . G20145) (string->utf16 . G20144) (sint-list->bytevector . G20143) (native-endianness . G20142) (bytevector? . G20141) (bytevector=? . G20140) (bytevector-uint-set! . G20139) (bytevector-uint-ref . G20138) (bytevector-u8-set! . G20137) (bytevector-u8-ref . G20136) (bytevector-u64-set! . G20135) (bytevector-u64-ref . G20134) (bytevector-u64-native-set! . G20133) (bytevector-u64-native-ref . G20132) (bytevector-u32-set! . G20131) (bytevector-u32-ref . G20130) (bytevector-u32-native-set! . G20129) (bytevector-u32-native-ref . G20128) (bytevector-u16-set! . G20127) (bytevector-u16-ref . G20126) (bytevector-u16-native-set! . G20125) (bytevector-u16-native-ref . G20124) (bytevector-sint-set! . G20123) (bytevector-sint-ref . G20122) (bytevector-s8-set! . G20121) (bytevector-s8-ref . G20120) (bytevector-s64-set! . G20119) (bytevector-s64-ref . G20118) (bytevector-s64-native-set! . G20117) (bytevector-s64-native-ref . G20116) (bytevector-s32-set! . G20115) (bytevector-s32-ref . G20114) (bytevector-s32-native-set! . G20113) (bytevector-s32-native-ref . G20112) (bytevector-s16-set! . G20111) (bytevector-s16-ref . G20110) (bytevector-s16-native-set! . G20109) (bytevector-s16-native-ref . G20108) (bytevector-length . G20107) (bytevector-ieee-single-ref . G20106) (bytevector-ieee-single-native-set! . G20105) (bytevector-ieee-single-native-ref . G20104) (bytevector-ieee-double-ref . G20103) (bytevector-ieee-double-native-set! . G20102) (bytevector-ieee-double-native-ref . G20101) (bytevector-fill! . G20100) (bytevector-copy! . G20099) (bytevector-copy . G20098) (bytevector->uint-list . G20097) (bytevector->u8-list . G20096) (bytevector->sint-list . G20095) (no-nans-violation? . G20094) (no-infinities-violation? . G20093) (make-no-nans-violation . G20092) (make-no-infinities-violation . G20091) (real->flonum . G20090) (flzero? . G20089) (fltruncate . G20088) (fltan . G20087) (flsqrt . G20086) (flsin . G20085) (flround . G20084) (flpositive? . G20083) (flonum? . G20082) (flodd? . G20081) (flnumerator . G20080) (flnegative? . G20079) (flnan? . G20078) (flmod0 . G20077) (flmod . G20076) (flmin . G20075) (flmax . G20074) (fllog . G20073) (flinteger? . G20072) (flinfinite? . G20071) (flfloor . G20070) (flfinite? . G20069) (flexpt . G20068) (flexp . G20067) (fleven? . G20066) (fldiv0-and-mod0 . G20065) (fldiv0 . G20064) (fldiv-and-mod . G20063) (fldiv . G20062) (fldenominator . G20061) (flcos . G20060) (flceiling . G20059) (flatan . G20058) (flasin . G20057) (flacos . G20056) (flabs . G20055) (fl>? . G20054) (fl>=? . G20053) (fl=? . G20052) (fl<? . G20051) (fl<=? . G20050) (fl/ . G20049) (fl- . G20048) (fl+ . G20047) (fl* . G20046) (fixnum->flonum . G20045) (fxzero? . G20044) (fxxor . G20043) (fxrotate-bit-field . G20042) (fxreverse-bit-field . G20041) (fxpositive? . G20040) (fxodd? . G20039) (fxnot . G20038) (fxnegative? . G20037) (fxmod0 . G20036) (fxmod . G20035) (fxmin . G20034) (fxmax . G20033) (fxlength . G20032) (fxior . G20031) (fxif . G20030) (fxfirst-bit-set . G20029) (fxeven? . G20028) (fxdiv0-and-mod0 . G20027) (fxdiv0 . G20026) (fxdiv-and-mod . G20025) (fxdiv . G20024) (fxcopy-bit-field . G20023) (fxcopy-bit . G20022) (fxbit-set? . G20021) (fxbit-field . G20020) (fxbit-count . G20019) (fxarithmetic-shift-right . G20018) (fxarithmetic-shift-left . G20017) (fxarithmetic-shift . G20016) (fxand . G20015) (fx>? . G20014) (fx>=? . G20013) (fx=? . G20012) (fx<? . G20011) (fx<=? . G20010) (fx-/carry . G20009) (fx- . G20008) (fx+/carry . G20007) (fx+ . G20006) (fx*/carry . G20005) (fx* . G20004) (greatest-fixnum . G20003) (least-fixnum . G20002) (fixnum-width . G20001) (fixnum? . G20000) (bitwise-rotate-bit-field . G19999) (bitwise-reverse-bit-field . G19998) (bitwise-length . G19997) (bitwise-if . G19996) (bitwise-first-bit-set . G19995) (bitwise-copy-bit-field . G19994) (bitwise-copy-bit . G19993) (bitwise-bit-set? . G19992) (bitwise-bit-field . G19991) (bitwise-bit-count . G19990) (bitwise-xor . G19989) (bitwise-ior . G19988) (bitwise-and . G19987) (bitwise-not . G19986) (bitwise-arithmetic-shift-right . G19985) (bitwise-arithmetic-shift-left . G19984) (bitwise-arithmetic-shift . G19983) (zero? . G19982) (vector? . G19981) (vector-set! . G19980) (vector-ref . G19979) (vector-map . G19978) (vector-length . G19977) (vector-for-each . G19976) (vector-fill! . G19975) (vector->list . G19974) (vector . G19973) (values . G19972) (truncate . G19971) (tan . G19970) (symbol? . G19969) (symbol=? . G19968) (symbol->string . G19967) (substring . G19966) (string? . G19965) (string>? . G19964) (string>=? . G19963) (string=? . G19962) (string<? . G19961) (string<=? . G19960) (string-ref . G19959) (string-length . G19958) (string-for-each . G19957) (string-copy . G19956) (string-append . G19955) (string->symbol . G19954) (string->number . G19953) (string->list . G19952) (string . G19951) (sqrt . G19950) (sin . G19949) (round . G19948) (reverse . G19947) (real? . G19946) (real-valued? . G19945) (real-part . G19944) (rationalize . G19943) (rational? . G19942) (rational-valued? . G19941) (procedure? . G19940) (positive? . G19939) (pair? . G19938) (odd? . G19937) (numerator . G19936) (number? . G19935) (number->string . G19934) (null? . G19933) (not . G19932) (negative? . G19931) (nan? . G19930) (min . G19929) (max . G19928) (map . G19927) (make-vector . G19926) (make-string . G19925) (make-rectangular . G19924) (make-polar . G19923) (magnitude . G19922) (log . G19921) (list? . G19920) (list-tail . G19919) (list-ref . G19918) (list->vector . G19917) (list->string . G19916) (list . G19915) (length . G19914) (lcm . G19913) (integer? . G19912) (integer-valued? . G19911) (integer->char . G19910) (infinite? . G19909) (inexact? . G19908) (inexact . G19907) (imag-part . G19906) (gcd . G19905) (for-each . G19904) (floor . G19903) (finite? . G19902) (expt . G19901) (exp . G19900) (exact? . G19899) (exact-integer-sqrt . G19898) (exact . G19897) (even? . G19896) (error . G19895) (eqv? . G19894) (equal? . G19893) (eq? . G19892) (dynamic-wind . G19891) (div0-and-mod0 . G19890) (mod0 . G19889) (div0 . G19888) (div-and-mod . G19887) (mod . G19886) (div . G19885) (denominator . G19884) (cos . G19883) (cons . G19882) (complex? . G19881) (char? . G19880) (char>? . G19879) (char>=? . G19878) (char=? . G19877) (char<? . G19876) (char<=? . G19875) (char->integer . G19874) (ceiling . G19873) (call-with-values . G19872) (call/cc . G19871) (call-with-current-continuation . G19870) (cddddr . G19869) (cdddar . G19868) (cddadr . G19867) (cddaar . G19866) (cdaddr . G19865) (cdadar . G19864) (cdaadr . G19863) (cdaaar . G19862) (cadddr . G19861) (caddar . G19860) (cadadr . G19859) (cadaar . G19858) (caaddr . G19857) (caadar . G19856) (caaadr . G19855) (caaaar . G19854) (cdddr . G19853) (cddar . G19852) (cdadr . G19851) (cdaar . G19850) (caddr . G19849) (cadar . G19848) (caadr . G19847) (caaar . G19846) (cddr . G19845) (cdar . G19844) (cadr . G19843) (caar . G19842) (cdr . G19841) (car . G19840) (boolean? . G19839) (boolean=? . G19838) (atan . G19837) (assertion-violation . G19836) (asin . G19835) (apply . G19834) (append . G19833) (angle . G19832) (acos . G19831) (abs . G19830) (/ . G19829) (* . G19828) (- . G19827) (+ . G19826) (>= . G19825) (> . G19824) (= . G19823) (<= . G19822) (< . G19821) (&no-nans . G19820) (&no-infinities . G19819) (&i/o-encoding . G19818) (&i/o-decoding . G19817) (&i/o-port . G19816) (&i/o-file-does-not-exist . G19815) (&i/o-file-already-exists . G19814) (&i/o-file-is-read-only . G19813) (&i/o-file-protection . G19812) (&i/o-filename . G19811) (&i/o-invalid-position . G19810) (&i/o-write . G19809) (&i/o-read . G19808) (&i/o . G19807) (&undefined . G19806) (&syntax . G19805) (&lexical . G19804) (&implementation-restriction . G19803) (&non-continuable . G19802) (&who . G19801) (&irritants . G19800) (&assertion . G19799) (&violation . G19798) (&error . G19797) (&serious . G19796) (&warning . G19795) (&message . G19794) (&condition . G19793) (define-condition-type . G19792) (define-enumeration . G19791) (define-record-type . G19790) (parent-rtd . G19789) (nongenerative . G19788) (opaque . G19787) (sealed . G19786) (protocol . G19785) (parent . G19784) (immutable . G19783) (mutable . G19782) (fields . G19781) (error-handling-mode . G19780) (file-options . G19779) (buffer-mode . G19778) (eol-style . G19777) (guard . G19776) (trace-define . G19775) (trace-lambda . G19774) (unsyntax-splicing . G19773) (unsyntax . G19772) (unquote-splicing . G19771) (unquote . G19770) (_ . G19769) (else . G19768) (=> . G19767) (... . G19766) (assert . G19765) (endianness . G19764) (delay . G19763) (time . G19762) (or . G19761) (and . G19760) (do . G19759) (cond . G19758) (let* . G19757) (let . G19756) (let*-values . G19755) (let-values . G19754) (identifier-syntax . G19753) (with-syntax . G19752) (quasisyntax . G19751) (quasiquote . G19750) (syntax-rules . G19749) (include . G19748) (define-struct . G19747) (record-constructor-descriptor . G19746) (record-type-descriptor . G19745) (case . G19744) (parameterize . G19743) (unless . G19742) (when . G19741) (if . G19740) (letrec* . G19739) (letrec . G19738) (type-descriptor . G19737) (case-lambda . G19736) (lambda . G19735) (syntax . G19734) (syntax-case . G19733) (quote . G19732) (foreign-call . G19731) (letrec-syntax . G19730) (let-syntax . G19729) (set! . G19728) (import . G19727) (begin . G19726) (module . G19725) (define-syntax . G19724) (define . G19723)) '((G20481 core-prim . &no-nans-rcd) (G20480 core-prim . &no-nans-rtd) (G20479 core-prim . &no-infinities-rcd) (G20478 core-prim . &no-infinities-rtd) (G20477 core-prim . &i/o-encoding-rcd) (G20476 core-prim . &i/o-encoding-rtd) (G20475 core-prim . &i/o-decoding-rcd) (G20474 core-prim . &i/o-decoding-rtd) (G20473 core-prim . &i/o-port-rcd) (G20472 core-prim . &i/o-port-rtd) (G20471 core-prim . &i/o-file-does-not-exist-rcd) (G20470 core-prim . &i/o-file-does-not-exist-rtd) (G20469 core-prim . &i/o-file-already-exists-rcd) (G20468 core-prim . &i/o-file-already-exists-rtd) (G20467 core-prim . &i/o-file-is-read-only-rcd) (G20466 core-prim . &i/o-file-is-read-only-rtd) (G20465 core-prim . &i/o-file-protection-rcd) (G20464 core-prim . &i/o-file-protection-rtd) (G20463 core-prim . &i/o-filename-rcd) (G20462 core-prim . &i/o-filename-rtd) (G20461 core-prim . &i/o-invalid-position-rcd) (G20460 core-prim . &i/o-invalid-position-rtd) (G20459 core-prim . &i/o-write-rcd) (G20458 core-prim . &i/o-write-rtd) (G20457 core-prim . &i/o-read-rcd) (G20456 core-prim . &i/o-read-rtd) (G20455 core-prim . &i/o-rcd) (G20454 core-prim . &i/o-rtd) (G20453 core-prim . &undefined-rcd) (G20452 core-prim . &undefined-rtd) (G20451 core-prim . &syntax-rcd) (G20450 core-prim . &syntax-rtd) (G20449 core-prim . &lexical-rcd) (G20448 core-prim . &lexical-rtd) (G20447 core-prim . &implementation-restriction-rcd) (G20446 core-prim . &implementation-restriction-rtd) (G20445 core-prim . &non-continuable-rcd) (G20444 core-prim . &non-continuable-rtd) (G20443 core-prim . &who-rcd) (G20442 core-prim . &who-rtd) (G20441 core-prim . &irritants-rcd) (G20440 core-prim . &irritants-rtd) (G20439 core-prim . &assertion-rcd) (G20438 core-prim . &assertion-rtd) (G20437 core-prim . &violation-rcd) (G20436 core-prim . &violation-rtd) (G20435 core-prim . &error-rcd) (G20434 core-prim . &error-rtd) (G20433 core-prim . &serious-rcd) (G20432 core-prim . &serious-rtd) (G20431 core-prim . &warning-rcd) (G20430 core-prim . &warning-rtd) (G20429 core-prim . &message-rcd) (G20428 core-prim . &message-rtd) (G20427 core-prim . &condition-rcd) (G20426 core-prim . &condition-rtd) (G12446 core-prim . syntax-error) (G12219 core-prim . syntax-dispatch) (G20425 core-prim . pretty-print) (G20424 core-prim . eval-core) (G20423 core-prim . set-symbol-value!) (G20422 core-prim . symbol-value) (G20421 core-prim . gensym) (G20420 core-prim . void) (G19602 core-prim . load) (G12464 core-prim . interaction-environment) (G20419 core-prim . char-ready?) (G20418 core-prim . regexp?) (G20417 core-prim . read-line) (G20416 core-prim . dotted-list?) (G20415 core-prim . circular-list?) (G20414 core-prim . proper-list?) (G20413 core-prim . circular-list) (G20412 core-prim . last) (G20411 core-prim . last-pair) (G20410 core-prim . not-pair?) (G20409 core-prim . split-at!) (G20408 core-prim . split-at) (G20407 core-prim . list=) (G20406 core-prim . list-copy) (G20405 core-prim . list-tabulate) (G20404 core-prim . make-list) (G20403 core-prim . xcons) (G20402 core-prim . tenth) (G20401 core-prim . ninth) (G20400 core-prim . eighth) (G20399 core-prim . seventh) (G20398 core-prim . sixth) (G20397 core-prim . fifth) (G20396 core-prim . drop-right!) (G20395 core-prim . drop-right) (G20394 core-prim . take-right) (G20393 core-prim . take!) (G20392 core-prim . drop) (G20391 core-prim . take) (G20390 core-prim . car+cdr) (G20389 core-prim . third) (G20388 core-prim . second) (G20387 core-prim . first) (G20386 core-prim . assoc-ref) (G20385 core-prim . alist-cons) (G20384 core-prim . print) (G20383 core-prim . format) (G20382 core-prim . standard-library-path) (G20381 core-prim . current-directory) (G20380 core-prim . write-to-file) (G20379 core-prim . file->list) (G20378 core-prim . file->string) (G20377 core-prim . digit->integer) (G20376 core-prim . call-with-string-input-port) (G20375 core-prim . call-with-string-io) (G20374 core-prim . string-split) (G20373 core-prim . bytevector-for-each) (G20372 core-prim . string->regexp) (G20371 core-prim . rxmatch) (G20370 core-prim . regexp-replace-all) (G20369 core-prim . hashtable-for-each) (G20368 core-prim . readdir) (G20367 core-prim . get-environment-variables) (G20366 core-prim . get-environment-variable) (G20365 core-prim . get-command-line) (G20364 core-prim . sys-display) (G20363 core-prim . source-info) (G20362 core-prim . set-source-info!) (G20361 core-prim . receive) (G20360 core-prim . string-upcase) (G20359 core-prim . string-titlecase) (G20358 core-prim . string-normalize-nfkd) (G20357 core-prim . string-normalize-nfkc) (G20356 core-prim . string-normalize-nfd) (G20355 core-prim . string-normalize-nfc) (G20354 core-prim . string-foldcase) (G20353 core-prim . string-downcase) (G20352 core-prim . string-ci>?) (G20351 core-prim . string-ci>=?) (G20350 core-prim . string-ci=?) (G20349 core-prim . string-ci<?) (G20348 core-prim . string-ci<=?) (G20347 core-prim . char-whitespace?) (G20346 core-prim . char-upper-case?) (G20345 core-prim . char-title-case?) (G20344 core-prim . char-numeric?) (G20343 core-prim . char-lower-case?) (G20342 core-prim . char-general-category) (G20341 core-prim . char-upcase) (G20340 core-prim . char-titlecase) (G20339 core-prim . char-foldcase) (G20338 core-prim . char-downcase) (G20337 core-prim . char-ci>?) (G20336 core-prim . char-ci>=?) (G20335 core-prim . char-ci=?) (G20334 core-prim . char-ci<?) (G20333 core-prim . char-ci<=?) (G20332 core-prim . char-alphabetic?) (G11705 core-prim . make-variable-transformer) (G12454 core-prim . identifier?) (G12438 core-prim . generate-temporaries) (G12440 core-prim . free-identifier=?) (G12458 core-prim . syntax->datum) (G12456 core-prim . datum->syntax) (G12442 core-prim . bound-identifier=?) (G20331 core-prim . record-type-descriptor?) (G20330 core-prim . record-predicate) (G20329 core-prim . record-mutator) (G20328 core-prim . record-constructor) (G20327 core-prim . record-accessor) (G20326 core-prim . make-record-type-descriptor) (G20325 core-prim . make-record-constructor-descriptor) (G20324 core-prim . record?) (G20323 core-prim . record-type-uid) (G20322 core-prim . record-type-sealed?) (G20321 core-prim . record-type-parent) (G20320 core-prim . record-type-opaque?) (G20319 core-prim . record-type-name) (G20318 core-prim . record-type-generative?) (G20317 core-prim . record-type-field-names) (G20316 core-prim . record-rtd) (G20315 core-prim . record-field-mutable?) (G20314 core-prim . delete-file) (G20313 core-prim . file-exists?) (G20312 core-prim . vector-sort!) (G20311 core-prim . vector-sort) (G20310 core-prim . list-sort) (G20309 core-prim . symbol-hash) (G20308 core-prim . string-ci-hash) (G20307 core-prim . string-hash) (G20306 core-prim . equal-hash) (G20305 core-prim . hashtable-equivalence-function) (G20304 core-prim . make-hashtable) (G20303 core-prim . hashtable-hash-function) (G20302 core-prim . make-eqv-hashtable) (G20301 core-prim . make-eq-hashtable) (G20300 core-prim . hashtable?) (G20299 core-prim . hashtable-update!) (G20298 core-prim . hashtable-size) (G20297 core-prim . hashtable-set!) (G20296 core-prim . hashtable-ref) (G20295 core-prim . hashtable-mutable?) (G20294 core-prim . hashtable-keys) (G20293 core-prim . hashtable-entries) (G20292 core-prim . hashtable-delete!) (G20291 core-prim . hashtable-copy) (G20290 core-prim . hashtable-contains?) (G20289 core-prim . hashtable-clear!) (G20288 core-prim . call-with-output-file) (G20287 core-prim . call-with-input-file) (G20286 core-prim . write-char) (G20285 core-prim . write) (G20284 core-prim . with-output-to-file) (G20283 core-prim . with-input-from-file) (G20282 core-prim . read-char) (G20281 core-prim . read) (G20280 core-prim . peek-char) (G20279 core-prim . open-output-file) (G20278 core-prim . open-input-file) (G20277 core-prim . newline) (G20276 core-prim . display) (G20275 core-prim . close-output-port) (G20274 core-prim . close-input-port) (G20273 core-prim . eof-object?) (G20272 core-prim . eof-object) (G20271 core-prim . current-error-port) (G20270 core-prim . current-output-port) (G20269 core-prim . current-input-port) (G20268 core-prim . output-port?) (G20267 core-prim . input-port?) (G20266 core-prim . utf-8-codec) (G20265 core-prim . utf-16-codec) (G20264 core-prim . transcoder-error-handling-mode) (G20263 core-prim . transcoder-eol-style) (G20262 core-prim . transcoder-codec) (G20261 core-prim . transcoded-port) (G20260 core-prim . textual-port?) (G20259 core-prim . string->bytevector) (G20258 core-prim . standard-output-port) (G20257 core-prim . standard-input-port) (G20256 core-prim . standard-error-port) (G20255 core-prim . set-port-position!) (G20254 core-prim . put-u8) (G20253 core-prim . put-string) (G20252 core-prim . put-datum) (G20251 core-prim . put-char) (G20250 core-prim . put-bytevector) (G20249 core-prim . port?) (G20248 core-prim . port-transcoder) (G20247 core-prim . port-position) (G20246 core-prim . port-has-set-port-position!?) (G20245 core-prim . port-has-port-position?) (G20244 core-prim . port-eof?) (G20243 core-prim . output-port-buffer-mode) (G20242 core-prim . open-string-output-port) (G20241 core-prim . open-string-input-port) (G20240 core-prim . open-file-output-port) (G20239 core-prim . open-file-input/output-port) (G20238 core-prim . open-file-input-port) (G20237 core-prim . open-bytevector-output-port) (G20236 core-prim . open-bytevector-input-port) (G20235 core-prim . native-transcoder) (G20234 core-prim . native-eol-style) (G20233 core-prim . make-transcoder) (G20232 core-prim . latin-1-codec) (G19307 core-prim . make-i/o-write-error) (G19287 core-prim . make-i/o-read-error) (G19458 core-prim . make-i/o-port-error) (G19328 core-prim . make-i/o-invalid-position-error) (G19353 core-prim . make-i/o-filename-error) (G19377 core-prim . make-i/o-file-protection-error) (G19397 core-prim . make-i/o-file-is-read-only-error) (G19437 core-prim . make-i/o-file-does-not-exist-error) (G19417 core-prim . make-i/o-file-already-exists-error) (G19267 core-prim . make-i/o-error) (G19503 core-prim . make-i/o-encoding-error) (G19482 core-prim . make-i/o-decoding-error) (G20231 core-prim . make-custom-textual-output-port) (G20230 core-prim . make-custom-textual-input/output-port) (G20229 core-prim . make-custom-textual-input-port) (G20228 core-prim . make-custom-binary-output-port) (G20227 core-prim . make-custom-binary-input/output-port) (G20226 core-prim . make-custom-binary-input-port) (G20225 core-prim . make-bytevector) (G20224 core-prim . lookahead-u8) (G20223 core-prim . lookahead-char) (G19309 core-prim . i/o-write-error?) (G19289 core-prim . i/o-read-error?) (G19462 core-prim . i/o-port-error?) (G19332 core-prim . i/o-invalid-position-error?) (G19357 core-prim . i/o-filename-error?) (G19379 core-prim . i/o-file-protection-error?) (G19399 core-prim . i/o-file-is-read-only-error?) (G19439 core-prim . i/o-file-does-not-exist-error?) (G19419 core-prim . i/o-file-already-exists-error?) (G19269 core-prim . i/o-error?) (G19464 core-prim . i/o-error-port) (G19359 core-prim . i/o-error-filename) (G19507 core-prim . i/o-encoding-error?) (G19509 core-prim . i/o-encoding-error-char) (G19484 core-prim . i/o-decoding-error?) (G20222 core-prim . get-u8) (G20221 core-prim . get-string-n!) (G20220 core-prim . get-string-n) (G20219 core-prim . get-string-all) (G20218 core-prim . get-line) (G20217 core-prim . get-datum) (G20216 core-prim . get-char) (G20215 core-prim . get-bytevector-some) (G20214 core-prim . get-bytevector-n!) (G20213 core-prim . get-bytevector-n) (G20212 core-prim . get-bytevector-all) (G20211 core-prim . flush-output-port) (G20210 core-prim . close-port) (G12420 core-prim . scheme-report-environment) (G20209 core-prim . quotient) (G12418 core-prim . null-environment) (G20208 core-prim . remainder) (G20207 core-prim . modulo) (G20206 core-prim . inexact->exact) (G20205 core-prim . force) (G20204 core-prim . exact->inexact) (G20203 core-prim . exit) (G19596 core-prim . command-line) (G20202 core-prim . string-fill!) (G20201 core-prim . string-set!) (G20200 core-prim . set-cdr!) (G20199 core-prim . set-car!) (G20198 core-prim . remove) (G20197 core-prim . remv) (G20196 core-prim . remp) (G20195 core-prim . remq) (G20194 core-prim . partition) (G20193 core-prim . memv) (G20192 core-prim . memq) (G20191 core-prim . memp) (G20190 core-prim . member) (G20189 core-prim . exists) (G20188 core-prim . for-all) (G20187 core-prim . fold-right) (G20186 core-prim . fold-left) (G20185 core-prim . find) (G20184 core-prim . filter) (G20183 core-prim . cons*) (G20182 core-prim . assv) (G20181 core-prim . assq) (G20180 core-prim . assp) (G20179 core-prim . assoc) (G20178 core-prim . call-with-string-output-port) (G20177 core-prim . call-with-port) (G20176 core-prim . call-with-bytevector-output-port) (G20175 core-prim . bytevector->string) (G20174 core-prim . buffer-mode?) (G20173 core-prim . binary-port?) (G20172 core-prim . with-exception-handler) (G20171 core-prim . raise-continuable) (G20170 core-prim . raise) (G12424 core-prim . eval) (G12416 core-prim . environment) (G20169 core-prim . make-enumeration) (G20168 core-prim . enum-set=?) (G20167 core-prim . enum-set-universe) (G20166 core-prim . enum-set-union) (G20165 core-prim . enum-set-subset?) (G20164 core-prim . enum-set-projection) (G20163 core-prim . enum-set-member?) (G20162 core-prim . enum-set-intersection) (G20161 core-prim . enum-set-indexer) (G20160 core-prim . enum-set-difference) (G20159 core-prim . enum-set-constructor) (G20158 core-prim . enum-set-complement) (G20157 core-prim . enum-set->list) (G19041 core-prim . who-condition?) (G18913 core-prim . warning?) (G18973 core-prim . violation?) (G19153 core-prim . undefined-violation?) (G19129 core-prim . syntax-violation?) (G19133 core-prim . syntax-violation-subform) (G19131 core-prim . syntax-violation-form) (G12452 core-prim . syntax-violation) (G20156 core-prim . simple-conditions) (G18933 core-prim . serious-condition?) (G19063 core-prim . non-continuable-violation?) (G18891 core-prim . message-condition?) (G19037 core-prim . make-who-condition) (G18911 core-prim . make-warning) (G18971 core-prim . make-violation) (G19151 core-prim . make-undefined-violation) (G19123 core-prim . make-syntax-violation) (G18931 core-prim . make-serious-condition) (G19061 core-prim . make-non-continuable-violation) (G18887 core-prim . make-message-condition) (G19101 core-prim . make-lexical-violation) (G19012 core-prim . make-irritants-condition) (G19081 core-prim . make-implementation-restriction-violation) (G18951 core-prim . make-error) (G18991 core-prim . make-assertion-violation) (G19103 core-prim . lexical-violation?) (G19016 core-prim . irritants-condition?) (G19083 core-prim . implementation-restriction-violation?) (G18953 core-prim . error?) (G19043 core-prim . condition-who) (G20155 core-prim . condition-predicate) (G18893 core-prim . condition-message) (G19018 core-prim . condition-irritants) (G20154 core-prim . condition-accessor) (G20153 core-prim . condition) (G18993 core-prim . assertion-violation?) (G20152 core-prim . condition?) (G20151 core-prim . utf32->string) (G20150 core-prim . utf16->string) (G20149 core-prim . utf8->string) (G20148 core-prim . uint-list->bytevector) (G20147 core-prim . u8-list->bytevector) (G20146 core-prim . string->utf8) (G20145 core-prim . string->utf32) (G20144 core-prim . string->utf16) (G20143 core-prim . sint-list->bytevector) (G20142 core-prim . native-endianness) (G20141 core-prim . bytevector?) (G20140 core-prim . bytevector=?) (G20139 core-prim . bytevector-uint-set!) (G20138 core-prim . bytevector-uint-ref) (G20137 core-prim . bytevector-u8-set!) (G20136 core-prim . bytevector-u8-ref) (G20135 core-prim . bytevector-u64-set!) (G20134 core-prim . bytevector-u64-ref) (G20133 core-prim . bytevector-u64-native-set!) (G20132 core-prim . bytevector-u64-native-ref) (G20131 core-prim . bytevector-u32-set!) (G20130 core-prim . bytevector-u32-ref) (G20129 core-prim . bytevector-u32-native-set!) (G20128 core-prim . bytevector-u32-native-ref) (G20127 core-prim . bytevector-u16-set!) (G20126 core-prim . bytevector-u16-ref) (G20125 core-prim . bytevector-u16-native-set!) (G20124 core-prim . bytevector-u16-native-ref) (G20123 core-prim . bytevector-sint-set!) (G20122 core-prim . bytevector-sint-ref) (G20121 core-prim . bytevector-s8-set!) (G20120 core-prim . bytevector-s8-ref) (G20119 core-prim . bytevector-s64-set!) (G20118 core-prim . bytevector-s64-ref) (G20117 core-prim . bytevector-s64-native-set!) (G20116 core-prim . bytevector-s64-native-ref) (G20115 core-prim . bytevector-s32-set!) (G20114 core-prim . bytevector-s32-ref) (G20113 core-prim . bytevector-s32-native-set!) (G20112 core-prim . bytevector-s32-native-ref) (G20111 core-prim . bytevector-s16-set!) (G20110 core-prim . bytevector-s16-ref) (G20109 core-prim . bytevector-s16-native-set!) (G20108 core-prim . bytevector-s16-native-ref) (G20107 core-prim . bytevector-length) (G20106 core-prim . bytevector-ieee-single-ref) (G20105 core-prim . bytevector-ieee-single-native-set!) (G20104 core-prim . bytevector-ieee-single-native-ref) (G20103 core-prim . bytevector-ieee-double-ref) (G20102 core-prim . bytevector-ieee-double-native-set!) (G20101 core-prim . bytevector-ieee-double-native-ref) (G20100 core-prim . bytevector-fill!) (G20099 core-prim . bytevector-copy!) (G20098 core-prim . bytevector-copy) (G20097 core-prim . bytevector->uint-list) (G20096 core-prim . bytevector->u8-list) (G20095 core-prim . bytevector->sint-list) (G20094 core-prim . no-nans-violation?) (G20093 core-prim . no-infinities-violation?) (G20092 core-prim . make-no-nans-violation) (G20091 core-prim . make-no-infinities-violation) (G20090 core-prim . real->flonum) (G20089 core-prim . flzero?) (G20088 core-prim . fltruncate) (G20087 core-prim . fltan) (G20086 core-prim . flsqrt) (G20085 core-prim . flsin) (G20084 core-prim . flround) (G20083 core-prim . flpositive?) (G20082 core-prim . flonum?) (G20081 core-prim . flodd?) (G20080 core-prim . flnumerator) (G20079 core-prim . flnegative?) (G20078 core-prim . flnan?) (G20077 core-prim . flmod0) (G20076 core-prim . flmod) (G20075 core-prim . flmin) (G20074 core-prim . flmax) (G20073 core-prim . fllog) (G20072 core-prim . flinteger?) (G20071 core-prim . flinfinite?) (G20070 core-prim . flfloor) (G20069 core-prim . flfinite?) (G20068 core-prim . flexpt) (G20067 core-prim . flexp) (G20066 core-prim . fleven?) (G20065 core-prim . fldiv0-and-mod0) (G20064 core-prim . fldiv0) (G20063 core-prim . fldiv-and-mod) (G20062 core-prim . fldiv) (G20061 core-prim . fldenominator) (G20060 core-prim . flcos) (G20059 core-prim . flceiling) (G20058 core-prim . flatan) (G20057 core-prim . flasin) (G20056 core-prim . flacos) (G20055 core-prim . flabs) (G20054 core-prim . fl>?) (G20053 core-prim . fl>=?) (G20052 core-prim . fl=?) (G20051 core-prim . fl<?) (G20050 core-prim . fl<=?) (G20049 core-prim . fl/) (G20048 core-prim . fl-) (G20047 core-prim . fl+) (G20046 core-prim . fl*) (G20045 core-prim . fixnum->flonum) (G20044 core-prim . fxzero?) (G20043 core-prim . fxxor) (G20042 core-prim . fxrotate-bit-field) (G20041 core-prim . fxreverse-bit-field) (G20040 core-prim . fxpositive?) (G20039 core-prim . fxodd?) (G20038 core-prim . fxnot) (G20037 core-prim . fxnegative?) (G20036 core-prim . fxmod0) (G20035 core-prim . fxmod) (G20034 core-prim . fxmin) (G20033 core-prim . fxmax) (G20032 core-prim . fxlength) (G20031 core-prim . fxior) (G20030 core-prim . fxif) (G20029 core-prim . fxfirst-bit-set) (G20028 core-prim . fxeven?) (G20027 core-prim . fxdiv0-and-mod0) (G20026 core-prim . fxdiv0) (G20025 core-prim . fxdiv-and-mod) (G20024 core-prim . fxdiv) (G20023 core-prim . fxcopy-bit-field) (G20022 core-prim . fxcopy-bit) (G20021 core-prim . fxbit-set?) (G20020 core-prim . fxbit-field) (G20019 core-prim . fxbit-count) (G20018 core-prim . fxarithmetic-shift-right) (G20017 core-prim . fxarithmetic-shift-left) (G20016 core-prim . fxarithmetic-shift) (G20015 core-prim . fxand) (G20014 core-prim . fx>?) (G20013 core-prim . fx>=?) (G20012 core-prim . fx=?) (G20011 core-prim . fx<?) (G20010 core-prim . fx<=?) (G20009 core-prim . fx-/carry) (G20008 core-prim . fx-) (G20007 core-prim . fx+/carry) (G20006 core-prim . fx+) (G20005 core-prim . fx*/carry) (G20004 core-prim . fx*) (G20003 core-prim . greatest-fixnum) (G20002 core-prim . least-fixnum) (G20001 core-prim . fixnum-width) (G20000 core-prim . fixnum?) (G19999 core-prim . bitwise-rotate-bit-field) (G19998 core-prim . bitwise-reverse-bit-field) (G19997 core-prim . bitwise-length) (G19996 core-prim . bitwise-if) (G19995 core-prim . bitwise-first-bit-set) (G19994 core-prim . bitwise-copy-bit-field) (G19993 core-prim . bitwise-copy-bit) (G19992 core-prim . bitwise-bit-set?) (G19991 core-prim . bitwise-bit-field) (G19990 core-prim . bitwise-bit-count) (G19989 core-prim . bitwise-xor) (G19988 core-prim . bitwise-ior) (G19987 core-prim . bitwise-and) (G19986 core-prim . bitwise-not) (G19985 core-prim . bitwise-arithmetic-shift-right) (G19984 core-prim . bitwise-arithmetic-shift-left) (G19983 core-prim . bitwise-arithmetic-shift) (G19982 core-prim . zero?) (G19981 core-prim . vector?) (G19980 core-prim . vector-set!) (G19979 core-prim . vector-ref) (G19978 core-prim . vector-map) (G19977 core-prim . vector-length) (G19976 core-prim . vector-for-each) (G19975 core-prim . vector-fill!) (G19974 core-prim . vector->list) (G19973 core-prim . vector) (G19972 core-prim . values) (G19971 core-prim . truncate) (G19970 core-prim . tan) (G19969 core-prim . symbol?) (G19968 core-prim . symbol=?) (G19967 core-prim . symbol->string) (G19966 core-prim . substring) (G19965 core-prim . string?) (G19964 core-prim . string>?) (G19963 core-prim . string>=?) (G19962 core-prim . string=?) (G19961 core-prim . string<?) (G19960 core-prim . string<=?) (G19959 core-prim . string-ref) (G19958 core-prim . string-length) (G19957 core-prim . string-for-each) (G19956 core-prim . string-copy) (G19955 core-prim . string-append) (G19954 core-prim . string->symbol) (G19953 core-prim . string->number) (G19952 core-prim . string->list) (G19951 core-prim . string) (G19950 core-prim . sqrt) (G19949 core-prim . sin) (G19948 core-prim . round) (G19947 core-prim . reverse) (G19946 core-prim . real?) (G19945 core-prim . real-valued?) (G19944 core-prim . real-part) (G19943 core-prim . rationalize) (G19942 core-prim . rational?) (G19941 core-prim . rational-valued?) (G19940 core-prim . procedure?) (G19939 core-prim . positive?) (G19938 core-prim . pair?) (G19937 core-prim . odd?) (G19936 core-prim . numerator) (G19935 core-prim . number?) (G19934 core-prim . number->string) (G19933 core-prim . null?) (G19932 core-prim . not) (G19931 core-prim . negative?) (G19930 core-prim . nan?) (G19929 core-prim . min) (G19928 core-prim . max) (G19927 core-prim . map) (G19926 core-prim . make-vector) (G19925 core-prim . make-string) (G19924 core-prim . make-rectangular) (G19923 core-prim . make-polar) (G19922 core-prim . magnitude) (G19921 core-prim . log) (G19920 core-prim . list?) (G19919 core-prim . list-tail) (G19918 core-prim . list-ref) (G19917 core-prim . list->vector) (G19916 core-prim . list->string) (G19915 core-prim . list) (G19914 core-prim . length) (G19913 core-prim . lcm) (G19912 core-prim . integer?) (G19911 core-prim . integer-valued?) (G19910 core-prim . integer->char) (G19909 core-prim . infinite?) (G19908 core-prim . inexact?) (G19907 core-prim . inexact) (G19906 core-prim . imag-part) (G19905 core-prim . gcd) (G19904 core-prim . for-each) (G19903 core-prim . floor) (G19902 core-prim . finite?) (G19901 core-prim . expt) (G19900 core-prim . exp) (G19899 core-prim . exact?) (G19898 core-prim . exact-integer-sqrt) (G19897 core-prim . exact) (G19896 core-prim . even?) (G19895 core-prim . error) (G19894 core-prim . eqv?) (G19893 core-prim . equal?) (G19892 core-prim . eq?) (G19891 core-prim . dynamic-wind) (G19890 core-prim . div0-and-mod0) (G19889 core-prim . mod0) (G19888 core-prim . div0) (G19887 core-prim . div-and-mod) (G19886 core-prim . mod) (G19885 core-prim . div) (G19884 core-prim . denominator) (G19883 core-prim . cos) (G19882 core-prim . cons) (G19881 core-prim . complex?) (G19880 core-prim . char?) (G19879 core-prim . char>?) (G19878 core-prim . char>=?) (G19877 core-prim . char=?) (G19876 core-prim . char<?) (G19875 core-prim . char<=?) (G19874 core-prim . char->integer) (G19873 core-prim . ceiling) (G19872 core-prim . call-with-values) (G19871 core-prim . call/cc) (G19870 core-prim . call-with-current-continuation) (G19869 core-prim . cddddr) (G19868 core-prim . cdddar) (G19867 core-prim . cddadr) (G19866 core-prim . cddaar) (G19865 core-prim . cdaddr) (G19864 core-prim . cdadar) (G19863 core-prim . cdaadr) (G19862 core-prim . cdaaar) (G19861 core-prim . cadddr) (G19860 core-prim . caddar) (G19859 core-prim . cadadr) (G19858 core-prim . cadaar) (G19857 core-prim . caaddr) (G19856 core-prim . caadar) (G19855 core-prim . caaadr) (G19854 core-prim . caaaar) (G19853 core-prim . cdddr) (G19852 core-prim . cddar) (G19851 core-prim . cdadr) (G19850 core-prim . cdaar) (G19849 core-prim . caddr) (G19848 core-prim . cadar) (G19847 core-prim . caadr) (G19846 core-prim . caaar) (G19845 core-prim . cddr) (G19844 core-prim . cdar) (G19843 core-prim . cadr) (G19842 core-prim . caar) (G19841 core-prim . cdr) (G19840 core-prim . car) (G19839 core-prim . boolean?) (G19838 core-prim . boolean=?) (G19837 core-prim . atan) (G19836 core-prim . assertion-violation) (G19835 core-prim . asin) (G19834 core-prim . apply) (G19833 core-prim . append) (G19832 core-prim . angle) (G19831 core-prim . acos) (G19830 core-prim . abs) (G19829 core-prim . /) (G19828 core-prim . *) (G19827 core-prim . -) (G19826 core-prim . +) (G19825 core-prim . >=) (G19824 core-prim . >) (G19823 core-prim . =) (G19822 core-prim . <=) (G19821 core-prim . <) (G19820 $core-rtd &no-nans-rtd &no-nans-rcd) (G19819 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G19818 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G19817 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G19816 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G19815 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G19814 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G19813 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G19812 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G19811 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G19810 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G19809 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G19808 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G19807 $core-rtd &i/o-rtd &i/o-rcd) (G19806 $core-rtd &undefined-rtd &undefined-rcd) (G19805 $core-rtd &syntax-rtd &syntax-rcd) (G19804 $core-rtd &lexical-rtd &lexical-rcd) (G19803 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G19802 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G19801 $core-rtd &who-rtd &who-rcd) (G19800 $core-rtd &irritants-rtd &irritants-rcd) (G19799 $core-rtd &assertion-rtd &assertion-rcd) (G19798 $core-rtd &violation-rtd &violation-rcd) (G19797 $core-rtd &error-rtd &error-rcd) (G19796 $core-rtd &serious-rtd &serious-rcd) (G19795 $core-rtd &warning-rtd &warning-rcd) (G19794 $core-rtd &message-rtd &message-rcd) (G19793 $core-rtd &condition-rtd &condition-rcd) (G19792 macro . define-condition-type) (G19791 macro . define-enumeration) (G19790 macro . define-record-type) (G19789 macro . parent-rtd) (G19788 macro . nongenerative) (G19787 macro . opaque) (G19786 macro . sealed) (G19785 macro . protocol) (G19784 macro . parent) (G19783 macro . immutable) (G19782 macro . mutable) (G19781 macro . fields) (G19780 macro . error-handling-mode) (G19779 macro . file-options) (G19778 macro . buffer-mode) (G19777 macro . eol-style) (G19776 macro . guard) (G19775 macro . trace-define) (G19774 macro . trace-lambda) (G19773 macro . unsyntax-splicing) (G19772 macro . unsyntax) (G19771 macro . unquote-splicing) (G19770 macro . unquote) (G19769 macro . _) (G19768 macro . else) (G19767 macro . =>) (G19766 macro . ...) (G19765 macro . assert) (G19764 macro . endianness) (G19763 macro . delay) (G19762 macro . time) (G19761 macro . or) (G19760 macro . and) (G19759 macro . do) (G19758 macro . cond) (G19757 macro . let*) (G19756 macro . let) (G19755 macro . let*-values) (G19754 macro . let-values) (G19753 macro . identifier-syntax) (G19752 macro . with-syntax) (G19751 macro . quasisyntax) (G19750 macro . quasiquote) (G19749 macro . syntax-rules) (G19748 macro . include) (G19747 macro . define-struct) (G19746 core-macro . record-constructor-descriptor) (G19745 core-macro . record-type-descriptor) (G19744 core-macro . case) (G19743 core-macro . parameterize) (G19742 core-macro . unless) (G19741 core-macro . when) (G19740 core-macro . if) (G19739 core-macro . letrec*) (G19738 core-macro . letrec) (G19737 core-macro . type-descriptor) (G19736 core-macro . case-lambda) (G19735 core-macro . lambda) (G19734 core-macro . syntax) (G19733 core-macro . syntax-case) (G19732 core-macro . quote) (G19731 core-macro . foreign-call) (G19730 letrec-syntax) (G19729 let-syntax) (G19728 set!) (G19727 import) (G19726 begin) (G19725 module) (G19724 define-syntax) (G19723 define)) values values '#f '#f '#f '#f) (G11126 'G20514 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G20425) (eval-core . G20424) (set-symbol-value! . G20423) (symbol-value . G20422) (gensym . G20421) (void . G20420)) '() values values '#f '#f '#f '#f) (G11126 'G20515 '(mosh) '() '() '() '() '((standard-library-path . G20382) (get-command-line . G20365) (sys-display . G20364) (source-info . G20363) (set-source-info! . G20362)) '() values values '#f '#f '#f '#f) (G11126 'G20516 '(mosh backend) '() '() '() '() '((receive . G20361)) '() values values '#f '#f '#f '#f) (G11126 'G20517 '(mosh file) '() '() '() '() '((read-line . G20417) (current-directory . G20381) (write-to-file . G20380) (file->list . G20379) (file->string . G20378)) '() values values '#f '#f '#f '#f) (G11126 'G20518 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G20373)) '() values values '#f '#f '#f '#f) (G11126 'G20519 '(mosh number) '() '() '() '() '((digit->integer . G20377)) '() values values '#f '#f '#f '#f) (G11126 'G20520 '(mosh string) '() '() '() '() '((print . G20384) (format . G20383) (call-with-string-input-port . G20376) (call-with-string-io . G20375) (string-split . G20374) (string->regexp . G20372)) '() values values '#f '#f '#f '#f) (G11126 'G20521 '(mosh list) '() '() '() '() '((assoc-ref . G20386)) '() values values '#f '#f '#f '#f) (G11126 'G20522 '(mosh regexp) '() '() '() '() '((rxmatch . G20371) (regexp-replace-all . G20370)) '() values values '#f '#f '#f '#f) (G11126 'G20523 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G20369)) '() values values '#f '#f '#f '#f) (G11126 'G20524 '(system) '() '() '() '() '((readdir . G20368) (get-environment-variables . G20367) (get-environment-variable . G20366)) '() values values '#f '#f '#f '#f) (G11126 'G20525 '(srfi-1) '() '() '() '() '((dotted-list? . G20416) (circular-list? . G20415) (proper-list? . G20414) (circular-list . G20413) (last . G20412) (last-pair . G20411) (not-pair? . G20410) (split-at! . G20409) (split-at . G20408) (list= . G20407) (list-copy . G20406) (list-tabulate . G20405) (make-list . G20404) (xcons . G20403) (tenth . G20402) (ninth . G20401) (eighth . G20400) (seventh . G20399) (sixth . G20398) (fifth . G20397) (drop-right! . G20396) (drop-right . G20395) (take-right . G20394) (take! . G20393) (drop . G20392) (take . G20391) (car+cdr . G20390) (third . G20389) (second . G20388) (first . G20387) (alist-cons . G20385)) '() values values '#f '#f '#f '#f))
(begin (define G19709 '#f) (define G19710 '#f) (define G19711 '#f) (define G19712 '#f) (define G19713 '#f) (define G19714 '#f) (define G19715 '#f) (define G19716 '#f) (define G19717 '#f) (define G19718 '#f) (define G19719 '#f) (define G19720 '#f) (define G19721 '#f) ((lambda (G19593 G19595 G19597 G19599 G19601 G19603 G19605 G19607 G19609 G19611 G19613 G19615 G19617) (begin (set! G19593 (lambda (G19637 G19638) (letrec ((G19641 (lambda (G19643 G19644) (if (null? G19644) (if '#f '#f (void)) (begin (G19637 G19643 (car G19644)) (G19641 (+ G19643 '1) (cdr G19644))))))) (G19641 '1 G19638)))) (set! G19595 (G10457 write)) (set! G19597 (G10457 (get-command-line))) (set! G19599 (lambda (G19647) (cons '"." (G11110)))) (set! G19601 (lambda (G19649 . G19651) (begin (apply G19615 G19649 'load G19651) (void)))) (set! G19603 (lambda (G19653) (begin (apply G19615 G19653 'load (G19597)) (void)))) (set! G19605 (lambda () (G19603 '"ironscheme-buildscript.ss"))) (set! G19607 (lambda (G19655) (G18823 G19655 (G18843)))) (set! G19609 (lambda () (G19607 '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G19611 (lambda (G19657) (G19615 G19657 'compile))) (set! G19613 (lambda (G19659) (G19615 G19659 'closure))) (set! G19615 (lambda (G19661 G19662 . G19665) ((lambda (G19669 G19670) ((lambda (G19673) (dynamic-wind G19673 (lambda () ((lambda (G19675) ((lambda (G19677) (if (eqv? G19677 'closure) (G18842 G19675) (if (eqv? G19677 'load) ((lambda (G19680 G19681) ((lambda (G19684) (dynamic-wind G19684 (lambda () ((G18841 G19675))) G19684)) (lambda () ((lambda (G19686) (begin (G19680 G19681) (set! G19681 G19686))) (G19680))))) G19597 (cons G19661 (map (lambda (G19688) (format '"~a" G19688)) G19665))) (if (eqv? G19677 'compile) (begin (G18841 G19675) (G11114 G10452 G10557)) (void))))) G19662)) (with-input-from-file G19661 (lambda () ((letrec ((G19690 (lambda () ((lambda (G19692) (if (eof-object? G19692) '() (cons G19692 (G19690)))) (G10447))))) G19690)))))) G19673)) (lambda () ((lambda (G19694) (begin (G19669 G19670) (set! G19670 G19694))) (G19669))))) G11110 (G19599 G19661)))) (set! G19617 (lambda (G19696 G19697) ((lambda (G19700) (begin (format G19697 '"    ~a" (record-type-name G19700)) ((lambda (G19702) ((lambda (G19704) (if (eqv? G19704 '0) (newline) (if (eqv? G19704 '1) (begin (display '": " G19697) (write ((record-accessor G19700 '0) G19696) G19697) (newline G19697)) (begin (display '":\n") ((letrec ((G19705 (lambda (G19707) (if (= G19707 (vector-length G19702)) (void) (begin (display '"       " G19697) (display (vector-ref G19702 G19707) G19697) (display '": " G19697) (write ((record-accessor G19700 G19707) G19696) G19697) (newline G19697) (G19705 (+ G19707 '1))))))) G19705) '0))))) (vector-length G19702))) (record-type-field-names G19700)))) (record-rtd G19696)))) (begin (set! G19721 G19617) (set! G19720 G19615) (set! G19719 G19613) (set! G19718 G19611) (set! G19717 G19609) (set! G19716 G19607) (set! G19715 G19605) (set! G19714 G19603) (set! G19713 G19601) (set! G19712 G19599) (set! G19711 G19597) (set! G19710 G19595) (set! G19709 G19593) (G11115 G10453) (set-symbol-value! 'load G19603) (set-symbol-value! 'eval-r6rs G19607) (set-symbol-value! 'int-env-syms G18816) (set-symbol-value! 'expanded2core G10556) (set-symbol-value! 'trace-printer G19595) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G11110 (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G19618 G19619) (with-exception-handler (lambda (G19622) (begin (display '" Condition components:\n" G19619) (G19593 (lambda (G19624 G19625) ((lambda (G19628) (begin (format G19619 '"   ~d. ~a" G19624 (record-type-name G19628)) ((lambda (G19630) ((lambda (G19632) (if (eqv? G19632 '0) (newline) (if (eqv? G19632 '1) (begin (display '": ") (write ((record-accessor G19628 '0) G19625)) (newline)) (begin (display '":\n") ((letrec ((G19633 (lambda (G19635) (if (= G19635 (vector-length G19630)) (void) (begin (display '"       ") (display (vector-ref G19630 G19635)) (display '": ") (write ((record-accessor G19628 G19635) G19625)) (newline) (G19633 (+ G19635 '1))))))) G19633) '0))))) (vector-length G19630))) (record-type-field-names G19628)))) (record-rtd G19625))) (simple-conditions G19622)))) (lambda () (G19615 (car G19618) 'load)))) (G19597) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
