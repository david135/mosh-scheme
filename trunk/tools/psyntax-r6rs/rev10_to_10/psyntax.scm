;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define G10432 '#f) (define G10433 '#f) (define G10434 '#f) (define G10435 '#f) (define G10436 '#f) (define G10437 '#f) (define G10438 '#f) (define G10439 '#f) (define G10440 '#f) (define G10441 '#f) (define G10442 '#f) (define G10443 '#f) ((lambda (G10217 G10219 G10221 G10223 G10225 G10227 G10229 G10231 G10233 G10235 G10237 G10391) (begin (set! G10217 read) (set! G10219 (lambda (G10392) (G10225 G10392))) (set! G10221 (lambda (G10394) (source-info G10394))) (set! G10223 (lambda (G10396) (source-info G10396))) (set! G10225 (lambda (G10398) (if (pair? G10398) (cons (car G10398) (cdr G10398)) (display '"line:46\n")))) (set! G10227 (lambda G10400 (begin (display G10400) '#f))) (set! G10229 (lambda G10402 '#f)) (set! G10231 (lambda (G10404 G10405) (lambda G10408 (begin (display '"record printer") (for-each display G10408))))) (set! G10233 (lambda G10410 (apply error 'comile-core '"not implementated" G10410))) (set! G10235 (lambda (G10412) (with-input-from-file G10412 G10217))) (set! G10237 (lambda G10428 ((lambda (G10429) (if (= G10429 '1) (apply (lambda (G10414) (G10237 G10414 (lambda (G10416) G10416))) G10428) (if (= G10429 '2) (apply (lambda (G10418 G10419) (begin (if (procedure? G10419) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((lambda (G10422) (lambda G10426 ((lambda (G10427) (if (= G10427 '0) (apply (lambda () G10422) G10426) (if (= G10427 '1) (apply (lambda (G10424) (set! G10422 (G10419 G10424))) G10426) (error 'apply '"invalid arg count")))) (length G10426)))) (G10419 G10418)))) G10428) (error 'apply '"invalid arg count")))) (length G10428)))) (set! G10391 (lambda (G10430) G10430)) (begin (set! G10443 G10391) (set! G10442 G10237) (set! G10441 G10235) (set! G10440 G10233) (set! G10439 G10231) (set! G10438 G10229) (set! G10437 G10227) (set! G10436 G10225) (set! G10435 G10223) (set! G10434 G10221) (set! G10433 G10219) (set! G10432 G10217)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G10538 '#f) (define G10539 '#f) (define G10540 '#f) (define G10541 '#f) (define G10542 '#f) (define G10543 '#f) (define G10544 '#f) ((lambda (G10448 G10450 G10452 G10454 G10456 G10458 G10460) (begin (set! G10448 (G10442 (lambda (G10461) '#f) (lambda (G10463) (begin (if (procedure? G10463) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) G10463)))) (set! G10450 (lambda (G10465) ((lambda (G10468) (begin (set! G10468 (lambda (G10469) ((lambda (G10471) (if G10471 G10471 ((lambda (G10473) (if G10473 G10473 ((lambda (G10475) (if G10475 G10475 ((lambda (G10477) (if G10477 G10477 ((lambda (G10479) (if G10479 G10479 ((lambda (G10481) (if G10481 G10481 (begin '#f (number? G10469)))) (bytevector? G10469)))) (string? G10469)))) (boolean? G10469)))) (symbol? G10469)))) (char? G10469)))) (null? G10469)))) (not (G10468 G10465)))) '#f))) (set! G10452 (lambda (G10483) ((lambda (G10486) (begin (set! G10486 (lambda (G10487) (if (pair? G10487) ((lambda (G10489) (if (eqv? G10489 'quote) (if (if G10483 (begin '#f (G10450 (cadr G10487))) '#f) ((lambda (G10528) (begin (set-symbol-value! G10528 (cadr G10487)) G10528)) (gensym)) G10487) (if (eqv? G10489 'case-lambda) (cons 'case-lambda (map (lambda (G10526) (cons (car G10526) (map G10486 (cdr G10526)))) (cdr G10487))) (if (eqv? G10489 'lambda) (cons* 'lambda (cadr G10487) (map G10486 (cddr G10487))) (if (eqv? G10489 'letrec) ((lambda (G10518 G10519) ((lambda (G10522 G10523) (cons* 'letrec (map list G10522 (map G10486 G10523)) (map G10486 G10519))) (map car G10518) (map cadr G10518))) (cadr G10487) (cddr G10487)) (if (eqv? G10489 'letrec*) ((lambda (G10510 G10511) ((lambda (G10514 G10515) (cons* 'letrec* (map list G10514 (map G10486 G10515)) (map G10486 G10511))) (map car G10510) (map cadr G10510))) (cadr G10487) (cddr G10487)) (if (eqv? G10489 'library-letrec*) ((lambda (G10496 G10497) ((lambda (G10500 G10501) ((lambda (G10504 G10505 G10506) (cons* 'library-letrec* G10496 (map list G10504 G10505 (map G10486 G10506)) (map G10486 G10501))) (map car G10500) (map cadr G10500) (map caddr G10500))) (cadr G10497) (cddr G10497))) (cadr G10487) (cdr G10487)) (if (eqv? G10489 'begin) (cons 'begin (map G10486 (cdr G10487))) (if (eqv? G10489 'set!) (list 'set! (cadr G10487) (G10486 (caddr G10487))) (if (eqv? G10489 'primitive) ((lambda (G10490) ((lambda (G10492) (if G10492 ((lambda (G10494) G10494) G10492) G10490)) ((G10448) G10490))) (cadr G10487)) (if (eqv? G10489 'define) G10487 (if (list? G10487) (map G10486 G10487) (error 'rewrite '"invalid form ~s ~s" G10487 (list? G10487)))))))))))))) (car G10487)) G10487))) G10486)) '#f))) (set! G10454 (lambda (G10530) ((G10452 '#t) G10530))) (set! G10456 (lambda (G10532) ((G10452 '#f) G10532))) (set! G10458 write) (set! G10460 (lambda (G10534 G10535) (G10458 ((G10452 '#f) G10534) G10535))) (begin (set! G10544 G10460) (set! G10543 G10458) (set! G10542 G10456) (set! G10541 G10454) (set! G10540 G10452) (set! G10539 G10450) (set! G10538 G10448)))) '#f '#f '#f '#f '#f '#f '#f))
(void)
(begin (define G11057 '#f) (define G11058 '#f) (define G11059 '#f) (define G11060 '#f) (define G11061 '#f) (define G11062 '#f) (define G11063 '#f) (define G11064 '#f) (define G11065 '#f) (define G11066 '#f) (define G11067 '#f) (define G11068 '#f) (define G11069 '#f) (define G11070 '#f) (define G11071 '#f) (define G11072 '#f) (define G11073 '#f) (define G11074 '#f) (define G11075 '#f) (define G11076 '#f) (define G11077 '#f) (define G11078 '#f) (define G11079 '#f) (define G11080 '#f) (define G11081 '#f) (define G11082 '#f) (define G11083 '#f) (define G11084 '#f) (define G11085 '#f) (define G11086 '#f) (define G11087 '#f) (define G11088 '#f) (define G11089 '#f) (define G11090 '#f) (define G11091 '#f) (define G11092 '#f) (define G11093 '#f) (define G11094 '#f) (define G11095 '#f) (define G11096 '#f) (define G11097 '#f) (define G11098 '#f) (define G11099 '#f) (define G11100 '#f) (define G11101 '#f) (define G11102 '#f) (define G11103 '#f) (define G11104 '#f) (define G11105 '#f) (define G11106 '#f) (define G11107 '#f) (define G11108 '#f) (define G11109 '#f) (define G11110 '#f) (define G11111 '#f) (define G11112 '#f) (define G11113 '#f) (define G11114 '#f) (define G11115 '#f) (define G11116 '#f) (define G11117 '#f) ((lambda (G10634 G10636 G10642 G10644 G10646 G10651 G10653 G10655 G10657 G10659 G10661 G10663 G10665 G10667 G10669 G10671 G10673 G10675 G10677 G10679 G10681 G10683 G10685 G10687 G10689 G10691 G10693 G10695 G10697 G10699 G10701 G10703 G10705 G10707 G10709 G10711 G10713 G10715 G10717 G10719 G10721 G10723 G10725 G10727 G10729 G10731 G10733 G10735 G10737 G10739 G10741 G10743 G10745 G10747 G10749 G10751 G10753 G10755 G10757 G10759 G10761) (begin (set! G10634 (lambda () ((lambda (G10762) ((lambda (G10765) (begin (set! G10765 (lambda (G10770 G10771) (if (memq G10770 G10771) G10771 (cons G10770 G10771)))) (lambda G10768 ((lambda (G10769) (if (= G10769 '0) (apply (lambda () G10762) G10768) (if (= G10769 '1) (apply (lambda (G10766) (set! G10762 (G10765 G10766 G10762))) G10768) (error 'apply '"invalid arg count")))) (length G10768))))) '#f)) '()))) (set! G10636 (G10442 (G10634) (lambda (G10774) (begin (if (procedure? G10774) (void) (assertion-violation 'current-library-collection '"not a procedure" G10774)) G10774)))) (set! G10642 (make-record-type-descriptor 'library '#f 'G10640 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G10644 '#f) (set! G10646 (make-record-constructor-descriptor G10642 '#f G10644)) (set! G10651 (record-predicate G10642)) (set! G10653 (record-constructor G10646)) (set! G10655 (record-accessor G10642 '0)) (set! G10657 (record-accessor G10642 '1)) (set! G10659 (record-accessor G10642 '2)) (set! G10661 (record-accessor G10642 '3)) (set! G10663 (record-accessor G10642 '4)) (set! G10665 (record-accessor G10642 '5)) (set! G10667 (record-accessor G10642 '6)) (set! G10669 (record-accessor G10642 '7)) (set! G10671 (record-accessor G10642 '8)) (set! G10673 (record-accessor G10642 '9)) (set! G10675 (record-accessor G10642 '10)) (set! G10677 (record-accessor G10642 '11)) (set! G10679 (record-accessor G10642 '12)) (set! G10681 (record-accessor G10642 '13)) (set! G10683 (record-mutator G10642 '0)) (set! G10685 (record-mutator G10642 '1)) (set! G10687 (record-mutator G10642 '2)) (set! G10689 (record-mutator G10642 '3)) (set! G10691 (record-mutator G10642 '4)) (set! G10693 (record-mutator G10642 '5)) (set! G10695 (record-mutator G10642 '6)) (set! G10697 (record-mutator G10642 '7)) (set! G10699 (record-mutator G10642 '8)) (set! G10701 (record-mutator G10642 '9)) (set! G10703 (record-mutator G10642 '10)) (set! G10705 (record-mutator G10642 '11)) (set! G10707 (record-mutator G10642 '12)) (set! G10709 (record-mutator G10642 '13)) (set! G10711 (G10439 'library (lambda (G10776 G10777) (begin (if (G10651 G10776) (void) (assertion-violation 'record-type-printer '"not a library")) (display (format '"#<library ~s>" (if (null? (G10659 G10776)) (G10657 G10776) (append (G10657 G10776) (list (G10659 G10776))))) G10777))))) (set! G10713 (lambda (G10780) (if (null? G10780) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G10715 (lambda (G10782) ((letrec ((G10784 (lambda (G10786) (if (null? G10786) '#f (if (G10782 (car G10786)) (car G10786) (G10784 (cdr G10786))))))) G10784) ((G10636))))) (set! G10717 (G10442 '(".") (lambda (G10788) (if (if (list? G10788) (begin '#f (for-all string? G10788)) '#f) (map (lambda (G10790) G10790) G10788) (assertion-violation 'library-path '"not a list of strings" G10788))))) (set! G10719 (G10442 '(".sls" ".ss" ".scm") (lambda (G10792) (if (if (list? G10792) (begin '#f (for-all string? G10792)) '#f) (map (lambda (G10794) G10794) G10792) (assertion-violation 'library-extensions '"not a list of strings" G10792))))) (set! G10721 (lambda (G10796) (call-with-values (lambda () (open-string-output-port)) (lambda (G10800 G10801) ((lambda (G10804 G10805) ((lambda (G10809) (begin (set! G10809 (lambda (G10824) (if (<= '0 G10824 '9) (display G10824 G10805) (display (integer->char (+ (char->integer '#\A) (- G10824 '10))) G10805)))) (begin ((letrec ((G10810 (lambda (G10812) (if (null? G10812) (void) (begin (display '"/" G10805) (for-each (lambda (G10814) (if ((lambda (G10816) (if G10816 G10816 ((lambda (G10818) (if G10818 G10818 ((lambda (G10820) (if G10820 G10820 (begin '#f (memv G10814 '(#\- #\. #\_ #\~))))) (char<=? '#\nul G10814 '#\9)))) (char<=? '#\A G10814 '#\Z)))) (char<=? '#\a G10814 '#\z)) (display G10814 G10805) (begin (display '"%" G10805) ((lambda (G10822) (begin (G10809 (quotient G10822 '16)) (G10809 (remainder G10822 '16)))) (char->integer G10814))))) (string->list (symbol->string (car G10812)))) (G10810 (cdr G10812))))))) G10810) G10796) (G10804)))) '#f)) G10801 G10800))))) (set! G10723 (G10442 (lambda (G10826) ((lambda (G10828) ((letrec ((G10830 (lambda (G10832 G10833 G10834) (if (null? G10832) ((lambda () ((lambda (G10846 G10848 G10850 G10855 G10857 G10859 G10861 G10863 G10865 G10867) (begin (set! G10846 (make-record-type-descriptor '&library-resolution &condition-rtd 'G10844 '#f '#f '#((immutable library) (immutable files)))) (set! G10848 '#f) (set! G10850 (make-record-constructor-descriptor G10846 &condition-rcd G10848)) (set! G10855 (record-predicate G10846)) (set! G10857 (record-constructor G10850)) (set! G10859 (record-accessor G10846 '0)) (set! G10861 (record-accessor G10846 '1)) (set! G10863 (condition-predicate G10846)) (set! G10865 (condition-accessor G10846 G10859)) (set! G10867 (condition-accessor G10846 G10861)) (raise (condition (G19160) (G19186 'expander) (G19140 '"cannot locate library in library-path") (G10857 G10826 (reverse G10834)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G10833) (G10830 (cdr G10832) (G10719) G10834) ((lambda (G10868) (if (file-exists? G10868) G10868 (G10830 G10832 (cdr G10833) (cons G10868 G10834)))) (string-append (car G10832) G10828 (car G10833)))))))) G10830) (G10717) (G10719) '())) (G10721 G10826))) (lambda (G10870) (if (procedure? G10870) G10870 (assertion-violation 'file-locator '"not a procedure" G10870))))) (set! G10725 (lambda (G10872 G10873) ((lambda (G10877) (begin (set! G10877 (lambda (G10880) (list (G10655 G10880) (G10657 G10880)))) (for-each (lambda (G10878) (if (G10681 G10878) (G10872 (G10681 G10878) (list (G10655 G10878) (G10657 G10878) (G10659 G10878) (map G10877 (G10661 G10878)) (map G10877 (G10663 G10878)) (map G10877 (G10665 G10878)) (G10667 G10878) (G10669 G10878) (G10873 (G10675 G10878)) (G10873 (G10677 G10878)) (G10679 G10878))) (void))) ((G10636))))) '#f))) (set! G10727 (G10442 (lambda (G10882 G10883) '#f))) (set! G10729 (lambda (G10886) ((G10727) G10886 (lambda G10924 ((lambda (G10925) (if (= G10925 '11) (apply (lambda (G10888 G10889 G10890 G10891 G10892 G10893 G10894 G10895 G10896 G10897 G10898) ((letrec ((G10910 (lambda (G10912) (if (null? G10912) (begin (G10749 G10888 G10889 G10890 G10891 G10892 G10893 G10894 G10895 G10896 G10897 '#f '#f G10898 '#f) '#t) ((lambda (G10914) ((lambda (G10916 G10917) ((lambda (G10920) (if (if (G10651 G10920) (begin '#f (eq? G10916 (G10655 G10920))) '#f) (G10910 (cdr G10912)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source.\n" G10889 G10917 G10886) '#f))) (G10739 G10917))) (car G10914) (cadr G10914))) (car G10912)))))) G10910) (append G10891 G10892 G10893))) G10924) (if (>= G10925 '0) (apply (lambda G10922 '#f) G10924) (error 'apply '"invalid arg count")))) (length G10924)))))) (set! G10731 (G10442 (lambda (G10926) ((lambda (G10928) (if (not G10928) (assertion-violation '#f '"cannot file library" G10926) ((lambda (G10930) (if G10930 G10930 (begin '#f ((G10733) (G10441 G10928) G10928 (lambda (G10932) (if (equal? G10932 G10926) (void) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G10936 G10937) ((lambda (G10940 G10941) (begin (display '"expected to find library " G10941) (write G10926 G10941) (display '" in file " G10941) (display G10928 G10941) (display '", found " G10941) (write G10932 G10941) (display '" instead" G10941) (G10940))) G10937 G10936)))))))))) (G10729 G10928)))) ((G10723) G10926))) (lambda (G10944) (if (procedure? G10944) G10944 (assertion-violation 'library-locator '"not a procedure" G10944))))) (set! G10733 (G10442 (lambda (G10946) (assertion-violation 'library-expander '"not initialized")) (lambda (G10948) (if (procedure? G10948) G10948 (assertion-violation 'library-expander '"not a procedure" G10948))))) (set! G10735 (G10442 '())) (set! G10737 (lambda (G10950) (begin (if (member G10950 (G10735)) (assertion-violation '#f '"circular attempt to import library was detected" G10950) (void)) ((lambda (G10954 G10955) ((lambda (G10958) (dynamic-wind G10958 (lambda () (begin ((G10731) G10950) ((lambda (G10960) (if G10960 G10960 (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G10950)))) (G10715 (lambda (G10962) (equal? (G10657 G10962) G10950)))))) G10958)) (lambda () ((lambda (G10964) (begin (G10954 G10955) (set! G10955 G10964))) (G10954))))) G10735 (cons G10950 (G10735)))))) (set! G10739 (lambda (G10966) ((lambda (G10968) (if G10968 G10968 (begin '#f (G10737 G10966)))) (G10715 (lambda (G10970) (equal? (G10657 G10970) G10966)))))) (set! G10741 (lambda (G10972) (if (G10715 (lambda (G10974) (equal? (G10657 G10974) G10972))) (begin '#f '#t) '#f))) (set! G10743 (lambda (G10976) ((lambda (G10978) ((lambda (G10980) (if G10980 G10980 (begin '#f (assertion-violation '#f '"cannot find library with required spec" G10976)))) (G10715 (lambda (G10982) (eq? G10978 (G10655 G10982)))))) (car G10976)))) (set! G10745 (make-eq-hashtable)) (set! G10747 (lambda (G10984) (begin ((lambda (G10986) (for-each (lambda (G10988) ((lambda (G10990 G10991) ((lambda (G10994) (hashtable-set! G10745 G10990 G10994)) ((lambda (G10996) (if (eqv? G10996 'global) (cons 'global (cons G10984 (cdr G10991))) (if (eqv? G10996 'global-macro) (cons 'global-macro (cons G10984 (cdr G10991))) (if (eqv? G10996 'global-macro!) (cons 'global-macro! (cons G10984 (cdr G10991))) G10991)))) (car G10991)))) (car G10988) (cdr G10988))) G10986)) (G10669 G10984)) ((G10636) G10984)))) (set! G10749 (lambda (G10997 G10998 G10999 G11000 G11001 G11002 G11003 G11004 G11005 G11006 G11007 G11008 G11009 G11010) ((lambda (G11025 G11026 G11027) (begin (if (if (symbol? G10997) (if (list? G10998) (begin '#f (list? G10999)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" G10997 G10998 G10999)) (if (G10741 G10998) (assertion-violation 'install-library '"library is already installed" G10998) (void)) ((lambda (G11031) (G10747 G11031)) (G10653 G10997 G10998 G10999 G11025 G11026 G11027 G11003 G11004 G11005 G11006 G11007 G11008 G11009 G11010)))) (map G10743 G11000) (map G10743 G11001) (map G10743 G11002)))) (set! G10751 (lambda (G11033) (hashtable-ref G10745 G11033 '#f))) (set! G10753 (lambda (G11035) ((lambda (G11037) (if (procedure? G11037) (begin (G10701 G11035 (lambda () (assertion-violation 'invoke '"circularity detected" G11035))) (for-each G10753 (G10665 G11035)) (G10701 G11035 (lambda () (assertion-violation 'invoke '"first invoke did not return" G11035))) (G11037) (G10701 G11035 '#t)) (void))) (G10673 G11035)))) (set! G10755 (lambda (G11039) ((lambda (G11041) (if (procedure? G11041) (begin (G10699 G11039 (lambda () (assertion-violation 'visit '"circularity detected" G11039))) (for-each G10753 (G10663 G11039)) (G10699 G11039 (lambda () (assertion-violation 'invoke '"first visit did not return" G11039))) (G11041) (G10699 G11039 '#t)) (void))) (G10671 G11039)))) (set! G10757 (lambda (G11043) (G10753 (G10743 G11043)))) (set! G10759 (lambda G11053 ((lambda (G11054) (if (= G11054 '1) (apply (lambda (G11045) ((letrec ((G11047 (lambda (G11049) (if (null? G11049) '() (if ((lambda (G11051) (if G11051 G11051 (begin '#f (G10679 (car G11049))))) G11045) (cons (car G11049) (G11047 (cdr G11049))) (G11047 (cdr G11049))))))) G11047) ((G10636)))) G11053) (if (= G11054 '0) (apply (lambda () (G10759 '#f)) G11053) (error 'apply '"invalid arg count")))) (length G11053)))) (set! G10761 (lambda (G11055) (begin (if (G10651 G11055) (void) (assertion-violation 'library-spec '"not a library" G11055)) (list (G10655 G11055) (G10657 G11055) (G10659 G11055))))) (begin (set! G11117 G10761) (set! G11116 G10759) (set! G11115 G10757) (set! G11114 G10755) (set! G11113 G10753) (set! G11112 G10751) (set! G11111 G10749) (set! G11110 G10747) (set! G11109 G10745) (set! G11108 G10743) (set! G11107 G10741) (set! G11106 G10739) (set! G11105 G10737) (set! G11104 G10735) (set! G11103 G10733) (set! G11102 G10731) (set! G11101 G10729) (set! G11100 G10727) (set! G11099 G10725) (set! G11098 G10723) (set! G11097 G10721) (set! G11096 G10719) (set! G11095 G10717) (set! G11094 G10715) (set! G11093 G10713) (set! G11092 G10711) (set! G11091 G10709) (set! G11090 G10707) (set! G11089 G10705) (set! G11088 G10703) (set! G11087 G10701) (set! G11086 G10699) (set! G11085 G10697) (set! G11084 G10695) (set! G11083 G10693) (set! G11082 G10691) (set! G11081 G10689) (set! G11080 G10687) (set! G11079 G10685) (set! G11078 G10683) (set! G11077 G10681) (set! G11076 G10679) (set! G11075 G10677) (set! G11074 G10675) (set! G11073 G10673) (set! G11072 G10671) (set! G11071 G10669) (set! G11070 G10667) (set! G11069 G10665) (set! G11068 G10663) (set! G11067 G10661) (set! G11066 G10659) (set! G11065 G10657) (set! G11064 G10655) (set! G11063 G10653) (set! G11062 G10651) (set! G11061 G10646) (set! G11060 G10644) (set! G11059 G10642) (set! G11058 G10636) (set! G11057 G10634)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G11457 '#f) (define G11458 '#f) (define G11459 '#f) (define G11460 '#f) (define G11461 '#f) (define G11462 '#f) (define G11463 '#f) (define G11464 '#f) (define G11465 '#f) ((lambda (G11120 G11252 G11254 G11256 G11328 G11330 G11332 G11334 G11336) (begin (set! G11120 (lambda (G11337) (cons 'define (cons G11337 '('#f))))) (set! G11252 (lambda (G11339 G11340 G11341) (list 'lambda G11340 G11341))) (set! G11254 (lambda (G11345 G11346 G11347) ((lambda (G11352 G11354 G11356 G11358) (begin (set! G11352 (lambda (G11405) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G11354 (lambda (G11383 G11384 G11385) (call-with-values (lambda () ((letrec ((G11391 (lambda (G11393 G11394) (if (pair? G11393) (G11391 (cdr G11393) (+ G11394 '1)) (if (null? G11393) (values G11394 '=) (values G11394 '>=)))))) G11391) G11385 '0)) (lambda (G11397 G11398) ((lambda (G11401 G11402) (list (list 'primitive G11401) G11384 (list 'quote G11402))) G11398 G11397))))) (set! G11356 (lambda (G11375 G11376 G11377 G11378) (list '(primitive apply) (G11252 G11375 G11377 G11378) G11376))) (set! G11358 (lambda (G11359 G11360 G11361) ((lambda (G11365 G11366) (list 'lambda G11365 (G11256 G11359 (list G11366) (list (list '(primitive length) G11365)) ((letrec ((G11369 (lambda (G11371 G11372) (if (null? G11371) (G11352 G11359) (list 'if (G11354 G11359 G11366 (car G11371)) (G11356 G11359 G11365 (car G11371) (car G11372)) (G11369 (cdr G11371) (cdr G11372))))))) G11369) G11346 G11361)))) (gensym) (gensym)))) (if (= (length G11347) '1) (G11252 G11345 (car G11346) (car G11347)) (G11358 G11345 G11346 G11347)))) '#f '#f '#f '#f))) (set! G11256 (lambda (G11407 G11408 G11409 G11410) (cons (G11252 G11407 G11408 G11410) G11409))) (set! G11328 (lambda (G11415 G11416) ((letrec ((G11419 (lambda (G11421) (if (null? (cdr G11421)) (car G11421) (if (equal? (car G11421) (G11330)) (G11419 (cdr G11421)) (cons 'begin G11421)))))) G11419) G11416))) (set! G11330 (lambda () '((primitive void)))) (set! G11332 (lambda (G11423 G11424 G11425 G11426) (if (null? G11424) G11426 (list 'letrec (map list G11424 G11425) G11426)))) (set! G11334 (lambda (G11431 G11432 G11433 G11434) (if (null? G11432) G11434 (G11256 G11431 G11432 (map (lambda (G11439) (list 'quote '#f)) G11432) (G11328 G11431 (append (map (lambda (G11441 G11442) (list 'set! G11441 G11442)) G11432 G11433) (list G11434))))))) (set! G11336 (lambda (G11445 G11446 G11447 G11448 G11449 G11450) (list 'library-letrec* G11446 (map list G11447 G11448 G11449) G11450))) (begin (set! G11465 G11336) (set! G11464 G11334) (set! G11463 G11332) (set! G11462 G11330) (set! G11461 G11328) (set! G11460 G11256) (set! G11459 G11254) (set! G11458 G11252) (set! G11457 G11120)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G18559 '#f) (define G18560 '#f) (define G18561 '#f) (define G18562 '#f) (define G18563 '#f) (define G18564 '#f) (define G18565 '#f) (define G18566 '#f) (define G18567 '#f) (define G18568 '#f) (define G18569 '#f) (define G18570 '#f) (define G18571 '#f) (define G18572 '#f) (define G18573 '#f) (define G18574 '#f) (define G18575 '#f) (define G18576 '#f) (define G18577 '#f) (define G18578 '#f) (define G18579 '#f) (define G18580 '#f) (define G18581 '#f) (define G18582 '#f) (define G18583 '#f) (define G18584 '#f) (define G18585 '#f) (define G18586 '#f) (define G18587 '#f) (define G18588 '#f) (define G18589 '#f) (define G18590 '#f) (define G18591 '#f) (define G18592 '#f) (define G18593 '#f) (define G18594 '#f) (define G18595 '#f) (define G18596 '#f) (define G18597 '#f) (define G18598 '#f) (define G18599 '#f) (define G18600 '#f) (define G18601 '#f) (define G18602 '#f) (define G18603 '#f) (define G18604 '#f) (define G18605 '#f) (define G18606 '#f) (define G18607 '#f) (define G18608 '#f) (define G18609 '#f) (define G18610 '#f) (define G18611 '#f) (define G18612 '#f) (define G18613 '#f) (define G18614 '#f) (define G18615 '#f) (define G18616 '#f) (define G18617 '#f) (define G18618 '#f) (define G18619 '#f) (define G18620 '#f) (define G18621 '#f) (define G18622 '#f) (define G18623 '#f) (define G18624 '#f) (define G18625 '#f) (define G18626 '#f) (define G18627 '#f) (define G18628 '#f) (define G18629 '#f) (define G18630 '#f) (define G18631 '#f) (define G18632 '#f) (define G18633 '#f) (define G18634 '#f) (define G18635 '#f) (define G18636 '#f) (define G18637 '#f) (define G18638 '#f) (define G18639 '#f) (define G18640 '#f) (define G18641 '#f) (define G18642 '#f) (define G18643 '#f) (define G18644 '#f) (define G18645 '#f) (define G18646 '#f) (define G18647 '#f) (define G18648 '#f) (define G18649 '#f) (define G18650 '#f) (define G18651 '#f) (define G18652 '#f) (define G18653 '#f) (define G18654 '#f) (define G18655 '#f) (define G18656 '#f) (define G18657 '#f) (define G18658 '#f) (define G18659 '#f) (define G18660 '#f) (define G18661 '#f) (define G18662 '#f) (define G18663 '#f) (define G18664 '#f) (define G18665 '#f) (define G18666 '#f) (define G18667 '#f) (define G18668 '#f) (define G18669 '#f) (define G18670 '#f) (define G18671 '#f) (define G18672 '#f) (define G18673 '#f) (define G18674 '#f) (define G18675 '#f) (define G18676 '#f) (define G18677 '#f) (define G18678 '#f) (define G18679 '#f) (define G18680 '#f) (define G18681 '#f) (define G18682 '#f) (define G18683 '#f) (define G18684 '#f) (define G18685 '#f) (define G18686 '#f) (define G18687 '#f) (define G18688 '#f) (define G18689 '#f) (define G18690 '#f) (define G18691 '#f) (define G18692 '#f) (define G18693 '#f) (define G18694 '#f) (define G18695 '#f) (define G18696 '#f) (define G18697 '#f) (define G18698 '#f) (define G18699 '#f) (define G18700 '#f) (define G18701 '#f) (define G18702 '#f) (define G18703 '#f) (define G18704 '#f) (define G18705 '#f) (define G18706 '#f) (define G18707 '#f) (define G18708 '#f) (define G18709 '#f) (define G18710 '#f) (define G18711 '#f) (define G18712 '#f) (define G18713 '#f) (define G18714 '#f) (define G18715 '#f) (define G18716 '#f) (define G18717 '#f) (define G18718 '#f) (define G18719 '#f) (define G18720 '#f) (define G18721 '#f) (define G18722 '#f) (define G18723 '#f) (define G18724 '#f) (define G18725 '#f) (define G18726 '#f) (define G18727 '#f) (define G18728 '#f) (define G18729 '#f) (define G18730 '#f) (define G18731 '#f) (define G18732 '#f) (define G18733 '#f) (define G18734 '#f) (define G18735 '#f) (define G18736 '#f) (define G18737 '#f) (define G18738 '#f) (define G18739 '#f) (define G18740 '#f) (define G18741 '#f) (define G18742 '#f) (define G18743 '#f) (define G18744 '#f) (define G18745 '#f) (define G18746 '#f) (define G18747 '#f) (define G18748 '#f) (define G18749 '#f) (define G18750 '#f) (define G18751 '#f) (define G18752 '#f) (define G18753 '#f) (define G18754 '#f) (define G18755 '#f) (define G18756 '#f) (define G18757 '#f) (define G18758 '#f) (define G18759 '#f) (define G18760 '#f) (define G18761 '#f) (define G18762 '#f) (define G18763 '#f) (define G18764 '#f) (define G18765 '#f) (define G18766 '#f) (define G18767 '#f) (define G18768 '#f) (define G18769 '#f) (define G18770 '#f) (define G18771 '#f) (define G18772 '#f) (define G18773 '#f) (define G18774 '#f) (define G18775 '#f) (define G18776 '#f) (define G18777 '#f) (define G18778 '#f) (define G18779 '#f) (define G18780 '#f) (define G18781 '#f) (define G18782 '#f) (define G18783 '#f) (define G18784 '#f) (define G18785 '#f) (define G18786 '#f) (define G18787 '#f) (define G18788 '#f) (define G18789 '#f) (define G18790 '#f) (define G18791 '#f) (define G18792 '#f) (define G18793 '#f) (define G18794 '#f) (define G18795 '#f) (define G18796 '#f) (define G18797 '#f) (define G18798 '#f) (define G18799 '#f) (define G18800 '#f) (define G18801 '#f) (define G18802 '#f) (define G18803 '#f) (define G18804 '#f) (define G18805 '#f) (define G18806 '#f) (define G18807 '#f) (define G18808 '#f) (define G18809 '#f) (define G18810 '#f) (define G18811 '#f) (define G18812 '#f) (define G18813 '#f) (define G18814 '#f) (define G18815 '#f) (define G18816 '#f) (define G18817 '#f) (define G18818 '#f) ((lambdabegin (set! G11478 (lambda (G12442 G12443) (if (memq G12442 G12443) G12443 (cons G12442 G12443)))) (set! G11480 (lambda (G12446 G12447) (if (null? G12446) G12447 (if (memq (car G12446) G12447) (G11480 (cdr G12446) G12447) (cons (car G12446) (G11480 (cdr G12446) G12447)))))) (set! G11485 '(top)) (set! G11487 (lambda (G12450) (memq 'top G12450))) (set! G11489 (lambda (G12452) (if (symbol? G12452) (gensym G12452) (if (G11559 G12452) (G11489 (G11617 G12452)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G12452))))) (set! G11491 (lambda (G12454) (G11489 G12454))) (set! G11493 (lambda (G12456) (gensym))) (set! G11495 (lambda (G12458 G12459) ((lambda (G12463) (begin (set! G12463 (lambda (G12474 G12475 G12476 G12477 G12478) (if (pair? G12476) (begin '#f (if (if (eq? G12474 (car G12476)) (begin '#f (G11619 G12475 (car G12477))) '#f) (car G12478) (G12463 G12474 G12475 (cdr G12476) (cdr G12477) (cdr G12478)))) '#f))) ((lambda (G12464 G12465) ((lambda (G12468) ((lambda (G12470) (if G12470 ((lambda (G12472) (if (G11112 G12472) (gensym) G12472)) G12470) (gensym))) (if (memq G12464 (G11518 G12459)) (begin '#f (G12463 G12464 G12465 G12468 (G11520 G12459) (G11522 G12459))) '#f))) (G11518 G12459))) (G11617 G12458) (G11565 G12458)))) '#f))) (set! G11497 (lambda (G12484 G12485) ((lambda (G12488) (if G12488 ((lambda (G12490) ((lambda (G12492 G12493) (values G12492 ((lambda (G12496) (if G12496 (cdr G12496) ((lambda (G12498) (begin (G12381 G12490 (cons (cons G12492 G12498) G12493)) G12498)) (G11489 G12484)))) (assq G12492 G12493)))) (G11495 G12484 G12485) (G12375 G12490))) G12488) (values (gensym) (G11489 G12484)))) (G12441)))) (set! G11499 (lambda (G12500 G12501) (if (G12441) (G11495 G12500 G12501) (gensym)))) (set! G11505 (make-record-type-descriptor 'rib '#f 'G11503 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! G11507 '#f) (set! G11509 (make-record-constructor-descriptor G11505 '#f G11507)) (set! G11514 (record-predicate G11505)) (set! G11516 (record-constructor G11509)) (set! G11518 (record-accessor G11505 '0)) (set! G11520 (record-accessor G11505 '1)) (set! G11522 (record-accessor G11505 '2)) (set! G11524 (record-accessor G11505 '3)) (set! G11526 (record-mutator G11505 '0)) (set! G11528 (record-mutator G11505 '1)) (set! G11530 (record-mutator G11505 '2)) (set! G11532 (record-mutator G11505 '3)) (set! G11534 (lambda () (G11516 '() '() '() '#f))) (set! G11536 (lambda (G12504 G12505 G12506) ((lambda (G12511) (begin (set! G12511 (lambda (G12522 G12523 G12524 G12525 G12526) (if (pair? G12524) (begin '#f (if (if (eq? G12522 (car G12524)) (begin '#f (G11619 G12523 (car G12525))) '#f) G12526 (G12511 G12522 G12523 (cdr G12524) (cdr G12525) (cdr G12526)))) '#f))) (begin (if (G11524 G12504) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G12504) (void)) ((lambda (G12512 G12513) ((lambda (G12516) ((lambda (G12518) (if G12518 ((lambda (G12520) (if (eq? G12506 (car G12520)) (void) (if (G12441) (set-car! G12520 G12506) (G12427 '#f '"cannot redefine" G12505)))) G12518) (begin (G11526 G12504 (cons G12512 G12516)) (G11528 G12504 (cons G12513 (G11520 G12504))) (G11530 G12504 (cons G12506 (G11522 G12504)))))) (if (memq G12512 (G11518 G12504)) (begin '#f (G12511 G12512 G12513 G12516 (G11520 G12504) (G11522 G12504))) '#f))) (G11518 G12504))) (G11617 G12505) (G11565 G12505))))) '#f))) (set! G11538 (lambda (G12532) ((lambda (G12534) ((letrec ((G12536 (lambda (G12538 G12539) (if (null? G12539) G12534 (begin (hashtable-update! G12534 (car G12539) (lambda (G12542) (cons G12538 G12542)) '()) (G12536 (+ G12538 '1) (cdr G12539))))))) G12536) '0 G12532)) (make-eq-hashtable)))) (set! G11540 (lambda (G12544) ((lambda (G12546) (if (null? G12546) (void) (begin (G11526 G12544 (list->vector G12546)) (G11528 G12544 (list->vector (G11520 G12544))) (G11530 G12544 (list->vector (G11522 G12544))) (G11532 G12544 (G11538 G12546))))) (G11518 G12544)))) (set! G11542 (lambda (G12548) (if (G11524 G12548) (begin (G11532 G12548 '#f) (G11526 G12548 (vector->list (G11518 G12548))) (G11528 G12548 (vector->list (G11520 G12548))) (G11530 G12548 (vector->list (G11522 G12548)))) (void)))) (set! G11544 (lambda (G12550 G12551) ((lambda (G12554) (begin (G11540 G12554) G12554)) (G11516 (map G11617 G12550) (map G11565 G12550) G12551 '#f)))) (set! G11550 (make-record-type-descriptor 'stx '#f 'G11548 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G11552 '#f) (set! G11554 (make-record-constructor-descriptor G11550 '#f G11552)) (set! G11559 (record-predicate G11550)) (set! G11561 (record-constructor G11554)) (set! G11563 (record-accessor G11550 '0)) (set! G11565 (record-accessor G11550 '1)) (set! G11567 (record-accessor G11550 '2)) (set! G11569 (record-accessor G11550 '3)) (set! G11571 (record-mutator G11550 '0)) (set! G11573 (record-mutator G11550 '1)) (set! G11575 (record-mutator G11550 '2)) (set! G11577 (record-mutator G11550 '3)) (set! G11579 (G10439 'stx (lambda (G12556 G12557) (begin (display '"#<syntax " G12557) (write (G11637 G12556) G12557) ((lambda (G12560) (if (G10434 G12560) ((lambda (G12562) (if (pair? G12562) (begin (display '" [" G12557) (display (cdr G12562) G12557) (display '" of " G12557) (display (car G12562) G12557) (display '"]" G12557)) (void))) (G10435 G12560)) (void))) (G11563 G12556)) (display '">" G12557))))) (set! G11581 (lambda (G12564 G12565) (G11561 G12565 (G11565 G12564) (G11567 G12564) (G11569 G12564)))) (set! G11583 (lambda () (string '#\m))) (set! G11585 '#f) (set! G11587 not) (set! G11589 (lambda (G12568 G12569 G12570 G12571) ((lambda (G12577) (begin (set! G12577 (lambda (G12584 G12585) ((letrec ((G12588 (lambda (G12590 G12591) (if (null? G12591) (cdr G12585) (cons G12590 (G12588 (car G12591) (cdr G12591))))))) G12588) (car G12584) (cdr G12584)))) ((lambda (G12578 G12579 G12580) (if (if (not (null? G12568)) (if (not (null? G12578)) (begin '#f (G11587 (car G12578))) '#f) '#f) (values (G12577 G12568 G12578) (G12577 G12569 G12579) (G12577 G12570 G12580)) (values (append G12568 G12578) (append G12569 G12579) (append G12570 G12580)))) (G11565 G12571) (G11567 G12571) (G11569 G12571)))) '#f))) (set! G11591 (lambda (G12594 G12595 G12596 G12597) (if (G11559 G12594) (call-with-values (lambda () (G11589 G12595 G12596 G12597 G12594)) (lambda (G12605 G12606 G12607) ((lambda (G12611 G12612 G12613) (G11561 (G11563 G12594) G12613 G12612 G12611)) G12607 G12606 G12605))) (G11561 G12594 G12595 G12596 G12597)))) (set! G11593 (lambda (G12617 G12618 G12619) (G11591 G12618 (list G12617) '(shift) (list G12619)))) (set! G11595 (lambda (G12623 G12624) (G11591 G12624 '() (list G12623) '()))) (set! G11597 (lambda (G12627 G12628) (if (G11559 G12627) (G11597 (G11563 G12627) G12628) (if (G10434 G12627) (G11597 (G10436 G12627) G12628) (G12628 G12627))))) (set! G11599 (lambda (G12631) (if (G11559 G12631) ((lambda (G12633 G12634 G12635 G12636) (map (lambda (G12641) (G11591 G12641 G12634 G12635 G12636)) G12633)) (G11599 (G11563 G12631)) (G11565 G12631) (G11567 G12631) (G11569 G12631)) (if (G10434 G12631) (G11599 (G10436 G12631)) (if (vector? G12631) (vector->list G12631) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G12631)))))) (set! G11601 (lambda (G12643) (G11597 G12643 pair?))) (set! G11603 (lambda (G12645) (G11597 G12645 vector?))) (set! G11605 (lambda (G12647) (G11597 G12647 null?))) (set! G11607 (lambda (G12649) ((lambda (G12651) (if G12651 G12651 (begin '#f (if (G11601 G12649) (begin '#f (G11607 (G11611 G12649))) '#f)))) (G11605 G12649)))) (set! G11609 (lambda (G12653) (if (G11559 G12653) (G11591 (G11609 (G11563 G12653)) (G11565 G12653) (G11567 G12653) (G11569 G12653)) (if (G10434 G12653) (G11609 (G10436 G12653)) (if (pair? G12653) (car G12653) (assertion-violation 'syntax-car '"BUG: not a pair" G12653)))))) (set! G11611 (lambda (G12655) (if (G11559 G12655) (G11591 (G11611 (G11563 G12655)) (G11565 G12655) (G11567 G12655) (G11569 G12655)) (if (G10434 G12655) (G11611 (G10436 G12655)) (if (pair? G12655) (cdr G12655) (assertion-violation 'syntax-cdr '"BUG: not a pair" G12655)))))) (set! G11613 (lambda (G12657) (if (G11601 G12657) (cons (G11609 G12657) (G11613 (G11611 G12657))) (if (G11605 G12657) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G12657))))) (set! G11615 (lambda (G12659) (if (G11559 G12659) (begin '#f ((lambda (G12661) (symbol? (if (G10434 G12661) (G10433 G12661) G12661))) (G11563 G12659))) '#f))) (set! G11617 (lambda (G12663) (begin (if (G11559 G12663) (void) (error 'id->sym '"BUG in ikarus: not an id" G12663)) ((lambda (G12665) ((lambda (G12667) (if (symbol? G12667) G12667 (error 'id->sym '"BUG in ikarus: not an id" G12663))) (if (G10434 G12665) (G10433 G12665) G12665))) (G11563 G12663))))) (set! G11619 (lambda (G12669 G12670) ((lambda (G12673) (if G12673 G12673 (begin '#f (if (pair? G12669) (if (pair? G12670) (if (eq? (car G12669) (car G12670)) (begin '#f (G11619 (cdr G12669) (cdr G12670))) '#f) '#f) '#f)))) (if (null? G12669) (begin '#f (null? G12670)) '#f)))) (set! G11621 (lambda (G12675 G12676) (if (eq? (G11617 G12675) (G11617 G12676)) (begin '#f (G11619 (G11565 G12675) (G11565 G12676))) '#f))) (set! G11623 (lambda (G12679 G12680) ((lambda (G12683 G12684) (if ((lambda (G12687) (if G12687 G12687 (begin '#f G12684))) G12683) (eq? G12683 G12684) (eq? (G11617 G12679) (G11617 G12680)))) (G11643 G12679) (G11643 G12680)))) (set! G11625 (lambda (G12689) (if (for-all G11615 G12689) (begin '#f (G11627 G12689)) '#f))) (set! G11627 (lambda (G12691) ((lambda (G12693) (if G12693 G12693 (begin '#f (if (not (G11629 (car G12691) (cdr G12691))) (begin '#f (G11627 (cdr G12691))) '#f)))) (null? G12691)))) (set! G11629 (lambda (G12695 G12696) (if (pair? G12696) (begin '#f ((lambda (G12699) (if G12699 G12699 (begin '#f (G11629 G12695 (cdr G12696))))) (G11621 G12695 (car G12696)))) '#f))) (set! G11631 (lambda (G12701) ((lambda (G12703) (if G12703 G12703 ((lambda (G12705) (if G12705 G12705 ((lambda (G12707) (if G12707 G12707 ((lambda (G12709) (if G12709 G12709 (begin '#f (bytevector? G12701)))) (boolean? G12701)))) (char? G12701)))) (string? G12701)))) (number? G12701)))) (set! G11633 (lambda (G12711) (if (pair? G12711) (cons (G11633 (car G12711)) (G11633 (cdr G12711))) (if (vector? G12711) (vector-map G11633 G12711) (if (G10434 G12711) (G10433 G12711) G12711))))) (set! G11635 (lambda (G12713 G12714) (if (G11487 G12714) (if ((lambda (G12717) (if G12717 G12717 ((lambda (G12719) (if G12719 G12719 (begin '#f (if (vector? G12713) (if (> (vector-length G12713) '0) (begin '#f (G10434 (vector-ref G12713 '0))) '#f) '#f)))) (if (pair? G12713) (begin '#f (G10434 (car G12713))) '#f)))) (G10434 G12713)) (G11633 G12713) G12713) ((letrec ((G12721 (lambda (G12723) (if (G11559 G12723) (G11635 (G11563 G12723) (G11565 G12723)) (if (G10434 G12723) (G10433 G12723) (if (pair? G12723) ((lambda (G12725 G12726) (if (if (eq? G12725 (car G12723)) (begin '#f (eq? G12726 (cdr G12723))) '#f) G12723 (cons G12725 G12726))) (G12721 (car G12723)) (G12721 (cdr G12723))) (if (vector? G12723) ((lambda (G12729) ((lambda (G12731) (if (for-all eq? G12729 G12731) G12723 (list->vector G12731))) (map G12721 G12729))) (vector->list G12723)) G12723))))))) G12721) G12713)))) (set! G11637 (lambda (G12733) (G11635 G12733 '()))) (set! G11639 (lambda (G12735 G12736 G12737) (if (null? G12737) '#f (if (G11619 G12735 (vector-ref G12736 (car G12737))) (car G12737) (G11639 G12735 G12736 (cdr G12737)))))) (set! G11641 (lambda (G12741) ((lambda (G12743) (if G12743 G12743 (begin '#f ((lambda (G12745) (if G12745 ((lambda (G12747) ((lambda (G12749) (call-with-values (lambda () (G11497 G12741 G12749)) (lambda (G12753 G12754) ((lambda (G12757 G12758) (begin (G11536 G12749 G12741 G12758) G12758)) G12754 G12753)))) (G12371 G12747))) G12745) '#f)) (G12441))))) (G11643 G12741)))) (set! G11643 (lambda (G12761) ((lambda (G12763) ((letrec ((G12765 (lambda (G12767 G12768) (if (null? G12767) '#f (if (eq? (car G12767) 'shift) (G12765 (cdr G12767) (cdr G12768)) ((lambda (G12771) ((lambda (G12773) (if G12773 ((lambda (G12775) ((lambda (G12777) ((lambda (G12779) (if G12779 (vector-ref (G11522 G12771) G12779) (G12765 (cdr G12767) G12768))) (if G12777 (begin '#f (G11639 G12768 (G11520 G12771) (reverse G12777))) '#f))) (hashtable-ref G12775 G12763 '#f))) G12773) ((letrec ((G12781 (lambda (G12783 G12784 G12785) (if (null? G12783) (G12765 (cdr G12767) G12768) (if (if (eq? (car G12783) G12763) (begin '#f (G11619 (car G12784) G12768)) '#f) (car G12785) (G12781 (cdr G12783) (cdr G12784) (cdr G12785))))))) G12781) (G11518 G12771) (G11520 G12771) (G11522 G12771)))) (G11524 G12771))) (car G12767))))))) G12765) (G11567 G12761) (G11565 G12761))) (G11617 G12761)))) (set! G11645 (lambda (G12789 G12790) ((lambda (G12793) (if G12793 ((lambda (G12795) (if (if (pair? G12795) (begin '#f (eq? (car G12795) '$core-rtd)) '#f) (cons '$rtd (map G12120 (cdr G12795))) (if (if (pair? G12795) (begin '#f (eq? (car G12795) 'global-rtd)) '#f) ((lambda (G12797 G12798) (cons '$rtd (symbol-value G12798))) (cadr G12795) (cddr G12795)) G12795))) G12793) ((lambda (G12801) (if G12801 (cdr G12801) ((lambda (G12803) (if G12803 ((lambda (G12805) ((lambda (G12807) (if G12807 ((lambda (G12809) (cons* 'lexical (cdr G12809) '#f)) G12807) '(displaced-lexical . #f))) (assq G12789 (G12375 G12805)))) G12803) '(displaced-lexical . #f))) (G12441)))) (assq G12789 G12790)))) (G11112 G12789)))) (set! G11647 cons) (set! G11649 car) (set! G11651 cdr) (set! G11653 (lambda (G12811) (G12425 '#f '"unbound identifier" G12811 (G19222)))) (set! G11655 (lambda (G12813 G12814) (if (G11615 G12813) ((lambda (G12817) ((lambda (G12819) ((lambda (G12821) ((lambda (G12823) ((lambda () (begin (if G12819 (void) (G11653 G12817)) ((lambda (G12825) (if (memv G12825 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values G12823 (G11651 G12821) G12817) (values 'other '#f '#f))) G12823))))) (G11649 G12821))) (G11645 G12819 G12814))) (G11641 G12817))) G12813) (if (G11601 G12813) ((lambda (G12826) (if (G11615 G12826) ((lambda (G12828) ((lambda (G12830) ((lambda (G12832) ((lambda () (begin (if G12828 (void) (G11653 G12826)) ((lambda (G12834) (if (memv G12834 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values G12832 (G11651 G12830) G12826) (values 'call '#f '#f))) G12832))))) (G11649 G12830))) (G11645 G12828 G12814))) (G11641 G12826)) (values 'call '#f '#f))) (G11609 G12813)) ((lambda (G12835) (if (G11631 G12835) (values 'constant G12835 '#f) (values 'other '#f '#f))) (G11637 G12813)))))) (set! G11678 (lambda (G12837 G12838) (if (procedure? G12837) (cons* 'local-macro G12837 G12838) (if (if (pair? G12837) (if (eq? (car G12837) 'macro!) (begin '#f (procedure? (cdr G12837))) '#f) '#f) (cons* 'local-macro! (cdr G12837) G12838) (if (if (pair? G12837) (begin '#f (eq? (car G12837) '$rtd)) '#f) G12837 (assertion-violation 'expand '"invalid transformer" G12837)))))) (set! G11680 (lambda (G12841) (if (procedure? G12841) (cons 'macro! G12841) (assertion-violation 'make-variable-transformer '"not a procedure" G12841)))) (set! G11682 (lambda (G12843) (if (pair? G12843) (if (eq? (car G12843) 'macro!) (begin '#f (procedure? (cdr G12843))) '#f) '#f))) (set! G11684 (lambda (G12845) (if (G11682 G12845) (cdr G12845) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G12845)))) (set! G11686 (lambda (G12847) (G11678 (eval-core (G10541 G12847)) G12847))) (set! G12074 (lambda (G12849) ((lambda (G12851) ((lambda (G12853) (if (if G12853 (begin '#f (apply (lambda (G12855 G12856 G12857 G12858) (G11615 G12855)) G12853)) '#f) (apply (lambda (G12863 G12864 G12865 G12866) (begin (G12234 G12864 G12849) (values G12863 (cons 'defun (cons G12864 (cons G12865 G12866)))))) G12853) ((lambda (G12871) ((lambda (G12873) (if (if G12873 (begin '#f (apply (lambda (G12875 G12876) (G11615 G12875)) G12873)) '#f) (apply (lambda (G12879 G12880) (values G12879 (cons 'expr G12880))) G12873) ((lambda (G12883) ((lambda (G12885) (if (if G12885 (begin '#f (apply (lambda (G12887) (G11615 G12887)) G12885)) '#f) (apply (lambda (G12889) (values G12889 (cons 'expr (G12120 '(void))))) G12885) (G12427 '#f '"invalid syntax" G12883))) (G12194 G12883 '(_ any)))) G12871))) (G12194 G12871 '(_ any any)))) G12851))) (G12194 G12851 '(_ (any . any) any . each-any)))) G12849))) (set! G12076 (lambda (G12891) ((lambda (G12893) ((lambda (G12895) (if (if G12895 (begin '#f (apply (lambda (G12897 G12898) (G11615 G12897)) G12895)) '#f) (apply (lambda (G12901 G12902) (values G12901 G12902)) G12895) (G12427 '#f '"invalid syntax" G12893))) (G12194 G12893 '(_ any any)))) G12891))) (set! G12078 (make-eq-hashtable)) (set! G12080 (lambda (G12905) ((lambda (G12907) (if G12907 G12907 (begin '#f ((lambda (G12909) ((lambda (G12911) ((lambda (G12913) ((lambda () (begin (hashtable-set! G12078 G12905 G12913) G12913)))) ((lambda (G12915) (if G12915 ((lambda (G12917) ((lambda (G12919 G12920) (G11595 (G11516 (list G12919) (list G11485) (list G12920) '#f) G12911)) (car G12917) (cdr G12917))) G12915) G12911)) (assq G12905 G12909)))) (G11561 G12905 G11485 '() '()))) (G11070 (G11106 '(psyntax system $all))))))) (hashtable-ref G12078 G12905 '#f)))) (set! G12082 car) (set! G12084 cdr) (set! G12086 set-cdr!) (set! G12088 (lambda (G12923 G12924 G12925) (cons (cons* G12923 'lexical G12924 '#f) G12925))) (set! G12090 (lambda (G12929 G12930 G12931) (if (null? G12929) G12931 (G12090 (cdr G12929) (cdr G12930) (G12088 (car G12929) (car G12930) G12931))))) (set! G12092 (lambda (G12935 G12936 G12937 G12938) ((lambda (G12943) ((lambda (G12945) (if G12945 (apply (lambda (G12947 G12948 G12949 G12950) (if (not (G11625 G12947)) (G12124 G12935 G12947) ((lambda (G12955 G12956) ((lambda (G12959 G12960) ((lambda (G12963 G12964) (G12938 '#f G12955 G12964 G12963)) (G12252 (G11595 G12959 (cons G12949 G12950)) G12960 G12937) (G12226 (map (lambda (G12967) (G11595 G12959 G12967)) G12948) G12960 G12937))) (G11544 G12947 G12956) (G12090 G12956 G12955 G12936))) (map G11489 G12947) (map G11493 G12947)))) G12945) (G12427 '#f '"invalid syntax" G12943))) (G12194 G12943 '(_ #(each (any any)) any . each-any)))) G12935))) (set! G12094 (lambda (G12969 G12970 G12971) (G12092 G12969 G12970 G12971 G11463))) (set! G12096 (lambda (G12975 G12976 G12977) (G12092 G12975 G12976 G12977 G11464))) (set! G12098 (lambda (G12981 G12982 G12983) ((lambda (G12988) (begin (set! G12988 (lambda (G13007) ((lambda (G13009) (if G13009 G13009 (begin '#f (G12427 '#f '"unbound identifier" G12981 G13007)))) (G11641 G13007)))) ((lambda (G12989) ((lambda (G12991) (if G12991 (apply (lambda (G12993 G12994 G12995 G12996) (if (not (G11625 G12993)) (G12124 G12981 G12993) ((lambda (G13001 G13002) (G12252 (cons G12995 G12996) (append (map cons G13001 G13002) G12982) (append (map cons G13001 G13002) G12983))) (map G12988 G12993) (map (lambda (G13005) (G11686 (G12291 G13005 G12983))) G12994)))) G12991) (G12427 '#f '"invalid syntax" G12989))) (G12194 G12989 '(_ #(each (any any)) any . each-any)))) G12981))) '#f))) (set! G12100 (lambda (G13011 G13012 G13013) ((lambda (G13017) ((lambda (G13019) (if (if G13019 (begin '#f (apply (lambda (G13021) (G11615 G13021)) G13019)) '#f) (apply (lambda (G13023) ((lambda (G13025) ((lambda (G13027) ((lambda (G13029) ((lambda () (begin (if G13025 (void) (G11653 G13023)) (if (if (eq? G13029 '$rtd) (begin '#f (not (list? (G11651 G13027)))) '#f) (void) (G12427 '#f '"not a record type" G13011)) (list 'quote (G11651 G13027)))))) (G11649 G13027))) (G11645 G13025 G13012))) (G11641 G13023))) G13019) (G12427 '#f '"invalid syntax" G13017))) (G12194 G13017 '(_ any)))) G13011))) (set! G12102 (lambda (G13031 G13032 G13033) ((lambda (G13037) ((lambda (G13039) (if (if G13039 (begin '#f (apply (lambda (G13041) (G11615 G13041)) G13039)) '#f) (apply (lambda (G13043) ((lambda (G13045) ((lambda (G13047) ((lambda (G13049) ((lambda () (begin (if G13045 (void) (G11653 G13043)) (if (if (eq? G13049 '$rtd) (begin '#f (list? (G11651 G13047))) '#f) (void) (G12427 '#f '"not a record type" G13031)) (G12230 (car (G11651 G13047)) G13032 G13033))))) (G11649 G13047))) (G11645 G13045 G13032))) (G11641 G13043))) G13039) (G12427 '#f '"invalid syntax" G13037))) (G12194 G13037 '(_ any)))) G13031))) (set! G12104 (lambda (G13051 G13052 G13053) ((lambda (G13057) ((lambda (G13059) (if (if G13059 (begin '#f (apply (lambda (G13061) (G11615 G13061)) G13059)) '#f) (apply (lambda (G13063) ((lambda (G13065) ((lambda (G13067) ((lambda (G13069) ((lambda () (begin (if G13065 (void) (G11653 G13063)) (if (if (eq? G13069 '$rtd) (begin '#f (list? (G11651 G13067))) '#f) (void) (G12427 '#f '"invalid type" G13051)) (G12230 (cadr (G11651 G13067)) G13052 G13053))))) (G11649 G13067))) (G11645 G13065 G13052))) (G11641 G13063))) G13059) (G12427 '#f '"invalid syntax" G13057))) (G12194 G13057 '(_ any)))) G13051))) (set! G12106 (lambda (G13071 G13072 G13073) ((lambda (G13077) ((lambda (G13079) (if G13079 (apply (lambda (G13081 G13082 G13083) (list 'if (G12230 G13081 G13072 G13073) (G11461 '#f (G12226 (cons G13082 G13083) G13072 G13073)) (G11462))) G13079) (G12427 '#f '"invalid syntax" G13077))) (G12194 G13077 '(_ any any . each-any)))) G13071))) (set! G12108 (lambda (G13087 G13088 G13089) ((lambda (G13093) ((lambda (G13095) (if G13095 (apply (lambda (G13097 G13098 G13099) (list 'if (G12230 G13097 G13088 G13089) (G11462) (G11461 '#f (G12226 (cons G13098 G13099) G13088 G13089)))) G13095) (G12427 '#f '"invalid syntax" G13093))) (G12194 G13093 '(_ any any . each-any)))) G13087))) (set! G12110 (lambda (G13103 G13104 G13105) ((lambda (G13109) ((lambda (G13111) (if G13111 (apply (lambda (G13113 G13114 G13115) (list 'if (G12230 G13113 G13104 G13105) (G12230 G13114 G13104 G13105) (G12230 G13115 G13104 G13105))) G13111) ((lambda (G13119) ((lambda (G13121) (if G13121 (apply (lambda (G13123 G13124) (list 'if (G12230 G13123 G13104 G13105) (G12230 G13124 G13104 G13105) (G11462))) G13121) (G12427 '#f '"invalid syntax" G13119))) (G12194 G13119 '(_ any any)))) G13109))) (G12194 G13109 '(_ any any any)))) G13103))) (set! G12112 (lambda (G13127 G13128 G13129) ((lambda (G13134 G13136) (begin (set! G13134 (lambda (G13191 G13192 G13193) ((lambda (G13197) ((lambda (G13199) (if G13199 (apply (lambda (G13201 G13202 G13203) (list 'if ((lambda (G13207) (if (= '1 (length G13207)) (list '(primitive eqv?) G13191 (list 'quote (car G13207))) (list '(primitive memv) G13191 (list 'quote G13207)))) (G11637 G13201)) (G11461 '#f (G12226 (cons G13202 G13203) G13128 G13129)) G13193)) G13199) ((lambda (G13209) ((lambda (G13211) (if G13211 (apply (lambda (G13213) (G12427 '#f '"invalid syntax" G13127)) G13211) (G12427 '#f '"invalid syntax" G13209))) (G12194 G13209 'any))) G13197))) (G12194 G13197 '(each-any any . each-any)))) G13192))) (set! G13136 (lambda (G13161 G13162) ((lambda (G13165) ((lambda (G13167) (if G13167 (apply (lambda (G13169 G13170 G13171) (G13134 G13161 G13162 (G11462))) G13167) ((lambda (G13175) ((lambda (G13177) (if G13177 (apply (lambda (G13179 G13180 G13181) (if (if (G11615 G13179) (begin '#f (G11623 G13179 (G12080 'else))) '#f) (G11461 '#f (G12226 (cons G13180 G13181) G13128 G13129)) (G12427 '#f '"invalid syntax" G13127))) G13177) ((lambda (G13185) ((lambda (G13187) (if G13187 (apply (lambda (G13189) (G12427 '#f '"invalid syntax" G13127)) G13187) (G12427 '#f '"invalid syntax" G13185))) (G12194 G13185 'any))) G13175))) (G12194 G13175 '(any any . each-any)))) G13165))) (G12194 G13165 '(each-any any . each-any)))) G13162))) ((lambda (G13137) ((lambda (G13139) (if G13139 (apply (lambda (G13141) (G11461 '#f (list (G12230 G13141 G13128 G13129) (G11462)))) G13139) ((lambda (G13143) ((lambda (G13145) (if G13145 (apply (lambda (G13147 G13148 G13149) ((lambda (G13153) (G11460 '#f (list G13153) (list (G12230 G13147 G13128 G13129)) ((letrec ((G13155 (lambda (G13157 G13158) (if (null? G13158) (G13136 G13153 G13157) (G13134 G13153 G13157 (G13155 (car G13158) (cdr G13158))))))) G13155) G13148 G13149))) (G11489 't))) G13145) (G12427 '#f '"invalid syntax" G13143))) (G12194 G13143 '(_ any any . each-any)))) G13137))) (G12194 G13137 '(_ any)))) G13127))) '#f '#f))) (set! G12114 (lambda (G13215 G13216 G13217) ((lambda (G13221) ((lambda (G13223) (if G13223 (apply (lambda (G13225) (list 'quote (G11637 G13225))) G13223) (G12427 '#f '"invalid syntax" G13221))) (G12194 G13221 '(_ any)))) G13215))) (set! G12116 (lambda (G13227 G13228 G13229) ((lambda (G13233) ((lambda (G13235) (if G13235 (apply (lambda (G13237 G13238 G13239) (call-with-values (lambda () (G12238 G13227 G13237 (map cons G13238 G13239) G13228 G13229)) (lambda (G13245 G13246) ((lambda (G13249 G13250) (G11459 '#f G13250 G13249)) G13246 G13245)))) G13235) (G12427 '#f '"invalid syntax" G13233))) (G12194 G13233 '(_ . #(each (any any . each-any)))))) G13227))) (set! G12118 (lambda (G13253 G13254 G13255) ((lambda (G13259) ((lambda (G13261) (if G13261 (apply (lambda (G13263 G13264 G13265) (call-with-values (lambda () (G12236 G13253 G13263 (cons G13264 G13265) G13254 G13255)) (lambda (G13271 G13272) ((lambda (G13275 G13276) (G11458 '#f G13276 G13275)) G13272 G13271)))) G13261) (G12427 '#f '"invalid syntax" G13259))) (G12194 G13259 '(_ any any . each-any)))) G13253))) (set! G12120 (lambda (G13279) (G11591 ((letrec ((G13281 (lambda (G13283) (if (G11559 G13283) G13283 (if (pair? G13283) (cons (G13281 (car G13283)) (G13281 (cdr G13283))) (if (symbol? G13283) (G12080 G13283) (if (vector? G13283) (vector-map G13281 G13283) G13283))))))) G13281) G13279) '() '() '()))) (set! G12122 (lambda (G13285) ((lambda (G13287) ((lambda (G13289) (if G13289 (apply (lambda (G13291 G13292 G13293 G13294) ((lambda (G13299) (begin (G12234 (map car G13299) G13285) ((lambda (G13301) (G12120 (list 'let (map list G13301 G13292) ((letrec ((G13303 (lambda (G13305 G13306) (if (null? G13305) (cons 'begin (cons '#f (cons G13293 G13294))) (list 'syntax-case (car G13306) '() (list (car G13305) (G13303 (cdr G13305) (cdr G13306))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G13305)) (car G13306)))))))) G13303) G13291 G13301)))) (G12413 G13292)))) ((letrec ((G13309 (lambda (G13311) (if (null? G13311) '() (call-with-values (lambda () (G12192 (car G13311) '())) (lambda (G13315 G13316) ((lambda (G13319 G13320) (append G13319 (G13309 (cdr G13311)))) G13316 G13315))))))) G13309) G13291))) G13289) (G12427 '#f '"invalid syntax" G13287))) (G12194 G13287 '(_ #(each (any any)) any . each-any)))) G13285))) (set! G12124 (lambda (G13323 G13324) ((lambda (G13327) ((lambda (G13329) (if G13329 (apply (lambda (G13331 G13332) ((letrec ((G13335 (lambda (G13337) (if (null? G13337) (values) (if (not (G11615 (car G13337))) (G12427 '#f '"not an identifier" G13323 (car G13337)) (begin (G13335 (cdr G13337)) (if (G11629 (car G13337) (cdr G13337)) (G12427 '#f '"duplicate binding" G13323 (car G13337)) (void)))))))) G13335) (if (G11615 G13332) (cons G13332 G13331) (if (G11605 G13332) G13331 (G12427 '#f '"not an identifier" G13323 G13332))))) G13329) ((lambda (G13339) ((lambda (G13341) (if G13341 (apply (lambda () (G12427 '#f '"malformed binding form" G13323 G13324)) G13341) (G12427 '#f '"invalid syntax" G13339))) (G12194 G13339 '_))) G13327))) (G12194 G13327 '#(each+ any () any)))) G13324))) (set! G12126 (lambda (G13343) ((lambda (G13345) ((lambda (G13347) (if G13347 (apply (lambda (G13349 G13350 G13351 G13352) (if (G11625 G13349) (G12120 (cons (cons 'lambda (cons G13349 (cons G13351 G13352))) G13350)) (G12124 G13343 G13349))) G13347) ((lambda (G13357) ((lambda (G13359) (if (if G13359 (begin '#f (apply (lambda (G13361 G13362 G13363 G13364 G13365) (G11615 G13361)) G13359)) '#f) (apply (lambda (G13371 G13372 G13373 G13374 G13375) (if (G11625 G13372) (G12120 (cons (list 'letrec (list (list G13371 (cons 'lambda (cons G13372 (cons G13374 G13375))))) G13371) G13373)) (G12124 G13343 G13372))) G13359) (G12427 '#f '"invalid syntax" G13357))) (G12194 G13357 '(_ any #(each (any any)) any . each-any)))) G13345))) (G12194 G13345 '(_ #(each (any any)) any . each-any)))) G13343))) (set! G12128 (lambda (G13381) ((lambda (G13384 G13386) (begin (set! G13384 (lambda (G13482 G13483 G13484) (begin (if (G11615 G13482) (void) (G12427 '#f '"not an indentifier" G13381 G13482)) (if (G11629 G13482 G13483) (G12427 '#f '"duplicate binding" G13381 G13482) (void)) ((lambda (G13488) (values G13488 (cons G13482 G13483) (cons G13488 G13484))) (gensym (G12433 G13482)))))) (set! G13386 (lambda (G13464 G13465 G13466) (if (null? G13464) (values '() G13465 G13466) (call-with-values (lambda () (G13384 (car G13464) G13465 G13466)) (lambda (G13470 G13471 G13472) (call-with-values (lambda () (G13386 (cdr G13464) G13471 G13472)) (lambda (G13476 G13477 G13478) (values (cons G13470 G13476) G13477 G13478)))))))) ((lambda (G13387) ((lambda (G13389) (if G13389 (apply (lambda (G13391 G13392) (cons* (G12120 'let) '() G13391 G13392)) G13389) ((lambda (G13395) ((lambda (G13397) (if G13397 (apply (lambda (G13399 G13400 G13401 G13402) (G12120 ((letrec ((G13407 (lambda (G13409 G13410 G13411 G13412) (if (null? G13409) (cons 'let (cons (map list G13411 G13412) (cons G13401 G13402))) ((lambda (G13417) ((lambda (G13419) (if G13419 (apply (lambda (G13421) (call-with-values (lambda () (G13386 G13421 G13411 G13412)) (lambda (G13426 G13427 G13428) ((lambda (G13432 G13433 G13434) (list 'call-with-values (list 'lambda '() (car G13410)) (list 'lambda G13434 (G13407 (cdr G13409) (cdr G13410) G13433 G13432)))) G13428 G13427 G13426)))) G13419) ((lambda (G13438) ((lambda (G13440) (if G13440 (apply (lambda (G13442 G13443) (call-with-values (lambda () (G13384 G13443 G13411 G13412)) (lambda (G13446 G13447 G13448) (call-with-values (lambda () (G13386 G13442 G13447 G13448)) (lambda (G13452 G13453 G13454) (list 'call-with-values (list 'lambda '() (car G13410)) (list 'lambda (append G13452 G13446) (G13407 (cdr G13409) (cdr G13410) G13453 G13454)))))))) G13440) ((lambda (G13458) ((lambda (G13460) (if G13460 (apply (lambda (G13462) (G12427 '#f '"malformed bindings" G13381 G13462)) G13460) (G12427 '#f '"invalid syntax" G13458))) (G12194 G13458 'any))) G13438))) (G12194 G13438 '#(each+ any () any)))) G13417))) (G12194 G13417 'each-any))) (car G13409)))))) G13407) G13399 G13400 '() '()))) G13397) (G12427 '#f '"invalid syntax" G13395))) (G12194 G13395 '(_ #(each (any any)) any . each-any)))) G13387))) (G12194 G13387 '(_ () any . each-any)))) G13381))) '#f '#f))) (set! G12130 (lambda (G13490) ((lambda (G13493) (begin (set! G13493 (lambda (G13540) (if (null? G13540) (void) ((lambda (G13542) (begin (if (G11615 G13542) (void) (G12427 '#f '"not an identifier" G13490 G13542)) (G13493 (cdr G13540)) (if (G11629 G13542 (cdr G13540)) (G12427 '#f '"duplicate identifier" G13490 G13542) (void)))) (car G13540))))) ((lambda (G13494) ((lambda (G13496) (if G13496 (apply (lambda (G13498 G13499) (cons* (G12120 'let) '() G13498 G13499)) G13496) ((lambda (G13502) ((lambda (G13504) (if G13504 (apply (lambda (G13506 G13507 G13508 G13509) (G12120 ((letrec ((G13514 (lambda (G13516 G13517) (if (null? G13516) (cons 'begin (cons G13508 G13509)) ((lambda (G13520) ((lambda (G13522) (if G13522 (apply (lambda (G13524) (begin (G13493 G13524) (list 'call-with-values (list 'lambda '() (car G13517)) (list 'lambda G13524 (G13514 (cdr G13516) (cdr G13517)))))) G13522) ((lambda (G13526) ((lambda (G13528) (if G13528 (apply (lambda (G13530 G13531) (begin (G13493 (cons G13531 G13530)) (list 'call-with-values (list 'lambda '() (car G13517)) (list 'lambda (append G13530 G13531) (G13514 (cdr G13516) (cdr G13517)))))) G13528) ((lambda (G13534) ((lambda (G13536) (if G13536 (apply (lambda (G13538) (G12427 '#f '"malformed bindings" G13490 G13538)) G13536) (G12427 '#f '"invalid syntax" G13534))) (G12194 G13534 'any))) G13526))) (G12194 G13526 '#(each+ any () any)))) G13520))) (G12194 G13520 'each-any))) (car G13516)))))) G13514) G13506 G13507))) G13504) (G12427 '#f '"invalid syntax" G13502))) (G12194 G13502 '(_ #(each (any any)) any . each-any)))) G13494))) (G12194 G13494 '(_ () any . each-any)))) G13490))) '#f))) (set! G12132 (lambda (G13544) ((lambda (G13546) ((lambda (G13548) (if G13548 (apply (lambda (G13550 G13551 G13552 G13553) (if (G11625 G13551) (G12120 (list 'make-traced-procedure (list 'quote G13550) (cons 'lambda (cons G13551 (cons G13552 G13553))))) (G12124 G13544 G13551))) G13548) ((lambda (G13558) ((lambda (G13560) (if G13560 (apply (lambda (G13562 G13563 G13564 G13565 G13566) (if (G11625 (cons G13564 G13563)) (G12120 (list 'make-traced-procedure (list 'quote G13562) (cons 'lambda (cons (append G13563 G13564) (cons G13565 G13566))))) (G12124 G13544 (append G13563 G13564)))) G13560) (G12427 '#f '"invalid syntax" G13558))) (G12194 G13558 '(_ any #(each+ any () any) any . each-any)))) G13546))) (G12194 G13546 '(_ any each-any any . each-any)))) G13544))) (set! G12134 (lambda (G13572) ((lambda (G13574) ((lambda (G13576) (if G13576 (apply (lambda (G13578 G13579 G13580 G13581) (if (G11625 G13579) (G12120 (list 'define G13578 (list 'make-traced-procedure (list 'quote G13578) (cons 'lambda (cons G13579 (cons G13580 G13581)))))) (G12124 G13572 G13579))) G13576) ((lambda (G13586) ((lambda (G13588) (if G13588 (apply (lambda (G13590 G13591 G13592 G13593 G13594) (if (G11625 (cons G13592 G13591)) (G12120 (list 'define G13590 (list 'make-traced-procedure (list 'quote G13590) (cons 'lambda (cons (append G13591 G13592) (cons G13593 G13594)))))) (G12124 G13572 (append G13591 G13592)))) G13588) ((lambda (G13600) ((lambda (G13602) (if G13602 (apply (lambda (G13604 G13605) (if (G11615 G13604) (G12120 (list 'define G13604 (list 'let (list (list 'v G13605)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G13604) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G12427 '#f '"invalid name" G13572))) G13602) (G12427 '#f '"invalid syntax" G13600))) (G12194 G13600 '(_ any any)))) G13586))) (G12194 G13586 '(_ (any . #(each+ any () any)) any . each-any)))) G13574))) (G12194 G13574 '(_ (any . each-any) any . each-any)))) G13572))) (set! G12136 (lambda (G13608) ((lambda (G13610) ((lambda (G13612) (if G13612 (apply (lambda (G13614 G13615) (if (G11615 G13614) (G12120 (list 'define-syntax G13614 (list 'make-traced-macro (list 'quote G13614) G13615))) (G12427 '#f '"invalid name" G13608))) G13612) (G12427 '#f '"invalid syntax" G13610))) (G12194 G13610 '(_ any any)))) G13608))) (set! G12138 (lambda (G13618) (lambda (G13620) ((lambda (G13622) ((lambda (G13624) (if G13624 (apply (lambda (G13626 G13627 G13628 G13629) (if (G11625 G13626) ((lambda (G13634) (G12120 (cons G13618 (cons (map list G13626 G13634) (cons G13628 G13629))))) (map (lambda (G13636 G13637) (list 'make-traced-macro (list 'quote G13636) G13637)) G13626 G13627)) (G12124 G13620 G13626))) G13624) (G12427 '#f '"invalid syntax" G13622))) (G12194 G13622 '(_ #(each (any any)) any . each-any)))) G13620)))) (set! G12140 (G12138 'let-syntax)) (set! G12142 (G12138 'letrec-syntax)) (set! G12144 (lambda (G13640) ((lambda (G13643) (begin (set! G13643 (lambda (G13666 G13667 G13668) ((lambda (G13673 G13675) (begin (set! G13673 (lambda (G13724 G13725) ((lambda (G13728) ((lambda (G13730) (if G13730 (apply (lambda (G13732 G13733) ((lambda (G13736) (list 'let (list (list G13736 G13732)) (list 'if G13736 (list G13733 G13736) G13725))) (gensym))) G13730) ((lambda (G13738) ((lambda (G13740) (if G13740 (apply (lambda (G13742) ((lambda (G13744) (list 'let (list (list G13744 G13742)) (list 'if G13744 G13744 G13725))) (gensym))) G13740) ((lambda (G13746) ((lambda (G13748) (if G13748 (apply (lambda (G13750 G13751 G13752) (list 'if G13750 (cons 'begin (cons G13751 G13752)) G13725)) G13748) ((lambda (G13756) ((lambda (G13758) (if G13758 (apply (lambda () (G12427 '#f '"invalid guard clause" G13724)) G13758) (G12427 '#f '"invalid syntax" G13756))) (G12194 G13756 '_))) G13746))) (G12194 G13746 '(any any . each-any)))) G13738))) (G12194 G13738 '(any)))) G13728))) (G12194 G13728 '(any #(scheme-id =>) any)))) G13724))) (set! G13675 (lambda (G13686) ((lambda (G13688) ((lambda (G13690) (if G13690 (apply (lambda () (values (list 'raise G13666) '#t)) G13690) ((lambda (G13692) ((lambda (G13694) (if G13694 (apply (lambda (G13696 G13697) (values (cons 'begin (cons G13696 G13697)) '#f)) G13694) ((lambda (G13700) ((lambda (G13702) (if G13702 (apply (lambda (G13704 G13705) (call-with-values (lambda () (G13675 G13705)) (lambda (G13710 G13711) ((lambda (G13714 G13715) (values (G13673 G13704 G13715) G13714)) G13711 G13710)))) G13702) ((lambda (G13718) ((lambda (G13720) (if G13720 (apply (lambda (G13722) (G12427 '#f '"invalid guard clause" G13722)) G13720) (G12427 '#f '"invalid syntax" G13718))) (G12194 G13718 'any))) G13700))) (G12194 G13700 '(any . any)))) G13692))) (G12194 G13692 '((#(scheme-id else) any . each-any))))) G13688))) (G12194 G13688 '()))) G13686))) (call-with-values (lambda () (G13675 G13668)) (lambda (G13678 G13679) ((lambda (G13682 G13683) (if G13682 (list G13667 G13683) G13683)) G13679 G13678))))) '#f '#f))) ((lambda (G13644) ((lambda (G13646) (if (if G13646 (begin '#f (apply (lambda (G13648 G13649 G13650 G13651) (G11615 G13648)) G13646)) '#f) (apply (lambda (G13656 G13657 G13658 G13659) ((lambda (G13664) (G12120 (list 'call/cc (list 'lambda (list G13664) (list 'with-exception-handler (list 'lambda (list G13656) (G13643 G13656 G13664 G13657)) (cons 'lambda (cons '() (cons '#f (cons G13658 G13659))))))))) (gensym))) G13646) (G12427 '#f '"invalid syntax" G13644))) (G12194 G13644 '(_ (any . each-any) any . each-any)))) G13640))) '#f))) (set! G12146 (lambda (G13760) ((lambda (G13763 G13765) (begin (set! G13763 (lambda (G13788) ((lambda (G13790) (if G13790 G13790 (begin '#f (if (not (memq (car G13788) (cdr G13788))) (begin '#f (G13763 (cdr G13788))) '#f)))) (null? G13788)))) (set! G13765 (lambda (G13786) (if (null? G13786) '() (cons (car G13786) (G13765 (remq (car G13786) (cdr G13786))))))) ((lambda (G13766) ((lambda (G13768) (if (if G13768 (begin '#f (apply (lambda (G13770 G13771 G13772) (if (G11615 G13770) (if (G11615 G13772) (begin '#f (for-all G11615 G13771)) '#f) '#f)) G13768)) '#f) (apply (lambda (G13776 G13777 G13778) ((lambda (G13782 G13783) (G12120 (list 'begin (list 'define G13783 (list 'enum-set-constructor (list 'make-enumeration (list 'quote G13782)))) (list 'define-syntax G13776 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G13782)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G13776) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G13778 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G13778) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G13782)) (cons 'syntax-violation (cons (list 'quote G13778) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G13783 '('(n* ...)))))))))))) (G13765 (G12433 G13777)) (gensym))) G13768) (G12427 '#f '"invalid syntax" G13766))) (G12194 G13766 '(_ any each-any any)))) G13760))) '#f '#f))) (set! G12148 (lambda (G13792) ((lambda (G13794) ((lambda (G13796) (if G13796 (apply (lambda (G13798) ((lambda (G13800) (G12120 (list 'time-it G13800 (list 'lambda '() G13798)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G13804 G13805) ((lambda (G13808 G13809) (begin (write (G12433 G13798) G13809) (G13808))) G13805 G13804))))) G13796) (G12427 '#f '"invalid syntax" G13794))) (G12194 G13794 '(_ any)))) G13792))) (set! G12150 (lambda (G13812) ((lambda (G13814) ((lambda (G13816) (if G13816 (apply (lambda (G13818) (G12120 (list 'make-promise (list 'lambda '() G13818)))) G13816) (G12427 '#f '"invalid syntax" G13814))) (G12194 G13814 '(_ any)))) G13812))) (set! G12152 (lambda (G13820) ((lambda (G13822) ((lambda (G13824) (if G13824 (apply (lambda (G13826) (G12120 (list 'unless G13826 (list 'assertion-violation ''assert '"assertion failed" (list 'quote G13826))))) G13824) (G12427 '#f '"invalid syntax" G13822))) (G12194 G13822 '(_ any)))) G13820))) (set! G12154 (lambda (G13828) ((lambda (G13830) ((lambda (G13832) (if G13832 (apply (lambda (G13834) ((lambda (G13836) (if (eqv? G13836 'little) (G12120 ''little) (if (eqv? G13836 'big) (G12120 ''big) (G12427 '#f '"endianness must be big or little" G13828)))) (G12433 G13834))) G13832) (G12427 '#f '"invalid syntax" G13830))) (G12194 G13830 '(_ any)))) G13828))) (set! G12156 (lambda (G13837) ((lambda (G13839) ((lambda (G13841) (if G13841 (apply (lambda (G13843) (G12120 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G13843)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G13843) '((syntax (e* ...)))))))))) G13841) ((lambda (G13845) ((lambda (G13847) (if (if G13847 (begin '#f (apply (lambda (G13849 G13850 G13851 G13852 G13853) (if (G11615 G13849) (if (G11615 G13851) (begin '#f (G11615 G13852)) '#f) '#f)) G13847)) '#f) (apply (lambda (G13859 G13860 G13861 G13862 G13863) (G12120 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G13860)) (list (list 'set! 'id G13862) (list 'syntax G13863)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G13860 '(e* ...))))))))) G13847) (G12427 '#f '"invalid syntax" G13845))) (G12194 G13845 '(_ (any any) ((#(scheme-id set!) any any) any))))) G13839))) (G12194 G13839 '(_ any)))) G13837))) (set! G12158 (lambda (G13869) ((lambda (G13872) (begin (set! G13872 (lambda (G13895) ((lambda (G13897) ((lambda (G13899) (if G13899 (apply (lambda (G13901 G13902) (list G13901 G13902 G13901)) G13899) ((lambda (G13905) ((lambda (G13907) (if G13907 (apply (lambda (G13909 G13910 G13911) (list G13909 G13910 G13911)) G13907) ((lambda (G13915) ((lambda (G13917) (if G13917 (apply (lambda () (G12427 '#f '"invalid binding" G13869)) G13917) (G12427 '#f '"invalid syntax" G13915))) (G12194 G13915 '_))) G13905))) (G12194 G13905 '(any any any)))) G13897))) (G12194 G13897 '(any any)))) G13895))) ((lambda (G13873) ((lambda (G13875) (if G13875 (apply (lambda (G13877 G13878 G13879 G13880) ((lambda (G13885) ((lambda (G13887) (if G13887 (apply (lambda (G13889 G13890 G13891) (if (G11625 G13889) (G12120 (list 'letrec (list (list 'loop (list 'lambda G13889 (list 'if G13878 (cons 'begin (cons '(if #f #f) G13879)) (cons 'begin (append G13880 (list (cons 'loop G13891)))))))) (cons 'loop G13890))) (G12427 '#f '"invalid bindings" G13869))) G13887) (G12427 '#f '"invalid syntax" G13885))) (G12194 G13885 '#(each (any any any))))) (map G13872 G13877))) G13875) (G12427 '#f '"invalid syntax" G13873))) (G12194 G13873 '(_ each-any (any . each-any) . each-any)))) G13869))) '#f))) (set! G12160 (lambda (G13919) ((lambda (G13921) ((lambda (G13923) (if (if G13923 (begin '#f (apply (lambda (G13925 G13926 G13927 G13928) (for-all G11615 G13925)) G13923)) '#f) (apply (lambda (G13933 G13934 G13935 G13936) (G12120 ((letrec ((G13941 (lambda (G13943) (if (null? G13943) (cons 'let (cons '() (cons G13935 G13936))) (list 'let (list (car G13943)) (G13941 (cdr G13943))))))) G13941) (map list G13933 G13934)))) G13923) (G12427 '#f '"invalid syntax" G13921))) (G12194 G13921 '(_ #(each (any any)) any . each-any)))) G13919))) (set! G12162 (lambda (G13945) ((lambda (G13947) ((lambda (G13949) (if G13949 (apply (lambda () '#f) G13949) ((lambda (G13951) ((lambda (G13953) (if G13953 (apply (lambda (G13955 G13956) (G12120 ((letrec ((G13959 (lambda (G13961 G13962) (if (null? G13962) (list 'begin '#f G13961) (list 'let (list (list 't G13961)) (list 'if 't 't (G13959 (car G13962) (cdr G13962)))))))) G13959) G13955 G13956))) G13953) (G12427 '#f '"invalid syntax" G13951))) (G12194 G13951 '(_ any . each-any)))) G13947))) (G12194 G13947 '(_)))) G13945))) (set! G12164 (lambda (G13965) ((lambda (G13967) ((lambda (G13969) (if G13969 (apply (lambda () '#t) G13969) ((lambda (G13971) ((lambda (G13973) (if G13973 (apply (lambda (G13975 G13976) (G12120 ((letrec ((G13979 (lambda (G13981 G13982) (if (null? G13982) (list 'begin '#f G13981) (cons 'if (cons G13981 (cons (G13979 (car G13982) (cdr G13982)) '(#f)))))))) G13979) G13975 G13976))) G13973) (G12427 '#f '"invalid syntax" G13971))) (G12194 G13971 '(_ any . each-any)))) G13967))) (G12194 G13967 '(_)))) G13965))) (set! G12166 (lambda (G13985) ((lambda (G13987) ((lambda (G13989) (if G13989 (apply (lambda (G13991 G13992) (G12120 ((letrec ((G13995 (lambda (G13997 G13998) (if (null? G13998) ((lambda (G14001) ((lambda (G14003) (if G14003 (apply (lambda (G14005 G14006) (cons 'begin (cons G14005 G14006))) G14003) ((lambda (G14009) ((lambda (G14011) (if G14011 (apply (lambda (G14013 G14014) (list 'let (list (list 't G14013)) (list 'if 't (cons G14014 '(t))))) G14011) ((lambda (G14017) ((lambda (G14019) (if G14019 (apply (lambda (G14021) (cons 'or (cons G14021 '((if #f #f))))) G14019) ((lambda (G14023) ((lambda (G14025) (if G14025 (apply (lambda (G14027 G14028) (list 'if G14027 (cons 'begin G14028))) G14025) ((lambda (G14031) ((lambda (G14033) (if G14033 (apply (lambda () (G12427 '#f '"invalid last clause" G13985)) G14033) (G12427 '#f '"invalid syntax" G14031))) (G12194 G14031 '_))) G14023))) (G12194 G14023 '(any . each-any)))) G14017))) (G12194 G14017 '(any)))) G14009))) (G12194 G14009 '(any #(scheme-id =>) any)))) G14001))) (G12194 G14001 '(#(scheme-id else) any . each-any)))) G13997) ((lambda (G14035) ((lambda (G14037) (if G14037 (apply (lambda (G14039 G14040) (G12427 '#f '"incorrect position of keyword else" G13985)) G14037) ((lambda (G14043) ((lambda (G14045) (if G14045 (apply (lambda (G14047 G14048) (list 'let (list (list 't G14047)) (list 'if 't (cons G14048 '(t)) (G13995 (car G13998) (cdr G13998))))) G14045) ((lambda (G14051) ((lambda (G14053) (if G14053 (apply (lambda (G14055) (list 'or G14055 (G13995 (car G13998) (cdr G13998)))) G14053) ((lambda (G14057) ((lambda (G14059) (if G14059 (apply (lambda (G14061 G14062) (list 'if G14061 (cons 'begin G14062) (G13995 (car G13998) (cdr G13998)))) G14059) ((lambda (G14065) ((lambda (G14067) (if G14067 (apply (lambda () (G12427 '#f '"invalid last clause" G13985)) G14067) (G12427 '#f '"invalid syntax" G14065))) (G12194 G14065 '_))) G14057))) (G12194 G14057 '(any . each-any)))) G14051))) (G12194 G14051 '(any)))) G14043))) (G12194 G14043 '(any #(scheme-id =>) any)))) G14035))) (G12194 G14035 '(#(scheme-id else) any . each-any)))) G13997))))) G13995) G13991 G13992))) G13989) (G12427 '#f '"invalid syntax" G13987))) (G12194 G13987 '(_ any . each-any)))) G13985))) (set! G12168 (lambda (G14069 G14070 G14071) ((lambda (G14075) (begin (if (if (string? G14075) (begin '#f (G11615 G14070)) '#f) (void) (G12427 '#f '"invalid syntax" G14069)) (cons (G12120 'begin) (with-input-from-file G14075 (lambda () ((letrec ((G14077 (lambda (G14079) ((lambda (G14081) (if (eof-object? G14081) (reverse G14079) (G14077 (cons (G11581 G14070 G14081) G14079)))) (G10432))))) G14077) '())))))) (G11637 G14071)))) (set! G12170 (lambda (G14083) ((lambda (G14085) ((lambda (G14087) (if G14087 (apply (lambda (G14089 G14090) (G12168 G14083 G14089 G14090)) G14087) (G12427 '#f '"invalid syntax" G14085))) (G12194 G14085 '(any any)))) G14083))) (set! G12172 (lambda (G14093) ((lambda (G14095) ((lambda (G14097) (if G14097 (apply (lambda (G14099 G14100) (G12168 G14093 G14099 G14100)) G14097) (G12427 '#f '"invalid syntax" G14095))) (G12194 G14095 '(_ any any)))) G14093))) (set! G12174 (lambda (G14103) ((lambda (G14105) ((lambda (G14107) (if G14107 (apply (lambda (G14109 G14110 G14111) (begin (G12200 G14109 G14103) (G12120 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G14109 (map (lambda (G14115 G14116) ((lambda (G14119) ((lambda (G14121) (if G14121 (apply (lambda (G14123) (list (cons 'g G14123) (list 'syntax G14116))) G14121) ((lambda (G14125) ((lambda (G14127) (if G14127 (apply (lambda () (G12427 '#f '"invalid syntax-rules pattern" G14103 G14115)) G14127) (G12427 '#f '"invalid syntax" G14125))) (G12194 G14125 '_))) G14119))) (G12194 G14119 '(_ . any)))) G14115)) G14110 G14111)))))))) G14107) (G12427 '#f '"invalid syntax" G14105))) (G12194 G14105 '(_ each-any . #(each (any any)))))) G14103))) (set! G12176 ((lambda () ((lambda (G14130 G14171 G14173 G14175 G14177 G14179 G14181) (begin (set! G14130 (lambda (G14400) (list (G12080 'quote) (G11591 G14400 '() '() '())))) (set! G14171 (lambda (G14392 G14393) ((letrec ((G14396 (lambda (G14398) (if (null? G14398) G14393 (G14173 (car G14398) (G14396 (cdr G14398))))))) G14396) G14392))) (set! G14173 (lambda (G14354 G14355) ((lambda (G14358) ((lambda (G14360) (if G14360 (apply (lambda (G14362) ((lambda (G14364) ((lambda (G14366) (if G14366 (apply (lambda (G14368) (list (G12080 'quote) (cons G14368 G14362))) G14366) ((lambda (G14370) ((lambda (G14372) (if G14372 (apply (lambda () ((lambda (G14374) ((lambda (G14376) (if G14376 (apply (lambda () (list (G12080 'list) G14354)) G14376) ((lambda (G14378) ((lambda (G14380) (if G14380 (apply (lambda () (list (G12080 'cons) G14354 G14355)) G14380) (G12427 '#f '"invalid syntax" G14378))) (G12194 G14378 '_))) G14374))) (G12194 G14374 '()))) G14362)) G14372) (G12427 '#f '"invalid syntax" G14370))) (G12194 G14370 '_))) G14364))) (G12194 G14364 '(#(scheme-id quote) any)))) G14354)) G14360) ((lambda (G14382) ((lambda (G14384) (if G14384 (apply (lambda (G14386) (cons* (G12080 'list) G14354 G14386)) G14384) ((lambda (G14388) ((lambda (G14390) (if G14390 (apply (lambda () (list (G12080 'cons) G14354 G14355)) G14390) (G12427 '#f '"invalid syntax" G14388))) (G12194 G14388 '_))) G14382))) (G12194 G14382 '(#(scheme-id list) . each-any)))) G14358))) (G12194 G14358 '(#(scheme-id quote) any)))) G14355))) (set! G14175 (lambda (G14328 G14329) ((lambda (G14332) (if (null? G14332) (list (G12080 'quote) '()) (if (null? (cdr G14332)) (car G14332) (cons* (G12080 'append) G14332)))) ((letrec ((G14334 (lambda (G14336) (if (null? G14336) ((lambda (G14338) ((lambda (G14340) (if G14340 (apply (lambda () '()) G14340) ((lambda (G14342) ((lambda (G14344) (if G14344 (apply (lambda () (list G14329)) G14344) (G12427 '#f '"invalid syntax" G14342))) (G12194 G14342 '_))) G14338))) (G12194 G14338 '(#(scheme-id quote) ())))) G14329) ((lambda (G14346) ((lambda (G14348) (if G14348 (apply (lambda () (G14334 (cdr G14336))) G14348) ((lambda (G14350) ((lambda (G14352) (if G14352 (apply (lambda () (cons (car G14336) (G14334 (cdr G14336)))) G14352) (G12427 '#f '"invalid syntax" G14350))) (G12194 G14350 '_))) G14346))) (G12194 G14346 '(#(scheme-id quote) ())))) (car G14336)))))) G14334) G14328)))) (set! G14177 (lambda (G14278) ((lambda (G14280) ((lambda (G14282) ((lambda (G14284) (if G14284 (apply (lambda (G14286) (list (G12080 'quote) (list->vector G14286))) G14284) ((lambda (G14288) ((lambda (G14290) (if G14290 (apply (lambda () ((letrec ((G14292 (lambda (G14294 G14295) ((lambda (G14298) ((lambda (G14300) (if G14300 (apply (lambda (G14302) (G14295 (map (lambda (G14304) (list (G12080 'quote) G14304)) G14302))) G14300) ((lambda (G14306) ((lambda (G14308) (if G14308 (apply (lambda (G14310) (G14295 G14310)) G14308) ((lambda (G14312) ((lambda (G14314) (if G14314 (apply (lambda (G14316 G14317) (G14292 G14317 (lambda (G14320) (G14295 (cons G14316 G14320))))) G14314) ((lambda (G14322) ((lambda (G14324) (if G14324 (apply (lambda () (list (G12080 'list->vector) G14280)) G14324) (G12427 '#f '"invalid syntax" G14322))) (G12194 G14322 '_))) G14312))) (G12194 G14312 '(#(scheme-id cons) any any)))) G14306))) (G12194 G14306 '(#(scheme-id list) . each-any)))) G14298))) (G12194 G14298 '(#(scheme-id quote) each-any)))) G14294)))) G14292) G14278 (lambda (G14326) (cons* (G12080 'vector) G14326)))) G14290) (G12427 '#f '"invalid syntax" G14288))) (G12194 G14288 '_))) G14282))) (G12194 G14282 '(#(scheme-id quote) each-any)))) G14280)) G14278))) (set! G14179 (lambda (G14244 G14245) ((lambda (G14248) ((lambda (G14250) (if G14250 (apply (lambda (G14252 G14253) ((lambda (G14256) ((lambda (G14258) (if G14258 (apply (lambda (G14260) (if (= G14245 '0) (G14171 G14260 (G14179 G14253 G14245)) (G14173 (G14173 (G14130 'unquote) (G14181 G14260 (- G14245 '1))) (G14179 G14253 G14245)))) G14258) ((lambda (G14262) ((lambda (G14264) (if G14264 (apply (lambda (G14266) (if (= G14245 '0) (G14175 G14266 (G14179 G14253 G14245)) (G14173 (G14173 (G14130 'unquote-splicing) (G14181 G14266 (- G14245 '1))) (G14179 G14253 G14245)))) G14264) ((lambda (G14268) ((lambda (G14270) (if G14270 (apply (lambda (G14272) (G14173 (G14181 G14272 G14245) (G14179 G14253 G14245))) G14270) (G12427 '#f '"invalid syntax" G14268))) (G12194 G14268 'any))) G14262))) (G12194 G14262 '(#(scheme-id unquote-splicing) . each-any)))) G14256))) (G12194 G14256 '(#(scheme-id unquote) . each-any)))) G14252)) G14250) ((lambda (G14274) ((lambda (G14276) (if G14276 (apply (lambda () (list (G12080 'quote) '())) G14276) (G12427 '#f '"invalid syntax" G14274))) (G12194 G14274 '()))) G14248))) (G12194 G14248 '(any . any)))) G14244))) (set! G14181 (lambda (G14190 G14191) ((lambda (G14194) ((lambda (G14196) (if G14196 (apply (lambda (G14198) (if (= G14191 '0) G14198 (G14173 (G14130 'unquote) (G14181 (list G14198) (- G14191 '1))))) G14196) ((lambda (G14200) ((lambda (G14202) (if G14202 (apply (lambda (G14204 G14205) (if (= G14191 '0) (G14171 G14204 (G14181 G14205 G14191)) (G14173 (G14173 (G14130 'unquote) (G14181 G14204 (- G14191 '1))) (G14181 G14205 G14191)))) G14202) ((lambda (G14208) ((lambda (G14210) (if G14210 (apply (lambda (G14212 G14213) (if (= G14191 '0) (G14175 G14212 (G14181 G14213 G14191)) (G14173 (G14173 (G14130 'unquote-splicing) (G14181 G14212 (- G14191 '1))) (G14181 G14213 G14191)))) G14210) ((lambda (G14216) ((lambda (G14218) (if G14218 (apply (lambda (G14220) (G14173 (G14130 'quasiquote) (G14181 (list G14220) (+ G14191 '1)))) G14218) ((lambda (G14222) ((lambda (G14224) (if G14224 (apply (lambda (G14226 G14227) (G14173 (G14181 G14226 G14191) (G14181 G14227 G14191))) G14224) ((lambda (G14230) ((lambda (G14232) (if (if G14232 (begin '#f (apply (lambda (G14234) (not (G11559 G14234))) G14232)) '#f) (apply (lambda (G14236) (G14177 (G14179 G14236 G14191))) G14232) ((lambda (G14238) ((lambda (G14240) (if G14240 (apply (lambda (G14242) (list (G12080 'quote) G14242)) G14240) (G12427 '#f '"invalid syntax" G14238))) (G12194 G14238 'any))) G14230))) (G12194 G14230 '#(vector each-any)))) G14222))) (G12194 G14222 '(any . any)))) G14216))) (G12194 G14216 '(#(scheme-id quasiquote) any)))) G14208))) (G12194 G14208 '((#(scheme-id unquote-splicing) . each-any) . any)))) G14200))) (G12194 G14200 '((#(scheme-id unquote) . each-any) . any)))) G14194))) (G12194 G14194 '(#(scheme-id unquote) any)))) G14190))) (lambda (G14182) ((lambda (G14184) ((lambda (G14186) (if G14186 (apply (lambda (G14188) (G14181 G14188 '0)) G14186) (G12427 '#f '"invalid syntax" G14184))) (G12194 G14184 '(_ any)))) G14182)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G12178 ((lambda () ((lambda (G14403) (begin (set! G14403 (lambda (G14427 G14428) ((lambda (G14431) ((lambda (G14433) (if G14433 (apply (lambda (G14435) (if (= G14428 '0) ((lambda (G14437) (values (list G14437) (list G14435) G14437)) (gensym)) (call-with-values (lambda () (G14403 G14435 (- G14428 '1))) (lambda (G14442 G14443 G14444) ((lambda (G14448 G14449 G14450) (values G14450 G14449 (list 'unsyntax G14448))) G14444 G14443 G14442))))) G14433) ((lambda (G14454) ((lambda (G14456) (if (if G14456 (begin '#f (apply (lambda () (= G14428 '0)) G14456)) '#f) (apply (lambda () (G12427 '#f '"incorrect use of unsyntax" G14427)) G14456) ((lambda (G14458) ((lambda (G14460) (if G14460 (apply (lambda (G14462 G14463) (call-with-values (lambda () (G14403 G14463 G14428)) (lambda (G14469 G14470 G14471) ((lambda (G14475 G14476 G14477) (if (= G14428 '0) ((lambda (G14481) (values (cons (cons G14481 '(...)) G14477) (cons G14462 G14476) (cons G14481 (cons '... G14475)))) (gensym)) (call-with-values (lambda () (G14403 G14462 (- G14428 '1))) (lambda (G14486 G14487 G14488) ((lambda (G14492 G14493 G14494) (values (append G14494 G14477) (append G14493 G14476) (cons (list 'unsyntax-splicing G14492) G14475))) G14488 G14487 G14486))))) G14471 G14470 G14469)))) G14460) ((lambda (G14498) ((lambda (G14500) (if (if G14500 (begin '#f (apply (lambda () (= G14428 '0)) G14500)) '#f) (apply (lambda () (G12427 '#f '"incorrect use of unsyntax-splicing" G14427)) G14500) ((lambda (G14502) ((lambda (G14504) (if G14504 (apply (lambda (G14506) (call-with-values (lambda () (G14403 G14506 (+ G14428 '1))) (lambda (G14511 G14512 G14513) ((lambda (G14517 G14518 G14519) (values G14519 G14518 (list 'quasisyntax G14517))) G14513 G14512 G14511)))) G14504) ((lambda (G14523) ((lambda (G14525) (if G14525 (apply (lambda (G14527 G14528) (call-with-values (lambda () (G14403 G14527 G14428)) (lambda (G14537 G14538 G14539) (call-with-values (lambda () (G14403 G14528 G14428)) (lambda (G14543 G14544 G14545) ((lambda (G14549 G14550 G14551 G14552 G14553 G14554) (values (append G14551 G14554) (append G14550 G14553) (cons G14552 G14549))) G14545 G14544 G14543 G14539 G14538 G14537)))))) G14525) ((lambda (G14561) ((lambda (G14563) (if (if G14563 (begin '#f (apply (lambda (G14565) (not (G11559 G14427))) G14563)) '#f) (apply (lambda (G14567) (call-with-values (lambda () ((letrec ((G14572 (lambda (G14574) (if (null? G14574) (values '() '() '()) (call-with-values (lambda () (G14403 (car G14574) G14428)) (lambda (G14579 G14580 G14581) ((lambda (G14585 G14586 G14587) (call-with-values (lambda () (G14572 (cdr G14574))) (lambda (G14594 G14595 G14596) ((lambda (G14600 G14601 G14602) (values (append G14587 G14602) (append G14586 G14601) (cons G14585 G14600))) G14596 G14595 G14594)))) G14581 G14580 G14579))))))) G14572) G14567)) (lambda (G14606 G14607 G14608) ((lambda (G14612 G14613 G14614) (values G14614 G14613 (list->vector G14612))) G14608 G14607 G14606)))) G14563) ((lambda (G14618) ((lambda (G14620) (if G14620 (apply (lambda () (values '() '() G14427)) G14620) (G12427 '#f '"invalid syntax" G14618))) (G12194 G14618 '_))) G14561))) (G12194 G14561 '#(vector each-any)))) G14523))) (G12194 G14523 '(any . any)))) G14502))) (G12194 G14502 '(#(scheme-id quasisyntax) any)))) G14498))) (G12194 G14498 '#(scheme-id unsyntax-splicing)))) G14458))) (G12194 G14458 '((#(scheme-id unsyntax-splicing) any) . any)))) G14454))) (G12194 G14454 '#(scheme-id unsyntax)))) G14431))) (G12194 G14431 '(#(scheme-id unsyntax) any)))) G14427))) (lambda (G14404) ((lambda (G14406) ((lambda (G14408) (if G14408 (apply (lambda (G14410) (call-with-values (lambda () (G14403 G14410 '0)) (lambda (G14415 G14416 G14417) ((lambda (G14421 G14422 G14423) (G12120 (list 'syntax-case (cons 'list G14422) '() (list G14423 (list 'syntax G14421))))) G14417 G14416 G14415)))) G14408) (G12427 '#f '"invalid syntax" G14406))) (G12194 G14406 '(_ any)))) G14404)))) '#f)))) (set! G12180 (lambda (G14622) (G12427 '#f '"define-struct not supported" G14622))) (set! G12182 (lambda (G14624) ((lambda (G14627 G14629 G14631 G14633 G14635 G14637 G14639 G14641 G14643 G14645 G14647 G14649 G14651 G14653 G14655 G14657 G14659) (begin (set! G14627 (lambda (G15130 . G15132) (G12431 G15130 (string->symbol (apply string-append (map (lambda (G15134) (if (symbol? G15134) (symbol->string G15134) (if (string? G15134) G15134 (assertion-violation 'define-record-type '"BUG")))) G15132)))))) (set! G14629 (lambda (G15112) ((lambda (G15114) ((lambda (G15116) (if G15116 (apply (lambda (G15118 G15119 G15120) G15118) G15116) ((lambda (G15124) ((lambda (G15126) (if G15126 (apply (lambda (G15128) G15128) G15126) (G12427 '#f '"invalid syntax" G15124))) (G12194 G15124 'any))) G15114))) (G12194 G15114 '(any any any)))) G15112))) (set! G14631 (lambda (G15092) ((lambda (G15094) ((lambda (G15096) (if G15096 (apply (lambda (G15098 G15099 G15100) G15099) G15096) ((lambda (G15104) ((lambda (G15106) (if (if G15106 (begin '#f (apply (lambda (G15108) (G11615 G15108)) G15106)) '#f) (apply (lambda (G15110) (G14627 G15110 '"make-" (G11637 G15110))) G15106) (G12427 '#f '"invalid syntax" G15104))) (G12194 G15104 'any))) G15094))) (G12194 G15094 '(any any any)))) G15092))) (set! G14633 (lambda (G15072) ((lambda (G15074) ((lambda (G15076) (if G15076 (apply (lambda (G15078 G15079 G15080) G15080) G15076) ((lambda (G15084) ((lambda (G15086) (if (if G15086 (begin '#f (apply (lambda (G15088) (G11615 G15088)) G15086)) '#f) (apply (lambda (G15090) (G14627 G15090 (G11637 G15090) '"?")) G15086) (G12427 '#f '"invalid syntax" G15084))) (G12194 G15084 'any))) G15074))) (G12194 G15074 '(any any any)))) G15072))) (set! G14635 (lambda (G15054 G15055) ((lambda (G15058) ((lambda (G15060) (if G15060 (apply (lambda () '#f) G15060) ((lambda (G15062) ((lambda (G15064) (if G15064 (apply (lambda (G15066 G15067 G15068) (if (G11623 (G12120 G15054) G15066) (cons G15066 G15067) (G14635 G15054 G15068))) G15064) (G12427 '#f '"invalid syntax" G15062))) (G12194 G15062 '((any . any) . any)))) G15058))) (G12194 G15058 '()))) G15055))) (set! G14637 (lambda (G14972 G14973 G14974) ((lambda (G14979) (begin (set! G14979 (lambda (G15028) (list->vector (map (lambda (G15030) ((lambda (G15032) ((lambda (G15034) (if G15034 (apply (lambda (G15036 G15037) (list 'mutable G15036)) G15034) ((lambda (G15040) ((lambda (G15042) (if G15042 (apply (lambda (G15044 G15045) (list 'immutable G15044)) G15042) ((lambda (G15048) ((lambda (G15050) (if G15050 (apply (lambda (G15052) (list 'immutable G15052)) G15050) (G12427 '#f '"invalid syntax" G15048))) (G12194 G15048 'any))) G15040))) (G12194 G15040 '(#(scheme-id immutable) any . any)))) G15032))) (G12194 G15032 '(#(scheme-id mutable) any . any)))) G15030)) G15028)))) ((lambda (G14980 G14981 G14982 G14983) (G12120 (list 'make-record-type-descriptor (list 'quote G14972) G14974 G14980 G14981 G14982 G14983))) ((lambda (G14988) ((lambda (G14990) (if G14990 (apply (lambda () (list 'quote (gensym))) G14990) ((lambda (G14992) ((lambda (G14994) (if G14994 (apply (lambda (G14996) (list 'quote G14996)) G14994) ((lambda (G14998) ((lambda (G15000) (if G15000 (apply (lambda () '#f) G15000) (G12427 '#f '"invalid syntax" G14998))) (G12194 G14998 '_))) G14992))) (G12194 G14992 '(_ any)))) G14988))) (G12194 G14988 '(_)))) (G14635 'nongenerative G14973)) ((lambda (G15002) ((lambda (G15004) (if G15004 (apply (lambda () '#t) G15004) ((lambda (G15006) ((lambda (G15008) (if G15008 (apply (lambda () '#f) G15008) (G12427 '#f '"invalid syntax" G15006))) (G12194 G15006 '_))) G15002))) (G12194 G15002 '(_ #(atom #t))))) (G14635 'sealed G14973)) ((lambda (G15010) ((lambda (G15012) (if G15012 (apply (lambda () '#t) G15012) ((lambda (G15014) ((lambda (G15016) (if G15016 (apply (lambda () '#f) G15016) (G12427 '#f '"invalid syntax" G15014))) (G12194 G15014 '_))) G15010))) (G12194 G15010 '(_ #(atom #t))))) (G14635 'opaque G14973)) ((lambda (G15018) ((lambda (G15020) (if G15020 (apply (lambda (G15022) (list 'quote (G14979 G15022))) G15020) ((lambda (G15024) ((lambda (G15026) (if G15026 (apply (lambda () ''#()) G15026) (G12427 '#f '"invalid syntax" G15024))) (G12194 G15024 '_))) G15018))) (G12194 G15018 '(_ . each-any)))) (G14635 'fields G14973))))) '#f))) (set! G14639 (lambda (G14948) ((lambda (G14950) ((lambda (G14952) (if G14952 (apply (lambda (G14954) (list 'record-type-descriptor G14954)) G14952) ((lambda (G14956) ((lambda (G14958) (if G14958 (apply (lambda () ((lambda (G14960) ((lambda (G14962) (if G14962 (apply (lambda (G14964 G14965) G14964) G14962) ((lambda (G14968) ((lambda (G14970) (if G14970 (apply (lambda () '#f) G14970) (G12427 '#f '"invalid syntax" G14968))) (G12194 G14968 '#(atom #f)))) G14960))) (G12194 G14960 '(_ any any)))) (G14635 'parent-rtd G14948))) G14958) (G12427 '#f '"invalid syntax" G14956))) (G12194 G14956 '#(atom #f)))) G14950))) (G12194 G14950 '(_ any)))) (G14635 'parent G14948)))) (set! G14641 (lambda (G14924) ((lambda (G14926) ((lambda (G14928) (if G14928 (apply (lambda (G14930) (list 'record-constructor-descriptor G14930)) G14928) ((lambda (G14932) ((lambda (G14934) (if G14934 (apply (lambda () ((lambda (G14936) ((lambda (G14938) (if G14938 (apply (lambda (G14940 G14941) G14941) G14938) ((lambda (G14944) ((lambda (G14946) (if G14946 (apply (lambda () '#f) G14946) (G12427 '#f '"invalid syntax" G14944))) (G12194 G14944 '#(atom #f)))) G14936))) (G12194 G14936 '(_ any any)))) (G14635 'parent-rtd G14924))) G14934) (G12427 '#f '"invalid syntax" G14932))) (G12194 G14932 '#(atom #f)))) G14926))) (G12194 G14926 '(_ any)))) (G14635 'parent G14924)))) (set! G14643 (lambda (G14916 G14917 G14918 G14919) (list 'make-record-constructor-descriptor G14917 G14919 G14918))) (set! G14645 (lambda (G14904) ((lambda (G14906) ((lambda (G14908) (if G14908 (apply (lambda (G14910) G14910) G14908) ((lambda (G14912) ((lambda (G14914) (if G14914 (apply (lambda () '#f) G14914) (G12427 '#f '"invalid syntax" G14912))) (G12194 G14912 '_))) G14906))) (G12194 G14906 '(_ any)))) (G14635 'protocol G14904)))) (set! G14647 (lambda (G14886) ((lambda (G14888) ((lambda (G14890) (if G14890 (apply (lambda () '()) G14890) ((lambda (G14892) ((lambda (G14894) (if G14894 (apply (lambda (G14896) G14896) G14894) ((lambda (G14898) ((lambda (G14900) (if G14900 (apply (lambda (G14902) (G14647 G14902)) G14900) (G12427 '#f '"invalid syntax" G14898))) (G12194 G14898 '(_ . any)))) G14892))) (G12194 G14892 '((#(scheme-id fields) . each-any) . _)))) G14888))) (G12194 G14888 '()))) G14886))) (set! G14649 (lambda (G14862) ((letrec ((G14864 (lambda (G14866 G14867) ((lambda (G14870) ((lambda (G14872) (if G14872 (apply (lambda () '()) G14872) ((lambda (G14874) ((lambda (G14876) (if G14876 (apply (lambda (G14878) (cons G14867 (G14864 G14878 (+ G14867 '1)))) G14876) ((lambda (G14880) ((lambda (G14882) (if G14882 (apply (lambda (G14884) (G14864 G14884 (+ G14867 '1))) G14882) (G12427 '#f '"invalid syntax" G14880))) (G12194 G14880 '(_ . any)))) G14874))) (G12194 G14874 '((#(scheme-id mutable) . _) . any)))) G14870))) (G12194 G14870 '()))) G14866)))) G14864) G14862 '0))) (set! G14651 (lambda (G14820 G14821) ((lambda (G14825) (begin (set! G14825 (lambda (G14860) (G12431 G14820 (string->symbol (string-append (symbol->string (G12433 G14820)) '"-" (symbol->string (G12433 G14860)) '"-set!"))))) ((letrec ((G14826 (lambda (G14828) ((lambda (G14830) ((lambda (G14832) (if G14832 (apply (lambda () '()) G14832) ((lambda (G14834) ((lambda (G14836) (if G14836 (apply (lambda (G14838 G14839 G14840 G14841) (cons G14840 (G14826 G14841))) G14836) ((lambda (G14846) ((lambda (G14848) (if G14848 (apply (lambda (G14850 G14851) (cons (G14825 G14850) (G14826 G14851))) G14848) ((lambda (G14854) ((lambda (G14856) (if G14856 (apply (lambda (G14858) (G14826 G14858)) G14856) (G12427 '#f '"invalid syntax" G14854))) (G12194 G14854 '(_ . any)))) G14846))) (G12194 G14846 '((#(scheme-id mutable) any) . any)))) G14834))) (G12194 G14834 '((#(scheme-id mutable) any any any) . any)))) G14830))) (G12194 G14830 '()))) G14828)))) G14826) G14821))) '#f))) (set! G14653 (lambda (G14752 G14753) ((lambda (G14757) (begin (set! G14757 (lambda (G14818) (G12431 G14752 (string->symbol (string-append (symbol->string (G12433 G14752)) '"-" (symbol->string (G12433 G14818))))))) (map (lambda (G14758) ((lambda (G14760) ((lambda (G14762) (if (if G14762 (begin '#f (apply (lambda (G14764 G14765 G14766) (G11615 G14765)) G14762)) '#f) (apply (lambda (G14770 G14771 G14772) G14771) G14762) ((lambda (G14776) ((lambda (G14778) (if (if G14778 (begin '#f (apply (lambda (G14780 G14781) (G11615 G14781)) G14778)) '#f) (apply (lambda (G14784 G14785) G14785) G14778) ((lambda (G14788) ((lambda (G14790) (if (if G14790 (begin '#f (apply (lambda (G14792) (G11615 G14792)) G14790)) '#f) (apply (lambda (G14794) (G14757 G14794)) G14790) ((lambda (G14796) ((lambda (G14798) (if (if G14798 (begin '#f (apply (lambda (G14800) (G11615 G14800)) G14798)) '#f) (apply (lambda (G14802) (G14757 G14802)) G14798) ((lambda (G14804) ((lambda (G14806) (if (if G14806 (begin '#f (apply (lambda (G14808) (G11615 G14808)) G14806)) '#f) (apply (lambda (G14810) (G14757 G14810)) G14806) ((lambda (G14812) ((lambda (G14814) (if G14814 (apply (lambda (G14816) (G12427 '#f '"invalid field spec" G14758)) G14814) (G12427 '#f '"invalid syntax" G14812))) (G12194 G14812 'any))) G14804))) (G12194 G14804 'any))) G14796))) (G12194 G14796 '(#(scheme-id immutable) any)))) G14788))) (G12194 G14788 '(#(scheme-id mutable) any)))) G14776))) (G12194 G14776 '(#(scheme-id immutable) any any)))) G14760))) (G12194 G14760 '(#(scheme-id mutable) any any any)))) G14758)) G14753))) '#f))) (set! G14655 (lambda (G14744) ((letrec ((G14746 (lambda (G14748 G14749) (if (null? G14748) '() (cons G14749 (G14746 (cdr G14748) (+ G14749 '1))))))) G14746) G14744 '0))) (set! G14657 (lambda (G14704 G14705) ((lambda (G14708) ((lambda (G14710) ((lambda (G14712) ((lambda (G14714) ((lambda (G14716) ((lambda (G14718) ((lambda (G14720) ((lambda (G14722) ((lambda (G14724) ((lambda (G14726) ((lambda (G14728) ((lambda (G14730) ((lambda (G14732) ((lambda (G14734) ((lambda () (G12120 (cons 'begin (cons (list 'define G14710 G14730) (cons (list 'define G14714 G14734) (cons (list 'define G14712 G14732) (cons (list 'define-syntax G14708 (list 'list ''$rtd (list 'syntax G14710) (list 'syntax G14712))) (cons (list 'define G14728 (list 'record-predicate G14710)) (cons (list 'define G14716 (list 'record-constructor G14712)) (append (map (lambda (G14736 G14737) (list 'define G14736 (list 'record-accessor G14710 G14737))) G14722 G14720) (map (lambda (G14740 G14741) (list 'define G14740 (list 'record-mutator G14710 G14741))) G14724 G14726))))))))))))) (G14645 G14705))) (G14643 G14705 G14710 G14714 (G14641 G14705)))) (G14637 G14708 G14705 (G14639 G14705)))) (G14633 G14704))) (G14649 G14718))) (G14651 G14708 G14718))) (G14653 G14708 G14718))) (G14655 G14718))) (G14647 G14705))) (G14631 G14704))) (gensym))) (gensym))) (gensym))) (G14629 G14704)))) (set! G14659 (lambda (G14668 G14669) ((lambda (G14673 G14675) (begin (set! G14673 (map G12120 '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G14675 (lambda (G14698 G14699) (if (pair? G14699) (begin '#f ((lambda (G14702) (if G14702 G14702 (begin '#f (G14675 G14698 (cdr G14699))))) (G11623 G14698 (car G14699)))) '#f))) ((letrec ((G14676 (lambda (G14678 G14679) (if (null? G14678) (void) ((lambda (G14682) ((lambda (G14684) (if G14684 (apply (lambda (G14686 G14687) (if ((lambda (G14690) (if G14690 G14690 (begin '#f (not (G14675 G14686 G14673))))) (not (G11615 G14686))) (G12427 '#f '"not a valid define-record-type keyword" G14686) (if (G11629 G14686 G14679) (G12427 '#f '"duplicate use of keyword " G14668 G14686) (G14676 (cdr G14678) (cons G14686 G14679))))) G14684) ((lambda (G14692) ((lambda (G14694) (if G14694 (apply (lambda (G14696) (G12427 '#f '"malformed define-record-type clause" G14696)) G14694) (G12427 '#f '"invalid syntax" G14692))) (G12194 G14692 'any))) G14682))) (G12194 G14682 '(any . any)))) (car G14678)))))) G14676) G14669 '()))) '#f '#f))) ((lambda (G14660) ((lambda (G14662) (if G14662 (apply (lambda (G14664 G14665) (begin (G14659 G14624 G14665) (G14657 G14664 G14665))) G14662) (G12427 '#f '"invalid syntax" G14660))) (G12194 G14660 '(_ any . each-any)))) G14624))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12184 (lambda (G15136) ((lambda (G15139) (begin (set! G15139 (lambda (G15184 G15185) (G12431 G15184 (string->symbol (string-append (symbol->string (G12433 G15184)) G15185))))) ((lambda (G15140) ((lambda (G15142) (if (if G15142 (begin '#f (apply (lambda (G15144 G15145 G15146 G15147 G15148 G15149 G15150) (if (G11615 G15145) (if (G11615 G15146) (if (G11615 G15147) (if (G11615 G15148) (if (for-all G11615 G15149) (begin '#f (for-all G11615 G15150)) '#f) '#f) '#f) '#f) '#f)) G15142)) '#f) (apply (lambda (G15158 G15159 G15160 G15161 G15162 G15163 G15164) ((lambda (G15172) (G12120 (cons 'begin (cons (cons 'define-record-type (cons (list G15159 G15161 (gensym)) (cons (list 'parent G15160) (cons (cons 'fields (map (lambda (G15174 G15175) (list 'immutable G15174 G15175)) G15163 G15172)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G15162 (list 'condition-predicate (list 'record-type-descriptor G15159))) (map (lambda (G15178 G15179) (list 'define G15178 (list 'condition-accessor (list 'record-type-descriptor G15159) G15179))) G15164 G15172)))))) (map (lambda (G15182) (gensym)) G15164))) G15142) (G12427 '#f '"invalid syntax" G15140))) (G12194 G15140 '(any any any any any . #(each (any any)))))) G15136))) '#f))) (set! G12186 (lambda (G15188) (G12427 '#f '"incorrect usage of auxiliary keyword" G15188))) (set! G12188 (lambda (G15190 G15191 G15192) ((lambda (G15196) ((lambda (G15198) (if G15198 (apply (lambda (G15200 G15201) (G12252 (cons G15200 G15201) G15191 G15192)) G15198) ((lambda (G15204) ((lambda (G15206) (if G15206 (apply (lambda (G15208 G15209 G15210 G15211) ((lambda (G15216 G15217 G15218 G15219) (G11460 '#f (append G15216 G15217) (append (G12226 G15208 G15191 G15192) (G12226 G15209 G15191 G15192)) (G11460 '#f (list G15219) (list (G11458 '#f '() (G11461 '#f (map (lambda (G15224 G15225 G15226) (G11460 '#f (list G15224) (list (list G15225)) (G11461 '#f (list (list G15225 G15226) (list 'set! G15226 G15224))))) G15218 G15216 G15217)))) (list '(primitive dynamic-wind) G15219 (G11458 '#f '() (G12252 (cons G15210 G15211) G15191 G15192)) G15219)))) (map (lambda (G15230) (G11489 'lhs)) G15208) (map (lambda (G15232) (G11489 'rhs)) G15208) (map (lambda (G15234) (G11489 't)) G15208) (G11489 'swap))) G15206) (G12427 '#f '"invalid syntax" G15204))) (G12194 G15204 '(_ #(each (any any)) any . each-any)))) G15196))) (G12194 G15196 '(_ () any . each-any)))) G15190))) (set! G12190 (lambda (G15236 G15237 G15238) ((lambda (G15242) ((lambda (G15244) (if G15244 (apply (lambda (G15246 G15247) (cons 'foreign-call (cons (G12230 G15246 G15237 G15238) (G12226 G15247 G15237 G15238)))) G15244) (G12427 '#f '"invalid syntax" G15242))) (G12194 G15242 '(_ any . each-any)))) G15236))) (set! G12192 (lambda (G15250 G15251) ((lambda (G15255 G15257) (begin (set! G15255 (lambda (G15400 G15401 G15402) (if (null? G15400) (values '() G15402) (call-with-values (lambda () (G15255 (cdr G15400) G15401 G15402)) (lambda (G15408 G15409) ((lambda (G15412 G15413) (call-with-values (lambda () (G15257 (car G15400) G15401 G15412)) (lambda (G15418 G15419) ((lambda (G15422 G15423) (values (cons G15423 G15413) G15422)) G15419 G15418)))) G15409 G15408)))))) (set! G15257 (lambda (G15258 G15259 G15260) ((lambda (G15264) ((lambda (G15266) (if (if G15266 (begin '#f (apply (lambda (G15268) (G11615 G15268)) G15266)) '#f) (apply (lambda (G15270) (if (G11629 G15258 G15251) (values (vector 'free-id G15258) G15260) (if (G11623 G15258 (G12080 '_)) (values '_ G15260) (values 'any (cons (cons G15258 G15259) G15260))))) G15266) ((lambda (G15272) ((lambda (G15274) (if (if G15274 (begin '#f (apply (lambda (G15276 G15277) (G12196 G15277)) G15274)) '#f) (apply (lambda (G15280 G15281) (call-with-values (lambda () (G15257 G15280 (+ G15259 '1) G15260)) (lambda (G15286 G15287) ((lambda (G15290 G15291) (values (if (eq? G15291 'any) 'each-any (vector 'each G15291)) G15290)) G15287 G15286)))) G15274) ((lambda (G15294) ((lambda (G15296) (if (if G15296 (begin '#f (apply (lambda (G15298 G15299 G15300 G15301) (G12196 G15299)) G15296)) '#f) (apply (lambda (G15306 G15307 G15308 G15309) (call-with-values (lambda () (G15257 G15309 G15259 G15260)) (lambda (G15316 G15317) ((lambda (G15320 G15321) (call-with-values (lambda () (G15255 G15308 G15259 G15320)) (lambda (G15326 G15327) ((lambda (G15330 G15331) (call-with-values (lambda () (G15257 G15306 (+ G15259 '1) G15330)) (lambda (G15336 G15337) ((lambda (G15340 G15341) (values (vector 'each+ G15341 (reverse G15331) G15321) G15340)) G15337 G15336)))) G15327 G15326)))) G15317 G15316)))) G15296) ((lambda (G15344) ((lambda (G15346) (if G15346 (apply (lambda (G15348 G15349) (call-with-values (lambda () (G15257 G15349 G15259 G15260)) (lambda (G15354 G15355) ((lambda (G15358 G15359) (call-with-values (lambda () (G15257 G15348 G15259 G15358)) (lambda (G15364 G15365) ((lambda (G15368 G15369) (values (cons G15369 G15359) G15368)) G15365 G15364)))) G15355 G15354)))) G15346) ((lambda (G15372) ((lambda (G15374) (if G15374 (apply (lambda () (values '() G15260)) G15374) ((lambda (G15376) ((lambda (G15378) (if (if G15378 (begin '#f (apply (lambda (G15380) (not (G11559 G15380))) G15378)) '#f) (apply (lambda (G15382) (call-with-values (lambda () (G15257 G15382 G15259 G15260)) (lambda (G15386 G15387) ((lambda (G15390 G15391) (values (vector 'vector G15391) G15390)) G15387 G15386)))) G15378) ((lambda (G15394) ((lambda (G15396) (if G15396 (apply (lambda (G15398) (values (vector 'atom (G11637 G15398)) G15260)) G15396) (G12427 '#f '"invalid syntax" G15394))) (G12194 G15394 'any))) G15376))) (G12194 G15376 '#(vector each-any)))) G15372))) (G12194 G15372 '()))) G15344))) (G12194 G15344 '(any . any)))) G15294))) (G12194 G15294 '(any any . #(each+ any () any))))) G15272))) (G12194 G15272 '(any any)))) G15264))) (G12194 G15264 'any))) G15258))) (G15257 G15250 '0 '()))) '#f '#f))) (set! G12194 (lambda (G15426 G15427) ((lambda (G15431 G15433 G15435 G15437 G15439 G15441 G15443 G15445) (begin (set! G15431 (lambda (G15626 G15627 G15628 G15629) (if (if (null? G15627) (if (null? G15628) (begin '#f (null? G15629)) '#f) '#f) G15626 (G11591 G15626 G15627 G15628 G15629)))) (set! G15433 (lambda (G15597 G15598 G15599 G15600 G15601) (if (pair? G15597) ((lambda (G15607) (if G15607 (begin '#f ((lambda (G15609) (if G15609 (begin '#f (cons G15607 G15609)) '#f)) (G15433 (cdr G15597) G15598 G15599 G15600 G15601))) '#f)) (G15445 (car G15597) G15598 G15599 G15600 G15601 '())) (if (null? G15597) '() (if (G11559 G15597) (if (not (G11487 G15599)) (begin '#f (call-with-values (lambda () (G11589 G15599 G15600 G15601 G15597)) (lambda (G15614 G15615 G15616) ((lambda (G15620 G15621 G15622) (G15433 (G11563 G15597) G15598 G15622 G15621 G15620)) G15616 G15615 G15614)))) '#f) (if (G10434 G15597) (G15433 (G10436 G15597) G15598 G15599 G15600 G15601) '#f)))))) (set! G15435 (lambda (G15539 G15540 G15541 G15542 G15543 G15544 G15545 G15546) ((letrec ((G15555 (lambda (G15557 G15558 G15559 G15560) (if (pair? G15557) (call-with-values (lambda () (G15555 (cdr G15557) G15558 G15559 G15560)) (lambda (G15568 G15569 G15570) ((lambda (G15574 G15575 G15576) (if G15574 (if (null? G15575) ((lambda (G15580) (if G15580 (values (cons G15580 G15576) G15575 G15574) (values '#f '#f '#f))) (G15445 (car G15557) G15540 G15558 G15559 G15560 '())) (values '() (cdr G15575) (G15445 (car G15557) (car G15575) G15558 G15559 G15560 G15574))) (values '#f '#f '#f))) G15570 G15569 G15568))) (if (G11559 G15557) (if (G11487 G15558) (values '() G15541 (G15445 G15557 G15542 G15558 G15559 G15560 G15546)) (call-with-values (lambda () (G11589 G15558 G15559 G15560 G15557)) (lambda (G15585 G15586 G15587) ((lambda (G15591 G15592 G15593) (G15555 (G11563 G15557) G15593 G15592 G15591)) G15587 G15586 G15585)))) (if (G10434 G15557) (G15555 (G10436 G15557) G15558 G15559 G15560) (values '() G15541 (G15445 G15557 G15542 G15558 G15559 G15560 G15546)))))))) G15555) G15539 G15543 G15544 G15545))) (set! G15437 (lambda (G15514 G15515 G15516 G15517) (if (pair? G15514) ((lambda (G15522) (if G15522 (begin '#f (cons (G15431 (car G15514) G15515 G15516 G15517) G15522)) '#f)) (G15437 (cdr G15514) G15515 G15516 G15517)) (if (null? G15514) '() (if (G11559 G15514) (if (not (G11487 G15515)) (begin '#f (call-with-values (lambda () (G11589 G15515 G15516 G15517 G15514)) (lambda (G15527 G15528 G15529) ((lambda (G15533 G15534 G15535) (G15437 (G11563 G15514) G15535 G15534 G15533)) G15529 G15528 G15527)))) '#f) (if (G10434 G15514) (G15437 (G10436 G15514) G15515 G15516 G15517) '#f)))))) (set! G15439 (lambda (G15509 G15510) (if (null? G15509) G15510 (if (eq? G15509 '_) G15510 (if (eq? G15509 'any) (cons '() G15510) (if (pair? G15509) (G15439 (car G15509) (G15439 (cdr G15509) G15510)) (if (eq? G15509 'each-any) (cons '() G15510) ((lambda (G15513) (if (eqv? G15513 'each) (G15439 (vector-ref G15509 '1) G15510) (if (eqv? G15513 'each+) (G15439 (vector-ref G15509 '1) (G15439 (reverse (vector-ref G15509 '2)) (G15439 (vector-ref G15509 '3) G15510))) (if (memv G15513 '(free-id atom)) G15510 (if (memv G15513 '(scheme-id atom)) G15510 (if (eqv? G15513 'vector) (G15439 (vector-ref G15509 '1) G15510) (assertion-violation 'syntax-dispatch '"invalid pattern" G15509))))))) (vector-ref G15509 '0))))))))) (set! G15441 (lambda (G15505 G15506) (if (null? (car G15505)) G15506 (cons (map car G15505) (G15441 (map cdr G15505) G15506))))) (set! G15443 (lambda (G15473 G15474 G15475 G15476 G15477 G15478) (if (null? G15474) (if (null? G15473) (begin '#f G15478) '#f) (if (pair? G15474) (if (pair? G15473) (begin '#f (G15445 (car G15473) (car G15474) G15475 G15476 G15477 (G15445 (cdr G15473) (cdr G15474) G15475 G15476 G15477 G15478))) '#f) (if (eq? G15474 'each-any) ((lambda (G15485) (if G15485 (begin '#f (cons G15485 G15478)) '#f)) (G15437 G15473 G15475 G15476 G15477)) ((lambda (G15487) (if (eqv? G15487 'each) (if (null? G15473) (G15439 (vector-ref G15474 '1) G15478) ((lambda (G15503) (if G15503 (begin '#f (G15441 G15503 G15478)) '#f)) (G15433 G15473 (vector-ref G15474 '1) G15475 G15476 G15477))) (if (eqv? G15487 'free-id) (if (symbol? G15473) (if (G11487 G15475) (if (G11623 (G15431 G15473 G15475 G15476 G15477) (vector-ref G15474 '1)) (begin '#f G15478) '#f) '#f) '#f) (if (eqv? G15487 'scheme-id) (if (symbol? G15473) (if (G11487 G15475) (if (G11623 (G15431 G15473 G15475 G15476 G15477) (G12080 (vector-ref G15474 '1))) (begin '#f G15478) '#f) '#f) '#f) (if (eqv? G15487 'each+) (call-with-values (lambda () (G15435 G15473 (vector-ref G15474 '1) (vector-ref G15474 '2) (vector-ref G15474 '3) G15475 G15476 G15477 G15478)) (lambda (G15491 G15492 G15493) ((lambda (G15497 G15498 G15499) (if G15497 (if (null? G15498) (begin '#f (if (null? G15499) (G15439 (vector-ref G15474 '1) G15497) (G15441 G15499 G15497))) '#f) '#f)) G15493 G15492 G15491))) (if (eqv? G15487 'atom) (if (equal? (vector-ref G15474 '1) (G11635 G15473 G15475)) (begin '#f G15478) '#f) (if (eqv? G15487 'vector) (if (vector? G15473) (begin '#f (G15445 (vector->list G15473) (vector-ref G15474 '1) G15475 G15476 G15477 G15478)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G15474)))))))) (vector-ref G15474 '0))))))) (set! G15445 (lambda (G15446 G15447 G15448 G15449 G15450 G15451) (if (not G15451) '#f (if (eq? G15447 '_) G15451 (if (eq? G15447 'any) (cons (G15431 G15446 G15448 G15449 G15450) G15451) (if (G11559 G15446) (if (not (G11487 G15448)) (begin '#f (call-with-values (lambda () (G11589 G15448 G15449 G15450 G15446)) (lambda (G15461 G15462 G15463) ((lambda (G15467 G15468 G15469) (G15445 (G11563 G15446) G15447 G15469 G15468 G15467 G15451)) G15463 G15462 G15461)))) '#f) (if (G10434 G15446) (G15445 (G10436 G15446) G15447 G15448 G15449 G15450 G15451) (G15443 G15446 G15447 G15448 G15449 G15450 G15451)))))))) (G15445 G15426 G15427 '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12196 (lambda (G15634) (if (G11615 G15634) (begin '#f (G11623 G15634 (G12080 '...))) '#f))) (set! G12198 (lambda (G15636) (if (G11615 G15636) (begin '#f (G11623 G15636 (G12080 '_))) '#f))) (set! G12200 (lambda (G15638 G15639) (for-each (lambda (G15642) (if ((lambda (G15644) (if G15644 G15644 ((lambda (G15646) (if G15646 G15646 (begin '#f (G12198 G15642)))) (G12196 G15642)))) (not (G11615 G15642))) (G12427 '#f '"invalid literal" G15639 G15642) (void))) G15638))) (set! G12202 ((lambda () ((lambda (G15649 G15651 G15653 G15655) (begin (set! G15649 (lambda (G15760 G15761 G15762 G15763 G15764) ((lambda (G15770 G15771) ((lambda (G15774 G15775) ((lambda (G15778) (list '(primitive apply) (G11458 '#f G15775 G15778) G15762)) (G12230 (G11595 (G11544 G15770 G15774) G15761) (append (map (lambda (G15780 G15781 G15782) (cons G15780 (G11647 'syntax (cons G15781 G15782)))) G15774 G15775 (map cdr G15760)) G15763) G15764))) (map G11493 G15770) (map G11489 G15770))) (map car G15760) (map cdr G15760)))) (set! G15651 (lambda (G15748 G15749 G15750) ((letrec ((G15754 (lambda (G15756 G15757) (if (null? G15756) (G12427 '#f '"invalid syntax" G15749) (if (G11615 (car G15756)) (if (G11629 (car G15756) G15757) (G12421 (car G15756) '"duplicate " G15750) (G15754 (cdr G15756) (cons (car G15756) G15757))) (G12421 (car G15756) '"invalid " G15750)))))) G15754) G15748 '()))) (set! G15653 (lambda (G15710 G15711 G15712 G15713 G15714 G15715 G15716 G15717) (call-with-values (lambda () (G12192 G15715 G15711)) (lambda (G15728 G15729) ((lambda (G15732 G15733) (if (not (G11627 (map car G15732))) (G15651 (map car G15732) G15715 '"pattern variable") (if (not (for-all (lambda (G15736) (not (G12196 (car G15736)))) G15732)) (G12427 '#f '"misplaced ellipsis in syntax-case pattern" G15715) ((lambda (G15738) ((lambda (G15740) ((lambda (G15742) ((lambda (G15744) (list (G11458 '#f (list G15738) (list 'if G15740 G15742 G15744)) (list '(primitive syntax-dispatch) G15710 (list 'quote G15733)))) (G15655 G15710 G15711 G15712 G15713 G15714))) (G15649 G15732 G15717 G15738 G15713 G15714))) (if (eq? G15716 '#t) G15738 ((lambda (G15746) (list 'if G15738 G15746 (list 'quote '#f))) (G15649 G15732 G15716 G15738 G15713 G15714))))) (G11489 'tmp))))) G15729 G15728))))) (set! G15655 (lambda (G15676 G15677 G15678 G15679 G15680) (if (null? G15678) (list '(primitive syntax-error) G15676) ((lambda (G15686) ((lambda (G15688) (if G15688 (apply (lambda (G15690 G15691) (if (if (G11615 G15690) (if (not (G11629 G15690 G15677)) (begin '#f (not (G12196 G15690))) '#f) '#f) (if (G11623 G15690 (G12080 '_)) (G12230 G15691 G15679 G15680) ((lambda (G15694 G15695) ((lambda (G15698) (list (G11458 '#f (list G15695) G15698) G15676)) (G12230 (G11595 (G11544 (list G15690) (list G15694)) G15691) (cons (cons G15694 (G11647 'syntax (cons G15695 '0))) G15679) G15680))) (G11493 G15690) (G11489 G15690))) (G15653 G15676 G15677 (cdr G15678) G15679 G15680 G15690 '#t G15691))) G15688) ((lambda (G15700) ((lambda (G15702) (if G15702 (apply (lambda (G15704 G15705 G15706) (G15653 G15676 G15677 (cdr G15678) G15679 G15680 G15704 G15705 G15706)) G15702) (G12427 '#f '"invalid syntax" G15700))) (G12194 G15700 '(any any any)))) G15686))) (G12194 G15686 '(any any)))) (car G15678))))) (lambda (G15656 G15657 G15658) ((lambda (G15662) ((lambda (G15664) (if G15664 (apply (lambda (G15666 G15667 G15668) (begin (G12200 G15667 G15656) ((lambda (G15672) ((lambda (G15674) (list (G11458 '#f (list G15672) G15674) (G12230 G15666 G15657 G15658))) (G15655 G15672 G15667 G15668 G15657 G15658))) (G11489 'tmp)))) G15664) (G12427 '#f '"invalid syntax" G15662))) (G12194 G15662 '(_ any each-any . each-any)))) G15656)))) '#f '#f '#f '#f)))) (set! G12204 (lambda (G15786 G15787 . G15790) ((lambda (G15793) (begin (set! G15793 '...) (begin (if (list? G15787) (void) (assertion-violation G15793 '"not a list" G15787)) (if (null? G15790) (void) ((lambda (G15794) (for-each (lambda (G15796) (begin (if (list? G15796) (void) (assertion-violation G15793 '"not a list" G15796)) (if (= (length G15796) G15794) (void) (assertion-violation G15793 '"length mismatch" G15787 G15796)))) G15790)) (length G15787))) (apply map G15786 G15787 G15790)))) '#f))) (set! G12206 ((lambda () ((lambda (G15799 G15801 G15803 G15805 G15807 G15809 G15811 G15813) (begin (set! G15799 (lambda (G15912 G15913 G15914 G15915 G15916 G15917) ((lambda (G15924) ((lambda (G15926) (if (if G15926 (begin '#f (apply (lambda (G15928) (G15916 G15928)) G15926)) '#f) (apply (lambda (G15930) (G12427 '#f '"misplaced ellipsis in syntax form" G15912)) G15926) ((lambda (G15932) ((lambda (G15934) (if (if G15934 (begin '#f (apply (lambda (G15936) (G11615 G15936)) G15934)) '#f) (apply (lambda (G15938) ((lambda (G15940) ((lambda (G15942) ((lambda () (if (eq? (G11649 G15942) 'syntax) (call-with-values (lambda () ((lambda (G15946) (G15801 G15912 (car G15946) (cdr G15946) G15915)) (G11651 G15942))) (lambda (G15948 G15949) ((lambda (G15952 G15953) (values (list 'ref G15953) G15952)) G15949 G15948))) (values (list 'quote G15913) G15915))))) (G11645 G15940 G15914))) (G11641 G15913))) G15934) ((lambda (G15956) ((lambda (G15958) (if (if G15958 (begin '#f (apply (lambda (G15960 G15961) (G15916 G15960)) G15958)) '#f) (apply (lambda (G15964 G15965) (if G15917 (G12427 '#f '"misplaced ellipsis in syntax form" G15912) (G15799 G15912 G15965 G15914 G15915 (lambda (G15968) '#f) '#f))) G15958) ((lambda (G15970) ((lambda (G15972) (if (if G15972 (begin '#f (apply (lambda (G15974 G15975 G15976) (G15916 G15975)) G15972)) '#f) (apply (lambda (G15980 G15981 G15982) ((letrec ((G15986 (lambda (G15988 G15989) ((lambda (G15992) ((lambda (G15994) (if G15994 (apply (lambda () (G15989 G15915)) G15994) ((lambda (G15996) ((lambda (G15998) (if (if G15998 (begin '#f (apply (lambda (G16000 G16001) (G15916 G16000)) G15998)) '#f) (apply (lambda (G16004 G16005) (G15986 G16005 (lambda (G16008) (call-with-values (lambda () (G15989 (cons '() G16008))) (lambda (G16012 G16013) ((lambda (G16016 G16017) (if (null? (car G16016)) (G12427 '#f '"extra ellipsis in syntax form" G15912) (values (G15805 G16017 (car G16016)) (cdr G16016)))) G16013 G16012)))))) G15998) ((lambda (G16020) ((lambda (G16022) (if G16022 (apply (lambda () (call-with-values (lambda () (G15799 G15912 G15988 G15914 G15915 G15916 G15917)) (lambda (G16026 G16027) ((lambda (G16030 G16031) (call-with-values (lambda () (G15989 G16030)) (lambda (G16036 G16037) ((lambda (G16040 G16041) (values (G15803 G16041 G16031) G16040)) G16037 G16036)))) G16027 G16026)))) G16022) (G12427 '#f '"invalid syntax" G16020))) (G12194 G16020 '_))) G15996))) (G12194 G15996 '(any . any)))) G15992))) (G12194 G15992 '()))) G15988)))) G15986) G15982 (lambda (G16044) (call-with-values (lambda () (G15799 G15912 G15980 G15914 (cons '() G16044) G15916 '#f)) (lambda (G16048 G16049) ((lambda (G16052 G16053) (if (null? (car G16052)) (G12427 '#f '"extra ellipsis in syntax form" G15912) (values (G15807 G16053 (car G16052)) (cdr G16052)))) G16049 G16048)))))) G15972) ((lambda (G16056) ((lambda (G16058) (if G16058 (apply (lambda (G16060 G16061) (call-with-values (lambda () (G15799 G15912 G16060 G15914 G15915 G15916 '#f)) (lambda (G16066 G16067) ((lambda (G16070 G16071) (call-with-values (lambda () (G15799 G15912 G16061 G15914 G16070 G15916 G15917)) (lambda (G16076 G16077) ((lambda (G16080 G16081) (values (G15809 G15913 G16060 G16061 G16071 G16081) G16080)) G16077 G16076)))) G16067 G16066)))) G16058) ((lambda (G16084) ((lambda (G16086) (if G16086 (apply (lambda (G16088) (call-with-values (lambda () (G15799 G15912 G16088 G15914 G15915 G15916 '#t)) (lambda (G16092 G16093) ((lambda (G16096 G16097) (values (G15811 G15913 G16088 G16097) G16096)) G16093 G16092)))) G16086) ((lambda (G16100) ((lambda (G16102) (if G16102 (apply (lambda () (values (list 'quote G15913) G15915)) G16102) (G12427 '#f '"invalid syntax" G16100))) (G12194 G16100 '_))) G16084))) (G12194 G16084 '#(vector each-any)))) G16056))) (G12194 G16056 '(any . any)))) G15970))) (G12194 G15970 '(any any . any)))) G15956))) (G12194 G15956 '(any any)))) G15932))) (G12194 G15932 'any))) G15924))) (G12194 G15924 'any))) G15913))) (set! G15801 (lambda (G15888 G15889 G15890 G15891) (if (= G15890 '0) (values G15889 G15891) (if (null? G15891) (G12427 '#f '"missing ellipsis in syntax form" G15888) (call-with-values (lambda () (G15801 G15888 G15889 (- G15890 '1) (cdr G15891))) (lambda (G15898 G15899) ((lambda (G15902 G15903) ((lambda (G15906) (if G15906 ((lambda (G15908) (values (cdr G15908) G15891)) G15906) ((lambda (G15910) (values G15910 (cons (cons (cons G15903 G15910) (car G15891)) G15902))) (G11489 'tmp)))) (assq G15903 (car G15891)))) G15899 G15898))))))) (set! G15803 (lambda (G15884 G15885) (if (equal? G15885 ''()) G15884 (list 'append G15884 G15885)))) (set! G15805 (lambda (G15880 G15881) (list 'apply '(primitive append) (G15807 G15880 G15881)))) (set! G15807 (lambda (G15862 G15863) ((lambda (G15866 G15867) (if (eq? (car G15862) 'ref) (car G15867) (if (for-all (lambda (G15870) (if (eq? (car G15870) 'ref) (begin '#f (memq (cadr G15870) G15866)) '#f)) (cdr G15862)) ((lambda (G15872) (cons 'map (cons (list 'primitive (car G15862)) G15872))) (map ((lambda (G15874) (lambda (G15876) (cdr (assq (cadr G15876) G15874)))) (map cons G15866 G15867)) (cdr G15862))) (cons* 'map (list 'lambda G15866 G15862) G15867)))) (map cdr G15863) (map (lambda (G15878) (list 'ref (car G15878))) G15863)))) (set! G15809 (lambda (G15847 G15848 G15849 G15850 G15851) ((lambda (G15857) (if (eqv? G15857 'quote) (if (eq? (car G15850) 'quote) ((lambda (G15858 G15859) (if (if (eq? G15858 G15848) (begin '#f (eq? G15859 G15849)) '#f) (list 'quote G15847) (list 'quote (cons G15858 G15859)))) (cadr G15850) (cadr G15851)) (if (null? (cadr G15851)) (list 'list G15850) (list 'cons G15850 G15851))) (if (eqv? G15857 'list) (cons 'list (cons G15850 (cdr G15851))) (list 'cons G15850 G15851)))) (car G15851)))) (set! G15811 (lambda (G15841 G15842 G15843) (if (eq? (car G15843) 'quote) (if (eq? (cadr G15843) G15842) (list 'quote G15841) (list 'quote (list->vector (cadr G15843)))) (if (eq? (car G15843) 'list) (cons 'vector (cdr G15843)) (list 'list->vector G15843))))) (set! G15813 (lambda (G15836) ((lambda (G15838) (if (eqv? G15838 'ref) (cadr G15836) (if (eqv? G15838 'primitive) (list 'primitive (cadr G15836)) (if (eqv? G15838 'quote) (list 'quote (cadr G15836)) (if (eqv? G15838 'lambda) (G11458 '#f (cadr G15836) (G15813 (caddr G15836))) (if (eqv? G15838 'map) ((lambda (G15839) (cons '(primitive ellipsis-map) G15839)) (map G15813 (cdr G15836))) (cons (list 'primitive (car G15836)) (map G15813 (cdr G15836))))))))) (car G15836)))) (lambda (G15814 G15815 G15816) ((lambda (G15820) ((lambda (G15822) (if G15822 (apply (lambda (G15824) (call-with-values (lambda () (G15799 G15814 G15824 G15815 '() G12196 '#f)) (lambda (G15828 G15829) ((lambda (G15832 G15833) (G15813 G15833)) G15829 G15828)))) G15822) (G12427 '#f '"invalid syntax" G15820))) (G12194 G15820 '(_ any)))) G15814)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G12208 (lambda (G16104) ((lambda (G16106) (if (eqv? G16106 'quote) G12114 (if (eqv? G16106 'lambda) G12118 (if (eqv? G16106 'case-lambda) G12116 (if (eqv? G16106 'letrec) G12094 (if (eqv? G16106 'letrec*) G12096 (if (eqv? G16106 'case) G12112 (if (eqv? G16106 'if) G12110 (if (eqv? G16106 'when) G12106 (if (eqv? G16106 'unless) G12108 (if (eqv? G16106 'parameterize) G12188 (if (eqv? G16106 'foreign-call) G12190 (if (eqv? G16106 'syntax-case) G12202 (if (eqv? G16106 'syntax) G12206 (if (eqv? G16106 'type-descriptor) G12100 (if (eqv? G16106 'record-type-descriptor) G12102 (if (eqv? G16106 'record-constructor-descriptor) G12104 (if (eqv? G16106 'fluid-let-syntax) G12098 (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G16104))))))))))))))))))) G16104))) (set! G12210 (lambda (G16107) ((lambda (G16109) ((lambda (G16111) (if (if G16111 (begin '#f (apply (lambda (G16113) (if (for-all G11615 G16113) (begin '#f (G10443 (map G11617 G16113))) '#f)) G16111)) '#f) (apply (lambda (G16115) (G12120 (list 'quote (G10443 (map G11617 G16115))))) G16111) (G12427 '#f '"invalid syntax" G16109))) (G12194 G16109 '(_ . each-any)))) G16107))) (set! G12212 (lambda (G16117 G16118) ((lambda (G16121) ((lambda (G16123) (if (if G16123 (begin '#f (apply (lambda (G16125) (if (G11615 G16125) (begin '#f (memq (G11617 G16125) G16118)) '#f)) G16123)) '#f) (apply (lambda (G16127) (G12120 (list 'quote G16127))) G16123) (G12427 '#f '"invalid syntax" G16121))) (G12194 G16121 '(_ any)))) G16117))) (set! G12214 (lambda (G16129) (if (procedure? G16129) G16129 (if (symbol? G16129) ((lambda (G16131) (if (eqv? G16131 'define-record-type) G12182 (if (eqv? G16131 'define-struct) G12180 (if (eqv? G16131 'include) G12170 (if (eqv? G16131 'cond) G12166 (if (eqv? G16131 'let) G12126 (if (eqv? G16131 'do) G12158 (if (eqv? G16131 'or) G12162 (if (eqv? G16131 'and) G12164 (if (eqv? G16131 'let*) G12160 (if (eqv? G16131 'let-values) G12128 (if (eqv? G16131 'let*-values) G12130 (if (eqv? G16131 'syntax-rules) G12174 (if (eqv? G16131 'quasiquote) G12176 (if (eqv? G16131 'quasisyntax) G12178 (if (eqv? G16131 'with-syntax) G12122 (if (eqv? G16131 'identifier-syntax) G12156 (if (eqv? G16131 'time) G12148 (if (eqv? G16131 'delay) G12150 (if (eqv? G16131 'assert) G12152 (if (eqv? G16131 'endianness) G12154 (if (eqv? G16131 'guard) G12144 (if (eqv? G16131 'define-enumeration) G12146 (if (eqv? G16131 'trace-lambda) G12132 (if (eqv? G16131 'trace-define) G12134 (if (eqv? G16131 'trace-define-syntax) G12136 (if (eqv? G16131 'trace-let-syntax) G12140 (if (eqv? G16131 'trace-letrec-syntax) G12142 (if (eqv? G16131 'define-condition-type) G12184 (if (eqv? G16131 'include-into) G12172 (if (eqv? G16131 'eol-style) (lambda (G16136) (G12212 G16136 '(none lf cr crlf nel crnel ls))) (if (eqv? G16131 'error-handling-mode) (lambda (G16134) (G12212 G16134 '(ignore raise replace))) (if (eqv? G16131 'buffer-mode) (lambda (G16132) (G12212 G16132 '(none line block))) (if (eqv? G16131 'file-options) G12210 (if (memv G16131 '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G12186 (error 'macro-transformer '"BUG: invalid macro" G16129)))))))))))))))))))))))))))))))))))) G16129) (error 'core-macro-transformer '"BUG: invalid macro" G16129))))) (set! G12216 (lambda (G16138) (car G16138))) (set! G12218 (lambda (G16140 G16141) ((lambda (G16144) (begin ((letrec ((G16146 (lambda (G16148) (if (G11559 G16148) (void) (if (pair? G16148) (begin (G16146 (car G16148)) (G16146 (cdr G16148))) (if (vector? G16148) (vector-for-each G16146 G16148) (if (symbol? G16148) (G12427 '#f '"raw symbol encountered in output of macro" G16141 G16148) (void)))))))) G16146) G16144) (G11593 (G11583) G16144 G16141))) (G16140 (G11593 G11585 G16141 '#f))))) (set! G12220 (lambda (G16150 G16151) (G12218 (G12214 G16150) G16151))) (set! G12222 (lambda (G16154 G16155) (G12218 (G12216 G16154) G16155))) (set! G12224 (lambda (G16158 G16159) ((lambda (G16162 G16163) (begin (G11114 G16162) ((lambda (G16166) ((lambda (G16168) (G12218 G16168 G16159)) (if (procedure? G16166) G16166 (assertion-violation 'chi-global-macro '"BUG: not a procedure" G16166)))) (symbol-value G16163)))) (car G16158) (cdr G16158)))) (set! G12226 (lambda (G16170 G16171 G16172) (if (null? G16170) '() ((lambda (G16176) (cons G16176 (G12226 (cdr G16170) G16171 G16172))) (G12230 (car G16170) G16171 G16172))))) (set! G12228 (lambda (G16178 G16179 G16180) ((lambda (G16184) ((lambda (G16186) (if G16186 (apply (lambda (G16188 G16189) ((lambda (G16192) (cons G16192 (G12226 G16189 G16179 G16180))) (G12230 G16188 G16179 G16180))) G16186) (G12427 '#f '"invalid syntax" G16184))) (G12194 G16184 '(any . each-any)))) G16178))) (set! G12230 (lambda (G16194 G16195 G16196) (call-with-values (lambda () (G11655 G16194 G16195)) (lambda (G16203 G16204 G16205) ((lambda (G16209 G16210 G16211) ((lambda (G16215) (if (eqv? G16215 'core-macro) ((lambda (G16265) (G16265 G16194 G16195 G16196)) (G12208 G16210)) (if (eqv? G16215 'global) ((lambda (G16261) ((lambda (G16263) ((lambda () (begin ((G12305) G16261) G16263)))) (cdr G16210))) (car G16210)) (if (eqv? G16215 'core-prim) ((lambda (G16259) (list 'primitive G16259)) G16210) (if (eqv? G16215 'call) (G12228 G16194 G16195 G16196) (if (eqv? G16215 'lexical) ((lambda (G16257) G16257) (G12082 G16210)) (if (memv G16215 '(global-macro global-macro!)) (G12230 (G12224 G16210 G16194) G16195 G16196) (if (memv G16215 '(local-macro local-macro!)) (G12230 (G12222 G16210 G16194) G16195 G16196) (if (memv G16215 '(macro macro!)) (G12230 (G12220 G16210 G16194) G16195 G16196) (if (eqv? G16215 'constant) ((lambda (G16255) (list 'quote G16255)) G16210) (if (eqv? G16215 'set!) (G12232 G16194 G16195 G16196) (if (eqv? G16215 'begin) ((lambda (G16247) ((lambda (G16249) (if G16249 (apply (lambda (G16251 G16252) (G11461 '#f (G12226 (cons G16251 G16252) G16195 G16196))) G16249) (G12427 '#f '"invalid syntax" G16247))) (G12194 G16247 '(_ any . each-any)))) G16194) (if (memv G16215 '(let-syntax letrec-syntax)) ((lambda (G16217) ((lambda (G16219) (if (if G16219 (begin '#f (apply (lambda (G16221 G16222 G16223 G16224) (if (G11625 G16221) (void) (G12427 '#f '"invalid identifiers" G16194))) G16219)) '#f) (apply (lambda (G16229 G16230 G16231 G16232) ((lambda (G16237) ((lambda (G16239) ((lambda (G16241) ((lambda () (G11461 '#f (G12226 (map (lambda (G16243) (G11595 G16239 G16243)) (cons G16231 G16232)) (append (map cons G16237 G16241) G16195) (append (map cons G16237 G16241) G16196)))))) (map (lambda (G16245) (G11686 (G12291 (if (eq? G16211 'let-syntax) G16245 (G11595 G16239 G16245)) G16196))) G16230))) (G11544 G16229 G16237))) (map G11493 G16229))) G16219) (G12427 '#f '"invalid syntax" G16217))) (G12194 G16217 '(_ #(each (any any)) any . each-any)))) G16194) (if (eqv? G16215 'displaced-lexical) (G12427 '#f '"identifier out of context" G16194) (if (eqv? G16215 'syntax) (G12427 '#f '"reference to pattern variable outside a syntax form" G16194) (if (memv G16215 '(define define-syntax module import library)) (G12427 '#f (string-append ((lambda (G16216) (if (eqv? G16216 'define) '"a definition" (if (eqv? G16216 'define-syntax) '"a define-syntax" (if (eqv? G16216 'module) '"a module definition" (if (eqv? G16216 'library) '"a library definition" (if (eqv? G16216 'import) '"an import declaration" '"a non-expression")))))) G16211) '" was found where an expression was expected") G16194) (if (eqv? G16215 'mutable) (G12427 '#f '"attempt to reference an unexportable variable" G16194) (G12427 '#f '"invalid expression" G16194)))))))))))))))))) G16211)) G16205 G16204 G16203))))) (set! G12232 (lambda (G16267 G16268 G16269) ((lambda (G16273) ((lambda (G16275) (if (if G16275 (begin '#f (apply (lambda (G16277 G16278) (G11615 G16277)) G16275)) '#f) (apply (lambda (G16281 G16282) (call-with-values (lambda () (G11655 G16281 G16268)) (lambda (G16288 G16289 G16290) ((lambda (G16294 G16295 G16296) ((lambda (G16300) (if (eqv? G16300 'lexical) (begin (G12086 G16295 '#t) (list 'set! (G12082 G16295) (G12230 G16282 G16268 G16269))) (if (eqv? G16300 'core-prim) (G12427 '#f '"cannot modify imported core primitive" G16267) (if (eqv? G16300 'global) (G12427 '#f '"attempt to modify imported binding" G16267) (if (eqv? G16300 'global-macro!) (G12230 (G12224 G16295 G16267) G16268 G16269) (if (eqv? G16300 'local-macro!) (G12230 (G12222 G16295 G16267) G16268 G16269) (if (eqv? G16300 'mutable) (G12427 '#f '"attempt to assign to an unexportable variable" G16267) (G12427 '#f '"invalid syntax" G16267)))))))) G16296)) G16290 G16289 G16288)))) G16275) (G12427 '#f '"invalid syntax" G16273))) (G12194 G16273 '(_ any any)))) G16267))) (set! G12234 (lambda (G16301 G16302) ((lambda (G16305) ((lambda (G16307) (if G16307 (apply (lambda (G16309) (if (G11625 G16309) (void) (G12124 G16302 G16301))) G16307) ((lambda (G16311) ((lambda (G16313) (if G16313 (apply (lambda (G16315 G16316) (if (G11625 (cons G16316 G16315)) (void) (G12124 G16302 G16301))) G16313) ((lambda (G16319) ((lambda (G16321) (if G16321 (apply (lambda () (G12427 '#f '"invalid syntax" G16302)) G16321) (G12427 '#f '"invalid syntax" G16319))) (G12194 G16319 '_))) G16311))) (G12194 G16311 '#(each+ any () any)))) G16305))) (G12194 G16305 'each-any))) G16301))) (set! G12236 (lambda (G16323 G16324 G16325 G16326 G16327) ((lambda (G16333) ((lambda (G16335) (if G16335 (apply (lambda (G16337) (begin (G12234 G16324 G16323) ((lambda (G16339 G16340) (values G16339 (G12252 (G11595 (G11544 G16337 G16340) G16325) (G12090 G16340 G16339 G16326) G16327))) (map G11489 G16337) (map G11493 G16337)))) G16335) ((lambda (G16343) ((lambda (G16345) (if G16345 (apply (lambda (G16347 G16348) (begin (G12234 G16324 G16323) ((lambda (G16351 G16352 G16353 G16354) (values (append G16351 G16353) (G12252 (G11595 (G11544 (cons G16348 G16347) (cons G16354 G16352)) G16325) (G12090 (cons G16354 G16352) (cons G16353 G16351) G16326) G16327))) (map G11489 G16347) (map G11493 G16347) (G11489 G16348) (G11493 G16348)))) G16345) ((lambda (G16359) ((lambda (G16361) (if G16361 (apply (lambda () (G12427 '#f '"invalid syntax" G16324)) G16361) (G12427 '#f '"invalid syntax" G16359))) (G12194 G16359 '_))) G16343))) (G12194 G16343 '#(each+ any () any)))) G16333))) (G12194 G16333 'each-any))) G16324))) (set! G12238 (lambda (G16363 G16364 G16365 G16366 G16367) (if (null? G16364) (values '() '()) (call-with-values (lambda () (G12236 G16363 (car G16364) (car G16365) G16366 G16367)) (lambda (G16375 G16376) ((lambda (G16379 G16380) (call-with-values (lambda () (G12238 G16363 (cdr G16364) (cdr G16365) G16366 G16367)) (lambda (G16385 G16386) ((lambda (G16389 G16390) (values (cons G16380 G16390) (cons G16379 G16389))) G16386 G16385)))) G16376 G16375)))))) (set! G12240 (lambda (G16393 G16394 G16395) ((lambda (G16399 G16400) (call-with-values (lambda () (G12236 G16399 G16399 G16400 G16394 G16395)) (lambda (G16405 G16406) ((lambda (G16409 G16410) (G11458 '#f G16410 G16409)) G16406 G16405)))) (car G16393) (cdr G16393)))) (set! G12242 (lambda (G16413 G16414 G16415) ((lambda (G16419) (if (eqv? G16419 'defun) (G12240 (cdr G16413) G16414 G16415) (if (eqv? G16419 'expr) ((lambda (G16422) (G12230 G16422 G16414 G16415)) (cdr G16413)) (if (eqv? G16419 'top-expr) ((lambda (G16420) (G11461 '#f (list (G12230 G16420 G16414 G16415) (G11462)))) (cdr G16413)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G16413))))) (car G16413)))) (set! G12244 (lambda (G16424 G16425 G16426 G16427 G16428) ((letrec ((G16434 (lambda (G16436 G16437) (if (null? G16436) (map (lambda (G16440) (G12230 G16440 G16427 G16428)) G16426) ((lambda (G16442 G16443) ((lambda (G16446) (if (eqv? G16446 'defun) ((lambda (G16451) (cons (list 'set! G16442 G16451) (G16434 (cdr G16436) (cdr G16437)))) (G12240 (cdr G16443) G16427 G16428)) (if (eqv? G16446 'expr) ((lambda (G16449) (cons (list 'set! G16442 G16449) (G16434 (cdr G16436) (cdr G16437)))) (G12230 (cdr G16443) G16427 G16428)) (if (eqv? G16446 'top-expr) ((lambda (G16447) (cons G16447 (G16434 (cdr G16436) (cdr G16437)))) (G12230 (cdr G16443) G16427 G16428)) (error 'expand-interaction '"invallid" G16443))))) (car G16443))) (car G16436) (car G16437)))))) G16434) G16424 G16425))) (set! G12246 (lambda (G16453 G16454 G16455) ((letrec ((G16459 (lambda (G16461) (if (null? G16461) '() ((lambda (G16463) (cons G16463 (G16459 (cdr G16461)))) (G12242 (car G16461) G16454 G16455)))))) G16459) G16453))) (set! G12248 (lambda (G16465 G16466 G16467) (if (null? G16466) '#f (if (G11621 G16465 (car G16466)) (car G16467) (G12248 G16465 (cdr G16466) (cdr G16467)))))) (set! G12250 (lambda (G16471) ((letrec ((G16473 (lambda (G16475 G16476) (if (null? G16475) G16476 ((lambda (G16479) (if G16479 ((lambda (G16481) (G16473 (cdr G16475) (cons (list (car G16475) G16481) G16476))) G16479) (G16473 (cdr G16475) G16476))) (G12248 (car G16475) (cdr G16475) (cdr G16475))))))) G16473) G16471 '()))) (set! G12252 (lambda (G16483 G16484 G16485) ((lambda (G16489) (call-with-values (lambda () (G12289 (map (lambda (G16498) (G11595 G16489 G16498)) (G11613 G16483)) G16484 G16485 '() '() '() '() G16489 '#f)) (lambda (G16500 G16501 G16502 G16503 G16504 G16505 G16506) ((lambda (G16514 G16515 G16516 G16517 G16518 G16519 G16520) (begin (if (null? G16520) (G12427 '#f '"no expression in body" G16520) (void)) ((lambda (G16528) ((lambda (G16530) ((lambda () (G11464 '#f (reverse G16517) (reverse G16530) (G11461 '#f G16528))))) (G12246 G16516 G16519 G16518))) (G12226 (append (apply append (reverse G16515)) G16520) G16519 G16518)))) G16506 G16505 G16504 G16503 G16502 G16501 G16500)))) (G11534)))) (set! G12254 (lambda (G16532) ((lambda (G16534) ((lambda (G16536) (if G16536 (apply (lambda (G16538 G16539) (begin (if (for-all G11615 G16538) (void) (G12427 '#f '"module exports must be identifiers" G16532)) (values '#f (list->vector G16538) G16539))) G16536) ((lambda (G16542) ((lambda (G16544) (if G16544 (apply (lambda (G16546 G16547 G16548) (begin (if (G11615 G16546) (void) (G12427 '#f '"module name must be an identifier" G16532)) (if (for-all G11615 G16547) (void) (G12427 '#f '"module exports must be identifiers" G16532)) (values G16546 (list->vector G16547) G16548))) G16544) (G12427 '#f '"invalid syntax" G16542))) (G12194 G16542 '(_ any each-any . each-any)))) G16534))) (G12194 G16534 '(_ each-any . each-any)))) G16532))) (set! G12260 (make-record-type-descriptor 'module-interface '#f 'G12258 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G12262 '#f) (set! G12264 (make-record-constructor-descriptor G12260 '#f G12262)) (set! G12269 (record-predicate G12260)) (set! G12271 (record-constructor G12264)) (set! G12273 (record-accessor G12260 '0)) (set! G12275 (record-accessor G12260 '1)) (set! G12277 (record-accessor G12260 '2)) (set! G12279 (record-mutator G12260 '0)) (set! G12281 (record-mutator G12260 '1)) (set! G12283 (record-mutator G12260 '2)) (set! G12285 (lambda (G16552 G16553) ((lambda (G16557) (begin (set! G16557 (lambda (G16564 G16565) (begin (if (null? G16564) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G16568) (if (eq? G16568 G16565) '() (cons G16568 (G16557 (cdr G16564) G16565)))) (car G16564))))) ((lambda (G16558 G16559) (if (null? G16558) G16559 (vector-map (lambda (G16562) (G11561 (G11563 G16562) (append G16558 (G11565 G16562)) '() '())) G16559))) (G16557 (G11565 G16553) (G12273 G16552)) (G12275 G16552)))) '#f))) (set! G12287 (lambda (G16570 G16571 G16572 G16573 G16574 G16575 G16576) (call-with-values (lambda () (G12254 G16570)) (lambda (G16587 G16588 G16589) ((lambda (G16593 G16594 G16595) ((lambda (G16599) ((lambda (G16601) ((lambda () (call-with-values (lambda () (G12289 G16601 G16571 G16572 G16573 G16574 G16575 G16576 G16599 '#f)) (lambda (G16610 G16611 G16612 G16613 G16614 G16615 G16616) ((lambda (G16624 G16625 G16626 G16627 G16628 G16629 G16630) ((lambda (G16638 G16639) (if (not G16595) (values G16627 G16626 G16594 G16638 G16629 G16628 G16639 G16624) ((lambda (G16642 G16643) (values G16627 G16626 (vector G16595) (vector G16642) (cons (cons G16642 (cons '$module G16643)) G16629) (cons (cons G16642 (cons '$module G16643)) G16628) G16639 G16624)) (G11493 'module) (G12271 (car (G11565 G16595)) (vector-map (lambda (G16646) (G11561 (G11563 G16646) (G11565 G16646) '() '())) G16594) G16638)))) (vector-map (lambda (G16648) ((lambda (G16650) (if G16650 G16650 (begin '#f (G12427 '#f '"cannot find module export" G16648)))) (G11641 (G11561 (G11617 G16648) (G11565 G16648) (list G16599) '())))) G16594) (cons G16630 G16625))) G16616 G16615 G16614 G16613 G16612 G16611 G16610)))))) (map (lambda (G16652) (G11595 G16599 G16652)) (G11613 G16593)))) (G11534))) G16589 G16588 G16587))))) (set! G12289 (lambda (G16654 G16655 G16656 G16657 G16658 G16659 G16660 G16661 G16662) (if (null? G16654) (values G16654 G16655 G16656 G16657 G16658 G16659 G16660) ((lambda (G16672) (call-with-values (lambda () (G11655 G16672 G16655)) (lambda (G16677 G16678 G16679) ((lambda (G16683 G16684 G16685) ((lambda (G16689) ((lambda (G16691) (if (eqv? G16691 'define) (call-with-values (lambda () (G12074 G16672)) (lambda (G16882 G16883) ((lambda (G16886 G16887) (begin (if (G11629 G16887 G16689) (G12427 '#f '"cannot redefine keyword" G16672) (void)) (call-with-values (lambda () (G11497 G16887 G16661)) (lambda (G16892 G16893) ((lambda (G16896 G16897) (begin (G11536 G16661 G16887 G16897) (G12289 (cdr G16654) (G12088 G16897 G16896 G16655) G16656 (cons G16896 G16657) (cons G16886 G16658) G16659 G16689 G16661 G16662))) G16893 G16892))))) G16883 G16882))) (if (eqv? G16691 'define-syntax) (call-with-values (lambda () (G12076 G16672)) (lambda (G16866 G16867) ((lambda (G16870 G16871) (begin (if (G11629 G16871 G16689) (G12427 '#f '"cannot redefine keyword" G16672) (void)) ((lambda (G16874 G16875) (begin (G11536 G16661 G16871 G16874) ((lambda (G16878) (G12289 (cdr G16654) (cons (cons G16874 G16878) G16655) (cons (cons G16874 G16878) G16656) G16657 G16658 G16659 G16689 G16661 G16662)) (G11686 G16875)))) (G11499 G16871 G16661) (G12291 G16870 G16656)))) G16867 G16866))) (if (memv G16691 '(let-syntax letrec-syntax)) ((lambda (G16838) ((lambda (G16840) (if (if G16840 (begin '#f (apply (lambda (G16842 G16843 G16844) (if (G11625 G16842) (void) (G12427 '#f '"invalid identifiers" G16672))) G16840)) '#f) (apply (lambda (G16848 G16849 G16850) ((lambda (G16854) ((lambda (G16856) ((lambda (G16858) ((lambda () (G12289 (append (map (lambda (G16860) (G11595 G16856 G16860)) G16850) (cdr G16654)) (append (map cons G16854 G16858) G16655) (append (map cons G16854 G16858) G16656) G16657 G16658 G16659 G16689 G16661 G16662)))) (map (lambda (G16862) (G11686 (G12291 (if (eq? G16685 'let-syntax) G16862 (G11595 G16856 G16862)) G16656))) G16849))) (G11544 G16848 G16854))) (map G11493 G16848))) G16840) (G12427 '#f '"invalid syntax" G16838))) (G12194 G16838 '(_ #(each (any any)) . each-any)))) G16672) (if (eqv? G16691 'begin) ((lambda (G16832) ((lambda (G16834) (if G16834 (apply (lambda (G16836) (G12289 (append G16836 (cdr G16654)) G16655 G16656 G16657 G16658 G16659 G16689 G16661 G16662)) G16834) (G12427 '#f '"invalid syntax" G16832))) (G12194 G16832 '(_ . each-any)))) G16672) (if (memv G16691 '(global-macro global-macro!)) (G12289 (cons (G11595 G16661 (G12224 G16684 G16672)) (cdr G16654)) G16655 G16656 G16657 G16658 G16659 G16689 G16661 G16662) (if (memv G16691 '(local-macro local-macro!)) (G12289 (cons (G11595 G16661 (G12222 G16684 G16672)) (cdr G16654)) G16655 G16656 G16657 G16658 G16659 G16689 G16661 G16662) (if (memv G16691 '(macro macro!)) (G12289 (cons (G11595 G16661 (G12220 G16684 G16672)) (cdr G16654)) G16655 G16656 G16657 G16658 G16659 G16689 G16661 G16662) (if (eqv? G16691 'module) (call-with-values (lambda () (G12287 G16672 G16655 G16656 G16657 G16658 G16659 G16689)) (lambda (G16796 G16797 G16798 G16799 G16800 G16801 G16802 G16803) ((lambda (G16812 G16813 G16814 G16815 G16816 G16817 G16818 G16819) (begin (vector-for-each (lambda (G16828 G16829) (G11536 G16661 G16828 G16829)) G16817 G16816) (G12289 (cdr G16654) G16815 G16814 G16819 G16818 G16813 G16812 G16661 G16662))) G16803 G16802 G16801 G16800 G16799 G16798 G16797 G16796))) (if (eqv? G16691 'library) (begin (G12401 (G11637 G16672)) (G12289 (cdr G16654) G16655 G16656 G16657 G16658 G16659 G16689 G16661 G16662)) (if (eqv? G16691 'import) (begin ((lambda () ((lambda (G16693 G16695 G16697) (begin (set! G16693 (lambda (G16768) ((lambda (G16770) ((lambda (G16772) (if (if G16772 (begin '#f (apply (lambda (G16774) (G11615 G16774)) G16772)) '#f) (apply (lambda (G16776) '#t) G16772) ((lambda (G16778) ((lambda (G16780) (if G16780 (apply (lambda (G16782) '#f) G16780) ((lambda (G16784) ((lambda (G16786) (if G16786 (apply (lambda () (G12427 '#f '"malformed import form" G16768)) G16786) (G12427 '#f '"invalid syntax" G16784))) (G12194 G16784 '_))) G16778))) (G12194 G16778 '(_ . each-any)))) G16770))) (G12194 G16770 '(_ any)))) G16768))) (set! G16695 (lambda (G16738 G16739) ((lambda (G16742) ((lambda (G16744) (if (if G16744 (begin '#f (apply (lambda (G16746) (G11615 G16746)) G16744)) '#f) (apply (lambda (G16748) (call-with-values (lambda () (G11655 G16748 G16739)) (lambda (G16753 G16754 G16755) ((lambda (G16759 G16760 G16761) ((lambda (G16765) (if (eqv? G16765 '$module) ((lambda (G16766) (values (G12285 G16766 G16748) (G12277 G16766))) G16760) (G12427 '#f '"invalid import" G16738))) G16761)) G16755 G16754 G16753)))) G16744) (G12427 '#f '"invalid syntax" G16742))) (G12194 G16742 '(_ any)))) G16738))) (set! G16697 (lambda (G16712) ((lambda (G16714) ((lambda (G16716) (if G16716 (apply (lambda (G16718 G16719) (call-with-values (lambda () (G12299 (G12433 G16719))) (lambda (G16724 G16725) ((lambda (G16728 G16729) (values (vector-map (lambda (G16732) (G11581 G16718 G16732)) G16729) G16728)) G16725 G16724)))) G16716) ((lambda (G16734) ((lambda (G16736) (if G16736 (apply (lambda () (G12427 '#f '"invalid import form" G16712)) G16736) (G12427 '#f '"invalid syntax" G16734))) (G12194 G16734 '_))) G16714))) (G12194 G16714 '(any . each-any)))) G16712))) (call-with-values (lambda () (if (G16693 G16672) (G16695 G16672 G16655) (G16697 G16672))) (lambda (G16700 G16701) ((lambda (G16704 G16705) (vector-for-each (lambda (G16708 G16709) (G11536 G16661 G16708 G16709)) G16705 G16704)) G16701 G16700))))) '#f '#f '#f))) (G12289 (cdr G16654) G16655 G16656 G16657 G16658 G16659 G16689 G16661 G16662)) (if G16662 (G12289 (cdr G16654) G16655 G16656 (cons (G11489 'dummy) G16657) (cons (cons 'top-expr G16672) G16658) G16659 G16689 G16661 G16662) (values G16654 G16655 G16656 G16657 G16658 G16659 G16689))))))))))))) G16685)) (if (G11615 G16683) (cons G16683 G16660) G16660))) G16679 G16678 G16677)))) (car G16654))))) (set! G12291 (lambda (G16900 G16901) ((lambda (G16904) ((lambda (G16906) (begin (for-each ((lambda (G16908) (lambda (G16910) (begin (G11113 G16910) (G16908 G16910)))) (G12307)) (G16904)) G16906)) ((lambda (G16916 G16917 G16918 G16919) ((lambda (G16924) (dynamic-wind G16924 (lambda () (G12230 G16900 G16901 G16901)) G16924)) (lambda () (begin ((lambda (G16926) (begin (G16916 G16918) (set! G16918 G16926))) (G16916)) ((lambda (G16928) (begin (G16917 G16919) (set! G16919 G16928))) (G16917)))))) G12305 G12307 G16904 (lambda (G16930) (values))))) (G12303)))) (set! G12293 (lambda (G16932) ((lambda (G16935) (begin (set! G16935 (lambda (G16964) (symbol? (G12433 G16964)))) ((letrec ((G16936 (lambda (G16938 G16939 G16940) (if (null? G16938) (begin ((lambda (G16944) (if (G11625 G16944) (void) (G12427 'export '"invalid exports" (G12250 G16944)))) (map (lambda (G16946) (G11561 G16946 G11485 '() '())) G16940)) (values (map G12433 G16939) (map G12433 G16940))) ((lambda (G16948) ((lambda (G16950) (if G16950 (apply (lambda (G16952 G16953 G16954) (begin (if (if (eq? (G12433 G16952) 'rename) (if (for-all G16935 G16953) (begin '#f (for-all G16935 G16954)) '#f) '#f) (void) (G12427 'export '"invalid export specifier" (car G16938))) (G16936 (cdr G16938) (append G16953 G16939) (append G16954 G16940)))) G16950) ((lambda (G16958) ((lambda (G16960) (if G16960 (apply (lambda (G16962) (begin (if (G16935 G16962) (void) (G12427 'export '"invalid export" G16962)) (G16936 (cdr G16938) (cons G16962 G16939) (cons G16962 G16940)))) G16960) (G12427 '#f '"invalid syntax" G16958))) (G12194 G16958 'any))) G16948))) (G12194 G16948 '(any . #(each (any any)))))) (car G16938)))))) G16936) G16932 '() '()))) '#f))) (set! G12295 (lambda (G16966) ((lambda (G16969) (begin (set! G16969 (lambda (G16980) ((lambda (G16982) ((lambda (G16984) (if (if G16984 (begin '#f (apply (lambda (G16986) (for-all (lambda (G16988) ((lambda (G16990) (if (integer? G16990) (begin '#f (exact? G16990)) '#f)) (G12433 G16988))) G16986)) G16984)) '#f) (apply (lambda (G16992) (values '() (map G12433 G16992))) G16984) ((lambda (G16994) ((lambda (G16996) (if (if G16996 (begin '#f (apply (lambda (G16998 G16999) (symbol? (G12433 G16998))) G16996)) '#f) (apply (lambda (G17002 G17003) (call-with-values (lambda () (G16969 G17003)) (lambda (G17008 G17009) ((lambda (G17012 G17013) (values (cons (G12433 G17002) G17013) G17012)) G17009 G17008)))) G16996) ((lambda (G17016) ((lambda (G17018) (if G17018 (apply (lambda () (values '() '())) G17018) ((lambda (G17020) ((lambda (G17022) (if G17022 (apply (lambda () (G12427 '#f '"invalid library name" G16966)) G17022) (G12427 '#f '"invalid syntax" G17020))) (G12194 G17020 '_))) G17016))) (G12194 G17016 '()))) G16994))) (G12194 G16994 '(any . any)))) G16982))) (G12194 G16982 '(each-any)))) G16980))) (call-with-values (lambda () (G16969 G16966)) (lambda (G16972 G16973) ((lambda (G16976 G16977) (begin (if (null? G16977) (G12427 '#f '"empty library name" G16966) (void)) (values G16977 G16976))) G16973 G16972))))) '#f))) (set! G12297 (lambda (G17024) ((lambda (G17026) ((lambda (G17028) (if (if G17028 (begin '#f (apply (lambda (G17030 G17031 G17032 G17033 G17034 G17035 G17036) (if (eq? (G12433 G17032) 'export) (if (eq? (G12433 G17034) 'import) (begin '#f (eq? (G12433 G17030) 'library)) '#f) '#f)) G17028)) '#f) (apply (lambda (G17044 G17045 G17046 G17047 G17048 G17049 G17050) (values G17045 G17047 G17049 G17050)) G17028) ((lambda (G17058) ((lambda (G17060) (if G17060 (apply (lambda () (G12427 '#f '"malformed library" G17024)) G17060) (G12427 '#f '"invalid syntax" G17058))) (G12194 G17058 '_))) G17026))) (G12194 G17026 '(any each-any (any . each-any) (any . each-any) . each-any)))) G17024))) (set! G12299 (lambda (G17062) ((lambda (G17065 G17067 G17069 G17071 G17073 G17075 G17077 G17079 G17081 G17083 G17085) (begin (set! G17065 (lambda (G17572) (symbol? (G12433 G17572)))) (set! G17067 (lambda (G17570) (G12427 'import '"two imports with different bindings" G17570))) (set! G17069 (lambda (G17552 G17553) ((lambda (G17557) (begin (set! G17557 (lambda (G17558 G17559) ((lambda (G17562 G17563) ((lambda (G17566) (if G17566 ((lambda (G17568) (if (eq? (cdr G17568) G17563) G17559 (G17067 G17562))) G17566) (cons G17558 G17559))) (assq G17562 G17559))) (car G17558) (cdr G17558)))) (if (null? G17552) G17553 (G17557 (car G17552) (G17069 (cdr G17552) G17553))))) '#f))) (set! G17071 (lambda (G17510 G17511) ((lambda (G17515) (begin (set! G17515 (lambda (G17536 G17537) (if (null? G17537) (G12427 'import '"cannot rename unbound identifier" G17536) (if (eq? G17536 (caar G17537)) (values (cdar G17537) (cdr G17537)) ((lambda (G17540) (call-with-values (lambda () (G17515 G17536 (cdr G17537))) (lambda (G17544 G17545) ((lambda (G17548 G17549) (values G17549 (cons G17540 G17548))) G17545 G17544)))) (car G17537)))))) (if (null? G17510) (values '() G17511) (call-with-values (lambda () (G17515 (car G17510) G17511)) (lambda (G17518 G17519) ((lambda (G17522 G17523) (call-with-values (lambda () (G17071 (cdr G17510) G17522)) (lambda (G17528 G17529) ((lambda (G17532 G17533) (values (cons G17523 G17533) G17532)) G17529 G17528)))) G17519 G17518)))))) '#f))) (set! G17073 (lambda (G17502 G17503) (map (lambda (G17506) ((lambda (G17508) (if G17508 (cdr G17508) (G12427 'import '"cannot find identifier" G17506))) (assq G17506 G17503))) G17502))) (set! G17075 (lambda (G17494 G17495) ((letrec ((G17498 (lambda (G17500) (if (null? G17500) '() (if (memq (caar G17500) G17494) (G17498 (cdr G17500)) (cons (car G17500) (G17498 (cdr G17500)))))))) G17498) G17495))) (set! G17077 (lambda (G17492) (if (null? G17492) '() (if (memq (car G17492) (cdr G17492)) (G17077 (cdr G17492)) (cons (car G17492) (G17077 (cdr G17492))))))) (set! G17079 (lambda (G17264) ((lambda (G17267 G17269 G17271) (begin (set! G17267 (lambda (G17490) (if (integer? G17490) (if (exact? G17490) (begin '#f (>= G17490 '0)) '#f) '#f))) (set! G17269 (lambda (G17394) ((lambda (G17396) ((lambda (G17398) (if (if G17398 (begin '#f (apply (lambda (G17400) (G17267 (G12433 G17400))) G17398)) '#f) (apply (lambda (G17402) (lambda (G17404) (= G17404 (G12433 G17402)))) G17398) ((lambda (G17406) ((lambda (G17408) (if (if G17408 (begin '#f (apply (lambda (G17410 G17411) (eq? (G12433 G17410) 'and)) G17408)) '#f) (apply (lambda (G17414 G17415) ((lambda (G17418) (lambda (G17420) (for-all (lambda (G17422) (G17422 G17420)) G17418))) (map G17269 G17415))) G17408) ((lambda (G17424) ((lambda (G17426) (if (if G17426 (begin '#f (apply (lambda (G17428 G17429) (eq? (G12433 G17428) 'or)) G17426)) '#f) (apply (lambda (G17432 G17433) ((lambda (G17436) (lambda (G17438) (exists (lambda (G17440) (G17440 G17438)) G17436))) (map G17269 G17433))) G17426) ((lambda (G17442) ((lambda (G17444) (if (if G17444 (begin '#f (apply (lambda (G17446 G17447) (eq? (G12433 G17446) 'not)) G17444)) '#f) (apply (lambda (G17450 G17451) ((lambda (G17454) (lambda (G17456) (not (G17454 G17456)))) (G17269 G17451))) G17444) ((lambda (G17458) ((lambda (G17460) (if (if G17460 (begin '#f (apply (lambda (G17462 G17463) (if (eq? (G12433 G17462) '<=) (begin '#f (G17267 (G12433 G17463))) '#f)) G17460)) '#f) (apply (lambda (G17466 G17467) (lambda (G17470) (<= G17470 (G12433 G17467)))) G17460) ((lambda (G17472) ((lambda (G17474) (if (if G17474 (begin '#f (apply (lambda (G17476 G17477) (if (eq? (G12433 G17476) '>=) (begin '#f (G17267 G17477)) '#f)) G17474)) '#f) (apply (lambda (G17480 G17481) (lambda (G17484) (>= G17484 (G12433 G17481)))) G17474) ((lambda (G17486) ((lambda (G17488) (if G17488 (apply (lambda () (G12427 'import '"invalid sub-version spec" G17264 G17394)) G17488) (G12427 '#f '"invalid syntax" G17486))) (G12194 G17486 '_))) G17472))) (G12194 G17472 '(any any)))) G17458))) (G12194 G17458 '(any any)))) G17442))) (G12194 G17442 '(any any)))) G17424))) (G12194 G17424 '(any . each-any)))) G17406))) (G12194 G17406 '(any . each-any)))) G17396))) (G12194 G17396 'any))) G17394))) (set! G17271 (lambda (G17314) ((lambda (G17316) ((lambda (G17318) (if G17318 (apply (lambda () (lambda (G17320) '#t)) G17318) ((lambda (G17322) ((lambda (G17324) (if (if G17324 (begin '#f (apply (lambda (G17326 G17327) (eq? (G12433 G17326) 'and)) G17324)) '#f) (apply (lambda (G17330 G17331) ((lambda (G17334) (lambda (G17336) (for-all (lambda (G17338) (G17338 G17336)) G17334))) (map G17271 G17331))) G17324) ((lambda (G17340) ((lambda (G17342) (if (if G17342 (begin '#f (apply (lambda (G17344 G17345) (eq? (G12433 G17344) 'or)) G17342)) '#f) (apply (lambda (G17348 G17349) ((lambda (G17352) (lambda (G17354) (exists (lambda (G17356) (G17356 G17354)) G17352))) (map G17271 G17349))) G17342) ((lambda (G17358) ((lambda (G17360) (if (if G17360 (begin '#f (apply (lambda (G17362 G17363) (eq? (G12433 G17362) 'not)) G17360)) '#f) (apply (lambda (G17366 G17367) ((lambda (G17370) (lambda (G17372) (not (G17370 G17372)))) (G17271 G17367))) G17360) ((lambda (G17374) ((lambda (G17376) (if G17376 (apply (lambda (G17378) ((lambda (G17380) (lambda (G17382) ((letrec ((G17384 (lambda (G17386 G17387) (if (null? G17386) '#t (if (null? G17387) '#f (if ((car G17386) (car G17387)) (begin '#f (G17384 (cdr G17386) (cdr G17387))) '#f)))))) G17384) G17380 G17382))) (map G17269 G17378))) G17376) ((lambda (G17390) ((lambda (G17392) (if G17392 (apply (lambda () (G12427 'import '"invalid version spec" G17264 G17314)) G17392) (G12427 '#f '"invalid syntax" G17390))) (G12194 G17390 '_))) G17374))) (G12194 G17374 'each-any))) G17358))) (G12194 G17358 '(any any)))) G17340))) (G12194 G17340 '(any . each-any)))) G17322))) (G12194 G17322 '(any . each-any)))) G17316))) (G12194 G17316 '()))) G17314))) ((letrec ((G17272 (lambda (G17274) ((lambda (G17276) ((lambda (G17278) (if G17278 (apply (lambda (G17280) (values '() (G17271 G17280))) G17278) ((lambda (G17282) ((lambda (G17284) (if (if G17284 (begin '#f (apply (lambda (G17286 G17287) (G17065 G17286)) G17284)) '#f) (apply (lambda (G17290 G17291) (call-with-values (lambda () (G17272 G17291)) (lambda (G17296 G17297) ((lambda (G17300 G17301) (values (cons (G12433 G17290) G17301) G17300)) G17297 G17296)))) G17284) ((lambda (G17304) ((lambda (G17306) (if G17306 (apply (lambda () (values '() (lambda (G17308) '#t))) G17306) ((lambda (G17310) ((lambda (G17312) (if G17312 (apply (lambda () (G12427 '#f '"invalid import spec" G17264)) G17312) (G12427 '#f '"invalid syntax" G17310))) (G12194 G17310 '_))) G17304))) (G12194 G17304 '()))) G17282))) (G12194 G17282 '(any . any)))) G17276))) (G12194 G17276 '(each-any)))) G17274)))) G17272) G17264))) '#f '#f '#f))) (set! G17081 (lambda (G17250) (call-with-values (lambda () (G17079 G17250)) (lambda (G17254 G17255) ((lambda (G17258 G17259) (begin (if (null? G17259) (G12427 'import '"empty library name" G17250) (void)) ((lambda (G17262) (begin (if G17262 (void) (G12427 'import '"cannot find library with required name" G17259)) (if (G17258 (G11066 G17262)) (void) (G12427 'import '"library does not satisfy version specification" G17250 G17262)) ((G12309) G17262) (G11070 G17262))) (G11106 G17259)))) G17255 G17254))))) (set! G17083 (lambda (G17108) ((lambda (G17110) ((lambda (G17112) (if (if G17112 (begin '#f (apply (lambda (G17114 G17115) (not (memq (G12433 G17114) '(for rename except only prefix library)))) G17112)) '#f) (apply (lambda (G17118 G17119) (G17081 (cons G17118 G17119))) G17112) ((lambda (G17122) ((lambda (G17124) (if (if G17124 (begin '#f (apply (lambda (G17126 G17127 G17128 G17129) (if (eq? (G12433 G17126) 'rename) (if (for-all G17065 G17128) (begin '#f (for-all G17065 G17129)) '#f) '#f)) G17124)) '#f) (apply (lambda (G17134 G17135 G17136 G17137) ((lambda (G17142 G17143 G17144) ((lambda (G17148) ((lambda (G17150) (G17069 (map cons G17144 G17148) G17150)) (G17075 G17143 G17142))) (G17073 G17143 G17142))) (G17083 G17135) (map G12433 G17136) (map G12433 G17137))) G17124) ((lambda (G17152) ((lambda (G17154) (if (if G17154 (begin '#f (apply (lambda (G17156 G17157 G17158) (if (eq? (G12433 G17156) 'except) (begin '#f (for-all G17065 G17158)) '#f)) G17154)) '#f) (apply (lambda (G17162 G17163 G17164) ((lambda (G17168) (G17075 (map G12433 G17164) G17168)) (G17083 G17163))) G17154) ((lambda (G17170) ((lambda (G17172) (if (if G17172 (begin '#f (apply (lambda (G17174 G17175 G17176) (if (eq? (G12433 G17174) 'only) (begin '#f (for-all G17065 G17176)) '#f)) G17172)) '#f) (apply (lambda (G17180 G17181 G17182) ((lambda (G17186 G17187) ((lambda (G17190) ((lambda (G17192) (map cons G17190 G17192)) (G17073 G17190 G17186))) (G17077 G17187))) (G17083 G17181) (map G12433 G17182))) G17172) ((lambda (G17194) ((lambda (G17196) (if (if G17196 (begin '#f (apply (lambda (G17198 G17199 G17200) (if (eq? (G12433 G17198) 'prefix) (begin '#f (G17065 G17200)) '#f)) G17196)) '#f) (apply (lambda (G17204 G17205 G17206) ((lambda (G17210 G17211) (map (lambda (G17214) (cons (string->symbol (string-append G17211 (symbol->string (car G17214)))) (cdr G17214))) G17210)) (G17083 G17205) (symbol->string (G12433 G17206)))) G17196) ((lambda (G17216) ((lambda (G17218) (if (if G17218 (begin '#f (apply (lambda (G17220 G17221) (eq? (G12433 G17220) 'library)) G17218)) '#f) (apply (lambda (G17224 G17225) (G17081 G17225)) G17218) ((lambda (G17228) ((lambda (G17230) (if (if G17230 (begin '#f (apply (lambda (G17232 G17233 G17234) (eq? (G12433 G17232) 'for)) G17230)) '#f) (apply (lambda (G17238 G17239 G17240) (G17083 G17239)) G17230) ((lambda (G17244) ((lambda (G17246) (if G17246 (apply (lambda (G17248) (G12427 'import '"invalid import spec" G17248)) G17246) (G12427 '#f '"invalid syntax" G17244))) (G12194 G17244 'any))) G17228))) (G12194 G17228 '(any any . any)))) G17216))) (G12194 G17216 '(any each-any)))) G17194))) (G12194 G17194 '(any any any)))) G17170))) (G12194 G17170 '(any any . each-any)))) G17152))) (G12194 G17152 '(any any . each-any)))) G17122))) (G12194 G17122 '(any any . #(each (any any)))))) G17110))) (G12194 G17110 '(any . each-any)))) G17108))) (set! G17085 (lambda (G17092 G17093) ((lambda (G17096) (for-each (lambda (G17098) ((lambda (G17100 G17101) ((lambda (G17104) (if G17104 ((lambda (G17106) (if (eq? G17106 G17101) (void) (G17067 G17100))) G17104) (hashtable-set! G17093 G17100 G17101))) (hashtable-ref G17093 G17100 '#f))) (car G17098) (cdr G17098))) G17096)) (G17083 G17092)))) ((letrec ((G17086 (lambda (G17088 G17089) (if (null? G17088) (hashtable-entries G17089) (begin (G17085 (car G17088) G17089) (G17086 (cdr G17088) G17089)))))) G17086) G17062 (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12301 (lambda (G17574 G17575) ((lambda (G17578) (begin (vector-for-each (lambda (G17580 G17581) (begin (if (symbol? G17580) (void) (error 'make-top-rib '"BUG: not a symbol" G17580)) (G11536 G17578 (G11561 G17580 G11485 '() '()) G17581))) G17574 G17575) G17578)) (G11534)))) (set! G12303 (lambda () ((lambda (G17584) (lambda G17588 ((lambda (G17589) (if (= G17589 '0) (apply (lambda () G17584) G17588) (if (= G17589 '1) (apply (lambda (G17586) (set! G17584 (G11478 G17586 G17584))) G17588) (error 'apply '"invalid arg count")))) (length G17588)))) '()))) (set! G12305 (G10442 (lambda G17590 (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G17592) (begin (if (procedure? G17592) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" G17592)) G17592)))) (set! G12307 (G10442 (lambda G17594 (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G17596) (begin (if (procedure? G17596) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" G17596)) G17596)))) (set! G12309 (G10442 (lambda G17598 (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G17600) (begin (if (procedure? G17600) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" G17600)) G17600)))) (set! G12311 (lambda (G17602 G17603 G17604) (call-with-values (lambda () (G12289 G17602 '() '() '() '() '() '() G17603 G17604)) (lambda (G17615 G17616 G17617 G17618 G17619 G17620 G17621) ((lambda (G17629 G17630 G17631 G17632 G17633 G17634 G17635) (values (append (apply append (reverse G17630)) G17635) G17634 G17633 (reverse G17632) (reverse G17631))) G17621 G17620 G17619 G17618 G17617 G17616 G17615))))) (set! G12313 (lambda (G17643 G17644 G17645) (call-with-values (lambda () (G12289 (list G17643) G17645 G17645 '() '() '() '() G17644 '#t)) (lambda (G17656 G17657 G17658 G17659 G17660 G17661 G17662) ((lambda (G17670 G17671 G17672 G17673 G17674 G17675 G17676) ((lambda (G17684) ((lambda (G17686) (values G17686 G17675)) (if (null? G17684) (G11462) (if (null? (cdr G17684)) (car G17684) (G11461 '#f G17684))))) (G12244 (reverse G17673) (reverse G17672) (append (apply append (reverse G17671)) G17676) G17675 G17674))) G17662 G17661 G17660 G17659 G17658 G17657 G17656))))) (set! G12315 (lambda (G17688 G17689 G17690 G17691 G17692) ((lambda (G17699) (begin (set! G17699 (G12303)) ((lambda (G17704 G17705 G17706 G17707) ((lambda (G17712) (dynamic-wind G17712 (lambda () (call-with-values (lambda () (G12293 G17689)) (lambda (G17716 G17717) ((lambda (G17720 G17721) (call-with-values (lambda () (G12299 G17690)) (lambda (G17726 G17727) ((lambda (G17730 G17731) ((lambda (G17734) ((lambda (G17736 G17737 G17738) ((lambda (G17746 G17747 G17748 G17749) ((lambda (G17754) (dynamic-wind G17754 (lambda () (call-with-values (lambda () (G12311 G17736 G17734 G17692)) (lambda (G17761 G17762 G17763 G17764 G17765) ((lambda (G17771 G17772 G17773 G17774 G17775) (begin (G11540 G17734) ((lambda (G17781) ((lambda (G17783) ((lambda () (begin (G11542 G17734) ((lambda (G17785 G17786) ((lambda (G17790) (begin (set! G17790 '"attempt to export mutated variable") (call-with-values (lambda () (G12411 G17772 G17785 G17774)) (lambda (G17794 G17795 G17796) ((lambda (G17800 G17801 G17802) (begin (for-each (lambda (G17806) ((lambda (G17808 G17809) ((lambda (G17812) (if G17812 ((lambda (G17814) ((lambda (G17816) (if (eq? G17816 'mutable) (G12427 'export G17790 G17808) (void))) (car G17814))) (cdr G17812)) (void))) (assq G17809 G17802))) (car G17806) (cdr G17806))) G17786) ((lambda (G17818 G17819) (values (G17699) (G17737) (G17738) (G11461 '#f (append G17819 (list G17818))) G17800 G17786 G17802)) (G11464 '#f G17772 G17783 (G12407 G17801 G17781)) (map G11457 (map cdr G17801))))) G17796 G17795 G17794))))) '#f)) (map G11491 G17772) (G12409 G17721 G17720 G17734)))))) (G12246 G17771 G17774 G17773))) (G12226 G17775 G17774 G17773)))) G17765 G17764 G17763 G17762 G17761)))) G17754)) (lambda () (begin ((lambda (G17822) (begin (G17746 G17748) (set! G17748 G17822))) (G17746)) ((lambda (G17824) (begin (G17747 G17749) (set! G17749 G17824))) (G17747)))))) G12305 G12307 G17737 G17738)) (map (lambda (G17826) (G11561 G17826 G11485 (list G17734) '())) G17691) (G12303) (G12303))) (G12301 G17731 G17730))) G17727 G17726)))) G17717 G17716)))) G17712)) (lambda () (begin ((lambda (G17828) (begin (G17704 G17706) (set! G17706 G17828))) (G17704)) ((lambda (G17830) (begin (G17705 G17707) (set! G17707 G17830))) (G17705)))))) G12309 G12441 G17699 '#f))) '#f))) (set! G12317 (lambda (G17832 G17833) (call-with-values (lambda () (G12297 G17832)) (lambda (G17840 G17841 G17842 G17843) ((lambda (G17848 G17849 G17850 G17851) (call-with-values (lambda () (G12295 G17851)) (lambda (G17858 G17859) ((lambda (G17862 G17863) (begin (G17833 G17863) (call-with-values (lambda () (G12315 G17863 G17850 G17849 G17848 '#f)) (lambda (G17873 G17874 G17875 G17876 G17877 G17878 G17879) ((lambda (G17887 G17888 G17889 G17890 G17891 G17892 G17893) (values G17863 G17862 G17893 G17892 G17891 G17890 G17889 G17888 G17887)) G17879 G17878 G17877 G17876 G17875 G17874 G17873))))) G17859 G17858)))) G17843 G17842 G17841 G17840))))) (set! G12319 (lambda (G17901) ((lambda (G17903) ((lambda (G17905) (if (if G17905 (begin '#f (apply (lambda (G17907 G17908 G17909) (eq? (G12433 G17907) 'import)) G17905)) '#f) (apply (lambda (G17913 G17914 G17915) (values G17914 G17915)) G17905) ((lambda (G17919) ((lambda (G17921) (if (if G17921 (begin '#f (apply (lambda (G17923 G17924 G17925) (eq? (G12433 G17923) 'import)) G17921)) '#f) (apply (lambda (G17929 G17930 G17931) (G12427 'expander '"invalid syntax of top-level program" (G11609 G17901))) G17921) ((lambda (G17935) ((lambda (G17937) (if G17937 (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G17937) (G12427 '#f '"invalid syntax" G17935))) (G12194 G17935 '_))) G17919))) (G12194 G17919 '((any . any) . any)))) G17903))) (G12194 G17903 '((any . each-any) . each-any)))) G17901))) (set! G12321 (lambda (G17939) (call-with-values (lambda () (G12319 G17939)) (lambda (G17943 G17944) ((lambda (G17947 G17948) (call-with-values (lambda () (G12315 '() '() G17948 G17947 '#t)) (lambda (G17958 G17959 G17960 G17961 G17962 G17963 G17964) ((lambda (G17972 G17973 G17974 G17975 G17976 G17977 G17978) (values G17977 G17975)) G17964 G17963 G17962 G17961 G17960 G17959 G17958)))) G17944 G17943))))) (set! G12327 (make-record-type-descriptor 'env '#f 'G12325 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G12329 '#f) (set! G12331 (make-record-constructor-descriptor G12327 '#f G12329)) (set! G12336 (record-predicate G12327)) (set! G12338 (record-constructor G12331)) (set! G12340 (record-accessor G12327 '0)) (set! G12342 (record-accessor G12327 '1)) (set! G12344 (record-accessor G12327 '2)) (set! G12346 (record-mutator G12327 '0)) (set! G12348 (record-mutator G12327 '1)) (set! G12350 (record-mutator G12327 '2)) (set! G12352 (G10439 'env (lambda (G17986 G17987) (display '"#<environment>" G17987)))) (set! G12358 (make-record-type-descriptor 'interaction-env '#f 'G12356 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G12360 '#f) (set! G12362 (make-record-constructor-descriptor G12358 '#f G12360)) (set! G12367 (record-predicate G12358)) (set! G12369 (record-constructor G12362)) (set! G12371 (record-accessor G12358 '0)) (set! G12373 (record-accessor G12358 '1)) (set! G12375 (record-accessor G12358 '2)) (set! G12377 (record-mutator G12358 '0)) (set! G12379 (record-mutator G12358 '1)) (set! G12381 (record-mutator G12358 '2)) (set! G12383 (G10439 'interaction-env (lambda (G17990 G17991) (display '"#<environment>" G17991)))) (set! G12385 (lambda () (map (lambda (G17994) G17994) (G11518 (G12371 (G12439)))))) (set! G12387 (lambda (G17996) (vector->list (G12340 G17996)))) (set! G12389 (lambda (G17998) ((lambda (G18000) (if G18000 G18000 (begin '#f (G12367 G17998)))) (G12336 G17998)))) (set! G12391 (lambda G18002 ((lambda (G18004) ((lambda (G18008 G18009) ((lambda (G18012) (dynamic-wind G18012 (lambda () (call-with-values (lambda () (G12299 G18002)) (lambda (G18016 G18017) ((lambda (G18020 G18021) (G12338 G18021 G18020 G18004)) G18017 G18016)))) G18012)) (lambda () ((lambda (G18024) (begin (G18008 G18009) (set! G18009 G18024))) (G18008))))) G12309 G18004)) (G12303)))) (set! G12393 (lambda (G18026) (begin (if (eqv? G18026 '5) (void) (assertion-violation 'null-environment '"not 5" G18026)) (G12391 '(psyntax null-environment-5))))) (set! G12395 (lambda (G18028) (begin (if (eqv? G18028 '5) (void) (assertion-violation 'scheme-report-environment '"not 5" G18028)) (G12391 '(psyntax scheme-report-environment-5))))) (set! G12397 (lambda (G18030 G18031) (if (G12336 G18031) ((lambda (G18034) ((lambda (G18036 G18037 G18038 G18039) ((lambda (G18044) (begin (G11540 G18034) (values G18044 (G18038)))) ((lambda (G18052 G18053 G18054 G18055 G18056 G18057) ((lambda (G18064) (dynamic-wind G18064 (lambda () (G12230 G18036 '() '())) G18064)) (lambda () (begin ((lambda (G18066) (begin (G18052 G18055) (set! G18055 G18066))) (G18052)) ((lambda (G18068) (begin (G18053 G18056) (set! G18056 G18068))) (G18053)) ((lambda (G18070) (begin (G18054 G18057) (set! G18057 G18070))) (G18054)))))) G12305 G12307 G12309 G18038 G18039 G18037))) (G11561 G18030 G11485 (list G18034) '()) (G12344 G18031) (G12303) (G12303))) (G12301 (G12340 G18031) (G12342 G18031))) (if (G12367 G18031) ((lambda (G18072 G18073 G18074) ((lambda (G18078) (call-with-values (lambda () ((lambda (G18090 G18091 G18092 G18093 G18094 G18095 G18096 G18097) ((lambda (G18106) (dynamic-wind G18106 (lambda () (G12313 G18078 G18072 G18073)) G18106)) (lambda () (begin ((lambda (G18108) (begin (G18090 G18094) (set! G18094 G18108))) (G18090)) ((lambda (G18110) (begin (G18091 G18095) (set! G18095 G18110))) (G18091)) ((lambda (G18112) (begin (G18092 G18096) (set! G18096 G18112))) (G18092)) ((lambda (G18114) (begin (G18093 G18097) (set! G18097 G18114))) (G18093)))))) G12441 G12305 G12307 G12309 G18031 G18074 (G12303) (G12303))) (lambda (G18116 G18117) ((lambda (G18120 G18121) (begin (G12379 G18031 G18120) (values G18121 (G18074)))) G18117 G18116)))) (G11561 G18030 G11485 (list G18072) '()))) (G12371 G18031) (G12373 G18031) (G12303)) (assertion-violation 'expand '"not an environment" G18031))))) (set! G12399 (lambda (G18124 G18125) (begin (if (G12389 G18125) (void) (error 'eval '"not an environment" G18125)) (call-with-values (lambda () (G12397 G18124 G18125)) (lambda (G18130 G18131) ((lambda (G18134 G18135) (begin (for-each G11113 G18134) (eval-core (G10541 G18135)))) G18131 G18130)))))) (set! G12401 (lambda G18239 ((lambda (G18240) (if (= G18240 '3) (apply (lambda (G18138 G18139 G18140) ((lambda (G18145 G18147) (begin (set! G18145 (lambda (G18221) (if (null? G18221) (G11462) (G11461 '#f (map (lambda (G18223) ((lambda (G18225 G18226) (list 'set! G18225 G18226)) (car G18223) (cddr G18223))) G18221))))) (set! G18147 (lambda (G18213) (for-each (lambda (G18215) ((lambda (G18217 G18218) (set-symbol-value! G18217 G18218)) (car G18215) (cadr G18215))) G18213))) (call-with-values (lambda () (G12317 G18138 G18140)) (lambda (G18157 G18158 G18159 G18160 G18161 G18162 G18163 G18164 G18165) ((lambda (G18175 G18176 G18177 G18178 G18179 G18180 G18181 G18182 G18183) ((lambda (G18193 G18194 G18195 G18196 G18197 G18198 G18199 G18200 G18201 G18202) (begin (G11111 G18193 G18194 G18195 G18196 G18197 G18198 G18176 G18175 G18199 G18200 G18201 G18202 '#t G18139) (values G18193 G18194 G18195 G18196 G18197 G18198 G18202 G18201 G18176 G18175))) (gensym) G18183 G18182 (map G11117 G18181) (map G11117 G18179) (map G11117 G18180) (lambda () (G18147 G18177)) (lambda () (eval-core (G10541 G18178))) (G18145 G18177) G18178)) G18165 G18164 G18163 G18162 G18161 G18160 G18159 G18158 G18157))))) '#f '#f)) G18239) (if (= G18240 '2) (apply (lambda (G18229 G18230) (G12401 G18229 G18230 (lambda (G18233) (values)))) G18239) (if (= G18240 '1) (apply (lambda (G18235) (G12401 G18235 '#f (lambda (G18237) (values)))) G18239) (error 'apply '"invalid arg count"))))) (length G18239)))) (set! G12403 (lambda (G18241) (call-with-values (lambda () (G12401 G18241)) (lambda (G18253 G18254 G18255 G18256 G18257 G18258 G18259 G18260 G18261 G18262) ((lambda (G18273 G18274 G18275 G18276 G18277 G18278 G18279 G18280 G18281 G18282) (values G18281 G18276 G18274 G18273)) G18262 G18261 G18260 G18259 G18258 G18257 G18256 G18255 G18254 G18253))))) (set! G12405 (lambda (G18293 G18294 G18295) (if (null? G18294) G18295 (G12405 G18293 (cdr G18294) (cons (G18293 (car G18294)) G18295))))) (set! G12407 (lambda (G18299 G18300) (G11461 '#f (cons (G11462) (G12405 (lambda (G18303) (list 'set! (cdr G18303) (car G18303))) G18299 G18300))))) (set! G12409 (lambda (G18305 G18306 G18307) (map (lambda (G18311 G18312) ((lambda (G18315) ((lambda (G18317) ((lambda () (begin (if G18317 (void) (G12427 '#f '"cannot export unbound identifier" G18315)) (cons G18312 G18317))))) (G11641 G18315))) (G11561 G18311 G11485 (list G18307) '()))) G18305 G18306))) (set! G12411 (lambda (G18319 G18320 G18321) ((lambda (G18326) (begin (set! G18326 (lambda (G18354) ((letrec ((G18356 (lambda (G18358 G18359 G18360) (if (pair? G18359) (if (eq? G18358 (car G18359)) (car G18360) (G18356 G18358 (cdr G18359) (cdr G18360))) (assertion-violation 'lookup-make-export '"BUG"))))) G18356) G18354 G18319 G18320))) ((letrec ((G18327 (lambda (G18329 G18330 G18331 G18332) (if (null? G18329) (values G18330 G18331 G18332) ((lambda (G18337) ((lambda (G18339 G18340) ((lambda (G18343) (if (eqv? G18343 'lexical) ((lambda (G18348) ((lambda (G18350 G18351) (G18327 (cdr G18329) (cons (cons* G18339 G18351 G18350) G18330) (cons (cons (G12082 G18348) G18350) G18331) G18332)) (G18326 (G12082 G18348)) (if (G12084 G18348) 'mutable 'global))) (G11651 G18340)) (if (eqv? G18343 'local-macro) ((lambda (G18346) (G18327 (cdr G18329) (cons (cons* G18339 'global-macro G18346) G18330) G18331 (cons (cons G18346 (G11651 G18340)) G18332))) (gensym)) (if (eqv? G18343 'local-macro!) ((lambda (G18344) (G18327 (cdr G18329) (cons (cons* G18339 'global-macro! G18344) G18330) G18331 (cons (cons G18344 (G11651 G18340)) G18332))) (gensym)) (if (memv G18343 '($rtd $module)) (G18327 (cdr G18329) (cons G18337 G18330) G18331 G18332) (assertion-violation 'expander '"BUG: do not know how to export" (G11649 G18340) (G11651 G18340))))))) (G11649 G18340))) (car G18337) (cdr G18337))) (car G18329)))))) G18327) G18321 '() '() '()))) '#f))) (set! G12413 (lambda (G18364) ((lambda (G18366) ((lambda (G18368) (if G18368 (apply (lambda (G18370) (map (lambda (G18372) (G11561 ((lambda (G18374) (if ((lambda (G18376) (if G18376 G18376 (begin '#f (string? G18374)))) (symbol? G18374)) (gensym G18374) (gensym 't))) (G12433 G18372)) G11485 '() '())) G18370)) G18368) ((lambda (G18378) ((lambda (G18380) (if G18380 (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G18380) (G12427 '#f '"invalid syntax" G18378))) (G12194 G18378 '_))) G18366))) (G12194 G18366 'each-any))) G18364))) (set! G12415 (lambda (G18382 G18383) (if (G11615 G18382) (if (G11615 G18383) (G11623 G18382 G18383) (assertion-violation 'free-identifier=? '"not an identifier" G18383)) (assertion-violation 'free-identifier=? '"not an identifier" G18382)))) (set! G12417 (lambda (G18386 G18387) (if (G11615 G18386) (if (G11615 G18387) (G11621 G18386 G18387) (assertion-violation 'bound-identifier=? '"not an identifier" G18387)) (assertion-violation 'bound-identifier=? '"not an identifier" G18386)))) (set! G12419 (lambda (G18390) ((lambda (G18400 G18402 G18404 G18409 G18411 G18413 G18415 G18417 G18419 G18421) (begin (set! G18400 (make-record-type-descriptor '&source-information &condition-rtd 'G18398 '#f '#f '#((immutable file-name) (immutable line)))) (set! G18402 '#f) (set! G18404 (make-record-constructor-descriptor G18400 &condition-rcd G18402)) (set! G18409 (record-predicate G18400)) (set! G18411 (record-constructor G18404)) (set! G18413 (record-accessor G18400 '0)) (set! G18415 (record-accessor G18400 '1)) (set! G18417 (condition-predicate G18400)) (set! G18419 (condition-accessor G18400 G18413)) (set! G18421 (condition-accessor G18400 G18415)) (if (G11559 G18390) ((lambda (G18422) (if (G10434 G18422) ((lambda (G18424) (if (pair? G18424) (G18411 (car G18424) (cdr G18424)) (condition))) (G10435 G18422)) (condition))) (G11563 G18390)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12421 (lambda (G18426 . G18428) (begin (if (for-all string? G18428) (void) (assertion-violation 'syntax-error '"invalid argument" G18428)) (raise (condition (G19140 (if (null? G18428) '"invalid syntax" (apply string-append G18428))) (G19212 (G12433 G18426) '#f) (G12419 G18426) (G12423 G18426)))))) (set! G12423 (lambda (G18430) ((lambda (G18439 G18441 G18443 G18448 G18450 G18452 G18454 G18456) (begin (set! G18439 (make-record-type-descriptor '&trace &condition-rtd 'G18437 '#f '#f '#((immutable form)))) (set! G18441 '#f) (set! G18443 (make-record-constructor-descriptor G18439 &condition-rcd G18441)) (set! G18448 (record-predicate G18439)) (set! G18450 (record-constructor G18443)) (set! G18452 (record-accessor G18439 '0)) (set! G18454 (condition-predicate G18439)) (set! G18456 (condition-accessor G18439 G18452)) ((letrec ((G18457 (lambda (G18459) (if (G11559 G18459) (apply condition (G18450 G18459) (map G18457 (G11569 G18459))) (if (G10434 G18459) (G18450 (G11561 G18459 '() '() '())) (condition)))))) G18457) G18430))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12425 (lambda (G18461 G18462 G18463 G18464) (begin (if (string? G18462) (void) (assertion-violation 'syntax-violation '"message is not a string" G18462)) ((lambda (G18469) (raise (condition (if G18469 (G19186 G18469) (condition)) (G19140 G18462) G18464 (G12419 G18463) (G12423 G18463)))) (if ((lambda (G18471) (if G18471 G18471 (begin '#f (symbol? G18461)))) (string? G18461)) G18461 (if (not G18461) ((lambda (G18473) ((lambda (G18475) (if (if G18475 (begin '#f (apply (lambda (G18477) (G11615 G18477)) G18475)) '#f) (apply (lambda (G18479) (G12433 G18479)) G18475) ((lambda (G18481) ((lambda (G18483) (if (if G18483 (begin '#f (apply (lambda (G18485 G18486) (G11615 G18485)) G18483)) '#f) (apply (lambda (G18489 G18490) (G12433 G18489)) G18483) ((lambda (G18493) ((lambda (G18495) (if G18495 (apply (lambda () '#f) G18495) (G12427 '#f '"invalid syntax" G18493))) (G12194 G18493 '_))) G18481))) (G12194 G18481 '(any . any)))) G18473))) (G12194 G18473 'any))) G18463) (assertion-violation 'syntax-violation '"invalid who argument" G18461))))))) (set! G12427 (lambda G18511 ((lambda (G18512) (if (= G18512 '3) (apply (lambda (G18497 G18498 G18499) (G12427 G18497 G18498 G18499 '#f)) G18511) (if (= G18512 '4) (apply (lambda (G18503 G18504 G18505 G18506) (G12425 G18503 G18504 G18505 (G19212 (G12433 G18505) (G12433 G18506)))) G18511) (error 'apply '"invalid arg count")))) (length G18511)))) (set! G12429 (lambda (G18513) (G11615 G18513))) (set! G12431 (lambda (G18515 G18516) (if (G11615 G18515) (G11581 G18515 G18516) (assertion-violation 'datum->syntax '"not an identifier" G18515)))) (set! G12433 (lambda (G18519) (G11637 G18519))) (set! G12435 (lambda (G18521) (call-with-values (lambda () (G12321 G18521)) (lambda (G18525 G18526) ((lambda (G18529 G18530) (lambda () (begin (for-each G11113 G18530) (eval-core (G10541 G18529))))) G18526 G18525))))) (set! G12437 (lambda (G18533) (call-with-values (lambda () (G12321 G18533)) (lambda (G18537 G18538) ((lambda (G18541 G18542) (begin (for-each G11113 G18542) (G10440 (G10541 G18541)))) G18538 G18537))))) (set! G12439 ((lambda (G18545) (lambda () ((lambda (G18547) (if G18547 G18547 (begin '#f ((lambda (G18549 G18550) (begin ((lambda (G18553) (begin (G11526 G18550 (map car G18553)) (G11528 G18550 (map (lambda (G18555) G11485) G18553)) (G11530 G18550 (map cdr G18553)))) (G11070 G18549)) ((lambda (G18557) (begin (set! G18545 G18557) G18557)) (G12369 G18550 '() '())))) (G11106 '(rnrs)) (G11534))))) G18545))) '#f)) (set! G12441 (G10442 '#f)) (begin (set! G18818 G12441) (set! G18817 G12439) (set! G18816 G12437) (set! G18815 G12435) (set! G18814 G12433) (set! G18813 G12431) (set! G18812 G12429) (set! G18811 G12427) (set! G18810 G12425) (set! G18809 G12423) (set! G18808 G12421) (set! G18807 G12419) (set! G18806 G12417) (set! G18805 G12415) (set! G18804 G12413) (set! G18803 G12411) (set! G18802 G12409) (set! G18801 G12407) (set! G18800 G12405) (set! G18799 G12403) (set! G18798 G12401) (set! G18797 G12399) (set! G18796 G12397) (set! G18795 G12395) (set! G18794 G12393) (set! G18793 G12391) (set! G18792 G12389) (set! G18791 G12387) (set! G18790 G12385) (set! G18789 G12383) (set! G18788 G12381) (set! G18787 G12379) (set! G18786 G12377) (set! G18785 G12375) (set! G18784 G12373) (set! G18783 G12371) (set! G18782 G12369) (set! G18781 G12367) (set! G18780 G12362) (set! G18779 G12360) (set! G18778 G12358) (set! G18777 G12352) (set! G18776 G12350) (set! G18775 G12348) (set! G18774 G12346) (set! G18773 G12344) (set! G18772 G12342) (set! G18771 G12340) (set! G18770 G12338) (set! G18769 G12336) (set! G18768 G12331) (set! G18767 G12329) (set! G18766 G12327) (set! G18765 G12321) (set! G18764 G12319) (set! G18763 G12317) (set! G18762 G12315) (set! G18761 G12313) (set! G18760 G12311) (set! G18759 G12309) (set! G18758 G12307) (set! G18757 G12305) (set! G18756 G12303) (set! G18755 G12301) (set! G18754 G12299) (set! G18753 G12297) (set! G18752 G12295) (set! G18751 G12293) (set! G18750 G12291) (set! G18749 G12289) (set! G18748 G12287) (set! G18747 G12285) (set! G18746 G12283) (set! G18745 G12281) (set! G18744 G12279) (set! G18743 G12277) (set! G18742 G12275) (set! G18741 G12273) (set! G18740 G12271) (set! G18739 G12269) (set! G18738 G12264) (set! G18737 G12262) (set! G18736 G12260) (set! G18735 G12254) (set! G18734 G12252) (set! G18733 G12250) (set! G18732 G12248) (set! G18731 G12246) (set! G18730 G12244) (set! G18729 G12242) (set! G18728 G12240) (set! G18727 G12238) (set! G18726 G12236) (set! G18725 G12234) (set! G18724 G12232) (set! G18723 G12230) (set! G18722 G12228) (set! G18721 G12226) (set! G18720 G12224) (set! G18719 G12222) (set! G18718 G12220) (set! G18717 G12218) (set! G18716 G12216) (set! G18715 G12214) (set! G18714 G12212) (set! G18713 G12210) (set! G18712 G12208) (set! G18711 G12206) (set! G18710 G12204) (set! G18709 G12202) (set! G18708 G12200) (set! G18707 G12198) (set! G18706 G12196) (set! G18705 G12194) (set! G18704 G12192) (set! G18703 G12190) (set! G18702 G12188) (set! G18701 G12186) (set! G18700 G12184) (set! G18699 G12182) (set! G18698 G12180) (set! G18697 G12178) (set! G18696 G12176) (set! G18695 G12174) (set! G18694 G12172) (set! G18693 G12170) (set! G18692 G12168) (set! G18691 G12166) (set! G18690 G12164) (set! G18689 G12162) (set! G18688 G12160) (set! G18687 G12158) (set! G18686 G12156) (set! G18685 G12154) (set! G18684 G12152) (set! G18683 G12150) (set! G18682 G12148) (set! G18681 G12146) (set! G18680 G12144) (set! G18679 G12142) (set! G18678 G12140) (set! G18677 G12138) (set! G18676 G12136) (set! G18675 G12134) (set! G18674 G12132) (set! G18673 G12130) (set! G18672 G12128) (set! G18671 G12126) (set! G18670 G12124) (set! G18669 G12122) (set! G18668 G12120) (set! G18667 G12118) (set! G18666 G12116) (set! G18665 G12114) (set! G18664 G12112) (set! G18663 G12110) (set! G18662 G12108) (set! G18661 G12106) (set! G18660 G12104) (set! G18659 G12102) (set! G18658 G12100) (set! G18657 G12098) (set! G18656 G12096) (set! G18655 G12094) (set! G18654 G12092) (set! G18653 G12090) (set! G18652 G12088) (set! G18651 G12086) (set! G18650 G12084) (set! G18649 G12082) (set! G18648 G12080) (set! G18647 G12078) (set! G18646 G12076) (set! G18645 G12074) (set! G18644 G11686) (set! G18643 G11684) (set! G18642 G11682) (set! G18641 G11680) (set! G18640 G11678) (set! G18639 G11655) (set! G18638 G11653) (set! G18637 G11651) (set! G18636 G11649) (set! G18635 G11647) (set! G18634 G11645) (set! G18633 G11643) (set! G18632 G11641) (set! G18631 G11639) (set! G18630 G11637) (set! G18629 G11635) (set! G18628 G11633) (set! G18627 G11631) (set! G18626 G11629) (set! G18625 G11627) (set! G18624 G11625) (set! G18623 G11623) (set! G18622 G11621) (set! G18621 G11619) (set! G18620 G11617) (set! G18619 G11615) (set! G18618 G11613) (set! G18617 G11611) (set! G18616 G11609) (set! G18615 G11607) (set! G18614 G11605) (set! G18613 G11603) (set! G18612 G11601) (set! G18611 G11599) (set! G18610 G11597) (set! G18609 G11595) (set! G18608 G11593) (set! G18607 G11591) (set! G18606 G11589) (set! G18605 G11587) (set! G18604 G11585) (set! G18603 G11583) (set! G18602 G11581) (set! G18601 G11579) (set! G18600 G11577) (set! G18599 G11575) (set! G18598 G11573) (set! G18597 G11571) (set! G18596 G11569) (set! G18595 G11567) (set! G18594 G11565) (set! G18593 G11563) (set! G18592 G11561) (set! G18591 G11559) (set! G18590 G11554) (set! G18589 G11552) (set! G18588 G11550) (set! G18587 G11544) (set! G18586 G11542) (set! G18585 G11540) (set! G18584 G11538) (set! G18583 G11536) (set! G18582 G11534) (set! G18581 G11532) (set! G18580 G11530) (set! G18579 G11528) (set! G18578 G11526) (set! G18577 G11524) (set! G18576 G11522) (set! G18575 G11520) (set! G18574 G11518) (set! G18573 G11516) (set! G18572 G11514) (set! G18571 G11509) (set! G18570 G11507) (set! G18569 G11505) (set! G18568 G11499) (set! G18567 G11497) (set! G18566 G11495) (set! G18565 G11493) (set! G18564 G11491) (set! G18563 G11489) (set! G18562 G11487) (set! G18561 G11485) (set! G18560 G11480) (set! G18559 G11478) (G11103 G12401)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G19129 '#f) (define G19130 '#f) (define G19131 '#f) (define G19132 '#f) (define G19133 '#f) (define G19134 '#f) (define G19135 '#f) (define G19136 '#f) (define G19137 '#f) (define G19138 '#f) (define G19139 '#f) (define G19140 '#f) (define G19141 '#f) (define G19142 '#f) (define G19143 '#f) (define G19144 '#f) (define G19145 '#f) (define G19146 '#f) (define G19147 '#f) (define G19148 '#f) (define G19149 '#f) (define G19150 '#f) (define G19151 '#f) (define G19152 '#f) (define G19153 '#f) (define G19154 '#f) (define G19155 '#f) (define G19156 '#f) (define G19157 '#f) (define G19158 '#f) (define G19159 '#f) (define G19160 '#f) (define G19161 '#f) (define G19162 '#f) (define G19163 '#f) (define G19164 '#f) (define G19165 '#f) (define G19166 '#f) (define G19167 '#f) (define G19168 '#f) (define G19169 '#f) (define G19170 '#f) (define G19171 '#f) (define G19172 '#f) (define G19173 '#f) (define G19174 '#f) (define G19175 '#f) (define G19176 '#f) (define G19177 '#f) (define G19178 '#f) (define G19179 '#f) (define G19180 '#f) (define G19181 '#f) (define G19182 '#f) (define G19183 '#f) (define G19184 '#f) (define G19185 '#f) (define G19186 '#f) (define G19187 '#f) (define G19188 '#f) (define G19189 '#f) (define G19190 '#f) (define G19191 '#f) (define G19192 '#f) (define G19193 '#f) (define G19194 '#f) (define G19195 '#f) (define G19196 '#f) (define G19197 '#f) (define G19198 '#f) (define G19199 '#f) (define G19200 '#f) (define G19201 '#f) (define G19202 '#f) (define G19203 '#f) (define G19204 '#f) (define G19205 '#f) (define G19206 '#f) (define G19207 '#f) (define G19208 '#f) (define G19209 '#f) (define G19210 '#f) (define G19211 '#f) (define G19212 '#f) (define G19213 '#f) (define G19214 '#f) (define G19215 '#f) (define G19216 '#f) (define G19217 '#f) (define G19218 '#f) (define G19219 '#f) (define G19220 '#f) (define G19221 '#f) (define G19222 '#f) (define G19223 '#f) ((lambdabegin (set! G18828 (make-record-type-descriptor '&condition '#f 'G18826 '#f '#f '#())) (set! G18830 '#f) (set! G18832 (make-record-constructor-descriptor G18828 '#f G18830)) (set! G18837 (record-predicate G18828)) (set! G18839 (record-constructor G18832)) (set! G18841 G18828) (set! G18843 G18832) (set! G18851 (make-record-type-descriptor '&message G18828 'G18849 '#f '#f '#((immutable message)))) (set! G18853 '#f) (set! G18855 (make-record-constructor-descriptor G18851 G18832 G18853)) (set! G18860 (record-predicate G18851)) (set! G18862 (record-constructor G18855)) (set! G18864 (record-accessor G18851 '0)) (set! G18866 (condition-predicate G18851)) (set! G18868 (condition-accessor G18851 G18864)) (set! G18875 (make-record-type-descriptor '&warning G18828 'G18873 '#f '#f '#())) (set! G18877 '#f) (set! G18879 (make-record-constructor-descriptor G18875 G18832 G18877)) (set! G18884 (record-predicate G18875)) (set! G18886 (record-constructor G18879)) (set! G18888 (condition-predicate G18875)) (set! G18895 (make-record-type-descriptor '&serious G18828 'G18893 '#f '#f '#())) (set! G18897 '#f) (set! G18899 (make-record-constructor-descriptor G18895 G18832 G18897)) (set! G18904 (record-predicate G18895)) (set! G18906 (record-constructor G18899)) (set! G18908 (condition-predicate G18895)) (set! G18915 (make-record-type-descriptor '&error G18895 'G18913 '#f '#f '#())) (set! G18917 '#f) (set! G18919 (make-record-constructor-descriptor G18915 G18899 G18917)) (set! G18924 (record-predicate G18915)) (set! G18926 (record-constructor G18919)) (set! G18928 (condition-predicate G18915)) (set! G18935 (make-record-type-descriptor '&violation G18895 'G18933 '#f '#f '#())) (set! G18937 '#f) (set! G18939 (make-record-constructor-descriptor G18935 G18899 G18937)) (set! G18944 (record-predicate G18935)) (set! G18946 (record-constructor G18939)) (set! G18948 (condition-predicate G18935)) (set! G18955 (make-record-type-descriptor '&assertion G18935 'G18953 '#f '#f '#())) (set! G18957 '#f) (set! G18959 (make-record-constructor-descriptor G18955 G18939 G18957)) (set! G18964 (record-predicate G18955)) (set! G18966 (record-constructor G18959)) (set! G18968 (condition-predicate G18955)) (set! G18976 (make-record-type-descriptor '&irritants G18828 'G18974 '#f '#f '#((immutable irritants)))) (set! G18978 '#f) (set! G18980 (make-record-constructor-descriptor G18976 G18832 G18978)) (set! G18985 (record-predicate G18976)) (set! G18987 (record-constructor G18980)) (set! G18989 (record-accessor G18976 '0)) (set! G18991 (condition-predicate G18976)) (set! G18993 (condition-accessor G18976 G18989)) (set! G19001 (make-record-type-descriptor '&who G18828 'G18999 '#f '#f '#((immutable who)))) (set! G19003 '#f) (set! G19005 (make-record-constructor-descriptor G19001 G18832 G19003)) (set! G19010 (record-predicate G19001)) (set! G19012 (record-constructor G19005)) (set! G19014 (record-accessor G19001 '0)) (set! G19016 (condition-predicate G19001)) (set! G19018 (condition-accessor G19001 G19014)) (set! G19025 (make-record-type-descriptor '&non-continuable G18935 'G19023 '#f '#f '#())) (set! G19027 '#f) (set! G19029 (make-record-constructor-descriptor G19025 G18939 G19027)) (set! G19034 (record-predicate G19025)) (set! G19036 (record-constructor G19029)) (set! G19038 (condition-predicate G19025)) (set! G19045 (make-record-type-descriptor '&implementation-restriction G18935 'G19043 '#f '#f '#())) (set! G19047 '#f) (set! G19049 (make-record-constructor-descriptor G19045 G18939 G19047)) (set! G19054 (record-predicate G19045)) (set! G19056 (record-constructor G19049)) (set! G19058 (condition-predicate G19045)) (set! G19065 (make-record-type-descriptor '&lexical G18935 'G19063 '#f '#f '#())) (set! G19067 '#f) (set! G19069 (make-record-constructor-descriptor G19065 G18939 G19067)) (set! G19074 (record-predicate G19065)) (set! G19076 (record-constructor G19069)) (set! G19078 (condition-predicate G19065)) (set! G19087 (make-record-type-descriptor '&syntax G18935 'G19085 '#f '#f '#((immutable form) (immutable subform)))) (set! G19089 '#f) (set! G19091 (make-record-constructor-descriptor G19087 G18939 G19089)) (set! G19096 (record-predicate G19087)) (set! G19098 (record-constructor G19091)) (set! G19100 (record-accessor G19087 '0)) (set! G19102 (record-accessor G19087 '1)) (set! G19104 (condition-predicate G19087)) (set! G19106 (condition-accessor G19087 G19100)) (set! G19108 (condition-accessor G19087 G19102)) (set! G19115 (make-record-type-descriptor '&undefined G18935 'G19113 '#f '#f '#())) (set! G19117 '#f) (set! G19119 (make-record-constructor-descriptor G19115 G18939 G19117)) (set! G19124 (record-predicate G19115)) (set! G19126 (record-constructor G19119)) (set! G19128 (condition-predicate G19115)) (begin (set! G19223 G19128) (set! G19222 G19126) (set! G19221 G19124) (set! G19220 G19119) (set! G19219 G19117) (set! G19218 G19115) (set! G19217 G19108) (set! G19216 G19106) (set! G19215 G19104) (set! G19214 G19102) (set! G19213 G19100) (set! G19212 G19098) (set! G19211 G19096) (set! G19210 G19091) (set! G19209 G19089) (set! G19208 G19087) (set! G19207 G19078) (set! G19206 G19076) (set! G19205 G19074) (set! G19204 G19069) (set! G19203 G19067) (set! G19202 G19065) (set! G19201 G19058) (set! G19200 G19056) (set! G19199 G19054) (set! G19198 G19049) (set! G19197 G19047) (set! G19196 G19045) (set! G19195 G19038) (set! G19194 G19036) (set! G19193 G19034) (set! G19192 G19029) (set! G19191 G19027) (set! G19190 G19025) (set! G19189 G19018) (set! G19188 G19016) (set! G19187 G19014) (set! G19186 G19012) (set! G19185 G19010) (set! G19184 G19005) (set! G19183 G19003) (set! G19182 G19001) (set! G19181 G18993) (set! G19180 G18991) (set! G19179 G18989) (set! G19178 G18987) (set! G19177 G18985) (set! G19176 G18980) (set! G19175 G18978) (set! G19174 G18976) (set! G19173 G18968) (set! G19172 G18966) (set! G19171 G18964) (set! G19170 G18959) (set! G19169 G18957) (set! G19168 G18955) (set! G19167 G18948) (set! G19166 G18946) (set! G19165 G18944) (set! G19164 G18939) (set! G19163 G18937) (set! G19162 G18935) (set! G19161 G18928) (set! G19160 G18926) (set! G19159 G18924) (set! G19158 G18919) (set! G19157 G18917) (set! G19156 G18915) (set! G19155 G18908) (set! G19154 G18906) (set! G19153 G18904) (set! G19152 G18899) (set! G19151 G18897) (set! G19150 G18895) (set! G19149 G18888) (set! G19148 G18886) (set! G19147 G18884) (set! G19146 G18879) (set! G19145 G18877) (set! G19144 G18875) (set! G19143 G18868) (set! G19142 G18866) (set! G19141 G18864) (set! G19140 G18862) (set! G19139 G18860) (set! G19138 G18855) (set! G19137 G18853) (set! G19136 G18851) (set! G19135 G18843) (set! G19134 G18841) (set! G19133 G18839) (set! G19132 G18837) (set! G19131 G18832) (set! G19130 G18830) (set! G19129 G18828)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G19485 '#f) (define G19486 '#f) (define G19487 '#f) (define G19488 '#f) (define G19489 '#f) (define G19490 '#f) (define G19491 '#f) (define G19492 '#f) (define G19493 '#f) (define G19494 '#f) (define G19495 '#f) (define G19496 '#f) (define G19497 '#f) (define G19498 '#f) (define G19499 '#f) (define G19500 '#f) (define G19501 '#f) (define G19502 '#f) (define G19503 '#f) (define G19504 '#f) (define G19505 '#f) (define G19506 '#f) (define G19507 '#f) (define G19508 '#f) (define G19509 '#f) (define G19510 '#f) (define G19511 '#f) (define G19512 '#f) (define G19513 '#f) (define G19514 '#f) (define G19515 '#f) (define G19516 '#f) (define G19517 '#f) (define G19518 '#f) (define G19519 '#f) (define G19520 '#f) (define G19521 '#f) (define G19522 '#f) (define G19523 '#f) (define G19524 '#f) (define G19525 '#f) (define G19526 '#f) (define G19527 '#f) (define G19528 '#f) (define G19529 '#f) (define G19530 '#f) (define G19531 '#f) (define G19532 '#f) (define G19533 '#f) (define G19534 '#f) (define G19535 '#f) (define G19536 '#f) (define G19537 '#f) (define G19538 '#f) (define G19539 '#f) (define G19540 '#f) (define G19541 '#f) (define G19542 '#f) (define G19543 '#f) (define G19544 '#f) (define G19545 '#f) (define G19546 '#f) (define G19547 '#f) (define G19548 '#f) (define G19549 '#f) (define G19550 '#f) (define G19551 '#f) (define G19552 '#f) (define G19553 '#f) (define G19554 '#f) (define G19555 '#f) (define G19556 '#f) (define G19557 '#f) (define G19558 '#f) (define G19559 '#f) (define G19560 '#f) (define G19561 '#f) (define G19562 '#f) (define G19563 '#f) (define G19564 '#f) ((lambdabegin (set! G19231 (make-record-type-descriptor '&i/o &error-rtd 'G19229 '#f '#f '#())) (set! G19233 '#f) (set! G19235 (make-record-constructor-descriptor G19231 &error-rcd G19233)) (set! G19240 (record-predicate G19231)) (set! G19242 (record-constructor G19235)) (set! G19244 (condition-predicate G19231)) (set! G19251 (make-record-type-descriptor '&i/o-read G19231 'G19249 '#f '#f '#())) (set! G19253 '#f) (set! G19255 (make-record-constructor-descriptor G19251 G19235 G19253)) (set! G19260 (record-predicate G19251)) (set! G19262 (record-constructor G19255)) (set! G19264 (condition-predicate G19251)) (set! G19271 (make-record-type-descriptor '&i/o-write G19231 'G19269 '#f '#f '#())) (set! G19273 '#f) (set! G19275 (make-record-constructor-descriptor G19271 G19235 G19273)) (set! G19280 (record-predicate G19271)) (set! G19282 (record-constructor G19275)) (set! G19284 (condition-predicate G19271)) (set! G19292 (make-record-type-descriptor '&i/o-invalid-position G19231 'G19290 '#f '#f '#((immutable position)))) (set! G19294 '#f) (set! G19296 (make-record-constructor-descriptor G19292 G19235 G19294)) (set! G19301 (record-predicate G19292)) (set! G19303 (record-constructor G19296)) (set! G19305 (record-accessor G19292 '0)) (set! G19307 (condition-predicate G19292)) (set! G19309 (condition-accessor G19292 G19305)) (set! G19317 (make-record-type-descriptor '&i/o-filename G19231 'G19315 '#f '#f '#((immutable filename)))) (set! G19319 '#f) (set! G19321 (make-record-constructor-descriptor G19317 G19235 G19319)) (set! G19326 (record-predicate G19317)) (set! G19328 (record-constructor G19321)) (set! G19330 (record-accessor G19317 '0)) (set! G19332 (condition-predicate G19317)) (set! G19334 (condition-accessor G19317 G19330)) (set! G19341 (make-record-type-descriptor '&i/o-file-protection G19231 'G19339 '#f '#f '#())) (set! G19343 '#f) (set! G19345 (make-record-constructor-descriptor G19341 G19235 G19343)) (set! G19350 (record-predicate G19341)) (set! G19352 (record-constructor G19345)) (set! G19354 (condition-predicate G19341)) (set! G19361 (make-record-type-descriptor '&i/o-file-is-read-only G19341 'G19359 '#f '#f '#())) (set! G19363 '#f) (set! G19365 (make-record-constructor-descriptor G19361 G19345 G19363)) (set! G19370 (record-predicate G19361)) (set! G19372 (record-constructor G19365)) (set! G19374 (condition-predicate G19361)) (set! G19381 (make-record-type-descriptor '&i/o-file-already-exists G19317 'G19379 '#f '#f '#())) (set! G19383 '#f) (set! G19385 (make-record-constructor-descriptor G19381 G19321 G19383)) (set! G19390 (record-predicate G19381)) (set! G19392 (record-constructor G19385)) (set! G19394 (condition-predicate G19381)) (set! G19401 (make-record-type-descriptor '&i/o-file-does-not-exist G19317 'G19399 '#f '#f '#())) (set! G19403 '#f) (set! G19405 (make-record-constructor-descriptor G19401 G19321 G19403)) (set! G19410 (record-predicate G19401)) (set! G19412 (record-constructor G19405)) (set! G19414 (condition-predicate G19401)) (set! G19422 (make-record-type-descriptor '&i/o-port G19231 'G19420 '#f '#f '#((immutable port)))) (set! G19424 '#f) (set! G19426 (make-record-constructor-descriptor G19422 G19235 G19424)) (set! G19431 (record-predicate G19422)) (set! G19433 (record-constructor G19426)) (set! G19435 (record-accessor G19422 '0)) (set! G19437 (condition-predicate G19422)) (set! G19439 (condition-accessor G19422 G19435)) (set! G19446 (make-record-type-descriptor '&i/o-decoding G19422 'G19444 '#f '#f '#())) (set! G19448 '#f) (set! G19450 (make-record-constructor-descriptor G19446 G19426 G19448)) (set! G19455 (record-predicate G19446)) (set! G19457 (record-constructor G19450)) (set! G19459 (condition-predicate G19446)) (set! G19467 (make-record-type-descriptor '&i/o-encoding G19422 'G19465 '#f '#f '#((immutable char)))) (set! G19469 '#f) (set! G19471 (make-record-constructor-descriptor G19467 G19426 G19469)) (set! G19476 (record-predicate G19467)) (set! G19478 (record-constructor G19471)) (set! G19480 (record-accessor G19467 '0)) (set! G19482 (condition-predicate G19467)) (set! G19484 (condition-accessor G19467 G19480)) (begin (set! G19564 G19484) (set! G19563 G19482) (set! G19562 G19480) (set! G19561 G19478) (set! G19560 G19476) (set! G19559 G19471) (set! G19558 G19469) (set! G19557 G19467) (set! G19556 G19459) (set! G19555 G19457) (set! G19554 G19455) (set! G19553 G19450) (set! G19552 G19448) (set! G19551 G19446) (set! G19550 G19439) (set! G19549 G19437) (set! G19548 G19435) (set! G19547 G19433) (set! G19546 G19431) (set! G19545 G19426) (set! G19544 G19424) (set! G19543 G19422) (set! G19542 G19414) (set! G19541 G19412) (set! G19540 G19410) (set! G19539 G19405) (set! G19538 G19403) (set! G19537 G19401) (set! G19536 G19394) (set! G19535 G19392) (set! G19534 G19390) (set! G19533 G19385) (set! G19532 G19383) (set! G19531 G19381) (set! G19530 G19374) (set! G19529 G19372) (set! G19528 G19370) (set! G19527 G19365) (set! G19526 G19363) (set! G19525 G19361) (set! G19524 G19354) (set! G19523 G19352) (set! G19522 G19350) (set! G19521 G19345) (set! G19520 G19343) (set! G19519 G19341) (set! G19518 G19334) (set! G19517 G19332) (set! G19516 G19330) (set! G19515 G19328) (set! G19514 G19326) (set! G19513 G19321) (set! G19512 G19319) (set! G19511 G19317) (set! G19510 G19309) (set! G19509 G19307) (set! G19508 G19305) (set! G19507 G19303) (set! G19506 G19301) (set! G19505 G19296) (set! G19504 G19294) (set! G19503 G19292) (set! G19502 G19284) (set! G19501 G19282) (set! G19500 G19280) (set! G19499 G19275) (set! G19498 G19273) (set! G19497 G19271) (set! G19496 G19264) (set! G19495 G19262) (set! G19494 G19260) (set! G19493 G19255) (set! G19492 G19253) (set! G19491 G19251) (set! G19490 G19244) (set! G19489 G19242) (set! G19488 G19240) (set! G19487 G19235) (set! G19486 G19233) (set! G19485 G19231)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (define G20124 '#f) (define G20125 '#f) (define G20126 '#f) (define G20127 '#f) (define G20128 '#f) (define G20129 '#f) (define G20130 '#f) (define G20131 '#f) (define G20132 '#f) (define G20133 '#f) (define G20134 '#f) (define G20135 '#f) (define G20136 '#f) (define G20137 '#f) (define G20138 '#f) (define G20139 '#f) (define G20140 '#f) (define G20141 '#f) (define G20142 '#f) (define G20143 '#f) (define G20144 '#f) (define G20145 '#f) (define G20146 '#f) (define G20147 '#f) (define G20148 '#f) (define G20149 '#f) (define G20150 '#f) (define G20151 '#f) (define G20152 '#f) (define G20153 '#f) (define G20154 '#f) (define G20155 '#f) (define G20156 '#f) (define G20157 '#f) (define G20158 '#f) (define G20159 '#f) (define G20160 '#f) (define G20161 '#f) (define G20162 '#f) (define G20163 '#f) (define G20164 '#f) (define G20165 '#f) (define G20166 '#f) (define G20167 '#f) (define G20168 '#f) (define G20169 '#f) (define G20170 '#f) (define G20171 '#f) (define G20172 '#f) (define G20173 '#f) (define G20174 '#f) (define G20175 '#f) (define G20176 '#f) (define G20177 '#f) (define G20178 '#f) (define G20179 '#f) (define G20180 '#f) (define G20181 '#f) (define G20182 '#f) (define G20183 '#f) (define G20184 '#f) (define G20185 '#f) (define G20186 '#f) (define G20187 '#f) (define G20188 '#f) (define G20189 '#f) (define G20190 '#f) (define G20191 '#f) (define G20192 '#f) (define G20193 '#f) (define G20194 '#f) (define G20195 '#f) (define G20196 '#f) (define G20197 '#f) (define G20198 '#f) (define G20199 '#f) (define G20200 '#f) ((lambdabegin (set! G19567 (lambda (G19720) ((lambda (G19722) (begin (for-each (lambda (G19724) (hashtable-set! G19722 (car G19724) (cdr G19724))) G19720) G19722)) (make-eq-hashtable)))) (set! G19569 (lambda (G19726) ((lambda (G19728) (begin (for-each (lambda (G19730) (hashtable-set! G19728 (cdr G19730) (car G19730))) G19726) G19728)) (make-eq-hashtable)))) (set! G19571 '(2392 2393 2394 2395 2396 2397 2398 2399 2524 2525 2527 2611 2614 2649 2650 2651 2654 2908 2909 3907 3917 3922 3927 3932 3945 3958 3960 3987 3997 4002 4007 4012 4025 64285 64287 64298 64299 64300 64301 64302 64303 64304 64305 64306 64307 64308 64309 64310 64312 64313 64314 64315 64316 64318 64320 64321 64323 64324 64326 64327 64328 64329 64330 64331 64332 64333 64334 10972 119134 119135 119136 119137 119138 119139 119140 119227 119228 119229 119230 119231 119232)) (set! G19573 '((160 32) (168 32 776) (170 97) (175 32 772) (178 50) (179 51) (180 32 769) (181 956) (184 32 807) (185 49) (186 111) (188 49 8260 52) (189 49 8260 50) (190 51 8260 52) (306 73 74) (307 105 106) (319 76 183) (320 108 183) (329 700 110) (383 115) (452 68 381) (453 68 382) (454 100 382) (455 76 74) (456 76 106) (457 108 106) (458 78 74) (459 78 106) (460 110 106) (497 68 90) (498 68 122) (499 100 122) (688 104) (689 614) (690 106) (691 114) (692 633) (693 635) (694 641) (695 119) (696 121) (728 32 774) (729 32 775) (730 32 778) (731 32 808) (732 32 771) (733 32 779) (736 611) (737 108) (738 115) (739 120) (740 661) (890 32 837) (900 32 769) (976 946) (977 952) (978 933) (981 966) (982 960) (1008 954) (1009 961) (1010 962) (1012 920) (1013 949) (1017 931) (1415 1381 1410) (1653 1575 1652) (1654 1608 1652) (1655 1735 1652) (1656 1610 1652) (3635 3661 3634) (3763 3789 3762) (3804 3755 3737) (3805 3755 3745) (3852 3851) (3959 4018 3969) (3961 4019 3969) (4348 4316) (7468 65) (7469 198) (7470 66) (7472 68) (7473 69) (7474 398) (7475 71) (7476 72) (7477 73) (7478 74) (7479 75) (7480 76) (7481 77) (7482 78) (7484 79) (7485 546) (7486 80) (7487 82) (7488 84) (7489 85) (7490 87) (7491 97) (7492 592) (7493 593) (7494 7426) (7495 98) (7496 100) (7497 101) (7498 601) (7499 603) (7500 604) (7501 103) (7503 107) (7504 109) (7505 331) (7506 111) (7507 596) (7508 7446) (7509 7447) (7510 112) (7511 116) (7512 117) (7513 7453) (7514 623) (7515 118) (7516 7461) (7517 946) (7518 947) (7519 948) (7520 966) (7521 967) (7522 105) (7523 114) (7524 117) (7525 118) (7526 946) (7527 947) (7528 961) (7529 966) (7530 967) (7544 1085) (7579 594) (7580 99) (7581 597) (7582 240) (7583 604) (7584 102) (7585 607) (7586 609) (7587 613) (7588 616) (7589 617) (7590 618) (7591 7547) (7592 669) (7593 621) (7594 7557) (7595 671) (7596 625) (7597 624) (7598 626) (7599 627) (7600 628) (7601 629) (7602 632) (7603 642) (7604 643) (7605 427) (7606 649) (7607 650) (7608 7452) (7609 651) (7610 652) (7611 122) (7612 656) (7613 657) (7614 658) (7615 952) (7834 97 702) (8125 32 787) (8127 32 787) (8128 32 834) (8190 32 788) (8194 32) (8195 32) (8196 32) (8197 32) (8198 32) (8199 32) (8200 32) (8201 32) (8202 32) (8209 8208) (8215 32 819) (8228 46) (8229 46 46) (8230 46 46 46) (8239 32) (8243 8242 8242) (8244 8242 8242 8242) (8246 8245 8245) (8247 8245 8245 8245) (8252 33 33) (8254 32 773) (8263 63 63) (8264 63 33) (8265 33 63) (8279 8242 8242 8242 8242) (8287 32) (8304 48) (8305 105) (8308 52) (8309 53) (8310 54) (8311 55) (8312 56) (8313 57) (8314 43) (8315 8722) (8316 61) (8317 40) (8318 41) (8319 110) (8320 48) (8321 49) (8322 50) (8323 51) (8324 52) (8325 53) (8326 54) (8327 55) (8328 56) (8329 57) (8330 43) (8331 8722) (8332 61) (8333 40) (8334 41) (8336 97) (8337 101) (8338 111) (8339 120) (8340 601) (8360 82 115) (8448 97 47 99) (8449 97 47 115) (8450 67) (8451 176 67) (8453 99 47 111) (8454 99 47 117) (8455 400) (8457 176 70) (8458 103) (8459 72) (8460 72) (8461 72) (8462 104) (8463 295) (8464 73) (8465 73) (8466 76) (8467 108) (8469 78) (8470 78 111) (8473 80) (8474 81) (8475 82) (8476 82) (8477 82) (8480 83 77) (8481 84 69 76) (8482 84 77) (8484 90) (8488 90) (8492 66) (8493 67) (8495 101) (8496 69) (8497 70) (8499 77) (8500 111) (8501 1488) (8502 1489) (8503 1490) (8504 1491) (8505 105) (8507 70 65 88) (8508 960) (8509 947) (8510 915) (8511 928) (8512 8721) (8517 68) (8518 100) (8519 101) (8520 105) (8521 106) (8531 49 8260 51) (8532 50 8260 51) (8533 49 8260 53) (8534 50 8260 53) (8535 51 8260 53) (8536 52 8260 53) (8537 49 8260 54) (8538 53 8260 54) (8539 49 8260 56) (8540 51 8260 56) (8541 53 8260 56) (8542 55 8260 56) (8543 49 8260) (8544 73) (8545 73 73) (8546 73 73 73) (8547 73 86) (8548 86) (8549 86 73) (8550 86 73 73) (8551 86 73 73 73) (8552 73 88) (8553 88) (8554 88 73) (8555 88 73 73) (8556 76) (8557 67) (8558 68) (8559 77) (8560 105) (8561 105 105) (8562 105 105 105) (8563 105 118) (8564 118) (8565 118 105) (8566 118 105 105) (8567 118 105 105 105) (8568 105 120) (8569 120) (8570 120 105) (8571 120 105 105) (8572 108) (8573 99) (8574 100) (8575 109) (8748 8747 8747) (8749 8747 8747 8747) (8751 8750 8750) (8752 8750 8750 8750) (9312 49) (9313 50) (9314 51) (9315 52) (9316 53) (9317 54) (9318 55) (9319 56) (9320 57) (9321 49 48) (9322 49 49) (9323 49 50) (9324 49 51) (9325 49 52) (9326 49 53) (9327 49 54) (9328 49 55) (9329 49 56) (9330 49 57) (9331 50 48) (9332 40 49 41) (9333 40 50 41) (9334 40 51 41) (9335 40 52 41) (9336 40 53 41) (9337 40 54 41) (9338 40 55 41) (9339 40 56 41) (9340 40 57 41) (9341 40 49 48 41) (9342 40 49 49 41) (9343 40 49 50 41) (9344 40 49 51 41) (9345 40 49 52 41) (9346 40 49 53 41) (9347 40 49 54 41) (9348 40 49 55 41) (9349 40 49 56 41) (9350 40 49 57 41) (9351 40 50 48 41) (9352 49 46) (9353 50 46) (9354 51 46) (9355 52 46) (9356 53 46) (9357 54 46) (9358 55 46) (9359 56 46) (9360 57 46) (9361 49 48 46) (9362 49 49 46) (9363 49 50 46) (9364 49 51 46) (9365 49 52 46) (9366 49 53 46) (9367 49 54 46) (9368 49 55 46) (9369 49 56 46) (9370 49 57 46) (9371 50 48 46) (9372 40 97 41) (9373 40 98 41) (9374 40 99 41) (9375 40 100 41) (9376 40 101 41) (9377 40 102 41) (9378 40 103 41) (9379 40 104 41) (9380 40 105 41) (9381 40 106 41) (9382 40 107 41) (9383 40 108 41) (9384 40 109 41) (9385 40 110 41) (9386 40 111 41) (9387 40 112 41) (9388 40 113 41) (9389 40 114 41) (9390 40 115 41) (9391 40 116 41) (9392 40 117 41) (9393 40 118 41) (9394 40 119 41) (9395 40 120 41) (9396 40 121 41) (9397 40 122 41) (9398 65) (9399 66) (9400 67) (9401 68) (9402 69) (9403 70) (9404 71) (9405 72) (9406 73) (9407 74) (9408 75) (9409 76) (9410 77) (9411 78) (9412 79) (9413 80) (9414 81) (9415 82) (9416 83) (9417 84) (9418 85) (9419 86) (9420 87) (9421 88) (9422 89) (9423 90) (9424 97) (9425 98) (9426 99) (9427 100) (9428 101) (9429 102) (9430 103) (9431 104) (9432 105) (9433 106) (9434 107) (9435 108) (9436 109) (9437 110) (9438 111) (9439 112) (9440 113) (9441 114) (9442 115) (9443 116) (9444 117) (9445 118) (9446 119) (9447 120) (9448 121) (9449 122) (9450 48) (10764 8747 8747 8747 8747) (10868 58 58 61) (10869 61 61) (10870 61 61 61) (11388 106) (11389 86) (11631 11617) (11935 27597) (12019 40863) (12032 19968) (12033 20008) (12034 20022) (12035 20031) (12036 20057) (12037 20101) (12038 20108) (12039 20128) (12040 20154) (12041 20799) (12042 20837) (12043 20843) (12044 20866) (12045 20886) (12046 20907) (12047 20960) (12048 20981) (12049 20992) (12050 21147) (12051 21241) (12052 21269) (12053 21274) (12054 21304) (12055 21313) (12056 21340) (12057 21353) (12058 21378) (12059 21430) (12060 21448) (12061 21475) (12062 22231) (12063 22303) (12064 22763) (12065 22786) (12066 22794) (12067 22805) (12068 22823) (12069 22899) (12070 23376) (12071 23424) (12072 23544) (12073 23567) (12074 23586) (12075 23608) (12076 23662) (12077 23665) (12078 24027) (12079 24037) (12080 24049) (12081 24062) (12082 24178) (12083 24186) (12084 24191) (12085 24308) (12086 24318) (12087 24331) (12088 24339) (12089 24400) (12090 24417) (12091 24435) (12092 24515) (12093 25096) (12094 25142) (12095 25163) (12096 25903) (12097 25908) (12098 25991) (12099 26007) (12100 26020) (12101 26041) (12102 26080) (12103 26085) (12104 26352) (12105 26376) (12106 26408) (12107 27424) (12108 27490) (12109 27513) (12110 27571) (12111 27595) (12112 27604) (12113 27611) (12114 27663) (12115 27668) (12116 27700) (12117 28779) (12118 29226) (12119 29238) (12120 29243) (12121 29247) (12122 29255) (12123 29273) (12124 29275) (12125 29356) (12126 29572) (12127 29577) (12128 29916) (12129 29926) (12130 29976) (12131 29983) (12132 29992) (12133 30000) (12134 30091) (12135 30098) (12136 30326) (12137 30333) (12138 30382) (12139 30399) (12140 30446) (12141 30683) (12142 30690) (12143 30707) (12144 31034) (12145 31160) (12146 31166) (12147 31348) (12148 31435) (12149 31481) (12150 31859) (12151 31992) (12152 32566) (12153 32593) (12154 32650) (12155 32701) (12156 32769) (12157 32780) (12158 32786) (12159 32819) (12160 32895) (12161 32905) (12162 33251) (12163 33258) (12164 33267) (12165 33276) (12166 33292) (12167 33307) (12168 33311) (12169 33390) (12170 33394) (12171 33400) (12172 34381) (12173 34411) (12174 34880) (12175 34892) (12176 34915) (12177 35198) (12178 35211) (12179 35282) (12180 35328) (12181 35895) (12182 35910) (12183 35925) (12184 35960) (12185 35997) (12186 36196) (12187 36208) (12188 36275) (12189 36523) (12190 36554) (12191 36763) (12192 36784) (12193 36789) (12194 37009) (12195 37193) (12196 37318) (12197 37324) (12198 37329) (12199 38263) (12200 38272) (12201 38428) (12202 38582) (12203 38585) (12204 38632) (12205 38737) (12206 38750) (12207 38754) (12208 38761) (12209 38859) (12210 38893) (12211 38899) (12212 38913) (12213 39080) (12214 39131) (12215 39135) (12216 39318) (12217 39321) (12218 39340) (12219 39592) (12220 39640) (12221 39647) (12222 39717) (12223 39727) (12224 39730) (12225 39740) (12226 39770) (12227 40165) (12228 40565) (12229 40575) (12230 40613) (12231 40635) (12232 40643) (12233 40653) (12234 40657) (12235 40697) (12236 40701) (12237 40718) (12238 40723) (12239 40736) (12240 40763) (12241 40778) (12242 40786) (12243 40845) (12244 40860) (12245 40864) (12288 32) (12342 12306) (12344 21313) (12345 21316) (12346 21317) (12443 32 12441) (12444 32 12442) (12447 12424 12426) (12543 12467 12488) (12593 4352) (12594 4353) (12595 4522) (12596 4354) (12597 4524) (12598 4525) (12599 4355) (12600 4356) (12601 4357) (12602 4528) (12603 4529) (12604 4530) (12605 4531) (12606 4532) (12607 4533) (12608 4378) (12609 4358) (12610 4359) (12611 4360) (12612 4385) (12613 4361) (12614 4362) (12615 4363) (12616 4364) (12617 4365) (12618 4366) (12619 4367) (12620 4368) (12621 4369) (12622 4370) (12623 4449) (12624 4450) (12625 4451) (12626 4452) (12627 4453) (12628 4454) (12629 4455) (12630 4456) (12631 4457) (12632 4458) (12633 4459) (12634 4460) (12635 4461) (12636 4462) (12637 4463) (12638 4464) (12639 4465) (12640 4466) (12641 4467) (12642 4468) (12643 4469) (12644 4448) (12645 4372) (12646 4373) (12647 4551) (12648 4552) (12649 4556) (12650 4558) (12651 4563) (12652 4567) (12653 4569) (12654 4380) (12655 4573) (12656 4575) (12657 4381) (12658 4382) (12659 4384) (12660 4386) (12661 4387) (12662 4391) (12663 4393) (12664 4395) (12665 4396) (12666 4397) (12667 4398) (12668 4399) (12669 4402) (12670 4406) (12671 4416) (12672 4423) (12673 4428) (12674 4593) (12675 4594) (12676 4439) (12677 4440) (12678 4441) (12679 4484) (12680 4485) (12681 4488) (12682 4497) (12683 4498) (12684 4500) (12685 4510) (12686 4513) (12690 19968) (12691 20108) (12692 19977) (12693 22235) (12694 19978) (12695 20013) (12696 19979) (12697 30002) (12698 20057) (12699 19993) (12700 19969) (12701 22825) (12702 22320) (12703 20154) (12800 40 4352 41) (12801 40 4354 41) (12802 40 4355 41) (12803 40 4357 41) (12804 40 4358 41) (12805 40 4359 41) (12806 40 4361 41) (12807 40 4363 41) (12808 40 4364 41) (12809 40 4366 41) (12810 40 4367 41) (12811 40 4368 41) (12812 40 4369 41) (12813 40 4370 41) (12814 40 4352 4449 41) (12815 40 4354 4449 41) (12816 40 4355 4449 41) (12817 40 4357 4449 41) (12818 40 4358 4449 41) (12819 40 4359 4449 41) (12820 40 4361 4449 41) (12821 40 4363 4449 41) (12822 40 4364 4449 41) (12823 40 4366 4449 41) (12824 40 4367 4449 41) (12825 40 4368 4449 41) (12826 40 4369 4449 41) (12827 40 4370 4449 41) (12828 40 4364 4462 41) (12829 40 4363 4457 4364 4453 4523 41) (12830 40 4363 4457 4370 4462 41) (12832 40 19968 41) (12833 40 20108 41) (12834 40 19977 41) (12835 40 22235 41) (12836 40 20116 41) (12837 40 20845 41) (12838 40 19971 41) (12839 40 20843 41) (12840 40 20061 41) (12841 40 21313 41) (12842 40 26376 41) (12843 40 28779 41) (12844 40 27700 41) (12845 40 26408 41) (12846 40 37329 41) (12847 40 22303 41) (12848 40 26085 41) (12849 40 26666 41) (12850 40 26377 41) (12851 40 31038 41) (12852 40 21517 41) (12853 40 29305 41) (12854 40 36001 41) (12855 40 31069 41) (12856 40 21172 41) (12857 40 20195 41) (12858 40 21628 41) (12859 40 23398 41) (12860 40 30435 41) (12861 40 20225 41) (12862 40 36039 41) (12863 40 21332 41) (12864 40 31085 41) (12865 40 20241 41) (12866 40 33258 41) (12867 40 33267 41) (12880 80 84 69) (12881 50 49) (12882 50 50) (12883 50 51) (12884 50 52) (12885 50 53) (12886 50 54) (12887 50 55) (12888 50 56) (12889 50 57) (12890 51 48) (12891 51 49) (12892 51 50) (12893 51 51) (12894 51 52) (12895 51 53) (12896 4352) (12897 4354) (12898 4355) (12899 4357) (12900 4358) (12901 4359) (12902 4361) (12903 4363) (12904 4364) (12905 4366) (12906 4367) (12907 4368) (12908 4369) (12909 4370) (12910 4352 4449) (12911 4354 4449) (12912 4355 4449) (12913 4357 4449) (12914 4358 4449) (12915 4359 4449) (12916 4361 4449) (12917 4363 4449) (12918 4364 4449) (12919 4366 4449) (12920 4367 4449) (12921 4368 4449) (12922 4369 4449) (12923 4370 4449) (12924 4366 4449 4535 4352 4457) (12925 4364 4462 4363 4468) (12926 4363 4462) (12928 19968) (12929 20108) (12930 19977) (12931 22235) (12932 20116) (12933 20845) (12934 19971) (12935 20843) (12936 20061) (12937 21313) (12938 26376) (12939 28779) (12940 27700) (12941 26408) (12942 37329) (12943 22303) (12944 26085) (12945 26666) (12946 26377) (12947 31038) (12948 21517) (12949 29305) (12950 36001) (12951 31069) (12952 21172) (12953 31192) (12954 30007) (12955 22899) (12956 36969) (12957 20778) (12958 21360) (12959 27880) (12960 38917) (12961 20241) (12962 20889) (12963 27491) (12964 19978) (12965 20013) (12966 19979) (12967 24038) (12968 21491) (12969 21307) (12970 23447) (12971 23398) (12972 30435) (12973 20225) (12974 36039) (12975 21332) (12976 22812) (12977 51 54) (12978 51 55) (12979 51 56) (12980 51 57) (12981 52 48) (12982 52 49) (12983 52 50) (12984 52 51) (12985 52 52) (12986 52 53) (12987 52 54) (12988 52 55) (12989 52 56) (12990 52 57) (12991 53 48) (12992 49 26376) (12993 50 26376) (12994 51 26376) (12995 52 26376) (12996 53 26376) (12997 54 26376) (12998 55 26376) (12999 56 26376) (13000 57 26376) (13001 49 48 26376) (13002 49 49 26376) (13003 49 50 26376) (13004 72 103) (13005 101 114 103) (13006 101 86) (13007 76 84 68) (13008 12450) (13009 12452) (13010 12454) (13011 12456) (13012 12458) (13013 12459) (13014 12461) (13015 12463) (13016 12465) (13017 12467) (13018 12469) (13019 12471) (13020 12473) (13021 12475) (13022 12477) (13023 12479) (13024 12481) (13025 12484) (13026 12486) (13027 12488) (13028 12490) (13029 12491) (13030 12492) (13031 12493) (13032 12494) (13033 12495) (13034 12498) (13035 12501) (13036 12504) (13037 12507) (13038 12510) (13039 12511) (13040 12512) (13041 12513) (13042 12514) (13043 12516) (13044 12518) (13045 12520) (13046 12521) (13047 12522) (13048 12523) (13049 12524) (13050 12525) (13051 12527) (13052 12528) (13053 12529) (13054 12530) (13056 12450 12497 12540 12488) (13057 12450 12523 12501 12449) (13058 12450 12531 12506 12450) (13059 12450 12540 12523) (13060 12452 12491 12531 12464) (13061 12452 12531 12481) (13062 12454 12457 12531) (13063 12456 12473 12463 12540 12489) (13064 12456 12540 12459 12540) (13065 12458 12531 12473) (13066 12458 12540 12512) (13067 12459 12452 12522) (13068 12459 12521 12483 12488) (13069 12459 12525 12522 12540) (13070 12460 12525 12531) (13071 12460 12531 12510) (13072 12462 12460) (13073 12462 12491 12540) (13074 12461 12517 12522 12540) (13075 12462 12523 12480 12540) (13076 12461 12525) (13077 12461 12525 12464 12521 12512) (13078 12461 12525 12513 12540 12488 12523) (13079 12461 12525 12527 12483 12488) (13080 12464 12521 12512) (13081 12464 12521 12512 12488 12531) (13082 12463 12523 12476 12452 12525) (13083 12463 12525 12540 12493) (13084 12465 12540 12473) (13085 12467 12523 12490) (13086 12467 12540 12509) (13087 12469 12452 12463 12523) (13088 12469 12531 12481 12540 12512) (13089 12471 12522 12531 12464) (13090 12475 12531 12481) (13091 12475 12531 12488) (13092 12480 12540 12473) (13093 12487 12471) (13094 12489 12523) (13095 12488 12531) (13096 12490 12494) (13097 12494 12483 12488) (13098 12495 12452 12484) (13099 12497 12540 12475 12531 12488) (13100 12497 12540 12484) (13101 12496 12540 12524 12523) (13102 12500 12450 12473 12488 12523) (13103 12500 12463 12523) (13104 12500 12467) (13105 12499 12523) (13106 12501 12449 12521 12483 12489) (13107 12501 12451 12540 12488) (13108 12502 12483 12471 12455 12523) (13109 12501 12521 12531) (13110 12504 12463 12479 12540 12523) (13111 12506 12477) (13112 12506 12491 12498) (13113 12504 12523 12484) (13114 12506 12531 12473) (13115 12506 12540 12472) (13116 12505 12540 12479) (13117 12509 12452 12531 12488) (13118 12508 12523 12488) (13119 12507 12531) (13120 12509 12531 12489) (13121 12507 12540 12523) (13122 12507 12540 12531) (13123 12510 12452 12463 12525) (13124 12510 12452 12523) (13125 12510 12483 12495) (13126 12510 12523 12463) (13127 12510 12531 12471 12519 12531) (13128 12511 12463 12525 12531) (13129 12511 12522) (13130 12511 12522 12496 12540 12523) (13131 12513 12460) (13132 12513 12460 12488 12531) (13133 12513 12540 12488 12523) (13134 12516 12540 12489) (13135 12516 12540 12523) (13136 12518 12450 12531) (13137 12522 12483 12488 12523) (13138 12522 12521) (13139 12523 12500 12540) (13140 12523 12540 12502 12523) (13141 12524 12512) (13142 12524 12531 12488 12466 12531) (13143 12527 12483 12488) (13144 48 28857) (13145 49 28857) (13146 50 28857) (13147 51 28857) (13148 52 28857) (13149 53 28857) (13150 54 28857) (13151 55 28857) (13152 56 28857) (13153 57 28857) (13154 49 48 28857) (13155 49 49 28857) (13156 49 50 28857) (13157 49 51 28857) (13158 49 52 28857) (13159 49 53 28857) (13160 49 54 28857) (13161 49 55 28857) (13162 49 56 28857) (13163 49 57 28857) (13164 50 48 28857) (13165 50 49 28857) (13166 50 50 28857) (13167 50 51 28857) (13168 50 52 28857) (13169 104 80 97) (13170 100 97) (13171 65 85) (13172 98 97 114) (13173 111 86) (13174 112 99) (13175 100 109) (13176 100 109 178) (13177 100 109 179) (13178 73 85) (13179 24179 25104) (13180 26157 21644) (13181 22823 27491) (13182 26126 27835) (13183 26666 24335 20250 31038) (13184 112 65) (13185 110 65) (13186 956 65) (13187 109 65) (13188 107 65) (13189 75 66) (13190 77 66) (13191 71 66) (13192 99 97 108) (13193 107 99 97 108) (13194 112 70) (13195 110 70) (13196 956 70) (13197 956 103) (13198 109 103) (13199 107 103) (13200 72 122) (13201 107 72 122) (13202 77 72 122) (13203 71 72 122) (13204 84 72 122) (13205 956 8467) (13206 109 8467) (13207 100 8467) (13208 107 8467) (13209 102 109) (13210 110 109) (13211 956 109) (13212 109 109) (13213 99 109) (13214 107 109) (13215 109 109 178) (13216 99 109 178) (13217 109 178) (13218 107 109 178) (13219 109 109 179) (13220 99 109 179) (13221 109 179) (13222 107 109 179) (13223 109 8725 115) (13224 109 8725 115 178) (13225 80 97) (13226 107 80 97) (13227 77 80 97) (13228 71 80 97) (13229 114 97 100) (13230 114 97 100 8725 115) (13231 114 97 100 8725 115 178) (13232 112 115) (13233 110 115) (13234 956 115) (13235 109 115) (13236 112 86) (13237 110 86) (13238 956 86) (13239 109 86) (13240 107 86) (13241 77 86) (13242 112 87) (13243 110 87) (13244 956 87) (13245 109 87) (13246 107 87) (13247 77 87) (13248 107 937) (13249 77 937) (13250 97 46 109 46) (13251 66 113) (13252 99 99) (13253 99 100) (13254 67 8725 107 103) (13255 67 111 46) (13256 100 66) (13257 71 121) (13258 104 97) (13259 72 80) (13260 105 110) (13261 75 75) (13262 75 77) (13263 107 116) (13264 108 109) (13265 108 110) (13266 108 111 103) (13267 108 120) (13268 109 98) (13269 109 105 108) (13270 109 111 108) (13271 80 72) (13272 112 46 109 46) (13273 80 80 77) (13274 80 82) (13275 115 114) (13276 83 118) (13277 87 98) (13278 86 8725 109) (13279 65 8725 109) (13280 49 26085) (13281 50 26085) (13282 51 26085) (13283 52 26085) (13284 53 26085) (13285 54 26085) (13286 55 26085) (13287 56 26085) (13288 57 26085) (13289 49 48 26085) (13290 49 49 26085) (13291 49 50 26085) (13292 49 51 26085) (13293 49 52 26085) (13294 49 53 26085) (13295 49 54 26085) (13296 49 55 26085) (13297 49 56 26085) (13298 49 57 26085) (13299 50 48 26085) (13300 50 49 26085) (13301 50 50 26085) (13302 50 51 26085) (13303 50 52 26085) (13304 50 53 26085) (13305 50 54 26085) (13306 50 55 26085) (13307 50 56 26085) (13308 50 57 26085) (13309 51 48 26085) (13310 51 49 26085) (13311 103 97 108) (42864 42863) (64256 102 102) (64257 102 105) (64258 102 108) (64259 102 102 105) (64260 102 102 108) (64261 383 116) (64262 115 116) (64275 1396 1398) (64276 1396 1381) (64277 1396 1387) (64278 1406 1398) (64279 1396 1389) (64288 1506) (64289 1488) (64290 1491) (64291 1492) (64292 1499) (64293 1500) (64294 1501) (64295 1512) (64296 1514) (64297 43) (64335 1488 1500) (64336 1649) (64337 1649) (64338 1659) (64339 1659) (64340 1659) (64341 1659) (64342 1662) (64343 1662) (64344 1662) (64345 1662) (64346 1664) (64347 1664) (64348 1664) (64349 1664) (64350 1658) (64351 1658) (64352 1658) (64353 1658) (64354 1663) (64355 1663) (64356 1663) (64357 1663) (64358 1657) (64359 1657) (64360 1657) (64361 1657) (64362 1700) (64363 1700) (64364 1700) (64365 1700) (64366 1702) (64367 1702) (64368 1702) (64369 1702) (64370 1668) (64371 1668) (64372 1668) (64373 1668) (64374 1667) (64375 1667) (64376 1667) (64377 1667) (64378 1670) (64379 1670) (64380 1670) (64381 1670) (64382 1671) (64383 1671) (64384 1671) (64385 1671) (64386 1677) (64387 1677) (64388 1676) (64389 1676) (64390 1678) (64391 1678) (64392 1672) (64393 1672) (64394 1688) (64395 1688) (64396 1681) (64397 1681) (64398 1705) (64399 1705) (64400 1705) (64401 1705) (64402 1711) (64403 1711) (64404 1711) (64405 1711) (64406 1715) (64407 1715) (64408 1715) (64409 1715) (64410 1713) (64411 1713) (64412 1713) (64413 1713) (64414 1722) (64415 1722) (64416 1723) (64417 1723) (64418 1723) (64419 1723) (64420 1728) (64421 1728) (64422 1729) (64423 1729) (64424 1729) (64425 1729) (64426 1726) (64427 1726) (64428 1726) (64429 1726) (64430 1746) (64431 1746) (64432 1747) (64433 1747) (64467 1709) (64468 1709) (64469 1709) (64470 1709) (64471 1735) (64472 1735) (64473 1734) (64474 1734) (64475 1736) (64476 1736) (64477 1655) (64478 1739) (64479 1739) (64480 1733) (64481 1733) (64482 1737) (64483 1737) (64484 1744) (64485 1744) (64486 1744) (64487 1744) (64488 1609) (64489 1609) (64490 1574 1575) (64491 1574 1575) (64492 1574 1749) (64493 1574 1749) (64494 1574 1608) (64495 1574 1608) (64496 1574 1735) (64497 1574 1735) (64498 1574 1734) (64499 1574 1734) (64500 1574 1736) (64501 1574 1736) (64502 1574 1744) (64503 1574 1744) (64504 1574 1744) (64505 1574 1609) (64506 1574 1609) (64507 1574 1609) (64508 1740) (64509 1740) (64510 1740) (64511 1740) (64512 1574 1580) (64513 1574 1581) (64514 1574 1605) (64515 1574 1609) (64516 1574 1610) (64517 1576 1580) (64518 1576 1581) (64519 1576 1582) (64520 1576 1605) (64521 1576 1609) (64522 1576 1610) (64523 1578 1580) (64524 1578 1581) (64525 1578 1582) (64526 1578 1605) (64527 1578 1609) (64528 1578 1610) (64529 1579 1580) (64530 1579 1605) (64531 1579 1609) (64532 1579 1610) (64533 1580 1581) (64534 1580 1605) (64535 1581 1580) (64536 1581 1605) (64537 1582 1580) (64538 1582 1581) (64539 1582 1605) (64540 1587 1580) (64541 1587 1581) (64542 1587 1582) (64543 1587 1605) (64544 1589 1581) (64545 1589 1605) (64546 1590 1580) (64547 1590 1581) (64548 1590 1582) (64549 1590 1605) (64550 1591 1581) (64551 1591 1605) (64552 1592 1605) (64553 1593 1580) (64554 1593 1605) (64555 1594 1580) (64556 1594 1605) (64557 1601 1580) (64558 1601 1581) (64559 1601 1582) (64560 1601 1605) (64561 1601 1609) (64562 1601 1610) (64563 1602 1581) (64564 1602 1605) (64565 1602 1609) (64566 1602 1610) (64567 1603 1575) (64568 1603 1580) (64569 1603 1581) (64570 1603 1582) (64571 1603 1604) (64572 1603 1605) (64573 1603 1609) (64574 1603 1610) (64575 1604 1580) (64576 1604 1581) (64577 1604 1582) (64578 1604 1605) (64579 1604 1609) (64580 1604 1610) (64581 1605 1580) (64582 1605 1581) (64583 1605 1582) (64584 1605 1605) (64585 1605 1609) (64586 1605 1610) (64587 1606 1580) (64588 1606 1581) (64589 1606 1582) (64590 1606 1605) (64591 1606 1609) (64592 1606 1610) (64593 1607 1580) (64594 1607 1605) (64595 1607 1609) (64596 1607 1610) (64597 1610 1580) (64598 1610 1581) (64599 1610 1582) (64600 1610 1605) (64601 1610 1609) (64602 1610 1610) (64603 1584 1648) (64604 1585 1648) (64605 1609 1648) (64606 32 1612 1617) (64607 32 1613 1617) (64608 32 1614 1617) (64609 32 1615 1617) (64610 32 1616 1617) (64611 32 1617 1648) (64612 1574 1585) (64613 1574 1586) (64614 1574 1605) (64615 1574 1606) (64616 1574 1609) (64617 1574 1610) (64618 1576 1585) (64619 1576 1586) (64620 1576 1605) (64621 1576 1606) (64622 1576 1609) (64623 1576 1610) (64624 1578 1585) (64625 1578 1586) (64626 1578 1605) (64627 1578 1606) (64628 1578 1609) (64629 1578 1610) (64630 1579 1585) (64631 1579 1586) (64632 1579 1605) (64633 1579 1606) (64634 1579 1609) (64635 1579 1610) (64636 1601 1609) (64637 1601 1610) (64638 1602 1609) (64639 1602 1610) (64640 1603 1575) (64641 1603 1604) (64642 1603 1605) (64643 1603 1609) (64644 1603 1610) (64645 1604 1605) (64646 1604 1609) (64647 1604 1610) (64648 1605 1575) (64649 1605 1605) (64650 1606 1585) (64651 1606 1586) (64652 1606 1605) (64653 1606 1606) (64654 1606 1609) (64655 1606 1610) (64656 1609 1648) (64657 1610 1585) (64658 1610 1586) (64659 1610 1605) (64660 1610 1606) (64661 1610 1609) (64662 1610 1610) (64663 1574 1580) (64664 1574 1581) (64665 1574 1582) (64666 1574 1605) (64667 1574 1607) (64668 1576 1580) (64669 1576 1581) (64670 1576 1582) (64671 1576 1605) (64672 1576 1607) (64673 1578 1580) (64674 1578 1581) (64675 1578 1582) (64676 1578 1605) (64677 1578 1607) (64678 1579 1605) (64679 1580 1581) (64680 1580 1605) (64681 1581 1580) (64682 1581 1605) (64683 1582 1580) (64684 1582 1605) (64685 1587 1580) (64686 1587 1581) (64687 1587 1582) (64688 1587 1605) (64689 1589 1581) (64690 1589 1582) (64691 1589 1605) (64692 1590 1580) (64693 1590 1581) (64694 1590 1582) (64695 1590 1605) (64696 1591 1581) (64697 1592 1605) (64698 1593 1580) (64699 1593 1605) (64700 1594 1580) (64701 1594 1605) (64702 1601 1580) (64703 1601 1581) (64704 1601 1582) (64705 1601 1605) (64706 1602 1581) (64707 1602 1605) (64708 1603 1580) (64709 1603 1581) (64710 1603 1582) (64711 1603 1604) (64712 1603 1605) (64713 1604 1580) (64714 1604 1581) (64715 1604 1582) (64716 1604 1605) (64717 1604 1607) (64718 1605 1580) (64719 1605 1581) (64720 1605 1582) (64721 1605 1605) (64722 1606 1580) (64723 1606 1581) (64724 1606 1582) (64725 1606 1605) (64726 1606 1607) (64727 1607 1580) (64728 1607 1605) (64729 1607 1648) (64730 1610 1580) (64731 1610 1581) (64732 1610 1582) (64733 1610 1605) (64734 1610 1607) (64735 1574 1605) (64736 1574 1607) (64737 1576 1605) (64738 1576 1607) (64739 1578 1605) (64740 1578 1607) (64741 1579 1605) (64742 1579 1607) (64743 1587 1605) (64744 1587 1607) (64745 1588 1605) (64746 1588 1607) (64747 1603 1604) (64748 1603 1605) (64749 1604 1605) (64750 1606 1605) (64751 1606 1607) (64752 1610 1605) (64753 1610 1607) (64754 1600 1614 1617) (64755 1600 1615 1617) (64756 1600 1616 1617) (64757 1591 1609) (64758 1591 1610) (64759 1593 1609) (64760 1593 1610) (64761 1594 1609) (64762 1594 1610) (64763 1587 1609) (64764 1587 1610) (64765 1588 1609) (64766 1588 1610) (64767 1581 1609) (64768 1581 1610) (64769 1580 1609) (64770 1580 1610) (64771 1582 1609) (64772 1582 1610) (64773 1589 1609) (64774 1589 1610) (64775 1590 1609) (64776 1590 1610) (64777 1588 1580) (64778 1588 1581) (64779 1588 1582) (64780 1588 1605) (64781 1588 1585) (64782 1587 1585) (64783 1589 1585) (64784 1590 1585) (64785 1591 1609) (64786 1591 1610) (64787 1593 1609) (64788 1593 1610) (64789 1594 1609) (64790 1594 1610) (64791 1587 1609) (64792 1587 1610) (64793 1588 1609) (64794 1588 1610) (64795 1581 1609) (64796 1581 1610) (64797 1580 1609) (64798 1580 1610) (64799 1582 1609) (64800 1582 1610) (64801 1589 1609) (64802 1589 1610) (64803 1590 1609) (64804 1590 1610) (64805 1588 1580) (64806 1588 1581) (64807 1588 1582) (64808 1588 1605) (64809 1588 1585) (64810 1587 1585) (64811 1589 1585) (64812 1590 1585) (64813 1588 1580) (64814 1588 1581) (64815 1588 1582) (64816 1588 1605) (64817 1587 1607) (64818 1588 1607) (64819 1591 1605) (64820 1587 1580) (64821 1587 1581) (64822 1587 1582) (64823 1588 1580) (64824 1588 1581) (64825 1588 1582) (64826 1591 1605) (64827 1592 1605) (64828 1575 1611) (64829 1575 1611) (64848 1578 1580 1605) (64849 1578 1581 1580) (64850 1578 1581 1580) (64851 1578 1581 1605) (64852 1578 1582 1605) (64853 1578 1605 1580) (64854 1578 1605 1581) (64855 1578 1605 1582) (64856 1580 1605 1581) (64857 1580 1605 1581) (64858 1581 1605 1610) (64859 1581 1605 1609) (64860 1587 1581 1580) (64861 1587 1580 1581) (64862 1587 1580 1609) (64863 1587 1605 1581) (64864 1587 1605 1581) (64865 1587 1605 1580) (64866 1587 1605 1605) (64867 1587 1605 1605) (64868 1589 1581 1581) (64869 1589 1581 1581) (64870 1589 1605 1605) (64871 1588 1581 1605) (64872 1588 1581 1605) (64873 1588 1580 1610) (64874 1588 1605 1582) (64875 1588 1605 1582) (64876 1588 1605 1605) (64877 1588 1605 1605) (64878 1590 1581 1609) (64879 1590 1582 1605) (64880 1590 1582 1605) (64881 1591 1605 1581) (64882 1591 1605 1581) (64883 1591 1605 1605) (64884 1591 1605 1610) (64885 1593 1580 1605) (64886 1593 1605 1605) (64887 1593 1605 1605) (64888 1593 1605 1609) (64889 1594 1605 1605) (64890 1594 1605 1610) (64891 1594 1605 1609) (64892 1601 1582 1605) (64893 1601 1582 1605) (64894 1602 1605 1581) (64895 1602 1605 1605) (64896 1604 1581 1605) (64897 1604 1581 1610) (64898 1604 1581 1609) (64899 1604 1580 1580) (64900 1604 1580 1580) (64901 1604 1582 1605) (64902 1604 1582 1605) (64903 1604 1605 1581) (64904 1604 1605 1581) (64905 1605 1581 1580) (64906 1605 1581 1605) (64907 1605 1581 1610) (64908 1605 1580 1581) (64909 1605 1580 1605) (64910 1605 1582 1580) (64911 1605 1582 1605) (64914 1605 1580 1582) (64915 1607 1605 1580) (64916 1607 1605 1605) (64917 1606 1581 1605) (64918 1606 1581 1609) (64919 1606 1580 1605) (64920 1606 1580 1605) (64921 1606 1580 1609) (64922 1606 1605 1610) (64923 1606 1605 1609) (64924 1610 1605 1605) (64925 1610 1605 1605) (64926 1576 1582 1610) (64927 1578 1580 1610) (64928 1578 1580 1609) (64929 1578 1582 1610) (64930 1578 1582 1609) (64931 1578 1605 1610) (64932 1578 1605 1609) (64933 1580 1605 1610) (64934 1580 1581 1609) (64935 1580 1605 1609) (64936 1587 1582 1609) (64937 1589 1581 1610) (64938 1588 1581 1610) (64939 1590 1581 1610) (64940 1604 1580 1610) (64941 1604 1605 1610) (64942 1610 1581 1610) (64943 1610 1580 1610) (64944 1610 1605 1610) (64945 1605 1605 1610) (64946 1602 1605 1610) (64947 1606 1581 1610) (64948 1602 1605 1581) (64949 1604 1581 1605) (64950 1593 1605 1610) (64951 1603 1605 1610) (64952 1606 1580 1581) (64953 1605 1582 1610) (64954 1604 1580 1605) (64955 1603 1605 1605) (64956 1604 1580 1605) (64957 1606 1580 1581) (64958 1580 1581 1610) (64959 1581 1580 1610) (64960 1605 1580 1610) (64961 1601 1605 1610) (64962 1576 1581 1610) (64963 1603 1605 1605) (64964 1593 1580 1605) (64965 1589 1605 1605) (64966 1587 1582 1610) (64967 1606 1580 1610) (65008 1589 1604 1746) (65009 1602 1604 1746) (65010 1575 1604 1604 1607) (65011 1575 1603 1576 1585) (65012 1605 1581 1605 1583) (65013 1589 1604 1593 1605) (65014 1585 1587 1608 1604) (65015 1593 1604 1610 1607) (65016 1608 1587 1604 1605) (65017 1589 1604 1609) (65018 1589 1604 1609 32 1575 1604 1604 1607 32 1593 1604 1610 1607 32 1608 1587 1604 1605) (65019 1580 1604 32 1580 1604 1575 1604 1607) (65020 1585 1740 1575 1604) (65040 44) (65041 12289) (65042 12290) (65043 58) (65044 59) (65045 33) (65046 63) (65047 12310) (65048 12311) (65049 8230) (65072 8229) (65073 8212) (65074 8211) (65075 95) (65076 95) (65077 40) (65078 41) (65079 123) (65080 125) (65081 12308) (65082 12309) (65083 12304) (65084 12305) (65085 12298) (65086 12299) (65087 12296) (65088 12297) (65089 12300) (65090 12301) (65091 12302) (65092 12303) (65095 91) (65096 93) (65097 8254) (65098 8254) (65099 8254) (65100 8254) (65101 95) (65102 95) (65103 95) (65104 44) (65105 12289) (65106 46) (65108 59) (65109 58) (65110 63) (65111 33) (65112 8212) (65113 40) (65114 41) (65115 123) (65116 125) (65117 12308) (65118 12309) (65119 35) (65120 38) (65121 42) (65122 43) (65123 45) (65124 60) (65125 62) (65126 61) (65128 92) (65129 36) (65130 37) (65131 64) (65136 32 1611) (65137 1600 1611) (65138 32 1612) (65140 32 1613) (65142 32 1614) (65143 1600 1614) (65144 32 1615) (65145 1600 1615) (65146 32 1616) (65147 1600 1616) (65148 32 1617) (65149 1600 1617) (65150 32 1618) (65151 1600 1618) (65152 1569) (65153 1570) (65154 1570) (65155 1571) (65156 1571) (65157 1572) (65158 1572) (65159 1573) (65160 1573) (65161 1574) (65162 1574) (65163 1574) (65164 1574) (65165 1575) (65166 1575) (65167 1576) (65168 1576) (65169 1576) (65170 1576) (65171 1577) (65172 1577) (65173 1578) (65174 1578) (65175 1578) (65176 1578) (65177 1579) (65178 1579) (65179 1579) (65180 1579) (65181 1580) (65182 1580) (65183 1580) (65184 1580) (65185 1581) (65186 1581) (65187 1581) (65188 1581) (65189 1582) (65190 1582) (65191 1582) (65192 1582) (65193 1583) (65194 1583) (65195 1584) (65196 1584) (65197 1585) (65198 1585) (65199 1586) (65200 1586) (65201 1587) (65202 1587) (65203 1587) (65204 1587) (65205 1588) (65206 1588) (65207 1588) (65208 1588) (65209 1589) (65210 1589) (65211 1589) (65212 1589) (65213 1590) (65214 1590) (65215 1590) (65216 1590) (65217 1591) (65218 1591) (65219 1591) (65220 1591) (65221 1592) (65222 1592) (65223 1592) (65224 1592) (65225 1593) (65226 1593) (65227 1593) (65228 1593) (65229 1594) (65230 1594) (65231 1594) (65232 1594) (65233 1601) (65234 1601) (65235 1601) (65236 1601) (65237 1602) (65238 1602) (65239 1602) (65240 1602) (65241 1603) (65242 1603) (65243 1603) (65244 1603) (65245 1604) (65246 1604) (65247 1604) (65248 1604) (65249 1605) (65250 1605) (65251 1605) (65252 1605) (65253 1606) (65254 1606) (65255 1606) (65256 1606) (65257 1607) (65258 1607) (65259 1607) (65260 1607) (65261 1608) (65262 1608) (65263 1609) (65264 1609) (65265 1610) (65266 1610) (65267 1610) (65268 1610) (65269 1604 1570) (65270 1604 1570) (65271 1604 1571) (65272 1604 1571) (65273 1604 1573) (65274 1604 1573) (65275 1604 1575) (65276 1604 1575) (65281 33) (65282 34) (65283 35) (65284 36) (65285 37) (65286 38) (65287 39) (65288 40) (65289 41) (65290 42) (65291 43) (65292 44) (65293 45) (65294 46) (65295 47) (65296 48) (65297 49) (65298 50) (65299 51) (65300 52) (65301 53) (65302 54) (65303 55) (65304 56) (65305 57) (65306 58) (65307 59) (65308 60) (65309 61) (65310 62) (65311 63) (65312 64) (65313 65) (65314 66) (65315 67) (65316 68) (65317 69) (65318 70) (65319 71) (65320 72) (65321 73) (65322 74) (65323 75) (65324 76) (65325 77) (65326 78) (65327 79) (65328 80) (65329 81) (65330 82) (65331 83) (65332 84) (65333 85) (65334 86) (65335 87) (65336 88) (65337 89) (65338 90) (65339 91) (65340 92) (65341 93) (65342 94) (65343 95) (65344 96) (65345 97) (65346 98) (65347 99) (65348 100) (65349 101) (65350 102) (65351 103) (65352 104) (65353 105) (65354 106) (65355 107) (65356 108) (65357 109) (65358 110) (65359 111) (65360 112) (65361 113) (65362 114) (65363 115) (65364 116) (65365 117) (65366 118) (65367 119) (65368 120) (65369 121) (65370 122) (65371 123) (65372 124) (65373 125) (65374 126) (65375 10629) (65376 10630) (65377 12290) (65378 12300) (65379 12301) (65380 12289) (65381 12539) (65382 12530) (65383 12449) (65384 12451) (65385 12453) (65386 12455) (65387 12457) (65388 12515) (65389 12517) (65390 12519) (65391 12483) (65392 12540) (65393 12450) (65394 12452) (65395 12454) (65396 12456) (65397 12458) (65398 12459) (65399 12461) (65400 12463) (65401 12465) (65402 12467) (65403 12469) (65404 12471) (65405 12473) (65406 12475) (65407 12477) (65408 12479) (65409 12481) (65410 12484) (65411 12486) (65412 12488) (65413 12490) (65414 12491) (65415 12492) (65416 12493) (65417 12494) (65418 12495) (65419 12498) (65420 12501) (65421 12504) (65422 12507) (65423 12510) (65424 12511) (65425 12512) (65426 12513) (65427 12514) (65428 12516) (65429 12518) (65430 12520) (65431 12521) (65432 12522) (65433 12523) (65434 12524) (65435 12525) (65436 12527) (65437 12531) (65438 12441) (65439 12442) (65440 12644) (65441 12593) (65442 12594) (65443 12595) (65444 12596) (65445 12597) (65446 12598) (65447 12599) (65448 12600) (65449 12601) (65450 12602) (65451 12603) (65452 12604) (65453 12605) (65454 12606) (65455 12607) (65456 12608) (65457 12609) (65458 12610) (65459 12611) (65460 12612) (65461 12613) (65462 12614) (65463 12615) (65464 12616) (65465 12617) (65466 12618) (65467 12619) (65468 12620) (65469 12621) (65470 12622) (65474 12623) (65475 12624) (65476 12625) (65477 12626) (65478 12627) (65479 12628) (65482 12629) (65483 12630) (65484 12631) (65485 12632) (65486 12633) (65487 12634) (65490 12635) (65491 12636) (65492 12637) (65493 12638) (65494 12639) (65495 12640) (65498 12641) (65499 12642) (65500 12643) (65504 162) (65505 163) (65506 172) (65507 175) (65508 166) (65509 165) (65510 8361) (65512 9474) (65513 8592) (65514 8593) (65515 8594) (65516 8595) (65517 9632) (65518 9675) (119808 65) (119809 66) (119810 67) (119811 68) (119812 69) (119813 70) (119814 71) (119815 72) (119816 73) (119817 74) (119818 75) (119819 76) (119820 77) (119821 78) (119822 79) (119823 80) (119824 81) (119825 82) (119826 83) (119827 84) (119828 85) (119829 86) (119830 87) (119831 88) (119832 89) (119833 90) (119834 97) (119835 98) (119836 99) (119837 100) (119838 101) (119839 102) (119840 103) (119841 104) (119842 105) (119843 106) (119844 107) (119845 108) (119846 109) (119847 110) (119848 111) (119849 112) (119850 113) (119851 114) (119852 115) (119853 116) (119854 117) (119855 118) (119856 119) (119857 120) (119858 121) (119859 122) (119860 65) (119861 66) (119862 67) (119863 68) (119864 69) (119865 70) (119866 71) (119867 72) (119868 73) (119869 74) (119870 75) (119871 76) (119872 77) (119873 78) (119874 79) (119875 80) (119876 81) (119877 82) (119878 83) (119879 84) (119880 85) (119881 86) (119882 87) (119883 88) (119884 89) (119885 90) (119886 97) (119887 98) (119888 99) (119889 100) (119890 101) (119891 102) (119892 103) (119894 105) (119895 106) (119896 107) (119897 108) (119898 109) (119899 110) (119900 111) (119901 112) (119902 113) (119903 114) (119904 115) (119905 116) (119906 117) (119907 118) (119908 119) (119909 120) (119910 121) (119911 122) (119912 65) (119913 66) (119914 67) (119915 68) (119916 69) (119917 70) (119918 71) (119919 72) (119920 73) (119921 74) (119922 75) (119923 76) (119924 77) (119925 78) (119926 79) (119927 80) (119928 81) (119929 82) (119930 83) (119931 84) (119932 85) (119933 86) (119934 87) (119935 88) (119936 89) (119937 90) (119938 97) (119939 98) (119940 99) (119941 100) (119942 101) (119943 102) (119944 103) (119945 104) (119946 105) (119947 106) (119948 107) (119949 108) (119950 109) (119951 110) (119952 111) (119953 112) (119954 113) (119955 114) (119956 115) (119957 116) (119958 117) (119959 118) (119960 119) (119961 120) (119962 121) (119963 122) (119964 65) (119966 67) (119967 68) (119970 71) (119973 74) (119974 75) (119977 78) (119978 79) (119979 80) (119980 81) (119982 83) (119983 84) (119984 85) (119985 86) (119986 87) (119987 88) (119988 89) (119989 90) (119990 97) (119991 98) (119992 99) (119993 100) (119995 102) (119997 104) (119998 105) (119999 106) (120000 107) (120001 108) (120002 109) (120003 110) (120005 112) (120006 113) (120007 114) (120008 115) (120009 116) (120010 117) (120011 118) (120012 119) (120013 120) (120014 121) (120015 122) (120016 65) (120017 66) (120018 67) (120019 68) (120020 69) (120021 70) (120022 71) (120023 72) (120024 73) (120025 74) (120026 75) (120027 76) (120028 77) (120029 78) (120030 79) (120031 80) (120032 81) (120033 82) (120034 83) (120035 84) (120036 85) (120037 86) (120038 87) (120039 88) (120040 89) (120041 90) (120042 97) (120043 98) (120044 99) (120045 100) (120046 101) (120047 102) (120048 103) (120049 104) (120050 105) (120051 106) (120052 107) (120053 108) (120054 109) (120055 110) (120056 111) (120057 112) (120058 113) (120059 114) (120060 115) (120061 116) (120062 117) (120063 118) (120064 119) (120065 120) (120066 121) (120067 122) (120068 65) (120069 66) (120071 68) (120072 69) (120073 70) (120074 71) (120077 74) (120078 75) (120079 76) (120080 77) (120081 78) (120082 79) (120083 80) (120084 81) (120086 83) (120087 84) (120088 85) (120089 86) (120090 87) (120091 88) (120092 89) (120094 97) (120095 98) (120096 99) (120097 100) (120098 101) (120099 102) (120100 103) (120101 104) (120102 105) (120103 106) (120104 107) (120105 108) (120106 109) (120107 110) (120108 111) (120109 112) (120110 113) (120111 114) (120112 115) (120113 116) (120114 117) (120115 118) (120116 119) (120117 120) (120118 121) (120119 122) (120120 65) (120121 66) (120123 68) (120124 69) (120125 70) (120126 71) (120128 73) (120129 74) (120130 75) (120131 76) (120132 77) (120134 79) (120138 83) (120139 84) (120140 85) (120141 86) (120142 87) (120143 88) (120144 89) (120146 97) (120147 98) (120148 99) (120149 100) (120150 101) (120151 102) (120152 103) (120153 104) (120154 105) (120155 106) (120156 107) (120157 108) (120158 109) (120159 110) (120160 111) (120161 112) (120162 113) (120163 114) (120164 115) (120165 116) (120166 117) (120167 118) (120168 119) (120169 120) (120170 121) (120171 122) (120172 65) (120173 66) (120174 67) (120175 68) (120176 69) (120177 70) (120178 71) (120179 72) (120180 73) (120181 74) (120182 75) (120183 76) (120184 77) (120185 78) (120186 79) (120187 80) (120188 81) (120189 82) (120190 83) (120191 84) (120192 85) (120193 86) (120194 87) (120195 88) (120196 89) (120197 90) (120198 97) (120199 98) (120200 99) (120201 100) (120202 101) (120203 102) (120204 103) (120205 104) (120206 105) (120207 106) (120208 107) (120209 108) (120210 109) (120211 110) (120212 111) (120213 112) (120214 113) (120215 114) (120216 115) (120217 116) (120218 117) (120219 118) (120220 119) (120221 120) (120222 121) (120223 122) (120224 65) (120225 66) (120226 67) (120227 68) (120228 69) (120229 70) (120230 71) (120231 72) (120232 73) (120233 74) (120234 75) (120235 76) (120236 77) (120237 78) (120238 79) (120239 80) (120240 81) (120241 82) (120242 83) (120243 84) (120244 85) (120245 86) (120246 87) (120247 88) (120248 89) (120249 90) (120250 97) (120251 98) (120252 99) (120253 100) (120254 101) (120255 102) (120256 103) (120257 104) (120258 105) (120259 106) (120260 107) (120261 108) (120262 109) (120263 110) (120264 111) (120265 112) (120266 113) (120267 114) (120268 115) (120269 116) (120270 117) (120271 118) (120272 119) (120273 120) (120274 121) (120275 122) (120276 65) (120277 66) (120278 67) (120279 68) (120280 69) (120281 70) (120282 71) (120283 72) (120284 73) (120285 74) (120286 75) (120287 76) (120288 77) (120289 78) (120290 79) (120291 80) (120292 81) (120293 82) (120294 83) (120295 84) (120296 85) (120297 86) (120298 87) (120299 88) (120300 89) (120301 90) (120302 97) (120303 98) (120304 99) (120305 100) (120306 101) (120307 102) (120308 103) (120309 104) (120310 105) (120311 106) (120312 107) (120313 108) (120314 109) (120315 110) (120316 111) (120317 112) (120318 113) (120319 114) (120320 115) (120321 116) (120322 117) (120323 118) (120324 119) (120325 120) (120326 121) (120327 122) (120328 65) (120329 66) (120330 67) (120331 68) (120332 69) (120333 70) (120334 71) (120335 72) (120336 73) (120337 74) (120338 75) (120339 76) (120340 77) (120341 78) (120342 79) (120343 80) (120344 81) (120345 82) (120346 83) (120347 84) (120348 85) (120349 86) (120350 87) (120351 88) (120352 89) (120353 90) (120354 97) (120355 98) (120356 99) (120357 100) (120358 101) (120359 102) (120360 103) (120361 104) (120362 105) (120363 106) (120364 107) (120365 108) (120366 109) (120367 110) (120368 111) (120369 112) (120370 113) (120371 114) (120372 115) (120373 116) (120374 117) (120375 118) (120376 119) (120377 120) (120378 121) (120379 122) (120380 65) (120381 66) (120382 67) (120383 68) (120384 69) (120385 70) (120386 71) (120387 72) (120388 73) (120389 74) (120390 75) (120391 76) (120392 77) (120393 78) (120394 79) (120395 80) (120396 81) (120397 82) (120398 83) (120399 84) (120400 85) (120401 86) (120402 87) (120403 88) (120404 89) (120405 90) (120406 97) (120407 98) (120408 99) (120409 100) (120410 101) (120411 102) (120412 103) (120413 104) (120414 105) (120415 106) (120416 107) (120417 108) (120418 109) (120419 110) (120420 111) (120421 112) (120422 113) (120423 114) (120424 115) (120425 116) (120426 117) (120427 118) (120428 119) (120429 120) (120430 121) (120431 122) (120432 65) (120433 66) (120434 67) (120435 68) (120436 69) (120437 70) (120438 71) (120439 72) (120440 73) (120441 74) (120442 75) (120443 76) (120444 77) (120445 78) (120446 79) (120447 80) (120448 81) (120449 82) (120450 83) (120451 84) (120452 85) (120453 86) (120454 87) (120455 88) (120456 89) (120457 90) (120458 97) (120459 98) (120460 99) (120461 100) (120462 101) (120463 102) (120464 103) (120465 104) (120466 105) (120467 106) (120468 107) (120469 108) (120470 109) (120471 110) (120472 111) (120473 112) (120474 113) (120475 114) (120476 115) (120477 116) (120478 117) (120479 118) (120480 119) (120481 120) (120482 121) (120483 122) (120484 305) (120485 567) (120488 913) (120489 914) (120490 915) (120491 916) (120492 917) (120493 918) (120494 919) (120495 920) (120496 921) (120497 922) (120498 923) (120499 924) (120500 925) (120501 926) (120502 927) (120503 928) (120504 929) (120505 1012) (120506 931) (120507 932) (120508 933) (120509 934) (120510 935) (120511 936) (120512 937) (120513 8711) (120514 945) (120515 946) (120516 947) (120517 948) (120518 949) (120519 950) (120520 951) (120521 952) (120522 953) (120523 954) (120524 955) (120525 956) (120526 957) (120527 958) (120528 959) (120529 960) (120530 961) (120531 962) (120532 963) (120533 964) (120534 965) (120535 966) (120536 967) (120537 968) (120538 969) (120539 8706) (120540 1013) (120541 977) (120542 1008) (120543 981) (120544 1009) (120545 982) (120546 913) (120547 914) (120548 915) (120549 916) (120550 917) (120551 918) (120552 919) (120553 920) (120554 921) (120555 922) (120556 923) (120557 924) (120558 925) (120559 926) (120560 927) (120561 928) (120562 929) (120563 1012) (120564 931) (120565 932) (120566 933) (120567 934) (120568 935) (120569 936) (120570 937) (120571 8711) (120572 945) (120573 946) (120574 947) (120575 948) (120576 949) (120577 950) (120578 951) (120579 952) (120580 953) (120581 954) (120582 955) (120583 956) (120584 957) (120585 958) (120586 959) (120587 960) (120588 961) (120589 962) (120590 963) (120591 964) (120592 965) (120593 966) (120594 967) (120595 968) (120596 969) (120597 8706) (120598 1013) (120599 977) (120600 1008) (120601 981) (120602 1009) (120603 982) (120604 913) (120605 914) (120606 915) (120607 916) (120608 917) (120609 918) (120610 919) (120611 920) (120612 921) (120613 922) (120614 923) (120615 924) (120616 925) (120617 926) (120618 927) (120619 928) (120620 929) (120621 1012) (120622 931) (120623 932) (120624 933) (120625 934) (120626 935) (120627 936) (120628 937) (120629 8711) (120630 945) (120631 946) (120632 947) (120633 948) (120634 949) (120635 950) (120636 951) (120637 952) (120638 953) (120639 954) (120640 955) (120641 956) (120642 957) (120643 958) (120644 959) (120645 960) (120646 961) (120647 962) (120648 963) (120649 964) (120650 965) (120651 966) (120652 967) (120653 968) (120654 969) (120655 8706) (120656 1013) (120657 977) (120658 1008) (120659 981) (120660 1009) (120661 982) (120662 913) (120663 914) (120664 915) (120665 916) (120666 917) (120667 918) (120668 919) (120669 920) (120670 921) (120671 922) (120672 923) (120673 924) (120674 925) (120675 926) (120676 927) (120677 928) (120678 929) (120679 1012) (120680 931) (120681 932) (120682 933) (120683 934) (120684 935) (120685 936) (120686 937) (120687 8711) (120688 945) (120689 946) (120690 947) (120691 948) (120692 949) (120693 950) (120694 951) (120695 952) (120696 953) (120697 954) (120698 955) (120699 956) (120700 957) (120701 958) (120702 959) (120703 960) (120704 961) (120705 962) (120706 963) (120707 964) (120708 965) (120709 966) (120710 967) (120711 968) (120712 969) (120713 8706) (120714 1013) (120715 977) (120716 1008) (120717 981) (120718 1009) (120719 982) (120720 913) (120721 914) (120722 915) (120723 916) (120724 917) (120725 918) (120726 919) (120727 920) (120728 921) (120729 922) (120730 923) (120731 924) (120732 925) (120733 926) (120734 927) (120735 928) (120736 929) (120737 1012) (120738 931) (120739 932) (120740 933) (120741 934) (120742 935) (120743 936) (120744 937) (120745 8711) (120746 945) (120747 946) (120748 947) (120749 948) (120750 949) (120751 950) (120752 951) (120753 952) (120754 953) (120755 954) (120756 955) (120757 956) (120758 957) (120759 958) (120760 959) (120761 960) (120762 961) (120763 962) (120764 963) (120765 964) (120766 965) (120767 966) (120768 967) (120769 968) (120770 969) (120771 8706) (120772 1013) (120773 977) (120774 1008) (120775 981) (120776 1009) (120777 982) (120778 988) (120779 989) (120782 48) (120783 49) (120784 50) (120785 51) (120786 52) (120787 53) (120788 54) (120789 55) (120790 56) (120791 57) (120792 48) (120793 49) (120794 50) (120795 51) (120796 52) (120797 53) (120798 54) (120799 55) (120800 56) (120801 57) (120802 48) (120803 49) (120804 50) (120805 51) (120806 52) (120807 53) (120808 54) (120809 55) (120810 56) (120811 57) (120812 48) (120813 49) (120814 50) (120815 51) (120816 52) (120817 53) (120818 54) (120819 55) (120820 56) (120821 57) (120822 48) (120823 49) (120824 50) (120825 51) (120826 52) (120827 53) (120828 54) (120829 55) (120830 56) (120831 57))) (set! G19575 '((1 820 821 822 823 824 8402 8403 8408 8409 8410 8421 8422 8426 8427 68153 119143 119144 119145) (103 3640 3641) (7 2364 2492 2620 2748 2876 3260 4151 6964 7223) (202 801 802 807 808 7632) (8 12441 12442) (9 2381 2509 2637 2765 2893 3021 3149 3277 3405 3530 3642 3972 4153 4154 5908 5940 6098 6980 7082 43014 43204 43347 68159) (107 3656 3657 3658 3659) (10 1456) (11 1457) (12 1458) (13 1459) (14 1460) (15 1461) (16 1462) (17 1463) (18 1464 1479) (19 1465 1466) (214 7630) (20 1467) (118 3768 3769) (21 1468) (216 795 3897 119141 119142 119150 119151 119152 119153 119154) (22 1469) (23 1471) (218 12330) (24 1473) (122 3784 3785 3786 3787) (25 1474) (220 790 791 792 793 796 797 798 799 800 803 804 805 806 809 810 811 812 813 814 815 816 817 818 819 825 826 827 828 839 840 841 845 846 851 852 853 854 857 858 1425 1430 1435 1442 1443 1444 1445 1446 1447 1450 1477 1621 1622 1628 1763 1770 1773 1841 1844 1847 1848 1849 1851 1852 1854 1858 1860 1862 1864 2034 2386 3864 3865 3893 3895 4038 4237 6459 6680 7020 7618 7626 7631 7679 8424 8428 8429 8430 8431 43307 43308 43309 66045 68109 68154 119163 119164 119165 119166 119167 119168 119169 119170 119178 119179) (26 64286) (27 1611) (222 1434 1453 6457 12333) (28 1612) (29 1613) (224 12334 12335) (30 1560 1614) (31 1561 1615) (226 119149) (129 3953) (32 1562 1616) (130 3954 3962 3963 3964 3965 3968) (33 1617) (228 1454 6313 12331) (34 1618) (132 3956) (35 1648) (230 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 829 830 831 832 833 834 835 836 838 842 843 844 848 849 850 855 859 867 868 869 870 871 872 873 874 875 876 877 878 879 1155 1156 1157 1158 1159 1426 1427 1428 1429 1431 1432 1433 1436 1437 1438 1439 1440 1441 1448 1449 1451 1452 1455 1476 1552 1553 1554 1555 1556 1557 1558 1559 1619 1620 1623 1624 1625 1626 1627 1629 1630 1750 1751 1752 1753 1754 1755 1756 1759 1760 1761 1762 1764 1767 1768 1771 1772 1840 1842 1843 1845 1846 1850 1853 1855 1856 1857 1859 1861 1863 1865 1866 2027 2028 2029 2030 2031 2032 2033 2035 2385 2387 2388 3970 3971 3974 3975 4959 6109 6458 6679 7019 7021 7022 7023 7024 7025 7026 7027 7616 7617 7619 7620 7621 7622 7623 7624 7625 7627 7628 7633 7634 7635 7636 7637 7638 7639 7640 7641 7642 7643 7644 7645 7646 7647 7648 7649 7650 7651 7652 7653 7654 7678 8400 8401 8404 8405 8406 8407 8411 8412 8417 8423 8425 8432 11744 11745 11746 11747 11748 11749 11750 11751 11752 11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 11766 11767 11768 11769 11770 11771 11772 11773 11774 11775 42607 42620 42621 65056 65057 65058 65059 65060 65061 65062 68111 68152 119173 119174 119175 119176 119177 119210 119211 119212 119213 119362 119363 119364) (36 1809) (232 789 794 856 12332) (233 860 863 866) (234 861 862 864 865 7629) (240 837) (84 3157) (91 3158))) (set! G19577 '((192 65 768) (193 65 769) (194 65 770) (195 65 771) (196 65 776) (197 65 778) (199 67 807) (200 69 768) (201 69 769) (202 69 770) (203 69 776) (204 73 768) (205 73 769) (206 73 770) (207 73 776) (209 78 771) (210 79 768) (211 79 769) (212 79 770) (213 79 771) (214 79 776) (217 85 768) (218 85 769) (219 85 770) (220 85 776) (221 89 769) (224 97 768) (225 97 769) (226 97 770) (227 97 771) (228 97 776) (229 97 778) (231 99 807) (232 101 768) (233 101 769) (234 101 770) (235 101 776) (236 105 768) (237 105 769) (238 105 770) (239 105 776) (241 110 771) (242 111 768) (243 111 769) (244 111 770) (245 111 771) (246 111 776) (249 117 768) (250 117 769) (251 117 770) (252 117 776) (253 121 769) (255 121 776) (256 65 772) (257 97 772) (258 65 774) (259 97 774) (260 65 808) (261 97 808) (262 67 769) (263 99 769) (264 67 770) (265 99 770) (266 67 775) (267 99 775) (268 67 780) (269 99 780) (270 68 780) (271 100 780) (274 69 772) (275 101 772) (276 69 774) (277 101 774) (278 69 775) (279 101 775) (280 69 808) (281 101 808) (282 69 780) (283 101 780) (284 71 770) (285 103 770) (286 71 774) (287 103 774) (288 71 775) (289 103 775) (290 71 807) (291 103 807) (292 72 770) (293 104 770) (296 73 771) (297 105 771) (298 73 772) (299 105 772) (300 73 774) (301 105 774) (302 73 808) (303 105 808) (304 73 775) (308 74 770) (309 106 770) (310 75 807) (311 107 807) (313 76 769) (314 108 769) (315 76 807) (316 108 807) (317 76 780) (318 108 780) (323 78 769) (324 110 769) (325 78 807) (326 110 807) (327 78 780) (328 110 780) (332 79 772) (333 111 772) (334 79 774) (335 111 774) (336 79 779) (337 111 779) (340 82 769) (341 114 769) (342 82 807) (343 114 807) (344 82 780) (345 114 780) (346 83 769) (347 115 769) (348 83 770) (349 115 770) (350 83 807) (351 115 807) (352 83 780) (353 115 780) (354 84 807) (355 116 807) (356 84 780) (357 116 780) (360 85 771) (361 117 771) (362 85 772) (363 117 772) (364 85 774) (365 117 774) (366 85 778) (367 117 778) (368 85 779) (369 117 779) (370 85 808) (371 117 808) (372 87 770) (373 119 770) (374 89 770) (375 121 770) (376 89 776) (377 90 769) (378 122 769) (379 90 775) (380 122 775) (381 90 780) (382 122 780) (416 79 795) (417 111 795) (431 85 795) (432 117 795) (461 65 780) (462 97 780) (463 73 780) (464 105 780) (465 79 780) (466 111 780) (467 85 780) (468 117 780) (469 220 772) (470 252 772) (471 220 769) (472 252 769) (473 220 780) (474 252 780) (475 220 768) (476 252 768) (478 196 772) (479 228 772) (480 550 772) (481 551 772) (482 198 772) (483 230 772) (486 71 780) (487 103 780) (488 75 780) (489 107 780) (490 79 808) (491 111 808) (492 490 772) (493 491 772) (494 439 780) (495 658 780) (496 106 780) (500 71 769) (501 103 769) (504 78 768) (505 110 768) (506 197 769) (507 229 769) (508 198 769) (509 230 769) (510 216 769) (511 248 769) (512 65 783) (513 97 783) (514 65 785) (515 97 785) (516 69 783) (517 101 783) (518 69 785) (519 101 785) (520 73 783) (521 105 783) (522 73 785) (523 105 785) (524 79 783) (525 111 783) (526 79 785) (527 111 785) (528 82 783) (529 114 783) (530 82 785) (531 114 785) (532 85 783) (533 117 783) (534 85 785) (535 117 785) (536 83 806) (537 115 806) (538 84 806) (539 116 806) (542 72 780) (543 104 780) (550 65 775) (551 97 775) (552 69 807) (553 101 807) (554 214 772) (555 246 772) (556 213 772) (557 245 772) (558 79 775) (559 111 775) (560 558 772) (561 559 772) (562 89 772) (563 121 772) (832 768) (833 769) (835 787) (836 776 769) (884 697) (894 59) (901 168 769) (902 913 769) (903 183) (904 917 769) (905 919 769) (906 921 769) (908 927 769) (910 933 769) (911 937 769) (912 970 769) (938 921 776) (939 933 776) (940 945 769) (941 949 769) (942 951 769) (943 953 769) (944 971 769) (970 953 776) (971 965 776) (972 959 769) (973 965 769) (974 969 769) (979 978 769) (980 978 776) (1024 1045 768) (1025 1045 776) (1027 1043 769) (1031 1030 776) (1036 1050 769) (1037 1048 768) (1038 1059 774) (1049 1048 774) (1081 1080 774) (1104 1077 768) (1105 1077 776) (1107 1075 769) (1111 1110 776) (1116 1082 769) (1117 1080 768) (1118 1091 774) (1142 1140 783) (1143 1141 783) (1217 1046 774) (1218 1078 774) (1232 1040 774) (1233 1072 774) (1234 1040 776) (1235 1072 776) (1238 1045 774) (1239 1077 774) (1242 1240 776) (1243 1241 776) (1244 1046 776) (1245 1078 776) (1246 1047 776) (1247 1079 776) (1250 1048 772) (1251 1080 772) (1252 1048 776) (1253 1080 776) (1254 1054 776) (1255 1086 776) (1258 1256 776) (1259 1257 776) (1260 1069 776) (1261 1101 776) (1262 1059 772) (1263 1091 772) (1264 1059 776) (1265 1091 776) (1266 1059 779) (1267 1091 779) (1268 1063 776) (1269 1095 776) (1272 1067 776) (1273 1099 776) (1570 1575 1619) (1571 1575 1620) (1572 1608 1620) (1573 1575 1621) (1574 1610 1620) (1728 1749 1620) (1730 1729 1620) (1747 1746 1620) (2345 2344 2364) (2353 2352 2364) (2356 2355 2364) (2392 2325 2364) (2393 2326 2364) (2394 2327 2364) (2395 2332 2364) (2396 2337 2364) (2397 2338 2364) (2398 2347 2364) (2399 2351 2364) (2507 2503 2494) (2508 2503 2519) (2524 2465 2492) (2525 2466 2492) (2527 2479 2492) (2611 2610 2620) (2614 2616 2620) (2649 2582 2620) (2650 2583 2620) (2651 2588 2620) (2654 2603 2620) (2888 2887 2902) (2891 2887 2878) (2892 2887 2903) (2908 2849 2876) (2909 2850 2876) (2964 2962 3031) (3018 3014 3006) (3019 3015 3006) (3020 3014 3031) (3144 3142 3158) (3264 3263 3285) (3271 3270 3285) (3272 3270 3286) (3274 3270 3266) (3275 3274 3285) (3402 3398 3390) (3403 3399 3390) (3404 3398 3415) (3546 3545 3530) (3548 3545 3535) (3549 3548 3530) (3550 3545 3551) (3907 3906 4023) (3917 3916 4023) (3922 3921 4023) (3927 3926 4023) (3932 3931 4023) (3945 3904 4021) (3955 3953 3954) (3957 3953 3956) (3958 4018 3968) (3960 4019 3968) (3969 3953 3968) (3987 3986 4023) (3997 3996 4023) (4002 4001 4023) (4007 4006 4023) (4012 4011 4023) (4025 3984 4021) (4134 4133 4142) (6918 6917 6965) (6920 6919 6965) (6922 6921 6965) (6924 6923 6965) (6926 6925 6965) (6930 6929 6965) (6971 6970 6965) (6973 6972 6965) (6976 6974 6965) (6977 6975 6965) (6979 6978 6965) (7680 65 805) (7681 97 805) (7682 66 775) (7683 98 775) (7684 66 803) (7685 98 803) (7686 66 817) (7687 98 817) (7688 199 769) (7689 231 769) (7690 68 775) (7691 100 775) (7692 68 803) (7693 100 803) (7694 68 817) (7695 100 817) (7696 68 807) (7697 100 807) (7698 68 813) (7699 100 813) (7700 274 768) (7701 275 768) (7702 274 769) (7703 275 769) (7704 69 813) (7705 101 813) (7706 69 816) (7707 101 816) (7708 552 774) (7709 553 774) (7710 70 775) (7711 102 775) (7712 71 772) (7713 103 772) (7714 72 775) (7715 104 775) (7716 72 803) (7717 104 803) (7718 72 776) (7719 104 776) (7720 72 807) (7721 104 807) (7722 72 814) (7723 104 814) (7724 73 816) (7725 105 816) (7726 207 769) (7727 239 769) (7728 75 769) (7729 107 769) (7730 75 803) (7731 107 803) (7732 75 817) (7733 107 817) (7734 76 803) (7735 108 803) (7736 7734 772) (7737 7735 772) (7738 76 817) (7739 108 817) (7740 76 813) (7741 108 813) (7742 77 769) (7743 109 769) (7744 77 775) (7745 109 775) (7746 77 803) (7747 109 803) (7748 78 775) (7749 110 775) (7750 78 803) (7751 110 803) (7752 78 817) (7753 110 817) (7754 78 813) (7755 110 813) (7756 213 769) (7757 245 769) (7758 213 776) (7759 245 776) (7760 332 768) (7761 333 768) (7762 332 769) (7763 333 769) (7764 80 769) (7765 112 769) (7766 80 775) (7767 112 775) (7768 82 775) (7769 114 775) (7770 82 803) (7771 114 803) (7772 7770 772) (7773 7771 772) (7774 82 817) (7775 114 817) (7776 83 775) (7777 115 775) (7778 83 803) (7779 115 803) (7780 346 775) (7781 347 775) (7782 352 775) (7783 353 775) (7784 7778 775) (7785 7779 775) (7786 84 775) (7787 116 775) (7788 84 803) (7789 116 803) (7790 84 817) (7791 116 817) (7792 84 813) (7793 116 813) (7794 85 804) (7795 117 804) (7796 85 816) (7797 117 816) (7798 85 813) (7799 117 813) (7800 360 769) (7801 361 769) (7802 362 776) (7803 363 776) (7804 86 771) (7805 118 771) (7806 86 803) (7807 118 803) (7808 87 768) (7809 119 768) (7810 87 769) (7811 119 769) (7812 87 776) (7813 119 776) (7814 87 775) (7815 119 775) (7816 87 803) (7817 119 803) (7818 88 775) (7819 120 775) (7820 88 776) (7821 120 776) (7822 89 775) (7823 121 775) (7824 90 770) (7825 122 770) (7826 90 803) (7827 122 803) (7828 90 817) (7829 122 817) (7830 104 817) (7831 116 776) (7832 119 778) (7833 121 778) (7835 383 775) (7840 65 803) (7841 97 803) (7842 65 777) (7843 97 777) (7844 194 769) (7845 226 769) (7846 194 768) (7847 226 768) (7848 194 777) (7849 226 777) (7850 194 771) (7851 226 771) (7852 7840 770) (7853 7841 770) (7854 258 769) (7855 259 769) (7856 258 768) (7857 259 768) (7858 258 777) (7859 259 777) (7860 258 771) (7861 259 771) (7862 7840 774) (7863 7841 774) (7864 69 803) (7865 101 803) (7866 69 777) (7867 101 777) (7868 69 771) (7869 101 771) (7870 202 769) (7871 234 769) (7872 202 768) (7873 234 768) (7874 202 777) (7875 234 777) (7876 202 771) (7877 234 771) (7878 7864 770) (7879 7865 770) (7880 73 777) (7881 105 777) (7882 73 803) (7883 105 803) (7884 79 803) (7885 111 803) (7886 79 777) (7887 111 777) (7888 212 769) (7889 244 769) (7890 212 768) (7891 244 768) (7892 212 777) (7893 244 777) (7894 212 771) (7895 244 771) (7896 7884 770) (7897 7885 770) (7898 416 769) (7899 417 769) (7900 416 768) (7901 417 768) (7902 416 777) (7903 417 777) (7904 416 771) (7905 417 771) (7906 416 803) (7907 417 803) (7908 85 803) (7909 117 803) (7910 85 777) (7911 117 777) (7912 431 769) (7913 432 769) (7914 431 768) (7915 432 768) (7916 431 777) (7917 432 777) (7918 431 771) (7919 432 771) (7920 431 803) (7921 432 803) (7922 89 768) (7923 121 768) (7924 89 803) (7925 121 803) (7926 89 777) (7927 121 777) (7928 89 771) (7929 121 771) (7936 945 787) (7937 945 788) (7938 7936 768) (7939 7937 768) (7940 7936 769) (7941 7937 769) (7942 7936 834) (7943 7937 834) (7944 913 787) (7945 913 788) (7946 7944 768) (7947 7945 768) (7948 7944 769) (7949 7945 769) (7950 7944 834) (7951 7945 834) (7952 949 787) (7953 949 788) (7954 7952 768) (7955 7953 768) (7956 7952 769) (7957 7953 769) (7960 917 787) (7961 917 788) (7962 7960 768) (7963 7961 768) (7964 7960 769) (7965 7961 769) (7968 951 787) (7969 951 788) (7970 7968 768) (7971 7969 768) (7972 7968 769) (7973 7969 769) (7974 7968 834) (7975 7969 834) (7976 919 787) (7977 919 788) (7978 7976 768) (7979 7977 768) (7980 7976 769) (7981 7977 769) (7982 7976 834) (7983 7977 834) (7984 953 787) (7985 953 788) (7986 7984 768) (7987 7985 768) (7988 7984 769) (7989 7985 769) (7990 7984 834) (7991 7985 834) (7992 921 787) (7993 921 788) (7994 7992 768) (7995 7993 768) (7996 7992 769) (7997 7993 769) (7998 7992 834) (7999 7993 834) (8000 959 787) (8001 959 788) (8002 8000 768) (8003 8001 768) (8004 8000 769) (8005 8001 769) (8008 927 787) (8009 927 788) (8010 8008 768) (8011 8009 768) (8012 8008 769) (8013 8009 769) (8016 965 787) (8017 965 788) (8018 8016 768) (8019 8017 768) (8020 8016 769) (8021 8017 769) (8022 8016 834) (8023 8017 834) (8025 933 788) (8027 8025 768) (8029 8025 769) (8031 8025 834) (8032 969 787) (8033 969 788) (8034 8032 768) (8035 8033 768) (8036 8032 769) (8037 8033 769) (8038 8032 834) (8039 8033 834) (8040 937 787) (8041 937 788) (8042 8040 768) (8043 8041 768) (8044 8040 769) (8045 8041 769) (8046 8040 834) (8047 8041 834) (8048 945 768) (8049 940) (8050 949 768) (8051 941) (8052 951 768) (8053 942) (8054 953 768) (8055 943) (8056 959 768) (8057 972) (8058 965 768) (8059 973) (8060 969 768) (8061 974) (8064 7936 837) (8065 7937 837) (8066 7938 837) (8067 7939 837) (8068 7940 837) (8069 7941 837) (8070 7942 837) (8071 7943 837) (8072 7944 837) (8073 7945 837) (8074 7946 837) (8075 7947 837) (8076 7948 837) (8077 7949 837) (8078 7950 837) (8079 7951 837) (8080 7968 837) (8081 7969 837) (8082 7970 837) (8083 7971 837) (8084 7972 837) (8085 7973 837) (8086 7974 837) (8087 7975 837) (8088 7976 837) (8089 7977 837) (8090 7978 837) (8091 7979 837) (8092 7980 837) (8093 7981 837) (8094 7982 837) (8095 7983 837) (8096 8032 837) (8097 8033 837) (8098 8034 837) (8099 8035 837) (8100 8036 837) (8101 8037 837) (8102 8038 837) (8103 8039 837) (8104 8040 837) (8105 8041 837) (8106 8042 837) (8107 8043 837) (8108 8044 837) (8109 8045 837) (8110 8046 837) (8111 8047 837) (8112 945 774) (8113 945 772) (8114 8048 837) (8115 945 837) (8116 940 837) (8118 945 834) (8119 8118 837) (8120 913 774) (8121 913 772) (8122 913 768) (8123 902) (8124 913 837) (8126 953) (8129 168 834) (8130 8052 837) (8131 951 837) (8132 942 837) (8134 951 834) (8135 8134 837) (8136 917 768) (8137 904) (8138 919 768) (8139 905) (8140 919 837) (8141 8127 768) (8142 8127 769) (8143 8127 834) (8144 953 774) (8145 953 772) (8146 970 768) (8147 912) (8150 953 834) (8151 970 834) (8152 921 774) (8153 921 772) (8154 921 768) (8155 906) (8157 8190 768) (8158 8190 769) (8159 8190 834) (8160 965 774) (8161 965 772) (8162 971 768) (8163 944) (8164 961 787) (8165 961 788) (8166 965 834) (8167 971 834) (8168 933 774) (8169 933 772) (8170 933 768) (8171 910) (8172 929 788) (8173 168 768) (8174 901) (8175 96) (8178 8060 837) (8179 969 837) (8180 974 837) (8182 969 834) (8183 8182 837) (8184 927 768) (8185 908) (8186 937 768) (8187 911) (8188 937 837) (8189 180) (8192 8194) (8193 8195) (8486 937) (8490 75) (8491 197) (8602 8592 824) (8603 8594 824) (8622 8596 824) (8653 8656 824) (8654 8660 824) (8655 8658 824) (8708 8707 824) (8713 8712 824) (8716 8715 824) (8740 8739 824) (8742 8741 824) (8769 8764 824) (8772 8771 824) (8775 8773 824) (8777 8776 824) (8800 61 824) (8802 8801 824) (8813 8781 824) (8814 60 824) (8815 62 824) (8816 8804 824) (8817 8805 824) (8820 8818 824) (8821 8819 824) (8824 8822 824) (8825 8823 824) (8832 8826 824) (8833 8827 824) (8836 8834 824) (8837 8835 824) (8840 8838 824) (8841 8839 824) (8876 8866 824) (8877 8872 824) (8878 8873 824) (8879 8875 824) (8928 8828 824) (8929 8829 824) (8930 8849 824) (8931 8850 824) (8938 8882 824) (8939 8883 824) (8940 8884 824) (8941 8885 824) (9001 12296) (9002 12297) (10972 10973 824) (12364 12363 12441) (12366 12365 12441) (12368 12367 12441) (12370 12369 12441) (12372 12371 12441) (12374 12373 12441) (12376 12375 12441) (12378 12377 12441) (12380 12379 12441) (12382 12381 12441) (12384 12383 12441) (12386 12385 12441) (12389 12388 12441) (12391 12390 12441) (12393 12392 12441) (12400 12399 12441) (12401 12399 12442) (12403 12402 12441) (12404 12402 12442) (12406 12405 12441) (12407 12405 12442) (12409 12408 12441) (12410 12408 12442) (12412 12411 12441) (12413 12411 12442) (12436 12358 12441) (12446 12445 12441) (12460 12459 12441) (12462 12461 12441) (12464 12463 12441) (12466 12465 12441) (12468 12467 12441) (12470 12469 12441) (12472 12471 12441) (12474 12473 12441) (12476 12475 12441) (12478 12477 12441) (12480 12479 12441) (12482 12481 12441) (12485 12484 12441) (12487 12486 12441) (12489 12488 12441) (12496 12495 12441) (12497 12495 12442) (12499 12498 12441) (12500 12498 12442) (12502 12501 12441) (12503 12501 12442) (12505 12504 12441) (12506 12504 12442) (12508 12507 12441) (12509 12507 12442) (12532 12454 12441) (12535 12527 12441) (12536 12528 12441) (12537 12529 12441) (12538 12530 12441) (12542 12541 12441) (63744 35912) (63745 26356) (63746 36554) (63747 36040) (63748 28369) (63749 20018) (63750 21477) (63751 40860) (63752 40860) (63753 22865) (63754 37329) (63755 21895) (63756 22856) (63757 25078) (63758 30313) (63759 32645) (63760 34367) (63761 34746) (63762 35064) (63763 37007) (63764 27138) (63765 27931) (63766 28889) (63767 29662) (63768 33853) (63769 37226) (63770 39409) (63771 20098) (63772 21365) (63773 27396) (63774 29211) (63775 34349) (63776 40478) (63777 23888) (63778 28651) (63779 34253) (63780 35172) (63781 25289) (63782 33240) (63783 34847) (63784 24266) (63785 26391) (63786 28010) (63787 29436) (63788 37070) (63789 20358) (63790 20919) (63791 21214) (63792 25796) (63793 27347) (63794 29200) (63795 30439) (63796 32769) (63797 34310) (63798 34396) (63799 36335) (63800 38706) (63801 39791) (63802 40442) (63803 30860) (63804 31103) (63805 32160) (63806 33737) (63807 37636) (63808 40575) (63809 35542) (63810 22751) (63811 24324) (63812 31840) (63813 32894) (63814 29282) (63815 30922) (63816 36034) (63817 38647) (63818 22744) (63819 23650) (63820 27155) (63821 28122) (63822 28431) (63823 32047) (63824 32311) (63825 38475) (63826 21202) (63827 32907) (63828 20956) (63829 20940) (63830 31260) (63831 32190) (63832 33777) (63833 38517) (63834 35712) (63835 25295) (63836 27138) (63837 35582) (63838 20025) (63839 23527) (63840 24594) (63841 29575) (63842 30064) (63843 21271) (63844 30971) (63845 20415) (63846 24489) (63847 19981) (63848 27852) (63849 25976) (63850 32034) (63851 21443) (63852 22622) (63853 30465) (63854 33865) (63855 35498) (63856 27578) (63857 36784) (63858 27784) (63859 25342) (63860 33509) (63861 25504) (63862 30053) (63863 20142) (63864 20841) (63865 20937) (63866 26753) (63867 31975) (63868 33391) (63869 35538) (63870 37327) (63871 21237) (63872 21570) (63873 22899) (63874 24300) (63875 26053) (63876 28670) (63877 31018) (63878 38317) (63879 39530) (63880 40599) (63881 40654) (63882 21147) (63883 26310) (63884 27511) (63885 36706) (63886 24180) (63887 24976) (63888 25088) (63889 25754) (63890 28451) (63891 29001) (63892 29833) (63893 31178) (63894 32244) (63895 32879) (63896 36646) (63897 34030) (63898 36899) (63899 37706) (63900 21015) (63901 21155) (63902 21693) (63903 28872) (63904 35010) (63905 35498) (63906 24265) (63907 24565) (63908 25467) (63909 27566) (63910 31806) (63911 29557) (63912 20196) (63913 22265) (63914 23527) (63915 23994) (63916 24604) (63917 29618) (63918 29801) (63919 32666) (63920 32838) (63921 37428) (63922 38646) (63923 38728) (63924 38936) (63925 20363) (63926 31150) (63927 37300) (63928 38584) (63929 24801) (63930 20102) (63931 20698) (63932 23534) (63933 23615) (63934 26009) (63935 27138) (63936 29134) (63937 30274) (63938 34044) (63939 36988) (63940 40845) (63941 26248) (63942 38446) (63943 21129) (63944 26491) (63945 26611) (63946 27969) (63947 28316) (63948 29705) (63949 30041) (63950 30827) (63951 32016) (63952 39006) (63953 20845) (63954 25134) (63955 38520) (63956 20523) (63957 23833) (63958 28138) (63959 36650) (63960 24459) (63961 24900) (63962 26647) (63963 29575) (63964 38534) (63965 21033) (63966 21519) (63967 23653) (63968 26131) (63969 26446) (63970 26792) (63971 27877) (63972 29702) (63973 30178) (63974 32633) (63975 35023) (63976 35041) (63977 37324) (63978 38626) (63979 21311) (63980 28346) (63981 21533) (63982 29136) (63983 29848) (63984 34298) (63985 38563) (63986 40023) (63987 40607) (63988 26519) (63989 28107) (63990 33256) (63991 31435) (63992 31520) (63993 31890) (63994 29376) (63995 28825) (63996 35672) (63997 20160) (63998 33590) (63999 21050) (64000 20999) (64001 24230) (64002 25299) (64003 31958) (64004 23429) (64005 27934) (64006 26292) (64007 36667) (64008 34892) (64009 38477) (64010 35211) (64011 24275) (64012 20800) (64013 21952) (64016 22618) (64018 26228) (64021 20958) (64022 29482) (64023 30410) (64024 31036) (64025 31070) (64026 31077) (64027 31119) (64028 38742) (64029 31934) (64030 32701) (64032 34322) (64034 35576) (64037 36920) (64038 37117) (64042 39151) (64043 39164) (64044 39208) (64045 40372) (64048 20398) (64049 20711) (64050 20813) (64051 21193) (64052 21220) (64053 21329) (64054 21917) (64055 22022) (64056 22120) (64057 22592) (64058 22696) (64059 23652) (64060 23662) (64061 24724) (64062 24936) (64063 24974) (64064 25074) (64065 25935) (64066 26082) (64067 26257) (64068 26757) (64069 28023) (64070 28186) (64071 28450) (64072 29038) (64073 29227) (64074 29730) (64075 30865) (64076 31038) (64077 31049) (64078 31048) (64079 31056) (64080 31062) (64081 31069) (64082 31117) (64083 31118) (64084 31296) (64085 31361) (64086 31680) (64087 32244) (64088 32265) (64089 32321) (64090 32626) (64091 32773) (64092 33261) (64093 33401) (64094 33401) (64095 33879) (64096 35088) (64097 35222) (64098 35585) (64099 35641) (64100 36051) (64101 36104) (64102 36790) (64103 36920) (64104 38627) (64105 38911) (64106 38971) (64112 20006) (64113 20917) (64114 20840) (64115 20352) (64116 20805) (64117 20864) (64118 21191) (64119 21242) (64120 21917) (64121 21845) (64122 21913) (64123 21986) (64124 22618) (64125 22707) (64126 22852) (64127 22868) (64128 23138) (64129 23336) (64130 24274) (64131 24281) (64132 24425) (64133 24493) (64134 24792) (64135 24910) (64136 24840) (64137 24974) (64138 24928) (64139 25074) (64140 25140) (64141 25540) (64142 25628) (64143 25682) (64144 25942) (64145 26228) (64146 26391) (64147 26395) (64148 26454) (64149 27513) (64150 27578) (64151 27969) (64152 28379) (64153 28363) (64154 28450) (64155 28702) (64156 29038) (64157 30631) (64158 29237) (64159 29359) (64160 29482) (64161 29809) (64162 29958) (64163 30011) (64164 30237) (64165 30239) (64166 30410) (64167 30427) (64168 30452) (64169 30538) (64170 30528) (64171 30924) (64172 31409) (64173 31680) (64174 31867) (64175 32091) (64176 32244) (64177 32574) (64178 32773) (64179 33618) (64180 33775) (64181 34681) (64182 35137) (64183 35206) (64184 35222) (64185 35519) (64186 35576) (64187 35531) (64188 35585) (64189 35582) (64190 35565) (64191 35641) (64192 35722) (64193 36104) (64194 36664) (64195 36978) (64196 37273) (64197 37494) (64198 38524) (64199 38627) (64200 38742) (64201 38875) (64202 38911) (64203 38923) (64204 38971) (64205 39698) (64206 40860) (64207 141386) (64208 141380) (64209 144341) (64210 15261) (64211 16408) (64212 16441) (64213 152137) (64214 154832) (64215 163539) (64216 40771) (64217 40846) (64285 1497 1460) (64287 1522 1463) (64298 1513 1473) (64299 1513 1474) (64300 64329 1473) (64301 64329 1474) (64302 1488 1463) (64303 1488 1464) (64304 1488 1468) (64305 1489 1468) (64306 1490 1468) (64307 1491 1468) (64308 1492 1468) (64309 1493 1468) (64310 1494 1468) (64312 1496 1468) (64313 1497 1468) (64314 1498 1468) (64315 1499 1468) (64316 1500 1468) (64318 1502 1468) (64320 1504 1468) (64321 1505 1468) (64323 1507 1468) (64324 1508 1468) (64326 1510 1468) (64327 1511 1468) (64328 1512 1468) (64329 1513 1468) (64330 1514 1468) (64331 1493 1465) (64332 1489 1471) (64333 1499 1471) (64334 1508 1471) (119134 119127 119141) (119135 119128 119141) (119136 119135 119150) (119137 119135 119151) (119138 119135 119152) (119139 119135 119153) (119140 119135 119154) (119227 119225 119141) (119228 119226 119141) (119229 119227 119150) (119230 119228 119150) (119231 119227 119151) (119232 119228 119151) (194560 20029) (194561 20024) (194562 20033) (194563 131362) (194564 20320) (194565 20398) (194566 20411) (194567 20482) (194568 20602) (194569 20633) (194570 20711) (194571 20687) (194572 13470) (194573 132666) (194574 20813) (194575 20820) (194576 20836) (194577 20855) (194578 132380) (194579 13497) (194580 20839) (194581 20877) (194582 132427) (194583 20887) (194584 20900) (194585 20172) (194586 20908) (194587 20917) (194588 168415) (194589 20981) (194590 20995) (194591 13535) (194592 21051) (194593 21062) (194594 21106) (194595 21111) (194596 13589) (194597 21191) (194598 21193) (194599 21220) (194600 21242) (194601 21253) (194602 21254) (194603 21271) (194604 21321) (194605 21329) (194606 21338) (194607 21363) (194608 21373) (194609 21375) (194610 21375) (194611 21375) (194612 133676) (194613 28784) (194614 21450) (194615 21471) (194616 133987) (194617 21483) (194618 21489) (194619 21510) (194620 21662) (194621 21560) (194622 21576) (194623 21608) (194624 21666) (194625 21750) (194626 21776) (194627 21843) (194628 21859) (194629 21892) (194630 21892) (194631 21913) (194632 21931) (194633 21939) (194634 21954) (194635 22294) (194636 22022) (194637 22295) (194638 22097) (194639 22132) (194640 20999) (194641 22766) (194642 22478) (194643 22516) (194644 22541) (194645 22411) (194646 22578) (194647 22577) (194648 22700) (194649 136420) (194650 22770) (194651 22775) (194652 22790) (194653 22810) (194654 22818) (194655 22882) (194656 136872) (194657 136938) (194658 23020) (194659 23067) (194660 23079) (194661 23000) (194662 23142) (194663 14062) (194664 14076) (194665 23304) (194666 23358) (194667 23358) (194668 137672) (194669 23491) (194670 23512) (194671 23527) (194672 23539) (194673 138008) (194674 23551) (194675 23558) (194676 24403) (194677 23586) (194678 14209) (194679 23648) (194680 23662) (194681 23744) (194682 23693) (194683 138724) (194684 23875) (194685 138726) (194686 23918) (194687 23915) (194688 23932) (194689 24033) (194690 24034) (194691 14383) (194692 24061) (194693 24104) (194694 24125) (194695 24169) (194696 14434) (194697 139651) (194698 14460) (194699 24240) (194700 24243) (194701 24246) (194702 24266) (194703 172946) (194704 24318) (194705 140081) (194706 140081) (194707 33281) (194708 24354) (194709 24354) (194710 14535) (194711 144056) (194712 156122) (194713 24418) (194714 24427) (194715 14563) (194716 24474) (194717 24525) (194718 24535) (194719 24569) (194720 24705) (194721 14650) (194722 14620) (194723 24724) (194724 141012) (194725 24775) (194726 24904) (194727 24908) (194728 24910) (194729 24908) (194730 24954) (194731 24974) (194732 25010) (194733 24996) (194734 25007) (194735 25054) (194736 25074) (194737 25078) (194738 25104) (194739 25115) (194740 25181) (194741 25265) (194742 25300) (194743 25424) (194744 142092) (194745 25405) (194746 25340) (194747 25448) (194748 25475) (194749 25572) (194750 142321) (194751 25634) (194752 25541) (194753 25513) (194754 14894) (194755 25705) (194756 25726) (194757 25757) (194758 25719) (194759 14956) (194760 25935) (194761 25964) (194762 143370) (194763 26083) (194764 26360) (194765 26185) (194766 15129) (194767 26257) (194768 15112) (194769 15076) (194770 20882) (194771 20885) (194772 26368) (194773 26268) (194774 32941) (194775 17369) (194776 26391) (194777 26395) (194778 26401) (194779 26462) (194780 26451) (194781 144323) (194782 15177) (194783 26618) (194784 26501) (194785 26706) (194786 26757) (194787 144493) (194788 26766) (194789 26655) (194790 26900) (194791 15261) (194792 26946) (194793 27043) (194794 27114) (194795 27304) (194796 145059) (194797 27355) (194798 15384) (194799 27425) (194800 145575) (194801 27476) (194802 15438) (194803 27506) (194804 27551) (194805 27578) (194806 27579) (194807 146061) (194808 138507) (194809 146170) (194810 27726) (194811 146620) (194812 27839) (194813 27853) (194814 27751) (194815 27926) (194816 27966) (194817 28023) (194818 27969) (194819 28009) (194820 28024) (194821 28037) (194822 146718) (194823 27956) (194824 28207) (194825 28270) (194826 15667) (194827 28363) (194828 28359) (194829 147153) (194830 28153) (194831 28526) (194832 147294) (194833 147342) (194834 28614) (194835 28729) (194836 28702) (194837 28699) (194838 15766) (194839 28746) (194840 28797) (194841 28791) (194842 28845) (194843 132389) (194844 28997) (194845 148067) (194846 29084) (194847 148395) (194848 29224) (194849 29237) (194850 29264) (194851 149000) (194852 29312) (194853 29333) (194854 149301) (194855 149524) (194856 29562) (194857 29579) (194858 16044) (194859 29605) (194860 16056) (194861 16056) (194862 29767) (194863 29788) (194864 29809) (194865 29829) (194866 29898) (194867 16155) (194868 29988) (194869 150582) (194870 30014) (194871 150674) (194872 30064) (194873 139679) (194874 30224) (194875 151457) (194876 151480) (194877 151620) (194878 16380) (194879 16392) (194880 30452) (194881 151795) (194882 151794) (194883 151833) (194884 151859) (194885 30494) (194886 30495) (194887 30495) (194888 30538) (194889 16441) (194890 30603) (194891 16454) (194892 16534) (194893 152605) (194894 30798) (194895 30860) (194896 30924) (194897 16611) (194898 153126) (194899 31062) (194900 153242) (194901 153285) (194902 31119) (194903 31211) (194904 16687) (194905 31296) (194906 31306) (194907 31311) (194908 153980) (194909 154279) (194910 154279) (194911 31470) (194912 16898) (194913 154539) (194914 31686) (194915 31689) (194916 16935) (194917 154752) (194918 31954) (194919 17056) (194920 31976) (194921 31971) (194922 32000) (194923 155526) (194924 32099) (194925 17153) (194926 32199) (194927 32258) (194928 32325) (194929 17204) (194930 156200) (194931 156231) (194932 17241) (194933 156377) (194934 32634) (194935 156478) (194936 32661) (194937 32762) (194938 32773) (194939 156890) (194940 156963) (194941 32864) (194942 157096) (194943 32880) (194944 144223) (194945 17365) (194946 32946) (194947 33027) (194948 17419) (194949 33086) (194950 23221) (194951 157607) (194952 157621) (194953 144275) (194954 144284) (194955 33281) (194956 33284) (194957 36766) (194958 17515) (194959 33425) (194960 33419) (194961 33437) (194962 21171) (194963 33457) (194964 33459) (194965 33469) (194966 33510) (194967 158524) (194968 33509) (194969 33565) (194970 33635) (194971 33709) (194972 33571) (194973 33725) (194974 33767) (194975 33879) (194976 33619) (194977 33738) (194978 33740) (194979 33756) (194980 158774) (194981 159083) (194982 158933) (194983 17707) (194984 34033) (194985 34035) (194986 34070) (194987 160714) (194988 34148) (194989 159532) (194990 17757) (194991 17761) (194992 159665) (194993 159954) (194994 17771) (194995 34384) (194996 34396) (194997 34407) (194998 34409) (194999 34473) (195000 34440) (195001 34574) (195002 34530) (195003 34681) (195004 34600) (195005 34667) (195006 34694) (195007 17879) (195008 34785) (195009 34817) (195010 17913) (195011 34912) (195012 34915) (195013 161383) (195014 35031) (195015 35038) (195016 17973) (195017 35066) (195018 13499) (195019 161966) (195020 162150) (195021 18110) (195022 18119) (195023 35488) (195024 35565) (195025 35722) (195026 35925) (195027 162984) (195028 36011) (195029 36033) (195030 36123) (195031 36215) (195032 163631) (195033 133124) (195034 36299) (195035 36284) (195036 36336) (195037 133342) (195038 36564) (195039 36664) (195040 165330) (195041 165357) (195042 37012) (195043 37105) (195044 37137) (195045 165678) (195046 37147) (195047 37432) (195048 37591) (195049 37592) (195050 37500) (195051 37881) (195052 37909) (195053 166906) (195054 38283) (195055 18837) (195056 38327) (195057 167287) (195058 18918) (195059 38595) (195060 23986) (195061 38691) (195062 168261) (195063 168474) (195064 19054) (195065 19062) (195066 38880) (195067 168970) (195068 19122) (195069 169110) (195070 38923) (195071 38923) (195072 38953) (195073 169398) (195074 39138) (195075 19251) (195076 39209) (195077 39335) (195078 39362) (195079 39422) (195080 19406) (195081 170800) (195082 39698) (195083 40000) (195084 40189) (195085 19662) (195086 19693) (195087 40295) (195088 172238) (195089 19704) (195090 172293) (195091 172558) (195092 172689) (195093 40635) (195094 19798) (195095 40697) (195096 40702) (195097 40709) (195098 40719) (195099 40726) (195100 40763) (195101 173568))) (set! G19579 '((65 97) (66 98) (67 99) (68 100) (69 101) (70 102) (71 103) (72 104) (73 105) (74 106) (75 107) (76 108) (77 109) (78 110) (79 111) (80 112) (81 113) (82 114) (83 115) (84 116) (85 117) (86 118) (87 119) (88 120) (89 121) (90 122) (181 956) (192 224) (193 225) (194 226) (195 227) (196 228) (197 229) (198 230) (199 231) (200 232) (201 233) (202 234) (203 235) (204 236) (205 237) (206 238) (207 239) (208 240) (209 241) (210 242) (211 243) (212 244) (213 245) (214 246) (216 248) (217 249) (218 250) (219 251) (220 252) (221 253) (222 254) (223 115 115) (256 257) (258 259) (260 261) (262 263) (264 265) (266 267) (268 269) (270 271) (272 273) (274 275) (276 277) (278 279) (280 281) (282 283) (284 285) (286 287) (288 289) (290 291) (292 293) (294 295) (296 297) (298 299) (300 301) (302 303) (304 105 775) (306 307) (308 309) (310 311) (313 314) (315 316) (317 318) (319 320) (321 322) (323 324) (325 326) (327 328) (329 700 110) (330 331) (332 333) (334 335) (336 337) (338 339) (340 341) (342 343) (344 345) (346 347) (348 349) (350 351) (352 353) (354 355) (356 357) (358 359) (360 361) (362 363) (364 365) (366 367) (368 369) (370 371) (372 373) (374 375) (376 255) (377 378) (379 380) (381 382) (383 115) (385 595) (386 387) (388 389) (390 596) (391 392) (393 598) (394 599) (395 396) (398 477) (399 601) (400 603) (401 402) (403 608) (404 611) (406 617) (407 616) (408 409) (412 623) (413 626) (415 629) (416 417) (418 419) (420 421) (422 640) (423 424) (425 643) (428 429) (430 648) (431 432) (433 650) (434 651) (435 436) (437 438) (439 658) (440 441) (444 445) (452 454) (453 454) (455 457) (456 457) (458 460) (459 460) (461 462) (463 464) (465 466) (467 468) (469 470) (471 472) (473 474) (475 476) (478 479) (480 481) (482 483) (484 485) (486 487) (488 489) (490 491) (492 493) (494 495) (496 106 780) (497 499) (498 499) (500 501) (502 405) (503 447) (504 505) (506 507) (508 509) (510 511) (512 513) (514 515) (516 517) (518 519) (520 521) (522 523) (524 525) (526 527) (528 529) (530 531) (532 533) (534 535) (536 537) (538 539) (540 541) (542 543) (544 414) (546 547) (548 549) (550 551) (552 553) (554 555) (556 557) (558 559) (560 561) (562 563) (570 11365) (571 572) (573 410) (574 11366) (577 578) (579 384) (580 649) (581 652) (582 583) (584 585) (586 587) (588 589) (590 591) (837 953) (880 881) (882 883) (886 887) (902 940) (904 941) (905 942) (906 943) (908 972) (910 973) (911 974) (912 953 776 769) (913 945) (914 946) (915 947) (916 948) (917 949) (918 950) (919 951) (920 952) (921 953) (922 954) (923 955) (924 956) (925 957) (926 958) (927 959) (928 960) (929 961) (931 963) (932 964) (933 965) (934 966) (935 967) (936 968) (937 969) (938 970) (939 971) (944 965 776 769) (962 963) (975 983) (976 946) (977 952) (981 966) (982 960) (984 985) (986 987) (988 989) (990 991) (992 993) (994 995) (996 997) (998 999) (1000 1001) (1002 1003) (1004 1005) (1006 1007) (1008 954) (1009 961) (1012 952) (1013 949) (1015 1016) (1017 1010) (1018 1019) (1021 891) (1022 892) (1023 893) (1024 1104) (1025 1105) (1026 1106) (1027 1107) (1028 1108) (1029 1109) (1030 1110) (1031 1111) (1032 1112) (1033 1113) (1034 1114) (1035 1115) (1036 1116) (1037 1117) (1038 1118) (1039 1119) (1040 1072) (1041 1073) (1042 1074) (1043 1075) (1044 1076) (1045 1077) (1046 1078) (1047 1079) (1048 1080) (1049 1081) (1050 1082) (1051 1083) (1052 1084) (1053 1085) (1054 1086) (1055 1087) (1056 1088) (1057 1089) (1058 1090) (1059 1091) (1060 1092) (1061 1093) (1062 1094) (1063 1095) (1064 1096) (1065 1097) (1066 1098) (1067 1099) (1068 1100) (1069 1101) (1070 1102) (1071 1103) (1120 1121) (1122 1123) (1124 1125) (1126 1127) (1128 1129) (1130 1131) (1132 1133) (1134 1135) (1136 1137) (1138 1139) (1140 1141) (1142 1143) (1144 1145) (1146 1147) (1148 1149) (1150 1151) (1152 1153) (1162 1163) (1164 1165) (1166 1167) (1168 1169) (1170 1171) (1172 1173) (1174 1175) (1176 1177) (1178 1179) (1180 1181) (1182 1183) (1184 1185) (1186 1187) (1188 1189) (1190 1191) (1192 1193) (1194 1195) (1196 1197) (1198 1199) (1200 1201) (1202 1203) (1204 1205) (1206 1207) (1208 1209) (1210 1211) (1212 1213) (1214 1215) (1216 1231) (1217 1218) (1219 1220) (1221 1222) (1223 1224) (1225 1226) (1227 1228) (1229 1230) (1232 1233) (1234 1235) (1236 1237) (1238 1239) (1240 1241) (1242 1243) (1244 1245) (1246 1247) (1248 1249) (1250 1251) (1252 1253) (1254 1255) (1256 1257) (1258 1259) (1260 1261) (1262 1263) (1264 1265) (1266 1267) (1268 1269) (1270 1271) (1272 1273) (1274 1275) (1276 1277) (1278 1279) (1280 1281) (1282 1283) (1284 1285) (1286 1287) (1288 1289) (1290 1291) (1292 1293) (1294 1295) (1296 1297) (1298 1299) (1300 1301) (1302 1303) (1304 1305) (1306 1307) (1308 1309) (1310 1311) (1312 1313) (1314 1315) (1329 1377) (1330 1378) (1331 1379) (1332 1380) (1333 1381) (1334 1382) (1335 1383) (1336 1384) (1337 1385) (1338 1386) (1339 1387) (1340 1388) (1341 1389) (1342 1390) (1343 1391) (1344 1392) (1345 1393) (1346 1394) (1347 1395) (1348 1396) (1349 1397) (1350 1398) (1351 1399) (1352 1400) (1353 1401) (1354 1402) (1355 1403) (1356 1404) (1357 1405) (1358 1406) (1359 1407) (1360 1408) (1361 1409) (1362 1410) (1363 1411) (1364 1412) (1365 1413) (1366 1414) (1415 1381 1410) (4256 11520) (4257 11521) (4258 11522) (4259 11523) (4260 11524) (4261 11525) (4262 11526) (4263 11527) (4264 11528) (4265 11529) (4266 11530) (4267 11531) (4268 11532) (4269 11533) (4270 11534) (4271 11535) (4272 11536) (4273 11537) (4274 11538) (4275 11539) (4276 11540) (4277 11541) (4278 11542) (4279 11543) (4280 11544) (4281 11545) (4282 11546) (4283 11547) (4284 11548) (4285 11549) (4286 11550) (4287 11551) (4288 11552) (4289 11553) (4290 11554) (4291 11555) (4292 11556) (4293 11557) (7680 7681) (7682 7683) (7684 7685) (7686 7687) (7688 7689) (7690 7691) (7692 7693) (7694 7695) (7696 7697) (7698 7699) (7700 7701) (7702 7703) (7704 7705) (7706 7707) (7708 7709) (7710 7711) (7712 7713) (7714 7715) (7716 7717) (7718 7719) (7720 7721) (7722 7723) (7724 7725) (7726 7727) (7728 7729) (7730 7731) (7732 7733) (7734 7735) (7736 7737) (7738 7739) (7740 7741) (7742 7743) (7744 7745) (7746 7747) (7748 7749) (7750 7751) (7752 7753) (7754 7755) (7756 7757) (7758 7759) (7760 7761) (7762 7763) (7764 7765) (7766 7767) (7768 7769) (7770 7771) (7772 7773) (7774 7775) (7776 7777) (7778 7779) (7780 7781) (7782 7783) (7784 7785) (7786 7787) (7788 7789) (7790 7791) (7792 7793) (7794 7795) (7796 7797) (7798 7799) (7800 7801) (7802 7803) (7804 7805) (7806 7807) (7808 7809) (7810 7811) (7812 7813) (7814 7815) (7816 7817) (7818 7819) (7820 7821) (7822 7823) (7824 7825) (7826 7827) (7828 7829) (7830 104 817) (7831 116 776) (7832 119 778) (7833 121 778) (7834 97 702) (7835 7777) (7838 115 115) (7840 7841) (7842 7843) (7844 7845) (7846 7847) (7848 7849) (7850 7851) (7852 7853) (7854 7855) (7856 7857) (7858 7859) (7860 7861) (7862 7863) (7864 7865) (7866 7867) (7868 7869) (7870 7871) (7872 7873) (7874 7875) (7876 7877) (7878 7879) (7880 7881) (7882 7883) (7884 7885) (7886 7887) (7888 7889) (7890 7891) (7892 7893) (7894 7895) (7896 7897) (7898 7899) (7900 7901) (7902 7903) (7904 7905) (7906 7907) (7908 7909) (7910 7911) (7912 7913) (7914 7915) (7916 7917) (7918 7919) (7920 7921) (7922 7923) (7924 7925) (7926 7927) (7928 7929) (7930 7931) (7932 7933) (7934 7935) (7944 7936) (7945 7937) (7946 7938) (7947 7939) (7948 7940) (7949 7941) (7950 7942) (7951 7943) (7960 7952) (7961 7953) (7962 7954) (7963 7955) (7964 7956) (7965 7957) (7976 7968) (7977 7969) (7978 7970) (7979 7971) (7980 7972) (7981 7973) (7982 7974) (7983 7975) (7992 7984) (7993 7985) (7994 7986) (7995 7987) (7996 7988) (7997 7989) (7998 7990) (7999 7991) (8008 8000) (8009 8001) (8010 8002) (8011 8003) (8012 8004) (8013 8005) (8016 965 787) (8018 965 787 768) (8020 965 787 769) (8022 965 787 834) (8025 8017) (8027 8019) (8029 8021) (8031 8023) (8040 8032) (8041 8033) (8042 8034) (8043 8035) (8044 8036) (8045 8037) (8046 8038) (8047 8039) (8064 7936 953) (8065 7937 953) (8066 7938 953) (8067 7939 953) (8068 7940 953) (8069 7941 953) (8070 7942 953) (8071 7943 953) (8072 7936 953) (8073 7937 953) (8074 7938 953) (8075 7939 953) (8076 7940 953) (8077 7941 953) (8078 7942 953) (8079 7943 953) (8080 7968 953) (8081 7969 953) (8082 7970 953) (8083 7971 953) (8084 7972 953) (8085 7973 953) (8086 7974 953) (8087 7975 953) (8088 7968 953) (8089 7969 953) (8090 7970 953) (8091 7971 953) (8092 7972 953) (8093 7973 953) (8094 7974 953) (8095 7975 953) (8096 8032 953) (8097 8033 953) (8098 8034 953) (8099 8035 953) (8100 8036 953) (8101 8037 953) (8102 8038 953) (8103 8039 953) (8104 8032 953) (8105 8033 953) (8106 8034 953) (8107 8035 953) (8108 8036 953) (8109 8037 953) (8110 8038 953) (8111 8039 953) (8114 8048 953) (8115 945 953) (8116 940 953) (8118 945 834) (8119 945 834 953) (8120 8112) (8121 8113) (8122 8048) (8123 8049) (8124 945 953) (8126 953) (8130 8052 953) (8131 951 953) (8132 942 953) (8134 951 834) (8135 951 834 953) (8136 8050) (8137 8051) (8138 8052) (8139 8053) (8140 951 953) (8146 953 776 768) (8147 953 776 769) (8150 953 834) (8151 953 776 834) (8152 8144) (8153 8145) (8154 8054) (8155 8055) (8162 965 776 768) (8163 965 776 769) (8164 961 787) (8166 965 834) (8167 965 776 834) (8168 8160) (8169 8161) (8170 8058) (8171 8059) (8172 8165) (8178 8060 953) (8179 969 953) (8180 974 953) (8182 969 834) (8183 969 834 953) (8184 8056) (8185 8057) (8186 8060) (8187 8061) (8188 969 953) (8486 969) (8490 107) (8491 229) (8498 8526) (8544 8560) (8545 8561) (8546 8562) (8547 8563) (8548 8564) (8549 8565) (8550 8566) (8551 8567) (8552 8568) (8553 8569) (8554 8570) (8555 8571) (8556 8572) (8557 8573) (8558 8574) (8559 8575) (8579 8580) (9398 9424) (9399 9425) (9400 9426) (9401 9427) (9402 9428) (9403 9429) (9404 9430) (9405 9431) (9406 9432) (9407 9433) (9408 9434) (9409 9435) (9410 9436) (9411 9437) (9412 9438) (9413 9439) (9414 9440) (9415 9441) (9416 9442) (9417 9443) (9418 9444) (9419 9445) (9420 9446) (9421 9447) (9422 9448) (9423 9449) (11264 11312) (11265 11313) (11266 11314) (11267 11315) (11268 11316) (11269 11317) (11270 11318) (11271 11319) (11272 11320) (11273 11321) (11274 11322) (11275 11323) (11276 11324) (11277 11325) (11278 11326) (11279 11327) (11280 11328) (11281 11329) (11282 11330) (11283 11331) (11284 11332) (11285 11333) (11286 11334) (11287 11335) (11288 11336) (11289 11337) (11290 11338) (11291 11339) (11292 11340) (11293 11341) (11294 11342) (11295 11343) (11296 11344) (11297 11345) (11298 11346) (11299 11347) (11300 11348) (11301 11349) (11302 11350) (11303 11351) (11304 11352) (11305 11353) (11306 11354) (11307 11355) (11308 11356) (11309 11357) (11310 11358) (11360 11361) (11362 619) (11363 7549) (11364 637) (11367 11368) (11369 11370) (11371 11372) (11373 593) (11374 625) (11375 592) (11378 11379) (11381 11382) (11392 11393) (11394 11395) (11396 11397) (11398 11399) (11400 11401) (11402 11403) (11404 11405) (11406 11407) (11408 11409) (11410 11411) (11412 11413) (11414 11415) (11416 11417) (11418 11419) (11420 11421) (11422 11423) (11424 11425) (11426 11427) (11428 11429) (11430 11431) (11432 11433) (11434 11435) (11436 11437) (11438 11439) (11440 11441) (11442 11443) (11444 11445) (11446 11447) (11448 11449) (11450 11451) (11452 11453) (11454 11455) (11456 11457) (11458 11459) (11460 11461) (11462 11463) (11464 11465) (11466 11467) (11468 11469) (11470 11471) (11472 11473) (11474 11475) (11476 11477) (11478 11479) (11480 11481) (11482 11483) (11484 11485) (11486 11487) (11488 11489) (11490 11491) (42560 42561) (42562 42563) (42564 42565) (42566 42567) (42568 42569) (42570 42571) (42572 42573) (42574 42575) (42576 42577) (42578 42579) (42580 42581) (42582 42583) (42584 42585) (42586 42587) (42588 42589) (42590 42591) (42594 42595) (42596 42597) (42598 42599) (42600 42601) (42602 42603) (42604 42605) (42624 42625) (42626 42627) (42628 42629) (42630 42631) (42632 42633) (42634 42635) (42636 42637) (42638 42639) (42640 42641) (42642 42643) (42644 42645) (42646 42647) (42786 42787) (42788 42789) (42790 42791) (42792 42793) (42794 42795) (42796 42797) (42798 42799) (42802 42803) (42804 42805) (42806 42807) (42808 42809) (42810 42811) (42812 42813) (42814 42815) (42816 42817) (42818 42819) (42820 42821) (42822 42823) (42824 42825) (42826 42827) (42828 42829) (42830 42831) (42832 42833) (42834 42835) (42836 42837) (42838 42839) (42840 42841) (42842 42843) (42844 42845) (42846 42847) (42848 42849) (42850 42851) (42852 42853) (42854 42855) (42856 42857) (42858 42859) (42860 42861) (42862 42863) (42873 42874) (42875 42876) (42877 7545) (42878 42879) (42880 42881) (42882 42883) (42884 42885) (42886 42887) (42891 42892) (64256 102 102) (64257 102 105) (64258 102 108) (64259 102 102 105) (64260 102 102 108) (64261 115 116) (64262 115 116) (64275 1396 1398) (64276 1396 1381) (64277 1396 1387) (64278 1406 1398) (64279 1396 1389) (65313 65345) (65314 65346) (65315 65347) (65316 65348) (65317 65349) (65318 65350) (65319 65351) (65320 65352) (65321 65353) (65322 65354) (65323 65355) (65324 65356) (65325 65357) (65326 65358) (65327 65359) (65328 65360) (65329 65361) (65330 65362) (65331 65363) (65332 65364) (65333 65365) (65334 65366) (65335 65367) (65336 65368) (65337 65369) (65338 65370) (66560 66600) (66561 66601) (66562 66602) (66563 66603) (66564 66604) (66565 66605) (66566 66606) (66567 66607) (66568 66608) (66569 66609) (66570 66610) (66571 66611) (66572 66612) (66573 66613) (66574 66614) (66575 66615) (66576 66616) (66577 66617) (66578 66618) (66579 66619) (66580 66620) (66581 66621) (66582 66622) (66583 66623) (66584 66624) (66585 66625) (66586 66626) (66587 66627) (66588 66628) (66589 66629) (66590 66630) (66591 66631) (66592 66632) (66593 66633) (66594 66634) (66595 66635) (66596 66636) (66597 66637) (66598 66638) (66599 66639))) (set! G19581 '((223 223) (304 105 775) (64256 64256) (64257 64257) (64258 64258) (64259 64259) (64260 64260) (64261 64261) (64262 64262) (1415 1415) (64275 64275) (64276 64276) (64277 64277) (64278 64278) (64279 64279) (329 329) (912 912) (944 944) (496 496) (7830 7830) (7831 7831) (7832 7832) (7833 7833) (7834 7834) (8016 8016) (8018 8018) (8020 8020) (8022 8022) (8118 8118) (8134 8134) (8146 8146) (8147 8147) (8150 8150) (8151 8151) (8162 8162) (8163 8163) (8164 8164) (8166 8166) (8167 8167) (8182 8182) (837 837) (8064 8064) (8065 8065) (8066 8066) (8067 8067) (8068 8068) (8069 8069) (8070 8070) (8071 8071) (8072 8064) (8073 8065) (8074 8066) (8075 8067) (8076 8068) (8077 8069) (8078 8070) (8079 8071) (8080 8080) (8081 8081) (8082 8082) (8083 8083) (8084 8084) (8085 8085) (8086 8086) (8087 8087) (8088 8080) (8089 8081) (8090 8082) (8091 8083) (8092 8084) (8093 8085) (8094 8086) (8095 8087) (8096 8096) (8097 8097) (8098 8098) (8099 8099) (8100 8100) (8101 8101) (8102 8102) (8103 8103) (8104 8096) (8105 8097) (8106 8098) (8107 8099) (8108 8100) (8109 8101) (8110 8102) (8111 8103) (8115 8115) (8124 8115) (8131 8131) (8140 8131) (8179 8179) (8188 8179) (8114 8114) (8116 8116) (8130 8130) (8132 8132) (8178 8178) (8180 8180) (8119 8119) (8135 8135) (8183 8183) (931 963) (963 963) (962 962))) (set! G19583 '((223 83 115) (304 304) (64256 70 102) (64257 70 105) (64258 70 108) (64259 70 102 105) (64260 70 102 108) (64261 83 116) (64262 83 116) (1415 1333 1410) (64275 1348 1398) (64276 1348 1381) (64277 1348 1387) (64278 1358 1398) (64279 1348 1389) (329 700 78) (912 921 776 769) (944 933 776 769) (496 74 780) (7830 72 817) (7831 84 776) (7832 87 778) (7833 89 778) (7834 65 702) (8016 933 787) (8018 933 787 768) (8020 933 787 769) (8022 933 787 834) (8118 913 834) (8134 919 834) (8146 921 776 768) (8147 921 776 769) (8150 921 834) (8151 921 776 834) (8162 933 776 768) (8163 933 776 769) (8164 929 787) (8166 933 834) (8167 933 776 834) (8182 937 834) (837 837) (8064 8072) (8065 8073) (8066 8074) (8067 8075) (8068 8076) (8069 8077) (8070 8078) (8071 8079) (8072 8072) (8073 8073) (8074 8074) (8075 8075) (8076 8076) (8077 8077) (8078 8078) (8079 8079) (8080 8088) (8081 8089) (8082 8090) (8083 8091) (8084 8092) (8085 8093) (8086 8094) (8087 8095) (8088 8088) (8089 8089) (8090 8090) (8091 8091) (8092 8092) (8093 8093) (8094 8094) (8095 8095) (8096 8104) (8097 8105) (8098 8106) (8099 8107) (8100 8108) (8101 8109) (8102 8110) (8103 8111) (8104 8104) (8105 8105) (8106 8106) (8107 8107) (8108 8108) (8109 8109) (8110 8110) (8111 8111) (8115 8124) (8124 8124) (8131 8140) (8140 8140) (8179 8188) (8188 8188) (8114 8122 837) (8116 902 837) (8130 8138 837) (8132 905 837) (8178 8186 837) (8180 911 837) (8119 913 834 837) (8135 919 834 837) (8183 937 834 837) (931 931) (963 931) (962 931))) (set! G19585 '((9 . 13) 32 133 160 5760 6158 (8192 . 8202) 8232 8233 8239 8287 12288)) (set! G19587 '(837 (1456 . 1469) 1471 (1473 . 1474) (1476 . 1477) 1479 (1552 . 1562) (1611 . 1623) (1625 . 1630) 1648 (1750 . 1756) (1761 . 1764) (1767 . 1768) 1773 1809 (1840 . 1855) (1958 . 1968) (2305 . 2306) 2307 (2366 . 2368) (2369 . 2376) (2377 . 2380) (2402 . 2403) 2433 (2434 . 2435) (2494 . 2496) (2497 . 2500) (2503 . 2504) (2507 . 2508) 2519 (2530 . 2531) (2561 . 2562) 2563 (2622 . 2624) (2625 . 2626) (2631 . 2632) (2635 . 2636) 2641 (2672 . 2673) 2677 (2689 . 2690) 2691 (2750 . 2752) (2753 . 2757) (2759 . 2760) 2761 (2763 . 2764) (2786 . 2787) 2817 (2818 . 2819) 2878 2879 2880 (2881 . 2884) (2887 . 2888) (2891 . 2892) 2902 2903 (2914 . 2915) 2946 (3006 . 3007) 3008 (3009 . 3010) (3014 . 3016) (3018 . 3020) 3031 (3073 . 3075) (3134 . 3136) (3137 . 3140) (3142 . 3144) (3146 . 3148) (3157 . 3158) (3170 . 3171) (3202 . 3203) 3262 3263 (3264 . 3268) 3270 (3271 . 3272) (3274 . 3275) 3276 (3285 . 3286) (3298 . 3299) (3330 . 3331) (3390 . 3392) (3393 . 3396) (3398 . 3400) (3402 . 3404) 3415 (3426 . 3427) (3458 . 3459) (3535 . 3537) (3538 . 3540) 3542 (3544 . 3551) (3570 . 3571) 3633 (3636 . 3642) 3661 3761 (3764 . 3769) (3771 . 3772) 3789 (3953 . 3966) 3967 (3968 . 3969) (3984 . 3991) (3993 . 4028) (4139 . 4140) (4141 . 4144) 4145 (4146 . 4150) 4152 (4155 . 4156) (4157 . 4158) (4182 . 4183) (4184 . 4185) (4190 . 4192) 4194 (4199 . 4200) (4209 . 4212) 4226 (4227 . 4228) (4229 . 4230) 4959 (5906 . 5907) (5938 . 5939) (5970 . 5971) (6002 . 6003) 6070 (6071 . 6077) (6078 . 6085) 6086 (6087 . 6088) 6313 (6432 . 6434) (6435 . 6438) (6439 . 6440) (6441 . 6443) (6448 . 6449) 6450 (6451 . 6456) (6576 . 6592) (6600 . 6601) (6679 . 6680) (6681 . 6683) (6912 . 6915) 6916 6965 (6966 . 6970) 6971 6972 (6973 . 6977) 6978 6979 (7040 . 7041) 7042 7073 (7074 . 7077) (7078 . 7079) (7080 . 7081) (7204 . 7211) (7212 . 7219) (7220 . 7221) (9398 . 9449) (11744 . 11775) (43043 . 43044) (43045 . 43046) 43047 (43136 . 43137) (43188 . 43203) (43302 . 43306) (43335 . 43345) 43346 (43561 . 43566) (43567 . 43568) (43569 . 43570) (43571 . 43572) (43573 . 43574) 43587 43596 43597 64286 (68097 . 68099) (68101 . 68102) (68108 . 68111))) (set! G19589 '((8544 . 8559) (9398 . 9423))) (set! G19591 '((688 . 696) (704 . 705) (736 . 740) 837 890 (7468 . 7521) 7544 (7579 . 7615) (8336 . 8340) (8560 . 8575) (9424 . 9449) 11389 42864)) (set! G19593 '((Zl 8232) (Po (33 . 35) (37 . 39) 42 44 (46 . 47) (58 . 59) (63 . 64) 92 161 183 191 894 903 (1370 . 1375) 1417 1472 1475 1478 (1523 . 1524) (1545 . 1546) (1548 . 1549) 1563 (1566 . 1567) (1642 . 1645) 1748 (1792 . 1805) (2039 . 2041) (2404 . 2405) 2416 3572 3663 (3674 . 3675) (3844 . 3858) 3973 (4048 . 4052) (4170 . 4175) 4347 (4961 . 4968) (5741 . 5742) (5867 . 5869) (5941 . 5942) (6100 . 6102) (6104 . 6106) (6144 . 6149) (6151 . 6154) (6468 . 6469) (6622 . 6623) (6686 . 6687) (7002 . 7008) (7227 . 7231) (7294 . 7295) (8214 . 8215) (8224 . 8231) (8240 . 8248) (8251 . 8254) (8257 . 8259) (8263 . 8273) 8275 (8277 . 8286) (11513 . 11516) (11518 . 11519) (11776 . 11777) (11782 . 11784) 11787 (11790 . 11798) (11800 . 11801) 11803 (11806 . 11807) (11818 . 11822) 11824 (12289 . 12291) 12349 12539 (42509 . 42511) 42611 42622 (43124 . 43127) (43214 . 43215) (43310 . 43311) 43359 (43612 . 43615) (65040 . 65046) 65049 65072 (65093 . 65094) (65097 . 65100) (65104 . 65106) (65108 . 65111) (65119 . 65121) 65128 (65130 . 65131) (65281 . 65283) (65285 . 65287) 65290 65292 (65294 . 65295) (65306 . 65307) (65311 . 65312) 65340 65377 (65380 . 65381) (65792 . 65793) 66463 66512 67871 67903 (68176 . 68184) (74864 . 74867)) (Pc 95 (8255 . 8256) 8276 (65075 . 65076) (65101 . 65103) 65343) (Lt 453 456 459 498 (8072 . 8079) (8088 . 8095) (8104 . 8111) 8124 8140 8188) (Pi 171 8216 (8219 . 8220) 8223 8249 11778 11780 11785 11788 11804 11808) (Cc (0 . 31) (127 . 159)) (Nd (48 . 57) (1632 . 1641) (1776 . 1785) (1984 . 1993) (2406 . 2415) (2534 . 2543) (2662 . 2671) (2790 . 2799) (2918 . 2927) (3046 . 3055) (3174 . 3183) (3302 . 3311) (3430 . 3439) (3664 . 3673) (3792 . 3801) (3872 . 3881) (4160 . 4169) (4240 . 4249) (6112 . 6121) (6160 . 6169) (6470 . 6479) (6608 . 6617) (6992 . 7001) (7088 . 7097) (7232 . 7241) (7248 . 7257) (42528 . 42537) (43216 . 43225) (43264 . 43273) (43600 . 43609) (65296 . 65305) (66720 . 66729) (120782 . 120831)) (Mn (768 . 879) (1155 . 1159) (1425 . 1469) 1471 (1473 . 1474) (1476 . 1477) 1479 (1552 . 1562) (1611 . 1630) 1648 (1750 . 1756) (1759 . 1764) (1767 . 1768) (1770 . 1773) 1809 (1840 . 1866) (1958 . 1968) (2027 . 2035) (2305 . 2306) 2364 (2369 . 2376) 2381 (2385 . 2388) (2402 . 2403) 2433 2492 (2497 . 2500) 2509 (2530 . 2531) (2561 . 2562) 2620 (2625 . 2626) (2631 . 2632) (2635 . 2637) 2641 (2672 . 2673) 2677 (2689 . 2690) 2748 (2753 . 2757) (2759 . 2760) 2765 (2786 . 2787) 2817 2876 2879 (2881 . 2884) 2893 2902 (2914 . 2915) 2946 3008 3021 (3134 . 3136) (3142 . 3144) (3146 . 3149) (3157 . 3158) (3170 . 3171) 3260 3263 3270 (3276 . 3277) (3298 . 3299) (3393 . 3396) 3405 (3426 . 3427) 3530 (3538 . 3540) 3542 3633 (3636 . 3642) (3655 . 3662) 3761 (3764 . 3769) (3771 . 3772) (3784 . 3789) (3864 . 3865) 3893 3895 3897 (3953 . 3966) (3968 . 3972) (3974 . 3975) (3984 . 3991) (3993 . 4028) 4038 (4141 . 4144) (4146 . 4151) (4153 . 4154) (4157 . 4158) (4184 . 4185) (4190 . 4192) (4209 . 4212) 4226 (4229 . 4230) 4237 4959 (5906 . 5908) (5938 . 5940) (5970 . 5971) (6002 . 6003) (6071 . 6077) 6086 (6089 . 6099) 6109 (6155 . 6157) 6313 (6432 . 6434) (6439 . 6440) 6450 (6457 . 6459) (6679 . 6680) (6912 . 6915) 6964 (6966 . 6970) 6972 6978 (7019 . 7027) (7040 . 7041) (7074 . 7077) (7080 . 7081) (7212 . 7219) (7222 . 7223) (7616 . 7654) (7678 . 7679) (8400 . 8412) 8417 (8421 . 8432) (11744 . 11775) (12330 . 12335) (12441 . 12442) 42607 (42620 . 42621) 43010 43014 43019 (43045 . 43046) 43204 (43302 . 43309) (43335 . 43345) (43561 . 43566) (43569 . 43570) (43573 . 43574) 43587 43596 64286 (65024 . 65039) (65056 . 65062) 66045 (68097 . 68099) (68101 . 68102) (68108 . 68111) (68152 . 68154) 68159 (119143 . 119145) (119163 . 119170) (119173 . 119179) (119210 . 119213) (119362 . 119364) (917760 . 917999)) (Me (1160 . 1161) 1758 (8413 . 8416) (8418 . 8420) (42608 . 42610)) (Sc 36 (162 . 165) 1547 (2546 . 2547) 2801 3065 3647 6107 (8352 . 8373) 65020 65129 65284 (65504 . 65505) (65509 . 65510)) (Cs 55296 (56191 . 56192) (56319 . 56320) 57343) (Cf 173 (1536 . 1539) 1757 1807 (6068 . 6069) (8203 . 8207) (8234 . 8238) (8288 . 8292) (8298 . 8303) 65279 (65529 . 65531) (119155 . 119162) 917505 (917536 . 917631)) (So (166 . 167) 169 174 176 182 1154 (1550 . 1551) 1769 (1789 . 1790) 2038 2554 2928 (3059 . 3064) 3066 3199 (3313 . 3314) 3449 (3841 . 3843) (3859 . 3863) (3866 . 3871) 3892 3894 3896 (4030 . 4037) (4039 . 4044) (4046 . 4047) (4254 . 4255) 4960 (5008 . 5017) 6464 (6624 . 6655) (7009 . 7018) (7028 . 7036) (8448 . 8449) (8451 . 8454) (8456 . 8457) 8468 (8470 . 8472) (8478 . 8483) 8485 8487 8489 8494 (8506 . 8507) 8522 (8524 . 8525) 8527 (8597 . 8601) (8604 . 8607) (8609 . 8610) (8612 . 8613) (8615 . 8621) (8623 . 8653) (8656 . 8657) 8659 (8661 . 8691) (8960 . 8967) (8972 . 8991) (8994 . 9000) (9003 . 9083) (9085 . 9114) (9140 . 9179) (9186 . 9191) (9216 . 9254) (9280 . 9290) (9372 . 9449) (9472 . 9654) (9656 . 9664) (9666 . 9719) (9728 . 9838) (9840 . 9885) (9888 . 9916) (9920 . 9923) (9985 . 9988) (9990 . 9993) (9996 . 10023) (10025 . 10059) 10061 (10063 . 10066) 10070 (10072 . 10078) (10081 . 10087) 10132 (10136 . 10159) (10161 . 10174) (10240 . 10495) (11008 . 11055) (11077 . 11078) (11088 . 11092) (11493 . 11498) (11904 . 11929) (11931 . 12019) (12032 . 12245) (12272 . 12283) 12292 (12306 . 12307) 12320 (12342 . 12343) (12350 . 12351) (12688 . 12689) (12694 . 12703) (12736 . 12771) (12800 . 12830) (12842 . 12867) 12880 (12896 . 12927) (12938 . 12976) (12992 . 13054) (13056 . 13311) (19904 . 19967) (42128 . 42182) (43048 . 43051) 65021 65508 65512 (65517 . 65518) (65532 . 65533) 65794 (65847 . 65855) (65913 . 65929) (65936 . 65947) (66000 . 66044) (118784 . 119029) (119040 . 119078) (119081 . 119140) (119146 . 119148) (119171 . 119172) (119180 . 119209) (119214 . 119261) (119296 . 119361) 119365 (119552 . 119638) (126976 . 127019) (127024 . 127123)) (Zs 32 160 5760 6158 (8192 . 8202) 8239 8287 12288) (Sm 43 (60 . 62) 124 126 172 177 215 247 1014 (1542 . 1544) 8260 8274 (8314 . 8316) (8330 . 8332) (8512 . 8516) 8523 (8592 . 8596) (8602 . 8603) 8608 8611 8614 8622 (8654 . 8655) 8658 8660 (8692 . 8959) (8968 . 8971) (8992 . 8993) 9084 (9115 . 9139) (9180 . 9185) 9655 9665 (9720 . 9727) 9839 (10176 . 10180) (10183 . 10186) 10188 (10192 . 10213) (10224 . 10239) (10496 . 10626) (10649 . 10711) (10716 . 10747) (10750 . 11007) (11056 . 11076) (11079 . 11084) 64297 65122 (65124 . 65126) 65291 (65308 . 65310) 65372 65374 65506 (65513 . 65516) 120513 120539 120571 120597 120629 120655 120687 120713 120745 120771) (Mc 2307 (2366 . 2368) (2377 . 2380) (2434 . 2435) (2494 . 2496) (2503 . 2504) (2507 . 2508) 2519 2563 (2622 . 2624) 2691 (2750 . 2752) 2761 (2763 . 2764) (2818 . 2819) 2878 2880 (2887 . 2888) (2891 . 2892) 2903 (3006 . 3007) (3009 . 3010) (3014 . 3016) (3018 . 3020) 3031 (3073 . 3075) (3137 . 3140) (3202 . 3203) 3262 (3264 . 3268) (3271 . 3272) (3274 . 3275) (3285 . 3286) (3330 . 3331) (3390 . 3392) (3398 . 3400) (3402 . 3404) 3415 (3458 . 3459) (3535 . 3537) (3544 . 3551) (3570 . 3571) (3902 . 3903) 3967 (4139 . 4140) 4145 4152 (4155 . 4156) (4182 . 4183) (4194 . 4196) (4199 . 4205) (4227 . 4228) (4231 . 4236) 4239 6070 (6078 . 6085) (6087 . 6088) (6435 . 6438) (6441 . 6443) (6448 . 6449) (6451 . 6456) (6576 . 6592) (6600 . 6601) (6681 . 6683) 6916 6965 6971 (6973 . 6977) (6979 . 6980) 7042 7073 (7078 . 7079) 7082 (7204 . 7211) (7220 . 7221) (43043 . 43044) 43047 (43136 . 43137) (43188 . 43203) (43346 . 43347) (43567 . 43568) (43571 . 43572) 43597 (119141 . 119142) (119149 . 119154)) (Sk 94 96 168 175 180 184 (706 . 709) (722 . 735) (741 . 747) 749 (751 . 767) 885 (900 . 901) 8125 (8127 . 8129) (8141 . 8143) (8157 . 8159) (8173 . 8175) (8189 . 8190) (12443 . 12444) (42752 . 42774) (42784 . 42785) (42889 . 42890) 65342 65344 65507) (Lm (688 . 705) (710 . 721) (736 . 740) 748 750 884 890 1369 1600 (1765 . 1766) (2036 . 2037) 2042 2417 3654 3782 4348 6103 6211 (7288 . 7293) (7468 . 7521) 7544 (7579 . 7615) (8336 . 8340) 11389 11631 11823 12293 (12337 . 12341) 12347 (12445 . 12446) (12540 . 12542) 40981 42508 42623 (42775 . 42783) 42864 42888 65392 (65438 . 65439)) (Pe 41 93 125 3899 3901 5788 8262 8318 8334 9002 10089 10091 10093 10095 10097 10099 10101 10182 10215 10217 10219 10221 10223 10628 10630 10632 10634 10636 10638 10640 10642 10644 10646 10648 10713 10715 10749 11811 11813 11815 11817 12297 12299 12301 12303 12305 12309 12311 12313 12315 (12318 . 12319) 64831 65048 65078 65080 65082 65084 65086 65088 65090 65092 65096 65114 65116 65118 65289 65341 65373 65376 65379) (Lo 443 (448 . 451) 660 (1488 . 1514) (1520 . 1522) (1569 . 1599) (1601 . 1610) (1646 . 1647) (1649 . 1747) 1749 (1774 . 1775) (1786 . 1788) 1791 1808 (1810 . 1839) (1869 . 1957) 1969 (1994 . 2026) (2308 . 2361) 2365 2384 (2392 . 2401) 2418 (2427 . 2431) (2437 . 2444) (2447 . 2448) (2451 . 2472) (2474 . 2480) 2482 (2486 . 2489) 2493 2510 (2524 . 2525) (2527 . 2529) (2544 . 2545) (2565 . 2570) (2575 . 2576) (2579 . 2600) (2602 . 2608) (2610 . 2611) (2613 . 2614) (2616 . 2617) (2649 . 2652) 2654 (2674 . 2676) (2693 . 2701) (2703 . 2705) (2707 . 2728) (2730 . 2736) (2738 . 2739) (2741 . 2745) 2749 2768 (2784 . 2785) (2821 . 2828) (2831 . 2832) (2835 . 2856) (2858 . 2864) (2866 . 2867) (2869 . 2873) 2877 (2908 . 2909) (2911 . 2913) 2929 2947 (2949 . 2954) (2958 . 2960) (2962 . 2965) (2969 . 2970) 2972 (2974 . 2975) (2979 . 2980) (2984 . 2986) (2990 . 3001) 3024 (3077 . 3084) (3086 . 3088) (3090 . 3112) (3114 . 3123) (3125 . 3129) 3133 (3160 . 3161) (3168 . 3169) (3205 . 3212) (3214 . 3216) (3218 . 3240) (3242 . 3251) (3253 . 3257) 3261 3294 (3296 . 3297) (3333 . 3340) (3342 . 3344) (3346 . 3368) (3370 . 3385) 3389 (3424 . 3425) (3450 . 3455) (3461 . 3478) (3482 . 3505) (3507 . 3515) 3517 (3520 . 3526) (3585 . 3632) (3634 . 3635) (3648 . 3653) (3713 . 3714) 3716 (3719 . 3720) 3722 3725 (3732 . 3735) (3737 . 3743) (3745 . 3747) 3749 3751 (3754 . 3755) (3757 . 3760) (3762 . 3763) 3773 (3776 . 3780) (3804 . 3805) 3840 (3904 . 3911) (3913 . 3948) (3976 . 3979) (4096 . 4138) 4159 (4176 . 4181) (4186 . 4189) 4193 (4197 . 4198) (4206 . 4208) (4213 . 4225) 4238 (4304 . 4346) (4352 . 4441) (4447 . 4514) (4520 . 4601) (4608 . 4680) (4682 . 4685) (4688 . 4694) 4696 (4698 . 4701) (4704 . 4744) (4746 . 4749) (4752 . 4784) (4786 . 4789) (4792 . 4798) 4800 (4802 . 4805) (4808 . 4822) (4824 . 4880) (4882 . 4885) (4888 . 4954) (4992 . 5007) (5024 . 5108) (5121 . 5740) (5743 . 5750) (5761 . 5786) (5792 . 5866) (5888 . 5900) (5902 . 5905) (5920 . 5937) (5952 . 5969) (5984 . 5996) (5998 . 6000) (6016 . 6067) 6108 (6176 . 6210) (6212 . 6263) (6272 . 6312) 6314 (6400 . 6428) (6480 . 6509) (6512 . 6516) (6528 . 6569) (6593 . 6599) (6656 . 6678) (6917 . 6963) (6981 . 6987) (7043 . 7072) (7086 . 7087) (7168 . 7203) (7245 . 7247) (7258 . 7287) (8501 . 8504) (11568 . 11621) (11648 . 11670) (11680 . 11686) (11688 . 11694) (11696 . 11702) (11704 . 11710) (11712 . 11718) (11720 . 11726) (11728 . 11734) (11736 . 11742) 12294 12348 (12353 . 12438) 12447 (12449 . 12538) 12543 (12549 . 12589) (12593 . 12686) (12704 . 12727) (12784 . 12799) 13312 19893 19968 40899 (40960 . 40980) (40982 . 42124) (42240 . 42507) (42512 . 42527) (42538 . 42539) 42606 (43003 . 43009) (43011 . 43013) (43015 . 43018) (43020 . 43042) (43072 . 43123) (43138 . 43187) (43274 . 43301) (43312 . 43334) (43520 . 43560) (43584 . 43586) (43588 . 43595) 44032 55203 (63744 . 64045) (64048 . 64106) (64112 . 64217) 64285 (64287 . 64296) (64298 . 64310) (64312 . 64316) 64318 (64320 . 64321) (64323 . 64324) (64326 . 64433) (64467 . 64829) (64848 . 64911) (64914 . 64967) (65008 . 65019) (65136 . 65140) (65142 . 65276) (65382 . 65391) (65393 . 65437) (65440 . 65470) (65474 . 65479) (65482 . 65487) (65490 . 65495) (65498 . 65500) (65536 . 65547) (65549 . 65574) (65576 . 65594) (65596 . 65597) (65599 . 65613) (65616 . 65629) (65664 . 65786) (66176 . 66204) (66208 . 66256) (66304 . 66334) (66352 . 66368) (66370 . 66377) (66432 . 66461) (66464 . 66499) (66504 . 66511) (66640 . 66717) (67584 . 67589) 67592 (67594 . 67637) (67639 . 67640) 67644 67647 (67840 . 67861) (67872 . 67897) 68096 (68112 . 68115) (68117 . 68119) (68121 . 68147) (73728 . 74606) 131072 173782 (194560 . 195101)) (Pd 45 1418 1470 6150 (8208 . 8213) 11799 11802 12316 12336 12448 (65073 . 65074) 65112 65123 65293) (Ll (97 . 122) 170 181 186 (223 . 246) (248 . 255) 257 259 261 263 265 267 269 271 273 275 277 279 281 283 285 287 289 291 293 295 297 299 301 303 305 307 309 (311 . 312) 314 316 318 320 322 324 326 (328 . 329) 331 333 335 337 339 341 343 345 347 349 351 353 355 357 359 361 363 365 367 369 371 373 375 378 380 (382 . 384) 387 389 392 (396 . 397) 402 405 (409 . 411) 414 417 419 421 424 (426 . 427) 429 432 436 438 (441 . 442) (445 . 447) 454 457 460 462 464 466 468 470 472 474 (476 . 477) 479 481 483 485 487 489 491 493 (495 . 496) 499 501 505 507 509 511 513 515 517 519 521 523 525 527 529 531 533 535 537 539 541 543 545 547 549 551 553 555 557 559 561 (563 . 569) 572 (575 . 576) 578 583 585 587 589 (591 . 659) (661 . 687) 881 883 887 (891 . 893) 912 (940 . 974) (976 . 977) (981 . 983) 985 987 989 991 993 995 997 999 1001 1003 1005 (1007 . 1011) 1013 1016 (1019 . 1020) (1072 . 1119) 1121 1123 1125 1127 1129 1131 1133 1135 1137 1139 1141 1143 1145 1147 1149 1151 1153 1163 1165 1167 1169 1171 1173 1175 1177 1179 1181 1183 1185 1187 1189 1191 1193 1195 1197 1199 1201 1203 1205 1207 1209 1211 1213 1215 1218 1220 1222 1224 1226 1228 (1230 . 1231) 1233 1235 1237 1239 1241 1243 1245 1247 1249 1251 1253 1255 1257 1259 1261 1263 1265 1267 1269 1271 1273 1275 1277 1279 1281 1283 1285 1287 1289 1291 1293 1295 1297 1299 1301 1303 1305 1307 1309 1311 1313 1315 (1377 . 1415) (7424 . 7467) (7522 . 7543) (7545 . 7578) 7681 7683 7685 7687 7689 7691 7693 7695 7697 7699 7701 7703 7705 7707 7709 7711 7713 7715 7717 7719 7721 7723 7725 7727 7729 7731 7733 7735 7737 7739 7741 7743 7745 7747 7749 7751 7753 7755 7757 7759 7761 7763 7765 7767 7769 7771 7773 7775 7777 7779 7781 7783 7785 7787 7789 7791 7793 7795 7797 7799 7801 7803 7805 7807 7809 7811 7813 7815 7817 7819 7821 7823 7825 7827 (7829 . 7837) 7839 7841 7843 7845 7847 7849 7851 7853 7855 7857 7859 7861 7863 7865 7867 7869 7871 7873 7875 7877 7879 7881 7883 7885 7887 7889 7891 7893 7895 7897 7899 7901 7903 7905 7907 7909 7911 7913 7915 7917 7919 7921 7923 7925 7927 7929 7931 7933 (7935 . 7943) (7952 . 7957) (7968 . 7975) (7984 . 7991) (8000 . 8005) (8016 . 8023) (8032 . 8039) (8048 . 8061) (8064 . 8071) (8080 . 8087) (8096 . 8103) (8112 . 8116) (8118 . 8119) 8126 (8130 . 8132) (8134 . 8135) (8144 . 8147) (8150 . 8151) (8160 . 8167) (8178 . 8180) (8182 . 8183) 8305 8319 8458 (8462 . 8463) 8467 8495 8500 8505 (8508 . 8509) (8518 . 8521) 8526 8580 (11312 . 11358) 11361 (11365 . 11366) 11368 11370 11372 11377 (11379 . 11380) (11382 . 11388) 11393 11395 11397 11399 11401 11403 11405 11407 11409 11411 11413 11415 11417 11419 11421 11423 11425 11427 11429 11431 11433 11435 11437 11439 11441 11443 11445 11447 11449 11451 11453 11455 11457 11459 11461 11463 11465 11467 11469 11471 11473 11475 11477 11479 11481 11483 11485 11487 11489 (11491 . 11492) (11520 . 11557) 42561 42563 42565 42567 42569 42571 42573 42575 42577 42579 42581 42583 42585 42587 42589 42591 42595 42597 42599 42601 42603 42605 42625 42627 42629 42631 42633 42635 42637 42639 42641 42643 42645 42647 42787 42789 42791 42793 42795 42797 (42799 . 42801) 42803 42805 42807 42809 42811 42813 42815 42817 42819 42821 42823 42825 42827 42829 42831 42833 42835 42837 42839 42841 42843 42845 42847 42849 42851 42853 42855 42857 42859 42861 42863 (42865 . 42872) 42874 42876 42879 42881 42883 42885 42887 42892 (64256 . 64262) (64275 . 64279) (65345 . 65370) (66600 . 66639) (119834 . 119859) (119886 . 119892) (119894 . 119911) (119938 . 119963) (119990 . 119993) 119995 (119997 . 120003) (120005 . 120015) (120042 . 120067) (120094 . 120119) (120146 . 120171) (120198 . 120223) (120250 . 120275) (120302 . 120327) (120354 . 120379) (120406 . 120431) (120458 . 120485) (120514 . 120538) (120540 . 120545) (120572 . 120596) (120598 . 120603) (120630 . 120654) (120656 . 120661) (120688 . 120712) (120714 . 120719) (120746 . 120770) (120772 . 120777) 120779) (No (178 . 179) 185 (188 . 190) (2548 . 2553) (3056 . 3058) (3192 . 3198) (3440 . 3445) (3882 . 3891) (4969 . 4988) (6128 . 6137) 8304 (8308 . 8313) (8320 . 8329) (8531 . 8543) (9312 . 9371) (9450 . 9471) (10102 . 10131) 11517 (12690 . 12693) (12832 . 12841) (12881 . 12895) (12928 . 12937) (12977 . 12991) (65799 . 65843) (65909 . 65912) 65930 (66336 . 66339) (67862 . 67865) (68160 . 68167) (119648 . 119665)) (Co 57344 63743 983040 1048573 1048576 1114109) (Pf 187 8217 8221 8250 11779 11781 11786 11789 11805 11809) (Lu (65 . 90) (192 . 214) (216 . 222) 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306 308 310 313 315 317 319 321 323 325 327 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 (376 . 377) 379 381 (385 . 386) 388 (390 . 391) (393 . 395) (398 . 401) (403 . 404) (406 . 408) (412 . 413) (415 . 416) 418 420 (422 . 423) 425 428 (430 . 431) (433 . 435) 437 (439 . 440) 444 452 455 458 461 463 465 467 469 471 473 475 478 480 482 484 486 488 490 492 494 497 500 (502 . 504) 506 508 510 512 514 516 518 520 522 524 526 528 530 532 534 536 538 540 542 544 546 548 550 552 554 556 558 560 562 (570 . 571) (573 . 574) 577 (579 . 582) 584 586 588 590 880 882 886 902 (904 . 906) 908 (910 . 911) (913 . 929) (931 . 939) 975 (978 . 980) 984 986 988 990 992 994 996 998 1000 1002 1004 1006 1012 1015 (1017 . 1018) (1021 . 1071) 1120 1122 1124 1126 1128 1130 1132 1134 1136 1138 1140 1142 1144 1146 1148 1150 1152 1162 1164 1166 1168 1170 1172 1174 1176 1178 1180 1182 1184 1186 1188 1190 1192 1194 1196 1198 1200 1202 1204 1206 1208 1210 1212 1214 (1216 . 1217) 1219 1221 1223 1225 1227 1229 1232 1234 1236 1238 1240 1242 1244 1246 1248 1250 1252 1254 1256 1258 1260 1262 1264 1266 1268 1270 1272 1274 1276 1278 1280 1282 1284 1286 1288 1290 1292 1294 1296 1298 1300 1302 1304 1306 1308 1310 1312 1314 (1329 . 1366) (4256 . 4293) 7680 7682 7684 7686 7688 7690 7692 7694 7696 7698 7700 7702 7704 7706 7708 7710 7712 7714 7716 7718 7720 7722 7724 7726 7728 7730 7732 7734 7736 7738 7740 7742 7744 7746 7748 7750 7752 7754 7756 7758 7760 7762 7764 7766 7768 7770 7772 7774 7776 7778 7780 7782 7784 7786 7788 7790 7792 7794 7796 7798 7800 7802 7804 7806 7808 7810 7812 7814 7816 7818 7820 7822 7824 7826 7828 7838 7840 7842 7844 7846 7848 7850 7852 7854 7856 7858 7860 7862 7864 7866 7868 7870 7872 7874 7876 7878 7880 7882 7884 7886 7888 7890 7892 7894 7896 7898 7900 7902 7904 7906 7908 7910 7912 7914 7916 7918 7920 7922 7924 7926 7928 7930 7932 7934 (7944 . 7951) (7960 . 7965) (7976 . 7983) (7992 . 7999) (8008 . 8013) 8025 8027 8029 8031 (8040 . 8047) (8120 . 8123) (8136 . 8139) (8152 . 8155) (8168 . 8172) (8184 . 8187) 8450 8455 (8459 . 8461) (8464 . 8466) 8469 (8473 . 8477) 8484 8486 8488 (8490 . 8493) (8496 . 8499) (8510 . 8511) 8517 8579 (11264 . 11310) 11360 (11362 . 11364) 11367 11369 11371 (11373 . 11375) 11378 11381 11392 11394 11396 11398 11400 11402 11404 11406 11408 11410 11412 11414 11416 11418 11420 11422 11424 11426 11428 11430 11432 11434 11436 11438 11440 11442 11444 11446 11448 11450 11452 11454 11456 11458 11460 11462 11464 11466 11468 11470 11472 11474 11476 11478 11480 11482 11484 11486 11488 11490 42560 42562 42564 42566 42568 42570 42572 42574 42576 42578 42580 42582 42584 42586 42588 42590 42594 42596 42598 42600 42602 42604 42624 42626 42628 42630 42632 42634 42636 42638 42640 42642 42644 42646 42786 42788 42790 42792 42794 42796 42798 42802 42804 42806 42808 42810 42812 42814 42816 42818 42820 42822 42824 42826 42828 42830 42832 42834 42836 42838 42840 42842 42844 42846 42848 42850 42852 42854 42856 42858 42860 42862 42873 42875 (42877 . 42878) 42880 42882 42884 42886 42891 (65313 . 65338) (66560 . 66599) (119808 . 119833) (119860 . 119885) (119912 . 119937) 119964 (119966 . 119967) 119970 (119973 . 119974) (119977 . 119980) (119982 . 119989) (120016 . 120041) (120068 . 120069) (120071 . 120074) (120077 . 120084) (120086 . 120092) (120120 . 120121) (120123 . 120126) (120128 . 120132) 120134 (120138 . 120144) (120172 . 120197) (120224 . 120249) (120276 . 120301) (120328 . 120353) (120380 . 120405) (120432 . 120457) (120488 . 120512) (120546 . 120570) (120604 . 120628) (120662 . 120686) (120720 . 120744) 120778) (Zp 8233) (Nl (5870 . 5872) (8544 . 8578) (8581 . 8584) 12295 (12321 . 12329) (12344 . 12346) (65856 . 65908) 66369 66378 (66513 . 66517) (74752 . 74850)) (Ps 40 91 123 3898 3900 5787 8218 8222 8261 8317 8333 9001 10088 10090 10092 10094 10096 10098 10100 10181 10214 10216 10218 10220 10222 10627 10629 10631 10633 10635 10637 10639 10641 10643 10645 10647 10712 10714 10748 11810 11812 11814 11816 12296 12298 12300 12302 12304 12308 12310 12312 12314 12317 64830 65047 65077 65079 65081 65083 65085 65087 65089 65091 65095 65113 65115 65117 65288 65339 65371 65375 65378))) (set! G19595 '((97 . 65) (98 . 66) (99 . 67) (100 . 68) (101 . 69) (102 . 70) (103 . 71) (104 . 72) (105 . 73) (106 . 74) (107 . 75) (108 . 76) (109 . 77) (110 . 78) (111 . 79) (112 . 80) (113 . 81) (114 . 82) (115 . 83) (116 . 84) (117 . 85) (118 . 86) (119 . 87) (120 . 88) (121 . 89) (122 . 90) (181 . 924) (224 . 192) (225 . 193) (226 . 194) (227 . 195) (228 . 196) (229 . 197) (230 . 198) (231 . 199) (232 . 200) (233 . 201) (234 . 202) (235 . 203) (236 . 204) (237 . 205) (238 . 206) (239 . 207) (240 . 208) (241 . 209) (242 . 210) (243 . 211) (244 . 212) (245 . 213) (246 . 214) (248 . 216) (249 . 217) (250 . 218) (251 . 219) (252 . 220) (253 . 221) (254 . 222) (255 . 376) (257 . 256) (259 . 258) (261 . 260) (263 . 262) (265 . 264) (267 . 266) (269 . 268) (271 . 270) (273 . 272) (275 . 274) (277 . 276) (279 . 278) (281 . 280) (283 . 282) (285 . 284) (287 . 286) (289 . 288) (291 . 290) (293 . 292) (295 . 294) (297 . 296) (299 . 298) (301 . 300) (303 . 302) (305 . 73) (307 . 306) (309 . 308) (311 . 310) (314 . 313) (316 . 315) (318 . 317) (320 . 319) (322 . 321) (324 . 323) (326 . 325) (328 . 327) (331 . 330) (333 . 332) (335 . 334) (337 . 336) (339 . 338) (341 . 340) (343 . 342) (345 . 344) (347 . 346) (349 . 348) (351 . 350) (353 . 352) (355 . 354) (357 . 356) (359 . 358) (361 . 360) (363 . 362) (365 . 364) (367 . 366) (369 . 368) (371 . 370) (373 . 372) (375 . 374) (378 . 377) (380 . 379) (382 . 381) (383 . 83) (384 . 579) (387 . 386) (389 . 388) (392 . 391) (396 . 395) (402 . 401) (405 . 502) (409 . 408) (410 . 573) (414 . 544) (417 . 416) (419 . 418) (421 . 420) (424 . 423) (429 . 428) (432 . 431) (436 . 435) (438 . 437) (441 . 440) (445 . 444) (447 . 503) (452 . 453) (453 . 453) (454 . 453) (455 . 456) (456 . 456) (457 . 456) (458 . 459) (459 . 459) (460 . 459) (462 . 461) (464 . 463) (466 . 465) (468 . 467) (470 . 469) (472 . 471) (474 . 473) (476 . 475) (477 . 398) (479 . 478) (481 . 480) (483 . 482) (485 . 484) (487 . 486) (489 . 488) (491 . 490) (493 . 492) (495 . 494) (497 . 498) (498 . 498) (499 . 498) (501 . 500) (505 . 504) (507 . 506) (509 . 508) (511 . 510) (513 . 512) (515 . 514) (517 . 516) (519 . 518) (521 . 520) (523 . 522) (525 . 524) (527 . 526) (529 . 528) (531 . 530) (533 . 532) (535 . 534) (537 . 536) (539 . 538) (541 . 540) (543 . 542) (547 . 546) (549 . 548) (551 . 550) (553 . 552) (555 . 554) (557 . 556) (559 . 558) (561 . 560) (563 . 562) (572 . 571) (578 . 577) (583 . 582) (585 . 584) (587 . 586) (589 . 588) (591 . 590) (592 . 11375) (593 . 11373) (595 . 385) (596 . 390) (598 . 393) (599 . 394) (601 . 399) (603 . 400) (608 . 403) (611 . 404) (616 . 407) (617 . 406) (619 . 11362) (623 . 412) (625 . 11374) (626 . 413) (629 . 415) (637 . 11364) (640 . 422) (643 . 425) (648 . 430) (649 . 580) (650 . 433) (651 . 434) (652 . 581) (658 . 439) (837 . 921) (881 . 880) (883 . 882) (887 . 886) (891 . 1021) (892 . 1022) (893 . 1023) (940 . 902) (941 . 904) (942 . 905) (943 . 906) (945 . 913) (946 . 914) (947 . 915) (948 . 916) (949 . 917) (950 . 918) (951 . 919) (952 . 920) (953 . 921) (954 . 922) (955 . 923) (956 . 924) (957 . 925) (958 . 926) (959 . 927) (960 . 928) (961 . 929) (962 . 931) (963 . 931) (964 . 932) (965 . 933) (966 . 934) (967 . 935) (968 . 936) (969 . 937) (970 . 938) (971 . 939) (972 . 908) (973 . 910) (974 . 911) (976 . 914) (977 . 920) (981 . 934) (982 . 928) (983 . 975) (985 . 984) (987 . 986) (989 . 988) (991 . 990) (993 . 992) (995 . 994) (997 . 996) (999 . 998) (1001 . 1000) (1003 . 1002) (1005 . 1004) (1007 . 1006) (1008 . 922) (1009 . 929) (1010 . 1017) (1013 . 917) (1016 . 1015) (1019 . 1018) (1072 . 1040) (1073 . 1041) (1074 . 1042) (1075 . 1043) (1076 . 1044) (1077 . 1045) (1078 . 1046) (1079 . 1047) (1080 . 1048) (1081 . 1049) (1082 . 1050) (1083 . 1051) (1084 . 1052) (1085 . 1053) (1086 . 1054) (1087 . 1055) (1088 . 1056) (1089 . 1057) (1090 . 1058) (1091 . 1059) (1092 . 1060) (1093 . 1061) (1094 . 1062) (1095 . 1063) (1096 . 1064) (1097 . 1065) (1098 . 1066) (1099 . 1067) (1100 . 1068) (1101 . 1069) (1102 . 1070) (1103 . 1071) (1104 . 1024) (1105 . 1025) (1106 . 1026) (1107 . 1027) (1108 . 1028) (1109 . 1029) (1110 . 1030) (1111 . 1031) (1112 . 1032) (1113 . 1033) (1114 . 1034) (1115 . 1035) (1116 . 1036) (1117 . 1037) (1118 . 1038) (1119 . 1039) (1121 . 1120) (1123 . 1122) (1125 . 1124) (1127 . 1126) (1129 . 1128) (1131 . 1130) (1133 . 1132) (1135 . 1134) (1137 . 1136) (1139 . 1138) (1141 . 1140) (1143 . 1142) (1145 . 1144) (1147 . 1146) (1149 . 1148) (1151 . 1150) (1153 . 1152) (1163 . 1162) (1165 . 1164) (1167 . 1166) (1169 . 1168) (1171 . 1170) (1173 . 1172) (1175 . 1174) (1177 . 1176) (1179 . 1178) (1181 . 1180) (1183 . 1182) (1185 . 1184) (1187 . 1186) (1189 . 1188) (1191 . 1190) (1193 . 1192) (1195 . 1194) (1197 . 1196) (1199 . 1198) (1201 . 1200) (1203 . 1202) (1205 . 1204) (1207 . 1206) (1209 . 1208) (1211 . 1210) (1213 . 1212) (1215 . 1214) (1218 . 1217) (1220 . 1219) (1222 . 1221) (1224 . 1223) (1226 . 1225) (1228 . 1227) (1230 . 1229) (1231 . 1216) (1233 . 1232) (1235 . 1234) (1237 . 1236) (1239 . 1238) (1241 . 1240) (1243 . 1242) (1245 . 1244) (1247 . 1246) (1249 . 1248) (1251 . 1250) (1253 . 1252) (1255 . 1254) (1257 . 1256) (1259 . 1258) (1261 . 1260) (1263 . 1262) (1265 . 1264) (1267 . 1266) (1269 . 1268) (1271 . 1270) (1273 . 1272) (1275 . 1274) (1277 . 1276) (1279 . 1278) (1281 . 1280) (1283 . 1282) (1285 . 1284) (1287 . 1286) (1289 . 1288) (1291 . 1290) (1293 . 1292) (1295 . 1294) (1297 . 1296) (1299 . 1298) (1301 . 1300) (1303 . 1302) (1305 . 1304) (1307 . 1306) (1309 . 1308) (1311 . 1310) (1313 . 1312) (1315 . 1314) (1377 . 1329) (1378 . 1330) (1379 . 1331) (1380 . 1332) (1381 . 1333) (1382 . 1334) (1383 . 1335) (1384 . 1336) (1385 . 1337) (1386 . 1338) (1387 . 1339) (1388 . 1340) (1389 . 1341) (1390 . 1342) (1391 . 1343) (1392 . 1344) (1393 . 1345) (1394 . 1346) (1395 . 1347) (1396 . 1348) (1397 . 1349) (1398 . 1350) (1399 . 1351) (1400 . 1352) (1401 . 1353) (1402 . 1354) (1403 . 1355) (1404 . 1356) (1405 . 1357) (1406 . 1358) (1407 . 1359) (1408 . 1360) (1409 . 1361) (1410 . 1362) (1411 . 1363) (1412 . 1364) (1413 . 1365) (1414 . 1366) (7545 . 42877) (7549 . 11363) (7681 . 7680) (7683 . 7682) (7685 . 7684) (7687 . 7686) (7689 . 7688) (7691 . 7690) (7693 . 7692) (7695 . 7694) (7697 . 7696) (7699 . 7698) (7701 . 7700) (7703 . 7702) (7705 . 7704) (7707 . 7706) (7709 . 7708) (7711 . 7710) (7713 . 7712) (7715 . 7714) (7717 . 7716) (7719 . 7718) (7721 . 7720) (7723 . 7722) (7725 . 7724) (7727 . 7726) (7729 . 7728) (7731 . 7730) (7733 . 7732) (7735 . 7734) (7737 . 7736) (7739 . 7738) (7741 . 7740) (7743 . 7742) (7745 . 7744) (7747 . 7746) (7749 . 7748) (7751 . 7750) (7753 . 7752) (7755 . 7754) (7757 . 7756) (7759 . 7758) (7761 . 7760) (7763 . 7762) (7765 . 7764) (7767 . 7766) (7769 . 7768) (7771 . 7770) (7773 . 7772) (7775 . 7774) (7777 . 7776) (7779 . 7778) (7781 . 7780) (7783 . 7782) (7785 . 7784) (7787 . 7786) (7789 . 7788) (7791 . 7790) (7793 . 7792) (7795 . 7794) (7797 . 7796) (7799 . 7798) (7801 . 7800) (7803 . 7802) (7805 . 7804) (7807 . 7806) (7809 . 7808) (7811 . 7810) (7813 . 7812) (7815 . 7814) (7817 . 7816) (7819 . 7818) (7821 . 7820) (7823 . 7822) (7825 . 7824) (7827 . 7826) (7829 . 7828) (7835 . 7776) (7841 . 7840) (7843 . 7842) (7845 . 7844) (7847 . 7846) (7849 . 7848) (7851 . 7850) (7853 . 7852) (7855 . 7854) (7857 . 7856) (7859 . 7858) (7861 . 7860) (7863 . 7862) (7865 . 7864) (7867 . 7866) (7869 . 7868) (7871 . 7870) (7873 . 7872) (7875 . 7874) (7877 . 7876) (7879 . 7878) (7881 . 7880) (7883 . 7882) (7885 . 7884) (7887 . 7886) (7889 . 7888) (7891 . 7890) (7893 . 7892) (7895 . 7894) (7897 . 7896) (7899 . 7898) (7901 . 7900) (7903 . 7902) (7905 . 7904) (7907 . 7906) (7909 . 7908) (7911 . 7910) (7913 . 7912) (7915 . 7914) (7917 . 7916) (7919 . 7918) (7921 . 7920) (7923 . 7922) (7925 . 7924) (7927 . 7926) (7929 . 7928) (7931 . 7930) (7933 . 7932) (7935 . 7934) (7936 . 7944) (7937 . 7945) (7938 . 7946) (7939 . 7947) (7940 . 7948) (7941 . 7949) (7942 . 7950) (7943 . 7951) (7952 . 7960) (7953 . 7961) (7954 . 7962) (7955 . 7963) (7956 . 7964) (7957 . 7965) (7968 . 7976) (7969 . 7977) (7970 . 7978) (7971 . 7979) (7972 . 7980) (7973 . 7981) (7974 . 7982) (7975 . 7983) (7984 . 7992) (7985 . 7993) (7986 . 7994) (7987 . 7995) (7988 . 7996) (7989 . 7997) (7990 . 7998) (7991 . 7999) (8000 . 8008) (8001 . 8009) (8002 . 8010) (8003 . 8011) (8004 . 8012) (8005 . 8013) (8017 . 8025) (8019 . 8027) (8021 . 8029) (8023 . 8031) (8032 . 8040) (8033 . 8041) (8034 . 8042) (8035 . 8043) (8036 . 8044) (8037 . 8045) (8038 . 8046) (8039 . 8047) (8048 . 8122) (8049 . 8123) (8050 . 8136) (8051 . 8137) (8052 . 8138) (8053 . 8139) (8054 . 8154) (8055 . 8155) (8056 . 8184) (8057 . 8185) (8058 . 8170) (8059 . 8171) (8060 . 8186) (8061 . 8187) (8064 . 8072) (8065 . 8073) (8066 . 8074) (8067 . 8075) (8068 . 8076) (8069 . 8077) (8070 . 8078) (8071 . 8079) (8080 . 8088) (8081 . 8089) (8082 . 8090) (8083 . 8091) (8084 . 8092) (8085 . 8093) (8086 . 8094) (8087 . 8095) (8096 . 8104) (8097 . 8105) (8098 . 8106) (8099 . 8107) (8100 . 8108) (8101 . 8109) (8102 . 8110) (8103 . 8111) (8112 . 8120) (8113 . 8121) (8115 . 8124) (8126 . 921) (8131 . 8140) (8144 . 8152) (8145 . 8153) (8160 . 8168) (8161 . 8169) (8165 . 8172) (8179 . 8188) (8526 . 8498) (8560 . 8544) (8561 . 8545) (8562 . 8546) (8563 . 8547) (8564 . 8548) (8565 . 8549) (8566 . 8550) (8567 . 8551) (8568 . 8552) (8569 . 8553) (8570 . 8554) (8571 . 8555) (8572 . 8556) (8573 . 8557) (8574 . 8558) (8575 . 8559) (8580 . 8579) (9424 . 9398) (9425 . 9399) (9426 . 9400) (9427 . 9401) (9428 . 9402) (9429 . 9403) (9430 . 9404) (9431 . 9405) (9432 . 9406) (9433 . 9407) (9434 . 9408) (9435 . 9409) (9436 . 9410) (9437 . 9411) (9438 . 9412) (9439 . 9413) (9440 . 9414) (9441 . 9415) (9442 . 9416) (9443 . 9417) (9444 . 9418) (9445 . 9419) (9446 . 9420) (9447 . 9421) (9448 . 9422) (9449 . 9423) (11312 . 11264) (11313 . 11265) (11314 . 11266) (11315 . 11267) (11316 . 11268) (11317 . 11269) (11318 . 11270) (11319 . 11271) (11320 . 11272) (11321 . 11273) (11322 . 11274) (11323 . 11275) (11324 . 11276) (11325 . 11277) (11326 . 11278) (11327 . 11279) (11328 . 11280) (11329 . 11281) (11330 . 11282) (11331 . 11283) (11332 . 11284) (11333 . 11285) (11334 . 11286) (11335 . 11287) (11336 . 11288) (11337 . 11289) (11338 . 11290) (11339 . 11291) (11340 . 11292) (11341 . 11293) (11342 . 11294) (11343 . 11295) (11344 . 11296) (11345 . 11297) (11346 . 11298) (11347 . 11299) (11348 . 11300) (11349 . 11301) (11350 . 11302) (11351 . 11303) (11352 . 11304) (11353 . 11305) (11354 . 11306) (11355 . 11307) (11356 . 11308) (11357 . 11309) (11358 . 11310) (11361 . 11360) (11365 . 570) (11366 . 574) (11368 . 11367) (11370 . 11369) (11372 . 11371) (11379 . 11378) (11382 . 11381) (11393 . 11392) (11395 . 11394) (11397 . 11396) (11399 . 11398) (11401 . 11400) (11403 . 11402) (11405 . 11404) (11407 . 11406) (11409 . 11408) (11411 . 11410) (11413 . 11412) (11415 . 11414) (11417 . 11416) (11419 . 11418) (11421 . 11420) (11423 . 11422) (11425 . 11424) (11427 . 11426) (11429 . 11428) (11431 . 11430) (11433 . 11432) (11435 . 11434) (11437 . 11436) (11439 . 11438) (11441 . 11440) (11443 . 11442) (11445 . 11444) (11447 . 11446) (11449 . 11448) (11451 . 11450) (11453 . 11452) (11455 . 11454) (11457 . 11456) (11459 . 11458) (11461 . 11460) (11463 . 11462) (11465 . 11464) (11467 . 11466) (11469 . 11468) (11471 . 11470) (11473 . 11472) (11475 . 11474) (11477 . 11476) (11479 . 11478) (11481 . 11480) (11483 . 11482) (11485 . 11484) (11487 . 11486) (11489 . 11488) (11491 . 11490) (11520 . 4256) (11521 . 4257) (11522 . 4258) (11523 . 4259) (11524 . 4260) (11525 . 4261) (11526 . 4262) (11527 . 4263) (11528 . 4264) (11529 . 4265) (11530 . 4266) (11531 . 4267) (11532 . 4268) (11533 . 4269) (11534 . 4270) (11535 . 4271) (11536 . 4272) (11537 . 4273) (11538 . 4274) (11539 . 4275) (11540 . 4276) (11541 . 4277) (11542 . 4278) (11543 . 4279) (11544 . 4280) (11545 . 4281) (11546 . 4282) (11547 . 4283) (11548 . 4284) (11549 . 4285) (11550 . 4286) (11551 . 4287) (11552 . 4288) (11553 . 4289) (11554 . 4290) (11555 . 4291) (11556 . 4292) (11557 . 4293) (42561 . 42560) (42563 . 42562) (42565 . 42564) (42567 . 42566) (42569 . 42568) (42571 . 42570) (42573 . 42572) (42575 . 42574) (42577 . 42576) (42579 . 42578) (42581 . 42580) (42583 . 42582) (42585 . 42584) (42587 . 42586) (42589 . 42588) (42591 . 42590) (42595 . 42594) (42597 . 42596) (42599 . 42598) (42601 . 42600) (42603 . 42602) (42605 . 42604) (42625 . 42624) (42627 . 42626) (42629 . 42628) (42631 . 42630) (42633 . 42632) (42635 . 42634) (42637 . 42636) (42639 . 42638) (42641 . 42640) (42643 . 42642) (42645 . 42644) (42647 . 42646) (42787 . 42786) (42789 . 42788) (42791 . 42790) (42793 . 42792) (42795 . 42794) (42797 . 42796) (42799 . 42798) (42803 . 42802) (42805 . 42804) (42807 . 42806) (42809 . 42808) (42811 . 42810) (42813 . 42812) (42815 . 42814) (42817 . 42816) (42819 . 42818) (42821 . 42820) (42823 . 42822) (42825 . 42824) (42827 . 42826) (42829 . 42828) (42831 . 42830) (42833 . 42832) (42835 . 42834) (42837 . 42836) (42839 . 42838) (42841 . 42840) (42843 . 42842) (42845 . 42844) (42847 . 42846) (42849 . 42848) (42851 . 42850) (42853 . 42852) (42855 . 42854) (42857 . 42856) (42859 . 42858) (42861 . 42860) (42863 . 42862) (42874 . 42873) (42876 . 42875) (42879 . 42878) (42881 . 42880) (42883 . 42882) (42885 . 42884) (42887 . 42886) (42892 . 42891) (65345 . 65313) (65346 . 65314) (65347 . 65315) (65348 . 65316) (65349 . 65317) (65350 . 65318) (65351 . 65319) (65352 . 65320) (65353 . 65321) (65354 . 65322) (65355 . 65323) (65356 . 65324) (65357 . 65325) (65358 . 65326) (65359 . 65327) (65360 . 65328) (65361 . 65329) (65362 . 65330) (65363 . 65331) (65364 . 65332) (65365 . 65333) (65366 . 65334) (65367 . 65335) (65368 . 65336) (65369 . 65337) (65370 . 65338) (66600 . 66560) (66601 . 66561) (66602 . 66562) (66603 . 66563) (66604 . 66564) (66605 . 66565) (66606 . 66566) (66607 . 66567) (66608 . 66568) (66609 . 66569) (66610 . 66570) (66611 . 66571) (66612 . 66572) (66613 . 66573) (66614 . 66574) (66615 . 66575) (66616 . 66576) (66617 . 66577) (66618 . 66578) (66619 . 66579) (66620 . 66580) (66621 . 66581) (66622 . 66582) (66623 . 66583) (66624 . 66584) (66625 . 66585) (66626 . 66586) (66627 . 66587) (66628 . 66588) (66629 . 66589) (66630 . 66590) (66631 . 66591) (66632 . 66592) (66633 . 66593) (66634 . 66594) (66635 . 66595) (66636 . 66596) (66637 . 66597) (66638 . 66598) (66639 . 66599))) (set! G19597 '((65 . 97) (66 . 98) (67 . 99) (68 . 100) (69 . 101) (70 . 102) (71 . 103) (72 . 104) (73 . 105) (74 . 106) (75 . 107) (76 . 108) (77 . 109) (78 . 110) (79 . 111) (80 . 112) (81 . 113) (82 . 114) (83 . 115) (84 . 116) (85 . 117) (86 . 118) (87 . 119) (88 . 120) (89 . 121) (90 . 122) (192 . 224) (193 . 225) (194 . 226) (195 . 227) (196 . 228) (197 . 229) (198 . 230) (199 . 231) (200 . 232) (201 . 233) (202 . 234) (203 . 235) (204 . 236) (205 . 237) (206 . 238) (207 . 239) (208 . 240) (209 . 241) (210 . 242) (211 . 243) (212 . 244) (213 . 245) (214 . 246) (216 . 248) (217 . 249) (218 . 250) (219 . 251) (220 . 252) (221 . 253) (222 . 254) (256 . 257) (258 . 259) (260 . 261) (262 . 263) (264 . 265) (266 . 267) (268 . 269) (270 . 271) (272 . 273) (274 . 275) (276 . 277) (278 . 279) (280 . 281) (282 . 283) (284 . 285) (286 . 287) (288 . 289) (290 . 291) (292 . 293) (294 . 295) (296 . 297) (298 . 299) (300 . 301) (302 . 303) (304 . 105) (306 . 307) (308 . 309) (310 . 311) (313 . 314) (315 . 316) (317 . 318) (319 . 320) (321 . 322) (323 . 324) (325 . 326) (327 . 328) (330 . 331) (332 . 333) (334 . 335) (336 . 337) (338 . 339) (340 . 341) (342 . 343) (344 . 345) (346 . 347) (348 . 349) (350 . 351) (352 . 353) (354 . 355) (356 . 357) (358 . 359) (360 . 361) (362 . 363) (364 . 365) (366 . 367) (368 . 369) (370 . 371) (372 . 373) (374 . 375) (376 . 255) (377 . 378) (379 . 380) (381 . 382) (385 . 595) (386 . 387) (388 . 389) (390 . 596) (391 . 392) (393 . 598) (394 . 599) (395 . 396) (398 . 477) (399 . 601) (400 . 603) (401 . 402) (403 . 608) (404 . 611) (406 . 617) (407 . 616) (408 . 409) (412 . 623) (413 . 626) (415 . 629) (416 . 417) (418 . 419) (420 . 421) (422 . 640) (423 . 424) (425 . 643) (428 . 429) (430 . 648) (431 . 432) (433 . 650) (434 . 651) (435 . 436) (437 . 438) (439 . 658) (440 . 441) (444 . 445) (452 . 454) (453 . 454) (455 . 457) (456 . 457) (458 . 460) (459 . 460) (461 . 462) (463 . 464) (465 . 466) (467 . 468) (469 . 470) (471 . 472) (473 . 474) (475 . 476) (478 . 479) (480 . 481) (482 . 483) (484 . 485) (486 . 487) (488 . 489) (490 . 491) (492 . 493) (494 . 495) (497 . 499) (498 . 499) (500 . 501) (502 . 405) (503 . 447) (504 . 505) (506 . 507) (508 . 509) (510 . 511) (512 . 513) (514 . 515) (516 . 517) (518 . 519) (520 . 521) (522 . 523) (524 . 525) (526 . 527) (528 . 529) (530 . 531) (532 . 533) (534 . 535) (536 . 537) (538 . 539) (540 . 541) (542 . 543) (544 . 414) (546 . 547) (548 . 549) (550 . 551) (552 . 553) (554 . 555) (556 . 557) (558 . 559) (560 . 561) (562 . 563) (570 . 11365) (571 . 572) (573 . 410) (574 . 11366) (577 . 578) (579 . 384) (580 . 649) (581 . 652) (582 . 583) (584 . 585) (586 . 587) (588 . 589) (590 . 591) (880 . 881) (882 . 883) (886 . 887) (902 . 940) (904 . 941) (905 . 942) (906 . 943) (908 . 972) (910 . 973) (911 . 974) (913 . 945) (914 . 946) (915 . 947) (916 . 948) (917 . 949) (918 . 950) (919 . 951) (920 . 952) (921 . 953) (922 . 954) (923 . 955) (924 . 956) (925 . 957) (926 . 958) (927 . 959) (928 . 960) (929 . 961) (931 . 963) (932 . 964) (933 . 965) (934 . 966) (935 . 967) (936 . 968) (937 . 969) (938 . 970) (939 . 971) (975 . 983) (984 . 985) (986 . 987) (988 . 989) (990 . 991) (992 . 993) (994 . 995) (996 . 997) (998 . 999) (1000 . 1001) (1002 . 1003) (1004 . 1005) (1006 . 1007) (1012 . 952) (1015 . 1016) (1017 . 1010) (1018 . 1019) (1021 . 891) (1022 . 892) (1023 . 893) (1024 . 1104) (1025 . 1105) (1026 . 1106) (1027 . 1107) (1028 . 1108) (1029 . 1109) (1030 . 1110) (1031 . 1111) (1032 . 1112) (1033 . 1113) (1034 . 1114) (1035 . 1115) (1036 . 1116) (1037 . 1117) (1038 . 1118) (1039 . 1119) (1040 . 1072) (1041 . 1073) (1042 . 1074) (1043 . 1075) (1044 . 1076) (1045 . 1077) (1046 . 1078) (1047 . 1079) (1048 . 1080) (1049 . 1081) (1050 . 1082) (1051 . 1083) (1052 . 1084) (1053 . 1085) (1054 . 1086) (1055 . 1087) (1056 . 1088) (1057 . 1089) (1058 . 1090) (1059 . 1091) (1060 . 1092) (1061 . 1093) (1062 . 1094) (1063 . 1095) (1064 . 1096) (1065 . 1097) (1066 . 1098) (1067 . 1099) (1068 . 1100) (1069 . 1101) (1070 . 1102) (1071 . 1103) (1120 . 1121) (1122 . 1123) (1124 . 1125) (1126 . 1127) (1128 . 1129) (1130 . 1131) (1132 . 1133) (1134 . 1135) (1136 . 1137) (1138 . 1139) (1140 . 1141) (1142 . 1143) (1144 . 1145) (1146 . 1147) (1148 . 1149) (1150 . 1151) (1152 . 1153) (1162 . 1163) (1164 . 1165) (1166 . 1167) (1168 . 1169) (1170 . 1171) (1172 . 1173) (1174 . 1175) (1176 . 1177) (1178 . 1179) (1180 . 1181) (1182 . 1183) (1184 . 1185) (1186 . 1187) (1188 . 1189) (1190 . 1191) (1192 . 1193) (1194 . 1195) (1196 . 1197) (1198 . 1199) (1200 . 1201) (1202 . 1203) (1204 . 1205) (1206 . 1207) (1208 . 1209) (1210 . 1211) (1212 . 1213) (1214 . 1215) (1216 . 1231) (1217 . 1218) (1219 . 1220) (1221 . 1222) (1223 . 1224) (1225 . 1226) (1227 . 1228) (1229 . 1230) (1232 . 1233) (1234 . 1235) (1236 . 1237) (1238 . 1239) (1240 . 1241) (1242 . 1243) (1244 . 1245) (1246 . 1247) (1248 . 1249) (1250 . 1251) (1252 . 1253) (1254 . 1255) (1256 . 1257) (1258 . 1259) (1260 . 1261) (1262 . 1263) (1264 . 1265) (1266 . 1267) (1268 . 1269) (1270 . 1271) (1272 . 1273) (1274 . 1275) (1276 . 1277) (1278 . 1279) (1280 . 1281) (1282 . 1283) (1284 . 1285) (1286 . 1287) (1288 . 1289) (1290 . 1291) (1292 . 1293) (1294 . 1295) (1296 . 1297) (1298 . 1299) (1300 . 1301) (1302 . 1303) (1304 . 1305) (1306 . 1307) (1308 . 1309) (1310 . 1311) (1312 . 1313) (1314 . 1315) (1329 . 1377) (1330 . 1378) (1331 . 1379) (1332 . 1380) (1333 . 1381) (1334 . 1382) (1335 . 1383) (1336 . 1384) (1337 . 1385) (1338 . 1386) (1339 . 1387) (1340 . 1388) (1341 . 1389) (1342 . 1390) (1343 . 1391) (1344 . 1392) (1345 . 1393) (1346 . 1394) (1347 . 1395) (1348 . 1396) (1349 . 1397) (1350 . 1398) (1351 . 1399) (1352 . 1400) (1353 . 1401) (1354 . 1402) (1355 . 1403) (1356 . 1404) (1357 . 1405) (1358 . 1406) (1359 . 1407) (1360 . 1408) (1361 . 1409) (1362 . 1410) (1363 . 1411) (1364 . 1412) (1365 . 1413) (1366 . 1414) (4256 . 11520) (4257 . 11521) (4258 . 11522) (4259 . 11523) (4260 . 11524) (4261 . 11525) (4262 . 11526) (4263 . 11527) (4264 . 11528) (4265 . 11529) (4266 . 11530) (4267 . 11531) (4268 . 11532) (4269 . 11533) (4270 . 11534) (4271 . 11535) (4272 . 11536) (4273 . 11537) (4274 . 11538) (4275 . 11539) (4276 . 11540) (4277 . 11541) (4278 . 11542) (4279 . 11543) (4280 . 11544) (4281 . 11545) (4282 . 11546) (4283 . 11547) (4284 . 11548) (4285 . 11549) (4286 . 11550) (4287 . 11551) (4288 . 11552) (4289 . 11553) (4290 . 11554) (4291 . 11555) (4292 . 11556) (4293 . 11557) (7680 . 7681) (7682 . 7683) (7684 . 7685) (7686 . 7687) (7688 . 7689) (7690 . 7691) (7692 . 7693) (7694 . 7695) (7696 . 7697) (7698 . 7699) (7700 . 7701) (7702 . 7703) (7704 . 7705) (7706 . 7707) (7708 . 7709) (7710 . 7711) (7712 . 7713) (7714 . 7715) (7716 . 7717) (7718 . 7719) (7720 . 7721) (7722 . 7723) (7724 . 7725) (7726 . 7727) (7728 . 7729) (7730 . 7731) (7732 . 7733) (7734 . 7735) (7736 . 7737) (7738 . 7739) (7740 . 7741) (7742 . 7743) (7744 . 7745) (7746 . 7747) (7748 . 7749) (7750 . 7751) (7752 . 7753) (7754 . 7755) (7756 . 7757) (7758 . 7759) (7760 . 7761) (7762 . 7763) (7764 . 7765) (7766 . 7767) (7768 . 7769) (7770 . 7771) (7772 . 7773) (7774 . 7775) (7776 . 7777) (7778 . 7779) (7780 . 7781) (7782 . 7783) (7784 . 7785) (7786 . 7787) (7788 . 7789) (7790 . 7791) (7792 . 7793) (7794 . 7795) (7796 . 7797) (7798 . 7799) (7800 . 7801) (7802 . 7803) (7804 . 7805) (7806 . 7807) (7808 . 7809) (7810 . 7811) (7812 . 7813) (7814 . 7815) (7816 . 7817) (7818 . 7819) (7820 . 7821) (7822 . 7823) (7824 . 7825) (7826 . 7827) (7828 . 7829) (7838 . 223) (7840 . 7841) (7842 . 7843) (7844 . 7845) (7846 . 7847) (7848 . 7849) (7850 . 7851) (7852 . 7853) (7854 . 7855) (7856 . 7857) (7858 . 7859) (7860 . 7861) (7862 . 7863) (7864 . 7865) (7866 . 7867) (7868 . 7869) (7870 . 7871) (7872 . 7873) (7874 . 7875) (7876 . 7877) (7878 . 7879) (7880 . 7881) (7882 . 7883) (7884 . 7885) (7886 . 7887) (7888 . 7889) (7890 . 7891) (7892 . 7893) (7894 . 7895) (7896 . 7897) (7898 . 7899) (7900 . 7901) (7902 . 7903) (7904 . 7905) (7906 . 7907) (7908 . 7909) (7910 . 7911) (7912 . 7913) (7914 . 7915) (7916 . 7917) (7918 . 7919) (7920 . 7921) (7922 . 7923) (7924 . 7925) (7926 . 7927) (7928 . 7929) (7930 . 7931) (7932 . 7933) (7934 . 7935) (7944 . 7936) (7945 . 7937) (7946 . 7938) (7947 . 7939) (7948 . 7940) (7949 . 7941) (7950 . 7942) (7951 . 7943) (7960 . 7952) (7961 . 7953) (7962 . 7954) (7963 . 7955) (7964 . 7956) (7965 . 7957) (7976 . 7968) (7977 . 7969) (7978 . 7970) (7979 . 7971) (7980 . 7972) (7981 . 7973) (7982 . 7974) (7983 . 7975) (7992 . 7984) (7993 . 7985) (7994 . 7986) (7995 . 7987) (7996 . 7988) (7997 . 7989) (7998 . 7990) (7999 . 7991) (8008 . 8000) (8009 . 8001) (8010 . 8002) (8011 . 8003) (8012 . 8004) (8013 . 8005) (8025 . 8017) (8027 . 8019) (8029 . 8021) (8031 . 8023) (8040 . 8032) (8041 . 8033) (8042 . 8034) (8043 . 8035) (8044 . 8036) (8045 . 8037) (8046 . 8038) (8047 . 8039) (8072 . 8064) (8073 . 8065) (8074 . 8066) (8075 . 8067) (8076 . 8068) (8077 . 8069) (8078 . 8070) (8079 . 8071) (8088 . 8080) (8089 . 8081) (8090 . 8082) (8091 . 8083) (8092 . 8084) (8093 . 8085) (8094 . 8086) (8095 . 8087) (8104 . 8096) (8105 . 8097) (8106 . 8098) (8107 . 8099) (8108 . 8100) (8109 . 8101) (8110 . 8102) (8111 . 8103) (8120 . 8112) (8121 . 8113) (8122 . 8048) (8123 . 8049) (8124 . 8115) (8136 . 8050) (8137 . 8051) (8138 . 8052) (8139 . 8053) (8140 . 8131) (8152 . 8144) (8153 . 8145) (8154 . 8054) (8155 . 8055) (8168 . 8160) (8169 . 8161) (8170 . 8058) (8171 . 8059) (8172 . 8165) (8184 . 8056) (8185 . 8057) (8186 . 8060) (8187 . 8061) (8188 . 8179) (8486 . 969) (8490 . 107) (8491 . 229) (8498 . 8526) (8544 . 8560) (8545 . 8561) (8546 . 8562) (8547 . 8563) (8548 . 8564) (8549 . 8565) (8550 . 8566) (8551 . 8567) (8552 . 8568) (8553 . 8569) (8554 . 8570) (8555 . 8571) (8556 . 8572) (8557 . 8573) (8558 . 8574) (8559 . 8575) (8579 . 8580) (9398 . 9424) (9399 . 9425) (9400 . 9426) (9401 . 9427) (9402 . 9428) (9403 . 9429) (9404 . 9430) (9405 . 9431) (9406 . 9432) (9407 . 9433) (9408 . 9434) (9409 . 9435) (9410 . 9436) (9411 . 9437) (9412 . 9438) (9413 . 9439) (9414 . 9440) (9415 . 9441) (9416 . 9442) (9417 . 9443) (9418 . 9444) (9419 . 9445) (9420 . 9446) (9421 . 9447) (9422 . 9448) (9423 . 9449) (11264 . 11312) (11265 . 11313) (11266 . 11314) (11267 . 11315) (11268 . 11316) (11269 . 11317) (11270 . 11318) (11271 . 11319) (11272 . 11320) (11273 . 11321) (11274 . 11322) (11275 . 11323) (11276 . 11324) (11277 . 11325) (11278 . 11326) (11279 . 11327) (11280 . 11328) (11281 . 11329) (11282 . 11330) (11283 . 11331) (11284 . 11332) (11285 . 11333) (11286 . 11334) (11287 . 11335) (11288 . 11336) (11289 . 11337) (11290 . 11338) (11291 . 11339) (11292 . 11340) (11293 . 11341) (11294 . 11342) (11295 . 11343) (11296 . 11344) (11297 . 11345) (11298 . 11346) (11299 . 11347) (11300 . 11348) (11301 . 11349) (11302 . 11350) (11303 . 11351) (11304 . 11352) (11305 . 11353) (11306 . 11354) (11307 . 11355) (11308 . 11356) (11309 . 11357) (11310 . 11358) (11360 . 11361) (11362 . 619) (11363 . 7549) (11364 . 637) (11367 . 11368) (11369 . 11370) (11371 . 11372) (11373 . 593) (11374 . 625) (11375 . 592) (11378 . 11379) (11381 . 11382) (11392 . 11393) (11394 . 11395) (11396 . 11397) (11398 . 11399) (11400 . 11401) (11402 . 11403) (11404 . 11405) (11406 . 11407) (11408 . 11409) (11410 . 11411) (11412 . 11413) (11414 . 11415) (11416 . 11417) (11418 . 11419) (11420 . 11421) (11422 . 11423) (11424 . 11425) (11426 . 11427) (11428 . 11429) (11430 . 11431) (11432 . 11433) (11434 . 11435) (11436 . 11437) (11438 . 11439) (11440 . 11441) (11442 . 11443) (11444 . 11445) (11446 . 11447) (11448 . 11449) (11450 . 11451) (11452 . 11453) (11454 . 11455) (11456 . 11457) (11458 . 11459) (11460 . 11461) (11462 . 11463) (11464 . 11465) (11466 . 11467) (11468 . 11469) (11470 . 11471) (11472 . 11473) (11474 . 11475) (11476 . 11477) (11478 . 11479) (11480 . 11481) (11482 . 11483) (11484 . 11485) (11486 . 11487) (11488 . 11489) (11490 . 11491) (42560 . 42561) (42562 . 42563) (42564 . 42565) (42566 . 42567) (42568 . 42569) (42570 . 42571) (42572 . 42573) (42574 . 42575) (42576 . 42577) (42578 . 42579) (42580 . 42581) (42582 . 42583) (42584 . 42585) (42586 . 42587) (42588 . 42589) (42590 . 42591) (42594 . 42595) (42596 . 42597) (42598 . 42599) (42600 . 42601) (42602 . 42603) (42604 . 42605) (42624 . 42625) (42626 . 42627) (42628 . 42629) (42630 . 42631) (42632 . 42633) (42634 . 42635) (42636 . 42637) (42638 . 42639) (42640 . 42641) (42642 . 42643) (42644 . 42645) (42646 . 42647) (42786 . 42787) (42788 . 42789) (42790 . 42791) (42792 . 42793) (42794 . 42795) (42796 . 42797) (42798 . 42799) (42802 . 42803) (42804 . 42805) (42806 . 42807) (42808 . 42809) (42810 . 42811) (42812 . 42813) (42814 . 42815) (42816 . 42817) (42818 . 42819) (42820 . 42821) (42822 . 42823) (42824 . 42825) (42826 . 42827) (42828 . 42829) (42830 . 42831) (42832 . 42833) (42834 . 42835) (42836 . 42837) (42838 . 42839) (42840 . 42841) (42842 . 42843) (42844 . 42845) (42846 . 42847) (42848 . 42849) (42850 . 42851) (42852 . 42853) (42854 . 42855) (42856 . 42857) (42858 . 42859) (42860 . 42861) (42862 . 42863) (42873 . 42874) (42875 . 42876) (42877 . 7545) (42878 . 42879) (42880 . 42881) (42882 . 42883) (42884 . 42885) (42886 . 42887) (42891 . 42892) (65313 . 65345) (65314 . 65346) (65315 . 65347) (65316 . 65348) (65317 . 65349) (65318 . 65350) (65319 . 65351) (65320 . 65352) (65321 . 65353) (65322 . 65354) (65323 . 65355) (65324 . 65356) (65325 . 65357) (65326 . 65358) (65327 . 65359) (65328 . 65360) (65329 . 65361) (65330 . 65362) (65331 . 65363) (65332 . 65364) (65333 . 65365) (65334 . 65366) (65335 . 65367) (65336 . 65368) (65337 . 65369) (65338 . 65370) (66560 . 66600) (66561 . 66601) (66562 . 66602) (66563 . 66603) (66564 . 66604) (66565 . 66605) (66566 . 66606) (66567 . 66607) (66568 . 66608) (66569 . 66609) (66570 . 66610) (66571 . 66611) (66572 . 66612) (66573 . 66613) (66574 . 66614) (66575 . 66615) (66576 . 66616) (66577 . 66617) (66578 . 66618) (66579 . 66619) (66580 . 66620) (66581 . 66621) (66582 . 66622) (66583 . 66623) (66584 . 66624) (66585 . 66625) (66586 . 66626) (66587 . 66627) (66588 . 66628) (66589 . 66629) (66590 . 66630) (66591 . 66631) (66592 . 66632) (66593 . 66633) (66594 . 66634) (66595 . 66635) (66596 . 66636) (66597 . 66637) (66598 . 66638) (66599 . 66639))) (set! G19599 '((97 . 65) (98 . 66) (99 . 67) (100 . 68) (101 . 69) (102 . 70) (103 . 71) (104 . 72) (105 . 73) (106 . 74) (107 . 75) (108 . 76) (109 . 77) (110 . 78) (111 . 79) (112 . 80) (113 . 81) (114 . 82) (115 . 83) (116 . 84) (117 . 85) (118 . 86) (119 . 87) (120 . 88) (121 . 89) (122 . 90) (181 . 924) (224 . 192) (225 . 193) (226 . 194) (227 . 195) (228 . 196) (229 . 197) (230 . 198) (231 . 199) (232 . 200) (233 . 201) (234 . 202) (235 . 203) (236 . 204) (237 . 205) (238 . 206) (239 . 207) (240 . 208) (241 . 209) (242 . 210) (243 . 211) (244 . 212) (245 . 213) (246 . 214) (248 . 216) (249 . 217) (250 . 218) (251 . 219) (252 . 220) (253 . 221) (254 . 222) (255 . 376) (257 . 256) (259 . 258) (261 . 260) (263 . 262) (265 . 264) (267 . 266) (269 . 268) (271 . 270) (273 . 272) (275 . 274) (277 . 276) (279 . 278) (281 . 280) (283 . 282) (285 . 284) (287 . 286) (289 . 288) (291 . 290) (293 . 292) (295 . 294) (297 . 296) (299 . 298) (301 . 300) (303 . 302) (305 . 73) (307 . 306) (309 . 308) (311 . 310) (314 . 313) (316 . 315) (318 . 317) (320 . 319) (322 . 321) (324 . 323) (326 . 325) (328 . 327) (331 . 330) (333 . 332) (335 . 334) (337 . 336) (339 . 338) (341 . 340) (343 . 342) (345 . 344) (347 . 346) (349 . 348) (351 . 350) (353 . 352) (355 . 354) (357 . 356) (359 . 358) (361 . 360) (363 . 362) (365 . 364) (367 . 366) (369 . 368) (371 . 370) (373 . 372) (375 . 374) (378 . 377) (380 . 379) (382 . 381) (383 . 83) (384 . 579) (387 . 386) (389 . 388) (392 . 391) (396 . 395) (402 . 401) (405 . 502) (409 . 408) (410 . 573) (414 . 544) (417 . 416) (419 . 418) (421 . 420) (424 . 423) (429 . 428) (432 . 431) (436 . 435) (438 . 437) (441 . 440) (445 . 444) (447 . 503) (453 . 452) (454 . 452) (456 . 455) (457 . 455) (459 . 458) (460 . 458) (462 . 461) (464 . 463) (466 . 465) (468 . 467) (470 . 469) (472 . 471) (474 . 473) (476 . 475) (477 . 398) (479 . 478) (481 . 480) (483 . 482) (485 . 484) (487 . 486) (489 . 488) (491 . 490) (493 . 492) (495 . 494) (498 . 497) (499 . 497) (501 . 500) (505 . 504) (507 . 506) (509 . 508) (511 . 510) (513 . 512) (515 . 514) (517 . 516) (519 . 518) (521 . 520) (523 . 522) (525 . 524) (527 . 526) (529 . 528) (531 . 530) (533 . 532) (535 . 534) (537 . 536) (539 . 538) (541 . 540) (543 . 542) (547 . 546) (549 . 548) (551 . 550) (553 . 552) (555 . 554) (557 . 556) (559 . 558) (561 . 560) (563 . 562) (572 . 571) (578 . 577) (583 . 582) (585 . 584) (587 . 586) (589 . 588) (591 . 590) (592 . 11375) (593 . 11373) (595 . 385) (596 . 390) (598 . 393) (599 . 394) (601 . 399) (603 . 400) (608 . 403) (611 . 404) (616 . 407) (617 . 406) (619 . 11362) (623 . 412) (625 . 11374) (626 . 413) (629 . 415) (637 . 11364) (640 . 422) (643 . 425) (648 . 430) (649 . 580) (650 . 433) (651 . 434) (652 . 581) (658 . 439) (837 . 921) (881 . 880) (883 . 882) (887 . 886) (891 . 1021) (892 . 1022) (893 . 1023) (940 . 902) (941 . 904) (942 . 905) (943 . 906) (945 . 913) (946 . 914) (947 . 915) (948 . 916) (949 . 917) (950 . 918) (951 . 919) (952 . 920) (953 . 921) (954 . 922) (955 . 923) (956 . 924) (957 . 925) (958 . 926) (959 . 927) (960 . 928) (961 . 929) (962 . 931) (963 . 931) (964 . 932) (965 . 933) (966 . 934) (967 . 935) (968 . 936) (969 . 937) (970 . 938) (971 . 939) (972 . 908) (973 . 910) (974 . 911) (976 . 914) (977 . 920) (981 . 934) (982 . 928) (983 . 975) (985 . 984) (987 . 986) (989 . 988) (991 . 990) (993 . 992) (995 . 994) (997 . 996) (999 . 998) (1001 . 1000) (1003 . 1002) (1005 . 1004) (1007 . 1006) (1008 . 922) (1009 . 929) (1010 . 1017) (1013 . 917) (1016 . 1015) (1019 . 1018) (1072 . 1040) (1073 . 1041) (1074 . 1042) (1075 . 1043) (1076 . 1044) (1077 . 1045) (1078 . 1046) (1079 . 1047) (1080 . 1048) (1081 . 1049) (1082 . 1050) (1083 . 1051) (1084 . 1052) (1085 . 1053) (1086 . 1054) (1087 . 1055) (1088 . 1056) (1089 . 1057) (1090 . 1058) (1091 . 1059) (1092 . 1060) (1093 . 1061) (1094 . 1062) (1095 . 1063) (1096 . 1064) (1097 . 1065) (1098 . 1066) (1099 . 1067) (1100 . 1068) (1101 . 1069) (1102 . 1070) (1103 . 1071) (1104 . 1024) (1105 . 1025) (1106 . 1026) (1107 . 1027) (1108 . 1028) (1109 . 1029) (1110 . 1030) (1111 . 1031) (1112 . 1032) (1113 . 1033) (1114 . 1034) (1115 . 1035) (1116 . 1036) (1117 . 1037) (1118 . 1038) (1119 . 1039) (1121 . 1120) (1123 . 1122) (1125 . 1124) (1127 . 1126) (1129 . 1128) (1131 . 1130) (1133 . 1132) (1135 . 1134) (1137 . 1136) (1139 . 1138) (1141 . 1140) (1143 . 1142) (1145 . 1144) (1147 . 1146) (1149 . 1148) (1151 . 1150) (1153 . 1152) (1163 . 1162) (1165 . 1164) (1167 . 1166) (1169 . 1168) (1171 . 1170) (1173 . 1172) (1175 . 1174) (1177 . 1176) (1179 . 1178) (1181 . 1180) (1183 . 1182) (1185 . 1184) (1187 . 1186) (1189 . 1188) (1191 . 1190) (1193 . 1192) (1195 . 1194) (1197 . 1196) (1199 . 1198) (1201 . 1200) (1203 . 1202) (1205 . 1204) (1207 . 1206) (1209 . 1208) (1211 . 1210) (1213 . 1212) (1215 . 1214) (1218 . 1217) (1220 . 1219) (1222 . 1221) (1224 . 1223) (1226 . 1225) (1228 . 1227) (1230 . 1229) (1231 . 1216) (1233 . 1232) (1235 . 1234) (1237 . 1236) (1239 . 1238) (1241 . 1240) (1243 . 1242) (1245 . 1244) (1247 . 1246) (1249 . 1248) (1251 . 1250) (1253 . 1252) (1255 . 1254) (1257 . 1256) (1259 . 1258) (1261 . 1260) (1263 . 1262) (1265 . 1264) (1267 . 1266) (1269 . 1268) (1271 . 1270) (1273 . 1272) (1275 . 1274) (1277 . 1276) (1279 . 1278) (1281 . 1280) (1283 . 1282) (1285 . 1284) (1287 . 1286) (1289 . 1288) (1291 . 1290) (1293 . 1292) (1295 . 1294) (1297 . 1296) (1299 . 1298) (1301 . 1300) (1303 . 1302) (1305 . 1304) (1307 . 1306) (1309 . 1308) (1311 . 1310) (1313 . 1312) (1315 . 1314) (1377 . 1329) (1378 . 1330) (1379 . 1331) (1380 . 1332) (1381 . 1333) (1382 . 1334) (1383 . 1335) (1384 . 1336) (1385 . 1337) (1386 . 1338) (1387 . 1339) (1388 . 1340) (1389 . 1341) (1390 . 1342) (1391 . 1343) (1392 . 1344) (1393 . 1345) (1394 . 1346) (1395 . 1347) (1396 . 1348) (1397 . 1349) (1398 . 1350) (1399 . 1351) (1400 . 1352) (1401 . 1353) (1402 . 1354) (1403 . 1355) (1404 . 1356) (1405 . 1357) (1406 . 1358) (1407 . 1359) (1408 . 1360) (1409 . 1361) (1410 . 1362) (1411 . 1363) (1412 . 1364) (1413 . 1365) (1414 . 1366) (7545 . 42877) (7549 . 11363) (7681 . 7680) (7683 . 7682) (7685 . 7684) (7687 . 7686) (7689 . 7688) (7691 . 7690) (7693 . 7692) (7695 . 7694) (7697 . 7696) (7699 . 7698) (7701 . 7700) (7703 . 7702) (7705 . 7704) (7707 . 7706) (7709 . 7708) (7711 . 7710) (7713 . 7712) (7715 . 7714) (7717 . 7716) (7719 . 7718) (7721 . 7720) (7723 . 7722) (7725 . 7724) (7727 . 7726) (7729 . 7728) (7731 . 7730) (7733 . 7732) (7735 . 7734) (7737 . 7736) (7739 . 7738) (7741 . 7740) (7743 . 7742) (7745 . 7744) (7747 . 7746) (7749 . 7748) (7751 . 7750) (7753 . 7752) (7755 . 7754) (7757 . 7756) (7759 . 7758) (7761 . 7760) (7763 . 7762) (7765 . 7764) (7767 . 7766) (7769 . 7768) (7771 . 7770) (7773 . 7772) (7775 . 7774) (7777 . 7776) (7779 . 7778) (7781 . 7780) (7783 . 7782) (7785 . 7784) (7787 . 7786) (7789 . 7788) (7791 . 7790) (7793 . 7792) (7795 . 7794) (7797 . 7796) (7799 . 7798) (7801 . 7800) (7803 . 7802) (7805 . 7804) (7807 . 7806) (7809 . 7808) (7811 . 7810) (7813 . 7812) (7815 . 7814) (7817 . 7816) (7819 . 7818) (7821 . 7820) (7823 . 7822) (7825 . 7824) (7827 . 7826) (7829 . 7828) (7835 . 7776) (7841 . 7840) (7843 . 7842) (7845 . 7844) (7847 . 7846) (7849 . 7848) (7851 . 7850) (7853 . 7852) (7855 . 7854) (7857 . 7856) (7859 . 7858) (7861 . 7860) (7863 . 7862) (7865 . 7864) (7867 . 7866) (7869 . 7868) (7871 . 7870) (7873 . 7872) (7875 . 7874) (7877 . 7876) (7879 . 7878) (7881 . 7880) (7883 . 7882) (7885 . 7884) (7887 . 7886) (7889 . 7888) (7891 . 7890) (7893 . 7892) (7895 . 7894) (7897 . 7896) (7899 . 7898) (7901 . 7900) (7903 . 7902) (7905 . 7904) (7907 . 7906) (7909 . 7908) (7911 . 7910) (7913 . 7912) (7915 . 7914) (7917 . 7916) (7919 . 7918) (7921 . 7920) (7923 . 7922) (7925 . 7924) (7927 . 7926) (7929 . 7928) (7931 . 7930) (7933 . 7932) (7935 . 7934) (7936 . 7944) (7937 . 7945) (7938 . 7946) (7939 . 7947) (7940 . 7948) (7941 . 7949) (7942 . 7950) (7943 . 7951) (7952 . 7960) (7953 . 7961) (7954 . 7962) (7955 . 7963) (7956 . 7964) (7957 . 7965) (7968 . 7976) (7969 . 7977) (7970 . 7978) (7971 . 7979) (7972 . 7980) (7973 . 7981) (7974 . 7982) (7975 . 7983) (7984 . 7992) (7985 . 7993) (7986 . 7994) (7987 . 7995) (7988 . 7996) (7989 . 7997) (7990 . 7998) (7991 . 7999) (8000 . 8008) (8001 . 8009) (8002 . 8010) (8003 . 8011) (8004 . 8012) (8005 . 8013) (8017 . 8025) (8019 . 8027) (8021 . 8029) (8023 . 8031) (8032 . 8040) (8033 . 8041) (8034 . 8042) (8035 . 8043) (8036 . 8044) (8037 . 8045) (8038 . 8046) (8039 . 8047) (8048 . 8122) (8049 . 8123) (8050 . 8136) (8051 . 8137) (8052 . 8138) (8053 . 8139) (8054 . 8154) (8055 . 8155) (8056 . 8184) (8057 . 8185) (8058 . 8170) (8059 . 8171) (8060 . 8186) (8061 . 8187) (8064 . 8072) (8065 . 8073) (8066 . 8074) (8067 . 8075) (8068 . 8076) (8069 . 8077) (8070 . 8078) (8071 . 8079) (8080 . 8088) (8081 . 8089) (8082 . 8090) (8083 . 8091) (8084 . 8092) (8085 . 8093) (8086 . 8094) (8087 . 8095) (8096 . 8104) (8097 . 8105) (8098 . 8106) (8099 . 8107) (8100 . 8108) (8101 . 8109) (8102 . 8110) (8103 . 8111) (8112 . 8120) (8113 . 8121) (8115 . 8124) (8126 . 921) (8131 . 8140) (8144 . 8152) (8145 . 8153) (8160 . 8168) (8161 . 8169) (8165 . 8172) (8179 . 8188) (8526 . 8498) (8560 . 8544) (8561 . 8545) (8562 . 8546) (8563 . 8547) (8564 . 8548) (8565 . 8549) (8566 . 8550) (8567 . 8551) (8568 . 8552) (8569 . 8553) (8570 . 8554) (8571 . 8555) (8572 . 8556) (8573 . 8557) (8574 . 8558) (8575 . 8559) (8580 . 8579) (9424 . 9398) (9425 . 9399) (9426 . 9400) (9427 . 9401) (9428 . 9402) (9429 . 9403) (9430 . 9404) (9431 . 9405) (9432 . 9406) (9433 . 9407) (9434 . 9408) (9435 . 9409) (9436 . 9410) (9437 . 9411) (9438 . 9412) (9439 . 9413) (9440 . 9414) (9441 . 9415) (9442 . 9416) (9443 . 9417) (9444 . 9418) (9445 . 9419) (9446 . 9420) (9447 . 9421) (9448 . 9422) (9449 . 9423) (11312 . 11264) (11313 . 11265) (11314 . 11266) (11315 . 11267) (11316 . 11268) (11317 . 11269) (11318 . 11270) (11319 . 11271) (11320 . 11272) (11321 . 11273) (11322 . 11274) (11323 . 11275) (11324 . 11276) (11325 . 11277) (11326 . 11278) (11327 . 11279) (11328 . 11280) (11329 . 11281) (11330 . 11282) (11331 . 11283) (11332 . 11284) (11333 . 11285) (11334 . 11286) (11335 . 11287) (11336 . 11288) (11337 . 11289) (11338 . 11290) (11339 . 11291) (11340 . 11292) (11341 . 11293) (11342 . 11294) (11343 . 11295) (11344 . 11296) (11345 . 11297) (11346 . 11298) (11347 . 11299) (11348 . 11300) (11349 . 11301) (11350 . 11302) (11351 . 11303) (11352 . 11304) (11353 . 11305) (11354 . 11306) (11355 . 11307) (11356 . 11308) (11357 . 11309) (11358 . 11310) (11361 . 11360) (11365 . 570) (11366 . 574) (11368 . 11367) (11370 . 11369) (11372 . 11371) (11379 . 11378) (11382 . 11381) (11393 . 11392) (11395 . 11394) (11397 . 11396) (11399 . 11398) (11401 . 11400) (11403 . 11402) (11405 . 11404) (11407 . 11406) (11409 . 11408) (11411 . 11410) (11413 . 11412) (11415 . 11414) (11417 . 11416) (11419 . 11418) (11421 . 11420) (11423 . 11422) (11425 . 11424) (11427 . 11426) (11429 . 11428) (11431 . 11430) (11433 . 11432) (11435 . 11434) (11437 . 11436) (11439 . 11438) (11441 . 11440) (11443 . 11442) (11445 . 11444) (11447 . 11446) (11449 . 11448) (11451 . 11450) (11453 . 11452) (11455 . 11454) (11457 . 11456) (11459 . 11458) (11461 . 11460) (11463 . 11462) (11465 . 11464) (11467 . 11466) (11469 . 11468) (11471 . 11470) (11473 . 11472) (11475 . 11474) (11477 . 11476) (11479 . 11478) (11481 . 11480) (11483 . 11482) (11485 . 11484) (11487 . 11486) (11489 . 11488) (11491 . 11490) (11520 . 4256) (11521 . 4257) (11522 . 4258) (11523 . 4259) (11524 . 4260) (11525 . 4261) (11526 . 4262) (11527 . 4263) (11528 . 4264) (11529 . 4265) (11530 . 4266) (11531 . 4267) (11532 . 4268) (11533 . 4269) (11534 . 4270) (11535 . 4271) (11536 . 4272) (11537 . 4273) (11538 . 4274) (11539 . 4275) (11540 . 4276) (11541 . 4277) (11542 . 4278) (11543 . 4279) (11544 . 4280) (11545 . 4281) (11546 . 4282) (11547 . 4283) (11548 . 4284) (11549 . 4285) (11550 . 4286) (11551 . 4287) (11552 . 4288) (11553 . 4289) (11554 . 4290) (11555 . 4291) (11556 . 4292) (11557 . 4293) (42561 . 42560) (42563 . 42562) (42565 . 42564) (42567 . 42566) (42569 . 42568) (42571 . 42570) (42573 . 42572) (42575 . 42574) (42577 . 42576) (42579 . 42578) (42581 . 42580) (42583 . 42582) (42585 . 42584) (42587 . 42586) (42589 . 42588) (42591 . 42590) (42595 . 42594) (42597 . 42596) (42599 . 42598) (42601 . 42600) (42603 . 42602) (42605 . 42604) (42625 . 42624) (42627 . 42626) (42629 . 42628) (42631 . 42630) (42633 . 42632) (42635 . 42634) (42637 . 42636) (42639 . 42638) (42641 . 42640) (42643 . 42642) (42645 . 42644) (42647 . 42646) (42787 . 42786) (42789 . 42788) (42791 . 42790) (42793 . 42792) (42795 . 42794) (42797 . 42796) (42799 . 42798) (42803 . 42802) (42805 . 42804) (42807 . 42806) (42809 . 42808) (42811 . 42810) (42813 . 42812) (42815 . 42814) (42817 . 42816) (42819 . 42818) (42821 . 42820) (42823 . 42822) (42825 . 42824) (42827 . 42826) (42829 . 42828) (42831 . 42830) (42833 . 42832) (42835 . 42834) (42837 . 42836) (42839 . 42838) (42841 . 42840) (42843 . 42842) (42845 . 42844) (42847 . 42846) (42849 . 42848) (42851 . 42850) (42853 . 42852) (42855 . 42854) (42857 . 42856) (42859 . 42858) (42861 . 42860) (42863 . 42862) (42874 . 42873) (42876 . 42875) (42879 . 42878) (42881 . 42880) (42883 . 42882) (42885 . 42884) (42887 . 42886) (42892 . 42891) (65345 . 65313) (65346 . 65314) (65347 . 65315) (65348 . 65316) (65349 . 65317) (65350 . 65318) (65351 . 65319) (65352 . 65320) (65353 . 65321) (65354 . 65322) (65355 . 65323) (65356 . 65324) (65357 . 65325) (65358 . 65326) (65359 . 65327) (65360 . 65328) (65361 . 65329) (65362 . 65330) (65363 . 65331) (65364 . 65332) (65365 . 65333) (65366 . 65334) (65367 . 65335) (65368 . 65336) (65369 . 65337) (65370 . 65338) (66600 . 66560) (66601 . 66561) (66602 . 66562) (66603 . 66563) (66604 . 66564) (66605 . 66565) (66606 . 66566) (66607 . 66567) (66608 . 66568) (66609 . 66569) (66610 . 66570) (66611 . 66571) (66612 . 66572) (66613 . 66573) (66614 . 66574) (66615 . 66575) (66616 . 66576) (66617 . 66577) (66618 . 66578) (66619 . 66579) (66620 . 66580) (66621 . 66581) (66622 . 66582) (66623 . 66583) (66624 . 66584) (66625 . 66585) (66626 . 66586) (66627 . 66587) (66628 . 66588) (66629 . 66589) (66630 . 66590) (66631 . 66591) (66632 . 66592) (66633 . 66593) (66634 . 66594) (66635 . 66595) (66636 . 66596) (66637 . 66597) (66638 . 66598) (66639 . 66599))) (set! G19601 '#f) (set! G19603 '#f) (set! G19605 '#f) (set! G19607 '#f) (set! G19609 '#f) (set! G19611 '#f) (set! G19613 '#f) (set! G19615 '#f) (set! G19617 '#f) (set! G19619 '#f) (set! G19621 '#f) (set! G19623 '#f) (set! G19625 '#f) (set! G19627 '#f) (set! G19629 '#f) (set! G19631 (lambda (G19732) (begin (if G19621 (void) (set! G19621 (G19567 G19579))) (hashtable-ref G19621 (char->integer G19732) '#f)))) (set! G19633 (lambda (G19734) ((lambda (G19736) (begin (for-each (lambda (G19738) (if (number? G19738) (hashtable-set! G19736 (integer->char G19738) '#t) (if (pair? G19738) ((letrec ((G19740 (lambda (G19742 G19743) (if (> G19742 G19743) '() (begin (hashtable-set! G19736 (integer->char G19742) '#t) (G19740 (+ G19742 '1) G19743)))))) G19740) (car G19738) (cdr G19738)) (void)))) G19734) G19736)) (make-eq-hashtable)))) (set! G19635 (lambda (G19746) (begin (if G19615 (void) (set! G19615 (G19633 G19585))) (hashtable-ref G19615 G19746 '#f)))) (set! G19637 (lambda (G19748) (begin (if G19609 (void) (set! G19609 (G19633 G19587))) (hashtable-ref G19609 G19748 '#f)))) (set! G19639 (lambda (G19750) (begin (if G19611 (void) (set! G19611 (G19633 G19589))) (hashtable-ref G19611 G19750 '#f)))) (set! G19641 (lambda (G19752) (begin (if G19613 (void) (set! G19613 (G19633 G19591))) (hashtable-ref G19613 G19752 '#f)))) (set! G19643 (lambda (G19754) (G19635 G19754))) (set! G19645 (lambda (G19756) ((lambda (G19758) (if (memv G19758 '(Lu Ll Lt Lm Lo Nl)) '#t (if (memv G19758 '(Mn Mc So)) (G19637 G19756) '#f))) (G19663 G19756)))) (set! G19647 (lambda (G19759) (eq? (G19663 G19759) 'Nd))) (set! G19649 (lambda (G19761) ((lambda (G19763) (if (eqv? G19763 'Lu) '#t (if (memv G19763 '(Nl So)) (G19639 G19761) '#f))) (G19663 G19761)))) (set! G19651 (lambda (G19764) ((lambda (G19766) (if (eqv? G19766 'Ll) '#t (if (memv G19766 '(Lm Mn Nl So)) (G19641 G19764) '#f))) (G19663 G19764)))) (set! G19653 (lambda (G19767) (eq? (G19663 G19767) 'Lt))) (set! G19655 (lambda (G19769) (begin (if G19601 (void) (set! G19601 (G19567 G19599))) ((lambda (G19771) (if G19771 (integer->char G19771) G19769)) (hashtable-ref G19601 (char->integer G19769)))))) (set! G19657 (lambda (G19773) (begin (if G19603 (void) (set! G19603 (G19567 G19597))) ((lambda (G19775) (if G19775 (integer->char G19775) G19773)) (hashtable-ref G19603 (char->integer G19773)))))) (set! G19659 (lambda (G19777) (begin (if G19605 (void) (set! G19605 (G19567 G19595))) ((lambda (G19779) (if G19779 (integer->char G19779) (G19655 G19777))) (hashtable-ref G19605 (char->integer G19777)))))) (set! G19661 (lambda (G19781) (if ((lambda (G19783) (if G19783 G19783 (begin '#f (char=? G19781 '#\ı)))) (char=? G19781 '#\İ)) G19781 (G19657 (G19655 G19781))))) (set! G19663 (lambda (G19785) (begin (if G19607 (void) ((lambda (G19787) (begin (for-each (lambda (G19789) (for-each (lambda (G19791) (if (number? G19791) (hashtable-set! G19787 (integer->char G19791) (car G19789)) (if (pair? G19791) ((letrec ((G19793 (lambda (G19795 G19796) (if (> G19795 G19796) '() (begin (hashtable-set! G19787 (integer->char G19795) (car G19789)) (G19793 (+ G19795 '1) G19796)))))) G19793) (car G19791) (cdr G19791)) (void)))) (cdr G19789))) G19593) (set! G19607 G19787))) (make-eq-hashtable))) (hashtable-ref G19607 G19785 'Cn)))) (set! G19665 (lambda G19799 (apply char=? (map G19659 G19799)))) (set! G19667 (lambda G19801 (apply char<? (map G19659 G19801)))) (set! G19669 (lambda G19803 (apply char>? (map G19659 G19803)))) (set! G19671 (lambda G19805 (apply char<=? (map G19659 G19805)))) (set! G19673 (lambda G19807 (apply char>=? (map G19659 G19807)))) (set! G19675 (lambda (G19809) (begin (if G19617 (void) (set! G19617 (G19567 G19583))) (hashtable-ref G19617 (char->integer G19809) '#f)))) (set! G19677 (lambda (G19811) (begin (if G19619 (void) (set! G19619 (G19567 G19581))) (hashtable-ref G19619 (char->integer G19811) '#f)))) (set! G19679 (lambda (G19813) ((lambda (G19815) (call-with-values (lambda () (open-string-output-port)) (lambda (G19819 G19820) ((lambda (G19823 G19824) ((lambda (G19827) (if (string=? G19813 G19827) G19813 G19827)) ((letrec ((G19829 (lambda (G19831 G19832 G19833) (if (eof-object? G19831) (G19823) (if (if ((lambda (G19837) (if G19837 G19837 (begin '#f (eof-object? G19833)))) (G19643 G19833)) (if (not (G19643 G19832)) (begin '#f ((lambda (G19839) (if G19839 G19839 (begin '#f (char=? G19831 '#\σ)))) (char=? G19831 '#\Σ))) '#f) '#f) (begin (display '#\ς G19824) (G19829 (read-char G19815) G19831 (lookahead-char G19815))) ((lambda (G19841) (if G19841 ((lambda (G19843) (begin (for-each (lambda (G19845) (display (G19657 (integer->char G19845)) G19824)) G19843) (G19829 (read-char G19815) G19831 (lookahead-char G19815)))) G19841) (begin (display (G19657 G19831) G19824) (G19829 (read-char G19815) G19831 (lookahead-char G19815))))) (G19677 G19831))))))) G19829) (read-char G19815) '#\space '#\space))) G19820 G19819)))) (open-string-input-port G19813)))) (set! G19681 (lambda (G19847) ((lambda (G19849) (call-with-values (lambda () (open-string-output-port)) (lambda (G19853 G19854) ((lambda (G19857 G19858) ((lambda (G19861) (if (string=? G19847 G19861) G19847 G19861)) ((letrec ((G19863 (lambda (G19865) (if (eof-object? G19865) (G19857) ((lambda (G19867) (if G19867 ((lambda (G19869) (begin (for-each (lambda (G19871) (display (G19655 (integer->char G19871)) G19858)) G19869) (G19863 (read-char G19849)))) G19867) (begin (display (G19655 G19865) G19858) (G19863 (read-char G19849))))) (G19675 G19865)))))) G19863) (read-char G19849)))) G19854 G19853)))) (open-string-input-port G19847)))) (set! G19683 (lambda (G19873) ((lambda (G19875) (call-with-values (lambda () (open-string-output-port)) (lambda (G19879 G19880) ((lambda (G19883 G19884) ((lambda (G19887) (if (string=? G19873 G19887) G19873 G19887)) ((letrec ((G19889 (lambda (G19891) (if (eof-object? G19891) (G19883) ((lambda (G19893) (if G19893 ((lambda (G19895) (begin (for-each (lambda (G19897) (display (G19661 (integer->char G19897)) G19884)) G19895) (G19889 (read-char G19875)))) G19893) (begin (display (G19661 G19891) G19884) (G19889 (read-char G19875))))) (G19631 G19891)))))) G19889) (read-char G19875)))) G19880 G19879)))) (open-string-input-port G19873)))) (set! G19685 (lambda (G19899) ((lambda (G19901) (call-with-values (lambda () (open-string-output-port)) (lambda (G19905 G19906) ((lambda (G19909 G19910) (letrec ((G19913 (lambda () ((letrec ((G19919 (lambda (G19921) (if (eof-object? G19921) (G19909) ((lambda (G19923) (if (memv G19923 '(Ll Lu Lt)) (begin (display (G19659 G19921) G19910) (G19914)) (begin (display G19921 G19910) (G19919 (read-char G19901))))) (G19663 G19921)))))) G19919) (read-char G19901)))) (G19914 (lambda () ((letrec ((G19924 (lambda (G19926) (if (eof-object? G19926) (G19909) ((lambda (G19928) (if (memv G19928 '(Ll Lu Lt)) (begin (display (G19657 G19926) G19910) (G19924 (read-char G19901))) (if (memv G19928 '(Po Pf)) ((lambda (G19929) (if (memv G19929 '(#\' #\: #\· #\״ #\’ #\‧)) (begin (display G19926 G19910) (G19924 (read-char G19901))) (begin (display G19926 G19910) (G19913)))) G19926) (begin (display G19926 G19910) (G19913))))) (G19663 G19926)))))) G19924) (read-char G19901))))) ((lambda (G19917) (if (string=? G19899 G19917) G19899 G19917)) (G19913)))) G19906 G19905)))) (open-string-input-port G19899)))) (set! G19687 (lambda (G19930) ((lambda (G19933 G19935) (begin (set! G19933 (lambda (G19976 G19977) (string->symbol (format '"x~d$~d" G19976 G19977)))) (set! G19935 (lambda (G19972 G19973) (hashtable-ref G19629 (G19933 (char->integer G19972) (char->integer G19973)) '#f))) (begin (if G19629 (void) ((lambda (G19936) (begin (for-each (lambda (G19938) (hashtable-set! G19936 G19938 '#t)) G19571) ((lambda (G19940) (begin (for-each (lambda (G19942) (if (if (= (length (cdr G19942)) '2) (begin '#f (not (hashtable-ref G19936 (cadr G19942)))) '#f) (hashtable-set! G19940 (apply G19933 (cdr G19942)) (integer->char (car G19942))) '())) G19577) (set! G19629 G19940))) (make-eq-hashtable)))) (make-eq-hashtable))) ((lambda (G19944) ((lambda (G19946) ((lambda (G19948) ((lambda () ((letrec ((G19950 (lambda (G19952 G19953 G19954 G19955 G19956) (if (>= G19952 G19944) (substring G19930 '0 G19956) ((lambda (G19962) ((lambda (G19964) ((lambda () ((lambda (G19966) (if G19966 ((lambda (G19968) (begin (string-set! G19930 G19955 G19968) (G19950 (+ G19952 '1) G19968 (G19707 G19968) G19955 G19956))) G19966) (begin (string-set! G19930 G19956 G19962) (if (= G19964 '0) (G19950 (+ G19952 '1) G19962 G19964 G19956 (+ G19956 '1)) (G19950 (+ G19952 '1) G19953 G19964 G19955 (+ G19956 '1)))))) (if ((lambda (G19970) (if G19970 G19970 (begin '#f (< G19954 G19964)))) (= G19954 '0)) (begin '#f (G19935 G19953 G19962)) '#f))))) (G19707 G19962))) (string-ref G19930 G19952)))))) G19950) '1 G19946 G19948 '0 '1)))) (if (zero? (G19707 G19946)) '0 '256))) (string-ref G19930 '0))) (string-length G19930))))) '#f '#f))) (set! G19689 (lambda G19980 (apply string=? (map G19683 G19980)))) (set! G19691 (lambda G19982 (apply string<? (map G19683 G19982)))) (set! G19693 (lambda G19984 (apply string>? (map G19683 G19984)))) (set! G19695 (lambda G19986 (apply string<=? (map G19683 G19986)))) (set! G19697 (lambda G19988 (apply string>=? (map G19683 G19988)))) (set! G19699 (lambda (G19990) (begin (if G19623 (void) (set! G19623 (G19567 G19577))) (hashtable-ref G19623 (char->integer G19990) '#f)))) (set! G19701 (lambda (G19992 G19993) ((lambda (G19996) (if G19996 ((lambda (G19998) (for-each (lambda (G20000) (G19701 (integer->char G20000) G19993)) G19998)) G19996) (display G19992 G19993))) (G19699 G19992)))) (set! G19703 (lambda (G20002) (begin (if G19625 (void) (set! G19625 (G19567 G19573))) (hashtable-ref G19625 (char->integer G20002) '#f)))) (set! G19705 (lambda (G20004 G20005) ((lambda (G20008) (if G20008 ((lambda (G20010) (for-each (lambda (G20012) (G19705 (integer->char G20012) G20005)) G20010)) G20008) ((lambda (G20014) (if G20014 ((lambda (G20016) (for-each (lambda (G20018) (G19705 (integer->char G20018) G20005)) G20016)) G20014) (display G20004 G20005))) (G19699 G20004)))) (G19703 G20004)))) (set! G19707 (lambda (G20020) (begin (if G19627 (void) ((lambda (G20022) (begin (for-each (lambda (G20024) (for-each (lambda (G20026) (hashtable-set! G20022 G20026 (car G20024))) (cdr G20024))) G19575) (set! G19627 G20022))) (make-eq-hashtable))) (hashtable-ref G19627 (char->integer G20020) '0)))) (set! G19709 (lambda (G20028) ((lambda (G20031) (begin (set! G20031 (lambda (G20056 G20057) ((letrec ((G20060 (lambda (G20062) (if (= G20057 G20062) G20062 (if (zero? (G19707 (string-ref G20028 G20062))) G20062 (G20060 (+ G20062 '1))))))) G20060) G20056))) ((lambda (G20032) (call-with-values (lambda () (open-string-output-port)) (lambda (G20036 G20037) ((lambda (G20040 G20041) ((letrec ((G20044 (lambda (G20046) (if (= G20046 G20032) (G20040) (begin (display (string-ref G20028 G20046) G20041) ((lambda (G20048) (begin (if (> (- G20048 G20046) '1) (for-each (lambda (G20050) (display G20050 G20041)) (string->list (G19711 (lambda (G20052 G20053) (< (G19707 G20052) (G19707 G20053))) (substring G20028 (+ G20046 '1) G20048)))) (void)) (G20044 G20048))) (G20031 (+ G20046 '1) G20032))))))) G20044) '0)) G20037 G20036)))) (string-length G20028)))) '#f))) (set! G19711 (lambda (G20064 G20065) ((lambda (G20068) ((letrec ((G20070 (lambda (G20072) (if (= G20072 (- G20068 '1)) G20065 ((letrec ((G20074 (lambda (G20076) (if (= G20072 G20076) (G20070 (+ G20072 '1)) (begin (if (G20064 (string-ref G20065 G20076) (string-ref G20065 (- G20076 '1))) ((lambda (G20078) (begin (string-set! G20065 G20076 (string-ref G20065 (- G20076 '1))) (string-set! G20065 (- G20076 '1) G20078))) (string-ref G20065 G20076)) (void)) (G20074 (- G20076 '1))))))) G20074) (- G20068 '1)))))) G20070) '0)) (string-length G20065)))) (set! G19713 (lambda (G20080) ((lambda (G20082) (call-with-values (lambda () (open-string-output-port)) (lambda (G20086 G20087) ((lambda (G20090 G20091) ((lambda (G20094) (if (string=? G20080 G20094) G20080 G20094)) ((letrec ((G20096 (lambda (G20098) (if (eof-object? G20098) (G19709 (G20090)) (begin (G19701 G20098 G20091) (G20096 (read-char G20082))))))) G20096) (read-char G20082)))) G20087 G20086)))) (open-string-input-port G20080)))) (set! G19715 (lambda (G20100) ((lambda (G20102) (call-with-values (lambda () (open-string-output-port)) (lambda (G20106 G20107) ((lambda (G20110 G20111) ((lambda (G20114) (if (string=? G20100 G20114) G20100 G20114)) ((letrec ((G20116 (lambda (G20118) (if (eof-object? G20118) (G19709 (G20110)) (begin (G19705 G20118 G20111) (G20116 (read-char G20102))))))) G20116) (read-char G20102)))) G20107 G20106)))) (open-string-input-port G20100)))) (set! G19717 (lambda (G20120) (G19687 (G19713 G20120)))) (set! G19719 (lambda (G20122) (G19687 (G19715 G20122)))) (begin (set! G20200 G19719) (set! G20199 G19717) (set! G20198 G19715) (set! G20197 G19713) (set! G20196 G19711) (set! G20195 G19709) (set! G20194 G19707) (set! G20193 G19705) (set! G20192 G19703) (set! G20191 G19701) (set! G20190 G19699) (set! G20189 G19697) (set! G20188 G19695) (set! G20187 G19693) (set! G20186 G19691) (set! G20185 G19689) (set! G20184 G19687) (set! G20183 G19685) (set! G20182 G19683) (set! G20181 G19681) (set! G20180 G19679) (set! G20179 G19677) (set! G20178 G19675) (set! G20177 G19673) (set! G20176 G19671) (set! G20175 G19669) (set! G20174 G19667) (set! G20173 G19665) (set! G20172 G19663) (set! G20171 G19661) (set! G20170 G19659) (set! G20169 G19657) (set! G20168 G19655) (set! G20167 G19653) (set! G20166 G19651) (set! G20165 G19649) (set! G20164 G19647) (set! G20163 G19645) (set! G20162 G19643) (set! G20161 G19641) (set! G20160 G19639) (set! G20159 G19637) (set! G20158 G19635) (set! G20157 G19633) (set! G20156 G19631) (set! G20155 G19629) (set! G20154 G19627) (set! G20153 G19625) (set! G20152 G19623) (set! G20151 G19621) (set! G20150 G19619) (set! G20149 G19617) (set! G20148 G19615) (set! G20147 G19613) (set! G20146 G19611) (set! G20145 G19609) (set! G20144 G19607) (set! G20143 G19605) (set! G20142 G19603) (set! G20141 G19601) (set! G20140 G19599) (set! G20139 G19597) (set! G20138 G19595) (set! G20137 G19593) (set! G20136 G19591) (set! G20135 G19589) (set! G20134 G19587) (set! G20133 G19585) (set! G20132 G19583) (set! G20131 G19581) (set! G20130 G19579) (set! G20129 G19577) (set! G20128 G19575) (set! G20127 G19573) (set! G20126 G19571) (set! G20125 G19569) (set! G20124 G19567)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
(begin (G10538 (lambda (G21102) ((lambda (G21104) (if G21104 (cdr G21104) '#f)) (assq G21102 '((syntax-error . G18808) (syntax-dispatch . G18705) (load . G20324) (interaction-environment . G18817) (string-upcase . G20181) (string-titlecase . G20183) (string-normalize-nfkd . G20198) (string-normalize-nfkc . G20200) (string-normalize-nfd . G20197) (string-normalize-nfc . G20199) (string-foldcase . G20182) (string-downcase . G20180) (string-ci>? . G20187) (string-ci>=? . G20189) (string-ci=? . G20185) (string-ci<? . G20186) (string-ci<=? . G20188) (char-whitespace? . G20162) (char-upper-case? . G20165) (char-title-case? . G20167) (char-numeric? . G20164) (char-lower-case? . G20166) (char-general-category . G20172) (char-upcase . G20168) (char-titlecase . G20170) (char-foldcase . G20171) (char-downcase . G20169) (char-ci>? . G20175) (char-ci>=? . G20177) (char-ci=? . G20173) (char-ci<? . G20174) (char-ci<=? . G20176) (char-alphabetic? . G20163) (make-variable-transformer . G18641) (identifier? . G18812) (generate-temporaries . G18804) (free-identifier=? . G18805) (syntax->datum . G18814) (datum->syntax . G18813) (bound-identifier=? . G18806) (make-i/o-write-error . G19501) (make-i/o-read-error . G19495) (make-i/o-port-error . G19547) (make-i/o-invalid-position-error . G19507) (make-i/o-filename-error . G19515) (make-i/o-file-protection-error . G19523) (make-i/o-file-is-read-only-error . G19529) (make-i/o-file-does-not-exist-error . G19541) (make-i/o-file-already-exists-error . G19535) (make-i/o-error . G19489) (make-i/o-encoding-error . G19561) (make-i/o-decoding-error . G19555) (i/o-write-error? . G19502) (i/o-read-error? . G19496) (i/o-port-error? . G19549) (i/o-invalid-position-error? . G19509) (i/o-filename-error? . G19517) (i/o-file-protection-error? . G19524) (i/o-file-is-read-only-error? . G19530) (i/o-file-does-not-exist-error? . G19542) (i/o-file-already-exists-error? . G19536) (i/o-error? . G19490) (i/o-error-port . G19550) (i/o-error-filename . G19518) (i/o-encoding-error? . G19563) (i/o-encoding-error-char . G19564) (i/o-decoding-error? . G19556) (scheme-report-environment . G18795) (null-environment . G18794) (command-line . G20321) (eval . G18797) (environment . G18793) (who-condition? . G19188) (warning? . G19149) (violation? . G19167) (undefined-violation? . G19223) (syntax-violation? . G19215) (syntax-violation-subform . G19217) (syntax-violation-form . G19216) (syntax-violation . G18811) (serious-condition? . G19155) (non-continuable-violation? . G19195) (message-condition? . G19142) (make-who-condition . G19186) (make-warning . G19148) (make-violation . G19166) (make-undefined-violation . G19222) (make-syntax-violation . G19212) (make-serious-condition . G19154) (make-non-continuable-violation . G19194) (make-message-condition . G19140) (make-lexical-violation . G19206) (make-irritants-condition . G19178) (make-implementation-restriction-violation . G19200) (make-error . G19160) (make-assertion-violation . G19172) (lexical-violation? . G19207) (irritants-condition? . G19180) (implementation-restriction-violation? . G19201) (error? . G19161) (condition-who . G19189) (condition-message . G19143) (condition-irritants . G19181) (assertion-violation? . G19173)))))) (G11111 'G21059 '(ikarus interaction) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11111 'G21060 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G20380) (unquote . G20379) (delay . G20372) (or . G20370) (and . G20369) (do . G20368) (cond . G20367) (let* . G20366) (let . G20365) (quasiquote . G20360) (syntax-rules . G20359) (case . G20354) (if . G20350) (letrec . G20348) (lambda . G20345) (quote . G20342) (letrec-syntax . G20340) (let-syntax . G20339) (set! . G20338) (begin . G20336) (define-syntax . G20334) (define . G20333)) '() values values '#f '#f '#t '#f) (G11111 'G21061 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G19692) (string-ci>=? . G19696) (string-ci=? . G19688) (string-ci<? . G19690) (string-ci<=? . G19694) (char-whitespace? . G19642) (char-upper-case? . G19648) (char-numeric? . G19646) (char-lower-case? . G19650) (char-upcase . G19654) (char-downcase . G19656) (char-ci>? . G19668) (char-ci>=? . G19672) (char-ci=? . G19664) (char-ci<? . G19666) (char-ci<=? . G19670) (char-alphabetic? . G19644) (call-with-output-file . G20897) (call-with-input-file . G20896) (write-char . G20895) (write . G20894) (with-output-to-file . G20893) (with-input-from-file . G20892) (read-char . G20891) (read . G20890) (peek-char . G20889) (open-output-file . G20888) (open-input-file . G20887) (newline . G20886) (display . G20885) (close-output-port . G20884) (close-input-port . G20883) (eof-object . G20881) (current-output-port . G20879) (current-input-port . G20878) (output-port? . G20877) (input-port? . G20876) (scheme-report-environment . G12394) (quotient . G20818) (null-environment . G12392) (remainder . G20817) (modulo . G20816) (inexact->exact . G20815) (force . G20814) (exact->inexact . G20813) (string-fill! . G20811) (string-set! . G20810) (set-cdr! . G20809) (set-car! . G20808) (memv . G20802) (memq . G20801) (member . G20799) (assv . G20791) (assq . G20790) (assoc . G20788) (eval . G12398) (zero? . G20591) (vector? . G20590) (vector-set! . G20589) (vector-ref . G20588) (vector-length . G20586) (vector-fill! . G20584) (vector->list . G20583) (vector . G20582) (values . G20581) (truncate . G20580) (tan . G20579) (symbol? . G20578) (symbol->string . G20576) (substring . G20575) (string? . G20574) (string>? . G20573) (string>=? . G20572) (string=? . G20571) (string<? . G20570) (string<=? . G20569) (string-ref . G20568) (string-length . G20567) (string-copy . G20565) (string-append . G20564) (string->symbol . G20563) (string->number . G20562) (string->list . G20561) (string . G20560) (sqrt . G20559) (sin . G20558) (round . G20557) (reverse . G20556) (real? . G20555) (real-part . G20553) (rationalize . G20552) (rational? . G20551) (procedure? . G20549) (positive? . G20548) (pair? . G20547) (odd? . G20546) (numerator . G20545) (number? . G20544) (number->string . G20543) (not . G20541) (negative? . G20540) (min . G20538) (max . G20537) (map . G20536) (make-vector . G20535) (make-string . G20534) (make-rectangular . G20533) (make-polar . G20532) (magnitude . G20531) (log . G20530) (list? . G20529) (list-tail . G20528) (list-ref . G20527) (list->vector . G20526) (list->string . G20525) (list . G20524) (length . G20523) (lcm . G20522) (integer? . G20521) (integer->char . G20519) (inexact? . G20517) (imag-part . G20515) (gcd . G20514) (for-each . G20513) (floor . G20512) (expt . G20510) (exp . G20509) (exact? . G20508) (even? . G20505) (eqv? . G20503) (equal? . G20502) (eq? . G20501) (dynamic-wind . G20500) (denominator . G20493) (cos . G20492) (cons . G20491) (complex? . G20490) (char? . G20489) (char>? . G20488) (char>=? . G20487) (char=? . G20486) (char<? . G20485) (char<=? . G20484) (char->integer . G20483) (ceiling . G20482) (call-with-values . G20481) (call-with-current-continuation . G20479) (cddddr . G20478) (cdddar . G20477) (cddadr . G20476) (cddaar . G20475) (cdaddr . G20474) (cdadar . G20473) (cdaadr . G20472) (cdaaar . G20471) (cadddr . G20470) (caddar . G20469) (cadadr . G20468) (cadaar . G20467) (caaddr . G20466) (caadar . G20465) (caaadr . G20464) (caaaar . G20463) (cdddr . G20462) (cddar . G20461) (cdadr . G20460) (cdaar . G20459) (caddr . G20458) (cadar . G20457) (caadr . G20456) (caaar . G20455) (cddr . G20454) (cdar . G20453) (cadr . G20452) (caar . G20451) (cdr . G20450) (car . G20449) (boolean? . G20448) (atan . G20446) (asin . G20444) (apply . G20443) (append . G20442) (angle . G20441) (acos . G20440) (abs . G20439) (/ . G20438) (* . G20437) (- . G20436) (+ . G20435) (>= . G20434) (> . G20433) (= . G20432) (<= . G20431) (< . G20430) (unquote-splicing . G20380) (unquote . G20379) (delay . G20372) (or . G20370) (and . G20369) (do . G20368) (cond . G20367) (let* . G20366) (let . G20365) (quasiquote . G20360) (syntax-rules . G20359) (case . G20354) (if . G20350) (letrec . G20348) (lambda . G20345) (quote . G20342) (letrec-syntax . G20340) (let-syntax . G20339) (set! . G20338) (begin . G20336) (define-syntax . G20334) (define . G20333)) '() values values '#f '#f '#t '#f) (G11111 'G21062 '(psyntax modules) '() '() '() '() '((module . G20335)) '() values values '#f '#f '#t '#f) (G11111 'G21063 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11111 'G21064 '(rnrs) '(6) '() '() '() '((regexp? . G20995) (string-upcase . G19680) (string-titlecase . G19684) (string-normalize-nfkd . G19714) (string-normalize-nfkc . G19718) (string-normalize-nfd . G19712) (string-normalize-nfc . G19716) (string-foldcase . G19682) (string-downcase . G19678) (string-ci>? . G19692) (string-ci>=? . G19696) (string-ci=? . G19688) (string-ci<? . G19690) (string-ci<=? . G19694) (char-whitespace? . G19642) (char-upper-case? . G19648) (char-title-case? . G19652) (char-numeric? . G19646) (char-lower-case? . G19650) (char-general-category . G19662) (char-upcase . G19654) (char-titlecase . G19658) (char-foldcase . G19660) (char-downcase . G19656) (char-ci>? . G19668) (char-ci>=? . G19672) (char-ci=? . G19664) (char-ci<? . G19666) (char-ci<=? . G19670) (char-alphabetic? . G19644) (make-variable-transformer . G11679) (identifier? . G12428) (generate-temporaries . G12412) (free-identifier=? . G12414) (syntax->datum . G12432) (datum->syntax . G12430) (bound-identifier=? . G12416) (record-type-descriptor? . G20940) (record-predicate . G20939) (record-mutator . G20938) (record-constructor . G20937) (record-accessor . G20936) (make-record-type-descriptor . G20935) (make-record-constructor-descriptor . G20934) (record? . G20933) (record-type-uid . G20932) (record-type-sealed? . G20931) (record-type-parent . G20930) (record-type-opaque? . G20929) (record-type-name . G20928) (record-type-generative? . G20927) (record-type-field-names . G20926) (record-rtd . G20925) (record-field-mutable? . G20924) (delete-file . G20923) (file-exists? . G20922) (vector-sort! . G20921) (vector-sort . G20920) (list-sort . G20919) (symbol-hash . G20918) (string-ci-hash . G20917) (string-hash . G20916) (equal-hash . G20915) (hashtable-equivalence-function . G20914) (make-hashtable . G20913) (hashtable-hash-function . G20912) (make-eqv-hashtable . G20911) (make-eq-hashtable . G20910) (hashtable? . G20909) (hashtable-update! . G20908) (hashtable-size . G20907) (hashtable-set! . G20906) (hashtable-ref . G20905) (hashtable-mutable? . G20904) (hashtable-keys . G20903) (hashtable-entries . G20902) (hashtable-delete! . G20901) (hashtable-copy . G20900) (hashtable-contains? . G20899) (hashtable-clear! . G20898) (call-with-output-file . G20897) (call-with-input-file . G20896) (write-char . G20895) (write . G20894) (with-output-to-file . G20893) (with-input-from-file . G20892) (read-char . G20891) (read . G20890) (peek-char . G20889) (open-output-file . G20888) (open-input-file . G20887) (newline . G20886) (display . G20885) (close-output-port . G20884) (close-input-port . G20883) (eof-object? . G20882) (eof-object . G20881) (current-error-port . G20880) (current-output-port . G20879) (current-input-port . G20878) (output-port? . G20877) (input-port? . G20876) (utf-8-codec . G20875) (utf-16-codec . G20874) (transcoder-error-handling-mode . G20873) (transcoder-eol-style . G20872) (transcoder-codec . G20871) (transcoded-port . G20870) (textual-port? . G20869) (string->bytevector . G20868) (standard-output-port . G20867) (standard-input-port . G20866) (standard-error-port . G20865) (set-port-position! . G20864) (put-u8 . G20863) (put-string . G20862) (put-datum . G20861) (put-char . G20860) (put-bytevector . G20859) (port? . G20858) (port-transcoder . G20857) (port-position . G20856) (port-has-set-port-position!? . G20855) (port-has-port-position? . G20854) (port-eof? . G20853) (output-port-buffer-mode . G20852) (open-string-output-port . G20851) (open-string-input-port . G20850) (open-file-output-port . G20849) (open-file-input/output-port . G20848) (open-file-input-port . G20847) (open-bytevector-output-port . G20846) (open-bytevector-input-port . G20845) (native-transcoder . G20844) (native-eol-style . G20843) (make-transcoder . G20842) (latin-1-codec . G20841) (make-i/o-write-error . G19281) (make-i/o-read-error . G19261) (make-i/o-port-error . G19432) (make-i/o-invalid-position-error . G19302) (make-i/o-filename-error . G19327) (make-i/o-file-protection-error . G19351) (make-i/o-file-is-read-only-error . G19371) (make-i/o-file-does-not-exist-error . G19411) (make-i/o-file-already-exists-error . G19391) (make-i/o-error . G19241) (make-i/o-encoding-error . G19477) (make-i/o-decoding-error . G19456) (make-custom-textual-output-port . G20840) (make-custom-textual-input/output-port . G20839) (make-custom-textual-input-port . G20838) (make-custom-binary-output-port . G20837) (make-custom-binary-input/output-port . G20836) (make-custom-binary-input-port . G20835) (make-bytevector . G20834) (lookahead-u8 . G20833) (lookahead-char . G20832) (i/o-write-error? . G19283) (i/o-read-error? . G19263) (i/o-port-error? . G19436) (i/o-invalid-position-error? . G19306) (i/o-filename-error? . G19331) (i/o-file-protection-error? . G19353) (i/o-file-is-read-only-error? . G19373) (i/o-file-does-not-exist-error? . G19413) (i/o-file-already-exists-error? . G19393) (i/o-error? . G19243) (i/o-error-port . G19438) (i/o-error-filename . G19333) (i/o-encoding-error? . G19481) (i/o-encoding-error-char . G19483) (i/o-decoding-error? . G19458) (get-u8 . G20831) (get-string-n! . G20830) (get-string-n . G20829) (get-string-all . G20828) (get-line . G20827) (get-datum . G20826) (get-char . G20825) (get-bytevector-some . G20824) (get-bytevector-n! . G20823) (get-bytevector-n . G20822) (get-bytevector-all . G20821) (flush-output-port . G20820) (close-port . G20819) (exit . G20812) (command-line . G20206) (remove . G20807) (remv . G20806) (remp . G20805) (remq . G20804) (partition . G20803) (memv . G20802) (memq . G20801) (memp . G20800) (member . G20799) (exists . G20798) (for-all . G20797) (fold-right . G20796) (fold-left . G20795) (find . G20794) (filter . G20793) (cons* . G20792) (assv . G20791) (assq . G20790) (assp . G20789) (assoc . G20788) (call-with-string-output-port . G20787) (call-with-port . G20786) (call-with-bytevector-output-port . G20785) (bytevector->string . G20784) (buffer-mode? . G20783) (binary-port? . G20782) (with-exception-handler . G20781) (raise-continuable . G20780) (raise . G20779) (make-enumeration . G20778) (enum-set=? . G20777) (enum-set-universe . G20776) (enum-set-union . G20775) (enum-set-subset? . G20774) (enum-set-projection . G20773) (enum-set-member? . G20772) (enum-set-intersection . G20771) (enum-set-indexer . G20770) (enum-set-difference . G20769) (enum-set-constructor . G20768) (enum-set-complement . G20767) (enum-set->list . G20766) (who-condition? . G19015) (warning? . G18887) (violation? . G18947) (undefined-violation? . G19127) (syntax-violation? . G19103) (syntax-violation-subform . G19107) (syntax-violation-form . G19105) (syntax-violation . G12426) (simple-conditions . G20765) (serious-condition? . G18907) (non-continuable-violation? . G19037) (message-condition? . G18865) (make-who-condition . G19011) (make-warning . G18885) (make-violation . G18945) (make-undefined-violation . G19125) (make-syntax-violation . G19097) (make-serious-condition . G18905) (make-non-continuable-violation . G19035) (make-message-condition . G18861) (make-lexical-violation . G19075) (make-irritants-condition . G18986) (make-implementation-restriction-violation . G19055) (make-error . G18925) (make-assertion-violation . G18965) (lexical-violation? . G19077) (irritants-condition? . G18990) (implementation-restriction-violation? . G19057) (error? . G18927) (condition-who . G19017) (condition-predicate . G20764) (condition-message . G18867) (condition-irritants . G18992) (condition-accessor . G20763) (condition . G20762) (assertion-violation? . G18967) (condition? . G20761) (utf32->string . G20760) (utf16->string . G20759) (utf8->string . G20758) (uint-list->bytevector . G20757) (u8-list->bytevector . G20756) (string->utf8 . G20755) (string->utf32 . G20754) (string->utf16 . G20753) (sint-list->bytevector . G20752) (native-endianness . G20751) (bytevector? . G20750) (bytevector=? . G20749) (bytevector-uint-set! . G20748) (bytevector-uint-ref . G20747) (bytevector-u8-set! . G20746) (bytevector-u8-ref . G20745) (bytevector-u64-set! . G20744) (bytevector-u64-ref . G20743) (bytevector-u64-native-set! . G20742) (bytevector-u64-native-ref . G20741) (bytevector-u32-set! . G20740) (bytevector-u32-ref . G20739) (bytevector-u32-native-set! . G20738) (bytevector-u32-native-ref . G20737) (bytevector-u16-set! . G20736) (bytevector-u16-ref . G20735) (bytevector-u16-native-set! . G20734) (bytevector-u16-native-ref . G20733) (bytevector-sint-set! . G20732) (bytevector-sint-ref . G20731) (bytevector-s8-set! . G20730) (bytevector-s8-ref . G20729) (bytevector-s64-set! . G20728) (bytevector-s64-ref . G20727) (bytevector-s64-native-set! . G20726) (bytevector-s64-native-ref . G20725) (bytevector-s32-set! . G20724) (bytevector-s32-ref . G20723) (bytevector-s32-native-set! . G20722) (bytevector-s32-native-ref . G20721) (bytevector-s16-set! . G20720) (bytevector-s16-ref . G20719) (bytevector-s16-native-set! . G20718) (bytevector-s16-native-ref . G20717) (bytevector-length . G20716) (bytevector-ieee-single-ref . G20715) (bytevector-ieee-single-native-set! . G20714) (bytevector-ieee-single-native-ref . G20713) (bytevector-ieee-double-ref . G20712) (bytevector-ieee-double-native-set! . G20711) (bytevector-ieee-double-native-ref . G20710) (bytevector-fill! . G20709) (bytevector-copy! . G20708) (bytevector-copy . G20707) (bytevector->uint-list . G20706) (bytevector->u8-list . G20705) (bytevector->sint-list . G20704) (no-nans-violation? . G20703) (no-infinities-violation? . G20702) (make-no-nans-violation . G20701) (make-no-infinities-violation . G20700) (real->flonum . G20699) (flzero? . G20698) (fltruncate . G20697) (fltan . G20696) (flsqrt . G20695) (flsin . G20694) (flround . G20693) (flpositive? . G20692) (flonum? . G20691) (flodd? . G20690) (flnumerator . G20689) (flnegative? . G20688) (flnan? . G20687) (flmod0 . G20686) (flmod . G20685) (flmin . G20684) (flmax . G20683) (fllog . G20682) (flinteger? . G20681) (flinfinite? . G20680) (flfloor . G20679) (flfinite? . G20678) (flexpt . G20677) (flexp . G20676) (fleven? . G20675) (fldiv0-and-mod0 . G20674) (fldiv0 . G20673) (fldiv-and-mod . G20672) (fldiv . G20671) (fldenominator . G20670) (flcos . G20669) (flceiling . G20668) (flatan . G20667) (flasin . G20666) (flacos . G20665) (flabs . G20664) (fl>? . G20663) (fl>=? . G20662) (fl=? . G20661) (fl<? . G20660) (fl<=? . G20659) (fl/ . G20658) (fl- . G20657) (fl+ . G20656) (fl* . G20655) (fixnum->flonum . G20654) (fxzero? . G20653) (fxxor . G20652) (fxrotate-bit-field . G20651) (fxreverse-bit-field . G20650) (fxpositive? . G20649) (fxodd? . G20648) (fxnot . G20647) (fxnegative? . G20646) (fxmod0 . G20645) (fxmod . G20644) (fxmin . G20643) (fxmax . G20642) (fxlength . G20641) (fxior . G20640) (fxif . G20639) (fxfirst-bit-set . G20638) (fxeven? . G20637) (fxdiv0-and-mod0 . G20636) (fxdiv0 . G20635) (fxdiv-and-mod . G20634) (fxdiv . G20633) (fxcopy-bit-field . G20632) (fxcopy-bit . G20631) (fxbit-set? . G20630) (fxbit-field . G20629) (fxbit-count . G20628) (fxarithmetic-shift-right . G20627) (fxarithmetic-shift-left . G20626) (fxarithmetic-shift . G20625) (fxand . G20624) (fx>? . G20623) (fx>=? . G20622) (fx=? . G20621) (fx<? . G20620) (fx<=? . G20619) (fx-/carry . G20618) (fx- . G20617) (fx+/carry . G20616) (fx+ . G20615) (fx*/carry . G20614) (fx* . G20613) (greatest-fixnum . G20612) (least-fixnum . G20611) (fixnum-width . G20610) (fixnum? . G20609) (bitwise-rotate-bit-field . G20608) (bitwise-reverse-bit-field . G20607) (bitwise-length . G20606) (bitwise-if . G20605) (bitwise-first-bit-set . G20604) (bitwise-copy-bit-field . G20603) (bitwise-copy-bit . G20602) (bitwise-bit-set? . G20601) (bitwise-bit-field . G20600) (bitwise-bit-count . G20599) (bitwise-xor . G20598) (bitwise-ior . G20597) (bitwise-and . G20596) (bitwise-not . G20595) (bitwise-arithmetic-shift-right . G20594) (bitwise-arithmetic-shift-left . G20593) (bitwise-arithmetic-shift . G20592) (zero? . G20591) (vector? . G20590) (vector-set! . G20589) (vector-ref . G20588) (vector-map . G20587) (vector-length . G20586) (vector-for-each . G20585) (vector-fill! . G20584) (vector->list . G20583) (vector . G20582) (values . G20581) (truncate . G20580) (tan . G20579) (symbol? . G20578) (symbol=? . G20577) (symbol->string . G20576) (substring . G20575) (string? . G20574) (string>? . G20573) (string>=? . G20572) (string=? . G20571) (string<? . G20570) (string<=? . G20569) (string-ref . G20568) (string-length . G20567) (string-for-each . G20566) (string-copy . G20565) (string-append . G20564) (string->symbol . G20563) (string->number . G20562) (string->list . G20561) (string . G20560) (sqrt . G20559) (sin . G20558) (round . G20557) (reverse . G20556) (real? . G20555) (real-valued? . G20554) (real-part . G20553) (rationalize . G20552) (rational? . G20551) (rational-valued? . G20550) (procedure? . G20549) (positive? . G20548) (pair? . G20547) (odd? . G20546) (numerator . G20545) (number? . G20544) (number->string . G20543) (null? . G20542) (not . G20541) (negative? . G20540) (nan? . G20539) (min . G20538) (max . G20537) (map . G20536) (make-vector . G20535) (make-string . G20534) (make-rectangular . G20533) (make-polar . G20532) (magnitude . G20531) (log . G20530) (list? . G20529) (list-tail . G20528) (list-ref . G20527) (list->vector . G20526) (list->string . G20525) (list . G20524) (length . G20523) (lcm . G20522) (integer? . G20521) (integer-valued? . G20520) (integer->char . G20519) (infinite? . G20518) (inexact? . G20517) (inexact . G20516) (imag-part . G20515) (gcd . G20514) (for-each . G20513) (floor . G20512) (finite? . G20511) (expt . G20510) (exp . G20509) (exact? . G20508) (exact-integer-sqrt . G20507) (exact . G20506) (even? . G20505) (error . G20504) (eqv? . G20503) (equal? . G20502) (eq? . G20501) (dynamic-wind . G20500) (div0-and-mod0 . G20499) (mod0 . G20498) (div0 . G20497) (div-and-mod . G20496) (mod . G20495) (div . G20494) (denominator . G20493) (cos . G20492) (cons . G20491) (complex? . G20490) (char? . G20489) (char>? . G20488) (char>=? . G20487) (char=? . G20486) (char<? . G20485) (char<=? . G20484) (char->integer . G20483) (ceiling . G20482) (call-with-values . G20481) (call/cc . G20480) (call-with-current-continuation . G20479) (cddddr . G20478) (cdddar . G20477) (cddadr . G20476) (cddaar . G20475) (cdaddr . G20474) (cdadar . G20473) (cdaadr . G20472) (cdaaar . G20471) (cadddr . G20470) (caddar . G20469) (cadadr . G20468) (cadaar . G20467) (caaddr . G20466) (caadar . G20465) (caaadr . G20464) (caaaar . G20463) (cdddr . G20462) (cddar . G20461) (cdadr . G20460) (cdaar . G20459) (caddr . G20458) (cadar . G20457) (caadr . G20456) (caaar . G20455) (cddr . G20454) (cdar . G20453) (cadr . G20452) (caar . G20451) (cdr . G20450) (car . G20449) (boolean? . G20448) (boolean=? . G20447) (atan . G20446) (assertion-violation . G20445) (asin . G20444) (apply . G20443) (append . G20442) (angle . G20441) (acos . G20440) (abs . G20439) (/ . G20438) (* . G20437) (- . G20436) (+ . G20435) (>= . G20434) (> . G20433) (= . G20432) (<= . G20431) (< . G20430) (&no-nans . G20429) (&no-infinities . G20428) (&i/o-encoding . G20427) (&i/o-decoding . G20426) (&i/o-port . G20425) (&i/o-file-does-not-exist . G20424) (&i/o-file-already-exists . G20423) (&i/o-file-is-read-only . G20422) (&i/o-file-protection . G20421) (&i/o-filename . G20420) (&i/o-invalid-position . G20419) (&i/o-write . G20418) (&i/o-read . G20417) (&i/o . G20416) (&undefined . G20415) (&syntax . G20414) (&lexical . G20413) (&implementation-restriction . G20412) (&non-continuable . G20411) (&who . G20410) (&irritants . G20409) (&assertion . G20408) (&violation . G20407) (&error . G20406) (&serious . G20405) (&warning . G20404) (&message . G20403) (&condition . G20402) (define-condition-type . G20401) (define-enumeration . G20400) (define-record-type . G20399) (parent-rtd . G20398) (nongenerative . G20397) (opaque . G20396) (sealed . G20395) (protocol . G20394) (parent . G20393) (immutable . G20392) (mutable . G20391) (fields . G20390) (error-handling-mode . G20389) (file-options . G20388) (buffer-mode . G20387) (eol-style . G20386) (guard . G20385) (unsyntax-splicing . G20382) (unsyntax . G20381) (unquote-splicing . G20380) (unquote . G20379) (_ . G20378) (else . G20377) (=> . G20376) (... . G20375) (assert . G20374) (endianness . G20373) (or . G20370) (and . G20369) (do . G20368) (cond . G20367) (let* . G20366) (let . G20365) (let-values . G20364) (identifier-syntax . G20363) (with-syntax . G20362) (quasisyntax . G20361) (quasiquote . G20360) (syntax-rules . G20359) (record-constructor-descriptor . G20356) (record-type-descriptor . G20355) (case . G20354) (unless . G20352) (when . G20351) (if . G20350) (letrec* . G20349) (letrec . G20348) (case-lambda . G20346) (lambda . G20345) (syntax . G20344) (syntax-case . G20343) (quote . G20342) (letrec-syntax . G20340) (let-syntax . G20339) (set! . G20338) (begin . G20336) (define-syntax . G20334) (define . G20333)) '() values values '#f '#f '#t '#f) (G11111 'G21065 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G12394) (quotient . G20818) (null-environment . G12392) (remainder . G20817) (modulo . G20816) (inexact->exact . G20815) (force . G20814) (exact->inexact . G20813) (delay . G20372)) '() values values '#f '#f '#t '#f) (G11111 'G21066 '(rnrs control) '(6) '() '() '() '((do . G20368) (unless . G20352) (when . G20351) (case-lambda . G20346)) '() values values '#f '#f '#t '#f) (G11111 'G21067 '(rnrs eval) '(6) '() '() '() '((eval . G12398) (environment . G12390)) '() values values '#f '#f '#t '#f) (G11111 'G21068 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G20809) (set-car! . G20808)) '() values values '#f '#f '#t '#f) (G11111 'G21069 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G20811) (string-set! . G20810)) '() values values '#f '#f '#t '#f) (G11111 'G21070 '(rnrs programs) '(6) '() '() '() '((exit . G20812) (command-line . G20206)) '() values values '#f '#f '#t '#f) (G11111 'G21071 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G11679) (identifier? . G12428) (generate-temporaries . G12412) (free-identifier=? . G12414) (syntax->datum . G12432) (datum->syntax . G12430) (bound-identifier=? . G12416) (syntax-violation . G12426) (unsyntax-splicing . G20382) (unsyntax . G20381) (_ . G20378) (... . G20375) (with-syntax . G20362) (quasisyntax . G20361) (syntax . G20344) (syntax-case . G20343)) '() values values '#f '#f '#t '#f) (G11111 'G21072 '(rnrs files) '(6) '() '() '() '((delete-file . G20923) (file-exists? . G20922) (make-i/o-write-error . G19281) (make-i/o-read-error . G19261) (make-i/o-port-error . G19432) (make-i/o-invalid-position-error . G19302) (make-i/o-filename-error . G19327) (make-i/o-file-protection-error . G19351) (make-i/o-file-is-read-only-error . G19371) (make-i/o-file-does-not-exist-error . G19411) (make-i/o-file-already-exists-error . G19391) (make-i/o-error . G19241) (i/o-write-error? . G19283) (i/o-read-error? . G19263) (i/o-port-error? . G19436) (i/o-invalid-position-error? . G19306) (i/o-filename-error? . G19331) (i/o-file-protection-error? . G19353) (i/o-file-is-read-only-error? . G19373) (i/o-file-does-not-exist-error? . G19413) (i/o-file-already-exists-error? . G19393) (i/o-error? . G19243) (i/o-error-port . G19438) (i/o-error-filename . G19333) (&i/o-port . G20425) (&i/o-file-does-not-exist . G20424) (&i/o-file-already-exists . G20423) (&i/o-file-is-read-only . G20422) (&i/o-file-protection . G20421) (&i/o-filename . G20420) (&i/o-invalid-position . G20419) (&i/o-write . G20418) (&i/o-read . G20417) (&i/o . G20416)) '() values values '#f '#f '#t '#f) (G11111 'G21073 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G20921) (vector-sort . G20920) (list-sort . G20919)) '() values values '#f '#f '#t '#f) (G11111 'G21074 '(rnrs base) '(6) '() '() '() '((zero? . G20591) (vector? . G20590) (vector-set! . G20589) (vector-ref . G20588) (vector-map . G20587) (vector-length . G20586) (vector-for-each . G20585) (vector-fill! . G20584) (vector->list . G20583) (vector . G20582) (values . G20581) (truncate . G20580) (tan . G20579) (symbol? . G20578) (symbol=? . G20577) (symbol->string . G20576) (substring . G20575) (string? . G20574) (string>? . G20573) (string>=? . G20572) (string=? . G20571) (string<? . G20570) (string<=? . G20569) (string-ref . G20568) (string-length . G20567) (string-for-each . G20566) (string-copy . G20565) (string-append . G20564) (string->symbol . G20563) (string->number . G20562) (string->list . G20561) (string . G20560) (sqrt . G20559) (sin . G20558) (round . G20557) (reverse . G20556) (real? . G20555) (real-valued? . G20554) (real-part . G20553) (rationalize . G20552) (rational? . G20551) (rational-valued? . G20550) (procedure? . G20549) (positive? . G20548) (pair? . G20547) (odd? . G20546) (numerator . G20545) (number? . G20544) (number->string . G20543) (null? . G20542) (not . G20541) (negative? . G20540) (nan? . G20539) (min . G20538) (max . G20537) (map . G20536) (make-vector . G20535) (make-string . G20534) (make-rectangular . G20533) (make-polar . G20532) (magnitude . G20531) (log . G20530) (list? . G20529) (list-tail . G20528) (list-ref . G20527) (list->vector . G20526) (list->string . G20525) (list . G20524) (length . G20523) (lcm . G20522) (integer? . G20521) (integer-valued? . G20520) (integer->char . G20519) (infinite? . G20518) (inexact? . G20517) (inexact . G20516) (imag-part . G20515) (gcd . G20514) (for-each . G20513) (floor . G20512) (finite? . G20511) (expt . G20510) (exp . G20509) (exact? . G20508) (exact-integer-sqrt . G20507) (exact . G20506) (even? . G20505) (error . G20504) (eqv? . G20503) (equal? . G20502) (eq? . G20501) (dynamic-wind . G20500) (div0-and-mod0 . G20499) (mod0 . G20498) (div0 . G20497) (div-and-mod . G20496) (mod . G20495) (div . G20494) (denominator . G20493) (cos . G20492) (cons . G20491) (complex? . G20490) (char? . G20489) (char>? . G20488) (char>=? . G20487) (char=? . G20486) (char<? . G20485) (char<=? . G20484) (char->integer . G20483) (ceiling . G20482) (call-with-values . G20481) (call/cc . G20480) (call-with-current-continuation . G20479) (cddddr . G20478) (cdddar . G20477) (cddadr . G20476) (cddaar . G20475) (cdaddr . G20474) (cdadar . G20473) (cdaadr . G20472) (cdaaar . G20471) (cadddr . G20470) (caddar . G20469) (cadadr . G20468) (cadaar . G20467) (caaddr . G20466) (caadar . G20465) (caaadr . G20464) (caaaar . G20463) (cdddr . G20462) (cddar . G20461) (cdadr . G20460) (cdaar . G20459) (caddr . G20458) (cadar . G20457) (caadr . G20456) (caaar . G20455) (cddr . G20454) (cdar . G20453) (cadr . G20452) (caar . G20451) (cdr . G20450) (car . G20449) (boolean? . G20448) (boolean=? . G20447) (atan . G20446) (assertion-violation . G20445) (asin . G20444) (apply . G20443) (append . G20442) (angle . G20441) (acos . G20440) (abs . G20439) (/ . G20438) (* . G20437) (- . G20436) (+ . G20435) (>= . G20434) (> . G20433) (= . G20432) (<= . G20431) (< . G20430) (unquote-splicing . G20380) (unquote . G20379) (_ . G20378) (else . G20377) (=> . G20376) (... . G20375) (assert . G20374) (or . G20370) (and . G20369) (cond . G20367) (let* . G20366) (let . G20365) (let-values . G20364) (identifier-syntax . G20363) (quasiquote . G20360) (syntax-rules . G20359) (case . G20354) (if . G20350) (letrec* . G20349) (letrec . G20348) (lambda . G20345) (quote . G20342) (letrec-syntax . G20340) (let-syntax . G20339) (set! . G20338) (begin . G20336) (define-syntax . G20334) (define . G20333)) '() values values '#f '#f '#t '#f) (G11111 'G21075 '(rnrs lists) '(6) '() '() '() '((remove . G20807) (remv . G20806) (remp . G20805) (remq . G20804) (partition . G20803) (memv . G20802) (memq . G20801) (memp . G20800) (member . G20799) (exists . G20798) (for-all . G20797) (fold-right . G20796) (fold-left . G20795) (find . G20794) (filter . G20793) (cons* . G20792) (assv . G20791) (assq . G20790) (assp . G20789) (assoc . G20788)) '() values values '#f '#f '#t '#f) (G11111 'G21076 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G20897) (call-with-input-file . G20896) (write-char . G20895) (write . G20894) (with-output-to-file . G20893) (with-input-from-file . G20892) (read-char . G20891) (read . G20890) (peek-char . G20889) (open-output-file . G20888) (open-input-file . G20887) (newline . G20886) (display . G20885) (close-output-port . G20884) (close-input-port . G20883) (eof-object? . G20882) (eof-object . G20881) (current-error-port . G20880) (current-output-port . G20879) (current-input-port . G20878) (output-port? . G20877) (input-port? . G20876) (make-i/o-write-error . G19281) (make-i/o-read-error . G19261) (make-i/o-port-error . G19432) (make-i/o-invalid-position-error . G19302) (make-i/o-filename-error . G19327) (make-i/o-file-protection-error . G19351) (make-i/o-file-is-read-only-error . G19371) (make-i/o-file-does-not-exist-error . G19411) (make-i/o-file-already-exists-error . G19391) (make-i/o-error . G19241) (i/o-write-error? . G19283) (i/o-read-error? . G19263) (i/o-port-error? . G19436) (i/o-invalid-position-error? . G19306) (i/o-filename-error? . G19331) (i/o-file-protection-error? . G19353) (i/o-file-is-read-only-error? . G19373) (i/o-file-does-not-exist-error? . G19413) (i/o-file-already-exists-error? . G19393) (i/o-error? . G19243) (i/o-error-port . G19438) (i/o-error-filename . G19333) (&i/o-port . G20425) (&i/o-file-does-not-exist . G20424) (&i/o-file-already-exists . G20423) (&i/o-file-is-read-only . G20422) (&i/o-file-protection . G20421) (&i/o-filename . G20420) (&i/o-invalid-position . G20419) (&i/o-write . G20418) (&i/o-read . G20417) (&i/o . G20416)) '() values values '#f '#f '#t '#f) (G11111 'G21077 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G20834) (utf32->string . G20760) (utf16->string . G20759) (utf8->string . G20758) (uint-list->bytevector . G20757) (u8-list->bytevector . G20756) (string->utf8 . G20755) (string->utf32 . G20754) (string->utf16 . G20753) (sint-list->bytevector . G20752) (native-endianness . G20751) (bytevector? . G20750) (bytevector=? . G20749) (bytevector-uint-set! . G20748) (bytevector-uint-ref . G20747) (bytevector-u8-set! . G20746) (bytevector-u8-ref . G20745) (bytevector-u64-set! . G20744) (bytevector-u64-ref . G20743) (bytevector-u64-native-set! . G20742) (bytevector-u64-native-ref . G20741) (bytevector-u32-set! . G20740) (bytevector-u32-ref . G20739) (bytevector-u32-native-set! . G20738) (bytevector-u32-native-ref . G20737) (bytevector-u16-set! . G20736) (bytevector-u16-ref . G20735) (bytevector-u16-native-set! . G20734) (bytevector-u16-native-ref . G20733) (bytevector-sint-set! . G20732) (bytevector-sint-ref . G20731) (bytevector-s8-set! . G20730) (bytevector-s8-ref . G20729) (bytevector-s64-set! . G20728) (bytevector-s64-ref . G20727) (bytevector-s64-native-set! . G20726) (bytevector-s64-native-ref . G20725) (bytevector-s32-set! . G20724) (bytevector-s32-ref . G20723) (bytevector-s32-native-set! . G20722) (bytevector-s32-native-ref . G20721) (bytevector-s16-set! . G20720) (bytevector-s16-ref . G20719) (bytevector-s16-native-set! . G20718) (bytevector-s16-native-ref . G20717) (bytevector-length . G20716) (bytevector-ieee-single-ref . G20715) (bytevector-ieee-single-native-set! . G20714) (bytevector-ieee-single-native-ref . G20713) (bytevector-ieee-double-ref . G20712) (bytevector-ieee-double-native-set! . G20711) (bytevector-ieee-double-native-ref . G20710) (bytevector-fill! . G20709) (bytevector-copy! . G20708) (bytevector-copy . G20707) (bytevector->uint-list . G20706) (bytevector->u8-list . G20705) (bytevector->sint-list . G20704) (endianness . G20373)) '() values values '#f '#f '#t '#f) (G11111 'G21078 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G19680) (string-titlecase . G19684) (string-normalize-nfkd . G19714) (string-normalize-nfkc . G19718) (string-normalize-nfd . G19712) (string-normalize-nfc . G19716) (string-foldcase . G19682) (string-downcase . G19678) (string-ci>? . G19692) (string-ci>=? . G19696) (string-ci=? . G19688) (string-ci<? . G19690) (string-ci<=? . G19694) (char-whitespace? . G19642) (char-upper-case? . G19648) (char-title-case? . G19652) (char-numeric? . G19646) (char-lower-case? . G19650) (char-general-category . G19662) (char-upcase . G19654) (char-titlecase . G19658) (char-foldcase . G19660) (char-downcase . G19656) (char-ci>? . G19668) (char-ci>=? . G19672) (char-ci=? . G19664) (char-ci<? . G19666) (char-ci<=? . G19670) (char-alphabetic? . G19644)) '() values values '#f '#f '#t '#f) (G11111 'G21079 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G20781) (raise-continuable . G20780) (raise . G20779) (guard . G20385) (else . G20377) (=> . G20376)) '() values values '#f '#f '#t '#f) (G11111 'G21080 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G20608) (bitwise-reverse-bit-field . G20607) (bitwise-length . G20606) (bitwise-if . G20605) (bitwise-first-bit-set . G20604) (bitwise-copy-bit-field . G20603) (bitwise-copy-bit . G20602) (bitwise-bit-set? . G20601) (bitwise-bit-field . G20600) (bitwise-bit-count . G20599) (bitwise-xor . G20598) (bitwise-ior . G20597) (bitwise-and . G20596) (bitwise-not . G20595) (bitwise-arithmetic-shift-right . G20594) (bitwise-arithmetic-shift-left . G20593) (bitwise-arithmetic-shift . G20592)) '() values values '#f '#f '#t '#f) (G11111 'G21081 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G20653) (fxxor . G20652) (fxrotate-bit-field . G20651) (fxreverse-bit-field . G20650) (fxpositive? . G20649) (fxodd? . G20648) (fxnot . G20647) (fxnegative? . G20646) (fxmod0 . G20645) (fxmod . G20644) (fxmin . G20643) (fxmax . G20642) (fxlength . G20641) (fxior . G20640) (fxif . G20639) (fxfirst-bit-set . G20638) (fxeven? . G20637) (fxdiv0-and-mod0 . G20636) (fxdiv0 . G20635) (fxdiv-and-mod . G20634) (fxdiv . G20633) (fxcopy-bit-field . G20632) (fxcopy-bit . G20631) (fxbit-set? . G20630) (fxbit-field . G20629) (fxbit-count . G20628) (fxarithmetic-shift-right . G20627) (fxarithmetic-shift-left . G20626) (fxarithmetic-shift . G20625) (fxand . G20624) (fx>? . G20623) (fx>=? . G20622) (fx=? . G20621) (fx<? . G20620) (fx<=? . G20619) (fx-/carry . G20618) (fx- . G20617) (fx+/carry . G20616) (fx+ . G20615) (fx*/carry . G20614) (fx* . G20613) (greatest-fixnum . G20612) (least-fixnum . G20611) (fixnum-width . G20610) (fixnum? . G20609)) '() values values '#f '#f '#t '#f) (G11111 'G21082 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G20703) (no-infinities-violation? . G20702) (make-no-nans-violation . G20701) (make-no-infinities-violation . G20700) (real->flonum . G20699) (flzero? . G20698) (fltruncate . G20697) (fltan . G20696) (flsqrt . G20695) (flsin . G20694) (flround . G20693) (flpositive? . G20692) (flonum? . G20691) (flodd? . G20690) (flnumerator . G20689) (flnegative? . G20688) (flnan? . G20687) (flmod0 . G20686) (flmod . G20685) (flmin . G20684) (flmax . G20683) (fllog . G20682) (flinteger? . G20681) (flinfinite? . G20680) (flfloor . G20679) (flfinite? . G20678) (flexpt . G20677) (flexp . G20676) (fleven? . G20675) (fldiv0-and-mod0 . G20674) (fldiv0 . G20673) (fldiv-and-mod . G20672) (fldiv . G20671) (fldenominator . G20670) (flcos . G20669) (flceiling . G20668) (flatan . G20667) (flasin . G20666) (flacos . G20665) (flabs . G20664) (fl>? . G20663) (fl>=? . G20662) (fl=? . G20661) (fl<? . G20660) (fl<=? . G20659) (fl/ . G20658) (fl- . G20657) (fl+ . G20656) (fl* . G20655) (fixnum->flonum . G20654) (&no-nans . G20429) (&no-infinities . G20428)) '() values values '#f '#f '#t '#f) (G11111 'G21083 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G20918) (string-ci-hash . G20917) (string-hash . G20916) (equal-hash . G20915) (hashtable-equivalence-function . G20914) (make-hashtable . G20913) (hashtable-hash-function . G20912) (make-eqv-hashtable . G20911) (make-eq-hashtable . G20910) (hashtable? . G20909) (hashtable-update! . G20908) (hashtable-size . G20907) (hashtable-set! . G20906) (hashtable-ref . G20905) (hashtable-mutable? . G20904) (hashtable-keys . G20903) (hashtable-entries . G20902) (hashtable-delete! . G20901) (hashtable-copy . G20900) (hashtable-contains? . G20899) (hashtable-clear! . G20898)) '() values values '#f '#f '#t '#f) (G11111 'G21084 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G20882) (eof-object . G20881) (current-error-port . G20880) (current-output-port . G20879) (current-input-port . G20878) (output-port? . G20877) (input-port? . G20876) (utf-8-codec . G20875) (utf-16-codec . G20874) (transcoder-error-handling-mode . G20873) (transcoder-eol-style . G20872) (transcoder-codec . G20871) (transcoded-port . G20870) (textual-port? . G20869) (string->bytevector . G20868) (standard-output-port . G20867) (standard-input-port . G20866) (standard-error-port . G20865) (set-port-position! . G20864) (put-u8 . G20863) (put-string . G20862) (put-datum . G20861) (put-char . G20860) (put-bytevector . G20859) (port? . G20858) (port-transcoder . G20857) (port-position . G20856) (port-has-set-port-position!? . G20855) (port-has-port-position? . G20854) (port-eof? . G20853) (output-port-buffer-mode . G20852) (open-string-output-port . G20851) (open-string-input-port . G20850) (open-file-output-port . G20849) (open-file-input/output-port . G20848) (open-file-input-port . G20847) (open-bytevector-output-port . G20846) (open-bytevector-input-port . G20845) (native-transcoder . G20844) (native-eol-style . G20843) (make-transcoder . G20842) (latin-1-codec . G20841) (make-i/o-write-error . G19281) (make-i/o-read-error . G19261) (make-i/o-port-error . G19432) (make-i/o-invalid-position-error . G19302) (make-i/o-filename-error . G19327) (make-i/o-file-protection-error . G19351) (make-i/o-file-is-read-only-error . G19371) (make-i/o-file-does-not-exist-error . G19411) (make-i/o-file-already-exists-error . G19391) (make-i/o-error . G19241) (make-i/o-encoding-error . G19477) (make-i/o-decoding-error . G19456) (make-custom-textual-output-port . G20840) (make-custom-textual-input/output-port . G20839) (make-custom-textual-input-port . G20838) (make-custom-binary-output-port . G20837) (make-custom-binary-input/output-port . G20836) (make-custom-binary-input-port . G20835) (lookahead-u8 . G20833) (lookahead-char . G20832) (i/o-write-error? . G19283) (i/o-read-error? . G19263) (i/o-port-error? . G19436) (i/o-invalid-position-error? . G19306) (i/o-filename-error? . G19331) (i/o-file-protection-error? . G19353) (i/o-file-is-read-only-error? . G19373) (i/o-file-does-not-exist-error? . G19413) (i/o-file-already-exists-error? . G19393) (i/o-error? . G19243) (i/o-error-port . G19438) (i/o-error-filename . G19333) (i/o-encoding-error? . G19481) (i/o-encoding-error-char . G19483) (i/o-decoding-error? . G19458) (get-u8 . G20831) (get-string-n! . G20830) (get-string-n . G20829) (get-string-all . G20828) (get-line . G20827) (get-datum . G20826) (get-char . G20825) (get-bytevector-some . G20824) (get-bytevector-n! . G20823) (get-bytevector-n . G20822) (get-bytevector-all . G20821) (flush-output-port . G20820) (close-port . G20819) (call-with-string-output-port . G20787) (call-with-port . G20786) (call-with-bytevector-output-port . G20785) (bytevector->string . G20784) (buffer-mode? . G20783) (binary-port? . G20782) (&i/o-encoding . G20427) (&i/o-decoding . G20426) (&i/o-port . G20425) (&i/o-file-does-not-exist . G20424) (&i/o-file-already-exists . G20423) (&i/o-file-is-read-only . G20422) (&i/o-file-protection . G20421) (&i/o-filename . G20420) (&i/o-invalid-position . G20419) (&i/o-write . G20418) (&i/o-read . G20417) (&i/o . G20416) (error-handling-mode . G20389) (file-options . G20388) (buffer-mode . G20387) (eol-style . G20386)) '() values values '#f '#f '#t '#f) (G11111 'G21085 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G20778) (enum-set=? . G20777) (enum-set-universe . G20776) (enum-set-union . G20775) (enum-set-subset? . G20774) (enum-set-projection . G20773) (enum-set-member? . G20772) (enum-set-intersection . G20771) (enum-set-indexer . G20770) (enum-set-difference . G20769) (enum-set-constructor . G20768) (enum-set-complement . G20767) (enum-set->list . G20766) (define-enumeration . G20400)) '() values values '#f '#f '#t '#f) (G11111 'G21086 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G19015) (warning? . G18887) (violation? . G18947) (undefined-violation? . G19127) (syntax-violation? . G19103) (syntax-violation-subform . G19107) (syntax-violation-form . G19105) (syntax-violation . G12426) (simple-conditions . G20765) (serious-condition? . G18907) (non-continuable-violation? . G19037) (message-condition? . G18865) (make-who-condition . G19011) (make-warning . G18885) (make-violation . G18945) (make-undefined-violation . G19125) (make-syntax-violation . G19097) (make-serious-condition . G18905) (make-non-continuable-violation . G19035) (make-message-condition . G18861) (make-lexical-violation . G19075) (make-irritants-condition . G18986) (make-implementation-restriction-violation . G19055) (make-error . G18925) (make-assertion-violation . G18965) (lexical-violation? . G19077) (irritants-condition? . G18990) (implementation-restriction-violation? . G19057) (error? . G18927) (condition-who . G19017) (condition-predicate . G20764) (condition-message . G18867) (condition-irritants . G18992) (condition-accessor . G20763) (condition . G20762) (assertion-violation? . G18967) (condition? . G20761) (&undefined . G20415) (&syntax . G20414) (&lexical . G20413) (&implementation-restriction . G20412) (&non-continuable . G20411) (&who . G20410) (&irritants . G20409) (&assertion . G20408) (&violation . G20407) (&error . G20406) (&serious . G20405) (&warning . G20404) (&message . G20403) (&condition . G20402) (define-condition-type . G20401)) '() values values '#f '#f '#t '#f) (G11111 'G21087 '(rnrs records inspection) '(6) '() '() '() '((record? . G20933) (record-type-uid . G20932) (record-type-sealed? . G20931) (record-type-parent . G20930) (record-type-opaque? . G20929) (record-type-name . G20928) (record-type-generative? . G20927) (record-type-field-names . G20926) (record-rtd . G20925) (record-field-mutable? . G20924)) '() values values '#f '#f '#t '#f) (G11111 'G21088 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G20940) (record-predicate . G20939) (record-mutator . G20938) (record-constructor . G20937) (record-accessor . G20936) (make-record-type-descriptor . G20935) (make-record-constructor-descriptor . G20934)) '() values values '#f '#f '#t '#f) (G11111 'G21089 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G20399) (parent-rtd . G20398) (nongenerative . G20397) (opaque . G20396) (sealed . G20395) (protocol . G20394) (parent . G20393) (immutable . G20392) (mutable . G20391) (fields . G20390) (record-constructor-descriptor . G20356) (record-type-descriptor . G20355)) '() values values '#f '#f '#t '#f) (G11111 'G21090 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G21058) (&no-nans-rtd . G21057) (&no-infinities-rcd . G21056) (&no-infinities-rtd . G21055) (&i/o-encoding-rcd . G21054) (&i/o-encoding-rtd . G21053) (&i/o-decoding-rcd . G21052) (&i/o-decoding-rtd . G21051) (&i/o-port-rcd . G21050) (&i/o-port-rtd . G21049) (&i/o-file-does-not-exist-rcd . G21048) (&i/o-file-does-not-exist-rtd . G21047) (&i/o-file-already-exists-rcd . G21046) (&i/o-file-already-exists-rtd . G21045) (&i/o-file-is-read-only-rcd . G21044) (&i/o-file-is-read-only-rtd . G21043) (&i/o-file-protection-rcd . G21042) (&i/o-file-protection-rtd . G21041) (&i/o-filename-rcd . G21040) (&i/o-filename-rtd . G21039) (&i/o-invalid-position-rcd . G21038) (&i/o-invalid-position-rtd . G21037) (&i/o-write-rcd . G21036) (&i/o-write-rtd . G21035) (&i/o-read-rcd . G21034) (&i/o-read-rtd . G21033) (&i/o-rcd . G21032) (&i/o-rtd . G21031) (&undefined-rcd . G21030) (&undefined-rtd . G21029) (&syntax-rcd . G21028) (&syntax-rtd . G21027) (&lexical-rcd . G21026) (&lexical-rtd . G21025) (&implementation-restriction-rcd . G21024) (&implementation-restriction-rtd . G21023) (&non-continuable-rcd . G21022) (&non-continuable-rtd . G21021) (&who-rcd . G21020) (&who-rtd . G21019) (&irritants-rcd . G21018) (&irritants-rtd . G21017) (&assertion-rcd . G21016) (&assertion-rtd . G21015) (&violation-rcd . G21014) (&violation-rtd . G21013) (&error-rcd . G21012) (&error-rtd . G21011) (&serious-rcd . G21010) (&serious-rtd . G21009) (&warning-rcd . G21008) (&warning-rtd . G21007) (&message-rcd . G21006) (&message-rtd . G21005) (&condition-rcd . G21004) (&condition-rtd . G21003) (syntax-error . G12420) (syntax-dispatch . G12193) (pretty-print . G21002) (eval-core . G21001) (set-symbol-value! . G21000) (symbol-value . G20999) (gensym . G20998) (void . G20997) (load . G20212) (interaction-environment . G12438) (char-ready? . G20996) (regexp? . G20995) (read-line . G20994) (dotted-list? . G20993) (circular-list? . G20992) (proper-list? . G20991) (circular-list . G20990) (last . G20989) (last-pair . G20988) (not-pair? . G20987) (split-at! . G20986) (split-at . G20985) (list= . G20984) (list-copy . G20983) (list-tabulate . G20982) (make-list . G20981) (xcons . G20980) (tenth . G20979) (ninth . G20978) (eighth . G20977) (seventh . G20976) (sixth . G20975) (fifth . G20974) (drop-right! . G20973) (drop-right . G20972) (take-right . G20971) (take! . G20970) (drop . G20969) (take . G20968) (car+cdr . G20967) (third . G20966) (second . G20965) (first . G20964) (assoc-ref . G20963) (alist-cons . G20962) (print . G20961) (format . G20960) (write-to-file . G20959) (file->list . G20958) (file->string . G20957) (digit->integer . G20956) (call-with-string-input-port . G20955) (call-with-string-io . G20954) (string-split . G20953) (bytevector-for-each . G20952) (string->regexp . G20951) (rxmatch . G20950) (regexp-replace-all . G20949) (hashtable-for-each . G20948) (readdir . G20947) (get-environment-variables . G20946) (get-environment-variable . G20945) (get-command-line . G20944) (sys-display . G20943) (source-info . G20942) (set-source-info! . G20941) (string-upcase . G19680) (string-titlecase . G19684) (string-normalize-nfkd . G19714) (string-normalize-nfkc . G19718) (string-normalize-nfd . G19712) (string-normalize-nfc . G19716) (string-foldcase . G19682) (string-downcase . G19678) (string-ci>? . G19692) (string-ci>=? . G19696) (string-ci=? . G19688) (string-ci<? . G19690) (string-ci<=? . G19694) (char-whitespace? . G19642) (char-upper-case? . G19648) (char-title-case? . G19652) (char-numeric? . G19646) (char-lower-case? . G19650) (char-general-category . G19662) (char-upcase . G19654) (char-titlecase . G19658) (char-foldcase . G19660) (char-downcase . G19656) (char-ci>? . G19668) (char-ci>=? . G19672) (char-ci=? . G19664) (char-ci<? . G19666) (char-ci<=? . G19670) (char-alphabetic? . G19644) (make-variable-transformer . G11679) (identifier? . G12428) (generate-temporaries . G12412) (free-identifier=? . G12414) (syntax->datum . G12432) (datum->syntax . G12430) (bound-identifier=? . G12416) (record-type-descriptor? . G20940) (record-predicate . G20939) (record-mutator . G20938) (record-constructor . G20937) (record-accessor . G20936) (make-record-type-descriptor . G20935) (make-record-constructor-descriptor . G20934) (record? . G20933) (record-type-uid . G20932) (record-type-sealed? . G20931) (record-type-parent . G20930) (record-type-opaque? . G20929) (record-type-name . G20928) (record-type-generative? . G20927) (record-type-field-names . G20926) (record-rtd . G20925) (record-field-mutable? . G20924) (delete-file . G20923) (file-exists? . G20922) (vector-sort! . G20921) (vector-sort . G20920) (list-sort . G20919) (symbol-hash . G20918) (string-ci-hash . G20917) (string-hash . G20916) (equal-hash . G20915) (hashtable-equivalence-function . G20914) (make-hashtable . G20913) (hashtable-hash-function . G20912) (make-eqv-hashtable . G20911) (make-eq-hashtable . G20910) (hashtable? . G20909) (hashtable-update! . G20908) (hashtable-size . G20907) (hashtable-set! . G20906) (hashtable-ref . G20905) (hashtable-mutable? . G20904) (hashtable-keys . G20903) (hashtable-entries . G20902) (hashtable-delete! . G20901) (hashtable-copy . G20900) (hashtable-contains? . G20899) (hashtable-clear! . G20898) (call-with-output-file . G20897) (call-with-input-file . G20896) (write-char . G20895) (write . G20894) (with-output-to-file . G20893) (with-input-from-file . G20892) (read-char . G20891) (read . G20890) (peek-char . G20889) (open-output-file . G20888) (open-input-file . G20887) (newline . G20886) (display . G20885) (close-output-port . G20884) (close-input-port . G20883) (eof-object? . G20882) (eof-object . G20881) (current-error-port . G20880) (current-output-port . G20879) (current-input-port . G20878) (output-port? . G20877) (input-port? . G20876) (utf-8-codec . G20875) (utf-16-codec . G20874) (transcoder-error-handling-mode . G20873) (transcoder-eol-style . G20872) (transcoder-codec . G20871) (transcoded-port . G20870) (textual-port? . G20869) (string->bytevector . G20868) (standard-output-port . G20867) (standard-input-port . G20866) (standard-error-port . G20865) (set-port-position! . G20864) (put-u8 . G20863) (put-string . G20862) (put-datum . G20861) (put-char . G20860) (put-bytevector . G20859) (port? . G20858) (port-transcoder . G20857) (port-position . G20856) (port-has-set-port-position!? . G20855) (port-has-port-position? . G20854) (port-eof? . G20853) (output-port-buffer-mode . G20852) (open-string-output-port . G20851) (open-string-input-port . G20850) (open-file-output-port . G20849) (open-file-input/output-port . G20848) (open-file-input-port . G20847) (open-bytevector-output-port . G20846) (open-bytevector-input-port . G20845) (native-transcoder . G20844) (native-eol-style . G20843) (make-transcoder . G20842) (latin-1-codec . G20841) (make-i/o-write-error . G19281) (make-i/o-read-error . G19261) (make-i/o-port-error . G19432) (make-i/o-invalid-position-error . G19302) (make-i/o-filename-error . G19327) (make-i/o-file-protection-error . G19351) (make-i/o-file-is-read-only-error . G19371) (make-i/o-file-does-not-exist-error . G19411) (make-i/o-file-already-exists-error . G19391) (make-i/o-error . G19241) (make-i/o-encoding-error . G19477) (make-i/o-decoding-error . G19456) (make-custom-textual-output-port . G20840) (make-custom-textual-input/output-port . G20839) (make-custom-textual-input-port . G20838) (make-custom-binary-output-port . G20837) (make-custom-binary-input/output-port . G20836) (make-custom-binary-input-port . G20835) (make-bytevector . G20834) (lookahead-u8 . G20833) (lookahead-char . G20832) (i/o-write-error? . G19283) (i/o-read-error? . G19263) (i/o-port-error? . G19436) (i/o-invalid-position-error? . G19306) (i/o-filename-error? . G19331) (i/o-file-protection-error? . G19353) (i/o-file-is-read-only-error? . G19373) (i/o-file-does-not-exist-error? . G19413) (i/o-file-already-exists-error? . G19393) (i/o-error? . G19243) (i/o-error-port . G19438) (i/o-error-filename . G19333) (i/o-encoding-error? . G19481) (i/o-encoding-error-char . G19483) (i/o-decoding-error? . G19458) (get-u8 . G20831) (get-string-n! . G20830) (get-string-n . G20829) (get-string-all . G20828) (get-line . G20827) (get-datum . G20826) (get-char . G20825) (get-bytevector-some . G20824) (get-bytevector-n! . G20823) (get-bytevector-n . G20822) (get-bytevector-all . G20821) (flush-output-port . G20820) (close-port . G20819) (scheme-report-environment . G12394) (quotient . G20818) (null-environment . G12392) (remainder . G20817) (modulo . G20816) (inexact->exact . G20815) (force . G20814) (exact->inexact . G20813) (exit . G20812) (command-line . G20206) (string-fill! . G20811) (string-set! . G20810) (set-cdr! . G20809) (set-car! . G20808) (remove . G20807) (remv . G20806) (remp . G20805) (remq . G20804) (partition . G20803) (memv . G20802) (memq . G20801) (memp . G20800) (member . G20799) (exists . G20798) (for-all . G20797) (fold-right . G20796) (fold-left . G20795) (find . G20794) (filter . G20793) (cons* . G20792) (assv . G20791) (assq . G20790) (assp . G20789) (assoc . G20788) (call-with-string-output-port . G20787) (call-with-port . G20786) (call-with-bytevector-output-port . G20785) (bytevector->string . G20784) (buffer-mode? . G20783) (binary-port? . G20782) (with-exception-handler . G20781) (raise-continuable . G20780) (raise . G20779) (eval . G12398) (environment . G12390) (make-enumeration . G20778) (enum-set=? . G20777) (enum-set-universe . G20776) (enum-set-union . G20775) (enum-set-subset? . G20774) (enum-set-projection . G20773) (enum-set-member? . G20772) (enum-set-intersection . G20771) (enum-set-indexer . G20770) (enum-set-difference . G20769) (enum-set-constructor . G20768) (enum-set-complement . G20767) (enum-set->list . G20766) (who-condition? . G19015) (warning? . G18887) (violation? . G18947) (undefined-violation? . G19127) (syntax-violation? . G19103) (syntax-violation-subform . G19107) (syntax-violation-form . G19105) (syntax-violation . G12426) (simple-conditions . G20765) (serious-condition? . G18907) (non-continuable-violation? . G19037) (message-condition? . G18865) (make-who-condition . G19011) (make-warning . G18885) (make-violation . G18945) (make-undefined-violation . G19125) (make-syntax-violation . G19097) (make-serious-condition . G18905) (make-non-continuable-violation . G19035) (make-message-condition . G18861) (make-lexical-violation . G19075) (make-irritants-condition . G18986) (make-implementation-restriction-violation . G19055) (make-error . G18925) (make-assertion-violation . G18965) (lexical-violation? . G19077) (irritants-condition? . G18990) (implementation-restriction-violation? . G19057) (error? . G18927) (condition-who . G19017) (condition-predicate . G20764) (condition-message . G18867) (condition-irritants . G18992) (condition-accessor . G20763) (condition . G20762) (assertion-violation? . G18967) (condition? . G20761) (utf32->string . G20760) (utf16->string . G20759) (utf8->string . G20758) (uint-list->bytevector . G20757) (u8-list->bytevector . G20756) (string->utf8 . G20755) (string->utf32 . G20754) (string->utf16 . G20753) (sint-list->bytevector . G20752) (native-endianness . G20751) (bytevector? . G20750) (bytevector=? . G20749) (bytevector-uint-set! . G20748) (bytevector-uint-ref . G20747) (bytevector-u8-set! . G20746) (bytevector-u8-ref . G20745) (bytevector-u64-set! . G20744) (bytevector-u64-ref . G20743) (bytevector-u64-native-set! . G20742) (bytevector-u64-native-ref . G20741) (bytevector-u32-set! . G20740) (bytevector-u32-ref . G20739) (bytevector-u32-native-set! . G20738) (bytevector-u32-native-ref . G20737) (bytevector-u16-set! . G20736) (bytevector-u16-ref . G20735) (bytevector-u16-native-set! . G20734) (bytevector-u16-native-ref . G20733) (bytevector-sint-set! . G20732) (bytevector-sint-ref . G20731) (bytevector-s8-set! . G20730) (bytevector-s8-ref . G20729) (bytevector-s64-set! . G20728) (bytevector-s64-ref . G20727) (bytevector-s64-native-set! . G20726) (bytevector-s64-native-ref . G20725) (bytevector-s32-set! . G20724) (bytevector-s32-ref . G20723) (bytevector-s32-native-set! . G20722) (bytevector-s32-native-ref . G20721) (bytevector-s16-set! . G20720) (bytevector-s16-ref . G20719) (bytevector-s16-native-set! . G20718) (bytevector-s16-native-ref . G20717) (bytevector-length . G20716) (bytevector-ieee-single-ref . G20715) (bytevector-ieee-single-native-set! . G20714) (bytevector-ieee-single-native-ref . G20713) (bytevector-ieee-double-ref . G20712) (bytevector-ieee-double-native-set! . G20711) (bytevector-ieee-double-native-ref . G20710) (bytevector-fill! . G20709) (bytevector-copy! . G20708) (bytevector-copy . G20707) (bytevector->uint-list . G20706) (bytevector->u8-list . G20705) (bytevector->sint-list . G20704) (no-nans-violation? . G20703) (no-infinities-violation? . G20702) (make-no-nans-violation . G20701) (make-no-infinities-violation . G20700) (real->flonum . G20699) (flzero? . G20698) (fltruncate . G20697) (fltan . G20696) (flsqrt . G20695) (flsin . G20694) (flround . G20693) (flpositive? . G20692) (flonum? . G20691) (flodd? . G20690) (flnumerator . G20689) (flnegative? . G20688) (flnan? . G20687) (flmod0 . G20686) (flmod . G20685) (flmin . G20684) (flmax . G20683) (fllog . G20682) (flinteger? . G20681) (flinfinite? . G20680) (flfloor . G20679) (flfinite? . G20678) (flexpt . G20677) (flexp . G20676) (fleven? . G20675) (fldiv0-and-mod0 . G20674) (fldiv0 . G20673) (fldiv-and-mod . G20672) (fldiv . G20671) (fldenominator . G20670) (flcos . G20669) (flceiling . G20668) (flatan . G20667) (flasin . G20666) (flacos . G20665) (flabs . G20664) (fl>? . G20663) (fl>=? . G20662) (fl=? . G20661) (fl<? . G20660) (fl<=? . G20659) (fl/ . G20658) (fl- . G20657) (fl+ . G20656) (fl* . G20655) (fixnum->flonum . G20654) (fxzero? . G20653) (fxxor . G20652) (fxrotate-bit-field . G20651) (fxreverse-bit-field . G20650) (fxpositive? . G20649) (fxodd? . G20648) (fxnot . G20647) (fxnegative? . G20646) (fxmod0 . G20645) (fxmod . G20644) (fxmin . G20643) (fxmax . G20642) (fxlength . G20641) (fxior . G20640) (fxif . G20639) (fxfirst-bit-set . G20638) (fxeven? . G20637) (fxdiv0-and-mod0 . G20636) (fxdiv0 . G20635) (fxdiv-and-mod . G20634) (fxdiv . G20633) (fxcopy-bit-field . G20632) (fxcopy-bit . G20631) (fxbit-set? . G20630) (fxbit-field . G20629) (fxbit-count . G20628) (fxarithmetic-shift-right . G20627) (fxarithmetic-shift-left . G20626) (fxarithmetic-shift . G20625) (fxand . G20624) (fx>? . G20623) (fx>=? . G20622) (fx=? . G20621) (fx<? . G20620) (fx<=? . G20619) (fx-/carry . G20618) (fx- . G20617) (fx+/carry . G20616) (fx+ . G20615) (fx*/carry . G20614) (fx* . G20613) (greatest-fixnum . G20612) (least-fixnum . G20611) (fixnum-width . G20610) (fixnum? . G20609) (bitwise-rotate-bit-field . G20608) (bitwise-reverse-bit-field . G20607) (bitwise-length . G20606) (bitwise-if . G20605) (bitwise-first-bit-set . G20604) (bitwise-copy-bit-field . G20603) (bitwise-copy-bit . G20602) (bitwise-bit-set? . G20601) (bitwise-bit-field . G20600) (bitwise-bit-count . G20599) (bitwise-xor . G20598) (bitwise-ior . G20597) (bitwise-and . G20596) (bitwise-not . G20595) (bitwise-arithmetic-shift-right . G20594) (bitwise-arithmetic-shift-left . G20593) (bitwise-arithmetic-shift . G20592) (zero? . G20591) (vector? . G20590) (vector-set! . G20589) (vector-ref . G20588) (vector-map . G20587) (vector-length . G20586) (vector-for-each . G20585) (vector-fill! . G20584) (vector->list . G20583) (vector . G20582) (values . G20581) (truncate . G20580) (tan . G20579) (symbol? . G20578) (symbol=? . G20577) (symbol->string . G20576) (substring . G20575) (string? . G20574) (string>? . G20573) (string>=? . G20572) (string=? . G20571) (string<? . G20570) (string<=? . G20569) (string-ref . G20568) (string-length . G20567) (string-for-each . G20566) (string-copy . G20565) (string-append . G20564) (string->symbol . G20563) (string->number . G20562) (string->list . G20561) (string . G20560) (sqrt . G20559) (sin . G20558) (round . G20557) (reverse . G20556) (real? . G20555) (real-valued? . G20554) (real-part . G20553) (rationalize . G20552) (rational? . G20551) (rational-valued? . G20550) (procedure? . G20549) (positive? . G20548) (pair? . G20547) (odd? . G20546) (numerator . G20545) (number? . G20544) (number->string . G20543) (null? . G20542) (not . G20541) (negative? . G20540) (nan? . G20539) (min . G20538) (max . G20537) (map . G20536) (make-vector . G20535) (make-string . G20534) (make-rectangular . G20533) (make-polar . G20532) (magnitude . G20531) (log . G20530) (list? . G20529) (list-tail . G20528) (list-ref . G20527) (list->vector . G20526) (list->string . G20525) (list . G20524) (length . G20523) (lcm . G20522) (integer? . G20521) (integer-valued? . G20520) (integer->char . G20519) (infinite? . G20518) (inexact? . G20517) (inexact . G20516) (imag-part . G20515) (gcd . G20514) (for-each . G20513) (floor . G20512) (finite? . G20511) (expt . G20510) (exp . G20509) (exact? . G20508) (exact-integer-sqrt . G20507) (exact . G20506) (even? . G20505) (error . G20504) (eqv? . G20503) (equal? . G20502) (eq? . G20501) (dynamic-wind . G20500) (div0-and-mod0 . G20499) (mod0 . G20498) (div0 . G20497) (div-and-mod . G20496) (mod . G20495) (div . G20494) (denominator . G20493) (cos . G20492) (cons . G20491) (complex? . G20490) (char? . G20489) (char>? . G20488) (char>=? . G20487) (char=? . G20486) (char<? . G20485) (char<=? . G20484) (char->integer . G20483) (ceiling . G20482) (call-with-values . G20481) (call/cc . G20480) (call-with-current-continuation . G20479) (cddddr . G20478) (cdddar . G20477) (cddadr . G20476) (cddaar . G20475) (cdaddr . G20474) (cdadar . G20473) (cdaadr . G20472) (cdaaar . G20471) (cadddr . G20470) (caddar . G20469) (cadadr . G20468) (cadaar . G20467) (caaddr . G20466) (caadar . G20465) (caaadr . G20464) (caaaar . G20463) (cdddr . G20462) (cddar . G20461) (cdadr . G20460) (cdaar . G20459) (caddr . G20458) (cadar . G20457) (caadr . G20456) (caaar . G20455) (cddr . G20454) (cdar . G20453) (cadr . G20452) (caar . G20451) (cdr . G20450) (car . G20449) (boolean? . G20448) (boolean=? . G20447) (atan . G20446) (assertion-violation . G20445) (asin . G20444) (apply . G20443) (append . G20442) (angle . G20441) (acos . G20440) (abs . G20439) (/ . G20438) (* . G20437) (- . G20436) (+ . G20435) (>= . G20434) (> . G20433) (= . G20432) (<= . G20431) (< . G20430) (&no-nans . G20429) (&no-infinities . G20428) (&i/o-encoding . G20427) (&i/o-decoding . G20426) (&i/o-port . G20425) (&i/o-file-does-not-exist . G20424) (&i/o-file-already-exists . G20423) (&i/o-file-is-read-only . G20422) (&i/o-file-protection . G20421) (&i/o-filename . G20420) (&i/o-invalid-position . G20419) (&i/o-write . G20418) (&i/o-read . G20417) (&i/o . G20416) (&undefined . G20415) (&syntax . G20414) (&lexical . G20413) (&implementation-restriction . G20412) (&non-continuable . G20411) (&who . G20410) (&irritants . G20409) (&assertion . G20408) (&violation . G20407) (&error . G20406) (&serious . G20405) (&warning . G20404) (&message . G20403) (&condition . G20402) (define-condition-type . G20401) (define-enumeration . G20400) (define-record-type . G20399) (parent-rtd . G20398) (nongenerative . G20397) (opaque . G20396) (sealed . G20395) (protocol . G20394) (parent . G20393) (immutable . G20392) (mutable . G20391) (fields . G20390) (error-handling-mode . G20389) (file-options . G20388) (buffer-mode . G20387) (eol-style . G20386) (guard . G20385) (trace-define . G20384) (trace-lambda . G20383) (unsyntax-splicing . G20382) (unsyntax . G20381) (unquote-splicing . G20380) (unquote . G20379) (_ . G20378) (else . G20377) (=> . G20376) (... . G20375) (assert . G20374) (endianness . G20373) (delay . G20372) (time . G20371) (or . G20370) (and . G20369) (do . G20368) (cond . G20367) (let* . G20366) (let . G20365) (let-values . G20364) (identifier-syntax . G20363) (with-syntax . G20362) (quasisyntax . G20361) (quasiquote . G20360) (syntax-rules . G20359) (include . G20358) (define-struct . G20357) (record-constructor-descriptor . G20356) (record-type-descriptor . G20355) (case . G20354) (parameterize . G20353) (unless . G20352) (when . G20351) (if . G20350) (letrec* . G20349) (letrec . G20348) (type-descriptor . G20347) (case-lambda . G20346) (lambda . G20345) (syntax . G20344) (syntax-case . G20343) (quote . G20342) (foreign-call . G20341) (letrec-syntax . G20340) (let-syntax . G20339) (set! . G20338) (import . G20337) (begin . G20336) (module . G20335) (define-syntax . G20334) (define . G20333)) '((G21058 core-prim . &no-nans-rcd) (G21057 core-prim . &no-nans-rtd) (G21056 core-prim . &no-infinities-rcd) (G21055 core-prim . &no-infinities-rtd) (G21054 core-prim . &i/o-encoding-rcd) (G21053 core-prim . &i/o-encoding-rtd) (G21052 core-prim . &i/o-decoding-rcd) (G21051 core-prim . &i/o-decoding-rtd) (G21050 core-prim . &i/o-port-rcd) (G21049 core-prim . &i/o-port-rtd) (G21048 core-prim . &i/o-file-does-not-exist-rcd) (G21047 core-prim . &i/o-file-does-not-exist-rtd) (G21046 core-prim . &i/o-file-already-exists-rcd) (G21045 core-prim . &i/o-file-already-exists-rtd) (G21044 core-prim . &i/o-file-is-read-only-rcd) (G21043 core-prim . &i/o-file-is-read-only-rtd) (G21042 core-prim . &i/o-file-protection-rcd) (G21041 core-prim . &i/o-file-protection-rtd) (G21040 core-prim . &i/o-filename-rcd) (G21039 core-prim . &i/o-filename-rtd) (G21038 core-prim . &i/o-invalid-position-rcd) (G21037 core-prim . &i/o-invalid-position-rtd) (G21036 core-prim . &i/o-write-rcd) (G21035 core-prim . &i/o-write-rtd) (G21034 core-prim . &i/o-read-rcd) (G21033 core-prim . &i/o-read-rtd) (G21032 core-prim . &i/o-rcd) (G21031 core-prim . &i/o-rtd) (G21030 core-prim . &undefined-rcd) (G21029 core-prim . &undefined-rtd) (G21028 core-prim . &syntax-rcd) (G21027 core-prim . &syntax-rtd) (G21026 core-prim . &lexical-rcd) (G21025 core-prim . &lexical-rtd) (G21024 core-prim . &implementation-restriction-rcd) (G21023 core-prim . &implementation-restriction-rtd) (G21022 core-prim . &non-continuable-rcd) (G21021 core-prim . &non-continuable-rtd) (G21020 core-prim . &who-rcd) (G21019 core-prim . &who-rtd) (G21018 core-prim . &irritants-rcd) (G21017 core-prim . &irritants-rtd) (G21016 core-prim . &assertion-rcd) (G21015 core-prim . &assertion-rtd) (G21014 core-prim . &violation-rcd) (G21013 core-prim . &violation-rtd) (G21012 core-prim . &error-rcd) (G21011 core-prim . &error-rtd) (G21010 core-prim . &serious-rcd) (G21009 core-prim . &serious-rtd) (G21008 core-prim . &warning-rcd) (G21007 core-prim . &warning-rtd) (G21006 core-prim . &message-rcd) (G21005 core-prim . &message-rtd) (G21004 core-prim . &condition-rcd) (G21003 core-prim . &condition-rtd) (G12420 core-prim . syntax-error) (G12193 core-prim . syntax-dispatch) (G21002 core-prim . pretty-print) (G21001 core-prim . eval-core) (G21000 core-prim . set-symbol-value!) (G20999 core-prim . symbol-value) (G20998 core-prim . gensym) (G20997 core-prim . void) (G20212 core-prim . load) (G12438 core-prim . interaction-environment) (G20996 core-prim . char-ready?) (G20995 core-prim . regexp?) (G20994 core-prim . read-line) (G20993 core-prim . dotted-list?) (G20992 core-prim . circular-list?) (G20991 core-prim . proper-list?) (G20990 core-prim . circular-list) (G20989 core-prim . last) (G20988 core-prim . last-pair) (G20987 core-prim . not-pair?) (G20986 core-prim . split-at!) (G20985 core-prim . split-at) (G20984 core-prim . list=) (G20983 core-prim . list-copy) (G20982 core-prim . list-tabulate) (G20981 core-prim . make-list) (G20980 core-prim . xcons) (G20979 core-prim . tenth) (G20978 core-prim . ninth) (G20977 core-prim . eighth) (G20976 core-prim . seventh) (G20975 core-prim . sixth) (G20974 core-prim . fifth) (G20973 core-prim . drop-right!) (G20972 core-prim . drop-right) (G20971 core-prim . take-right) (G20970 core-prim . take!) (G20969 core-prim . drop) (G20968 core-prim . take) (G20967 core-prim . car+cdr) (G20966 core-prim . third) (G20965 core-prim . second) (G20964 core-prim . first) (G20963 core-prim . assoc-ref) (G20962 core-prim . alist-cons) (G20961 core-prim . print) (G20960 core-prim . format) (G20959 core-prim . write-to-file) (G20958 core-prim . file->list) (G20957 core-prim . file->string) (G20956 core-prim . digit->integer) (G20955 core-prim . call-with-string-input-port) (G20954 core-prim . call-with-string-io) (G20953 core-prim . string-split) (G20952 core-prim . bytevector-for-each) (G20951 core-prim . string->regexp) (G20950 core-prim . rxmatch) (G20949 core-prim . regexp-replace-all) (G20948 core-prim . hashtable-for-each) (G20947 core-prim . readdir) (G20946 core-prim . get-environment-variables) (G20945 core-prim . get-environment-variable) (G20944 core-prim . get-command-line) (G20943 core-prim . sys-display) (G20942 core-prim . source-info) (G20941 core-prim . set-source-info!) (G19680 core-prim . string-upcase) (G19684 core-prim . string-titlecase) (G19714 core-prim . string-normalize-nfkd) (G19718 core-prim . string-normalize-nfkc) (G19712 core-prim . string-normalize-nfd) (G19716 core-prim . string-normalize-nfc) (G19682 core-prim . string-foldcase) (G19678 core-prim . string-downcase) (G19692 core-prim . string-ci>?) (G19696 core-prim . string-ci>=?) (G19688 core-prim . string-ci=?) (G19690 core-prim . string-ci<?) (G19694 core-prim . string-ci<=?) (G19642 core-prim . char-whitespace?) (G19648 core-prim . char-upper-case?) (G19652 core-prim . char-title-case?) (G19646 core-prim . char-numeric?) (G19650 core-prim . char-lower-case?) (G19662 core-prim . char-general-category) (G19654 core-prim . char-upcase) (G19658 core-prim . char-titlecase) (G19660 core-prim . char-foldcase) (G19656 core-prim . char-downcase) (G19668 core-prim . char-ci>?) (G19672 core-prim . char-ci>=?) (G19664 core-prim . char-ci=?) (G19666 core-prim . char-ci<?) (G19670 core-prim . char-ci<=?) (G19644 core-prim . char-alphabetic?) (G11679 core-prim . make-variable-transformer) (G12428 core-prim . identifier?) (G12412 core-prim . generate-temporaries) (G12414 core-prim . free-identifier=?) (G12432 core-prim . syntax->datum) (G12430 core-prim . datum->syntax) (G12416 core-prim . bound-identifier=?) (G20940 core-prim . record-type-descriptor?) (G20939 core-prim . record-predicate) (G20938 core-prim . record-mutator) (G20937 core-prim . record-constructor) (G20936 core-prim . record-accessor) (G20935 core-prim . make-record-type-descriptor) (G20934 core-prim . make-record-constructor-descriptor) (G20933 core-prim . record?) (G20932 core-prim . record-type-uid) (G20931 core-prim . record-type-sealed?) (G20930 core-prim . record-type-parent) (G20929 core-prim . record-type-opaque?) (G20928 core-prim . record-type-name) (G20927 core-prim . record-type-generative?) (G20926 core-prim . record-type-field-names) (G20925 core-prim . record-rtd) (G20924 core-prim . record-field-mutable?) (G20923 core-prim . delete-file) (G20922 core-prim . file-exists?) (G20921 core-prim . vector-sort!) (G20920 core-prim . vector-sort) (G20919 core-prim . list-sort) (G20918 core-prim . symbol-hash) (G20917 core-prim . string-ci-hash) (G20916 core-prim . string-hash) (G20915 core-prim . equal-hash) (G20914 core-prim . hashtable-equivalence-function) (G20913 core-prim . make-hashtable) (G20912 core-prim . hashtable-hash-function) (G20911 core-prim . make-eqv-hashtable) (G20910 core-prim . make-eq-hashtable) (G20909 core-prim . hashtable?) (G20908 core-prim . hashtable-update!) (G20907 core-prim . hashtable-size) (G20906 core-prim . hashtable-set!) (G20905 core-prim . hashtable-ref) (G20904 core-prim . hashtable-mutable?) (G20903 core-prim . hashtable-keys) (G20902 core-prim . hashtable-entries) (G20901 core-prim . hashtable-delete!) (G20900 core-prim . hashtable-copy) (G20899 core-prim . hashtable-contains?) (G20898 core-prim . hashtable-clear!) (G20897 core-prim . call-with-output-file) (G20896 core-prim . call-with-input-file) (G20895 core-prim . write-char) (G20894 core-prim . write) (G20893 core-prim . with-output-to-file) (G20892 core-prim . with-input-from-file) (G20891 core-prim . read-char) (G20890 core-prim . read) (G20889 core-prim . peek-char) (G20888 core-prim . open-output-file) (G20887 core-prim . open-input-file) (G20886 core-prim . newline) (G20885 core-prim . display) (G20884 core-prim . close-output-port) (G20883 core-prim . close-input-port) (G20882 core-prim . eof-object?) (G20881 core-prim . eof-object) (G20880 core-prim . current-error-port) (G20879 core-prim . current-output-port) (G20878 core-prim . current-input-port) (G20877 core-prim . output-port?) (G20876 core-prim . input-port?) (G20875 core-prim . utf-8-codec) (G20874 core-prim . utf-16-codec) (G20873 core-prim . transcoder-error-handling-mode) (G20872 core-prim . transcoder-eol-style) (G20871 core-prim . transcoder-codec) (G20870 core-prim . transcoded-port) (G20869 core-prim . textual-port?) (G20868 core-prim . string->bytevector) (G20867 core-prim . standard-output-port) (G20866 core-prim . standard-input-port) (G20865 core-prim . standard-error-port) (G20864 core-prim . set-port-position!) (G20863 core-prim . put-u8) (G20862 core-prim . put-string) (G20861 core-prim . put-datum) (G20860 core-prim . put-char) (G20859 core-prim . put-bytevector) (G20858 core-prim . port?) (G20857 core-prim . port-transcoder) (G20856 core-prim . port-position) (G20855 core-prim . port-has-set-port-position!?) (G20854 core-prim . port-has-port-position?) (G20853 core-prim . port-eof?) (G20852 core-prim . output-port-buffer-mode) (G20851 core-prim . open-string-output-port) (G20850 core-prim . open-string-input-port) (G20849 core-prim . open-file-output-port) (G20848 core-prim . open-file-input/output-port) (G20847 core-prim . open-file-input-port) (G20846 core-prim . open-bytevector-output-port) (G20845 core-prim . open-bytevector-input-port) (G20844 core-prim . native-transcoder) (G20843 core-prim . native-eol-style) (G20842 core-prim . make-transcoder) (G20841 core-prim . latin-1-codec) (G19281 core-prim . make-i/o-write-error) (G19261 core-prim . make-i/o-read-error) (G19432 core-prim . make-i/o-port-error) (G19302 core-prim . make-i/o-invalid-position-error) (G19327 core-prim . make-i/o-filename-error) (G19351 core-prim . make-i/o-file-protection-error) (G19371 core-prim . make-i/o-file-is-read-only-error) (G19411 core-prim . make-i/o-file-does-not-exist-error) (G19391 core-prim . make-i/o-file-already-exists-error) (G19241 core-prim . make-i/o-error) (G19477 core-prim . make-i/o-encoding-error) (G19456 core-prim . make-i/o-decoding-error) (G20840 core-prim . make-custom-textual-output-port) (G20839 core-prim . make-custom-textual-input/output-port) (G20838 core-prim . make-custom-textual-input-port) (G20837 core-prim . make-custom-binary-output-port) (G20836 core-prim . make-custom-binary-input/output-port) (G20835 core-prim . make-custom-binary-input-port) (G20834 core-prim . make-bytevector) (G20833 core-prim . lookahead-u8) (G20832 core-prim . lookahead-char) (G19283 core-prim . i/o-write-error?) (G19263 core-prim . i/o-read-error?) (G19436 core-prim . i/o-port-error?) (G19306 core-prim . i/o-invalid-position-error?) (G19331 core-prim . i/o-filename-error?) (G19353 core-prim . i/o-file-protection-error?) (G19373 core-prim . i/o-file-is-read-only-error?) (G19413 core-prim . i/o-file-does-not-exist-error?) (G19393 core-prim . i/o-file-already-exists-error?) (G19243 core-prim . i/o-error?) (G19438 core-prim . i/o-error-port) (G19333 core-prim . i/o-error-filename) (G19481 core-prim . i/o-encoding-error?) (G19483 core-prim . i/o-encoding-error-char) (G19458 core-prim . i/o-decoding-error?) (G20831 core-prim . get-u8) (G20830 core-prim . get-string-n!) (G20829 core-prim . get-string-n) (G20828 core-prim . get-string-all) (G20827 core-prim . get-line) (G20826 core-prim . get-datum) (G20825 core-prim . get-char) (G20824 core-prim . get-bytevector-some) (G20823 core-prim . get-bytevector-n!) (G20822 core-prim . get-bytevector-n) (G20821 core-prim . get-bytevector-all) (G20820 core-prim . flush-output-port) (G20819 core-prim . close-port) (G12394 core-prim . scheme-report-environment) (G20818 core-prim . quotient) (G12392 core-prim . null-environment) (G20817 core-prim . remainder) (G20816 core-prim . modulo) (G20815 core-prim . inexact->exact) (G20814 core-prim . force) (G20813 core-prim . exact->inexact) (G20812 core-prim . exit) (G20206 core-prim . command-line) (G20811 core-prim . string-fill!) (G20810 core-prim . string-set!) (G20809 core-prim . set-cdr!) (G20808 core-prim . set-car!) (G20807 core-prim . remove) (G20806 core-prim . remv) (G20805 core-prim . remp) (G20804 core-prim . remq) (G20803 core-prim . partition) (G20802 core-prim . memv) (G20801 core-prim . memq) (G20800 core-prim . memp) (G20799 core-prim . member) (G20798 core-prim . exists) (G20797 core-prim . for-all) (G20796 core-prim . fold-right) (G20795 core-prim . fold-left) (G20794 core-prim . find) (G20793 core-prim . filter) (G20792 core-prim . cons*) (G20791 core-prim . assv) (G20790 core-prim . assq) (G20789 core-prim . assp) (G20788 core-prim . assoc) (G20787 core-prim . call-with-string-output-port) (G20786 core-prim . call-with-port) (G20785 core-prim . call-with-bytevector-output-port) (G20784 core-prim . bytevector->string) (G20783 core-prim . buffer-mode?) (G20782 core-prim . binary-port?) (G20781 core-prim . with-exception-handler) (G20780 core-prim . raise-continuable) (G20779 core-prim . raise) (G12398 core-prim . eval) (G12390 core-prim . environment) (G20778 core-prim . make-enumeration) (G20777 core-prim . enum-set=?) (G20776 core-prim . enum-set-universe) (G20775 core-prim . enum-set-union) (G20774 core-prim . enum-set-subset?) (G20773 core-prim . enum-set-projection) (G20772 core-prim . enum-set-member?) (G20771 core-prim . enum-set-intersection) (G20770 core-prim . enum-set-indexer) (G20769 core-prim . enum-set-difference) (G20768 core-prim . enum-set-constructor) (G20767 core-prim . enum-set-complement) (G20766 core-prim . enum-set->list) (G19015 core-prim . who-condition?) (G18887 core-prim . warning?) (G18947 core-prim . violation?) (G19127 core-prim . undefined-violation?) (G19103 core-prim . syntax-violation?) (G19107 core-prim . syntax-violation-subform) (G19105 core-prim . syntax-violation-form) (G12426 core-prim . syntax-violation) (G20765 core-prim . simple-conditions) (G18907 core-prim . serious-condition?) (G19037 core-prim . non-continuable-violation?) (G18865 core-prim . message-condition?) (G19011 core-prim . make-who-condition) (G18885 core-prim . make-warning) (G18945 core-prim . make-violation) (G19125 core-prim . make-undefined-violation) (G19097 core-prim . make-syntax-violation) (G18905 core-prim . make-serious-condition) (G19035 core-prim . make-non-continuable-violation) (G18861 core-prim . make-message-condition) (G19075 core-prim . make-lexical-violation) (G18986 core-prim . make-irritants-condition) (G19055 core-prim . make-implementation-restriction-violation) (G18925 core-prim . make-error) (G18965 core-prim . make-assertion-violation) (G19077 core-prim . lexical-violation?) (G18990 core-prim . irritants-condition?) (G19057 core-prim . implementation-restriction-violation?) (G18927 core-prim . error?) (G19017 core-prim . condition-who) (G20764 core-prim . condition-predicate) (G18867 core-prim . condition-message) (G18992 core-prim . condition-irritants) (G20763 core-prim . condition-accessor) (G20762 core-prim . condition) (G18967 core-prim . assertion-violation?) (G20761 core-prim . condition?) (G20760 core-prim . utf32->string) (G20759 core-prim . utf16->string) (G20758 core-prim . utf8->string) (G20757 core-prim . uint-list->bytevector) (G20756 core-prim . u8-list->bytevector) (G20755 core-prim . string->utf8) (G20754 core-prim . string->utf32) (G20753 core-prim . string->utf16) (G20752 core-prim . sint-list->bytevector) (G20751 core-prim . native-endianness) (G20750 core-prim . bytevector?) (G20749 core-prim . bytevector=?) (G20748 core-prim . bytevector-uint-set!) (G20747 core-prim . bytevector-uint-ref) (G20746 core-prim . bytevector-u8-set!) (G20745 core-prim . bytevector-u8-ref) (G20744 core-prim . bytevector-u64-set!) (G20743 core-prim . bytevector-u64-ref) (G20742 core-prim . bytevector-u64-native-set!) (G20741 core-prim . bytevector-u64-native-ref) (G20740 core-prim . bytevector-u32-set!) (G20739 core-prim . bytevector-u32-ref) (G20738 core-prim . bytevector-u32-native-set!) (G20737 core-prim . bytevector-u32-native-ref) (G20736 core-prim . bytevector-u16-set!) (G20735 core-prim . bytevector-u16-ref) (G20734 core-prim . bytevector-u16-native-set!) (G20733 core-prim . bytevector-u16-native-ref) (G20732 core-prim . bytevector-sint-set!) (G20731 core-prim . bytevector-sint-ref) (G20730 core-prim . bytevector-s8-set!) (G20729 core-prim . bytevector-s8-ref) (G20728 core-prim . bytevector-s64-set!) (G20727 core-prim . bytevector-s64-ref) (G20726 core-prim . bytevector-s64-native-set!) (G20725 core-prim . bytevector-s64-native-ref) (G20724 core-prim . bytevector-s32-set!) (G20723 core-prim . bytevector-s32-ref) (G20722 core-prim . bytevector-s32-native-set!) (G20721 core-prim . bytevector-s32-native-ref) (G20720 core-prim . bytevector-s16-set!) (G20719 core-prim . bytevector-s16-ref) (G20718 core-prim . bytevector-s16-native-set!) (G20717 core-prim . bytevector-s16-native-ref) (G20716 core-prim . bytevector-length) (G20715 core-prim . bytevector-ieee-single-ref) (G20714 core-prim . bytevector-ieee-single-native-set!) (G20713 core-prim . bytevector-ieee-single-native-ref) (G20712 core-prim . bytevector-ieee-double-ref) (G20711 core-prim . bytevector-ieee-double-native-set!) (G20710 core-prim . bytevector-ieee-double-native-ref) (G20709 core-prim . bytevector-fill!) (G20708 core-prim . bytevector-copy!) (G20707 core-prim . bytevector-copy) (G20706 core-prim . bytevector->uint-list) (G20705 core-prim . bytevector->u8-list) (G20704 core-prim . bytevector->sint-list) (G20703 core-prim . no-nans-violation?) (G20702 core-prim . no-infinities-violation?) (G20701 core-prim . make-no-nans-violation) (G20700 core-prim . make-no-infinities-violation) (G20699 core-prim . real->flonum) (G20698 core-prim . flzero?) (G20697 core-prim . fltruncate) (G20696 core-prim . fltan) (G20695 core-prim . flsqrt) (G20694 core-prim . flsin) (G20693 core-prim . flround) (G20692 core-prim . flpositive?) (G20691 core-prim . flonum?) (G20690 core-prim . flodd?) (G20689 core-prim . flnumerator) (G20688 core-prim . flnegative?) (G20687 core-prim . flnan?) (G20686 core-prim . flmod0) (G20685 core-prim . flmod) (G20684 core-prim . flmin) (G20683 core-prim . flmax) (G20682 core-prim . fllog) (G20681 core-prim . flinteger?) (G20680 core-prim . flinfinite?) (G20679 core-prim . flfloor) (G20678 core-prim . flfinite?) (G20677 core-prim . flexpt) (G20676 core-prim . flexp) (G20675 core-prim . fleven?) (G20674 core-prim . fldiv0-and-mod0) (G20673 core-prim . fldiv0) (G20672 core-prim . fldiv-and-mod) (G20671 core-prim . fldiv) (G20670 core-prim . fldenominator) (G20669 core-prim . flcos) (G20668 core-prim . flceiling) (G20667 core-prim . flatan) (G20666 core-prim . flasin) (G20665 core-prim . flacos) (G20664 core-prim . flabs) (G20663 core-prim . fl>?) (G20662 core-prim . fl>=?) (G20661 core-prim . fl=?) (G20660 core-prim . fl<?) (G20659 core-prim . fl<=?) (G20658 core-prim . fl/) (G20657 core-prim . fl-) (G20656 core-prim . fl+) (G20655 core-prim . fl*) (G20654 core-prim . fixnum->flonum) (G20653 core-prim . fxzero?) (G20652 core-prim . fxxor) (G20651 core-prim . fxrotate-bit-field) (G20650 core-prim . fxreverse-bit-field) (G20649 core-prim . fxpositive?) (G20648 core-prim . fxodd?) (G20647 core-prim . fxnot) (G20646 core-prim . fxnegative?) (G20645 core-prim . fxmod0) (G20644 core-prim . fxmod) (G20643 core-prim . fxmin) (G20642 core-prim . fxmax) (G20641 core-prim . fxlength) (G20640 core-prim . fxior) (G20639 core-prim . fxif) (G20638 core-prim . fxfirst-bit-set) (G20637 core-prim . fxeven?) (G20636 core-prim . fxdiv0-and-mod0) (G20635 core-prim . fxdiv0) (G20634 core-prim . fxdiv-and-mod) (G20633 core-prim . fxdiv) (G20632 core-prim . fxcopy-bit-field) (G20631 core-prim . fxcopy-bit) (G20630 core-prim . fxbit-set?) (G20629 core-prim . fxbit-field) (G20628 core-prim . fxbit-count) (G20627 core-prim . fxarithmetic-shift-right) (G20626 core-prim . fxarithmetic-shift-left) (G20625 core-prim . fxarithmetic-shift) (G20624 core-prim . fxand) (G20623 core-prim . fx>?) (G20622 core-prim . fx>=?) (G20621 core-prim . fx=?) (G20620 core-prim . fx<?) (G20619 core-prim . fx<=?) (G20618 core-prim . fx-/carry) (G20617 core-prim . fx-) (G20616 core-prim . fx+/carry) (G20615 core-prim . fx+) (G20614 core-prim . fx*/carry) (G20613 core-prim . fx*) (G20612 core-prim . greatest-fixnum) (G20611 core-prim . least-fixnum) (G20610 core-prim . fixnum-width) (G20609 core-prim . fixnum?) (G20608 core-prim . bitwise-rotate-bit-field) (G20607 core-prim . bitwise-reverse-bit-field) (G20606 core-prim . bitwise-length) (G20605 core-prim . bitwise-if) (G20604 core-prim . bitwise-first-bit-set) (G20603 core-prim . bitwise-copy-bit-field) (G20602 core-prim . bitwise-copy-bit) (G20601 core-prim . bitwise-bit-set?) (G20600 core-prim . bitwise-bit-field) (G20599 core-prim . bitwise-bit-count) (G20598 core-prim . bitwise-xor) (G20597 core-prim . bitwise-ior) (G20596 core-prim . bitwise-and) (G20595 core-prim . bitwise-not) (G20594 core-prim . bitwise-arithmetic-shift-right) (G20593 core-prim . bitwise-arithmetic-shift-left) (G20592 core-prim . bitwise-arithmetic-shift) (G20591 core-prim . zero?) (G20590 core-prim . vector?) (G20589 core-prim . vector-set!) (G20588 core-prim . vector-ref) (G20587 core-prim . vector-map) (G20586 core-prim . vector-length) (G20585 core-prim . vector-for-each) (G20584 core-prim . vector-fill!) (G20583 core-prim . vector->list) (G20582 core-prim . vector) (G20581 core-prim . values) (G20580 core-prim . truncate) (G20579 core-prim . tan) (G20578 core-prim . symbol?) (G20577 core-prim . symbol=?) (G20576 core-prim . symbol->string) (G20575 core-prim . substring) (G20574 core-prim . string?) (G20573 core-prim . string>?) (G20572 core-prim . string>=?) (G20571 core-prim . string=?) (G20570 core-prim . string<?) (G20569 core-prim . string<=?) (G20568 core-prim . string-ref) (G20567 core-prim . string-length) (G20566 core-prim . string-for-each) (G20565 core-prim . string-copy) (G20564 core-prim . string-append) (G20563 core-prim . string->symbol) (G20562 core-prim . string->number) (G20561 core-prim . string->list) (G20560 core-prim . string) (G20559 core-prim . sqrt) (G20558 core-prim . sin) (G20557 core-prim . round) (G20556 core-prim . reverse) (G20555 core-prim . real?) (G20554 core-prim . real-valued?) (G20553 core-prim . real-part) (G20552 core-prim . rationalize) (G20551 core-prim . rational?) (G20550 core-prim . rational-valued?) (G20549 core-prim . procedure?) (G20548 core-prim . positive?) (G20547 core-prim . pair?) (G20546 core-prim . odd?) (G20545 core-prim . numerator) (G20544 core-prim . number?) (G20543 core-prim . number->string) (G20542 core-prim . null?) (G20541 core-prim . not) (G20540 core-prim . negative?) (G20539 core-prim . nan?) (G20538 core-prim . min) (G20537 core-prim . max) (G20536 core-prim . map) (G20535 core-prim . make-vector) (G20534 core-prim . make-string) (G20533 core-prim . make-rectangular) (G20532 core-prim . make-polar) (G20531 core-prim . magnitude) (G20530 core-prim . log) (G20529 core-prim . list?) (G20528 core-prim . list-tail) (G20527 core-prim . list-ref) (G20526 core-prim . list->vector) (G20525 core-prim . list->string) (G20524 core-prim . list) (G20523 core-prim . length) (G20522 core-prim . lcm) (G20521 core-prim . integer?) (G20520 core-prim . integer-valued?) (G20519 core-prim . integer->char) (G20518 core-prim . infinite?) (G20517 core-prim . inexact?) (G20516 core-prim . inexact) (G20515 core-prim . imag-part) (G20514 core-prim . gcd) (G20513 core-prim . for-each) (G20512 core-prim . floor) (G20511 core-prim . finite?) (G20510 core-prim . expt) (G20509 core-prim . exp) (G20508 core-prim . exact?) (G20507 core-prim . exact-integer-sqrt) (G20506 core-prim . exact) (G20505 core-prim . even?) (G20504 core-prim . error) (G20503 core-prim . eqv?) (G20502 core-prim . equal?) (G20501 core-prim . eq?) (G20500 core-prim . dynamic-wind) (G20499 core-prim . div0-and-mod0) (G20498 core-prim . mod0) (G20497 core-prim . div0) (G20496 core-prim . div-and-mod) (G20495 core-prim . mod) (G20494 core-prim . div) (G20493 core-prim . denominator) (G20492 core-prim . cos) (G20491 core-prim . cons) (G20490 core-prim . complex?) (G20489 core-prim . char?) (G20488 core-prim . char>?) (G20487 core-prim . char>=?) (G20486 core-prim . char=?) (G20485 core-prim . char<?) (G20484 core-prim . char<=?) (G20483 core-prim . char->integer) (G20482 core-prim . ceiling) (G20481 core-prim . call-with-values) (G20480 core-prim . call/cc) (G20479 core-prim . call-with-current-continuation) (G20478 core-prim . cddddr) (G20477 core-prim . cdddar) (G20476 core-prim . cddadr) (G20475 core-prim . cddaar) (G20474 core-prim . cdaddr) (G20473 core-prim . cdadar) (G20472 core-prim . cdaadr) (G20471 core-prim . cdaaar) (G20470 core-prim . cadddr) (G20469 core-prim . caddar) (G20468 core-prim . cadadr) (G20467 core-prim . cadaar) (G20466 core-prim . caaddr) (G20465 core-prim . caadar) (G20464 core-prim . caaadr) (G20463 core-prim . caaaar) (G20462 core-prim . cdddr) (G20461 core-prim . cddar) (G20460 core-prim . cdadr) (G20459 core-prim . cdaar) (G20458 core-prim . caddr) (G20457 core-prim . cadar) (G20456 core-prim . caadr) (G20455 core-prim . caaar) (G20454 core-prim . cddr) (G20453 core-prim . cdar) (G20452 core-prim . cadr) (G20451 core-prim . caar) (G20450 core-prim . cdr) (G20449 core-prim . car) (G20448 core-prim . boolean?) (G20447 core-prim . boolean=?) (G20446 core-prim . atan) (G20445 core-prim . assertion-violation) (G20444 core-prim . asin) (G20443 core-prim . apply) (G20442 core-prim . append) (G20441 core-prim . angle) (G20440 core-prim . acos) (G20439 core-prim . abs) (G20438 core-prim . /) (G20437 core-prim . *) (G20436 core-prim . -) (G20435 core-prim . +) (G20434 core-prim . >=) (G20433 core-prim . >) (G20432 core-prim . =) (G20431 core-prim . <=) (G20430 core-prim . <) (G20429 $core-rtd &no-nans-rtd &no-nans-rcd) (G20428 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G20427 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G20426 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G20425 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G20424 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G20423 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G20422 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G20421 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G20420 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G20419 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G20418 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G20417 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G20416 $core-rtd &i/o-rtd &i/o-rcd) (G20415 $core-rtd &undefined-rtd &undefined-rcd) (G20414 $core-rtd &syntax-rtd &syntax-rcd) (G20413 $core-rtd &lexical-rtd &lexical-rcd) (G20412 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G20411 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G20410 $core-rtd &who-rtd &who-rcd) (G20409 $core-rtd &irritants-rtd &irritants-rcd) (G20408 $core-rtd &assertion-rtd &assertion-rcd) (G20407 $core-rtd &violation-rtd &violation-rcd) (G20406 $core-rtd &error-rtd &error-rcd) (G20405 $core-rtd &serious-rtd &serious-rcd) (G20404 $core-rtd &warning-rtd &warning-rcd) (G20403 $core-rtd &message-rtd &message-rcd) (G20402 $core-rtd &condition-rtd &condition-rcd) (G20401 macro . define-condition-type) (G20400 macro . define-enumeration) (G20399 macro . define-record-type) (G20398 macro . parent-rtd) (G20397 macro . nongenerative) (G20396 macro . opaque) (G20395 macro . sealed) (G20394 macro . protocol) (G20393 macro . parent) (G20392 macro . immutable) (G20391 macro . mutable) (G20390 macro . fields) (G20389 macro . error-handling-mode) (G20388 macro . file-options) (G20387 macro . buffer-mode) (G20386 macro . eol-style) (G20385 macro . guard) (G20384 macro . trace-define) (G20383 macro . trace-lambda) (G20382 macro . unsyntax-splicing) (G20381 macro . unsyntax) (G20380 macro . unquote-splicing) (G20379 macro . unquote) (G20378 macro . _) (G20377 macro . else) (G20376 macro . =>) (G20375 macro . ...) (G20374 macro . assert) (G20373 macro . endianness) (G20372 macro . delay) (G20371 macro . time) (G20370 macro . or) (G20369 macro . and) (G20368 macro . do) (G20367 macro . cond) (G20366 macro . let*) (G20365 macro . let) (G20364 macro . let-values) (G20363 macro . identifier-syntax) (G20362 macro . with-syntax) (G20361 macro . quasisyntax) (G20360 macro . quasiquote) (G20359 macro . syntax-rules) (G20358 macro . include) (G20357 macro . define-struct) (G20356 core-macro . record-constructor-descriptor) (G20355 core-macro . record-type-descriptor) (G20354 core-macro . case) (G20353 core-macro . parameterize) (G20352 core-macro . unless) (G20351 core-macro . when) (G20350 core-macro . if) (G20349 core-macro . letrec*) (G20348 core-macro . letrec) (G20347 core-macro . type-descriptor) (G20346 core-macro . case-lambda) (G20345 core-macro . lambda) (G20344 core-macro . syntax) (G20343 core-macro . syntax-case) (G20342 core-macro . quote) (G20341 core-macro . foreign-call) (G20340 letrec-syntax) (G20339 let-syntax) (G20338 set!) (G20337 import) (G20336 begin) (G20335 module) (G20334 define-syntax) (G20333 define)) values values '#f '#f '#f '#f) (G11111 'G21091 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G21002) (eval-core . G21001) (set-symbol-value! . G21000) (symbol-value . G20999) (gensym . G20998) (void . G20997)) '() values values '#f '#f '#f '#f) (G11111 'G21092 '(mosh) '() '() '() '() '((get-command-line . G20944) (sys-display . G20943) (source-info . G20942) (set-source-info! . G20941)) '() values values '#f '#f '#f '#f) (G11111 'G21093 '(mosh file) '() '() '() '() '((read-line . G20994) (write-to-file . G20959) (file->list . G20958) (file->string . G20957)) '() values values '#f '#f '#f '#f) (G11111 'G21094 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G20952)) '() values values '#f '#f '#f '#f) (G11111 'G21095 '(mosh number) '() '() '() '() '((digit->integer . G20956)) '() values values '#f '#f '#f '#f) (G11111 'G21096 '(mosh string) '() '() '() '() '((print . G20961) (format . G20960) (call-with-string-input-port . G20955) (call-with-string-io . G20954) (string-split . G20953) (string->regexp . G20951)) '() values values '#f '#f '#f '#f) (G11111 'G21097 '(mosh list) '() '() '() '() '((assoc-ref . G20963)) '() values values '#f '#f '#f '#f) (G11111 'G21098 '(mosh regexp) '() '() '() '() '((rxmatch . G20950) (regexp-replace-all . G20949)) '() values values '#f '#f '#f '#f) (G11111 'G21099 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G20948)) '() values values '#f '#f '#f '#f) (G11111 'G21100 '(system) '() '() '() '() '((readdir . G20947) (get-environment-variables . G20946) (get-environment-variable . G20945)) '() values values '#f '#f '#f '#f) (G11111 'G21101 '(srfi-1) '() '() '() '() '((dotted-list? . G20993) (circular-list? . G20992) (proper-list? . G20991) (circular-list . G20990) (last . G20989) (last-pair . G20988) (not-pair? . G20987) (split-at! . G20986) (split-at . G20985) (list= . G20984) (list-copy . G20983) (list-tabulate . G20982) (make-list . G20981) (xcons . G20980) (tenth . G20979) (ninth . G20978) (eighth . G20977) (seventh . G20976) (sixth . G20975) (fifth . G20974) (drop-right! . G20973) (drop-right . G20972) (take-right . G20971) (take! . G20970) (drop . G20969) (take . G20968) (car+cdr . G20967) (third . G20966) (second . G20965) (first . G20964) (alist-cons . G20962)) '() values values '#f '#f '#f '#f))
(begin (define G20319 '#f) (define G20320 '#f) (define G20321 '#f) (define G20322 '#f) (define G20323 '#f) (define G20324 '#f) (define G20325 '#f) (define G20326 '#f) (define G20327 '#f) (define G20328 '#f) (define G20329 '#f) (define G20330 '#f) (define G20331 '#f) ((lambda (G20203 G20205 G20207 G20209 G20211 G20213 G20215 G20217 G20219 G20221 G20223 G20225 G20227) (begin (set! G20203 (lambda (G20247 G20248) (letrec ((G20251 (lambda (G20253 G20254) (if (null? G20254) (if '#f '#f (void)) (begin (G20247 G20253 (car G20254)) (G20251 (+ G20253 '1) (cdr G20254))))))) (G20251 '1 G20248)))) (set! G20205 (G10442 write)) (set! G20207 (G10442 (get-command-line))) (set! G20209 (lambda (G20257) (cons '"." (G11095)))) (set! G20211 (lambda (G20259 . G20261) (begin (apply G20225 G20259 'load G20261) (void)))) (set! G20213 (lambda (G20263) (begin (apply G20225 G20263 'load (G20207)) (void)))) (set! G20215 (lambda () (G20213 '"ironscheme-buildscript.ss"))) (set! G20217 (lambda (G20265) (G18797 G20265 (G18817)))) (set! G20219 (lambda () (G20217 '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G20221 (lambda (G20267) (G20225 G20267 'compile))) (set! G20223 (lambda (G20269) (G20225 G20269 'closure))) (set! G20225 (lambda (G20271 G20272 . G20275) ((lambda (G20279 G20280) ((lambda (G20283) (dynamic-wind G20283 (lambda () ((lambda (G20285) ((lambda (G20287) (if (eqv? G20287 'closure) (G18816 G20285) (if (eqv? G20287 'load) ((lambda (G20290 G20291) ((lambda (G20294) (dynamic-wind G20294 (lambda () ((G18815 G20285))) G20294)) (lambda () ((lambda (G20296) (begin (G20290 G20291) (set! G20291 G20296))) (G20290))))) G20207 (cons G20271 (map (lambda (G20298) (format '"~a" G20298)) G20275))) (if (eqv? G20287 'compile) (begin (G18815 G20285) (G11099 G10437 G10542)) (void))))) G20272)) (with-input-from-file G20271 (lambda () ((letrec ((G20300 (lambda () ((lambda (G20302) (if (eof-object? G20302) '() (cons G20302 (G20300)))) (G10432))))) G20300)))))) G20283)) (lambda () ((lambda (G20304) (begin (G20279 G20280) (set! G20280 G20304))) (G20279))))) G11095 (G20209 G20271)))) (set! G20227 (lambda (G20306 G20307) ((lambda (G20310) (begin (format G20307 '"    ~a" (record-type-name G20310)) ((lambda (G20312) ((lambda (G20314) (if (eqv? G20314 '0) (newline) (if (eqv? G20314 '1) (begin (display '": " G20307) (write ((record-accessor G20310 '0) G20306) G20307) (newline G20307)) (begin (display '":\n") ((letrec ((G20315 (lambda (G20317) (if (= G20317 (vector-length G20312)) (void) (begin (display '"       " G20307) (display (vector-ref G20312 G20317) G20307) (display '": " G20307) (write ((record-accessor G20310 G20317) G20306) G20307) (newline G20307) (G20315 (+ G20317 '1))))))) G20315) '0))))) (vector-length G20312))) (record-type-field-names G20310)))) (record-rtd G20306)))) (begin (set! G20331 G20227) (set! G20330 G20225) (set! G20329 G20223) (set! G20328 G20221) (set! G20327 G20219) (set! G20326 G20217) (set! G20325 G20215) (set! G20324 G20213) (set! G20323 G20211) (set! G20322 G20209) (set! G20321 G20207) (set! G20320 G20205) (set! G20319 G20203) (G11100 G10438) (set-symbol-value! 'load G20213) (set-symbol-value! 'eval-r6rs G20217) (set-symbol-value! 'int-env-syms G18790) (set-symbol-value! 'expanded2core G10541) (set-symbol-value! 'trace-printer G20205) (G11095 '("." "/tmp/")) ((lambda (G20228 G20229) (with-exception-handler (lambda (G20232) (begin (display '" Condition components:\n" G20229) (G20203 (lambda (G20234 G20235) ((lambda (G20238) (begin (format G20229 '"   ~d. ~a" G20234 (record-type-name G20238)) ((lambda (G20240) ((lambda (G20242) (if (eqv? G20242 '0) (newline) (if (eqv? G20242 '1) (begin (display '": ") (write ((record-accessor G20238 '0) G20235)) (newline)) (begin (display '":\n") ((letrec ((G20243 (lambda (G20245) (if (= G20245 (vector-length G20240)) (void) (begin (display '"       ") (display (vector-ref G20240 G20245)) (display '": ") (write ((record-accessor G20238 G20245) G20235)) (newline) (G20243 (+ G20245 '1))))))) G20243) '0))))) (vector-length G20240))) (record-type-field-names G20238)))) (record-rtd G20235))) (simple-conditions G20232)))) (lambda () (G20225 (car G20228) 'load)))) (G20207) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))
