;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G287a@read-annotated G287c@annotation-stripped G287e@annotation? G2880@annotation-source G2882@annotation-expression G2884@scm->fasl G2886@serialize-library G2888@load-serialized-library G288a@make-record-printer G288c@compile-core G288e@read-library-source-file G2890@make-parameter G292a@file-options-spec) (begin (set! G287a@read-annotated read) (set! G287c@annotation-stripped (lambda (G292b@x) (G2882@annotation-expression G292b@x))) (set! G287e@annotation? (lambda (G292d@x) (source-info G292d@x))) (set! G2880@annotation-source (lambda (G292f@x) (source-info G292f@x))) (set! G2882@annotation-expression (lambda (G2931@x) (if (pair? G2931@x) (cons (car G2931@x) (cdr G2931@x)) (display '"line:46\n")))) (set! G2884@scm->fasl (lambda (G2933@filename) (string-append G2933@filename '".fasl"))) (set! G2886@serialize-library (lambda (G2935@filename G2936@obj) (begin (format '#t '"serialize-library ~a\n..." G2935@filename) ((lambda (G2939@fasl-file) (begin (if (file-exists? G2939@fasl-file) (delete-file G2939@fasl-file) (void)) (call/cc (lambda (G293c@G293b) (with-exception-handler (lambda (G293e@c) (G293c@G293b (if '#t (begin (format '#t '"Warning:serialize-library failed " G2935@filename) (if (file-exists? G2939@fasl-file) (delete-file G2939@fasl-file) (void)) '#f) (raise G293e@c)))) (lambda () (begin '#f (call-with-port (open-file-output-port G2939@fasl-file) (lambda (G2940@port) ((symbol-value 'fasl-write!) G2936@obj G2940@port))) (display '"OK\n")))))))) (G2884@scm->fasl G2935@filename))))) (set! G2888@load-serialized-library (lambda (G2942@filename G2943@obj) ((lambda (G2946@fasl-file) (if (if (file-exists? G2946@fasl-file) (begin '#f ((symbol-value 'file-newer?) G2946@fasl-file G2942@filename)) '#f) ((lambda (G2948@expanded2core) ((lambda (G294a@code) ((lambda (G294c@pivot) ((lambda (G294e@visit) ((lambda (G2950@visit-proc) ((lambda () (begin (set-car! G294c@pivot G2950@visit-proc) ((lambda (G2952@pivot) ((lambda (G2954@invoke) ((lambda () (begin (set-car! G2952@pivot (lambda () (eval-core G2954@invoke))) (apply G2943@obj G294a@code))))) (G2948@expanded2core (car G2952@pivot)))) (cdr G294c@pivot)) '#t)))) (lambda () (eval-core G294e@visit)))) (G2948@expanded2core (car G294c@pivot)))) (cddddr (cddddr G294a@code)))) (call-with-port (open-file-input-port G2946@fasl-file) (symbol-value 'fasl-read!)))) (symbol-value 'expanded2core)) '#f)) (G2884@scm->fasl G2942@filename)))) (set! G288a@make-record-printer (lambda (G2956@name G2957@printer) (lambda G295a@x (begin (display '"record printer") (for-each display G295a@x))))) (set! G288c@compile-core (lambda G295c@x (apply error 'comile-core '"not implementated" G295c@x))) (set! G288e@read-library-source-file (lambda (G295e@file-name) (with-input-from-file G295e@file-name G287a@read-annotated))) (set! G2890@make-parameter (lambda G296e ((lambda (G296f) (if (= G296f '1) (apply (lambda (G2960@x) (G2890@make-parameter G2960@x (lambda (G2962@x) G2962@x))) G296e) (if (= G296f '2) (apply (lambda (G2964@x G2965@fender) ((lambda (G2968@x) (lambda G296c ((lambda (G296d) (if (= G296d '0) (apply (lambda () G2968@x) G296c) (if (= G296d '1) (apply (lambda (G296a@v) (set! G2968@x (G2965@fender G296a@v))) G296c) (error 'apply '"invalid arg count")))) (length G296c)))) (G2965@fender G2964@x))) G296e) (error 'apply '"invalid arg count")))) (length G296e)))) (set! G292a@file-options-spec (lambda (G2970@x) G2970@x)) (begin (set! G297e@G292a@file-options-spec G292a@file-options-spec) (set! G297d@G2890@make-parameter G2890@make-parameter) (set! G297c@G288e@read-library-source-file G288e@read-library-source-file) (set! G297b@G288c@compile-core G288c@compile-core) (set! G297a@G288a@make-record-printer G288a@make-record-printer) (set! G2979@G2888@load-serialized-library G2888@load-serialized-library) (set! G2978@G2886@serialize-library G2886@serialize-library) (set! G2977@G2884@scm->fasl G2884@scm->fasl) (set! G2976@G2882@annotation-expression G2882@annotation-expression) (set! G2975@G2880@annotation-source G2880@annotation-source) (set! G2974@G287e@annotation? G287e@annotation?) (set! G2973@G287c@annotation-stripped G287c@annotation-stripped) (set! G2972@G287a@read-annotated G287a@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2983@current-primitive-locations G2985@mutable? G2987@rewriter G2989@expanded->core G298b@compile-core-expr G298d@pretty-print G298f@compile-core-expr-to-port) (begin (set! G2983@current-primitive-locations (G297d@G2890@make-parameter (lambda (G2990@x) '#f) (lambda (G2992@p) G2992@p))) (set! G2985@mutable? (lambda (G2994@x) ((lambda (G2997@simple?) (begin (set! G2997@simple? (lambda (G2998@x) ((lambda (G299a@t) (if G299a@t G299a@t ((lambda (G299c@t) (if G299c@t G299c@t ((lambda (G299e@t) (if G299e@t G299e@t ((lambda (G29a0@t) (if G29a0@t G29a0@t ((lambda (G29a2@t) (if G29a2@t G29a2@t ((lambda (G29a4@t) (if G29a4@t G29a4@t (begin '#f (number? G2998@x)))) (bytevector? G2998@x)))) (string? G2998@x)))) (boolean? G2998@x)))) (symbol? G2998@x)))) (char? G2998@x)))) (null? G2998@x)))) (not (G2997@simple? G2994@x)))) '#f))) (set! G2987@rewriter (lambda (G29a6@quote-hack?) ((lambda (G29a9@f) (begin (set! G29a9@f (lambda (G29aa@x) (if (pair? G29aa@x) ((lambda (G29ac@t) (if (memv G29ac@t '(quote)) (if (if G29a6@quote-hack? (begin '#f (G2985@mutable? (cadr G29aa@x))) '#f) ((lambda (G29ae@g) (begin (set-symbol-value! G29ae@g (cadr G29aa@x)) G29ae@g)) (gensym)) G29aa@x) (if (memv G29ac@t '(case-lambda)) (cons 'case-lambda (map (lambda (G29b0@x) (cons (car G29b0@x) (map G29a9@f (cdr G29b0@x)))) (cdr G29aa@x))) (if (memv G29ac@t '(lambda)) (cons* 'lambda (cadr G29aa@x) (map G29a9@f (cddr G29aa@x))) (if (memv G29ac@t '(letrec)) ((lambda (G29b2@bindings G29b3@body*) ((lambda (G29b6@lhs* G29b7@rhs*) (cons* 'letrec (map list G29b6@lhs* (map G29a9@f G29b7@rhs*)) (map G29a9@f G29b3@body*))) (map car G29b2@bindings) (map cadr G29b2@bindings))) (cadr G29aa@x) (cddr G29aa@x)) (if (memv G29ac@t '(letrec*)) ((lambda (G29ba@bindings G29bb@body*) ((lambda (G29be@lhs* G29bf@rhs*) (cons* 'letrec* (map list G29be@lhs* (map G29a9@f G29bf@rhs*)) (map G29a9@f G29bb@body*))) (map car G29ba@bindings) (map cadr G29ba@bindings))) (cadr G29aa@x) (cddr G29aa@x)) (if (memv G29ac@t '(library-letrec*)) ((lambda (G29c2@name G29c3@x) ((lambda (G29c6@bindings G29c7@body*) ((lambda (G29ca@lhs* G29cb@lhs** G29cc@rhs*) (cons* 'library-letrec* G29c2@name (map list G29ca@lhs* G29cb@lhs** (map G29a9@f G29cc@rhs*)) (map G29a9@f G29c7@body*))) (map car G29c6@bindings) (map cadr G29c6@bindings) (map caddr G29c6@bindings))) (cadr G29c3@x) (cddr G29c3@x))) (cadr G29aa@x) (cdr G29aa@x)) (if (memv G29ac@t '(begin)) (cons 'begin (map G29a9@f (cdr G29aa@x))) (if (memv G29ac@t '(set!)) (list 'set! (cadr G29aa@x) (G29a9@f (caddr G29aa@x))) (if (memv G29ac@t '(primitive)) ((lambda (G29d0@op) ((lambda (G29d2@t) (if G29d2@t ((lambda (G29d4@loc) G29d4@loc) G29d2@t) G29d0@op)) ((G2983@current-primitive-locations) G29d0@op))) (cadr G29aa@x)) (if (memv G29ac@t '(define)) G29aa@x (if (list? G29aa@x) (map G29a9@f G29aa@x) (error 'rewrite '"invalid form ~s ~s" G29aa@x (list? G29aa@x)))))))))))))) (car G29aa@x)) G29aa@x))) G29a9@f)) '#f))) (set! G2989@expanded->core (lambda (G29d6@x) ((G2987@rewriter '#t) G29d6@x))) (set! G298b@compile-core-expr (lambda (G29d8@x) ((G2987@rewriter '#f) G29d8@x))) (set! G298d@pretty-print write) (set! G298f@compile-core-expr-to-port (lambda (G29da@x G29db@p) (G298d@pretty-print ((G2987@rewriter '#f) G29da@x) G29db@p))) (begin (set! G29e4@G298f@compile-core-expr-to-port G298f@compile-core-expr-to-port) (set! G29e3@G298d@pretty-print G298d@pretty-print) (set! G29e2@G298b@compile-core-expr G298b@compile-core-expr) (set! G29e1@G2989@expanded->core G2989@expanded->core) (set! G29e0@G2987@rewriter G2987@rewriter) (set! G29df@G2985@mutable? G2985@mutable?) (set! G29de@G2983@current-primitive-locations G2983@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a3e@make-collection G2a40@current-library-collection G2a46@G2a41 G2a48@G2a43 G2a4a@G2a42 G2a4f@library? G2a51@make-library G2a53@library-id G2a55@library-name G2a57@library-version G2a59@library-imp* G2a5b@library-vis* G2a5d@library-inv* G2a5f@library-subst G2a61@library-env G2a63@library-visit-state G2a65@library-invoke-state G2a67@library-visit-code G2a69@library-invoke-code G2a6b@library-visible? G2a6d@library-source-file-name G2a6f@set-library-id! G2a71@set-library-name! G2a73@set-library-version! G2a75@set-library-imp*! G2a77@set-library-vis*! G2a79@set-library-inv*! G2a7b@set-library-subst! G2a7d@set-library-env! G2a7f@set-library-visit-state! G2a81@set-library-invoke-state! G2a83@set-library-visit-code! G2a85@set-library-invoke-code! G2a87@set-library-visible?! G2a89@set-library-source-file-name! G2a8b@rp G2a8d@find-dependencies G2a8f@find-library-by G2a91@library-path G2a93@library-extensions G2a95@library-name->file-name G2a97@file-locator G2a99@serialize-all G2a9b@current-precompiled-library-loader G2a9d@try-load-from-file G2a9f@library-loader G2aa1@current-library-expander G2aa3@external-pending-libraries G2aa5@find-external-library G2aa7@find-library-by-name G2aa9@library-exists? G2aab@find-library-by-spec/die G2aad@label->binding-table G2aaf@install-library-record G2ab1@install-library G2ab3@imported-label->binding G2ab5@invoke-library G2ab7@visit-library G2ab9@invoke-library-by-spec G2abb@installed-libraries G2abd@library-spec) (begin (set! G2a3e@make-collection (lambda () ((lambda (G2abe@set) ((lambda (G2ac1@set-cons) (begin (set! G2ac1@set-cons (lambda (G2ac6@x G2ac7@ls) (if (memq G2ac6@x G2ac7@ls) G2ac7@ls (cons G2ac6@x G2ac7@ls)))) (lambda G2ac4 ((lambda (G2ac5) (if (= G2ac5 '0) (apply (lambda () G2abe@set) G2ac4) (if (= G2ac5 '1) (apply (lambda (G2ac2@x) (set! G2abe@set (G2ac1@set-cons G2ac2@x G2abe@set))) G2ac4) (error 'apply '"invalid arg count")))) (length G2ac4))))) '#f)) '()))) (set! G2a40@current-library-collection (G297d@G2890@make-parameter (G2a3e@make-collection) (lambda (G2aca@x) (begin (if (not (procedure? G2aca@x)) (assertion-violation 'current-library-collection '"not a procedure" G2aca@x) (void)) G2aca@x)))) (set! G2a46@G2a41 (make-record-type-descriptor 'library '#f 'G2a44 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a48@G2a43 '#f) (set! G2a4a@G2a42 (make-record-constructor-descriptor G2a46@G2a41 '#f G2a48@G2a43)) (set! G2a4f@library? (record-predicate G2a46@G2a41)) (set! G2a51@make-library (record-constructor G2a4a@G2a42)) (set! G2a53@library-id (record-accessor G2a46@G2a41 '0)) (set! G2a55@library-name (record-accessor G2a46@G2a41 '1)) (set! G2a57@library-version (record-accessor G2a46@G2a41 '2)) (set! G2a59@library-imp* (record-accessor G2a46@G2a41 '3)) (set! G2a5b@library-vis* (record-accessor G2a46@G2a41 '4)) (set! G2a5d@library-inv* (record-accessor G2a46@G2a41 '5)) (set! G2a5f@library-subst (record-accessor G2a46@G2a41 '6)) (set! G2a61@library-env (record-accessor G2a46@G2a41 '7)) (set! G2a63@library-visit-state (record-accessor G2a46@G2a41 '8)) (set! G2a65@library-invoke-state (record-accessor G2a46@G2a41 '9)) (set! G2a67@library-visit-code (record-accessor G2a46@G2a41 '10)) (set! G2a69@library-invoke-code (record-accessor G2a46@G2a41 '11)) (set! G2a6b@library-visible? (record-accessor G2a46@G2a41 '12)) (set! G2a6d@library-source-file-name (record-accessor G2a46@G2a41 '13)) (set! G2a6f@set-library-id! (record-mutator G2a46@G2a41 '0)) (set! G2a71@set-library-name! (record-mutator G2a46@G2a41 '1)) (set! G2a73@set-library-version! (record-mutator G2a46@G2a41 '2)) (set! G2a75@set-library-imp*! (record-mutator G2a46@G2a41 '3)) (set! G2a77@set-library-vis*! (record-mutator G2a46@G2a41 '4)) (set! G2a79@set-library-inv*! (record-mutator G2a46@G2a41 '5)) (set! G2a7b@set-library-subst! (record-mutator G2a46@G2a41 '6)) (set! G2a7d@set-library-env! (record-mutator G2a46@G2a41 '7)) (set! G2a7f@set-library-visit-state! (record-mutator G2a46@G2a41 '8)) (set! G2a81@set-library-invoke-state! (record-mutator G2a46@G2a41 '9)) (set! G2a83@set-library-visit-code! (record-mutator G2a46@G2a41 '10)) (set! G2a85@set-library-invoke-code! (record-mutator G2a46@G2a41 '11)) (set! G2a87@set-library-visible?! (record-mutator G2a46@G2a41 '12)) (set! G2a89@set-library-source-file-name! (record-mutator G2a46@G2a41 '13)) (set! G2a8b@rp (G297a@G288a@make-record-printer 'library (lambda (G2acc@x G2acd@p G2ace@wr) (begin (if (not (G2a4f@library? G2acc@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a57@library-version G2acc@x)) (G2a55@library-name G2acc@x) (append (G2a55@library-name G2acc@x) (list (G2a57@library-version G2acc@x))))) G2acd@p))))) (set! G2a8d@find-dependencies (lambda (G2ad2@ls) (if (null? G2ad2@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2a8f@find-library-by (lambda (G2ad4@pred) ((letrec ((G2ad6@f (lambda (G2ad8@ls) (if (null? G2ad8@ls) '#f (if (G2ad4@pred (car G2ad8@ls)) (car G2ad8@ls) (G2ad6@f (cdr G2ad8@ls))))))) G2ad6@f) ((G2a40@current-library-collection))))) (set! G2a91@library-path (G297d@G2890@make-parameter '(".") (lambda (G2ada@x) (if (if (list? G2ada@x) (begin '#f (for-all string? G2ada@x)) '#f) (map (lambda (G2adc@x) G2adc@x) G2ada@x) (assertion-violation 'library-path '"not a list of strings" G2ada@x))))) (set! G2a93@library-extensions (G297d@G2890@make-parameter '(".sls" ".ss" ".scm") (lambda (G2ade@x) (if (if (list? G2ade@x) (begin '#f (for-all string? G2ade@x)) '#f) (map (lambda (G2ae0@x) G2ae0@x) G2ade@x) (assertion-violation 'library-extensions '"not a list of strings" G2ade@x))))) (set! G2a95@library-name->file-name (lambda (G2ae2@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2ae6@G2ae4 G2ae7@G2ae5) ((lambda (G2aea@extract G2aeb@p) ((lambda (G2aef@display-hex) (begin (set! G2aef@display-hex (lambda (G2afe@n) (if (<= '0 G2afe@n '9) (display G2afe@n G2aeb@p) (display (integer->char (+ (char->integer '#\A) (- G2afe@n '10))) G2aeb@p)))) (begin ((letrec ((G2af0@f (lambda (G2af2@ls) (if (not (null? G2af2@ls)) (begin (display '"/" G2aeb@p) (for-each (lambda (G2af4@c) (if ((lambda (G2af6@t) (if G2af6@t G2af6@t ((lambda (G2af8@t) (if G2af8@t G2af8@t ((lambda (G2afa@t) (if G2afa@t G2afa@t (begin '#f (memv G2af4@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2af4@c '#\9)))) (char<=? '#\A G2af4@c '#\Z)))) (char<=? '#\a G2af4@c '#\z)) (display G2af4@c G2aeb@p) (begin (display '"%" G2aeb@p) ((lambda (G2afc@n) (begin (G2aef@display-hex (quotient G2afc@n '16)) (G2aef@display-hex (remainder G2afc@n '16)))) (char->integer G2af4@c))))) (string->list (symbol->string (car G2af2@ls)))) (G2af0@f (cdr G2af2@ls))) (void))))) G2af0@f) G2ae2@x) (G2aea@extract)))) '#f)) G2ae7@G2ae5 G2ae6@G2ae4))))) (set! G2a97@file-locator (G297d@G2890@make-parameter (lambda (G2b00@x) ((lambda (G2b02@str) ((letrec ((G2b04@f (lambda (G2b06@ls G2b07@exts G2b08@failed-list) (if (null? G2b06@ls) ((lambda () ((lambda (G2b14@G2b0f G2b16@G2b11 G2b18@G2b10 G2b1d@G2b0e G2b1f@make-library-resolution-condition G2b21@G2b0c G2b23@G2b0d G2b25@library-resolution-condition? G2b27@condition-library G2b29@condition-files) (begin (set! G2b14@G2b0f (make-record-type-descriptor '&library-resolution &condition-rtd 'G2b12 '#f '#f '#((immutable library) (immutable files)))) (set! G2b16@G2b11 '#f) (set! G2b18@G2b10 (make-record-constructor-descriptor G2b14@G2b0f &condition-rcd G2b16@G2b11)) (set! G2b1d@G2b0e (record-predicate G2b14@G2b0f)) (set! G2b1f@make-library-resolution-condition (record-constructor G2b18@G2b10)) (set! G2b21@G2b0c (record-accessor G2b14@G2b0f '0)) (set! G2b23@G2b0d (record-accessor G2b14@G2b0f '1)) (set! G2b25@library-resolution-condition? (condition-predicate G2b14@G2b0f)) (set! G2b27@condition-library (condition-accessor G2b14@G2b0f G2b21@G2b0c)) (set! G2b29@condition-files (condition-accessor G2b14@G2b0f G2b23@G2b0d)) (raise (condition (G4c02@G4b18@make-error) (G4c1c@G4b6e@make-who-condition 'expander) (G4bee@G4ad8@make-message-condition '"cannot locate library in library-path") (G2b1f@make-library-resolution-condition G2b00@x (reverse G2b08@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2b07@exts) (G2b04@f (cdr G2b06@ls) (G2a93@library-extensions) G2b08@failed-list) ((lambda (G2b2a@name) (if (file-exists? G2b2a@name) G2b2a@name (G2b04@f G2b06@ls (cdr G2b07@exts) (cons G2b2a@name G2b08@failed-list)))) (string-append (car G2b06@ls) G2b02@str (car G2b07@exts)))))))) G2b04@f) (G2a91@library-path) (G2a93@library-extensions) '())) (G2a95@library-name->file-name G2b00@x))) (lambda (G2b2c@f) (if (procedure? G2b2c@f) G2b2c@f (assertion-violation 'file-locator '"not a procedure" G2b2c@f))))) (set! G2a99@serialize-all (lambda (G2b2e@serialize G2b2f@compile) ((lambda (G2b33@library-desc) (begin (set! G2b33@library-desc (lambda (G2b36@x) (list (G2a53@library-id G2b36@x) (G2a55@library-name G2b36@x)))) (for-each (lambda (G2b34@x) (if (G2a6d@library-source-file-name G2b34@x) (G2b2e@serialize (G2a6d@library-source-file-name G2b34@x) (list (G2a53@library-id G2b34@x) (G2a55@library-name G2b34@x) (G2a57@library-version G2b34@x) (map G2b33@library-desc (G2a59@library-imp* G2b34@x)) (map G2b33@library-desc (G2a5b@library-vis* G2b34@x)) (map G2b33@library-desc (G2a5d@library-inv* G2b34@x)) (G2a5f@library-subst G2b34@x) (G2a61@library-env G2b34@x) (G2b2f@compile (G2a67@library-visit-code G2b34@x)) (G2b2f@compile (G2a69@library-invoke-code G2b34@x)) (G2a6b@library-visible? G2b34@x))) (void))) ((G2a40@current-library-collection))))) '#f))) (set! G2a9b@current-precompiled-library-loader (G297d@G2890@make-parameter (lambda (G2b38@filename G2b39@sk) '#f))) (set! G2a9d@try-load-from-file (lambda (G2b3c@filename) ((G2a9b@current-precompiled-library-loader) G2b3c@filename (lambda G2b62 ((lambda (G2b63) (if (= G2b63 '11) (apply (lambda (G2b3e@id G2b3f@name G2b40@ver G2b41@imp* G2b42@vis* G2b43@inv* G2b44@exp-subst G2b45@exp-env G2b46@visit-proc G2b47@invoke-proc G2b48@visible?) ((letrec ((G2b54@f (lambda (G2b56@deps) (if (null? G2b56@deps) (begin (G2ab1@install-library G2b3e@id G2b3f@name G2b40@ver G2b41@imp* G2b42@vis* G2b43@inv* G2b44@exp-subst G2b45@exp-env G2b46@visit-proc G2b47@invoke-proc '#f '#f G2b48@visible? '#f) '#t) ((lambda (G2b58@d) ((lambda (G2b5a@label G2b5b@dname) ((lambda (G2b5e@l) (if (if (G2a4f@library? G2b5e@l) (begin '#f (eq? G2b5a@label (G2a53@library-id G2b5e@l))) '#f) (G2b54@f (cdr G2b56@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b3f@name G2b5b@dname G2b3c@filename G2b5e@l G2b5a@label (G2a53@library-id G2b5e@l)) '#f))) (G2aa7@find-library-by-name G2b5b@dname))) (car G2b58@d) (cadr G2b58@d))) (car G2b56@deps)))))) G2b54@f) (append G2b41@imp* G2b42@vis* G2b43@inv*))) G2b62) (if (>= G2b63 '0) (apply (lambda G2b60@others '#f) G2b62) (error 'apply '"invalid arg count")))) (length G2b62)))))) (set! G2a9f@library-loader (G297d@G2890@make-parameter (lambda (G2b64@x) ((lambda (G2b66@file-name) (if (not G2b66@file-name) (assertion-violation '#f '"cannot file library" G2b64@x) ((lambda (G2b68@t) (if G2b68@t G2b68@t (begin '#f (begin (display G2b66@file-name) ((G2aa1@current-library-expander) (G297c@G288e@read-library-source-file G2b66@file-name) G2b66@file-name (lambda (G2b6a@name) (if (not (equal? G2b6a@name G2b64@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b6e@G2b6c G2b6f@G2b6d) ((lambda (G2b72@e G2b73@p) (begin (display '"expected to find library " G2b73@p) (write G2b64@x G2b73@p) (display '" in file " G2b73@p) (display G2b66@file-name G2b73@p) (display '", found " G2b73@p) (write G2b6a@name G2b73@p) (display '" instead" G2b73@p) (G2b72@e))) G2b6f@G2b6d G2b6e@G2b6c)))) (void)))))))) (G2a9d@try-load-from-file G2b66@file-name)))) ((G2a97@file-locator) G2b64@x))) (lambda (G2b76@f) (if (procedure? G2b76@f) G2b76@f (assertion-violation 'library-locator '"not a procedure" G2b76@f))))) (set! G2aa1@current-library-expander (G297d@G2890@make-parameter (lambda (G2b78@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b7a@f) (if (procedure? G2b7a@f) G2b7a@f (assertion-violation 'library-expander '"not a procedure" G2b7a@f))))) (set! G2aa3@external-pending-libraries (G297d@G2890@make-parameter '())) (set! G2aa5@find-external-library (lambda (G2b7c@name) (begin (if (member G2b7c@name (G2aa3@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b7c@name) (void)) ((lambda (G2b80@G2b7e@external-pending-libraries G2b81@G2b7f@external-pending-libraries) ((lambda (G2b84@swap) (dynamic-wind G2b84@swap (lambda () (begin ((G2a9f@library-loader) G2b7c@name) ((lambda (G2b86@t) (if G2b86@t G2b86@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b7c@name)))) (G2a8f@find-library-by (lambda (G2b88@x) (equal? (G2a55@library-name G2b88@x) G2b7c@name)))))) G2b84@swap)) (lambda () ((lambda (G2b8a@t) (begin (G2b80@G2b7e@external-pending-libraries G2b81@G2b7f@external-pending-libraries) (set! G2b81@G2b7f@external-pending-libraries G2b8a@t))) (G2b80@G2b7e@external-pending-libraries))))) G2aa3@external-pending-libraries (cons G2b7c@name (G2aa3@external-pending-libraries)))))) (set! G2aa7@find-library-by-name (lambda (G2b8c@name) ((lambda (G2b8e@t) (if G2b8e@t G2b8e@t (begin '#f (G2aa5@find-external-library G2b8c@name)))) (G2a8f@find-library-by (lambda (G2b90@x) (equal? (G2a55@library-name G2b90@x) G2b8c@name)))))) (set! G2aa9@library-exists? (lambda (G2b92@name) (if (G2a8f@find-library-by (lambda (G2b94@x) (equal? (G2a55@library-name G2b94@x) G2b92@name))) (begin '#f '#t) '#f))) (set! G2aab@find-library-by-spec/die (lambda (G2b96@spec) ((lambda (G2b98@id) ((lambda (G2b9a@t) (if G2b9a@t G2b9a@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2b96@spec)))) (G2a8f@find-library-by (lambda (G2b9c@x) (eq? G2b98@id (G2a53@library-id G2b9c@x)))))) (car G2b96@spec)))) (set! G2aad@label->binding-table (make-eq-hashtable)) (set! G2aaf@install-library-record (lambda (G2b9e@lib) (begin ((lambda (G2ba0@exp-env) (for-each (lambda (G2ba2@x) ((lambda (G2ba4@label G2ba5@binding) ((lambda (G2ba8@binding) (hashtable-set! G2aad@label->binding-table G2ba4@label G2ba8@binding)) ((lambda (G2baa@t) (if (memv G2baa@t '(global)) (cons 'global (cons G2b9e@lib (cdr G2ba5@binding))) (if (memv G2baa@t '(global-macro)) (cons 'global-macro (cons G2b9e@lib (cdr G2ba5@binding))) (if (memv G2baa@t '(global-macro!)) (cons 'global-macro! (cons G2b9e@lib (cdr G2ba5@binding))) G2ba5@binding)))) (car G2ba5@binding)))) (car G2ba2@x) (cdr G2ba2@x))) G2ba0@exp-env)) (G2a61@library-env G2b9e@lib)) ((G2a40@current-library-collection) G2b9e@lib)))) (set! G2ab1@install-library (lambda (G2bac@id G2bad@name G2bae@ver G2baf@imp* G2bb0@vis* G2bb1@inv* G2bb2@exp-subst G2bb3@exp-env G2bb4@visit-proc G2bb5@invoke-proc G2bb6@visit-code G2bb7@invoke-code G2bb8@visible? G2bb9@source-file-name) ((lambda (G2bc8@imp-lib* G2bc9@vis-lib* G2bca@inv-lib*) (begin (if (not (if (symbol? G2bac@id) (if (list? G2bad@name) (begin '#f (list? G2bae@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2bac@id G2bad@name G2bae@ver) (void)) (if (G2aa9@library-exists? G2bad@name) (assertion-violation 'install-library '"library is already installed" G2bad@name) (void)) ((lambda (G2bce@lib) (G2aaf@install-library-record G2bce@lib)) (G2a51@make-library G2bac@id G2bad@name G2bae@ver G2bc8@imp-lib* G2bc9@vis-lib* G2bca@inv-lib* G2bb2@exp-subst G2bb3@exp-env G2bb4@visit-proc G2bb5@invoke-proc G2bb6@visit-code G2bb7@invoke-code G2bb8@visible? G2bb9@source-file-name)))) (map G2aab@find-library-by-spec/die G2baf@imp*) (map G2aab@find-library-by-spec/die G2bb0@vis*) (map G2aab@find-library-by-spec/die G2bb1@inv*)))) (set! G2ab3@imported-label->binding (lambda (G2bd0@lab) (hashtable-ref G2aad@label->binding-table G2bd0@lab '#f))) (set! G2ab5@invoke-library (lambda (G2bd2@lib) ((lambda (G2bd4@invoke) (if (procedure? G2bd4@invoke) (begin (G2a81@set-library-invoke-state! G2bd2@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2bd2@lib))) (for-each G2ab5@invoke-library (G2a5d@library-inv* G2bd2@lib)) (G2a81@set-library-invoke-state! G2bd2@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2bd2@lib))) (G2bd4@invoke) (G2a81@set-library-invoke-state! G2bd2@lib '#t)) (void))) (G2a65@library-invoke-state G2bd2@lib)))) (set! G2ab7@visit-library (lambda (G2bd6@lib) ((lambda (G2bd8@visit) (if (procedure? G2bd8@visit) (begin (G2a7f@set-library-visit-state! G2bd6@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bd6@lib))) (for-each G2ab5@invoke-library (G2a5b@library-vis* G2bd6@lib)) (G2a7f@set-library-visit-state! G2bd6@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bd6@lib))) (G2bd8@visit) (G2a7f@set-library-visit-state! G2bd6@lib '#t)) (void))) (G2a63@library-visit-state G2bd6@lib)))) (set! G2ab9@invoke-library-by-spec (lambda (G2bda@spec) (G2ab5@invoke-library (G2aab@find-library-by-spec/die G2bda@spec)))) (set! G2abb@installed-libraries (lambda G2be4 ((lambda (G2be5) (if (= G2be5 '1) (apply (lambda (G2bdc@all?) ((letrec ((G2bde@f (lambda (G2be0@ls) (if (null? G2be0@ls) '() (if ((lambda (G2be2@t) (if G2be2@t G2be2@t (begin '#f (G2a6b@library-visible? (car G2be0@ls))))) G2bdc@all?) (cons (car G2be0@ls) (G2bde@f (cdr G2be0@ls))) (G2bde@f (cdr G2be0@ls))))))) G2bde@f) ((G2a40@current-library-collection)))) G2be4) (if (= G2be5 '0) (apply (lambda () (G2abb@installed-libraries '#f)) G2be4) (error 'apply '"invalid arg count")))) (length G2be4)))) (set! G2abd@library-spec (lambda (G2be6@x) (begin (if (not (G2a4f@library? G2be6@x)) (assertion-violation 'library-spec '"not a library" G2be6@x) (void)) (list (G2a53@library-id G2be6@x) (G2a55@library-name G2be6@x) (G2a57@library-version G2be6@x))))) (begin (set! G2c24@G2abd@library-spec G2abd@library-spec) (set! G2c23@G2abb@installed-libraries G2abb@installed-libraries) (set! G2c22@G2ab9@invoke-library-by-spec G2ab9@invoke-library-by-spec) (set! G2c21@G2ab7@visit-library G2ab7@visit-library) (set! G2c20@G2ab5@invoke-library G2ab5@invoke-library) (set! G2c1f@G2ab3@imported-label->binding G2ab3@imported-label->binding) (set! G2c1e@G2ab1@install-library G2ab1@install-library) (set! G2c1d@G2aaf@install-library-record G2aaf@install-library-record) (set! G2c1c@G2aad@label->binding-table G2aad@label->binding-table) (set! G2c1b@G2aab@find-library-by-spec/die G2aab@find-library-by-spec/die) (set! G2c1a@G2aa9@library-exists? G2aa9@library-exists?) (set! G2c19@G2aa7@find-library-by-name G2aa7@find-library-by-name) (set! G2c18@G2aa5@find-external-library G2aa5@find-external-library) (set! G2c17@G2aa3@external-pending-libraries G2aa3@external-pending-libraries) (set! G2c16@G2aa1@current-library-expander G2aa1@current-library-expander) (set! G2c15@G2a9f@library-loader G2a9f@library-loader) (set! G2c14@G2a9d@try-load-from-file G2a9d@try-load-from-file) (set! G2c13@G2a9b@current-precompiled-library-loader G2a9b@current-precompiled-library-loader) (set! G2c12@G2a99@serialize-all G2a99@serialize-all) (set! G2c11@G2a97@file-locator G2a97@file-locator) (set! G2c10@G2a95@library-name->file-name G2a95@library-name->file-name) (set! G2c0f@G2a93@library-extensions G2a93@library-extensions) (set! G2c0e@G2a91@library-path G2a91@library-path) (set! G2c0d@G2a8f@find-library-by G2a8f@find-library-by) (set! G2c0c@G2a8d@find-dependencies G2a8d@find-dependencies) (set! G2c0b@G2a8b@rp G2a8b@rp) (set! G2c0a@G2a89@set-library-source-file-name! G2a89@set-library-source-file-name!) (set! G2c09@G2a87@set-library-visible?! G2a87@set-library-visible?!) (set! G2c08@G2a85@set-library-invoke-code! G2a85@set-library-invoke-code!) (set! G2c07@G2a83@set-library-visit-code! G2a83@set-library-visit-code!) (set! G2c06@G2a81@set-library-invoke-state! G2a81@set-library-invoke-state!) (set! G2c05@G2a7f@set-library-visit-state! G2a7f@set-library-visit-state!) (set! G2c04@G2a7d@set-library-env! G2a7d@set-library-env!) (set! G2c03@G2a7b@set-library-subst! G2a7b@set-library-subst!) (set! G2c02@G2a79@set-library-inv*! G2a79@set-library-inv*!) (set! G2c01@G2a77@set-library-vis*! G2a77@set-library-vis*!) (set! G2c00@G2a75@set-library-imp*! G2a75@set-library-imp*!) (set! G2bff@G2a73@set-library-version! G2a73@set-library-version!) (set! G2bfe@G2a71@set-library-name! G2a71@set-library-name!) (set! G2bfd@G2a6f@set-library-id! G2a6f@set-library-id!) (set! G2bfc@G2a6d@library-source-file-name G2a6d@library-source-file-name) (set! G2bfb@G2a6b@library-visible? G2a6b@library-visible?) (set! G2bfa@G2a69@library-invoke-code G2a69@library-invoke-code) (set! G2bf9@G2a67@library-visit-code G2a67@library-visit-code) (set! G2bf8@G2a65@library-invoke-state G2a65@library-invoke-state) (set! G2bf7@G2a63@library-visit-state G2a63@library-visit-state) (set! G2bf6@G2a61@library-env G2a61@library-env) (set! G2bf5@G2a5f@library-subst G2a5f@library-subst) (set! G2bf4@G2a5d@library-inv* G2a5d@library-inv*) (set! G2bf3@G2a5b@library-vis* G2a5b@library-vis*) (set! G2bf2@G2a59@library-imp* G2a59@library-imp*) (set! G2bf1@G2a57@library-version G2a57@library-version) (set! G2bf0@G2a55@library-name G2a55@library-name) (set! G2bef@G2a53@library-id G2a53@library-id) (set! G2bee@G2a51@make-library G2a51@make-library) (set! G2bed@G2a4f@library? G2a4f@library?) (set! G2bec@G2a4a@G2a42 G2a4a@G2a42) (set! G2beb@G2a48@G2a43 G2a48@G2a43) (set! G2bea@G2a46@G2a41 G2a46@G2a41) (set! G2be9@G2a40@current-library-collection G2a40@current-library-collection) (set! G2be8@G2a3e@make-collection G2a3e@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2c27@build-global-define G2cab@build-lambda G2cad@build-case-lambda G2caf@build-let G2cf7@build-sequence G2cf9@build-void G2cfb@build-letrec G2cfd@build-letrec* G2cff@build-library-letrec* G2d01@build-receive) (begin (set! G2c27@build-global-define (lambda (G2d02@x) (G2cf9@build-void))) (set! G2cab@build-lambda (lambda (G2d04@ae G2d05@vars G2d06@exp) (list 'lambda G2d05@vars G2d06@exp))) (set! G2cad@build-case-lambda (lambda (G2d0a@ae G2d0b@vars* G2d0c@exp*) ((lambda (G2d11@build-error G2d13@build-pred G2d15@build-apply G2d17@expand-case-lambda) (begin (set! G2d11@build-error (lambda (G2d46@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2d13@build-pred (lambda (G2d30@ae G2d31@n G2d32@vars) (call-with-values (lambda () ((letrec ((G2d38@f (lambda (G2d3a@vars G2d3b@count) (if (pair? G2d3a@vars) (G2d38@f (cdr G2d3a@vars) (+ G2d3b@count '1)) (if (null? G2d3a@vars) (values G2d3b@count '=) (values G2d3b@count '>=)))))) G2d38@f) G2d32@vars '0)) (lambda (G2d3e@G2d36 G2d3f@G2d37) ((lambda (G2d42@pred G2d43@count) (list (list 'primitive G2d42@pred) G2d31@n (list 'quote G2d43@count))) G2d3f@G2d37 G2d3e@G2d36))))) (set! G2d15@build-apply (lambda (G2d28@ae G2d29@g G2d2a@vars G2d2b@exp) (list '(primitive apply) (G2cab@build-lambda G2d28@ae G2d2a@vars G2d2b@exp) G2d29@g))) (set! G2d17@expand-case-lambda (lambda (G2d18@ae G2d19@vars G2d1a@exp*) ((lambda (G2d1e@g G2d1f@n) (list 'lambda G2d1e@g (G2caf@build-let G2d18@ae (list G2d1f@n) (list (list '(primitive length) G2d1e@g)) ((letrec ((G2d22@f (lambda (G2d24@vars* G2d25@exp*) (if (null? G2d24@vars*) (G2d11@build-error G2d18@ae) (list 'if (G2d13@build-pred G2d18@ae G2d1f@n (car G2d24@vars*)) (G2d15@build-apply G2d18@ae G2d1e@g (car G2d24@vars*) (car G2d25@exp*)) (G2d22@f (cdr G2d24@vars*) (cdr G2d25@exp*))))))) G2d22@f) G2d0b@vars* G2d1a@exp*)))) (gensym) (gensym)))) (if (= (length G2d0c@exp*) '1) (G2cab@build-lambda G2d0a@ae (car G2d0b@vars*) (car G2d0c@exp*)) (G2d17@expand-case-lambda G2d0a@ae G2d0b@vars* G2d0c@exp*)))) '#f '#f '#f '#f))) (set! G2caf@build-let (lambda (G2d48@ae G2d49@lhs* G2d4a@rhs* G2d4b@body) (cons (G2cab@build-lambda G2d48@ae G2d49@lhs* G2d4b@body) G2d4a@rhs*))) (set! G2cf7@build-sequence (lambda (G2d50@ae G2d51@exps) ((letrec ((G2d54@loop (lambda (G2d56@exps) (if (null? (cdr G2d56@exps)) (car G2d56@exps) (if (equal? (car G2d56@exps) (G2cf9@build-void)) (G2d54@loop (cdr G2d56@exps)) (cons 'begin G2d56@exps)))))) G2d54@loop) G2d51@exps))) (set! G2cf9@build-void (lambda () '((primitive void)))) (set! G2cfb@build-letrec (lambda (G2d58@ae G2d59@vars G2d5a@val-exps G2d5b@body-exp) (if (null? G2d59@vars) G2d5b@body-exp (list 'letrec (map list G2d59@vars G2d5a@val-exps) G2d5b@body-exp)))) (set! G2cfd@build-letrec* (lambda (G2d60@ae G2d61@vars G2d62@val-exps G2d63@body-exp) (if (null? G2d61@vars) G2d63@body-exp (G2caf@build-let G2d60@ae G2d61@vars (map (lambda (G2d68@x) (list 'quote '#f)) G2d61@vars) (G2cf7@build-sequence G2d60@ae (append (map (lambda (G2d6a@lhs G2d6b@rhs) (list 'set! G2d6a@lhs G2d6b@rhs)) G2d61@vars G2d62@val-exps) (list G2d63@body-exp))))))) (set! G2cff@build-library-letrec* (lambda (G2d6e@ae G2d6f@name G2d70@vars G2d71@locs G2d72@val-exps G2d73@body-exp) (list 'library-letrec* G2d6f@name (map list G2d70@vars G2d71@locs G2d72@val-exps) G2d73@body-exp))) (set! G2d01@build-receive (lambda (G2d7a@ae G2d7b@vars G2d7c@producer G2d7d@body*) (begin (display '"************** in ") (cons 'receive (cons G2d7b@vars (cons G2d7c@producer G2d7d@body*)))))) (begin (set! G2d8b@G2d01@build-receive G2d01@build-receive) (set! G2d8a@G2cff@build-library-letrec* G2cff@build-library-letrec*) (set! G2d89@G2cfd@build-letrec* G2cfd@build-letrec*) (set! G2d88@G2cfb@build-letrec G2cfb@build-letrec) (set! G2d87@G2cf9@build-void G2cf9@build-void) (set! G2d86@G2cf7@build-sequence G2cf7@build-sequence) (set! G2d85@G2caf@build-let G2caf@build-let) (set! G2d84@G2cad@build-case-lambda G2cad@build-case-lambda) (set! G2d83@G2cab@build-lambda G2cab@build-lambda) (set! G2d82@G2c27@build-global-define G2c27@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2d98@set-cons G2d9a@set-union G2d9f@top-mark* G2da1@top-marked? G2da3@gen-lexical G2da5@gen-global G2da7@gen-label G2da9@gen-top-level-label G2dab@gen-define-label+loc G2dad@gen-define-label G2db3@G2dae G2db5@G2db0 G2db7@G2daf G2dbc@rib? G2dbe@make-rib G2dc0@rib-sym* G2dc2@rib-mark** G2dc4@rib-label* G2dc6@rib-sealed/freq G2dc8@rib-cache G2dca@set-rib-sym*! G2dcc@set-rib-mark**! G2dce@set-rib-label*! G2dd0@set-rib-sealed/freq! G2dd2@set-rib-cache! G2dd4@make-empty-rib G2dd6@make-cache-rib G2dd8@find-label G2dda@extend-rib! G2ddc@extend-rib/nc! G2dde@make-rib-map G2de0@seal-rib! G2de2@unseal-rib! G2de4@make-full-rib G2dea@G2de5 G2dec@G2de7 G2dee@G2de6 G2df3@stx? G2df5@make-stx G2df7@stx-expr G2df9@stx-mark* G2dfb@stx-subst* G2dfd@stx-ae* G2dff@set-stx-expr! G2e01@set-stx-mark*! G2e03@set-stx-subst*! G2e05@set-stx-ae*! G2e07@rp G2e09@datum->stx G2e0b@gen-mark G2e0d@anti-mark G2e0f@anti-mark? G2e11@join-wraps G2e13@mkstx G2e15@add-mark G2e17@add-subst G2e19@syntax-kind? G2e1b@syntax-vector->list G2e1d@syntax-pair? G2e1f@syntax-vector? G2e21@syntax-null? G2e23@syntax-list? G2e25@syntax-car G2e27@syntax-cdr G2e29@syntax->list G2e2b@id? G2e2d@id->sym G2e2f@same-marks? G2e31@bound-id=? G2e33@free-id=? G2e35@valid-bound-ids? G2e37@distinct-bound-ids? G2e39@bound-id-member? G2e3b@self-evaluating? G2e3d@strip-annotations G2e3f@strip G2e41@stx->datum G2e43@same-marks*? G2e45@id->label G2e47@id->real-label G2e49@label->binding G2e4b@make-binding G2e4d@binding-type G2e4f@binding-value G2e51@raise-unbound-error G2e53@syntax-type G2e6a@sanitize-binding G2e6c@make-variable-transformer G2e6e@variable-transformer? G2e70@variable-transformer-procedure G2e72@make-eval-transformer G2ff6@parse-define G2ff8@parse-define-syntax G2ffa@scheme-stx-hashtable G2ffc@scheme-stx G2ffe@lexical-var G3000@lexical-mutable? G3002@set-lexical-mutable! G3004@add-lexical G3006@add-lexicals G3008@letrec-helper G300a@letrec-transformer G300c@letrec*-transformer G300e@fluid-let-syntax-transformer G3010@type-descriptor-transformer G3012@record-type-descriptor-transformer G3014@record-constructor-descriptor-transformer G3016@when-macro G3018@unless-macro G301a@if-transformer G301c@case-macro G301e@quote-transformer G3020@case-lambda-transformer G3022@lambda-transformer G3024@bless G3026@with-syntax-macro G3028@invalid-fmls-error G302a@let-macro G302c@let-values-macro G302e@let*-values-macro G3030@trace-lambda-macro G3032@trace-define-macro G3034@trace-define-syntax-macro G3036@trace-let/rec-syntax G3038@trace-let-syntax-macro G303a@trace-letrec-syntax-macro G303c@guard-macro G303e@define-enumeration-macro G3040@time-macro G3042@delay-macro G3044@assert-macro G3046@endianness-macro G3048@identifier-syntax-macro G304a@do-macro G304c@let*-macro G304e@or-macro G3050@and-macro G3052@cond-macro G3054@do-include G3056@include-macro G3058@include-into-macro G305a@syntax-rules-macro G305c@quasiquote-macro G305e@quasisyntax-macro G3060@define-struct-macro G3062@define-record-type-macro G3064@define-condition-type-macro G3066@incorrect-usage-macro G3068@parameterize-macro G306a@foreign-call-transformer G306c@convert-pattern G306e@syntax-dispatch G3070@ellipsis? G3072@underscore? G3074@verify-literals G3076@syntax-case-transformer G3078@ellipsis-map G307a@syntax-transformer G307c@core-macro-transformer G307e@file-options-macro G3080@symbol-macro G3082@macro-transformer G3084@local-macro-transformer G3086@do-macro-call G3088@chi-macro G308a@chi-local-macro G308c@chi-global-macro G308e@chi-expr* G3090@chi-application G3092@chi-expr G3094@chi-set! G3096@verify-formals G3098@chi-lambda-clause G309a@chi-lambda-clause* G309c@chi-defun G309e@chi-rhs G30a0@expand-interaction-rhs*/init* G30a2@chi-rhs* G30a4@find-bound=? G30a6@find-dups G30a8@chi-internal G30aa@parse-module G30b0@G30ab G30b2@G30ad G30b4@G30ac G30b9@module-interface? G30bb@make-module-interface G30bd@module-interface-first-mark G30bf@module-interface-exp-id-vec G30c1@module-interface-exp-lab-vec G30c3@set-module-interface-first-mark! G30c5@set-module-interface-exp-id-vec! G30c7@set-module-interface-exp-lab-vec! G30c9@module-interface-exp-id* G30cb@chi-internal-module G30cd@chi-body* G30cf@expand-transformer G30d1@parse-exports G30d3@parse-library-name G30d5@parse-library G30d7@parse-import-spec* G30d9@make-top-rib G30db@make-collector G30dd@inv-collector G30df@vis-collector G30e1@imp-collector G30e3@chi-library-internal G30e5@chi-interaction-expr G30e7@library-body-expander G30e9@core-library-expander G30eb@parse-top-level-program G30ed@top-level-expander G30f3@G30ee G30f5@G30f0 G30f7@G30ef G30fc@env? G30fe@make-env G3100@env-names G3102@env-labels G3104@env-itc G3106@set-env-names! G3108@set-env-labels! G310a@set-env-itc! G310c@rp G3112@G310d G3114@G310f G3116@G310e G311b@interaction-env? G311d@make-interaction-env G311f@interaction-env-rib G3121@interaction-env-r G3123@interaction-env-locs G3125@set-interaction-env-rib! G3127@set-interaction-env-r! G3129@set-interaction-env-locs! G312b@rp G312d@interaction-environment-symbols G312f@environment-bindings G3131@parse-binding G3133@environment? G3135@environment-symbols G3137@environment G3139@null-environment G313b@scheme-report-environment G313d@expand G313f@eval G3141@library-expander G3143@boot-library-expand G3145@rev-map-append G3147@build-exports G3149@make-export-subst G314b@make-export-env/macros G314d@generate-temporaries G314f@free-identifier=? G3151@bound-identifier=? G3153@make-source-condition G3155@extract-position-condition G3157@expression-position G3159@assertion-error G315b@syntax-error G315d@extract-trace G315f@syntax-violation* G3161@syntax-violation G3163@identifier? G3165@datum->syntax G3167@syntax->datum G3169@compile-r6rs-top-level G316b@pre-compile-r6rs-top-level G316d@interaction-environment G316f@top-level-context) (begin (set! G2d98@set-cons (lambda (G3170@x G3171@ls) (if (memq G3170@x G3171@ls) G3171@ls (cons G3170@x G3171@ls)))) (set! G2d9a@set-union (lambda (G3174@ls1 G3175@ls2) (if (null? G3174@ls1) G3175@ls2 (if (memq (car G3174@ls1) G3175@ls2) (G2d9a@set-union (cdr G3174@ls1) G3175@ls2) (cons (car G3174@ls1) (G2d9a@set-union (cdr G3174@ls1) G3175@ls2)))))) (set! G2d9f@top-mark* '(top)) (set! G2da1@top-marked? (lambda (G3178@m*) (memq 'top G3178@m*))) (set! G2da3@gen-lexical (lambda (G317a@sym) (if (symbol? G317a@sym) (gensym G317a@sym) (if (G2df3@stx? G317a@sym) (G2da3@gen-lexical (G2e2d@id->sym G317a@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G317a@sym))))) (set! G2da5@gen-global (lambda (G317c@x) (G2da3@gen-lexical G317c@x))) (set! G2da7@gen-label (lambda (G317e@_) (gensym))) (set! G2da9@gen-top-level-label (lambda (G3180@id G3181@rib) ((lambda (G3185@find) (begin (set! G3185@find (lambda (G3190@sym G3191@mark* G3192@sym* G3193@mark** G3194@label*) (if (pair? G3192@sym*) (begin '#f (if (if (eq? G3190@sym (car G3192@sym*)) (begin '#f (G2e2f@same-marks? G3191@mark* (car G3193@mark**))) '#f) (car G3194@label*) (G3185@find G3190@sym G3191@mark* (cdr G3192@sym*) (cdr G3193@mark**) (cdr G3194@label*)))) '#f))) ((lambda (G3186@sym G3187@mark*) ((lambda (G318a@sym*) ((lambda (G318c@t) (if G318c@t ((lambda (G318e@label) (if (G2c1f@G2ab3@imported-label->binding G318e@label) (gensym) G318e@label)) G318c@t) (gensym))) (if (memq G3186@sym (G2dc0@rib-sym* G3181@rib)) (begin '#f (G3185@find G3186@sym G3187@mark* G318a@sym* (G2dc2@rib-mark** G3181@rib) (G2dc4@rib-label* G3181@rib))) '#f))) (G2dc0@rib-sym* G3181@rib))) (G2e2d@id->sym G3180@id) (G2df9@stx-mark* G3180@id)))) '#f))) (set! G2dab@gen-define-label+loc (lambda (G319a@id G319b@rib) ((lambda (G319e@t) (if G319e@t ((lambda (G31a0@env) ((lambda (G31a2@label G31a3@locs) (values G31a2@label ((lambda (G31a6@t) (if G31a6@t (cdr G31a6@t) ((lambda (G31a8@loc) (begin (G3129@set-interaction-env-locs! G31a0@env (cons (cons G31a2@label G31a8@loc) G31a3@locs)) G31a8@loc)) (G2da3@gen-lexical G319a@id)))) (assq G31a2@label G31a3@locs)))) (G2da9@gen-top-level-label G319a@id G319b@rib) (G3123@interaction-env-locs G31a0@env))) G319e@t) (values (gensym) (G2da3@gen-lexical G319a@id)))) (G316f@top-level-context)))) (set! G2dad@gen-define-label (lambda (G31aa@id G31ab@rib) (if (G316f@top-level-context) (G2da9@gen-top-level-label G31aa@id G31ab@rib) (gensym)))) (set! G2db3@G2dae (make-record-type-descriptor 'rib '#f 'G2db1 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2db5@G2db0 '#f) (set! G2db7@G2daf (make-record-constructor-descriptor G2db3@G2dae '#f G2db5@G2db0)) (set! G2dbc@rib? (record-predicate G2db3@G2dae)) (set! G2dbe@make-rib (record-constructor G2db7@G2daf)) (set! G2dc0@rib-sym* (record-accessor G2db3@G2dae '0)) (set! G2dc2@rib-mark** (record-accessor G2db3@G2dae '1)) (set! G2dc4@rib-label* (record-accessor G2db3@G2dae '2)) (set! G2dc6@rib-sealed/freq (record-accessor G2db3@G2dae '3)) (set! G2dc8@rib-cache (record-accessor G2db3@G2dae '4)) (set! G2dca@set-rib-sym*! (record-mutator G2db3@G2dae '0)) (set! G2dcc@set-rib-mark**! (record-mutator G2db3@G2dae '1)) (set! G2dce@set-rib-label*! (record-mutator G2db3@G2dae '2)) (set! G2dd0@set-rib-sealed/freq! (record-mutator G2db3@G2dae '3)) (set! G2dd2@set-rib-cache! (record-mutator G2db3@G2dae '4)) (set! G2dd4@make-empty-rib (lambda () (G2dbe@make-rib '() '() '() '#f '#f))) (set! G2dd6@make-cache-rib (lambda () (G2dbe@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2dd8@find-label (lambda (G31ae@rib G31af@sym G31b0@mark*) ((lambda (G31b4@ht) (if G31b4@ht (begin '#f ((lambda (G31b6@cv) ((lambda (G31b8@t) (if G31b8@t (cdr G31b8@t) '#f)) (if G31b6@cv (begin '#f (assp (lambda (G31ba@m) (G2e2f@same-marks? G31b0@mark* G31ba@m)) G31b6@cv)) '#f))) (hashtable-ref G31b4@ht G31af@sym '#f))) '#f)) (G2dc8@rib-cache G31ae@rib)))) (set! G2dda@extend-rib! (lambda (G31bc@rib G31bd@id G31be@label) ((lambda (G31c3@find) (begin (set! G31c3@find (lambda (G31d4@sym G31d5@mark* G31d6@sym* G31d7@mark** G31d8@label*) (if (pair? G31d6@sym*) (begin '#f (if (if (eq? G31d4@sym (car G31d6@sym*)) (begin '#f (G2e2f@same-marks? G31d5@mark* (car G31d7@mark**))) '#f) G31d8@label* (G31c3@find G31d4@sym G31d5@mark* (cdr G31d6@sym*) (cdr G31d7@mark**) (cdr G31d8@label*)))) '#f))) (begin (if (G2dc6@rib-sealed/freq G31bc@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G31bc@rib) (void)) ((lambda (G31c4@sym G31c5@mark*) ((lambda (G31c8@sym*) ((lambda (G31ca@t) (if G31ca@t ((lambda (G31cc@p) (if (not (eq? G31be@label G31cc@p)) (G3161@syntax-violation '#f '"multiple definitions of identifier" G31bd@id) (void))) G31ca@t) ((lambda (G31ce@t) (if G31ce@t ((lambda (G31d0@p) (if (not (eq? G31be@label (car G31d0@p))) (if (G316f@top-level-context) (set-car! G31d0@p G31be@label) (G3161@syntax-violation '#f '"multiple definitions of identifier" G31bd@id)) (void))) G31ce@t) (begin (if (G2dc8@rib-cache G31bc@rib) (hashtable-update! (G2dc8@rib-cache G31bc@rib) G31c4@sym (lambda (G31d2@e) (cons (cons G31c5@mark* G31be@label) G31d2@e)) '()) (void)) (G2dca@set-rib-sym*! G31bc@rib (cons G31c4@sym G31c8@sym*)) (G2dcc@set-rib-mark**! G31bc@rib (cons G31c5@mark* (G2dc2@rib-mark** G31bc@rib))) (G2dce@set-rib-label*! G31bc@rib (cons G31be@label (G2dc4@rib-label* G31bc@rib)))))) (if (memq G31c4@sym (G2dc0@rib-sym* G31bc@rib)) (begin '#f (G31c3@find G31c4@sym G31c5@mark* G31c8@sym* (G2dc2@rib-mark** G31bc@rib) (G2dc4@rib-label* G31bc@rib))) '#f)))) (G2dd8@find-label G31bc@rib G31c4@sym G31c5@mark*))) (G2dc0@rib-sym* G31bc@rib))) (G2e2d@id->sym G31bd@id) (G2df9@stx-mark* G31bd@id))))) '#f))) (set! G2ddc@extend-rib/nc! (lambda (G31de@rib G31df@id G31e0@label) ((lambda (G31e4@sym G31e5@mark*) ((lambda (G31e8@sym*) (begin (if (G2dc8@rib-cache G31de@rib) (hashtable-update! (G2dc8@rib-cache G31de@rib) G31e4@sym (lambda (G31ea@e) (cons (cons G31e5@mark* G31e0@label) G31ea@e)) '()) (void)) (G2dca@set-rib-sym*! G31de@rib (cons G31e4@sym G31e8@sym*)) (G2dcc@set-rib-mark**! G31de@rib (cons G31e5@mark* (G2dc2@rib-mark** G31de@rib))) (G2dce@set-rib-label*! G31de@rib (cons G31e0@label (G2dc4@rib-label* G31de@rib))))) (G2dc0@rib-sym* G31de@rib))) (G2e2d@id->sym G31df@id) (G2df9@stx-mark* G31df@id)))) (set! G2dde@make-rib-map (lambda (G31ec@sym*) ((lambda (G31ee@ht) ((letrec ((G31f0@f (lambda (G31f2@i G31f3@sym*) (if (null? G31f3@sym*) G31ee@ht (begin (hashtable-update! G31ee@ht (car G31f3@sym*) (lambda (G31f6@x) (cons G31f2@i G31f6@x)) '()) (G31f0@f (+ G31f2@i '1) (cdr G31f3@sym*))))))) G31f0@f) '0 G31ec@sym*)) (make-eq-hashtable)))) (set! G2de0@seal-rib! (lambda (G31f8@rib) ((lambda (G31fa@sym*) (if (not (null? G31fa@sym*)) (begin (G2dca@set-rib-sym*! G31f8@rib (list->vector G31fa@sym*)) (G2dcc@set-rib-mark**! G31f8@rib (list->vector (G2dc2@rib-mark** G31f8@rib))) (G2dce@set-rib-label*! G31f8@rib (list->vector (G2dc4@rib-label* G31f8@rib))) (G2dd0@set-rib-sealed/freq! G31f8@rib (G2dde@make-rib-map G31fa@sym*))) (void))) (G2dc0@rib-sym* G31f8@rib)))) (set! G2de2@unseal-rib! (lambda (G31fc@rib) (if (G2dc6@rib-sealed/freq G31fc@rib) (begin (G2dd0@set-rib-sealed/freq! G31fc@rib '#f) (G2dca@set-rib-sym*! G31fc@rib (vector->list (G2dc0@rib-sym* G31fc@rib))) (G2dcc@set-rib-mark**! G31fc@rib (vector->list (G2dc2@rib-mark** G31fc@rib))) (G2dce@set-rib-label*! G31fc@rib (vector->list (G2dc4@rib-label* G31fc@rib)))) (void)))) (set! G2de4@make-full-rib (lambda (G31fe@id* G31ff@label*) ((lambda (G3202@r) (begin (G2de0@seal-rib! G3202@r) G3202@r)) (G2dbe@make-rib (map G2e2d@id->sym G31fe@id*) (map G2df9@stx-mark* G31fe@id*) G31ff@label* '#f '#f)))) (set! G2dea@G2de5 (make-record-type-descriptor 'stx '#f 'G2de8 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2dec@G2de7 '#f) (set! G2dee@G2de6 (make-record-constructor-descriptor G2dea@G2de5 '#f G2dec@G2de7)) (set! G2df3@stx? (record-predicate G2dea@G2de5)) (set! G2df5@make-stx (record-constructor G2dee@G2de6)) (set! G2df7@stx-expr (record-accessor G2dea@G2de5 '0)) (set! G2df9@stx-mark* (record-accessor G2dea@G2de5 '1)) (set! G2dfb@stx-subst* (record-accessor G2dea@G2de5 '2)) (set! G2dfd@stx-ae* (record-accessor G2dea@G2de5 '3)) (set! G2dff@set-stx-expr! (record-mutator G2dea@G2de5 '0)) (set! G2e01@set-stx-mark*! (record-mutator G2dea@G2de5 '1)) (set! G2e03@set-stx-subst*! (record-mutator G2dea@G2de5 '2)) (set! G2e05@set-stx-ae*! (record-mutator G2dea@G2de5 '3)) (set! G2e07@rp (G297a@G288a@make-record-printer 'stx (lambda (G3204@x G3205@p G3206@wr) (begin (display '"#<syntax " G3205@p) (write (G2e41@stx->datum G3204@x) G3205@p) ((lambda (G320a@expr) (if (G2974@G287e@annotation? G320a@expr) ((lambda (G320c@src) (if (pair? G320c@src) (begin (display '" [" G3205@p) (display (cdr G320c@src) G3205@p) (display '" of " G3205@p) (display (car G320c@src) G3205@p) (display '"]" G3205@p)) (void))) (G2975@G2880@annotation-source G320a@expr)) (void))) (G2df7@stx-expr G3204@x)) (display '">" G3205@p))))) (set! G2e09@datum->stx (lambda (G320e@id G320f@datum) (G2df5@make-stx G320f@datum (G2df9@stx-mark* G320e@id) (G2dfb@stx-subst* G320e@id) (G2dfd@stx-ae* G320e@id)))) (set! G2e0b@gen-mark (lambda () (string '#\m))) (set! G2e0d@anti-mark '#f) (set! G2e0f@anti-mark? not) (set! G2e11@join-wraps (lambda (G3212@m1* G3213@s1* G3214@ae1* G3215@e) ((lambda (G321b@cancel) (begin (set! G321b@cancel (lambda (G3222@ls1 G3223@ls2) ((letrec ((G3226@f (lambda (G3228@x G3229@ls1) (if (null? G3229@ls1) (cdr G3223@ls2) (cons G3228@x (G3226@f (car G3229@ls1) (cdr G3229@ls1))))))) G3226@f) (car G3222@ls1) (cdr G3222@ls1)))) ((lambda (G321c@m2* G321d@s2* G321e@ae2*) (if (if (not (null? G3212@m1*)) (if (not (null? G321c@m2*)) (begin '#f (G2e0f@anti-mark? (car G321c@m2*))) '#f) '#f) (values (G321b@cancel G3212@m1* G321c@m2*) (G321b@cancel G3213@s1* G321d@s2*) (G321b@cancel G3214@ae1* G321e@ae2*)) (values (append G3212@m1* G321c@m2*) (append G3213@s1* G321d@s2*) (append G3214@ae1* G321e@ae2*)))) (G2df9@stx-mark* G3215@e) (G2dfb@stx-subst* G3215@e) (G2dfd@stx-ae* G3215@e)))) '#f))) (set! G2e13@mkstx (lambda (G322c@e G322d@m* G322e@s* G322f@ae*) (if (if (G2df3@stx? G322c@e) (begin '#f (not (G2da1@top-marked? G322d@m*))) '#f) (call-with-values (lambda () (G2e11@join-wraps G322d@m* G322e@s* G322f@ae* G322c@e)) (lambda (G3237@G3234 G3238@G3235 G3239@G3236) ((lambda (G323d@ae* G323e@s* G323f@m*) (G2df5@make-stx (G2df7@stx-expr G322c@e) G323f@m* G323e@s* G323d@ae*)) G3239@G3236 G3238@G3235 G3237@G3234))) (G2df5@make-stx G322c@e G322d@m* G322e@s* G322f@ae*)))) (set! G2e15@add-mark (lambda (G3243@m G3244@e G3245@ae) (G2e13@mkstx G3244@e (list G3243@m) '(shift) (list G3245@ae)))) (set! G2e17@add-subst (lambda (G3249@subst G324a@e) (G2e13@mkstx G324a@e '() (list G3249@subst) '()))) (set! G2e19@syntax-kind? (lambda (G324d@x G324e@p?) (if (G2df3@stx? G324d@x) (G2e19@syntax-kind? (G2df7@stx-expr G324d@x) G324e@p?) (if (G2974@G287e@annotation? G324d@x) (G2e19@syntax-kind? (G2976@G2882@annotation-expression G324d@x) G324e@p?) (G324e@p? G324d@x))))) (set! G2e1b@syntax-vector->list (lambda (G3251@x) (if (G2df3@stx? G3251@x) ((lambda (G3253@ls G3254@m* G3255@s* G3256@ae*) (map (lambda (G325b@x) (G2e13@mkstx G325b@x G3254@m* G3255@s* G3256@ae*)) G3253@ls)) (G2e1b@syntax-vector->list (G2df7@stx-expr G3251@x)) (G2df9@stx-mark* G3251@x) (G2dfb@stx-subst* G3251@x) (G2dfd@stx-ae* G3251@x)) (if (G2974@G287e@annotation? G3251@x) (G2e1b@syntax-vector->list (G2976@G2882@annotation-expression G3251@x)) (if (vector? G3251@x) (vector->list G3251@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3251@x)))))) (set! G2e1d@syntax-pair? (lambda (G325d@x) (G2e19@syntax-kind? G325d@x pair?))) (set! G2e1f@syntax-vector? (lambda (G325f@x) (G2e19@syntax-kind? G325f@x vector?))) (set! G2e21@syntax-null? (lambda (G3261@x) (G2e19@syntax-kind? G3261@x null?))) (set! G2e23@syntax-list? (lambda (G3263@x) ((lambda (G3265@t) (if G3265@t G3265@t (begin '#f (if (G2e1d@syntax-pair? G3263@x) (begin '#f (G2e23@syntax-list? (G2e27@syntax-cdr G3263@x))) '#f)))) (G2e21@syntax-null? G3263@x)))) (set! G2e25@syntax-car (lambda (G3267@x) (if (G2df3@stx? G3267@x) (G2e13@mkstx (G2e25@syntax-car (G2df7@stx-expr G3267@x)) (G2df9@stx-mark* G3267@x) (G2dfb@stx-subst* G3267@x) (G2dfd@stx-ae* G3267@x)) (if (G2974@G287e@annotation? G3267@x) (G2e25@syntax-car (G2976@G2882@annotation-expression G3267@x)) (if (pair? G3267@x) (car G3267@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3267@x)))))) (set! G2e27@syntax-cdr (lambda (G3269@x) (if (G2df3@stx? G3269@x) (G2e13@mkstx (G2e27@syntax-cdr (G2df7@stx-expr G3269@x)) (G2df9@stx-mark* G3269@x) (G2dfb@stx-subst* G3269@x) (G2dfd@stx-ae* G3269@x)) (if (G2974@G287e@annotation? G3269@x) (G2e27@syntax-cdr (G2976@G2882@annotation-expression G3269@x)) (if (pair? G3269@x) (cdr G3269@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3269@x)))))) (set! G2e29@syntax->list (lambda (G326b@x) (if (G2e1d@syntax-pair? G326b@x) (cons (G2e25@syntax-car G326b@x) (G2e29@syntax->list (G2e27@syntax-cdr G326b@x))) (if (G2e21@syntax-null? G326b@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G326b@x))))) (set! G2e2b@id? (lambda (G326d@x) (if (G2df3@stx? G326d@x) (begin '#f ((lambda (G326f@expr) (symbol? (if (G2974@G287e@annotation? G326f@expr) (G2973@G287c@annotation-stripped G326f@expr) G326f@expr))) (G2df7@stx-expr G326d@x))) '#f))) (set! G2e2d@id->sym (lambda (G3271@x) (begin (if (not (G2df3@stx? G3271@x)) (error 'id->sym '"BUG in ikarus: not an id" G3271@x) (void)) ((lambda (G3273@expr) ((lambda (G3275@sym) (if (symbol? G3275@sym) G3275@sym (error 'id->sym '"BUG in ikarus: not an id" G3271@x))) (if (G2974@G287e@annotation? G3273@expr) (G2973@G287c@annotation-stripped G3273@expr) G3273@expr))) (G2df7@stx-expr G3271@x))))) (set! G2e2f@same-marks? (lambda (G3277@x G3278@y) ((lambda (G327b@t) (if G327b@t G327b@t (begin '#f (if (pair? G3277@x) (if (pair? G3278@y) (if (eq? (car G3277@x) (car G3278@y)) (begin '#f (G2e2f@same-marks? (cdr G3277@x) (cdr G3278@y))) '#f) '#f) '#f)))) (if (null? G3277@x) (begin '#f (null? G3278@y)) '#f)))) (set! G2e31@bound-id=? (lambda (G327d@x G327e@y) (if (eq? (G2e2d@id->sym G327d@x) (G2e2d@id->sym G327e@y)) (begin '#f (G2e2f@same-marks? (G2df9@stx-mark* G327d@x) (G2df9@stx-mark* G327e@y))) '#f))) (set! G2e33@free-id=? (lambda (G3281@i G3282@j) ((lambda (G3285@t0 G3286@t1) (if ((lambda (G3289@t) (if G3289@t G3289@t (begin '#f G3286@t1))) G3285@t0) (eq? G3285@t0 G3286@t1) (eq? (G2e2d@id->sym G3281@i) (G2e2d@id->sym G3282@j)))) (G2e47@id->real-label G3281@i) (G2e47@id->real-label G3282@j)))) (set! G2e35@valid-bound-ids? (lambda (G328b@id*) (if (for-all G2e2b@id? G328b@id*) (begin '#f (G2e37@distinct-bound-ids? G328b@id*)) '#f))) (set! G2e37@distinct-bound-ids? (lambda (G328d@id*) ((lambda (G328f@t) (if G328f@t G328f@t (begin '#f (if (not (G2e39@bound-id-member? (car G328d@id*) (cdr G328d@id*))) (begin '#f (G2e37@distinct-bound-ids? (cdr G328d@id*))) '#f)))) (null? G328d@id*)))) (set! G2e39@bound-id-member? (lambda (G3291@id G3292@id*) (if (pair? G3292@id*) (begin '#f ((lambda (G3295@t) (if G3295@t G3295@t (begin '#f (G2e39@bound-id-member? G3291@id (cdr G3292@id*))))) (G2e31@bound-id=? G3291@id (car G3292@id*)))) '#f))) (set! G2e3b@self-evaluating? (lambda (G3297@x) ((lambda (G3299@t) (if G3299@t G3299@t ((lambda (G329b@t) (if G329b@t G329b@t ((lambda (G329d@t) (if G329d@t G329d@t ((lambda (G329f@t) (if G329f@t G329f@t ((lambda (G32a1@t) (if G32a1@t G32a1@t (begin '#f (bytevector? G3297@x)))) (regexp? G3297@x)))) (boolean? G3297@x)))) (char? G3297@x)))) (string? G3297@x)))) (number? G3297@x)))) (set! G2e3d@strip-annotations (lambda (G32a3@x) (if (pair? G32a3@x) (cons (G2e3d@strip-annotations (car G32a3@x)) (G2e3d@strip-annotations (cdr G32a3@x))) (if (vector? G32a3@x) (vector-map G2e3d@strip-annotations G32a3@x) (if (G2974@G287e@annotation? G32a3@x) (G2973@G287c@annotation-stripped G32a3@x) G32a3@x))))) (set! G2e3f@strip (lambda (G32a5@x G32a6@m*) (if (G2da1@top-marked? G32a6@m*) (if ((lambda (G32a9@t) (if G32a9@t G32a9@t ((lambda (G32ab@t) (if G32ab@t G32ab@t (begin '#f (if (vector? G32a5@x) (if (> (vector-length G32a5@x) '0) (begin '#f (G2974@G287e@annotation? (vector-ref G32a5@x '0))) '#f) '#f)))) (if (pair? G32a5@x) (begin '#f (G2974@G287e@annotation? (car G32a5@x))) '#f)))) (G2974@G287e@annotation? G32a5@x)) (G2e3d@strip-annotations G32a5@x) G32a5@x) ((letrec ((G32ad@f (lambda (G32af@x) (if (G2df3@stx? G32af@x) (G2e3f@strip (G2df7@stx-expr G32af@x) (G2df9@stx-mark* G32af@x)) (if (G2974@G287e@annotation? G32af@x) (G2973@G287c@annotation-stripped G32af@x) (if (pair? G32af@x) ((lambda (G32b1@a G32b2@d) (if (if (eq? G32b1@a (car G32af@x)) (begin '#f (eq? G32b2@d (cdr G32af@x))) '#f) G32af@x (cons G32b1@a G32b2@d))) (G32ad@f (car G32af@x)) (G32ad@f (cdr G32af@x))) (if (vector? G32af@x) ((lambda (G32b5@old) ((lambda (G32b7@new) (if (for-all eq? G32b5@old G32b7@new) G32af@x (list->vector G32b7@new))) (map G32ad@f G32b5@old))) (vector->list G32af@x)) G32af@x))))))) G32ad@f) G32a5@x)))) (set! G2e41@stx->datum (lambda (G32b9@x) (G2e3f@strip G32b9@x '()))) (set! G2e43@same-marks*? (lambda (G32bb@mark* G32bc@mark** G32bd@si) (if (null? G32bd@si) '#f (if (G2e2f@same-marks? G32bb@mark* (vector-ref G32bc@mark** (car G32bd@si))) (car G32bd@si) (G2e43@same-marks*? G32bb@mark* G32bc@mark** (cdr G32bd@si)))))) (set! G2e45@id->label (lambda (G32c1@id) ((lambda (G32c3@t) (if G32c3@t G32c3@t (begin '#f ((lambda (G32c5@t) (if G32c5@t ((lambda (G32c7@env) ((lambda (G32c9@rib) (call-with-values (lambda () (G2dab@gen-define-label+loc G32c1@id G32c9@rib)) (lambda (G32cd@G32cb G32ce@G32cc) ((lambda (G32d1@loc_ G32d2@lab) (begin (G2dda@extend-rib! G32c9@rib G32c1@id G32d2@lab) G32d2@lab)) G32ce@G32cc G32cd@G32cb)))) (G311f@interaction-env-rib G32c7@env))) G32c5@t) '#f)) (G316f@top-level-context))))) (G2e47@id->real-label G32c1@id)))) (set! G2e47@id->real-label (lambda (G32d5@id) ((lambda (G32d7@sym) ((letrec ((G32d9@search (lambda (G32db@subst* G32dc@mark*) (if (null? G32db@subst*) '#f (if (eq? (car G32db@subst*) 'shift) (G32d9@search (cdr G32db@subst*) (cdr G32dc@mark*)) ((lambda (G32df@rib) ((lambda (G32e1@t) (if G32e1@t ((lambda (G32e3@ht) ((lambda (G32e5@si) ((lambda (G32e7@i) (if G32e7@i (vector-ref (G2dc4@rib-label* G32df@rib) G32e7@i) (G32d9@search (cdr G32db@subst*) G32dc@mark*))) (if G32e5@si (begin '#f (G2e43@same-marks*? G32dc@mark* (G2dc2@rib-mark** G32df@rib) (reverse G32e5@si))) '#f))) (hashtable-ref G32e3@ht G32d7@sym '#f))) G32e1@t) ((lambda (G32e9@t) (if G32e9@t G32e9@t (begin '#f ((letrec ((G32eb@f (lambda (G32ed@sym* G32ee@mark** G32ef@label*) (if (null? G32ed@sym*) (G32d9@search (cdr G32db@subst*) G32dc@mark*) (if (if (eq? (car G32ed@sym*) G32d7@sym) (begin '#f (G2e2f@same-marks? (car G32ee@mark**) G32dc@mark*)) '#f) (car G32ef@label*) (G32eb@f (cdr G32ed@sym*) (cdr G32ee@mark**) (cdr G32ef@label*))))))) G32eb@f) (G2dc0@rib-sym* G32df@rib) (G2dc2@rib-mark** G32df@rib) (G2dc4@rib-label* G32df@rib))))) (G2dd8@find-label G32df@rib G32d7@sym G32dc@mark*)))) (G2dc6@rib-sealed/freq G32df@rib))) (car G32db@subst*))))))) G32d9@search) (G2dfb@stx-subst* G32d5@id) (G2df9@stx-mark* G32d5@id))) (G2e2d@id->sym G32d5@id)))) (set! G2e49@label->binding (lambda (G32f3@x G32f4@r) ((lambda (G32f7@t) (if G32f7@t ((lambda (G32f9@b) (if (if (pair? G32f9@b) (begin '#f (eq? (car G32f9@b) '$core-rtd)) '#f) (cons '$rtd (map G3024@bless (cdr G32f9@b))) (if (if (pair? G32f9@b) (begin '#f (eq? (car G32f9@b) 'global-rtd)) '#f) ((lambda (G32fb@lib G32fc@loc) (cons '$rtd (symbol-value G32fc@loc))) (cadr G32f9@b) (cddr G32f9@b)) G32f9@b))) G32f7@t) ((lambda (G32ff@t) (if G32ff@t (cdr G32ff@t) ((lambda (G3301@t) (if G3301@t ((lambda (G3303@env) ((lambda (G3305@t) (if G3305@t ((lambda (G3307@p) (cons* 'lexical (cdr G3307@p) '#f)) G3305@t) '(displaced-lexical . #f))) (assq G32f3@x (G3123@interaction-env-locs G3303@env)))) G3301@t) '(displaced-lexical . #f))) (G316f@top-level-context)))) (assq G32f3@x G32f4@r)))) (G2c1f@G2ab3@imported-label->binding G32f3@x)))) (set! G2e4b@make-binding cons) (set! G2e4d@binding-type car) (set! G2e4f@binding-value cdr) (set! G2e51@raise-unbound-error (lambda (G3309@id) (G315f@syntax-violation* '#f '"unbound identifier" G3309@id (G4c40@G4be0@make-undefined-violation)))) (set! G2e53@syntax-type (lambda (G330b@e G330c@r) (if (G2e2b@id? G330b@e) ((lambda (G330f@id) ((lambda (G3311@label) ((lambda (G3313@b) ((lambda (G3315@type) ((lambda () (begin (if (not G3311@label) (G2e51@raise-unbound-error G330f@id) (void)) ((lambda (G3317@t) (if (memv G3317@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G3315@type (G2e4f@binding-value G3313@b) G330f@id) (values 'other '#f '#f))) G3315@type))))) (G2e4d@binding-type G3313@b))) (G2e49@label->binding G3311@label G330c@r))) (G2e45@id->label G330f@id))) G330b@e) (if (G2e1d@syntax-pair? G330b@e) ((lambda (G3319@id) (if (G2e2b@id? G3319@id) ((lambda (G331b@label) ((lambda (G331d@b) ((lambda (G331f@type) ((lambda () (begin (if (not G331b@label) (G2e51@raise-unbound-error G3319@id) (void)) ((lambda (G3321@t) (if (memv G3321@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G331f@type (G2e4f@binding-value G331d@b) G3319@id) (values 'call '#f '#f))) G331f@type))))) (G2e4d@binding-type G331d@b))) (G2e49@label->binding G331b@label G330c@r))) (G2e45@id->label G3319@id)) (values 'call '#f '#f))) (G2e25@syntax-car G330b@e)) ((lambda (G3323@d) (if (G2e3b@self-evaluating? G3323@d) (values 'constant G3323@d '#f) (values 'other '#f '#f))) (G2e41@stx->datum G330b@e)))))) (set! G2e6a@sanitize-binding (lambda (G3325@x G3326@src) (if (procedure? G3325@x) (cons* 'local-macro G3325@x G3326@src) (if (if (pair? G3325@x) (if (eq? (car G3325@x) 'macro!) (begin '#f (procedure? (cdr G3325@x))) '#f) '#f) (cons* 'local-macro! (cdr G3325@x) G3326@src) (if (if (pair? G3325@x) (begin '#f (eq? (car G3325@x) '$rtd)) '#f) G3325@x (assertion-violation 'expand '"invalid transformer" G3325@x)))))) (set! G2e6c@make-variable-transformer (lambda (G3329@x) (if (procedure? G3329@x) (cons 'macro! G3329@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3329@x)))) (set! G2e6e@variable-transformer? (lambda (G332b@x) (if (pair? G332b@x) (if (eq? (car G332b@x) 'macro!) (begin '#f (procedure? (cdr G332b@x))) '#f) '#f))) (set! G2e70@variable-transformer-procedure (lambda (G332d@x) (if (G2e6e@variable-transformer? G332d@x) (cdr G332d@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G332d@x)))) (set! G2e72@make-eval-transformer (lambda (G332f@x) (G2e6a@sanitize-binding (eval-core (G29e1@G2989@expanded->core G332f@x)) G332f@x))) (set! G2ff6@parse-define (lambda (G3331@x) ((lambda (G3333@t) ((lambda (G3335@ls/false) (if (if G3335@ls/false (begin '#f (apply (lambda (G3337@id G3338@fmls G3339@b G333a@b*) (G2e2b@id? G3337@id)) G3335@ls/false)) '#f) (apply (lambda (G333f@id G3340@fmls G3341@b G3342@b*) (begin (G3096@verify-formals G3340@fmls G3331@x) (values G333f@id (cons 'defun (cons G3340@fmls (cons G3341@b G3342@b*)))))) G3335@ls/false) ((lambda (G3347@t) ((lambda (G3349@ls/false) (if (if G3349@ls/false (begin '#f (apply (lambda (G334b@id G334c@val) (G2e2b@id? G334b@id)) G3349@ls/false)) '#f) (apply (lambda (G334f@id G3350@val) (values G334f@id (cons 'expr G3350@val))) G3349@ls/false) ((lambda (G3353@t) ((lambda (G3355@ls/false) (if (if G3355@ls/false (begin '#f (apply (lambda (G3357@id) (G2e2b@id? G3357@id)) G3355@ls/false)) '#f) (apply (lambda (G3359@id) (values G3359@id (cons 'expr (G3024@bless '(void))))) G3355@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3353@t))) (G306e@syntax-dispatch G3353@t '(_ any)))) G3347@t))) (G306e@syntax-dispatch G3347@t '(_ any any)))) G3333@t))) (G306e@syntax-dispatch G3333@t '(_ (any . any) any . each-any)))) G3331@x))) (set! G2ff8@parse-define-syntax (lambda (G335b@x) ((lambda (G335d@t) ((lambda (G335f@ls/false) (if (if G335f@ls/false (begin '#f (apply (lambda (G3361@id G3362@val) (G2e2b@id? G3361@id)) G335f@ls/false)) '#f) (apply (lambda (G3365@id G3366@val) (values G3365@id G3366@val)) G335f@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G335d@t))) (G306e@syntax-dispatch G335d@t '(_ any any)))) G335b@x))) (set! G2ffa@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ffc@scheme-stx (lambda (G3369@sym) ((lambda (G336b@t) (if G336b@t G336b@t (begin '#f ((lambda (G336d@subst) ((lambda (G336f@stx) ((lambda (G3371@stx) ((lambda () (begin (hashtable-set! G2ffa@scheme-stx-hashtable G3369@sym G3371@stx) G3371@stx)))) ((lambda (G3373@t) (if G3373@t ((lambda (G3375@x) ((lambda (G3377@name G3378@label) (G2e17@add-subst (G2dbe@make-rib (list G3377@name) (list G2d9f@top-mark*) (list G3378@label) '#f '#f) G336f@stx)) (car G3375@x) (cdr G3375@x))) G3373@t) G336f@stx)) (assq G3369@sym G336d@subst)))) (G2df5@make-stx G3369@sym G2d9f@top-mark* '() '()))) (G2bf5@G2a5f@library-subst (G2c19@G2aa7@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G2ffa@scheme-stx-hashtable G3369@sym '#f)))) (set! G2ffe@lexical-var car) (set! G3000@lexical-mutable? cdr) (set! G3002@set-lexical-mutable! set-cdr!) (set! G3004@add-lexical (lambda (G337b@lab G337c@lex G337d@r) (cons (cons* G337b@lab 'lexical G337c@lex '#f) G337d@r))) (set! G3006@add-lexicals (lambda (G3381@lab* G3382@lex* G3383@r) (if (null? G3381@lab*) G3383@r (G3006@add-lexicals (cdr G3381@lab*) (cdr G3382@lex*) (G3004@add-lexical (car G3381@lab*) (car G3382@lex*) G3383@r))))) (set! G3008@letrec-helper (lambda (G3387@e G3388@r G3389@mr G338a@build) ((lambda (G338f@t) ((lambda (G3391@ls/false) (if G3391@ls/false (apply (lambda (G3393@lhs* G3394@rhs* G3395@b G3396@b*) (if (not (G2e35@valid-bound-ids? G3393@lhs*)) (G3028@invalid-fmls-error G3387@e G3393@lhs*) ((lambda (G339b@lex* G339c@lab*) ((lambda (G339f@rib G33a0@r) ((lambda (G33a3@body G33a4@rhs*) (G338a@build '#f G339b@lex* G33a4@rhs* G33a3@body)) (G30a8@chi-internal (G2e17@add-subst G339f@rib (cons G3395@b G3396@b*)) G33a0@r G3389@mr) (G308e@chi-expr* (map (lambda (G33a7@x) (G2e17@add-subst G339f@rib G33a7@x)) G3394@rhs*) G33a0@r G3389@mr))) (G2de4@make-full-rib G3393@lhs* G339c@lab*) (G3006@add-lexicals G339c@lab* G339b@lex* G3388@r))) (map G2da3@gen-lexical G3393@lhs*) (map G2da7@gen-label G3393@lhs*)))) G3391@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G338f@t))) (G306e@syntax-dispatch G338f@t '(_ #(each (any any)) any . each-any)))) G3387@e))) (set! G300a@letrec-transformer (lambda (G33a9@e G33aa@r G33ab@mr) (G3008@letrec-helper G33a9@e G33aa@r G33ab@mr G2d88@G2cfb@build-letrec))) (set! G300c@letrec*-transformer (lambda (G33af@e G33b0@r G33b1@mr) (G3008@letrec-helper G33af@e G33b0@r G33b1@mr G2d89@G2cfd@build-letrec*))) (set! G300e@fluid-let-syntax-transformer (lambda (G33b5@e G33b6@r G33b7@mr) ((lambda (G33bc@lookup) (begin (set! G33bc@lookup (lambda (G33cf@x) ((lambda (G33d1@t) (if G33d1@t G33d1@t (begin '#f (G3161@syntax-violation '#f '"unbound identifier" G33b5@e G33cf@x)))) (G2e45@id->label G33cf@x)))) ((lambda (G33bd@t) ((lambda (G33bf@ls/false) (if G33bf@ls/false (apply (lambda (G33c1@lhs* G33c2@rhs* G33c3@b G33c4@b*) (if (not (G2e35@valid-bound-ids? G33c1@lhs*)) (G3028@invalid-fmls-error G33b5@e G33c1@lhs*) ((lambda (G33c9@lab* G33ca@rhs*) (G30a8@chi-internal (cons G33c3@b G33c4@b*) (append (map cons G33c9@lab* G33ca@rhs*) G33b6@r) (append (map cons G33c9@lab* G33ca@rhs*) G33b7@mr))) (map G33bc@lookup G33c1@lhs*) (map (lambda (G33cd@x) (G2e72@make-eval-transformer (G30cf@expand-transformer G33cd@x G33b7@mr))) G33c2@rhs*)))) G33bf@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G33bd@t))) (G306e@syntax-dispatch G33bd@t '(_ #(each (any any)) any . each-any)))) G33b5@e))) '#f))) (set! G3010@type-descriptor-transformer (lambda (G33d3@e G33d4@r G33d5@mr) ((lambda (G33d9@t) ((lambda (G33db@ls/false) (if (if G33db@ls/false (begin '#f (apply (lambda (G33dd@id) (G2e2b@id? G33dd@id)) G33db@ls/false)) '#f) (apply (lambda (G33df@id) ((lambda (G33e1@lab) ((lambda (G33e3@b) ((lambda (G33e5@type) ((lambda () (begin (if (not G33e1@lab) (G2e51@raise-unbound-error G33df@id) (void)) (if (not (if (eq? G33e5@type '$rtd) (begin '#f (not (list? (G2e4f@binding-value G33e3@b)))) '#f)) (G3161@syntax-violation '#f '"not a record type" G33d3@e) (void)) (list 'quote (G2e4f@binding-value G33e3@b)))))) (G2e4d@binding-type G33e3@b))) (G2e49@label->binding G33e1@lab G33d4@r))) (G2e45@id->label G33df@id))) G33db@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G33d9@t))) (G306e@syntax-dispatch G33d9@t '(_ any)))) G33d3@e))) (set! G3012@record-type-descriptor-transformer (lambda (G33e7@e G33e8@r G33e9@mr) ((lambda (G33ed@t) ((lambda (G33ef@ls/false) (if (if G33ef@ls/false (begin '#f (apply (lambda (G33f1@id) (G2e2b@id? G33f1@id)) G33ef@ls/false)) '#f) (apply (lambda (G33f3@id) ((lambda (G33f5@lab) ((lambda (G33f7@b) ((lambda (G33f9@type) ((lambda () (begin (if (not G33f5@lab) (G2e51@raise-unbound-error G33f3@id) (void)) (if (not (if (eq? G33f9@type '$rtd) (begin '#f (list? (G2e4f@binding-value G33f7@b))) '#f)) (G3161@syntax-violation '#f '"not a record type" G33e7@e) (void)) (G3092@chi-expr (car (G2e4f@binding-value G33f7@b)) G33e8@r G33e9@mr))))) (G2e4d@binding-type G33f7@b))) (G2e49@label->binding G33f5@lab G33e8@r))) (G2e45@id->label G33f3@id))) G33ef@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G33ed@t))) (G306e@syntax-dispatch G33ed@t '(_ any)))) G33e7@e))) (set! G3014@record-constructor-descriptor-transformer (lambda (G33fb@e G33fc@r G33fd@mr) ((lambda (G3401@t) ((lambda (G3403@ls/false) (if (if G3403@ls/false (begin '#f (apply (lambda (G3405@id) (G2e2b@id? G3405@id)) G3403@ls/false)) '#f) (apply (lambda (G3407@id) ((lambda (G3409@lab) ((lambda (G340b@b) ((lambda (G340d@type) ((lambda () (begin (if (not G3409@lab) (G2e51@raise-unbound-error G3407@id) (void)) (if (not (if (eq? G340d@type '$rtd) (begin '#f (list? (G2e4f@binding-value G340b@b))) '#f)) (G3161@syntax-violation '#f '"invalid type" G33fb@e) (void)) (G3092@chi-expr (cadr (G2e4f@binding-value G340b@b)) G33fc@r G33fd@mr))))) (G2e4d@binding-type G340b@b))) (G2e49@label->binding G3409@lab G33fc@r))) (G2e45@id->label G3407@id))) G3403@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3401@t))) (G306e@syntax-dispatch G3401@t '(_ any)))) G33fb@e))) (set! G3016@when-macro (lambda (G340f@e) ((lambda (G3411@t) ((lambda (G3413@ls/false) (if G3413@ls/false (apply (lambda (G3415@test G3416@e G3417@e*) (G3024@bless (list 'if G3415@test (cons 'begin (cons G3416@e G3417@e*))))) G3413@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3411@t))) (G306e@syntax-dispatch G3411@t '(_ any any . each-any)))) G340f@e))) (set! G3018@unless-macro (lambda (G341b@e) ((lambda (G341d@t) ((lambda (G341f@ls/false) (if G341f@ls/false (apply (lambda (G3421@test G3422@e G3423@e*) (G3024@bless (list 'if (list 'not G3421@test) (cons 'begin (cons G3422@e G3423@e*))))) G341f@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G341d@t))) (G306e@syntax-dispatch G341d@t '(_ any any . each-any)))) G341b@e))) (set! G301a@if-transformer (lambda (G3427@e G3428@r G3429@mr) ((lambda (G342d@t) ((lambda (G342f@ls/false) (if G342f@ls/false (apply (lambda (G3431@e0 G3432@e1 G3433@e2) (list 'if (G3092@chi-expr G3431@e0 G3428@r G3429@mr) (G3092@chi-expr G3432@e1 G3428@r G3429@mr) (G3092@chi-expr G3433@e2 G3428@r G3429@mr))) G342f@ls/false) ((lambda (G3437@t) ((lambda (G3439@ls/false) (if G3439@ls/false (apply (lambda (G343b@e0 G343c@e1) (list 'if (G3092@chi-expr G343b@e0 G3428@r G3429@mr) (G3092@chi-expr G343c@e1 G3428@r G3429@mr) (G2d87@G2cf9@build-void))) G3439@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3437@t))) (G306e@syntax-dispatch G3437@t '(_ any any)))) G342d@t))) (G306e@syntax-dispatch G342d@t '(_ any any any)))) G3427@e))) (set! G301c@case-macro (lambda (G343f@e) ((lambda (G3442@build-last G3444@build-one) (begin (set! G3442@build-last (lambda (G3469@cls) ((lambda (G346b@t) ((lambda (G346d@ls/false) (if G346d@ls/false (apply (lambda (G346f@e G3470@e*) (cons 'begin (cons G346f@e G3470@e*))) G346d@ls/false) ((lambda (G3473@t) ((lambda (G3475@ls/false) (if G3475@ls/false (apply (lambda () (G3444@build-one G3469@cls '(if #f #f))) G3475@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3473@t))) (G306e@syntax-dispatch G3473@t '_))) G346b@t))) (G306e@syntax-dispatch G346b@t '(#(scheme-id else) any . each-any)))) G3469@cls))) (set! G3444@build-one (lambda (G345b@cls G345c@k) ((lambda (G345f@t) ((lambda (G3461@ls/false) (if G3461@ls/false (apply (lambda (G3463@d* G3464@e G3465@e*) (list 'if (list 'memv 't (list 'quote G3463@d*)) (cons 'begin (cons G3464@e G3465@e*)) G345c@k)) G3461@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G345f@t))) (G306e@syntax-dispatch G345f@t '(each-any any . each-any)))) G345b@cls))) ((lambda (G3445@t) ((lambda (G3447@ls/false) (if G3447@ls/false (apply (lambda (G3449@expr) (G3024@bless (cons 'let (cons (list (list 't G3449@expr)) '((if #f #f)))))) G3447@ls/false) ((lambda (G344b@t) ((lambda (G344d@ls/false) (if G344d@ls/false (apply (lambda (G344f@expr G3450@cls G3451@cls*) (G3024@bless (list 'let (list (list 't G344f@expr)) ((letrec ((G3455@f (lambda (G3457@cls G3458@cls*) (if (null? G3458@cls*) (G3442@build-last G3457@cls) (G3444@build-one G3457@cls (G3455@f (car G3458@cls*) (cdr G3458@cls*))))))) G3455@f) G3450@cls G3451@cls*)))) G344d@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G344b@t))) (G306e@syntax-dispatch G344b@t '(_ any any . each-any)))) G3445@t))) (G306e@syntax-dispatch G3445@t '(_ any)))) G343f@e))) '#f '#f))) (set! G301e@quote-transformer (lambda (G3477@e G3478@r G3479@mr) ((lambda (G347d@t) ((lambda (G347f@ls/false) (if G347f@ls/false (apply (lambda (G3481@datum) (list 'quote (G2e41@stx->datum G3481@datum))) G347f@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G347d@t))) (G306e@syntax-dispatch G347d@t '(_ any)))) G3477@e))) (set! G3020@case-lambda-transformer (lambda (G3483@e G3484@r G3485@mr) ((lambda (G3489@t) ((lambda (G348b@ls/false) (if G348b@ls/false (apply (lambda (G348d@fmls* G348e@b* G348f@b**) (call-with-values (lambda () (G309a@chi-lambda-clause* G3483@e G348d@fmls* (map cons G348e@b* G348f@b**) G3484@r G3485@mr)) (lambda (G3495@G3493 G3496@G3494) ((lambda (G3499@body* G349a@fmls*) (G2d84@G2cad@build-case-lambda '#f G349a@fmls* G3499@body*)) G3496@G3494 G3495@G3493)))) G348b@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3489@t))) (G306e@syntax-dispatch G3489@t '(_ . #(each (any any . each-any)))))) G3483@e))) (set! G3022@lambda-transformer (lambda (G349d@e G349e@r G349f@mr) ((lambda (G34a3@t) ((lambda (G34a5@ls/false) (if G34a5@ls/false (apply (lambda (G34a7@fmls G34a8@b G34a9@b*) (call-with-values (lambda () (G3098@chi-lambda-clause G349d@e G34a7@fmls (cons G34a8@b G34a9@b*) G349e@r G349f@mr)) (lambda (G34af@G34ad G34b0@G34ae) ((lambda (G34b3@body G34b4@fmls) (G2d83@G2cab@build-lambda '#f G34b4@fmls G34b3@body)) G34b0@G34ae G34af@G34ad)))) G34a5@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G34a3@t))) (G306e@syntax-dispatch G34a3@t '(_ any any . each-any)))) G349d@e))) (set! G3024@bless (lambda (G34b7@x) (G2e13@mkstx ((letrec ((G34b9@f (lambda (G34bb@x) (if (G2df3@stx? G34bb@x) G34bb@x (if (pair? G34bb@x) (cons (G34b9@f (car G34bb@x)) (G34b9@f (cdr G34bb@x))) (if (symbol? G34bb@x) (G2ffc@scheme-stx G34bb@x) (if (vector? G34bb@x) (vector-map G34b9@f G34bb@x) G34bb@x))))))) G34b9@f) G34b7@x) '() '() '()))) (set! G3026@with-syntax-macro (lambda (G34bd@e) ((lambda (G34bf@t) ((lambda (G34c1@ls/false) (if G34c1@ls/false (apply (lambda (G34c3@pat* G34c4@expr* G34c5@b G34c6@b*) ((lambda (G34cb@idn*) (begin (G3096@verify-formals (map car G34cb@idn*) G34bd@e) ((lambda (G34cd@t*) (G3024@bless (list 'let (map list G34cd@t* G34c4@expr*) ((letrec ((G34cf@f (lambda (G34d1@pat* G34d2@t*) (if (null? G34d1@pat*) (cons 'begin (cons '#f (cons G34c5@b G34c6@b*))) (list 'syntax-case (car G34d2@t*) '() (list (car G34d1@pat*) (G34cf@f (cdr G34d1@pat*) (cdr G34d2@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G34d1@pat*)) (car G34d2@t*)))))))) G34cf@f) G34c3@pat* G34cd@t*)))) (G314d@generate-temporaries G34c4@expr*)))) ((letrec ((G34d5@f (lambda (G34d7@pat*) (if (null? G34d7@pat*) '() (call-with-values (lambda () (G306c@convert-pattern (car G34d7@pat*) '())) (lambda (G34db@G34d9 G34dc@G34da) ((lambda (G34df@idn* G34e0@pat) (append G34df@idn* (G34d5@f (cdr G34d7@pat*)))) G34dc@G34da G34db@G34d9))))))) G34d5@f) G34c3@pat*))) G34c1@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G34bf@t))) (G306e@syntax-dispatch G34bf@t '(_ #(each (any any)) any . each-any)))) G34bd@e))) (set! G3028@invalid-fmls-error (lambda (G34e3@stx G34e4@fmls) ((lambda (G34e7@t) ((lambda (G34e9@ls/false) (if G34e9@ls/false (apply (lambda (G34eb@id* G34ec@last) ((letrec ((G34ef@f (lambda (G34f1@id*) (if (null? G34f1@id*) (values) (if (not (G2e2b@id? (car G34f1@id*))) (G3161@syntax-violation '#f '"not an identifier" G34e3@stx (car G34f1@id*)) (begin (G34ef@f (cdr G34f1@id*)) (if (G2e39@bound-id-member? (car G34f1@id*) (cdr G34f1@id*)) (G3161@syntax-violation '#f '"duplicate binding" G34e3@stx (car G34f1@id*)) (void)))))))) G34ef@f) (if (G2e2b@id? G34ec@last) (cons G34ec@last G34eb@id*) (if (G2e21@syntax-null? G34ec@last) G34eb@id* (G3161@syntax-violation '#f '"not an identifier" G34e3@stx G34ec@last))))) G34e9@ls/false) ((lambda (G34f3@t) ((lambda (G34f5@ls/false) (if G34f5@ls/false (apply (lambda () (G3161@syntax-violation '#f '"malformed binding form" G34e3@stx G34e4@fmls)) G34f5@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G34f3@t))) (G306e@syntax-dispatch G34f3@t '_))) G34e7@t))) (G306e@syntax-dispatch G34e7@t '#(each+ any () any)))) G34e4@fmls))) (set! G302a@let-macro (lambda (G34f7@stx) ((lambda (G34f9@t) ((lambda (G34fb@ls/false) (if G34fb@ls/false (apply (lambda (G34fd@lhs* G34fe@rhs* G34ff@b G3500@b*) (if (G2e35@valid-bound-ids? G34fd@lhs*) (G3024@bless (cons (cons 'lambda (cons G34fd@lhs* (cons G34ff@b G3500@b*))) G34fe@rhs*)) (G3028@invalid-fmls-error G34f7@stx G34fd@lhs*))) G34fb@ls/false) ((lambda (G3505@t) ((lambda (G3507@ls/false) (if (if G3507@ls/false (begin '#f (apply (lambda (G3509@f G350a@lhs* G350b@rhs* G350c@b G350d@b*) (G2e2b@id? G3509@f)) G3507@ls/false)) '#f) (apply (lambda (G3513@f G3514@lhs* G3515@rhs* G3516@b G3517@b*) (if (G2e35@valid-bound-ids? G3514@lhs*) (G3024@bless (cons (list 'letrec (list (list G3513@f (cons 'lambda (cons G3514@lhs* (cons G3516@b G3517@b*))))) G3513@f) G3515@rhs*)) (G3028@invalid-fmls-error G34f7@stx G3514@lhs*))) G3507@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3505@t))) (G306e@syntax-dispatch G3505@t '(_ any #(each (any any)) any . each-any)))) G34f9@t))) (G306e@syntax-dispatch G34f9@t '(_ #(each (any any)) any . each-any)))) G34f7@stx))) (set! G302c@let-values-macro (lambda (G351d@stx) ((lambda (G3520@rename G3522@rename*) (begin (set! G3520@rename (lambda (G3582@x G3583@old* G3584@new*) (begin (if (not (G2e2b@id? G3582@x)) (G3161@syntax-violation '#f '"not an indentifier" G351d@stx G3582@x) (void)) (if (G2e39@bound-id-member? G3582@x G3583@old*) (G3161@syntax-violation '#f '"duplicate binding" G351d@stx G3582@x) (void)) ((lambda (G3588@y) (values G3588@y (cons G3582@x G3583@old*) (cons G3588@y G3584@new*))) (gensym (G3167@syntax->datum G3582@x)))))) (set! G3522@rename* (lambda (G3570@x* G3571@old* G3572@new*) (if (null? G3570@x*) (values '() G3571@old* G3572@new*) (call-with-values (lambda () (G3520@rename (car G3570@x*) G3571@old* G3572@new*)) (lambda (G3576@x G3577@old* G3578@new*) (call-with-values (lambda () (G3522@rename* (cdr G3570@x*) G3577@old* G3578@new*)) (lambda (G357c@x* G357d@old* G357e@new*) (values (cons G3576@x G357c@x*) G357d@old* G357e@new*)))))))) ((lambda (G3523@t) ((lambda (G3525@ls/false) (if G3525@ls/false (apply (lambda (G3527@b G3528@b*) (cons* (G3024@bless 'let) '() G3527@b G3528@b*)) G3525@ls/false) ((lambda (G352b@t) ((lambda (G352d@ls/false) (if G352d@ls/false (apply (lambda (G352f@lhs* G3530@rhs* G3531@b G3532@b*) (G3024@bless ((letrec ((G3537@f (lambda (G3539@lhs* G353a@rhs* G353b@old* G353c@new*) (if (null? G3539@lhs*) (cons 'let (cons (map list G353b@old* G353c@new*) (cons G3531@b G3532@b*))) ((lambda (G3541@t) ((lambda (G3543@ls/false) (if G3543@ls/false (apply (lambda (G3545@x*) (call-with-values (lambda () (G3522@rename* G3545@x* G353b@old* G353c@new*)) (lambda (G354a@G3547 G354b@G3548 G354c@G3549) ((lambda (G3550@new* G3551@old* G3552@y*) (list 'call-with-values (list 'lambda '() (car G353a@rhs*)) (list 'lambda G3552@y* (G3537@f (cdr G3539@lhs*) (cdr G353a@rhs*) G3551@old* G3550@new*)))) G354c@G3549 G354b@G3548 G354a@G3547)))) G3543@ls/false) ((lambda (G3556@t) ((lambda (G3558@ls/false) (if G3558@ls/false (apply (lambda (G355a@x* G355b@x) (call-with-values (lambda () (G3520@rename G355b@x G353b@old* G353c@new*)) (lambda (G355e@y G355f@old* G3560@new*) (call-with-values (lambda () (G3522@rename* G355a@x* G355f@old* G3560@new*)) (lambda (G3564@y* G3565@old* G3566@new*) (list 'call-with-values (list 'lambda '() (car G353a@rhs*)) (list 'lambda (append G3564@y* G355e@y) (G3537@f (cdr G3539@lhs*) (cdr G353a@rhs*) G3565@old* G3566@new*)))))))) G3558@ls/false) ((lambda (G356a@t) ((lambda (G356c@ls/false) (if G356c@ls/false (apply (lambda (G356e@others) (G3161@syntax-violation '#f '"malformed bindings" G351d@stx G356e@others)) G356c@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G356a@t))) (G306e@syntax-dispatch G356a@t 'any))) G3556@t))) (G306e@syntax-dispatch G3556@t '#(each+ any () any)))) G3541@t))) (G306e@syntax-dispatch G3541@t 'each-any))) (car G3539@lhs*)))))) G3537@f) G352f@lhs* G3530@rhs* '() '()))) G352d@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G352b@t))) (G306e@syntax-dispatch G352b@t '(_ #(each (any any)) any . each-any)))) G3523@t))) (G306e@syntax-dispatch G3523@t '(_ () any . each-any)))) G351d@stx))) '#f '#f))) (set! G302e@let*-values-macro (lambda (G358a@stx) ((lambda (G358d@check) (begin (set! G358d@check (lambda (G35bc@x*) (if (not (null? G35bc@x*)) ((lambda (G35be@x) (begin (if (not (G2e2b@id? G35be@x)) (G3161@syntax-violation '#f '"not an identifier" G358a@stx G35be@x) (void)) (G358d@check (cdr G35bc@x*)) (if (G2e39@bound-id-member? G35be@x (cdr G35bc@x*)) (G3161@syntax-violation '#f '"duplicate identifier" G358a@stx G35be@x) (void)))) (car G35bc@x*)) (void)))) ((lambda (G358e@t) ((lambda (G3590@ls/false) (if G3590@ls/false (apply (lambda (G3592@b G3593@b*) (cons* (G3024@bless 'let) '() G3592@b G3593@b*)) G3590@ls/false) ((lambda (G3596@t) ((lambda (G3598@ls/false) (if G3598@ls/false (apply (lambda (G359a@lhs* G359b@rhs* G359c@b G359d@b*) (G3024@bless ((letrec ((G35a2@f (lambda (G35a4@lhs* G35a5@rhs*) (if (null? G35a4@lhs*) (cons 'begin (cons G359c@b G359d@b*)) ((lambda (G35a8@t) ((lambda (G35aa@ls/false) (if G35aa@ls/false (apply (lambda (G35ac@x*) (begin (G358d@check G35ac@x*) (list 'call-with-values (list 'lambda '() (car G35a5@rhs*)) (list 'lambda G35ac@x* (G35a2@f (cdr G35a4@lhs*) (cdr G35a5@rhs*)))))) G35aa@ls/false) ((lambda (G35ae@t) ((lambda (G35b0@ls/false) (if G35b0@ls/false (apply (lambda (G35b2@x* G35b3@x) (begin (G358d@check (cons G35b3@x G35b2@x*)) (list 'call-with-values (list 'lambda '() (car G35a5@rhs*)) (list 'lambda (append G35b2@x* G35b3@x) (G35a2@f (cdr G35a4@lhs*) (cdr G35a5@rhs*)))))) G35b0@ls/false) ((lambda (G35b6@t) ((lambda (G35b8@ls/false) (if G35b8@ls/false (apply (lambda (G35ba@others) (G3161@syntax-violation '#f '"malformed bindings" G358a@stx G35ba@others)) G35b8@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G35b6@t))) (G306e@syntax-dispatch G35b6@t 'any))) G35ae@t))) (G306e@syntax-dispatch G35ae@t '#(each+ any () any)))) G35a8@t))) (G306e@syntax-dispatch G35a8@t 'each-any))) (car G35a4@lhs*)))))) G35a2@f) G359a@lhs* G359b@rhs*))) G3598@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3596@t))) (G306e@syntax-dispatch G3596@t '(_ #(each (any any)) any . each-any)))) G358e@t))) (G306e@syntax-dispatch G358e@t '(_ () any . each-any)))) G358a@stx))) '#f))) (set! G3030@trace-lambda-macro (lambda (G35c0@stx) ((lambda (G35c2@t) ((lambda (G35c4@ls/false) (if G35c4@ls/false (apply (lambda (G35c6@who G35c7@fmls G35c8@b G35c9@b*) (if (G2e35@valid-bound-ids? G35c7@fmls) (G3024@bless (list 'make-traced-procedure (list 'quote G35c6@who) (cons 'lambda (cons G35c7@fmls (cons G35c8@b G35c9@b*))))) (G3028@invalid-fmls-error G35c0@stx G35c7@fmls))) G35c4@ls/false) ((lambda (G35ce@t) ((lambda (G35d0@ls/false) (if G35d0@ls/false (apply (lambda (G35d2@who G35d3@fmls G35d4@last G35d5@b G35d6@b*) (if (G2e35@valid-bound-ids? (cons G35d4@last G35d3@fmls)) (G3024@bless (list 'make-traced-procedure (list 'quote G35d2@who) (cons 'lambda (cons (append G35d3@fmls G35d4@last) (cons G35d5@b G35d6@b*))))) (G3028@invalid-fmls-error G35c0@stx (append G35d3@fmls G35d4@last)))) G35d0@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G35ce@t))) (G306e@syntax-dispatch G35ce@t '(_ any #(each+ any () any) any . each-any)))) G35c2@t))) (G306e@syntax-dispatch G35c2@t '(_ any each-any any . each-any)))) G35c0@stx))) (set! G3032@trace-define-macro (lambda (G35dc@stx) ((lambda (G35de@t) ((lambda (G35e0@ls/false) (if G35e0@ls/false (apply (lambda (G35e2@who G35e3@fmls G35e4@b G35e5@b*) (if (G2e35@valid-bound-ids? G35e3@fmls) (G3024@bless (list 'define G35e2@who (list 'make-traced-procedure (list 'quote G35e2@who) (cons 'lambda (cons G35e3@fmls (cons G35e4@b G35e5@b*)))))) (G3028@invalid-fmls-error G35dc@stx G35e3@fmls))) G35e0@ls/false) ((lambda (G35ea@t) ((lambda (G35ec@ls/false) (if G35ec@ls/false (apply (lambda (G35ee@who G35ef@fmls G35f0@last G35f1@b G35f2@b*) (if (G2e35@valid-bound-ids? (cons G35f0@last G35ef@fmls)) (G3024@bless (list 'define G35ee@who (list 'make-traced-procedure (list 'quote G35ee@who) (cons 'lambda (cons (append G35ef@fmls G35f0@last) (cons G35f1@b G35f2@b*)))))) (G3028@invalid-fmls-error G35dc@stx (append G35ef@fmls G35f0@last)))) G35ec@ls/false) ((lambda (G35f8@t) ((lambda (G35fa@ls/false) (if G35fa@ls/false (apply (lambda (G35fc@who G35fd@expr) (if (G2e2b@id? G35fc@who) (G3024@bless (list 'define G35fc@who (list 'let (list (list 'v G35fd@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G35fc@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3161@syntax-violation '#f '"invalid name" G35dc@stx))) G35fa@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G35f8@t))) (G306e@syntax-dispatch G35f8@t '(_ any any)))) G35ea@t))) (G306e@syntax-dispatch G35ea@t '(_ (any . #(each+ any () any)) any . each-any)))) G35de@t))) (G306e@syntax-dispatch G35de@t '(_ (any . each-any) any . each-any)))) G35dc@stx))) (set! G3034@trace-define-syntax-macro (lambda (G3600@stx) ((lambda (G3602@t) ((lambda (G3604@ls/false) (if G3604@ls/false (apply (lambda (G3606@who G3607@expr) (if (G2e2b@id? G3606@who) (G3024@bless (list 'define-syntax G3606@who (list 'make-traced-macro (list 'quote G3606@who) G3607@expr))) (G3161@syntax-violation '#f '"invalid name" G3600@stx))) G3604@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3602@t))) (G306e@syntax-dispatch G3602@t '(_ any any)))) G3600@stx))) (set! G3036@trace-let/rec-syntax (lambda (G360a@who) (lambda (G360c@stx) ((lambda (G360e@t) ((lambda (G3610@ls/false) (if G3610@ls/false (apply (lambda (G3612@lhs* G3613@rhs* G3614@b G3615@b*) (if (G2e35@valid-bound-ids? G3612@lhs*) ((lambda (G361a@rhs*) (G3024@bless (cons G360a@who (cons (map list G3612@lhs* G361a@rhs*) (cons G3614@b G3615@b*))))) (map (lambda (G361c@lhs G361d@rhs) (list 'make-traced-macro (list 'quote G361c@lhs) G361d@rhs)) G3612@lhs* G3613@rhs*)) (G3028@invalid-fmls-error G360c@stx G3612@lhs*))) G3610@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G360e@t))) (G306e@syntax-dispatch G360e@t '(_ #(each (any any)) any . each-any)))) G360c@stx)))) (set! G3038@trace-let-syntax-macro (G3036@trace-let/rec-syntax 'let-syntax)) (set! G303a@trace-letrec-syntax-macro (G3036@trace-let/rec-syntax 'letrec-syntax)) (set! G303c@guard-macro (lambda (G3620@x) ((lambda (G3623@gen-clauses) (begin (set! G3623@gen-clauses (lambda (G363a@con G363b@outerk G363c@clause*) ((lambda (G3641@f G3643@f*) (begin (set! G3641@f (lambda (G3674@x G3675@k) ((lambda (G3678@t) ((lambda (G367a@ls/false) (if G367a@ls/false (apply (lambda (G367c@e G367d@p) ((lambda (G3680@t) (list 'let (list (list G3680@t G367c@e)) (list 'if G3680@t (list G367d@p G3680@t) G3675@k))) (gensym))) G367a@ls/false) ((lambda (G3682@t) ((lambda (G3684@ls/false) (if G3684@ls/false (apply (lambda (G3686@e) ((lambda (G3688@t) (list 'let (list (list G3688@t G3686@e)) (list 'if G3688@t G3688@t G3675@k))) (gensym))) G3684@ls/false) ((lambda (G368a@t) ((lambda (G368c@ls/false) (if G368c@ls/false (apply (lambda (G368e@e G368f@v G3690@v*) (list 'if G368e@e (cons 'begin (cons G368f@v G3690@v*)) G3675@k)) G368c@ls/false) ((lambda (G3694@t) ((lambda (G3696@ls/false) (if G3696@ls/false (apply (lambda () (G3161@syntax-violation '#f '"invalid guard clause" G3674@x)) G3696@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3694@t))) (G306e@syntax-dispatch G3694@t '_))) G368a@t))) (G306e@syntax-dispatch G368a@t '(any any . each-any)))) G3682@t))) (G306e@syntax-dispatch G3682@t '(any)))) G3678@t))) (G306e@syntax-dispatch G3678@t '(any #(scheme-id =>) any)))) G3674@x))) (set! G3643@f* (lambda (G364e@x*) ((lambda (G3650@t) ((lambda (G3652@ls/false) (if G3652@ls/false (apply (lambda () (values (list 'raise G363a@con) '#t)) G3652@ls/false) ((lambda (G3654@t) ((lambda (G3656@ls/false) (if G3656@ls/false (apply (lambda (G3658@e G3659@e*) (values (cons 'begin (cons G3658@e G3659@e*)) '#f)) G3656@ls/false) ((lambda (G365c@t) ((lambda (G365e@ls/false) (if G365e@ls/false (apply (lambda (G3660@cls G3661@cls*) (call-with-values (lambda () (G3643@f* G3661@cls*)) (lambda (G3666@G3664 G3667@G3665) ((lambda (G366a@g G366b@e) (values (G3641@f G3660@cls G366b@e) G366a@g)) G3667@G3665 G3666@G3664)))) G365e@ls/false) ((lambda (G366e@t) ((lambda (G3670@ls/false) (if G3670@ls/false (apply (lambda (G3672@others) (G3161@syntax-violation '#f '"invalid guard clause" G3672@others)) G3670@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G366e@t))) (G306e@syntax-dispatch G366e@t 'any))) G365c@t))) (G306e@syntax-dispatch G365c@t '(any . any)))) G3654@t))) (G306e@syntax-dispatch G3654@t '((#(scheme-id else) any . each-any))))) G3650@t))) (G306e@syntax-dispatch G3650@t '()))) G364e@x*))) (call-with-values (lambda () (G3643@f* G363c@clause*)) (lambda (G3646@G3644 G3647@G3645) ((lambda (G364a@raisek G364b@code) (if G364a@raisek (list G363b@outerk G364b@code) G364b@code)) G3647@G3645 G3646@G3644))))) '#f '#f))) ((lambda (G3624@t) ((lambda (G3626@ls/false) (if (if G3626@ls/false (begin '#f (apply (lambda (G3628@con G3629@clause* G362a@b G362b@b*) (G2e2b@id? G3628@con)) G3626@ls/false)) '#f) (apply (lambda (G3630@con G3631@clause* G3632@b G3633@b*) ((lambda (G3638@outerk) (G3024@bless (list 'call/cc (list 'lambda (list G3638@outerk) (list 'with-exception-handler (list 'lambda (list G3630@con) (G3623@gen-clauses G3630@con G3638@outerk G3631@clause*)) (cons 'lambda (cons '() (cons '#f (cons G3632@b G3633@b*))))))))) (gensym))) G3626@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3624@t))) (G306e@syntax-dispatch G3624@t '(_ (any . each-any) any . each-any)))) G3620@x))) '#f))) (set! G303e@define-enumeration-macro (lambda (G3698@stx) ((lambda (G369b@set? G369d@remove-dups) (begin (set! G369b@set? (lambda (G36b4@x) ((lambda (G36b6@t) (if G36b6@t G36b6@t (begin '#f (if (not (memq (car G36b4@x) (cdr G36b4@x))) (begin '#f (G369b@set? (cdr G36b4@x))) '#f)))) (null? G36b4@x)))) (set! G369d@remove-dups (lambda (G36b2@ls) (if (null? G36b2@ls) '() (cons (car G36b2@ls) (G369d@remove-dups (remq (car G36b2@ls) (cdr G36b2@ls))))))) ((lambda (G369e@t) ((lambda (G36a0@ls/false) (if (if G36a0@ls/false (begin '#f (apply (lambda (G36a2@name G36a3@id* G36a4@maker) (if (G2e2b@id? G36a2@name) (if (G2e2b@id? G36a4@maker) (begin '#f (for-all G2e2b@id? G36a3@id*)) '#f) '#f)) G36a0@ls/false)) '#f) (apply (lambda (G36a8@name G36a9@id* G36aa@maker) ((lambda (G36ae@name* G36af@mk) (G3024@bless (list 'begin (list 'define G36af@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G36ae@name*)))) (list 'define-syntax G36a8@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G36ae@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G36a8@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G36aa@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G36aa@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G36ae@name*)) (cons 'syntax-violation (cons (list 'quote G36aa@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G36af@mk '('(n* ...)))))))))))) (G369d@remove-dups (G3167@syntax->datum G36a9@id*)) (gensym))) G36a0@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G369e@t))) (G306e@syntax-dispatch G369e@t '(_ any each-any any)))) G3698@stx))) '#f '#f))) (set! G3040@time-macro (lambda (G36b8@stx) ((lambda (G36ba@t) ((lambda (G36bc@ls/false) (if G36bc@ls/false (apply (lambda (G36be@expr) ((lambda (G36c0@str) (G3024@bless (list 'time-it G36c0@str (list 'lambda '() G36be@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G36c4@G36c2 G36c5@G36c3) ((lambda (G36c8@e G36c9@p) (begin (write (G3167@syntax->datum G36be@expr) G36c9@p) (G36c8@e))) G36c5@G36c3 G36c4@G36c2))))) G36bc@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G36ba@t))) (G306e@syntax-dispatch G36ba@t '(_ any)))) G36b8@stx))) (set! G3042@delay-macro (lambda (G36cc@stx) ((lambda (G36ce@t) ((lambda (G36d0@ls/false) (if G36d0@ls/false (apply (lambda (G36d2@expr) (G3024@bless (list 'make-promise (list 'lambda '() G36d2@expr)))) G36d0@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G36ce@t))) (G306e@syntax-dispatch G36ce@t '(_ any)))) G36cc@stx))) (set! G3044@assert-macro (lambda (G36d4@stx) ((lambda (G36d6@t) ((lambda (G36d8@ls/false) (if G36d8@ls/false (apply (lambda (G36da@expr) ((lambda (G36dc@pos) (G3024@bless (list 'unless G36da@expr (list 'assertion-error (list 'quote G36da@expr) (list 'quote G36dc@pos))))) ((lambda (G36de@t) (if G36de@t G36de@t (begin '#f (G3157@expression-position G36da@expr)))) (G3157@expression-position G36d4@stx)))) G36d8@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G36d6@t))) (G306e@syntax-dispatch G36d6@t '(_ any)))) G36d4@stx))) (set! G3046@endianness-macro (lambda (G36e0@stx) ((lambda (G36e2@t) ((lambda (G36e4@ls/false) (if G36e4@ls/false (apply (lambda (G36e6@e) ((lambda (G36e8@t) (if (memv G36e8@t '(little)) (G3024@bless ''little) (if (memv G36e8@t '(big)) (G3024@bless ''big) (G3161@syntax-violation '#f '"endianness must be big or little" G36e0@stx)))) (G3167@syntax->datum G36e6@e))) G36e4@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G36e2@t))) (G306e@syntax-dispatch G36e2@t '(_ any)))) G36e0@stx))) (set! G3048@identifier-syntax-macro (lambda (G36ea@stx) ((lambda (G36ec@t) ((lambda (G36ee@ls/false) (if G36ee@ls/false (apply (lambda (G36f0@expr) (G3024@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G36f0@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G36f0@expr) '((syntax (e* ...)))))))))) G36ee@ls/false) ((lambda (G36f2@t) ((lambda (G36f4@ls/false) (if (if G36f4@ls/false (begin '#f (apply (lambda (G36f6@id1 G36f7@expr1 G36f8@id2 G36f9@expr2 G36fa@expr3) (if (G2e2b@id? G36f6@id1) (if (G2e2b@id? G36f8@id2) (begin '#f (G2e2b@id? G36f9@expr2)) '#f) '#f)) G36f4@ls/false)) '#f) (apply (lambda (G3700@id1 G3701@expr1 G3702@id2 G3703@expr2 G3704@expr3) (G3024@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G3701@expr1)) (list (list 'set! 'id G3703@expr2) (list 'syntax G3704@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G3701@expr1 '(e* ...))))))))) G36f4@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G36f2@t))) (G306e@syntax-dispatch G36f2@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G36ec@t))) (G306e@syntax-dispatch G36ec@t '(_ any)))) G36ea@stx))) (set! G304a@do-macro (lambda (G370a@stx) ((lambda (G370d@bind) (begin (set! G370d@bind (lambda (G3724@x) ((lambda (G3726@t) ((lambda (G3728@ls/false) (if G3728@ls/false (apply (lambda (G372a@x G372b@init) (list G372a@x G372b@init G372a@x)) G3728@ls/false) ((lambda (G372e@t) ((lambda (G3730@ls/false) (if G3730@ls/false (apply (lambda (G3732@x G3733@init G3734@step) (list G3732@x G3733@init G3734@step)) G3730@ls/false) ((lambda (G3738@t) ((lambda (G373a@ls/false) (if G373a@ls/false (apply (lambda () (G3161@syntax-violation '#f '"invalid binding" G370a@stx)) G373a@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3738@t))) (G306e@syntax-dispatch G3738@t '_))) G372e@t))) (G306e@syntax-dispatch G372e@t '(any any any)))) G3726@t))) (G306e@syntax-dispatch G3726@t '(any any)))) G3724@x))) ((lambda (G370e@t) ((lambda (G3710@ls/false) (if G3710@ls/false (apply (lambda (G3712@binding* G3713@test G3714@expr* G3715@command*) ((lambda (G371a@t) ((lambda (G371c@ls/false) (if G371c@ls/false (apply (lambda (G371e@x* G371f@init* G3720@step*) (if (G2e35@valid-bound-ids? G371e@x*) (G3024@bless (list 'letrec (list (list 'loop (list 'lambda G371e@x* (list 'if G3713@test (cons 'begin (cons '(if #f #f) G3714@expr*)) (cons 'begin (append G3715@command* (list (cons 'loop G3720@step*)))))))) (cons 'loop G371f@init*))) (G3161@syntax-violation '#f '"invalid bindings" G370a@stx))) G371c@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G371a@t))) (G306e@syntax-dispatch G371a@t '#(each (any any any))))) (map G370d@bind G3712@binding*))) G3710@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G370e@t))) (G306e@syntax-dispatch G370e@t '(_ each-any (any . each-any) . each-any)))) G370a@stx))) '#f))) (set! G304c@let*-macro (lambda (G373c@stx) ((lambda (G373e@t) ((lambda (G3740@ls/false) (if (if G3740@ls/false (begin '#f (apply (lambda (G3742@lhs* G3743@rhs* G3744@b G3745@b*) (for-all G2e2b@id? G3742@lhs*)) G3740@ls/false)) '#f) (apply (lambda (G374a@lhs* G374b@rhs* G374c@b G374d@b*) (G3024@bless ((letrec ((G3752@f (lambda (G3754@x*) (if (null? G3754@x*) (cons 'let (cons '() (cons G374c@b G374d@b*))) (list 'let (list (car G3754@x*)) (G3752@f (cdr G3754@x*))))))) G3752@f) (map list G374a@lhs* G374b@rhs*)))) G3740@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G373e@t))) (G306e@syntax-dispatch G373e@t '(_ #(each (any any)) any . each-any)))) G373c@stx))) (set! G304e@or-macro (lambda (G3756@stx) ((lambda (G3758@t) ((lambda (G375a@ls/false) (if G375a@ls/false (apply (lambda () '#f) G375a@ls/false) ((lambda (G375c@t) ((lambda (G375e@ls/false) (if G375e@ls/false (apply (lambda (G3760@e G3761@e*) (G3024@bless ((letrec ((G3764@f (lambda (G3766@e G3767@e*) (if (null? G3767@e*) (list 'begin '#f G3766@e) (list 'let (list (list 't G3766@e)) (list 'if 't 't (G3764@f (car G3767@e*) (cdr G3767@e*)))))))) G3764@f) G3760@e G3761@e*))) G375e@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G375c@t))) (G306e@syntax-dispatch G375c@t '(_ any . each-any)))) G3758@t))) (G306e@syntax-dispatch G3758@t '(_)))) G3756@stx))) (set! G3050@and-macro (lambda (G376a@stx) ((lambda (G376c@t) ((lambda (G376e@ls/false) (if G376e@ls/false (apply (lambda () '#t) G376e@ls/false) ((lambda (G3770@t) ((lambda (G3772@ls/false) (if G3772@ls/false (apply (lambda (G3774@e G3775@e*) (G3024@bless ((letrec ((G3778@f (lambda (G377a@e G377b@e*) (if (null? G377b@e*) (list 'begin '#f G377a@e) (cons 'if (cons G377a@e (cons (G3778@f (car G377b@e*) (cdr G377b@e*)) '(#f)))))))) G3778@f) G3774@e G3775@e*))) G3772@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3770@t))) (G306e@syntax-dispatch G3770@t '(_ any . each-any)))) G376c@t))) (G306e@syntax-dispatch G376c@t '(_)))) G376a@stx))) (set! G3052@cond-macro (lambda (G377e@stx) ((lambda (G3780@t) ((lambda (G3782@ls/false) (if G3782@ls/false (apply (lambda (G3784@cls G3785@cls*) (G3024@bless ((letrec ((G3788@f (lambda (G378a@cls G378b@cls*) (if (null? G378b@cls*) ((lambda (G378e@t) ((lambda (G3790@ls/false) (if G3790@ls/false (apply (lambda (G3792@e G3793@e*) (cons 'begin (cons G3792@e G3793@e*))) G3790@ls/false) ((lambda (G3796@t) ((lambda (G3798@ls/false) (if G3798@ls/false (apply (lambda (G379a@e G379b@p) (list 'let (list (list 't G379a@e)) (list 'if 't (cons G379b@p '(t))))) G3798@ls/false) ((lambda (G379e@t) ((lambda (G37a0@ls/false) (if G37a0@ls/false (apply (lambda (G37a2@e) (cons 'or (cons G37a2@e '((if #f #f))))) G37a0@ls/false) ((lambda (G37a4@t) ((lambda (G37a6@ls/false) (if G37a6@ls/false (apply (lambda (G37a8@e G37a9@e*) (list 'if G37a8@e (cons 'begin G37a9@e*))) G37a6@ls/false) ((lambda (G37ac@t) ((lambda (G37ae@ls/false) (if G37ae@ls/false (apply (lambda () (G3161@syntax-violation '#f '"invalid last clause" G377e@stx)) G37ae@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G37ac@t))) (G306e@syntax-dispatch G37ac@t '_))) G37a4@t))) (G306e@syntax-dispatch G37a4@t '(any . each-any)))) G379e@t))) (G306e@syntax-dispatch G379e@t '(any)))) G3796@t))) (G306e@syntax-dispatch G3796@t '(any #(scheme-id =>) any)))) G378e@t))) (G306e@syntax-dispatch G378e@t '(#(scheme-id else) any . each-any)))) G378a@cls) ((lambda (G37b0@t) ((lambda (G37b2@ls/false) (if G37b2@ls/false (apply (lambda (G37b4@e G37b5@e*) (G3161@syntax-violation '#f '"incorrect position of keyword else" G377e@stx)) G37b2@ls/false) ((lambda (G37b8@t) ((lambda (G37ba@ls/false) (if G37ba@ls/false (apply (lambda (G37bc@e G37bd@p) (list 'let (list (list 't G37bc@e)) (list 'if 't (cons G37bd@p '(t)) (G3788@f (car G378b@cls*) (cdr G378b@cls*))))) G37ba@ls/false) ((lambda (G37c0@t) ((lambda (G37c2@ls/false) (if G37c2@ls/false (apply (lambda (G37c4@e) (list 'or G37c4@e (G3788@f (car G378b@cls*) (cdr G378b@cls*)))) G37c2@ls/false) ((lambda (G37c6@t) ((lambda (G37c8@ls/false) (if G37c8@ls/false (apply (lambda (G37ca@e G37cb@e*) (list 'if G37ca@e (cons 'begin G37cb@e*) (G3788@f (car G378b@cls*) (cdr G378b@cls*)))) G37c8@ls/false) ((lambda (G37ce@t) ((lambda (G37d0@ls/false) (if G37d0@ls/false (apply (lambda () (G3161@syntax-violation '#f '"invalid last clause" G377e@stx)) G37d0@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G37ce@t))) (G306e@syntax-dispatch G37ce@t '_))) G37c6@t))) (G306e@syntax-dispatch G37c6@t '(any . each-any)))) G37c0@t))) (G306e@syntax-dispatch G37c0@t '(any)))) G37b8@t))) (G306e@syntax-dispatch G37b8@t '(any #(scheme-id =>) any)))) G37b0@t))) (G306e@syntax-dispatch G37b0@t '(#(scheme-id else) any . each-any)))) G378a@cls))))) G3788@f) G3784@cls G3785@cls*))) G3782@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3780@t))) (G306e@syntax-dispatch G3780@t '(_ any . each-any)))) G377e@stx))) (set! G3054@do-include (lambda (G37d2@stx G37d3@id G37d4@filename) ((lambda (G37d8@filename) (begin (if (not (if (string? G37d8@filename) (begin '#f (G2e2b@id? G37d3@id)) '#f)) (G3161@syntax-violation '#f '"invalid syntax" G37d2@stx) (void)) (cons (G3024@bless 'begin) (with-input-from-file G37d8@filename (lambda () ((letrec ((G37da@f (lambda (G37dc@ls) ((lambda (G37de@x) (if (eof-object? G37de@x) (reverse G37dc@ls) (G37da@f (cons (G2e09@datum->stx G37d3@id G37de@x) G37dc@ls)))) (G2972@G287a@read-annotated))))) G37da@f) '())))))) (G2e41@stx->datum G37d4@filename)))) (set! G3056@include-macro (lambda (G37e0@e) ((lambda (G37e2@t) ((lambda (G37e4@ls/false) (if G37e4@ls/false (apply (lambda (G37e6@id G37e7@filename) (G3054@do-include G37e0@e G37e6@id G37e7@filename)) G37e4@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G37e2@t))) (G306e@syntax-dispatch G37e2@t '(any any)))) G37e0@e))) (set! G3058@include-into-macro (lambda (G37ea@e) ((lambda (G37ec@t) ((lambda (G37ee@ls/false) (if G37ee@ls/false (apply (lambda (G37f0@id G37f1@filename) (G3054@do-include G37ea@e G37f0@id G37f1@filename)) G37ee@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G37ec@t))) (G306e@syntax-dispatch G37ec@t '(_ any any)))) G37ea@e))) (set! G305a@syntax-rules-macro (lambda (G37f4@e) ((lambda (G37f6@t) ((lambda (G37f8@ls/false) (if G37f8@ls/false (apply (lambda (G37fa@lits G37fb@pat* G37fc@tmp*) (begin (G3074@verify-literals G37fa@lits G37f4@e) (G3024@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G37fa@lits (map (lambda (G3800@pat G3801@tmp) ((lambda (G3804@t) ((lambda (G3806@ls/false) (if G3806@ls/false (apply (lambda (G3808@rest) (list (cons 'g G3808@rest) (list 'syntax G3801@tmp))) G3806@ls/false) ((lambda (G380a@t) ((lambda (G380c@ls/false) (if G380c@ls/false (apply (lambda () (G3161@syntax-violation '#f '"invalid syntax-rules pattern" G37f4@e G3800@pat)) G380c@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G380a@t))) (G306e@syntax-dispatch G380a@t '_))) G3804@t))) (G306e@syntax-dispatch G3804@t '(_ . any)))) G3800@pat)) G37fb@pat* G37fc@tmp*)))))))) G37f8@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G37f6@t))) (G306e@syntax-dispatch G37f6@t '(_ each-any . #(each (any any)))))) G37f4@e))) (set! G305c@quasiquote-macro ((lambda () ((lambda (G380f@datum G3838@quasicons* G383a@quasicons G383c@quasiappend G383e@quasivector G3840@vquasi G3842@quasi) (begin (set! G380f@datum (lambda (G391d@x) (list (G2ffc@scheme-stx 'quote) (G2e13@mkstx G391d@x '() '() '())))) (set! G3838@quasicons* (lambda (G3915@x G3916@y) ((letrec ((G3919@f (lambda (G391b@x) (if (null? G391b@x) G3916@y (G383a@quasicons (car G391b@x) (G3919@f (cdr G391b@x))))))) G3919@f) G3915@x))) (set! G383a@quasicons (lambda (G38ef@x G38f0@y) ((lambda (G38f3@t) ((lambda (G38f5@ls/false) (if G38f5@ls/false (apply (lambda (G38f7@dy) ((lambda (G38f9@t) ((lambda (G38fb@ls/false) (if G38fb@ls/false (apply (lambda (G38fd@dx) (list (G2ffc@scheme-stx 'quote) (cons G38fd@dx G38f7@dy))) G38fb@ls/false) ((lambda (G38ff@t) ((lambda (G3901@ls/false) (if G3901@ls/false (apply (lambda () ((lambda (G3903@t) ((lambda (G3905@ls/false) (if G3905@ls/false (apply (lambda () (list (G2ffc@scheme-stx 'list) G38ef@x)) G3905@ls/false) ((lambda (G3907@t) ((lambda (G3909@ls/false) (if G3909@ls/false (apply (lambda () (list (G2ffc@scheme-stx 'cons) G38ef@x G38f0@y)) G3909@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3907@t))) (G306e@syntax-dispatch G3907@t '_))) G3903@t))) (G306e@syntax-dispatch G3903@t '()))) G38f7@dy)) G3901@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G38ff@t))) (G306e@syntax-dispatch G38ff@t '_))) G38f9@t))) (G306e@syntax-dispatch G38f9@t '(#(scheme-id quote) any)))) G38ef@x)) G38f5@ls/false) ((lambda (G390b@t) ((lambda (G390d@ls/false) (if G390d@ls/false (apply (lambda (G390f@stuff) (cons* (G2ffc@scheme-stx 'list) G38ef@x G390f@stuff)) G390d@ls/false) ((lambda (G3911@t) ((lambda (G3913@ls/false) (if G3913@ls/false (apply (lambda () (list (G2ffc@scheme-stx 'cons) G38ef@x G38f0@y)) G3913@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3911@t))) (G306e@syntax-dispatch G3911@t '_))) G390b@t))) (G306e@syntax-dispatch G390b@t '(#(scheme-id list) . each-any)))) G38f3@t))) (G306e@syntax-dispatch G38f3@t '(#(scheme-id quote) any)))) G38f0@y))) (set! G383c@quasiappend (lambda (G38d5@x G38d6@y) ((lambda (G38d9@ls) (if (null? G38d9@ls) (list (G2ffc@scheme-stx 'quote) '()) (if (null? (cdr G38d9@ls)) (car G38d9@ls) (cons* (G2ffc@scheme-stx 'append) G38d9@ls)))) ((letrec ((G38db@f (lambda (G38dd@x) (if (null? G38dd@x) ((lambda (G38df@t) ((lambda (G38e1@ls/false) (if G38e1@ls/false (apply (lambda () '()) G38e1@ls/false) ((lambda (G38e3@t) ((lambda (G38e5@ls/false) (if G38e5@ls/false (apply (lambda () (list G38d6@y)) G38e5@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G38e3@t))) (G306e@syntax-dispatch G38e3@t '_))) G38df@t))) (G306e@syntax-dispatch G38df@t '(#(scheme-id quote) ())))) G38d6@y) ((lambda (G38e7@t) ((lambda (G38e9@ls/false) (if G38e9@ls/false (apply (lambda () (G38db@f (cdr G38dd@x))) G38e9@ls/false) ((lambda (G38eb@t) ((lambda (G38ed@ls/false) (if G38ed@ls/false (apply (lambda () (cons (car G38dd@x) (G38db@f (cdr G38dd@x)))) G38ed@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G38eb@t))) (G306e@syntax-dispatch G38eb@t '_))) G38e7@t))) (G306e@syntax-dispatch G38e7@t '(#(scheme-id quote) ())))) (car G38dd@x)))))) G38db@f) G38d5@x)))) (set! G383e@quasivector (lambda (G38a3@x) ((lambda (G38a5@pat-x) ((lambda (G38a7@t) ((lambda (G38a9@ls/false) (if G38a9@ls/false (apply (lambda (G38ab@x*) (list (G2ffc@scheme-stx 'quote) (list->vector G38ab@x*))) G38a9@ls/false) ((lambda (G38ad@t) ((lambda (G38af@ls/false) (if G38af@ls/false (apply (lambda () ((letrec ((G38b1@f (lambda (G38b3@x G38b4@k) ((lambda (G38b7@t) ((lambda (G38b9@ls/false) (if G38b9@ls/false (apply (lambda (G38bb@x*) (G38b4@k (map (lambda (G38bd@x) (list (G2ffc@scheme-stx 'quote) G38bd@x)) G38bb@x*))) G38b9@ls/false) ((lambda (G38bf@t) ((lambda (G38c1@ls/false) (if G38c1@ls/false (apply (lambda (G38c3@x*) (G38b4@k G38c3@x*)) G38c1@ls/false) ((lambda (G38c5@t) ((lambda (G38c7@ls/false) (if G38c7@ls/false (apply (lambda (G38c9@x G38ca@y) (G38b1@f G38ca@y (lambda (G38cd@ls) (G38b4@k (cons G38c9@x G38cd@ls))))) G38c7@ls/false) ((lambda (G38cf@t) ((lambda (G38d1@ls/false) (if G38d1@ls/false (apply (lambda () (list (G2ffc@scheme-stx 'list->vector) G38a5@pat-x)) G38d1@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G38cf@t))) (G306e@syntax-dispatch G38cf@t '_))) G38c5@t))) (G306e@syntax-dispatch G38c5@t '(#(scheme-id cons) any any)))) G38bf@t))) (G306e@syntax-dispatch G38bf@t '(#(scheme-id list) . each-any)))) G38b7@t))) (G306e@syntax-dispatch G38b7@t '(#(scheme-id quote) each-any)))) G38b3@x)))) G38b1@f) G38a3@x (lambda (G38d3@ls) (cons* (G2ffc@scheme-stx 'vector) G38d3@ls)))) G38af@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G38ad@t))) (G306e@syntax-dispatch G38ad@t '_))) G38a7@t))) (G306e@syntax-dispatch G38a7@t '(#(scheme-id quote) each-any)))) G38a5@pat-x)) G38a3@x))) (set! G3840@vquasi (lambda (G3881@p G3882@lev) ((lambda (G3885@t) ((lambda (G3887@ls/false) (if G3887@ls/false (apply (lambda (G3889@p G388a@q) ((lambda (G388d@t) ((lambda (G388f@ls/false) (if G388f@ls/false (apply (lambda (G3891@p) (if (= G3882@lev '0) (G3838@quasicons* G3891@p (G3840@vquasi G388a@q G3882@lev)) (G383a@quasicons (G383a@quasicons (G380f@datum 'unquote) (G3842@quasi G3891@p (- G3882@lev '1))) (G3840@vquasi G388a@q G3882@lev)))) G388f@ls/false) ((lambda (G3893@t) ((lambda (G3895@ls/false) (if G3895@ls/false (apply (lambda (G3897@p) (if (= G3882@lev '0) (G383c@quasiappend G3897@p (G3840@vquasi G388a@q G3882@lev)) (G383a@quasicons (G383a@quasicons (G380f@datum 'unquote-splicing) (G3842@quasi G3897@p (- G3882@lev '1))) (G3840@vquasi G388a@q G3882@lev)))) G3895@ls/false) ((lambda (G3899@t) ((lambda (G389b@ls/false) (if G389b@ls/false (apply (lambda (G389d@p) (G383a@quasicons (G3842@quasi G389d@p G3882@lev) (G3840@vquasi G388a@q G3882@lev))) G389b@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3899@t))) (G306e@syntax-dispatch G3899@t 'any))) G3893@t))) (G306e@syntax-dispatch G3893@t '(#(scheme-id unquote-splicing) . each-any)))) G388d@t))) (G306e@syntax-dispatch G388d@t '(#(scheme-id unquote) . each-any)))) G3889@p)) G3887@ls/false) ((lambda (G389f@t) ((lambda (G38a1@ls/false) (if G38a1@ls/false (apply (lambda () (list (G2ffc@scheme-stx 'quote) '())) G38a1@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G389f@t))) (G306e@syntax-dispatch G389f@t '()))) G3885@t))) (G306e@syntax-dispatch G3885@t '(any . any)))) G3881@p))) (set! G3842@quasi (lambda (G384b@p G384c@lev) ((lambda (G384f@t) ((lambda (G3851@ls/false) (if G3851@ls/false (apply (lambda (G3853@p) (if (= G384c@lev '0) G3853@p (G383a@quasicons (G380f@datum 'unquote) (G3842@quasi (list G3853@p) (- G384c@lev '1))))) G3851@ls/false) ((lambda (G3855@t) ((lambda (G3857@ls/false) (if G3857@ls/false (apply (lambda (G3859@p G385a@q) (if (= G384c@lev '0) (G3838@quasicons* G3859@p (G3842@quasi G385a@q G384c@lev)) (G383a@quasicons (G383a@quasicons (G380f@datum 'unquote) (G3842@quasi G3859@p (- G384c@lev '1))) (G3842@quasi G385a@q G384c@lev)))) G3857@ls/false) ((lambda (G385d@t) ((lambda (G385f@ls/false) (if G385f@ls/false (apply (lambda (G3861@p G3862@q) (if (= G384c@lev '0) (G383c@quasiappend G3861@p (G3842@quasi G3862@q G384c@lev)) (G383a@quasicons (G383a@quasicons (G380f@datum 'unquote-splicing) (G3842@quasi G3861@p (- G384c@lev '1))) (G3842@quasi G3862@q G384c@lev)))) G385f@ls/false) ((lambda (G3865@t) ((lambda (G3867@ls/false) (if G3867@ls/false (apply (lambda (G3869@p) (G383a@quasicons (G380f@datum 'quasiquote) (G3842@quasi (list G3869@p) (+ G384c@lev '1)))) G3867@ls/false) ((lambda (G386b@t) ((lambda (G386d@ls/false) (if G386d@ls/false (apply (lambda (G386f@p G3870@q) (G383a@quasicons (G3842@quasi G386f@p G384c@lev) (G3842@quasi G3870@q G384c@lev))) G386d@ls/false) ((lambda (G3873@t) ((lambda (G3875@ls/false) (if (if G3875@ls/false (begin '#f (apply (lambda (G3877@x) (not (G2df3@stx? G3877@x))) G3875@ls/false)) '#f) (apply (lambda (G3879@x) (G383e@quasivector (G3840@vquasi G3879@x G384c@lev))) G3875@ls/false) ((lambda (G387b@t) ((lambda (G387d@ls/false) (if G387d@ls/false (apply (lambda (G387f@p) (list (G2ffc@scheme-stx 'quote) G387f@p)) G387d@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G387b@t))) (G306e@syntax-dispatch G387b@t 'any))) G3873@t))) (G306e@syntax-dispatch G3873@t '#(vector each-any)))) G386b@t))) (G306e@syntax-dispatch G386b@t '(any . any)))) G3865@t))) (G306e@syntax-dispatch G3865@t '(#(scheme-id quasiquote) any)))) G385d@t))) (G306e@syntax-dispatch G385d@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3855@t))) (G306e@syntax-dispatch G3855@t '((#(scheme-id unquote) . each-any) . any)))) G384f@t))) (G306e@syntax-dispatch G384f@t '(#(scheme-id unquote) any)))) G384b@p))) (lambda (G3843@x) ((lambda (G3845@t) ((lambda (G3847@ls/false) (if G3847@ls/false (apply (lambda (G3849@e) (G3842@quasi G3849@e '0)) G3847@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3845@t))) (G306e@syntax-dispatch G3845@t '(_ any)))) G3843@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G305e@quasisyntax-macro ((lambda () ((lambda (G3920@quasi) (begin (set! G3920@quasi (lambda (G3938@p G3939@lev) ((lambda (G393c@t) ((lambda (G393e@ls/false) (if G393e@ls/false (apply (lambda (G3940@p) (if (= G3939@lev '0) ((lambda (G3942@g) (values (list G3942@g) (list G3940@p) G3942@g)) (gensym)) (call-with-values (lambda () (G3920@quasi G3940@p (- G3939@lev '1))) (lambda (G3947@G3944 G3948@G3945 G3949@G3946) ((lambda (G394d@p G394e@rhs* G394f@lhs*) (values G394f@lhs* G394e@rhs* (list 'unsyntax G394d@p))) G3949@G3946 G3948@G3945 G3947@G3944))))) G393e@ls/false) ((lambda (G3953@t) ((lambda (G3955@ls/false) (if (if G3955@ls/false (begin '#f (apply (lambda () (= G3939@lev '0)) G3955@ls/false)) '#f) (apply (lambda () (G3161@syntax-violation '#f '"incorrect use of unsyntax" G3938@p)) G3955@ls/false) ((lambda (G3957@t) ((lambda (G3959@ls/false) (if G3959@ls/false (apply (lambda (G395b@p* G395c@q) (call-with-values (lambda () (G3920@quasi G395c@q G3939@lev)) (lambda (G3962@G395f G3963@G3960 G3964@G3961) ((lambda (G3968@q G3969@rhs* G396a@lhs*) (if (= G3939@lev '0) ((lambda (G396e@g*) (values (append G396e@g* G396a@lhs*) (append G395b@p* G3969@rhs*) (append G396e@g* G3968@q))) (map (lambda (G3970@x) (gensym)) G395b@p*)) (call-with-values (lambda () (G3920@quasi G395b@p* (- G3939@lev '1))) (lambda (G3975@G3972 G3976@G3973 G3977@G3974) ((lambda (G397b@p* G397c@rhs2* G397d@lhs2*) (values (append G397d@lhs2* G396a@lhs*) (append G397c@rhs2* G3969@rhs*) (cons (cons 'unsyntax G397b@p*) G3968@q))) G3977@G3974 G3976@G3973 G3975@G3972))))) G3964@G3961 G3963@G3960 G3962@G395f)))) G3959@ls/false) ((lambda (G3981@t) ((lambda (G3983@ls/false) (if G3983@ls/false (apply (lambda (G3985@p* G3986@q) (call-with-values (lambda () (G3920@quasi G3986@q G3939@lev)) (lambda (G398c@G3989 G398d@G398a G398e@G398b) ((lambda (G3992@q G3993@rhs* G3994@lhs*) (if (= G3939@lev '0) ((lambda (G3998@g*) (values (append (map (lambda (G399a@g) (cons G399a@g '(...))) G3998@g*) G3994@lhs*) (append G3985@p* G3993@rhs*) (append (apply append (map (lambda (G399c@g) (cons G399c@g '(...))) G3998@g*)) G3992@q))) (map (lambda (G399e@x) (gensym)) G3985@p*)) (call-with-values (lambda () (G3920@quasi G3985@p* (- G3939@lev '1))) (lambda (G39a3@G39a0 G39a4@G39a1 G39a5@G39a2) ((lambda (G39a9@p* G39aa@rhs2* G39ab@lhs2*) (values (append G39ab@lhs2* G3994@lhs*) (append G39aa@rhs2* G3993@rhs*) (cons (cons 'unsyntax-splicing G39a9@p*) G3992@q))) G39a5@G39a2 G39a4@G39a1 G39a3@G39a0))))) G398e@G398b G398d@G398a G398c@G3989)))) G3983@ls/false) ((lambda (G39af@t) ((lambda (G39b1@ls/false) (if (if G39b1@ls/false (begin '#f (apply (lambda () (= G3939@lev '0)) G39b1@ls/false)) '#f) (apply (lambda () (G3161@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3938@p)) G39b1@ls/false) ((lambda (G39b3@t) ((lambda (G39b5@ls/false) (if G39b5@ls/false (apply (lambda (G39b7@p) (call-with-values (lambda () (G3920@quasi G39b7@p (+ G3939@lev '1))) (lambda (G39bc@G39b9 G39bd@G39ba G39be@G39bb) ((lambda (G39c2@p G39c3@rhs* G39c4@lhs*) (values G39c4@lhs* G39c3@rhs* (list 'quasisyntax G39c2@p))) G39be@G39bb G39bd@G39ba G39bc@G39b9)))) G39b5@ls/false) ((lambda (G39c8@t) ((lambda (G39ca@ls/false) (if G39ca@ls/false (apply (lambda (G39cc@p G39cd@q) (call-with-values (lambda () (G3920@quasi G39cc@p G3939@lev)) (lambda (G39d6@G39d0 G39d7@G39d1 G39d8@G39d2) (call-with-values (lambda () (G3920@quasi G39cd@q G3939@lev)) (lambda (G39dc@G39d3 G39dd@G39d4 G39de@G39d5) ((lambda (G39e2@q G39e3@rhs2* G39e4@lhs2* G39e5@p G39e6@rhs* G39e7@lhs*) (values (append G39e4@lhs2* G39e7@lhs*) (append G39e3@rhs2* G39e6@rhs*) (cons G39e5@p G39e2@q))) G39de@G39d5 G39dd@G39d4 G39dc@G39d3 G39d8@G39d2 G39d7@G39d1 G39d6@G39d0)))))) G39ca@ls/false) ((lambda (G39ee@t) ((lambda (G39f0@ls/false) (if G39f0@ls/false (apply (lambda (G39f2@x*) (call-with-values (lambda () (G3920@quasi G39f2@x* G3939@lev)) (lambda (G39f7@G39f4 G39f8@G39f5 G39f9@G39f6) ((lambda (G39fd@x* G39fe@rhs* G39ff@lhs*) (values G39ff@lhs* G39fe@rhs* (list->vector G39fd@x*))) G39f9@G39f6 G39f8@G39f5 G39f7@G39f4)))) G39f0@ls/false) ((lambda (G3a03@t) ((lambda (G3a05@ls/false) (if G3a05@ls/false (apply (lambda () (values '() '() G3938@p)) G3a05@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3a03@t))) (G306e@syntax-dispatch G3a03@t '_))) G39ee@t))) (G306e@syntax-dispatch G39ee@t '#(vector each-any)))) G39c8@t))) (G306e@syntax-dispatch G39c8@t '(any . any)))) G39b3@t))) (G306e@syntax-dispatch G39b3@t '(#(scheme-id quasisyntax) any)))) G39af@t))) (G306e@syntax-dispatch G39af@t '#(scheme-id unsyntax-splicing)))) G3981@t))) (G306e@syntax-dispatch G3981@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3957@t))) (G306e@syntax-dispatch G3957@t '((#(scheme-id unsyntax) . each-any) . any)))) G3953@t))) (G306e@syntax-dispatch G3953@t '#(scheme-id unsyntax)))) G393c@t))) (G306e@syntax-dispatch G393c@t '(#(scheme-id unsyntax) any)))) G3938@p))) (lambda (G3921@x) ((lambda (G3923@t) ((lambda (G3925@ls/false) (if G3925@ls/false (apply (lambda (G3927@e) (call-with-values (lambda () (G3920@quasi G3927@e '0)) (lambda (G392c@G3929 G392d@G392a G392e@G392b) ((lambda (G3932@v G3933@rhs* G3934@lhs*) (G3024@bless (list 'syntax-case (cons 'list G3933@rhs*) '() (list G3934@lhs* (list 'syntax G3932@v))))) G392e@G392b G392d@G392a G392c@G3929)))) G3925@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3923@t))) (G306e@syntax-dispatch G3923@t '(_ any)))) G3921@x)))) '#f)))) (set! G3060@define-struct-macro (lambda (G3a07@stx) (G3161@syntax-violation '#f '"define-struct not supported" G3a07@stx))) (set! G3062@define-record-type-macro (lambda (G3a09@x) ((lambda (G3a0c@id G3a0e@get-record-name G3a10@get-record-constructor-name G3a12@get-record-predicate-name G3a14@get-clause G3a16@foo-rtd-code G3a18@parent-rtd-code G3a1a@parent-rcd-code G3a1c@foo-rcd-code G3a1e@get-protocol-code G3a20@get-fields G3a22@get-mutator-indices G3a24@get-mutators G3a26@get-accessors G3a28@enumerate G3a2a@do-define-record G3a2c@verify-clauses) (begin (set! G3a0c@id (lambda (G3c03@ctxt . G3c05@str*) (G3165@datum->syntax G3c03@ctxt (string->symbol (apply string-append (map (lambda (G3c07@x) (if (symbol? G3c07@x) (symbol->string G3c07@x) (if (string? G3c07@x) G3c07@x (assertion-violation 'define-record-type '"BUG")))) G3c05@str*)))))) (set! G3a0e@get-record-name (lambda (G3bf1@spec) ((lambda (G3bf3@t) ((lambda (G3bf5@ls/false) (if G3bf5@ls/false (apply (lambda (G3bf7@foo G3bf8@make-foo G3bf9@foo?) G3bf7@foo) G3bf5@ls/false) ((lambda (G3bfd@t) ((lambda (G3bff@ls/false) (if G3bff@ls/false (apply (lambda (G3c01@foo) G3c01@foo) G3bff@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3bfd@t))) (G306e@syntax-dispatch G3bfd@t 'any))) G3bf3@t))) (G306e@syntax-dispatch G3bf3@t '(any any any)))) G3bf1@spec))) (set! G3a10@get-record-constructor-name (lambda (G3bdd@spec) ((lambda (G3bdf@t) ((lambda (G3be1@ls/false) (if G3be1@ls/false (apply (lambda (G3be3@foo G3be4@make-foo G3be5@foo?) G3be4@make-foo) G3be1@ls/false) ((lambda (G3be9@t) ((lambda (G3beb@ls/false) (if (if G3beb@ls/false (begin '#f (apply (lambda (G3bed@foo) (G2e2b@id? G3bed@foo)) G3beb@ls/false)) '#f) (apply (lambda (G3bef@foo) (G3a0c@id G3bef@foo '"make-" (G2e41@stx->datum G3bef@foo))) G3beb@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3be9@t))) (G306e@syntax-dispatch G3be9@t 'any))) G3bdf@t))) (G306e@syntax-dispatch G3bdf@t '(any any any)))) G3bdd@spec))) (set! G3a12@get-record-predicate-name (lambda (G3bc9@spec) ((lambda (G3bcb@t) ((lambda (G3bcd@ls/false) (if G3bcd@ls/false (apply (lambda (G3bcf@foo G3bd0@make-foo G3bd1@foo?) G3bd1@foo?) G3bcd@ls/false) ((lambda (G3bd5@t) ((lambda (G3bd7@ls/false) (if (if G3bd7@ls/false (begin '#f (apply (lambda (G3bd9@foo) (G2e2b@id? G3bd9@foo)) G3bd7@ls/false)) '#f) (apply (lambda (G3bdb@foo) (G3a0c@id G3bdb@foo (G2e41@stx->datum G3bdb@foo) '"?")) G3bd7@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3bd5@t))) (G306e@syntax-dispatch G3bd5@t 'any))) G3bcb@t))) (G306e@syntax-dispatch G3bcb@t '(any any any)))) G3bc9@spec))) (set! G3a14@get-clause (lambda (G3bb7@id G3bb8@ls) ((lambda (G3bbb@t) ((lambda (G3bbd@ls/false) (if G3bbd@ls/false (apply (lambda () '#f) G3bbd@ls/false) ((lambda (G3bbf@t) ((lambda (G3bc1@ls/false) (if G3bc1@ls/false (apply (lambda (G3bc3@x G3bc4@rest G3bc5@ls) (if (G2e33@free-id=? (G3024@bless G3bb7@id) G3bc3@x) (cons G3bc3@x G3bc4@rest) (G3a14@get-clause G3bb7@id G3bc5@ls))) G3bc1@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3bbf@t))) (G306e@syntax-dispatch G3bbf@t '((any . any) . any)))) G3bbb@t))) (G306e@syntax-dispatch G3bbb@t '()))) G3bb8@ls))) (set! G3a16@foo-rtd-code (lambda (G3b65@name G3b66@clause* G3b67@parent-rtd-code) ((lambda (G3b6c@convert-field-spec*) (begin (set! G3b6c@convert-field-spec* (lambda (G3b9d@ls) (list->vector (map (lambda (G3b9f@x) ((lambda (G3ba1@t) ((lambda (G3ba3@ls/false) (if G3ba3@ls/false (apply (lambda (G3ba5@name G3ba6@rest) (list 'mutable G3ba5@name)) G3ba3@ls/false) ((lambda (G3ba9@t) ((lambda (G3bab@ls/false) (if G3bab@ls/false (apply (lambda (G3bad@name G3bae@rest) (list 'immutable G3bad@name)) G3bab@ls/false) ((lambda (G3bb1@t) ((lambda (G3bb3@ls/false) (if G3bb3@ls/false (apply (lambda (G3bb5@name) (list 'immutable G3bb5@name)) G3bb3@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3bb1@t))) (G306e@syntax-dispatch G3bb1@t 'any))) G3ba9@t))) (G306e@syntax-dispatch G3ba9@t '(#(scheme-id immutable) any . any)))) G3ba1@t))) (G306e@syntax-dispatch G3ba1@t '(#(scheme-id mutable) any . any)))) G3b9f@x)) G3b9d@ls)))) ((lambda (G3b6d@uid-code G3b6e@sealed? G3b6f@opaque? G3b70@fields) (G3024@bless (list 'make-record-type-descriptor (list 'quote G3b65@name) G3b67@parent-rtd-code G3b6d@uid-code G3b6e@sealed? G3b6f@opaque? G3b70@fields))) ((lambda (G3b75@t) ((lambda (G3b77@ls/false) (if G3b77@ls/false (apply (lambda () (list 'quote (gensym))) G3b77@ls/false) ((lambda (G3b79@t) ((lambda (G3b7b@ls/false) (if G3b7b@ls/false (apply (lambda (G3b7d@uid) (list 'quote G3b7d@uid)) G3b7b@ls/false) ((lambda (G3b7f@t) ((lambda (G3b81@ls/false) (if G3b81@ls/false (apply (lambda () '#f) G3b81@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3b7f@t))) (G306e@syntax-dispatch G3b7f@t '_))) G3b79@t))) (G306e@syntax-dispatch G3b79@t '(_ any)))) G3b75@t))) (G306e@syntax-dispatch G3b75@t '(_)))) (G3a14@get-clause 'nongenerative G3b66@clause*)) ((lambda (G3b83@t) ((lambda (G3b85@ls/false) (if G3b85@ls/false (apply (lambda () '#t) G3b85@ls/false) ((lambda (G3b87@t) ((lambda (G3b89@ls/false) (if G3b89@ls/false (apply (lambda () '#f) G3b89@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3b87@t))) (G306e@syntax-dispatch G3b87@t '_))) G3b83@t))) (G306e@syntax-dispatch G3b83@t '(_ #(atom #t))))) (G3a14@get-clause 'sealed G3b66@clause*)) ((lambda (G3b8b@t) ((lambda (G3b8d@ls/false) (if G3b8d@ls/false (apply (lambda () '#t) G3b8d@ls/false) ((lambda (G3b8f@t) ((lambda (G3b91@ls/false) (if G3b91@ls/false (apply (lambda () '#f) G3b91@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3b8f@t))) (G306e@syntax-dispatch G3b8f@t '_))) G3b8b@t))) (G306e@syntax-dispatch G3b8b@t '(_ #(atom #t))))) (G3a14@get-clause 'opaque G3b66@clause*)) ((lambda (G3b93@t) ((lambda (G3b95@ls/false) (if G3b95@ls/false (apply (lambda (G3b97@field-spec*) (list 'quote (G3b6c@convert-field-spec* G3b97@field-spec*))) G3b95@ls/false) ((lambda (G3b99@t) ((lambda (G3b9b@ls/false) (if G3b9b@ls/false (apply (lambda () ''#()) G3b9b@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3b99@t))) (G306e@syntax-dispatch G3b99@t '_))) G3b93@t))) (G306e@syntax-dispatch G3b93@t '(_ . each-any)))) (G3a14@get-clause 'fields G3b66@clause*))))) '#f))) (set! G3a18@parent-rtd-code (lambda (G3b4d@clause*) ((lambda (G3b4f@t) ((lambda (G3b51@ls/false) (if G3b51@ls/false (apply (lambda (G3b53@name) (list 'record-type-descriptor G3b53@name)) G3b51@ls/false) ((lambda (G3b55@t) ((lambda (G3b57@ls/false) (if G3b57@ls/false (apply (lambda () ((lambda (G3b59@t) ((lambda (G3b5b@ls/false) (if G3b5b@ls/false (apply (lambda (G3b5d@rtd G3b5e@rcd) G3b5d@rtd) G3b5b@ls/false) ((lambda (G3b61@t) ((lambda (G3b63@ls/false) (if G3b63@ls/false (apply (lambda () '#f) G3b63@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3b61@t))) (G306e@syntax-dispatch G3b61@t '#(atom #f)))) G3b59@t))) (G306e@syntax-dispatch G3b59@t '(_ any any)))) (G3a14@get-clause 'parent-rtd G3b4d@clause*))) G3b57@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3b55@t))) (G306e@syntax-dispatch G3b55@t '#(atom #f)))) G3b4f@t))) (G306e@syntax-dispatch G3b4f@t '(_ any)))) (G3a14@get-clause 'parent G3b4d@clause*)))) (set! G3a1a@parent-rcd-code (lambda (G3b35@clause*) ((lambda (G3b37@t) ((lambda (G3b39@ls/false) (if G3b39@ls/false (apply (lambda (G3b3b@name) (list 'record-constructor-descriptor G3b3b@name)) G3b39@ls/false) ((lambda (G3b3d@t) ((lambda (G3b3f@ls/false) (if G3b3f@ls/false (apply (lambda () ((lambda (G3b41@t) ((lambda (G3b43@ls/false) (if G3b43@ls/false (apply (lambda (G3b45@rtd G3b46@rcd) G3b46@rcd) G3b43@ls/false) ((lambda (G3b49@t) ((lambda (G3b4b@ls/false) (if G3b4b@ls/false (apply (lambda () '#f) G3b4b@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3b49@t))) (G306e@syntax-dispatch G3b49@t '#(atom #f)))) G3b41@t))) (G306e@syntax-dispatch G3b41@t '(_ any any)))) (G3a14@get-clause 'parent-rtd G3b35@clause*))) G3b3f@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3b3d@t))) (G306e@syntax-dispatch G3b3d@t '#(atom #f)))) G3b37@t))) (G306e@syntax-dispatch G3b37@t '(_ any)))) (G3a14@get-clause 'parent G3b35@clause*)))) (set! G3a1c@foo-rcd-code (lambda (G3b2d@clause* G3b2e@foo-rtd G3b2f@protocol G3b30@parent-rcd-code) (list 'make-record-constructor-descriptor G3b2e@foo-rtd G3b30@parent-rcd-code G3b2f@protocol))) (set! G3a1e@get-protocol-code (lambda (G3b21@clause*) ((lambda (G3b23@t) ((lambda (G3b25@ls/false) (if G3b25@ls/false (apply (lambda (G3b27@expr) G3b27@expr) G3b25@ls/false) ((lambda (G3b29@t) ((lambda (G3b2b@ls/false) (if G3b2b@ls/false (apply (lambda () '#f) G3b2b@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3b29@t))) (G306e@syntax-dispatch G3b29@t '_))) G3b23@t))) (G306e@syntax-dispatch G3b23@t '(_ any)))) (G3a14@get-clause 'protocol G3b21@clause*)))) (set! G3a20@get-fields (lambda (G3b0f@clause*) ((lambda (G3b11@t) ((lambda (G3b13@ls/false) (if G3b13@ls/false (apply (lambda () '()) G3b13@ls/false) ((lambda (G3b15@t) ((lambda (G3b17@ls/false) (if G3b17@ls/false (apply (lambda (G3b19@f*) G3b19@f*) G3b17@ls/false) ((lambda (G3b1b@t) ((lambda (G3b1d@ls/false) (if G3b1d@ls/false (apply (lambda (G3b1f@rest) (G3a20@get-fields G3b1f@rest)) G3b1d@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3b1b@t))) (G306e@syntax-dispatch G3b1b@t '(_ . any)))) G3b15@t))) (G306e@syntax-dispatch G3b15@t '((#(scheme-id fields) . each-any) . _)))) G3b11@t))) (G306e@syntax-dispatch G3b11@t '()))) G3b0f@clause*))) (set! G3a22@get-mutator-indices (lambda (G3af7@fields) ((letrec ((G3af9@f (lambda (G3afb@fields G3afc@i) ((lambda (G3aff@t) ((lambda (G3b01@ls/false) (if G3b01@ls/false (apply (lambda () '()) G3b01@ls/false) ((lambda (G3b03@t) ((lambda (G3b05@ls/false) (if G3b05@ls/false (apply (lambda (G3b07@rest) (cons G3afc@i (G3af9@f G3b07@rest (+ G3afc@i '1)))) G3b05@ls/false) ((lambda (G3b09@t) ((lambda (G3b0b@ls/false) (if G3b0b@ls/false (apply (lambda (G3b0d@rest) (G3af9@f G3b0d@rest (+ G3afc@i '1))) G3b0b@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3b09@t))) (G306e@syntax-dispatch G3b09@t '(_ . any)))) G3b03@t))) (G306e@syntax-dispatch G3b03@t '((#(scheme-id mutable) . _) . any)))) G3aff@t))) (G306e@syntax-dispatch G3aff@t '()))) G3afb@fields)))) G3af9@f) G3af7@fields '0))) (set! G3a24@get-mutators (lambda (G3acd@foo G3ace@fields) ((lambda (G3ad2@gen-name) (begin (set! G3ad2@gen-name (lambda (G3af5@x) (G3165@datum->syntax G3acd@foo (string->symbol (string-append (symbol->string (G3167@syntax->datum G3acd@foo)) '"-" (symbol->string (G3167@syntax->datum G3af5@x)) '"-set!"))))) ((letrec ((G3ad3@f (lambda (G3ad5@fields) ((lambda (G3ad7@t) ((lambda (G3ad9@ls/false) (if G3ad9@ls/false (apply (lambda () '()) G3ad9@ls/false) ((lambda (G3adb@t) ((lambda (G3add@ls/false) (if G3add@ls/false (apply (lambda (G3adf@name G3ae0@accessor G3ae1@mutator G3ae2@rest) (cons G3ae1@mutator (G3ad3@f G3ae2@rest))) G3add@ls/false) ((lambda (G3ae7@t) ((lambda (G3ae9@ls/false) (if G3ae9@ls/false (apply (lambda (G3aeb@name G3aec@rest) (cons (G3ad2@gen-name G3aeb@name) (G3ad3@f G3aec@rest))) G3ae9@ls/false) ((lambda (G3aef@t) ((lambda (G3af1@ls/false) (if G3af1@ls/false (apply (lambda (G3af3@rest) (G3ad3@f G3af3@rest)) G3af1@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3aef@t))) (G306e@syntax-dispatch G3aef@t '(_ . any)))) G3ae7@t))) (G306e@syntax-dispatch G3ae7@t '((#(scheme-id mutable) any) . any)))) G3adb@t))) (G306e@syntax-dispatch G3adb@t '((#(scheme-id mutable) any any any) . any)))) G3ad7@t))) (G306e@syntax-dispatch G3ad7@t '()))) G3ad5@fields)))) G3ad3@f) G3ace@fields))) '#f))) (set! G3a26@get-accessors (lambda (G3a89@foo G3a8a@fields) ((lambda (G3a8e@gen-name) (begin (set! G3a8e@gen-name (lambda (G3acb@x) (G3165@datum->syntax G3a89@foo (string->symbol (string-append (symbol->string (G3167@syntax->datum G3a89@foo)) '"-" (symbol->string (G3167@syntax->datum G3acb@x))))))) (map (lambda (G3a8f@field) ((lambda (G3a91@t) ((lambda (G3a93@ls/false) (if (if G3a93@ls/false (begin '#f (apply (lambda (G3a95@name G3a96@accessor G3a97@mutator) (G2e2b@id? G3a96@accessor)) G3a93@ls/false)) '#f) (apply (lambda (G3a9b@name G3a9c@accessor G3a9d@mutator) G3a9c@accessor) G3a93@ls/false) ((lambda (G3aa1@t) ((lambda (G3aa3@ls/false) (if (if G3aa3@ls/false (begin '#f (apply (lambda (G3aa5@name G3aa6@accessor) (G2e2b@id? G3aa6@accessor)) G3aa3@ls/false)) '#f) (apply (lambda (G3aa9@name G3aaa@accessor) G3aaa@accessor) G3aa3@ls/false) ((lambda (G3aad@t) ((lambda (G3aaf@ls/false) (if (if G3aaf@ls/false (begin '#f (apply (lambda (G3ab1@name) (G2e2b@id? G3ab1@name)) G3aaf@ls/false)) '#f) (apply (lambda (G3ab3@name) (G3a8e@gen-name G3ab3@name)) G3aaf@ls/false) ((lambda (G3ab5@t) ((lambda (G3ab7@ls/false) (if (if G3ab7@ls/false (begin '#f (apply (lambda (G3ab9@name) (G2e2b@id? G3ab9@name)) G3ab7@ls/false)) '#f) (apply (lambda (G3abb@name) (G3a8e@gen-name G3abb@name)) G3ab7@ls/false) ((lambda (G3abd@t) ((lambda (G3abf@ls/false) (if (if G3abf@ls/false (begin '#f (apply (lambda (G3ac1@name) (G2e2b@id? G3ac1@name)) G3abf@ls/false)) '#f) (apply (lambda (G3ac3@name) (G3a8e@gen-name G3ac3@name)) G3abf@ls/false) ((lambda (G3ac5@t) ((lambda (G3ac7@ls/false) (if G3ac7@ls/false (apply (lambda (G3ac9@others) (G3161@syntax-violation '#f '"invalid field spec" G3a8f@field)) G3ac7@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3ac5@t))) (G306e@syntax-dispatch G3ac5@t 'any))) G3abd@t))) (G306e@syntax-dispatch G3abd@t 'any))) G3ab5@t))) (G306e@syntax-dispatch G3ab5@t '(#(scheme-id immutable) any)))) G3aad@t))) (G306e@syntax-dispatch G3aad@t '(#(scheme-id mutable) any)))) G3aa1@t))) (G306e@syntax-dispatch G3aa1@t '(#(scheme-id immutable) any any)))) G3a91@t))) (G306e@syntax-dispatch G3a91@t '(#(scheme-id mutable) any any any)))) G3a8f@field)) G3a8a@fields))) '#f))) (set! G3a28@enumerate (lambda (G3a81@ls) ((letrec ((G3a83@f (lambda (G3a85@ls G3a86@i) (if (null? G3a85@ls) '() (cons G3a86@i (G3a83@f (cdr G3a85@ls) (+ G3a86@i '1))))))) G3a83@f) G3a81@ls '0))) (set! G3a2a@do-define-record (lambda (G3a59@namespec G3a5a@clause*) ((lambda (G3a5d@foo) ((lambda (G3a5f@foo-rtd) ((lambda (G3a61@foo-rcd) ((lambda (G3a63@protocol) ((lambda (G3a65@make-foo) ((lambda (G3a67@fields) ((lambda (G3a69@idx*) ((lambda (G3a6b@foo-x*) ((lambda (G3a6d@set-foo-x!*) ((lambda (G3a6f@set-foo-idx*) ((lambda (G3a71@foo?) ((lambda (G3a73@foo-rtd-code) ((lambda (G3a75@foo-rcd-code) ((lambda (G3a77@protocol-code) ((lambda () (G3024@bless (cons 'begin (cons (list 'define G3a5f@foo-rtd G3a73@foo-rtd-code) (cons (list 'define G3a63@protocol G3a77@protocol-code) (cons (list 'define G3a61@foo-rcd G3a75@foo-rcd-code) (cons (list 'define-syntax G3a5d@foo (list 'list ''$rtd (list 'syntax G3a5f@foo-rtd) (list 'syntax G3a61@foo-rcd))) (cons (list 'define G3a71@foo? (list 'record-predicate G3a5f@foo-rtd)) (cons (list 'define G3a65@make-foo (list 'record-constructor G3a61@foo-rcd)) (append (map (lambda (G3a79@foo-x G3a7a@idx) (list 'define G3a79@foo-x (list 'record-accessor G3a5f@foo-rtd G3a7a@idx))) G3a6b@foo-x* G3a69@idx*) (map (lambda (G3a7d@set-foo-x! G3a7e@idx) (list 'define G3a7d@set-foo-x! (list 'record-mutator G3a5f@foo-rtd G3a7e@idx))) G3a6d@set-foo-x!* G3a6f@set-foo-idx*))))))))))))) (G3a1e@get-protocol-code G3a5a@clause*))) (G3a1c@foo-rcd-code G3a5a@clause* G3a5f@foo-rtd G3a63@protocol (G3a1a@parent-rcd-code G3a5a@clause*)))) (G3a16@foo-rtd-code G3a5d@foo G3a5a@clause* (G3a18@parent-rtd-code G3a5a@clause*)))) (G3a12@get-record-predicate-name G3a59@namespec))) (G3a22@get-mutator-indices G3a67@fields))) (G3a24@get-mutators G3a5d@foo G3a67@fields))) (G3a26@get-accessors G3a5d@foo G3a67@fields))) (G3a28@enumerate G3a67@fields))) (G3a20@get-fields G3a5a@clause*))) (G3a10@get-record-constructor-name G3a59@namespec))) (gensym))) (gensym))) (gensym))) (G3a0e@get-record-name G3a59@namespec)))) (set! G3a2c@verify-clauses (lambda (G3a35@x G3a36@cls*) ((lambda (G3a3a@valid-kwds G3a3c@free-id-member?) (begin (set! G3a3a@valid-kwds (map G3024@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3a3c@free-id-member? (lambda (G3a53@x G3a54@ls) (if (pair? G3a54@ls) (begin '#f ((lambda (G3a57@t) (if G3a57@t G3a57@t (begin '#f (G3a3c@free-id-member? G3a53@x (cdr G3a54@ls))))) (G2e33@free-id=? G3a53@x (car G3a54@ls)))) '#f))) ((letrec ((G3a3d@f (lambda (G3a3f@cls* G3a40@seen*) (if (not (null? G3a3f@cls*)) ((lambda (G3a43@t) ((lambda (G3a45@ls/false) (if G3a45@ls/false (apply (lambda (G3a47@kwd G3a48@rest) (if ((lambda (G3a4b@t) (if G3a4b@t G3a4b@t (begin '#f (not (G3a3c@free-id-member? G3a47@kwd G3a3a@valid-kwds))))) (not (G2e2b@id? G3a47@kwd))) (G3161@syntax-violation '#f '"not a valid define-record-type keyword" G3a47@kwd) (if (G2e39@bound-id-member? G3a47@kwd G3a40@seen*) (G3161@syntax-violation '#f '"duplicate use of keyword " G3a35@x G3a47@kwd) (G3a3d@f (cdr G3a3f@cls*) (cons G3a47@kwd G3a40@seen*))))) G3a45@ls/false) ((lambda (G3a4d@t) ((lambda (G3a4f@ls/false) (if G3a4f@ls/false (apply (lambda (G3a51@cls) (G3161@syntax-violation '#f '"malformed define-record-type clause" G3a51@cls)) G3a4f@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3a4d@t))) (G306e@syntax-dispatch G3a4d@t 'any))) G3a43@t))) (G306e@syntax-dispatch G3a43@t '(any . any)))) (car G3a3f@cls*)) (void))))) G3a3d@f) G3a36@cls* '()))) '#f '#f))) ((lambda (G3a2d@t) ((lambda (G3a2f@ls/false) (if G3a2f@ls/false (apply (lambda (G3a31@namespec G3a32@clause*) (begin (G3a2c@verify-clauses G3a09@x G3a32@clause*) (G3a2a@do-define-record G3a31@namespec G3a32@clause*))) G3a2f@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3a2d@t))) (G306e@syntax-dispatch G3a2d@t '(_ any . each-any)))) G3a09@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3064@define-condition-type-macro (lambda (G3c09@x) ((lambda (G3c0c@mkname) (begin (set! G3c0c@mkname (lambda (G3c39@name G3c3a@suffix) (G3165@datum->syntax G3c39@name (string->symbol (string-append (symbol->string (G3167@syntax->datum G3c39@name)) G3c3a@suffix))))) ((lambda (G3c0d@t) ((lambda (G3c0f@ls/false) (if (if G3c0f@ls/false (begin '#f (apply (lambda (G3c11@ctxt G3c12@name G3c13@super G3c14@constructor G3c15@predicate G3c16@field* G3c17@accessor*) (if (G2e2b@id? G3c12@name) (if (G2e2b@id? G3c13@super) (if (G2e2b@id? G3c14@constructor) (if (G2e2b@id? G3c15@predicate) (if (for-all G2e2b@id? G3c16@field*) (begin '#f (for-all G2e2b@id? G3c17@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3c0f@ls/false)) '#f) (apply (lambda (G3c1f@ctxt G3c20@name G3c21@super G3c22@constructor G3c23@predicate G3c24@field* G3c25@accessor*) ((lambda (G3c2d@aux-accessor*) (G3024@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3c20@name G3c22@constructor (gensym)) (cons (list 'parent G3c21@super) (cons (cons 'fields (map (lambda (G3c2f@field G3c30@aux) (list 'immutable G3c2f@field G3c30@aux)) G3c24@field* G3c2d@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3c23@predicate (list 'condition-predicate (list 'record-type-descriptor G3c20@name))) (map (lambda (G3c33@accessor G3c34@aux) (list 'define G3c33@accessor (list 'condition-accessor (list 'record-type-descriptor G3c20@name) G3c34@aux))) G3c25@accessor* G3c2d@aux-accessor*)))))) (map (lambda (G3c37@x) (gensym)) G3c25@accessor*))) G3c0f@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3c0d@t))) (G306e@syntax-dispatch G3c0d@t '(any any any any any . #(each (any any)))))) G3c09@x))) '#f))) (set! G3066@incorrect-usage-macro (lambda (G3c3d@e) (G3161@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3c3d@e))) (set! G3068@parameterize-macro (lambda (G3c3f@e) ((lambda (G3c41@t) ((lambda (G3c43@ls/false) (if G3c43@ls/false (apply (lambda (G3c45@b G3c46@b*) (G3024@bless (cons 'let (cons '() (cons G3c45@b G3c46@b*))))) G3c43@ls/false) ((lambda (G3c49@t) ((lambda (G3c4b@ls/false) (if G3c4b@ls/false (apply (lambda (G3c4d@olhs* G3c4e@orhs* G3c4f@b G3c50@b*) ((lambda (G3c55@lhs* G3c56@rhs*) (G3024@bless (cons (list 'lambda (append G3c55@lhs* G3c56@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3c59@lhs G3c5a@rhs) (list 'let (list (list 't (list G3c59@lhs))) (list G3c59@lhs G3c5a@rhs) (cons 'set! (cons G3c5a@rhs '(t))))) G3c55@lhs* G3c56@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3c4f@b G3c50@b*))) '(swap)))))) (append G3c4d@olhs* G3c4e@orhs*)))) (G314d@generate-temporaries G3c4d@olhs*) (G314d@generate-temporaries G3c4e@orhs*))) G3c4b@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3c49@t))) (G306e@syntax-dispatch G3c49@t '(_ #(each (any any)) any . each-any)))) G3c41@t))) (G306e@syntax-dispatch G3c41@t '(_ () any . each-any)))) G3c3f@e))) (set! G306a@foreign-call-transformer (lambda (G3c5d@e G3c5e@r G3c5f@mr) ((lambda (G3c63@t) ((lambda (G3c65@ls/false) (if G3c65@ls/false (apply (lambda (G3c67@name G3c68@arg*) (cons 'foreign-call (cons (G3092@chi-expr G3c67@name G3c5e@r G3c5f@mr) (G308e@chi-expr* G3c68@arg* G3c5e@r G3c5f@mr)))) G3c65@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3c63@t))) (G306e@syntax-dispatch G3c63@t '(_ any . each-any)))) G3c5d@e))) (set! G306c@convert-pattern (lambda (G3c6b@pattern G3c6c@keys) ((lambda (G3c70@cvt* G3c72@cvt) (begin (set! G3c70@cvt* (lambda (G3d01@p* G3d02@n G3d03@ids) (if (null? G3d01@p*) (values '() G3d03@ids) (call-with-values (lambda () (G3c70@cvt* (cdr G3d01@p*) G3d02@n G3d03@ids)) (lambda (G3d09@G3d07 G3d0a@G3d08) ((lambda (G3d0d@ids G3d0e@y) (call-with-values (lambda () (G3c72@cvt (car G3d01@p*) G3d02@n G3d0d@ids)) (lambda (G3d13@G3d11 G3d14@G3d12) ((lambda (G3d17@ids G3d18@x) (values (cons G3d18@x G3d0e@y) G3d17@ids)) G3d14@G3d12 G3d13@G3d11)))) G3d0a@G3d08 G3d09@G3d07)))))) (set! G3c72@cvt (lambda (G3c73@p G3c74@n G3c75@ids) ((lambda (G3c79@t) ((lambda (G3c7b@ls/false) (if (if G3c7b@ls/false (begin '#f (apply (lambda (G3c7d@id) (G2e2b@id? G3c7d@id)) G3c7b@ls/false)) '#f) (apply (lambda (G3c7f@id) (if (G2e39@bound-id-member? G3c73@p G3c6c@keys) (values (vector 'free-id G3c73@p) G3c75@ids) (if (G2e33@free-id=? G3c73@p (G2ffc@scheme-stx '_)) (values '_ G3c75@ids) (values 'any (cons (cons G3c73@p G3c74@n) G3c75@ids))))) G3c7b@ls/false) ((lambda (G3c81@t) ((lambda (G3c83@ls/false) (if (if G3c83@ls/false (begin '#f (apply (lambda (G3c85@p G3c86@dots) (G3070@ellipsis? G3c86@dots)) G3c83@ls/false)) '#f) (apply (lambda (G3c89@p G3c8a@dots) (call-with-values (lambda () (G3c72@cvt G3c89@p (+ G3c74@n '1) G3c75@ids)) (lambda (G3c8f@G3c8d G3c90@G3c8e) ((lambda (G3c93@ids G3c94@p) (values (if (eq? G3c94@p 'any) 'each-any (vector 'each G3c94@p)) G3c93@ids)) G3c90@G3c8e G3c8f@G3c8d)))) G3c83@ls/false) ((lambda (G3c97@t) ((lambda (G3c99@ls/false) (if (if G3c99@ls/false (begin '#f (apply (lambda (G3c9b@x G3c9c@dots G3c9d@ys G3c9e@z) (G3070@ellipsis? G3c9c@dots)) G3c99@ls/false)) '#f) (apply (lambda (G3ca3@x G3ca4@dots G3ca5@ys G3ca6@z) (call-with-values (lambda () (G3c72@cvt G3ca6@z G3c74@n G3c75@ids)) (lambda (G3cad@G3cab G3cae@G3cac) ((lambda (G3cb1@ids G3cb2@z) (call-with-values (lambda () (G3c70@cvt* G3ca5@ys G3c74@n G3cb1@ids)) (lambda (G3cb7@G3cb5 G3cb8@G3cb6) ((lambda (G3cbb@ids G3cbc@ys) (call-with-values (lambda () (G3c72@cvt G3ca3@x (+ G3c74@n '1) G3cbb@ids)) (lambda (G3cc1@G3cbf G3cc2@G3cc0) ((lambda (G3cc5@ids G3cc6@x) (values (vector 'each+ G3cc6@x (reverse G3cbc@ys) G3cb2@z) G3cc5@ids)) G3cc2@G3cc0 G3cc1@G3cbf)))) G3cb8@G3cb6 G3cb7@G3cb5)))) G3cae@G3cac G3cad@G3cab)))) G3c99@ls/false) ((lambda (G3cc9@t) ((lambda (G3ccb@ls/false) (if G3ccb@ls/false (apply (lambda (G3ccd@x G3cce@y) (call-with-values (lambda () (G3c72@cvt G3cce@y G3c74@n G3c75@ids)) (lambda (G3cd3@G3cd1 G3cd4@G3cd2) ((lambda (G3cd7@ids G3cd8@y) (call-with-values (lambda () (G3c72@cvt G3ccd@x G3c74@n G3cd7@ids)) (lambda (G3cdd@G3cdb G3cde@G3cdc) ((lambda (G3ce1@ids G3ce2@x) (values (cons G3ce2@x G3cd8@y) G3ce1@ids)) G3cde@G3cdc G3cdd@G3cdb)))) G3cd4@G3cd2 G3cd3@G3cd1)))) G3ccb@ls/false) ((lambda (G3ce5@t) ((lambda (G3ce7@ls/false) (if G3ce7@ls/false (apply (lambda () (values '() G3c75@ids)) G3ce7@ls/false) ((lambda (G3ce9@t) ((lambda (G3ceb@ls/false) (if (if G3ceb@ls/false (begin '#f (apply (lambda (G3ced@p) (not (G2df3@stx? G3ced@p))) G3ceb@ls/false)) '#f) (apply (lambda (G3cef@p) (call-with-values (lambda () (G3c72@cvt G3cef@p G3c74@n G3c75@ids)) (lambda (G3cf3@G3cf1 G3cf4@G3cf2) ((lambda (G3cf7@ids G3cf8@p) (values (vector 'vector G3cf8@p) G3cf7@ids)) G3cf4@G3cf2 G3cf3@G3cf1)))) G3ceb@ls/false) ((lambda (G3cfb@t) ((lambda (G3cfd@ls/false) (if G3cfd@ls/false (apply (lambda (G3cff@datum) (values (vector 'atom (G2e41@stx->datum G3cff@datum)) G3c75@ids)) G3cfd@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3cfb@t))) (G306e@syntax-dispatch G3cfb@t 'any))) G3ce9@t))) (G306e@syntax-dispatch G3ce9@t '#(vector each-any)))) G3ce5@t))) (G306e@syntax-dispatch G3ce5@t '()))) G3cc9@t))) (G306e@syntax-dispatch G3cc9@t '(any . any)))) G3c97@t))) (G306e@syntax-dispatch G3c97@t '(any any . #(each+ any () any))))) G3c81@t))) (G306e@syntax-dispatch G3c81@t '(any any)))) G3c79@t))) (G306e@syntax-dispatch G3c79@t 'any))) G3c73@p))) (G3c72@cvt G3c6b@pattern '0 '()))) '#f '#f))) (set! G306e@syntax-dispatch ((lambda () ((lambda (G3d1c@stx^ G3d1e@match-each G3d20@match-each+ G3d22@match-each-any G3d24@match-empty G3d26@combine G3d28@match* G3d2a@match) (begin (set! G3d1c@stx^ (lambda (G3de5@e G3de6@m* G3de7@s* G3de8@ae*) (if (if (null? G3de6@m*) (if (null? G3de7@s*) (begin '#f (null? G3de8@ae*)) '#f) '#f) G3de5@e (G2e13@mkstx G3de5@e G3de6@m* G3de7@s* G3de8@ae*)))) (set! G3d1e@match-each (lambda (G3dc8@e G3dc9@p G3dca@m* G3dcb@s* G3dcc@ae*) (if (pair? G3dc8@e) ((lambda (G3dd2@first) (if G3dd2@first (begin '#f ((lambda (G3dd4@rest) (if G3dd4@rest (begin '#f (cons G3dd2@first G3dd4@rest)) '#f)) (G3d1e@match-each (cdr G3dc8@e) G3dc9@p G3dca@m* G3dcb@s* G3dcc@ae*))) '#f)) (G3d2a@match (car G3dc8@e) G3dc9@p G3dca@m* G3dcb@s* G3dcc@ae* '())) (if (null? G3dc8@e) '() (if (G2df3@stx? G3dc8@e) (if (not (G2da1@top-marked? G3dca@m*)) (begin '#f (call-with-values (lambda () (G2e11@join-wraps G3dca@m* G3dcb@s* G3dcc@ae* G3dc8@e)) (lambda (G3dd9@G3dd6 G3dda@G3dd7 G3ddb@G3dd8) ((lambda (G3ddf@ae* G3de0@s* G3de1@m*) (G3d1e@match-each (G2df7@stx-expr G3dc8@e) G3dc9@p G3de1@m* G3de0@s* G3ddf@ae*)) G3ddb@G3dd8 G3dda@G3dd7 G3dd9@G3dd6)))) '#f) (if (G2974@G287e@annotation? G3dc8@e) (G3d1e@match-each (G2976@G2882@annotation-expression G3dc8@e) G3dc9@p G3dca@m* G3dcb@s* G3dcc@ae*) '#f)))))) (set! G3d20@match-each+ (lambda (G3d8e@e G3d8f@x-pat G3d90@y-pat G3d91@z-pat G3d92@m* G3d93@s* G3d94@ae* G3d95@r) ((letrec ((G3d9e@f (lambda (G3da0@e G3da1@m* G3da2@s* G3da3@ae*) (if (pair? G3da0@e) (call-with-values (lambda () (G3d9e@f (cdr G3da0@e) G3da1@m* G3da2@s* G3da3@ae*)) (lambda (G3dab@G3da8 G3dac@G3da9 G3dad@G3daa) ((lambda (G3db1@r G3db2@y-pat G3db3@xr*) (if G3db1@r (if (null? G3db2@y-pat) ((lambda (G3db7@xr) (if G3db7@xr (values (cons G3db7@xr G3db3@xr*) G3db2@y-pat G3db1@r) (values '#f '#f '#f))) (G3d2a@match (car G3da0@e) G3d8f@x-pat G3da1@m* G3da2@s* G3da3@ae* '())) (values '() (cdr G3db2@y-pat) (G3d2a@match (car G3da0@e) (car G3db2@y-pat) G3da1@m* G3da2@s* G3da3@ae* G3db1@r))) (values '#f '#f '#f))) G3dad@G3daa G3dac@G3da9 G3dab@G3da8))) (if (G2df3@stx? G3da0@e) (if (G2da1@top-marked? G3da1@m*) (values '() G3d90@y-pat (G3d2a@match G3da0@e G3d91@z-pat G3da1@m* G3da2@s* G3da3@ae* G3d95@r)) (call-with-values (lambda () (G2e11@join-wraps G3da1@m* G3da2@s* G3da3@ae* G3da0@e)) (lambda (G3dbc@G3db9 G3dbd@G3dba G3dbe@G3dbb) ((lambda (G3dc2@ae* G3dc3@s* G3dc4@m*) (G3d9e@f (G2df7@stx-expr G3da0@e) G3dc4@m* G3dc3@s* G3dc2@ae*)) G3dbe@G3dbb G3dbd@G3dba G3dbc@G3db9)))) (if (G2974@G287e@annotation? G3da0@e) (G3d9e@f (G2976@G2882@annotation-expression G3da0@e) G3da1@m* G3da2@s* G3da3@ae*) (values '() G3d90@y-pat (G3d2a@match G3da0@e G3d91@z-pat G3da1@m* G3da2@s* G3da3@ae* G3d95@r)))))))) G3d9e@f) G3d8e@e G3d92@m* G3d93@s* G3d94@ae*))) (set! G3d22@match-each-any (lambda (G3d75@e G3d76@m* G3d77@s* G3d78@ae*) (if (pair? G3d75@e) ((lambda (G3d7d@l) (if G3d7d@l (begin '#f (cons (G3d1c@stx^ (car G3d75@e) G3d76@m* G3d77@s* G3d78@ae*) G3d7d@l)) '#f)) (G3d22@match-each-any (cdr G3d75@e) G3d76@m* G3d77@s* G3d78@ae*)) (if (null? G3d75@e) '() (if (G2df3@stx? G3d75@e) (if (not (G2da1@top-marked? G3d76@m*)) (begin '#f (call-with-values (lambda () (G2e11@join-wraps G3d76@m* G3d77@s* G3d78@ae* G3d75@e)) (lambda (G3d82@G3d7f G3d83@G3d80 G3d84@G3d81) ((lambda (G3d88@ae* G3d89@s* G3d8a@m*) (G3d22@match-each-any (G2df7@stx-expr G3d75@e) G3d8a@m* G3d89@s* G3d88@ae*)) G3d84@G3d81 G3d83@G3d80 G3d82@G3d7f)))) '#f) (if (G2974@G287e@annotation? G3d75@e) (G3d22@match-each-any (G2976@G2882@annotation-expression G3d75@e) G3d76@m* G3d77@s* G3d78@ae*) '#f)))))) (set! G3d24@match-empty (lambda (G3d6f@p G3d70@r) (if (null? G3d6f@p) G3d70@r (if (eq? G3d6f@p '_) G3d70@r (if (eq? G3d6f@p 'any) (cons '() G3d70@r) (if (pair? G3d6f@p) (G3d24@match-empty (car G3d6f@p) (G3d24@match-empty (cdr G3d6f@p) G3d70@r)) (if (eq? G3d6f@p 'each-any) (cons '() G3d70@r) ((lambda (G3d73@t) (if (memv G3d73@t '(each)) (G3d24@match-empty (vector-ref G3d6f@p '1) G3d70@r) (if (memv G3d73@t '(each+)) (G3d24@match-empty (vector-ref G3d6f@p '1) (G3d24@match-empty (reverse (vector-ref G3d6f@p '2)) (G3d24@match-empty (vector-ref G3d6f@p '3) G3d70@r))) (if (memv G3d73@t '(free-id atom)) G3d70@r (if (memv G3d73@t '(scheme-id atom)) G3d70@r (if (memv G3d73@t '(vector)) (G3d24@match-empty (vector-ref G3d6f@p '1) G3d70@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d6f@p))))))) (vector-ref G3d6f@p '0))))))))) (set! G3d26@combine (lambda (G3d6b@r* G3d6c@r) (if (null? (car G3d6b@r*)) G3d6c@r (cons (map car G3d6b@r*) (G3d26@combine (map cdr G3d6b@r*) G3d6c@r))))) (set! G3d28@match* (lambda (G3d4a@e G3d4b@p G3d4c@m* G3d4d@s* G3d4e@ae* G3d4f@r) (if (null? G3d4b@p) (if (null? G3d4a@e) (begin '#f G3d4f@r) '#f) (if (pair? G3d4b@p) (if (pair? G3d4a@e) (begin '#f (G3d2a@match (car G3d4a@e) (car G3d4b@p) G3d4c@m* G3d4d@s* G3d4e@ae* (G3d2a@match (cdr G3d4a@e) (cdr G3d4b@p) G3d4c@m* G3d4d@s* G3d4e@ae* G3d4f@r))) '#f) (if (eq? G3d4b@p 'each-any) ((lambda (G3d56@l) (if G3d56@l (begin '#f (cons G3d56@l G3d4f@r)) '#f)) (G3d22@match-each-any G3d4a@e G3d4c@m* G3d4d@s* G3d4e@ae*)) ((lambda (G3d58@t) (if (memv G3d58@t '(each)) (if (null? G3d4a@e) (G3d24@match-empty (vector-ref G3d4b@p '1) G3d4f@r) ((lambda (G3d5a@r*) (if G3d5a@r* (begin '#f (G3d26@combine G3d5a@r* G3d4f@r)) '#f)) (G3d1e@match-each G3d4a@e (vector-ref G3d4b@p '1) G3d4c@m* G3d4d@s* G3d4e@ae*))) (if (memv G3d58@t '(free-id)) (if (symbol? G3d4a@e) (if (G2da1@top-marked? G3d4c@m*) (if (G2e33@free-id=? (G3d1c@stx^ G3d4a@e G3d4c@m* G3d4d@s* G3d4e@ae*) (vector-ref G3d4b@p '1)) (begin '#f G3d4f@r) '#f) '#f) '#f) (if (memv G3d58@t '(scheme-id)) (if (symbol? G3d4a@e) (if (G2da1@top-marked? G3d4c@m*) (if (G2e33@free-id=? (G3d1c@stx^ G3d4a@e G3d4c@m* G3d4d@s* G3d4e@ae*) (G2ffc@scheme-stx (vector-ref G3d4b@p '1))) (begin '#f G3d4f@r) '#f) '#f) '#f) (if (memv G3d58@t '(each+)) (call-with-values (lambda () (G3d20@match-each+ G3d4a@e (vector-ref G3d4b@p '1) (vector-ref G3d4b@p '2) (vector-ref G3d4b@p '3) G3d4c@m* G3d4d@s* G3d4e@ae* G3d4f@r)) (lambda (G3d5f@G3d5c G3d60@G3d5d G3d61@G3d5e) ((lambda (G3d65@r G3d66@y-pat G3d67@xr*) (if G3d65@r (if (null? G3d66@y-pat) (begin '#f (if (null? G3d67@xr*) (G3d24@match-empty (vector-ref G3d4b@p '1) G3d65@r) (G3d26@combine G3d67@xr* G3d65@r))) '#f) '#f)) G3d61@G3d5e G3d60@G3d5d G3d5f@G3d5c))) (if (memv G3d58@t '(atom)) (if (equal? (vector-ref G3d4b@p '1) (G2e3f@strip G3d4a@e G3d4c@m*)) (begin '#f G3d4f@r) '#f) (if (memv G3d58@t '(vector)) (if (vector? G3d4a@e) (begin '#f (G3d2a@match (vector->list G3d4a@e) (vector-ref G3d4b@p '1) G3d4c@m* G3d4d@s* G3d4e@ae* G3d4f@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d4b@p)))))))) (vector-ref G3d4b@p '0))))))) (set! G3d2a@match (lambda (G3d2f@e G3d30@p G3d31@m* G3d32@s* G3d33@ae* G3d34@r) (if (not G3d34@r) '#f (if (eq? G3d30@p '_) G3d34@r (if (eq? G3d30@p 'any) (cons (G3d1c@stx^ G3d2f@e G3d31@m* G3d32@s* G3d33@ae*) G3d34@r) (if (G2df3@stx? G3d2f@e) (if (not (G2da1@top-marked? G3d31@m*)) (begin '#f (call-with-values (lambda () (G2e11@join-wraps G3d31@m* G3d32@s* G3d33@ae* G3d2f@e)) (lambda (G3d3e@G3d3b G3d3f@G3d3c G3d40@G3d3d) ((lambda (G3d44@ae* G3d45@s* G3d46@m*) (G3d2a@match (G2df7@stx-expr G3d2f@e) G3d30@p G3d46@m* G3d45@s* G3d44@ae* G3d34@r)) G3d40@G3d3d G3d3f@G3d3c G3d3e@G3d3b)))) '#f) (if (G2974@G287e@annotation? G3d2f@e) (G3d2a@match (G2976@G2882@annotation-expression G3d2f@e) G3d30@p G3d31@m* G3d32@s* G3d33@ae* G3d34@r) (G3d28@match* G3d2f@e G3d30@p G3d31@m* G3d32@s* G3d33@ae* G3d34@r)))))))) (lambda (G3d2b@e G3d2c@p) (G3d2a@match G3d2b@e G3d2c@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3070@ellipsis? (lambda (G3ded@x) (if (G2e2b@id? G3ded@x) (begin '#f (G2e33@free-id=? G3ded@x (G2ffc@scheme-stx '...))) '#f))) (set! G3072@underscore? (lambda (G3def@x) (if (G2e2b@id? G3def@x) (begin '#f (G2e33@free-id=? G3def@x (G2ffc@scheme-stx '_))) '#f))) (set! G3074@verify-literals (lambda (G3df1@lits G3df2@expr) (for-each (lambda (G3df5@x) (if ((lambda (G3df7@t) (if G3df7@t G3df7@t ((lambda (G3df9@t) (if G3df9@t G3df9@t (begin '#f (G3072@underscore? G3df5@x)))) (G3070@ellipsis? G3df5@x)))) (not (G2e2b@id? G3df5@x))) (G3161@syntax-violation '#f '"invalid literal" G3df2@expr G3df5@x) (void))) G3df1@lits))) (set! G3076@syntax-case-transformer ((lambda () ((lambda (G3dfc@build-dispatch-call G3dfe@invalid-ids-error G3e00@gen-clause G3e02@gen-syntax-case) (begin (set! G3dfc@build-dispatch-call (lambda (G3e6b@pvars G3e6c@expr G3e6d@y G3e6e@r G3e6f@mr) ((lambda (G3e75@ids G3e76@levels) ((lambda (G3e79@labels G3e7a@new-vars) ((lambda (G3e7d@body) (list '(primitive apply) (G2d83@G2cab@build-lambda '#f G3e7a@new-vars G3e7d@body) G3e6d@y)) (G3092@chi-expr (G2e17@add-subst (G2de4@make-full-rib G3e75@ids G3e79@labels) G3e6c@expr) (append (map (lambda (G3e7f@label G3e80@var G3e81@level) (cons G3e7f@label (G2e4b@make-binding 'syntax (cons G3e80@var G3e81@level)))) G3e79@labels G3e7a@new-vars (map cdr G3e6b@pvars)) G3e6e@r) G3e6f@mr))) (map G2da7@gen-label G3e75@ids) (map G2da3@gen-lexical G3e75@ids))) (map car G3e6b@pvars) (map cdr G3e6b@pvars)))) (set! G3dfe@invalid-ids-error (lambda (G3e5f@id* G3e60@e G3e61@class) ((letrec ((G3e65@find (lambda (G3e67@id* G3e68@ok*) (if (null? G3e67@id*) (G3161@syntax-violation '#f '"invalid syntax" G3e60@e) (if (G2e2b@id? (car G3e67@id*)) (if (G2e39@bound-id-member? (car G3e67@id*) G3e68@ok*) (G315b@syntax-error (car G3e67@id*) '"duplicate " G3e61@class) (G3e65@find (cdr G3e67@id*) (cons (car G3e67@id*) G3e68@ok*))) (G315b@syntax-error (car G3e67@id*) '"invalid " G3e61@class)))))) G3e65@find) G3e5f@id* '()))) (set! G3e00@gen-clause (lambda (G3e39@x G3e3a@keys G3e3b@clauses G3e3c@r G3e3d@mr G3e3e@pat G3e3f@fender G3e40@expr) (call-with-values (lambda () (G306c@convert-pattern G3e3e@pat G3e3a@keys)) (lambda (G3e4b@G3e49 G3e4c@G3e4a) ((lambda (G3e4f@pvars G3e50@p) (if (not (G2e37@distinct-bound-ids? (map car G3e4f@pvars))) (G3dfe@invalid-ids-error (map car G3e4f@pvars) G3e3e@pat '"pattern variable") (if (not (for-all (lambda (G3e53@x) (not (G3070@ellipsis? (car G3e53@x)))) G3e4f@pvars)) (G3161@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3e3e@pat) ((lambda (G3e55@y) ((lambda (G3e57@test) ((lambda (G3e59@conseq) ((lambda (G3e5b@altern) (list (G2d83@G2cab@build-lambda '#f (list G3e55@y) (list 'if G3e57@test G3e59@conseq G3e5b@altern)) (list '(primitive syntax-dispatch) G3e39@x (list 'quote G3e50@p)))) (G3e02@gen-syntax-case G3e39@x G3e3a@keys G3e3b@clauses G3e3c@r G3e3d@mr))) (G3dfc@build-dispatch-call G3e4f@pvars G3e40@expr G3e55@y G3e3c@r G3e3d@mr))) (if (eq? G3e3f@fender '#t) G3e55@y ((lambda (G3e5d@call) (list 'if G3e55@y G3e5d@call (list 'quote '#f))) (G3dfc@build-dispatch-call G3e4f@pvars G3e3f@fender G3e55@y G3e3c@r G3e3d@mr))))) (G2da3@gen-lexical 'tmp))))) G3e4c@G3e4a G3e4b@G3e49))))) (set! G3e02@gen-syntax-case (lambda (G3e17@x G3e18@keys G3e19@clauses G3e1a@r G3e1b@mr) (if (null? G3e19@clauses) (list '(primitive syntax-error) G3e17@x) ((lambda (G3e21@t) ((lambda (G3e23@ls/false) (if G3e23@ls/false (apply (lambda (G3e25@pat G3e26@expr) (if (if (G2e2b@id? G3e25@pat) (if (not (G2e39@bound-id-member? G3e25@pat G3e18@keys)) (begin '#f (not (G3070@ellipsis? G3e25@pat))) '#f) '#f) (if (G2e33@free-id=? G3e25@pat (G2ffc@scheme-stx '_)) (G3092@chi-expr G3e26@expr G3e1a@r G3e1b@mr) ((lambda (G3e29@lab G3e2a@lex) ((lambda (G3e2d@body) (list (G2d83@G2cab@build-lambda '#f (list G3e2a@lex) G3e2d@body) G3e17@x)) (G3092@chi-expr (G2e17@add-subst (G2de4@make-full-rib (list G3e25@pat) (list G3e29@lab)) G3e26@expr) (cons (cons G3e29@lab (G2e4b@make-binding 'syntax (cons G3e2a@lex '0))) G3e1a@r) G3e1b@mr))) (G2da7@gen-label G3e25@pat) (G2da3@gen-lexical G3e25@pat))) (G3e00@gen-clause G3e17@x G3e18@keys (cdr G3e19@clauses) G3e1a@r G3e1b@mr G3e25@pat '#t G3e26@expr))) G3e23@ls/false) ((lambda (G3e2f@t) ((lambda (G3e31@ls/false) (if G3e31@ls/false (apply (lambda (G3e33@pat G3e34@fender G3e35@expr) (G3e00@gen-clause G3e17@x G3e18@keys (cdr G3e19@clauses) G3e1a@r G3e1b@mr G3e33@pat G3e34@fender G3e35@expr)) G3e31@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3e2f@t))) (G306e@syntax-dispatch G3e2f@t '(any any any)))) G3e21@t))) (G306e@syntax-dispatch G3e21@t '(any any)))) (car G3e19@clauses))))) (lambda (G3e03@e G3e04@r G3e05@mr) ((lambda (G3e09@t) ((lambda (G3e0b@ls/false) (if G3e0b@ls/false (apply (lambda (G3e0d@expr G3e0e@keys G3e0f@clauses) (begin (G3074@verify-literals G3e0e@keys G3e03@e) ((lambda (G3e13@x) ((lambda (G3e15@body) (list (G2d83@G2cab@build-lambda '#f (list G3e13@x) G3e15@body) (G3092@chi-expr G3e0d@expr G3e04@r G3e05@mr))) (G3e02@gen-syntax-case G3e13@x G3e0e@keys G3e0f@clauses G3e04@r G3e05@mr))) (G2da3@gen-lexical 'tmp)))) G3e0b@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3e09@t))) (G306e@syntax-dispatch G3e09@t '(_ any each-any . each-any)))) G3e03@e)))) '#f '#f '#f '#f)))) (set! G3078@ellipsis-map (lambda (G3e85@proc G3e86@ls . G3e89@ls*) ((lambda (G3e8c@who) (begin (set! G3e8c@who '...) (begin (if (not (list? G3e86@ls)) (assertion-violation G3e8c@who '"not a list" G3e86@ls) (void)) (if (not (null? G3e89@ls*)) ((lambda (G3e8d@n) (for-each (lambda (G3e8f@x) (begin (if (not (list? G3e8f@x)) (assertion-violation G3e8c@who '"not a list" G3e8f@x) (void)) (if (not (= (length G3e8f@x) G3e8d@n)) (assertion-violation G3e8c@who '"length mismatch" G3e86@ls G3e8f@x) (void)))) G3e89@ls*)) (length G3e86@ls)) (void)) (apply map G3e85@proc G3e86@ls G3e89@ls*)))) '#f))) (set! G307a@syntax-transformer ((lambda () ((lambda (G3e92@gen-syntax G3e94@gen-ref G3e96@gen-append G3e98@gen-mappend G3e9a@gen-map G3e9c@gen-cons G3e9e@gen-vector G3ea0@regen) (begin (set! G3e92@gen-syntax (lambda (G3f05@src G3f06@e G3f07@r G3f08@maps G3f09@ellipsis? G3f0a@vec?) ((lambda (G3f11@t) ((lambda (G3f13@ls/false) (if (if G3f13@ls/false (begin '#f (apply (lambda (G3f15@dots) (G3f09@ellipsis? G3f15@dots)) G3f13@ls/false)) '#f) (apply (lambda (G3f17@dots) (G3161@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f05@src)) G3f13@ls/false) ((lambda (G3f19@t) ((lambda (G3f1b@ls/false) (if (if G3f1b@ls/false (begin '#f (apply (lambda (G3f1d@id) (G2e2b@id? G3f1d@id)) G3f1b@ls/false)) '#f) (apply (lambda (G3f1f@id) ((lambda (G3f21@label) ((lambda (G3f23@b) ((lambda () (if (eq? (G2e4d@binding-type G3f23@b) 'syntax) (call-with-values (lambda () ((lambda (G3f27@var.lev) (G3e94@gen-ref G3f05@src (car G3f27@var.lev) (cdr G3f27@var.lev) G3f08@maps)) (G2e4f@binding-value G3f23@b))) (lambda (G3f29@G3f25 G3f2a@G3f26) ((lambda (G3f2d@maps G3f2e@var) (values (list 'ref G3f2e@var) G3f2d@maps)) G3f2a@G3f26 G3f29@G3f25))) (values (list 'quote G3f06@e) G3f08@maps))))) (G2e49@label->binding G3f21@label G3f07@r))) (G2e45@id->label G3f06@e))) G3f1b@ls/false) ((lambda (G3f31@t) ((lambda (G3f33@ls/false) (if (if G3f33@ls/false (begin '#f (apply (lambda (G3f35@dots G3f36@e) (G3f09@ellipsis? G3f35@dots)) G3f33@ls/false)) '#f) (apply (lambda (G3f39@dots G3f3a@e) (if G3f0a@vec? (G3161@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f05@src) (G3e92@gen-syntax G3f05@src G3f3a@e G3f07@r G3f08@maps (lambda (G3f3d@x) '#f) '#f))) G3f33@ls/false) ((lambda (G3f3f@t) ((lambda (G3f41@ls/false) (if (if G3f41@ls/false (begin '#f (apply (lambda (G3f43@x G3f44@dots G3f45@y) (G3f09@ellipsis? G3f44@dots)) G3f41@ls/false)) '#f) (apply (lambda (G3f49@x G3f4a@dots G3f4b@y) ((letrec ((G3f4f@f (lambda (G3f51@y G3f52@k) ((lambda (G3f55@t) ((lambda (G3f57@ls/false) (if G3f57@ls/false (apply (lambda () (G3f52@k G3f08@maps)) G3f57@ls/false) ((lambda (G3f59@t) ((lambda (G3f5b@ls/false) (if (if G3f5b@ls/false (begin '#f (apply (lambda (G3f5d@dots G3f5e@y) (G3f09@ellipsis? G3f5d@dots)) G3f5b@ls/false)) '#f) (apply (lambda (G3f61@dots G3f62@y) (G3f4f@f G3f62@y (lambda (G3f65@maps) (call-with-values (lambda () (G3f52@k (cons '() G3f65@maps))) (lambda (G3f69@G3f67 G3f6a@G3f68) ((lambda (G3f6d@maps G3f6e@x) (if (null? (car G3f6d@maps)) (G3161@syntax-violation '#f '"extra ellipsis in syntax form" G3f05@src) (values (G3e98@gen-mappend G3f6e@x (car G3f6d@maps)) (cdr G3f6d@maps)))) G3f6a@G3f68 G3f69@G3f67)))))) G3f5b@ls/false) ((lambda (G3f71@t) ((lambda (G3f73@ls/false) (if G3f73@ls/false (apply (lambda () (call-with-values (lambda () (G3e92@gen-syntax G3f05@src G3f51@y G3f07@r G3f08@maps G3f09@ellipsis? G3f0a@vec?)) (lambda (G3f77@G3f75 G3f78@G3f76) ((lambda (G3f7b@maps G3f7c@y) (call-with-values (lambda () (G3f52@k G3f7b@maps)) (lambda (G3f81@G3f7f G3f82@G3f80) ((lambda (G3f85@maps G3f86@x) (values (G3e96@gen-append G3f86@x G3f7c@y) G3f85@maps)) G3f82@G3f80 G3f81@G3f7f)))) G3f78@G3f76 G3f77@G3f75)))) G3f73@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3f71@t))) (G306e@syntax-dispatch G3f71@t '_))) G3f59@t))) (G306e@syntax-dispatch G3f59@t '(any . any)))) G3f55@t))) (G306e@syntax-dispatch G3f55@t '()))) G3f51@y)))) G3f4f@f) G3f4b@y (lambda (G3f89@maps) (call-with-values (lambda () (G3e92@gen-syntax G3f05@src G3f49@x G3f07@r (cons '() G3f89@maps) G3f09@ellipsis? '#f)) (lambda (G3f8d@G3f8b G3f8e@G3f8c) ((lambda (G3f91@maps G3f92@x) (if (null? (car G3f91@maps)) (G3161@syntax-violation '#f '"extra ellipsis in syntax form" G3f05@src) (values (G3e9a@gen-map G3f92@x (car G3f91@maps)) (cdr G3f91@maps)))) G3f8e@G3f8c G3f8d@G3f8b)))))) G3f41@ls/false) ((lambda (G3f95@t) ((lambda (G3f97@ls/false) (if G3f97@ls/false (apply (lambda (G3f99@x G3f9a@y) (call-with-values (lambda () (G3e92@gen-syntax G3f05@src G3f99@x G3f07@r G3f08@maps G3f09@ellipsis? '#f)) (lambda (G3f9f@G3f9d G3fa0@G3f9e) ((lambda (G3fa3@maps G3fa4@xnew) (call-with-values (lambda () (G3e92@gen-syntax G3f05@src G3f9a@y G3f07@r G3fa3@maps G3f09@ellipsis? G3f0a@vec?)) (lambda (G3fa9@G3fa7 G3faa@G3fa8) ((lambda (G3fad@maps G3fae@ynew) (values (G3e9c@gen-cons G3f06@e G3f99@x G3f9a@y G3fa4@xnew G3fae@ynew) G3fad@maps)) G3faa@G3fa8 G3fa9@G3fa7)))) G3fa0@G3f9e G3f9f@G3f9d)))) G3f97@ls/false) ((lambda (G3fb1@t) ((lambda (G3fb3@ls/false) (if G3fb3@ls/false (apply (lambda (G3fb5@ls) (call-with-values (lambda () (G3e92@gen-syntax G3f05@src G3fb5@ls G3f07@r G3f08@maps G3f09@ellipsis? '#t)) (lambda (G3fb9@G3fb7 G3fba@G3fb8) ((lambda (G3fbd@maps G3fbe@lsnew) (values (G3e9e@gen-vector G3f06@e G3fb5@ls G3fbe@lsnew) G3fbd@maps)) G3fba@G3fb8 G3fb9@G3fb7)))) G3fb3@ls/false) ((lambda (G3fc1@t) ((lambda (G3fc3@ls/false) (if G3fc3@ls/false (apply (lambda () (values (list 'quote G3f06@e) G3f08@maps)) G3fc3@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3fc1@t))) (G306e@syntax-dispatch G3fc1@t '_))) G3fb1@t))) (G306e@syntax-dispatch G3fb1@t '#(vector each-any)))) G3f95@t))) (G306e@syntax-dispatch G3f95@t '(any . any)))) G3f3f@t))) (G306e@syntax-dispatch G3f3f@t '(any any . any)))) G3f31@t))) (G306e@syntax-dispatch G3f31@t '(any any)))) G3f19@t))) (G306e@syntax-dispatch G3f19@t 'any))) G3f11@t))) (G306e@syntax-dispatch G3f11@t 'any))) G3f06@e))) (set! G3e94@gen-ref (lambda (G3eed@src G3eee@var G3eef@level G3ef0@maps) (if (= G3eef@level '0) (values G3eee@var G3ef0@maps) (if (null? G3ef0@maps) (G3161@syntax-violation '#f '"missing ellipsis in syntax form" G3eed@src) (call-with-values (lambda () (G3e94@gen-ref G3eed@src G3eee@var (- G3eef@level '1) (cdr G3ef0@maps))) (lambda (G3ef7@G3ef5 G3ef8@G3ef6) ((lambda (G3efb@outer-maps G3efc@outer-var) ((lambda (G3eff@t) (if G3eff@t ((lambda (G3f01@b) (values (cdr G3f01@b) G3ef0@maps)) G3eff@t) ((lambda (G3f03@inner-var) (values G3f03@inner-var (cons (cons (cons G3efc@outer-var G3f03@inner-var) (car G3ef0@maps)) G3efb@outer-maps))) (G2da3@gen-lexical 'tmp)))) (assq G3efc@outer-var (car G3ef0@maps)))) G3ef8@G3ef6 G3ef7@G3ef5))))))) (set! G3e96@gen-append (lambda (G3ee9@x G3eea@y) (if (equal? G3eea@y ''()) G3ee9@x (list 'append G3ee9@x G3eea@y)))) (set! G3e98@gen-mappend (lambda (G3ee5@e G3ee6@map-env) (list 'apply '(primitive append) (G3e9a@gen-map G3ee5@e G3ee6@map-env)))) (set! G3e9a@gen-map (lambda (G3ed3@e G3ed4@map-env) ((lambda (G3ed7@formals G3ed8@actuals) (if (eq? (car G3ed3@e) 'ref) (car G3ed8@actuals) (if (for-all (lambda (G3edb@x) (if (eq? (car G3edb@x) 'ref) (begin '#f (memq (cadr G3edb@x) G3ed7@formals)) '#f)) (cdr G3ed3@e)) ((lambda (G3edd@args) (cons 'map (cons (list 'primitive (car G3ed3@e)) G3edd@args))) (map ((lambda (G3edf@r) (lambda (G3ee1@x) (cdr (assq (cadr G3ee1@x) G3edf@r)))) (map cons G3ed7@formals G3ed8@actuals)) (cdr G3ed3@e))) (cons* 'map (list 'lambda G3ed7@formals G3ed3@e) G3ed8@actuals)))) (map cdr G3ed4@map-env) (map (lambda (G3ee3@x) (list 'ref (car G3ee3@x))) G3ed4@map-env)))) (set! G3e9c@gen-cons (lambda (G3ec3@e G3ec4@x G3ec5@y G3ec6@xnew G3ec7@ynew) ((lambda (G3ecd@t) (if (memv G3ecd@t '(quote)) (if (eq? (car G3ec6@xnew) 'quote) ((lambda (G3ecf@xnew G3ed0@ynew) (if (if (eq? G3ecf@xnew G3ec4@x) (begin '#f (eq? G3ed0@ynew G3ec5@y)) '#f) (list 'quote G3ec3@e) (list 'quote (cons G3ecf@xnew G3ed0@ynew)))) (cadr G3ec6@xnew) (cadr G3ec7@ynew)) (if (null? (cadr G3ec7@ynew)) (list 'list G3ec6@xnew) (list 'cons G3ec6@xnew G3ec7@ynew))) (if (memv G3ecd@t '(list)) (cons 'list (cons G3ec6@xnew (cdr G3ec7@ynew))) (list 'cons G3ec6@xnew G3ec7@ynew)))) (car G3ec7@ynew)))) (set! G3e9e@gen-vector (lambda (G3ebd@e G3ebe@ls G3ebf@lsnew) (if (eq? (car G3ebf@lsnew) 'quote) (if (eq? (cadr G3ebf@lsnew) G3ebe@ls) (list 'quote G3ebd@e) (list 'quote (list->vector (cadr G3ebf@lsnew)))) (if (eq? (car G3ebf@lsnew) 'list) (cons 'vector (cdr G3ebf@lsnew)) (list 'list->vector G3ebf@lsnew))))) (set! G3ea0@regen (lambda (G3eb7@x) ((lambda (G3eb9@t) (if (memv G3eb9@t '(ref)) (cadr G3eb7@x) (if (memv G3eb9@t '(primitive)) (list 'primitive (cadr G3eb7@x)) (if (memv G3eb9@t '(quote)) (list 'quote (cadr G3eb7@x)) (if (memv G3eb9@t '(lambda)) (G2d83@G2cab@build-lambda '#f (cadr G3eb7@x) (G3ea0@regen (caddr G3eb7@x))) (if (memv G3eb9@t '(map)) ((lambda (G3ebb@ls) (cons '(primitive ellipsis-map) G3ebb@ls)) (map G3ea0@regen (cdr G3eb7@x))) (cons (list 'primitive (car G3eb7@x)) (map G3ea0@regen (cdr G3eb7@x))))))))) (car G3eb7@x)))) (lambda (G3ea1@e G3ea2@r G3ea3@mr) ((lambda (G3ea7@t) ((lambda (G3ea9@ls/false) (if G3ea9@ls/false (apply (lambda (G3eab@x) (call-with-values (lambda () (G3e92@gen-syntax G3ea1@e G3eab@x G3ea2@r '() G3070@ellipsis? '#f)) (lambda (G3eaf@G3ead G3eb0@G3eae) ((lambda (G3eb3@maps G3eb4@e) (G3ea0@regen G3eb4@e)) G3eb0@G3eae G3eaf@G3ead)))) G3ea9@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3ea7@t))) (G306e@syntax-dispatch G3ea7@t '(_ any)))) G3ea1@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G307c@core-macro-transformer (lambda (G3fc5@name) ((lambda (G3fc7@t) (if (memv G3fc7@t '(quote)) G301e@quote-transformer (if (memv G3fc7@t '(lambda)) G3022@lambda-transformer (if (memv G3fc7@t '(case-lambda)) G3020@case-lambda-transformer (if (memv G3fc7@t '(letrec)) G300a@letrec-transformer (if (memv G3fc7@t '(letrec*)) G300c@letrec*-transformer (if (memv G3fc7@t '(if)) G301a@if-transformer (if (memv G3fc7@t '(foreign-call)) G306a@foreign-call-transformer (if (memv G3fc7@t '(syntax-case)) G3076@syntax-case-transformer (if (memv G3fc7@t '(syntax)) G307a@syntax-transformer (if (memv G3fc7@t '(type-descriptor)) G3010@type-descriptor-transformer (if (memv G3fc7@t '(record-type-descriptor)) G3012@record-type-descriptor-transformer (if (memv G3fc7@t '(record-constructor-descriptor)) G3014@record-constructor-descriptor-transformer (if (memv G3fc7@t '(fluid-let-syntax)) G300e@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3fc5@name))))))))))))))) G3fc5@name))) (set! G307e@file-options-macro (lambda (G3fc9@x) ((lambda (G3fcc@valid-option?) (begin (set! G3fcc@valid-option? (lambda (G3fd5@x) (if (G2e2b@id? G3fd5@x) (begin '#f (memq (G2e2d@id->sym G3fd5@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3fcd@t) ((lambda (G3fcf@ls/false) (if (if G3fcf@ls/false (begin '#f (apply (lambda (G3fd1@opt*) (if (for-all G3fcc@valid-option? G3fd1@opt*) (begin '#f (G297e@G292a@file-options-spec (map G2e2d@id->sym G3fd1@opt*))) '#f)) G3fcf@ls/false)) '#f) (apply (lambda (G3fd3@opt*) (G3024@bless (list 'quote (G297e@G292a@file-options-spec (map G2e2d@id->sym G3fd3@opt*))))) G3fcf@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3fcd@t))) (G306e@syntax-dispatch G3fcd@t '(_ . each-any)))) G3fc9@x))) '#f))) (set! G3080@symbol-macro (lambda (G3fd7@x G3fd8@set) ((lambda (G3fdb@t) ((lambda (G3fdd@ls/false) (if (if G3fdd@ls/false (begin '#f (apply (lambda (G3fdf@name) (if (G2e2b@id? G3fdf@name) (begin '#f (memq (G2e2d@id->sym G3fdf@name) G3fd8@set)) '#f)) G3fdd@ls/false)) '#f) (apply (lambda (G3fe1@name) (G3024@bless (list 'quote G3fe1@name))) G3fdd@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G3fdb@t))) (G306e@syntax-dispatch G3fdb@t '(_ any)))) G3fd7@x))) (set! G3082@macro-transformer (lambda (G3fe3@x) (if (procedure? G3fe3@x) G3fe3@x (if (symbol? G3fe3@x) ((lambda (G3fe5@t) (if (memv G3fe5@t '(define-record-type)) G3062@define-record-type-macro (if (memv G3fe5@t '(define-struct)) G3060@define-struct-macro (if (memv G3fe5@t '(include)) G3056@include-macro (if (memv G3fe5@t '(cond)) G3052@cond-macro (if (memv G3fe5@t '(let)) G302a@let-macro (if (memv G3fe5@t '(do)) G304a@do-macro (if (memv G3fe5@t '(or)) G304e@or-macro (if (memv G3fe5@t '(and)) G3050@and-macro (if (memv G3fe5@t '(let*)) G304c@let*-macro (if (memv G3fe5@t '(let-values)) G302c@let-values-macro (if (memv G3fe5@t '(let*-values)) G302e@let*-values-macro (if (memv G3fe5@t '(syntax-rules)) G305a@syntax-rules-macro (if (memv G3fe5@t '(quasiquote)) G305c@quasiquote-macro (if (memv G3fe5@t '(quasisyntax)) G305e@quasisyntax-macro (if (memv G3fe5@t '(with-syntax)) G3026@with-syntax-macro (if (memv G3fe5@t '(when)) G3016@when-macro (if (memv G3fe5@t '(unless)) G3018@unless-macro (if (memv G3fe5@t '(case)) G301c@case-macro (if (memv G3fe5@t '(identifier-syntax)) G3048@identifier-syntax-macro (if (memv G3fe5@t '(time)) G3040@time-macro (if (memv G3fe5@t '(delay)) G3042@delay-macro (if (memv G3fe5@t '(assert)) G3044@assert-macro (if (memv G3fe5@t '(endianness)) G3046@endianness-macro (if (memv G3fe5@t '(guard)) G303c@guard-macro (if (memv G3fe5@t '(define-enumeration)) G303e@define-enumeration-macro (if (memv G3fe5@t '(trace-lambda)) G3030@trace-lambda-macro (if (memv G3fe5@t '(trace-define)) G3032@trace-define-macro (if (memv G3fe5@t '(trace-define-syntax)) G3034@trace-define-syntax-macro (if (memv G3fe5@t '(trace-let-syntax)) G3038@trace-let-syntax-macro (if (memv G3fe5@t '(trace-letrec-syntax)) G303a@trace-letrec-syntax-macro (if (memv G3fe5@t '(define-condition-type)) G3064@define-condition-type-macro (if (memv G3fe5@t '(parameterize)) G3068@parameterize-macro (if (memv G3fe5@t '(include-into)) G3058@include-into-macro (if (memv G3fe5@t '(eol-style)) (lambda (G3fe7@x) (G3080@symbol-macro G3fe7@x '(none lf cr crlf nel crnel ls))) (if (memv G3fe5@t '(error-handling-mode)) (lambda (G3fe9@x) (G3080@symbol-macro G3fe9@x '(ignore raise replace))) (if (memv G3fe5@t '(buffer-mode)) (lambda (G3feb@x) (G3080@symbol-macro G3feb@x '(none line block))) (if (memv G3fe5@t '(file-options)) G307e@file-options-macro (if (memv G3fe5@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G3066@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3fe3@x)))))))))))))))))))))))))))))))))))))))) G3fe3@x) (error 'core-macro-transformer '"BUG: invalid macro" G3fe3@x))))) (set! G3084@local-macro-transformer (lambda (G3fed@x) (car G3fed@x))) (set! G3086@do-macro-call (lambda (G3fef@transformer G3ff0@expr) ((lambda (G3ff3@out) (begin ((letrec ((G3ff5@f (lambda (G3ff7@x) (if (not (G2df3@stx? G3ff7@x)) (if (pair? G3ff7@x) (begin (G3ff5@f (car G3ff7@x)) (G3ff5@f (cdr G3ff7@x))) (if (vector? G3ff7@x) (vector-for-each G3ff5@f G3ff7@x) (if (symbol? G3ff7@x) (G3161@syntax-violation '#f '"raw symbol encountered in output of macro" G3ff0@expr G3ff7@x) (void)))) (void))))) G3ff5@f) G3ff3@out) (G2e15@add-mark (G2e0b@gen-mark) G3ff3@out G3ff0@expr))) (G3fef@transformer (G2e15@add-mark G2e0d@anti-mark G3ff0@expr '#f))))) (set! G3088@chi-macro (lambda (G3ff9@p G3ffa@e) (G3086@do-macro-call (G3082@macro-transformer G3ff9@p) G3ffa@e))) (set! G308a@chi-local-macro (lambda (G3ffd@p G3ffe@e) (G3086@do-macro-call (G3084@local-macro-transformer G3ffd@p) G3ffe@e))) (set! G308c@chi-global-macro (lambda (G4001@p G4002@e) ((lambda (G4005@lib G4006@loc) (begin (G2c21@G2ab7@visit-library G4005@lib) ((lambda (G4009@x) ((lambda (G400b@transformer) (G3086@do-macro-call G400b@transformer G4002@e)) (if (procedure? G4009@x) G4009@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G4009@x)))) (symbol-value G4006@loc)))) (car G4001@p) (cdr G4001@p)))) (set! G308e@chi-expr* (lambda (G400d@e* G400e@r G400f@mr) (if (null? G400d@e*) '() ((lambda (G4013@e) (cons G4013@e (G308e@chi-expr* (cdr G400d@e*) G400e@r G400f@mr))) (G3092@chi-expr (car G400d@e*) G400e@r G400f@mr))))) (set! G3090@chi-application (lambda (G4015@e G4016@r G4017@mr) ((lambda (G401b@t) ((lambda (G401d@ls/false) (if G401d@ls/false (apply (lambda (G401f@rator G4020@rands) ((lambda (G4023@rator) (cons G4023@rator (G308e@chi-expr* G4020@rands G4016@r G4017@mr))) (G3092@chi-expr G401f@rator G4016@r G4017@mr))) G401d@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G401b@t))) (G306e@syntax-dispatch G401b@t '(any . each-any)))) G4015@e))) (set! G3092@chi-expr (lambda (G4025@e G4026@r G4027@mr) (call-with-values (lambda () (G2e53@syntax-type G4025@e G4026@r)) (lambda (G402e@G402b G402f@G402c G4030@G402d) ((lambda (G4034@kwd G4035@value G4036@type) ((lambda (G403a@t) (if (memv G403a@t '(core-macro)) ((lambda (G403c@transformer) (G403c@transformer G4025@e G4026@r G4027@mr)) (G307c@core-macro-transformer G4035@value)) (if (memv G403a@t '(global)) ((lambda (G403e@lib) ((lambda (G4040@loc) ((lambda () (begin ((G30dd@inv-collector) G403e@lib) G4040@loc)))) (cdr G4035@value))) (car G4035@value)) (if (memv G403a@t '(core-prim)) ((lambda (G4042@name) (list 'primitive G4042@name)) G4035@value) (if (memv G403a@t '(call)) (G3090@chi-application G4025@e G4026@r G4027@mr) (if (memv G403a@t '(lexical)) ((lambda (G4044@lex) G4044@lex) (G2ffe@lexical-var G4035@value)) (if (memv G403a@t '(global-macro global-macro!)) (G3092@chi-expr (G308c@chi-global-macro G4035@value G4025@e) G4026@r G4027@mr) (if (memv G403a@t '(local-macro local-macro!)) (G3092@chi-expr (G308a@chi-local-macro G4035@value G4025@e) G4026@r G4027@mr) (if (memv G403a@t '(macro macro!)) (G3092@chi-expr (G3088@chi-macro G4035@value G4025@e) G4026@r G4027@mr) (if (memv G403a@t '(constant)) ((lambda (G4046@datum) (list 'quote G4046@datum)) G4035@value) (if (memv G403a@t '(set!)) (G3094@chi-set! G4025@e G4026@r G4027@mr) (if (memv G403a@t '(begin)) ((lambda (G4048@t) ((lambda (G404a@ls/false) (if G404a@ls/false (apply (lambda (G404c@x G404d@x*) (G2d86@G2cf7@build-sequence '#f (G308e@chi-expr* (cons G404c@x G404d@x*) G4026@r G4027@mr))) G404a@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G4048@t))) (G306e@syntax-dispatch G4048@t '(_ any . each-any)))) G4025@e) (if (memv G403a@t '(let-syntax letrec-syntax)) ((lambda (G4050@t) ((lambda (G4052@ls/false) (if (if G4052@ls/false (begin '#f (apply (lambda (G4054@xlhs* G4055@xrhs* G4056@xbody G4057@xbody*) (if (not (G2e35@valid-bound-ids? G4054@xlhs*)) (G3161@syntax-violation '#f '"invalid identifiers" G4025@e) (void))) G4052@ls/false)) '#f) (apply (lambda (G405c@xlhs* G405d@xrhs* G405e@xbody G405f@xbody*) ((lambda (G4064@xlab*) ((lambda (G4066@xrib) ((lambda (G4068@xb*) ((lambda () (G2d86@G2cf7@build-sequence '#f (G308e@chi-expr* (map (lambda (G406a@x) (G2e17@add-subst G4066@xrib G406a@x)) (cons G405e@xbody G405f@xbody*)) (append (map cons G4064@xlab* G4068@xb*) G4026@r) (append (map cons G4064@xlab* G4068@xb*) G4027@mr)))))) (map (lambda (G406c@x) (G2e72@make-eval-transformer (G30cf@expand-transformer (if (eq? G4036@type 'let-syntax) G406c@x (G2e17@add-subst G4066@xrib G406c@x)) G4027@mr))) G405d@xrhs*))) (G2de4@make-full-rib G405c@xlhs* G4064@xlab*))) (map G2da7@gen-label G405c@xlhs*))) G4052@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G4050@t))) (G306e@syntax-dispatch G4050@t '(_ #(each (any any)) any . each-any)))) G4025@e) (if (memv G403a@t '(displaced-lexical)) (G3161@syntax-violation '#f '"identifier out of context" G4025@e) (if (memv G403a@t '(syntax)) (G3161@syntax-violation '#f '"reference to pattern variable outside a syntax form" G4025@e) (if (memv G403a@t '(define define-syntax module import library)) (G3161@syntax-violation '#f (string-append ((lambda (G406e@t) (if (memv G406e@t '(define)) '"a definition" (if (memv G406e@t '(define-syntax)) '"a define-syntax" (if (memv G406e@t '(module)) '"a module definition" (if (memv G406e@t '(library)) '"a library definition" (if (memv G406e@t '(import)) '"an import declaration" (if (memv G406e@t '(export)) '"an export declaration" '"a non-expression"))))))) G4036@type) '" was found where an expression was expected") G4025@e) (if (memv G403a@t '(mutable)) (G3161@syntax-violation '#f '"attempt to reference an unexportable variable" G4025@e) (G3161@syntax-violation '#f '"invalid expression" G4025@e)))))))))))))))))) G4036@type)) G4030@G402d G402f@G402c G402e@G402b))))) (set! G3094@chi-set! (lambda (G4070@e G4071@r G4072@mr) ((lambda (G4076@t) ((lambda (G4078@ls/false) (if (if G4078@ls/false (begin '#f (apply (lambda (G407a@x G407b@v) (G2e2b@id? G407a@x)) G4078@ls/false)) '#f) (apply (lambda (G407e@x G407f@v) (call-with-values (lambda () (G2e53@syntax-type G407e@x G4071@r)) (lambda (G4085@G4082 G4086@G4083 G4087@G4084) ((lambda (G408b@kwd G408c@value G408d@type) ((lambda (G4091@t) (if (memv G4091@t '(lexical)) (begin (G3002@set-lexical-mutable! G408c@value '#t) (list 'set! (G2ffe@lexical-var G408c@value) (G3092@chi-expr G407f@v G4071@r G4072@mr))) (if (memv G4091@t '(core-prim)) (G3161@syntax-violation '#f '"cannot modify imported core primitive" G4070@e) (if (memv G4091@t '(global)) (G3161@syntax-violation '#f '"attempt to modify imported binding" G4070@e) (if (memv G4091@t '(global-macro!)) (G3092@chi-expr (G308c@chi-global-macro G408c@value G4070@e) G4071@r G4072@mr) (if (memv G4091@t '(local-macro!)) (G3092@chi-expr (G308a@chi-local-macro G408c@value G4070@e) G4071@r G4072@mr) (if (memv G4091@t '(mutable)) (G3161@syntax-violation '#f '"attempt to assign to an unexportable variable" G4070@e) (G3161@syntax-violation '#f '"invalid syntax" G4070@e)))))))) G408d@type)) G4087@G4084 G4086@G4083 G4085@G4082)))) G4078@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G4076@t))) (G306e@syntax-dispatch G4076@t '(_ any any)))) G4070@e))) (set! G3096@verify-formals (lambda (G4093@fmls G4094@stx) ((lambda (G4097@t) ((lambda (G4099@ls/false) (if G4099@ls/false (apply (lambda (G409b@x*) (if (not (G2e35@valid-bound-ids? G409b@x*)) (G3028@invalid-fmls-error G4094@stx G4093@fmls) (void))) G4099@ls/false) ((lambda (G409d@t) ((lambda (G409f@ls/false) (if G409f@ls/false (apply (lambda (G40a1@x* G40a2@x) (if (not (G2e35@valid-bound-ids? (cons G40a2@x G40a1@x*))) (G3028@invalid-fmls-error G4094@stx G4093@fmls) (void))) G409f@ls/false) ((lambda (G40a5@t) ((lambda (G40a7@ls/false) (if G40a7@ls/false (apply (lambda () (G3161@syntax-violation '#f '"invalid syntax" G4094@stx)) G40a7@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G40a5@t))) (G306e@syntax-dispatch G40a5@t '_))) G409d@t))) (G306e@syntax-dispatch G409d@t '#(each+ any () any)))) G4097@t))) (G306e@syntax-dispatch G4097@t 'each-any))) G4093@fmls))) (set! G3098@chi-lambda-clause (lambda (G40a9@stx G40aa@fmls G40ab@body* G40ac@r G40ad@mr) ((lambda (G40b3@t) ((lambda (G40b5@ls/false) (if G40b5@ls/false (apply (lambda (G40b7@x*) (begin (G3096@verify-formals G40aa@fmls G40a9@stx) ((lambda (G40b9@lex* G40ba@lab*) (values G40b9@lex* (G30a8@chi-internal (G2e17@add-subst (G2de4@make-full-rib G40b7@x* G40ba@lab*) G40ab@body*) (G3006@add-lexicals G40ba@lab* G40b9@lex* G40ac@r) G40ad@mr))) (map G2da3@gen-lexical G40b7@x*) (map G2da7@gen-label G40b7@x*)))) G40b5@ls/false) ((lambda (G40bd@t) ((lambda (G40bf@ls/false) (if G40bf@ls/false (apply (lambda (G40c1@x* G40c2@x) (begin (G3096@verify-formals G40aa@fmls G40a9@stx) ((lambda (G40c5@lex* G40c6@lab* G40c7@lex G40c8@lab) (values (append G40c5@lex* G40c7@lex) (G30a8@chi-internal (G2e17@add-subst (G2de4@make-full-rib (cons G40c2@x G40c1@x*) (cons G40c8@lab G40c6@lab*)) G40ab@body*) (G3006@add-lexicals (cons G40c8@lab G40c6@lab*) (cons G40c7@lex G40c5@lex*) G40ac@r) G40ad@mr))) (map G2da3@gen-lexical G40c1@x*) (map G2da7@gen-label G40c1@x*) (G2da3@gen-lexical G40c2@x) (G2da7@gen-label G40c2@x)))) G40bf@ls/false) ((lambda (G40cd@t) ((lambda (G40cf@ls/false) (if G40cf@ls/false (apply (lambda () (G3161@syntax-violation '#f '"invalid syntax" G40aa@fmls)) G40cf@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G40cd@t))) (G306e@syntax-dispatch G40cd@t '_))) G40bd@t))) (G306e@syntax-dispatch G40bd@t '#(each+ any () any)))) G40b3@t))) (G306e@syntax-dispatch G40b3@t 'each-any))) G40aa@fmls))) (set! G309a@chi-lambda-clause* (lambda (G40d1@stx G40d2@fmls* G40d3@body** G40d4@r G40d5@mr) (if (null? G40d2@fmls*) (values '() '()) (call-with-values (lambda () (G3098@chi-lambda-clause G40d1@stx (car G40d2@fmls*) (car G40d3@body**) G40d4@r G40d5@mr)) (lambda (G40dd@G40db G40de@G40dc) ((lambda (G40e1@b G40e2@a) (call-with-values (lambda () (G309a@chi-lambda-clause* G40d1@stx (cdr G40d2@fmls*) (cdr G40d3@body**) G40d4@r G40d5@mr)) (lambda (G40e7@G40e5 G40e8@G40e6) ((lambda (G40eb@b* G40ec@a*) (values (cons G40e2@a G40ec@a*) (cons G40e1@b G40eb@b*))) G40e8@G40e6 G40e7@G40e5)))) G40de@G40dc G40dd@G40db)))))) (set! G309c@chi-defun (lambda (G40ef@x G40f0@r G40f1@mr) ((lambda (G40f5@fmls G40f6@body*) (call-with-values (lambda () (G3098@chi-lambda-clause G40f5@fmls G40f5@fmls G40f6@body* G40f0@r G40f1@mr)) (lambda (G40fb@G40f9 G40fc@G40fa) ((lambda (G40ff@body G4100@fmls) (G2d83@G2cab@build-lambda '#f G4100@fmls G40ff@body)) G40fc@G40fa G40fb@G40f9)))) (car G40ef@x) (cdr G40ef@x)))) (set! G309e@chi-rhs (lambda (G4103@rhs G4104@r G4105@mr) ((lambda (G4109@t) (if (memv G4109@t '(defun)) (G309c@chi-defun (cdr G4103@rhs) G4104@r G4105@mr) (if (memv G4109@t '(expr)) ((lambda (G410b@expr) (G3092@chi-expr G410b@expr G4104@r G4105@mr)) (cdr G4103@rhs)) (if (memv G4109@t '(top-expr)) ((lambda (G410d@expr) (G2d86@G2cf7@build-sequence '#f (list (G3092@chi-expr G410d@expr G4104@r G4105@mr) (G2d87@G2cf9@build-void)))) (cdr G4103@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G4103@rhs))))) (car G4103@rhs)))) (set! G30a0@expand-interaction-rhs*/init* (lambda (G410f@lhs* G4110@rhs* G4111@init* G4112@r G4113@mr) ((letrec ((G4119@f (lambda (G411b@lhs* G411c@rhs*) (if (null? G411b@lhs*) (map (lambda (G411f@x) (G3092@chi-expr G411f@x G4112@r G4113@mr)) G4111@init*) ((lambda (G4121@lhs G4122@rhs) ((lambda (G4125@t) (if (memv G4125@t '(defun)) ((lambda (G4127@rhs) (cons (list 'set! G4121@lhs G4127@rhs) (G4119@f (cdr G411b@lhs*) (cdr G411c@rhs*)))) (G309c@chi-defun (cdr G4122@rhs) G4112@r G4113@mr)) (if (memv G4125@t '(expr)) ((lambda (G4129@rhs) (cons (list 'set! G4121@lhs G4129@rhs) (G4119@f (cdr G411b@lhs*) (cdr G411c@rhs*)))) (G3092@chi-expr (cdr G4122@rhs) G4112@r G4113@mr)) (if (memv G4125@t '(top-expr)) ((lambda (G412b@e) (cons G412b@e (G4119@f (cdr G411b@lhs*) (cdr G411c@rhs*)))) (G3092@chi-expr (cdr G4122@rhs) G4112@r G4113@mr)) (error 'expand-interaction '"invallid" G4122@rhs))))) (car G4122@rhs))) (car G411b@lhs*) (car G411c@rhs*)))))) G4119@f) G410f@lhs* G4110@rhs*))) (set! G30a2@chi-rhs* (lambda (G412d@rhs* G412e@r G412f@mr) ((letrec ((G4133@f (lambda (G4135@ls) (if (null? G4135@ls) '() ((lambda (G4137@a) (cons G4137@a (G4133@f (cdr G4135@ls)))) (G309e@chi-rhs (car G4135@ls) G412e@r G412f@mr)))))) G4133@f) G412d@rhs*))) (set! G30a4@find-bound=? (lambda (G4139@x G413a@lhs* G413b@rhs*) (if (null? G413a@lhs*) '#f (if (G2e31@bound-id=? G4139@x (car G413a@lhs*)) (car G413b@rhs*) (G30a4@find-bound=? G4139@x (cdr G413a@lhs*) (cdr G413b@rhs*)))))) (set! G30a6@find-dups (lambda (G413f@ls) ((letrec ((G4141@f (lambda (G4143@ls G4144@dups) (if (null? G4143@ls) G4144@dups ((lambda (G4147@t) (if G4147@t ((lambda (G4149@x) (G4141@f (cdr G4143@ls) (cons (list (car G4143@ls) G4149@x) G4144@dups))) G4147@t) (G4141@f (cdr G4143@ls) G4144@dups))) (G30a4@find-bound=? (car G4143@ls) (cdr G4143@ls) (cdr G4143@ls))))))) G4141@f) G413f@ls '()))) (set! G30a8@chi-internal (lambda (G414b@e* G414c@r G414d@mr) ((lambda (G4151@rib) (call-with-values (lambda () (G30cd@chi-body* (map (lambda (G415b@x) (G2e17@add-subst G4151@rib G415b@x)) (G2e29@syntax->list G414b@e*)) G414c@r G414d@mr '() '() '() '() '() G4151@rib '#f)) (lambda (G415d@G4153 G415e@G4154 G415f@G4155 G4160@G4156 G4161@G4157 G4162@G4158 G4163@G4159 G4164@G415a) ((lambda (G416d@_exp* G416e@kwd* G416f@mod** G4170@rhs* G4171@lex* G4172@mr G4173@r G4174@e*) (begin (if (null? G4174@e*) (G3161@syntax-violation '#f '"no expression in body" G4174@e*) (void)) ((lambda (G417d@init*) ((lambda (G417f@rhs*) ((lambda () (G2d89@G2cfd@build-letrec* '#f (reverse G4171@lex*) (reverse G417f@rhs*) (G2d86@G2cf7@build-sequence '#f G417d@init*))))) (G30a2@chi-rhs* G4170@rhs* G4173@r G4172@mr))) (G308e@chi-expr* (append (apply append (reverse G416f@mod**)) G4174@e*) G4173@r G4172@mr)))) G4164@G415a G4163@G4159 G4162@G4158 G4161@G4157 G4160@G4156 G415f@G4155 G415e@G4154 G415d@G4153)))) (G2dd4@make-empty-rib)))) (set! G30aa@parse-module (lambda (G4181@e) ((lambda (G4183@t) ((lambda (G4185@ls/false) (if G4185@ls/false (apply (lambda (G4187@export* G4188@b*) (begin (if (not (for-all G2e2b@id? G4187@export*)) (G3161@syntax-violation '#f '"module exports must be identifiers" G4181@e) (void)) (values '#f (list->vector G4187@export*) G4188@b*))) G4185@ls/false) ((lambda (G418b@t) ((lambda (G418d@ls/false) (if G418d@ls/false (apply (lambda (G418f@name G4190@export* G4191@b*) (begin (if (not (G2e2b@id? G418f@name)) (G3161@syntax-violation '#f '"module name must be an identifier" G4181@e) (void)) (if (not (for-all G2e2b@id? G4190@export*)) (G3161@syntax-violation '#f '"module exports must be identifiers" G4181@e) (void)) (values G418f@name (list->vector G4190@export*) G4191@b*))) G418d@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G418b@t))) (G306e@syntax-dispatch G418b@t '(_ any each-any . each-any)))) G4183@t))) (G306e@syntax-dispatch G4183@t '(_ each-any . each-any)))) G4181@e))) (set! G30b0@G30ab (make-record-type-descriptor 'module-interface '#f 'G30ae '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G30b2@G30ad '#f) (set! G30b4@G30ac (make-record-constructor-descriptor G30b0@G30ab '#f G30b2@G30ad)) (set! G30b9@module-interface? (record-predicate G30b0@G30ab)) (set! G30bb@make-module-interface (record-constructor G30b4@G30ac)) (set! G30bd@module-interface-first-mark (record-accessor G30b0@G30ab '0)) (set! G30bf@module-interface-exp-id-vec (record-accessor G30b0@G30ab '1)) (set! G30c1@module-interface-exp-lab-vec (record-accessor G30b0@G30ab '2)) (set! G30c3@set-module-interface-first-mark! (record-mutator G30b0@G30ab '0)) (set! G30c5@set-module-interface-exp-id-vec! (record-mutator G30b0@G30ab '1)) (set! G30c7@set-module-interface-exp-lab-vec! (record-mutator G30b0@G30ab '2)) (set! G30c9@module-interface-exp-id* (lambda (G4195@iface G4196@id) ((lambda (G419a@diff-marks) (begin (set! G419a@diff-marks (lambda (G41a1@ls G41a2@x) (begin (if (null? G41a1@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G41a5@a) (if (eq? G41a5@a G41a2@x) '() (cons G41a5@a (G419a@diff-marks (cdr G41a1@ls) G41a2@x)))) (car G41a1@ls))))) ((lambda (G419b@diff G419c@id-vec) (if (null? G419b@diff) G419c@id-vec (vector-map (lambda (G419f@x) (G2df5@make-stx (G2df7@stx-expr G419f@x) (append G419b@diff (G2df9@stx-mark* G419f@x)) '() '())) G419c@id-vec))) (G419a@diff-marks (G2df9@stx-mark* G4196@id) (G30bd@module-interface-first-mark G4195@iface)) (G30bf@module-interface-exp-id-vec G4195@iface)))) '#f))) (set! G30cb@chi-internal-module (lambda (G41a7@e G41a8@r G41a9@mr G41aa@lex* G41ab@rhs* G41ac@mod** G41ad@kwd*) (call-with-values (lambda () (G30aa@parse-module G41a7@e)) (lambda (G41b8@G41b5 G41b9@G41b6 G41ba@G41b7) ((lambda (G41be@e* G41bf@exp-id* G41c0@name) ((lambda (G41c4@rib) ((lambda (G41c6@e*) ((lambda () (call-with-values (lambda () (G30cd@chi-body* G41c6@e* G41a8@r G41a9@mr G41aa@lex* G41ab@rhs* G41ac@mod** G41ad@kwd* '() G41c4@rib '#f)) (lambda (G41d0@G41c8 G41d1@G41c9 G41d2@G41ca G41d3@G41cb G41d4@G41cc G41d5@G41cd G41d6@G41ce G41d7@G41cf) ((lambda (G41e0@_exp* G41e1@kwd* G41e2@mod** G41e3@rhs* G41e4@lex* G41e5@mr G41e6@r G41e7@e*) ((lambda (G41f0@exp-lab* G41f1@mod**) (if (not G41c0@name) (values G41e4@lex* G41e3@rhs* G41bf@exp-id* G41f0@exp-lab* G41e6@r G41e5@mr G41f1@mod** G41e1@kwd*) ((lambda (G41f4@lab G41f5@iface) (values G41e4@lex* G41e3@rhs* (vector G41c0@name) (vector G41f4@lab) (cons (cons G41f4@lab (cons '$module G41f5@iface)) G41e6@r) (cons (cons G41f4@lab (cons '$module G41f5@iface)) G41e5@mr) G41f1@mod** G41e1@kwd*)) (G2da7@gen-label 'module) (G30bb@make-module-interface (car (G2df9@stx-mark* G41c0@name)) (vector-map (lambda (G41f8@x) (G2df5@make-stx (G2df7@stx-expr G41f8@x) (G2df9@stx-mark* G41f8@x) '() '())) G41bf@exp-id*) G41f0@exp-lab*)))) (vector-map (lambda (G41fa@x) ((lambda (G41fc@t) (if G41fc@t G41fc@t (begin '#f (G3161@syntax-violation '#f '"cannot find module export" G41fa@x)))) (G2e45@id->label (G2df5@make-stx (G2e2d@id->sym G41fa@x) (G2df9@stx-mark* G41fa@x) (list G41c4@rib) '())))) G41bf@exp-id*) (cons G41e7@e* G41e2@mod**))) G41d7@G41cf G41d6@G41ce G41d5@G41cd G41d4@G41cc G41d3@G41cb G41d2@G41ca G41d1@G41c9 G41d0@G41c8)))))) (map (lambda (G41fe@x) (G2e17@add-subst G41c4@rib G41fe@x)) (G2e29@syntax->list G41be@e*)))) (G2dd4@make-empty-rib))) G41ba@G41b7 G41b9@G41b6 G41b8@G41b5))))) (set! G30cd@chi-body* (lambda (G4200@e* G4201@r G4202@mr G4203@lex* G4204@rhs* G4205@mod** G4206@kwd* G4207@exp* G4208@rib G4209@top?) (if (null? G4200@e*) (values G4200@e* G4201@r G4202@mr G4203@lex* G4204@rhs* G4205@mod** G4206@kwd* G4207@exp*) ((lambda (G4214@e) (call-with-values (lambda () (G2e53@syntax-type G4214@e G4201@r)) (lambda (G4219@G4216 G421a@G4217 G421b@G4218) ((lambda (G421f@kwd G4220@value G4221@type) ((lambda (G4225@kwd*) ((lambda (G4227@t) (if (memv G4227@t '(define)) (call-with-values (lambda () (G2ff6@parse-define G4214@e)) (lambda (G422b@G4229 G422c@G422a) ((lambda (G422f@rhs G4230@id) (begin (if (G2e39@bound-id-member? G4230@id G4225@kwd*) (G3161@syntax-violation '#f '"cannot redefine keyword" G4214@e) (void)) (call-with-values (lambda () (G2dab@gen-define-label+loc G4230@id G4208@rib)) (lambda (G4235@G4233 G4236@G4234) ((lambda (G4239@lex G423a@lab) (begin (G2dda@extend-rib! G4208@rib G4230@id G423a@lab) (G30cd@chi-body* (cdr G4200@e*) (G3004@add-lexical G423a@lab G4239@lex G4201@r) G4202@mr (cons G4239@lex G4203@lex*) (cons G422f@rhs G4204@rhs*) G4205@mod** G4225@kwd* G4207@exp* G4208@rib G4209@top?))) G4236@G4234 G4235@G4233))))) G422c@G422a G422b@G4229))) (if (memv G4227@t '(define-syntax)) (call-with-values (lambda () (G2ff8@parse-define-syntax G4214@e)) (lambda (G423f@G423d G4240@G423e) ((lambda (G4243@rhs G4244@id) (begin (if (G2e39@bound-id-member? G4244@id G4225@kwd*) (G3161@syntax-violation '#f '"cannot redefine keyword" G4214@e) (void)) ((lambda (G4247@lab G4248@expanded-rhs) (begin (G2dda@extend-rib! G4208@rib G4244@id G4247@lab) ((lambda (G424b@b) (G30cd@chi-body* (cdr G4200@e*) (cons (cons G4247@lab G424b@b) G4201@r) (cons (cons G4247@lab G424b@b) G4202@mr) G4203@lex* G4204@rhs* G4205@mod** G4225@kwd* G4207@exp* G4208@rib G4209@top?)) (G2e72@make-eval-transformer G4248@expanded-rhs)))) (G2dad@gen-define-label G4244@id G4208@rib) (G30cf@expand-transformer G4243@rhs G4202@mr)))) G4240@G423e G423f@G423d))) (if (memv G4227@t '(let-syntax letrec-syntax)) ((lambda (G424d@t) ((lambda (G424f@ls/false) (if (if G424f@ls/false (begin '#f (apply (lambda (G4251@xlhs* G4252@xrhs* G4253@xbody*) (if (not (G2e35@valid-bound-ids? G4251@xlhs*)) (G3161@syntax-violation '#f '"invalid identifiers" G4214@e) (void))) G424f@ls/false)) '#f) (apply (lambda (G4257@xlhs* G4258@xrhs* G4259@xbody*) ((lambda (G425d@xlab*) ((lambda (G425f@xrib) ((lambda (G4261@xb*) ((lambda () (G30cd@chi-body* (append (map (lambda (G4263@x) (G2e17@add-subst G425f@xrib G4263@x)) G4259@xbody*) (cdr G4200@e*)) (append (map cons G425d@xlab* G4261@xb*) G4201@r) (append (map cons G425d@xlab* G4261@xb*) G4202@mr) G4203@lex* G4204@rhs* G4205@mod** G4225@kwd* G4207@exp* G4208@rib G4209@top?)))) (map (lambda (G4265@x) (G2e72@make-eval-transformer (G30cf@expand-transformer (if (eq? G4221@type 'let-syntax) G4265@x (G2e17@add-subst G425f@xrib G4265@x)) G4202@mr))) G4258@xrhs*))) (G2de4@make-full-rib G4257@xlhs* G425d@xlab*))) (map G2da7@gen-label G4257@xlhs*))) G424f@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G424d@t))) (G306e@syntax-dispatch G424d@t '(_ #(each (any any)) . each-any)))) G4214@e) (if (memv G4227@t '(begin)) ((lambda (G4267@t) ((lambda (G4269@ls/false) (if G4269@ls/false (apply (lambda (G426b@x*) (G30cd@chi-body* (append G426b@x* (cdr G4200@e*)) G4201@r G4202@mr G4203@lex* G4204@rhs* G4205@mod** G4225@kwd* G4207@exp* G4208@rib G4209@top?)) G4269@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G4267@t))) (G306e@syntax-dispatch G4267@t '(_ . each-any)))) G4214@e) (if (memv G4227@t '(global-macro global-macro!)) (G30cd@chi-body* (cons (G2e17@add-subst G4208@rib (G308c@chi-global-macro G4220@value G4214@e)) (cdr G4200@e*)) G4201@r G4202@mr G4203@lex* G4204@rhs* G4205@mod** G4225@kwd* G4207@exp* G4208@rib G4209@top?) (if (memv G4227@t '(local-macro local-macro!)) (G30cd@chi-body* (cons (G2e17@add-subst G4208@rib (G308a@chi-local-macro G4220@value G4214@e)) (cdr G4200@e*)) G4201@r G4202@mr G4203@lex* G4204@rhs* G4205@mod** G4225@kwd* G4207@exp* G4208@rib G4209@top?) (if (memv G4227@t '(macro macro!)) (G30cd@chi-body* (cons (G2e17@add-subst G4208@rib (G3088@chi-macro G4220@value G4214@e)) (cdr G4200@e*)) G4201@r G4202@mr G4203@lex* G4204@rhs* G4205@mod** G4225@kwd* G4207@exp* G4208@rib G4209@top?) (if (memv G4227@t '(module)) (call-with-values (lambda () (G30cb@chi-internal-module G4214@e G4201@r G4202@mr G4203@lex* G4204@rhs* G4205@mod** G4225@kwd*)) (lambda (G4275@G426d G4276@G426e G4277@G426f G4278@G4270 G4279@G4271 G427a@G4272 G427b@G4273 G427c@G4274) ((lambda (G4285@kwd* G4286@mod** G4287@mr G4288@r G4289@m-exp-lab* G428a@m-exp-id* G428b@rhs* G428c@lex*) (begin (vector-for-each (lambda (G4295@id G4296@lab) (G2dda@extend-rib! G4208@rib G4295@id G4296@lab)) G428a@m-exp-id* G4289@m-exp-lab*) (G30cd@chi-body* (cdr G4200@e*) G4288@r G4287@mr G428c@lex* G428b@rhs* G4286@mod** G4285@kwd* G4207@exp* G4208@rib G4209@top?))) G427c@G4274 G427b@G4273 G427a@G4272 G4279@G4271 G4278@G4270 G4277@G426f G4276@G426e G4275@G426d))) (if (memv G4227@t '(library)) (begin (G3141@library-expander (G2e41@stx->datum G4214@e)) (G30cd@chi-body* (cdr G4200@e*) G4201@r G4202@mr G4203@lex* G4204@rhs* G4205@mod** G4225@kwd* G4207@exp* G4208@rib G4209@top?)) (if (memv G4227@t '(export)) ((lambda (G4299@t) ((lambda (G429b@ls/false) (if G429b@ls/false (apply (lambda (G429d@exp-decl*) (G30cd@chi-body* (cdr G4200@e*) G4201@r G4202@mr G4203@lex* G4204@rhs* G4205@mod** G4225@kwd* (append G429d@exp-decl* G4207@exp*) G4208@rib G4209@top?)) G429b@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G4299@t))) (G306e@syntax-dispatch G4299@t '(_ . each-any)))) G4214@e) (if (memv G4227@t '(import)) ((lambda () ((lambda (G42a0@module-import? G42a2@module-import G42a4@library-import) (begin (set! G42a0@module-import? (lambda (G42ec@e) ((lambda (G42ee@t) ((lambda (G42f0@ls/false) (if (if G42f0@ls/false (begin '#f (apply (lambda (G42f2@id) (G2e2b@id? G42f2@id)) G42f0@ls/false)) '#f) (apply (lambda (G42f4@id) '#t) G42f0@ls/false) ((lambda (G42f6@t) ((lambda (G42f8@ls/false) (if G42f8@ls/false (apply (lambda (G42fa@imp*) '#f) G42f8@ls/false) ((lambda (G42fc@t) ((lambda (G42fe@ls/false) (if G42fe@ls/false (apply (lambda () (G3161@syntax-violation '#f '"malformed import form" G42ec@e)) G42fe@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G42fc@t))) (G306e@syntax-dispatch G42fc@t '_))) G42f6@t))) (G306e@syntax-dispatch G42f6@t '(_ . each-any)))) G42ee@t))) (G306e@syntax-dispatch G42ee@t '(_ any)))) G42ec@e))) (set! G42a2@module-import (lambda (G42cd@e G42ce@r) ((lambda (G42d1@t) ((lambda (G42d3@ls/false) (if (if G42d3@ls/false (begin '#f (apply (lambda (G42d5@id) (G2e2b@id? G42d5@id)) G42d3@ls/false)) '#f) (apply (lambda (G42d7@id) (call-with-values (lambda () (G2e53@syntax-type G42d7@id G42ce@r)) (lambda (G42dc@G42d9 G42dd@G42da G42de@G42db) ((lambda (G42e2@kwd G42e3@value G42e4@type) ((lambda (G42e8@t) (if (memv G42e8@t '($module)) ((lambda (G42ea@iface) (values (G30c9@module-interface-exp-id* G42ea@iface G42d7@id) (G30c1@module-interface-exp-lab-vec G42ea@iface))) G42e3@value) (G3161@syntax-violation '#f '"invalid import" G42cd@e))) G42e4@type)) G42de@G42db G42dd@G42da G42dc@G42d9)))) G42d3@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G42d1@t))) (G306e@syntax-dispatch G42d1@t '(_ any)))) G42cd@e))) (set! G42a4@library-import (lambda (G42b3@e) ((lambda (G42b5@t) ((lambda (G42b7@ls/false) (if G42b7@ls/false (apply (lambda (G42b9@ctxt G42ba@imp*) (call-with-values (lambda () (G30d7@parse-import-spec* (G3167@syntax->datum G42ba@imp*))) (lambda (G42bf@G42bd G42c0@G42be) ((lambda (G42c3@subst-labels G42c4@subst-names) (values (vector-map (lambda (G42c7@name) (G2e09@datum->stx G42b9@ctxt G42c7@name)) G42c4@subst-names) G42c3@subst-labels)) G42c0@G42be G42bf@G42bd)))) G42b7@ls/false) ((lambda (G42c9@t) ((lambda (G42cb@ls/false) (if G42cb@ls/false (apply (lambda () (G3161@syntax-violation '#f '"invalid import form" G42b3@e)) G42cb@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G42c9@t))) (G306e@syntax-dispatch G42c9@t '_))) G42b5@t))) (G306e@syntax-dispatch G42b5@t '(any . each-any)))) G42b3@e))) (begin (call-with-values (lambda () (if (G42a0@module-import? G4214@e) (G42a2@module-import G4214@e G4201@r) (G42a4@library-import G4214@e))) (lambda (G42a7@G42a5 G42a8@G42a6) ((lambda (G42ab@lab* G42ac@id*) (vector-for-each (lambda (G42af@id G42b0@lab) (G2dda@extend-rib! G4208@rib G42af@id G42b0@lab)) G42ac@id* G42ab@lab*)) G42a8@G42a6 G42a7@G42a5))) (G30cd@chi-body* (cdr G4200@e*) G4201@r G4202@mr G4203@lex* G4204@rhs* G4205@mod** G4225@kwd* G4207@exp* G4208@rib G4209@top?)))) '#f '#f '#f))) (if G4209@top? (G30cd@chi-body* (cdr G4200@e*) G4201@r G4202@mr (cons (G2da3@gen-lexical 'dummy) G4203@lex*) (cons (cons 'top-expr G4214@e) G4204@rhs*) G4205@mod** G4225@kwd* G4207@exp* G4208@rib G4209@top?) (values G4200@e* G4201@r G4202@mr G4203@lex* G4204@rhs* G4205@mod** G4225@kwd* G4207@exp*)))))))))))))) G4221@type)) (if (G2e2b@id? G421f@kwd) (cons G421f@kwd G4206@kwd*) G4206@kwd*))) G421b@G4218 G421a@G4217 G4219@G4216)))) (car G4200@e*))))) (set! G30cf@expand-transformer (lambda (G4300@expr G4301@r) ((lambda (G4304@rtc) ((lambda (G4306@expanded-rhs) (begin (for-each ((lambda (G4308@mark-visit) (lambda (G430a@x) (begin (G2c20@G2ab5@invoke-library G430a@x) (G4308@mark-visit G430a@x)))) (G30df@vis-collector)) (G4304@rtc)) G4306@expanded-rhs)) ((lambda (G4310@G430c@inv-collector G4311@G430d@vis-collector G4312@G430e@inv-collector G4313@G430f@vis-collector) ((lambda (G4318@swap) (dynamic-wind G4318@swap (lambda () (G3092@chi-expr G4300@expr G4301@r G4301@r)) G4318@swap)) (lambda () (begin ((lambda (G431a@t) (begin (G4310@G430c@inv-collector G4312@G430e@inv-collector) (set! G4312@G430e@inv-collector G431a@t))) (G4310@G430c@inv-collector)) ((lambda (G431c@t) (begin (G4311@G430d@vis-collector G4313@G430f@vis-collector) (set! G4313@G430f@vis-collector G431c@t))) (G4311@G430d@vis-collector)))))) G30dd@inv-collector G30df@vis-collector G4304@rtc (lambda (G431e@x) (values))))) (G30db@make-collector)))) (set! G30d1@parse-exports (lambda (G4320@exp*) ((letrec ((G4322@f (lambda (G4324@exp* G4325@int* G4326@ext*) (if (null? G4324@exp*) (begin (if (not (G2e35@valid-bound-ids? G4326@ext*)) (G3161@syntax-violation 'export '"invalid exports" (G30a6@find-dups G4326@ext*)) (void)) (values (map G3167@syntax->datum G4326@ext*) G4325@int*)) ((lambda (G432a@t) ((lambda (G432c@ls/false) (if G432c@ls/false (apply (lambda (G432e@rename G432f@i* G4330@e*) (begin (if (not (if (eq? (G3167@syntax->datum G432e@rename) 'rename) (if (for-all G2e2b@id? G432f@i*) (begin '#f (for-all G2e2b@id? G4330@e*)) '#f) '#f)) (G3161@syntax-violation 'export '"invalid export specifier" (car G4324@exp*)) (void)) (G4322@f (cdr G4324@exp*) (append G432f@i* G4325@int*) (append G4330@e* G4326@ext*)))) G432c@ls/false) ((lambda (G4334@t) ((lambda (G4336@ls/false) (if G4336@ls/false (apply (lambda (G4338@ie) (begin (if (not (G2e2b@id? G4338@ie)) (G3161@syntax-violation 'export '"invalid export" G4338@ie) (void)) (G4322@f (cdr G4324@exp*) (cons G4338@ie G4325@int*) (cons G4338@ie G4326@ext*)))) G4336@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G4334@t))) (G306e@syntax-dispatch G4334@t 'any))) G432a@t))) (G306e@syntax-dispatch G432a@t '(any . #(each (any any)))))) (car G4324@exp*)))))) G4322@f) G4320@exp* '() '()))) (set! G30d3@parse-library-name (lambda (G433a@spec) ((lambda (G433d@parse) (begin (set! G433d@parse (lambda (G4348@x) ((lambda (G434a@t) ((lambda (G434c@ls/false) (if (if G434c@ls/false (begin '#f (apply (lambda (G434e@v*) (for-all (lambda (G4350@x) ((lambda (G4352@x) (if (integer? G4352@x) (begin '#f (exact? G4352@x)) '#f)) (G3167@syntax->datum G4350@x))) G434e@v*)) G434c@ls/false)) '#f) (apply (lambda (G4354@v*) (values '() (map G3167@syntax->datum G4354@v*))) G434c@ls/false) ((lambda (G4356@t) ((lambda (G4358@ls/false) (if (if G4358@ls/false (begin '#f (apply (lambda (G435a@x G435b@rest) (symbol? (G3167@syntax->datum G435a@x))) G4358@ls/false)) '#f) (apply (lambda (G435e@x G435f@rest) (call-with-values (lambda () (G433d@parse G435f@rest)) (lambda (G4364@G4362 G4365@G4363) ((lambda (G4368@v* G4369@x*) (values (cons (G3167@syntax->datum G435e@x) G4369@x*) G4368@v*)) G4365@G4363 G4364@G4362)))) G4358@ls/false) ((lambda (G436c@t) ((lambda (G436e@ls/false) (if G436e@ls/false (apply (lambda () (values '() '())) G436e@ls/false) ((lambda (G4370@t) ((lambda (G4372@ls/false) (if G4372@ls/false (apply (lambda () (G3161@syntax-violation '#f '"invalid library name" G433a@spec)) G4372@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G4370@t))) (G306e@syntax-dispatch G4370@t '_))) G436c@t))) (G306e@syntax-dispatch G436c@t '()))) G4356@t))) (G306e@syntax-dispatch G4356@t '(any . any)))) G434a@t))) (G306e@syntax-dispatch G434a@t '(each-any)))) G4348@x))) (call-with-values (lambda () (G433d@parse G433a@spec)) (lambda (G4340@G433e G4341@G433f) ((lambda (G4344@ver* G4345@name*) (begin (if (null? G4345@name*) (G3161@syntax-violation '#f '"empty library name" G433a@spec) (void)) (values G4345@name* G4344@ver*))) G4341@G433f G4340@G433e))))) '#f))) (set! G30d5@parse-library (lambda (G4374@e) ((lambda (G4376@t) ((lambda (G4378@ls/false) (if (if G4378@ls/false (begin '#f (apply (lambda (G437a@library G437b@name* G437c@export G437d@exp* G437e@import G437f@imp* G4380@b*) (if (eq? (G3167@syntax->datum G437c@export) 'export) (if (eq? (G3167@syntax->datum G437e@import) 'import) (begin '#f (eq? (G3167@syntax->datum G437a@library) 'library)) '#f) '#f)) G4378@ls/false)) '#f) (apply (lambda (G4388@library G4389@name* G438a@export G438b@exp* G438c@import G438d@imp* G438e@b*) (values G4389@name* G438b@exp* G438d@imp* G438e@b*)) G4378@ls/false) ((lambda (G4396@t) ((lambda (G4398@ls/false) (if G4398@ls/false (apply (lambda () (G3161@syntax-violation '#f '"malformed library" G4374@e)) G4398@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G4396@t))) (G306e@syntax-dispatch G4396@t '_))) G4376@t))) (G306e@syntax-dispatch G4376@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4374@e))) (set! G30d7@parse-import-spec* ((lambda () ((lambda (G439b@idsyn? G439d@dup-error G439f@merge-substs G43a1@exclude* G43a3@find* G43a5@rem* G43a7@remove-dups G43a9@parse-library-name G43ab@import-library G43ad@get-import G43af@add-imports!) (begin (set! G439b@idsyn? (lambda (G459a@x) (symbol? (G3167@syntax->datum G459a@x)))) (set! G439d@dup-error (lambda (G4598@name) (G3161@syntax-violation 'import '"two imports with different bindings" G4598@name))) (set! G439f@merge-substs (lambda (G4586@s G4587@subst) ((lambda (G458b@insert-to-subst) (begin (set! G458b@insert-to-subst (lambda (G458c@a G458d@subst) ((lambda (G4590@name G4591@label) ((lambda (G4594@t) (if G4594@t ((lambda (G4596@x) (if (eq? (cdr G4596@x) G4591@label) G458d@subst (G439d@dup-error G4590@name))) G4594@t) (cons G458c@a G458d@subst))) (assq G4590@name G458d@subst))) (car G458c@a) (cdr G458c@a)))) (if (null? G4586@s) G4587@subst (G458b@insert-to-subst (car G4586@s) (G439f@merge-substs (cdr G4586@s) G4587@subst))))) '#f))) (set! G43a1@exclude* (lambda (G455c@sym* G455d@subst) ((lambda (G4561@exclude) (begin (set! G4561@exclude (lambda (G4576@sym G4577@subst) (if (null? G4577@subst) (G3161@syntax-violation 'import '"cannot rename unbound identifier" G4576@sym) (if (eq? G4576@sym (caar G4577@subst)) (values (cdar G4577@subst) (cdr G4577@subst)) ((lambda (G457a@a) (call-with-values (lambda () (G4561@exclude G4576@sym (cdr G4577@subst))) (lambda (G457e@G457c G457f@G457d) ((lambda (G4582@subst G4583@old) (values G4583@old (cons G457a@a G4582@subst))) G457f@G457d G457e@G457c)))) (car G4577@subst)))))) (if (null? G455c@sym*) (values '() G455d@subst) (call-with-values (lambda () (G4561@exclude (car G455c@sym*) G455d@subst)) (lambda (G4564@G4562 G4565@G4563) ((lambda (G4568@subst G4569@old) (call-with-values (lambda () (G43a1@exclude* (cdr G455c@sym*) G4568@subst)) (lambda (G456e@G456c G456f@G456d) ((lambda (G4572@subst G4573@old*) (values (cons G4569@old G4573@old*) G4572@subst)) G456f@G456d G456e@G456c)))) G4565@G4563 G4564@G4562)))))) '#f))) (set! G43a3@find* (lambda (G4554@sym* G4555@subst) (map (lambda (G4558@x) ((lambda (G455a@t) (if G455a@t (cdr G455a@t) (G3161@syntax-violation 'import '"cannot find identifier" G4558@x))) (assq G4558@x G4555@subst))) G4554@sym*))) (set! G43a5@rem* (lambda (G454c@sym* G454d@subst) ((letrec ((G4550@f (lambda (G4552@subst) (if (null? G4552@subst) '() (if (memq (caar G4552@subst) G454c@sym*) (G4550@f (cdr G4552@subst)) (cons (car G4552@subst) (G4550@f (cdr G4552@subst)))))))) G4550@f) G454d@subst))) (set! G43a7@remove-dups (lambda (G454a@ls) (if (null? G454a@ls) '() (if (memq (car G454a@ls) (cdr G454a@ls)) (G43a7@remove-dups (cdr G454a@ls)) (cons (car G454a@ls) (G43a7@remove-dups (cdr G454a@ls))))))) (set! G43a9@parse-library-name (lambda (G4464@spec) ((lambda (G4467@subversion? G4469@subversion-pred G446b@version-pred) (begin (set! G4467@subversion? (lambda (G4546@x) ((lambda (G4548@x) (if (integer? G4548@x) (if (exact? G4548@x) (begin '#f (>= G4548@x '0)) '#f) '#f)) (G3167@syntax->datum G4546@x)))) (set! G4469@subversion-pred (lambda (G44e6@x*) ((lambda (G44e8@t) ((lambda (G44ea@ls/false) (if (if G44ea@ls/false (begin '#f (apply (lambda (G44ec@n) (G4467@subversion? G44ec@n)) G44ea@ls/false)) '#f) (apply (lambda (G44ee@n) (lambda (G44f0@x) (= G44f0@x (G3167@syntax->datum G44ee@n)))) G44ea@ls/false) ((lambda (G44f2@t) ((lambda (G44f4@ls/false) (if (if G44f4@ls/false (begin '#f (apply (lambda (G44f6@p? G44f7@sub*) (eq? (G3167@syntax->datum G44f6@p?) 'and)) G44f4@ls/false)) '#f) (apply (lambda (G44fa@p? G44fb@sub*) ((lambda (G44fe@p*) (lambda (G4500@x) (for-all (lambda (G4502@p) (G4502@p G4500@x)) G44fe@p*))) (map G4469@subversion-pred G44fb@sub*))) G44f4@ls/false) ((lambda (G4504@t) ((lambda (G4506@ls/false) (if (if G4506@ls/false (begin '#f (apply (lambda (G4508@p? G4509@sub*) (eq? (G3167@syntax->datum G4508@p?) 'or)) G4506@ls/false)) '#f) (apply (lambda (G450c@p? G450d@sub*) ((lambda (G4510@p*) (lambda (G4512@x) (exists (lambda (G4514@p) (G4514@p G4512@x)) G4510@p*))) (map G4469@subversion-pred G450d@sub*))) G4506@ls/false) ((lambda (G4516@t) ((lambda (G4518@ls/false) (if (if G4518@ls/false (begin '#f (apply (lambda (G451a@p? G451b@sub) (eq? (G3167@syntax->datum G451a@p?) 'not)) G4518@ls/false)) '#f) (apply (lambda (G451e@p? G451f@sub) ((lambda (G4522@p) (lambda (G4524@x) (not (G4522@p G4524@x)))) (G4469@subversion-pred G451f@sub))) G4518@ls/false) ((lambda (G4526@t) ((lambda (G4528@ls/false) (if (if G4528@ls/false (begin '#f (apply (lambda (G452a@p? G452b@n) (if (eq? (G3167@syntax->datum G452a@p?) '<=) (begin '#f (G4467@subversion? G452b@n)) '#f)) G4528@ls/false)) '#f) (apply (lambda (G452e@p? G452f@n) (lambda (G4532@x) (<= G4532@x (G3167@syntax->datum G452f@n)))) G4528@ls/false) ((lambda (G4534@t) ((lambda (G4536@ls/false) (if (if G4536@ls/false (begin '#f (apply (lambda (G4538@p? G4539@n) (if (eq? (G3167@syntax->datum G4538@p?) '>=) (begin '#f (G4467@subversion? G4539@n)) '#f)) G4536@ls/false)) '#f) (apply (lambda (G453c@p? G453d@n) (lambda (G4540@x) (>= G4540@x (G3167@syntax->datum G453d@n)))) G4536@ls/false) ((lambda (G4542@t) ((lambda (G4544@ls/false) (if G4544@ls/false (apply (lambda () (G3161@syntax-violation 'import '"invalid sub-version spec" G4464@spec G44e6@x*)) G4544@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G4542@t))) (G306e@syntax-dispatch G4542@t '_))) G4534@t))) (G306e@syntax-dispatch G4534@t '(any any)))) G4526@t))) (G306e@syntax-dispatch G4526@t '(any any)))) G4516@t))) (G306e@syntax-dispatch G4516@t '(any any)))) G4504@t))) (G306e@syntax-dispatch G4504@t '(any . each-any)))) G44f2@t))) (G306e@syntax-dispatch G44f2@t '(any . each-any)))) G44e8@t))) (G306e@syntax-dispatch G44e8@t 'any))) G44e6@x*))) (set! G446b@version-pred (lambda (G4496@x*) ((lambda (G4498@t) ((lambda (G449a@ls/false) (if G449a@ls/false (apply (lambda () (lambda (G449c@x) '#t)) G449a@ls/false) ((lambda (G449e@t) ((lambda (G44a0@ls/false) (if (if G44a0@ls/false (begin '#f (apply (lambda (G44a2@c G44a3@ver*) (eq? (G3167@syntax->datum G44a2@c) 'and)) G44a0@ls/false)) '#f) (apply (lambda (G44a6@c G44a7@ver*) ((lambda (G44aa@p*) (lambda (G44ac@x) (for-all (lambda (G44ae@p) (G44ae@p G44ac@x)) G44aa@p*))) (map G446b@version-pred G44a7@ver*))) G44a0@ls/false) ((lambda (G44b0@t) ((lambda (G44b2@ls/false) (if (if G44b2@ls/false (begin '#f (apply (lambda (G44b4@c G44b5@ver*) (eq? (G3167@syntax->datum G44b4@c) 'or)) G44b2@ls/false)) '#f) (apply (lambda (G44b8@c G44b9@ver*) ((lambda (G44bc@p*) (lambda (G44be@x) (exists (lambda (G44c0@p) (G44c0@p G44be@x)) G44bc@p*))) (map G446b@version-pred G44b9@ver*))) G44b2@ls/false) ((lambda (G44c2@t) ((lambda (G44c4@ls/false) (if (if G44c4@ls/false (begin '#f (apply (lambda (G44c6@c G44c7@ver) (eq? (G3167@syntax->datum G44c6@c) 'not)) G44c4@ls/false)) '#f) (apply (lambda (G44ca@c G44cb@ver) ((lambda (G44ce@p) (lambda (G44d0@x) (not (G44ce@p G44d0@x)))) (G446b@version-pred G44cb@ver))) G44c4@ls/false) ((lambda (G44d2@t) ((lambda (G44d4@ls/false) (if G44d4@ls/false (apply (lambda (G44d6@sub*) ((lambda (G44d8@p*) (lambda (G44da@x) ((letrec ((G44dc@f (lambda (G44de@p* G44df@x) (if (null? G44de@p*) '#t (if (null? G44df@x) '#f (if ((car G44de@p*) (car G44df@x)) (begin '#f (G44dc@f (cdr G44de@p*) (cdr G44df@x))) '#f)))))) G44dc@f) G44d8@p* G44da@x))) (map G4469@subversion-pred G44d6@sub*))) G44d4@ls/false) ((lambda (G44e2@t) ((lambda (G44e4@ls/false) (if G44e4@ls/false (apply (lambda () (G3161@syntax-violation 'import '"invalid version spec" G4464@spec G4496@x*)) G44e4@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G44e2@t))) (G306e@syntax-dispatch G44e2@t '_))) G44d2@t))) (G306e@syntax-dispatch G44d2@t 'each-any))) G44c2@t))) (G306e@syntax-dispatch G44c2@t '(any any)))) G44b0@t))) (G306e@syntax-dispatch G44b0@t '(any . each-any)))) G449e@t))) (G306e@syntax-dispatch G449e@t '(any . each-any)))) G4498@t))) (G306e@syntax-dispatch G4498@t '()))) G4496@x*))) ((letrec ((G446c@f (lambda (G446e@x) ((lambda (G4470@t) ((lambda (G4472@ls/false) (if G4472@ls/false (apply (lambda (G4474@version-spec*) (values '() (G446b@version-pred G4474@version-spec*))) G4472@ls/false) ((lambda (G4476@t) ((lambda (G4478@ls/false) (if (if G4478@ls/false (begin '#f (apply (lambda (G447a@x G447b@x*) (G439b@idsyn? G447a@x)) G4478@ls/false)) '#f) (apply (lambda (G447e@x G447f@x*) (call-with-values (lambda () (G446c@f G447f@x*)) (lambda (G4484@G4482 G4485@G4483) ((lambda (G4488@pred G4489@name) (values (cons (G3167@syntax->datum G447e@x) G4489@name) G4488@pred)) G4485@G4483 G4484@G4482)))) G4478@ls/false) ((lambda (G448c@t) ((lambda (G448e@ls/false) (if G448e@ls/false (apply (lambda () (values '() (lambda (G4490@x) '#t))) G448e@ls/false) ((lambda (G4492@t) ((lambda (G4494@ls/false) (if G4494@ls/false (apply (lambda () (G3161@syntax-violation '#f '"invalid import spec" G4464@spec)) G4494@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G4492@t))) (G306e@syntax-dispatch G4492@t '_))) G448c@t))) (G306e@syntax-dispatch G448c@t '()))) G4476@t))) (G306e@syntax-dispatch G4476@t '(any . any)))) G4470@t))) (G306e@syntax-dispatch G4470@t '(each-any)))) G446e@x)))) G446c@f) G4464@spec))) '#f '#f '#f))) (set! G43ab@import-library (lambda (G4456@spec*) (call-with-values (lambda () (G43a9@parse-library-name G4456@spec*)) (lambda (G445a@G4458 G445b@G4459) ((lambda (G445e@pred G445f@name) (begin (if (null? G445f@name) (G3161@syntax-violation 'import '"empty library name" G4456@spec*) (void)) ((lambda (G4462@lib) (begin (if (not G4462@lib) (G3161@syntax-violation 'import '"cannot find library with required name" G445f@name) (void)) (if (not (G445e@pred (G2bf1@G2a57@library-version G4462@lib))) (G3161@syntax-violation 'import '"library does not satisfy version specification" G4456@spec* G4462@lib) (void)) ((G30e1@imp-collector) G4462@lib) (G2bf5@G2a5f@library-subst G4462@lib))) (G2c19@G2aa7@find-library-by-name G445f@name)))) G445b@G4459 G445a@G4458))))) (set! G43ad@get-import (lambda (G43c8@spec) ((lambda (G43ca@t) ((lambda (G43cc@ls/false) (if (if G43cc@ls/false (begin '#f (apply (lambda (G43ce@x G43cf@x*) (not (memq (G3167@syntax->datum G43ce@x) '(for rename except only prefix library)))) G43cc@ls/false)) '#f) (apply (lambda (G43d2@x G43d3@x*) (G43ab@import-library (cons G43d2@x G43d3@x*))) G43cc@ls/false) ((lambda (G43d6@t) ((lambda (G43d8@ls/false) (if (if G43d8@ls/false (begin '#f (apply (lambda (G43da@rename G43db@isp G43dc@old* G43dd@new*) (if (eq? (G3167@syntax->datum G43da@rename) 'rename) (if (for-all G439b@idsyn? G43dc@old*) (begin '#f (for-all G439b@idsyn? G43dd@new*)) '#f) '#f)) G43d8@ls/false)) '#f) (apply (lambda (G43e2@rename G43e3@isp G43e4@old* G43e5@new*) ((lambda (G43ea@subst G43eb@old* G43ec@new*) ((lambda (G43f0@old-label*) ((lambda (G43f2@subst) (G439f@merge-substs (map cons G43ec@new* G43f0@old-label*) G43f2@subst)) (G43a5@rem* G43eb@old* G43ea@subst))) (G43a3@find* G43eb@old* G43ea@subst))) (G43ad@get-import G43e3@isp) (map G3167@syntax->datum G43e4@old*) (map G3167@syntax->datum G43e5@new*))) G43d8@ls/false) ((lambda (G43f4@t) ((lambda (G43f6@ls/false) (if (if G43f6@ls/false (begin '#f (apply (lambda (G43f8@except G43f9@isp G43fa@sym*) (if (eq? (G3167@syntax->datum G43f8@except) 'except) (begin '#f (for-all G439b@idsyn? G43fa@sym*)) '#f)) G43f6@ls/false)) '#f) (apply (lambda (G43fe@except G43ff@isp G4400@sym*) ((lambda (G4404@subst) (G43a5@rem* (map G3167@syntax->datum G4400@sym*) G4404@subst)) (G43ad@get-import G43ff@isp))) G43f6@ls/false) ((lambda (G4406@t) ((lambda (G4408@ls/false) (if (if G4408@ls/false (begin '#f (apply (lambda (G440a@only G440b@isp G440c@sym*) (if (eq? (G3167@syntax->datum G440a@only) 'only) (begin '#f (for-all G439b@idsyn? G440c@sym*)) '#f)) G4408@ls/false)) '#f) (apply (lambda (G4410@only G4411@isp G4412@sym*) ((lambda (G4416@subst G4417@sym*) ((lambda (G441a@sym*) ((lambda (G441c@lab*) (map cons G441a@sym* G441c@lab*)) (G43a3@find* G441a@sym* G4416@subst))) (G43a7@remove-dups G4417@sym*))) (G43ad@get-import G4411@isp) (map G3167@syntax->datum G4412@sym*))) G4408@ls/false) ((lambda (G441e@t) ((lambda (G4420@ls/false) (if (if G4420@ls/false (begin '#f (apply (lambda (G4422@prefix G4423@isp G4424@p) (if (eq? (G3167@syntax->datum G4422@prefix) 'prefix) (begin '#f (G439b@idsyn? G4424@p)) '#f)) G4420@ls/false)) '#f) (apply (lambda (G4428@prefix G4429@isp G442a@p) ((lambda (G442e@subst G442f@prefix) (map (lambda (G4432@x) (cons (string->symbol (string-append G442f@prefix (symbol->string (car G4432@x)))) (cdr G4432@x))) G442e@subst)) (G43ad@get-import G4429@isp) (symbol->string (G3167@syntax->datum G442a@p)))) G4420@ls/false) ((lambda (G4434@t) ((lambda (G4436@ls/false) (if (if G4436@ls/false (begin '#f (apply (lambda (G4438@library G4439@spec*) (eq? (G3167@syntax->datum G4438@library) 'library)) G4436@ls/false)) '#f) (apply (lambda (G443c@library G443d@spec*) (G43ab@import-library G443d@spec*)) G4436@ls/false) ((lambda (G4440@t) ((lambda (G4442@ls/false) (if (if G4442@ls/false (begin '#f (apply (lambda (G4444@for G4445@isp G4446@rest) (eq? (G3167@syntax->datum G4444@for) 'for)) G4442@ls/false)) '#f) (apply (lambda (G444a@for G444b@isp G444c@rest) (G43ad@get-import G444b@isp)) G4442@ls/false) ((lambda (G4450@t) ((lambda (G4452@ls/false) (if G4452@ls/false (apply (lambda (G4454@spec) (G3161@syntax-violation 'import '"invalid import spec" G4454@spec)) G4452@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G4450@t))) (G306e@syntax-dispatch G4450@t 'any))) G4440@t))) (G306e@syntax-dispatch G4440@t '(any any . any)))) G4434@t))) (G306e@syntax-dispatch G4434@t '(any each-any)))) G441e@t))) (G306e@syntax-dispatch G441e@t '(any any any)))) G4406@t))) (G306e@syntax-dispatch G4406@t '(any any . each-any)))) G43f4@t))) (G306e@syntax-dispatch G43f4@t '(any any . each-any)))) G43d6@t))) (G306e@syntax-dispatch G43d6@t '(any any . #(each (any any)))))) G43ca@t))) (G306e@syntax-dispatch G43ca@t '(any . each-any)))) G43c8@spec))) (set! G43af@add-imports! (lambda (G43b8@imp G43b9@h) ((lambda (G43bc@subst) (for-each (lambda (G43be@x) ((lambda (G43c0@name G43c1@label) ((lambda (G43c4@t) (if G43c4@t ((lambda (G43c6@l) (if (not (eq? G43c6@l G43c1@label)) (G439d@dup-error G43c0@name) (void))) G43c4@t) (hashtable-set! G43b9@h G43c0@name G43c1@label))) (hashtable-ref G43b9@h G43c0@name '#f))) (car G43be@x) (cdr G43be@x))) G43bc@subst)) (G43ad@get-import G43b8@imp)))) (lambda (G43b0@imp*) ((letrec ((G43b2@f (lambda (G43b4@imp* G43b5@h) (if (null? G43b4@imp*) (hashtable-entries G43b5@h) (begin (G43af@add-imports! (car G43b4@imp*) G43b5@h) (G43b2@f (cdr G43b4@imp*) G43b5@h)))))) G43b2@f) G43b0@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G30d9@make-top-rib (lambda (G459c@names G459d@labels) ((lambda (G45a0@rib) (begin (vector-for-each (lambda (G45a2@name G45a3@label) (begin (if (not (symbol? G45a2@name)) (error 'make-top-rib '"BUG: not a symbol" G45a2@name) (void)) (G2ddc@extend-rib/nc! G45a0@rib (G2df5@make-stx G45a2@name G2d9f@top-mark* '() '()) G45a3@label))) G459c@names G459d@labels) G45a0@rib)) (G2dd6@make-cache-rib)))) (set! G30db@make-collector (lambda () ((lambda (G45a6@ls) (lambda G45aa ((lambda (G45ab) (if (= G45ab '0) (apply (lambda () G45a6@ls) G45aa) (if (= G45ab '1) (apply (lambda (G45a8@x) (set! G45a6@ls (G2d98@set-cons G45a8@x G45a6@ls))) G45aa) (error 'apply '"invalid arg count")))) (length G45aa)))) '()))) (set! G30dd@inv-collector (G297d@G2890@make-parameter (lambda G45ac@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G45ae@x) (begin (if (not (procedure? G45ae@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G45ae@x) (void)) G45ae@x)))) (set! G30df@vis-collector (G297d@G2890@make-parameter (lambda G45b0@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G45b2@x) (begin (if (not (procedure? G45b2@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G45b2@x) (void)) G45b2@x)))) (set! G30e1@imp-collector (G297d@G2890@make-parameter (lambda G45b4@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G45b6@x) (begin (if (not (procedure? G45b6@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G45b6@x) (void)) G45b6@x)))) (set! G30e3@chi-library-internal (lambda (G45b8@e* G45b9@rib G45ba@top?) (call-with-values (lambda () (G30cd@chi-body* G45b8@e* '() '() '() '() '() '() '() G45b9@rib G45ba@top?)) (lambda (G45c6@G45be G45c7@G45bf G45c8@G45c0 G45c9@G45c1 G45ca@G45c2 G45cb@G45c3 G45cc@G45c4 G45cd@G45c5) ((lambda (G45d6@exp* G45d7@_kwd* G45d8@mod** G45d9@rhs* G45da@lex* G45db@mr G45dc@r G45dd@e*) (values (append (apply append (reverse G45d8@mod**)) G45dd@e*) G45dc@r G45db@mr (reverse G45da@lex*) (reverse G45d9@rhs*) G45d6@exp*)) G45cd@G45c5 G45cc@G45c4 G45cb@G45c3 G45ca@G45c2 G45c9@G45c1 G45c8@G45c0 G45c7@G45bf G45c6@G45be))))) (set! G30e5@chi-interaction-expr (lambda (G45e6@e G45e7@rib G45e8@r) (call-with-values (lambda () (G30cd@chi-body* (list G45e6@e) G45e8@r G45e8@r '() '() '() '() '() G45e7@rib '#t)) (lambda (G45f4@G45ec G45f5@G45ed G45f6@G45ee G45f7@G45ef G45f8@G45f0 G45f9@G45f1 G45fa@G45f2 G45fb@G45f3) ((lambda (G4604@_exp* G4605@_kwd* G4606@mod** G4607@rhs* G4608@lex* G4609@mr G460a@r G460b@e*) ((lambda (G4614@e*) ((lambda (G4616@e) (values G4616@e G460a@r)) (if (null? G4614@e*) (G2d87@G2cf9@build-void) (if (null? (cdr G4614@e*)) (car G4614@e*) (G2d86@G2cf7@build-sequence '#f G4614@e*))))) (G30a0@expand-interaction-rhs*/init* (reverse G4608@lex*) (reverse G4607@rhs*) (append (apply append (reverse G4606@mod**)) G460b@e*) G460a@r G4609@mr))) G45fb@G45f3 G45fa@G45f2 G45f9@G45f1 G45f8@G45f0 G45f7@G45ef G45f6@G45ee G45f5@G45ed G45f4@G45ec))))) (set! G30e7@library-body-expander (lambda (G4618@name G4619@main-exp* G461a@imp* G461b@b* G461c@top?) ((lambda (G4623@itc) (begin (set! G4623@itc (G30db@make-collector)) ((lambda (G4628@G4624@imp-collector G4629@G4625@top-level-context G462a@G4626@imp-collector G462b@G4627@top-level-context) ((lambda (G4630@swap) (dynamic-wind G4630@swap (lambda () (call-with-values (lambda () (G30d7@parse-import-spec* G461a@imp*)) (lambda (G4634@G4632 G4635@G4633) ((lambda (G4638@subst-labels G4639@subst-names) ((lambda (G463c@rib) ((lambda (G463f@wrap) (begin (set! G463f@wrap (lambda (G46ab@x) (G2df5@make-stx G46ab@x G2d9f@top-mark* (list G463c@rib) '()))) ((lambda (G4640@b* G4641@main-exp* G4642@rtc G4643@vtc) ((lambda (G464c@G4648@inv-collector G464d@G4649@vis-collector G464e@G464a@inv-collector G464f@G464b@vis-collector) ((lambda (G4654@swap) (dynamic-wind G4654@swap (lambda () (call-with-values (lambda () (G30e3@chi-library-internal G4640@b* G463c@rib G461c@top?)) (lambda (G465c@G4656 G465d@G4657 G465e@G4658 G465f@G4659 G4660@G465a G4661@G465b) ((lambda (G4668@internal-exp* G4669@rhs* G466a@lex* G466b@mr G466c@r G466d@init*) (call-with-values (lambda () (G30d1@parse-exports (append G4641@main-exp* G4668@internal-exp*))) (lambda (G4676@G4674 G4677@G4675) ((lambda (G467a@exp-id* G467b@exp-name*) (begin (G2de0@seal-rib! G463c@rib) ((lambda (G467e@init*) ((lambda (G4680@rhs*) ((lambda () (begin (G2de2@unseal-rib! G463c@rib) ((lambda (G4682@loc* G4683@export-subst) ((lambda (G4687@errstr) (begin (set! G4687@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G314b@make-export-env/macros G466a@lex* G4682@loc* G466c@r)) (lambda (G468b@G4688 G468c@G4689 G468d@G468a) ((lambda (G4691@macro* G4692@global* G4693@export-env) (begin (for-each (lambda (G4697@s) ((lambda (G4699@name G469a@label) ((lambda (G469d@p) (if G469d@p ((lambda (G469f@b) ((lambda (G46a1@type) (if (eq? G46a1@type 'mutable) (G3161@syntax-violation 'export G4687@errstr G4699@name) (void))) (car G469f@b))) (cdr G469d@p)) (void))) (assq G469a@label G4693@export-env))) (car G4697@s) (cdr G4697@s))) G4683@export-subst) ((lambda (G46a3@invoke-body G46a4@invoke-definitions) (values (G4623@itc) (G4642@rtc) (G4643@vtc) (G2d86@G2cf7@build-sequence '#f (append G46a4@invoke-definitions (list G46a3@invoke-body))) G4691@macro* G4683@export-subst G4693@export-env)) (G2d89@G2cfd@build-letrec* '#f G466a@lex* G4680@rhs* (G3147@build-exports G4692@global* G467e@init*)) (map G2d82@G2c27@build-global-define (map cdr G4692@global*))))) G468d@G468a G468c@G4689 G468b@G4688))))) '#f)) (map G2da5@gen-global G466a@lex*) (G3149@make-export-subst G467b@exp-name* G467a@exp-id*)))))) (G30a2@chi-rhs* G4669@rhs* G466c@r G466b@mr))) (G308e@chi-expr* G466d@init* G466c@r G466b@mr)))) G4677@G4675 G4676@G4674)))) G4661@G465b G4660@G465a G465f@G4659 G465e@G4658 G465d@G4657 G465c@G4656)))) G4654@swap)) (lambda () (begin ((lambda (G46a7@t) (begin (G464c@G4648@inv-collector G464e@G464a@inv-collector) (set! G464e@G464a@inv-collector G46a7@t))) (G464c@G4648@inv-collector)) ((lambda (G46a9@t) (begin (G464d@G4649@vis-collector G464f@G464b@vis-collector) (set! G464f@G464b@vis-collector G46a9@t))) (G464d@G4649@vis-collector)))))) G30dd@inv-collector G30df@vis-collector G4642@rtc G4643@vtc)) (map G463f@wrap G461b@b*) (map G463f@wrap G4619@main-exp*) (G30db@make-collector) (G30db@make-collector)))) '#f)) (G30d9@make-top-rib G4639@subst-names G4638@subst-labels))) G4635@G4633 G4634@G4632)))) G4630@swap)) (lambda () (begin ((lambda (G46ad@t) (begin (G4628@G4624@imp-collector G462a@G4626@imp-collector) (set! G462a@G4626@imp-collector G46ad@t))) (G4628@G4624@imp-collector)) ((lambda (G46af@t) (begin (G4629@G4625@top-level-context G462b@G4627@top-level-context) (set! G462b@G4627@top-level-context G46af@t))) (G4629@G4625@top-level-context)))))) G30e1@imp-collector G316f@top-level-context G4623@itc '#f))) '#f))) (set! G30e9@core-library-expander (lambda (G46b1@e G46b2@verify-name) (call-with-values (lambda () (G30d5@parse-library G46b1@e)) (lambda (G46b9@G46b5 G46ba@G46b6 G46bb@G46b7 G46bc@G46b8) ((lambda (G46c1@b* G46c2@imp* G46c3@exp* G46c4@name*) (call-with-values (lambda () (G30d3@parse-library-name G46c4@name*)) (lambda (G46cb@G46c9 G46cc@G46ca) ((lambda (G46cf@ver G46d0@name) (begin (G46b2@verify-name G46d0@name) (call-with-values (lambda () (G30e7@library-body-expander G46d0@name G46c3@exp* G46c2@imp* G46c1@b* '#f)) (lambda (G46da@G46d3 G46db@G46d4 G46dc@G46d5 G46dd@G46d6 G46de@G46d7 G46df@G46d8 G46e0@G46d9) ((lambda (G46e8@export-env G46e9@export-subst G46ea@visit-code G46eb@invoke-code G46ec@visit-req* G46ed@invoke-req* G46ee@imp*) (values G46d0@name G46cf@ver G46ee@imp* G46ed@invoke-req* G46ec@visit-req* G46eb@invoke-code G46ea@visit-code G46e9@export-subst G46e8@export-env)) G46e0@G46d9 G46df@G46d8 G46de@G46d7 G46dd@G46d6 G46dc@G46d5 G46db@G46d4 G46da@G46d3))))) G46cc@G46ca G46cb@G46c9)))) G46bc@G46b8 G46bb@G46b7 G46ba@G46b6 G46b9@G46b5))))) (set! G30eb@parse-top-level-program (lambda (G46f6@e*) ((lambda (G46f8@t) ((lambda (G46fa@ls/false) (if (if G46fa@ls/false (begin '#f (apply (lambda (G46fc@import G46fd@imp* G46fe@b*) (eq? (G3167@syntax->datum G46fc@import) 'import)) G46fa@ls/false)) '#f) (apply (lambda (G4702@import G4703@imp* G4704@b*) (values G4703@imp* G4704@b*)) G46fa@ls/false) ((lambda (G4708@t) ((lambda (G470a@ls/false) (if (if G470a@ls/false (begin '#f (apply (lambda (G470c@import G470d@x G470e@y) (eq? (G3167@syntax->datum G470c@import) 'import)) G470a@ls/false)) '#f) (apply (lambda (G4712@import G4713@x G4714@y) (G3161@syntax-violation 'expander '"invalid syntax of top-level program" (G2e25@syntax-car G46f6@e*))) G470a@ls/false) ((lambda (G4718@t) ((lambda (G471a@ls/false) (if G471a@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G471a@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G4718@t))) (G306e@syntax-dispatch G4718@t '_))) G4708@t))) (G306e@syntax-dispatch G4708@t '((any . any) . any)))) G46f8@t))) (G306e@syntax-dispatch G46f8@t '((any . each-any) . each-any)))) G46f6@e*))) (set! G30ed@top-level-expander (lambda (G471c@e*) (call-with-values (lambda () (G30eb@parse-top-level-program G471c@e*)) (lambda (G4720@G471e G4721@G471f) ((lambda (G4724@b* G4725@imp*) (call-with-values (lambda () (G30e7@library-body-expander '() '() G4725@imp* G4724@b* '#t)) (lambda (G472f@G4728 G4730@G4729 G4731@G472a G4732@G472b G4733@G472c G4734@G472d G4735@G472e) ((lambda (G473d@export-env G473e@export-subst G473f@visit-code G4740@invoke-code G4741@visit-req* G4742@invoke-req* G4743@imp*) (values G4742@invoke-req* G4740@invoke-code)) G4735@G472e G4734@G472d G4733@G472c G4732@G472b G4731@G472a G4730@G4729 G472f@G4728)))) G4721@G471f G4720@G471e))))) (set! G30f3@G30ee (make-record-type-descriptor 'env '#f 'G30f1 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G30f5@G30f0 '#f) (set! G30f7@G30ef (make-record-constructor-descriptor G30f3@G30ee '#f G30f5@G30f0)) (set! G30fc@env? (record-predicate G30f3@G30ee)) (set! G30fe@make-env (record-constructor G30f7@G30ef)) (set! G3100@env-names (record-accessor G30f3@G30ee '0)) (set! G3102@env-labels (record-accessor G30f3@G30ee '1)) (set! G3104@env-itc (record-accessor G30f3@G30ee '2)) (set! G3106@set-env-names! (record-mutator G30f3@G30ee '0)) (set! G3108@set-env-labels! (record-mutator G30f3@G30ee '1)) (set! G310a@set-env-itc! (record-mutator G30f3@G30ee '2)) (set! G310c@rp (G297a@G288a@make-record-printer 'env (lambda (G474b@x G474c@p G474d@wr) (display '"#<environment>" G474c@p)))) (set! G3112@G310d (make-record-type-descriptor 'interaction-env '#f 'G3110 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3114@G310f '#f) (set! G3116@G310e (make-record-constructor-descriptor G3112@G310d '#f G3114@G310f)) (set! G311b@interaction-env? (record-predicate G3112@G310d)) (set! G311d@make-interaction-env (record-constructor G3116@G310e)) (set! G311f@interaction-env-rib (record-accessor G3112@G310d '0)) (set! G3121@interaction-env-r (record-accessor G3112@G310d '1)) (set! G3123@interaction-env-locs (record-accessor G3112@G310d '2)) (set! G3125@set-interaction-env-rib! (record-mutator G3112@G310d '0)) (set! G3127@set-interaction-env-r! (record-mutator G3112@G310d '1)) (set! G3129@set-interaction-env-locs! (record-mutator G3112@G310d '2)) (set! G312b@rp (G297a@G288a@make-record-printer 'interaction-env (lambda (G4751@x G4752@p G4753@wr) (display '"#<environment>" G4752@p)))) (set! G312d@interaction-environment-symbols (lambda () (G3135@environment-symbols (G316d@interaction-environment)))) (set! G312f@environment-bindings (lambda (G4757@e) (vector->list (vector-map (lambda (G4759@name G475a@label) (G3131@parse-binding (cons G4759@name (G2c1f@G2ab3@imported-label->binding G475a@label)))) (G3100@env-names G4757@e) (G3102@env-labels G4757@e))))) (set! G3131@parse-binding (lambda (G475d@b) (cons (car G475d@b) ((lambda (G475f@t) (if (memv G475f@t '(core-prim global)) 'procedure (if (memv G475f@t '(core-macro macro global-macro)) 'syntax (if (memv G475f@t '($core-rtd)) 'record (if (eq? (car G475d@b) (cadr G475d@b)) 'syntax 'unknown))))) (cadr G475d@b))))) (set! G3133@environment? (lambda (G4761@x) ((lambda (G4763@t) (if G4763@t G4763@t (begin '#f (G311b@interaction-env? G4761@x)))) (G30fc@env? G4761@x)))) (set! G3135@environment-symbols (lambda (G4765@x) (if (G30fc@env? G4765@x) (vector->list (G3100@env-names G4765@x)) (if (G311b@interaction-env? G4765@x) (map values (G2dc0@rib-sym* (G311f@interaction-env-rib G4765@x))) (assertion-violation 'environment-symbols '"not an environment" G4765@x))))) (set! G3137@environment (lambda G4767@imp* ((lambda (G4769@itc) ((lambda (G476d@G476b@imp-collector G476e@G476c@imp-collector) ((lambda (G4771@swap) (dynamic-wind G4771@swap (lambda () (call-with-values (lambda () (G30d7@parse-import-spec* G4767@imp*)) (lambda (G4775@G4773 G4776@G4774) ((lambda (G4779@subst-labels G477a@subst-names) (G30fe@make-env G477a@subst-names G4779@subst-labels G4769@itc)) G4776@G4774 G4775@G4773)))) G4771@swap)) (lambda () ((lambda (G477d@t) (begin (G476d@G476b@imp-collector G476e@G476c@imp-collector) (set! G476e@G476c@imp-collector G477d@t))) (G476d@G476b@imp-collector))))) G30e1@imp-collector G4769@itc)) (G30db@make-collector)))) (set! G3139@null-environment (lambda (G477f@n) (begin (if (not (eqv? G477f@n '5)) (assertion-violation 'null-environment '"not 5" G477f@n) (void)) (G3137@environment '(psyntax null-environment-5))))) (set! G313b@scheme-report-environment (lambda (G4781@n) (begin (if (not (eqv? G4781@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4781@n) (void)) (G3137@environment '(psyntax scheme-report-environment-5))))) (set! G313d@expand (lambda (G4783@x G4784@env) (if (G30fc@env? G4784@env) ((lambda (G4787@rib) ((lambda (G4789@x G478a@itc G478b@rtc G478c@vtc) ((lambda (G4791@x) (begin (G2de0@seal-rib! G4787@rib) (values G4791@x (G478b@rtc)))) ((lambda (G479b@G4793@top-level-context G479c@G4794@inv-collector G479d@G4795@vis-collector G479e@G4796@imp-collector G479f@G4797@top-level-context G47a0@G4798@inv-collector G47a1@G4799@vis-collector G47a2@G479a@imp-collector) ((lambda (G47ab@swap) (dynamic-wind G47ab@swap (lambda () (G3092@chi-expr G4789@x '() '())) G47ab@swap)) (lambda () (begin ((lambda (G47ad@t) (begin (G479b@G4793@top-level-context G479f@G4797@top-level-context) (set! G479f@G4797@top-level-context G47ad@t))) (G479b@G4793@top-level-context)) ((lambda (G47af@t) (begin (G479c@G4794@inv-collector G47a0@G4798@inv-collector) (set! G47a0@G4798@inv-collector G47af@t))) (G479c@G4794@inv-collector)) ((lambda (G47b1@t) (begin (G479d@G4795@vis-collector G47a1@G4799@vis-collector) (set! G47a1@G4799@vis-collector G47b1@t))) (G479d@G4795@vis-collector)) ((lambda (G47b3@t) (begin (G479e@G4796@imp-collector G47a2@G479a@imp-collector) (set! G47a2@G479a@imp-collector G47b3@t))) (G479e@G4796@imp-collector)))))) G316f@top-level-context G30dd@inv-collector G30df@vis-collector G30e1@imp-collector '#f G478b@rtc G478c@vtc G478a@itc))) (G2df5@make-stx G4783@x G2d9f@top-mark* (list G4787@rib) '()) (G3104@env-itc G4784@env) (G30db@make-collector) (G30db@make-collector))) (G30d9@make-top-rib (G3100@env-names G4784@env) (G3102@env-labels G4784@env))) (if (G311b@interaction-env? G4784@env) ((lambda (G47b5@rib G47b6@r G47b7@rtc) ((lambda (G47bb@x) (call-with-values (lambda () ((lambda (G47c7@G47bf@top-level-context G47c8@G47c0@inv-collector G47c9@G47c1@vis-collector G47ca@G47c2@imp-collector G47cb@G47c3@top-level-context G47cc@G47c4@inv-collector G47cd@G47c5@vis-collector G47ce@G47c6@imp-collector) ((lambda (G47d7@swap) (dynamic-wind G47d7@swap (lambda () (G30e5@chi-interaction-expr G47bb@x G47b5@rib G47b6@r)) G47d7@swap)) (lambda () (begin ((lambda (G47d9@t) (begin (G47c7@G47bf@top-level-context G47cb@G47c3@top-level-context) (set! G47cb@G47c3@top-level-context G47d9@t))) (G47c7@G47bf@top-level-context)) ((lambda (G47db@t) (begin (G47c8@G47c0@inv-collector G47cc@G47c4@inv-collector) (set! G47cc@G47c4@inv-collector G47db@t))) (G47c8@G47c0@inv-collector)) ((lambda (G47dd@t) (begin (G47c9@G47c1@vis-collector G47cd@G47c5@vis-collector) (set! G47cd@G47c5@vis-collector G47dd@t))) (G47c9@G47c1@vis-collector)) ((lambda (G47df@t) (begin (G47ca@G47c2@imp-collector G47ce@G47c6@imp-collector) (set! G47ce@G47c6@imp-collector G47df@t))) (G47ca@G47c2@imp-collector)))))) G316f@top-level-context G30dd@inv-collector G30df@vis-collector G30e1@imp-collector G4784@env G47b7@rtc (G30db@make-collector) (G30db@make-collector))) (lambda (G47e1@G47bd G47e2@G47be) ((lambda (G47e5@r^ G47e6@e) (begin (G3127@set-interaction-env-r! G4784@env G47e5@r^) (values G47e6@e (G47b7@rtc)))) G47e2@G47be G47e1@G47bd)))) (G2df5@make-stx G4783@x G2d9f@top-mark* (list G47b5@rib) '()))) (G311f@interaction-env-rib G4784@env) (G3121@interaction-env-r G4784@env) (G30db@make-collector)) (assertion-violation 'expand '"not an environment" G4784@env))))) (set! G313f@eval (lambda (G47e9@x G47ea@env) (begin (if (not (G3133@environment? G47ea@env)) (error 'eval '"not an environment" G47ea@env) (void)) (call-with-values (lambda () (G313d@expand G47e9@x G47ea@env)) (lambda (G47ef@G47ed G47f0@G47ee) ((lambda (G47f3@invoke-req* G47f4@x) (begin (for-each G2c20@G2ab5@invoke-library G47f3@invoke-req*) (eval-core (G29e1@G2989@expanded->core G47f4@x)))) G47f0@G47ee G47ef@G47ed)))))) (set! G3141@library-expander (lambda G485c ((lambda (G485d) (if (= G485d '3) (apply (lambda (G47f7@x G47f8@filename G47f9@verify-name) ((lambda (G47fe@build-visit-code G4800@visit!) (begin (set! G47fe@build-visit-code (lambda (G484a@macro*) (if (null? G484a@macro*) (G2d87@G2cf9@build-void) (G2d86@G2cf7@build-sequence '#f (map (lambda (G484c@x) ((lambda (G484e@loc G484f@src) (list 'set! G484e@loc G484f@src)) (car G484c@x) (cddr G484c@x))) G484a@macro*))))) (set! G4800@visit! (lambda (G4842@macro*) (for-each (lambda (G4844@x) ((lambda (G4846@loc G4847@proc) (set-symbol-value! G4846@loc G4847@proc)) (car G4844@x) (cadr G4844@x))) G4842@macro*))) (call-with-values (lambda () (G30e9@core-library-expander G47f7@x G47f9@verify-name)) (lambda (G480a@G4801 G480b@G4802 G480c@G4803 G480d@G4804 G480e@G4805 G480f@G4806 G4810@G4807 G4811@G4808 G4812@G4809) ((lambda (G481c@export-env G481d@export-subst G481e@macro* G481f@invoke-code G4820@vis* G4821@inv* G4822@imp* G4823@ver G4824@name) ((lambda (G482e@id G482f@name G4830@ver G4831@imp* G4832@vis* G4833@inv* G4834@visit-proc G4835@invoke-proc G4836@visit-code G4837@invoke-code) (begin (G2c1e@G2ab1@install-library G482e@id G482f@name G4830@ver G4831@imp* G4832@vis* G4833@inv* G481d@export-subst G481c@export-env G4834@visit-proc G4835@invoke-proc G4836@visit-code G4837@invoke-code '#t G47f8@filename) (values G482e@id G482f@name G4830@ver G4831@imp* G4832@vis* G4833@inv* G4837@invoke-code G4836@visit-code G481d@export-subst G481c@export-env))) (gensym) G4824@name G4823@ver (map G2c24@G2abd@library-spec G4822@imp*) (map G2c24@G2abd@library-spec G4820@vis*) (map G2c24@G2abd@library-spec G4821@inv*) (lambda () (G4800@visit! G481e@macro*)) (lambda () (eval-core (G29e1@G2989@expanded->core G481f@invoke-code))) (G47fe@build-visit-code G481e@macro*) G481f@invoke-code)) G4812@G4809 G4811@G4808 G4810@G4807 G480f@G4806 G480e@G4805 G480d@G4804 G480c@G4803 G480b@G4802 G480a@G4801))))) '#f '#f)) G485c) (if (= G485d '2) (apply (lambda (G4852@x G4853@filename) (G3141@library-expander G4852@x G4853@filename (lambda (G4856@x) (values)))) G485c) (if (= G485d '1) (apply (lambda (G4858@x) (G3141@library-expander G4858@x '#f (lambda (G485a@x) (values)))) G485c) (error 'apply '"invalid arg count"))))) (length G485c)))) (set! G3143@boot-library-expand (lambda (G485e@x) (call-with-values (lambda () (G3141@library-expander G485e@x)) (lambda (G486a@G4860 G486b@G4861 G486c@G4862 G486d@G4863 G486e@G4864 G486f@G4865 G4870@G4866 G4871@G4867 G4872@G4868 G4873@G4869) ((lambda (G487e@export-env G487f@export-subst G4880@visit-code G4881@invoke-code G4882@inv* G4883@vis* G4884@imp* G4885@ver G4886@name G4887@id) (values G4886@name G4881@invoke-code G487f@export-subst G487e@export-env)) G4873@G4869 G4872@G4868 G4871@G4867 G4870@G4866 G486f@G4865 G486e@G4864 G486d@G4863 G486c@G4862 G486b@G4861 G486a@G4860))))) (set! G3145@rev-map-append (lambda (G4892@f G4893@ls G4894@ac) (if (null? G4893@ls) G4894@ac (G3145@rev-map-append G4892@f (cdr G4893@ls) (cons (G4892@f (car G4893@ls)) G4894@ac))))) (set! G3147@build-exports (lambda (G4898@lex*+loc* G4899@init*) (G2d86@G2cf7@build-sequence '#f (cons (G2d87@G2cf9@build-void) (G3145@rev-map-append (lambda (G489c@x) (list 'set! (cdr G489c@x) (car G489c@x))) G4898@lex*+loc* G4899@init*))))) (set! G3149@make-export-subst (lambda (G489e@name* G489f@id*) (map (lambda (G48a2@name G48a3@id) ((lambda (G48a6@label) (begin (if (not G48a6@label) (G3161@syntax-violation '#f '"cannot export unbound identifier" G48a3@id) (void)) (cons G48a2@name G48a6@label))) (G2e45@id->label G48a3@id))) G489e@name* G489f@id*))) (set! G314b@make-export-env/macros (lambda (G48a8@lex* G48a9@loc* G48aa@r) ((lambda (G48af@lookup) (begin (set! G48af@lookup (lambda (G48cc@x) ((letrec ((G48ce@f (lambda (G48d0@x G48d1@lex* G48d2@loc*) (if (pair? G48d1@lex*) (if (eq? G48d0@x (car G48d1@lex*)) (car G48d2@loc*) (G48ce@f G48d0@x (cdr G48d1@lex*) (cdr G48d2@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G48ce@f) G48cc@x G48a8@lex* G48a9@loc*))) ((letrec ((G48b0@f (lambda (G48b2@r G48b3@env G48b4@global* G48b5@macro*) (if (null? G48b2@r) (values G48b3@env G48b4@global* G48b5@macro*) ((lambda (G48ba@x) ((lambda (G48bc@label G48bd@b) ((lambda (G48c0@t) (if (memv G48c0@t '(lexical)) ((lambda (G48c2@v) ((lambda (G48c4@loc G48c5@type) (G48b0@f (cdr G48b2@r) (cons (cons* G48bc@label G48c5@type G48c4@loc) G48b3@env) (cons (cons (G2ffe@lexical-var G48c2@v) G48c4@loc) G48b4@global*) G48b5@macro*)) (G48af@lookup (G2ffe@lexical-var G48c2@v)) (if (G3000@lexical-mutable? G48c2@v) 'mutable 'global))) (G2e4f@binding-value G48bd@b)) (if (memv G48c0@t '(local-macro)) ((lambda (G48c8@loc) (G48b0@f (cdr G48b2@r) (cons (cons* G48bc@label 'global-macro G48c8@loc) G48b3@env) G48b4@global* (cons (cons G48c8@loc (G2e4f@binding-value G48bd@b)) G48b5@macro*))) (gensym)) (if (memv G48c0@t '(local-macro!)) ((lambda (G48ca@loc) (G48b0@f (cdr G48b2@r) (cons (cons* G48bc@label 'global-macro! G48ca@loc) G48b3@env) G48b4@global* (cons (cons G48ca@loc (G2e4f@binding-value G48bd@b)) G48b5@macro*))) (gensym)) (if (memv G48c0@t '($rtd $module)) (G48b0@f (cdr G48b2@r) (cons G48ba@x G48b3@env) G48b4@global* G48b5@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2e4d@binding-type G48bd@b) (G2e4f@binding-value G48bd@b))))))) (G2e4d@binding-type G48bd@b))) (car G48ba@x) (cdr G48ba@x))) (car G48b2@r)))))) G48b0@f) G48aa@r '() '() '()))) '#f))) (set! G314d@generate-temporaries (lambda (G48d6@ls) ((lambda (G48d8@t) ((lambda (G48da@ls/false) (if G48da@ls/false (apply (lambda (G48dc@ls) (map (lambda (G48de@x) (G2df5@make-stx ((lambda (G48e0@x) (if ((lambda (G48e2@t) (if G48e2@t G48e2@t (begin '#f (string? G48e0@x)))) (symbol? G48e0@x)) (gensym G48e0@x) (gensym 't))) (G3167@syntax->datum G48de@x)) G2d9f@top-mark* '() '())) G48dc@ls)) G48da@ls/false) ((lambda (G48e4@t) ((lambda (G48e6@ls/false) (if G48e6@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G48e6@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G48e4@t))) (G306e@syntax-dispatch G48e4@t '_))) G48d8@t))) (G306e@syntax-dispatch G48d8@t 'each-any))) G48d6@ls))) (set! G314f@free-identifier=? (lambda (G48e8@x G48e9@y) (if (G2e2b@id? G48e8@x) (if (G2e2b@id? G48e9@y) (G2e33@free-id=? G48e8@x G48e9@y) (assertion-violation 'free-identifier=? '"not an identifier" G48e9@y)) (assertion-violation 'free-identifier=? '"not an identifier" G48e8@x)))) (set! G3151@bound-identifier=? (lambda (G48ec@x G48ed@y) (if (G2e2b@id? G48ec@x) (if (G2e2b@id? G48ed@y) (G2e31@bound-id=? G48ec@x G48ed@y) (assertion-violation 'bound-identifier=? '"not an identifier" G48ed@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G48ec@x)))) (set! G3153@make-source-condition (lambda (G48f0@x) ((lambda (G48fa@G48f5 G48fc@G48f7 G48fe@G48f6 G4903@G48f4 G4905@make-source-condition G4907@G48f2 G4909@G48f3 G490b@source-condition? G490d@source-filename G490f@source-character) (begin (set! G48fa@G48f5 (make-record-type-descriptor '&source-information &condition-rtd 'G48f8 '#f '#f '#((immutable file-name) (immutable character)))) (set! G48fc@G48f7 '#f) (set! G48fe@G48f6 (make-record-constructor-descriptor G48fa@G48f5 &condition-rcd G48fc@G48f7)) (set! G4903@G48f4 (record-predicate G48fa@G48f5)) (set! G4905@make-source-condition (record-constructor G48fe@G48f6)) (set! G4907@G48f2 (record-accessor G48fa@G48f5 '0)) (set! G4909@G48f3 (record-accessor G48fa@G48f5 '1)) (set! G490b@source-condition? (condition-predicate G48fa@G48f5)) (set! G490d@source-filename (condition-accessor G48fa@G48f5 G4907@G48f2)) (set! G490f@source-character (condition-accessor G48fa@G48f5 G4909@G48f3)) (if (pair? G48f0@x) (G4905@make-source-condition (car G48f0@x) (cdr G48f0@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3155@extract-position-condition (lambda (G4910@x) (G3153@make-source-condition (G3157@expression-position G4910@x)))) (set! G3157@expression-position (lambda (G4912@x) (if (G2df3@stx? G4912@x) (begin '#f ((lambda (G4914@x) (if (G2974@G287e@annotation? G4914@x) (begin '#f (G2975@G2880@annotation-source G4914@x)) '#f)) (G2df7@stx-expr G4912@x))) '#f))) (set! G3159@assertion-error (lambda (G4916@expr G4917@pos) (raise (condition (G4c0e@G4b40@make-assertion-violation) (G4c1c@G4b6e@make-who-condition 'assert) (G4bee@G4ad8@make-message-condition '"assertion failed") (G4c14@G4b55@make-irritants-condition (list G4916@expr)) (G3153@make-source-condition G4917@pos))))) (set! G315b@syntax-error (lambda (G491a@x . G491c@args) (begin (if (not (for-all string? G491c@args)) (assertion-violation 'syntax-error '"invalid argument" G491c@args) (void)) (raise (condition (G4bee@G4ad8@make-message-condition (if (null? G491c@args) '"invalid syntax" (apply string-append G491c@args))) (G4c36@G4bc4@make-syntax-violation (G3167@syntax->datum G491a@x) '#f) (G3155@extract-position-condition G491a@x) (G315d@extract-trace G491a@x)))))) (set! G315d@extract-trace (lambda (G491e@x) ((lambda (G4927@G4922 G4929@G4924 G492b@G4923 G4930@G4921 G4932@make-trace G4934@G4920 G4936@trace? G4938@trace-form) (begin (set! G4927@G4922 (make-record-type-descriptor '&trace &condition-rtd 'G4925 '#f '#f '#((immutable form)))) (set! G4929@G4924 '#f) (set! G492b@G4923 (make-record-constructor-descriptor G4927@G4922 &condition-rcd G4929@G4924)) (set! G4930@G4921 (record-predicate G4927@G4922)) (set! G4932@make-trace (record-constructor G492b@G4923)) (set! G4934@G4920 (record-accessor G4927@G4922 '0)) (set! G4936@trace? (condition-predicate G4927@G4922)) (set! G4938@trace-form (condition-accessor G4927@G4922 G4934@G4920)) ((letrec ((G4939@f (lambda (G493b@x) (if (G2df3@stx? G493b@x) (apply condition (G4932@make-trace G493b@x) (map G4939@f (G2dfd@stx-ae* G493b@x))) (if (G2974@G287e@annotation? G493b@x) (G4932@make-trace (G2df5@make-stx G493b@x '() '() '())) (condition)))))) G4939@f) G491e@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G315f@syntax-violation* (lambda (G493d@who G493e@msg G493f@form G4940@condition-object) (begin (if (not (string? G493e@msg)) (assertion-violation 'syntax-violation '"message is not a string" G493e@msg) (void)) ((lambda (G4945@who) (raise (condition (if G4945@who (G4c1c@G4b6e@make-who-condition G4945@who) (condition)) (G4bee@G4ad8@make-message-condition G493e@msg) G4940@condition-object (G3155@extract-position-condition G493f@form) (G315d@extract-trace G493f@form)))) (if ((lambda (G4947@t) (if G4947@t G4947@t (begin '#f (symbol? G493d@who)))) (string? G493d@who)) G493d@who (if (not G493d@who) ((lambda (G4949@t) ((lambda (G494b@ls/false) (if (if G494b@ls/false (begin '#f (apply (lambda (G494d@id) (G2e2b@id? G494d@id)) G494b@ls/false)) '#f) (apply (lambda (G494f@id) (G3167@syntax->datum G494f@id)) G494b@ls/false) ((lambda (G4951@t) ((lambda (G4953@ls/false) (if (if G4953@ls/false (begin '#f (apply (lambda (G4955@id G4956@rest) (G2e2b@id? G4955@id)) G4953@ls/false)) '#f) (apply (lambda (G4959@id G495a@rest) (G3167@syntax->datum G4959@id)) G4953@ls/false) ((lambda (G495d@t) ((lambda (G495f@ls/false) (if G495f@ls/false (apply (lambda () '#f) G495f@ls/false) (G3161@syntax-violation '#f '"invalid syntax" G495d@t))) (G306e@syntax-dispatch G495d@t '_))) G4951@t))) (G306e@syntax-dispatch G4951@t '(any . any)))) G4949@t))) (G306e@syntax-dispatch G4949@t 'any))) G493f@form) (assertion-violation 'syntax-violation '"invalid who argument" G493d@who))))))) (set! G3161@syntax-violation (lambda G496f ((lambda (G4970) (if (= G4970 '3) (apply (lambda (G4961@who G4962@msg G4963@form) (G3161@syntax-violation G4961@who G4962@msg G4963@form '#f)) G496f) (if (= G4970 '4) (apply (lambda (G4967@who G4968@msg G4969@form G496a@subform) (G315f@syntax-violation* G4967@who G4968@msg G4969@form (G4c36@G4bc4@make-syntax-violation (G3167@syntax->datum G4969@form) (G3167@syntax->datum G496a@subform)))) G496f) (error 'apply '"invalid arg count")))) (length G496f)))) (set! G3163@identifier? (lambda (G4971@x) (G2e2b@id? G4971@x))) (set! G3165@datum->syntax (lambda (G4973@id G4974@datum) (if (G2e2b@id? G4973@id) (G2e09@datum->stx G4973@id G4974@datum) (assertion-violation 'datum->syntax '"not an identifier" G4973@id)))) (set! G3167@syntax->datum (lambda (G4977@x) (G2e41@stx->datum G4977@x))) (set! G3169@compile-r6rs-top-level (lambda (G4979@x*) (call-with-values (lambda () (G30ed@top-level-expander G4979@x*)) (lambda (G497d@G497b G497e@G497c) ((lambda (G4981@invoke-code G4982@lib*) (lambda () (begin (for-each G2c20@G2ab5@invoke-library G4982@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G29e1@G2989@expanded->core G4981@invoke-code)) (void)) (eval-core (G29e1@G2989@expanded->core G4981@invoke-code))))) G497e@G497c G497d@G497b))))) (set! G316b@pre-compile-r6rs-top-level (lambda (G4985@x*) (call-with-values (lambda () (G30ed@top-level-expander G4985@x*)) (lambda (G4989@G4987 G498a@G4988) ((lambda (G498d@invoke-code G498e@lib*) (begin (for-each G2c20@G2ab5@invoke-library G498e@lib*) (G297b@G288c@compile-core (G29e1@G2989@expanded->core G498d@invoke-code)))) G498a@G4988 G4989@G4987))))) (set! G316d@interaction-environment ((lambda (G4991@the-env) (lambda () ((lambda (G4993@t) (if G4993@t G4993@t (begin '#f ((lambda (G4995@lib G4996@rib) (begin ((lambda (G4999@subst) (begin (G2dca@set-rib-sym*! G4996@rib (map car G4999@subst)) (G2dcc@set-rib-mark**! G4996@rib (map (lambda (G499b@x) G2d9f@top-mark*) G4999@subst)) (G2dce@set-rib-label*! G4996@rib (map cdr G4999@subst)))) (G2bf5@G2a5f@library-subst G4995@lib)) ((lambda (G499d@env) (begin (set! G4991@the-env G499d@env) G499d@env)) (G311d@make-interaction-env G4996@rib '() '())))) (G2c19@G2aa7@find-library-by-name '(mosh interaction)) (G2dd6@make-cache-rib))))) G4991@the-env))) '#f)) (set! G316f@top-level-context (G297d@G2890@make-parameter '#f)) (begin (set! G4aac@G316f@top-level-context G316f@top-level-context) (set! G4aab@G316d@interaction-environment G316d@interaction-environment) (set! G4aaa@G316b@pre-compile-r6rs-top-level G316b@pre-compile-r6rs-top-level) (set! G4aa9@G3169@compile-r6rs-top-level G3169@compile-r6rs-top-level) (set! G4aa8@G3167@syntax->datum G3167@syntax->datum) (set! G4aa7@G3165@datum->syntax G3165@datum->syntax) (set! G4aa6@G3163@identifier? G3163@identifier?) (set! G4aa5@G3161@syntax-violation G3161@syntax-violation) (set! G4aa4@G315f@syntax-violation* G315f@syntax-violation*) (set! G4aa3@G315d@extract-trace G315d@extract-trace) (set! G4aa2@G315b@syntax-error G315b@syntax-error) (set! G4aa1@G3159@assertion-error G3159@assertion-error) (set! G4aa0@G3157@expression-position G3157@expression-position) (set! G4a9f@G3155@extract-position-condition G3155@extract-position-condition) (set! G4a9e@G3153@make-source-condition G3153@make-source-condition) (set! G4a9d@G3151@bound-identifier=? G3151@bound-identifier=?) (set! G4a9c@G314f@free-identifier=? G314f@free-identifier=?) (set! G4a9b@G314d@generate-temporaries G314d@generate-temporaries) (set! G4a9a@G314b@make-export-env/macros G314b@make-export-env/macros) (set! G4a99@G3149@make-export-subst G3149@make-export-subst) (set! G4a98@G3147@build-exports G3147@build-exports) (set! G4a97@G3145@rev-map-append G3145@rev-map-append) (set! G4a96@G3143@boot-library-expand G3143@boot-library-expand) (set! G4a95@G3141@library-expander G3141@library-expander) (set! G4a94@G313f@eval G313f@eval) (set! G4a93@G313d@expand G313d@expand) (set! G4a92@G313b@scheme-report-environment G313b@scheme-report-environment) (set! G4a91@G3139@null-environment G3139@null-environment) (set! G4a90@G3137@environment G3137@environment) (set! G4a8f@G3135@environment-symbols G3135@environment-symbols) (set! G4a8e@G3133@environment? G3133@environment?) (set! G4a8d@G3131@parse-binding G3131@parse-binding) (set! G4a8c@G312f@environment-bindings G312f@environment-bindings) (set! G4a8b@G312d@interaction-environment-symbols G312d@interaction-environment-symbols) (set! G4a8a@G312b@rp G312b@rp) (set! G4a89@G3129@set-interaction-env-locs! G3129@set-interaction-env-locs!) (set! G4a88@G3127@set-interaction-env-r! G3127@set-interaction-env-r!) (set! G4a87@G3125@set-interaction-env-rib! G3125@set-interaction-env-rib!) (set! G4a86@G3123@interaction-env-locs G3123@interaction-env-locs) (set! G4a85@G3121@interaction-env-r G3121@interaction-env-r) (set! G4a84@G311f@interaction-env-rib G311f@interaction-env-rib) (set! G4a83@G311d@make-interaction-env G311d@make-interaction-env) (set! G4a82@G311b@interaction-env? G311b@interaction-env?) (set! G4a81@G3116@G310e G3116@G310e) (set! G4a80@G3114@G310f G3114@G310f) (set! G4a7f@G3112@G310d G3112@G310d) (set! G4a7e@G310c@rp G310c@rp) (set! G4a7d@G310a@set-env-itc! G310a@set-env-itc!) (set! G4a7c@G3108@set-env-labels! G3108@set-env-labels!) (set! G4a7b@G3106@set-env-names! G3106@set-env-names!) (set! G4a7a@G3104@env-itc G3104@env-itc) (set! G4a79@G3102@env-labels G3102@env-labels) (set! G4a78@G3100@env-names G3100@env-names) (set! G4a77@G30fe@make-env G30fe@make-env) (set! G4a76@G30fc@env? G30fc@env?) (set! G4a75@G30f7@G30ef G30f7@G30ef) (set! G4a74@G30f5@G30f0 G30f5@G30f0) (set! G4a73@G30f3@G30ee G30f3@G30ee) (set! G4a72@G30ed@top-level-expander G30ed@top-level-expander) (set! G4a71@G30eb@parse-top-level-program G30eb@parse-top-level-program) (set! G4a70@G30e9@core-library-expander G30e9@core-library-expander) (set! G4a6f@G30e7@library-body-expander G30e7@library-body-expander) (set! G4a6e@G30e5@chi-interaction-expr G30e5@chi-interaction-expr) (set! G4a6d@G30e3@chi-library-internal G30e3@chi-library-internal) (set! G4a6c@G30e1@imp-collector G30e1@imp-collector) (set! G4a6b@G30df@vis-collector G30df@vis-collector) (set! G4a6a@G30dd@inv-collector G30dd@inv-collector) (set! G4a69@G30db@make-collector G30db@make-collector) (set! G4a68@G30d9@make-top-rib G30d9@make-top-rib) (set! G4a67@G30d7@parse-import-spec* G30d7@parse-import-spec*) (set! G4a66@G30d5@parse-library G30d5@parse-library) (set! G4a65@G30d3@parse-library-name G30d3@parse-library-name) (set! G4a64@G30d1@parse-exports G30d1@parse-exports) (set! G4a63@G30cf@expand-transformer G30cf@expand-transformer) (set! G4a62@G30cd@chi-body* G30cd@chi-body*) (set! G4a61@G30cb@chi-internal-module G30cb@chi-internal-module) (set! G4a60@G30c9@module-interface-exp-id* G30c9@module-interface-exp-id*) (set! G4a5f@G30c7@set-module-interface-exp-lab-vec! G30c7@set-module-interface-exp-lab-vec!) (set! G4a5e@G30c5@set-module-interface-exp-id-vec! G30c5@set-module-interface-exp-id-vec!) (set! G4a5d@G30c3@set-module-interface-first-mark! G30c3@set-module-interface-first-mark!) (set! G4a5c@G30c1@module-interface-exp-lab-vec G30c1@module-interface-exp-lab-vec) (set! G4a5b@G30bf@module-interface-exp-id-vec G30bf@module-interface-exp-id-vec) (set! G4a5a@G30bd@module-interface-first-mark G30bd@module-interface-first-mark) (set! G4a59@G30bb@make-module-interface G30bb@make-module-interface) (set! G4a58@G30b9@module-interface? G30b9@module-interface?) (set! G4a57@G30b4@G30ac G30b4@G30ac) (set! G4a56@G30b2@G30ad G30b2@G30ad) (set! G4a55@G30b0@G30ab G30b0@G30ab) (set! G4a54@G30aa@parse-module G30aa@parse-module) (set! G4a53@G30a8@chi-internal G30a8@chi-internal) (set! G4a52@G30a6@find-dups G30a6@find-dups) (set! G4a51@G30a4@find-bound=? G30a4@find-bound=?) (set! G4a50@G30a2@chi-rhs* G30a2@chi-rhs*) (set! G4a4f@G30a0@expand-interaction-rhs*/init* G30a0@expand-interaction-rhs*/init*) (set! G4a4e@G309e@chi-rhs G309e@chi-rhs) (set! G4a4d@G309c@chi-defun G309c@chi-defun) (set! G4a4c@G309a@chi-lambda-clause* G309a@chi-lambda-clause*) (set! G4a4b@G3098@chi-lambda-clause G3098@chi-lambda-clause) (set! G4a4a@G3096@verify-formals G3096@verify-formals) (set! G4a49@G3094@chi-set! G3094@chi-set!) (set! G4a48@G3092@chi-expr G3092@chi-expr) (set! G4a47@G3090@chi-application G3090@chi-application) (set! G4a46@G308e@chi-expr* G308e@chi-expr*) (set! G4a45@G308c@chi-global-macro G308c@chi-global-macro) (set! G4a44@G308a@chi-local-macro G308a@chi-local-macro) (set! G4a43@G3088@chi-macro G3088@chi-macro) (set! G4a42@G3086@do-macro-call G3086@do-macro-call) (set! G4a41@G3084@local-macro-transformer G3084@local-macro-transformer) (set! G4a40@G3082@macro-transformer G3082@macro-transformer) (set! G4a3f@G3080@symbol-macro G3080@symbol-macro) (set! G4a3e@G307e@file-options-macro G307e@file-options-macro) (set! G4a3d@G307c@core-macro-transformer G307c@core-macro-transformer) (set! G4a3c@G307a@syntax-transformer G307a@syntax-transformer) (set! G4a3b@G3078@ellipsis-map G3078@ellipsis-map) (set! G4a3a@G3076@syntax-case-transformer G3076@syntax-case-transformer) (set! G4a39@G3074@verify-literals G3074@verify-literals) (set! G4a38@G3072@underscore? G3072@underscore?) (set! G4a37@G3070@ellipsis? G3070@ellipsis?) (set! G4a36@G306e@syntax-dispatch G306e@syntax-dispatch) (set! G4a35@G306c@convert-pattern G306c@convert-pattern) (set! G4a34@G306a@foreign-call-transformer G306a@foreign-call-transformer) (set! G4a33@G3068@parameterize-macro G3068@parameterize-macro) (set! G4a32@G3066@incorrect-usage-macro G3066@incorrect-usage-macro) (set! G4a31@G3064@define-condition-type-macro G3064@define-condition-type-macro) (set! G4a30@G3062@define-record-type-macro G3062@define-record-type-macro) (set! G4a2f@G3060@define-struct-macro G3060@define-struct-macro) (set! G4a2e@G305e@quasisyntax-macro G305e@quasisyntax-macro) (set! G4a2d@G305c@quasiquote-macro G305c@quasiquote-macro) (set! G4a2c@G305a@syntax-rules-macro G305a@syntax-rules-macro) (set! G4a2b@G3058@include-into-macro G3058@include-into-macro) (set! G4a2a@G3056@include-macro G3056@include-macro) (set! G4a29@G3054@do-include G3054@do-include) (set! G4a28@G3052@cond-macro G3052@cond-macro) (set! G4a27@G3050@and-macro G3050@and-macro) (set! G4a26@G304e@or-macro G304e@or-macro) (set! G4a25@G304c@let*-macro G304c@let*-macro) (set! G4a24@G304a@do-macro G304a@do-macro) (set! G4a23@G3048@identifier-syntax-macro G3048@identifier-syntax-macro) (set! G4a22@G3046@endianness-macro G3046@endianness-macro) (set! G4a21@G3044@assert-macro G3044@assert-macro) (set! G4a20@G3042@delay-macro G3042@delay-macro) (set! G4a1f@G3040@time-macro G3040@time-macro) (set! G4a1e@G303e@define-enumeration-macro G303e@define-enumeration-macro) (set! G4a1d@G303c@guard-macro G303c@guard-macro) (set! G4a1c@G303a@trace-letrec-syntax-macro G303a@trace-letrec-syntax-macro) (set! G4a1b@G3038@trace-let-syntax-macro G3038@trace-let-syntax-macro) (set! G4a1a@G3036@trace-let/rec-syntax G3036@trace-let/rec-syntax) (set! G4a19@G3034@trace-define-syntax-macro G3034@trace-define-syntax-macro) (set! G4a18@G3032@trace-define-macro G3032@trace-define-macro) (set! G4a17@G3030@trace-lambda-macro G3030@trace-lambda-macro) (set! G4a16@G302e@let*-values-macro G302e@let*-values-macro) (set! G4a15@G302c@let-values-macro G302c@let-values-macro) (set! G4a14@G302a@let-macro G302a@let-macro) (set! G4a13@G3028@invalid-fmls-error G3028@invalid-fmls-error) (set! G4a12@G3026@with-syntax-macro G3026@with-syntax-macro) (set! G4a11@G3024@bless G3024@bless) (set! G4a10@G3022@lambda-transformer G3022@lambda-transformer) (set! G4a0f@G3020@case-lambda-transformer G3020@case-lambda-transformer) (set! G4a0e@G301e@quote-transformer G301e@quote-transformer) (set! G4a0d@G301c@case-macro G301c@case-macro) (set! G4a0c@G301a@if-transformer G301a@if-transformer) (set! G4a0b@G3018@unless-macro G3018@unless-macro) (set! G4a0a@G3016@when-macro G3016@when-macro) (set! G4a09@G3014@record-constructor-descriptor-transformer G3014@record-constructor-descriptor-transformer) (set! G4a08@G3012@record-type-descriptor-transformer G3012@record-type-descriptor-transformer) (set! G4a07@G3010@type-descriptor-transformer G3010@type-descriptor-transformer) (set! G4a06@G300e@fluid-let-syntax-transformer G300e@fluid-let-syntax-transformer) (set! G4a05@G300c@letrec*-transformer G300c@letrec*-transformer) (set! G4a04@G300a@letrec-transformer G300a@letrec-transformer) (set! G4a03@G3008@letrec-helper G3008@letrec-helper) (set! G4a02@G3006@add-lexicals G3006@add-lexicals) (set! G4a01@G3004@add-lexical G3004@add-lexical) (set! G4a00@G3002@set-lexical-mutable! G3002@set-lexical-mutable!) (set! G49ff@G3000@lexical-mutable? G3000@lexical-mutable?) (set! G49fe@G2ffe@lexical-var G2ffe@lexical-var) (set! G49fd@G2ffc@scheme-stx G2ffc@scheme-stx) (set! G49fc@G2ffa@scheme-stx-hashtable G2ffa@scheme-stx-hashtable) (set! G49fb@G2ff8@parse-define-syntax G2ff8@parse-define-syntax) (set! G49fa@G2ff6@parse-define G2ff6@parse-define) (set! G49f9@G2e72@make-eval-transformer G2e72@make-eval-transformer) (set! G49f8@G2e70@variable-transformer-procedure G2e70@variable-transformer-procedure) (set! G49f7@G2e6e@variable-transformer? G2e6e@variable-transformer?) (set! G49f6@G2e6c@make-variable-transformer G2e6c@make-variable-transformer) (set! G49f5@G2e6a@sanitize-binding G2e6a@sanitize-binding) (set! G49f4@G2e53@syntax-type G2e53@syntax-type) (set! G49f3@G2e51@raise-unbound-error G2e51@raise-unbound-error) (set! G49f2@G2e4f@binding-value G2e4f@binding-value) (set! G49f1@G2e4d@binding-type G2e4d@binding-type) (set! G49f0@G2e4b@make-binding G2e4b@make-binding) (set! G49ef@G2e49@label->binding G2e49@label->binding) (set! G49ee@G2e47@id->real-label G2e47@id->real-label) (set! G49ed@G2e45@id->label G2e45@id->label) (set! G49ec@G2e43@same-marks*? G2e43@same-marks*?) (set! G49eb@G2e41@stx->datum G2e41@stx->datum) (set! G49ea@G2e3f@strip G2e3f@strip) (set! G49e9@G2e3d@strip-annotations G2e3d@strip-annotations) (set! G49e8@G2e3b@self-evaluating? G2e3b@self-evaluating?) (set! G49e7@G2e39@bound-id-member? G2e39@bound-id-member?) (set! G49e6@G2e37@distinct-bound-ids? G2e37@distinct-bound-ids?) (set! G49e5@G2e35@valid-bound-ids? G2e35@valid-bound-ids?) (set! G49e4@G2e33@free-id=? G2e33@free-id=?) (set! G49e3@G2e31@bound-id=? G2e31@bound-id=?) (set! G49e2@G2e2f@same-marks? G2e2f@same-marks?) (set! G49e1@G2e2d@id->sym G2e2d@id->sym) (set! G49e0@G2e2b@id? G2e2b@id?) (set! G49df@G2e29@syntax->list G2e29@syntax->list) (set! G49de@G2e27@syntax-cdr G2e27@syntax-cdr) (set! G49dd@G2e25@syntax-car G2e25@syntax-car) (set! G49dc@G2e23@syntax-list? G2e23@syntax-list?) (set! G49db@G2e21@syntax-null? G2e21@syntax-null?) (set! G49da@G2e1f@syntax-vector? G2e1f@syntax-vector?) (set! G49d9@G2e1d@syntax-pair? G2e1d@syntax-pair?) (set! G49d8@G2e1b@syntax-vector->list G2e1b@syntax-vector->list) (set! G49d7@G2e19@syntax-kind? G2e19@syntax-kind?) (set! G49d6@G2e17@add-subst G2e17@add-subst) (set! G49d5@G2e15@add-mark G2e15@add-mark) (set! G49d4@G2e13@mkstx G2e13@mkstx) (set! G49d3@G2e11@join-wraps G2e11@join-wraps) (set! G49d2@G2e0f@anti-mark? G2e0f@anti-mark?) (set! G49d1@G2e0d@anti-mark G2e0d@anti-mark) (set! G49d0@G2e0b@gen-mark G2e0b@gen-mark) (set! G49cf@G2e09@datum->stx G2e09@datum->stx) (set! G49ce@G2e07@rp G2e07@rp) (set! G49cd@G2e05@set-stx-ae*! G2e05@set-stx-ae*!) (set! G49cc@G2e03@set-stx-subst*! G2e03@set-stx-subst*!) (set! G49cb@G2e01@set-stx-mark*! G2e01@set-stx-mark*!) (set! G49ca@G2dff@set-stx-expr! G2dff@set-stx-expr!) (set! G49c9@G2dfd@stx-ae* G2dfd@stx-ae*) (set! G49c8@G2dfb@stx-subst* G2dfb@stx-subst*) (set! G49c7@G2df9@stx-mark* G2df9@stx-mark*) (set! G49c6@G2df7@stx-expr G2df7@stx-expr) (set! G49c5@G2df5@make-stx G2df5@make-stx) (set! G49c4@G2df3@stx? G2df3@stx?) (set! G49c3@G2dee@G2de6 G2dee@G2de6) (set! G49c2@G2dec@G2de7 G2dec@G2de7) (set! G49c1@G2dea@G2de5 G2dea@G2de5) (set! G49c0@G2de4@make-full-rib G2de4@make-full-rib) (set! G49bf@G2de2@unseal-rib! G2de2@unseal-rib!) (set! G49be@G2de0@seal-rib! G2de0@seal-rib!) (set! G49bd@G2dde@make-rib-map G2dde@make-rib-map) (set! G49bc@G2ddc@extend-rib/nc! G2ddc@extend-rib/nc!) (set! G49bb@G2dda@extend-rib! G2dda@extend-rib!) (set! G49ba@G2dd8@find-label G2dd8@find-label) (set! G49b9@G2dd6@make-cache-rib G2dd6@make-cache-rib) (set! G49b8@G2dd4@make-empty-rib G2dd4@make-empty-rib) (set! G49b7@G2dd2@set-rib-cache! G2dd2@set-rib-cache!) (set! G49b6@G2dd0@set-rib-sealed/freq! G2dd0@set-rib-sealed/freq!) (set! G49b5@G2dce@set-rib-label*! G2dce@set-rib-label*!) (set! G49b4@G2dcc@set-rib-mark**! G2dcc@set-rib-mark**!) (set! G49b3@G2dca@set-rib-sym*! G2dca@set-rib-sym*!) (set! G49b2@G2dc8@rib-cache G2dc8@rib-cache) (set! G49b1@G2dc6@rib-sealed/freq G2dc6@rib-sealed/freq) (set! G49b0@G2dc4@rib-label* G2dc4@rib-label*) (set! G49af@G2dc2@rib-mark** G2dc2@rib-mark**) (set! G49ae@G2dc0@rib-sym* G2dc0@rib-sym*) (set! G49ad@G2dbe@make-rib G2dbe@make-rib) (set! G49ac@G2dbc@rib? G2dbc@rib?) (set! G49ab@G2db7@G2daf G2db7@G2daf) (set! G49aa@G2db5@G2db0 G2db5@G2db0) (set! G49a9@G2db3@G2dae G2db3@G2dae) (set! G49a8@G2dad@gen-define-label G2dad@gen-define-label) (set! G49a7@G2dab@gen-define-label+loc G2dab@gen-define-label+loc) (set! G49a6@G2da9@gen-top-level-label G2da9@gen-top-level-label) (set! G49a5@G2da7@gen-label G2da7@gen-label) (set! G49a4@G2da5@gen-global G2da5@gen-global) (set! G49a3@G2da3@gen-lexical G2da3@gen-lexical) (set! G49a2@G2da1@top-marked? G2da1@top-marked?) (set! G49a1@G2d9f@top-mark* G2d9f@top-mark*) (set! G49a0@G2d9a@set-union G2d9a@set-union) (set! G499f@G2d98@set-cons G2d98@set-cons) (G2c16@G2aa1@current-library-expander G3141@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4ab6@G4ab1 G4ab8@G4ab3 G4aba@G4ab2 G4abf@&condition? G4ac1@make-&condition G4ac3@&condition-rtd G4ac5@&condition-rcd G4acd@G4ac8 G4acf@G4aca G4ad1@G4ac9 G4ad6@G4ac7 G4ad8@make-message-condition G4ada@G4ac6 G4adc@message-condition? G4ade@condition-message G4ae5@G4ae0 G4ae7@G4ae2 G4ae9@G4ae1 G4aee@G4adf G4af0@make-warning G4af2@warning? G4af9@G4af4 G4afb@G4af6 G4afd@G4af5 G4b02@G4af3 G4b04@make-serious-condition G4b06@serious-condition? G4b0d@G4b08 G4b0f@G4b0a G4b11@G4b09 G4b16@G4b07 G4b18@make-error G4b1a@error? G4b21@G4b1c G4b23@G4b1e G4b25@G4b1d G4b2a@G4b1b G4b2c@make-violation G4b2e@violation? G4b35@G4b30 G4b37@G4b32 G4b39@G4b31 G4b3e@G4b2f G4b40@make-assertion-violation G4b42@assertion-violation? G4b4a@G4b45 G4b4c@G4b47 G4b4e@G4b46 G4b53@G4b44 G4b55@make-irritants-condition G4b57@G4b43 G4b59@irritants-condition? G4b5b@condition-irritants G4b63@G4b5e G4b65@G4b60 G4b67@G4b5f G4b6c@G4b5d G4b6e@make-who-condition G4b70@G4b5c G4b72@who-condition? G4b74@condition-who G4b7b@G4b76 G4b7d@G4b78 G4b7f@G4b77 G4b84@G4b75 G4b86@make-non-continuable-violation G4b88@non-continuable-violation? G4b8f@G4b8a G4b91@G4b8c G4b93@G4b8b G4b98@G4b89 G4b9a@make-implementation-restriction-violation G4b9c@implementation-restriction-violation? G4ba3@G4b9e G4ba5@G4ba0 G4ba7@G4b9f G4bac@G4b9d G4bae@make-lexical-violation G4bb0@lexical-violation? G4bb9@G4bb4 G4bbb@G4bb6 G4bbd@G4bb5 G4bc2@G4bb3 G4bc4@make-syntax-violation G4bc6@G4bb1 G4bc8@G4bb2 G4bca@syntax-violation? G4bcc@syntax-violation-form G4bce@syntax-violation-subform G4bd5@G4bd0 G4bd7@G4bd2 G4bd9@G4bd1 G4bde@G4bcf G4be0@make-undefined-violation G4be2@undefined-violation?) (begin (set! G4ab6@G4ab1 (make-record-type-descriptor '&condition '#f 'G4ab4 '#f '#f '#())) (set! G4ab8@G4ab3 '#f) (set! G4aba@G4ab2 (make-record-constructor-descriptor G4ab6@G4ab1 '#f G4ab8@G4ab3)) (set! G4abf@&condition? (record-predicate G4ab6@G4ab1)) (set! G4ac1@make-&condition (record-constructor G4aba@G4ab2)) (set! G4ac3@&condition-rtd G4ab6@G4ab1) (set! G4ac5@&condition-rcd G4aba@G4ab2) (set! G4acd@G4ac8 (make-record-type-descriptor '&message G4ab6@G4ab1 'G4acb '#f '#f '#((immutable message)))) (set! G4acf@G4aca '#f) (set! G4ad1@G4ac9 (make-record-constructor-descriptor G4acd@G4ac8 G4aba@G4ab2 G4acf@G4aca)) (set! G4ad6@G4ac7 (record-predicate G4acd@G4ac8)) (set! G4ad8@make-message-condition (record-constructor G4ad1@G4ac9)) (set! G4ada@G4ac6 (record-accessor G4acd@G4ac8 '0)) (set! G4adc@message-condition? (condition-predicate G4acd@G4ac8)) (set! G4ade@condition-message (condition-accessor G4acd@G4ac8 G4ada@G4ac6)) (set! G4ae5@G4ae0 (make-record-type-descriptor '&warning G4ab6@G4ab1 'G4ae3 '#f '#f '#())) (set! G4ae7@G4ae2 '#f) (set! G4ae9@G4ae1 (make-record-constructor-descriptor G4ae5@G4ae0 G4aba@G4ab2 G4ae7@G4ae2)) (set! G4aee@G4adf (record-predicate G4ae5@G4ae0)) (set! G4af0@make-warning (record-constructor G4ae9@G4ae1)) (set! G4af2@warning? (condition-predicate G4ae5@G4ae0)) (set! G4af9@G4af4 (make-record-type-descriptor '&serious G4ab6@G4ab1 'G4af7 '#f '#f '#())) (set! G4afb@G4af6 '#f) (set! G4afd@G4af5 (make-record-constructor-descriptor G4af9@G4af4 G4aba@G4ab2 G4afb@G4af6)) (set! G4b02@G4af3 (record-predicate G4af9@G4af4)) (set! G4b04@make-serious-condition (record-constructor G4afd@G4af5)) (set! G4b06@serious-condition? (condition-predicate G4af9@G4af4)) (set! G4b0d@G4b08 (make-record-type-descriptor '&error G4af9@G4af4 'G4b0b '#f '#f '#())) (set! G4b0f@G4b0a '#f) (set! G4b11@G4b09 (make-record-constructor-descriptor G4b0d@G4b08 G4afd@G4af5 G4b0f@G4b0a)) (set! G4b16@G4b07 (record-predicate G4b0d@G4b08)) (set! G4b18@make-error (record-constructor G4b11@G4b09)) (set! G4b1a@error? (condition-predicate G4b0d@G4b08)) (set! G4b21@G4b1c (make-record-type-descriptor '&violation G4af9@G4af4 'G4b1f '#f '#f '#())) (set! G4b23@G4b1e '#f) (set! G4b25@G4b1d (make-record-constructor-descriptor G4b21@G4b1c G4afd@G4af5 G4b23@G4b1e)) (set! G4b2a@G4b1b (record-predicate G4b21@G4b1c)) (set! G4b2c@make-violation (record-constructor G4b25@G4b1d)) (set! G4b2e@violation? (condition-predicate G4b21@G4b1c)) (set! G4b35@G4b30 (make-record-type-descriptor '&assertion G4b21@G4b1c 'G4b33 '#f '#f '#())) (set! G4b37@G4b32 '#f) (set! G4b39@G4b31 (make-record-constructor-descriptor G4b35@G4b30 G4b25@G4b1d G4b37@G4b32)) (set! G4b3e@G4b2f (record-predicate G4b35@G4b30)) (set! G4b40@make-assertion-violation (record-constructor G4b39@G4b31)) (set! G4b42@assertion-violation? (condition-predicate G4b35@G4b30)) (set! G4b4a@G4b45 (make-record-type-descriptor '&irritants G4ab6@G4ab1 'G4b48 '#f '#f '#((immutable irritants)))) (set! G4b4c@G4b47 '#f) (set! G4b4e@G4b46 (make-record-constructor-descriptor G4b4a@G4b45 G4aba@G4ab2 G4b4c@G4b47)) (set! G4b53@G4b44 (record-predicate G4b4a@G4b45)) (set! G4b55@make-irritants-condition (record-constructor G4b4e@G4b46)) (set! G4b57@G4b43 (record-accessor G4b4a@G4b45 '0)) (set! G4b59@irritants-condition? (condition-predicate G4b4a@G4b45)) (set! G4b5b@condition-irritants (condition-accessor G4b4a@G4b45 G4b57@G4b43)) (set! G4b63@G4b5e (make-record-type-descriptor '&who G4ab6@G4ab1 'G4b61 '#f '#f '#((immutable who)))) (set! G4b65@G4b60 '#f) (set! G4b67@G4b5f (make-record-constructor-descriptor G4b63@G4b5e G4aba@G4ab2 G4b65@G4b60)) (set! G4b6c@G4b5d (record-predicate G4b63@G4b5e)) (set! G4b6e@make-who-condition (record-constructor G4b67@G4b5f)) (set! G4b70@G4b5c (record-accessor G4b63@G4b5e '0)) (set! G4b72@who-condition? (condition-predicate G4b63@G4b5e)) (set! G4b74@condition-who (condition-accessor G4b63@G4b5e G4b70@G4b5c)) (set! G4b7b@G4b76 (make-record-type-descriptor '&non-continuable G4b21@G4b1c 'G4b79 '#f '#f '#())) (set! G4b7d@G4b78 '#f) (set! G4b7f@G4b77 (make-record-constructor-descriptor G4b7b@G4b76 G4b25@G4b1d G4b7d@G4b78)) (set! G4b84@G4b75 (record-predicate G4b7b@G4b76)) (set! G4b86@make-non-continuable-violation (record-constructor G4b7f@G4b77)) (set! G4b88@non-continuable-violation? (condition-predicate G4b7b@G4b76)) (set! G4b8f@G4b8a (make-record-type-descriptor '&implementation-restriction G4b21@G4b1c 'G4b8d '#f '#f '#())) (set! G4b91@G4b8c '#f) (set! G4b93@G4b8b (make-record-constructor-descriptor G4b8f@G4b8a G4b25@G4b1d G4b91@G4b8c)) (set! G4b98@G4b89 (record-predicate G4b8f@G4b8a)) (set! G4b9a@make-implementation-restriction-violation (record-constructor G4b93@G4b8b)) (set! G4b9c@implementation-restriction-violation? (condition-predicate G4b8f@G4b8a)) (set! G4ba3@G4b9e (make-record-type-descriptor '&lexical G4b21@G4b1c 'G4ba1 '#f '#f '#())) (set! G4ba5@G4ba0 '#f) (set! G4ba7@G4b9f (make-record-constructor-descriptor G4ba3@G4b9e G4b25@G4b1d G4ba5@G4ba0)) (set! G4bac@G4b9d (record-predicate G4ba3@G4b9e)) (set! G4bae@make-lexical-violation (record-constructor G4ba7@G4b9f)) (set! G4bb0@lexical-violation? (condition-predicate G4ba3@G4b9e)) (set! G4bb9@G4bb4 (make-record-type-descriptor '&syntax G4b21@G4b1c 'G4bb7 '#f '#f '#((immutable form) (immutable subform)))) (set! G4bbb@G4bb6 '#f) (set! G4bbd@G4bb5 (make-record-constructor-descriptor G4bb9@G4bb4 G4b25@G4b1d G4bbb@G4bb6)) (set! G4bc2@G4bb3 (record-predicate G4bb9@G4bb4)) (set! G4bc4@make-syntax-violation (record-constructor G4bbd@G4bb5)) (set! G4bc6@G4bb1 (record-accessor G4bb9@G4bb4 '0)) (set! G4bc8@G4bb2 (record-accessor G4bb9@G4bb4 '1)) (set! G4bca@syntax-violation? (condition-predicate G4bb9@G4bb4)) (set! G4bcc@syntax-violation-form (condition-accessor G4bb9@G4bb4 G4bc6@G4bb1)) (set! G4bce@syntax-violation-subform (condition-accessor G4bb9@G4bb4 G4bc8@G4bb2)) (set! G4bd5@G4bd0 (make-record-type-descriptor '&undefined G4b21@G4b1c 'G4bd3 '#f '#f '#())) (set! G4bd7@G4bd2 '#f) (set! G4bd9@G4bd1 (make-record-constructor-descriptor G4bd5@G4bd0 G4b25@G4b1d G4bd7@G4bd2)) (set! G4bde@G4bcf (record-predicate G4bd5@G4bd0)) (set! G4be0@make-undefined-violation (record-constructor G4bd9@G4bd1)) (set! G4be2@undefined-violation? (condition-predicate G4bd5@G4bd0)) (begin (set! G4c41@G4be2@undefined-violation? G4be2@undefined-violation?) (set! G4c40@G4be0@make-undefined-violation G4be0@make-undefined-violation) (set! G4c3f@G4bde@G4bcf G4bde@G4bcf) (set! G4c3e@G4bd9@G4bd1 G4bd9@G4bd1) (set! G4c3d@G4bd7@G4bd2 G4bd7@G4bd2) (set! G4c3c@G4bd5@G4bd0 G4bd5@G4bd0) (set! G4c3b@G4bce@syntax-violation-subform G4bce@syntax-violation-subform) (set! G4c3a@G4bcc@syntax-violation-form G4bcc@syntax-violation-form) (set! G4c39@G4bca@syntax-violation? G4bca@syntax-violation?) (set! G4c38@G4bc8@G4bb2 G4bc8@G4bb2) (set! G4c37@G4bc6@G4bb1 G4bc6@G4bb1) (set! G4c36@G4bc4@make-syntax-violation G4bc4@make-syntax-violation) (set! G4c35@G4bc2@G4bb3 G4bc2@G4bb3) (set! G4c34@G4bbd@G4bb5 G4bbd@G4bb5) (set! G4c33@G4bbb@G4bb6 G4bbb@G4bb6) (set! G4c32@G4bb9@G4bb4 G4bb9@G4bb4) (set! G4c31@G4bb0@lexical-violation? G4bb0@lexical-violation?) (set! G4c30@G4bae@make-lexical-violation G4bae@make-lexical-violation) (set! G4c2f@G4bac@G4b9d G4bac@G4b9d) (set! G4c2e@G4ba7@G4b9f G4ba7@G4b9f) (set! G4c2d@G4ba5@G4ba0 G4ba5@G4ba0) (set! G4c2c@G4ba3@G4b9e G4ba3@G4b9e) (set! G4c2b@G4b9c@implementation-restriction-violation? G4b9c@implementation-restriction-violation?) (set! G4c2a@G4b9a@make-implementation-restriction-violation G4b9a@make-implementation-restriction-violation) (set! G4c29@G4b98@G4b89 G4b98@G4b89) (set! G4c28@G4b93@G4b8b G4b93@G4b8b) (set! G4c27@G4b91@G4b8c G4b91@G4b8c) (set! G4c26@G4b8f@G4b8a G4b8f@G4b8a) (set! G4c25@G4b88@non-continuable-violation? G4b88@non-continuable-violation?) (set! G4c24@G4b86@make-non-continuable-violation G4b86@make-non-continuable-violation) (set! G4c23@G4b84@G4b75 G4b84@G4b75) (set! G4c22@G4b7f@G4b77 G4b7f@G4b77) (set! G4c21@G4b7d@G4b78 G4b7d@G4b78) (set! G4c20@G4b7b@G4b76 G4b7b@G4b76) (set! G4c1f@G4b74@condition-who G4b74@condition-who) (set! G4c1e@G4b72@who-condition? G4b72@who-condition?) (set! G4c1d@G4b70@G4b5c G4b70@G4b5c) (set! G4c1c@G4b6e@make-who-condition G4b6e@make-who-condition) (set! G4c1b@G4b6c@G4b5d G4b6c@G4b5d) (set! G4c1a@G4b67@G4b5f G4b67@G4b5f) (set! G4c19@G4b65@G4b60 G4b65@G4b60) (set! G4c18@G4b63@G4b5e G4b63@G4b5e) (set! G4c17@G4b5b@condition-irritants G4b5b@condition-irritants) (set! G4c16@G4b59@irritants-condition? G4b59@irritants-condition?) (set! G4c15@G4b57@G4b43 G4b57@G4b43) (set! G4c14@G4b55@make-irritants-condition G4b55@make-irritants-condition) (set! G4c13@G4b53@G4b44 G4b53@G4b44) (set! G4c12@G4b4e@G4b46 G4b4e@G4b46) (set! G4c11@G4b4c@G4b47 G4b4c@G4b47) (set! G4c10@G4b4a@G4b45 G4b4a@G4b45) (set! G4c0f@G4b42@assertion-violation? G4b42@assertion-violation?) (set! G4c0e@G4b40@make-assertion-violation G4b40@make-assertion-violation) (set! G4c0d@G4b3e@G4b2f G4b3e@G4b2f) (set! G4c0c@G4b39@G4b31 G4b39@G4b31) (set! G4c0b@G4b37@G4b32 G4b37@G4b32) (set! G4c0a@G4b35@G4b30 G4b35@G4b30) (set! G4c09@G4b2e@violation? G4b2e@violation?) (set! G4c08@G4b2c@make-violation G4b2c@make-violation) (set! G4c07@G4b2a@G4b1b G4b2a@G4b1b) (set! G4c06@G4b25@G4b1d G4b25@G4b1d) (set! G4c05@G4b23@G4b1e G4b23@G4b1e) (set! G4c04@G4b21@G4b1c G4b21@G4b1c) (set! G4c03@G4b1a@error? G4b1a@error?) (set! G4c02@G4b18@make-error G4b18@make-error) (set! G4c01@G4b16@G4b07 G4b16@G4b07) (set! G4c00@G4b11@G4b09 G4b11@G4b09) (set! G4bff@G4b0f@G4b0a G4b0f@G4b0a) (set! G4bfe@G4b0d@G4b08 G4b0d@G4b08) (set! G4bfd@G4b06@serious-condition? G4b06@serious-condition?) (set! G4bfc@G4b04@make-serious-condition G4b04@make-serious-condition) (set! G4bfb@G4b02@G4af3 G4b02@G4af3) (set! G4bfa@G4afd@G4af5 G4afd@G4af5) (set! G4bf9@G4afb@G4af6 G4afb@G4af6) (set! G4bf8@G4af9@G4af4 G4af9@G4af4) (set! G4bf7@G4af2@warning? G4af2@warning?) (set! G4bf6@G4af0@make-warning G4af0@make-warning) (set! G4bf5@G4aee@G4adf G4aee@G4adf) (set! G4bf4@G4ae9@G4ae1 G4ae9@G4ae1) (set! G4bf3@G4ae7@G4ae2 G4ae7@G4ae2) (set! G4bf2@G4ae5@G4ae0 G4ae5@G4ae0) (set! G4bf1@G4ade@condition-message G4ade@condition-message) (set! G4bf0@G4adc@message-condition? G4adc@message-condition?) (set! G4bef@G4ada@G4ac6 G4ada@G4ac6) (set! G4bee@G4ad8@make-message-condition G4ad8@make-message-condition) (set! G4bed@G4ad6@G4ac7 G4ad6@G4ac7) (set! G4bec@G4ad1@G4ac9 G4ad1@G4ac9) (set! G4beb@G4acf@G4aca G4acf@G4aca) (set! G4bea@G4acd@G4ac8 G4acd@G4ac8) (set! G4be9@G4ac5@&condition-rcd G4ac5@&condition-rcd) (set! G4be8@G4ac3@&condition-rtd G4ac3@&condition-rtd) (set! G4be7@G4ac1@make-&condition G4ac1@make-&condition) (set! G4be6@G4abf@&condition? G4abf@&condition?) (set! G4be5@G4aba@G4ab2 G4aba@G4ab2) (set! G4be4@G4ab8@G4ab3 G4ab8@G4ab3) (set! G4be3@G4ab6@G4ab1 G4ab6@G4ab1)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4c49@G4c44 G4c4b@G4c46 G4c4d@G4c45 G4c52@G4c43 G4c54@make-i/o-error G4c56@i/o-error? G4c5d@G4c58 G4c5f@G4c5a G4c61@G4c59 G4c66@G4c57 G4c68@make-i/o-read-error G4c6a@i/o-read-error? G4c71@G4c6c G4c73@G4c6e G4c75@G4c6d G4c7a@G4c6b G4c7c@make-i/o-write-error G4c7e@i/o-write-error? G4c86@G4c81 G4c88@G4c83 G4c8a@G4c82 G4c8f@G4c80 G4c91@make-i/o-invalid-position-error G4c93@G4c7f G4c95@i/o-invalid-position-error? G4c97@i/o-error-position G4c9f@G4c9a G4ca1@G4c9c G4ca3@G4c9b G4ca8@G4c99 G4caa@make-i/o-filename-error G4cac@G4c98 G4cae@i/o-filename-error? G4cb0@i/o-error-filename G4cb7@G4cb2 G4cb9@G4cb4 G4cbb@G4cb3 G4cc0@G4cb1 G4cc2@make-i/o-file-protection-error G4cc4@i/o-file-protection-error? G4ccb@G4cc6 G4ccd@G4cc8 G4ccf@G4cc7 G4cd4@G4cc5 G4cd6@make-i/o-file-is-read-only-error G4cd8@i/o-file-is-read-only-error? G4cdf@G4cda G4ce1@G4cdc G4ce3@G4cdb G4ce8@G4cd9 G4cea@make-i/o-file-already-exists-error G4cec@i/o-file-already-exists-error? G4cf3@G4cee G4cf5@G4cf0 G4cf7@G4cef G4cfc@G4ced G4cfe@make-i/o-file-does-not-exist-error G4d00@i/o-file-does-not-exist-error? G4d08@G4d03 G4d0a@G4d05 G4d0c@G4d04 G4d11@G4d02 G4d13@make-i/o-port-error G4d15@G4d01 G4d17@i/o-port-error? G4d19@i/o-error-port G4d20@G4d1b G4d22@G4d1d G4d24@G4d1c G4d29@G4d1a G4d2b@make-i/o-decoding-error G4d2d@i/o-decoding-error? G4d35@G4d30 G4d37@G4d32 G4d39@G4d31 G4d3e@G4d2f G4d40@make-i/o-encoding-error G4d42@G4d2e G4d44@i/o-encoding-error? G4d46@i/o-encoding-error-char) (begin (set! G4c49@G4c44 (make-record-type-descriptor '&i/o &error-rtd 'G4c47 '#f '#f '#())) (set! G4c4b@G4c46 '#f) (set! G4c4d@G4c45 (make-record-constructor-descriptor G4c49@G4c44 &error-rcd G4c4b@G4c46)) (set! G4c52@G4c43 (record-predicate G4c49@G4c44)) (set! G4c54@make-i/o-error (record-constructor G4c4d@G4c45)) (set! G4c56@i/o-error? (condition-predicate G4c49@G4c44)) (set! G4c5d@G4c58 (make-record-type-descriptor '&i/o-read G4c49@G4c44 'G4c5b '#f '#f '#())) (set! G4c5f@G4c5a '#f) (set! G4c61@G4c59 (make-record-constructor-descriptor G4c5d@G4c58 G4c4d@G4c45 G4c5f@G4c5a)) (set! G4c66@G4c57 (record-predicate G4c5d@G4c58)) (set! G4c68@make-i/o-read-error (record-constructor G4c61@G4c59)) (set! G4c6a@i/o-read-error? (condition-predicate G4c5d@G4c58)) (set! G4c71@G4c6c (make-record-type-descriptor '&i/o-write G4c49@G4c44 'G4c6f '#f '#f '#())) (set! G4c73@G4c6e '#f) (set! G4c75@G4c6d (make-record-constructor-descriptor G4c71@G4c6c G4c4d@G4c45 G4c73@G4c6e)) (set! G4c7a@G4c6b (record-predicate G4c71@G4c6c)) (set! G4c7c@make-i/o-write-error (record-constructor G4c75@G4c6d)) (set! G4c7e@i/o-write-error? (condition-predicate G4c71@G4c6c)) (set! G4c86@G4c81 (make-record-type-descriptor '&i/o-invalid-position G4c49@G4c44 'G4c84 '#f '#f '#((immutable position)))) (set! G4c88@G4c83 '#f) (set! G4c8a@G4c82 (make-record-constructor-descriptor G4c86@G4c81 G4c4d@G4c45 G4c88@G4c83)) (set! G4c8f@G4c80 (record-predicate G4c86@G4c81)) (set! G4c91@make-i/o-invalid-position-error (record-constructor G4c8a@G4c82)) (set! G4c93@G4c7f (record-accessor G4c86@G4c81 '0)) (set! G4c95@i/o-invalid-position-error? (condition-predicate G4c86@G4c81)) (set! G4c97@i/o-error-position (condition-accessor G4c86@G4c81 G4c93@G4c7f)) (set! G4c9f@G4c9a (make-record-type-descriptor '&i/o-filename G4c49@G4c44 'G4c9d '#f '#f '#((immutable filename)))) (set! G4ca1@G4c9c '#f) (set! G4ca3@G4c9b (make-record-constructor-descriptor G4c9f@G4c9a G4c4d@G4c45 G4ca1@G4c9c)) (set! G4ca8@G4c99 (record-predicate G4c9f@G4c9a)) (set! G4caa@make-i/o-filename-error (record-constructor G4ca3@G4c9b)) (set! G4cac@G4c98 (record-accessor G4c9f@G4c9a '0)) (set! G4cae@i/o-filename-error? (condition-predicate G4c9f@G4c9a)) (set! G4cb0@i/o-error-filename (condition-accessor G4c9f@G4c9a G4cac@G4c98)) (set! G4cb7@G4cb2 (make-record-type-descriptor '&i/o-file-protection G4c49@G4c44 'G4cb5 '#f '#f '#())) (set! G4cb9@G4cb4 '#f) (set! G4cbb@G4cb3 (make-record-constructor-descriptor G4cb7@G4cb2 G4c4d@G4c45 G4cb9@G4cb4)) (set! G4cc0@G4cb1 (record-predicate G4cb7@G4cb2)) (set! G4cc2@make-i/o-file-protection-error (record-constructor G4cbb@G4cb3)) (set! G4cc4@i/o-file-protection-error? (condition-predicate G4cb7@G4cb2)) (set! G4ccb@G4cc6 (make-record-type-descriptor '&i/o-file-is-read-only G4cb7@G4cb2 'G4cc9 '#f '#f '#())) (set! G4ccd@G4cc8 '#f) (set! G4ccf@G4cc7 (make-record-constructor-descriptor G4ccb@G4cc6 G4cbb@G4cb3 G4ccd@G4cc8)) (set! G4cd4@G4cc5 (record-predicate G4ccb@G4cc6)) (set! G4cd6@make-i/o-file-is-read-only-error (record-constructor G4ccf@G4cc7)) (set! G4cd8@i/o-file-is-read-only-error? (condition-predicate G4ccb@G4cc6)) (set! G4cdf@G4cda (make-record-type-descriptor '&i/o-file-already-exists G4c9f@G4c9a 'G4cdd '#f '#f '#())) (set! G4ce1@G4cdc '#f) (set! G4ce3@G4cdb (make-record-constructor-descriptor G4cdf@G4cda G4ca3@G4c9b G4ce1@G4cdc)) (set! G4ce8@G4cd9 (record-predicate G4cdf@G4cda)) (set! G4cea@make-i/o-file-already-exists-error (record-constructor G4ce3@G4cdb)) (set! G4cec@i/o-file-already-exists-error? (condition-predicate G4cdf@G4cda)) (set! G4cf3@G4cee (make-record-type-descriptor '&i/o-file-does-not-exist G4c9f@G4c9a 'G4cf1 '#f '#f '#())) (set! G4cf5@G4cf0 '#f) (set! G4cf7@G4cef (make-record-constructor-descriptor G4cf3@G4cee G4ca3@G4c9b G4cf5@G4cf0)) (set! G4cfc@G4ced (record-predicate G4cf3@G4cee)) (set! G4cfe@make-i/o-file-does-not-exist-error (record-constructor G4cf7@G4cef)) (set! G4d00@i/o-file-does-not-exist-error? (condition-predicate G4cf3@G4cee)) (set! G4d08@G4d03 (make-record-type-descriptor '&i/o-port G4c49@G4c44 'G4d06 '#f '#f '#((immutable port)))) (set! G4d0a@G4d05 '#f) (set! G4d0c@G4d04 (make-record-constructor-descriptor G4d08@G4d03 G4c4d@G4c45 G4d0a@G4d05)) (set! G4d11@G4d02 (record-predicate G4d08@G4d03)) (set! G4d13@make-i/o-port-error (record-constructor G4d0c@G4d04)) (set! G4d15@G4d01 (record-accessor G4d08@G4d03 '0)) (set! G4d17@i/o-port-error? (condition-predicate G4d08@G4d03)) (set! G4d19@i/o-error-port (condition-accessor G4d08@G4d03 G4d15@G4d01)) (set! G4d20@G4d1b (make-record-type-descriptor '&i/o-decoding G4d08@G4d03 'G4d1e '#f '#f '#())) (set! G4d22@G4d1d '#f) (set! G4d24@G4d1c (make-record-constructor-descriptor G4d20@G4d1b G4d0c@G4d04 G4d22@G4d1d)) (set! G4d29@G4d1a (record-predicate G4d20@G4d1b)) (set! G4d2b@make-i/o-decoding-error (record-constructor G4d24@G4d1c)) (set! G4d2d@i/o-decoding-error? (condition-predicate G4d20@G4d1b)) (set! G4d35@G4d30 (make-record-type-descriptor '&i/o-encoding G4d08@G4d03 'G4d33 '#f '#f '#((immutable char)))) (set! G4d37@G4d32 '#f) (set! G4d39@G4d31 (make-record-constructor-descriptor G4d35@G4d30 G4d0c@G4d04 G4d37@G4d32)) (set! G4d3e@G4d2f (record-predicate G4d35@G4d30)) (set! G4d40@make-i/o-encoding-error (record-constructor G4d39@G4d31)) (set! G4d42@G4d2e (record-accessor G4d35@G4d30 '0)) (set! G4d44@i/o-encoding-error? (condition-predicate G4d35@G4d30)) (set! G4d46@i/o-encoding-error-char (condition-accessor G4d35@G4d30 G4d42@G4d2e)) (begin (set! G4d96@G4d46@i/o-encoding-error-char G4d46@i/o-encoding-error-char) (set! G4d95@G4d44@i/o-encoding-error? G4d44@i/o-encoding-error?) (set! G4d94@G4d42@G4d2e G4d42@G4d2e) (set! G4d93@G4d40@make-i/o-encoding-error G4d40@make-i/o-encoding-error) (set! G4d92@G4d3e@G4d2f G4d3e@G4d2f) (set! G4d91@G4d39@G4d31 G4d39@G4d31) (set! G4d90@G4d37@G4d32 G4d37@G4d32) (set! G4d8f@G4d35@G4d30 G4d35@G4d30) (set! G4d8e@G4d2d@i/o-decoding-error? G4d2d@i/o-decoding-error?) (set! G4d8d@G4d2b@make-i/o-decoding-error G4d2b@make-i/o-decoding-error) (set! G4d8c@G4d29@G4d1a G4d29@G4d1a) (set! G4d8b@G4d24@G4d1c G4d24@G4d1c) (set! G4d8a@G4d22@G4d1d G4d22@G4d1d) (set! G4d89@G4d20@G4d1b G4d20@G4d1b) (set! G4d88@G4d19@i/o-error-port G4d19@i/o-error-port) (set! G4d87@G4d17@i/o-port-error? G4d17@i/o-port-error?) (set! G4d86@G4d15@G4d01 G4d15@G4d01) (set! G4d85@G4d13@make-i/o-port-error G4d13@make-i/o-port-error) (set! G4d84@G4d11@G4d02 G4d11@G4d02) (set! G4d83@G4d0c@G4d04 G4d0c@G4d04) (set! G4d82@G4d0a@G4d05 G4d0a@G4d05) (set! G4d81@G4d08@G4d03 G4d08@G4d03) (set! G4d80@G4d00@i/o-file-does-not-exist-error? G4d00@i/o-file-does-not-exist-error?) (set! G4d7f@G4cfe@make-i/o-file-does-not-exist-error G4cfe@make-i/o-file-does-not-exist-error) (set! G4d7e@G4cfc@G4ced G4cfc@G4ced) (set! G4d7d@G4cf7@G4cef G4cf7@G4cef) (set! G4d7c@G4cf5@G4cf0 G4cf5@G4cf0) (set! G4d7b@G4cf3@G4cee G4cf3@G4cee) (set! G4d7a@G4cec@i/o-file-already-exists-error? G4cec@i/o-file-already-exists-error?) (set! G4d79@G4cea@make-i/o-file-already-exists-error G4cea@make-i/o-file-already-exists-error) (set! G4d78@G4ce8@G4cd9 G4ce8@G4cd9) (set! G4d77@G4ce3@G4cdb G4ce3@G4cdb) (set! G4d76@G4ce1@G4cdc G4ce1@G4cdc) (set! G4d75@G4cdf@G4cda G4cdf@G4cda) (set! G4d74@G4cd8@i/o-file-is-read-only-error? G4cd8@i/o-file-is-read-only-error?) (set! G4d73@G4cd6@make-i/o-file-is-read-only-error G4cd6@make-i/o-file-is-read-only-error) (set! G4d72@G4cd4@G4cc5 G4cd4@G4cc5) (set! G4d71@G4ccf@G4cc7 G4ccf@G4cc7) (set! G4d70@G4ccd@G4cc8 G4ccd@G4cc8) (set! G4d6f@G4ccb@G4cc6 G4ccb@G4cc6) (set! G4d6e@G4cc4@i/o-file-protection-error? G4cc4@i/o-file-protection-error?) (set! G4d6d@G4cc2@make-i/o-file-protection-error G4cc2@make-i/o-file-protection-error) (set! G4d6c@G4cc0@G4cb1 G4cc0@G4cb1) (set! G4d6b@G4cbb@G4cb3 G4cbb@G4cb3) (set! G4d6a@G4cb9@G4cb4 G4cb9@G4cb4) (set! G4d69@G4cb7@G4cb2 G4cb7@G4cb2) (set! G4d68@G4cb0@i/o-error-filename G4cb0@i/o-error-filename) (set! G4d67@G4cae@i/o-filename-error? G4cae@i/o-filename-error?) (set! G4d66@G4cac@G4c98 G4cac@G4c98) (set! G4d65@G4caa@make-i/o-filename-error G4caa@make-i/o-filename-error) (set! G4d64@G4ca8@G4c99 G4ca8@G4c99) (set! G4d63@G4ca3@G4c9b G4ca3@G4c9b) (set! G4d62@G4ca1@G4c9c G4ca1@G4c9c) (set! G4d61@G4c9f@G4c9a G4c9f@G4c9a) (set! G4d60@G4c97@i/o-error-position G4c97@i/o-error-position) (set! G4d5f@G4c95@i/o-invalid-position-error? G4c95@i/o-invalid-position-error?) (set! G4d5e@G4c93@G4c7f G4c93@G4c7f) (set! G4d5d@G4c91@make-i/o-invalid-position-error G4c91@make-i/o-invalid-position-error) (set! G4d5c@G4c8f@G4c80 G4c8f@G4c80) (set! G4d5b@G4c8a@G4c82 G4c8a@G4c82) (set! G4d5a@G4c88@G4c83 G4c88@G4c83) (set! G4d59@G4c86@G4c81 G4c86@G4c81) (set! G4d58@G4c7e@i/o-write-error? G4c7e@i/o-write-error?) (set! G4d57@G4c7c@make-i/o-write-error G4c7c@make-i/o-write-error) (set! G4d56@G4c7a@G4c6b G4c7a@G4c6b) (set! G4d55@G4c75@G4c6d G4c75@G4c6d) (set! G4d54@G4c73@G4c6e G4c73@G4c6e) (set! G4d53@G4c71@G4c6c G4c71@G4c6c) (set! G4d52@G4c6a@i/o-read-error? G4c6a@i/o-read-error?) (set! G4d51@G4c68@make-i/o-read-error G4c68@make-i/o-read-error) (set! G4d50@G4c66@G4c57 G4c66@G4c57) (set! G4d4f@G4c61@G4c59 G4c61@G4c59) (set! G4d4e@G4c5f@G4c5a G4c5f@G4c5a) (set! G4d4d@G4c5d@G4c58 G4c5d@G4c58) (set! G4d4c@G4c56@i/o-error? G4c56@i/o-error?) (set! G4d4b@G4c54@make-i/o-error G4c54@make-i/o-error) (set! G4d4a@G4c52@G4c43 G4c52@G4c43) (set! G4d49@G4c4d@G4c45 G4c4d@G4c45) (set! G4d48@G4c4b@G4c46 G4c4b@G4c46) (set! G4d47@G4c49@G4c44 G4c49@G4c44)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G29de@G2983@current-primitive-locations (lambda (G5168@x) ((lambda (G516a@t) (if G516a@t (cdr G516a@t) '#f)) (assq G5168@x '((syntax-error . G4aa2@G315b@syntax-error) (syntax-dispatch . G4a36@G306e@syntax-dispatch) (load . G4e33@G4da5@load) (interaction-environment . G4aab@G316d@interaction-environment) (make-variable-transformer . G49f6@G2e6c@make-variable-transformer) (identifier? . G4aa6@G3163@identifier?) (generate-temporaries . G4a9b@G314d@generate-temporaries) (free-identifier=? . G4a9c@G314f@free-identifier=?) (syntax->datum . G4aa8@G3167@syntax->datum) (datum->syntax . G4aa7@G3165@datum->syntax) (bound-identifier=? . G4a9d@G3151@bound-identifier=?) (make-i/o-write-error . G4d57@G4c7c@make-i/o-write-error) (make-i/o-read-error . G4d51@G4c68@make-i/o-read-error) (make-i/o-port-error . G4d85@G4d13@make-i/o-port-error) (make-i/o-invalid-position-error . G4d5d@G4c91@make-i/o-invalid-position-error) (make-i/o-filename-error . G4d65@G4caa@make-i/o-filename-error) (make-i/o-file-protection-error . G4d6d@G4cc2@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4d73@G4cd6@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4d7f@G4cfe@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4d79@G4cea@make-i/o-file-already-exists-error) (make-i/o-error . G4d4b@G4c54@make-i/o-error) (make-i/o-encoding-error . G4d93@G4d40@make-i/o-encoding-error) (make-i/o-decoding-error . G4d8d@G4d2b@make-i/o-decoding-error) (i/o-write-error? . G4d58@G4c7e@i/o-write-error?) (i/o-read-error? . G4d52@G4c6a@i/o-read-error?) (i/o-port-error? . G4d87@G4d17@i/o-port-error?) (i/o-invalid-position-error? . G4d5f@G4c95@i/o-invalid-position-error?) (i/o-filename-error? . G4d67@G4cae@i/o-filename-error?) (i/o-file-protection-error? . G4d6e@G4cc4@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4d74@G4cd8@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4d80@G4d00@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4d7a@G4cec@i/o-file-already-exists-error?) (i/o-error? . G4d4c@G4c56@i/o-error?) (i/o-error-port . G4d88@G4d19@i/o-error-port) (i/o-error-filename . G4d68@G4cb0@i/o-error-filename) (i/o-encoding-error? . G4d95@G4d44@i/o-encoding-error?) (i/o-encoding-error-char . G4d96@G4d46@i/o-encoding-error-char) (i/o-decoding-error? . G4d8e@G4d2d@i/o-decoding-error?) (scheme-report-environment . G4a92@G313b@scheme-report-environment) (null-environment . G4a91@G3139@null-environment) (command-line . G4e30@G4d9f@command-line) (eval . G4a94@G313f@eval) (environment . G4a90@G3137@environment) (who-condition? . G4c1e@G4b72@who-condition?) (warning? . G4bf7@G4af2@warning?) (violation? . G4c09@G4b2e@violation?) (undefined-violation? . G4c41@G4be2@undefined-violation?) (syntax-violation? . G4c39@G4bca@syntax-violation?) (syntax-violation-subform . G4c3b@G4bce@syntax-violation-subform) (syntax-violation-form . G4c3a@G4bcc@syntax-violation-form) (syntax-violation . G4aa5@G3161@syntax-violation) (serious-condition? . G4bfd@G4b06@serious-condition?) (non-continuable-violation? . G4c25@G4b88@non-continuable-violation?) (message-condition? . G4bf0@G4adc@message-condition?) (make-who-condition . G4c1c@G4b6e@make-who-condition) (make-warning . G4bf6@G4af0@make-warning) (make-violation . G4c08@G4b2c@make-violation) (make-undefined-violation . G4c40@G4be0@make-undefined-violation) (make-syntax-violation . G4c36@G4bc4@make-syntax-violation) (make-serious-condition . G4bfc@G4b04@make-serious-condition) (make-non-continuable-violation . G4c24@G4b86@make-non-continuable-violation) (make-message-condition . G4bee@G4ad8@make-message-condition) (make-lexical-violation . G4c30@G4bae@make-lexical-violation) (make-irritants-condition . G4c14@G4b55@make-irritants-condition) (make-implementation-restriction-violation . G4c2a@G4b9a@make-implementation-restriction-violation) (make-error . G4c02@G4b18@make-error) (make-assertion-violation . G4c0e@G4b40@make-assertion-violation) (lexical-violation? . G4c31@G4bb0@lexical-violation?) (irritants-condition? . G4c16@G4b59@irritants-condition?) (implementation-restriction-violation? . G4c2b@G4b9c@implementation-restriction-violation?) (error? . G4c03@G4b1a@error?) (condition-who . G4c1f@G4b74@condition-who) (condition-message . G4bf1@G4ade@condition-message) (condition-irritants . G4c17@G4b5b@condition-irritants) (assertion-violation? . G4c0f@G4b42@assertion-violation?)))))) (G2c1e@G2ab1@install-library 'G513c '(mosh interaction) '() '() '() '() '((string-upcase . G50bc) (string-titlecase . G50bb) (string-normalize-nfkd . G50ba) (string-normalize-nfkc . G50b9) (string-normalize-nfd . G50b8) (string-normalize-nfc . G50b7) (string-foldcase . G50b6) (string-downcase . G50b5) (string-ci>? . G50b4) (string-ci>=? . G50b3) (string-ci=? . G50b2) (string-ci<? . G50b1) (string-ci<=? . G50b0) (char-whitespace? . G50af) (char-upper-case? . G50ae) (char-title-case? . G50ad) (char-numeric? . G50ac) (char-lower-case? . G50ab) (char-general-category . G50aa) (char-upcase . G50a9) (char-titlecase . G50a8) (char-foldcase . G50a7) (char-downcase . G50a6) (char-ci>? . G50a5) (char-ci>=? . G50a4) (char-ci=? . G50a3) (char-ci<? . G50a2) (char-ci<=? . G50a1) (char-alphabetic? . G50a0) (make-variable-transformer . G2e6b) (identifier? . G3162) (generate-temporaries . G314c) (free-identifier=? . G314e) (syntax->datum . G3166) (datum->syntax . G3164) (bound-identifier=? . G3150) (record-type-descriptor? . G509f) (record-predicate . G509e) (record-mutator . G509d) (record-constructor . G509c) (record-accessor . G509b) (make-record-type-descriptor . G509a) (make-record-constructor-descriptor . G5099) (record? . G5098) (record-type-uid . G5097) (record-type-sealed? . G5096) (record-type-parent . G5095) (record-type-opaque? . G5094) (record-type-name . G5093) (record-type-generative? . G5092) (record-type-field-names . G5091) (record-rtd . G5090) (record-field-mutable? . G508f) (delete-file . G508e) (file-exists? . G508d) (vector-sort! . G508c) (vector-sort . G508b) (list-sort . G508a) (symbol-hash . G5089) (string-ci-hash . G5088) (string-hash . G5087) (equal-hash . G5086) (hashtable-equivalence-function . G5085) (make-hashtable . G5084) (hashtable-hash-function . G5083) (make-eqv-hashtable . G5082) (make-eq-hashtable . G5081) (hashtable? . G5080) (hashtable-update! . G507f) (hashtable-size . G507e) (hashtable-set! . G507d) (hashtable-ref . G507c) (hashtable-mutable? . G507b) (hashtable-keys . G507a) (hashtable-entries . G5079) (hashtable-delete! . G5078) (hashtable-copy . G5077) (hashtable-contains? . G5076) (hashtable-clear! . G5075) (call-with-output-file . G5074) (call-with-input-file . G5073) (write-char . G5072) (write . G5071) (with-output-to-file . G5070) (with-input-from-file . G506f) (read-char . G506e) (read . G506d) (peek-char . G506c) (open-output-file . G506b) (open-input-file . G506a) (newline . G5069) (display . G5068) (close-output-port . G5067) (close-input-port . G5066) (eof-object? . G5065) (eof-object . G5064) (current-error-port . G5063) (current-output-port . G5062) (current-input-port . G5061) (output-port? . G5060) (input-port? . G505f) (utf-8-codec . G505e) (utf-16-codec . G505d) (transcoder-error-handling-mode . G505c) (transcoder-eol-style . G505b) (transcoder-codec . G505a) (transcoded-port . G5059) (textual-port? . G5058) (string->bytevector . G5057) (standard-output-port . G5056) (standard-input-port . G5055) (standard-error-port . G5054) (set-port-position! . G5053) (put-u8 . G5052) (put-string . G5051) (put-datum . G5050) (put-char . G504f) (put-bytevector . G504e) (port? . G504d) (port-transcoder . G504c) (port-position . G504b) (port-has-set-port-position!? . G504a) (port-has-port-position? . G5049) (port-eof? . G5048) (output-port-buffer-mode . G5047) (open-string-output-port . G5046) (open-string-input-port . G5045) (open-file-output-port . G5044) (open-file-input/output-port . G5043) (open-file-input-port . G5042) (open-bytevector-output-port . G5041) (open-bytevector-input-port . G5040) (native-transcoder . G503f) (native-eol-style . G503e) (make-transcoder . G503d) (latin-1-codec . G503c) (make-i/o-write-error . G4c7b) (make-i/o-read-error . G4c67) (make-i/o-port-error . G4d12) (make-i/o-invalid-position-error . G4c90) (make-i/o-filename-error . G4ca9) (make-i/o-file-protection-error . G4cc1) (make-i/o-file-is-read-only-error . G4cd5) (make-i/o-file-does-not-exist-error . G4cfd) (make-i/o-file-already-exists-error . G4ce9) (make-i/o-error . G4c53) (make-i/o-encoding-error . G4d3f) (make-i/o-decoding-error . G4d2a) (make-custom-textual-output-port . G503b) (make-custom-textual-input/output-port . G503a) (make-custom-textual-input-port . G5039) (make-custom-binary-output-port . G5038) (make-custom-binary-input/output-port . G5037) (make-custom-binary-input-port . G5036) (make-bytevector . G5035) (lookahead-u8 . G5034) (lookahead-char . G5033) (i/o-write-error? . G4c7d) (i/o-read-error? . G4c69) (i/o-port-error? . G4d16) (i/o-invalid-position-error? . G4c94) (i/o-filename-error? . G4cad) (i/o-file-protection-error? . G4cc3) (i/o-file-is-read-only-error? . G4cd7) (i/o-file-does-not-exist-error? . G4cff) (i/o-file-already-exists-error? . G4ceb) (i/o-error? . G4c55) (i/o-error-port . G4d18) (i/o-error-filename . G4caf) (i/o-encoding-error? . G4d43) (i/o-encoding-error-char . G4d45) (i/o-decoding-error? . G4d2c) (get-u8 . G5032) (get-string-n! . G5031) (get-string-n . G5030) (get-string-all . G502f) (get-line . G502e) (get-datum . G502d) (get-char . G502c) (get-bytevector-some . G502b) (get-bytevector-n! . G502a) (get-bytevector-n . G5029) (get-bytevector-all . G5028) (flush-output-port . G5027) (close-port . G5026) (exit . G501f) (command-line . G4d9e) (string-fill! . G501e) (string-set! . G501d) (set-cdr! . G501c) (set-car! . G501b) (remove . G501a) (remv . G5019) (remp . G5018) (remq . G5017) (partition . G5016) (memv . G5015) (memq . G5014) (memp . G5013) (member . G5012) (exists . G5011) (for-all . G5010) (fold-right . G500f) (fold-left . G500e) (find . G500d) (filter . G500c) (cons* . G500b) (assv . G500a) (assq . G5009) (assp . G5008) (assoc . G5007) (call-with-string-output-port . G5006) (call-with-port . G5005) (call-with-bytevector-output-port . G5004) (bytevector->string . G5003) (buffer-mode? . G5002) (binary-port? . G5001) (with-exception-handler . G5000) (raise-continuable . G4fff) (raise . G4ffe) (eval . G313e) (environment . G3136) (make-enumeration . G4ffd) (enum-set=? . G4ffc) (enum-set-universe . G4ffb) (enum-set-union . G4ffa) (enum-set-subset? . G4ff9) (enum-set-projection . G4ff8) (enum-set-member? . G4ff7) (enum-set-intersection . G4ff6) (enum-set-indexer . G4ff5) (enum-set-difference . G4ff4) (enum-set-constructor . G4ff3) (enum-set-complement . G4ff2) (enum-set->list . G4ff1) (who-condition? . G4b71) (warning? . G4af1) (violation? . G4b2d) (undefined-violation? . G4be1) (syntax-violation? . G4bc9) (syntax-violation-subform . G4bcd) (syntax-violation-form . G4bcb) (syntax-violation . G3160) (simple-conditions . G4ff0) (serious-condition? . G4b05) (non-continuable-violation? . G4b87) (message-condition? . G4adb) (make-who-condition . G4b6d) (make-warning . G4aef) (make-violation . G4b2b) (make-undefined-violation . G4bdf) (make-syntax-violation . G4bc3) (make-serious-condition . G4b03) (make-non-continuable-violation . G4b85) (make-message-condition . G4ad7) (make-lexical-violation . G4bad) (make-irritants-condition . G4b54) (make-implementation-restriction-violation . G4b99) (make-error . G4b17) (make-assertion-violation . G4b3f) (lexical-violation? . G4baf) (irritants-condition? . G4b58) (implementation-restriction-violation? . G4b9b) (error? . G4b19) (condition-who . G4b73) (condition-predicate . G4fef) (condition-message . G4add) (condition-irritants . G4b5a) (condition-accessor . G4fee) (condition . G4fed) (assertion-violation? . G4b41) (condition? . G4fec) (utf32->string . G4feb) (utf16->string . G4fea) (utf8->string . G4fe9) (uint-list->bytevector . G4fe8) (u8-list->bytevector . G4fe7) (string->utf8 . G4fe6) (string->utf32 . G4fe5) (string->utf16 . G4fe4) (sint-list->bytevector . G4fe3) (native-endianness . G4fe2) (bytevector? . G4fe1) (bytevector=? . G4fe0) (bytevector-uint-set! . G4fdf) (bytevector-uint-ref . G4fde) (bytevector-u8-set! . G4fdd) (bytevector-u8-ref . G4fdc) (bytevector-u64-set! . G4fdb) (bytevector-u64-ref . G4fda) (bytevector-u64-native-set! . G4fd9) (bytevector-u64-native-ref . G4fd8) (bytevector-u32-set! . G4fd7) (bytevector-u32-ref . G4fd6) (bytevector-u32-native-set! . G4fd5) (bytevector-u32-native-ref . G4fd4) (bytevector-u16-set! . G4fd3) (bytevector-u16-ref . G4fd2) (bytevector-u16-native-set! . G4fd1) (bytevector-u16-native-ref . G4fd0) (bytevector-sint-set! . G4fcf) (bytevector-sint-ref . G4fce) (bytevector-s8-set! . G4fcd) (bytevector-s8-ref . G4fcc) (bytevector-s64-set! . G4fcb) (bytevector-s64-ref . G4fca) (bytevector-s64-native-set! . G4fc9) (bytevector-s64-native-ref . G4fc8) (bytevector-s32-set! . G4fc7) (bytevector-s32-ref . G4fc6) (bytevector-s32-native-set! . G4fc5) (bytevector-s32-native-ref . G4fc4) (bytevector-s16-set! . G4fc3) (bytevector-s16-ref . G4fc2) (bytevector-s16-native-set! . G4fc1) (bytevector-s16-native-ref . G4fc0) (bytevector-length . G4fbf) (bytevector-ieee-single-ref . G4fbe) (bytevector-ieee-single-native-set! . G4fbd) (bytevector-ieee-single-native-ref . G4fbc) (bytevector-ieee-double-ref . G4fbb) (bytevector-ieee-double-native-set! . G4fba) (bytevector-ieee-double-native-ref . G4fb9) (bytevector-fill! . G4fb8) (bytevector-copy! . G4fb7) (bytevector-copy . G4fb6) (bytevector->uint-list . G4fb5) (bytevector->u8-list . G4fb4) (bytevector->sint-list . G4fb3) (no-nans-violation? . G4fb2) (no-infinities-violation? . G4fb1) (make-no-nans-violation . G4fb0) (make-no-infinities-violation . G4faf) (real->flonum . G4fae) (flzero? . G4fad) (fltruncate . G4fac) (fltan . G4fab) (flsqrt . G4faa) (flsin . G4fa9) (flround . G4fa8) (flpositive? . G4fa7) (flonum? . G4fa6) (flodd? . G4fa5) (flnumerator . G4fa4) (flnegative? . G4fa3) (flnan? . G4fa2) (flmod0 . G4fa1) (flmod . G4fa0) (flmin . G4f9f) (flmax . G4f9e) (fllog . G4f9d) (flinteger? . G4f9c) (flinfinite? . G4f9b) (flfloor . G4f9a) (flfinite? . G4f99) (flexpt . G4f98) (flexp . G4f97) (fleven? . G4f96) (fldiv0-and-mod0 . G4f95) (fldiv0 . G4f94) (fldiv-and-mod . G4f93) (fldiv . G4f92) (fldenominator . G4f91) (flcos . G4f90) (flceiling . G4f8f) (flatan . G4f8e) (flasin . G4f8d) (flacos . G4f8c) (flabs . G4f8b) (fl>? . G4f8a) (fl>=? . G4f89) (fl=? . G4f88) (fl<? . G4f87) (fl<=? . G4f86) (fl/ . G4f85) (fl- . G4f84) (fl+ . G4f83) (fl* . G4f82) (fixnum->flonum . G4f81) (fxzero? . G4f80) (fxxor . G4f7f) (fxrotate-bit-field . G4f7e) (fxreverse-bit-field . G4f7d) (fxpositive? . G4f7c) (fxodd? . G4f7b) (fxnot . G4f7a) (fxnegative? . G4f79) (fxmod0 . G4f78) (fxmod . G4f77) (fxmin . G4f76) (fxmax . G4f75) (fxlength . G4f74) (fxior . G4f73) (fxif . G4f72) (fxfirst-bit-set . G4f71) (fxeven? . G4f70) (fxdiv0-and-mod0 . G4f6f) (fxdiv0 . G4f6e) (fxdiv-and-mod . G4f6d) (fxdiv . G4f6c) (fxcopy-bit-field . G4f6b) (fxcopy-bit . G4f6a) (fxbit-set? . G4f69) (fxbit-field . G4f68) (fxbit-count . G4f67) (fxarithmetic-shift-right . G4f66) (fxarithmetic-shift-left . G4f65) (fxarithmetic-shift . G4f64) (fxand . G4f63) (fx>? . G4f62) (fx>=? . G4f61) (fx=? . G4f60) (fx<? . G4f5f) (fx<=? . G4f5e) (fx-/carry . G4f5d) (fx- . G4f5c) (fx+/carry . G4f5b) (fx+ . G4f5a) (fx*/carry . G4f59) (fx* . G4f58) (greatest-fixnum . G4f57) (least-fixnum . G4f56) (fixnum-width . G4f55) (fixnum? . G4f54) (bitwise-rotate-bit-field . G4f53) (bitwise-reverse-bit-field . G4f52) (bitwise-length . G4f51) (bitwise-if . G4f50) (bitwise-first-bit-set . G4f4f) (bitwise-copy-bit-field . G4f4e) (bitwise-copy-bit . G4f4d) (bitwise-bit-set? . G4f4c) (bitwise-bit-field . G4f4b) (bitwise-bit-count . G4f4a) (bitwise-xor . G4f49) (bitwise-ior . G4f48) (bitwise-and . G4f47) (bitwise-not . G4f46) (bitwise-arithmetic-shift-right . G4f45) (bitwise-arithmetic-shift-left . G4f44) (bitwise-arithmetic-shift . G4f43) (zero? . G4f42) (vector? . G4f41) (vector-set! . G4f40) (vector-ref . G4f3f) (vector-map . G4f3e) (vector-length . G4f3d) (vector-for-each . G4f3c) (vector-fill! . G4f3b) (vector->list . G4f3a) (vector . G4f39) (values . G4f38) (truncate . G4f37) (tan . G4f36) (symbol? . G4f35) (symbol=? . G4f34) (symbol->string . G4f33) (substring . G4f32) (string? . G4f31) (string>? . G4f30) (string>=? . G4f2f) (string=? . G4f2e) (string<? . G4f2d) (string<=? . G4f2c) (string-ref . G4f2b) (string-length . G4f2a) (string-for-each . G4f29) (string-copy . G4f28) (string-append . G4f27) (string->symbol . G4f26) (string->number . G4f25) (string->list . G4f24) (string . G4f23) (sqrt . G4f22) (sin . G4f21) (round . G4f20) (reverse . G4f1f) (real? . G4f1e) (real-valued? . G4f1d) (real-part . G4f1c) (rationalize . G4f1b) (rational? . G4f1a) (rational-valued? . G4f19) (procedure? . G4f18) (positive? . G4f17) (pair? . G4f16) (odd? . G4f15) (numerator . G4f14) (number? . G4f13) (number->string . G4f12) (null? . G4f11) (not . G4f10) (negative? . G4f0f) (nan? . G4f0e) (min . G4f0d) (max . G4f0c) (map . G4f0b) (make-vector . G4f0a) (make-string . G4f09) (make-rectangular . G4f08) (make-polar . G4f07) (magnitude . G4f06) (log . G4f05) (list? . G4f04) (list-tail . G4f03) (list-ref . G4f02) (list->vector . G4f01) (list->string . G4f00) (list . G4eff) (length . G4efe) (lcm . G4efd) (integer? . G4efc) (integer-valued? . G4efb) (integer->char . G4efa) (infinite? . G4ef9) (inexact? . G4ef8) (inexact . G4ef7) (imag-part . G4ef6) (gcd . G4ef5) (for-each . G4ef4) (floor . G4ef3) (finite? . G4ef2) (expt . G4ef1) (exp . G4ef0) (exact? . G4eef) (exact-integer-sqrt . G4eee) (exact . G4eed) (even? . G4eec) (error . G4eeb) (eqv? . G4eea) (equal? . G4ee9) (eq? . G4ee8) (dynamic-wind . G4ee7) (div0-and-mod0 . G4ee6) (mod0 . G4ee5) (div0 . G4ee4) (div-and-mod . G4ee3) (mod . G4ee2) (div . G4ee1) (denominator . G4ee0) (cos . G4edf) (cons . G4ede) (complex? . G4edd) (char? . G4edc) (char>? . G4edb) (char>=? . G4eda) (char=? . G4ed9) (char<? . G4ed8) (char<=? . G4ed7) (char->integer . G4ed6) (ceiling . G4ed5) (call-with-values . G4ed4) (call/cc . G4ed3) (call-with-current-continuation . G4ed2) (cddddr . G4ed1) (cdddar . G4ed0) (cddadr . G4ecf) (cddaar . G4ece) (cdaddr . G4ecd) (cdadar . G4ecc) (cdaadr . G4ecb) (cdaaar . G4eca) (cadddr . G4ec9) (caddar . G4ec8) (cadadr . G4ec7) (cadaar . G4ec6) (caaddr . G4ec5) (caadar . G4ec4) (caaadr . G4ec3) (caaaar . G4ec2) (cdddr . G4ec1) (cddar . G4ec0) (cdadr . G4ebf) (cdaar . G4ebe) (caddr . G4ebd) (cadar . G4ebc) (caadr . G4ebb) (caaar . G4eba) (cddr . G4eb9) (cdar . G4eb8) (cadr . G4eb7) (caar . G4eb6) (cdr . G4eb5) (car . G4eb4) (boolean? . G4eb3) (boolean=? . G4eb2) (atan . G4eb1) (assertion-violation . G4eb0) (asin . G4eaf) (apply . G4eae) (append . G4ead) (angle . G4eac) (acos . G4eab) (abs . G4eaa) (/ . G4ea9) (* . G4ea8) (- . G4ea7) (+ . G4ea6) (>= . G4ea5) (> . G4ea4) (= . G4ea3) (<= . G4ea2) (< . G4ea1) (library . G4ea0) (export . G4e9f) (&no-nans . G4e9e) (&no-infinities . G4e9d) (&i/o-encoding . G4e9c) (&i/o-decoding . G4e9b) (&i/o-port . G4e9a) (&i/o-file-does-not-exist . G4e99) (&i/o-file-already-exists . G4e98) (&i/o-file-is-read-only . G4e97) (&i/o-file-protection . G4e96) (&i/o-filename . G4e95) (&i/o-invalid-position . G4e94) (&i/o-write . G4e93) (&i/o-read . G4e92) (&i/o . G4e91) (&undefined . G4e90) (&syntax . G4e8f) (&lexical . G4e8e) (&implementation-restriction . G4e8d) (&non-continuable . G4e8c) (&who . G4e8b) (&irritants . G4e8a) (&assertion . G4e89) (&violation . G4e88) (&error . G4e87) (&serious . G4e86) (&warning . G4e85) (&message . G4e84) (&condition . G4e83) (define-condition-type . G4e82) (define-enumeration . G4e81) (define-record-type . G4e80) (parent-rtd . G4e7f) (nongenerative . G4e7e) (opaque . G4e7d) (sealed . G4e7c) (protocol . G4e7b) (parent . G4e7a) (immutable . G4e79) (mutable . G4e78) (fields . G4e77) (error-handling-mode . G4e76) (file-options . G4e75) (buffer-mode . G4e74) (eol-style . G4e73) (guard . G4e72) (unsyntax-splicing . G4e6f) (unsyntax . G4e6e) (unquote-splicing . G4e6d) (unquote . G4e6c) (_ . G4e6b) (else . G4e6a) (=> . G4e69) (... . G4e68) (assert . G4e67) (endianness . G4e66) (or . G4e63) (and . G4e62) (do . G4e61) (cond . G4e60) (let* . G4e5f) (let . G4e5e) (let*-values . G4e5d) (let-values . G4e5c) (identifier-syntax . G4e5b) (with-syntax . G4e5a) (quasisyntax . G4e59) (quasiquote . G4e58) (syntax-rules . G4e57) (include . G4e56) (record-constructor-descriptor . G4e54) (record-type-descriptor . G4e53) (case . G4e52) (unless . G4e50) (when . G4e4f) (if . G4e4e) (letrec* . G4e4d) (letrec . G4e4c) (case-lambda . G4e4a) (lambda . G4e49) (syntax . G4e48) (syntax-case . G4e47) (quote . G4e46) (letrec-syntax . G4e44) (let-syntax . G4e43) (set! . G4e42) (import . G4e41) (begin . G4e40) (define-syntax . G4e3e) (define . G4e3d)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G513d '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4e6d) (unquote . G4e6c) (delay . G4e65) (or . G4e63) (and . G4e62) (do . G4e61) (cond . G4e60) (let* . G4e5f) (let . G4e5e) (quasiquote . G4e58) (syntax-rules . G4e57) (case . G4e52) (if . G4e4e) (letrec . G4e4c) (lambda . G4e49) (quote . G4e46) (letrec-syntax . G4e44) (let-syntax . G4e43) (set! . G4e42) (begin . G4e40) (define-syntax . G4e3e) (define . G4e3d)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G513e '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G50b4) (string-ci>=? . G50b3) (string-ci=? . G50b2) (string-ci<? . G50b1) (string-ci<=? . G50b0) (char-whitespace? . G50af) (char-upper-case? . G50ae) (char-numeric? . G50ac) (char-lower-case? . G50ab) (char-upcase . G50a9) (char-downcase . G50a6) (char-ci>? . G50a5) (char-ci>=? . G50a4) (char-ci=? . G50a3) (char-ci<? . G50a2) (char-ci<=? . G50a1) (char-alphabetic? . G50a0) (call-with-output-file . G5074) (call-with-input-file . G5073) (write-char . G5072) (write . G5071) (with-output-to-file . G5070) (with-input-from-file . G506f) (read-char . G506e) (read . G506d) (peek-char . G506c) (open-output-file . G506b) (open-input-file . G506a) (newline . G5069) (display . G5068) (close-output-port . G5067) (close-input-port . G5066) (eof-object . G5064) (current-output-port . G5062) (current-input-port . G5061) (output-port? . G5060) (input-port? . G505f) (scheme-report-environment . G313a) (quotient . G5025) (null-environment . G3138) (remainder . G5024) (modulo . G5023) (inexact->exact . G5022) (force . G5021) (exact->inexact . G5020) (string-fill! . G501e) (string-set! . G501d) (set-cdr! . G501c) (set-car! . G501b) (memv . G5015) (memq . G5014) (member . G5012) (assv . G500a) (assq . G5009) (assoc . G5007) (eval . G313e) (zero? . G4f42) (vector? . G4f41) (vector-set! . G4f40) (vector-ref . G4f3f) (vector-length . G4f3d) (vector-fill! . G4f3b) (vector->list . G4f3a) (vector . G4f39) (values . G4f38) (truncate . G4f37) (tan . G4f36) (symbol? . G4f35) (symbol->string . G4f33) (substring . G4f32) (string? . G4f31) (string>? . G4f30) (string>=? . G4f2f) (string=? . G4f2e) (string<? . G4f2d) (string<=? . G4f2c) (string-ref . G4f2b) (string-length . G4f2a) (string-copy . G4f28) (string-append . G4f27) (string->symbol . G4f26) (string->number . G4f25) (string->list . G4f24) (string . G4f23) (sqrt . G4f22) (sin . G4f21) (round . G4f20) (reverse . G4f1f) (real? . G4f1e) (real-part . G4f1c) (rationalize . G4f1b) (rational? . G4f1a) (procedure? . G4f18) (positive? . G4f17) (pair? . G4f16) (odd? . G4f15) (numerator . G4f14) (number? . G4f13) (number->string . G4f12) (not . G4f10) (negative? . G4f0f) (min . G4f0d) (max . G4f0c) (map . G4f0b) (make-vector . G4f0a) (make-string . G4f09) (make-rectangular . G4f08) (make-polar . G4f07) (magnitude . G4f06) (log . G4f05) (list? . G4f04) (list-tail . G4f03) (list-ref . G4f02) (list->vector . G4f01) (list->string . G4f00) (list . G4eff) (length . G4efe) (lcm . G4efd) (integer? . G4efc) (integer->char . G4efa) (inexact? . G4ef8) (imag-part . G4ef6) (gcd . G4ef5) (for-each . G4ef4) (floor . G4ef3) (expt . G4ef1) (exp . G4ef0) (exact? . G4eef) (even? . G4eec) (eqv? . G4eea) (equal? . G4ee9) (eq? . G4ee8) (dynamic-wind . G4ee7) (denominator . G4ee0) (cos . G4edf) (cons . G4ede) (complex? . G4edd) (char? . G4edc) (char>? . G4edb) (char>=? . G4eda) (char=? . G4ed9) (char<? . G4ed8) (char<=? . G4ed7) (char->integer . G4ed6) (ceiling . G4ed5) (call-with-values . G4ed4) (call-with-current-continuation . G4ed2) (cddddr . G4ed1) (cdddar . G4ed0) (cddadr . G4ecf) (cddaar . G4ece) (cdaddr . G4ecd) (cdadar . G4ecc) (cdaadr . G4ecb) (cdaaar . G4eca) (cadddr . G4ec9) (caddar . G4ec8) (cadadr . G4ec7) (cadaar . G4ec6) (caaddr . G4ec5) (caadar . G4ec4) (caaadr . G4ec3) (caaaar . G4ec2) (cdddr . G4ec1) (cddar . G4ec0) (cdadr . G4ebf) (cdaar . G4ebe) (caddr . G4ebd) (cadar . G4ebc) (caadr . G4ebb) (caaar . G4eba) (cddr . G4eb9) (cdar . G4eb8) (cadr . G4eb7) (caar . G4eb6) (cdr . G4eb5) (car . G4eb4) (boolean? . G4eb3) (atan . G4eb1) (asin . G4eaf) (apply . G4eae) (append . G4ead) (angle . G4eac) (acos . G4eab) (abs . G4eaa) (/ . G4ea9) (* . G4ea8) (- . G4ea7) (+ . G4ea6) (>= . G4ea5) (> . G4ea4) (= . G4ea3) (<= . G4ea2) (< . G4ea1) (unquote-splicing . G4e6d) (unquote . G4e6c) (delay . G4e65) (or . G4e63) (and . G4e62) (do . G4e61) (cond . G4e60) (let* . G4e5f) (let . G4e5e) (quasiquote . G4e58) (syntax-rules . G4e57) (case . G4e52) (if . G4e4e) (letrec . G4e4c) (lambda . G4e49) (quote . G4e46) (letrec-syntax . G4e44) (let-syntax . G4e43) (set! . G4e42) (begin . G4e40) (define-syntax . G4e3e) (define . G4e3d)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G513f '(psyntax modules) '() '() '() '() '((module . G4e3f)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5140 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5141 '(rnrs) '(6) '() '() '() '((regexp? . G50fc) (string-upcase . G50bc) (string-titlecase . G50bb) (string-normalize-nfkd . G50ba) (string-normalize-nfkc . G50b9) (string-normalize-nfd . G50b8) (string-normalize-nfc . G50b7) (string-foldcase . G50b6) (string-downcase . G50b5) (string-ci>? . G50b4) (string-ci>=? . G50b3) (string-ci=? . G50b2) (string-ci<? . G50b1) (string-ci<=? . G50b0) (char-whitespace? . G50af) (char-upper-case? . G50ae) (char-title-case? . G50ad) (char-numeric? . G50ac) (char-lower-case? . G50ab) (char-general-category . G50aa) (char-upcase . G50a9) (char-titlecase . G50a8) (char-foldcase . G50a7) (char-downcase . G50a6) (char-ci>? . G50a5) (char-ci>=? . G50a4) (char-ci=? . G50a3) (char-ci<? . G50a2) (char-ci<=? . G50a1) (char-alphabetic? . G50a0) (make-variable-transformer . G2e6b) (identifier? . G3162) (generate-temporaries . G314c) (free-identifier=? . G314e) (syntax->datum . G3166) (datum->syntax . G3164) (bound-identifier=? . G3150) (record-type-descriptor? . G509f) (record-predicate . G509e) (record-mutator . G509d) (record-constructor . G509c) (record-accessor . G509b) (make-record-type-descriptor . G509a) (make-record-constructor-descriptor . G5099) (record? . G5098) (record-type-uid . G5097) (record-type-sealed? . G5096) (record-type-parent . G5095) (record-type-opaque? . G5094) (record-type-name . G5093) (record-type-generative? . G5092) (record-type-field-names . G5091) (record-rtd . G5090) (record-field-mutable? . G508f) (delete-file . G508e) (file-exists? . G508d) (vector-sort! . G508c) (vector-sort . G508b) (list-sort . G508a) (symbol-hash . G5089) (string-ci-hash . G5088) (string-hash . G5087) (equal-hash . G5086) (hashtable-equivalence-function . G5085) (make-hashtable . G5084) (hashtable-hash-function . G5083) (make-eqv-hashtable . G5082) (make-eq-hashtable . G5081) (hashtable? . G5080) (hashtable-update! . G507f) (hashtable-size . G507e) (hashtable-set! . G507d) (hashtable-ref . G507c) (hashtable-mutable? . G507b) (hashtable-keys . G507a) (hashtable-entries . G5079) (hashtable-delete! . G5078) (hashtable-copy . G5077) (hashtable-contains? . G5076) (hashtable-clear! . G5075) (call-with-output-file . G5074) (call-with-input-file . G5073) (write-char . G5072) (write . G5071) (with-output-to-file . G5070) (with-input-from-file . G506f) (read-char . G506e) (read . G506d) (peek-char . G506c) (open-output-file . G506b) (open-input-file . G506a) (newline . G5069) (display . G5068) (close-output-port . G5067) (close-input-port . G5066) (eof-object? . G5065) (eof-object . G5064) (current-error-port . G5063) (current-output-port . G5062) (current-input-port . G5061) (output-port? . G5060) (input-port? . G505f) (utf-8-codec . G505e) (utf-16-codec . G505d) (transcoder-error-handling-mode . G505c) (transcoder-eol-style . G505b) (transcoder-codec . G505a) (transcoded-port . G5059) (textual-port? . G5058) (string->bytevector . G5057) (standard-output-port . G5056) (standard-input-port . G5055) (standard-error-port . G5054) (set-port-position! . G5053) (put-u8 . G5052) (put-string . G5051) (put-datum . G5050) (put-char . G504f) (put-bytevector . G504e) (port? . G504d) (port-transcoder . G504c) (port-position . G504b) (port-has-set-port-position!? . G504a) (port-has-port-position? . G5049) (port-eof? . G5048) (output-port-buffer-mode . G5047) (open-string-output-port . G5046) (open-string-input-port . G5045) (open-file-output-port . G5044) (open-file-input/output-port . G5043) (open-file-input-port . G5042) (open-bytevector-output-port . G5041) (open-bytevector-input-port . G5040) (native-transcoder . G503f) (native-eol-style . G503e) (make-transcoder . G503d) (latin-1-codec . G503c) (make-i/o-write-error . G4c7b) (make-i/o-read-error . G4c67) (make-i/o-port-error . G4d12) (make-i/o-invalid-position-error . G4c90) (make-i/o-filename-error . G4ca9) (make-i/o-file-protection-error . G4cc1) (make-i/o-file-is-read-only-error . G4cd5) (make-i/o-file-does-not-exist-error . G4cfd) (make-i/o-file-already-exists-error . G4ce9) (make-i/o-error . G4c53) (make-i/o-encoding-error . G4d3f) (make-i/o-decoding-error . G4d2a) (make-custom-textual-output-port . G503b) (make-custom-textual-input/output-port . G503a) (make-custom-textual-input-port . G5039) (make-custom-binary-output-port . G5038) (make-custom-binary-input/output-port . G5037) (make-custom-binary-input-port . G5036) (make-bytevector . G5035) (lookahead-u8 . G5034) (lookahead-char . G5033) (i/o-write-error? . G4c7d) (i/o-read-error? . G4c69) (i/o-port-error? . G4d16) (i/o-invalid-position-error? . G4c94) (i/o-filename-error? . G4cad) (i/o-file-protection-error? . G4cc3) (i/o-file-is-read-only-error? . G4cd7) (i/o-file-does-not-exist-error? . G4cff) (i/o-file-already-exists-error? . G4ceb) (i/o-error? . G4c55) (i/o-error-port . G4d18) (i/o-error-filename . G4caf) (i/o-encoding-error? . G4d43) (i/o-encoding-error-char . G4d45) (i/o-decoding-error? . G4d2c) (get-u8 . G5032) (get-string-n! . G5031) (get-string-n . G5030) (get-string-all . G502f) (get-line . G502e) (get-datum . G502d) (get-char . G502c) (get-bytevector-some . G502b) (get-bytevector-n! . G502a) (get-bytevector-n . G5029) (get-bytevector-all . G5028) (flush-output-port . G5027) (close-port . G5026) (exit . G501f) (command-line . G4d9e) (remove . G501a) (remv . G5019) (remp . G5018) (remq . G5017) (partition . G5016) (memv . G5015) (memq . G5014) (memp . G5013) (member . G5012) (exists . G5011) (for-all . G5010) (fold-right . G500f) (fold-left . G500e) (find . G500d) (filter . G500c) (cons* . G500b) (assv . G500a) (assq . G5009) (assp . G5008) (assoc . G5007) (call-with-string-output-port . G5006) (call-with-port . G5005) (call-with-bytevector-output-port . G5004) (bytevector->string . G5003) (buffer-mode? . G5002) (binary-port? . G5001) (with-exception-handler . G5000) (raise-continuable . G4fff) (raise . G4ffe) (make-enumeration . G4ffd) (enum-set=? . G4ffc) (enum-set-universe . G4ffb) (enum-set-union . G4ffa) (enum-set-subset? . G4ff9) (enum-set-projection . G4ff8) (enum-set-member? . G4ff7) (enum-set-intersection . G4ff6) (enum-set-indexer . G4ff5) (enum-set-difference . G4ff4) (enum-set-constructor . G4ff3) (enum-set-complement . G4ff2) (enum-set->list . G4ff1) (who-condition? . G4b71) (warning? . G4af1) (violation? . G4b2d) (undefined-violation? . G4be1) (syntax-violation? . G4bc9) (syntax-violation-subform . G4bcd) (syntax-violation-form . G4bcb) (syntax-violation . G3160) (simple-conditions . G4ff0) (serious-condition? . G4b05) (non-continuable-violation? . G4b87) (message-condition? . G4adb) (make-who-condition . G4b6d) (make-warning . G4aef) (make-violation . G4b2b) (make-undefined-violation . G4bdf) (make-syntax-violation . G4bc3) (make-serious-condition . G4b03) (make-non-continuable-violation . G4b85) (make-message-condition . G4ad7) (make-lexical-violation . G4bad) (make-irritants-condition . G4b54) (make-implementation-restriction-violation . G4b99) (make-error . G4b17) (make-assertion-violation . G4b3f) (lexical-violation? . G4baf) (irritants-condition? . G4b58) (implementation-restriction-violation? . G4b9b) (error? . G4b19) (condition-who . G4b73) (condition-predicate . G4fef) (condition-message . G4add) (condition-irritants . G4b5a) (condition-accessor . G4fee) (condition . G4fed) (assertion-violation? . G4b41) (condition? . G4fec) (utf32->string . G4feb) (utf16->string . G4fea) (utf8->string . G4fe9) (uint-list->bytevector . G4fe8) (u8-list->bytevector . G4fe7) (string->utf8 . G4fe6) (string->utf32 . G4fe5) (string->utf16 . G4fe4) (sint-list->bytevector . G4fe3) (native-endianness . G4fe2) (bytevector? . G4fe1) (bytevector=? . G4fe0) (bytevector-uint-set! . G4fdf) (bytevector-uint-ref . G4fde) (bytevector-u8-set! . G4fdd) (bytevector-u8-ref . G4fdc) (bytevector-u64-set! . G4fdb) (bytevector-u64-ref . G4fda) (bytevector-u64-native-set! . G4fd9) (bytevector-u64-native-ref . G4fd8) (bytevector-u32-set! . G4fd7) (bytevector-u32-ref . G4fd6) (bytevector-u32-native-set! . G4fd5) (bytevector-u32-native-ref . G4fd4) (bytevector-u16-set! . G4fd3) (bytevector-u16-ref . G4fd2) (bytevector-u16-native-set! . G4fd1) (bytevector-u16-native-ref . G4fd0) (bytevector-sint-set! . G4fcf) (bytevector-sint-ref . G4fce) (bytevector-s8-set! . G4fcd) (bytevector-s8-ref . G4fcc) (bytevector-s64-set! . G4fcb) (bytevector-s64-ref . G4fca) (bytevector-s64-native-set! . G4fc9) (bytevector-s64-native-ref . G4fc8) (bytevector-s32-set! . G4fc7) (bytevector-s32-ref . G4fc6) (bytevector-s32-native-set! . G4fc5) (bytevector-s32-native-ref . G4fc4) (bytevector-s16-set! . G4fc3) (bytevector-s16-ref . G4fc2) (bytevector-s16-native-set! . G4fc1) (bytevector-s16-native-ref . G4fc0) (bytevector-length . G4fbf) (bytevector-ieee-single-ref . G4fbe) (bytevector-ieee-single-native-set! . G4fbd) (bytevector-ieee-single-native-ref . G4fbc) (bytevector-ieee-double-ref . G4fbb) (bytevector-ieee-double-native-set! . G4fba) (bytevector-ieee-double-native-ref . G4fb9) (bytevector-fill! . G4fb8) (bytevector-copy! . G4fb7) (bytevector-copy . G4fb6) (bytevector->uint-list . G4fb5) (bytevector->u8-list . G4fb4) (bytevector->sint-list . G4fb3) (no-nans-violation? . G4fb2) (no-infinities-violation? . G4fb1) (make-no-nans-violation . G4fb0) (make-no-infinities-violation . G4faf) (real->flonum . G4fae) (flzero? . G4fad) (fltruncate . G4fac) (fltan . G4fab) (flsqrt . G4faa) (flsin . G4fa9) (flround . G4fa8) (flpositive? . G4fa7) (flonum? . G4fa6) (flodd? . G4fa5) (flnumerator . G4fa4) (flnegative? . G4fa3) (flnan? . G4fa2) (flmod0 . G4fa1) (flmod . G4fa0) (flmin . G4f9f) (flmax . G4f9e) (fllog . G4f9d) (flinteger? . G4f9c) (flinfinite? . G4f9b) (flfloor . G4f9a) (flfinite? . G4f99) (flexpt . G4f98) (flexp . G4f97) (fleven? . G4f96) (fldiv0-and-mod0 . G4f95) (fldiv0 . G4f94) (fldiv-and-mod . G4f93) (fldiv . G4f92) (fldenominator . G4f91) (flcos . G4f90) (flceiling . G4f8f) (flatan . G4f8e) (flasin . G4f8d) (flacos . G4f8c) (flabs . G4f8b) (fl>? . G4f8a) (fl>=? . G4f89) (fl=? . G4f88) (fl<? . G4f87) (fl<=? . G4f86) (fl/ . G4f85) (fl- . G4f84) (fl+ . G4f83) (fl* . G4f82) (fixnum->flonum . G4f81) (fxzero? . G4f80) (fxxor . G4f7f) (fxrotate-bit-field . G4f7e) (fxreverse-bit-field . G4f7d) (fxpositive? . G4f7c) (fxodd? . G4f7b) (fxnot . G4f7a) (fxnegative? . G4f79) (fxmod0 . G4f78) (fxmod . G4f77) (fxmin . G4f76) (fxmax . G4f75) (fxlength . G4f74) (fxior . G4f73) (fxif . G4f72) (fxfirst-bit-set . G4f71) (fxeven? . G4f70) (fxdiv0-and-mod0 . G4f6f) (fxdiv0 . G4f6e) (fxdiv-and-mod . G4f6d) (fxdiv . G4f6c) (fxcopy-bit-field . G4f6b) (fxcopy-bit . G4f6a) (fxbit-set? . G4f69) (fxbit-field . G4f68) (fxbit-count . G4f67) (fxarithmetic-shift-right . G4f66) (fxarithmetic-shift-left . G4f65) (fxarithmetic-shift . G4f64) (fxand . G4f63) (fx>? . G4f62) (fx>=? . G4f61) (fx=? . G4f60) (fx<? . G4f5f) (fx<=? . G4f5e) (fx-/carry . G4f5d) (fx- . G4f5c) (fx+/carry . G4f5b) (fx+ . G4f5a) (fx*/carry . G4f59) (fx* . G4f58) (greatest-fixnum . G4f57) (least-fixnum . G4f56) (fixnum-width . G4f55) (fixnum? . G4f54) (bitwise-rotate-bit-field . G4f53) (bitwise-reverse-bit-field . G4f52) (bitwise-length . G4f51) (bitwise-if . G4f50) (bitwise-first-bit-set . G4f4f) (bitwise-copy-bit-field . G4f4e) (bitwise-copy-bit . G4f4d) (bitwise-bit-set? . G4f4c) (bitwise-bit-field . G4f4b) (bitwise-bit-count . G4f4a) (bitwise-xor . G4f49) (bitwise-ior . G4f48) (bitwise-and . G4f47) (bitwise-not . G4f46) (bitwise-arithmetic-shift-right . G4f45) (bitwise-arithmetic-shift-left . G4f44) (bitwise-arithmetic-shift . G4f43) (zero? . G4f42) (vector? . G4f41) (vector-set! . G4f40) (vector-ref . G4f3f) (vector-map . G4f3e) (vector-length . G4f3d) (vector-for-each . G4f3c) (vector-fill! . G4f3b) (vector->list . G4f3a) (vector . G4f39) (values . G4f38) (truncate . G4f37) (tan . G4f36) (symbol? . G4f35) (symbol=? . G4f34) (symbol->string . G4f33) (substring . G4f32) (string? . G4f31) (string>? . G4f30) (string>=? . G4f2f) (string=? . G4f2e) (string<? . G4f2d) (string<=? . G4f2c) (string-ref . G4f2b) (string-length . G4f2a) (string-for-each . G4f29) (string-copy . G4f28) (string-append . G4f27) (string->symbol . G4f26) (string->number . G4f25) (string->list . G4f24) (string . G4f23) (sqrt . G4f22) (sin . G4f21) (round . G4f20) (reverse . G4f1f) (real? . G4f1e) (real-valued? . G4f1d) (real-part . G4f1c) (rationalize . G4f1b) (rational? . G4f1a) (rational-valued? . G4f19) (procedure? . G4f18) (positive? . G4f17) (pair? . G4f16) (odd? . G4f15) (numerator . G4f14) (number? . G4f13) (number->string . G4f12) (null? . G4f11) (not . G4f10) (negative? . G4f0f) (nan? . G4f0e) (min . G4f0d) (max . G4f0c) (map . G4f0b) (make-vector . G4f0a) (make-string . G4f09) (make-rectangular . G4f08) (make-polar . G4f07) (magnitude . G4f06) (log . G4f05) (list? . G4f04) (list-tail . G4f03) (list-ref . G4f02) (list->vector . G4f01) (list->string . G4f00) (list . G4eff) (length . G4efe) (lcm . G4efd) (integer? . G4efc) (integer-valued? . G4efb) (integer->char . G4efa) (infinite? . G4ef9) (inexact? . G4ef8) (inexact . G4ef7) (imag-part . G4ef6) (gcd . G4ef5) (for-each . G4ef4) (floor . G4ef3) (finite? . G4ef2) (expt . G4ef1) (exp . G4ef0) (exact? . G4eef) (exact-integer-sqrt . G4eee) (exact . G4eed) (even? . G4eec) (error . G4eeb) (eqv? . G4eea) (equal? . G4ee9) (eq? . G4ee8) (dynamic-wind . G4ee7) (div0-and-mod0 . G4ee6) (mod0 . G4ee5) (div0 . G4ee4) (div-and-mod . G4ee3) (mod . G4ee2) (div . G4ee1) (denominator . G4ee0) (cos . G4edf) (cons . G4ede) (complex? . G4edd) (char? . G4edc) (char>? . G4edb) (char>=? . G4eda) (char=? . G4ed9) (char<? . G4ed8) (char<=? . G4ed7) (char->integer . G4ed6) (ceiling . G4ed5) (call-with-values . G4ed4) (call/cc . G4ed3) (call-with-current-continuation . G4ed2) (cddddr . G4ed1) (cdddar . G4ed0) (cddadr . G4ecf) (cddaar . G4ece) (cdaddr . G4ecd) (cdadar . G4ecc) (cdaadr . G4ecb) (cdaaar . G4eca) (cadddr . G4ec9) (caddar . G4ec8) (cadadr . G4ec7) (cadaar . G4ec6) (caaddr . G4ec5) (caadar . G4ec4) (caaadr . G4ec3) (caaaar . G4ec2) (cdddr . G4ec1) (cddar . G4ec0) (cdadr . G4ebf) (cdaar . G4ebe) (caddr . G4ebd) (cadar . G4ebc) (caadr . G4ebb) (caaar . G4eba) (cddr . G4eb9) (cdar . G4eb8) (cadr . G4eb7) (caar . G4eb6) (cdr . G4eb5) (car . G4eb4) (boolean? . G4eb3) (boolean=? . G4eb2) (atan . G4eb1) (assertion-violation . G4eb0) (asin . G4eaf) (apply . G4eae) (append . G4ead) (angle . G4eac) (acos . G4eab) (abs . G4eaa) (/ . G4ea9) (* . G4ea8) (- . G4ea7) (+ . G4ea6) (>= . G4ea5) (> . G4ea4) (= . G4ea3) (<= . G4ea2) (< . G4ea1) (&no-nans . G4e9e) (&no-infinities . G4e9d) (&i/o-encoding . G4e9c) (&i/o-decoding . G4e9b) (&i/o-port . G4e9a) (&i/o-file-does-not-exist . G4e99) (&i/o-file-already-exists . G4e98) (&i/o-file-is-read-only . G4e97) (&i/o-file-protection . G4e96) (&i/o-filename . G4e95) (&i/o-invalid-position . G4e94) (&i/o-write . G4e93) (&i/o-read . G4e92) (&i/o . G4e91) (&undefined . G4e90) (&syntax . G4e8f) (&lexical . G4e8e) (&implementation-restriction . G4e8d) (&non-continuable . G4e8c) (&who . G4e8b) (&irritants . G4e8a) (&assertion . G4e89) (&violation . G4e88) (&error . G4e87) (&serious . G4e86) (&warning . G4e85) (&message . G4e84) (&condition . G4e83) (define-condition-type . G4e82) (define-enumeration . G4e81) (define-record-type . G4e80) (parent-rtd . G4e7f) (nongenerative . G4e7e) (opaque . G4e7d) (sealed . G4e7c) (protocol . G4e7b) (parent . G4e7a) (immutable . G4e79) (mutable . G4e78) (fields . G4e77) (error-handling-mode . G4e76) (file-options . G4e75) (buffer-mode . G4e74) (eol-style . G4e73) (guard . G4e72) (unsyntax-splicing . G4e6f) (unsyntax . G4e6e) (unquote-splicing . G4e6d) (unquote . G4e6c) (_ . G4e6b) (else . G4e6a) (=> . G4e69) (... . G4e68) (assert . G4e67) (endianness . G4e66) (or . G4e63) (and . G4e62) (do . G4e61) (cond . G4e60) (let* . G4e5f) (let . G4e5e) (let*-values . G4e5d) (let-values . G4e5c) (identifier-syntax . G4e5b) (with-syntax . G4e5a) (quasisyntax . G4e59) (quasiquote . G4e58) (syntax-rules . G4e57) (record-constructor-descriptor . G4e54) (record-type-descriptor . G4e53) (case . G4e52) (unless . G4e50) (when . G4e4f) (if . G4e4e) (letrec* . G4e4d) (letrec . G4e4c) (case-lambda . G4e4a) (lambda . G4e49) (syntax . G4e48) (syntax-case . G4e47) (quote . G4e46) (letrec-syntax . G4e44) (let-syntax . G4e43) (set! . G4e42) (begin . G4e40) (define-syntax . G4e3e) (define . G4e3d)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5142 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G313a) (quotient . G5025) (null-environment . G3138) (remainder . G5024) (modulo . G5023) (inexact->exact . G5022) (force . G5021) (exact->inexact . G5020) (delay . G4e65)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5143 '(rnrs control) '(6) '() '() '() '((do . G4e61) (unless . G4e50) (when . G4e4f) (case-lambda . G4e4a)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5144 '(rnrs eval) '(6) '() '() '() '((eval . G313e) (environment . G3136)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5145 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G501c) (set-car! . G501b)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5146 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G501e) (string-set! . G501d)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5147 '(rnrs programs) '(6) '() '() '() '((exit . G501f) (command-line . G4d9e)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5148 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2e6b) (identifier? . G3162) (generate-temporaries . G314c) (free-identifier=? . G314e) (syntax->datum . G3166) (datum->syntax . G3164) (bound-identifier=? . G3150) (syntax-violation . G3160) (unsyntax-splicing . G4e6f) (unsyntax . G4e6e) (_ . G4e6b) (... . G4e68) (with-syntax . G4e5a) (quasisyntax . G4e59) (syntax . G4e48) (syntax-case . G4e47)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5149 '(rnrs files) '(6) '() '() '() '((delete-file . G508e) (file-exists? . G508d) (make-i/o-write-error . G4c7b) (make-i/o-read-error . G4c67) (make-i/o-port-error . G4d12) (make-i/o-invalid-position-error . G4c90) (make-i/o-filename-error . G4ca9) (make-i/o-file-protection-error . G4cc1) (make-i/o-file-is-read-only-error . G4cd5) (make-i/o-file-does-not-exist-error . G4cfd) (make-i/o-file-already-exists-error . G4ce9) (make-i/o-error . G4c53) (i/o-write-error? . G4c7d) (i/o-read-error? . G4c69) (i/o-port-error? . G4d16) (i/o-invalid-position-error? . G4c94) (i/o-filename-error? . G4cad) (i/o-file-protection-error? . G4cc3) (i/o-file-is-read-only-error? . G4cd7) (i/o-file-does-not-exist-error? . G4cff) (i/o-file-already-exists-error? . G4ceb) (i/o-error? . G4c55) (i/o-error-port . G4d18) (i/o-error-filename . G4caf) (&i/o-port . G4e9a) (&i/o-file-does-not-exist . G4e99) (&i/o-file-already-exists . G4e98) (&i/o-file-is-read-only . G4e97) (&i/o-file-protection . G4e96) (&i/o-filename . G4e95) (&i/o-invalid-position . G4e94) (&i/o-write . G4e93) (&i/o-read . G4e92) (&i/o . G4e91)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G514a '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G508c) (vector-sort . G508b) (list-sort . G508a)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G514b '(rnrs base) '(6) '() '() '() '((zero? . G4f42) (vector? . G4f41) (vector-set! . G4f40) (vector-ref . G4f3f) (vector-map . G4f3e) (vector-length . G4f3d) (vector-for-each . G4f3c) (vector-fill! . G4f3b) (vector->list . G4f3a) (vector . G4f39) (values . G4f38) (truncate . G4f37) (tan . G4f36) (symbol? . G4f35) (symbol=? . G4f34) (symbol->string . G4f33) (substring . G4f32) (string? . G4f31) (string>? . G4f30) (string>=? . G4f2f) (string=? . G4f2e) (string<? . G4f2d) (string<=? . G4f2c) (string-ref . G4f2b) (string-length . G4f2a) (string-for-each . G4f29) (string-copy . G4f28) (string-append . G4f27) (string->symbol . G4f26) (string->number . G4f25) (string->list . G4f24) (string . G4f23) (sqrt . G4f22) (sin . G4f21) (round . G4f20) (reverse . G4f1f) (real? . G4f1e) (real-valued? . G4f1d) (real-part . G4f1c) (rationalize . G4f1b) (rational? . G4f1a) (rational-valued? . G4f19) (procedure? . G4f18) (positive? . G4f17) (pair? . G4f16) (odd? . G4f15) (numerator . G4f14) (number? . G4f13) (number->string . G4f12) (null? . G4f11) (not . G4f10) (negative? . G4f0f) (nan? . G4f0e) (min . G4f0d) (max . G4f0c) (map . G4f0b) (make-vector . G4f0a) (make-string . G4f09) (make-rectangular . G4f08) (make-polar . G4f07) (magnitude . G4f06) (log . G4f05) (list? . G4f04) (list-tail . G4f03) (list-ref . G4f02) (list->vector . G4f01) (list->string . G4f00) (list . G4eff) (length . G4efe) (lcm . G4efd) (integer? . G4efc) (integer-valued? . G4efb) (integer->char . G4efa) (infinite? . G4ef9) (inexact? . G4ef8) (inexact . G4ef7) (imag-part . G4ef6) (gcd . G4ef5) (for-each . G4ef4) (floor . G4ef3) (finite? . G4ef2) (expt . G4ef1) (exp . G4ef0) (exact? . G4eef) (exact-integer-sqrt . G4eee) (exact . G4eed) (even? . G4eec) (error . G4eeb) (eqv? . G4eea) (equal? . G4ee9) (eq? . G4ee8) (dynamic-wind . G4ee7) (div0-and-mod0 . G4ee6) (mod0 . G4ee5) (div0 . G4ee4) (div-and-mod . G4ee3) (mod . G4ee2) (div . G4ee1) (denominator . G4ee0) (cos . G4edf) (cons . G4ede) (complex? . G4edd) (char? . G4edc) (char>? . G4edb) (char>=? . G4eda) (char=? . G4ed9) (char<? . G4ed8) (char<=? . G4ed7) (char->integer . G4ed6) (ceiling . G4ed5) (call-with-values . G4ed4) (call/cc . G4ed3) (call-with-current-continuation . G4ed2) (cddddr . G4ed1) (cdddar . G4ed0) (cddadr . G4ecf) (cddaar . G4ece) (cdaddr . G4ecd) (cdadar . G4ecc) (cdaadr . G4ecb) (cdaaar . G4eca) (cadddr . G4ec9) (caddar . G4ec8) (cadadr . G4ec7) (cadaar . G4ec6) (caaddr . G4ec5) (caadar . G4ec4) (caaadr . G4ec3) (caaaar . G4ec2) (cdddr . G4ec1) (cddar . G4ec0) (cdadr . G4ebf) (cdaar . G4ebe) (caddr . G4ebd) (cadar . G4ebc) (caadr . G4ebb) (caaar . G4eba) (cddr . G4eb9) (cdar . G4eb8) (cadr . G4eb7) (caar . G4eb6) (cdr . G4eb5) (car . G4eb4) (boolean? . G4eb3) (boolean=? . G4eb2) (atan . G4eb1) (assertion-violation . G4eb0) (asin . G4eaf) (apply . G4eae) (append . G4ead) (angle . G4eac) (acos . G4eab) (abs . G4eaa) (/ . G4ea9) (* . G4ea8) (- . G4ea7) (+ . G4ea6) (>= . G4ea5) (> . G4ea4) (= . G4ea3) (<= . G4ea2) (< . G4ea1) (unquote-splicing . G4e6d) (unquote . G4e6c) (_ . G4e6b) (else . G4e6a) (=> . G4e69) (... . G4e68) (assert . G4e67) (or . G4e63) (and . G4e62) (cond . G4e60) (let* . G4e5f) (let . G4e5e) (let*-values . G4e5d) (let-values . G4e5c) (identifier-syntax . G4e5b) (quasiquote . G4e58) (syntax-rules . G4e57) (case . G4e52) (if . G4e4e) (letrec* . G4e4d) (letrec . G4e4c) (lambda . G4e49) (quote . G4e46) (letrec-syntax . G4e44) (let-syntax . G4e43) (set! . G4e42) (begin . G4e40) (define-syntax . G4e3e) (define . G4e3d)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G514c '(rnrs lists) '(6) '() '() '() '((remove . G501a) (remv . G5019) (remp . G5018) (remq . G5017) (partition . G5016) (memv . G5015) (memq . G5014) (memp . G5013) (member . G5012) (exists . G5011) (for-all . G5010) (fold-right . G500f) (fold-left . G500e) (find . G500d) (filter . G500c) (cons* . G500b) (assv . G500a) (assq . G5009) (assp . G5008) (assoc . G5007)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G514d '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5074) (call-with-input-file . G5073) (write-char . G5072) (write . G5071) (with-output-to-file . G5070) (with-input-from-file . G506f) (read-char . G506e) (read . G506d) (peek-char . G506c) (open-output-file . G506b) (open-input-file . G506a) (newline . G5069) (display . G5068) (close-output-port . G5067) (close-input-port . G5066) (eof-object? . G5065) (eof-object . G5064) (current-error-port . G5063) (current-output-port . G5062) (current-input-port . G5061) (output-port? . G5060) (input-port? . G505f) (make-i/o-write-error . G4c7b) (make-i/o-read-error . G4c67) (make-i/o-port-error . G4d12) (make-i/o-invalid-position-error . G4c90) (make-i/o-filename-error . G4ca9) (make-i/o-file-protection-error . G4cc1) (make-i/o-file-is-read-only-error . G4cd5) (make-i/o-file-does-not-exist-error . G4cfd) (make-i/o-file-already-exists-error . G4ce9) (make-i/o-error . G4c53) (i/o-write-error? . G4c7d) (i/o-read-error? . G4c69) (i/o-port-error? . G4d16) (i/o-invalid-position-error? . G4c94) (i/o-filename-error? . G4cad) (i/o-file-protection-error? . G4cc3) (i/o-file-is-read-only-error? . G4cd7) (i/o-file-does-not-exist-error? . G4cff) (i/o-file-already-exists-error? . G4ceb) (i/o-error? . G4c55) (i/o-error-port . G4d18) (i/o-error-filename . G4caf) (&i/o-port . G4e9a) (&i/o-file-does-not-exist . G4e99) (&i/o-file-already-exists . G4e98) (&i/o-file-is-read-only . G4e97) (&i/o-file-protection . G4e96) (&i/o-filename . G4e95) (&i/o-invalid-position . G4e94) (&i/o-write . G4e93) (&i/o-read . G4e92) (&i/o . G4e91)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G514e '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G5035) (utf32->string . G4feb) (utf16->string . G4fea) (utf8->string . G4fe9) (uint-list->bytevector . G4fe8) (u8-list->bytevector . G4fe7) (string->utf8 . G4fe6) (string->utf32 . G4fe5) (string->utf16 . G4fe4) (sint-list->bytevector . G4fe3) (native-endianness . G4fe2) (bytevector? . G4fe1) (bytevector=? . G4fe0) (bytevector-uint-set! . G4fdf) (bytevector-uint-ref . G4fde) (bytevector-u8-set! . G4fdd) (bytevector-u8-ref . G4fdc) (bytevector-u64-set! . G4fdb) (bytevector-u64-ref . G4fda) (bytevector-u64-native-set! . G4fd9) (bytevector-u64-native-ref . G4fd8) (bytevector-u32-set! . G4fd7) (bytevector-u32-ref . G4fd6) (bytevector-u32-native-set! . G4fd5) (bytevector-u32-native-ref . G4fd4) (bytevector-u16-set! . G4fd3) (bytevector-u16-ref . G4fd2) (bytevector-u16-native-set! . G4fd1) (bytevector-u16-native-ref . G4fd0) (bytevector-sint-set! . G4fcf) (bytevector-sint-ref . G4fce) (bytevector-s8-set! . G4fcd) (bytevector-s8-ref . G4fcc) (bytevector-s64-set! . G4fcb) (bytevector-s64-ref . G4fca) (bytevector-s64-native-set! . G4fc9) (bytevector-s64-native-ref . G4fc8) (bytevector-s32-set! . G4fc7) (bytevector-s32-ref . G4fc6) (bytevector-s32-native-set! . G4fc5) (bytevector-s32-native-ref . G4fc4) (bytevector-s16-set! . G4fc3) (bytevector-s16-ref . G4fc2) (bytevector-s16-native-set! . G4fc1) (bytevector-s16-native-ref . G4fc0) (bytevector-length . G4fbf) (bytevector-ieee-single-ref . G4fbe) (bytevector-ieee-single-native-set! . G4fbd) (bytevector-ieee-single-native-ref . G4fbc) (bytevector-ieee-double-ref . G4fbb) (bytevector-ieee-double-native-set! . G4fba) (bytevector-ieee-double-native-ref . G4fb9) (bytevector-fill! . G4fb8) (bytevector-copy! . G4fb7) (bytevector-copy . G4fb6) (bytevector->uint-list . G4fb5) (bytevector->u8-list . G4fb4) (bytevector->sint-list . G4fb3) (endianness . G4e66)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G514f '(rnrs unicode) '(6) '() '() '() '((string-upcase . G50bc) (string-titlecase . G50bb) (string-normalize-nfkd . G50ba) (string-normalize-nfkc . G50b9) (string-normalize-nfd . G50b8) (string-normalize-nfc . G50b7) (string-foldcase . G50b6) (string-downcase . G50b5) (string-ci>? . G50b4) (string-ci>=? . G50b3) (string-ci=? . G50b2) (string-ci<? . G50b1) (string-ci<=? . G50b0) (char-whitespace? . G50af) (char-upper-case? . G50ae) (char-title-case? . G50ad) (char-numeric? . G50ac) (char-lower-case? . G50ab) (char-general-category . G50aa) (char-upcase . G50a9) (char-titlecase . G50a8) (char-foldcase . G50a7) (char-downcase . G50a6) (char-ci>? . G50a5) (char-ci>=? . G50a4) (char-ci=? . G50a3) (char-ci<? . G50a2) (char-ci<=? . G50a1) (char-alphabetic? . G50a0)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5150 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G5000) (raise-continuable . G4fff) (raise . G4ffe) (guard . G4e72) (else . G4e6a) (=> . G4e69)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5151 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4f53) (bitwise-reverse-bit-field . G4f52) (bitwise-length . G4f51) (bitwise-if . G4f50) (bitwise-first-bit-set . G4f4f) (bitwise-copy-bit-field . G4f4e) (bitwise-copy-bit . G4f4d) (bitwise-bit-set? . G4f4c) (bitwise-bit-field . G4f4b) (bitwise-bit-count . G4f4a) (bitwise-xor . G4f49) (bitwise-ior . G4f48) (bitwise-and . G4f47) (bitwise-not . G4f46) (bitwise-arithmetic-shift-right . G4f45) (bitwise-arithmetic-shift-left . G4f44) (bitwise-arithmetic-shift . G4f43)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5152 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f80) (fxxor . G4f7f) (fxrotate-bit-field . G4f7e) (fxreverse-bit-field . G4f7d) (fxpositive? . G4f7c) (fxodd? . G4f7b) (fxnot . G4f7a) (fxnegative? . G4f79) (fxmod0 . G4f78) (fxmod . G4f77) (fxmin . G4f76) (fxmax . G4f75) (fxlength . G4f74) (fxior . G4f73) (fxif . G4f72) (fxfirst-bit-set . G4f71) (fxeven? . G4f70) (fxdiv0-and-mod0 . G4f6f) (fxdiv0 . G4f6e) (fxdiv-and-mod . G4f6d) (fxdiv . G4f6c) (fxcopy-bit-field . G4f6b) (fxcopy-bit . G4f6a) (fxbit-set? . G4f69) (fxbit-field . G4f68) (fxbit-count . G4f67) (fxarithmetic-shift-right . G4f66) (fxarithmetic-shift-left . G4f65) (fxarithmetic-shift . G4f64) (fxand . G4f63) (fx>? . G4f62) (fx>=? . G4f61) (fx=? . G4f60) (fx<? . G4f5f) (fx<=? . G4f5e) (fx-/carry . G4f5d) (fx- . G4f5c) (fx+/carry . G4f5b) (fx+ . G4f5a) (fx*/carry . G4f59) (fx* . G4f58) (greatest-fixnum . G4f57) (least-fixnum . G4f56) (fixnum-width . G4f55) (fixnum? . G4f54)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5153 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4fb2) (no-infinities-violation? . G4fb1) (make-no-nans-violation . G4fb0) (make-no-infinities-violation . G4faf) (real->flonum . G4fae) (flzero? . G4fad) (fltruncate . G4fac) (fltan . G4fab) (flsqrt . G4faa) (flsin . G4fa9) (flround . G4fa8) (flpositive? . G4fa7) (flonum? . G4fa6) (flodd? . G4fa5) (flnumerator . G4fa4) (flnegative? . G4fa3) (flnan? . G4fa2) (flmod0 . G4fa1) (flmod . G4fa0) (flmin . G4f9f) (flmax . G4f9e) (fllog . G4f9d) (flinteger? . G4f9c) (flinfinite? . G4f9b) (flfloor . G4f9a) (flfinite? . G4f99) (flexpt . G4f98) (flexp . G4f97) (fleven? . G4f96) (fldiv0-and-mod0 . G4f95) (fldiv0 . G4f94) (fldiv-and-mod . G4f93) (fldiv . G4f92) (fldenominator . G4f91) (flcos . G4f90) (flceiling . G4f8f) (flatan . G4f8e) (flasin . G4f8d) (flacos . G4f8c) (flabs . G4f8b) (fl>? . G4f8a) (fl>=? . G4f89) (fl=? . G4f88) (fl<? . G4f87) (fl<=? . G4f86) (fl/ . G4f85) (fl- . G4f84) (fl+ . G4f83) (fl* . G4f82) (fixnum->flonum . G4f81) (&no-nans . G4e9e) (&no-infinities . G4e9d)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5154 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5089) (string-ci-hash . G5088) (string-hash . G5087) (equal-hash . G5086) (hashtable-equivalence-function . G5085) (make-hashtable . G5084) (hashtable-hash-function . G5083) (make-eqv-hashtable . G5082) (make-eq-hashtable . G5081) (hashtable? . G5080) (hashtable-update! . G507f) (hashtable-size . G507e) (hashtable-set! . G507d) (hashtable-ref . G507c) (hashtable-mutable? . G507b) (hashtable-keys . G507a) (hashtable-entries . G5079) (hashtable-delete! . G5078) (hashtable-copy . G5077) (hashtable-contains? . G5076) (hashtable-clear! . G5075)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5155 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G5065) (eof-object . G5064) (current-error-port . G5063) (current-output-port . G5062) (current-input-port . G5061) (output-port? . G5060) (input-port? . G505f) (utf-8-codec . G505e) (utf-16-codec . G505d) (transcoder-error-handling-mode . G505c) (transcoder-eol-style . G505b) (transcoder-codec . G505a) (transcoded-port . G5059) (textual-port? . G5058) (string->bytevector . G5057) (standard-output-port . G5056) (standard-input-port . G5055) (standard-error-port . G5054) (set-port-position! . G5053) (put-u8 . G5052) (put-string . G5051) (put-datum . G5050) (put-char . G504f) (put-bytevector . G504e) (port? . G504d) (port-transcoder . G504c) (port-position . G504b) (port-has-set-port-position!? . G504a) (port-has-port-position? . G5049) (port-eof? . G5048) (output-port-buffer-mode . G5047) (open-string-output-port . G5046) (open-string-input-port . G5045) (open-file-output-port . G5044) (open-file-input/output-port . G5043) (open-file-input-port . G5042) (open-bytevector-output-port . G5041) (open-bytevector-input-port . G5040) (native-transcoder . G503f) (native-eol-style . G503e) (make-transcoder . G503d) (latin-1-codec . G503c) (make-i/o-write-error . G4c7b) (make-i/o-read-error . G4c67) (make-i/o-port-error . G4d12) (make-i/o-invalid-position-error . G4c90) (make-i/o-filename-error . G4ca9) (make-i/o-file-protection-error . G4cc1) (make-i/o-file-is-read-only-error . G4cd5) (make-i/o-file-does-not-exist-error . G4cfd) (make-i/o-file-already-exists-error . G4ce9) (make-i/o-error . G4c53) (make-i/o-encoding-error . G4d3f) (make-i/o-decoding-error . G4d2a) (make-custom-textual-output-port . G503b) (make-custom-textual-input/output-port . G503a) (make-custom-textual-input-port . G5039) (make-custom-binary-output-port . G5038) (make-custom-binary-input/output-port . G5037) (make-custom-binary-input-port . G5036) (lookahead-u8 . G5034) (lookahead-char . G5033) (i/o-write-error? . G4c7d) (i/o-read-error? . G4c69) (i/o-port-error? . G4d16) (i/o-invalid-position-error? . G4c94) (i/o-filename-error? . G4cad) (i/o-file-protection-error? . G4cc3) (i/o-file-is-read-only-error? . G4cd7) (i/o-file-does-not-exist-error? . G4cff) (i/o-file-already-exists-error? . G4ceb) (i/o-error? . G4c55) (i/o-error-port . G4d18) (i/o-error-filename . G4caf) (i/o-encoding-error? . G4d43) (i/o-encoding-error-char . G4d45) (i/o-decoding-error? . G4d2c) (get-u8 . G5032) (get-string-n! . G5031) (get-string-n . G5030) (get-string-all . G502f) (get-line . G502e) (get-datum . G502d) (get-char . G502c) (get-bytevector-some . G502b) (get-bytevector-n! . G502a) (get-bytevector-n . G5029) (get-bytevector-all . G5028) (flush-output-port . G5027) (close-port . G5026) (call-with-string-output-port . G5006) (call-with-port . G5005) (call-with-bytevector-output-port . G5004) (bytevector->string . G5003) (buffer-mode? . G5002) (binary-port? . G5001) (&i/o-encoding . G4e9c) (&i/o-decoding . G4e9b) (&i/o-port . G4e9a) (&i/o-file-does-not-exist . G4e99) (&i/o-file-already-exists . G4e98) (&i/o-file-is-read-only . G4e97) (&i/o-file-protection . G4e96) (&i/o-filename . G4e95) (&i/o-invalid-position . G4e94) (&i/o-write . G4e93) (&i/o-read . G4e92) (&i/o . G4e91) (error-handling-mode . G4e76) (file-options . G4e75) (buffer-mode . G4e74) (eol-style . G4e73)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5156 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4ffd) (enum-set=? . G4ffc) (enum-set-universe . G4ffb) (enum-set-union . G4ffa) (enum-set-subset? . G4ff9) (enum-set-projection . G4ff8) (enum-set-member? . G4ff7) (enum-set-intersection . G4ff6) (enum-set-indexer . G4ff5) (enum-set-difference . G4ff4) (enum-set-constructor . G4ff3) (enum-set-complement . G4ff2) (enum-set->list . G4ff1) (define-enumeration . G4e81)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5157 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4b71) (warning? . G4af1) (violation? . G4b2d) (undefined-violation? . G4be1) (syntax-violation? . G4bc9) (syntax-violation-subform . G4bcd) (syntax-violation-form . G4bcb) (syntax-violation . G3160) (simple-conditions . G4ff0) (serious-condition? . G4b05) (non-continuable-violation? . G4b87) (message-condition? . G4adb) (make-who-condition . G4b6d) (make-warning . G4aef) (make-violation . G4b2b) (make-undefined-violation . G4bdf) (make-syntax-violation . G4bc3) (make-serious-condition . G4b03) (make-non-continuable-violation . G4b85) (make-message-condition . G4ad7) (make-lexical-violation . G4bad) (make-irritants-condition . G4b54) (make-implementation-restriction-violation . G4b99) (make-error . G4b17) (make-assertion-violation . G4b3f) (lexical-violation? . G4baf) (irritants-condition? . G4b58) (implementation-restriction-violation? . G4b9b) (error? . G4b19) (condition-who . G4b73) (condition-predicate . G4fef) (condition-message . G4add) (condition-irritants . G4b5a) (condition-accessor . G4fee) (condition . G4fed) (assertion-violation? . G4b41) (condition? . G4fec) (&undefined . G4e90) (&syntax . G4e8f) (&lexical . G4e8e) (&implementation-restriction . G4e8d) (&non-continuable . G4e8c) (&who . G4e8b) (&irritants . G4e8a) (&assertion . G4e89) (&violation . G4e88) (&error . G4e87) (&serious . G4e86) (&warning . G4e85) (&message . G4e84) (&condition . G4e83) (define-condition-type . G4e82)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5158 '(rnrs records inspection) '(6) '() '() '() '((record? . G5098) (record-type-uid . G5097) (record-type-sealed? . G5096) (record-type-parent . G5095) (record-type-opaque? . G5094) (record-type-name . G5093) (record-type-generative? . G5092) (record-type-field-names . G5091) (record-rtd . G5090) (record-field-mutable? . G508f)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G5159 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G509f) (record-predicate . G509e) (record-mutator . G509d) (record-constructor . G509c) (record-accessor . G509b) (make-record-type-descriptor . G509a) (make-record-constructor-descriptor . G5099)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G515a '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e80) (parent-rtd . G4e7f) (nongenerative . G4e7e) (opaque . G4e7d) (sealed . G4e7c) (protocol . G4e7b) (parent . G4e7a) (immutable . G4e79) (mutable . G4e78) (fields . G4e77) (record-constructor-descriptor . G4e54) (record-type-descriptor . G4e53)) '() values values '#f '#f '#t '#f) (G2c1e@G2ab1@install-library 'G515b '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G513b) (&no-nans-rtd . G513a) (&no-infinities-rcd . G5139) (&no-infinities-rtd . G5138) (&i/o-encoding-rcd . G5137) (&i/o-encoding-rtd . G5136) (&i/o-decoding-rcd . G5135) (&i/o-decoding-rtd . G5134) (&i/o-port-rcd . G5133) (&i/o-port-rtd . G5132) (&i/o-file-does-not-exist-rcd . G5131) (&i/o-file-does-not-exist-rtd . G5130) (&i/o-file-already-exists-rcd . G512f) (&i/o-file-already-exists-rtd . G512e) (&i/o-file-is-read-only-rcd . G512d) (&i/o-file-is-read-only-rtd . G512c) (&i/o-file-protection-rcd . G512b) (&i/o-file-protection-rtd . G512a) (&i/o-filename-rcd . G5129) (&i/o-filename-rtd . G5128) (&i/o-invalid-position-rcd . G5127) (&i/o-invalid-position-rtd . G5126) (&i/o-write-rcd . G5125) (&i/o-write-rtd . G5124) (&i/o-read-rcd . G5123) (&i/o-read-rtd . G5122) (&i/o-rcd . G5121) (&i/o-rtd . G5120) (&undefined-rcd . G511f) (&undefined-rtd . G511e) (&syntax-rcd . G511d) (&syntax-rtd . G511c) (&lexical-rcd . G511b) (&lexical-rtd . G511a) (&implementation-restriction-rcd . G5119) (&implementation-restriction-rtd . G5118) (&non-continuable-rcd . G5117) (&non-continuable-rtd . G5116) (&who-rcd . G5115) (&who-rtd . G5114) (&irritants-rcd . G5113) (&irritants-rtd . G5112) (&assertion-rcd . G5111) (&assertion-rtd . G5110) (&violation-rcd . G510f) (&violation-rtd . G510e) (&error-rcd . G510d) (&error-rtd . G510c) (&serious-rcd . G510b) (&serious-rtd . G510a) (&warning-rcd . G5109) (&warning-rtd . G5108) (&message-rcd . G5107) (&message-rtd . G5106) (&condition-rcd . G5105) (&condition-rtd . G5104) (syntax-error . G315a) (syntax-dispatch . G306d) (pretty-print . G5103) (eval-core . G5102) (set-symbol-value! . G5101) (symbol-value . G5100) (gensym . G50ff) (void . G50fe) (load . G4da4) (interaction-environment . G316c) (char-ready? . G50fd) (regexp? . G50fc) (read-line . G50fb) (dotted-list? . G50fa) (circular-list? . G50f9) (proper-list? . G50f8) (circular-list . G50f7) (last . G50f6) (last-pair . G50f5) (not-pair? . G50f4) (split-at! . G50f3) (split-at . G50f2) (list= . G50f1) (list-copy . G50f0) (list-tabulate . G50ef) (make-list . G50ee) (xcons . G50ed) (tenth . G50ec) (ninth . G50eb) (eighth . G50ea) (seventh . G50e9) (sixth . G50e8) (fifth . G50e7) (drop-right! . G50e6) (drop-right . G50e5) (take-right . G50e4) (take! . G50e3) (drop . G50e2) (take . G50e1) (car+cdr . G50e0) (third . G50df) (second . G50de) (first . G50dd) (assoc-ref . G50dc) (alist-cons . G50db) (print . G50da) (format . G50d9) (standard-library-path . G50d8) (file-newer? . G50d7) (stat-mtime . G50d6) (current-directory . G50d5) (write-to-file . G50d4) (file->list . G50d3) (file->string . G50d2) (digit->integer . G50d1) (call-with-string-input-port . G50d0) (call-with-string-io . G50cf) (string-split . G50ce) (bytevector-for-each . G50cd) (string->regexp . G50cc) (rxmatch . G50cb) (regexp-replace-all . G50ca) (hashtable-for-each . G50c9) (readdir . G50c8) (get-environment-variables . G50c7) (get-environment-variable . G50c6) (get-command-line . G50c5) (sys-display . G50c4) (source-info . G50c3) (make-compiler-instruction . G50c2) (make-instruction . G50c1) (set-source-info! . G50c0) (fasl-read . G50bf) (fasl-write . G50be) (receive . G50bd) (string-upcase . G50bc) (string-titlecase . G50bb) (string-normalize-nfkd . G50ba) (string-normalize-nfkc . G50b9) (string-normalize-nfd . G50b8) (string-normalize-nfc . G50b7) (string-foldcase . G50b6) (string-downcase . G50b5) (string-ci>? . G50b4) (string-ci>=? . G50b3) (string-ci=? . G50b2) (string-ci<? . G50b1) (string-ci<=? . G50b0) (char-whitespace? . G50af) (char-upper-case? . G50ae) (char-title-case? . G50ad) (char-numeric? . G50ac) (char-lower-case? . G50ab) (char-general-category . G50aa) (char-upcase . G50a9) (char-titlecase . G50a8) (char-foldcase . G50a7) (char-downcase . G50a6) (char-ci>? . G50a5) (char-ci>=? . G50a4) (char-ci=? . G50a3) (char-ci<? . G50a2) (char-ci<=? . G50a1) (char-alphabetic? . G50a0) (make-variable-transformer . G2e6b) (identifier? . G3162) (generate-temporaries . G314c) (free-identifier=? . G314e) (syntax->datum . G3166) (datum->syntax . G3164) (bound-identifier=? . G3150) (record-type-descriptor? . G509f) (record-predicate . G509e) (record-mutator . G509d) (record-constructor . G509c) (record-accessor . G509b) (make-record-type-descriptor . G509a) (make-record-constructor-descriptor . G5099) (record? . G5098) (record-type-uid . G5097) (record-type-sealed? . G5096) (record-type-parent . G5095) (record-type-opaque? . G5094) (record-type-name . G5093) (record-type-generative? . G5092) (record-type-field-names . G5091) (record-rtd . G5090) (record-field-mutable? . G508f) (delete-file . G508e) (file-exists? . G508d) (vector-sort! . G508c) (vector-sort . G508b) (list-sort . G508a) (symbol-hash . G5089) (string-ci-hash . G5088) (string-hash . G5087) (equal-hash . G5086) (hashtable-equivalence-function . G5085) (make-hashtable . G5084) (hashtable-hash-function . G5083) (make-eqv-hashtable . G5082) (make-eq-hashtable . G5081) (hashtable? . G5080) (hashtable-update! . G507f) (hashtable-size . G507e) (hashtable-set! . G507d) (hashtable-ref . G507c) (hashtable-mutable? . G507b) (hashtable-keys . G507a) (hashtable-entries . G5079) (hashtable-delete! . G5078) (hashtable-copy . G5077) (hashtable-contains? . G5076) (hashtable-clear! . G5075) (call-with-output-file . G5074) (call-with-input-file . G5073) (write-char . G5072) (write . G5071) (with-output-to-file . G5070) (with-input-from-file . G506f) (read-char . G506e) (read . G506d) (peek-char . G506c) (open-output-file . G506b) (open-input-file . G506a) (newline . G5069) (display . G5068) (close-output-port . G5067) (close-input-port . G5066) (eof-object? . G5065) (eof-object . G5064) (current-error-port . G5063) (current-output-port . G5062) (current-input-port . G5061) (output-port? . G5060) (input-port? . G505f) (utf-8-codec . G505e) (utf-16-codec . G505d) (transcoder-error-handling-mode . G505c) (transcoder-eol-style . G505b) (transcoder-codec . G505a) (transcoded-port . G5059) (textual-port? . G5058) (string->bytevector . G5057) (standard-output-port . G5056) (standard-input-port . G5055) (standard-error-port . G5054) (set-port-position! . G5053) (put-u8 . G5052) (put-string . G5051) (put-datum . G5050) (put-char . G504f) (put-bytevector . G504e) (port? . G504d) (port-transcoder . G504c) (port-position . G504b) (port-has-set-port-position!? . G504a) (port-has-port-position? . G5049) (port-eof? . G5048) (output-port-buffer-mode . G5047) (open-string-output-port . G5046) (open-string-input-port . G5045) (open-file-output-port . G5044) (open-file-input/output-port . G5043) (open-file-input-port . G5042) (open-bytevector-output-port . G5041) (open-bytevector-input-port . G5040) (native-transcoder . G503f) (native-eol-style . G503e) (make-transcoder . G503d) (latin-1-codec . G503c) (make-i/o-write-error . G4c7b) (make-i/o-read-error . G4c67) (make-i/o-port-error . G4d12) (make-i/o-invalid-position-error . G4c90) (make-i/o-filename-error . G4ca9) (make-i/o-file-protection-error . G4cc1) (make-i/o-file-is-read-only-error . G4cd5) (make-i/o-file-does-not-exist-error . G4cfd) (make-i/o-file-already-exists-error . G4ce9) (make-i/o-error . G4c53) (make-i/o-encoding-error . G4d3f) (make-i/o-decoding-error . G4d2a) (make-custom-textual-output-port . G503b) (make-custom-textual-input/output-port . G503a) (make-custom-textual-input-port . G5039) (make-custom-binary-output-port . G5038) (make-custom-binary-input/output-port . G5037) (make-custom-binary-input-port . G5036) (make-bytevector . G5035) (lookahead-u8 . G5034) (lookahead-char . G5033) (i/o-write-error? . G4c7d) (i/o-read-error? . G4c69) (i/o-port-error? . G4d16) (i/o-invalid-position-error? . G4c94) (i/o-filename-error? . G4cad) (i/o-file-protection-error? . G4cc3) (i/o-file-is-read-only-error? . G4cd7) (i/o-file-does-not-exist-error? . G4cff) (i/o-file-already-exists-error? . G4ceb) (i/o-error? . G4c55) (i/o-error-port . G4d18) (i/o-error-filename . G4caf) (i/o-encoding-error? . G4d43) (i/o-encoding-error-char . G4d45) (i/o-decoding-error? . G4d2c) (get-u8 . G5032) (get-string-n! . G5031) (get-string-n . G5030) (get-string-all . G502f) (get-line . G502e) (get-datum . G502d) (get-char . G502c) (get-bytevector-some . G502b) (get-bytevector-n! . G502a) (get-bytevector-n . G5029) (get-bytevector-all . G5028) (flush-output-port . G5027) (close-port . G5026) (scheme-report-environment . G313a) (quotient . G5025) (null-environment . G3138) (remainder . G5024) (modulo . G5023) (inexact->exact . G5022) (force . G5021) (exact->inexact . G5020) (exit . G501f) (command-line . G4d9e) (string-fill! . G501e) (string-set! . G501d) (set-cdr! . G501c) (set-car! . G501b) (remove . G501a) (remv . G5019) (remp . G5018) (remq . G5017) (partition . G5016) (memv . G5015) (memq . G5014) (memp . G5013) (member . G5012) (exists . G5011) (for-all . G5010) (fold-right . G500f) (fold-left . G500e) (find . G500d) (filter . G500c) (cons* . G500b) (assv . G500a) (assq . G5009) (assp . G5008) (assoc . G5007) (call-with-string-output-port . G5006) (call-with-port . G5005) (call-with-bytevector-output-port . G5004) (bytevector->string . G5003) (buffer-mode? . G5002) (binary-port? . G5001) (with-exception-handler . G5000) (raise-continuable . G4fff) (raise . G4ffe) (eval . G313e) (environment . G3136) (make-enumeration . G4ffd) (enum-set=? . G4ffc) (enum-set-universe . G4ffb) (enum-set-union . G4ffa) (enum-set-subset? . G4ff9) (enum-set-projection . G4ff8) (enum-set-member? . G4ff7) (enum-set-intersection . G4ff6) (enum-set-indexer . G4ff5) (enum-set-difference . G4ff4) (enum-set-constructor . G4ff3) (enum-set-complement . G4ff2) (enum-set->list . G4ff1) (who-condition? . G4b71) (warning? . G4af1) (violation? . G4b2d) (undefined-violation? . G4be1) (syntax-violation? . G4bc9) (syntax-violation-subform . G4bcd) (syntax-violation-form . G4bcb) (syntax-violation . G3160) (simple-conditions . G4ff0) (serious-condition? . G4b05) (non-continuable-violation? . G4b87) (message-condition? . G4adb) (make-who-condition . G4b6d) (make-warning . G4aef) (make-violation . G4b2b) (make-undefined-violation . G4bdf) (make-syntax-violation . G4bc3) (make-serious-condition . G4b03) (make-non-continuable-violation . G4b85) (make-message-condition . G4ad7) (make-lexical-violation . G4bad) (make-irritants-condition . G4b54) (make-implementation-restriction-violation . G4b99) (make-error . G4b17) (make-assertion-violation . G4b3f) (lexical-violation? . G4baf) (irritants-condition? . G4b58) (implementation-restriction-violation? . G4b9b) (error? . G4b19) (condition-who . G4b73) (condition-predicate . G4fef) (condition-message . G4add) (condition-irritants . G4b5a) (condition-accessor . G4fee) (condition . G4fed) (assertion-violation? . G4b41) (condition? . G4fec) (utf32->string . G4feb) (utf16->string . G4fea) (utf8->string . G4fe9) (uint-list->bytevector . G4fe8) (u8-list->bytevector . G4fe7) (string->utf8 . G4fe6) (string->utf32 . G4fe5) (string->utf16 . G4fe4) (sint-list->bytevector . G4fe3) (native-endianness . G4fe2) (bytevector? . G4fe1) (bytevector=? . G4fe0) (bytevector-uint-set! . G4fdf) (bytevector-uint-ref . G4fde) (bytevector-u8-set! . G4fdd) (bytevector-u8-ref . G4fdc) (bytevector-u64-set! . G4fdb) (bytevector-u64-ref . G4fda) (bytevector-u64-native-set! . G4fd9) (bytevector-u64-native-ref . G4fd8) (bytevector-u32-set! . G4fd7) (bytevector-u32-ref . G4fd6) (bytevector-u32-native-set! . G4fd5) (bytevector-u32-native-ref . G4fd4) (bytevector-u16-set! . G4fd3) (bytevector-u16-ref . G4fd2) (bytevector-u16-native-set! . G4fd1) (bytevector-u16-native-ref . G4fd0) (bytevector-sint-set! . G4fcf) (bytevector-sint-ref . G4fce) (bytevector-s8-set! . G4fcd) (bytevector-s8-ref . G4fcc) (bytevector-s64-set! . G4fcb) (bytevector-s64-ref . G4fca) (bytevector-s64-native-set! . G4fc9) (bytevector-s64-native-ref . G4fc8) (bytevector-s32-set! . G4fc7) (bytevector-s32-ref . G4fc6) (bytevector-s32-native-set! . G4fc5) (bytevector-s32-native-ref . G4fc4) (bytevector-s16-set! . G4fc3) (bytevector-s16-ref . G4fc2) (bytevector-s16-native-set! . G4fc1) (bytevector-s16-native-ref . G4fc0) (bytevector-length . G4fbf) (bytevector-ieee-single-ref . G4fbe) (bytevector-ieee-single-native-set! . G4fbd) (bytevector-ieee-single-native-ref . G4fbc) (bytevector-ieee-double-ref . G4fbb) (bytevector-ieee-double-native-set! . G4fba) (bytevector-ieee-double-native-ref . G4fb9) (bytevector-fill! . G4fb8) (bytevector-copy! . G4fb7) (bytevector-copy . G4fb6) (bytevector->uint-list . G4fb5) (bytevector->u8-list . G4fb4) (bytevector->sint-list . G4fb3) (no-nans-violation? . G4fb2) (no-infinities-violation? . G4fb1) (make-no-nans-violation . G4fb0) (make-no-infinities-violation . G4faf) (real->flonum . G4fae) (flzero? . G4fad) (fltruncate . G4fac) (fltan . G4fab) (flsqrt . G4faa) (flsin . G4fa9) (flround . G4fa8) (flpositive? . G4fa7) (flonum? . G4fa6) (flodd? . G4fa5) (flnumerator . G4fa4) (flnegative? . G4fa3) (flnan? . G4fa2) (flmod0 . G4fa1) (flmod . G4fa0) (flmin . G4f9f) (flmax . G4f9e) (fllog . G4f9d) (flinteger? . G4f9c) (flinfinite? . G4f9b) (flfloor . G4f9a) (flfinite? . G4f99) (flexpt . G4f98) (flexp . G4f97) (fleven? . G4f96) (fldiv0-and-mod0 . G4f95) (fldiv0 . G4f94) (fldiv-and-mod . G4f93) (fldiv . G4f92) (fldenominator . G4f91) (flcos . G4f90) (flceiling . G4f8f) (flatan . G4f8e) (flasin . G4f8d) (flacos . G4f8c) (flabs . G4f8b) (fl>? . G4f8a) (fl>=? . G4f89) (fl=? . G4f88) (fl<? . G4f87) (fl<=? . G4f86) (fl/ . G4f85) (fl- . G4f84) (fl+ . G4f83) (fl* . G4f82) (fixnum->flonum . G4f81) (fxzero? . G4f80) (fxxor . G4f7f) (fxrotate-bit-field . G4f7e) (fxreverse-bit-field . G4f7d) (fxpositive? . G4f7c) (fxodd? . G4f7b) (fxnot . G4f7a) (fxnegative? . G4f79) (fxmod0 . G4f78) (fxmod . G4f77) (fxmin . G4f76) (fxmax . G4f75) (fxlength . G4f74) (fxior . G4f73) (fxif . G4f72) (fxfirst-bit-set . G4f71) (fxeven? . G4f70) (fxdiv0-and-mod0 . G4f6f) (fxdiv0 . G4f6e) (fxdiv-and-mod . G4f6d) (fxdiv . G4f6c) (fxcopy-bit-field . G4f6b) (fxcopy-bit . G4f6a) (fxbit-set? . G4f69) (fxbit-field . G4f68) (fxbit-count . G4f67) (fxarithmetic-shift-right . G4f66) (fxarithmetic-shift-left . G4f65) (fxarithmetic-shift . G4f64) (fxand . G4f63) (fx>? . G4f62) (fx>=? . G4f61) (fx=? . G4f60) (fx<? . G4f5f) (fx<=? . G4f5e) (fx-/carry . G4f5d) (fx- . G4f5c) (fx+/carry . G4f5b) (fx+ . G4f5a) (fx*/carry . G4f59) (fx* . G4f58) (greatest-fixnum . G4f57) (least-fixnum . G4f56) (fixnum-width . G4f55) (fixnum? . G4f54) (bitwise-rotate-bit-field . G4f53) (bitwise-reverse-bit-field . G4f52) (bitwise-length . G4f51) (bitwise-if . G4f50) (bitwise-first-bit-set . G4f4f) (bitwise-copy-bit-field . G4f4e) (bitwise-copy-bit . G4f4d) (bitwise-bit-set? . G4f4c) (bitwise-bit-field . G4f4b) (bitwise-bit-count . G4f4a) (bitwise-xor . G4f49) (bitwise-ior . G4f48) (bitwise-and . G4f47) (bitwise-not . G4f46) (bitwise-arithmetic-shift-right . G4f45) (bitwise-arithmetic-shift-left . G4f44) (bitwise-arithmetic-shift . G4f43) (zero? . G4f42) (vector? . G4f41) (vector-set! . G4f40) (vector-ref . G4f3f) (vector-map . G4f3e) (vector-length . G4f3d) (vector-for-each . G4f3c) (vector-fill! . G4f3b) (vector->list . G4f3a) (vector . G4f39) (values . G4f38) (truncate . G4f37) (tan . G4f36) (symbol? . G4f35) (symbol=? . G4f34) (symbol->string . G4f33) (substring . G4f32) (string? . G4f31) (string>? . G4f30) (string>=? . G4f2f) (string=? . G4f2e) (string<? . G4f2d) (string<=? . G4f2c) (string-ref . G4f2b) (string-length . G4f2a) (string-for-each . G4f29) (string-copy . G4f28) (string-append . G4f27) (string->symbol . G4f26) (string->number . G4f25) (string->list . G4f24) (string . G4f23) (sqrt . G4f22) (sin . G4f21) (round . G4f20) (reverse . G4f1f) (real? . G4f1e) (real-valued? . G4f1d) (real-part . G4f1c) (rationalize . G4f1b) (rational? . G4f1a) (rational-valued? . G4f19) (procedure? . G4f18) (positive? . G4f17) (pair? . G4f16) (odd? . G4f15) (numerator . G4f14) (number? . G4f13) (number->string . G4f12) (null? . G4f11) (not . G4f10) (negative? . G4f0f) (nan? . G4f0e) (min . G4f0d) (max . G4f0c) (map . G4f0b) (make-vector . G4f0a) (make-string . G4f09) (make-rectangular . G4f08) (make-polar . G4f07) (magnitude . G4f06) (log . G4f05) (list? . G4f04) (list-tail . G4f03) (list-ref . G4f02) (list->vector . G4f01) (list->string . G4f00) (list . G4eff) (length . G4efe) (lcm . G4efd) (integer? . G4efc) (integer-valued? . G4efb) (integer->char . G4efa) (infinite? . G4ef9) (inexact? . G4ef8) (inexact . G4ef7) (imag-part . G4ef6) (gcd . G4ef5) (for-each . G4ef4) (floor . G4ef3) (finite? . G4ef2) (expt . G4ef1) (exp . G4ef0) (exact? . G4eef) (exact-integer-sqrt . G4eee) (exact . G4eed) (even? . G4eec) (error . G4eeb) (eqv? . G4eea) (equal? . G4ee9) (eq? . G4ee8) (dynamic-wind . G4ee7) (div0-and-mod0 . G4ee6) (mod0 . G4ee5) (div0 . G4ee4) (div-and-mod . G4ee3) (mod . G4ee2) (div . G4ee1) (denominator . G4ee0) (cos . G4edf) (cons . G4ede) (complex? . G4edd) (char? . G4edc) (char>? . G4edb) (char>=? . G4eda) (char=? . G4ed9) (char<? . G4ed8) (char<=? . G4ed7) (char->integer . G4ed6) (ceiling . G4ed5) (call-with-values . G4ed4) (call/cc . G4ed3) (call-with-current-continuation . G4ed2) (cddddr . G4ed1) (cdddar . G4ed0) (cddadr . G4ecf) (cddaar . G4ece) (cdaddr . G4ecd) (cdadar . G4ecc) (cdaadr . G4ecb) (cdaaar . G4eca) (cadddr . G4ec9) (caddar . G4ec8) (cadadr . G4ec7) (cadaar . G4ec6) (caaddr . G4ec5) (caadar . G4ec4) (caaadr . G4ec3) (caaaar . G4ec2) (cdddr . G4ec1) (cddar . G4ec0) (cdadr . G4ebf) (cdaar . G4ebe) (caddr . G4ebd) (cadar . G4ebc) (caadr . G4ebb) (caaar . G4eba) (cddr . G4eb9) (cdar . G4eb8) (cadr . G4eb7) (caar . G4eb6) (cdr . G4eb5) (car . G4eb4) (boolean? . G4eb3) (boolean=? . G4eb2) (atan . G4eb1) (assertion-violation . G4eb0) (asin . G4eaf) (apply . G4eae) (append . G4ead) (angle . G4eac) (acos . G4eab) (abs . G4eaa) (/ . G4ea9) (* . G4ea8) (- . G4ea7) (+ . G4ea6) (>= . G4ea5) (> . G4ea4) (= . G4ea3) (<= . G4ea2) (< . G4ea1) (library . G4ea0) (export . G4e9f) (&no-nans . G4e9e) (&no-infinities . G4e9d) (&i/o-encoding . G4e9c) (&i/o-decoding . G4e9b) (&i/o-port . G4e9a) (&i/o-file-does-not-exist . G4e99) (&i/o-file-already-exists . G4e98) (&i/o-file-is-read-only . G4e97) (&i/o-file-protection . G4e96) (&i/o-filename . G4e95) (&i/o-invalid-position . G4e94) (&i/o-write . G4e93) (&i/o-read . G4e92) (&i/o . G4e91) (&undefined . G4e90) (&syntax . G4e8f) (&lexical . G4e8e) (&implementation-restriction . G4e8d) (&non-continuable . G4e8c) (&who . G4e8b) (&irritants . G4e8a) (&assertion . G4e89) (&violation . G4e88) (&error . G4e87) (&serious . G4e86) (&warning . G4e85) (&message . G4e84) (&condition . G4e83) (define-condition-type . G4e82) (define-enumeration . G4e81) (define-record-type . G4e80) (parent-rtd . G4e7f) (nongenerative . G4e7e) (opaque . G4e7d) (sealed . G4e7c) (protocol . G4e7b) (parent . G4e7a) (immutable . G4e79) (mutable . G4e78) (fields . G4e77) (error-handling-mode . G4e76) (file-options . G4e75) (buffer-mode . G4e74) (eol-style . G4e73) (guard . G4e72) (trace-define . G4e71) (trace-lambda . G4e70) (unsyntax-splicing . G4e6f) (unsyntax . G4e6e) (unquote-splicing . G4e6d) (unquote . G4e6c) (_ . G4e6b) (else . G4e6a) (=> . G4e69) (... . G4e68) (assert . G4e67) (endianness . G4e66) (delay . G4e65) (time . G4e64) (or . G4e63) (and . G4e62) (do . G4e61) (cond . G4e60) (let* . G4e5f) (let . G4e5e) (let*-values . G4e5d) (let-values . G4e5c) (identifier-syntax . G4e5b) (with-syntax . G4e5a) (quasisyntax . G4e59) (quasiquote . G4e58) (syntax-rules . G4e57) (include . G4e56) (define-struct . G4e55) (record-constructor-descriptor . G4e54) (record-type-descriptor . G4e53) (case . G4e52) (parameterize . G4e51) (unless . G4e50) (when . G4e4f) (if . G4e4e) (letrec* . G4e4d) (letrec . G4e4c) (type-descriptor . G4e4b) (case-lambda . G4e4a) (lambda . G4e49) (syntax . G4e48) (syntax-case . G4e47) (quote . G4e46) (foreign-call . G4e45) (letrec-syntax . G4e44) (let-syntax . G4e43) (set! . G4e42) (import . G4e41) (begin . G4e40) (module . G4e3f) (define-syntax . G4e3e) (define . G4e3d)) '((G513b core-prim . &no-nans-rcd) (G513a core-prim . &no-nans-rtd) (G5139 core-prim . &no-infinities-rcd) (G5138 core-prim . &no-infinities-rtd) (G5137 core-prim . &i/o-encoding-rcd) (G5136 core-prim . &i/o-encoding-rtd) (G5135 core-prim . &i/o-decoding-rcd) (G5134 core-prim . &i/o-decoding-rtd) (G5133 core-prim . &i/o-port-rcd) (G5132 core-prim . &i/o-port-rtd) (G5131 core-prim . &i/o-file-does-not-exist-rcd) (G5130 core-prim . &i/o-file-does-not-exist-rtd) (G512f core-prim . &i/o-file-already-exists-rcd) (G512e core-prim . &i/o-file-already-exists-rtd) (G512d core-prim . &i/o-file-is-read-only-rcd) (G512c core-prim . &i/o-file-is-read-only-rtd) (G512b core-prim . &i/o-file-protection-rcd) (G512a core-prim . &i/o-file-protection-rtd) (G5129 core-prim . &i/o-filename-rcd) (G5128 core-prim . &i/o-filename-rtd) (G5127 core-prim . &i/o-invalid-position-rcd) (G5126 core-prim . &i/o-invalid-position-rtd) (G5125 core-prim . &i/o-write-rcd) (G5124 core-prim . &i/o-write-rtd) (G5123 core-prim . &i/o-read-rcd) (G5122 core-prim . &i/o-read-rtd) (G5121 core-prim . &i/o-rcd) (G5120 core-prim . &i/o-rtd) (G511f core-prim . &undefined-rcd) (G511e core-prim . &undefined-rtd) (G511d core-prim . &syntax-rcd) (G511c core-prim . &syntax-rtd) (G511b core-prim . &lexical-rcd) (G511a core-prim . &lexical-rtd) (G5119 core-prim . &implementation-restriction-rcd) (G5118 core-prim . &implementation-restriction-rtd) (G5117 core-prim . &non-continuable-rcd) (G5116 core-prim . &non-continuable-rtd) (G5115 core-prim . &who-rcd) (G5114 core-prim . &who-rtd) (G5113 core-prim . &irritants-rcd) (G5112 core-prim . &irritants-rtd) (G5111 core-prim . &assertion-rcd) (G5110 core-prim . &assertion-rtd) (G510f core-prim . &violation-rcd) (G510e core-prim . &violation-rtd) (G510d core-prim . &error-rcd) (G510c core-prim . &error-rtd) (G510b core-prim . &serious-rcd) (G510a core-prim . &serious-rtd) (G5109 core-prim . &warning-rcd) (G5108 core-prim . &warning-rtd) (G5107 core-prim . &message-rcd) (G5106 core-prim . &message-rtd) (G5105 core-prim . &condition-rcd) (G5104 core-prim . &condition-rtd) (G315a core-prim . syntax-error) (G306d core-prim . syntax-dispatch) (G5103 core-prim . pretty-print) (G5102 core-prim . eval-core) (G5101 core-prim . set-symbol-value!) (G5100 core-prim . symbol-value) (G50ff core-prim . gensym) (G50fe core-prim . void) (G4da4 core-prim . load) (G316c core-prim . interaction-environment) (G50fd core-prim . char-ready?) (G50fc core-prim . regexp?) (G50fb core-prim . read-line) (G50fa core-prim . dotted-list?) (G50f9 core-prim . circular-list?) (G50f8 core-prim . proper-list?) (G50f7 core-prim . circular-list) (G50f6 core-prim . last) (G50f5 core-prim . last-pair) (G50f4 core-prim . not-pair?) (G50f3 core-prim . split-at!) (G50f2 core-prim . split-at) (G50f1 core-prim . list=) (G50f0 core-prim . list-copy) (G50ef core-prim . list-tabulate) (G50ee core-prim . make-list) (G50ed core-prim . xcons) (G50ec core-prim . tenth) (G50eb core-prim . ninth) (G50ea core-prim . eighth) (G50e9 core-prim . seventh) (G50e8 core-prim . sixth) (G50e7 core-prim . fifth) (G50e6 core-prim . drop-right!) (G50e5 core-prim . drop-right) (G50e4 core-prim . take-right) (G50e3 core-prim . take!) (G50e2 core-prim . drop) (G50e1 core-prim . take) (G50e0 core-prim . car+cdr) (G50df core-prim . third) (G50de core-prim . second) (G50dd core-prim . first) (G50dc core-prim . assoc-ref) (G50db core-prim . alist-cons) (G50da core-prim . print) (G50d9 core-prim . format) (G50d8 core-prim . standard-library-path) (G50d7 core-prim . file-newer?) (G50d6 core-prim . stat-mtime) (G50d5 core-prim . current-directory) (G50d4 core-prim . write-to-file) (G50d3 core-prim . file->list) (G50d2 core-prim . file->string) (G50d1 core-prim . digit->integer) (G50d0 core-prim . call-with-string-input-port) (G50cf core-prim . call-with-string-io) (G50ce core-prim . string-split) (G50cd core-prim . bytevector-for-each) (G50cc core-prim . string->regexp) (G50cb core-prim . rxmatch) (G50ca core-prim . regexp-replace-all) (G50c9 core-prim . hashtable-for-each) (G50c8 core-prim . readdir) (G50c7 core-prim . get-environment-variables) (G50c6 core-prim . get-environment-variable) (G50c5 core-prim . get-command-line) (G50c4 core-prim . sys-display) (G50c3 core-prim . source-info) (G50c2 core-prim . make-compiler-instruction) (G50c1 core-prim . make-instruction) (G50c0 core-prim . set-source-info!) (G50bf core-prim . fasl-read) (G50be core-prim . fasl-write) (G50bd core-prim . receive) (G50bc core-prim . string-upcase) (G50bb core-prim . string-titlecase) (G50ba core-prim . string-normalize-nfkd) (G50b9 core-prim . string-normalize-nfkc) (G50b8 core-prim . string-normalize-nfd) (G50b7 core-prim . string-normalize-nfc) (G50b6 core-prim . string-foldcase) (G50b5 core-prim . string-downcase) (G50b4 core-prim . string-ci>?) (G50b3 core-prim . string-ci>=?) (G50b2 core-prim . string-ci=?) (G50b1 core-prim . string-ci<?) (G50b0 core-prim . string-ci<=?) (G50af core-prim . char-whitespace?) (G50ae core-prim . char-upper-case?) (G50ad core-prim . char-title-case?) (G50ac core-prim . char-numeric?) (G50ab core-prim . char-lower-case?) (G50aa core-prim . char-general-category) (G50a9 core-prim . char-upcase) (G50a8 core-prim . char-titlecase) (G50a7 core-prim . char-foldcase) (G50a6 core-prim . char-downcase) (G50a5 core-prim . char-ci>?) (G50a4 core-prim . char-ci>=?) (G50a3 core-prim . char-ci=?) (G50a2 core-prim . char-ci<?) (G50a1 core-prim . char-ci<=?) (G50a0 core-prim . char-alphabetic?) (G2e6b core-prim . make-variable-transformer) (G3162 core-prim . identifier?) (G314c core-prim . generate-temporaries) (G314e core-prim . free-identifier=?) (G3166 core-prim . syntax->datum) (G3164 core-prim . datum->syntax) (G3150 core-prim . bound-identifier=?) (G509f core-prim . record-type-descriptor?) (G509e core-prim . record-predicate) (G509d core-prim . record-mutator) (G509c core-prim . record-constructor) (G509b core-prim . record-accessor) (G509a core-prim . make-record-type-descriptor) (G5099 core-prim . make-record-constructor-descriptor) (G5098 core-prim . record?) (G5097 core-prim . record-type-uid) (G5096 core-prim . record-type-sealed?) (G5095 core-prim . record-type-parent) (G5094 core-prim . record-type-opaque?) (G5093 core-prim . record-type-name) (G5092 core-prim . record-type-generative?) (G5091 core-prim . record-type-field-names) (G5090 core-prim . record-rtd) (G508f core-prim . record-field-mutable?) (G508e core-prim . delete-file) (G508d core-prim . file-exists?) (G508c core-prim . vector-sort!) (G508b core-prim . vector-sort) (G508a core-prim . list-sort) (G5089 core-prim . symbol-hash) (G5088 core-prim . string-ci-hash) (G5087 core-prim . string-hash) (G5086 core-prim . equal-hash) (G5085 core-prim . hashtable-equivalence-function) (G5084 core-prim . make-hashtable) (G5083 core-prim . hashtable-hash-function) (G5082 core-prim . make-eqv-hashtable) (G5081 core-prim . make-eq-hashtable) (G5080 core-prim . hashtable?) (G507f core-prim . hashtable-update!) (G507e core-prim . hashtable-size) (G507d core-prim . hashtable-set!) (G507c core-prim . hashtable-ref) (G507b core-prim . hashtable-mutable?) (G507a core-prim . hashtable-keys) (G5079 core-prim . hashtable-entries) (G5078 core-prim . hashtable-delete!) (G5077 core-prim . hashtable-copy) (G5076 core-prim . hashtable-contains?) (G5075 core-prim . hashtable-clear!) (G5074 core-prim . call-with-output-file) (G5073 core-prim . call-with-input-file) (G5072 core-prim . write-char) (G5071 core-prim . write) (G5070 core-prim . with-output-to-file) (G506f core-prim . with-input-from-file) (G506e core-prim . read-char) (G506d core-prim . read) (G506c core-prim . peek-char) (G506b core-prim . open-output-file) (G506a core-prim . open-input-file) (G5069 core-prim . newline) (G5068 core-prim . display) (G5067 core-prim . close-output-port) (G5066 core-prim . close-input-port) (G5065 core-prim . eof-object?) (G5064 core-prim . eof-object) (G5063 core-prim . current-error-port) (G5062 core-prim . current-output-port) (G5061 core-prim . current-input-port) (G5060 core-prim . output-port?) (G505f core-prim . input-port?) (G505e core-prim . utf-8-codec) (G505d core-prim . utf-16-codec) (G505c core-prim . transcoder-error-handling-mode) (G505b core-prim . transcoder-eol-style) (G505a core-prim . transcoder-codec) (G5059 core-prim . transcoded-port) (G5058 core-prim . textual-port?) (G5057 core-prim . string->bytevector) (G5056 core-prim . standard-output-port) (G5055 core-prim . standard-input-port) (G5054 core-prim . standard-error-port) (G5053 core-prim . set-port-position!) (G5052 core-prim . put-u8) (G5051 core-prim . put-string) (G5050 core-prim . put-datum) (G504f core-prim . put-char) (G504e core-prim . put-bytevector) (G504d core-prim . port?) (G504c core-prim . port-transcoder) (G504b core-prim . port-position) (G504a core-prim . port-has-set-port-position!?) (G5049 core-prim . port-has-port-position?) (G5048 core-prim . port-eof?) (G5047 core-prim . output-port-buffer-mode) (G5046 core-prim . open-string-output-port) (G5045 core-prim . open-string-input-port) (G5044 core-prim . open-file-output-port) (G5043 core-prim . open-file-input/output-port) (G5042 core-prim . open-file-input-port) (G5041 core-prim . open-bytevector-output-port) (G5040 core-prim . open-bytevector-input-port) (G503f core-prim . native-transcoder) (G503e core-prim . native-eol-style) (G503d core-prim . make-transcoder) (G503c core-prim . latin-1-codec) (G4c7b core-prim . make-i/o-write-error) (G4c67 core-prim . make-i/o-read-error) (G4d12 core-prim . make-i/o-port-error) (G4c90 core-prim . make-i/o-invalid-position-error) (G4ca9 core-prim . make-i/o-filename-error) (G4cc1 core-prim . make-i/o-file-protection-error) (G4cd5 core-prim . make-i/o-file-is-read-only-error) (G4cfd core-prim . make-i/o-file-does-not-exist-error) (G4ce9 core-prim . make-i/o-file-already-exists-error) (G4c53 core-prim . make-i/o-error) (G4d3f core-prim . make-i/o-encoding-error) (G4d2a core-prim . make-i/o-decoding-error) (G503b core-prim . make-custom-textual-output-port) (G503a core-prim . make-custom-textual-input/output-port) (G5039 core-prim . make-custom-textual-input-port) (G5038 core-prim . make-custom-binary-output-port) (G5037 core-prim . make-custom-binary-input/output-port) (G5036 core-prim . make-custom-binary-input-port) (G5035 core-prim . make-bytevector) (G5034 core-prim . lookahead-u8) (G5033 core-prim . lookahead-char) (G4c7d core-prim . i/o-write-error?) (G4c69 core-prim . i/o-read-error?) (G4d16 core-prim . i/o-port-error?) (G4c94 core-prim . i/o-invalid-position-error?) (G4cad core-prim . i/o-filename-error?) (G4cc3 core-prim . i/o-file-protection-error?) (G4cd7 core-prim . i/o-file-is-read-only-error?) (G4cff core-prim . i/o-file-does-not-exist-error?) (G4ceb core-prim . i/o-file-already-exists-error?) (G4c55 core-prim . i/o-error?) (G4d18 core-prim . i/o-error-port) (G4caf core-prim . i/o-error-filename) (G4d43 core-prim . i/o-encoding-error?) (G4d45 core-prim . i/o-encoding-error-char) (G4d2c core-prim . i/o-decoding-error?) (G5032 core-prim . get-u8) (G5031 core-prim . get-string-n!) (G5030 core-prim . get-string-n) (G502f core-prim . get-string-all) (G502e core-prim . get-line) (G502d core-prim . get-datum) (G502c core-prim . get-char) (G502b core-prim . get-bytevector-some) (G502a core-prim . get-bytevector-n!) (G5029 core-prim . get-bytevector-n) (G5028 core-prim . get-bytevector-all) (G5027 core-prim . flush-output-port) (G5026 core-prim . close-port) (G313a core-prim . scheme-report-environment) (G5025 core-prim . quotient) (G3138 core-prim . null-environment) (G5024 core-prim . remainder) (G5023 core-prim . modulo) (G5022 core-prim . inexact->exact) (G5021 core-prim . force) (G5020 core-prim . exact->inexact) (G501f core-prim . exit) (G4d9e core-prim . command-line) (G501e core-prim . string-fill!) (G501d core-prim . string-set!) (G501c core-prim . set-cdr!) (G501b core-prim . set-car!) (G501a core-prim . remove) (G5019 core-prim . remv) (G5018 core-prim . remp) (G5017 core-prim . remq) (G5016 core-prim . partition) (G5015 core-prim . memv) (G5014 core-prim . memq) (G5013 core-prim . memp) (G5012 core-prim . member) (G5011 core-prim . exists) (G5010 core-prim . for-all) (G500f core-prim . fold-right) (G500e core-prim . fold-left) (G500d core-prim . find) (G500c core-prim . filter) (G500b core-prim . cons*) (G500a core-prim . assv) (G5009 core-prim . assq) (G5008 core-prim . assp) (G5007 core-prim . assoc) (G5006 core-prim . call-with-string-output-port) (G5005 core-prim . call-with-port) (G5004 core-prim . call-with-bytevector-output-port) (G5003 core-prim . bytevector->string) (G5002 core-prim . buffer-mode?) (G5001 core-prim . binary-port?) (G5000 core-prim . with-exception-handler) (G4fff core-prim . raise-continuable) (G4ffe core-prim . raise) (G313e core-prim . eval) (G3136 core-prim . environment) (G4ffd core-prim . make-enumeration) (G4ffc core-prim . enum-set=?) (G4ffb core-prim . enum-set-universe) (G4ffa core-prim . enum-set-union) (G4ff9 core-prim . enum-set-subset?) (G4ff8 core-prim . enum-set-projection) (G4ff7 core-prim . enum-set-member?) (G4ff6 core-prim . enum-set-intersection) (G4ff5 core-prim . enum-set-indexer) (G4ff4 core-prim . enum-set-difference) (G4ff3 core-prim . enum-set-constructor) (G4ff2 core-prim . enum-set-complement) (G4ff1 core-prim . enum-set->list) (G4b71 core-prim . who-condition?) (G4af1 core-prim . warning?) (G4b2d core-prim . violation?) (G4be1 core-prim . undefined-violation?) (G4bc9 core-prim . syntax-violation?) (G4bcd core-prim . syntax-violation-subform) (G4bcb core-prim . syntax-violation-form) (G3160 core-prim . syntax-violation) (G4ff0 core-prim . simple-conditions) (G4b05 core-prim . serious-condition?) (G4b87 core-prim . non-continuable-violation?) (G4adb core-prim . message-condition?) (G4b6d core-prim . make-who-condition) (G4aef core-prim . make-warning) (G4b2b core-prim . make-violation) (G4bdf core-prim . make-undefined-violation) (G4bc3 core-prim . make-syntax-violation) (G4b03 core-prim . make-serious-condition) (G4b85 core-prim . make-non-continuable-violation) (G4ad7 core-prim . make-message-condition) (G4bad core-prim . make-lexical-violation) (G4b54 core-prim . make-irritants-condition) (G4b99 core-prim . make-implementation-restriction-violation) (G4b17 core-prim . make-error) (G4b3f core-prim . make-assertion-violation) (G4baf core-prim . lexical-violation?) (G4b58 core-prim . irritants-condition?) (G4b9b core-prim . implementation-restriction-violation?) (G4b19 core-prim . error?) (G4b73 core-prim . condition-who) (G4fef core-prim . condition-predicate) (G4add core-prim . condition-message) (G4b5a core-prim . condition-irritants) (G4fee core-prim . condition-accessor) (G4fed core-prim . condition) (G4b41 core-prim . assertion-violation?) (G4fec core-prim . condition?) (G4feb core-prim . utf32->string) (G4fea core-prim . utf16->string) (G4fe9 core-prim . utf8->string) (G4fe8 core-prim . uint-list->bytevector) (G4fe7 core-prim . u8-list->bytevector) (G4fe6 core-prim . string->utf8) (G4fe5 core-prim . string->utf32) (G4fe4 core-prim . string->utf16) (G4fe3 core-prim . sint-list->bytevector) (G4fe2 core-prim . native-endianness) (G4fe1 core-prim . bytevector?) (G4fe0 core-prim . bytevector=?) (G4fdf core-prim . bytevector-uint-set!) (G4fde core-prim . bytevector-uint-ref) (G4fdd core-prim . bytevector-u8-set!) (G4fdc core-prim . bytevector-u8-ref) (G4fdb core-prim . bytevector-u64-set!) (G4fda core-prim . bytevector-u64-ref) (G4fd9 core-prim . bytevector-u64-native-set!) (G4fd8 core-prim . bytevector-u64-native-ref) (G4fd7 core-prim . bytevector-u32-set!) (G4fd6 core-prim . bytevector-u32-ref) (G4fd5 core-prim . bytevector-u32-native-set!) (G4fd4 core-prim . bytevector-u32-native-ref) (G4fd3 core-prim . bytevector-u16-set!) (G4fd2 core-prim . bytevector-u16-ref) (G4fd1 core-prim . bytevector-u16-native-set!) (G4fd0 core-prim . bytevector-u16-native-ref) (G4fcf core-prim . bytevector-sint-set!) (G4fce core-prim . bytevector-sint-ref) (G4fcd core-prim . bytevector-s8-set!) (G4fcc core-prim . bytevector-s8-ref) (G4fcb core-prim . bytevector-s64-set!) (G4fca core-prim . bytevector-s64-ref) (G4fc9 core-prim . bytevector-s64-native-set!) (G4fc8 core-prim . bytevector-s64-native-ref) (G4fc7 core-prim . bytevector-s32-set!) (G4fc6 core-prim . bytevector-s32-ref) (G4fc5 core-prim . bytevector-s32-native-set!) (G4fc4 core-prim . bytevector-s32-native-ref) (G4fc3 core-prim . bytevector-s16-set!) (G4fc2 core-prim . bytevector-s16-ref) (G4fc1 core-prim . bytevector-s16-native-set!) (G4fc0 core-prim . bytevector-s16-native-ref) (G4fbf core-prim . bytevector-length) (G4fbe core-prim . bytevector-ieee-single-ref) (G4fbd core-prim . bytevector-ieee-single-native-set!) (G4fbc core-prim . bytevector-ieee-single-native-ref) (G4fbb core-prim . bytevector-ieee-double-ref) (G4fba core-prim . bytevector-ieee-double-native-set!) (G4fb9 core-prim . bytevector-ieee-double-native-ref) (G4fb8 core-prim . bytevector-fill!) (G4fb7 core-prim . bytevector-copy!) (G4fb6 core-prim . bytevector-copy) (G4fb5 core-prim . bytevector->uint-list) (G4fb4 core-prim . bytevector->u8-list) (G4fb3 core-prim . bytevector->sint-list) (G4fb2 core-prim . no-nans-violation?) (G4fb1 core-prim . no-infinities-violation?) (G4fb0 core-prim . make-no-nans-violation) (G4faf core-prim . make-no-infinities-violation) (G4fae core-prim . real->flonum) (G4fad core-prim . flzero?) (G4fac core-prim . fltruncate) (G4fab core-prim . fltan) (G4faa core-prim . flsqrt) (G4fa9 core-prim . flsin) (G4fa8 core-prim . flround) (G4fa7 core-prim . flpositive?) (G4fa6 core-prim . flonum?) (G4fa5 core-prim . flodd?) (G4fa4 core-prim . flnumerator) (G4fa3 core-prim . flnegative?) (G4fa2 core-prim . flnan?) (G4fa1 core-prim . flmod0) (G4fa0 core-prim . flmod) (G4f9f core-prim . flmin) (G4f9e core-prim . flmax) (G4f9d core-prim . fllog) (G4f9c core-prim . flinteger?) (G4f9b core-prim . flinfinite?) (G4f9a core-prim . flfloor) (G4f99 core-prim . flfinite?) (G4f98 core-prim . flexpt) (G4f97 core-prim . flexp) (G4f96 core-prim . fleven?) (G4f95 core-prim . fldiv0-and-mod0) (G4f94 core-prim . fldiv0) (G4f93 core-prim . fldiv-and-mod) (G4f92 core-prim . fldiv) (G4f91 core-prim . fldenominator) (G4f90 core-prim . flcos) (G4f8f core-prim . flceiling) (G4f8e core-prim . flatan) (G4f8d core-prim . flasin) (G4f8c core-prim . flacos) (G4f8b core-prim . flabs) (G4f8a core-prim . fl>?) (G4f89 core-prim . fl>=?) (G4f88 core-prim . fl=?) (G4f87 core-prim . fl<?) (G4f86 core-prim . fl<=?) (G4f85 core-prim . fl/) (G4f84 core-prim . fl-) (G4f83 core-prim . fl+) (G4f82 core-prim . fl*) (G4f81 core-prim . fixnum->flonum) (G4f80 core-prim . fxzero?) (G4f7f core-prim . fxxor) (G4f7e core-prim . fxrotate-bit-field) (G4f7d core-prim . fxreverse-bit-field) (G4f7c core-prim . fxpositive?) (G4f7b core-prim . fxodd?) (G4f7a core-prim . fxnot) (G4f79 core-prim . fxnegative?) (G4f78 core-prim . fxmod0) (G4f77 core-prim . fxmod) (G4f76 core-prim . fxmin) (G4f75 core-prim . fxmax) (G4f74 core-prim . fxlength) (G4f73 core-prim . fxior) (G4f72 core-prim . fxif) (G4f71 core-prim . fxfirst-bit-set) (G4f70 core-prim . fxeven?) (G4f6f core-prim . fxdiv0-and-mod0) (G4f6e core-prim . fxdiv0) (G4f6d core-prim . fxdiv-and-mod) (G4f6c core-prim . fxdiv) (G4f6b core-prim . fxcopy-bit-field) (G4f6a core-prim . fxcopy-bit) (G4f69 core-prim . fxbit-set?) (G4f68 core-prim . fxbit-field) (G4f67 core-prim . fxbit-count) (G4f66 core-prim . fxarithmetic-shift-right) (G4f65 core-prim . fxarithmetic-shift-left) (G4f64 core-prim . fxarithmetic-shift) (G4f63 core-prim . fxand) (G4f62 core-prim . fx>?) (G4f61 core-prim . fx>=?) (G4f60 core-prim . fx=?) (G4f5f core-prim . fx<?) (G4f5e core-prim . fx<=?) (G4f5d core-prim . fx-/carry) (G4f5c core-prim . fx-) (G4f5b core-prim . fx+/carry) (G4f5a core-prim . fx+) (G4f59 core-prim . fx*/carry) (G4f58 core-prim . fx*) (G4f57 core-prim . greatest-fixnum) (G4f56 core-prim . least-fixnum) (G4f55 core-prim . fixnum-width) (G4f54 core-prim . fixnum?) (G4f53 core-prim . bitwise-rotate-bit-field) (G4f52 core-prim . bitwise-reverse-bit-field) (G4f51 core-prim . bitwise-length) (G4f50 core-prim . bitwise-if) (G4f4f core-prim . bitwise-first-bit-set) (G4f4e core-prim . bitwise-copy-bit-field) (G4f4d core-prim . bitwise-copy-bit) (G4f4c core-prim . bitwise-bit-set?) (G4f4b core-prim . bitwise-bit-field) (G4f4a core-prim . bitwise-bit-count) (G4f49 core-prim . bitwise-xor) (G4f48 core-prim . bitwise-ior) (G4f47 core-prim . bitwise-and) (G4f46 core-prim . bitwise-not) (G4f45 core-prim . bitwise-arithmetic-shift-right) (G4f44 core-prim . bitwise-arithmetic-shift-left) (G4f43 core-prim . bitwise-arithmetic-shift) (G4f42 core-prim . zero?) (G4f41 core-prim . vector?) (G4f40 core-prim . vector-set!) (G4f3f core-prim . vector-ref) (G4f3e core-prim . vector-map) (G4f3d core-prim . vector-length) (G4f3c core-prim . vector-for-each) (G4f3b core-prim . vector-fill!) (G4f3a core-prim . vector->list) (G4f39 core-prim . vector) (G4f38 core-prim . values) (G4f37 core-prim . truncate) (G4f36 core-prim . tan) (G4f35 core-prim . symbol?) (G4f34 core-prim . symbol=?) (G4f33 core-prim . symbol->string) (G4f32 core-prim . substring) (G4f31 core-prim . string?) (G4f30 core-prim . string>?) (G4f2f core-prim . string>=?) (G4f2e core-prim . string=?) (G4f2d core-prim . string<?) (G4f2c core-prim . string<=?) (G4f2b core-prim . string-ref) (G4f2a core-prim . string-length) (G4f29 core-prim . string-for-each) (G4f28 core-prim . string-copy) (G4f27 core-prim . string-append) (G4f26 core-prim . string->symbol) (G4f25 core-prim . string->number) (G4f24 core-prim . string->list) (G4f23 core-prim . string) (G4f22 core-prim . sqrt) (G4f21 core-prim . sin) (G4f20 core-prim . round) (G4f1f core-prim . reverse) (G4f1e core-prim . real?) (G4f1d core-prim . real-valued?) (G4f1c core-prim . real-part) (G4f1b core-prim . rationalize) (G4f1a core-prim . rational?) (G4f19 core-prim . rational-valued?) (G4f18 core-prim . procedure?) (G4f17 core-prim . positive?) (G4f16 core-prim . pair?) (G4f15 core-prim . odd?) (G4f14 core-prim . numerator) (G4f13 core-prim . number?) (G4f12 core-prim . number->string) (G4f11 core-prim . null?) (G4f10 core-prim . not) (G4f0f core-prim . negative?) (G4f0e core-prim . nan?) (G4f0d core-prim . min) (G4f0c core-prim . max) (G4f0b core-prim . map) (G4f0a core-prim . make-vector) (G4f09 core-prim . make-string) (G4f08 core-prim . make-rectangular) (G4f07 core-prim . make-polar) (G4f06 core-prim . magnitude) (G4f05 core-prim . log) (G4f04 core-prim . list?) (G4f03 core-prim . list-tail) (G4f02 core-prim . list-ref) (G4f01 core-prim . list->vector) (G4f00 core-prim . list->string) (G4eff core-prim . list) (G4efe core-prim . length) (G4efd core-prim . lcm) (G4efc core-prim . integer?) (G4efb core-prim . integer-valued?) (G4efa core-prim . integer->char) (G4ef9 core-prim . infinite?) (G4ef8 core-prim . inexact?) (G4ef7 core-prim . inexact) (G4ef6 core-prim . imag-part) (G4ef5 core-prim . gcd) (G4ef4 core-prim . for-each) (G4ef3 core-prim . floor) (G4ef2 core-prim . finite?) (G4ef1 core-prim . expt) (G4ef0 core-prim . exp) (G4eef core-prim . exact?) (G4eee core-prim . exact-integer-sqrt) (G4eed core-prim . exact) (G4eec core-prim . even?) (G4eeb core-prim . error) (G4eea core-prim . eqv?) (G4ee9 core-prim . equal?) (G4ee8 core-prim . eq?) (G4ee7 core-prim . dynamic-wind) (G4ee6 core-prim . div0-and-mod0) (G4ee5 core-prim . mod0) (G4ee4 core-prim . div0) (G4ee3 core-prim . div-and-mod) (G4ee2 core-prim . mod) (G4ee1 core-prim . div) (G4ee0 core-prim . denominator) (G4edf core-prim . cos) (G4ede core-prim . cons) (G4edd core-prim . complex?) (G4edc core-prim . char?) (G4edb core-prim . char>?) (G4eda core-prim . char>=?) (G4ed9 core-prim . char=?) (G4ed8 core-prim . char<?) (G4ed7 core-prim . char<=?) (G4ed6 core-prim . char->integer) (G4ed5 core-prim . ceiling) (G4ed4 core-prim . call-with-values) (G4ed3 core-prim . call/cc) (G4ed2 core-prim . call-with-current-continuation) (G4ed1 core-prim . cddddr) (G4ed0 core-prim . cdddar) (G4ecf core-prim . cddadr) (G4ece core-prim . cddaar) (G4ecd core-prim . cdaddr) (G4ecc core-prim . cdadar) (G4ecb core-prim . cdaadr) (G4eca core-prim . cdaaar) (G4ec9 core-prim . cadddr) (G4ec8 core-prim . caddar) (G4ec7 core-prim . cadadr) (G4ec6 core-prim . cadaar) (G4ec5 core-prim . caaddr) (G4ec4 core-prim . caadar) (G4ec3 core-prim . caaadr) (G4ec2 core-prim . caaaar) (G4ec1 core-prim . cdddr) (G4ec0 core-prim . cddar) (G4ebf core-prim . cdadr) (G4ebe core-prim . cdaar) (G4ebd core-prim . caddr) (G4ebc core-prim . cadar) (G4ebb core-prim . caadr) (G4eba core-prim . caaar) (G4eb9 core-prim . cddr) (G4eb8 core-prim . cdar) (G4eb7 core-prim . cadr) (G4eb6 core-prim . caar) (G4eb5 core-prim . cdr) (G4eb4 core-prim . car) (G4eb3 core-prim . boolean?) (G4eb2 core-prim . boolean=?) (G4eb1 core-prim . atan) (G4eb0 core-prim . assertion-violation) (G4eaf core-prim . asin) (G4eae core-prim . apply) (G4ead core-prim . append) (G4eac core-prim . angle) (G4eab core-prim . acos) (G4eaa core-prim . abs) (G4ea9 core-prim . /) (G4ea8 core-prim . *) (G4ea7 core-prim . -) (G4ea6 core-prim . +) (G4ea5 core-prim . >=) (G4ea4 core-prim . >) (G4ea3 core-prim . =) (G4ea2 core-prim . <=) (G4ea1 core-prim . <) (G4ea0 core-prim . library) (G4e9f core-prim . export) (G4e9e $core-rtd &no-nans-rtd &no-nans-rcd) (G4e9d $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e9c $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e9b $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e9a $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e99 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e98 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e97 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e96 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e95 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e94 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e93 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e92 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e91 $core-rtd &i/o-rtd &i/o-rcd) (G4e90 $core-rtd &undefined-rtd &undefined-rcd) (G4e8f $core-rtd &syntax-rtd &syntax-rcd) (G4e8e $core-rtd &lexical-rtd &lexical-rcd) (G4e8d $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e8c $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e8b $core-rtd &who-rtd &who-rcd) (G4e8a $core-rtd &irritants-rtd &irritants-rcd) (G4e89 $core-rtd &assertion-rtd &assertion-rcd) (G4e88 $core-rtd &violation-rtd &violation-rcd) (G4e87 $core-rtd &error-rtd &error-rcd) (G4e86 $core-rtd &serious-rtd &serious-rcd) (G4e85 $core-rtd &warning-rtd &warning-rcd) (G4e84 $core-rtd &message-rtd &message-rcd) (G4e83 $core-rtd &condition-rtd &condition-rcd) (G4e82 macro . define-condition-type) (G4e81 macro . define-enumeration) (G4e80 macro . define-record-type) (G4e7f macro . parent-rtd) (G4e7e macro . nongenerative) (G4e7d macro . opaque) (G4e7c macro . sealed) (G4e7b macro . protocol) (G4e7a macro . parent) (G4e79 macro . immutable) (G4e78 macro . mutable) (G4e77 macro . fields) (G4e76 macro . error-handling-mode) (G4e75 macro . file-options) (G4e74 macro . buffer-mode) (G4e73 macro . eol-style) (G4e72 macro . guard) (G4e71 macro . trace-define) (G4e70 macro . trace-lambda) (G4e6f macro . unsyntax-splicing) (G4e6e macro . unsyntax) (G4e6d macro . unquote-splicing) (G4e6c macro . unquote) (G4e6b macro . _) (G4e6a macro . else) (G4e69 macro . =>) (G4e68 macro . ...) (G4e67 macro . assert) (G4e66 macro . endianness) (G4e65 macro . delay) (G4e64 macro . time) (G4e63 macro . or) (G4e62 macro . and) (G4e61 macro . do) (G4e60 macro . cond) (G4e5f macro . let*) (G4e5e macro . let) (G4e5d macro . let*-values) (G4e5c macro . let-values) (G4e5b macro . identifier-syntax) (G4e5a macro . with-syntax) (G4e59 macro . quasisyntax) (G4e58 macro . quasiquote) (G4e57 macro . syntax-rules) (G4e56 macro . include) (G4e55 macro . define-struct) (G4e54 core-macro . record-constructor-descriptor) (G4e53 core-macro . record-type-descriptor) (G4e52 macro . case) (G4e51 macro . parameterize) (G4e50 macro . unless) (G4e4f macro . when) (G4e4e core-macro . if) (G4e4d core-macro . letrec*) (G4e4c core-macro . letrec) (G4e4b core-macro . type-descriptor) (G4e4a core-macro . case-lambda) (G4e49 core-macro . lambda) (G4e48 core-macro . syntax) (G4e47 core-macro . syntax-case) (G4e46 core-macro . quote) (G4e45 core-macro . foreign-call) (G4e44 letrec-syntax) (G4e43 let-syntax) (G4e42 set!) (G4e41 import) (G4e40 begin) (G4e3f module) (G4e3e define-syntax) (G4e3d define)) values values '#f '#f '#f '#f) (G2c1e@G2ab1@install-library 'G515c '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G5103) (eval-core . G5102) (set-symbol-value! . G5101) (symbol-value . G5100) (gensym . G50ff) (void . G50fe)) '() values values '#f '#f '#f '#f) (G2c1e@G2ab1@install-library 'G515d '(mosh) '() '() '() '() '((set-symbol-value! . G5101) (symbol-value . G5100) (standard-library-path . G50d8) (get-command-line . G50c5) (sys-display . G50c4) (source-info . G50c3) (make-compiler-instruction . G50c2) (make-instruction . G50c1) (set-source-info! . G50c0) (fasl-read . G50bf) (fasl-write . G50be) (include . G4e56)) '() values values '#f '#f '#f '#f) (G2c1e@G2ab1@install-library 'G515e '(mosh backend) '() '() '() '() '((receive . G50bd)) '() values values '#f '#f '#f '#f) (G2c1e@G2ab1@install-library 'G515f '(mosh file) '() '() '() '() '((read-line . G50fb) (file-newer? . G50d7) (stat-mtime . G50d6) (current-directory . G50d5) (write-to-file . G50d4) (file->list . G50d3) (file->string . G50d2)) '() values values '#f '#f '#f '#f) (G2c1e@G2ab1@install-library 'G5160 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G50cd)) '() values values '#f '#f '#f '#f) (G2c1e@G2ab1@install-library 'G5161 '(mosh number) '() '() '() '() '((digit->integer . G50d1)) '() values values '#f '#f '#f '#f) (G2c1e@G2ab1@install-library 'G5162 '(mosh string) '() '() '() '() '((print . G50da) (format . G50d9) (call-with-string-input-port . G50d0) (call-with-string-io . G50cf) (string-split . G50ce) (string->regexp . G50cc)) '() values values '#f '#f '#f '#f) (G2c1e@G2ab1@install-library 'G5163 '(mosh list) '() '() '() '() '((assoc-ref . G50dc)) '() values values '#f '#f '#f '#f) (G2c1e@G2ab1@install-library 'G5164 '(mosh regexp) '() '() '() '() '((rxmatch . G50cb) (regexp-replace-all . G50ca)) '() values values '#f '#f '#f '#f) (G2c1e@G2ab1@install-library 'G5165 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G50c9)) '() values values '#f '#f '#f '#f) (G2c1e@G2ab1@install-library 'G5166 '(system) '() '() '() '() '((readdir . G50c8) (get-environment-variables . G50c7) (get-environment-variable . G50c6)) '() values values '#f '#f '#f '#f) (G2c1e@G2ab1@install-library 'G5167 '(srfi :1) '() '() '() '() '((dotted-list? . G50fa) (circular-list? . G50f9) (proper-list? . G50f8) (circular-list . G50f7) (last . G50f6) (last-pair . G50f5) (not-pair? . G50f4) (split-at! . G50f3) (split-at . G50f2) (list= . G50f1) (list-copy . G50f0) (list-tabulate . G50ef) (make-list . G50ee) (xcons . G50ed) (tenth . G50ec) (ninth . G50eb) (eighth . G50ea) (seventh . G50e9) (sixth . G50e8) (fifth . G50e7) (drop-right! . G50e6) (drop-right . G50e5) (take-right . G50e4) (take! . G50e3) (drop . G50e2) (take . G50e1) (car+cdr . G50e0) (third . G50df) (second . G50de) (first . G50dd) (alist-cons . G50db)) '() values values '#f '#f '#f '#f))
((lambda (G4d99@for-each-with-index G4d9b@repl G4d9d@trace-printer G4d9f@command-line G4da1@local-library-path G4da3@load/args G4da5@load G4da7@ironscheme-build G4da9@eval-top-level G4dab@compile-system-libraries G4dad@compile G4daf@compile->closure G4db1@pre-compile-r6rs-file G4db3@load-r6rs-top-level G4db5@write-record) (begin (set! G4d99@for-each-with-index (lambda (G4dca@proc G4dcb@lst) (letrec ((G4dce@loop (lambda (G4dd0@i G4dd1@lst) (if (null? G4dd1@lst) (if '#f '#f (void)) (begin (G4dca@proc G4dd0@i (car G4dd1@lst)) (G4dce@loop (+ G4dd0@i '1) (cdr G4dd1@lst))))))) (G4dce@loop '1 G4dcb@lst)))) (set! G4d9b@repl (lambda G4dd4@x ((lambda (G4dd7@rec) (begin (set! G4dd7@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4dd9@G4dd8) (with-exception-handler (lambda (G4ddb@e) (G4dd9@G4dd8 (if '#t (G4d99@for-each-with-index (lambda (G4ddd@i G4dde@x) ((lambda (G4de1@rtd) (begin (format '#t '"   ~d. ~a" G4ddd@i (record-type-name G4de1@rtd)) ((lambda (G4de3@v) ((lambda (G4de5@t) (if (memv G4de5@t '(0)) (newline) (if (memv G4de5@t '(1)) (begin (display '": ") (write ((record-accessor G4de1@rtd '0) G4dde@x)) (newline)) (begin (display '":\n") ((letrec ((G4de7@f (lambda (G4de9@i) (if (not (= G4de9@i (vector-length G4de3@v))) (begin (display '"       ") (display (vector-ref G4de3@v G4de9@i)) (display '": ") (write ((record-accessor G4de1@rtd G4de9@i) G4dde@x)) (newline) (G4de7@f (+ G4de9@i '1))) (void))))) G4de7@f) '0))))) (vector-length G4de3@v))) (record-type-field-names G4de1@rtd)))) (record-rtd G4dde@x))) (simple-conditions G4ddb@e)) (raise G4ddb@e)))) (lambda () (begin '#f ((lambda (G4deb@line) (if (eof-object? G4deb@line) (exit) (write (G4da9@eval-top-level (call-with-port (open-string-input-port G4deb@line) read))))) (get-line (current-input-port)))))))) (newline) (G4dd7@rec)))) (G4dd7@rec))) '#f))) (set! G4d9d@trace-printer (G297d@G2890@make-parameter write)) (set! G4d9f@command-line (G297d@G2890@make-parameter (get-command-line))) (set! G4da1@local-library-path (lambda (G4ded@filename) (cons '"." (G2c0e@G2a91@library-path)))) (set! G4da3@load/args (lambda (G4def@filename . G4df1@args) (begin (apply G4db3@load-r6rs-top-level G4def@filename 'load G4df1@args) (void)))) (set! G4da5@load (lambda (G4df3@filename) (begin (apply G4db3@load-r6rs-top-level G4df3@filename 'load (G4d9f@command-line)) (void)))) (set! G4da7@ironscheme-build (lambda () (G4da5@load '"ironscheme-buildscript.ss"))) (set! G4da9@eval-top-level (lambda (G4df5@x) (G4a94@G313f@eval G4df5@x (G4aab@G316d@interaction-environment)))) (set! G4dab@compile-system-libraries (lambda () (G4da9@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4dad@compile (lambda (G4df7@filename) (G4db3@load-r6rs-top-level G4df7@filename 'compile))) (set! G4daf@compile->closure (lambda (G4df9@filename) (G4db3@load-r6rs-top-level G4df9@filename 'closure))) (set! G4db1@pre-compile-r6rs-file (lambda (G4dfb@filename) (G4db3@load-r6rs-top-level G4dfb@filename 'compile))) (set! G4db3@load-r6rs-top-level (lambda (G4dfd@filename G4dfe@how . G4e01@args) ((lambda (G4e05@G4e03@library-path G4e06@G4e04@library-path) ((lambda (G4e09@swap) (dynamic-wind G4e09@swap (lambda () ((lambda (G4e0b@x*) ((lambda (G4e0d@t) (if (memv G4e0d@t '(closure)) (G4aaa@G316b@pre-compile-r6rs-top-level G4e0b@x*) (if (memv G4e0d@t '(load)) ((lambda (G4e11@G4e0f@command-line G4e12@G4e10@command-line) ((lambda (G4e15@swap) (dynamic-wind G4e15@swap (lambda () ((G4aa9@G3169@compile-r6rs-top-level G4e0b@x*))) G4e15@swap)) (lambda () ((lambda (G4e17@t) (begin (G4e11@G4e0f@command-line G4e12@G4e10@command-line) (set! G4e12@G4e10@command-line G4e17@t))) (G4e11@G4e0f@command-line))))) G4d9f@command-line (cons G4dfd@filename (car G4e01@args))) (if (memv G4e0d@t '(compile)) (begin (G4aa9@G3169@compile-r6rs-top-level G4e0b@x*) (G2c12@G2a99@serialize-all G2978@G2886@serialize-library G29e2@G298b@compile-core-expr)) (if '#f '#f (void)))))) G4dfe@how)) (with-input-from-file G4dfd@filename (lambda () ((letrec ((G4e19@f (lambda () ((lambda (G4e1b@x) (if (eof-object? G4e1b@x) '() (cons G4e1b@x (G4e19@f)))) (G2972@G287a@read-annotated))))) G4e19@f)))))) G4e09@swap)) (lambda () ((lambda (G4e1d@t) (begin (G4e05@G4e03@library-path G4e06@G4e04@library-path) (set! G4e06@G4e04@library-path G4e1d@t))) (G4e05@G4e03@library-path))))) G2c0e@G2a91@library-path (G4da1@local-library-path G4dfd@filename)))) (set! G4db5@write-record (lambda (G4e1f@record G4e20@port) ((lambda (G4e23@rtd) (begin (format G4e20@port '"    ~a" (record-type-name G4e23@rtd)) ((lambda (G4e25@v) ((lambda (G4e27@t) (if (memv G4e27@t '(0)) (newline) (if (memv G4e27@t '(1)) (begin (display '": " G4e20@port) (write ((record-accessor G4e23@rtd '0) G4e1f@record) G4e20@port) (newline G4e20@port)) (begin (display '":\n") ((letrec ((G4e29@f (lambda (G4e2b@i) (if (not (= G4e2b@i (vector-length G4e25@v))) (begin (display '"       " G4e20@port) (display (vector-ref G4e25@v G4e2b@i) G4e20@port) (display '": " G4e20@port) (write ((record-accessor G4e23@rtd G4e2b@i) G4e1f@record) G4e20@port) (newline G4e20@port) (G4e29@f (+ G4e2b@i '1))) (void))))) G4e29@f) '0))))) (vector-length G4e25@v))) (record-type-field-names G4e23@rtd)))) (record-rtd G4e1f@record)))) (begin (set! G4e3b@G4db5@write-record G4db5@write-record) (set! G4e3a@G4db3@load-r6rs-top-level G4db3@load-r6rs-top-level) (set! G4e39@G4db1@pre-compile-r6rs-file G4db1@pre-compile-r6rs-file) (set! G4e38@G4daf@compile->closure G4daf@compile->closure) (set! G4e37@G4dad@compile G4dad@compile) (set! G4e36@G4dab@compile-system-libraries G4dab@compile-system-libraries) (set! G4e35@G4da9@eval-top-level G4da9@eval-top-level) (set! G4e34@G4da7@ironscheme-build G4da7@ironscheme-build) (set! G4e33@G4da5@load G4da5@load) (set! G4e32@G4da3@load/args G4da3@load/args) (set! G4e31@G4da1@local-library-path G4da1@local-library-path) (set! G4e30@G4d9f@command-line G4d9f@command-line) (set! G4e2f@G4d9d@trace-printer G4d9d@trace-printer) (set! G4e2e@G4d9b@repl G4d9b@repl) (set! G4e2d@G4d99@for-each-with-index G4d99@for-each-with-index) (G2c13@G2a9b@current-precompiled-library-loader G2979@G2888@load-serialized-library) (set-symbol-value! 'load G4da5@load) (set-symbol-value! 'pre-compile-r6rs-file G4db1@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4da9@eval-top-level) (set-symbol-value! 'int-env-syms G4a8b@G312d@interaction-environment-symbols) (set-symbol-value! 'expanded2core G29e1@G2989@expanded->core) (set-symbol-value! 'trace-printer G4d9d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2c0e@G2a91@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4db6@args G4db7@port) (with-exception-handler (lambda (G4dba@c) (begin (display '" Condition components:\n" G4db7@port) (G4d99@for-each-with-index (lambda (G4dbc@i G4dbd@x) ((lambda (G4dc0@rtd) (begin (format G4db7@port '"   ~d. ~a" G4dbc@i (record-type-name G4dc0@rtd)) ((lambda (G4dc2@v) ((lambda (G4dc4@t) (if (memv G4dc4@t '(0)) (newline) (if (memv G4dc4@t '(1)) (begin (display '": ") (write ((record-accessor G4dc0@rtd '0) G4dbd@x)) (newline)) (begin (display '":\n") ((letrec ((G4dc6@f (lambda (G4dc8@i) (if (not (= G4dc8@i (vector-length G4dc2@v))) (begin (display '"       ") (display (vector-ref G4dc2@v G4dc8@i)) (display '": ") (write ((record-accessor G4dc0@rtd G4dc8@i) G4dbd@x)) (newline) (G4dc6@f (+ G4dc8@i '1))) (void))))) G4dc6@f) '0))))) (vector-length G4dc2@v))) (record-type-field-names G4dc0@rtd)))) (record-rtd G4dbd@x))) (simple-conditions G4dba@c)))) (lambda () (if (null? G4db6@args) (G4d9b@repl) (G4db3@load-r6rs-top-level (car G4db6@args) 'load (cdr G4db6@args)))))) (G4d9f@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
