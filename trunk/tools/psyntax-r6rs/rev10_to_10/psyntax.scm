;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G27fa@read-annotated G27fc@annotation-stripped G27fe@annotation? G2800@annotation-source G2802@annotation-expression G2804@scm->fasl G2806@fasl-save G2808@fasl-load G280a@serialize-library G280c@load-serialized-library G280e@make-record-printer G2810@compile-core G2812@read-library-source-file G2814@make-parameter G2880@file-options-spec) (begin (set! G27fa@read-annotated read) (set! G27fc@annotation-stripped (lambda (G2881@x) (G2802@annotation-expression G2881@x))) (set! G27fe@annotation? (lambda (G2883@x) (source-info G2883@x))) (set! G2800@annotation-source (lambda (G2885@x) (source-info G2885@x))) (set! G2802@annotation-expression (lambda (G2887@x) (if (pair? G2887@x) (cons (car G2887@x) (cdr G2887@x)) (display '"line:46\n")))) (set! G2804@scm->fasl (lambda (G2889@filename) (string-append G2889@filename '".fasl"))) (set! G2806@fasl-save (lambda (G288b@filename G288c@obj) (call-with-port (open-file-output-port G288b@filename) (lambda (G288f@port) ((symbol-value 'fasl-write!) G288c@obj G288f@port))))) (set! G2808@fasl-load (lambda (G2891@filename) (call-with-port (open-file-input-port G2891@filename) (symbol-value 'fasl-read!)))) (set! G280a@serialize-library (lambda (G2893@filename G2894@obj) (begin (format '#t '"serialize-library ~a\n..." G2893@filename) ((lambda (G2897@fasl-file) (begin (if (file-exists? G2897@fasl-file) (delete-file G2897@fasl-file) (void)) ((call/cc (lambda (G289b@G2899) (lambda () (with-exception-handler (lambda (G289d@c) ((call/cc (lambda (G289f@G289a) (G289b@G2899 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G2893@filename) (if (file-exists? G2897@fasl-file) (delete-file G2897@fasl-file) (void)) '#f) (G289f@G289a (lambda () (raise-continuable G289d@c)))))))))) (lambda () (begin (G2806@fasl-save G2897@fasl-file G2894@obj) (display '"OK\n")))))))))) (G2804@scm->fasl G2893@filename))))) (set! G280c@load-serialized-library (lambda (G28a1@filename G28a2@obj) ((lambda (G28a5@fasl-file) (if (and (file-exists? G28a5@fasl-file) ((symbol-value 'file-newer?) G28a5@fasl-file G28a1@filename)) ((lambda (G28a7@expanded2core) ((lambda (G28a9@code) ((lambda (G28ab@pivot) ((lambda (G28ad@visit) ((lambda (G28af@visit-proc) ((lambda () (begin (set-car! G28ab@pivot G28af@visit-proc) ((lambda (G28b1@pivot) ((lambda (G28b3@invoke) ((lambda () (begin (set-car! G28b1@pivot (lambda () (eval-core G28b3@invoke))) (apply G28a2@obj G28a9@code))))) (G28a7@expanded2core (car G28b1@pivot)))) (cdr G28ab@pivot)) '#t)))) (lambda () (eval-core G28ad@visit)))) (G28a7@expanded2core (car G28ab@pivot)))) (cddddr (cddddr G28a9@code)))) (G2808@fasl-load G28a5@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2804@scm->fasl G28a1@filename)))) (set! G280e@make-record-printer (lambda (G28b5@name G28b6@printer) (lambda G28b9@x (begin (display '"record printer") (for-each display G28b9@x))))) (set! G2810@compile-core (lambda G28bb@x (apply error 'comile-core '"not implementated" G28bb@x))) (set! G2812@read-library-source-file (lambda (G28bd@file-name) (with-input-from-file G28bd@file-name G27fa@read-annotated))) (set! G2814@make-parameter (lambda G28cd ((lambda (G28ce) (if (= G28ce '1) (apply (lambda (G28bf@x) (G2814@make-parameter G28bf@x (lambda (G28c1@x) G28c1@x))) G28cd) (if (= G28ce '2) (apply (lambda (G28c3@x G28c4@fender) ((lambda (G28c7@x) (lambda G28cb ((lambda (G28cc) (if (= G28cc '0) (apply (lambda () G28c7@x) G28cb) (if (= G28cc '1) (apply (lambda (G28c9@v) (set! G28c7@x (G28c4@fender G28c9@v))) G28cb) (error 'apply '"invalid arg count")))) (length G28cb)))) (G28c4@fender G28c3@x))) G28cd) (error 'apply '"invalid arg count")))) (length G28cd)))) (set! G2880@file-options-spec (lambda (G28cf@x) G28cf@x)) (begin (set! G28df@G2880@file-options-spec G2880@file-options-spec) (set! G28de@G2814@make-parameter G2814@make-parameter) (set! G28dd@G2812@read-library-source-file G2812@read-library-source-file) (set! G28dc@G2810@compile-core G2810@compile-core) (set! G28db@G280e@make-record-printer G280e@make-record-printer) (set! G28da@G280c@load-serialized-library G280c@load-serialized-library) (set! G28d9@G280a@serialize-library G280a@serialize-library) (set! G28d8@G2808@fasl-load G2808@fasl-load) (set! G28d7@G2806@fasl-save G2806@fasl-save) (set! G28d6@G2804@scm->fasl G2804@scm->fasl) (set! G28d5@G2802@annotation-expression G2802@annotation-expression) (set! G28d4@G2800@annotation-source G2800@annotation-source) (set! G28d3@G27fe@annotation? G27fe@annotation?) (set! G28d2@G27fc@annotation-stripped G27fc@annotation-stripped) (set! G28d1@G27fa@read-annotated G27fa@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G28e4@current-primitive-locations G28e6@mutable? G28e8@rewriter G28ea@expanded->core G28ec@compile-core-expr G28ee@pretty-print G28f0@compile-core-expr-to-port) (begin (set! G28e4@current-primitive-locations (G28de@G2814@make-parameter (lambda (G28f1@x) '#f) (lambda (G28f3@p) G28f3@p))) (set! G28e6@mutable? (lambda (G28f5@x) (or (pair? G28f5@x) (vector? G28f5@x) (hashtable? G28f5@x)))) (set! G28e8@rewriter (lambda (G28f7@quote-hack?) ((lambda (G28fa@f) (begin (set! G28fa@f (lambda (G28fb@x) (if (pair? G28fb@x) ((lambda (G28fd@t) (if (memv G28fd@t '(quote)) (if (and G28f7@quote-hack? (G28e6@mutable? (cadr G28fb@x))) ((lambda (G28ff@g) (begin (set-symbol-value! G28ff@g (cadr G28fb@x)) G28ff@g)) (gensym)) G28fb@x) (if (memv G28fd@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2901@x) (cons (car G2901@x) (map G28fa@f (cdr G2901@x)))) (cdr G28fb@x))) (if (memv G28fd@t '(lambda)) (cons* 'lambda (cadr G28fb@x) (map G28fa@f (cddr G28fb@x))) (if (memv G28fd@t '(letrec)) ((lambda (G2903@bindings G2904@body*) ((lambda (G2907@lhs* G2908@rhs*) (cons* 'letrec (map list G2907@lhs* (map G28fa@f G2908@rhs*)) (map G28fa@f G2904@body*))) (map car G2903@bindings) (map cadr G2903@bindings))) (cadr G28fb@x) (cddr G28fb@x)) (if (memv G28fd@t '(letrec*)) ((lambda (G290b@bindings G290c@body*) ((lambda (G290f@lhs* G2910@rhs*) (cons* 'letrec* (map list G290f@lhs* (map G28fa@f G2910@rhs*)) (map G28fa@f G290c@body*))) (map car G290b@bindings) (map cadr G290b@bindings))) (cadr G28fb@x) (cddr G28fb@x)) (if (memv G28fd@t '(library-letrec*)) ((lambda (G2913@name G2914@x) ((lambda (G2917@bindings G2918@body*) ((lambda (G291b@lhs* G291c@lhs** G291d@rhs*) (cons* 'library-letrec* G2913@name (map list G291b@lhs* G291c@lhs** (map G28fa@f G291d@rhs*)) (map G28fa@f G2918@body*))) (map car G2917@bindings) (map cadr G2917@bindings) (map caddr G2917@bindings))) (cadr G2914@x) (cddr G2914@x))) (cadr G28fb@x) (cdr G28fb@x)) (if (memv G28fd@t '(begin)) (cons 'begin (map G28fa@f (cdr G28fb@x))) (if (memv G28fd@t '(set!)) (list 'set! (cadr G28fb@x) (G28fa@f (caddr G28fb@x))) (if (memv G28fd@t '(primitive)) ((lambda (G2921@op) ((lambda (G2923@t) (if G2923@t ((lambda (G2925@loc) G2925@loc) G2923@t) G2921@op)) ((G28e4@current-primitive-locations) G2921@op))) (cadr G28fb@x)) (if (memv G28fd@t '(define)) G28fb@x (if (list? G28fb@x) (map G28fa@f G28fb@x) (error 'rewrite '"invalid form ~s ~s" G28fb@x (list? G28fb@x)))))))))))))) (car G28fb@x)) G28fb@x))) G28fa@f)) '#f))) (set! G28ea@expanded->core (lambda (G2927@x) ((G28e8@rewriter '#t) G2927@x))) (set! G28ec@compile-core-expr (lambda (G2929@x) ((G28e8@rewriter '#f) G2929@x))) (set! G28ee@pretty-print write) (set! G28f0@compile-core-expr-to-port (lambda (G292b@x G292c@p) (G28ee@pretty-print ((G28e8@rewriter '#f) G292b@x) G292c@p))) (begin (set! G2935@G28f0@compile-core-expr-to-port G28f0@compile-core-expr-to-port) (set! G2934@G28ee@pretty-print G28ee@pretty-print) (set! G2933@G28ec@compile-core-expr G28ec@compile-core-expr) (set! G2932@G28ea@expanded->core G28ea@expanded->core) (set! G2931@G28e8@rewriter G28e8@rewriter) (set! G2930@G28e6@mutable? G28e6@mutable?) (set! G292f@G28e4@current-primitive-locations G28e4@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G298b@make-collection G298d@current-library-collection G2993@G298e G2995@G2990 G2997@G298f G299a@library? G299c@make-library G299e@library-id G29a0@library-name G29a2@library-version G29a4@library-imp* G29a6@library-vis* G29a8@library-inv* G29aa@library-subst G29ac@library-env G29ae@library-visit-state G29b0@library-invoke-state G29b2@library-visit-code G29b4@library-invoke-code G29b6@library-visible? G29b8@library-source-file-name G29ba@set-library-id! G29bc@set-library-name! G29be@set-library-version! G29c0@set-library-imp*! G29c2@set-library-vis*! G29c4@set-library-inv*! G29c6@set-library-subst! G29c8@set-library-env! G29ca@set-library-visit-state! G29cc@set-library-invoke-state! G29ce@set-library-visit-code! G29d0@set-library-invoke-code! G29d2@set-library-visible?! G29d4@set-library-source-file-name! G29d6@rp G29d8@find-dependencies G29da@find-library-by G29dc@library-path G29de@library-extensions G29e0@library-name->file-name G29e2@file-locator G29e4@serialize-all G29e6@current-precompiled-library-loader G29e8@try-load-from-file G29ea@library-loader G29ec@current-library-expander G29ee@external-pending-libraries G29f0@find-external-library G29f2@find-library-by-name G29f4@library-exists? G29f6@find-library-by-spec/die G29f8@label->binding-table G29fa@install-library-record G29fc@install-library G29fe@imported-label->binding G2a00@invoke-library G2a02@visit-library G2a04@invoke-library-by-spec G2a06@installed-libraries G2a08@library-spec) (begin (set! G298b@make-collection (lambda () ((lambda (G2a09@set) ((lambda (G2a0c@set-cons) (begin (set! G2a0c@set-cons (lambda (G2a11@x G2a12@ls) (if (memq G2a11@x G2a12@ls) G2a12@ls (cons G2a11@x G2a12@ls)))) (lambda G2a0f ((lambda (G2a10) (if (= G2a10 '0) (apply (lambda () G2a09@set) G2a0f) (if (= G2a10 '1) (apply (lambda (G2a0d@x) (set! G2a09@set (G2a0c@set-cons G2a0d@x G2a09@set))) G2a0f) (error 'apply '"invalid arg count")))) (length G2a0f))))) '#f)) '()))) (set! G298d@current-library-collection (G28de@G2814@make-parameter (G298b@make-collection) (lambda (G2a15@x) (begin (if (not (procedure? G2a15@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a15@x) (void)) G2a15@x)))) (set! G2993@G298e (make-record-type-descriptor 'library '#f 'G2991 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2995@G2990 '#f) (set! G2997@G298f (make-record-constructor-descriptor G2993@G298e '#f G2995@G2990)) (set! G299a@library? (record-predicate G2993@G298e)) (set! G299c@make-library (record-constructor G2997@G298f)) (set! G299e@library-id (record-accessor G2993@G298e '0)) (set! G29a0@library-name (record-accessor G2993@G298e '1)) (set! G29a2@library-version (record-accessor G2993@G298e '2)) (set! G29a4@library-imp* (record-accessor G2993@G298e '3)) (set! G29a6@library-vis* (record-accessor G2993@G298e '4)) (set! G29a8@library-inv* (record-accessor G2993@G298e '5)) (set! G29aa@library-subst (record-accessor G2993@G298e '6)) (set! G29ac@library-env (record-accessor G2993@G298e '7)) (set! G29ae@library-visit-state (record-accessor G2993@G298e '8)) (set! G29b0@library-invoke-state (record-accessor G2993@G298e '9)) (set! G29b2@library-visit-code (record-accessor G2993@G298e '10)) (set! G29b4@library-invoke-code (record-accessor G2993@G298e '11)) (set! G29b6@library-visible? (record-accessor G2993@G298e '12)) (set! G29b8@library-source-file-name (record-accessor G2993@G298e '13)) (set! G29ba@set-library-id! (record-mutator G2993@G298e '0)) (set! G29bc@set-library-name! (record-mutator G2993@G298e '1)) (set! G29be@set-library-version! (record-mutator G2993@G298e '2)) (set! G29c0@set-library-imp*! (record-mutator G2993@G298e '3)) (set! G29c2@set-library-vis*! (record-mutator G2993@G298e '4)) (set! G29c4@set-library-inv*! (record-mutator G2993@G298e '5)) (set! G29c6@set-library-subst! (record-mutator G2993@G298e '6)) (set! G29c8@set-library-env! (record-mutator G2993@G298e '7)) (set! G29ca@set-library-visit-state! (record-mutator G2993@G298e '8)) (set! G29cc@set-library-invoke-state! (record-mutator G2993@G298e '9)) (set! G29ce@set-library-visit-code! (record-mutator G2993@G298e '10)) (set! G29d0@set-library-invoke-code! (record-mutator G2993@G298e '11)) (set! G29d2@set-library-visible?! (record-mutator G2993@G298e '12)) (set! G29d4@set-library-source-file-name! (record-mutator G2993@G298e '13)) (set! G29d6@rp (G28db@G280e@make-record-printer 'library (lambda (G2a17@x G2a18@p G2a19@wr) (begin (if (not (G299a@library? G2a17@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29a2@library-version G2a17@x)) (G29a0@library-name G2a17@x) (append (G29a0@library-name G2a17@x) (list (G29a2@library-version G2a17@x))))) G2a18@p))))) (set! G29d8@find-dependencies (lambda (G2a1d@ls) (if (null? G2a1d@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29da@find-library-by (lambda (G2a1f@pred) ((letrec ((G2a21@f (lambda (G2a23@ls) (if (null? G2a23@ls) '#f (if (G2a1f@pred (car G2a23@ls)) (car G2a23@ls) (G2a21@f (cdr G2a23@ls))))))) G2a21@f) ((G298d@current-library-collection))))) (set! G29dc@library-path (G28de@G2814@make-parameter '(".") (lambda (G2a25@x) (if (and (list? G2a25@x) (for-all string? G2a25@x)) (map (lambda (G2a27@x) G2a27@x) G2a25@x) (assertion-violation 'library-path '"not a list of strings" G2a25@x))))) (set! G29de@library-extensions (G28de@G2814@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a29@x) (if (and (list? G2a29@x) (for-all string? G2a29@x)) (map (lambda (G2a2b@x) G2a2b@x) G2a29@x) (assertion-violation 'library-extensions '"not a list of strings" G2a29@x))))) (set! G29e0@library-name->file-name (lambda (G2a2d@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a31@G2a2f G2a32@G2a30) ((lambda (G2a35@extract G2a36@p) ((lambda (G2a3a@display-hex) (begin (set! G2a3a@display-hex (lambda (G2a43@n) (if (<= '0 G2a43@n '9) (display G2a43@n G2a36@p) (display (integer->char (+ (char->integer '#\A) (- G2a43@n '10))) G2a36@p)))) (begin ((letrec ((G2a3b@f (lambda (G2a3d@ls) (if (not (null? G2a3d@ls)) (begin (display '"/" G2a36@p) (for-each (lambda (G2a3f@c) (if (or (char<=? '#\a G2a3f@c '#\z) (char<=? '#\A G2a3f@c '#\Z) (char<=? '#\0 G2a3f@c '#\9) (memv G2a3f@c '(#\- #\. #\_ #\~))) (display G2a3f@c G2a36@p) (begin (display '"%" G2a36@p) ((lambda (G2a41@n) (begin (G2a3a@display-hex (quotient G2a41@n '16)) (G2a3a@display-hex (remainder G2a41@n '16)))) (char->integer G2a3f@c))))) (string->list (symbol->string (car G2a3d@ls)))) (G2a3b@f (cdr G2a3d@ls))) (void))))) G2a3b@f) G2a2d@x) (G2a35@extract)))) '#f)) G2a32@G2a30 G2a31@G2a2f))))) (set! G29e2@file-locator (G28de@G2814@make-parameter (lambda (G2a45@x) ((lambda (G2a47@str) ((letrec ((G2a49@f (lambda (G2a4b@ls G2a4c@exts G2a4d@failed-list) (if (null? G2a4b@ls) ((lambda () ((lambda (G2a59@G2a54 G2a5b@G2a56 G2a5d@G2a55 G2a60@G2a53 G2a62@make-library-resolution-condition G2a64@G2a51 G2a66@G2a52 G2a68@library-resolution-condition? G2a6a@condition-library G2a6c@condition-files) (begin (set! G2a59@G2a54 (make-record-type-descriptor '&library-resolution G4bdc@G492d@&condition-rtd 'G2a57 '#f '#f '#((immutable library) (immutable files)))) (set! G2a5b@G2a56 '#f) (set! G2a5d@G2a55 (make-record-constructor-descriptor G2a59@G2a54 G4bdd@G492f@&condition-rcd G2a5b@G2a56)) (set! G2a60@G2a53 (record-predicate G2a59@G2a54)) (set! G2a62@make-library-resolution-condition (record-constructor G2a5d@G2a55)) (set! G2a64@G2a51 (record-accessor G2a59@G2a54 '0)) (set! G2a66@G2a52 (record-accessor G2a59@G2a54 '1)) (set! G2a68@library-resolution-condition? (condition-predicate G2a59@G2a54)) (set! G2a6a@condition-library (condition-accessor G2a59@G2a54 G2a64@G2a51)) (set! G2a6c@condition-files (condition-accessor G2a59@G2a54 G2a66@G2a52)) (raise (condition (G4bfc@G49c5@make-error) (G4c1e@G4a1f@make-who-condition 'expander) (G4be2@G4982@make-message-condition '"cannot locate library in library-path") (G2a62@make-library-resolution-condition G2a45@x (reverse G2a4d@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a4c@exts) (G2a49@f (cdr G2a4b@ls) (G29de@library-extensions) G2a4d@failed-list) ((lambda (G2a6d@name) (if (file-exists? G2a6d@name) G2a6d@name (G2a49@f G2a4b@ls (cdr G2a4c@exts) (cons G2a6d@name G2a4d@failed-list)))) (string-append (car G2a4b@ls) G2a47@str (car G2a4c@exts)))))))) G2a49@f) (G29dc@library-path) (G29de@library-extensions) '())) (G29e0@library-name->file-name G2a45@x))) (lambda (G2a6f@f) (if (procedure? G2a6f@f) G2a6f@f (assertion-violation 'file-locator '"not a procedure" G2a6f@f))))) (set! G29e4@serialize-all (lambda (G2a71@serialize G2a72@compile) ((lambda (G2a76@library-desc) (begin (set! G2a76@library-desc (lambda (G2a79@x) (list (G299e@library-id G2a79@x) (G29a0@library-name G2a79@x)))) (for-each (lambda (G2a77@x) (if (G29b8@library-source-file-name G2a77@x) (G2a71@serialize (G29b8@library-source-file-name G2a77@x) (list (G299e@library-id G2a77@x) (G29a0@library-name G2a77@x) (G29a2@library-version G2a77@x) (map G2a76@library-desc (G29a4@library-imp* G2a77@x)) (map G2a76@library-desc (G29a6@library-vis* G2a77@x)) (map G2a76@library-desc (G29a8@library-inv* G2a77@x)) (G29aa@library-subst G2a77@x) (G29ac@library-env G2a77@x) (G2a72@compile (G29b2@library-visit-code G2a77@x)) (G2a72@compile (G29b4@library-invoke-code G2a77@x)) (G29b6@library-visible? G2a77@x))) (void))) ((G298d@current-library-collection))))) '#f))) (set! G29e6@current-precompiled-library-loader (G28de@G2814@make-parameter (lambda (G2a7b@filename G2a7c@sk) '#f))) (set! G29e8@try-load-from-file (lambda (G2a7f@filename) ((G29e6@current-precompiled-library-loader) G2a7f@filename (lambda G2aa5 ((lambda (G2aa6) (if (= G2aa6 '11) (apply (lambda (G2a81@id G2a82@name G2a83@ver G2a84@imp* G2a85@vis* G2a86@inv* G2a87@exp-subst G2a88@exp-env G2a89@visit-proc G2a8a@invoke-proc G2a8b@visible?) ((letrec ((G2a97@f (lambda (G2a99@deps) (if (null? G2a99@deps) (begin (G29fc@install-library G2a81@id G2a82@name G2a83@ver G2a84@imp* G2a85@vis* G2a86@inv* G2a87@exp-subst G2a88@exp-env G2a89@visit-proc G2a8a@invoke-proc '#f '#f G2a8b@visible? '#f) '#t) ((lambda (G2a9b@d) ((lambda (G2a9d@label G2a9e@dname) ((lambda (G2aa1@l) (if (and (G299a@library? G2aa1@l) (eq? G2a9d@label (G299e@library-id G2aa1@l))) (G2a97@f (cdr G2a99@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2a82@name G2a9e@dname G2a7f@filename G2aa1@l G2a9d@label (G299e@library-id G2aa1@l)) '#f))) (G29f2@find-library-by-name G2a9e@dname))) (car G2a9b@d) (cadr G2a9b@d))) (car G2a99@deps)))))) G2a97@f) (append G2a84@imp* G2a85@vis* G2a86@inv*))) G2aa5) (if (>= G2aa6 '0) (apply (lambda G2aa3@others '#f) G2aa5) (error 'apply '"invalid arg count")))) (length G2aa5)))))) (set! G29ea@library-loader (G28de@G2814@make-parameter (lambda (G2aa7@x) ((lambda (G2aa9@file-name) (if (not G2aa9@file-name) (assertion-violation '#f '"cannot file library" G2aa7@x) (or (G29e8@try-load-from-file G2aa9@file-name) ((G29ec@current-library-expander) (G28dd@G2812@read-library-source-file G2aa9@file-name) G2aa9@file-name (lambda (G2aab@name) (if (not (fast-equal? G2aab@name G2aa7@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2aaf@G2aad G2ab0@G2aae) ((lambda (G2ab3@e G2ab4@p) (begin (display '"expected to find library " G2ab4@p) (write G2aa7@x G2ab4@p) (display '" in file " G2ab4@p) (display G2aa9@file-name G2ab4@p) (display '", found " G2ab4@p) (write G2aab@name G2ab4@p) (display '" instead" G2ab4@p) (G2ab3@e))) G2ab0@G2aae G2aaf@G2aad)))) (void))))))) ((G29e2@file-locator) G2aa7@x))) (lambda (G2ab7@f) (if (procedure? G2ab7@f) G2ab7@f (assertion-violation 'library-locator '"not a procedure" G2ab7@f))))) (set! G29ec@current-library-expander (G28de@G2814@make-parameter (lambda (G2ab9@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2abb@f) (if (procedure? G2abb@f) G2abb@f (assertion-violation 'library-expander '"not a procedure" G2abb@f))))) (set! G29ee@external-pending-libraries (G28de@G2814@make-parameter '())) (set! G29f0@find-external-library (lambda (G2abd@name) (begin (if (member G2abd@name (G29ee@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2abd@name) (void)) ((lambda (G2ac1@G2abf G2ac2@G2ac0) ((lambda (G2ac5@swap) (dynamic-wind G2ac5@swap (lambda () (begin ((G29ea@library-loader) G2abd@name) (or (G29da@find-library-by (lambda (G2ac7@x) (fast-equal? (G29a0@library-name G2ac7@x) G2abd@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2abd@name)))) G2ac5@swap)) (lambda () ((lambda (G2ac9@t) (begin (G2ac1@G2abf G2ac2@G2ac0) (set! G2ac2@G2ac0 G2ac9@t))) (G2ac1@G2abf))))) G29ee@external-pending-libraries (cons G2abd@name (G29ee@external-pending-libraries)))))) (set! G29f2@find-library-by-name (lambda (G2acb@name) (or (G29da@find-library-by (lambda (G2acd@x) (fast-equal? (G29a0@library-name G2acd@x) G2acb@name))) (G29f0@find-external-library G2acb@name)))) (set! G29f4@library-exists? (lambda (G2acf@name) (and (G29da@find-library-by (lambda (G2ad1@x) (fast-equal? (G29a0@library-name G2ad1@x) G2acf@name))) '#t))) (set! G29f6@find-library-by-spec/die (lambda (G2ad3@spec) ((lambda (G2ad5@id) (or (G29da@find-library-by (lambda (G2ad7@x) (eq? G2ad5@id (G299e@library-id G2ad7@x)))) (assertion-violation '#f '"cannot find library with required spec" G2ad3@spec))) (car G2ad3@spec)))) (set! G29f8@label->binding-table (make-eq-hashtable)) (set! G29fa@install-library-record (lambda (G2ad9@lib) (begin ((lambda (G2adb@exp-env) (for-each (lambda (G2add@x) ((lambda (G2adf@label G2ae0@binding) ((lambda (G2ae3@binding) (hashtable-set! G29f8@label->binding-table G2adf@label G2ae3@binding)) ((lambda (G2ae5@t) (if (memv G2ae5@t '(global)) (cons 'global (cons G2ad9@lib (cdr G2ae0@binding))) (if (memv G2ae5@t '(global-macro)) (cons 'global-macro (cons G2ad9@lib (cdr G2ae0@binding))) (if (memv G2ae5@t '(global-macro!)) (cons 'global-macro! (cons G2ad9@lib (cdr G2ae0@binding))) G2ae0@binding)))) (car G2ae0@binding)))) (car G2add@x) (cdr G2add@x))) G2adb@exp-env)) (G29ac@library-env G2ad9@lib)) ((G298d@current-library-collection) G2ad9@lib)))) (set! G29fc@install-library (lambda (G2ae7@id G2ae8@name G2ae9@ver G2aea@imp* G2aeb@vis* G2aec@inv* G2aed@exp-subst G2aee@exp-env G2aef@visit-proc G2af0@invoke-proc G2af1@visit-code G2af2@invoke-code G2af3@visible? G2af4@source-file-name) ((lambda (G2b03@imp-lib* G2b04@vis-lib* G2b05@inv-lib*) (begin (if (not (and (symbol? G2ae7@id) (list? G2ae8@name) (list? G2ae9@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2ae7@id G2ae8@name G2ae9@ver) (void)) (if (G29f4@library-exists? G2ae8@name) (assertion-violation 'install-library '"library is already installed" G2ae8@name) (void)) ((lambda (G2b09@lib) (G29fa@install-library-record G2b09@lib)) (G299c@make-library G2ae7@id G2ae8@name G2ae9@ver G2b03@imp-lib* G2b04@vis-lib* G2b05@inv-lib* G2aed@exp-subst G2aee@exp-env G2aef@visit-proc G2af0@invoke-proc G2af1@visit-code G2af2@invoke-code G2af3@visible? G2af4@source-file-name)))) (map G29f6@find-library-by-spec/die G2aea@imp*) (map G29f6@find-library-by-spec/die G2aeb@vis*) (map G29f6@find-library-by-spec/die G2aec@inv*)))) (set! G29fe@imported-label->binding (lambda (G2b0b@lab) (hashtable-ref G29f8@label->binding-table G2b0b@lab '#f))) (set! G2a00@invoke-library (lambda (G2b0d@lib) ((lambda (G2b0f@invoke) (if (procedure? G2b0f@invoke) (begin (G29cc@set-library-invoke-state! G2b0d@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b0d@lib))) (for-each G2a00@invoke-library (G29a8@library-inv* G2b0d@lib)) (G29cc@set-library-invoke-state! G2b0d@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b0d@lib))) (G2b0f@invoke) (G29cc@set-library-invoke-state! G2b0d@lib '#t)) (void))) (G29b0@library-invoke-state G2b0d@lib)))) (set! G2a02@visit-library (lambda (G2b11@lib) ((lambda (G2b13@visit) (if (procedure? G2b13@visit) (begin (G29ca@set-library-visit-state! G2b11@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b11@lib))) (for-each G2a00@invoke-library (G29a6@library-vis* G2b11@lib)) (G29ca@set-library-visit-state! G2b11@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b11@lib))) (G2b13@visit) (G29ca@set-library-visit-state! G2b11@lib '#t)) (void))) (G29ae@library-visit-state G2b11@lib)))) (set! G2a04@invoke-library-by-spec (lambda (G2b15@spec) (G2a00@invoke-library (G29f6@find-library-by-spec/die G2b15@spec)))) (set! G2a06@installed-libraries (lambda G2b1d ((lambda (G2b1e) (if (= G2b1e '1) (apply (lambda (G2b17@all?) ((letrec ((G2b19@f (lambda (G2b1b@ls) (if (null? G2b1b@ls) '() (if (or G2b17@all? (G29b6@library-visible? (car G2b1b@ls))) (cons (car G2b1b@ls) (G2b19@f (cdr G2b1b@ls))) (G2b19@f (cdr G2b1b@ls))))))) G2b19@f) ((G298d@current-library-collection)))) G2b1d) (if (= G2b1e '0) (apply (lambda () (G2a06@installed-libraries '#f)) G2b1d) (error 'apply '"invalid arg count")))) (length G2b1d)))) (set! G2a08@library-spec (lambda (G2b1f@x) (begin (if (not (G299a@library? G2b1f@x)) (assertion-violation 'library-spec '"not a library" G2b1f@x) (void)) (list (G299e@library-id G2b1f@x) (G29a0@library-name G2b1f@x) (G29a2@library-version G2b1f@x))))) (begin (set! G2b5d@G2a08@library-spec G2a08@library-spec) (set! G2b5c@G2a06@installed-libraries G2a06@installed-libraries) (set! G2b5b@G2a04@invoke-library-by-spec G2a04@invoke-library-by-spec) (set! G2b5a@G2a02@visit-library G2a02@visit-library) (set! G2b59@G2a00@invoke-library G2a00@invoke-library) (set! G2b58@G29fe@imported-label->binding G29fe@imported-label->binding) (set! G2b57@G29fc@install-library G29fc@install-library) (set! G2b56@G29fa@install-library-record G29fa@install-library-record) (set! G2b55@G29f8@label->binding-table G29f8@label->binding-table) (set! G2b54@G29f6@find-library-by-spec/die G29f6@find-library-by-spec/die) (set! G2b53@G29f4@library-exists? G29f4@library-exists?) (set! G2b52@G29f2@find-library-by-name G29f2@find-library-by-name) (set! G2b51@G29f0@find-external-library G29f0@find-external-library) (set! G2b50@G29ee@external-pending-libraries G29ee@external-pending-libraries) (set! G2b4f@G29ec@current-library-expander G29ec@current-library-expander) (set! G2b4e@G29ea@library-loader G29ea@library-loader) (set! G2b4d@G29e8@try-load-from-file G29e8@try-load-from-file) (set! G2b4c@G29e6@current-precompiled-library-loader G29e6@current-precompiled-library-loader) (set! G2b4b@G29e4@serialize-all G29e4@serialize-all) (set! G2b4a@G29e2@file-locator G29e2@file-locator) (set! G2b49@G29e0@library-name->file-name G29e0@library-name->file-name) (set! G2b48@G29de@library-extensions G29de@library-extensions) (set! G2b47@G29dc@library-path G29dc@library-path) (set! G2b46@G29da@find-library-by G29da@find-library-by) (set! G2b45@G29d8@find-dependencies G29d8@find-dependencies) (set! G2b44@G29d6@rp G29d6@rp) (set! G2b43@G29d4@set-library-source-file-name! G29d4@set-library-source-file-name!) (set! G2b42@G29d2@set-library-visible?! G29d2@set-library-visible?!) (set! G2b41@G29d0@set-library-invoke-code! G29d0@set-library-invoke-code!) (set! G2b40@G29ce@set-library-visit-code! G29ce@set-library-visit-code!) (set! G2b3f@G29cc@set-library-invoke-state! G29cc@set-library-invoke-state!) (set! G2b3e@G29ca@set-library-visit-state! G29ca@set-library-visit-state!) (set! G2b3d@G29c8@set-library-env! G29c8@set-library-env!) (set! G2b3c@G29c6@set-library-subst! G29c6@set-library-subst!) (set! G2b3b@G29c4@set-library-inv*! G29c4@set-library-inv*!) (set! G2b3a@G29c2@set-library-vis*! G29c2@set-library-vis*!) (set! G2b39@G29c0@set-library-imp*! G29c0@set-library-imp*!) (set! G2b38@G29be@set-library-version! G29be@set-library-version!) (set! G2b37@G29bc@set-library-name! G29bc@set-library-name!) (set! G2b36@G29ba@set-library-id! G29ba@set-library-id!) (set! G2b35@G29b8@library-source-file-name G29b8@library-source-file-name) (set! G2b34@G29b6@library-visible? G29b6@library-visible?) (set! G2b33@G29b4@library-invoke-code G29b4@library-invoke-code) (set! G2b32@G29b2@library-visit-code G29b2@library-visit-code) (set! G2b31@G29b0@library-invoke-state G29b0@library-invoke-state) (set! G2b30@G29ae@library-visit-state G29ae@library-visit-state) (set! G2b2f@G29ac@library-env G29ac@library-env) (set! G2b2e@G29aa@library-subst G29aa@library-subst) (set! G2b2d@G29a8@library-inv* G29a8@library-inv*) (set! G2b2c@G29a6@library-vis* G29a6@library-vis*) (set! G2b2b@G29a4@library-imp* G29a4@library-imp*) (set! G2b2a@G29a2@library-version G29a2@library-version) (set! G2b29@G29a0@library-name G29a0@library-name) (set! G2b28@G299e@library-id G299e@library-id) (set! G2b27@G299c@make-library G299c@make-library) (set! G2b26@G299a@library? G299a@library?) (set! G2b25@G2997@G298f G2997@G298f) (set! G2b24@G2995@G2990 G2995@G2990) (set! G2b23@G2993@G298e G2993@G298e) (set! G2b22@G298d@current-library-collection G298d@current-library-collection) (set! G2b21@G298b@make-collection G298b@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b60@build-global-define G2bda@build-lambda G2bdc@build-case-lambda G2bde@build-let G2c10@build-sequence G2c12@build-void G2c14@build-letrec G2c16@build-letrec* G2c18@build-library-letrec* G2c1a@build-receive) (begin (set! G2b60@build-global-define (lambda (G2c1b@x) (G2c12@build-void))) (set! G2bda@build-lambda (lambda (G2c1d@ae G2c1e@vars G2c1f@exp) (list 'lambda G2c1e@vars G2c1f@exp))) (set! G2bdc@build-case-lambda (lambda (G2c23@ae G2c24@vars* G2c25@exp*) ((lambda (G2c2a@build-error G2c2c@build-pred G2c2e@build-apply G2c30@expand-case-lambda) (begin (set! G2c2a@build-error (lambda (G2c5f@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c2c@build-pred (lambda (G2c49@ae G2c4a@n G2c4b@vars) (call-with-values (lambda () ((letrec ((G2c51@f (lambda (G2c53@vars G2c54@count) (if (pair? G2c53@vars) (G2c51@f (cdr G2c53@vars) (+ G2c54@count '1)) (if (null? G2c53@vars) (values G2c54@count '=) (values G2c54@count '>=)))))) G2c51@f) G2c4b@vars '0)) (lambda (G2c57@G2c4f G2c58@G2c50) ((lambda (G2c5b@pred G2c5c@count) (list (list 'primitive G2c5b@pred) G2c4a@n (list 'quote G2c5c@count))) G2c58@G2c50 G2c57@G2c4f))))) (set! G2c2e@build-apply (lambda (G2c41@ae G2c42@g G2c43@vars G2c44@exp) (list '(primitive apply) (G2bda@build-lambda G2c41@ae G2c43@vars G2c44@exp) G2c42@g))) (set! G2c30@expand-case-lambda (lambda (G2c31@ae G2c32@vars G2c33@exp*) ((lambda (G2c37@g G2c38@n) (list 'lambda G2c37@g (G2bde@build-let G2c31@ae (list G2c38@n) (list (list '(primitive length) G2c37@g)) ((letrec ((G2c3b@f (lambda (G2c3d@vars* G2c3e@exp*) (if (null? G2c3d@vars*) (G2c2a@build-error G2c31@ae) (list 'if (G2c2c@build-pred G2c31@ae G2c38@n (car G2c3d@vars*)) (G2c2e@build-apply G2c31@ae G2c37@g (car G2c3d@vars*) (car G2c3e@exp*)) (G2c3b@f (cdr G2c3d@vars*) (cdr G2c3e@exp*))))))) G2c3b@f) G2c24@vars* G2c33@exp*)))) (gensym) (gensym)))) (if (= (length G2c25@exp*) '1) (G2bda@build-lambda G2c23@ae (car G2c24@vars*) (car G2c25@exp*)) (G2c30@expand-case-lambda G2c23@ae G2c24@vars* G2c25@exp*)))) '#f '#f '#f '#f))) (set! G2bde@build-let (lambda (G2c61@ae G2c62@lhs* G2c63@rhs* G2c64@body) (cons (G2bda@build-lambda G2c61@ae G2c62@lhs* G2c64@body) G2c63@rhs*))) (set! G2c10@build-sequence (lambda (G2c69@ae G2c6a@exps) ((letrec ((G2c6d@loop (lambda (G2c6f@exps) (if (null? (cdr G2c6f@exps)) (car G2c6f@exps) (if (equal? (car G2c6f@exps) (G2c12@build-void)) (G2c6d@loop (cdr G2c6f@exps)) (cons 'begin G2c6f@exps)))))) G2c6d@loop) G2c6a@exps))) (set! G2c12@build-void (lambda () '((primitive void)))) (set! G2c14@build-letrec (lambda (G2c71@ae G2c72@vars G2c73@val-exps G2c74@body-exp) (if (null? G2c72@vars) G2c74@body-exp (list 'letrec (map list G2c72@vars G2c73@val-exps) G2c74@body-exp)))) (set! G2c16@build-letrec* (lambda (G2c79@ae G2c7a@vars G2c7b@val-exps G2c7c@body-exp) (if (null? G2c7a@vars) G2c7c@body-exp (G2bde@build-let G2c79@ae G2c7a@vars (map (lambda (G2c81@x) (list 'quote '#f)) G2c7a@vars) (G2c10@build-sequence G2c79@ae (append (map (lambda (G2c83@lhs G2c84@rhs) (list 'set! G2c83@lhs G2c84@rhs)) G2c7a@vars G2c7b@val-exps) (list G2c7c@body-exp))))))) (set! G2c18@build-library-letrec* (lambda (G2c87@ae G2c88@name G2c89@vars G2c8a@locs G2c8b@val-exps G2c8c@body-exp) (list 'library-letrec* G2c88@name (map list G2c89@vars G2c8a@locs G2c8b@val-exps) G2c8c@body-exp))) (set! G2c1a@build-receive (lambda (G2c93@ae G2c94@vars G2c95@producer G2c96@body*) (begin (display '"************** in ") (cons 'receive (cons G2c94@vars (cons G2c95@producer G2c96@body*)))))) (begin (set! G2ca4@G2c1a@build-receive G2c1a@build-receive) (set! G2ca3@G2c18@build-library-letrec* G2c18@build-library-letrec*) (set! G2ca2@G2c16@build-letrec* G2c16@build-letrec*) (set! G2ca1@G2c14@build-letrec G2c14@build-letrec) (set! G2ca0@G2c12@build-void G2c12@build-void) (set! G2c9f@G2c10@build-sequence G2c10@build-sequence) (set! G2c9e@G2bde@build-let G2bde@build-let) (set! G2c9d@G2bdc@build-case-lambda G2bdc@build-case-lambda) (set! G2c9c@G2bda@build-lambda G2bda@build-lambda) (set! G2c9b@G2b60@build-global-define G2b60@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cb3@set-cons G2cb5@set-union G2cba@top-mark* G2cbc@top-marked? G2cbe@gen-lexical G2cc0@gen-global G2cc2@gen-label G2cc4@gen-top-level-label G2cc6@gen-define-label+loc G2cc8@gen-define-label G2cce@G2cc9 G2cd0@G2ccb G2cd2@G2cca G2cd5@rib? G2cd7@make-rib G2cd9@rib-sym* G2cdb@rib-mark** G2cdd@rib-label* G2cdf@rib-sealed/freq G2ce1@rib-cache G2ce3@set-rib-sym*! G2ce5@set-rib-mark**! G2ce7@set-rib-label*! G2ce9@set-rib-sealed/freq! G2ceb@set-rib-cache! G2ced@make-empty-rib G2cef@extend-rib! G2cf1@extend-rib/nc! G2cf3@make-rib-map G2cf5@seal-rib! G2cf7@unseal-rib! G2cf9@make-full-rib G2cff@G2cfa G2d01@G2cfc G2d03@G2cfb G2d06@stx? G2d08@make-stx G2d0a@stx-expr G2d0c@stx-mark* G2d0e@stx-subst* G2d10@stx-ae* G2d12@set-stx-expr! G2d14@set-stx-mark*! G2d16@set-stx-subst*! G2d18@set-stx-ae*! G2d1a@rp G2d1c@datum->stx G2d1e@gen-mark G2d20@anti-mark G2d22@anti-mark? G2d24@join-wraps G2d26@mkstx G2d28@add-mark G2d2a@add-subst G2d2c@syntax-kind? G2d2e@syntax-vector->list G2d30@syntax-pair? G2d32@syntax-vector? G2d34@syntax-null? G2d36@syntax-list? G2d38@syntax-car G2d3a@syntax-cdr G2d3c@syntax->list G2d3e@id? G2d40@id->sym G2d42@same-marks? G2d44@bound-id=? G2d46@free-id=? G2d48@valid-bound-ids? G2d4a@distinct-bound-ids? G2d4c@bound-id-member? G2d4e@self-evaluating? G2d50@strip-annotations G2d52@strip G2d54@stx->datum G2d56@same-marks*? G2d58@id->label G2d5a@id->real-label G2d5c@label->binding G2d5e@make-binding G2d60@binding-type G2d62@binding-value G2d64@raise-unbound-error G2d66@syntax-type G2d76@sanitize-binding G2d78@make-variable-transformer G2d7a@variable-transformer? G2d7c@variable-transformer-procedure G2d7e@make-eval-transformer G2ec1@parse-define G2ec3@parse-define-syntax G2ec5@scheme-stx-hashtable G2ec7@scheme-stx G2ec9@lexical-var G2ecb@lexical-mutable? G2ecd@set-lexical-mutable! G2ecf@add-lexical G2ed1@add-lexicals G2ed3@letrec-helper G2ed5@letrec-transformer G2ed7@letrec*-transformer G2ed9@fluid-let-syntax-transformer G2edb@type-descriptor-transformer G2edd@record-type-descriptor-transformer G2edf@record-constructor-descriptor-transformer G2ee1@when-macro G2ee3@unless-macro G2ee5@if-transformer G2ee7@and-transformer G2ee9@or-transformer G2eeb@case-macro G2eed@quote-transformer G2eef@case-lambda-transformer G2ef1@lambda-transformer G2ef3@bless G2ef5@with-syntax-macro G2ef7@invalid-fmls-error G2ef9@let-macro G2efb@let-values-macro G2efd@let*-values-macro G2eff@trace-lambda-macro G2f01@trace-define-macro G2f03@trace-define-syntax-macro G2f05@trace-let/rec-syntax G2f07@trace-let-syntax-macro G2f09@trace-letrec-syntax-macro G2f0b@guard-macro G2f0d@define-enumeration-macro G2f0f@time-macro G2f11@delay-macro G2f13@assert-macro G2f15@endianness-macro G2f17@identifier-syntax-macro G2f19@do-macro G2f1b@let*-macro G2f1d@or-macro G2f1f@and-macro G2f21@cond-macro G2f23@do-include G2f25@include-macro G2f27@include-into-macro G2f29@syntax-rules-macro G2f2b@quasiquote-macro G2f2d@quasisyntax-macro G2f2f@define-struct-macro G2f31@define-record-type-macro G2f33@define-condition-type-macro G2f35@incorrect-usage-macro G2f37@parameterize-macro G2f39@foreign-call-transformer G2f3b@convert-pattern G2f3d@syntax-dispatch G2f3f@ellipsis? G2f41@underscore? G2f43@verify-literals G2f45@syntax-case-transformer G2f47@ellipsis-map G2f49@syntax-transformer G2f4b@core-macro-transformer G2f4d@file-options-macro G2f4f@symbol-macro G2f51@macro-transformer G2f53@local-macro-transformer G2f55@do-macro-call G2f57@chi-macro G2f59@chi-local-macro G2f5b@chi-global-macro G2f5d@chi-expr* G2f5f@chi-application G2f61@chi-expr G2f63@chi-set! G2f65@verify-formals G2f67@chi-lambda-clause G2f69@chi-lambda-clause* G2f6b@chi-defun G2f6d@chi-rhs G2f6f@expand-interaction-rhs*/init* G2f71@chi-rhs* G2f73@find-bound=? G2f75@find-dups G2f77@chi-internal G2f79@parse-module G2f7f@G2f7a G2f81@G2f7c G2f83@G2f7b G2f86@module-interface? G2f88@make-module-interface G2f8a@module-interface-first-mark G2f8c@module-interface-exp-id-vec G2f8e@module-interface-exp-lab-vec G2f90@set-module-interface-first-mark! G2f92@set-module-interface-exp-id-vec! G2f94@set-module-interface-exp-lab-vec! G2f96@module-interface-exp-id* G2f98@chi-internal-module G2f9a@chi-body* G2f9c@expand-transformer G2f9e@parse-exports G2fa0@parse-library-name G2fa2@parse-library G2fa4@parse-import-spec* G2fa6@make-top-rib G2fa8@make-collector G2faa@inv-collector G2fac@vis-collector G2fae@imp-collector G2fb0@chi-library-internal G2fb2@chi-interaction-expr G2fb4@library-body-expander G2fb6@core-library-expander G2fb8@parse-top-level-program G2fba@top-level-expander G2fc0@G2fbb G2fc2@G2fbd G2fc4@G2fbc G2fc7@env? G2fc9@make-env G2fcb@env-names G2fcd@env-labels G2fcf@env-itc G2fd1@set-env-names! G2fd3@set-env-labels! G2fd5@set-env-itc! G2fd7@rp G2fdd@G2fd8 G2fdf@G2fda G2fe1@G2fd9 G2fe4@interaction-env? G2fe6@make-interaction-env G2fe8@interaction-env-rib G2fea@interaction-env-r G2fec@interaction-env-locs G2fee@set-interaction-env-rib! G2ff0@set-interaction-env-r! G2ff2@set-interaction-env-locs! G2ff4@rp G2ff6@interaction-environment-symbols G2ff8@environment-bindings G2ffa@parse-binding G2ffc@environment? G2ffe@environment-symbols G3000@environment G3002@null-environment G3004@scheme-report-environment G3006@expand G3008@eval G300a@library-expander G300c@boot-library-expand G300e@rev-map-append G3010@build-exports G3012@make-export-subst G3014@make-export-env/macros G3016@generate-temporaries G3018@free-identifier=? G301a@bound-identifier=? G301c@make-source-condition G301e@extract-position-condition G3020@expression-position G3022@assertion-error G3024@syntax-error G3026@syntax-violation* G3028@syntax-violation G302a@identifier? G302c@datum->syntax G302e@syntax->datum G3030@compile-r6rs-top-level G3032@pre-compile-r6rs-top-level G3034@interaction-environment G3036@top-level-context) (begin (set! G2cb3@set-cons (lambda (G3037@x G3038@ls) (if (memq G3037@x G3038@ls) G3038@ls (cons G3037@x G3038@ls)))) (set! G2cb5@set-union (lambda (G303b@ls1 G303c@ls2) (if (null? G303b@ls1) G303c@ls2 (if (memq (car G303b@ls1) G303c@ls2) (G2cb5@set-union (cdr G303b@ls1) G303c@ls2) (cons (car G303b@ls1) (G2cb5@set-union (cdr G303b@ls1) G303c@ls2)))))) (set! G2cba@top-mark* '(top)) (set! G2cbc@top-marked? (lambda (G303f@m*) (memq 'top G303f@m*))) (set! G2cbe@gen-lexical (lambda (G3041@sym) (if (symbol? G3041@sym) (gensym G3041@sym) (if (G2d06@stx? G3041@sym) (G2cbe@gen-lexical (G2d40@id->sym G3041@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3041@sym))))) (set! G2cc0@gen-global (lambda (G3043@x) (G2cbe@gen-lexical G3043@x))) (set! G2cc2@gen-label (lambda (G3045@_) (gensym))) (set! G2cc4@gen-top-level-label (lambda (G3047@id G3048@rib) ((lambda (G304c@find) (begin (set! G304c@find (lambda (G3057@sym G3058@mark* G3059@sym* G305a@mark** G305b@label*) (and (pair? G3059@sym*) (if (and (eq? G3057@sym (car G3059@sym*)) (G2d42@same-marks? G3058@mark* (car G305a@mark**))) (car G305b@label*) (G304c@find G3057@sym G3058@mark* (cdr G3059@sym*) (cdr G305a@mark**) (cdr G305b@label*)))))) ((lambda (G304d@sym G304e@mark*) ((lambda (G3051@sym*) ((lambda (G3053@t) (if G3053@t ((lambda (G3055@label) (if (G2b58@G29fe@imported-label->binding G3055@label) (gensym) G3055@label)) G3053@t) (gensym))) (and (memq G304d@sym (G2cd9@rib-sym* G3048@rib)) (G304c@find G304d@sym G304e@mark* G3051@sym* (G2cdb@rib-mark** G3048@rib) (G2cdd@rib-label* G3048@rib))))) (G2cd9@rib-sym* G3048@rib))) (G2d40@id->sym G3047@id) (G2d0c@stx-mark* G3047@id)))) '#f))) (set! G2cc6@gen-define-label+loc (lambda (G3061@id G3062@rib) ((lambda (G3065@t) (if G3065@t ((lambda (G3067@env) ((lambda (G3069@label G306a@locs) (values G3069@label ((lambda (G306d@t) (if G306d@t (cdr G306d@t) ((lambda (G306f@loc) (begin (G2ff2@set-interaction-env-locs! G3067@env (cons (cons G3069@label G306f@loc) G306a@locs)) G306f@loc)) (G2cbe@gen-lexical G3061@id)))) (assq G3069@label G306a@locs)))) (G2cc4@gen-top-level-label G3061@id G3062@rib) (G2fec@interaction-env-locs G3067@env))) G3065@t) (values (gensym) (G2cbe@gen-lexical G3061@id)))) (G3036@top-level-context)))) (set! G2cc8@gen-define-label (lambda (G3071@id G3072@rib) (if (G3036@top-level-context) (G2cc4@gen-top-level-label G3071@id G3072@rib) (gensym)))) (set! G2cce@G2cc9 (make-record-type-descriptor 'rib '#f 'G2ccc '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2cd0@G2ccb '#f) (set! G2cd2@G2cca (make-record-constructor-descriptor G2cce@G2cc9 '#f G2cd0@G2ccb)) (set! G2cd5@rib? (record-predicate G2cce@G2cc9)) (set! G2cd7@make-rib (record-constructor G2cd2@G2cca)) (set! G2cd9@rib-sym* (record-accessor G2cce@G2cc9 '0)) (set! G2cdb@rib-mark** (record-accessor G2cce@G2cc9 '1)) (set! G2cdd@rib-label* (record-accessor G2cce@G2cc9 '2)) (set! G2cdf@rib-sealed/freq (record-accessor G2cce@G2cc9 '3)) (set! G2ce1@rib-cache (record-accessor G2cce@G2cc9 '4)) (set! G2ce3@set-rib-sym*! (record-mutator G2cce@G2cc9 '0)) (set! G2ce5@set-rib-mark**! (record-mutator G2cce@G2cc9 '1)) (set! G2ce7@set-rib-label*! (record-mutator G2cce@G2cc9 '2)) (set! G2ce9@set-rib-sealed/freq! (record-mutator G2cce@G2cc9 '3)) (set! G2ceb@set-rib-cache! (record-mutator G2cce@G2cc9 '4)) (set! G2ced@make-empty-rib (lambda () (G2cd7@make-rib '() '() '() '#f '#f))) (set! G2cef@extend-rib! (lambda (G3075@rib G3076@id G3077@label) ((lambda (G307c@find) (begin (set! G307c@find (lambda (G3089@sym G308a@mark* G308b@sym* G308c@mark** G308d@label*) (and (pair? G308b@sym*) (if (and (eq? G3089@sym (car G308b@sym*)) (G2d42@same-marks? G308a@mark* (car G308c@mark**))) G308d@label* (G307c@find G3089@sym G308a@mark* (cdr G308b@sym*) (cdr G308c@mark**) (cdr G308d@label*)))))) (begin (if (G2cdf@rib-sealed/freq G3075@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G3075@rib) (void)) ((lambda (G307d@sym G307e@mark*) ((lambda (G3081@sym*) ((lambda (G3083@t) (if G3083@t ((lambda (G3085@p) (if (not (eq? G3077@label (car G3085@p))) (if (G3036@top-level-context) (set-car! G3085@p G3077@label) (G3028@syntax-violation '#f '"multiple definitions of identifier" G3076@id)) (void))) G3083@t) (begin (if (G2ce1@rib-cache G3075@rib) (hashtable-update! (G2ce1@rib-cache G3075@rib) G307d@sym (lambda (G3087@e) (cons (cons G307e@mark* G3077@label) G3087@e)) '()) (void)) (G2ce3@set-rib-sym*! G3075@rib (cons G307d@sym G3081@sym*)) (G2ce5@set-rib-mark**! G3075@rib (cons G307e@mark* (G2cdb@rib-mark** G3075@rib))) (G2ce7@set-rib-label*! G3075@rib (cons G3077@label (G2cdd@rib-label* G3075@rib)))))) (and (memq G307d@sym (G2cd9@rib-sym* G3075@rib)) (G307c@find G307d@sym G307e@mark* G3081@sym* (G2cdb@rib-mark** G3075@rib) (G2cdd@rib-label* G3075@rib))))) (G2cd9@rib-sym* G3075@rib))) (G2d40@id->sym G3076@id) (G2d0c@stx-mark* G3076@id))))) '#f))) (set! G2cf1@extend-rib/nc! (lambda (G3093@rib G3094@id G3095@label) ((lambda (G3099@sym G309a@mark*) ((lambda (G309d@sym*) (begin (if (G2ce1@rib-cache G3093@rib) (hashtable-update! (G2ce1@rib-cache G3093@rib) G3099@sym (lambda (G309f@e) (cons (cons G309a@mark* G3095@label) G309f@e)) '()) (void)) (G2ce3@set-rib-sym*! G3093@rib (cons G3099@sym G309d@sym*)) (G2ce5@set-rib-mark**! G3093@rib (cons G309a@mark* (G2cdb@rib-mark** G3093@rib))) (G2ce7@set-rib-label*! G3093@rib (cons G3095@label (G2cdd@rib-label* G3093@rib))))) (G2cd9@rib-sym* G3093@rib))) (G2d40@id->sym G3094@id) (G2d0c@stx-mark* G3094@id)))) (set! G2cf3@make-rib-map (lambda (G30a1@sym*) ((lambda (G30a3@ht) ((letrec ((G30a5@f (lambda (G30a7@i G30a8@sym*) (if (null? G30a8@sym*) G30a3@ht (begin (hashtable-update! G30a3@ht (car G30a8@sym*) (lambda (G30ab@x) (cons G30a7@i G30ab@x)) '()) (G30a5@f (+ G30a7@i '1) (cdr G30a8@sym*))))))) G30a5@f) '0 G30a1@sym*)) (make-eq-hashtable)))) (set! G2cf5@seal-rib! (lambda (G30ad@rib) ((lambda (G30af@sym*) (if (not (null? G30af@sym*)) (begin (G2ce3@set-rib-sym*! G30ad@rib (list->vector G30af@sym*)) (G2ce5@set-rib-mark**! G30ad@rib (list->vector (G2cdb@rib-mark** G30ad@rib))) (G2ce7@set-rib-label*! G30ad@rib (list->vector (G2cdd@rib-label* G30ad@rib))) (G2ce9@set-rib-sealed/freq! G30ad@rib (G2cf3@make-rib-map G30af@sym*))) (void))) (G2cd9@rib-sym* G30ad@rib)))) (set! G2cf7@unseal-rib! (lambda (G30b1@rib) (if (G2cdf@rib-sealed/freq G30b1@rib) (begin (G2ce9@set-rib-sealed/freq! G30b1@rib '#f) (G2ce3@set-rib-sym*! G30b1@rib (vector->list (G2cd9@rib-sym* G30b1@rib))) (G2ce5@set-rib-mark**! G30b1@rib (vector->list (G2cdb@rib-mark** G30b1@rib))) (G2ce7@set-rib-label*! G30b1@rib (vector->list (G2cdd@rib-label* G30b1@rib)))) (void)))) (set! G2cf9@make-full-rib (lambda (G30b3@id* G30b4@label*) ((lambda (G30b7@r) (begin (G2cf5@seal-rib! G30b7@r) G30b7@r)) (G2cd7@make-rib (map G2d40@id->sym G30b3@id*) (map G2d0c@stx-mark* G30b3@id*) G30b4@label* '#f '#f)))) (set! G2cff@G2cfa (make-record-type-descriptor 'stx '#f 'G2cfd '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d01@G2cfc '#f) (set! G2d03@G2cfb (make-record-constructor-descriptor G2cff@G2cfa '#f G2d01@G2cfc)) (set! G2d06@stx? (record-predicate G2cff@G2cfa)) (set! G2d08@make-stx (record-constructor G2d03@G2cfb)) (set! G2d0a@stx-expr (record-accessor G2cff@G2cfa '0)) (set! G2d0c@stx-mark* (record-accessor G2cff@G2cfa '1)) (set! G2d0e@stx-subst* (record-accessor G2cff@G2cfa '2)) (set! G2d10@stx-ae* (record-accessor G2cff@G2cfa '3)) (set! G2d12@set-stx-expr! (record-mutator G2cff@G2cfa '0)) (set! G2d14@set-stx-mark*! (record-mutator G2cff@G2cfa '1)) (set! G2d16@set-stx-subst*! (record-mutator G2cff@G2cfa '2)) (set! G2d18@set-stx-ae*! (record-mutator G2cff@G2cfa '3)) (set! G2d1a@rp (G28db@G280e@make-record-printer 'stx (lambda (G30b9@x G30ba@p G30bb@wr) (begin (display '"#<syntax " G30ba@p) (write (G2d54@stx->datum G30b9@x) G30ba@p) ((lambda (G30bf@expr) (if (G28d3@G27fe@annotation? G30bf@expr) ((lambda (G30c1@src) (if (pair? G30c1@src) (begin (display '" [" G30ba@p) (display (cdr G30c1@src) G30ba@p) (display '" of " G30ba@p) (display (car G30c1@src) G30ba@p) (display '"]" G30ba@p)) (void))) (G28d4@G2800@annotation-source G30bf@expr)) (void))) (G2d0a@stx-expr G30b9@x)) (display '">" G30ba@p))))) (set! G2d1c@datum->stx (lambda (G30c3@id G30c4@datum) (G2d08@make-stx G30c4@datum (G2d0c@stx-mark* G30c3@id) (G2d0e@stx-subst* G30c3@id) (G2d10@stx-ae* G30c3@id)))) (set! G2d1e@gen-mark (lambda () (string '#\m))) (set! G2d20@anti-mark '#f) (set! G2d22@anti-mark? not) (set! G2d24@join-wraps (lambda (G30c7@m1* G30c8@s1* G30c9@ae1* G30ca@e) ((lambda (G30d0@cancel) (begin (set! G30d0@cancel (lambda (G30d7@ls1 G30d8@ls2) ((letrec ((G30db@f (lambda (G30dd@x G30de@ls1) (if (null? G30de@ls1) (cdr G30d8@ls2) (cons G30dd@x (G30db@f (car G30de@ls1) (cdr G30de@ls1))))))) G30db@f) (car G30d7@ls1) (cdr G30d7@ls1)))) ((lambda (G30d1@m2* G30d2@s2* G30d3@ae2*) (if (and (not (null? G30c7@m1*)) (not (null? G30d1@m2*)) (G2d22@anti-mark? (car G30d1@m2*))) (values (G30d0@cancel G30c7@m1* G30d1@m2*) (G30d0@cancel G30c8@s1* G30d2@s2*) (G30d0@cancel G30c9@ae1* G30d3@ae2*)) (values (append G30c7@m1* G30d1@m2*) (append G30c8@s1* G30d2@s2*) (append G30c9@ae1* G30d3@ae2*)))) (G2d0c@stx-mark* G30ca@e) (G2d0e@stx-subst* G30ca@e) (G2d10@stx-ae* G30ca@e)))) '#f))) (set! G2d26@mkstx (lambda (G30e1@e G30e2@m* G30e3@s* G30e4@ae*) (if (and (G2d06@stx? G30e1@e) (not (G2cbc@top-marked? G30e2@m*))) (call-with-values (lambda () (G2d24@join-wraps G30e2@m* G30e3@s* G30e4@ae* G30e1@e)) (lambda (G30ec@G30e9 G30ed@G30ea G30ee@G30eb) ((lambda (G30f2@ae* G30f3@s* G30f4@m*) (G2d08@make-stx (G2d0a@stx-expr G30e1@e) G30f4@m* G30f3@s* G30f2@ae*)) G30ee@G30eb G30ed@G30ea G30ec@G30e9))) (G2d08@make-stx G30e1@e G30e2@m* G30e3@s* G30e4@ae*)))) (set! G2d28@add-mark (lambda (G30f8@m G30f9@e G30fa@ae) (G2d26@mkstx G30f9@e (list G30f8@m) '(shift) (list G30fa@ae)))) (set! G2d2a@add-subst (lambda (G30fe@subst G30ff@e) (G2d26@mkstx G30ff@e '() (list G30fe@subst) '()))) (set! G2d2c@syntax-kind? (lambda (G3102@x G3103@p?) (if (G2d06@stx? G3102@x) (G2d2c@syntax-kind? (G2d0a@stx-expr G3102@x) G3103@p?) (if (G28d3@G27fe@annotation? G3102@x) (G2d2c@syntax-kind? (G28d5@G2802@annotation-expression G3102@x) G3103@p?) (G3103@p? G3102@x))))) (set! G2d2e@syntax-vector->list (lambda (G3106@x) (if (G2d06@stx? G3106@x) ((lambda (G3108@ls G3109@m* G310a@s* G310b@ae*) (map (lambda (G3110@x) (G2d26@mkstx G3110@x G3109@m* G310a@s* G310b@ae*)) G3108@ls)) (G2d2e@syntax-vector->list (G2d0a@stx-expr G3106@x)) (G2d0c@stx-mark* G3106@x) (G2d0e@stx-subst* G3106@x) (G2d10@stx-ae* G3106@x)) (if (G28d3@G27fe@annotation? G3106@x) (G2d2e@syntax-vector->list (G28d5@G2802@annotation-expression G3106@x)) (if (vector? G3106@x) (vector->list G3106@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3106@x)))))) (set! G2d30@syntax-pair? (lambda (G3112@x) (G2d2c@syntax-kind? G3112@x pair?))) (set! G2d32@syntax-vector? (lambda (G3114@x) (G2d2c@syntax-kind? G3114@x vector?))) (set! G2d34@syntax-null? (lambda (G3116@x) (G2d2c@syntax-kind? G3116@x null?))) (set! G2d36@syntax-list? (lambda (G3118@x) (or (G2d34@syntax-null? G3118@x) (and (G2d30@syntax-pair? G3118@x) (G2d36@syntax-list? (G2d3a@syntax-cdr G3118@x)))))) (set! G2d38@syntax-car (lambda (G311a@x) (if (G2d06@stx? G311a@x) (G2d26@mkstx (G2d38@syntax-car (G2d0a@stx-expr G311a@x)) (G2d0c@stx-mark* G311a@x) (G2d0e@stx-subst* G311a@x) (G2d10@stx-ae* G311a@x)) (if (G28d3@G27fe@annotation? G311a@x) (G2d38@syntax-car (G28d5@G2802@annotation-expression G311a@x)) (if (pair? G311a@x) (car G311a@x) (assertion-violation 'syntax-car '"BUG: not a pair" G311a@x)))))) (set! G2d3a@syntax-cdr (lambda (G311c@x) (if (G2d06@stx? G311c@x) (G2d26@mkstx (G2d3a@syntax-cdr (G2d0a@stx-expr G311c@x)) (G2d0c@stx-mark* G311c@x) (G2d0e@stx-subst* G311c@x) (G2d10@stx-ae* G311c@x)) (if (G28d3@G27fe@annotation? G311c@x) (G2d3a@syntax-cdr (G28d5@G2802@annotation-expression G311c@x)) (if (pair? G311c@x) (cdr G311c@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G311c@x)))))) (set! G2d3c@syntax->list (lambda (G311e@x) (if (G2d30@syntax-pair? G311e@x) (cons (G2d38@syntax-car G311e@x) (G2d3c@syntax->list (G2d3a@syntax-cdr G311e@x))) (if (G2d34@syntax-null? G311e@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G311e@x))))) (set! G2d3e@id? (lambda (G3120@x) (and (G2d06@stx? G3120@x) ((lambda (G3122@expr) (symbol? (if (G28d3@G27fe@annotation? G3122@expr) (G28d2@G27fc@annotation-stripped G3122@expr) G3122@expr))) (G2d0a@stx-expr G3120@x))))) (set! G2d40@id->sym (lambda (G3124@x) (begin (if (not (G2d06@stx? G3124@x)) (error 'id->sym '"BUG in ikarus: not an id" G3124@x) (void)) ((lambda (G3126@expr) ((lambda (G3128@sym) (if (symbol? G3128@sym) G3128@sym (error 'id->sym '"BUG in ikarus: not an id" G3124@x))) (if (G28d3@G27fe@annotation? G3126@expr) (G28d2@G27fc@annotation-stripped G3126@expr) G3126@expr))) (G2d0a@stx-expr G3124@x))))) (set! G2d42@same-marks? (lambda (G312a@x G312b@y) (or (and (null? G312a@x) (null? G312b@y)) (and (pair? G312a@x) (pair? G312b@y) (eq? (car G312a@x) (car G312b@y)) (G2d42@same-marks? (cdr G312a@x) (cdr G312b@y)))))) (set! G2d44@bound-id=? (lambda (G312e@x G312f@y) (and (eq? (G2d40@id->sym G312e@x) (G2d40@id->sym G312f@y)) (G2d42@same-marks? (G2d0c@stx-mark* G312e@x) (G2d0c@stx-mark* G312f@y))))) (set! G2d46@free-id=? (lambda (G3132@i G3133@j) ((lambda (G3136@t0 G3137@t1) (if (or G3136@t0 G3137@t1) (eq? G3136@t0 G3137@t1) (eq? (G2d40@id->sym G3132@i) (G2d40@id->sym G3133@j)))) (G2d5a@id->real-label G3132@i) (G2d5a@id->real-label G3133@j)))) (set! G2d48@valid-bound-ids? (lambda (G313a@id*) (and (for-all G2d3e@id? G313a@id*) (G2d4a@distinct-bound-ids? G313a@id*)))) (set! G2d4a@distinct-bound-ids? (lambda (G313c@id*) (or (null? G313c@id*) (and (not (G2d4c@bound-id-member? (car G313c@id*) (cdr G313c@id*))) (G2d4a@distinct-bound-ids? (cdr G313c@id*)))))) (set! G2d4c@bound-id-member? (lambda (G313e@id G313f@id*) (and (pair? G313f@id*) (or (G2d44@bound-id=? G313e@id (car G313f@id*)) (G2d4c@bound-id-member? G313e@id (cdr G313f@id*)))))) (set! G2d4e@self-evaluating? (lambda (G3142@x) (or (number? G3142@x) (string? G3142@x) (char? G3142@x) (boolean? G3142@x) (regexp? G3142@x) (bytevector? G3142@x)))) (set! G2d50@strip-annotations (lambda (G3144@x) (if (pair? G3144@x) (cons (G2d50@strip-annotations (car G3144@x)) (G2d50@strip-annotations (cdr G3144@x))) (if (vector? G3144@x) (vector-map G2d50@strip-annotations G3144@x) (if (G28d3@G27fe@annotation? G3144@x) (G28d2@G27fc@annotation-stripped G3144@x) G3144@x))))) (set! G2d52@strip (lambda (G3146@x G3147@m*) (if (G2cbc@top-marked? G3147@m*) (if (or (G28d3@G27fe@annotation? G3146@x) (and (pair? G3146@x) (G28d3@G27fe@annotation? (car G3146@x))) (and (vector? G3146@x) (> (vector-length G3146@x) '0) (G28d3@G27fe@annotation? (vector-ref G3146@x '0)))) (G2d50@strip-annotations G3146@x) G3146@x) ((letrec ((G314a@f (lambda (G314c@x) (if (G2d06@stx? G314c@x) (G2d52@strip (G2d0a@stx-expr G314c@x) (G2d0c@stx-mark* G314c@x)) (if (G28d3@G27fe@annotation? G314c@x) (G28d2@G27fc@annotation-stripped G314c@x) (if (pair? G314c@x) ((lambda (G314e@a G314f@d) (if (and (eq? G314e@a (car G314c@x)) (eq? G314f@d (cdr G314c@x))) G314c@x (cons G314e@a G314f@d))) (G314a@f (car G314c@x)) (G314a@f (cdr G314c@x))) (if (vector? G314c@x) ((lambda (G3152@old) ((lambda (G3154@new) (if (for-all eq? G3152@old G3154@new) G314c@x (list->vector G3154@new))) (map G314a@f G3152@old))) (vector->list G314c@x)) G314c@x))))))) G314a@f) G3146@x)))) (set! G2d54@stx->datum (lambda (G3156@x) (G2d52@strip G3156@x '()))) (set! G2d56@same-marks*? (lambda (G3158@mark* G3159@mark** G315a@si) (if (null? G315a@si) '#f (if (G2d42@same-marks? G3158@mark* (vector-ref G3159@mark** (car G315a@si))) (car G315a@si) (G2d56@same-marks*? G3158@mark* G3159@mark** (cdr G315a@si)))))) (set! G2d58@id->label (lambda (G315e@id) (or (G2d5a@id->real-label G315e@id) ((lambda (G3160@t) (if G3160@t ((lambda (G3162@env) ((lambda (G3164@rib) (call-with-values (lambda () (G2cc6@gen-define-label+loc G315e@id G3164@rib)) (lambda (G3168@G3166 G3169@G3167) ((lambda (G316c@loc_ G316d@lab) (begin (G2cef@extend-rib! G3164@rib G315e@id G316d@lab) G316d@lab)) G3169@G3167 G3168@G3166)))) (G2fe8@interaction-env-rib G3162@env))) G3160@t) '#f)) (G3036@top-level-context))))) (set! G2d5a@id->real-label (lambda (G3170@id) ((lambda (G3172@sym) ((letrec ((G3174@search (lambda (G3176@subst* G3177@mark*) (if (null? G3176@subst*) '#f (if (eq? (car G3176@subst*) 'shift) (G3174@search (cdr G3176@subst*) (cdr G3177@mark*)) ((lambda (G317a@rib) ((lambda (G317c@t) (if G317c@t ((lambda (G317e@ht) ((lambda (G3180@si) ((lambda (G3182@i) (if G3182@i (vector-ref (G2cdd@rib-label* G317a@rib) G3182@i) (G3174@search (cdr G3176@subst*) G3177@mark*))) (and G3180@si (G2d56@same-marks*? G3177@mark* (G2cdb@rib-mark** G317a@rib) (reverse G3180@si))))) (hashtable-ref G317e@ht G3172@sym '#f))) G317c@t) ((letrec ((G3184@f (lambda (G3186@sym* G3187@mark** G3188@label*) (if (null? G3186@sym*) (G3174@search (cdr G3176@subst*) G3177@mark*) (if (and (eq? (car G3186@sym*) G3172@sym) (G2d42@same-marks? (car G3187@mark**) G3177@mark*)) (car G3188@label*) (G3184@f (cdr G3186@sym*) (cdr G3187@mark**) (cdr G3188@label*))))))) G3184@f) (G2cd9@rib-sym* G317a@rib) (G2cdb@rib-mark** G317a@rib) (G2cdd@rib-label* G317a@rib)))) (G2cdf@rib-sealed/freq G317a@rib))) (car G3176@subst*))))))) G3174@search) (G2d0e@stx-subst* G3170@id) (G2d0c@stx-mark* G3170@id))) (G2d40@id->sym G3170@id)))) (set! G2d5c@label->binding (lambda (G318c@x G318d@r) ((lambda (G3190@t) (if G3190@t ((lambda (G3192@b) (if (and (pair? G3192@b) (eq? (car G3192@b) '$core-rtd)) (cons '$rtd (map G2ef3@bless (cdr G3192@b))) (if (and (pair? G3192@b) (eq? (car G3192@b) 'global-rtd)) ((lambda (G3194@lib G3195@loc) (cons '$rtd (symbol-value G3195@loc))) (cadr G3192@b) (cddr G3192@b)) G3192@b))) G3190@t) ((lambda (G3198@t) (if G3198@t (cdr G3198@t) ((lambda (G319a@t) (if G319a@t ((lambda (G319c@env) ((lambda (G319e@t) (if G319e@t ((lambda (G31a0@p) (cons* 'lexical (cdr G31a0@p) '#f)) G319e@t) '(displaced-lexical . #f))) (assq G318c@x (G2fec@interaction-env-locs G319c@env)))) G319a@t) '(displaced-lexical . #f))) (G3036@top-level-context)))) (assq G318c@x G318d@r)))) (G2b58@G29fe@imported-label->binding G318c@x)))) (set! G2d5e@make-binding cons) (set! G2d60@binding-type car) (set! G2d62@binding-value cdr) (set! G2d64@raise-unbound-error (lambda (G31a2@id) (G3026@syntax-violation* '#f '"unbound identifier" G31a2@id (G4c4c@G4a96@make-undefined-violation)))) (set! G2d66@syntax-type (lambda (G31a4@e G31a5@r) (if (G2d3e@id? G31a4@e) ((lambda (G31a8@id) ((lambda (G31aa@label) ((lambda (G31ac@b) ((lambda (G31ae@type) ((lambda () (begin (if (not G31aa@label) (G2d64@raise-unbound-error G31a8@id) (void)) ((lambda (G31b0@t) (if (memv G31b0@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31ae@type (G2d62@binding-value G31ac@b) G31a8@id) (values 'other '#f '#f))) G31ae@type))))) (G2d60@binding-type G31ac@b))) (G2d5c@label->binding G31aa@label G31a5@r))) (G2d58@id->label G31a8@id))) G31a4@e) (if (G2d30@syntax-pair? G31a4@e) ((lambda (G31b2@id) (if (G2d3e@id? G31b2@id) ((lambda (G31b4@label) ((lambda (G31b6@b) ((lambda (G31b8@type) ((lambda () (begin (if (not G31b4@label) (G2d64@raise-unbound-error G31b2@id) (void)) ((lambda (G31ba@t) (if (memv G31ba@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31b8@type (G2d62@binding-value G31b6@b) G31b2@id) (values 'call '#f '#f))) G31b8@type))))) (G2d60@binding-type G31b6@b))) (G2d5c@label->binding G31b4@label G31a5@r))) (G2d58@id->label G31b2@id)) (values 'call '#f '#f))) (G2d38@syntax-car G31a4@e)) ((lambda (G31bc@d) (if (G2d4e@self-evaluating? G31bc@d) (values 'constant G31bc@d '#f) (values 'other '#f '#f))) (G2d54@stx->datum G31a4@e)))))) (set! G2d76@sanitize-binding (lambda (G31be@x G31bf@src) (if (procedure? G31be@x) (cons* 'local-macro G31be@x G31bf@src) (if (and (pair? G31be@x) (eq? (car G31be@x) 'macro!) (procedure? (cdr G31be@x))) (cons* 'local-macro! (cdr G31be@x) G31bf@src) (if (and (pair? G31be@x) (eq? (car G31be@x) '$rtd)) G31be@x (assertion-violation 'expand '"invalid transformer" G31be@x)))))) (set! G2d78@make-variable-transformer (lambda (G31c2@x) (if (procedure? G31c2@x) (cons 'macro! G31c2@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31c2@x)))) (set! G2d7a@variable-transformer? (lambda (G31c4@x) (and (pair? G31c4@x) (eq? (car G31c4@x) 'macro!) (procedure? (cdr G31c4@x))))) (set! G2d7c@variable-transformer-procedure (lambda (G31c6@x) (if (G2d7a@variable-transformer? G31c6@x) (cdr G31c6@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31c6@x)))) (set! G2d7e@make-eval-transformer (lambda (G31c8@x) (G2d76@sanitize-binding (eval-core (G2932@G28ea@expanded->core G31c8@x)) G31c8@x))) (set! G2ec1@parse-define (lambda (G31ca@x) ((lambda (G31cc@t) ((lambda (G31ce@ls/false) (if (and G31ce@ls/false (apply (lambda (G31d0@id G31d1@fmls G31d2@b G31d3@b*) (G2d3e@id? G31d0@id)) G31ce@ls/false)) (apply (lambda (G31d8@id G31d9@fmls G31da@b G31db@b*) (begin (G2f65@verify-formals G31d9@fmls G31ca@x) (values G31d8@id (cons 'defun (cons G31d9@fmls (cons G31da@b G31db@b*)))))) G31ce@ls/false) ((lambda (G31e0@t) ((lambda (G31e2@ls/false) (if (and G31e2@ls/false (apply (lambda (G31e4@id G31e5@val) (G2d3e@id? G31e4@id)) G31e2@ls/false)) (apply (lambda (G31e8@id G31e9@val) (values G31e8@id (cons 'expr G31e9@val))) G31e2@ls/false) ((lambda (G31ec@t) ((lambda (G31ee@ls/false) (if (and G31ee@ls/false (apply (lambda (G31f0@id) (G2d3e@id? G31f0@id)) G31ee@ls/false)) (apply (lambda (G31f2@id) (values G31f2@id (cons 'expr (G2ef3@bless '(void))))) G31ee@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G31ec@t))) (G2f3d@syntax-dispatch G31ec@t '(_ any)))) G31e0@t))) (G2f3d@syntax-dispatch G31e0@t '(_ any any)))) G31cc@t))) (G2f3d@syntax-dispatch G31cc@t '(_ (any . any) any . each-any)))) G31ca@x))) (set! G2ec3@parse-define-syntax (lambda (G31f4@x) ((lambda (G31f6@t) ((lambda (G31f8@ls/false) (if (and G31f8@ls/false (apply (lambda (G31fa@id G31fb@val) (G2d3e@id? G31fa@id)) G31f8@ls/false)) (apply (lambda (G31fe@id G31ff@val) (values G31fe@id G31ff@val)) G31f8@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G31f6@t))) (G2f3d@syntax-dispatch G31f6@t '(_ any any)))) G31f4@x))) (set! G2ec5@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ec7@scheme-stx (lambda (G3202@sym) (or (hashtable-ref G2ec5@scheme-stx-hashtable G3202@sym '#f) ((lambda (G3204@subst) ((lambda (G3206@stx) ((lambda (G3208@stx) ((lambda () (begin (hashtable-set! G2ec5@scheme-stx-hashtable G3202@sym G3208@stx) G3208@stx)))) ((lambda (G320a@t) (if G320a@t ((lambda (G320c@x) ((lambda (G320e@name G320f@label) (G2d2a@add-subst (G2cd7@make-rib (list G320e@name) (list G2cba@top-mark*) (list G320f@label) '#f '#f) G3206@stx)) (car G320c@x) (cdr G320c@x))) G320a@t) G3206@stx)) (assq G3202@sym G3204@subst)))) (G2d08@make-stx G3202@sym G2cba@top-mark* '() '()))) (G2b2e@G29aa@library-subst (G2b52@G29f2@find-library-by-name '(psyntax system $all))))))) (set! G2ec9@lexical-var car) (set! G2ecb@lexical-mutable? cdr) (set! G2ecd@set-lexical-mutable! set-cdr!) (set! G2ecf@add-lexical (lambda (G3212@lab G3213@lex G3214@r) (cons (cons* G3212@lab 'lexical G3213@lex '#f) G3214@r))) (set! G2ed1@add-lexicals (lambda (G3218@lab* G3219@lex* G321a@r) (if (null? G3218@lab*) G321a@r (G2ed1@add-lexicals (cdr G3218@lab*) (cdr G3219@lex*) (G2ecf@add-lexical (car G3218@lab*) (car G3219@lex*) G321a@r))))) (set! G2ed3@letrec-helper (lambda (G321e@e G321f@r G3220@mr G3221@build) ((lambda (G3226@t) ((lambda (G3228@ls/false) (if G3228@ls/false (apply (lambda (G322a@lhs* G322b@rhs* G322c@b G322d@b*) (if (not (G2d48@valid-bound-ids? G322a@lhs*)) (G2ef7@invalid-fmls-error G321e@e G322a@lhs*) ((lambda (G3232@lex* G3233@lab*) ((lambda (G3236@rib G3237@r) ((lambda (G323a@body G323b@rhs*) (G3221@build '#f G3232@lex* G323b@rhs* G323a@body)) (G2f77@chi-internal (G2d2a@add-subst G3236@rib (cons G322c@b G322d@b*)) G3237@r G3220@mr) (G2f5d@chi-expr* (map (lambda (G323e@x) (G2d2a@add-subst G3236@rib G323e@x)) G322b@rhs*) G3237@r G3220@mr))) (G2cf9@make-full-rib G322a@lhs* G3233@lab*) (G2ed1@add-lexicals G3233@lab* G3232@lex* G321f@r))) (map G2cbe@gen-lexical G322a@lhs*) (map G2cc2@gen-label G322a@lhs*)))) G3228@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3226@t))) (G2f3d@syntax-dispatch G3226@t '(_ #(each (any any)) any . each-any)))) G321e@e))) (set! G2ed5@letrec-transformer (lambda (G3240@e G3241@r G3242@mr) (G2ed3@letrec-helper G3240@e G3241@r G3242@mr G2ca1@G2c14@build-letrec))) (set! G2ed7@letrec*-transformer (lambda (G3246@e G3247@r G3248@mr) (G2ed3@letrec-helper G3246@e G3247@r G3248@mr G2ca2@G2c16@build-letrec*))) (set! G2ed9@fluid-let-syntax-transformer (lambda (G324c@e G324d@r G324e@mr) ((lambda (G3253@lookup) (begin (set! G3253@lookup (lambda (G3266@x) (or (G2d58@id->label G3266@x) (G3028@syntax-violation '#f '"unbound identifier" G324c@e G3266@x)))) ((lambda (G3254@t) ((lambda (G3256@ls/false) (if G3256@ls/false (apply (lambda (G3258@lhs* G3259@rhs* G325a@b G325b@b*) (if (not (G2d48@valid-bound-ids? G3258@lhs*)) (G2ef7@invalid-fmls-error G324c@e G3258@lhs*) ((lambda (G3260@lab* G3261@rhs*) (G2f77@chi-internal (cons G325a@b G325b@b*) (append (map cons G3260@lab* G3261@rhs*) G324d@r) (append (map cons G3260@lab* G3261@rhs*) G324e@mr))) (map G3253@lookup G3258@lhs*) (map (lambda (G3264@x) (G2d7e@make-eval-transformer (G2f9c@expand-transformer G3264@x G324e@mr))) G3259@rhs*)))) G3256@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3254@t))) (G2f3d@syntax-dispatch G3254@t '(_ #(each (any any)) any . each-any)))) G324c@e))) '#f))) (set! G2edb@type-descriptor-transformer (lambda (G3268@e G3269@r G326a@mr) ((lambda (G326e@t) ((lambda (G3270@ls/false) (if (and G3270@ls/false (apply (lambda (G3272@id) (G2d3e@id? G3272@id)) G3270@ls/false)) (apply (lambda (G3274@id) ((lambda (G3276@lab) ((lambda (G3278@b) ((lambda (G327a@type) ((lambda () (begin (if (not G3276@lab) (G2d64@raise-unbound-error G3274@id) (void)) (if (not (and (eq? G327a@type '$rtd) (not (list? (G2d62@binding-value G3278@b))))) (G3028@syntax-violation '#f '"not a record type" G3268@e) (void)) (list 'quote (G2d62@binding-value G3278@b)))))) (G2d60@binding-type G3278@b))) (G2d5c@label->binding G3276@lab G3269@r))) (G2d58@id->label G3274@id))) G3270@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G326e@t))) (G2f3d@syntax-dispatch G326e@t '(_ any)))) G3268@e))) (set! G2edd@record-type-descriptor-transformer (lambda (G327c@e G327d@r G327e@mr) ((lambda (G3282@t) ((lambda (G3284@ls/false) (if (and G3284@ls/false (apply (lambda (G3286@id) (G2d3e@id? G3286@id)) G3284@ls/false)) (apply (lambda (G3288@id) ((lambda (G328a@lab) ((lambda (G328c@b) ((lambda (G328e@type) ((lambda () (begin (if (not G328a@lab) (G2d64@raise-unbound-error G3288@id) (void)) (if (not (and (eq? G328e@type '$rtd) (list? (G2d62@binding-value G328c@b)))) (G3028@syntax-violation '#f '"not a record type" G327c@e) (void)) (G2f61@chi-expr (car (G2d62@binding-value G328c@b)) G327d@r G327e@mr))))) (G2d60@binding-type G328c@b))) (G2d5c@label->binding G328a@lab G327d@r))) (G2d58@id->label G3288@id))) G3284@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3282@t))) (G2f3d@syntax-dispatch G3282@t '(_ any)))) G327c@e))) (set! G2edf@record-constructor-descriptor-transformer (lambda (G3290@e G3291@r G3292@mr) ((lambda (G3296@t) ((lambda (G3298@ls/false) (if (and G3298@ls/false (apply (lambda (G329a@id) (G2d3e@id? G329a@id)) G3298@ls/false)) (apply (lambda (G329c@id) ((lambda (G329e@lab) ((lambda (G32a0@b) ((lambda (G32a2@type) ((lambda () (begin (if (not G329e@lab) (G2d64@raise-unbound-error G329c@id) (void)) (if (not (and (eq? G32a2@type '$rtd) (list? (G2d62@binding-value G32a0@b)))) (G3028@syntax-violation '#f '"invalid type" G3290@e) (void)) (G2f61@chi-expr (cadr (G2d62@binding-value G32a0@b)) G3291@r G3292@mr))))) (G2d60@binding-type G32a0@b))) (G2d5c@label->binding G329e@lab G3291@r))) (G2d58@id->label G329c@id))) G3298@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3296@t))) (G2f3d@syntax-dispatch G3296@t '(_ any)))) G3290@e))) (set! G2ee1@when-macro (lambda (G32a4@e) ((lambda (G32a6@t) ((lambda (G32a8@ls/false) (if G32a8@ls/false (apply (lambda (G32aa@test G32ab@e G32ac@e*) (G2ef3@bless (list 'if G32aa@test (cons 'begin (cons G32ab@e G32ac@e*))))) G32a8@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G32a6@t))) (G2f3d@syntax-dispatch G32a6@t '(_ any any . each-any)))) G32a4@e))) (set! G2ee3@unless-macro (lambda (G32b0@e) ((lambda (G32b2@t) ((lambda (G32b4@ls/false) (if G32b4@ls/false (apply (lambda (G32b6@test G32b7@e G32b8@e*) (G2ef3@bless (list 'if (list 'not G32b6@test) (cons 'begin (cons G32b7@e G32b8@e*))))) G32b4@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G32b2@t))) (G2f3d@syntax-dispatch G32b2@t '(_ any any . each-any)))) G32b0@e))) (set! G2ee5@if-transformer (lambda (G32bc@e G32bd@r G32be@mr) ((lambda (G32c2@t) ((lambda (G32c4@ls/false) (if G32c4@ls/false (apply (lambda (G32c6@e0 G32c7@e1 G32c8@e2) (list 'if (G2f61@chi-expr G32c6@e0 G32bd@r G32be@mr) (G2f61@chi-expr G32c7@e1 G32bd@r G32be@mr) (G2f61@chi-expr G32c8@e2 G32bd@r G32be@mr))) G32c4@ls/false) ((lambda (G32cc@t) ((lambda (G32ce@ls/false) (if G32ce@ls/false (apply (lambda (G32d0@e0 G32d1@e1) (list 'if (G2f61@chi-expr G32d0@e0 G32bd@r G32be@mr) (G2f61@chi-expr G32d1@e1 G32bd@r G32be@mr) (G2ca0@G2c12@build-void))) G32ce@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G32cc@t))) (G2f3d@syntax-dispatch G32cc@t '(_ any any)))) G32c2@t))) (G2f3d@syntax-dispatch G32c2@t '(_ any any any)))) G32bc@e))) (set! G2ee7@and-transformer (lambda (G32d4@e G32d5@r G32d6@mr) ((lambda (G32da@t) ((lambda (G32dc@ls/false) (if G32dc@ls/false (apply (lambda (G32de@e*) (cons 'and (G2f5d@chi-expr* G32de@e* G32d5@r G32d6@mr))) G32dc@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G32da@t))) (G2f3d@syntax-dispatch G32da@t '(_ . each-any)))) G32d4@e))) (set! G2ee9@or-transformer (lambda (G32e0@e G32e1@r G32e2@mr) ((lambda (G32e6@t) ((lambda (G32e8@ls/false) (if G32e8@ls/false (apply (lambda (G32ea@e*) (cons 'or (G2f5d@chi-expr* G32ea@e* G32e1@r G32e2@mr))) G32e8@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G32e6@t))) (G2f3d@syntax-dispatch G32e6@t '(_ . each-any)))) G32e0@e))) (set! G2eeb@case-macro (lambda (G32ec@e) ((lambda (G32ef@build-last G32f1@build-one) (begin (set! G32ef@build-last (lambda (G3316@cls) ((lambda (G3318@t) ((lambda (G331a@ls/false) (if G331a@ls/false (apply (lambda (G331c@e G331d@e*) (cons 'begin (cons G331c@e G331d@e*))) G331a@ls/false) ((lambda (G3320@t) ((lambda (G3322@ls/false) (if G3322@ls/false (apply (lambda () (G32f1@build-one G3316@cls '(if #f #f))) G3322@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3320@t))) (G2f3d@syntax-dispatch G3320@t '_))) G3318@t))) (G2f3d@syntax-dispatch G3318@t '(#(scheme-id else) any . each-any)))) G3316@cls))) (set! G32f1@build-one (lambda (G3308@cls G3309@k) ((lambda (G330c@t) ((lambda (G330e@ls/false) (if G330e@ls/false (apply (lambda (G3310@d* G3311@e G3312@e*) (list 'if (list 'memv 't (list 'quote G3310@d*)) (cons 'begin (cons G3311@e G3312@e*)) G3309@k)) G330e@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G330c@t))) (G2f3d@syntax-dispatch G330c@t '(each-any any . each-any)))) G3308@cls))) ((lambda (G32f2@t) ((lambda (G32f4@ls/false) (if G32f4@ls/false (apply (lambda (G32f6@expr) (G2ef3@bless (cons 'let (cons (list (list 't G32f6@expr)) '((if #f #f)))))) G32f4@ls/false) ((lambda (G32f8@t) ((lambda (G32fa@ls/false) (if G32fa@ls/false (apply (lambda (G32fc@expr G32fd@cls G32fe@cls*) (G2ef3@bless (list 'let (list (list 't G32fc@expr)) ((letrec ((G3302@f (lambda (G3304@cls G3305@cls*) (if (null? G3305@cls*) (G32ef@build-last G3304@cls) (G32f1@build-one G3304@cls (G3302@f (car G3305@cls*) (cdr G3305@cls*))))))) G3302@f) G32fd@cls G32fe@cls*)))) G32fa@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G32f8@t))) (G2f3d@syntax-dispatch G32f8@t '(_ any any . each-any)))) G32f2@t))) (G2f3d@syntax-dispatch G32f2@t '(_ any)))) G32ec@e))) '#f '#f))) (set! G2eed@quote-transformer (lambda (G3324@e G3325@r G3326@mr) ((lambda (G332a@t) ((lambda (G332c@ls/false) (if G332c@ls/false (apply (lambda (G332e@datum) (list 'quote (G2d54@stx->datum G332e@datum))) G332c@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G332a@t))) (G2f3d@syntax-dispatch G332a@t '(_ any)))) G3324@e))) (set! G2eef@case-lambda-transformer (lambda (G3330@e G3331@r G3332@mr) ((lambda (G3336@t) ((lambda (G3338@ls/false) (if G3338@ls/false (apply (lambda (G333a@fmls* G333b@b* G333c@b**) (call-with-values (lambda () (G2f69@chi-lambda-clause* G3330@e G333a@fmls* (map cons G333b@b* G333c@b**) G3331@r G3332@mr)) (lambda (G3342@G3340 G3343@G3341) ((lambda (G3346@body* G3347@fmls*) (G2c9d@G2bdc@build-case-lambda '#f G3347@fmls* G3346@body*)) G3343@G3341 G3342@G3340)))) G3338@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3336@t))) (G2f3d@syntax-dispatch G3336@t '(_ . #(each (any any . each-any)))))) G3330@e))) (set! G2ef1@lambda-transformer (lambda (G334a@e G334b@r G334c@mr) ((lambda (G3350@t) ((lambda (G3352@ls/false) (if G3352@ls/false (apply (lambda (G3354@fmls G3355@b G3356@b*) (call-with-values (lambda () (G2f67@chi-lambda-clause G334a@e G3354@fmls (cons G3355@b G3356@b*) G334b@r G334c@mr)) (lambda (G335c@G335a G335d@G335b) ((lambda (G3360@body G3361@fmls) (G2c9c@G2bda@build-lambda '#f G3361@fmls G3360@body)) G335d@G335b G335c@G335a)))) G3352@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3350@t))) (G2f3d@syntax-dispatch G3350@t '(_ any any . each-any)))) G334a@e))) (set! G2ef3@bless (lambda (G3364@x) (G2d26@mkstx ((letrec ((G3366@f (lambda (G3368@x) (if (G2d06@stx? G3368@x) G3368@x (if (pair? G3368@x) (cons (G3366@f (car G3368@x)) (G3366@f (cdr G3368@x))) (if (symbol? G3368@x) (G2ec7@scheme-stx G3368@x) (if (vector? G3368@x) (vector-map G3366@f G3368@x) G3368@x))))))) G3366@f) G3364@x) '() '() '()))) (set! G2ef5@with-syntax-macro (lambda (G336a@e) ((lambda (G336c@t) ((lambda (G336e@ls/false) (if G336e@ls/false (apply (lambda (G3370@pat* G3371@expr* G3372@b G3373@b*) ((lambda (G3378@idn*) (begin (G2f65@verify-formals (map car G3378@idn*) G336a@e) ((lambda (G337a@t*) (G2ef3@bless (list 'let (map list G337a@t* G3371@expr*) ((letrec ((G337c@f (lambda (G337e@pat* G337f@t*) (if (null? G337e@pat*) (cons 'begin (cons '#f (cons G3372@b G3373@b*))) (list 'syntax-case (car G337f@t*) '() (list (car G337e@pat*) (G337c@f (cdr G337e@pat*) (cdr G337f@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G337e@pat*)) (car G337f@t*)))))))) G337c@f) G3370@pat* G337a@t*)))) (G3016@generate-temporaries G3371@expr*)))) ((letrec ((G3382@f (lambda (G3384@pat*) (if (null? G3384@pat*) '() (call-with-values (lambda () (G2f3b@convert-pattern (car G3384@pat*) '())) (lambda (G3388@G3386 G3389@G3387) ((lambda (G338c@idn* G338d@pat) (append G338c@idn* (G3382@f (cdr G3384@pat*)))) G3389@G3387 G3388@G3386))))))) G3382@f) G3370@pat*))) G336e@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G336c@t))) (G2f3d@syntax-dispatch G336c@t '(_ #(each (any any)) any . each-any)))) G336a@e))) (set! G2ef7@invalid-fmls-error (lambda (G3390@stx G3391@fmls) ((lambda (G3394@t) ((lambda (G3396@ls/false) (if G3396@ls/false (apply (lambda (G3398@id* G3399@last) ((letrec ((G339c@f (lambda (G339e@id*) (if (null? G339e@id*) (values) (if (not (G2d3e@id? (car G339e@id*))) (G3028@syntax-violation '#f '"not an identifier" G3390@stx (car G339e@id*)) (begin (G339c@f (cdr G339e@id*)) (if (G2d4c@bound-id-member? (car G339e@id*) (cdr G339e@id*)) (G3028@syntax-violation '#f '"duplicate binding" G3390@stx (car G339e@id*)) (void)))))))) G339c@f) (if (G2d3e@id? G3399@last) (cons G3399@last G3398@id*) (if (G2d34@syntax-null? G3399@last) G3398@id* (G3028@syntax-violation '#f '"not an identifier" G3390@stx G3399@last))))) G3396@ls/false) ((lambda (G33a0@t) ((lambda (G33a2@ls/false) (if G33a2@ls/false (apply (lambda () (G3028@syntax-violation '#f '"malformed binding form" G3390@stx G3391@fmls)) G33a2@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G33a0@t))) (G2f3d@syntax-dispatch G33a0@t '_))) G3394@t))) (G2f3d@syntax-dispatch G3394@t '#(each+ any () any)))) G3391@fmls))) (set! G2ef9@let-macro (lambda (G33a4@stx) ((lambda (G33a6@t) ((lambda (G33a8@ls/false) (if G33a8@ls/false (apply (lambda (G33aa@lhs* G33ab@rhs* G33ac@b G33ad@b*) (if (G2d48@valid-bound-ids? G33aa@lhs*) (G2ef3@bless (cons (cons 'lambda (cons G33aa@lhs* (cons G33ac@b G33ad@b*))) G33ab@rhs*)) (G2ef7@invalid-fmls-error G33a4@stx G33aa@lhs*))) G33a8@ls/false) ((lambda (G33b2@t) ((lambda (G33b4@ls/false) (if (and G33b4@ls/false (apply (lambda (G33b6@f G33b7@lhs* G33b8@rhs* G33b9@b G33ba@b*) (G2d3e@id? G33b6@f)) G33b4@ls/false)) (apply (lambda (G33c0@f G33c1@lhs* G33c2@rhs* G33c3@b G33c4@b*) (if (G2d48@valid-bound-ids? G33c1@lhs*) (G2ef3@bless (cons (list 'letrec (list (list G33c0@f (cons 'lambda (cons G33c1@lhs* (cons G33c3@b G33c4@b*))))) G33c0@f) G33c2@rhs*)) (G2ef7@invalid-fmls-error G33a4@stx G33c1@lhs*))) G33b4@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G33b2@t))) (G2f3d@syntax-dispatch G33b2@t '(_ any #(each (any any)) any . each-any)))) G33a6@t))) (G2f3d@syntax-dispatch G33a6@t '(_ #(each (any any)) any . each-any)))) G33a4@stx))) (set! G2efb@let-values-macro (lambda (G33ca@stx) ((lambda (G33cd@rename G33cf@rename*) (begin (set! G33cd@rename (lambda (G342f@x G3430@old* G3431@new*) (begin (if (not (G2d3e@id? G342f@x)) (G3028@syntax-violation '#f '"not an indentifier" G33ca@stx G342f@x) (void)) (if (G2d4c@bound-id-member? G342f@x G3430@old*) (G3028@syntax-violation '#f '"duplicate binding" G33ca@stx G342f@x) (void)) ((lambda (G3435@y) (values G3435@y (cons G342f@x G3430@old*) (cons G3435@y G3431@new*))) (gensym (G302e@syntax->datum G342f@x)))))) (set! G33cf@rename* (lambda (G341d@x* G341e@old* G341f@new*) (if (null? G341d@x*) (values '() G341e@old* G341f@new*) (call-with-values (lambda () (G33cd@rename (car G341d@x*) G341e@old* G341f@new*)) (lambda (G3423@x G3424@old* G3425@new*) (call-with-values (lambda () (G33cf@rename* (cdr G341d@x*) G3424@old* G3425@new*)) (lambda (G3429@x* G342a@old* G342b@new*) (values (cons G3423@x G3429@x*) G342a@old* G342b@new*)))))))) ((lambda (G33d0@t) ((lambda (G33d2@ls/false) (if G33d2@ls/false (apply (lambda (G33d4@b G33d5@b*) (cons* (G2ef3@bless 'let) '() G33d4@b G33d5@b*)) G33d2@ls/false) ((lambda (G33d8@t) ((lambda (G33da@ls/false) (if G33da@ls/false (apply (lambda (G33dc@lhs* G33dd@rhs* G33de@b G33df@b*) (G2ef3@bless ((letrec ((G33e4@f (lambda (G33e6@lhs* G33e7@rhs* G33e8@old* G33e9@new*) (if (null? G33e6@lhs*) (cons 'let (cons (map list G33e8@old* G33e9@new*) (cons G33de@b G33df@b*))) ((lambda (G33ee@t) ((lambda (G33f0@ls/false) (if G33f0@ls/false (apply (lambda (G33f2@x*) (call-with-values (lambda () (G33cf@rename* G33f2@x* G33e8@old* G33e9@new*)) (lambda (G33f7@G33f4 G33f8@G33f5 G33f9@G33f6) ((lambda (G33fd@new* G33fe@old* G33ff@y*) (list 'call-with-values (list 'lambda '() (car G33e7@rhs*)) (list 'lambda G33ff@y* (G33e4@f (cdr G33e6@lhs*) (cdr G33e7@rhs*) G33fe@old* G33fd@new*)))) G33f9@G33f6 G33f8@G33f5 G33f7@G33f4)))) G33f0@ls/false) ((lambda (G3403@t) ((lambda (G3405@ls/false) (if G3405@ls/false (apply (lambda (G3407@x* G3408@x) (call-with-values (lambda () (G33cd@rename G3408@x G33e8@old* G33e9@new*)) (lambda (G340b@y G340c@old* G340d@new*) (call-with-values (lambda () (G33cf@rename* G3407@x* G340c@old* G340d@new*)) (lambda (G3411@y* G3412@old* G3413@new*) (list 'call-with-values (list 'lambda '() (car G33e7@rhs*)) (list 'lambda (append G3411@y* G340b@y) (G33e4@f (cdr G33e6@lhs*) (cdr G33e7@rhs*) G3412@old* G3413@new*)))))))) G3405@ls/false) ((lambda (G3417@t) ((lambda (G3419@ls/false) (if G3419@ls/false (apply (lambda (G341b@others) (G3028@syntax-violation '#f '"malformed bindings" G33ca@stx G341b@others)) G3419@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3417@t))) (G2f3d@syntax-dispatch G3417@t 'any))) G3403@t))) (G2f3d@syntax-dispatch G3403@t '#(each+ any () any)))) G33ee@t))) (G2f3d@syntax-dispatch G33ee@t 'each-any))) (car G33e6@lhs*)))))) G33e4@f) G33dc@lhs* G33dd@rhs* '() '()))) G33da@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G33d8@t))) (G2f3d@syntax-dispatch G33d8@t '(_ #(each (any any)) any . each-any)))) G33d0@t))) (G2f3d@syntax-dispatch G33d0@t '(_ () any . each-any)))) G33ca@stx))) '#f '#f))) (set! G2efd@let*-values-macro (lambda (G3437@stx) ((lambda (G343a@check) (begin (set! G343a@check (lambda (G3469@x*) (if (not (null? G3469@x*)) ((lambda (G346b@x) (begin (if (not (G2d3e@id? G346b@x)) (G3028@syntax-violation '#f '"not an identifier" G3437@stx G346b@x) (void)) (G343a@check (cdr G3469@x*)) (if (G2d4c@bound-id-member? G346b@x (cdr G3469@x*)) (G3028@syntax-violation '#f '"duplicate identifier" G3437@stx G346b@x) (void)))) (car G3469@x*)) (void)))) ((lambda (G343b@t) ((lambda (G343d@ls/false) (if G343d@ls/false (apply (lambda (G343f@b G3440@b*) (cons* (G2ef3@bless 'let) '() G343f@b G3440@b*)) G343d@ls/false) ((lambda (G3443@t) ((lambda (G3445@ls/false) (if G3445@ls/false (apply (lambda (G3447@lhs* G3448@rhs* G3449@b G344a@b*) (G2ef3@bless ((letrec ((G344f@f (lambda (G3451@lhs* G3452@rhs*) (if (null? G3451@lhs*) (cons 'begin (cons G3449@b G344a@b*)) ((lambda (G3455@t) ((lambda (G3457@ls/false) (if G3457@ls/false (apply (lambda (G3459@x*) (begin (G343a@check G3459@x*) (list 'call-with-values (list 'lambda '() (car G3452@rhs*)) (list 'lambda G3459@x* (G344f@f (cdr G3451@lhs*) (cdr G3452@rhs*)))))) G3457@ls/false) ((lambda (G345b@t) ((lambda (G345d@ls/false) (if G345d@ls/false (apply (lambda (G345f@x* G3460@x) (begin (G343a@check (cons G3460@x G345f@x*)) (list 'call-with-values (list 'lambda '() (car G3452@rhs*)) (list 'lambda (append G345f@x* G3460@x) (G344f@f (cdr G3451@lhs*) (cdr G3452@rhs*)))))) G345d@ls/false) ((lambda (G3463@t) ((lambda (G3465@ls/false) (if G3465@ls/false (apply (lambda (G3467@others) (G3028@syntax-violation '#f '"malformed bindings" G3437@stx G3467@others)) G3465@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3463@t))) (G2f3d@syntax-dispatch G3463@t 'any))) G345b@t))) (G2f3d@syntax-dispatch G345b@t '#(each+ any () any)))) G3455@t))) (G2f3d@syntax-dispatch G3455@t 'each-any))) (car G3451@lhs*)))))) G344f@f) G3447@lhs* G3448@rhs*))) G3445@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3443@t))) (G2f3d@syntax-dispatch G3443@t '(_ #(each (any any)) any . each-any)))) G343b@t))) (G2f3d@syntax-dispatch G343b@t '(_ () any . each-any)))) G3437@stx))) '#f))) (set! G2eff@trace-lambda-macro (lambda (G346d@stx) ((lambda (G346f@t) ((lambda (G3471@ls/false) (if G3471@ls/false (apply (lambda (G3473@who G3474@fmls G3475@b G3476@b*) (if (G2d48@valid-bound-ids? G3474@fmls) (G2ef3@bless (list 'make-traced-procedure (list 'quote G3473@who) (cons 'lambda (cons G3474@fmls (cons G3475@b G3476@b*))))) (G2ef7@invalid-fmls-error G346d@stx G3474@fmls))) G3471@ls/false) ((lambda (G347b@t) ((lambda (G347d@ls/false) (if G347d@ls/false (apply (lambda (G347f@who G3480@fmls G3481@last G3482@b G3483@b*) (if (G2d48@valid-bound-ids? (cons G3481@last G3480@fmls)) (G2ef3@bless (list 'make-traced-procedure (list 'quote G347f@who) (cons 'lambda (cons (append G3480@fmls G3481@last) (cons G3482@b G3483@b*))))) (G2ef7@invalid-fmls-error G346d@stx (append G3480@fmls G3481@last)))) G347d@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G347b@t))) (G2f3d@syntax-dispatch G347b@t '(_ any #(each+ any () any) any . each-any)))) G346f@t))) (G2f3d@syntax-dispatch G346f@t '(_ any each-any any . each-any)))) G346d@stx))) (set! G2f01@trace-define-macro (lambda (G3489@stx) ((lambda (G348b@t) ((lambda (G348d@ls/false) (if G348d@ls/false (apply (lambda (G348f@who G3490@fmls G3491@b G3492@b*) (if (G2d48@valid-bound-ids? G3490@fmls) (G2ef3@bless (list 'define G348f@who (list 'make-traced-procedure (list 'quote G348f@who) (cons 'lambda (cons G3490@fmls (cons G3491@b G3492@b*)))))) (G2ef7@invalid-fmls-error G3489@stx G3490@fmls))) G348d@ls/false) ((lambda (G3497@t) ((lambda (G3499@ls/false) (if G3499@ls/false (apply (lambda (G349b@who G349c@fmls G349d@last G349e@b G349f@b*) (if (G2d48@valid-bound-ids? (cons G349d@last G349c@fmls)) (G2ef3@bless (list 'define G349b@who (list 'make-traced-procedure (list 'quote G349b@who) (cons 'lambda (cons (append G349c@fmls G349d@last) (cons G349e@b G349f@b*)))))) (G2ef7@invalid-fmls-error G3489@stx (append G349c@fmls G349d@last)))) G3499@ls/false) ((lambda (G34a5@t) ((lambda (G34a7@ls/false) (if G34a7@ls/false (apply (lambda (G34a9@who G34aa@expr) (if (G2d3e@id? G34a9@who) (G2ef3@bless (list 'define G34a9@who (list 'let (list (list 'v G34aa@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34a9@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3028@syntax-violation '#f '"invalid name" G3489@stx))) G34a7@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G34a5@t))) (G2f3d@syntax-dispatch G34a5@t '(_ any any)))) G3497@t))) (G2f3d@syntax-dispatch G3497@t '(_ (any . #(each+ any () any)) any . each-any)))) G348b@t))) (G2f3d@syntax-dispatch G348b@t '(_ (any . each-any) any . each-any)))) G3489@stx))) (set! G2f03@trace-define-syntax-macro (lambda (G34ad@stx) ((lambda (G34af@t) ((lambda (G34b1@ls/false) (if G34b1@ls/false (apply (lambda (G34b3@who G34b4@expr) (if (G2d3e@id? G34b3@who) (G2ef3@bless (list 'define-syntax G34b3@who (list 'make-traced-macro (list 'quote G34b3@who) G34b4@expr))) (G3028@syntax-violation '#f '"invalid name" G34ad@stx))) G34b1@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G34af@t))) (G2f3d@syntax-dispatch G34af@t '(_ any any)))) G34ad@stx))) (set! G2f05@trace-let/rec-syntax (lambda (G34b7@who) (lambda (G34b9@stx) ((lambda (G34bb@t) ((lambda (G34bd@ls/false) (if G34bd@ls/false (apply (lambda (G34bf@lhs* G34c0@rhs* G34c1@b G34c2@b*) (if (G2d48@valid-bound-ids? G34bf@lhs*) ((lambda (G34c7@rhs*) (G2ef3@bless (cons G34b7@who (cons (map list G34bf@lhs* G34c7@rhs*) (cons G34c1@b G34c2@b*))))) (map (lambda (G34c9@lhs G34ca@rhs) (list 'make-traced-macro (list 'quote G34c9@lhs) G34ca@rhs)) G34bf@lhs* G34c0@rhs*)) (G2ef7@invalid-fmls-error G34b9@stx G34bf@lhs*))) G34bd@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G34bb@t))) (G2f3d@syntax-dispatch G34bb@t '(_ #(each (any any)) any . each-any)))) G34b9@stx)))) (set! G2f07@trace-let-syntax-macro (G2f05@trace-let/rec-syntax 'let-syntax)) (set! G2f09@trace-letrec-syntax-macro (G2f05@trace-let/rec-syntax 'letrec-syntax)) (set! G2f0b@guard-macro (lambda (G34cd@x) ((lambda (G34d0@gen-clauses) (begin (set! G34d0@gen-clauses (lambda (G34e7@con G34e8@outerk G34e9@clause*) ((lambda (G34ee@f G34f0@f*) (begin (set! G34ee@f (lambda (G3523@x G3524@k) ((lambda (G3527@t) ((lambda (G3529@ls/false) (if G3529@ls/false (apply (lambda (G352b@e G352c@p) ((lambda (G352f@t) (list 'let (list (list G352f@t G352b@e)) (list 'if G352f@t (list G352c@p G352f@t) G3524@k))) (gensym))) G3529@ls/false) ((lambda (G3531@t) ((lambda (G3533@ls/false) (if G3533@ls/false (apply (lambda (G3535@e) ((lambda (G3537@t) (list 'let (list (list G3537@t G3535@e)) (list 'if G3537@t G3537@t G3524@k))) (gensym))) G3533@ls/false) ((lambda (G3539@t) ((lambda (G353b@ls/false) (if G353b@ls/false (apply (lambda (G353d@e G353e@v G353f@v*) (list 'if G353d@e (cons 'begin (cons G353e@v G353f@v*)) G3524@k)) G353b@ls/false) ((lambda (G3543@t) ((lambda (G3545@ls/false) (if G3545@ls/false (apply (lambda () (G3028@syntax-violation '#f '"invalid guard clause" G3523@x)) G3545@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3543@t))) (G2f3d@syntax-dispatch G3543@t '_))) G3539@t))) (G2f3d@syntax-dispatch G3539@t '(any any . each-any)))) G3531@t))) (G2f3d@syntax-dispatch G3531@t '(any)))) G3527@t))) (G2f3d@syntax-dispatch G3527@t '(any #(scheme-id =>) any)))) G3523@x))) (set! G34f0@f* (lambda (G34fb@x*) ((lambda (G34fd@t) ((lambda (G34ff@ls/false) (if G34ff@ls/false (apply (lambda () ((lambda (G3501@g) (values (list G3501@g (list 'lambda '() (list 'raise-continuable G34e7@con))) G3501@g)) (gensym))) G34ff@ls/false) ((lambda (G3503@t) ((lambda (G3505@ls/false) (if G3505@ls/false (apply (lambda (G3507@e G3508@e*) (values (cons 'begin (cons G3507@e G3508@e*)) '#f)) G3505@ls/false) ((lambda (G350b@t) ((lambda (G350d@ls/false) (if G350d@ls/false (apply (lambda (G350f@cls G3510@cls*) (call-with-values (lambda () (G34f0@f* G3510@cls*)) (lambda (G3515@G3513 G3516@G3514) ((lambda (G3519@g G351a@e) (values (G34ee@f G350f@cls G351a@e) G3519@g)) G3516@G3514 G3515@G3513)))) G350d@ls/false) ((lambda (G351d@t) ((lambda (G351f@ls/false) (if G351f@ls/false (apply (lambda (G3521@others) (G3028@syntax-violation '#f '"invalid guard clause" G3521@others)) G351f@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G351d@t))) (G2f3d@syntax-dispatch G351d@t 'any))) G350b@t))) (G2f3d@syntax-dispatch G350b@t '(any . any)))) G3503@t))) (G2f3d@syntax-dispatch G3503@t '((#(scheme-id else) any . each-any))))) G34fd@t))) (G2f3d@syntax-dispatch G34fd@t '()))) G34fb@x*))) (call-with-values (lambda () (G34f0@f* G34e9@clause*)) (lambda (G34f3@G34f1 G34f4@G34f2) ((lambda (G34f7@raisek G34f8@code) (if G34f7@raisek (list (list 'call/cc (list 'lambda (list G34f7@raisek) (list G34e8@outerk (list 'lambda '() G34f8@code))))) (list G34e8@outerk (list 'lambda '() G34f8@code)))) G34f4@G34f2 G34f3@G34f1))))) '#f '#f))) ((lambda (G34d1@t) ((lambda (G34d3@ls/false) (if (and G34d3@ls/false (apply (lambda (G34d5@con G34d6@clause* G34d7@b G34d8@b*) (G2d3e@id? G34d5@con)) G34d3@ls/false)) (apply (lambda (G34dd@con G34de@clause* G34df@b G34e0@b*) ((lambda (G34e5@outerk) (G2ef3@bless (list (list 'call/cc (list 'lambda (list G34e5@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G34dd@con) (G34d0@gen-clauses G34dd@con G34e5@outerk G34de@clause*)) (cons 'lambda (cons '() (cons G34df@b G34e0@b*)))))))))) (gensym))) G34d3@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G34d1@t))) (G2f3d@syntax-dispatch G34d1@t '(_ (any . each-any) any . each-any)))) G34cd@x))) '#f))) (set! G2f0d@define-enumeration-macro (lambda (G3547@stx) ((lambda (G354a@set? G354c@remove-dups) (begin (set! G354a@set? (lambda (G3563@x) (or (null? G3563@x) (and (not (memq (car G3563@x) (cdr G3563@x))) (G354a@set? (cdr G3563@x)))))) (set! G354c@remove-dups (lambda (G3561@ls) (if (null? G3561@ls) '() (cons (car G3561@ls) (G354c@remove-dups (remq (car G3561@ls) (cdr G3561@ls))))))) ((lambda (G354d@t) ((lambda (G354f@ls/false) (if (and G354f@ls/false (apply (lambda (G3551@name G3552@id* G3553@maker) (and (G2d3e@id? G3551@name) (G2d3e@id? G3553@maker) (for-all G2d3e@id? G3552@id*))) G354f@ls/false)) (apply (lambda (G3557@name G3558@id* G3559@maker) ((lambda (G355d@name* G355e@mk) (G2ef3@bless (list 'begin (list 'define G355e@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G355d@name*)))) (list 'define-syntax G3557@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G355d@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3557@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3559@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3559@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G355d@name*)) (cons 'syntax-violation (cons (list 'quote G3559@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G355e@mk '('(n* ...)))))))))))) (G354c@remove-dups (G302e@syntax->datum G3558@id*)) (gensym))) G354f@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G354d@t))) (G2f3d@syntax-dispatch G354d@t '(_ any each-any any)))) G3547@stx))) '#f '#f))) (set! G2f0f@time-macro (lambda (G3565@stx) ((lambda (G3567@t) ((lambda (G3569@ls/false) (if G3569@ls/false (apply (lambda (G356b@expr) ((lambda (G356d@str) (G2ef3@bless (list 'time-it G356d@str (list 'lambda '() G356b@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3571@G356f G3572@G3570) ((lambda (G3575@e G3576@p) (begin (write (G302e@syntax->datum G356b@expr) G3576@p) (G3575@e))) G3572@G3570 G3571@G356f))))) G3569@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3567@t))) (G2f3d@syntax-dispatch G3567@t '(_ any)))) G3565@stx))) (set! G2f11@delay-macro (lambda (G3579@stx) ((lambda (G357b@t) ((lambda (G357d@ls/false) (if G357d@ls/false (apply (lambda (G357f@expr) (G2ef3@bless (list 'make-promise (list 'lambda '() G357f@expr)))) G357d@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G357b@t))) (G2f3d@syntax-dispatch G357b@t '(_ any)))) G3579@stx))) (set! G2f13@assert-macro (lambda (G3581@stx) ((lambda (G3583@t) ((lambda (G3585@ls/false) (if G3585@ls/false (apply (lambda (G3587@expr) ((lambda (G3589@pos) (G2ef3@bless (list 'unless G3587@expr (list 'assertion-error (list 'quote G3587@expr) (list 'quote G3589@pos))))) (or (G3020@expression-position G3581@stx) (G3020@expression-position G3587@expr)))) G3585@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3583@t))) (G2f3d@syntax-dispatch G3583@t '(_ any)))) G3581@stx))) (set! G2f15@endianness-macro (lambda (G358b@stx) ((lambda (G358d@t) ((lambda (G358f@ls/false) (if G358f@ls/false (apply (lambda (G3591@e) ((lambda (G3593@t) (if (memv G3593@t '(little)) (G2ef3@bless ''little) (if (memv G3593@t '(big)) (G2ef3@bless ''big) (G3028@syntax-violation '#f '"endianness must be big or little" G358b@stx)))) (G302e@syntax->datum G3591@e))) G358f@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G358d@t))) (G2f3d@syntax-dispatch G358d@t '(_ any)))) G358b@stx))) (set! G2f17@identifier-syntax-macro (lambda (G3595@stx) ((lambda (G3597@t) ((lambda (G3599@ls/false) (if G3599@ls/false (apply (lambda (G359b@expr) (G2ef3@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G359b@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G359b@expr) '((syntax (e* ...)))))))))) G3599@ls/false) ((lambda (G359d@t) ((lambda (G359f@ls/false) (if (and G359f@ls/false (apply (lambda (G35a1@id1 G35a2@expr1 G35a3@id2 G35a4@expr2 G35a5@expr3) (and (G2d3e@id? G35a1@id1) (G2d3e@id? G35a3@id2) (G2d3e@id? G35a4@expr2))) G359f@ls/false)) (apply (lambda (G35ab@id1 G35ac@expr1 G35ad@id2 G35ae@expr2 G35af@expr3) (G2ef3@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35ac@expr1)) (list (list 'set! 'id G35ae@expr2) (list 'syntax G35af@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35ac@expr1 '(e* ...))))))))) G359f@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G359d@t))) (G2f3d@syntax-dispatch G359d@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G3597@t))) (G2f3d@syntax-dispatch G3597@t '(_ any)))) G3595@stx))) (set! G2f19@do-macro (lambda (G35b5@stx) ((lambda (G35b8@bind) (begin (set! G35b8@bind (lambda (G35cf@x) ((lambda (G35d1@t) ((lambda (G35d3@ls/false) (if G35d3@ls/false (apply (lambda (G35d5@x G35d6@init) (list G35d5@x G35d6@init G35d5@x)) G35d3@ls/false) ((lambda (G35d9@t) ((lambda (G35db@ls/false) (if G35db@ls/false (apply (lambda (G35dd@x G35de@init G35df@step) (list G35dd@x G35de@init G35df@step)) G35db@ls/false) ((lambda (G35e3@t) ((lambda (G35e5@ls/false) (if G35e5@ls/false (apply (lambda () (G3028@syntax-violation '#f '"invalid binding" G35b5@stx)) G35e5@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G35e3@t))) (G2f3d@syntax-dispatch G35e3@t '_))) G35d9@t))) (G2f3d@syntax-dispatch G35d9@t '(any any any)))) G35d1@t))) (G2f3d@syntax-dispatch G35d1@t '(any any)))) G35cf@x))) ((lambda (G35b9@t) ((lambda (G35bb@ls/false) (if G35bb@ls/false (apply (lambda (G35bd@binding* G35be@test G35bf@expr* G35c0@command*) ((lambda (G35c5@t) ((lambda (G35c7@ls/false) (if G35c7@ls/false (apply (lambda (G35c9@x* G35ca@init* G35cb@step*) (if (G2d48@valid-bound-ids? G35c9@x*) (G2ef3@bless (list 'letrec (list (list 'loop (list 'lambda G35c9@x* (list 'if G35be@test (cons 'begin (cons '(if #f #f) G35bf@expr*)) (cons 'begin (append G35c0@command* (list (cons 'loop G35cb@step*)))))))) (cons 'loop G35ca@init*))) (G3028@syntax-violation '#f '"invalid bindings" G35b5@stx))) G35c7@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G35c5@t))) (G2f3d@syntax-dispatch G35c5@t '#(each (any any any))))) (map G35b8@bind G35bd@binding*))) G35bb@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G35b9@t))) (G2f3d@syntax-dispatch G35b9@t '(_ each-any (any . each-any) . each-any)))) G35b5@stx))) '#f))) (set! G2f1b@let*-macro (lambda (G35e7@stx) ((lambda (G35e9@t) ((lambda (G35eb@ls/false) (if (and G35eb@ls/false (apply (lambda (G35ed@lhs* G35ee@rhs* G35ef@b G35f0@b*) (for-all G2d3e@id? G35ed@lhs*)) G35eb@ls/false)) (apply (lambda (G35f5@lhs* G35f6@rhs* G35f7@b G35f8@b*) (G2ef3@bless ((letrec ((G35fd@f (lambda (G35ff@x*) (if (null? G35ff@x*) (cons 'let (cons '() (cons G35f7@b G35f8@b*))) (list 'let (list (car G35ff@x*)) (G35fd@f (cdr G35ff@x*))))))) G35fd@f) (map list G35f5@lhs* G35f6@rhs*)))) G35eb@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G35e9@t))) (G2f3d@syntax-dispatch G35e9@t '(_ #(each (any any)) any . each-any)))) G35e7@stx))) (set! G2f1d@or-macro (lambda (G3601@stx) ((lambda (G3603@t) ((lambda (G3605@ls/false) (if G3605@ls/false (apply (lambda () '#f) G3605@ls/false) ((lambda (G3607@t) ((lambda (G3609@ls/false) (if G3609@ls/false (apply (lambda (G360b@e G360c@e*) (G2ef3@bless ((letrec ((G360f@f (lambda (G3611@e G3612@e*) (if (null? G3612@e*) (list 'begin '#f G3611@e) (list 'let (list (list 't G3611@e)) (list 'if 't 't (G360f@f (car G3612@e*) (cdr G3612@e*)))))))) G360f@f) G360b@e G360c@e*))) G3609@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3607@t))) (G2f3d@syntax-dispatch G3607@t '(_ any . each-any)))) G3603@t))) (G2f3d@syntax-dispatch G3603@t '(_)))) G3601@stx))) (set! G2f1f@and-macro (lambda (G3615@stx) ((lambda (G3617@t) ((lambda (G3619@ls/false) (if G3619@ls/false (apply (lambda () '#t) G3619@ls/false) ((lambda (G361b@t) ((lambda (G361d@ls/false) (if G361d@ls/false (apply (lambda (G361f@e G3620@e*) (G2ef3@bless ((letrec ((G3623@f (lambda (G3625@e G3626@e*) (if (null? G3626@e*) (list 'begin '#f G3625@e) (cons 'if (cons G3625@e (cons (G3623@f (car G3626@e*) (cdr G3626@e*)) '(#f)))))))) G3623@f) G361f@e G3620@e*))) G361d@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G361b@t))) (G2f3d@syntax-dispatch G361b@t '(_ any . each-any)))) G3617@t))) (G2f3d@syntax-dispatch G3617@t '(_)))) G3615@stx))) (set! G2f21@cond-macro (lambda (G3629@stx) ((lambda (G362b@t) ((lambda (G362d@ls/false) (if G362d@ls/false (apply (lambda (G362f@cls G3630@cls*) (G2ef3@bless ((letrec ((G3633@f (lambda (G3635@cls G3636@cls*) (if (null? G3636@cls*) ((lambda (G3639@t) ((lambda (G363b@ls/false) (if G363b@ls/false (apply (lambda (G363d@e G363e@e*) (cons 'begin (cons G363d@e G363e@e*))) G363b@ls/false) ((lambda (G3641@t) ((lambda (G3643@ls/false) (if G3643@ls/false (apply (lambda (G3645@e G3646@p) (list 'let (list (list 't G3645@e)) (list 'if 't (cons G3646@p '(t))))) G3643@ls/false) ((lambda (G3649@t) ((lambda (G364b@ls/false) (if G364b@ls/false (apply (lambda (G364d@e) (cons 'or (cons G364d@e '((if #f #f))))) G364b@ls/false) ((lambda (G364f@t) ((lambda (G3651@ls/false) (if G3651@ls/false (apply (lambda (G3653@e G3654@e*) (list 'if G3653@e (cons 'begin G3654@e*))) G3651@ls/false) ((lambda (G3657@t) ((lambda (G3659@ls/false) (if G3659@ls/false (apply (lambda () (G3028@syntax-violation '#f '"invalid last clause" G3629@stx)) G3659@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3657@t))) (G2f3d@syntax-dispatch G3657@t '_))) G364f@t))) (G2f3d@syntax-dispatch G364f@t '(any . each-any)))) G3649@t))) (G2f3d@syntax-dispatch G3649@t '(any)))) G3641@t))) (G2f3d@syntax-dispatch G3641@t '(any #(scheme-id =>) any)))) G3639@t))) (G2f3d@syntax-dispatch G3639@t '(#(scheme-id else) any . each-any)))) G3635@cls) ((lambda (G365b@t) ((lambda (G365d@ls/false) (if G365d@ls/false (apply (lambda (G365f@e G3660@e*) (G3028@syntax-violation '#f '"incorrect position of keyword else" G3629@stx)) G365d@ls/false) ((lambda (G3663@t) ((lambda (G3665@ls/false) (if G3665@ls/false (apply (lambda (G3667@e G3668@p) (list 'let (list (list 't G3667@e)) (list 'if 't (cons G3668@p '(t)) (G3633@f (car G3636@cls*) (cdr G3636@cls*))))) G3665@ls/false) ((lambda (G366b@t) ((lambda (G366d@ls/false) (if G366d@ls/false (apply (lambda (G366f@e) (list 'or G366f@e (G3633@f (car G3636@cls*) (cdr G3636@cls*)))) G366d@ls/false) ((lambda (G3671@t) ((lambda (G3673@ls/false) (if G3673@ls/false (apply (lambda (G3675@e G3676@e*) (list 'if G3675@e (cons 'begin G3676@e*) (G3633@f (car G3636@cls*) (cdr G3636@cls*)))) G3673@ls/false) ((lambda (G3679@t) ((lambda (G367b@ls/false) (if G367b@ls/false (apply (lambda () (G3028@syntax-violation '#f '"invalid last clause" G3629@stx)) G367b@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3679@t))) (G2f3d@syntax-dispatch G3679@t '_))) G3671@t))) (G2f3d@syntax-dispatch G3671@t '(any . each-any)))) G366b@t))) (G2f3d@syntax-dispatch G366b@t '(any)))) G3663@t))) (G2f3d@syntax-dispatch G3663@t '(any #(scheme-id =>) any)))) G365b@t))) (G2f3d@syntax-dispatch G365b@t '(#(scheme-id else) any . each-any)))) G3635@cls))))) G3633@f) G362f@cls G3630@cls*))) G362d@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G362b@t))) (G2f3d@syntax-dispatch G362b@t '(_ any . each-any)))) G3629@stx))) (set! G2f23@do-include (lambda (G367d@stx G367e@id G367f@filename) ((lambda (G3683@filename) (begin (if (not (and (string? G3683@filename) (G2d3e@id? G367e@id))) (G3028@syntax-violation '#f '"invalid syntax" G367d@stx) (void)) (cons (G2ef3@bless 'begin) (with-input-from-file G3683@filename (lambda () ((letrec ((G3685@f (lambda (G3687@ls) ((lambda (G3689@x) (if (eof-object? G3689@x) (reverse G3687@ls) (G3685@f (cons (G2d1c@datum->stx G367e@id G3689@x) G3687@ls)))) (G28d1@G27fa@read-annotated))))) G3685@f) '())))))) (G2d54@stx->datum G367f@filename)))) (set! G2f25@include-macro (lambda (G368b@e) ((lambda (G368d@t) ((lambda (G368f@ls/false) (if G368f@ls/false (apply (lambda (G3691@id G3692@filename) (G2f23@do-include G368b@e G3691@id G3692@filename)) G368f@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G368d@t))) (G2f3d@syntax-dispatch G368d@t '(any any)))) G368b@e))) (set! G2f27@include-into-macro (lambda (G3695@e) ((lambda (G3697@t) ((lambda (G3699@ls/false) (if G3699@ls/false (apply (lambda (G369b@id G369c@filename) (G2f23@do-include G3695@e G369b@id G369c@filename)) G3699@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3697@t))) (G2f3d@syntax-dispatch G3697@t '(_ any any)))) G3695@e))) (set! G2f29@syntax-rules-macro (lambda (G369f@e) ((lambda (G36a1@t) ((lambda (G36a3@ls/false) (if G36a3@ls/false (apply (lambda (G36a5@lits G36a6@pat* G36a7@tmp*) (begin (G2f43@verify-literals G36a5@lits G369f@e) (G2ef3@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36a5@lits (map (lambda (G36ab@pat G36ac@tmp) ((lambda (G36af@t) ((lambda (G36b1@ls/false) (if G36b1@ls/false (apply (lambda (G36b3@rest) (list (cons 'g G36b3@rest) (list 'syntax G36ac@tmp))) G36b1@ls/false) ((lambda (G36b5@t) ((lambda (G36b7@ls/false) (if G36b7@ls/false (apply (lambda () (G3028@syntax-violation '#f '"invalid syntax-rules pattern" G369f@e G36ab@pat)) G36b7@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G36b5@t))) (G2f3d@syntax-dispatch G36b5@t '_))) G36af@t))) (G2f3d@syntax-dispatch G36af@t '(_ . any)))) G36ab@pat)) G36a6@pat* G36a7@tmp*)))))))) G36a3@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G36a1@t))) (G2f3d@syntax-dispatch G36a1@t '(_ each-any . #(each (any any)))))) G369f@e))) (set! G2f2b@quasiquote-macro ((lambda () ((lambda (G36ba@datum G36d8@quasicons* G36da@quasicons G36dc@quasiappend G36de@quasivector G36e0@vquasi G36e2@quasi) (begin (set! G36ba@datum (lambda (G37bd@x) (list (G2ec7@scheme-stx 'quote) (G2d26@mkstx G37bd@x '() '() '())))) (set! G36d8@quasicons* (lambda (G37b5@x G37b6@y) ((letrec ((G37b9@f (lambda (G37bb@x) (if (null? G37bb@x) G37b6@y (G36da@quasicons (car G37bb@x) (G37b9@f (cdr G37bb@x))))))) G37b9@f) G37b5@x))) (set! G36da@quasicons (lambda (G378f@x G3790@y) ((lambda (G3793@t) ((lambda (G3795@ls/false) (if G3795@ls/false (apply (lambda (G3797@dy) ((lambda (G3799@t) ((lambda (G379b@ls/false) (if G379b@ls/false (apply (lambda (G379d@dx) (list (G2ec7@scheme-stx 'quote) (cons G379d@dx G3797@dy))) G379b@ls/false) ((lambda (G379f@t) ((lambda (G37a1@ls/false) (if G37a1@ls/false (apply (lambda () ((lambda (G37a3@t) ((lambda (G37a5@ls/false) (if G37a5@ls/false (apply (lambda () (list (G2ec7@scheme-stx 'list) G378f@x)) G37a5@ls/false) ((lambda (G37a7@t) ((lambda (G37a9@ls/false) (if G37a9@ls/false (apply (lambda () (list (G2ec7@scheme-stx 'cons) G378f@x G3790@y)) G37a9@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G37a7@t))) (G2f3d@syntax-dispatch G37a7@t '_))) G37a3@t))) (G2f3d@syntax-dispatch G37a3@t '()))) G3797@dy)) G37a1@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G379f@t))) (G2f3d@syntax-dispatch G379f@t '_))) G3799@t))) (G2f3d@syntax-dispatch G3799@t '(#(scheme-id quote) any)))) G378f@x)) G3795@ls/false) ((lambda (G37ab@t) ((lambda (G37ad@ls/false) (if G37ad@ls/false (apply (lambda (G37af@stuff) (cons* (G2ec7@scheme-stx 'list) G378f@x G37af@stuff)) G37ad@ls/false) ((lambda (G37b1@t) ((lambda (G37b3@ls/false) (if G37b3@ls/false (apply (lambda () (list (G2ec7@scheme-stx 'cons) G378f@x G3790@y)) G37b3@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G37b1@t))) (G2f3d@syntax-dispatch G37b1@t '_))) G37ab@t))) (G2f3d@syntax-dispatch G37ab@t '(#(scheme-id list) . each-any)))) G3793@t))) (G2f3d@syntax-dispatch G3793@t '(#(scheme-id quote) any)))) G3790@y))) (set! G36dc@quasiappend (lambda (G3775@x G3776@y) ((lambda (G3779@ls) (if (null? G3779@ls) (list (G2ec7@scheme-stx 'quote) '()) (if (null? (cdr G3779@ls)) (car G3779@ls) (cons* (G2ec7@scheme-stx 'append) G3779@ls)))) ((letrec ((G377b@f (lambda (G377d@x) (if (null? G377d@x) ((lambda (G377f@t) ((lambda (G3781@ls/false) (if G3781@ls/false (apply (lambda () '()) G3781@ls/false) ((lambda (G3783@t) ((lambda (G3785@ls/false) (if G3785@ls/false (apply (lambda () (list G3776@y)) G3785@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3783@t))) (G2f3d@syntax-dispatch G3783@t '_))) G377f@t))) (G2f3d@syntax-dispatch G377f@t '(#(scheme-id quote) ())))) G3776@y) ((lambda (G3787@t) ((lambda (G3789@ls/false) (if G3789@ls/false (apply (lambda () (G377b@f (cdr G377d@x))) G3789@ls/false) ((lambda (G378b@t) ((lambda (G378d@ls/false) (if G378d@ls/false (apply (lambda () (cons (car G377d@x) (G377b@f (cdr G377d@x)))) G378d@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G378b@t))) (G2f3d@syntax-dispatch G378b@t '_))) G3787@t))) (G2f3d@syntax-dispatch G3787@t '(#(scheme-id quote) ())))) (car G377d@x)))))) G377b@f) G3775@x)))) (set! G36de@quasivector (lambda (G3743@x) ((lambda (G3745@pat-x) ((lambda (G3747@t) ((lambda (G3749@ls/false) (if G3749@ls/false (apply (lambda (G374b@x*) (list (G2ec7@scheme-stx 'quote) (list->vector G374b@x*))) G3749@ls/false) ((lambda (G374d@t) ((lambda (G374f@ls/false) (if G374f@ls/false (apply (lambda () ((letrec ((G3751@f (lambda (G3753@x G3754@k) ((lambda (G3757@t) ((lambda (G3759@ls/false) (if G3759@ls/false (apply (lambda (G375b@x*) (G3754@k (map (lambda (G375d@x) (list (G2ec7@scheme-stx 'quote) G375d@x)) G375b@x*))) G3759@ls/false) ((lambda (G375f@t) ((lambda (G3761@ls/false) (if G3761@ls/false (apply (lambda (G3763@x*) (G3754@k G3763@x*)) G3761@ls/false) ((lambda (G3765@t) ((lambda (G3767@ls/false) (if G3767@ls/false (apply (lambda (G3769@x G376a@y) (G3751@f G376a@y (lambda (G376d@ls) (G3754@k (cons G3769@x G376d@ls))))) G3767@ls/false) ((lambda (G376f@t) ((lambda (G3771@ls/false) (if G3771@ls/false (apply (lambda () (list (G2ec7@scheme-stx 'list->vector) G3745@pat-x)) G3771@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G376f@t))) (G2f3d@syntax-dispatch G376f@t '_))) G3765@t))) (G2f3d@syntax-dispatch G3765@t '(#(scheme-id cons) any any)))) G375f@t))) (G2f3d@syntax-dispatch G375f@t '(#(scheme-id list) . each-any)))) G3757@t))) (G2f3d@syntax-dispatch G3757@t '(#(scheme-id quote) each-any)))) G3753@x)))) G3751@f) G3743@x (lambda (G3773@ls) (cons* (G2ec7@scheme-stx 'vector) G3773@ls)))) G374f@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G374d@t))) (G2f3d@syntax-dispatch G374d@t '_))) G3747@t))) (G2f3d@syntax-dispatch G3747@t '(#(scheme-id quote) each-any)))) G3745@pat-x)) G3743@x))) (set! G36e0@vquasi (lambda (G3721@p G3722@lev) ((lambda (G3725@t) ((lambda (G3727@ls/false) (if G3727@ls/false (apply (lambda (G3729@p G372a@q) ((lambda (G372d@t) ((lambda (G372f@ls/false) (if G372f@ls/false (apply (lambda (G3731@p) (if (= G3722@lev '0) (G36d8@quasicons* G3731@p (G36e0@vquasi G372a@q G3722@lev)) (G36da@quasicons (G36da@quasicons (G36ba@datum 'unquote) (G36e2@quasi G3731@p (- G3722@lev '1))) (G36e0@vquasi G372a@q G3722@lev)))) G372f@ls/false) ((lambda (G3733@t) ((lambda (G3735@ls/false) (if G3735@ls/false (apply (lambda (G3737@p) (if (= G3722@lev '0) (G36dc@quasiappend G3737@p (G36e0@vquasi G372a@q G3722@lev)) (G36da@quasicons (G36da@quasicons (G36ba@datum 'unquote-splicing) (G36e2@quasi G3737@p (- G3722@lev '1))) (G36e0@vquasi G372a@q G3722@lev)))) G3735@ls/false) ((lambda (G3739@t) ((lambda (G373b@ls/false) (if G373b@ls/false (apply (lambda (G373d@p) (G36da@quasicons (G36e2@quasi G373d@p G3722@lev) (G36e0@vquasi G372a@q G3722@lev))) G373b@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3739@t))) (G2f3d@syntax-dispatch G3739@t 'any))) G3733@t))) (G2f3d@syntax-dispatch G3733@t '(#(scheme-id unquote-splicing) . each-any)))) G372d@t))) (G2f3d@syntax-dispatch G372d@t '(#(scheme-id unquote) . each-any)))) G3729@p)) G3727@ls/false) ((lambda (G373f@t) ((lambda (G3741@ls/false) (if G3741@ls/false (apply (lambda () (list (G2ec7@scheme-stx 'quote) '())) G3741@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G373f@t))) (G2f3d@syntax-dispatch G373f@t '()))) G3725@t))) (G2f3d@syntax-dispatch G3725@t '(any . any)))) G3721@p))) (set! G36e2@quasi (lambda (G36eb@p G36ec@lev) ((lambda (G36ef@t) ((lambda (G36f1@ls/false) (if G36f1@ls/false (apply (lambda (G36f3@p) (if (= G36ec@lev '0) G36f3@p (G36da@quasicons (G36ba@datum 'unquote) (G36e2@quasi (list G36f3@p) (- G36ec@lev '1))))) G36f1@ls/false) ((lambda (G36f5@t) ((lambda (G36f7@ls/false) (if G36f7@ls/false (apply (lambda (G36f9@p G36fa@q) (if (= G36ec@lev '0) (G36d8@quasicons* G36f9@p (G36e2@quasi G36fa@q G36ec@lev)) (G36da@quasicons (G36da@quasicons (G36ba@datum 'unquote) (G36e2@quasi G36f9@p (- G36ec@lev '1))) (G36e2@quasi G36fa@q G36ec@lev)))) G36f7@ls/false) ((lambda (G36fd@t) ((lambda (G36ff@ls/false) (if G36ff@ls/false (apply (lambda (G3701@p G3702@q) (if (= G36ec@lev '0) (G36dc@quasiappend G3701@p (G36e2@quasi G3702@q G36ec@lev)) (G36da@quasicons (G36da@quasicons (G36ba@datum 'unquote-splicing) (G36e2@quasi G3701@p (- G36ec@lev '1))) (G36e2@quasi G3702@q G36ec@lev)))) G36ff@ls/false) ((lambda (G3705@t) ((lambda (G3707@ls/false) (if G3707@ls/false (apply (lambda (G3709@p) (G36da@quasicons (G36ba@datum 'quasiquote) (G36e2@quasi (list G3709@p) (+ G36ec@lev '1)))) G3707@ls/false) ((lambda (G370b@t) ((lambda (G370d@ls/false) (if G370d@ls/false (apply (lambda (G370f@p G3710@q) (G36da@quasicons (G36e2@quasi G370f@p G36ec@lev) (G36e2@quasi G3710@q G36ec@lev))) G370d@ls/false) ((lambda (G3713@t) ((lambda (G3715@ls/false) (if (and G3715@ls/false (apply (lambda (G3717@x) (not (G2d06@stx? G3717@x))) G3715@ls/false)) (apply (lambda (G3719@x) (G36de@quasivector (G36e0@vquasi G3719@x G36ec@lev))) G3715@ls/false) ((lambda (G371b@t) ((lambda (G371d@ls/false) (if G371d@ls/false (apply (lambda (G371f@p) (list (G2ec7@scheme-stx 'quote) G371f@p)) G371d@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G371b@t))) (G2f3d@syntax-dispatch G371b@t 'any))) G3713@t))) (G2f3d@syntax-dispatch G3713@t '#(vector each-any)))) G370b@t))) (G2f3d@syntax-dispatch G370b@t '(any . any)))) G3705@t))) (G2f3d@syntax-dispatch G3705@t '(#(scheme-id quasiquote) any)))) G36fd@t))) (G2f3d@syntax-dispatch G36fd@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G36f5@t))) (G2f3d@syntax-dispatch G36f5@t '((#(scheme-id unquote) . each-any) . any)))) G36ef@t))) (G2f3d@syntax-dispatch G36ef@t '(#(scheme-id unquote) any)))) G36eb@p))) (lambda (G36e3@x) ((lambda (G36e5@t) ((lambda (G36e7@ls/false) (if G36e7@ls/false (apply (lambda (G36e9@e) (G36e2@quasi G36e9@e '0)) G36e7@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G36e5@t))) (G2f3d@syntax-dispatch G36e5@t '(_ any)))) G36e3@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f2d@quasisyntax-macro ((lambda () ((lambda (G37c0@quasi) (begin (set! G37c0@quasi (lambda (G37d8@p G37d9@lev) ((lambda (G37dc@t) ((lambda (G37de@ls/false) (if G37de@ls/false (apply (lambda (G37e0@p) (if (= G37d9@lev '0) ((lambda (G37e2@g) (values (list G37e2@g) (list G37e0@p) G37e2@g)) (gensym)) (call-with-values (lambda () (G37c0@quasi G37e0@p (- G37d9@lev '1))) (lambda (G37e7@G37e4 G37e8@G37e5 G37e9@G37e6) ((lambda (G37ed@p G37ee@rhs* G37ef@lhs*) (values G37ef@lhs* G37ee@rhs* (list 'unsyntax G37ed@p))) G37e9@G37e6 G37e8@G37e5 G37e7@G37e4))))) G37de@ls/false) ((lambda (G37f3@t) ((lambda (G37f5@ls/false) (if (and G37f5@ls/false (apply (lambda () (= G37d9@lev '0)) G37f5@ls/false)) (apply (lambda () (G3028@syntax-violation '#f '"incorrect use of unsyntax" G37d8@p)) G37f5@ls/false) ((lambda (G37f7@t) ((lambda (G37f9@ls/false) (if G37f9@ls/false (apply (lambda (G37fb@p* G37fc@q) (call-with-values (lambda () (G37c0@quasi G37fc@q G37d9@lev)) (lambda (G3802@G37ff G3803@G3800 G3804@G3801) ((lambda (G3808@q G3809@rhs* G380a@lhs*) (if (= G37d9@lev '0) ((lambda (G380e@g*) (values (append G380e@g* G380a@lhs*) (append G37fb@p* G3809@rhs*) (append G380e@g* G3808@q))) (map (lambda (G3810@x) (gensym)) G37fb@p*)) (call-with-values (lambda () (G37c0@quasi G37fb@p* (- G37d9@lev '1))) (lambda (G3815@G3812 G3816@G3813 G3817@G3814) ((lambda (G381b@p* G381c@rhs2* G381d@lhs2*) (values (append G381d@lhs2* G380a@lhs*) (append G381c@rhs2* G3809@rhs*) (cons (cons 'unsyntax G381b@p*) G3808@q))) G3817@G3814 G3816@G3813 G3815@G3812))))) G3804@G3801 G3803@G3800 G3802@G37ff)))) G37f9@ls/false) ((lambda (G3821@t) ((lambda (G3823@ls/false) (if G3823@ls/false (apply (lambda (G3825@p* G3826@q) (call-with-values (lambda () (G37c0@quasi G3826@q G37d9@lev)) (lambda (G382c@G3829 G382d@G382a G382e@G382b) ((lambda (G3832@q G3833@rhs* G3834@lhs*) (if (= G37d9@lev '0) ((lambda (G3838@g*) (values (append (map (lambda (G383a@g) (cons G383a@g '(...))) G3838@g*) G3834@lhs*) (append G3825@p* G3833@rhs*) (append (apply append (map (lambda (G383c@g) (cons G383c@g '(...))) G3838@g*)) G3832@q))) (map (lambda (G383e@x) (gensym)) G3825@p*)) (call-with-values (lambda () (G37c0@quasi G3825@p* (- G37d9@lev '1))) (lambda (G3843@G3840 G3844@G3841 G3845@G3842) ((lambda (G3849@p* G384a@rhs2* G384b@lhs2*) (values (append G384b@lhs2* G3834@lhs*) (append G384a@rhs2* G3833@rhs*) (cons (cons 'unsyntax-splicing G3849@p*) G3832@q))) G3845@G3842 G3844@G3841 G3843@G3840))))) G382e@G382b G382d@G382a G382c@G3829)))) G3823@ls/false) ((lambda (G384f@t) ((lambda (G3851@ls/false) (if (and G3851@ls/false (apply (lambda () (= G37d9@lev '0)) G3851@ls/false)) (apply (lambda () (G3028@syntax-violation '#f '"incorrect use of unsyntax-splicing" G37d8@p)) G3851@ls/false) ((lambda (G3853@t) ((lambda (G3855@ls/false) (if G3855@ls/false (apply (lambda (G3857@p) (call-with-values (lambda () (G37c0@quasi G3857@p (+ G37d9@lev '1))) (lambda (G385c@G3859 G385d@G385a G385e@G385b) ((lambda (G3862@p G3863@rhs* G3864@lhs*) (values G3864@lhs* G3863@rhs* (list 'quasisyntax G3862@p))) G385e@G385b G385d@G385a G385c@G3859)))) G3855@ls/false) ((lambda (G3868@t) ((lambda (G386a@ls/false) (if G386a@ls/false (apply (lambda (G386c@p G386d@q) (call-with-values (lambda () (G37c0@quasi G386c@p G37d9@lev)) (lambda (G3876@G3870 G3877@G3871 G3878@G3872) (call-with-values (lambda () (G37c0@quasi G386d@q G37d9@lev)) (lambda (G387c@G3873 G387d@G3874 G387e@G3875) ((lambda (G3882@q G3883@rhs2* G3884@lhs2* G3885@p G3886@rhs* G3887@lhs*) (values (append G3884@lhs2* G3887@lhs*) (append G3883@rhs2* G3886@rhs*) (cons G3885@p G3882@q))) G387e@G3875 G387d@G3874 G387c@G3873 G3878@G3872 G3877@G3871 G3876@G3870)))))) G386a@ls/false) ((lambda (G388e@t) ((lambda (G3890@ls/false) (if G3890@ls/false (apply (lambda (G3892@x*) (call-with-values (lambda () (G37c0@quasi G3892@x* G37d9@lev)) (lambda (G3897@G3894 G3898@G3895 G3899@G3896) ((lambda (G389d@x* G389e@rhs* G389f@lhs*) (values G389f@lhs* G389e@rhs* (list->vector G389d@x*))) G3899@G3896 G3898@G3895 G3897@G3894)))) G3890@ls/false) ((lambda (G38a3@t) ((lambda (G38a5@ls/false) (if G38a5@ls/false (apply (lambda () (values '() '() G37d8@p)) G38a5@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G38a3@t))) (G2f3d@syntax-dispatch G38a3@t '_))) G388e@t))) (G2f3d@syntax-dispatch G388e@t '#(vector each-any)))) G3868@t))) (G2f3d@syntax-dispatch G3868@t '(any . any)))) G3853@t))) (G2f3d@syntax-dispatch G3853@t '(#(scheme-id quasisyntax) any)))) G384f@t))) (G2f3d@syntax-dispatch G384f@t '#(scheme-id unsyntax-splicing)))) G3821@t))) (G2f3d@syntax-dispatch G3821@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G37f7@t))) (G2f3d@syntax-dispatch G37f7@t '((#(scheme-id unsyntax) . each-any) . any)))) G37f3@t))) (G2f3d@syntax-dispatch G37f3@t '#(scheme-id unsyntax)))) G37dc@t))) (G2f3d@syntax-dispatch G37dc@t '(#(scheme-id unsyntax) any)))) G37d8@p))) (lambda (G37c1@x) ((lambda (G37c3@t) ((lambda (G37c5@ls/false) (if G37c5@ls/false (apply (lambda (G37c7@e) (call-with-values (lambda () (G37c0@quasi G37c7@e '0)) (lambda (G37cc@G37c9 G37cd@G37ca G37ce@G37cb) ((lambda (G37d2@v G37d3@rhs* G37d4@lhs*) (G2ef3@bless (list 'syntax-case (cons 'list G37d3@rhs*) '() (list G37d4@lhs* (list 'syntax G37d2@v))))) G37ce@G37cb G37cd@G37ca G37cc@G37c9)))) G37c5@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G37c3@t))) (G2f3d@syntax-dispatch G37c3@t '(_ any)))) G37c1@x)))) '#f)))) (set! G2f2f@define-struct-macro (lambda (G38a7@stx) (G3028@syntax-violation '#f '"define-struct not supported" G38a7@stx))) (set! G2f31@define-record-type-macro (lambda (G38a9@x) ((lambda (G38ac@id G38ae@get-record-name G38b0@get-record-constructor-name G38b2@get-record-predicate-name G38b4@get-clause G38b6@foo-rtd-code G38b8@parent-rtd-code G38ba@parent-rcd-code G38bc@foo-rcd-code G38be@get-protocol-code G38c0@get-fields G38c2@get-mutator-indices G38c4@get-mutators G38c6@get-accessors G38c8@enumerate G38ca@do-define-record G38cc@verify-clauses) (begin (set! G38ac@id (lambda (G3a9f@ctxt . G3aa1@str*) (G302c@datum->syntax G3a9f@ctxt (string->symbol (apply string-append (map (lambda (G3aa3@x) (if (symbol? G3aa3@x) (symbol->string G3aa3@x) (if (string? G3aa3@x) G3aa3@x (assertion-violation 'define-record-type '"BUG")))) G3aa1@str*)))))) (set! G38ae@get-record-name (lambda (G3a8d@spec) ((lambda (G3a8f@t) ((lambda (G3a91@ls/false) (if G3a91@ls/false (apply (lambda (G3a93@foo G3a94@make-foo G3a95@foo?) G3a93@foo) G3a91@ls/false) ((lambda (G3a99@t) ((lambda (G3a9b@ls/false) (if G3a9b@ls/false (apply (lambda (G3a9d@foo) G3a9d@foo) G3a9b@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3a99@t))) (G2f3d@syntax-dispatch G3a99@t 'any))) G3a8f@t))) (G2f3d@syntax-dispatch G3a8f@t '(any any any)))) G3a8d@spec))) (set! G38b0@get-record-constructor-name (lambda (G3a79@spec) ((lambda (G3a7b@t) ((lambda (G3a7d@ls/false) (if G3a7d@ls/false (apply (lambda (G3a7f@foo G3a80@make-foo G3a81@foo?) G3a80@make-foo) G3a7d@ls/false) ((lambda (G3a85@t) ((lambda (G3a87@ls/false) (if (and G3a87@ls/false (apply (lambda (G3a89@foo) (G2d3e@id? G3a89@foo)) G3a87@ls/false)) (apply (lambda (G3a8b@foo) (G38ac@id G3a8b@foo '"make-" (G2d54@stx->datum G3a8b@foo))) G3a87@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3a85@t))) (G2f3d@syntax-dispatch G3a85@t 'any))) G3a7b@t))) (G2f3d@syntax-dispatch G3a7b@t '(any any any)))) G3a79@spec))) (set! G38b2@get-record-predicate-name (lambda (G3a65@spec) ((lambda (G3a67@t) ((lambda (G3a69@ls/false) (if G3a69@ls/false (apply (lambda (G3a6b@foo G3a6c@make-foo G3a6d@foo?) G3a6d@foo?) G3a69@ls/false) ((lambda (G3a71@t) ((lambda (G3a73@ls/false) (if (and G3a73@ls/false (apply (lambda (G3a75@foo) (G2d3e@id? G3a75@foo)) G3a73@ls/false)) (apply (lambda (G3a77@foo) (G38ac@id G3a77@foo (G2d54@stx->datum G3a77@foo) '"?")) G3a73@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3a71@t))) (G2f3d@syntax-dispatch G3a71@t 'any))) G3a67@t))) (G2f3d@syntax-dispatch G3a67@t '(any any any)))) G3a65@spec))) (set! G38b4@get-clause (lambda (G3a53@id G3a54@ls) ((lambda (G3a57@t) ((lambda (G3a59@ls/false) (if G3a59@ls/false (apply (lambda () '#f) G3a59@ls/false) ((lambda (G3a5b@t) ((lambda (G3a5d@ls/false) (if G3a5d@ls/false (apply (lambda (G3a5f@x G3a60@rest G3a61@ls) (if (G2d46@free-id=? (G2ef3@bless G3a53@id) G3a5f@x) (cons G3a5f@x G3a60@rest) (G38b4@get-clause G3a53@id G3a61@ls))) G3a5d@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3a5b@t))) (G2f3d@syntax-dispatch G3a5b@t '((any . any) . any)))) G3a57@t))) (G2f3d@syntax-dispatch G3a57@t '()))) G3a54@ls))) (set! G38b6@foo-rtd-code (lambda (G3a01@name G3a02@clause* G3a03@parent-rtd-code) ((lambda (G3a08@convert-field-spec*) (begin (set! G3a08@convert-field-spec* (lambda (G3a39@ls) (list->vector (map (lambda (G3a3b@x) ((lambda (G3a3d@t) ((lambda (G3a3f@ls/false) (if G3a3f@ls/false (apply (lambda (G3a41@name G3a42@rest) (list 'mutable G3a41@name)) G3a3f@ls/false) ((lambda (G3a45@t) ((lambda (G3a47@ls/false) (if G3a47@ls/false (apply (lambda (G3a49@name G3a4a@rest) (list 'immutable G3a49@name)) G3a47@ls/false) ((lambda (G3a4d@t) ((lambda (G3a4f@ls/false) (if G3a4f@ls/false (apply (lambda (G3a51@name) (list 'immutable G3a51@name)) G3a4f@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3a4d@t))) (G2f3d@syntax-dispatch G3a4d@t 'any))) G3a45@t))) (G2f3d@syntax-dispatch G3a45@t '(#(scheme-id immutable) any . any)))) G3a3d@t))) (G2f3d@syntax-dispatch G3a3d@t '(#(scheme-id mutable) any . any)))) G3a3b@x)) G3a39@ls)))) ((lambda (G3a09@uid-code G3a0a@sealed? G3a0b@opaque? G3a0c@fields) (G2ef3@bless (list 'make-record-type-descriptor (list 'quote G3a01@name) G3a03@parent-rtd-code G3a09@uid-code G3a0a@sealed? G3a0b@opaque? G3a0c@fields))) ((lambda (G3a11@t) ((lambda (G3a13@ls/false) (if G3a13@ls/false (apply (lambda () (list 'quote (gensym))) G3a13@ls/false) ((lambda (G3a15@t) ((lambda (G3a17@ls/false) (if G3a17@ls/false (apply (lambda (G3a19@uid) (list 'quote G3a19@uid)) G3a17@ls/false) ((lambda (G3a1b@t) ((lambda (G3a1d@ls/false) (if G3a1d@ls/false (apply (lambda () '#f) G3a1d@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3a1b@t))) (G2f3d@syntax-dispatch G3a1b@t '_))) G3a15@t))) (G2f3d@syntax-dispatch G3a15@t '(_ any)))) G3a11@t))) (G2f3d@syntax-dispatch G3a11@t '(_)))) (G38b4@get-clause 'nongenerative G3a02@clause*)) ((lambda (G3a1f@t) ((lambda (G3a21@ls/false) (if G3a21@ls/false (apply (lambda () '#t) G3a21@ls/false) ((lambda (G3a23@t) ((lambda (G3a25@ls/false) (if G3a25@ls/false (apply (lambda () '#f) G3a25@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3a23@t))) (G2f3d@syntax-dispatch G3a23@t '_))) G3a1f@t))) (G2f3d@syntax-dispatch G3a1f@t '(_ #(atom #t))))) (G38b4@get-clause 'sealed G3a02@clause*)) ((lambda (G3a27@t) ((lambda (G3a29@ls/false) (if G3a29@ls/false (apply (lambda () '#t) G3a29@ls/false) ((lambda (G3a2b@t) ((lambda (G3a2d@ls/false) (if G3a2d@ls/false (apply (lambda () '#f) G3a2d@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3a2b@t))) (G2f3d@syntax-dispatch G3a2b@t '_))) G3a27@t))) (G2f3d@syntax-dispatch G3a27@t '(_ #(atom #t))))) (G38b4@get-clause 'opaque G3a02@clause*)) ((lambda (G3a2f@t) ((lambda (G3a31@ls/false) (if G3a31@ls/false (apply (lambda (G3a33@field-spec*) (list 'quote (G3a08@convert-field-spec* G3a33@field-spec*))) G3a31@ls/false) ((lambda (G3a35@t) ((lambda (G3a37@ls/false) (if G3a37@ls/false (apply (lambda () ''#()) G3a37@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3a35@t))) (G2f3d@syntax-dispatch G3a35@t '_))) G3a2f@t))) (G2f3d@syntax-dispatch G3a2f@t '(_ . each-any)))) (G38b4@get-clause 'fields G3a02@clause*))))) '#f))) (set! G38b8@parent-rtd-code (lambda (G39e9@clause*) ((lambda (G39eb@t) ((lambda (G39ed@ls/false) (if G39ed@ls/false (apply (lambda (G39ef@name) (list 'record-type-descriptor G39ef@name)) G39ed@ls/false) ((lambda (G39f1@t) ((lambda (G39f3@ls/false) (if G39f3@ls/false (apply (lambda () ((lambda (G39f5@t) ((lambda (G39f7@ls/false) (if G39f7@ls/false (apply (lambda (G39f9@rtd G39fa@rcd) G39f9@rtd) G39f7@ls/false) ((lambda (G39fd@t) ((lambda (G39ff@ls/false) (if G39ff@ls/false (apply (lambda () '#f) G39ff@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G39fd@t))) (G2f3d@syntax-dispatch G39fd@t '#(atom #f)))) G39f5@t))) (G2f3d@syntax-dispatch G39f5@t '(_ any any)))) (G38b4@get-clause 'parent-rtd G39e9@clause*))) G39f3@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G39f1@t))) (G2f3d@syntax-dispatch G39f1@t '#(atom #f)))) G39eb@t))) (G2f3d@syntax-dispatch G39eb@t '(_ any)))) (G38b4@get-clause 'parent G39e9@clause*)))) (set! G38ba@parent-rcd-code (lambda (G39d1@clause*) ((lambda (G39d3@t) ((lambda (G39d5@ls/false) (if G39d5@ls/false (apply (lambda (G39d7@name) (list 'record-constructor-descriptor G39d7@name)) G39d5@ls/false) ((lambda (G39d9@t) ((lambda (G39db@ls/false) (if G39db@ls/false (apply (lambda () ((lambda (G39dd@t) ((lambda (G39df@ls/false) (if G39df@ls/false (apply (lambda (G39e1@rtd G39e2@rcd) G39e2@rcd) G39df@ls/false) ((lambda (G39e5@t) ((lambda (G39e7@ls/false) (if G39e7@ls/false (apply (lambda () '#f) G39e7@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G39e5@t))) (G2f3d@syntax-dispatch G39e5@t '#(atom #f)))) G39dd@t))) (G2f3d@syntax-dispatch G39dd@t '(_ any any)))) (G38b4@get-clause 'parent-rtd G39d1@clause*))) G39db@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G39d9@t))) (G2f3d@syntax-dispatch G39d9@t '#(atom #f)))) G39d3@t))) (G2f3d@syntax-dispatch G39d3@t '(_ any)))) (G38b4@get-clause 'parent G39d1@clause*)))) (set! G38bc@foo-rcd-code (lambda (G39c9@clause* G39ca@foo-rtd G39cb@protocol G39cc@parent-rcd-code) (list 'make-record-constructor-descriptor G39ca@foo-rtd G39cc@parent-rcd-code G39cb@protocol))) (set! G38be@get-protocol-code (lambda (G39bd@clause*) ((lambda (G39bf@t) ((lambda (G39c1@ls/false) (if G39c1@ls/false (apply (lambda (G39c3@expr) G39c3@expr) G39c1@ls/false) ((lambda (G39c5@t) ((lambda (G39c7@ls/false) (if G39c7@ls/false (apply (lambda () '#f) G39c7@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G39c5@t))) (G2f3d@syntax-dispatch G39c5@t '_))) G39bf@t))) (G2f3d@syntax-dispatch G39bf@t '(_ any)))) (G38b4@get-clause 'protocol G39bd@clause*)))) (set! G38c0@get-fields (lambda (G39ab@clause*) ((lambda (G39ad@t) ((lambda (G39af@ls/false) (if G39af@ls/false (apply (lambda () '()) G39af@ls/false) ((lambda (G39b1@t) ((lambda (G39b3@ls/false) (if G39b3@ls/false (apply (lambda (G39b5@f*) G39b5@f*) G39b3@ls/false) ((lambda (G39b7@t) ((lambda (G39b9@ls/false) (if G39b9@ls/false (apply (lambda (G39bb@rest) (G38c0@get-fields G39bb@rest)) G39b9@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G39b7@t))) (G2f3d@syntax-dispatch G39b7@t '(_ . any)))) G39b1@t))) (G2f3d@syntax-dispatch G39b1@t '((#(scheme-id fields) . each-any) . _)))) G39ad@t))) (G2f3d@syntax-dispatch G39ad@t '()))) G39ab@clause*))) (set! G38c2@get-mutator-indices (lambda (G3993@fields) ((letrec ((G3995@f (lambda (G3997@fields G3998@i) ((lambda (G399b@t) ((lambda (G399d@ls/false) (if G399d@ls/false (apply (lambda () '()) G399d@ls/false) ((lambda (G399f@t) ((lambda (G39a1@ls/false) (if G39a1@ls/false (apply (lambda (G39a3@rest) (cons G3998@i (G3995@f G39a3@rest (+ G3998@i '1)))) G39a1@ls/false) ((lambda (G39a5@t) ((lambda (G39a7@ls/false) (if G39a7@ls/false (apply (lambda (G39a9@rest) (G3995@f G39a9@rest (+ G3998@i '1))) G39a7@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G39a5@t))) (G2f3d@syntax-dispatch G39a5@t '(_ . any)))) G399f@t))) (G2f3d@syntax-dispatch G399f@t '((#(scheme-id mutable) . _) . any)))) G399b@t))) (G2f3d@syntax-dispatch G399b@t '()))) G3997@fields)))) G3995@f) G3993@fields '0))) (set! G38c4@get-mutators (lambda (G3969@foo G396a@fields) ((lambda (G396e@gen-name) (begin (set! G396e@gen-name (lambda (G3991@x) (G302c@datum->syntax G3969@foo (string->symbol (string-append (symbol->string (G302e@syntax->datum G3969@foo)) '"-" (symbol->string (G302e@syntax->datum G3991@x)) '"-set!"))))) ((letrec ((G396f@f (lambda (G3971@fields) ((lambda (G3973@t) ((lambda (G3975@ls/false) (if G3975@ls/false (apply (lambda () '()) G3975@ls/false) ((lambda (G3977@t) ((lambda (G3979@ls/false) (if G3979@ls/false (apply (lambda (G397b@name G397c@accessor G397d@mutator G397e@rest) (cons G397d@mutator (G396f@f G397e@rest))) G3979@ls/false) ((lambda (G3983@t) ((lambda (G3985@ls/false) (if G3985@ls/false (apply (lambda (G3987@name G3988@rest) (cons (G396e@gen-name G3987@name) (G396f@f G3988@rest))) G3985@ls/false) ((lambda (G398b@t) ((lambda (G398d@ls/false) (if G398d@ls/false (apply (lambda (G398f@rest) (G396f@f G398f@rest)) G398d@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G398b@t))) (G2f3d@syntax-dispatch G398b@t '(_ . any)))) G3983@t))) (G2f3d@syntax-dispatch G3983@t '((#(scheme-id mutable) any) . any)))) G3977@t))) (G2f3d@syntax-dispatch G3977@t '((#(scheme-id mutable) any any any) . any)))) G3973@t))) (G2f3d@syntax-dispatch G3973@t '()))) G3971@fields)))) G396f@f) G396a@fields))) '#f))) (set! G38c6@get-accessors (lambda (G3925@foo G3926@fields) ((lambda (G392a@gen-name) (begin (set! G392a@gen-name (lambda (G3967@x) (G302c@datum->syntax G3925@foo (string->symbol (string-append (symbol->string (G302e@syntax->datum G3925@foo)) '"-" (symbol->string (G302e@syntax->datum G3967@x))))))) (map (lambda (G392b@field) ((lambda (G392d@t) ((lambda (G392f@ls/false) (if (and G392f@ls/false (apply (lambda (G3931@name G3932@accessor G3933@mutator) (G2d3e@id? G3932@accessor)) G392f@ls/false)) (apply (lambda (G3937@name G3938@accessor G3939@mutator) G3938@accessor) G392f@ls/false) ((lambda (G393d@t) ((lambda (G393f@ls/false) (if (and G393f@ls/false (apply (lambda (G3941@name G3942@accessor) (G2d3e@id? G3942@accessor)) G393f@ls/false)) (apply (lambda (G3945@name G3946@accessor) G3946@accessor) G393f@ls/false) ((lambda (G3949@t) ((lambda (G394b@ls/false) (if (and G394b@ls/false (apply (lambda (G394d@name) (G2d3e@id? G394d@name)) G394b@ls/false)) (apply (lambda (G394f@name) (G392a@gen-name G394f@name)) G394b@ls/false) ((lambda (G3951@t) ((lambda (G3953@ls/false) (if (and G3953@ls/false (apply (lambda (G3955@name) (G2d3e@id? G3955@name)) G3953@ls/false)) (apply (lambda (G3957@name) (G392a@gen-name G3957@name)) G3953@ls/false) ((lambda (G3959@t) ((lambda (G395b@ls/false) (if (and G395b@ls/false (apply (lambda (G395d@name) (G2d3e@id? G395d@name)) G395b@ls/false)) (apply (lambda (G395f@name) (G392a@gen-name G395f@name)) G395b@ls/false) ((lambda (G3961@t) ((lambda (G3963@ls/false) (if G3963@ls/false (apply (lambda (G3965@others) (G3028@syntax-violation '#f '"invalid field spec" G392b@field)) G3963@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3961@t))) (G2f3d@syntax-dispatch G3961@t 'any))) G3959@t))) (G2f3d@syntax-dispatch G3959@t 'any))) G3951@t))) (G2f3d@syntax-dispatch G3951@t '(#(scheme-id immutable) any)))) G3949@t))) (G2f3d@syntax-dispatch G3949@t '(#(scheme-id mutable) any)))) G393d@t))) (G2f3d@syntax-dispatch G393d@t '(#(scheme-id immutable) any any)))) G392d@t))) (G2f3d@syntax-dispatch G392d@t '(#(scheme-id mutable) any any any)))) G392b@field)) G3926@fields))) '#f))) (set! G38c8@enumerate (lambda (G391d@ls) ((letrec ((G391f@f (lambda (G3921@ls G3922@i) (if (null? G3921@ls) '() (cons G3922@i (G391f@f (cdr G3921@ls) (+ G3922@i '1))))))) G391f@f) G391d@ls '0))) (set! G38ca@do-define-record (lambda (G38f5@namespec G38f6@clause*) ((lambda (G38f9@foo) ((lambda (G38fb@foo-rtd) ((lambda (G38fd@foo-rcd) ((lambda (G38ff@protocol) ((lambda (G3901@make-foo) ((lambda (G3903@fields) ((lambda (G3905@idx*) ((lambda (G3907@foo-x*) ((lambda (G3909@set-foo-x!*) ((lambda (G390b@set-foo-idx*) ((lambda (G390d@foo?) ((lambda (G390f@foo-rtd-code) ((lambda (G3911@foo-rcd-code) ((lambda (G3913@protocol-code) ((lambda () (G2ef3@bless (cons 'begin (cons (list 'define G38fb@foo-rtd G390f@foo-rtd-code) (cons (list 'define G38ff@protocol G3913@protocol-code) (cons (list 'define G38fd@foo-rcd G3911@foo-rcd-code) (cons (list 'define-syntax G38f9@foo (list 'list ''$rtd (list 'syntax G38fb@foo-rtd) (list 'syntax G38fd@foo-rcd))) (cons (list 'define G390d@foo? (list 'record-predicate G38fb@foo-rtd)) (cons (list 'define G3901@make-foo (list 'record-constructor G38fd@foo-rcd)) (append (map (lambda (G3915@foo-x G3916@idx) (list 'define G3915@foo-x (list 'record-accessor G38fb@foo-rtd G3916@idx))) G3907@foo-x* G3905@idx*) (map (lambda (G3919@set-foo-x! G391a@idx) (list 'define G3919@set-foo-x! (list 'record-mutator G38fb@foo-rtd G391a@idx))) G3909@set-foo-x!* G390b@set-foo-idx*))))))))))))) (G38be@get-protocol-code G38f6@clause*))) (G38bc@foo-rcd-code G38f6@clause* G38fb@foo-rtd G38ff@protocol (G38ba@parent-rcd-code G38f6@clause*)))) (G38b6@foo-rtd-code G38f9@foo G38f6@clause* (G38b8@parent-rtd-code G38f6@clause*)))) (G38b2@get-record-predicate-name G38f5@namespec))) (G38c2@get-mutator-indices G3903@fields))) (G38c4@get-mutators G38f9@foo G3903@fields))) (G38c6@get-accessors G38f9@foo G3903@fields))) (G38c8@enumerate G3903@fields))) (G38c0@get-fields G38f6@clause*))) (G38b0@get-record-constructor-name G38f5@namespec))) (gensym))) (gensym))) (gensym))) (G38ae@get-record-name G38f5@namespec)))) (set! G38cc@verify-clauses (lambda (G38d5@x G38d6@cls*) ((lambda (G38da@valid-kwds G38dc@free-id-member?) (begin (set! G38da@valid-kwds (map G2ef3@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G38dc@free-id-member? (lambda (G38f1@x G38f2@ls) (and (pair? G38f2@ls) (or (G2d46@free-id=? G38f1@x (car G38f2@ls)) (G38dc@free-id-member? G38f1@x (cdr G38f2@ls)))))) ((letrec ((G38dd@f (lambda (G38df@cls* G38e0@seen*) (if (not (null? G38df@cls*)) ((lambda (G38e3@t) ((lambda (G38e5@ls/false) (if G38e5@ls/false (apply (lambda (G38e7@kwd G38e8@rest) (if (or (not (G2d3e@id? G38e7@kwd)) (not (G38dc@free-id-member? G38e7@kwd G38da@valid-kwds))) (G3028@syntax-violation '#f '"not a valid define-record-type keyword" G38e7@kwd) (if (G2d4c@bound-id-member? G38e7@kwd G38e0@seen*) (G3028@syntax-violation '#f '"duplicate use of keyword " G38d5@x G38e7@kwd) (G38dd@f (cdr G38df@cls*) (cons G38e7@kwd G38e0@seen*))))) G38e5@ls/false) ((lambda (G38eb@t) ((lambda (G38ed@ls/false) (if G38ed@ls/false (apply (lambda (G38ef@cls) (G3028@syntax-violation '#f '"malformed define-record-type clause" G38ef@cls)) G38ed@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G38eb@t))) (G2f3d@syntax-dispatch G38eb@t 'any))) G38e3@t))) (G2f3d@syntax-dispatch G38e3@t '(any . any)))) (car G38df@cls*)) (void))))) G38dd@f) G38d6@cls* '()))) '#f '#f))) ((lambda (G38cd@t) ((lambda (G38cf@ls/false) (if G38cf@ls/false (apply (lambda (G38d1@namespec G38d2@clause*) (begin (G38cc@verify-clauses G38a9@x G38d2@clause*) (G38ca@do-define-record G38d1@namespec G38d2@clause*))) G38cf@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G38cd@t))) (G2f3d@syntax-dispatch G38cd@t '(_ any . each-any)))) G38a9@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f33@define-condition-type-macro (lambda (G3aa5@x) ((lambda (G3aa8@mkname) (begin (set! G3aa8@mkname (lambda (G3ad5@name G3ad6@suffix) (G302c@datum->syntax G3ad5@name (string->symbol (string-append (symbol->string (G302e@syntax->datum G3ad5@name)) G3ad6@suffix))))) ((lambda (G3aa9@t) ((lambda (G3aab@ls/false) (if (and G3aab@ls/false (apply (lambda (G3aad@ctxt G3aae@name G3aaf@super G3ab0@constructor G3ab1@predicate G3ab2@field* G3ab3@accessor*) (and (G2d3e@id? G3aae@name) (G2d3e@id? G3aaf@super) (G2d3e@id? G3ab0@constructor) (G2d3e@id? G3ab1@predicate) (for-all G2d3e@id? G3ab2@field*) (for-all G2d3e@id? G3ab3@accessor*))) G3aab@ls/false)) (apply (lambda (G3abb@ctxt G3abc@name G3abd@super G3abe@constructor G3abf@predicate G3ac0@field* G3ac1@accessor*) ((lambda (G3ac9@aux-accessor*) (G2ef3@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3abc@name G3abe@constructor (gensym)) (cons (list 'parent G3abd@super) (cons (cons 'fields (map (lambda (G3acb@field G3acc@aux) (list 'immutable G3acb@field G3acc@aux)) G3ac0@field* G3ac9@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3abf@predicate (list 'condition-predicate (list 'record-type-descriptor G3abc@name))) (map (lambda (G3acf@accessor G3ad0@aux) (list 'define G3acf@accessor (list 'condition-accessor (list 'record-type-descriptor G3abc@name) G3ad0@aux))) G3ac1@accessor* G3ac9@aux-accessor*)))))) (map (lambda (G3ad3@x) (gensym)) G3ac1@accessor*))) G3aab@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3aa9@t))) (G2f3d@syntax-dispatch G3aa9@t '(any any any any any . #(each (any any)))))) G3aa5@x))) '#f))) (set! G2f35@incorrect-usage-macro (lambda (G3ad9@e) (G3028@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3ad9@e))) (set! G2f37@parameterize-macro (lambda (G3adb@e) ((lambda (G3add@t) ((lambda (G3adf@ls/false) (if G3adf@ls/false (apply (lambda (G3ae1@b G3ae2@b*) (G2ef3@bless (cons 'let (cons '() (cons G3ae1@b G3ae2@b*))))) G3adf@ls/false) ((lambda (G3ae5@t) ((lambda (G3ae7@ls/false) (if G3ae7@ls/false (apply (lambda (G3ae9@olhs* G3aea@orhs* G3aeb@b G3aec@b*) ((lambda (G3af1@lhs* G3af2@rhs*) (G2ef3@bless (cons (list 'lambda (append G3af1@lhs* G3af2@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3af5@lhs G3af6@rhs) (list 'let (list (list 't (list G3af5@lhs))) (list G3af5@lhs G3af6@rhs) (cons 'set! (cons G3af6@rhs '(t))))) G3af1@lhs* G3af2@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3aeb@b G3aec@b*))) '(swap)))))) (append G3ae9@olhs* G3aea@orhs*)))) (G3016@generate-temporaries G3ae9@olhs*) (G3016@generate-temporaries G3aea@orhs*))) G3ae7@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3ae5@t))) (G2f3d@syntax-dispatch G3ae5@t '(_ #(each (any any)) any . each-any)))) G3add@t))) (G2f3d@syntax-dispatch G3add@t '(_ () any . each-any)))) G3adb@e))) (set! G2f39@foreign-call-transformer (lambda (G3af9@e G3afa@r G3afb@mr) ((lambda (G3aff@t) ((lambda (G3b01@ls/false) (if G3b01@ls/false (apply (lambda (G3b03@name G3b04@arg*) (cons 'foreign-call (cons (G2f61@chi-expr G3b03@name G3afa@r G3afb@mr) (G2f5d@chi-expr* G3b04@arg* G3afa@r G3afb@mr)))) G3b01@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3aff@t))) (G2f3d@syntax-dispatch G3aff@t '(_ any . each-any)))) G3af9@e))) (set! G2f3b@convert-pattern (lambda (G3b07@pattern G3b08@keys) ((lambda (G3b0c@cvt* G3b0e@cvt) (begin (set! G3b0c@cvt* (lambda (G3b9d@p* G3b9e@n G3b9f@ids) (if (null? G3b9d@p*) (values '() G3b9f@ids) (call-with-values (lambda () (G3b0c@cvt* (cdr G3b9d@p*) G3b9e@n G3b9f@ids)) (lambda (G3ba5@G3ba3 G3ba6@G3ba4) ((lambda (G3ba9@ids G3baa@y) (call-with-values (lambda () (G3b0e@cvt (car G3b9d@p*) G3b9e@n G3ba9@ids)) (lambda (G3baf@G3bad G3bb0@G3bae) ((lambda (G3bb3@ids G3bb4@x) (values (cons G3bb4@x G3baa@y) G3bb3@ids)) G3bb0@G3bae G3baf@G3bad)))) G3ba6@G3ba4 G3ba5@G3ba3)))))) (set! G3b0e@cvt (lambda (G3b0f@p G3b10@n G3b11@ids) ((lambda (G3b15@t) ((lambda (G3b17@ls/false) (if (and G3b17@ls/false (apply (lambda (G3b19@id) (G2d3e@id? G3b19@id)) G3b17@ls/false)) (apply (lambda (G3b1b@id) (if (G2d4c@bound-id-member? G3b0f@p G3b08@keys) (values (vector 'free-id G3b0f@p) G3b11@ids) (if (G2d46@free-id=? G3b0f@p (G2ec7@scheme-stx '_)) (values '_ G3b11@ids) (values 'any (cons (cons G3b0f@p G3b10@n) G3b11@ids))))) G3b17@ls/false) ((lambda (G3b1d@t) ((lambda (G3b1f@ls/false) (if (and G3b1f@ls/false (apply (lambda (G3b21@p G3b22@dots) (G2f3f@ellipsis? G3b22@dots)) G3b1f@ls/false)) (apply (lambda (G3b25@p G3b26@dots) (call-with-values (lambda () (G3b0e@cvt G3b25@p (+ G3b10@n '1) G3b11@ids)) (lambda (G3b2b@G3b29 G3b2c@G3b2a) ((lambda (G3b2f@ids G3b30@p) (values (if (eq? G3b30@p 'any) 'each-any (vector 'each G3b30@p)) G3b2f@ids)) G3b2c@G3b2a G3b2b@G3b29)))) G3b1f@ls/false) ((lambda (G3b33@t) ((lambda (G3b35@ls/false) (if (and G3b35@ls/false (apply (lambda (G3b37@x G3b38@dots G3b39@ys G3b3a@z) (G2f3f@ellipsis? G3b38@dots)) G3b35@ls/false)) (apply (lambda (G3b3f@x G3b40@dots G3b41@ys G3b42@z) (call-with-values (lambda () (G3b0e@cvt G3b42@z G3b10@n G3b11@ids)) (lambda (G3b49@G3b47 G3b4a@G3b48) ((lambda (G3b4d@ids G3b4e@z) (call-with-values (lambda () (G3b0c@cvt* G3b41@ys G3b10@n G3b4d@ids)) (lambda (G3b53@G3b51 G3b54@G3b52) ((lambda (G3b57@ids G3b58@ys) (call-with-values (lambda () (G3b0e@cvt G3b3f@x (+ G3b10@n '1) G3b57@ids)) (lambda (G3b5d@G3b5b G3b5e@G3b5c) ((lambda (G3b61@ids G3b62@x) (values (vector 'each+ G3b62@x (reverse G3b58@ys) G3b4e@z) G3b61@ids)) G3b5e@G3b5c G3b5d@G3b5b)))) G3b54@G3b52 G3b53@G3b51)))) G3b4a@G3b48 G3b49@G3b47)))) G3b35@ls/false) ((lambda (G3b65@t) ((lambda (G3b67@ls/false) (if G3b67@ls/false (apply (lambda (G3b69@x G3b6a@y) (call-with-values (lambda () (G3b0e@cvt G3b6a@y G3b10@n G3b11@ids)) (lambda (G3b6f@G3b6d G3b70@G3b6e) ((lambda (G3b73@ids G3b74@y) (call-with-values (lambda () (G3b0e@cvt G3b69@x G3b10@n G3b73@ids)) (lambda (G3b79@G3b77 G3b7a@G3b78) ((lambda (G3b7d@ids G3b7e@x) (values (cons G3b7e@x G3b74@y) G3b7d@ids)) G3b7a@G3b78 G3b79@G3b77)))) G3b70@G3b6e G3b6f@G3b6d)))) G3b67@ls/false) ((lambda (G3b81@t) ((lambda (G3b83@ls/false) (if G3b83@ls/false (apply (lambda () (values '() G3b11@ids)) G3b83@ls/false) ((lambda (G3b85@t) ((lambda (G3b87@ls/false) (if (and G3b87@ls/false (apply (lambda (G3b89@p) (not (G2d06@stx? G3b89@p))) G3b87@ls/false)) (apply (lambda (G3b8b@p) (call-with-values (lambda () (G3b0e@cvt G3b8b@p G3b10@n G3b11@ids)) (lambda (G3b8f@G3b8d G3b90@G3b8e) ((lambda (G3b93@ids G3b94@p) (values (vector 'vector G3b94@p) G3b93@ids)) G3b90@G3b8e G3b8f@G3b8d)))) G3b87@ls/false) ((lambda (G3b97@t) ((lambda (G3b99@ls/false) (if G3b99@ls/false (apply (lambda (G3b9b@datum) (values (vector 'atom (G2d54@stx->datum G3b9b@datum)) G3b11@ids)) G3b99@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3b97@t))) (G2f3d@syntax-dispatch G3b97@t 'any))) G3b85@t))) (G2f3d@syntax-dispatch G3b85@t '#(vector each-any)))) G3b81@t))) (G2f3d@syntax-dispatch G3b81@t '()))) G3b65@t))) (G2f3d@syntax-dispatch G3b65@t '(any . any)))) G3b33@t))) (G2f3d@syntax-dispatch G3b33@t '(any any . #(each+ any () any))))) G3b1d@t))) (G2f3d@syntax-dispatch G3b1d@t '(any any)))) G3b15@t))) (G2f3d@syntax-dispatch G3b15@t 'any))) G3b0f@p))) (G3b0e@cvt G3b07@pattern '0 '()))) '#f '#f))) (set! G2f3d@syntax-dispatch ((lambda () ((lambda (G3bb8@stx^ G3bba@match-each G3bbc@match-each+ G3bbe@match-each-any G3bc0@match-empty G3bc2@combine G3bc4@match* G3bc6@match) (begin (set! G3bb8@stx^ (lambda (G3c81@e G3c82@m* G3c83@s* G3c84@ae*) (if (and (null? G3c82@m*) (null? G3c83@s*) (null? G3c84@ae*)) G3c81@e (G2d26@mkstx G3c81@e G3c82@m* G3c83@s* G3c84@ae*)))) (set! G3bba@match-each (lambda (G3c64@e G3c65@p G3c66@m* G3c67@s* G3c68@ae*) (if (pair? G3c64@e) ((lambda (G3c6e@first) (and G3c6e@first ((lambda (G3c70@rest) (and G3c70@rest (cons G3c6e@first G3c70@rest))) (G3bba@match-each (cdr G3c64@e) G3c65@p G3c66@m* G3c67@s* G3c68@ae*)))) (G3bc6@match (car G3c64@e) G3c65@p G3c66@m* G3c67@s* G3c68@ae* '())) (if (null? G3c64@e) '() (if (G2d06@stx? G3c64@e) (and (not (G2cbc@top-marked? G3c66@m*)) (call-with-values (lambda () (G2d24@join-wraps G3c66@m* G3c67@s* G3c68@ae* G3c64@e)) (lambda (G3c75@G3c72 G3c76@G3c73 G3c77@G3c74) ((lambda (G3c7b@ae* G3c7c@s* G3c7d@m*) (G3bba@match-each (G2d0a@stx-expr G3c64@e) G3c65@p G3c7d@m* G3c7c@s* G3c7b@ae*)) G3c77@G3c74 G3c76@G3c73 G3c75@G3c72)))) (if (G28d3@G27fe@annotation? G3c64@e) (G3bba@match-each (G28d5@G2802@annotation-expression G3c64@e) G3c65@p G3c66@m* G3c67@s* G3c68@ae*) '#f)))))) (set! G3bbc@match-each+ (lambda (G3c2a@e G3c2b@x-pat G3c2c@y-pat G3c2d@z-pat G3c2e@m* G3c2f@s* G3c30@ae* G3c31@r) ((letrec ((G3c3a@f (lambda (G3c3c@e G3c3d@m* G3c3e@s* G3c3f@ae*) (if (pair? G3c3c@e) (call-with-values (lambda () (G3c3a@f (cdr G3c3c@e) G3c3d@m* G3c3e@s* G3c3f@ae*)) (lambda (G3c47@G3c44 G3c48@G3c45 G3c49@G3c46) ((lambda (G3c4d@r G3c4e@y-pat G3c4f@xr*) (if G3c4d@r (if (null? G3c4e@y-pat) ((lambda (G3c53@xr) (if G3c53@xr (values (cons G3c53@xr G3c4f@xr*) G3c4e@y-pat G3c4d@r) (values '#f '#f '#f))) (G3bc6@match (car G3c3c@e) G3c2b@x-pat G3c3d@m* G3c3e@s* G3c3f@ae* '())) (values '() (cdr G3c4e@y-pat) (G3bc6@match (car G3c3c@e) (car G3c4e@y-pat) G3c3d@m* G3c3e@s* G3c3f@ae* G3c4d@r))) (values '#f '#f '#f))) G3c49@G3c46 G3c48@G3c45 G3c47@G3c44))) (if (G2d06@stx? G3c3c@e) (if (G2cbc@top-marked? G3c3d@m*) (values '() G3c2c@y-pat (G3bc6@match G3c3c@e G3c2d@z-pat G3c3d@m* G3c3e@s* G3c3f@ae* G3c31@r)) (call-with-values (lambda () (G2d24@join-wraps G3c3d@m* G3c3e@s* G3c3f@ae* G3c3c@e)) (lambda (G3c58@G3c55 G3c59@G3c56 G3c5a@G3c57) ((lambda (G3c5e@ae* G3c5f@s* G3c60@m*) (G3c3a@f (G2d0a@stx-expr G3c3c@e) G3c60@m* G3c5f@s* G3c5e@ae*)) G3c5a@G3c57 G3c59@G3c56 G3c58@G3c55)))) (if (G28d3@G27fe@annotation? G3c3c@e) (G3c3a@f (G28d5@G2802@annotation-expression G3c3c@e) G3c3d@m* G3c3e@s* G3c3f@ae*) (values '() G3c2c@y-pat (G3bc6@match G3c3c@e G3c2d@z-pat G3c3d@m* G3c3e@s* G3c3f@ae* G3c31@r)))))))) G3c3a@f) G3c2a@e G3c2e@m* G3c2f@s* G3c30@ae*))) (set! G3bbe@match-each-any (lambda (G3c11@e G3c12@m* G3c13@s* G3c14@ae*) (if (pair? G3c11@e) ((lambda (G3c19@l) (and G3c19@l (cons (G3bb8@stx^ (car G3c11@e) G3c12@m* G3c13@s* G3c14@ae*) G3c19@l))) (G3bbe@match-each-any (cdr G3c11@e) G3c12@m* G3c13@s* G3c14@ae*)) (if (null? G3c11@e) '() (if (G2d06@stx? G3c11@e) (and (not (G2cbc@top-marked? G3c12@m*)) (call-with-values (lambda () (G2d24@join-wraps G3c12@m* G3c13@s* G3c14@ae* G3c11@e)) (lambda (G3c1e@G3c1b G3c1f@G3c1c G3c20@G3c1d) ((lambda (G3c24@ae* G3c25@s* G3c26@m*) (G3bbe@match-each-any (G2d0a@stx-expr G3c11@e) G3c26@m* G3c25@s* G3c24@ae*)) G3c20@G3c1d G3c1f@G3c1c G3c1e@G3c1b)))) (if (G28d3@G27fe@annotation? G3c11@e) (G3bbe@match-each-any (G28d5@G2802@annotation-expression G3c11@e) G3c12@m* G3c13@s* G3c14@ae*) '#f)))))) (set! G3bc0@match-empty (lambda (G3c0b@p G3c0c@r) (if (null? G3c0b@p) G3c0c@r (if (eq? G3c0b@p '_) G3c0c@r (if (eq? G3c0b@p 'any) (cons '() G3c0c@r) (if (pair? G3c0b@p) (G3bc0@match-empty (car G3c0b@p) (G3bc0@match-empty (cdr G3c0b@p) G3c0c@r)) (if (eq? G3c0b@p 'each-any) (cons '() G3c0c@r) ((lambda (G3c0f@t) (if (memv G3c0f@t '(each)) (G3bc0@match-empty (vector-ref G3c0b@p '1) G3c0c@r) (if (memv G3c0f@t '(each+)) (G3bc0@match-empty (vector-ref G3c0b@p '1) (G3bc0@match-empty (reverse (vector-ref G3c0b@p '2)) (G3bc0@match-empty (vector-ref G3c0b@p '3) G3c0c@r))) (if (memv G3c0f@t '(free-id atom)) G3c0c@r (if (memv G3c0f@t '(scheme-id atom)) G3c0c@r (if (memv G3c0f@t '(vector)) (G3bc0@match-empty (vector-ref G3c0b@p '1) G3c0c@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c0b@p))))))) (vector-ref G3c0b@p '0))))))))) (set! G3bc2@combine (lambda (G3c07@r* G3c08@r) (if (null? (car G3c07@r*)) G3c08@r (cons (map car G3c07@r*) (G3bc2@combine (map cdr G3c07@r*) G3c08@r))))) (set! G3bc4@match* (lambda (G3be6@e G3be7@p G3be8@m* G3be9@s* G3bea@ae* G3beb@r) (if (null? G3be7@p) (and (null? G3be6@e) G3beb@r) (if (pair? G3be7@p) (and (pair? G3be6@e) (G3bc6@match (car G3be6@e) (car G3be7@p) G3be8@m* G3be9@s* G3bea@ae* (G3bc6@match (cdr G3be6@e) (cdr G3be7@p) G3be8@m* G3be9@s* G3bea@ae* G3beb@r))) (if (eq? G3be7@p 'each-any) ((lambda (G3bf2@l) (and G3bf2@l (cons G3bf2@l G3beb@r))) (G3bbe@match-each-any G3be6@e G3be8@m* G3be9@s* G3bea@ae*)) ((lambda (G3bf4@t) (if (memv G3bf4@t '(each)) (if (null? G3be6@e) (G3bc0@match-empty (vector-ref G3be7@p '1) G3beb@r) ((lambda (G3bf6@r*) (and G3bf6@r* (G3bc2@combine G3bf6@r* G3beb@r))) (G3bba@match-each G3be6@e (vector-ref G3be7@p '1) G3be8@m* G3be9@s* G3bea@ae*))) (if (memv G3bf4@t '(free-id)) (and (symbol? G3be6@e) (G2cbc@top-marked? G3be8@m*) (G2d46@free-id=? (G3bb8@stx^ G3be6@e G3be8@m* G3be9@s* G3bea@ae*) (vector-ref G3be7@p '1)) G3beb@r) (if (memv G3bf4@t '(scheme-id)) (and (symbol? G3be6@e) (G2cbc@top-marked? G3be8@m*) (G2d46@free-id=? (G3bb8@stx^ G3be6@e G3be8@m* G3be9@s* G3bea@ae*) (G2ec7@scheme-stx (vector-ref G3be7@p '1))) G3beb@r) (if (memv G3bf4@t '(each+)) (call-with-values (lambda () (G3bbc@match-each+ G3be6@e (vector-ref G3be7@p '1) (vector-ref G3be7@p '2) (vector-ref G3be7@p '3) G3be8@m* G3be9@s* G3bea@ae* G3beb@r)) (lambda (G3bfb@G3bf8 G3bfc@G3bf9 G3bfd@G3bfa) ((lambda (G3c01@r G3c02@y-pat G3c03@xr*) (and G3c01@r (null? G3c02@y-pat) (if (null? G3c03@xr*) (G3bc0@match-empty (vector-ref G3be7@p '1) G3c01@r) (G3bc2@combine G3c03@xr* G3c01@r)))) G3bfd@G3bfa G3bfc@G3bf9 G3bfb@G3bf8))) (if (memv G3bf4@t '(atom)) (and (fast-equal? (vector-ref G3be7@p '1) (G2d52@strip G3be6@e G3be8@m*)) G3beb@r) (if (memv G3bf4@t '(vector)) (and (vector? G3be6@e) (G3bc6@match (vector->list G3be6@e) (vector-ref G3be7@p '1) G3be8@m* G3be9@s* G3bea@ae* G3beb@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3be7@p)))))))) (vector-ref G3be7@p '0))))))) (set! G3bc6@match (lambda (G3bcb@e G3bcc@p G3bcd@m* G3bce@s* G3bcf@ae* G3bd0@r) (if (not G3bd0@r) '#f (if (eq? G3bcc@p '_) G3bd0@r (if (eq? G3bcc@p 'any) (cons (G3bb8@stx^ G3bcb@e G3bcd@m* G3bce@s* G3bcf@ae*) G3bd0@r) (if (G2d06@stx? G3bcb@e) (and (not (G2cbc@top-marked? G3bcd@m*)) (call-with-values (lambda () (G2d24@join-wraps G3bcd@m* G3bce@s* G3bcf@ae* G3bcb@e)) (lambda (G3bda@G3bd7 G3bdb@G3bd8 G3bdc@G3bd9) ((lambda (G3be0@ae* G3be1@s* G3be2@m*) (G3bc6@match (G2d0a@stx-expr G3bcb@e) G3bcc@p G3be2@m* G3be1@s* G3be0@ae* G3bd0@r)) G3bdc@G3bd9 G3bdb@G3bd8 G3bda@G3bd7)))) (if (G28d3@G27fe@annotation? G3bcb@e) (G3bc6@match (G28d5@G2802@annotation-expression G3bcb@e) G3bcc@p G3bcd@m* G3bce@s* G3bcf@ae* G3bd0@r) (G3bc4@match* G3bcb@e G3bcc@p G3bcd@m* G3bce@s* G3bcf@ae* G3bd0@r)))))))) (lambda (G3bc7@e G3bc8@p) (G3bc6@match G3bc7@e G3bc8@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f3f@ellipsis? (lambda (G3c89@x) (and (G2d3e@id? G3c89@x) (G2d46@free-id=? G3c89@x (G2ec7@scheme-stx '...))))) (set! G2f41@underscore? (lambda (G3c8b@x) (and (G2d3e@id? G3c8b@x) (G2d46@free-id=? G3c8b@x (G2ec7@scheme-stx '_))))) (set! G2f43@verify-literals (lambda (G3c8d@lits G3c8e@expr) (for-each (lambda (G3c91@x) (if (or (not (G2d3e@id? G3c91@x)) (G2f3f@ellipsis? G3c91@x) (G2f41@underscore? G3c91@x)) (G3028@syntax-violation '#f '"invalid literal" G3c8e@expr G3c91@x) (void))) G3c8d@lits))) (set! G2f45@syntax-case-transformer ((lambda () ((lambda (G3c94@build-dispatch-call G3c96@invalid-ids-error G3c98@gen-clause G3c9a@gen-syntax-case) (begin (set! G3c94@build-dispatch-call (lambda (G3d03@pvars G3d04@expr G3d05@y G3d06@r G3d07@mr) ((lambda (G3d0d@ids G3d0e@levels) ((lambda (G3d11@labels G3d12@new-vars) ((lambda (G3d15@body) (list '(primitive apply) (G2c9c@G2bda@build-lambda '#f G3d12@new-vars G3d15@body) G3d05@y)) (G2f61@chi-expr (G2d2a@add-subst (G2cf9@make-full-rib G3d0d@ids G3d11@labels) G3d04@expr) (append (map (lambda (G3d17@label G3d18@var G3d19@level) (cons G3d17@label (G2d5e@make-binding 'syntax (cons G3d18@var G3d19@level)))) G3d11@labels G3d12@new-vars (map cdr G3d03@pvars)) G3d06@r) G3d07@mr))) (map G2cc2@gen-label G3d0d@ids) (map G2cbe@gen-lexical G3d0d@ids))) (map car G3d03@pvars) (map cdr G3d03@pvars)))) (set! G3c96@invalid-ids-error (lambda (G3cf7@id* G3cf8@e G3cf9@class) ((letrec ((G3cfd@find (lambda (G3cff@id* G3d00@ok*) (if (null? G3cff@id*) (G3028@syntax-violation '#f '"invalid syntax" G3cf8@e) (if (G2d3e@id? (car G3cff@id*)) (if (G2d4c@bound-id-member? (car G3cff@id*) G3d00@ok*) (G3024@syntax-error (car G3cff@id*) '"duplicate " G3cf9@class) (G3cfd@find (cdr G3cff@id*) (cons (car G3cff@id*) G3d00@ok*))) (G3024@syntax-error (car G3cff@id*) '"invalid " G3cf9@class)))))) G3cfd@find) G3cf7@id* '()))) (set! G3c98@gen-clause (lambda (G3cd1@x G3cd2@keys G3cd3@clauses G3cd4@r G3cd5@mr G3cd6@pat G3cd7@fender G3cd8@expr) (call-with-values (lambda () (G2f3b@convert-pattern G3cd6@pat G3cd2@keys)) (lambda (G3ce3@G3ce1 G3ce4@G3ce2) ((lambda (G3ce7@pvars G3ce8@p) (if (not (G2d4a@distinct-bound-ids? (map car G3ce7@pvars))) (G3c96@invalid-ids-error (map car G3ce7@pvars) G3cd6@pat '"pattern variable") (if (not (for-all (lambda (G3ceb@x) (not (G2f3f@ellipsis? (car G3ceb@x)))) G3ce7@pvars)) (G3028@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3cd6@pat) ((lambda (G3ced@y) ((lambda (G3cef@test) ((lambda (G3cf1@conseq) ((lambda (G3cf3@altern) (list (G2c9c@G2bda@build-lambda '#f (list G3ced@y) (list 'if G3cef@test G3cf1@conseq G3cf3@altern)) (list '(primitive syntax-dispatch) G3cd1@x (list 'quote G3ce8@p)))) (G3c9a@gen-syntax-case G3cd1@x G3cd2@keys G3cd3@clauses G3cd4@r G3cd5@mr))) (G3c94@build-dispatch-call G3ce7@pvars G3cd8@expr G3ced@y G3cd4@r G3cd5@mr))) (if (eq? G3cd7@fender '#t) G3ced@y ((lambda (G3cf5@call) (list 'if G3ced@y G3cf5@call (list 'quote '#f))) (G3c94@build-dispatch-call G3ce7@pvars G3cd7@fender G3ced@y G3cd4@r G3cd5@mr))))) (G2cbe@gen-lexical 'tmp))))) G3ce4@G3ce2 G3ce3@G3ce1))))) (set! G3c9a@gen-syntax-case (lambda (G3caf@x G3cb0@keys G3cb1@clauses G3cb2@r G3cb3@mr) (if (null? G3cb1@clauses) (list '(primitive syntax-error) G3caf@x) ((lambda (G3cb9@t) ((lambda (G3cbb@ls/false) (if G3cbb@ls/false (apply (lambda (G3cbd@pat G3cbe@expr) (if (and (G2d3e@id? G3cbd@pat) (not (G2d4c@bound-id-member? G3cbd@pat G3cb0@keys)) (not (G2f3f@ellipsis? G3cbd@pat))) (if (G2d46@free-id=? G3cbd@pat (G2ec7@scheme-stx '_)) (G2f61@chi-expr G3cbe@expr G3cb2@r G3cb3@mr) ((lambda (G3cc1@lab G3cc2@lex) ((lambda (G3cc5@body) (list (G2c9c@G2bda@build-lambda '#f (list G3cc2@lex) G3cc5@body) G3caf@x)) (G2f61@chi-expr (G2d2a@add-subst (G2cf9@make-full-rib (list G3cbd@pat) (list G3cc1@lab)) G3cbe@expr) (cons (cons G3cc1@lab (G2d5e@make-binding 'syntax (cons G3cc2@lex '0))) G3cb2@r) G3cb3@mr))) (G2cc2@gen-label G3cbd@pat) (G2cbe@gen-lexical G3cbd@pat))) (G3c98@gen-clause G3caf@x G3cb0@keys (cdr G3cb1@clauses) G3cb2@r G3cb3@mr G3cbd@pat '#t G3cbe@expr))) G3cbb@ls/false) ((lambda (G3cc7@t) ((lambda (G3cc9@ls/false) (if G3cc9@ls/false (apply (lambda (G3ccb@pat G3ccc@fender G3ccd@expr) (G3c98@gen-clause G3caf@x G3cb0@keys (cdr G3cb1@clauses) G3cb2@r G3cb3@mr G3ccb@pat G3ccc@fender G3ccd@expr)) G3cc9@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3cc7@t))) (G2f3d@syntax-dispatch G3cc7@t '(any any any)))) G3cb9@t))) (G2f3d@syntax-dispatch G3cb9@t '(any any)))) (car G3cb1@clauses))))) (lambda (G3c9b@e G3c9c@r G3c9d@mr) ((lambda (G3ca1@t) ((lambda (G3ca3@ls/false) (if G3ca3@ls/false (apply (lambda (G3ca5@expr G3ca6@keys G3ca7@clauses) (begin (G2f43@verify-literals G3ca6@keys G3c9b@e) ((lambda (G3cab@x) ((lambda (G3cad@body) (list (G2c9c@G2bda@build-lambda '#f (list G3cab@x) G3cad@body) (G2f61@chi-expr G3ca5@expr G3c9c@r G3c9d@mr))) (G3c9a@gen-syntax-case G3cab@x G3ca6@keys G3ca7@clauses G3c9c@r G3c9d@mr))) (G2cbe@gen-lexical 'tmp)))) G3ca3@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3ca1@t))) (G2f3d@syntax-dispatch G3ca1@t '(_ any each-any . each-any)))) G3c9b@e)))) '#f '#f '#f '#f)))) (set! G2f47@ellipsis-map (lambda (G3d1d@proc G3d1e@ls . G3d21@ls*) ((lambda (G3d24@who) (begin (set! G3d24@who '...) (begin (if (not (list? G3d1e@ls)) (assertion-violation G3d24@who '"not a list" G3d1e@ls) (void)) (if (not (null? G3d21@ls*)) ((lambda (G3d25@n) (for-each (lambda (G3d27@x) (begin (if (not (list? G3d27@x)) (assertion-violation G3d24@who '"not a list" G3d27@x) (void)) (if (not (= (length G3d27@x) G3d25@n)) (assertion-violation G3d24@who '"length mismatch" G3d1e@ls G3d27@x) (void)))) G3d21@ls*)) (length G3d1e@ls)) (void)) (apply map G3d1d@proc G3d1e@ls G3d21@ls*)))) '#f))) (set! G2f49@syntax-transformer ((lambda () ((lambda (G3d2a@gen-syntax G3d2c@gen-ref G3d2e@gen-append G3d30@gen-mappend G3d32@gen-map G3d34@gen-cons G3d36@gen-vector G3d38@regen) (begin (set! G3d2a@gen-syntax (lambda (G3d9d@src G3d9e@e G3d9f@r G3da0@maps G3da1@ellipsis? G3da2@vec?) ((lambda (G3da9@t) ((lambda (G3dab@ls/false) (if (and G3dab@ls/false (apply (lambda (G3dad@dots) (G3da1@ellipsis? G3dad@dots)) G3dab@ls/false)) (apply (lambda (G3daf@dots) (G3028@syntax-violation '#f '"misplaced ellipsis in syntax form" G3d9d@src)) G3dab@ls/false) ((lambda (G3db1@t) ((lambda (G3db3@ls/false) (if (and G3db3@ls/false (apply (lambda (G3db5@id) (G2d3e@id? G3db5@id)) G3db3@ls/false)) (apply (lambda (G3db7@id) ((lambda (G3db9@label) ((lambda (G3dbb@b) ((lambda () (if (eq? (G2d60@binding-type G3dbb@b) 'syntax) (call-with-values (lambda () ((lambda (G3dbf@var.lev) (G3d2c@gen-ref G3d9d@src (car G3dbf@var.lev) (cdr G3dbf@var.lev) G3da0@maps)) (G2d62@binding-value G3dbb@b))) (lambda (G3dc1@G3dbd G3dc2@G3dbe) ((lambda (G3dc5@maps G3dc6@var) (values (list 'ref G3dc6@var) G3dc5@maps)) G3dc2@G3dbe G3dc1@G3dbd))) (values (list 'quote G3d9e@e) G3da0@maps))))) (G2d5c@label->binding G3db9@label G3d9f@r))) (G2d58@id->label G3d9e@e))) G3db3@ls/false) ((lambda (G3dc9@t) ((lambda (G3dcb@ls/false) (if (and G3dcb@ls/false (apply (lambda (G3dcd@dots G3dce@e) (G3da1@ellipsis? G3dcd@dots)) G3dcb@ls/false)) (apply (lambda (G3dd1@dots G3dd2@e) (if G3da2@vec? (G3028@syntax-violation '#f '"misplaced ellipsis in syntax form" G3d9d@src) (G3d2a@gen-syntax G3d9d@src G3dd2@e G3d9f@r G3da0@maps (lambda (G3dd5@x) '#f) '#f))) G3dcb@ls/false) ((lambda (G3dd7@t) ((lambda (G3dd9@ls/false) (if (and G3dd9@ls/false (apply (lambda (G3ddb@x G3ddc@dots G3ddd@y) (G3da1@ellipsis? G3ddc@dots)) G3dd9@ls/false)) (apply (lambda (G3de1@x G3de2@dots G3de3@y) ((letrec ((G3de7@f (lambda (G3de9@y G3dea@k) ((lambda (G3ded@t) ((lambda (G3def@ls/false) (if G3def@ls/false (apply (lambda () (G3dea@k G3da0@maps)) G3def@ls/false) ((lambda (G3df1@t) ((lambda (G3df3@ls/false) (if (and G3df3@ls/false (apply (lambda (G3df5@dots G3df6@y) (G3da1@ellipsis? G3df5@dots)) G3df3@ls/false)) (apply (lambda (G3df9@dots G3dfa@y) (G3de7@f G3dfa@y (lambda (G3dfd@maps) (call-with-values (lambda () (G3dea@k (cons '() G3dfd@maps))) (lambda (G3e01@G3dff G3e02@G3e00) ((lambda (G3e05@maps G3e06@x) (if (null? (car G3e05@maps)) (G3028@syntax-violation '#f '"extra ellipsis in syntax form" G3d9d@src) (values (G3d30@gen-mappend G3e06@x (car G3e05@maps)) (cdr G3e05@maps)))) G3e02@G3e00 G3e01@G3dff)))))) G3df3@ls/false) ((lambda (G3e09@t) ((lambda (G3e0b@ls/false) (if G3e0b@ls/false (apply (lambda () (call-with-values (lambda () (G3d2a@gen-syntax G3d9d@src G3de9@y G3d9f@r G3da0@maps G3da1@ellipsis? G3da2@vec?)) (lambda (G3e0f@G3e0d G3e10@G3e0e) ((lambda (G3e13@maps G3e14@y) (call-with-values (lambda () (G3dea@k G3e13@maps)) (lambda (G3e19@G3e17 G3e1a@G3e18) ((lambda (G3e1d@maps G3e1e@x) (values (G3d2e@gen-append G3e1e@x G3e14@y) G3e1d@maps)) G3e1a@G3e18 G3e19@G3e17)))) G3e10@G3e0e G3e0f@G3e0d)))) G3e0b@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3e09@t))) (G2f3d@syntax-dispatch G3e09@t '_))) G3df1@t))) (G2f3d@syntax-dispatch G3df1@t '(any . any)))) G3ded@t))) (G2f3d@syntax-dispatch G3ded@t '()))) G3de9@y)))) G3de7@f) G3de3@y (lambda (G3e21@maps) (call-with-values (lambda () (G3d2a@gen-syntax G3d9d@src G3de1@x G3d9f@r (cons '() G3e21@maps) G3da1@ellipsis? '#f)) (lambda (G3e25@G3e23 G3e26@G3e24) ((lambda (G3e29@maps G3e2a@x) (if (null? (car G3e29@maps)) (G3028@syntax-violation '#f '"extra ellipsis in syntax form" G3d9d@src) (values (G3d32@gen-map G3e2a@x (car G3e29@maps)) (cdr G3e29@maps)))) G3e26@G3e24 G3e25@G3e23)))))) G3dd9@ls/false) ((lambda (G3e2d@t) ((lambda (G3e2f@ls/false) (if G3e2f@ls/false (apply (lambda (G3e31@x G3e32@y) (call-with-values (lambda () (G3d2a@gen-syntax G3d9d@src G3e31@x G3d9f@r G3da0@maps G3da1@ellipsis? '#f)) (lambda (G3e37@G3e35 G3e38@G3e36) ((lambda (G3e3b@maps G3e3c@xnew) (call-with-values (lambda () (G3d2a@gen-syntax G3d9d@src G3e32@y G3d9f@r G3e3b@maps G3da1@ellipsis? G3da2@vec?)) (lambda (G3e41@G3e3f G3e42@G3e40) ((lambda (G3e45@maps G3e46@ynew) (values (G3d34@gen-cons G3d9e@e G3e31@x G3e32@y G3e3c@xnew G3e46@ynew) G3e45@maps)) G3e42@G3e40 G3e41@G3e3f)))) G3e38@G3e36 G3e37@G3e35)))) G3e2f@ls/false) ((lambda (G3e49@t) ((lambda (G3e4b@ls/false) (if G3e4b@ls/false (apply (lambda (G3e4d@ls) (call-with-values (lambda () (G3d2a@gen-syntax G3d9d@src G3e4d@ls G3d9f@r G3da0@maps G3da1@ellipsis? '#t)) (lambda (G3e51@G3e4f G3e52@G3e50) ((lambda (G3e55@maps G3e56@lsnew) (values (G3d36@gen-vector G3d9e@e G3e4d@ls G3e56@lsnew) G3e55@maps)) G3e52@G3e50 G3e51@G3e4f)))) G3e4b@ls/false) ((lambda (G3e59@t) ((lambda (G3e5b@ls/false) (if G3e5b@ls/false (apply (lambda () (values (list 'quote G3d9e@e) G3da0@maps)) G3e5b@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3e59@t))) (G2f3d@syntax-dispatch G3e59@t '_))) G3e49@t))) (G2f3d@syntax-dispatch G3e49@t '#(vector each-any)))) G3e2d@t))) (G2f3d@syntax-dispatch G3e2d@t '(any . any)))) G3dd7@t))) (G2f3d@syntax-dispatch G3dd7@t '(any any . any)))) G3dc9@t))) (G2f3d@syntax-dispatch G3dc9@t '(any any)))) G3db1@t))) (G2f3d@syntax-dispatch G3db1@t 'any))) G3da9@t))) (G2f3d@syntax-dispatch G3da9@t 'any))) G3d9e@e))) (set! G3d2c@gen-ref (lambda (G3d85@src G3d86@var G3d87@level G3d88@maps) (if (= G3d87@level '0) (values G3d86@var G3d88@maps) (if (null? G3d88@maps) (G3028@syntax-violation '#f '"missing ellipsis in syntax form" G3d85@src) (call-with-values (lambda () (G3d2c@gen-ref G3d85@src G3d86@var (- G3d87@level '1) (cdr G3d88@maps))) (lambda (G3d8f@G3d8d G3d90@G3d8e) ((lambda (G3d93@outer-maps G3d94@outer-var) ((lambda (G3d97@t) (if G3d97@t ((lambda (G3d99@b) (values (cdr G3d99@b) G3d88@maps)) G3d97@t) ((lambda (G3d9b@inner-var) (values G3d9b@inner-var (cons (cons (cons G3d94@outer-var G3d9b@inner-var) (car G3d88@maps)) G3d93@outer-maps))) (G2cbe@gen-lexical 'tmp)))) (assq G3d94@outer-var (car G3d88@maps)))) G3d90@G3d8e G3d8f@G3d8d))))))) (set! G3d2e@gen-append (lambda (G3d81@x G3d82@y) (if (fast-equal? G3d82@y ''()) G3d81@x (list 'append G3d81@x G3d82@y)))) (set! G3d30@gen-mappend (lambda (G3d7d@e G3d7e@map-env) (list 'apply '(primitive append) (G3d32@gen-map G3d7d@e G3d7e@map-env)))) (set! G3d32@gen-map (lambda (G3d6b@e G3d6c@map-env) ((lambda (G3d6f@formals G3d70@actuals) (if (eq? (car G3d6b@e) 'ref) (car G3d70@actuals) (if (for-all (lambda (G3d73@x) (and (eq? (car G3d73@x) 'ref) (memq (cadr G3d73@x) G3d6f@formals))) (cdr G3d6b@e)) ((lambda (G3d75@args) (cons 'map (cons (list 'primitive (car G3d6b@e)) G3d75@args))) (map ((lambda (G3d77@r) (lambda (G3d79@x) (cdr (assq (cadr G3d79@x) G3d77@r)))) (map cons G3d6f@formals G3d70@actuals)) (cdr G3d6b@e))) (cons* 'map (list 'lambda G3d6f@formals G3d6b@e) G3d70@actuals)))) (map cdr G3d6c@map-env) (map (lambda (G3d7b@x) (list 'ref (car G3d7b@x))) G3d6c@map-env)))) (set! G3d34@gen-cons (lambda (G3d5b@e G3d5c@x G3d5d@y G3d5e@xnew G3d5f@ynew) ((lambda (G3d65@t) (if (memv G3d65@t '(quote)) (if (eq? (car G3d5e@xnew) 'quote) ((lambda (G3d67@xnew G3d68@ynew) (if (and (eq? G3d67@xnew G3d5c@x) (eq? G3d68@ynew G3d5d@y)) (list 'quote G3d5b@e) (list 'quote (cons G3d67@xnew G3d68@ynew)))) (cadr G3d5e@xnew) (cadr G3d5f@ynew)) (if (null? (cadr G3d5f@ynew)) (list 'list G3d5e@xnew) (list 'cons G3d5e@xnew G3d5f@ynew))) (if (memv G3d65@t '(list)) (cons 'list (cons G3d5e@xnew (cdr G3d5f@ynew))) (list 'cons G3d5e@xnew G3d5f@ynew)))) (car G3d5f@ynew)))) (set! G3d36@gen-vector (lambda (G3d55@e G3d56@ls G3d57@lsnew) (if (eq? (car G3d57@lsnew) 'quote) (if (eq? (cadr G3d57@lsnew) G3d56@ls) (list 'quote G3d55@e) (list 'quote (list->vector (cadr G3d57@lsnew)))) (if (eq? (car G3d57@lsnew) 'list) (cons 'vector (cdr G3d57@lsnew)) (list 'list->vector G3d57@lsnew))))) (set! G3d38@regen (lambda (G3d4f@x) ((lambda (G3d51@t) (if (memv G3d51@t '(ref)) (cadr G3d4f@x) (if (memv G3d51@t '(primitive)) (list 'primitive (cadr G3d4f@x)) (if (memv G3d51@t '(quote)) (list 'quote (cadr G3d4f@x)) (if (memv G3d51@t '(lambda)) (G2c9c@G2bda@build-lambda '#f (cadr G3d4f@x) (G3d38@regen (caddr G3d4f@x))) (if (memv G3d51@t '(map)) ((lambda (G3d53@ls) (cons '(primitive ellipsis-map) G3d53@ls)) (map G3d38@regen (cdr G3d4f@x))) (cons (list 'primitive (car G3d4f@x)) (map G3d38@regen (cdr G3d4f@x))))))))) (car G3d4f@x)))) (lambda (G3d39@e G3d3a@r G3d3b@mr) ((lambda (G3d3f@t) ((lambda (G3d41@ls/false) (if G3d41@ls/false (apply (lambda (G3d43@x) (call-with-values (lambda () (G3d2a@gen-syntax G3d39@e G3d43@x G3d3a@r '() G2f3f@ellipsis? '#f)) (lambda (G3d47@G3d45 G3d48@G3d46) ((lambda (G3d4b@maps G3d4c@e) (G3d38@regen G3d4c@e)) G3d48@G3d46 G3d47@G3d45)))) G3d41@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3d3f@t))) (G2f3d@syntax-dispatch G3d3f@t '(_ any)))) G3d39@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f4b@core-macro-transformer (lambda (G3e5d@name) ((lambda (G3e5f@t) (if (memv G3e5f@t '(quote)) G2eed@quote-transformer (if (memv G3e5f@t '(lambda)) G2ef1@lambda-transformer (if (memv G3e5f@t '(case-lambda)) G2eef@case-lambda-transformer (if (memv G3e5f@t '(letrec)) G2ed5@letrec-transformer (if (memv G3e5f@t '(letrec*)) G2ed7@letrec*-transformer (if (memv G3e5f@t '(if)) G2ee5@if-transformer (if (memv G3e5f@t '(and)) G2ee7@and-transformer (if (memv G3e5f@t '(or)) G2ee9@or-transformer (if (memv G3e5f@t '(foreign-call)) G2f39@foreign-call-transformer (if (memv G3e5f@t '(syntax-case)) G2f45@syntax-case-transformer (if (memv G3e5f@t '(syntax)) G2f49@syntax-transformer (if (memv G3e5f@t '(type-descriptor)) G2edb@type-descriptor-transformer (if (memv G3e5f@t '(record-type-descriptor)) G2edd@record-type-descriptor-transformer (if (memv G3e5f@t '(record-constructor-descriptor)) G2edf@record-constructor-descriptor-transformer (if (memv G3e5f@t '(fluid-let-syntax)) G2ed9@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e5d@name))))))))))))))))) G3e5d@name))) (set! G2f4d@file-options-macro (lambda (G3e61@x) ((lambda (G3e64@valid-option?) (begin (set! G3e64@valid-option? (lambda (G3e6d@x) (and (G2d3e@id? G3e6d@x) (memq (G2d40@id->sym G3e6d@x) '(no-fail no-create no-truncate))))) ((lambda (G3e65@t) ((lambda (G3e67@ls/false) (if (and G3e67@ls/false (apply (lambda (G3e69@opt*) (and (for-all G3e64@valid-option? G3e69@opt*) (G28df@G2880@file-options-spec (map G2d40@id->sym G3e69@opt*)))) G3e67@ls/false)) (apply (lambda (G3e6b@opt*) (G2ef3@bless (list 'quote (G28df@G2880@file-options-spec (map G2d40@id->sym G3e6b@opt*))))) G3e67@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3e65@t))) (G2f3d@syntax-dispatch G3e65@t '(_ . each-any)))) G3e61@x))) '#f))) (set! G2f4f@symbol-macro (lambda (G3e6f@x G3e70@set) ((lambda (G3e73@t) ((lambda (G3e75@ls/false) (if (and G3e75@ls/false (apply (lambda (G3e77@name) (and (G2d3e@id? G3e77@name) (memq (G2d40@id->sym G3e77@name) G3e70@set))) G3e75@ls/false)) (apply (lambda (G3e79@name) (G2ef3@bless (list 'quote G3e79@name))) G3e75@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3e73@t))) (G2f3d@syntax-dispatch G3e73@t '(_ any)))) G3e6f@x))) (set! G2f51@macro-transformer (lambda (G3e7b@x) (if (procedure? G3e7b@x) G3e7b@x (if (symbol? G3e7b@x) ((lambda (G3e7d@t) (if (memv G3e7d@t '(define-record-type)) G2f31@define-record-type-macro (if (memv G3e7d@t '(define-struct)) G2f2f@define-struct-macro (if (memv G3e7d@t '(include)) G2f25@include-macro (if (memv G3e7d@t '(cond)) G2f21@cond-macro (if (memv G3e7d@t '(let)) G2ef9@let-macro (if (memv G3e7d@t '(do)) G2f19@do-macro (if (memv G3e7d@t '(or)) G2f1d@or-macro (if (memv G3e7d@t '(and)) G2f1f@and-macro (if (memv G3e7d@t '(let*)) G2f1b@let*-macro (if (memv G3e7d@t '(let-values)) G2efb@let-values-macro (if (memv G3e7d@t '(let*-values)) G2efd@let*-values-macro (if (memv G3e7d@t '(syntax-rules)) G2f29@syntax-rules-macro (if (memv G3e7d@t '(quasiquote)) G2f2b@quasiquote-macro (if (memv G3e7d@t '(quasisyntax)) G2f2d@quasisyntax-macro (if (memv G3e7d@t '(with-syntax)) G2ef5@with-syntax-macro (if (memv G3e7d@t '(when)) G2ee1@when-macro (if (memv G3e7d@t '(unless)) G2ee3@unless-macro (if (memv G3e7d@t '(case)) G2eeb@case-macro (if (memv G3e7d@t '(identifier-syntax)) G2f17@identifier-syntax-macro (if (memv G3e7d@t '(time)) G2f0f@time-macro (if (memv G3e7d@t '(delay)) G2f11@delay-macro (if (memv G3e7d@t '(assert)) G2f13@assert-macro (if (memv G3e7d@t '(endianness)) G2f15@endianness-macro (if (memv G3e7d@t '(guard)) G2f0b@guard-macro (if (memv G3e7d@t '(define-enumeration)) G2f0d@define-enumeration-macro (if (memv G3e7d@t '(trace-lambda)) G2eff@trace-lambda-macro (if (memv G3e7d@t '(trace-define)) G2f01@trace-define-macro (if (memv G3e7d@t '(trace-define-syntax)) G2f03@trace-define-syntax-macro (if (memv G3e7d@t '(trace-let-syntax)) G2f07@trace-let-syntax-macro (if (memv G3e7d@t '(trace-letrec-syntax)) G2f09@trace-letrec-syntax-macro (if (memv G3e7d@t '(define-condition-type)) G2f33@define-condition-type-macro (if (memv G3e7d@t '(parameterize)) G2f37@parameterize-macro (if (memv G3e7d@t '(include-into)) G2f27@include-into-macro (if (memv G3e7d@t '(eol-style)) (lambda (G3e7f@x) (G2f4f@symbol-macro G3e7f@x '(none lf cr crlf nel crnel ls))) (if (memv G3e7d@t '(error-handling-mode)) (lambda (G3e81@x) (G2f4f@symbol-macro G3e81@x '(ignore raise replace))) (if (memv G3e7d@t '(buffer-mode)) (lambda (G3e83@x) (G2f4f@symbol-macro G3e83@x '(none line block))) (if (memv G3e7d@t '(file-options)) G2f4d@file-options-macro (if (memv G3e7d@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f35@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3e7b@x)))))))))))))))))))))))))))))))))))))))) G3e7b@x) (error 'core-macro-transformer '"BUG: invalid macro" G3e7b@x))))) (set! G2f53@local-macro-transformer (lambda (G3e85@x) (car G3e85@x))) (set! G2f55@do-macro-call (lambda (G3e87@transformer G3e88@expr) ((lambda (G3e8b@out) (begin ((letrec ((G3e8d@f (lambda (G3e8f@x) (if (not (G2d06@stx? G3e8f@x)) (if (pair? G3e8f@x) (begin (G3e8d@f (car G3e8f@x)) (G3e8d@f (cdr G3e8f@x))) (if (vector? G3e8f@x) (vector-for-each G3e8d@f G3e8f@x) (if (symbol? G3e8f@x) (G3028@syntax-violation '#f '"raw symbol encountered in output of macro" G3e88@expr G3e8f@x) (void)))) (void))))) G3e8d@f) G3e8b@out) (G2d28@add-mark (G2d1e@gen-mark) G3e8b@out G3e88@expr))) (G3e87@transformer (G2d28@add-mark G2d20@anti-mark G3e88@expr '#f))))) (set! G2f57@chi-macro (lambda (G3e91@p G3e92@e) (G2f55@do-macro-call (G2f51@macro-transformer G3e91@p) G3e92@e))) (set! G2f59@chi-local-macro (lambda (G3e95@p G3e96@e) (G2f55@do-macro-call (G2f53@local-macro-transformer G3e95@p) G3e96@e))) (set! G2f5b@chi-global-macro (lambda (G3e99@p G3e9a@e) ((lambda (G3e9d@lib G3e9e@loc) (begin (G2b5a@G2a02@visit-library G3e9d@lib) ((lambda (G3ea1@x) ((lambda (G3ea3@transformer) (G2f55@do-macro-call G3ea3@transformer G3e9a@e)) (if (procedure? G3ea1@x) G3ea1@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ea1@x)))) (symbol-value G3e9e@loc)))) (car G3e99@p) (cdr G3e99@p)))) (set! G2f5d@chi-expr* (lambda (G3ea5@e* G3ea6@r G3ea7@mr) (if (null? G3ea5@e*) '() ((lambda (G3eab@e) (cons G3eab@e (G2f5d@chi-expr* (cdr G3ea5@e*) G3ea6@r G3ea7@mr))) (G2f61@chi-expr (car G3ea5@e*) G3ea6@r G3ea7@mr))))) (set! G2f5f@chi-application (lambda (G3ead@e G3eae@r G3eaf@mr) ((lambda (G3eb3@t) ((lambda (G3eb5@ls/false) (if G3eb5@ls/false (apply (lambda (G3eb7@rator G3eb8@rands) ((lambda (G3ebb@rator) (cons G3ebb@rator (G2f5d@chi-expr* G3eb8@rands G3eae@r G3eaf@mr))) (G2f61@chi-expr G3eb7@rator G3eae@r G3eaf@mr))) G3eb5@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3eb3@t))) (G2f3d@syntax-dispatch G3eb3@t '(any . each-any)))) G3ead@e))) (set! G2f61@chi-expr (lambda (G3ebd@e G3ebe@r G3ebf@mr) (call-with-values (lambda () (G2d66@syntax-type G3ebd@e G3ebe@r)) (lambda (G3ec6@G3ec3 G3ec7@G3ec4 G3ec8@G3ec5) ((lambda (G3ecc@kwd G3ecd@value G3ece@type) ((lambda (G3ed2@t) (if (memv G3ed2@t '(core-macro)) ((lambda (G3ed4@transformer) (G3ed4@transformer G3ebd@e G3ebe@r G3ebf@mr)) (G2f4b@core-macro-transformer G3ecd@value)) (if (memv G3ed2@t '(global)) ((lambda (G3ed6@lib) ((lambda (G3ed8@loc) ((lambda () (begin ((G2faa@inv-collector) G3ed6@lib) G3ed8@loc)))) (cdr G3ecd@value))) (car G3ecd@value)) (if (memv G3ed2@t '(core-prim)) ((lambda (G3eda@name) (list 'primitive G3eda@name)) G3ecd@value) (if (memv G3ed2@t '(call)) (G2f5f@chi-application G3ebd@e G3ebe@r G3ebf@mr) (if (memv G3ed2@t '(lexical)) ((lambda (G3edc@lex) G3edc@lex) (G2ec9@lexical-var G3ecd@value)) (if (memv G3ed2@t '(global-macro global-macro!)) (G2f61@chi-expr (G2f5b@chi-global-macro G3ecd@value G3ebd@e) G3ebe@r G3ebf@mr) (if (memv G3ed2@t '(local-macro local-macro!)) (G2f61@chi-expr (G2f59@chi-local-macro G3ecd@value G3ebd@e) G3ebe@r G3ebf@mr) (if (memv G3ed2@t '(macro macro!)) (G2f61@chi-expr (G2f57@chi-macro G3ecd@value G3ebd@e) G3ebe@r G3ebf@mr) (if (memv G3ed2@t '(constant)) ((lambda (G3ede@datum) (list 'quote G3ede@datum)) G3ecd@value) (if (memv G3ed2@t '(set!)) (G2f63@chi-set! G3ebd@e G3ebe@r G3ebf@mr) (if (memv G3ed2@t '(begin)) ((lambda (G3ee0@t) ((lambda (G3ee2@ls/false) (if G3ee2@ls/false (apply (lambda (G3ee4@x G3ee5@x*) (G2c9f@G2c10@build-sequence '#f (G2f5d@chi-expr* (cons G3ee4@x G3ee5@x*) G3ebe@r G3ebf@mr))) G3ee2@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3ee0@t))) (G2f3d@syntax-dispatch G3ee0@t '(_ any . each-any)))) G3ebd@e) (if (memv G3ed2@t '(let-syntax letrec-syntax)) ((lambda (G3ee8@t) ((lambda (G3eea@ls/false) (if (and G3eea@ls/false (apply (lambda (G3eec@xlhs* G3eed@xrhs* G3eee@xbody G3eef@xbody*) (if (not (G2d48@valid-bound-ids? G3eec@xlhs*)) (G3028@syntax-violation '#f '"invalid identifiers" G3ebd@e) (void))) G3eea@ls/false)) (apply (lambda (G3ef4@xlhs* G3ef5@xrhs* G3ef6@xbody G3ef7@xbody*) ((lambda (G3efc@xlab*) ((lambda (G3efe@xrib) ((lambda (G3f00@xb*) ((lambda () (G2c9f@G2c10@build-sequence '#f (G2f5d@chi-expr* (map (lambda (G3f02@x) (G2d2a@add-subst G3efe@xrib G3f02@x)) (cons G3ef6@xbody G3ef7@xbody*)) (append (map cons G3efc@xlab* G3f00@xb*) G3ebe@r) (append (map cons G3efc@xlab* G3f00@xb*) G3ebf@mr)))))) (map (lambda (G3f04@x) (G2d7e@make-eval-transformer (G2f9c@expand-transformer (if (eq? G3ece@type 'let-syntax) G3f04@x (G2d2a@add-subst G3efe@xrib G3f04@x)) G3ebf@mr))) G3ef5@xrhs*))) (G2cf9@make-full-rib G3ef4@xlhs* G3efc@xlab*))) (map G2cc2@gen-label G3ef4@xlhs*))) G3eea@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3ee8@t))) (G2f3d@syntax-dispatch G3ee8@t '(_ #(each (any any)) any . each-any)))) G3ebd@e) (if (memv G3ed2@t '(displaced-lexical)) (G3028@syntax-violation '#f '"identifier out of context" G3ebd@e) (if (memv G3ed2@t '(syntax)) (G3028@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ebd@e) (if (memv G3ed2@t '(define define-syntax module import library)) (G3028@syntax-violation '#f (string-append ((lambda (G3f06@t) (if (memv G3f06@t '(define)) '"a definition" (if (memv G3f06@t '(define-syntax)) '"a define-syntax" (if (memv G3f06@t '(module)) '"a module definition" (if (memv G3f06@t '(library)) '"a library definition" (if (memv G3f06@t '(import)) '"an import declaration" (if (memv G3f06@t '(export)) '"an export declaration" '"a non-expression"))))))) G3ece@type) '" was found where an expression was expected") G3ebd@e) (if (memv G3ed2@t '(mutable)) (G3028@syntax-violation '#f '"attempt to reference an unexportable variable" G3ebd@e) (G3028@syntax-violation '#f '"invalid expression" G3ebd@e)))))))))))))))))) G3ece@type)) G3ec8@G3ec5 G3ec7@G3ec4 G3ec6@G3ec3))))) (set! G2f63@chi-set! (lambda (G3f08@e G3f09@r G3f0a@mr) ((lambda (G3f0e@t) ((lambda (G3f10@ls/false) (if (and G3f10@ls/false (apply (lambda (G3f12@x G3f13@v) (G2d3e@id? G3f12@x)) G3f10@ls/false)) (apply (lambda (G3f16@x G3f17@v) (call-with-values (lambda () (G2d66@syntax-type G3f16@x G3f09@r)) (lambda (G3f1d@G3f1a G3f1e@G3f1b G3f1f@G3f1c) ((lambda (G3f23@kwd G3f24@value G3f25@type) ((lambda (G3f29@t) (if (memv G3f29@t '(lexical)) (begin (G2ecd@set-lexical-mutable! G3f24@value '#t) (list 'set! (G2ec9@lexical-var G3f24@value) (G2f61@chi-expr G3f17@v G3f09@r G3f0a@mr))) (if (memv G3f29@t '(core-prim)) (G3028@syntax-violation '#f '"cannot modify imported core primitive" G3f08@e) (if (memv G3f29@t '(global)) (G3028@syntax-violation '#f '"attempt to modify imported binding" G3f08@e) (if (memv G3f29@t '(global-macro!)) (G2f61@chi-expr (G2f5b@chi-global-macro G3f24@value G3f08@e) G3f09@r G3f0a@mr) (if (memv G3f29@t '(local-macro!)) (G2f61@chi-expr (G2f59@chi-local-macro G3f24@value G3f08@e) G3f09@r G3f0a@mr) (if (memv G3f29@t '(mutable)) (G3028@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f08@e) (G3028@syntax-violation '#f '"invalid syntax" G3f08@e)))))))) G3f25@type)) G3f1f@G3f1c G3f1e@G3f1b G3f1d@G3f1a)))) G3f10@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3f0e@t))) (G2f3d@syntax-dispatch G3f0e@t '(_ any any)))) G3f08@e))) (set! G2f65@verify-formals (lambda (G3f2b@fmls G3f2c@stx) ((lambda (G3f2f@t) ((lambda (G3f31@ls/false) (if G3f31@ls/false (apply (lambda (G3f33@x*) (if (not (G2d48@valid-bound-ids? G3f33@x*)) (G2ef7@invalid-fmls-error G3f2c@stx G3f2b@fmls) (void))) G3f31@ls/false) ((lambda (G3f35@t) ((lambda (G3f37@ls/false) (if G3f37@ls/false (apply (lambda (G3f39@x* G3f3a@x) (if (not (G2d48@valid-bound-ids? (cons G3f3a@x G3f39@x*))) (G2ef7@invalid-fmls-error G3f2c@stx G3f2b@fmls) (void))) G3f37@ls/false) ((lambda (G3f3d@t) ((lambda (G3f3f@ls/false) (if G3f3f@ls/false (apply (lambda () (G3028@syntax-violation '#f '"invalid syntax" G3f2c@stx)) G3f3f@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3f3d@t))) (G2f3d@syntax-dispatch G3f3d@t '_))) G3f35@t))) (G2f3d@syntax-dispatch G3f35@t '#(each+ any () any)))) G3f2f@t))) (G2f3d@syntax-dispatch G3f2f@t 'each-any))) G3f2b@fmls))) (set! G2f67@chi-lambda-clause (lambda (G3f41@stx G3f42@fmls G3f43@body* G3f44@r G3f45@mr) ((lambda (G3f4b@t) ((lambda (G3f4d@ls/false) (if G3f4d@ls/false (apply (lambda (G3f4f@x*) (begin (G2f65@verify-formals G3f42@fmls G3f41@stx) ((lambda (G3f51@lex* G3f52@lab*) (values G3f51@lex* (G2f77@chi-internal (G2d2a@add-subst (G2cf9@make-full-rib G3f4f@x* G3f52@lab*) G3f43@body*) (G2ed1@add-lexicals G3f52@lab* G3f51@lex* G3f44@r) G3f45@mr))) (map G2cbe@gen-lexical G3f4f@x*) (map G2cc2@gen-label G3f4f@x*)))) G3f4d@ls/false) ((lambda (G3f55@t) ((lambda (G3f57@ls/false) (if G3f57@ls/false (apply (lambda (G3f59@x* G3f5a@x) (begin (G2f65@verify-formals G3f42@fmls G3f41@stx) ((lambda (G3f5d@lex* G3f5e@lab* G3f5f@lex G3f60@lab) (values (append G3f5d@lex* G3f5f@lex) (G2f77@chi-internal (G2d2a@add-subst (G2cf9@make-full-rib (cons G3f5a@x G3f59@x*) (cons G3f60@lab G3f5e@lab*)) G3f43@body*) (G2ed1@add-lexicals (cons G3f60@lab G3f5e@lab*) (cons G3f5f@lex G3f5d@lex*) G3f44@r) G3f45@mr))) (map G2cbe@gen-lexical G3f59@x*) (map G2cc2@gen-label G3f59@x*) (G2cbe@gen-lexical G3f5a@x) (G2cc2@gen-label G3f5a@x)))) G3f57@ls/false) ((lambda (G3f65@t) ((lambda (G3f67@ls/false) (if G3f67@ls/false (apply (lambda () (G3028@syntax-violation '#f '"invalid syntax" G3f42@fmls)) G3f67@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G3f65@t))) (G2f3d@syntax-dispatch G3f65@t '_))) G3f55@t))) (G2f3d@syntax-dispatch G3f55@t '#(each+ any () any)))) G3f4b@t))) (G2f3d@syntax-dispatch G3f4b@t 'each-any))) G3f42@fmls))) (set! G2f69@chi-lambda-clause* (lambda (G3f69@stx G3f6a@fmls* G3f6b@body** G3f6c@r G3f6d@mr) (if (null? G3f6a@fmls*) (values '() '()) (call-with-values (lambda () (G2f67@chi-lambda-clause G3f69@stx (car G3f6a@fmls*) (car G3f6b@body**) G3f6c@r G3f6d@mr)) (lambda (G3f75@G3f73 G3f76@G3f74) ((lambda (G3f79@b G3f7a@a) (call-with-values (lambda () (G2f69@chi-lambda-clause* G3f69@stx (cdr G3f6a@fmls*) (cdr G3f6b@body**) G3f6c@r G3f6d@mr)) (lambda (G3f7f@G3f7d G3f80@G3f7e) ((lambda (G3f83@b* G3f84@a*) (values (cons G3f7a@a G3f84@a*) (cons G3f79@b G3f83@b*))) G3f80@G3f7e G3f7f@G3f7d)))) G3f76@G3f74 G3f75@G3f73)))))) (set! G2f6b@chi-defun (lambda (G3f87@x G3f88@r G3f89@mr) ((lambda (G3f8d@fmls G3f8e@body*) (call-with-values (lambda () (G2f67@chi-lambda-clause G3f8d@fmls G3f8d@fmls G3f8e@body* G3f88@r G3f89@mr)) (lambda (G3f93@G3f91 G3f94@G3f92) ((lambda (G3f97@body G3f98@fmls) (G2c9c@G2bda@build-lambda '#f G3f98@fmls G3f97@body)) G3f94@G3f92 G3f93@G3f91)))) (car G3f87@x) (cdr G3f87@x)))) (set! G2f6d@chi-rhs (lambda (G3f9b@rhs G3f9c@r G3f9d@mr) ((lambda (G3fa1@t) (if (memv G3fa1@t '(defun)) (G2f6b@chi-defun (cdr G3f9b@rhs) G3f9c@r G3f9d@mr) (if (memv G3fa1@t '(expr)) ((lambda (G3fa3@expr) (G2f61@chi-expr G3fa3@expr G3f9c@r G3f9d@mr)) (cdr G3f9b@rhs)) (if (memv G3fa1@t '(top-expr)) ((lambda (G3fa5@expr) (G2c9f@G2c10@build-sequence '#f (list (G2f61@chi-expr G3fa5@expr G3f9c@r G3f9d@mr) (G2ca0@G2c12@build-void)))) (cdr G3f9b@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3f9b@rhs))))) (car G3f9b@rhs)))) (set! G2f6f@expand-interaction-rhs*/init* (lambda (G3fa7@lhs* G3fa8@rhs* G3fa9@init* G3faa@r G3fab@mr) ((letrec ((G3fb1@f (lambda (G3fb3@lhs* G3fb4@rhs*) (if (null? G3fb3@lhs*) (map (lambda (G3fb7@x) (G2f61@chi-expr G3fb7@x G3faa@r G3fab@mr)) G3fa9@init*) ((lambda (G3fb9@lhs G3fba@rhs) ((lambda (G3fbd@t) (if (memv G3fbd@t '(defun)) ((lambda (G3fbf@rhs) (cons (list 'set! G3fb9@lhs G3fbf@rhs) (G3fb1@f (cdr G3fb3@lhs*) (cdr G3fb4@rhs*)))) (G2f6b@chi-defun (cdr G3fba@rhs) G3faa@r G3fab@mr)) (if (memv G3fbd@t '(expr)) ((lambda (G3fc1@rhs) (cons (list 'set! G3fb9@lhs G3fc1@rhs) (G3fb1@f (cdr G3fb3@lhs*) (cdr G3fb4@rhs*)))) (G2f61@chi-expr (cdr G3fba@rhs) G3faa@r G3fab@mr)) (if (memv G3fbd@t '(top-expr)) ((lambda (G3fc3@e) (cons G3fc3@e (G3fb1@f (cdr G3fb3@lhs*) (cdr G3fb4@rhs*)))) (G2f61@chi-expr (cdr G3fba@rhs) G3faa@r G3fab@mr)) (error 'expand-interaction '"invallid" G3fba@rhs))))) (car G3fba@rhs))) (car G3fb3@lhs*) (car G3fb4@rhs*)))))) G3fb1@f) G3fa7@lhs* G3fa8@rhs*))) (set! G2f71@chi-rhs* (lambda (G3fc5@rhs* G3fc6@r G3fc7@mr) ((letrec ((G3fcb@f (lambda (G3fcd@ls) (if (null? G3fcd@ls) '() ((lambda (G3fcf@a) (cons G3fcf@a (G3fcb@f (cdr G3fcd@ls)))) (G2f6d@chi-rhs (car G3fcd@ls) G3fc6@r G3fc7@mr)))))) G3fcb@f) G3fc5@rhs*))) (set! G2f73@find-bound=? (lambda (G3fd1@x G3fd2@lhs* G3fd3@rhs*) (if (null? G3fd2@lhs*) '#f (if (G2d44@bound-id=? G3fd1@x (car G3fd2@lhs*)) (car G3fd3@rhs*) (G2f73@find-bound=? G3fd1@x (cdr G3fd2@lhs*) (cdr G3fd3@rhs*)))))) (set! G2f75@find-dups (lambda (G3fd7@ls) ((letrec ((G3fd9@f (lambda (G3fdb@ls G3fdc@dups) (if (null? G3fdb@ls) G3fdc@dups ((lambda (G3fdf@t) (if G3fdf@t ((lambda (G3fe1@x) (G3fd9@f (cdr G3fdb@ls) (cons (list (car G3fdb@ls) G3fe1@x) G3fdc@dups))) G3fdf@t) (G3fd9@f (cdr G3fdb@ls) G3fdc@dups))) (G2f73@find-bound=? (car G3fdb@ls) (cdr G3fdb@ls) (cdr G3fdb@ls))))))) G3fd9@f) G3fd7@ls '()))) (set! G2f77@chi-internal (lambda (G3fe3@e* G3fe4@r G3fe5@mr) ((lambda (G3fe9@rib) (call-with-values (lambda () (G2f9a@chi-body* (map (lambda (G3ff3@x) (G2d2a@add-subst G3fe9@rib G3ff3@x)) (G2d3c@syntax->list G3fe3@e*)) G3fe4@r G3fe5@mr '() '() '() '() '() G3fe9@rib '#f)) (lambda (G3ff5@G3feb G3ff6@G3fec G3ff7@G3fed G3ff8@G3fee G3ff9@G3fef G3ffa@G3ff0 G3ffb@G3ff1 G3ffc@G3ff2) ((lambda (G4005@_exp* G4006@kwd* G4007@mod** G4008@rhs* G4009@lex* G400a@mr G400b@r G400c@e*) (begin (if (null? G400c@e*) (G3028@syntax-violation '#f '"no expression in body" G400c@e*) (void)) ((lambda (G4015@init*) ((lambda (G4017@rhs*) ((lambda () (G2ca2@G2c16@build-letrec* '#f (reverse G4009@lex*) (reverse G4017@rhs*) (G2c9f@G2c10@build-sequence '#f G4015@init*))))) (G2f71@chi-rhs* G4008@rhs* G400b@r G400a@mr))) (G2f5d@chi-expr* (append (apply append (reverse G4007@mod**)) G400c@e*) G400b@r G400a@mr)))) G3ffc@G3ff2 G3ffb@G3ff1 G3ffa@G3ff0 G3ff9@G3fef G3ff8@G3fee G3ff7@G3fed G3ff6@G3fec G3ff5@G3feb)))) (G2ced@make-empty-rib)))) (set! G2f79@parse-module (lambda (G4019@e) ((lambda (G401b@t) ((lambda (G401d@ls/false) (if G401d@ls/false (apply (lambda (G401f@export* G4020@b*) (begin (if (not (for-all G2d3e@id? G401f@export*)) (G3028@syntax-violation '#f '"module exports must be identifiers" G4019@e) (void)) (values '#f (list->vector G401f@export*) G4020@b*))) G401d@ls/false) ((lambda (G4023@t) ((lambda (G4025@ls/false) (if G4025@ls/false (apply (lambda (G4027@name G4028@export* G4029@b*) (begin (if (not (G2d3e@id? G4027@name)) (G3028@syntax-violation '#f '"module name must be an identifier" G4019@e) (void)) (if (not (for-all G2d3e@id? G4028@export*)) (G3028@syntax-violation '#f '"module exports must be identifiers" G4019@e) (void)) (values G4027@name (list->vector G4028@export*) G4029@b*))) G4025@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G4023@t))) (G2f3d@syntax-dispatch G4023@t '(_ any each-any . each-any)))) G401b@t))) (G2f3d@syntax-dispatch G401b@t '(_ each-any . each-any)))) G4019@e))) (set! G2f7f@G2f7a (make-record-type-descriptor 'module-interface '#f 'G2f7d '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2f81@G2f7c '#f) (set! G2f83@G2f7b (make-record-constructor-descriptor G2f7f@G2f7a '#f G2f81@G2f7c)) (set! G2f86@module-interface? (record-predicate G2f7f@G2f7a)) (set! G2f88@make-module-interface (record-constructor G2f83@G2f7b)) (set! G2f8a@module-interface-first-mark (record-accessor G2f7f@G2f7a '0)) (set! G2f8c@module-interface-exp-id-vec (record-accessor G2f7f@G2f7a '1)) (set! G2f8e@module-interface-exp-lab-vec (record-accessor G2f7f@G2f7a '2)) (set! G2f90@set-module-interface-first-mark! (record-mutator G2f7f@G2f7a '0)) (set! G2f92@set-module-interface-exp-id-vec! (record-mutator G2f7f@G2f7a '1)) (set! G2f94@set-module-interface-exp-lab-vec! (record-mutator G2f7f@G2f7a '2)) (set! G2f96@module-interface-exp-id* (lambda (G402d@iface G402e@id) ((lambda (G4032@diff-marks) (begin (set! G4032@diff-marks (lambda (G4039@ls G403a@x) (begin (if (null? G4039@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G403d@a) (if (eq? G403d@a G403a@x) '() (cons G403d@a (G4032@diff-marks (cdr G4039@ls) G403a@x)))) (car G4039@ls))))) ((lambda (G4033@diff G4034@id-vec) (if (null? G4033@diff) G4034@id-vec (vector-map (lambda (G4037@x) (G2d08@make-stx (G2d0a@stx-expr G4037@x) (append G4033@diff (G2d0c@stx-mark* G4037@x)) '() '())) G4034@id-vec))) (G4032@diff-marks (G2d0c@stx-mark* G402e@id) (G2f8a@module-interface-first-mark G402d@iface)) (G2f8c@module-interface-exp-id-vec G402d@iface)))) '#f))) (set! G2f98@chi-internal-module (lambda (G403f@e G4040@r G4041@mr G4042@lex* G4043@rhs* G4044@mod** G4045@kwd*) (call-with-values (lambda () (G2f79@parse-module G403f@e)) (lambda (G4050@G404d G4051@G404e G4052@G404f) ((lambda (G4056@e* G4057@exp-id* G4058@name) ((lambda (G405c@rib) ((lambda (G405e@e*) ((lambda () (call-with-values (lambda () (G2f9a@chi-body* G405e@e* G4040@r G4041@mr G4042@lex* G4043@rhs* G4044@mod** G4045@kwd* '() G405c@rib '#f)) (lambda (G4068@G4060 G4069@G4061 G406a@G4062 G406b@G4063 G406c@G4064 G406d@G4065 G406e@G4066 G406f@G4067) ((lambda (G4078@_exp* G4079@kwd* G407a@mod** G407b@rhs* G407c@lex* G407d@mr G407e@r G407f@e*) ((lambda (G4088@exp-lab* G4089@mod**) (if (not G4058@name) (values G407c@lex* G407b@rhs* G4057@exp-id* G4088@exp-lab* G407e@r G407d@mr G4089@mod** G4079@kwd*) ((lambda (G408c@lab G408d@iface) (values G407c@lex* G407b@rhs* (vector G4058@name) (vector G408c@lab) (cons (cons G408c@lab (cons '$module G408d@iface)) G407e@r) (cons (cons G408c@lab (cons '$module G408d@iface)) G407d@mr) G4089@mod** G4079@kwd*)) (G2cc2@gen-label 'module) (G2f88@make-module-interface (car (G2d0c@stx-mark* G4058@name)) (vector-map (lambda (G4090@x) (G2d08@make-stx (G2d0a@stx-expr G4090@x) (G2d0c@stx-mark* G4090@x) '() '())) G4057@exp-id*) G4088@exp-lab*)))) (vector-map (lambda (G4092@x) (or (G2d58@id->label (G2d08@make-stx (G2d40@id->sym G4092@x) (G2d0c@stx-mark* G4092@x) (list G405c@rib) '())) (G3028@syntax-violation '#f '"cannot find module export" G4092@x))) G4057@exp-id*) (cons G407f@e* G407a@mod**))) G406f@G4067 G406e@G4066 G406d@G4065 G406c@G4064 G406b@G4063 G406a@G4062 G4069@G4061 G4068@G4060)))))) (map (lambda (G4094@x) (G2d2a@add-subst G405c@rib G4094@x)) (G2d3c@syntax->list G4056@e*)))) (G2ced@make-empty-rib))) G4052@G404f G4051@G404e G4050@G404d))))) (set! G2f9a@chi-body* (lambda (G4096@e* G4097@r G4098@mr G4099@lex* G409a@rhs* G409b@mod** G409c@kwd* G409d@exp* G409e@rib G409f@top?) (if (null? G4096@e*) (values G4096@e* G4097@r G4098@mr G4099@lex* G409a@rhs* G409b@mod** G409c@kwd* G409d@exp*) ((lambda (G40aa@e) (call-with-values (lambda () (G2d66@syntax-type G40aa@e G4097@r)) (lambda (G40af@G40ac G40b0@G40ad G40b1@G40ae) ((lambda (G40b5@kwd G40b6@value G40b7@type) ((lambda (G40bb@kwd*) ((lambda (G40bd@t) (if (memv G40bd@t '(define)) (call-with-values (lambda () (G2ec1@parse-define G40aa@e)) (lambda (G40c1@G40bf G40c2@G40c0) ((lambda (G40c5@rhs G40c6@id) (begin (if (G2d4c@bound-id-member? G40c6@id G40bb@kwd*) (G3028@syntax-violation '#f '"cannot redefine keyword" G40aa@e) (void)) (call-with-values (lambda () (G2cc6@gen-define-label+loc G40c6@id G409e@rib)) (lambda (G40cb@G40c9 G40cc@G40ca) ((lambda (G40cf@lex G40d0@lab) (begin (G2cef@extend-rib! G409e@rib G40c6@id G40d0@lab) (G2f9a@chi-body* (cdr G4096@e*) (G2ecf@add-lexical G40d0@lab G40cf@lex G4097@r) G4098@mr (cons G40cf@lex G4099@lex*) (cons G40c5@rhs G409a@rhs*) G409b@mod** G40bb@kwd* G409d@exp* G409e@rib G409f@top?))) G40cc@G40ca G40cb@G40c9))))) G40c2@G40c0 G40c1@G40bf))) (if (memv G40bd@t '(define-syntax)) (call-with-values (lambda () (G2ec3@parse-define-syntax G40aa@e)) (lambda (G40d5@G40d3 G40d6@G40d4) ((lambda (G40d9@rhs G40da@id) (begin (if (G2d4c@bound-id-member? G40da@id G40bb@kwd*) (G3028@syntax-violation '#f '"cannot redefine keyword" G40aa@e) (void)) ((lambda (G40dd@lab G40de@expanded-rhs) (begin (G2cef@extend-rib! G409e@rib G40da@id G40dd@lab) ((lambda (G40e1@b) (G2f9a@chi-body* (cdr G4096@e*) (cons (cons G40dd@lab G40e1@b) G4097@r) (cons (cons G40dd@lab G40e1@b) G4098@mr) G4099@lex* G409a@rhs* G409b@mod** G40bb@kwd* G409d@exp* G409e@rib G409f@top?)) (G2d7e@make-eval-transformer G40de@expanded-rhs)))) (G2cc8@gen-define-label G40da@id G409e@rib) (G2f9c@expand-transformer G40d9@rhs G4098@mr)))) G40d6@G40d4 G40d5@G40d3))) (if (memv G40bd@t '(let-syntax letrec-syntax)) ((lambda (G40e3@t) ((lambda (G40e5@ls/false) (if (and G40e5@ls/false (apply (lambda (G40e7@xlhs* G40e8@xrhs* G40e9@xbody*) (if (not (G2d48@valid-bound-ids? G40e7@xlhs*)) (G3028@syntax-violation '#f '"invalid identifiers" G40aa@e) (void))) G40e5@ls/false)) (apply (lambda (G40ed@xlhs* G40ee@xrhs* G40ef@xbody*) ((lambda (G40f3@xlab*) ((lambda (G40f5@xrib) ((lambda (G40f7@xb*) ((lambda () (G2f9a@chi-body* (append (map (lambda (G40f9@x) (G2d2a@add-subst G40f5@xrib G40f9@x)) G40ef@xbody*) (cdr G4096@e*)) (append (map cons G40f3@xlab* G40f7@xb*) G4097@r) (append (map cons G40f3@xlab* G40f7@xb*) G4098@mr) G4099@lex* G409a@rhs* G409b@mod** G40bb@kwd* G409d@exp* G409e@rib G409f@top?)))) (map (lambda (G40fb@x) (G2d7e@make-eval-transformer (G2f9c@expand-transformer (if (eq? G40b7@type 'let-syntax) G40fb@x (G2d2a@add-subst G40f5@xrib G40fb@x)) G4098@mr))) G40ee@xrhs*))) (G2cf9@make-full-rib G40ed@xlhs* G40f3@xlab*))) (map G2cc2@gen-label G40ed@xlhs*))) G40e5@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G40e3@t))) (G2f3d@syntax-dispatch G40e3@t '(_ #(each (any any)) . each-any)))) G40aa@e) (if (memv G40bd@t '(begin)) ((lambda (G40fd@t) ((lambda (G40ff@ls/false) (if G40ff@ls/false (apply (lambda (G4101@x*) (G2f9a@chi-body* (append G4101@x* (cdr G4096@e*)) G4097@r G4098@mr G4099@lex* G409a@rhs* G409b@mod** G40bb@kwd* G409d@exp* G409e@rib G409f@top?)) G40ff@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G40fd@t))) (G2f3d@syntax-dispatch G40fd@t '(_ . each-any)))) G40aa@e) (if (memv G40bd@t '(global-macro global-macro!)) (G2f9a@chi-body* (cons (G2d2a@add-subst G409e@rib (G2f5b@chi-global-macro G40b6@value G40aa@e)) (cdr G4096@e*)) G4097@r G4098@mr G4099@lex* G409a@rhs* G409b@mod** G40bb@kwd* G409d@exp* G409e@rib G409f@top?) (if (memv G40bd@t '(local-macro local-macro!)) (G2f9a@chi-body* (cons (G2d2a@add-subst G409e@rib (G2f59@chi-local-macro G40b6@value G40aa@e)) (cdr G4096@e*)) G4097@r G4098@mr G4099@lex* G409a@rhs* G409b@mod** G40bb@kwd* G409d@exp* G409e@rib G409f@top?) (if (memv G40bd@t '(macro macro!)) (G2f9a@chi-body* (cons (G2d2a@add-subst G409e@rib (G2f57@chi-macro G40b6@value G40aa@e)) (cdr G4096@e*)) G4097@r G4098@mr G4099@lex* G409a@rhs* G409b@mod** G40bb@kwd* G409d@exp* G409e@rib G409f@top?) (if (memv G40bd@t '(module)) (call-with-values (lambda () (G2f98@chi-internal-module G40aa@e G4097@r G4098@mr G4099@lex* G409a@rhs* G409b@mod** G40bb@kwd*)) (lambda (G410b@G4103 G410c@G4104 G410d@G4105 G410e@G4106 G410f@G4107 G4110@G4108 G4111@G4109 G4112@G410a) ((lambda (G411b@kwd* G411c@mod** G411d@mr G411e@r G411f@m-exp-lab* G4120@m-exp-id* G4121@rhs* G4122@lex*) (begin (vector-for-each (lambda (G412b@id G412c@lab) (G2cef@extend-rib! G409e@rib G412b@id G412c@lab)) G4120@m-exp-id* G411f@m-exp-lab*) (G2f9a@chi-body* (cdr G4096@e*) G411e@r G411d@mr G4122@lex* G4121@rhs* G411c@mod** G411b@kwd* G409d@exp* G409e@rib G409f@top?))) G4112@G410a G4111@G4109 G4110@G4108 G410f@G4107 G410e@G4106 G410d@G4105 G410c@G4104 G410b@G4103))) (if (memv G40bd@t '(library)) (begin (G300a@library-expander (G2d54@stx->datum G40aa@e)) (G2f9a@chi-body* (cdr G4096@e*) G4097@r G4098@mr G4099@lex* G409a@rhs* G409b@mod** G40bb@kwd* G409d@exp* G409e@rib G409f@top?)) (if (memv G40bd@t '(export)) ((lambda (G412f@t) ((lambda (G4131@ls/false) (if G4131@ls/false (apply (lambda (G4133@exp-decl*) (G2f9a@chi-body* (cdr G4096@e*) G4097@r G4098@mr G4099@lex* G409a@rhs* G409b@mod** G40bb@kwd* (append G4133@exp-decl* G409d@exp*) G409e@rib G409f@top?)) G4131@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G412f@t))) (G2f3d@syntax-dispatch G412f@t '(_ . each-any)))) G40aa@e) (if (memv G40bd@t '(import)) ((lambda () ((lambda (G4136@module-import? G4138@module-import G413a@library-import) (begin (set! G4136@module-import? (lambda (G4182@e) ((lambda (G4184@t) ((lambda (G4186@ls/false) (if (and G4186@ls/false (apply (lambda (G4188@id) (G2d3e@id? G4188@id)) G4186@ls/false)) (apply (lambda (G418a@id) '#t) G4186@ls/false) ((lambda (G418c@t) ((lambda (G418e@ls/false) (if G418e@ls/false (apply (lambda (G4190@imp*) '#f) G418e@ls/false) ((lambda (G4192@t) ((lambda (G4194@ls/false) (if G4194@ls/false (apply (lambda () (G3028@syntax-violation '#f '"malformed import form" G4182@e)) G4194@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G4192@t))) (G2f3d@syntax-dispatch G4192@t '_))) G418c@t))) (G2f3d@syntax-dispatch G418c@t '(_ . each-any)))) G4184@t))) (G2f3d@syntax-dispatch G4184@t '(_ any)))) G4182@e))) (set! G4138@module-import (lambda (G4163@e G4164@r) ((lambda (G4167@t) ((lambda (G4169@ls/false) (if (and G4169@ls/false (apply (lambda (G416b@id) (G2d3e@id? G416b@id)) G4169@ls/false)) (apply (lambda (G416d@id) (call-with-values (lambda () (G2d66@syntax-type G416d@id G4164@r)) (lambda (G4172@G416f G4173@G4170 G4174@G4171) ((lambda (G4178@kwd G4179@value G417a@type) ((lambda (G417e@t) (if (memv G417e@t '($module)) ((lambda (G4180@iface) (values (G2f96@module-interface-exp-id* G4180@iface G416d@id) (G2f8e@module-interface-exp-lab-vec G4180@iface))) G4179@value) (G3028@syntax-violation '#f '"invalid import" G4163@e))) G417a@type)) G4174@G4171 G4173@G4170 G4172@G416f)))) G4169@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G4167@t))) (G2f3d@syntax-dispatch G4167@t '(_ any)))) G4163@e))) (set! G413a@library-import (lambda (G4149@e) ((lambda (G414b@t) ((lambda (G414d@ls/false) (if G414d@ls/false (apply (lambda (G414f@ctxt G4150@imp*) (call-with-values (lambda () (G2fa4@parse-import-spec* (G302e@syntax->datum G4150@imp*))) (lambda (G4155@G4153 G4156@G4154) ((lambda (G4159@subst-labels G415a@subst-names) (values (vector-map (lambda (G415d@name) (G2d1c@datum->stx G414f@ctxt G415d@name)) G415a@subst-names) G4159@subst-labels)) G4156@G4154 G4155@G4153)))) G414d@ls/false) ((lambda (G415f@t) ((lambda (G4161@ls/false) (if G4161@ls/false (apply (lambda () (G3028@syntax-violation '#f '"invalid import form" G4149@e)) G4161@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G415f@t))) (G2f3d@syntax-dispatch G415f@t '_))) G414b@t))) (G2f3d@syntax-dispatch G414b@t '(any . each-any)))) G4149@e))) (begin (call-with-values (lambda () (if (G4136@module-import? G40aa@e) (G4138@module-import G40aa@e G4097@r) (G413a@library-import G40aa@e))) (lambda (G413d@G413b G413e@G413c) ((lambda (G4141@lab* G4142@id*) (vector-for-each (lambda (G4145@id G4146@lab) (G2cef@extend-rib! G409e@rib G4145@id G4146@lab)) G4142@id* G4141@lab*)) G413e@G413c G413d@G413b))) (G2f9a@chi-body* (cdr G4096@e*) G4097@r G4098@mr G4099@lex* G409a@rhs* G409b@mod** G40bb@kwd* G409d@exp* G409e@rib G409f@top?)))) '#f '#f '#f))) (if G409f@top? (G2f9a@chi-body* (cdr G4096@e*) G4097@r G4098@mr (cons (G2cbe@gen-lexical 'dummy) G4099@lex*) (cons (cons 'top-expr G40aa@e) G409a@rhs*) G409b@mod** G40bb@kwd* G409d@exp* G409e@rib G409f@top?) (values G4096@e* G4097@r G4098@mr G4099@lex* G409a@rhs* G409b@mod** G40bb@kwd* G409d@exp*)))))))))))))) G40b7@type)) (if (G2d3e@id? G40b5@kwd) (cons G40b5@kwd G409c@kwd*) G409c@kwd*))) G40b1@G40ae G40b0@G40ad G40af@G40ac)))) (car G4096@e*))))) (set! G2f9c@expand-transformer (lambda (G4196@expr G4197@r) ((lambda (G419a@rtc) ((lambda (G419c@expanded-rhs) (begin (for-each ((lambda (G419e@mark-visit) (lambda (G41a0@x) (begin (G2b59@G2a00@invoke-library G41a0@x) (G419e@mark-visit G41a0@x)))) (G2fac@vis-collector)) (G419a@rtc)) G419c@expanded-rhs)) ((lambda (G41a6@G41a2 G41a7@G41a3 G41a8@G41a4 G41a9@G41a5) ((lambda (G41ae@swap) (dynamic-wind G41ae@swap (lambda () (G2f61@chi-expr G4196@expr G4197@r G4197@r)) G41ae@swap)) (lambda () (begin ((lambda (G41b0@t) (begin (G41a6@G41a2 G41a8@G41a4) (set! G41a8@G41a4 G41b0@t))) (G41a6@G41a2)) ((lambda (G41b2@t) (begin (G41a7@G41a3 G41a9@G41a5) (set! G41a9@G41a5 G41b2@t))) (G41a7@G41a3)))))) G2faa@inv-collector G2fac@vis-collector G419a@rtc (lambda (G41b4@x) (values))))) (G2fa8@make-collector)))) (set! G2f9e@parse-exports (lambda (G41b6@exp*) ((letrec ((G41b8@f (lambda (G41ba@exp* G41bb@int* G41bc@ext*) (if (null? G41ba@exp*) (begin (if (not (G2d48@valid-bound-ids? G41bc@ext*)) (G3028@syntax-violation 'export '"invalid exports" (G2f75@find-dups G41bc@ext*)) (void)) (values (map G302e@syntax->datum G41bc@ext*) G41bb@int*)) ((lambda (G41c0@t) ((lambda (G41c2@ls/false) (if G41c2@ls/false (apply (lambda (G41c4@rename G41c5@i* G41c6@e*) (begin (if (not (and (eq? (G302e@syntax->datum G41c4@rename) 'rename) (for-all G2d3e@id? G41c5@i*) (for-all G2d3e@id? G41c6@e*))) (G3028@syntax-violation 'export '"invalid export specifier" (car G41ba@exp*)) (void)) (G41b8@f (cdr G41ba@exp*) (append G41c5@i* G41bb@int*) (append G41c6@e* G41bc@ext*)))) G41c2@ls/false) ((lambda (G41ca@t) ((lambda (G41cc@ls/false) (if G41cc@ls/false (apply (lambda (G41ce@ie) (begin (if (not (G2d3e@id? G41ce@ie)) (G3028@syntax-violation 'export '"invalid export" G41ce@ie) (void)) (G41b8@f (cdr G41ba@exp*) (cons G41ce@ie G41bb@int*) (cons G41ce@ie G41bc@ext*)))) G41cc@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G41ca@t))) (G2f3d@syntax-dispatch G41ca@t 'any))) G41c0@t))) (G2f3d@syntax-dispatch G41c0@t '(any . #(each (any any)))))) (car G41ba@exp*)))))) G41b8@f) G41b6@exp* '() '()))) (set! G2fa0@parse-library-name (lambda (G41d0@spec) ((lambda (G41d3@parse) (begin (set! G41d3@parse (lambda (G41de@x) ((lambda (G41e0@t) ((lambda (G41e2@ls/false) (if (and G41e2@ls/false (apply (lambda (G41e4@v*) (for-all (lambda (G41e6@x) ((lambda (G41e8@x) (and (integer? G41e8@x) (exact? G41e8@x))) (G302e@syntax->datum G41e6@x))) G41e4@v*)) G41e2@ls/false)) (apply (lambda (G41ea@v*) (values '() (map G302e@syntax->datum G41ea@v*))) G41e2@ls/false) ((lambda (G41ec@t) ((lambda (G41ee@ls/false) (if (and G41ee@ls/false (apply (lambda (G41f0@x G41f1@rest) (symbol? (G302e@syntax->datum G41f0@x))) G41ee@ls/false)) (apply (lambda (G41f4@x G41f5@rest) (call-with-values (lambda () (G41d3@parse G41f5@rest)) (lambda (G41fa@G41f8 G41fb@G41f9) ((lambda (G41fe@v* G41ff@x*) (values (cons (G302e@syntax->datum G41f4@x) G41ff@x*) G41fe@v*)) G41fb@G41f9 G41fa@G41f8)))) G41ee@ls/false) ((lambda (G4202@t) ((lambda (G4204@ls/false) (if G4204@ls/false (apply (lambda () (values '() '())) G4204@ls/false) ((lambda (G4206@t) ((lambda (G4208@ls/false) (if G4208@ls/false (apply (lambda () (G3028@syntax-violation '#f '"invalid library name" G41d0@spec)) G4208@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G4206@t))) (G2f3d@syntax-dispatch G4206@t '_))) G4202@t))) (G2f3d@syntax-dispatch G4202@t '()))) G41ec@t))) (G2f3d@syntax-dispatch G41ec@t '(any . any)))) G41e0@t))) (G2f3d@syntax-dispatch G41e0@t '(each-any)))) G41de@x))) (call-with-values (lambda () (G41d3@parse G41d0@spec)) (lambda (G41d6@G41d4 G41d7@G41d5) ((lambda (G41da@ver* G41db@name*) (begin (if (null? G41db@name*) (G3028@syntax-violation '#f '"empty library name" G41d0@spec) (void)) (values G41db@name* G41da@ver*))) G41d7@G41d5 G41d6@G41d4))))) '#f))) (set! G2fa2@parse-library (lambda (G420a@e) ((lambda (G420c@t) ((lambda (G420e@ls/false) (if (and G420e@ls/false (apply (lambda (G4210@library G4211@name* G4212@export G4213@exp* G4214@import G4215@imp* G4216@b*) (and (eq? (G302e@syntax->datum G4212@export) 'export) (eq? (G302e@syntax->datum G4214@import) 'import) (eq? (G302e@syntax->datum G4210@library) 'library))) G420e@ls/false)) (apply (lambda (G421e@library G421f@name* G4220@export G4221@exp* G4222@import G4223@imp* G4224@b*) (values G421f@name* G4221@exp* G4223@imp* G4224@b*)) G420e@ls/false) ((lambda (G422c@t) ((lambda (G422e@ls/false) (if G422e@ls/false (apply (lambda () (G3028@syntax-violation '#f '"malformed library" G420a@e)) G422e@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G422c@t))) (G2f3d@syntax-dispatch G422c@t '_))) G420c@t))) (G2f3d@syntax-dispatch G420c@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G420a@e))) (set! G2fa4@parse-import-spec* ((lambda () ((lambda (G4231@idsyn? G4233@dup-error G4235@merge-substs G4237@exclude* G4239@find* G423b@rem* G423d@remove-dups G423f@parse-library-name G4241@import-library G4243@get-import G4245@add-imports!) (begin (set! G4231@idsyn? (lambda (G4430@x) (symbol? (G302e@syntax->datum G4430@x)))) (set! G4233@dup-error (lambda (G442e@name) (G3028@syntax-violation 'import '"two imports with different bindings" G442e@name))) (set! G4235@merge-substs (lambda (G441c@s G441d@subst) ((lambda (G4421@insert-to-subst) (begin (set! G4421@insert-to-subst (lambda (G4422@a G4423@subst) ((lambda (G4426@name G4427@label) ((lambda (G442a@t) (if G442a@t ((lambda (G442c@x) (if (eq? (cdr G442c@x) G4427@label) G4423@subst (G4233@dup-error G4426@name))) G442a@t) (cons G4422@a G4423@subst))) (assq G4426@name G4423@subst))) (car G4422@a) (cdr G4422@a)))) (if (null? G441c@s) G441d@subst (G4421@insert-to-subst (car G441c@s) (G4235@merge-substs (cdr G441c@s) G441d@subst))))) '#f))) (set! G4237@exclude* (lambda (G43f2@sym* G43f3@subst) ((lambda (G43f7@exclude) (begin (set! G43f7@exclude (lambda (G440c@sym G440d@subst) (if (null? G440d@subst) (G3028@syntax-violation 'import '"cannot rename unbound identifier" G440c@sym) (if (eq? G440c@sym (caar G440d@subst)) (values (cdar G440d@subst) (cdr G440d@subst)) ((lambda (G4410@a) (call-with-values (lambda () (G43f7@exclude G440c@sym (cdr G440d@subst))) (lambda (G4414@G4412 G4415@G4413) ((lambda (G4418@subst G4419@old) (values G4419@old (cons G4410@a G4418@subst))) G4415@G4413 G4414@G4412)))) (car G440d@subst)))))) (if (null? G43f2@sym*) (values '() G43f3@subst) (call-with-values (lambda () (G43f7@exclude (car G43f2@sym*) G43f3@subst)) (lambda (G43fa@G43f8 G43fb@G43f9) ((lambda (G43fe@subst G43ff@old) (call-with-values (lambda () (G4237@exclude* (cdr G43f2@sym*) G43fe@subst)) (lambda (G4404@G4402 G4405@G4403) ((lambda (G4408@subst G4409@old*) (values (cons G43ff@old G4409@old*) G4408@subst)) G4405@G4403 G4404@G4402)))) G43fb@G43f9 G43fa@G43f8)))))) '#f))) (set! G4239@find* (lambda (G43ea@sym* G43eb@subst) (map (lambda (G43ee@x) ((lambda (G43f0@t) (if G43f0@t (cdr G43f0@t) (G3028@syntax-violation 'import '"cannot find identifier" G43ee@x))) (assq G43ee@x G43eb@subst))) G43ea@sym*))) (set! G423b@rem* (lambda (G43e2@sym* G43e3@subst) ((letrec ((G43e6@f (lambda (G43e8@subst) (if (null? G43e8@subst) '() (if (memq (caar G43e8@subst) G43e2@sym*) (G43e6@f (cdr G43e8@subst)) (cons (car G43e8@subst) (G43e6@f (cdr G43e8@subst)))))))) G43e6@f) G43e3@subst))) (set! G423d@remove-dups (lambda (G43e0@ls) (if (null? G43e0@ls) '() (if (memq (car G43e0@ls) (cdr G43e0@ls)) (G423d@remove-dups (cdr G43e0@ls)) (cons (car G43e0@ls) (G423d@remove-dups (cdr G43e0@ls))))))) (set! G423f@parse-library-name (lambda (G42fa@spec) ((lambda (G42fd@subversion? G42ff@subversion-pred G4301@version-pred) (begin (set! G42fd@subversion? (lambda (G43dc@x) ((lambda (G43de@x) (and (integer? G43de@x) (exact? G43de@x) (>= G43de@x '0))) (G302e@syntax->datum G43dc@x)))) (set! G42ff@subversion-pred (lambda (G437c@x*) ((lambda (G437e@t) ((lambda (G4380@ls/false) (if (and G4380@ls/false (apply (lambda (G4382@n) (G42fd@subversion? G4382@n)) G4380@ls/false)) (apply (lambda (G4384@n) (lambda (G4386@x) (= G4386@x (G302e@syntax->datum G4384@n)))) G4380@ls/false) ((lambda (G4388@t) ((lambda (G438a@ls/false) (if (and G438a@ls/false (apply (lambda (G438c@p? G438d@sub*) (eq? (G302e@syntax->datum G438c@p?) 'and)) G438a@ls/false)) (apply (lambda (G4390@p? G4391@sub*) ((lambda (G4394@p*) (lambda (G4396@x) (for-all (lambda (G4398@p) (G4398@p G4396@x)) G4394@p*))) (map G42ff@subversion-pred G4391@sub*))) G438a@ls/false) ((lambda (G439a@t) ((lambda (G439c@ls/false) (if (and G439c@ls/false (apply (lambda (G439e@p? G439f@sub*) (eq? (G302e@syntax->datum G439e@p?) 'or)) G439c@ls/false)) (apply (lambda (G43a2@p? G43a3@sub*) ((lambda (G43a6@p*) (lambda (G43a8@x) (exists (lambda (G43aa@p) (G43aa@p G43a8@x)) G43a6@p*))) (map G42ff@subversion-pred G43a3@sub*))) G439c@ls/false) ((lambda (G43ac@t) ((lambda (G43ae@ls/false) (if (and G43ae@ls/false (apply (lambda (G43b0@p? G43b1@sub) (eq? (G302e@syntax->datum G43b0@p?) 'not)) G43ae@ls/false)) (apply (lambda (G43b4@p? G43b5@sub) ((lambda (G43b8@p) (lambda (G43ba@x) (not (G43b8@p G43ba@x)))) (G42ff@subversion-pred G43b5@sub))) G43ae@ls/false) ((lambda (G43bc@t) ((lambda (G43be@ls/false) (if (and G43be@ls/false (apply (lambda (G43c0@p? G43c1@n) (and (eq? (G302e@syntax->datum G43c0@p?) '<=) (G42fd@subversion? G43c1@n))) G43be@ls/false)) (apply (lambda (G43c4@p? G43c5@n) (lambda (G43c8@x) (<= G43c8@x (G302e@syntax->datum G43c5@n)))) G43be@ls/false) ((lambda (G43ca@t) ((lambda (G43cc@ls/false) (if (and G43cc@ls/false (apply (lambda (G43ce@p? G43cf@n) (and (eq? (G302e@syntax->datum G43ce@p?) '>=) (G42fd@subversion? G43cf@n))) G43cc@ls/false)) (apply (lambda (G43d2@p? G43d3@n) (lambda (G43d6@x) (>= G43d6@x (G302e@syntax->datum G43d3@n)))) G43cc@ls/false) ((lambda (G43d8@t) ((lambda (G43da@ls/false) (if G43da@ls/false (apply (lambda () (G3028@syntax-violation 'import '"invalid sub-version spec" G42fa@spec G437c@x*)) G43da@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G43d8@t))) (G2f3d@syntax-dispatch G43d8@t '_))) G43ca@t))) (G2f3d@syntax-dispatch G43ca@t '(any any)))) G43bc@t))) (G2f3d@syntax-dispatch G43bc@t '(any any)))) G43ac@t))) (G2f3d@syntax-dispatch G43ac@t '(any any)))) G439a@t))) (G2f3d@syntax-dispatch G439a@t '(any . each-any)))) G4388@t))) (G2f3d@syntax-dispatch G4388@t '(any . each-any)))) G437e@t))) (G2f3d@syntax-dispatch G437e@t 'any))) G437c@x*))) (set! G4301@version-pred (lambda (G432c@x*) ((lambda (G432e@t) ((lambda (G4330@ls/false) (if G4330@ls/false (apply (lambda () (lambda (G4332@x) '#t)) G4330@ls/false) ((lambda (G4334@t) ((lambda (G4336@ls/false) (if (and G4336@ls/false (apply (lambda (G4338@c G4339@ver*) (eq? (G302e@syntax->datum G4338@c) 'and)) G4336@ls/false)) (apply (lambda (G433c@c G433d@ver*) ((lambda (G4340@p*) (lambda (G4342@x) (for-all (lambda (G4344@p) (G4344@p G4342@x)) G4340@p*))) (map G4301@version-pred G433d@ver*))) G4336@ls/false) ((lambda (G4346@t) ((lambda (G4348@ls/false) (if (and G4348@ls/false (apply (lambda (G434a@c G434b@ver*) (eq? (G302e@syntax->datum G434a@c) 'or)) G4348@ls/false)) (apply (lambda (G434e@c G434f@ver*) ((lambda (G4352@p*) (lambda (G4354@x) (exists (lambda (G4356@p) (G4356@p G4354@x)) G4352@p*))) (map G4301@version-pred G434f@ver*))) G4348@ls/false) ((lambda (G4358@t) ((lambda (G435a@ls/false) (if (and G435a@ls/false (apply (lambda (G435c@c G435d@ver) (eq? (G302e@syntax->datum G435c@c) 'not)) G435a@ls/false)) (apply (lambda (G4360@c G4361@ver) ((lambda (G4364@p) (lambda (G4366@x) (not (G4364@p G4366@x)))) (G4301@version-pred G4361@ver))) G435a@ls/false) ((lambda (G4368@t) ((lambda (G436a@ls/false) (if G436a@ls/false (apply (lambda (G436c@sub*) ((lambda (G436e@p*) (lambda (G4370@x) ((letrec ((G4372@f (lambda (G4374@p* G4375@x) (if (null? G4374@p*) '#t (if (null? G4375@x) '#f (and ((car G4374@p*) (car G4375@x)) (G4372@f (cdr G4374@p*) (cdr G4375@x)))))))) G4372@f) G436e@p* G4370@x))) (map G42ff@subversion-pred G436c@sub*))) G436a@ls/false) ((lambda (G4378@t) ((lambda (G437a@ls/false) (if G437a@ls/false (apply (lambda () (G3028@syntax-violation 'import '"invalid version spec" G42fa@spec G432c@x*)) G437a@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G4378@t))) (G2f3d@syntax-dispatch G4378@t '_))) G4368@t))) (G2f3d@syntax-dispatch G4368@t 'each-any))) G4358@t))) (G2f3d@syntax-dispatch G4358@t '(any any)))) G4346@t))) (G2f3d@syntax-dispatch G4346@t '(any . each-any)))) G4334@t))) (G2f3d@syntax-dispatch G4334@t '(any . each-any)))) G432e@t))) (G2f3d@syntax-dispatch G432e@t '()))) G432c@x*))) ((letrec ((G4302@f (lambda (G4304@x) ((lambda (G4306@t) ((lambda (G4308@ls/false) (if G4308@ls/false (apply (lambda (G430a@version-spec*) (values '() (G4301@version-pred G430a@version-spec*))) G4308@ls/false) ((lambda (G430c@t) ((lambda (G430e@ls/false) (if (and G430e@ls/false (apply (lambda (G4310@x G4311@x*) (G4231@idsyn? G4310@x)) G430e@ls/false)) (apply (lambda (G4314@x G4315@x*) (call-with-values (lambda () (G4302@f G4315@x*)) (lambda (G431a@G4318 G431b@G4319) ((lambda (G431e@pred G431f@name) (values (cons (G302e@syntax->datum G4314@x) G431f@name) G431e@pred)) G431b@G4319 G431a@G4318)))) G430e@ls/false) ((lambda (G4322@t) ((lambda (G4324@ls/false) (if G4324@ls/false (apply (lambda () (values '() (lambda (G4326@x) '#t))) G4324@ls/false) ((lambda (G4328@t) ((lambda (G432a@ls/false) (if G432a@ls/false (apply (lambda () (G3028@syntax-violation '#f '"invalid import spec" G42fa@spec)) G432a@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G4328@t))) (G2f3d@syntax-dispatch G4328@t '_))) G4322@t))) (G2f3d@syntax-dispatch G4322@t '()))) G430c@t))) (G2f3d@syntax-dispatch G430c@t '(any . any)))) G4306@t))) (G2f3d@syntax-dispatch G4306@t '(each-any)))) G4304@x)))) G4302@f) G42fa@spec))) '#f '#f '#f))) (set! G4241@import-library (lambda (G42ec@spec*) (call-with-values (lambda () (G423f@parse-library-name G42ec@spec*)) (lambda (G42f0@G42ee G42f1@G42ef) ((lambda (G42f4@pred G42f5@name) (begin (if (null? G42f5@name) (G3028@syntax-violation 'import '"empty library name" G42ec@spec*) (void)) ((lambda (G42f8@lib) (begin (if (not G42f8@lib) (G3028@syntax-violation 'import '"cannot find library with required name" G42f5@name) (void)) (if (not (G42f4@pred (G2b2a@G29a2@library-version G42f8@lib))) (G3028@syntax-violation 'import '"library does not satisfy version specification" G42ec@spec* G42f8@lib) (void)) ((G2fae@imp-collector) G42f8@lib) (G2b2e@G29aa@library-subst G42f8@lib))) (G2b52@G29f2@find-library-by-name G42f5@name)))) G42f1@G42ef G42f0@G42ee))))) (set! G4243@get-import (lambda (G425e@spec) ((lambda (G4260@t) ((lambda (G4262@ls/false) (if (and G4262@ls/false (apply (lambda (G4264@x G4265@x*) (not (memq (G302e@syntax->datum G4264@x) '(for rename except only prefix library)))) G4262@ls/false)) (apply (lambda (G4268@x G4269@x*) (G4241@import-library (cons G4268@x G4269@x*))) G4262@ls/false) ((lambda (G426c@t) ((lambda (G426e@ls/false) (if (and G426e@ls/false (apply (lambda (G4270@rename G4271@isp G4272@old* G4273@new*) (and (eq? (G302e@syntax->datum G4270@rename) 'rename) (for-all G4231@idsyn? G4272@old*) (for-all G4231@idsyn? G4273@new*))) G426e@ls/false)) (apply (lambda (G4278@rename G4279@isp G427a@old* G427b@new*) ((lambda (G4280@subst G4281@old* G4282@new*) ((lambda (G4286@old-label*) ((lambda (G4288@subst) (G4235@merge-substs (map cons G4282@new* G4286@old-label*) G4288@subst)) (G423b@rem* G4281@old* G4280@subst))) (G4239@find* G4281@old* G4280@subst))) (G4243@get-import G4279@isp) (map G302e@syntax->datum G427a@old*) (map G302e@syntax->datum G427b@new*))) G426e@ls/false) ((lambda (G428a@t) ((lambda (G428c@ls/false) (if (and G428c@ls/false (apply (lambda (G428e@except G428f@isp G4290@sym*) (and (eq? (G302e@syntax->datum G428e@except) 'except) (for-all G4231@idsyn? G4290@sym*))) G428c@ls/false)) (apply (lambda (G4294@except G4295@isp G4296@sym*) ((lambda (G429a@subst) (G423b@rem* (map G302e@syntax->datum G4296@sym*) G429a@subst)) (G4243@get-import G4295@isp))) G428c@ls/false) ((lambda (G429c@t) ((lambda (G429e@ls/false) (if (and G429e@ls/false (apply (lambda (G42a0@only G42a1@isp G42a2@sym*) (and (eq? (G302e@syntax->datum G42a0@only) 'only) (for-all G4231@idsyn? G42a2@sym*))) G429e@ls/false)) (apply (lambda (G42a6@only G42a7@isp G42a8@sym*) ((lambda (G42ac@subst G42ad@sym*) ((lambda (G42b0@sym*) ((lambda (G42b2@lab*) (map cons G42b0@sym* G42b2@lab*)) (G4239@find* G42b0@sym* G42ac@subst))) (G423d@remove-dups G42ad@sym*))) (G4243@get-import G42a7@isp) (map G302e@syntax->datum G42a8@sym*))) G429e@ls/false) ((lambda (G42b4@t) ((lambda (G42b6@ls/false) (if (and G42b6@ls/false (apply (lambda (G42b8@prefix G42b9@isp G42ba@p) (and (eq? (G302e@syntax->datum G42b8@prefix) 'prefix) (G4231@idsyn? G42ba@p))) G42b6@ls/false)) (apply (lambda (G42be@prefix G42bf@isp G42c0@p) ((lambda (G42c4@subst G42c5@prefix) (map (lambda (G42c8@x) (cons (string->symbol (string-append G42c5@prefix (symbol->string (car G42c8@x)))) (cdr G42c8@x))) G42c4@subst)) (G4243@get-import G42bf@isp) (symbol->string (G302e@syntax->datum G42c0@p)))) G42b6@ls/false) ((lambda (G42ca@t) ((lambda (G42cc@ls/false) (if (and G42cc@ls/false (apply (lambda (G42ce@library G42cf@spec*) (eq? (G302e@syntax->datum G42ce@library) 'library)) G42cc@ls/false)) (apply (lambda (G42d2@library G42d3@spec*) (G4241@import-library G42d3@spec*)) G42cc@ls/false) ((lambda (G42d6@t) ((lambda (G42d8@ls/false) (if (and G42d8@ls/false (apply (lambda (G42da@for G42db@isp G42dc@rest) (eq? (G302e@syntax->datum G42da@for) 'for)) G42d8@ls/false)) (apply (lambda (G42e0@for G42e1@isp G42e2@rest) (G4243@get-import G42e1@isp)) G42d8@ls/false) ((lambda (G42e6@t) ((lambda (G42e8@ls/false) (if G42e8@ls/false (apply (lambda (G42ea@spec) (G3028@syntax-violation 'import '"invalid import spec" G42ea@spec)) G42e8@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G42e6@t))) (G2f3d@syntax-dispatch G42e6@t 'any))) G42d6@t))) (G2f3d@syntax-dispatch G42d6@t '(any any . any)))) G42ca@t))) (G2f3d@syntax-dispatch G42ca@t '(any each-any)))) G42b4@t))) (G2f3d@syntax-dispatch G42b4@t '(any any any)))) G429c@t))) (G2f3d@syntax-dispatch G429c@t '(any any . each-any)))) G428a@t))) (G2f3d@syntax-dispatch G428a@t '(any any . each-any)))) G426c@t))) (G2f3d@syntax-dispatch G426c@t '(any any . #(each (any any)))))) G4260@t))) (G2f3d@syntax-dispatch G4260@t '(any . each-any)))) G425e@spec))) (set! G4245@add-imports! (lambda (G424e@imp G424f@h) ((lambda (G4252@subst) (for-each (lambda (G4254@x) ((lambda (G4256@name G4257@label) ((lambda (G425a@t) (if G425a@t ((lambda (G425c@l) (if (not (eq? G425c@l G4257@label)) (G4233@dup-error G4256@name) (void))) G425a@t) (hashtable-set! G424f@h G4256@name G4257@label))) (hashtable-ref G424f@h G4256@name '#f))) (car G4254@x) (cdr G4254@x))) G4252@subst)) (G4243@get-import G424e@imp)))) (lambda (G4246@imp*) ((letrec ((G4248@f (lambda (G424a@imp* G424b@h) (if (null? G424a@imp*) (hashtable-entries G424b@h) (begin (G4245@add-imports! (car G424a@imp*) G424b@h) (G4248@f (cdr G424a@imp*) G424b@h)))))) G4248@f) G4246@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fa6@make-top-rib (lambda (G4432@names G4433@labels) ((lambda (G4436@rib) (begin (vector-for-each (lambda (G4438@name G4439@label) (begin (if (not (symbol? G4438@name)) (error 'make-top-rib '"BUG: not a symbol" G4438@name) (void)) (G2cf1@extend-rib/nc! G4436@rib (G2d08@make-stx G4438@name G2cba@top-mark* '() '()) G4439@label))) G4432@names G4433@labels) G4436@rib)) (G2ced@make-empty-rib)))) (set! G2fa8@make-collector (lambda () ((lambda (G443c@ls) (lambda G4440 ((lambda (G4441) (if (= G4441 '0) (apply (lambda () G443c@ls) G4440) (if (= G4441 '1) (apply (lambda (G443e@x) (set! G443c@ls (G2cb3@set-cons G443e@x G443c@ls))) G4440) (error 'apply '"invalid arg count")))) (length G4440)))) '()))) (set! G2faa@inv-collector (G28de@G2814@make-parameter (lambda G4442@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4444@x) (begin (if (not (procedure? G4444@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4444@x) (void)) G4444@x)))) (set! G2fac@vis-collector (G28de@G2814@make-parameter (lambda G4446@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G4448@x) (begin (if (not (procedure? G4448@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G4448@x) (void)) G4448@x)))) (set! G2fae@imp-collector (G28de@G2814@make-parameter (lambda G444a@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G444c@x) (begin (if (not (procedure? G444c@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G444c@x) (void)) G444c@x)))) (set! G2fb0@chi-library-internal (lambda (G444e@e* G444f@rib G4450@top?) (call-with-values (lambda () (G2f9a@chi-body* G444e@e* '() '() '() '() '() '() '() G444f@rib G4450@top?)) (lambda (G445c@G4454 G445d@G4455 G445e@G4456 G445f@G4457 G4460@G4458 G4461@G4459 G4462@G445a G4463@G445b) ((lambda (G446c@exp* G446d@_kwd* G446e@mod** G446f@rhs* G4470@lex* G4471@mr G4472@r G4473@e*) (values (append (apply append (reverse G446e@mod**)) G4473@e*) G4472@r G4471@mr (reverse G4470@lex*) (reverse G446f@rhs*) G446c@exp*)) G4463@G445b G4462@G445a G4461@G4459 G4460@G4458 G445f@G4457 G445e@G4456 G445d@G4455 G445c@G4454))))) (set! G2fb2@chi-interaction-expr (lambda (G447c@e G447d@rib G447e@r) (call-with-values (lambda () (G2f9a@chi-body* (list G447c@e) G447e@r G447e@r '() '() '() '() '() G447d@rib '#t)) (lambda (G448a@G4482 G448b@G4483 G448c@G4484 G448d@G4485 G448e@G4486 G448f@G4487 G4490@G4488 G4491@G4489) ((lambda (G449a@_exp* G449b@_kwd* G449c@mod** G449d@rhs* G449e@lex* G449f@mr G44a0@r G44a1@e*) ((lambda (G44aa@e*) ((lambda (G44ac@e) (values G44ac@e G44a0@r)) (if (null? G44aa@e*) (G2ca0@G2c12@build-void) (if (null? (cdr G44aa@e*)) (car G44aa@e*) (G2c9f@G2c10@build-sequence '#f G44aa@e*))))) (G2f6f@expand-interaction-rhs*/init* (reverse G449e@lex*) (reverse G449d@rhs*) (append (apply append (reverse G449c@mod**)) G44a1@e*) G44a0@r G449f@mr))) G4491@G4489 G4490@G4488 G448f@G4487 G448e@G4486 G448d@G4485 G448c@G4484 G448b@G4483 G448a@G4482))))) (set! G2fb4@library-body-expander (lambda (G44ae@name G44af@main-exp* G44b0@imp* G44b1@b* G44b2@top?) ((lambda (G44b9@itc) (begin (set! G44b9@itc (G2fa8@make-collector)) ((lambda (G44be@G44ba G44bf@G44bb G44c0@G44bc G44c1@G44bd) ((lambda (G44c6@swap) (dynamic-wind G44c6@swap (lambda () (call-with-values (lambda () (G2fa4@parse-import-spec* G44b0@imp*)) (lambda (G44ca@G44c8 G44cb@G44c9) ((lambda (G44ce@subst-labels G44cf@subst-names) ((lambda (G44d2@rib) ((lambda (G44d5@wrap) (begin (set! G44d5@wrap (lambda (G4541@x) (G2d08@make-stx G4541@x G2cba@top-mark* (list G44d2@rib) '()))) ((lambda (G44d6@b* G44d7@main-exp* G44d8@rtc G44d9@vtc) ((lambda (G44e2@G44de G44e3@G44df G44e4@G44e0 G44e5@G44e1) ((lambda (G44ea@swap) (dynamic-wind G44ea@swap (lambda () (call-with-values (lambda () (G2fb0@chi-library-internal G44d6@b* G44d2@rib G44b2@top?)) (lambda (G44f2@G44ec G44f3@G44ed G44f4@G44ee G44f5@G44ef G44f6@G44f0 G44f7@G44f1) ((lambda (G44fe@internal-exp* G44ff@rhs* G4500@lex* G4501@mr G4502@r G4503@init*) (call-with-values (lambda () (G2f9e@parse-exports (append G44d7@main-exp* G44fe@internal-exp*))) (lambda (G450c@G450a G450d@G450b) ((lambda (G4510@exp-id* G4511@exp-name*) (begin (G2cf5@seal-rib! G44d2@rib) ((lambda (G4514@init*) ((lambda (G4516@rhs*) ((lambda () (begin (G2cf7@unseal-rib! G44d2@rib) ((lambda (G4518@loc* G4519@export-subst) ((lambda (G451d@errstr) (begin (set! G451d@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3014@make-export-env/macros G4500@lex* G4518@loc* G4502@r)) (lambda (G4521@G451e G4522@G451f G4523@G4520) ((lambda (G4527@macro* G4528@global* G4529@export-env) (begin (for-each (lambda (G452d@s) ((lambda (G452f@name G4530@label) ((lambda (G4533@p) (if G4533@p ((lambda (G4535@b) ((lambda (G4537@type) (if (eq? G4537@type 'mutable) (G3028@syntax-violation 'export G451d@errstr G452f@name) (void))) (car G4535@b))) (cdr G4533@p)) (void))) (assq G4530@label G4529@export-env))) (car G452d@s) (cdr G452d@s))) G4519@export-subst) ((lambda (G4539@invoke-body G453a@invoke-definitions) (values (G44b9@itc) (G44d8@rtc) (G44d9@vtc) (G2c9f@G2c10@build-sequence '#f (append G453a@invoke-definitions (list G4539@invoke-body))) G4527@macro* G4519@export-subst G4529@export-env)) (G2ca2@G2c16@build-letrec* '#f G4500@lex* G4516@rhs* (G3010@build-exports G4528@global* G4514@init*)) (map G2c9b@G2b60@build-global-define (map cdr G4528@global*))))) G4523@G4520 G4522@G451f G4521@G451e))))) '#f)) (map G2cc0@gen-global G4500@lex*) (G3012@make-export-subst G4511@exp-name* G4510@exp-id*)))))) (G2f71@chi-rhs* G44ff@rhs* G4502@r G4501@mr))) (G2f5d@chi-expr* G4503@init* G4502@r G4501@mr)))) G450d@G450b G450c@G450a)))) G44f7@G44f1 G44f6@G44f0 G44f5@G44ef G44f4@G44ee G44f3@G44ed G44f2@G44ec)))) G44ea@swap)) (lambda () (begin ((lambda (G453d@t) (begin (G44e2@G44de G44e4@G44e0) (set! G44e4@G44e0 G453d@t))) (G44e2@G44de)) ((lambda (G453f@t) (begin (G44e3@G44df G44e5@G44e1) (set! G44e5@G44e1 G453f@t))) (G44e3@G44df)))))) G2faa@inv-collector G2fac@vis-collector G44d8@rtc G44d9@vtc)) (map G44d5@wrap G44b1@b*) (map G44d5@wrap G44af@main-exp*) (G2fa8@make-collector) (G2fa8@make-collector)))) '#f)) (G2fa6@make-top-rib G44cf@subst-names G44ce@subst-labels))) G44cb@G44c9 G44ca@G44c8)))) G44c6@swap)) (lambda () (begin ((lambda (G4543@t) (begin (G44be@G44ba G44c0@G44bc) (set! G44c0@G44bc G4543@t))) (G44be@G44ba)) ((lambda (G4545@t) (begin (G44bf@G44bb G44c1@G44bd) (set! G44c1@G44bd G4545@t))) (G44bf@G44bb)))))) G2fae@imp-collector G3036@top-level-context G44b9@itc '#f))) '#f))) (set! G2fb6@core-library-expander (lambda (G4547@e G4548@verify-name) (call-with-values (lambda () (G2fa2@parse-library G4547@e)) (lambda (G454f@G454b G4550@G454c G4551@G454d G4552@G454e) ((lambda (G4557@b* G4558@imp* G4559@exp* G455a@name*) (call-with-values (lambda () (G2fa0@parse-library-name G455a@name*)) (lambda (G4561@G455f G4562@G4560) ((lambda (G4565@ver G4566@name) (begin (G4548@verify-name G4566@name) (call-with-values (lambda () (G2fb4@library-body-expander G4566@name G4559@exp* G4558@imp* G4557@b* '#f)) (lambda (G4570@G4569 G4571@G456a G4572@G456b G4573@G456c G4574@G456d G4575@G456e G4576@G456f) ((lambda (G457e@export-env G457f@export-subst G4580@visit-code G4581@invoke-code G4582@visit-req* G4583@invoke-req* G4584@imp*) (values G4566@name G4565@ver G4584@imp* G4583@invoke-req* G4582@visit-req* G4581@invoke-code G4580@visit-code G457f@export-subst G457e@export-env)) G4576@G456f G4575@G456e G4574@G456d G4573@G456c G4572@G456b G4571@G456a G4570@G4569))))) G4562@G4560 G4561@G455f)))) G4552@G454e G4551@G454d G4550@G454c G454f@G454b))))) (set! G2fb8@parse-top-level-program (lambda (G458c@e*) ((lambda (G458e@t) ((lambda (G4590@ls/false) (if (and G4590@ls/false (apply (lambda (G4592@import G4593@imp* G4594@b*) (eq? (G302e@syntax->datum G4592@import) 'import)) G4590@ls/false)) (apply (lambda (G4598@import G4599@imp* G459a@b*) (values G4599@imp* G459a@b*)) G4590@ls/false) ((lambda (G459e@t) ((lambda (G45a0@ls/false) (if (and G45a0@ls/false (apply (lambda (G45a2@import G45a3@x G45a4@y) (eq? (G302e@syntax->datum G45a2@import) 'import)) G45a0@ls/false)) (apply (lambda (G45a8@import G45a9@x G45aa@y) (G3028@syntax-violation 'expander '"invalid syntax of top-level program" (G2d38@syntax-car G458c@e*))) G45a0@ls/false) ((lambda (G45ae@t) ((lambda (G45b0@ls/false) (if G45b0@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45b0@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G45ae@t))) (G2f3d@syntax-dispatch G45ae@t '_))) G459e@t))) (G2f3d@syntax-dispatch G459e@t '((any . any) . any)))) G458e@t))) (G2f3d@syntax-dispatch G458e@t '((any . each-any) . each-any)))) G458c@e*))) (set! G2fba@top-level-expander (lambda (G45b2@e*) (call-with-values (lambda () (G2fb8@parse-top-level-program G45b2@e*)) (lambda (G45b6@G45b4 G45b7@G45b5) ((lambda (G45ba@b* G45bb@imp*) (call-with-values (lambda () (G2fb4@library-body-expander '() '() G45bb@imp* G45ba@b* '#t)) (lambda (G45c5@G45be G45c6@G45bf G45c7@G45c0 G45c8@G45c1 G45c9@G45c2 G45ca@G45c3 G45cb@G45c4) ((lambda (G45d3@export-env G45d4@export-subst G45d5@visit-code G45d6@invoke-code G45d7@visit-req* G45d8@invoke-req* G45d9@imp*) (values G45d8@invoke-req* G45d6@invoke-code)) G45cb@G45c4 G45ca@G45c3 G45c9@G45c2 G45c8@G45c1 G45c7@G45c0 G45c6@G45bf G45c5@G45be)))) G45b7@G45b5 G45b6@G45b4))))) (set! G2fc0@G2fbb (make-record-type-descriptor 'env '#f 'G2fbe '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fc2@G2fbd '#f) (set! G2fc4@G2fbc (make-record-constructor-descriptor G2fc0@G2fbb '#f G2fc2@G2fbd)) (set! G2fc7@env? (record-predicate G2fc0@G2fbb)) (set! G2fc9@make-env (record-constructor G2fc4@G2fbc)) (set! G2fcb@env-names (record-accessor G2fc0@G2fbb '0)) (set! G2fcd@env-labels (record-accessor G2fc0@G2fbb '1)) (set! G2fcf@env-itc (record-accessor G2fc0@G2fbb '2)) (set! G2fd1@set-env-names! (record-mutator G2fc0@G2fbb '0)) (set! G2fd3@set-env-labels! (record-mutator G2fc0@G2fbb '1)) (set! G2fd5@set-env-itc! (record-mutator G2fc0@G2fbb '2)) (set! G2fd7@rp (G28db@G280e@make-record-printer 'env (lambda (G45e1@x G45e2@p G45e3@wr) (display '"#<environment>" G45e2@p)))) (set! G2fdd@G2fd8 (make-record-type-descriptor 'interaction-env '#f 'G2fdb '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2fdf@G2fda '#f) (set! G2fe1@G2fd9 (make-record-constructor-descriptor G2fdd@G2fd8 '#f G2fdf@G2fda)) (set! G2fe4@interaction-env? (record-predicate G2fdd@G2fd8)) (set! G2fe6@make-interaction-env (record-constructor G2fe1@G2fd9)) (set! G2fe8@interaction-env-rib (record-accessor G2fdd@G2fd8 '0)) (set! G2fea@interaction-env-r (record-accessor G2fdd@G2fd8 '1)) (set! G2fec@interaction-env-locs (record-accessor G2fdd@G2fd8 '2)) (set! G2fee@set-interaction-env-rib! (record-mutator G2fdd@G2fd8 '0)) (set! G2ff0@set-interaction-env-r! (record-mutator G2fdd@G2fd8 '1)) (set! G2ff2@set-interaction-env-locs! (record-mutator G2fdd@G2fd8 '2)) (set! G2ff4@rp (G28db@G280e@make-record-printer 'interaction-env (lambda (G45e7@x G45e8@p G45e9@wr) (display '"#<environment>" G45e8@p)))) (set! G2ff6@interaction-environment-symbols (lambda () (G2ffe@environment-symbols (G3034@interaction-environment)))) (set! G2ff8@environment-bindings (lambda (G45ed@e) (vector->list (vector-map (lambda (G45ef@name G45f0@label) (G2ffa@parse-binding (cons G45ef@name (G2b58@G29fe@imported-label->binding G45f0@label)))) (G2fcb@env-names G45ed@e) (G2fcd@env-labels G45ed@e))))) (set! G2ffa@parse-binding (lambda (G45f3@b) (cons (car G45f3@b) ((lambda (G45f5@t) (if (memv G45f5@t '(core-prim global)) 'procedure (if (memv G45f5@t '(core-macro macro global-macro)) 'syntax (if (memv G45f5@t '($core-rtd)) 'record (if (eq? (car G45f3@b) (cadr G45f3@b)) 'syntax 'unknown))))) (cadr G45f3@b))))) (set! G2ffc@environment? (lambda (G45f7@x) (or (G2fc7@env? G45f7@x) (G2fe4@interaction-env? G45f7@x)))) (set! G2ffe@environment-symbols (lambda (G45f9@x) (if (G2fc7@env? G45f9@x) (vector->list (G2fcb@env-names G45f9@x)) (if (G2fe4@interaction-env? G45f9@x) (map values (G2cd9@rib-sym* (G2fe8@interaction-env-rib G45f9@x))) (assertion-violation 'environment-symbols '"not an environment" G45f9@x))))) (set! G3000@environment (lambda G45fb@imp* ((lambda (G45fd@itc) ((lambda (G4601@G45ff G4602@G4600) ((lambda (G4605@swap) (dynamic-wind G4605@swap (lambda () (call-with-values (lambda () (G2fa4@parse-import-spec* G45fb@imp*)) (lambda (G4609@G4607 G460a@G4608) ((lambda (G460d@subst-labels G460e@subst-names) (G2fc9@make-env G460e@subst-names G460d@subst-labels G45fd@itc)) G460a@G4608 G4609@G4607)))) G4605@swap)) (lambda () ((lambda (G4611@t) (begin (G4601@G45ff G4602@G4600) (set! G4602@G4600 G4611@t))) (G4601@G45ff))))) G2fae@imp-collector G45fd@itc)) (G2fa8@make-collector)))) (set! G3002@null-environment (lambda (G4613@n) (begin (if (not (eqv? G4613@n '5)) (assertion-violation 'null-environment '"not 5" G4613@n) (void)) (G3000@environment '(psyntax null-environment-5))))) (set! G3004@scheme-report-environment (lambda (G4615@n) (begin (if (not (eqv? G4615@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4615@n) (void)) (G3000@environment '(psyntax scheme-report-environment-5))))) (set! G3006@expand (lambda (G4617@x G4618@env) (if (G2fc7@env? G4618@env) ((lambda (G461b@rib) ((lambda (G461d@x G461e@itc G461f@rtc G4620@vtc) ((lambda (G4625@x) (begin (G2cf5@seal-rib! G461b@rib) (values G4625@x (G461f@rtc)))) ((lambda (G462f@G4627 G4630@G4628 G4631@G4629 G4632@G462a G4633@G462b G4634@G462c G4635@G462d G4636@G462e) ((lambda (G463f@swap) (dynamic-wind G463f@swap (lambda () (G2f61@chi-expr G461d@x '() '())) G463f@swap)) (lambda () (begin ((lambda (G4641@t) (begin (G462f@G4627 G4633@G462b) (set! G4633@G462b G4641@t))) (G462f@G4627)) ((lambda (G4643@t) (begin (G4630@G4628 G4634@G462c) (set! G4634@G462c G4643@t))) (G4630@G4628)) ((lambda (G4645@t) (begin (G4631@G4629 G4635@G462d) (set! G4635@G462d G4645@t))) (G4631@G4629)) ((lambda (G4647@t) (begin (G4632@G462a G4636@G462e) (set! G4636@G462e G4647@t))) (G4632@G462a)))))) G3036@top-level-context G2faa@inv-collector G2fac@vis-collector G2fae@imp-collector '#f G461f@rtc G4620@vtc G461e@itc))) (G2d08@make-stx G4617@x G2cba@top-mark* (list G461b@rib) '()) (G2fcf@env-itc G4618@env) (G2fa8@make-collector) (G2fa8@make-collector))) (G2fa6@make-top-rib (G2fcb@env-names G4618@env) (G2fcd@env-labels G4618@env))) (if (G2fe4@interaction-env? G4618@env) ((lambda (G4649@rib G464a@r G464b@rtc) ((lambda (G464f@x) (call-with-values (lambda () ((lambda (G465b@G4653 G465c@G4654 G465d@G4655 G465e@G4656 G465f@G4657 G4660@G4658 G4661@G4659 G4662@G465a) ((lambda (G466b@swap) (dynamic-wind G466b@swap (lambda () (G2fb2@chi-interaction-expr G464f@x G4649@rib G464a@r)) G466b@swap)) (lambda () (begin ((lambda (G466d@t) (begin (G465b@G4653 G465f@G4657) (set! G465f@G4657 G466d@t))) (G465b@G4653)) ((lambda (G466f@t) (begin (G465c@G4654 G4660@G4658) (set! G4660@G4658 G466f@t))) (G465c@G4654)) ((lambda (G4671@t) (begin (G465d@G4655 G4661@G4659) (set! G4661@G4659 G4671@t))) (G465d@G4655)) ((lambda (G4673@t) (begin (G465e@G4656 G4662@G465a) (set! G4662@G465a G4673@t))) (G465e@G4656)))))) G3036@top-level-context G2faa@inv-collector G2fac@vis-collector G2fae@imp-collector G4618@env G464b@rtc (G2fa8@make-collector) (G2fa8@make-collector))) (lambda (G4675@G4651 G4676@G4652) ((lambda (G4679@r^ G467a@e) (begin (G2ff0@set-interaction-env-r! G4618@env G4679@r^) (values G467a@e (G464b@rtc)))) G4676@G4652 G4675@G4651)))) (G2d08@make-stx G4617@x G2cba@top-mark* (list G4649@rib) '()))) (G2fe8@interaction-env-rib G4618@env) (G2fea@interaction-env-r G4618@env) (G2fa8@make-collector)) (assertion-violation 'expand '"not an environment" G4618@env))))) (set! G3008@eval (lambda (G467d@x G467e@env) (begin (if (not (G2ffc@environment? G467e@env)) (error 'eval '"not an environment" G467e@env) (void)) (call-with-values (lambda () (G3006@expand G467d@x G467e@env)) (lambda (G4683@G4681 G4684@G4682) ((lambda (G4687@invoke-req* G4688@x) (begin (for-each G2b59@G2a00@invoke-library G4687@invoke-req*) (eval-core (G2932@G28ea@expanded->core G4688@x)))) G4684@G4682 G4683@G4681)))))) (set! G300a@library-expander (lambda G46f0 ((lambda (G46f1) (if (= G46f1 '3) (apply (lambda (G468b@x G468c@filename G468d@verify-name) ((lambda (G4692@build-visit-code G4694@visit!) (begin (set! G4692@build-visit-code (lambda (G46de@macro*) (if (null? G46de@macro*) (G2ca0@G2c12@build-void) (G2c9f@G2c10@build-sequence '#f (map (lambda (G46e0@x) ((lambda (G46e2@loc G46e3@src) (list 'set! G46e2@loc G46e3@src)) (car G46e0@x) (cddr G46e0@x))) G46de@macro*))))) (set! G4694@visit! (lambda (G46d6@macro*) (for-each (lambda (G46d8@x) ((lambda (G46da@loc G46db@proc) (set-symbol-value! G46da@loc G46db@proc)) (car G46d8@x) (cadr G46d8@x))) G46d6@macro*))) (call-with-values (lambda () (G2fb6@core-library-expander G468b@x G468d@verify-name)) (lambda (G469e@G4695 G469f@G4696 G46a0@G4697 G46a1@G4698 G46a2@G4699 G46a3@G469a G46a4@G469b G46a5@G469c G46a6@G469d) ((lambda (G46b0@export-env G46b1@export-subst G46b2@macro* G46b3@invoke-code G46b4@vis* G46b5@inv* G46b6@imp* G46b7@ver G46b8@name) ((lambda (G46c2@id G46c3@name G46c4@ver G46c5@imp* G46c6@vis* G46c7@inv* G46c8@visit-proc G46c9@invoke-proc G46ca@visit-code G46cb@invoke-code) (begin (G2b57@G29fc@install-library G46c2@id G46c3@name G46c4@ver G46c5@imp* G46c6@vis* G46c7@inv* G46b1@export-subst G46b0@export-env G46c8@visit-proc G46c9@invoke-proc G46ca@visit-code G46cb@invoke-code '#t G468c@filename) (values G46c2@id G46c3@name G46c4@ver G46c5@imp* G46c6@vis* G46c7@inv* G46cb@invoke-code G46ca@visit-code G46b1@export-subst G46b0@export-env))) (gensym) G46b8@name G46b7@ver (map G2b5d@G2a08@library-spec G46b6@imp*) (map G2b5d@G2a08@library-spec G46b4@vis*) (map G2b5d@G2a08@library-spec G46b5@inv*) (lambda () (G4694@visit! G46b2@macro*)) (lambda () (eval-core (G2932@G28ea@expanded->core G46b3@invoke-code))) (G4692@build-visit-code G46b2@macro*) G46b3@invoke-code)) G46a6@G469d G46a5@G469c G46a4@G469b G46a3@G469a G46a2@G4699 G46a1@G4698 G46a0@G4697 G469f@G4696 G469e@G4695))))) '#f '#f)) G46f0) (if (= G46f1 '2) (apply (lambda (G46e6@x G46e7@filename) (G300a@library-expander G46e6@x G46e7@filename (lambda (G46ea@x) (values)))) G46f0) (if (= G46f1 '1) (apply (lambda (G46ec@x) (G300a@library-expander G46ec@x '#f (lambda (G46ee@x) (values)))) G46f0) (error 'apply '"invalid arg count"))))) (length G46f0)))) (set! G300c@boot-library-expand (lambda (G46f2@x) (call-with-values (lambda () (G300a@library-expander G46f2@x)) (lambda (G46fe@G46f4 G46ff@G46f5 G4700@G46f6 G4701@G46f7 G4702@G46f8 G4703@G46f9 G4704@G46fa G4705@G46fb G4706@G46fc G4707@G46fd) ((lambda (G4712@export-env G4713@export-subst G4714@visit-code G4715@invoke-code G4716@inv* G4717@vis* G4718@imp* G4719@ver G471a@name G471b@id) (values G471a@name G4715@invoke-code G4713@export-subst G4712@export-env)) G4707@G46fd G4706@G46fc G4705@G46fb G4704@G46fa G4703@G46f9 G4702@G46f8 G4701@G46f7 G4700@G46f6 G46ff@G46f5 G46fe@G46f4))))) (set! G300e@rev-map-append (lambda (G4726@f G4727@ls G4728@ac) (if (null? G4727@ls) G4728@ac (G300e@rev-map-append G4726@f (cdr G4727@ls) (cons (G4726@f (car G4727@ls)) G4728@ac))))) (set! G3010@build-exports (lambda (G472c@lex*+loc* G472d@init*) (G2c9f@G2c10@build-sequence '#f (cons (G2ca0@G2c12@build-void) (G300e@rev-map-append (lambda (G4730@x) (list 'set! (cdr G4730@x) (car G4730@x))) G472c@lex*+loc* G472d@init*))))) (set! G3012@make-export-subst (lambda (G4732@name* G4733@id*) (map (lambda (G4736@name G4737@id) ((lambda (G473a@label) (begin (if (not G473a@label) (G3028@syntax-violation '#f '"cannot export unbound identifier" G4737@id) (void)) (cons G4736@name G473a@label))) (G2d58@id->label G4737@id))) G4732@name* G4733@id*))) (set! G3014@make-export-env/macros (lambda (G473c@lex* G473d@loc* G473e@r) ((lambda (G4743@lookup) (begin (set! G4743@lookup (lambda (G4760@x) ((letrec ((G4762@f (lambda (G4764@x G4765@lex* G4766@loc*) (if (pair? G4765@lex*) (if (eq? G4764@x (car G4765@lex*)) (car G4766@loc*) (G4762@f G4764@x (cdr G4765@lex*) (cdr G4766@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4762@f) G4760@x G473c@lex* G473d@loc*))) ((letrec ((G4744@f (lambda (G4746@r G4747@env G4748@global* G4749@macro*) (if (null? G4746@r) (values G4747@env G4748@global* G4749@macro*) ((lambda (G474e@x) ((lambda (G4750@label G4751@b) ((lambda (G4754@t) (if (memv G4754@t '(lexical)) ((lambda (G4756@v) ((lambda (G4758@loc G4759@type) (G4744@f (cdr G4746@r) (cons (cons* G4750@label G4759@type G4758@loc) G4747@env) (cons (cons (G2ec9@lexical-var G4756@v) G4758@loc) G4748@global*) G4749@macro*)) (G4743@lookup (G2ec9@lexical-var G4756@v)) (if (G2ecb@lexical-mutable? G4756@v) 'mutable 'global))) (G2d62@binding-value G4751@b)) (if (memv G4754@t '(local-macro)) ((lambda (G475c@loc) (G4744@f (cdr G4746@r) (cons (cons* G4750@label 'global-macro G475c@loc) G4747@env) G4748@global* (cons (cons G475c@loc (G2d62@binding-value G4751@b)) G4749@macro*))) (gensym)) (if (memv G4754@t '(local-macro!)) ((lambda (G475e@loc) (G4744@f (cdr G4746@r) (cons (cons* G4750@label 'global-macro! G475e@loc) G4747@env) G4748@global* (cons (cons G475e@loc (G2d62@binding-value G4751@b)) G4749@macro*))) (gensym)) (if (memv G4754@t '($rtd $module)) (G4744@f (cdr G4746@r) (cons G474e@x G4747@env) G4748@global* G4749@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d60@binding-type G4751@b) (G2d62@binding-value G4751@b))))))) (G2d60@binding-type G4751@b))) (car G474e@x) (cdr G474e@x))) (car G4746@r)))))) G4744@f) G473e@r '() '() '()))) '#f))) (set! G3016@generate-temporaries (lambda (G476a@ls) ((lambda (G476c@t) ((lambda (G476e@ls/false) (if G476e@ls/false (apply (lambda (G4770@ls) (map (lambda (G4772@x) (G2d08@make-stx ((lambda (G4774@x) (if (or (symbol? G4774@x) (string? G4774@x)) (gensym G4774@x) (gensym 't))) (G302e@syntax->datum G4772@x)) G2cba@top-mark* '() '())) G4770@ls)) G476e@ls/false) ((lambda (G4776@t) ((lambda (G4778@ls/false) (if G4778@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4778@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G4776@t))) (G2f3d@syntax-dispatch G4776@t '_))) G476c@t))) (G2f3d@syntax-dispatch G476c@t 'each-any))) G476a@ls))) (set! G3018@free-identifier=? (lambda (G477a@x G477b@y) (if (G2d3e@id? G477a@x) (if (G2d3e@id? G477b@y) (G2d46@free-id=? G477a@x G477b@y) (assertion-violation 'free-identifier=? '"not an identifier" G477b@y)) (assertion-violation 'free-identifier=? '"not an identifier" G477a@x)))) (set! G301a@bound-identifier=? (lambda (G477e@x G477f@y) (if (G2d3e@id? G477e@x) (if (G2d3e@id? G477f@y) (G2d44@bound-id=? G477e@x G477f@y) (assertion-violation 'bound-identifier=? '"not an identifier" G477f@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G477e@x)))) (set! G301c@make-source-condition (lambda (G4782@x) ((lambda (G478c@G4787 G478e@G4789 G4790@G4788 G4793@G4786 G4795@make-source-condition G4797@G4784 G4799@G4785 G479b@source-condition? G479d@source-filename G479f@source-character) (begin (set! G478c@G4787 (make-record-type-descriptor '&source-information G4bdc@G492d@&condition-rtd 'G478a '#f '#f '#((immutable file-name) (immutable character)))) (set! G478e@G4789 '#f) (set! G4790@G4788 (make-record-constructor-descriptor G478c@G4787 G4bdd@G492f@&condition-rcd G478e@G4789)) (set! G4793@G4786 (record-predicate G478c@G4787)) (set! G4795@make-source-condition (record-constructor G4790@G4788)) (set! G4797@G4784 (record-accessor G478c@G4787 '0)) (set! G4799@G4785 (record-accessor G478c@G4787 '1)) (set! G479b@source-condition? (condition-predicate G478c@G4787)) (set! G479d@source-filename (condition-accessor G478c@G4787 G4797@G4784)) (set! G479f@source-character (condition-accessor G478c@G4787 G4799@G4785)) (if (pair? G4782@x) (G4795@make-source-condition (car G4782@x) (cdr G4782@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G301e@extract-position-condition (lambda (G47a0@x) (G301c@make-source-condition (G3020@expression-position G47a0@x)))) (set! G3020@expression-position (lambda (G47a2@x) (and (G2d06@stx? G47a2@x) ((lambda (G47a4@x) (and (G28d3@G27fe@annotation? G47a4@x) (G28d4@G2800@annotation-source G47a4@x))) (G2d0a@stx-expr G47a2@x))))) (set! G3022@assertion-error (lambda (G47a6@expr G47a7@pos) (raise (condition (G4c0c@G49ef@make-assertion-violation) (G4c1e@G4a1f@make-who-condition 'assert) (G4be2@G4982@make-message-condition '"assertion failed") (G4c14@G4a05@make-irritants-condition (list G47a6@expr)) (G301c@make-source-condition G47a7@pos))))) (set! G3024@syntax-error (lambda (G47aa@x . G47ac@args) (begin (if (not (for-all string? G47ac@args)) (assertion-violation 'syntax-error '"invalid argument" G47ac@args) (void)) (raise (condition (G4be2@G4982@make-message-condition (if (null? G47ac@args) '"invalid syntax" (apply string-append G47ac@args))) (G4c40@G4a79@make-syntax-violation (G302e@syntax->datum G47aa@x) '#f) (G301e@extract-position-condition G47aa@x)))))) (set! G3026@syntax-violation* (lambda (G47ae@who G47af@msg G47b0@form G47b1@condition-object) (begin (if (not (string? G47af@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47af@msg) (void)) ((lambda (G47b6@who) (raise (condition (if G47b6@who (G4c1e@G4a1f@make-who-condition G47b6@who) (condition)) (G4be2@G4982@make-message-condition G47af@msg) G47b1@condition-object (G301e@extract-position-condition G47b0@form)))) (if (or (string? G47ae@who) (symbol? G47ae@who)) G47ae@who (if (not G47ae@who) ((lambda (G47b8@t) ((lambda (G47ba@ls/false) (if (and G47ba@ls/false (apply (lambda (G47bc@id) (G2d3e@id? G47bc@id)) G47ba@ls/false)) (apply (lambda (G47be@id) (G302e@syntax->datum G47be@id)) G47ba@ls/false) ((lambda (G47c0@t) ((lambda (G47c2@ls/false) (if (and G47c2@ls/false (apply (lambda (G47c4@id G47c5@rest) (G2d3e@id? G47c4@id)) G47c2@ls/false)) (apply (lambda (G47c8@id G47c9@rest) (G302e@syntax->datum G47c8@id)) G47c2@ls/false) ((lambda (G47cc@t) ((lambda (G47ce@ls/false) (if G47ce@ls/false (apply (lambda () '#f) G47ce@ls/false) (G3028@syntax-violation '#f '"invalid syntax" G47cc@t))) (G2f3d@syntax-dispatch G47cc@t '_))) G47c0@t))) (G2f3d@syntax-dispatch G47c0@t '(any . any)))) G47b8@t))) (G2f3d@syntax-dispatch G47b8@t 'any))) G47b0@form) (assertion-violation 'syntax-violation '"invalid who argument" G47ae@who))))))) (set! G3028@syntax-violation (lambda G47de ((lambda (G47df) (if (= G47df '3) (apply (lambda (G47d0@who G47d1@msg G47d2@form) (G3028@syntax-violation G47d0@who G47d1@msg G47d2@form '#f)) G47de) (if (= G47df '4) (apply (lambda (G47d6@who G47d7@msg G47d8@form G47d9@subform) (G3026@syntax-violation* G47d6@who G47d7@msg G47d8@form (G4c40@G4a79@make-syntax-violation (G302e@syntax->datum G47d8@form) (G302e@syntax->datum G47d9@subform)))) G47de) (error 'apply '"invalid arg count")))) (length G47de)))) (set! G302a@identifier? (lambda (G47e0@x) (G2d3e@id? G47e0@x))) (set! G302c@datum->syntax (lambda (G47e2@id G47e3@datum) (if (G2d3e@id? G47e2@id) (G2d1c@datum->stx G47e2@id G47e3@datum) (assertion-violation 'datum->syntax '"not an identifier" G47e2@id)))) (set! G302e@syntax->datum (lambda (G47e6@x) (G2d54@stx->datum G47e6@x))) (set! G3030@compile-r6rs-top-level (lambda (G47e8@x*) (call-with-values (lambda () (G2fba@top-level-expander G47e8@x*)) (lambda (G47ec@G47ea G47ed@G47eb) ((lambda (G47f0@invoke-code G47f1@lib*) (lambda () (begin (for-each G2b59@G2a00@invoke-library G47f1@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2932@G28ea@expanded->core G47f0@invoke-code)) (void)) (eval-core (G2932@G28ea@expanded->core G47f0@invoke-code))))) G47ed@G47eb G47ec@G47ea))))) (set! G3032@pre-compile-r6rs-top-level (lambda (G47f4@x*) (call-with-values (lambda () (G2fba@top-level-expander G47f4@x*)) (lambda (G47f8@G47f6 G47f9@G47f7) ((lambda (G47fc@invoke-code G47fd@lib*) (begin (for-each G2b59@G2a00@invoke-library G47fd@lib*) (G28dc@G2810@compile-core (G2932@G28ea@expanded->core G47fc@invoke-code)))) G47f9@G47f7 G47f8@G47f6))))) (set! G3034@interaction-environment ((lambda (G4800@the-env) (lambda () (or G4800@the-env ((lambda (G4802@lib G4803@rib) (begin ((lambda (G4806@subst) (begin (G2ce3@set-rib-sym*! G4803@rib (map car G4806@subst)) (G2ce5@set-rib-mark**! G4803@rib (map (lambda (G4808@x) G2cba@top-mark*) G4806@subst)) (G2ce7@set-rib-label*! G4803@rib (map cdr G4806@subst)))) (G2b2e@G29aa@library-subst G4802@lib)) ((lambda (G480a@env) (begin (set! G4800@the-env G480a@env) G480a@env)) (G2fe6@make-interaction-env G4803@rib '() '())))) (G2b52@G29f2@find-library-by-name '(mosh interaction)) (G2ced@make-empty-rib))))) '#f)) (set! G3036@top-level-context (G28de@G2814@make-parameter '#f)) (begin (set! G4918@G3036@top-level-context G3036@top-level-context) (set! G4917@G3034@interaction-environment G3034@interaction-environment) (set! G4916@G3032@pre-compile-r6rs-top-level G3032@pre-compile-r6rs-top-level) (set! G4915@G3030@compile-r6rs-top-level G3030@compile-r6rs-top-level) (set! G4914@G302e@syntax->datum G302e@syntax->datum) (set! G4913@G302c@datum->syntax G302c@datum->syntax) (set! G4912@G302a@identifier? G302a@identifier?) (set! G4911@G3028@syntax-violation G3028@syntax-violation) (set! G4910@G3026@syntax-violation* G3026@syntax-violation*) (set! G490f@G3024@syntax-error G3024@syntax-error) (set! G490e@G3022@assertion-error G3022@assertion-error) (set! G490d@G3020@expression-position G3020@expression-position) (set! G490c@G301e@extract-position-condition G301e@extract-position-condition) (set! G490b@G301c@make-source-condition G301c@make-source-condition) (set! G490a@G301a@bound-identifier=? G301a@bound-identifier=?) (set! G4909@G3018@free-identifier=? G3018@free-identifier=?) (set! G4908@G3016@generate-temporaries G3016@generate-temporaries) (set! G4907@G3014@make-export-env/macros G3014@make-export-env/macros) (set! G4906@G3012@make-export-subst G3012@make-export-subst) (set! G4905@G3010@build-exports G3010@build-exports) (set! G4904@G300e@rev-map-append G300e@rev-map-append) (set! G4903@G300c@boot-library-expand G300c@boot-library-expand) (set! G4902@G300a@library-expander G300a@library-expander) (set! G4901@G3008@eval G3008@eval) (set! G4900@G3006@expand G3006@expand) (set! G48ff@G3004@scheme-report-environment G3004@scheme-report-environment) (set! G48fe@G3002@null-environment G3002@null-environment) (set! G48fd@G3000@environment G3000@environment) (set! G48fc@G2ffe@environment-symbols G2ffe@environment-symbols) (set! G48fb@G2ffc@environment? G2ffc@environment?) (set! G48fa@G2ffa@parse-binding G2ffa@parse-binding) (set! G48f9@G2ff8@environment-bindings G2ff8@environment-bindings) (set! G48f8@G2ff6@interaction-environment-symbols G2ff6@interaction-environment-symbols) (set! G48f7@G2ff4@rp G2ff4@rp) (set! G48f6@G2ff2@set-interaction-env-locs! G2ff2@set-interaction-env-locs!) (set! G48f5@G2ff0@set-interaction-env-r! G2ff0@set-interaction-env-r!) (set! G48f4@G2fee@set-interaction-env-rib! G2fee@set-interaction-env-rib!) (set! G48f3@G2fec@interaction-env-locs G2fec@interaction-env-locs) (set! G48f2@G2fea@interaction-env-r G2fea@interaction-env-r) (set! G48f1@G2fe8@interaction-env-rib G2fe8@interaction-env-rib) (set! G48f0@G2fe6@make-interaction-env G2fe6@make-interaction-env) (set! G48ef@G2fe4@interaction-env? G2fe4@interaction-env?) (set! G48ee@G2fe1@G2fd9 G2fe1@G2fd9) (set! G48ed@G2fdf@G2fda G2fdf@G2fda) (set! G48ec@G2fdd@G2fd8 G2fdd@G2fd8) (set! G48eb@G2fd7@rp G2fd7@rp) (set! G48ea@G2fd5@set-env-itc! G2fd5@set-env-itc!) (set! G48e9@G2fd3@set-env-labels! G2fd3@set-env-labels!) (set! G48e8@G2fd1@set-env-names! G2fd1@set-env-names!) (set! G48e7@G2fcf@env-itc G2fcf@env-itc) (set! G48e6@G2fcd@env-labels G2fcd@env-labels) (set! G48e5@G2fcb@env-names G2fcb@env-names) (set! G48e4@G2fc9@make-env G2fc9@make-env) (set! G48e3@G2fc7@env? G2fc7@env?) (set! G48e2@G2fc4@G2fbc G2fc4@G2fbc) (set! G48e1@G2fc2@G2fbd G2fc2@G2fbd) (set! G48e0@G2fc0@G2fbb G2fc0@G2fbb) (set! G48df@G2fba@top-level-expander G2fba@top-level-expander) (set! G48de@G2fb8@parse-top-level-program G2fb8@parse-top-level-program) (set! G48dd@G2fb6@core-library-expander G2fb6@core-library-expander) (set! G48dc@G2fb4@library-body-expander G2fb4@library-body-expander) (set! G48db@G2fb2@chi-interaction-expr G2fb2@chi-interaction-expr) (set! G48da@G2fb0@chi-library-internal G2fb0@chi-library-internal) (set! G48d9@G2fae@imp-collector G2fae@imp-collector) (set! G48d8@G2fac@vis-collector G2fac@vis-collector) (set! G48d7@G2faa@inv-collector G2faa@inv-collector) (set! G48d6@G2fa8@make-collector G2fa8@make-collector) (set! G48d5@G2fa6@make-top-rib G2fa6@make-top-rib) (set! G48d4@G2fa4@parse-import-spec* G2fa4@parse-import-spec*) (set! G48d3@G2fa2@parse-library G2fa2@parse-library) (set! G48d2@G2fa0@parse-library-name G2fa0@parse-library-name) (set! G48d1@G2f9e@parse-exports G2f9e@parse-exports) (set! G48d0@G2f9c@expand-transformer G2f9c@expand-transformer) (set! G48cf@G2f9a@chi-body* G2f9a@chi-body*) (set! G48ce@G2f98@chi-internal-module G2f98@chi-internal-module) (set! G48cd@G2f96@module-interface-exp-id* G2f96@module-interface-exp-id*) (set! G48cc@G2f94@set-module-interface-exp-lab-vec! G2f94@set-module-interface-exp-lab-vec!) (set! G48cb@G2f92@set-module-interface-exp-id-vec! G2f92@set-module-interface-exp-id-vec!) (set! G48ca@G2f90@set-module-interface-first-mark! G2f90@set-module-interface-first-mark!) (set! G48c9@G2f8e@module-interface-exp-lab-vec G2f8e@module-interface-exp-lab-vec) (set! G48c8@G2f8c@module-interface-exp-id-vec G2f8c@module-interface-exp-id-vec) (set! G48c7@G2f8a@module-interface-first-mark G2f8a@module-interface-first-mark) (set! G48c6@G2f88@make-module-interface G2f88@make-module-interface) (set! G48c5@G2f86@module-interface? G2f86@module-interface?) (set! G48c4@G2f83@G2f7b G2f83@G2f7b) (set! G48c3@G2f81@G2f7c G2f81@G2f7c) (set! G48c2@G2f7f@G2f7a G2f7f@G2f7a) (set! G48c1@G2f79@parse-module G2f79@parse-module) (set! G48c0@G2f77@chi-internal G2f77@chi-internal) (set! G48bf@G2f75@find-dups G2f75@find-dups) (set! G48be@G2f73@find-bound=? G2f73@find-bound=?) (set! G48bd@G2f71@chi-rhs* G2f71@chi-rhs*) (set! G48bc@G2f6f@expand-interaction-rhs*/init* G2f6f@expand-interaction-rhs*/init*) (set! G48bb@G2f6d@chi-rhs G2f6d@chi-rhs) (set! G48ba@G2f6b@chi-defun G2f6b@chi-defun) (set! G48b9@G2f69@chi-lambda-clause* G2f69@chi-lambda-clause*) (set! G48b8@G2f67@chi-lambda-clause G2f67@chi-lambda-clause) (set! G48b7@G2f65@verify-formals G2f65@verify-formals) (set! G48b6@G2f63@chi-set! G2f63@chi-set!) (set! G48b5@G2f61@chi-expr G2f61@chi-expr) (set! G48b4@G2f5f@chi-application G2f5f@chi-application) (set! G48b3@G2f5d@chi-expr* G2f5d@chi-expr*) (set! G48b2@G2f5b@chi-global-macro G2f5b@chi-global-macro) (set! G48b1@G2f59@chi-local-macro G2f59@chi-local-macro) (set! G48b0@G2f57@chi-macro G2f57@chi-macro) (set! G48af@G2f55@do-macro-call G2f55@do-macro-call) (set! G48ae@G2f53@local-macro-transformer G2f53@local-macro-transformer) (set! G48ad@G2f51@macro-transformer G2f51@macro-transformer) (set! G48ac@G2f4f@symbol-macro G2f4f@symbol-macro) (set! G48ab@G2f4d@file-options-macro G2f4d@file-options-macro) (set! G48aa@G2f4b@core-macro-transformer G2f4b@core-macro-transformer) (set! G48a9@G2f49@syntax-transformer G2f49@syntax-transformer) (set! G48a8@G2f47@ellipsis-map G2f47@ellipsis-map) (set! G48a7@G2f45@syntax-case-transformer G2f45@syntax-case-transformer) (set! G48a6@G2f43@verify-literals G2f43@verify-literals) (set! G48a5@G2f41@underscore? G2f41@underscore?) (set! G48a4@G2f3f@ellipsis? G2f3f@ellipsis?) (set! G48a3@G2f3d@syntax-dispatch G2f3d@syntax-dispatch) (set! G48a2@G2f3b@convert-pattern G2f3b@convert-pattern) (set! G48a1@G2f39@foreign-call-transformer G2f39@foreign-call-transformer) (set! G48a0@G2f37@parameterize-macro G2f37@parameterize-macro) (set! G489f@G2f35@incorrect-usage-macro G2f35@incorrect-usage-macro) (set! G489e@G2f33@define-condition-type-macro G2f33@define-condition-type-macro) (set! G489d@G2f31@define-record-type-macro G2f31@define-record-type-macro) (set! G489c@G2f2f@define-struct-macro G2f2f@define-struct-macro) (set! G489b@G2f2d@quasisyntax-macro G2f2d@quasisyntax-macro) (set! G489a@G2f2b@quasiquote-macro G2f2b@quasiquote-macro) (set! G4899@G2f29@syntax-rules-macro G2f29@syntax-rules-macro) (set! G4898@G2f27@include-into-macro G2f27@include-into-macro) (set! G4897@G2f25@include-macro G2f25@include-macro) (set! G4896@G2f23@do-include G2f23@do-include) (set! G4895@G2f21@cond-macro G2f21@cond-macro) (set! G4894@G2f1f@and-macro G2f1f@and-macro) (set! G4893@G2f1d@or-macro G2f1d@or-macro) (set! G4892@G2f1b@let*-macro G2f1b@let*-macro) (set! G4891@G2f19@do-macro G2f19@do-macro) (set! G4890@G2f17@identifier-syntax-macro G2f17@identifier-syntax-macro) (set! G488f@G2f15@endianness-macro G2f15@endianness-macro) (set! G488e@G2f13@assert-macro G2f13@assert-macro) (set! G488d@G2f11@delay-macro G2f11@delay-macro) (set! G488c@G2f0f@time-macro G2f0f@time-macro) (set! G488b@G2f0d@define-enumeration-macro G2f0d@define-enumeration-macro) (set! G488a@G2f0b@guard-macro G2f0b@guard-macro) (set! G4889@G2f09@trace-letrec-syntax-macro G2f09@trace-letrec-syntax-macro) (set! G4888@G2f07@trace-let-syntax-macro G2f07@trace-let-syntax-macro) (set! G4887@G2f05@trace-let/rec-syntax G2f05@trace-let/rec-syntax) (set! G4886@G2f03@trace-define-syntax-macro G2f03@trace-define-syntax-macro) (set! G4885@G2f01@trace-define-macro G2f01@trace-define-macro) (set! G4884@G2eff@trace-lambda-macro G2eff@trace-lambda-macro) (set! G4883@G2efd@let*-values-macro G2efd@let*-values-macro) (set! G4882@G2efb@let-values-macro G2efb@let-values-macro) (set! G4881@G2ef9@let-macro G2ef9@let-macro) (set! G4880@G2ef7@invalid-fmls-error G2ef7@invalid-fmls-error) (set! G487f@G2ef5@with-syntax-macro G2ef5@with-syntax-macro) (set! G487e@G2ef3@bless G2ef3@bless) (set! G487d@G2ef1@lambda-transformer G2ef1@lambda-transformer) (set! G487c@G2eef@case-lambda-transformer G2eef@case-lambda-transformer) (set! G487b@G2eed@quote-transformer G2eed@quote-transformer) (set! G487a@G2eeb@case-macro G2eeb@case-macro) (set! G4879@G2ee9@or-transformer G2ee9@or-transformer) (set! G4878@G2ee7@and-transformer G2ee7@and-transformer) (set! G4877@G2ee5@if-transformer G2ee5@if-transformer) (set! G4876@G2ee3@unless-macro G2ee3@unless-macro) (set! G4875@G2ee1@when-macro G2ee1@when-macro) (set! G4874@G2edf@record-constructor-descriptor-transformer G2edf@record-constructor-descriptor-transformer) (set! G4873@G2edd@record-type-descriptor-transformer G2edd@record-type-descriptor-transformer) (set! G4872@G2edb@type-descriptor-transformer G2edb@type-descriptor-transformer) (set! G4871@G2ed9@fluid-let-syntax-transformer G2ed9@fluid-let-syntax-transformer) (set! G4870@G2ed7@letrec*-transformer G2ed7@letrec*-transformer) (set! G486f@G2ed5@letrec-transformer G2ed5@letrec-transformer) (set! G486e@G2ed3@letrec-helper G2ed3@letrec-helper) (set! G486d@G2ed1@add-lexicals G2ed1@add-lexicals) (set! G486c@G2ecf@add-lexical G2ecf@add-lexical) (set! G486b@G2ecd@set-lexical-mutable! G2ecd@set-lexical-mutable!) (set! G486a@G2ecb@lexical-mutable? G2ecb@lexical-mutable?) (set! G4869@G2ec9@lexical-var G2ec9@lexical-var) (set! G4868@G2ec7@scheme-stx G2ec7@scheme-stx) (set! G4867@G2ec5@scheme-stx-hashtable G2ec5@scheme-stx-hashtable) (set! G4866@G2ec3@parse-define-syntax G2ec3@parse-define-syntax) (set! G4865@G2ec1@parse-define G2ec1@parse-define) (set! G4864@G2d7e@make-eval-transformer G2d7e@make-eval-transformer) (set! G4863@G2d7c@variable-transformer-procedure G2d7c@variable-transformer-procedure) (set! G4862@G2d7a@variable-transformer? G2d7a@variable-transformer?) (set! G4861@G2d78@make-variable-transformer G2d78@make-variable-transformer) (set! G4860@G2d76@sanitize-binding G2d76@sanitize-binding) (set! G485f@G2d66@syntax-type G2d66@syntax-type) (set! G485e@G2d64@raise-unbound-error G2d64@raise-unbound-error) (set! G485d@G2d62@binding-value G2d62@binding-value) (set! G485c@G2d60@binding-type G2d60@binding-type) (set! G485b@G2d5e@make-binding G2d5e@make-binding) (set! G485a@G2d5c@label->binding G2d5c@label->binding) (set! G4859@G2d5a@id->real-label G2d5a@id->real-label) (set! G4858@G2d58@id->label G2d58@id->label) (set! G4857@G2d56@same-marks*? G2d56@same-marks*?) (set! G4856@G2d54@stx->datum G2d54@stx->datum) (set! G4855@G2d52@strip G2d52@strip) (set! G4854@G2d50@strip-annotations G2d50@strip-annotations) (set! G4853@G2d4e@self-evaluating? G2d4e@self-evaluating?) (set! G4852@G2d4c@bound-id-member? G2d4c@bound-id-member?) (set! G4851@G2d4a@distinct-bound-ids? G2d4a@distinct-bound-ids?) (set! G4850@G2d48@valid-bound-ids? G2d48@valid-bound-ids?) (set! G484f@G2d46@free-id=? G2d46@free-id=?) (set! G484e@G2d44@bound-id=? G2d44@bound-id=?) (set! G484d@G2d42@same-marks? G2d42@same-marks?) (set! G484c@G2d40@id->sym G2d40@id->sym) (set! G484b@G2d3e@id? G2d3e@id?) (set! G484a@G2d3c@syntax->list G2d3c@syntax->list) (set! G4849@G2d3a@syntax-cdr G2d3a@syntax-cdr) (set! G4848@G2d38@syntax-car G2d38@syntax-car) (set! G4847@G2d36@syntax-list? G2d36@syntax-list?) (set! G4846@G2d34@syntax-null? G2d34@syntax-null?) (set! G4845@G2d32@syntax-vector? G2d32@syntax-vector?) (set! G4844@G2d30@syntax-pair? G2d30@syntax-pair?) (set! G4843@G2d2e@syntax-vector->list G2d2e@syntax-vector->list) (set! G4842@G2d2c@syntax-kind? G2d2c@syntax-kind?) (set! G4841@G2d2a@add-subst G2d2a@add-subst) (set! G4840@G2d28@add-mark G2d28@add-mark) (set! G483f@G2d26@mkstx G2d26@mkstx) (set! G483e@G2d24@join-wraps G2d24@join-wraps) (set! G483d@G2d22@anti-mark? G2d22@anti-mark?) (set! G483c@G2d20@anti-mark G2d20@anti-mark) (set! G483b@G2d1e@gen-mark G2d1e@gen-mark) (set! G483a@G2d1c@datum->stx G2d1c@datum->stx) (set! G4839@G2d1a@rp G2d1a@rp) (set! G4838@G2d18@set-stx-ae*! G2d18@set-stx-ae*!) (set! G4837@G2d16@set-stx-subst*! G2d16@set-stx-subst*!) (set! G4836@G2d14@set-stx-mark*! G2d14@set-stx-mark*!) (set! G4835@G2d12@set-stx-expr! G2d12@set-stx-expr!) (set! G4834@G2d10@stx-ae* G2d10@stx-ae*) (set! G4833@G2d0e@stx-subst* G2d0e@stx-subst*) (set! G4832@G2d0c@stx-mark* G2d0c@stx-mark*) (set! G4831@G2d0a@stx-expr G2d0a@stx-expr) (set! G4830@G2d08@make-stx G2d08@make-stx) (set! G482f@G2d06@stx? G2d06@stx?) (set! G482e@G2d03@G2cfb G2d03@G2cfb) (set! G482d@G2d01@G2cfc G2d01@G2cfc) (set! G482c@G2cff@G2cfa G2cff@G2cfa) (set! G482b@G2cf9@make-full-rib G2cf9@make-full-rib) (set! G482a@G2cf7@unseal-rib! G2cf7@unseal-rib!) (set! G4829@G2cf5@seal-rib! G2cf5@seal-rib!) (set! G4828@G2cf3@make-rib-map G2cf3@make-rib-map) (set! G4827@G2cf1@extend-rib/nc! G2cf1@extend-rib/nc!) (set! G4826@G2cef@extend-rib! G2cef@extend-rib!) (set! G4825@G2ced@make-empty-rib G2ced@make-empty-rib) (set! G4824@G2ceb@set-rib-cache! G2ceb@set-rib-cache!) (set! G4823@G2ce9@set-rib-sealed/freq! G2ce9@set-rib-sealed/freq!) (set! G4822@G2ce7@set-rib-label*! G2ce7@set-rib-label*!) (set! G4821@G2ce5@set-rib-mark**! G2ce5@set-rib-mark**!) (set! G4820@G2ce3@set-rib-sym*! G2ce3@set-rib-sym*!) (set! G481f@G2ce1@rib-cache G2ce1@rib-cache) (set! G481e@G2cdf@rib-sealed/freq G2cdf@rib-sealed/freq) (set! G481d@G2cdd@rib-label* G2cdd@rib-label*) (set! G481c@G2cdb@rib-mark** G2cdb@rib-mark**) (set! G481b@G2cd9@rib-sym* G2cd9@rib-sym*) (set! G481a@G2cd7@make-rib G2cd7@make-rib) (set! G4819@G2cd5@rib? G2cd5@rib?) (set! G4818@G2cd2@G2cca G2cd2@G2cca) (set! G4817@G2cd0@G2ccb G2cd0@G2ccb) (set! G4816@G2cce@G2cc9 G2cce@G2cc9) (set! G4815@G2cc8@gen-define-label G2cc8@gen-define-label) (set! G4814@G2cc6@gen-define-label+loc G2cc6@gen-define-label+loc) (set! G4813@G2cc4@gen-top-level-label G2cc4@gen-top-level-label) (set! G4812@G2cc2@gen-label G2cc2@gen-label) (set! G4811@G2cc0@gen-global G2cc0@gen-global) (set! G4810@G2cbe@gen-lexical G2cbe@gen-lexical) (set! G480f@G2cbc@top-marked? G2cbc@top-marked?) (set! G480e@G2cba@top-mark* G2cba@top-mark*) (set! G480d@G2cb5@set-union G2cb5@set-union) (set! G480c@G2cb3@set-cons G2cb3@set-cons) (G2b4f@G29ec@current-library-expander G300a@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4922@G491d G4924@G491f G4926@G491e G4929@&condition? G492b@make-&condition G492d@&condition-rtd G492f@&condition-rcd G4979@G4974 G497b@G4976 G497d@G4975 G4980@p? G4982@make-message-condition G4984@G4973 G4986@message-condition? G4988@condition-message G498a@&message-rtd G498c@&message-rcd G4992@G498d G4994@G498f G4996@G498e G4999@p? G499b@make-warning G499d@warning? G499f@&warning-rtd G49a1@&warning-rcd G49a7@G49a2 G49a9@G49a4 G49ab@G49a3 G49ae@p? G49b0@make-serious-condition G49b2@serious-condition? G49b4@&serious-rtd G49b6@&serious-rcd G49bc@G49b7 G49be@G49b9 G49c0@G49b8 G49c3@p? G49c5@make-error G49c7@error? G49c9@&error-rtd G49cb@&error-rcd G49d1@G49cc G49d3@G49ce G49d5@G49cd G49d8@p? G49da@make-violation G49dc@violation? G49de@&violation-rtd G49e0@&violation-rcd G49e6@G49e1 G49e8@G49e3 G49ea@G49e2 G49ed@p? G49ef@make-assertion-violation G49f1@assertion-violation? G49f3@&assertion-rtd G49f5@&assertion-rcd G49fc@G49f7 G49fe@G49f9 G4a00@G49f8 G4a03@p? G4a05@make-irritants-condition G4a07@G49f6 G4a09@irritants-condition? G4a0b@condition-irritants G4a0d@&irritants-rtd G4a0f@&irritants-rcd G4a16@G4a11 G4a18@G4a13 G4a1a@G4a12 G4a1d@p? G4a1f@make-who-condition G4a21@G4a10 G4a23@who-condition? G4a25@condition-who G4a27@&who-rtd G4a29@&who-rcd G4a2f@G4a2a G4a31@G4a2c G4a33@G4a2b G4a36@p? G4a38@make-non-continuable-violation G4a3a@non-continuable-violation? G4a3c@&non-continuable-rtd G4a3e@&non-continuable-rcd G4a44@G4a3f G4a46@G4a41 G4a48@G4a40 G4a4b@p? G4a4d@make-implementation-restriction-violation G4a4f@implementation-restriction-violation? G4a51@&implementation-restriction-rtd G4a53@&implementation-restriction-rcd G4a59@G4a54 G4a5b@G4a56 G4a5d@G4a55 G4a60@p? G4a62@make-lexical-violation G4a64@lexical-violation? G4a66@&lexical-rtd G4a68@&lexical-rcd G4a70@G4a6b G4a72@G4a6d G4a74@G4a6c G4a77@p? G4a79@make-syntax-violation G4a7b@G4a69 G4a7d@G4a6a G4a7f@syntax-violation? G4a81@syntax-violation-form G4a83@syntax-violation-subform G4a85@&syntax-rtd G4a87@&syntax-rcd G4a8d@G4a88 G4a8f@G4a8a G4a91@G4a89 G4a94@p? G4a96@make-undefined-violation G4a98@undefined-violation? G4a9a@&undefined-rtd G4a9c@&undefined-rcd G4aa2@G4a9d G4aa4@G4a9f G4aa6@G4a9e G4aa9@p? G4aab@make-i/o-error G4aad@i/o-error? G4aaf@&i/o-rtd G4ab1@&i/o-rcd G4ab7@G4ab2 G4ab9@G4ab4 G4abb@G4ab3 G4abe@p? G4ac0@make-i/o-read-error G4ac2@i/o-read-error? G4ac4@&i/o-read-rtd G4ac6@&i/o-read-rcd G4acc@G4ac7 G4ace@G4ac9 G4ad0@G4ac8 G4ad3@p? G4ad5@make-i/o-write-error G4ad7@i/o-write-error? G4ad9@&i/o-write-rtd G4adb@&i/o-write-rcd G4ae2@G4add G4ae4@G4adf G4ae6@G4ade G4ae9@p? G4aeb@make-i/o-invalid-position-error G4aed@G4adc G4aef@i/o-invalid-position-error? G4af1@i/o-error-position G4af3@&i/o-invalid-position-rtd G4af5@&i/o-invalid-position-rcd G4afc@G4af7 G4afe@G4af9 G4b00@G4af8 G4b03@p? G4b05@make-i/o-filename-error G4b07@G4af6 G4b09@i/o-filename-error? G4b0b@i/o-error-filename G4b0d@&i/o-filename-rtd G4b0f@&i/o-filename-rcd G4b15@G4b10 G4b17@G4b12 G4b19@G4b11 G4b1c@p? G4b1e@make-i/o-file-protection-error G4b20@i/o-file-protection-error? G4b22@&i/o-file-protection-rtd G4b24@&i/o-file-protection-rcd G4b2a@G4b25 G4b2c@G4b27 G4b2e@G4b26 G4b31@p? G4b33@make-i/o-file-is-read-only-error G4b35@i/o-file-is-read-only-error? G4b37@&i/o-file-is-read-only-rtd G4b39@&i/o-file-is-read-only-rcd G4b3f@G4b3a G4b41@G4b3c G4b43@G4b3b G4b46@p? G4b48@make-i/o-file-already-exists-error G4b4a@i/o-file-already-exists-error? G4b4c@&i/o-file-already-exists-rtd G4b4e@&i/o-file-already-exists-rcd G4b54@G4b4f G4b56@G4b51 G4b58@G4b50 G4b5b@p? G4b5d@make-i/o-file-does-not-exist-error G4b5f@i/o-file-does-not-exist-error? G4b61@&i/o-file-does-not-exist-rtd G4b63@&i/o-file-does-not-exist-rcd G4b6a@G4b65 G4b6c@G4b67 G4b6e@G4b66 G4b71@p? G4b73@make-i/o-port-error G4b75@G4b64 G4b77@i/o-port-error? G4b79@i/o-error-port G4b7b@&i/o-port-rtd G4b7d@&i/o-port-rcd G4b83@G4b7e G4b85@G4b80 G4b87@G4b7f G4b8a@p? G4b8c@make-i/o-decoding-error G4b8e@i/o-decoding-error? G4b90@&i/o-decoding-rtd G4b92@&i/o-decoding-rcd G4b99@G4b94 G4b9b@G4b96 G4b9d@G4b95 G4ba0@p? G4ba2@make-i/o-encoding-error G4ba4@G4b93 G4ba6@i/o-encoding-error? G4ba8@i/o-encoding-error-char G4baa@&i/o-encoding-rtd G4bac@&i/o-encoding-rcd G4bb2@G4bad G4bb4@G4baf G4bb6@G4bae G4bb9@p? G4bbb@make-no-infinities-violation G4bbd@no-infinities-violation? G4bbf@&no-infinities-rtd G4bc1@&no-infinities-rcd G4bc7@G4bc2 G4bc9@G4bc4 G4bcb@G4bc3 G4bce@p? G4bd0@make-no-nans-violation G4bd2@no-nans-violation? G4bd4@&no-nans-rtd G4bd6@&no-nans-rcd) (begin (set! G4922@G491d (make-record-type-descriptor '&condition '#f 'G4920 '#f '#f '#())) (set! G4924@G491f '#f) (set! G4926@G491e (make-record-constructor-descriptor G4922@G491d '#f G4924@G491f)) (set! G4929@&condition? (record-predicate G4922@G491d)) (set! G492b@make-&condition (record-constructor G4926@G491e)) (set! G492d@&condition-rtd G4922@G491d) (set! G492f@&condition-rcd G4926@G491e) (set! G4979@G4974 (make-record-type-descriptor '&message G4922@G491d 'G4977 '#f '#f '#((immutable message)))) (set! G497b@G4976 '#f) (set! G497d@G4975 (make-record-constructor-descriptor G4979@G4974 G4926@G491e G497b@G4976)) (set! G4980@p? (record-predicate G4979@G4974)) (set! G4982@make-message-condition (record-constructor G497d@G4975)) (set! G4984@G4973 (record-accessor G4979@G4974 '0)) (set! G4986@message-condition? (condition-predicate G4979@G4974)) (set! G4988@condition-message (condition-accessor G4979@G4974 G4984@G4973)) (set! G498a@&message-rtd G4979@G4974) (set! G498c@&message-rcd G497d@G4975) (set! G4992@G498d (make-record-type-descriptor '&warning G4922@G491d 'G4990 '#f '#f '#())) (set! G4994@G498f '#f) (set! G4996@G498e (make-record-constructor-descriptor G4992@G498d G4926@G491e G4994@G498f)) (set! G4999@p? (record-predicate G4992@G498d)) (set! G499b@make-warning (record-constructor G4996@G498e)) (set! G499d@warning? (condition-predicate G4992@G498d)) (set! G499f@&warning-rtd G4992@G498d) (set! G49a1@&warning-rcd G4996@G498e) (set! G49a7@G49a2 (make-record-type-descriptor '&serious G4922@G491d 'G49a5 '#f '#f '#())) (set! G49a9@G49a4 '#f) (set! G49ab@G49a3 (make-record-constructor-descriptor G49a7@G49a2 G4926@G491e G49a9@G49a4)) (set! G49ae@p? (record-predicate G49a7@G49a2)) (set! G49b0@make-serious-condition (record-constructor G49ab@G49a3)) (set! G49b2@serious-condition? (condition-predicate G49a7@G49a2)) (set! G49b4@&serious-rtd G49a7@G49a2) (set! G49b6@&serious-rcd G49ab@G49a3) (set! G49bc@G49b7 (make-record-type-descriptor '&error G49a7@G49a2 'G49ba '#f '#f '#())) (set! G49be@G49b9 '#f) (set! G49c0@G49b8 (make-record-constructor-descriptor G49bc@G49b7 G49ab@G49a3 G49be@G49b9)) (set! G49c3@p? (record-predicate G49bc@G49b7)) (set! G49c5@make-error (record-constructor G49c0@G49b8)) (set! G49c7@error? (condition-predicate G49bc@G49b7)) (set! G49c9@&error-rtd G49bc@G49b7) (set! G49cb@&error-rcd G49c0@G49b8) (set! G49d1@G49cc (make-record-type-descriptor '&violation G49a7@G49a2 'G49cf '#f '#f '#())) (set! G49d3@G49ce '#f) (set! G49d5@G49cd (make-record-constructor-descriptor G49d1@G49cc G49ab@G49a3 G49d3@G49ce)) (set! G49d8@p? (record-predicate G49d1@G49cc)) (set! G49da@make-violation (record-constructor G49d5@G49cd)) (set! G49dc@violation? (condition-predicate G49d1@G49cc)) (set! G49de@&violation-rtd G49d1@G49cc) (set! G49e0@&violation-rcd G49d5@G49cd) (set! G49e6@G49e1 (make-record-type-descriptor '&assertion G49d1@G49cc 'G49e4 '#f '#f '#())) (set! G49e8@G49e3 '#f) (set! G49ea@G49e2 (make-record-constructor-descriptor G49e6@G49e1 G49d5@G49cd G49e8@G49e3)) (set! G49ed@p? (record-predicate G49e6@G49e1)) (set! G49ef@make-assertion-violation (record-constructor G49ea@G49e2)) (set! G49f1@assertion-violation? (condition-predicate G49e6@G49e1)) (set! G49f3@&assertion-rtd G49e6@G49e1) (set! G49f5@&assertion-rcd G49ea@G49e2) (set! G49fc@G49f7 (make-record-type-descriptor '&irritants G4922@G491d 'G49fa '#f '#f '#((immutable irritants)))) (set! G49fe@G49f9 '#f) (set! G4a00@G49f8 (make-record-constructor-descriptor G49fc@G49f7 G4926@G491e G49fe@G49f9)) (set! G4a03@p? (record-predicate G49fc@G49f7)) (set! G4a05@make-irritants-condition (record-constructor G4a00@G49f8)) (set! G4a07@G49f6 (record-accessor G49fc@G49f7 '0)) (set! G4a09@irritants-condition? (condition-predicate G49fc@G49f7)) (set! G4a0b@condition-irritants (condition-accessor G49fc@G49f7 G4a07@G49f6)) (set! G4a0d@&irritants-rtd G49fc@G49f7) (set! G4a0f@&irritants-rcd G4a00@G49f8) (set! G4a16@G4a11 (make-record-type-descriptor '&who G4922@G491d 'G4a14 '#f '#f '#((immutable who)))) (set! G4a18@G4a13 '#f) (set! G4a1a@G4a12 (make-record-constructor-descriptor G4a16@G4a11 G4926@G491e G4a18@G4a13)) (set! G4a1d@p? (record-predicate G4a16@G4a11)) (set! G4a1f@make-who-condition (record-constructor G4a1a@G4a12)) (set! G4a21@G4a10 (record-accessor G4a16@G4a11 '0)) (set! G4a23@who-condition? (condition-predicate G4a16@G4a11)) (set! G4a25@condition-who (condition-accessor G4a16@G4a11 G4a21@G4a10)) (set! G4a27@&who-rtd G4a16@G4a11) (set! G4a29@&who-rcd G4a1a@G4a12) (set! G4a2f@G4a2a (make-record-type-descriptor '&non-continuable G49d1@G49cc 'G4a2d '#f '#f '#())) (set! G4a31@G4a2c '#f) (set! G4a33@G4a2b (make-record-constructor-descriptor G4a2f@G4a2a G49d5@G49cd G4a31@G4a2c)) (set! G4a36@p? (record-predicate G4a2f@G4a2a)) (set! G4a38@make-non-continuable-violation (record-constructor G4a33@G4a2b)) (set! G4a3a@non-continuable-violation? (condition-predicate G4a2f@G4a2a)) (set! G4a3c@&non-continuable-rtd G4a2f@G4a2a) (set! G4a3e@&non-continuable-rcd G4a33@G4a2b) (set! G4a44@G4a3f (make-record-type-descriptor '&implementation-restriction G49d1@G49cc 'G4a42 '#f '#f '#())) (set! G4a46@G4a41 '#f) (set! G4a48@G4a40 (make-record-constructor-descriptor G4a44@G4a3f G49d5@G49cd G4a46@G4a41)) (set! G4a4b@p? (record-predicate G4a44@G4a3f)) (set! G4a4d@make-implementation-restriction-violation (record-constructor G4a48@G4a40)) (set! G4a4f@implementation-restriction-violation? (condition-predicate G4a44@G4a3f)) (set! G4a51@&implementation-restriction-rtd G4a44@G4a3f) (set! G4a53@&implementation-restriction-rcd G4a48@G4a40) (set! G4a59@G4a54 (make-record-type-descriptor '&lexical G49d1@G49cc 'G4a57 '#f '#f '#())) (set! G4a5b@G4a56 '#f) (set! G4a5d@G4a55 (make-record-constructor-descriptor G4a59@G4a54 G49d5@G49cd G4a5b@G4a56)) (set! G4a60@p? (record-predicate G4a59@G4a54)) (set! G4a62@make-lexical-violation (record-constructor G4a5d@G4a55)) (set! G4a64@lexical-violation? (condition-predicate G4a59@G4a54)) (set! G4a66@&lexical-rtd G4a59@G4a54) (set! G4a68@&lexical-rcd G4a5d@G4a55) (set! G4a70@G4a6b (make-record-type-descriptor '&syntax G49d1@G49cc 'G4a6e '#f '#f '#((immutable form) (immutable subform)))) (set! G4a72@G4a6d '#f) (set! G4a74@G4a6c (make-record-constructor-descriptor G4a70@G4a6b G49d5@G49cd G4a72@G4a6d)) (set! G4a77@p? (record-predicate G4a70@G4a6b)) (set! G4a79@make-syntax-violation (record-constructor G4a74@G4a6c)) (set! G4a7b@G4a69 (record-accessor G4a70@G4a6b '0)) (set! G4a7d@G4a6a (record-accessor G4a70@G4a6b '1)) (set! G4a7f@syntax-violation? (condition-predicate G4a70@G4a6b)) (set! G4a81@syntax-violation-form (condition-accessor G4a70@G4a6b G4a7b@G4a69)) (set! G4a83@syntax-violation-subform (condition-accessor G4a70@G4a6b G4a7d@G4a6a)) (set! G4a85@&syntax-rtd G4a70@G4a6b) (set! G4a87@&syntax-rcd G4a74@G4a6c) (set! G4a8d@G4a88 (make-record-type-descriptor '&undefined G49d1@G49cc 'G4a8b '#f '#f '#())) (set! G4a8f@G4a8a '#f) (set! G4a91@G4a89 (make-record-constructor-descriptor G4a8d@G4a88 G49d5@G49cd G4a8f@G4a8a)) (set! G4a94@p? (record-predicate G4a8d@G4a88)) (set! G4a96@make-undefined-violation (record-constructor G4a91@G4a89)) (set! G4a98@undefined-violation? (condition-predicate G4a8d@G4a88)) (set! G4a9a@&undefined-rtd G4a8d@G4a88) (set! G4a9c@&undefined-rcd G4a91@G4a89) (set! G4aa2@G4a9d (make-record-type-descriptor '&i/o G49bc@G49b7 'G4aa0 '#f '#f '#())) (set! G4aa4@G4a9f '#f) (set! G4aa6@G4a9e (make-record-constructor-descriptor G4aa2@G4a9d G49c0@G49b8 G4aa4@G4a9f)) (set! G4aa9@p? (record-predicate G4aa2@G4a9d)) (set! G4aab@make-i/o-error (record-constructor G4aa6@G4a9e)) (set! G4aad@i/o-error? (condition-predicate G4aa2@G4a9d)) (set! G4aaf@&i/o-rtd G4aa2@G4a9d) (set! G4ab1@&i/o-rcd G4aa6@G4a9e) (set! G4ab7@G4ab2 (make-record-type-descriptor '&i/o-read G4aa2@G4a9d 'G4ab5 '#f '#f '#())) (set! G4ab9@G4ab4 '#f) (set! G4abb@G4ab3 (make-record-constructor-descriptor G4ab7@G4ab2 G4aa6@G4a9e G4ab9@G4ab4)) (set! G4abe@p? (record-predicate G4ab7@G4ab2)) (set! G4ac0@make-i/o-read-error (record-constructor G4abb@G4ab3)) (set! G4ac2@i/o-read-error? (condition-predicate G4ab7@G4ab2)) (set! G4ac4@&i/o-read-rtd G4ab7@G4ab2) (set! G4ac6@&i/o-read-rcd G4abb@G4ab3) (set! G4acc@G4ac7 (make-record-type-descriptor '&i/o-write G4aa2@G4a9d 'G4aca '#f '#f '#())) (set! G4ace@G4ac9 '#f) (set! G4ad0@G4ac8 (make-record-constructor-descriptor G4acc@G4ac7 G4aa6@G4a9e G4ace@G4ac9)) (set! G4ad3@p? (record-predicate G4acc@G4ac7)) (set! G4ad5@make-i/o-write-error (record-constructor G4ad0@G4ac8)) (set! G4ad7@i/o-write-error? (condition-predicate G4acc@G4ac7)) (set! G4ad9@&i/o-write-rtd G4acc@G4ac7) (set! G4adb@&i/o-write-rcd G4ad0@G4ac8) (set! G4ae2@G4add (make-record-type-descriptor '&i/o-invalid-position G4aa2@G4a9d 'G4ae0 '#f '#f '#((immutable position)))) (set! G4ae4@G4adf '#f) (set! G4ae6@G4ade (make-record-constructor-descriptor G4ae2@G4add G4aa6@G4a9e G4ae4@G4adf)) (set! G4ae9@p? (record-predicate G4ae2@G4add)) (set! G4aeb@make-i/o-invalid-position-error (record-constructor G4ae6@G4ade)) (set! G4aed@G4adc (record-accessor G4ae2@G4add '0)) (set! G4aef@i/o-invalid-position-error? (condition-predicate G4ae2@G4add)) (set! G4af1@i/o-error-position (condition-accessor G4ae2@G4add G4aed@G4adc)) (set! G4af3@&i/o-invalid-position-rtd G4ae2@G4add) (set! G4af5@&i/o-invalid-position-rcd G4ae6@G4ade) (set! G4afc@G4af7 (make-record-type-descriptor '&i/o-filename G4aa2@G4a9d 'G4afa '#f '#f '#((immutable filename)))) (set! G4afe@G4af9 '#f) (set! G4b00@G4af8 (make-record-constructor-descriptor G4afc@G4af7 G4aa6@G4a9e G4afe@G4af9)) (set! G4b03@p? (record-predicate G4afc@G4af7)) (set! G4b05@make-i/o-filename-error (record-constructor G4b00@G4af8)) (set! G4b07@G4af6 (record-accessor G4afc@G4af7 '0)) (set! G4b09@i/o-filename-error? (condition-predicate G4afc@G4af7)) (set! G4b0b@i/o-error-filename (condition-accessor G4afc@G4af7 G4b07@G4af6)) (set! G4b0d@&i/o-filename-rtd G4afc@G4af7) (set! G4b0f@&i/o-filename-rcd G4b00@G4af8) (set! G4b15@G4b10 (make-record-type-descriptor '&i/o-file-protection G4afc@G4af7 'G4b13 '#f '#f '#())) (set! G4b17@G4b12 '#f) (set! G4b19@G4b11 (make-record-constructor-descriptor G4b15@G4b10 G4b00@G4af8 G4b17@G4b12)) (set! G4b1c@p? (record-predicate G4b15@G4b10)) (set! G4b1e@make-i/o-file-protection-error (record-constructor G4b19@G4b11)) (set! G4b20@i/o-file-protection-error? (condition-predicate G4b15@G4b10)) (set! G4b22@&i/o-file-protection-rtd G4b15@G4b10) (set! G4b24@&i/o-file-protection-rcd G4b19@G4b11) (set! G4b2a@G4b25 (make-record-type-descriptor '&i/o-file-is-read-only G4b15@G4b10 'G4b28 '#f '#f '#())) (set! G4b2c@G4b27 '#f) (set! G4b2e@G4b26 (make-record-constructor-descriptor G4b2a@G4b25 G4b19@G4b11 G4b2c@G4b27)) (set! G4b31@p? (record-predicate G4b2a@G4b25)) (set! G4b33@make-i/o-file-is-read-only-error (record-constructor G4b2e@G4b26)) (set! G4b35@i/o-file-is-read-only-error? (condition-predicate G4b2a@G4b25)) (set! G4b37@&i/o-file-is-read-only-rtd G4b2a@G4b25) (set! G4b39@&i/o-file-is-read-only-rcd G4b2e@G4b26) (set! G4b3f@G4b3a (make-record-type-descriptor '&i/o-file-already-exists G4afc@G4af7 'G4b3d '#f '#f '#())) (set! G4b41@G4b3c '#f) (set! G4b43@G4b3b (make-record-constructor-descriptor G4b3f@G4b3a G4b00@G4af8 G4b41@G4b3c)) (set! G4b46@p? (record-predicate G4b3f@G4b3a)) (set! G4b48@make-i/o-file-already-exists-error (record-constructor G4b43@G4b3b)) (set! G4b4a@i/o-file-already-exists-error? (condition-predicate G4b3f@G4b3a)) (set! G4b4c@&i/o-file-already-exists-rtd G4b3f@G4b3a) (set! G4b4e@&i/o-file-already-exists-rcd G4b43@G4b3b) (set! G4b54@G4b4f (make-record-type-descriptor '&i/o-file-does-not-exist G4afc@G4af7 'G4b52 '#f '#f '#())) (set! G4b56@G4b51 '#f) (set! G4b58@G4b50 (make-record-constructor-descriptor G4b54@G4b4f G4b00@G4af8 G4b56@G4b51)) (set! G4b5b@p? (record-predicate G4b54@G4b4f)) (set! G4b5d@make-i/o-file-does-not-exist-error (record-constructor G4b58@G4b50)) (set! G4b5f@i/o-file-does-not-exist-error? (condition-predicate G4b54@G4b4f)) (set! G4b61@&i/o-file-does-not-exist-rtd G4b54@G4b4f) (set! G4b63@&i/o-file-does-not-exist-rcd G4b58@G4b50) (set! G4b6a@G4b65 (make-record-type-descriptor '&i/o-port G4aa2@G4a9d 'G4b68 '#f '#f '#((immutable port)))) (set! G4b6c@G4b67 '#f) (set! G4b6e@G4b66 (make-record-constructor-descriptor G4b6a@G4b65 G4aa6@G4a9e G4b6c@G4b67)) (set! G4b71@p? (record-predicate G4b6a@G4b65)) (set! G4b73@make-i/o-port-error (record-constructor G4b6e@G4b66)) (set! G4b75@G4b64 (record-accessor G4b6a@G4b65 '0)) (set! G4b77@i/o-port-error? (condition-predicate G4b6a@G4b65)) (set! G4b79@i/o-error-port (condition-accessor G4b6a@G4b65 G4b75@G4b64)) (set! G4b7b@&i/o-port-rtd G4b6a@G4b65) (set! G4b7d@&i/o-port-rcd G4b6e@G4b66) (set! G4b83@G4b7e (make-record-type-descriptor '&i/o-decoding G4b6a@G4b65 'G4b81 '#f '#f '#())) (set! G4b85@G4b80 '#f) (set! G4b87@G4b7f (make-record-constructor-descriptor G4b83@G4b7e G4b6e@G4b66 G4b85@G4b80)) (set! G4b8a@p? (record-predicate G4b83@G4b7e)) (set! G4b8c@make-i/o-decoding-error (record-constructor G4b87@G4b7f)) (set! G4b8e@i/o-decoding-error? (condition-predicate G4b83@G4b7e)) (set! G4b90@&i/o-decoding-rtd G4b83@G4b7e) (set! G4b92@&i/o-decoding-rcd G4b87@G4b7f) (set! G4b99@G4b94 (make-record-type-descriptor '&i/o-encoding G4b6a@G4b65 'G4b97 '#f '#f '#((immutable char)))) (set! G4b9b@G4b96 '#f) (set! G4b9d@G4b95 (make-record-constructor-descriptor G4b99@G4b94 G4b6e@G4b66 G4b9b@G4b96)) (set! G4ba0@p? (record-predicate G4b99@G4b94)) (set! G4ba2@make-i/o-encoding-error (record-constructor G4b9d@G4b95)) (set! G4ba4@G4b93 (record-accessor G4b99@G4b94 '0)) (set! G4ba6@i/o-encoding-error? (condition-predicate G4b99@G4b94)) (set! G4ba8@i/o-encoding-error-char (condition-accessor G4b99@G4b94 G4ba4@G4b93)) (set! G4baa@&i/o-encoding-rtd G4b99@G4b94) (set! G4bac@&i/o-encoding-rcd G4b9d@G4b95) (set! G4bb2@G4bad (make-record-type-descriptor '&no-infinities G4a44@G4a3f 'G4bb0 '#f '#f '#())) (set! G4bb4@G4baf '#f) (set! G4bb6@G4bae (make-record-constructor-descriptor G4bb2@G4bad G4a48@G4a40 G4bb4@G4baf)) (set! G4bb9@p? (record-predicate G4bb2@G4bad)) (set! G4bbb@make-no-infinities-violation (record-constructor G4bb6@G4bae)) (set! G4bbd@no-infinities-violation? (condition-predicate G4bb2@G4bad)) (set! G4bbf@&no-infinities-rtd G4bb2@G4bad) (set! G4bc1@&no-infinities-rcd G4bb6@G4bae) (set! G4bc7@G4bc2 (make-record-type-descriptor '&no-nans G4a44@G4a3f 'G4bc5 '#f '#f '#())) (set! G4bc9@G4bc4 '#f) (set! G4bcb@G4bc3 (make-record-constructor-descriptor G4bc7@G4bc2 G4a48@G4a40 G4bc9@G4bc4)) (set! G4bce@p? (record-predicate G4bc7@G4bc2)) (set! G4bd0@make-no-nans-violation (record-constructor G4bcb@G4bc3)) (set! G4bd2@no-nans-violation? (condition-predicate G4bc7@G4bc2)) (set! G4bd4@&no-nans-rtd G4bc7@G4bc2) (set! G4bd6@&no-nans-rcd G4bcb@G4bc3) (begin (set! G4cc7@G4bd6@&no-nans-rcd G4bd6@&no-nans-rcd) (set! G4cc6@G4bd4@&no-nans-rtd G4bd4@&no-nans-rtd) (set! G4cc5@G4bd2@no-nans-violation? G4bd2@no-nans-violation?) (set! G4cc4@G4bd0@make-no-nans-violation G4bd0@make-no-nans-violation) (set! G4cc3@G4bce@p? G4bce@p?) (set! G4cc2@G4bcb@G4bc3 G4bcb@G4bc3) (set! G4cc1@G4bc9@G4bc4 G4bc9@G4bc4) (set! G4cc0@G4bc7@G4bc2 G4bc7@G4bc2) (set! G4cbf@G4bc1@&no-infinities-rcd G4bc1@&no-infinities-rcd) (set! G4cbe@G4bbf@&no-infinities-rtd G4bbf@&no-infinities-rtd) (set! G4cbd@G4bbd@no-infinities-violation? G4bbd@no-infinities-violation?) (set! G4cbc@G4bbb@make-no-infinities-violation G4bbb@make-no-infinities-violation) (set! G4cbb@G4bb9@p? G4bb9@p?) (set! G4cba@G4bb6@G4bae G4bb6@G4bae) (set! G4cb9@G4bb4@G4baf G4bb4@G4baf) (set! G4cb8@G4bb2@G4bad G4bb2@G4bad) (set! G4cb7@G4bac@&i/o-encoding-rcd G4bac@&i/o-encoding-rcd) (set! G4cb6@G4baa@&i/o-encoding-rtd G4baa@&i/o-encoding-rtd) (set! G4cb5@G4ba8@i/o-encoding-error-char G4ba8@i/o-encoding-error-char) (set! G4cb4@G4ba6@i/o-encoding-error? G4ba6@i/o-encoding-error?) (set! G4cb3@G4ba4@G4b93 G4ba4@G4b93) (set! G4cb2@G4ba2@make-i/o-encoding-error G4ba2@make-i/o-encoding-error) (set! G4cb1@G4ba0@p? G4ba0@p?) (set! G4cb0@G4b9d@G4b95 G4b9d@G4b95) (set! G4caf@G4b9b@G4b96 G4b9b@G4b96) (set! G4cae@G4b99@G4b94 G4b99@G4b94) (set! G4cad@G4b92@&i/o-decoding-rcd G4b92@&i/o-decoding-rcd) (set! G4cac@G4b90@&i/o-decoding-rtd G4b90@&i/o-decoding-rtd) (set! G4cab@G4b8e@i/o-decoding-error? G4b8e@i/o-decoding-error?) (set! G4caa@G4b8c@make-i/o-decoding-error G4b8c@make-i/o-decoding-error) (set! G4ca9@G4b8a@p? G4b8a@p?) (set! G4ca8@G4b87@G4b7f G4b87@G4b7f) (set! G4ca7@G4b85@G4b80 G4b85@G4b80) (set! G4ca6@G4b83@G4b7e G4b83@G4b7e) (set! G4ca5@G4b7d@&i/o-port-rcd G4b7d@&i/o-port-rcd) (set! G4ca4@G4b7b@&i/o-port-rtd G4b7b@&i/o-port-rtd) (set! G4ca3@G4b79@i/o-error-port G4b79@i/o-error-port) (set! G4ca2@G4b77@i/o-port-error? G4b77@i/o-port-error?) (set! G4ca1@G4b75@G4b64 G4b75@G4b64) (set! G4ca0@G4b73@make-i/o-port-error G4b73@make-i/o-port-error) (set! G4c9f@G4b71@p? G4b71@p?) (set! G4c9e@G4b6e@G4b66 G4b6e@G4b66) (set! G4c9d@G4b6c@G4b67 G4b6c@G4b67) (set! G4c9c@G4b6a@G4b65 G4b6a@G4b65) (set! G4c9b@G4b63@&i/o-file-does-not-exist-rcd G4b63@&i/o-file-does-not-exist-rcd) (set! G4c9a@G4b61@&i/o-file-does-not-exist-rtd G4b61@&i/o-file-does-not-exist-rtd) (set! G4c99@G4b5f@i/o-file-does-not-exist-error? G4b5f@i/o-file-does-not-exist-error?) (set! G4c98@G4b5d@make-i/o-file-does-not-exist-error G4b5d@make-i/o-file-does-not-exist-error) (set! G4c97@G4b5b@p? G4b5b@p?) (set! G4c96@G4b58@G4b50 G4b58@G4b50) (set! G4c95@G4b56@G4b51 G4b56@G4b51) (set! G4c94@G4b54@G4b4f G4b54@G4b4f) (set! G4c93@G4b4e@&i/o-file-already-exists-rcd G4b4e@&i/o-file-already-exists-rcd) (set! G4c92@G4b4c@&i/o-file-already-exists-rtd G4b4c@&i/o-file-already-exists-rtd) (set! G4c91@G4b4a@i/o-file-already-exists-error? G4b4a@i/o-file-already-exists-error?) (set! G4c90@G4b48@make-i/o-file-already-exists-error G4b48@make-i/o-file-already-exists-error) (set! G4c8f@G4b46@p? G4b46@p?) (set! G4c8e@G4b43@G4b3b G4b43@G4b3b) (set! G4c8d@G4b41@G4b3c G4b41@G4b3c) (set! G4c8c@G4b3f@G4b3a G4b3f@G4b3a) (set! G4c8b@G4b39@&i/o-file-is-read-only-rcd G4b39@&i/o-file-is-read-only-rcd) (set! G4c8a@G4b37@&i/o-file-is-read-only-rtd G4b37@&i/o-file-is-read-only-rtd) (set! G4c89@G4b35@i/o-file-is-read-only-error? G4b35@i/o-file-is-read-only-error?) (set! G4c88@G4b33@make-i/o-file-is-read-only-error G4b33@make-i/o-file-is-read-only-error) (set! G4c87@G4b31@p? G4b31@p?) (set! G4c86@G4b2e@G4b26 G4b2e@G4b26) (set! G4c85@G4b2c@G4b27 G4b2c@G4b27) (set! G4c84@G4b2a@G4b25 G4b2a@G4b25) (set! G4c83@G4b24@&i/o-file-protection-rcd G4b24@&i/o-file-protection-rcd) (set! G4c82@G4b22@&i/o-file-protection-rtd G4b22@&i/o-file-protection-rtd) (set! G4c81@G4b20@i/o-file-protection-error? G4b20@i/o-file-protection-error?) (set! G4c80@G4b1e@make-i/o-file-protection-error G4b1e@make-i/o-file-protection-error) (set! G4c7f@G4b1c@p? G4b1c@p?) (set! G4c7e@G4b19@G4b11 G4b19@G4b11) (set! G4c7d@G4b17@G4b12 G4b17@G4b12) (set! G4c7c@G4b15@G4b10 G4b15@G4b10) (set! G4c7b@G4b0f@&i/o-filename-rcd G4b0f@&i/o-filename-rcd) (set! G4c7a@G4b0d@&i/o-filename-rtd G4b0d@&i/o-filename-rtd) (set! G4c79@G4b0b@i/o-error-filename G4b0b@i/o-error-filename) (set! G4c78@G4b09@i/o-filename-error? G4b09@i/o-filename-error?) (set! G4c77@G4b07@G4af6 G4b07@G4af6) (set! G4c76@G4b05@make-i/o-filename-error G4b05@make-i/o-filename-error) (set! G4c75@G4b03@p? G4b03@p?) (set! G4c74@G4b00@G4af8 G4b00@G4af8) (set! G4c73@G4afe@G4af9 G4afe@G4af9) (set! G4c72@G4afc@G4af7 G4afc@G4af7) (set! G4c71@G4af5@&i/o-invalid-position-rcd G4af5@&i/o-invalid-position-rcd) (set! G4c70@G4af3@&i/o-invalid-position-rtd G4af3@&i/o-invalid-position-rtd) (set! G4c6f@G4af1@i/o-error-position G4af1@i/o-error-position) (set! G4c6e@G4aef@i/o-invalid-position-error? G4aef@i/o-invalid-position-error?) (set! G4c6d@G4aed@G4adc G4aed@G4adc) (set! G4c6c@G4aeb@make-i/o-invalid-position-error G4aeb@make-i/o-invalid-position-error) (set! G4c6b@G4ae9@p? G4ae9@p?) (set! G4c6a@G4ae6@G4ade G4ae6@G4ade) (set! G4c69@G4ae4@G4adf G4ae4@G4adf) (set! G4c68@G4ae2@G4add G4ae2@G4add) (set! G4c67@G4adb@&i/o-write-rcd G4adb@&i/o-write-rcd) (set! G4c66@G4ad9@&i/o-write-rtd G4ad9@&i/o-write-rtd) (set! G4c65@G4ad7@i/o-write-error? G4ad7@i/o-write-error?) (set! G4c64@G4ad5@make-i/o-write-error G4ad5@make-i/o-write-error) (set! G4c63@G4ad3@p? G4ad3@p?) (set! G4c62@G4ad0@G4ac8 G4ad0@G4ac8) (set! G4c61@G4ace@G4ac9 G4ace@G4ac9) (set! G4c60@G4acc@G4ac7 G4acc@G4ac7) (set! G4c5f@G4ac6@&i/o-read-rcd G4ac6@&i/o-read-rcd) (set! G4c5e@G4ac4@&i/o-read-rtd G4ac4@&i/o-read-rtd) (set! G4c5d@G4ac2@i/o-read-error? G4ac2@i/o-read-error?) (set! G4c5c@G4ac0@make-i/o-read-error G4ac0@make-i/o-read-error) (set! G4c5b@G4abe@p? G4abe@p?) (set! G4c5a@G4abb@G4ab3 G4abb@G4ab3) (set! G4c59@G4ab9@G4ab4 G4ab9@G4ab4) (set! G4c58@G4ab7@G4ab2 G4ab7@G4ab2) (set! G4c57@G4ab1@&i/o-rcd G4ab1@&i/o-rcd) (set! G4c56@G4aaf@&i/o-rtd G4aaf@&i/o-rtd) (set! G4c55@G4aad@i/o-error? G4aad@i/o-error?) (set! G4c54@G4aab@make-i/o-error G4aab@make-i/o-error) (set! G4c53@G4aa9@p? G4aa9@p?) (set! G4c52@G4aa6@G4a9e G4aa6@G4a9e) (set! G4c51@G4aa4@G4a9f G4aa4@G4a9f) (set! G4c50@G4aa2@G4a9d G4aa2@G4a9d) (set! G4c4f@G4a9c@&undefined-rcd G4a9c@&undefined-rcd) (set! G4c4e@G4a9a@&undefined-rtd G4a9a@&undefined-rtd) (set! G4c4d@G4a98@undefined-violation? G4a98@undefined-violation?) (set! G4c4c@G4a96@make-undefined-violation G4a96@make-undefined-violation) (set! G4c4b@G4a94@p? G4a94@p?) (set! G4c4a@G4a91@G4a89 G4a91@G4a89) (set! G4c49@G4a8f@G4a8a G4a8f@G4a8a) (set! G4c48@G4a8d@G4a88 G4a8d@G4a88) (set! G4c47@G4a87@&syntax-rcd G4a87@&syntax-rcd) (set! G4c46@G4a85@&syntax-rtd G4a85@&syntax-rtd) (set! G4c45@G4a83@syntax-violation-subform G4a83@syntax-violation-subform) (set! G4c44@G4a81@syntax-violation-form G4a81@syntax-violation-form) (set! G4c43@G4a7f@syntax-violation? G4a7f@syntax-violation?) (set! G4c42@G4a7d@G4a6a G4a7d@G4a6a) (set! G4c41@G4a7b@G4a69 G4a7b@G4a69) (set! G4c40@G4a79@make-syntax-violation G4a79@make-syntax-violation) (set! G4c3f@G4a77@p? G4a77@p?) (set! G4c3e@G4a74@G4a6c G4a74@G4a6c) (set! G4c3d@G4a72@G4a6d G4a72@G4a6d) (set! G4c3c@G4a70@G4a6b G4a70@G4a6b) (set! G4c3b@G4a68@&lexical-rcd G4a68@&lexical-rcd) (set! G4c3a@G4a66@&lexical-rtd G4a66@&lexical-rtd) (set! G4c39@G4a64@lexical-violation? G4a64@lexical-violation?) (set! G4c38@G4a62@make-lexical-violation G4a62@make-lexical-violation) (set! G4c37@G4a60@p? G4a60@p?) (set! G4c36@G4a5d@G4a55 G4a5d@G4a55) (set! G4c35@G4a5b@G4a56 G4a5b@G4a56) (set! G4c34@G4a59@G4a54 G4a59@G4a54) (set! G4c33@G4a53@&implementation-restriction-rcd G4a53@&implementation-restriction-rcd) (set! G4c32@G4a51@&implementation-restriction-rtd G4a51@&implementation-restriction-rtd) (set! G4c31@G4a4f@implementation-restriction-violation? G4a4f@implementation-restriction-violation?) (set! G4c30@G4a4d@make-implementation-restriction-violation G4a4d@make-implementation-restriction-violation) (set! G4c2f@G4a4b@p? G4a4b@p?) (set! G4c2e@G4a48@G4a40 G4a48@G4a40) (set! G4c2d@G4a46@G4a41 G4a46@G4a41) (set! G4c2c@G4a44@G4a3f G4a44@G4a3f) (set! G4c2b@G4a3e@&non-continuable-rcd G4a3e@&non-continuable-rcd) (set! G4c2a@G4a3c@&non-continuable-rtd G4a3c@&non-continuable-rtd) (set! G4c29@G4a3a@non-continuable-violation? G4a3a@non-continuable-violation?) (set! G4c28@G4a38@make-non-continuable-violation G4a38@make-non-continuable-violation) (set! G4c27@G4a36@p? G4a36@p?) (set! G4c26@G4a33@G4a2b G4a33@G4a2b) (set! G4c25@G4a31@G4a2c G4a31@G4a2c) (set! G4c24@G4a2f@G4a2a G4a2f@G4a2a) (set! G4c23@G4a29@&who-rcd G4a29@&who-rcd) (set! G4c22@G4a27@&who-rtd G4a27@&who-rtd) (set! G4c21@G4a25@condition-who G4a25@condition-who) (set! G4c20@G4a23@who-condition? G4a23@who-condition?) (set! G4c1f@G4a21@G4a10 G4a21@G4a10) (set! G4c1e@G4a1f@make-who-condition G4a1f@make-who-condition) (set! G4c1d@G4a1d@p? G4a1d@p?) (set! G4c1c@G4a1a@G4a12 G4a1a@G4a12) (set! G4c1b@G4a18@G4a13 G4a18@G4a13) (set! G4c1a@G4a16@G4a11 G4a16@G4a11) (set! G4c19@G4a0f@&irritants-rcd G4a0f@&irritants-rcd) (set! G4c18@G4a0d@&irritants-rtd G4a0d@&irritants-rtd) (set! G4c17@G4a0b@condition-irritants G4a0b@condition-irritants) (set! G4c16@G4a09@irritants-condition? G4a09@irritants-condition?) (set! G4c15@G4a07@G49f6 G4a07@G49f6) (set! G4c14@G4a05@make-irritants-condition G4a05@make-irritants-condition) (set! G4c13@G4a03@p? G4a03@p?) (set! G4c12@G4a00@G49f8 G4a00@G49f8) (set! G4c11@G49fe@G49f9 G49fe@G49f9) (set! G4c10@G49fc@G49f7 G49fc@G49f7) (set! G4c0f@G49f5@&assertion-rcd G49f5@&assertion-rcd) (set! G4c0e@G49f3@&assertion-rtd G49f3@&assertion-rtd) (set! G4c0d@G49f1@assertion-violation? G49f1@assertion-violation?) (set! G4c0c@G49ef@make-assertion-violation G49ef@make-assertion-violation) (set! G4c0b@G49ed@p? G49ed@p?) (set! G4c0a@G49ea@G49e2 G49ea@G49e2) (set! G4c09@G49e8@G49e3 G49e8@G49e3) (set! G4c08@G49e6@G49e1 G49e6@G49e1) (set! G4c07@G49e0@&violation-rcd G49e0@&violation-rcd) (set! G4c06@G49de@&violation-rtd G49de@&violation-rtd) (set! G4c05@G49dc@violation? G49dc@violation?) (set! G4c04@G49da@make-violation G49da@make-violation) (set! G4c03@G49d8@p? G49d8@p?) (set! G4c02@G49d5@G49cd G49d5@G49cd) (set! G4c01@G49d3@G49ce G49d3@G49ce) (set! G4c00@G49d1@G49cc G49d1@G49cc) (set! G4bff@G49cb@&error-rcd G49cb@&error-rcd) (set! G4bfe@G49c9@&error-rtd G49c9@&error-rtd) (set! G4bfd@G49c7@error? G49c7@error?) (set! G4bfc@G49c5@make-error G49c5@make-error) (set! G4bfb@G49c3@p? G49c3@p?) (set! G4bfa@G49c0@G49b8 G49c0@G49b8) (set! G4bf9@G49be@G49b9 G49be@G49b9) (set! G4bf8@G49bc@G49b7 G49bc@G49b7) (set! G4bf7@G49b6@&serious-rcd G49b6@&serious-rcd) (set! G4bf6@G49b4@&serious-rtd G49b4@&serious-rtd) (set! G4bf5@G49b2@serious-condition? G49b2@serious-condition?) (set! G4bf4@G49b0@make-serious-condition G49b0@make-serious-condition) (set! G4bf3@G49ae@p? G49ae@p?) (set! G4bf2@G49ab@G49a3 G49ab@G49a3) (set! G4bf1@G49a9@G49a4 G49a9@G49a4) (set! G4bf0@G49a7@G49a2 G49a7@G49a2) (set! G4bef@G49a1@&warning-rcd G49a1@&warning-rcd) (set! G4bee@G499f@&warning-rtd G499f@&warning-rtd) (set! G4bed@G499d@warning? G499d@warning?) (set! G4bec@G499b@make-warning G499b@make-warning) (set! G4beb@G4999@p? G4999@p?) (set! G4bea@G4996@G498e G4996@G498e) (set! G4be9@G4994@G498f G4994@G498f) (set! G4be8@G4992@G498d G4992@G498d) (set! G4be7@G498c@&message-rcd G498c@&message-rcd) (set! G4be6@G498a@&message-rtd G498a@&message-rtd) (set! G4be5@G4988@condition-message G4988@condition-message) (set! G4be4@G4986@message-condition? G4986@message-condition?) (set! G4be3@G4984@G4973 G4984@G4973) (set! G4be2@G4982@make-message-condition G4982@make-message-condition) (set! G4be1@G4980@p? G4980@p?) (set! G4be0@G497d@G4975 G497d@G4975) (set! G4bdf@G497b@G4976 G497b@G4976) (set! G4bde@G4979@G4974 G4979@G4974) (set! G4bdd@G492f@&condition-rcd G492f@&condition-rcd) (set! G4bdc@G492d@&condition-rtd G492d@&condition-rtd) (set! G4bdb@G492b@make-&condition G492b@make-&condition) (set! G4bda@G4929@&condition? G4929@&condition?) (set! G4bd9@G4926@G491e G4926@G491e) (set! G4bd8@G4924@G491f G4924@G491f) (set! G4bd7@G4922@G491d G4922@G491d)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G292f@G28e4@current-primitive-locations (lambda (G50a7@x) ((lambda (G50a9@t) (if G50a9@t (cdr G50a9@t) '#f)) (assq G50a7@x '((&no-nans-rcd . G4cc7@G4bd6@&no-nans-rcd) (&no-nans-rtd . G4cc6@G4bd4@&no-nans-rtd) (&no-infinities-rcd . G4cbf@G4bc1@&no-infinities-rcd) (&no-infinities-rtd . G4cbe@G4bbf@&no-infinities-rtd) (&i/o-encoding-rcd . G4cb7@G4bac@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4cb6@G4baa@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4cad@G4b92@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4cac@G4b90@&i/o-decoding-rtd) (&i/o-port-rcd . G4ca5@G4b7d@&i/o-port-rcd) (&i/o-port-rtd . G4ca4@G4b7b@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4c9b@G4b63@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4c9a@G4b61@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4c93@G4b4e@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4c92@G4b4c@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4c8b@G4b39@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4c8a@G4b37@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4c83@G4b24@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4c82@G4b22@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4c7b@G4b0f@&i/o-filename-rcd) (&i/o-filename-rtd . G4c7a@G4b0d@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4c71@G4af5@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4c70@G4af3@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4c67@G4adb@&i/o-write-rcd) (&i/o-write-rtd . G4c66@G4ad9@&i/o-write-rtd) (&i/o-read-rcd . G4c5f@G4ac6@&i/o-read-rcd) (&i/o-read-rtd . G4c5e@G4ac4@&i/o-read-rtd) (&i/o-rcd . G4c57@G4ab1@&i/o-rcd) (&i/o-rtd . G4c56@G4aaf@&i/o-rtd) (&undefined-rcd . G4c4f@G4a9c@&undefined-rcd) (&undefined-rtd . G4c4e@G4a9a@&undefined-rtd) (&syntax-rcd . G4c47@G4a87@&syntax-rcd) (&syntax-rtd . G4c46@G4a85@&syntax-rtd) (&lexical-rcd . G4c3b@G4a68@&lexical-rcd) (&lexical-rtd . G4c3a@G4a66@&lexical-rtd) (&implementation-restriction-rcd . G4c33@G4a53@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c32@G4a51@&implementation-restriction-rtd) (&non-continuable-rcd . G4c2b@G4a3e@&non-continuable-rcd) (&non-continuable-rtd . G4c2a@G4a3c@&non-continuable-rtd) (&who-rcd . G4c23@G4a29@&who-rcd) (&who-rtd . G4c22@G4a27@&who-rtd) (&irritants-rcd . G4c19@G4a0f@&irritants-rcd) (&irritants-rtd . G4c18@G4a0d@&irritants-rtd) (&assertion-rcd . G4c0f@G49f5@&assertion-rcd) (&assertion-rtd . G4c0e@G49f3@&assertion-rtd) (&violation-rcd . G4c07@G49e0@&violation-rcd) (&violation-rtd . G4c06@G49de@&violation-rtd) (&error-rcd . G4bff@G49cb@&error-rcd) (&error-rtd . G4bfe@G49c9@&error-rtd) (&serious-rcd . G4bf7@G49b6@&serious-rcd) (&serious-rtd . G4bf6@G49b4@&serious-rtd) (&warning-rcd . G4bef@G49a1@&warning-rcd) (&warning-rtd . G4bee@G499f@&warning-rtd) (&message-rcd . G4be7@G498c@&message-rcd) (&message-rtd . G4be6@G498a@&message-rtd) (&condition-rcd . G4bdd@G492f@&condition-rcd) (&condition-rtd . G4bdc@G492d@&condition-rtd) (syntax-error . G490f@G3024@syntax-error) (syntax-dispatch . G48a3@G2f3d@syntax-dispatch) (load . G4d99@G4cdd@load) (interaction-environment . G4917@G3034@interaction-environment) (make-parameter . G28de@G2814@make-parameter) (make-variable-transformer . G4861@G2d78@make-variable-transformer) (identifier? . G4912@G302a@identifier?) (generate-temporaries . G4908@G3016@generate-temporaries) (free-identifier=? . G4909@G3018@free-identifier=?) (syntax->datum . G4914@G302e@syntax->datum) (datum->syntax . G4913@G302c@datum->syntax) (bound-identifier=? . G490a@G301a@bound-identifier=?) (make-i/o-write-error . G4c64@G4ad5@make-i/o-write-error) (make-i/o-read-error . G4c5c@G4ac0@make-i/o-read-error) (make-i/o-port-error . G4ca0@G4b73@make-i/o-port-error) (make-i/o-invalid-position-error . G4c6c@G4aeb@make-i/o-invalid-position-error) (make-i/o-filename-error . G4c76@G4b05@make-i/o-filename-error) (make-i/o-file-protection-error . G4c80@G4b1e@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4c88@G4b33@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4c98@G4b5d@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4c90@G4b48@make-i/o-file-already-exists-error) (make-i/o-error . G4c54@G4aab@make-i/o-error) (make-i/o-encoding-error . G4cb2@G4ba2@make-i/o-encoding-error) (make-i/o-decoding-error . G4caa@G4b8c@make-i/o-decoding-error) (i/o-write-error? . G4c65@G4ad7@i/o-write-error?) (i/o-read-error? . G4c5d@G4ac2@i/o-read-error?) (i/o-port-error? . G4ca2@G4b77@i/o-port-error?) (i/o-invalid-position-error? . G4c6e@G4aef@i/o-invalid-position-error?) (i/o-filename-error? . G4c78@G4b09@i/o-filename-error?) (i/o-file-protection-error? . G4c81@G4b20@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4c89@G4b35@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4c99@G4b5f@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4c91@G4b4a@i/o-file-already-exists-error?) (i/o-error? . G4c55@G4aad@i/o-error?) (i/o-error-position . G4c6f@G4af1@i/o-error-position) (i/o-error-port . G4ca3@G4b79@i/o-error-port) (i/o-error-filename . G4c79@G4b0b@i/o-error-filename) (i/o-encoding-error? . G4cb4@G4ba6@i/o-encoding-error?) (i/o-encoding-error-char . G4cb5@G4ba8@i/o-encoding-error-char) (i/o-decoding-error? . G4cab@G4b8e@i/o-decoding-error?) (scheme-report-environment . G48ff@G3004@scheme-report-environment) (null-environment . G48fe@G3002@null-environment) (command-line . G4d96@G4cd7@command-line) (eval . G4901@G3008@eval) (environment . G48fd@G3000@environment) (who-condition? . G4c20@G4a23@who-condition?) (warning? . G4bed@G499d@warning?) (violation? . G4c05@G49dc@violation?) (undefined-violation? . G4c4d@G4a98@undefined-violation?) (syntax-violation? . G4c43@G4a7f@syntax-violation?) (syntax-violation-subform . G4c45@G4a83@syntax-violation-subform) (syntax-violation-form . G4c44@G4a81@syntax-violation-form) (syntax-violation . G4911@G3028@syntax-violation) (serious-condition? . G4bf5@G49b2@serious-condition?) (non-continuable-violation? . G4c29@G4a3a@non-continuable-violation?) (message-condition? . G4be4@G4986@message-condition?) (make-who-condition . G4c1e@G4a1f@make-who-condition) (make-warning . G4bec@G499b@make-warning) (make-violation . G4c04@G49da@make-violation) (make-undefined-violation . G4c4c@G4a96@make-undefined-violation) (make-syntax-violation . G4c40@G4a79@make-syntax-violation) (make-serious-condition . G4bf4@G49b0@make-serious-condition) (make-non-continuable-violation . G4c28@G4a38@make-non-continuable-violation) (make-message-condition . G4be2@G4982@make-message-condition) (make-lexical-violation . G4c38@G4a62@make-lexical-violation) (make-irritants-condition . G4c14@G4a05@make-irritants-condition) (make-implementation-restriction-violation . G4c30@G4a4d@make-implementation-restriction-violation) (make-error . G4bfc@G49c5@make-error) (make-assertion-violation . G4c0c@G49ef@make-assertion-violation) (lexical-violation? . G4c39@G4a64@lexical-violation?) (irritants-condition? . G4c16@G4a09@irritants-condition?) (implementation-restriction-violation? . G4c31@G4a4f@implementation-restriction-violation?) (error? . G4bfd@G49c7@error?) (condition-who . G4c21@G4a25@condition-who) (condition-message . G4be5@G4988@condition-message) (condition-irritants . G4c17@G4a0b@condition-irritants) (assertion-violation? . G4c0d@G49f1@assertion-violation?) (no-nans-violation? . G4cc5@G4bd2@no-nans-violation?) (no-infinities-violation? . G4cbd@G4bbd@no-infinities-violation?) (make-no-nans-violation . G4cc4@G4bd0@make-no-nans-violation) (make-no-infinities-violation . G4cbc@G4bbb@make-no-infinities-violation)))))) (G2b57@G29fc@install-library 'G5083 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G5057) (format . G5052) (string-split . G5048) (call-process . G5042) (set-current-directory! . G503e) (expand-path . G503d) (current-directory . G503c) (%spawn . G503b) (%waitpid . G503a) (%ffi-supported? . G5039) (%ffi-pointer-ref . G5038) (%ffi-pointer->string . G5037) (%ffi-call->string-or-zero . G5036) (%ffi-call->double . G5035) (%ffi-call->void* . G5034) (%ffi-call->void . G5033) (%ffi-call->int . G5032) (%ffi-lookup . G5031) (%ffi-open . G5030) (%fork . G502f) (%pipe . G502e) (p . G502d) (string-upcase . G501f) (string-titlecase . G501e) (string-normalize-nfkd . G501d) (string-normalize-nfkc . G501c) (string-normalize-nfd . G501b) (string-normalize-nfc . G501a) (string-foldcase . G5019) (string-downcase . G5018) (string-ci>? . G5017) (string-ci>=? . G5016) (string-ci=? . G5015) (string-ci<? . G5014) (string-ci<=? . G5013) (char-whitespace? . G5012) (char-upper-case? . G5011) (char-title-case? . G5010) (char-numeric? . G500f) (char-lower-case? . G500e) (char-general-category . G500d) (char-upcase . G500c) (char-titlecase . G500b) (char-foldcase . G500a) (char-downcase . G5009) (char-ci>? . G5008) (char-ci>=? . G5007) (char-ci=? . G5006) (char-ci<? . G5005) (char-ci<=? . G5004) (char-alphabetic? . G5003) (make-variable-transformer . G2d77) (identifier? . G3029) (generate-temporaries . G3015) (free-identifier=? . G3017) (syntax->datum . G302d) (datum->syntax . G302b) (bound-identifier=? . G3019) (record-type-descriptor? . G5002) (record-predicate . G5001) (record-mutator . G5000) (record-constructor . G4fff) (record-accessor . G4ffe) (make-record-type-descriptor . G4ffd) (make-record-constructor-descriptor . G4ffc) (record? . G4ffb) (record-type-uid . G4ffa) (record-type-sealed? . G4ff9) (record-type-parent . G4ff8) (record-type-opaque? . G4ff7) (record-type-name . G4ff6) (record-type-generative? . G4ff5) (record-type-field-names . G4ff4) (record-rtd . G4ff3) (record-field-mutable? . G4ff2) (delete-file . G4ff1) (file-exists? . G4ff0) (vector-sort! . G4fef) (vector-sort . G4fee) (list-sort . G4fed) (symbol-hash . G4fec) (string-ci-hash . G4feb) (string-hash . G4fea) (equal-hash . G4fe9) (hashtable-equivalence-function . G4fe8) (make-hashtable . G4fe7) (hashtable-hash-function . G4fe6) (make-eqv-hashtable . G4fe5) (make-eq-hashtable . G4fe4) (hashtable? . G4fe3) (hashtable-update! . G4fe2) (hashtable-size . G4fe1) (hashtable-set! . G4fe0) (hashtable-ref . G4fdf) (hashtable-mutable? . G4fde) (hashtable-keys . G4fdd) (hashtable-entries . G4fdc) (hashtable-delete! . G4fdb) (hashtable-copy . G4fda) (hashtable-contains? . G4fd9) (hashtable-clear! . G4fd8) (call-with-output-file . G4fd7) (call-with-input-file . G4fd6) (write-char . G4fd5) (write . G4fd4) (with-output-to-file . G4fd3) (with-input-from-file . G4fd2) (read-char . G4fd1) (read . G4fd0) (peek-char . G4fcf) (open-output-file . G4fce) (open-input-file . G4fcd) (newline . G4fcc) (display . G4fcb) (close-output-port . G4fca) (close-input-port . G4fc9) (eof-object? . G4fc8) (eof-object . G4fc7) (current-error-port . G4fc6) (current-output-port . G4fc5) (current-input-port . G4fc4) (output-port? . G4fc3) (input-port? . G4fc2) (utf-8-codec . G4fc1) (utf-16-codec . G4fc0) (transcoder-error-handling-mode . G4fbf) (transcoder-eol-style . G4fbe) (transcoder-codec . G4fbd) (transcoded-port . G4fbc) (textual-port? . G4fbb) (string->bytevector . G4fba) (standard-output-port . G4fb9) (standard-input-port . G4fb8) (standard-error-port . G4fb7) (set-port-position! . G4fb6) (put-u8 . G4fb5) (put-string . G4fb4) (put-datum . G4fb3) (put-char . G4fb2) (put-bytevector . G4fb1) (port? . G4fb0) (port-transcoder . G4faf) (port-position . G4fae) (port-has-set-port-position!? . G4fad) (port-has-port-position? . G4fac) (port-eof? . G4fab) (output-port-buffer-mode . G4faa) (open-string-output-port . G4fa9) (open-string-input-port . G4fa8) (open-file-output-port . G4fa7) (open-file-input/output-port . G4fa6) (open-file-input-port . G4fa5) (open-bytevector-output-port . G4fa4) (open-bytevector-input-port . G4fa3) (native-transcoder . G4fa2) (native-eol-style . G4fa1) (make-transcoder . G4fa0) (latin-1-codec . G4f9f) (make-i/o-write-error . G4ad4) (make-i/o-read-error . G4abf) (make-i/o-port-error . G4b72) (make-i/o-invalid-position-error . G4aea) (make-i/o-filename-error . G4b04) (make-i/o-file-protection-error . G4b1d) (make-i/o-file-is-read-only-error . G4b32) (make-i/o-file-does-not-exist-error . G4b5c) (make-i/o-file-already-exists-error . G4b47) (make-i/o-error . G4aaa) (make-i/o-encoding-error . G4ba1) (make-i/o-decoding-error . G4b8b) (make-custom-textual-output-port . G4f9e) (make-custom-textual-input/output-port . G4f9d) (make-custom-textual-input-port . G4f9c) (make-custom-binary-output-port . G4f9b) (make-custom-binary-input/output-port . G4f9a) (make-custom-binary-input-port . G4f99) (make-bytevector . G4f98) (lookahead-u8 . G4f97) (lookahead-char . G4f96) (i/o-write-error? . G4ad6) (i/o-read-error? . G4ac1) (i/o-port-error? . G4b76) (i/o-invalid-position-error? . G4aee) (i/o-filename-error? . G4b08) (i/o-file-protection-error? . G4b1f) (i/o-file-is-read-only-error? . G4b34) (i/o-file-does-not-exist-error? . G4b5e) (i/o-file-already-exists-error? . G4b49) (i/o-error? . G4aac) (i/o-error-position . G4af0) (i/o-error-port . G4b78) (i/o-error-filename . G4b0a) (i/o-encoding-error? . G4ba5) (i/o-encoding-error-char . G4ba7) (i/o-decoding-error? . G4b8d) (get-u8 . G4f95) (get-string-n! . G4f94) (get-string-n . G4f93) (get-string-all . G4f92) (get-line . G4f91) (get-datum . G4f90) (get-char . G4f8f) (get-bytevector-some . G4f8e) (get-bytevector-n! . G4f8d) (get-bytevector-n . G4f8c) (get-bytevector-all . G4f8b) (flush-output-port . G4f8a) (close-port . G4f89) (exit . G4f81) (command-line . G4cd6) (string-fill! . G4f80) (string-set! . G4f7f) (set-cdr! . G4f7e) (set-car! . G4f7d) (remove . G4f7c) (remv . G4f7b) (remp . G4f7a) (remq . G4f79) (partition . G4f78) (memv . G4f77) (memq . G4f76) (memp . G4f75) (member . G4f74) (exists . G4f73) (for-all . G4f72) (fold-right . G4f71) (fold-left . G4f70) (find . G4f6f) (filter . G4f6e) (cons* . G4f6d) (assv . G4f6c) (assq . G4f6b) (assp . G4f6a) (assoc . G4f69) (call-with-string-output-port . G4f68) (call-with-port . G4f67) (call-with-bytevector-output-port . G4f66) (bytevector->string . G4f65) (buffer-mode? . G4f64) (binary-port? . G4f63) (with-exception-handler . G4f62) (raise-continuable . G4f61) (raise . G4f60) (eval . G3007) (environment . G2fff) (make-enumeration . G4f5f) (enum-set=? . G4f5e) (enum-set-universe . G4f5d) (enum-set-union . G4f5c) (enum-set-subset? . G4f5b) (enum-set-projection . G4f5a) (enum-set-member? . G4f59) (enum-set-intersection . G4f58) (enum-set-indexer . G4f57) (enum-set-difference . G4f56) (enum-set-constructor . G4f55) (enum-set-complement . G4f54) (enum-set->list . G4f53) (who-condition? . G4a22) (warning? . G499c) (violation? . G49db) (undefined-violation? . G4a97) (syntax-violation? . G4a7e) (syntax-violation-subform . G4a82) (syntax-violation-form . G4a80) (syntax-violation . G3027) (simple-conditions . G4f52) (serious-condition? . G49b1) (non-continuable-violation? . G4a39) (message-condition? . G4985) (make-who-condition . G4a1e) (make-warning . G499a) (make-violation . G49d9) (make-undefined-violation . G4a95) (make-syntax-violation . G4a78) (make-serious-condition . G49af) (make-non-continuable-violation . G4a37) (make-message-condition . G4981) (make-lexical-violation . G4a61) (make-irritants-condition . G4a04) (make-implementation-restriction-violation . G4a4c) (make-error . G49c4) (make-assertion-violation . G49ee) (lexical-violation? . G4a63) (irritants-condition? . G4a08) (implementation-restriction-violation? . G4a4e) (error? . G49c6) (condition-who . G4a24) (condition-predicate . G4f51) (condition-message . G4987) (condition-irritants . G4a0a) (condition-accessor . G4f50) (condition . G4f4f) (assertion-violation? . G49f0) (condition? . G4f4e) (utf32->string . G4f4d) (utf16->string . G4f4c) (utf8->string . G4f4b) (uint-list->bytevector . G4f4a) (u8-list->bytevector . G4f49) (string->utf8 . G4f48) (string->utf32 . G4f47) (string->utf16 . G4f46) (sint-list->bytevector . G4f45) (native-endianness . G4f44) (bytevector? . G4f43) (bytevector=? . G4f42) (bytevector-uint-set! . G4f41) (bytevector-uint-ref . G4f40) (bytevector-u8-set! . G4f3f) (bytevector-u8-ref . G4f3e) (bytevector-u64-set! . G4f3d) (bytevector-u64-ref . G4f3c) (bytevector-u64-native-set! . G4f3b) (bytevector-u64-native-ref . G4f3a) (bytevector-u32-set! . G4f39) (bytevector-u32-ref . G4f38) (bytevector-u32-native-set! . G4f37) (bytevector-u32-native-ref . G4f36) (bytevector-u16-set! . G4f35) (bytevector-u16-ref . G4f34) (bytevector-u16-native-set! . G4f33) (bytevector-u16-native-ref . G4f32) (bytevector-sint-set! . G4f31) (bytevector-sint-ref . G4f30) (bytevector-s8-set! . G4f2f) (bytevector-s8-ref . G4f2e) (bytevector-s64-set! . G4f2d) (bytevector-s64-ref . G4f2c) (bytevector-s64-native-set! . G4f2b) (bytevector-s64-native-ref . G4f2a) (bytevector-s32-set! . G4f29) (bytevector-s32-ref . G4f28) (bytevector-s32-native-set! . G4f27) (bytevector-s32-native-ref . G4f26) (bytevector-s16-set! . G4f25) (bytevector-s16-ref . G4f24) (bytevector-s16-native-set! . G4f23) (bytevector-s16-native-ref . G4f22) (bytevector-length . G4f21) (bytevector-ieee-single-ref . G4f20) (bytevector-ieee-single-set! . G4f1f) (bytevector-ieee-single-native-set! . G4f1e) (bytevector-ieee-single-native-ref . G4f1d) (bytevector-ieee-double-set! . G4f1c) (bytevector-ieee-double-ref . G4f1b) (bytevector-ieee-double-native-set! . G4f1a) (bytevector-ieee-double-native-ref . G4f19) (bytevector-fill! . G4f18) (bytevector-copy! . G4f17) (bytevector-copy . G4f16) (bytevector->uint-list . G4f15) (bytevector->u8-list . G4f14) (bytevector->sint-list . G4f13) (no-nans-violation? . G4bd1) (no-infinities-violation? . G4bbc) (make-no-nans-violation . G4bcf) (make-no-infinities-violation . G4bba) (real->flonum . G4f12) (flzero? . G4f11) (fltruncate . G4f10) (fltan . G4f0f) (flsqrt . G4f0e) (flsin . G4f0d) (flround . G4f0c) (flpositive? . G4f0b) (flonum? . G4f0a) (flodd? . G4f09) (flnumerator . G4f08) (flnegative? . G4f07) (flnan? . G4f06) (flmod0 . G4f05) (flmod . G4f04) (flmin . G4f03) (flmax . G4f02) (fllog . G4f01) (flinteger? . G4f00) (flinfinite? . G4eff) (flfloor . G4efe) (flfinite? . G4efd) (flexpt . G4efc) (flexp . G4efb) (fleven? . G4efa) (fldiv0-and-mod0 . G4ef9) (fldiv0 . G4ef8) (fldiv-and-mod . G4ef7) (fldiv . G4ef6) (fldenominator . G4ef5) (flcos . G4ef4) (flceiling . G4ef3) (flatan . G4ef2) (flasin . G4ef1) (flacos . G4ef0) (flabs . G4eef) (fl>? . G4eee) (fl>=? . G4eed) (fl=? . G4eec) (fl<? . G4eeb) (fl<=? . G4eea) (fl/ . G4ee9) (fl- . G4ee8) (fl+ . G4ee7) (fl* . G4ee6) (fixnum->flonum . G4ee5) (fxzero? . G4ee4) (fxxor . G4ee3) (fxrotate-bit-field . G4ee2) (fxreverse-bit-field . G4ee1) (fxpositive? . G4ee0) (fxodd? . G4edf) (fxnot . G4ede) (fxnegative? . G4edd) (fxmod0 . G4edc) (fxmod . G4edb) (fxmin . G4eda) (fxmax . G4ed9) (fxlength . G4ed8) (fxior . G4ed7) (fxif . G4ed6) (fxfirst-bit-set . G4ed5) (fxeven? . G4ed4) (fxdiv0-and-mod0 . G4ed3) (fxdiv0 . G4ed2) (fxdiv-and-mod . G4ed1) (fxdiv . G4ed0) (fxcopy-bit-field . G4ecf) (fxcopy-bit . G4ece) (fxbit-set? . G4ecd) (fxbit-field . G4ecc) (fxbit-count . G4ecb) (fxarithmetic-shift-right . G4eca) (fxarithmetic-shift-left . G4ec9) (fxarithmetic-shift . G4ec8) (fxand . G4ec7) (fx>? . G4ec6) (fx>=? . G4ec5) (fx=? . G4ec4) (fx<? . G4ec3) (fx<=? . G4ec2) (fx-/carry . G4ec1) (fx- . G4ec0) (fx+/carry . G4ebf) (fx+ . G4ebe) (fx*/carry . G4ebd) (fx* . G4ebc) (greatest-fixnum . G4ebb) (least-fixnum . G4eba) (fixnum-width . G4eb9) (fixnum? . G4eb8) (bitwise-rotate-bit-field . G4eb7) (bitwise-reverse-bit-field . G4eb6) (bitwise-length . G4eb5) (bitwise-if . G4eb4) (bitwise-first-bit-set . G4eb3) (bitwise-copy-bit-field . G4eb2) (bitwise-copy-bit . G4eb1) (bitwise-bit-set? . G4eb0) (bitwise-bit-field . G4eaf) (bitwise-bit-count . G4eae) (bitwise-xor . G4ead) (bitwise-ior . G4eac) (bitwise-and . G4eab) (bitwise-not . G4eaa) (bitwise-arithmetic-shift-right . G4ea9) (bitwise-arithmetic-shift-left . G4ea8) (bitwise-arithmetic-shift . G4ea7) (zero? . G4ea6) (vector? . G4ea5) (vector-set! . G4ea4) (vector-ref . G4ea3) (vector-map . G4ea2) (vector-length . G4ea1) (vector-for-each . G4ea0) (vector-fill! . G4e9f) (vector->list . G4e9e) (vector . G4e9d) (values . G4e9c) (truncate . G4e9b) (tan . G4e9a) (symbol? . G4e99) (symbol=? . G4e98) (symbol->string . G4e97) (substring . G4e96) (string? . G4e95) (string>? . G4e94) (string>=? . G4e93) (string=? . G4e92) (string<? . G4e91) (string<=? . G4e90) (string-ref . G4e8f) (string-length . G4e8e) (string-for-each . G4e8d) (string-copy . G4e8c) (string-append . G4e8b) (string->symbol . G4e8a) (string->number . G4e89) (string->list . G4e88) (string . G4e87) (sqrt . G4e86) (sin . G4e85) (round . G4e84) (reverse . G4e83) (real? . G4e82) (real-valued? . G4e81) (real-part . G4e80) (rationalize . G4e7f) (rational? . G4e7e) (rational-valued? . G4e7d) (procedure? . G4e7c) (positive? . G4e7b) (pair? . G4e7a) (odd? . G4e79) (numerator . G4e78) (number? . G4e77) (number->string . G4e76) (null? . G4e75) (not . G4e74) (negative? . G4e73) (nan? . G4e72) (min . G4e71) (max . G4e70) (map . G4e6f) (make-vector . G4e6e) (make-string . G4e6d) (make-rectangular . G4e6c) (make-polar . G4e6b) (magnitude . G4e6a) (log . G4e69) (list? . G4e68) (list-tail . G4e67) (list-ref . G4e66) (list->vector . G4e65) (list->string . G4e64) (list . G4e63) (length . G4e62) (lcm . G4e61) (integer? . G4e60) (integer-valued? . G4e5f) (integer->char . G4e5e) (infinite? . G4e5d) (inexact? . G4e5c) (inexact . G4e5b) (imag-part . G4e5a) (gcd . G4e59) (for-each . G4e58) (floor . G4e57) (finite? . G4e56) (expt . G4e55) (exp . G4e54) (exact? . G4e53) (exact-integer-sqrt . G4e52) (exact . G4e51) (even? . G4e50) (error . G4e4f) (eqv? . G4e4e) (equal? . G4e4d) (eq? . G4e4c) (dynamic-wind . G4e4b) (div0-and-mod0 . G4e4a) (mod0 . G4e49) (div0 . G4e48) (div-and-mod . G4e47) (mod . G4e46) (div . G4e45) (denominator . G4e44) (cos . G4e43) (cons . G4e42) (complex? . G4e41) (char? . G4e40) (char>? . G4e3f) (char>=? . G4e3e) (char=? . G4e3d) (char<? . G4e3c) (char<=? . G4e3b) (char->integer . G4e3a) (ceiling . G4e39) (call-with-values . G4e38) (call/cc . G4e37) (call-with-current-continuation . G4e36) (cddddr . G4e35) (cdddar . G4e34) (cddadr . G4e33) (cddaar . G4e32) (cdaddr . G4e31) (cdadar . G4e30) (cdaadr . G4e2f) (cdaaar . G4e2e) (cadddr . G4e2d) (caddar . G4e2c) (cadadr . G4e2b) (cadaar . G4e2a) (caaddr . G4e29) (caadar . G4e28) (caaadr . G4e27) (caaaar . G4e26) (cdddr . G4e25) (cddar . G4e24) (cdadr . G4e23) (cdaar . G4e22) (caddr . G4e21) (cadar . G4e20) (caadr . G4e1f) (caaar . G4e1e) (cddr . G4e1d) (cdar . G4e1c) (cadr . G4e1b) (caar . G4e1a) (cdr . G4e19) (car . G4e18) (boolean? . G4e17) (boolean=? . G4e16) (atan . G4e15) (assertion-violation . G4e14) (asin . G4e13) (apply . G4e12) (append . G4e11) (angle . G4e10) (acos . G4e0f) (abs . G4e0e) (/ . G4e0d) (* . G4e0c) (- . G4e0b) (+ . G4e0a) (>= . G4e09) (> . G4e08) (= . G4e07) (<= . G4e06) (< . G4e05) (library . G4e04) (&no-nans . G4e03) (&no-infinities . G4e02) (&i/o-encoding . G4e01) (&i/o-decoding . G4e00) (&i/o-port . G4dff) (&i/o-file-does-not-exist . G4dfe) (&i/o-file-already-exists . G4dfd) (&i/o-file-is-read-only . G4dfc) (&i/o-file-protection . G4dfb) (&i/o-filename . G4dfa) (&i/o-invalid-position . G4df9) (&i/o-write . G4df8) (&i/o-read . G4df7) (&i/o . G4df6) (&undefined . G4df5) (&syntax . G4df4) (&lexical . G4df3) (&implementation-restriction . G4df2) (&non-continuable . G4df1) (&who . G4df0) (&irritants . G4def) (&assertion . G4dee) (&violation . G4ded) (&error . G4dec) (&serious . G4deb) (&warning . G4dea) (&message . G4de9) (&condition . G4de8) (define-condition-type . G4de7) (define-enumeration . G4de6) (define-record-type . G4de5) (parent-rtd . G4de4) (nongenerative . G4de3) (opaque . G4de2) (sealed . G4de1) (protocol . G4de0) (parent . G4ddf) (immutable . G4dde) (mutable . G4ddd) (fields . G4ddc) (error-handling-mode . G4ddb) (file-options . G4dda) (buffer-mode . G4dd9) (eol-style . G4dd8) (guard . G4dd7) (unsyntax-splicing . G4dd4) (unsyntax . G4dd3) (unquote-splicing . G4dd2) (unquote . G4dd1) (_ . G4dd0) (else . G4dcf) (=> . G4dce) (... . G4dcd) (assert . G4dcc) (endianness . G4dcb) (do . G4dc8) (cond . G4dc7) (let* . G4dc6) (let . G4dc5) (let*-values . G4dc4) (let-values . G4dc3) (identifier-syntax . G4dc2) (with-syntax . G4dc1) (quasisyntax . G4dc0) (quasiquote . G4dbf) (syntax-rules . G4dbe) (include . G4dbd) (record-constructor-descriptor . G4dbb) (record-type-descriptor . G4dba) (case . G4db9) (unless . G4db7) (when . G4db6) (or . G4db5) (and . G4db4) (if . G4db3) (letrec* . G4db2) (letrec . G4db1) (case-lambda . G4daf) (lambda . G4dae) (syntax . G4dad) (syntax-case . G4dac) (quote . G4dab) (letrec-syntax . G4da9) (let-syntax . G4da8) (set! . G4da7) (import . G4da6) (begin . G4da5) (define-syntax . G4da3) (define . G4da2)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5084 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4f82) (unquote-splicing . G4dd2) (unquote . G4dd1) (_ . G4dd0) (else . G4dcf) (=> . G4dce) (... . G4dcd) (delay . G4dca) (do . G4dc8) (cond . G4dc7) (let* . G4dc6) (let . G4dc5) (quasiquote . G4dbf) (syntax-rules . G4dbe) (case . G4db9) (or . G4db5) (and . G4db4) (if . G4db3) (letrec . G4db1) (lambda . G4dae) (quote . G4dab) (letrec-syntax . G4da9) (let-syntax . G4da8) (set! . G4da7) (begin . G4da5) (define-syntax . G4da3) (define . G4da2)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5085 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5017) (string-ci>=? . G5016) (string-ci=? . G5015) (string-ci<? . G5014) (string-ci<=? . G5013) (char-whitespace? . G5012) (char-upper-case? . G5011) (char-numeric? . G500f) (char-lower-case? . G500e) (char-upcase . G500c) (char-downcase . G5009) (char-ci>? . G5008) (char-ci>=? . G5007) (char-ci=? . G5006) (char-ci<? . G5005) (char-ci<=? . G5004) (char-alphabetic? . G5003) (call-with-output-file . G4fd7) (call-with-input-file . G4fd6) (write-char . G4fd5) (write . G4fd4) (with-output-to-file . G4fd3) (with-input-from-file . G4fd2) (read-char . G4fd1) (read . G4fd0) (peek-char . G4fcf) (open-output-file . G4fce) (open-input-file . G4fcd) (newline . G4fcc) (display . G4fcb) (close-output-port . G4fca) (close-input-port . G4fc9) (eof-object . G4fc7) (current-output-port . G4fc5) (current-input-port . G4fc4) (output-port? . G4fc3) (input-port? . G4fc2) (scheme-report-environment . G3003) (quotient . G4f88) (null-environment . G3001) (remainder . G4f87) (modulo . G4f86) (inexact->exact . G4f85) (force . G4f84) (exact->inexact . G4f83) (make-promise . G4f82) (string-fill! . G4f80) (string-set! . G4f7f) (set-cdr! . G4f7e) (set-car! . G4f7d) (memv . G4f77) (memq . G4f76) (member . G4f74) (assv . G4f6c) (assq . G4f6b) (assoc . G4f69) (eval . G3007) (zero? . G4ea6) (vector? . G4ea5) (vector-set! . G4ea4) (vector-ref . G4ea3) (vector-length . G4ea1) (vector-fill! . G4e9f) (vector->list . G4e9e) (vector . G4e9d) (values . G4e9c) (truncate . G4e9b) (tan . G4e9a) (symbol? . G4e99) (symbol->string . G4e97) (substring . G4e96) (string? . G4e95) (string>? . G4e94) (string>=? . G4e93) (string=? . G4e92) (string<? . G4e91) (string<=? . G4e90) (string-ref . G4e8f) (string-length . G4e8e) (string-copy . G4e8c) (string-append . G4e8b) (string->symbol . G4e8a) (string->number . G4e89) (string->list . G4e88) (string . G4e87) (sqrt . G4e86) (sin . G4e85) (round . G4e84) (reverse . G4e83) (real? . G4e82) (real-part . G4e80) (rationalize . G4e7f) (rational? . G4e7e) (procedure? . G4e7c) (positive? . G4e7b) (pair? . G4e7a) (odd? . G4e79) (numerator . G4e78) (number? . G4e77) (number->string . G4e76) (not . G4e74) (negative? . G4e73) (min . G4e71) (max . G4e70) (map . G4e6f) (make-vector . G4e6e) (make-string . G4e6d) (make-rectangular . G4e6c) (make-polar . G4e6b) (magnitude . G4e6a) (log . G4e69) (list? . G4e68) (list-tail . G4e67) (list-ref . G4e66) (list->vector . G4e65) (list->string . G4e64) (list . G4e63) (length . G4e62) (lcm . G4e61) (integer? . G4e60) (integer->char . G4e5e) (inexact? . G4e5c) (imag-part . G4e5a) (gcd . G4e59) (for-each . G4e58) (floor . G4e57) (expt . G4e55) (exp . G4e54) (exact? . G4e53) (even? . G4e50) (eqv? . G4e4e) (equal? . G4e4d) (eq? . G4e4c) (dynamic-wind . G4e4b) (denominator . G4e44) (cos . G4e43) (cons . G4e42) (complex? . G4e41) (char? . G4e40) (char>? . G4e3f) (char>=? . G4e3e) (char=? . G4e3d) (char<? . G4e3c) (char<=? . G4e3b) (char->integer . G4e3a) (ceiling . G4e39) (call-with-values . G4e38) (call-with-current-continuation . G4e36) (cddddr . G4e35) (cdddar . G4e34) (cddadr . G4e33) (cddaar . G4e32) (cdaddr . G4e31) (cdadar . G4e30) (cdaadr . G4e2f) (cdaaar . G4e2e) (cadddr . G4e2d) (caddar . G4e2c) (cadadr . G4e2b) (cadaar . G4e2a) (caaddr . G4e29) (caadar . G4e28) (caaadr . G4e27) (caaaar . G4e26) (cdddr . G4e25) (cddar . G4e24) (cdadr . G4e23) (cdaar . G4e22) (caddr . G4e21) (cadar . G4e20) (caadr . G4e1f) (caaar . G4e1e) (cddr . G4e1d) (cdar . G4e1c) (cadr . G4e1b) (caar . G4e1a) (cdr . G4e19) (car . G4e18) (boolean? . G4e17) (atan . G4e15) (asin . G4e13) (apply . G4e12) (append . G4e11) (angle . G4e10) (acos . G4e0f) (abs . G4e0e) (/ . G4e0d) (* . G4e0c) (- . G4e0b) (+ . G4e0a) (>= . G4e09) (> . G4e08) (= . G4e07) (<= . G4e06) (< . G4e05) (unquote-splicing . G4dd2) (unquote . G4dd1) (else . G4dcf) (=> . G4dce) (... . G4dcd) (delay . G4dca) (do . G4dc8) (cond . G4dc7) (let* . G4dc6) (let . G4dc5) (quasiquote . G4dbf) (syntax-rules . G4dbe) (case . G4db9) (or . G4db5) (and . G4db4) (if . G4db3) (letrec . G4db1) (lambda . G4dae) (quote . G4dab) (letrec-syntax . G4da9) (let-syntax . G4da8) (set! . G4da7) (begin . G4da5) (define-syntax . G4da3) (define . G4da2)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5086 '(psyntax modules) '() '() '() '() '((module . G4da4)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5087 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5088 '(rnrs) '(6) '() '() '() '((regexp? . G507b) (string-upcase . G501f) (string-titlecase . G501e) (string-normalize-nfkd . G501d) (string-normalize-nfkc . G501c) (string-normalize-nfd . G501b) (string-normalize-nfc . G501a) (string-foldcase . G5019) (string-downcase . G5018) (string-ci>? . G5017) (string-ci>=? . G5016) (string-ci=? . G5015) (string-ci<? . G5014) (string-ci<=? . G5013) (char-whitespace? . G5012) (char-upper-case? . G5011) (char-title-case? . G5010) (char-numeric? . G500f) (char-lower-case? . G500e) (char-general-category . G500d) (char-upcase . G500c) (char-titlecase . G500b) (char-foldcase . G500a) (char-downcase . G5009) (char-ci>? . G5008) (char-ci>=? . G5007) (char-ci=? . G5006) (char-ci<? . G5005) (char-ci<=? . G5004) (char-alphabetic? . G5003) (make-variable-transformer . G2d77) (identifier? . G3029) (generate-temporaries . G3015) (free-identifier=? . G3017) (syntax->datum . G302d) (datum->syntax . G302b) (bound-identifier=? . G3019) (record-type-descriptor? . G5002) (record-predicate . G5001) (record-mutator . G5000) (record-constructor . G4fff) (record-accessor . G4ffe) (make-record-type-descriptor . G4ffd) (make-record-constructor-descriptor . G4ffc) (record? . G4ffb) (record-type-uid . G4ffa) (record-type-sealed? . G4ff9) (record-type-parent . G4ff8) (record-type-opaque? . G4ff7) (record-type-name . G4ff6) (record-type-generative? . G4ff5) (record-type-field-names . G4ff4) (record-rtd . G4ff3) (record-field-mutable? . G4ff2) (delete-file . G4ff1) (file-exists? . G4ff0) (vector-sort! . G4fef) (vector-sort . G4fee) (list-sort . G4fed) (symbol-hash . G4fec) (string-ci-hash . G4feb) (string-hash . G4fea) (equal-hash . G4fe9) (hashtable-equivalence-function . G4fe8) (make-hashtable . G4fe7) (hashtable-hash-function . G4fe6) (make-eqv-hashtable . G4fe5) (make-eq-hashtable . G4fe4) (hashtable? . G4fe3) (hashtable-update! . G4fe2) (hashtable-size . G4fe1) (hashtable-set! . G4fe0) (hashtable-ref . G4fdf) (hashtable-mutable? . G4fde) (hashtable-keys . G4fdd) (hashtable-entries . G4fdc) (hashtable-delete! . G4fdb) (hashtable-copy . G4fda) (hashtable-contains? . G4fd9) (hashtable-clear! . G4fd8) (call-with-output-file . G4fd7) (call-with-input-file . G4fd6) (write-char . G4fd5) (write . G4fd4) (with-output-to-file . G4fd3) (with-input-from-file . G4fd2) (read-char . G4fd1) (read . G4fd0) (peek-char . G4fcf) (open-output-file . G4fce) (open-input-file . G4fcd) (newline . G4fcc) (display . G4fcb) (close-output-port . G4fca) (close-input-port . G4fc9) (eof-object? . G4fc8) (eof-object . G4fc7) (current-error-port . G4fc6) (current-output-port . G4fc5) (current-input-port . G4fc4) (output-port? . G4fc3) (input-port? . G4fc2) (utf-8-codec . G4fc1) (utf-16-codec . G4fc0) (transcoder-error-handling-mode . G4fbf) (transcoder-eol-style . G4fbe) (transcoder-codec . G4fbd) (transcoded-port . G4fbc) (textual-port? . G4fbb) (string->bytevector . G4fba) (standard-output-port . G4fb9) (standard-input-port . G4fb8) (standard-error-port . G4fb7) (set-port-position! . G4fb6) (put-u8 . G4fb5) (put-string . G4fb4) (put-datum . G4fb3) (put-char . G4fb2) (put-bytevector . G4fb1) (port? . G4fb0) (port-transcoder . G4faf) (port-position . G4fae) (port-has-set-port-position!? . G4fad) (port-has-port-position? . G4fac) (port-eof? . G4fab) (output-port-buffer-mode . G4faa) (open-string-output-port . G4fa9) (open-string-input-port . G4fa8) (open-file-output-port . G4fa7) (open-file-input/output-port . G4fa6) (open-file-input-port . G4fa5) (open-bytevector-output-port . G4fa4) (open-bytevector-input-port . G4fa3) (native-transcoder . G4fa2) (native-eol-style . G4fa1) (make-transcoder . G4fa0) (latin-1-codec . G4f9f) (make-i/o-write-error . G4ad4) (make-i/o-read-error . G4abf) (make-i/o-port-error . G4b72) (make-i/o-invalid-position-error . G4aea) (make-i/o-filename-error . G4b04) (make-i/o-file-protection-error . G4b1d) (make-i/o-file-is-read-only-error . G4b32) (make-i/o-file-does-not-exist-error . G4b5c) (make-i/o-file-already-exists-error . G4b47) (make-i/o-error . G4aaa) (make-i/o-encoding-error . G4ba1) (make-i/o-decoding-error . G4b8b) (make-custom-textual-output-port . G4f9e) (make-custom-textual-input/output-port . G4f9d) (make-custom-textual-input-port . G4f9c) (make-custom-binary-output-port . G4f9b) (make-custom-binary-input/output-port . G4f9a) (make-custom-binary-input-port . G4f99) (make-bytevector . G4f98) (lookahead-u8 . G4f97) (lookahead-char . G4f96) (i/o-write-error? . G4ad6) (i/o-read-error? . G4ac1) (i/o-port-error? . G4b76) (i/o-invalid-position-error? . G4aee) (i/o-filename-error? . G4b08) (i/o-file-protection-error? . G4b1f) (i/o-file-is-read-only-error? . G4b34) (i/o-file-does-not-exist-error? . G4b5e) (i/o-file-already-exists-error? . G4b49) (i/o-error? . G4aac) (i/o-error-position . G4af0) (i/o-error-port . G4b78) (i/o-error-filename . G4b0a) (i/o-encoding-error? . G4ba5) (i/o-encoding-error-char . G4ba7) (i/o-decoding-error? . G4b8d) (get-u8 . G4f95) (get-string-n! . G4f94) (get-string-n . G4f93) (get-string-all . G4f92) (get-line . G4f91) (get-datum . G4f90) (get-char . G4f8f) (get-bytevector-some . G4f8e) (get-bytevector-n! . G4f8d) (get-bytevector-n . G4f8c) (get-bytevector-all . G4f8b) (flush-output-port . G4f8a) (close-port . G4f89) (exit . G4f81) (command-line . G4cd6) (remove . G4f7c) (remv . G4f7b) (remp . G4f7a) (remq . G4f79) (partition . G4f78) (memv . G4f77) (memq . G4f76) (memp . G4f75) (member . G4f74) (exists . G4f73) (for-all . G4f72) (fold-right . G4f71) (fold-left . G4f70) (find . G4f6f) (filter . G4f6e) (cons* . G4f6d) (assv . G4f6c) (assq . G4f6b) (assp . G4f6a) (assoc . G4f69) (call-with-string-output-port . G4f68) (call-with-port . G4f67) (call-with-bytevector-output-port . G4f66) (bytevector->string . G4f65) (buffer-mode? . G4f64) (binary-port? . G4f63) (with-exception-handler . G4f62) (raise-continuable . G4f61) (raise . G4f60) (make-enumeration . G4f5f) (enum-set=? . G4f5e) (enum-set-universe . G4f5d) (enum-set-union . G4f5c) (enum-set-subset? . G4f5b) (enum-set-projection . G4f5a) (enum-set-member? . G4f59) (enum-set-intersection . G4f58) (enum-set-indexer . G4f57) (enum-set-difference . G4f56) (enum-set-constructor . G4f55) (enum-set-complement . G4f54) (enum-set->list . G4f53) (who-condition? . G4a22) (warning? . G499c) (violation? . G49db) (undefined-violation? . G4a97) (syntax-violation? . G4a7e) (syntax-violation-subform . G4a82) (syntax-violation-form . G4a80) (syntax-violation . G3027) (simple-conditions . G4f52) (serious-condition? . G49b1) (non-continuable-violation? . G4a39) (message-condition? . G4985) (make-who-condition . G4a1e) (make-warning . G499a) (make-violation . G49d9) (make-undefined-violation . G4a95) (make-syntax-violation . G4a78) (make-serious-condition . G49af) (make-non-continuable-violation . G4a37) (make-message-condition . G4981) (make-lexical-violation . G4a61) (make-irritants-condition . G4a04) (make-implementation-restriction-violation . G4a4c) (make-error . G49c4) (make-assertion-violation . G49ee) (lexical-violation? . G4a63) (irritants-condition? . G4a08) (implementation-restriction-violation? . G4a4e) (error? . G49c6) (condition-who . G4a24) (condition-predicate . G4f51) (condition-message . G4987) (condition-irritants . G4a0a) (condition-accessor . G4f50) (condition . G4f4f) (assertion-violation? . G49f0) (condition? . G4f4e) (utf32->string . G4f4d) (utf16->string . G4f4c) (utf8->string . G4f4b) (uint-list->bytevector . G4f4a) (u8-list->bytevector . G4f49) (string->utf8 . G4f48) (string->utf32 . G4f47) (string->utf16 . G4f46) (sint-list->bytevector . G4f45) (native-endianness . G4f44) (bytevector? . G4f43) (bytevector=? . G4f42) (bytevector-uint-set! . G4f41) (bytevector-uint-ref . G4f40) (bytevector-u8-set! . G4f3f) (bytevector-u8-ref . G4f3e) (bytevector-u64-set! . G4f3d) (bytevector-u64-ref . G4f3c) (bytevector-u64-native-set! . G4f3b) (bytevector-u64-native-ref . G4f3a) (bytevector-u32-set! . G4f39) (bytevector-u32-ref . G4f38) (bytevector-u32-native-set! . G4f37) (bytevector-u32-native-ref . G4f36) (bytevector-u16-set! . G4f35) (bytevector-u16-ref . G4f34) (bytevector-u16-native-set! . G4f33) (bytevector-u16-native-ref . G4f32) (bytevector-sint-set! . G4f31) (bytevector-sint-ref . G4f30) (bytevector-s8-set! . G4f2f) (bytevector-s8-ref . G4f2e) (bytevector-s64-set! . G4f2d) (bytevector-s64-ref . G4f2c) (bytevector-s64-native-set! . G4f2b) (bytevector-s64-native-ref . G4f2a) (bytevector-s32-set! . G4f29) (bytevector-s32-ref . G4f28) (bytevector-s32-native-set! . G4f27) (bytevector-s32-native-ref . G4f26) (bytevector-s16-set! . G4f25) (bytevector-s16-ref . G4f24) (bytevector-s16-native-set! . G4f23) (bytevector-s16-native-ref . G4f22) (bytevector-length . G4f21) (bytevector-ieee-single-ref . G4f20) (bytevector-ieee-single-set! . G4f1f) (bytevector-ieee-single-native-set! . G4f1e) (bytevector-ieee-single-native-ref . G4f1d) (bytevector-ieee-double-set! . G4f1c) (bytevector-ieee-double-ref . G4f1b) (bytevector-ieee-double-native-set! . G4f1a) (bytevector-ieee-double-native-ref . G4f19) (bytevector-fill! . G4f18) (bytevector-copy! . G4f17) (bytevector-copy . G4f16) (bytevector->uint-list . G4f15) (bytevector->u8-list . G4f14) (bytevector->sint-list . G4f13) (no-nans-violation? . G4bd1) (no-infinities-violation? . G4bbc) (make-no-nans-violation . G4bcf) (make-no-infinities-violation . G4bba) (real->flonum . G4f12) (flzero? . G4f11) (fltruncate . G4f10) (fltan . G4f0f) (flsqrt . G4f0e) (flsin . G4f0d) (flround . G4f0c) (flpositive? . G4f0b) (flonum? . G4f0a) (flodd? . G4f09) (flnumerator . G4f08) (flnegative? . G4f07) (flnan? . G4f06) (flmod0 . G4f05) (flmod . G4f04) (flmin . G4f03) (flmax . G4f02) (fllog . G4f01) (flinteger? . G4f00) (flinfinite? . G4eff) (flfloor . G4efe) (flfinite? . G4efd) (flexpt . G4efc) (flexp . G4efb) (fleven? . G4efa) (fldiv0-and-mod0 . G4ef9) (fldiv0 . G4ef8) (fldiv-and-mod . G4ef7) (fldiv . G4ef6) (fldenominator . G4ef5) (flcos . G4ef4) (flceiling . G4ef3) (flatan . G4ef2) (flasin . G4ef1) (flacos . G4ef0) (flabs . G4eef) (fl>? . G4eee) (fl>=? . G4eed) (fl=? . G4eec) (fl<? . G4eeb) (fl<=? . G4eea) (fl/ . G4ee9) (fl- . G4ee8) (fl+ . G4ee7) (fl* . G4ee6) (fixnum->flonum . G4ee5) (fxzero? . G4ee4) (fxxor . G4ee3) (fxrotate-bit-field . G4ee2) (fxreverse-bit-field . G4ee1) (fxpositive? . G4ee0) (fxodd? . G4edf) (fxnot . G4ede) (fxnegative? . G4edd) (fxmod0 . G4edc) (fxmod . G4edb) (fxmin . G4eda) (fxmax . G4ed9) (fxlength . G4ed8) (fxior . G4ed7) (fxif . G4ed6) (fxfirst-bit-set . G4ed5) (fxeven? . G4ed4) (fxdiv0-and-mod0 . G4ed3) (fxdiv0 . G4ed2) (fxdiv-and-mod . G4ed1) (fxdiv . G4ed0) (fxcopy-bit-field . G4ecf) (fxcopy-bit . G4ece) (fxbit-set? . G4ecd) (fxbit-field . G4ecc) (fxbit-count . G4ecb) (fxarithmetic-shift-right . G4eca) (fxarithmetic-shift-left . G4ec9) (fxarithmetic-shift . G4ec8) (fxand . G4ec7) (fx>? . G4ec6) (fx>=? . G4ec5) (fx=? . G4ec4) (fx<? . G4ec3) (fx<=? . G4ec2) (fx-/carry . G4ec1) (fx- . G4ec0) (fx+/carry . G4ebf) (fx+ . G4ebe) (fx*/carry . G4ebd) (fx* . G4ebc) (greatest-fixnum . G4ebb) (least-fixnum . G4eba) (fixnum-width . G4eb9) (fixnum? . G4eb8) (bitwise-rotate-bit-field . G4eb7) (bitwise-reverse-bit-field . G4eb6) (bitwise-length . G4eb5) (bitwise-if . G4eb4) (bitwise-first-bit-set . G4eb3) (bitwise-copy-bit-field . G4eb2) (bitwise-copy-bit . G4eb1) (bitwise-bit-set? . G4eb0) (bitwise-bit-field . G4eaf) (bitwise-bit-count . G4eae) (bitwise-xor . G4ead) (bitwise-ior . G4eac) (bitwise-and . G4eab) (bitwise-not . G4eaa) (bitwise-arithmetic-shift-right . G4ea9) (bitwise-arithmetic-shift-left . G4ea8) (bitwise-arithmetic-shift . G4ea7) (zero? . G4ea6) (vector? . G4ea5) (vector-set! . G4ea4) (vector-ref . G4ea3) (vector-map . G4ea2) (vector-length . G4ea1) (vector-for-each . G4ea0) (vector-fill! . G4e9f) (vector->list . G4e9e) (vector . G4e9d) (values . G4e9c) (truncate . G4e9b) (tan . G4e9a) (symbol? . G4e99) (symbol=? . G4e98) (symbol->string . G4e97) (substring . G4e96) (string? . G4e95) (string>? . G4e94) (string>=? . G4e93) (string=? . G4e92) (string<? . G4e91) (string<=? . G4e90) (string-ref . G4e8f) (string-length . G4e8e) (string-for-each . G4e8d) (string-copy . G4e8c) (string-append . G4e8b) (string->symbol . G4e8a) (string->number . G4e89) (string->list . G4e88) (string . G4e87) (sqrt . G4e86) (sin . G4e85) (round . G4e84) (reverse . G4e83) (real? . G4e82) (real-valued? . G4e81) (real-part . G4e80) (rationalize . G4e7f) (rational? . G4e7e) (rational-valued? . G4e7d) (procedure? . G4e7c) (positive? . G4e7b) (pair? . G4e7a) (odd? . G4e79) (numerator . G4e78) (number? . G4e77) (number->string . G4e76) (null? . G4e75) (not . G4e74) (negative? . G4e73) (nan? . G4e72) (min . G4e71) (max . G4e70) (map . G4e6f) (make-vector . G4e6e) (make-string . G4e6d) (make-rectangular . G4e6c) (make-polar . G4e6b) (magnitude . G4e6a) (log . G4e69) (list? . G4e68) (list-tail . G4e67) (list-ref . G4e66) (list->vector . G4e65) (list->string . G4e64) (list . G4e63) (length . G4e62) (lcm . G4e61) (integer? . G4e60) (integer-valued? . G4e5f) (integer->char . G4e5e) (infinite? . G4e5d) (inexact? . G4e5c) (inexact . G4e5b) (imag-part . G4e5a) (gcd . G4e59) (for-each . G4e58) (floor . G4e57) (finite? . G4e56) (expt . G4e55) (exp . G4e54) (exact? . G4e53) (exact-integer-sqrt . G4e52) (exact . G4e51) (even? . G4e50) (error . G4e4f) (eqv? . G4e4e) (equal? . G4e4d) (eq? . G4e4c) (dynamic-wind . G4e4b) (div0-and-mod0 . G4e4a) (mod0 . G4e49) (div0 . G4e48) (div-and-mod . G4e47) (mod . G4e46) (div . G4e45) (denominator . G4e44) (cos . G4e43) (cons . G4e42) (complex? . G4e41) (char? . G4e40) (char>? . G4e3f) (char>=? . G4e3e) (char=? . G4e3d) (char<? . G4e3c) (char<=? . G4e3b) (char->integer . G4e3a) (ceiling . G4e39) (call-with-values . G4e38) (call/cc . G4e37) (call-with-current-continuation . G4e36) (cddddr . G4e35) (cdddar . G4e34) (cddadr . G4e33) (cddaar . G4e32) (cdaddr . G4e31) (cdadar . G4e30) (cdaadr . G4e2f) (cdaaar . G4e2e) (cadddr . G4e2d) (caddar . G4e2c) (cadadr . G4e2b) (cadaar . G4e2a) (caaddr . G4e29) (caadar . G4e28) (caaadr . G4e27) (caaaar . G4e26) (cdddr . G4e25) (cddar . G4e24) (cdadr . G4e23) (cdaar . G4e22) (caddr . G4e21) (cadar . G4e20) (caadr . G4e1f) (caaar . G4e1e) (cddr . G4e1d) (cdar . G4e1c) (cadr . G4e1b) (caar . G4e1a) (cdr . G4e19) (car . G4e18) (boolean? . G4e17) (boolean=? . G4e16) (atan . G4e15) (assertion-violation . G4e14) (asin . G4e13) (apply . G4e12) (append . G4e11) (angle . G4e10) (acos . G4e0f) (abs . G4e0e) (/ . G4e0d) (* . G4e0c) (- . G4e0b) (+ . G4e0a) (>= . G4e09) (> . G4e08) (= . G4e07) (<= . G4e06) (< . G4e05) (&no-nans . G4e03) (&no-infinities . G4e02) (&i/o-encoding . G4e01) (&i/o-decoding . G4e00) (&i/o-port . G4dff) (&i/o-file-does-not-exist . G4dfe) (&i/o-file-already-exists . G4dfd) (&i/o-file-is-read-only . G4dfc) (&i/o-file-protection . G4dfb) (&i/o-filename . G4dfa) (&i/o-invalid-position . G4df9) (&i/o-write . G4df8) (&i/o-read . G4df7) (&i/o . G4df6) (&undefined . G4df5) (&syntax . G4df4) (&lexical . G4df3) (&implementation-restriction . G4df2) (&non-continuable . G4df1) (&who . G4df0) (&irritants . G4def) (&assertion . G4dee) (&violation . G4ded) (&error . G4dec) (&serious . G4deb) (&warning . G4dea) (&message . G4de9) (&condition . G4de8) (define-condition-type . G4de7) (define-enumeration . G4de6) (define-record-type . G4de5) (parent-rtd . G4de4) (nongenerative . G4de3) (opaque . G4de2) (sealed . G4de1) (protocol . G4de0) (parent . G4ddf) (immutable . G4dde) (mutable . G4ddd) (fields . G4ddc) (error-handling-mode . G4ddb) (file-options . G4dda) (buffer-mode . G4dd9) (eol-style . G4dd8) (guard . G4dd7) (unsyntax-splicing . G4dd4) (unsyntax . G4dd3) (unquote-splicing . G4dd2) (unquote . G4dd1) (_ . G4dd0) (else . G4dcf) (=> . G4dce) (... . G4dcd) (assert . G4dcc) (endianness . G4dcb) (do . G4dc8) (cond . G4dc7) (let* . G4dc6) (let . G4dc5) (let*-values . G4dc4) (let-values . G4dc3) (identifier-syntax . G4dc2) (with-syntax . G4dc1) (quasisyntax . G4dc0) (quasiquote . G4dbf) (syntax-rules . G4dbe) (record-constructor-descriptor . G4dbb) (record-type-descriptor . G4dba) (case . G4db9) (unless . G4db7) (when . G4db6) (or . G4db5) (and . G4db4) (if . G4db3) (letrec* . G4db2) (letrec . G4db1) (case-lambda . G4daf) (lambda . G4dae) (syntax . G4dad) (syntax-case . G4dac) (quote . G4dab) (letrec-syntax . G4da9) (let-syntax . G4da8) (set! . G4da7) (begin . G4da5) (define-syntax . G4da3) (define . G4da2)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5089 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3003) (quotient . G4f88) (null-environment . G3001) (remainder . G4f87) (modulo . G4f86) (inexact->exact . G4f85) (force . G4f84) (exact->inexact . G4f83) (make-promise . G4f82) (delay . G4dca)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G508a '(rnrs control) '(6) '() '() '() '((do . G4dc8) (unless . G4db7) (when . G4db6) (case-lambda . G4daf)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G508b '(rnrs eval) '(6) '() '() '() '((eval . G3007) (environment . G2fff)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G508c '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4f7e) (set-car! . G4f7d)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G508d '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4f80) (string-set! . G4f7f)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G508e '(rnrs programs) '(6) '() '() '() '((exit . G4f81) (command-line . G4cd6)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G508f '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d77) (identifier? . G3029) (generate-temporaries . G3015) (free-identifier=? . G3017) (syntax->datum . G302d) (datum->syntax . G302b) (bound-identifier=? . G3019) (syntax-violation . G3027) (unsyntax-splicing . G4dd4) (unsyntax . G4dd3) (_ . G4dd0) (... . G4dcd) (with-syntax . G4dc1) (quasisyntax . G4dc0) (syntax . G4dad) (syntax-case . G4dac)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5090 '(rnrs files) '(6) '() '() '() '((delete-file . G4ff1) (file-exists? . G4ff0) (make-i/o-write-error . G4ad4) (make-i/o-read-error . G4abf) (make-i/o-port-error . G4b72) (make-i/o-invalid-position-error . G4aea) (make-i/o-filename-error . G4b04) (make-i/o-file-protection-error . G4b1d) (make-i/o-file-is-read-only-error . G4b32) (make-i/o-file-does-not-exist-error . G4b5c) (make-i/o-file-already-exists-error . G4b47) (make-i/o-error . G4aaa) (i/o-write-error? . G4ad6) (i/o-read-error? . G4ac1) (i/o-port-error? . G4b76) (i/o-invalid-position-error? . G4aee) (i/o-filename-error? . G4b08) (i/o-file-protection-error? . G4b1f) (i/o-file-is-read-only-error? . G4b34) (i/o-file-does-not-exist-error? . G4b5e) (i/o-file-already-exists-error? . G4b49) (i/o-error? . G4aac) (i/o-error-position . G4af0) (i/o-error-port . G4b78) (i/o-error-filename . G4b0a) (&i/o-port . G4dff) (&i/o-file-does-not-exist . G4dfe) (&i/o-file-already-exists . G4dfd) (&i/o-file-is-read-only . G4dfc) (&i/o-file-protection . G4dfb) (&i/o-filename . G4dfa) (&i/o-invalid-position . G4df9) (&i/o-write . G4df8) (&i/o-read . G4df7) (&i/o . G4df6)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5091 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G4fef) (vector-sort . G4fee) (list-sort . G4fed)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5092 '(rnrs base) '(6) '() '() '() '((zero? . G4ea6) (vector? . G4ea5) (vector-set! . G4ea4) (vector-ref . G4ea3) (vector-map . G4ea2) (vector-length . G4ea1) (vector-for-each . G4ea0) (vector-fill! . G4e9f) (vector->list . G4e9e) (vector . G4e9d) (values . G4e9c) (truncate . G4e9b) (tan . G4e9a) (symbol? . G4e99) (symbol=? . G4e98) (symbol->string . G4e97) (substring . G4e96) (string? . G4e95) (string>? . G4e94) (string>=? . G4e93) (string=? . G4e92) (string<? . G4e91) (string<=? . G4e90) (string-ref . G4e8f) (string-length . G4e8e) (string-for-each . G4e8d) (string-copy . G4e8c) (string-append . G4e8b) (string->symbol . G4e8a) (string->number . G4e89) (string->list . G4e88) (string . G4e87) (sqrt . G4e86) (sin . G4e85) (round . G4e84) (reverse . G4e83) (real? . G4e82) (real-valued? . G4e81) (real-part . G4e80) (rationalize . G4e7f) (rational? . G4e7e) (rational-valued? . G4e7d) (procedure? . G4e7c) (positive? . G4e7b) (pair? . G4e7a) (odd? . G4e79) (numerator . G4e78) (number? . G4e77) (number->string . G4e76) (null? . G4e75) (not . G4e74) (negative? . G4e73) (nan? . G4e72) (min . G4e71) (max . G4e70) (map . G4e6f) (make-vector . G4e6e) (make-string . G4e6d) (make-rectangular . G4e6c) (make-polar . G4e6b) (magnitude . G4e6a) (log . G4e69) (list? . G4e68) (list-tail . G4e67) (list-ref . G4e66) (list->vector . G4e65) (list->string . G4e64) (list . G4e63) (length . G4e62) (lcm . G4e61) (integer? . G4e60) (integer-valued? . G4e5f) (integer->char . G4e5e) (infinite? . G4e5d) (inexact? . G4e5c) (inexact . G4e5b) (imag-part . G4e5a) (gcd . G4e59) (for-each . G4e58) (floor . G4e57) (finite? . G4e56) (expt . G4e55) (exp . G4e54) (exact? . G4e53) (exact-integer-sqrt . G4e52) (exact . G4e51) (even? . G4e50) (error . G4e4f) (eqv? . G4e4e) (equal? . G4e4d) (eq? . G4e4c) (dynamic-wind . G4e4b) (div0-and-mod0 . G4e4a) (mod0 . G4e49) (div0 . G4e48) (div-and-mod . G4e47) (mod . G4e46) (div . G4e45) (denominator . G4e44) (cos . G4e43) (cons . G4e42) (complex? . G4e41) (char? . G4e40) (char>? . G4e3f) (char>=? . G4e3e) (char=? . G4e3d) (char<? . G4e3c) (char<=? . G4e3b) (char->integer . G4e3a) (ceiling . G4e39) (call-with-values . G4e38) (call/cc . G4e37) (call-with-current-continuation . G4e36) (cddddr . G4e35) (cdddar . G4e34) (cddadr . G4e33) (cddaar . G4e32) (cdaddr . G4e31) (cdadar . G4e30) (cdaadr . G4e2f) (cdaaar . G4e2e) (cadddr . G4e2d) (caddar . G4e2c) (cadadr . G4e2b) (cadaar . G4e2a) (caaddr . G4e29) (caadar . G4e28) (caaadr . G4e27) (caaaar . G4e26) (cdddr . G4e25) (cddar . G4e24) (cdadr . G4e23) (cdaar . G4e22) (caddr . G4e21) (cadar . G4e20) (caadr . G4e1f) (caaar . G4e1e) (cddr . G4e1d) (cdar . G4e1c) (cadr . G4e1b) (caar . G4e1a) (cdr . G4e19) (car . G4e18) (boolean? . G4e17) (boolean=? . G4e16) (atan . G4e15) (assertion-violation . G4e14) (asin . G4e13) (apply . G4e12) (append . G4e11) (angle . G4e10) (acos . G4e0f) (abs . G4e0e) (/ . G4e0d) (* . G4e0c) (- . G4e0b) (+ . G4e0a) (>= . G4e09) (> . G4e08) (= . G4e07) (<= . G4e06) (< . G4e05) (unquote-splicing . G4dd2) (unquote . G4dd1) (_ . G4dd0) (else . G4dcf) (=> . G4dce) (... . G4dcd) (assert . G4dcc) (cond . G4dc7) (let* . G4dc6) (let . G4dc5) (let*-values . G4dc4) (let-values . G4dc3) (identifier-syntax . G4dc2) (quasiquote . G4dbf) (syntax-rules . G4dbe) (case . G4db9) (or . G4db5) (and . G4db4) (if . G4db3) (letrec* . G4db2) (letrec . G4db1) (lambda . G4dae) (quote . G4dab) (letrec-syntax . G4da9) (let-syntax . G4da8) (set! . G4da7) (begin . G4da5) (define-syntax . G4da3) (define . G4da2)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5093 '(rnrs lists) '(6) '() '() '() '((remove . G4f7c) (remv . G4f7b) (remp . G4f7a) (remq . G4f79) (partition . G4f78) (memv . G4f77) (memq . G4f76) (memp . G4f75) (member . G4f74) (exists . G4f73) (for-all . G4f72) (fold-right . G4f71) (fold-left . G4f70) (find . G4f6f) (filter . G4f6e) (cons* . G4f6d) (assv . G4f6c) (assq . G4f6b) (assp . G4f6a) (assoc . G4f69)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5094 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4fd7) (call-with-input-file . G4fd6) (write-char . G4fd5) (write . G4fd4) (with-output-to-file . G4fd3) (with-input-from-file . G4fd2) (read-char . G4fd1) (read . G4fd0) (peek-char . G4fcf) (open-output-file . G4fce) (open-input-file . G4fcd) (newline . G4fcc) (display . G4fcb) (close-output-port . G4fca) (close-input-port . G4fc9) (eof-object? . G4fc8) (eof-object . G4fc7) (current-error-port . G4fc6) (current-output-port . G4fc5) (current-input-port . G4fc4) (output-port? . G4fc3) (input-port? . G4fc2) (make-i/o-write-error . G4ad4) (make-i/o-read-error . G4abf) (make-i/o-port-error . G4b72) (make-i/o-invalid-position-error . G4aea) (make-i/o-filename-error . G4b04) (make-i/o-file-protection-error . G4b1d) (make-i/o-file-is-read-only-error . G4b32) (make-i/o-file-does-not-exist-error . G4b5c) (make-i/o-file-already-exists-error . G4b47) (make-i/o-error . G4aaa) (i/o-write-error? . G4ad6) (i/o-read-error? . G4ac1) (i/o-port-error? . G4b76) (i/o-invalid-position-error? . G4aee) (i/o-filename-error? . G4b08) (i/o-file-protection-error? . G4b1f) (i/o-file-is-read-only-error? . G4b34) (i/o-file-does-not-exist-error? . G4b5e) (i/o-file-already-exists-error? . G4b49) (i/o-error? . G4aac) (i/o-error-position . G4af0) (i/o-error-port . G4b78) (i/o-error-filename . G4b0a) (&i/o-port . G4dff) (&i/o-file-does-not-exist . G4dfe) (&i/o-file-already-exists . G4dfd) (&i/o-file-is-read-only . G4dfc) (&i/o-file-protection . G4dfb) (&i/o-filename . G4dfa) (&i/o-invalid-position . G4df9) (&i/o-write . G4df8) (&i/o-read . G4df7) (&i/o . G4df6)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5095 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4f98) (utf32->string . G4f4d) (utf16->string . G4f4c) (utf8->string . G4f4b) (uint-list->bytevector . G4f4a) (u8-list->bytevector . G4f49) (string->utf8 . G4f48) (string->utf32 . G4f47) (string->utf16 . G4f46) (sint-list->bytevector . G4f45) (native-endianness . G4f44) (bytevector? . G4f43) (bytevector=? . G4f42) (bytevector-uint-set! . G4f41) (bytevector-uint-ref . G4f40) (bytevector-u8-set! . G4f3f) (bytevector-u8-ref . G4f3e) (bytevector-u64-set! . G4f3d) (bytevector-u64-ref . G4f3c) (bytevector-u64-native-set! . G4f3b) (bytevector-u64-native-ref . G4f3a) (bytevector-u32-set! . G4f39) (bytevector-u32-ref . G4f38) (bytevector-u32-native-set! . G4f37) (bytevector-u32-native-ref . G4f36) (bytevector-u16-set! . G4f35) (bytevector-u16-ref . G4f34) (bytevector-u16-native-set! . G4f33) (bytevector-u16-native-ref . G4f32) (bytevector-sint-set! . G4f31) (bytevector-sint-ref . G4f30) (bytevector-s8-set! . G4f2f) (bytevector-s8-ref . G4f2e) (bytevector-s64-set! . G4f2d) (bytevector-s64-ref . G4f2c) (bytevector-s64-native-set! . G4f2b) (bytevector-s64-native-ref . G4f2a) (bytevector-s32-set! . G4f29) (bytevector-s32-ref . G4f28) (bytevector-s32-native-set! . G4f27) (bytevector-s32-native-ref . G4f26) (bytevector-s16-set! . G4f25) (bytevector-s16-ref . G4f24) (bytevector-s16-native-set! . G4f23) (bytevector-s16-native-ref . G4f22) (bytevector-length . G4f21) (bytevector-ieee-single-ref . G4f20) (bytevector-ieee-single-set! . G4f1f) (bytevector-ieee-single-native-set! . G4f1e) (bytevector-ieee-single-native-ref . G4f1d) (bytevector-ieee-double-set! . G4f1c) (bytevector-ieee-double-ref . G4f1b) (bytevector-ieee-double-native-set! . G4f1a) (bytevector-ieee-double-native-ref . G4f19) (bytevector-fill! . G4f18) (bytevector-copy! . G4f17) (bytevector-copy . G4f16) (bytevector->uint-list . G4f15) (bytevector->u8-list . G4f14) (bytevector->sint-list . G4f13) (endianness . G4dcb)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5096 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G501f) (string-titlecase . G501e) (string-normalize-nfkd . G501d) (string-normalize-nfkc . G501c) (string-normalize-nfd . G501b) (string-normalize-nfc . G501a) (string-foldcase . G5019) (string-downcase . G5018) (string-ci>? . G5017) (string-ci>=? . G5016) (string-ci=? . G5015) (string-ci<? . G5014) (string-ci<=? . G5013) (char-whitespace? . G5012) (char-upper-case? . G5011) (char-title-case? . G5010) (char-numeric? . G500f) (char-lower-case? . G500e) (char-general-category . G500d) (char-upcase . G500c) (char-titlecase . G500b) (char-foldcase . G500a) (char-downcase . G5009) (char-ci>? . G5008) (char-ci>=? . G5007) (char-ci=? . G5006) (char-ci<? . G5005) (char-ci<=? . G5004) (char-alphabetic? . G5003)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5097 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f62) (raise-continuable . G4f61) (raise . G4f60) (guard . G4dd7) (else . G4dcf) (=> . G4dce)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5098 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4eb7) (bitwise-reverse-bit-field . G4eb6) (bitwise-length . G4eb5) (bitwise-if . G4eb4) (bitwise-first-bit-set . G4eb3) (bitwise-copy-bit-field . G4eb2) (bitwise-copy-bit . G4eb1) (bitwise-bit-set? . G4eb0) (bitwise-bit-field . G4eaf) (bitwise-bit-count . G4eae) (bitwise-xor . G4ead) (bitwise-ior . G4eac) (bitwise-and . G4eab) (bitwise-not . G4eaa) (bitwise-arithmetic-shift-right . G4ea9) (bitwise-arithmetic-shift-left . G4ea8) (bitwise-arithmetic-shift . G4ea7)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G5099 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4ee4) (fxxor . G4ee3) (fxrotate-bit-field . G4ee2) (fxreverse-bit-field . G4ee1) (fxpositive? . G4ee0) (fxodd? . G4edf) (fxnot . G4ede) (fxnegative? . G4edd) (fxmod0 . G4edc) (fxmod . G4edb) (fxmin . G4eda) (fxmax . G4ed9) (fxlength . G4ed8) (fxior . G4ed7) (fxif . G4ed6) (fxfirst-bit-set . G4ed5) (fxeven? . G4ed4) (fxdiv0-and-mod0 . G4ed3) (fxdiv0 . G4ed2) (fxdiv-and-mod . G4ed1) (fxdiv . G4ed0) (fxcopy-bit-field . G4ecf) (fxcopy-bit . G4ece) (fxbit-set? . G4ecd) (fxbit-field . G4ecc) (fxbit-count . G4ecb) (fxarithmetic-shift-right . G4eca) (fxarithmetic-shift-left . G4ec9) (fxarithmetic-shift . G4ec8) (fxand . G4ec7) (fx>? . G4ec6) (fx>=? . G4ec5) (fx=? . G4ec4) (fx<? . G4ec3) (fx<=? . G4ec2) (fx-/carry . G4ec1) (fx- . G4ec0) (fx+/carry . G4ebf) (fx+ . G4ebe) (fx*/carry . G4ebd) (fx* . G4ebc) (greatest-fixnum . G4ebb) (least-fixnum . G4eba) (fixnum-width . G4eb9) (fixnum? . G4eb8)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G509a '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4bd1) (no-infinities-violation? . G4bbc) (make-no-nans-violation . G4bcf) (make-no-infinities-violation . G4bba) (real->flonum . G4f12) (flzero? . G4f11) (fltruncate . G4f10) (fltan . G4f0f) (flsqrt . G4f0e) (flsin . G4f0d) (flround . G4f0c) (flpositive? . G4f0b) (flonum? . G4f0a) (flodd? . G4f09) (flnumerator . G4f08) (flnegative? . G4f07) (flnan? . G4f06) (flmod0 . G4f05) (flmod . G4f04) (flmin . G4f03) (flmax . G4f02) (fllog . G4f01) (flinteger? . G4f00) (flinfinite? . G4eff) (flfloor . G4efe) (flfinite? . G4efd) (flexpt . G4efc) (flexp . G4efb) (fleven? . G4efa) (fldiv0-and-mod0 . G4ef9) (fldiv0 . G4ef8) (fldiv-and-mod . G4ef7) (fldiv . G4ef6) (fldenominator . G4ef5) (flcos . G4ef4) (flceiling . G4ef3) (flatan . G4ef2) (flasin . G4ef1) (flacos . G4ef0) (flabs . G4eef) (fl>? . G4eee) (fl>=? . G4eed) (fl=? . G4eec) (fl<? . G4eeb) (fl<=? . G4eea) (fl/ . G4ee9) (fl- . G4ee8) (fl+ . G4ee7) (fl* . G4ee6) (fixnum->flonum . G4ee5) (&no-nans . G4e03) (&no-infinities . G4e02)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G509b '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4fec) (string-ci-hash . G4feb) (string-hash . G4fea) (equal-hash . G4fe9) (hashtable-equivalence-function . G4fe8) (make-hashtable . G4fe7) (hashtable-hash-function . G4fe6) (make-eqv-hashtable . G4fe5) (make-eq-hashtable . G4fe4) (hashtable? . G4fe3) (hashtable-update! . G4fe2) (hashtable-size . G4fe1) (hashtable-set! . G4fe0) (hashtable-ref . G4fdf) (hashtable-mutable? . G4fde) (hashtable-keys . G4fdd) (hashtable-entries . G4fdc) (hashtable-delete! . G4fdb) (hashtable-copy . G4fda) (hashtable-contains? . G4fd9) (hashtable-clear! . G4fd8)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G509c '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4fc8) (eof-object . G4fc7) (current-error-port . G4fc6) (current-output-port . G4fc5) (current-input-port . G4fc4) (output-port? . G4fc3) (input-port? . G4fc2) (utf-8-codec . G4fc1) (utf-16-codec . G4fc0) (transcoder-error-handling-mode . G4fbf) (transcoder-eol-style . G4fbe) (transcoder-codec . G4fbd) (transcoded-port . G4fbc) (textual-port? . G4fbb) (string->bytevector . G4fba) (standard-output-port . G4fb9) (standard-input-port . G4fb8) (standard-error-port . G4fb7) (set-port-position! . G4fb6) (put-u8 . G4fb5) (put-string . G4fb4) (put-datum . G4fb3) (put-char . G4fb2) (put-bytevector . G4fb1) (port? . G4fb0) (port-transcoder . G4faf) (port-position . G4fae) (port-has-set-port-position!? . G4fad) (port-has-port-position? . G4fac) (port-eof? . G4fab) (output-port-buffer-mode . G4faa) (open-string-output-port . G4fa9) (open-string-input-port . G4fa8) (open-file-output-port . G4fa7) (open-file-input/output-port . G4fa6) (open-file-input-port . G4fa5) (open-bytevector-output-port . G4fa4) (open-bytevector-input-port . G4fa3) (native-transcoder . G4fa2) (native-eol-style . G4fa1) (make-transcoder . G4fa0) (latin-1-codec . G4f9f) (make-i/o-write-error . G4ad4) (make-i/o-read-error . G4abf) (make-i/o-port-error . G4b72) (make-i/o-invalid-position-error . G4aea) (make-i/o-filename-error . G4b04) (make-i/o-file-protection-error . G4b1d) (make-i/o-file-is-read-only-error . G4b32) (make-i/o-file-does-not-exist-error . G4b5c) (make-i/o-file-already-exists-error . G4b47) (make-i/o-error . G4aaa) (make-i/o-encoding-error . G4ba1) (make-i/o-decoding-error . G4b8b) (make-custom-textual-output-port . G4f9e) (make-custom-textual-input/output-port . G4f9d) (make-custom-textual-input-port . G4f9c) (make-custom-binary-output-port . G4f9b) (make-custom-binary-input/output-port . G4f9a) (make-custom-binary-input-port . G4f99) (lookahead-u8 . G4f97) (lookahead-char . G4f96) (i/o-write-error? . G4ad6) (i/o-read-error? . G4ac1) (i/o-port-error? . G4b76) (i/o-invalid-position-error? . G4aee) (i/o-filename-error? . G4b08) (i/o-file-protection-error? . G4b1f) (i/o-file-is-read-only-error? . G4b34) (i/o-file-does-not-exist-error? . G4b5e) (i/o-file-already-exists-error? . G4b49) (i/o-error? . G4aac) (i/o-error-position . G4af0) (i/o-error-port . G4b78) (i/o-error-filename . G4b0a) (i/o-encoding-error? . G4ba5) (i/o-encoding-error-char . G4ba7) (i/o-decoding-error? . G4b8d) (get-u8 . G4f95) (get-string-n! . G4f94) (get-string-n . G4f93) (get-string-all . G4f92) (get-line . G4f91) (get-datum . G4f90) (get-char . G4f8f) (get-bytevector-some . G4f8e) (get-bytevector-n! . G4f8d) (get-bytevector-n . G4f8c) (get-bytevector-all . G4f8b) (flush-output-port . G4f8a) (close-port . G4f89) (call-with-string-output-port . G4f68) (call-with-port . G4f67) (call-with-bytevector-output-port . G4f66) (bytevector->string . G4f65) (buffer-mode? . G4f64) (binary-port? . G4f63) (&i/o-encoding . G4e01) (&i/o-decoding . G4e00) (&i/o-port . G4dff) (&i/o-file-does-not-exist . G4dfe) (&i/o-file-already-exists . G4dfd) (&i/o-file-is-read-only . G4dfc) (&i/o-file-protection . G4dfb) (&i/o-filename . G4dfa) (&i/o-invalid-position . G4df9) (&i/o-write . G4df8) (&i/o-read . G4df7) (&i/o . G4df6) (error-handling-mode . G4ddb) (file-options . G4dda) (buffer-mode . G4dd9) (eol-style . G4dd8)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G509d '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f5f) (enum-set=? . G4f5e) (enum-set-universe . G4f5d) (enum-set-union . G4f5c) (enum-set-subset? . G4f5b) (enum-set-projection . G4f5a) (enum-set-member? . G4f59) (enum-set-intersection . G4f58) (enum-set-indexer . G4f57) (enum-set-difference . G4f56) (enum-set-constructor . G4f55) (enum-set-complement . G4f54) (enum-set->list . G4f53) (define-enumeration . G4de6)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G509e '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a22) (warning? . G499c) (violation? . G49db) (undefined-violation? . G4a97) (syntax-violation? . G4a7e) (syntax-violation-subform . G4a82) (syntax-violation-form . G4a80) (syntax-violation . G3027) (simple-conditions . G4f52) (serious-condition? . G49b1) (non-continuable-violation? . G4a39) (message-condition? . G4985) (make-who-condition . G4a1e) (make-warning . G499a) (make-violation . G49d9) (make-undefined-violation . G4a95) (make-syntax-violation . G4a78) (make-serious-condition . G49af) (make-non-continuable-violation . G4a37) (make-message-condition . G4981) (make-lexical-violation . G4a61) (make-irritants-condition . G4a04) (make-implementation-restriction-violation . G4a4c) (make-error . G49c4) (make-assertion-violation . G49ee) (lexical-violation? . G4a63) (irritants-condition? . G4a08) (implementation-restriction-violation? . G4a4e) (error? . G49c6) (condition-who . G4a24) (condition-predicate . G4f51) (condition-message . G4987) (condition-irritants . G4a0a) (condition-accessor . G4f50) (condition . G4f4f) (assertion-violation? . G49f0) (condition? . G4f4e) (&undefined . G4df5) (&syntax . G4df4) (&lexical . G4df3) (&implementation-restriction . G4df2) (&non-continuable . G4df1) (&who . G4df0) (&irritants . G4def) (&assertion . G4dee) (&violation . G4ded) (&error . G4dec) (&serious . G4deb) (&warning . G4dea) (&message . G4de9) (&condition . G4de8) (define-condition-type . G4de7)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G509f '(rnrs records inspection) '(6) '() '() '() '((record? . G4ffb) (record-type-uid . G4ffa) (record-type-sealed? . G4ff9) (record-type-parent . G4ff8) (record-type-opaque? . G4ff7) (record-type-name . G4ff6) (record-type-generative? . G4ff5) (record-type-field-names . G4ff4) (record-rtd . G4ff3) (record-field-mutable? . G4ff2)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G50a0 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G5002) (record-predicate . G5001) (record-mutator . G5000) (record-constructor . G4fff) (record-accessor . G4ffe) (make-record-type-descriptor . G4ffd) (make-record-constructor-descriptor . G4ffc)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G50a1 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4de5) (parent-rtd . G4de4) (nongenerative . G4de3) (opaque . G4de2) (sealed . G4de1) (protocol . G4de0) (parent . G4ddf) (immutable . G4dde) (mutable . G4ddd) (fields . G4ddc) (record-constructor-descriptor . G4dbb) (record-type-descriptor . G4dba)) '() values values '#f '#f '#t '#f) (G2b57@G29fc@install-library 'G50a2 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4bd5) (&no-nans-rtd . G4bd3) (&no-infinities-rcd . G4bc0) (&no-infinities-rtd . G4bbe) (&i/o-encoding-rcd . G4bab) (&i/o-encoding-rtd . G4ba9) (&i/o-decoding-rcd . G4b91) (&i/o-decoding-rtd . G4b8f) (&i/o-port-rcd . G4b7c) (&i/o-port-rtd . G4b7a) (&i/o-file-does-not-exist-rcd . G4b62) (&i/o-file-does-not-exist-rtd . G4b60) (&i/o-file-already-exists-rcd . G4b4d) (&i/o-file-already-exists-rtd . G4b4b) (&i/o-file-is-read-only-rcd . G4b38) (&i/o-file-is-read-only-rtd . G4b36) (&i/o-file-protection-rcd . G4b23) (&i/o-file-protection-rtd . G4b21) (&i/o-filename-rcd . G4b0e) (&i/o-filename-rtd . G4b0c) (&i/o-invalid-position-rcd . G4af4) (&i/o-invalid-position-rtd . G4af2) (&i/o-write-rcd . G4ada) (&i/o-write-rtd . G4ad8) (&i/o-read-rcd . G4ac5) (&i/o-read-rtd . G4ac3) (&i/o-rcd . G4ab0) (&i/o-rtd . G4aae) (&undefined-rcd . G4a9b) (&undefined-rtd . G4a99) (&syntax-rcd . G4a86) (&syntax-rtd . G4a84) (&lexical-rcd . G4a67) (&lexical-rtd . G4a65) (&implementation-restriction-rcd . G4a52) (&implementation-restriction-rtd . G4a50) (&non-continuable-rcd . G4a3d) (&non-continuable-rtd . G4a3b) (&who-rcd . G4a28) (&who-rtd . G4a26) (&irritants-rcd . G4a0e) (&irritants-rtd . G4a0c) (&assertion-rcd . G49f4) (&assertion-rtd . G49f2) (&violation-rcd . G49df) (&violation-rtd . G49dd) (&error-rcd . G49ca) (&error-rtd . G49c8) (&serious-rcd . G49b5) (&serious-rtd . G49b3) (&warning-rcd . G49a0) (&warning-rtd . G499e) (&message-rcd . G498b) (&message-rtd . G4989) (&condition-rcd . G492e) (&condition-rtd . G492c) (syntax-error . G3023) (syntax-dispatch . G2f3c) (pretty-print . G5082) (eval-core . G5081) (set-symbol-value! . G5080) (symbol-value . G507f) (gensym . G507e) (void . G507d) (load . G4cdc) (interaction-environment . G3033) (char-ready? . G507c) (regexp? . G507b) (read-line . G507a) (dotted-list? . G5079) (circular-list? . G5078) (proper-list? . G5077) (circular-list . G5076) (last . G5075) (last-pair . G5074) (not-pair? . G5073) (split-at! . G5072) (split-at . G5071) (list= . G5070) (list-copy . G506f) (list-tabulate . G506e) (make-list . G506d) (xcons . G506c) (tenth . G506b) (ninth . G506a) (eighth . G5069) (seventh . G5068) (sixth . G5067) (fifth . G5066) (drop-right! . G5065) (drop-right . G5064) (take-right . G5063) (take! . G5062) (drop . G5061) (take . G5060) (car+cdr . G505f) (fourth . G505e) (third . G505d) (second . G505c) (first . G505b) (iota . G505a) (every . G5059) (ungensym . G5058) (alist->eq-hash-table . G5057) (assoc-ref . G5056) (alist-cons . G5055) (append-map . G5054) (print . G5053) (format . G5052) (standard-library-path . G5051) (file-newer? . G5050) (stat-mtime . G504f) (write-to-file . G504e) (file->list . G504d) (file->string . G504c) (digit->integer . G504b) (call-with-string-input-port . G504a) (call-with-string-io . G5049) (string-split . G5048) (bytevector-for-each . G5047) (string->regexp . G5046) (rxmatch . G5045) (regexp-replace-all . G5044) (hashtable-for-each . G5043) (call-process . G5042) (local-tz-offset . G5041) (microseconds . G5040) (readdir . G503f) (set-current-directory! . G503e) (expand-path . G503d) (current-directory . G503c) (%spawn . G503b) (%waitpid . G503a) (%ffi-supported? . G5039) (%ffi-pointer-ref . G5038) (%ffi-pointer->string . G5037) (%ffi-call->string-or-zero . G5036) (%ffi-call->double . G5035) (%ffi-call->void* . G5034) (%ffi-call->void . G5033) (%ffi-call->int . G5032) (%ffi-lookup . G5031) (%ffi-open . G5030) (%fork . G502f) (%pipe . G502e) (p . G502d) (get-environment-variables . G502c) (get-environment-variable . G502b) (get-timeofday . G502a) (get-command-line . G5029) (sys-display . G5028) (source-info . G5027) (make-compiler-instruction . G5026) (make-instruction . G5025) (set-source-info! . G5024) (bignum? . G5023) (fast-equal? . G5022) (fasl-read . G5021) (fasl-write . G5020) (make-parameter . G2813) (string-upcase . G501f) (string-titlecase . G501e) (string-normalize-nfkd . G501d) (string-normalize-nfkc . G501c) (string-normalize-nfd . G501b) (string-normalize-nfc . G501a) (string-foldcase . G5019) (string-downcase . G5018) (string-ci>? . G5017) (string-ci>=? . G5016) (string-ci=? . G5015) (string-ci<? . G5014) (string-ci<=? . G5013) (char-whitespace? . G5012) (char-upper-case? . G5011) (char-title-case? . G5010) (char-numeric? . G500f) (char-lower-case? . G500e) (char-general-category . G500d) (char-upcase . G500c) (char-titlecase . G500b) (char-foldcase . G500a) (char-downcase . G5009) (char-ci>? . G5008) (char-ci>=? . G5007) (char-ci=? . G5006) (char-ci<? . G5005) (char-ci<=? . G5004) (char-alphabetic? . G5003) (make-variable-transformer . G2d77) (identifier? . G3029) (generate-temporaries . G3015) (free-identifier=? . G3017) (syntax->datum . G302d) (datum->syntax . G302b) (bound-identifier=? . G3019) (record-type-descriptor? . G5002) (record-predicate . G5001) (record-mutator . G5000) (record-constructor . G4fff) (record-accessor . G4ffe) (make-record-type-descriptor . G4ffd) (make-record-constructor-descriptor . G4ffc) (record? . G4ffb) (record-type-uid . G4ffa) (record-type-sealed? . G4ff9) (record-type-parent . G4ff8) (record-type-opaque? . G4ff7) (record-type-name . G4ff6) (record-type-generative? . G4ff5) (record-type-field-names . G4ff4) (record-rtd . G4ff3) (record-field-mutable? . G4ff2) (delete-file . G4ff1) (file-exists? . G4ff0) (vector-sort! . G4fef) (vector-sort . G4fee) (list-sort . G4fed) (symbol-hash . G4fec) (string-ci-hash . G4feb) (string-hash . G4fea) (equal-hash . G4fe9) (hashtable-equivalence-function . G4fe8) (make-hashtable . G4fe7) (hashtable-hash-function . G4fe6) (make-eqv-hashtable . G4fe5) (make-eq-hashtable . G4fe4) (hashtable? . G4fe3) (hashtable-update! . G4fe2) (hashtable-size . G4fe1) (hashtable-set! . G4fe0) (hashtable-ref . G4fdf) (hashtable-mutable? . G4fde) (hashtable-keys . G4fdd) (hashtable-entries . G4fdc) (hashtable-delete! . G4fdb) (hashtable-copy . G4fda) (hashtable-contains? . G4fd9) (hashtable-clear! . G4fd8) (call-with-output-file . G4fd7) (call-with-input-file . G4fd6) (write-char . G4fd5) (write . G4fd4) (with-output-to-file . G4fd3) (with-input-from-file . G4fd2) (read-char . G4fd1) (read . G4fd0) (peek-char . G4fcf) (open-output-file . G4fce) (open-input-file . G4fcd) (newline . G4fcc) (display . G4fcb) (close-output-port . G4fca) (close-input-port . G4fc9) (eof-object? . G4fc8) (eof-object . G4fc7) (current-error-port . G4fc6) (current-output-port . G4fc5) (current-input-port . G4fc4) (output-port? . G4fc3) (input-port? . G4fc2) (utf-8-codec . G4fc1) (utf-16-codec . G4fc0) (transcoder-error-handling-mode . G4fbf) (transcoder-eol-style . G4fbe) (transcoder-codec . G4fbd) (transcoded-port . G4fbc) (textual-port? . G4fbb) (string->bytevector . G4fba) (standard-output-port . G4fb9) (standard-input-port . G4fb8) (standard-error-port . G4fb7) (set-port-position! . G4fb6) (put-u8 . G4fb5) (put-string . G4fb4) (put-datum . G4fb3) (put-char . G4fb2) (put-bytevector . G4fb1) (port? . G4fb0) (port-transcoder . G4faf) (port-position . G4fae) (port-has-set-port-position!? . G4fad) (port-has-port-position? . G4fac) (port-eof? . G4fab) (output-port-buffer-mode . G4faa) (open-string-output-port . G4fa9) (open-string-input-port . G4fa8) (open-file-output-port . G4fa7) (open-file-input/output-port . G4fa6) (open-file-input-port . G4fa5) (open-bytevector-output-port . G4fa4) (open-bytevector-input-port . G4fa3) (native-transcoder . G4fa2) (native-eol-style . G4fa1) (make-transcoder . G4fa0) (latin-1-codec . G4f9f) (make-i/o-write-error . G4ad4) (make-i/o-read-error . G4abf) (make-i/o-port-error . G4b72) (make-i/o-invalid-position-error . G4aea) (make-i/o-filename-error . G4b04) (make-i/o-file-protection-error . G4b1d) (make-i/o-file-is-read-only-error . G4b32) (make-i/o-file-does-not-exist-error . G4b5c) (make-i/o-file-already-exists-error . G4b47) (make-i/o-error . G4aaa) (make-i/o-encoding-error . G4ba1) (make-i/o-decoding-error . G4b8b) (make-custom-textual-output-port . G4f9e) (make-custom-textual-input/output-port . G4f9d) (make-custom-textual-input-port . G4f9c) (make-custom-binary-output-port . G4f9b) (make-custom-binary-input/output-port . G4f9a) (make-custom-binary-input-port . G4f99) (make-bytevector . G4f98) (lookahead-u8 . G4f97) (lookahead-char . G4f96) (i/o-write-error? . G4ad6) (i/o-read-error? . G4ac1) (i/o-port-error? . G4b76) (i/o-invalid-position-error? . G4aee) (i/o-filename-error? . G4b08) (i/o-file-protection-error? . G4b1f) (i/o-file-is-read-only-error? . G4b34) (i/o-file-does-not-exist-error? . G4b5e) (i/o-file-already-exists-error? . G4b49) (i/o-error? . G4aac) (i/o-error-position . G4af0) (i/o-error-port . G4b78) (i/o-error-filename . G4b0a) (i/o-encoding-error? . G4ba5) (i/o-encoding-error-char . G4ba7) (i/o-decoding-error? . G4b8d) (get-u8 . G4f95) (get-string-n! . G4f94) (get-string-n . G4f93) (get-string-all . G4f92) (get-line . G4f91) (get-datum . G4f90) (get-char . G4f8f) (get-bytevector-some . G4f8e) (get-bytevector-n! . G4f8d) (get-bytevector-n . G4f8c) (get-bytevector-all . G4f8b) (flush-output-port . G4f8a) (close-port . G4f89) (scheme-report-environment . G3003) (quotient . G4f88) (null-environment . G3001) (remainder . G4f87) (modulo . G4f86) (inexact->exact . G4f85) (force . G4f84) (exact->inexact . G4f83) (make-promise . G4f82) (exit . G4f81) (command-line . G4cd6) (string-fill! . G4f80) (string-set! . G4f7f) (set-cdr! . G4f7e) (set-car! . G4f7d) (remove . G4f7c) (remv . G4f7b) (remp . G4f7a) (remq . G4f79) (partition . G4f78) (memv . G4f77) (memq . G4f76) (memp . G4f75) (member . G4f74) (exists . G4f73) (for-all . G4f72) (fold-right . G4f71) (fold-left . G4f70) (find . G4f6f) (filter . G4f6e) (cons* . G4f6d) (assv . G4f6c) (assq . G4f6b) (assp . G4f6a) (assoc . G4f69) (call-with-string-output-port . G4f68) (call-with-port . G4f67) (call-with-bytevector-output-port . G4f66) (bytevector->string . G4f65) (buffer-mode? . G4f64) (binary-port? . G4f63) (with-exception-handler . G4f62) (raise-continuable . G4f61) (raise . G4f60) (eval . G3007) (environment . G2fff) (make-enumeration . G4f5f) (enum-set=? . G4f5e) (enum-set-universe . G4f5d) (enum-set-union . G4f5c) (enum-set-subset? . G4f5b) (enum-set-projection . G4f5a) (enum-set-member? . G4f59) (enum-set-intersection . G4f58) (enum-set-indexer . G4f57) (enum-set-difference . G4f56) (enum-set-constructor . G4f55) (enum-set-complement . G4f54) (enum-set->list . G4f53) (who-condition? . G4a22) (warning? . G499c) (violation? . G49db) (undefined-violation? . G4a97) (syntax-violation? . G4a7e) (syntax-violation-subform . G4a82) (syntax-violation-form . G4a80) (syntax-violation . G3027) (simple-conditions . G4f52) (serious-condition? . G49b1) (non-continuable-violation? . G4a39) (message-condition? . G4985) (make-who-condition . G4a1e) (make-warning . G499a) (make-violation . G49d9) (make-undefined-violation . G4a95) (make-syntax-violation . G4a78) (make-serious-condition . G49af) (make-non-continuable-violation . G4a37) (make-message-condition . G4981) (make-lexical-violation . G4a61) (make-irritants-condition . G4a04) (make-implementation-restriction-violation . G4a4c) (make-error . G49c4) (make-assertion-violation . G49ee) (lexical-violation? . G4a63) (irritants-condition? . G4a08) (implementation-restriction-violation? . G4a4e) (error? . G49c6) (condition-who . G4a24) (condition-predicate . G4f51) (condition-message . G4987) (condition-irritants . G4a0a) (condition-accessor . G4f50) (condition . G4f4f) (assertion-violation? . G49f0) (condition? . G4f4e) (utf32->string . G4f4d) (utf16->string . G4f4c) (utf8->string . G4f4b) (uint-list->bytevector . G4f4a) (u8-list->bytevector . G4f49) (string->utf8 . G4f48) (string->utf32 . G4f47) (string->utf16 . G4f46) (sint-list->bytevector . G4f45) (native-endianness . G4f44) (bytevector? . G4f43) (bytevector=? . G4f42) (bytevector-uint-set! . G4f41) (bytevector-uint-ref . G4f40) (bytevector-u8-set! . G4f3f) (bytevector-u8-ref . G4f3e) (bytevector-u64-set! . G4f3d) (bytevector-u64-ref . G4f3c) (bytevector-u64-native-set! . G4f3b) (bytevector-u64-native-ref . G4f3a) (bytevector-u32-set! . G4f39) (bytevector-u32-ref . G4f38) (bytevector-u32-native-set! . G4f37) (bytevector-u32-native-ref . G4f36) (bytevector-u16-set! . G4f35) (bytevector-u16-ref . G4f34) (bytevector-u16-native-set! . G4f33) (bytevector-u16-native-ref . G4f32) (bytevector-sint-set! . G4f31) (bytevector-sint-ref . G4f30) (bytevector-s8-set! . G4f2f) (bytevector-s8-ref . G4f2e) (bytevector-s64-set! . G4f2d) (bytevector-s64-ref . G4f2c) (bytevector-s64-native-set! . G4f2b) (bytevector-s64-native-ref . G4f2a) (bytevector-s32-set! . G4f29) (bytevector-s32-ref . G4f28) (bytevector-s32-native-set! . G4f27) (bytevector-s32-native-ref . G4f26) (bytevector-s16-set! . G4f25) (bytevector-s16-ref . G4f24) (bytevector-s16-native-set! . G4f23) (bytevector-s16-native-ref . G4f22) (bytevector-length . G4f21) (bytevector-ieee-single-ref . G4f20) (bytevector-ieee-single-set! . G4f1f) (bytevector-ieee-single-native-set! . G4f1e) (bytevector-ieee-single-native-ref . G4f1d) (bytevector-ieee-double-set! . G4f1c) (bytevector-ieee-double-ref . G4f1b) (bytevector-ieee-double-native-set! . G4f1a) (bytevector-ieee-double-native-ref . G4f19) (bytevector-fill! . G4f18) (bytevector-copy! . G4f17) (bytevector-copy . G4f16) (bytevector->uint-list . G4f15) (bytevector->u8-list . G4f14) (bytevector->sint-list . G4f13) (no-nans-violation? . G4bd1) (no-infinities-violation? . G4bbc) (make-no-nans-violation . G4bcf) (make-no-infinities-violation . G4bba) (real->flonum . G4f12) (flzero? . G4f11) (fltruncate . G4f10) (fltan . G4f0f) (flsqrt . G4f0e) (flsin . G4f0d) (flround . G4f0c) (flpositive? . G4f0b) (flonum? . G4f0a) (flodd? . G4f09) (flnumerator . G4f08) (flnegative? . G4f07) (flnan? . G4f06) (flmod0 . G4f05) (flmod . G4f04) (flmin . G4f03) (flmax . G4f02) (fllog . G4f01) (flinteger? . G4f00) (flinfinite? . G4eff) (flfloor . G4efe) (flfinite? . G4efd) (flexpt . G4efc) (flexp . G4efb) (fleven? . G4efa) (fldiv0-and-mod0 . G4ef9) (fldiv0 . G4ef8) (fldiv-and-mod . G4ef7) (fldiv . G4ef6) (fldenominator . G4ef5) (flcos . G4ef4) (flceiling . G4ef3) (flatan . G4ef2) (flasin . G4ef1) (flacos . G4ef0) (flabs . G4eef) (fl>? . G4eee) (fl>=? . G4eed) (fl=? . G4eec) (fl<? . G4eeb) (fl<=? . G4eea) (fl/ . G4ee9) (fl- . G4ee8) (fl+ . G4ee7) (fl* . G4ee6) (fixnum->flonum . G4ee5) (fxzero? . G4ee4) (fxxor . G4ee3) (fxrotate-bit-field . G4ee2) (fxreverse-bit-field . G4ee1) (fxpositive? . G4ee0) (fxodd? . G4edf) (fxnot . G4ede) (fxnegative? . G4edd) (fxmod0 . G4edc) (fxmod . G4edb) (fxmin . G4eda) (fxmax . G4ed9) (fxlength . G4ed8) (fxior . G4ed7) (fxif . G4ed6) (fxfirst-bit-set . G4ed5) (fxeven? . G4ed4) (fxdiv0-and-mod0 . G4ed3) (fxdiv0 . G4ed2) (fxdiv-and-mod . G4ed1) (fxdiv . G4ed0) (fxcopy-bit-field . G4ecf) (fxcopy-bit . G4ece) (fxbit-set? . G4ecd) (fxbit-field . G4ecc) (fxbit-count . G4ecb) (fxarithmetic-shift-right . G4eca) (fxarithmetic-shift-left . G4ec9) (fxarithmetic-shift . G4ec8) (fxand . G4ec7) (fx>? . G4ec6) (fx>=? . G4ec5) (fx=? . G4ec4) (fx<? . G4ec3) (fx<=? . G4ec2) (fx-/carry . G4ec1) (fx- . G4ec0) (fx+/carry . G4ebf) (fx+ . G4ebe) (fx*/carry . G4ebd) (fx* . G4ebc) (greatest-fixnum . G4ebb) (least-fixnum . G4eba) (fixnum-width . G4eb9) (fixnum? . G4eb8) (bitwise-rotate-bit-field . G4eb7) (bitwise-reverse-bit-field . G4eb6) (bitwise-length . G4eb5) (bitwise-if . G4eb4) (bitwise-first-bit-set . G4eb3) (bitwise-copy-bit-field . G4eb2) (bitwise-copy-bit . G4eb1) (bitwise-bit-set? . G4eb0) (bitwise-bit-field . G4eaf) (bitwise-bit-count . G4eae) (bitwise-xor . G4ead) (bitwise-ior . G4eac) (bitwise-and . G4eab) (bitwise-not . G4eaa) (bitwise-arithmetic-shift-right . G4ea9) (bitwise-arithmetic-shift-left . G4ea8) (bitwise-arithmetic-shift . G4ea7) (zero? . G4ea6) (vector? . G4ea5) (vector-set! . G4ea4) (vector-ref . G4ea3) (vector-map . G4ea2) (vector-length . G4ea1) (vector-for-each . G4ea0) (vector-fill! . G4e9f) (vector->list . G4e9e) (vector . G4e9d) (values . G4e9c) (truncate . G4e9b) (tan . G4e9a) (symbol? . G4e99) (symbol=? . G4e98) (symbol->string . G4e97) (substring . G4e96) (string? . G4e95) (string>? . G4e94) (string>=? . G4e93) (string=? . G4e92) (string<? . G4e91) (string<=? . G4e90) (string-ref . G4e8f) (string-length . G4e8e) (string-for-each . G4e8d) (string-copy . G4e8c) (string-append . G4e8b) (string->symbol . G4e8a) (string->number . G4e89) (string->list . G4e88) (string . G4e87) (sqrt . G4e86) (sin . G4e85) (round . G4e84) (reverse . G4e83) (real? . G4e82) (real-valued? . G4e81) (real-part . G4e80) (rationalize . G4e7f) (rational? . G4e7e) (rational-valued? . G4e7d) (procedure? . G4e7c) (positive? . G4e7b) (pair? . G4e7a) (odd? . G4e79) (numerator . G4e78) (number? . G4e77) (number->string . G4e76) (null? . G4e75) (not . G4e74) (negative? . G4e73) (nan? . G4e72) (min . G4e71) (max . G4e70) (map . G4e6f) (make-vector . G4e6e) (make-string . G4e6d) (make-rectangular . G4e6c) (make-polar . G4e6b) (magnitude . G4e6a) (log . G4e69) (list? . G4e68) (list-tail . G4e67) (list-ref . G4e66) (list->vector . G4e65) (list->string . G4e64) (list . G4e63) (length . G4e62) (lcm . G4e61) (integer? . G4e60) (integer-valued? . G4e5f) (integer->char . G4e5e) (infinite? . G4e5d) (inexact? . G4e5c) (inexact . G4e5b) (imag-part . G4e5a) (gcd . G4e59) (for-each . G4e58) (floor . G4e57) (finite? . G4e56) (expt . G4e55) (exp . G4e54) (exact? . G4e53) (exact-integer-sqrt . G4e52) (exact . G4e51) (even? . G4e50) (error . G4e4f) (eqv? . G4e4e) (equal? . G4e4d) (eq? . G4e4c) (dynamic-wind . G4e4b) (div0-and-mod0 . G4e4a) (mod0 . G4e49) (div0 . G4e48) (div-and-mod . G4e47) (mod . G4e46) (div . G4e45) (denominator . G4e44) (cos . G4e43) (cons . G4e42) (complex? . G4e41) (char? . G4e40) (char>? . G4e3f) (char>=? . G4e3e) (char=? . G4e3d) (char<? . G4e3c) (char<=? . G4e3b) (char->integer . G4e3a) (ceiling . G4e39) (call-with-values . G4e38) (call/cc . G4e37) (call-with-current-continuation . G4e36) (cddddr . G4e35) (cdddar . G4e34) (cddadr . G4e33) (cddaar . G4e32) (cdaddr . G4e31) (cdadar . G4e30) (cdaadr . G4e2f) (cdaaar . G4e2e) (cadddr . G4e2d) (caddar . G4e2c) (cadadr . G4e2b) (cadaar . G4e2a) (caaddr . G4e29) (caadar . G4e28) (caaadr . G4e27) (caaaar . G4e26) (cdddr . G4e25) (cddar . G4e24) (cdadr . G4e23) (cdaar . G4e22) (caddr . G4e21) (cadar . G4e20) (caadr . G4e1f) (caaar . G4e1e) (cddr . G4e1d) (cdar . G4e1c) (cadr . G4e1b) (caar . G4e1a) (cdr . G4e19) (car . G4e18) (boolean? . G4e17) (boolean=? . G4e16) (atan . G4e15) (assertion-violation . G4e14) (asin . G4e13) (apply . G4e12) (append . G4e11) (angle . G4e10) (acos . G4e0f) (abs . G4e0e) (/ . G4e0d) (* . G4e0c) (- . G4e0b) (+ . G4e0a) (>= . G4e09) (> . G4e08) (= . G4e07) (<= . G4e06) (< . G4e05) (library . G4e04) (&no-nans . G4e03) (&no-infinities . G4e02) (&i/o-encoding . G4e01) (&i/o-decoding . G4e00) (&i/o-port . G4dff) (&i/o-file-does-not-exist . G4dfe) (&i/o-file-already-exists . G4dfd) (&i/o-file-is-read-only . G4dfc) (&i/o-file-protection . G4dfb) (&i/o-filename . G4dfa) (&i/o-invalid-position . G4df9) (&i/o-write . G4df8) (&i/o-read . G4df7) (&i/o . G4df6) (&undefined . G4df5) (&syntax . G4df4) (&lexical . G4df3) (&implementation-restriction . G4df2) (&non-continuable . G4df1) (&who . G4df0) (&irritants . G4def) (&assertion . G4dee) (&violation . G4ded) (&error . G4dec) (&serious . G4deb) (&warning . G4dea) (&message . G4de9) (&condition . G4de8) (define-condition-type . G4de7) (define-enumeration . G4de6) (define-record-type . G4de5) (parent-rtd . G4de4) (nongenerative . G4de3) (opaque . G4de2) (sealed . G4de1) (protocol . G4de0) (parent . G4ddf) (immutable . G4dde) (mutable . G4ddd) (fields . G4ddc) (error-handling-mode . G4ddb) (file-options . G4dda) (buffer-mode . G4dd9) (eol-style . G4dd8) (guard . G4dd7) (trace-define . G4dd6) (trace-lambda . G4dd5) (unsyntax-splicing . G4dd4) (unsyntax . G4dd3) (unquote-splicing . G4dd2) (unquote . G4dd1) (_ . G4dd0) (else . G4dcf) (=> . G4dce) (... . G4dcd) (assert . G4dcc) (endianness . G4dcb) (delay . G4dca) (time . G4dc9) (do . G4dc8) (cond . G4dc7) (let* . G4dc6) (let . G4dc5) (let*-values . G4dc4) (let-values . G4dc3) (identifier-syntax . G4dc2) (with-syntax . G4dc1) (quasisyntax . G4dc0) (quasiquote . G4dbf) (syntax-rules . G4dbe) (include . G4dbd) (define-struct . G4dbc) (record-constructor-descriptor . G4dbb) (record-type-descriptor . G4dba) (case . G4db9) (parameterize . G4db8) (unless . G4db7) (when . G4db6) (or . G4db5) (and . G4db4) (if . G4db3) (letrec* . G4db2) (letrec . G4db1) (type-descriptor . G4db0) (case-lambda . G4daf) (lambda . G4dae) (syntax . G4dad) (syntax-case . G4dac) (quote . G4dab) (foreign-call . G4daa) (letrec-syntax . G4da9) (let-syntax . G4da8) (set! . G4da7) (import . G4da6) (begin . G4da5) (module . G4da4) (define-syntax . G4da3) (define . G4da2)) '((G4bd5 core-prim . &no-nans-rcd) (G4bd3 core-prim . &no-nans-rtd) (G4bc0 core-prim . &no-infinities-rcd) (G4bbe core-prim . &no-infinities-rtd) (G4bab core-prim . &i/o-encoding-rcd) (G4ba9 core-prim . &i/o-encoding-rtd) (G4b91 core-prim . &i/o-decoding-rcd) (G4b8f core-prim . &i/o-decoding-rtd) (G4b7c core-prim . &i/o-port-rcd) (G4b7a core-prim . &i/o-port-rtd) (G4b62 core-prim . &i/o-file-does-not-exist-rcd) (G4b60 core-prim . &i/o-file-does-not-exist-rtd) (G4b4d core-prim . &i/o-file-already-exists-rcd) (G4b4b core-prim . &i/o-file-already-exists-rtd) (G4b38 core-prim . &i/o-file-is-read-only-rcd) (G4b36 core-prim . &i/o-file-is-read-only-rtd) (G4b23 core-prim . &i/o-file-protection-rcd) (G4b21 core-prim . &i/o-file-protection-rtd) (G4b0e core-prim . &i/o-filename-rcd) (G4b0c core-prim . &i/o-filename-rtd) (G4af4 core-prim . &i/o-invalid-position-rcd) (G4af2 core-prim . &i/o-invalid-position-rtd) (G4ada core-prim . &i/o-write-rcd) (G4ad8 core-prim . &i/o-write-rtd) (G4ac5 core-prim . &i/o-read-rcd) (G4ac3 core-prim . &i/o-read-rtd) (G4ab0 core-prim . &i/o-rcd) (G4aae core-prim . &i/o-rtd) (G4a9b core-prim . &undefined-rcd) (G4a99 core-prim . &undefined-rtd) (G4a86 core-prim . &syntax-rcd) (G4a84 core-prim . &syntax-rtd) (G4a67 core-prim . &lexical-rcd) (G4a65 core-prim . &lexical-rtd) (G4a52 core-prim . &implementation-restriction-rcd) (G4a50 core-prim . &implementation-restriction-rtd) (G4a3d core-prim . &non-continuable-rcd) (G4a3b core-prim . &non-continuable-rtd) (G4a28 core-prim . &who-rcd) (G4a26 core-prim . &who-rtd) (G4a0e core-prim . &irritants-rcd) (G4a0c core-prim . &irritants-rtd) (G49f4 core-prim . &assertion-rcd) (G49f2 core-prim . &assertion-rtd) (G49df core-prim . &violation-rcd) (G49dd core-prim . &violation-rtd) (G49ca core-prim . &error-rcd) (G49c8 core-prim . &error-rtd) (G49b5 core-prim . &serious-rcd) (G49b3 core-prim . &serious-rtd) (G49a0 core-prim . &warning-rcd) (G499e core-prim . &warning-rtd) (G498b core-prim . &message-rcd) (G4989 core-prim . &message-rtd) (G492e core-prim . &condition-rcd) (G492c core-prim . &condition-rtd) (G3023 core-prim . syntax-error) (G2f3c core-prim . syntax-dispatch) (G5082 core-prim . pretty-print) (G5081 core-prim . eval-core) (G5080 core-prim . set-symbol-value!) (G507f core-prim . symbol-value) (G507e core-prim . gensym) (G507d core-prim . void) (G4cdc core-prim . load) (G3033 core-prim . interaction-environment) (G507c core-prim . char-ready?) (G507b core-prim . regexp?) (G507a core-prim . read-line) (G5079 core-prim . dotted-list?) (G5078 core-prim . circular-list?) (G5077 core-prim . proper-list?) (G5076 core-prim . circular-list) (G5075 core-prim . last) (G5074 core-prim . last-pair) (G5073 core-prim . not-pair?) (G5072 core-prim . split-at!) (G5071 core-prim . split-at) (G5070 core-prim . list=) (G506f core-prim . list-copy) (G506e core-prim . list-tabulate) (G506d core-prim . make-list) (G506c core-prim . xcons) (G506b core-prim . tenth) (G506a core-prim . ninth) (G5069 core-prim . eighth) (G5068 core-prim . seventh) (G5067 core-prim . sixth) (G5066 core-prim . fifth) (G5065 core-prim . drop-right!) (G5064 core-prim . drop-right) (G5063 core-prim . take-right) (G5062 core-prim . take!) (G5061 core-prim . drop) (G5060 core-prim . take) (G505f core-prim . car+cdr) (G505e core-prim . fourth) (G505d core-prim . third) (G505c core-prim . second) (G505b core-prim . first) (G505a core-prim . iota) (G5059 core-prim . every) (G5058 core-prim . ungensym) (G5057 core-prim . alist->eq-hash-table) (G5056 core-prim . assoc-ref) (G5055 core-prim . alist-cons) (G5054 core-prim . append-map) (G5053 core-prim . print) (G5052 core-prim . format) (G5051 core-prim . standard-library-path) (G5050 core-prim . file-newer?) (G504f core-prim . stat-mtime) (G504e core-prim . write-to-file) (G504d core-prim . file->list) (G504c core-prim . file->string) (G504b core-prim . digit->integer) (G504a core-prim . call-with-string-input-port) (G5049 core-prim . call-with-string-io) (G5048 core-prim . string-split) (G5047 core-prim . bytevector-for-each) (G5046 core-prim . string->regexp) (G5045 core-prim . rxmatch) (G5044 core-prim . regexp-replace-all) (G5043 core-prim . hashtable-for-each) (G5042 core-prim . call-process) (G5041 core-prim . local-tz-offset) (G5040 core-prim . microseconds) (G503f core-prim . readdir) (G503e core-prim . set-current-directory!) (G503d core-prim . expand-path) (G503c core-prim . current-directory) (G503b core-prim . %spawn) (G503a core-prim . %waitpid) (G5039 core-prim . %ffi-supported?) (G5038 core-prim . %ffi-pointer-ref) (G5037 core-prim . %ffi-pointer->string) (G5036 core-prim . %ffi-call->string-or-zero) (G5035 core-prim . %ffi-call->double) (G5034 core-prim . %ffi-call->void*) (G5033 core-prim . %ffi-call->void) (G5032 core-prim . %ffi-call->int) (G5031 core-prim . %ffi-lookup) (G5030 core-prim . %ffi-open) (G502f core-prim . %fork) (G502e core-prim . %pipe) (G502d core-prim . p) (G502c core-prim . get-environment-variables) (G502b core-prim . get-environment-variable) (G502a core-prim . get-timeofday) (G5029 core-prim . get-command-line) (G5028 core-prim . sys-display) (G5027 core-prim . source-info) (G5026 core-prim . make-compiler-instruction) (G5025 core-prim . make-instruction) (G5024 core-prim . set-source-info!) (G5023 core-prim . bignum?) (G5022 core-prim . fast-equal?) (G5021 core-prim . fasl-read) (G5020 core-prim . fasl-write) (G2813 core-prim . make-parameter) (G501f core-prim . string-upcase) (G501e core-prim . string-titlecase) (G501d core-prim . string-normalize-nfkd) (G501c core-prim . string-normalize-nfkc) (G501b core-prim . string-normalize-nfd) (G501a core-prim . string-normalize-nfc) (G5019 core-prim . string-foldcase) (G5018 core-prim . string-downcase) (G5017 core-prim . string-ci>?) (G5016 core-prim . string-ci>=?) (G5015 core-prim . string-ci=?) (G5014 core-prim . string-ci<?) (G5013 core-prim . string-ci<=?) (G5012 core-prim . char-whitespace?) (G5011 core-prim . char-upper-case?) (G5010 core-prim . char-title-case?) (G500f core-prim . char-numeric?) (G500e core-prim . char-lower-case?) (G500d core-prim . char-general-category) (G500c core-prim . char-upcase) (G500b core-prim . char-titlecase) (G500a core-prim . char-foldcase) (G5009 core-prim . char-downcase) (G5008 core-prim . char-ci>?) (G5007 core-prim . char-ci>=?) (G5006 core-prim . char-ci=?) (G5005 core-prim . char-ci<?) (G5004 core-prim . char-ci<=?) (G5003 core-prim . char-alphabetic?) (G2d77 core-prim . make-variable-transformer) (G3029 core-prim . identifier?) (G3015 core-prim . generate-temporaries) (G3017 core-prim . free-identifier=?) (G302d core-prim . syntax->datum) (G302b core-prim . datum->syntax) (G3019 core-prim . bound-identifier=?) (G5002 core-prim . record-type-descriptor?) (G5001 core-prim . record-predicate) (G5000 core-prim . record-mutator) (G4fff core-prim . record-constructor) (G4ffe core-prim . record-accessor) (G4ffd core-prim . make-record-type-descriptor) (G4ffc core-prim . make-record-constructor-descriptor) (G4ffb core-prim . record?) (G4ffa core-prim . record-type-uid) (G4ff9 core-prim . record-type-sealed?) (G4ff8 core-prim . record-type-parent) (G4ff7 core-prim . record-type-opaque?) (G4ff6 core-prim . record-type-name) (G4ff5 core-prim . record-type-generative?) (G4ff4 core-prim . record-type-field-names) (G4ff3 core-prim . record-rtd) (G4ff2 core-prim . record-field-mutable?) (G4ff1 core-prim . delete-file) (G4ff0 core-prim . file-exists?) (G4fef core-prim . vector-sort!) (G4fee core-prim . vector-sort) (G4fed core-prim . list-sort) (G4fec core-prim . symbol-hash) (G4feb core-prim . string-ci-hash) (G4fea core-prim . string-hash) (G4fe9 core-prim . equal-hash) (G4fe8 core-prim . hashtable-equivalence-function) (G4fe7 core-prim . make-hashtable) (G4fe6 core-prim . hashtable-hash-function) (G4fe5 core-prim . make-eqv-hashtable) (G4fe4 core-prim . make-eq-hashtable) (G4fe3 core-prim . hashtable?) (G4fe2 core-prim . hashtable-update!) (G4fe1 core-prim . hashtable-size) (G4fe0 core-prim . hashtable-set!) (G4fdf core-prim . hashtable-ref) (G4fde core-prim . hashtable-mutable?) (G4fdd core-prim . hashtable-keys) (G4fdc core-prim . hashtable-entries) (G4fdb core-prim . hashtable-delete!) (G4fda core-prim . hashtable-copy) (G4fd9 core-prim . hashtable-contains?) (G4fd8 core-prim . hashtable-clear!) (G4fd7 core-prim . call-with-output-file) (G4fd6 core-prim . call-with-input-file) (G4fd5 core-prim . write-char) (G4fd4 core-prim . write) (G4fd3 core-prim . with-output-to-file) (G4fd2 core-prim . with-input-from-file) (G4fd1 core-prim . read-char) (G4fd0 core-prim . read) (G4fcf core-prim . peek-char) (G4fce core-prim . open-output-file) (G4fcd core-prim . open-input-file) (G4fcc core-prim . newline) (G4fcb core-prim . display) (G4fca core-prim . close-output-port) (G4fc9 core-prim . close-input-port) (G4fc8 core-prim . eof-object?) (G4fc7 core-prim . eof-object) (G4fc6 core-prim . current-error-port) (G4fc5 core-prim . current-output-port) (G4fc4 core-prim . current-input-port) (G4fc3 core-prim . output-port?) (G4fc2 core-prim . input-port?) (G4fc1 core-prim . utf-8-codec) (G4fc0 core-prim . utf-16-codec) (G4fbf core-prim . transcoder-error-handling-mode) (G4fbe core-prim . transcoder-eol-style) (G4fbd core-prim . transcoder-codec) (G4fbc core-prim . transcoded-port) (G4fbb core-prim . textual-port?) (G4fba core-prim . string->bytevector) (G4fb9 core-prim . standard-output-port) (G4fb8 core-prim . standard-input-port) (G4fb7 core-prim . standard-error-port) (G4fb6 core-prim . set-port-position!) (G4fb5 core-prim . put-u8) (G4fb4 core-prim . put-string) (G4fb3 core-prim . put-datum) (G4fb2 core-prim . put-char) (G4fb1 core-prim . put-bytevector) (G4fb0 core-prim . port?) (G4faf core-prim . port-transcoder) (G4fae core-prim . port-position) (G4fad core-prim . port-has-set-port-position!?) (G4fac core-prim . port-has-port-position?) (G4fab core-prim . port-eof?) (G4faa core-prim . output-port-buffer-mode) (G4fa9 core-prim . open-string-output-port) (G4fa8 core-prim . open-string-input-port) (G4fa7 core-prim . open-file-output-port) (G4fa6 core-prim . open-file-input/output-port) (G4fa5 core-prim . open-file-input-port) (G4fa4 core-prim . open-bytevector-output-port) (G4fa3 core-prim . open-bytevector-input-port) (G4fa2 core-prim . native-transcoder) (G4fa1 core-prim . native-eol-style) (G4fa0 core-prim . make-transcoder) (G4f9f core-prim . latin-1-codec) (G4ad4 core-prim . make-i/o-write-error) (G4abf core-prim . make-i/o-read-error) (G4b72 core-prim . make-i/o-port-error) (G4aea core-prim . make-i/o-invalid-position-error) (G4b04 core-prim . make-i/o-filename-error) (G4b1d core-prim . make-i/o-file-protection-error) (G4b32 core-prim . make-i/o-file-is-read-only-error) (G4b5c core-prim . make-i/o-file-does-not-exist-error) (G4b47 core-prim . make-i/o-file-already-exists-error) (G4aaa core-prim . make-i/o-error) (G4ba1 core-prim . make-i/o-encoding-error) (G4b8b core-prim . make-i/o-decoding-error) (G4f9e core-prim . make-custom-textual-output-port) (G4f9d core-prim . make-custom-textual-input/output-port) (G4f9c core-prim . make-custom-textual-input-port) (G4f9b core-prim . make-custom-binary-output-port) (G4f9a core-prim . make-custom-binary-input/output-port) (G4f99 core-prim . make-custom-binary-input-port) (G4f98 core-prim . make-bytevector) (G4f97 core-prim . lookahead-u8) (G4f96 core-prim . lookahead-char) (G4ad6 core-prim . i/o-write-error?) (G4ac1 core-prim . i/o-read-error?) (G4b76 core-prim . i/o-port-error?) (G4aee core-prim . i/o-invalid-position-error?) (G4b08 core-prim . i/o-filename-error?) (G4b1f core-prim . i/o-file-protection-error?) (G4b34 core-prim . i/o-file-is-read-only-error?) (G4b5e core-prim . i/o-file-does-not-exist-error?) (G4b49 core-prim . i/o-file-already-exists-error?) (G4aac core-prim . i/o-error?) (G4af0 core-prim . i/o-error-position) (G4b78 core-prim . i/o-error-port) (G4b0a core-prim . i/o-error-filename) (G4ba5 core-prim . i/o-encoding-error?) (G4ba7 core-prim . i/o-encoding-error-char) (G4b8d core-prim . i/o-decoding-error?) (G4f95 core-prim . get-u8) (G4f94 core-prim . get-string-n!) (G4f93 core-prim . get-string-n) (G4f92 core-prim . get-string-all) (G4f91 core-prim . get-line) (G4f90 core-prim . get-datum) (G4f8f core-prim . get-char) (G4f8e core-prim . get-bytevector-some) (G4f8d core-prim . get-bytevector-n!) (G4f8c core-prim . get-bytevector-n) (G4f8b core-prim . get-bytevector-all) (G4f8a core-prim . flush-output-port) (G4f89 core-prim . close-port) (G3003 core-prim . scheme-report-environment) (G4f88 core-prim . quotient) (G3001 core-prim . null-environment) (G4f87 core-prim . remainder) (G4f86 core-prim . modulo) (G4f85 core-prim . inexact->exact) (G4f84 core-prim . force) (G4f83 core-prim . exact->inexact) (G4f82 core-prim . make-promise) (G4f81 core-prim . exit) (G4cd6 core-prim . command-line) (G4f80 core-prim . string-fill!) (G4f7f core-prim . string-set!) (G4f7e core-prim . set-cdr!) (G4f7d core-prim . set-car!) (G4f7c core-prim . remove) (G4f7b core-prim . remv) (G4f7a core-prim . remp) (G4f79 core-prim . remq) (G4f78 core-prim . partition) (G4f77 core-prim . memv) (G4f76 core-prim . memq) (G4f75 core-prim . memp) (G4f74 core-prim . member) (G4f73 core-prim . exists) (G4f72 core-prim . for-all) (G4f71 core-prim . fold-right) (G4f70 core-prim . fold-left) (G4f6f core-prim . find) (G4f6e core-prim . filter) (G4f6d core-prim . cons*) (G4f6c core-prim . assv) (G4f6b core-prim . assq) (G4f6a core-prim . assp) (G4f69 core-prim . assoc) (G4f68 core-prim . call-with-string-output-port) (G4f67 core-prim . call-with-port) (G4f66 core-prim . call-with-bytevector-output-port) (G4f65 core-prim . bytevector->string) (G4f64 core-prim . buffer-mode?) (G4f63 core-prim . binary-port?) (G4f62 core-prim . with-exception-handler) (G4f61 core-prim . raise-continuable) (G4f60 core-prim . raise) (G3007 core-prim . eval) (G2fff core-prim . environment) (G4f5f core-prim . make-enumeration) (G4f5e core-prim . enum-set=?) (G4f5d core-prim . enum-set-universe) (G4f5c core-prim . enum-set-union) (G4f5b core-prim . enum-set-subset?) (G4f5a core-prim . enum-set-projection) (G4f59 core-prim . enum-set-member?) (G4f58 core-prim . enum-set-intersection) (G4f57 core-prim . enum-set-indexer) (G4f56 core-prim . enum-set-difference) (G4f55 core-prim . enum-set-constructor) (G4f54 core-prim . enum-set-complement) (G4f53 core-prim . enum-set->list) (G4a22 core-prim . who-condition?) (G499c core-prim . warning?) (G49db core-prim . violation?) (G4a97 core-prim . undefined-violation?) (G4a7e core-prim . syntax-violation?) (G4a82 core-prim . syntax-violation-subform) (G4a80 core-prim . syntax-violation-form) (G3027 core-prim . syntax-violation) (G4f52 core-prim . simple-conditions) (G49b1 core-prim . serious-condition?) (G4a39 core-prim . non-continuable-violation?) (G4985 core-prim . message-condition?) (G4a1e core-prim . make-who-condition) (G499a core-prim . make-warning) (G49d9 core-prim . make-violation) (G4a95 core-prim . make-undefined-violation) (G4a78 core-prim . make-syntax-violation) (G49af core-prim . make-serious-condition) (G4a37 core-prim . make-non-continuable-violation) (G4981 core-prim . make-message-condition) (G4a61 core-prim . make-lexical-violation) (G4a04 core-prim . make-irritants-condition) (G4a4c core-prim . make-implementation-restriction-violation) (G49c4 core-prim . make-error) (G49ee core-prim . make-assertion-violation) (G4a63 core-prim . lexical-violation?) (G4a08 core-prim . irritants-condition?) (G4a4e core-prim . implementation-restriction-violation?) (G49c6 core-prim . error?) (G4a24 core-prim . condition-who) (G4f51 core-prim . condition-predicate) (G4987 core-prim . condition-message) (G4a0a core-prim . condition-irritants) (G4f50 core-prim . condition-accessor) (G4f4f core-prim . condition) (G49f0 core-prim . assertion-violation?) (G4f4e core-prim . condition?) (G4f4d core-prim . utf32->string) (G4f4c core-prim . utf16->string) (G4f4b core-prim . utf8->string) (G4f4a core-prim . uint-list->bytevector) (G4f49 core-prim . u8-list->bytevector) (G4f48 core-prim . string->utf8) (G4f47 core-prim . string->utf32) (G4f46 core-prim . string->utf16) (G4f45 core-prim . sint-list->bytevector) (G4f44 core-prim . native-endianness) (G4f43 core-prim . bytevector?) (G4f42 core-prim . bytevector=?) (G4f41 core-prim . bytevector-uint-set!) (G4f40 core-prim . bytevector-uint-ref) (G4f3f core-prim . bytevector-u8-set!) (G4f3e core-prim . bytevector-u8-ref) (G4f3d core-prim . bytevector-u64-set!) (G4f3c core-prim . bytevector-u64-ref) (G4f3b core-prim . bytevector-u64-native-set!) (G4f3a core-prim . bytevector-u64-native-ref) (G4f39 core-prim . bytevector-u32-set!) (G4f38 core-prim . bytevector-u32-ref) (G4f37 core-prim . bytevector-u32-native-set!) (G4f36 core-prim . bytevector-u32-native-ref) (G4f35 core-prim . bytevector-u16-set!) (G4f34 core-prim . bytevector-u16-ref) (G4f33 core-prim . bytevector-u16-native-set!) (G4f32 core-prim . bytevector-u16-native-ref) (G4f31 core-prim . bytevector-sint-set!) (G4f30 core-prim . bytevector-sint-ref) (G4f2f core-prim . bytevector-s8-set!) (G4f2e core-prim . bytevector-s8-ref) (G4f2d core-prim . bytevector-s64-set!) (G4f2c core-prim . bytevector-s64-ref) (G4f2b core-prim . bytevector-s64-native-set!) (G4f2a core-prim . bytevector-s64-native-ref) (G4f29 core-prim . bytevector-s32-set!) (G4f28 core-prim . bytevector-s32-ref) (G4f27 core-prim . bytevector-s32-native-set!) (G4f26 core-prim . bytevector-s32-native-ref) (G4f25 core-prim . bytevector-s16-set!) (G4f24 core-prim . bytevector-s16-ref) (G4f23 core-prim . bytevector-s16-native-set!) (G4f22 core-prim . bytevector-s16-native-ref) (G4f21 core-prim . bytevector-length) (G4f20 core-prim . bytevector-ieee-single-ref) (G4f1f core-prim . bytevector-ieee-single-set!) (G4f1e core-prim . bytevector-ieee-single-native-set!) (G4f1d core-prim . bytevector-ieee-single-native-ref) (G4f1c core-prim . bytevector-ieee-double-set!) (G4f1b core-prim . bytevector-ieee-double-ref) (G4f1a core-prim . bytevector-ieee-double-native-set!) (G4f19 core-prim . bytevector-ieee-double-native-ref) (G4f18 core-prim . bytevector-fill!) (G4f17 core-prim . bytevector-copy!) (G4f16 core-prim . bytevector-copy) (G4f15 core-prim . bytevector->uint-list) (G4f14 core-prim . bytevector->u8-list) (G4f13 core-prim . bytevector->sint-list) (G4bd1 core-prim . no-nans-violation?) (G4bbc core-prim . no-infinities-violation?) (G4bcf core-prim . make-no-nans-violation) (G4bba core-prim . make-no-infinities-violation) (G4f12 core-prim . real->flonum) (G4f11 core-prim . flzero?) (G4f10 core-prim . fltruncate) (G4f0f core-prim . fltan) (G4f0e core-prim . flsqrt) (G4f0d core-prim . flsin) (G4f0c core-prim . flround) (G4f0b core-prim . flpositive?) (G4f0a core-prim . flonum?) (G4f09 core-prim . flodd?) (G4f08 core-prim . flnumerator) (G4f07 core-prim . flnegative?) (G4f06 core-prim . flnan?) (G4f05 core-prim . flmod0) (G4f04 core-prim . flmod) (G4f03 core-prim . flmin) (G4f02 core-prim . flmax) (G4f01 core-prim . fllog) (G4f00 core-prim . flinteger?) (G4eff core-prim . flinfinite?) (G4efe core-prim . flfloor) (G4efd core-prim . flfinite?) (G4efc core-prim . flexpt) (G4efb core-prim . flexp) (G4efa core-prim . fleven?) (G4ef9 core-prim . fldiv0-and-mod0) (G4ef8 core-prim . fldiv0) (G4ef7 core-prim . fldiv-and-mod) (G4ef6 core-prim . fldiv) (G4ef5 core-prim . fldenominator) (G4ef4 core-prim . flcos) (G4ef3 core-prim . flceiling) (G4ef2 core-prim . flatan) (G4ef1 core-prim . flasin) (G4ef0 core-prim . flacos) (G4eef core-prim . flabs) (G4eee core-prim . fl>?) (G4eed core-prim . fl>=?) (G4eec core-prim . fl=?) (G4eeb core-prim . fl<?) (G4eea core-prim . fl<=?) (G4ee9 core-prim . fl/) (G4ee8 core-prim . fl-) (G4ee7 core-prim . fl+) (G4ee6 core-prim . fl*) (G4ee5 core-prim . fixnum->flonum) (G4ee4 core-prim . fxzero?) (G4ee3 core-prim . fxxor) (G4ee2 core-prim . fxrotate-bit-field) (G4ee1 core-prim . fxreverse-bit-field) (G4ee0 core-prim . fxpositive?) (G4edf core-prim . fxodd?) (G4ede core-prim . fxnot) (G4edd core-prim . fxnegative?) (G4edc core-prim . fxmod0) (G4edb core-prim . fxmod) (G4eda core-prim . fxmin) (G4ed9 core-prim . fxmax) (G4ed8 core-prim . fxlength) (G4ed7 core-prim . fxior) (G4ed6 core-prim . fxif) (G4ed5 core-prim . fxfirst-bit-set) (G4ed4 core-prim . fxeven?) (G4ed3 core-prim . fxdiv0-and-mod0) (G4ed2 core-prim . fxdiv0) (G4ed1 core-prim . fxdiv-and-mod) (G4ed0 core-prim . fxdiv) (G4ecf core-prim . fxcopy-bit-field) (G4ece core-prim . fxcopy-bit) (G4ecd core-prim . fxbit-set?) (G4ecc core-prim . fxbit-field) (G4ecb core-prim . fxbit-count) (G4eca core-prim . fxarithmetic-shift-right) (G4ec9 core-prim . fxarithmetic-shift-left) (G4ec8 core-prim . fxarithmetic-shift) (G4ec7 core-prim . fxand) (G4ec6 core-prim . fx>?) (G4ec5 core-prim . fx>=?) (G4ec4 core-prim . fx=?) (G4ec3 core-prim . fx<?) (G4ec2 core-prim . fx<=?) (G4ec1 core-prim . fx-/carry) (G4ec0 core-prim . fx-) (G4ebf core-prim . fx+/carry) (G4ebe core-prim . fx+) (G4ebd core-prim . fx*/carry) (G4ebc core-prim . fx*) (G4ebb core-prim . greatest-fixnum) (G4eba core-prim . least-fixnum) (G4eb9 core-prim . fixnum-width) (G4eb8 core-prim . fixnum?) (G4eb7 core-prim . bitwise-rotate-bit-field) (G4eb6 core-prim . bitwise-reverse-bit-field) (G4eb5 core-prim . bitwise-length) (G4eb4 core-prim . bitwise-if) (G4eb3 core-prim . bitwise-first-bit-set) (G4eb2 core-prim . bitwise-copy-bit-field) (G4eb1 core-prim . bitwise-copy-bit) (G4eb0 core-prim . bitwise-bit-set?) (G4eaf core-prim . bitwise-bit-field) (G4eae core-prim . bitwise-bit-count) (G4ead core-prim . bitwise-xor) (G4eac core-prim . bitwise-ior) (G4eab core-prim . bitwise-and) (G4eaa core-prim . bitwise-not) (G4ea9 core-prim . bitwise-arithmetic-shift-right) (G4ea8 core-prim . bitwise-arithmetic-shift-left) (G4ea7 core-prim . bitwise-arithmetic-shift) (G4ea6 core-prim . zero?) (G4ea5 core-prim . vector?) (G4ea4 core-prim . vector-set!) (G4ea3 core-prim . vector-ref) (G4ea2 core-prim . vector-map) (G4ea1 core-prim . vector-length) (G4ea0 core-prim . vector-for-each) (G4e9f core-prim . vector-fill!) (G4e9e core-prim . vector->list) (G4e9d core-prim . vector) (G4e9c core-prim . values) (G4e9b core-prim . truncate) (G4e9a core-prim . tan) (G4e99 core-prim . symbol?) (G4e98 core-prim . symbol=?) (G4e97 core-prim . symbol->string) (G4e96 core-prim . substring) (G4e95 core-prim . string?) (G4e94 core-prim . string>?) (G4e93 core-prim . string>=?) (G4e92 core-prim . string=?) (G4e91 core-prim . string<?) (G4e90 core-prim . string<=?) (G4e8f core-prim . string-ref) (G4e8e core-prim . string-length) (G4e8d core-prim . string-for-each) (G4e8c core-prim . string-copy) (G4e8b core-prim . string-append) (G4e8a core-prim . string->symbol) (G4e89 core-prim . string->number) (G4e88 core-prim . string->list) (G4e87 core-prim . string) (G4e86 core-prim . sqrt) (G4e85 core-prim . sin) (G4e84 core-prim . round) (G4e83 core-prim . reverse) (G4e82 core-prim . real?) (G4e81 core-prim . real-valued?) (G4e80 core-prim . real-part) (G4e7f core-prim . rationalize) (G4e7e core-prim . rational?) (G4e7d core-prim . rational-valued?) (G4e7c core-prim . procedure?) (G4e7b core-prim . positive?) (G4e7a core-prim . pair?) (G4e79 core-prim . odd?) (G4e78 core-prim . numerator) (G4e77 core-prim . number?) (G4e76 core-prim . number->string) (G4e75 core-prim . null?) (G4e74 core-prim . not) (G4e73 core-prim . negative?) (G4e72 core-prim . nan?) (G4e71 core-prim . min) (G4e70 core-prim . max) (G4e6f core-prim . map) (G4e6e core-prim . make-vector) (G4e6d core-prim . make-string) (G4e6c core-prim . make-rectangular) (G4e6b core-prim . make-polar) (G4e6a core-prim . magnitude) (G4e69 core-prim . log) (G4e68 core-prim . list?) (G4e67 core-prim . list-tail) (G4e66 core-prim . list-ref) (G4e65 core-prim . list->vector) (G4e64 core-prim . list->string) (G4e63 core-prim . list) (G4e62 core-prim . length) (G4e61 core-prim . lcm) (G4e60 core-prim . integer?) (G4e5f core-prim . integer-valued?) (G4e5e core-prim . integer->char) (G4e5d core-prim . infinite?) (G4e5c core-prim . inexact?) (G4e5b core-prim . inexact) (G4e5a core-prim . imag-part) (G4e59 core-prim . gcd) (G4e58 core-prim . for-each) (G4e57 core-prim . floor) (G4e56 core-prim . finite?) (G4e55 core-prim . expt) (G4e54 core-prim . exp) (G4e53 core-prim . exact?) (G4e52 core-prim . exact-integer-sqrt) (G4e51 core-prim . exact) (G4e50 core-prim . even?) (G4e4f core-prim . error) (G4e4e core-prim . eqv?) (G4e4d core-prim . equal?) (G4e4c core-prim . eq?) (G4e4b core-prim . dynamic-wind) (G4e4a core-prim . div0-and-mod0) (G4e49 core-prim . mod0) (G4e48 core-prim . div0) (G4e47 core-prim . div-and-mod) (G4e46 core-prim . mod) (G4e45 core-prim . div) (G4e44 core-prim . denominator) (G4e43 core-prim . cos) (G4e42 core-prim . cons) (G4e41 core-prim . complex?) (G4e40 core-prim . char?) (G4e3f core-prim . char>?) (G4e3e core-prim . char>=?) (G4e3d core-prim . char=?) (G4e3c core-prim . char<?) (G4e3b core-prim . char<=?) (G4e3a core-prim . char->integer) (G4e39 core-prim . ceiling) (G4e38 core-prim . call-with-values) (G4e37 core-prim . call/cc) (G4e36 core-prim . call-with-current-continuation) (G4e35 core-prim . cddddr) (G4e34 core-prim . cdddar) (G4e33 core-prim . cddadr) (G4e32 core-prim . cddaar) (G4e31 core-prim . cdaddr) (G4e30 core-prim . cdadar) (G4e2f core-prim . cdaadr) (G4e2e core-prim . cdaaar) (G4e2d core-prim . cadddr) (G4e2c core-prim . caddar) (G4e2b core-prim . cadadr) (G4e2a core-prim . cadaar) (G4e29 core-prim . caaddr) (G4e28 core-prim . caadar) (G4e27 core-prim . caaadr) (G4e26 core-prim . caaaar) (G4e25 core-prim . cdddr) (G4e24 core-prim . cddar) (G4e23 core-prim . cdadr) (G4e22 core-prim . cdaar) (G4e21 core-prim . caddr) (G4e20 core-prim . cadar) (G4e1f core-prim . caadr) (G4e1e core-prim . caaar) (G4e1d core-prim . cddr) (G4e1c core-prim . cdar) (G4e1b core-prim . cadr) (G4e1a core-prim . caar) (G4e19 core-prim . cdr) (G4e18 core-prim . car) (G4e17 core-prim . boolean?) (G4e16 core-prim . boolean=?) (G4e15 core-prim . atan) (G4e14 core-prim . assertion-violation) (G4e13 core-prim . asin) (G4e12 core-prim . apply) (G4e11 core-prim . append) (G4e10 core-prim . angle) (G4e0f core-prim . acos) (G4e0e core-prim . abs) (G4e0d core-prim . /) (G4e0c core-prim . *) (G4e0b core-prim . -) (G4e0a core-prim . +) (G4e09 core-prim . >=) (G4e08 core-prim . >) (G4e07 core-prim . =) (G4e06 core-prim . <=) (G4e05 core-prim . <) (G4e04 core-prim . library) (G4e03 $core-rtd &no-nans-rtd &no-nans-rcd) (G4e02 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e01 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e00 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4dff $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4dfe $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4dfd $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4dfc $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4dfb $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4dfa $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4df9 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4df8 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4df7 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4df6 $core-rtd &i/o-rtd &i/o-rcd) (G4df5 $core-rtd &undefined-rtd &undefined-rcd) (G4df4 $core-rtd &syntax-rtd &syntax-rcd) (G4df3 $core-rtd &lexical-rtd &lexical-rcd) (G4df2 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4df1 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4df0 $core-rtd &who-rtd &who-rcd) (G4def $core-rtd &irritants-rtd &irritants-rcd) (G4dee $core-rtd &assertion-rtd &assertion-rcd) (G4ded $core-rtd &violation-rtd &violation-rcd) (G4dec $core-rtd &error-rtd &error-rcd) (G4deb $core-rtd &serious-rtd &serious-rcd) (G4dea $core-rtd &warning-rtd &warning-rcd) (G4de9 $core-rtd &message-rtd &message-rcd) (G4de8 $core-rtd &condition-rtd &condition-rcd) (G4de7 macro . define-condition-type) (G4de6 macro . define-enumeration) (G4de5 macro . define-record-type) (G4de4 macro . parent-rtd) (G4de3 macro . nongenerative) (G4de2 macro . opaque) (G4de1 macro . sealed) (G4de0 macro . protocol) (G4ddf macro . parent) (G4dde macro . immutable) (G4ddd macro . mutable) (G4ddc macro . fields) (G4ddb macro . error-handling-mode) (G4dda macro . file-options) (G4dd9 macro . buffer-mode) (G4dd8 macro . eol-style) (G4dd7 macro . guard) (G4dd6 macro . trace-define) (G4dd5 macro . trace-lambda) (G4dd4 macro . unsyntax-splicing) (G4dd3 macro . unsyntax) (G4dd2 macro . unquote-splicing) (G4dd1 macro . unquote) (G4dd0 macro . _) (G4dcf macro . else) (G4dce macro . =>) (G4dcd macro . ...) (G4dcc macro . assert) (G4dcb macro . endianness) (G4dca macro . delay) (G4dc9 macro . time) (G4dc8 macro . do) (G4dc7 macro . cond) (G4dc6 macro . let*) (G4dc5 macro . let) (G4dc4 macro . let*-values) (G4dc3 macro . let-values) (G4dc2 macro . identifier-syntax) (G4dc1 macro . with-syntax) (G4dc0 macro . quasisyntax) (G4dbf macro . quasiquote) (G4dbe macro . syntax-rules) (G4dbd macro . include) (G4dbc macro . define-struct) (G4dbb core-macro . record-constructor-descriptor) (G4dba core-macro . record-type-descriptor) (G4db9 macro . case) (G4db8 macro . parameterize) (G4db7 macro . unless) (G4db6 macro . when) (G4db5 core-macro . or) (G4db4 core-macro . and) (G4db3 core-macro . if) (G4db2 core-macro . letrec*) (G4db1 core-macro . letrec) (G4db0 core-macro . type-descriptor) (G4daf core-macro . case-lambda) (G4dae core-macro . lambda) (G4dad core-macro . syntax) (G4dac core-macro . syntax-case) (G4dab core-macro . quote) (G4daa core-macro . foreign-call) (G4da9 letrec-syntax) (G4da8 let-syntax) (G4da7 set!) (G4da6 import) (G4da5 begin) (G4da4 module) (G4da3 define-syntax) (G4da2 define)) values values '#f '#f '#f '#f) (G2b57@G29fc@install-library 'G50a3 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G5082) (eval-core . G5081) (set-symbol-value! . G5080) (symbol-value . G507f) (gensym . G507e) (void . G507d)) '() values values '#f '#f '#f '#f) (G2b57@G29fc@install-library 'G50a4 '(mosh) '() '() '() '() '((set-symbol-value! . G5080) (symbol-value . G507f) (read-line . G507a) (ungensym . G5058) (alist->eq-hash-table . G5057) (assoc-ref . G5056) (print . G5053) (format . G5052) (standard-library-path . G5051) (file-newer? . G5050) (stat-mtime . G504f) (write-to-file . G504e) (file->list . G504d) (file->string . G504c) (digit->integer . G504b) (call-with-string-input-port . G504a) (call-with-string-io . G5049) (string-split . G5048) (bytevector-for-each . G5047) (string->regexp . G5046) (rxmatch . G5045) (regexp-replace-all . G5044) (hashtable-for-each . G5043) (readdir . G503f) (set-current-directory! . G503e) (expand-path . G503d) (current-directory . G503c) (p . G502d) (get-timeofday . G502a) (get-command-line . G5029) (sys-display . G5028) (source-info . G5027) (make-compiler-instruction . G5026) (make-instruction . G5025) (set-source-info! . G5024) (bignum? . G5023) (fast-equal? . G5022) (fasl-read . G5021) (fasl-write . G5020) (include . G4dbd)) '() values values '#f '#f '#f '#f) (G2b57@G29fc@install-library 'G50a5 '(system) '() '() '() '() '((call-process . G5042) (local-tz-offset . G5041) (microseconds . G5040) (expand-path . G503d) (%spawn . G503b) (%waitpid . G503a) (%ffi-supported? . G5039) (%ffi-pointer-ref . G5038) (%ffi-pointer->string . G5037) (%ffi-call->string-or-zero . G5036) (%ffi-call->double . G5035) (%ffi-call->void* . G5034) (%ffi-call->void . G5033) (%ffi-call->int . G5032) (%ffi-lookup . G5031) (%ffi-open . G5030) (%fork . G502f) (%pipe . G502e) (get-environment-variables . G502c) (get-environment-variable . G502b) (make-parameter . G2813) (parameterize . G4db8)) '() values values '#f '#f '#f '#f) (G2b57@G29fc@install-library 'G50a6 '(srfi :1) '() '() '() '() '((dotted-list? . G5079) (circular-list? . G5078) (proper-list? . G5077) (circular-list . G5076) (last . G5075) (last-pair . G5074) (not-pair? . G5073) (split-at! . G5072) (split-at . G5071) (list= . G5070) (list-copy . G506f) (list-tabulate . G506e) (make-list . G506d) (xcons . G506c) (tenth . G506b) (ninth . G506a) (eighth . G5069) (seventh . G5068) (sixth . G5067) (fifth . G5066) (drop-right! . G5065) (drop-right . G5064) (take-right . G5063) (take! . G5062) (drop . G5061) (take . G5060) (car+cdr . G505f) (fourth . G505e) (third . G505d) (second . G505c) (first . G505b) (iota . G505a) (every . G5059) (alist-cons . G5055) (append-map . G5054)) '() values values '#f '#f '#f '#f))
((lambda (G4ccb@add-library-path! G4ccd@parse-and-add-library-path G4ccf@for-each-with-index G4cd1@conditioon-printer G4cd3@repl G4cd5@trace-printer G4cd7@command-line G4cd9@local-library-path G4cdb@load/args G4cdd@load G4cdf@ironscheme-build G4ce1@eval-top-level G4ce3@compile-system-libraries G4ce5@compile G4ce7@compile->closure G4ce9@pre-compile-r6rs-file G4ceb@load-r6rs-top-level) (begin (set! G4ccb@add-library-path! (lambda (G4d06@path) (G2b47@G29dc@library-path (append (G2b47@G29dc@library-path) (list G4d06@path))))) (set! G4ccd@parse-and-add-library-path (lambda (G4d08@paths G4d09@message) ((lambda (G4d0c@t) (if G4d0c@t ((lambda (G4d0e@paths) (for-each (lambda (G4d10@path) (if (file-exists? G4d10@path) (G4ccb@add-library-path! (expand-path G4d10@path)) (format (current-error-port) G4d09@message G4d10@path))) (reverse (string-split G4d0e@paths '#\:)))) G4d0c@t) (void))) G4d08@paths))) (set! G4ccf@for-each-with-index (lambda (G4d12@proc G4d13@lst) (letrec ((G4d16@loop (lambda (G4d18@i G4d19@lst) (if (null? G4d19@lst) (if '#f '#f (void)) (begin (G4d12@proc G4d18@i (car G4d19@lst)) (G4d16@loop (+ G4d18@i '1) (cdr G4d19@lst))))))) (G4d16@loop '1 G4d13@lst)))) (set! G4cd1@conditioon-printer (lambda (G4d1c@e G4d1d@port) ((lambda (G4d21@ref) (begin (set! G4d21@ref (lambda (G4d30@rtd G4d31@i G4d32@x) ((lambda (G4d36@val) (if (symbol? G4d36@val) (ungensym G4d36@val) G4d36@val)) ((record-accessor G4d30@rtd G4d31@i) G4d32@x)))) (begin (display '" Condition components:\n" G4d1d@port) (G4ccf@for-each-with-index (lambda (G4d22@i G4d23@x) ((lambda (G4d26@rtd) (begin (format G4d1d@port '"   ~d. ~a" G4d22@i (record-type-name G4d26@rtd)) ((lambda (G4d28@v) ((lambda (G4d2a@t) (if (memv G4d2a@t '(0)) (newline G4d1d@port) (if (memv G4d2a@t '(1)) (begin (display '": " G4d1d@port) (write (G4d21@ref G4d26@rtd '0 G4d23@x) G4d1d@port) (newline G4d1d@port)) (begin (display '":\n" G4d1d@port) ((letrec ((G4d2c@f (lambda (G4d2e@i) (if (not (= G4d2e@i (vector-length G4d28@v))) (begin (display '"       " G4d1d@port) (display (vector-ref G4d28@v G4d2e@i) G4d1d@port) (display '": " G4d1d@port) (write (G4d21@ref G4d26@rtd G4d2e@i G4d23@x) G4d1d@port) (newline G4d1d@port) (G4d2c@f (+ G4d2e@i '1))) (void))))) G4d2c@f) '0))))) (vector-length G4d28@v))) (record-type-field-names G4d26@rtd)))) (record-rtd G4d23@x))) (simple-conditions G4d1c@e))))) '#f))) (set! G4cd3@repl (lambda G4d38@x ((lambda (G4d3b@rec) (begin (set! G4d3b@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d3e@G4d3c) (lambda () (with-exception-handler (lambda (G4d40@e) ((call/cc (lambda (G4d42@G4d3d) (G4d3e@G4d3c (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? G4d40@e) (G4cd1@conditioon-printer G4d40@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" G4d40@e))) (G4d42@G4d3d (lambda () (raise-continuable G4d40@e)))))))))) (lambda () ((letrec ((G4d44@loop (lambda (G4d46@line G4d47@accum) ((lambda (G4d4b@parentheses-ok? G4d4d@eval-string-print) (begin (set! G4d4b@parentheses-ok? (lambda (G4d52@text) ((letrec ((G4d54@loop (lambda (G4d56@chars G4d57@p0 G4d58@p1) (if (null? G4d56@chars) (= '0 G4d57@p0 G4d58@p1) ((lambda (G4d5c@t) (if (memv G4d5c@t '(#\()) (G4d54@loop (cdr G4d56@chars) (+ G4d57@p0 '1) G4d58@p1) (if (memv G4d5c@t '(#\))) (G4d54@loop (cdr G4d56@chars) (- G4d57@p0 '1) G4d58@p1) (if (memv G4d5c@t '(#\[)) (G4d54@loop (cdr G4d56@chars) G4d57@p0 (+ G4d58@p1 '1)) (if (memv G4d5c@t '(#\])) (G4d54@loop (cdr G4d56@chars) G4d57@p0 (- G4d58@p1 '1)) (G4d54@loop (cdr G4d56@chars) G4d57@p0 G4d58@p1)))))) (car G4d56@chars)))))) G4d54@loop) (string->list G4d52@text) '0 '0))) (set! G4d4d@eval-string-print (lambda (G4d50@text) (if (not (or (string=? '"\n" G4d50@text) (= '0 (string-length G4d50@text)))) (write (G4ce1@eval-top-level (call-with-port (open-string-input-port G4d50@text) read))) (void)))) (if (eof-object? G4d46@line) (begin (G4d4d@eval-string-print G4d47@accum) (exit)) ((lambda (G4d4e@current) (if (G4d4b@parentheses-ok? G4d4e@current) (G4d4d@eval-string-print G4d4e@current) (G4d44@loop (get-line (current-input-port)) G4d4e@current))) (string-append G4d47@accum G4d46@line))))) '#f '#f)))) G4d44@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d3b@rec)))) (G4d3b@rec))) '#f))) (set! G4cd5@trace-printer (G28de@G2814@make-parameter write)) (set! G4cd7@command-line (G28de@G2814@make-parameter (get-command-line))) (set! G4cd9@local-library-path (lambda (G4d5e@filename) (cons (expand-path '".") (G2b47@G29dc@library-path)))) (set! G4cdb@load/args (lambda (G4d60@filename . G4d62@args) (begin (apply G4ceb@load-r6rs-top-level G4d60@filename 'load G4d62@args) (void)))) (set! G4cdd@load (lambda (G4d64@filename) (begin (apply G4ceb@load-r6rs-top-level G4d64@filename 'load (G4cd7@command-line)) (void)))) (set! G4cdf@ironscheme-build (lambda () (G4cdd@load '"ironscheme-buildscript.ss"))) (set! G4ce1@eval-top-level (lambda (G4d66@x) (G4901@G3008@eval G4d66@x (G4917@G3034@interaction-environment)))) (set! G4ce3@compile-system-libraries (lambda () (G4ce1@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4ce5@compile (lambda (G4d68@filename) (G4ceb@load-r6rs-top-level G4d68@filename 'compile))) (set! G4ce7@compile->closure (lambda (G4d6a@filename) (G4ceb@load-r6rs-top-level G4d6a@filename 'closure))) (set! G4ce9@pre-compile-r6rs-file (lambda (G4d6c@filename) (G4ceb@load-r6rs-top-level G4d6c@filename 'compile))) (set! G4ceb@load-r6rs-top-level (lambda (G4d6e@filename G4d6f@how . G4d72@args) ((lambda (G4d76@G4d74 G4d77@G4d75) ((lambda (G4d7a@swap) (dynamic-wind G4d7a@swap (lambda () ((lambda (G4d7c@x*) ((lambda (G4d7e@t) (if (memv G4d7e@t '(closure)) (G4916@G3032@pre-compile-r6rs-top-level G4d7c@x*) (if (memv G4d7e@t '(load)) ((lambda (G4d82@G4d80 G4d83@G4d81) ((lambda (G4d86@swap) (dynamic-wind G4d86@swap (lambda () ((G4915@G3030@compile-r6rs-top-level G4d7c@x*))) G4d86@swap)) (lambda () ((lambda (G4d88@t) (begin (G4d82@G4d80 G4d83@G4d81) (set! G4d83@G4d81 G4d88@t))) (G4d82@G4d80))))) G4cd7@command-line (cons G4d6e@filename (car G4d72@args))) (if (memv G4d7e@t '(compile)) (begin (G4915@G3030@compile-r6rs-top-level G4d7c@x*) (G2b4b@G29e4@serialize-all G28d9@G280a@serialize-library G2933@G28ec@compile-core-expr)) (if '#f '#f (void)))))) G4d6f@how)) (with-input-from-file G4d6e@filename (lambda () ((letrec ((G4d8a@f (lambda () ((lambda (G4d8c@x) (if (eof-object? G4d8c@x) '() (cons G4d8c@x (G4d8a@f)))) (G28d1@G27fa@read-annotated))))) G4d8a@f)))))) G4d7a@swap)) (lambda () ((lambda (G4d8e@t) (begin (G4d76@G4d74 G4d77@G4d75) (set! G4d77@G4d75 G4d8e@t))) (G4d76@G4d74))))) G2b47@G29dc@library-path (G4cd9@local-library-path G4d6e@filename)))) (begin (set! G4da0@G4ceb@load-r6rs-top-level G4ceb@load-r6rs-top-level) (set! G4d9f@G4ce9@pre-compile-r6rs-file G4ce9@pre-compile-r6rs-file) (set! G4d9e@G4ce7@compile->closure G4ce7@compile->closure) (set! G4d9d@G4ce5@compile G4ce5@compile) (set! G4d9c@G4ce3@compile-system-libraries G4ce3@compile-system-libraries) (set! G4d9b@G4ce1@eval-top-level G4ce1@eval-top-level) (set! G4d9a@G4cdf@ironscheme-build G4cdf@ironscheme-build) (set! G4d99@G4cdd@load G4cdd@load) (set! G4d98@G4cdb@load/args G4cdb@load/args) (set! G4d97@G4cd9@local-library-path G4cd9@local-library-path) (set! G4d96@G4cd7@command-line G4cd7@command-line) (set! G4d95@G4cd5@trace-printer G4cd5@trace-printer) (set! G4d94@G4cd3@repl G4cd3@repl) (set! G4d93@G4cd1@conditioon-printer G4cd1@conditioon-printer) (set! G4d92@G4ccf@for-each-with-index G4ccf@for-each-with-index) (set! G4d91@G4ccd@parse-and-add-library-path G4ccd@parse-and-add-library-path) (set! G4d90@G4ccb@add-library-path! G4ccb@add-library-path!) (G2b4c@G29e6@current-precompiled-library-loader G28da@G280c@load-serialized-library) (set-symbol-value! 'load G4cdd@load) (set-symbol-value! 'pre-compile-r6rs-file G4ce9@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4ce1@eval-top-level) (set-symbol-value! 'int-env-syms G48f8@G2ff6@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2932@G28ea@expanded->core) (set-symbol-value! 'trace-printer G4cd5@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4cec@c) (condition (G4c28@G4a38@make-non-continuable-violation) (G4c1e@G4a1f@make-who-condition 'raise) (G4be2@G4982@make-message-condition '"returned from non-continuable exception") (G4c14@G4a05@make-irritants-condition (list G4cec@c))))) (G4ccd@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4ccd@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2b47@G29dc@library-path (append (G2b47@G29dc@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4cee@prefix) (G2b48@G29de@library-extensions (G4cee@prefix '".mosh" (G2b48@G29de@library-extensions)))) (lambda (G4cf0@ext G4cf1@ls) (append (map (lambda (G4cf4@x) (string-append G4cf0@ext G4cf4@x)) G4cf1@ls) G4cf1@ls))) ((lambda (G4cf6@args G4cf7@port) ((lambda (G4cfb@ref) (begin (set! G4cfb@ref (lambda (G4cfe@rtd G4cff@i G4d00@x) ((lambda (G4d04@val) (if (symbol? G4d04@val) (ungensym G4d04@val) G4d04@val)) ((record-accessor G4cfe@rtd G4cff@i) G4d00@x)))) (with-exception-handler (lambda (G4cfc@c) (if (condition? G4cfc@c) (G4cd1@conditioon-printer G4cfc@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" G4cfc@c))) (lambda () (if (null? G4cf6@args) (G4cd3@repl) (G4ceb@load-r6rs-top-level (car G4cf6@args) 'load (cdr G4cf6@args))))))) '#f)) (G4cd7@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
