;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G10238@read-annotated G10240@annotation-stripped G10242@annotation? G10244@annotation-source G10246@annotation-expression G10248@serialize-library G10250@load-serialized-library G10252@make-record-printer G10254@compile-core G10256@read-library-source-file G10258@make-parameter G10412@file-options-spec) (begin (set! G10238@read-annotated read) (set! G10240@annotation-stripped (lambda (G10413@x) (G10246@annotation-expression G10413@x))) (set! G10242@annotation? (lambda (G10415@x) (source-info G10415@x))) (set! G10244@annotation-source (lambda (G10417@x) (source-info G10417@x))) (set! G10246@annotation-expression (lambda (G10419@x) (if (pair? G10419@x) (cons (car G10419@x) (cdr G10419@x)) (display '"line:46\n")))) (set! G10248@serialize-library (lambda G10421@x (begin (display G10421@x) '#f))) (set! G10250@load-serialized-library (lambda G10423@x '#f)) (set! G10252@make-record-printer (lambda (G10425@name G10426@printer) (lambda G10429@x (begin (display '"record printer") (for-each display G10429@x))))) (set! G10254@compile-core (lambda G10431@x (apply error 'comile-core '"not implementated" G10431@x))) (set! G10256@read-library-source-file (lambda (G10433@file-name) (with-input-from-file G10433@file-name G10238@read-annotated))) (set! G10258@make-parameter (lambda G10449 ((lambda (G10450) (if (= G10450 '1) (apply (lambda (G10435@x) (G10258@make-parameter G10435@x (lambda (G10437@x) G10437@x))) G10449) (if (= G10450 '2) (apply (lambda (G10439@x G10440@fender) (begin (if (procedure? G10440@fender) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((lambda (G10443@x) (lambda G10447 ((lambda (G10448) (if (= G10448 '0) (apply (lambda () G10443@x) G10447) (if (= G10448 '1) (apply (lambda (G10445@v) (set! G10443@x (G10440@fender G10445@v))) G10447) (error 'apply '"invalid arg count")))) (length G10447)))) (G10440@fender G10439@x)))) G10449) (error 'apply '"invalid arg count")))) (length G10449)))) (set! G10412@file-options-spec (lambda (G10451@x) G10451@x)) (begin (set! G10464@G10412@file-options-spec G10412@file-options-spec) (set! G10463@G10258@make-parameter G10258@make-parameter) (set! G10462@G10256@read-library-source-file G10256@read-library-source-file) (set! G10461@G10254@compile-core G10254@compile-core) (set! G10460@G10252@make-record-printer G10252@make-record-printer) (set! G10459@G10250@load-serialized-library G10250@load-serialized-library) (set! G10458@G10248@serialize-library G10248@serialize-library) (set! G10457@G10246@annotation-expression G10246@annotation-expression) (set! G10456@G10244@annotation-source G10244@annotation-source) (set! G10455@G10242@annotation? G10242@annotation?) (set! G10454@G10240@annotation-stripped G10240@annotation-stripped) (set! G10453@G10238@read-annotated G10238@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G10469@current-primitive-locations G10471@mutable? G10473@rewriter G10475@expanded->core G10477@compile-core-expr G10479@pretty-print G10481@compile-core-expr-to-port) (begin (set! G10469@current-primitive-locations (G10463@G10258@make-parameter (lambda (G10482@x) '#f) (lambda (G10484@p) (begin (if (procedure? G10484@p) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) G10484@p)))) (set! G10471@mutable? (lambda (G10486@x) ((lambda (G10489@simple?) (begin (set! G10489@simple? (lambda (G10490@x) ((lambda (G10492@t) (if G10492@t G10492@t ((lambda (G10494@t) (if G10494@t G10494@t ((lambda (G10496@t) (if G10496@t G10496@t ((lambda (G10498@t) (if G10498@t G10498@t ((lambda (G10500@t) (if G10500@t G10500@t ((lambda (G10502@t) (if G10502@t G10502@t (begin '#f (number? G10490@x)))) (bytevector? G10490@x)))) (string? G10490@x)))) (boolean? G10490@x)))) (symbol? G10490@x)))) (char? G10490@x)))) (null? G10490@x)))) (not (G10489@simple? G10486@x)))) '#f))) (set! G10473@rewriter (lambda (G10504@quote-hack?) ((lambda (G10507@f) (begin (set! G10507@f (lambda (G10508@x) (if (pair? G10508@x) ((lambda (G10510@t) (if (eqv? G10510@t 'quote) (if (if G10504@quote-hack? (begin '#f (G10471@mutable? (cadr G10508@x))) '#f) ((lambda (G10549@g) (begin (set-symbol-value! G10549@g (cadr G10508@x)) G10549@g)) (gensym)) G10508@x) (if (eqv? G10510@t 'case-lambda) (cons 'case-lambda (map (lambda (G10547@x) (cons (car G10547@x) (map G10507@f (cdr G10547@x)))) (cdr G10508@x))) (if (eqv? G10510@t 'lambda) (cons* 'lambda (cadr G10508@x) (map G10507@f (cddr G10508@x))) (if (eqv? G10510@t 'letrec) ((lambda (G10539@bindings G10540@body*) ((lambda (G10543@lhs* G10544@rhs*) (cons* 'letrec (map list G10543@lhs* (map G10507@f G10544@rhs*)) (map G10507@f G10540@body*))) (map car G10539@bindings) (map cadr G10539@bindings))) (cadr G10508@x) (cddr G10508@x)) (if (eqv? G10510@t 'letrec*) ((lambda (G10531@bindings G10532@body*) ((lambda (G10535@lhs* G10536@rhs*) (cons* 'letrec* (map list G10535@lhs* (map G10507@f G10536@rhs*)) (map G10507@f G10532@body*))) (map car G10531@bindings) (map cadr G10531@bindings))) (cadr G10508@x) (cddr G10508@x)) (if (eqv? G10510@t 'library-letrec*) ((lambda (G10517@name G10518@x) ((lambda (G10521@bindings G10522@body*) ((lambda (G10525@lhs* G10526@lhs** G10527@rhs*) (cons* 'library-letrec* G10517@name (map list G10525@lhs* G10526@lhs** (map G10507@f G10527@rhs*)) (map G10507@f G10522@body*))) (map car G10521@bindings) (map cadr G10521@bindings) (map caddr G10521@bindings))) (cadr G10518@x) (cddr G10518@x))) (cadr G10508@x) (cdr G10508@x)) (if (eqv? G10510@t 'begin) (cons 'begin (map G10507@f (cdr G10508@x))) (if (eqv? G10510@t 'set!) (list 'set! (cadr G10508@x) (G10507@f (caddr G10508@x))) (if (eqv? G10510@t 'primitive) ((lambda (G10511@op) ((lambda (G10513@t) (if G10513@t ((lambda (G10515@loc) G10515@loc) G10513@t) G10511@op)) ((G10469@current-primitive-locations) G10511@op))) (cadr G10508@x)) (if (eqv? G10510@t 'define) G10508@x (if (list? G10508@x) (map G10507@f G10508@x) (error 'rewrite '"invalid form ~s ~s" G10508@x (list? G10508@x)))))))))))))) (car G10508@x)) G10508@x))) G10507@f)) '#f))) (set! G10475@expanded->core (lambda (G10551@x) ((G10473@rewriter '#t) G10551@x))) (set! G10477@compile-core-expr (lambda (G10553@x) ((G10473@rewriter '#f) G10553@x))) (set! G10479@pretty-print write) (set! G10481@compile-core-expr-to-port (lambda (G10555@x G10556@p) (G10479@pretty-print ((G10473@rewriter '#f) G10555@x) G10556@p))) (begin (set! G10565@G10481@compile-core-expr-to-port G10481@compile-core-expr-to-port) (set! G10564@G10479@pretty-print G10479@pretty-print) (set! G10563@G10477@compile-core-expr G10477@compile-core-expr) (set! G10562@G10475@expanded->core G10475@expanded->core) (set! G10561@G10473@rewriter G10473@rewriter) (set! G10560@G10471@mutable? G10471@mutable?) (set! G10559@G10469@current-primitive-locations G10469@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G10655@make-collection G10657@current-library-collection G10663@G10658 G10665@G10660 G10667@G10659 G10672@library? G10674@make-library G10676@library-id G10678@library-name G10680@library-version G10682@library-imp* G10684@library-vis* G10686@library-inv* G10688@library-subst G10690@library-env G10692@library-visit-state G10694@library-invoke-state G10696@library-visit-code G10698@library-invoke-code G10700@library-visible? G10702@library-source-file-name G10704@set-library-id! G10706@set-library-name! G10708@set-library-version! G10710@set-library-imp*! G10712@set-library-vis*! G10714@set-library-inv*! G10716@set-library-subst! G10718@set-library-env! G10720@set-library-visit-state! G10722@set-library-invoke-state! G10724@set-library-visit-code! G10726@set-library-invoke-code! G10728@set-library-visible?! G10730@set-library-source-file-name! G10732@rp G10734@find-dependencies G10736@find-library-by G10738@library-path G10740@library-extensions G10742@library-name->file-name G10744@file-locator G10746@serialize-all G10748@current-precompiled-library-loader G10750@try-load-from-file G10752@library-loader G10754@current-library-expander G10756@external-pending-libraries G10758@find-external-library G10760@find-library-by-name G10762@library-exists? G10764@find-library-by-spec/die G10766@label->binding-table G10768@install-library-record G10770@install-library G10772@imported-label->binding G10774@invoke-library G10776@visit-library G10778@invoke-library-by-spec G10780@installed-libraries G10782@library-spec) (begin (set! G10655@make-collection (lambda () ((lambda (G10783@set) ((lambda (G10786@set-cons) (begin (set! G10786@set-cons (lambda (G10791@x G10792@ls) (if (memq G10791@x G10792@ls) G10792@ls (cons G10791@x G10792@ls)))) (lambda G10789 ((lambda (G10790) (if (= G10790 '0) (apply (lambda () G10783@set) G10789) (if (= G10790 '1) (apply (lambda (G10787@x) (set! G10783@set (G10786@set-cons G10787@x G10783@set))) G10789) (error 'apply '"invalid arg count")))) (length G10789))))) '#f)) '()))) (set! G10657@current-library-collection (G10463@G10258@make-parameter (G10655@make-collection) (lambda (G10795@x) (begin (if (procedure? G10795@x) (void) (assertion-violation 'current-library-collection '"not a procedure" G10795@x)) G10795@x)))) (set! G10663@G10658 (make-record-type-descriptor 'library '#f 'G10661 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G10665@G10660 '#f) (set! G10667@G10659 (make-record-constructor-descriptor G10663@G10658 '#f G10665@G10660)) (set! G10672@library? (record-predicate G10663@G10658)) (set! G10674@make-library (record-constructor G10667@G10659)) (set! G10676@library-id (record-accessor G10663@G10658 '0)) (set! G10678@library-name (record-accessor G10663@G10658 '1)) (set! G10680@library-version (record-accessor G10663@G10658 '2)) (set! G10682@library-imp* (record-accessor G10663@G10658 '3)) (set! G10684@library-vis* (record-accessor G10663@G10658 '4)) (set! G10686@library-inv* (record-accessor G10663@G10658 '5)) (set! G10688@library-subst (record-accessor G10663@G10658 '6)) (set! G10690@library-env (record-accessor G10663@G10658 '7)) (set! G10692@library-visit-state (record-accessor G10663@G10658 '8)) (set! G10694@library-invoke-state (record-accessor G10663@G10658 '9)) (set! G10696@library-visit-code (record-accessor G10663@G10658 '10)) (set! G10698@library-invoke-code (record-accessor G10663@G10658 '11)) (set! G10700@library-visible? (record-accessor G10663@G10658 '12)) (set! G10702@library-source-file-name (record-accessor G10663@G10658 '13)) (set! G10704@set-library-id! (record-mutator G10663@G10658 '0)) (set! G10706@set-library-name! (record-mutator G10663@G10658 '1)) (set! G10708@set-library-version! (record-mutator G10663@G10658 '2)) (set! G10710@set-library-imp*! (record-mutator G10663@G10658 '3)) (set! G10712@set-library-vis*! (record-mutator G10663@G10658 '4)) (set! G10714@set-library-inv*! (record-mutator G10663@G10658 '5)) (set! G10716@set-library-subst! (record-mutator G10663@G10658 '6)) (set! G10718@set-library-env! (record-mutator G10663@G10658 '7)) (set! G10720@set-library-visit-state! (record-mutator G10663@G10658 '8)) (set! G10722@set-library-invoke-state! (record-mutator G10663@G10658 '9)) (set! G10724@set-library-visit-code! (record-mutator G10663@G10658 '10)) (set! G10726@set-library-invoke-code! (record-mutator G10663@G10658 '11)) (set! G10728@set-library-visible?! (record-mutator G10663@G10658 '12)) (set! G10730@set-library-source-file-name! (record-mutator G10663@G10658 '13)) (set! G10732@rp (G10460@G10252@make-record-printer 'library (lambda (G10797@x G10798@p) (begin (if (G10672@library? G10797@x) (void) (assertion-violation 'record-type-printer '"not a library")) (display (format '"#<library ~s>" (if (null? (G10680@library-version G10797@x)) (G10678@library-name G10797@x) (append (G10678@library-name G10797@x) (list (G10680@library-version G10797@x))))) G10798@p))))) (set! G10734@find-dependencies (lambda (G10801@ls) (if (null? G10801@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G10736@find-library-by (lambda (G10803@pred) ((letrec ((G10805@f (lambda (G10807@ls) (if (null? G10807@ls) '#f (if (G10803@pred (car G10807@ls)) (car G10807@ls) (G10805@f (cdr G10807@ls))))))) G10805@f) ((G10657@current-library-collection))))) (set! G10738@library-path (G10463@G10258@make-parameter '(".") (lambda (G10809@x) (if (if (list? G10809@x) (begin '#f (for-all string? G10809@x)) '#f) (map (lambda (G10811@x) G10811@x) G10809@x) (assertion-violation 'library-path '"not a list of strings" G10809@x))))) (set! G10740@library-extensions (G10463@G10258@make-parameter '(".sls" ".ss" ".scm") (lambda (G10813@x) (if (if (list? G10813@x) (begin '#f (for-all string? G10813@x)) '#f) (map (lambda (G10815@x) G10815@x) G10813@x) (assertion-violation 'library-extensions '"not a list of strings" G10813@x))))) (set! G10742@library-name->file-name (lambda (G10817@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G10821@G10819 G10822@G10820) ((lambda (G10825@extract G10826@p) ((lambda (G10830@display-hex) (begin (set! G10830@display-hex (lambda (G10845@n) (if (<= '0 G10845@n '9) (display G10845@n G10826@p) (display (integer->char (+ (char->integer '#\A) (- G10845@n '10))) G10826@p)))) (begin ((letrec ((G10831@f (lambda (G10833@ls) (if (null? G10833@ls) (void) (begin (display '"/" G10826@p) (for-each (lambda (G10835@c) (if ((lambda (G10837@t) (if G10837@t G10837@t ((lambda (G10839@t) (if G10839@t G10839@t ((lambda (G10841@t) (if G10841@t G10841@t (begin '#f (memv G10835@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G10835@c '#\9)))) (char<=? '#\A G10835@c '#\Z)))) (char<=? '#\a G10835@c '#\z)) (display G10835@c G10826@p) (begin (display '"%" G10826@p) ((lambda (G10843@n) (begin (G10830@display-hex (quotient G10843@n '16)) (G10830@display-hex (remainder G10843@n '16)))) (char->integer G10835@c))))) (string->list (symbol->string (car G10833@ls)))) (G10831@f (cdr G10833@ls))))))) G10831@f) G10817@x) (G10825@extract)))) '#f)) G10822@G10820 G10821@G10819))))) (set! G10744@file-locator (G10463@G10258@make-parameter (lambda (G10847@x) ((lambda (G10849@str) ((letrec ((G10851@f (lambda (G10853@ls G10854@exts G10855@failed-list) (if (null? G10853@ls) ((lambda () ((lambda (G10867@G10862 G10869@G10864 G10871@G10863 G10876@G10861 G10878@make-library-resolution-condition G10880@G10859 G10882@G10860 G10884@library-resolution-condition? G10886@condition-library G10888@condition-files) (begin (set! G10867@G10862 (make-record-type-descriptor '&library-resolution &condition-rtd 'G10865 '#f '#f '#((immutable library) (immutable files)))) (set! G10869@G10864 '#f) (set! G10871@G10863 (make-record-constructor-descriptor G10867@G10862 &condition-rcd G10869@G10864)) (set! G10876@G10861 (record-predicate G10867@G10862)) (set! G10878@make-library-resolution-condition (record-constructor G10871@G10863)) (set! G10880@G10859 (record-accessor G10867@G10862 '0)) (set! G10882@G10860 (record-accessor G10867@G10862 '1)) (set! G10884@library-resolution-condition? (condition-predicate G10867@G10862)) (set! G10886@condition-library (condition-accessor G10867@G10862 G10880@G10859)) (set! G10888@condition-files (condition-accessor G10867@G10862 G10882@G10860)) (raise (condition (G19192@G18958@make-error) (G19218@G19044@make-who-condition 'expander) (G19172@G18894@make-message-condition '"cannot locate library in library-path") (G10878@make-library-resolution-condition G10847@x (reverse G10855@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G10854@exts) (G10851@f (cdr G10853@ls) (G10740@library-extensions) G10855@failed-list) ((lambda (G10889@name) (if (file-exists? G10889@name) G10889@name (G10851@f G10853@ls (cdr G10854@exts) (cons G10889@name G10855@failed-list)))) (string-append (car G10853@ls) G10849@str (car G10854@exts)))))))) G10851@f) (G10738@library-path) (G10740@library-extensions) '())) (G10742@library-name->file-name G10847@x))) (lambda (G10891@f) (if (procedure? G10891@f) G10891@f (assertion-violation 'file-locator '"not a procedure" G10891@f))))) (set! G10746@serialize-all (lambda (G10893@serialize G10894@compile) ((lambda (G10898@library-desc) (begin (set! G10898@library-desc (lambda (G10901@x) (list (G10676@library-id G10901@x) (G10678@library-name G10901@x)))) (for-each (lambda (G10899@x) (if (G10702@library-source-file-name G10899@x) (G10893@serialize (G10702@library-source-file-name G10899@x) (list (G10676@library-id G10899@x) (G10678@library-name G10899@x) (G10680@library-version G10899@x) (map G10898@library-desc (G10682@library-imp* G10899@x)) (map G10898@library-desc (G10684@library-vis* G10899@x)) (map G10898@library-desc (G10686@library-inv* G10899@x)) (G10688@library-subst G10899@x) (G10690@library-env G10899@x) (G10894@compile (G10696@library-visit-code G10899@x)) (G10894@compile (G10698@library-invoke-code G10899@x)) (G10700@library-visible? G10899@x))) (void))) ((G10657@current-library-collection))))) '#f))) (set! G10748@current-precompiled-library-loader (G10463@G10258@make-parameter (lambda (G10903@filename G10904@sk) '#f))) (set! G10750@try-load-from-file (lambda (G10907@filename) ((G10748@current-precompiled-library-loader) G10907@filename (lambda G10945 ((lambda (G10946) (if (= G10946 '11) (apply (lambda (G10909@id G10910@name G10911@ver G10912@imp* G10913@vis* G10914@inv* G10915@exp-subst G10916@exp-env G10917@visit-proc G10918@invoke-proc G10919@visible?) ((letrec ((G10931@f (lambda (G10933@deps) (if (null? G10933@deps) (begin (G10770@install-library G10909@id G10910@name G10911@ver G10912@imp* G10913@vis* G10914@inv* G10915@exp-subst G10916@exp-env G10917@visit-proc G10918@invoke-proc '#f '#f G10919@visible? '#f) '#t) ((lambda (G10935@d) ((lambda (G10937@label G10938@dname) ((lambda (G10941@l) (if (if (G10672@library? G10941@l) (begin '#f (eq? G10937@label (G10676@library-id G10941@l))) '#f) (G10931@f (cdr G10933@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source.\n" G10910@name G10938@dname G10907@filename) '#f))) (G10760@find-library-by-name G10938@dname))) (car G10935@d) (cadr G10935@d))) (car G10933@deps)))))) G10931@f) (append G10912@imp* G10913@vis* G10914@inv*))) G10945) (if (>= G10946 '0) (apply (lambda G10943@others '#f) G10945) (error 'apply '"invalid arg count")))) (length G10945)))))) (set! G10752@library-loader (G10463@G10258@make-parameter (lambda (G10947@x) ((lambda (G10949@file-name) (if (not G10949@file-name) (assertion-violation '#f '"cannot file library" G10947@x) ((lambda (G10951@t) (if G10951@t G10951@t (begin '#f ((G10754@current-library-expander) (G10462@G10256@read-library-source-file G10949@file-name) G10949@file-name (lambda (G10953@name) (if (equal? G10953@name G10947@x) (void) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G10957@G10955 G10958@G10956) ((lambda (G10961@e G10962@p) (begin (display '"expected to find library " G10962@p) (write G10947@x G10962@p) (display '" in file " G10962@p) (display G10949@file-name G10962@p) (display '", found " G10962@p) (write G10953@name G10962@p) (display '" instead" G10962@p) (G10961@e))) G10958@G10956 G10957@G10955)))))))))) (G10750@try-load-from-file G10949@file-name)))) ((G10744@file-locator) G10947@x))) (lambda (G10965@f) (if (procedure? G10965@f) G10965@f (assertion-violation 'library-locator '"not a procedure" G10965@f))))) (set! G10754@current-library-expander (G10463@G10258@make-parameter (lambda (G10967@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G10969@f) (if (procedure? G10969@f) G10969@f (assertion-violation 'library-expander '"not a procedure" G10969@f))))) (set! G10756@external-pending-libraries (G10463@G10258@make-parameter '())) (set! G10758@find-external-library (lambda (G10971@name) (begin (if (member G10971@name (G10756@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G10971@name) (void)) ((lambda (G10975@G10973@external-pending-libraries G10976@G10974@external-pending-libraries) ((lambda (G10979@swap) (dynamic-wind G10979@swap (lambda () (begin ((G10752@library-loader) G10971@name) ((lambda (G10981@t) (if G10981@t G10981@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G10971@name)))) (G10736@find-library-by (lambda (G10983@x) (equal? (G10678@library-name G10983@x) G10971@name)))))) G10979@swap)) (lambda () ((lambda (G10985@t) (begin (G10975@G10973@external-pending-libraries G10976@G10974@external-pending-libraries) (set! G10976@G10974@external-pending-libraries G10985@t))) (G10975@G10973@external-pending-libraries))))) G10756@external-pending-libraries (cons G10971@name (G10756@external-pending-libraries)))))) (set! G10760@find-library-by-name (lambda (G10987@name) ((lambda (G10989@t) (if G10989@t G10989@t (begin '#f (G10758@find-external-library G10987@name)))) (G10736@find-library-by (lambda (G10991@x) (equal? (G10678@library-name G10991@x) G10987@name)))))) (set! G10762@library-exists? (lambda (G10993@name) (if (G10736@find-library-by (lambda (G10995@x) (equal? (G10678@library-name G10995@x) G10993@name))) (begin '#f '#t) '#f))) (set! G10764@find-library-by-spec/die (lambda (G10997@spec) ((lambda (G10999@id) ((lambda (G11001@t) (if G11001@t G11001@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G10997@spec)))) (G10736@find-library-by (lambda (G11003@x) (eq? G10999@id (G10676@library-id G11003@x)))))) (car G10997@spec)))) (set! G10766@label->binding-table (make-eq-hashtable)) (set! G10768@install-library-record (lambda (G11005@lib) (begin ((lambda (G11007@exp-env) (for-each (lambda (G11009@x) ((lambda (G11011@label G11012@binding) ((lambda (G11015@binding) (hashtable-set! G10766@label->binding-table G11011@label G11015@binding)) ((lambda (G11017@t) (if (eqv? G11017@t 'global) (cons 'global (cons G11005@lib (cdr G11012@binding))) (if (eqv? G11017@t 'global-macro) (cons 'global-macro (cons G11005@lib (cdr G11012@binding))) (if (eqv? G11017@t 'global-macro!) (cons 'global-macro! (cons G11005@lib (cdr G11012@binding))) G11012@binding)))) (car G11012@binding)))) (car G11009@x) (cdr G11009@x))) G11007@exp-env)) (G10690@library-env G11005@lib)) ((G10657@current-library-collection) G11005@lib)))) (set! G10770@install-library (lambda (G11018@id G11019@name G11020@ver G11021@imp* G11022@vis* G11023@inv* G11024@exp-subst G11025@exp-env G11026@visit-proc G11027@invoke-proc G11028@visit-code G11029@invoke-code G11030@visible? G11031@source-file-name) ((lambda (G11046@imp-lib* G11047@vis-lib* G11048@inv-lib*) (begin (if (if (symbol? G11018@id) (if (list? G11019@name) (begin '#f (list? G11020@ver)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" G11018@id G11019@name G11020@ver)) (if (G10762@library-exists? G11019@name) (assertion-violation 'install-library '"library is already installed" G11019@name) (void)) ((lambda (G11052@lib) (G10768@install-library-record G11052@lib)) (G10674@make-library G11018@id G11019@name G11020@ver G11046@imp-lib* G11047@vis-lib* G11048@inv-lib* G11024@exp-subst G11025@exp-env G11026@visit-proc G11027@invoke-proc G11028@visit-code G11029@invoke-code G11030@visible? G11031@source-file-name)))) (map G10764@find-library-by-spec/die G11021@imp*) (map G10764@find-library-by-spec/die G11022@vis*) (map G10764@find-library-by-spec/die G11023@inv*)))) (set! G10772@imported-label->binding (lambda (G11054@lab) (hashtable-ref G10766@label->binding-table G11054@lab '#f))) (set! G10774@invoke-library (lambda (G11056@lib) ((lambda (G11058@invoke) (if (procedure? G11058@invoke) (begin (G10722@set-library-invoke-state! G11056@lib (lambda () (assertion-violation 'invoke '"circularity detected" G11056@lib))) (for-each G10774@invoke-library (G10686@library-inv* G11056@lib)) (G10722@set-library-invoke-state! G11056@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G11056@lib))) (G11058@invoke) (G10722@set-library-invoke-state! G11056@lib '#t)) (void))) (G10694@library-invoke-state G11056@lib)))) (set! G10776@visit-library (lambda (G11060@lib) ((lambda (G11062@visit) (if (procedure? G11062@visit) (begin (G10720@set-library-visit-state! G11060@lib (lambda () (assertion-violation 'visit '"circularity detected" G11060@lib))) (for-each G10774@invoke-library (G10684@library-vis* G11060@lib)) (G10720@set-library-visit-state! G11060@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G11060@lib))) (G11062@visit) (G10720@set-library-visit-state! G11060@lib '#t)) (void))) (G10692@library-visit-state G11060@lib)))) (set! G10778@invoke-library-by-spec (lambda (G11064@spec) (G10774@invoke-library (G10764@find-library-by-spec/die G11064@spec)))) (set! G10780@installed-libraries (lambda G11074 ((lambda (G11075) (if (= G11075 '1) (apply (lambda (G11066@all?) ((letrec ((G11068@f (lambda (G11070@ls) (if (null? G11070@ls) '() (if ((lambda (G11072@t) (if G11072@t G11072@t (begin '#f (G10700@library-visible? (car G11070@ls))))) G11066@all?) (cons (car G11070@ls) (G11068@f (cdr G11070@ls))) (G11068@f (cdr G11070@ls))))))) G11068@f) ((G10657@current-library-collection)))) G11074) (if (= G11075 '0) (apply (lambda () (G10780@installed-libraries '#f)) G11074) (error 'apply '"invalid arg count")))) (length G11074)))) (set! G10782@library-spec (lambda (G11076@x) (begin (if (G10672@library? G11076@x) (void) (assertion-violation 'library-spec '"not a library" G11076@x)) (list (G10676@library-id G11076@x) (G10678@library-name G11076@x) (G10680@library-version G11076@x))))) (begin (set! G11138@G10782@library-spec G10782@library-spec) (set! G11137@G10780@installed-libraries G10780@installed-libraries) (set! G11136@G10778@invoke-library-by-spec G10778@invoke-library-by-spec) (set! G11135@G10776@visit-library G10776@visit-library) (set! G11134@G10774@invoke-library G10774@invoke-library) (set! G11133@G10772@imported-label->binding G10772@imported-label->binding) (set! G11132@G10770@install-library G10770@install-library) (set! G11131@G10768@install-library-record G10768@install-library-record) (set! G11130@G10766@label->binding-table G10766@label->binding-table) (set! G11129@G10764@find-library-by-spec/die G10764@find-library-by-spec/die) (set! G11128@G10762@library-exists? G10762@library-exists?) (set! G11127@G10760@find-library-by-name G10760@find-library-by-name) (set! G11126@G10758@find-external-library G10758@find-external-library) (set! G11125@G10756@external-pending-libraries G10756@external-pending-libraries) (set! G11124@G10754@current-library-expander G10754@current-library-expander) (set! G11123@G10752@library-loader G10752@library-loader) (set! G11122@G10750@try-load-from-file G10750@try-load-from-file) (set! G11121@G10748@current-precompiled-library-loader G10748@current-precompiled-library-loader) (set! G11120@G10746@serialize-all G10746@serialize-all) (set! G11119@G10744@file-locator G10744@file-locator) (set! G11118@G10742@library-name->file-name G10742@library-name->file-name) (set! G11117@G10740@library-extensions G10740@library-extensions) (set! G11116@G10738@library-path G10738@library-path) (set! G11115@G10736@find-library-by G10736@find-library-by) (set! G11114@G10734@find-dependencies G10734@find-dependencies) (set! G11113@G10732@rp G10732@rp) (set! G11112@G10730@set-library-source-file-name! G10730@set-library-source-file-name!) (set! G11111@G10728@set-library-visible?! G10728@set-library-visible?!) (set! G11110@G10726@set-library-invoke-code! G10726@set-library-invoke-code!) (set! G11109@G10724@set-library-visit-code! G10724@set-library-visit-code!) (set! G11108@G10722@set-library-invoke-state! G10722@set-library-invoke-state!) (set! G11107@G10720@set-library-visit-state! G10720@set-library-visit-state!) (set! G11106@G10718@set-library-env! G10718@set-library-env!) (set! G11105@G10716@set-library-subst! G10716@set-library-subst!) (set! G11104@G10714@set-library-inv*! G10714@set-library-inv*!) (set! G11103@G10712@set-library-vis*! G10712@set-library-vis*!) (set! G11102@G10710@set-library-imp*! G10710@set-library-imp*!) (set! G11101@G10708@set-library-version! G10708@set-library-version!) (set! G11100@G10706@set-library-name! G10706@set-library-name!) (set! G11099@G10704@set-library-id! G10704@set-library-id!) (set! G11098@G10702@library-source-file-name G10702@library-source-file-name) (set! G11097@G10700@library-visible? G10700@library-visible?) (set! G11096@G10698@library-invoke-code G10698@library-invoke-code) (set! G11095@G10696@library-visit-code G10696@library-visit-code) (set! G11094@G10694@library-invoke-state G10694@library-invoke-state) (set! G11093@G10692@library-visit-state G10692@library-visit-state) (set! G11092@G10690@library-env G10690@library-env) (set! G11091@G10688@library-subst G10688@library-subst) (set! G11090@G10686@library-inv* G10686@library-inv*) (set! G11089@G10684@library-vis* G10684@library-vis*) (set! G11088@G10682@library-imp* G10682@library-imp*) (set! G11087@G10680@library-version G10680@library-version) (set! G11086@G10678@library-name G10678@library-name) (set! G11085@G10676@library-id G10676@library-id) (set! G11084@G10674@make-library G10674@make-library) (set! G11083@G10672@library? G10672@library?) (set! G11082@G10667@G10659 G10667@G10659) (set! G11081@G10665@G10660 G10665@G10660) (set! G11080@G10663@G10658 G10663@G10658) (set! G11079@G10657@current-library-collection G10657@current-library-collection) (set! G11078@G10655@make-collection G10655@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G11141@build-global-define G11273@build-lambda G11275@build-case-lambda G11277@build-let G11349@build-sequence G11351@build-void G11353@build-letrec G11355@build-letrec* G11357@build-library-letrec* G11359@build-receive) (begin (set! G11141@build-global-define (lambda (G11360@x) (G11351@build-void))) (set! G11273@build-lambda (lambda (G11362@ae G11363@vars G11364@exp) (list 'lambda G11363@vars G11364@exp))) (set! G11275@build-case-lambda (lambda (G11368@ae G11369@vars* G11370@exp*) ((lambda (G11375@build-error G11377@build-pred G11379@build-apply G11381@expand-case-lambda) (begin (set! G11375@build-error (lambda (G11428@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G11377@build-pred (lambda (G11406@ae G11407@n G11408@vars) (call-with-values (lambda () ((letrec ((G11414@f (lambda (G11416@vars G11417@count) (if (pair? G11416@vars) (G11414@f (cdr G11416@vars) (+ G11417@count '1)) (if (null? G11416@vars) (values G11417@count '=) (values G11417@count '>=)))))) G11414@f) G11408@vars '0)) (lambda (G11420@G11412 G11421@G11413) ((lambda (G11424@pred G11425@count) (list (list 'primitive G11424@pred) G11407@n (list 'quote G11425@count))) G11421@G11413 G11420@G11412))))) (set! G11379@build-apply (lambda (G11398@ae G11399@g G11400@vars G11401@exp) (list '(primitive apply) (G11273@build-lambda G11398@ae G11400@vars G11401@exp) G11399@g))) (set! G11381@expand-case-lambda (lambda (G11382@ae G11383@vars G11384@exp*) ((lambda (G11388@g G11389@n) (list 'lambda G11388@g (G11277@build-let G11382@ae (list G11389@n) (list (list '(primitive length) G11388@g)) ((letrec ((G11392@f (lambda (G11394@vars* G11395@exp*) (if (null? G11394@vars*) (G11375@build-error G11382@ae) (list 'if (G11377@build-pred G11382@ae G11389@n (car G11394@vars*)) (G11379@build-apply G11382@ae G11388@g (car G11394@vars*) (car G11395@exp*)) (G11392@f (cdr G11394@vars*) (cdr G11395@exp*))))))) G11392@f) G11369@vars* G11384@exp*)))) (gensym) (gensym)))) (if (= (length G11370@exp*) '1) (G11273@build-lambda G11368@ae (car G11369@vars*) (car G11370@exp*)) (G11381@expand-case-lambda G11368@ae G11369@vars* G11370@exp*)))) '#f '#f '#f '#f))) (set! G11277@build-let (lambda (G11430@ae G11431@lhs* G11432@rhs* G11433@body) (cons (G11273@build-lambda G11430@ae G11431@lhs* G11433@body) G11432@rhs*))) (set! G11349@build-sequence (lambda (G11438@ae G11439@exps) ((letrec ((G11442@loop (lambda (G11444@exps) (if (null? (cdr G11444@exps)) (car G11444@exps) (if (equal? (car G11444@exps) (G11351@build-void)) (G11442@loop (cdr G11444@exps)) (cons 'begin G11444@exps)))))) G11442@loop) G11439@exps))) (set! G11351@build-void (lambda () '((primitive void)))) (set! G11353@build-letrec (lambda (G11446@ae G11447@vars G11448@val-exps G11449@body-exp) (if (null? G11447@vars) G11449@body-exp (list 'letrec (map list G11447@vars G11448@val-exps) G11449@body-exp)))) (set! G11355@build-letrec* (lambda (G11454@ae G11455@vars G11456@val-exps G11457@body-exp) (if (null? G11455@vars) G11457@body-exp (G11277@build-let G11454@ae G11455@vars (map (lambda (G11462@x) (list 'quote '#f)) G11455@vars) (G11349@build-sequence G11454@ae (append (map (lambda (G11464@lhs G11465@rhs) (list 'set! G11464@lhs G11465@rhs)) G11455@vars G11456@val-exps) (list G11457@body-exp))))))) (set! G11357@build-library-letrec* (lambda (G11468@ae G11469@name G11470@vars G11471@locs G11472@val-exps G11473@body-exp) (list 'library-letrec* G11469@name (map list G11470@vars G11471@locs G11472@val-exps) G11473@body-exp))) (set! G11359@build-receive (lambda (G11480@ae G11481@vars G11482@producer G11483@body*) (begin (display '"************** in ") (cons 'receive (cons G11481@vars (cons G11482@producer G11483@body*)))))) (begin (set! G11497@G11359@build-receive G11359@build-receive) (set! G11496@G11357@build-library-letrec* G11357@build-library-letrec*) (set! G11495@G11355@build-letrec* G11355@build-letrec*) (set! G11494@G11353@build-letrec G11353@build-letrec) (set! G11493@G11351@build-void G11351@build-void) (set! G11492@G11349@build-sequence G11349@build-sequence) (set! G11491@G11277@build-let G11277@build-let) (set! G11490@G11275@build-case-lambda G11275@build-case-lambda) (set! G11489@G11273@build-lambda G11273@build-lambda) (set! G11488@G11141@build-global-define G11141@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G11510@set-cons G11512@set-union G11517@top-mark* G11519@top-marked? G11521@gen-lexical G11523@gen-global G11525@gen-label G11527@gen-top-level-label G11529@gen-define-label+loc G11531@gen-define-label G11537@G11532 G11539@G11534 G11541@G11533 G11546@rib? G11548@make-rib G11550@rib-sym* G11552@rib-mark** G11554@rib-label* G11556@rib-sealed/freq G11558@set-rib-sym*! G11560@set-rib-mark**! G11562@set-rib-label*! G11564@set-rib-sealed/freq! G11566@make-empty-rib G11568@extend-rib! G11570@make-rib-map G11572@seal-rib! G11574@unseal-rib! G11576@make-full-rib G11582@G11577 G11584@G11579 G11586@G11578 G11591@stx? G11593@make-stx G11595@stx-expr G11597@stx-mark* G11599@stx-subst* G11601@stx-ae* G11603@set-stx-expr! G11605@set-stx-mark*! G11607@set-stx-subst*! G11609@set-stx-ae*! G11611@rp G11613@datum->stx G11615@gen-mark G11617@anti-mark G11619@anti-mark? G11621@join-wraps G11623@mkstx G11625@add-mark G11627@add-subst G11629@syntax-kind? G11631@syntax-vector->list G11633@syntax-pair? G11635@syntax-vector? G11637@syntax-null? G11639@syntax-list? G11641@syntax-car G11643@syntax-cdr G11645@syntax->list G11647@id? G11649@id->sym G11651@same-marks? G11653@bound-id=? G11655@free-id=? G11657@valid-bound-ids? G11659@distinct-bound-ids? G11661@bound-id-member? G11663@self-evaluating? G11665@strip-annotations G11667@strip G11669@stx->datum G11671@same-marks*? G11673@id->label G11675@id->real-label G11677@label->binding G11679@make-binding G11681@binding-type G11683@binding-value G11685@raise-unbound-error G11687@syntax-type G11710@sanitize-binding G11712@make-variable-transformer G11714@variable-transformer? G11716@variable-transformer-procedure G11718@make-eval-transformer G12106@parse-define G12108@parse-define-syntax G12110@scheme-stx-hashtable G12112@scheme-stx G12114@lexical-var G12116@lexical-mutable? G12118@set-lexical-mutable! G12120@add-lexical G12122@add-lexicals G12124@letrec-helper G12126@letrec-transformer G12128@letrec*-transformer G12130@fluid-let-syntax-transformer G12132@type-descriptor-transformer G12134@record-type-descriptor-transformer G12136@record-constructor-descriptor-transformer G12138@when-transformer G12140@unless-transformer G12142@if-transformer G12144@case-transformer G12146@quote-transformer G12148@case-lambda-transformer G12150@lambda-transformer G12152@bless G12154@with-syntax-macro G12156@invalid-fmls-error G12158@let-macro G12160@let-values-macro G12162@let*-values-macro G12164@trace-lambda-macro G12166@trace-define-macro G12168@trace-define-syntax-macro G12170@trace-let/rec-syntax G12172@trace-let-syntax-macro G12174@trace-letrec-syntax-macro G12176@guard-macro G12178@define-enumeration-macro G12180@time-macro G12182@delay-macro G12184@assert-macro G12186@endianness-macro G12188@identifier-syntax-macro G12190@do-macro G12192@let*-macro G12194@or-macro G12196@and-macro G12198@cond-macro G12200@do-include G12202@include-macro G12204@include-into-macro G12206@syntax-rules-macro G12208@quasiquote-macro G12210@quasisyntax-macro G12212@define-struct-macro G12214@define-record-type-macro G12216@define-condition-type-macro G12218@incorrect-usage-macro G12220@parameterize-transformer G12222@foreign-call-transformer G12224@convert-pattern G12226@syntax-dispatch G12228@ellipsis? G12230@underscore? G12232@verify-literals G12234@syntax-case-transformer G12236@ellipsis-map G12238@syntax-transformer G12240@core-macro-transformer G12242@file-options-macro G12244@symbol-macro G12246@macro-transformer G12248@local-macro-transformer G12250@do-macro-call G12252@chi-macro G12254@chi-local-macro G12256@chi-global-macro G12258@chi-expr* G12260@chi-application G12262@chi-expr G12264@chi-set! G12266@verify-formals G12268@chi-lambda-clause G12270@chi-lambda-clause* G12272@chi-defun G12274@chi-rhs G12276@expand-interaction-rhs*/init* G12278@chi-rhs* G12280@find-bound=? G12282@find-dups G12284@chi-internal G12286@parse-module G12292@G12287 G12294@G12289 G12296@G12288 G12301@module-interface? G12303@make-module-interface G12305@module-interface-first-mark G12307@module-interface-exp-id-vec G12309@module-interface-exp-lab-vec G12311@set-module-interface-first-mark! G12313@set-module-interface-exp-id-vec! G12315@set-module-interface-exp-lab-vec! G12317@module-interface-exp-id* G12319@chi-internal-module G12321@chi-body* G12323@expand-transformer G12325@parse-exports G12327@parse-library-name G12329@parse-library G12331@parse-import-spec* G12333@make-top-rib G12335@make-collector G12337@inv-collector G12339@vis-collector G12341@imp-collector G12343@chi-library-internal G12345@chi-interaction-expr G12347@library-body-expander G12349@core-library-expander G12351@parse-top-level-program G12353@top-level-expander G12359@G12354 G12361@G12356 G12363@G12355 G12368@env? G12370@make-env G12372@env-names G12374@env-labels G12376@env-itc G12378@set-env-names! G12380@set-env-labels! G12382@set-env-itc! G12384@rp G12390@G12385 G12392@G12387 G12394@G12386 G12399@interaction-env? G12401@make-interaction-env G12403@interaction-env-rib G12405@interaction-env-r G12407@interaction-env-locs G12409@set-interaction-env-rib! G12411@set-interaction-env-r! G12413@set-interaction-env-locs! G12415@rp G12417@interaction-environment-symbols G12419@environment-symbols G12421@environment? G12423@environment G12425@null-environment G12427@scheme-report-environment G12429@expand G12431@eval G12433@library-expander G12435@boot-library-expand G12437@rev-map-append G12439@build-exports G12441@make-export-subst G12443@make-export-env/macros G12445@generate-temporaries G12447@free-identifier=? G12449@bound-identifier=? G12451@extract-position-condition G12453@syntax-error G12455@extract-trace G12457@syntax-violation* G12459@syntax-violation G12461@identifier? G12463@datum->syntax G12465@syntax->datum G12467@compile-r6rs-top-level G12469@pre-compile-r6rs-top-level G12471@interaction-environment G12473@top-level-context) (begin (set! G11510@set-cons (lambda (G12474@x G12475@ls) (if (memq G12474@x G12475@ls) G12475@ls (cons G12474@x G12475@ls)))) (set! G11512@set-union (lambda (G12478@ls1 G12479@ls2) (if (null? G12478@ls1) G12479@ls2 (if (memq (car G12478@ls1) G12479@ls2) (G11512@set-union (cdr G12478@ls1) G12479@ls2) (cons (car G12478@ls1) (G11512@set-union (cdr G12478@ls1) G12479@ls2)))))) (set! G11517@top-mark* '(top)) (set! G11519@top-marked? (lambda (G12482@m*) (memq 'top G12482@m*))) (set! G11521@gen-lexical (lambda (G12484@sym) (if (symbol? G12484@sym) (gensym G12484@sym) (if (G11591@stx? G12484@sym) (G11521@gen-lexical (G11649@id->sym G12484@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G12484@sym))))) (set! G11523@gen-global (lambda (G12486@x) (G11521@gen-lexical G12486@x))) (set! G11525@gen-label (lambda (G12488@_) (gensym))) (set! G11527@gen-top-level-label (lambda (G12490@id G12491@rib) ((lambda (G12495@find) (begin (set! G12495@find (lambda (G12506@sym G12507@mark* G12508@sym* G12509@mark** G12510@label*) (if (pair? G12508@sym*) (begin '#f (if (if (eq? G12506@sym (car G12508@sym*)) (begin '#f (G11651@same-marks? G12507@mark* (car G12509@mark**))) '#f) (car G12510@label*) (G12495@find G12506@sym G12507@mark* (cdr G12508@sym*) (cdr G12509@mark**) (cdr G12510@label*)))) '#f))) ((lambda (G12496@sym G12497@mark*) ((lambda (G12500@sym*) ((lambda (G12502@t) (if G12502@t ((lambda (G12504@label) (if (G11133@G10772@imported-label->binding G12504@label) (gensym) G12504@label)) G12502@t) (gensym))) (if (memq G12496@sym (G11550@rib-sym* G12491@rib)) (begin '#f (G12495@find G12496@sym G12497@mark* G12500@sym* (G11552@rib-mark** G12491@rib) (G11554@rib-label* G12491@rib))) '#f))) (G11550@rib-sym* G12491@rib))) (G11649@id->sym G12490@id) (G11597@stx-mark* G12490@id)))) '#f))) (set! G11529@gen-define-label+loc (lambda (G12516@id G12517@rib) ((lambda (G12520@t) (if G12520@t ((lambda (G12522@env) ((lambda (G12524@label G12525@locs) (values G12524@label ((lambda (G12528@t) (if G12528@t (cdr G12528@t) ((lambda (G12530@loc) (begin (G12413@set-interaction-env-locs! G12522@env (cons (cons G12524@label G12530@loc) G12525@locs)) G12530@loc)) (G11521@gen-lexical G12516@id)))) (assq G12524@label G12525@locs)))) (G11527@gen-top-level-label G12516@id G12517@rib) (G12407@interaction-env-locs G12522@env))) G12520@t) (values (gensym) (G11521@gen-lexical G12516@id)))) (G12473@top-level-context)))) (set! G11531@gen-define-label (lambda (G12532@id G12533@rib) (if (G12473@top-level-context) (G11527@gen-top-level-label G12532@id G12533@rib) (gensym)))) (set! G11537@G11532 (make-record-type-descriptor 'rib '#f 'G11535 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! G11539@G11534 '#f) (set! G11541@G11533 (make-record-constructor-descriptor G11537@G11532 '#f G11539@G11534)) (set! G11546@rib? (record-predicate G11537@G11532)) (set! G11548@make-rib (record-constructor G11541@G11533)) (set! G11550@rib-sym* (record-accessor G11537@G11532 '0)) (set! G11552@rib-mark** (record-accessor G11537@G11532 '1)) (set! G11554@rib-label* (record-accessor G11537@G11532 '2)) (set! G11556@rib-sealed/freq (record-accessor G11537@G11532 '3)) (set! G11558@set-rib-sym*! (record-mutator G11537@G11532 '0)) (set! G11560@set-rib-mark**! (record-mutator G11537@G11532 '1)) (set! G11562@set-rib-label*! (record-mutator G11537@G11532 '2)) (set! G11564@set-rib-sealed/freq! (record-mutator G11537@G11532 '3)) (set! G11566@make-empty-rib (lambda () (G11548@make-rib '() '() '() '#f))) (set! G11568@extend-rib! (lambda (G12536@rib G12537@id G12538@label) ((lambda (G12543@find) (begin (set! G12543@find (lambda (G12554@sym G12555@mark* G12556@sym* G12557@mark** G12558@label*) (if (pair? G12556@sym*) (begin '#f (if (if (eq? G12554@sym (car G12556@sym*)) (begin '#f (G11651@same-marks? G12555@mark* (car G12557@mark**))) '#f) G12558@label* (G12543@find G12554@sym G12555@mark* (cdr G12556@sym*) (cdr G12557@mark**) (cdr G12558@label*)))) '#f))) (begin (if (G11556@rib-sealed/freq G12536@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G12536@rib) (void)) ((lambda (G12544@sym G12545@mark*) ((lambda (G12548@sym*) ((lambda (G12550@t) (if G12550@t ((lambda (G12552@p) (if (eq? G12538@label (car G12552@p)) (void) (if (G12473@top-level-context) (set-car! G12552@p G12538@label) (G12459@syntax-violation '#f '"cannot redefine" G12537@id)))) G12550@t) (begin (G11558@set-rib-sym*! G12536@rib (cons G12544@sym G12548@sym*)) (G11560@set-rib-mark**! G12536@rib (cons G12545@mark* (G11552@rib-mark** G12536@rib))) (G11562@set-rib-label*! G12536@rib (cons G12538@label (G11554@rib-label* G12536@rib)))))) (if (memq G12544@sym (G11550@rib-sym* G12536@rib)) (begin '#f (G12543@find G12544@sym G12545@mark* G12548@sym* (G11552@rib-mark** G12536@rib) (G11554@rib-label* G12536@rib))) '#f))) (G11550@rib-sym* G12536@rib))) (G11649@id->sym G12537@id) (G11597@stx-mark* G12537@id))))) '#f))) (set! G11570@make-rib-map (lambda (G12564@sym*) ((lambda (G12566@ht) ((letrec ((G12568@f (lambda (G12570@i G12571@sym*) (if (null? G12571@sym*) G12566@ht (begin (hashtable-update! G12566@ht (car G12571@sym*) (lambda (G12574@x) (cons G12570@i G12574@x)) '()) (G12568@f (+ G12570@i '1) (cdr G12571@sym*))))))) G12568@f) '0 G12564@sym*)) (make-eq-hashtable)))) (set! G11572@seal-rib! (lambda (G12576@rib) ((lambda (G12578@sym*) (if (null? G12578@sym*) (void) (begin (G11558@set-rib-sym*! G12576@rib (list->vector G12578@sym*)) (G11560@set-rib-mark**! G12576@rib (list->vector (G11552@rib-mark** G12576@rib))) (G11562@set-rib-label*! G12576@rib (list->vector (G11554@rib-label* G12576@rib))) (G11564@set-rib-sealed/freq! G12576@rib (G11570@make-rib-map G12578@sym*))))) (G11550@rib-sym* G12576@rib)))) (set! G11574@unseal-rib! (lambda (G12580@rib) (if (G11556@rib-sealed/freq G12580@rib) (begin (G11564@set-rib-sealed/freq! G12580@rib '#f) (G11558@set-rib-sym*! G12580@rib (vector->list (G11550@rib-sym* G12580@rib))) (G11560@set-rib-mark**! G12580@rib (vector->list (G11552@rib-mark** G12580@rib))) (G11562@set-rib-label*! G12580@rib (vector->list (G11554@rib-label* G12580@rib)))) (void)))) (set! G11576@make-full-rib (lambda (G12582@id* G12583@label*) ((lambda (G12586@r) (begin (G11572@seal-rib! G12586@r) G12586@r)) (G11548@make-rib (map G11649@id->sym G12582@id*) (map G11597@stx-mark* G12582@id*) G12583@label* '#f)))) (set! G11582@G11577 (make-record-type-descriptor 'stx '#f 'G11580 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G11584@G11579 '#f) (set! G11586@G11578 (make-record-constructor-descriptor G11582@G11577 '#f G11584@G11579)) (set! G11591@stx? (record-predicate G11582@G11577)) (set! G11593@make-stx (record-constructor G11586@G11578)) (set! G11595@stx-expr (record-accessor G11582@G11577 '0)) (set! G11597@stx-mark* (record-accessor G11582@G11577 '1)) (set! G11599@stx-subst* (record-accessor G11582@G11577 '2)) (set! G11601@stx-ae* (record-accessor G11582@G11577 '3)) (set! G11603@set-stx-expr! (record-mutator G11582@G11577 '0)) (set! G11605@set-stx-mark*! (record-mutator G11582@G11577 '1)) (set! G11607@set-stx-subst*! (record-mutator G11582@G11577 '2)) (set! G11609@set-stx-ae*! (record-mutator G11582@G11577 '3)) (set! G11611@rp (G10460@G10252@make-record-printer 'stx (lambda (G12588@x G12589@p) (begin (display '"#<syntax " G12589@p) (write (G11669@stx->datum G12588@x) G12589@p) ((lambda (G12592@expr) (if (G10455@G10242@annotation? G12592@expr) ((lambda (G12594@src) (if (pair? G12594@src) (begin (display '" [" G12589@p) (display (cdr G12594@src) G12589@p) (display '" of " G12589@p) (display (car G12594@src) G12589@p) (display '"]" G12589@p)) (void))) (G10456@G10244@annotation-source G12592@expr)) (void))) (G11595@stx-expr G12588@x)) (display '">" G12589@p))))) (set! G11613@datum->stx (lambda (G12596@id G12597@datum) (G11593@make-stx G12597@datum (G11597@stx-mark* G12596@id) (G11599@stx-subst* G12596@id) (G11601@stx-ae* G12596@id)))) (set! G11615@gen-mark (lambda () (string '#\m))) (set! G11617@anti-mark '#f) (set! G11619@anti-mark? not) (set! G11621@join-wraps (lambda (G12600@m1* G12601@s1* G12602@ae1* G12603@e) ((lambda (G12609@cancel) (begin (set! G12609@cancel (lambda (G12616@ls1 G12617@ls2) ((letrec ((G12620@f (lambda (G12622@x G12623@ls1) (if (null? G12623@ls1) (cdr G12617@ls2) (cons G12622@x (G12620@f (car G12623@ls1) (cdr G12623@ls1))))))) G12620@f) (car G12616@ls1) (cdr G12616@ls1)))) ((lambda (G12610@m2* G12611@s2* G12612@ae2*) (if (if (not (null? G12600@m1*)) (if (not (null? G12610@m2*)) (begin '#f (G11619@anti-mark? (car G12610@m2*))) '#f) '#f) (values (G12609@cancel G12600@m1* G12610@m2*) (G12609@cancel G12601@s1* G12611@s2*) (G12609@cancel G12602@ae1* G12612@ae2*)) (values (append G12600@m1* G12610@m2*) (append G12601@s1* G12611@s2*) (append G12602@ae1* G12612@ae2*)))) (G11597@stx-mark* G12603@e) (G11599@stx-subst* G12603@e) (G11601@stx-ae* G12603@e)))) '#f))) (set! G11623@mkstx (lambda (G12626@e G12627@m* G12628@s* G12629@ae*) (if (G11591@stx? G12626@e) (call-with-values (lambda () (G11621@join-wraps G12627@m* G12628@s* G12629@ae* G12626@e)) (lambda (G12637@G12634 G12638@G12635 G12639@G12636) ((lambda (G12643@ae* G12644@s* G12645@m*) (G11593@make-stx (G11595@stx-expr G12626@e) G12645@m* G12644@s* G12643@ae*)) G12639@G12636 G12638@G12635 G12637@G12634))) (G11593@make-stx G12626@e G12627@m* G12628@s* G12629@ae*)))) (set! G11625@add-mark (lambda (G12649@m G12650@e G12651@ae) (G11623@mkstx G12650@e (list G12649@m) '(shift) (list G12651@ae)))) (set! G11627@add-subst (lambda (G12655@subst G12656@e) (G11623@mkstx G12656@e '() (list G12655@subst) '()))) (set! G11629@syntax-kind? (lambda (G12659@x G12660@p?) (if (G11591@stx? G12659@x) (G11629@syntax-kind? (G11595@stx-expr G12659@x) G12660@p?) (if (G10455@G10242@annotation? G12659@x) (G11629@syntax-kind? (G10457@G10246@annotation-expression G12659@x) G12660@p?) (G12660@p? G12659@x))))) (set! G11631@syntax-vector->list (lambda (G12663@x) (if (G11591@stx? G12663@x) ((lambda (G12665@ls G12666@m* G12667@s* G12668@ae*) (map (lambda (G12673@x) (G11623@mkstx G12673@x G12666@m* G12667@s* G12668@ae*)) G12665@ls)) (G11631@syntax-vector->list (G11595@stx-expr G12663@x)) (G11597@stx-mark* G12663@x) (G11599@stx-subst* G12663@x) (G11601@stx-ae* G12663@x)) (if (G10455@G10242@annotation? G12663@x) (G11631@syntax-vector->list (G10457@G10246@annotation-expression G12663@x)) (if (vector? G12663@x) (vector->list G12663@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G12663@x)))))) (set! G11633@syntax-pair? (lambda (G12675@x) (G11629@syntax-kind? G12675@x pair?))) (set! G11635@syntax-vector? (lambda (G12677@x) (G11629@syntax-kind? G12677@x vector?))) (set! G11637@syntax-null? (lambda (G12679@x) (G11629@syntax-kind? G12679@x null?))) (set! G11639@syntax-list? (lambda (G12681@x) ((lambda (G12683@t) (if G12683@t G12683@t (begin '#f (if (G11633@syntax-pair? G12681@x) (begin '#f (G11639@syntax-list? (G11643@syntax-cdr G12681@x))) '#f)))) (G11637@syntax-null? G12681@x)))) (set! G11641@syntax-car (lambda (G12685@x) (if (G11591@stx? G12685@x) (G11623@mkstx (G11641@syntax-car (G11595@stx-expr G12685@x)) (G11597@stx-mark* G12685@x) (G11599@stx-subst* G12685@x) (G11601@stx-ae* G12685@x)) (if (G10455@G10242@annotation? G12685@x) (G11641@syntax-car (G10457@G10246@annotation-expression G12685@x)) (if (pair? G12685@x) (car G12685@x) (assertion-violation 'syntax-car '"BUG: not a pair" G12685@x)))))) (set! G11643@syntax-cdr (lambda (G12687@x) (if (G11591@stx? G12687@x) (G11623@mkstx (G11643@syntax-cdr (G11595@stx-expr G12687@x)) (G11597@stx-mark* G12687@x) (G11599@stx-subst* G12687@x) (G11601@stx-ae* G12687@x)) (if (G10455@G10242@annotation? G12687@x) (G11643@syntax-cdr (G10457@G10246@annotation-expression G12687@x)) (if (pair? G12687@x) (cdr G12687@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G12687@x)))))) (set! G11645@syntax->list (lambda (G12689@x) (if (G11633@syntax-pair? G12689@x) (cons (G11641@syntax-car G12689@x) (G11645@syntax->list (G11643@syntax-cdr G12689@x))) (if (G11637@syntax-null? G12689@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G12689@x))))) (set! G11647@id? (lambda (G12691@x) (if (G11591@stx? G12691@x) (begin '#f ((lambda (G12693@expr) (symbol? (if (G10455@G10242@annotation? G12693@expr) (G10454@G10240@annotation-stripped G12693@expr) G12693@expr))) (G11595@stx-expr G12691@x))) '#f))) (set! G11649@id->sym (lambda (G12695@x) (begin (if (G11591@stx? G12695@x) (void) (error 'id->sym '"BUG in ikarus: not an id" G12695@x)) ((lambda (G12697@expr) ((lambda (G12699@sym) (if (symbol? G12699@sym) G12699@sym (error 'id->sym '"BUG in ikarus: not an id" G12695@x))) (if (G10455@G10242@annotation? G12697@expr) (G10454@G10240@annotation-stripped G12697@expr) G12697@expr))) (G11595@stx-expr G12695@x))))) (set! G11651@same-marks? (lambda (G12701@x G12702@y) ((lambda (G12705@t) (if G12705@t G12705@t (begin '#f (if (pair? G12701@x) (if (pair? G12702@y) (if (eq? (car G12701@x) (car G12702@y)) (begin '#f (G11651@same-marks? (cdr G12701@x) (cdr G12702@y))) '#f) '#f) '#f)))) (if (null? G12701@x) (begin '#f (null? G12702@y)) '#f)))) (set! G11653@bound-id=? (lambda (G12707@x G12708@y) (if (eq? (G11649@id->sym G12707@x) (G11649@id->sym G12708@y)) (begin '#f (G11651@same-marks? (G11597@stx-mark* G12707@x) (G11597@stx-mark* G12708@y))) '#f))) (set! G11655@free-id=? (lambda (G12711@i G12712@j) ((lambda (G12715@t0 G12716@t1) (if ((lambda (G12719@t) (if G12719@t G12719@t (begin '#f G12716@t1))) G12715@t0) (eq? G12715@t0 G12716@t1) (eq? (G11649@id->sym G12711@i) (G11649@id->sym G12712@j)))) (G11675@id->real-label G12711@i) (G11675@id->real-label G12712@j)))) (set! G11657@valid-bound-ids? (lambda (G12721@id*) (if (for-all G11647@id? G12721@id*) (begin '#f (G11659@distinct-bound-ids? G12721@id*)) '#f))) (set! G11659@distinct-bound-ids? (lambda (G12723@id*) ((lambda (G12725@t) (if G12725@t G12725@t (begin '#f (if (not (G11661@bound-id-member? (car G12723@id*) (cdr G12723@id*))) (begin '#f (G11659@distinct-bound-ids? (cdr G12723@id*))) '#f)))) (null? G12723@id*)))) (set! G11661@bound-id-member? (lambda (G12727@id G12728@id*) (if (pair? G12728@id*) (begin '#f ((lambda (G12731@t) (if G12731@t G12731@t (begin '#f (G11661@bound-id-member? G12727@id (cdr G12728@id*))))) (G11653@bound-id=? G12727@id (car G12728@id*)))) '#f))) (set! G11663@self-evaluating? (lambda (G12733@x) ((lambda (G12735@t) (if G12735@t G12735@t ((lambda (G12737@t) (if G12737@t G12737@t ((lambda (G12739@t) (if G12739@t G12739@t ((lambda (G12741@t) (if G12741@t G12741@t (begin '#f (bytevector? G12733@x)))) (boolean? G12733@x)))) (char? G12733@x)))) (string? G12733@x)))) (number? G12733@x)))) (set! G11665@strip-annotations (lambda (G12743@x) (if (pair? G12743@x) (cons (G11665@strip-annotations (car G12743@x)) (G11665@strip-annotations (cdr G12743@x))) (if (vector? G12743@x) (vector-map G11665@strip-annotations G12743@x) (if (G10455@G10242@annotation? G12743@x) (G10454@G10240@annotation-stripped G12743@x) G12743@x))))) (set! G11667@strip (lambda (G12745@x G12746@m*) (if (G11519@top-marked? G12746@m*) (if ((lambda (G12749@t) (if G12749@t G12749@t ((lambda (G12751@t) (if G12751@t G12751@t (begin '#f (if (vector? G12745@x) (if (> (vector-length G12745@x) '0) (begin '#f (G10455@G10242@annotation? (vector-ref G12745@x '0))) '#f) '#f)))) (if (pair? G12745@x) (begin '#f (G10455@G10242@annotation? (car G12745@x))) '#f)))) (G10455@G10242@annotation? G12745@x)) (G11665@strip-annotations G12745@x) G12745@x) ((letrec ((G12753@f (lambda (G12755@x) (if (G11591@stx? G12755@x) (G11667@strip (G11595@stx-expr G12755@x) (G11597@stx-mark* G12755@x)) (if (G10455@G10242@annotation? G12755@x) (G10454@G10240@annotation-stripped G12755@x) (if (pair? G12755@x) ((lambda (G12757@a G12758@d) (if (if (eq? G12757@a (car G12755@x)) (begin '#f (eq? G12758@d (cdr G12755@x))) '#f) G12755@x (cons G12757@a G12758@d))) (G12753@f (car G12755@x)) (G12753@f (cdr G12755@x))) (if (vector? G12755@x) ((lambda (G12761@old) ((lambda (G12763@new) (if (for-all eq? G12761@old G12763@new) G12755@x (list->vector G12763@new))) (map G12753@f G12761@old))) (vector->list G12755@x)) G12755@x))))))) G12753@f) G12745@x)))) (set! G11669@stx->datum (lambda (G12765@x) (G11667@strip G12765@x '()))) (set! G11671@same-marks*? (lambda (G12767@mark* G12768@mark** G12769@si) (if (null? G12769@si) '#f (if (G11651@same-marks? G12767@mark* (vector-ref G12768@mark** (car G12769@si))) (car G12769@si) (G11671@same-marks*? G12767@mark* G12768@mark** (cdr G12769@si)))))) (set! G11673@id->label (lambda (G12773@id) ((lambda (G12775@t) (if G12775@t G12775@t (begin '#f ((lambda (G12777@t) (if G12777@t ((lambda (G12779@env) ((lambda (G12781@rib) (call-with-values (lambda () (G11529@gen-define-label+loc G12773@id G12781@rib)) (lambda (G12785@G12783 G12786@G12784) ((lambda (G12789@loc_ G12790@lab) (begin (G11568@extend-rib! G12781@rib G12773@id G12790@lab) G12790@lab)) G12786@G12784 G12785@G12783)))) (G12403@interaction-env-rib G12779@env))) G12777@t) '#f)) (G12473@top-level-context))))) (G11675@id->real-label G12773@id)))) (set! G11675@id->real-label (lambda (G12793@id) ((lambda (G12795@sym) ((letrec ((G12797@search (lambda (G12799@subst* G12800@mark*) (if (null? G12799@subst*) '#f (if (eq? (car G12799@subst*) 'shift) (G12797@search (cdr G12799@subst*) (cdr G12800@mark*)) ((lambda (G12803@rib) ((lambda (G12805@t) (if G12805@t ((lambda (G12807@ht) ((lambda (G12809@si) ((lambda (G12811@i) (if G12811@i (vector-ref (G11554@rib-label* G12803@rib) G12811@i) (G12797@search (cdr G12799@subst*) G12800@mark*))) (if G12809@si (begin '#f (G11671@same-marks*? G12800@mark* (G11552@rib-mark** G12803@rib) (reverse G12809@si))) '#f))) (hashtable-ref G12807@ht G12795@sym '#f))) G12805@t) ((letrec ((G12813@f (lambda (G12815@sym* G12816@mark** G12817@label*) (if (null? G12815@sym*) (G12797@search (cdr G12799@subst*) G12800@mark*) (if (if (eq? (car G12815@sym*) G12795@sym) (begin '#f (G11651@same-marks? (car G12816@mark**) G12800@mark*)) '#f) (car G12817@label*) (G12813@f (cdr G12815@sym*) (cdr G12816@mark**) (cdr G12817@label*))))))) G12813@f) (G11550@rib-sym* G12803@rib) (G11552@rib-mark** G12803@rib) (G11554@rib-label* G12803@rib)))) (G11556@rib-sealed/freq G12803@rib))) (car G12799@subst*))))))) G12797@search) (G11599@stx-subst* G12793@id) (G11597@stx-mark* G12793@id))) (G11649@id->sym G12793@id)))) (set! G11677@label->binding (lambda (G12821@x G12822@r) ((lambda (G12825@t) (if G12825@t ((lambda (G12827@b) (if (if (pair? G12827@b) (begin '#f (eq? (car G12827@b) '$core-rtd)) '#f) (cons '$rtd (map G12152@bless (cdr G12827@b))) (if (if (pair? G12827@b) (begin '#f (eq? (car G12827@b) 'global-rtd)) '#f) ((lambda (G12829@lib G12830@loc) (cons '$rtd (symbol-value G12830@loc))) (cadr G12827@b) (cddr G12827@b)) G12827@b))) G12825@t) ((lambda (G12833@t) (if G12833@t (cdr G12833@t) ((lambda (G12835@t) (if G12835@t ((lambda (G12837@env) ((lambda (G12839@t) (if G12839@t ((lambda (G12841@p) (cons* 'lexical (cdr G12841@p) '#f)) G12839@t) '(displaced-lexical . #f))) (assq G12821@x (G12407@interaction-env-locs G12837@env)))) G12835@t) '(displaced-lexical . #f))) (G12473@top-level-context)))) (assq G12821@x G12822@r)))) (G11133@G10772@imported-label->binding G12821@x)))) (set! G11679@make-binding cons) (set! G11681@binding-type car) (set! G11683@binding-value cdr) (set! G11685@raise-unbound-error (lambda (G12843@id) (G12457@syntax-violation* '#f '"unbound identifier" G12843@id (G19254@G19158@make-undefined-violation)))) (set! G11687@syntax-type (lambda (G12845@e G12846@r) (if (G11647@id? G12845@e) ((lambda (G12849@id) ((lambda (G12851@label) ((lambda (G12853@b) ((lambda (G12855@type) ((lambda () (begin (if G12851@label (void) (G11685@raise-unbound-error G12849@id)) ((lambda (G12857@t) (if (memv G12857@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values G12855@type (G11683@binding-value G12853@b) G12849@id) (values 'other '#f '#f))) G12855@type))))) (G11681@binding-type G12853@b))) (G11677@label->binding G12851@label G12846@r))) (G11673@id->label G12849@id))) G12845@e) (if (G11633@syntax-pair? G12845@e) ((lambda (G12858@id) (if (G11647@id? G12858@id) ((lambda (G12860@label) ((lambda (G12862@b) ((lambda (G12864@type) ((lambda () (begin (if G12860@label (void) (G11685@raise-unbound-error G12858@id)) ((lambda (G12866@t) (if (memv G12866@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values G12864@type (G11683@binding-value G12862@b) G12858@id) (values 'call '#f '#f))) G12864@type))))) (G11681@binding-type G12862@b))) (G11677@label->binding G12860@label G12846@r))) (G11673@id->label G12858@id)) (values 'call '#f '#f))) (G11641@syntax-car G12845@e)) ((lambda (G12867@d) (if (G11663@self-evaluating? G12867@d) (values 'constant G12867@d '#f) (values 'other '#f '#f))) (G11669@stx->datum G12845@e)))))) (set! G11710@sanitize-binding (lambda (G12869@x G12870@src) (if (procedure? G12869@x) (cons* 'local-macro G12869@x G12870@src) (if (if (pair? G12869@x) (if (eq? (car G12869@x) 'macro!) (begin '#f (procedure? (cdr G12869@x))) '#f) '#f) (cons* 'local-macro! (cdr G12869@x) G12870@src) (if (if (pair? G12869@x) (begin '#f (eq? (car G12869@x) '$rtd)) '#f) G12869@x (assertion-violation 'expand '"invalid transformer" G12869@x)))))) (set! G11712@make-variable-transformer (lambda (G12873@x) (if (procedure? G12873@x) (cons 'macro! G12873@x) (assertion-violation 'make-variable-transformer '"not a procedure" G12873@x)))) (set! G11714@variable-transformer? (lambda (G12875@x) (if (pair? G12875@x) (if (eq? (car G12875@x) 'macro!) (begin '#f (procedure? (cdr G12875@x))) '#f) '#f))) (set! G11716@variable-transformer-procedure (lambda (G12877@x) (if (G11714@variable-transformer? G12877@x) (cdr G12877@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G12877@x)))) (set! G11718@make-eval-transformer (lambda (G12879@x) (G11710@sanitize-binding (eval-core (G10562@G10475@expanded->core G12879@x)) G12879@x))) (set! G12106@parse-define (lambda (G12881@x) ((lambda (G12883@t) ((lambda (G12885@ls/false) (if (if G12885@ls/false (begin '#f (apply (lambda (G12887@id G12888@fmls G12889@b G12890@b*) (G11647@id? G12887@id)) G12885@ls/false)) '#f) (apply (lambda (G12895@id G12896@fmls G12897@b G12898@b*) (begin (G12266@verify-formals G12896@fmls G12881@x) (values G12895@id (cons 'defun (cons G12896@fmls (cons G12897@b G12898@b*)))))) G12885@ls/false) ((lambda (G12903@t) ((lambda (G12905@ls/false) (if (if G12905@ls/false (begin '#f (apply (lambda (G12907@id G12908@val) (G11647@id? G12907@id)) G12905@ls/false)) '#f) (apply (lambda (G12911@id G12912@val) (values G12911@id (cons 'expr G12912@val))) G12905@ls/false) ((lambda (G12915@t) ((lambda (G12917@ls/false) (if (if G12917@ls/false (begin '#f (apply (lambda (G12919@id) (G11647@id? G12919@id)) G12917@ls/false)) '#f) (apply (lambda (G12921@id) (values G12921@id (cons 'expr (G12152@bless '(void))))) G12917@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G12915@t))) (G12226@syntax-dispatch G12915@t '(_ any)))) G12903@t))) (G12226@syntax-dispatch G12903@t '(_ any any)))) G12883@t))) (G12226@syntax-dispatch G12883@t '(_ (any . any) any . each-any)))) G12881@x))) (set! G12108@parse-define-syntax (lambda (G12923@x) ((lambda (G12925@t) ((lambda (G12927@ls/false) (if (if G12927@ls/false (begin '#f (apply (lambda (G12929@id G12930@val) (G11647@id? G12929@id)) G12927@ls/false)) '#f) (apply (lambda (G12933@id G12934@val) (values G12933@id G12934@val)) G12927@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G12925@t))) (G12226@syntax-dispatch G12925@t '(_ any any)))) G12923@x))) (set! G12110@scheme-stx-hashtable (make-eq-hashtable)) (set! G12112@scheme-stx (lambda (G12937@sym) ((lambda (G12939@t) (if G12939@t G12939@t (begin '#f ((lambda (G12941@subst) ((lambda (G12943@stx) ((lambda (G12945@stx) ((lambda () (begin (hashtable-set! G12110@scheme-stx-hashtable G12937@sym G12945@stx) G12945@stx)))) ((lambda (G12947@t) (if G12947@t ((lambda (G12949@x) ((lambda (G12951@name G12952@label) (G11627@add-subst (G11548@make-rib (list G12951@name) (list G11517@top-mark*) (list G12952@label) '#f) G12943@stx)) (car G12949@x) (cdr G12949@x))) G12947@t) G12943@stx)) (assq G12937@sym G12941@subst)))) (G11593@make-stx G12937@sym G11517@top-mark* '() '()))) (G11091@G10688@library-subst (G11127@G10760@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G12110@scheme-stx-hashtable G12937@sym '#f)))) (set! G12114@lexical-var car) (set! G12116@lexical-mutable? cdr) (set! G12118@set-lexical-mutable! set-cdr!) (set! G12120@add-lexical (lambda (G12955@lab G12956@lex G12957@r) (cons (cons* G12955@lab 'lexical G12956@lex '#f) G12957@r))) (set! G12122@add-lexicals (lambda (G12961@lab* G12962@lex* G12963@r) (if (null? G12961@lab*) G12963@r (G12122@add-lexicals (cdr G12961@lab*) (cdr G12962@lex*) (G12120@add-lexical (car G12961@lab*) (car G12962@lex*) G12963@r))))) (set! G12124@letrec-helper (lambda (G12967@e G12968@r G12969@mr G12970@build) ((lambda (G12975@t) ((lambda (G12977@ls/false) (if G12977@ls/false (apply (lambda (G12979@lhs* G12980@rhs* G12981@b G12982@b*) (if (not (G11657@valid-bound-ids? G12979@lhs*)) (G12156@invalid-fmls-error G12967@e G12979@lhs*) ((lambda (G12987@lex* G12988@lab*) ((lambda (G12991@rib G12992@r) ((lambda (G12995@body G12996@rhs*) (G12970@build '#f G12987@lex* G12996@rhs* G12995@body)) (G12284@chi-internal (G11627@add-subst G12991@rib (cons G12981@b G12982@b*)) G12992@r G12969@mr) (G12258@chi-expr* (map (lambda (G12999@x) (G11627@add-subst G12991@rib G12999@x)) G12980@rhs*) G12992@r G12969@mr))) (G11576@make-full-rib G12979@lhs* G12988@lab*) (G12122@add-lexicals G12988@lab* G12987@lex* G12968@r))) (map G11521@gen-lexical G12979@lhs*) (map G11525@gen-label G12979@lhs*)))) G12977@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G12975@t))) (G12226@syntax-dispatch G12975@t '(_ #(each (any any)) any . each-any)))) G12967@e))) (set! G12126@letrec-transformer (lambda (G13001@e G13002@r G13003@mr) (G12124@letrec-helper G13001@e G13002@r G13003@mr G11494@G11353@build-letrec))) (set! G12128@letrec*-transformer (lambda (G13007@e G13008@r G13009@mr) (G12124@letrec-helper G13007@e G13008@r G13009@mr G11495@G11355@build-letrec*))) (set! G12130@fluid-let-syntax-transformer (lambda (G13013@e G13014@r G13015@mr) ((lambda (G13020@lookup) (begin (set! G13020@lookup (lambda (G13039@x) ((lambda (G13041@t) (if G13041@t G13041@t (begin '#f (G12459@syntax-violation '#f '"unbound identifier" G13013@e G13039@x)))) (G11673@id->label G13039@x)))) ((lambda (G13021@t) ((lambda (G13023@ls/false) (if G13023@ls/false (apply (lambda (G13025@lhs* G13026@rhs* G13027@b G13028@b*) (if (not (G11657@valid-bound-ids? G13025@lhs*)) (G12156@invalid-fmls-error G13013@e G13025@lhs*) ((lambda (G13033@lab* G13034@rhs*) (G12284@chi-internal (cons G13027@b G13028@b*) (append (map cons G13033@lab* G13034@rhs*) G13014@r) (append (map cons G13033@lab* G13034@rhs*) G13015@mr))) (map G13020@lookup G13025@lhs*) (map (lambda (G13037@x) (G11718@make-eval-transformer (G12323@expand-transformer G13037@x G13015@mr))) G13026@rhs*)))) G13023@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13021@t))) (G12226@syntax-dispatch G13021@t '(_ #(each (any any)) any . each-any)))) G13013@e))) '#f))) (set! G12132@type-descriptor-transformer (lambda (G13043@e G13044@r G13045@mr) ((lambda (G13049@t) ((lambda (G13051@ls/false) (if (if G13051@ls/false (begin '#f (apply (lambda (G13053@id) (G11647@id? G13053@id)) G13051@ls/false)) '#f) (apply (lambda (G13055@id) ((lambda (G13057@lab) ((lambda (G13059@b) ((lambda (G13061@type) ((lambda () (begin (if G13057@lab (void) (G11685@raise-unbound-error G13055@id)) (if (if (eq? G13061@type '$rtd) (begin '#f (not (list? (G11683@binding-value G13059@b)))) '#f) (void) (G12459@syntax-violation '#f '"not a record type" G13043@e)) (list 'quote (G11683@binding-value G13059@b)))))) (G11681@binding-type G13059@b))) (G11677@label->binding G13057@lab G13044@r))) (G11673@id->label G13055@id))) G13051@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13049@t))) (G12226@syntax-dispatch G13049@t '(_ any)))) G13043@e))) (set! G12134@record-type-descriptor-transformer (lambda (G13063@e G13064@r G13065@mr) ((lambda (G13069@t) ((lambda (G13071@ls/false) (if (if G13071@ls/false (begin '#f (apply (lambda (G13073@id) (G11647@id? G13073@id)) G13071@ls/false)) '#f) (apply (lambda (G13075@id) ((lambda (G13077@lab) ((lambda (G13079@b) ((lambda (G13081@type) ((lambda () (begin (if G13077@lab (void) (G11685@raise-unbound-error G13075@id)) (if (if (eq? G13081@type '$rtd) (begin '#f (list? (G11683@binding-value G13079@b))) '#f) (void) (G12459@syntax-violation '#f '"not a record type" G13063@e)) (G12262@chi-expr (car (G11683@binding-value G13079@b)) G13064@r G13065@mr))))) (G11681@binding-type G13079@b))) (G11677@label->binding G13077@lab G13064@r))) (G11673@id->label G13075@id))) G13071@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13069@t))) (G12226@syntax-dispatch G13069@t '(_ any)))) G13063@e))) (set! G12136@record-constructor-descriptor-transformer (lambda (G13083@e G13084@r G13085@mr) ((lambda (G13089@t) ((lambda (G13091@ls/false) (if (if G13091@ls/false (begin '#f (apply (lambda (G13093@id) (G11647@id? G13093@id)) G13091@ls/false)) '#f) (apply (lambda (G13095@id) ((lambda (G13097@lab) ((lambda (G13099@b) ((lambda (G13101@type) ((lambda () (begin (if G13097@lab (void) (G11685@raise-unbound-error G13095@id)) (if (if (eq? G13101@type '$rtd) (begin '#f (list? (G11683@binding-value G13099@b))) '#f) (void) (G12459@syntax-violation '#f '"invalid type" G13083@e)) (G12262@chi-expr (cadr (G11683@binding-value G13099@b)) G13084@r G13085@mr))))) (G11681@binding-type G13099@b))) (G11677@label->binding G13097@lab G13084@r))) (G11673@id->label G13095@id))) G13091@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13089@t))) (G12226@syntax-dispatch G13089@t '(_ any)))) G13083@e))) (set! G12138@when-transformer (lambda (G13103@e G13104@r G13105@mr) ((lambda (G13109@t) ((lambda (G13111@ls/false) (if G13111@ls/false (apply (lambda (G13113@test G13114@e G13115@e*) (list 'if (G12262@chi-expr G13113@test G13104@r G13105@mr) (G11492@G11349@build-sequence '#f (G12258@chi-expr* (cons G13114@e G13115@e*) G13104@r G13105@mr)) (G11493@G11351@build-void))) G13111@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13109@t))) (G12226@syntax-dispatch G13109@t '(_ any any . each-any)))) G13103@e))) (set! G12140@unless-transformer (lambda (G13119@e G13120@r G13121@mr) ((lambda (G13125@t) ((lambda (G13127@ls/false) (if G13127@ls/false (apply (lambda (G13129@test G13130@e G13131@e*) (list 'if (G12262@chi-expr G13129@test G13120@r G13121@mr) (G11493@G11351@build-void) (G11492@G11349@build-sequence '#f (G12258@chi-expr* (cons G13130@e G13131@e*) G13120@r G13121@mr)))) G13127@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13125@t))) (G12226@syntax-dispatch G13125@t '(_ any any . each-any)))) G13119@e))) (set! G12142@if-transformer (lambda (G13135@e G13136@r G13137@mr) ((lambda (G13141@t) ((lambda (G13143@ls/false) (if G13143@ls/false (apply (lambda (G13145@e0 G13146@e1 G13147@e2) (list 'if (G12262@chi-expr G13145@e0 G13136@r G13137@mr) (G12262@chi-expr G13146@e1 G13136@r G13137@mr) (G12262@chi-expr G13147@e2 G13136@r G13137@mr))) G13143@ls/false) ((lambda (G13151@t) ((lambda (G13153@ls/false) (if G13153@ls/false (apply (lambda (G13155@e0 G13156@e1) (list 'if (G12262@chi-expr G13155@e0 G13136@r G13137@mr) (G12262@chi-expr G13156@e1 G13136@r G13137@mr) (G11493@G11351@build-void))) G13153@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13151@t))) (G12226@syntax-dispatch G13151@t '(_ any any)))) G13141@t))) (G12226@syntax-dispatch G13141@t '(_ any any any)))) G13135@e))) (set! G12144@case-transformer (lambda (G13159@e G13160@r G13161@mr) ((lambda (G13166@build-one G13168@build-last) (begin (set! G13166@build-one (lambda (G13223@t G13224@cls G13225@rest) ((lambda (G13229@t) ((lambda (G13231@ls/false) (if G13231@ls/false (apply (lambda (G13233@d* G13234@e G13235@e*) (list 'if ((lambda (G13239@data) (if (= '1 (length G13239@data)) (list '(primitive eqv?) G13223@t (list 'quote (car G13239@data))) (list '(primitive memv) G13223@t (list 'quote G13239@data)))) (G11669@stx->datum G13233@d*)) (G11492@G11349@build-sequence '#f (G12258@chi-expr* (cons G13234@e G13235@e*) G13160@r G13161@mr)) G13225@rest)) G13231@ls/false) ((lambda (G13241@t) ((lambda (G13243@ls/false) (if G13243@ls/false (apply (lambda (G13245@else) (G12459@syntax-violation '#f '"invalid syntax" G13159@e)) G13243@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13241@t))) (G12226@syntax-dispatch G13241@t 'any))) G13229@t))) (G12226@syntax-dispatch G13229@t '(each-any any . each-any)))) G13224@cls))) (set! G13168@build-last (lambda (G13193@t G13194@cls) ((lambda (G13197@t) ((lambda (G13199@ls/false) (if G13199@ls/false (apply (lambda (G13201@d* G13202@e G13203@e*) (G13166@build-one G13193@t G13194@cls (G11493@G11351@build-void))) G13199@ls/false) ((lambda (G13207@t) ((lambda (G13209@ls/false) (if G13209@ls/false (apply (lambda (G13211@else-kwd G13212@x G13213@x*) (if (if (G11647@id? G13211@else-kwd) (begin '#f (G11655@free-id=? G13211@else-kwd (G12112@scheme-stx 'else))) '#f) (G11492@G11349@build-sequence '#f (G12258@chi-expr* (cons G13212@x G13213@x*) G13160@r G13161@mr)) (G12459@syntax-violation '#f '"invalid syntax" G13159@e))) G13209@ls/false) ((lambda (G13217@t) ((lambda (G13219@ls/false) (if G13219@ls/false (apply (lambda (G13221@else) (G12459@syntax-violation '#f '"invalid syntax" G13159@e)) G13219@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13217@t))) (G12226@syntax-dispatch G13217@t 'any))) G13207@t))) (G12226@syntax-dispatch G13207@t '(any any . each-any)))) G13197@t))) (G12226@syntax-dispatch G13197@t '(each-any any . each-any)))) G13194@cls))) ((lambda (G13169@t) ((lambda (G13171@ls/false) (if G13171@ls/false (apply (lambda (G13173@expr) (G11492@G11349@build-sequence '#f (list (G12262@chi-expr G13173@expr G13160@r G13161@mr) (G11493@G11351@build-void)))) G13171@ls/false) ((lambda (G13175@t) ((lambda (G13177@ls/false) (if G13177@ls/false (apply (lambda (G13179@expr G13180@cls G13181@cls*) ((lambda (G13185@t) (G11491@G11277@build-let '#f (list G13185@t) (list (G12262@chi-expr G13179@expr G13160@r G13161@mr)) ((letrec ((G13187@f (lambda (G13189@cls G13190@cls*) (if (null? G13190@cls*) (G13168@build-last G13185@t G13189@cls) (G13166@build-one G13185@t G13189@cls (G13187@f (car G13190@cls*) (cdr G13190@cls*))))))) G13187@f) G13180@cls G13181@cls*))) (G11521@gen-lexical 't))) G13177@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13175@t))) (G12226@syntax-dispatch G13175@t '(_ any any . each-any)))) G13169@t))) (G12226@syntax-dispatch G13169@t '(_ any)))) G13159@e))) '#f '#f))) (set! G12146@quote-transformer (lambda (G13247@e G13248@r G13249@mr) ((lambda (G13253@t) ((lambda (G13255@ls/false) (if G13255@ls/false (apply (lambda (G13257@datum) (list 'quote (G11669@stx->datum G13257@datum))) G13255@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13253@t))) (G12226@syntax-dispatch G13253@t '(_ any)))) G13247@e))) (set! G12148@case-lambda-transformer (lambda (G13259@e G13260@r G13261@mr) ((lambda (G13265@t) ((lambda (G13267@ls/false) (if G13267@ls/false (apply (lambda (G13269@fmls* G13270@b* G13271@b**) (call-with-values (lambda () (G12270@chi-lambda-clause* G13259@e G13269@fmls* (map cons G13270@b* G13271@b**) G13260@r G13261@mr)) (lambda (G13277@G13275 G13278@G13276) ((lambda (G13281@body* G13282@fmls*) (G11490@G11275@build-case-lambda '#f G13282@fmls* G13281@body*)) G13278@G13276 G13277@G13275)))) G13267@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13265@t))) (G12226@syntax-dispatch G13265@t '(_ . #(each (any any . each-any)))))) G13259@e))) (set! G12150@lambda-transformer (lambda (G13285@e G13286@r G13287@mr) ((lambda (G13291@t) ((lambda (G13293@ls/false) (if G13293@ls/false (apply (lambda (G13295@fmls G13296@b G13297@b*) (call-with-values (lambda () (G12268@chi-lambda-clause G13285@e G13295@fmls (cons G13296@b G13297@b*) G13286@r G13287@mr)) (lambda (G13303@G13301 G13304@G13302) ((lambda (G13307@body G13308@fmls) (G11489@G11273@build-lambda '#f G13308@fmls G13307@body)) G13304@G13302 G13303@G13301)))) G13293@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13291@t))) (G12226@syntax-dispatch G13291@t '(_ any any . each-any)))) G13285@e))) (set! G12152@bless (lambda (G13311@x) (G11623@mkstx ((letrec ((G13313@f (lambda (G13315@x) (if (G11591@stx? G13315@x) G13315@x (if (pair? G13315@x) (cons (G13313@f (car G13315@x)) (G13313@f (cdr G13315@x))) (if (symbol? G13315@x) (G12112@scheme-stx G13315@x) (if (vector? G13315@x) (vector-map G13313@f G13315@x) G13315@x))))))) G13313@f) G13311@x) '() '() '()))) (set! G12154@with-syntax-macro (lambda (G13317@e) ((lambda (G13319@t) ((lambda (G13321@ls/false) (if G13321@ls/false (apply (lambda (G13323@pat* G13324@expr* G13325@b G13326@b*) ((lambda (G13331@idn*) (begin (G12266@verify-formals (map car G13331@idn*) G13317@e) ((lambda (G13333@t*) (G12152@bless (list 'let (map list G13333@t* G13324@expr*) ((letrec ((G13335@f (lambda (G13337@pat* G13338@t*) (if (null? G13337@pat*) (cons 'begin (cons '#f (cons G13325@b G13326@b*))) (list 'syntax-case (car G13338@t*) '() (list (car G13337@pat*) (G13335@f (cdr G13337@pat*) (cdr G13338@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G13337@pat*)) (car G13338@t*)))))))) G13335@f) G13323@pat* G13333@t*)))) (G12445@generate-temporaries G13324@expr*)))) ((letrec ((G13341@f (lambda (G13343@pat*) (if (null? G13343@pat*) '() (call-with-values (lambda () (G12224@convert-pattern (car G13343@pat*) '())) (lambda (G13347@G13345 G13348@G13346) ((lambda (G13351@idn* G13352@pat) (append G13351@idn* (G13341@f (cdr G13343@pat*)))) G13348@G13346 G13347@G13345))))))) G13341@f) G13323@pat*))) G13321@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13319@t))) (G12226@syntax-dispatch G13319@t '(_ #(each (any any)) any . each-any)))) G13317@e))) (set! G12156@invalid-fmls-error (lambda (G13355@stx G13356@fmls) ((lambda (G13359@t) ((lambda (G13361@ls/false) (if G13361@ls/false (apply (lambda (G13363@id* G13364@last) ((letrec ((G13367@f (lambda (G13369@id*) (if (null? G13369@id*) (values) (if (not (G11647@id? (car G13369@id*))) (G12459@syntax-violation '#f '"not an identifier" G13355@stx (car G13369@id*)) (begin (G13367@f (cdr G13369@id*)) (if (G11661@bound-id-member? (car G13369@id*) (cdr G13369@id*)) (G12459@syntax-violation '#f '"duplicate binding" G13355@stx (car G13369@id*)) (void)))))))) G13367@f) (if (G11647@id? G13364@last) (cons G13364@last G13363@id*) (if (G11637@syntax-null? G13364@last) G13363@id* (G12459@syntax-violation '#f '"not an identifier" G13355@stx G13364@last))))) G13361@ls/false) ((lambda (G13371@t) ((lambda (G13373@ls/false) (if G13373@ls/false (apply (lambda () (G12459@syntax-violation '#f '"malformed binding form" G13355@stx G13356@fmls)) G13373@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13371@t))) (G12226@syntax-dispatch G13371@t '_))) G13359@t))) (G12226@syntax-dispatch G13359@t '#(each+ any () any)))) G13356@fmls))) (set! G12158@let-macro (lambda (G13375@stx) ((lambda (G13377@t) ((lambda (G13379@ls/false) (if G13379@ls/false (apply (lambda (G13381@lhs* G13382@rhs* G13383@b G13384@b*) (if (G11657@valid-bound-ids? G13381@lhs*) (G12152@bless (cons (cons 'lambda (cons G13381@lhs* (cons G13383@b G13384@b*))) G13382@rhs*)) (G12156@invalid-fmls-error G13375@stx G13381@lhs*))) G13379@ls/false) ((lambda (G13389@t) ((lambda (G13391@ls/false) (if (if G13391@ls/false (begin '#f (apply (lambda (G13393@f G13394@lhs* G13395@rhs* G13396@b G13397@b*) (G11647@id? G13393@f)) G13391@ls/false)) '#f) (apply (lambda (G13403@f G13404@lhs* G13405@rhs* G13406@b G13407@b*) (if (G11657@valid-bound-ids? G13404@lhs*) (G12152@bless (cons (list 'letrec (list (list G13403@f (cons 'lambda (cons G13404@lhs* (cons G13406@b G13407@b*))))) G13403@f) G13405@rhs*)) (G12156@invalid-fmls-error G13375@stx G13404@lhs*))) G13391@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13389@t))) (G12226@syntax-dispatch G13389@t '(_ any #(each (any any)) any . each-any)))) G13377@t))) (G12226@syntax-dispatch G13377@t '(_ #(each (any any)) any . each-any)))) G13375@stx))) (set! G12160@let-values-macro (lambda (G13413@stx) ((lambda (G13416@rename G13418@rename*) (begin (set! G13416@rename (lambda (G13514@x G13515@old* G13516@new*) (begin (if (G11647@id? G13514@x) (void) (G12459@syntax-violation '#f '"not an indentifier" G13413@stx G13514@x)) (if (G11661@bound-id-member? G13514@x G13515@old*) (G12459@syntax-violation '#f '"duplicate binding" G13413@stx G13514@x) (void)) ((lambda (G13520@y) (values G13520@y (cons G13514@x G13515@old*) (cons G13520@y G13516@new*))) (gensym (G12465@syntax->datum G13514@x)))))) (set! G13418@rename* (lambda (G13496@x* G13497@old* G13498@new*) (if (null? G13496@x*) (values '() G13497@old* G13498@new*) (call-with-values (lambda () (G13416@rename (car G13496@x*) G13497@old* G13498@new*)) (lambda (G13502@x G13503@old* G13504@new*) (call-with-values (lambda () (G13418@rename* (cdr G13496@x*) G13503@old* G13504@new*)) (lambda (G13508@x* G13509@old* G13510@new*) (values (cons G13502@x G13508@x*) G13509@old* G13510@new*)))))))) ((lambda (G13419@t) ((lambda (G13421@ls/false) (if G13421@ls/false (apply (lambda (G13423@b G13424@b*) (cons* (G12152@bless 'let) '() G13423@b G13424@b*)) G13421@ls/false) ((lambda (G13427@t) ((lambda (G13429@ls/false) (if G13429@ls/false (apply (lambda (G13431@lhs* G13432@rhs* G13433@b G13434@b*) (G12152@bless ((letrec ((G13439@f (lambda (G13441@lhs* G13442@rhs* G13443@old* G13444@new*) (if (null? G13441@lhs*) (cons 'let (cons (map list G13443@old* G13444@new*) (cons G13433@b G13434@b*))) ((lambda (G13449@t) ((lambda (G13451@ls/false) (if G13451@ls/false (apply (lambda (G13453@x*) (call-with-values (lambda () (G13418@rename* G13453@x* G13443@old* G13444@new*)) (lambda (G13458@G13455 G13459@G13456 G13460@G13457) ((lambda (G13464@new* G13465@old* G13466@y*) (list 'call-with-values (list 'lambda '() (car G13442@rhs*)) (list 'lambda G13466@y* (G13439@f (cdr G13441@lhs*) (cdr G13442@rhs*) G13465@old* G13464@new*)))) G13460@G13457 G13459@G13456 G13458@G13455)))) G13451@ls/false) ((lambda (G13470@t) ((lambda (G13472@ls/false) (if G13472@ls/false (apply (lambda (G13474@x* G13475@x) (call-with-values (lambda () (G13416@rename G13475@x G13443@old* G13444@new*)) (lambda (G13478@y G13479@old* G13480@new*) (call-with-values (lambda () (G13418@rename* G13474@x* G13479@old* G13480@new*)) (lambda (G13484@y* G13485@old* G13486@new*) (list 'call-with-values (list 'lambda '() (car G13442@rhs*)) (list 'lambda (append G13484@y* G13478@y) (G13439@f (cdr G13441@lhs*) (cdr G13442@rhs*) G13485@old* G13486@new*)))))))) G13472@ls/false) ((lambda (G13490@t) ((lambda (G13492@ls/false) (if G13492@ls/false (apply (lambda (G13494@others) (G12459@syntax-violation '#f '"malformed bindings" G13413@stx G13494@others)) G13492@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13490@t))) (G12226@syntax-dispatch G13490@t 'any))) G13470@t))) (G12226@syntax-dispatch G13470@t '#(each+ any () any)))) G13449@t))) (G12226@syntax-dispatch G13449@t 'each-any))) (car G13441@lhs*)))))) G13439@f) G13431@lhs* G13432@rhs* '() '()))) G13429@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13427@t))) (G12226@syntax-dispatch G13427@t '(_ #(each (any any)) any . each-any)))) G13419@t))) (G12226@syntax-dispatch G13419@t '(_ () any . each-any)))) G13413@stx))) '#f '#f))) (set! G12162@let*-values-macro (lambda (G13522@stx) ((lambda (G13525@check) (begin (set! G13525@check (lambda (G13572@x*) (if (null? G13572@x*) (void) ((lambda (G13574@x) (begin (if (G11647@id? G13574@x) (void) (G12459@syntax-violation '#f '"not an identifier" G13522@stx G13574@x)) (G13525@check (cdr G13572@x*)) (if (G11661@bound-id-member? G13574@x (cdr G13572@x*)) (G12459@syntax-violation '#f '"duplicate identifier" G13522@stx G13574@x) (void)))) (car G13572@x*))))) ((lambda (G13526@t) ((lambda (G13528@ls/false) (if G13528@ls/false (apply (lambda (G13530@b G13531@b*) (cons* (G12152@bless 'let) '() G13530@b G13531@b*)) G13528@ls/false) ((lambda (G13534@t) ((lambda (G13536@ls/false) (if G13536@ls/false (apply (lambda (G13538@lhs* G13539@rhs* G13540@b G13541@b*) (G12152@bless ((letrec ((G13546@f (lambda (G13548@lhs* G13549@rhs*) (if (null? G13548@lhs*) (cons 'begin (cons G13540@b G13541@b*)) ((lambda (G13552@t) ((lambda (G13554@ls/false) (if G13554@ls/false (apply (lambda (G13556@x*) (begin (G13525@check G13556@x*) (list 'call-with-values (list 'lambda '() (car G13549@rhs*)) (list 'lambda G13556@x* (G13546@f (cdr G13548@lhs*) (cdr G13549@rhs*)))))) G13554@ls/false) ((lambda (G13558@t) ((lambda (G13560@ls/false) (if G13560@ls/false (apply (lambda (G13562@x* G13563@x) (begin (G13525@check (cons G13563@x G13562@x*)) (list 'call-with-values (list 'lambda '() (car G13549@rhs*)) (list 'lambda (append G13562@x* G13563@x) (G13546@f (cdr G13548@lhs*) (cdr G13549@rhs*)))))) G13560@ls/false) ((lambda (G13566@t) ((lambda (G13568@ls/false) (if G13568@ls/false (apply (lambda (G13570@others) (G12459@syntax-violation '#f '"malformed bindings" G13522@stx G13570@others)) G13568@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13566@t))) (G12226@syntax-dispatch G13566@t 'any))) G13558@t))) (G12226@syntax-dispatch G13558@t '#(each+ any () any)))) G13552@t))) (G12226@syntax-dispatch G13552@t 'each-any))) (car G13548@lhs*)))))) G13546@f) G13538@lhs* G13539@rhs*))) G13536@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13534@t))) (G12226@syntax-dispatch G13534@t '(_ #(each (any any)) any . each-any)))) G13526@t))) (G12226@syntax-dispatch G13526@t '(_ () any . each-any)))) G13522@stx))) '#f))) (set! G12164@trace-lambda-macro (lambda (G13576@stx) ((lambda (G13578@t) ((lambda (G13580@ls/false) (if G13580@ls/false (apply (lambda (G13582@who G13583@fmls G13584@b G13585@b*) (if (G11657@valid-bound-ids? G13583@fmls) (G12152@bless (list 'make-traced-procedure (list 'quote G13582@who) (cons 'lambda (cons G13583@fmls (cons G13584@b G13585@b*))))) (G12156@invalid-fmls-error G13576@stx G13583@fmls))) G13580@ls/false) ((lambda (G13590@t) ((lambda (G13592@ls/false) (if G13592@ls/false (apply (lambda (G13594@who G13595@fmls G13596@last G13597@b G13598@b*) (if (G11657@valid-bound-ids? (cons G13596@last G13595@fmls)) (G12152@bless (list 'make-traced-procedure (list 'quote G13594@who) (cons 'lambda (cons (append G13595@fmls G13596@last) (cons G13597@b G13598@b*))))) (G12156@invalid-fmls-error G13576@stx (append G13595@fmls G13596@last)))) G13592@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13590@t))) (G12226@syntax-dispatch G13590@t '(_ any #(each+ any () any) any . each-any)))) G13578@t))) (G12226@syntax-dispatch G13578@t '(_ any each-any any . each-any)))) G13576@stx))) (set! G12166@trace-define-macro (lambda (G13604@stx) ((lambda (G13606@t) ((lambda (G13608@ls/false) (if G13608@ls/false (apply (lambda (G13610@who G13611@fmls G13612@b G13613@b*) (if (G11657@valid-bound-ids? G13611@fmls) (G12152@bless (list 'define G13610@who (list 'make-traced-procedure (list 'quote G13610@who) (cons 'lambda (cons G13611@fmls (cons G13612@b G13613@b*)))))) (G12156@invalid-fmls-error G13604@stx G13611@fmls))) G13608@ls/false) ((lambda (G13618@t) ((lambda (G13620@ls/false) (if G13620@ls/false (apply (lambda (G13622@who G13623@fmls G13624@last G13625@b G13626@b*) (if (G11657@valid-bound-ids? (cons G13624@last G13623@fmls)) (G12152@bless (list 'define G13622@who (list 'make-traced-procedure (list 'quote G13622@who) (cons 'lambda (cons (append G13623@fmls G13624@last) (cons G13625@b G13626@b*)))))) (G12156@invalid-fmls-error G13604@stx (append G13623@fmls G13624@last)))) G13620@ls/false) ((lambda (G13632@t) ((lambda (G13634@ls/false) (if G13634@ls/false (apply (lambda (G13636@who G13637@expr) (if (G11647@id? G13636@who) (G12152@bless (list 'define G13636@who (list 'let (list (list 'v G13637@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G13636@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G12459@syntax-violation '#f '"invalid name" G13604@stx))) G13634@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13632@t))) (G12226@syntax-dispatch G13632@t '(_ any any)))) G13618@t))) (G12226@syntax-dispatch G13618@t '(_ (any . #(each+ any () any)) any . each-any)))) G13606@t))) (G12226@syntax-dispatch G13606@t '(_ (any . each-any) any . each-any)))) G13604@stx))) (set! G12168@trace-define-syntax-macro (lambda (G13640@stx) ((lambda (G13642@t) ((lambda (G13644@ls/false) (if G13644@ls/false (apply (lambda (G13646@who G13647@expr) (if (G11647@id? G13646@who) (G12152@bless (list 'define-syntax G13646@who (list 'make-traced-macro (list 'quote G13646@who) G13647@expr))) (G12459@syntax-violation '#f '"invalid name" G13640@stx))) G13644@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13642@t))) (G12226@syntax-dispatch G13642@t '(_ any any)))) G13640@stx))) (set! G12170@trace-let/rec-syntax (lambda (G13650@who) (lambda (G13652@stx) ((lambda (G13654@t) ((lambda (G13656@ls/false) (if G13656@ls/false (apply (lambda (G13658@lhs* G13659@rhs* G13660@b G13661@b*) (if (G11657@valid-bound-ids? G13658@lhs*) ((lambda (G13666@rhs*) (G12152@bless (cons G13650@who (cons (map list G13658@lhs* G13666@rhs*) (cons G13660@b G13661@b*))))) (map (lambda (G13668@lhs G13669@rhs) (list 'make-traced-macro (list 'quote G13668@lhs) G13669@rhs)) G13658@lhs* G13659@rhs*)) (G12156@invalid-fmls-error G13652@stx G13658@lhs*))) G13656@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13654@t))) (G12226@syntax-dispatch G13654@t '(_ #(each (any any)) any . each-any)))) G13652@stx)))) (set! G12172@trace-let-syntax-macro (G12170@trace-let/rec-syntax 'let-syntax)) (set! G12174@trace-letrec-syntax-macro (G12170@trace-let/rec-syntax 'letrec-syntax)) (set! G12176@guard-macro (lambda (G13672@x) ((lambda (G13675@gen-clauses) (begin (set! G13675@gen-clauses (lambda (G13698@con G13699@outerk G13700@clause*) ((lambda (G13705@f G13707@f*) (begin (set! G13705@f (lambda (G13756@x G13757@k) ((lambda (G13760@t) ((lambda (G13762@ls/false) (if G13762@ls/false (apply (lambda (G13764@e G13765@p) ((lambda (G13768@t) (list 'let (list (list G13768@t G13764@e)) (list 'if G13768@t (list G13765@p G13768@t) G13757@k))) (gensym))) G13762@ls/false) ((lambda (G13770@t) ((lambda (G13772@ls/false) (if G13772@ls/false (apply (lambda (G13774@e) ((lambda (G13776@t) (list 'let (list (list G13776@t G13774@e)) (list 'if G13776@t G13776@t G13757@k))) (gensym))) G13772@ls/false) ((lambda (G13778@t) ((lambda (G13780@ls/false) (if G13780@ls/false (apply (lambda (G13782@e G13783@v G13784@v*) (list 'if G13782@e (cons 'begin (cons G13783@v G13784@v*)) G13757@k)) G13780@ls/false) ((lambda (G13788@t) ((lambda (G13790@ls/false) (if G13790@ls/false (apply (lambda () (G12459@syntax-violation '#f '"invalid guard clause" G13756@x)) G13790@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13788@t))) (G12226@syntax-dispatch G13788@t '_))) G13778@t))) (G12226@syntax-dispatch G13778@t '(any any . each-any)))) G13770@t))) (G12226@syntax-dispatch G13770@t '(any)))) G13760@t))) (G12226@syntax-dispatch G13760@t '(any #(scheme-id =>) any)))) G13756@x))) (set! G13707@f* (lambda (G13718@x*) ((lambda (G13720@t) ((lambda (G13722@ls/false) (if G13722@ls/false (apply (lambda () (values (list 'raise G13698@con) '#t)) G13722@ls/false) ((lambda (G13724@t) ((lambda (G13726@ls/false) (if G13726@ls/false (apply (lambda (G13728@e G13729@e*) (values (cons 'begin (cons G13728@e G13729@e*)) '#f)) G13726@ls/false) ((lambda (G13732@t) ((lambda (G13734@ls/false) (if G13734@ls/false (apply (lambda (G13736@cls G13737@cls*) (call-with-values (lambda () (G13707@f* G13737@cls*)) (lambda (G13742@G13740 G13743@G13741) ((lambda (G13746@g G13747@e) (values (G13705@f G13736@cls G13747@e) G13746@g)) G13743@G13741 G13742@G13740)))) G13734@ls/false) ((lambda (G13750@t) ((lambda (G13752@ls/false) (if G13752@ls/false (apply (lambda (G13754@others) (G12459@syntax-violation '#f '"invalid guard clause" G13754@others)) G13752@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13750@t))) (G12226@syntax-dispatch G13750@t 'any))) G13732@t))) (G12226@syntax-dispatch G13732@t '(any . any)))) G13724@t))) (G12226@syntax-dispatch G13724@t '((#(scheme-id else) any . each-any))))) G13720@t))) (G12226@syntax-dispatch G13720@t '()))) G13718@x*))) (call-with-values (lambda () (G13707@f* G13700@clause*)) (lambda (G13710@G13708 G13711@G13709) ((lambda (G13714@raisek G13715@code) (if G13714@raisek (list G13699@outerk G13715@code) G13715@code)) G13711@G13709 G13710@G13708))))) '#f '#f))) ((lambda (G13676@t) ((lambda (G13678@ls/false) (if (if G13678@ls/false (begin '#f (apply (lambda (G13680@con G13681@clause* G13682@b G13683@b*) (G11647@id? G13680@con)) G13678@ls/false)) '#f) (apply (lambda (G13688@con G13689@clause* G13690@b G13691@b*) ((lambda (G13696@outerk) (G12152@bless (list 'call/cc (list 'lambda (list G13696@outerk) (list 'with-exception-handler (list 'lambda (list G13688@con) (G13675@gen-clauses G13688@con G13696@outerk G13689@clause*)) (cons 'lambda (cons '() (cons '#f (cons G13690@b G13691@b*))))))))) (gensym))) G13678@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13676@t))) (G12226@syntax-dispatch G13676@t '(_ (any . each-any) any . each-any)))) G13672@x))) '#f))) (set! G12178@define-enumeration-macro (lambda (G13792@stx) ((lambda (G13795@set? G13797@remove-dups) (begin (set! G13795@set? (lambda (G13820@x) ((lambda (G13822@t) (if G13822@t G13822@t (begin '#f (if (not (memq (car G13820@x) (cdr G13820@x))) (begin '#f (G13795@set? (cdr G13820@x))) '#f)))) (null? G13820@x)))) (set! G13797@remove-dups (lambda (G13818@ls) (if (null? G13818@ls) '() (cons (car G13818@ls) (G13797@remove-dups (remq (car G13818@ls) (cdr G13818@ls))))))) ((lambda (G13798@t) ((lambda (G13800@ls/false) (if (if G13800@ls/false (begin '#f (apply (lambda (G13802@name G13803@id* G13804@maker) (if (G11647@id? G13802@name) (if (G11647@id? G13804@maker) (begin '#f (for-all G11647@id? G13803@id*)) '#f) '#f)) G13800@ls/false)) '#f) (apply (lambda (G13808@name G13809@id* G13810@maker) ((lambda (G13814@name* G13815@mk) (G12152@bless (list 'begin (list 'define G13815@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G13814@name*)))) (list 'define-syntax G13808@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G13814@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G13808@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G13810@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G13810@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G13814@name*)) (cons 'syntax-violation (cons (list 'quote G13810@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G13815@mk '('(n* ...)))))))))))) (G13797@remove-dups (G12465@syntax->datum G13809@id*)) (gensym))) G13800@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13798@t))) (G12226@syntax-dispatch G13798@t '(_ any each-any any)))) G13792@stx))) '#f '#f))) (set! G12180@time-macro (lambda (G13824@stx) ((lambda (G13826@t) ((lambda (G13828@ls/false) (if G13828@ls/false (apply (lambda (G13830@expr) ((lambda (G13832@str) (G12152@bless (list 'time-it G13832@str (list 'lambda '() G13830@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G13836@G13834 G13837@G13835) ((lambda (G13840@e G13841@p) (begin (write (G12465@syntax->datum G13830@expr) G13841@p) (G13840@e))) G13837@G13835 G13836@G13834))))) G13828@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13826@t))) (G12226@syntax-dispatch G13826@t '(_ any)))) G13824@stx))) (set! G12182@delay-macro (lambda (G13844@stx) ((lambda (G13846@t) ((lambda (G13848@ls/false) (if G13848@ls/false (apply (lambda (G13850@expr) (G12152@bless (list 'make-promise (list 'lambda '() G13850@expr)))) G13848@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13846@t))) (G12226@syntax-dispatch G13846@t '(_ any)))) G13844@stx))) (set! G12184@assert-macro (lambda (G13852@stx) ((lambda (G13854@t) ((lambda (G13856@ls/false) (if G13856@ls/false (apply (lambda (G13858@expr) (G12152@bless (list 'unless G13858@expr (list 'assertion-violation ''assert '"assertion failed" (list 'quote G13858@expr))))) G13856@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13854@t))) (G12226@syntax-dispatch G13854@t '(_ any)))) G13852@stx))) (set! G12186@endianness-macro (lambda (G13860@stx) ((lambda (G13862@t) ((lambda (G13864@ls/false) (if G13864@ls/false (apply (lambda (G13866@e) ((lambda (G13868@t) (if (eqv? G13868@t 'little) (G12152@bless ''little) (if (eqv? G13868@t 'big) (G12152@bless ''big) (G12459@syntax-violation '#f '"endianness must be big or little" G13860@stx)))) (G12465@syntax->datum G13866@e))) G13864@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13862@t))) (G12226@syntax-dispatch G13862@t '(_ any)))) G13860@stx))) (set! G12188@identifier-syntax-macro (lambda (G13869@stx) ((lambda (G13871@t) ((lambda (G13873@ls/false) (if G13873@ls/false (apply (lambda (G13875@expr) (G12152@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G13875@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G13875@expr) '((syntax (e* ...)))))))))) G13873@ls/false) ((lambda (G13877@t) ((lambda (G13879@ls/false) (if (if G13879@ls/false (begin '#f (apply (lambda (G13881@id1 G13882@expr1 G13883@id2 G13884@expr2 G13885@expr3) (if (G11647@id? G13881@id1) (if (G11647@id? G13883@id2) (begin '#f (G11647@id? G13884@expr2)) '#f) '#f)) G13879@ls/false)) '#f) (apply (lambda (G13891@id1 G13892@expr1 G13893@id2 G13894@expr2 G13895@expr3) (G12152@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G13892@expr1)) (list (list 'set! 'id G13894@expr2) (list 'syntax G13895@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G13892@expr1 '(e* ...))))))))) G13879@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13877@t))) (G12226@syntax-dispatch G13877@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G13871@t))) (G12226@syntax-dispatch G13871@t '(_ any)))) G13869@stx))) (set! G12190@do-macro (lambda (G13901@stx) ((lambda (G13904@bind) (begin (set! G13904@bind (lambda (G13927@x) ((lambda (G13929@t) ((lambda (G13931@ls/false) (if G13931@ls/false (apply (lambda (G13933@x G13934@init) (list G13933@x G13934@init G13933@x)) G13931@ls/false) ((lambda (G13937@t) ((lambda (G13939@ls/false) (if G13939@ls/false (apply (lambda (G13941@x G13942@init G13943@step) (list G13941@x G13942@init G13943@step)) G13939@ls/false) ((lambda (G13947@t) ((lambda (G13949@ls/false) (if G13949@ls/false (apply (lambda () (G12459@syntax-violation '#f '"invalid binding" G13901@stx)) G13949@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13947@t))) (G12226@syntax-dispatch G13947@t '_))) G13937@t))) (G12226@syntax-dispatch G13937@t '(any any any)))) G13929@t))) (G12226@syntax-dispatch G13929@t '(any any)))) G13927@x))) ((lambda (G13905@t) ((lambda (G13907@ls/false) (if G13907@ls/false (apply (lambda (G13909@binding* G13910@test G13911@expr* G13912@command*) ((lambda (G13917@t) ((lambda (G13919@ls/false) (if G13919@ls/false (apply (lambda (G13921@x* G13922@init* G13923@step*) (if (G11657@valid-bound-ids? G13921@x*) (G12152@bless (list 'letrec (list (list 'loop (list 'lambda G13921@x* (list 'if G13910@test (cons 'begin (cons '(if #f #f) G13911@expr*)) (cons 'begin (append G13912@command* (list (cons 'loop G13923@step*)))))))) (cons 'loop G13922@init*))) (G12459@syntax-violation '#f '"invalid bindings" G13901@stx))) G13919@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13917@t))) (G12226@syntax-dispatch G13917@t '#(each (any any any))))) (map G13904@bind G13909@binding*))) G13907@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13905@t))) (G12226@syntax-dispatch G13905@t '(_ each-any (any . each-any) . each-any)))) G13901@stx))) '#f))) (set! G12192@let*-macro (lambda (G13951@stx) ((lambda (G13953@t) ((lambda (G13955@ls/false) (if (if G13955@ls/false (begin '#f (apply (lambda (G13957@lhs* G13958@rhs* G13959@b G13960@b*) (for-all G11647@id? G13957@lhs*)) G13955@ls/false)) '#f) (apply (lambda (G13965@lhs* G13966@rhs* G13967@b G13968@b*) (G12152@bless ((letrec ((G13973@f (lambda (G13975@x*) (if (null? G13975@x*) (cons 'let (cons '() (cons G13967@b G13968@b*))) (list 'let (list (car G13975@x*)) (G13973@f (cdr G13975@x*))))))) G13973@f) (map list G13965@lhs* G13966@rhs*)))) G13955@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13953@t))) (G12226@syntax-dispatch G13953@t '(_ #(each (any any)) any . each-any)))) G13951@stx))) (set! G12194@or-macro (lambda (G13977@stx) ((lambda (G13979@t) ((lambda (G13981@ls/false) (if G13981@ls/false (apply (lambda () '#f) G13981@ls/false) ((lambda (G13983@t) ((lambda (G13985@ls/false) (if G13985@ls/false (apply (lambda (G13987@e G13988@e*) (G12152@bless ((letrec ((G13991@f (lambda (G13993@e G13994@e*) (if (null? G13994@e*) (list 'begin '#f G13993@e) (list 'let (list (list 't G13993@e)) (list 'if 't 't (G13991@f (car G13994@e*) (cdr G13994@e*)))))))) G13991@f) G13987@e G13988@e*))) G13985@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G13983@t))) (G12226@syntax-dispatch G13983@t '(_ any . each-any)))) G13979@t))) (G12226@syntax-dispatch G13979@t '(_)))) G13977@stx))) (set! G12196@and-macro (lambda (G13997@stx) ((lambda (G13999@t) ((lambda (G14001@ls/false) (if G14001@ls/false (apply (lambda () '#t) G14001@ls/false) ((lambda (G14003@t) ((lambda (G14005@ls/false) (if G14005@ls/false (apply (lambda (G14007@e G14008@e*) (G12152@bless ((letrec ((G14011@f (lambda (G14013@e G14014@e*) (if (null? G14014@e*) (list 'begin '#f G14013@e) (cons 'if (cons G14013@e (cons (G14011@f (car G14014@e*) (cdr G14014@e*)) '(#f)))))))) G14011@f) G14007@e G14008@e*))) G14005@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14003@t))) (G12226@syntax-dispatch G14003@t '(_ any . each-any)))) G13999@t))) (G12226@syntax-dispatch G13999@t '(_)))) G13997@stx))) (set! G12198@cond-macro (lambda (G14017@stx) ((lambda (G14019@t) ((lambda (G14021@ls/false) (if G14021@ls/false (apply (lambda (G14023@cls G14024@cls*) (G12152@bless ((letrec ((G14027@f (lambda (G14029@cls G14030@cls*) (if (null? G14030@cls*) ((lambda (G14033@t) ((lambda (G14035@ls/false) (if G14035@ls/false (apply (lambda (G14037@e G14038@e*) (cons 'begin (cons G14037@e G14038@e*))) G14035@ls/false) ((lambda (G14041@t) ((lambda (G14043@ls/false) (if G14043@ls/false (apply (lambda (G14045@e G14046@p) (list 'let (list (list 't G14045@e)) (list 'if 't (cons G14046@p '(t))))) G14043@ls/false) ((lambda (G14049@t) ((lambda (G14051@ls/false) (if G14051@ls/false (apply (lambda (G14053@e) (cons 'or (cons G14053@e '((if #f #f))))) G14051@ls/false) ((lambda (G14055@t) ((lambda (G14057@ls/false) (if G14057@ls/false (apply (lambda (G14059@e G14060@e*) (list 'if G14059@e (cons 'begin G14060@e*))) G14057@ls/false) ((lambda (G14063@t) ((lambda (G14065@ls/false) (if G14065@ls/false (apply (lambda () (G12459@syntax-violation '#f '"invalid last clause" G14017@stx)) G14065@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14063@t))) (G12226@syntax-dispatch G14063@t '_))) G14055@t))) (G12226@syntax-dispatch G14055@t '(any . each-any)))) G14049@t))) (G12226@syntax-dispatch G14049@t '(any)))) G14041@t))) (G12226@syntax-dispatch G14041@t '(any #(scheme-id =>) any)))) G14033@t))) (G12226@syntax-dispatch G14033@t '(#(scheme-id else) any . each-any)))) G14029@cls) ((lambda (G14067@t) ((lambda (G14069@ls/false) (if G14069@ls/false (apply (lambda (G14071@e G14072@e*) (G12459@syntax-violation '#f '"incorrect position of keyword else" G14017@stx)) G14069@ls/false) ((lambda (G14075@t) ((lambda (G14077@ls/false) (if G14077@ls/false (apply (lambda (G14079@e G14080@p) (list 'let (list (list 't G14079@e)) (list 'if 't (cons G14080@p '(t)) (G14027@f (car G14030@cls*) (cdr G14030@cls*))))) G14077@ls/false) ((lambda (G14083@t) ((lambda (G14085@ls/false) (if G14085@ls/false (apply (lambda (G14087@e) (list 'or G14087@e (G14027@f (car G14030@cls*) (cdr G14030@cls*)))) G14085@ls/false) ((lambda (G14089@t) ((lambda (G14091@ls/false) (if G14091@ls/false (apply (lambda (G14093@e G14094@e*) (list 'if G14093@e (cons 'begin G14094@e*) (G14027@f (car G14030@cls*) (cdr G14030@cls*)))) G14091@ls/false) ((lambda (G14097@t) ((lambda (G14099@ls/false) (if G14099@ls/false (apply (lambda () (G12459@syntax-violation '#f '"invalid last clause" G14017@stx)) G14099@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14097@t))) (G12226@syntax-dispatch G14097@t '_))) G14089@t))) (G12226@syntax-dispatch G14089@t '(any . each-any)))) G14083@t))) (G12226@syntax-dispatch G14083@t '(any)))) G14075@t))) (G12226@syntax-dispatch G14075@t '(any #(scheme-id =>) any)))) G14067@t))) (G12226@syntax-dispatch G14067@t '(#(scheme-id else) any . each-any)))) G14029@cls))))) G14027@f) G14023@cls G14024@cls*))) G14021@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14019@t))) (G12226@syntax-dispatch G14019@t '(_ any . each-any)))) G14017@stx))) (set! G12200@do-include (lambda (G14101@stx G14102@id G14103@filename) ((lambda (G14107@filename) (begin (if (if (string? G14107@filename) (begin '#f (G11647@id? G14102@id)) '#f) (void) (G12459@syntax-violation '#f '"invalid syntax" G14101@stx)) (cons (G12152@bless 'begin) (with-input-from-file G14107@filename (lambda () ((letrec ((G14109@f (lambda (G14111@ls) ((lambda (G14113@x) (if (eof-object? G14113@x) (reverse G14111@ls) (G14109@f (cons (G11613@datum->stx G14102@id G14113@x) G14111@ls)))) (G10453@G10238@read-annotated))))) G14109@f) '())))))) (G11669@stx->datum G14103@filename)))) (set! G12202@include-macro (lambda (G14115@e) ((lambda (G14117@t) ((lambda (G14119@ls/false) (if G14119@ls/false (apply (lambda (G14121@id G14122@filename) (G12200@do-include G14115@e G14121@id G14122@filename)) G14119@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14117@t))) (G12226@syntax-dispatch G14117@t '(any any)))) G14115@e))) (set! G12204@include-into-macro (lambda (G14125@e) ((lambda (G14127@t) ((lambda (G14129@ls/false) (if G14129@ls/false (apply (lambda (G14131@id G14132@filename) (G12200@do-include G14125@e G14131@id G14132@filename)) G14129@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14127@t))) (G12226@syntax-dispatch G14127@t '(_ any any)))) G14125@e))) (set! G12206@syntax-rules-macro (lambda (G14135@e) ((lambda (G14137@t) ((lambda (G14139@ls/false) (if G14139@ls/false (apply (lambda (G14141@lits G14142@pat* G14143@tmp*) (begin (G12232@verify-literals G14141@lits G14135@e) (G12152@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G14141@lits (map (lambda (G14147@pat G14148@tmp) ((lambda (G14151@t) ((lambda (G14153@ls/false) (if G14153@ls/false (apply (lambda (G14155@rest) (list (cons 'g G14155@rest) (list 'syntax G14148@tmp))) G14153@ls/false) ((lambda (G14157@t) ((lambda (G14159@ls/false) (if G14159@ls/false (apply (lambda () (G12459@syntax-violation '#f '"invalid syntax-rules pattern" G14135@e G14147@pat)) G14159@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14157@t))) (G12226@syntax-dispatch G14157@t '_))) G14151@t))) (G12226@syntax-dispatch G14151@t '(_ . any)))) G14147@pat)) G14142@pat* G14143@tmp*)))))))) G14139@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14137@t))) (G12226@syntax-dispatch G14137@t '(_ each-any . #(each (any any)))))) G14135@e))) (set! G12208@quasiquote-macro ((lambda () ((lambda (G14162@datum G14203@quasicons* G14205@quasicons G14207@quasiappend G14209@quasivector G14211@vquasi G14213@quasi) (begin (set! G14162@datum (lambda (G14432@x) (list (G12112@scheme-stx 'quote) (G11623@mkstx G14432@x '() '() '())))) (set! G14203@quasicons* (lambda (G14424@x G14425@y) ((letrec ((G14428@f (lambda (G14430@x) (if (null? G14430@x) G14425@y (G14205@quasicons (car G14430@x) (G14428@f (cdr G14430@x))))))) G14428@f) G14424@x))) (set! G14205@quasicons (lambda (G14386@x G14387@y) ((lambda (G14390@t) ((lambda (G14392@ls/false) (if G14392@ls/false (apply (lambda (G14394@dy) ((lambda (G14396@t) ((lambda (G14398@ls/false) (if G14398@ls/false (apply (lambda (G14400@dx) (list (G12112@scheme-stx 'quote) (cons G14400@dx G14394@dy))) G14398@ls/false) ((lambda (G14402@t) ((lambda (G14404@ls/false) (if G14404@ls/false (apply (lambda () ((lambda (G14406@t) ((lambda (G14408@ls/false) (if G14408@ls/false (apply (lambda () (list (G12112@scheme-stx 'list) G14386@x)) G14408@ls/false) ((lambda (G14410@t) ((lambda (G14412@ls/false) (if G14412@ls/false (apply (lambda () (list (G12112@scheme-stx 'cons) G14386@x G14387@y)) G14412@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14410@t))) (G12226@syntax-dispatch G14410@t '_))) G14406@t))) (G12226@syntax-dispatch G14406@t '()))) G14394@dy)) G14404@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14402@t))) (G12226@syntax-dispatch G14402@t '_))) G14396@t))) (G12226@syntax-dispatch G14396@t '(#(scheme-id quote) any)))) G14386@x)) G14392@ls/false) ((lambda (G14414@t) ((lambda (G14416@ls/false) (if G14416@ls/false (apply (lambda (G14418@stuff) (cons* (G12112@scheme-stx 'list) G14386@x G14418@stuff)) G14416@ls/false) ((lambda (G14420@t) ((lambda (G14422@ls/false) (if G14422@ls/false (apply (lambda () (list (G12112@scheme-stx 'cons) G14386@x G14387@y)) G14422@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14420@t))) (G12226@syntax-dispatch G14420@t '_))) G14414@t))) (G12226@syntax-dispatch G14414@t '(#(scheme-id list) . each-any)))) G14390@t))) (G12226@syntax-dispatch G14390@t '(#(scheme-id quote) any)))) G14387@y))) (set! G14207@quasiappend (lambda (G14360@x G14361@y) ((lambda (G14364@ls) (if (null? G14364@ls) (list (G12112@scheme-stx 'quote) '()) (if (null? (cdr G14364@ls)) (car G14364@ls) (cons* (G12112@scheme-stx 'append) G14364@ls)))) ((letrec ((G14366@f (lambda (G14368@x) (if (null? G14368@x) ((lambda (G14370@t) ((lambda (G14372@ls/false) (if G14372@ls/false (apply (lambda () '()) G14372@ls/false) ((lambda (G14374@t) ((lambda (G14376@ls/false) (if G14376@ls/false (apply (lambda () (list G14361@y)) G14376@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14374@t))) (G12226@syntax-dispatch G14374@t '_))) G14370@t))) (G12226@syntax-dispatch G14370@t '(#(scheme-id quote) ())))) G14361@y) ((lambda (G14378@t) ((lambda (G14380@ls/false) (if G14380@ls/false (apply (lambda () (G14366@f (cdr G14368@x))) G14380@ls/false) ((lambda (G14382@t) ((lambda (G14384@ls/false) (if G14384@ls/false (apply (lambda () (cons (car G14368@x) (G14366@f (cdr G14368@x)))) G14384@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14382@t))) (G12226@syntax-dispatch G14382@t '_))) G14378@t))) (G12226@syntax-dispatch G14378@t '(#(scheme-id quote) ())))) (car G14368@x)))))) G14366@f) G14360@x)))) (set! G14209@quasivector (lambda (G14310@x) ((lambda (G14312@pat-x) ((lambda (G14314@t) ((lambda (G14316@ls/false) (if G14316@ls/false (apply (lambda (G14318@x*) (list (G12112@scheme-stx 'quote) (list->vector G14318@x*))) G14316@ls/false) ((lambda (G14320@t) ((lambda (G14322@ls/false) (if G14322@ls/false (apply (lambda () ((letrec ((G14324@f (lambda (G14326@x G14327@k) ((lambda (G14330@t) ((lambda (G14332@ls/false) (if G14332@ls/false (apply (lambda (G14334@x*) (G14327@k (map (lambda (G14336@x) (list (G12112@scheme-stx 'quote) G14336@x)) G14334@x*))) G14332@ls/false) ((lambda (G14338@t) ((lambda (G14340@ls/false) (if G14340@ls/false (apply (lambda (G14342@x*) (G14327@k G14342@x*)) G14340@ls/false) ((lambda (G14344@t) ((lambda (G14346@ls/false) (if G14346@ls/false (apply (lambda (G14348@x G14349@y) (G14324@f G14349@y (lambda (G14352@ls) (G14327@k (cons G14348@x G14352@ls))))) G14346@ls/false) ((lambda (G14354@t) ((lambda (G14356@ls/false) (if G14356@ls/false (apply (lambda () (list (G12112@scheme-stx 'list->vector) G14312@pat-x)) G14356@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14354@t))) (G12226@syntax-dispatch G14354@t '_))) G14344@t))) (G12226@syntax-dispatch G14344@t '(#(scheme-id cons) any any)))) G14338@t))) (G12226@syntax-dispatch G14338@t '(#(scheme-id list) . each-any)))) G14330@t))) (G12226@syntax-dispatch G14330@t '(#(scheme-id quote) each-any)))) G14326@x)))) G14324@f) G14310@x (lambda (G14358@ls) (cons* (G12112@scheme-stx 'vector) G14358@ls)))) G14322@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14320@t))) (G12226@syntax-dispatch G14320@t '_))) G14314@t))) (G12226@syntax-dispatch G14314@t '(#(scheme-id quote) each-any)))) G14312@pat-x)) G14310@x))) (set! G14211@vquasi (lambda (G14276@p G14277@lev) ((lambda (G14280@t) ((lambda (G14282@ls/false) (if G14282@ls/false (apply (lambda (G14284@p G14285@q) ((lambda (G14288@t) ((lambda (G14290@ls/false) (if G14290@ls/false (apply (lambda (G14292@p) (if (= G14277@lev '0) (G14203@quasicons* G14292@p (G14211@vquasi G14285@q G14277@lev)) (G14205@quasicons (G14205@quasicons (G14162@datum 'unquote) (G14213@quasi G14292@p (- G14277@lev '1))) (G14211@vquasi G14285@q G14277@lev)))) G14290@ls/false) ((lambda (G14294@t) ((lambda (G14296@ls/false) (if G14296@ls/false (apply (lambda (G14298@p) (if (= G14277@lev '0) (G14207@quasiappend G14298@p (G14211@vquasi G14285@q G14277@lev)) (G14205@quasicons (G14205@quasicons (G14162@datum 'unquote-splicing) (G14213@quasi G14298@p (- G14277@lev '1))) (G14211@vquasi G14285@q G14277@lev)))) G14296@ls/false) ((lambda (G14300@t) ((lambda (G14302@ls/false) (if G14302@ls/false (apply (lambda (G14304@p) (G14205@quasicons (G14213@quasi G14304@p G14277@lev) (G14211@vquasi G14285@q G14277@lev))) G14302@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14300@t))) (G12226@syntax-dispatch G14300@t 'any))) G14294@t))) (G12226@syntax-dispatch G14294@t '(#(scheme-id unquote-splicing) . each-any)))) G14288@t))) (G12226@syntax-dispatch G14288@t '(#(scheme-id unquote) . each-any)))) G14284@p)) G14282@ls/false) ((lambda (G14306@t) ((lambda (G14308@ls/false) (if G14308@ls/false (apply (lambda () (list (G12112@scheme-stx 'quote) '())) G14308@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14306@t))) (G12226@syntax-dispatch G14306@t '()))) G14280@t))) (G12226@syntax-dispatch G14280@t '(any . any)))) G14276@p))) (set! G14213@quasi (lambda (G14222@p G14223@lev) ((lambda (G14226@t) ((lambda (G14228@ls/false) (if G14228@ls/false (apply (lambda (G14230@p) (if (= G14223@lev '0) G14230@p (G14205@quasicons (G14162@datum 'unquote) (G14213@quasi (list G14230@p) (- G14223@lev '1))))) G14228@ls/false) ((lambda (G14232@t) ((lambda (G14234@ls/false) (if G14234@ls/false (apply (lambda (G14236@p G14237@q) (if (= G14223@lev '0) (G14203@quasicons* G14236@p (G14213@quasi G14237@q G14223@lev)) (G14205@quasicons (G14205@quasicons (G14162@datum 'unquote) (G14213@quasi G14236@p (- G14223@lev '1))) (G14213@quasi G14237@q G14223@lev)))) G14234@ls/false) ((lambda (G14240@t) ((lambda (G14242@ls/false) (if G14242@ls/false (apply (lambda (G14244@p G14245@q) (if (= G14223@lev '0) (G14207@quasiappend G14244@p (G14213@quasi G14245@q G14223@lev)) (G14205@quasicons (G14205@quasicons (G14162@datum 'unquote-splicing) (G14213@quasi G14244@p (- G14223@lev '1))) (G14213@quasi G14245@q G14223@lev)))) G14242@ls/false) ((lambda (G14248@t) ((lambda (G14250@ls/false) (if G14250@ls/false (apply (lambda (G14252@p) (G14205@quasicons (G14162@datum 'quasiquote) (G14213@quasi (list G14252@p) (+ G14223@lev '1)))) G14250@ls/false) ((lambda (G14254@t) ((lambda (G14256@ls/false) (if G14256@ls/false (apply (lambda (G14258@p G14259@q) (G14205@quasicons (G14213@quasi G14258@p G14223@lev) (G14213@quasi G14259@q G14223@lev))) G14256@ls/false) ((lambda (G14262@t) ((lambda (G14264@ls/false) (if (if G14264@ls/false (begin '#f (apply (lambda (G14266@x) (not (G11591@stx? G14266@x))) G14264@ls/false)) '#f) (apply (lambda (G14268@x) (G14209@quasivector (G14211@vquasi G14268@x G14223@lev))) G14264@ls/false) ((lambda (G14270@t) ((lambda (G14272@ls/false) (if G14272@ls/false (apply (lambda (G14274@p) (list (G12112@scheme-stx 'quote) G14274@p)) G14272@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14270@t))) (G12226@syntax-dispatch G14270@t 'any))) G14262@t))) (G12226@syntax-dispatch G14262@t '#(vector each-any)))) G14254@t))) (G12226@syntax-dispatch G14254@t '(any . any)))) G14248@t))) (G12226@syntax-dispatch G14248@t '(#(scheme-id quasiquote) any)))) G14240@t))) (G12226@syntax-dispatch G14240@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G14232@t))) (G12226@syntax-dispatch G14232@t '((#(scheme-id unquote) . each-any) . any)))) G14226@t))) (G12226@syntax-dispatch G14226@t '(#(scheme-id unquote) any)))) G14222@p))) (lambda (G14214@x) ((lambda (G14216@t) ((lambda (G14218@ls/false) (if G14218@ls/false (apply (lambda (G14220@e) (G14213@quasi G14220@e '0)) G14218@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14216@t))) (G12226@syntax-dispatch G14216@t '(_ any)))) G14214@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G12210@quasisyntax-macro ((lambda () ((lambda (G14435@quasi) (begin (set! G14435@quasi (lambda (G14459@p G14460@lev) ((lambda (G14463@t) ((lambda (G14465@ls/false) (if G14465@ls/false (apply (lambda (G14467@p) (if (= G14460@lev '0) ((lambda (G14469@g) (values (list G14469@g) (list G14467@p) G14469@g)) (gensym)) (call-with-values (lambda () (G14435@quasi G14467@p (- G14460@lev '1))) (lambda (G14474@G14471 G14475@G14472 G14476@G14473) ((lambda (G14480@p G14481@rhs* G14482@lhs*) (values G14482@lhs* G14481@rhs* (list 'unsyntax G14480@p))) G14476@G14473 G14475@G14472 G14474@G14471))))) G14465@ls/false) ((lambda (G14486@t) ((lambda (G14488@ls/false) (if (if G14488@ls/false (begin '#f (apply (lambda () (= G14460@lev '0)) G14488@ls/false)) '#f) (apply (lambda () (G12459@syntax-violation '#f '"incorrect use of unsyntax" G14459@p)) G14488@ls/false) ((lambda (G14490@t) ((lambda (G14492@ls/false) (if G14492@ls/false (apply (lambda (G14494@p G14495@q) (call-with-values (lambda () (G14435@quasi G14495@q G14460@lev)) (lambda (G14501@G14498 G14502@G14499 G14503@G14500) ((lambda (G14507@q G14508@rhs* G14509@lhs*) (if (= G14460@lev '0) ((lambda (G14513@g) (values (cons (cons G14513@g '(...)) G14509@lhs*) (cons G14494@p G14508@rhs*) (cons G14513@g (cons '... G14507@q)))) (gensym)) (call-with-values (lambda () (G14435@quasi G14494@p (- G14460@lev '1))) (lambda (G14518@G14515 G14519@G14516 G14520@G14517) ((lambda (G14524@p G14525@rhs2* G14526@lhs2*) (values (append G14526@lhs2* G14509@lhs*) (append G14525@rhs2* G14508@rhs*) (cons (list 'unsyntax-splicing G14524@p) G14507@q))) G14520@G14517 G14519@G14516 G14518@G14515))))) G14503@G14500 G14502@G14499 G14501@G14498)))) G14492@ls/false) ((lambda (G14530@t) ((lambda (G14532@ls/false) (if (if G14532@ls/false (begin '#f (apply (lambda () (= G14460@lev '0)) G14532@ls/false)) '#f) (apply (lambda () (G12459@syntax-violation '#f '"incorrect use of unsyntax-splicing" G14459@p)) G14532@ls/false) ((lambda (G14534@t) ((lambda (G14536@ls/false) (if G14536@ls/false (apply (lambda (G14538@p) (call-with-values (lambda () (G14435@quasi G14538@p (+ G14460@lev '1))) (lambda (G14543@G14540 G14544@G14541 G14545@G14542) ((lambda (G14549@p G14550@rhs* G14551@lhs*) (values G14551@lhs* G14550@rhs* (list 'quasisyntax G14549@p))) G14545@G14542 G14544@G14541 G14543@G14540)))) G14536@ls/false) ((lambda (G14555@t) ((lambda (G14557@ls/false) (if G14557@ls/false (apply (lambda (G14559@p G14560@q) (call-with-values (lambda () (G14435@quasi G14559@p G14460@lev)) (lambda (G14569@G14563 G14570@G14564 G14571@G14565) (call-with-values (lambda () (G14435@quasi G14560@q G14460@lev)) (lambda (G14575@G14566 G14576@G14567 G14577@G14568) ((lambda (G14581@q G14582@rhs2* G14583@lhs2* G14584@p G14585@rhs* G14586@lhs*) (values (append G14583@lhs2* G14586@lhs*) (append G14582@rhs2* G14585@rhs*) (cons G14584@p G14581@q))) G14577@G14568 G14576@G14567 G14575@G14566 G14571@G14565 G14570@G14564 G14569@G14563)))))) G14557@ls/false) ((lambda (G14593@t) ((lambda (G14595@ls/false) (if (if G14595@ls/false (begin '#f (apply (lambda (G14597@x) (not (G11591@stx? G14459@p))) G14595@ls/false)) '#f) (apply (lambda (G14599@x) (call-with-values (lambda () ((letrec ((G14604@f (lambda (G14606@x) (if (null? G14606@x) (values '() '() '()) (call-with-values (lambda () (G14435@quasi (car G14606@x) G14460@lev)) (lambda (G14611@G14608 G14612@G14609 G14613@G14610) ((lambda (G14617@a G14618@rhs* G14619@lhs*) (call-with-values (lambda () (G14604@f (cdr G14606@x))) (lambda (G14626@G14623 G14627@G14624 G14628@G14625) ((lambda (G14632@d G14633@rhs2* G14634@lhs2*) (values (append G14619@lhs* G14634@lhs2*) (append G14618@rhs* G14633@rhs2*) (cons G14617@a G14632@d))) G14628@G14625 G14627@G14624 G14626@G14623)))) G14613@G14610 G14612@G14609 G14611@G14608))))))) G14604@f) G14599@x)) (lambda (G14638@G14601 G14639@G14602 G14640@G14603) ((lambda (G14644@x* G14645@rhs* G14646@lhs*) (values G14646@lhs* G14645@rhs* (list->vector G14644@x*))) G14640@G14603 G14639@G14602 G14638@G14601)))) G14595@ls/false) ((lambda (G14650@t) ((lambda (G14652@ls/false) (if G14652@ls/false (apply (lambda () (values '() '() G14459@p)) G14652@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14650@t))) (G12226@syntax-dispatch G14650@t '_))) G14593@t))) (G12226@syntax-dispatch G14593@t '#(vector each-any)))) G14555@t))) (G12226@syntax-dispatch G14555@t '(any . any)))) G14534@t))) (G12226@syntax-dispatch G14534@t '(#(scheme-id quasisyntax) any)))) G14530@t))) (G12226@syntax-dispatch G14530@t '#(scheme-id unsyntax-splicing)))) G14490@t))) (G12226@syntax-dispatch G14490@t '((#(scheme-id unsyntax-splicing) any) . any)))) G14486@t))) (G12226@syntax-dispatch G14486@t '#(scheme-id unsyntax)))) G14463@t))) (G12226@syntax-dispatch G14463@t '(#(scheme-id unsyntax) any)))) G14459@p))) (lambda (G14436@x) ((lambda (G14438@t) ((lambda (G14440@ls/false) (if G14440@ls/false (apply (lambda (G14442@e) (call-with-values (lambda () (G14435@quasi G14442@e '0)) (lambda (G14447@G14444 G14448@G14445 G14449@G14446) ((lambda (G14453@v G14454@rhs* G14455@lhs*) (G12152@bless (list 'syntax-case (cons 'list G14454@rhs*) '() (list G14455@lhs* (list 'syntax G14453@v))))) G14449@G14446 G14448@G14445 G14447@G14444)))) G14440@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14438@t))) (G12226@syntax-dispatch G14438@t '(_ any)))) G14436@x)))) '#f)))) (set! G12212@define-struct-macro (lambda (G14654@stx) (G12459@syntax-violation '#f '"define-struct not supported" G14654@stx))) (set! G12214@define-record-type-macro (lambda (G14656@x) ((lambda (G14659@id G14661@get-record-name G14663@get-record-constructor-name G14665@get-record-predicate-name G14667@get-clause G14669@foo-rtd-code G14671@parent-rtd-code G14673@parent-rcd-code G14675@foo-rcd-code G14677@get-protocol-code G14679@get-fields G14681@get-mutator-indices G14683@get-mutators G14685@get-accessors G14687@enumerate G14689@do-define-record G14691@verify-clauses) (begin (set! G14659@id (lambda (G15162@ctxt . G15164@str*) (G12463@datum->syntax G15162@ctxt (string->symbol (apply string-append (map (lambda (G15166@x) (if (symbol? G15166@x) (symbol->string G15166@x) (if (string? G15166@x) G15166@x (assertion-violation 'define-record-type '"BUG")))) G15164@str*)))))) (set! G14661@get-record-name (lambda (G15144@spec) ((lambda (G15146@t) ((lambda (G15148@ls/false) (if G15148@ls/false (apply (lambda (G15150@foo G15151@make-foo G15152@foo?) G15150@foo) G15148@ls/false) ((lambda (G15156@t) ((lambda (G15158@ls/false) (if G15158@ls/false (apply (lambda (G15160@foo) G15160@foo) G15158@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15156@t))) (G12226@syntax-dispatch G15156@t 'any))) G15146@t))) (G12226@syntax-dispatch G15146@t '(any any any)))) G15144@spec))) (set! G14663@get-record-constructor-name (lambda (G15124@spec) ((lambda (G15126@t) ((lambda (G15128@ls/false) (if G15128@ls/false (apply (lambda (G15130@foo G15131@make-foo G15132@foo?) G15131@make-foo) G15128@ls/false) ((lambda (G15136@t) ((lambda (G15138@ls/false) (if (if G15138@ls/false (begin '#f (apply (lambda (G15140@foo) (G11647@id? G15140@foo)) G15138@ls/false)) '#f) (apply (lambda (G15142@foo) (G14659@id G15142@foo '"make-" (G11669@stx->datum G15142@foo))) G15138@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15136@t))) (G12226@syntax-dispatch G15136@t 'any))) G15126@t))) (G12226@syntax-dispatch G15126@t '(any any any)))) G15124@spec))) (set! G14665@get-record-predicate-name (lambda (G15104@spec) ((lambda (G15106@t) ((lambda (G15108@ls/false) (if G15108@ls/false (apply (lambda (G15110@foo G15111@make-foo G15112@foo?) G15112@foo?) G15108@ls/false) ((lambda (G15116@t) ((lambda (G15118@ls/false) (if (if G15118@ls/false (begin '#f (apply (lambda (G15120@foo) (G11647@id? G15120@foo)) G15118@ls/false)) '#f) (apply (lambda (G15122@foo) (G14659@id G15122@foo (G11669@stx->datum G15122@foo) '"?")) G15118@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15116@t))) (G12226@syntax-dispatch G15116@t 'any))) G15106@t))) (G12226@syntax-dispatch G15106@t '(any any any)))) G15104@spec))) (set! G14667@get-clause (lambda (G15086@id G15087@ls) ((lambda (G15090@t) ((lambda (G15092@ls/false) (if G15092@ls/false (apply (lambda () '#f) G15092@ls/false) ((lambda (G15094@t) ((lambda (G15096@ls/false) (if G15096@ls/false (apply (lambda (G15098@x G15099@rest G15100@ls) (if (G11655@free-id=? (G12152@bless G15086@id) G15098@x) (cons G15098@x G15099@rest) (G14667@get-clause G15086@id G15100@ls))) G15096@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15094@t))) (G12226@syntax-dispatch G15094@t '((any . any) . any)))) G15090@t))) (G12226@syntax-dispatch G15090@t '()))) G15087@ls))) (set! G14669@foo-rtd-code (lambda (G15004@name G15005@clause* G15006@parent-rtd-code) ((lambda (G15011@convert-field-spec*) (begin (set! G15011@convert-field-spec* (lambda (G15060@ls) (list->vector (map (lambda (G15062@x) ((lambda (G15064@t) ((lambda (G15066@ls/false) (if G15066@ls/false (apply (lambda (G15068@name G15069@rest) (list 'mutable G15068@name)) G15066@ls/false) ((lambda (G15072@t) ((lambda (G15074@ls/false) (if G15074@ls/false (apply (lambda (G15076@name G15077@rest) (list 'immutable G15076@name)) G15074@ls/false) ((lambda (G15080@t) ((lambda (G15082@ls/false) (if G15082@ls/false (apply (lambda (G15084@name) (list 'immutable G15084@name)) G15082@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15080@t))) (G12226@syntax-dispatch G15080@t 'any))) G15072@t))) (G12226@syntax-dispatch G15072@t '(#(scheme-id immutable) any . any)))) G15064@t))) (G12226@syntax-dispatch G15064@t '(#(scheme-id mutable) any . any)))) G15062@x)) G15060@ls)))) ((lambda (G15012@uid-code G15013@sealed? G15014@opaque? G15015@fields) (G12152@bless (list 'make-record-type-descriptor (list 'quote G15004@name) G15006@parent-rtd-code G15012@uid-code G15013@sealed? G15014@opaque? G15015@fields))) ((lambda (G15020@t) ((lambda (G15022@ls/false) (if G15022@ls/false (apply (lambda () (list 'quote (gensym))) G15022@ls/false) ((lambda (G15024@t) ((lambda (G15026@ls/false) (if G15026@ls/false (apply (lambda (G15028@uid) (list 'quote G15028@uid)) G15026@ls/false) ((lambda (G15030@t) ((lambda (G15032@ls/false) (if G15032@ls/false (apply (lambda () '#f) G15032@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15030@t))) (G12226@syntax-dispatch G15030@t '_))) G15024@t))) (G12226@syntax-dispatch G15024@t '(_ any)))) G15020@t))) (G12226@syntax-dispatch G15020@t '(_)))) (G14667@get-clause 'nongenerative G15005@clause*)) ((lambda (G15034@t) ((lambda (G15036@ls/false) (if G15036@ls/false (apply (lambda () '#t) G15036@ls/false) ((lambda (G15038@t) ((lambda (G15040@ls/false) (if G15040@ls/false (apply (lambda () '#f) G15040@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15038@t))) (G12226@syntax-dispatch G15038@t '_))) G15034@t))) (G12226@syntax-dispatch G15034@t '(_ #(atom #t))))) (G14667@get-clause 'sealed G15005@clause*)) ((lambda (G15042@t) ((lambda (G15044@ls/false) (if G15044@ls/false (apply (lambda () '#t) G15044@ls/false) ((lambda (G15046@t) ((lambda (G15048@ls/false) (if G15048@ls/false (apply (lambda () '#f) G15048@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15046@t))) (G12226@syntax-dispatch G15046@t '_))) G15042@t))) (G12226@syntax-dispatch G15042@t '(_ #(atom #t))))) (G14667@get-clause 'opaque G15005@clause*)) ((lambda (G15050@t) ((lambda (G15052@ls/false) (if G15052@ls/false (apply (lambda (G15054@field-spec*) (list 'quote (G15011@convert-field-spec* G15054@field-spec*))) G15052@ls/false) ((lambda (G15056@t) ((lambda (G15058@ls/false) (if G15058@ls/false (apply (lambda () ''#()) G15058@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15056@t))) (G12226@syntax-dispatch G15056@t '_))) G15050@t))) (G12226@syntax-dispatch G15050@t '(_ . each-any)))) (G14667@get-clause 'fields G15005@clause*))))) '#f))) (set! G14671@parent-rtd-code (lambda (G14980@clause*) ((lambda (G14982@t) ((lambda (G14984@ls/false) (if G14984@ls/false (apply (lambda (G14986@name) (list 'record-type-descriptor G14986@name)) G14984@ls/false) ((lambda (G14988@t) ((lambda (G14990@ls/false) (if G14990@ls/false (apply (lambda () ((lambda (G14992@t) ((lambda (G14994@ls/false) (if G14994@ls/false (apply (lambda (G14996@rtd G14997@rcd) G14996@rtd) G14994@ls/false) ((lambda (G15000@t) ((lambda (G15002@ls/false) (if G15002@ls/false (apply (lambda () '#f) G15002@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15000@t))) (G12226@syntax-dispatch G15000@t '#(atom #f)))) G14992@t))) (G12226@syntax-dispatch G14992@t '(_ any any)))) (G14667@get-clause 'parent-rtd G14980@clause*))) G14990@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14988@t))) (G12226@syntax-dispatch G14988@t '#(atom #f)))) G14982@t))) (G12226@syntax-dispatch G14982@t '(_ any)))) (G14667@get-clause 'parent G14980@clause*)))) (set! G14673@parent-rcd-code (lambda (G14956@clause*) ((lambda (G14958@t) ((lambda (G14960@ls/false) (if G14960@ls/false (apply (lambda (G14962@name) (list 'record-constructor-descriptor G14962@name)) G14960@ls/false) ((lambda (G14964@t) ((lambda (G14966@ls/false) (if G14966@ls/false (apply (lambda () ((lambda (G14968@t) ((lambda (G14970@ls/false) (if G14970@ls/false (apply (lambda (G14972@rtd G14973@rcd) G14973@rcd) G14970@ls/false) ((lambda (G14976@t) ((lambda (G14978@ls/false) (if G14978@ls/false (apply (lambda () '#f) G14978@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14976@t))) (G12226@syntax-dispatch G14976@t '#(atom #f)))) G14968@t))) (G12226@syntax-dispatch G14968@t '(_ any any)))) (G14667@get-clause 'parent-rtd G14956@clause*))) G14966@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14964@t))) (G12226@syntax-dispatch G14964@t '#(atom #f)))) G14958@t))) (G12226@syntax-dispatch G14958@t '(_ any)))) (G14667@get-clause 'parent G14956@clause*)))) (set! G14675@foo-rcd-code (lambda (G14948@clause* G14949@foo-rtd G14950@protocol G14951@parent-rcd-code) (list 'make-record-constructor-descriptor G14949@foo-rtd G14951@parent-rcd-code G14950@protocol))) (set! G14677@get-protocol-code (lambda (G14936@clause*) ((lambda (G14938@t) ((lambda (G14940@ls/false) (if G14940@ls/false (apply (lambda (G14942@expr) G14942@expr) G14940@ls/false) ((lambda (G14944@t) ((lambda (G14946@ls/false) (if G14946@ls/false (apply (lambda () '#f) G14946@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14944@t))) (G12226@syntax-dispatch G14944@t '_))) G14938@t))) (G12226@syntax-dispatch G14938@t '(_ any)))) (G14667@get-clause 'protocol G14936@clause*)))) (set! G14679@get-fields (lambda (G14918@clause*) ((lambda (G14920@t) ((lambda (G14922@ls/false) (if G14922@ls/false (apply (lambda () '()) G14922@ls/false) ((lambda (G14924@t) ((lambda (G14926@ls/false) (if G14926@ls/false (apply (lambda (G14928@f*) G14928@f*) G14926@ls/false) ((lambda (G14930@t) ((lambda (G14932@ls/false) (if G14932@ls/false (apply (lambda (G14934@rest) (G14679@get-fields G14934@rest)) G14932@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14930@t))) (G12226@syntax-dispatch G14930@t '(_ . any)))) G14924@t))) (G12226@syntax-dispatch G14924@t '((#(scheme-id fields) . each-any) . _)))) G14920@t))) (G12226@syntax-dispatch G14920@t '()))) G14918@clause*))) (set! G14681@get-mutator-indices (lambda (G14894@fields) ((letrec ((G14896@f (lambda (G14898@fields G14899@i) ((lambda (G14902@t) ((lambda (G14904@ls/false) (if G14904@ls/false (apply (lambda () '()) G14904@ls/false) ((lambda (G14906@t) ((lambda (G14908@ls/false) (if G14908@ls/false (apply (lambda (G14910@rest) (cons G14899@i (G14896@f G14910@rest (+ G14899@i '1)))) G14908@ls/false) ((lambda (G14912@t) ((lambda (G14914@ls/false) (if G14914@ls/false (apply (lambda (G14916@rest) (G14896@f G14916@rest (+ G14899@i '1))) G14914@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14912@t))) (G12226@syntax-dispatch G14912@t '(_ . any)))) G14906@t))) (G12226@syntax-dispatch G14906@t '((#(scheme-id mutable) . _) . any)))) G14902@t))) (G12226@syntax-dispatch G14902@t '()))) G14898@fields)))) G14896@f) G14894@fields '0))) (set! G14683@get-mutators (lambda (G14852@foo G14853@fields) ((lambda (G14857@gen-name) (begin (set! G14857@gen-name (lambda (G14892@x) (G12463@datum->syntax G14852@foo (string->symbol (string-append (symbol->string (G12465@syntax->datum G14852@foo)) '"-" (symbol->string (G12465@syntax->datum G14892@x)) '"-set!"))))) ((letrec ((G14858@f (lambda (G14860@fields) ((lambda (G14862@t) ((lambda (G14864@ls/false) (if G14864@ls/false (apply (lambda () '()) G14864@ls/false) ((lambda (G14866@t) ((lambda (G14868@ls/false) (if G14868@ls/false (apply (lambda (G14870@name G14871@accessor G14872@mutator G14873@rest) (cons G14872@mutator (G14858@f G14873@rest))) G14868@ls/false) ((lambda (G14878@t) ((lambda (G14880@ls/false) (if G14880@ls/false (apply (lambda (G14882@name G14883@rest) (cons (G14857@gen-name G14882@name) (G14858@f G14883@rest))) G14880@ls/false) ((lambda (G14886@t) ((lambda (G14888@ls/false) (if G14888@ls/false (apply (lambda (G14890@rest) (G14858@f G14890@rest)) G14888@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14886@t))) (G12226@syntax-dispatch G14886@t '(_ . any)))) G14878@t))) (G12226@syntax-dispatch G14878@t '((#(scheme-id mutable) any) . any)))) G14866@t))) (G12226@syntax-dispatch G14866@t '((#(scheme-id mutable) any any any) . any)))) G14862@t))) (G12226@syntax-dispatch G14862@t '()))) G14860@fields)))) G14858@f) G14853@fields))) '#f))) (set! G14685@get-accessors (lambda (G14784@foo G14785@fields) ((lambda (G14789@gen-name) (begin (set! G14789@gen-name (lambda (G14850@x) (G12463@datum->syntax G14784@foo (string->symbol (string-append (symbol->string (G12465@syntax->datum G14784@foo)) '"-" (symbol->string (G12465@syntax->datum G14850@x))))))) (map (lambda (G14790@field) ((lambda (G14792@t) ((lambda (G14794@ls/false) (if (if G14794@ls/false (begin '#f (apply (lambda (G14796@name G14797@accessor G14798@mutator) (G11647@id? G14797@accessor)) G14794@ls/false)) '#f) (apply (lambda (G14802@name G14803@accessor G14804@mutator) G14803@accessor) G14794@ls/false) ((lambda (G14808@t) ((lambda (G14810@ls/false) (if (if G14810@ls/false (begin '#f (apply (lambda (G14812@name G14813@accessor) (G11647@id? G14813@accessor)) G14810@ls/false)) '#f) (apply (lambda (G14816@name G14817@accessor) G14817@accessor) G14810@ls/false) ((lambda (G14820@t) ((lambda (G14822@ls/false) (if (if G14822@ls/false (begin '#f (apply (lambda (G14824@name) (G11647@id? G14824@name)) G14822@ls/false)) '#f) (apply (lambda (G14826@name) (G14789@gen-name G14826@name)) G14822@ls/false) ((lambda (G14828@t) ((lambda (G14830@ls/false) (if (if G14830@ls/false (begin '#f (apply (lambda (G14832@name) (G11647@id? G14832@name)) G14830@ls/false)) '#f) (apply (lambda (G14834@name) (G14789@gen-name G14834@name)) G14830@ls/false) ((lambda (G14836@t) ((lambda (G14838@ls/false) (if (if G14838@ls/false (begin '#f (apply (lambda (G14840@name) (G11647@id? G14840@name)) G14838@ls/false)) '#f) (apply (lambda (G14842@name) (G14789@gen-name G14842@name)) G14838@ls/false) ((lambda (G14844@t) ((lambda (G14846@ls/false) (if G14846@ls/false (apply (lambda (G14848@others) (G12459@syntax-violation '#f '"invalid field spec" G14790@field)) G14846@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14844@t))) (G12226@syntax-dispatch G14844@t 'any))) G14836@t))) (G12226@syntax-dispatch G14836@t 'any))) G14828@t))) (G12226@syntax-dispatch G14828@t '(#(scheme-id immutable) any)))) G14820@t))) (G12226@syntax-dispatch G14820@t '(#(scheme-id mutable) any)))) G14808@t))) (G12226@syntax-dispatch G14808@t '(#(scheme-id immutable) any any)))) G14792@t))) (G12226@syntax-dispatch G14792@t '(#(scheme-id mutable) any any any)))) G14790@field)) G14785@fields))) '#f))) (set! G14687@enumerate (lambda (G14776@ls) ((letrec ((G14778@f (lambda (G14780@ls G14781@i) (if (null? G14780@ls) '() (cons G14781@i (G14778@f (cdr G14780@ls) (+ G14781@i '1))))))) G14778@f) G14776@ls '0))) (set! G14689@do-define-record (lambda (G14736@namespec G14737@clause*) ((lambda (G14740@foo) ((lambda (G14742@foo-rtd) ((lambda (G14744@foo-rcd) ((lambda (G14746@protocol) ((lambda (G14748@make-foo) ((lambda (G14750@fields) ((lambda (G14752@idx*) ((lambda (G14754@foo-x*) ((lambda (G14756@set-foo-x!*) ((lambda (G14758@set-foo-idx*) ((lambda (G14760@foo?) ((lambda (G14762@foo-rtd-code) ((lambda (G14764@foo-rcd-code) ((lambda (G14766@protocol-code) ((lambda () (G12152@bless (cons 'begin (cons (list 'define G14742@foo-rtd G14762@foo-rtd-code) (cons (list 'define G14746@protocol G14766@protocol-code) (cons (list 'define G14744@foo-rcd G14764@foo-rcd-code) (cons (list 'define-syntax G14740@foo (list 'list ''$rtd (list 'syntax G14742@foo-rtd) (list 'syntax G14744@foo-rcd))) (cons (list 'define G14760@foo? (list 'record-predicate G14742@foo-rtd)) (cons (list 'define G14748@make-foo (list 'record-constructor G14744@foo-rcd)) (append (map (lambda (G14768@foo-x G14769@idx) (list 'define G14768@foo-x (list 'record-accessor G14742@foo-rtd G14769@idx))) G14754@foo-x* G14752@idx*) (map (lambda (G14772@set-foo-x! G14773@idx) (list 'define G14772@set-foo-x! (list 'record-mutator G14742@foo-rtd G14773@idx))) G14756@set-foo-x!* G14758@set-foo-idx*))))))))))))) (G14677@get-protocol-code G14737@clause*))) (G14675@foo-rcd-code G14737@clause* G14742@foo-rtd G14746@protocol (G14673@parent-rcd-code G14737@clause*)))) (G14669@foo-rtd-code G14740@foo G14737@clause* (G14671@parent-rtd-code G14737@clause*)))) (G14665@get-record-predicate-name G14736@namespec))) (G14681@get-mutator-indices G14750@fields))) (G14683@get-mutators G14740@foo G14750@fields))) (G14685@get-accessors G14740@foo G14750@fields))) (G14687@enumerate G14750@fields))) (G14679@get-fields G14737@clause*))) (G14663@get-record-constructor-name G14736@namespec))) (gensym))) (gensym))) (gensym))) (G14661@get-record-name G14736@namespec)))) (set! G14691@verify-clauses (lambda (G14700@x G14701@cls*) ((lambda (G14705@valid-kwds G14707@free-id-member?) (begin (set! G14705@valid-kwds (map G12152@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G14707@free-id-member? (lambda (G14730@x G14731@ls) (if (pair? G14731@ls) (begin '#f ((lambda (G14734@t) (if G14734@t G14734@t (begin '#f (G14707@free-id-member? G14730@x (cdr G14731@ls))))) (G11655@free-id=? G14730@x (car G14731@ls)))) '#f))) ((letrec ((G14708@f (lambda (G14710@cls* G14711@seen*) (if (null? G14710@cls*) (void) ((lambda (G14714@t) ((lambda (G14716@ls/false) (if G14716@ls/false (apply (lambda (G14718@kwd G14719@rest) (if ((lambda (G14722@t) (if G14722@t G14722@t (begin '#f (not (G14707@free-id-member? G14718@kwd G14705@valid-kwds))))) (not (G11647@id? G14718@kwd))) (G12459@syntax-violation '#f '"not a valid define-record-type keyword" G14718@kwd) (if (G11661@bound-id-member? G14718@kwd G14711@seen*) (G12459@syntax-violation '#f '"duplicate use of keyword " G14700@x G14718@kwd) (G14708@f (cdr G14710@cls*) (cons G14718@kwd G14711@seen*))))) G14716@ls/false) ((lambda (G14724@t) ((lambda (G14726@ls/false) (if G14726@ls/false (apply (lambda (G14728@cls) (G12459@syntax-violation '#f '"malformed define-record-type clause" G14728@cls)) G14726@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14724@t))) (G12226@syntax-dispatch G14724@t 'any))) G14714@t))) (G12226@syntax-dispatch G14714@t '(any . any)))) (car G14710@cls*)))))) G14708@f) G14701@cls* '()))) '#f '#f))) ((lambda (G14692@t) ((lambda (G14694@ls/false) (if G14694@ls/false (apply (lambda (G14696@namespec G14697@clause*) (begin (G14691@verify-clauses G14656@x G14697@clause*) (G14689@do-define-record G14696@namespec G14697@clause*))) G14694@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G14692@t))) (G12226@syntax-dispatch G14692@t '(_ any . each-any)))) G14656@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12216@define-condition-type-macro (lambda (G15168@x) ((lambda (G15171@mkname) (begin (set! G15171@mkname (lambda (G15216@name G15217@suffix) (G12463@datum->syntax G15216@name (string->symbol (string-append (symbol->string (G12465@syntax->datum G15216@name)) G15217@suffix))))) ((lambda (G15172@t) ((lambda (G15174@ls/false) (if (if G15174@ls/false (begin '#f (apply (lambda (G15176@ctxt G15177@name G15178@super G15179@constructor G15180@predicate G15181@field* G15182@accessor*) (if (G11647@id? G15177@name) (if (G11647@id? G15178@super) (if (G11647@id? G15179@constructor) (if (G11647@id? G15180@predicate) (if (for-all G11647@id? G15181@field*) (begin '#f (for-all G11647@id? G15182@accessor*)) '#f) '#f) '#f) '#f) '#f)) G15174@ls/false)) '#f) (apply (lambda (G15190@ctxt G15191@name G15192@super G15193@constructor G15194@predicate G15195@field* G15196@accessor*) ((lambda (G15204@aux-accessor*) (G12152@bless (cons 'begin (cons (cons 'define-record-type (cons (list G15191@name G15193@constructor (gensym)) (cons (list 'parent G15192@super) (cons (cons 'fields (map (lambda (G15206@field G15207@aux) (list 'immutable G15206@field G15207@aux)) G15195@field* G15204@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G15194@predicate (list 'condition-predicate (list 'record-type-descriptor G15191@name))) (map (lambda (G15210@accessor G15211@aux) (list 'define G15210@accessor (list 'condition-accessor (list 'record-type-descriptor G15191@name) G15211@aux))) G15196@accessor* G15204@aux-accessor*)))))) (map (lambda (G15214@x) (gensym)) G15196@accessor*))) G15174@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15172@t))) (G12226@syntax-dispatch G15172@t '(any any any any any . #(each (any any)))))) G15168@x))) '#f))) (set! G12218@incorrect-usage-macro (lambda (G15220@e) (G12459@syntax-violation '#f '"incorrect usage of auxiliary keyword" G15220@e))) (set! G12220@parameterize-transformer (lambda (G15222@e G15223@r G15224@mr) ((lambda (G15228@t) ((lambda (G15230@ls/false) (if G15230@ls/false (apply (lambda (G15232@b G15233@b*) (G12284@chi-internal (cons G15232@b G15233@b*) G15223@r G15224@mr)) G15230@ls/false) ((lambda (G15236@t) ((lambda (G15238@ls/false) (if G15238@ls/false (apply (lambda (G15240@olhs* G15241@orhs* G15242@b G15243@b*) ((lambda (G15248@lhs* G15249@rhs* G15250@t* G15251@swap) (G11491@G11277@build-let '#f (append G15248@lhs* G15249@rhs*) (append (G12258@chi-expr* G15240@olhs* G15223@r G15224@mr) (G12258@chi-expr* G15241@orhs* G15223@r G15224@mr)) (G11491@G11277@build-let '#f (list G15251@swap) (list (G11489@G11273@build-lambda '#f '() (G11492@G11349@build-sequence '#f (map (lambda (G15256@t G15257@lhs G15258@rhs) (G11491@G11277@build-let '#f (list G15256@t) (list (list G15257@lhs)) (G11492@G11349@build-sequence '#f (list (list G15257@lhs G15258@rhs) (list 'set! G15258@rhs G15256@t))))) G15250@t* G15248@lhs* G15249@rhs*)))) (list '(primitive dynamic-wind) G15251@swap (G11489@G11273@build-lambda '#f '() (G12284@chi-internal (cons G15242@b G15243@b*) G15223@r G15224@mr)) G15251@swap)))) (map (lambda (G15262@x) (G11521@gen-lexical 'lhs)) G15240@olhs*) (map (lambda (G15264@x) (G11521@gen-lexical 'rhs)) G15240@olhs*) (map (lambda (G15266@x) (G11521@gen-lexical 't)) G15240@olhs*) (G11521@gen-lexical 'swap))) G15238@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15236@t))) (G12226@syntax-dispatch G15236@t '(_ #(each (any any)) any . each-any)))) G15228@t))) (G12226@syntax-dispatch G15228@t '(_ () any . each-any)))) G15222@e))) (set! G12222@foreign-call-transformer (lambda (G15268@e G15269@r G15270@mr) ((lambda (G15274@t) ((lambda (G15276@ls/false) (if G15276@ls/false (apply (lambda (G15278@name G15279@arg*) (cons 'foreign-call (cons (G12262@chi-expr G15278@name G15269@r G15270@mr) (G12258@chi-expr* G15279@arg* G15269@r G15270@mr)))) G15276@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15274@t))) (G12226@syntax-dispatch G15274@t '(_ any . each-any)))) G15268@e))) (set! G12224@convert-pattern (lambda (G15282@pattern G15283@keys) ((lambda (G15287@cvt* G15289@cvt) (begin (set! G15287@cvt* (lambda (G15432@p* G15433@n G15434@ids) (if (null? G15432@p*) (values '() G15434@ids) (call-with-values (lambda () (G15287@cvt* (cdr G15432@p*) G15433@n G15434@ids)) (lambda (G15440@G15438 G15441@G15439) ((lambda (G15444@ids G15445@y) (call-with-values (lambda () (G15289@cvt (car G15432@p*) G15433@n G15444@ids)) (lambda (G15450@G15448 G15451@G15449) ((lambda (G15454@ids G15455@x) (values (cons G15455@x G15445@y) G15454@ids)) G15451@G15449 G15450@G15448)))) G15441@G15439 G15440@G15438)))))) (set! G15289@cvt (lambda (G15290@p G15291@n G15292@ids) ((lambda (G15296@t) ((lambda (G15298@ls/false) (if (if G15298@ls/false (begin '#f (apply (lambda (G15300@id) (G11647@id? G15300@id)) G15298@ls/false)) '#f) (apply (lambda (G15302@id) (if (G11661@bound-id-member? G15290@p G15283@keys) (values (vector 'free-id G15290@p) G15292@ids) (if (G11655@free-id=? G15290@p (G12112@scheme-stx '_)) (values '_ G15292@ids) (values 'any (cons (cons G15290@p G15291@n) G15292@ids))))) G15298@ls/false) ((lambda (G15304@t) ((lambda (G15306@ls/false) (if (if G15306@ls/false (begin '#f (apply (lambda (G15308@p G15309@dots) (G12228@ellipsis? G15309@dots)) G15306@ls/false)) '#f) (apply (lambda (G15312@p G15313@dots) (call-with-values (lambda () (G15289@cvt G15312@p (+ G15291@n '1) G15292@ids)) (lambda (G15318@G15316 G15319@G15317) ((lambda (G15322@ids G15323@p) (values (if (eq? G15323@p 'any) 'each-any (vector 'each G15323@p)) G15322@ids)) G15319@G15317 G15318@G15316)))) G15306@ls/false) ((lambda (G15326@t) ((lambda (G15328@ls/false) (if (if G15328@ls/false (begin '#f (apply (lambda (G15330@x G15331@dots G15332@ys G15333@z) (G12228@ellipsis? G15331@dots)) G15328@ls/false)) '#f) (apply (lambda (G15338@x G15339@dots G15340@ys G15341@z) (call-with-values (lambda () (G15289@cvt G15341@z G15291@n G15292@ids)) (lambda (G15348@G15346 G15349@G15347) ((lambda (G15352@ids G15353@z) (call-with-values (lambda () (G15287@cvt* G15340@ys G15291@n G15352@ids)) (lambda (G15358@G15356 G15359@G15357) ((lambda (G15362@ids G15363@ys) (call-with-values (lambda () (G15289@cvt G15338@x (+ G15291@n '1) G15362@ids)) (lambda (G15368@G15366 G15369@G15367) ((lambda (G15372@ids G15373@x) (values (vector 'each+ G15373@x (reverse G15363@ys) G15353@z) G15372@ids)) G15369@G15367 G15368@G15366)))) G15359@G15357 G15358@G15356)))) G15349@G15347 G15348@G15346)))) G15328@ls/false) ((lambda (G15376@t) ((lambda (G15378@ls/false) (if G15378@ls/false (apply (lambda (G15380@x G15381@y) (call-with-values (lambda () (G15289@cvt G15381@y G15291@n G15292@ids)) (lambda (G15386@G15384 G15387@G15385) ((lambda (G15390@ids G15391@y) (call-with-values (lambda () (G15289@cvt G15380@x G15291@n G15390@ids)) (lambda (G15396@G15394 G15397@G15395) ((lambda (G15400@ids G15401@x) (values (cons G15401@x G15391@y) G15400@ids)) G15397@G15395 G15396@G15394)))) G15387@G15385 G15386@G15384)))) G15378@ls/false) ((lambda (G15404@t) ((lambda (G15406@ls/false) (if G15406@ls/false (apply (lambda () (values '() G15292@ids)) G15406@ls/false) ((lambda (G15408@t) ((lambda (G15410@ls/false) (if (if G15410@ls/false (begin '#f (apply (lambda (G15412@p) (not (G11591@stx? G15412@p))) G15410@ls/false)) '#f) (apply (lambda (G15414@p) (call-with-values (lambda () (G15289@cvt G15414@p G15291@n G15292@ids)) (lambda (G15418@G15416 G15419@G15417) ((lambda (G15422@ids G15423@p) (values (vector 'vector G15423@p) G15422@ids)) G15419@G15417 G15418@G15416)))) G15410@ls/false) ((lambda (G15426@t) ((lambda (G15428@ls/false) (if G15428@ls/false (apply (lambda (G15430@datum) (values (vector 'atom (G11669@stx->datum G15430@datum)) G15292@ids)) G15428@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15426@t))) (G12226@syntax-dispatch G15426@t 'any))) G15408@t))) (G12226@syntax-dispatch G15408@t '#(vector each-any)))) G15404@t))) (G12226@syntax-dispatch G15404@t '()))) G15376@t))) (G12226@syntax-dispatch G15376@t '(any . any)))) G15326@t))) (G12226@syntax-dispatch G15326@t '(any any . #(each+ any () any))))) G15304@t))) (G12226@syntax-dispatch G15304@t '(any any)))) G15296@t))) (G12226@syntax-dispatch G15296@t 'any))) G15290@p))) (G15289@cvt G15282@pattern '0 '()))) '#f '#f))) (set! G12226@syntax-dispatch (lambda (G15458@e G15459@p) ((lambda (G15463@stx^ G15465@match-each G15467@match-each+ G15469@match-each-any G15471@match-empty G15473@combine G15475@match* G15477@match) (begin (set! G15463@stx^ (lambda (G15658@e G15659@m* G15660@s* G15661@ae*) (if (if (null? G15659@m*) (if (null? G15660@s*) (begin '#f (null? G15661@ae*)) '#f) '#f) G15658@e (G11623@mkstx G15658@e G15659@m* G15660@s* G15661@ae*)))) (set! G15465@match-each (lambda (G15629@e G15630@p G15631@m* G15632@s* G15633@ae*) (if (pair? G15629@e) ((lambda (G15639@first) (if G15639@first (begin '#f ((lambda (G15641@rest) (if G15641@rest (begin '#f (cons G15639@first G15641@rest)) '#f)) (G15465@match-each (cdr G15629@e) G15630@p G15631@m* G15632@s* G15633@ae*))) '#f)) (G15477@match (car G15629@e) G15630@p G15631@m* G15632@s* G15633@ae* '())) (if (null? G15629@e) '() (if (G11591@stx? G15629@e) (if (not (G11519@top-marked? G15631@m*)) (begin '#f (call-with-values (lambda () (G11621@join-wraps G15631@m* G15632@s* G15633@ae* G15629@e)) (lambda (G15646@G15643 G15647@G15644 G15648@G15645) ((lambda (G15652@ae* G15653@s* G15654@m*) (G15465@match-each (G11595@stx-expr G15629@e) G15630@p G15654@m* G15653@s* G15652@ae*)) G15648@G15645 G15647@G15644 G15646@G15643)))) '#f) (if (G10455@G10242@annotation? G15629@e) (G15465@match-each (G10457@G10246@annotation-expression G15629@e) G15630@p G15631@m* G15632@s* G15633@ae*) '#f)))))) (set! G15467@match-each+ (lambda (G15571@e G15572@x-pat G15573@y-pat G15574@z-pat G15575@m* G15576@s* G15577@ae* G15578@r) ((letrec ((G15587@f (lambda (G15589@e G15590@m* G15591@s* G15592@ae*) (if (pair? G15589@e) (call-with-values (lambda () (G15587@f (cdr G15589@e) G15590@m* G15591@s* G15592@ae*)) (lambda (G15600@G15597 G15601@G15598 G15602@G15599) ((lambda (G15606@r G15607@y-pat G15608@xr*) (if G15606@r (if (null? G15607@y-pat) ((lambda (G15612@xr) (if G15612@xr (values (cons G15612@xr G15608@xr*) G15607@y-pat G15606@r) (values '#f '#f '#f))) (G15477@match (car G15589@e) G15572@x-pat G15590@m* G15591@s* G15592@ae* '())) (values '() (cdr G15607@y-pat) (G15477@match (car G15589@e) (car G15607@y-pat) G15590@m* G15591@s* G15592@ae* G15606@r))) (values '#f '#f '#f))) G15602@G15599 G15601@G15598 G15600@G15597))) (if (G11591@stx? G15589@e) (if (G11519@top-marked? G15590@m*) (values '() G15573@y-pat (G15477@match G15589@e G15574@z-pat G15590@m* G15591@s* G15592@ae* G15578@r)) (call-with-values (lambda () (G11621@join-wraps G15590@m* G15591@s* G15592@ae* G15589@e)) (lambda (G15617@G15614 G15618@G15615 G15619@G15616) ((lambda (G15623@ae* G15624@s* G15625@m*) (G15587@f (G11595@stx-expr G15589@e) G15625@m* G15624@s* G15623@ae*)) G15619@G15616 G15618@G15615 G15617@G15614)))) (if (G10455@G10242@annotation? G15589@e) (G15587@f (G10457@G10246@annotation-expression G15589@e) G15590@m* G15591@s* G15592@ae*) (values '() G15573@y-pat (G15477@match G15589@e G15574@z-pat G15590@m* G15591@s* G15592@ae* G15578@r)))))))) G15587@f) G15571@e G15575@m* G15576@s* G15577@ae*))) (set! G15469@match-each-any (lambda (G15546@e G15547@m* G15548@s* G15549@ae*) (if (pair? G15546@e) ((lambda (G15554@l) (if G15554@l (begin '#f (cons (G15463@stx^ (car G15546@e) G15547@m* G15548@s* G15549@ae*) G15554@l)) '#f)) (G15469@match-each-any (cdr G15546@e) G15547@m* G15548@s* G15549@ae*)) (if (null? G15546@e) '() (if (G11591@stx? G15546@e) (if (not (G11519@top-marked? G15547@m*)) (begin '#f (call-with-values (lambda () (G11621@join-wraps G15547@m* G15548@s* G15549@ae* G15546@e)) (lambda (G15559@G15556 G15560@G15557 G15561@G15558) ((lambda (G15565@ae* G15566@s* G15567@m*) (G15469@match-each-any (G11595@stx-expr G15546@e) G15567@m* G15566@s* G15565@ae*)) G15561@G15558 G15560@G15557 G15559@G15556)))) '#f) (if (G10455@G10242@annotation? G15546@e) (G15469@match-each-any (G10457@G10246@annotation-expression G15546@e) G15547@m* G15548@s* G15549@ae*) '#f)))))) (set! G15471@match-empty (lambda (G15541@p G15542@r) (if (null? G15541@p) G15542@r (if (eq? G15541@p '_) G15542@r (if (eq? G15541@p 'any) (cons '() G15542@r) (if (pair? G15541@p) (G15471@match-empty (car G15541@p) (G15471@match-empty (cdr G15541@p) G15542@r)) (if (eq? G15541@p 'each-any) (cons '() G15542@r) ((lambda (G15545@t) (if (eqv? G15545@t 'each) (G15471@match-empty (vector-ref G15541@p '1) G15542@r) (if (eqv? G15545@t 'each+) (G15471@match-empty (vector-ref G15541@p '1) (G15471@match-empty (reverse (vector-ref G15541@p '2)) (G15471@match-empty (vector-ref G15541@p '3) G15542@r))) (if (memv G15545@t '(free-id atom)) G15542@r (if (memv G15545@t '(scheme-id atom)) G15542@r (if (eqv? G15545@t 'vector) (G15471@match-empty (vector-ref G15541@p '1) G15542@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G15541@p))))))) (vector-ref G15541@p '0))))))))) (set! G15473@combine (lambda (G15537@r* G15538@r) (if (null? (car G15537@r*)) G15538@r (cons (map car G15537@r*) (G15473@combine (map cdr G15537@r*) G15538@r))))) (set! G15475@match* (lambda (G15505@e G15506@p G15507@m* G15508@s* G15509@ae* G15510@r) (if (null? G15506@p) (if (null? G15505@e) (begin '#f G15510@r) '#f) (if (pair? G15506@p) (if (pair? G15505@e) (begin '#f (G15477@match (car G15505@e) (car G15506@p) G15507@m* G15508@s* G15509@ae* (G15477@match (cdr G15505@e) (cdr G15506@p) G15507@m* G15508@s* G15509@ae* G15510@r))) '#f) (if (eq? G15506@p 'each-any) ((lambda (G15517@l) (if G15517@l (begin '#f (cons G15517@l G15510@r)) '#f)) (G15469@match-each-any G15505@e G15507@m* G15508@s* G15509@ae*)) ((lambda (G15519@t) (if (eqv? G15519@t 'each) (if (null? G15505@e) (G15471@match-empty (vector-ref G15506@p '1) G15510@r) ((lambda (G15535@r*) (if G15535@r* (begin '#f (G15473@combine G15535@r* G15510@r)) '#f)) (G15465@match-each G15505@e (vector-ref G15506@p '1) G15507@m* G15508@s* G15509@ae*))) (if (eqv? G15519@t 'free-id) (if (symbol? G15505@e) (if (G11519@top-marked? G15507@m*) (if (G11655@free-id=? (G15463@stx^ G15505@e G15507@m* G15508@s* G15509@ae*) (vector-ref G15506@p '1)) (begin '#f G15510@r) '#f) '#f) '#f) (if (eqv? G15519@t 'scheme-id) (if (symbol? G15505@e) (if (G11519@top-marked? G15507@m*) (if (G11655@free-id=? (G15463@stx^ G15505@e G15507@m* G15508@s* G15509@ae*) (G12112@scheme-stx (vector-ref G15506@p '1))) (begin '#f G15510@r) '#f) '#f) '#f) (if (eqv? G15519@t 'each+) (call-with-values (lambda () (G15467@match-each+ G15505@e (vector-ref G15506@p '1) (vector-ref G15506@p '2) (vector-ref G15506@p '3) G15507@m* G15508@s* G15509@ae* G15510@r)) (lambda (G15523@G15520 G15524@G15521 G15525@G15522) ((lambda (G15529@r G15530@y-pat G15531@xr*) (if G15529@r (if (null? G15530@y-pat) (begin '#f (if (null? G15531@xr*) (G15471@match-empty (vector-ref G15506@p '1) G15529@r) (G15473@combine G15531@xr* G15529@r))) '#f) '#f)) G15525@G15522 G15524@G15521 G15523@G15520))) (if (eqv? G15519@t 'atom) (if (equal? (vector-ref G15506@p '1) (G11667@strip G15505@e G15507@m*)) (begin '#f G15510@r) '#f) (if (eqv? G15519@t 'vector) (if (vector? G15505@e) (begin '#f (G15477@match (vector->list G15505@e) (vector-ref G15506@p '1) G15507@m* G15508@s* G15509@ae* G15510@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G15506@p)))))))) (vector-ref G15506@p '0))))))) (set! G15477@match (lambda (G15478@e G15479@p G15480@m* G15481@s* G15482@ae* G15483@r) (if (not G15483@r) '#f (if (eq? G15479@p '_) G15483@r (if (eq? G15479@p 'any) (cons (G15463@stx^ G15478@e G15480@m* G15481@s* G15482@ae*) G15483@r) (if (G11591@stx? G15478@e) (if (not (G11519@top-marked? G15480@m*)) (begin '#f (call-with-values (lambda () (G11621@join-wraps G15480@m* G15481@s* G15482@ae* G15478@e)) (lambda (G15493@G15490 G15494@G15491 G15495@G15492) ((lambda (G15499@ae* G15500@s* G15501@m*) (G15477@match (G11595@stx-expr G15478@e) G15479@p G15501@m* G15500@s* G15499@ae* G15483@r)) G15495@G15492 G15494@G15491 G15493@G15490)))) '#f) (if (G10455@G10242@annotation? G15478@e) (G15477@match (G10457@G10246@annotation-expression G15478@e) G15479@p G15480@m* G15481@s* G15482@ae* G15483@r) (G15475@match* G15478@e G15479@p G15480@m* G15481@s* G15482@ae* G15483@r)))))))) (G15477@match G15458@e G15459@p '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12228@ellipsis? (lambda (G15666@x) (if (G11647@id? G15666@x) (begin '#f (G11655@free-id=? G15666@x (G12112@scheme-stx '...))) '#f))) (set! G12230@underscore? (lambda (G15668@x) (if (G11647@id? G15668@x) (begin '#f (G11655@free-id=? G15668@x (G12112@scheme-stx '_))) '#f))) (set! G12232@verify-literals (lambda (G15670@lits G15671@expr) (for-each (lambda (G15674@x) (if ((lambda (G15676@t) (if G15676@t G15676@t ((lambda (G15678@t) (if G15678@t G15678@t (begin '#f (G12230@underscore? G15674@x)))) (G12228@ellipsis? G15674@x)))) (not (G11647@id? G15674@x))) (G12459@syntax-violation '#f '"invalid literal" G15671@expr G15674@x) (void))) G15670@lits))) (set! G12234@syntax-case-transformer ((lambda () ((lambda (G15681@build-dispatch-call G15683@invalid-ids-error G15685@gen-clause G15687@gen-syntax-case) (begin (set! G15681@build-dispatch-call (lambda (G15792@pvars G15793@expr G15794@y G15795@r G15796@mr) ((lambda (G15802@ids G15803@levels) ((lambda (G15806@labels G15807@new-vars) ((lambda (G15810@body) (list '(primitive apply) (G11489@G11273@build-lambda '#f G15807@new-vars G15810@body) G15794@y)) (G12262@chi-expr (G11627@add-subst (G11576@make-full-rib G15802@ids G15806@labels) G15793@expr) (append (map (lambda (G15812@label G15813@var G15814@level) (cons G15812@label (G11679@make-binding 'syntax (cons G15813@var G15814@level)))) G15806@labels G15807@new-vars (map cdr G15792@pvars)) G15795@r) G15796@mr))) (map G11525@gen-label G15802@ids) (map G11521@gen-lexical G15802@ids))) (map car G15792@pvars) (map cdr G15792@pvars)))) (set! G15683@invalid-ids-error (lambda (G15780@id* G15781@e G15782@class) ((letrec ((G15786@find (lambda (G15788@id* G15789@ok*) (if (null? G15788@id*) (G12459@syntax-violation '#f '"invalid syntax" G15781@e) (if (G11647@id? (car G15788@id*)) (if (G11661@bound-id-member? (car G15788@id*) G15789@ok*) (G12453@syntax-error (car G15788@id*) '"duplicate " G15782@class) (G15786@find (cdr G15788@id*) (cons (car G15788@id*) G15789@ok*))) (G12453@syntax-error (car G15788@id*) '"invalid " G15782@class)))))) G15786@find) G15780@id* '()))) (set! G15685@gen-clause (lambda (G15742@x G15743@keys G15744@clauses G15745@r G15746@mr G15747@pat G15748@fender G15749@expr) (call-with-values (lambda () (G12224@convert-pattern G15747@pat G15743@keys)) (lambda (G15760@G15758 G15761@G15759) ((lambda (G15764@pvars G15765@p) (if (not (G11659@distinct-bound-ids? (map car G15764@pvars))) (G15683@invalid-ids-error (map car G15764@pvars) G15747@pat '"pattern variable") (if (not (for-all (lambda (G15768@x) (not (G12228@ellipsis? (car G15768@x)))) G15764@pvars)) (G12459@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G15747@pat) ((lambda (G15770@y) ((lambda (G15772@test) ((lambda (G15774@conseq) ((lambda (G15776@altern) (list (G11489@G11273@build-lambda '#f (list G15770@y) (list 'if G15772@test G15774@conseq G15776@altern)) (list '(primitive syntax-dispatch) G15742@x (list 'quote G15765@p)))) (G15687@gen-syntax-case G15742@x G15743@keys G15744@clauses G15745@r G15746@mr))) (G15681@build-dispatch-call G15764@pvars G15749@expr G15770@y G15745@r G15746@mr))) (if (eq? G15748@fender '#t) G15770@y ((lambda (G15778@call) (list 'if G15770@y G15778@call (list 'quote '#f))) (G15681@build-dispatch-call G15764@pvars G15748@fender G15770@y G15745@r G15746@mr))))) (G11521@gen-lexical 'tmp))))) G15761@G15759 G15760@G15758))))) (set! G15687@gen-syntax-case (lambda (G15708@x G15709@keys G15710@clauses G15711@r G15712@mr) (if (null? G15710@clauses) (list '(primitive syntax-error) G15708@x) ((lambda (G15718@t) ((lambda (G15720@ls/false) (if G15720@ls/false (apply (lambda (G15722@pat G15723@expr) (if (if (G11647@id? G15722@pat) (if (not (G11661@bound-id-member? G15722@pat G15709@keys)) (begin '#f (not (G12228@ellipsis? G15722@pat))) '#f) '#f) (if (G11655@free-id=? G15722@pat (G12112@scheme-stx '_)) (G12262@chi-expr G15723@expr G15711@r G15712@mr) ((lambda (G15726@lab G15727@lex) ((lambda (G15730@body) (list (G11489@G11273@build-lambda '#f (list G15727@lex) G15730@body) G15708@x)) (G12262@chi-expr (G11627@add-subst (G11576@make-full-rib (list G15722@pat) (list G15726@lab)) G15723@expr) (cons (cons G15726@lab (G11679@make-binding 'syntax (cons G15727@lex '0))) G15711@r) G15712@mr))) (G11525@gen-label G15722@pat) (G11521@gen-lexical G15722@pat))) (G15685@gen-clause G15708@x G15709@keys (cdr G15710@clauses) G15711@r G15712@mr G15722@pat '#t G15723@expr))) G15720@ls/false) ((lambda (G15732@t) ((lambda (G15734@ls/false) (if G15734@ls/false (apply (lambda (G15736@pat G15737@fender G15738@expr) (G15685@gen-clause G15708@x G15709@keys (cdr G15710@clauses) G15711@r G15712@mr G15736@pat G15737@fender G15738@expr)) G15734@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15732@t))) (G12226@syntax-dispatch G15732@t '(any any any)))) G15718@t))) (G12226@syntax-dispatch G15718@t '(any any)))) (car G15710@clauses))))) (lambda (G15688@e G15689@r G15690@mr) ((lambda (G15694@t) ((lambda (G15696@ls/false) (if G15696@ls/false (apply (lambda (G15698@expr G15699@keys G15700@clauses) (begin (G12232@verify-literals G15699@keys G15688@e) ((lambda (G15704@x) ((lambda (G15706@body) (list (G11489@G11273@build-lambda '#f (list G15704@x) G15706@body) (G12262@chi-expr G15698@expr G15689@r G15690@mr))) (G15687@gen-syntax-case G15704@x G15699@keys G15700@clauses G15689@r G15690@mr))) (G11521@gen-lexical 'tmp)))) G15696@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15694@t))) (G12226@syntax-dispatch G15694@t '(_ any each-any . each-any)))) G15688@e)))) '#f '#f '#f '#f)))) (set! G12236@ellipsis-map (lambda (G15818@proc G15819@ls . G15822@ls*) ((lambda (G15825@who) (begin (set! G15825@who '...) (begin (if (list? G15819@ls) (void) (assertion-violation G15825@who '"not a list" G15819@ls)) (if (null? G15822@ls*) (void) ((lambda (G15826@n) (for-each (lambda (G15828@x) (begin (if (list? G15828@x) (void) (assertion-violation G15825@who '"not a list" G15828@x)) (if (= (length G15828@x) G15826@n) (void) (assertion-violation G15825@who '"length mismatch" G15819@ls G15828@x)))) G15822@ls*)) (length G15819@ls))) (apply map G15818@proc G15819@ls G15822@ls*)))) '#f))) (set! G12238@syntax-transformer ((lambda () ((lambda (G15831@gen-syntax G15833@gen-ref G15835@gen-append G15837@gen-mappend G15839@gen-map G15841@gen-cons G15843@gen-vector G15845@regen) (begin (set! G15831@gen-syntax (lambda (G15944@src G15945@e G15946@r G15947@maps G15948@ellipsis? G15949@vec?) ((lambda (G15956@t) ((lambda (G15958@ls/false) (if (if G15958@ls/false (begin '#f (apply (lambda (G15960@dots) (G15948@ellipsis? G15960@dots)) G15958@ls/false)) '#f) (apply (lambda (G15962@dots) (G12459@syntax-violation '#f '"misplaced ellipsis in syntax form" G15944@src)) G15958@ls/false) ((lambda (G15964@t) ((lambda (G15966@ls/false) (if (if G15966@ls/false (begin '#f (apply (lambda (G15968@id) (G11647@id? G15968@id)) G15966@ls/false)) '#f) (apply (lambda (G15970@id) ((lambda (G15972@label) ((lambda (G15974@b) ((lambda () (if (eq? (G11681@binding-type G15974@b) 'syntax) (call-with-values (lambda () ((lambda (G15978@var.lev) (G15833@gen-ref G15944@src (car G15978@var.lev) (cdr G15978@var.lev) G15947@maps)) (G11683@binding-value G15974@b))) (lambda (G15980@G15976 G15981@G15977) ((lambda (G15984@maps G15985@var) (values (list 'ref G15985@var) G15984@maps)) G15981@G15977 G15980@G15976))) (values (list 'quote G15945@e) G15947@maps))))) (G11677@label->binding G15972@label G15946@r))) (G11673@id->label G15945@e))) G15966@ls/false) ((lambda (G15988@t) ((lambda (G15990@ls/false) (if (if G15990@ls/false (begin '#f (apply (lambda (G15992@dots G15993@e) (G15948@ellipsis? G15992@dots)) G15990@ls/false)) '#f) (apply (lambda (G15996@dots G15997@e) (if G15949@vec? (G12459@syntax-violation '#f '"misplaced ellipsis in syntax form" G15944@src) (G15831@gen-syntax G15944@src G15997@e G15946@r G15947@maps (lambda (G16000@x) '#f) '#f))) G15990@ls/false) ((lambda (G16002@t) ((lambda (G16004@ls/false) (if (if G16004@ls/false (begin '#f (apply (lambda (G16006@x G16007@dots G16008@y) (G15948@ellipsis? G16007@dots)) G16004@ls/false)) '#f) (apply (lambda (G16012@x G16013@dots G16014@y) ((letrec ((G16018@f (lambda (G16020@y G16021@k) ((lambda (G16024@t) ((lambda (G16026@ls/false) (if G16026@ls/false (apply (lambda () (G16021@k G15947@maps)) G16026@ls/false) ((lambda (G16028@t) ((lambda (G16030@ls/false) (if (if G16030@ls/false (begin '#f (apply (lambda (G16032@dots G16033@y) (G15948@ellipsis? G16032@dots)) G16030@ls/false)) '#f) (apply (lambda (G16036@dots G16037@y) (G16018@f G16037@y (lambda (G16040@maps) (call-with-values (lambda () (G16021@k (cons '() G16040@maps))) (lambda (G16044@G16042 G16045@G16043) ((lambda (G16048@maps G16049@x) (if (null? (car G16048@maps)) (G12459@syntax-violation '#f '"extra ellipsis in syntax form" G15944@src) (values (G15837@gen-mappend G16049@x (car G16048@maps)) (cdr G16048@maps)))) G16045@G16043 G16044@G16042)))))) G16030@ls/false) ((lambda (G16052@t) ((lambda (G16054@ls/false) (if G16054@ls/false (apply (lambda () (call-with-values (lambda () (G15831@gen-syntax G15944@src G16020@y G15946@r G15947@maps G15948@ellipsis? G15949@vec?)) (lambda (G16058@G16056 G16059@G16057) ((lambda (G16062@maps G16063@y) (call-with-values (lambda () (G16021@k G16062@maps)) (lambda (G16068@G16066 G16069@G16067) ((lambda (G16072@maps G16073@x) (values (G15835@gen-append G16073@x G16063@y) G16072@maps)) G16069@G16067 G16068@G16066)))) G16059@G16057 G16058@G16056)))) G16054@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16052@t))) (G12226@syntax-dispatch G16052@t '_))) G16028@t))) (G12226@syntax-dispatch G16028@t '(any . any)))) G16024@t))) (G12226@syntax-dispatch G16024@t '()))) G16020@y)))) G16018@f) G16014@y (lambda (G16076@maps) (call-with-values (lambda () (G15831@gen-syntax G15944@src G16012@x G15946@r (cons '() G16076@maps) G15948@ellipsis? '#f)) (lambda (G16080@G16078 G16081@G16079) ((lambda (G16084@maps G16085@x) (if (null? (car G16084@maps)) (G12459@syntax-violation '#f '"extra ellipsis in syntax form" G15944@src) (values (G15839@gen-map G16085@x (car G16084@maps)) (cdr G16084@maps)))) G16081@G16079 G16080@G16078)))))) G16004@ls/false) ((lambda (G16088@t) ((lambda (G16090@ls/false) (if G16090@ls/false (apply (lambda (G16092@x G16093@y) (call-with-values (lambda () (G15831@gen-syntax G15944@src G16092@x G15946@r G15947@maps G15948@ellipsis? '#f)) (lambda (G16098@G16096 G16099@G16097) ((lambda (G16102@maps G16103@xnew) (call-with-values (lambda () (G15831@gen-syntax G15944@src G16093@y G15946@r G16102@maps G15948@ellipsis? G15949@vec?)) (lambda (G16108@G16106 G16109@G16107) ((lambda (G16112@maps G16113@ynew) (values (G15841@gen-cons G15945@e G16092@x G16093@y G16103@xnew G16113@ynew) G16112@maps)) G16109@G16107 G16108@G16106)))) G16099@G16097 G16098@G16096)))) G16090@ls/false) ((lambda (G16116@t) ((lambda (G16118@ls/false) (if G16118@ls/false (apply (lambda (G16120@ls) (call-with-values (lambda () (G15831@gen-syntax G15944@src G16120@ls G15946@r G15947@maps G15948@ellipsis? '#t)) (lambda (G16124@G16122 G16125@G16123) ((lambda (G16128@maps G16129@lsnew) (values (G15843@gen-vector G15945@e G16120@ls G16129@lsnew) G16128@maps)) G16125@G16123 G16124@G16122)))) G16118@ls/false) ((lambda (G16132@t) ((lambda (G16134@ls/false) (if G16134@ls/false (apply (lambda () (values (list 'quote G15945@e) G15947@maps)) G16134@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16132@t))) (G12226@syntax-dispatch G16132@t '_))) G16116@t))) (G12226@syntax-dispatch G16116@t '#(vector each-any)))) G16088@t))) (G12226@syntax-dispatch G16088@t '(any . any)))) G16002@t))) (G12226@syntax-dispatch G16002@t '(any any . any)))) G15988@t))) (G12226@syntax-dispatch G15988@t '(any any)))) G15964@t))) (G12226@syntax-dispatch G15964@t 'any))) G15956@t))) (G12226@syntax-dispatch G15956@t 'any))) G15945@e))) (set! G15833@gen-ref (lambda (G15920@src G15921@var G15922@level G15923@maps) (if (= G15922@level '0) (values G15921@var G15923@maps) (if (null? G15923@maps) (G12459@syntax-violation '#f '"missing ellipsis in syntax form" G15920@src) (call-with-values (lambda () (G15833@gen-ref G15920@src G15921@var (- G15922@level '1) (cdr G15923@maps))) (lambda (G15930@G15928 G15931@G15929) ((lambda (G15934@outer-maps G15935@outer-var) ((lambda (G15938@t) (if G15938@t ((lambda (G15940@b) (values (cdr G15940@b) G15923@maps)) G15938@t) ((lambda (G15942@inner-var) (values G15942@inner-var (cons (cons (cons G15935@outer-var G15942@inner-var) (car G15923@maps)) G15934@outer-maps))) (G11521@gen-lexical 'tmp)))) (assq G15935@outer-var (car G15923@maps)))) G15931@G15929 G15930@G15928))))))) (set! G15835@gen-append (lambda (G15916@x G15917@y) (if (equal? G15917@y ''()) G15916@x (list 'append G15916@x G15917@y)))) (set! G15837@gen-mappend (lambda (G15912@e G15913@map-env) (list 'apply '(primitive append) (G15839@gen-map G15912@e G15913@map-env)))) (set! G15839@gen-map (lambda (G15894@e G15895@map-env) ((lambda (G15898@formals G15899@actuals) (if (eq? (car G15894@e) 'ref) (car G15899@actuals) (if (for-all (lambda (G15902@x) (if (eq? (car G15902@x) 'ref) (begin '#f (memq (cadr G15902@x) G15898@formals)) '#f)) (cdr G15894@e)) ((lambda (G15904@args) (cons 'map (cons (list 'primitive (car G15894@e)) G15904@args))) (map ((lambda (G15906@r) (lambda (G15908@x) (cdr (assq (cadr G15908@x) G15906@r)))) (map cons G15898@formals G15899@actuals)) (cdr G15894@e))) (cons* 'map (list 'lambda G15898@formals G15894@e) G15899@actuals)))) (map cdr G15895@map-env) (map (lambda (G15910@x) (list 'ref (car G15910@x))) G15895@map-env)))) (set! G15841@gen-cons (lambda (G15879@e G15880@x G15881@y G15882@xnew G15883@ynew) ((lambda (G15889@t) (if (eqv? G15889@t 'quote) (if (eq? (car G15882@xnew) 'quote) ((lambda (G15890@xnew G15891@ynew) (if (if (eq? G15890@xnew G15880@x) (begin '#f (eq? G15891@ynew G15881@y)) '#f) (list 'quote G15879@e) (list 'quote (cons G15890@xnew G15891@ynew)))) (cadr G15882@xnew) (cadr G15883@ynew)) (if (null? (cadr G15883@ynew)) (list 'list G15882@xnew) (list 'cons G15882@xnew G15883@ynew))) (if (eqv? G15889@t 'list) (cons 'list (cons G15882@xnew (cdr G15883@ynew))) (list 'cons G15882@xnew G15883@ynew)))) (car G15883@ynew)))) (set! G15843@gen-vector (lambda (G15873@e G15874@ls G15875@lsnew) (if (eq? (car G15875@lsnew) 'quote) (if (eq? (cadr G15875@lsnew) G15874@ls) (list 'quote G15873@e) (list 'quote (list->vector (cadr G15875@lsnew)))) (if (eq? (car G15875@lsnew) 'list) (cons 'vector (cdr G15875@lsnew)) (list 'list->vector G15875@lsnew))))) (set! G15845@regen (lambda (G15868@x) ((lambda (G15870@t) (if (eqv? G15870@t 'ref) (cadr G15868@x) (if (eqv? G15870@t 'primitive) (list 'primitive (cadr G15868@x)) (if (eqv? G15870@t 'quote) (list 'quote (cadr G15868@x)) (if (eqv? G15870@t 'lambda) (G11489@G11273@build-lambda '#f (cadr G15868@x) (G15845@regen (caddr G15868@x))) (if (eqv? G15870@t 'map) ((lambda (G15871@ls) (cons '(primitive ellipsis-map) G15871@ls)) (map G15845@regen (cdr G15868@x))) (cons (list 'primitive (car G15868@x)) (map G15845@regen (cdr G15868@x))))))))) (car G15868@x)))) (lambda (G15846@e G15847@r G15848@mr) ((lambda (G15852@t) ((lambda (G15854@ls/false) (if G15854@ls/false (apply (lambda (G15856@x) (call-with-values (lambda () (G15831@gen-syntax G15846@e G15856@x G15847@r '() G12228@ellipsis? '#f)) (lambda (G15860@G15858 G15861@G15859) ((lambda (G15864@maps G15865@e) (G15845@regen G15865@e)) G15861@G15859 G15860@G15858)))) G15854@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G15852@t))) (G12226@syntax-dispatch G15852@t '(_ any)))) G15846@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G12240@core-macro-transformer (lambda (G16136@name) ((lambda (G16138@t) (if (eqv? G16138@t 'quote) G12146@quote-transformer (if (eqv? G16138@t 'lambda) G12150@lambda-transformer (if (eqv? G16138@t 'case-lambda) G12148@case-lambda-transformer (if (eqv? G16138@t 'letrec) G12126@letrec-transformer (if (eqv? G16138@t 'letrec*) G12128@letrec*-transformer (if (eqv? G16138@t 'case) G12144@case-transformer (if (eqv? G16138@t 'if) G12142@if-transformer (if (eqv? G16138@t 'when) G12138@when-transformer (if (eqv? G16138@t 'unless) G12140@unless-transformer (if (eqv? G16138@t 'parameterize) G12220@parameterize-transformer (if (eqv? G16138@t 'foreign-call) G12222@foreign-call-transformer (if (eqv? G16138@t 'syntax-case) G12234@syntax-case-transformer (if (eqv? G16138@t 'syntax) G12238@syntax-transformer (if (eqv? G16138@t 'type-descriptor) G12132@type-descriptor-transformer (if (eqv? G16138@t 'record-type-descriptor) G12134@record-type-descriptor-transformer (if (eqv? G16138@t 'record-constructor-descriptor) G12136@record-constructor-descriptor-transformer (if (eqv? G16138@t 'fluid-let-syntax) G12130@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G16136@name))))))))))))))))))) G16136@name))) (set! G12242@file-options-macro (lambda (G16139@x) ((lambda (G16141@t) ((lambda (G16143@ls/false) (if (if G16143@ls/false (begin '#f (apply (lambda (G16145@opt*) (if (for-all G11647@id? G16145@opt*) (begin '#f (G10464@G10412@file-options-spec (map G11649@id->sym G16145@opt*))) '#f)) G16143@ls/false)) '#f) (apply (lambda (G16147@opt*) (G12152@bless (list 'quote (G10464@G10412@file-options-spec (map G11649@id->sym G16147@opt*))))) G16143@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16141@t))) (G12226@syntax-dispatch G16141@t '(_ . each-any)))) G16139@x))) (set! G12244@symbol-macro (lambda (G16149@x G16150@set) ((lambda (G16153@t) ((lambda (G16155@ls/false) (if (if G16155@ls/false (begin '#f (apply (lambda (G16157@name) (if (G11647@id? G16157@name) (begin '#f (memq (G11649@id->sym G16157@name) G16150@set)) '#f)) G16155@ls/false)) '#f) (apply (lambda (G16159@name) (G12152@bless (list 'quote G16159@name))) G16155@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16153@t))) (G12226@syntax-dispatch G16153@t '(_ any)))) G16149@x))) (set! G12246@macro-transformer (lambda (G16161@x) (if (procedure? G16161@x) G16161@x (if (symbol? G16161@x) ((lambda (G16163@t) (if (eqv? G16163@t 'define-record-type) G12214@define-record-type-macro (if (eqv? G16163@t 'define-struct) G12212@define-struct-macro (if (eqv? G16163@t 'include) G12202@include-macro (if (eqv? G16163@t 'cond) G12198@cond-macro (if (eqv? G16163@t 'let) G12158@let-macro (if (eqv? G16163@t 'do) G12190@do-macro (if (eqv? G16163@t 'or) G12194@or-macro (if (eqv? G16163@t 'and) G12196@and-macro (if (eqv? G16163@t 'let*) G12192@let*-macro (if (eqv? G16163@t 'let-values) G12160@let-values-macro (if (eqv? G16163@t 'let*-values) G12162@let*-values-macro (if (eqv? G16163@t 'syntax-rules) G12206@syntax-rules-macro (if (eqv? G16163@t 'quasiquote) G12208@quasiquote-macro (if (eqv? G16163@t 'quasisyntax) G12210@quasisyntax-macro (if (eqv? G16163@t 'with-syntax) G12154@with-syntax-macro (if (eqv? G16163@t 'identifier-syntax) G12188@identifier-syntax-macro (if (eqv? G16163@t 'time) G12180@time-macro (if (eqv? G16163@t 'delay) G12182@delay-macro (if (eqv? G16163@t 'assert) G12184@assert-macro (if (eqv? G16163@t 'endianness) G12186@endianness-macro (if (eqv? G16163@t 'guard) G12176@guard-macro (if (eqv? G16163@t 'define-enumeration) G12178@define-enumeration-macro (if (eqv? G16163@t 'trace-lambda) G12164@trace-lambda-macro (if (eqv? G16163@t 'trace-define) G12166@trace-define-macro (if (eqv? G16163@t 'trace-define-syntax) G12168@trace-define-syntax-macro (if (eqv? G16163@t 'trace-let-syntax) G12172@trace-let-syntax-macro (if (eqv? G16163@t 'trace-letrec-syntax) G12174@trace-letrec-syntax-macro (if (eqv? G16163@t 'define-condition-type) G12216@define-condition-type-macro (if (eqv? G16163@t 'include-into) G12204@include-into-macro (if (eqv? G16163@t 'eol-style) (lambda (G16168@x) (G12244@symbol-macro G16168@x '(none lf cr crlf nel crnel ls))) (if (eqv? G16163@t 'error-handling-mode) (lambda (G16166@x) (G12244@symbol-macro G16166@x '(ignore raise replace))) (if (eqv? G16163@t 'buffer-mode) (lambda (G16164@x) (G12244@symbol-macro G16164@x '(none line block))) (if (eqv? G16163@t 'file-options) G12242@file-options-macro (if (memv G16163@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G12218@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G16161@x)))))))))))))))))))))))))))))))))))) G16161@x) (error 'core-macro-transformer '"BUG: invalid macro" G16161@x))))) (set! G12248@local-macro-transformer (lambda (G16170@x) (car G16170@x))) (set! G12250@do-macro-call (lambda (G16172@transformer G16173@expr) ((lambda (G16176@out) (begin ((letrec ((G16178@f (lambda (G16180@x) (if (G11591@stx? G16180@x) (void) (if (pair? G16180@x) (begin (G16178@f (car G16180@x)) (G16178@f (cdr G16180@x))) (if (vector? G16180@x) (vector-for-each G16178@f G16180@x) (if (symbol? G16180@x) (G12459@syntax-violation '#f '"raw symbol encountered in output of macro" G16173@expr G16180@x) (void)))))))) G16178@f) G16176@out) (G11625@add-mark (G11615@gen-mark) G16176@out G16173@expr))) (G16172@transformer (G11625@add-mark G11617@anti-mark G16173@expr '#f))))) (set! G12252@chi-macro (lambda (G16182@p G16183@e) (G12250@do-macro-call (G12246@macro-transformer G16182@p) G16183@e))) (set! G12254@chi-local-macro (lambda (G16186@p G16187@e) (G12250@do-macro-call (G12248@local-macro-transformer G16186@p) G16187@e))) (set! G12256@chi-global-macro (lambda (G16190@p G16191@e) ((lambda (G16194@lib G16195@loc) (begin (G11135@G10776@visit-library G16194@lib) ((lambda (G16198@x) ((lambda (G16200@transformer) (G12250@do-macro-call G16200@transformer G16191@e)) (if (procedure? G16198@x) G16198@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G16198@x)))) (symbol-value G16195@loc)))) (car G16190@p) (cdr G16190@p)))) (set! G12258@chi-expr* (lambda (G16202@e* G16203@r G16204@mr) (if (null? G16202@e*) '() ((lambda (G16208@e) (cons G16208@e (G12258@chi-expr* (cdr G16202@e*) G16203@r G16204@mr))) (G12262@chi-expr (car G16202@e*) G16203@r G16204@mr))))) (set! G12260@chi-application (lambda (G16210@e G16211@r G16212@mr) ((lambda (G16216@t) ((lambda (G16218@ls/false) (if G16218@ls/false (apply (lambda (G16220@rator G16221@rands) ((lambda (G16224@rator) (cons G16224@rator (G12258@chi-expr* G16221@rands G16211@r G16212@mr))) (G12262@chi-expr G16220@rator G16211@r G16212@mr))) G16218@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16216@t))) (G12226@syntax-dispatch G16216@t '(any . each-any)))) G16210@e))) (set! G12262@chi-expr (lambda (G16226@e G16227@r G16228@mr) (call-with-values (lambda () (G11687@syntax-type G16226@e G16227@r)) (lambda (G16235@G16232 G16236@G16233 G16237@G16234) ((lambda (G16241@kwd G16242@value G16243@type) ((lambda (G16247@t) (if (eqv? G16247@t 'core-macro) ((lambda (G16297@transformer) (G16297@transformer G16226@e G16227@r G16228@mr)) (G12240@core-macro-transformer G16242@value)) (if (eqv? G16247@t 'global) ((lambda (G16293@lib) ((lambda (G16295@loc) ((lambda () (begin ((G12337@inv-collector) G16293@lib) G16295@loc)))) (cdr G16242@value))) (car G16242@value)) (if (eqv? G16247@t 'core-prim) ((lambda (G16291@name) (list 'primitive G16291@name)) G16242@value) (if (eqv? G16247@t 'call) (G12260@chi-application G16226@e G16227@r G16228@mr) (if (eqv? G16247@t 'lexical) ((lambda (G16289@lex) G16289@lex) (G12114@lexical-var G16242@value)) (if (memv G16247@t '(global-macro global-macro!)) (G12262@chi-expr (G12256@chi-global-macro G16242@value G16226@e) G16227@r G16228@mr) (if (memv G16247@t '(local-macro local-macro!)) (G12262@chi-expr (G12254@chi-local-macro G16242@value G16226@e) G16227@r G16228@mr) (if (memv G16247@t '(macro macro!)) (G12262@chi-expr (G12252@chi-macro G16242@value G16226@e) G16227@r G16228@mr) (if (eqv? G16247@t 'constant) ((lambda (G16287@datum) (list 'quote G16287@datum)) G16242@value) (if (eqv? G16247@t 'set!) (G12264@chi-set! G16226@e G16227@r G16228@mr) (if (eqv? G16247@t 'begin) ((lambda (G16279@t) ((lambda (G16281@ls/false) (if G16281@ls/false (apply (lambda (G16283@x G16284@x*) (G11492@G11349@build-sequence '#f (G12258@chi-expr* (cons G16283@x G16284@x*) G16227@r G16228@mr))) G16281@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16279@t))) (G12226@syntax-dispatch G16279@t '(_ any . each-any)))) G16226@e) (if (memv G16247@t '(let-syntax letrec-syntax)) ((lambda (G16249@t) ((lambda (G16251@ls/false) (if (if G16251@ls/false (begin '#f (apply (lambda (G16253@xlhs* G16254@xrhs* G16255@xbody G16256@xbody*) (if (G11657@valid-bound-ids? G16253@xlhs*) (void) (G12459@syntax-violation '#f '"invalid identifiers" G16226@e))) G16251@ls/false)) '#f) (apply (lambda (G16261@xlhs* G16262@xrhs* G16263@xbody G16264@xbody*) ((lambda (G16269@xlab*) ((lambda (G16271@xrib) ((lambda (G16273@xb*) ((lambda () (G11492@G11349@build-sequence '#f (G12258@chi-expr* (map (lambda (G16275@x) (G11627@add-subst G16271@xrib G16275@x)) (cons G16263@xbody G16264@xbody*)) (append (map cons G16269@xlab* G16273@xb*) G16227@r) (append (map cons G16269@xlab* G16273@xb*) G16228@mr)))))) (map (lambda (G16277@x) (G11718@make-eval-transformer (G12323@expand-transformer (if (eq? G16243@type 'let-syntax) G16277@x (G11627@add-subst G16271@xrib G16277@x)) G16228@mr))) G16262@xrhs*))) (G11576@make-full-rib G16261@xlhs* G16269@xlab*))) (map G11525@gen-label G16261@xlhs*))) G16251@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16249@t))) (G12226@syntax-dispatch G16249@t '(_ #(each (any any)) any . each-any)))) G16226@e) (if (eqv? G16247@t 'displaced-lexical) (G12459@syntax-violation '#f '"identifier out of context" G16226@e) (if (eqv? G16247@t 'syntax) (G12459@syntax-violation '#f '"reference to pattern variable outside a syntax form" G16226@e) (if (memv G16247@t '(define define-syntax module import library)) (G12459@syntax-violation '#f (string-append ((lambda (G16248@t) (if (eqv? G16248@t 'define) '"a definition" (if (eqv? G16248@t 'define-syntax) '"a define-syntax" (if (eqv? G16248@t 'module) '"a module definition" (if (eqv? G16248@t 'library) '"a library definition" (if (eqv? G16248@t 'import) '"an import declaration" '"a non-expression")))))) G16243@type) '" was found where an expression was expected") G16226@e) (if (eqv? G16247@t 'mutable) (G12459@syntax-violation '#f '"attempt to reference an unexportable variable" G16226@e) (G12459@syntax-violation '#f '"invalid expression" G16226@e)))))))))))))))))) G16243@type)) G16237@G16234 G16236@G16233 G16235@G16232))))) (set! G12264@chi-set! (lambda (G16299@e G16300@r G16301@mr) ((lambda (G16305@t) ((lambda (G16307@ls/false) (if (if G16307@ls/false (begin '#f (apply (lambda (G16309@x G16310@v) (G11647@id? G16309@x)) G16307@ls/false)) '#f) (apply (lambda (G16313@x G16314@v) (call-with-values (lambda () (G11687@syntax-type G16313@x G16300@r)) (lambda (G16320@G16317 G16321@G16318 G16322@G16319) ((lambda (G16326@kwd G16327@value G16328@type) ((lambda (G16332@t) (if (eqv? G16332@t 'lexical) (begin (G12118@set-lexical-mutable! G16327@value '#t) (list 'set! (G12114@lexical-var G16327@value) (G12262@chi-expr G16314@v G16300@r G16301@mr))) (if (eqv? G16332@t 'core-prim) (G12459@syntax-violation '#f '"cannot modify imported core primitive" G16299@e) (if (eqv? G16332@t 'global) (G12459@syntax-violation '#f '"attempt to modify imported binding" G16299@e) (if (eqv? G16332@t 'global-macro!) (G12262@chi-expr (G12256@chi-global-macro G16327@value G16299@e) G16300@r G16301@mr) (if (eqv? G16332@t 'local-macro!) (G12262@chi-expr (G12254@chi-local-macro G16327@value G16299@e) G16300@r G16301@mr) (if (eqv? G16332@t 'mutable) (G12459@syntax-violation '#f '"attempt to assign to an unexportable variable" G16299@e) (G12459@syntax-violation '#f '"invalid syntax" G16299@e)))))))) G16328@type)) G16322@G16319 G16321@G16318 G16320@G16317)))) G16307@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16305@t))) (G12226@syntax-dispatch G16305@t '(_ any any)))) G16299@e))) (set! G12266@verify-formals (lambda (G16333@fmls G16334@stx) ((lambda (G16337@t) ((lambda (G16339@ls/false) (if G16339@ls/false (apply (lambda (G16341@x*) (if (G11657@valid-bound-ids? G16341@x*) (void) (G12156@invalid-fmls-error G16334@stx G16333@fmls))) G16339@ls/false) ((lambda (G16343@t) ((lambda (G16345@ls/false) (if G16345@ls/false (apply (lambda (G16347@x* G16348@x) (if (G11657@valid-bound-ids? (cons G16348@x G16347@x*)) (void) (G12156@invalid-fmls-error G16334@stx G16333@fmls))) G16345@ls/false) ((lambda (G16351@t) ((lambda (G16353@ls/false) (if G16353@ls/false (apply (lambda () (G12459@syntax-violation '#f '"invalid syntax" G16334@stx)) G16353@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16351@t))) (G12226@syntax-dispatch G16351@t '_))) G16343@t))) (G12226@syntax-dispatch G16343@t '#(each+ any () any)))) G16337@t))) (G12226@syntax-dispatch G16337@t 'each-any))) G16333@fmls))) (set! G12268@chi-lambda-clause (lambda (G16355@stx G16356@fmls G16357@body* G16358@r G16359@mr) ((lambda (G16365@t) ((lambda (G16367@ls/false) (if G16367@ls/false (apply (lambda (G16369@x*) (begin (G12266@verify-formals G16356@fmls G16355@stx) ((lambda (G16371@lex* G16372@lab*) (values G16371@lex* (G12284@chi-internal (G11627@add-subst (G11576@make-full-rib G16369@x* G16372@lab*) G16357@body*) (G12122@add-lexicals G16372@lab* G16371@lex* G16358@r) G16359@mr))) (map G11521@gen-lexical G16369@x*) (map G11525@gen-label G16369@x*)))) G16367@ls/false) ((lambda (G16375@t) ((lambda (G16377@ls/false) (if G16377@ls/false (apply (lambda (G16379@x* G16380@x) (begin (G12266@verify-formals G16356@fmls G16355@stx) ((lambda (G16383@lex* G16384@lab* G16385@lex G16386@lab) (values (append G16383@lex* G16385@lex) (G12284@chi-internal (G11627@add-subst (G11576@make-full-rib (cons G16380@x G16379@x*) (cons G16386@lab G16384@lab*)) G16357@body*) (G12122@add-lexicals (cons G16386@lab G16384@lab*) (cons G16385@lex G16383@lex*) G16358@r) G16359@mr))) (map G11521@gen-lexical G16379@x*) (map G11525@gen-label G16379@x*) (G11521@gen-lexical G16380@x) (G11525@gen-label G16380@x)))) G16377@ls/false) ((lambda (G16391@t) ((lambda (G16393@ls/false) (if G16393@ls/false (apply (lambda () (G12459@syntax-violation '#f '"invalid syntax" G16356@fmls)) G16393@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16391@t))) (G12226@syntax-dispatch G16391@t '_))) G16375@t))) (G12226@syntax-dispatch G16375@t '#(each+ any () any)))) G16365@t))) (G12226@syntax-dispatch G16365@t 'each-any))) G16356@fmls))) (set! G12270@chi-lambda-clause* (lambda (G16395@stx G16396@fmls* G16397@body** G16398@r G16399@mr) (if (null? G16396@fmls*) (values '() '()) (call-with-values (lambda () (G12268@chi-lambda-clause G16395@stx (car G16396@fmls*) (car G16397@body**) G16398@r G16399@mr)) (lambda (G16407@G16405 G16408@G16406) ((lambda (G16411@b G16412@a) (call-with-values (lambda () (G12270@chi-lambda-clause* G16395@stx (cdr G16396@fmls*) (cdr G16397@body**) G16398@r G16399@mr)) (lambda (G16417@G16415 G16418@G16416) ((lambda (G16421@b* G16422@a*) (values (cons G16412@a G16422@a*) (cons G16411@b G16421@b*))) G16418@G16416 G16417@G16415)))) G16408@G16406 G16407@G16405)))))) (set! G12272@chi-defun (lambda (G16425@x G16426@r G16427@mr) ((lambda (G16431@fmls G16432@body*) (call-with-values (lambda () (G12268@chi-lambda-clause G16431@fmls G16431@fmls G16432@body* G16426@r G16427@mr)) (lambda (G16437@G16435 G16438@G16436) ((lambda (G16441@body G16442@fmls) (G11489@G11273@build-lambda '#f G16442@fmls G16441@body)) G16438@G16436 G16437@G16435)))) (car G16425@x) (cdr G16425@x)))) (set! G12274@chi-rhs (lambda (G16445@rhs G16446@r G16447@mr) ((lambda (G16451@t) (if (eqv? G16451@t 'defun) (G12272@chi-defun (cdr G16445@rhs) G16446@r G16447@mr) (if (eqv? G16451@t 'expr) ((lambda (G16454@expr) (G12262@chi-expr G16454@expr G16446@r G16447@mr)) (cdr G16445@rhs)) (if (eqv? G16451@t 'top-expr) ((lambda (G16452@expr) (G11492@G11349@build-sequence '#f (list (G12262@chi-expr G16452@expr G16446@r G16447@mr) (G11493@G11351@build-void)))) (cdr G16445@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G16445@rhs))))) (car G16445@rhs)))) (set! G12276@expand-interaction-rhs*/init* (lambda (G16456@lhs* G16457@rhs* G16458@init* G16459@r G16460@mr) ((letrec ((G16466@f (lambda (G16468@lhs* G16469@rhs*) (if (null? G16468@lhs*) (map (lambda (G16472@x) (G12262@chi-expr G16472@x G16459@r G16460@mr)) G16458@init*) ((lambda (G16474@lhs G16475@rhs) ((lambda (G16478@t) (if (eqv? G16478@t 'defun) ((lambda (G16483@rhs) (cons (list 'set! G16474@lhs G16483@rhs) (G16466@f (cdr G16468@lhs*) (cdr G16469@rhs*)))) (G12272@chi-defun (cdr G16475@rhs) G16459@r G16460@mr)) (if (eqv? G16478@t 'expr) ((lambda (G16481@rhs) (cons (list 'set! G16474@lhs G16481@rhs) (G16466@f (cdr G16468@lhs*) (cdr G16469@rhs*)))) (G12262@chi-expr (cdr G16475@rhs) G16459@r G16460@mr)) (if (eqv? G16478@t 'top-expr) ((lambda (G16479@e) (cons G16479@e (G16466@f (cdr G16468@lhs*) (cdr G16469@rhs*)))) (G12262@chi-expr (cdr G16475@rhs) G16459@r G16460@mr)) (error 'expand-interaction '"invallid" G16475@rhs))))) (car G16475@rhs))) (car G16468@lhs*) (car G16469@rhs*)))))) G16466@f) G16456@lhs* G16457@rhs*))) (set! G12278@chi-rhs* (lambda (G16485@rhs* G16486@r G16487@mr) ((letrec ((G16491@f (lambda (G16493@ls) (if (null? G16493@ls) '() ((lambda (G16495@a) (cons G16495@a (G16491@f (cdr G16493@ls)))) (G12274@chi-rhs (car G16493@ls) G16486@r G16487@mr)))))) G16491@f) G16485@rhs*))) (set! G12280@find-bound=? (lambda (G16497@x G16498@lhs* G16499@rhs*) (if (null? G16498@lhs*) '#f (if (G11653@bound-id=? G16497@x (car G16498@lhs*)) (car G16499@rhs*) (G12280@find-bound=? G16497@x (cdr G16498@lhs*) (cdr G16499@rhs*)))))) (set! G12282@find-dups (lambda (G16503@ls) ((letrec ((G16505@f (lambda (G16507@ls G16508@dups) (if (null? G16507@ls) G16508@dups ((lambda (G16511@t) (if G16511@t ((lambda (G16513@x) (G16505@f (cdr G16507@ls) (cons (list (car G16507@ls) G16513@x) G16508@dups))) G16511@t) (G16505@f (cdr G16507@ls) G16508@dups))) (G12280@find-bound=? (car G16507@ls) (cdr G16507@ls) (cdr G16507@ls))))))) G16505@f) G16503@ls '()))) (set! G12284@chi-internal (lambda (G16515@e* G16516@r G16517@mr) ((lambda (G16521@rib) (call-with-values (lambda () (G12321@chi-body* (map (lambda (G16530@x) (G11627@add-subst G16521@rib G16530@x)) (G11645@syntax->list G16515@e*)) G16516@r G16517@mr '() '() '() '() G16521@rib '#f)) (lambda (G16532@G16523 G16533@G16524 G16534@G16525 G16535@G16526 G16536@G16527 G16537@G16528 G16538@G16529) ((lambda (G16546@kwd* G16547@mod** G16548@rhs* G16549@lex* G16550@mr G16551@r G16552@e*) (begin (if (null? G16552@e*) (G12459@syntax-violation '#f '"no expression in body" G16552@e*) (void)) ((lambda (G16560@init*) ((lambda (G16562@rhs*) ((lambda () (G11495@G11355@build-letrec* '#f (reverse G16549@lex*) (reverse G16562@rhs*) (G11492@G11349@build-sequence '#f G16560@init*))))) (G12278@chi-rhs* G16548@rhs* G16551@r G16550@mr))) (G12258@chi-expr* (append (apply append (reverse G16547@mod**)) G16552@e*) G16551@r G16550@mr)))) G16538@G16529 G16537@G16528 G16536@G16527 G16535@G16526 G16534@G16525 G16533@G16524 G16532@G16523)))) (G11566@make-empty-rib)))) (set! G12286@parse-module (lambda (G16564@e) ((lambda (G16566@t) ((lambda (G16568@ls/false) (if G16568@ls/false (apply (lambda (G16570@export* G16571@b*) (begin (if (for-all G11647@id? G16570@export*) (void) (G12459@syntax-violation '#f '"module exports must be identifiers" G16564@e)) (values '#f (list->vector G16570@export*) G16571@b*))) G16568@ls/false) ((lambda (G16574@t) ((lambda (G16576@ls/false) (if G16576@ls/false (apply (lambda (G16578@name G16579@export* G16580@b*) (begin (if (G11647@id? G16578@name) (void) (G12459@syntax-violation '#f '"module name must be an identifier" G16564@e)) (if (for-all G11647@id? G16579@export*) (void) (G12459@syntax-violation '#f '"module exports must be identifiers" G16564@e)) (values G16578@name (list->vector G16579@export*) G16580@b*))) G16576@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16574@t))) (G12226@syntax-dispatch G16574@t '(_ any each-any . each-any)))) G16566@t))) (G12226@syntax-dispatch G16566@t '(_ each-any . each-any)))) G16564@e))) (set! G12292@G12287 (make-record-type-descriptor 'module-interface '#f 'G12290 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G12294@G12289 '#f) (set! G12296@G12288 (make-record-constructor-descriptor G12292@G12287 '#f G12294@G12289)) (set! G12301@module-interface? (record-predicate G12292@G12287)) (set! G12303@make-module-interface (record-constructor G12296@G12288)) (set! G12305@module-interface-first-mark (record-accessor G12292@G12287 '0)) (set! G12307@module-interface-exp-id-vec (record-accessor G12292@G12287 '1)) (set! G12309@module-interface-exp-lab-vec (record-accessor G12292@G12287 '2)) (set! G12311@set-module-interface-first-mark! (record-mutator G12292@G12287 '0)) (set! G12313@set-module-interface-exp-id-vec! (record-mutator G12292@G12287 '1)) (set! G12315@set-module-interface-exp-lab-vec! (record-mutator G12292@G12287 '2)) (set! G12317@module-interface-exp-id* (lambda (G16584@iface G16585@id) ((lambda (G16589@diff-marks) (begin (set! G16589@diff-marks (lambda (G16596@ls G16597@x) (begin (if (null? G16596@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G16600@a) (if (eq? G16600@a G16597@x) '() (cons G16600@a (G16589@diff-marks (cdr G16596@ls) G16597@x)))) (car G16596@ls))))) ((lambda (G16590@diff G16591@id-vec) (if (null? G16590@diff) G16591@id-vec (vector-map (lambda (G16594@x) (G11593@make-stx (G11595@stx-expr G16594@x) (append G16590@diff (G11597@stx-mark* G16594@x)) '() '())) G16591@id-vec))) (G16589@diff-marks (G11597@stx-mark* G16585@id) (G12305@module-interface-first-mark G16584@iface)) (G12307@module-interface-exp-id-vec G16584@iface)))) '#f))) (set! G12319@chi-internal-module (lambda (G16602@e G16603@r G16604@mr G16605@lex* G16606@rhs* G16607@mod** G16608@kwd*) (call-with-values (lambda () (G12286@parse-module G16602@e)) (lambda (G16619@G16616 G16620@G16617 G16621@G16618) ((lambda (G16625@e* G16626@exp-id* G16627@name) ((lambda (G16631@rib) ((lambda (G16633@e*) ((lambda () (call-with-values (lambda () (G12321@chi-body* G16633@e* G16603@r G16604@mr G16605@lex* G16606@rhs* G16607@mod** G16608@kwd* G16631@rib '#f)) (lambda (G16642@G16635 G16643@G16636 G16644@G16637 G16645@G16638 G16646@G16639 G16647@G16640 G16648@G16641) ((lambda (G16656@kwd* G16657@mod** G16658@rhs* G16659@lex* G16660@mr G16661@r G16662@e*) ((lambda (G16670@exp-lab* G16671@mod**) (if (not G16627@name) (values G16659@lex* G16658@rhs* G16626@exp-id* G16670@exp-lab* G16661@r G16660@mr G16671@mod** G16656@kwd*) ((lambda (G16674@lab G16675@iface) (values G16659@lex* G16658@rhs* (vector G16627@name) (vector G16674@lab) (cons (cons G16674@lab (cons '$module G16675@iface)) G16661@r) (cons (cons G16674@lab (cons '$module G16675@iface)) G16660@mr) G16671@mod** G16656@kwd*)) (G11525@gen-label 'module) (G12303@make-module-interface (car (G11597@stx-mark* G16627@name)) (vector-map (lambda (G16678@x) (G11593@make-stx (G11595@stx-expr G16678@x) (G11597@stx-mark* G16678@x) '() '())) G16626@exp-id*) G16670@exp-lab*)))) (vector-map (lambda (G16680@x) ((lambda (G16682@t) (if G16682@t G16682@t (begin '#f (G12459@syntax-violation '#f '"cannot find module export" G16680@x)))) (G11673@id->label (G11593@make-stx (G11649@id->sym G16680@x) (G11597@stx-mark* G16680@x) (list G16631@rib) '())))) G16626@exp-id*) (cons G16662@e* G16657@mod**))) G16648@G16641 G16647@G16640 G16646@G16639 G16645@G16638 G16644@G16637 G16643@G16636 G16642@G16635)))))) (map (lambda (G16684@x) (G11627@add-subst G16631@rib G16684@x)) (G11645@syntax->list G16625@e*)))) (G11566@make-empty-rib))) G16621@G16618 G16620@G16617 G16619@G16616))))) (set! G12321@chi-body* (lambda (G16686@e* G16687@r G16688@mr G16689@lex* G16690@rhs* G16691@mod** G16692@kwd* G16693@rib G16694@top?) (if (null? G16686@e*) (values G16686@e* G16687@r G16688@mr G16689@lex* G16690@rhs* G16691@mod** G16692@kwd*) ((lambda (G16704@e) (call-with-values (lambda () (G11687@syntax-type G16704@e G16687@r)) (lambda (G16709@G16706 G16710@G16707 G16711@G16708) ((lambda (G16715@kwd G16716@value G16717@type) ((lambda (G16721@kwd*) ((lambda (G16723@t) (if (eqv? G16723@t 'define) (call-with-values (lambda () (G12106@parse-define G16704@e)) (lambda (G16914@G16912 G16915@G16913) ((lambda (G16918@rhs G16919@id) (begin (if (G11661@bound-id-member? G16919@id G16721@kwd*) (G12459@syntax-violation '#f '"cannot redefine keyword" G16704@e) (void)) (call-with-values (lambda () (G11529@gen-define-label+loc G16919@id G16693@rib)) (lambda (G16924@G16922 G16925@G16923) ((lambda (G16928@lex G16929@lab) (begin (G11568@extend-rib! G16693@rib G16919@id G16929@lab) (G12321@chi-body* (cdr G16686@e*) (G12120@add-lexical G16929@lab G16928@lex G16687@r) G16688@mr (cons G16928@lex G16689@lex*) (cons G16918@rhs G16690@rhs*) G16691@mod** G16721@kwd* G16693@rib G16694@top?))) G16925@G16923 G16924@G16922))))) G16915@G16913 G16914@G16912))) (if (eqv? G16723@t 'define-syntax) (call-with-values (lambda () (G12108@parse-define-syntax G16704@e)) (lambda (G16898@G16896 G16899@G16897) ((lambda (G16902@rhs G16903@id) (begin (if (G11661@bound-id-member? G16903@id G16721@kwd*) (G12459@syntax-violation '#f '"cannot redefine keyword" G16704@e) (void)) ((lambda (G16906@lab G16907@expanded-rhs) (begin (G11568@extend-rib! G16693@rib G16903@id G16906@lab) ((lambda (G16910@b) (G12321@chi-body* (cdr G16686@e*) (cons (cons G16906@lab G16910@b) G16687@r) (cons (cons G16906@lab G16910@b) G16688@mr) G16689@lex* G16690@rhs* G16691@mod** G16721@kwd* G16693@rib G16694@top?)) (G11718@make-eval-transformer G16907@expanded-rhs)))) (G11531@gen-define-label G16903@id G16693@rib) (G12323@expand-transformer G16902@rhs G16688@mr)))) G16899@G16897 G16898@G16896))) (if (memv G16723@t '(let-syntax letrec-syntax)) ((lambda (G16870@t) ((lambda (G16872@ls/false) (if (if G16872@ls/false (begin '#f (apply (lambda (G16874@xlhs* G16875@xrhs* G16876@xbody*) (if (G11657@valid-bound-ids? G16874@xlhs*) (void) (G12459@syntax-violation '#f '"invalid identifiers" G16704@e))) G16872@ls/false)) '#f) (apply (lambda (G16880@xlhs* G16881@xrhs* G16882@xbody*) ((lambda (G16886@xlab*) ((lambda (G16888@xrib) ((lambda (G16890@xb*) ((lambda () (G12321@chi-body* (append (map (lambda (G16892@x) (G11627@add-subst G16888@xrib G16892@x)) G16882@xbody*) (cdr G16686@e*)) (append (map cons G16886@xlab* G16890@xb*) G16687@r) (append (map cons G16886@xlab* G16890@xb*) G16688@mr) G16689@lex* G16690@rhs* G16691@mod** G16721@kwd* G16693@rib G16694@top?)))) (map (lambda (G16894@x) (G11718@make-eval-transformer (G12323@expand-transformer (if (eq? G16717@type 'let-syntax) G16894@x (G11627@add-subst G16888@xrib G16894@x)) G16688@mr))) G16881@xrhs*))) (G11576@make-full-rib G16880@xlhs* G16886@xlab*))) (map G11525@gen-label G16880@xlhs*))) G16872@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16870@t))) (G12226@syntax-dispatch G16870@t '(_ #(each (any any)) . each-any)))) G16704@e) (if (eqv? G16723@t 'begin) ((lambda (G16864@t) ((lambda (G16866@ls/false) (if G16866@ls/false (apply (lambda (G16868@x*) (G12321@chi-body* (append G16868@x* (cdr G16686@e*)) G16687@r G16688@mr G16689@lex* G16690@rhs* G16691@mod** G16721@kwd* G16693@rib G16694@top?)) G16866@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16864@t))) (G12226@syntax-dispatch G16864@t '(_ . each-any)))) G16704@e) (if (memv G16723@t '(global-macro global-macro!)) (G12321@chi-body* (cons (G11627@add-subst G16693@rib (G12256@chi-global-macro G16716@value G16704@e)) (cdr G16686@e*)) G16687@r G16688@mr G16689@lex* G16690@rhs* G16691@mod** G16721@kwd* G16693@rib G16694@top?) (if (memv G16723@t '(local-macro local-macro!)) (G12321@chi-body* (cons (G11627@add-subst G16693@rib (G12254@chi-local-macro G16716@value G16704@e)) (cdr G16686@e*)) G16687@r G16688@mr G16689@lex* G16690@rhs* G16691@mod** G16721@kwd* G16693@rib G16694@top?) (if (memv G16723@t '(macro macro!)) (G12321@chi-body* (cons (G11627@add-subst G16693@rib (G12252@chi-macro G16716@value G16704@e)) (cdr G16686@e*)) G16687@r G16688@mr G16689@lex* G16690@rhs* G16691@mod** G16721@kwd* G16693@rib G16694@top?) (if (eqv? G16723@t 'module) (call-with-values (lambda () (G12319@chi-internal-module G16704@e G16687@r G16688@mr G16689@lex* G16690@rhs* G16691@mod** G16721@kwd*)) (lambda (G16828@G16820 G16829@G16821 G16830@G16822 G16831@G16823 G16832@G16824 G16833@G16825 G16834@G16826 G16835@G16827) ((lambda (G16844@kwd* G16845@mod** G16846@mr G16847@r G16848@m-exp-lab* G16849@m-exp-id* G16850@rhs* G16851@lex*) (begin (vector-for-each (lambda (G16860@id G16861@lab) (G11568@extend-rib! G16693@rib G16860@id G16861@lab)) G16849@m-exp-id* G16848@m-exp-lab*) (G12321@chi-body* (cdr G16686@e*) G16847@r G16846@mr G16851@lex* G16850@rhs* G16845@mod** G16844@kwd* G16693@rib G16694@top?))) G16835@G16827 G16834@G16826 G16833@G16825 G16832@G16824 G16831@G16823 G16830@G16822 G16829@G16821 G16828@G16820))) (if (eqv? G16723@t 'library) (begin (G12433@library-expander (G11669@stx->datum G16704@e)) (G12321@chi-body* (cdr G16686@e*) G16687@r G16688@mr G16689@lex* G16690@rhs* G16691@mod** G16721@kwd* G16693@rib G16694@top?)) (if (eqv? G16723@t 'import) (begin ((lambda () ((lambda (G16725@module-import? G16727@module-import G16729@library-import) (begin (set! G16725@module-import? (lambda (G16800@e) ((lambda (G16802@t) ((lambda (G16804@ls/false) (if (if G16804@ls/false (begin '#f (apply (lambda (G16806@id) (G11647@id? G16806@id)) G16804@ls/false)) '#f) (apply (lambda (G16808@id) '#t) G16804@ls/false) ((lambda (G16810@t) ((lambda (G16812@ls/false) (if G16812@ls/false (apply (lambda (G16814@imp*) '#f) G16812@ls/false) ((lambda (G16816@t) ((lambda (G16818@ls/false) (if G16818@ls/false (apply (lambda () (G12459@syntax-violation '#f '"malformed import form" G16800@e)) G16818@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16816@t))) (G12226@syntax-dispatch G16816@t '_))) G16810@t))) (G12226@syntax-dispatch G16810@t '(_ . each-any)))) G16802@t))) (G12226@syntax-dispatch G16802@t '(_ any)))) G16800@e))) (set! G16727@module-import (lambda (G16770@e G16771@r) ((lambda (G16774@t) ((lambda (G16776@ls/false) (if (if G16776@ls/false (begin '#f (apply (lambda (G16778@id) (G11647@id? G16778@id)) G16776@ls/false)) '#f) (apply (lambda (G16780@id) (call-with-values (lambda () (G11687@syntax-type G16780@id G16771@r)) (lambda (G16785@G16782 G16786@G16783 G16787@G16784) ((lambda (G16791@kwd G16792@value G16793@type) ((lambda (G16797@t) (if (eqv? G16797@t '$module) ((lambda (G16798@iface) (values (G12317@module-interface-exp-id* G16798@iface G16780@id) (G12309@module-interface-exp-lab-vec G16798@iface))) G16792@value) (G12459@syntax-violation '#f '"invalid import" G16770@e))) G16793@type)) G16787@G16784 G16786@G16783 G16785@G16782)))) G16776@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16774@t))) (G12226@syntax-dispatch G16774@t '(_ any)))) G16770@e))) (set! G16729@library-import (lambda (G16744@e) ((lambda (G16746@t) ((lambda (G16748@ls/false) (if G16748@ls/false (apply (lambda (G16750@ctxt G16751@imp*) (call-with-values (lambda () (G12331@parse-import-spec* (G12465@syntax->datum G16751@imp*))) (lambda (G16756@G16754 G16757@G16755) ((lambda (G16760@subst-labels G16761@subst-names) (values (vector-map (lambda (G16764@name) (G11613@datum->stx G16750@ctxt G16764@name)) G16761@subst-names) G16760@subst-labels)) G16757@G16755 G16756@G16754)))) G16748@ls/false) ((lambda (G16766@t) ((lambda (G16768@ls/false) (if G16768@ls/false (apply (lambda () (G12459@syntax-violation '#f '"invalid import form" G16744@e)) G16768@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16766@t))) (G12226@syntax-dispatch G16766@t '_))) G16746@t))) (G12226@syntax-dispatch G16746@t '(any . each-any)))) G16744@e))) (call-with-values (lambda () (if (G16725@module-import? G16704@e) (G16727@module-import G16704@e G16687@r) (G16729@library-import G16704@e))) (lambda (G16732@G16730 G16733@G16731) ((lambda (G16736@lab* G16737@id*) (vector-for-each (lambda (G16740@id G16741@lab) (G11568@extend-rib! G16693@rib G16740@id G16741@lab)) G16737@id* G16736@lab*)) G16733@G16731 G16732@G16730))))) '#f '#f '#f))) (G12321@chi-body* (cdr G16686@e*) G16687@r G16688@mr G16689@lex* G16690@rhs* G16691@mod** G16721@kwd* G16693@rib G16694@top?)) (if G16694@top? (G12321@chi-body* (cdr G16686@e*) G16687@r G16688@mr (cons (G11521@gen-lexical 'dummy) G16689@lex*) (cons (cons 'top-expr G16704@e) G16690@rhs*) G16691@mod** G16721@kwd* G16693@rib G16694@top?) (values G16686@e* G16687@r G16688@mr G16689@lex* G16690@rhs* G16691@mod** G16721@kwd*))))))))))))) G16717@type)) (if (G11647@id? G16715@kwd) (cons G16715@kwd G16692@kwd*) G16692@kwd*))) G16711@G16708 G16710@G16707 G16709@G16706)))) (car G16686@e*))))) (set! G12323@expand-transformer (lambda (G16932@expr G16933@r) ((lambda (G16936@rtc) ((lambda (G16938@expanded-rhs) (begin (for-each ((lambda (G16940@mark-visit) (lambda (G16942@x) (begin (G11134@G10774@invoke-library G16942@x) (G16940@mark-visit G16942@x)))) (G12339@vis-collector)) (G16936@rtc)) G16938@expanded-rhs)) ((lambda (G16948@G16944@inv-collector G16949@G16945@vis-collector G16950@G16946@inv-collector G16951@G16947@vis-collector) ((lambda (G16956@swap) (dynamic-wind G16956@swap (lambda () (G12262@chi-expr G16932@expr G16933@r G16933@r)) G16956@swap)) (lambda () (begin ((lambda (G16958@t) (begin (G16948@G16944@inv-collector G16950@G16946@inv-collector) (set! G16950@G16946@inv-collector G16958@t))) (G16948@G16944@inv-collector)) ((lambda (G16960@t) (begin (G16949@G16945@vis-collector G16951@G16947@vis-collector) (set! G16951@G16947@vis-collector G16960@t))) (G16949@G16945@vis-collector)))))) G12337@inv-collector G12339@vis-collector G16936@rtc (lambda (G16962@x) (values))))) (G12335@make-collector)))) (set! G12325@parse-exports (lambda (G16964@exp*) ((lambda (G16967@idsyn?) (begin (set! G16967@idsyn? (lambda (G16996@x) (symbol? (G12465@syntax->datum G16996@x)))) ((letrec ((G16968@f (lambda (G16970@exp* G16971@int* G16972@ext*) (if (null? G16970@exp*) (begin ((lambda (G16976@id*) (if (G11657@valid-bound-ids? G16976@id*) (void) (G12459@syntax-violation 'export '"invalid exports" (G12282@find-dups G16976@id*)))) (map (lambda (G16978@x) (G11593@make-stx G16978@x G11517@top-mark* '() '())) G16972@ext*)) (values (map G12465@syntax->datum G16971@int*) (map G12465@syntax->datum G16972@ext*))) ((lambda (G16980@t) ((lambda (G16982@ls/false) (if G16982@ls/false (apply (lambda (G16984@rename G16985@i* G16986@e*) (begin (if (if (eq? (G12465@syntax->datum G16984@rename) 'rename) (if (for-all G16967@idsyn? G16985@i*) (begin '#f (for-all G16967@idsyn? G16986@e*)) '#f) '#f) (void) (G12459@syntax-violation 'export '"invalid export specifier" (car G16970@exp*))) (G16968@f (cdr G16970@exp*) (append G16985@i* G16971@int*) (append G16986@e* G16972@ext*)))) G16982@ls/false) ((lambda (G16990@t) ((lambda (G16992@ls/false) (if G16992@ls/false (apply (lambda (G16994@ie) (begin (if (G16967@idsyn? G16994@ie) (void) (G12459@syntax-violation 'export '"invalid export" G16994@ie)) (G16968@f (cdr G16970@exp*) (cons G16994@ie G16971@int*) (cons G16994@ie G16972@ext*)))) G16992@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G16990@t))) (G12226@syntax-dispatch G16990@t 'any))) G16980@t))) (G12226@syntax-dispatch G16980@t '(any . #(each (any any)))))) (car G16970@exp*)))))) G16968@f) G16964@exp* '() '()))) '#f))) (set! G12327@parse-library-name (lambda (G16998@spec) ((lambda (G17001@parse) (begin (set! G17001@parse (lambda (G17012@x) ((lambda (G17014@t) ((lambda (G17016@ls/false) (if (if G17016@ls/false (begin '#f (apply (lambda (G17018@v*) (for-all (lambda (G17020@x) ((lambda (G17022@x) (if (integer? G17022@x) (begin '#f (exact? G17022@x)) '#f)) (G12465@syntax->datum G17020@x))) G17018@v*)) G17016@ls/false)) '#f) (apply (lambda (G17024@v*) (values '() (map G12465@syntax->datum G17024@v*))) G17016@ls/false) ((lambda (G17026@t) ((lambda (G17028@ls/false) (if (if G17028@ls/false (begin '#f (apply (lambda (G17030@x G17031@rest) (symbol? (G12465@syntax->datum G17030@x))) G17028@ls/false)) '#f) (apply (lambda (G17034@x G17035@rest) (call-with-values (lambda () (G17001@parse G17035@rest)) (lambda (G17040@G17038 G17041@G17039) ((lambda (G17044@v* G17045@x*) (values (cons (G12465@syntax->datum G17034@x) G17045@x*) G17044@v*)) G17041@G17039 G17040@G17038)))) G17028@ls/false) ((lambda (G17048@t) ((lambda (G17050@ls/false) (if G17050@ls/false (apply (lambda () (values '() '())) G17050@ls/false) ((lambda (G17052@t) ((lambda (G17054@ls/false) (if G17054@ls/false (apply (lambda () (G12459@syntax-violation '#f '"invalid library name" G16998@spec)) G17054@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G17052@t))) (G12226@syntax-dispatch G17052@t '_))) G17048@t))) (G12226@syntax-dispatch G17048@t '()))) G17026@t))) (G12226@syntax-dispatch G17026@t '(any . any)))) G17014@t))) (G12226@syntax-dispatch G17014@t '(each-any)))) G17012@x))) (call-with-values (lambda () (G17001@parse G16998@spec)) (lambda (G17004@G17002 G17005@G17003) ((lambda (G17008@ver* G17009@name*) (begin (if (null? G17009@name*) (G12459@syntax-violation '#f '"empty library name" G16998@spec) (void)) (values G17009@name* G17008@ver*))) G17005@G17003 G17004@G17002))))) '#f))) (set! G12329@parse-library (lambda (G17056@e) ((lambda (G17058@t) ((lambda (G17060@ls/false) (if (if G17060@ls/false (begin '#f (apply (lambda (G17062@library G17063@name* G17064@export G17065@exp* G17066@import G17067@imp* G17068@b*) (if (eq? (G12465@syntax->datum G17064@export) 'export) (if (eq? (G12465@syntax->datum G17066@import) 'import) (begin '#f (eq? (G12465@syntax->datum G17062@library) 'library)) '#f) '#f)) G17060@ls/false)) '#f) (apply (lambda (G17076@library G17077@name* G17078@export G17079@exp* G17080@import G17081@imp* G17082@b*) (values G17077@name* G17079@exp* G17081@imp* G17082@b*)) G17060@ls/false) ((lambda (G17090@t) ((lambda (G17092@ls/false) (if G17092@ls/false (apply (lambda () (G12459@syntax-violation '#f '"malformed library" G17056@e)) G17092@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G17090@t))) (G12226@syntax-dispatch G17090@t '_))) G17058@t))) (G12226@syntax-dispatch G17058@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G17056@e))) (set! G12331@parse-import-spec* (lambda (G17094@imp*) ((lambda (G17097@idsyn? G17099@dup-error G17101@merge-substs G17103@exclude* G17105@find* G17107@rem* G17109@remove-dups G17111@parse-library-name G17113@import-library G17115@get-import G17117@add-imports!) (begin (set! G17097@idsyn? (lambda (G17604@x) (symbol? (G12465@syntax->datum G17604@x)))) (set! G17099@dup-error (lambda (G17602@name) (G12459@syntax-violation 'import '"two imports with different bindings" G17602@name))) (set! G17101@merge-substs (lambda (G17584@s G17585@subst) ((lambda (G17589@insert-to-subst) (begin (set! G17589@insert-to-subst (lambda (G17590@a G17591@subst) ((lambda (G17594@name G17595@label) ((lambda (G17598@t) (if G17598@t ((lambda (G17600@x) (if (eq? (cdr G17600@x) G17595@label) G17591@subst (G17099@dup-error G17594@name))) G17598@t) (cons G17590@a G17591@subst))) (assq G17594@name G17591@subst))) (car G17590@a) (cdr G17590@a)))) (if (null? G17584@s) G17585@subst (G17589@insert-to-subst (car G17584@s) (G17101@merge-substs (cdr G17584@s) G17585@subst))))) '#f))) (set! G17103@exclude* (lambda (G17542@sym* G17543@subst) ((lambda (G17547@exclude) (begin (set! G17547@exclude (lambda (G17568@sym G17569@subst) (if (null? G17569@subst) (G12459@syntax-violation 'import '"cannot rename unbound identifier" G17568@sym) (if (eq? G17568@sym (caar G17569@subst)) (values (cdar G17569@subst) (cdr G17569@subst)) ((lambda (G17572@a) (call-with-values (lambda () (G17547@exclude G17568@sym (cdr G17569@subst))) (lambda (G17576@G17574 G17577@G17575) ((lambda (G17580@subst G17581@old) (values G17581@old (cons G17572@a G17580@subst))) G17577@G17575 G17576@G17574)))) (car G17569@subst)))))) (if (null? G17542@sym*) (values '() G17543@subst) (call-with-values (lambda () (G17547@exclude (car G17542@sym*) G17543@subst)) (lambda (G17550@G17548 G17551@G17549) ((lambda (G17554@subst G17555@old) (call-with-values (lambda () (G17103@exclude* (cdr G17542@sym*) G17554@subst)) (lambda (G17560@G17558 G17561@G17559) ((lambda (G17564@subst G17565@old*) (values (cons G17555@old G17565@old*) G17564@subst)) G17561@G17559 G17560@G17558)))) G17551@G17549 G17550@G17548)))))) '#f))) (set! G17105@find* (lambda (G17534@sym* G17535@subst) (map (lambda (G17538@x) ((lambda (G17540@t) (if G17540@t (cdr G17540@t) (G12459@syntax-violation 'import '"cannot find identifier" G17538@x))) (assq G17538@x G17535@subst))) G17534@sym*))) (set! G17107@rem* (lambda (G17526@sym* G17527@subst) ((letrec ((G17530@f (lambda (G17532@subst) (if (null? G17532@subst) '() (if (memq (caar G17532@subst) G17526@sym*) (G17530@f (cdr G17532@subst)) (cons (car G17532@subst) (G17530@f (cdr G17532@subst)))))))) G17530@f) G17527@subst))) (set! G17109@remove-dups (lambda (G17524@ls) (if (null? G17524@ls) '() (if (memq (car G17524@ls) (cdr G17524@ls)) (G17109@remove-dups (cdr G17524@ls)) (cons (car G17524@ls) (G17109@remove-dups (cdr G17524@ls))))))) (set! G17111@parse-library-name (lambda (G17296@spec) ((lambda (G17299@subversion? G17301@subversion-pred G17303@version-pred) (begin (set! G17299@subversion? (lambda (G17522@x) (if (integer? G17522@x) (if (exact? G17522@x) (begin '#f (>= G17522@x '0)) '#f) '#f))) (set! G17301@subversion-pred (lambda (G17426@x*) ((lambda (G17428@t) ((lambda (G17430@ls/false) (if (if G17430@ls/false (begin '#f (apply (lambda (G17432@n) (G17299@subversion? (G12465@syntax->datum G17432@n))) G17430@ls/false)) '#f) (apply (lambda (G17434@n) (lambda (G17436@x) (= G17436@x (G12465@syntax->datum G17434@n)))) G17430@ls/false) ((lambda (G17438@t) ((lambda (G17440@ls/false) (if (if G17440@ls/false (begin '#f (apply (lambda (G17442@p? G17443@sub*) (eq? (G12465@syntax->datum G17442@p?) 'and)) G17440@ls/false)) '#f) (apply (lambda (G17446@p? G17447@sub*) ((lambda (G17450@p*) (lambda (G17452@x) (for-all (lambda (G17454@p) (G17454@p G17452@x)) G17450@p*))) (map G17301@subversion-pred G17447@sub*))) G17440@ls/false) ((lambda (G17456@t) ((lambda (G17458@ls/false) (if (if G17458@ls/false (begin '#f (apply (lambda (G17460@p? G17461@sub*) (eq? (G12465@syntax->datum G17460@p?) 'or)) G17458@ls/false)) '#f) (apply (lambda (G17464@p? G17465@sub*) ((lambda (G17468@p*) (lambda (G17470@x) (exists (lambda (G17472@p) (G17472@p G17470@x)) G17468@p*))) (map G17301@subversion-pred G17465@sub*))) G17458@ls/false) ((lambda (G17474@t) ((lambda (G17476@ls/false) (if (if G17476@ls/false (begin '#f (apply (lambda (G17478@p? G17479@sub) (eq? (G12465@syntax->datum G17478@p?) 'not)) G17476@ls/false)) '#f) (apply (lambda (G17482@p? G17483@sub) ((lambda (G17486@p) (lambda (G17488@x) (not (G17486@p G17488@x)))) (G17301@subversion-pred G17483@sub))) G17476@ls/false) ((lambda (G17490@t) ((lambda (G17492@ls/false) (if (if G17492@ls/false (begin '#f (apply (lambda (G17494@p? G17495@n) (if (eq? (G12465@syntax->datum G17494@p?) '<=) (begin '#f (G17299@subversion? (G12465@syntax->datum G17495@n))) '#f)) G17492@ls/false)) '#f) (apply (lambda (G17498@p? G17499@n) (lambda (G17502@x) (<= G17502@x (G12465@syntax->datum G17499@n)))) G17492@ls/false) ((lambda (G17504@t) ((lambda (G17506@ls/false) (if (if G17506@ls/false (begin '#f (apply (lambda (G17508@p? G17509@n) (if (eq? (G12465@syntax->datum G17508@p?) '>=) (begin '#f (G17299@subversion? G17509@n)) '#f)) G17506@ls/false)) '#f) (apply (lambda (G17512@p? G17513@n) (lambda (G17516@x) (>= G17516@x (G12465@syntax->datum G17513@n)))) G17506@ls/false) ((lambda (G17518@t) ((lambda (G17520@ls/false) (if G17520@ls/false (apply (lambda () (G12459@syntax-violation 'import '"invalid sub-version spec" G17296@spec G17426@x*)) G17520@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G17518@t))) (G12226@syntax-dispatch G17518@t '_))) G17504@t))) (G12226@syntax-dispatch G17504@t '(any any)))) G17490@t))) (G12226@syntax-dispatch G17490@t '(any any)))) G17474@t))) (G12226@syntax-dispatch G17474@t '(any any)))) G17456@t))) (G12226@syntax-dispatch G17456@t '(any . each-any)))) G17438@t))) (G12226@syntax-dispatch G17438@t '(any . each-any)))) G17428@t))) (G12226@syntax-dispatch G17428@t 'any))) G17426@x*))) (set! G17303@version-pred (lambda (G17346@x*) ((lambda (G17348@t) ((lambda (G17350@ls/false) (if G17350@ls/false (apply (lambda () (lambda (G17352@x) '#t)) G17350@ls/false) ((lambda (G17354@t) ((lambda (G17356@ls/false) (if (if G17356@ls/false (begin '#f (apply (lambda (G17358@c G17359@ver*) (eq? (G12465@syntax->datum G17358@c) 'and)) G17356@ls/false)) '#f) (apply (lambda (G17362@c G17363@ver*) ((lambda (G17366@p*) (lambda (G17368@x) (for-all (lambda (G17370@p) (G17370@p G17368@x)) G17366@p*))) (map G17303@version-pred G17363@ver*))) G17356@ls/false) ((lambda (G17372@t) ((lambda (G17374@ls/false) (if (if G17374@ls/false (begin '#f (apply (lambda (G17376@c G17377@ver*) (eq? (G12465@syntax->datum G17376@c) 'or)) G17374@ls/false)) '#f) (apply (lambda (G17380@c G17381@ver*) ((lambda (G17384@p*) (lambda (G17386@x) (exists (lambda (G17388@p) (G17388@p G17386@x)) G17384@p*))) (map G17303@version-pred G17381@ver*))) G17374@ls/false) ((lambda (G17390@t) ((lambda (G17392@ls/false) (if (if G17392@ls/false (begin '#f (apply (lambda (G17394@c G17395@ver) (eq? (G12465@syntax->datum G17394@c) 'not)) G17392@ls/false)) '#f) (apply (lambda (G17398@c G17399@ver) ((lambda (G17402@p) (lambda (G17404@x) (not (G17402@p G17404@x)))) (G17303@version-pred G17399@ver))) G17392@ls/false) ((lambda (G17406@t) ((lambda (G17408@ls/false) (if G17408@ls/false (apply (lambda (G17410@sub*) ((lambda (G17412@p*) (lambda (G17414@x) ((letrec ((G17416@f (lambda (G17418@p* G17419@x) (if (null? G17418@p*) '#t (if (null? G17419@x) '#f (if ((car G17418@p*) (car G17419@x)) (begin '#f (G17416@f (cdr G17418@p*) (cdr G17419@x))) '#f)))))) G17416@f) G17412@p* G17414@x))) (map G17301@subversion-pred G17410@sub*))) G17408@ls/false) ((lambda (G17422@t) ((lambda (G17424@ls/false) (if G17424@ls/false (apply (lambda () (G12459@syntax-violation 'import '"invalid version spec" G17296@spec G17346@x*)) G17424@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G17422@t))) (G12226@syntax-dispatch G17422@t '_))) G17406@t))) (G12226@syntax-dispatch G17406@t 'each-any))) G17390@t))) (G12226@syntax-dispatch G17390@t '(any any)))) G17372@t))) (G12226@syntax-dispatch G17372@t '(any . each-any)))) G17354@t))) (G12226@syntax-dispatch G17354@t '(any . each-any)))) G17348@t))) (G12226@syntax-dispatch G17348@t '()))) G17346@x*))) ((letrec ((G17304@f (lambda (G17306@x) ((lambda (G17308@t) ((lambda (G17310@ls/false) (if G17310@ls/false (apply (lambda (G17312@version-spec*) (values '() (G17303@version-pred G17312@version-spec*))) G17310@ls/false) ((lambda (G17314@t) ((lambda (G17316@ls/false) (if (if G17316@ls/false (begin '#f (apply (lambda (G17318@x G17319@x*) (G17097@idsyn? G17318@x)) G17316@ls/false)) '#f) (apply (lambda (G17322@x G17323@x*) (call-with-values (lambda () (G17304@f G17323@x*)) (lambda (G17328@G17326 G17329@G17327) ((lambda (G17332@pred G17333@name) (values (cons (G12465@syntax->datum G17322@x) G17333@name) G17332@pred)) G17329@G17327 G17328@G17326)))) G17316@ls/false) ((lambda (G17336@t) ((lambda (G17338@ls/false) (if G17338@ls/false (apply (lambda () (values '() (lambda (G17340@x) '#t))) G17338@ls/false) ((lambda (G17342@t) ((lambda (G17344@ls/false) (if G17344@ls/false (apply (lambda () (G12459@syntax-violation '#f '"invalid import spec" G17296@spec)) G17344@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G17342@t))) (G12226@syntax-dispatch G17342@t '_))) G17336@t))) (G12226@syntax-dispatch G17336@t '()))) G17314@t))) (G12226@syntax-dispatch G17314@t '(any . any)))) G17308@t))) (G12226@syntax-dispatch G17308@t '(each-any)))) G17306@x)))) G17304@f) G17296@spec))) '#f '#f '#f))) (set! G17113@import-library (lambda (G17282@spec*) (call-with-values (lambda () (G17111@parse-library-name G17282@spec*)) (lambda (G17286@G17284 G17287@G17285) ((lambda (G17290@pred G17291@name) (begin (if (null? G17291@name) (G12459@syntax-violation 'import '"empty library name" G17282@spec*) (void)) ((lambda (G17294@lib) (begin (if G17294@lib (void) (G12459@syntax-violation 'import '"cannot find library with required name" G17291@name)) (if (G17290@pred (G11087@G10680@library-version G17294@lib)) (void) (G12459@syntax-violation 'import '"library does not satisfy version specification" G17282@spec* G17294@lib)) ((G12341@imp-collector) G17294@lib) (G11091@G10688@library-subst G17294@lib))) (G11127@G10760@find-library-by-name G17291@name)))) G17287@G17285 G17286@G17284))))) (set! G17115@get-import (lambda (G17140@spec) ((lambda (G17142@t) ((lambda (G17144@ls/false) (if (if G17144@ls/false (begin '#f (apply (lambda (G17146@x G17147@x*) (not (memq (G12465@syntax->datum G17146@x) '(for rename except only prefix library)))) G17144@ls/false)) '#f) (apply (lambda (G17150@x G17151@x*) (G17113@import-library (cons G17150@x G17151@x*))) G17144@ls/false) ((lambda (G17154@t) ((lambda (G17156@ls/false) (if (if G17156@ls/false (begin '#f (apply (lambda (G17158@rename G17159@isp G17160@old* G17161@new*) (if (eq? (G12465@syntax->datum G17158@rename) 'rename) (if (for-all G17097@idsyn? G17160@old*) (begin '#f (for-all G17097@idsyn? G17161@new*)) '#f) '#f)) G17156@ls/false)) '#f) (apply (lambda (G17166@rename G17167@isp G17168@old* G17169@new*) ((lambda (G17174@subst G17175@old* G17176@new*) ((lambda (G17180@old-label*) ((lambda (G17182@subst) (G17101@merge-substs (map cons G17176@new* G17180@old-label*) G17182@subst)) (G17107@rem* G17175@old* G17174@subst))) (G17105@find* G17175@old* G17174@subst))) (G17115@get-import G17167@isp) (map G12465@syntax->datum G17168@old*) (map G12465@syntax->datum G17169@new*))) G17156@ls/false) ((lambda (G17184@t) ((lambda (G17186@ls/false) (if (if G17186@ls/false (begin '#f (apply (lambda (G17188@except G17189@isp G17190@sym*) (if (eq? (G12465@syntax->datum G17188@except) 'except) (begin '#f (for-all G17097@idsyn? G17190@sym*)) '#f)) G17186@ls/false)) '#f) (apply (lambda (G17194@except G17195@isp G17196@sym*) ((lambda (G17200@subst) (G17107@rem* (map G12465@syntax->datum G17196@sym*) G17200@subst)) (G17115@get-import G17195@isp))) G17186@ls/false) ((lambda (G17202@t) ((lambda (G17204@ls/false) (if (if G17204@ls/false (begin '#f (apply (lambda (G17206@only G17207@isp G17208@sym*) (if (eq? (G12465@syntax->datum G17206@only) 'only) (begin '#f (for-all G17097@idsyn? G17208@sym*)) '#f)) G17204@ls/false)) '#f) (apply (lambda (G17212@only G17213@isp G17214@sym*) ((lambda (G17218@subst G17219@sym*) ((lambda (G17222@sym*) ((lambda (G17224@lab*) (map cons G17222@sym* G17224@lab*)) (G17105@find* G17222@sym* G17218@subst))) (G17109@remove-dups G17219@sym*))) (G17115@get-import G17213@isp) (map G12465@syntax->datum G17214@sym*))) G17204@ls/false) ((lambda (G17226@t) ((lambda (G17228@ls/false) (if (if G17228@ls/false (begin '#f (apply (lambda (G17230@prefix G17231@isp G17232@p) (if (eq? (G12465@syntax->datum G17230@prefix) 'prefix) (begin '#f (G17097@idsyn? G17232@p)) '#f)) G17228@ls/false)) '#f) (apply (lambda (G17236@prefix G17237@isp G17238@p) ((lambda (G17242@subst G17243@prefix) (map (lambda (G17246@x) (cons (string->symbol (string-append G17243@prefix (symbol->string (car G17246@x)))) (cdr G17246@x))) G17242@subst)) (G17115@get-import G17237@isp) (symbol->string (G12465@syntax->datum G17238@p)))) G17228@ls/false) ((lambda (G17248@t) ((lambda (G17250@ls/false) (if (if G17250@ls/false (begin '#f (apply (lambda (G17252@library G17253@spec*) (eq? (G12465@syntax->datum G17252@library) 'library)) G17250@ls/false)) '#f) (apply (lambda (G17256@library G17257@spec*) (G17113@import-library G17257@spec*)) G17250@ls/false) ((lambda (G17260@t) ((lambda (G17262@ls/false) (if (if G17262@ls/false (begin '#f (apply (lambda (G17264@for G17265@isp G17266@rest) (eq? (G12465@syntax->datum G17264@for) 'for)) G17262@ls/false)) '#f) (apply (lambda (G17270@for G17271@isp G17272@rest) (G17115@get-import G17271@isp)) G17262@ls/false) ((lambda (G17276@t) ((lambda (G17278@ls/false) (if G17278@ls/false (apply (lambda (G17280@spec) (G12459@syntax-violation 'import '"invalid import spec" G17280@spec)) G17278@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G17276@t))) (G12226@syntax-dispatch G17276@t 'any))) G17260@t))) (G12226@syntax-dispatch G17260@t '(any any . any)))) G17248@t))) (G12226@syntax-dispatch G17248@t '(any each-any)))) G17226@t))) (G12226@syntax-dispatch G17226@t '(any any any)))) G17202@t))) (G12226@syntax-dispatch G17202@t '(any any . each-any)))) G17184@t))) (G12226@syntax-dispatch G17184@t '(any any . each-any)))) G17154@t))) (G12226@syntax-dispatch G17154@t '(any any . #(each (any any)))))) G17142@t))) (G12226@syntax-dispatch G17142@t '(any . each-any)))) G17140@spec))) (set! G17117@add-imports! (lambda (G17124@imp G17125@h) ((lambda (G17128@subst) (for-each (lambda (G17130@x) ((lambda (G17132@name G17133@label) ((lambda (G17136@t) (if G17136@t ((lambda (G17138@l) (if (eq? G17138@l G17133@label) (void) (G17099@dup-error G17132@name))) G17136@t) (hashtable-set! G17125@h G17132@name G17133@label))) (hashtable-ref G17125@h G17132@name '#f))) (car G17130@x) (cdr G17130@x))) G17128@subst)) (G17115@get-import G17124@imp)))) ((letrec ((G17118@f (lambda (G17120@imp* G17121@h) (if (null? G17120@imp*) (hashtable-entries G17121@h) (begin (G17117@add-imports! (car G17120@imp*) G17121@h) (G17118@f (cdr G17120@imp*) G17121@h)))))) G17118@f) G17094@imp* (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12333@make-top-rib (lambda (G17606@names G17607@labels) ((lambda (G17610@rib) (begin (vector-for-each (lambda (G17612@name G17613@label) (begin (if (symbol? G17612@name) (void) (error 'make-top-rib '"BUG: not a symbol" G17612@name)) (G11568@extend-rib! G17610@rib (G11593@make-stx G17612@name G11517@top-mark* '() '()) G17613@label))) G17606@names G17607@labels) G17610@rib)) (G11566@make-empty-rib)))) (set! G12335@make-collector (lambda () ((lambda (G17616@ls) (lambda G17620 ((lambda (G17621) (if (= G17621 '0) (apply (lambda () G17616@ls) G17620) (if (= G17621 '1) (apply (lambda (G17618@x) (set! G17616@ls (G11510@set-cons G17618@x G17616@ls))) G17620) (error 'apply '"invalid arg count")))) (length G17620)))) '()))) (set! G12337@inv-collector (G10463@G10258@make-parameter (lambda G17622@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G17624@x) (begin (if (procedure? G17624@x) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" G17624@x)) G17624@x)))) (set! G12339@vis-collector (G10463@G10258@make-parameter (lambda G17626@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G17628@x) (begin (if (procedure? G17628@x) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" G17628@x)) G17628@x)))) (set! G12341@imp-collector (G10463@G10258@make-parameter (lambda G17630@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G17632@x) (begin (if (procedure? G17632@x) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" G17632@x)) G17632@x)))) (set! G12343@chi-library-internal (lambda (G17634@e* G17635@rib G17636@top?) (call-with-values (lambda () (G12321@chi-body* G17634@e* '() '() '() '() '() '() G17635@rib G17636@top?)) (lambda (G17647@G17640 G17648@G17641 G17649@G17642 G17650@G17643 G17651@G17644 G17652@G17645 G17653@G17646) ((lambda (G17661@_kwd* G17662@mod** G17663@rhs* G17664@lex* G17665@mr G17666@r G17667@e*) (values (append (apply append (reverse G17662@mod**)) G17667@e*) G17666@r G17665@mr (reverse G17664@lex*) (reverse G17663@rhs*))) G17653@G17646 G17652@G17645 G17651@G17644 G17650@G17643 G17649@G17642 G17648@G17641 G17647@G17640))))) (set! G12345@chi-interaction-expr (lambda (G17675@e G17676@rib G17677@r) (call-with-values (lambda () (G12321@chi-body* (list G17675@e) G17677@r G17677@r '() '() '() '() G17676@rib '#t)) (lambda (G17688@G17681 G17689@G17682 G17690@G17683 G17691@G17684 G17692@G17685 G17693@G17686 G17694@G17687) ((lambda (G17702@_kwd* G17703@mod** G17704@rhs* G17705@lex* G17706@mr G17707@r G17708@e*) ((lambda (G17716@e*) ((lambda (G17718@e) (values G17718@e G17707@r)) (if (null? G17716@e*) (G11493@G11351@build-void) (if (null? (cdr G17716@e*)) (car G17716@e*) (G11492@G11349@build-sequence '#f G17716@e*))))) (G12276@expand-interaction-rhs*/init* (reverse G17705@lex*) (reverse G17704@rhs*) (append (apply append (reverse G17703@mod**)) G17708@e*) G17707@r G17706@mr))) G17694@G17687 G17693@G17686 G17692@G17685 G17691@G17684 G17690@G17683 G17689@G17682 G17688@G17681))))) (set! G12347@library-body-expander (lambda (G17720@name G17721@exp* G17722@imp* G17723@b* G17724@top?) ((lambda (G17731@itc) (begin (set! G17731@itc (G12335@make-collector)) ((lambda (G17736@G17732@imp-collector G17737@G17733@top-level-context G17738@G17734@imp-collector G17739@G17735@top-level-context) ((lambda (G17744@swap) (dynamic-wind G17744@swap (lambda () (call-with-values (lambda () (G12325@parse-exports G17721@exp*)) (lambda (G17748@G17746 G17749@G17747) ((lambda (G17752@exp-ext* G17753@exp-int*) (call-with-values (lambda () (G12331@parse-import-spec* G17722@imp*)) (lambda (G17758@G17756 G17759@G17757) ((lambda (G17762@subst-labels G17763@subst-names) ((lambda (G17766@rib) ((lambda (G17768@b* G17769@rtc G17770@vtc) ((lambda (G17778@G17774@inv-collector G17779@G17775@vis-collector G17780@G17776@inv-collector G17781@G17777@vis-collector) ((lambda (G17786@swap) (dynamic-wind G17786@swap (lambda () (call-with-values (lambda () (G12343@chi-library-internal G17768@b* G17766@rib G17724@top?)) (lambda (G17793@G17788 G17794@G17789 G17795@G17790 G17796@G17791 G17797@G17792) ((lambda (G17803@rhs* G17804@lex* G17805@mr G17806@r G17807@init*) (begin (G11572@seal-rib! G17766@rib) ((lambda (G17813@init*) ((lambda (G17815@rhs*) ((lambda () (begin (G11574@unseal-rib! G17766@rib) ((lambda (G17817@loc* G17818@export-subst) ((lambda (G17822@errstr) (begin (set! G17822@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G12443@make-export-env/macros G17804@lex* G17817@loc* G17806@r)) (lambda (G17826@G17823 G17827@G17824 G17828@G17825) ((lambda (G17832@macro* G17833@global* G17834@export-env) (begin (for-each (lambda (G17838@s) ((lambda (G17840@name G17841@label) ((lambda (G17844@p) (if G17844@p ((lambda (G17846@b) ((lambda (G17848@type) (if (eq? G17848@type 'mutable) (G12459@syntax-violation 'export G17822@errstr G17840@name) (void))) (car G17846@b))) (cdr G17844@p)) (void))) (assq G17841@label G17834@export-env))) (car G17838@s) (cdr G17838@s))) G17818@export-subst) ((lambda (G17850@invoke-body G17851@invoke-definitions) (values (G17731@itc) (G17769@rtc) (G17770@vtc) (G11492@G11349@build-sequence '#f (append G17851@invoke-definitions (list G17850@invoke-body))) G17832@macro* G17818@export-subst G17834@export-env)) (G11495@G11355@build-letrec* '#f G17804@lex* G17815@rhs* (G12439@build-exports G17833@global* G17813@init*)) (map G11488@G11141@build-global-define (map cdr G17833@global*))))) G17828@G17825 G17827@G17824 G17826@G17823))))) '#f)) (map G11523@gen-global G17804@lex*) (G12441@make-export-subst G17753@exp-int* G17752@exp-ext* G17766@rib)))))) (G12278@chi-rhs* G17803@rhs* G17806@r G17805@mr))) (G12258@chi-expr* G17807@init* G17806@r G17805@mr)))) G17797@G17792 G17796@G17791 G17795@G17790 G17794@G17789 G17793@G17788)))) G17786@swap)) (lambda () (begin ((lambda (G17854@t) (begin (G17778@G17774@inv-collector G17780@G17776@inv-collector) (set! G17780@G17776@inv-collector G17854@t))) (G17778@G17774@inv-collector)) ((lambda (G17856@t) (begin (G17779@G17775@vis-collector G17781@G17777@vis-collector) (set! G17781@G17777@vis-collector G17856@t))) (G17779@G17775@vis-collector)))))) G12337@inv-collector G12339@vis-collector G17769@rtc G17770@vtc)) (map (lambda (G17858@x) (G11593@make-stx G17858@x G11517@top-mark* (list G17766@rib) '())) G17723@b*) (G12335@make-collector) (G12335@make-collector))) (G12333@make-top-rib G17763@subst-names G17762@subst-labels))) G17759@G17757 G17758@G17756)))) G17749@G17747 G17748@G17746)))) G17744@swap)) (lambda () (begin ((lambda (G17860@t) (begin (G17736@G17732@imp-collector G17738@G17734@imp-collector) (set! G17738@G17734@imp-collector G17860@t))) (G17736@G17732@imp-collector)) ((lambda (G17862@t) (begin (G17737@G17733@top-level-context G17739@G17735@top-level-context) (set! G17739@G17735@top-level-context G17862@t))) (G17737@G17733@top-level-context)))))) G12341@imp-collector G12473@top-level-context G17731@itc '#f))) '#f))) (set! G12349@core-library-expander (lambda (G17864@e G17865@verify-name) (call-with-values (lambda () (G12329@parse-library G17864@e)) (lambda (G17872@G17868 G17873@G17869 G17874@G17870 G17875@G17871) ((lambda (G17880@b* G17881@imp* G17882@exp* G17883@name*) (call-with-values (lambda () (G12327@parse-library-name G17883@name*)) (lambda (G17890@G17888 G17891@G17889) ((lambda (G17894@ver G17895@name) (begin (G17865@verify-name G17895@name) (call-with-values (lambda () (G12347@library-body-expander G17895@name G17882@exp* G17881@imp* G17880@b* '#f)) (lambda (G17905@G17898 G17906@G17899 G17907@G17900 G17908@G17901 G17909@G17902 G17910@G17903 G17911@G17904) ((lambda (G17919@export-env G17920@export-subst G17921@visit-code G17922@invoke-code G17923@visit-req* G17924@invoke-req* G17925@imp*) (values G17895@name G17894@ver G17925@imp* G17924@invoke-req* G17923@visit-req* G17922@invoke-code G17921@visit-code G17920@export-subst G17919@export-env)) G17911@G17904 G17910@G17903 G17909@G17902 G17908@G17901 G17907@G17900 G17906@G17899 G17905@G17898))))) G17891@G17889 G17890@G17888)))) G17875@G17871 G17874@G17870 G17873@G17869 G17872@G17868))))) (set! G12351@parse-top-level-program (lambda (G17933@e*) ((lambda (G17935@t) ((lambda (G17937@ls/false) (if (if G17937@ls/false (begin '#f (apply (lambda (G17939@import G17940@imp* G17941@b*) (eq? (G12465@syntax->datum G17939@import) 'import)) G17937@ls/false)) '#f) (apply (lambda (G17945@import G17946@imp* G17947@b*) (values G17946@imp* G17947@b*)) G17937@ls/false) ((lambda (G17951@t) ((lambda (G17953@ls/false) (if (if G17953@ls/false (begin '#f (apply (lambda (G17955@import G17956@x G17957@y) (eq? (G12465@syntax->datum G17955@import) 'import)) G17953@ls/false)) '#f) (apply (lambda (G17961@import G17962@x G17963@y) (G12459@syntax-violation 'expander '"invalid syntax of top-level program" (G11641@syntax-car G17933@e*))) G17953@ls/false) ((lambda (G17967@t) ((lambda (G17969@ls/false) (if G17969@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G17969@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G17967@t))) (G12226@syntax-dispatch G17967@t '_))) G17951@t))) (G12226@syntax-dispatch G17951@t '((any . any) . any)))) G17935@t))) (G12226@syntax-dispatch G17935@t '((any . each-any) . each-any)))) G17933@e*))) (set! G12353@top-level-expander (lambda (G17971@e*) (call-with-values (lambda () (G12351@parse-top-level-program G17971@e*)) (lambda (G17975@G17973 G17976@G17974) ((lambda (G17979@b* G17980@imp*) (call-with-values (lambda () (G12347@library-body-expander '() '() G17980@imp* G17979@b* '#t)) (lambda (G17990@G17983 G17991@G17984 G17992@G17985 G17993@G17986 G17994@G17987 G17995@G17988 G17996@G17989) ((lambda (G18004@export-env G18005@export-subst G18006@visit-code G18007@invoke-code G18008@visit-req* G18009@invoke-req* G18010@imp*) (values G18009@invoke-req* G18007@invoke-code)) G17996@G17989 G17995@G17988 G17994@G17987 G17993@G17986 G17992@G17985 G17991@G17984 G17990@G17983)))) G17976@G17974 G17975@G17973))))) (set! G12359@G12354 (make-record-type-descriptor 'env '#f 'G12357 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G12361@G12356 '#f) (set! G12363@G12355 (make-record-constructor-descriptor G12359@G12354 '#f G12361@G12356)) (set! G12368@env? (record-predicate G12359@G12354)) (set! G12370@make-env (record-constructor G12363@G12355)) (set! G12372@env-names (record-accessor G12359@G12354 '0)) (set! G12374@env-labels (record-accessor G12359@G12354 '1)) (set! G12376@env-itc (record-accessor G12359@G12354 '2)) (set! G12378@set-env-names! (record-mutator G12359@G12354 '0)) (set! G12380@set-env-labels! (record-mutator G12359@G12354 '1)) (set! G12382@set-env-itc! (record-mutator G12359@G12354 '2)) (set! G12384@rp (G10460@G10252@make-record-printer 'env (lambda (G18018@x G18019@p) (display '"#<environment>" G18019@p)))) (set! G12390@G12385 (make-record-type-descriptor 'interaction-env '#f 'G12388 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G12392@G12387 '#f) (set! G12394@G12386 (make-record-constructor-descriptor G12390@G12385 '#f G12392@G12387)) (set! G12399@interaction-env? (record-predicate G12390@G12385)) (set! G12401@make-interaction-env (record-constructor G12394@G12386)) (set! G12403@interaction-env-rib (record-accessor G12390@G12385 '0)) (set! G12405@interaction-env-r (record-accessor G12390@G12385 '1)) (set! G12407@interaction-env-locs (record-accessor G12390@G12385 '2)) (set! G12409@set-interaction-env-rib! (record-mutator G12390@G12385 '0)) (set! G12411@set-interaction-env-r! (record-mutator G12390@G12385 '1)) (set! G12413@set-interaction-env-locs! (record-mutator G12390@G12385 '2)) (set! G12415@rp (G10460@G10252@make-record-printer 'interaction-env (lambda (G18022@x G18023@p) (display '"#<environment>" G18023@p)))) (set! G12417@interaction-environment-symbols (lambda () (map (lambda (G18026@x) G18026@x) (G11550@rib-sym* (G12403@interaction-env-rib (G12471@interaction-environment)))))) (set! G12419@environment-symbols (lambda (G18028@e) (vector->list (G12372@env-names G18028@e)))) (set! G12421@environment? (lambda (G18030@x) ((lambda (G18032@t) (if G18032@t G18032@t (begin '#f (G12399@interaction-env? G18030@x)))) (G12368@env? G18030@x)))) (set! G12423@environment (lambda G18034@imp* ((lambda (G18036@itc) ((lambda (G18040@G18038@imp-collector G18041@G18039@imp-collector) ((lambda (G18044@swap) (dynamic-wind G18044@swap (lambda () (call-with-values (lambda () (G12331@parse-import-spec* G18034@imp*)) (lambda (G18048@G18046 G18049@G18047) ((lambda (G18052@subst-labels G18053@subst-names) (G12370@make-env G18053@subst-names G18052@subst-labels G18036@itc)) G18049@G18047 G18048@G18046)))) G18044@swap)) (lambda () ((lambda (G18056@t) (begin (G18040@G18038@imp-collector G18041@G18039@imp-collector) (set! G18041@G18039@imp-collector G18056@t))) (G18040@G18038@imp-collector))))) G12341@imp-collector G18036@itc)) (G12335@make-collector)))) (set! G12425@null-environment (lambda (G18058@n) (begin (if (eqv? G18058@n '5) (void) (assertion-violation 'null-environment '"not 5" G18058@n)) (G12423@environment '(psyntax null-environment-5))))) (set! G12427@scheme-report-environment (lambda (G18060@n) (begin (if (eqv? G18060@n '5) (void) (assertion-violation 'scheme-report-environment '"not 5" G18060@n)) (G12423@environment '(psyntax scheme-report-environment-5))))) (set! G12429@expand (lambda (G18062@x G18063@env) (if (G12368@env? G18063@env) ((lambda (G18066@rib) ((lambda (G18068@x G18069@itc G18070@rtc G18071@vtc) ((lambda (G18076@x) (begin (G11572@seal-rib! G18066@rib) (values G18076@x (G18070@rtc)))) ((lambda (G18084@G18078@inv-collector G18085@G18079@vis-collector G18086@G18080@imp-collector G18087@G18081@inv-collector G18088@G18082@vis-collector G18089@G18083@imp-collector) ((lambda (G18096@swap) (dynamic-wind G18096@swap (lambda () (G12262@chi-expr G18068@x '() '())) G18096@swap)) (lambda () (begin ((lambda (G18098@t) (begin (G18084@G18078@inv-collector G18087@G18081@inv-collector) (set! G18087@G18081@inv-collector G18098@t))) (G18084@G18078@inv-collector)) ((lambda (G18100@t) (begin (G18085@G18079@vis-collector G18088@G18082@vis-collector) (set! G18088@G18082@vis-collector G18100@t))) (G18085@G18079@vis-collector)) ((lambda (G18102@t) (begin (G18086@G18080@imp-collector G18089@G18083@imp-collector) (set! G18089@G18083@imp-collector G18102@t))) (G18086@G18080@imp-collector)))))) G12337@inv-collector G12339@vis-collector G12341@imp-collector G18070@rtc G18071@vtc G18069@itc))) (G11593@make-stx G18062@x G11517@top-mark* (list G18066@rib) '()) (G12376@env-itc G18063@env) (G12335@make-collector) (G12335@make-collector))) (G12333@make-top-rib (G12372@env-names G18063@env) (G12374@env-labels G18063@env))) (if (G12399@interaction-env? G18063@env) ((lambda (G18104@rib G18105@r G18106@rtc) ((lambda (G18110@x) (call-with-values (lambda () ((lambda (G18122@G18114@top-level-context G18123@G18115@inv-collector G18124@G18116@vis-collector G18125@G18117@imp-collector G18126@G18118@top-level-context G18127@G18119@inv-collector G18128@G18120@vis-collector G18129@G18121@imp-collector) ((lambda (G18138@swap) (dynamic-wind G18138@swap (lambda () (G12345@chi-interaction-expr G18110@x G18104@rib G18105@r)) G18138@swap)) (lambda () (begin ((lambda (G18140@t) (begin (G18122@G18114@top-level-context G18126@G18118@top-level-context) (set! G18126@G18118@top-level-context G18140@t))) (G18122@G18114@top-level-context)) ((lambda (G18142@t) (begin (G18123@G18115@inv-collector G18127@G18119@inv-collector) (set! G18127@G18119@inv-collector G18142@t))) (G18123@G18115@inv-collector)) ((lambda (G18144@t) (begin (G18124@G18116@vis-collector G18128@G18120@vis-collector) (set! G18128@G18120@vis-collector G18144@t))) (G18124@G18116@vis-collector)) ((lambda (G18146@t) (begin (G18125@G18117@imp-collector G18129@G18121@imp-collector) (set! G18129@G18121@imp-collector G18146@t))) (G18125@G18117@imp-collector)))))) G12473@top-level-context G12337@inv-collector G12339@vis-collector G12341@imp-collector G18063@env G18106@rtc (G12335@make-collector) (G12335@make-collector))) (lambda (G18148@G18112 G18149@G18113) ((lambda (G18152@r^ G18153@e) (begin (G12411@set-interaction-env-r! G18063@env G18152@r^) (values G18153@e (G18106@rtc)))) G18149@G18113 G18148@G18112)))) (G11593@make-stx G18062@x G11517@top-mark* (list G18104@rib) '()))) (G12403@interaction-env-rib G18063@env) (G12405@interaction-env-r G18063@env) (G12335@make-collector)) (assertion-violation 'expand '"not an environment" G18063@env))))) (set! G12431@eval (lambda (G18156@x G18157@env) (begin (if (G12421@environment? G18157@env) (void) (error 'eval '"not an environment" G18157@env)) (call-with-values (lambda () (G12429@expand G18156@x G18157@env)) (lambda (G18162@G18160 G18163@G18161) ((lambda (G18166@invoke-req* G18167@x) (begin (for-each G11134@G10774@invoke-library G18166@invoke-req*) (eval-core (G10562@G10475@expanded->core G18167@x)))) G18163@G18161 G18162@G18160)))))) (set! G12433@library-expander (lambda G18271 ((lambda (G18272) (if (= G18272 '3) (apply (lambda (G18170@x G18171@filename G18172@verify-name) ((lambda (G18177@build-visit-code G18179@visit!) (begin (set! G18177@build-visit-code (lambda (G18253@macro*) (if (null? G18253@macro*) (G11493@G11351@build-void) (G11492@G11349@build-sequence '#f (map (lambda (G18255@x) ((lambda (G18257@loc G18258@src) (list 'set! G18257@loc G18258@src)) (car G18255@x) (cddr G18255@x))) G18253@macro*))))) (set! G18179@visit! (lambda (G18245@macro*) (for-each (lambda (G18247@x) ((lambda (G18249@loc G18250@proc) (set-symbol-value! G18249@loc G18250@proc)) (car G18247@x) (cadr G18247@x))) G18245@macro*))) (call-with-values (lambda () (G12349@core-library-expander G18170@x G18172@verify-name)) (lambda (G18189@G18180 G18190@G18181 G18191@G18182 G18192@G18183 G18193@G18184 G18194@G18185 G18195@G18186 G18196@G18187 G18197@G18188) ((lambda (G18207@export-env G18208@export-subst G18209@macro* G18210@invoke-code G18211@vis* G18212@inv* G18213@imp* G18214@ver G18215@name) ((lambda (G18225@id G18226@name G18227@ver G18228@imp* G18229@vis* G18230@inv* G18231@visit-proc G18232@invoke-proc G18233@visit-code G18234@invoke-code) (begin (G11132@G10770@install-library G18225@id G18226@name G18227@ver G18228@imp* G18229@vis* G18230@inv* G18208@export-subst G18207@export-env G18231@visit-proc G18232@invoke-proc G18233@visit-code G18234@invoke-code '#t G18171@filename) (values G18225@id G18226@name G18227@ver G18228@imp* G18229@vis* G18230@inv* G18234@invoke-code G18233@visit-code G18208@export-subst G18207@export-env))) (gensym) G18215@name G18214@ver (map G11138@G10782@library-spec G18213@imp*) (map G11138@G10782@library-spec G18211@vis*) (map G11138@G10782@library-spec G18212@inv*) (lambda () (G18179@visit! G18209@macro*)) (lambda () (eval-core (G10562@G10475@expanded->core G18210@invoke-code))) (G18177@build-visit-code G18209@macro*) G18210@invoke-code)) G18197@G18188 G18196@G18187 G18195@G18186 G18194@G18185 G18193@G18184 G18192@G18183 G18191@G18182 G18190@G18181 G18189@G18180))))) '#f '#f)) G18271) (if (= G18272 '2) (apply (lambda (G18261@x G18262@filename) (G12433@library-expander G18261@x G18262@filename (lambda (G18265@x) (values)))) G18271) (if (= G18272 '1) (apply (lambda (G18267@x) (G12433@library-expander G18267@x '#f (lambda (G18269@x) (values)))) G18271) (error 'apply '"invalid arg count"))))) (length G18271)))) (set! G12435@boot-library-expand (lambda (G18273@x) (call-with-values (lambda () (G12433@library-expander G18273@x)) (lambda (G18285@G18275 G18286@G18276 G18287@G18277 G18288@G18278 G18289@G18279 G18290@G18280 G18291@G18281 G18292@G18282 G18293@G18283 G18294@G18284) ((lambda (G18305@export-env G18306@export-subst G18307@visit-code G18308@invoke-code G18309@inv* G18310@vis* G18311@imp* G18312@ver G18313@name G18314@id) (values G18313@name G18308@invoke-code G18306@export-subst G18305@export-env)) G18294@G18284 G18293@G18283 G18292@G18282 G18291@G18281 G18290@G18280 G18289@G18279 G18288@G18278 G18287@G18277 G18286@G18276 G18285@G18275))))) (set! G12437@rev-map-append (lambda (G18325@f G18326@ls G18327@ac) (if (null? G18326@ls) G18327@ac (G12437@rev-map-append G18325@f (cdr G18326@ls) (cons (G18325@f (car G18326@ls)) G18327@ac))))) (set! G12439@build-exports (lambda (G18331@lex*+loc* G18332@init*) (G11492@G11349@build-sequence '#f (cons (G11493@G11351@build-void) (G12437@rev-map-append (lambda (G18335@x) (list 'set! (cdr G18335@x) (car G18335@x))) G18331@lex*+loc* G18332@init*))))) (set! G12441@make-export-subst (lambda (G18337@int* G18338@ext* G18339@rib) (map (lambda (G18343@int G18344@ext) ((lambda (G18347@id) ((lambda (G18349@label) ((lambda () (begin (if G18349@label (void) (G12459@syntax-violation '#f '"cannot export unbound identifier" G18347@id)) (cons G18344@ext G18349@label))))) (G11673@id->label G18347@id))) (G11593@make-stx G18343@int G11517@top-mark* (list G18339@rib) '()))) G18337@int* G18338@ext*))) (set! G12443@make-export-env/macros (lambda (G18351@lex* G18352@loc* G18353@r) ((lambda (G18358@lookup) (begin (set! G18358@lookup (lambda (G18386@x) ((letrec ((G18388@f (lambda (G18390@x G18391@lex* G18392@loc*) (if (pair? G18391@lex*) (if (eq? G18390@x (car G18391@lex*)) (car G18392@loc*) (G18388@f G18390@x (cdr G18391@lex*) (cdr G18392@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G18388@f) G18386@x G18351@lex* G18352@loc*))) ((letrec ((G18359@f (lambda (G18361@r G18362@env G18363@global* G18364@macro*) (if (null? G18361@r) (values G18362@env G18363@global* G18364@macro*) ((lambda (G18369@x) ((lambda (G18371@label G18372@b) ((lambda (G18375@t) (if (eqv? G18375@t 'lexical) ((lambda (G18380@v) ((lambda (G18382@loc G18383@type) (G18359@f (cdr G18361@r) (cons (cons* G18371@label G18383@type G18382@loc) G18362@env) (cons (cons (G12114@lexical-var G18380@v) G18382@loc) G18363@global*) G18364@macro*)) (G18358@lookup (G12114@lexical-var G18380@v)) (if (G12116@lexical-mutable? G18380@v) 'mutable 'global))) (G11683@binding-value G18372@b)) (if (eqv? G18375@t 'local-macro) ((lambda (G18378@loc) (G18359@f (cdr G18361@r) (cons (cons* G18371@label 'global-macro G18378@loc) G18362@env) G18363@global* (cons (cons G18378@loc (G11683@binding-value G18372@b)) G18364@macro*))) (gensym)) (if (eqv? G18375@t 'local-macro!) ((lambda (G18376@loc) (G18359@f (cdr G18361@r) (cons (cons* G18371@label 'global-macro! G18376@loc) G18362@env) G18363@global* (cons (cons G18376@loc (G11683@binding-value G18372@b)) G18364@macro*))) (gensym)) (if (memv G18375@t '($rtd $module)) (G18359@f (cdr G18361@r) (cons G18369@x G18362@env) G18363@global* G18364@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G11681@binding-type G18372@b) (G11683@binding-value G18372@b))))))) (G11681@binding-type G18372@b))) (car G18369@x) (cdr G18369@x))) (car G18361@r)))))) G18359@f) G18353@r '() '() '()))) '#f))) (set! G12445@generate-temporaries (lambda (G18396@ls) ((lambda (G18398@t) ((lambda (G18400@ls/false) (if G18400@ls/false (apply (lambda (G18402@ls) (map (lambda (G18404@x) (G11593@make-stx ((lambda (G18406@x) (if ((lambda (G18408@t) (if G18408@t G18408@t (begin '#f (string? G18406@x)))) (symbol? G18406@x)) (gensym G18406@x) (gensym 't))) (G12465@syntax->datum G18404@x)) G11517@top-mark* '() '())) G18402@ls)) G18400@ls/false) ((lambda (G18410@t) ((lambda (G18412@ls/false) (if G18412@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G18412@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G18410@t))) (G12226@syntax-dispatch G18410@t '_))) G18398@t))) (G12226@syntax-dispatch G18398@t 'each-any))) G18396@ls))) (set! G12447@free-identifier=? (lambda (G18414@x G18415@y) (if (G11647@id? G18414@x) (if (G11647@id? G18415@y) (G11655@free-id=? G18414@x G18415@y) (assertion-violation 'free-identifier=? '"not an identifier" G18415@y)) (assertion-violation 'free-identifier=? '"not an identifier" G18414@x)))) (set! G12449@bound-identifier=? (lambda (G18418@x G18419@y) (if (G11647@id? G18418@x) (if (G11647@id? G18419@y) (G11653@bound-id=? G18418@x G18419@y) (assertion-violation 'bound-identifier=? '"not an identifier" G18419@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G18418@x)))) (set! G12451@extract-position-condition (lambda (G18422@x) ((lambda (G18432@G18427 G18434@G18429 G18436@G18428 G18441@G18426 G18443@make-source-condition G18445@G18424 G18447@G18425 G18449@source-condition? G18451@source-filename G18453@source-line) (begin (set! G18432@G18427 (make-record-type-descriptor '&source-information &condition-rtd 'G18430 '#f '#f '#((immutable file-name) (immutable line)))) (set! G18434@G18429 '#f) (set! G18436@G18428 (make-record-constructor-descriptor G18432@G18427 &condition-rcd G18434@G18429)) (set! G18441@G18426 (record-predicate G18432@G18427)) (set! G18443@make-source-condition (record-constructor G18436@G18428)) (set! G18445@G18424 (record-accessor G18432@G18427 '0)) (set! G18447@G18425 (record-accessor G18432@G18427 '1)) (set! G18449@source-condition? (condition-predicate G18432@G18427)) (set! G18451@source-filename (condition-accessor G18432@G18427 G18445@G18424)) (set! G18453@source-line (condition-accessor G18432@G18427 G18447@G18425)) (if (G11591@stx? G18422@x) ((lambda (G18454@x) (if (G10455@G10242@annotation? G18454@x) ((lambda (G18456@src) (if (pair? G18456@src) (G18443@make-source-condition (car G18456@src) (cdr G18456@src)) (condition))) (G10456@G10244@annotation-source G18454@x)) (condition))) (G11595@stx-expr G18422@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12453@syntax-error (lambda (G18458@x . G18460@args) (begin (if (for-all string? G18460@args) (void) (assertion-violation 'syntax-error '"invalid argument" G18460@args)) (raise (condition (G19172@G18894@make-message-condition (if (null? G18460@args) '"invalid syntax" (apply string-append G18460@args))) (G19244@G19130@make-syntax-violation (G12465@syntax->datum G18458@x) '#f) (G12451@extract-position-condition G18458@x) (G12455@extract-trace G18458@x)))))) (set! G12455@extract-trace (lambda (G18462@x) ((lambda (G18471@G18466 G18473@G18468 G18475@G18467 G18480@G18465 G18482@make-trace G18484@G18464 G18486@trace? G18488@trace-form) (begin (set! G18471@G18466 (make-record-type-descriptor '&trace &condition-rtd 'G18469 '#f '#f '#((immutable form)))) (set! G18473@G18468 '#f) (set! G18475@G18467 (make-record-constructor-descriptor G18471@G18466 &condition-rcd G18473@G18468)) (set! G18480@G18465 (record-predicate G18471@G18466)) (set! G18482@make-trace (record-constructor G18475@G18467)) (set! G18484@G18464 (record-accessor G18471@G18466 '0)) (set! G18486@trace? (condition-predicate G18471@G18466)) (set! G18488@trace-form (condition-accessor G18471@G18466 G18484@G18464)) ((letrec ((G18489@f (lambda (G18491@x) (if (G11591@stx? G18491@x) (apply condition (G18482@make-trace G18491@x) (map G18489@f (G11601@stx-ae* G18491@x))) (if (G10455@G10242@annotation? G18491@x) (G18482@make-trace (G11593@make-stx G18491@x '() '() '())) (condition)))))) G18489@f) G18462@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12457@syntax-violation* (lambda (G18493@who G18494@msg G18495@form G18496@condition-object) (begin (if (string? G18494@msg) (void) (assertion-violation 'syntax-violation '"message is not a string" G18494@msg)) ((lambda (G18501@who) (raise (condition (if G18501@who (G19218@G19044@make-who-condition G18501@who) (condition)) (G19172@G18894@make-message-condition G18494@msg) G18496@condition-object (G12451@extract-position-condition G18495@form) (G12455@extract-trace G18495@form)))) (if ((lambda (G18503@t) (if G18503@t G18503@t (begin '#f (symbol? G18493@who)))) (string? G18493@who)) G18493@who (if (not G18493@who) ((lambda (G18505@t) ((lambda (G18507@ls/false) (if (if G18507@ls/false (begin '#f (apply (lambda (G18509@id) (G11647@id? G18509@id)) G18507@ls/false)) '#f) (apply (lambda (G18511@id) (G12465@syntax->datum G18511@id)) G18507@ls/false) ((lambda (G18513@t) ((lambda (G18515@ls/false) (if (if G18515@ls/false (begin '#f (apply (lambda (G18517@id G18518@rest) (G11647@id? G18517@id)) G18515@ls/false)) '#f) (apply (lambda (G18521@id G18522@rest) (G12465@syntax->datum G18521@id)) G18515@ls/false) ((lambda (G18525@t) ((lambda (G18527@ls/false) (if G18527@ls/false (apply (lambda () '#f) G18527@ls/false) (G12459@syntax-violation '#f '"invalid syntax" G18525@t))) (G12226@syntax-dispatch G18525@t '_))) G18513@t))) (G12226@syntax-dispatch G18513@t '(any . any)))) G18505@t))) (G12226@syntax-dispatch G18505@t 'any))) G18495@form) (assertion-violation 'syntax-violation '"invalid who argument" G18493@who))))))) (set! G12459@syntax-violation (lambda G18543 ((lambda (G18544) (if (= G18544 '3) (apply (lambda (G18529@who G18530@msg G18531@form) (G12459@syntax-violation G18529@who G18530@msg G18531@form '#f)) G18543) (if (= G18544 '4) (apply (lambda (G18535@who G18536@msg G18537@form G18538@subform) (G12457@syntax-violation* G18535@who G18536@msg G18537@form (G19244@G19130@make-syntax-violation (G12465@syntax->datum G18537@form) (G12465@syntax->datum G18538@subform)))) G18543) (error 'apply '"invalid arg count")))) (length G18543)))) (set! G12461@identifier? (lambda (G18545@x) (G11647@id? G18545@x))) (set! G12463@datum->syntax (lambda (G18547@id G18548@datum) (if (G11647@id? G18547@id) (G11613@datum->stx G18547@id G18548@datum) (assertion-violation 'datum->syntax '"not an identifier" G18547@id)))) (set! G12465@syntax->datum (lambda (G18551@x) (G11669@stx->datum G18551@x))) (set! G12467@compile-r6rs-top-level (lambda (G18553@x*) (call-with-values (lambda () (G12353@top-level-expander G18553@x*)) (lambda (G18557@G18555 G18558@G18556) ((lambda (G18561@invoke-code G18562@lib*) (lambda () (begin (for-each G11134@G10774@invoke-library G18562@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G10562@G10475@expanded->core G18561@invoke-code)) (void)) (eval-core (G10562@G10475@expanded->core G18561@invoke-code))))) G18558@G18556 G18557@G18555))))) (set! G12469@pre-compile-r6rs-top-level (lambda (G18565@x*) (call-with-values (lambda () (G12353@top-level-expander G18565@x*)) (lambda (G18569@G18567 G18570@G18568) ((lambda (G18573@invoke-code G18574@lib*) (begin (for-each G11134@G10774@invoke-library G18574@lib*) (G10461@G10254@compile-core (G10562@G10475@expanded->core G18573@invoke-code)))) G18570@G18568 G18569@G18567))))) (set! G12471@interaction-environment ((lambda (G18577@the-env) (lambda () ((lambda (G18579@t) (if G18579@t G18579@t (begin '#f ((lambda (G18581@lib G18582@rib) (begin ((lambda (G18585@subst) (begin (G11558@set-rib-sym*! G18582@rib (map car G18585@subst)) (G11560@set-rib-mark**! G18582@rib (map (lambda (G18587@x) G11517@top-mark*) G18585@subst)) (G11562@set-rib-label*! G18582@rib (map cdr G18585@subst)))) (G11091@G10688@library-subst G18581@lib)) ((lambda (G18589@env) (begin (set! G18577@the-env G18589@env) G18589@env)) (G12401@make-interaction-env G18582@rib '() '())))) (G11127@G10760@find-library-by-name '(mosh interaction)) (G11566@make-empty-rib))))) G18577@the-env))) '#f)) (set! G12473@top-level-context (G10463@G10258@make-parameter '#f)) (begin (set! G18850@G12473@top-level-context G12473@top-level-context) (set! G18849@G12471@interaction-environment G12471@interaction-environment) (set! G18848@G12469@pre-compile-r6rs-top-level G12469@pre-compile-r6rs-top-level) (set! G18847@G12467@compile-r6rs-top-level G12467@compile-r6rs-top-level) (set! G18846@G12465@syntax->datum G12465@syntax->datum) (set! G18845@G12463@datum->syntax G12463@datum->syntax) (set! G18844@G12461@identifier? G12461@identifier?) (set! G18843@G12459@syntax-violation G12459@syntax-violation) (set! G18842@G12457@syntax-violation* G12457@syntax-violation*) (set! G18841@G12455@extract-trace G12455@extract-trace) (set! G18840@G12453@syntax-error G12453@syntax-error) (set! G18839@G12451@extract-position-condition G12451@extract-position-condition) (set! G18838@G12449@bound-identifier=? G12449@bound-identifier=?) (set! G18837@G12447@free-identifier=? G12447@free-identifier=?) (set! G18836@G12445@generate-temporaries G12445@generate-temporaries) (set! G18835@G12443@make-export-env/macros G12443@make-export-env/macros) (set! G18834@G12441@make-export-subst G12441@make-export-subst) (set! G18833@G12439@build-exports G12439@build-exports) (set! G18832@G12437@rev-map-append G12437@rev-map-append) (set! G18831@G12435@boot-library-expand G12435@boot-library-expand) (set! G18830@G12433@library-expander G12433@library-expander) (set! G18829@G12431@eval G12431@eval) (set! G18828@G12429@expand G12429@expand) (set! G18827@G12427@scheme-report-environment G12427@scheme-report-environment) (set! G18826@G12425@null-environment G12425@null-environment) (set! G18825@G12423@environment G12423@environment) (set! G18824@G12421@environment? G12421@environment?) (set! G18823@G12419@environment-symbols G12419@environment-symbols) (set! G18822@G12417@interaction-environment-symbols G12417@interaction-environment-symbols) (set! G18821@G12415@rp G12415@rp) (set! G18820@G12413@set-interaction-env-locs! G12413@set-interaction-env-locs!) (set! G18819@G12411@set-interaction-env-r! G12411@set-interaction-env-r!) (set! G18818@G12409@set-interaction-env-rib! G12409@set-interaction-env-rib!) (set! G18817@G12407@interaction-env-locs G12407@interaction-env-locs) (set! G18816@G12405@interaction-env-r G12405@interaction-env-r) (set! G18815@G12403@interaction-env-rib G12403@interaction-env-rib) (set! G18814@G12401@make-interaction-env G12401@make-interaction-env) (set! G18813@G12399@interaction-env? G12399@interaction-env?) (set! G18812@G12394@G12386 G12394@G12386) (set! G18811@G12392@G12387 G12392@G12387) (set! G18810@G12390@G12385 G12390@G12385) (set! G18809@G12384@rp G12384@rp) (set! G18808@G12382@set-env-itc! G12382@set-env-itc!) (set! G18807@G12380@set-env-labels! G12380@set-env-labels!) (set! G18806@G12378@set-env-names! G12378@set-env-names!) (set! G18805@G12376@env-itc G12376@env-itc) (set! G18804@G12374@env-labels G12374@env-labels) (set! G18803@G12372@env-names G12372@env-names) (set! G18802@G12370@make-env G12370@make-env) (set! G18801@G12368@env? G12368@env?) (set! G18800@G12363@G12355 G12363@G12355) (set! G18799@G12361@G12356 G12361@G12356) (set! G18798@G12359@G12354 G12359@G12354) (set! G18797@G12353@top-level-expander G12353@top-level-expander) (set! G18796@G12351@parse-top-level-program G12351@parse-top-level-program) (set! G18795@G12349@core-library-expander G12349@core-library-expander) (set! G18794@G12347@library-body-expander G12347@library-body-expander) (set! G18793@G12345@chi-interaction-expr G12345@chi-interaction-expr) (set! G18792@G12343@chi-library-internal G12343@chi-library-internal) (set! G18791@G12341@imp-collector G12341@imp-collector) (set! G18790@G12339@vis-collector G12339@vis-collector) (set! G18789@G12337@inv-collector G12337@inv-collector) (set! G18788@G12335@make-collector G12335@make-collector) (set! G18787@G12333@make-top-rib G12333@make-top-rib) (set! G18786@G12331@parse-import-spec* G12331@parse-import-spec*) (set! G18785@G12329@parse-library G12329@parse-library) (set! G18784@G12327@parse-library-name G12327@parse-library-name) (set! G18783@G12325@parse-exports G12325@parse-exports) (set! G18782@G12323@expand-transformer G12323@expand-transformer) (set! G18781@G12321@chi-body* G12321@chi-body*) (set! G18780@G12319@chi-internal-module G12319@chi-internal-module) (set! G18779@G12317@module-interface-exp-id* G12317@module-interface-exp-id*) (set! G18778@G12315@set-module-interface-exp-lab-vec! G12315@set-module-interface-exp-lab-vec!) (set! G18777@G12313@set-module-interface-exp-id-vec! G12313@set-module-interface-exp-id-vec!) (set! G18776@G12311@set-module-interface-first-mark! G12311@set-module-interface-first-mark!) (set! G18775@G12309@module-interface-exp-lab-vec G12309@module-interface-exp-lab-vec) (set! G18774@G12307@module-interface-exp-id-vec G12307@module-interface-exp-id-vec) (set! G18773@G12305@module-interface-first-mark G12305@module-interface-first-mark) (set! G18772@G12303@make-module-interface G12303@make-module-interface) (set! G18771@G12301@module-interface? G12301@module-interface?) (set! G18770@G12296@G12288 G12296@G12288) (set! G18769@G12294@G12289 G12294@G12289) (set! G18768@G12292@G12287 G12292@G12287) (set! G18767@G12286@parse-module G12286@parse-module) (set! G18766@G12284@chi-internal G12284@chi-internal) (set! G18765@G12282@find-dups G12282@find-dups) (set! G18764@G12280@find-bound=? G12280@find-bound=?) (set! G18763@G12278@chi-rhs* G12278@chi-rhs*) (set! G18762@G12276@expand-interaction-rhs*/init* G12276@expand-interaction-rhs*/init*) (set! G18761@G12274@chi-rhs G12274@chi-rhs) (set! G18760@G12272@chi-defun G12272@chi-defun) (set! G18759@G12270@chi-lambda-clause* G12270@chi-lambda-clause*) (set! G18758@G12268@chi-lambda-clause G12268@chi-lambda-clause) (set! G18757@G12266@verify-formals G12266@verify-formals) (set! G18756@G12264@chi-set! G12264@chi-set!) (set! G18755@G12262@chi-expr G12262@chi-expr) (set! G18754@G12260@chi-application G12260@chi-application) (set! G18753@G12258@chi-expr* G12258@chi-expr*) (set! G18752@G12256@chi-global-macro G12256@chi-global-macro) (set! G18751@G12254@chi-local-macro G12254@chi-local-macro) (set! G18750@G12252@chi-macro G12252@chi-macro) (set! G18749@G12250@do-macro-call G12250@do-macro-call) (set! G18748@G12248@local-macro-transformer G12248@local-macro-transformer) (set! G18747@G12246@macro-transformer G12246@macro-transformer) (set! G18746@G12244@symbol-macro G12244@symbol-macro) (set! G18745@G12242@file-options-macro G12242@file-options-macro) (set! G18744@G12240@core-macro-transformer G12240@core-macro-transformer) (set! G18743@G12238@syntax-transformer G12238@syntax-transformer) (set! G18742@G12236@ellipsis-map G12236@ellipsis-map) (set! G18741@G12234@syntax-case-transformer G12234@syntax-case-transformer) (set! G18740@G12232@verify-literals G12232@verify-literals) (set! G18739@G12230@underscore? G12230@underscore?) (set! G18738@G12228@ellipsis? G12228@ellipsis?) (set! G18737@G12226@syntax-dispatch G12226@syntax-dispatch) (set! G18736@G12224@convert-pattern G12224@convert-pattern) (set! G18735@G12222@foreign-call-transformer G12222@foreign-call-transformer) (set! G18734@G12220@parameterize-transformer G12220@parameterize-transformer) (set! G18733@G12218@incorrect-usage-macro G12218@incorrect-usage-macro) (set! G18732@G12216@define-condition-type-macro G12216@define-condition-type-macro) (set! G18731@G12214@define-record-type-macro G12214@define-record-type-macro) (set! G18730@G12212@define-struct-macro G12212@define-struct-macro) (set! G18729@G12210@quasisyntax-macro G12210@quasisyntax-macro) (set! G18728@G12208@quasiquote-macro G12208@quasiquote-macro) (set! G18727@G12206@syntax-rules-macro G12206@syntax-rules-macro) (set! G18726@G12204@include-into-macro G12204@include-into-macro) (set! G18725@G12202@include-macro G12202@include-macro) (set! G18724@G12200@do-include G12200@do-include) (set! G18723@G12198@cond-macro G12198@cond-macro) (set! G18722@G12196@and-macro G12196@and-macro) (set! G18721@G12194@or-macro G12194@or-macro) (set! G18720@G12192@let*-macro G12192@let*-macro) (set! G18719@G12190@do-macro G12190@do-macro) (set! G18718@G12188@identifier-syntax-macro G12188@identifier-syntax-macro) (set! G18717@G12186@endianness-macro G12186@endianness-macro) (set! G18716@G12184@assert-macro G12184@assert-macro) (set! G18715@G12182@delay-macro G12182@delay-macro) (set! G18714@G12180@time-macro G12180@time-macro) (set! G18713@G12178@define-enumeration-macro G12178@define-enumeration-macro) (set! G18712@G12176@guard-macro G12176@guard-macro) (set! G18711@G12174@trace-letrec-syntax-macro G12174@trace-letrec-syntax-macro) (set! G18710@G12172@trace-let-syntax-macro G12172@trace-let-syntax-macro) (set! G18709@G12170@trace-let/rec-syntax G12170@trace-let/rec-syntax) (set! G18708@G12168@trace-define-syntax-macro G12168@trace-define-syntax-macro) (set! G18707@G12166@trace-define-macro G12166@trace-define-macro) (set! G18706@G12164@trace-lambda-macro G12164@trace-lambda-macro) (set! G18705@G12162@let*-values-macro G12162@let*-values-macro) (set! G18704@G12160@let-values-macro G12160@let-values-macro) (set! G18703@G12158@let-macro G12158@let-macro) (set! G18702@G12156@invalid-fmls-error G12156@invalid-fmls-error) (set! G18701@G12154@with-syntax-macro G12154@with-syntax-macro) (set! G18700@G12152@bless G12152@bless) (set! G18699@G12150@lambda-transformer G12150@lambda-transformer) (set! G18698@G12148@case-lambda-transformer G12148@case-lambda-transformer) (set! G18697@G12146@quote-transformer G12146@quote-transformer) (set! G18696@G12144@case-transformer G12144@case-transformer) (set! G18695@G12142@if-transformer G12142@if-transformer) (set! G18694@G12140@unless-transformer G12140@unless-transformer) (set! G18693@G12138@when-transformer G12138@when-transformer) (set! G18692@G12136@record-constructor-descriptor-transformer G12136@record-constructor-descriptor-transformer) (set! G18691@G12134@record-type-descriptor-transformer G12134@record-type-descriptor-transformer) (set! G18690@G12132@type-descriptor-transformer G12132@type-descriptor-transformer) (set! G18689@G12130@fluid-let-syntax-transformer G12130@fluid-let-syntax-transformer) (set! G18688@G12128@letrec*-transformer G12128@letrec*-transformer) (set! G18687@G12126@letrec-transformer G12126@letrec-transformer) (set! G18686@G12124@letrec-helper G12124@letrec-helper) (set! G18685@G12122@add-lexicals G12122@add-lexicals) (set! G18684@G12120@add-lexical G12120@add-lexical) (set! G18683@G12118@set-lexical-mutable! G12118@set-lexical-mutable!) (set! G18682@G12116@lexical-mutable? G12116@lexical-mutable?) (set! G18681@G12114@lexical-var G12114@lexical-var) (set! G18680@G12112@scheme-stx G12112@scheme-stx) (set! G18679@G12110@scheme-stx-hashtable G12110@scheme-stx-hashtable) (set! G18678@G12108@parse-define-syntax G12108@parse-define-syntax) (set! G18677@G12106@parse-define G12106@parse-define) (set! G18676@G11718@make-eval-transformer G11718@make-eval-transformer) (set! G18675@G11716@variable-transformer-procedure G11716@variable-transformer-procedure) (set! G18674@G11714@variable-transformer? G11714@variable-transformer?) (set! G18673@G11712@make-variable-transformer G11712@make-variable-transformer) (set! G18672@G11710@sanitize-binding G11710@sanitize-binding) (set! G18671@G11687@syntax-type G11687@syntax-type) (set! G18670@G11685@raise-unbound-error G11685@raise-unbound-error) (set! G18669@G11683@binding-value G11683@binding-value) (set! G18668@G11681@binding-type G11681@binding-type) (set! G18667@G11679@make-binding G11679@make-binding) (set! G18666@G11677@label->binding G11677@label->binding) (set! G18665@G11675@id->real-label G11675@id->real-label) (set! G18664@G11673@id->label G11673@id->label) (set! G18663@G11671@same-marks*? G11671@same-marks*?) (set! G18662@G11669@stx->datum G11669@stx->datum) (set! G18661@G11667@strip G11667@strip) (set! G18660@G11665@strip-annotations G11665@strip-annotations) (set! G18659@G11663@self-evaluating? G11663@self-evaluating?) (set! G18658@G11661@bound-id-member? G11661@bound-id-member?) (set! G18657@G11659@distinct-bound-ids? G11659@distinct-bound-ids?) (set! G18656@G11657@valid-bound-ids? G11657@valid-bound-ids?) (set! G18655@G11655@free-id=? G11655@free-id=?) (set! G18654@G11653@bound-id=? G11653@bound-id=?) (set! G18653@G11651@same-marks? G11651@same-marks?) (set! G18652@G11649@id->sym G11649@id->sym) (set! G18651@G11647@id? G11647@id?) (set! G18650@G11645@syntax->list G11645@syntax->list) (set! G18649@G11643@syntax-cdr G11643@syntax-cdr) (set! G18648@G11641@syntax-car G11641@syntax-car) (set! G18647@G11639@syntax-list? G11639@syntax-list?) (set! G18646@G11637@syntax-null? G11637@syntax-null?) (set! G18645@G11635@syntax-vector? G11635@syntax-vector?) (set! G18644@G11633@syntax-pair? G11633@syntax-pair?) (set! G18643@G11631@syntax-vector->list G11631@syntax-vector->list) (set! G18642@G11629@syntax-kind? G11629@syntax-kind?) (set! G18641@G11627@add-subst G11627@add-subst) (set! G18640@G11625@add-mark G11625@add-mark) (set! G18639@G11623@mkstx G11623@mkstx) (set! G18638@G11621@join-wraps G11621@join-wraps) (set! G18637@G11619@anti-mark? G11619@anti-mark?) (set! G18636@G11617@anti-mark G11617@anti-mark) (set! G18635@G11615@gen-mark G11615@gen-mark) (set! G18634@G11613@datum->stx G11613@datum->stx) (set! G18633@G11611@rp G11611@rp) (set! G18632@G11609@set-stx-ae*! G11609@set-stx-ae*!) (set! G18631@G11607@set-stx-subst*! G11607@set-stx-subst*!) (set! G18630@G11605@set-stx-mark*! G11605@set-stx-mark*!) (set! G18629@G11603@set-stx-expr! G11603@set-stx-expr!) (set! G18628@G11601@stx-ae* G11601@stx-ae*) (set! G18627@G11599@stx-subst* G11599@stx-subst*) (set! G18626@G11597@stx-mark* G11597@stx-mark*) (set! G18625@G11595@stx-expr G11595@stx-expr) (set! G18624@G11593@make-stx G11593@make-stx) (set! G18623@G11591@stx? G11591@stx?) (set! G18622@G11586@G11578 G11586@G11578) (set! G18621@G11584@G11579 G11584@G11579) (set! G18620@G11582@G11577 G11582@G11577) (set! G18619@G11576@make-full-rib G11576@make-full-rib) (set! G18618@G11574@unseal-rib! G11574@unseal-rib!) (set! G18617@G11572@seal-rib! G11572@seal-rib!) (set! G18616@G11570@make-rib-map G11570@make-rib-map) (set! G18615@G11568@extend-rib! G11568@extend-rib!) (set! G18614@G11566@make-empty-rib G11566@make-empty-rib) (set! G18613@G11564@set-rib-sealed/freq! G11564@set-rib-sealed/freq!) (set! G18612@G11562@set-rib-label*! G11562@set-rib-label*!) (set! G18611@G11560@set-rib-mark**! G11560@set-rib-mark**!) (set! G18610@G11558@set-rib-sym*! G11558@set-rib-sym*!) (set! G18609@G11556@rib-sealed/freq G11556@rib-sealed/freq) (set! G18608@G11554@rib-label* G11554@rib-label*) (set! G18607@G11552@rib-mark** G11552@rib-mark**) (set! G18606@G11550@rib-sym* G11550@rib-sym*) (set! G18605@G11548@make-rib G11548@make-rib) (set! G18604@G11546@rib? G11546@rib?) (set! G18603@G11541@G11533 G11541@G11533) (set! G18602@G11539@G11534 G11539@G11534) (set! G18601@G11537@G11532 G11537@G11532) (set! G18600@G11531@gen-define-label G11531@gen-define-label) (set! G18599@G11529@gen-define-label+loc G11529@gen-define-label+loc) (set! G18598@G11527@gen-top-level-label G11527@gen-top-level-label) (set! G18597@G11525@gen-label G11525@gen-label) (set! G18596@G11523@gen-global G11523@gen-global) (set! G18595@G11521@gen-lexical G11521@gen-lexical) (set! G18594@G11519@top-marked? G11519@top-marked?) (set! G18593@G11517@top-mark* G11517@top-mark*) (set! G18592@G11512@set-union G11512@set-union) (set! G18591@G11510@set-cons G11510@set-cons) (G11124@G10754@current-library-expander G12433@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G18860@G18855 G18862@G18857 G18864@G18856 G18869@&condition? G18871@make-&condition G18873@&condition-rtd G18875@&condition-rcd G18883@G18878 G18885@G18880 G18887@G18879 G18892@G18877 G18894@make-message-condition G18896@G18876 G18898@message-condition? G18900@condition-message G18907@G18902 G18909@G18904 G18911@G18903 G18916@G18901 G18918@make-warning G18920@warning? G18927@G18922 G18929@G18924 G18931@G18923 G18936@G18921 G18938@make-serious-condition G18940@serious-condition? G18947@G18942 G18949@G18944 G18951@G18943 G18956@G18941 G18958@make-error G18960@error? G18967@G18962 G18969@G18964 G18971@G18963 G18976@G18961 G18978@make-violation G18980@violation? G18987@G18982 G18989@G18984 G18991@G18983 G18996@G18981 G18998@make-assertion-violation G19000@assertion-violation? G19008@G19003 G19010@G19005 G19012@G19004 G19017@G19002 G19019@make-irritants-condition G19021@G19001 G19023@irritants-condition? G19025@condition-irritants G19033@G19028 G19035@G19030 G19037@G19029 G19042@G19027 G19044@make-who-condition G19046@G19026 G19048@who-condition? G19050@condition-who G19057@G19052 G19059@G19054 G19061@G19053 G19066@G19051 G19068@make-non-continuable-violation G19070@non-continuable-violation? G19077@G19072 G19079@G19074 G19081@G19073 G19086@G19071 G19088@make-implementation-restriction-violation G19090@implementation-restriction-violation? G19097@G19092 G19099@G19094 G19101@G19093 G19106@G19091 G19108@make-lexical-violation G19110@lexical-violation? G19119@G19114 G19121@G19116 G19123@G19115 G19128@G19113 G19130@make-syntax-violation G19132@G19111 G19134@G19112 G19136@syntax-violation? G19138@syntax-violation-form G19140@syntax-violation-subform G19147@G19142 G19149@G19144 G19151@G19143 G19156@G19141 G19158@make-undefined-violation G19160@undefined-violation?) (begin (set! G18860@G18855 (make-record-type-descriptor '&condition '#f 'G18858 '#f '#f '#())) (set! G18862@G18857 '#f) (set! G18864@G18856 (make-record-constructor-descriptor G18860@G18855 '#f G18862@G18857)) (set! G18869@&condition? (record-predicate G18860@G18855)) (set! G18871@make-&condition (record-constructor G18864@G18856)) (set! G18873@&condition-rtd G18860@G18855) (set! G18875@&condition-rcd G18864@G18856) (set! G18883@G18878 (make-record-type-descriptor '&message G18860@G18855 'G18881 '#f '#f '#((immutable message)))) (set! G18885@G18880 '#f) (set! G18887@G18879 (make-record-constructor-descriptor G18883@G18878 G18864@G18856 G18885@G18880)) (set! G18892@G18877 (record-predicate G18883@G18878)) (set! G18894@make-message-condition (record-constructor G18887@G18879)) (set! G18896@G18876 (record-accessor G18883@G18878 '0)) (set! G18898@message-condition? (condition-predicate G18883@G18878)) (set! G18900@condition-message (condition-accessor G18883@G18878 G18896@G18876)) (set! G18907@G18902 (make-record-type-descriptor '&warning G18860@G18855 'G18905 '#f '#f '#())) (set! G18909@G18904 '#f) (set! G18911@G18903 (make-record-constructor-descriptor G18907@G18902 G18864@G18856 G18909@G18904)) (set! G18916@G18901 (record-predicate G18907@G18902)) (set! G18918@make-warning (record-constructor G18911@G18903)) (set! G18920@warning? (condition-predicate G18907@G18902)) (set! G18927@G18922 (make-record-type-descriptor '&serious G18860@G18855 'G18925 '#f '#f '#())) (set! G18929@G18924 '#f) (set! G18931@G18923 (make-record-constructor-descriptor G18927@G18922 G18864@G18856 G18929@G18924)) (set! G18936@G18921 (record-predicate G18927@G18922)) (set! G18938@make-serious-condition (record-constructor G18931@G18923)) (set! G18940@serious-condition? (condition-predicate G18927@G18922)) (set! G18947@G18942 (make-record-type-descriptor '&error G18927@G18922 'G18945 '#f '#f '#())) (set! G18949@G18944 '#f) (set! G18951@G18943 (make-record-constructor-descriptor G18947@G18942 G18931@G18923 G18949@G18944)) (set! G18956@G18941 (record-predicate G18947@G18942)) (set! G18958@make-error (record-constructor G18951@G18943)) (set! G18960@error? (condition-predicate G18947@G18942)) (set! G18967@G18962 (make-record-type-descriptor '&violation G18927@G18922 'G18965 '#f '#f '#())) (set! G18969@G18964 '#f) (set! G18971@G18963 (make-record-constructor-descriptor G18967@G18962 G18931@G18923 G18969@G18964)) (set! G18976@G18961 (record-predicate G18967@G18962)) (set! G18978@make-violation (record-constructor G18971@G18963)) (set! G18980@violation? (condition-predicate G18967@G18962)) (set! G18987@G18982 (make-record-type-descriptor '&assertion G18967@G18962 'G18985 '#f '#f '#())) (set! G18989@G18984 '#f) (set! G18991@G18983 (make-record-constructor-descriptor G18987@G18982 G18971@G18963 G18989@G18984)) (set! G18996@G18981 (record-predicate G18987@G18982)) (set! G18998@make-assertion-violation (record-constructor G18991@G18983)) (set! G19000@assertion-violation? (condition-predicate G18987@G18982)) (set! G19008@G19003 (make-record-type-descriptor '&irritants G18860@G18855 'G19006 '#f '#f '#((immutable irritants)))) (set! G19010@G19005 '#f) (set! G19012@G19004 (make-record-constructor-descriptor G19008@G19003 G18864@G18856 G19010@G19005)) (set! G19017@G19002 (record-predicate G19008@G19003)) (set! G19019@make-irritants-condition (record-constructor G19012@G19004)) (set! G19021@G19001 (record-accessor G19008@G19003 '0)) (set! G19023@irritants-condition? (condition-predicate G19008@G19003)) (set! G19025@condition-irritants (condition-accessor G19008@G19003 G19021@G19001)) (set! G19033@G19028 (make-record-type-descriptor '&who G18860@G18855 'G19031 '#f '#f '#((immutable who)))) (set! G19035@G19030 '#f) (set! G19037@G19029 (make-record-constructor-descriptor G19033@G19028 G18864@G18856 G19035@G19030)) (set! G19042@G19027 (record-predicate G19033@G19028)) (set! G19044@make-who-condition (record-constructor G19037@G19029)) (set! G19046@G19026 (record-accessor G19033@G19028 '0)) (set! G19048@who-condition? (condition-predicate G19033@G19028)) (set! G19050@condition-who (condition-accessor G19033@G19028 G19046@G19026)) (set! G19057@G19052 (make-record-type-descriptor '&non-continuable G18967@G18962 'G19055 '#f '#f '#())) (set! G19059@G19054 '#f) (set! G19061@G19053 (make-record-constructor-descriptor G19057@G19052 G18971@G18963 G19059@G19054)) (set! G19066@G19051 (record-predicate G19057@G19052)) (set! G19068@make-non-continuable-violation (record-constructor G19061@G19053)) (set! G19070@non-continuable-violation? (condition-predicate G19057@G19052)) (set! G19077@G19072 (make-record-type-descriptor '&implementation-restriction G18967@G18962 'G19075 '#f '#f '#())) (set! G19079@G19074 '#f) (set! G19081@G19073 (make-record-constructor-descriptor G19077@G19072 G18971@G18963 G19079@G19074)) (set! G19086@G19071 (record-predicate G19077@G19072)) (set! G19088@make-implementation-restriction-violation (record-constructor G19081@G19073)) (set! G19090@implementation-restriction-violation? (condition-predicate G19077@G19072)) (set! G19097@G19092 (make-record-type-descriptor '&lexical G18967@G18962 'G19095 '#f '#f '#())) (set! G19099@G19094 '#f) (set! G19101@G19093 (make-record-constructor-descriptor G19097@G19092 G18971@G18963 G19099@G19094)) (set! G19106@G19091 (record-predicate G19097@G19092)) (set! G19108@make-lexical-violation (record-constructor G19101@G19093)) (set! G19110@lexical-violation? (condition-predicate G19097@G19092)) (set! G19119@G19114 (make-record-type-descriptor '&syntax G18967@G18962 'G19117 '#f '#f '#((immutable form) (immutable subform)))) (set! G19121@G19116 '#f) (set! G19123@G19115 (make-record-constructor-descriptor G19119@G19114 G18971@G18963 G19121@G19116)) (set! G19128@G19113 (record-predicate G19119@G19114)) (set! G19130@make-syntax-violation (record-constructor G19123@G19115)) (set! G19132@G19111 (record-accessor G19119@G19114 '0)) (set! G19134@G19112 (record-accessor G19119@G19114 '1)) (set! G19136@syntax-violation? (condition-predicate G19119@G19114)) (set! G19138@syntax-violation-form (condition-accessor G19119@G19114 G19132@G19111)) (set! G19140@syntax-violation-subform (condition-accessor G19119@G19114 G19134@G19112)) (set! G19147@G19142 (make-record-type-descriptor '&undefined G18967@G18962 'G19145 '#f '#f '#())) (set! G19149@G19144 '#f) (set! G19151@G19143 (make-record-constructor-descriptor G19147@G19142 G18971@G18963 G19149@G19144)) (set! G19156@G19141 (record-predicate G19147@G19142)) (set! G19158@make-undefined-violation (record-constructor G19151@G19143)) (set! G19160@undefined-violation? (condition-predicate G19147@G19142)) (begin (set! G19255@G19160@undefined-violation? G19160@undefined-violation?) (set! G19254@G19158@make-undefined-violation G19158@make-undefined-violation) (set! G19253@G19156@G19141 G19156@G19141) (set! G19252@G19151@G19143 G19151@G19143) (set! G19251@G19149@G19144 G19149@G19144) (set! G19250@G19147@G19142 G19147@G19142) (set! G19249@G19140@syntax-violation-subform G19140@syntax-violation-subform) (set! G19248@G19138@syntax-violation-form G19138@syntax-violation-form) (set! G19247@G19136@syntax-violation? G19136@syntax-violation?) (set! G19246@G19134@G19112 G19134@G19112) (set! G19245@G19132@G19111 G19132@G19111) (set! G19244@G19130@make-syntax-violation G19130@make-syntax-violation) (set! G19243@G19128@G19113 G19128@G19113) (set! G19242@G19123@G19115 G19123@G19115) (set! G19241@G19121@G19116 G19121@G19116) (set! G19240@G19119@G19114 G19119@G19114) (set! G19239@G19110@lexical-violation? G19110@lexical-violation?) (set! G19238@G19108@make-lexical-violation G19108@make-lexical-violation) (set! G19237@G19106@G19091 G19106@G19091) (set! G19236@G19101@G19093 G19101@G19093) (set! G19235@G19099@G19094 G19099@G19094) (set! G19234@G19097@G19092 G19097@G19092) (set! G19233@G19090@implementation-restriction-violation? G19090@implementation-restriction-violation?) (set! G19232@G19088@make-implementation-restriction-violation G19088@make-implementation-restriction-violation) (set! G19231@G19086@G19071 G19086@G19071) (set! G19230@G19081@G19073 G19081@G19073) (set! G19229@G19079@G19074 G19079@G19074) (set! G19228@G19077@G19072 G19077@G19072) (set! G19227@G19070@non-continuable-violation? G19070@non-continuable-violation?) (set! G19226@G19068@make-non-continuable-violation G19068@make-non-continuable-violation) (set! G19225@G19066@G19051 G19066@G19051) (set! G19224@G19061@G19053 G19061@G19053) (set! G19223@G19059@G19054 G19059@G19054) (set! G19222@G19057@G19052 G19057@G19052) (set! G19221@G19050@condition-who G19050@condition-who) (set! G19220@G19048@who-condition? G19048@who-condition?) (set! G19219@G19046@G19026 G19046@G19026) (set! G19218@G19044@make-who-condition G19044@make-who-condition) (set! G19217@G19042@G19027 G19042@G19027) (set! G19216@G19037@G19029 G19037@G19029) (set! G19215@G19035@G19030 G19035@G19030) (set! G19214@G19033@G19028 G19033@G19028) (set! G19213@G19025@condition-irritants G19025@condition-irritants) (set! G19212@G19023@irritants-condition? G19023@irritants-condition?) (set! G19211@G19021@G19001 G19021@G19001) (set! G19210@G19019@make-irritants-condition G19019@make-irritants-condition) (set! G19209@G19017@G19002 G19017@G19002) (set! G19208@G19012@G19004 G19012@G19004) (set! G19207@G19010@G19005 G19010@G19005) (set! G19206@G19008@G19003 G19008@G19003) (set! G19205@G19000@assertion-violation? G19000@assertion-violation?) (set! G19204@G18998@make-assertion-violation G18998@make-assertion-violation) (set! G19203@G18996@G18981 G18996@G18981) (set! G19202@G18991@G18983 G18991@G18983) (set! G19201@G18989@G18984 G18989@G18984) (set! G19200@G18987@G18982 G18987@G18982) (set! G19199@G18980@violation? G18980@violation?) (set! G19198@G18978@make-violation G18978@make-violation) (set! G19197@G18976@G18961 G18976@G18961) (set! G19196@G18971@G18963 G18971@G18963) (set! G19195@G18969@G18964 G18969@G18964) (set! G19194@G18967@G18962 G18967@G18962) (set! G19193@G18960@error? G18960@error?) (set! G19192@G18958@make-error G18958@make-error) (set! G19191@G18956@G18941 G18956@G18941) (set! G19190@G18951@G18943 G18951@G18943) (set! G19189@G18949@G18944 G18949@G18944) (set! G19188@G18947@G18942 G18947@G18942) (set! G19187@G18940@serious-condition? G18940@serious-condition?) (set! G19186@G18938@make-serious-condition G18938@make-serious-condition) (set! G19185@G18936@G18921 G18936@G18921) (set! G19184@G18931@G18923 G18931@G18923) (set! G19183@G18929@G18924 G18929@G18924) (set! G19182@G18927@G18922 G18927@G18922) (set! G19181@G18920@warning? G18920@warning?) (set! G19180@G18918@make-warning G18918@make-warning) (set! G19179@G18916@G18901 G18916@G18901) (set! G19178@G18911@G18903 G18911@G18903) (set! G19177@G18909@G18904 G18909@G18904) (set! G19176@G18907@G18902 G18907@G18902) (set! G19175@G18900@condition-message G18900@condition-message) (set! G19174@G18898@message-condition? G18898@message-condition?) (set! G19173@G18896@G18876 G18896@G18876) (set! G19172@G18894@make-message-condition G18894@make-message-condition) (set! G19171@G18892@G18877 G18892@G18877) (set! G19170@G18887@G18879 G18887@G18879) (set! G19169@G18885@G18880 G18885@G18880) (set! G19168@G18883@G18878 G18883@G18878) (set! G19167@G18875@&condition-rcd G18875@&condition-rcd) (set! G19166@G18873@&condition-rtd G18873@&condition-rtd) (set! G19165@G18871@make-&condition G18871@make-&condition) (set! G19164@G18869@&condition? G18869@&condition?) (set! G19163@G18864@G18856 G18864@G18856) (set! G19162@G18862@G18857 G18862@G18857) (set! G19161@G18860@G18855 G18860@G18855)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G19263@G19258 G19265@G19260 G19267@G19259 G19272@G19257 G19274@make-i/o-error G19276@i/o-error? G19283@G19278 G19285@G19280 G19287@G19279 G19292@G19277 G19294@make-i/o-read-error G19296@i/o-read-error? G19303@G19298 G19305@G19300 G19307@G19299 G19312@G19297 G19314@make-i/o-write-error G19316@i/o-write-error? G19324@G19319 G19326@G19321 G19328@G19320 G19333@G19318 G19335@make-i/o-invalid-position-error G19337@G19317 G19339@i/o-invalid-position-error? G19341@i/o-error-position G19349@G19344 G19351@G19346 G19353@G19345 G19358@G19343 G19360@make-i/o-filename-error G19362@G19342 G19364@i/o-filename-error? G19366@i/o-error-filename G19373@G19368 G19375@G19370 G19377@G19369 G19382@G19367 G19384@make-i/o-file-protection-error G19386@i/o-file-protection-error? G19393@G19388 G19395@G19390 G19397@G19389 G19402@G19387 G19404@make-i/o-file-is-read-only-error G19406@i/o-file-is-read-only-error? G19413@G19408 G19415@G19410 G19417@G19409 G19422@G19407 G19424@make-i/o-file-already-exists-error G19426@i/o-file-already-exists-error? G19433@G19428 G19435@G19430 G19437@G19429 G19442@G19427 G19444@make-i/o-file-does-not-exist-error G19446@i/o-file-does-not-exist-error? G19454@G19449 G19456@G19451 G19458@G19450 G19463@G19448 G19465@make-i/o-port-error G19467@G19447 G19469@i/o-port-error? G19471@i/o-error-port G19478@G19473 G19480@G19475 G19482@G19474 G19487@G19472 G19489@make-i/o-decoding-error G19491@i/o-decoding-error? G19499@G19494 G19501@G19496 G19503@G19495 G19508@G19493 G19510@make-i/o-encoding-error G19512@G19492 G19514@i/o-encoding-error? G19516@i/o-encoding-error-char) (begin (set! G19263@G19258 (make-record-type-descriptor '&i/o &error-rtd 'G19261 '#f '#f '#())) (set! G19265@G19260 '#f) (set! G19267@G19259 (make-record-constructor-descriptor G19263@G19258 &error-rcd G19265@G19260)) (set! G19272@G19257 (record-predicate G19263@G19258)) (set! G19274@make-i/o-error (record-constructor G19267@G19259)) (set! G19276@i/o-error? (condition-predicate G19263@G19258)) (set! G19283@G19278 (make-record-type-descriptor '&i/o-read G19263@G19258 'G19281 '#f '#f '#())) (set! G19285@G19280 '#f) (set! G19287@G19279 (make-record-constructor-descriptor G19283@G19278 G19267@G19259 G19285@G19280)) (set! G19292@G19277 (record-predicate G19283@G19278)) (set! G19294@make-i/o-read-error (record-constructor G19287@G19279)) (set! G19296@i/o-read-error? (condition-predicate G19283@G19278)) (set! G19303@G19298 (make-record-type-descriptor '&i/o-write G19263@G19258 'G19301 '#f '#f '#())) (set! G19305@G19300 '#f) (set! G19307@G19299 (make-record-constructor-descriptor G19303@G19298 G19267@G19259 G19305@G19300)) (set! G19312@G19297 (record-predicate G19303@G19298)) (set! G19314@make-i/o-write-error (record-constructor G19307@G19299)) (set! G19316@i/o-write-error? (condition-predicate G19303@G19298)) (set! G19324@G19319 (make-record-type-descriptor '&i/o-invalid-position G19263@G19258 'G19322 '#f '#f '#((immutable position)))) (set! G19326@G19321 '#f) (set! G19328@G19320 (make-record-constructor-descriptor G19324@G19319 G19267@G19259 G19326@G19321)) (set! G19333@G19318 (record-predicate G19324@G19319)) (set! G19335@make-i/o-invalid-position-error (record-constructor G19328@G19320)) (set! G19337@G19317 (record-accessor G19324@G19319 '0)) (set! G19339@i/o-invalid-position-error? (condition-predicate G19324@G19319)) (set! G19341@i/o-error-position (condition-accessor G19324@G19319 G19337@G19317)) (set! G19349@G19344 (make-record-type-descriptor '&i/o-filename G19263@G19258 'G19347 '#f '#f '#((immutable filename)))) (set! G19351@G19346 '#f) (set! G19353@G19345 (make-record-constructor-descriptor G19349@G19344 G19267@G19259 G19351@G19346)) (set! G19358@G19343 (record-predicate G19349@G19344)) (set! G19360@make-i/o-filename-error (record-constructor G19353@G19345)) (set! G19362@G19342 (record-accessor G19349@G19344 '0)) (set! G19364@i/o-filename-error? (condition-predicate G19349@G19344)) (set! G19366@i/o-error-filename (condition-accessor G19349@G19344 G19362@G19342)) (set! G19373@G19368 (make-record-type-descriptor '&i/o-file-protection G19263@G19258 'G19371 '#f '#f '#())) (set! G19375@G19370 '#f) (set! G19377@G19369 (make-record-constructor-descriptor G19373@G19368 G19267@G19259 G19375@G19370)) (set! G19382@G19367 (record-predicate G19373@G19368)) (set! G19384@make-i/o-file-protection-error (record-constructor G19377@G19369)) (set! G19386@i/o-file-protection-error? (condition-predicate G19373@G19368)) (set! G19393@G19388 (make-record-type-descriptor '&i/o-file-is-read-only G19373@G19368 'G19391 '#f '#f '#())) (set! G19395@G19390 '#f) (set! G19397@G19389 (make-record-constructor-descriptor G19393@G19388 G19377@G19369 G19395@G19390)) (set! G19402@G19387 (record-predicate G19393@G19388)) (set! G19404@make-i/o-file-is-read-only-error (record-constructor G19397@G19389)) (set! G19406@i/o-file-is-read-only-error? (condition-predicate G19393@G19388)) (set! G19413@G19408 (make-record-type-descriptor '&i/o-file-already-exists G19349@G19344 'G19411 '#f '#f '#())) (set! G19415@G19410 '#f) (set! G19417@G19409 (make-record-constructor-descriptor G19413@G19408 G19353@G19345 G19415@G19410)) (set! G19422@G19407 (record-predicate G19413@G19408)) (set! G19424@make-i/o-file-already-exists-error (record-constructor G19417@G19409)) (set! G19426@i/o-file-already-exists-error? (condition-predicate G19413@G19408)) (set! G19433@G19428 (make-record-type-descriptor '&i/o-file-does-not-exist G19349@G19344 'G19431 '#f '#f '#())) (set! G19435@G19430 '#f) (set! G19437@G19429 (make-record-constructor-descriptor G19433@G19428 G19353@G19345 G19435@G19430)) (set! G19442@G19427 (record-predicate G19433@G19428)) (set! G19444@make-i/o-file-does-not-exist-error (record-constructor G19437@G19429)) (set! G19446@i/o-file-does-not-exist-error? (condition-predicate G19433@G19428)) (set! G19454@G19449 (make-record-type-descriptor '&i/o-port G19263@G19258 'G19452 '#f '#f '#((immutable port)))) (set! G19456@G19451 '#f) (set! G19458@G19450 (make-record-constructor-descriptor G19454@G19449 G19267@G19259 G19456@G19451)) (set! G19463@G19448 (record-predicate G19454@G19449)) (set! G19465@make-i/o-port-error (record-constructor G19458@G19450)) (set! G19467@G19447 (record-accessor G19454@G19449 '0)) (set! G19469@i/o-port-error? (condition-predicate G19454@G19449)) (set! G19471@i/o-error-port (condition-accessor G19454@G19449 G19467@G19447)) (set! G19478@G19473 (make-record-type-descriptor '&i/o-decoding G19454@G19449 'G19476 '#f '#f '#())) (set! G19480@G19475 '#f) (set! G19482@G19474 (make-record-constructor-descriptor G19478@G19473 G19458@G19450 G19480@G19475)) (set! G19487@G19472 (record-predicate G19478@G19473)) (set! G19489@make-i/o-decoding-error (record-constructor G19482@G19474)) (set! G19491@i/o-decoding-error? (condition-predicate G19478@G19473)) (set! G19499@G19494 (make-record-type-descriptor '&i/o-encoding G19454@G19449 'G19497 '#f '#f '#((immutable char)))) (set! G19501@G19496 '#f) (set! G19503@G19495 (make-record-constructor-descriptor G19499@G19494 G19458@G19450 G19501@G19496)) (set! G19508@G19493 (record-predicate G19499@G19494)) (set! G19510@make-i/o-encoding-error (record-constructor G19503@G19495)) (set! G19512@G19492 (record-accessor G19499@G19494 '0)) (set! G19514@i/o-encoding-error? (condition-predicate G19499@G19494)) (set! G19516@i/o-encoding-error-char (condition-accessor G19499@G19494 G19512@G19492)) (begin (set! G19596@G19516@i/o-encoding-error-char G19516@i/o-encoding-error-char) (set! G19595@G19514@i/o-encoding-error? G19514@i/o-encoding-error?) (set! G19594@G19512@G19492 G19512@G19492) (set! G19593@G19510@make-i/o-encoding-error G19510@make-i/o-encoding-error) (set! G19592@G19508@G19493 G19508@G19493) (set! G19591@G19503@G19495 G19503@G19495) (set! G19590@G19501@G19496 G19501@G19496) (set! G19589@G19499@G19494 G19499@G19494) (set! G19588@G19491@i/o-decoding-error? G19491@i/o-decoding-error?) (set! G19587@G19489@make-i/o-decoding-error G19489@make-i/o-decoding-error) (set! G19586@G19487@G19472 G19487@G19472) (set! G19585@G19482@G19474 G19482@G19474) (set! G19584@G19480@G19475 G19480@G19475) (set! G19583@G19478@G19473 G19478@G19473) (set! G19582@G19471@i/o-error-port G19471@i/o-error-port) (set! G19581@G19469@i/o-port-error? G19469@i/o-port-error?) (set! G19580@G19467@G19447 G19467@G19447) (set! G19579@G19465@make-i/o-port-error G19465@make-i/o-port-error) (set! G19578@G19463@G19448 G19463@G19448) (set! G19577@G19458@G19450 G19458@G19450) (set! G19576@G19456@G19451 G19456@G19451) (set! G19575@G19454@G19449 G19454@G19449) (set! G19574@G19446@i/o-file-does-not-exist-error? G19446@i/o-file-does-not-exist-error?) (set! G19573@G19444@make-i/o-file-does-not-exist-error G19444@make-i/o-file-does-not-exist-error) (set! G19572@G19442@G19427 G19442@G19427) (set! G19571@G19437@G19429 G19437@G19429) (set! G19570@G19435@G19430 G19435@G19430) (set! G19569@G19433@G19428 G19433@G19428) (set! G19568@G19426@i/o-file-already-exists-error? G19426@i/o-file-already-exists-error?) (set! G19567@G19424@make-i/o-file-already-exists-error G19424@make-i/o-file-already-exists-error) (set! G19566@G19422@G19407 G19422@G19407) (set! G19565@G19417@G19409 G19417@G19409) (set! G19564@G19415@G19410 G19415@G19410) (set! G19563@G19413@G19408 G19413@G19408) (set! G19562@G19406@i/o-file-is-read-only-error? G19406@i/o-file-is-read-only-error?) (set! G19561@G19404@make-i/o-file-is-read-only-error G19404@make-i/o-file-is-read-only-error) (set! G19560@G19402@G19387 G19402@G19387) (set! G19559@G19397@G19389 G19397@G19389) (set! G19558@G19395@G19390 G19395@G19390) (set! G19557@G19393@G19388 G19393@G19388) (set! G19556@G19386@i/o-file-protection-error? G19386@i/o-file-protection-error?) (set! G19555@G19384@make-i/o-file-protection-error G19384@make-i/o-file-protection-error) (set! G19554@G19382@G19367 G19382@G19367) (set! G19553@G19377@G19369 G19377@G19369) (set! G19552@G19375@G19370 G19375@G19370) (set! G19551@G19373@G19368 G19373@G19368) (set! G19550@G19366@i/o-error-filename G19366@i/o-error-filename) (set! G19549@G19364@i/o-filename-error? G19364@i/o-filename-error?) (set! G19548@G19362@G19342 G19362@G19342) (set! G19547@G19360@make-i/o-filename-error G19360@make-i/o-filename-error) (set! G19546@G19358@G19343 G19358@G19343) (set! G19545@G19353@G19345 G19353@G19345) (set! G19544@G19351@G19346 G19351@G19346) (set! G19543@G19349@G19344 G19349@G19344) (set! G19542@G19341@i/o-error-position G19341@i/o-error-position) (set! G19541@G19339@i/o-invalid-position-error? G19339@i/o-invalid-position-error?) (set! G19540@G19337@G19317 G19337@G19317) (set! G19539@G19335@make-i/o-invalid-position-error G19335@make-i/o-invalid-position-error) (set! G19538@G19333@G19318 G19333@G19318) (set! G19537@G19328@G19320 G19328@G19320) (set! G19536@G19326@G19321 G19326@G19321) (set! G19535@G19324@G19319 G19324@G19319) (set! G19534@G19316@i/o-write-error? G19316@i/o-write-error?) (set! G19533@G19314@make-i/o-write-error G19314@make-i/o-write-error) (set! G19532@G19312@G19297 G19312@G19297) (set! G19531@G19307@G19299 G19307@G19299) (set! G19530@G19305@G19300 G19305@G19300) (set! G19529@G19303@G19298 G19303@G19298) (set! G19528@G19296@i/o-read-error? G19296@i/o-read-error?) (set! G19527@G19294@make-i/o-read-error G19294@make-i/o-read-error) (set! G19526@G19292@G19277 G19292@G19277) (set! G19525@G19287@G19279 G19287@G19279) (set! G19524@G19285@G19280 G19285@G19280) (set! G19523@G19283@G19278 G19283@G19278) (set! G19522@G19276@i/o-error? G19276@i/o-error?) (set! G19521@G19274@make-i/o-error G19274@make-i/o-error) (set! G19520@G19272@G19257 G19272@G19257) (set! G19519@G19267@G19259 G19267@G19259) (set! G19518@G19265@G19260 G19265@G19260) (set! G19517@G19263@G19258 G19263@G19258)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G10559@G10469@current-primitive-locations (lambda (G20562@x) ((lambda (G20564@t) (if G20564@t (cdr G20564@t) '#f)) (assq G20562@x '((syntax-error . G18840@G12453@syntax-error) (syntax-dispatch . G18737@G12226@syntax-dispatch) (load . G19745@G19611@load) (interaction-environment . G18849@G12471@interaction-environment) (make-variable-transformer . G18673@G11712@make-variable-transformer) (identifier? . G18844@G12461@identifier?) (generate-temporaries . G18836@G12445@generate-temporaries) (free-identifier=? . G18837@G12447@free-identifier=?) (syntax->datum . G18846@G12465@syntax->datum) (datum->syntax . G18845@G12463@datum->syntax) (bound-identifier=? . G18838@G12449@bound-identifier=?) (make-i/o-write-error . G19533@G19314@make-i/o-write-error) (make-i/o-read-error . G19527@G19294@make-i/o-read-error) (make-i/o-port-error . G19579@G19465@make-i/o-port-error) (make-i/o-invalid-position-error . G19539@G19335@make-i/o-invalid-position-error) (make-i/o-filename-error . G19547@G19360@make-i/o-filename-error) (make-i/o-file-protection-error . G19555@G19384@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G19561@G19404@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G19573@G19444@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G19567@G19424@make-i/o-file-already-exists-error) (make-i/o-error . G19521@G19274@make-i/o-error) (make-i/o-encoding-error . G19593@G19510@make-i/o-encoding-error) (make-i/o-decoding-error . G19587@G19489@make-i/o-decoding-error) (i/o-write-error? . G19534@G19316@i/o-write-error?) (i/o-read-error? . G19528@G19296@i/o-read-error?) (i/o-port-error? . G19581@G19469@i/o-port-error?) (i/o-invalid-position-error? . G19541@G19339@i/o-invalid-position-error?) (i/o-filename-error? . G19549@G19364@i/o-filename-error?) (i/o-file-protection-error? . G19556@G19386@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G19562@G19406@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G19574@G19446@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G19568@G19426@i/o-file-already-exists-error?) (i/o-error? . G19522@G19276@i/o-error?) (i/o-error-port . G19582@G19471@i/o-error-port) (i/o-error-filename . G19550@G19366@i/o-error-filename) (i/o-encoding-error? . G19595@G19514@i/o-encoding-error?) (i/o-encoding-error-char . G19596@G19516@i/o-encoding-error-char) (i/o-decoding-error? . G19588@G19491@i/o-decoding-error?) (scheme-report-environment . G18827@G12427@scheme-report-environment) (null-environment . G18826@G12425@null-environment) (command-line . G19742@G19605@command-line) (eval . G18829@G12431@eval) (environment . G18825@G12423@environment) (who-condition? . G19220@G19048@who-condition?) (warning? . G19181@G18920@warning?) (violation? . G19199@G18980@violation?) (undefined-violation? . G19255@G19160@undefined-violation?) (syntax-violation? . G19247@G19136@syntax-violation?) (syntax-violation-subform . G19249@G19140@syntax-violation-subform) (syntax-violation-form . G19248@G19138@syntax-violation-form) (syntax-violation . G18843@G12459@syntax-violation) (serious-condition? . G19187@G18940@serious-condition?) (non-continuable-violation? . G19227@G19070@non-continuable-violation?) (message-condition? . G19174@G18898@message-condition?) (make-who-condition . G19218@G19044@make-who-condition) (make-warning . G19180@G18918@make-warning) (make-violation . G19198@G18978@make-violation) (make-undefined-violation . G19254@G19158@make-undefined-violation) (make-syntax-violation . G19244@G19130@make-syntax-violation) (make-serious-condition . G19186@G18938@make-serious-condition) (make-non-continuable-violation . G19226@G19068@make-non-continuable-violation) (make-message-condition . G19172@G18894@make-message-condition) (make-lexical-violation . G19238@G19108@make-lexical-violation) (make-irritants-condition . G19210@G19019@make-irritants-condition) (make-implementation-restriction-violation . G19232@G19088@make-implementation-restriction-violation) (make-error . G19192@G18958@make-error) (make-assertion-violation . G19204@G18998@make-assertion-violation) (lexical-violation? . G19239@G19110@lexical-violation?) (irritants-condition? . G19212@G19023@irritants-condition?) (implementation-restriction-violation? . G19233@G19090@implementation-restriction-violation?) (error? . G19193@G18960@error?) (condition-who . G19221@G19050@condition-who) (condition-message . G19175@G18900@condition-message) (condition-irritants . G19213@G19025@condition-irritants) (assertion-violation? . G19205@G19000@assertion-violation?)))))) (G11132@G10770@install-library 'G20518 '(mosh interaction) '() '() '() '() '((string-upcase . G20393) (string-titlecase . G20392) (string-normalize-nfkd . G20391) (string-normalize-nfkc . G20390) (string-normalize-nfd . G20389) (string-normalize-nfc . G20388) (string-foldcase . G20387) (string-downcase . G20386) (string-ci>? . G20385) (string-ci>=? . G20384) (string-ci=? . G20383) (string-ci<? . G20382) (string-ci<=? . G20381) (char-whitespace? . G20380) (char-upper-case? . G20379) (char-title-case? . G20378) (char-numeric? . G20377) (char-lower-case? . G20376) (char-general-category . G20375) (char-upcase . G20374) (char-titlecase . G20373) (char-foldcase . G20372) (char-downcase . G20371) (char-ci>? . G20370) (char-ci>=? . G20369) (char-ci=? . G20368) (char-ci<? . G20367) (char-ci<=? . G20366) (char-alphabetic? . G20365) (make-variable-transformer . G11711) (identifier? . G12460) (generate-temporaries . G12444) (free-identifier=? . G12446) (syntax->datum . G12464) (datum->syntax . G12462) (bound-identifier=? . G12448) (record-type-descriptor? . G20364) (record-predicate . G20363) (record-mutator . G20362) (record-constructor . G20361) (record-accessor . G20360) (make-record-type-descriptor . G20359) (make-record-constructor-descriptor . G20358) (record? . G20357) (record-type-uid . G20356) (record-type-sealed? . G20355) (record-type-parent . G20354) (record-type-opaque? . G20353) (record-type-name . G20352) (record-type-generative? . G20351) (record-type-field-names . G20350) (record-rtd . G20349) (record-field-mutable? . G20348) (delete-file . G20347) (file-exists? . G20346) (vector-sort! . G20345) (vector-sort . G20344) (list-sort . G20343) (symbol-hash . G20342) (string-ci-hash . G20341) (string-hash . G20340) (equal-hash . G20339) (hashtable-equivalence-function . G20338) (make-hashtable . G20337) (hashtable-hash-function . G20336) (make-eqv-hashtable . G20335) (make-eq-hashtable . G20334) (hashtable? . G20333) (hashtable-update! . G20332) (hashtable-size . G20331) (hashtable-set! . G20330) (hashtable-ref . G20329) (hashtable-mutable? . G20328) (hashtable-keys . G20327) (hashtable-entries . G20326) (hashtable-delete! . G20325) (hashtable-copy . G20324) (hashtable-contains? . G20323) (hashtable-clear! . G20322) (call-with-output-file . G20321) (call-with-input-file . G20320) (write-char . G20319) (write . G20318) (with-output-to-file . G20317) (with-input-from-file . G20316) (read-char . G20315) (read . G20314) (peek-char . G20313) (open-output-file . G20312) (open-input-file . G20311) (newline . G20310) (display . G20309) (close-output-port . G20308) (close-input-port . G20307) (eof-object? . G20306) (eof-object . G20305) (current-error-port . G20304) (current-output-port . G20303) (current-input-port . G20302) (output-port? . G20301) (input-port? . G20300) (utf-8-codec . G20299) (utf-16-codec . G20298) (transcoder-error-handling-mode . G20297) (transcoder-eol-style . G20296) (transcoder-codec . G20295) (transcoded-port . G20294) (textual-port? . G20293) (string->bytevector . G20292) (standard-output-port . G20291) (standard-input-port . G20290) (standard-error-port . G20289) (set-port-position! . G20288) (put-u8 . G20287) (put-string . G20286) (put-datum . G20285) (put-char . G20284) (put-bytevector . G20283) (port? . G20282) (port-transcoder . G20281) (port-position . G20280) (port-has-set-port-position!? . G20279) (port-has-port-position? . G20278) (port-eof? . G20277) (output-port-buffer-mode . G20276) (open-string-output-port . G20275) (open-string-input-port . G20274) (open-file-output-port . G20273) (open-file-input/output-port . G20272) (open-file-input-port . G20271) (open-bytevector-output-port . G20270) (open-bytevector-input-port . G20269) (native-transcoder . G20268) (native-eol-style . G20267) (make-transcoder . G20266) (latin-1-codec . G20265) (make-i/o-write-error . G19313) (make-i/o-read-error . G19293) (make-i/o-port-error . G19464) (make-i/o-invalid-position-error . G19334) (make-i/o-filename-error . G19359) (make-i/o-file-protection-error . G19383) (make-i/o-file-is-read-only-error . G19403) (make-i/o-file-does-not-exist-error . G19443) (make-i/o-file-already-exists-error . G19423) (make-i/o-error . G19273) (make-i/o-encoding-error . G19509) (make-i/o-decoding-error . G19488) (make-custom-textual-output-port . G20264) (make-custom-textual-input/output-port . G20263) (make-custom-textual-input-port . G20262) (make-custom-binary-output-port . G20261) (make-custom-binary-input/output-port . G20260) (make-custom-binary-input-port . G20259) (make-bytevector . G20258) (lookahead-u8 . G20257) (lookahead-char . G20256) (i/o-write-error? . G19315) (i/o-read-error? . G19295) (i/o-port-error? . G19468) (i/o-invalid-position-error? . G19338) (i/o-filename-error? . G19363) (i/o-file-protection-error? . G19385) (i/o-file-is-read-only-error? . G19405) (i/o-file-does-not-exist-error? . G19445) (i/o-file-already-exists-error? . G19425) (i/o-error? . G19275) (i/o-error-port . G19470) (i/o-error-filename . G19365) (i/o-encoding-error? . G19513) (i/o-encoding-error-char . G19515) (i/o-decoding-error? . G19490) (get-u8 . G20255) (get-string-n! . G20254) (get-string-n . G20253) (get-string-all . G20252) (get-line . G20251) (get-datum . G20250) (get-char . G20249) (get-bytevector-some . G20248) (get-bytevector-n! . G20247) (get-bytevector-n . G20246) (get-bytevector-all . G20245) (flush-output-port . G20244) (close-port . G20243) (exit . G20236) (command-line . G19604) (string-fill! . G20235) (string-set! . G20234) (set-cdr! . G20233) (set-car! . G20232) (remove . G20231) (remv . G20230) (remp . G20229) (remq . G20228) (partition . G20227) (memv . G20226) (memq . G20225) (memp . G20224) (member . G20223) (exists . G20222) (for-all . G20221) (fold-right . G20220) (fold-left . G20219) (find . G20218) (filter . G20217) (cons* . G20216) (assv . G20215) (assq . G20214) (assp . G20213) (assoc . G20212) (call-with-string-output-port . G20211) (call-with-port . G20210) (call-with-bytevector-output-port . G20209) (bytevector->string . G20208) (buffer-mode? . G20207) (binary-port? . G20206) (with-exception-handler . G20205) (raise-continuable . G20204) (raise . G20203) (eval . G12430) (environment . G12422) (make-enumeration . G20202) (enum-set=? . G20201) (enum-set-universe . G20200) (enum-set-union . G20199) (enum-set-subset? . G20198) (enum-set-projection . G20197) (enum-set-member? . G20196) (enum-set-intersection . G20195) (enum-set-indexer . G20194) (enum-set-difference . G20193) (enum-set-constructor . G20192) (enum-set-complement . G20191) (enum-set->list . G20190) (who-condition? . G19047) (warning? . G18919) (violation? . G18979) (undefined-violation? . G19159) (syntax-violation? . G19135) (syntax-violation-subform . G19139) (syntax-violation-form . G19137) (syntax-violation . G12458) (simple-conditions . G20189) (serious-condition? . G18939) (non-continuable-violation? . G19069) (message-condition? . G18897) (make-who-condition . G19043) (make-warning . G18917) (make-violation . G18977) (make-undefined-violation . G19157) (make-syntax-violation . G19129) (make-serious-condition . G18937) (make-non-continuable-violation . G19067) (make-message-condition . G18893) (make-lexical-violation . G19107) (make-irritants-condition . G19018) (make-implementation-restriction-violation . G19087) (make-error . G18957) (make-assertion-violation . G18997) (lexical-violation? . G19109) (irritants-condition? . G19022) (implementation-restriction-violation? . G19089) (error? . G18959) (condition-who . G19049) (condition-predicate . G20188) (condition-message . G18899) (condition-irritants . G19024) (condition-accessor . G20187) (condition . G20186) (assertion-violation? . G18999) (condition? . G20185) (utf32->string . G20184) (utf16->string . G20183) (utf8->string . G20182) (uint-list->bytevector . G20181) (u8-list->bytevector . G20180) (string->utf8 . G20179) (string->utf32 . G20178) (string->utf16 . G20177) (sint-list->bytevector . G20176) (native-endianness . G20175) (bytevector? . G20174) (bytevector=? . G20173) (bytevector-uint-set! . G20172) (bytevector-uint-ref . G20171) (bytevector-u8-set! . G20170) (bytevector-u8-ref . G20169) (bytevector-u64-set! . G20168) (bytevector-u64-ref . G20167) (bytevector-u64-native-set! . G20166) (bytevector-u64-native-ref . G20165) (bytevector-u32-set! . G20164) (bytevector-u32-ref . G20163) (bytevector-u32-native-set! . G20162) (bytevector-u32-native-ref . G20161) (bytevector-u16-set! . G20160) (bytevector-u16-ref . G20159) (bytevector-u16-native-set! . G20158) (bytevector-u16-native-ref . G20157) (bytevector-sint-set! . G20156) (bytevector-sint-ref . G20155) (bytevector-s8-set! . G20154) (bytevector-s8-ref . G20153) (bytevector-s64-set! . G20152) (bytevector-s64-ref . G20151) (bytevector-s64-native-set! . G20150) (bytevector-s64-native-ref . G20149) (bytevector-s32-set! . G20148) (bytevector-s32-ref . G20147) (bytevector-s32-native-set! . G20146) (bytevector-s32-native-ref . G20145) (bytevector-s16-set! . G20144) (bytevector-s16-ref . G20143) (bytevector-s16-native-set! . G20142) (bytevector-s16-native-ref . G20141) (bytevector-length . G20140) (bytevector-ieee-single-ref . G20139) (bytevector-ieee-single-native-set! . G20138) (bytevector-ieee-single-native-ref . G20137) (bytevector-ieee-double-ref . G20136) (bytevector-ieee-double-native-set! . G20135) (bytevector-ieee-double-native-ref . G20134) (bytevector-fill! . G20133) (bytevector-copy! . G20132) (bytevector-copy . G20131) (bytevector->uint-list . G20130) (bytevector->u8-list . G20129) (bytevector->sint-list . G20128) (no-nans-violation? . G20127) (no-infinities-violation? . G20126) (make-no-nans-violation . G20125) (make-no-infinities-violation . G20124) (real->flonum . G20123) (flzero? . G20122) (fltruncate . G20121) (fltan . G20120) (flsqrt . G20119) (flsin . G20118) (flround . G20117) (flpositive? . G20116) (flonum? . G20115) (flodd? . G20114) (flnumerator . G20113) (flnegative? . G20112) (flnan? . G20111) (flmod0 . G20110) (flmod . G20109) (flmin . G20108) (flmax . G20107) (fllog . G20106) (flinteger? . G20105) (flinfinite? . G20104) (flfloor . G20103) (flfinite? . G20102) (flexpt . G20101) (flexp . G20100) (fleven? . G20099) (fldiv0-and-mod0 . G20098) (fldiv0 . G20097) (fldiv-and-mod . G20096) (fldiv . G20095) (fldenominator . G20094) (flcos . G20093) (flceiling . G20092) (flatan . G20091) (flasin . G20090) (flacos . G20089) (flabs . G20088) (fl>? . G20087) (fl>=? . G20086) (fl=? . G20085) (fl<? . G20084) (fl<=? . G20083) (fl/ . G20082) (fl- . G20081) (fl+ . G20080) (fl* . G20079) (fixnum->flonum . G20078) (fxzero? . G20077) (fxxor . G20076) (fxrotate-bit-field . G20075) (fxreverse-bit-field . G20074) (fxpositive? . G20073) (fxodd? . G20072) (fxnot . G20071) (fxnegative? . G20070) (fxmod0 . G20069) (fxmod . G20068) (fxmin . G20067) (fxmax . G20066) (fxlength . G20065) (fxior . G20064) (fxif . G20063) (fxfirst-bit-set . G20062) (fxeven? . G20061) (fxdiv0-and-mod0 . G20060) (fxdiv0 . G20059) (fxdiv-and-mod . G20058) (fxdiv . G20057) (fxcopy-bit-field . G20056) (fxcopy-bit . G20055) (fxbit-set? . G20054) (fxbit-field . G20053) (fxbit-count . G20052) (fxarithmetic-shift-right . G20051) (fxarithmetic-shift-left . G20050) (fxarithmetic-shift . G20049) (fxand . G20048) (fx>? . G20047) (fx>=? . G20046) (fx=? . G20045) (fx<? . G20044) (fx<=? . G20043) (fx-/carry . G20042) (fx- . G20041) (fx+/carry . G20040) (fx+ . G20039) (fx*/carry . G20038) (fx* . G20037) (greatest-fixnum . G20036) (least-fixnum . G20035) (fixnum-width . G20034) (fixnum? . G20033) (bitwise-rotate-bit-field . G20032) (bitwise-reverse-bit-field . G20031) (bitwise-length . G20030) (bitwise-if . G20029) (bitwise-first-bit-set . G20028) (bitwise-copy-bit-field . G20027) (bitwise-copy-bit . G20026) (bitwise-bit-set? . G20025) (bitwise-bit-field . G20024) (bitwise-bit-count . G20023) (bitwise-xor . G20022) (bitwise-ior . G20021) (bitwise-and . G20020) (bitwise-not . G20019) (bitwise-arithmetic-shift-right . G20018) (bitwise-arithmetic-shift-left . G20017) (bitwise-arithmetic-shift . G20016) (zero? . G20015) (vector? . G20014) (vector-set! . G20013) (vector-ref . G20012) (vector-map . G20011) (vector-length . G20010) (vector-for-each . G20009) (vector-fill! . G20008) (vector->list . G20007) (vector . G20006) (values . G20005) (truncate . G20004) (tan . G20003) (symbol? . G20002) (symbol=? . G20001) (symbol->string . G20000) (substring . G19999) (string? . G19998) (string>? . G19997) (string>=? . G19996) (string=? . G19995) (string<? . G19994) (string<=? . G19993) (string-ref . G19992) (string-length . G19991) (string-for-each . G19990) (string-copy . G19989) (string-append . G19988) (string->symbol . G19987) (string->number . G19986) (string->list . G19985) (string . G19984) (sqrt . G19983) (sin . G19982) (round . G19981) (reverse . G19980) (real? . G19979) (real-valued? . G19978) (real-part . G19977) (rationalize . G19976) (rational? . G19975) (rational-valued? . G19974) (procedure? . G19973) (positive? . G19972) (pair? . G19971) (odd? . G19970) (numerator . G19969) (number? . G19968) (number->string . G19967) (null? . G19966) (not . G19965) (negative? . G19964) (nan? . G19963) (min . G19962) (max . G19961) (map . G19960) (make-vector . G19959) (make-string . G19958) (make-rectangular . G19957) (make-polar . G19956) (magnitude . G19955) (log . G19954) (list? . G19953) (list-tail . G19952) (list-ref . G19951) (list->vector . G19950) (list->string . G19949) (list . G19948) (length . G19947) (lcm . G19946) (integer? . G19945) (integer-valued? . G19944) (integer->char . G19943) (infinite? . G19942) (inexact? . G19941) (inexact . G19940) (imag-part . G19939) (gcd . G19938) (for-each . G19937) (floor . G19936) (finite? . G19935) (expt . G19934) (exp . G19933) (exact? . G19932) (exact-integer-sqrt . G19931) (exact . G19930) (even? . G19929) (error . G19928) (eqv? . G19927) (equal? . G19926) (eq? . G19925) (dynamic-wind . G19924) (div0-and-mod0 . G19923) (mod0 . G19922) (div0 . G19921) (div-and-mod . G19920) (mod . G19919) (div . G19918) (denominator . G19917) (cos . G19916) (cons . G19915) (complex? . G19914) (char? . G19913) (char>? . G19912) (char>=? . G19911) (char=? . G19910) (char<? . G19909) (char<=? . G19908) (char->integer . G19907) (ceiling . G19906) (call-with-values . G19905) (call/cc . G19904) (call-with-current-continuation . G19903) (cddddr . G19902) (cdddar . G19901) (cddadr . G19900) (cddaar . G19899) (cdaddr . G19898) (cdadar . G19897) (cdaadr . G19896) (cdaaar . G19895) (cadddr . G19894) (caddar . G19893) (cadadr . G19892) (cadaar . G19891) (caaddr . G19890) (caadar . G19889) (caaadr . G19888) (caaaar . G19887) (cdddr . G19886) (cddar . G19885) (cdadr . G19884) (cdaar . G19883) (caddr . G19882) (cadar . G19881) (caadr . G19880) (caaar . G19879) (cddr . G19878) (cdar . G19877) (cadr . G19876) (caar . G19875) (cdr . G19874) (car . G19873) (boolean? . G19872) (boolean=? . G19871) (atan . G19870) (assertion-violation . G19869) (asin . G19868) (apply . G19867) (append . G19866) (angle . G19865) (acos . G19864) (abs . G19863) (/ . G19862) (* . G19861) (- . G19860) (+ . G19859) (>= . G19858) (> . G19857) (= . G19856) (<= . G19855) (< . G19854) (library . G19853) (export . G19852) (&no-nans . G19851) (&no-infinities . G19850) (&i/o-encoding . G19849) (&i/o-decoding . G19848) (&i/o-port . G19847) (&i/o-file-does-not-exist . G19846) (&i/o-file-already-exists . G19845) (&i/o-file-is-read-only . G19844) (&i/o-file-protection . G19843) (&i/o-filename . G19842) (&i/o-invalid-position . G19841) (&i/o-write . G19840) (&i/o-read . G19839) (&i/o . G19838) (&undefined . G19837) (&syntax . G19836) (&lexical . G19835) (&implementation-restriction . G19834) (&non-continuable . G19833) (&who . G19832) (&irritants . G19831) (&assertion . G19830) (&violation . G19829) (&error . G19828) (&serious . G19827) (&warning . G19826) (&message . G19825) (&condition . G19824) (define-condition-type . G19823) (define-enumeration . G19822) (define-record-type . G19821) (parent-rtd . G19820) (nongenerative . G19819) (opaque . G19818) (sealed . G19817) (protocol . G19816) (parent . G19815) (immutable . G19814) (mutable . G19813) (fields . G19812) (error-handling-mode . G19811) (file-options . G19810) (buffer-mode . G19809) (eol-style . G19808) (guard . G19807) (unsyntax-splicing . G19804) (unsyntax . G19803) (unquote-splicing . G19802) (unquote . G19801) (_ . G19800) (else . G19799) (=> . G19798) (... . G19797) (assert . G19796) (endianness . G19795) (or . G19792) (and . G19791) (do . G19790) (cond . G19789) (let* . G19788) (let . G19787) (let*-values . G19786) (let-values . G19785) (identifier-syntax . G19784) (with-syntax . G19783) (quasisyntax . G19782) (quasiquote . G19781) (syntax-rules . G19780) (include . G19779) (record-constructor-descriptor . G19777) (record-type-descriptor . G19776) (case . G19775) (unless . G19773) (when . G19772) (if . G19771) (letrec* . G19770) (letrec . G19769) (case-lambda . G19767) (lambda . G19766) (syntax . G19765) (syntax-case . G19764) (quote . G19763) (letrec-syntax . G19761) (let-syntax . G19760) (set! . G19759) (import . G19758) (begin . G19757) (define-syntax . G19755) (define . G19754)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20519 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G19802) (unquote . G19801) (delay . G19794) (or . G19792) (and . G19791) (do . G19790) (cond . G19789) (let* . G19788) (let . G19787) (quasiquote . G19781) (syntax-rules . G19780) (case . G19775) (if . G19771) (letrec . G19769) (lambda . G19766) (quote . G19763) (letrec-syntax . G19761) (let-syntax . G19760) (set! . G19759) (begin . G19757) (define-syntax . G19755) (define . G19754)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20520 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G20385) (string-ci>=? . G20384) (string-ci=? . G20383) (string-ci<? . G20382) (string-ci<=? . G20381) (char-whitespace? . G20380) (char-upper-case? . G20379) (char-numeric? . G20377) (char-lower-case? . G20376) (char-upcase . G20374) (char-downcase . G20371) (char-ci>? . G20370) (char-ci>=? . G20369) (char-ci=? . G20368) (char-ci<? . G20367) (char-ci<=? . G20366) (char-alphabetic? . G20365) (call-with-output-file . G20321) (call-with-input-file . G20320) (write-char . G20319) (write . G20318) (with-output-to-file . G20317) (with-input-from-file . G20316) (read-char . G20315) (read . G20314) (peek-char . G20313) (open-output-file . G20312) (open-input-file . G20311) (newline . G20310) (display . G20309) (close-output-port . G20308) (close-input-port . G20307) (eof-object . G20305) (current-output-port . G20303) (current-input-port . G20302) (output-port? . G20301) (input-port? . G20300) (scheme-report-environment . G12426) (quotient . G20242) (null-environment . G12424) (remainder . G20241) (modulo . G20240) (inexact->exact . G20239) (force . G20238) (exact->inexact . G20237) (string-fill! . G20235) (string-set! . G20234) (set-cdr! . G20233) (set-car! . G20232) (memv . G20226) (memq . G20225) (member . G20223) (assv . G20215) (assq . G20214) (assoc . G20212) (eval . G12430) (zero? . G20015) (vector? . G20014) (vector-set! . G20013) (vector-ref . G20012) (vector-length . G20010) (vector-fill! . G20008) (vector->list . G20007) (vector . G20006) (values . G20005) (truncate . G20004) (tan . G20003) (symbol? . G20002) (symbol->string . G20000) (substring . G19999) (string? . G19998) (string>? . G19997) (string>=? . G19996) (string=? . G19995) (string<? . G19994) (string<=? . G19993) (string-ref . G19992) (string-length . G19991) (string-copy . G19989) (string-append . G19988) (string->symbol . G19987) (string->number . G19986) (string->list . G19985) (string . G19984) (sqrt . G19983) (sin . G19982) (round . G19981) (reverse . G19980) (real? . G19979) (real-part . G19977) (rationalize . G19976) (rational? . G19975) (procedure? . G19973) (positive? . G19972) (pair? . G19971) (odd? . G19970) (numerator . G19969) (number? . G19968) (number->string . G19967) (not . G19965) (negative? . G19964) (min . G19962) (max . G19961) (map . G19960) (make-vector . G19959) (make-string . G19958) (make-rectangular . G19957) (make-polar . G19956) (magnitude . G19955) (log . G19954) (list? . G19953) (list-tail . G19952) (list-ref . G19951) (list->vector . G19950) (list->string . G19949) (list . G19948) (length . G19947) (lcm . G19946) (integer? . G19945) (integer->char . G19943) (inexact? . G19941) (imag-part . G19939) (gcd . G19938) (for-each . G19937) (floor . G19936) (expt . G19934) (exp . G19933) (exact? . G19932) (even? . G19929) (eqv? . G19927) (equal? . G19926) (eq? . G19925) (dynamic-wind . G19924) (denominator . G19917) (cos . G19916) (cons . G19915) (complex? . G19914) (char? . G19913) (char>? . G19912) (char>=? . G19911) (char=? . G19910) (char<? . G19909) (char<=? . G19908) (char->integer . G19907) (ceiling . G19906) (call-with-values . G19905) (call-with-current-continuation . G19903) (cddddr . G19902) (cdddar . G19901) (cddadr . G19900) (cddaar . G19899) (cdaddr . G19898) (cdadar . G19897) (cdaadr . G19896) (cdaaar . G19895) (cadddr . G19894) (caddar . G19893) (cadadr . G19892) (cadaar . G19891) (caaddr . G19890) (caadar . G19889) (caaadr . G19888) (caaaar . G19887) (cdddr . G19886) (cddar . G19885) (cdadr . G19884) (cdaar . G19883) (caddr . G19882) (cadar . G19881) (caadr . G19880) (caaar . G19879) (cddr . G19878) (cdar . G19877) (cadr . G19876) (caar . G19875) (cdr . G19874) (car . G19873) (boolean? . G19872) (atan . G19870) (asin . G19868) (apply . G19867) (append . G19866) (angle . G19865) (acos . G19864) (abs . G19863) (/ . G19862) (* . G19861) (- . G19860) (+ . G19859) (>= . G19858) (> . G19857) (= . G19856) (<= . G19855) (< . G19854) (unquote-splicing . G19802) (unquote . G19801) (delay . G19794) (or . G19792) (and . G19791) (do . G19790) (cond . G19789) (let* . G19788) (let . G19787) (quasiquote . G19781) (syntax-rules . G19780) (case . G19775) (if . G19771) (letrec . G19769) (lambda . G19766) (quote . G19763) (letrec-syntax . G19761) (let-syntax . G19760) (set! . G19759) (begin . G19757) (define-syntax . G19755) (define . G19754)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20521 '(psyntax modules) '() '() '() '() '((module . G19756)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20522 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20523 '(rnrs) '(6) '() '() '() '((regexp? . G20454) (string-upcase . G20393) (string-titlecase . G20392) (string-normalize-nfkd . G20391) (string-normalize-nfkc . G20390) (string-normalize-nfd . G20389) (string-normalize-nfc . G20388) (string-foldcase . G20387) (string-downcase . G20386) (string-ci>? . G20385) (string-ci>=? . G20384) (string-ci=? . G20383) (string-ci<? . G20382) (string-ci<=? . G20381) (char-whitespace? . G20380) (char-upper-case? . G20379) (char-title-case? . G20378) (char-numeric? . G20377) (char-lower-case? . G20376) (char-general-category . G20375) (char-upcase . G20374) (char-titlecase . G20373) (char-foldcase . G20372) (char-downcase . G20371) (char-ci>? . G20370) (char-ci>=? . G20369) (char-ci=? . G20368) (char-ci<? . G20367) (char-ci<=? . G20366) (char-alphabetic? . G20365) (make-variable-transformer . G11711) (identifier? . G12460) (generate-temporaries . G12444) (free-identifier=? . G12446) (syntax->datum . G12464) (datum->syntax . G12462) (bound-identifier=? . G12448) (record-type-descriptor? . G20364) (record-predicate . G20363) (record-mutator . G20362) (record-constructor . G20361) (record-accessor . G20360) (make-record-type-descriptor . G20359) (make-record-constructor-descriptor . G20358) (record? . G20357) (record-type-uid . G20356) (record-type-sealed? . G20355) (record-type-parent . G20354) (record-type-opaque? . G20353) (record-type-name . G20352) (record-type-generative? . G20351) (record-type-field-names . G20350) (record-rtd . G20349) (record-field-mutable? . G20348) (delete-file . G20347) (file-exists? . G20346) (vector-sort! . G20345) (vector-sort . G20344) (list-sort . G20343) (symbol-hash . G20342) (string-ci-hash . G20341) (string-hash . G20340) (equal-hash . G20339) (hashtable-equivalence-function . G20338) (make-hashtable . G20337) (hashtable-hash-function . G20336) (make-eqv-hashtable . G20335) (make-eq-hashtable . G20334) (hashtable? . G20333) (hashtable-update! . G20332) (hashtable-size . G20331) (hashtable-set! . G20330) (hashtable-ref . G20329) (hashtable-mutable? . G20328) (hashtable-keys . G20327) (hashtable-entries . G20326) (hashtable-delete! . G20325) (hashtable-copy . G20324) (hashtable-contains? . G20323) (hashtable-clear! . G20322) (call-with-output-file . G20321) (call-with-input-file . G20320) (write-char . G20319) (write . G20318) (with-output-to-file . G20317) (with-input-from-file . G20316) (read-char . G20315) (read . G20314) (peek-char . G20313) (open-output-file . G20312) (open-input-file . G20311) (newline . G20310) (display . G20309) (close-output-port . G20308) (close-input-port . G20307) (eof-object? . G20306) (eof-object . G20305) (current-error-port . G20304) (current-output-port . G20303) (current-input-port . G20302) (output-port? . G20301) (input-port? . G20300) (utf-8-codec . G20299) (utf-16-codec . G20298) (transcoder-error-handling-mode . G20297) (transcoder-eol-style . G20296) (transcoder-codec . G20295) (transcoded-port . G20294) (textual-port? . G20293) (string->bytevector . G20292) (standard-output-port . G20291) (standard-input-port . G20290) (standard-error-port . G20289) (set-port-position! . G20288) (put-u8 . G20287) (put-string . G20286) (put-datum . G20285) (put-char . G20284) (put-bytevector . G20283) (port? . G20282) (port-transcoder . G20281) (port-position . G20280) (port-has-set-port-position!? . G20279) (port-has-port-position? . G20278) (port-eof? . G20277) (output-port-buffer-mode . G20276) (open-string-output-port . G20275) (open-string-input-port . G20274) (open-file-output-port . G20273) (open-file-input/output-port . G20272) (open-file-input-port . G20271) (open-bytevector-output-port . G20270) (open-bytevector-input-port . G20269) (native-transcoder . G20268) (native-eol-style . G20267) (make-transcoder . G20266) (latin-1-codec . G20265) (make-i/o-write-error . G19313) (make-i/o-read-error . G19293) (make-i/o-port-error . G19464) (make-i/o-invalid-position-error . G19334) (make-i/o-filename-error . G19359) (make-i/o-file-protection-error . G19383) (make-i/o-file-is-read-only-error . G19403) (make-i/o-file-does-not-exist-error . G19443) (make-i/o-file-already-exists-error . G19423) (make-i/o-error . G19273) (make-i/o-encoding-error . G19509) (make-i/o-decoding-error . G19488) (make-custom-textual-output-port . G20264) (make-custom-textual-input/output-port . G20263) (make-custom-textual-input-port . G20262) (make-custom-binary-output-port . G20261) (make-custom-binary-input/output-port . G20260) (make-custom-binary-input-port . G20259) (make-bytevector . G20258) (lookahead-u8 . G20257) (lookahead-char . G20256) (i/o-write-error? . G19315) (i/o-read-error? . G19295) (i/o-port-error? . G19468) (i/o-invalid-position-error? . G19338) (i/o-filename-error? . G19363) (i/o-file-protection-error? . G19385) (i/o-file-is-read-only-error? . G19405) (i/o-file-does-not-exist-error? . G19445) (i/o-file-already-exists-error? . G19425) (i/o-error? . G19275) (i/o-error-port . G19470) (i/o-error-filename . G19365) (i/o-encoding-error? . G19513) (i/o-encoding-error-char . G19515) (i/o-decoding-error? . G19490) (get-u8 . G20255) (get-string-n! . G20254) (get-string-n . G20253) (get-string-all . G20252) (get-line . G20251) (get-datum . G20250) (get-char . G20249) (get-bytevector-some . G20248) (get-bytevector-n! . G20247) (get-bytevector-n . G20246) (get-bytevector-all . G20245) (flush-output-port . G20244) (close-port . G20243) (exit . G20236) (command-line . G19604) (remove . G20231) (remv . G20230) (remp . G20229) (remq . G20228) (partition . G20227) (memv . G20226) (memq . G20225) (memp . G20224) (member . G20223) (exists . G20222) (for-all . G20221) (fold-right . G20220) (fold-left . G20219) (find . G20218) (filter . G20217) (cons* . G20216) (assv . G20215) (assq . G20214) (assp . G20213) (assoc . G20212) (call-with-string-output-port . G20211) (call-with-port . G20210) (call-with-bytevector-output-port . G20209) (bytevector->string . G20208) (buffer-mode? . G20207) (binary-port? . G20206) (with-exception-handler . G20205) (raise-continuable . G20204) (raise . G20203) (make-enumeration . G20202) (enum-set=? . G20201) (enum-set-universe . G20200) (enum-set-union . G20199) (enum-set-subset? . G20198) (enum-set-projection . G20197) (enum-set-member? . G20196) (enum-set-intersection . G20195) (enum-set-indexer . G20194) (enum-set-difference . G20193) (enum-set-constructor . G20192) (enum-set-complement . G20191) (enum-set->list . G20190) (who-condition? . G19047) (warning? . G18919) (violation? . G18979) (undefined-violation? . G19159) (syntax-violation? . G19135) (syntax-violation-subform . G19139) (syntax-violation-form . G19137) (syntax-violation . G12458) (simple-conditions . G20189) (serious-condition? . G18939) (non-continuable-violation? . G19069) (message-condition? . G18897) (make-who-condition . G19043) (make-warning . G18917) (make-violation . G18977) (make-undefined-violation . G19157) (make-syntax-violation . G19129) (make-serious-condition . G18937) (make-non-continuable-violation . G19067) (make-message-condition . G18893) (make-lexical-violation . G19107) (make-irritants-condition . G19018) (make-implementation-restriction-violation . G19087) (make-error . G18957) (make-assertion-violation . G18997) (lexical-violation? . G19109) (irritants-condition? . G19022) (implementation-restriction-violation? . G19089) (error? . G18959) (condition-who . G19049) (condition-predicate . G20188) (condition-message . G18899) (condition-irritants . G19024) (condition-accessor . G20187) (condition . G20186) (assertion-violation? . G18999) (condition? . G20185) (utf32->string . G20184) (utf16->string . G20183) (utf8->string . G20182) (uint-list->bytevector . G20181) (u8-list->bytevector . G20180) (string->utf8 . G20179) (string->utf32 . G20178) (string->utf16 . G20177) (sint-list->bytevector . G20176) (native-endianness . G20175) (bytevector? . G20174) (bytevector=? . G20173) (bytevector-uint-set! . G20172) (bytevector-uint-ref . G20171) (bytevector-u8-set! . G20170) (bytevector-u8-ref . G20169) (bytevector-u64-set! . G20168) (bytevector-u64-ref . G20167) (bytevector-u64-native-set! . G20166) (bytevector-u64-native-ref . G20165) (bytevector-u32-set! . G20164) (bytevector-u32-ref . G20163) (bytevector-u32-native-set! . G20162) (bytevector-u32-native-ref . G20161) (bytevector-u16-set! . G20160) (bytevector-u16-ref . G20159) (bytevector-u16-native-set! . G20158) (bytevector-u16-native-ref . G20157) (bytevector-sint-set! . G20156) (bytevector-sint-ref . G20155) (bytevector-s8-set! . G20154) (bytevector-s8-ref . G20153) (bytevector-s64-set! . G20152) (bytevector-s64-ref . G20151) (bytevector-s64-native-set! . G20150) (bytevector-s64-native-ref . G20149) (bytevector-s32-set! . G20148) (bytevector-s32-ref . G20147) (bytevector-s32-native-set! . G20146) (bytevector-s32-native-ref . G20145) (bytevector-s16-set! . G20144) (bytevector-s16-ref . G20143) (bytevector-s16-native-set! . G20142) (bytevector-s16-native-ref . G20141) (bytevector-length . G20140) (bytevector-ieee-single-ref . G20139) (bytevector-ieee-single-native-set! . G20138) (bytevector-ieee-single-native-ref . G20137) (bytevector-ieee-double-ref . G20136) (bytevector-ieee-double-native-set! . G20135) (bytevector-ieee-double-native-ref . G20134) (bytevector-fill! . G20133) (bytevector-copy! . G20132) (bytevector-copy . G20131) (bytevector->uint-list . G20130) (bytevector->u8-list . G20129) (bytevector->sint-list . G20128) (no-nans-violation? . G20127) (no-infinities-violation? . G20126) (make-no-nans-violation . G20125) (make-no-infinities-violation . G20124) (real->flonum . G20123) (flzero? . G20122) (fltruncate . G20121) (fltan . G20120) (flsqrt . G20119) (flsin . G20118) (flround . G20117) (flpositive? . G20116) (flonum? . G20115) (flodd? . G20114) (flnumerator . G20113) (flnegative? . G20112) (flnan? . G20111) (flmod0 . G20110) (flmod . G20109) (flmin . G20108) (flmax . G20107) (fllog . G20106) (flinteger? . G20105) (flinfinite? . G20104) (flfloor . G20103) (flfinite? . G20102) (flexpt . G20101) (flexp . G20100) (fleven? . G20099) (fldiv0-and-mod0 . G20098) (fldiv0 . G20097) (fldiv-and-mod . G20096) (fldiv . G20095) (fldenominator . G20094) (flcos . G20093) (flceiling . G20092) (flatan . G20091) (flasin . G20090) (flacos . G20089) (flabs . G20088) (fl>? . G20087) (fl>=? . G20086) (fl=? . G20085) (fl<? . G20084) (fl<=? . G20083) (fl/ . G20082) (fl- . G20081) (fl+ . G20080) (fl* . G20079) (fixnum->flonum . G20078) (fxzero? . G20077) (fxxor . G20076) (fxrotate-bit-field . G20075) (fxreverse-bit-field . G20074) (fxpositive? . G20073) (fxodd? . G20072) (fxnot . G20071) (fxnegative? . G20070) (fxmod0 . G20069) (fxmod . G20068) (fxmin . G20067) (fxmax . G20066) (fxlength . G20065) (fxior . G20064) (fxif . G20063) (fxfirst-bit-set . G20062) (fxeven? . G20061) (fxdiv0-and-mod0 . G20060) (fxdiv0 . G20059) (fxdiv-and-mod . G20058) (fxdiv . G20057) (fxcopy-bit-field . G20056) (fxcopy-bit . G20055) (fxbit-set? . G20054) (fxbit-field . G20053) (fxbit-count . G20052) (fxarithmetic-shift-right . G20051) (fxarithmetic-shift-left . G20050) (fxarithmetic-shift . G20049) (fxand . G20048) (fx>? . G20047) (fx>=? . G20046) (fx=? . G20045) (fx<? . G20044) (fx<=? . G20043) (fx-/carry . G20042) (fx- . G20041) (fx+/carry . G20040) (fx+ . G20039) (fx*/carry . G20038) (fx* . G20037) (greatest-fixnum . G20036) (least-fixnum . G20035) (fixnum-width . G20034) (fixnum? . G20033) (bitwise-rotate-bit-field . G20032) (bitwise-reverse-bit-field . G20031) (bitwise-length . G20030) (bitwise-if . G20029) (bitwise-first-bit-set . G20028) (bitwise-copy-bit-field . G20027) (bitwise-copy-bit . G20026) (bitwise-bit-set? . G20025) (bitwise-bit-field . G20024) (bitwise-bit-count . G20023) (bitwise-xor . G20022) (bitwise-ior . G20021) (bitwise-and . G20020) (bitwise-not . G20019) (bitwise-arithmetic-shift-right . G20018) (bitwise-arithmetic-shift-left . G20017) (bitwise-arithmetic-shift . G20016) (zero? . G20015) (vector? . G20014) (vector-set! . G20013) (vector-ref . G20012) (vector-map . G20011) (vector-length . G20010) (vector-for-each . G20009) (vector-fill! . G20008) (vector->list . G20007) (vector . G20006) (values . G20005) (truncate . G20004) (tan . G20003) (symbol? . G20002) (symbol=? . G20001) (symbol->string . G20000) (substring . G19999) (string? . G19998) (string>? . G19997) (string>=? . G19996) (string=? . G19995) (string<? . G19994) (string<=? . G19993) (string-ref . G19992) (string-length . G19991) (string-for-each . G19990) (string-copy . G19989) (string-append . G19988) (string->symbol . G19987) (string->number . G19986) (string->list . G19985) (string . G19984) (sqrt . G19983) (sin . G19982) (round . G19981) (reverse . G19980) (real? . G19979) (real-valued? . G19978) (real-part . G19977) (rationalize . G19976) (rational? . G19975) (rational-valued? . G19974) (procedure? . G19973) (positive? . G19972) (pair? . G19971) (odd? . G19970) (numerator . G19969) (number? . G19968) (number->string . G19967) (null? . G19966) (not . G19965) (negative? . G19964) (nan? . G19963) (min . G19962) (max . G19961) (map . G19960) (make-vector . G19959) (make-string . G19958) (make-rectangular . G19957) (make-polar . G19956) (magnitude . G19955) (log . G19954) (list? . G19953) (list-tail . G19952) (list-ref . G19951) (list->vector . G19950) (list->string . G19949) (list . G19948) (length . G19947) (lcm . G19946) (integer? . G19945) (integer-valued? . G19944) (integer->char . G19943) (infinite? . G19942) (inexact? . G19941) (inexact . G19940) (imag-part . G19939) (gcd . G19938) (for-each . G19937) (floor . G19936) (finite? . G19935) (expt . G19934) (exp . G19933) (exact? . G19932) (exact-integer-sqrt . G19931) (exact . G19930) (even? . G19929) (error . G19928) (eqv? . G19927) (equal? . G19926) (eq? . G19925) (dynamic-wind . G19924) (div0-and-mod0 . G19923) (mod0 . G19922) (div0 . G19921) (div-and-mod . G19920) (mod . G19919) (div . G19918) (denominator . G19917) (cos . G19916) (cons . G19915) (complex? . G19914) (char? . G19913) (char>? . G19912) (char>=? . G19911) (char=? . G19910) (char<? . G19909) (char<=? . G19908) (char->integer . G19907) (ceiling . G19906) (call-with-values . G19905) (call/cc . G19904) (call-with-current-continuation . G19903) (cddddr . G19902) (cdddar . G19901) (cddadr . G19900) (cddaar . G19899) (cdaddr . G19898) (cdadar . G19897) (cdaadr . G19896) (cdaaar . G19895) (cadddr . G19894) (caddar . G19893) (cadadr . G19892) (cadaar . G19891) (caaddr . G19890) (caadar . G19889) (caaadr . G19888) (caaaar . G19887) (cdddr . G19886) (cddar . G19885) (cdadr . G19884) (cdaar . G19883) (caddr . G19882) (cadar . G19881) (caadr . G19880) (caaar . G19879) (cddr . G19878) (cdar . G19877) (cadr . G19876) (caar . G19875) (cdr . G19874) (car . G19873) (boolean? . G19872) (boolean=? . G19871) (atan . G19870) (assertion-violation . G19869) (asin . G19868) (apply . G19867) (append . G19866) (angle . G19865) (acos . G19864) (abs . G19863) (/ . G19862) (* . G19861) (- . G19860) (+ . G19859) (>= . G19858) (> . G19857) (= . G19856) (<= . G19855) (< . G19854) (&no-nans . G19851) (&no-infinities . G19850) (&i/o-encoding . G19849) (&i/o-decoding . G19848) (&i/o-port . G19847) (&i/o-file-does-not-exist . G19846) (&i/o-file-already-exists . G19845) (&i/o-file-is-read-only . G19844) (&i/o-file-protection . G19843) (&i/o-filename . G19842) (&i/o-invalid-position . G19841) (&i/o-write . G19840) (&i/o-read . G19839) (&i/o . G19838) (&undefined . G19837) (&syntax . G19836) (&lexical . G19835) (&implementation-restriction . G19834) (&non-continuable . G19833) (&who . G19832) (&irritants . G19831) (&assertion . G19830) (&violation . G19829) (&error . G19828) (&serious . G19827) (&warning . G19826) (&message . G19825) (&condition . G19824) (define-condition-type . G19823) (define-enumeration . G19822) (define-record-type . G19821) (parent-rtd . G19820) (nongenerative . G19819) (opaque . G19818) (sealed . G19817) (protocol . G19816) (parent . G19815) (immutable . G19814) (mutable . G19813) (fields . G19812) (error-handling-mode . G19811) (file-options . G19810) (buffer-mode . G19809) (eol-style . G19808) (guard . G19807) (unsyntax-splicing . G19804) (unsyntax . G19803) (unquote-splicing . G19802) (unquote . G19801) (_ . G19800) (else . G19799) (=> . G19798) (... . G19797) (assert . G19796) (endianness . G19795) (or . G19792) (and . G19791) (do . G19790) (cond . G19789) (let* . G19788) (let . G19787) (let*-values . G19786) (let-values . G19785) (identifier-syntax . G19784) (with-syntax . G19783) (quasisyntax . G19782) (quasiquote . G19781) (syntax-rules . G19780) (record-constructor-descriptor . G19777) (record-type-descriptor . G19776) (case . G19775) (unless . G19773) (when . G19772) (if . G19771) (letrec* . G19770) (letrec . G19769) (case-lambda . G19767) (lambda . G19766) (syntax . G19765) (syntax-case . G19764) (quote . G19763) (letrec-syntax . G19761) (let-syntax . G19760) (set! . G19759) (begin . G19757) (define-syntax . G19755) (define . G19754)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20524 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G12426) (quotient . G20242) (null-environment . G12424) (remainder . G20241) (modulo . G20240) (inexact->exact . G20239) (force . G20238) (exact->inexact . G20237) (delay . G19794)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20525 '(rnrs control) '(6) '() '() '() '((do . G19790) (unless . G19773) (when . G19772) (case-lambda . G19767)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20526 '(rnrs eval) '(6) '() '() '() '((eval . G12430) (environment . G12422)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20527 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G20233) (set-car! . G20232)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20528 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G20235) (string-set! . G20234)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20529 '(rnrs programs) '(6) '() '() '() '((exit . G20236) (command-line . G19604)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20530 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G11711) (identifier? . G12460) (generate-temporaries . G12444) (free-identifier=? . G12446) (syntax->datum . G12464) (datum->syntax . G12462) (bound-identifier=? . G12448) (syntax-violation . G12458) (unsyntax-splicing . G19804) (unsyntax . G19803) (_ . G19800) (... . G19797) (with-syntax . G19783) (quasisyntax . G19782) (syntax . G19765) (syntax-case . G19764)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20531 '(rnrs files) '(6) '() '() '() '((delete-file . G20347) (file-exists? . G20346) (make-i/o-write-error . G19313) (make-i/o-read-error . G19293) (make-i/o-port-error . G19464) (make-i/o-invalid-position-error . G19334) (make-i/o-filename-error . G19359) (make-i/o-file-protection-error . G19383) (make-i/o-file-is-read-only-error . G19403) (make-i/o-file-does-not-exist-error . G19443) (make-i/o-file-already-exists-error . G19423) (make-i/o-error . G19273) (i/o-write-error? . G19315) (i/o-read-error? . G19295) (i/o-port-error? . G19468) (i/o-invalid-position-error? . G19338) (i/o-filename-error? . G19363) (i/o-file-protection-error? . G19385) (i/o-file-is-read-only-error? . G19405) (i/o-file-does-not-exist-error? . G19445) (i/o-file-already-exists-error? . G19425) (i/o-error? . G19275) (i/o-error-port . G19470) (i/o-error-filename . G19365) (&i/o-port . G19847) (&i/o-file-does-not-exist . G19846) (&i/o-file-already-exists . G19845) (&i/o-file-is-read-only . G19844) (&i/o-file-protection . G19843) (&i/o-filename . G19842) (&i/o-invalid-position . G19841) (&i/o-write . G19840) (&i/o-read . G19839) (&i/o . G19838)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20532 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G20345) (vector-sort . G20344) (list-sort . G20343)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20533 '(rnrs base) '(6) '() '() '() '((zero? . G20015) (vector? . G20014) (vector-set! . G20013) (vector-ref . G20012) (vector-map . G20011) (vector-length . G20010) (vector-for-each . G20009) (vector-fill! . G20008) (vector->list . G20007) (vector . G20006) (values . G20005) (truncate . G20004) (tan . G20003) (symbol? . G20002) (symbol=? . G20001) (symbol->string . G20000) (substring . G19999) (string? . G19998) (string>? . G19997) (string>=? . G19996) (string=? . G19995) (string<? . G19994) (string<=? . G19993) (string-ref . G19992) (string-length . G19991) (string-for-each . G19990) (string-copy . G19989) (string-append . G19988) (string->symbol . G19987) (string->number . G19986) (string->list . G19985) (string . G19984) (sqrt . G19983) (sin . G19982) (round . G19981) (reverse . G19980) (real? . G19979) (real-valued? . G19978) (real-part . G19977) (rationalize . G19976) (rational? . G19975) (rational-valued? . G19974) (procedure? . G19973) (positive? . G19972) (pair? . G19971) (odd? . G19970) (numerator . G19969) (number? . G19968) (number->string . G19967) (null? . G19966) (not . G19965) (negative? . G19964) (nan? . G19963) (min . G19962) (max . G19961) (map . G19960) (make-vector . G19959) (make-string . G19958) (make-rectangular . G19957) (make-polar . G19956) (magnitude . G19955) (log . G19954) (list? . G19953) (list-tail . G19952) (list-ref . G19951) (list->vector . G19950) (list->string . G19949) (list . G19948) (length . G19947) (lcm . G19946) (integer? . G19945) (integer-valued? . G19944) (integer->char . G19943) (infinite? . G19942) (inexact? . G19941) (inexact . G19940) (imag-part . G19939) (gcd . G19938) (for-each . G19937) (floor . G19936) (finite? . G19935) (expt . G19934) (exp . G19933) (exact? . G19932) (exact-integer-sqrt . G19931) (exact . G19930) (even? . G19929) (error . G19928) (eqv? . G19927) (equal? . G19926) (eq? . G19925) (dynamic-wind . G19924) (div0-and-mod0 . G19923) (mod0 . G19922) (div0 . G19921) (div-and-mod . G19920) (mod . G19919) (div . G19918) (denominator . G19917) (cos . G19916) (cons . G19915) (complex? . G19914) (char? . G19913) (char>? . G19912) (char>=? . G19911) (char=? . G19910) (char<? . G19909) (char<=? . G19908) (char->integer . G19907) (ceiling . G19906) (call-with-values . G19905) (call/cc . G19904) (call-with-current-continuation . G19903) (cddddr . G19902) (cdddar . G19901) (cddadr . G19900) (cddaar . G19899) (cdaddr . G19898) (cdadar . G19897) (cdaadr . G19896) (cdaaar . G19895) (cadddr . G19894) (caddar . G19893) (cadadr . G19892) (cadaar . G19891) (caaddr . G19890) (caadar . G19889) (caaadr . G19888) (caaaar . G19887) (cdddr . G19886) (cddar . G19885) (cdadr . G19884) (cdaar . G19883) (caddr . G19882) (cadar . G19881) (caadr . G19880) (caaar . G19879) (cddr . G19878) (cdar . G19877) (cadr . G19876) (caar . G19875) (cdr . G19874) (car . G19873) (boolean? . G19872) (boolean=? . G19871) (atan . G19870) (assertion-violation . G19869) (asin . G19868) (apply . G19867) (append . G19866) (angle . G19865) (acos . G19864) (abs . G19863) (/ . G19862) (* . G19861) (- . G19860) (+ . G19859) (>= . G19858) (> . G19857) (= . G19856) (<= . G19855) (< . G19854) (unquote-splicing . G19802) (unquote . G19801) (_ . G19800) (else . G19799) (=> . G19798) (... . G19797) (assert . G19796) (or . G19792) (and . G19791) (cond . G19789) (let* . G19788) (let . G19787) (let*-values . G19786) (let-values . G19785) (identifier-syntax . G19784) (quasiquote . G19781) (syntax-rules . G19780) (case . G19775) (if . G19771) (letrec* . G19770) (letrec . G19769) (lambda . G19766) (quote . G19763) (letrec-syntax . G19761) (let-syntax . G19760) (set! . G19759) (begin . G19757) (define-syntax . G19755) (define . G19754)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20534 '(rnrs lists) '(6) '() '() '() '((remove . G20231) (remv . G20230) (remp . G20229) (remq . G20228) (partition . G20227) (memv . G20226) (memq . G20225) (memp . G20224) (member . G20223) (exists . G20222) (for-all . G20221) (fold-right . G20220) (fold-left . G20219) (find . G20218) (filter . G20217) (cons* . G20216) (assv . G20215) (assq . G20214) (assp . G20213) (assoc . G20212)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20535 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G20321) (call-with-input-file . G20320) (write-char . G20319) (write . G20318) (with-output-to-file . G20317) (with-input-from-file . G20316) (read-char . G20315) (read . G20314) (peek-char . G20313) (open-output-file . G20312) (open-input-file . G20311) (newline . G20310) (display . G20309) (close-output-port . G20308) (close-input-port . G20307) (eof-object? . G20306) (eof-object . G20305) (current-error-port . G20304) (current-output-port . G20303) (current-input-port . G20302) (output-port? . G20301) (input-port? . G20300) (make-i/o-write-error . G19313) (make-i/o-read-error . G19293) (make-i/o-port-error . G19464) (make-i/o-invalid-position-error . G19334) (make-i/o-filename-error . G19359) (make-i/o-file-protection-error . G19383) (make-i/o-file-is-read-only-error . G19403) (make-i/o-file-does-not-exist-error . G19443) (make-i/o-file-already-exists-error . G19423) (make-i/o-error . G19273) (i/o-write-error? . G19315) (i/o-read-error? . G19295) (i/o-port-error? . G19468) (i/o-invalid-position-error? . G19338) (i/o-filename-error? . G19363) (i/o-file-protection-error? . G19385) (i/o-file-is-read-only-error? . G19405) (i/o-file-does-not-exist-error? . G19445) (i/o-file-already-exists-error? . G19425) (i/o-error? . G19275) (i/o-error-port . G19470) (i/o-error-filename . G19365) (&i/o-port . G19847) (&i/o-file-does-not-exist . G19846) (&i/o-file-already-exists . G19845) (&i/o-file-is-read-only . G19844) (&i/o-file-protection . G19843) (&i/o-filename . G19842) (&i/o-invalid-position . G19841) (&i/o-write . G19840) (&i/o-read . G19839) (&i/o . G19838)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20536 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G20258) (utf32->string . G20184) (utf16->string . G20183) (utf8->string . G20182) (uint-list->bytevector . G20181) (u8-list->bytevector . G20180) (string->utf8 . G20179) (string->utf32 . G20178) (string->utf16 . G20177) (sint-list->bytevector . G20176) (native-endianness . G20175) (bytevector? . G20174) (bytevector=? . G20173) (bytevector-uint-set! . G20172) (bytevector-uint-ref . G20171) (bytevector-u8-set! . G20170) (bytevector-u8-ref . G20169) (bytevector-u64-set! . G20168) (bytevector-u64-ref . G20167) (bytevector-u64-native-set! . G20166) (bytevector-u64-native-ref . G20165) (bytevector-u32-set! . G20164) (bytevector-u32-ref . G20163) (bytevector-u32-native-set! . G20162) (bytevector-u32-native-ref . G20161) (bytevector-u16-set! . G20160) (bytevector-u16-ref . G20159) (bytevector-u16-native-set! . G20158) (bytevector-u16-native-ref . G20157) (bytevector-sint-set! . G20156) (bytevector-sint-ref . G20155) (bytevector-s8-set! . G20154) (bytevector-s8-ref . G20153) (bytevector-s64-set! . G20152) (bytevector-s64-ref . G20151) (bytevector-s64-native-set! . G20150) (bytevector-s64-native-ref . G20149) (bytevector-s32-set! . G20148) (bytevector-s32-ref . G20147) (bytevector-s32-native-set! . G20146) (bytevector-s32-native-ref . G20145) (bytevector-s16-set! . G20144) (bytevector-s16-ref . G20143) (bytevector-s16-native-set! . G20142) (bytevector-s16-native-ref . G20141) (bytevector-length . G20140) (bytevector-ieee-single-ref . G20139) (bytevector-ieee-single-native-set! . G20138) (bytevector-ieee-single-native-ref . G20137) (bytevector-ieee-double-ref . G20136) (bytevector-ieee-double-native-set! . G20135) (bytevector-ieee-double-native-ref . G20134) (bytevector-fill! . G20133) (bytevector-copy! . G20132) (bytevector-copy . G20131) (bytevector->uint-list . G20130) (bytevector->u8-list . G20129) (bytevector->sint-list . G20128) (endianness . G19795)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20537 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G20393) (string-titlecase . G20392) (string-normalize-nfkd . G20391) (string-normalize-nfkc . G20390) (string-normalize-nfd . G20389) (string-normalize-nfc . G20388) (string-foldcase . G20387) (string-downcase . G20386) (string-ci>? . G20385) (string-ci>=? . G20384) (string-ci=? . G20383) (string-ci<? . G20382) (string-ci<=? . G20381) (char-whitespace? . G20380) (char-upper-case? . G20379) (char-title-case? . G20378) (char-numeric? . G20377) (char-lower-case? . G20376) (char-general-category . G20375) (char-upcase . G20374) (char-titlecase . G20373) (char-foldcase . G20372) (char-downcase . G20371) (char-ci>? . G20370) (char-ci>=? . G20369) (char-ci=? . G20368) (char-ci<? . G20367) (char-ci<=? . G20366) (char-alphabetic? . G20365)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20538 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G20205) (raise-continuable . G20204) (raise . G20203) (guard . G19807) (else . G19799) (=> . G19798)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20539 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G20032) (bitwise-reverse-bit-field . G20031) (bitwise-length . G20030) (bitwise-if . G20029) (bitwise-first-bit-set . G20028) (bitwise-copy-bit-field . G20027) (bitwise-copy-bit . G20026) (bitwise-bit-set? . G20025) (bitwise-bit-field . G20024) (bitwise-bit-count . G20023) (bitwise-xor . G20022) (bitwise-ior . G20021) (bitwise-and . G20020) (bitwise-not . G20019) (bitwise-arithmetic-shift-right . G20018) (bitwise-arithmetic-shift-left . G20017) (bitwise-arithmetic-shift . G20016)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20540 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G20077) (fxxor . G20076) (fxrotate-bit-field . G20075) (fxreverse-bit-field . G20074) (fxpositive? . G20073) (fxodd? . G20072) (fxnot . G20071) (fxnegative? . G20070) (fxmod0 . G20069) (fxmod . G20068) (fxmin . G20067) (fxmax . G20066) (fxlength . G20065) (fxior . G20064) (fxif . G20063) (fxfirst-bit-set . G20062) (fxeven? . G20061) (fxdiv0-and-mod0 . G20060) (fxdiv0 . G20059) (fxdiv-and-mod . G20058) (fxdiv . G20057) (fxcopy-bit-field . G20056) (fxcopy-bit . G20055) (fxbit-set? . G20054) (fxbit-field . G20053) (fxbit-count . G20052) (fxarithmetic-shift-right . G20051) (fxarithmetic-shift-left . G20050) (fxarithmetic-shift . G20049) (fxand . G20048) (fx>? . G20047) (fx>=? . G20046) (fx=? . G20045) (fx<? . G20044) (fx<=? . G20043) (fx-/carry . G20042) (fx- . G20041) (fx+/carry . G20040) (fx+ . G20039) (fx*/carry . G20038) (fx* . G20037) (greatest-fixnum . G20036) (least-fixnum . G20035) (fixnum-width . G20034) (fixnum? . G20033)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20541 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G20127) (no-infinities-violation? . G20126) (make-no-nans-violation . G20125) (make-no-infinities-violation . G20124) (real->flonum . G20123) (flzero? . G20122) (fltruncate . G20121) (fltan . G20120) (flsqrt . G20119) (flsin . G20118) (flround . G20117) (flpositive? . G20116) (flonum? . G20115) (flodd? . G20114) (flnumerator . G20113) (flnegative? . G20112) (flnan? . G20111) (flmod0 . G20110) (flmod . G20109) (flmin . G20108) (flmax . G20107) (fllog . G20106) (flinteger? . G20105) (flinfinite? . G20104) (flfloor . G20103) (flfinite? . G20102) (flexpt . G20101) (flexp . G20100) (fleven? . G20099) (fldiv0-and-mod0 . G20098) (fldiv0 . G20097) (fldiv-and-mod . G20096) (fldiv . G20095) (fldenominator . G20094) (flcos . G20093) (flceiling . G20092) (flatan . G20091) (flasin . G20090) (flacos . G20089) (flabs . G20088) (fl>? . G20087) (fl>=? . G20086) (fl=? . G20085) (fl<? . G20084) (fl<=? . G20083) (fl/ . G20082) (fl- . G20081) (fl+ . G20080) (fl* . G20079) (fixnum->flonum . G20078) (&no-nans . G19851) (&no-infinities . G19850)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20542 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G20342) (string-ci-hash . G20341) (string-hash . G20340) (equal-hash . G20339) (hashtable-equivalence-function . G20338) (make-hashtable . G20337) (hashtable-hash-function . G20336) (make-eqv-hashtable . G20335) (make-eq-hashtable . G20334) (hashtable? . G20333) (hashtable-update! . G20332) (hashtable-size . G20331) (hashtable-set! . G20330) (hashtable-ref . G20329) (hashtable-mutable? . G20328) (hashtable-keys . G20327) (hashtable-entries . G20326) (hashtable-delete! . G20325) (hashtable-copy . G20324) (hashtable-contains? . G20323) (hashtable-clear! . G20322)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20543 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G20306) (eof-object . G20305) (current-error-port . G20304) (current-output-port . G20303) (current-input-port . G20302) (output-port? . G20301) (input-port? . G20300) (utf-8-codec . G20299) (utf-16-codec . G20298) (transcoder-error-handling-mode . G20297) (transcoder-eol-style . G20296) (transcoder-codec . G20295) (transcoded-port . G20294) (textual-port? . G20293) (string->bytevector . G20292) (standard-output-port . G20291) (standard-input-port . G20290) (standard-error-port . G20289) (set-port-position! . G20288) (put-u8 . G20287) (put-string . G20286) (put-datum . G20285) (put-char . G20284) (put-bytevector . G20283) (port? . G20282) (port-transcoder . G20281) (port-position . G20280) (port-has-set-port-position!? . G20279) (port-has-port-position? . G20278) (port-eof? . G20277) (output-port-buffer-mode . G20276) (open-string-output-port . G20275) (open-string-input-port . G20274) (open-file-output-port . G20273) (open-file-input/output-port . G20272) (open-file-input-port . G20271) (open-bytevector-output-port . G20270) (open-bytevector-input-port . G20269) (native-transcoder . G20268) (native-eol-style . G20267) (make-transcoder . G20266) (latin-1-codec . G20265) (make-i/o-write-error . G19313) (make-i/o-read-error . G19293) (make-i/o-port-error . G19464) (make-i/o-invalid-position-error . G19334) (make-i/o-filename-error . G19359) (make-i/o-file-protection-error . G19383) (make-i/o-file-is-read-only-error . G19403) (make-i/o-file-does-not-exist-error . G19443) (make-i/o-file-already-exists-error . G19423) (make-i/o-error . G19273) (make-i/o-encoding-error . G19509) (make-i/o-decoding-error . G19488) (make-custom-textual-output-port . G20264) (make-custom-textual-input/output-port . G20263) (make-custom-textual-input-port . G20262) (make-custom-binary-output-port . G20261) (make-custom-binary-input/output-port . G20260) (make-custom-binary-input-port . G20259) (lookahead-u8 . G20257) (lookahead-char . G20256) (i/o-write-error? . G19315) (i/o-read-error? . G19295) (i/o-port-error? . G19468) (i/o-invalid-position-error? . G19338) (i/o-filename-error? . G19363) (i/o-file-protection-error? . G19385) (i/o-file-is-read-only-error? . G19405) (i/o-file-does-not-exist-error? . G19445) (i/o-file-already-exists-error? . G19425) (i/o-error? . G19275) (i/o-error-port . G19470) (i/o-error-filename . G19365) (i/o-encoding-error? . G19513) (i/o-encoding-error-char . G19515) (i/o-decoding-error? . G19490) (get-u8 . G20255) (get-string-n! . G20254) (get-string-n . G20253) (get-string-all . G20252) (get-line . G20251) (get-datum . G20250) (get-char . G20249) (get-bytevector-some . G20248) (get-bytevector-n! . G20247) (get-bytevector-n . G20246) (get-bytevector-all . G20245) (flush-output-port . G20244) (close-port . G20243) (call-with-string-output-port . G20211) (call-with-port . G20210) (call-with-bytevector-output-port . G20209) (bytevector->string . G20208) (buffer-mode? . G20207) (binary-port? . G20206) (&i/o-encoding . G19849) (&i/o-decoding . G19848) (&i/o-port . G19847) (&i/o-file-does-not-exist . G19846) (&i/o-file-already-exists . G19845) (&i/o-file-is-read-only . G19844) (&i/o-file-protection . G19843) (&i/o-filename . G19842) (&i/o-invalid-position . G19841) (&i/o-write . G19840) (&i/o-read . G19839) (&i/o . G19838) (error-handling-mode . G19811) (file-options . G19810) (buffer-mode . G19809) (eol-style . G19808)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20544 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G20202) (enum-set=? . G20201) (enum-set-universe . G20200) (enum-set-union . G20199) (enum-set-subset? . G20198) (enum-set-projection . G20197) (enum-set-member? . G20196) (enum-set-intersection . G20195) (enum-set-indexer . G20194) (enum-set-difference . G20193) (enum-set-constructor . G20192) (enum-set-complement . G20191) (enum-set->list . G20190) (define-enumeration . G19822)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20545 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G19047) (warning? . G18919) (violation? . G18979) (undefined-violation? . G19159) (syntax-violation? . G19135) (syntax-violation-subform . G19139) (syntax-violation-form . G19137) (syntax-violation . G12458) (simple-conditions . G20189) (serious-condition? . G18939) (non-continuable-violation? . G19069) (message-condition? . G18897) (make-who-condition . G19043) (make-warning . G18917) (make-violation . G18977) (make-undefined-violation . G19157) (make-syntax-violation . G19129) (make-serious-condition . G18937) (make-non-continuable-violation . G19067) (make-message-condition . G18893) (make-lexical-violation . G19107) (make-irritants-condition . G19018) (make-implementation-restriction-violation . G19087) (make-error . G18957) (make-assertion-violation . G18997) (lexical-violation? . G19109) (irritants-condition? . G19022) (implementation-restriction-violation? . G19089) (error? . G18959) (condition-who . G19049) (condition-predicate . G20188) (condition-message . G18899) (condition-irritants . G19024) (condition-accessor . G20187) (condition . G20186) (assertion-violation? . G18999) (condition? . G20185) (&undefined . G19837) (&syntax . G19836) (&lexical . G19835) (&implementation-restriction . G19834) (&non-continuable . G19833) (&who . G19832) (&irritants . G19831) (&assertion . G19830) (&violation . G19829) (&error . G19828) (&serious . G19827) (&warning . G19826) (&message . G19825) (&condition . G19824) (define-condition-type . G19823)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20546 '(rnrs records inspection) '(6) '() '() '() '((record? . G20357) (record-type-uid . G20356) (record-type-sealed? . G20355) (record-type-parent . G20354) (record-type-opaque? . G20353) (record-type-name . G20352) (record-type-generative? . G20351) (record-type-field-names . G20350) (record-rtd . G20349) (record-field-mutable? . G20348)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20547 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G20364) (record-predicate . G20363) (record-mutator . G20362) (record-constructor . G20361) (record-accessor . G20360) (make-record-type-descriptor . G20359) (make-record-constructor-descriptor . G20358)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20548 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G19821) (parent-rtd . G19820) (nongenerative . G19819) (opaque . G19818) (sealed . G19817) (protocol . G19816) (parent . G19815) (immutable . G19814) (mutable . G19813) (fields . G19812) (record-constructor-descriptor . G19777) (record-type-descriptor . G19776)) '() values values '#f '#f '#t '#f) (G11132@G10770@install-library 'G20549 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G20517) (&no-nans-rtd . G20516) (&no-infinities-rcd . G20515) (&no-infinities-rtd . G20514) (&i/o-encoding-rcd . G20513) (&i/o-encoding-rtd . G20512) (&i/o-decoding-rcd . G20511) (&i/o-decoding-rtd . G20510) (&i/o-port-rcd . G20509) (&i/o-port-rtd . G20508) (&i/o-file-does-not-exist-rcd . G20507) (&i/o-file-does-not-exist-rtd . G20506) (&i/o-file-already-exists-rcd . G20505) (&i/o-file-already-exists-rtd . G20504) (&i/o-file-is-read-only-rcd . G20503) (&i/o-file-is-read-only-rtd . G20502) (&i/o-file-protection-rcd . G20501) (&i/o-file-protection-rtd . G20500) (&i/o-filename-rcd . G20499) (&i/o-filename-rtd . G20498) (&i/o-invalid-position-rcd . G20497) (&i/o-invalid-position-rtd . G20496) (&i/o-write-rcd . G20495) (&i/o-write-rtd . G20494) (&i/o-read-rcd . G20493) (&i/o-read-rtd . G20492) (&i/o-rcd . G20491) (&i/o-rtd . G20490) (&undefined-rcd . G20489) (&undefined-rtd . G20488) (&syntax-rcd . G20487) (&syntax-rtd . G20486) (&lexical-rcd . G20485) (&lexical-rtd . G20484) (&implementation-restriction-rcd . G20483) (&implementation-restriction-rtd . G20482) (&non-continuable-rcd . G20481) (&non-continuable-rtd . G20480) (&who-rcd . G20479) (&who-rtd . G20478) (&irritants-rcd . G20477) (&irritants-rtd . G20476) (&assertion-rcd . G20475) (&assertion-rtd . G20474) (&violation-rcd . G20473) (&violation-rtd . G20472) (&error-rcd . G20471) (&error-rtd . G20470) (&serious-rcd . G20469) (&serious-rtd . G20468) (&warning-rcd . G20467) (&warning-rtd . G20466) (&message-rcd . G20465) (&message-rtd . G20464) (&condition-rcd . G20463) (&condition-rtd . G20462) (syntax-error . G12452) (syntax-dispatch . G12225) (pretty-print . G20461) (eval-core . G20460) (set-symbol-value! . G20459) (symbol-value . G20458) (gensym . G20457) (void . G20456) (load . G19610) (interaction-environment . G12470) (char-ready? . G20455) (regexp? . G20454) (read-line . G20453) (dotted-list? . G20452) (circular-list? . G20451) (proper-list? . G20450) (circular-list . G20449) (last . G20448) (last-pair . G20447) (not-pair? . G20446) (split-at! . G20445) (split-at . G20444) (list= . G20443) (list-copy . G20442) (list-tabulate . G20441) (make-list . G20440) (xcons . G20439) (tenth . G20438) (ninth . G20437) (eighth . G20436) (seventh . G20435) (sixth . G20434) (fifth . G20433) (drop-right! . G20432) (drop-right . G20431) (take-right . G20430) (take! . G20429) (drop . G20428) (take . G20427) (car+cdr . G20426) (third . G20425) (second . G20424) (first . G20423) (assoc-ref . G20422) (alist-cons . G20421) (print . G20420) (format . G20419) (standard-library-path . G20418) (current-directory . G20417) (write-to-file . G20416) (file->list . G20415) (file->string . G20414) (digit->integer . G20413) (call-with-string-input-port . G20412) (call-with-string-io . G20411) (string-split . G20410) (bytevector-for-each . G20409) (string->regexp . G20408) (rxmatch . G20407) (regexp-replace-all . G20406) (hashtable-for-each . G20405) (readdir . G20404) (get-environment-variables . G20403) (get-environment-variable . G20402) (get-command-line . G20401) (sys-display . G20400) (source-info . G20399) (make-compiler-instruction . G20398) (make-instruction . G20397) (set-source-info! . G20396) (fasl-write . G20395) (receive . G20394) (string-upcase . G20393) (string-titlecase . G20392) (string-normalize-nfkd . G20391) (string-normalize-nfkc . G20390) (string-normalize-nfd . G20389) (string-normalize-nfc . G20388) (string-foldcase . G20387) (string-downcase . G20386) (string-ci>? . G20385) (string-ci>=? . G20384) (string-ci=? . G20383) (string-ci<? . G20382) (string-ci<=? . G20381) (char-whitespace? . G20380) (char-upper-case? . G20379) (char-title-case? . G20378) (char-numeric? . G20377) (char-lower-case? . G20376) (char-general-category . G20375) (char-upcase . G20374) (char-titlecase . G20373) (char-foldcase . G20372) (char-downcase . G20371) (char-ci>? . G20370) (char-ci>=? . G20369) (char-ci=? . G20368) (char-ci<? . G20367) (char-ci<=? . G20366) (char-alphabetic? . G20365) (make-variable-transformer . G11711) (identifier? . G12460) (generate-temporaries . G12444) (free-identifier=? . G12446) (syntax->datum . G12464) (datum->syntax . G12462) (bound-identifier=? . G12448) (record-type-descriptor? . G20364) (record-predicate . G20363) (record-mutator . G20362) (record-constructor . G20361) (record-accessor . G20360) (make-record-type-descriptor . G20359) (make-record-constructor-descriptor . G20358) (record? . G20357) (record-type-uid . G20356) (record-type-sealed? . G20355) (record-type-parent . G20354) (record-type-opaque? . G20353) (record-type-name . G20352) (record-type-generative? . G20351) (record-type-field-names . G20350) (record-rtd . G20349) (record-field-mutable? . G20348) (delete-file . G20347) (file-exists? . G20346) (vector-sort! . G20345) (vector-sort . G20344) (list-sort . G20343) (symbol-hash . G20342) (string-ci-hash . G20341) (string-hash . G20340) (equal-hash . G20339) (hashtable-equivalence-function . G20338) (make-hashtable . G20337) (hashtable-hash-function . G20336) (make-eqv-hashtable . G20335) (make-eq-hashtable . G20334) (hashtable? . G20333) (hashtable-update! . G20332) (hashtable-size . G20331) (hashtable-set! . G20330) (hashtable-ref . G20329) (hashtable-mutable? . G20328) (hashtable-keys . G20327) (hashtable-entries . G20326) (hashtable-delete! . G20325) (hashtable-copy . G20324) (hashtable-contains? . G20323) (hashtable-clear! . G20322) (call-with-output-file . G20321) (call-with-input-file . G20320) (write-char . G20319) (write . G20318) (with-output-to-file . G20317) (with-input-from-file . G20316) (read-char . G20315) (read . G20314) (peek-char . G20313) (open-output-file . G20312) (open-input-file . G20311) (newline . G20310) (display . G20309) (close-output-port . G20308) (close-input-port . G20307) (eof-object? . G20306) (eof-object . G20305) (current-error-port . G20304) (current-output-port . G20303) (current-input-port . G20302) (output-port? . G20301) (input-port? . G20300) (utf-8-codec . G20299) (utf-16-codec . G20298) (transcoder-error-handling-mode . G20297) (transcoder-eol-style . G20296) (transcoder-codec . G20295) (transcoded-port . G20294) (textual-port? . G20293) (string->bytevector . G20292) (standard-output-port . G20291) (standard-input-port . G20290) (standard-error-port . G20289) (set-port-position! . G20288) (put-u8 . G20287) (put-string . G20286) (put-datum . G20285) (put-char . G20284) (put-bytevector . G20283) (port? . G20282) (port-transcoder . G20281) (port-position . G20280) (port-has-set-port-position!? . G20279) (port-has-port-position? . G20278) (port-eof? . G20277) (output-port-buffer-mode . G20276) (open-string-output-port . G20275) (open-string-input-port . G20274) (open-file-output-port . G20273) (open-file-input/output-port . G20272) (open-file-input-port . G20271) (open-bytevector-output-port . G20270) (open-bytevector-input-port . G20269) (native-transcoder . G20268) (native-eol-style . G20267) (make-transcoder . G20266) (latin-1-codec . G20265) (make-i/o-write-error . G19313) (make-i/o-read-error . G19293) (make-i/o-port-error . G19464) (make-i/o-invalid-position-error . G19334) (make-i/o-filename-error . G19359) (make-i/o-file-protection-error . G19383) (make-i/o-file-is-read-only-error . G19403) (make-i/o-file-does-not-exist-error . G19443) (make-i/o-file-already-exists-error . G19423) (make-i/o-error . G19273) (make-i/o-encoding-error . G19509) (make-i/o-decoding-error . G19488) (make-custom-textual-output-port . G20264) (make-custom-textual-input/output-port . G20263) (make-custom-textual-input-port . G20262) (make-custom-binary-output-port . G20261) (make-custom-binary-input/output-port . G20260) (make-custom-binary-input-port . G20259) (make-bytevector . G20258) (lookahead-u8 . G20257) (lookahead-char . G20256) (i/o-write-error? . G19315) (i/o-read-error? . G19295) (i/o-port-error? . G19468) (i/o-invalid-position-error? . G19338) (i/o-filename-error? . G19363) (i/o-file-protection-error? . G19385) (i/o-file-is-read-only-error? . G19405) (i/o-file-does-not-exist-error? . G19445) (i/o-file-already-exists-error? . G19425) (i/o-error? . G19275) (i/o-error-port . G19470) (i/o-error-filename . G19365) (i/o-encoding-error? . G19513) (i/o-encoding-error-char . G19515) (i/o-decoding-error? . G19490) (get-u8 . G20255) (get-string-n! . G20254) (get-string-n . G20253) (get-string-all . G20252) (get-line . G20251) (get-datum . G20250) (get-char . G20249) (get-bytevector-some . G20248) (get-bytevector-n! . G20247) (get-bytevector-n . G20246) (get-bytevector-all . G20245) (flush-output-port . G20244) (close-port . G20243) (scheme-report-environment . G12426) (quotient . G20242) (null-environment . G12424) (remainder . G20241) (modulo . G20240) (inexact->exact . G20239) (force . G20238) (exact->inexact . G20237) (exit . G20236) (command-line . G19604) (string-fill! . G20235) (string-set! . G20234) (set-cdr! . G20233) (set-car! . G20232) (remove . G20231) (remv . G20230) (remp . G20229) (remq . G20228) (partition . G20227) (memv . G20226) (memq . G20225) (memp . G20224) (member . G20223) (exists . G20222) (for-all . G20221) (fold-right . G20220) (fold-left . G20219) (find . G20218) (filter . G20217) (cons* . G20216) (assv . G20215) (assq . G20214) (assp . G20213) (assoc . G20212) (call-with-string-output-port . G20211) (call-with-port . G20210) (call-with-bytevector-output-port . G20209) (bytevector->string . G20208) (buffer-mode? . G20207) (binary-port? . G20206) (with-exception-handler . G20205) (raise-continuable . G20204) (raise . G20203) (eval . G12430) (environment . G12422) (make-enumeration . G20202) (enum-set=? . G20201) (enum-set-universe . G20200) (enum-set-union . G20199) (enum-set-subset? . G20198) (enum-set-projection . G20197) (enum-set-member? . G20196) (enum-set-intersection . G20195) (enum-set-indexer . G20194) (enum-set-difference . G20193) (enum-set-constructor . G20192) (enum-set-complement . G20191) (enum-set->list . G20190) (who-condition? . G19047) (warning? . G18919) (violation? . G18979) (undefined-violation? . G19159) (syntax-violation? . G19135) (syntax-violation-subform . G19139) (syntax-violation-form . G19137) (syntax-violation . G12458) (simple-conditions . G20189) (serious-condition? . G18939) (non-continuable-violation? . G19069) (message-condition? . G18897) (make-who-condition . G19043) (make-warning . G18917) (make-violation . G18977) (make-undefined-violation . G19157) (make-syntax-violation . G19129) (make-serious-condition . G18937) (make-non-continuable-violation . G19067) (make-message-condition . G18893) (make-lexical-violation . G19107) (make-irritants-condition . G19018) (make-implementation-restriction-violation . G19087) (make-error . G18957) (make-assertion-violation . G18997) (lexical-violation? . G19109) (irritants-condition? . G19022) (implementation-restriction-violation? . G19089) (error? . G18959) (condition-who . G19049) (condition-predicate . G20188) (condition-message . G18899) (condition-irritants . G19024) (condition-accessor . G20187) (condition . G20186) (assertion-violation? . G18999) (condition? . G20185) (utf32->string . G20184) (utf16->string . G20183) (utf8->string . G20182) (uint-list->bytevector . G20181) (u8-list->bytevector . G20180) (string->utf8 . G20179) (string->utf32 . G20178) (string->utf16 . G20177) (sint-list->bytevector . G20176) (native-endianness . G20175) (bytevector? . G20174) (bytevector=? . G20173) (bytevector-uint-set! . G20172) (bytevector-uint-ref . G20171) (bytevector-u8-set! . G20170) (bytevector-u8-ref . G20169) (bytevector-u64-set! . G20168) (bytevector-u64-ref . G20167) (bytevector-u64-native-set! . G20166) (bytevector-u64-native-ref . G20165) (bytevector-u32-set! . G20164) (bytevector-u32-ref . G20163) (bytevector-u32-native-set! . G20162) (bytevector-u32-native-ref . G20161) (bytevector-u16-set! . G20160) (bytevector-u16-ref . G20159) (bytevector-u16-native-set! . G20158) (bytevector-u16-native-ref . G20157) (bytevector-sint-set! . G20156) (bytevector-sint-ref . G20155) (bytevector-s8-set! . G20154) (bytevector-s8-ref . G20153) (bytevector-s64-set! . G20152) (bytevector-s64-ref . G20151) (bytevector-s64-native-set! . G20150) (bytevector-s64-native-ref . G20149) (bytevector-s32-set! . G20148) (bytevector-s32-ref . G20147) (bytevector-s32-native-set! . G20146) (bytevector-s32-native-ref . G20145) (bytevector-s16-set! . G20144) (bytevector-s16-ref . G20143) (bytevector-s16-native-set! . G20142) (bytevector-s16-native-ref . G20141) (bytevector-length . G20140) (bytevector-ieee-single-ref . G20139) (bytevector-ieee-single-native-set! . G20138) (bytevector-ieee-single-native-ref . G20137) (bytevector-ieee-double-ref . G20136) (bytevector-ieee-double-native-set! . G20135) (bytevector-ieee-double-native-ref . G20134) (bytevector-fill! . G20133) (bytevector-copy! . G20132) (bytevector-copy . G20131) (bytevector->uint-list . G20130) (bytevector->u8-list . G20129) (bytevector->sint-list . G20128) (no-nans-violation? . G20127) (no-infinities-violation? . G20126) (make-no-nans-violation . G20125) (make-no-infinities-violation . G20124) (real->flonum . G20123) (flzero? . G20122) (fltruncate . G20121) (fltan . G20120) (flsqrt . G20119) (flsin . G20118) (flround . G20117) (flpositive? . G20116) (flonum? . G20115) (flodd? . G20114) (flnumerator . G20113) (flnegative? . G20112) (flnan? . G20111) (flmod0 . G20110) (flmod . G20109) (flmin . G20108) (flmax . G20107) (fllog . G20106) (flinteger? . G20105) (flinfinite? . G20104) (flfloor . G20103) (flfinite? . G20102) (flexpt . G20101) (flexp . G20100) (fleven? . G20099) (fldiv0-and-mod0 . G20098) (fldiv0 . G20097) (fldiv-and-mod . G20096) (fldiv . G20095) (fldenominator . G20094) (flcos . G20093) (flceiling . G20092) (flatan . G20091) (flasin . G20090) (flacos . G20089) (flabs . G20088) (fl>? . G20087) (fl>=? . G20086) (fl=? . G20085) (fl<? . G20084) (fl<=? . G20083) (fl/ . G20082) (fl- . G20081) (fl+ . G20080) (fl* . G20079) (fixnum->flonum . G20078) (fxzero? . G20077) (fxxor . G20076) (fxrotate-bit-field . G20075) (fxreverse-bit-field . G20074) (fxpositive? . G20073) (fxodd? . G20072) (fxnot . G20071) (fxnegative? . G20070) (fxmod0 . G20069) (fxmod . G20068) (fxmin . G20067) (fxmax . G20066) (fxlength . G20065) (fxior . G20064) (fxif . G20063) (fxfirst-bit-set . G20062) (fxeven? . G20061) (fxdiv0-and-mod0 . G20060) (fxdiv0 . G20059) (fxdiv-and-mod . G20058) (fxdiv . G20057) (fxcopy-bit-field . G20056) (fxcopy-bit . G20055) (fxbit-set? . G20054) (fxbit-field . G20053) (fxbit-count . G20052) (fxarithmetic-shift-right . G20051) (fxarithmetic-shift-left . G20050) (fxarithmetic-shift . G20049) (fxand . G20048) (fx>? . G20047) (fx>=? . G20046) (fx=? . G20045) (fx<? . G20044) (fx<=? . G20043) (fx-/carry . G20042) (fx- . G20041) (fx+/carry . G20040) (fx+ . G20039) (fx*/carry . G20038) (fx* . G20037) (greatest-fixnum . G20036) (least-fixnum . G20035) (fixnum-width . G20034) (fixnum? . G20033) (bitwise-rotate-bit-field . G20032) (bitwise-reverse-bit-field . G20031) (bitwise-length . G20030) (bitwise-if . G20029) (bitwise-first-bit-set . G20028) (bitwise-copy-bit-field . G20027) (bitwise-copy-bit . G20026) (bitwise-bit-set? . G20025) (bitwise-bit-field . G20024) (bitwise-bit-count . G20023) (bitwise-xor . G20022) (bitwise-ior . G20021) (bitwise-and . G20020) (bitwise-not . G20019) (bitwise-arithmetic-shift-right . G20018) (bitwise-arithmetic-shift-left . G20017) (bitwise-arithmetic-shift . G20016) (zero? . G20015) (vector? . G20014) (vector-set! . G20013) (vector-ref . G20012) (vector-map . G20011) (vector-length . G20010) (vector-for-each . G20009) (vector-fill! . G20008) (vector->list . G20007) (vector . G20006) (values . G20005) (truncate . G20004) (tan . G20003) (symbol? . G20002) (symbol=? . G20001) (symbol->string . G20000) (substring . G19999) (string? . G19998) (string>? . G19997) (string>=? . G19996) (string=? . G19995) (string<? . G19994) (string<=? . G19993) (string-ref . G19992) (string-length . G19991) (string-for-each . G19990) (string-copy . G19989) (string-append . G19988) (string->symbol . G19987) (string->number . G19986) (string->list . G19985) (string . G19984) (sqrt . G19983) (sin . G19982) (round . G19981) (reverse . G19980) (real? . G19979) (real-valued? . G19978) (real-part . G19977) (rationalize . G19976) (rational? . G19975) (rational-valued? . G19974) (procedure? . G19973) (positive? . G19972) (pair? . G19971) (odd? . G19970) (numerator . G19969) (number? . G19968) (number->string . G19967) (null? . G19966) (not . G19965) (negative? . G19964) (nan? . G19963) (min . G19962) (max . G19961) (map . G19960) (make-vector . G19959) (make-string . G19958) (make-rectangular . G19957) (make-polar . G19956) (magnitude . G19955) (log . G19954) (list? . G19953) (list-tail . G19952) (list-ref . G19951) (list->vector . G19950) (list->string . G19949) (list . G19948) (length . G19947) (lcm . G19946) (integer? . G19945) (integer-valued? . G19944) (integer->char . G19943) (infinite? . G19942) (inexact? . G19941) (inexact . G19940) (imag-part . G19939) (gcd . G19938) (for-each . G19937) (floor . G19936) (finite? . G19935) (expt . G19934) (exp . G19933) (exact? . G19932) (exact-integer-sqrt . G19931) (exact . G19930) (even? . G19929) (error . G19928) (eqv? . G19927) (equal? . G19926) (eq? . G19925) (dynamic-wind . G19924) (div0-and-mod0 . G19923) (mod0 . G19922) (div0 . G19921) (div-and-mod . G19920) (mod . G19919) (div . G19918) (denominator . G19917) (cos . G19916) (cons . G19915) (complex? . G19914) (char? . G19913) (char>? . G19912) (char>=? . G19911) (char=? . G19910) (char<? . G19909) (char<=? . G19908) (char->integer . G19907) (ceiling . G19906) (call-with-values . G19905) (call/cc . G19904) (call-with-current-continuation . G19903) (cddddr . G19902) (cdddar . G19901) (cddadr . G19900) (cddaar . G19899) (cdaddr . G19898) (cdadar . G19897) (cdaadr . G19896) (cdaaar . G19895) (cadddr . G19894) (caddar . G19893) (cadadr . G19892) (cadaar . G19891) (caaddr . G19890) (caadar . G19889) (caaadr . G19888) (caaaar . G19887) (cdddr . G19886) (cddar . G19885) (cdadr . G19884) (cdaar . G19883) (caddr . G19882) (cadar . G19881) (caadr . G19880) (caaar . G19879) (cddr . G19878) (cdar . G19877) (cadr . G19876) (caar . G19875) (cdr . G19874) (car . G19873) (boolean? . G19872) (boolean=? . G19871) (atan . G19870) (assertion-violation . G19869) (asin . G19868) (apply . G19867) (append . G19866) (angle . G19865) (acos . G19864) (abs . G19863) (/ . G19862) (* . G19861) (- . G19860) (+ . G19859) (>= . G19858) (> . G19857) (= . G19856) (<= . G19855) (< . G19854) (library . G19853) (export . G19852) (&no-nans . G19851) (&no-infinities . G19850) (&i/o-encoding . G19849) (&i/o-decoding . G19848) (&i/o-port . G19847) (&i/o-file-does-not-exist . G19846) (&i/o-file-already-exists . G19845) (&i/o-file-is-read-only . G19844) (&i/o-file-protection . G19843) (&i/o-filename . G19842) (&i/o-invalid-position . G19841) (&i/o-write . G19840) (&i/o-read . G19839) (&i/o . G19838) (&undefined . G19837) (&syntax . G19836) (&lexical . G19835) (&implementation-restriction . G19834) (&non-continuable . G19833) (&who . G19832) (&irritants . G19831) (&assertion . G19830) (&violation . G19829) (&error . G19828) (&serious . G19827) (&warning . G19826) (&message . G19825) (&condition . G19824) (define-condition-type . G19823) (define-enumeration . G19822) (define-record-type . G19821) (parent-rtd . G19820) (nongenerative . G19819) (opaque . G19818) (sealed . G19817) (protocol . G19816) (parent . G19815) (immutable . G19814) (mutable . G19813) (fields . G19812) (error-handling-mode . G19811) (file-options . G19810) (buffer-mode . G19809) (eol-style . G19808) (guard . G19807) (trace-define . G19806) (trace-lambda . G19805) (unsyntax-splicing . G19804) (unsyntax . G19803) (unquote-splicing . G19802) (unquote . G19801) (_ . G19800) (else . G19799) (=> . G19798) (... . G19797) (assert . G19796) (endianness . G19795) (delay . G19794) (time . G19793) (or . G19792) (and . G19791) (do . G19790) (cond . G19789) (let* . G19788) (let . G19787) (let*-values . G19786) (let-values . G19785) (identifier-syntax . G19784) (with-syntax . G19783) (quasisyntax . G19782) (quasiquote . G19781) (syntax-rules . G19780) (include . G19779) (define-struct . G19778) (record-constructor-descriptor . G19777) (record-type-descriptor . G19776) (case . G19775) (parameterize . G19774) (unless . G19773) (when . G19772) (if . G19771) (letrec* . G19770) (letrec . G19769) (type-descriptor . G19768) (case-lambda . G19767) (lambda . G19766) (syntax . G19765) (syntax-case . G19764) (quote . G19763) (foreign-call . G19762) (letrec-syntax . G19761) (let-syntax . G19760) (set! . G19759) (import . G19758) (begin . G19757) (module . G19756) (define-syntax . G19755) (define . G19754)) '((G20517 core-prim . &no-nans-rcd) (G20516 core-prim . &no-nans-rtd) (G20515 core-prim . &no-infinities-rcd) (G20514 core-prim . &no-infinities-rtd) (G20513 core-prim . &i/o-encoding-rcd) (G20512 core-prim . &i/o-encoding-rtd) (G20511 core-prim . &i/o-decoding-rcd) (G20510 core-prim . &i/o-decoding-rtd) (G20509 core-prim . &i/o-port-rcd) (G20508 core-prim . &i/o-port-rtd) (G20507 core-prim . &i/o-file-does-not-exist-rcd) (G20506 core-prim . &i/o-file-does-not-exist-rtd) (G20505 core-prim . &i/o-file-already-exists-rcd) (G20504 core-prim . &i/o-file-already-exists-rtd) (G20503 core-prim . &i/o-file-is-read-only-rcd) (G20502 core-prim . &i/o-file-is-read-only-rtd) (G20501 core-prim . &i/o-file-protection-rcd) (G20500 core-prim . &i/o-file-protection-rtd) (G20499 core-prim . &i/o-filename-rcd) (G20498 core-prim . &i/o-filename-rtd) (G20497 core-prim . &i/o-invalid-position-rcd) (G20496 core-prim . &i/o-invalid-position-rtd) (G20495 core-prim . &i/o-write-rcd) (G20494 core-prim . &i/o-write-rtd) (G20493 core-prim . &i/o-read-rcd) (G20492 core-prim . &i/o-read-rtd) (G20491 core-prim . &i/o-rcd) (G20490 core-prim . &i/o-rtd) (G20489 core-prim . &undefined-rcd) (G20488 core-prim . &undefined-rtd) (G20487 core-prim . &syntax-rcd) (G20486 core-prim . &syntax-rtd) (G20485 core-prim . &lexical-rcd) (G20484 core-prim . &lexical-rtd) (G20483 core-prim . &implementation-restriction-rcd) (G20482 core-prim . &implementation-restriction-rtd) (G20481 core-prim . &non-continuable-rcd) (G20480 core-prim . &non-continuable-rtd) (G20479 core-prim . &who-rcd) (G20478 core-prim . &who-rtd) (G20477 core-prim . &irritants-rcd) (G20476 core-prim . &irritants-rtd) (G20475 core-prim . &assertion-rcd) (G20474 core-prim . &assertion-rtd) (G20473 core-prim . &violation-rcd) (G20472 core-prim . &violation-rtd) (G20471 core-prim . &error-rcd) (G20470 core-prim . &error-rtd) (G20469 core-prim . &serious-rcd) (G20468 core-prim . &serious-rtd) (G20467 core-prim . &warning-rcd) (G20466 core-prim . &warning-rtd) (G20465 core-prim . &message-rcd) (G20464 core-prim . &message-rtd) (G20463 core-prim . &condition-rcd) (G20462 core-prim . &condition-rtd) (G12452 core-prim . syntax-error) (G12225 core-prim . syntax-dispatch) (G20461 core-prim . pretty-print) (G20460 core-prim . eval-core) (G20459 core-prim . set-symbol-value!) (G20458 core-prim . symbol-value) (G20457 core-prim . gensym) (G20456 core-prim . void) (G19610 core-prim . load) (G12470 core-prim . interaction-environment) (G20455 core-prim . char-ready?) (G20454 core-prim . regexp?) (G20453 core-prim . read-line) (G20452 core-prim . dotted-list?) (G20451 core-prim . circular-list?) (G20450 core-prim . proper-list?) (G20449 core-prim . circular-list) (G20448 core-prim . last) (G20447 core-prim . last-pair) (G20446 core-prim . not-pair?) (G20445 core-prim . split-at!) (G20444 core-prim . split-at) (G20443 core-prim . list=) (G20442 core-prim . list-copy) (G20441 core-prim . list-tabulate) (G20440 core-prim . make-list) (G20439 core-prim . xcons) (G20438 core-prim . tenth) (G20437 core-prim . ninth) (G20436 core-prim . eighth) (G20435 core-prim . seventh) (G20434 core-prim . sixth) (G20433 core-prim . fifth) (G20432 core-prim . drop-right!) (G20431 core-prim . drop-right) (G20430 core-prim . take-right) (G20429 core-prim . take!) (G20428 core-prim . drop) (G20427 core-prim . take) (G20426 core-prim . car+cdr) (G20425 core-prim . third) (G20424 core-prim . second) (G20423 core-prim . first) (G20422 core-prim . assoc-ref) (G20421 core-prim . alist-cons) (G20420 core-prim . print) (G20419 core-prim . format) (G20418 core-prim . standard-library-path) (G20417 core-prim . current-directory) (G20416 core-prim . write-to-file) (G20415 core-prim . file->list) (G20414 core-prim . file->string) (G20413 core-prim . digit->integer) (G20412 core-prim . call-with-string-input-port) (G20411 core-prim . call-with-string-io) (G20410 core-prim . string-split) (G20409 core-prim . bytevector-for-each) (G20408 core-prim . string->regexp) (G20407 core-prim . rxmatch) (G20406 core-prim . regexp-replace-all) (G20405 core-prim . hashtable-for-each) (G20404 core-prim . readdir) (G20403 core-prim . get-environment-variables) (G20402 core-prim . get-environment-variable) (G20401 core-prim . get-command-line) (G20400 core-prim . sys-display) (G20399 core-prim . source-info) (G20398 core-prim . make-compiler-instruction) (G20397 core-prim . make-instruction) (G20396 core-prim . set-source-info!) (G20395 core-prim . fasl-write) (G20394 core-prim . receive) (G20393 core-prim . string-upcase) (G20392 core-prim . string-titlecase) (G20391 core-prim . string-normalize-nfkd) (G20390 core-prim . string-normalize-nfkc) (G20389 core-prim . string-normalize-nfd) (G20388 core-prim . string-normalize-nfc) (G20387 core-prim . string-foldcase) (G20386 core-prim . string-downcase) (G20385 core-prim . string-ci>?) (G20384 core-prim . string-ci>=?) (G20383 core-prim . string-ci=?) (G20382 core-prim . string-ci<?) (G20381 core-prim . string-ci<=?) (G20380 core-prim . char-whitespace?) (G20379 core-prim . char-upper-case?) (G20378 core-prim . char-title-case?) (G20377 core-prim . char-numeric?) (G20376 core-prim . char-lower-case?) (G20375 core-prim . char-general-category) (G20374 core-prim . char-upcase) (G20373 core-prim . char-titlecase) (G20372 core-prim . char-foldcase) (G20371 core-prim . char-downcase) (G20370 core-prim . char-ci>?) (G20369 core-prim . char-ci>=?) (G20368 core-prim . char-ci=?) (G20367 core-prim . char-ci<?) (G20366 core-prim . char-ci<=?) (G20365 core-prim . char-alphabetic?) (G11711 core-prim . make-variable-transformer) (G12460 core-prim . identifier?) (G12444 core-prim . generate-temporaries) (G12446 core-prim . free-identifier=?) (G12464 core-prim . syntax->datum) (G12462 core-prim . datum->syntax) (G12448 core-prim . bound-identifier=?) (G20364 core-prim . record-type-descriptor?) (G20363 core-prim . record-predicate) (G20362 core-prim . record-mutator) (G20361 core-prim . record-constructor) (G20360 core-prim . record-accessor) (G20359 core-prim . make-record-type-descriptor) (G20358 core-prim . make-record-constructor-descriptor) (G20357 core-prim . record?) (G20356 core-prim . record-type-uid) (G20355 core-prim . record-type-sealed?) (G20354 core-prim . record-type-parent) (G20353 core-prim . record-type-opaque?) (G20352 core-prim . record-type-name) (G20351 core-prim . record-type-generative?) (G20350 core-prim . record-type-field-names) (G20349 core-prim . record-rtd) (G20348 core-prim . record-field-mutable?) (G20347 core-prim . delete-file) (G20346 core-prim . file-exists?) (G20345 core-prim . vector-sort!) (G20344 core-prim . vector-sort) (G20343 core-prim . list-sort) (G20342 core-prim . symbol-hash) (G20341 core-prim . string-ci-hash) (G20340 core-prim . string-hash) (G20339 core-prim . equal-hash) (G20338 core-prim . hashtable-equivalence-function) (G20337 core-prim . make-hashtable) (G20336 core-prim . hashtable-hash-function) (G20335 core-prim . make-eqv-hashtable) (G20334 core-prim . make-eq-hashtable) (G20333 core-prim . hashtable?) (G20332 core-prim . hashtable-update!) (G20331 core-prim . hashtable-size) (G20330 core-prim . hashtable-set!) (G20329 core-prim . hashtable-ref) (G20328 core-prim . hashtable-mutable?) (G20327 core-prim . hashtable-keys) (G20326 core-prim . hashtable-entries) (G20325 core-prim . hashtable-delete!) (G20324 core-prim . hashtable-copy) (G20323 core-prim . hashtable-contains?) (G20322 core-prim . hashtable-clear!) (G20321 core-prim . call-with-output-file) (G20320 core-prim . call-with-input-file) (G20319 core-prim . write-char) (G20318 core-prim . write) (G20317 core-prim . with-output-to-file) (G20316 core-prim . with-input-from-file) (G20315 core-prim . read-char) (G20314 core-prim . read) (G20313 core-prim . peek-char) (G20312 core-prim . open-output-file) (G20311 core-prim . open-input-file) (G20310 core-prim . newline) (G20309 core-prim . display) (G20308 core-prim . close-output-port) (G20307 core-prim . close-input-port) (G20306 core-prim . eof-object?) (G20305 core-prim . eof-object) (G20304 core-prim . current-error-port) (G20303 core-prim . current-output-port) (G20302 core-prim . current-input-port) (G20301 core-prim . output-port?) (G20300 core-prim . input-port?) (G20299 core-prim . utf-8-codec) (G20298 core-prim . utf-16-codec) (G20297 core-prim . transcoder-error-handling-mode) (G20296 core-prim . transcoder-eol-style) (G20295 core-prim . transcoder-codec) (G20294 core-prim . transcoded-port) (G20293 core-prim . textual-port?) (G20292 core-prim . string->bytevector) (G20291 core-prim . standard-output-port) (G20290 core-prim . standard-input-port) (G20289 core-prim . standard-error-port) (G20288 core-prim . set-port-position!) (G20287 core-prim . put-u8) (G20286 core-prim . put-string) (G20285 core-prim . put-datum) (G20284 core-prim . put-char) (G20283 core-prim . put-bytevector) (G20282 core-prim . port?) (G20281 core-prim . port-transcoder) (G20280 core-prim . port-position) (G20279 core-prim . port-has-set-port-position!?) (G20278 core-prim . port-has-port-position?) (G20277 core-prim . port-eof?) (G20276 core-prim . output-port-buffer-mode) (G20275 core-prim . open-string-output-port) (G20274 core-prim . open-string-input-port) (G20273 core-prim . open-file-output-port) (G20272 core-prim . open-file-input/output-port) (G20271 core-prim . open-file-input-port) (G20270 core-prim . open-bytevector-output-port) (G20269 core-prim . open-bytevector-input-port) (G20268 core-prim . native-transcoder) (G20267 core-prim . native-eol-style) (G20266 core-prim . make-transcoder) (G20265 core-prim . latin-1-codec) (G19313 core-prim . make-i/o-write-error) (G19293 core-prim . make-i/o-read-error) (G19464 core-prim . make-i/o-port-error) (G19334 core-prim . make-i/o-invalid-position-error) (G19359 core-prim . make-i/o-filename-error) (G19383 core-prim . make-i/o-file-protection-error) (G19403 core-prim . make-i/o-file-is-read-only-error) (G19443 core-prim . make-i/o-file-does-not-exist-error) (G19423 core-prim . make-i/o-file-already-exists-error) (G19273 core-prim . make-i/o-error) (G19509 core-prim . make-i/o-encoding-error) (G19488 core-prim . make-i/o-decoding-error) (G20264 core-prim . make-custom-textual-output-port) (G20263 core-prim . make-custom-textual-input/output-port) (G20262 core-prim . make-custom-textual-input-port) (G20261 core-prim . make-custom-binary-output-port) (G20260 core-prim . make-custom-binary-input/output-port) (G20259 core-prim . make-custom-binary-input-port) (G20258 core-prim . make-bytevector) (G20257 core-prim . lookahead-u8) (G20256 core-prim . lookahead-char) (G19315 core-prim . i/o-write-error?) (G19295 core-prim . i/o-read-error?) (G19468 core-prim . i/o-port-error?) (G19338 core-prim . i/o-invalid-position-error?) (G19363 core-prim . i/o-filename-error?) (G19385 core-prim . i/o-file-protection-error?) (G19405 core-prim . i/o-file-is-read-only-error?) (G19445 core-prim . i/o-file-does-not-exist-error?) (G19425 core-prim . i/o-file-already-exists-error?) (G19275 core-prim . i/o-error?) (G19470 core-prim . i/o-error-port) (G19365 core-prim . i/o-error-filename) (G19513 core-prim . i/o-encoding-error?) (G19515 core-prim . i/o-encoding-error-char) (G19490 core-prim . i/o-decoding-error?) (G20255 core-prim . get-u8) (G20254 core-prim . get-string-n!) (G20253 core-prim . get-string-n) (G20252 core-prim . get-string-all) (G20251 core-prim . get-line) (G20250 core-prim . get-datum) (G20249 core-prim . get-char) (G20248 core-prim . get-bytevector-some) (G20247 core-prim . get-bytevector-n!) (G20246 core-prim . get-bytevector-n) (G20245 core-prim . get-bytevector-all) (G20244 core-prim . flush-output-port) (G20243 core-prim . close-port) (G12426 core-prim . scheme-report-environment) (G20242 core-prim . quotient) (G12424 core-prim . null-environment) (G20241 core-prim . remainder) (G20240 core-prim . modulo) (G20239 core-prim . inexact->exact) (G20238 core-prim . force) (G20237 core-prim . exact->inexact) (G20236 core-prim . exit) (G19604 core-prim . command-line) (G20235 core-prim . string-fill!) (G20234 core-prim . string-set!) (G20233 core-prim . set-cdr!) (G20232 core-prim . set-car!) (G20231 core-prim . remove) (G20230 core-prim . remv) (G20229 core-prim . remp) (G20228 core-prim . remq) (G20227 core-prim . partition) (G20226 core-prim . memv) (G20225 core-prim . memq) (G20224 core-prim . memp) (G20223 core-prim . member) (G20222 core-prim . exists) (G20221 core-prim . for-all) (G20220 core-prim . fold-right) (G20219 core-prim . fold-left) (G20218 core-prim . find) (G20217 core-prim . filter) (G20216 core-prim . cons*) (G20215 core-prim . assv) (G20214 core-prim . assq) (G20213 core-prim . assp) (G20212 core-prim . assoc) (G20211 core-prim . call-with-string-output-port) (G20210 core-prim . call-with-port) (G20209 core-prim . call-with-bytevector-output-port) (G20208 core-prim . bytevector->string) (G20207 core-prim . buffer-mode?) (G20206 core-prim . binary-port?) (G20205 core-prim . with-exception-handler) (G20204 core-prim . raise-continuable) (G20203 core-prim . raise) (G12430 core-prim . eval) (G12422 core-prim . environment) (G20202 core-prim . make-enumeration) (G20201 core-prim . enum-set=?) (G20200 core-prim . enum-set-universe) (G20199 core-prim . enum-set-union) (G20198 core-prim . enum-set-subset?) (G20197 core-prim . enum-set-projection) (G20196 core-prim . enum-set-member?) (G20195 core-prim . enum-set-intersection) (G20194 core-prim . enum-set-indexer) (G20193 core-prim . enum-set-difference) (G20192 core-prim . enum-set-constructor) (G20191 core-prim . enum-set-complement) (G20190 core-prim . enum-set->list) (G19047 core-prim . who-condition?) (G18919 core-prim . warning?) (G18979 core-prim . violation?) (G19159 core-prim . undefined-violation?) (G19135 core-prim . syntax-violation?) (G19139 core-prim . syntax-violation-subform) (G19137 core-prim . syntax-violation-form) (G12458 core-prim . syntax-violation) (G20189 core-prim . simple-conditions) (G18939 core-prim . serious-condition?) (G19069 core-prim . non-continuable-violation?) (G18897 core-prim . message-condition?) (G19043 core-prim . make-who-condition) (G18917 core-prim . make-warning) (G18977 core-prim . make-violation) (G19157 core-prim . make-undefined-violation) (G19129 core-prim . make-syntax-violation) (G18937 core-prim . make-serious-condition) (G19067 core-prim . make-non-continuable-violation) (G18893 core-prim . make-message-condition) (G19107 core-prim . make-lexical-violation) (G19018 core-prim . make-irritants-condition) (G19087 core-prim . make-implementation-restriction-violation) (G18957 core-prim . make-error) (G18997 core-prim . make-assertion-violation) (G19109 core-prim . lexical-violation?) (G19022 core-prim . irritants-condition?) (G19089 core-prim . implementation-restriction-violation?) (G18959 core-prim . error?) (G19049 core-prim . condition-who) (G20188 core-prim . condition-predicate) (G18899 core-prim . condition-message) (G19024 core-prim . condition-irritants) (G20187 core-prim . condition-accessor) (G20186 core-prim . condition) (G18999 core-prim . assertion-violation?) (G20185 core-prim . condition?) (G20184 core-prim . utf32->string) (G20183 core-prim . utf16->string) (G20182 core-prim . utf8->string) (G20181 core-prim . uint-list->bytevector) (G20180 core-prim . u8-list->bytevector) (G20179 core-prim . string->utf8) (G20178 core-prim . string->utf32) (G20177 core-prim . string->utf16) (G20176 core-prim . sint-list->bytevector) (G20175 core-prim . native-endianness) (G20174 core-prim . bytevector?) (G20173 core-prim . bytevector=?) (G20172 core-prim . bytevector-uint-set!) (G20171 core-prim . bytevector-uint-ref) (G20170 core-prim . bytevector-u8-set!) (G20169 core-prim . bytevector-u8-ref) (G20168 core-prim . bytevector-u64-set!) (G20167 core-prim . bytevector-u64-ref) (G20166 core-prim . bytevector-u64-native-set!) (G20165 core-prim . bytevector-u64-native-ref) (G20164 core-prim . bytevector-u32-set!) (G20163 core-prim . bytevector-u32-ref) (G20162 core-prim . bytevector-u32-native-set!) (G20161 core-prim . bytevector-u32-native-ref) (G20160 core-prim . bytevector-u16-set!) (G20159 core-prim . bytevector-u16-ref) (G20158 core-prim . bytevector-u16-native-set!) (G20157 core-prim . bytevector-u16-native-ref) (G20156 core-prim . bytevector-sint-set!) (G20155 core-prim . bytevector-sint-ref) (G20154 core-prim . bytevector-s8-set!) (G20153 core-prim . bytevector-s8-ref) (G20152 core-prim . bytevector-s64-set!) (G20151 core-prim . bytevector-s64-ref) (G20150 core-prim . bytevector-s64-native-set!) (G20149 core-prim . bytevector-s64-native-ref) (G20148 core-prim . bytevector-s32-set!) (G20147 core-prim . bytevector-s32-ref) (G20146 core-prim . bytevector-s32-native-set!) (G20145 core-prim . bytevector-s32-native-ref) (G20144 core-prim . bytevector-s16-set!) (G20143 core-prim . bytevector-s16-ref) (G20142 core-prim . bytevector-s16-native-set!) (G20141 core-prim . bytevector-s16-native-ref) (G20140 core-prim . bytevector-length) (G20139 core-prim . bytevector-ieee-single-ref) (G20138 core-prim . bytevector-ieee-single-native-set!) (G20137 core-prim . bytevector-ieee-single-native-ref) (G20136 core-prim . bytevector-ieee-double-ref) (G20135 core-prim . bytevector-ieee-double-native-set!) (G20134 core-prim . bytevector-ieee-double-native-ref) (G20133 core-prim . bytevector-fill!) (G20132 core-prim . bytevector-copy!) (G20131 core-prim . bytevector-copy) (G20130 core-prim . bytevector->uint-list) (G20129 core-prim . bytevector->u8-list) (G20128 core-prim . bytevector->sint-list) (G20127 core-prim . no-nans-violation?) (G20126 core-prim . no-infinities-violation?) (G20125 core-prim . make-no-nans-violation) (G20124 core-prim . make-no-infinities-violation) (G20123 core-prim . real->flonum) (G20122 core-prim . flzero?) (G20121 core-prim . fltruncate) (G20120 core-prim . fltan) (G20119 core-prim . flsqrt) (G20118 core-prim . flsin) (G20117 core-prim . flround) (G20116 core-prim . flpositive?) (G20115 core-prim . flonum?) (G20114 core-prim . flodd?) (G20113 core-prim . flnumerator) (G20112 core-prim . flnegative?) (G20111 core-prim . flnan?) (G20110 core-prim . flmod0) (G20109 core-prim . flmod) (G20108 core-prim . flmin) (G20107 core-prim . flmax) (G20106 core-prim . fllog) (G20105 core-prim . flinteger?) (G20104 core-prim . flinfinite?) (G20103 core-prim . flfloor) (G20102 core-prim . flfinite?) (G20101 core-prim . flexpt) (G20100 core-prim . flexp) (G20099 core-prim . fleven?) (G20098 core-prim . fldiv0-and-mod0) (G20097 core-prim . fldiv0) (G20096 core-prim . fldiv-and-mod) (G20095 core-prim . fldiv) (G20094 core-prim . fldenominator) (G20093 core-prim . flcos) (G20092 core-prim . flceiling) (G20091 core-prim . flatan) (G20090 core-prim . flasin) (G20089 core-prim . flacos) (G20088 core-prim . flabs) (G20087 core-prim . fl>?) (G20086 core-prim . fl>=?) (G20085 core-prim . fl=?) (G20084 core-prim . fl<?) (G20083 core-prim . fl<=?) (G20082 core-prim . fl/) (G20081 core-prim . fl-) (G20080 core-prim . fl+) (G20079 core-prim . fl*) (G20078 core-prim . fixnum->flonum) (G20077 core-prim . fxzero?) (G20076 core-prim . fxxor) (G20075 core-prim . fxrotate-bit-field) (G20074 core-prim . fxreverse-bit-field) (G20073 core-prim . fxpositive?) (G20072 core-prim . fxodd?) (G20071 core-prim . fxnot) (G20070 core-prim . fxnegative?) (G20069 core-prim . fxmod0) (G20068 core-prim . fxmod) (G20067 core-prim . fxmin) (G20066 core-prim . fxmax) (G20065 core-prim . fxlength) (G20064 core-prim . fxior) (G20063 core-prim . fxif) (G20062 core-prim . fxfirst-bit-set) (G20061 core-prim . fxeven?) (G20060 core-prim . fxdiv0-and-mod0) (G20059 core-prim . fxdiv0) (G20058 core-prim . fxdiv-and-mod) (G20057 core-prim . fxdiv) (G20056 core-prim . fxcopy-bit-field) (G20055 core-prim . fxcopy-bit) (G20054 core-prim . fxbit-set?) (G20053 core-prim . fxbit-field) (G20052 core-prim . fxbit-count) (G20051 core-prim . fxarithmetic-shift-right) (G20050 core-prim . fxarithmetic-shift-left) (G20049 core-prim . fxarithmetic-shift) (G20048 core-prim . fxand) (G20047 core-prim . fx>?) (G20046 core-prim . fx>=?) (G20045 core-prim . fx=?) (G20044 core-prim . fx<?) (G20043 core-prim . fx<=?) (G20042 core-prim . fx-/carry) (G20041 core-prim . fx-) (G20040 core-prim . fx+/carry) (G20039 core-prim . fx+) (G20038 core-prim . fx*/carry) (G20037 core-prim . fx*) (G20036 core-prim . greatest-fixnum) (G20035 core-prim . least-fixnum) (G20034 core-prim . fixnum-width) (G20033 core-prim . fixnum?) (G20032 core-prim . bitwise-rotate-bit-field) (G20031 core-prim . bitwise-reverse-bit-field) (G20030 core-prim . bitwise-length) (G20029 core-prim . bitwise-if) (G20028 core-prim . bitwise-first-bit-set) (G20027 core-prim . bitwise-copy-bit-field) (G20026 core-prim . bitwise-copy-bit) (G20025 core-prim . bitwise-bit-set?) (G20024 core-prim . bitwise-bit-field) (G20023 core-prim . bitwise-bit-count) (G20022 core-prim . bitwise-xor) (G20021 core-prim . bitwise-ior) (G20020 core-prim . bitwise-and) (G20019 core-prim . bitwise-not) (G20018 core-prim . bitwise-arithmetic-shift-right) (G20017 core-prim . bitwise-arithmetic-shift-left) (G20016 core-prim . bitwise-arithmetic-shift) (G20015 core-prim . zero?) (G20014 core-prim . vector?) (G20013 core-prim . vector-set!) (G20012 core-prim . vector-ref) (G20011 core-prim . vector-map) (G20010 core-prim . vector-length) (G20009 core-prim . vector-for-each) (G20008 core-prim . vector-fill!) (G20007 core-prim . vector->list) (G20006 core-prim . vector) (G20005 core-prim . values) (G20004 core-prim . truncate) (G20003 core-prim . tan) (G20002 core-prim . symbol?) (G20001 core-prim . symbol=?) (G20000 core-prim . symbol->string) (G19999 core-prim . substring) (G19998 core-prim . string?) (G19997 core-prim . string>?) (G19996 core-prim . string>=?) (G19995 core-prim . string=?) (G19994 core-prim . string<?) (G19993 core-prim . string<=?) (G19992 core-prim . string-ref) (G19991 core-prim . string-length) (G19990 core-prim . string-for-each) (G19989 core-prim . string-copy) (G19988 core-prim . string-append) (G19987 core-prim . string->symbol) (G19986 core-prim . string->number) (G19985 core-prim . string->list) (G19984 core-prim . string) (G19983 core-prim . sqrt) (G19982 core-prim . sin) (G19981 core-prim . round) (G19980 core-prim . reverse) (G19979 core-prim . real?) (G19978 core-prim . real-valued?) (G19977 core-prim . real-part) (G19976 core-prim . rationalize) (G19975 core-prim . rational?) (G19974 core-prim . rational-valued?) (G19973 core-prim . procedure?) (G19972 core-prim . positive?) (G19971 core-prim . pair?) (G19970 core-prim . odd?) (G19969 core-prim . numerator) (G19968 core-prim . number?) (G19967 core-prim . number->string) (G19966 core-prim . null?) (G19965 core-prim . not) (G19964 core-prim . negative?) (G19963 core-prim . nan?) (G19962 core-prim . min) (G19961 core-prim . max) (G19960 core-prim . map) (G19959 core-prim . make-vector) (G19958 core-prim . make-string) (G19957 core-prim . make-rectangular) (G19956 core-prim . make-polar) (G19955 core-prim . magnitude) (G19954 core-prim . log) (G19953 core-prim . list?) (G19952 core-prim . list-tail) (G19951 core-prim . list-ref) (G19950 core-prim . list->vector) (G19949 core-prim . list->string) (G19948 core-prim . list) (G19947 core-prim . length) (G19946 core-prim . lcm) (G19945 core-prim . integer?) (G19944 core-prim . integer-valued?) (G19943 core-prim . integer->char) (G19942 core-prim . infinite?) (G19941 core-prim . inexact?) (G19940 core-prim . inexact) (G19939 core-prim . imag-part) (G19938 core-prim . gcd) (G19937 core-prim . for-each) (G19936 core-prim . floor) (G19935 core-prim . finite?) (G19934 core-prim . expt) (G19933 core-prim . exp) (G19932 core-prim . exact?) (G19931 core-prim . exact-integer-sqrt) (G19930 core-prim . exact) (G19929 core-prim . even?) (G19928 core-prim . error) (G19927 core-prim . eqv?) (G19926 core-prim . equal?) (G19925 core-prim . eq?) (G19924 core-prim . dynamic-wind) (G19923 core-prim . div0-and-mod0) (G19922 core-prim . mod0) (G19921 core-prim . div0) (G19920 core-prim . div-and-mod) (G19919 core-prim . mod) (G19918 core-prim . div) (G19917 core-prim . denominator) (G19916 core-prim . cos) (G19915 core-prim . cons) (G19914 core-prim . complex?) (G19913 core-prim . char?) (G19912 core-prim . char>?) (G19911 core-prim . char>=?) (G19910 core-prim . char=?) (G19909 core-prim . char<?) (G19908 core-prim . char<=?) (G19907 core-prim . char->integer) (G19906 core-prim . ceiling) (G19905 core-prim . call-with-values) (G19904 core-prim . call/cc) (G19903 core-prim . call-with-current-continuation) (G19902 core-prim . cddddr) (G19901 core-prim . cdddar) (G19900 core-prim . cddadr) (G19899 core-prim . cddaar) (G19898 core-prim . cdaddr) (G19897 core-prim . cdadar) (G19896 core-prim . cdaadr) (G19895 core-prim . cdaaar) (G19894 core-prim . cadddr) (G19893 core-prim . caddar) (G19892 core-prim . cadadr) (G19891 core-prim . cadaar) (G19890 core-prim . caaddr) (G19889 core-prim . caadar) (G19888 core-prim . caaadr) (G19887 core-prim . caaaar) (G19886 core-prim . cdddr) (G19885 core-prim . cddar) (G19884 core-prim . cdadr) (G19883 core-prim . cdaar) (G19882 core-prim . caddr) (G19881 core-prim . cadar) (G19880 core-prim . caadr) (G19879 core-prim . caaar) (G19878 core-prim . cddr) (G19877 core-prim . cdar) (G19876 core-prim . cadr) (G19875 core-prim . caar) (G19874 core-prim . cdr) (G19873 core-prim . car) (G19872 core-prim . boolean?) (G19871 core-prim . boolean=?) (G19870 core-prim . atan) (G19869 core-prim . assertion-violation) (G19868 core-prim . asin) (G19867 core-prim . apply) (G19866 core-prim . append) (G19865 core-prim . angle) (G19864 core-prim . acos) (G19863 core-prim . abs) (G19862 core-prim . /) (G19861 core-prim . *) (G19860 core-prim . -) (G19859 core-prim . +) (G19858 core-prim . >=) (G19857 core-prim . >) (G19856 core-prim . =) (G19855 core-prim . <=) (G19854 core-prim . <) (G19853 core-prim . library) (G19852 core-prim . export) (G19851 $core-rtd &no-nans-rtd &no-nans-rcd) (G19850 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G19849 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G19848 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G19847 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G19846 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G19845 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G19844 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G19843 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G19842 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G19841 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G19840 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G19839 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G19838 $core-rtd &i/o-rtd &i/o-rcd) (G19837 $core-rtd &undefined-rtd &undefined-rcd) (G19836 $core-rtd &syntax-rtd &syntax-rcd) (G19835 $core-rtd &lexical-rtd &lexical-rcd) (G19834 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G19833 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G19832 $core-rtd &who-rtd &who-rcd) (G19831 $core-rtd &irritants-rtd &irritants-rcd) (G19830 $core-rtd &assertion-rtd &assertion-rcd) (G19829 $core-rtd &violation-rtd &violation-rcd) (G19828 $core-rtd &error-rtd &error-rcd) (G19827 $core-rtd &serious-rtd &serious-rcd) (G19826 $core-rtd &warning-rtd &warning-rcd) (G19825 $core-rtd &message-rtd &message-rcd) (G19824 $core-rtd &condition-rtd &condition-rcd) (G19823 macro . define-condition-type) (G19822 macro . define-enumeration) (G19821 macro . define-record-type) (G19820 macro . parent-rtd) (G19819 macro . nongenerative) (G19818 macro . opaque) (G19817 macro . sealed) (G19816 macro . protocol) (G19815 macro . parent) (G19814 macro . immutable) (G19813 macro . mutable) (G19812 macro . fields) (G19811 macro . error-handling-mode) (G19810 macro . file-options) (G19809 macro . buffer-mode) (G19808 macro . eol-style) (G19807 macro . guard) (G19806 macro . trace-define) (G19805 macro . trace-lambda) (G19804 macro . unsyntax-splicing) (G19803 macro . unsyntax) (G19802 macro . unquote-splicing) (G19801 macro . unquote) (G19800 macro . _) (G19799 macro . else) (G19798 macro . =>) (G19797 macro . ...) (G19796 macro . assert) (G19795 macro . endianness) (G19794 macro . delay) (G19793 macro . time) (G19792 macro . or) (G19791 macro . and) (G19790 macro . do) (G19789 macro . cond) (G19788 macro . let*) (G19787 macro . let) (G19786 macro . let*-values) (G19785 macro . let-values) (G19784 macro . identifier-syntax) (G19783 macro . with-syntax) (G19782 macro . quasisyntax) (G19781 macro . quasiquote) (G19780 macro . syntax-rules) (G19779 macro . include) (G19778 macro . define-struct) (G19777 core-macro . record-constructor-descriptor) (G19776 core-macro . record-type-descriptor) (G19775 core-macro . case) (G19774 core-macro . parameterize) (G19773 core-macro . unless) (G19772 core-macro . when) (G19771 core-macro . if) (G19770 core-macro . letrec*) (G19769 core-macro . letrec) (G19768 core-macro . type-descriptor) (G19767 core-macro . case-lambda) (G19766 core-macro . lambda) (G19765 core-macro . syntax) (G19764 core-macro . syntax-case) (G19763 core-macro . quote) (G19762 core-macro . foreign-call) (G19761 letrec-syntax) (G19760 let-syntax) (G19759 set!) (G19758 import) (G19757 begin) (G19756 module) (G19755 define-syntax) (G19754 define)) values values '#f '#f '#f '#f) (G11132@G10770@install-library 'G20550 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G20461) (eval-core . G20460) (set-symbol-value! . G20459) (symbol-value . G20458) (gensym . G20457) (void . G20456)) '() values values '#f '#f '#f '#f) (G11132@G10770@install-library 'G20551 '(mosh) '() '() '() '() '((symbol-value . G20458) (standard-library-path . G20418) (get-command-line . G20401) (sys-display . G20400) (source-info . G20399) (make-compiler-instruction . G20398) (make-instruction . G20397) (set-source-info! . G20396) (fasl-write . G20395) (include . G19779)) '() values values '#f '#f '#f '#f) (G11132@G10770@install-library 'G20552 '(mosh backend) '() '() '() '() '((receive . G20394)) '() values values '#f '#f '#f '#f) (G11132@G10770@install-library 'G20553 '(mosh file) '() '() '() '() '((read-line . G20453) (current-directory . G20417) (write-to-file . G20416) (file->list . G20415) (file->string . G20414)) '() values values '#f '#f '#f '#f) (G11132@G10770@install-library 'G20554 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G20409)) '() values values '#f '#f '#f '#f) (G11132@G10770@install-library 'G20555 '(mosh number) '() '() '() '() '((digit->integer . G20413)) '() values values '#f '#f '#f '#f) (G11132@G10770@install-library 'G20556 '(mosh string) '() '() '() '() '((print . G20420) (format . G20419) (call-with-string-input-port . G20412) (call-with-string-io . G20411) (string-split . G20410) (string->regexp . G20408)) '() values values '#f '#f '#f '#f) (G11132@G10770@install-library 'G20557 '(mosh list) '() '() '() '() '((assoc-ref . G20422)) '() values values '#f '#f '#f '#f) (G11132@G10770@install-library 'G20558 '(mosh regexp) '() '() '() '() '((rxmatch . G20407) (regexp-replace-all . G20406)) '() values values '#f '#f '#f '#f) (G11132@G10770@install-library 'G20559 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G20405)) '() values values '#f '#f '#f '#f) (G11132@G10770@install-library 'G20560 '(system) '() '() '() '() '((readdir . G20404) (get-environment-variables . G20403) (get-environment-variable . G20402)) '() values values '#f '#f '#f '#f) (G11132@G10770@install-library 'G20561 '(srfi :1) '() '() '() '() '((dotted-list? . G20452) (circular-list? . G20451) (proper-list? . G20450) (circular-list . G20449) (last . G20448) (last-pair . G20447) (not-pair? . G20446) (split-at! . G20445) (split-at . G20444) (list= . G20443) (list-copy . G20442) (list-tabulate . G20441) (make-list . G20440) (xcons . G20439) (tenth . G20438) (ninth . G20437) (eighth . G20436) (seventh . G20435) (sixth . G20434) (fifth . G20433) (drop-right! . G20432) (drop-right . G20431) (take-right . G20430) (take! . G20429) (drop . G20428) (take . G20427) (car+cdr . G20426) (third . G20425) (second . G20424) (first . G20423) (alist-cons . G20421)) '() values values '#f '#f '#f '#f))
((lambda (G19599@for-each-with-index G19601@repl G19603@trace-printer G19605@command-line G19607@local-library-path G19609@load/args G19611@load G19613@ironscheme-build G19615@eval-top-level G19617@compile-system-libraries G19619@compile G19621@compile->closure G19623@load-r6rs-top-level G19625@write-record) (begin (set! G19599@for-each-with-index (lambda (G19645@proc G19646@lst) (letrec ((G19649@loop (lambda (G19651@i G19652@lst) (if (null? G19652@lst) (if '#f '#f (void)) (begin (G19645@proc G19651@i (car G19652@lst)) (G19649@loop (+ G19651@i '1) (cdr G19652@lst))))))) (G19649@loop '1 G19646@lst)))) (set! G19601@repl (lambda G19655@x ((lambda (G19658@rec) (begin (set! G19658@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G19660@G19659) (with-exception-handler (lambda (G19662@e) (G19660@G19659 (if '#t (G19599@for-each-with-index (lambda (G19664@i G19665@x) ((lambda (G19668@rtd) (begin (format '#t '"   ~d. ~a" G19664@i (record-type-name G19668@rtd)) ((lambda (G19670@v) ((lambda (G19672@t) (if (eqv? G19672@t '0) (newline) (if (eqv? G19672@t '1) (begin (display '": ") (write ((record-accessor G19668@rtd '0) G19665@x)) (newline)) (begin (display '":\n") ((letrec ((G19673@f (lambda (G19675@i) (if (= G19675@i (vector-length G19670@v)) (void) (begin (display '"       ") (display (vector-ref G19670@v G19675@i)) (display '": ") (write ((record-accessor G19668@rtd G19675@i) G19665@x)) (newline) (G19673@f (+ G19675@i '1))))))) G19673@f) '0))))) (vector-length G19670@v))) (record-type-field-names G19668@rtd)))) (record-rtd G19665@x))) (simple-conditions G19662@e)) (raise G19662@e)))) (lambda () (begin '#f ((lambda (G19677@line) (if (eof-object? G19677@line) (exit) (write (G19615@eval-top-level (call-with-port (open-string-input-port G19677@line) read))))) (get-line (current-input-port)))))))) (newline) (G19658@rec)))) (G19658@rec))) '#f))) (set! G19603@trace-printer (G10463@G10258@make-parameter write)) (set! G19605@command-line (G10463@G10258@make-parameter (get-command-line))) (set! G19607@local-library-path (lambda (G19679@filename) (cons '"." (G11116@G10738@library-path)))) (set! G19609@load/args (lambda (G19681@filename . G19683@args) (begin (apply G19623@load-r6rs-top-level G19681@filename 'load G19683@args) (void)))) (set! G19611@load (lambda (G19685@filename) (begin (apply G19623@load-r6rs-top-level G19685@filename 'load (G19605@command-line)) (void)))) (set! G19613@ironscheme-build (lambda () (G19611@load '"ironscheme-buildscript.ss"))) (set! G19615@eval-top-level (lambda (G19687@x) (G18829@G12431@eval G19687@x (G18849@G12471@interaction-environment)))) (set! G19617@compile-system-libraries (lambda () (G19615@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G19619@compile (lambda (G19689@filename) (G19623@load-r6rs-top-level G19689@filename 'compile))) (set! G19621@compile->closure (lambda (G19691@filename) (G19623@load-r6rs-top-level G19691@filename 'closure))) (set! G19623@load-r6rs-top-level (lambda (G19693@filename G19694@how . G19697@args) ((lambda (G19701@G19699@library-path G19702@G19700@library-path) ((lambda (G19705@swap) (dynamic-wind G19705@swap (lambda () ((lambda (G19707@x*) ((lambda (G19709@t) (if (eqv? G19709@t 'closure) (G18848@G12469@pre-compile-r6rs-top-level G19707@x*) (if (eqv? G19709@t 'load) ((lambda (G19712@G19710@command-line G19713@G19711@command-line) ((lambda (G19716@swap) (dynamic-wind G19716@swap (lambda () ((G18847@G12467@compile-r6rs-top-level G19707@x*))) G19716@swap)) (lambda () ((lambda (G19718@t) (begin (G19712@G19710@command-line G19713@G19711@command-line) (set! G19713@G19711@command-line G19718@t))) (G19712@G19710@command-line))))) G19605@command-line (cons G19693@filename (car G19697@args))) (if (eqv? G19709@t 'compile) (begin (G18847@G12467@compile-r6rs-top-level G19707@x*) (G11120@G10746@serialize-all G10458@G10248@serialize-library G10563@G10477@compile-core-expr)) (void))))) G19694@how)) (with-input-from-file G19693@filename (lambda () ((letrec ((G19720@f (lambda () ((lambda (G19722@x) (if (eof-object? G19722@x) '() (cons G19722@x (G19720@f)))) (G10453@G10238@read-annotated))))) G19720@f)))))) G19705@swap)) (lambda () ((lambda (G19724@t) (begin (G19701@G19699@library-path G19702@G19700@library-path) (set! G19702@G19700@library-path G19724@t))) (G19701@G19699@library-path))))) G11116@G10738@library-path (G19607@local-library-path G19693@filename)))) (set! G19625@write-record (lambda (G19726@record G19727@port) ((lambda (G19730@rtd) (begin (format G19727@port '"    ~a" (record-type-name G19730@rtd)) ((lambda (G19732@v) ((lambda (G19734@t) (if (eqv? G19734@t '0) (newline) (if (eqv? G19734@t '1) (begin (display '": " G19727@port) (write ((record-accessor G19730@rtd '0) G19726@record) G19727@port) (newline G19727@port)) (begin (display '":\n") ((letrec ((G19735@f (lambda (G19737@i) (if (= G19737@i (vector-length G19732@v)) (void) (begin (display '"       " G19727@port) (display (vector-ref G19732@v G19737@i) G19727@port) (display '": " G19727@port) (write ((record-accessor G19730@rtd G19737@i) G19726@record) G19727@port) (newline G19727@port) (G19735@f (+ G19737@i '1))))))) G19735@f) '0))))) (vector-length G19732@v))) (record-type-field-names G19730@rtd)))) (record-rtd G19726@record)))) (begin (set! G19752@G19625@write-record G19625@write-record) (set! G19751@G19623@load-r6rs-top-level G19623@load-r6rs-top-level) (set! G19750@G19621@compile->closure G19621@compile->closure) (set! G19749@G19619@compile G19619@compile) (set! G19748@G19617@compile-system-libraries G19617@compile-system-libraries) (set! G19747@G19615@eval-top-level G19615@eval-top-level) (set! G19746@G19613@ironscheme-build G19613@ironscheme-build) (set! G19745@G19611@load G19611@load) (set! G19744@G19609@load/args G19609@load/args) (set! G19743@G19607@local-library-path G19607@local-library-path) (set! G19742@G19605@command-line G19605@command-line) (set! G19741@G19603@trace-printer G19603@trace-printer) (set! G19740@G19601@repl G19601@repl) (set! G19739@G19599@for-each-with-index G19599@for-each-with-index) (G11121@G10748@current-precompiled-library-loader G10459@G10250@load-serialized-library) (set-symbol-value! 'load G19611@load) (set-symbol-value! 'eval-r6rs G19615@eval-top-level) (set-symbol-value! 'int-env-syms G18822@G12417@interaction-environment-symbols) (set-symbol-value! 'expanded2core G10562@G10475@expanded->core) (set-symbol-value! 'trace-printer G19603@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G11116@G10738@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G19626@args G19627@port) (with-exception-handler (lambda (G19630@c) (begin (display '" Condition components:\n" G19627@port) (G19599@for-each-with-index (lambda (G19632@i G19633@x) ((lambda (G19636@rtd) (begin (format G19627@port '"   ~d. ~a" G19632@i (record-type-name G19636@rtd)) ((lambda (G19638@v) ((lambda (G19640@t) (if (eqv? G19640@t '0) (newline) (if (eqv? G19640@t '1) (begin (display '": ") (write ((record-accessor G19636@rtd '0) G19633@x)) (newline)) (begin (display '":\n") ((letrec ((G19641@f (lambda (G19643@i) (if (= G19643@i (vector-length G19638@v)) (void) (begin (display '"       ") (display (vector-ref G19638@v G19643@i)) (display '": ") (write ((record-accessor G19636@rtd G19643@i) G19633@x)) (newline) (G19641@f (+ G19643@i '1))))))) G19641@f) '0))))) (vector-length G19638@v))) (record-type-field-names G19636@rtd)))) (record-rtd G19633@x))) (simple-conditions G19630@c)))) (lambda () (if (null? G19626@args) (G19601@repl) (G19623@load-r6rs-top-level (car G19626@args) 'load (cdr G19626@args)))))) (G19605@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
