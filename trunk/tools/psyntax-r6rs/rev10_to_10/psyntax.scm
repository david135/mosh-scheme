;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G281a@read-annotated G281c@annotation-stripped G281e@annotation? G2820@annotation-source G2822@annotation-expression G2824@scm->fasl G2826@fasl-save G2828@fasl-load G282a@serialize-library G282c@load-serialized-library G282e@make-record-printer G2830@compile-core G2832@read-library-source-file G2834@make-parameter G28a0@file-options-spec) (begin (set! G281a@read-annotated read) (set! G281c@annotation-stripped (lambda (G28a1@x) (G2822@annotation-expression G28a1@x))) (set! G281e@annotation? (lambda (G28a3@x) (source-info G28a3@x))) (set! G2820@annotation-source (lambda (G28a5@x) (source-info G28a5@x))) (set! G2822@annotation-expression (lambda (G28a7@x) (if (pair? G28a7@x) (cons (car G28a7@x) (cdr G28a7@x)) (display '"line:46\n")))) (set! G2824@scm->fasl (lambda (G28a9@filename) (string-append G28a9@filename '".fasl"))) (set! G2826@fasl-save (lambda (G28ab@filename G28ac@obj) (call-with-port (open-file-output-port G28ab@filename) (lambda (G28af@port) ((symbol-value 'fasl-write!) G28ac@obj G28af@port))))) (set! G2828@fasl-load (lambda (G28b1@filename) (call-with-port (open-file-input-port G28b1@filename) (symbol-value 'fasl-read!)))) (set! G282a@serialize-library (lambda (G28b3@filename G28b4@obj) (begin (format '#t '"serialize-library ~a\n..." G28b3@filename) ((lambda (G28b7@fasl-file) (begin (if (file-exists? G28b7@fasl-file) (delete-file G28b7@fasl-file) (void)) ((call/cc (lambda (G28bb@G28b9) (lambda () (with-exception-handler (lambda (G28bd@c) ((call/cc (lambda (G28bf@G28ba) (G28bb@G28b9 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28b3@filename) (if (file-exists? G28b7@fasl-file) (delete-file G28b7@fasl-file) (void)) '#f) (G28bf@G28ba (lambda () (raise-continuable G28bd@c)))))))))) (lambda () (begin (G2826@fasl-save G28b7@fasl-file G28b4@obj) (display '"OK\n")))))))))) (G2824@scm->fasl G28b3@filename))))) (set! G282c@load-serialized-library (lambda (G28c1@filename G28c2@obj) ((lambda (G28c5@fasl-file) (if (and (file-exists? G28c5@fasl-file) ((symbol-value 'file-newer?) G28c5@fasl-file G28c1@filename)) ((lambda (G28c7@expanded2core) ((lambda (G28c9@code) ((lambda (G28cb@pivot) ((lambda (G28cd@visit) ((lambda (G28cf@visit-proc) ((lambda () (begin (set-car! G28cb@pivot G28cf@visit-proc) ((lambda (G28d1@pivot) ((lambda (G28d3@invoke) ((lambda () (begin (set-car! G28d1@pivot (lambda () (eval-core G28d3@invoke))) (apply G28c2@obj G28c9@code))))) (G28c7@expanded2core (car G28d1@pivot)))) (cdr G28cb@pivot)) '#t)))) (lambda () (eval-core G28cd@visit)))) (G28c7@expanded2core (car G28cb@pivot)))) (cddddr (cddddr G28c9@code)))) (G2828@fasl-load G28c5@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2824@scm->fasl G28c1@filename)))) (set! G282e@make-record-printer (lambda (G28d5@name G28d6@printer) (lambda G28d9@x (begin (display '"record printer") (for-each display G28d9@x))))) (set! G2830@compile-core (lambda G28db@x (apply error 'comile-core '"not implementated" G28db@x))) (set! G2832@read-library-source-file (lambda (G28dd@file-name) (with-input-from-file G28dd@file-name G281a@read-annotated))) (set! G2834@make-parameter (lambda G28ed ((lambda (G28ee) (if (= G28ee '1) (apply (lambda (G28df@x) (G2834@make-parameter G28df@x (lambda (G28e1@x) G28e1@x))) G28ed) (if (= G28ee '2) (apply (lambda (G28e3@x G28e4@fender) ((lambda (G28e7@x) (lambda G28eb ((lambda (G28ec) (if (= G28ec '0) (apply (lambda () G28e7@x) G28eb) (if (= G28ec '1) (apply (lambda (G28e9@v) (set! G28e7@x (G28e4@fender G28e9@v))) G28eb) (error 'apply '"invalid arg count")))) (length G28eb)))) (G28e4@fender G28e3@x))) G28ed) (error 'apply '"invalid arg count")))) (length G28ed)))) (set! G28a0@file-options-spec (lambda (G28ef@x) G28ef@x)) (begin (set! G28ff@G28a0@file-options-spec G28a0@file-options-spec) (set! G28fe@G2834@make-parameter G2834@make-parameter) (set! G28fd@G2832@read-library-source-file G2832@read-library-source-file) (set! G28fc@G2830@compile-core G2830@compile-core) (set! G28fb@G282e@make-record-printer G282e@make-record-printer) (set! G28fa@G282c@load-serialized-library G282c@load-serialized-library) (set! G28f9@G282a@serialize-library G282a@serialize-library) (set! G28f8@G2828@fasl-load G2828@fasl-load) (set! G28f7@G2826@fasl-save G2826@fasl-save) (set! G28f6@G2824@scm->fasl G2824@scm->fasl) (set! G28f5@G2822@annotation-expression G2822@annotation-expression) (set! G28f4@G2820@annotation-source G2820@annotation-source) (set! G28f3@G281e@annotation? G281e@annotation?) (set! G28f2@G281c@annotation-stripped G281c@annotation-stripped) (set! G28f1@G281a@read-annotated G281a@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2904@current-primitive-locations G2906@mutable? G2908@rewriter G290a@expanded->core G290c@compile-core-expr G290e@pretty-print G2910@compile-core-expr-to-port) (begin (set! G2904@current-primitive-locations (G28fe@G2834@make-parameter (lambda (G2911@x) '#f) (lambda (G2913@p) G2913@p))) (set! G2906@mutable? (lambda (G2915@x) (or (pair? G2915@x) (vector? G2915@x) (hashtable? G2915@x)))) (set! G2908@rewriter (lambda (G2917@quote-hack?) ((lambda (G291a@f) (begin (set! G291a@f (lambda (G291b@x) (if (pair? G291b@x) ((lambda (G291d@t) (if (memv G291d@t '(quote)) (if (and G2917@quote-hack? (G2906@mutable? (cadr G291b@x))) ((lambda (G291f@g) (begin (set-symbol-value! G291f@g (cadr G291b@x)) G291f@g)) (gensym)) G291b@x) (if (memv G291d@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2921@x) (cons (car G2921@x) (map G291a@f (cdr G2921@x)))) (cdr G291b@x))) (if (memv G291d@t '(lambda)) (cons* 'lambda (cadr G291b@x) (map G291a@f (cddr G291b@x))) (if (memv G291d@t '(letrec)) ((lambda (G2923@bindings G2924@body*) ((lambda (G2927@lhs* G2928@rhs*) (cons* 'letrec (map list G2927@lhs* (map G291a@f G2928@rhs*)) (map G291a@f G2924@body*))) (map car G2923@bindings) (map cadr G2923@bindings))) (cadr G291b@x) (cddr G291b@x)) (if (memv G291d@t '(letrec*)) ((lambda (G292b@bindings G292c@body*) ((lambda (G292f@lhs* G2930@rhs*) (cons* 'letrec* (map list G292f@lhs* (map G291a@f G2930@rhs*)) (map G291a@f G292c@body*))) (map car G292b@bindings) (map cadr G292b@bindings))) (cadr G291b@x) (cddr G291b@x)) (if (memv G291d@t '(library-letrec*)) ((lambda (G2933@name G2934@x) ((lambda (G2937@bindings G2938@body*) ((lambda (G293b@lhs* G293c@lhs** G293d@rhs*) (cons* 'library-letrec* G2933@name (map list G293b@lhs* G293c@lhs** (map G291a@f G293d@rhs*)) (map G291a@f G2938@body*))) (map car G2937@bindings) (map cadr G2937@bindings) (map caddr G2937@bindings))) (cadr G2934@x) (cddr G2934@x))) (cadr G291b@x) (cdr G291b@x)) (if (memv G291d@t '(begin)) (cons 'begin (map G291a@f (cdr G291b@x))) (if (memv G291d@t '(set!)) (list 'set! (cadr G291b@x) (G291a@f (caddr G291b@x))) (if (memv G291d@t '(primitive)) ((lambda (G2941@op) ((lambda (G2943@t) (if G2943@t ((lambda (G2945@loc) G2945@loc) G2943@t) G2941@op)) ((G2904@current-primitive-locations) G2941@op))) (cadr G291b@x)) (if (memv G291d@t '(define)) G291b@x (if (list? G291b@x) (map G291a@f G291b@x) (error 'rewrite '"invalid form ~s ~s" G291b@x (list? G291b@x)))))))))))))) (car G291b@x)) G291b@x))) G291a@f)) '#f))) (set! G290a@expanded->core (lambda (G2947@x) ((G2908@rewriter '#t) G2947@x))) (set! G290c@compile-core-expr (lambda (G2949@x) ((G2908@rewriter '#f) G2949@x))) (set! G290e@pretty-print write) (set! G2910@compile-core-expr-to-port (lambda (G294b@x G294c@p) (G290e@pretty-print ((G2908@rewriter '#f) G294b@x) G294c@p))) (begin (set! G2955@G2910@compile-core-expr-to-port G2910@compile-core-expr-to-port) (set! G2954@G290e@pretty-print G290e@pretty-print) (set! G2953@G290c@compile-core-expr G290c@compile-core-expr) (set! G2952@G290a@expanded->core G290a@expanded->core) (set! G2951@G2908@rewriter G2908@rewriter) (set! G2950@G2906@mutable? G2906@mutable?) (set! G294f@G2904@current-primitive-locations G2904@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29ab@make-collection G29ad@current-library-collection G29b3@G29ae G29b5@G29b0 G29b7@G29af G29ba@library? G29bc@make-library G29be@library-id G29c0@library-name G29c2@library-version G29c4@library-imp* G29c6@library-vis* G29c8@library-inv* G29ca@library-subst G29cc@library-env G29ce@library-visit-state G29d0@library-invoke-state G29d2@library-visit-code G29d4@library-invoke-code G29d6@library-visible? G29d8@library-source-file-name G29da@set-library-id! G29dc@set-library-name! G29de@set-library-version! G29e0@set-library-imp*! G29e2@set-library-vis*! G29e4@set-library-inv*! G29e6@set-library-subst! G29e8@set-library-env! G29ea@set-library-visit-state! G29ec@set-library-invoke-state! G29ee@set-library-visit-code! G29f0@set-library-invoke-code! G29f2@set-library-visible?! G29f4@set-library-source-file-name! G29f6@rp G29f8@find-dependencies G29fa@find-library-by G29fc@library-path G29fe@library-extensions G2a00@library-name->file-name G2a02@file-locator G2a04@serialize-all G2a06@current-precompiled-library-loader G2a08@try-load-from-file G2a0a@library-loader G2a0c@current-library-expander G2a0e@external-pending-libraries G2a10@find-external-library G2a12@find-library-by-name G2a14@library-exists? G2a16@find-library-by-spec/die G2a18@label->binding-table G2a1a@install-library-record G2a1c@install-library G2a1e@imported-label->binding G2a20@invoke-library G2a22@visit-library G2a24@invoke-library-by-spec G2a26@installed-libraries G2a28@library-spec) (begin (set! G29ab@make-collection (lambda () ((lambda (G2a29@set) ((lambda (G2a2c@set-cons) (begin (set! G2a2c@set-cons (lambda (G2a31@x G2a32@ls) (if (memq G2a31@x G2a32@ls) G2a32@ls (cons G2a31@x G2a32@ls)))) (lambda G2a2f ((lambda (G2a30) (if (= G2a30 '0) (apply (lambda () G2a29@set) G2a2f) (if (= G2a30 '1) (apply (lambda (G2a2d@x) (set! G2a29@set (G2a2c@set-cons G2a2d@x G2a29@set))) G2a2f) (error 'apply '"invalid arg count")))) (length G2a2f))))) '#f)) '()))) (set! G29ad@current-library-collection (G28fe@G2834@make-parameter (G29ab@make-collection) (lambda (G2a35@x) (begin (if (not (procedure? G2a35@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a35@x) (void)) G2a35@x)))) (set! G29b3@G29ae (make-record-type-descriptor 'library '#f 'G29b1 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29b5@G29b0 '#f) (set! G29b7@G29af (make-record-constructor-descriptor G29b3@G29ae '#f G29b5@G29b0)) (set! G29ba@library? (record-predicate G29b3@G29ae)) (set! G29bc@make-library (record-constructor G29b7@G29af)) (set! G29be@library-id (record-accessor G29b3@G29ae '0)) (set! G29c0@library-name (record-accessor G29b3@G29ae '1)) (set! G29c2@library-version (record-accessor G29b3@G29ae '2)) (set! G29c4@library-imp* (record-accessor G29b3@G29ae '3)) (set! G29c6@library-vis* (record-accessor G29b3@G29ae '4)) (set! G29c8@library-inv* (record-accessor G29b3@G29ae '5)) (set! G29ca@library-subst (record-accessor G29b3@G29ae '6)) (set! G29cc@library-env (record-accessor G29b3@G29ae '7)) (set! G29ce@library-visit-state (record-accessor G29b3@G29ae '8)) (set! G29d0@library-invoke-state (record-accessor G29b3@G29ae '9)) (set! G29d2@library-visit-code (record-accessor G29b3@G29ae '10)) (set! G29d4@library-invoke-code (record-accessor G29b3@G29ae '11)) (set! G29d6@library-visible? (record-accessor G29b3@G29ae '12)) (set! G29d8@library-source-file-name (record-accessor G29b3@G29ae '13)) (set! G29da@set-library-id! (record-mutator G29b3@G29ae '0)) (set! G29dc@set-library-name! (record-mutator G29b3@G29ae '1)) (set! G29de@set-library-version! (record-mutator G29b3@G29ae '2)) (set! G29e0@set-library-imp*! (record-mutator G29b3@G29ae '3)) (set! G29e2@set-library-vis*! (record-mutator G29b3@G29ae '4)) (set! G29e4@set-library-inv*! (record-mutator G29b3@G29ae '5)) (set! G29e6@set-library-subst! (record-mutator G29b3@G29ae '6)) (set! G29e8@set-library-env! (record-mutator G29b3@G29ae '7)) (set! G29ea@set-library-visit-state! (record-mutator G29b3@G29ae '8)) (set! G29ec@set-library-invoke-state! (record-mutator G29b3@G29ae '9)) (set! G29ee@set-library-visit-code! (record-mutator G29b3@G29ae '10)) (set! G29f0@set-library-invoke-code! (record-mutator G29b3@G29ae '11)) (set! G29f2@set-library-visible?! (record-mutator G29b3@G29ae '12)) (set! G29f4@set-library-source-file-name! (record-mutator G29b3@G29ae '13)) (set! G29f6@rp (G28fb@G282e@make-record-printer 'library (lambda (G2a37@x G2a38@p G2a39@wr) (begin (if (not (G29ba@library? G2a37@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29c2@library-version G2a37@x)) (G29c0@library-name G2a37@x) (append (G29c0@library-name G2a37@x) (list (G29c2@library-version G2a37@x))))) G2a38@p))))) (set! G29f8@find-dependencies (lambda (G2a3d@ls) (if (null? G2a3d@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29fa@find-library-by (lambda (G2a3f@pred) ((letrec ((G2a41@f (lambda (G2a43@ls) (if (null? G2a43@ls) '#f (if (G2a3f@pred (car G2a43@ls)) (car G2a43@ls) (G2a41@f (cdr G2a43@ls))))))) G2a41@f) ((G29ad@current-library-collection))))) (set! G29fc@library-path (G28fe@G2834@make-parameter '(".") (lambda (G2a45@x) (if (and (list? G2a45@x) (for-all string? G2a45@x)) (map (lambda (G2a47@x) G2a47@x) G2a45@x) (assertion-violation 'library-path '"not a list of strings" G2a45@x))))) (set! G29fe@library-extensions (G28fe@G2834@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a49@x) (if (and (list? G2a49@x) (for-all string? G2a49@x)) (map (lambda (G2a4b@x) G2a4b@x) G2a49@x) (assertion-violation 'library-extensions '"not a list of strings" G2a49@x))))) (set! G2a00@library-name->file-name (lambda (G2a4d@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a51@G2a4f G2a52@G2a50) ((lambda (G2a55@extract G2a56@p) ((lambda (G2a5a@display-hex) (begin (set! G2a5a@display-hex (lambda (G2a63@n) (if (<= '0 G2a63@n '9) (display G2a63@n G2a56@p) (display (integer->char (+ (char->integer '#\A) (- G2a63@n '10))) G2a56@p)))) (begin ((letrec ((G2a5b@f (lambda (G2a5d@ls) (if (not (null? G2a5d@ls)) (begin (display '"/" G2a56@p) (for-each (lambda (G2a5f@c) (if (or (char<=? '#\a G2a5f@c '#\z) (char<=? '#\A G2a5f@c '#\Z) (char<=? '#\0 G2a5f@c '#\9) (memv G2a5f@c '(#\- #\. #\_ #\~))) (display G2a5f@c G2a56@p) (begin (display '"%" G2a56@p) ((lambda (G2a61@n) (begin (G2a5a@display-hex (quotient G2a61@n '16)) (G2a5a@display-hex (remainder G2a61@n '16)))) (char->integer G2a5f@c))))) (string->list (symbol->string (car G2a5d@ls)))) (G2a5b@f (cdr G2a5d@ls))) (void))))) G2a5b@f) G2a4d@x) (G2a55@extract)))) '#f)) G2a52@G2a50 G2a51@G2a4f))))) (set! G2a02@file-locator (G28fe@G2834@make-parameter (lambda (G2a65@x) ((lambda (G2a67@str) ((letrec ((G2a69@f (lambda (G2a6b@ls G2a6c@exts G2a6d@failed-list) (if (null? G2a6b@ls) ((lambda () ((lambda (G2a79@G2a74 G2a7b@G2a76 G2a7d@G2a75 G2a80@G2a73 G2a82@make-library-resolution-condition G2a84@G2a71 G2a86@G2a72 G2a88@library-resolution-condition? G2a8a@condition-library G2a8c@condition-files) (begin (set! G2a79@G2a74 (make-record-type-descriptor '&library-resolution G4c14@G4965@&condition-rtd 'G2a77 '#f '#f '#((immutable library) (immutable files)))) (set! G2a7b@G2a76 '#f) (set! G2a7d@G2a75 (make-record-constructor-descriptor G2a79@G2a74 G4c15@G4967@&condition-rcd G2a7b@G2a76)) (set! G2a80@G2a73 (record-predicate G2a79@G2a74)) (set! G2a82@make-library-resolution-condition (record-constructor G2a7d@G2a75)) (set! G2a84@G2a71 (record-accessor G2a79@G2a74 '0)) (set! G2a86@G2a72 (record-accessor G2a79@G2a74 '1)) (set! G2a88@library-resolution-condition? (condition-predicate G2a79@G2a74)) (set! G2a8a@condition-library (condition-accessor G2a79@G2a74 G2a84@G2a71)) (set! G2a8c@condition-files (condition-accessor G2a79@G2a74 G2a86@G2a72)) (raise (condition (G4c34@G49fd@make-error) (G4c56@G4a57@make-who-condition 'expander) (G4c1a@G49ba@make-message-condition '"cannot locate library in library-path") (G2a82@make-library-resolution-condition G2a65@x (reverse G2a6d@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a6c@exts) (G2a69@f (cdr G2a6b@ls) (G29fe@library-extensions) G2a6d@failed-list) ((lambda (G2a8d@name) (if (file-exists? G2a8d@name) G2a8d@name (G2a69@f G2a6b@ls (cdr G2a6c@exts) (cons G2a8d@name G2a6d@failed-list)))) (string-append (car G2a6b@ls) G2a67@str (car G2a6c@exts)))))))) G2a69@f) (G29fc@library-path) (G29fe@library-extensions) '())) (G2a00@library-name->file-name G2a65@x))) (lambda (G2a8f@f) (if (procedure? G2a8f@f) G2a8f@f (assertion-violation 'file-locator '"not a procedure" G2a8f@f))))) (set! G2a04@serialize-all (lambda (G2a91@serialize G2a92@compile) ((lambda (G2a96@library-desc) (begin (set! G2a96@library-desc (lambda (G2a99@x) (list (G29be@library-id G2a99@x) (G29c0@library-name G2a99@x)))) (for-each (lambda (G2a97@x) (if (G29d8@library-source-file-name G2a97@x) (G2a91@serialize (G29d8@library-source-file-name G2a97@x) (list (G29be@library-id G2a97@x) (G29c0@library-name G2a97@x) (G29c2@library-version G2a97@x) (map G2a96@library-desc (G29c4@library-imp* G2a97@x)) (map G2a96@library-desc (G29c6@library-vis* G2a97@x)) (map G2a96@library-desc (G29c8@library-inv* G2a97@x)) (G29ca@library-subst G2a97@x) (G29cc@library-env G2a97@x) (G2a92@compile (G29d2@library-visit-code G2a97@x)) (G2a92@compile (G29d4@library-invoke-code G2a97@x)) (G29d6@library-visible? G2a97@x))) (void))) ((G29ad@current-library-collection))))) '#f))) (set! G2a06@current-precompiled-library-loader (G28fe@G2834@make-parameter (lambda (G2a9b@filename G2a9c@sk) '#f))) (set! G2a08@try-load-from-file (lambda (G2a9f@filename) ((G2a06@current-precompiled-library-loader) G2a9f@filename (lambda G2ac5 ((lambda (G2ac6) (if (= G2ac6 '11) (apply (lambda (G2aa1@id G2aa2@name G2aa3@ver G2aa4@imp* G2aa5@vis* G2aa6@inv* G2aa7@exp-subst G2aa8@exp-env G2aa9@visit-proc G2aaa@invoke-proc G2aab@visible?) ((letrec ((G2ab7@f (lambda (G2ab9@deps) (if (null? G2ab9@deps) (begin (G2a1c@install-library G2aa1@id G2aa2@name G2aa3@ver G2aa4@imp* G2aa5@vis* G2aa6@inv* G2aa7@exp-subst G2aa8@exp-env G2aa9@visit-proc G2aaa@invoke-proc '#f '#f G2aab@visible? '#f) '#t) ((lambda (G2abb@d) ((lambda (G2abd@label G2abe@dname) ((lambda (G2ac1@l) (if (and (G29ba@library? G2ac1@l) (eq? G2abd@label (G29be@library-id G2ac1@l))) (G2ab7@f (cdr G2ab9@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2aa2@name G2abe@dname G2a9f@filename G2ac1@l G2abd@label (G29be@library-id G2ac1@l)) '#f))) (G2a12@find-library-by-name G2abe@dname))) (car G2abb@d) (cadr G2abb@d))) (car G2ab9@deps)))))) G2ab7@f) (append G2aa4@imp* G2aa5@vis* G2aa6@inv*))) G2ac5) (if (>= G2ac6 '0) (apply (lambda G2ac3@others '#f) G2ac5) (error 'apply '"invalid arg count")))) (length G2ac5)))))) (set! G2a0a@library-loader (G28fe@G2834@make-parameter (lambda (G2ac7@x) ((lambda (G2ac9@file-name) (if (not G2ac9@file-name) (assertion-violation '#f '"cannot file library" G2ac7@x) (or (G2a08@try-load-from-file G2ac9@file-name) ((G2a0c@current-library-expander) (G28fd@G2832@read-library-source-file G2ac9@file-name) G2ac9@file-name (lambda (G2acb@name) (if (not (fast-equal? G2acb@name G2ac7@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2acf@G2acd G2ad0@G2ace) ((lambda (G2ad3@e G2ad4@p) (begin (display '"expected to find library " G2ad4@p) (write G2ac7@x G2ad4@p) (display '" in file " G2ad4@p) (display G2ac9@file-name G2ad4@p) (display '", found " G2ad4@p) (write G2acb@name G2ad4@p) (display '" instead" G2ad4@p) (G2ad3@e))) G2ad0@G2ace G2acf@G2acd)))) (void))))))) ((G2a02@file-locator) G2ac7@x))) (lambda (G2ad7@f) (if (procedure? G2ad7@f) G2ad7@f (assertion-violation 'library-locator '"not a procedure" G2ad7@f))))) (set! G2a0c@current-library-expander (G28fe@G2834@make-parameter (lambda (G2ad9@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2adb@f) (if (procedure? G2adb@f) G2adb@f (assertion-violation 'library-expander '"not a procedure" G2adb@f))))) (set! G2a0e@external-pending-libraries (G28fe@G2834@make-parameter '())) (set! G2a10@find-external-library (lambda (G2add@name) (begin (if (member G2add@name (G2a0e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2add@name) (void)) ((lambda (G2ae1@G2adf G2ae2@G2ae0) ((lambda (G2ae5@swap) (dynamic-wind G2ae5@swap (lambda () (begin ((G2a0a@library-loader) G2add@name) (or (G29fa@find-library-by (lambda (G2ae7@x) (fast-equal? (G29c0@library-name G2ae7@x) G2add@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2add@name)))) G2ae5@swap)) (lambda () ((lambda (G2ae9@t) (begin (G2ae1@G2adf G2ae2@G2ae0) (set! G2ae2@G2ae0 G2ae9@t))) (G2ae1@G2adf))))) G2a0e@external-pending-libraries (cons G2add@name (G2a0e@external-pending-libraries)))))) (set! G2a12@find-library-by-name (lambda (G2aeb@name) (or (G29fa@find-library-by (lambda (G2aed@x) (fast-equal? (G29c0@library-name G2aed@x) G2aeb@name))) (G2a10@find-external-library G2aeb@name)))) (set! G2a14@library-exists? (lambda (G2aef@name) (and (G29fa@find-library-by (lambda (G2af1@x) (fast-equal? (G29c0@library-name G2af1@x) G2aef@name))) '#t))) (set! G2a16@find-library-by-spec/die (lambda (G2af3@spec) ((lambda (G2af5@id) (or (G29fa@find-library-by (lambda (G2af7@x) (eq? G2af5@id (G29be@library-id G2af7@x)))) (assertion-violation '#f '"cannot find library with required spec" G2af3@spec))) (car G2af3@spec)))) (set! G2a18@label->binding-table (make-eq-hashtable)) (set! G2a1a@install-library-record (lambda (G2af9@lib) (begin ((lambda (G2afb@exp-env) (for-each (lambda (G2afd@x) ((lambda (G2aff@label G2b00@binding) ((lambda (G2b03@binding) (hashtable-set! G2a18@label->binding-table G2aff@label G2b03@binding)) ((lambda (G2b05@t) (if (memv G2b05@t '(global)) (cons 'global (cons G2af9@lib (cdr G2b00@binding))) (if (memv G2b05@t '(global-macro)) (cons 'global-macro (cons G2af9@lib (cdr G2b00@binding))) (if (memv G2b05@t '(global-macro!)) (cons 'global-macro! (cons G2af9@lib (cdr G2b00@binding))) G2b00@binding)))) (car G2b00@binding)))) (car G2afd@x) (cdr G2afd@x))) G2afb@exp-env)) (G29cc@library-env G2af9@lib)) ((G29ad@current-library-collection) G2af9@lib)))) (set! G2a1c@install-library (lambda (G2b07@id G2b08@name G2b09@ver G2b0a@imp* G2b0b@vis* G2b0c@inv* G2b0d@exp-subst G2b0e@exp-env G2b0f@visit-proc G2b10@invoke-proc G2b11@visit-code G2b12@invoke-code G2b13@visible? G2b14@source-file-name) ((lambda (G2b23@imp-lib* G2b24@vis-lib* G2b25@inv-lib*) (begin (if (not (and (symbol? G2b07@id) (list? G2b08@name) (list? G2b09@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b07@id G2b08@name G2b09@ver) (void)) (if (G2a14@library-exists? G2b08@name) (assertion-violation 'install-library '"library is already installed" G2b08@name) (void)) ((lambda (G2b29@lib) (G2a1a@install-library-record G2b29@lib)) (G29bc@make-library G2b07@id G2b08@name G2b09@ver G2b23@imp-lib* G2b24@vis-lib* G2b25@inv-lib* G2b0d@exp-subst G2b0e@exp-env G2b0f@visit-proc G2b10@invoke-proc G2b11@visit-code G2b12@invoke-code G2b13@visible? G2b14@source-file-name)))) (map G2a16@find-library-by-spec/die G2b0a@imp*) (map G2a16@find-library-by-spec/die G2b0b@vis*) (map G2a16@find-library-by-spec/die G2b0c@inv*)))) (set! G2a1e@imported-label->binding (lambda (G2b2b@lab) (hashtable-ref G2a18@label->binding-table G2b2b@lab '#f))) (set! G2a20@invoke-library (lambda (G2b2d@lib) ((lambda (G2b2f@invoke) (if (procedure? G2b2f@invoke) (begin (G29ec@set-library-invoke-state! G2b2d@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b2d@lib))) (for-each G2a20@invoke-library (G29c8@library-inv* G2b2d@lib)) (G29ec@set-library-invoke-state! G2b2d@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b2d@lib))) (G2b2f@invoke) (G29ec@set-library-invoke-state! G2b2d@lib '#t)) (void))) (G29d0@library-invoke-state G2b2d@lib)))) (set! G2a22@visit-library (lambda (G2b31@lib) ((lambda (G2b33@visit) (if (procedure? G2b33@visit) (begin (G29ea@set-library-visit-state! G2b31@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b31@lib))) (for-each G2a20@invoke-library (G29c6@library-vis* G2b31@lib)) (G29ea@set-library-visit-state! G2b31@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b31@lib))) (G2b33@visit) (G29ea@set-library-visit-state! G2b31@lib '#t)) (void))) (G29ce@library-visit-state G2b31@lib)))) (set! G2a24@invoke-library-by-spec (lambda (G2b35@spec) (G2a20@invoke-library (G2a16@find-library-by-spec/die G2b35@spec)))) (set! G2a26@installed-libraries (lambda G2b3d ((lambda (G2b3e) (if (= G2b3e '1) (apply (lambda (G2b37@all?) ((letrec ((G2b39@f (lambda (G2b3b@ls) (if (null? G2b3b@ls) '() (if (or G2b37@all? (G29d6@library-visible? (car G2b3b@ls))) (cons (car G2b3b@ls) (G2b39@f (cdr G2b3b@ls))) (G2b39@f (cdr G2b3b@ls))))))) G2b39@f) ((G29ad@current-library-collection)))) G2b3d) (if (= G2b3e '0) (apply (lambda () (G2a26@installed-libraries '#f)) G2b3d) (error 'apply '"invalid arg count")))) (length G2b3d)))) (set! G2a28@library-spec (lambda (G2b3f@x) (begin (if (not (G29ba@library? G2b3f@x)) (assertion-violation 'library-spec '"not a library" G2b3f@x) (void)) (list (G29be@library-id G2b3f@x) (G29c0@library-name G2b3f@x) (G29c2@library-version G2b3f@x))))) (begin (set! G2b7d@G2a28@library-spec G2a28@library-spec) (set! G2b7c@G2a26@installed-libraries G2a26@installed-libraries) (set! G2b7b@G2a24@invoke-library-by-spec G2a24@invoke-library-by-spec) (set! G2b7a@G2a22@visit-library G2a22@visit-library) (set! G2b79@G2a20@invoke-library G2a20@invoke-library) (set! G2b78@G2a1e@imported-label->binding G2a1e@imported-label->binding) (set! G2b77@G2a1c@install-library G2a1c@install-library) (set! G2b76@G2a1a@install-library-record G2a1a@install-library-record) (set! G2b75@G2a18@label->binding-table G2a18@label->binding-table) (set! G2b74@G2a16@find-library-by-spec/die G2a16@find-library-by-spec/die) (set! G2b73@G2a14@library-exists? G2a14@library-exists?) (set! G2b72@G2a12@find-library-by-name G2a12@find-library-by-name) (set! G2b71@G2a10@find-external-library G2a10@find-external-library) (set! G2b70@G2a0e@external-pending-libraries G2a0e@external-pending-libraries) (set! G2b6f@G2a0c@current-library-expander G2a0c@current-library-expander) (set! G2b6e@G2a0a@library-loader G2a0a@library-loader) (set! G2b6d@G2a08@try-load-from-file G2a08@try-load-from-file) (set! G2b6c@G2a06@current-precompiled-library-loader G2a06@current-precompiled-library-loader) (set! G2b6b@G2a04@serialize-all G2a04@serialize-all) (set! G2b6a@G2a02@file-locator G2a02@file-locator) (set! G2b69@G2a00@library-name->file-name G2a00@library-name->file-name) (set! G2b68@G29fe@library-extensions G29fe@library-extensions) (set! G2b67@G29fc@library-path G29fc@library-path) (set! G2b66@G29fa@find-library-by G29fa@find-library-by) (set! G2b65@G29f8@find-dependencies G29f8@find-dependencies) (set! G2b64@G29f6@rp G29f6@rp) (set! G2b63@G29f4@set-library-source-file-name! G29f4@set-library-source-file-name!) (set! G2b62@G29f2@set-library-visible?! G29f2@set-library-visible?!) (set! G2b61@G29f0@set-library-invoke-code! G29f0@set-library-invoke-code!) (set! G2b60@G29ee@set-library-visit-code! G29ee@set-library-visit-code!) (set! G2b5f@G29ec@set-library-invoke-state! G29ec@set-library-invoke-state!) (set! G2b5e@G29ea@set-library-visit-state! G29ea@set-library-visit-state!) (set! G2b5d@G29e8@set-library-env! G29e8@set-library-env!) (set! G2b5c@G29e6@set-library-subst! G29e6@set-library-subst!) (set! G2b5b@G29e4@set-library-inv*! G29e4@set-library-inv*!) (set! G2b5a@G29e2@set-library-vis*! G29e2@set-library-vis*!) (set! G2b59@G29e0@set-library-imp*! G29e0@set-library-imp*!) (set! G2b58@G29de@set-library-version! G29de@set-library-version!) (set! G2b57@G29dc@set-library-name! G29dc@set-library-name!) (set! G2b56@G29da@set-library-id! G29da@set-library-id!) (set! G2b55@G29d8@library-source-file-name G29d8@library-source-file-name) (set! G2b54@G29d6@library-visible? G29d6@library-visible?) (set! G2b53@G29d4@library-invoke-code G29d4@library-invoke-code) (set! G2b52@G29d2@library-visit-code G29d2@library-visit-code) (set! G2b51@G29d0@library-invoke-state G29d0@library-invoke-state) (set! G2b50@G29ce@library-visit-state G29ce@library-visit-state) (set! G2b4f@G29cc@library-env G29cc@library-env) (set! G2b4e@G29ca@library-subst G29ca@library-subst) (set! G2b4d@G29c8@library-inv* G29c8@library-inv*) (set! G2b4c@G29c6@library-vis* G29c6@library-vis*) (set! G2b4b@G29c4@library-imp* G29c4@library-imp*) (set! G2b4a@G29c2@library-version G29c2@library-version) (set! G2b49@G29c0@library-name G29c0@library-name) (set! G2b48@G29be@library-id G29be@library-id) (set! G2b47@G29bc@make-library G29bc@make-library) (set! G2b46@G29ba@library? G29ba@library?) (set! G2b45@G29b7@G29af G29b7@G29af) (set! G2b44@G29b5@G29b0 G29b5@G29b0) (set! G2b43@G29b3@G29ae G29b3@G29ae) (set! G2b42@G29ad@current-library-collection G29ad@current-library-collection) (set! G2b41@G29ab@make-collection G29ab@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b80@build-global-define G2bfa@build-lambda G2bfc@build-case-lambda G2bfe@build-let G2c30@build-sequence G2c32@build-void G2c34@build-letrec G2c36@build-letrec* G2c38@build-library-letrec* G2c3a@build-receive) (begin (set! G2b80@build-global-define (lambda (G2c3b@x) (G2c32@build-void))) (set! G2bfa@build-lambda (lambda (G2c3d@ae G2c3e@vars G2c3f@exp) (list 'lambda G2c3e@vars G2c3f@exp))) (set! G2bfc@build-case-lambda (lambda (G2c43@ae G2c44@vars* G2c45@exp*) ((lambda (G2c4a@build-error G2c4c@build-pred G2c4e@build-apply G2c50@expand-case-lambda) (begin (set! G2c4a@build-error (lambda (G2c7f@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c4c@build-pred (lambda (G2c69@ae G2c6a@n G2c6b@vars) (call-with-values (lambda () ((letrec ((G2c71@f (lambda (G2c73@vars G2c74@count) (if (pair? G2c73@vars) (G2c71@f (cdr G2c73@vars) (+ G2c74@count '1)) (if (null? G2c73@vars) (values G2c74@count '=) (values G2c74@count '>=)))))) G2c71@f) G2c6b@vars '0)) (lambda (G2c77@G2c6f G2c78@G2c70) ((lambda (G2c7b@pred G2c7c@count) (list (list 'primitive G2c7b@pred) G2c6a@n (list 'quote G2c7c@count))) G2c78@G2c70 G2c77@G2c6f))))) (set! G2c4e@build-apply (lambda (G2c61@ae G2c62@g G2c63@vars G2c64@exp) (list '(primitive apply) (G2bfa@build-lambda G2c61@ae G2c63@vars G2c64@exp) G2c62@g))) (set! G2c50@expand-case-lambda (lambda (G2c51@ae G2c52@vars G2c53@exp*) ((lambda (G2c57@g G2c58@n) (list 'lambda G2c57@g (G2bfe@build-let G2c51@ae (list G2c58@n) (list (list '(primitive length) G2c57@g)) ((letrec ((G2c5b@f (lambda (G2c5d@vars* G2c5e@exp*) (if (null? G2c5d@vars*) (G2c4a@build-error G2c51@ae) (list 'if (G2c4c@build-pred G2c51@ae G2c58@n (car G2c5d@vars*)) (G2c4e@build-apply G2c51@ae G2c57@g (car G2c5d@vars*) (car G2c5e@exp*)) (G2c5b@f (cdr G2c5d@vars*) (cdr G2c5e@exp*))))))) G2c5b@f) G2c44@vars* G2c53@exp*)))) (gensym) (gensym)))) (if (= (length G2c45@exp*) '1) (G2bfa@build-lambda G2c43@ae (car G2c44@vars*) (car G2c45@exp*)) (G2c50@expand-case-lambda G2c43@ae G2c44@vars* G2c45@exp*)))) '#f '#f '#f '#f))) (set! G2bfe@build-let (lambda (G2c81@ae G2c82@lhs* G2c83@rhs* G2c84@body) (cons (G2bfa@build-lambda G2c81@ae G2c82@lhs* G2c84@body) G2c83@rhs*))) (set! G2c30@build-sequence (lambda (G2c89@ae G2c8a@exps) ((letrec ((G2c8d@loop (lambda (G2c8f@exps) (if (null? (cdr G2c8f@exps)) (car G2c8f@exps) (if (equal? (car G2c8f@exps) (G2c32@build-void)) (G2c8d@loop (cdr G2c8f@exps)) (cons 'begin G2c8f@exps)))))) G2c8d@loop) G2c8a@exps))) (set! G2c32@build-void (lambda () '((primitive void)))) (set! G2c34@build-letrec (lambda (G2c91@ae G2c92@vars G2c93@val-exps G2c94@body-exp) (if (null? G2c92@vars) G2c94@body-exp (list 'letrec (map list G2c92@vars G2c93@val-exps) G2c94@body-exp)))) (set! G2c36@build-letrec* (lambda (G2c99@ae G2c9a@vars G2c9b@val-exps G2c9c@body-exp) (if (null? G2c9a@vars) G2c9c@body-exp (G2bfe@build-let G2c99@ae G2c9a@vars (map (lambda (G2ca1@x) (list 'quote '#f)) G2c9a@vars) (G2c30@build-sequence G2c99@ae (append (map (lambda (G2ca3@lhs G2ca4@rhs) (list 'set! G2ca3@lhs G2ca4@rhs)) G2c9a@vars G2c9b@val-exps) (list G2c9c@body-exp))))))) (set! G2c38@build-library-letrec* (lambda (G2ca7@ae G2ca8@name G2ca9@vars G2caa@locs G2cab@val-exps G2cac@body-exp) (list 'library-letrec* G2ca8@name (map list G2ca9@vars G2caa@locs G2cab@val-exps) G2cac@body-exp))) (set! G2c3a@build-receive (lambda (G2cb3@ae G2cb4@vars G2cb5@producer G2cb6@body*) (begin (display '"************** in ") (cons 'receive (cons G2cb4@vars (cons G2cb5@producer G2cb6@body*)))))) (begin (set! G2cc4@G2c3a@build-receive G2c3a@build-receive) (set! G2cc3@G2c38@build-library-letrec* G2c38@build-library-letrec*) (set! G2cc2@G2c36@build-letrec* G2c36@build-letrec*) (set! G2cc1@G2c34@build-letrec G2c34@build-letrec) (set! G2cc0@G2c32@build-void G2c32@build-void) (set! G2cbf@G2c30@build-sequence G2c30@build-sequence) (set! G2cbe@G2bfe@build-let G2bfe@build-let) (set! G2cbd@G2bfc@build-case-lambda G2bfc@build-case-lambda) (set! G2cbc@G2bfa@build-lambda G2bfa@build-lambda) (set! G2cbb@G2b80@build-global-define G2b80@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cd3@set-cons G2cd5@set-union G2cda@top-mark* G2cdc@top-marked? G2cde@gen-lexical G2ce0@gen-global G2ce2@gen-label G2ce4@gen-top-level-label G2ce6@gen-define-label+loc G2ce8@gen-define-label G2cee@G2ce9 G2cf0@G2ceb G2cf2@G2cea G2cf5@rib? G2cf7@make-rib G2cf9@rib-sym* G2cfb@rib-mark** G2cfd@rib-label* G2cff@rib-sealed/freq G2d01@rib-cache G2d03@set-rib-sym*! G2d05@set-rib-mark**! G2d07@set-rib-label*! G2d09@set-rib-sealed/freq! G2d0b@set-rib-cache! G2d0d@make-empty-rib G2d0f@make-cache-rib G2d11@find-label G2d13@extend-rib! G2d15@extend-rib/nc! G2d17@make-rib-map G2d19@seal-rib! G2d1b@unseal-rib! G2d1d@make-full-rib G2d23@G2d1e G2d25@G2d20 G2d27@G2d1f G2d2a@stx? G2d2c@make-stx G2d2e@stx-expr G2d30@stx-mark* G2d32@stx-subst* G2d34@stx-ae* G2d36@set-stx-expr! G2d38@set-stx-mark*! G2d3a@set-stx-subst*! G2d3c@set-stx-ae*! G2d3e@rp G2d40@datum->stx G2d42@gen-mark G2d44@anti-mark G2d46@anti-mark? G2d48@join-wraps G2d4a@mkstx G2d4c@add-mark G2d4e@add-subst G2d50@syntax-kind? G2d52@syntax-vector->list G2d54@syntax-pair? G2d56@syntax-vector? G2d58@syntax-null? G2d5a@syntax-list? G2d5c@syntax-car G2d5e@syntax-cdr G2d60@syntax->list G2d62@id? G2d64@id->sym G2d66@same-marks? G2d68@bound-id=? G2d6a@free-id=? G2d6c@valid-bound-ids? G2d6e@distinct-bound-ids? G2d70@bound-id-member? G2d72@self-evaluating? G2d74@strip-annotations G2d76@strip G2d78@stx->datum G2d7a@same-marks*? G2d7c@id->label G2d7e@id->real-label G2d80@label->binding G2d82@make-binding G2d84@binding-type G2d86@binding-value G2d88@raise-unbound-error G2d8a@syntax-type G2d9a@sanitize-binding G2d9c@make-variable-transformer G2d9e@variable-transformer? G2da0@variable-transformer-procedure G2da2@make-eval-transformer G2ee5@parse-define G2ee7@parse-define-syntax G2ee9@scheme-stx-hashtable G2eeb@scheme-stx G2eed@lexical-var G2eef@lexical-mutable? G2ef1@set-lexical-mutable! G2ef3@add-lexical G2ef5@add-lexicals G2ef7@letrec-helper G2ef9@letrec-transformer G2efb@letrec*-transformer G2efd@fluid-let-syntax-transformer G2eff@type-descriptor-transformer G2f01@record-type-descriptor-transformer G2f03@record-constructor-descriptor-transformer G2f05@when-macro G2f07@unless-macro G2f09@if-transformer G2f0b@and-transformer G2f0d@or-transformer G2f0f@case-macro G2f11@quote-transformer G2f13@case-lambda-transformer G2f15@lambda-transformer G2f17@bless G2f19@with-syntax-macro G2f1b@invalid-fmls-error G2f1d@let-macro G2f1f@let-values-macro G2f21@let*-values-macro G2f23@trace-lambda-macro G2f25@trace-define-macro G2f27@trace-define-syntax-macro G2f29@trace-let/rec-syntax G2f2b@trace-let-syntax-macro G2f2d@trace-letrec-syntax-macro G2f2f@guard-macro G2f31@define-enumeration-macro G2f33@time-macro G2f35@delay-macro G2f37@assert-macro G2f39@endianness-macro G2f3b@identifier-syntax-macro G2f3d@do-macro G2f3f@let*-macro G2f41@or-macro G2f43@and-macro G2f45@cond-macro G2f47@do-include G2f49@include-macro G2f4b@include-into-macro G2f4d@syntax-rules-macro G2f4f@quasiquote-macro G2f51@quasisyntax-macro G2f53@define-struct-macro G2f55@define-record-type-macro G2f57@define-condition-type-macro G2f59@incorrect-usage-macro G2f5b@parameterize-macro G2f5d@foreign-call-transformer G2f5f@convert-pattern G2f61@syntax-dispatch G2f63@ellipsis? G2f65@underscore? G2f67@verify-literals G2f69@syntax-case-transformer G2f6b@ellipsis-map G2f6d@syntax-transformer G2f6f@core-macro-transformer G2f71@file-options-macro G2f73@symbol-macro G2f75@macro-transformer G2f77@local-macro-transformer G2f79@do-macro-call G2f7b@chi-macro G2f7d@chi-local-macro G2f7f@chi-global-macro G2f81@chi-expr* G2f83@chi-application G2f85@chi-expr G2f87@chi-set! G2f89@verify-formals G2f8b@chi-lambda-clause G2f8d@chi-lambda-clause* G2f8f@chi-defun G2f91@chi-rhs G2f93@expand-interaction-rhs*/init* G2f95@chi-rhs* G2f97@find-bound=? G2f99@find-dups G2f9b@chi-internal G2f9d@parse-module G2fa3@G2f9e G2fa5@G2fa0 G2fa7@G2f9f G2faa@module-interface? G2fac@make-module-interface G2fae@module-interface-first-mark G2fb0@module-interface-exp-id-vec G2fb2@module-interface-exp-lab-vec G2fb4@set-module-interface-first-mark! G2fb6@set-module-interface-exp-id-vec! G2fb8@set-module-interface-exp-lab-vec! G2fba@module-interface-exp-id* G2fbc@chi-internal-module G2fbe@chi-body* G2fc0@expand-transformer G2fc2@parse-exports G2fc4@parse-library-name G2fc6@parse-library G2fc8@parse-import-spec* G2fca@make-top-rib G2fcc@make-collector G2fce@inv-collector G2fd0@vis-collector G2fd2@imp-collector G2fd4@chi-library-internal G2fd6@chi-interaction-expr G2fd8@library-body-expander G2fda@core-library-expander G2fdc@parse-top-level-program G2fde@top-level-expander G2fe4@G2fdf G2fe6@G2fe1 G2fe8@G2fe0 G2feb@env? G2fed@make-env G2fef@env-names G2ff1@env-labels G2ff3@env-itc G2ff5@set-env-names! G2ff7@set-env-labels! G2ff9@set-env-itc! G2ffb@rp G3001@G2ffc G3003@G2ffe G3005@G2ffd G3008@interaction-env? G300a@make-interaction-env G300c@interaction-env-rib G300e@interaction-env-r G3010@interaction-env-locs G3012@set-interaction-env-rib! G3014@set-interaction-env-r! G3016@set-interaction-env-locs! G3018@rp G301a@interaction-environment-symbols G301c@environment-bindings G301e@parse-binding G3020@environment? G3022@environment-symbols G3024@environment G3026@null-environment G3028@scheme-report-environment G302a@expand G302c@eval G302e@library-expander G3030@boot-library-expand G3032@rev-map-append G3034@build-exports G3036@make-export-subst G3038@make-export-env/macros G303a@generate-temporaries G303c@free-identifier=? G303e@bound-identifier=? G3040@make-source-condition G3042@extract-position-condition G3044@expression-position G3046@assertion-error G3048@syntax-error G304a@syntax-violation* G304c@syntax-violation G304e@identifier? G3050@datum->syntax G3052@syntax->datum G3054@compile-r6rs-top-level G3056@pre-compile-r6rs-top-level G3058@interaction-environment G305a@top-level-context) (begin (set! G2cd3@set-cons (lambda (G305b@x G305c@ls) (if (memq G305b@x G305c@ls) G305c@ls (cons G305b@x G305c@ls)))) (set! G2cd5@set-union (lambda (G305f@ls1 G3060@ls2) (if (null? G305f@ls1) G3060@ls2 (if (memq (car G305f@ls1) G3060@ls2) (G2cd5@set-union (cdr G305f@ls1) G3060@ls2) (cons (car G305f@ls1) (G2cd5@set-union (cdr G305f@ls1) G3060@ls2)))))) (set! G2cda@top-mark* '(top)) (set! G2cdc@top-marked? (lambda (G3063@m*) (memq 'top G3063@m*))) (set! G2cde@gen-lexical (lambda (G3065@sym) (if (symbol? G3065@sym) (gensym G3065@sym) (if (G2d2a@stx? G3065@sym) (G2cde@gen-lexical (G2d64@id->sym G3065@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3065@sym))))) (set! G2ce0@gen-global (lambda (G3067@x) (G2cde@gen-lexical G3067@x))) (set! G2ce2@gen-label (lambda (G3069@_) (gensym))) (set! G2ce4@gen-top-level-label (lambda (G306b@id G306c@rib) ((lambda (G3070@find) (begin (set! G3070@find (lambda (G307b@sym G307c@mark* G307d@sym* G307e@mark** G307f@label*) (and (pair? G307d@sym*) (if (and (eq? G307b@sym (car G307d@sym*)) (G2d66@same-marks? G307c@mark* (car G307e@mark**))) (car G307f@label*) (G3070@find G307b@sym G307c@mark* (cdr G307d@sym*) (cdr G307e@mark**) (cdr G307f@label*)))))) ((lambda (G3071@sym G3072@mark*) ((lambda (G3075@sym*) ((lambda (G3077@t) (if G3077@t ((lambda (G3079@label) (if (G2b78@G2a1e@imported-label->binding G3079@label) (gensym) G3079@label)) G3077@t) (gensym))) (and (memq G3071@sym (G2cf9@rib-sym* G306c@rib)) (G3070@find G3071@sym G3072@mark* G3075@sym* (G2cfb@rib-mark** G306c@rib) (G2cfd@rib-label* G306c@rib))))) (G2cf9@rib-sym* G306c@rib))) (G2d64@id->sym G306b@id) (G2d30@stx-mark* G306b@id)))) '#f))) (set! G2ce6@gen-define-label+loc (lambda (G3085@id G3086@rib) ((lambda (G3089@t) (if G3089@t ((lambda (G308b@env) ((lambda (G308d@label G308e@locs) (values G308d@label ((lambda (G3091@t) (if G3091@t (cdr G3091@t) ((lambda (G3093@loc) (begin (G3016@set-interaction-env-locs! G308b@env (cons (cons G308d@label G3093@loc) G308e@locs)) G3093@loc)) (G2cde@gen-lexical G3085@id)))) (assq G308d@label G308e@locs)))) (G2ce4@gen-top-level-label G3085@id G3086@rib) (G3010@interaction-env-locs G308b@env))) G3089@t) (values (gensym) (G2cde@gen-lexical G3085@id)))) (G305a@top-level-context)))) (set! G2ce8@gen-define-label (lambda (G3095@id G3096@rib) (if (G305a@top-level-context) (G2ce4@gen-top-level-label G3095@id G3096@rib) (gensym)))) (set! G2cee@G2ce9 (make-record-type-descriptor 'rib '#f 'G2cec '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2cf0@G2ceb '#f) (set! G2cf2@G2cea (make-record-constructor-descriptor G2cee@G2ce9 '#f G2cf0@G2ceb)) (set! G2cf5@rib? (record-predicate G2cee@G2ce9)) (set! G2cf7@make-rib (record-constructor G2cf2@G2cea)) (set! G2cf9@rib-sym* (record-accessor G2cee@G2ce9 '0)) (set! G2cfb@rib-mark** (record-accessor G2cee@G2ce9 '1)) (set! G2cfd@rib-label* (record-accessor G2cee@G2ce9 '2)) (set! G2cff@rib-sealed/freq (record-accessor G2cee@G2ce9 '3)) (set! G2d01@rib-cache (record-accessor G2cee@G2ce9 '4)) (set! G2d03@set-rib-sym*! (record-mutator G2cee@G2ce9 '0)) (set! G2d05@set-rib-mark**! (record-mutator G2cee@G2ce9 '1)) (set! G2d07@set-rib-label*! (record-mutator G2cee@G2ce9 '2)) (set! G2d09@set-rib-sealed/freq! (record-mutator G2cee@G2ce9 '3)) (set! G2d0b@set-rib-cache! (record-mutator G2cee@G2ce9 '4)) (set! G2d0d@make-empty-rib (lambda () (G2cf7@make-rib '() '() '() '#f '#f))) (set! G2d0f@make-cache-rib (lambda () (G2cf7@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d11@find-label (lambda (G3099@rib G309a@sym G309b@mark*) ((lambda (G309f@ht) (and G309f@ht ((lambda (G30a1@cv) ((lambda (G30a3@t) (if G30a3@t (cdr G30a3@t) '#f)) (and G30a1@cv (assp (lambda (G30a5@m) (G2d66@same-marks? G309b@mark* G30a5@m)) G30a1@cv)))) (hashtable-ref G309f@ht G309a@sym '#f)))) (G2d01@rib-cache G3099@rib)))) (set! G2d13@extend-rib! (lambda (G30a7@rib G30a8@id G30a9@label) ((lambda (G30ae@find) (begin (set! G30ae@find (lambda (G30bf@sym G30c0@mark* G30c1@sym* G30c2@mark** G30c3@label*) (and (pair? G30c1@sym*) (if (and (eq? G30bf@sym (car G30c1@sym*)) (G2d66@same-marks? G30c0@mark* (car G30c2@mark**))) G30c3@label* (G30ae@find G30bf@sym G30c0@mark* (cdr G30c1@sym*) (cdr G30c2@mark**) (cdr G30c3@label*)))))) (begin (if (G2cff@rib-sealed/freq G30a7@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G30a7@rib) (void)) ((lambda (G30af@sym G30b0@mark*) ((lambda (G30b3@sym*) ((lambda (G30b5@t) (if G30b5@t ((lambda (G30b7@p) (if (not (eq? G30a9@label G30b7@p)) (G304c@syntax-violation '#f '"multiple definitions of identifier" G30a8@id) (void))) G30b5@t) ((lambda (G30b9@t) (if G30b9@t ((lambda (G30bb@p) (if (not (eq? G30a9@label (car G30bb@p))) (if (G305a@top-level-context) (set-car! G30bb@p G30a9@label) (G304c@syntax-violation '#f '"multiple definitions of identifier" G30a8@id)) (void))) G30b9@t) (begin (if (G2d01@rib-cache G30a7@rib) (hashtable-update! (G2d01@rib-cache G30a7@rib) G30af@sym (lambda (G30bd@e) (cons (cons G30b0@mark* G30a9@label) G30bd@e)) '()) (void)) (G2d03@set-rib-sym*! G30a7@rib (cons G30af@sym G30b3@sym*)) (G2d05@set-rib-mark**! G30a7@rib (cons G30b0@mark* (G2cfb@rib-mark** G30a7@rib))) (G2d07@set-rib-label*! G30a7@rib (cons G30a9@label (G2cfd@rib-label* G30a7@rib)))))) (and (memq G30af@sym (G2cf9@rib-sym* G30a7@rib)) (G30ae@find G30af@sym G30b0@mark* G30b3@sym* (G2cfb@rib-mark** G30a7@rib) (G2cfd@rib-label* G30a7@rib)))))) (G2d11@find-label G30a7@rib G30af@sym G30b0@mark*))) (G2cf9@rib-sym* G30a7@rib))) (G2d64@id->sym G30a8@id) (G2d30@stx-mark* G30a8@id))))) '#f))) (set! G2d15@extend-rib/nc! (lambda (G30c9@rib G30ca@id G30cb@label) ((lambda (G30cf@sym G30d0@mark*) ((lambda (G30d3@sym*) (begin (if (G2d01@rib-cache G30c9@rib) (hashtable-update! (G2d01@rib-cache G30c9@rib) G30cf@sym (lambda (G30d5@e) (cons (cons G30d0@mark* G30cb@label) G30d5@e)) '()) (void)) (G2d03@set-rib-sym*! G30c9@rib (cons G30cf@sym G30d3@sym*)) (G2d05@set-rib-mark**! G30c9@rib (cons G30d0@mark* (G2cfb@rib-mark** G30c9@rib))) (G2d07@set-rib-label*! G30c9@rib (cons G30cb@label (G2cfd@rib-label* G30c9@rib))))) (G2cf9@rib-sym* G30c9@rib))) (G2d64@id->sym G30ca@id) (G2d30@stx-mark* G30ca@id)))) (set! G2d17@make-rib-map (lambda (G30d7@sym*) ((lambda (G30d9@ht) ((letrec ((G30db@f (lambda (G30dd@i G30de@sym*) (if (null? G30de@sym*) G30d9@ht (begin (hashtable-update! G30d9@ht (car G30de@sym*) (lambda (G30e1@x) (cons G30dd@i G30e1@x)) '()) (G30db@f (+ G30dd@i '1) (cdr G30de@sym*))))))) G30db@f) '0 G30d7@sym*)) (make-eq-hashtable)))) (set! G2d19@seal-rib! (lambda (G30e3@rib) ((lambda (G30e5@sym*) (if (not (null? G30e5@sym*)) (begin (G2d03@set-rib-sym*! G30e3@rib (list->vector G30e5@sym*)) (G2d05@set-rib-mark**! G30e3@rib (list->vector (G2cfb@rib-mark** G30e3@rib))) (G2d07@set-rib-label*! G30e3@rib (list->vector (G2cfd@rib-label* G30e3@rib))) (G2d09@set-rib-sealed/freq! G30e3@rib (G2d17@make-rib-map G30e5@sym*))) (void))) (G2cf9@rib-sym* G30e3@rib)))) (set! G2d1b@unseal-rib! (lambda (G30e7@rib) (if (G2cff@rib-sealed/freq G30e7@rib) (begin (G2d09@set-rib-sealed/freq! G30e7@rib '#f) (G2d03@set-rib-sym*! G30e7@rib (vector->list (G2cf9@rib-sym* G30e7@rib))) (G2d05@set-rib-mark**! G30e7@rib (vector->list (G2cfb@rib-mark** G30e7@rib))) (G2d07@set-rib-label*! G30e7@rib (vector->list (G2cfd@rib-label* G30e7@rib)))) (void)))) (set! G2d1d@make-full-rib (lambda (G30e9@id* G30ea@label*) ((lambda (G30ed@r) (begin (G2d19@seal-rib! G30ed@r) G30ed@r)) (G2cf7@make-rib (map G2d64@id->sym G30e9@id*) (map G2d30@stx-mark* G30e9@id*) G30ea@label* '#f '#f)))) (set! G2d23@G2d1e (make-record-type-descriptor 'stx '#f 'G2d21 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d25@G2d20 '#f) (set! G2d27@G2d1f (make-record-constructor-descriptor G2d23@G2d1e '#f G2d25@G2d20)) (set! G2d2a@stx? (record-predicate G2d23@G2d1e)) (set! G2d2c@make-stx (record-constructor G2d27@G2d1f)) (set! G2d2e@stx-expr (record-accessor G2d23@G2d1e '0)) (set! G2d30@stx-mark* (record-accessor G2d23@G2d1e '1)) (set! G2d32@stx-subst* (record-accessor G2d23@G2d1e '2)) (set! G2d34@stx-ae* (record-accessor G2d23@G2d1e '3)) (set! G2d36@set-stx-expr! (record-mutator G2d23@G2d1e '0)) (set! G2d38@set-stx-mark*! (record-mutator G2d23@G2d1e '1)) (set! G2d3a@set-stx-subst*! (record-mutator G2d23@G2d1e '2)) (set! G2d3c@set-stx-ae*! (record-mutator G2d23@G2d1e '3)) (set! G2d3e@rp (G28fb@G282e@make-record-printer 'stx (lambda (G30ef@x G30f0@p G30f1@wr) (begin (display '"#<syntax " G30f0@p) (write (G2d78@stx->datum G30ef@x) G30f0@p) ((lambda (G30f5@expr) (if (G28f3@G281e@annotation? G30f5@expr) ((lambda (G30f7@src) (if (pair? G30f7@src) (begin (display '" [" G30f0@p) (display (cdr G30f7@src) G30f0@p) (display '" of " G30f0@p) (display (car G30f7@src) G30f0@p) (display '"]" G30f0@p)) (void))) (G28f4@G2820@annotation-source G30f5@expr)) (void))) (G2d2e@stx-expr G30ef@x)) (display '">" G30f0@p))))) (set! G2d40@datum->stx (lambda (G30f9@id G30fa@datum) (G2d2c@make-stx G30fa@datum (G2d30@stx-mark* G30f9@id) (G2d32@stx-subst* G30f9@id) (G2d34@stx-ae* G30f9@id)))) (set! G2d42@gen-mark (lambda () (string '#\m))) (set! G2d44@anti-mark '#f) (set! G2d46@anti-mark? not) (set! G2d48@join-wraps (lambda (G30fd@m1* G30fe@s1* G30ff@ae1* G3100@e) ((lambda (G3106@cancel) (begin (set! G3106@cancel (lambda (G310d@ls1 G310e@ls2) ((letrec ((G3111@f (lambda (G3113@x G3114@ls1) (if (null? G3114@ls1) (cdr G310e@ls2) (cons G3113@x (G3111@f (car G3114@ls1) (cdr G3114@ls1))))))) G3111@f) (car G310d@ls1) (cdr G310d@ls1)))) ((lambda (G3107@m2* G3108@s2* G3109@ae2*) (if (and (not (null? G30fd@m1*)) (not (null? G3107@m2*)) (G2d46@anti-mark? (car G3107@m2*))) (values (G3106@cancel G30fd@m1* G3107@m2*) (G3106@cancel G30fe@s1* G3108@s2*) (G3106@cancel G30ff@ae1* G3109@ae2*)) (values (append G30fd@m1* G3107@m2*) (append G30fe@s1* G3108@s2*) (append G30ff@ae1* G3109@ae2*)))) (G2d30@stx-mark* G3100@e) (G2d32@stx-subst* G3100@e) (G2d34@stx-ae* G3100@e)))) '#f))) (set! G2d4a@mkstx (lambda (G3117@e G3118@m* G3119@s* G311a@ae*) (if (and (G2d2a@stx? G3117@e) (not (G2cdc@top-marked? G3118@m*))) (call-with-values (lambda () (G2d48@join-wraps G3118@m* G3119@s* G311a@ae* G3117@e)) (lambda (G3122@G311f G3123@G3120 G3124@G3121) ((lambda (G3128@ae* G3129@s* G312a@m*) (G2d2c@make-stx (G2d2e@stx-expr G3117@e) G312a@m* G3129@s* G3128@ae*)) G3124@G3121 G3123@G3120 G3122@G311f))) (G2d2c@make-stx G3117@e G3118@m* G3119@s* G311a@ae*)))) (set! G2d4c@add-mark (lambda (G312e@m G312f@e G3130@ae) (G2d4a@mkstx G312f@e (list G312e@m) '(shift) (list G3130@ae)))) (set! G2d4e@add-subst (lambda (G3134@subst G3135@e) (G2d4a@mkstx G3135@e '() (list G3134@subst) '()))) (set! G2d50@syntax-kind? (lambda (G3138@x G3139@p?) (if (G2d2a@stx? G3138@x) (G2d50@syntax-kind? (G2d2e@stx-expr G3138@x) G3139@p?) (if (G28f3@G281e@annotation? G3138@x) (G2d50@syntax-kind? (G28f5@G2822@annotation-expression G3138@x) G3139@p?) (G3139@p? G3138@x))))) (set! G2d52@syntax-vector->list (lambda (G313c@x) (if (G2d2a@stx? G313c@x) ((lambda (G313e@ls G313f@m* G3140@s* G3141@ae*) (map (lambda (G3146@x) (G2d4a@mkstx G3146@x G313f@m* G3140@s* G3141@ae*)) G313e@ls)) (G2d52@syntax-vector->list (G2d2e@stx-expr G313c@x)) (G2d30@stx-mark* G313c@x) (G2d32@stx-subst* G313c@x) (G2d34@stx-ae* G313c@x)) (if (G28f3@G281e@annotation? G313c@x) (G2d52@syntax-vector->list (G28f5@G2822@annotation-expression G313c@x)) (if (vector? G313c@x) (vector->list G313c@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G313c@x)))))) (set! G2d54@syntax-pair? (lambda (G3148@x) (G2d50@syntax-kind? G3148@x pair?))) (set! G2d56@syntax-vector? (lambda (G314a@x) (G2d50@syntax-kind? G314a@x vector?))) (set! G2d58@syntax-null? (lambda (G314c@x) (G2d50@syntax-kind? G314c@x null?))) (set! G2d5a@syntax-list? (lambda (G314e@x) (or (G2d58@syntax-null? G314e@x) (and (G2d54@syntax-pair? G314e@x) (G2d5a@syntax-list? (G2d5e@syntax-cdr G314e@x)))))) (set! G2d5c@syntax-car (lambda (G3150@x) (if (G2d2a@stx? G3150@x) (G2d4a@mkstx (G2d5c@syntax-car (G2d2e@stx-expr G3150@x)) (G2d30@stx-mark* G3150@x) (G2d32@stx-subst* G3150@x) (G2d34@stx-ae* G3150@x)) (if (G28f3@G281e@annotation? G3150@x) (G2d5c@syntax-car (G28f5@G2822@annotation-expression G3150@x)) (if (pair? G3150@x) (car G3150@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3150@x)))))) (set! G2d5e@syntax-cdr (lambda (G3152@x) (if (G2d2a@stx? G3152@x) (G2d4a@mkstx (G2d5e@syntax-cdr (G2d2e@stx-expr G3152@x)) (G2d30@stx-mark* G3152@x) (G2d32@stx-subst* G3152@x) (G2d34@stx-ae* G3152@x)) (if (G28f3@G281e@annotation? G3152@x) (G2d5e@syntax-cdr (G28f5@G2822@annotation-expression G3152@x)) (if (pair? G3152@x) (cdr G3152@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3152@x)))))) (set! G2d60@syntax->list (lambda (G3154@x) (if (G2d54@syntax-pair? G3154@x) (cons (G2d5c@syntax-car G3154@x) (G2d60@syntax->list (G2d5e@syntax-cdr G3154@x))) (if (G2d58@syntax-null? G3154@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3154@x))))) (set! G2d62@id? (lambda (G3156@x) (and (G2d2a@stx? G3156@x) ((lambda (G3158@expr) (symbol? (if (G28f3@G281e@annotation? G3158@expr) (G28f2@G281c@annotation-stripped G3158@expr) G3158@expr))) (G2d2e@stx-expr G3156@x))))) (set! G2d64@id->sym (lambda (G315a@x) (begin (if (not (G2d2a@stx? G315a@x)) (error 'id->sym '"BUG in ikarus: not an id" G315a@x) (void)) ((lambda (G315c@expr) ((lambda (G315e@sym) (if (symbol? G315e@sym) G315e@sym (error 'id->sym '"BUG in ikarus: not an id" G315a@x))) (if (G28f3@G281e@annotation? G315c@expr) (G28f2@G281c@annotation-stripped G315c@expr) G315c@expr))) (G2d2e@stx-expr G315a@x))))) (set! G2d66@same-marks? (lambda (G3160@x G3161@y) (or (and (null? G3160@x) (null? G3161@y)) (and (pair? G3160@x) (pair? G3161@y) (eq? (car G3160@x) (car G3161@y)) (G2d66@same-marks? (cdr G3160@x) (cdr G3161@y)))))) (set! G2d68@bound-id=? (lambda (G3164@x G3165@y) (and (eq? (G2d64@id->sym G3164@x) (G2d64@id->sym G3165@y)) (G2d66@same-marks? (G2d30@stx-mark* G3164@x) (G2d30@stx-mark* G3165@y))))) (set! G2d6a@free-id=? (lambda (G3168@i G3169@j) ((lambda (G316c@t0 G316d@t1) (if (or G316c@t0 G316d@t1) (eq? G316c@t0 G316d@t1) (eq? (G2d64@id->sym G3168@i) (G2d64@id->sym G3169@j)))) (G2d7e@id->real-label G3168@i) (G2d7e@id->real-label G3169@j)))) (set! G2d6c@valid-bound-ids? (lambda (G3170@id*) (and (for-all G2d62@id? G3170@id*) (G2d6e@distinct-bound-ids? G3170@id*)))) (set! G2d6e@distinct-bound-ids? (lambda (G3172@id*) (or (null? G3172@id*) (and (not (G2d70@bound-id-member? (car G3172@id*) (cdr G3172@id*))) (G2d6e@distinct-bound-ids? (cdr G3172@id*)))))) (set! G2d70@bound-id-member? (lambda (G3174@id G3175@id*) (and (pair? G3175@id*) (or (G2d68@bound-id=? G3174@id (car G3175@id*)) (G2d70@bound-id-member? G3174@id (cdr G3175@id*)))))) (set! G2d72@self-evaluating? (lambda (G3178@x) (or (number? G3178@x) (string? G3178@x) (char? G3178@x) (boolean? G3178@x) (regexp? G3178@x) (bytevector? G3178@x)))) (set! G2d74@strip-annotations (lambda (G317a@x) (if (pair? G317a@x) (cons (G2d74@strip-annotations (car G317a@x)) (G2d74@strip-annotations (cdr G317a@x))) (if (vector? G317a@x) (vector-map G2d74@strip-annotations G317a@x) (if (G28f3@G281e@annotation? G317a@x) (G28f2@G281c@annotation-stripped G317a@x) G317a@x))))) (set! G2d76@strip (lambda (G317c@x G317d@m*) (if (G2cdc@top-marked? G317d@m*) (if (or (G28f3@G281e@annotation? G317c@x) (and (pair? G317c@x) (G28f3@G281e@annotation? (car G317c@x))) (and (vector? G317c@x) (> (vector-length G317c@x) '0) (G28f3@G281e@annotation? (vector-ref G317c@x '0)))) (G2d74@strip-annotations G317c@x) G317c@x) ((letrec ((G3180@f (lambda (G3182@x) (if (G2d2a@stx? G3182@x) (G2d76@strip (G2d2e@stx-expr G3182@x) (G2d30@stx-mark* G3182@x)) (if (G28f3@G281e@annotation? G3182@x) (G28f2@G281c@annotation-stripped G3182@x) (if (pair? G3182@x) ((lambda (G3184@a G3185@d) (if (and (eq? G3184@a (car G3182@x)) (eq? G3185@d (cdr G3182@x))) G3182@x (cons G3184@a G3185@d))) (G3180@f (car G3182@x)) (G3180@f (cdr G3182@x))) (if (vector? G3182@x) ((lambda (G3188@old) ((lambda (G318a@new) (if (for-all eq? G3188@old G318a@new) G3182@x (list->vector G318a@new))) (map G3180@f G3188@old))) (vector->list G3182@x)) G3182@x))))))) G3180@f) G317c@x)))) (set! G2d78@stx->datum (lambda (G318c@x) (G2d76@strip G318c@x '()))) (set! G2d7a@same-marks*? (lambda (G318e@mark* G318f@mark** G3190@si) (if (null? G3190@si) '#f (if (G2d66@same-marks? G318e@mark* (vector-ref G318f@mark** (car G3190@si))) (car G3190@si) (G2d7a@same-marks*? G318e@mark* G318f@mark** (cdr G3190@si)))))) (set! G2d7c@id->label (lambda (G3194@id) (or (G2d7e@id->real-label G3194@id) ((lambda (G3196@t) (if G3196@t ((lambda (G3198@env) ((lambda (G319a@rib) (call-with-values (lambda () (G2ce6@gen-define-label+loc G3194@id G319a@rib)) (lambda (G319e@G319c G319f@G319d) ((lambda (G31a2@loc_ G31a3@lab) (begin (G2d13@extend-rib! G319a@rib G3194@id G31a3@lab) G31a3@lab)) G319f@G319d G319e@G319c)))) (G300c@interaction-env-rib G3198@env))) G3196@t) '#f)) (G305a@top-level-context))))) (set! G2d7e@id->real-label (lambda (G31a6@id) ((lambda (G31a8@sym) ((letrec ((G31aa@search (lambda (G31ac@subst* G31ad@mark*) (if (null? G31ac@subst*) '#f (if (eq? (car G31ac@subst*) 'shift) (G31aa@search (cdr G31ac@subst*) (cdr G31ad@mark*)) ((lambda (G31b0@rib) ((lambda (G31b2@t) (if G31b2@t ((lambda (G31b4@ht) ((lambda (G31b6@si) ((lambda (G31b8@i) (if G31b8@i (vector-ref (G2cfd@rib-label* G31b0@rib) G31b8@i) (G31aa@search (cdr G31ac@subst*) G31ad@mark*))) (and G31b6@si (G2d7a@same-marks*? G31ad@mark* (G2cfb@rib-mark** G31b0@rib) (reverse G31b6@si))))) (hashtable-ref G31b4@ht G31a8@sym '#f))) G31b2@t) (or (G2d11@find-label G31b0@rib G31a8@sym G31ad@mark*) ((letrec ((G31ba@f (lambda (G31bc@sym* G31bd@mark** G31be@label*) (if (null? G31bc@sym*) (G31aa@search (cdr G31ac@subst*) G31ad@mark*) (if (and (eq? (car G31bc@sym*) G31a8@sym) (G2d66@same-marks? (car G31bd@mark**) G31ad@mark*)) (car G31be@label*) (G31ba@f (cdr G31bc@sym*) (cdr G31bd@mark**) (cdr G31be@label*))))))) G31ba@f) (G2cf9@rib-sym* G31b0@rib) (G2cfb@rib-mark** G31b0@rib) (G2cfd@rib-label* G31b0@rib))))) (G2cff@rib-sealed/freq G31b0@rib))) (car G31ac@subst*))))))) G31aa@search) (G2d32@stx-subst* G31a6@id) (G2d30@stx-mark* G31a6@id))) (G2d64@id->sym G31a6@id)))) (set! G2d80@label->binding (lambda (G31c2@x G31c3@r) ((lambda (G31c6@t) (if G31c6@t ((lambda (G31c8@b) (if (and (pair? G31c8@b) (eq? (car G31c8@b) '$core-rtd)) (cons '$rtd (map G2f17@bless (cdr G31c8@b))) (if (and (pair? G31c8@b) (eq? (car G31c8@b) 'global-rtd)) ((lambda (G31ca@lib G31cb@loc) (cons '$rtd (symbol-value G31cb@loc))) (cadr G31c8@b) (cddr G31c8@b)) G31c8@b))) G31c6@t) ((lambda (G31ce@t) (if G31ce@t (cdr G31ce@t) ((lambda (G31d0@t) (if G31d0@t ((lambda (G31d2@env) ((lambda (G31d4@t) (if G31d4@t ((lambda (G31d6@p) (cons* 'lexical (cdr G31d6@p) '#f)) G31d4@t) '(displaced-lexical . #f))) (assq G31c2@x (G3010@interaction-env-locs G31d2@env)))) G31d0@t) '(displaced-lexical . #f))) (G305a@top-level-context)))) (assq G31c2@x G31c3@r)))) (G2b78@G2a1e@imported-label->binding G31c2@x)))) (set! G2d82@make-binding cons) (set! G2d84@binding-type car) (set! G2d86@binding-value cdr) (set! G2d88@raise-unbound-error (lambda (G31d8@id) (G304a@syntax-violation* '#f '"unbound identifier" G31d8@id (G4c84@G4ace@make-undefined-violation)))) (set! G2d8a@syntax-type (lambda (G31da@e G31db@r) (if (G2d62@id? G31da@e) ((lambda (G31de@id) ((lambda (G31e0@label) ((lambda (G31e2@b) ((lambda (G31e4@type) ((lambda () (begin (if (not G31e0@label) (G2d88@raise-unbound-error G31de@id) (void)) ((lambda (G31e6@t) (if (memv G31e6@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31e4@type (G2d86@binding-value G31e2@b) G31de@id) (values 'other '#f '#f))) G31e4@type))))) (G2d84@binding-type G31e2@b))) (G2d80@label->binding G31e0@label G31db@r))) (G2d7c@id->label G31de@id))) G31da@e) (if (G2d54@syntax-pair? G31da@e) ((lambda (G31e8@id) (if (G2d62@id? G31e8@id) ((lambda (G31ea@label) ((lambda (G31ec@b) ((lambda (G31ee@type) ((lambda () (begin (if (not G31ea@label) (G2d88@raise-unbound-error G31e8@id) (void)) ((lambda (G31f0@t) (if (memv G31f0@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31ee@type (G2d86@binding-value G31ec@b) G31e8@id) (values 'call '#f '#f))) G31ee@type))))) (G2d84@binding-type G31ec@b))) (G2d80@label->binding G31ea@label G31db@r))) (G2d7c@id->label G31e8@id)) (values 'call '#f '#f))) (G2d5c@syntax-car G31da@e)) ((lambda (G31f2@d) (if (G2d72@self-evaluating? G31f2@d) (values 'constant G31f2@d '#f) (values 'other '#f '#f))) (G2d78@stx->datum G31da@e)))))) (set! G2d9a@sanitize-binding (lambda (G31f4@x G31f5@src) (if (procedure? G31f4@x) (cons* 'local-macro G31f4@x G31f5@src) (if (and (pair? G31f4@x) (eq? (car G31f4@x) 'macro!) (procedure? (cdr G31f4@x))) (cons* 'local-macro! (cdr G31f4@x) G31f5@src) (if (and (pair? G31f4@x) (eq? (car G31f4@x) '$rtd)) G31f4@x (assertion-violation 'expand '"invalid transformer" G31f4@x)))))) (set! G2d9c@make-variable-transformer (lambda (G31f8@x) (if (procedure? G31f8@x) (cons 'macro! G31f8@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31f8@x)))) (set! G2d9e@variable-transformer? (lambda (G31fa@x) (and (pair? G31fa@x) (eq? (car G31fa@x) 'macro!) (procedure? (cdr G31fa@x))))) (set! G2da0@variable-transformer-procedure (lambda (G31fc@x) (if (G2d9e@variable-transformer? G31fc@x) (cdr G31fc@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31fc@x)))) (set! G2da2@make-eval-transformer (lambda (G31fe@x) (G2d9a@sanitize-binding (eval-core (G2952@G290a@expanded->core G31fe@x)) G31fe@x))) (set! G2ee5@parse-define (lambda (G3200@x) ((lambda (G3202@t) ((lambda (G3204@ls/false) (if (and G3204@ls/false (apply (lambda (G3206@id G3207@fmls G3208@b G3209@b*) (G2d62@id? G3206@id)) G3204@ls/false)) (apply (lambda (G320e@id G320f@fmls G3210@b G3211@b*) (begin (G2f89@verify-formals G320f@fmls G3200@x) (values G320e@id (cons 'defun (cons G320f@fmls (cons G3210@b G3211@b*)))))) G3204@ls/false) ((lambda (G3216@t) ((lambda (G3218@ls/false) (if (and G3218@ls/false (apply (lambda (G321a@id G321b@val) (G2d62@id? G321a@id)) G3218@ls/false)) (apply (lambda (G321e@id G321f@val) (values G321e@id (cons 'expr G321f@val))) G3218@ls/false) ((lambda (G3222@t) ((lambda (G3224@ls/false) (if (and G3224@ls/false (apply (lambda (G3226@id) (G2d62@id? G3226@id)) G3224@ls/false)) (apply (lambda (G3228@id) (values G3228@id (cons 'expr (G2f17@bless '(void))))) G3224@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3222@t))) (G2f61@syntax-dispatch G3222@t '(_ any)))) G3216@t))) (G2f61@syntax-dispatch G3216@t '(_ any any)))) G3202@t))) (G2f61@syntax-dispatch G3202@t '(_ (any . any) any . each-any)))) G3200@x))) (set! G2ee7@parse-define-syntax (lambda (G322a@x) ((lambda (G322c@t) ((lambda (G322e@ls/false) (if (and G322e@ls/false (apply (lambda (G3230@id G3231@val) (G2d62@id? G3230@id)) G322e@ls/false)) (apply (lambda (G3234@id G3235@val) (values G3234@id G3235@val)) G322e@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G322c@t))) (G2f61@syntax-dispatch G322c@t '(_ any any)))) G322a@x))) (set! G2ee9@scheme-stx-hashtable (make-eq-hashtable)) (set! G2eeb@scheme-stx (lambda (G3238@sym) (or (hashtable-ref G2ee9@scheme-stx-hashtable G3238@sym '#f) ((lambda (G323a@subst) ((lambda (G323c@stx) ((lambda (G323e@stx) ((lambda () (begin (hashtable-set! G2ee9@scheme-stx-hashtable G3238@sym G323e@stx) G323e@stx)))) ((lambda (G3240@t) (if G3240@t ((lambda (G3242@x) ((lambda (G3244@name G3245@label) (G2d4e@add-subst (G2cf7@make-rib (list G3244@name) (list G2cda@top-mark*) (list G3245@label) '#f '#f) G323c@stx)) (car G3242@x) (cdr G3242@x))) G3240@t) G323c@stx)) (assq G3238@sym G323a@subst)))) (G2d2c@make-stx G3238@sym G2cda@top-mark* '() '()))) (G2b4e@G29ca@library-subst (G2b72@G2a12@find-library-by-name '(psyntax system $all))))))) (set! G2eed@lexical-var car) (set! G2eef@lexical-mutable? cdr) (set! G2ef1@set-lexical-mutable! set-cdr!) (set! G2ef3@add-lexical (lambda (G3248@lab G3249@lex G324a@r) (cons (cons* G3248@lab 'lexical G3249@lex '#f) G324a@r))) (set! G2ef5@add-lexicals (lambda (G324e@lab* G324f@lex* G3250@r) (if (null? G324e@lab*) G3250@r (G2ef5@add-lexicals (cdr G324e@lab*) (cdr G324f@lex*) (G2ef3@add-lexical (car G324e@lab*) (car G324f@lex*) G3250@r))))) (set! G2ef7@letrec-helper (lambda (G3254@e G3255@r G3256@mr G3257@build) ((lambda (G325c@t) ((lambda (G325e@ls/false) (if G325e@ls/false (apply (lambda (G3260@lhs* G3261@rhs* G3262@b G3263@b*) (if (not (G2d6c@valid-bound-ids? G3260@lhs*)) (G2f1b@invalid-fmls-error G3254@e G3260@lhs*) ((lambda (G3268@lex* G3269@lab*) ((lambda (G326c@rib G326d@r) ((lambda (G3270@body G3271@rhs*) (G3257@build '#f G3268@lex* G3271@rhs* G3270@body)) (G2f9b@chi-internal (G2d4e@add-subst G326c@rib (cons G3262@b G3263@b*)) G326d@r G3256@mr) (G2f81@chi-expr* (map (lambda (G3274@x) (G2d4e@add-subst G326c@rib G3274@x)) G3261@rhs*) G326d@r G3256@mr))) (G2d1d@make-full-rib G3260@lhs* G3269@lab*) (G2ef5@add-lexicals G3269@lab* G3268@lex* G3255@r))) (map G2cde@gen-lexical G3260@lhs*) (map G2ce2@gen-label G3260@lhs*)))) G325e@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G325c@t))) (G2f61@syntax-dispatch G325c@t '(_ #(each (any any)) any . each-any)))) G3254@e))) (set! G2ef9@letrec-transformer (lambda (G3276@e G3277@r G3278@mr) (G2ef7@letrec-helper G3276@e G3277@r G3278@mr G2cc1@G2c34@build-letrec))) (set! G2efb@letrec*-transformer (lambda (G327c@e G327d@r G327e@mr) (G2ef7@letrec-helper G327c@e G327d@r G327e@mr G2cc2@G2c36@build-letrec*))) (set! G2efd@fluid-let-syntax-transformer (lambda (G3282@e G3283@r G3284@mr) ((lambda (G3289@lookup) (begin (set! G3289@lookup (lambda (G329c@x) (or (G2d7c@id->label G329c@x) (G304c@syntax-violation '#f '"unbound identifier" G3282@e G329c@x)))) ((lambda (G328a@t) ((lambda (G328c@ls/false) (if G328c@ls/false (apply (lambda (G328e@lhs* G328f@rhs* G3290@b G3291@b*) (if (not (G2d6c@valid-bound-ids? G328e@lhs*)) (G2f1b@invalid-fmls-error G3282@e G328e@lhs*) ((lambda (G3296@lab* G3297@rhs*) (G2f9b@chi-internal (cons G3290@b G3291@b*) (append (map cons G3296@lab* G3297@rhs*) G3283@r) (append (map cons G3296@lab* G3297@rhs*) G3284@mr))) (map G3289@lookup G328e@lhs*) (map (lambda (G329a@x) (G2da2@make-eval-transformer (G2fc0@expand-transformer G329a@x G3284@mr))) G328f@rhs*)))) G328c@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G328a@t))) (G2f61@syntax-dispatch G328a@t '(_ #(each (any any)) any . each-any)))) G3282@e))) '#f))) (set! G2eff@type-descriptor-transformer (lambda (G329e@e G329f@r G32a0@mr) ((lambda (G32a4@t) ((lambda (G32a6@ls/false) (if (and G32a6@ls/false (apply (lambda (G32a8@id) (G2d62@id? G32a8@id)) G32a6@ls/false)) (apply (lambda (G32aa@id) ((lambda (G32ac@lab) ((lambda (G32ae@b) ((lambda (G32b0@type) ((lambda () (begin (if (not G32ac@lab) (G2d88@raise-unbound-error G32aa@id) (void)) (if (not (and (eq? G32b0@type '$rtd) (not (list? (G2d86@binding-value G32ae@b))))) (G304c@syntax-violation '#f '"not a record type" G329e@e) (void)) (list 'quote (G2d86@binding-value G32ae@b)))))) (G2d84@binding-type G32ae@b))) (G2d80@label->binding G32ac@lab G329f@r))) (G2d7c@id->label G32aa@id))) G32a6@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G32a4@t))) (G2f61@syntax-dispatch G32a4@t '(_ any)))) G329e@e))) (set! G2f01@record-type-descriptor-transformer (lambda (G32b2@e G32b3@r G32b4@mr) ((lambda (G32b8@t) ((lambda (G32ba@ls/false) (if (and G32ba@ls/false (apply (lambda (G32bc@id) (G2d62@id? G32bc@id)) G32ba@ls/false)) (apply (lambda (G32be@id) ((lambda (G32c0@lab) ((lambda (G32c2@b) ((lambda (G32c4@type) ((lambda () (begin (if (not G32c0@lab) (G2d88@raise-unbound-error G32be@id) (void)) (if (not (and (eq? G32c4@type '$rtd) (list? (G2d86@binding-value G32c2@b)))) (G304c@syntax-violation '#f '"not a record type" G32b2@e) (void)) (G2f85@chi-expr (car (G2d86@binding-value G32c2@b)) G32b3@r G32b4@mr))))) (G2d84@binding-type G32c2@b))) (G2d80@label->binding G32c0@lab G32b3@r))) (G2d7c@id->label G32be@id))) G32ba@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G32b8@t))) (G2f61@syntax-dispatch G32b8@t '(_ any)))) G32b2@e))) (set! G2f03@record-constructor-descriptor-transformer (lambda (G32c6@e G32c7@r G32c8@mr) ((lambda (G32cc@t) ((lambda (G32ce@ls/false) (if (and G32ce@ls/false (apply (lambda (G32d0@id) (G2d62@id? G32d0@id)) G32ce@ls/false)) (apply (lambda (G32d2@id) ((lambda (G32d4@lab) ((lambda (G32d6@b) ((lambda (G32d8@type) ((lambda () (begin (if (not G32d4@lab) (G2d88@raise-unbound-error G32d2@id) (void)) (if (not (and (eq? G32d8@type '$rtd) (list? (G2d86@binding-value G32d6@b)))) (G304c@syntax-violation '#f '"invalid type" G32c6@e) (void)) (G2f85@chi-expr (cadr (G2d86@binding-value G32d6@b)) G32c7@r G32c8@mr))))) (G2d84@binding-type G32d6@b))) (G2d80@label->binding G32d4@lab G32c7@r))) (G2d7c@id->label G32d2@id))) G32ce@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G32cc@t))) (G2f61@syntax-dispatch G32cc@t '(_ any)))) G32c6@e))) (set! G2f05@when-macro (lambda (G32da@e) ((lambda (G32dc@t) ((lambda (G32de@ls/false) (if G32de@ls/false (apply (lambda (G32e0@test G32e1@e G32e2@e*) (G2f17@bless (list 'if G32e0@test (cons 'begin (cons G32e1@e G32e2@e*))))) G32de@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G32dc@t))) (G2f61@syntax-dispatch G32dc@t '(_ any any . each-any)))) G32da@e))) (set! G2f07@unless-macro (lambda (G32e6@e) ((lambda (G32e8@t) ((lambda (G32ea@ls/false) (if G32ea@ls/false (apply (lambda (G32ec@test G32ed@e G32ee@e*) (G2f17@bless (list 'if (list 'not G32ec@test) (cons 'begin (cons G32ed@e G32ee@e*))))) G32ea@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G32e8@t))) (G2f61@syntax-dispatch G32e8@t '(_ any any . each-any)))) G32e6@e))) (set! G2f09@if-transformer (lambda (G32f2@e G32f3@r G32f4@mr) ((lambda (G32f8@t) ((lambda (G32fa@ls/false) (if G32fa@ls/false (apply (lambda (G32fc@e0 G32fd@e1 G32fe@e2) (list 'if (G2f85@chi-expr G32fc@e0 G32f3@r G32f4@mr) (G2f85@chi-expr G32fd@e1 G32f3@r G32f4@mr) (G2f85@chi-expr G32fe@e2 G32f3@r G32f4@mr))) G32fa@ls/false) ((lambda (G3302@t) ((lambda (G3304@ls/false) (if G3304@ls/false (apply (lambda (G3306@e0 G3307@e1) (list 'if (G2f85@chi-expr G3306@e0 G32f3@r G32f4@mr) (G2f85@chi-expr G3307@e1 G32f3@r G32f4@mr) (G2cc0@G2c32@build-void))) G3304@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3302@t))) (G2f61@syntax-dispatch G3302@t '(_ any any)))) G32f8@t))) (G2f61@syntax-dispatch G32f8@t '(_ any any any)))) G32f2@e))) (set! G2f0b@and-transformer (lambda (G330a@e G330b@r G330c@mr) ((lambda (G3310@t) ((lambda (G3312@ls/false) (if G3312@ls/false (apply (lambda (G3314@e*) (cons 'and (G2f81@chi-expr* G3314@e* G330b@r G330c@mr))) G3312@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3310@t))) (G2f61@syntax-dispatch G3310@t '(_ . each-any)))) G330a@e))) (set! G2f0d@or-transformer (lambda (G3316@e G3317@r G3318@mr) ((lambda (G331c@t) ((lambda (G331e@ls/false) (if G331e@ls/false (apply (lambda (G3320@e*) (cons 'or (G2f81@chi-expr* G3320@e* G3317@r G3318@mr))) G331e@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G331c@t))) (G2f61@syntax-dispatch G331c@t '(_ . each-any)))) G3316@e))) (set! G2f0f@case-macro (lambda (G3322@e) ((lambda (G3325@build-last G3327@build-one) (begin (set! G3325@build-last (lambda (G334c@cls) ((lambda (G334e@t) ((lambda (G3350@ls/false) (if G3350@ls/false (apply (lambda (G3352@e G3353@e*) (cons 'begin (cons G3352@e G3353@e*))) G3350@ls/false) ((lambda (G3356@t) ((lambda (G3358@ls/false) (if G3358@ls/false (apply (lambda () (G3327@build-one G334c@cls '(if #f #f))) G3358@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3356@t))) (G2f61@syntax-dispatch G3356@t '_))) G334e@t))) (G2f61@syntax-dispatch G334e@t '(#(scheme-id else) any . each-any)))) G334c@cls))) (set! G3327@build-one (lambda (G333e@cls G333f@k) ((lambda (G3342@t) ((lambda (G3344@ls/false) (if G3344@ls/false (apply (lambda (G3346@d* G3347@e G3348@e*) (list 'if (list 'memv 't (list 'quote G3346@d*)) (cons 'begin (cons G3347@e G3348@e*)) G333f@k)) G3344@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3342@t))) (G2f61@syntax-dispatch G3342@t '(each-any any . each-any)))) G333e@cls))) ((lambda (G3328@t) ((lambda (G332a@ls/false) (if G332a@ls/false (apply (lambda (G332c@expr) (G2f17@bless (cons 'let (cons (list (list 't G332c@expr)) '((if #f #f)))))) G332a@ls/false) ((lambda (G332e@t) ((lambda (G3330@ls/false) (if G3330@ls/false (apply (lambda (G3332@expr G3333@cls G3334@cls*) (G2f17@bless (list 'let (list (list 't G3332@expr)) ((letrec ((G3338@f (lambda (G333a@cls G333b@cls*) (if (null? G333b@cls*) (G3325@build-last G333a@cls) (G3327@build-one G333a@cls (G3338@f (car G333b@cls*) (cdr G333b@cls*))))))) G3338@f) G3333@cls G3334@cls*)))) G3330@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G332e@t))) (G2f61@syntax-dispatch G332e@t '(_ any any . each-any)))) G3328@t))) (G2f61@syntax-dispatch G3328@t '(_ any)))) G3322@e))) '#f '#f))) (set! G2f11@quote-transformer (lambda (G335a@e G335b@r G335c@mr) ((lambda (G3360@t) ((lambda (G3362@ls/false) (if G3362@ls/false (apply (lambda (G3364@datum) (list 'quote (G2d78@stx->datum G3364@datum))) G3362@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3360@t))) (G2f61@syntax-dispatch G3360@t '(_ any)))) G335a@e))) (set! G2f13@case-lambda-transformer (lambda (G3366@e G3367@r G3368@mr) ((lambda (G336c@t) ((lambda (G336e@ls/false) (if G336e@ls/false (apply (lambda (G3370@fmls* G3371@b* G3372@b**) (call-with-values (lambda () (G2f8d@chi-lambda-clause* G3366@e G3370@fmls* (map cons G3371@b* G3372@b**) G3367@r G3368@mr)) (lambda (G3378@G3376 G3379@G3377) ((lambda (G337c@body* G337d@fmls*) (G2cbd@G2bfc@build-case-lambda '#f G337d@fmls* G337c@body*)) G3379@G3377 G3378@G3376)))) G336e@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G336c@t))) (G2f61@syntax-dispatch G336c@t '(_ . #(each (any any . each-any)))))) G3366@e))) (set! G2f15@lambda-transformer (lambda (G3380@e G3381@r G3382@mr) ((lambda (G3386@t) ((lambda (G3388@ls/false) (if G3388@ls/false (apply (lambda (G338a@fmls G338b@b G338c@b*) (call-with-values (lambda () (G2f8b@chi-lambda-clause G3380@e G338a@fmls (cons G338b@b G338c@b*) G3381@r G3382@mr)) (lambda (G3392@G3390 G3393@G3391) ((lambda (G3396@body G3397@fmls) (G2cbc@G2bfa@build-lambda '#f G3397@fmls G3396@body)) G3393@G3391 G3392@G3390)))) G3388@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3386@t))) (G2f61@syntax-dispatch G3386@t '(_ any any . each-any)))) G3380@e))) (set! G2f17@bless (lambda (G339a@x) (G2d4a@mkstx ((letrec ((G339c@f (lambda (G339e@x) (if (G2d2a@stx? G339e@x) G339e@x (if (pair? G339e@x) (cons (G339c@f (car G339e@x)) (G339c@f (cdr G339e@x))) (if (symbol? G339e@x) (G2eeb@scheme-stx G339e@x) (if (vector? G339e@x) (vector-map G339c@f G339e@x) G339e@x))))))) G339c@f) G339a@x) '() '() '()))) (set! G2f19@with-syntax-macro (lambda (G33a0@e) ((lambda (G33a2@t) ((lambda (G33a4@ls/false) (if G33a4@ls/false (apply (lambda (G33a6@pat* G33a7@expr* G33a8@b G33a9@b*) ((lambda (G33ae@idn*) (begin (G2f89@verify-formals (map car G33ae@idn*) G33a0@e) ((lambda (G33b0@t*) (G2f17@bless (list 'let (map list G33b0@t* G33a7@expr*) ((letrec ((G33b2@f (lambda (G33b4@pat* G33b5@t*) (if (null? G33b4@pat*) (cons 'begin (cons '#f (cons G33a8@b G33a9@b*))) (list 'syntax-case (car G33b5@t*) '() (list (car G33b4@pat*) (G33b2@f (cdr G33b4@pat*) (cdr G33b5@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33b4@pat*)) (car G33b5@t*)))))))) G33b2@f) G33a6@pat* G33b0@t*)))) (G303a@generate-temporaries G33a7@expr*)))) ((letrec ((G33b8@f (lambda (G33ba@pat*) (if (null? G33ba@pat*) '() (call-with-values (lambda () (G2f5f@convert-pattern (car G33ba@pat*) '())) (lambda (G33be@G33bc G33bf@G33bd) ((lambda (G33c2@idn* G33c3@pat) (append G33c2@idn* (G33b8@f (cdr G33ba@pat*)))) G33bf@G33bd G33be@G33bc))))))) G33b8@f) G33a6@pat*))) G33a4@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G33a2@t))) (G2f61@syntax-dispatch G33a2@t '(_ #(each (any any)) any . each-any)))) G33a0@e))) (set! G2f1b@invalid-fmls-error (lambda (G33c6@stx G33c7@fmls) ((lambda (G33ca@t) ((lambda (G33cc@ls/false) (if G33cc@ls/false (apply (lambda (G33ce@id* G33cf@last) ((letrec ((G33d2@f (lambda (G33d4@id*) (if (null? G33d4@id*) (values) (if (not (G2d62@id? (car G33d4@id*))) (G304c@syntax-violation '#f '"not an identifier" G33c6@stx (car G33d4@id*)) (begin (G33d2@f (cdr G33d4@id*)) (if (G2d70@bound-id-member? (car G33d4@id*) (cdr G33d4@id*)) (G304c@syntax-violation '#f '"duplicate binding" G33c6@stx (car G33d4@id*)) (void)))))))) G33d2@f) (if (G2d62@id? G33cf@last) (cons G33cf@last G33ce@id*) (if (G2d58@syntax-null? G33cf@last) G33ce@id* (G304c@syntax-violation '#f '"not an identifier" G33c6@stx G33cf@last))))) G33cc@ls/false) ((lambda (G33d6@t) ((lambda (G33d8@ls/false) (if G33d8@ls/false (apply (lambda () (G304c@syntax-violation '#f '"malformed binding form" G33c6@stx G33c7@fmls)) G33d8@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G33d6@t))) (G2f61@syntax-dispatch G33d6@t '_))) G33ca@t))) (G2f61@syntax-dispatch G33ca@t '#(each+ any () any)))) G33c7@fmls))) (set! G2f1d@let-macro (lambda (G33da@stx) ((lambda (G33dc@t) ((lambda (G33de@ls/false) (if G33de@ls/false (apply (lambda (G33e0@lhs* G33e1@rhs* G33e2@b G33e3@b*) (if (G2d6c@valid-bound-ids? G33e0@lhs*) (G2f17@bless (cons (cons 'lambda (cons G33e0@lhs* (cons G33e2@b G33e3@b*))) G33e1@rhs*)) (G2f1b@invalid-fmls-error G33da@stx G33e0@lhs*))) G33de@ls/false) ((lambda (G33e8@t) ((lambda (G33ea@ls/false) (if (and G33ea@ls/false (apply (lambda (G33ec@f G33ed@lhs* G33ee@rhs* G33ef@b G33f0@b*) (G2d62@id? G33ec@f)) G33ea@ls/false)) (apply (lambda (G33f6@f G33f7@lhs* G33f8@rhs* G33f9@b G33fa@b*) (if (G2d6c@valid-bound-ids? G33f7@lhs*) (G2f17@bless (cons (list 'letrec (list (list G33f6@f (cons 'lambda (cons G33f7@lhs* (cons G33f9@b G33fa@b*))))) G33f6@f) G33f8@rhs*)) (G2f1b@invalid-fmls-error G33da@stx G33f7@lhs*))) G33ea@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G33e8@t))) (G2f61@syntax-dispatch G33e8@t '(_ any #(each (any any)) any . each-any)))) G33dc@t))) (G2f61@syntax-dispatch G33dc@t '(_ #(each (any any)) any . each-any)))) G33da@stx))) (set! G2f1f@let-values-macro (lambda (G3400@stx) ((lambda (G3403@rename G3405@rename*) (begin (set! G3403@rename (lambda (G3465@x G3466@old* G3467@new*) (begin (if (not (G2d62@id? G3465@x)) (G304c@syntax-violation '#f '"not an indentifier" G3400@stx G3465@x) (void)) (if (G2d70@bound-id-member? G3465@x G3466@old*) (G304c@syntax-violation '#f '"duplicate binding" G3400@stx G3465@x) (void)) ((lambda (G346b@y) (values G346b@y (cons G3465@x G3466@old*) (cons G346b@y G3467@new*))) (gensym (G3052@syntax->datum G3465@x)))))) (set! G3405@rename* (lambda (G3453@x* G3454@old* G3455@new*) (if (null? G3453@x*) (values '() G3454@old* G3455@new*) (call-with-values (lambda () (G3403@rename (car G3453@x*) G3454@old* G3455@new*)) (lambda (G3459@x G345a@old* G345b@new*) (call-with-values (lambda () (G3405@rename* (cdr G3453@x*) G345a@old* G345b@new*)) (lambda (G345f@x* G3460@old* G3461@new*) (values (cons G3459@x G345f@x*) G3460@old* G3461@new*)))))))) ((lambda (G3406@t) ((lambda (G3408@ls/false) (if G3408@ls/false (apply (lambda (G340a@b G340b@b*) (cons* (G2f17@bless 'let) '() G340a@b G340b@b*)) G3408@ls/false) ((lambda (G340e@t) ((lambda (G3410@ls/false) (if G3410@ls/false (apply (lambda (G3412@lhs* G3413@rhs* G3414@b G3415@b*) (G2f17@bless ((letrec ((G341a@f (lambda (G341c@lhs* G341d@rhs* G341e@old* G341f@new*) (if (null? G341c@lhs*) (cons 'let (cons (map list G341e@old* G341f@new*) (cons G3414@b G3415@b*))) ((lambda (G3424@t) ((lambda (G3426@ls/false) (if G3426@ls/false (apply (lambda (G3428@x*) (call-with-values (lambda () (G3405@rename* G3428@x* G341e@old* G341f@new*)) (lambda (G342d@G342a G342e@G342b G342f@G342c) ((lambda (G3433@new* G3434@old* G3435@y*) (list 'call-with-values (list 'lambda '() (car G341d@rhs*)) (list 'lambda G3435@y* (G341a@f (cdr G341c@lhs*) (cdr G341d@rhs*) G3434@old* G3433@new*)))) G342f@G342c G342e@G342b G342d@G342a)))) G3426@ls/false) ((lambda (G3439@t) ((lambda (G343b@ls/false) (if G343b@ls/false (apply (lambda (G343d@x* G343e@x) (call-with-values (lambda () (G3403@rename G343e@x G341e@old* G341f@new*)) (lambda (G3441@y G3442@old* G3443@new*) (call-with-values (lambda () (G3405@rename* G343d@x* G3442@old* G3443@new*)) (lambda (G3447@y* G3448@old* G3449@new*) (list 'call-with-values (list 'lambda '() (car G341d@rhs*)) (list 'lambda (append G3447@y* G3441@y) (G341a@f (cdr G341c@lhs*) (cdr G341d@rhs*) G3448@old* G3449@new*)))))))) G343b@ls/false) ((lambda (G344d@t) ((lambda (G344f@ls/false) (if G344f@ls/false (apply (lambda (G3451@others) (G304c@syntax-violation '#f '"malformed bindings" G3400@stx G3451@others)) G344f@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G344d@t))) (G2f61@syntax-dispatch G344d@t 'any))) G3439@t))) (G2f61@syntax-dispatch G3439@t '#(each+ any () any)))) G3424@t))) (G2f61@syntax-dispatch G3424@t 'each-any))) (car G341c@lhs*)))))) G341a@f) G3412@lhs* G3413@rhs* '() '()))) G3410@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G340e@t))) (G2f61@syntax-dispatch G340e@t '(_ #(each (any any)) any . each-any)))) G3406@t))) (G2f61@syntax-dispatch G3406@t '(_ () any . each-any)))) G3400@stx))) '#f '#f))) (set! G2f21@let*-values-macro (lambda (G346d@stx) ((lambda (G3470@check) (begin (set! G3470@check (lambda (G349f@x*) (if (not (null? G349f@x*)) ((lambda (G34a1@x) (begin (if (not (G2d62@id? G34a1@x)) (G304c@syntax-violation '#f '"not an identifier" G346d@stx G34a1@x) (void)) (G3470@check (cdr G349f@x*)) (if (G2d70@bound-id-member? G34a1@x (cdr G349f@x*)) (G304c@syntax-violation '#f '"duplicate identifier" G346d@stx G34a1@x) (void)))) (car G349f@x*)) (void)))) ((lambda (G3471@t) ((lambda (G3473@ls/false) (if G3473@ls/false (apply (lambda (G3475@b G3476@b*) (cons* (G2f17@bless 'let) '() G3475@b G3476@b*)) G3473@ls/false) ((lambda (G3479@t) ((lambda (G347b@ls/false) (if G347b@ls/false (apply (lambda (G347d@lhs* G347e@rhs* G347f@b G3480@b*) (G2f17@bless ((letrec ((G3485@f (lambda (G3487@lhs* G3488@rhs*) (if (null? G3487@lhs*) (cons 'begin (cons G347f@b G3480@b*)) ((lambda (G348b@t) ((lambda (G348d@ls/false) (if G348d@ls/false (apply (lambda (G348f@x*) (begin (G3470@check G348f@x*) (list 'call-with-values (list 'lambda '() (car G3488@rhs*)) (list 'lambda G348f@x* (G3485@f (cdr G3487@lhs*) (cdr G3488@rhs*)))))) G348d@ls/false) ((lambda (G3491@t) ((lambda (G3493@ls/false) (if G3493@ls/false (apply (lambda (G3495@x* G3496@x) (begin (G3470@check (cons G3496@x G3495@x*)) (list 'call-with-values (list 'lambda '() (car G3488@rhs*)) (list 'lambda (append G3495@x* G3496@x) (G3485@f (cdr G3487@lhs*) (cdr G3488@rhs*)))))) G3493@ls/false) ((lambda (G3499@t) ((lambda (G349b@ls/false) (if G349b@ls/false (apply (lambda (G349d@others) (G304c@syntax-violation '#f '"malformed bindings" G346d@stx G349d@others)) G349b@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3499@t))) (G2f61@syntax-dispatch G3499@t 'any))) G3491@t))) (G2f61@syntax-dispatch G3491@t '#(each+ any () any)))) G348b@t))) (G2f61@syntax-dispatch G348b@t 'each-any))) (car G3487@lhs*)))))) G3485@f) G347d@lhs* G347e@rhs*))) G347b@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3479@t))) (G2f61@syntax-dispatch G3479@t '(_ #(each (any any)) any . each-any)))) G3471@t))) (G2f61@syntax-dispatch G3471@t '(_ () any . each-any)))) G346d@stx))) '#f))) (set! G2f23@trace-lambda-macro (lambda (G34a3@stx) ((lambda (G34a5@t) ((lambda (G34a7@ls/false) (if G34a7@ls/false (apply (lambda (G34a9@who G34aa@fmls G34ab@b G34ac@b*) (if (G2d6c@valid-bound-ids? G34aa@fmls) (G2f17@bless (list 'make-traced-procedure (list 'quote G34a9@who) (cons 'lambda (cons G34aa@fmls (cons G34ab@b G34ac@b*))))) (G2f1b@invalid-fmls-error G34a3@stx G34aa@fmls))) G34a7@ls/false) ((lambda (G34b1@t) ((lambda (G34b3@ls/false) (if G34b3@ls/false (apply (lambda (G34b5@who G34b6@fmls G34b7@last G34b8@b G34b9@b*) (if (G2d6c@valid-bound-ids? (cons G34b7@last G34b6@fmls)) (G2f17@bless (list 'make-traced-procedure (list 'quote G34b5@who) (cons 'lambda (cons (append G34b6@fmls G34b7@last) (cons G34b8@b G34b9@b*))))) (G2f1b@invalid-fmls-error G34a3@stx (append G34b6@fmls G34b7@last)))) G34b3@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G34b1@t))) (G2f61@syntax-dispatch G34b1@t '(_ any #(each+ any () any) any . each-any)))) G34a5@t))) (G2f61@syntax-dispatch G34a5@t '(_ any each-any any . each-any)))) G34a3@stx))) (set! G2f25@trace-define-macro (lambda (G34bf@stx) ((lambda (G34c1@t) ((lambda (G34c3@ls/false) (if G34c3@ls/false (apply (lambda (G34c5@who G34c6@fmls G34c7@b G34c8@b*) (if (G2d6c@valid-bound-ids? G34c6@fmls) (G2f17@bless (list 'define G34c5@who (list 'make-traced-procedure (list 'quote G34c5@who) (cons 'lambda (cons G34c6@fmls (cons G34c7@b G34c8@b*)))))) (G2f1b@invalid-fmls-error G34bf@stx G34c6@fmls))) G34c3@ls/false) ((lambda (G34cd@t) ((lambda (G34cf@ls/false) (if G34cf@ls/false (apply (lambda (G34d1@who G34d2@fmls G34d3@last G34d4@b G34d5@b*) (if (G2d6c@valid-bound-ids? (cons G34d3@last G34d2@fmls)) (G2f17@bless (list 'define G34d1@who (list 'make-traced-procedure (list 'quote G34d1@who) (cons 'lambda (cons (append G34d2@fmls G34d3@last) (cons G34d4@b G34d5@b*)))))) (G2f1b@invalid-fmls-error G34bf@stx (append G34d2@fmls G34d3@last)))) G34cf@ls/false) ((lambda (G34db@t) ((lambda (G34dd@ls/false) (if G34dd@ls/false (apply (lambda (G34df@who G34e0@expr) (if (G2d62@id? G34df@who) (G2f17@bless (list 'define G34df@who (list 'let (list (list 'v G34e0@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34df@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G304c@syntax-violation '#f '"invalid name" G34bf@stx))) G34dd@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G34db@t))) (G2f61@syntax-dispatch G34db@t '(_ any any)))) G34cd@t))) (G2f61@syntax-dispatch G34cd@t '(_ (any . #(each+ any () any)) any . each-any)))) G34c1@t))) (G2f61@syntax-dispatch G34c1@t '(_ (any . each-any) any . each-any)))) G34bf@stx))) (set! G2f27@trace-define-syntax-macro (lambda (G34e3@stx) ((lambda (G34e5@t) ((lambda (G34e7@ls/false) (if G34e7@ls/false (apply (lambda (G34e9@who G34ea@expr) (if (G2d62@id? G34e9@who) (G2f17@bless (list 'define-syntax G34e9@who (list 'make-traced-macro (list 'quote G34e9@who) G34ea@expr))) (G304c@syntax-violation '#f '"invalid name" G34e3@stx))) G34e7@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G34e5@t))) (G2f61@syntax-dispatch G34e5@t '(_ any any)))) G34e3@stx))) (set! G2f29@trace-let/rec-syntax (lambda (G34ed@who) (lambda (G34ef@stx) ((lambda (G34f1@t) ((lambda (G34f3@ls/false) (if G34f3@ls/false (apply (lambda (G34f5@lhs* G34f6@rhs* G34f7@b G34f8@b*) (if (G2d6c@valid-bound-ids? G34f5@lhs*) ((lambda (G34fd@rhs*) (G2f17@bless (cons G34ed@who (cons (map list G34f5@lhs* G34fd@rhs*) (cons G34f7@b G34f8@b*))))) (map (lambda (G34ff@lhs G3500@rhs) (list 'make-traced-macro (list 'quote G34ff@lhs) G3500@rhs)) G34f5@lhs* G34f6@rhs*)) (G2f1b@invalid-fmls-error G34ef@stx G34f5@lhs*))) G34f3@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G34f1@t))) (G2f61@syntax-dispatch G34f1@t '(_ #(each (any any)) any . each-any)))) G34ef@stx)))) (set! G2f2b@trace-let-syntax-macro (G2f29@trace-let/rec-syntax 'let-syntax)) (set! G2f2d@trace-letrec-syntax-macro (G2f29@trace-let/rec-syntax 'letrec-syntax)) (set! G2f2f@guard-macro (lambda (G3503@x) ((lambda (G3506@gen-clauses) (begin (set! G3506@gen-clauses (lambda (G351d@con G351e@outerk G351f@clause*) ((lambda (G3524@f G3526@f*) (begin (set! G3524@f (lambda (G3559@x G355a@k) ((lambda (G355d@t) ((lambda (G355f@ls/false) (if G355f@ls/false (apply (lambda (G3561@e G3562@p) ((lambda (G3565@t) (list 'let (list (list G3565@t G3561@e)) (list 'if G3565@t (list G3562@p G3565@t) G355a@k))) (gensym))) G355f@ls/false) ((lambda (G3567@t) ((lambda (G3569@ls/false) (if G3569@ls/false (apply (lambda (G356b@e) ((lambda (G356d@t) (list 'let (list (list G356d@t G356b@e)) (list 'if G356d@t G356d@t G355a@k))) (gensym))) G3569@ls/false) ((lambda (G356f@t) ((lambda (G3571@ls/false) (if G3571@ls/false (apply (lambda (G3573@e G3574@v G3575@v*) (list 'if G3573@e (cons 'begin (cons G3574@v G3575@v*)) G355a@k)) G3571@ls/false) ((lambda (G3579@t) ((lambda (G357b@ls/false) (if G357b@ls/false (apply (lambda () (G304c@syntax-violation '#f '"invalid guard clause" G3559@x)) G357b@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3579@t))) (G2f61@syntax-dispatch G3579@t '_))) G356f@t))) (G2f61@syntax-dispatch G356f@t '(any any . each-any)))) G3567@t))) (G2f61@syntax-dispatch G3567@t '(any)))) G355d@t))) (G2f61@syntax-dispatch G355d@t '(any #(scheme-id =>) any)))) G3559@x))) (set! G3526@f* (lambda (G3531@x*) ((lambda (G3533@t) ((lambda (G3535@ls/false) (if G3535@ls/false (apply (lambda () ((lambda (G3537@g) (values (list G3537@g (list 'lambda '() (list 'raise-continuable G351d@con))) G3537@g)) (gensym))) G3535@ls/false) ((lambda (G3539@t) ((lambda (G353b@ls/false) (if G353b@ls/false (apply (lambda (G353d@e G353e@e*) (values (cons 'begin (cons G353d@e G353e@e*)) '#f)) G353b@ls/false) ((lambda (G3541@t) ((lambda (G3543@ls/false) (if G3543@ls/false (apply (lambda (G3545@cls G3546@cls*) (call-with-values (lambda () (G3526@f* G3546@cls*)) (lambda (G354b@G3549 G354c@G354a) ((lambda (G354f@g G3550@e) (values (G3524@f G3545@cls G3550@e) G354f@g)) G354c@G354a G354b@G3549)))) G3543@ls/false) ((lambda (G3553@t) ((lambda (G3555@ls/false) (if G3555@ls/false (apply (lambda (G3557@others) (G304c@syntax-violation '#f '"invalid guard clause" G3557@others)) G3555@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3553@t))) (G2f61@syntax-dispatch G3553@t 'any))) G3541@t))) (G2f61@syntax-dispatch G3541@t '(any . any)))) G3539@t))) (G2f61@syntax-dispatch G3539@t '((#(scheme-id else) any . each-any))))) G3533@t))) (G2f61@syntax-dispatch G3533@t '()))) G3531@x*))) (call-with-values (lambda () (G3526@f* G351f@clause*)) (lambda (G3529@G3527 G352a@G3528) ((lambda (G352d@raisek G352e@code) (if G352d@raisek (list (list 'call/cc (list 'lambda (list G352d@raisek) (list G351e@outerk (list 'lambda '() G352e@code))))) (list G351e@outerk (list 'lambda '() G352e@code)))) G352a@G3528 G3529@G3527))))) '#f '#f))) ((lambda (G3507@t) ((lambda (G3509@ls/false) (if (and G3509@ls/false (apply (lambda (G350b@con G350c@clause* G350d@b G350e@b*) (G2d62@id? G350b@con)) G3509@ls/false)) (apply (lambda (G3513@con G3514@clause* G3515@b G3516@b*) ((lambda (G351b@outerk) (G2f17@bless (list (list 'call/cc (list 'lambda (list G351b@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G3513@con) (G3506@gen-clauses G3513@con G351b@outerk G3514@clause*)) (cons 'lambda (cons '() (cons G3515@b G3516@b*)))))))))) (gensym))) G3509@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3507@t))) (G2f61@syntax-dispatch G3507@t '(_ (any . each-any) any . each-any)))) G3503@x))) '#f))) (set! G2f31@define-enumeration-macro (lambda (G357d@stx) ((lambda (G3580@set? G3582@remove-dups) (begin (set! G3580@set? (lambda (G3599@x) (or (null? G3599@x) (and (not (memq (car G3599@x) (cdr G3599@x))) (G3580@set? (cdr G3599@x)))))) (set! G3582@remove-dups (lambda (G3597@ls) (if (null? G3597@ls) '() (cons (car G3597@ls) (G3582@remove-dups (remq (car G3597@ls) (cdr G3597@ls))))))) ((lambda (G3583@t) ((lambda (G3585@ls/false) (if (and G3585@ls/false (apply (lambda (G3587@name G3588@id* G3589@maker) (and (G2d62@id? G3587@name) (G2d62@id? G3589@maker) (for-all G2d62@id? G3588@id*))) G3585@ls/false)) (apply (lambda (G358d@name G358e@id* G358f@maker) ((lambda (G3593@name* G3594@mk) (G2f17@bless (list 'begin (list 'define G3594@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3593@name*)))) (list 'define-syntax G358d@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3593@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G358d@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G358f@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G358f@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3593@name*)) (cons 'syntax-violation (cons (list 'quote G358f@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3594@mk '('(n* ...)))))))))))) (G3582@remove-dups (G3052@syntax->datum G358e@id*)) (gensym))) G3585@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3583@t))) (G2f61@syntax-dispatch G3583@t '(_ any each-any any)))) G357d@stx))) '#f '#f))) (set! G2f33@time-macro (lambda (G359b@stx) ((lambda (G359d@t) ((lambda (G359f@ls/false) (if G359f@ls/false (apply (lambda (G35a1@expr) ((lambda (G35a3@str) (G2f17@bless (list 'time-it G35a3@str (list 'lambda '() G35a1@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G35a7@G35a5 G35a8@G35a6) ((lambda (G35ab@e G35ac@p) (begin (write (G3052@syntax->datum G35a1@expr) G35ac@p) (G35ab@e))) G35a8@G35a6 G35a7@G35a5))))) G359f@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G359d@t))) (G2f61@syntax-dispatch G359d@t '(_ any)))) G359b@stx))) (set! G2f35@delay-macro (lambda (G35af@stx) ((lambda (G35b1@t) ((lambda (G35b3@ls/false) (if G35b3@ls/false (apply (lambda (G35b5@expr) (G2f17@bless (list 'make-promise (list 'lambda '() G35b5@expr)))) G35b3@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G35b1@t))) (G2f61@syntax-dispatch G35b1@t '(_ any)))) G35af@stx))) (set! G2f37@assert-macro (lambda (G35b7@stx) ((lambda (G35b9@t) ((lambda (G35bb@ls/false) (if G35bb@ls/false (apply (lambda (G35bd@expr) ((lambda (G35bf@pos) (G2f17@bless (list 'unless G35bd@expr (list 'assertion-error (list 'quote G35bd@expr) (list 'quote G35bf@pos))))) (or (G3044@expression-position G35b7@stx) (G3044@expression-position G35bd@expr)))) G35bb@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G35b9@t))) (G2f61@syntax-dispatch G35b9@t '(_ any)))) G35b7@stx))) (set! G2f39@endianness-macro (lambda (G35c1@stx) ((lambda (G35c3@t) ((lambda (G35c5@ls/false) (if G35c5@ls/false (apply (lambda (G35c7@e) ((lambda (G35c9@t) (if (memv G35c9@t '(little)) (G2f17@bless ''little) (if (memv G35c9@t '(big)) (G2f17@bless ''big) (G304c@syntax-violation '#f '"endianness must be big or little" G35c1@stx)))) (G3052@syntax->datum G35c7@e))) G35c5@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G35c3@t))) (G2f61@syntax-dispatch G35c3@t '(_ any)))) G35c1@stx))) (set! G2f3b@identifier-syntax-macro (lambda (G35cb@stx) ((lambda (G35cd@t) ((lambda (G35cf@ls/false) (if G35cf@ls/false (apply (lambda (G35d1@expr) (G2f17@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35d1@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35d1@expr) '((syntax (e* ...)))))))))) G35cf@ls/false) ((lambda (G35d3@t) ((lambda (G35d5@ls/false) (if (and G35d5@ls/false (apply (lambda (G35d7@id1 G35d8@expr1 G35d9@id2 G35da@expr2 G35db@expr3) (and (G2d62@id? G35d7@id1) (G2d62@id? G35d9@id2) (G2d62@id? G35da@expr2))) G35d5@ls/false)) (apply (lambda (G35e1@id1 G35e2@expr1 G35e3@id2 G35e4@expr2 G35e5@expr3) (G2f17@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35e2@expr1)) (list (list 'set! 'id G35e4@expr2) (list 'syntax G35e5@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35e2@expr1 '(e* ...))))))))) G35d5@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G35d3@t))) (G2f61@syntax-dispatch G35d3@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35cd@t))) (G2f61@syntax-dispatch G35cd@t '(_ any)))) G35cb@stx))) (set! G2f3d@do-macro (lambda (G35eb@stx) ((lambda (G35ee@bind) (begin (set! G35ee@bind (lambda (G3605@x) ((lambda (G3607@t) ((lambda (G3609@ls/false) (if G3609@ls/false (apply (lambda (G360b@x G360c@init) (list G360b@x G360c@init G360b@x)) G3609@ls/false) ((lambda (G360f@t) ((lambda (G3611@ls/false) (if G3611@ls/false (apply (lambda (G3613@x G3614@init G3615@step) (list G3613@x G3614@init G3615@step)) G3611@ls/false) ((lambda (G3619@t) ((lambda (G361b@ls/false) (if G361b@ls/false (apply (lambda () (G304c@syntax-violation '#f '"invalid binding" G35eb@stx)) G361b@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3619@t))) (G2f61@syntax-dispatch G3619@t '_))) G360f@t))) (G2f61@syntax-dispatch G360f@t '(any any any)))) G3607@t))) (G2f61@syntax-dispatch G3607@t '(any any)))) G3605@x))) ((lambda (G35ef@t) ((lambda (G35f1@ls/false) (if G35f1@ls/false (apply (lambda (G35f3@binding* G35f4@test G35f5@expr* G35f6@command*) ((lambda (G35fb@t) ((lambda (G35fd@ls/false) (if G35fd@ls/false (apply (lambda (G35ff@x* G3600@init* G3601@step*) (if (G2d6c@valid-bound-ids? G35ff@x*) (G2f17@bless (list 'letrec (list (list 'loop (list 'lambda G35ff@x* (list 'if G35f4@test (cons 'begin (cons '(if #f #f) G35f5@expr*)) (cons 'begin (append G35f6@command* (list (cons 'loop G3601@step*)))))))) (cons 'loop G3600@init*))) (G304c@syntax-violation '#f '"invalid bindings" G35eb@stx))) G35fd@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G35fb@t))) (G2f61@syntax-dispatch G35fb@t '#(each (any any any))))) (map G35ee@bind G35f3@binding*))) G35f1@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G35ef@t))) (G2f61@syntax-dispatch G35ef@t '(_ each-any (any . each-any) . each-any)))) G35eb@stx))) '#f))) (set! G2f3f@let*-macro (lambda (G361d@stx) ((lambda (G361f@t) ((lambda (G3621@ls/false) (if (and G3621@ls/false (apply (lambda (G3623@lhs* G3624@rhs* G3625@b G3626@b*) (for-all G2d62@id? G3623@lhs*)) G3621@ls/false)) (apply (lambda (G362b@lhs* G362c@rhs* G362d@b G362e@b*) (G2f17@bless ((letrec ((G3633@f (lambda (G3635@x*) (if (null? G3635@x*) (cons 'let (cons '() (cons G362d@b G362e@b*))) (list 'let (list (car G3635@x*)) (G3633@f (cdr G3635@x*))))))) G3633@f) (map list G362b@lhs* G362c@rhs*)))) G3621@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G361f@t))) (G2f61@syntax-dispatch G361f@t '(_ #(each (any any)) any . each-any)))) G361d@stx))) (set! G2f41@or-macro (lambda (G3637@stx) ((lambda (G3639@t) ((lambda (G363b@ls/false) (if G363b@ls/false (apply (lambda () '#f) G363b@ls/false) ((lambda (G363d@t) ((lambda (G363f@ls/false) (if G363f@ls/false (apply (lambda (G3641@e G3642@e*) (G2f17@bless ((letrec ((G3645@f (lambda (G3647@e G3648@e*) (if (null? G3648@e*) (list 'begin '#f G3647@e) (list 'let (list (list 't G3647@e)) (list 'if 't 't (G3645@f (car G3648@e*) (cdr G3648@e*)))))))) G3645@f) G3641@e G3642@e*))) G363f@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G363d@t))) (G2f61@syntax-dispatch G363d@t '(_ any . each-any)))) G3639@t))) (G2f61@syntax-dispatch G3639@t '(_)))) G3637@stx))) (set! G2f43@and-macro (lambda (G364b@stx) ((lambda (G364d@t) ((lambda (G364f@ls/false) (if G364f@ls/false (apply (lambda () '#t) G364f@ls/false) ((lambda (G3651@t) ((lambda (G3653@ls/false) (if G3653@ls/false (apply (lambda (G3655@e G3656@e*) (G2f17@bless ((letrec ((G3659@f (lambda (G365b@e G365c@e*) (if (null? G365c@e*) (list 'begin '#f G365b@e) (cons 'if (cons G365b@e (cons (G3659@f (car G365c@e*) (cdr G365c@e*)) '(#f)))))))) G3659@f) G3655@e G3656@e*))) G3653@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3651@t))) (G2f61@syntax-dispatch G3651@t '(_ any . each-any)))) G364d@t))) (G2f61@syntax-dispatch G364d@t '(_)))) G364b@stx))) (set! G2f45@cond-macro (lambda (G365f@stx) ((lambda (G3661@t) ((lambda (G3663@ls/false) (if G3663@ls/false (apply (lambda (G3665@cls G3666@cls*) (G2f17@bless ((letrec ((G3669@f (lambda (G366b@cls G366c@cls*) (if (null? G366c@cls*) ((lambda (G366f@t) ((lambda (G3671@ls/false) (if G3671@ls/false (apply (lambda (G3673@e G3674@e*) (cons 'begin (cons G3673@e G3674@e*))) G3671@ls/false) ((lambda (G3677@t) ((lambda (G3679@ls/false) (if G3679@ls/false (apply (lambda (G367b@e G367c@p) (list 'let (list (list 't G367b@e)) (list 'if 't (cons G367c@p '(t))))) G3679@ls/false) ((lambda (G367f@t) ((lambda (G3681@ls/false) (if G3681@ls/false (apply (lambda (G3683@e) (cons 'or (cons G3683@e '((if #f #f))))) G3681@ls/false) ((lambda (G3685@t) ((lambda (G3687@ls/false) (if G3687@ls/false (apply (lambda (G3689@e G368a@e*) (list 'if G3689@e (cons 'begin G368a@e*))) G3687@ls/false) ((lambda (G368d@t) ((lambda (G368f@ls/false) (if G368f@ls/false (apply (lambda () (G304c@syntax-violation '#f '"invalid last clause" G365f@stx)) G368f@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G368d@t))) (G2f61@syntax-dispatch G368d@t '_))) G3685@t))) (G2f61@syntax-dispatch G3685@t '(any . each-any)))) G367f@t))) (G2f61@syntax-dispatch G367f@t '(any)))) G3677@t))) (G2f61@syntax-dispatch G3677@t '(any #(scheme-id =>) any)))) G366f@t))) (G2f61@syntax-dispatch G366f@t '(#(scheme-id else) any . each-any)))) G366b@cls) ((lambda (G3691@t) ((lambda (G3693@ls/false) (if G3693@ls/false (apply (lambda (G3695@e G3696@e*) (G304c@syntax-violation '#f '"incorrect position of keyword else" G365f@stx)) G3693@ls/false) ((lambda (G3699@t) ((lambda (G369b@ls/false) (if G369b@ls/false (apply (lambda (G369d@e G369e@p) (list 'let (list (list 't G369d@e)) (list 'if 't (cons G369e@p '(t)) (G3669@f (car G366c@cls*) (cdr G366c@cls*))))) G369b@ls/false) ((lambda (G36a1@t) ((lambda (G36a3@ls/false) (if G36a3@ls/false (apply (lambda (G36a5@e) (list 'or G36a5@e (G3669@f (car G366c@cls*) (cdr G366c@cls*)))) G36a3@ls/false) ((lambda (G36a7@t) ((lambda (G36a9@ls/false) (if G36a9@ls/false (apply (lambda (G36ab@e G36ac@e*) (list 'if G36ab@e (cons 'begin G36ac@e*) (G3669@f (car G366c@cls*) (cdr G366c@cls*)))) G36a9@ls/false) ((lambda (G36af@t) ((lambda (G36b1@ls/false) (if G36b1@ls/false (apply (lambda () (G304c@syntax-violation '#f '"invalid last clause" G365f@stx)) G36b1@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G36af@t))) (G2f61@syntax-dispatch G36af@t '_))) G36a7@t))) (G2f61@syntax-dispatch G36a7@t '(any . each-any)))) G36a1@t))) (G2f61@syntax-dispatch G36a1@t '(any)))) G3699@t))) (G2f61@syntax-dispatch G3699@t '(any #(scheme-id =>) any)))) G3691@t))) (G2f61@syntax-dispatch G3691@t '(#(scheme-id else) any . each-any)))) G366b@cls))))) G3669@f) G3665@cls G3666@cls*))) G3663@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3661@t))) (G2f61@syntax-dispatch G3661@t '(_ any . each-any)))) G365f@stx))) (set! G2f47@do-include (lambda (G36b3@stx G36b4@id G36b5@filename) ((lambda (G36b9@filename) (begin (if (not (and (string? G36b9@filename) (G2d62@id? G36b4@id))) (G304c@syntax-violation '#f '"invalid syntax" G36b3@stx) (void)) (cons (G2f17@bless 'begin) (with-input-from-file G36b9@filename (lambda () ((letrec ((G36bb@f (lambda (G36bd@ls) ((lambda (G36bf@x) (if (eof-object? G36bf@x) (reverse G36bd@ls) (G36bb@f (cons (G2d40@datum->stx G36b4@id G36bf@x) G36bd@ls)))) (G28f1@G281a@read-annotated))))) G36bb@f) '())))))) (G2d78@stx->datum G36b5@filename)))) (set! G2f49@include-macro (lambda (G36c1@e) ((lambda (G36c3@t) ((lambda (G36c5@ls/false) (if G36c5@ls/false (apply (lambda (G36c7@id G36c8@filename) (G2f47@do-include G36c1@e G36c7@id G36c8@filename)) G36c5@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G36c3@t))) (G2f61@syntax-dispatch G36c3@t '(any any)))) G36c1@e))) (set! G2f4b@include-into-macro (lambda (G36cb@e) ((lambda (G36cd@t) ((lambda (G36cf@ls/false) (if G36cf@ls/false (apply (lambda (G36d1@id G36d2@filename) (G2f47@do-include G36cb@e G36d1@id G36d2@filename)) G36cf@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G36cd@t))) (G2f61@syntax-dispatch G36cd@t '(_ any any)))) G36cb@e))) (set! G2f4d@syntax-rules-macro (lambda (G36d5@e) ((lambda (G36d7@t) ((lambda (G36d9@ls/false) (if G36d9@ls/false (apply (lambda (G36db@lits G36dc@pat* G36dd@tmp*) (begin (G2f67@verify-literals G36db@lits G36d5@e) (G2f17@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36db@lits (map (lambda (G36e1@pat G36e2@tmp) ((lambda (G36e5@t) ((lambda (G36e7@ls/false) (if G36e7@ls/false (apply (lambda (G36e9@rest) (list (cons 'g G36e9@rest) (list 'syntax G36e2@tmp))) G36e7@ls/false) ((lambda (G36eb@t) ((lambda (G36ed@ls/false) (if G36ed@ls/false (apply (lambda () (G304c@syntax-violation '#f '"invalid syntax-rules pattern" G36d5@e G36e1@pat)) G36ed@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G36eb@t))) (G2f61@syntax-dispatch G36eb@t '_))) G36e5@t))) (G2f61@syntax-dispatch G36e5@t '(_ . any)))) G36e1@pat)) G36dc@pat* G36dd@tmp*)))))))) G36d9@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G36d7@t))) (G2f61@syntax-dispatch G36d7@t '(_ each-any . #(each (any any)))))) G36d5@e))) (set! G2f4f@quasiquote-macro ((lambda () ((lambda (G36f0@datum G370e@quasicons* G3710@quasicons G3712@quasiappend G3714@quasivector G3716@vquasi G3718@quasi) (begin (set! G36f0@datum (lambda (G37f3@x) (list (G2eeb@scheme-stx 'quote) (G2d4a@mkstx G37f3@x '() '() '())))) (set! G370e@quasicons* (lambda (G37eb@x G37ec@y) ((letrec ((G37ef@f (lambda (G37f1@x) (if (null? G37f1@x) G37ec@y (G3710@quasicons (car G37f1@x) (G37ef@f (cdr G37f1@x))))))) G37ef@f) G37eb@x))) (set! G3710@quasicons (lambda (G37c5@x G37c6@y) ((lambda (G37c9@t) ((lambda (G37cb@ls/false) (if G37cb@ls/false (apply (lambda (G37cd@dy) ((lambda (G37cf@t) ((lambda (G37d1@ls/false) (if G37d1@ls/false (apply (lambda (G37d3@dx) (list (G2eeb@scheme-stx 'quote) (cons G37d3@dx G37cd@dy))) G37d1@ls/false) ((lambda (G37d5@t) ((lambda (G37d7@ls/false) (if G37d7@ls/false (apply (lambda () ((lambda (G37d9@t) ((lambda (G37db@ls/false) (if G37db@ls/false (apply (lambda () (list (G2eeb@scheme-stx 'list) G37c5@x)) G37db@ls/false) ((lambda (G37dd@t) ((lambda (G37df@ls/false) (if G37df@ls/false (apply (lambda () (list (G2eeb@scheme-stx 'cons) G37c5@x G37c6@y)) G37df@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G37dd@t))) (G2f61@syntax-dispatch G37dd@t '_))) G37d9@t))) (G2f61@syntax-dispatch G37d9@t '()))) G37cd@dy)) G37d7@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G37d5@t))) (G2f61@syntax-dispatch G37d5@t '_))) G37cf@t))) (G2f61@syntax-dispatch G37cf@t '(#(scheme-id quote) any)))) G37c5@x)) G37cb@ls/false) ((lambda (G37e1@t) ((lambda (G37e3@ls/false) (if G37e3@ls/false (apply (lambda (G37e5@stuff) (cons* (G2eeb@scheme-stx 'list) G37c5@x G37e5@stuff)) G37e3@ls/false) ((lambda (G37e7@t) ((lambda (G37e9@ls/false) (if G37e9@ls/false (apply (lambda () (list (G2eeb@scheme-stx 'cons) G37c5@x G37c6@y)) G37e9@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G37e7@t))) (G2f61@syntax-dispatch G37e7@t '_))) G37e1@t))) (G2f61@syntax-dispatch G37e1@t '(#(scheme-id list) . each-any)))) G37c9@t))) (G2f61@syntax-dispatch G37c9@t '(#(scheme-id quote) any)))) G37c6@y))) (set! G3712@quasiappend (lambda (G37ab@x G37ac@y) ((lambda (G37af@ls) (if (null? G37af@ls) (list (G2eeb@scheme-stx 'quote) '()) (if (null? (cdr G37af@ls)) (car G37af@ls) (cons* (G2eeb@scheme-stx 'append) G37af@ls)))) ((letrec ((G37b1@f (lambda (G37b3@x) (if (null? G37b3@x) ((lambda (G37b5@t) ((lambda (G37b7@ls/false) (if G37b7@ls/false (apply (lambda () '()) G37b7@ls/false) ((lambda (G37b9@t) ((lambda (G37bb@ls/false) (if G37bb@ls/false (apply (lambda () (list G37ac@y)) G37bb@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G37b9@t))) (G2f61@syntax-dispatch G37b9@t '_))) G37b5@t))) (G2f61@syntax-dispatch G37b5@t '(#(scheme-id quote) ())))) G37ac@y) ((lambda (G37bd@t) ((lambda (G37bf@ls/false) (if G37bf@ls/false (apply (lambda () (G37b1@f (cdr G37b3@x))) G37bf@ls/false) ((lambda (G37c1@t) ((lambda (G37c3@ls/false) (if G37c3@ls/false (apply (lambda () (cons (car G37b3@x) (G37b1@f (cdr G37b3@x)))) G37c3@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G37c1@t))) (G2f61@syntax-dispatch G37c1@t '_))) G37bd@t))) (G2f61@syntax-dispatch G37bd@t '(#(scheme-id quote) ())))) (car G37b3@x)))))) G37b1@f) G37ab@x)))) (set! G3714@quasivector (lambda (G3779@x) ((lambda (G377b@pat-x) ((lambda (G377d@t) ((lambda (G377f@ls/false) (if G377f@ls/false (apply (lambda (G3781@x*) (list (G2eeb@scheme-stx 'quote) (list->vector G3781@x*))) G377f@ls/false) ((lambda (G3783@t) ((lambda (G3785@ls/false) (if G3785@ls/false (apply (lambda () ((letrec ((G3787@f (lambda (G3789@x G378a@k) ((lambda (G378d@t) ((lambda (G378f@ls/false) (if G378f@ls/false (apply (lambda (G3791@x*) (G378a@k (map (lambda (G3793@x) (list (G2eeb@scheme-stx 'quote) G3793@x)) G3791@x*))) G378f@ls/false) ((lambda (G3795@t) ((lambda (G3797@ls/false) (if G3797@ls/false (apply (lambda (G3799@x*) (G378a@k G3799@x*)) G3797@ls/false) ((lambda (G379b@t) ((lambda (G379d@ls/false) (if G379d@ls/false (apply (lambda (G379f@x G37a0@y) (G3787@f G37a0@y (lambda (G37a3@ls) (G378a@k (cons G379f@x G37a3@ls))))) G379d@ls/false) ((lambda (G37a5@t) ((lambda (G37a7@ls/false) (if G37a7@ls/false (apply (lambda () (list (G2eeb@scheme-stx 'list->vector) G377b@pat-x)) G37a7@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G37a5@t))) (G2f61@syntax-dispatch G37a5@t '_))) G379b@t))) (G2f61@syntax-dispatch G379b@t '(#(scheme-id cons) any any)))) G3795@t))) (G2f61@syntax-dispatch G3795@t '(#(scheme-id list) . each-any)))) G378d@t))) (G2f61@syntax-dispatch G378d@t '(#(scheme-id quote) each-any)))) G3789@x)))) G3787@f) G3779@x (lambda (G37a9@ls) (cons* (G2eeb@scheme-stx 'vector) G37a9@ls)))) G3785@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3783@t))) (G2f61@syntax-dispatch G3783@t '_))) G377d@t))) (G2f61@syntax-dispatch G377d@t '(#(scheme-id quote) each-any)))) G377b@pat-x)) G3779@x))) (set! G3716@vquasi (lambda (G3757@p G3758@lev) ((lambda (G375b@t) ((lambda (G375d@ls/false) (if G375d@ls/false (apply (lambda (G375f@p G3760@q) ((lambda (G3763@t) ((lambda (G3765@ls/false) (if G3765@ls/false (apply (lambda (G3767@p) (if (= G3758@lev '0) (G370e@quasicons* G3767@p (G3716@vquasi G3760@q G3758@lev)) (G3710@quasicons (G3710@quasicons (G36f0@datum 'unquote) (G3718@quasi G3767@p (- G3758@lev '1))) (G3716@vquasi G3760@q G3758@lev)))) G3765@ls/false) ((lambda (G3769@t) ((lambda (G376b@ls/false) (if G376b@ls/false (apply (lambda (G376d@p) (if (= G3758@lev '0) (G3712@quasiappend G376d@p (G3716@vquasi G3760@q G3758@lev)) (G3710@quasicons (G3710@quasicons (G36f0@datum 'unquote-splicing) (G3718@quasi G376d@p (- G3758@lev '1))) (G3716@vquasi G3760@q G3758@lev)))) G376b@ls/false) ((lambda (G376f@t) ((lambda (G3771@ls/false) (if G3771@ls/false (apply (lambda (G3773@p) (G3710@quasicons (G3718@quasi G3773@p G3758@lev) (G3716@vquasi G3760@q G3758@lev))) G3771@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G376f@t))) (G2f61@syntax-dispatch G376f@t 'any))) G3769@t))) (G2f61@syntax-dispatch G3769@t '(#(scheme-id unquote-splicing) . each-any)))) G3763@t))) (G2f61@syntax-dispatch G3763@t '(#(scheme-id unquote) . each-any)))) G375f@p)) G375d@ls/false) ((lambda (G3775@t) ((lambda (G3777@ls/false) (if G3777@ls/false (apply (lambda () (list (G2eeb@scheme-stx 'quote) '())) G3777@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3775@t))) (G2f61@syntax-dispatch G3775@t '()))) G375b@t))) (G2f61@syntax-dispatch G375b@t '(any . any)))) G3757@p))) (set! G3718@quasi (lambda (G3721@p G3722@lev) ((lambda (G3725@t) ((lambda (G3727@ls/false) (if G3727@ls/false (apply (lambda (G3729@p) (if (= G3722@lev '0) G3729@p (G3710@quasicons (G36f0@datum 'unquote) (G3718@quasi (list G3729@p) (- G3722@lev '1))))) G3727@ls/false) ((lambda (G372b@t) ((lambda (G372d@ls/false) (if G372d@ls/false (apply (lambda (G372f@p G3730@q) (if (= G3722@lev '0) (G370e@quasicons* G372f@p (G3718@quasi G3730@q G3722@lev)) (G3710@quasicons (G3710@quasicons (G36f0@datum 'unquote) (G3718@quasi G372f@p (- G3722@lev '1))) (G3718@quasi G3730@q G3722@lev)))) G372d@ls/false) ((lambda (G3733@t) ((lambda (G3735@ls/false) (if G3735@ls/false (apply (lambda (G3737@p G3738@q) (if (= G3722@lev '0) (G3712@quasiappend G3737@p (G3718@quasi G3738@q G3722@lev)) (G3710@quasicons (G3710@quasicons (G36f0@datum 'unquote-splicing) (G3718@quasi G3737@p (- G3722@lev '1))) (G3718@quasi G3738@q G3722@lev)))) G3735@ls/false) ((lambda (G373b@t) ((lambda (G373d@ls/false) (if G373d@ls/false (apply (lambda (G373f@p) (G3710@quasicons (G36f0@datum 'quasiquote) (G3718@quasi (list G373f@p) (+ G3722@lev '1)))) G373d@ls/false) ((lambda (G3741@t) ((lambda (G3743@ls/false) (if G3743@ls/false (apply (lambda (G3745@p G3746@q) (G3710@quasicons (G3718@quasi G3745@p G3722@lev) (G3718@quasi G3746@q G3722@lev))) G3743@ls/false) ((lambda (G3749@t) ((lambda (G374b@ls/false) (if (and G374b@ls/false (apply (lambda (G374d@x) (not (G2d2a@stx? G374d@x))) G374b@ls/false)) (apply (lambda (G374f@x) (G3714@quasivector (G3716@vquasi G374f@x G3722@lev))) G374b@ls/false) ((lambda (G3751@t) ((lambda (G3753@ls/false) (if G3753@ls/false (apply (lambda (G3755@p) (list (G2eeb@scheme-stx 'quote) G3755@p)) G3753@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3751@t))) (G2f61@syntax-dispatch G3751@t 'any))) G3749@t))) (G2f61@syntax-dispatch G3749@t '#(vector each-any)))) G3741@t))) (G2f61@syntax-dispatch G3741@t '(any . any)))) G373b@t))) (G2f61@syntax-dispatch G373b@t '(#(scheme-id quasiquote) any)))) G3733@t))) (G2f61@syntax-dispatch G3733@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G372b@t))) (G2f61@syntax-dispatch G372b@t '((#(scheme-id unquote) . each-any) . any)))) G3725@t))) (G2f61@syntax-dispatch G3725@t '(#(scheme-id unquote) any)))) G3721@p))) (lambda (G3719@x) ((lambda (G371b@t) ((lambda (G371d@ls/false) (if G371d@ls/false (apply (lambda (G371f@e) (G3718@quasi G371f@e '0)) G371d@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G371b@t))) (G2f61@syntax-dispatch G371b@t '(_ any)))) G3719@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f51@quasisyntax-macro ((lambda () ((lambda (G37f6@quasi) (begin (set! G37f6@quasi (lambda (G380e@p G380f@lev) ((lambda (G3812@t) ((lambda (G3814@ls/false) (if G3814@ls/false (apply (lambda (G3816@p) (if (= G380f@lev '0) ((lambda (G3818@g) (values (list G3818@g) (list G3816@p) G3818@g)) (gensym)) (call-with-values (lambda () (G37f6@quasi G3816@p (- G380f@lev '1))) (lambda (G381d@G381a G381e@G381b G381f@G381c) ((lambda (G3823@p G3824@rhs* G3825@lhs*) (values G3825@lhs* G3824@rhs* (list 'unsyntax G3823@p))) G381f@G381c G381e@G381b G381d@G381a))))) G3814@ls/false) ((lambda (G3829@t) ((lambda (G382b@ls/false) (if (and G382b@ls/false (apply (lambda () (= G380f@lev '0)) G382b@ls/false)) (apply (lambda () (G304c@syntax-violation '#f '"incorrect use of unsyntax" G380e@p)) G382b@ls/false) ((lambda (G382d@t) ((lambda (G382f@ls/false) (if G382f@ls/false (apply (lambda (G3831@p* G3832@q) (call-with-values (lambda () (G37f6@quasi G3832@q G380f@lev)) (lambda (G3838@G3835 G3839@G3836 G383a@G3837) ((lambda (G383e@q G383f@rhs* G3840@lhs*) (if (= G380f@lev '0) ((lambda (G3844@g*) (values (append G3844@g* G3840@lhs*) (append G3831@p* G383f@rhs*) (append G3844@g* G383e@q))) (map (lambda (G3846@x) (gensym)) G3831@p*)) (call-with-values (lambda () (G37f6@quasi G3831@p* (- G380f@lev '1))) (lambda (G384b@G3848 G384c@G3849 G384d@G384a) ((lambda (G3851@p* G3852@rhs2* G3853@lhs2*) (values (append G3853@lhs2* G3840@lhs*) (append G3852@rhs2* G383f@rhs*) (cons (cons 'unsyntax G3851@p*) G383e@q))) G384d@G384a G384c@G3849 G384b@G3848))))) G383a@G3837 G3839@G3836 G3838@G3835)))) G382f@ls/false) ((lambda (G3857@t) ((lambda (G3859@ls/false) (if G3859@ls/false (apply (lambda (G385b@p* G385c@q) (call-with-values (lambda () (G37f6@quasi G385c@q G380f@lev)) (lambda (G3862@G385f G3863@G3860 G3864@G3861) ((lambda (G3868@q G3869@rhs* G386a@lhs*) (if (= G380f@lev '0) ((lambda (G386e@g*) (values (append (map (lambda (G3870@g) (cons G3870@g '(...))) G386e@g*) G386a@lhs*) (append G385b@p* G3869@rhs*) (append (apply append (map (lambda (G3872@g) (cons G3872@g '(...))) G386e@g*)) G3868@q))) (map (lambda (G3874@x) (gensym)) G385b@p*)) (call-with-values (lambda () (G37f6@quasi G385b@p* (- G380f@lev '1))) (lambda (G3879@G3876 G387a@G3877 G387b@G3878) ((lambda (G387f@p* G3880@rhs2* G3881@lhs2*) (values (append G3881@lhs2* G386a@lhs*) (append G3880@rhs2* G3869@rhs*) (cons (cons 'unsyntax-splicing G387f@p*) G3868@q))) G387b@G3878 G387a@G3877 G3879@G3876))))) G3864@G3861 G3863@G3860 G3862@G385f)))) G3859@ls/false) ((lambda (G3885@t) ((lambda (G3887@ls/false) (if (and G3887@ls/false (apply (lambda () (= G380f@lev '0)) G3887@ls/false)) (apply (lambda () (G304c@syntax-violation '#f '"incorrect use of unsyntax-splicing" G380e@p)) G3887@ls/false) ((lambda (G3889@t) ((lambda (G388b@ls/false) (if G388b@ls/false (apply (lambda (G388d@p) (call-with-values (lambda () (G37f6@quasi G388d@p (+ G380f@lev '1))) (lambda (G3892@G388f G3893@G3890 G3894@G3891) ((lambda (G3898@p G3899@rhs* G389a@lhs*) (values G389a@lhs* G3899@rhs* (list 'quasisyntax G3898@p))) G3894@G3891 G3893@G3890 G3892@G388f)))) G388b@ls/false) ((lambda (G389e@t) ((lambda (G38a0@ls/false) (if G38a0@ls/false (apply (lambda (G38a2@p G38a3@q) (call-with-values (lambda () (G37f6@quasi G38a2@p G380f@lev)) (lambda (G38ac@G38a6 G38ad@G38a7 G38ae@G38a8) (call-with-values (lambda () (G37f6@quasi G38a3@q G380f@lev)) (lambda (G38b2@G38a9 G38b3@G38aa G38b4@G38ab) ((lambda (G38b8@q G38b9@rhs2* G38ba@lhs2* G38bb@p G38bc@rhs* G38bd@lhs*) (values (append G38ba@lhs2* G38bd@lhs*) (append G38b9@rhs2* G38bc@rhs*) (cons G38bb@p G38b8@q))) G38b4@G38ab G38b3@G38aa G38b2@G38a9 G38ae@G38a8 G38ad@G38a7 G38ac@G38a6)))))) G38a0@ls/false) ((lambda (G38c4@t) ((lambda (G38c6@ls/false) (if G38c6@ls/false (apply (lambda (G38c8@x*) (call-with-values (lambda () (G37f6@quasi G38c8@x* G380f@lev)) (lambda (G38cd@G38ca G38ce@G38cb G38cf@G38cc) ((lambda (G38d3@x* G38d4@rhs* G38d5@lhs*) (values G38d5@lhs* G38d4@rhs* (list->vector G38d3@x*))) G38cf@G38cc G38ce@G38cb G38cd@G38ca)))) G38c6@ls/false) ((lambda (G38d9@t) ((lambda (G38db@ls/false) (if G38db@ls/false (apply (lambda () (values '() '() G380e@p)) G38db@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G38d9@t))) (G2f61@syntax-dispatch G38d9@t '_))) G38c4@t))) (G2f61@syntax-dispatch G38c4@t '#(vector each-any)))) G389e@t))) (G2f61@syntax-dispatch G389e@t '(any . any)))) G3889@t))) (G2f61@syntax-dispatch G3889@t '(#(scheme-id quasisyntax) any)))) G3885@t))) (G2f61@syntax-dispatch G3885@t '#(scheme-id unsyntax-splicing)))) G3857@t))) (G2f61@syntax-dispatch G3857@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G382d@t))) (G2f61@syntax-dispatch G382d@t '((#(scheme-id unsyntax) . each-any) . any)))) G3829@t))) (G2f61@syntax-dispatch G3829@t '#(scheme-id unsyntax)))) G3812@t))) (G2f61@syntax-dispatch G3812@t '(#(scheme-id unsyntax) any)))) G380e@p))) (lambda (G37f7@x) ((lambda (G37f9@t) ((lambda (G37fb@ls/false) (if G37fb@ls/false (apply (lambda (G37fd@e) (call-with-values (lambda () (G37f6@quasi G37fd@e '0)) (lambda (G3802@G37ff G3803@G3800 G3804@G3801) ((lambda (G3808@v G3809@rhs* G380a@lhs*) (G2f17@bless (list 'syntax-case (cons 'list G3809@rhs*) '() (list G380a@lhs* (list 'syntax G3808@v))))) G3804@G3801 G3803@G3800 G3802@G37ff)))) G37fb@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G37f9@t))) (G2f61@syntax-dispatch G37f9@t '(_ any)))) G37f7@x)))) '#f)))) (set! G2f53@define-struct-macro (lambda (G38dd@stx) (G304c@syntax-violation '#f '"define-struct not supported" G38dd@stx))) (set! G2f55@define-record-type-macro (lambda (G38df@x) ((lambda (G38e2@id G38e4@get-record-name G38e6@get-record-constructor-name G38e8@get-record-predicate-name G38ea@get-clause G38ec@foo-rtd-code G38ee@parent-rtd-code G38f0@parent-rcd-code G38f2@foo-rcd-code G38f4@get-protocol-code G38f6@get-fields G38f8@get-mutator-indices G38fa@get-mutators G38fc@get-accessors G38fe@enumerate G3900@do-define-record G3902@verify-clauses) (begin (set! G38e2@id (lambda (G3ad5@ctxt . G3ad7@str*) (G3050@datum->syntax G3ad5@ctxt (string->symbol (apply string-append (map (lambda (G3ad9@x) (if (symbol? G3ad9@x) (symbol->string G3ad9@x) (if (string? G3ad9@x) G3ad9@x (assertion-violation 'define-record-type '"BUG")))) G3ad7@str*)))))) (set! G38e4@get-record-name (lambda (G3ac3@spec) ((lambda (G3ac5@t) ((lambda (G3ac7@ls/false) (if G3ac7@ls/false (apply (lambda (G3ac9@foo G3aca@make-foo G3acb@foo?) G3ac9@foo) G3ac7@ls/false) ((lambda (G3acf@t) ((lambda (G3ad1@ls/false) (if G3ad1@ls/false (apply (lambda (G3ad3@foo) G3ad3@foo) G3ad1@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3acf@t))) (G2f61@syntax-dispatch G3acf@t 'any))) G3ac5@t))) (G2f61@syntax-dispatch G3ac5@t '(any any any)))) G3ac3@spec))) (set! G38e6@get-record-constructor-name (lambda (G3aaf@spec) ((lambda (G3ab1@t) ((lambda (G3ab3@ls/false) (if G3ab3@ls/false (apply (lambda (G3ab5@foo G3ab6@make-foo G3ab7@foo?) G3ab6@make-foo) G3ab3@ls/false) ((lambda (G3abb@t) ((lambda (G3abd@ls/false) (if (and G3abd@ls/false (apply (lambda (G3abf@foo) (G2d62@id? G3abf@foo)) G3abd@ls/false)) (apply (lambda (G3ac1@foo) (G38e2@id G3ac1@foo '"make-" (G2d78@stx->datum G3ac1@foo))) G3abd@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3abb@t))) (G2f61@syntax-dispatch G3abb@t 'any))) G3ab1@t))) (G2f61@syntax-dispatch G3ab1@t '(any any any)))) G3aaf@spec))) (set! G38e8@get-record-predicate-name (lambda (G3a9b@spec) ((lambda (G3a9d@t) ((lambda (G3a9f@ls/false) (if G3a9f@ls/false (apply (lambda (G3aa1@foo G3aa2@make-foo G3aa3@foo?) G3aa3@foo?) G3a9f@ls/false) ((lambda (G3aa7@t) ((lambda (G3aa9@ls/false) (if (and G3aa9@ls/false (apply (lambda (G3aab@foo) (G2d62@id? G3aab@foo)) G3aa9@ls/false)) (apply (lambda (G3aad@foo) (G38e2@id G3aad@foo (G2d78@stx->datum G3aad@foo) '"?")) G3aa9@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3aa7@t))) (G2f61@syntax-dispatch G3aa7@t 'any))) G3a9d@t))) (G2f61@syntax-dispatch G3a9d@t '(any any any)))) G3a9b@spec))) (set! G38ea@get-clause (lambda (G3a89@id G3a8a@ls) ((lambda (G3a8d@t) ((lambda (G3a8f@ls/false) (if G3a8f@ls/false (apply (lambda () '#f) G3a8f@ls/false) ((lambda (G3a91@t) ((lambda (G3a93@ls/false) (if G3a93@ls/false (apply (lambda (G3a95@x G3a96@rest G3a97@ls) (if (G2d6a@free-id=? (G2f17@bless G3a89@id) G3a95@x) (cons G3a95@x G3a96@rest) (G38ea@get-clause G3a89@id G3a97@ls))) G3a93@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3a91@t))) (G2f61@syntax-dispatch G3a91@t '((any . any) . any)))) G3a8d@t))) (G2f61@syntax-dispatch G3a8d@t '()))) G3a8a@ls))) (set! G38ec@foo-rtd-code (lambda (G3a37@name G3a38@clause* G3a39@parent-rtd-code) ((lambda (G3a3e@convert-field-spec*) (begin (set! G3a3e@convert-field-spec* (lambda (G3a6f@ls) (list->vector (map (lambda (G3a71@x) ((lambda (G3a73@t) ((lambda (G3a75@ls/false) (if G3a75@ls/false (apply (lambda (G3a77@name G3a78@rest) (list 'mutable G3a77@name)) G3a75@ls/false) ((lambda (G3a7b@t) ((lambda (G3a7d@ls/false) (if G3a7d@ls/false (apply (lambda (G3a7f@name G3a80@rest) (list 'immutable G3a7f@name)) G3a7d@ls/false) ((lambda (G3a83@t) ((lambda (G3a85@ls/false) (if G3a85@ls/false (apply (lambda (G3a87@name) (list 'immutable G3a87@name)) G3a85@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3a83@t))) (G2f61@syntax-dispatch G3a83@t 'any))) G3a7b@t))) (G2f61@syntax-dispatch G3a7b@t '(#(scheme-id immutable) any . any)))) G3a73@t))) (G2f61@syntax-dispatch G3a73@t '(#(scheme-id mutable) any . any)))) G3a71@x)) G3a6f@ls)))) ((lambda (G3a3f@uid-code G3a40@sealed? G3a41@opaque? G3a42@fields) (G2f17@bless (list 'make-record-type-descriptor (list 'quote G3a37@name) G3a39@parent-rtd-code G3a3f@uid-code G3a40@sealed? G3a41@opaque? G3a42@fields))) ((lambda (G3a47@t) ((lambda (G3a49@ls/false) (if G3a49@ls/false (apply (lambda () (list 'quote (gensym))) G3a49@ls/false) ((lambda (G3a4b@t) ((lambda (G3a4d@ls/false) (if G3a4d@ls/false (apply (lambda (G3a4f@uid) (list 'quote G3a4f@uid)) G3a4d@ls/false) ((lambda (G3a51@t) ((lambda (G3a53@ls/false) (if G3a53@ls/false (apply (lambda () '#f) G3a53@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3a51@t))) (G2f61@syntax-dispatch G3a51@t '_))) G3a4b@t))) (G2f61@syntax-dispatch G3a4b@t '(_ any)))) G3a47@t))) (G2f61@syntax-dispatch G3a47@t '(_)))) (G38ea@get-clause 'nongenerative G3a38@clause*)) ((lambda (G3a55@t) ((lambda (G3a57@ls/false) (if G3a57@ls/false (apply (lambda () '#t) G3a57@ls/false) ((lambda (G3a59@t) ((lambda (G3a5b@ls/false) (if G3a5b@ls/false (apply (lambda () '#f) G3a5b@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3a59@t))) (G2f61@syntax-dispatch G3a59@t '_))) G3a55@t))) (G2f61@syntax-dispatch G3a55@t '(_ #(atom #t))))) (G38ea@get-clause 'sealed G3a38@clause*)) ((lambda (G3a5d@t) ((lambda (G3a5f@ls/false) (if G3a5f@ls/false (apply (lambda () '#t) G3a5f@ls/false) ((lambda (G3a61@t) ((lambda (G3a63@ls/false) (if G3a63@ls/false (apply (lambda () '#f) G3a63@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3a61@t))) (G2f61@syntax-dispatch G3a61@t '_))) G3a5d@t))) (G2f61@syntax-dispatch G3a5d@t '(_ #(atom #t))))) (G38ea@get-clause 'opaque G3a38@clause*)) ((lambda (G3a65@t) ((lambda (G3a67@ls/false) (if G3a67@ls/false (apply (lambda (G3a69@field-spec*) (list 'quote (G3a3e@convert-field-spec* G3a69@field-spec*))) G3a67@ls/false) ((lambda (G3a6b@t) ((lambda (G3a6d@ls/false) (if G3a6d@ls/false (apply (lambda () ''#()) G3a6d@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3a6b@t))) (G2f61@syntax-dispatch G3a6b@t '_))) G3a65@t))) (G2f61@syntax-dispatch G3a65@t '(_ . each-any)))) (G38ea@get-clause 'fields G3a38@clause*))))) '#f))) (set! G38ee@parent-rtd-code (lambda (G3a1f@clause*) ((lambda (G3a21@t) ((lambda (G3a23@ls/false) (if G3a23@ls/false (apply (lambda (G3a25@name) (list 'record-type-descriptor G3a25@name)) G3a23@ls/false) ((lambda (G3a27@t) ((lambda (G3a29@ls/false) (if G3a29@ls/false (apply (lambda () ((lambda (G3a2b@t) ((lambda (G3a2d@ls/false) (if G3a2d@ls/false (apply (lambda (G3a2f@rtd G3a30@rcd) G3a2f@rtd) G3a2d@ls/false) ((lambda (G3a33@t) ((lambda (G3a35@ls/false) (if G3a35@ls/false (apply (lambda () '#f) G3a35@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3a33@t))) (G2f61@syntax-dispatch G3a33@t '#(atom #f)))) G3a2b@t))) (G2f61@syntax-dispatch G3a2b@t '(_ any any)))) (G38ea@get-clause 'parent-rtd G3a1f@clause*))) G3a29@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3a27@t))) (G2f61@syntax-dispatch G3a27@t '#(atom #f)))) G3a21@t))) (G2f61@syntax-dispatch G3a21@t '(_ any)))) (G38ea@get-clause 'parent G3a1f@clause*)))) (set! G38f0@parent-rcd-code (lambda (G3a07@clause*) ((lambda (G3a09@t) ((lambda (G3a0b@ls/false) (if G3a0b@ls/false (apply (lambda (G3a0d@name) (list 'record-constructor-descriptor G3a0d@name)) G3a0b@ls/false) ((lambda (G3a0f@t) ((lambda (G3a11@ls/false) (if G3a11@ls/false (apply (lambda () ((lambda (G3a13@t) ((lambda (G3a15@ls/false) (if G3a15@ls/false (apply (lambda (G3a17@rtd G3a18@rcd) G3a18@rcd) G3a15@ls/false) ((lambda (G3a1b@t) ((lambda (G3a1d@ls/false) (if G3a1d@ls/false (apply (lambda () '#f) G3a1d@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3a1b@t))) (G2f61@syntax-dispatch G3a1b@t '#(atom #f)))) G3a13@t))) (G2f61@syntax-dispatch G3a13@t '(_ any any)))) (G38ea@get-clause 'parent-rtd G3a07@clause*))) G3a11@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3a0f@t))) (G2f61@syntax-dispatch G3a0f@t '#(atom #f)))) G3a09@t))) (G2f61@syntax-dispatch G3a09@t '(_ any)))) (G38ea@get-clause 'parent G3a07@clause*)))) (set! G38f2@foo-rcd-code (lambda (G39ff@clause* G3a00@foo-rtd G3a01@protocol G3a02@parent-rcd-code) (list 'make-record-constructor-descriptor G3a00@foo-rtd G3a02@parent-rcd-code G3a01@protocol))) (set! G38f4@get-protocol-code (lambda (G39f3@clause*) ((lambda (G39f5@t) ((lambda (G39f7@ls/false) (if G39f7@ls/false (apply (lambda (G39f9@expr) G39f9@expr) G39f7@ls/false) ((lambda (G39fb@t) ((lambda (G39fd@ls/false) (if G39fd@ls/false (apply (lambda () '#f) G39fd@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G39fb@t))) (G2f61@syntax-dispatch G39fb@t '_))) G39f5@t))) (G2f61@syntax-dispatch G39f5@t '(_ any)))) (G38ea@get-clause 'protocol G39f3@clause*)))) (set! G38f6@get-fields (lambda (G39e1@clause*) ((lambda (G39e3@t) ((lambda (G39e5@ls/false) (if G39e5@ls/false (apply (lambda () '()) G39e5@ls/false) ((lambda (G39e7@t) ((lambda (G39e9@ls/false) (if G39e9@ls/false (apply (lambda (G39eb@f*) G39eb@f*) G39e9@ls/false) ((lambda (G39ed@t) ((lambda (G39ef@ls/false) (if G39ef@ls/false (apply (lambda (G39f1@rest) (G38f6@get-fields G39f1@rest)) G39ef@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G39ed@t))) (G2f61@syntax-dispatch G39ed@t '(_ . any)))) G39e7@t))) (G2f61@syntax-dispatch G39e7@t '((#(scheme-id fields) . each-any) . _)))) G39e3@t))) (G2f61@syntax-dispatch G39e3@t '()))) G39e1@clause*))) (set! G38f8@get-mutator-indices (lambda (G39c9@fields) ((letrec ((G39cb@f (lambda (G39cd@fields G39ce@i) ((lambda (G39d1@t) ((lambda (G39d3@ls/false) (if G39d3@ls/false (apply (lambda () '()) G39d3@ls/false) ((lambda (G39d5@t) ((lambda (G39d7@ls/false) (if G39d7@ls/false (apply (lambda (G39d9@rest) (cons G39ce@i (G39cb@f G39d9@rest (+ G39ce@i '1)))) G39d7@ls/false) ((lambda (G39db@t) ((lambda (G39dd@ls/false) (if G39dd@ls/false (apply (lambda (G39df@rest) (G39cb@f G39df@rest (+ G39ce@i '1))) G39dd@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G39db@t))) (G2f61@syntax-dispatch G39db@t '(_ . any)))) G39d5@t))) (G2f61@syntax-dispatch G39d5@t '((#(scheme-id mutable) . _) . any)))) G39d1@t))) (G2f61@syntax-dispatch G39d1@t '()))) G39cd@fields)))) G39cb@f) G39c9@fields '0))) (set! G38fa@get-mutators (lambda (G399f@foo G39a0@fields) ((lambda (G39a4@gen-name) (begin (set! G39a4@gen-name (lambda (G39c7@x) (G3050@datum->syntax G399f@foo (string->symbol (string-append (symbol->string (G3052@syntax->datum G399f@foo)) '"-" (symbol->string (G3052@syntax->datum G39c7@x)) '"-set!"))))) ((letrec ((G39a5@f (lambda (G39a7@fields) ((lambda (G39a9@t) ((lambda (G39ab@ls/false) (if G39ab@ls/false (apply (lambda () '()) G39ab@ls/false) ((lambda (G39ad@t) ((lambda (G39af@ls/false) (if G39af@ls/false (apply (lambda (G39b1@name G39b2@accessor G39b3@mutator G39b4@rest) (cons G39b3@mutator (G39a5@f G39b4@rest))) G39af@ls/false) ((lambda (G39b9@t) ((lambda (G39bb@ls/false) (if G39bb@ls/false (apply (lambda (G39bd@name G39be@rest) (cons (G39a4@gen-name G39bd@name) (G39a5@f G39be@rest))) G39bb@ls/false) ((lambda (G39c1@t) ((lambda (G39c3@ls/false) (if G39c3@ls/false (apply (lambda (G39c5@rest) (G39a5@f G39c5@rest)) G39c3@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G39c1@t))) (G2f61@syntax-dispatch G39c1@t '(_ . any)))) G39b9@t))) (G2f61@syntax-dispatch G39b9@t '((#(scheme-id mutable) any) . any)))) G39ad@t))) (G2f61@syntax-dispatch G39ad@t '((#(scheme-id mutable) any any any) . any)))) G39a9@t))) (G2f61@syntax-dispatch G39a9@t '()))) G39a7@fields)))) G39a5@f) G39a0@fields))) '#f))) (set! G38fc@get-accessors (lambda (G395b@foo G395c@fields) ((lambda (G3960@gen-name) (begin (set! G3960@gen-name (lambda (G399d@x) (G3050@datum->syntax G395b@foo (string->symbol (string-append (symbol->string (G3052@syntax->datum G395b@foo)) '"-" (symbol->string (G3052@syntax->datum G399d@x))))))) (map (lambda (G3961@field) ((lambda (G3963@t) ((lambda (G3965@ls/false) (if (and G3965@ls/false (apply (lambda (G3967@name G3968@accessor G3969@mutator) (G2d62@id? G3968@accessor)) G3965@ls/false)) (apply (lambda (G396d@name G396e@accessor G396f@mutator) G396e@accessor) G3965@ls/false) ((lambda (G3973@t) ((lambda (G3975@ls/false) (if (and G3975@ls/false (apply (lambda (G3977@name G3978@accessor) (G2d62@id? G3978@accessor)) G3975@ls/false)) (apply (lambda (G397b@name G397c@accessor) G397c@accessor) G3975@ls/false) ((lambda (G397f@t) ((lambda (G3981@ls/false) (if (and G3981@ls/false (apply (lambda (G3983@name) (G2d62@id? G3983@name)) G3981@ls/false)) (apply (lambda (G3985@name) (G3960@gen-name G3985@name)) G3981@ls/false) ((lambda (G3987@t) ((lambda (G3989@ls/false) (if (and G3989@ls/false (apply (lambda (G398b@name) (G2d62@id? G398b@name)) G3989@ls/false)) (apply (lambda (G398d@name) (G3960@gen-name G398d@name)) G3989@ls/false) ((lambda (G398f@t) ((lambda (G3991@ls/false) (if (and G3991@ls/false (apply (lambda (G3993@name) (G2d62@id? G3993@name)) G3991@ls/false)) (apply (lambda (G3995@name) (G3960@gen-name G3995@name)) G3991@ls/false) ((lambda (G3997@t) ((lambda (G3999@ls/false) (if G3999@ls/false (apply (lambda (G399b@others) (G304c@syntax-violation '#f '"invalid field spec" G3961@field)) G3999@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3997@t))) (G2f61@syntax-dispatch G3997@t 'any))) G398f@t))) (G2f61@syntax-dispatch G398f@t 'any))) G3987@t))) (G2f61@syntax-dispatch G3987@t '(#(scheme-id immutable) any)))) G397f@t))) (G2f61@syntax-dispatch G397f@t '(#(scheme-id mutable) any)))) G3973@t))) (G2f61@syntax-dispatch G3973@t '(#(scheme-id immutable) any any)))) G3963@t))) (G2f61@syntax-dispatch G3963@t '(#(scheme-id mutable) any any any)))) G3961@field)) G395c@fields))) '#f))) (set! G38fe@enumerate (lambda (G3953@ls) ((letrec ((G3955@f (lambda (G3957@ls G3958@i) (if (null? G3957@ls) '() (cons G3958@i (G3955@f (cdr G3957@ls) (+ G3958@i '1))))))) G3955@f) G3953@ls '0))) (set! G3900@do-define-record (lambda (G392b@namespec G392c@clause*) ((lambda (G392f@foo) ((lambda (G3931@foo-rtd) ((lambda (G3933@foo-rcd) ((lambda (G3935@protocol) ((lambda (G3937@make-foo) ((lambda (G3939@fields) ((lambda (G393b@idx*) ((lambda (G393d@foo-x*) ((lambda (G393f@set-foo-x!*) ((lambda (G3941@set-foo-idx*) ((lambda (G3943@foo?) ((lambda (G3945@foo-rtd-code) ((lambda (G3947@foo-rcd-code) ((lambda (G3949@protocol-code) ((lambda () (G2f17@bless (cons 'begin (cons (list 'define G3931@foo-rtd G3945@foo-rtd-code) (cons (list 'define G3935@protocol G3949@protocol-code) (cons (list 'define G3933@foo-rcd G3947@foo-rcd-code) (cons (list 'define-syntax G392f@foo (list 'list ''$rtd (list 'syntax G3931@foo-rtd) (list 'syntax G3933@foo-rcd))) (cons (list 'define G3943@foo? (list 'record-predicate G3931@foo-rtd)) (cons (list 'define G3937@make-foo (list 'record-constructor G3933@foo-rcd)) (append (map (lambda (G394b@foo-x G394c@idx) (list 'define G394b@foo-x (list 'record-accessor G3931@foo-rtd G394c@idx))) G393d@foo-x* G393b@idx*) (map (lambda (G394f@set-foo-x! G3950@idx) (list 'define G394f@set-foo-x! (list 'record-mutator G3931@foo-rtd G3950@idx))) G393f@set-foo-x!* G3941@set-foo-idx*))))))))))))) (G38f4@get-protocol-code G392c@clause*))) (G38f2@foo-rcd-code G392c@clause* G3931@foo-rtd G3935@protocol (G38f0@parent-rcd-code G392c@clause*)))) (G38ec@foo-rtd-code G392f@foo G392c@clause* (G38ee@parent-rtd-code G392c@clause*)))) (G38e8@get-record-predicate-name G392b@namespec))) (G38f8@get-mutator-indices G3939@fields))) (G38fa@get-mutators G392f@foo G3939@fields))) (G38fc@get-accessors G392f@foo G3939@fields))) (G38fe@enumerate G3939@fields))) (G38f6@get-fields G392c@clause*))) (G38e6@get-record-constructor-name G392b@namespec))) (gensym))) (gensym))) (gensym))) (G38e4@get-record-name G392b@namespec)))) (set! G3902@verify-clauses (lambda (G390b@x G390c@cls*) ((lambda (G3910@valid-kwds G3912@free-id-member?) (begin (set! G3910@valid-kwds (map G2f17@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3912@free-id-member? (lambda (G3927@x G3928@ls) (and (pair? G3928@ls) (or (G2d6a@free-id=? G3927@x (car G3928@ls)) (G3912@free-id-member? G3927@x (cdr G3928@ls)))))) ((letrec ((G3913@f (lambda (G3915@cls* G3916@seen*) (if (not (null? G3915@cls*)) ((lambda (G3919@t) ((lambda (G391b@ls/false) (if G391b@ls/false (apply (lambda (G391d@kwd G391e@rest) (if (or (not (G2d62@id? G391d@kwd)) (not (G3912@free-id-member? G391d@kwd G3910@valid-kwds))) (G304c@syntax-violation '#f '"not a valid define-record-type keyword" G391d@kwd) (if (G2d70@bound-id-member? G391d@kwd G3916@seen*) (G304c@syntax-violation '#f '"duplicate use of keyword " G390b@x G391d@kwd) (G3913@f (cdr G3915@cls*) (cons G391d@kwd G3916@seen*))))) G391b@ls/false) ((lambda (G3921@t) ((lambda (G3923@ls/false) (if G3923@ls/false (apply (lambda (G3925@cls) (G304c@syntax-violation '#f '"malformed define-record-type clause" G3925@cls)) G3923@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3921@t))) (G2f61@syntax-dispatch G3921@t 'any))) G3919@t))) (G2f61@syntax-dispatch G3919@t '(any . any)))) (car G3915@cls*)) (void))))) G3913@f) G390c@cls* '()))) '#f '#f))) ((lambda (G3903@t) ((lambda (G3905@ls/false) (if G3905@ls/false (apply (lambda (G3907@namespec G3908@clause*) (begin (G3902@verify-clauses G38df@x G3908@clause*) (G3900@do-define-record G3907@namespec G3908@clause*))) G3905@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3903@t))) (G2f61@syntax-dispatch G3903@t '(_ any . each-any)))) G38df@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f57@define-condition-type-macro (lambda (G3adb@x) ((lambda (G3ade@mkname) (begin (set! G3ade@mkname (lambda (G3b0b@name G3b0c@suffix) (G3050@datum->syntax G3b0b@name (string->symbol (string-append (symbol->string (G3052@syntax->datum G3b0b@name)) G3b0c@suffix))))) ((lambda (G3adf@t) ((lambda (G3ae1@ls/false) (if (and G3ae1@ls/false (apply (lambda (G3ae3@ctxt G3ae4@name G3ae5@super G3ae6@constructor G3ae7@predicate G3ae8@field* G3ae9@accessor*) (and (G2d62@id? G3ae4@name) (G2d62@id? G3ae5@super) (G2d62@id? G3ae6@constructor) (G2d62@id? G3ae7@predicate) (for-all G2d62@id? G3ae8@field*) (for-all G2d62@id? G3ae9@accessor*))) G3ae1@ls/false)) (apply (lambda (G3af1@ctxt G3af2@name G3af3@super G3af4@constructor G3af5@predicate G3af6@field* G3af7@accessor*) ((lambda (G3aff@aux-accessor*) (G2f17@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3af2@name G3af4@constructor (gensym)) (cons (list 'parent G3af3@super) (cons (cons 'fields (map (lambda (G3b01@field G3b02@aux) (list 'immutable G3b01@field G3b02@aux)) G3af6@field* G3aff@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3af5@predicate (list 'condition-predicate (list 'record-type-descriptor G3af2@name))) (map (lambda (G3b05@accessor G3b06@aux) (list 'define G3b05@accessor (list 'condition-accessor (list 'record-type-descriptor G3af2@name) G3b06@aux))) G3af7@accessor* G3aff@aux-accessor*)))))) (map (lambda (G3b09@x) (gensym)) G3af7@accessor*))) G3ae1@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3adf@t))) (G2f61@syntax-dispatch G3adf@t '(any any any any any . #(each (any any)))))) G3adb@x))) '#f))) (set! G2f59@incorrect-usage-macro (lambda (G3b0f@e) (G304c@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b0f@e))) (set! G2f5b@parameterize-macro (lambda (G3b11@e) ((lambda (G3b13@t) ((lambda (G3b15@ls/false) (if G3b15@ls/false (apply (lambda (G3b17@b G3b18@b*) (G2f17@bless (cons 'let (cons '() (cons G3b17@b G3b18@b*))))) G3b15@ls/false) ((lambda (G3b1b@t) ((lambda (G3b1d@ls/false) (if G3b1d@ls/false (apply (lambda (G3b1f@olhs* G3b20@orhs* G3b21@b G3b22@b*) ((lambda (G3b27@lhs* G3b28@rhs*) (G2f17@bless (cons (list 'lambda (append G3b27@lhs* G3b28@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b2b@lhs G3b2c@rhs) (list 'let (list (list 't (list G3b2b@lhs))) (list G3b2b@lhs G3b2c@rhs) (cons 'set! (cons G3b2c@rhs '(t))))) G3b27@lhs* G3b28@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b21@b G3b22@b*))) '(swap)))))) (append G3b1f@olhs* G3b20@orhs*)))) (G303a@generate-temporaries G3b1f@olhs*) (G303a@generate-temporaries G3b20@orhs*))) G3b1d@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3b1b@t))) (G2f61@syntax-dispatch G3b1b@t '(_ #(each (any any)) any . each-any)))) G3b13@t))) (G2f61@syntax-dispatch G3b13@t '(_ () any . each-any)))) G3b11@e))) (set! G2f5d@foreign-call-transformer (lambda (G3b2f@e G3b30@r G3b31@mr) ((lambda (G3b35@t) ((lambda (G3b37@ls/false) (if G3b37@ls/false (apply (lambda (G3b39@name G3b3a@arg*) (cons 'foreign-call (cons (G2f85@chi-expr G3b39@name G3b30@r G3b31@mr) (G2f81@chi-expr* G3b3a@arg* G3b30@r G3b31@mr)))) G3b37@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3b35@t))) (G2f61@syntax-dispatch G3b35@t '(_ any . each-any)))) G3b2f@e))) (set! G2f5f@convert-pattern (lambda (G3b3d@pattern G3b3e@keys) ((lambda (G3b42@cvt* G3b44@cvt) (begin (set! G3b42@cvt* (lambda (G3bd3@p* G3bd4@n G3bd5@ids) (if (null? G3bd3@p*) (values '() G3bd5@ids) (call-with-values (lambda () (G3b42@cvt* (cdr G3bd3@p*) G3bd4@n G3bd5@ids)) (lambda (G3bdb@G3bd9 G3bdc@G3bda) ((lambda (G3bdf@ids G3be0@y) (call-with-values (lambda () (G3b44@cvt (car G3bd3@p*) G3bd4@n G3bdf@ids)) (lambda (G3be5@G3be3 G3be6@G3be4) ((lambda (G3be9@ids G3bea@x) (values (cons G3bea@x G3be0@y) G3be9@ids)) G3be6@G3be4 G3be5@G3be3)))) G3bdc@G3bda G3bdb@G3bd9)))))) (set! G3b44@cvt (lambda (G3b45@p G3b46@n G3b47@ids) ((lambda (G3b4b@t) ((lambda (G3b4d@ls/false) (if (and G3b4d@ls/false (apply (lambda (G3b4f@id) (G2d62@id? G3b4f@id)) G3b4d@ls/false)) (apply (lambda (G3b51@id) (if (G2d70@bound-id-member? G3b45@p G3b3e@keys) (values (vector 'free-id G3b45@p) G3b47@ids) (if (G2d6a@free-id=? G3b45@p (G2eeb@scheme-stx '_)) (values '_ G3b47@ids) (values 'any (cons (cons G3b45@p G3b46@n) G3b47@ids))))) G3b4d@ls/false) ((lambda (G3b53@t) ((lambda (G3b55@ls/false) (if (and G3b55@ls/false (apply (lambda (G3b57@p G3b58@dots) (G2f63@ellipsis? G3b58@dots)) G3b55@ls/false)) (apply (lambda (G3b5b@p G3b5c@dots) (call-with-values (lambda () (G3b44@cvt G3b5b@p (+ G3b46@n '1) G3b47@ids)) (lambda (G3b61@G3b5f G3b62@G3b60) ((lambda (G3b65@ids G3b66@p) (values (if (eq? G3b66@p 'any) 'each-any (vector 'each G3b66@p)) G3b65@ids)) G3b62@G3b60 G3b61@G3b5f)))) G3b55@ls/false) ((lambda (G3b69@t) ((lambda (G3b6b@ls/false) (if (and G3b6b@ls/false (apply (lambda (G3b6d@x G3b6e@dots G3b6f@ys G3b70@z) (G2f63@ellipsis? G3b6e@dots)) G3b6b@ls/false)) (apply (lambda (G3b75@x G3b76@dots G3b77@ys G3b78@z) (call-with-values (lambda () (G3b44@cvt G3b78@z G3b46@n G3b47@ids)) (lambda (G3b7f@G3b7d G3b80@G3b7e) ((lambda (G3b83@ids G3b84@z) (call-with-values (lambda () (G3b42@cvt* G3b77@ys G3b46@n G3b83@ids)) (lambda (G3b89@G3b87 G3b8a@G3b88) ((lambda (G3b8d@ids G3b8e@ys) (call-with-values (lambda () (G3b44@cvt G3b75@x (+ G3b46@n '1) G3b8d@ids)) (lambda (G3b93@G3b91 G3b94@G3b92) ((lambda (G3b97@ids G3b98@x) (values (vector 'each+ G3b98@x (reverse G3b8e@ys) G3b84@z) G3b97@ids)) G3b94@G3b92 G3b93@G3b91)))) G3b8a@G3b88 G3b89@G3b87)))) G3b80@G3b7e G3b7f@G3b7d)))) G3b6b@ls/false) ((lambda (G3b9b@t) ((lambda (G3b9d@ls/false) (if G3b9d@ls/false (apply (lambda (G3b9f@x G3ba0@y) (call-with-values (lambda () (G3b44@cvt G3ba0@y G3b46@n G3b47@ids)) (lambda (G3ba5@G3ba3 G3ba6@G3ba4) ((lambda (G3ba9@ids G3baa@y) (call-with-values (lambda () (G3b44@cvt G3b9f@x G3b46@n G3ba9@ids)) (lambda (G3baf@G3bad G3bb0@G3bae) ((lambda (G3bb3@ids G3bb4@x) (values (cons G3bb4@x G3baa@y) G3bb3@ids)) G3bb0@G3bae G3baf@G3bad)))) G3ba6@G3ba4 G3ba5@G3ba3)))) G3b9d@ls/false) ((lambda (G3bb7@t) ((lambda (G3bb9@ls/false) (if G3bb9@ls/false (apply (lambda () (values '() G3b47@ids)) G3bb9@ls/false) ((lambda (G3bbb@t) ((lambda (G3bbd@ls/false) (if (and G3bbd@ls/false (apply (lambda (G3bbf@p) (not (G2d2a@stx? G3bbf@p))) G3bbd@ls/false)) (apply (lambda (G3bc1@p) (call-with-values (lambda () (G3b44@cvt G3bc1@p G3b46@n G3b47@ids)) (lambda (G3bc5@G3bc3 G3bc6@G3bc4) ((lambda (G3bc9@ids G3bca@p) (values (vector 'vector G3bca@p) G3bc9@ids)) G3bc6@G3bc4 G3bc5@G3bc3)))) G3bbd@ls/false) ((lambda (G3bcd@t) ((lambda (G3bcf@ls/false) (if G3bcf@ls/false (apply (lambda (G3bd1@datum) (values (vector 'atom (G2d78@stx->datum G3bd1@datum)) G3b47@ids)) G3bcf@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3bcd@t))) (G2f61@syntax-dispatch G3bcd@t 'any))) G3bbb@t))) (G2f61@syntax-dispatch G3bbb@t '#(vector each-any)))) G3bb7@t))) (G2f61@syntax-dispatch G3bb7@t '()))) G3b9b@t))) (G2f61@syntax-dispatch G3b9b@t '(any . any)))) G3b69@t))) (G2f61@syntax-dispatch G3b69@t '(any any . #(each+ any () any))))) G3b53@t))) (G2f61@syntax-dispatch G3b53@t '(any any)))) G3b4b@t))) (G2f61@syntax-dispatch G3b4b@t 'any))) G3b45@p))) (G3b44@cvt G3b3d@pattern '0 '()))) '#f '#f))) (set! G2f61@syntax-dispatch ((lambda () ((lambda (G3bee@stx^ G3bf0@match-each G3bf2@match-each+ G3bf4@match-each-any G3bf6@match-empty G3bf8@combine G3bfa@match* G3bfc@match) (begin (set! G3bee@stx^ (lambda (G3cb7@e G3cb8@m* G3cb9@s* G3cba@ae*) (if (and (null? G3cb8@m*) (null? G3cb9@s*) (null? G3cba@ae*)) G3cb7@e (G2d4a@mkstx G3cb7@e G3cb8@m* G3cb9@s* G3cba@ae*)))) (set! G3bf0@match-each (lambda (G3c9a@e G3c9b@p G3c9c@m* G3c9d@s* G3c9e@ae*) (if (pair? G3c9a@e) ((lambda (G3ca4@first) (and G3ca4@first ((lambda (G3ca6@rest) (and G3ca6@rest (cons G3ca4@first G3ca6@rest))) (G3bf0@match-each (cdr G3c9a@e) G3c9b@p G3c9c@m* G3c9d@s* G3c9e@ae*)))) (G3bfc@match (car G3c9a@e) G3c9b@p G3c9c@m* G3c9d@s* G3c9e@ae* '())) (if (null? G3c9a@e) '() (if (G2d2a@stx? G3c9a@e) (and (not (G2cdc@top-marked? G3c9c@m*)) (call-with-values (lambda () (G2d48@join-wraps G3c9c@m* G3c9d@s* G3c9e@ae* G3c9a@e)) (lambda (G3cab@G3ca8 G3cac@G3ca9 G3cad@G3caa) ((lambda (G3cb1@ae* G3cb2@s* G3cb3@m*) (G3bf0@match-each (G2d2e@stx-expr G3c9a@e) G3c9b@p G3cb3@m* G3cb2@s* G3cb1@ae*)) G3cad@G3caa G3cac@G3ca9 G3cab@G3ca8)))) (if (G28f3@G281e@annotation? G3c9a@e) (G3bf0@match-each (G28f5@G2822@annotation-expression G3c9a@e) G3c9b@p G3c9c@m* G3c9d@s* G3c9e@ae*) '#f)))))) (set! G3bf2@match-each+ (lambda (G3c60@e G3c61@x-pat G3c62@y-pat G3c63@z-pat G3c64@m* G3c65@s* G3c66@ae* G3c67@r) ((letrec ((G3c70@f (lambda (G3c72@e G3c73@m* G3c74@s* G3c75@ae*) (if (pair? G3c72@e) (call-with-values (lambda () (G3c70@f (cdr G3c72@e) G3c73@m* G3c74@s* G3c75@ae*)) (lambda (G3c7d@G3c7a G3c7e@G3c7b G3c7f@G3c7c) ((lambda (G3c83@r G3c84@y-pat G3c85@xr*) (if G3c83@r (if (null? G3c84@y-pat) ((lambda (G3c89@xr) (if G3c89@xr (values (cons G3c89@xr G3c85@xr*) G3c84@y-pat G3c83@r) (values '#f '#f '#f))) (G3bfc@match (car G3c72@e) G3c61@x-pat G3c73@m* G3c74@s* G3c75@ae* '())) (values '() (cdr G3c84@y-pat) (G3bfc@match (car G3c72@e) (car G3c84@y-pat) G3c73@m* G3c74@s* G3c75@ae* G3c83@r))) (values '#f '#f '#f))) G3c7f@G3c7c G3c7e@G3c7b G3c7d@G3c7a))) (if (G2d2a@stx? G3c72@e) (if (G2cdc@top-marked? G3c73@m*) (values '() G3c62@y-pat (G3bfc@match G3c72@e G3c63@z-pat G3c73@m* G3c74@s* G3c75@ae* G3c67@r)) (call-with-values (lambda () (G2d48@join-wraps G3c73@m* G3c74@s* G3c75@ae* G3c72@e)) (lambda (G3c8e@G3c8b G3c8f@G3c8c G3c90@G3c8d) ((lambda (G3c94@ae* G3c95@s* G3c96@m*) (G3c70@f (G2d2e@stx-expr G3c72@e) G3c96@m* G3c95@s* G3c94@ae*)) G3c90@G3c8d G3c8f@G3c8c G3c8e@G3c8b)))) (if (G28f3@G281e@annotation? G3c72@e) (G3c70@f (G28f5@G2822@annotation-expression G3c72@e) G3c73@m* G3c74@s* G3c75@ae*) (values '() G3c62@y-pat (G3bfc@match G3c72@e G3c63@z-pat G3c73@m* G3c74@s* G3c75@ae* G3c67@r)))))))) G3c70@f) G3c60@e G3c64@m* G3c65@s* G3c66@ae*))) (set! G3bf4@match-each-any (lambda (G3c47@e G3c48@m* G3c49@s* G3c4a@ae*) (if (pair? G3c47@e) ((lambda (G3c4f@l) (and G3c4f@l (cons (G3bee@stx^ (car G3c47@e) G3c48@m* G3c49@s* G3c4a@ae*) G3c4f@l))) (G3bf4@match-each-any (cdr G3c47@e) G3c48@m* G3c49@s* G3c4a@ae*)) (if (null? G3c47@e) '() (if (G2d2a@stx? G3c47@e) (and (not (G2cdc@top-marked? G3c48@m*)) (call-with-values (lambda () (G2d48@join-wraps G3c48@m* G3c49@s* G3c4a@ae* G3c47@e)) (lambda (G3c54@G3c51 G3c55@G3c52 G3c56@G3c53) ((lambda (G3c5a@ae* G3c5b@s* G3c5c@m*) (G3bf4@match-each-any (G2d2e@stx-expr G3c47@e) G3c5c@m* G3c5b@s* G3c5a@ae*)) G3c56@G3c53 G3c55@G3c52 G3c54@G3c51)))) (if (G28f3@G281e@annotation? G3c47@e) (G3bf4@match-each-any (G28f5@G2822@annotation-expression G3c47@e) G3c48@m* G3c49@s* G3c4a@ae*) '#f)))))) (set! G3bf6@match-empty (lambda (G3c41@p G3c42@r) (if (null? G3c41@p) G3c42@r (if (eq? G3c41@p '_) G3c42@r (if (eq? G3c41@p 'any) (cons '() G3c42@r) (if (pair? G3c41@p) (G3bf6@match-empty (car G3c41@p) (G3bf6@match-empty (cdr G3c41@p) G3c42@r)) (if (eq? G3c41@p 'each-any) (cons '() G3c42@r) ((lambda (G3c45@t) (if (memv G3c45@t '(each)) (G3bf6@match-empty (vector-ref G3c41@p '1) G3c42@r) (if (memv G3c45@t '(each+)) (G3bf6@match-empty (vector-ref G3c41@p '1) (G3bf6@match-empty (reverse (vector-ref G3c41@p '2)) (G3bf6@match-empty (vector-ref G3c41@p '3) G3c42@r))) (if (memv G3c45@t '(free-id atom)) G3c42@r (if (memv G3c45@t '(scheme-id atom)) G3c42@r (if (memv G3c45@t '(vector)) (G3bf6@match-empty (vector-ref G3c41@p '1) G3c42@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c41@p))))))) (vector-ref G3c41@p '0))))))))) (set! G3bf8@combine (lambda (G3c3d@r* G3c3e@r) (if (null? (car G3c3d@r*)) G3c3e@r (cons (map car G3c3d@r*) (G3bf8@combine (map cdr G3c3d@r*) G3c3e@r))))) (set! G3bfa@match* (lambda (G3c1c@e G3c1d@p G3c1e@m* G3c1f@s* G3c20@ae* G3c21@r) (if (null? G3c1d@p) (and (null? G3c1c@e) G3c21@r) (if (pair? G3c1d@p) (and (pair? G3c1c@e) (G3bfc@match (car G3c1c@e) (car G3c1d@p) G3c1e@m* G3c1f@s* G3c20@ae* (G3bfc@match (cdr G3c1c@e) (cdr G3c1d@p) G3c1e@m* G3c1f@s* G3c20@ae* G3c21@r))) (if (eq? G3c1d@p 'each-any) ((lambda (G3c28@l) (and G3c28@l (cons G3c28@l G3c21@r))) (G3bf4@match-each-any G3c1c@e G3c1e@m* G3c1f@s* G3c20@ae*)) ((lambda (G3c2a@t) (if (memv G3c2a@t '(each)) (if (null? G3c1c@e) (G3bf6@match-empty (vector-ref G3c1d@p '1) G3c21@r) ((lambda (G3c2c@r*) (and G3c2c@r* (G3bf8@combine G3c2c@r* G3c21@r))) (G3bf0@match-each G3c1c@e (vector-ref G3c1d@p '1) G3c1e@m* G3c1f@s* G3c20@ae*))) (if (memv G3c2a@t '(free-id)) (and (symbol? G3c1c@e) (G2cdc@top-marked? G3c1e@m*) (G2d6a@free-id=? (G3bee@stx^ G3c1c@e G3c1e@m* G3c1f@s* G3c20@ae*) (vector-ref G3c1d@p '1)) G3c21@r) (if (memv G3c2a@t '(scheme-id)) (and (symbol? G3c1c@e) (G2cdc@top-marked? G3c1e@m*) (G2d6a@free-id=? (G3bee@stx^ G3c1c@e G3c1e@m* G3c1f@s* G3c20@ae*) (G2eeb@scheme-stx (vector-ref G3c1d@p '1))) G3c21@r) (if (memv G3c2a@t '(each+)) (call-with-values (lambda () (G3bf2@match-each+ G3c1c@e (vector-ref G3c1d@p '1) (vector-ref G3c1d@p '2) (vector-ref G3c1d@p '3) G3c1e@m* G3c1f@s* G3c20@ae* G3c21@r)) (lambda (G3c31@G3c2e G3c32@G3c2f G3c33@G3c30) ((lambda (G3c37@r G3c38@y-pat G3c39@xr*) (and G3c37@r (null? G3c38@y-pat) (if (null? G3c39@xr*) (G3bf6@match-empty (vector-ref G3c1d@p '1) G3c37@r) (G3bf8@combine G3c39@xr* G3c37@r)))) G3c33@G3c30 G3c32@G3c2f G3c31@G3c2e))) (if (memv G3c2a@t '(atom)) (and (fast-equal? (vector-ref G3c1d@p '1) (G2d76@strip G3c1c@e G3c1e@m*)) G3c21@r) (if (memv G3c2a@t '(vector)) (and (vector? G3c1c@e) (G3bfc@match (vector->list G3c1c@e) (vector-ref G3c1d@p '1) G3c1e@m* G3c1f@s* G3c20@ae* G3c21@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c1d@p)))))))) (vector-ref G3c1d@p '0))))))) (set! G3bfc@match (lambda (G3c01@e G3c02@p G3c03@m* G3c04@s* G3c05@ae* G3c06@r) (if (not G3c06@r) '#f (if (eq? G3c02@p '_) G3c06@r (if (eq? G3c02@p 'any) (cons (G3bee@stx^ G3c01@e G3c03@m* G3c04@s* G3c05@ae*) G3c06@r) (if (G2d2a@stx? G3c01@e) (and (not (G2cdc@top-marked? G3c03@m*)) (call-with-values (lambda () (G2d48@join-wraps G3c03@m* G3c04@s* G3c05@ae* G3c01@e)) (lambda (G3c10@G3c0d G3c11@G3c0e G3c12@G3c0f) ((lambda (G3c16@ae* G3c17@s* G3c18@m*) (G3bfc@match (G2d2e@stx-expr G3c01@e) G3c02@p G3c18@m* G3c17@s* G3c16@ae* G3c06@r)) G3c12@G3c0f G3c11@G3c0e G3c10@G3c0d)))) (if (G28f3@G281e@annotation? G3c01@e) (G3bfc@match (G28f5@G2822@annotation-expression G3c01@e) G3c02@p G3c03@m* G3c04@s* G3c05@ae* G3c06@r) (G3bfa@match* G3c01@e G3c02@p G3c03@m* G3c04@s* G3c05@ae* G3c06@r)))))))) (lambda (G3bfd@e G3bfe@p) (G3bfc@match G3bfd@e G3bfe@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f63@ellipsis? (lambda (G3cbf@x) (and (G2d62@id? G3cbf@x) (G2d6a@free-id=? G3cbf@x (G2eeb@scheme-stx '...))))) (set! G2f65@underscore? (lambda (G3cc1@x) (and (G2d62@id? G3cc1@x) (G2d6a@free-id=? G3cc1@x (G2eeb@scheme-stx '_))))) (set! G2f67@verify-literals (lambda (G3cc3@lits G3cc4@expr) (for-each (lambda (G3cc7@x) (if (or (not (G2d62@id? G3cc7@x)) (G2f63@ellipsis? G3cc7@x) (G2f65@underscore? G3cc7@x)) (G304c@syntax-violation '#f '"invalid literal" G3cc4@expr G3cc7@x) (void))) G3cc3@lits))) (set! G2f69@syntax-case-transformer ((lambda () ((lambda (G3cca@build-dispatch-call G3ccc@invalid-ids-error G3cce@gen-clause G3cd0@gen-syntax-case) (begin (set! G3cca@build-dispatch-call (lambda (G3d39@pvars G3d3a@expr G3d3b@y G3d3c@r G3d3d@mr) ((lambda (G3d43@ids G3d44@levels) ((lambda (G3d47@labels G3d48@new-vars) ((lambda (G3d4b@body) (list '(primitive apply) (G2cbc@G2bfa@build-lambda '#f G3d48@new-vars G3d4b@body) G3d3b@y)) (G2f85@chi-expr (G2d4e@add-subst (G2d1d@make-full-rib G3d43@ids G3d47@labels) G3d3a@expr) (append (map (lambda (G3d4d@label G3d4e@var G3d4f@level) (cons G3d4d@label (G2d82@make-binding 'syntax (cons G3d4e@var G3d4f@level)))) G3d47@labels G3d48@new-vars (map cdr G3d39@pvars)) G3d3c@r) G3d3d@mr))) (map G2ce2@gen-label G3d43@ids) (map G2cde@gen-lexical G3d43@ids))) (map car G3d39@pvars) (map cdr G3d39@pvars)))) (set! G3ccc@invalid-ids-error (lambda (G3d2d@id* G3d2e@e G3d2f@class) ((letrec ((G3d33@find (lambda (G3d35@id* G3d36@ok*) (if (null? G3d35@id*) (G304c@syntax-violation '#f '"invalid syntax" G3d2e@e) (if (G2d62@id? (car G3d35@id*)) (if (G2d70@bound-id-member? (car G3d35@id*) G3d36@ok*) (G3048@syntax-error (car G3d35@id*) '"duplicate " G3d2f@class) (G3d33@find (cdr G3d35@id*) (cons (car G3d35@id*) G3d36@ok*))) (G3048@syntax-error (car G3d35@id*) '"invalid " G3d2f@class)))))) G3d33@find) G3d2d@id* '()))) (set! G3cce@gen-clause (lambda (G3d07@x G3d08@keys G3d09@clauses G3d0a@r G3d0b@mr G3d0c@pat G3d0d@fender G3d0e@expr) (call-with-values (lambda () (G2f5f@convert-pattern G3d0c@pat G3d08@keys)) (lambda (G3d19@G3d17 G3d1a@G3d18) ((lambda (G3d1d@pvars G3d1e@p) (if (not (G2d6e@distinct-bound-ids? (map car G3d1d@pvars))) (G3ccc@invalid-ids-error (map car G3d1d@pvars) G3d0c@pat '"pattern variable") (if (not (for-all (lambda (G3d21@x) (not (G2f63@ellipsis? (car G3d21@x)))) G3d1d@pvars)) (G304c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d0c@pat) ((lambda (G3d23@y) ((lambda (G3d25@test) ((lambda (G3d27@conseq) ((lambda (G3d29@altern) (list (G2cbc@G2bfa@build-lambda '#f (list G3d23@y) (list 'if G3d25@test G3d27@conseq G3d29@altern)) (list '(primitive syntax-dispatch) G3d07@x (list 'quote G3d1e@p)))) (G3cd0@gen-syntax-case G3d07@x G3d08@keys G3d09@clauses G3d0a@r G3d0b@mr))) (G3cca@build-dispatch-call G3d1d@pvars G3d0e@expr G3d23@y G3d0a@r G3d0b@mr))) (if (eq? G3d0d@fender '#t) G3d23@y ((lambda (G3d2b@call) (list 'if G3d23@y G3d2b@call (list 'quote '#f))) (G3cca@build-dispatch-call G3d1d@pvars G3d0d@fender G3d23@y G3d0a@r G3d0b@mr))))) (G2cde@gen-lexical 'tmp))))) G3d1a@G3d18 G3d19@G3d17))))) (set! G3cd0@gen-syntax-case (lambda (G3ce5@x G3ce6@keys G3ce7@clauses G3ce8@r G3ce9@mr) (if (null? G3ce7@clauses) (list '(primitive syntax-error) G3ce5@x) ((lambda (G3cef@t) ((lambda (G3cf1@ls/false) (if G3cf1@ls/false (apply (lambda (G3cf3@pat G3cf4@expr) (if (and (G2d62@id? G3cf3@pat) (not (G2d70@bound-id-member? G3cf3@pat G3ce6@keys)) (not (G2f63@ellipsis? G3cf3@pat))) (if (G2d6a@free-id=? G3cf3@pat (G2eeb@scheme-stx '_)) (G2f85@chi-expr G3cf4@expr G3ce8@r G3ce9@mr) ((lambda (G3cf7@lab G3cf8@lex) ((lambda (G3cfb@body) (list (G2cbc@G2bfa@build-lambda '#f (list G3cf8@lex) G3cfb@body) G3ce5@x)) (G2f85@chi-expr (G2d4e@add-subst (G2d1d@make-full-rib (list G3cf3@pat) (list G3cf7@lab)) G3cf4@expr) (cons (cons G3cf7@lab (G2d82@make-binding 'syntax (cons G3cf8@lex '0))) G3ce8@r) G3ce9@mr))) (G2ce2@gen-label G3cf3@pat) (G2cde@gen-lexical G3cf3@pat))) (G3cce@gen-clause G3ce5@x G3ce6@keys (cdr G3ce7@clauses) G3ce8@r G3ce9@mr G3cf3@pat '#t G3cf4@expr))) G3cf1@ls/false) ((lambda (G3cfd@t) ((lambda (G3cff@ls/false) (if G3cff@ls/false (apply (lambda (G3d01@pat G3d02@fender G3d03@expr) (G3cce@gen-clause G3ce5@x G3ce6@keys (cdr G3ce7@clauses) G3ce8@r G3ce9@mr G3d01@pat G3d02@fender G3d03@expr)) G3cff@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3cfd@t))) (G2f61@syntax-dispatch G3cfd@t '(any any any)))) G3cef@t))) (G2f61@syntax-dispatch G3cef@t '(any any)))) (car G3ce7@clauses))))) (lambda (G3cd1@e G3cd2@r G3cd3@mr) ((lambda (G3cd7@t) ((lambda (G3cd9@ls/false) (if G3cd9@ls/false (apply (lambda (G3cdb@expr G3cdc@keys G3cdd@clauses) (begin (G2f67@verify-literals G3cdc@keys G3cd1@e) ((lambda (G3ce1@x) ((lambda (G3ce3@body) (list (G2cbc@G2bfa@build-lambda '#f (list G3ce1@x) G3ce3@body) (G2f85@chi-expr G3cdb@expr G3cd2@r G3cd3@mr))) (G3cd0@gen-syntax-case G3ce1@x G3cdc@keys G3cdd@clauses G3cd2@r G3cd3@mr))) (G2cde@gen-lexical 'tmp)))) G3cd9@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3cd7@t))) (G2f61@syntax-dispatch G3cd7@t '(_ any each-any . each-any)))) G3cd1@e)))) '#f '#f '#f '#f)))) (set! G2f6b@ellipsis-map (lambda (G3d53@proc G3d54@ls . G3d57@ls*) ((lambda (G3d5a@who) (begin (set! G3d5a@who '...) (begin (if (not (list? G3d54@ls)) (assertion-violation G3d5a@who '"not a list" G3d54@ls) (void)) (if (not (null? G3d57@ls*)) ((lambda (G3d5b@n) (for-each (lambda (G3d5d@x) (begin (if (not (list? G3d5d@x)) (assertion-violation G3d5a@who '"not a list" G3d5d@x) (void)) (if (not (= (length G3d5d@x) G3d5b@n)) (assertion-violation G3d5a@who '"length mismatch" G3d54@ls G3d5d@x) (void)))) G3d57@ls*)) (length G3d54@ls)) (void)) (apply map G3d53@proc G3d54@ls G3d57@ls*)))) '#f))) (set! G2f6d@syntax-transformer ((lambda () ((lambda (G3d60@gen-syntax G3d62@gen-ref G3d64@gen-append G3d66@gen-mappend G3d68@gen-map G3d6a@gen-cons G3d6c@gen-vector G3d6e@regen) (begin (set! G3d60@gen-syntax (lambda (G3dd3@src G3dd4@e G3dd5@r G3dd6@maps G3dd7@ellipsis? G3dd8@vec?) ((lambda (G3ddf@t) ((lambda (G3de1@ls/false) (if (and G3de1@ls/false (apply (lambda (G3de3@dots) (G3dd7@ellipsis? G3de3@dots)) G3de1@ls/false)) (apply (lambda (G3de5@dots) (G304c@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dd3@src)) G3de1@ls/false) ((lambda (G3de7@t) ((lambda (G3de9@ls/false) (if (and G3de9@ls/false (apply (lambda (G3deb@id) (G2d62@id? G3deb@id)) G3de9@ls/false)) (apply (lambda (G3ded@id) ((lambda (G3def@label) ((lambda (G3df1@b) ((lambda () (if (eq? (G2d84@binding-type G3df1@b) 'syntax) (call-with-values (lambda () ((lambda (G3df5@var.lev) (G3d62@gen-ref G3dd3@src (car G3df5@var.lev) (cdr G3df5@var.lev) G3dd6@maps)) (G2d86@binding-value G3df1@b))) (lambda (G3df7@G3df3 G3df8@G3df4) ((lambda (G3dfb@maps G3dfc@var) (values (list 'ref G3dfc@var) G3dfb@maps)) G3df8@G3df4 G3df7@G3df3))) (values (list 'quote G3dd4@e) G3dd6@maps))))) (G2d80@label->binding G3def@label G3dd5@r))) (G2d7c@id->label G3dd4@e))) G3de9@ls/false) ((lambda (G3dff@t) ((lambda (G3e01@ls/false) (if (and G3e01@ls/false (apply (lambda (G3e03@dots G3e04@e) (G3dd7@ellipsis? G3e03@dots)) G3e01@ls/false)) (apply (lambda (G3e07@dots G3e08@e) (if G3dd8@vec? (G304c@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dd3@src) (G3d60@gen-syntax G3dd3@src G3e08@e G3dd5@r G3dd6@maps (lambda (G3e0b@x) '#f) '#f))) G3e01@ls/false) ((lambda (G3e0d@t) ((lambda (G3e0f@ls/false) (if (and G3e0f@ls/false (apply (lambda (G3e11@x G3e12@dots G3e13@y) (G3dd7@ellipsis? G3e12@dots)) G3e0f@ls/false)) (apply (lambda (G3e17@x G3e18@dots G3e19@y) ((letrec ((G3e1d@f (lambda (G3e1f@y G3e20@k) ((lambda (G3e23@t) ((lambda (G3e25@ls/false) (if G3e25@ls/false (apply (lambda () (G3e20@k G3dd6@maps)) G3e25@ls/false) ((lambda (G3e27@t) ((lambda (G3e29@ls/false) (if (and G3e29@ls/false (apply (lambda (G3e2b@dots G3e2c@y) (G3dd7@ellipsis? G3e2b@dots)) G3e29@ls/false)) (apply (lambda (G3e2f@dots G3e30@y) (G3e1d@f G3e30@y (lambda (G3e33@maps) (call-with-values (lambda () (G3e20@k (cons '() G3e33@maps))) (lambda (G3e37@G3e35 G3e38@G3e36) ((lambda (G3e3b@maps G3e3c@x) (if (null? (car G3e3b@maps)) (G304c@syntax-violation '#f '"extra ellipsis in syntax form" G3dd3@src) (values (G3d66@gen-mappend G3e3c@x (car G3e3b@maps)) (cdr G3e3b@maps)))) G3e38@G3e36 G3e37@G3e35)))))) G3e29@ls/false) ((lambda (G3e3f@t) ((lambda (G3e41@ls/false) (if G3e41@ls/false (apply (lambda () (call-with-values (lambda () (G3d60@gen-syntax G3dd3@src G3e1f@y G3dd5@r G3dd6@maps G3dd7@ellipsis? G3dd8@vec?)) (lambda (G3e45@G3e43 G3e46@G3e44) ((lambda (G3e49@maps G3e4a@y) (call-with-values (lambda () (G3e20@k G3e49@maps)) (lambda (G3e4f@G3e4d G3e50@G3e4e) ((lambda (G3e53@maps G3e54@x) (values (G3d64@gen-append G3e54@x G3e4a@y) G3e53@maps)) G3e50@G3e4e G3e4f@G3e4d)))) G3e46@G3e44 G3e45@G3e43)))) G3e41@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3e3f@t))) (G2f61@syntax-dispatch G3e3f@t '_))) G3e27@t))) (G2f61@syntax-dispatch G3e27@t '(any . any)))) G3e23@t))) (G2f61@syntax-dispatch G3e23@t '()))) G3e1f@y)))) G3e1d@f) G3e19@y (lambda (G3e57@maps) (call-with-values (lambda () (G3d60@gen-syntax G3dd3@src G3e17@x G3dd5@r (cons '() G3e57@maps) G3dd7@ellipsis? '#f)) (lambda (G3e5b@G3e59 G3e5c@G3e5a) ((lambda (G3e5f@maps G3e60@x) (if (null? (car G3e5f@maps)) (G304c@syntax-violation '#f '"extra ellipsis in syntax form" G3dd3@src) (values (G3d68@gen-map G3e60@x (car G3e5f@maps)) (cdr G3e5f@maps)))) G3e5c@G3e5a G3e5b@G3e59)))))) G3e0f@ls/false) ((lambda (G3e63@t) ((lambda (G3e65@ls/false) (if G3e65@ls/false (apply (lambda (G3e67@x G3e68@y) (call-with-values (lambda () (G3d60@gen-syntax G3dd3@src G3e67@x G3dd5@r G3dd6@maps G3dd7@ellipsis? '#f)) (lambda (G3e6d@G3e6b G3e6e@G3e6c) ((lambda (G3e71@maps G3e72@xnew) (call-with-values (lambda () (G3d60@gen-syntax G3dd3@src G3e68@y G3dd5@r G3e71@maps G3dd7@ellipsis? G3dd8@vec?)) (lambda (G3e77@G3e75 G3e78@G3e76) ((lambda (G3e7b@maps G3e7c@ynew) (values (G3d6a@gen-cons G3dd4@e G3e67@x G3e68@y G3e72@xnew G3e7c@ynew) G3e7b@maps)) G3e78@G3e76 G3e77@G3e75)))) G3e6e@G3e6c G3e6d@G3e6b)))) G3e65@ls/false) ((lambda (G3e7f@t) ((lambda (G3e81@ls/false) (if G3e81@ls/false (apply (lambda (G3e83@ls) (call-with-values (lambda () (G3d60@gen-syntax G3dd3@src G3e83@ls G3dd5@r G3dd6@maps G3dd7@ellipsis? '#t)) (lambda (G3e87@G3e85 G3e88@G3e86) ((lambda (G3e8b@maps G3e8c@lsnew) (values (G3d6c@gen-vector G3dd4@e G3e83@ls G3e8c@lsnew) G3e8b@maps)) G3e88@G3e86 G3e87@G3e85)))) G3e81@ls/false) ((lambda (G3e8f@t) ((lambda (G3e91@ls/false) (if G3e91@ls/false (apply (lambda () (values (list 'quote G3dd4@e) G3dd6@maps)) G3e91@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3e8f@t))) (G2f61@syntax-dispatch G3e8f@t '_))) G3e7f@t))) (G2f61@syntax-dispatch G3e7f@t '#(vector each-any)))) G3e63@t))) (G2f61@syntax-dispatch G3e63@t '(any . any)))) G3e0d@t))) (G2f61@syntax-dispatch G3e0d@t '(any any . any)))) G3dff@t))) (G2f61@syntax-dispatch G3dff@t '(any any)))) G3de7@t))) (G2f61@syntax-dispatch G3de7@t 'any))) G3ddf@t))) (G2f61@syntax-dispatch G3ddf@t 'any))) G3dd4@e))) (set! G3d62@gen-ref (lambda (G3dbb@src G3dbc@var G3dbd@level G3dbe@maps) (if (= G3dbd@level '0) (values G3dbc@var G3dbe@maps) (if (null? G3dbe@maps) (G304c@syntax-violation '#f '"missing ellipsis in syntax form" G3dbb@src) (call-with-values (lambda () (G3d62@gen-ref G3dbb@src G3dbc@var (- G3dbd@level '1) (cdr G3dbe@maps))) (lambda (G3dc5@G3dc3 G3dc6@G3dc4) ((lambda (G3dc9@outer-maps G3dca@outer-var) ((lambda (G3dcd@t) (if G3dcd@t ((lambda (G3dcf@b) (values (cdr G3dcf@b) G3dbe@maps)) G3dcd@t) ((lambda (G3dd1@inner-var) (values G3dd1@inner-var (cons (cons (cons G3dca@outer-var G3dd1@inner-var) (car G3dbe@maps)) G3dc9@outer-maps))) (G2cde@gen-lexical 'tmp)))) (assq G3dca@outer-var (car G3dbe@maps)))) G3dc6@G3dc4 G3dc5@G3dc3))))))) (set! G3d64@gen-append (lambda (G3db7@x G3db8@y) (if (fast-equal? G3db8@y ''()) G3db7@x (list 'append G3db7@x G3db8@y)))) (set! G3d66@gen-mappend (lambda (G3db3@e G3db4@map-env) (list 'apply '(primitive append) (G3d68@gen-map G3db3@e G3db4@map-env)))) (set! G3d68@gen-map (lambda (G3da1@e G3da2@map-env) ((lambda (G3da5@formals G3da6@actuals) (if (eq? (car G3da1@e) 'ref) (car G3da6@actuals) (if (for-all (lambda (G3da9@x) (and (eq? (car G3da9@x) 'ref) (memq (cadr G3da9@x) G3da5@formals))) (cdr G3da1@e)) ((lambda (G3dab@args) (cons 'map (cons (list 'primitive (car G3da1@e)) G3dab@args))) (map ((lambda (G3dad@r) (lambda (G3daf@x) (cdr (assq (cadr G3daf@x) G3dad@r)))) (map cons G3da5@formals G3da6@actuals)) (cdr G3da1@e))) (cons* 'map (list 'lambda G3da5@formals G3da1@e) G3da6@actuals)))) (map cdr G3da2@map-env) (map (lambda (G3db1@x) (list 'ref (car G3db1@x))) G3da2@map-env)))) (set! G3d6a@gen-cons (lambda (G3d91@e G3d92@x G3d93@y G3d94@xnew G3d95@ynew) ((lambda (G3d9b@t) (if (memv G3d9b@t '(quote)) (if (eq? (car G3d94@xnew) 'quote) ((lambda (G3d9d@xnew G3d9e@ynew) (if (and (eq? G3d9d@xnew G3d92@x) (eq? G3d9e@ynew G3d93@y)) (list 'quote G3d91@e) (list 'quote (cons G3d9d@xnew G3d9e@ynew)))) (cadr G3d94@xnew) (cadr G3d95@ynew)) (if (null? (cadr G3d95@ynew)) (list 'list G3d94@xnew) (list 'cons G3d94@xnew G3d95@ynew))) (if (memv G3d9b@t '(list)) (cons 'list (cons G3d94@xnew (cdr G3d95@ynew))) (list 'cons G3d94@xnew G3d95@ynew)))) (car G3d95@ynew)))) (set! G3d6c@gen-vector (lambda (G3d8b@e G3d8c@ls G3d8d@lsnew) (if (eq? (car G3d8d@lsnew) 'quote) (if (eq? (cadr G3d8d@lsnew) G3d8c@ls) (list 'quote G3d8b@e) (list 'quote (list->vector (cadr G3d8d@lsnew)))) (if (eq? (car G3d8d@lsnew) 'list) (cons 'vector (cdr G3d8d@lsnew)) (list 'list->vector G3d8d@lsnew))))) (set! G3d6e@regen (lambda (G3d85@x) ((lambda (G3d87@t) (if (memv G3d87@t '(ref)) (cadr G3d85@x) (if (memv G3d87@t '(primitive)) (list 'primitive (cadr G3d85@x)) (if (memv G3d87@t '(quote)) (list 'quote (cadr G3d85@x)) (if (memv G3d87@t '(lambda)) (G2cbc@G2bfa@build-lambda '#f (cadr G3d85@x) (G3d6e@regen (caddr G3d85@x))) (if (memv G3d87@t '(map)) ((lambda (G3d89@ls) (cons '(primitive ellipsis-map) G3d89@ls)) (map G3d6e@regen (cdr G3d85@x))) (cons (list 'primitive (car G3d85@x)) (map G3d6e@regen (cdr G3d85@x))))))))) (car G3d85@x)))) (lambda (G3d6f@e G3d70@r G3d71@mr) ((lambda (G3d75@t) ((lambda (G3d77@ls/false) (if G3d77@ls/false (apply (lambda (G3d79@x) (call-with-values (lambda () (G3d60@gen-syntax G3d6f@e G3d79@x G3d70@r '() G2f63@ellipsis? '#f)) (lambda (G3d7d@G3d7b G3d7e@G3d7c) ((lambda (G3d81@maps G3d82@e) (G3d6e@regen G3d82@e)) G3d7e@G3d7c G3d7d@G3d7b)))) G3d77@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3d75@t))) (G2f61@syntax-dispatch G3d75@t '(_ any)))) G3d6f@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f6f@core-macro-transformer (lambda (G3e93@name) ((lambda (G3e95@t) (if (memv G3e95@t '(quote)) G2f11@quote-transformer (if (memv G3e95@t '(lambda)) G2f15@lambda-transformer (if (memv G3e95@t '(case-lambda)) G2f13@case-lambda-transformer (if (memv G3e95@t '(letrec)) G2ef9@letrec-transformer (if (memv G3e95@t '(letrec*)) G2efb@letrec*-transformer (if (memv G3e95@t '(if)) G2f09@if-transformer (if (memv G3e95@t '(and)) G2f0b@and-transformer (if (memv G3e95@t '(or)) G2f0d@or-transformer (if (memv G3e95@t '(foreign-call)) G2f5d@foreign-call-transformer (if (memv G3e95@t '(syntax-case)) G2f69@syntax-case-transformer (if (memv G3e95@t '(syntax)) G2f6d@syntax-transformer (if (memv G3e95@t '(type-descriptor)) G2eff@type-descriptor-transformer (if (memv G3e95@t '(record-type-descriptor)) G2f01@record-type-descriptor-transformer (if (memv G3e95@t '(record-constructor-descriptor)) G2f03@record-constructor-descriptor-transformer (if (memv G3e95@t '(fluid-let-syntax)) G2efd@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e93@name))))))))))))))))) G3e93@name))) (set! G2f71@file-options-macro (lambda (G3e97@x) ((lambda (G3e9a@valid-option?) (begin (set! G3e9a@valid-option? (lambda (G3ea3@x) (and (G2d62@id? G3ea3@x) (memq (G2d64@id->sym G3ea3@x) '(no-fail no-create no-truncate))))) ((lambda (G3e9b@t) ((lambda (G3e9d@ls/false) (if (and G3e9d@ls/false (apply (lambda (G3e9f@opt*) (and (for-all G3e9a@valid-option? G3e9f@opt*) (G28ff@G28a0@file-options-spec (map G2d64@id->sym G3e9f@opt*)))) G3e9d@ls/false)) (apply (lambda (G3ea1@opt*) (G2f17@bless (list 'quote (G28ff@G28a0@file-options-spec (map G2d64@id->sym G3ea1@opt*))))) G3e9d@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3e9b@t))) (G2f61@syntax-dispatch G3e9b@t '(_ . each-any)))) G3e97@x))) '#f))) (set! G2f73@symbol-macro (lambda (G3ea5@x G3ea6@set) ((lambda (G3ea9@t) ((lambda (G3eab@ls/false) (if (and G3eab@ls/false (apply (lambda (G3ead@name) (and (G2d62@id? G3ead@name) (memq (G2d64@id->sym G3ead@name) G3ea6@set))) G3eab@ls/false)) (apply (lambda (G3eaf@name) (G2f17@bless (list 'quote G3eaf@name))) G3eab@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3ea9@t))) (G2f61@syntax-dispatch G3ea9@t '(_ any)))) G3ea5@x))) (set! G2f75@macro-transformer (lambda (G3eb1@x) (if (procedure? G3eb1@x) G3eb1@x (if (symbol? G3eb1@x) ((lambda (G3eb3@t) (if (memv G3eb3@t '(define-record-type)) G2f55@define-record-type-macro (if (memv G3eb3@t '(define-struct)) G2f53@define-struct-macro (if (memv G3eb3@t '(include)) G2f49@include-macro (if (memv G3eb3@t '(cond)) G2f45@cond-macro (if (memv G3eb3@t '(let)) G2f1d@let-macro (if (memv G3eb3@t '(do)) G2f3d@do-macro (if (memv G3eb3@t '(or)) G2f41@or-macro (if (memv G3eb3@t '(and)) G2f43@and-macro (if (memv G3eb3@t '(let*)) G2f3f@let*-macro (if (memv G3eb3@t '(let-values)) G2f1f@let-values-macro (if (memv G3eb3@t '(let*-values)) G2f21@let*-values-macro (if (memv G3eb3@t '(syntax-rules)) G2f4d@syntax-rules-macro (if (memv G3eb3@t '(quasiquote)) G2f4f@quasiquote-macro (if (memv G3eb3@t '(quasisyntax)) G2f51@quasisyntax-macro (if (memv G3eb3@t '(with-syntax)) G2f19@with-syntax-macro (if (memv G3eb3@t '(when)) G2f05@when-macro (if (memv G3eb3@t '(unless)) G2f07@unless-macro (if (memv G3eb3@t '(case)) G2f0f@case-macro (if (memv G3eb3@t '(identifier-syntax)) G2f3b@identifier-syntax-macro (if (memv G3eb3@t '(time)) G2f33@time-macro (if (memv G3eb3@t '(delay)) G2f35@delay-macro (if (memv G3eb3@t '(assert)) G2f37@assert-macro (if (memv G3eb3@t '(endianness)) G2f39@endianness-macro (if (memv G3eb3@t '(guard)) G2f2f@guard-macro (if (memv G3eb3@t '(define-enumeration)) G2f31@define-enumeration-macro (if (memv G3eb3@t '(trace-lambda)) G2f23@trace-lambda-macro (if (memv G3eb3@t '(trace-define)) G2f25@trace-define-macro (if (memv G3eb3@t '(trace-define-syntax)) G2f27@trace-define-syntax-macro (if (memv G3eb3@t '(trace-let-syntax)) G2f2b@trace-let-syntax-macro (if (memv G3eb3@t '(trace-letrec-syntax)) G2f2d@trace-letrec-syntax-macro (if (memv G3eb3@t '(define-condition-type)) G2f57@define-condition-type-macro (if (memv G3eb3@t '(parameterize)) G2f5b@parameterize-macro (if (memv G3eb3@t '(include-into)) G2f4b@include-into-macro (if (memv G3eb3@t '(eol-style)) (lambda (G3eb5@x) (G2f73@symbol-macro G3eb5@x '(none lf cr crlf nel crnel ls))) (if (memv G3eb3@t '(error-handling-mode)) (lambda (G3eb7@x) (G2f73@symbol-macro G3eb7@x '(ignore raise replace))) (if (memv G3eb3@t '(buffer-mode)) (lambda (G3eb9@x) (G2f73@symbol-macro G3eb9@x '(none line block))) (if (memv G3eb3@t '(file-options)) G2f71@file-options-macro (if (memv G3eb3@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f59@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3eb1@x)))))))))))))))))))))))))))))))))))))))) G3eb1@x) (error 'core-macro-transformer '"BUG: invalid macro" G3eb1@x))))) (set! G2f77@local-macro-transformer (lambda (G3ebb@x) (car G3ebb@x))) (set! G2f79@do-macro-call (lambda (G3ebd@transformer G3ebe@expr) ((lambda (G3ec1@out) (begin ((letrec ((G3ec3@f (lambda (G3ec5@x) (if (not (G2d2a@stx? G3ec5@x)) (if (pair? G3ec5@x) (begin (G3ec3@f (car G3ec5@x)) (G3ec3@f (cdr G3ec5@x))) (if (vector? G3ec5@x) (vector-for-each G3ec3@f G3ec5@x) (if (symbol? G3ec5@x) (G304c@syntax-violation '#f '"raw symbol encountered in output of macro" G3ebe@expr G3ec5@x) (void)))) (void))))) G3ec3@f) G3ec1@out) (G2d4c@add-mark (G2d42@gen-mark) G3ec1@out G3ebe@expr))) (G3ebd@transformer (G2d4c@add-mark G2d44@anti-mark G3ebe@expr '#f))))) (set! G2f7b@chi-macro (lambda (G3ec7@p G3ec8@e) (G2f79@do-macro-call (G2f75@macro-transformer G3ec7@p) G3ec8@e))) (set! G2f7d@chi-local-macro (lambda (G3ecb@p G3ecc@e) (G2f79@do-macro-call (G2f77@local-macro-transformer G3ecb@p) G3ecc@e))) (set! G2f7f@chi-global-macro (lambda (G3ecf@p G3ed0@e) ((lambda (G3ed3@lib G3ed4@loc) (begin (G2b7a@G2a22@visit-library G3ed3@lib) ((lambda (G3ed7@x) ((lambda (G3ed9@transformer) (G2f79@do-macro-call G3ed9@transformer G3ed0@e)) (if (procedure? G3ed7@x) G3ed7@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ed7@x)))) (symbol-value G3ed4@loc)))) (car G3ecf@p) (cdr G3ecf@p)))) (set! G2f81@chi-expr* (lambda (G3edb@e* G3edc@r G3edd@mr) (if (null? G3edb@e*) '() ((lambda (G3ee1@e) (cons G3ee1@e (G2f81@chi-expr* (cdr G3edb@e*) G3edc@r G3edd@mr))) (G2f85@chi-expr (car G3edb@e*) G3edc@r G3edd@mr))))) (set! G2f83@chi-application (lambda (G3ee3@e G3ee4@r G3ee5@mr) ((lambda (G3ee9@t) ((lambda (G3eeb@ls/false) (if G3eeb@ls/false (apply (lambda (G3eed@rator G3eee@rands) ((lambda (G3ef1@rator) (cons G3ef1@rator (G2f81@chi-expr* G3eee@rands G3ee4@r G3ee5@mr))) (G2f85@chi-expr G3eed@rator G3ee4@r G3ee5@mr))) G3eeb@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3ee9@t))) (G2f61@syntax-dispatch G3ee9@t '(any . each-any)))) G3ee3@e))) (set! G2f85@chi-expr (lambda (G3ef3@e G3ef4@r G3ef5@mr) (call-with-values (lambda () (G2d8a@syntax-type G3ef3@e G3ef4@r)) (lambda (G3efc@G3ef9 G3efd@G3efa G3efe@G3efb) ((lambda (G3f02@kwd G3f03@value G3f04@type) ((lambda (G3f08@t) (if (memv G3f08@t '(core-macro)) ((lambda (G3f0a@transformer) (G3f0a@transformer G3ef3@e G3ef4@r G3ef5@mr)) (G2f6f@core-macro-transformer G3f03@value)) (if (memv G3f08@t '(global)) ((lambda (G3f0c@lib) ((lambda (G3f0e@loc) ((lambda () (begin ((G2fce@inv-collector) G3f0c@lib) G3f0e@loc)))) (cdr G3f03@value))) (car G3f03@value)) (if (memv G3f08@t '(core-prim)) ((lambda (G3f10@name) (list 'primitive G3f10@name)) G3f03@value) (if (memv G3f08@t '(call)) (G2f83@chi-application G3ef3@e G3ef4@r G3ef5@mr) (if (memv G3f08@t '(lexical)) ((lambda (G3f12@lex) G3f12@lex) (G2eed@lexical-var G3f03@value)) (if (memv G3f08@t '(global-macro global-macro!)) (G2f85@chi-expr (G2f7f@chi-global-macro G3f03@value G3ef3@e) G3ef4@r G3ef5@mr) (if (memv G3f08@t '(local-macro local-macro!)) (G2f85@chi-expr (G2f7d@chi-local-macro G3f03@value G3ef3@e) G3ef4@r G3ef5@mr) (if (memv G3f08@t '(macro macro!)) (G2f85@chi-expr (G2f7b@chi-macro G3f03@value G3ef3@e) G3ef4@r G3ef5@mr) (if (memv G3f08@t '(constant)) ((lambda (G3f14@datum) (list 'quote G3f14@datum)) G3f03@value) (if (memv G3f08@t '(set!)) (G2f87@chi-set! G3ef3@e G3ef4@r G3ef5@mr) (if (memv G3f08@t '(begin)) ((lambda (G3f16@t) ((lambda (G3f18@ls/false) (if G3f18@ls/false (apply (lambda (G3f1a@x G3f1b@x*) (G2cbf@G2c30@build-sequence '#f (G2f81@chi-expr* (cons G3f1a@x G3f1b@x*) G3ef4@r G3ef5@mr))) G3f18@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3f16@t))) (G2f61@syntax-dispatch G3f16@t '(_ any . each-any)))) G3ef3@e) (if (memv G3f08@t '(let-syntax letrec-syntax)) ((lambda (G3f1e@t) ((lambda (G3f20@ls/false) (if (and G3f20@ls/false (apply (lambda (G3f22@xlhs* G3f23@xrhs* G3f24@xbody G3f25@xbody*) (if (not (G2d6c@valid-bound-ids? G3f22@xlhs*)) (G304c@syntax-violation '#f '"invalid identifiers" G3ef3@e) (void))) G3f20@ls/false)) (apply (lambda (G3f2a@xlhs* G3f2b@xrhs* G3f2c@xbody G3f2d@xbody*) ((lambda (G3f32@xlab*) ((lambda (G3f34@xrib) ((lambda (G3f36@xb*) ((lambda () (G2cbf@G2c30@build-sequence '#f (G2f81@chi-expr* (map (lambda (G3f38@x) (G2d4e@add-subst G3f34@xrib G3f38@x)) (cons G3f2c@xbody G3f2d@xbody*)) (append (map cons G3f32@xlab* G3f36@xb*) G3ef4@r) (append (map cons G3f32@xlab* G3f36@xb*) G3ef5@mr)))))) (map (lambda (G3f3a@x) (G2da2@make-eval-transformer (G2fc0@expand-transformer (if (eq? G3f04@type 'let-syntax) G3f3a@x (G2d4e@add-subst G3f34@xrib G3f3a@x)) G3ef5@mr))) G3f2b@xrhs*))) (G2d1d@make-full-rib G3f2a@xlhs* G3f32@xlab*))) (map G2ce2@gen-label G3f2a@xlhs*))) G3f20@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3f1e@t))) (G2f61@syntax-dispatch G3f1e@t '(_ #(each (any any)) any . each-any)))) G3ef3@e) (if (memv G3f08@t '(displaced-lexical)) (G304c@syntax-violation '#f '"identifier out of context" G3ef3@e) (if (memv G3f08@t '(syntax)) (G304c@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ef3@e) (if (memv G3f08@t '(define define-syntax module import library)) (G304c@syntax-violation '#f (string-append ((lambda (G3f3c@t) (if (memv G3f3c@t '(define)) '"a definition" (if (memv G3f3c@t '(define-syntax)) '"a define-syntax" (if (memv G3f3c@t '(module)) '"a module definition" (if (memv G3f3c@t '(library)) '"a library definition" (if (memv G3f3c@t '(import)) '"an import declaration" (if (memv G3f3c@t '(export)) '"an export declaration" '"a non-expression"))))))) G3f04@type) '" was found where an expression was expected") G3ef3@e) (if (memv G3f08@t '(mutable)) (G304c@syntax-violation '#f '"attempt to reference an unexportable variable" G3ef3@e) (G304c@syntax-violation '#f '"invalid expression" G3ef3@e)))))))))))))))))) G3f04@type)) G3efe@G3efb G3efd@G3efa G3efc@G3ef9))))) (set! G2f87@chi-set! (lambda (G3f3e@e G3f3f@r G3f40@mr) ((lambda (G3f44@t) ((lambda (G3f46@ls/false) (if (and G3f46@ls/false (apply (lambda (G3f48@x G3f49@v) (G2d62@id? G3f48@x)) G3f46@ls/false)) (apply (lambda (G3f4c@x G3f4d@v) (call-with-values (lambda () (G2d8a@syntax-type G3f4c@x G3f3f@r)) (lambda (G3f53@G3f50 G3f54@G3f51 G3f55@G3f52) ((lambda (G3f59@kwd G3f5a@value G3f5b@type) ((lambda (G3f5f@t) (if (memv G3f5f@t '(lexical)) (begin (G2ef1@set-lexical-mutable! G3f5a@value '#t) (list 'set! (G2eed@lexical-var G3f5a@value) (G2f85@chi-expr G3f4d@v G3f3f@r G3f40@mr))) (if (memv G3f5f@t '(core-prim)) (G304c@syntax-violation '#f '"cannot modify imported core primitive" G3f3e@e) (if (memv G3f5f@t '(global)) (G304c@syntax-violation '#f '"attempt to modify imported binding" G3f3e@e) (if (memv G3f5f@t '(global-macro!)) (G2f85@chi-expr (G2f7f@chi-global-macro G3f5a@value G3f3e@e) G3f3f@r G3f40@mr) (if (memv G3f5f@t '(local-macro!)) (G2f85@chi-expr (G2f7d@chi-local-macro G3f5a@value G3f3e@e) G3f3f@r G3f40@mr) (if (memv G3f5f@t '(mutable)) (G304c@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f3e@e) (G304c@syntax-violation '#f '"invalid syntax" G3f3e@e)))))))) G3f5b@type)) G3f55@G3f52 G3f54@G3f51 G3f53@G3f50)))) G3f46@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3f44@t))) (G2f61@syntax-dispatch G3f44@t '(_ any any)))) G3f3e@e))) (set! G2f89@verify-formals (lambda (G3f61@fmls G3f62@stx) ((lambda (G3f65@t) ((lambda (G3f67@ls/false) (if G3f67@ls/false (apply (lambda (G3f69@x*) (if (not (G2d6c@valid-bound-ids? G3f69@x*)) (G2f1b@invalid-fmls-error G3f62@stx G3f61@fmls) (void))) G3f67@ls/false) ((lambda (G3f6b@t) ((lambda (G3f6d@ls/false) (if G3f6d@ls/false (apply (lambda (G3f6f@x* G3f70@x) (if (not (G2d6c@valid-bound-ids? (cons G3f70@x G3f6f@x*))) (G2f1b@invalid-fmls-error G3f62@stx G3f61@fmls) (void))) G3f6d@ls/false) ((lambda (G3f73@t) ((lambda (G3f75@ls/false) (if G3f75@ls/false (apply (lambda () (G304c@syntax-violation '#f '"invalid syntax" G3f62@stx)) G3f75@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3f73@t))) (G2f61@syntax-dispatch G3f73@t '_))) G3f6b@t))) (G2f61@syntax-dispatch G3f6b@t '#(each+ any () any)))) G3f65@t))) (G2f61@syntax-dispatch G3f65@t 'each-any))) G3f61@fmls))) (set! G2f8b@chi-lambda-clause (lambda (G3f77@stx G3f78@fmls G3f79@body* G3f7a@r G3f7b@mr) ((lambda (G3f81@t) ((lambda (G3f83@ls/false) (if G3f83@ls/false (apply (lambda (G3f85@x*) (begin (G2f89@verify-formals G3f78@fmls G3f77@stx) ((lambda (G3f87@lex* G3f88@lab*) (values G3f87@lex* (G2f9b@chi-internal (G2d4e@add-subst (G2d1d@make-full-rib G3f85@x* G3f88@lab*) G3f79@body*) (G2ef5@add-lexicals G3f88@lab* G3f87@lex* G3f7a@r) G3f7b@mr))) (map G2cde@gen-lexical G3f85@x*) (map G2ce2@gen-label G3f85@x*)))) G3f83@ls/false) ((lambda (G3f8b@t) ((lambda (G3f8d@ls/false) (if G3f8d@ls/false (apply (lambda (G3f8f@x* G3f90@x) (begin (G2f89@verify-formals G3f78@fmls G3f77@stx) ((lambda (G3f93@lex* G3f94@lab* G3f95@lex G3f96@lab) (values (append G3f93@lex* G3f95@lex) (G2f9b@chi-internal (G2d4e@add-subst (G2d1d@make-full-rib (cons G3f90@x G3f8f@x*) (cons G3f96@lab G3f94@lab*)) G3f79@body*) (G2ef5@add-lexicals (cons G3f96@lab G3f94@lab*) (cons G3f95@lex G3f93@lex*) G3f7a@r) G3f7b@mr))) (map G2cde@gen-lexical G3f8f@x*) (map G2ce2@gen-label G3f8f@x*) (G2cde@gen-lexical G3f90@x) (G2ce2@gen-label G3f90@x)))) G3f8d@ls/false) ((lambda (G3f9b@t) ((lambda (G3f9d@ls/false) (if G3f9d@ls/false (apply (lambda () (G304c@syntax-violation '#f '"invalid syntax" G3f78@fmls)) G3f9d@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G3f9b@t))) (G2f61@syntax-dispatch G3f9b@t '_))) G3f8b@t))) (G2f61@syntax-dispatch G3f8b@t '#(each+ any () any)))) G3f81@t))) (G2f61@syntax-dispatch G3f81@t 'each-any))) G3f78@fmls))) (set! G2f8d@chi-lambda-clause* (lambda (G3f9f@stx G3fa0@fmls* G3fa1@body** G3fa2@r G3fa3@mr) (if (null? G3fa0@fmls*) (values '() '()) (call-with-values (lambda () (G2f8b@chi-lambda-clause G3f9f@stx (car G3fa0@fmls*) (car G3fa1@body**) G3fa2@r G3fa3@mr)) (lambda (G3fab@G3fa9 G3fac@G3faa) ((lambda (G3faf@b G3fb0@a) (call-with-values (lambda () (G2f8d@chi-lambda-clause* G3f9f@stx (cdr G3fa0@fmls*) (cdr G3fa1@body**) G3fa2@r G3fa3@mr)) (lambda (G3fb5@G3fb3 G3fb6@G3fb4) ((lambda (G3fb9@b* G3fba@a*) (values (cons G3fb0@a G3fba@a*) (cons G3faf@b G3fb9@b*))) G3fb6@G3fb4 G3fb5@G3fb3)))) G3fac@G3faa G3fab@G3fa9)))))) (set! G2f8f@chi-defun (lambda (G3fbd@x G3fbe@r G3fbf@mr) ((lambda (G3fc3@fmls G3fc4@body*) (call-with-values (lambda () (G2f8b@chi-lambda-clause G3fc3@fmls G3fc3@fmls G3fc4@body* G3fbe@r G3fbf@mr)) (lambda (G3fc9@G3fc7 G3fca@G3fc8) ((lambda (G3fcd@body G3fce@fmls) (G2cbc@G2bfa@build-lambda '#f G3fce@fmls G3fcd@body)) G3fca@G3fc8 G3fc9@G3fc7)))) (car G3fbd@x) (cdr G3fbd@x)))) (set! G2f91@chi-rhs (lambda (G3fd1@rhs G3fd2@r G3fd3@mr) ((lambda (G3fd7@t) (if (memv G3fd7@t '(defun)) (G2f8f@chi-defun (cdr G3fd1@rhs) G3fd2@r G3fd3@mr) (if (memv G3fd7@t '(expr)) ((lambda (G3fd9@expr) (G2f85@chi-expr G3fd9@expr G3fd2@r G3fd3@mr)) (cdr G3fd1@rhs)) (if (memv G3fd7@t '(top-expr)) ((lambda (G3fdb@expr) (G2cbf@G2c30@build-sequence '#f (list (G2f85@chi-expr G3fdb@expr G3fd2@r G3fd3@mr) (G2cc0@G2c32@build-void)))) (cdr G3fd1@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fd1@rhs))))) (car G3fd1@rhs)))) (set! G2f93@expand-interaction-rhs*/init* (lambda (G3fdd@lhs* G3fde@rhs* G3fdf@init* G3fe0@r G3fe1@mr) ((letrec ((G3fe7@f (lambda (G3fe9@lhs* G3fea@rhs*) (if (null? G3fe9@lhs*) (map (lambda (G3fed@x) (G2f85@chi-expr G3fed@x G3fe0@r G3fe1@mr)) G3fdf@init*) ((lambda (G3fef@lhs G3ff0@rhs) ((lambda (G3ff3@t) (if (memv G3ff3@t '(defun)) ((lambda (G3ff5@rhs) (cons (list 'set! G3fef@lhs G3ff5@rhs) (G3fe7@f (cdr G3fe9@lhs*) (cdr G3fea@rhs*)))) (G2f8f@chi-defun (cdr G3ff0@rhs) G3fe0@r G3fe1@mr)) (if (memv G3ff3@t '(expr)) ((lambda (G3ff7@rhs) (cons (list 'set! G3fef@lhs G3ff7@rhs) (G3fe7@f (cdr G3fe9@lhs*) (cdr G3fea@rhs*)))) (G2f85@chi-expr (cdr G3ff0@rhs) G3fe0@r G3fe1@mr)) (if (memv G3ff3@t '(top-expr)) ((lambda (G3ff9@e) (cons G3ff9@e (G3fe7@f (cdr G3fe9@lhs*) (cdr G3fea@rhs*)))) (G2f85@chi-expr (cdr G3ff0@rhs) G3fe0@r G3fe1@mr)) (error 'expand-interaction '"invallid" G3ff0@rhs))))) (car G3ff0@rhs))) (car G3fe9@lhs*) (car G3fea@rhs*)))))) G3fe7@f) G3fdd@lhs* G3fde@rhs*))) (set! G2f95@chi-rhs* (lambda (G3ffb@rhs* G3ffc@r G3ffd@mr) ((letrec ((G4001@f (lambda (G4003@ls) (if (null? G4003@ls) '() ((lambda (G4005@a) (cons G4005@a (G4001@f (cdr G4003@ls)))) (G2f91@chi-rhs (car G4003@ls) G3ffc@r G3ffd@mr)))))) G4001@f) G3ffb@rhs*))) (set! G2f97@find-bound=? (lambda (G4007@x G4008@lhs* G4009@rhs*) (if (null? G4008@lhs*) '#f (if (G2d68@bound-id=? G4007@x (car G4008@lhs*)) (car G4009@rhs*) (G2f97@find-bound=? G4007@x (cdr G4008@lhs*) (cdr G4009@rhs*)))))) (set! G2f99@find-dups (lambda (G400d@ls) ((letrec ((G400f@f (lambda (G4011@ls G4012@dups) (if (null? G4011@ls) G4012@dups ((lambda (G4015@t) (if G4015@t ((lambda (G4017@x) (G400f@f (cdr G4011@ls) (cons (list (car G4011@ls) G4017@x) G4012@dups))) G4015@t) (G400f@f (cdr G4011@ls) G4012@dups))) (G2f97@find-bound=? (car G4011@ls) (cdr G4011@ls) (cdr G4011@ls))))))) G400f@f) G400d@ls '()))) (set! G2f9b@chi-internal (lambda (G4019@e* G401a@r G401b@mr) ((lambda (G401f@rib) (call-with-values (lambda () (G2fbe@chi-body* (map (lambda (G4029@x) (G2d4e@add-subst G401f@rib G4029@x)) (G2d60@syntax->list G4019@e*)) G401a@r G401b@mr '() '() '() '() '() G401f@rib '#f)) (lambda (G402b@G4021 G402c@G4022 G402d@G4023 G402e@G4024 G402f@G4025 G4030@G4026 G4031@G4027 G4032@G4028) ((lambda (G403b@_exp* G403c@kwd* G403d@mod** G403e@rhs* G403f@lex* G4040@mr G4041@r G4042@e*) (begin (if (null? G4042@e*) (G304c@syntax-violation '#f '"no expression in body" G4042@e*) (void)) ((lambda (G404b@init*) ((lambda (G404d@rhs*) ((lambda () (G2cc2@G2c36@build-letrec* '#f (reverse G403f@lex*) (reverse G404d@rhs*) (G2cbf@G2c30@build-sequence '#f G404b@init*))))) (G2f95@chi-rhs* G403e@rhs* G4041@r G4040@mr))) (G2f81@chi-expr* (append (apply append (reverse G403d@mod**)) G4042@e*) G4041@r G4040@mr)))) G4032@G4028 G4031@G4027 G4030@G4026 G402f@G4025 G402e@G4024 G402d@G4023 G402c@G4022 G402b@G4021)))) (G2d0d@make-empty-rib)))) (set! G2f9d@parse-module (lambda (G404f@e) ((lambda (G4051@t) ((lambda (G4053@ls/false) (if G4053@ls/false (apply (lambda (G4055@export* G4056@b*) (begin (if (not (for-all G2d62@id? G4055@export*)) (G304c@syntax-violation '#f '"module exports must be identifiers" G404f@e) (void)) (values '#f (list->vector G4055@export*) G4056@b*))) G4053@ls/false) ((lambda (G4059@t) ((lambda (G405b@ls/false) (if G405b@ls/false (apply (lambda (G405d@name G405e@export* G405f@b*) (begin (if (not (G2d62@id? G405d@name)) (G304c@syntax-violation '#f '"module name must be an identifier" G404f@e) (void)) (if (not (for-all G2d62@id? G405e@export*)) (G304c@syntax-violation '#f '"module exports must be identifiers" G404f@e) (void)) (values G405d@name (list->vector G405e@export*) G405f@b*))) G405b@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G4059@t))) (G2f61@syntax-dispatch G4059@t '(_ any each-any . each-any)))) G4051@t))) (G2f61@syntax-dispatch G4051@t '(_ each-any . each-any)))) G404f@e))) (set! G2fa3@G2f9e (make-record-type-descriptor 'module-interface '#f 'G2fa1 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2fa5@G2fa0 '#f) (set! G2fa7@G2f9f (make-record-constructor-descriptor G2fa3@G2f9e '#f G2fa5@G2fa0)) (set! G2faa@module-interface? (record-predicate G2fa3@G2f9e)) (set! G2fac@make-module-interface (record-constructor G2fa7@G2f9f)) (set! G2fae@module-interface-first-mark (record-accessor G2fa3@G2f9e '0)) (set! G2fb0@module-interface-exp-id-vec (record-accessor G2fa3@G2f9e '1)) (set! G2fb2@module-interface-exp-lab-vec (record-accessor G2fa3@G2f9e '2)) (set! G2fb4@set-module-interface-first-mark! (record-mutator G2fa3@G2f9e '0)) (set! G2fb6@set-module-interface-exp-id-vec! (record-mutator G2fa3@G2f9e '1)) (set! G2fb8@set-module-interface-exp-lab-vec! (record-mutator G2fa3@G2f9e '2)) (set! G2fba@module-interface-exp-id* (lambda (G4063@iface G4064@id) ((lambda (G4068@diff-marks) (begin (set! G4068@diff-marks (lambda (G406f@ls G4070@x) (begin (if (null? G406f@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4073@a) (if (eq? G4073@a G4070@x) '() (cons G4073@a (G4068@diff-marks (cdr G406f@ls) G4070@x)))) (car G406f@ls))))) ((lambda (G4069@diff G406a@id-vec) (if (null? G4069@diff) G406a@id-vec (vector-map (lambda (G406d@x) (G2d2c@make-stx (G2d2e@stx-expr G406d@x) (append G4069@diff (G2d30@stx-mark* G406d@x)) '() '())) G406a@id-vec))) (G4068@diff-marks (G2d30@stx-mark* G4064@id) (G2fae@module-interface-first-mark G4063@iface)) (G2fb0@module-interface-exp-id-vec G4063@iface)))) '#f))) (set! G2fbc@chi-internal-module (lambda (G4075@e G4076@r G4077@mr G4078@lex* G4079@rhs* G407a@mod** G407b@kwd*) (call-with-values (lambda () (G2f9d@parse-module G4075@e)) (lambda (G4086@G4083 G4087@G4084 G4088@G4085) ((lambda (G408c@e* G408d@exp-id* G408e@name) ((lambda (G4092@rib) ((lambda (G4094@e*) ((lambda () (call-with-values (lambda () (G2fbe@chi-body* G4094@e* G4076@r G4077@mr G4078@lex* G4079@rhs* G407a@mod** G407b@kwd* '() G4092@rib '#f)) (lambda (G409e@G4096 G409f@G4097 G40a0@G4098 G40a1@G4099 G40a2@G409a G40a3@G409b G40a4@G409c G40a5@G409d) ((lambda (G40ae@_exp* G40af@kwd* G40b0@mod** G40b1@rhs* G40b2@lex* G40b3@mr G40b4@r G40b5@e*) ((lambda (G40be@exp-lab* G40bf@mod**) (if (not G408e@name) (values G40b2@lex* G40b1@rhs* G408d@exp-id* G40be@exp-lab* G40b4@r G40b3@mr G40bf@mod** G40af@kwd*) ((lambda (G40c2@lab G40c3@iface) (values G40b2@lex* G40b1@rhs* (vector G408e@name) (vector G40c2@lab) (cons (cons G40c2@lab (cons '$module G40c3@iface)) G40b4@r) (cons (cons G40c2@lab (cons '$module G40c3@iface)) G40b3@mr) G40bf@mod** G40af@kwd*)) (G2ce2@gen-label 'module) (G2fac@make-module-interface (car (G2d30@stx-mark* G408e@name)) (vector-map (lambda (G40c6@x) (G2d2c@make-stx (G2d2e@stx-expr G40c6@x) (G2d30@stx-mark* G40c6@x) '() '())) G408d@exp-id*) G40be@exp-lab*)))) (vector-map (lambda (G40c8@x) (or (G2d7c@id->label (G2d2c@make-stx (G2d64@id->sym G40c8@x) (G2d30@stx-mark* G40c8@x) (list G4092@rib) '())) (G304c@syntax-violation '#f '"cannot find module export" G40c8@x))) G408d@exp-id*) (cons G40b5@e* G40b0@mod**))) G40a5@G409d G40a4@G409c G40a3@G409b G40a2@G409a G40a1@G4099 G40a0@G4098 G409f@G4097 G409e@G4096)))))) (map (lambda (G40ca@x) (G2d4e@add-subst G4092@rib G40ca@x)) (G2d60@syntax->list G408c@e*)))) (G2d0d@make-empty-rib))) G4088@G4085 G4087@G4084 G4086@G4083))))) (set! G2fbe@chi-body* (lambda (G40cc@e* G40cd@r G40ce@mr G40cf@lex* G40d0@rhs* G40d1@mod** G40d2@kwd* G40d3@exp* G40d4@rib G40d5@top?) (if (null? G40cc@e*) (values G40cc@e* G40cd@r G40ce@mr G40cf@lex* G40d0@rhs* G40d1@mod** G40d2@kwd* G40d3@exp*) ((lambda (G40e0@e) (call-with-values (lambda () (G2d8a@syntax-type G40e0@e G40cd@r)) (lambda (G40e5@G40e2 G40e6@G40e3 G40e7@G40e4) ((lambda (G40eb@kwd G40ec@value G40ed@type) ((lambda (G40f1@kwd*) ((lambda (G40f3@t) (if (memv G40f3@t '(define)) (call-with-values (lambda () (G2ee5@parse-define G40e0@e)) (lambda (G40f7@G40f5 G40f8@G40f6) ((lambda (G40fb@rhs G40fc@id) (begin (if (G2d70@bound-id-member? G40fc@id G40f1@kwd*) (G304c@syntax-violation '#f '"cannot redefine keyword" G40e0@e) (void)) (call-with-values (lambda () (G2ce6@gen-define-label+loc G40fc@id G40d4@rib)) (lambda (G4101@G40ff G4102@G4100) ((lambda (G4105@lex G4106@lab) (begin (G2d13@extend-rib! G40d4@rib G40fc@id G4106@lab) (G2fbe@chi-body* (cdr G40cc@e*) (G2ef3@add-lexical G4106@lab G4105@lex G40cd@r) G40ce@mr (cons G4105@lex G40cf@lex*) (cons G40fb@rhs G40d0@rhs*) G40d1@mod** G40f1@kwd* G40d3@exp* G40d4@rib G40d5@top?))) G4102@G4100 G4101@G40ff))))) G40f8@G40f6 G40f7@G40f5))) (if (memv G40f3@t '(define-syntax)) (call-with-values (lambda () (G2ee7@parse-define-syntax G40e0@e)) (lambda (G410b@G4109 G410c@G410a) ((lambda (G410f@rhs G4110@id) (begin (if (G2d70@bound-id-member? G4110@id G40f1@kwd*) (G304c@syntax-violation '#f '"cannot redefine keyword" G40e0@e) (void)) ((lambda (G4113@lab G4114@expanded-rhs) (begin (G2d13@extend-rib! G40d4@rib G4110@id G4113@lab) ((lambda (G4117@b) (G2fbe@chi-body* (cdr G40cc@e*) (cons (cons G4113@lab G4117@b) G40cd@r) (cons (cons G4113@lab G4117@b) G40ce@mr) G40cf@lex* G40d0@rhs* G40d1@mod** G40f1@kwd* G40d3@exp* G40d4@rib G40d5@top?)) (G2da2@make-eval-transformer G4114@expanded-rhs)))) (G2ce8@gen-define-label G4110@id G40d4@rib) (G2fc0@expand-transformer G410f@rhs G40ce@mr)))) G410c@G410a G410b@G4109))) (if (memv G40f3@t '(let-syntax letrec-syntax)) ((lambda (G4119@t) ((lambda (G411b@ls/false) (if (and G411b@ls/false (apply (lambda (G411d@xlhs* G411e@xrhs* G411f@xbody*) (if (not (G2d6c@valid-bound-ids? G411d@xlhs*)) (G304c@syntax-violation '#f '"invalid identifiers" G40e0@e) (void))) G411b@ls/false)) (apply (lambda (G4123@xlhs* G4124@xrhs* G4125@xbody*) ((lambda (G4129@xlab*) ((lambda (G412b@xrib) ((lambda (G412d@xb*) ((lambda () (G2fbe@chi-body* (append (map (lambda (G412f@x) (G2d4e@add-subst G412b@xrib G412f@x)) G4125@xbody*) (cdr G40cc@e*)) (append (map cons G4129@xlab* G412d@xb*) G40cd@r) (append (map cons G4129@xlab* G412d@xb*) G40ce@mr) G40cf@lex* G40d0@rhs* G40d1@mod** G40f1@kwd* G40d3@exp* G40d4@rib G40d5@top?)))) (map (lambda (G4131@x) (G2da2@make-eval-transformer (G2fc0@expand-transformer (if (eq? G40ed@type 'let-syntax) G4131@x (G2d4e@add-subst G412b@xrib G4131@x)) G40ce@mr))) G4124@xrhs*))) (G2d1d@make-full-rib G4123@xlhs* G4129@xlab*))) (map G2ce2@gen-label G4123@xlhs*))) G411b@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G4119@t))) (G2f61@syntax-dispatch G4119@t '(_ #(each (any any)) . each-any)))) G40e0@e) (if (memv G40f3@t '(begin)) ((lambda (G4133@t) ((lambda (G4135@ls/false) (if G4135@ls/false (apply (lambda (G4137@x*) (G2fbe@chi-body* (append G4137@x* (cdr G40cc@e*)) G40cd@r G40ce@mr G40cf@lex* G40d0@rhs* G40d1@mod** G40f1@kwd* G40d3@exp* G40d4@rib G40d5@top?)) G4135@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G4133@t))) (G2f61@syntax-dispatch G4133@t '(_ . each-any)))) G40e0@e) (if (memv G40f3@t '(global-macro global-macro!)) (G2fbe@chi-body* (cons (G2d4e@add-subst G40d4@rib (G2f7f@chi-global-macro G40ec@value G40e0@e)) (cdr G40cc@e*)) G40cd@r G40ce@mr G40cf@lex* G40d0@rhs* G40d1@mod** G40f1@kwd* G40d3@exp* G40d4@rib G40d5@top?) (if (memv G40f3@t '(local-macro local-macro!)) (G2fbe@chi-body* (cons (G2d4e@add-subst G40d4@rib (G2f7d@chi-local-macro G40ec@value G40e0@e)) (cdr G40cc@e*)) G40cd@r G40ce@mr G40cf@lex* G40d0@rhs* G40d1@mod** G40f1@kwd* G40d3@exp* G40d4@rib G40d5@top?) (if (memv G40f3@t '(macro macro!)) (G2fbe@chi-body* (cons (G2d4e@add-subst G40d4@rib (G2f7b@chi-macro G40ec@value G40e0@e)) (cdr G40cc@e*)) G40cd@r G40ce@mr G40cf@lex* G40d0@rhs* G40d1@mod** G40f1@kwd* G40d3@exp* G40d4@rib G40d5@top?) (if (memv G40f3@t '(module)) (call-with-values (lambda () (G2fbc@chi-internal-module G40e0@e G40cd@r G40ce@mr G40cf@lex* G40d0@rhs* G40d1@mod** G40f1@kwd*)) (lambda (G4141@G4139 G4142@G413a G4143@G413b G4144@G413c G4145@G413d G4146@G413e G4147@G413f G4148@G4140) ((lambda (G4151@kwd* G4152@mod** G4153@mr G4154@r G4155@m-exp-lab* G4156@m-exp-id* G4157@rhs* G4158@lex*) (begin (vector-for-each (lambda (G4161@id G4162@lab) (G2d13@extend-rib! G40d4@rib G4161@id G4162@lab)) G4156@m-exp-id* G4155@m-exp-lab*) (G2fbe@chi-body* (cdr G40cc@e*) G4154@r G4153@mr G4158@lex* G4157@rhs* G4152@mod** G4151@kwd* G40d3@exp* G40d4@rib G40d5@top?))) G4148@G4140 G4147@G413f G4146@G413e G4145@G413d G4144@G413c G4143@G413b G4142@G413a G4141@G4139))) (if (memv G40f3@t '(library)) (begin (G302e@library-expander (G2d78@stx->datum G40e0@e)) (G2fbe@chi-body* (cdr G40cc@e*) G40cd@r G40ce@mr G40cf@lex* G40d0@rhs* G40d1@mod** G40f1@kwd* G40d3@exp* G40d4@rib G40d5@top?)) (if (memv G40f3@t '(export)) ((lambda (G4165@t) ((lambda (G4167@ls/false) (if G4167@ls/false (apply (lambda (G4169@exp-decl*) (G2fbe@chi-body* (cdr G40cc@e*) G40cd@r G40ce@mr G40cf@lex* G40d0@rhs* G40d1@mod** G40f1@kwd* (append G4169@exp-decl* G40d3@exp*) G40d4@rib G40d5@top?)) G4167@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G4165@t))) (G2f61@syntax-dispatch G4165@t '(_ . each-any)))) G40e0@e) (if (memv G40f3@t '(import)) ((lambda () ((lambda (G416c@module-import? G416e@module-import G4170@library-import) (begin (set! G416c@module-import? (lambda (G41b8@e) ((lambda (G41ba@t) ((lambda (G41bc@ls/false) (if (and G41bc@ls/false (apply (lambda (G41be@id) (G2d62@id? G41be@id)) G41bc@ls/false)) (apply (lambda (G41c0@id) '#t) G41bc@ls/false) ((lambda (G41c2@t) ((lambda (G41c4@ls/false) (if G41c4@ls/false (apply (lambda (G41c6@imp*) '#f) G41c4@ls/false) ((lambda (G41c8@t) ((lambda (G41ca@ls/false) (if G41ca@ls/false (apply (lambda () (G304c@syntax-violation '#f '"malformed import form" G41b8@e)) G41ca@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G41c8@t))) (G2f61@syntax-dispatch G41c8@t '_))) G41c2@t))) (G2f61@syntax-dispatch G41c2@t '(_ . each-any)))) G41ba@t))) (G2f61@syntax-dispatch G41ba@t '(_ any)))) G41b8@e))) (set! G416e@module-import (lambda (G4199@e G419a@r) ((lambda (G419d@t) ((lambda (G419f@ls/false) (if (and G419f@ls/false (apply (lambda (G41a1@id) (G2d62@id? G41a1@id)) G419f@ls/false)) (apply (lambda (G41a3@id) (call-with-values (lambda () (G2d8a@syntax-type G41a3@id G419a@r)) (lambda (G41a8@G41a5 G41a9@G41a6 G41aa@G41a7) ((lambda (G41ae@kwd G41af@value G41b0@type) ((lambda (G41b4@t) (if (memv G41b4@t '($module)) ((lambda (G41b6@iface) (values (G2fba@module-interface-exp-id* G41b6@iface G41a3@id) (G2fb2@module-interface-exp-lab-vec G41b6@iface))) G41af@value) (G304c@syntax-violation '#f '"invalid import" G4199@e))) G41b0@type)) G41aa@G41a7 G41a9@G41a6 G41a8@G41a5)))) G419f@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G419d@t))) (G2f61@syntax-dispatch G419d@t '(_ any)))) G4199@e))) (set! G4170@library-import (lambda (G417f@e) ((lambda (G4181@t) ((lambda (G4183@ls/false) (if G4183@ls/false (apply (lambda (G4185@ctxt G4186@imp*) (call-with-values (lambda () (G2fc8@parse-import-spec* (G3052@syntax->datum G4186@imp*))) (lambda (G418b@G4189 G418c@G418a) ((lambda (G418f@subst-labels G4190@subst-names) (values (vector-map (lambda (G4193@name) (G2d40@datum->stx G4185@ctxt G4193@name)) G4190@subst-names) G418f@subst-labels)) G418c@G418a G418b@G4189)))) G4183@ls/false) ((lambda (G4195@t) ((lambda (G4197@ls/false) (if G4197@ls/false (apply (lambda () (G304c@syntax-violation '#f '"invalid import form" G417f@e)) G4197@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G4195@t))) (G2f61@syntax-dispatch G4195@t '_))) G4181@t))) (G2f61@syntax-dispatch G4181@t '(any . each-any)))) G417f@e))) (begin (call-with-values (lambda () (if (G416c@module-import? G40e0@e) (G416e@module-import G40e0@e G40cd@r) (G4170@library-import G40e0@e))) (lambda (G4173@G4171 G4174@G4172) ((lambda (G4177@lab* G4178@id*) (vector-for-each (lambda (G417b@id G417c@lab) (G2d13@extend-rib! G40d4@rib G417b@id G417c@lab)) G4178@id* G4177@lab*)) G4174@G4172 G4173@G4171))) (G2fbe@chi-body* (cdr G40cc@e*) G40cd@r G40ce@mr G40cf@lex* G40d0@rhs* G40d1@mod** G40f1@kwd* G40d3@exp* G40d4@rib G40d5@top?)))) '#f '#f '#f))) (if G40d5@top? (G2fbe@chi-body* (cdr G40cc@e*) G40cd@r G40ce@mr (cons (G2cde@gen-lexical 'dummy) G40cf@lex*) (cons (cons 'top-expr G40e0@e) G40d0@rhs*) G40d1@mod** G40f1@kwd* G40d3@exp* G40d4@rib G40d5@top?) (values G40cc@e* G40cd@r G40ce@mr G40cf@lex* G40d0@rhs* G40d1@mod** G40f1@kwd* G40d3@exp*)))))))))))))) G40ed@type)) (if (G2d62@id? G40eb@kwd) (cons G40eb@kwd G40d2@kwd*) G40d2@kwd*))) G40e7@G40e4 G40e6@G40e3 G40e5@G40e2)))) (car G40cc@e*))))) (set! G2fc0@expand-transformer (lambda (G41cc@expr G41cd@r) ((lambda (G41d0@rtc) ((lambda (G41d2@expanded-rhs) (begin (for-each ((lambda (G41d4@mark-visit) (lambda (G41d6@x) (begin (G2b79@G2a20@invoke-library G41d6@x) (G41d4@mark-visit G41d6@x)))) (G2fd0@vis-collector)) (G41d0@rtc)) G41d2@expanded-rhs)) ((lambda (G41dc@G41d8 G41dd@G41d9 G41de@G41da G41df@G41db) ((lambda (G41e4@swap) (dynamic-wind G41e4@swap (lambda () (G2f85@chi-expr G41cc@expr G41cd@r G41cd@r)) G41e4@swap)) (lambda () (begin ((lambda (G41e6@t) (begin (G41dc@G41d8 G41de@G41da) (set! G41de@G41da G41e6@t))) (G41dc@G41d8)) ((lambda (G41e8@t) (begin (G41dd@G41d9 G41df@G41db) (set! G41df@G41db G41e8@t))) (G41dd@G41d9)))))) G2fce@inv-collector G2fd0@vis-collector G41d0@rtc (lambda (G41ea@x) (values))))) (G2fcc@make-collector)))) (set! G2fc2@parse-exports (lambda (G41ec@exp*) ((letrec ((G41ee@f (lambda (G41f0@exp* G41f1@int* G41f2@ext*) (if (null? G41f0@exp*) (begin (if (not (G2d6c@valid-bound-ids? G41f2@ext*)) (G304c@syntax-violation 'export '"invalid exports" (G2f99@find-dups G41f2@ext*)) (void)) (values (map G3052@syntax->datum G41f2@ext*) G41f1@int*)) ((lambda (G41f6@t) ((lambda (G41f8@ls/false) (if G41f8@ls/false (apply (lambda (G41fa@rename G41fb@i* G41fc@e*) (begin (if (not (and (eq? (G3052@syntax->datum G41fa@rename) 'rename) (for-all G2d62@id? G41fb@i*) (for-all G2d62@id? G41fc@e*))) (G304c@syntax-violation 'export '"invalid export specifier" (car G41f0@exp*)) (void)) (G41ee@f (cdr G41f0@exp*) (append G41fb@i* G41f1@int*) (append G41fc@e* G41f2@ext*)))) G41f8@ls/false) ((lambda (G4200@t) ((lambda (G4202@ls/false) (if G4202@ls/false (apply (lambda (G4204@ie) (begin (if (not (G2d62@id? G4204@ie)) (G304c@syntax-violation 'export '"invalid export" G4204@ie) (void)) (G41ee@f (cdr G41f0@exp*) (cons G4204@ie G41f1@int*) (cons G4204@ie G41f2@ext*)))) G4202@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G4200@t))) (G2f61@syntax-dispatch G4200@t 'any))) G41f6@t))) (G2f61@syntax-dispatch G41f6@t '(any . #(each (any any)))))) (car G41f0@exp*)))))) G41ee@f) G41ec@exp* '() '()))) (set! G2fc4@parse-library-name (lambda (G4206@spec) ((lambda (G4209@parse) (begin (set! G4209@parse (lambda (G4214@x) ((lambda (G4216@t) ((lambda (G4218@ls/false) (if (and G4218@ls/false (apply (lambda (G421a@v*) (for-all (lambda (G421c@x) ((lambda (G421e@x) (and (integer? G421e@x) (exact? G421e@x))) (G3052@syntax->datum G421c@x))) G421a@v*)) G4218@ls/false)) (apply (lambda (G4220@v*) (values '() (map G3052@syntax->datum G4220@v*))) G4218@ls/false) ((lambda (G4222@t) ((lambda (G4224@ls/false) (if (and G4224@ls/false (apply (lambda (G4226@x G4227@rest) (symbol? (G3052@syntax->datum G4226@x))) G4224@ls/false)) (apply (lambda (G422a@x G422b@rest) (call-with-values (lambda () (G4209@parse G422b@rest)) (lambda (G4230@G422e G4231@G422f) ((lambda (G4234@v* G4235@x*) (values (cons (G3052@syntax->datum G422a@x) G4235@x*) G4234@v*)) G4231@G422f G4230@G422e)))) G4224@ls/false) ((lambda (G4238@t) ((lambda (G423a@ls/false) (if G423a@ls/false (apply (lambda () (values '() '())) G423a@ls/false) ((lambda (G423c@t) ((lambda (G423e@ls/false) (if G423e@ls/false (apply (lambda () (G304c@syntax-violation '#f '"invalid library name" G4206@spec)) G423e@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G423c@t))) (G2f61@syntax-dispatch G423c@t '_))) G4238@t))) (G2f61@syntax-dispatch G4238@t '()))) G4222@t))) (G2f61@syntax-dispatch G4222@t '(any . any)))) G4216@t))) (G2f61@syntax-dispatch G4216@t '(each-any)))) G4214@x))) (call-with-values (lambda () (G4209@parse G4206@spec)) (lambda (G420c@G420a G420d@G420b) ((lambda (G4210@ver* G4211@name*) (begin (if (null? G4211@name*) (G304c@syntax-violation '#f '"empty library name" G4206@spec) (void)) (values G4211@name* G4210@ver*))) G420d@G420b G420c@G420a))))) '#f))) (set! G2fc6@parse-library (lambda (G4240@e) ((lambda (G4242@t) ((lambda (G4244@ls/false) (if (and G4244@ls/false (apply (lambda (G4246@library G4247@name* G4248@export G4249@exp* G424a@import G424b@imp* G424c@b*) (and (eq? (G3052@syntax->datum G4248@export) 'export) (eq? (G3052@syntax->datum G424a@import) 'import) (eq? (G3052@syntax->datum G4246@library) 'library))) G4244@ls/false)) (apply (lambda (G4254@library G4255@name* G4256@export G4257@exp* G4258@import G4259@imp* G425a@b*) (values G4255@name* G4257@exp* G4259@imp* G425a@b*)) G4244@ls/false) ((lambda (G4262@t) ((lambda (G4264@ls/false) (if G4264@ls/false (apply (lambda () (G304c@syntax-violation '#f '"malformed library" G4240@e)) G4264@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G4262@t))) (G2f61@syntax-dispatch G4262@t '_))) G4242@t))) (G2f61@syntax-dispatch G4242@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4240@e))) (set! G2fc8@parse-import-spec* ((lambda () ((lambda (G4267@idsyn? G4269@dup-error G426b@merge-substs G426d@exclude* G426f@find* G4271@rem* G4273@remove-dups G4275@parse-library-name G4277@import-library G4279@get-import G427b@add-imports!) (begin (set! G4267@idsyn? (lambda (G4466@x) (symbol? (G3052@syntax->datum G4466@x)))) (set! G4269@dup-error (lambda (G4464@name) (G304c@syntax-violation 'import '"two imports with different bindings" G4464@name))) (set! G426b@merge-substs (lambda (G4452@s G4453@subst) ((lambda (G4457@insert-to-subst) (begin (set! G4457@insert-to-subst (lambda (G4458@a G4459@subst) ((lambda (G445c@name G445d@label) ((lambda (G4460@t) (if G4460@t ((lambda (G4462@x) (if (eq? (cdr G4462@x) G445d@label) G4459@subst (G4269@dup-error G445c@name))) G4460@t) (cons G4458@a G4459@subst))) (assq G445c@name G4459@subst))) (car G4458@a) (cdr G4458@a)))) (if (null? G4452@s) G4453@subst (G4457@insert-to-subst (car G4452@s) (G426b@merge-substs (cdr G4452@s) G4453@subst))))) '#f))) (set! G426d@exclude* (lambda (G4428@sym* G4429@subst) ((lambda (G442d@exclude) (begin (set! G442d@exclude (lambda (G4442@sym G4443@subst) (if (null? G4443@subst) (G304c@syntax-violation 'import '"cannot rename unbound identifier" G4442@sym) (if (eq? G4442@sym (caar G4443@subst)) (values (cdar G4443@subst) (cdr G4443@subst)) ((lambda (G4446@a) (call-with-values (lambda () (G442d@exclude G4442@sym (cdr G4443@subst))) (lambda (G444a@G4448 G444b@G4449) ((lambda (G444e@subst G444f@old) (values G444f@old (cons G4446@a G444e@subst))) G444b@G4449 G444a@G4448)))) (car G4443@subst)))))) (if (null? G4428@sym*) (values '() G4429@subst) (call-with-values (lambda () (G442d@exclude (car G4428@sym*) G4429@subst)) (lambda (G4430@G442e G4431@G442f) ((lambda (G4434@subst G4435@old) (call-with-values (lambda () (G426d@exclude* (cdr G4428@sym*) G4434@subst)) (lambda (G443a@G4438 G443b@G4439) ((lambda (G443e@subst G443f@old*) (values (cons G4435@old G443f@old*) G443e@subst)) G443b@G4439 G443a@G4438)))) G4431@G442f G4430@G442e)))))) '#f))) (set! G426f@find* (lambda (G4420@sym* G4421@subst) (map (lambda (G4424@x) ((lambda (G4426@t) (if G4426@t (cdr G4426@t) (G304c@syntax-violation 'import '"cannot find identifier" G4424@x))) (assq G4424@x G4421@subst))) G4420@sym*))) (set! G4271@rem* (lambda (G4418@sym* G4419@subst) ((letrec ((G441c@f (lambda (G441e@subst) (if (null? G441e@subst) '() (if (memq (caar G441e@subst) G4418@sym*) (G441c@f (cdr G441e@subst)) (cons (car G441e@subst) (G441c@f (cdr G441e@subst)))))))) G441c@f) G4419@subst))) (set! G4273@remove-dups (lambda (G4416@ls) (if (null? G4416@ls) '() (if (memq (car G4416@ls) (cdr G4416@ls)) (G4273@remove-dups (cdr G4416@ls)) (cons (car G4416@ls) (G4273@remove-dups (cdr G4416@ls))))))) (set! G4275@parse-library-name (lambda (G4330@spec) ((lambda (G4333@subversion? G4335@subversion-pred G4337@version-pred) (begin (set! G4333@subversion? (lambda (G4412@x) ((lambda (G4414@x) (and (integer? G4414@x) (exact? G4414@x) (>= G4414@x '0))) (G3052@syntax->datum G4412@x)))) (set! G4335@subversion-pred (lambda (G43b2@x*) ((lambda (G43b4@t) ((lambda (G43b6@ls/false) (if (and G43b6@ls/false (apply (lambda (G43b8@n) (G4333@subversion? G43b8@n)) G43b6@ls/false)) (apply (lambda (G43ba@n) (lambda (G43bc@x) (= G43bc@x (G3052@syntax->datum G43ba@n)))) G43b6@ls/false) ((lambda (G43be@t) ((lambda (G43c0@ls/false) (if (and G43c0@ls/false (apply (lambda (G43c2@p? G43c3@sub*) (eq? (G3052@syntax->datum G43c2@p?) 'and)) G43c0@ls/false)) (apply (lambda (G43c6@p? G43c7@sub*) ((lambda (G43ca@p*) (lambda (G43cc@x) (for-all (lambda (G43ce@p) (G43ce@p G43cc@x)) G43ca@p*))) (map G4335@subversion-pred G43c7@sub*))) G43c0@ls/false) ((lambda (G43d0@t) ((lambda (G43d2@ls/false) (if (and G43d2@ls/false (apply (lambda (G43d4@p? G43d5@sub*) (eq? (G3052@syntax->datum G43d4@p?) 'or)) G43d2@ls/false)) (apply (lambda (G43d8@p? G43d9@sub*) ((lambda (G43dc@p*) (lambda (G43de@x) (exists (lambda (G43e0@p) (G43e0@p G43de@x)) G43dc@p*))) (map G4335@subversion-pred G43d9@sub*))) G43d2@ls/false) ((lambda (G43e2@t) ((lambda (G43e4@ls/false) (if (and G43e4@ls/false (apply (lambda (G43e6@p? G43e7@sub) (eq? (G3052@syntax->datum G43e6@p?) 'not)) G43e4@ls/false)) (apply (lambda (G43ea@p? G43eb@sub) ((lambda (G43ee@p) (lambda (G43f0@x) (not (G43ee@p G43f0@x)))) (G4335@subversion-pred G43eb@sub))) G43e4@ls/false) ((lambda (G43f2@t) ((lambda (G43f4@ls/false) (if (and G43f4@ls/false (apply (lambda (G43f6@p? G43f7@n) (and (eq? (G3052@syntax->datum G43f6@p?) '<=) (G4333@subversion? G43f7@n))) G43f4@ls/false)) (apply (lambda (G43fa@p? G43fb@n) (lambda (G43fe@x) (<= G43fe@x (G3052@syntax->datum G43fb@n)))) G43f4@ls/false) ((lambda (G4400@t) ((lambda (G4402@ls/false) (if (and G4402@ls/false (apply (lambda (G4404@p? G4405@n) (and (eq? (G3052@syntax->datum G4404@p?) '>=) (G4333@subversion? G4405@n))) G4402@ls/false)) (apply (lambda (G4408@p? G4409@n) (lambda (G440c@x) (>= G440c@x (G3052@syntax->datum G4409@n)))) G4402@ls/false) ((lambda (G440e@t) ((lambda (G4410@ls/false) (if G4410@ls/false (apply (lambda () (G304c@syntax-violation 'import '"invalid sub-version spec" G4330@spec G43b2@x*)) G4410@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G440e@t))) (G2f61@syntax-dispatch G440e@t '_))) G4400@t))) (G2f61@syntax-dispatch G4400@t '(any any)))) G43f2@t))) (G2f61@syntax-dispatch G43f2@t '(any any)))) G43e2@t))) (G2f61@syntax-dispatch G43e2@t '(any any)))) G43d0@t))) (G2f61@syntax-dispatch G43d0@t '(any . each-any)))) G43be@t))) (G2f61@syntax-dispatch G43be@t '(any . each-any)))) G43b4@t))) (G2f61@syntax-dispatch G43b4@t 'any))) G43b2@x*))) (set! G4337@version-pred (lambda (G4362@x*) ((lambda (G4364@t) ((lambda (G4366@ls/false) (if G4366@ls/false (apply (lambda () (lambda (G4368@x) '#t)) G4366@ls/false) ((lambda (G436a@t) ((lambda (G436c@ls/false) (if (and G436c@ls/false (apply (lambda (G436e@c G436f@ver*) (eq? (G3052@syntax->datum G436e@c) 'and)) G436c@ls/false)) (apply (lambda (G4372@c G4373@ver*) ((lambda (G4376@p*) (lambda (G4378@x) (for-all (lambda (G437a@p) (G437a@p G4378@x)) G4376@p*))) (map G4337@version-pred G4373@ver*))) G436c@ls/false) ((lambda (G437c@t) ((lambda (G437e@ls/false) (if (and G437e@ls/false (apply (lambda (G4380@c G4381@ver*) (eq? (G3052@syntax->datum G4380@c) 'or)) G437e@ls/false)) (apply (lambda (G4384@c G4385@ver*) ((lambda (G4388@p*) (lambda (G438a@x) (exists (lambda (G438c@p) (G438c@p G438a@x)) G4388@p*))) (map G4337@version-pred G4385@ver*))) G437e@ls/false) ((lambda (G438e@t) ((lambda (G4390@ls/false) (if (and G4390@ls/false (apply (lambda (G4392@c G4393@ver) (eq? (G3052@syntax->datum G4392@c) 'not)) G4390@ls/false)) (apply (lambda (G4396@c G4397@ver) ((lambda (G439a@p) (lambda (G439c@x) (not (G439a@p G439c@x)))) (G4337@version-pred G4397@ver))) G4390@ls/false) ((lambda (G439e@t) ((lambda (G43a0@ls/false) (if G43a0@ls/false (apply (lambda (G43a2@sub*) ((lambda (G43a4@p*) (lambda (G43a6@x) ((letrec ((G43a8@f (lambda (G43aa@p* G43ab@x) (if (null? G43aa@p*) '#t (if (null? G43ab@x) '#f (and ((car G43aa@p*) (car G43ab@x)) (G43a8@f (cdr G43aa@p*) (cdr G43ab@x)))))))) G43a8@f) G43a4@p* G43a6@x))) (map G4335@subversion-pred G43a2@sub*))) G43a0@ls/false) ((lambda (G43ae@t) ((lambda (G43b0@ls/false) (if G43b0@ls/false (apply (lambda () (G304c@syntax-violation 'import '"invalid version spec" G4330@spec G4362@x*)) G43b0@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G43ae@t))) (G2f61@syntax-dispatch G43ae@t '_))) G439e@t))) (G2f61@syntax-dispatch G439e@t 'each-any))) G438e@t))) (G2f61@syntax-dispatch G438e@t '(any any)))) G437c@t))) (G2f61@syntax-dispatch G437c@t '(any . each-any)))) G436a@t))) (G2f61@syntax-dispatch G436a@t '(any . each-any)))) G4364@t))) (G2f61@syntax-dispatch G4364@t '()))) G4362@x*))) ((letrec ((G4338@f (lambda (G433a@x) ((lambda (G433c@t) ((lambda (G433e@ls/false) (if G433e@ls/false (apply (lambda (G4340@version-spec*) (values '() (G4337@version-pred G4340@version-spec*))) G433e@ls/false) ((lambda (G4342@t) ((lambda (G4344@ls/false) (if (and G4344@ls/false (apply (lambda (G4346@x G4347@x*) (G4267@idsyn? G4346@x)) G4344@ls/false)) (apply (lambda (G434a@x G434b@x*) (call-with-values (lambda () (G4338@f G434b@x*)) (lambda (G4350@G434e G4351@G434f) ((lambda (G4354@pred G4355@name) (values (cons (G3052@syntax->datum G434a@x) G4355@name) G4354@pred)) G4351@G434f G4350@G434e)))) G4344@ls/false) ((lambda (G4358@t) ((lambda (G435a@ls/false) (if G435a@ls/false (apply (lambda () (values '() (lambda (G435c@x) '#t))) G435a@ls/false) ((lambda (G435e@t) ((lambda (G4360@ls/false) (if G4360@ls/false (apply (lambda () (G304c@syntax-violation '#f '"invalid import spec" G4330@spec)) G4360@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G435e@t))) (G2f61@syntax-dispatch G435e@t '_))) G4358@t))) (G2f61@syntax-dispatch G4358@t '()))) G4342@t))) (G2f61@syntax-dispatch G4342@t '(any . any)))) G433c@t))) (G2f61@syntax-dispatch G433c@t '(each-any)))) G433a@x)))) G4338@f) G4330@spec))) '#f '#f '#f))) (set! G4277@import-library (lambda (G4322@spec*) (call-with-values (lambda () (G4275@parse-library-name G4322@spec*)) (lambda (G4326@G4324 G4327@G4325) ((lambda (G432a@pred G432b@name) (begin (if (null? G432b@name) (G304c@syntax-violation 'import '"empty library name" G4322@spec*) (void)) ((lambda (G432e@lib) (begin (if (not G432e@lib) (G304c@syntax-violation 'import '"cannot find library with required name" G432b@name) (void)) (if (not (G432a@pred (G2b4a@G29c2@library-version G432e@lib))) (G304c@syntax-violation 'import '"library does not satisfy version specification" G4322@spec* G432e@lib) (void)) ((G2fd2@imp-collector) G432e@lib) (G2b4e@G29ca@library-subst G432e@lib))) (G2b72@G2a12@find-library-by-name G432b@name)))) G4327@G4325 G4326@G4324))))) (set! G4279@get-import (lambda (G4294@spec) ((lambda (G4296@t) ((lambda (G4298@ls/false) (if (and G4298@ls/false (apply (lambda (G429a@x G429b@x*) (not (memq (G3052@syntax->datum G429a@x) '(for rename except only prefix library)))) G4298@ls/false)) (apply (lambda (G429e@x G429f@x*) (G4277@import-library (cons G429e@x G429f@x*))) G4298@ls/false) ((lambda (G42a2@t) ((lambda (G42a4@ls/false) (if (and G42a4@ls/false (apply (lambda (G42a6@rename G42a7@isp G42a8@old* G42a9@new*) (and (eq? (G3052@syntax->datum G42a6@rename) 'rename) (for-all G4267@idsyn? G42a8@old*) (for-all G4267@idsyn? G42a9@new*))) G42a4@ls/false)) (apply (lambda (G42ae@rename G42af@isp G42b0@old* G42b1@new*) ((lambda (G42b6@subst G42b7@old* G42b8@new*) ((lambda (G42bc@old-label*) ((lambda (G42be@subst) (G426b@merge-substs (map cons G42b8@new* G42bc@old-label*) G42be@subst)) (G4271@rem* G42b7@old* G42b6@subst))) (G426f@find* G42b7@old* G42b6@subst))) (G4279@get-import G42af@isp) (map G3052@syntax->datum G42b0@old*) (map G3052@syntax->datum G42b1@new*))) G42a4@ls/false) ((lambda (G42c0@t) ((lambda (G42c2@ls/false) (if (and G42c2@ls/false (apply (lambda (G42c4@except G42c5@isp G42c6@sym*) (and (eq? (G3052@syntax->datum G42c4@except) 'except) (for-all G4267@idsyn? G42c6@sym*))) G42c2@ls/false)) (apply (lambda (G42ca@except G42cb@isp G42cc@sym*) ((lambda (G42d0@subst) (G4271@rem* (map G3052@syntax->datum G42cc@sym*) G42d0@subst)) (G4279@get-import G42cb@isp))) G42c2@ls/false) ((lambda (G42d2@t) ((lambda (G42d4@ls/false) (if (and G42d4@ls/false (apply (lambda (G42d6@only G42d7@isp G42d8@sym*) (and (eq? (G3052@syntax->datum G42d6@only) 'only) (for-all G4267@idsyn? G42d8@sym*))) G42d4@ls/false)) (apply (lambda (G42dc@only G42dd@isp G42de@sym*) ((lambda (G42e2@subst G42e3@sym*) ((lambda (G42e6@sym*) ((lambda (G42e8@lab*) (map cons G42e6@sym* G42e8@lab*)) (G426f@find* G42e6@sym* G42e2@subst))) (G4273@remove-dups G42e3@sym*))) (G4279@get-import G42dd@isp) (map G3052@syntax->datum G42de@sym*))) G42d4@ls/false) ((lambda (G42ea@t) ((lambda (G42ec@ls/false) (if (and G42ec@ls/false (apply (lambda (G42ee@prefix G42ef@isp G42f0@p) (and (eq? (G3052@syntax->datum G42ee@prefix) 'prefix) (G4267@idsyn? G42f0@p))) G42ec@ls/false)) (apply (lambda (G42f4@prefix G42f5@isp G42f6@p) ((lambda (G42fa@subst G42fb@prefix) (map (lambda (G42fe@x) (cons (string->symbol (string-append G42fb@prefix (symbol->string (car G42fe@x)))) (cdr G42fe@x))) G42fa@subst)) (G4279@get-import G42f5@isp) (symbol->string (G3052@syntax->datum G42f6@p)))) G42ec@ls/false) ((lambda (G4300@t) ((lambda (G4302@ls/false) (if (and G4302@ls/false (apply (lambda (G4304@library G4305@spec*) (eq? (G3052@syntax->datum G4304@library) 'library)) G4302@ls/false)) (apply (lambda (G4308@library G4309@spec*) (G4277@import-library G4309@spec*)) G4302@ls/false) ((lambda (G430c@t) ((lambda (G430e@ls/false) (if (and G430e@ls/false (apply (lambda (G4310@for G4311@isp G4312@rest) (eq? (G3052@syntax->datum G4310@for) 'for)) G430e@ls/false)) (apply (lambda (G4316@for G4317@isp G4318@rest) (G4279@get-import G4317@isp)) G430e@ls/false) ((lambda (G431c@t) ((lambda (G431e@ls/false) (if G431e@ls/false (apply (lambda (G4320@spec) (G304c@syntax-violation 'import '"invalid import spec" G4320@spec)) G431e@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G431c@t))) (G2f61@syntax-dispatch G431c@t 'any))) G430c@t))) (G2f61@syntax-dispatch G430c@t '(any any . any)))) G4300@t))) (G2f61@syntax-dispatch G4300@t '(any each-any)))) G42ea@t))) (G2f61@syntax-dispatch G42ea@t '(any any any)))) G42d2@t))) (G2f61@syntax-dispatch G42d2@t '(any any . each-any)))) G42c0@t))) (G2f61@syntax-dispatch G42c0@t '(any any . each-any)))) G42a2@t))) (G2f61@syntax-dispatch G42a2@t '(any any . #(each (any any)))))) G4296@t))) (G2f61@syntax-dispatch G4296@t '(any . each-any)))) G4294@spec))) (set! G427b@add-imports! (lambda (G4284@imp G4285@h) ((lambda (G4288@subst) (for-each (lambda (G428a@x) ((lambda (G428c@name G428d@label) ((lambda (G4290@t) (if G4290@t ((lambda (G4292@l) (if (not (eq? G4292@l G428d@label)) (G4269@dup-error G428c@name) (void))) G4290@t) (hashtable-set! G4285@h G428c@name G428d@label))) (hashtable-ref G4285@h G428c@name '#f))) (car G428a@x) (cdr G428a@x))) G4288@subst)) (G4279@get-import G4284@imp)))) (lambda (G427c@imp*) ((letrec ((G427e@f (lambda (G4280@imp* G4281@h) (if (null? G4280@imp*) (hashtable-entries G4281@h) (begin (G427b@add-imports! (car G4280@imp*) G4281@h) (G427e@f (cdr G4280@imp*) G4281@h)))))) G427e@f) G427c@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fca@make-top-rib (lambda (G4468@names G4469@labels) ((lambda (G446c@rib) (begin (vector-for-each (lambda (G446e@name G446f@label) (begin (if (not (symbol? G446e@name)) (error 'make-top-rib '"BUG: not a symbol" G446e@name) (void)) (G2d15@extend-rib/nc! G446c@rib (G2d2c@make-stx G446e@name G2cda@top-mark* '() '()) G446f@label))) G4468@names G4469@labels) G446c@rib)) (G2d0f@make-cache-rib)))) (set! G2fcc@make-collector (lambda () ((lambda (G4472@ls) (lambda G4476 ((lambda (G4477) (if (= G4477 '0) (apply (lambda () G4472@ls) G4476) (if (= G4477 '1) (apply (lambda (G4474@x) (set! G4472@ls (G2cd3@set-cons G4474@x G4472@ls))) G4476) (error 'apply '"invalid arg count")))) (length G4476)))) '()))) (set! G2fce@inv-collector (G28fe@G2834@make-parameter (lambda G4478@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G447a@x) (begin (if (not (procedure? G447a@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G447a@x) (void)) G447a@x)))) (set! G2fd0@vis-collector (G28fe@G2834@make-parameter (lambda G447c@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G447e@x) (begin (if (not (procedure? G447e@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G447e@x) (void)) G447e@x)))) (set! G2fd2@imp-collector (G28fe@G2834@make-parameter (lambda G4480@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4482@x) (begin (if (not (procedure? G4482@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4482@x) (void)) G4482@x)))) (set! G2fd4@chi-library-internal (lambda (G4484@e* G4485@rib G4486@top?) (call-with-values (lambda () (G2fbe@chi-body* G4484@e* '() '() '() '() '() '() '() G4485@rib G4486@top?)) (lambda (G4492@G448a G4493@G448b G4494@G448c G4495@G448d G4496@G448e G4497@G448f G4498@G4490 G4499@G4491) ((lambda (G44a2@exp* G44a3@_kwd* G44a4@mod** G44a5@rhs* G44a6@lex* G44a7@mr G44a8@r G44a9@e*) (values (append (apply append (reverse G44a4@mod**)) G44a9@e*) G44a8@r G44a7@mr (reverse G44a6@lex*) (reverse G44a5@rhs*) G44a2@exp*)) G4499@G4491 G4498@G4490 G4497@G448f G4496@G448e G4495@G448d G4494@G448c G4493@G448b G4492@G448a))))) (set! G2fd6@chi-interaction-expr (lambda (G44b2@e G44b3@rib G44b4@r) (call-with-values (lambda () (G2fbe@chi-body* (list G44b2@e) G44b4@r G44b4@r '() '() '() '() '() G44b3@rib '#t)) (lambda (G44c0@G44b8 G44c1@G44b9 G44c2@G44ba G44c3@G44bb G44c4@G44bc G44c5@G44bd G44c6@G44be G44c7@G44bf) ((lambda (G44d0@_exp* G44d1@_kwd* G44d2@mod** G44d3@rhs* G44d4@lex* G44d5@mr G44d6@r G44d7@e*) ((lambda (G44e0@e*) ((lambda (G44e2@e) (values G44e2@e G44d6@r)) (if (null? G44e0@e*) (G2cc0@G2c32@build-void) (if (null? (cdr G44e0@e*)) (car G44e0@e*) (G2cbf@G2c30@build-sequence '#f G44e0@e*))))) (G2f93@expand-interaction-rhs*/init* (reverse G44d4@lex*) (reverse G44d3@rhs*) (append (apply append (reverse G44d2@mod**)) G44d7@e*) G44d6@r G44d5@mr))) G44c7@G44bf G44c6@G44be G44c5@G44bd G44c4@G44bc G44c3@G44bb G44c2@G44ba G44c1@G44b9 G44c0@G44b8))))) (set! G2fd8@library-body-expander (lambda (G44e4@name G44e5@main-exp* G44e6@imp* G44e7@b* G44e8@top?) ((lambda (G44ef@itc) (begin (set! G44ef@itc (G2fcc@make-collector)) ((lambda (G44f4@G44f0 G44f5@G44f1 G44f6@G44f2 G44f7@G44f3) ((lambda (G44fc@swap) (dynamic-wind G44fc@swap (lambda () (call-with-values (lambda () (G2fc8@parse-import-spec* G44e6@imp*)) (lambda (G4500@G44fe G4501@G44ff) ((lambda (G4504@subst-labels G4505@subst-names) ((lambda (G4508@rib) ((lambda (G450b@wrap) (begin (set! G450b@wrap (lambda (G4577@x) (G2d2c@make-stx G4577@x G2cda@top-mark* (list G4508@rib) '()))) ((lambda (G450c@b* G450d@main-exp* G450e@rtc G450f@vtc) ((lambda (G4518@G4514 G4519@G4515 G451a@G4516 G451b@G4517) ((lambda (G4520@swap) (dynamic-wind G4520@swap (lambda () (call-with-values (lambda () (G2fd4@chi-library-internal G450c@b* G4508@rib G44e8@top?)) (lambda (G4528@G4522 G4529@G4523 G452a@G4524 G452b@G4525 G452c@G4526 G452d@G4527) ((lambda (G4534@internal-exp* G4535@rhs* G4536@lex* G4537@mr G4538@r G4539@init*) (call-with-values (lambda () (G2fc2@parse-exports (append G450d@main-exp* G4534@internal-exp*))) (lambda (G4542@G4540 G4543@G4541) ((lambda (G4546@exp-id* G4547@exp-name*) (begin (G2d19@seal-rib! G4508@rib) ((lambda (G454a@init*) ((lambda (G454c@rhs*) ((lambda () (begin (G2d1b@unseal-rib! G4508@rib) ((lambda (G454e@loc* G454f@export-subst) ((lambda (G4553@errstr) (begin (set! G4553@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3038@make-export-env/macros G4536@lex* G454e@loc* G4538@r)) (lambda (G4557@G4554 G4558@G4555 G4559@G4556) ((lambda (G455d@macro* G455e@global* G455f@export-env) (begin (for-each (lambda (G4563@s) ((lambda (G4565@name G4566@label) ((lambda (G4569@p) (if G4569@p ((lambda (G456b@b) ((lambda (G456d@type) (if (eq? G456d@type 'mutable) (G304c@syntax-violation 'export G4553@errstr G4565@name) (void))) (car G456b@b))) (cdr G4569@p)) (void))) (assq G4566@label G455f@export-env))) (car G4563@s) (cdr G4563@s))) G454f@export-subst) ((lambda (G456f@invoke-body G4570@invoke-definitions) (values (G44ef@itc) (G450e@rtc) (G450f@vtc) (G2cbf@G2c30@build-sequence '#f (append G4570@invoke-definitions (list G456f@invoke-body))) G455d@macro* G454f@export-subst G455f@export-env)) (G2cc2@G2c36@build-letrec* '#f G4536@lex* G454c@rhs* (G3034@build-exports G455e@global* G454a@init*)) (map G2cbb@G2b80@build-global-define (map cdr G455e@global*))))) G4559@G4556 G4558@G4555 G4557@G4554))))) '#f)) (map G2ce0@gen-global G4536@lex*) (G3036@make-export-subst G4547@exp-name* G4546@exp-id*)))))) (G2f95@chi-rhs* G4535@rhs* G4538@r G4537@mr))) (G2f81@chi-expr* G4539@init* G4538@r G4537@mr)))) G4543@G4541 G4542@G4540)))) G452d@G4527 G452c@G4526 G452b@G4525 G452a@G4524 G4529@G4523 G4528@G4522)))) G4520@swap)) (lambda () (begin ((lambda (G4573@t) (begin (G4518@G4514 G451a@G4516) (set! G451a@G4516 G4573@t))) (G4518@G4514)) ((lambda (G4575@t) (begin (G4519@G4515 G451b@G4517) (set! G451b@G4517 G4575@t))) (G4519@G4515)))))) G2fce@inv-collector G2fd0@vis-collector G450e@rtc G450f@vtc)) (map G450b@wrap G44e7@b*) (map G450b@wrap G44e5@main-exp*) (G2fcc@make-collector) (G2fcc@make-collector)))) '#f)) (G2fca@make-top-rib G4505@subst-names G4504@subst-labels))) G4501@G44ff G4500@G44fe)))) G44fc@swap)) (lambda () (begin ((lambda (G4579@t) (begin (G44f4@G44f0 G44f6@G44f2) (set! G44f6@G44f2 G4579@t))) (G44f4@G44f0)) ((lambda (G457b@t) (begin (G44f5@G44f1 G44f7@G44f3) (set! G44f7@G44f3 G457b@t))) (G44f5@G44f1)))))) G2fd2@imp-collector G305a@top-level-context G44ef@itc '#f))) '#f))) (set! G2fda@core-library-expander (lambda (G457d@e G457e@verify-name) (call-with-values (lambda () (G2fc6@parse-library G457d@e)) (lambda (G4585@G4581 G4586@G4582 G4587@G4583 G4588@G4584) ((lambda (G458d@b* G458e@imp* G458f@exp* G4590@name*) (call-with-values (lambda () (G2fc4@parse-library-name G4590@name*)) (lambda (G4597@G4595 G4598@G4596) ((lambda (G459b@ver G459c@name) (begin (G457e@verify-name G459c@name) (call-with-values (lambda () (G2fd8@library-body-expander G459c@name G458f@exp* G458e@imp* G458d@b* '#f)) (lambda (G45a6@G459f G45a7@G45a0 G45a8@G45a1 G45a9@G45a2 G45aa@G45a3 G45ab@G45a4 G45ac@G45a5) ((lambda (G45b4@export-env G45b5@export-subst G45b6@visit-code G45b7@invoke-code G45b8@visit-req* G45b9@invoke-req* G45ba@imp*) (values G459c@name G459b@ver G45ba@imp* G45b9@invoke-req* G45b8@visit-req* G45b7@invoke-code G45b6@visit-code G45b5@export-subst G45b4@export-env)) G45ac@G45a5 G45ab@G45a4 G45aa@G45a3 G45a9@G45a2 G45a8@G45a1 G45a7@G45a0 G45a6@G459f))))) G4598@G4596 G4597@G4595)))) G4588@G4584 G4587@G4583 G4586@G4582 G4585@G4581))))) (set! G2fdc@parse-top-level-program (lambda (G45c2@e*) ((lambda (G45c4@t) ((lambda (G45c6@ls/false) (if (and G45c6@ls/false (apply (lambda (G45c8@import G45c9@imp* G45ca@b*) (eq? (G3052@syntax->datum G45c8@import) 'import)) G45c6@ls/false)) (apply (lambda (G45ce@import G45cf@imp* G45d0@b*) (values G45cf@imp* G45d0@b*)) G45c6@ls/false) ((lambda (G45d4@t) ((lambda (G45d6@ls/false) (if (and G45d6@ls/false (apply (lambda (G45d8@import G45d9@x G45da@y) (eq? (G3052@syntax->datum G45d8@import) 'import)) G45d6@ls/false)) (apply (lambda (G45de@import G45df@x G45e0@y) (G304c@syntax-violation 'expander '"invalid syntax of top-level program" (G2d5c@syntax-car G45c2@e*))) G45d6@ls/false) ((lambda (G45e4@t) ((lambda (G45e6@ls/false) (if G45e6@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45e6@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G45e4@t))) (G2f61@syntax-dispatch G45e4@t '_))) G45d4@t))) (G2f61@syntax-dispatch G45d4@t '((any . any) . any)))) G45c4@t))) (G2f61@syntax-dispatch G45c4@t '((any . each-any) . each-any)))) G45c2@e*))) (set! G2fde@top-level-expander (lambda (G45e8@e*) (call-with-values (lambda () (G2fdc@parse-top-level-program G45e8@e*)) (lambda (G45ec@G45ea G45ed@G45eb) ((lambda (G45f0@b* G45f1@imp*) (call-with-values (lambda () (G2fd8@library-body-expander '() '() G45f1@imp* G45f0@b* '#t)) (lambda (G45fb@G45f4 G45fc@G45f5 G45fd@G45f6 G45fe@G45f7 G45ff@G45f8 G4600@G45f9 G4601@G45fa) ((lambda (G4609@export-env G460a@export-subst G460b@visit-code G460c@invoke-code G460d@visit-req* G460e@invoke-req* G460f@imp*) (values G460e@invoke-req* G460c@invoke-code)) G4601@G45fa G4600@G45f9 G45ff@G45f8 G45fe@G45f7 G45fd@G45f6 G45fc@G45f5 G45fb@G45f4)))) G45ed@G45eb G45ec@G45ea))))) (set! G2fe4@G2fdf (make-record-type-descriptor 'env '#f 'G2fe2 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fe6@G2fe1 '#f) (set! G2fe8@G2fe0 (make-record-constructor-descriptor G2fe4@G2fdf '#f G2fe6@G2fe1)) (set! G2feb@env? (record-predicate G2fe4@G2fdf)) (set! G2fed@make-env (record-constructor G2fe8@G2fe0)) (set! G2fef@env-names (record-accessor G2fe4@G2fdf '0)) (set! G2ff1@env-labels (record-accessor G2fe4@G2fdf '1)) (set! G2ff3@env-itc (record-accessor G2fe4@G2fdf '2)) (set! G2ff5@set-env-names! (record-mutator G2fe4@G2fdf '0)) (set! G2ff7@set-env-labels! (record-mutator G2fe4@G2fdf '1)) (set! G2ff9@set-env-itc! (record-mutator G2fe4@G2fdf '2)) (set! G2ffb@rp (G28fb@G282e@make-record-printer 'env (lambda (G4617@x G4618@p G4619@wr) (display '"#<environment>" G4618@p)))) (set! G3001@G2ffc (make-record-type-descriptor 'interaction-env '#f 'G2fff '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3003@G2ffe '#f) (set! G3005@G2ffd (make-record-constructor-descriptor G3001@G2ffc '#f G3003@G2ffe)) (set! G3008@interaction-env? (record-predicate G3001@G2ffc)) (set! G300a@make-interaction-env (record-constructor G3005@G2ffd)) (set! G300c@interaction-env-rib (record-accessor G3001@G2ffc '0)) (set! G300e@interaction-env-r (record-accessor G3001@G2ffc '1)) (set! G3010@interaction-env-locs (record-accessor G3001@G2ffc '2)) (set! G3012@set-interaction-env-rib! (record-mutator G3001@G2ffc '0)) (set! G3014@set-interaction-env-r! (record-mutator G3001@G2ffc '1)) (set! G3016@set-interaction-env-locs! (record-mutator G3001@G2ffc '2)) (set! G3018@rp (G28fb@G282e@make-record-printer 'interaction-env (lambda (G461d@x G461e@p G461f@wr) (display '"#<environment>" G461e@p)))) (set! G301a@interaction-environment-symbols (lambda () (G3022@environment-symbols (G3058@interaction-environment)))) (set! G301c@environment-bindings (lambda (G4623@e) (vector->list (vector-map (lambda (G4625@name G4626@label) (G301e@parse-binding (cons G4625@name (G2b78@G2a1e@imported-label->binding G4626@label)))) (G2fef@env-names G4623@e) (G2ff1@env-labels G4623@e))))) (set! G301e@parse-binding (lambda (G4629@b) (cons (car G4629@b) ((lambda (G462b@t) (if (memv G462b@t '(core-prim global)) 'procedure (if (memv G462b@t '(core-macro macro global-macro)) 'syntax (if (memv G462b@t '($core-rtd)) 'record (if (eq? (car G4629@b) (cadr G4629@b)) 'syntax 'unknown))))) (cadr G4629@b))))) (set! G3020@environment? (lambda (G462d@x) (or (G2feb@env? G462d@x) (G3008@interaction-env? G462d@x)))) (set! G3022@environment-symbols (lambda (G462f@x) (if (G2feb@env? G462f@x) (vector->list (G2fef@env-names G462f@x)) (if (G3008@interaction-env? G462f@x) (map values (G2cf9@rib-sym* (G300c@interaction-env-rib G462f@x))) (assertion-violation 'environment-symbols '"not an environment" G462f@x))))) (set! G3024@environment (lambda G4631@imp* ((lambda (G4633@itc) ((lambda (G4637@G4635 G4638@G4636) ((lambda (G463b@swap) (dynamic-wind G463b@swap (lambda () (call-with-values (lambda () (G2fc8@parse-import-spec* G4631@imp*)) (lambda (G463f@G463d G4640@G463e) ((lambda (G4643@subst-labels G4644@subst-names) (G2fed@make-env G4644@subst-names G4643@subst-labels G4633@itc)) G4640@G463e G463f@G463d)))) G463b@swap)) (lambda () ((lambda (G4647@t) (begin (G4637@G4635 G4638@G4636) (set! G4638@G4636 G4647@t))) (G4637@G4635))))) G2fd2@imp-collector G4633@itc)) (G2fcc@make-collector)))) (set! G3026@null-environment (lambda (G4649@n) (begin (if (not (eqv? G4649@n '5)) (assertion-violation 'null-environment '"not 5" G4649@n) (void)) (G3024@environment '(psyntax null-environment-5))))) (set! G3028@scheme-report-environment (lambda (G464b@n) (begin (if (not (eqv? G464b@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G464b@n) (void)) (G3024@environment '(psyntax scheme-report-environment-5))))) (set! G302a@expand (lambda (G464d@x G464e@env) (if (G2feb@env? G464e@env) ((lambda (G4651@rib) ((lambda (G4653@x G4654@itc G4655@rtc G4656@vtc) ((lambda (G465b@x) (begin (G2d19@seal-rib! G4651@rib) (values G465b@x (G4655@rtc)))) ((lambda (G4665@G465d G4666@G465e G4667@G465f G4668@G4660 G4669@G4661 G466a@G4662 G466b@G4663 G466c@G4664) ((lambda (G4675@swap) (dynamic-wind G4675@swap (lambda () (G2f85@chi-expr G4653@x '() '())) G4675@swap)) (lambda () (begin ((lambda (G4677@t) (begin (G4665@G465d G4669@G4661) (set! G4669@G4661 G4677@t))) (G4665@G465d)) ((lambda (G4679@t) (begin (G4666@G465e G466a@G4662) (set! G466a@G4662 G4679@t))) (G4666@G465e)) ((lambda (G467b@t) (begin (G4667@G465f G466b@G4663) (set! G466b@G4663 G467b@t))) (G4667@G465f)) ((lambda (G467d@t) (begin (G4668@G4660 G466c@G4664) (set! G466c@G4664 G467d@t))) (G4668@G4660)))))) G305a@top-level-context G2fce@inv-collector G2fd0@vis-collector G2fd2@imp-collector '#f G4655@rtc G4656@vtc G4654@itc))) (G2d2c@make-stx G464d@x G2cda@top-mark* (list G4651@rib) '()) (G2ff3@env-itc G464e@env) (G2fcc@make-collector) (G2fcc@make-collector))) (G2fca@make-top-rib (G2fef@env-names G464e@env) (G2ff1@env-labels G464e@env))) (if (G3008@interaction-env? G464e@env) ((lambda (G467f@rib G4680@r G4681@rtc) ((lambda (G4685@x) (call-with-values (lambda () ((lambda (G4691@G4689 G4692@G468a G4693@G468b G4694@G468c G4695@G468d G4696@G468e G4697@G468f G4698@G4690) ((lambda (G46a1@swap) (dynamic-wind G46a1@swap (lambda () (G2fd6@chi-interaction-expr G4685@x G467f@rib G4680@r)) G46a1@swap)) (lambda () (begin ((lambda (G46a3@t) (begin (G4691@G4689 G4695@G468d) (set! G4695@G468d G46a3@t))) (G4691@G4689)) ((lambda (G46a5@t) (begin (G4692@G468a G4696@G468e) (set! G4696@G468e G46a5@t))) (G4692@G468a)) ((lambda (G46a7@t) (begin (G4693@G468b G4697@G468f) (set! G4697@G468f G46a7@t))) (G4693@G468b)) ((lambda (G46a9@t) (begin (G4694@G468c G4698@G4690) (set! G4698@G4690 G46a9@t))) (G4694@G468c)))))) G305a@top-level-context G2fce@inv-collector G2fd0@vis-collector G2fd2@imp-collector G464e@env G4681@rtc (G2fcc@make-collector) (G2fcc@make-collector))) (lambda (G46ab@G4687 G46ac@G4688) ((lambda (G46af@r^ G46b0@e) (begin (G3014@set-interaction-env-r! G464e@env G46af@r^) (values G46b0@e (G4681@rtc)))) G46ac@G4688 G46ab@G4687)))) (G2d2c@make-stx G464d@x G2cda@top-mark* (list G467f@rib) '()))) (G300c@interaction-env-rib G464e@env) (G300e@interaction-env-r G464e@env) (G2fcc@make-collector)) (assertion-violation 'expand '"not an environment" G464e@env))))) (set! G302c@eval (lambda (G46b3@x G46b4@env) (begin (if (not (G3020@environment? G46b4@env)) (error 'eval '"not an environment" G46b4@env) (void)) (call-with-values (lambda () (G302a@expand G46b3@x G46b4@env)) (lambda (G46b9@G46b7 G46ba@G46b8) ((lambda (G46bd@invoke-req* G46be@x) (begin (for-each G2b79@G2a20@invoke-library G46bd@invoke-req*) (eval-core (G2952@G290a@expanded->core G46be@x)))) G46ba@G46b8 G46b9@G46b7)))))) (set! G302e@library-expander (lambda G4726 ((lambda (G4727) (if (= G4727 '3) (apply (lambda (G46c1@x G46c2@filename G46c3@verify-name) ((lambda (G46c8@build-visit-code G46ca@visit!) (begin (set! G46c8@build-visit-code (lambda (G4714@macro*) (if (null? G4714@macro*) (G2cc0@G2c32@build-void) (G2cbf@G2c30@build-sequence '#f (map (lambda (G4716@x) ((lambda (G4718@loc G4719@src) (list 'set! G4718@loc G4719@src)) (car G4716@x) (cddr G4716@x))) G4714@macro*))))) (set! G46ca@visit! (lambda (G470c@macro*) (for-each (lambda (G470e@x) ((lambda (G4710@loc G4711@proc) (set-symbol-value! G4710@loc G4711@proc)) (car G470e@x) (cadr G470e@x))) G470c@macro*))) (call-with-values (lambda () (G2fda@core-library-expander G46c1@x G46c3@verify-name)) (lambda (G46d4@G46cb G46d5@G46cc G46d6@G46cd G46d7@G46ce G46d8@G46cf G46d9@G46d0 G46da@G46d1 G46db@G46d2 G46dc@G46d3) ((lambda (G46e6@export-env G46e7@export-subst G46e8@macro* G46e9@invoke-code G46ea@vis* G46eb@inv* G46ec@imp* G46ed@ver G46ee@name) ((lambda (G46f8@id G46f9@name G46fa@ver G46fb@imp* G46fc@vis* G46fd@inv* G46fe@visit-proc G46ff@invoke-proc G4700@visit-code G4701@invoke-code) (begin (G2b77@G2a1c@install-library G46f8@id G46f9@name G46fa@ver G46fb@imp* G46fc@vis* G46fd@inv* G46e7@export-subst G46e6@export-env G46fe@visit-proc G46ff@invoke-proc G4700@visit-code G4701@invoke-code '#t G46c2@filename) (values G46f8@id G46f9@name G46fa@ver G46fb@imp* G46fc@vis* G46fd@inv* G4701@invoke-code G4700@visit-code G46e7@export-subst G46e6@export-env))) (gensym) G46ee@name G46ed@ver (map G2b7d@G2a28@library-spec G46ec@imp*) (map G2b7d@G2a28@library-spec G46ea@vis*) (map G2b7d@G2a28@library-spec G46eb@inv*) (lambda () (G46ca@visit! G46e8@macro*)) (lambda () (eval-core (G2952@G290a@expanded->core G46e9@invoke-code))) (G46c8@build-visit-code G46e8@macro*) G46e9@invoke-code)) G46dc@G46d3 G46db@G46d2 G46da@G46d1 G46d9@G46d0 G46d8@G46cf G46d7@G46ce G46d6@G46cd G46d5@G46cc G46d4@G46cb))))) '#f '#f)) G4726) (if (= G4727 '2) (apply (lambda (G471c@x G471d@filename) (G302e@library-expander G471c@x G471d@filename (lambda (G4720@x) (values)))) G4726) (if (= G4727 '1) (apply (lambda (G4722@x) (G302e@library-expander G4722@x '#f (lambda (G4724@x) (values)))) G4726) (error 'apply '"invalid arg count"))))) (length G4726)))) (set! G3030@boot-library-expand (lambda (G4728@x) (call-with-values (lambda () (G302e@library-expander G4728@x)) (lambda (G4734@G472a G4735@G472b G4736@G472c G4737@G472d G4738@G472e G4739@G472f G473a@G4730 G473b@G4731 G473c@G4732 G473d@G4733) ((lambda (G4748@export-env G4749@export-subst G474a@visit-code G474b@invoke-code G474c@inv* G474d@vis* G474e@imp* G474f@ver G4750@name G4751@id) (values G4750@name G474b@invoke-code G4749@export-subst G4748@export-env)) G473d@G4733 G473c@G4732 G473b@G4731 G473a@G4730 G4739@G472f G4738@G472e G4737@G472d G4736@G472c G4735@G472b G4734@G472a))))) (set! G3032@rev-map-append (lambda (G475c@f G475d@ls G475e@ac) (if (null? G475d@ls) G475e@ac (G3032@rev-map-append G475c@f (cdr G475d@ls) (cons (G475c@f (car G475d@ls)) G475e@ac))))) (set! G3034@build-exports (lambda (G4762@lex*+loc* G4763@init*) (G2cbf@G2c30@build-sequence '#f (cons (G2cc0@G2c32@build-void) (G3032@rev-map-append (lambda (G4766@x) (list 'set! (cdr G4766@x) (car G4766@x))) G4762@lex*+loc* G4763@init*))))) (set! G3036@make-export-subst (lambda (G4768@name* G4769@id*) (map (lambda (G476c@name G476d@id) ((lambda (G4770@label) (begin (if (not G4770@label) (G304c@syntax-violation '#f '"cannot export unbound identifier" G476d@id) (void)) (cons G476c@name G4770@label))) (G2d7c@id->label G476d@id))) G4768@name* G4769@id*))) (set! G3038@make-export-env/macros (lambda (G4772@lex* G4773@loc* G4774@r) ((lambda (G4779@lookup) (begin (set! G4779@lookup (lambda (G4796@x) ((letrec ((G4798@f (lambda (G479a@x G479b@lex* G479c@loc*) (if (pair? G479b@lex*) (if (eq? G479a@x (car G479b@lex*)) (car G479c@loc*) (G4798@f G479a@x (cdr G479b@lex*) (cdr G479c@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4798@f) G4796@x G4772@lex* G4773@loc*))) ((letrec ((G477a@f (lambda (G477c@r G477d@env G477e@global* G477f@macro*) (if (null? G477c@r) (values G477d@env G477e@global* G477f@macro*) ((lambda (G4784@x) ((lambda (G4786@label G4787@b) ((lambda (G478a@t) (if (memv G478a@t '(lexical)) ((lambda (G478c@v) ((lambda (G478e@loc G478f@type) (G477a@f (cdr G477c@r) (cons (cons* G4786@label G478f@type G478e@loc) G477d@env) (cons (cons (G2eed@lexical-var G478c@v) G478e@loc) G477e@global*) G477f@macro*)) (G4779@lookup (G2eed@lexical-var G478c@v)) (if (G2eef@lexical-mutable? G478c@v) 'mutable 'global))) (G2d86@binding-value G4787@b)) (if (memv G478a@t '(local-macro)) ((lambda (G4792@loc) (G477a@f (cdr G477c@r) (cons (cons* G4786@label 'global-macro G4792@loc) G477d@env) G477e@global* (cons (cons G4792@loc (G2d86@binding-value G4787@b)) G477f@macro*))) (gensym)) (if (memv G478a@t '(local-macro!)) ((lambda (G4794@loc) (G477a@f (cdr G477c@r) (cons (cons* G4786@label 'global-macro! G4794@loc) G477d@env) G477e@global* (cons (cons G4794@loc (G2d86@binding-value G4787@b)) G477f@macro*))) (gensym)) (if (memv G478a@t '($rtd $module)) (G477a@f (cdr G477c@r) (cons G4784@x G477d@env) G477e@global* G477f@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d84@binding-type G4787@b) (G2d86@binding-value G4787@b))))))) (G2d84@binding-type G4787@b))) (car G4784@x) (cdr G4784@x))) (car G477c@r)))))) G477a@f) G4774@r '() '() '()))) '#f))) (set! G303a@generate-temporaries (lambda (G47a0@ls) ((lambda (G47a2@t) ((lambda (G47a4@ls/false) (if G47a4@ls/false (apply (lambda (G47a6@ls) (map (lambda (G47a8@x) (G2d2c@make-stx ((lambda (G47aa@x) (if (or (symbol? G47aa@x) (string? G47aa@x)) (gensym G47aa@x) (gensym 't))) (G3052@syntax->datum G47a8@x)) G2cda@top-mark* '() '())) G47a6@ls)) G47a4@ls/false) ((lambda (G47ac@t) ((lambda (G47ae@ls/false) (if G47ae@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47ae@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G47ac@t))) (G2f61@syntax-dispatch G47ac@t '_))) G47a2@t))) (G2f61@syntax-dispatch G47a2@t 'each-any))) G47a0@ls))) (set! G303c@free-identifier=? (lambda (G47b0@x G47b1@y) (if (G2d62@id? G47b0@x) (if (G2d62@id? G47b1@y) (G2d6a@free-id=? G47b0@x G47b1@y) (assertion-violation 'free-identifier=? '"not an identifier" G47b1@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47b0@x)))) (set! G303e@bound-identifier=? (lambda (G47b4@x G47b5@y) (if (G2d62@id? G47b4@x) (if (G2d62@id? G47b5@y) (G2d68@bound-id=? G47b4@x G47b5@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47b5@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47b4@x)))) (set! G3040@make-source-condition (lambda (G47b8@x) ((lambda (G47c2@G47bd G47c4@G47bf G47c6@G47be G47c9@G47bc G47cb@make-source-condition G47cd@G47ba G47cf@G47bb G47d1@source-condition? G47d3@source-filename G47d5@source-character) (begin (set! G47c2@G47bd (make-record-type-descriptor '&source-information G4c14@G4965@&condition-rtd 'G47c0 '#f '#f '#((immutable file-name) (immutable character)))) (set! G47c4@G47bf '#f) (set! G47c6@G47be (make-record-constructor-descriptor G47c2@G47bd G4c15@G4967@&condition-rcd G47c4@G47bf)) (set! G47c9@G47bc (record-predicate G47c2@G47bd)) (set! G47cb@make-source-condition (record-constructor G47c6@G47be)) (set! G47cd@G47ba (record-accessor G47c2@G47bd '0)) (set! G47cf@G47bb (record-accessor G47c2@G47bd '1)) (set! G47d1@source-condition? (condition-predicate G47c2@G47bd)) (set! G47d3@source-filename (condition-accessor G47c2@G47bd G47cd@G47ba)) (set! G47d5@source-character (condition-accessor G47c2@G47bd G47cf@G47bb)) (if (pair? G47b8@x) (G47cb@make-source-condition (car G47b8@x) (cdr G47b8@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3042@extract-position-condition (lambda (G47d6@x) (G3040@make-source-condition (G3044@expression-position G47d6@x)))) (set! G3044@expression-position (lambda (G47d8@x) (and (G2d2a@stx? G47d8@x) ((lambda (G47da@x) (and (G28f3@G281e@annotation? G47da@x) (G28f4@G2820@annotation-source G47da@x))) (G2d2e@stx-expr G47d8@x))))) (set! G3046@assertion-error (lambda (G47dc@expr G47dd@pos) (raise (condition (G4c44@G4a27@make-assertion-violation) (G4c56@G4a57@make-who-condition 'assert) (G4c1a@G49ba@make-message-condition '"assertion failed") (G4c4c@G4a3d@make-irritants-condition (list G47dc@expr)) (G3040@make-source-condition G47dd@pos))))) (set! G3048@syntax-error (lambda (G47e0@x . G47e2@args) (begin (if (not (for-all string? G47e2@args)) (assertion-violation 'syntax-error '"invalid argument" G47e2@args) (void)) (raise (condition (G4c1a@G49ba@make-message-condition (if (null? G47e2@args) '"invalid syntax" (apply string-append G47e2@args))) (G4c78@G4ab1@make-syntax-violation (G3052@syntax->datum G47e0@x) '#f) (G3042@extract-position-condition G47e0@x)))))) (set! G304a@syntax-violation* (lambda (G47e4@who G47e5@msg G47e6@form G47e7@condition-object) (begin (if (not (string? G47e5@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47e5@msg) (void)) ((lambda (G47ec@who) (raise (condition (if G47ec@who (G4c56@G4a57@make-who-condition G47ec@who) (condition)) (G4c1a@G49ba@make-message-condition G47e5@msg) G47e7@condition-object (G3042@extract-position-condition G47e6@form)))) (if (or (string? G47e4@who) (symbol? G47e4@who)) G47e4@who (if (not G47e4@who) ((lambda (G47ee@t) ((lambda (G47f0@ls/false) (if (and G47f0@ls/false (apply (lambda (G47f2@id) (G2d62@id? G47f2@id)) G47f0@ls/false)) (apply (lambda (G47f4@id) (G3052@syntax->datum G47f4@id)) G47f0@ls/false) ((lambda (G47f6@t) ((lambda (G47f8@ls/false) (if (and G47f8@ls/false (apply (lambda (G47fa@id G47fb@rest) (G2d62@id? G47fa@id)) G47f8@ls/false)) (apply (lambda (G47fe@id G47ff@rest) (G3052@syntax->datum G47fe@id)) G47f8@ls/false) ((lambda (G4802@t) ((lambda (G4804@ls/false) (if G4804@ls/false (apply (lambda () '#f) G4804@ls/false) (G304c@syntax-violation '#f '"invalid syntax" G4802@t))) (G2f61@syntax-dispatch G4802@t '_))) G47f6@t))) (G2f61@syntax-dispatch G47f6@t '(any . any)))) G47ee@t))) (G2f61@syntax-dispatch G47ee@t 'any))) G47e6@form) (assertion-violation 'syntax-violation '"invalid who argument" G47e4@who))))))) (set! G304c@syntax-violation (lambda G4814 ((lambda (G4815) (if (= G4815 '3) (apply (lambda (G4806@who G4807@msg G4808@form) (G304c@syntax-violation G4806@who G4807@msg G4808@form '#f)) G4814) (if (= G4815 '4) (apply (lambda (G480c@who G480d@msg G480e@form G480f@subform) (G304a@syntax-violation* G480c@who G480d@msg G480e@form (G4c78@G4ab1@make-syntax-violation (G3052@syntax->datum G480e@form) (G3052@syntax->datum G480f@subform)))) G4814) (error 'apply '"invalid arg count")))) (length G4814)))) (set! G304e@identifier? (lambda (G4816@x) (G2d62@id? G4816@x))) (set! G3050@datum->syntax (lambda (G4818@id G4819@datum) (if (G2d62@id? G4818@id) (G2d40@datum->stx G4818@id G4819@datum) (assertion-violation 'datum->syntax '"not an identifier" G4818@id)))) (set! G3052@syntax->datum (lambda (G481c@x) (G2d78@stx->datum G481c@x))) (set! G3054@compile-r6rs-top-level (lambda (G481e@x*) (call-with-values (lambda () (G2fde@top-level-expander G481e@x*)) (lambda (G4822@G4820 G4823@G4821) ((lambda (G4826@invoke-code G4827@lib*) (lambda () (begin (for-each G2b79@G2a20@invoke-library G4827@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2952@G290a@expanded->core G4826@invoke-code)) (void)) (eval-core (G2952@G290a@expanded->core G4826@invoke-code))))) G4823@G4821 G4822@G4820))))) (set! G3056@pre-compile-r6rs-top-level (lambda (G482a@x*) (call-with-values (lambda () (G2fde@top-level-expander G482a@x*)) (lambda (G482e@G482c G482f@G482d) ((lambda (G4832@invoke-code G4833@lib*) (begin (for-each G2b79@G2a20@invoke-library G4833@lib*) (G28fc@G2830@compile-core (G2952@G290a@expanded->core G4832@invoke-code)))) G482f@G482d G482e@G482c))))) (set! G3058@interaction-environment ((lambda (G4836@the-env) (lambda () (or G4836@the-env ((lambda (G4838@lib G4839@rib) (begin ((lambda (G483c@subst) (begin (G2d03@set-rib-sym*! G4839@rib (map car G483c@subst)) (G2d05@set-rib-mark**! G4839@rib (map (lambda (G483e@x) G2cda@top-mark*) G483c@subst)) (G2d07@set-rib-label*! G4839@rib (map cdr G483c@subst)))) (G2b4e@G29ca@library-subst G4838@lib)) ((lambda (G4840@env) (begin (set! G4836@the-env G4840@env) G4840@env)) (G300a@make-interaction-env G4839@rib '() '())))) (G2b72@G2a12@find-library-by-name '(mosh interaction)) (G2d0d@make-empty-rib))))) '#f)) (set! G305a@top-level-context (G28fe@G2834@make-parameter '#f)) (begin (set! G4950@G305a@top-level-context G305a@top-level-context) (set! G494f@G3058@interaction-environment G3058@interaction-environment) (set! G494e@G3056@pre-compile-r6rs-top-level G3056@pre-compile-r6rs-top-level) (set! G494d@G3054@compile-r6rs-top-level G3054@compile-r6rs-top-level) (set! G494c@G3052@syntax->datum G3052@syntax->datum) (set! G494b@G3050@datum->syntax G3050@datum->syntax) (set! G494a@G304e@identifier? G304e@identifier?) (set! G4949@G304c@syntax-violation G304c@syntax-violation) (set! G4948@G304a@syntax-violation* G304a@syntax-violation*) (set! G4947@G3048@syntax-error G3048@syntax-error) (set! G4946@G3046@assertion-error G3046@assertion-error) (set! G4945@G3044@expression-position G3044@expression-position) (set! G4944@G3042@extract-position-condition G3042@extract-position-condition) (set! G4943@G3040@make-source-condition G3040@make-source-condition) (set! G4942@G303e@bound-identifier=? G303e@bound-identifier=?) (set! G4941@G303c@free-identifier=? G303c@free-identifier=?) (set! G4940@G303a@generate-temporaries G303a@generate-temporaries) (set! G493f@G3038@make-export-env/macros G3038@make-export-env/macros) (set! G493e@G3036@make-export-subst G3036@make-export-subst) (set! G493d@G3034@build-exports G3034@build-exports) (set! G493c@G3032@rev-map-append G3032@rev-map-append) (set! G493b@G3030@boot-library-expand G3030@boot-library-expand) (set! G493a@G302e@library-expander G302e@library-expander) (set! G4939@G302c@eval G302c@eval) (set! G4938@G302a@expand G302a@expand) (set! G4937@G3028@scheme-report-environment G3028@scheme-report-environment) (set! G4936@G3026@null-environment G3026@null-environment) (set! G4935@G3024@environment G3024@environment) (set! G4934@G3022@environment-symbols G3022@environment-symbols) (set! G4933@G3020@environment? G3020@environment?) (set! G4932@G301e@parse-binding G301e@parse-binding) (set! G4931@G301c@environment-bindings G301c@environment-bindings) (set! G4930@G301a@interaction-environment-symbols G301a@interaction-environment-symbols) (set! G492f@G3018@rp G3018@rp) (set! G492e@G3016@set-interaction-env-locs! G3016@set-interaction-env-locs!) (set! G492d@G3014@set-interaction-env-r! G3014@set-interaction-env-r!) (set! G492c@G3012@set-interaction-env-rib! G3012@set-interaction-env-rib!) (set! G492b@G3010@interaction-env-locs G3010@interaction-env-locs) (set! G492a@G300e@interaction-env-r G300e@interaction-env-r) (set! G4929@G300c@interaction-env-rib G300c@interaction-env-rib) (set! G4928@G300a@make-interaction-env G300a@make-interaction-env) (set! G4927@G3008@interaction-env? G3008@interaction-env?) (set! G4926@G3005@G2ffd G3005@G2ffd) (set! G4925@G3003@G2ffe G3003@G2ffe) (set! G4924@G3001@G2ffc G3001@G2ffc) (set! G4923@G2ffb@rp G2ffb@rp) (set! G4922@G2ff9@set-env-itc! G2ff9@set-env-itc!) (set! G4921@G2ff7@set-env-labels! G2ff7@set-env-labels!) (set! G4920@G2ff5@set-env-names! G2ff5@set-env-names!) (set! G491f@G2ff3@env-itc G2ff3@env-itc) (set! G491e@G2ff1@env-labels G2ff1@env-labels) (set! G491d@G2fef@env-names G2fef@env-names) (set! G491c@G2fed@make-env G2fed@make-env) (set! G491b@G2feb@env? G2feb@env?) (set! G491a@G2fe8@G2fe0 G2fe8@G2fe0) (set! G4919@G2fe6@G2fe1 G2fe6@G2fe1) (set! G4918@G2fe4@G2fdf G2fe4@G2fdf) (set! G4917@G2fde@top-level-expander G2fde@top-level-expander) (set! G4916@G2fdc@parse-top-level-program G2fdc@parse-top-level-program) (set! G4915@G2fda@core-library-expander G2fda@core-library-expander) (set! G4914@G2fd8@library-body-expander G2fd8@library-body-expander) (set! G4913@G2fd6@chi-interaction-expr G2fd6@chi-interaction-expr) (set! G4912@G2fd4@chi-library-internal G2fd4@chi-library-internal) (set! G4911@G2fd2@imp-collector G2fd2@imp-collector) (set! G4910@G2fd0@vis-collector G2fd0@vis-collector) (set! G490f@G2fce@inv-collector G2fce@inv-collector) (set! G490e@G2fcc@make-collector G2fcc@make-collector) (set! G490d@G2fca@make-top-rib G2fca@make-top-rib) (set! G490c@G2fc8@parse-import-spec* G2fc8@parse-import-spec*) (set! G490b@G2fc6@parse-library G2fc6@parse-library) (set! G490a@G2fc4@parse-library-name G2fc4@parse-library-name) (set! G4909@G2fc2@parse-exports G2fc2@parse-exports) (set! G4908@G2fc0@expand-transformer G2fc0@expand-transformer) (set! G4907@G2fbe@chi-body* G2fbe@chi-body*) (set! G4906@G2fbc@chi-internal-module G2fbc@chi-internal-module) (set! G4905@G2fba@module-interface-exp-id* G2fba@module-interface-exp-id*) (set! G4904@G2fb8@set-module-interface-exp-lab-vec! G2fb8@set-module-interface-exp-lab-vec!) (set! G4903@G2fb6@set-module-interface-exp-id-vec! G2fb6@set-module-interface-exp-id-vec!) (set! G4902@G2fb4@set-module-interface-first-mark! G2fb4@set-module-interface-first-mark!) (set! G4901@G2fb2@module-interface-exp-lab-vec G2fb2@module-interface-exp-lab-vec) (set! G4900@G2fb0@module-interface-exp-id-vec G2fb0@module-interface-exp-id-vec) (set! G48ff@G2fae@module-interface-first-mark G2fae@module-interface-first-mark) (set! G48fe@G2fac@make-module-interface G2fac@make-module-interface) (set! G48fd@G2faa@module-interface? G2faa@module-interface?) (set! G48fc@G2fa7@G2f9f G2fa7@G2f9f) (set! G48fb@G2fa5@G2fa0 G2fa5@G2fa0) (set! G48fa@G2fa3@G2f9e G2fa3@G2f9e) (set! G48f9@G2f9d@parse-module G2f9d@parse-module) (set! G48f8@G2f9b@chi-internal G2f9b@chi-internal) (set! G48f7@G2f99@find-dups G2f99@find-dups) (set! G48f6@G2f97@find-bound=? G2f97@find-bound=?) (set! G48f5@G2f95@chi-rhs* G2f95@chi-rhs*) (set! G48f4@G2f93@expand-interaction-rhs*/init* G2f93@expand-interaction-rhs*/init*) (set! G48f3@G2f91@chi-rhs G2f91@chi-rhs) (set! G48f2@G2f8f@chi-defun G2f8f@chi-defun) (set! G48f1@G2f8d@chi-lambda-clause* G2f8d@chi-lambda-clause*) (set! G48f0@G2f8b@chi-lambda-clause G2f8b@chi-lambda-clause) (set! G48ef@G2f89@verify-formals G2f89@verify-formals) (set! G48ee@G2f87@chi-set! G2f87@chi-set!) (set! G48ed@G2f85@chi-expr G2f85@chi-expr) (set! G48ec@G2f83@chi-application G2f83@chi-application) (set! G48eb@G2f81@chi-expr* G2f81@chi-expr*) (set! G48ea@G2f7f@chi-global-macro G2f7f@chi-global-macro) (set! G48e9@G2f7d@chi-local-macro G2f7d@chi-local-macro) (set! G48e8@G2f7b@chi-macro G2f7b@chi-macro) (set! G48e7@G2f79@do-macro-call G2f79@do-macro-call) (set! G48e6@G2f77@local-macro-transformer G2f77@local-macro-transformer) (set! G48e5@G2f75@macro-transformer G2f75@macro-transformer) (set! G48e4@G2f73@symbol-macro G2f73@symbol-macro) (set! G48e3@G2f71@file-options-macro G2f71@file-options-macro) (set! G48e2@G2f6f@core-macro-transformer G2f6f@core-macro-transformer) (set! G48e1@G2f6d@syntax-transformer G2f6d@syntax-transformer) (set! G48e0@G2f6b@ellipsis-map G2f6b@ellipsis-map) (set! G48df@G2f69@syntax-case-transformer G2f69@syntax-case-transformer) (set! G48de@G2f67@verify-literals G2f67@verify-literals) (set! G48dd@G2f65@underscore? G2f65@underscore?) (set! G48dc@G2f63@ellipsis? G2f63@ellipsis?) (set! G48db@G2f61@syntax-dispatch G2f61@syntax-dispatch) (set! G48da@G2f5f@convert-pattern G2f5f@convert-pattern) (set! G48d9@G2f5d@foreign-call-transformer G2f5d@foreign-call-transformer) (set! G48d8@G2f5b@parameterize-macro G2f5b@parameterize-macro) (set! G48d7@G2f59@incorrect-usage-macro G2f59@incorrect-usage-macro) (set! G48d6@G2f57@define-condition-type-macro G2f57@define-condition-type-macro) (set! G48d5@G2f55@define-record-type-macro G2f55@define-record-type-macro) (set! G48d4@G2f53@define-struct-macro G2f53@define-struct-macro) (set! G48d3@G2f51@quasisyntax-macro G2f51@quasisyntax-macro) (set! G48d2@G2f4f@quasiquote-macro G2f4f@quasiquote-macro) (set! G48d1@G2f4d@syntax-rules-macro G2f4d@syntax-rules-macro) (set! G48d0@G2f4b@include-into-macro G2f4b@include-into-macro) (set! G48cf@G2f49@include-macro G2f49@include-macro) (set! G48ce@G2f47@do-include G2f47@do-include) (set! G48cd@G2f45@cond-macro G2f45@cond-macro) (set! G48cc@G2f43@and-macro G2f43@and-macro) (set! G48cb@G2f41@or-macro G2f41@or-macro) (set! G48ca@G2f3f@let*-macro G2f3f@let*-macro) (set! G48c9@G2f3d@do-macro G2f3d@do-macro) (set! G48c8@G2f3b@identifier-syntax-macro G2f3b@identifier-syntax-macro) (set! G48c7@G2f39@endianness-macro G2f39@endianness-macro) (set! G48c6@G2f37@assert-macro G2f37@assert-macro) (set! G48c5@G2f35@delay-macro G2f35@delay-macro) (set! G48c4@G2f33@time-macro G2f33@time-macro) (set! G48c3@G2f31@define-enumeration-macro G2f31@define-enumeration-macro) (set! G48c2@G2f2f@guard-macro G2f2f@guard-macro) (set! G48c1@G2f2d@trace-letrec-syntax-macro G2f2d@trace-letrec-syntax-macro) (set! G48c0@G2f2b@trace-let-syntax-macro G2f2b@trace-let-syntax-macro) (set! G48bf@G2f29@trace-let/rec-syntax G2f29@trace-let/rec-syntax) (set! G48be@G2f27@trace-define-syntax-macro G2f27@trace-define-syntax-macro) (set! G48bd@G2f25@trace-define-macro G2f25@trace-define-macro) (set! G48bc@G2f23@trace-lambda-macro G2f23@trace-lambda-macro) (set! G48bb@G2f21@let*-values-macro G2f21@let*-values-macro) (set! G48ba@G2f1f@let-values-macro G2f1f@let-values-macro) (set! G48b9@G2f1d@let-macro G2f1d@let-macro) (set! G48b8@G2f1b@invalid-fmls-error G2f1b@invalid-fmls-error) (set! G48b7@G2f19@with-syntax-macro G2f19@with-syntax-macro) (set! G48b6@G2f17@bless G2f17@bless) (set! G48b5@G2f15@lambda-transformer G2f15@lambda-transformer) (set! G48b4@G2f13@case-lambda-transformer G2f13@case-lambda-transformer) (set! G48b3@G2f11@quote-transformer G2f11@quote-transformer) (set! G48b2@G2f0f@case-macro G2f0f@case-macro) (set! G48b1@G2f0d@or-transformer G2f0d@or-transformer) (set! G48b0@G2f0b@and-transformer G2f0b@and-transformer) (set! G48af@G2f09@if-transformer G2f09@if-transformer) (set! G48ae@G2f07@unless-macro G2f07@unless-macro) (set! G48ad@G2f05@when-macro G2f05@when-macro) (set! G48ac@G2f03@record-constructor-descriptor-transformer G2f03@record-constructor-descriptor-transformer) (set! G48ab@G2f01@record-type-descriptor-transformer G2f01@record-type-descriptor-transformer) (set! G48aa@G2eff@type-descriptor-transformer G2eff@type-descriptor-transformer) (set! G48a9@G2efd@fluid-let-syntax-transformer G2efd@fluid-let-syntax-transformer) (set! G48a8@G2efb@letrec*-transformer G2efb@letrec*-transformer) (set! G48a7@G2ef9@letrec-transformer G2ef9@letrec-transformer) (set! G48a6@G2ef7@letrec-helper G2ef7@letrec-helper) (set! G48a5@G2ef5@add-lexicals G2ef5@add-lexicals) (set! G48a4@G2ef3@add-lexical G2ef3@add-lexical) (set! G48a3@G2ef1@set-lexical-mutable! G2ef1@set-lexical-mutable!) (set! G48a2@G2eef@lexical-mutable? G2eef@lexical-mutable?) (set! G48a1@G2eed@lexical-var G2eed@lexical-var) (set! G48a0@G2eeb@scheme-stx G2eeb@scheme-stx) (set! G489f@G2ee9@scheme-stx-hashtable G2ee9@scheme-stx-hashtable) (set! G489e@G2ee7@parse-define-syntax G2ee7@parse-define-syntax) (set! G489d@G2ee5@parse-define G2ee5@parse-define) (set! G489c@G2da2@make-eval-transformer G2da2@make-eval-transformer) (set! G489b@G2da0@variable-transformer-procedure G2da0@variable-transformer-procedure) (set! G489a@G2d9e@variable-transformer? G2d9e@variable-transformer?) (set! G4899@G2d9c@make-variable-transformer G2d9c@make-variable-transformer) (set! G4898@G2d9a@sanitize-binding G2d9a@sanitize-binding) (set! G4897@G2d8a@syntax-type G2d8a@syntax-type) (set! G4896@G2d88@raise-unbound-error G2d88@raise-unbound-error) (set! G4895@G2d86@binding-value G2d86@binding-value) (set! G4894@G2d84@binding-type G2d84@binding-type) (set! G4893@G2d82@make-binding G2d82@make-binding) (set! G4892@G2d80@label->binding G2d80@label->binding) (set! G4891@G2d7e@id->real-label G2d7e@id->real-label) (set! G4890@G2d7c@id->label G2d7c@id->label) (set! G488f@G2d7a@same-marks*? G2d7a@same-marks*?) (set! G488e@G2d78@stx->datum G2d78@stx->datum) (set! G488d@G2d76@strip G2d76@strip) (set! G488c@G2d74@strip-annotations G2d74@strip-annotations) (set! G488b@G2d72@self-evaluating? G2d72@self-evaluating?) (set! G488a@G2d70@bound-id-member? G2d70@bound-id-member?) (set! G4889@G2d6e@distinct-bound-ids? G2d6e@distinct-bound-ids?) (set! G4888@G2d6c@valid-bound-ids? G2d6c@valid-bound-ids?) (set! G4887@G2d6a@free-id=? G2d6a@free-id=?) (set! G4886@G2d68@bound-id=? G2d68@bound-id=?) (set! G4885@G2d66@same-marks? G2d66@same-marks?) (set! G4884@G2d64@id->sym G2d64@id->sym) (set! G4883@G2d62@id? G2d62@id?) (set! G4882@G2d60@syntax->list G2d60@syntax->list) (set! G4881@G2d5e@syntax-cdr G2d5e@syntax-cdr) (set! G4880@G2d5c@syntax-car G2d5c@syntax-car) (set! G487f@G2d5a@syntax-list? G2d5a@syntax-list?) (set! G487e@G2d58@syntax-null? G2d58@syntax-null?) (set! G487d@G2d56@syntax-vector? G2d56@syntax-vector?) (set! G487c@G2d54@syntax-pair? G2d54@syntax-pair?) (set! G487b@G2d52@syntax-vector->list G2d52@syntax-vector->list) (set! G487a@G2d50@syntax-kind? G2d50@syntax-kind?) (set! G4879@G2d4e@add-subst G2d4e@add-subst) (set! G4878@G2d4c@add-mark G2d4c@add-mark) (set! G4877@G2d4a@mkstx G2d4a@mkstx) (set! G4876@G2d48@join-wraps G2d48@join-wraps) (set! G4875@G2d46@anti-mark? G2d46@anti-mark?) (set! G4874@G2d44@anti-mark G2d44@anti-mark) (set! G4873@G2d42@gen-mark G2d42@gen-mark) (set! G4872@G2d40@datum->stx G2d40@datum->stx) (set! G4871@G2d3e@rp G2d3e@rp) (set! G4870@G2d3c@set-stx-ae*! G2d3c@set-stx-ae*!) (set! G486f@G2d3a@set-stx-subst*! G2d3a@set-stx-subst*!) (set! G486e@G2d38@set-stx-mark*! G2d38@set-stx-mark*!) (set! G486d@G2d36@set-stx-expr! G2d36@set-stx-expr!) (set! G486c@G2d34@stx-ae* G2d34@stx-ae*) (set! G486b@G2d32@stx-subst* G2d32@stx-subst*) (set! G486a@G2d30@stx-mark* G2d30@stx-mark*) (set! G4869@G2d2e@stx-expr G2d2e@stx-expr) (set! G4868@G2d2c@make-stx G2d2c@make-stx) (set! G4867@G2d2a@stx? G2d2a@stx?) (set! G4866@G2d27@G2d1f G2d27@G2d1f) (set! G4865@G2d25@G2d20 G2d25@G2d20) (set! G4864@G2d23@G2d1e G2d23@G2d1e) (set! G4863@G2d1d@make-full-rib G2d1d@make-full-rib) (set! G4862@G2d1b@unseal-rib! G2d1b@unseal-rib!) (set! G4861@G2d19@seal-rib! G2d19@seal-rib!) (set! G4860@G2d17@make-rib-map G2d17@make-rib-map) (set! G485f@G2d15@extend-rib/nc! G2d15@extend-rib/nc!) (set! G485e@G2d13@extend-rib! G2d13@extend-rib!) (set! G485d@G2d11@find-label G2d11@find-label) (set! G485c@G2d0f@make-cache-rib G2d0f@make-cache-rib) (set! G485b@G2d0d@make-empty-rib G2d0d@make-empty-rib) (set! G485a@G2d0b@set-rib-cache! G2d0b@set-rib-cache!) (set! G4859@G2d09@set-rib-sealed/freq! G2d09@set-rib-sealed/freq!) (set! G4858@G2d07@set-rib-label*! G2d07@set-rib-label*!) (set! G4857@G2d05@set-rib-mark**! G2d05@set-rib-mark**!) (set! G4856@G2d03@set-rib-sym*! G2d03@set-rib-sym*!) (set! G4855@G2d01@rib-cache G2d01@rib-cache) (set! G4854@G2cff@rib-sealed/freq G2cff@rib-sealed/freq) (set! G4853@G2cfd@rib-label* G2cfd@rib-label*) (set! G4852@G2cfb@rib-mark** G2cfb@rib-mark**) (set! G4851@G2cf9@rib-sym* G2cf9@rib-sym*) (set! G4850@G2cf7@make-rib G2cf7@make-rib) (set! G484f@G2cf5@rib? G2cf5@rib?) (set! G484e@G2cf2@G2cea G2cf2@G2cea) (set! G484d@G2cf0@G2ceb G2cf0@G2ceb) (set! G484c@G2cee@G2ce9 G2cee@G2ce9) (set! G484b@G2ce8@gen-define-label G2ce8@gen-define-label) (set! G484a@G2ce6@gen-define-label+loc G2ce6@gen-define-label+loc) (set! G4849@G2ce4@gen-top-level-label G2ce4@gen-top-level-label) (set! G4848@G2ce2@gen-label G2ce2@gen-label) (set! G4847@G2ce0@gen-global G2ce0@gen-global) (set! G4846@G2cde@gen-lexical G2cde@gen-lexical) (set! G4845@G2cdc@top-marked? G2cdc@top-marked?) (set! G4844@G2cda@top-mark* G2cda@top-mark*) (set! G4843@G2cd5@set-union G2cd5@set-union) (set! G4842@G2cd3@set-cons G2cd3@set-cons) (G2b6f@G2a0c@current-library-expander G302e@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G495a@G4955 G495c@G4957 G495e@G4956 G4961@&condition? G4963@make-&condition G4965@&condition-rtd G4967@&condition-rcd G49b1@G49ac G49b3@G49ae G49b5@G49ad G49b8@p? G49ba@make-message-condition G49bc@G49ab G49be@message-condition? G49c0@condition-message G49c2@&message-rtd G49c4@&message-rcd G49ca@G49c5 G49cc@G49c7 G49ce@G49c6 G49d1@p? G49d3@make-warning G49d5@warning? G49d7@&warning-rtd G49d9@&warning-rcd G49df@G49da G49e1@G49dc G49e3@G49db G49e6@p? G49e8@make-serious-condition G49ea@serious-condition? G49ec@&serious-rtd G49ee@&serious-rcd G49f4@G49ef G49f6@G49f1 G49f8@G49f0 G49fb@p? G49fd@make-error G49ff@error? G4a01@&error-rtd G4a03@&error-rcd G4a09@G4a04 G4a0b@G4a06 G4a0d@G4a05 G4a10@p? G4a12@make-violation G4a14@violation? G4a16@&violation-rtd G4a18@&violation-rcd G4a1e@G4a19 G4a20@G4a1b G4a22@G4a1a G4a25@p? G4a27@make-assertion-violation G4a29@assertion-violation? G4a2b@&assertion-rtd G4a2d@&assertion-rcd G4a34@G4a2f G4a36@G4a31 G4a38@G4a30 G4a3b@p? G4a3d@make-irritants-condition G4a3f@G4a2e G4a41@irritants-condition? G4a43@condition-irritants G4a45@&irritants-rtd G4a47@&irritants-rcd G4a4e@G4a49 G4a50@G4a4b G4a52@G4a4a G4a55@p? G4a57@make-who-condition G4a59@G4a48 G4a5b@who-condition? G4a5d@condition-who G4a5f@&who-rtd G4a61@&who-rcd G4a67@G4a62 G4a69@G4a64 G4a6b@G4a63 G4a6e@p? G4a70@make-non-continuable-violation G4a72@non-continuable-violation? G4a74@&non-continuable-rtd G4a76@&non-continuable-rcd G4a7c@G4a77 G4a7e@G4a79 G4a80@G4a78 G4a83@p? G4a85@make-implementation-restriction-violation G4a87@implementation-restriction-violation? G4a89@&implementation-restriction-rtd G4a8b@&implementation-restriction-rcd G4a91@G4a8c G4a93@G4a8e G4a95@G4a8d G4a98@p? G4a9a@make-lexical-violation G4a9c@lexical-violation? G4a9e@&lexical-rtd G4aa0@&lexical-rcd G4aa8@G4aa3 G4aaa@G4aa5 G4aac@G4aa4 G4aaf@p? G4ab1@make-syntax-violation G4ab3@G4aa1 G4ab5@G4aa2 G4ab7@syntax-violation? G4ab9@syntax-violation-form G4abb@syntax-violation-subform G4abd@&syntax-rtd G4abf@&syntax-rcd G4ac5@G4ac0 G4ac7@G4ac2 G4ac9@G4ac1 G4acc@p? G4ace@make-undefined-violation G4ad0@undefined-violation? G4ad2@&undefined-rtd G4ad4@&undefined-rcd G4ada@G4ad5 G4adc@G4ad7 G4ade@G4ad6 G4ae1@p? G4ae3@make-i/o-error G4ae5@i/o-error? G4ae7@&i/o-rtd G4ae9@&i/o-rcd G4aef@G4aea G4af1@G4aec G4af3@G4aeb G4af6@p? G4af8@make-i/o-read-error G4afa@i/o-read-error? G4afc@&i/o-read-rtd G4afe@&i/o-read-rcd G4b04@G4aff G4b06@G4b01 G4b08@G4b00 G4b0b@p? G4b0d@make-i/o-write-error G4b0f@i/o-write-error? G4b11@&i/o-write-rtd G4b13@&i/o-write-rcd G4b1a@G4b15 G4b1c@G4b17 G4b1e@G4b16 G4b21@p? G4b23@make-i/o-invalid-position-error G4b25@G4b14 G4b27@i/o-invalid-position-error? G4b29@i/o-error-position G4b2b@&i/o-invalid-position-rtd G4b2d@&i/o-invalid-position-rcd G4b34@G4b2f G4b36@G4b31 G4b38@G4b30 G4b3b@p? G4b3d@make-i/o-filename-error G4b3f@G4b2e G4b41@i/o-filename-error? G4b43@i/o-error-filename G4b45@&i/o-filename-rtd G4b47@&i/o-filename-rcd G4b4d@G4b48 G4b4f@G4b4a G4b51@G4b49 G4b54@p? G4b56@make-i/o-file-protection-error G4b58@i/o-file-protection-error? G4b5a@&i/o-file-protection-rtd G4b5c@&i/o-file-protection-rcd G4b62@G4b5d G4b64@G4b5f G4b66@G4b5e G4b69@p? G4b6b@make-i/o-file-is-read-only-error G4b6d@i/o-file-is-read-only-error? G4b6f@&i/o-file-is-read-only-rtd G4b71@&i/o-file-is-read-only-rcd G4b77@G4b72 G4b79@G4b74 G4b7b@G4b73 G4b7e@p? G4b80@make-i/o-file-already-exists-error G4b82@i/o-file-already-exists-error? G4b84@&i/o-file-already-exists-rtd G4b86@&i/o-file-already-exists-rcd G4b8c@G4b87 G4b8e@G4b89 G4b90@G4b88 G4b93@p? G4b95@make-i/o-file-does-not-exist-error G4b97@i/o-file-does-not-exist-error? G4b99@&i/o-file-does-not-exist-rtd G4b9b@&i/o-file-does-not-exist-rcd G4ba2@G4b9d G4ba4@G4b9f G4ba6@G4b9e G4ba9@p? G4bab@make-i/o-port-error G4bad@G4b9c G4baf@i/o-port-error? G4bb1@i/o-error-port G4bb3@&i/o-port-rtd G4bb5@&i/o-port-rcd G4bbb@G4bb6 G4bbd@G4bb8 G4bbf@G4bb7 G4bc2@p? G4bc4@make-i/o-decoding-error G4bc6@i/o-decoding-error? G4bc8@&i/o-decoding-rtd G4bca@&i/o-decoding-rcd G4bd1@G4bcc G4bd3@G4bce G4bd5@G4bcd G4bd8@p? G4bda@make-i/o-encoding-error G4bdc@G4bcb G4bde@i/o-encoding-error? G4be0@i/o-encoding-error-char G4be2@&i/o-encoding-rtd G4be4@&i/o-encoding-rcd G4bea@G4be5 G4bec@G4be7 G4bee@G4be6 G4bf1@p? G4bf3@make-no-infinities-violation G4bf5@no-infinities-violation? G4bf7@&no-infinities-rtd G4bf9@&no-infinities-rcd G4bff@G4bfa G4c01@G4bfc G4c03@G4bfb G4c06@p? G4c08@make-no-nans-violation G4c0a@no-nans-violation? G4c0c@&no-nans-rtd G4c0e@&no-nans-rcd) (begin (set! G495a@G4955 (make-record-type-descriptor '&condition '#f 'G4958 '#f '#f '#())) (set! G495c@G4957 '#f) (set! G495e@G4956 (make-record-constructor-descriptor G495a@G4955 '#f G495c@G4957)) (set! G4961@&condition? (record-predicate G495a@G4955)) (set! G4963@make-&condition (record-constructor G495e@G4956)) (set! G4965@&condition-rtd G495a@G4955) (set! G4967@&condition-rcd G495e@G4956) (set! G49b1@G49ac (make-record-type-descriptor '&message G495a@G4955 'G49af '#f '#f '#((immutable message)))) (set! G49b3@G49ae '#f) (set! G49b5@G49ad (make-record-constructor-descriptor G49b1@G49ac G495e@G4956 G49b3@G49ae)) (set! G49b8@p? (record-predicate G49b1@G49ac)) (set! G49ba@make-message-condition (record-constructor G49b5@G49ad)) (set! G49bc@G49ab (record-accessor G49b1@G49ac '0)) (set! G49be@message-condition? (condition-predicate G49b1@G49ac)) (set! G49c0@condition-message (condition-accessor G49b1@G49ac G49bc@G49ab)) (set! G49c2@&message-rtd G49b1@G49ac) (set! G49c4@&message-rcd G49b5@G49ad) (set! G49ca@G49c5 (make-record-type-descriptor '&warning G495a@G4955 'G49c8 '#f '#f '#())) (set! G49cc@G49c7 '#f) (set! G49ce@G49c6 (make-record-constructor-descriptor G49ca@G49c5 G495e@G4956 G49cc@G49c7)) (set! G49d1@p? (record-predicate G49ca@G49c5)) (set! G49d3@make-warning (record-constructor G49ce@G49c6)) (set! G49d5@warning? (condition-predicate G49ca@G49c5)) (set! G49d7@&warning-rtd G49ca@G49c5) (set! G49d9@&warning-rcd G49ce@G49c6) (set! G49df@G49da (make-record-type-descriptor '&serious G495a@G4955 'G49dd '#f '#f '#())) (set! G49e1@G49dc '#f) (set! G49e3@G49db (make-record-constructor-descriptor G49df@G49da G495e@G4956 G49e1@G49dc)) (set! G49e6@p? (record-predicate G49df@G49da)) (set! G49e8@make-serious-condition (record-constructor G49e3@G49db)) (set! G49ea@serious-condition? (condition-predicate G49df@G49da)) (set! G49ec@&serious-rtd G49df@G49da) (set! G49ee@&serious-rcd G49e3@G49db) (set! G49f4@G49ef (make-record-type-descriptor '&error G49df@G49da 'G49f2 '#f '#f '#())) (set! G49f6@G49f1 '#f) (set! G49f8@G49f0 (make-record-constructor-descriptor G49f4@G49ef G49e3@G49db G49f6@G49f1)) (set! G49fb@p? (record-predicate G49f4@G49ef)) (set! G49fd@make-error (record-constructor G49f8@G49f0)) (set! G49ff@error? (condition-predicate G49f4@G49ef)) (set! G4a01@&error-rtd G49f4@G49ef) (set! G4a03@&error-rcd G49f8@G49f0) (set! G4a09@G4a04 (make-record-type-descriptor '&violation G49df@G49da 'G4a07 '#f '#f '#())) (set! G4a0b@G4a06 '#f) (set! G4a0d@G4a05 (make-record-constructor-descriptor G4a09@G4a04 G49e3@G49db G4a0b@G4a06)) (set! G4a10@p? (record-predicate G4a09@G4a04)) (set! G4a12@make-violation (record-constructor G4a0d@G4a05)) (set! G4a14@violation? (condition-predicate G4a09@G4a04)) (set! G4a16@&violation-rtd G4a09@G4a04) (set! G4a18@&violation-rcd G4a0d@G4a05) (set! G4a1e@G4a19 (make-record-type-descriptor '&assertion G4a09@G4a04 'G4a1c '#f '#f '#())) (set! G4a20@G4a1b '#f) (set! G4a22@G4a1a (make-record-constructor-descriptor G4a1e@G4a19 G4a0d@G4a05 G4a20@G4a1b)) (set! G4a25@p? (record-predicate G4a1e@G4a19)) (set! G4a27@make-assertion-violation (record-constructor G4a22@G4a1a)) (set! G4a29@assertion-violation? (condition-predicate G4a1e@G4a19)) (set! G4a2b@&assertion-rtd G4a1e@G4a19) (set! G4a2d@&assertion-rcd G4a22@G4a1a) (set! G4a34@G4a2f (make-record-type-descriptor '&irritants G495a@G4955 'G4a32 '#f '#f '#((immutable irritants)))) (set! G4a36@G4a31 '#f) (set! G4a38@G4a30 (make-record-constructor-descriptor G4a34@G4a2f G495e@G4956 G4a36@G4a31)) (set! G4a3b@p? (record-predicate G4a34@G4a2f)) (set! G4a3d@make-irritants-condition (record-constructor G4a38@G4a30)) (set! G4a3f@G4a2e (record-accessor G4a34@G4a2f '0)) (set! G4a41@irritants-condition? (condition-predicate G4a34@G4a2f)) (set! G4a43@condition-irritants (condition-accessor G4a34@G4a2f G4a3f@G4a2e)) (set! G4a45@&irritants-rtd G4a34@G4a2f) (set! G4a47@&irritants-rcd G4a38@G4a30) (set! G4a4e@G4a49 (make-record-type-descriptor '&who G495a@G4955 'G4a4c '#f '#f '#((immutable who)))) (set! G4a50@G4a4b '#f) (set! G4a52@G4a4a (make-record-constructor-descriptor G4a4e@G4a49 G495e@G4956 G4a50@G4a4b)) (set! G4a55@p? (record-predicate G4a4e@G4a49)) (set! G4a57@make-who-condition (record-constructor G4a52@G4a4a)) (set! G4a59@G4a48 (record-accessor G4a4e@G4a49 '0)) (set! G4a5b@who-condition? (condition-predicate G4a4e@G4a49)) (set! G4a5d@condition-who (condition-accessor G4a4e@G4a49 G4a59@G4a48)) (set! G4a5f@&who-rtd G4a4e@G4a49) (set! G4a61@&who-rcd G4a52@G4a4a) (set! G4a67@G4a62 (make-record-type-descriptor '&non-continuable G4a09@G4a04 'G4a65 '#f '#f '#())) (set! G4a69@G4a64 '#f) (set! G4a6b@G4a63 (make-record-constructor-descriptor G4a67@G4a62 G4a0d@G4a05 G4a69@G4a64)) (set! G4a6e@p? (record-predicate G4a67@G4a62)) (set! G4a70@make-non-continuable-violation (record-constructor G4a6b@G4a63)) (set! G4a72@non-continuable-violation? (condition-predicate G4a67@G4a62)) (set! G4a74@&non-continuable-rtd G4a67@G4a62) (set! G4a76@&non-continuable-rcd G4a6b@G4a63) (set! G4a7c@G4a77 (make-record-type-descriptor '&implementation-restriction G4a09@G4a04 'G4a7a '#f '#f '#())) (set! G4a7e@G4a79 '#f) (set! G4a80@G4a78 (make-record-constructor-descriptor G4a7c@G4a77 G4a0d@G4a05 G4a7e@G4a79)) (set! G4a83@p? (record-predicate G4a7c@G4a77)) (set! G4a85@make-implementation-restriction-violation (record-constructor G4a80@G4a78)) (set! G4a87@implementation-restriction-violation? (condition-predicate G4a7c@G4a77)) (set! G4a89@&implementation-restriction-rtd G4a7c@G4a77) (set! G4a8b@&implementation-restriction-rcd G4a80@G4a78) (set! G4a91@G4a8c (make-record-type-descriptor '&lexical G4a09@G4a04 'G4a8f '#f '#f '#())) (set! G4a93@G4a8e '#f) (set! G4a95@G4a8d (make-record-constructor-descriptor G4a91@G4a8c G4a0d@G4a05 G4a93@G4a8e)) (set! G4a98@p? (record-predicate G4a91@G4a8c)) (set! G4a9a@make-lexical-violation (record-constructor G4a95@G4a8d)) (set! G4a9c@lexical-violation? (condition-predicate G4a91@G4a8c)) (set! G4a9e@&lexical-rtd G4a91@G4a8c) (set! G4aa0@&lexical-rcd G4a95@G4a8d) (set! G4aa8@G4aa3 (make-record-type-descriptor '&syntax G4a09@G4a04 'G4aa6 '#f '#f '#((immutable form) (immutable subform)))) (set! G4aaa@G4aa5 '#f) (set! G4aac@G4aa4 (make-record-constructor-descriptor G4aa8@G4aa3 G4a0d@G4a05 G4aaa@G4aa5)) (set! G4aaf@p? (record-predicate G4aa8@G4aa3)) (set! G4ab1@make-syntax-violation (record-constructor G4aac@G4aa4)) (set! G4ab3@G4aa1 (record-accessor G4aa8@G4aa3 '0)) (set! G4ab5@G4aa2 (record-accessor G4aa8@G4aa3 '1)) (set! G4ab7@syntax-violation? (condition-predicate G4aa8@G4aa3)) (set! G4ab9@syntax-violation-form (condition-accessor G4aa8@G4aa3 G4ab3@G4aa1)) (set! G4abb@syntax-violation-subform (condition-accessor G4aa8@G4aa3 G4ab5@G4aa2)) (set! G4abd@&syntax-rtd G4aa8@G4aa3) (set! G4abf@&syntax-rcd G4aac@G4aa4) (set! G4ac5@G4ac0 (make-record-type-descriptor '&undefined G4a09@G4a04 'G4ac3 '#f '#f '#())) (set! G4ac7@G4ac2 '#f) (set! G4ac9@G4ac1 (make-record-constructor-descriptor G4ac5@G4ac0 G4a0d@G4a05 G4ac7@G4ac2)) (set! G4acc@p? (record-predicate G4ac5@G4ac0)) (set! G4ace@make-undefined-violation (record-constructor G4ac9@G4ac1)) (set! G4ad0@undefined-violation? (condition-predicate G4ac5@G4ac0)) (set! G4ad2@&undefined-rtd G4ac5@G4ac0) (set! G4ad4@&undefined-rcd G4ac9@G4ac1) (set! G4ada@G4ad5 (make-record-type-descriptor '&i/o G49f4@G49ef 'G4ad8 '#f '#f '#())) (set! G4adc@G4ad7 '#f) (set! G4ade@G4ad6 (make-record-constructor-descriptor G4ada@G4ad5 G49f8@G49f0 G4adc@G4ad7)) (set! G4ae1@p? (record-predicate G4ada@G4ad5)) (set! G4ae3@make-i/o-error (record-constructor G4ade@G4ad6)) (set! G4ae5@i/o-error? (condition-predicate G4ada@G4ad5)) (set! G4ae7@&i/o-rtd G4ada@G4ad5) (set! G4ae9@&i/o-rcd G4ade@G4ad6) (set! G4aef@G4aea (make-record-type-descriptor '&i/o-read G4ada@G4ad5 'G4aed '#f '#f '#())) (set! G4af1@G4aec '#f) (set! G4af3@G4aeb (make-record-constructor-descriptor G4aef@G4aea G4ade@G4ad6 G4af1@G4aec)) (set! G4af6@p? (record-predicate G4aef@G4aea)) (set! G4af8@make-i/o-read-error (record-constructor G4af3@G4aeb)) (set! G4afa@i/o-read-error? (condition-predicate G4aef@G4aea)) (set! G4afc@&i/o-read-rtd G4aef@G4aea) (set! G4afe@&i/o-read-rcd G4af3@G4aeb) (set! G4b04@G4aff (make-record-type-descriptor '&i/o-write G4ada@G4ad5 'G4b02 '#f '#f '#())) (set! G4b06@G4b01 '#f) (set! G4b08@G4b00 (make-record-constructor-descriptor G4b04@G4aff G4ade@G4ad6 G4b06@G4b01)) (set! G4b0b@p? (record-predicate G4b04@G4aff)) (set! G4b0d@make-i/o-write-error (record-constructor G4b08@G4b00)) (set! G4b0f@i/o-write-error? (condition-predicate G4b04@G4aff)) (set! G4b11@&i/o-write-rtd G4b04@G4aff) (set! G4b13@&i/o-write-rcd G4b08@G4b00) (set! G4b1a@G4b15 (make-record-type-descriptor '&i/o-invalid-position G4ada@G4ad5 'G4b18 '#f '#f '#((immutable position)))) (set! G4b1c@G4b17 '#f) (set! G4b1e@G4b16 (make-record-constructor-descriptor G4b1a@G4b15 G4ade@G4ad6 G4b1c@G4b17)) (set! G4b21@p? (record-predicate G4b1a@G4b15)) (set! G4b23@make-i/o-invalid-position-error (record-constructor G4b1e@G4b16)) (set! G4b25@G4b14 (record-accessor G4b1a@G4b15 '0)) (set! G4b27@i/o-invalid-position-error? (condition-predicate G4b1a@G4b15)) (set! G4b29@i/o-error-position (condition-accessor G4b1a@G4b15 G4b25@G4b14)) (set! G4b2b@&i/o-invalid-position-rtd G4b1a@G4b15) (set! G4b2d@&i/o-invalid-position-rcd G4b1e@G4b16) (set! G4b34@G4b2f (make-record-type-descriptor '&i/o-filename G4ada@G4ad5 'G4b32 '#f '#f '#((immutable filename)))) (set! G4b36@G4b31 '#f) (set! G4b38@G4b30 (make-record-constructor-descriptor G4b34@G4b2f G4ade@G4ad6 G4b36@G4b31)) (set! G4b3b@p? (record-predicate G4b34@G4b2f)) (set! G4b3d@make-i/o-filename-error (record-constructor G4b38@G4b30)) (set! G4b3f@G4b2e (record-accessor G4b34@G4b2f '0)) (set! G4b41@i/o-filename-error? (condition-predicate G4b34@G4b2f)) (set! G4b43@i/o-error-filename (condition-accessor G4b34@G4b2f G4b3f@G4b2e)) (set! G4b45@&i/o-filename-rtd G4b34@G4b2f) (set! G4b47@&i/o-filename-rcd G4b38@G4b30) (set! G4b4d@G4b48 (make-record-type-descriptor '&i/o-file-protection G4b34@G4b2f 'G4b4b '#f '#f '#())) (set! G4b4f@G4b4a '#f) (set! G4b51@G4b49 (make-record-constructor-descriptor G4b4d@G4b48 G4b38@G4b30 G4b4f@G4b4a)) (set! G4b54@p? (record-predicate G4b4d@G4b48)) (set! G4b56@make-i/o-file-protection-error (record-constructor G4b51@G4b49)) (set! G4b58@i/o-file-protection-error? (condition-predicate G4b4d@G4b48)) (set! G4b5a@&i/o-file-protection-rtd G4b4d@G4b48) (set! G4b5c@&i/o-file-protection-rcd G4b51@G4b49) (set! G4b62@G4b5d (make-record-type-descriptor '&i/o-file-is-read-only G4b4d@G4b48 'G4b60 '#f '#f '#())) (set! G4b64@G4b5f '#f) (set! G4b66@G4b5e (make-record-constructor-descriptor G4b62@G4b5d G4b51@G4b49 G4b64@G4b5f)) (set! G4b69@p? (record-predicate G4b62@G4b5d)) (set! G4b6b@make-i/o-file-is-read-only-error (record-constructor G4b66@G4b5e)) (set! G4b6d@i/o-file-is-read-only-error? (condition-predicate G4b62@G4b5d)) (set! G4b6f@&i/o-file-is-read-only-rtd G4b62@G4b5d) (set! G4b71@&i/o-file-is-read-only-rcd G4b66@G4b5e) (set! G4b77@G4b72 (make-record-type-descriptor '&i/o-file-already-exists G4b34@G4b2f 'G4b75 '#f '#f '#())) (set! G4b79@G4b74 '#f) (set! G4b7b@G4b73 (make-record-constructor-descriptor G4b77@G4b72 G4b38@G4b30 G4b79@G4b74)) (set! G4b7e@p? (record-predicate G4b77@G4b72)) (set! G4b80@make-i/o-file-already-exists-error (record-constructor G4b7b@G4b73)) (set! G4b82@i/o-file-already-exists-error? (condition-predicate G4b77@G4b72)) (set! G4b84@&i/o-file-already-exists-rtd G4b77@G4b72) (set! G4b86@&i/o-file-already-exists-rcd G4b7b@G4b73) (set! G4b8c@G4b87 (make-record-type-descriptor '&i/o-file-does-not-exist G4b34@G4b2f 'G4b8a '#f '#f '#())) (set! G4b8e@G4b89 '#f) (set! G4b90@G4b88 (make-record-constructor-descriptor G4b8c@G4b87 G4b38@G4b30 G4b8e@G4b89)) (set! G4b93@p? (record-predicate G4b8c@G4b87)) (set! G4b95@make-i/o-file-does-not-exist-error (record-constructor G4b90@G4b88)) (set! G4b97@i/o-file-does-not-exist-error? (condition-predicate G4b8c@G4b87)) (set! G4b99@&i/o-file-does-not-exist-rtd G4b8c@G4b87) (set! G4b9b@&i/o-file-does-not-exist-rcd G4b90@G4b88) (set! G4ba2@G4b9d (make-record-type-descriptor '&i/o-port G4ada@G4ad5 'G4ba0 '#f '#f '#((immutable port)))) (set! G4ba4@G4b9f '#f) (set! G4ba6@G4b9e (make-record-constructor-descriptor G4ba2@G4b9d G4ade@G4ad6 G4ba4@G4b9f)) (set! G4ba9@p? (record-predicate G4ba2@G4b9d)) (set! G4bab@make-i/o-port-error (record-constructor G4ba6@G4b9e)) (set! G4bad@G4b9c (record-accessor G4ba2@G4b9d '0)) (set! G4baf@i/o-port-error? (condition-predicate G4ba2@G4b9d)) (set! G4bb1@i/o-error-port (condition-accessor G4ba2@G4b9d G4bad@G4b9c)) (set! G4bb3@&i/o-port-rtd G4ba2@G4b9d) (set! G4bb5@&i/o-port-rcd G4ba6@G4b9e) (set! G4bbb@G4bb6 (make-record-type-descriptor '&i/o-decoding G4ba2@G4b9d 'G4bb9 '#f '#f '#())) (set! G4bbd@G4bb8 '#f) (set! G4bbf@G4bb7 (make-record-constructor-descriptor G4bbb@G4bb6 G4ba6@G4b9e G4bbd@G4bb8)) (set! G4bc2@p? (record-predicate G4bbb@G4bb6)) (set! G4bc4@make-i/o-decoding-error (record-constructor G4bbf@G4bb7)) (set! G4bc6@i/o-decoding-error? (condition-predicate G4bbb@G4bb6)) (set! G4bc8@&i/o-decoding-rtd G4bbb@G4bb6) (set! G4bca@&i/o-decoding-rcd G4bbf@G4bb7) (set! G4bd1@G4bcc (make-record-type-descriptor '&i/o-encoding G4ba2@G4b9d 'G4bcf '#f '#f '#((immutable char)))) (set! G4bd3@G4bce '#f) (set! G4bd5@G4bcd (make-record-constructor-descriptor G4bd1@G4bcc G4ba6@G4b9e G4bd3@G4bce)) (set! G4bd8@p? (record-predicate G4bd1@G4bcc)) (set! G4bda@make-i/o-encoding-error (record-constructor G4bd5@G4bcd)) (set! G4bdc@G4bcb (record-accessor G4bd1@G4bcc '0)) (set! G4bde@i/o-encoding-error? (condition-predicate G4bd1@G4bcc)) (set! G4be0@i/o-encoding-error-char (condition-accessor G4bd1@G4bcc G4bdc@G4bcb)) (set! G4be2@&i/o-encoding-rtd G4bd1@G4bcc) (set! G4be4@&i/o-encoding-rcd G4bd5@G4bcd) (set! G4bea@G4be5 (make-record-type-descriptor '&no-infinities G4a7c@G4a77 'G4be8 '#f '#f '#())) (set! G4bec@G4be7 '#f) (set! G4bee@G4be6 (make-record-constructor-descriptor G4bea@G4be5 G4a80@G4a78 G4bec@G4be7)) (set! G4bf1@p? (record-predicate G4bea@G4be5)) (set! G4bf3@make-no-infinities-violation (record-constructor G4bee@G4be6)) (set! G4bf5@no-infinities-violation? (condition-predicate G4bea@G4be5)) (set! G4bf7@&no-infinities-rtd G4bea@G4be5) (set! G4bf9@&no-infinities-rcd G4bee@G4be6) (set! G4bff@G4bfa (make-record-type-descriptor '&no-nans G4a7c@G4a77 'G4bfd '#f '#f '#())) (set! G4c01@G4bfc '#f) (set! G4c03@G4bfb (make-record-constructor-descriptor G4bff@G4bfa G4a80@G4a78 G4c01@G4bfc)) (set! G4c06@p? (record-predicate G4bff@G4bfa)) (set! G4c08@make-no-nans-violation (record-constructor G4c03@G4bfb)) (set! G4c0a@no-nans-violation? (condition-predicate G4bff@G4bfa)) (set! G4c0c@&no-nans-rtd G4bff@G4bfa) (set! G4c0e@&no-nans-rcd G4c03@G4bfb) (begin (set! G4cff@G4c0e@&no-nans-rcd G4c0e@&no-nans-rcd) (set! G4cfe@G4c0c@&no-nans-rtd G4c0c@&no-nans-rtd) (set! G4cfd@G4c0a@no-nans-violation? G4c0a@no-nans-violation?) (set! G4cfc@G4c08@make-no-nans-violation G4c08@make-no-nans-violation) (set! G4cfb@G4c06@p? G4c06@p?) (set! G4cfa@G4c03@G4bfb G4c03@G4bfb) (set! G4cf9@G4c01@G4bfc G4c01@G4bfc) (set! G4cf8@G4bff@G4bfa G4bff@G4bfa) (set! G4cf7@G4bf9@&no-infinities-rcd G4bf9@&no-infinities-rcd) (set! G4cf6@G4bf7@&no-infinities-rtd G4bf7@&no-infinities-rtd) (set! G4cf5@G4bf5@no-infinities-violation? G4bf5@no-infinities-violation?) (set! G4cf4@G4bf3@make-no-infinities-violation G4bf3@make-no-infinities-violation) (set! G4cf3@G4bf1@p? G4bf1@p?) (set! G4cf2@G4bee@G4be6 G4bee@G4be6) (set! G4cf1@G4bec@G4be7 G4bec@G4be7) (set! G4cf0@G4bea@G4be5 G4bea@G4be5) (set! G4cef@G4be4@&i/o-encoding-rcd G4be4@&i/o-encoding-rcd) (set! G4cee@G4be2@&i/o-encoding-rtd G4be2@&i/o-encoding-rtd) (set! G4ced@G4be0@i/o-encoding-error-char G4be0@i/o-encoding-error-char) (set! G4cec@G4bde@i/o-encoding-error? G4bde@i/o-encoding-error?) (set! G4ceb@G4bdc@G4bcb G4bdc@G4bcb) (set! G4cea@G4bda@make-i/o-encoding-error G4bda@make-i/o-encoding-error) (set! G4ce9@G4bd8@p? G4bd8@p?) (set! G4ce8@G4bd5@G4bcd G4bd5@G4bcd) (set! G4ce7@G4bd3@G4bce G4bd3@G4bce) (set! G4ce6@G4bd1@G4bcc G4bd1@G4bcc) (set! G4ce5@G4bca@&i/o-decoding-rcd G4bca@&i/o-decoding-rcd) (set! G4ce4@G4bc8@&i/o-decoding-rtd G4bc8@&i/o-decoding-rtd) (set! G4ce3@G4bc6@i/o-decoding-error? G4bc6@i/o-decoding-error?) (set! G4ce2@G4bc4@make-i/o-decoding-error G4bc4@make-i/o-decoding-error) (set! G4ce1@G4bc2@p? G4bc2@p?) (set! G4ce0@G4bbf@G4bb7 G4bbf@G4bb7) (set! G4cdf@G4bbd@G4bb8 G4bbd@G4bb8) (set! G4cde@G4bbb@G4bb6 G4bbb@G4bb6) (set! G4cdd@G4bb5@&i/o-port-rcd G4bb5@&i/o-port-rcd) (set! G4cdc@G4bb3@&i/o-port-rtd G4bb3@&i/o-port-rtd) (set! G4cdb@G4bb1@i/o-error-port G4bb1@i/o-error-port) (set! G4cda@G4baf@i/o-port-error? G4baf@i/o-port-error?) (set! G4cd9@G4bad@G4b9c G4bad@G4b9c) (set! G4cd8@G4bab@make-i/o-port-error G4bab@make-i/o-port-error) (set! G4cd7@G4ba9@p? G4ba9@p?) (set! G4cd6@G4ba6@G4b9e G4ba6@G4b9e) (set! G4cd5@G4ba4@G4b9f G4ba4@G4b9f) (set! G4cd4@G4ba2@G4b9d G4ba2@G4b9d) (set! G4cd3@G4b9b@&i/o-file-does-not-exist-rcd G4b9b@&i/o-file-does-not-exist-rcd) (set! G4cd2@G4b99@&i/o-file-does-not-exist-rtd G4b99@&i/o-file-does-not-exist-rtd) (set! G4cd1@G4b97@i/o-file-does-not-exist-error? G4b97@i/o-file-does-not-exist-error?) (set! G4cd0@G4b95@make-i/o-file-does-not-exist-error G4b95@make-i/o-file-does-not-exist-error) (set! G4ccf@G4b93@p? G4b93@p?) (set! G4cce@G4b90@G4b88 G4b90@G4b88) (set! G4ccd@G4b8e@G4b89 G4b8e@G4b89) (set! G4ccc@G4b8c@G4b87 G4b8c@G4b87) (set! G4ccb@G4b86@&i/o-file-already-exists-rcd G4b86@&i/o-file-already-exists-rcd) (set! G4cca@G4b84@&i/o-file-already-exists-rtd G4b84@&i/o-file-already-exists-rtd) (set! G4cc9@G4b82@i/o-file-already-exists-error? G4b82@i/o-file-already-exists-error?) (set! G4cc8@G4b80@make-i/o-file-already-exists-error G4b80@make-i/o-file-already-exists-error) (set! G4cc7@G4b7e@p? G4b7e@p?) (set! G4cc6@G4b7b@G4b73 G4b7b@G4b73) (set! G4cc5@G4b79@G4b74 G4b79@G4b74) (set! G4cc4@G4b77@G4b72 G4b77@G4b72) (set! G4cc3@G4b71@&i/o-file-is-read-only-rcd G4b71@&i/o-file-is-read-only-rcd) (set! G4cc2@G4b6f@&i/o-file-is-read-only-rtd G4b6f@&i/o-file-is-read-only-rtd) (set! G4cc1@G4b6d@i/o-file-is-read-only-error? G4b6d@i/o-file-is-read-only-error?) (set! G4cc0@G4b6b@make-i/o-file-is-read-only-error G4b6b@make-i/o-file-is-read-only-error) (set! G4cbf@G4b69@p? G4b69@p?) (set! G4cbe@G4b66@G4b5e G4b66@G4b5e) (set! G4cbd@G4b64@G4b5f G4b64@G4b5f) (set! G4cbc@G4b62@G4b5d G4b62@G4b5d) (set! G4cbb@G4b5c@&i/o-file-protection-rcd G4b5c@&i/o-file-protection-rcd) (set! G4cba@G4b5a@&i/o-file-protection-rtd G4b5a@&i/o-file-protection-rtd) (set! G4cb9@G4b58@i/o-file-protection-error? G4b58@i/o-file-protection-error?) (set! G4cb8@G4b56@make-i/o-file-protection-error G4b56@make-i/o-file-protection-error) (set! G4cb7@G4b54@p? G4b54@p?) (set! G4cb6@G4b51@G4b49 G4b51@G4b49) (set! G4cb5@G4b4f@G4b4a G4b4f@G4b4a) (set! G4cb4@G4b4d@G4b48 G4b4d@G4b48) (set! G4cb3@G4b47@&i/o-filename-rcd G4b47@&i/o-filename-rcd) (set! G4cb2@G4b45@&i/o-filename-rtd G4b45@&i/o-filename-rtd) (set! G4cb1@G4b43@i/o-error-filename G4b43@i/o-error-filename) (set! G4cb0@G4b41@i/o-filename-error? G4b41@i/o-filename-error?) (set! G4caf@G4b3f@G4b2e G4b3f@G4b2e) (set! G4cae@G4b3d@make-i/o-filename-error G4b3d@make-i/o-filename-error) (set! G4cad@G4b3b@p? G4b3b@p?) (set! G4cac@G4b38@G4b30 G4b38@G4b30) (set! G4cab@G4b36@G4b31 G4b36@G4b31) (set! G4caa@G4b34@G4b2f G4b34@G4b2f) (set! G4ca9@G4b2d@&i/o-invalid-position-rcd G4b2d@&i/o-invalid-position-rcd) (set! G4ca8@G4b2b@&i/o-invalid-position-rtd G4b2b@&i/o-invalid-position-rtd) (set! G4ca7@G4b29@i/o-error-position G4b29@i/o-error-position) (set! G4ca6@G4b27@i/o-invalid-position-error? G4b27@i/o-invalid-position-error?) (set! G4ca5@G4b25@G4b14 G4b25@G4b14) (set! G4ca4@G4b23@make-i/o-invalid-position-error G4b23@make-i/o-invalid-position-error) (set! G4ca3@G4b21@p? G4b21@p?) (set! G4ca2@G4b1e@G4b16 G4b1e@G4b16) (set! G4ca1@G4b1c@G4b17 G4b1c@G4b17) (set! G4ca0@G4b1a@G4b15 G4b1a@G4b15) (set! G4c9f@G4b13@&i/o-write-rcd G4b13@&i/o-write-rcd) (set! G4c9e@G4b11@&i/o-write-rtd G4b11@&i/o-write-rtd) (set! G4c9d@G4b0f@i/o-write-error? G4b0f@i/o-write-error?) (set! G4c9c@G4b0d@make-i/o-write-error G4b0d@make-i/o-write-error) (set! G4c9b@G4b0b@p? G4b0b@p?) (set! G4c9a@G4b08@G4b00 G4b08@G4b00) (set! G4c99@G4b06@G4b01 G4b06@G4b01) (set! G4c98@G4b04@G4aff G4b04@G4aff) (set! G4c97@G4afe@&i/o-read-rcd G4afe@&i/o-read-rcd) (set! G4c96@G4afc@&i/o-read-rtd G4afc@&i/o-read-rtd) (set! G4c95@G4afa@i/o-read-error? G4afa@i/o-read-error?) (set! G4c94@G4af8@make-i/o-read-error G4af8@make-i/o-read-error) (set! G4c93@G4af6@p? G4af6@p?) (set! G4c92@G4af3@G4aeb G4af3@G4aeb) (set! G4c91@G4af1@G4aec G4af1@G4aec) (set! G4c90@G4aef@G4aea G4aef@G4aea) (set! G4c8f@G4ae9@&i/o-rcd G4ae9@&i/o-rcd) (set! G4c8e@G4ae7@&i/o-rtd G4ae7@&i/o-rtd) (set! G4c8d@G4ae5@i/o-error? G4ae5@i/o-error?) (set! G4c8c@G4ae3@make-i/o-error G4ae3@make-i/o-error) (set! G4c8b@G4ae1@p? G4ae1@p?) (set! G4c8a@G4ade@G4ad6 G4ade@G4ad6) (set! G4c89@G4adc@G4ad7 G4adc@G4ad7) (set! G4c88@G4ada@G4ad5 G4ada@G4ad5) (set! G4c87@G4ad4@&undefined-rcd G4ad4@&undefined-rcd) (set! G4c86@G4ad2@&undefined-rtd G4ad2@&undefined-rtd) (set! G4c85@G4ad0@undefined-violation? G4ad0@undefined-violation?) (set! G4c84@G4ace@make-undefined-violation G4ace@make-undefined-violation) (set! G4c83@G4acc@p? G4acc@p?) (set! G4c82@G4ac9@G4ac1 G4ac9@G4ac1) (set! G4c81@G4ac7@G4ac2 G4ac7@G4ac2) (set! G4c80@G4ac5@G4ac0 G4ac5@G4ac0) (set! G4c7f@G4abf@&syntax-rcd G4abf@&syntax-rcd) (set! G4c7e@G4abd@&syntax-rtd G4abd@&syntax-rtd) (set! G4c7d@G4abb@syntax-violation-subform G4abb@syntax-violation-subform) (set! G4c7c@G4ab9@syntax-violation-form G4ab9@syntax-violation-form) (set! G4c7b@G4ab7@syntax-violation? G4ab7@syntax-violation?) (set! G4c7a@G4ab5@G4aa2 G4ab5@G4aa2) (set! G4c79@G4ab3@G4aa1 G4ab3@G4aa1) (set! G4c78@G4ab1@make-syntax-violation G4ab1@make-syntax-violation) (set! G4c77@G4aaf@p? G4aaf@p?) (set! G4c76@G4aac@G4aa4 G4aac@G4aa4) (set! G4c75@G4aaa@G4aa5 G4aaa@G4aa5) (set! G4c74@G4aa8@G4aa3 G4aa8@G4aa3) (set! G4c73@G4aa0@&lexical-rcd G4aa0@&lexical-rcd) (set! G4c72@G4a9e@&lexical-rtd G4a9e@&lexical-rtd) (set! G4c71@G4a9c@lexical-violation? G4a9c@lexical-violation?) (set! G4c70@G4a9a@make-lexical-violation G4a9a@make-lexical-violation) (set! G4c6f@G4a98@p? G4a98@p?) (set! G4c6e@G4a95@G4a8d G4a95@G4a8d) (set! G4c6d@G4a93@G4a8e G4a93@G4a8e) (set! G4c6c@G4a91@G4a8c G4a91@G4a8c) (set! G4c6b@G4a8b@&implementation-restriction-rcd G4a8b@&implementation-restriction-rcd) (set! G4c6a@G4a89@&implementation-restriction-rtd G4a89@&implementation-restriction-rtd) (set! G4c69@G4a87@implementation-restriction-violation? G4a87@implementation-restriction-violation?) (set! G4c68@G4a85@make-implementation-restriction-violation G4a85@make-implementation-restriction-violation) (set! G4c67@G4a83@p? G4a83@p?) (set! G4c66@G4a80@G4a78 G4a80@G4a78) (set! G4c65@G4a7e@G4a79 G4a7e@G4a79) (set! G4c64@G4a7c@G4a77 G4a7c@G4a77) (set! G4c63@G4a76@&non-continuable-rcd G4a76@&non-continuable-rcd) (set! G4c62@G4a74@&non-continuable-rtd G4a74@&non-continuable-rtd) (set! G4c61@G4a72@non-continuable-violation? G4a72@non-continuable-violation?) (set! G4c60@G4a70@make-non-continuable-violation G4a70@make-non-continuable-violation) (set! G4c5f@G4a6e@p? G4a6e@p?) (set! G4c5e@G4a6b@G4a63 G4a6b@G4a63) (set! G4c5d@G4a69@G4a64 G4a69@G4a64) (set! G4c5c@G4a67@G4a62 G4a67@G4a62) (set! G4c5b@G4a61@&who-rcd G4a61@&who-rcd) (set! G4c5a@G4a5f@&who-rtd G4a5f@&who-rtd) (set! G4c59@G4a5d@condition-who G4a5d@condition-who) (set! G4c58@G4a5b@who-condition? G4a5b@who-condition?) (set! G4c57@G4a59@G4a48 G4a59@G4a48) (set! G4c56@G4a57@make-who-condition G4a57@make-who-condition) (set! G4c55@G4a55@p? G4a55@p?) (set! G4c54@G4a52@G4a4a G4a52@G4a4a) (set! G4c53@G4a50@G4a4b G4a50@G4a4b) (set! G4c52@G4a4e@G4a49 G4a4e@G4a49) (set! G4c51@G4a47@&irritants-rcd G4a47@&irritants-rcd) (set! G4c50@G4a45@&irritants-rtd G4a45@&irritants-rtd) (set! G4c4f@G4a43@condition-irritants G4a43@condition-irritants) (set! G4c4e@G4a41@irritants-condition? G4a41@irritants-condition?) (set! G4c4d@G4a3f@G4a2e G4a3f@G4a2e) (set! G4c4c@G4a3d@make-irritants-condition G4a3d@make-irritants-condition) (set! G4c4b@G4a3b@p? G4a3b@p?) (set! G4c4a@G4a38@G4a30 G4a38@G4a30) (set! G4c49@G4a36@G4a31 G4a36@G4a31) (set! G4c48@G4a34@G4a2f G4a34@G4a2f) (set! G4c47@G4a2d@&assertion-rcd G4a2d@&assertion-rcd) (set! G4c46@G4a2b@&assertion-rtd G4a2b@&assertion-rtd) (set! G4c45@G4a29@assertion-violation? G4a29@assertion-violation?) (set! G4c44@G4a27@make-assertion-violation G4a27@make-assertion-violation) (set! G4c43@G4a25@p? G4a25@p?) (set! G4c42@G4a22@G4a1a G4a22@G4a1a) (set! G4c41@G4a20@G4a1b G4a20@G4a1b) (set! G4c40@G4a1e@G4a19 G4a1e@G4a19) (set! G4c3f@G4a18@&violation-rcd G4a18@&violation-rcd) (set! G4c3e@G4a16@&violation-rtd G4a16@&violation-rtd) (set! G4c3d@G4a14@violation? G4a14@violation?) (set! G4c3c@G4a12@make-violation G4a12@make-violation) (set! G4c3b@G4a10@p? G4a10@p?) (set! G4c3a@G4a0d@G4a05 G4a0d@G4a05) (set! G4c39@G4a0b@G4a06 G4a0b@G4a06) (set! G4c38@G4a09@G4a04 G4a09@G4a04) (set! G4c37@G4a03@&error-rcd G4a03@&error-rcd) (set! G4c36@G4a01@&error-rtd G4a01@&error-rtd) (set! G4c35@G49ff@error? G49ff@error?) (set! G4c34@G49fd@make-error G49fd@make-error) (set! G4c33@G49fb@p? G49fb@p?) (set! G4c32@G49f8@G49f0 G49f8@G49f0) (set! G4c31@G49f6@G49f1 G49f6@G49f1) (set! G4c30@G49f4@G49ef G49f4@G49ef) (set! G4c2f@G49ee@&serious-rcd G49ee@&serious-rcd) (set! G4c2e@G49ec@&serious-rtd G49ec@&serious-rtd) (set! G4c2d@G49ea@serious-condition? G49ea@serious-condition?) (set! G4c2c@G49e8@make-serious-condition G49e8@make-serious-condition) (set! G4c2b@G49e6@p? G49e6@p?) (set! G4c2a@G49e3@G49db G49e3@G49db) (set! G4c29@G49e1@G49dc G49e1@G49dc) (set! G4c28@G49df@G49da G49df@G49da) (set! G4c27@G49d9@&warning-rcd G49d9@&warning-rcd) (set! G4c26@G49d7@&warning-rtd G49d7@&warning-rtd) (set! G4c25@G49d5@warning? G49d5@warning?) (set! G4c24@G49d3@make-warning G49d3@make-warning) (set! G4c23@G49d1@p? G49d1@p?) (set! G4c22@G49ce@G49c6 G49ce@G49c6) (set! G4c21@G49cc@G49c7 G49cc@G49c7) (set! G4c20@G49ca@G49c5 G49ca@G49c5) (set! G4c1f@G49c4@&message-rcd G49c4@&message-rcd) (set! G4c1e@G49c2@&message-rtd G49c2@&message-rtd) (set! G4c1d@G49c0@condition-message G49c0@condition-message) (set! G4c1c@G49be@message-condition? G49be@message-condition?) (set! G4c1b@G49bc@G49ab G49bc@G49ab) (set! G4c1a@G49ba@make-message-condition G49ba@make-message-condition) (set! G4c19@G49b8@p? G49b8@p?) (set! G4c18@G49b5@G49ad G49b5@G49ad) (set! G4c17@G49b3@G49ae G49b3@G49ae) (set! G4c16@G49b1@G49ac G49b1@G49ac) (set! G4c15@G4967@&condition-rcd G4967@&condition-rcd) (set! G4c14@G4965@&condition-rtd G4965@&condition-rtd) (set! G4c13@G4963@make-&condition G4963@make-&condition) (set! G4c12@G4961@&condition? G4961@&condition?) (set! G4c11@G495e@G4956 G495e@G4956) (set! G4c10@G495c@G4957 G495c@G4957) (set! G4c0f@G495a@G4955 G495a@G4955)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G294f@G2904@current-primitive-locations (lambda (G50e7@x) ((lambda (G50e9@t) (if G50e9@t (cdr G50e9@t) '#f)) (assq G50e7@x '((&no-nans-rcd . G4cff@G4c0e@&no-nans-rcd) (&no-nans-rtd . G4cfe@G4c0c@&no-nans-rtd) (&no-infinities-rcd . G4cf7@G4bf9@&no-infinities-rcd) (&no-infinities-rtd . G4cf6@G4bf7@&no-infinities-rtd) (&i/o-encoding-rcd . G4cef@G4be4@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4cee@G4be2@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4ce5@G4bca@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4ce4@G4bc8@&i/o-decoding-rtd) (&i/o-port-rcd . G4cdd@G4bb5@&i/o-port-rcd) (&i/o-port-rtd . G4cdc@G4bb3@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cd3@G4b9b@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cd2@G4b99@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4ccb@G4b86@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cca@G4b84@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cc3@G4b71@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cc2@G4b6f@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4cbb@G4b5c@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4cba@G4b5a@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4cb3@G4b47@&i/o-filename-rcd) (&i/o-filename-rtd . G4cb2@G4b45@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4ca9@G4b2d@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4ca8@G4b2b@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4c9f@G4b13@&i/o-write-rcd) (&i/o-write-rtd . G4c9e@G4b11@&i/o-write-rtd) (&i/o-read-rcd . G4c97@G4afe@&i/o-read-rcd) (&i/o-read-rtd . G4c96@G4afc@&i/o-read-rtd) (&i/o-rcd . G4c8f@G4ae9@&i/o-rcd) (&i/o-rtd . G4c8e@G4ae7@&i/o-rtd) (&undefined-rcd . G4c87@G4ad4@&undefined-rcd) (&undefined-rtd . G4c86@G4ad2@&undefined-rtd) (&syntax-rcd . G4c7f@G4abf@&syntax-rcd) (&syntax-rtd . G4c7e@G4abd@&syntax-rtd) (&lexical-rcd . G4c73@G4aa0@&lexical-rcd) (&lexical-rtd . G4c72@G4a9e@&lexical-rtd) (&implementation-restriction-rcd . G4c6b@G4a8b@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c6a@G4a89@&implementation-restriction-rtd) (&non-continuable-rcd . G4c63@G4a76@&non-continuable-rcd) (&non-continuable-rtd . G4c62@G4a74@&non-continuable-rtd) (&who-rcd . G4c5b@G4a61@&who-rcd) (&who-rtd . G4c5a@G4a5f@&who-rtd) (&irritants-rcd . G4c51@G4a47@&irritants-rcd) (&irritants-rtd . G4c50@G4a45@&irritants-rtd) (&assertion-rcd . G4c47@G4a2d@&assertion-rcd) (&assertion-rtd . G4c46@G4a2b@&assertion-rtd) (&violation-rcd . G4c3f@G4a18@&violation-rcd) (&violation-rtd . G4c3e@G4a16@&violation-rtd) (&error-rcd . G4c37@G4a03@&error-rcd) (&error-rtd . G4c36@G4a01@&error-rtd) (&serious-rcd . G4c2f@G49ee@&serious-rcd) (&serious-rtd . G4c2e@G49ec@&serious-rtd) (&warning-rcd . G4c27@G49d9@&warning-rcd) (&warning-rtd . G4c26@G49d7@&warning-rtd) (&message-rcd . G4c1f@G49c4@&message-rcd) (&message-rtd . G4c1e@G49c2@&message-rtd) (&condition-rcd . G4c15@G4967@&condition-rcd) (&condition-rtd . G4c14@G4965@&condition-rtd) (syntax-error . G4947@G3048@syntax-error) (syntax-dispatch . G48db@G2f61@syntax-dispatch) (load . G4dd1@G4d15@load) (interaction-environment . G494f@G3058@interaction-environment) (make-parameter . G28fe@G2834@make-parameter) (make-variable-transformer . G4899@G2d9c@make-variable-transformer) (identifier? . G494a@G304e@identifier?) (generate-temporaries . G4940@G303a@generate-temporaries) (free-identifier=? . G4941@G303c@free-identifier=?) (syntax->datum . G494c@G3052@syntax->datum) (datum->syntax . G494b@G3050@datum->syntax) (bound-identifier=? . G4942@G303e@bound-identifier=?) (make-i/o-write-error . G4c9c@G4b0d@make-i/o-write-error) (make-i/o-read-error . G4c94@G4af8@make-i/o-read-error) (make-i/o-port-error . G4cd8@G4bab@make-i/o-port-error) (make-i/o-invalid-position-error . G4ca4@G4b23@make-i/o-invalid-position-error) (make-i/o-filename-error . G4cae@G4b3d@make-i/o-filename-error) (make-i/o-file-protection-error . G4cb8@G4b56@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cc0@G4b6b@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cd0@G4b95@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cc8@G4b80@make-i/o-file-already-exists-error) (make-i/o-error . G4c8c@G4ae3@make-i/o-error) (make-i/o-encoding-error . G4cea@G4bda@make-i/o-encoding-error) (make-i/o-decoding-error . G4ce2@G4bc4@make-i/o-decoding-error) (i/o-write-error? . G4c9d@G4b0f@i/o-write-error?) (i/o-read-error? . G4c95@G4afa@i/o-read-error?) (i/o-port-error? . G4cda@G4baf@i/o-port-error?) (i/o-invalid-position-error? . G4ca6@G4b27@i/o-invalid-position-error?) (i/o-filename-error? . G4cb0@G4b41@i/o-filename-error?) (i/o-file-protection-error? . G4cb9@G4b58@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cc1@G4b6d@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cd1@G4b97@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cc9@G4b82@i/o-file-already-exists-error?) (i/o-error? . G4c8d@G4ae5@i/o-error?) (i/o-error-position . G4ca7@G4b29@i/o-error-position) (i/o-error-port . G4cdb@G4bb1@i/o-error-port) (i/o-error-filename . G4cb1@G4b43@i/o-error-filename) (i/o-encoding-error? . G4cec@G4bde@i/o-encoding-error?) (i/o-encoding-error-char . G4ced@G4be0@i/o-encoding-error-char) (i/o-decoding-error? . G4ce3@G4bc6@i/o-decoding-error?) (scheme-report-environment . G4937@G3028@scheme-report-environment) (null-environment . G4936@G3026@null-environment) (command-line . G4dce@G4d0f@command-line) (eval . G4939@G302c@eval) (environment . G4935@G3024@environment) (who-condition? . G4c58@G4a5b@who-condition?) (warning? . G4c25@G49d5@warning?) (violation? . G4c3d@G4a14@violation?) (undefined-violation? . G4c85@G4ad0@undefined-violation?) (syntax-violation? . G4c7b@G4ab7@syntax-violation?) (syntax-violation-subform . G4c7d@G4abb@syntax-violation-subform) (syntax-violation-form . G4c7c@G4ab9@syntax-violation-form) (syntax-violation . G4949@G304c@syntax-violation) (serious-condition? . G4c2d@G49ea@serious-condition?) (non-continuable-violation? . G4c61@G4a72@non-continuable-violation?) (message-condition? . G4c1c@G49be@message-condition?) (make-who-condition . G4c56@G4a57@make-who-condition) (make-warning . G4c24@G49d3@make-warning) (make-violation . G4c3c@G4a12@make-violation) (make-undefined-violation . G4c84@G4ace@make-undefined-violation) (make-syntax-violation . G4c78@G4ab1@make-syntax-violation) (make-serious-condition . G4c2c@G49e8@make-serious-condition) (make-non-continuable-violation . G4c60@G4a70@make-non-continuable-violation) (make-message-condition . G4c1a@G49ba@make-message-condition) (make-lexical-violation . G4c70@G4a9a@make-lexical-violation) (make-irritants-condition . G4c4c@G4a3d@make-irritants-condition) (make-implementation-restriction-violation . G4c68@G4a85@make-implementation-restriction-violation) (make-error . G4c34@G49fd@make-error) (make-assertion-violation . G4c44@G4a27@make-assertion-violation) (lexical-violation? . G4c71@G4a9c@lexical-violation?) (irritants-condition? . G4c4e@G4a41@irritants-condition?) (implementation-restriction-violation? . G4c69@G4a87@implementation-restriction-violation?) (error? . G4c35@G49ff@error?) (condition-who . G4c59@G4a5d@condition-who) (condition-message . G4c1d@G49c0@condition-message) (condition-irritants . G4c4f@G4a43@condition-irritants) (assertion-violation? . G4c45@G4a29@assertion-violation?) (no-nans-violation? . G4cfd@G4c0a@no-nans-violation?) (no-infinities-violation? . G4cf5@G4bf5@no-infinities-violation?) (make-no-nans-violation . G4cfc@G4c08@make-no-nans-violation) (make-no-infinities-violation . G4cf4@G4bf3@make-no-infinities-violation)))))) (G2b77@G2a1c@install-library 'G50ba '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G508f) (format . G508a) (string-split . G5080) (call-process . G507a) (set-current-directory! . G5076) (expand-path . G5075) (current-directory . G5074) (%spawn . G5073) (%waitpid . G5072) (%ffi-supported? . G5071) (%ffi-pointer-ref . G5070) (%ffi-pointer->string . G506f) (%ffi-call->string-or-zero . G506e) (%ffi-call->void* . G506d) (%ffi-call->void . G506c) (%ffi-call->int . G506b) (%ffi-lookup . G506a) (%ffi-open . G5069) (%fork . G5068) (%pipe . G5067) (string-upcase . G5057) (string-titlecase . G5056) (string-normalize-nfkd . G5055) (string-normalize-nfkc . G5054) (string-normalize-nfd . G5053) (string-normalize-nfc . G5052) (string-foldcase . G5051) (string-downcase . G5050) (string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-title-case? . G5048) (char-numeric? . G5047) (char-lower-case? . G5046) (char-general-category . G5045) (char-upcase . G5044) (char-titlecase . G5043) (char-foldcase . G5042) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b) (make-variable-transformer . G2d9b) (identifier? . G304d) (generate-temporaries . G3039) (free-identifier=? . G303b) (syntax->datum . G3051) (datum->syntax . G304f) (bound-identifier=? . G303d) (record-type-descriptor? . G503a) (record-predicate . G5039) (record-mutator . G5038) (record-constructor . G5037) (record-accessor . G5036) (make-record-type-descriptor . G5035) (make-record-constructor-descriptor . G5034) (record? . G5033) (record-type-uid . G5032) (record-type-sealed? . G5031) (record-type-parent . G5030) (record-type-opaque? . G502f) (record-type-name . G502e) (record-type-generative? . G502d) (record-type-field-names . G502c) (record-rtd . G502b) (record-field-mutable? . G502a) (delete-file . G5029) (file-exists? . G5028) (vector-sort! . G5027) (vector-sort . G5026) (list-sort . G5025) (symbol-hash . G5024) (string-ci-hash . G5023) (string-hash . G5022) (equal-hash . G5021) (hashtable-equivalence-function . G5020) (make-hashtable . G501f) (hashtable-hash-function . G501e) (make-eqv-hashtable . G501d) (make-eq-hashtable . G501c) (hashtable? . G501b) (hashtable-update! . G501a) (hashtable-size . G5019) (hashtable-set! . G5018) (hashtable-ref . G5017) (hashtable-mutable? . G5016) (hashtable-keys . G5015) (hashtable-entries . G5014) (hashtable-delete! . G5013) (hashtable-copy . G5012) (hashtable-contains? . G5011) (hashtable-clear! . G5010) (call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (utf-8-codec . G4ff9) (utf-16-codec . G4ff8) (transcoder-error-handling-mode . G4ff7) (transcoder-eol-style . G4ff6) (transcoder-codec . G4ff5) (transcoded-port . G4ff4) (textual-port? . G4ff3) (string->bytevector . G4ff2) (standard-output-port . G4ff1) (standard-input-port . G4ff0) (standard-error-port . G4fef) (set-port-position! . G4fee) (put-u8 . G4fed) (put-string . G4fec) (put-datum . G4feb) (put-char . G4fea) (put-bytevector . G4fe9) (port? . G4fe8) (port-transcoder . G4fe7) (port-position . G4fe6) (port-has-set-port-position!? . G4fe5) (port-has-port-position? . G4fe4) (port-eof? . G4fe3) (output-port-buffer-mode . G4fe2) (open-string-output-port . G4fe1) (open-string-input-port . G4fe0) (open-file-output-port . G4fdf) (open-file-input/output-port . G4fde) (open-file-input-port . G4fdd) (open-bytevector-output-port . G4fdc) (open-bytevector-input-port . G4fdb) (native-transcoder . G4fda) (native-eol-style . G4fd9) (make-transcoder . G4fd8) (latin-1-codec . G4fd7) (make-i/o-write-error . G4b0c) (make-i/o-read-error . G4af7) (make-i/o-port-error . G4baa) (make-i/o-invalid-position-error . G4b22) (make-i/o-filename-error . G4b3c) (make-i/o-file-protection-error . G4b55) (make-i/o-file-is-read-only-error . G4b6a) (make-i/o-file-does-not-exist-error . G4b94) (make-i/o-file-already-exists-error . G4b7f) (make-i/o-error . G4ae2) (make-i/o-encoding-error . G4bd9) (make-i/o-decoding-error . G4bc3) (make-custom-textual-output-port . G4fd6) (make-custom-textual-input/output-port . G4fd5) (make-custom-textual-input-port . G4fd4) (make-custom-binary-output-port . G4fd3) (make-custom-binary-input/output-port . G4fd2) (make-custom-binary-input-port . G4fd1) (make-bytevector . G4fd0) (lookahead-u8 . G4fcf) (lookahead-char . G4fce) (i/o-write-error? . G4b0e) (i/o-read-error? . G4af9) (i/o-port-error? . G4bae) (i/o-invalid-position-error? . G4b26) (i/o-filename-error? . G4b40) (i/o-file-protection-error? . G4b57) (i/o-file-is-read-only-error? . G4b6c) (i/o-file-does-not-exist-error? . G4b96) (i/o-file-already-exists-error? . G4b81) (i/o-error? . G4ae4) (i/o-error-position . G4b28) (i/o-error-port . G4bb0) (i/o-error-filename . G4b42) (i/o-encoding-error? . G4bdd) (i/o-encoding-error-char . G4bdf) (i/o-decoding-error? . G4bc5) (get-u8 . G4fcd) (get-string-n! . G4fcc) (get-string-n . G4fcb) (get-string-all . G4fca) (get-line . G4fc9) (get-datum . G4fc8) (get-char . G4fc7) (get-bytevector-some . G4fc6) (get-bytevector-n! . G4fc5) (get-bytevector-n . G4fc4) (get-bytevector-all . G4fc3) (flush-output-port . G4fc2) (close-port . G4fc1) (exit . G4fb9) (command-line . G4d0e) (string-fill! . G4fb8) (string-set! . G4fb7) (set-cdr! . G4fb6) (set-car! . G4fb5) (remove . G4fb4) (remv . G4fb3) (remp . G4fb2) (remq . G4fb1) (partition . G4fb0) (memv . G4faf) (memq . G4fae) (memp . G4fad) (member . G4fac) (exists . G4fab) (for-all . G4faa) (fold-right . G4fa9) (fold-left . G4fa8) (find . G4fa7) (filter . G4fa6) (cons* . G4fa5) (assv . G4fa4) (assq . G4fa3) (assp . G4fa2) (assoc . G4fa1) (call-with-string-output-port . G4fa0) (call-with-port . G4f9f) (call-with-bytevector-output-port . G4f9e) (bytevector->string . G4f9d) (buffer-mode? . G4f9c) (binary-port? . G4f9b) (with-exception-handler . G4f9a) (raise-continuable . G4f99) (raise . G4f98) (eval . G302b) (environment . G3023) (make-enumeration . G4f97) (enum-set=? . G4f96) (enum-set-universe . G4f95) (enum-set-union . G4f94) (enum-set-subset? . G4f93) (enum-set-projection . G4f92) (enum-set-member? . G4f91) (enum-set-intersection . G4f90) (enum-set-indexer . G4f8f) (enum-set-difference . G4f8e) (enum-set-constructor . G4f8d) (enum-set-complement . G4f8c) (enum-set->list . G4f8b) (who-condition? . G4a5a) (warning? . G49d4) (violation? . G4a13) (undefined-violation? . G4acf) (syntax-violation? . G4ab6) (syntax-violation-subform . G4aba) (syntax-violation-form . G4ab8) (syntax-violation . G304b) (simple-conditions . G4f8a) (serious-condition? . G49e9) (non-continuable-violation? . G4a71) (message-condition? . G49bd) (make-who-condition . G4a56) (make-warning . G49d2) (make-violation . G4a11) (make-undefined-violation . G4acd) (make-syntax-violation . G4ab0) (make-serious-condition . G49e7) (make-non-continuable-violation . G4a6f) (make-message-condition . G49b9) (make-lexical-violation . G4a99) (make-irritants-condition . G4a3c) (make-implementation-restriction-violation . G4a84) (make-error . G49fc) (make-assertion-violation . G4a26) (lexical-violation? . G4a9b) (irritants-condition? . G4a40) (implementation-restriction-violation? . G4a86) (error? . G49fe) (condition-who . G4a5c) (condition-predicate . G4f89) (condition-message . G49bf) (condition-irritants . G4a42) (condition-accessor . G4f88) (condition . G4f87) (assertion-violation? . G4a28) (condition? . G4f86) (utf32->string . G4f85) (utf16->string . G4f84) (utf8->string . G4f83) (uint-list->bytevector . G4f82) (u8-list->bytevector . G4f81) (string->utf8 . G4f80) (string->utf32 . G4f7f) (string->utf16 . G4f7e) (sint-list->bytevector . G4f7d) (native-endianness . G4f7c) (bytevector? . G4f7b) (bytevector=? . G4f7a) (bytevector-uint-set! . G4f79) (bytevector-uint-ref . G4f78) (bytevector-u8-set! . G4f77) (bytevector-u8-ref . G4f76) (bytevector-u64-set! . G4f75) (bytevector-u64-ref . G4f74) (bytevector-u64-native-set! . G4f73) (bytevector-u64-native-ref . G4f72) (bytevector-u32-set! . G4f71) (bytevector-u32-ref . G4f70) (bytevector-u32-native-set! . G4f6f) (bytevector-u32-native-ref . G4f6e) (bytevector-u16-set! . G4f6d) (bytevector-u16-ref . G4f6c) (bytevector-u16-native-set! . G4f6b) (bytevector-u16-native-ref . G4f6a) (bytevector-sint-set! . G4f69) (bytevector-sint-ref . G4f68) (bytevector-s8-set! . G4f67) (bytevector-s8-ref . G4f66) (bytevector-s64-set! . G4f65) (bytevector-s64-ref . G4f64) (bytevector-s64-native-set! . G4f63) (bytevector-s64-native-ref . G4f62) (bytevector-s32-set! . G4f61) (bytevector-s32-ref . G4f60) (bytevector-s32-native-set! . G4f5f) (bytevector-s32-native-ref . G4f5e) (bytevector-s16-set! . G4f5d) (bytevector-s16-ref . G4f5c) (bytevector-s16-native-set! . G4f5b) (bytevector-s16-native-ref . G4f5a) (bytevector-length . G4f59) (bytevector-ieee-single-ref . G4f58) (bytevector-ieee-single-set! . G4f57) (bytevector-ieee-single-native-set! . G4f56) (bytevector-ieee-single-native-ref . G4f55) (bytevector-ieee-double-set! . G4f54) (bytevector-ieee-double-ref . G4f53) (bytevector-ieee-double-native-set! . G4f52) (bytevector-ieee-double-native-ref . G4f51) (bytevector-fill! . G4f50) (bytevector-copy! . G4f4f) (bytevector-copy . G4f4e) (bytevector->uint-list . G4f4d) (bytevector->u8-list . G4f4c) (bytevector->sint-list . G4f4b) (no-nans-violation? . G4c09) (no-infinities-violation? . G4bf4) (make-no-nans-violation . G4c07) (make-no-infinities-violation . G4bf2) (real->flonum . G4f4a) (flzero? . G4f49) (fltruncate . G4f48) (fltan . G4f47) (flsqrt . G4f46) (flsin . G4f45) (flround . G4f44) (flpositive? . G4f43) (flonum? . G4f42) (flodd? . G4f41) (flnumerator . G4f40) (flnegative? . G4f3f) (flnan? . G4f3e) (flmod0 . G4f3d) (flmod . G4f3c) (flmin . G4f3b) (flmax . G4f3a) (fllog . G4f39) (flinteger? . G4f38) (flinfinite? . G4f37) (flfloor . G4f36) (flfinite? . G4f35) (flexpt . G4f34) (flexp . G4f33) (fleven? . G4f32) (fldiv0-and-mod0 . G4f31) (fldiv0 . G4f30) (fldiv-and-mod . G4f2f) (fldiv . G4f2e) (fldenominator . G4f2d) (flcos . G4f2c) (flceiling . G4f2b) (flatan . G4f2a) (flasin . G4f29) (flacos . G4f28) (flabs . G4f27) (fl>? . G4f26) (fl>=? . G4f25) (fl=? . G4f24) (fl<? . G4f23) (fl<=? . G4f22) (fl/ . G4f21) (fl- . G4f20) (fl+ . G4f1f) (fl* . G4f1e) (fixnum->flonum . G4f1d) (fxzero? . G4f1c) (fxxor . G4f1b) (fxrotate-bit-field . G4f1a) (fxreverse-bit-field . G4f19) (fxpositive? . G4f18) (fxodd? . G4f17) (fxnot . G4f16) (fxnegative? . G4f15) (fxmod0 . G4f14) (fxmod . G4f13) (fxmin . G4f12) (fxmax . G4f11) (fxlength . G4f10) (fxior . G4f0f) (fxif . G4f0e) (fxfirst-bit-set . G4f0d) (fxeven? . G4f0c) (fxdiv0-and-mod0 . G4f0b) (fxdiv0 . G4f0a) (fxdiv-and-mod . G4f09) (fxdiv . G4f08) (fxcopy-bit-field . G4f07) (fxcopy-bit . G4f06) (fxbit-set? . G4f05) (fxbit-field . G4f04) (fxbit-count . G4f03) (fxarithmetic-shift-right . G4f02) (fxarithmetic-shift-left . G4f01) (fxarithmetic-shift . G4f00) (fxand . G4eff) (fx>? . G4efe) (fx>=? . G4efd) (fx=? . G4efc) (fx<? . G4efb) (fx<=? . G4efa) (fx-/carry . G4ef9) (fx- . G4ef8) (fx+/carry . G4ef7) (fx+ . G4ef6) (fx*/carry . G4ef5) (fx* . G4ef4) (greatest-fixnum . G4ef3) (least-fixnum . G4ef2) (fixnum-width . G4ef1) (fixnum? . G4ef0) (bitwise-rotate-bit-field . G4eef) (bitwise-reverse-bit-field . G4eee) (bitwise-length . G4eed) (bitwise-if . G4eec) (bitwise-first-bit-set . G4eeb) (bitwise-copy-bit-field . G4eea) (bitwise-copy-bit . G4ee9) (bitwise-bit-set? . G4ee8) (bitwise-bit-field . G4ee7) (bitwise-bit-count . G4ee6) (bitwise-xor . G4ee5) (bitwise-ior . G4ee4) (bitwise-and . G4ee3) (bitwise-not . G4ee2) (bitwise-arithmetic-shift-right . G4ee1) (bitwise-arithmetic-shift-left . G4ee0) (bitwise-arithmetic-shift . G4edf) (zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-map . G4eda) (vector-length . G4ed9) (vector-for-each . G4ed8) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol=? . G4ed0) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-for-each . G4ec5) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-valued? . G4eb9) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (rational-valued? . G4eb5) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (null? . G4ead) (not . G4eac) (negative? . G4eab) (nan? . G4eaa) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer-valued? . G4e97) (integer->char . G4e96) (infinite? . G4e95) (inexact? . G4e94) (inexact . G4e93) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (finite? . G4e8e) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (exact-integer-sqrt . G4e8a) (exact . G4e89) (even? . G4e88) (error . G4e87) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (div0-and-mod0 . G4e82) (mod0 . G4e81) (div0 . G4e80) (div-and-mod . G4e7f) (mod . G4e7e) (div . G4e7d) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call/cc . G4e6f) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (boolean=? . G4e4e) (atan . G4e4d) (assertion-violation . G4e4c) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (library . G4e3c) (&no-nans . G4e3b) (&no-infinities . G4e3a) (&i/o-encoding . G4e39) (&i/o-decoding . G4e38) (&i/o-port . G4e37) (&i/o-file-does-not-exist . G4e36) (&i/o-file-already-exists . G4e35) (&i/o-file-is-read-only . G4e34) (&i/o-file-protection . G4e33) (&i/o-filename . G4e32) (&i/o-invalid-position . G4e31) (&i/o-write . G4e30) (&i/o-read . G4e2f) (&i/o . G4e2e) (&undefined . G4e2d) (&syntax . G4e2c) (&lexical . G4e2b) (&implementation-restriction . G4e2a) (&non-continuable . G4e29) (&who . G4e28) (&irritants . G4e27) (&assertion . G4e26) (&violation . G4e25) (&error . G4e24) (&serious . G4e23) (&warning . G4e22) (&message . G4e21) (&condition . G4e20) (define-condition-type . G4e1f) (define-enumeration . G4e1e) (define-record-type . G4e1d) (parent-rtd . G4e1c) (nongenerative . G4e1b) (opaque . G4e1a) (sealed . G4e19) (protocol . G4e18) (parent . G4e17) (immutable . G4e16) (mutable . G4e15) (fields . G4e14) (error-handling-mode . G4e13) (file-options . G4e12) (buffer-mode . G4e11) (eol-style . G4e10) (guard . G4e0f) (unsyntax-splicing . G4e0c) (unsyntax . G4e0b) (unquote-splicing . G4e0a) (unquote . G4e09) (_ . G4e08) (else . G4e07) (=> . G4e06) (... . G4e05) (assert . G4e04) (endianness . G4e03) (do . G4e00) (cond . G4dff) (let* . G4dfe) (let . G4dfd) (let*-values . G4dfc) (let-values . G4dfb) (identifier-syntax . G4dfa) (with-syntax . G4df9) (quasisyntax . G4df8) (quasiquote . G4df7) (syntax-rules . G4df6) (include . G4df5) (record-constructor-descriptor . G4df3) (record-type-descriptor . G4df2) (case . G4df1) (unless . G4def) (when . G4dee) (or . G4ded) (and . G4dec) (if . G4deb) (letrec* . G4dea) (letrec . G4de9) (case-lambda . G4de7) (lambda . G4de6) (syntax . G4de5) (syntax-case . G4de4) (quote . G4de3) (letrec-syntax . G4de1) (let-syntax . G4de0) (set! . G4ddf) (import . G4dde) (begin . G4ddd) (define-syntax . G4ddb) (define . G4dda)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50bb '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fba) (unquote-splicing . G4e0a) (unquote . G4e09) (_ . G4e08) (else . G4e07) (=> . G4e06) (... . G4e05) (delay . G4e02) (do . G4e00) (cond . G4dff) (let* . G4dfe) (let . G4dfd) (quasiquote . G4df7) (syntax-rules . G4df6) (case . G4df1) (or . G4ded) (and . G4dec) (if . G4deb) (letrec . G4de9) (lambda . G4de6) (quote . G4de3) (letrec-syntax . G4de1) (let-syntax . G4de0) (set! . G4ddf) (begin . G4ddd) (define-syntax . G4ddb) (define . G4dda)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50bc '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-numeric? . G5047) (char-lower-case? . G5046) (char-upcase . G5044) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b) (call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object . G4fff) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (scheme-report-environment . G3027) (quotient . G4fc0) (null-environment . G3025) (remainder . G4fbf) (modulo . G4fbe) (inexact->exact . G4fbd) (force . G4fbc) (exact->inexact . G4fbb) (make-promise . G4fba) (string-fill! . G4fb8) (string-set! . G4fb7) (set-cdr! . G4fb6) (set-car! . G4fb5) (memv . G4faf) (memq . G4fae) (member . G4fac) (assv . G4fa4) (assq . G4fa3) (assoc . G4fa1) (eval . G302b) (zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-length . G4ed9) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (not . G4eac) (negative? . G4eab) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer->char . G4e96) (inexact? . G4e94) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (even? . G4e88) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (atan . G4e4d) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (unquote-splicing . G4e0a) (unquote . G4e09) (else . G4e07) (=> . G4e06) (... . G4e05) (delay . G4e02) (do . G4e00) (cond . G4dff) (let* . G4dfe) (let . G4dfd) (quasiquote . G4df7) (syntax-rules . G4df6) (case . G4df1) (or . G4ded) (and . G4dec) (if . G4deb) (letrec . G4de9) (lambda . G4de6) (quote . G4de3) (letrec-syntax . G4de1) (let-syntax . G4de0) (set! . G4ddf) (begin . G4ddd) (define-syntax . G4ddb) (define . G4dda)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50bd '(psyntax modules) '() '() '() '() '((module . G4ddc)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50be '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50bf '(rnrs) '(6) '() '() '() '((regexp? . G50b2) (string-upcase . G5057) (string-titlecase . G5056) (string-normalize-nfkd . G5055) (string-normalize-nfkc . G5054) (string-normalize-nfd . G5053) (string-normalize-nfc . G5052) (string-foldcase . G5051) (string-downcase . G5050) (string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-title-case? . G5048) (char-numeric? . G5047) (char-lower-case? . G5046) (char-general-category . G5045) (char-upcase . G5044) (char-titlecase . G5043) (char-foldcase . G5042) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b) (make-variable-transformer . G2d9b) (identifier? . G304d) (generate-temporaries . G3039) (free-identifier=? . G303b) (syntax->datum . G3051) (datum->syntax . G304f) (bound-identifier=? . G303d) (record-type-descriptor? . G503a) (record-predicate . G5039) (record-mutator . G5038) (record-constructor . G5037) (record-accessor . G5036) (make-record-type-descriptor . G5035) (make-record-constructor-descriptor . G5034) (record? . G5033) (record-type-uid . G5032) (record-type-sealed? . G5031) (record-type-parent . G5030) (record-type-opaque? . G502f) (record-type-name . G502e) (record-type-generative? . G502d) (record-type-field-names . G502c) (record-rtd . G502b) (record-field-mutable? . G502a) (delete-file . G5029) (file-exists? . G5028) (vector-sort! . G5027) (vector-sort . G5026) (list-sort . G5025) (symbol-hash . G5024) (string-ci-hash . G5023) (string-hash . G5022) (equal-hash . G5021) (hashtable-equivalence-function . G5020) (make-hashtable . G501f) (hashtable-hash-function . G501e) (make-eqv-hashtable . G501d) (make-eq-hashtable . G501c) (hashtable? . G501b) (hashtable-update! . G501a) (hashtable-size . G5019) (hashtable-set! . G5018) (hashtable-ref . G5017) (hashtable-mutable? . G5016) (hashtable-keys . G5015) (hashtable-entries . G5014) (hashtable-delete! . G5013) (hashtable-copy . G5012) (hashtable-contains? . G5011) (hashtable-clear! . G5010) (call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (utf-8-codec . G4ff9) (utf-16-codec . G4ff8) (transcoder-error-handling-mode . G4ff7) (transcoder-eol-style . G4ff6) (transcoder-codec . G4ff5) (transcoded-port . G4ff4) (textual-port? . G4ff3) (string->bytevector . G4ff2) (standard-output-port . G4ff1) (standard-input-port . G4ff0) (standard-error-port . G4fef) (set-port-position! . G4fee) (put-u8 . G4fed) (put-string . G4fec) (put-datum . G4feb) (put-char . G4fea) (put-bytevector . G4fe9) (port? . G4fe8) (port-transcoder . G4fe7) (port-position . G4fe6) (port-has-set-port-position!? . G4fe5) (port-has-port-position? . G4fe4) (port-eof? . G4fe3) (output-port-buffer-mode . G4fe2) (open-string-output-port . G4fe1) (open-string-input-port . G4fe0) (open-file-output-port . G4fdf) (open-file-input/output-port . G4fde) (open-file-input-port . G4fdd) (open-bytevector-output-port . G4fdc) (open-bytevector-input-port . G4fdb) (native-transcoder . G4fda) (native-eol-style . G4fd9) (make-transcoder . G4fd8) (latin-1-codec . G4fd7) (make-i/o-write-error . G4b0c) (make-i/o-read-error . G4af7) (make-i/o-port-error . G4baa) (make-i/o-invalid-position-error . G4b22) (make-i/o-filename-error . G4b3c) (make-i/o-file-protection-error . G4b55) (make-i/o-file-is-read-only-error . G4b6a) (make-i/o-file-does-not-exist-error . G4b94) (make-i/o-file-already-exists-error . G4b7f) (make-i/o-error . G4ae2) (make-i/o-encoding-error . G4bd9) (make-i/o-decoding-error . G4bc3) (make-custom-textual-output-port . G4fd6) (make-custom-textual-input/output-port . G4fd5) (make-custom-textual-input-port . G4fd4) (make-custom-binary-output-port . G4fd3) (make-custom-binary-input/output-port . G4fd2) (make-custom-binary-input-port . G4fd1) (make-bytevector . G4fd0) (lookahead-u8 . G4fcf) (lookahead-char . G4fce) (i/o-write-error? . G4b0e) (i/o-read-error? . G4af9) (i/o-port-error? . G4bae) (i/o-invalid-position-error? . G4b26) (i/o-filename-error? . G4b40) (i/o-file-protection-error? . G4b57) (i/o-file-is-read-only-error? . G4b6c) (i/o-file-does-not-exist-error? . G4b96) (i/o-file-already-exists-error? . G4b81) (i/o-error? . G4ae4) (i/o-error-position . G4b28) (i/o-error-port . G4bb0) (i/o-error-filename . G4b42) (i/o-encoding-error? . G4bdd) (i/o-encoding-error-char . G4bdf) (i/o-decoding-error? . G4bc5) (get-u8 . G4fcd) (get-string-n! . G4fcc) (get-string-n . G4fcb) (get-string-all . G4fca) (get-line . G4fc9) (get-datum . G4fc8) (get-char . G4fc7) (get-bytevector-some . G4fc6) (get-bytevector-n! . G4fc5) (get-bytevector-n . G4fc4) (get-bytevector-all . G4fc3) (flush-output-port . G4fc2) (close-port . G4fc1) (exit . G4fb9) (command-line . G4d0e) (remove . G4fb4) (remv . G4fb3) (remp . G4fb2) (remq . G4fb1) (partition . G4fb0) (memv . G4faf) (memq . G4fae) (memp . G4fad) (member . G4fac) (exists . G4fab) (for-all . G4faa) (fold-right . G4fa9) (fold-left . G4fa8) (find . G4fa7) (filter . G4fa6) (cons* . G4fa5) (assv . G4fa4) (assq . G4fa3) (assp . G4fa2) (assoc . G4fa1) (call-with-string-output-port . G4fa0) (call-with-port . G4f9f) (call-with-bytevector-output-port . G4f9e) (bytevector->string . G4f9d) (buffer-mode? . G4f9c) (binary-port? . G4f9b) (with-exception-handler . G4f9a) (raise-continuable . G4f99) (raise . G4f98) (make-enumeration . G4f97) (enum-set=? . G4f96) (enum-set-universe . G4f95) (enum-set-union . G4f94) (enum-set-subset? . G4f93) (enum-set-projection . G4f92) (enum-set-member? . G4f91) (enum-set-intersection . G4f90) (enum-set-indexer . G4f8f) (enum-set-difference . G4f8e) (enum-set-constructor . G4f8d) (enum-set-complement . G4f8c) (enum-set->list . G4f8b) (who-condition? . G4a5a) (warning? . G49d4) (violation? . G4a13) (undefined-violation? . G4acf) (syntax-violation? . G4ab6) (syntax-violation-subform . G4aba) (syntax-violation-form . G4ab8) (syntax-violation . G304b) (simple-conditions . G4f8a) (serious-condition? . G49e9) (non-continuable-violation? . G4a71) (message-condition? . G49bd) (make-who-condition . G4a56) (make-warning . G49d2) (make-violation . G4a11) (make-undefined-violation . G4acd) (make-syntax-violation . G4ab0) (make-serious-condition . G49e7) (make-non-continuable-violation . G4a6f) (make-message-condition . G49b9) (make-lexical-violation . G4a99) (make-irritants-condition . G4a3c) (make-implementation-restriction-violation . G4a84) (make-error . G49fc) (make-assertion-violation . G4a26) (lexical-violation? . G4a9b) (irritants-condition? . G4a40) (implementation-restriction-violation? . G4a86) (error? . G49fe) (condition-who . G4a5c) (condition-predicate . G4f89) (condition-message . G49bf) (condition-irritants . G4a42) (condition-accessor . G4f88) (condition . G4f87) (assertion-violation? . G4a28) (condition? . G4f86) (utf32->string . G4f85) (utf16->string . G4f84) (utf8->string . G4f83) (uint-list->bytevector . G4f82) (u8-list->bytevector . G4f81) (string->utf8 . G4f80) (string->utf32 . G4f7f) (string->utf16 . G4f7e) (sint-list->bytevector . G4f7d) (native-endianness . G4f7c) (bytevector? . G4f7b) (bytevector=? . G4f7a) (bytevector-uint-set! . G4f79) (bytevector-uint-ref . G4f78) (bytevector-u8-set! . G4f77) (bytevector-u8-ref . G4f76) (bytevector-u64-set! . G4f75) (bytevector-u64-ref . G4f74) (bytevector-u64-native-set! . G4f73) (bytevector-u64-native-ref . G4f72) (bytevector-u32-set! . G4f71) (bytevector-u32-ref . G4f70) (bytevector-u32-native-set! . G4f6f) (bytevector-u32-native-ref . G4f6e) (bytevector-u16-set! . G4f6d) (bytevector-u16-ref . G4f6c) (bytevector-u16-native-set! . G4f6b) (bytevector-u16-native-ref . G4f6a) (bytevector-sint-set! . G4f69) (bytevector-sint-ref . G4f68) (bytevector-s8-set! . G4f67) (bytevector-s8-ref . G4f66) (bytevector-s64-set! . G4f65) (bytevector-s64-ref . G4f64) (bytevector-s64-native-set! . G4f63) (bytevector-s64-native-ref . G4f62) (bytevector-s32-set! . G4f61) (bytevector-s32-ref . G4f60) (bytevector-s32-native-set! . G4f5f) (bytevector-s32-native-ref . G4f5e) (bytevector-s16-set! . G4f5d) (bytevector-s16-ref . G4f5c) (bytevector-s16-native-set! . G4f5b) (bytevector-s16-native-ref . G4f5a) (bytevector-length . G4f59) (bytevector-ieee-single-ref . G4f58) (bytevector-ieee-single-set! . G4f57) (bytevector-ieee-single-native-set! . G4f56) (bytevector-ieee-single-native-ref . G4f55) (bytevector-ieee-double-set! . G4f54) (bytevector-ieee-double-ref . G4f53) (bytevector-ieee-double-native-set! . G4f52) (bytevector-ieee-double-native-ref . G4f51) (bytevector-fill! . G4f50) (bytevector-copy! . G4f4f) (bytevector-copy . G4f4e) (bytevector->uint-list . G4f4d) (bytevector->u8-list . G4f4c) (bytevector->sint-list . G4f4b) (no-nans-violation? . G4c09) (no-infinities-violation? . G4bf4) (make-no-nans-violation . G4c07) (make-no-infinities-violation . G4bf2) (real->flonum . G4f4a) (flzero? . G4f49) (fltruncate . G4f48) (fltan . G4f47) (flsqrt . G4f46) (flsin . G4f45) (flround . G4f44) (flpositive? . G4f43) (flonum? . G4f42) (flodd? . G4f41) (flnumerator . G4f40) (flnegative? . G4f3f) (flnan? . G4f3e) (flmod0 . G4f3d) (flmod . G4f3c) (flmin . G4f3b) (flmax . G4f3a) (fllog . G4f39) (flinteger? . G4f38) (flinfinite? . G4f37) (flfloor . G4f36) (flfinite? . G4f35) (flexpt . G4f34) (flexp . G4f33) (fleven? . G4f32) (fldiv0-and-mod0 . G4f31) (fldiv0 . G4f30) (fldiv-and-mod . G4f2f) (fldiv . G4f2e) (fldenominator . G4f2d) (flcos . G4f2c) (flceiling . G4f2b) (flatan . G4f2a) (flasin . G4f29) (flacos . G4f28) (flabs . G4f27) (fl>? . G4f26) (fl>=? . G4f25) (fl=? . G4f24) (fl<? . G4f23) (fl<=? . G4f22) (fl/ . G4f21) (fl- . G4f20) (fl+ . G4f1f) (fl* . G4f1e) (fixnum->flonum . G4f1d) (fxzero? . G4f1c) (fxxor . G4f1b) (fxrotate-bit-field . G4f1a) (fxreverse-bit-field . G4f19) (fxpositive? . G4f18) (fxodd? . G4f17) (fxnot . G4f16) (fxnegative? . G4f15) (fxmod0 . G4f14) (fxmod . G4f13) (fxmin . G4f12) (fxmax . G4f11) (fxlength . G4f10) (fxior . G4f0f) (fxif . G4f0e) (fxfirst-bit-set . G4f0d) (fxeven? . G4f0c) (fxdiv0-and-mod0 . G4f0b) (fxdiv0 . G4f0a) (fxdiv-and-mod . G4f09) (fxdiv . G4f08) (fxcopy-bit-field . G4f07) (fxcopy-bit . G4f06) (fxbit-set? . G4f05) (fxbit-field . G4f04) (fxbit-count . G4f03) (fxarithmetic-shift-right . G4f02) (fxarithmetic-shift-left . G4f01) (fxarithmetic-shift . G4f00) (fxand . G4eff) (fx>? . G4efe) (fx>=? . G4efd) (fx=? . G4efc) (fx<? . G4efb) (fx<=? . G4efa) (fx-/carry . G4ef9) (fx- . G4ef8) (fx+/carry . G4ef7) (fx+ . G4ef6) (fx*/carry . G4ef5) (fx* . G4ef4) (greatest-fixnum . G4ef3) (least-fixnum . G4ef2) (fixnum-width . G4ef1) (fixnum? . G4ef0) (bitwise-rotate-bit-field . G4eef) (bitwise-reverse-bit-field . G4eee) (bitwise-length . G4eed) (bitwise-if . G4eec) (bitwise-first-bit-set . G4eeb) (bitwise-copy-bit-field . G4eea) (bitwise-copy-bit . G4ee9) (bitwise-bit-set? . G4ee8) (bitwise-bit-field . G4ee7) (bitwise-bit-count . G4ee6) (bitwise-xor . G4ee5) (bitwise-ior . G4ee4) (bitwise-and . G4ee3) (bitwise-not . G4ee2) (bitwise-arithmetic-shift-right . G4ee1) (bitwise-arithmetic-shift-left . G4ee0) (bitwise-arithmetic-shift . G4edf) (zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-map . G4eda) (vector-length . G4ed9) (vector-for-each . G4ed8) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol=? . G4ed0) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-for-each . G4ec5) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-valued? . G4eb9) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (rational-valued? . G4eb5) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (null? . G4ead) (not . G4eac) (negative? . G4eab) (nan? . G4eaa) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer-valued? . G4e97) (integer->char . G4e96) (infinite? . G4e95) (inexact? . G4e94) (inexact . G4e93) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (finite? . G4e8e) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (exact-integer-sqrt . G4e8a) (exact . G4e89) (even? . G4e88) (error . G4e87) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (div0-and-mod0 . G4e82) (mod0 . G4e81) (div0 . G4e80) (div-and-mod . G4e7f) (mod . G4e7e) (div . G4e7d) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call/cc . G4e6f) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (boolean=? . G4e4e) (atan . G4e4d) (assertion-violation . G4e4c) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (&no-nans . G4e3b) (&no-infinities . G4e3a) (&i/o-encoding . G4e39) (&i/o-decoding . G4e38) (&i/o-port . G4e37) (&i/o-file-does-not-exist . G4e36) (&i/o-file-already-exists . G4e35) (&i/o-file-is-read-only . G4e34) (&i/o-file-protection . G4e33) (&i/o-filename . G4e32) (&i/o-invalid-position . G4e31) (&i/o-write . G4e30) (&i/o-read . G4e2f) (&i/o . G4e2e) (&undefined . G4e2d) (&syntax . G4e2c) (&lexical . G4e2b) (&implementation-restriction . G4e2a) (&non-continuable . G4e29) (&who . G4e28) (&irritants . G4e27) (&assertion . G4e26) (&violation . G4e25) (&error . G4e24) (&serious . G4e23) (&warning . G4e22) (&message . G4e21) (&condition . G4e20) (define-condition-type . G4e1f) (define-enumeration . G4e1e) (define-record-type . G4e1d) (parent-rtd . G4e1c) (nongenerative . G4e1b) (opaque . G4e1a) (sealed . G4e19) (protocol . G4e18) (parent . G4e17) (immutable . G4e16) (mutable . G4e15) (fields . G4e14) (error-handling-mode . G4e13) (file-options . G4e12) (buffer-mode . G4e11) (eol-style . G4e10) (guard . G4e0f) (unsyntax-splicing . G4e0c) (unsyntax . G4e0b) (unquote-splicing . G4e0a) (unquote . G4e09) (_ . G4e08) (else . G4e07) (=> . G4e06) (... . G4e05) (assert . G4e04) (endianness . G4e03) (do . G4e00) (cond . G4dff) (let* . G4dfe) (let . G4dfd) (let*-values . G4dfc) (let-values . G4dfb) (identifier-syntax . G4dfa) (with-syntax . G4df9) (quasisyntax . G4df8) (quasiquote . G4df7) (syntax-rules . G4df6) (record-constructor-descriptor . G4df3) (record-type-descriptor . G4df2) (case . G4df1) (unless . G4def) (when . G4dee) (or . G4ded) (and . G4dec) (if . G4deb) (letrec* . G4dea) (letrec . G4de9) (case-lambda . G4de7) (lambda . G4de6) (syntax . G4de5) (syntax-case . G4de4) (quote . G4de3) (letrec-syntax . G4de1) (let-syntax . G4de0) (set! . G4ddf) (begin . G4ddd) (define-syntax . G4ddb) (define . G4dda)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50c0 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3027) (quotient . G4fc0) (null-environment . G3025) (remainder . G4fbf) (modulo . G4fbe) (inexact->exact . G4fbd) (force . G4fbc) (exact->inexact . G4fbb) (make-promise . G4fba) (delay . G4e02)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50c1 '(rnrs control) '(6) '() '() '() '((do . G4e00) (unless . G4def) (when . G4dee) (case-lambda . G4de7)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50c2 '(rnrs eval) '(6) '() '() '() '((eval . G302b) (environment . G3023)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50c3 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fb6) (set-car! . G4fb5)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50c4 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fb8) (string-set! . G4fb7)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50c5 '(rnrs programs) '(6) '() '() '() '((exit . G4fb9) (command-line . G4d0e)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50c6 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d9b) (identifier? . G304d) (generate-temporaries . G3039) (free-identifier=? . G303b) (syntax->datum . G3051) (datum->syntax . G304f) (bound-identifier=? . G303d) (syntax-violation . G304b) (unsyntax-splicing . G4e0c) (unsyntax . G4e0b) (_ . G4e08) (... . G4e05) (with-syntax . G4df9) (quasisyntax . G4df8) (syntax . G4de5) (syntax-case . G4de4)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50c7 '(rnrs files) '(6) '() '() '() '((delete-file . G5029) (file-exists? . G5028) (make-i/o-write-error . G4b0c) (make-i/o-read-error . G4af7) (make-i/o-port-error . G4baa) (make-i/o-invalid-position-error . G4b22) (make-i/o-filename-error . G4b3c) (make-i/o-file-protection-error . G4b55) (make-i/o-file-is-read-only-error . G4b6a) (make-i/o-file-does-not-exist-error . G4b94) (make-i/o-file-already-exists-error . G4b7f) (make-i/o-error . G4ae2) (i/o-write-error? . G4b0e) (i/o-read-error? . G4af9) (i/o-port-error? . G4bae) (i/o-invalid-position-error? . G4b26) (i/o-filename-error? . G4b40) (i/o-file-protection-error? . G4b57) (i/o-file-is-read-only-error? . G4b6c) (i/o-file-does-not-exist-error? . G4b96) (i/o-file-already-exists-error? . G4b81) (i/o-error? . G4ae4) (i/o-error-position . G4b28) (i/o-error-port . G4bb0) (i/o-error-filename . G4b42) (&i/o-port . G4e37) (&i/o-file-does-not-exist . G4e36) (&i/o-file-already-exists . G4e35) (&i/o-file-is-read-only . G4e34) (&i/o-file-protection . G4e33) (&i/o-filename . G4e32) (&i/o-invalid-position . G4e31) (&i/o-write . G4e30) (&i/o-read . G4e2f) (&i/o . G4e2e)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50c8 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5027) (vector-sort . G5026) (list-sort . G5025)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50c9 '(rnrs base) '(6) '() '() '() '((zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-map . G4eda) (vector-length . G4ed9) (vector-for-each . G4ed8) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol=? . G4ed0) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-for-each . G4ec5) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-valued? . G4eb9) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (rational-valued? . G4eb5) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (null? . G4ead) (not . G4eac) (negative? . G4eab) (nan? . G4eaa) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer-valued? . G4e97) (integer->char . G4e96) (infinite? . G4e95) (inexact? . G4e94) (inexact . G4e93) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (finite? . G4e8e) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (exact-integer-sqrt . G4e8a) (exact . G4e89) (even? . G4e88) (error . G4e87) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (div0-and-mod0 . G4e82) (mod0 . G4e81) (div0 . G4e80) (div-and-mod . G4e7f) (mod . G4e7e) (div . G4e7d) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call/cc . G4e6f) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (boolean=? . G4e4e) (atan . G4e4d) (assertion-violation . G4e4c) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (unquote-splicing . G4e0a) (unquote . G4e09) (_ . G4e08) (else . G4e07) (=> . G4e06) (... . G4e05) (assert . G4e04) (cond . G4dff) (let* . G4dfe) (let . G4dfd) (let*-values . G4dfc) (let-values . G4dfb) (identifier-syntax . G4dfa) (quasiquote . G4df7) (syntax-rules . G4df6) (case . G4df1) (or . G4ded) (and . G4dec) (if . G4deb) (letrec* . G4dea) (letrec . G4de9) (lambda . G4de6) (quote . G4de3) (letrec-syntax . G4de1) (let-syntax . G4de0) (set! . G4ddf) (begin . G4ddd) (define-syntax . G4ddb) (define . G4dda)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50ca '(rnrs lists) '(6) '() '() '() '((remove . G4fb4) (remv . G4fb3) (remp . G4fb2) (remq . G4fb1) (partition . G4fb0) (memv . G4faf) (memq . G4fae) (memp . G4fad) (member . G4fac) (exists . G4fab) (for-all . G4faa) (fold-right . G4fa9) (fold-left . G4fa8) (find . G4fa7) (filter . G4fa6) (cons* . G4fa5) (assv . G4fa4) (assq . G4fa3) (assp . G4fa2) (assoc . G4fa1)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50cb '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (make-i/o-write-error . G4b0c) (make-i/o-read-error . G4af7) (make-i/o-port-error . G4baa) (make-i/o-invalid-position-error . G4b22) (make-i/o-filename-error . G4b3c) (make-i/o-file-protection-error . G4b55) (make-i/o-file-is-read-only-error . G4b6a) (make-i/o-file-does-not-exist-error . G4b94) (make-i/o-file-already-exists-error . G4b7f) (make-i/o-error . G4ae2) (i/o-write-error? . G4b0e) (i/o-read-error? . G4af9) (i/o-port-error? . G4bae) (i/o-invalid-position-error? . G4b26) (i/o-filename-error? . G4b40) (i/o-file-protection-error? . G4b57) (i/o-file-is-read-only-error? . G4b6c) (i/o-file-does-not-exist-error? . G4b96) (i/o-file-already-exists-error? . G4b81) (i/o-error? . G4ae4) (i/o-error-position . G4b28) (i/o-error-port . G4bb0) (i/o-error-filename . G4b42) (&i/o-port . G4e37) (&i/o-file-does-not-exist . G4e36) (&i/o-file-already-exists . G4e35) (&i/o-file-is-read-only . G4e34) (&i/o-file-protection . G4e33) (&i/o-filename . G4e32) (&i/o-invalid-position . G4e31) (&i/o-write . G4e30) (&i/o-read . G4e2f) (&i/o . G4e2e)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50cc '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fd0) (utf32->string . G4f85) (utf16->string . G4f84) (utf8->string . G4f83) (uint-list->bytevector . G4f82) (u8-list->bytevector . G4f81) (string->utf8 . G4f80) (string->utf32 . G4f7f) (string->utf16 . G4f7e) (sint-list->bytevector . G4f7d) (native-endianness . G4f7c) (bytevector? . G4f7b) (bytevector=? . G4f7a) (bytevector-uint-set! . G4f79) (bytevector-uint-ref . G4f78) (bytevector-u8-set! . G4f77) (bytevector-u8-ref . G4f76) (bytevector-u64-set! . G4f75) (bytevector-u64-ref . G4f74) (bytevector-u64-native-set! . G4f73) (bytevector-u64-native-ref . G4f72) (bytevector-u32-set! . G4f71) (bytevector-u32-ref . G4f70) (bytevector-u32-native-set! . G4f6f) (bytevector-u32-native-ref . G4f6e) (bytevector-u16-set! . G4f6d) (bytevector-u16-ref . G4f6c) (bytevector-u16-native-set! . G4f6b) (bytevector-u16-native-ref . G4f6a) (bytevector-sint-set! . G4f69) (bytevector-sint-ref . G4f68) (bytevector-s8-set! . G4f67) (bytevector-s8-ref . G4f66) (bytevector-s64-set! . G4f65) (bytevector-s64-ref . G4f64) (bytevector-s64-native-set! . G4f63) (bytevector-s64-native-ref . G4f62) (bytevector-s32-set! . G4f61) (bytevector-s32-ref . G4f60) (bytevector-s32-native-set! . G4f5f) (bytevector-s32-native-ref . G4f5e) (bytevector-s16-set! . G4f5d) (bytevector-s16-ref . G4f5c) (bytevector-s16-native-set! . G4f5b) (bytevector-s16-native-ref . G4f5a) (bytevector-length . G4f59) (bytevector-ieee-single-ref . G4f58) (bytevector-ieee-single-set! . G4f57) (bytevector-ieee-single-native-set! . G4f56) (bytevector-ieee-single-native-ref . G4f55) (bytevector-ieee-double-set! . G4f54) (bytevector-ieee-double-ref . G4f53) (bytevector-ieee-double-native-set! . G4f52) (bytevector-ieee-double-native-ref . G4f51) (bytevector-fill! . G4f50) (bytevector-copy! . G4f4f) (bytevector-copy . G4f4e) (bytevector->uint-list . G4f4d) (bytevector->u8-list . G4f4c) (bytevector->sint-list . G4f4b) (endianness . G4e03)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50cd '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5057) (string-titlecase . G5056) (string-normalize-nfkd . G5055) (string-normalize-nfkc . G5054) (string-normalize-nfd . G5053) (string-normalize-nfc . G5052) (string-foldcase . G5051) (string-downcase . G5050) (string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-title-case? . G5048) (char-numeric? . G5047) (char-lower-case? . G5046) (char-general-category . G5045) (char-upcase . G5044) (char-titlecase . G5043) (char-foldcase . G5042) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50ce '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f9a) (raise-continuable . G4f99) (raise . G4f98) (guard . G4e0f) (else . G4e07) (=> . G4e06)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50cf '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4eef) (bitwise-reverse-bit-field . G4eee) (bitwise-length . G4eed) (bitwise-if . G4eec) (bitwise-first-bit-set . G4eeb) (bitwise-copy-bit-field . G4eea) (bitwise-copy-bit . G4ee9) (bitwise-bit-set? . G4ee8) (bitwise-bit-field . G4ee7) (bitwise-bit-count . G4ee6) (bitwise-xor . G4ee5) (bitwise-ior . G4ee4) (bitwise-and . G4ee3) (bitwise-not . G4ee2) (bitwise-arithmetic-shift-right . G4ee1) (bitwise-arithmetic-shift-left . G4ee0) (bitwise-arithmetic-shift . G4edf)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50d0 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f1c) (fxxor . G4f1b) (fxrotate-bit-field . G4f1a) (fxreverse-bit-field . G4f19) (fxpositive? . G4f18) (fxodd? . G4f17) (fxnot . G4f16) (fxnegative? . G4f15) (fxmod0 . G4f14) (fxmod . G4f13) (fxmin . G4f12) (fxmax . G4f11) (fxlength . G4f10) (fxior . G4f0f) (fxif . G4f0e) (fxfirst-bit-set . G4f0d) (fxeven? . G4f0c) (fxdiv0-and-mod0 . G4f0b) (fxdiv0 . G4f0a) (fxdiv-and-mod . G4f09) (fxdiv . G4f08) (fxcopy-bit-field . G4f07) (fxcopy-bit . G4f06) (fxbit-set? . G4f05) (fxbit-field . G4f04) (fxbit-count . G4f03) (fxarithmetic-shift-right . G4f02) (fxarithmetic-shift-left . G4f01) (fxarithmetic-shift . G4f00) (fxand . G4eff) (fx>? . G4efe) (fx>=? . G4efd) (fx=? . G4efc) (fx<? . G4efb) (fx<=? . G4efa) (fx-/carry . G4ef9) (fx- . G4ef8) (fx+/carry . G4ef7) (fx+ . G4ef6) (fx*/carry . G4ef5) (fx* . G4ef4) (greatest-fixnum . G4ef3) (least-fixnum . G4ef2) (fixnum-width . G4ef1) (fixnum? . G4ef0)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50d1 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c09) (no-infinities-violation? . G4bf4) (make-no-nans-violation . G4c07) (make-no-infinities-violation . G4bf2) (real->flonum . G4f4a) (flzero? . G4f49) (fltruncate . G4f48) (fltan . G4f47) (flsqrt . G4f46) (flsin . G4f45) (flround . G4f44) (flpositive? . G4f43) (flonum? . G4f42) (flodd? . G4f41) (flnumerator . G4f40) (flnegative? . G4f3f) (flnan? . G4f3e) (flmod0 . G4f3d) (flmod . G4f3c) (flmin . G4f3b) (flmax . G4f3a) (fllog . G4f39) (flinteger? . G4f38) (flinfinite? . G4f37) (flfloor . G4f36) (flfinite? . G4f35) (flexpt . G4f34) (flexp . G4f33) (fleven? . G4f32) (fldiv0-and-mod0 . G4f31) (fldiv0 . G4f30) (fldiv-and-mod . G4f2f) (fldiv . G4f2e) (fldenominator . G4f2d) (flcos . G4f2c) (flceiling . G4f2b) (flatan . G4f2a) (flasin . G4f29) (flacos . G4f28) (flabs . G4f27) (fl>? . G4f26) (fl>=? . G4f25) (fl=? . G4f24) (fl<? . G4f23) (fl<=? . G4f22) (fl/ . G4f21) (fl- . G4f20) (fl+ . G4f1f) (fl* . G4f1e) (fixnum->flonum . G4f1d) (&no-nans . G4e3b) (&no-infinities . G4e3a)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50d2 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5024) (string-ci-hash . G5023) (string-hash . G5022) (equal-hash . G5021) (hashtable-equivalence-function . G5020) (make-hashtable . G501f) (hashtable-hash-function . G501e) (make-eqv-hashtable . G501d) (make-eq-hashtable . G501c) (hashtable? . G501b) (hashtable-update! . G501a) (hashtable-size . G5019) (hashtable-set! . G5018) (hashtable-ref . G5017) (hashtable-mutable? . G5016) (hashtable-keys . G5015) (hashtable-entries . G5014) (hashtable-delete! . G5013) (hashtable-copy . G5012) (hashtable-contains? . G5011) (hashtable-clear! . G5010)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50d3 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (utf-8-codec . G4ff9) (utf-16-codec . G4ff8) (transcoder-error-handling-mode . G4ff7) (transcoder-eol-style . G4ff6) (transcoder-codec . G4ff5) (transcoded-port . G4ff4) (textual-port? . G4ff3) (string->bytevector . G4ff2) (standard-output-port . G4ff1) (standard-input-port . G4ff0) (standard-error-port . G4fef) (set-port-position! . G4fee) (put-u8 . G4fed) (put-string . G4fec) (put-datum . G4feb) (put-char . G4fea) (put-bytevector . G4fe9) (port? . G4fe8) (port-transcoder . G4fe7) (port-position . G4fe6) (port-has-set-port-position!? . G4fe5) (port-has-port-position? . G4fe4) (port-eof? . G4fe3) (output-port-buffer-mode . G4fe2) (open-string-output-port . G4fe1) (open-string-input-port . G4fe0) (open-file-output-port . G4fdf) (open-file-input/output-port . G4fde) (open-file-input-port . G4fdd) (open-bytevector-output-port . G4fdc) (open-bytevector-input-port . G4fdb) (native-transcoder . G4fda) (native-eol-style . G4fd9) (make-transcoder . G4fd8) (latin-1-codec . G4fd7) (make-i/o-write-error . G4b0c) (make-i/o-read-error . G4af7) (make-i/o-port-error . G4baa) (make-i/o-invalid-position-error . G4b22) (make-i/o-filename-error . G4b3c) (make-i/o-file-protection-error . G4b55) (make-i/o-file-is-read-only-error . G4b6a) (make-i/o-file-does-not-exist-error . G4b94) (make-i/o-file-already-exists-error . G4b7f) (make-i/o-error . G4ae2) (make-i/o-encoding-error . G4bd9) (make-i/o-decoding-error . G4bc3) (make-custom-textual-output-port . G4fd6) (make-custom-textual-input/output-port . G4fd5) (make-custom-textual-input-port . G4fd4) (make-custom-binary-output-port . G4fd3) (make-custom-binary-input/output-port . G4fd2) (make-custom-binary-input-port . G4fd1) (lookahead-u8 . G4fcf) (lookahead-char . G4fce) (i/o-write-error? . G4b0e) (i/o-read-error? . G4af9) (i/o-port-error? . G4bae) (i/o-invalid-position-error? . G4b26) (i/o-filename-error? . G4b40) (i/o-file-protection-error? . G4b57) (i/o-file-is-read-only-error? . G4b6c) (i/o-file-does-not-exist-error? . G4b96) (i/o-file-already-exists-error? . G4b81) (i/o-error? . G4ae4) (i/o-error-position . G4b28) (i/o-error-port . G4bb0) (i/o-error-filename . G4b42) (i/o-encoding-error? . G4bdd) (i/o-encoding-error-char . G4bdf) (i/o-decoding-error? . G4bc5) (get-u8 . G4fcd) (get-string-n! . G4fcc) (get-string-n . G4fcb) (get-string-all . G4fca) (get-line . G4fc9) (get-datum . G4fc8) (get-char . G4fc7) (get-bytevector-some . G4fc6) (get-bytevector-n! . G4fc5) (get-bytevector-n . G4fc4) (get-bytevector-all . G4fc3) (flush-output-port . G4fc2) (close-port . G4fc1) (call-with-string-output-port . G4fa0) (call-with-port . G4f9f) (call-with-bytevector-output-port . G4f9e) (bytevector->string . G4f9d) (buffer-mode? . G4f9c) (binary-port? . G4f9b) (&i/o-encoding . G4e39) (&i/o-decoding . G4e38) (&i/o-port . G4e37) (&i/o-file-does-not-exist . G4e36) (&i/o-file-already-exists . G4e35) (&i/o-file-is-read-only . G4e34) (&i/o-file-protection . G4e33) (&i/o-filename . G4e32) (&i/o-invalid-position . G4e31) (&i/o-write . G4e30) (&i/o-read . G4e2f) (&i/o . G4e2e) (error-handling-mode . G4e13) (file-options . G4e12) (buffer-mode . G4e11) (eol-style . G4e10)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50d4 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f97) (enum-set=? . G4f96) (enum-set-universe . G4f95) (enum-set-union . G4f94) (enum-set-subset? . G4f93) (enum-set-projection . G4f92) (enum-set-member? . G4f91) (enum-set-intersection . G4f90) (enum-set-indexer . G4f8f) (enum-set-difference . G4f8e) (enum-set-constructor . G4f8d) (enum-set-complement . G4f8c) (enum-set->list . G4f8b) (define-enumeration . G4e1e)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50d5 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a5a) (warning? . G49d4) (violation? . G4a13) (undefined-violation? . G4acf) (syntax-violation? . G4ab6) (syntax-violation-subform . G4aba) (syntax-violation-form . G4ab8) (syntax-violation . G304b) (simple-conditions . G4f8a) (serious-condition? . G49e9) (non-continuable-violation? . G4a71) (message-condition? . G49bd) (make-who-condition . G4a56) (make-warning . G49d2) (make-violation . G4a11) (make-undefined-violation . G4acd) (make-syntax-violation . G4ab0) (make-serious-condition . G49e7) (make-non-continuable-violation . G4a6f) (make-message-condition . G49b9) (make-lexical-violation . G4a99) (make-irritants-condition . G4a3c) (make-implementation-restriction-violation . G4a84) (make-error . G49fc) (make-assertion-violation . G4a26) (lexical-violation? . G4a9b) (irritants-condition? . G4a40) (implementation-restriction-violation? . G4a86) (error? . G49fe) (condition-who . G4a5c) (condition-predicate . G4f89) (condition-message . G49bf) (condition-irritants . G4a42) (condition-accessor . G4f88) (condition . G4f87) (assertion-violation? . G4a28) (condition? . G4f86) (&undefined . G4e2d) (&syntax . G4e2c) (&lexical . G4e2b) (&implementation-restriction . G4e2a) (&non-continuable . G4e29) (&who . G4e28) (&irritants . G4e27) (&assertion . G4e26) (&violation . G4e25) (&error . G4e24) (&serious . G4e23) (&warning . G4e22) (&message . G4e21) (&condition . G4e20) (define-condition-type . G4e1f)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50d6 '(rnrs records inspection) '(6) '() '() '() '((record? . G5033) (record-type-uid . G5032) (record-type-sealed? . G5031) (record-type-parent . G5030) (record-type-opaque? . G502f) (record-type-name . G502e) (record-type-generative? . G502d) (record-type-field-names . G502c) (record-rtd . G502b) (record-field-mutable? . G502a)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50d7 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G503a) (record-predicate . G5039) (record-mutator . G5038) (record-constructor . G5037) (record-accessor . G5036) (make-record-type-descriptor . G5035) (make-record-constructor-descriptor . G5034)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50d8 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e1d) (parent-rtd . G4e1c) (nongenerative . G4e1b) (opaque . G4e1a) (sealed . G4e19) (protocol . G4e18) (parent . G4e17) (immutable . G4e16) (mutable . G4e15) (fields . G4e14) (record-constructor-descriptor . G4df3) (record-type-descriptor . G4df2)) '() values values '#f '#f '#t '#f) (G2b77@G2a1c@install-library 'G50d9 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c0d) (&no-nans-rtd . G4c0b) (&no-infinities-rcd . G4bf8) (&no-infinities-rtd . G4bf6) (&i/o-encoding-rcd . G4be3) (&i/o-encoding-rtd . G4be1) (&i/o-decoding-rcd . G4bc9) (&i/o-decoding-rtd . G4bc7) (&i/o-port-rcd . G4bb4) (&i/o-port-rtd . G4bb2) (&i/o-file-does-not-exist-rcd . G4b9a) (&i/o-file-does-not-exist-rtd . G4b98) (&i/o-file-already-exists-rcd . G4b85) (&i/o-file-already-exists-rtd . G4b83) (&i/o-file-is-read-only-rcd . G4b70) (&i/o-file-is-read-only-rtd . G4b6e) (&i/o-file-protection-rcd . G4b5b) (&i/o-file-protection-rtd . G4b59) (&i/o-filename-rcd . G4b46) (&i/o-filename-rtd . G4b44) (&i/o-invalid-position-rcd . G4b2c) (&i/o-invalid-position-rtd . G4b2a) (&i/o-write-rcd . G4b12) (&i/o-write-rtd . G4b10) (&i/o-read-rcd . G4afd) (&i/o-read-rtd . G4afb) (&i/o-rcd . G4ae8) (&i/o-rtd . G4ae6) (&undefined-rcd . G4ad3) (&undefined-rtd . G4ad1) (&syntax-rcd . G4abe) (&syntax-rtd . G4abc) (&lexical-rcd . G4a9f) (&lexical-rtd . G4a9d) (&implementation-restriction-rcd . G4a8a) (&implementation-restriction-rtd . G4a88) (&non-continuable-rcd . G4a75) (&non-continuable-rtd . G4a73) (&who-rcd . G4a60) (&who-rtd . G4a5e) (&irritants-rcd . G4a46) (&irritants-rtd . G4a44) (&assertion-rcd . G4a2c) (&assertion-rtd . G4a2a) (&violation-rcd . G4a17) (&violation-rtd . G4a15) (&error-rcd . G4a02) (&error-rtd . G4a00) (&serious-rcd . G49ed) (&serious-rtd . G49eb) (&warning-rcd . G49d8) (&warning-rtd . G49d6) (&message-rcd . G49c3) (&message-rtd . G49c1) (&condition-rcd . G4966) (&condition-rtd . G4964) (syntax-error . G3047) (syntax-dispatch . G2f60) (pretty-print . G50b9) (eval-core . G50b8) (set-symbol-value! . G50b7) (symbol-value . G50b6) (gensym . G50b5) (void . G50b4) (load . G4d14) (interaction-environment . G3057) (char-ready? . G50b3) (regexp? . G50b2) (read-line . G50b1) (dotted-list? . G50b0) (circular-list? . G50af) (proper-list? . G50ae) (circular-list . G50ad) (last . G50ac) (last-pair . G50ab) (not-pair? . G50aa) (split-at! . G50a9) (split-at . G50a8) (list= . G50a7) (list-copy . G50a6) (list-tabulate . G50a5) (make-list . G50a4) (xcons . G50a3) (tenth . G50a2) (ninth . G50a1) (eighth . G50a0) (seventh . G509f) (sixth . G509e) (fifth . G509d) (drop-right! . G509c) (drop-right . G509b) (take-right . G509a) (take! . G5099) (drop . G5098) (take . G5097) (car+cdr . G5096) (third . G5095) (second . G5094) (first . G5093) (iota . G5092) (every . G5091) (ungensym . G5090) (alist->eq-hash-table . G508f) (assoc-ref . G508e) (alist-cons . G508d) (append-map . G508c) (print . G508b) (format . G508a) (standard-library-path . G5089) (file-newer? . G5088) (stat-mtime . G5087) (write-to-file . G5086) (file->list . G5085) (file->string . G5084) (digit->integer . G5083) (call-with-string-input-port . G5082) (call-with-string-io . G5081) (string-split . G5080) (bytevector-for-each . G507f) (string->regexp . G507e) (rxmatch . G507d) (regexp-replace-all . G507c) (hashtable-for-each . G507b) (call-process . G507a) (local-tz-offset . G5079) (microseconds . G5078) (readdir . G5077) (set-current-directory! . G5076) (expand-path . G5075) (current-directory . G5074) (%spawn . G5073) (%waitpid . G5072) (%ffi-supported? . G5071) (%ffi-pointer-ref . G5070) (%ffi-pointer->string . G506f) (%ffi-call->string-or-zero . G506e) (%ffi-call->void* . G506d) (%ffi-call->void . G506c) (%ffi-call->int . G506b) (%ffi-lookup . G506a) (%ffi-open . G5069) (%fork . G5068) (%pipe . G5067) (get-environment-variables . G5066) (get-environment-variable . G5065) (get-timeofday . G5064) (get-command-line . G5063) (sys-display . G5062) (source-info . G5061) (make-compiler-instruction . G5060) (make-instruction . G505f) (set-source-info! . G505e) (bignum? . G505d) (make-complex . G505c) (fast-equal? . G505b) (fasl-read . G505a) (fasl-write . G5059) (receive . G5058) (make-parameter . G2833) (string-upcase . G5057) (string-titlecase . G5056) (string-normalize-nfkd . G5055) (string-normalize-nfkc . G5054) (string-normalize-nfd . G5053) (string-normalize-nfc . G5052) (string-foldcase . G5051) (string-downcase . G5050) (string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-title-case? . G5048) (char-numeric? . G5047) (char-lower-case? . G5046) (char-general-category . G5045) (char-upcase . G5044) (char-titlecase . G5043) (char-foldcase . G5042) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b) (make-variable-transformer . G2d9b) (identifier? . G304d) (generate-temporaries . G3039) (free-identifier=? . G303b) (syntax->datum . G3051) (datum->syntax . G304f) (bound-identifier=? . G303d) (record-type-descriptor? . G503a) (record-predicate . G5039) (record-mutator . G5038) (record-constructor . G5037) (record-accessor . G5036) (make-record-type-descriptor . G5035) (make-record-constructor-descriptor . G5034) (record? . G5033) (record-type-uid . G5032) (record-type-sealed? . G5031) (record-type-parent . G5030) (record-type-opaque? . G502f) (record-type-name . G502e) (record-type-generative? . G502d) (record-type-field-names . G502c) (record-rtd . G502b) (record-field-mutable? . G502a) (delete-file . G5029) (file-exists? . G5028) (vector-sort! . G5027) (vector-sort . G5026) (list-sort . G5025) (symbol-hash . G5024) (string-ci-hash . G5023) (string-hash . G5022) (equal-hash . G5021) (hashtable-equivalence-function . G5020) (make-hashtable . G501f) (hashtable-hash-function . G501e) (make-eqv-hashtable . G501d) (make-eq-hashtable . G501c) (hashtable? . G501b) (hashtable-update! . G501a) (hashtable-size . G5019) (hashtable-set! . G5018) (hashtable-ref . G5017) (hashtable-mutable? . G5016) (hashtable-keys . G5015) (hashtable-entries . G5014) (hashtable-delete! . G5013) (hashtable-copy . G5012) (hashtable-contains? . G5011) (hashtable-clear! . G5010) (call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (utf-8-codec . G4ff9) (utf-16-codec . G4ff8) (transcoder-error-handling-mode . G4ff7) (transcoder-eol-style . G4ff6) (transcoder-codec . G4ff5) (transcoded-port . G4ff4) (textual-port? . G4ff3) (string->bytevector . G4ff2) (standard-output-port . G4ff1) (standard-input-port . G4ff0) (standard-error-port . G4fef) (set-port-position! . G4fee) (put-u8 . G4fed) (put-string . G4fec) (put-datum . G4feb) (put-char . G4fea) (put-bytevector . G4fe9) (port? . G4fe8) (port-transcoder . G4fe7) (port-position . G4fe6) (port-has-set-port-position!? . G4fe5) (port-has-port-position? . G4fe4) (port-eof? . G4fe3) (output-port-buffer-mode . G4fe2) (open-string-output-port . G4fe1) (open-string-input-port . G4fe0) (open-file-output-port . G4fdf) (open-file-input/output-port . G4fde) (open-file-input-port . G4fdd) (open-bytevector-output-port . G4fdc) (open-bytevector-input-port . G4fdb) (native-transcoder . G4fda) (native-eol-style . G4fd9) (make-transcoder . G4fd8) (latin-1-codec . G4fd7) (make-i/o-write-error . G4b0c) (make-i/o-read-error . G4af7) (make-i/o-port-error . G4baa) (make-i/o-invalid-position-error . G4b22) (make-i/o-filename-error . G4b3c) (make-i/o-file-protection-error . G4b55) (make-i/o-file-is-read-only-error . G4b6a) (make-i/o-file-does-not-exist-error . G4b94) (make-i/o-file-already-exists-error . G4b7f) (make-i/o-error . G4ae2) (make-i/o-encoding-error . G4bd9) (make-i/o-decoding-error . G4bc3) (make-custom-textual-output-port . G4fd6) (make-custom-textual-input/output-port . G4fd5) (make-custom-textual-input-port . G4fd4) (make-custom-binary-output-port . G4fd3) (make-custom-binary-input/output-port . G4fd2) (make-custom-binary-input-port . G4fd1) (make-bytevector . G4fd0) (lookahead-u8 . G4fcf) (lookahead-char . G4fce) (i/o-write-error? . G4b0e) (i/o-read-error? . G4af9) (i/o-port-error? . G4bae) (i/o-invalid-position-error? . G4b26) (i/o-filename-error? . G4b40) (i/o-file-protection-error? . G4b57) (i/o-file-is-read-only-error? . G4b6c) (i/o-file-does-not-exist-error? . G4b96) (i/o-file-already-exists-error? . G4b81) (i/o-error? . G4ae4) (i/o-error-position . G4b28) (i/o-error-port . G4bb0) (i/o-error-filename . G4b42) (i/o-encoding-error? . G4bdd) (i/o-encoding-error-char . G4bdf) (i/o-decoding-error? . G4bc5) (get-u8 . G4fcd) (get-string-n! . G4fcc) (get-string-n . G4fcb) (get-string-all . G4fca) (get-line . G4fc9) (get-datum . G4fc8) (get-char . G4fc7) (get-bytevector-some . G4fc6) (get-bytevector-n! . G4fc5) (get-bytevector-n . G4fc4) (get-bytevector-all . G4fc3) (flush-output-port . G4fc2) (close-port . G4fc1) (scheme-report-environment . G3027) (quotient . G4fc0) (null-environment . G3025) (remainder . G4fbf) (modulo . G4fbe) (inexact->exact . G4fbd) (force . G4fbc) (exact->inexact . G4fbb) (make-promise . G4fba) (exit . G4fb9) (command-line . G4d0e) (string-fill! . G4fb8) (string-set! . G4fb7) (set-cdr! . G4fb6) (set-car! . G4fb5) (remove . G4fb4) (remv . G4fb3) (remp . G4fb2) (remq . G4fb1) (partition . G4fb0) (memv . G4faf) (memq . G4fae) (memp . G4fad) (member . G4fac) (exists . G4fab) (for-all . G4faa) (fold-right . G4fa9) (fold-left . G4fa8) (find . G4fa7) (filter . G4fa6) (cons* . G4fa5) (assv . G4fa4) (assq . G4fa3) (assp . G4fa2) (assoc . G4fa1) (call-with-string-output-port . G4fa0) (call-with-port . G4f9f) (call-with-bytevector-output-port . G4f9e) (bytevector->string . G4f9d) (buffer-mode? . G4f9c) (binary-port? . G4f9b) (with-exception-handler . G4f9a) (raise-continuable . G4f99) (raise . G4f98) (eval . G302b) (environment . G3023) (make-enumeration . G4f97) (enum-set=? . G4f96) (enum-set-universe . G4f95) (enum-set-union . G4f94) (enum-set-subset? . G4f93) (enum-set-projection . G4f92) (enum-set-member? . G4f91) (enum-set-intersection . G4f90) (enum-set-indexer . G4f8f) (enum-set-difference . G4f8e) (enum-set-constructor . G4f8d) (enum-set-complement . G4f8c) (enum-set->list . G4f8b) (who-condition? . G4a5a) (warning? . G49d4) (violation? . G4a13) (undefined-violation? . G4acf) (syntax-violation? . G4ab6) (syntax-violation-subform . G4aba) (syntax-violation-form . G4ab8) (syntax-violation . G304b) (simple-conditions . G4f8a) (serious-condition? . G49e9) (non-continuable-violation? . G4a71) (message-condition? . G49bd) (make-who-condition . G4a56) (make-warning . G49d2) (make-violation . G4a11) (make-undefined-violation . G4acd) (make-syntax-violation . G4ab0) (make-serious-condition . G49e7) (make-non-continuable-violation . G4a6f) (make-message-condition . G49b9) (make-lexical-violation . G4a99) (make-irritants-condition . G4a3c) (make-implementation-restriction-violation . G4a84) (make-error . G49fc) (make-assertion-violation . G4a26) (lexical-violation? . G4a9b) (irritants-condition? . G4a40) (implementation-restriction-violation? . G4a86) (error? . G49fe) (condition-who . G4a5c) (condition-predicate . G4f89) (condition-message . G49bf) (condition-irritants . G4a42) (condition-accessor . G4f88) (condition . G4f87) (assertion-violation? . G4a28) (condition? . G4f86) (utf32->string . G4f85) (utf16->string . G4f84) (utf8->string . G4f83) (uint-list->bytevector . G4f82) (u8-list->bytevector . G4f81) (string->utf8 . G4f80) (string->utf32 . G4f7f) (string->utf16 . G4f7e) (sint-list->bytevector . G4f7d) (native-endianness . G4f7c) (bytevector? . G4f7b) (bytevector=? . G4f7a) (bytevector-uint-set! . G4f79) (bytevector-uint-ref . G4f78) (bytevector-u8-set! . G4f77) (bytevector-u8-ref . G4f76) (bytevector-u64-set! . G4f75) (bytevector-u64-ref . G4f74) (bytevector-u64-native-set! . G4f73) (bytevector-u64-native-ref . G4f72) (bytevector-u32-set! . G4f71) (bytevector-u32-ref . G4f70) (bytevector-u32-native-set! . G4f6f) (bytevector-u32-native-ref . G4f6e) (bytevector-u16-set! . G4f6d) (bytevector-u16-ref . G4f6c) (bytevector-u16-native-set! . G4f6b) (bytevector-u16-native-ref . G4f6a) (bytevector-sint-set! . G4f69) (bytevector-sint-ref . G4f68) (bytevector-s8-set! . G4f67) (bytevector-s8-ref . G4f66) (bytevector-s64-set! . G4f65) (bytevector-s64-ref . G4f64) (bytevector-s64-native-set! . G4f63) (bytevector-s64-native-ref . G4f62) (bytevector-s32-set! . G4f61) (bytevector-s32-ref . G4f60) (bytevector-s32-native-set! . G4f5f) (bytevector-s32-native-ref . G4f5e) (bytevector-s16-set! . G4f5d) (bytevector-s16-ref . G4f5c) (bytevector-s16-native-set! . G4f5b) (bytevector-s16-native-ref . G4f5a) (bytevector-length . G4f59) (bytevector-ieee-single-ref . G4f58) (bytevector-ieee-single-set! . G4f57) (bytevector-ieee-single-native-set! . G4f56) (bytevector-ieee-single-native-ref . G4f55) (bytevector-ieee-double-set! . G4f54) (bytevector-ieee-double-ref . G4f53) (bytevector-ieee-double-native-set! . G4f52) (bytevector-ieee-double-native-ref . G4f51) (bytevector-fill! . G4f50) (bytevector-copy! . G4f4f) (bytevector-copy . G4f4e) (bytevector->uint-list . G4f4d) (bytevector->u8-list . G4f4c) (bytevector->sint-list . G4f4b) (no-nans-violation? . G4c09) (no-infinities-violation? . G4bf4) (make-no-nans-violation . G4c07) (make-no-infinities-violation . G4bf2) (real->flonum . G4f4a) (flzero? . G4f49) (fltruncate . G4f48) (fltan . G4f47) (flsqrt . G4f46) (flsin . G4f45) (flround . G4f44) (flpositive? . G4f43) (flonum? . G4f42) (flodd? . G4f41) (flnumerator . G4f40) (flnegative? . G4f3f) (flnan? . G4f3e) (flmod0 . G4f3d) (flmod . G4f3c) (flmin . G4f3b) (flmax . G4f3a) (fllog . G4f39) (flinteger? . G4f38) (flinfinite? . G4f37) (flfloor . G4f36) (flfinite? . G4f35) (flexpt . G4f34) (flexp . G4f33) (fleven? . G4f32) (fldiv0-and-mod0 . G4f31) (fldiv0 . G4f30) (fldiv-and-mod . G4f2f) (fldiv . G4f2e) (fldenominator . G4f2d) (flcos . G4f2c) (flceiling . G4f2b) (flatan . G4f2a) (flasin . G4f29) (flacos . G4f28) (flabs . G4f27) (fl>? . G4f26) (fl>=? . G4f25) (fl=? . G4f24) (fl<? . G4f23) (fl<=? . G4f22) (fl/ . G4f21) (fl- . G4f20) (fl+ . G4f1f) (fl* . G4f1e) (fixnum->flonum . G4f1d) (fxzero? . G4f1c) (fxxor . G4f1b) (fxrotate-bit-field . G4f1a) (fxreverse-bit-field . G4f19) (fxpositive? . G4f18) (fxodd? . G4f17) (fxnot . G4f16) (fxnegative? . G4f15) (fxmod0 . G4f14) (fxmod . G4f13) (fxmin . G4f12) (fxmax . G4f11) (fxlength . G4f10) (fxior . G4f0f) (fxif . G4f0e) (fxfirst-bit-set . G4f0d) (fxeven? . G4f0c) (fxdiv0-and-mod0 . G4f0b) (fxdiv0 . G4f0a) (fxdiv-and-mod . G4f09) (fxdiv . G4f08) (fxcopy-bit-field . G4f07) (fxcopy-bit . G4f06) (fxbit-set? . G4f05) (fxbit-field . G4f04) (fxbit-count . G4f03) (fxarithmetic-shift-right . G4f02) (fxarithmetic-shift-left . G4f01) (fxarithmetic-shift . G4f00) (fxand . G4eff) (fx>? . G4efe) (fx>=? . G4efd) (fx=? . G4efc) (fx<? . G4efb) (fx<=? . G4efa) (fx-/carry . G4ef9) (fx- . G4ef8) (fx+/carry . G4ef7) (fx+ . G4ef6) (fx*/carry . G4ef5) (fx* . G4ef4) (greatest-fixnum . G4ef3) (least-fixnum . G4ef2) (fixnum-width . G4ef1) (fixnum? . G4ef0) (bitwise-rotate-bit-field . G4eef) (bitwise-reverse-bit-field . G4eee) (bitwise-length . G4eed) (bitwise-if . G4eec) (bitwise-first-bit-set . G4eeb) (bitwise-copy-bit-field . G4eea) (bitwise-copy-bit . G4ee9) (bitwise-bit-set? . G4ee8) (bitwise-bit-field . G4ee7) (bitwise-bit-count . G4ee6) (bitwise-xor . G4ee5) (bitwise-ior . G4ee4) (bitwise-and . G4ee3) (bitwise-not . G4ee2) (bitwise-arithmetic-shift-right . G4ee1) (bitwise-arithmetic-shift-left . G4ee0) (bitwise-arithmetic-shift . G4edf) (zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-map . G4eda) (vector-length . G4ed9) (vector-for-each . G4ed8) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol=? . G4ed0) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-for-each . G4ec5) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-valued? . G4eb9) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (rational-valued? . G4eb5) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (null? . G4ead) (not . G4eac) (negative? . G4eab) (nan? . G4eaa) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer-valued? . G4e97) (integer->char . G4e96) (infinite? . G4e95) (inexact? . G4e94) (inexact . G4e93) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (finite? . G4e8e) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (exact-integer-sqrt . G4e8a) (exact . G4e89) (even? . G4e88) (error . G4e87) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (div0-and-mod0 . G4e82) (mod0 . G4e81) (div0 . G4e80) (div-and-mod . G4e7f) (mod . G4e7e) (div . G4e7d) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call/cc . G4e6f) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (boolean=? . G4e4e) (atan . G4e4d) (assertion-violation . G4e4c) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (library . G4e3c) (&no-nans . G4e3b) (&no-infinities . G4e3a) (&i/o-encoding . G4e39) (&i/o-decoding . G4e38) (&i/o-port . G4e37) (&i/o-file-does-not-exist . G4e36) (&i/o-file-already-exists . G4e35) (&i/o-file-is-read-only . G4e34) (&i/o-file-protection . G4e33) (&i/o-filename . G4e32) (&i/o-invalid-position . G4e31) (&i/o-write . G4e30) (&i/o-read . G4e2f) (&i/o . G4e2e) (&undefined . G4e2d) (&syntax . G4e2c) (&lexical . G4e2b) (&implementation-restriction . G4e2a) (&non-continuable . G4e29) (&who . G4e28) (&irritants . G4e27) (&assertion . G4e26) (&violation . G4e25) (&error . G4e24) (&serious . G4e23) (&warning . G4e22) (&message . G4e21) (&condition . G4e20) (define-condition-type . G4e1f) (define-enumeration . G4e1e) (define-record-type . G4e1d) (parent-rtd . G4e1c) (nongenerative . G4e1b) (opaque . G4e1a) (sealed . G4e19) (protocol . G4e18) (parent . G4e17) (immutable . G4e16) (mutable . G4e15) (fields . G4e14) (error-handling-mode . G4e13) (file-options . G4e12) (buffer-mode . G4e11) (eol-style . G4e10) (guard . G4e0f) (trace-define . G4e0e) (trace-lambda . G4e0d) (unsyntax-splicing . G4e0c) (unsyntax . G4e0b) (unquote-splicing . G4e0a) (unquote . G4e09) (_ . G4e08) (else . G4e07) (=> . G4e06) (... . G4e05) (assert . G4e04) (endianness . G4e03) (delay . G4e02) (time . G4e01) (do . G4e00) (cond . G4dff) (let* . G4dfe) (let . G4dfd) (let*-values . G4dfc) (let-values . G4dfb) (identifier-syntax . G4dfa) (with-syntax . G4df9) (quasisyntax . G4df8) (quasiquote . G4df7) (syntax-rules . G4df6) (include . G4df5) (define-struct . G4df4) (record-constructor-descriptor . G4df3) (record-type-descriptor . G4df2) (case . G4df1) (parameterize . G4df0) (unless . G4def) (when . G4dee) (or . G4ded) (and . G4dec) (if . G4deb) (letrec* . G4dea) (letrec . G4de9) (type-descriptor . G4de8) (case-lambda . G4de7) (lambda . G4de6) (syntax . G4de5) (syntax-case . G4de4) (quote . G4de3) (foreign-call . G4de2) (letrec-syntax . G4de1) (let-syntax . G4de0) (set! . G4ddf) (import . G4dde) (begin . G4ddd) (module . G4ddc) (define-syntax . G4ddb) (define . G4dda)) '((G4c0d core-prim . &no-nans-rcd) (G4c0b core-prim . &no-nans-rtd) (G4bf8 core-prim . &no-infinities-rcd) (G4bf6 core-prim . &no-infinities-rtd) (G4be3 core-prim . &i/o-encoding-rcd) (G4be1 core-prim . &i/o-encoding-rtd) (G4bc9 core-prim . &i/o-decoding-rcd) (G4bc7 core-prim . &i/o-decoding-rtd) (G4bb4 core-prim . &i/o-port-rcd) (G4bb2 core-prim . &i/o-port-rtd) (G4b9a core-prim . &i/o-file-does-not-exist-rcd) (G4b98 core-prim . &i/o-file-does-not-exist-rtd) (G4b85 core-prim . &i/o-file-already-exists-rcd) (G4b83 core-prim . &i/o-file-already-exists-rtd) (G4b70 core-prim . &i/o-file-is-read-only-rcd) (G4b6e core-prim . &i/o-file-is-read-only-rtd) (G4b5b core-prim . &i/o-file-protection-rcd) (G4b59 core-prim . &i/o-file-protection-rtd) (G4b46 core-prim . &i/o-filename-rcd) (G4b44 core-prim . &i/o-filename-rtd) (G4b2c core-prim . &i/o-invalid-position-rcd) (G4b2a core-prim . &i/o-invalid-position-rtd) (G4b12 core-prim . &i/o-write-rcd) (G4b10 core-prim . &i/o-write-rtd) (G4afd core-prim . &i/o-read-rcd) (G4afb core-prim . &i/o-read-rtd) (G4ae8 core-prim . &i/o-rcd) (G4ae6 core-prim . &i/o-rtd) (G4ad3 core-prim . &undefined-rcd) (G4ad1 core-prim . &undefined-rtd) (G4abe core-prim . &syntax-rcd) (G4abc core-prim . &syntax-rtd) (G4a9f core-prim . &lexical-rcd) (G4a9d core-prim . &lexical-rtd) (G4a8a core-prim . &implementation-restriction-rcd) (G4a88 core-prim . &implementation-restriction-rtd) (G4a75 core-prim . &non-continuable-rcd) (G4a73 core-prim . &non-continuable-rtd) (G4a60 core-prim . &who-rcd) (G4a5e core-prim . &who-rtd) (G4a46 core-prim . &irritants-rcd) (G4a44 core-prim . &irritants-rtd) (G4a2c core-prim . &assertion-rcd) (G4a2a core-prim . &assertion-rtd) (G4a17 core-prim . &violation-rcd) (G4a15 core-prim . &violation-rtd) (G4a02 core-prim . &error-rcd) (G4a00 core-prim . &error-rtd) (G49ed core-prim . &serious-rcd) (G49eb core-prim . &serious-rtd) (G49d8 core-prim . &warning-rcd) (G49d6 core-prim . &warning-rtd) (G49c3 core-prim . &message-rcd) (G49c1 core-prim . &message-rtd) (G4966 core-prim . &condition-rcd) (G4964 core-prim . &condition-rtd) (G3047 core-prim . syntax-error) (G2f60 core-prim . syntax-dispatch) (G50b9 core-prim . pretty-print) (G50b8 core-prim . eval-core) (G50b7 core-prim . set-symbol-value!) (G50b6 core-prim . symbol-value) (G50b5 core-prim . gensym) (G50b4 core-prim . void) (G4d14 core-prim . load) (G3057 core-prim . interaction-environment) (G50b3 core-prim . char-ready?) (G50b2 core-prim . regexp?) (G50b1 core-prim . read-line) (G50b0 core-prim . dotted-list?) (G50af core-prim . circular-list?) (G50ae core-prim . proper-list?) (G50ad core-prim . circular-list) (G50ac core-prim . last) (G50ab core-prim . last-pair) (G50aa core-prim . not-pair?) (G50a9 core-prim . split-at!) (G50a8 core-prim . split-at) (G50a7 core-prim . list=) (G50a6 core-prim . list-copy) (G50a5 core-prim . list-tabulate) (G50a4 core-prim . make-list) (G50a3 core-prim . xcons) (G50a2 core-prim . tenth) (G50a1 core-prim . ninth) (G50a0 core-prim . eighth) (G509f core-prim . seventh) (G509e core-prim . sixth) (G509d core-prim . fifth) (G509c core-prim . drop-right!) (G509b core-prim . drop-right) (G509a core-prim . take-right) (G5099 core-prim . take!) (G5098 core-prim . drop) (G5097 core-prim . take) (G5096 core-prim . car+cdr) (G5095 core-prim . third) (G5094 core-prim . second) (G5093 core-prim . first) (G5092 core-prim . iota) (G5091 core-prim . every) (G5090 core-prim . ungensym) (G508f core-prim . alist->eq-hash-table) (G508e core-prim . assoc-ref) (G508d core-prim . alist-cons) (G508c core-prim . append-map) (G508b core-prim . print) (G508a core-prim . format) (G5089 core-prim . standard-library-path) (G5088 core-prim . file-newer?) (G5087 core-prim . stat-mtime) (G5086 core-prim . write-to-file) (G5085 core-prim . file->list) (G5084 core-prim . file->string) (G5083 core-prim . digit->integer) (G5082 core-prim . call-with-string-input-port) (G5081 core-prim . call-with-string-io) (G5080 core-prim . string-split) (G507f core-prim . bytevector-for-each) (G507e core-prim . string->regexp) (G507d core-prim . rxmatch) (G507c core-prim . regexp-replace-all) (G507b core-prim . hashtable-for-each) (G507a core-prim . call-process) (G5079 core-prim . local-tz-offset) (G5078 core-prim . microseconds) (G5077 core-prim . readdir) (G5076 core-prim . set-current-directory!) (G5075 core-prim . expand-path) (G5074 core-prim . current-directory) (G5073 core-prim . %spawn) (G5072 core-prim . %waitpid) (G5071 core-prim . %ffi-supported?) (G5070 core-prim . %ffi-pointer-ref) (G506f core-prim . %ffi-pointer->string) (G506e core-prim . %ffi-call->string-or-zero) (G506d core-prim . %ffi-call->void*) (G506c core-prim . %ffi-call->void) (G506b core-prim . %ffi-call->int) (G506a core-prim . %ffi-lookup) (G5069 core-prim . %ffi-open) (G5068 core-prim . %fork) (G5067 core-prim . %pipe) (G5066 core-prim . get-environment-variables) (G5065 core-prim . get-environment-variable) (G5064 core-prim . get-timeofday) (G5063 core-prim . get-command-line) (G5062 core-prim . sys-display) (G5061 core-prim . source-info) (G5060 core-prim . make-compiler-instruction) (G505f core-prim . make-instruction) (G505e core-prim . set-source-info!) (G505d core-prim . bignum?) (G505c core-prim . make-complex) (G505b core-prim . fast-equal?) (G505a core-prim . fasl-read) (G5059 core-prim . fasl-write) (G5058 core-prim . receive) (G2833 core-prim . make-parameter) (G5057 core-prim . string-upcase) (G5056 core-prim . string-titlecase) (G5055 core-prim . string-normalize-nfkd) (G5054 core-prim . string-normalize-nfkc) (G5053 core-prim . string-normalize-nfd) (G5052 core-prim . string-normalize-nfc) (G5051 core-prim . string-foldcase) (G5050 core-prim . string-downcase) (G504f core-prim . string-ci>?) (G504e core-prim . string-ci>=?) (G504d core-prim . string-ci=?) (G504c core-prim . string-ci<?) (G504b core-prim . string-ci<=?) (G504a core-prim . char-whitespace?) (G5049 core-prim . char-upper-case?) (G5048 core-prim . char-title-case?) (G5047 core-prim . char-numeric?) (G5046 core-prim . char-lower-case?) (G5045 core-prim . char-general-category) (G5044 core-prim . char-upcase) (G5043 core-prim . char-titlecase) (G5042 core-prim . char-foldcase) (G5041 core-prim . char-downcase) (G5040 core-prim . char-ci>?) (G503f core-prim . char-ci>=?) (G503e core-prim . char-ci=?) (G503d core-prim . char-ci<?) (G503c core-prim . char-ci<=?) (G503b core-prim . char-alphabetic?) (G2d9b core-prim . make-variable-transformer) (G304d core-prim . identifier?) (G3039 core-prim . generate-temporaries) (G303b core-prim . free-identifier=?) (G3051 core-prim . syntax->datum) (G304f core-prim . datum->syntax) (G303d core-prim . bound-identifier=?) (G503a core-prim . record-type-descriptor?) (G5039 core-prim . record-predicate) (G5038 core-prim . record-mutator) (G5037 core-prim . record-constructor) (G5036 core-prim . record-accessor) (G5035 core-prim . make-record-type-descriptor) (G5034 core-prim . make-record-constructor-descriptor) (G5033 core-prim . record?) (G5032 core-prim . record-type-uid) (G5031 core-prim . record-type-sealed?) (G5030 core-prim . record-type-parent) (G502f core-prim . record-type-opaque?) (G502e core-prim . record-type-name) (G502d core-prim . record-type-generative?) (G502c core-prim . record-type-field-names) (G502b core-prim . record-rtd) (G502a core-prim . record-field-mutable?) (G5029 core-prim . delete-file) (G5028 core-prim . file-exists?) (G5027 core-prim . vector-sort!) (G5026 core-prim . vector-sort) (G5025 core-prim . list-sort) (G5024 core-prim . symbol-hash) (G5023 core-prim . string-ci-hash) (G5022 core-prim . string-hash) (G5021 core-prim . equal-hash) (G5020 core-prim . hashtable-equivalence-function) (G501f core-prim . make-hashtable) (G501e core-prim . hashtable-hash-function) (G501d core-prim . make-eqv-hashtable) (G501c core-prim . make-eq-hashtable) (G501b core-prim . hashtable?) (G501a core-prim . hashtable-update!) (G5019 core-prim . hashtable-size) (G5018 core-prim . hashtable-set!) (G5017 core-prim . hashtable-ref) (G5016 core-prim . hashtable-mutable?) (G5015 core-prim . hashtable-keys) (G5014 core-prim . hashtable-entries) (G5013 core-prim . hashtable-delete!) (G5012 core-prim . hashtable-copy) (G5011 core-prim . hashtable-contains?) (G5010 core-prim . hashtable-clear!) (G500f core-prim . call-with-output-file) (G500e core-prim . call-with-input-file) (G500d core-prim . write-char) (G500c core-prim . write) (G500b core-prim . with-output-to-file) (G500a core-prim . with-input-from-file) (G5009 core-prim . read-char) (G5008 core-prim . read) (G5007 core-prim . peek-char) (G5006 core-prim . open-output-file) (G5005 core-prim . open-input-file) (G5004 core-prim . newline) (G5003 core-prim . display) (G5002 core-prim . close-output-port) (G5001 core-prim . close-input-port) (G5000 core-prim . eof-object?) (G4fff core-prim . eof-object) (G4ffe core-prim . current-error-port) (G4ffd core-prim . current-output-port) (G4ffc core-prim . current-input-port) (G4ffb core-prim . output-port?) (G4ffa core-prim . input-port?) (G4ff9 core-prim . utf-8-codec) (G4ff8 core-prim . utf-16-codec) (G4ff7 core-prim . transcoder-error-handling-mode) (G4ff6 core-prim . transcoder-eol-style) (G4ff5 core-prim . transcoder-codec) (G4ff4 core-prim . transcoded-port) (G4ff3 core-prim . textual-port?) (G4ff2 core-prim . string->bytevector) (G4ff1 core-prim . standard-output-port) (G4ff0 core-prim . standard-input-port) (G4fef core-prim . standard-error-port) (G4fee core-prim . set-port-position!) (G4fed core-prim . put-u8) (G4fec core-prim . put-string) (G4feb core-prim . put-datum) (G4fea core-prim . put-char) (G4fe9 core-prim . put-bytevector) (G4fe8 core-prim . port?) (G4fe7 core-prim . port-transcoder) (G4fe6 core-prim . port-position) (G4fe5 core-prim . port-has-set-port-position!?) (G4fe4 core-prim . port-has-port-position?) (G4fe3 core-prim . port-eof?) (G4fe2 core-prim . output-port-buffer-mode) (G4fe1 core-prim . open-string-output-port) (G4fe0 core-prim . open-string-input-port) (G4fdf core-prim . open-file-output-port) (G4fde core-prim . open-file-input/output-port) (G4fdd core-prim . open-file-input-port) (G4fdc core-prim . open-bytevector-output-port) (G4fdb core-prim . open-bytevector-input-port) (G4fda core-prim . native-transcoder) (G4fd9 core-prim . native-eol-style) (G4fd8 core-prim . make-transcoder) (G4fd7 core-prim . latin-1-codec) (G4b0c core-prim . make-i/o-write-error) (G4af7 core-prim . make-i/o-read-error) (G4baa core-prim . make-i/o-port-error) (G4b22 core-prim . make-i/o-invalid-position-error) (G4b3c core-prim . make-i/o-filename-error) (G4b55 core-prim . make-i/o-file-protection-error) (G4b6a core-prim . make-i/o-file-is-read-only-error) (G4b94 core-prim . make-i/o-file-does-not-exist-error) (G4b7f core-prim . make-i/o-file-already-exists-error) (G4ae2 core-prim . make-i/o-error) (G4bd9 core-prim . make-i/o-encoding-error) (G4bc3 core-prim . make-i/o-decoding-error) (G4fd6 core-prim . make-custom-textual-output-port) (G4fd5 core-prim . make-custom-textual-input/output-port) (G4fd4 core-prim . make-custom-textual-input-port) (G4fd3 core-prim . make-custom-binary-output-port) (G4fd2 core-prim . make-custom-binary-input/output-port) (G4fd1 core-prim . make-custom-binary-input-port) (G4fd0 core-prim . make-bytevector) (G4fcf core-prim . lookahead-u8) (G4fce core-prim . lookahead-char) (G4b0e core-prim . i/o-write-error?) (G4af9 core-prim . i/o-read-error?) (G4bae core-prim . i/o-port-error?) (G4b26 core-prim . i/o-invalid-position-error?) (G4b40 core-prim . i/o-filename-error?) (G4b57 core-prim . i/o-file-protection-error?) (G4b6c core-prim . i/o-file-is-read-only-error?) (G4b96 core-prim . i/o-file-does-not-exist-error?) (G4b81 core-prim . i/o-file-already-exists-error?) (G4ae4 core-prim . i/o-error?) (G4b28 core-prim . i/o-error-position) (G4bb0 core-prim . i/o-error-port) (G4b42 core-prim . i/o-error-filename) (G4bdd core-prim . i/o-encoding-error?) (G4bdf core-prim . i/o-encoding-error-char) (G4bc5 core-prim . i/o-decoding-error?) (G4fcd core-prim . get-u8) (G4fcc core-prim . get-string-n!) (G4fcb core-prim . get-string-n) (G4fca core-prim . get-string-all) (G4fc9 core-prim . get-line) (G4fc8 core-prim . get-datum) (G4fc7 core-prim . get-char) (G4fc6 core-prim . get-bytevector-some) (G4fc5 core-prim . get-bytevector-n!) (G4fc4 core-prim . get-bytevector-n) (G4fc3 core-prim . get-bytevector-all) (G4fc2 core-prim . flush-output-port) (G4fc1 core-prim . close-port) (G3027 core-prim . scheme-report-environment) (G4fc0 core-prim . quotient) (G3025 core-prim . null-environment) (G4fbf core-prim . remainder) (G4fbe core-prim . modulo) (G4fbd core-prim . inexact->exact) (G4fbc core-prim . force) (G4fbb core-prim . exact->inexact) (G4fba core-prim . make-promise) (G4fb9 core-prim . exit) (G4d0e core-prim . command-line) (G4fb8 core-prim . string-fill!) (G4fb7 core-prim . string-set!) (G4fb6 core-prim . set-cdr!) (G4fb5 core-prim . set-car!) (G4fb4 core-prim . remove) (G4fb3 core-prim . remv) (G4fb2 core-prim . remp) (G4fb1 core-prim . remq) (G4fb0 core-prim . partition) (G4faf core-prim . memv) (G4fae core-prim . memq) (G4fad core-prim . memp) (G4fac core-prim . member) (G4fab core-prim . exists) (G4faa core-prim . for-all) (G4fa9 core-prim . fold-right) (G4fa8 core-prim . fold-left) (G4fa7 core-prim . find) (G4fa6 core-prim . filter) (G4fa5 core-prim . cons*) (G4fa4 core-prim . assv) (G4fa3 core-prim . assq) (G4fa2 core-prim . assp) (G4fa1 core-prim . assoc) (G4fa0 core-prim . call-with-string-output-port) (G4f9f core-prim . call-with-port) (G4f9e core-prim . call-with-bytevector-output-port) (G4f9d core-prim . bytevector->string) (G4f9c core-prim . buffer-mode?) (G4f9b core-prim . binary-port?) (G4f9a core-prim . with-exception-handler) (G4f99 core-prim . raise-continuable) (G4f98 core-prim . raise) (G302b core-prim . eval) (G3023 core-prim . environment) (G4f97 core-prim . make-enumeration) (G4f96 core-prim . enum-set=?) (G4f95 core-prim . enum-set-universe) (G4f94 core-prim . enum-set-union) (G4f93 core-prim . enum-set-subset?) (G4f92 core-prim . enum-set-projection) (G4f91 core-prim . enum-set-member?) (G4f90 core-prim . enum-set-intersection) (G4f8f core-prim . enum-set-indexer) (G4f8e core-prim . enum-set-difference) (G4f8d core-prim . enum-set-constructor) (G4f8c core-prim . enum-set-complement) (G4f8b core-prim . enum-set->list) (G4a5a core-prim . who-condition?) (G49d4 core-prim . warning?) (G4a13 core-prim . violation?) (G4acf core-prim . undefined-violation?) (G4ab6 core-prim . syntax-violation?) (G4aba core-prim . syntax-violation-subform) (G4ab8 core-prim . syntax-violation-form) (G304b core-prim . syntax-violation) (G4f8a core-prim . simple-conditions) (G49e9 core-prim . serious-condition?) (G4a71 core-prim . non-continuable-violation?) (G49bd core-prim . message-condition?) (G4a56 core-prim . make-who-condition) (G49d2 core-prim . make-warning) (G4a11 core-prim . make-violation) (G4acd core-prim . make-undefined-violation) (G4ab0 core-prim . make-syntax-violation) (G49e7 core-prim . make-serious-condition) (G4a6f core-prim . make-non-continuable-violation) (G49b9 core-prim . make-message-condition) (G4a99 core-prim . make-lexical-violation) (G4a3c core-prim . make-irritants-condition) (G4a84 core-prim . make-implementation-restriction-violation) (G49fc core-prim . make-error) (G4a26 core-prim . make-assertion-violation) (G4a9b core-prim . lexical-violation?) (G4a40 core-prim . irritants-condition?) (G4a86 core-prim . implementation-restriction-violation?) (G49fe core-prim . error?) (G4a5c core-prim . condition-who) (G4f89 core-prim . condition-predicate) (G49bf core-prim . condition-message) (G4a42 core-prim . condition-irritants) (G4f88 core-prim . condition-accessor) (G4f87 core-prim . condition) (G4a28 core-prim . assertion-violation?) (G4f86 core-prim . condition?) (G4f85 core-prim . utf32->string) (G4f84 core-prim . utf16->string) (G4f83 core-prim . utf8->string) (G4f82 core-prim . uint-list->bytevector) (G4f81 core-prim . u8-list->bytevector) (G4f80 core-prim . string->utf8) (G4f7f core-prim . string->utf32) (G4f7e core-prim . string->utf16) (G4f7d core-prim . sint-list->bytevector) (G4f7c core-prim . native-endianness) (G4f7b core-prim . bytevector?) (G4f7a core-prim . bytevector=?) (G4f79 core-prim . bytevector-uint-set!) (G4f78 core-prim . bytevector-uint-ref) (G4f77 core-prim . bytevector-u8-set!) (G4f76 core-prim . bytevector-u8-ref) (G4f75 core-prim . bytevector-u64-set!) (G4f74 core-prim . bytevector-u64-ref) (G4f73 core-prim . bytevector-u64-native-set!) (G4f72 core-prim . bytevector-u64-native-ref) (G4f71 core-prim . bytevector-u32-set!) (G4f70 core-prim . bytevector-u32-ref) (G4f6f core-prim . bytevector-u32-native-set!) (G4f6e core-prim . bytevector-u32-native-ref) (G4f6d core-prim . bytevector-u16-set!) (G4f6c core-prim . bytevector-u16-ref) (G4f6b core-prim . bytevector-u16-native-set!) (G4f6a core-prim . bytevector-u16-native-ref) (G4f69 core-prim . bytevector-sint-set!) (G4f68 core-prim . bytevector-sint-ref) (G4f67 core-prim . bytevector-s8-set!) (G4f66 core-prim . bytevector-s8-ref) (G4f65 core-prim . bytevector-s64-set!) (G4f64 core-prim . bytevector-s64-ref) (G4f63 core-prim . bytevector-s64-native-set!) (G4f62 core-prim . bytevector-s64-native-ref) (G4f61 core-prim . bytevector-s32-set!) (G4f60 core-prim . bytevector-s32-ref) (G4f5f core-prim . bytevector-s32-native-set!) (G4f5e core-prim . bytevector-s32-native-ref) (G4f5d core-prim . bytevector-s16-set!) (G4f5c core-prim . bytevector-s16-ref) (G4f5b core-prim . bytevector-s16-native-set!) (G4f5a core-prim . bytevector-s16-native-ref) (G4f59 core-prim . bytevector-length) (G4f58 core-prim . bytevector-ieee-single-ref) (G4f57 core-prim . bytevector-ieee-single-set!) (G4f56 core-prim . bytevector-ieee-single-native-set!) (G4f55 core-prim . bytevector-ieee-single-native-ref) (G4f54 core-prim . bytevector-ieee-double-set!) (G4f53 core-prim . bytevector-ieee-double-ref) (G4f52 core-prim . bytevector-ieee-double-native-set!) (G4f51 core-prim . bytevector-ieee-double-native-ref) (G4f50 core-prim . bytevector-fill!) (G4f4f core-prim . bytevector-copy!) (G4f4e core-prim . bytevector-copy) (G4f4d core-prim . bytevector->uint-list) (G4f4c core-prim . bytevector->u8-list) (G4f4b core-prim . bytevector->sint-list) (G4c09 core-prim . no-nans-violation?) (G4bf4 core-prim . no-infinities-violation?) (G4c07 core-prim . make-no-nans-violation) (G4bf2 core-prim . make-no-infinities-violation) (G4f4a core-prim . real->flonum) (G4f49 core-prim . flzero?) (G4f48 core-prim . fltruncate) (G4f47 core-prim . fltan) (G4f46 core-prim . flsqrt) (G4f45 core-prim . flsin) (G4f44 core-prim . flround) (G4f43 core-prim . flpositive?) (G4f42 core-prim . flonum?) (G4f41 core-prim . flodd?) (G4f40 core-prim . flnumerator) (G4f3f core-prim . flnegative?) (G4f3e core-prim . flnan?) (G4f3d core-prim . flmod0) (G4f3c core-prim . flmod) (G4f3b core-prim . flmin) (G4f3a core-prim . flmax) (G4f39 core-prim . fllog) (G4f38 core-prim . flinteger?) (G4f37 core-prim . flinfinite?) (G4f36 core-prim . flfloor) (G4f35 core-prim . flfinite?) (G4f34 core-prim . flexpt) (G4f33 core-prim . flexp) (G4f32 core-prim . fleven?) (G4f31 core-prim . fldiv0-and-mod0) (G4f30 core-prim . fldiv0) (G4f2f core-prim . fldiv-and-mod) (G4f2e core-prim . fldiv) (G4f2d core-prim . fldenominator) (G4f2c core-prim . flcos) (G4f2b core-prim . flceiling) (G4f2a core-prim . flatan) (G4f29 core-prim . flasin) (G4f28 core-prim . flacos) (G4f27 core-prim . flabs) (G4f26 core-prim . fl>?) (G4f25 core-prim . fl>=?) (G4f24 core-prim . fl=?) (G4f23 core-prim . fl<?) (G4f22 core-prim . fl<=?) (G4f21 core-prim . fl/) (G4f20 core-prim . fl-) (G4f1f core-prim . fl+) (G4f1e core-prim . fl*) (G4f1d core-prim . fixnum->flonum) (G4f1c core-prim . fxzero?) (G4f1b core-prim . fxxor) (G4f1a core-prim . fxrotate-bit-field) (G4f19 core-prim . fxreverse-bit-field) (G4f18 core-prim . fxpositive?) (G4f17 core-prim . fxodd?) (G4f16 core-prim . fxnot) (G4f15 core-prim . fxnegative?) (G4f14 core-prim . fxmod0) (G4f13 core-prim . fxmod) (G4f12 core-prim . fxmin) (G4f11 core-prim . fxmax) (G4f10 core-prim . fxlength) (G4f0f core-prim . fxior) (G4f0e core-prim . fxif) (G4f0d core-prim . fxfirst-bit-set) (G4f0c core-prim . fxeven?) (G4f0b core-prim . fxdiv0-and-mod0) (G4f0a core-prim . fxdiv0) (G4f09 core-prim . fxdiv-and-mod) (G4f08 core-prim . fxdiv) (G4f07 core-prim . fxcopy-bit-field) (G4f06 core-prim . fxcopy-bit) (G4f05 core-prim . fxbit-set?) (G4f04 core-prim . fxbit-field) (G4f03 core-prim . fxbit-count) (G4f02 core-prim . fxarithmetic-shift-right) (G4f01 core-prim . fxarithmetic-shift-left) (G4f00 core-prim . fxarithmetic-shift) (G4eff core-prim . fxand) (G4efe core-prim . fx>?) (G4efd core-prim . fx>=?) (G4efc core-prim . fx=?) (G4efb core-prim . fx<?) (G4efa core-prim . fx<=?) (G4ef9 core-prim . fx-/carry) (G4ef8 core-prim . fx-) (G4ef7 core-prim . fx+/carry) (G4ef6 core-prim . fx+) (G4ef5 core-prim . fx*/carry) (G4ef4 core-prim . fx*) (G4ef3 core-prim . greatest-fixnum) (G4ef2 core-prim . least-fixnum) (G4ef1 core-prim . fixnum-width) (G4ef0 core-prim . fixnum?) (G4eef core-prim . bitwise-rotate-bit-field) (G4eee core-prim . bitwise-reverse-bit-field) (G4eed core-prim . bitwise-length) (G4eec core-prim . bitwise-if) (G4eeb core-prim . bitwise-first-bit-set) (G4eea core-prim . bitwise-copy-bit-field) (G4ee9 core-prim . bitwise-copy-bit) (G4ee8 core-prim . bitwise-bit-set?) (G4ee7 core-prim . bitwise-bit-field) (G4ee6 core-prim . bitwise-bit-count) (G4ee5 core-prim . bitwise-xor) (G4ee4 core-prim . bitwise-ior) (G4ee3 core-prim . bitwise-and) (G4ee2 core-prim . bitwise-not) (G4ee1 core-prim . bitwise-arithmetic-shift-right) (G4ee0 core-prim . bitwise-arithmetic-shift-left) (G4edf core-prim . bitwise-arithmetic-shift) (G4ede core-prim . zero?) (G4edd core-prim . vector?) (G4edc core-prim . vector-set!) (G4edb core-prim . vector-ref) (G4eda core-prim . vector-map) (G4ed9 core-prim . vector-length) (G4ed8 core-prim . vector-for-each) (G4ed7 core-prim . vector-fill!) (G4ed6 core-prim . vector->list) (G4ed5 core-prim . vector) (G4ed4 core-prim . values) (G4ed3 core-prim . truncate) (G4ed2 core-prim . tan) (G4ed1 core-prim . symbol?) (G4ed0 core-prim . symbol=?) (G4ecf core-prim . symbol->string) (G4ece core-prim . substring) (G4ecd core-prim . string?) (G4ecc core-prim . string>?) (G4ecb core-prim . string>=?) (G4eca core-prim . string=?) (G4ec9 core-prim . string<?) (G4ec8 core-prim . string<=?) (G4ec7 core-prim . string-ref) (G4ec6 core-prim . string-length) (G4ec5 core-prim . string-for-each) (G4ec4 core-prim . string-copy) (G4ec3 core-prim . string-append) (G4ec2 core-prim . string->symbol) (G4ec1 core-prim . string->number) (G4ec0 core-prim . string->list) (G4ebf core-prim . string) (G4ebe core-prim . sqrt) (G4ebd core-prim . sin) (G4ebc core-prim . round) (G4ebb core-prim . reverse) (G4eba core-prim . real?) (G4eb9 core-prim . real-valued?) (G4eb8 core-prim . real-part) (G4eb7 core-prim . rationalize) (G4eb6 core-prim . rational?) (G4eb5 core-prim . rational-valued?) (G4eb4 core-prim . procedure?) (G4eb3 core-prim . positive?) (G4eb2 core-prim . pair?) (G4eb1 core-prim . odd?) (G4eb0 core-prim . numerator) (G4eaf core-prim . number?) (G4eae core-prim . number->string) (G4ead core-prim . null?) (G4eac core-prim . not) (G4eab core-prim . negative?) (G4eaa core-prim . nan?) (G4ea9 core-prim . min) (G4ea8 core-prim . max) (G4ea7 core-prim . map) (G4ea6 core-prim . make-vector) (G4ea5 core-prim . make-string) (G4ea4 core-prim . make-rectangular) (G4ea3 core-prim . make-polar) (G4ea2 core-prim . magnitude) (G4ea1 core-prim . log) (G4ea0 core-prim . list?) (G4e9f core-prim . list-tail) (G4e9e core-prim . list-ref) (G4e9d core-prim . list->vector) (G4e9c core-prim . list->string) (G4e9b core-prim . list) (G4e9a core-prim . length) (G4e99 core-prim . lcm) (G4e98 core-prim . integer?) (G4e97 core-prim . integer-valued?) (G4e96 core-prim . integer->char) (G4e95 core-prim . infinite?) (G4e94 core-prim . inexact?) (G4e93 core-prim . inexact) (G4e92 core-prim . imag-part) (G4e91 core-prim . gcd) (G4e90 core-prim . for-each) (G4e8f core-prim . floor) (G4e8e core-prim . finite?) (G4e8d core-prim . expt) (G4e8c core-prim . exp) (G4e8b core-prim . exact?) (G4e8a core-prim . exact-integer-sqrt) (G4e89 core-prim . exact) (G4e88 core-prim . even?) (G4e87 core-prim . error) (G4e86 core-prim . eqv?) (G4e85 core-prim . equal?) (G4e84 core-prim . eq?) (G4e83 core-prim . dynamic-wind) (G4e82 core-prim . div0-and-mod0) (G4e81 core-prim . mod0) (G4e80 core-prim . div0) (G4e7f core-prim . div-and-mod) (G4e7e core-prim . mod) (G4e7d core-prim . div) (G4e7c core-prim . denominator) (G4e7b core-prim . cos) (G4e7a core-prim . cons) (G4e79 core-prim . complex?) (G4e78 core-prim . char?) (G4e77 core-prim . char>?) (G4e76 core-prim . char>=?) (G4e75 core-prim . char=?) (G4e74 core-prim . char<?) (G4e73 core-prim . char<=?) (G4e72 core-prim . char->integer) (G4e71 core-prim . ceiling) (G4e70 core-prim . call-with-values) (G4e6f core-prim . call/cc) (G4e6e core-prim . call-with-current-continuation) (G4e6d core-prim . cddddr) (G4e6c core-prim . cdddar) (G4e6b core-prim . cddadr) (G4e6a core-prim . cddaar) (G4e69 core-prim . cdaddr) (G4e68 core-prim . cdadar) (G4e67 core-prim . cdaadr) (G4e66 core-prim . cdaaar) (G4e65 core-prim . cadddr) (G4e64 core-prim . caddar) (G4e63 core-prim . cadadr) (G4e62 core-prim . cadaar) (G4e61 core-prim . caaddr) (G4e60 core-prim . caadar) (G4e5f core-prim . caaadr) (G4e5e core-prim . caaaar) (G4e5d core-prim . cdddr) (G4e5c core-prim . cddar) (G4e5b core-prim . cdadr) (G4e5a core-prim . cdaar) (G4e59 core-prim . caddr) (G4e58 core-prim . cadar) (G4e57 core-prim . caadr) (G4e56 core-prim . caaar) (G4e55 core-prim . cddr) (G4e54 core-prim . cdar) (G4e53 core-prim . cadr) (G4e52 core-prim . caar) (G4e51 core-prim . cdr) (G4e50 core-prim . car) (G4e4f core-prim . boolean?) (G4e4e core-prim . boolean=?) (G4e4d core-prim . atan) (G4e4c core-prim . assertion-violation) (G4e4b core-prim . asin) (G4e4a core-prim . apply) (G4e49 core-prim . append) (G4e48 core-prim . angle) (G4e47 core-prim . acos) (G4e46 core-prim . abs) (G4e45 core-prim . /) (G4e44 core-prim . *) (G4e43 core-prim . -) (G4e42 core-prim . +) (G4e41 core-prim . >=) (G4e40 core-prim . >) (G4e3f core-prim . =) (G4e3e core-prim . <=) (G4e3d core-prim . <) (G4e3c core-prim . library) (G4e3b $core-rtd &no-nans-rtd &no-nans-rcd) (G4e3a $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e39 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e38 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e37 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e36 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e35 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e34 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e33 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e32 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e31 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e30 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e2f $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e2e $core-rtd &i/o-rtd &i/o-rcd) (G4e2d $core-rtd &undefined-rtd &undefined-rcd) (G4e2c $core-rtd &syntax-rtd &syntax-rcd) (G4e2b $core-rtd &lexical-rtd &lexical-rcd) (G4e2a $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e29 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e28 $core-rtd &who-rtd &who-rcd) (G4e27 $core-rtd &irritants-rtd &irritants-rcd) (G4e26 $core-rtd &assertion-rtd &assertion-rcd) (G4e25 $core-rtd &violation-rtd &violation-rcd) (G4e24 $core-rtd &error-rtd &error-rcd) (G4e23 $core-rtd &serious-rtd &serious-rcd) (G4e22 $core-rtd &warning-rtd &warning-rcd) (G4e21 $core-rtd &message-rtd &message-rcd) (G4e20 $core-rtd &condition-rtd &condition-rcd) (G4e1f macro . define-condition-type) (G4e1e macro . define-enumeration) (G4e1d macro . define-record-type) (G4e1c macro . parent-rtd) (G4e1b macro . nongenerative) (G4e1a macro . opaque) (G4e19 macro . sealed) (G4e18 macro . protocol) (G4e17 macro . parent) (G4e16 macro . immutable) (G4e15 macro . mutable) (G4e14 macro . fields) (G4e13 macro . error-handling-mode) (G4e12 macro . file-options) (G4e11 macro . buffer-mode) (G4e10 macro . eol-style) (G4e0f macro . guard) (G4e0e macro . trace-define) (G4e0d macro . trace-lambda) (G4e0c macro . unsyntax-splicing) (G4e0b macro . unsyntax) (G4e0a macro . unquote-splicing) (G4e09 macro . unquote) (G4e08 macro . _) (G4e07 macro . else) (G4e06 macro . =>) (G4e05 macro . ...) (G4e04 macro . assert) (G4e03 macro . endianness) (G4e02 macro . delay) (G4e01 macro . time) (G4e00 macro . do) (G4dff macro . cond) (G4dfe macro . let*) (G4dfd macro . let) (G4dfc macro . let*-values) (G4dfb macro . let-values) (G4dfa macro . identifier-syntax) (G4df9 macro . with-syntax) (G4df8 macro . quasisyntax) (G4df7 macro . quasiquote) (G4df6 macro . syntax-rules) (G4df5 macro . include) (G4df4 macro . define-struct) (G4df3 core-macro . record-constructor-descriptor) (G4df2 core-macro . record-type-descriptor) (G4df1 macro . case) (G4df0 macro . parameterize) (G4def macro . unless) (G4dee macro . when) (G4ded core-macro . or) (G4dec core-macro . and) (G4deb core-macro . if) (G4dea core-macro . letrec*) (G4de9 core-macro . letrec) (G4de8 core-macro . type-descriptor) (G4de7 core-macro . case-lambda) (G4de6 core-macro . lambda) (G4de5 core-macro . syntax) (G4de4 core-macro . syntax-case) (G4de3 core-macro . quote) (G4de2 core-macro . foreign-call) (G4de1 letrec-syntax) (G4de0 let-syntax) (G4ddf set!) (G4dde import) (G4ddd begin) (G4ddc module) (G4ddb define-syntax) (G4dda define)) values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50da '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50b9) (eval-core . G50b8) (set-symbol-value! . G50b7) (symbol-value . G50b6) (gensym . G50b5) (void . G50b4)) '() values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50db '(mosh) '() '() '() '() '((set-symbol-value! . G50b7) (symbol-value . G50b6) (ungensym . G5090) (alist->eq-hash-table . G508f) (assoc-ref . G508e) (alist-cons . G508d) (print . G508b) (format . G508a) (standard-library-path . G5089) (file-newer? . G5088) (stat-mtime . G5087) (write-to-file . G5086) (file->list . G5085) (file->string . G5084) (digit->integer . G5083) (call-with-string-input-port . G5082) (call-with-string-io . G5081) (string-split . G5080) (bytevector-for-each . G507f) (string->regexp . G507e) (rxmatch . G507d) (regexp-replace-all . G507c) (hashtable-for-each . G507b) (set-current-directory! . G5076) (expand-path . G5075) (current-directory . G5074) (get-timeofday . G5064) (get-command-line . G5063) (sys-display . G5062) (source-info . G5061) (make-compiler-instruction . G5060) (make-instruction . G505f) (set-source-info! . G505e) (bignum? . G505d) (make-complex . G505c) (fast-equal? . G505b) (fasl-read . G505a) (fasl-write . G5059) (include . G4df5)) '() values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50dc '(mosh backend) '() '() '() '() '((receive . G5058)) '() values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50dd '(mosh file) '() '() '() '() '((read-line . G50b1) (file-newer? . G5088) (stat-mtime . G5087) (write-to-file . G5086) (file->list . G5085) (file->string . G5084)) '() values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50de '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G507f)) '() values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50df '(mosh number) '() '() '() '() '((digit->integer . G5083)) '() values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50e0 '(mosh string) '() '() '() '() '((print . G508b) (format . G508a) (call-with-string-input-port . G5082) (call-with-string-io . G5081) (string-split . G5080) (string->regexp . G507e)) '() values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50e1 '(mosh list) '() '() '() '() '((assoc-ref . G508e)) '() values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50e2 '(mosh regexp) '() '() '() '() '((rxmatch . G507d) (regexp-replace-all . G507c)) '() values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50e3 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G507b)) '() values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50e4 '(mosh parameters) '() '() '() '() '((make-parameter . G2833) (parameterize . G4df0)) '() values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50e5 '(system) '() '() '() '() '((call-process . G507a) (local-tz-offset . G5079) (microseconds . G5078) (readdir . G5077) (set-current-directory! . G5076) (expand-path . G5075) (current-directory . G5074) (%spawn . G5073) (%waitpid . G5072) (%ffi-supported? . G5071) (%ffi-pointer-ref . G5070) (%ffi-pointer->string . G506f) (%ffi-call->string-or-zero . G506e) (%ffi-call->void* . G506d) (%ffi-call->void . G506c) (%ffi-call->int . G506b) (%ffi-lookup . G506a) (%ffi-open . G5069) (%fork . G5068) (%pipe . G5067) (get-environment-variables . G5066) (get-environment-variable . G5065)) '() values values '#f '#f '#f '#f) (G2b77@G2a1c@install-library 'G50e6 '(srfi :1) '() '() '() '() '((dotted-list? . G50b0) (circular-list? . G50af) (proper-list? . G50ae) (circular-list . G50ad) (last . G50ac) (last-pair . G50ab) (not-pair? . G50aa) (split-at! . G50a9) (split-at . G50a8) (list= . G50a7) (list-copy . G50a6) (list-tabulate . G50a5) (make-list . G50a4) (xcons . G50a3) (tenth . G50a2) (ninth . G50a1) (eighth . G50a0) (seventh . G509f) (sixth . G509e) (fifth . G509d) (drop-right! . G509c) (drop-right . G509b) (take-right . G509a) (take! . G5099) (drop . G5098) (take . G5097) (car+cdr . G5096) (third . G5095) (second . G5094) (first . G5093) (iota . G5092) (every . G5091) (alist-cons . G508d) (append-map . G508c)) '() values values '#f '#f '#f '#f))
((lambda (G4d03@add-library-path! G4d05@parse-and-add-library-path G4d07@for-each-with-index G4d09@conditioon-printer G4d0b@repl G4d0d@trace-printer G4d0f@command-line G4d11@local-library-path G4d13@load/args G4d15@load G4d17@ironscheme-build G4d19@eval-top-level G4d1b@compile-system-libraries G4d1d@compile G4d1f@compile->closure G4d21@pre-compile-r6rs-file G4d23@load-r6rs-top-level) (begin (set! G4d03@add-library-path! (lambda (G4d3e@path) (G2b67@G29fc@library-path (append (G2b67@G29fc@library-path) (list G4d3e@path))))) (set! G4d05@parse-and-add-library-path (lambda (G4d40@paths G4d41@message) ((lambda (G4d44@t) (if G4d44@t ((lambda (G4d46@paths) (for-each (lambda (G4d48@path) (if (file-exists? G4d48@path) (G4d03@add-library-path! (expand-path G4d48@path)) (format (current-error-port) G4d41@message G4d48@path))) (reverse (string-split G4d46@paths '#\:)))) G4d44@t) (void))) G4d40@paths))) (set! G4d07@for-each-with-index (lambda (G4d4a@proc G4d4b@lst) (letrec ((G4d4e@loop (lambda (G4d50@i G4d51@lst) (if (null? G4d51@lst) (if '#f '#f (void)) (begin (G4d4a@proc G4d50@i (car G4d51@lst)) (G4d4e@loop (+ G4d50@i '1) (cdr G4d51@lst))))))) (G4d4e@loop '1 G4d4b@lst)))) (set! G4d09@conditioon-printer (lambda (G4d54@e G4d55@port) ((lambda (G4d59@ref) (begin (set! G4d59@ref (lambda (G4d68@rtd G4d69@i G4d6a@x) ((lambda (G4d6e@val) (if (symbol? G4d6e@val) (ungensym G4d6e@val) G4d6e@val)) ((record-accessor G4d68@rtd G4d69@i) G4d6a@x)))) (begin (display '" Condition components:\n" G4d55@port) (G4d07@for-each-with-index (lambda (G4d5a@i G4d5b@x) ((lambda (G4d5e@rtd) (begin (format G4d55@port '"   ~d. ~a" G4d5a@i (record-type-name G4d5e@rtd)) ((lambda (G4d60@v) ((lambda (G4d62@t) (if (memv G4d62@t '(0)) (newline G4d55@port) (if (memv G4d62@t '(1)) (begin (display '": " G4d55@port) (write (G4d59@ref G4d5e@rtd '0 G4d5b@x) G4d55@port) (newline G4d55@port)) (begin (display '":\n" G4d55@port) ((letrec ((G4d64@f (lambda (G4d66@i) (if (not (= G4d66@i (vector-length G4d60@v))) (begin (display '"       " G4d55@port) (display (vector-ref G4d60@v G4d66@i) G4d55@port) (display '": " G4d55@port) (write (G4d59@ref G4d5e@rtd G4d66@i G4d5b@x) G4d55@port) (newline G4d55@port) (G4d64@f (+ G4d66@i '1))) (void))))) G4d64@f) '0))))) (vector-length G4d60@v))) (record-type-field-names G4d5e@rtd)))) (record-rtd G4d5b@x))) (simple-conditions G4d54@e))))) '#f))) (set! G4d0b@repl (lambda G4d70@x ((lambda (G4d73@rec) (begin (set! G4d73@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d76@G4d74) (lambda () (with-exception-handler (lambda (G4d78@e) ((call/cc (lambda (G4d7a@G4d75) (G4d76@G4d74 (lambda () (if '#t (begin (display '"\n" (current-error-port)) (G4d09@conditioon-printer G4d78@e (current-error-port))) (G4d7a@G4d75 (lambda () (raise-continuable G4d78@e)))))))))) (lambda () ((letrec ((G4d7c@loop (lambda (G4d7e@line G4d7f@accum) ((lambda (G4d83@parentheses-ok? G4d85@eval-string-print) (begin (set! G4d83@parentheses-ok? (lambda (G4d8a@text) ((letrec ((G4d8c@loop (lambda (G4d8e@chars G4d8f@p0 G4d90@p1) (if (null? G4d8e@chars) (= '0 G4d8f@p0 G4d90@p1) ((lambda (G4d94@t) (if (memv G4d94@t '(#\()) (G4d8c@loop (cdr G4d8e@chars) (+ G4d8f@p0 '1) G4d90@p1) (if (memv G4d94@t '(#\))) (G4d8c@loop (cdr G4d8e@chars) (- G4d8f@p0 '1) G4d90@p1) (if (memv G4d94@t '(#\[)) (G4d8c@loop (cdr G4d8e@chars) G4d8f@p0 (+ G4d90@p1 '1)) (if (memv G4d94@t '(#\])) (G4d8c@loop (cdr G4d8e@chars) G4d8f@p0 (- G4d90@p1 '1)) (G4d8c@loop (cdr G4d8e@chars) G4d8f@p0 G4d90@p1)))))) (car G4d8e@chars)))))) G4d8c@loop) (string->list G4d8a@text) '0 '0))) (set! G4d85@eval-string-print (lambda (G4d88@text) (if (not (or (string=? '"\n" G4d88@text) (= '0 (string-length G4d88@text)))) (write (G4d19@eval-top-level (call-with-port (open-string-input-port G4d88@text) read))) (void)))) (if (eof-object? G4d7e@line) (begin (G4d85@eval-string-print G4d7f@accum) (exit)) ((lambda (G4d86@current) (if (G4d83@parentheses-ok? G4d86@current) (G4d85@eval-string-print G4d86@current) (G4d7c@loop (get-line (current-input-port)) G4d86@current))) (string-append G4d7f@accum G4d7e@line))))) '#f '#f)))) G4d7c@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d73@rec)))) (G4d73@rec))) '#f))) (set! G4d0d@trace-printer (G28fe@G2834@make-parameter write)) (set! G4d0f@command-line (G28fe@G2834@make-parameter (get-command-line))) (set! G4d11@local-library-path (lambda (G4d96@filename) (cons (expand-path '".") (G2b67@G29fc@library-path)))) (set! G4d13@load/args (lambda (G4d98@filename . G4d9a@args) (begin (apply G4d23@load-r6rs-top-level G4d98@filename 'load G4d9a@args) (void)))) (set! G4d15@load (lambda (G4d9c@filename) (begin (apply G4d23@load-r6rs-top-level G4d9c@filename 'load (G4d0f@command-line)) (void)))) (set! G4d17@ironscheme-build (lambda () (G4d15@load '"ironscheme-buildscript.ss"))) (set! G4d19@eval-top-level (lambda (G4d9e@x) (G4939@G302c@eval G4d9e@x (G494f@G3058@interaction-environment)))) (set! G4d1b@compile-system-libraries (lambda () (G4d19@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d1d@compile (lambda (G4da0@filename) (G4d23@load-r6rs-top-level G4da0@filename 'compile))) (set! G4d1f@compile->closure (lambda (G4da2@filename) (G4d23@load-r6rs-top-level G4da2@filename 'closure))) (set! G4d21@pre-compile-r6rs-file (lambda (G4da4@filename) (G4d23@load-r6rs-top-level G4da4@filename 'compile))) (set! G4d23@load-r6rs-top-level (lambda (G4da6@filename G4da7@how . G4daa@args) ((lambda (G4dae@G4dac G4daf@G4dad) ((lambda (G4db2@swap) (dynamic-wind G4db2@swap (lambda () ((lambda (G4db4@x*) ((lambda (G4db6@t) (if (memv G4db6@t '(closure)) (G494e@G3056@pre-compile-r6rs-top-level G4db4@x*) (if (memv G4db6@t '(load)) ((lambda (G4dba@G4db8 G4dbb@G4db9) ((lambda (G4dbe@swap) (dynamic-wind G4dbe@swap (lambda () ((G494d@G3054@compile-r6rs-top-level G4db4@x*))) G4dbe@swap)) (lambda () ((lambda (G4dc0@t) (begin (G4dba@G4db8 G4dbb@G4db9) (set! G4dbb@G4db9 G4dc0@t))) (G4dba@G4db8))))) G4d0f@command-line (cons G4da6@filename (car G4daa@args))) (if (memv G4db6@t '(compile)) (begin (G494d@G3054@compile-r6rs-top-level G4db4@x*) (G2b6b@G2a04@serialize-all G28f9@G282a@serialize-library G2953@G290c@compile-core-expr)) (if '#f '#f (void)))))) G4da7@how)) (with-input-from-file G4da6@filename (lambda () ((letrec ((G4dc2@f (lambda () ((lambda (G4dc4@x) (if (eof-object? G4dc4@x) '() (cons G4dc4@x (G4dc2@f)))) (G28f1@G281a@read-annotated))))) G4dc2@f)))))) G4db2@swap)) (lambda () ((lambda (G4dc6@t) (begin (G4dae@G4dac G4daf@G4dad) (set! G4daf@G4dad G4dc6@t))) (G4dae@G4dac))))) G2b67@G29fc@library-path (G4d11@local-library-path G4da6@filename)))) (begin (set! G4dd8@G4d23@load-r6rs-top-level G4d23@load-r6rs-top-level) (set! G4dd7@G4d21@pre-compile-r6rs-file G4d21@pre-compile-r6rs-file) (set! G4dd6@G4d1f@compile->closure G4d1f@compile->closure) (set! G4dd5@G4d1d@compile G4d1d@compile) (set! G4dd4@G4d1b@compile-system-libraries G4d1b@compile-system-libraries) (set! G4dd3@G4d19@eval-top-level G4d19@eval-top-level) (set! G4dd2@G4d17@ironscheme-build G4d17@ironscheme-build) (set! G4dd1@G4d15@load G4d15@load) (set! G4dd0@G4d13@load/args G4d13@load/args) (set! G4dcf@G4d11@local-library-path G4d11@local-library-path) (set! G4dce@G4d0f@command-line G4d0f@command-line) (set! G4dcd@G4d0d@trace-printer G4d0d@trace-printer) (set! G4dcc@G4d0b@repl G4d0b@repl) (set! G4dcb@G4d09@conditioon-printer G4d09@conditioon-printer) (set! G4dca@G4d07@for-each-with-index G4d07@for-each-with-index) (set! G4dc9@G4d05@parse-and-add-library-path G4d05@parse-and-add-library-path) (set! G4dc8@G4d03@add-library-path! G4d03@add-library-path!) (G2b6c@G2a06@current-precompiled-library-loader G28fa@G282c@load-serialized-library) (set-symbol-value! 'load G4d15@load) (set-symbol-value! 'pre-compile-r6rs-file G4d21@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d19@eval-top-level) (set-symbol-value! 'int-env-syms G4930@G301a@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2952@G290a@expanded->core) (set-symbol-value! 'trace-printer G4d0d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d24@c) (condition (G4c60@G4a70@make-non-continuable-violation) (G4c56@G4a57@make-who-condition 'raise) (G4c1a@G49ba@make-message-condition '"returned from non-continuable exception") (G4c4c@G4a3d@make-irritants-condition (list G4d24@c))))) (G4d05@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4d05@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2b67@G29fc@library-path (append (G2b67@G29fc@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4d26@prefix) (G2b68@G29fe@library-extensions (G4d26@prefix '".mosh" (G2b68@G29fe@library-extensions)))) (lambda (G4d28@ext G4d29@ls) (append (map (lambda (G4d2c@x) (string-append G4d28@ext G4d2c@x)) G4d29@ls) G4d29@ls))) ((lambda (G4d2e@args G4d2f@port) ((lambda (G4d33@ref) (begin (set! G4d33@ref (lambda (G4d36@rtd G4d37@i G4d38@x) ((lambda (G4d3c@val) (if (symbol? G4d3c@val) (ungensym G4d3c@val) G4d3c@val)) ((record-accessor G4d36@rtd G4d37@i) G4d38@x)))) (with-exception-handler (lambda (G4d34@c) (G4d09@conditioon-printer G4d34@c (current-error-port))) (lambda () (if (null? G4d2e@args) (G4d0b@repl) (G4d23@load-r6rs-top-level (car G4d2e@args) 'load (cdr G4d2e@args))))))) '#f)) (G4d0f@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
