;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2871@read-annotated G2873@annotation-stripped G2875@annotation? G2877@annotation-source G2879@annotation-expression G287b@serialize-library G287d@load-serialized-library G287f@make-record-printer G2881@compile-core G2883@read-library-source-file G2885@make-parameter G291f@file-options-spec) (begin (set! G2871@read-annotated read) (set! G2873@annotation-stripped (lambda (G2920@x) (G2879@annotation-expression G2920@x))) (set! G2875@annotation? (lambda (G2922@x) (source-info G2922@x))) (set! G2877@annotation-source (lambda (G2924@x) (source-info G2924@x))) (set! G2879@annotation-expression (lambda (G2926@x) (if (pair? G2926@x) (cons (car G2926@x) (cdr G2926@x)) (display '"line:46\n")))) (set! G287b@serialize-library (lambda G2928@x (begin (display G2928@x) '#f))) (set! G287d@load-serialized-library (lambda (G292a@filename G292b@obj) ((lambda (G292e@fasl-file) (if (string=? '"./m.scm" G292a@filename) (if (file-exists? G292e@fasl-file) ((lambda (G2930@expanded2core) ((lambda (G2932@dummy2) ((lambda (G2934@code) ((lambda (G2936@dummy4) ((lambda (G2938@pivot) ((lambda (G293a@dummy) ((lambda (G293c@visit) ((lambda (G293e@dummy) ((lambda (G2940@visit-proc) ((lambda () (begin (display 'done3) (set-car! G2938@pivot G2940@visit-proc) ((lambda (G2942@pivot) ((lambda (G2944@dummy) ((lambda (G2946@invoke) ((lambda () (begin (display 'done5) (set-car! G2942@pivot (lambda () (eval-core G2946@invoke))) (format '#t '"apply code=~a\n" G2934@code) (apply G292b@obj G2934@code))))) (G2930@expanded2core (car G2942@pivot)))) (display 'done4))) (cdr G2938@pivot)) '#t)))) (lambda () (eval-core G293c@visit)))) (display 'done2))) (G2930@expanded2core (car G2938@pivot)))) (display (car G2938@pivot)))) (cddddr (cddddr G2934@code)))) (display 'mogi))) (call-with-port (open-input-file G292e@fasl-file) read))) (display 'moge))) (symbol-value 'expanded2core)) '#f) (begin (format '#t '"filename=~a obj=~a" G292a@filename G292b@obj) '#f))) (string-append G292a@filename '".fasl")))) (set! G287f@make-record-printer (lambda (G2948@name G2949@printer) (lambda G294c@x (begin (display '"record printer") (for-each display G294c@x))))) (set! G2881@compile-core (lambda G294e@x (apply error 'comile-core '"not implementated" G294e@x))) (set! G2883@read-library-source-file (lambda (G2950@file-name) (with-input-from-file G2950@file-name G2871@read-annotated))) (set! G2885@make-parameter (lambda G2960 ((lambda (G2961) (if (= G2961 '1) (apply (lambda (G2952@x) (G2885@make-parameter G2952@x (lambda (G2954@x) G2954@x))) G2960) (if (= G2961 '2) (apply (lambda (G2956@x G2957@fender) ((lambda (G295a@x) (lambda G295e ((lambda (G295f) (if (= G295f '0) (apply (lambda () G295a@x) G295e) (if (= G295f '1) (apply (lambda (G295c@v) (set! G295a@x (G2957@fender G295c@v))) G295e) (error 'apply '"invalid arg count")))) (length G295e)))) (G2957@fender G2956@x))) G2960) (error 'apply '"invalid arg count")))) (length G2960)))) (set! G291f@file-options-spec (lambda (G2962@x) G2962@x)) (begin (set! G296f@G291f@file-options-spec G291f@file-options-spec) (set! G296e@G2885@make-parameter G2885@make-parameter) (set! G296d@G2883@read-library-source-file G2883@read-library-source-file) (set! G296c@G2881@compile-core G2881@compile-core) (set! G296b@G287f@make-record-printer G287f@make-record-printer) (set! G296a@G287d@load-serialized-library G287d@load-serialized-library) (set! G2969@G287b@serialize-library G287b@serialize-library) (set! G2968@G2879@annotation-expression G2879@annotation-expression) (set! G2967@G2877@annotation-source G2877@annotation-source) (set! G2966@G2875@annotation? G2875@annotation?) (set! G2965@G2873@annotation-stripped G2873@annotation-stripped) (set! G2964@G2871@read-annotated G2871@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2974@current-primitive-locations G2976@mutable? G2978@rewriter G297a@expanded->core G297c@compile-core-expr G297e@pretty-print G2980@compile-core-expr-to-port) (begin (set! G2974@current-primitive-locations (G296e@G2885@make-parameter (lambda (G2981@x) '#f) (lambda (G2983@p) G2983@p))) (set! G2976@mutable? (lambda (G2985@x) ((lambda (G2988@simple?) (begin (set! G2988@simple? (lambda (G2989@x) ((lambda (G298b@t) (if G298b@t G298b@t ((lambda (G298d@t) (if G298d@t G298d@t ((lambda (G298f@t) (if G298f@t G298f@t ((lambda (G2991@t) (if G2991@t G2991@t ((lambda (G2993@t) (if G2993@t G2993@t ((lambda (G2995@t) (if G2995@t G2995@t (begin '#f (number? G2989@x)))) (bytevector? G2989@x)))) (string? G2989@x)))) (boolean? G2989@x)))) (symbol? G2989@x)))) (char? G2989@x)))) (null? G2989@x)))) (not (G2988@simple? G2985@x)))) '#f))) (set! G2978@rewriter (lambda (G2997@quote-hack?) ((lambda (G299a@f) (begin (set! G299a@f (lambda (G299b@x) (if (pair? G299b@x) ((lambda (G299d@t) (if (memv G299d@t '(quote)) (if (if G2997@quote-hack? (begin '#f (G2976@mutable? (cadr G299b@x))) '#f) ((lambda (G299f@g) (begin (set-symbol-value! G299f@g (cadr G299b@x)) G299f@g)) (gensym)) G299b@x) (if (memv G299d@t '(case-lambda)) (cons 'case-lambda (map (lambda (G29a1@x) (cons (car G29a1@x) (map G299a@f (cdr G29a1@x)))) (cdr G299b@x))) (if (memv G299d@t '(lambda)) (cons* 'lambda (cadr G299b@x) (map G299a@f (cddr G299b@x))) (if (memv G299d@t '(letrec)) ((lambda (G29a3@bindings G29a4@body*) ((lambda (G29a7@lhs* G29a8@rhs*) (cons* 'letrec (map list G29a7@lhs* (map G299a@f G29a8@rhs*)) (map G299a@f G29a4@body*))) (map car G29a3@bindings) (map cadr G29a3@bindings))) (cadr G299b@x) (cddr G299b@x)) (if (memv G299d@t '(letrec*)) ((lambda (G29ab@bindings G29ac@body*) ((lambda (G29af@lhs* G29b0@rhs*) (cons* 'letrec* (map list G29af@lhs* (map G299a@f G29b0@rhs*)) (map G299a@f G29ac@body*))) (map car G29ab@bindings) (map cadr G29ab@bindings))) (cadr G299b@x) (cddr G299b@x)) (if (memv G299d@t '(library-letrec*)) ((lambda (G29b3@name G29b4@x) ((lambda (G29b7@bindings G29b8@body*) ((lambda (G29bb@lhs* G29bc@lhs** G29bd@rhs*) (cons* 'library-letrec* G29b3@name (map list G29bb@lhs* G29bc@lhs** (map G299a@f G29bd@rhs*)) (map G299a@f G29b8@body*))) (map car G29b7@bindings) (map cadr G29b7@bindings) (map caddr G29b7@bindings))) (cadr G29b4@x) (cddr G29b4@x))) (cadr G299b@x) (cdr G299b@x)) (if (memv G299d@t '(begin)) (cons 'begin (map G299a@f (cdr G299b@x))) (if (memv G299d@t '(set!)) (list 'set! (cadr G299b@x) (G299a@f (caddr G299b@x))) (if (memv G299d@t '(primitive)) ((lambda (G29c1@op) ((lambda (G29c3@t) (if G29c3@t ((lambda (G29c5@loc) G29c5@loc) G29c3@t) G29c1@op)) ((G2974@current-primitive-locations) G29c1@op))) (cadr G299b@x)) (if (memv G299d@t '(define)) G299b@x (if (list? G299b@x) (map G299a@f G299b@x) (error 'rewrite '"invalid form ~s ~s" G299b@x (list? G299b@x)))))))))))))) (car G299b@x)) G299b@x))) G299a@f)) '#f))) (set! G297a@expanded->core (lambda (G29c7@x) ((G2978@rewriter '#t) G29c7@x))) (set! G297c@compile-core-expr (lambda (G29c9@x) ((G2978@rewriter '#f) G29c9@x))) (set! G297e@pretty-print write) (set! G2980@compile-core-expr-to-port (lambda (G29cb@x G29cc@p) (G297e@pretty-print ((G2978@rewriter '#f) G29cb@x) G29cc@p))) (begin (set! G29d5@G2980@compile-core-expr-to-port G2980@compile-core-expr-to-port) (set! G29d4@G297e@pretty-print G297e@pretty-print) (set! G29d3@G297c@compile-core-expr G297c@compile-core-expr) (set! G29d2@G297a@expanded->core G297a@expanded->core) (set! G29d1@G2978@rewriter G2978@rewriter) (set! G29d0@G2976@mutable? G2976@mutable?) (set! G29cf@G2974@current-primitive-locations G2974@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a2f@make-collection G2a31@current-library-collection G2a37@G2a32 G2a39@G2a34 G2a3b@G2a33 G2a40@library? G2a42@make-library G2a44@library-id G2a46@library-name G2a48@library-version G2a4a@library-imp* G2a4c@library-vis* G2a4e@library-inv* G2a50@library-subst G2a52@library-env G2a54@library-visit-state G2a56@library-invoke-state G2a58@library-visit-code G2a5a@library-invoke-code G2a5c@library-visible? G2a5e@library-source-file-name G2a60@set-library-id! G2a62@set-library-name! G2a64@set-library-version! G2a66@set-library-imp*! G2a68@set-library-vis*! G2a6a@set-library-inv*! G2a6c@set-library-subst! G2a6e@set-library-env! G2a70@set-library-visit-state! G2a72@set-library-invoke-state! G2a74@set-library-visit-code! G2a76@set-library-invoke-code! G2a78@set-library-visible?! G2a7a@set-library-source-file-name! G2a7c@rp G2a7e@find-dependencies G2a80@find-library-by G2a82@library-path G2a84@library-extensions G2a86@library-name->file-name G2a88@file-locator G2a8a@serialize-all G2a8c@current-precompiled-library-loader G2a8e@try-load-from-file G2a90@library-loader G2a92@current-library-expander G2a94@external-pending-libraries G2a96@find-external-library G2a98@find-library-by-name G2a9a@library-exists? G2a9c@find-library-by-spec/die G2a9e@label->binding-table G2aa0@install-library-record G2aa2@install-library G2aa4@imported-label->binding G2aa6@invoke-library G2aa8@visit-library G2aaa@invoke-library-by-spec G2aac@installed-libraries G2aae@library-spec) (begin (set! G2a2f@make-collection (lambda () ((lambda (G2aaf@set) ((lambda (G2ab2@set-cons) (begin (set! G2ab2@set-cons (lambda (G2ab7@x G2ab8@ls) (if (memq G2ab7@x G2ab8@ls) G2ab8@ls (cons G2ab7@x G2ab8@ls)))) (lambda G2ab5 ((lambda (G2ab6) (if (= G2ab6 '0) (apply (lambda () G2aaf@set) G2ab5) (if (= G2ab6 '1) (apply (lambda (G2ab3@x) (set! G2aaf@set (G2ab2@set-cons G2ab3@x G2aaf@set))) G2ab5) (error 'apply '"invalid arg count")))) (length G2ab5))))) '#f)) '()))) (set! G2a31@current-library-collection (G296e@G2885@make-parameter (G2a2f@make-collection) (lambda (G2abb@x) (begin (if (not (procedure? G2abb@x)) (assertion-violation 'current-library-collection '"not a procedure" G2abb@x) (void)) G2abb@x)))) (set! G2a37@G2a32 (make-record-type-descriptor 'library '#f 'G2a35 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a39@G2a34 '#f) (set! G2a3b@G2a33 (make-record-constructor-descriptor G2a37@G2a32 '#f G2a39@G2a34)) (set! G2a40@library? (record-predicate G2a37@G2a32)) (set! G2a42@make-library (record-constructor G2a3b@G2a33)) (set! G2a44@library-id (record-accessor G2a37@G2a32 '0)) (set! G2a46@library-name (record-accessor G2a37@G2a32 '1)) (set! G2a48@library-version (record-accessor G2a37@G2a32 '2)) (set! G2a4a@library-imp* (record-accessor G2a37@G2a32 '3)) (set! G2a4c@library-vis* (record-accessor G2a37@G2a32 '4)) (set! G2a4e@library-inv* (record-accessor G2a37@G2a32 '5)) (set! G2a50@library-subst (record-accessor G2a37@G2a32 '6)) (set! G2a52@library-env (record-accessor G2a37@G2a32 '7)) (set! G2a54@library-visit-state (record-accessor G2a37@G2a32 '8)) (set! G2a56@library-invoke-state (record-accessor G2a37@G2a32 '9)) (set! G2a58@library-visit-code (record-accessor G2a37@G2a32 '10)) (set! G2a5a@library-invoke-code (record-accessor G2a37@G2a32 '11)) (set! G2a5c@library-visible? (record-accessor G2a37@G2a32 '12)) (set! G2a5e@library-source-file-name (record-accessor G2a37@G2a32 '13)) (set! G2a60@set-library-id! (record-mutator G2a37@G2a32 '0)) (set! G2a62@set-library-name! (record-mutator G2a37@G2a32 '1)) (set! G2a64@set-library-version! (record-mutator G2a37@G2a32 '2)) (set! G2a66@set-library-imp*! (record-mutator G2a37@G2a32 '3)) (set! G2a68@set-library-vis*! (record-mutator G2a37@G2a32 '4)) (set! G2a6a@set-library-inv*! (record-mutator G2a37@G2a32 '5)) (set! G2a6c@set-library-subst! (record-mutator G2a37@G2a32 '6)) (set! G2a6e@set-library-env! (record-mutator G2a37@G2a32 '7)) (set! G2a70@set-library-visit-state! (record-mutator G2a37@G2a32 '8)) (set! G2a72@set-library-invoke-state! (record-mutator G2a37@G2a32 '9)) (set! G2a74@set-library-visit-code! (record-mutator G2a37@G2a32 '10)) (set! G2a76@set-library-invoke-code! (record-mutator G2a37@G2a32 '11)) (set! G2a78@set-library-visible?! (record-mutator G2a37@G2a32 '12)) (set! G2a7a@set-library-source-file-name! (record-mutator G2a37@G2a32 '13)) (set! G2a7c@rp (G296b@G287f@make-record-printer 'library (lambda (G2abd@x G2abe@p G2abf@wr) (begin (if (not (G2a40@library? G2abd@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a48@library-version G2abd@x)) (G2a46@library-name G2abd@x) (append (G2a46@library-name G2abd@x) (list (G2a48@library-version G2abd@x))))) G2abe@p))))) (set! G2a7e@find-dependencies (lambda (G2ac3@ls) (if (null? G2ac3@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2a80@find-library-by (lambda (G2ac5@pred) ((letrec ((G2ac7@f (lambda (G2ac9@ls) (if (null? G2ac9@ls) '#f (if (G2ac5@pred (car G2ac9@ls)) (car G2ac9@ls) (G2ac7@f (cdr G2ac9@ls))))))) G2ac7@f) ((G2a31@current-library-collection))))) (set! G2a82@library-path (G296e@G2885@make-parameter '(".") (lambda (G2acb@x) (if (if (list? G2acb@x) (begin '#f (for-all string? G2acb@x)) '#f) (map (lambda (G2acd@x) G2acd@x) G2acb@x) (assertion-violation 'library-path '"not a list of strings" G2acb@x))))) (set! G2a84@library-extensions (G296e@G2885@make-parameter '(".sls" ".ss" ".scm") (lambda (G2acf@x) (if (if (list? G2acf@x) (begin '#f (for-all string? G2acf@x)) '#f) (map (lambda (G2ad1@x) G2ad1@x) G2acf@x) (assertion-violation 'library-extensions '"not a list of strings" G2acf@x))))) (set! G2a86@library-name->file-name (lambda (G2ad3@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2ad7@G2ad5 G2ad8@G2ad6) ((lambda (G2adb@extract G2adc@p) ((lambda (G2ae0@display-hex) (begin (set! G2ae0@display-hex (lambda (G2aef@n) (if (<= '0 G2aef@n '9) (display G2aef@n G2adc@p) (display (integer->char (+ (char->integer '#\A) (- G2aef@n '10))) G2adc@p)))) (begin ((letrec ((G2ae1@f (lambda (G2ae3@ls) (if (not (null? G2ae3@ls)) (begin (display '"/" G2adc@p) (for-each (lambda (G2ae5@c) (if ((lambda (G2ae7@t) (if G2ae7@t G2ae7@t ((lambda (G2ae9@t) (if G2ae9@t G2ae9@t ((lambda (G2aeb@t) (if G2aeb@t G2aeb@t (begin '#f (memv G2ae5@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2ae5@c '#\9)))) (char<=? '#\A G2ae5@c '#\Z)))) (char<=? '#\a G2ae5@c '#\z)) (display G2ae5@c G2adc@p) (begin (display '"%" G2adc@p) ((lambda (G2aed@n) (begin (G2ae0@display-hex (quotient G2aed@n '16)) (G2ae0@display-hex (remainder G2aed@n '16)))) (char->integer G2ae5@c))))) (string->list (symbol->string (car G2ae3@ls)))) (G2ae1@f (cdr G2ae3@ls))) (void))))) G2ae1@f) G2ad3@x) (G2adb@extract)))) '#f)) G2ad8@G2ad6 G2ad7@G2ad5))))) (set! G2a88@file-locator (G296e@G2885@make-parameter (lambda (G2af1@x) ((lambda (G2af3@str) ((letrec ((G2af5@f (lambda (G2af7@ls G2af8@exts G2af9@failed-list) (if (null? G2af7@ls) ((lambda () ((lambda (G2b05@G2b00 G2b07@G2b02 G2b09@G2b01 G2b0e@G2aff G2b10@make-library-resolution-condition G2b12@G2afd G2b14@G2afe G2b16@library-resolution-condition? G2b18@condition-library G2b1a@condition-files) (begin (set! G2b05@G2b00 (make-record-type-descriptor '&library-resolution &condition-rtd 'G2b03 '#f '#f '#((immutable library) (immutable files)))) (set! G2b07@G2b02 '#f) (set! G2b09@G2b01 (make-record-constructor-descriptor G2b05@G2b00 &condition-rcd G2b07@G2b02)) (set! G2b0e@G2aff (record-predicate G2b05@G2b00)) (set! G2b10@make-library-resolution-condition (record-constructor G2b09@G2b01)) (set! G2b12@G2afd (record-accessor G2b05@G2b00 '0)) (set! G2b14@G2afe (record-accessor G2b05@G2b00 '1)) (set! G2b16@library-resolution-condition? (condition-predicate G2b05@G2b00)) (set! G2b18@condition-library (condition-accessor G2b05@G2b00 G2b12@G2afd)) (set! G2b1a@condition-files (condition-accessor G2b05@G2b00 G2b14@G2afe)) (raise (condition (G4bf3@G4b09@make-error) (G4c0d@G4b5f@make-who-condition 'expander) (G4bdf@G4ac9@make-message-condition '"cannot locate library in library-path") (G2b10@make-library-resolution-condition G2af1@x (reverse G2af9@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2af8@exts) (G2af5@f (cdr G2af7@ls) (G2a84@library-extensions) G2af9@failed-list) ((lambda (G2b1b@name) (if (file-exists? G2b1b@name) G2b1b@name (G2af5@f G2af7@ls (cdr G2af8@exts) (cons G2b1b@name G2af9@failed-list)))) (string-append (car G2af7@ls) G2af3@str (car G2af8@exts)))))))) G2af5@f) (G2a82@library-path) (G2a84@library-extensions) '())) (G2a86@library-name->file-name G2af1@x))) (lambda (G2b1d@f) (if (procedure? G2b1d@f) G2b1d@f (assertion-violation 'file-locator '"not a procedure" G2b1d@f))))) (set! G2a8a@serialize-all (lambda (G2b1f@serialize G2b20@compile) ((lambda (G2b24@library-desc) (begin (set! G2b24@library-desc (lambda (G2b27@x) (list (G2a44@library-id G2b27@x) (G2a46@library-name G2b27@x)))) (for-each (lambda (G2b25@x) (if (G2a5e@library-source-file-name G2b25@x) (G2b1f@serialize (G2a5e@library-source-file-name G2b25@x) (list (G2a44@library-id G2b25@x) (G2a46@library-name G2b25@x) (G2a48@library-version G2b25@x) (map G2b24@library-desc (G2a4a@library-imp* G2b25@x)) (map G2b24@library-desc (G2a4c@library-vis* G2b25@x)) (map G2b24@library-desc (G2a4e@library-inv* G2b25@x)) (G2a50@library-subst G2b25@x) (G2a52@library-env G2b25@x) (G2b20@compile (G2a58@library-visit-code G2b25@x)) (G2b20@compile (G2a5a@library-invoke-code G2b25@x)) (G2a5c@library-visible? G2b25@x))) (void))) ((G2a31@current-library-collection))))) '#f))) (set! G2a8c@current-precompiled-library-loader (G296e@G2885@make-parameter (lambda (G2b29@filename G2b2a@sk) '#f))) (set! G2a8e@try-load-from-file (lambda (G2b2d@filename) ((G2a8c@current-precompiled-library-loader) G2b2d@filename (lambda G2b53 ((lambda (G2b54) (if (= G2b54 '11) (apply (lambda (G2b2f@id G2b30@name G2b31@ver G2b32@imp* G2b33@vis* G2b34@inv* G2b35@exp-subst G2b36@exp-env G2b37@visit-proc G2b38@invoke-proc G2b39@visible?) ((letrec ((G2b45@f (lambda (G2b47@deps) (if (null? G2b47@deps) (begin (G2aa2@install-library G2b2f@id G2b30@name G2b31@ver G2b32@imp* G2b33@vis* G2b34@inv* G2b35@exp-subst G2b36@exp-env G2b37@visit-proc G2b38@invoke-proc '#f '#f G2b39@visible? '#f) '#t) ((lambda (G2b49@d) ((lambda (G2b4b@label G2b4c@dname) ((lambda (G2b4f@l) (if (if (G2a40@library? G2b4f@l) (begin '#f (eq? G2b4b@label (G2a44@library-id G2b4f@l))) '#f) (G2b45@f (cdr G2b47@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b30@name G2b4c@dname G2b2d@filename G2b4f@l G2b4b@label (G2a44@library-id G2b4f@l)) '#f))) (G2a98@find-library-by-name G2b4c@dname))) (car G2b49@d) (cadr G2b49@d))) (car G2b47@deps)))))) G2b45@f) (append G2b32@imp* G2b33@vis* G2b34@inv*))) G2b53) (if (>= G2b54 '0) (apply (lambda G2b51@others '#f) G2b53) (error 'apply '"invalid arg count")))) (length G2b53)))))) (set! G2a90@library-loader (G296e@G2885@make-parameter (lambda (G2b55@x) ((lambda (G2b57@file-name) (if (not G2b57@file-name) (assertion-violation '#f '"cannot file library" G2b55@x) ((lambda (G2b59@t) (if G2b59@t G2b59@t (begin '#f ((G2a92@current-library-expander) (G296d@G2883@read-library-source-file G2b57@file-name) G2b57@file-name (lambda (G2b5b@name) (if (not (equal? G2b5b@name G2b55@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b5f@G2b5d G2b60@G2b5e) ((lambda (G2b63@e G2b64@p) (begin (display '"expected to find library " G2b64@p) (write G2b55@x G2b64@p) (display '" in file " G2b64@p) (display G2b57@file-name G2b64@p) (display '", found " G2b64@p) (write G2b5b@name G2b64@p) (display '" instead" G2b64@p) (G2b63@e))) G2b60@G2b5e G2b5f@G2b5d)))) (void))))))) (G2a8e@try-load-from-file G2b57@file-name)))) ((G2a88@file-locator) G2b55@x))) (lambda (G2b67@f) (if (procedure? G2b67@f) G2b67@f (assertion-violation 'library-locator '"not a procedure" G2b67@f))))) (set! G2a92@current-library-expander (G296e@G2885@make-parameter (lambda (G2b69@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b6b@f) (if (procedure? G2b6b@f) G2b6b@f (assertion-violation 'library-expander '"not a procedure" G2b6b@f))))) (set! G2a94@external-pending-libraries (G296e@G2885@make-parameter '())) (set! G2a96@find-external-library (lambda (G2b6d@name) (begin (if (member G2b6d@name (G2a94@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b6d@name) (void)) ((lambda (G2b71@G2b6f@external-pending-libraries G2b72@G2b70@external-pending-libraries) ((lambda (G2b75@swap) (dynamic-wind G2b75@swap (lambda () (begin ((G2a90@library-loader) G2b6d@name) ((lambda (G2b77@t) (if G2b77@t G2b77@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b6d@name)))) (G2a80@find-library-by (lambda (G2b79@x) (equal? (G2a46@library-name G2b79@x) G2b6d@name)))))) G2b75@swap)) (lambda () ((lambda (G2b7b@t) (begin (G2b71@G2b6f@external-pending-libraries G2b72@G2b70@external-pending-libraries) (set! G2b72@G2b70@external-pending-libraries G2b7b@t))) (G2b71@G2b6f@external-pending-libraries))))) G2a94@external-pending-libraries (cons G2b6d@name (G2a94@external-pending-libraries)))))) (set! G2a98@find-library-by-name (lambda (G2b7d@name) ((lambda (G2b7f@t) (if G2b7f@t G2b7f@t (begin '#f (G2a96@find-external-library G2b7d@name)))) (G2a80@find-library-by (lambda (G2b81@x) (equal? (G2a46@library-name G2b81@x) G2b7d@name)))))) (set! G2a9a@library-exists? (lambda (G2b83@name) (if (G2a80@find-library-by (lambda (G2b85@x) (equal? (G2a46@library-name G2b85@x) G2b83@name))) (begin '#f '#t) '#f))) (set! G2a9c@find-library-by-spec/die (lambda (G2b87@spec) ((lambda (G2b89@id) ((lambda (G2b8b@t) (if G2b8b@t G2b8b@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2b87@spec)))) (G2a80@find-library-by (lambda (G2b8d@x) (eq? G2b89@id (G2a44@library-id G2b8d@x)))))) (car G2b87@spec)))) (set! G2a9e@label->binding-table (make-eq-hashtable)) (set! G2aa0@install-library-record (lambda (G2b8f@lib) (begin ((lambda (G2b91@exp-env) (for-each (lambda (G2b93@x) ((lambda (G2b95@label G2b96@binding) ((lambda (G2b99@binding) (hashtable-set! G2a9e@label->binding-table G2b95@label G2b99@binding)) ((lambda (G2b9b@t) (if (memv G2b9b@t '(global)) (cons 'global (cons G2b8f@lib (cdr G2b96@binding))) (if (memv G2b9b@t '(global-macro)) (cons 'global-macro (cons G2b8f@lib (cdr G2b96@binding))) (if (memv G2b9b@t '(global-macro!)) (cons 'global-macro! (cons G2b8f@lib (cdr G2b96@binding))) G2b96@binding)))) (car G2b96@binding)))) (car G2b93@x) (cdr G2b93@x))) G2b91@exp-env)) (G2a52@library-env G2b8f@lib)) ((G2a31@current-library-collection) G2b8f@lib)))) (set! G2aa2@install-library (lambda (G2b9d@id G2b9e@name G2b9f@ver G2ba0@imp* G2ba1@vis* G2ba2@inv* G2ba3@exp-subst G2ba4@exp-env G2ba5@visit-proc G2ba6@invoke-proc G2ba7@visit-code G2ba8@invoke-code G2ba9@visible? G2baa@source-file-name) ((lambda (G2bb9@imp-lib* G2bba@vis-lib* G2bbb@inv-lib*) (begin (if (not (if (symbol? G2b9d@id) (if (list? G2b9e@name) (begin '#f (list? G2b9f@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b9d@id G2b9e@name G2b9f@ver) (void)) (if (G2a9a@library-exists? G2b9e@name) (assertion-violation 'install-library '"library is already installed" G2b9e@name) (void)) ((lambda (G2bbf@lib) (G2aa0@install-library-record G2bbf@lib)) (G2a42@make-library G2b9d@id G2b9e@name G2b9f@ver G2bb9@imp-lib* G2bba@vis-lib* G2bbb@inv-lib* G2ba3@exp-subst G2ba4@exp-env G2ba5@visit-proc G2ba6@invoke-proc G2ba7@visit-code G2ba8@invoke-code G2ba9@visible? G2baa@source-file-name)))) (map G2a9c@find-library-by-spec/die G2ba0@imp*) (map G2a9c@find-library-by-spec/die G2ba1@vis*) (map G2a9c@find-library-by-spec/die G2ba2@inv*)))) (set! G2aa4@imported-label->binding (lambda (G2bc1@lab) (hashtable-ref G2a9e@label->binding-table G2bc1@lab '#f))) (set! G2aa6@invoke-library (lambda (G2bc3@lib) ((lambda (G2bc5@invoke) (if (procedure? G2bc5@invoke) (begin (G2a72@set-library-invoke-state! G2bc3@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2bc3@lib))) (for-each G2aa6@invoke-library (G2a4e@library-inv* G2bc3@lib)) (G2a72@set-library-invoke-state! G2bc3@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2bc3@lib))) (G2bc5@invoke) (G2a72@set-library-invoke-state! G2bc3@lib '#t)) (void))) (G2a56@library-invoke-state G2bc3@lib)))) (set! G2aa8@visit-library (lambda (G2bc7@lib) ((lambda (G2bc9@visit) (if (procedure? G2bc9@visit) (begin (G2a70@set-library-visit-state! G2bc7@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bc7@lib))) (for-each G2aa6@invoke-library (G2a4c@library-vis* G2bc7@lib)) (G2a70@set-library-visit-state! G2bc7@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bc7@lib))) (G2bc9@visit) (G2a70@set-library-visit-state! G2bc7@lib '#t)) (void))) (G2a54@library-visit-state G2bc7@lib)))) (set! G2aaa@invoke-library-by-spec (lambda (G2bcb@spec) (G2aa6@invoke-library (G2a9c@find-library-by-spec/die G2bcb@spec)))) (set! G2aac@installed-libraries (lambda G2bd5 ((lambda (G2bd6) (if (= G2bd6 '1) (apply (lambda (G2bcd@all?) ((letrec ((G2bcf@f (lambda (G2bd1@ls) (if (null? G2bd1@ls) '() (if ((lambda (G2bd3@t) (if G2bd3@t G2bd3@t (begin '#f (G2a5c@library-visible? (car G2bd1@ls))))) G2bcd@all?) (cons (car G2bd1@ls) (G2bcf@f (cdr G2bd1@ls))) (G2bcf@f (cdr G2bd1@ls))))))) G2bcf@f) ((G2a31@current-library-collection)))) G2bd5) (if (= G2bd6 '0) (apply (lambda () (G2aac@installed-libraries '#f)) G2bd5) (error 'apply '"invalid arg count")))) (length G2bd5)))) (set! G2aae@library-spec (lambda (G2bd7@x) (begin (if (not (G2a40@library? G2bd7@x)) (assertion-violation 'library-spec '"not a library" G2bd7@x) (void)) (list (G2a44@library-id G2bd7@x) (G2a46@library-name G2bd7@x) (G2a48@library-version G2bd7@x))))) (begin (set! G2c15@G2aae@library-spec G2aae@library-spec) (set! G2c14@G2aac@installed-libraries G2aac@installed-libraries) (set! G2c13@G2aaa@invoke-library-by-spec G2aaa@invoke-library-by-spec) (set! G2c12@G2aa8@visit-library G2aa8@visit-library) (set! G2c11@G2aa6@invoke-library G2aa6@invoke-library) (set! G2c10@G2aa4@imported-label->binding G2aa4@imported-label->binding) (set! G2c0f@G2aa2@install-library G2aa2@install-library) (set! G2c0e@G2aa0@install-library-record G2aa0@install-library-record) (set! G2c0d@G2a9e@label->binding-table G2a9e@label->binding-table) (set! G2c0c@G2a9c@find-library-by-spec/die G2a9c@find-library-by-spec/die) (set! G2c0b@G2a9a@library-exists? G2a9a@library-exists?) (set! G2c0a@G2a98@find-library-by-name G2a98@find-library-by-name) (set! G2c09@G2a96@find-external-library G2a96@find-external-library) (set! G2c08@G2a94@external-pending-libraries G2a94@external-pending-libraries) (set! G2c07@G2a92@current-library-expander G2a92@current-library-expander) (set! G2c06@G2a90@library-loader G2a90@library-loader) (set! G2c05@G2a8e@try-load-from-file G2a8e@try-load-from-file) (set! G2c04@G2a8c@current-precompiled-library-loader G2a8c@current-precompiled-library-loader) (set! G2c03@G2a8a@serialize-all G2a8a@serialize-all) (set! G2c02@G2a88@file-locator G2a88@file-locator) (set! G2c01@G2a86@library-name->file-name G2a86@library-name->file-name) (set! G2c00@G2a84@library-extensions G2a84@library-extensions) (set! G2bff@G2a82@library-path G2a82@library-path) (set! G2bfe@G2a80@find-library-by G2a80@find-library-by) (set! G2bfd@G2a7e@find-dependencies G2a7e@find-dependencies) (set! G2bfc@G2a7c@rp G2a7c@rp) (set! G2bfb@G2a7a@set-library-source-file-name! G2a7a@set-library-source-file-name!) (set! G2bfa@G2a78@set-library-visible?! G2a78@set-library-visible?!) (set! G2bf9@G2a76@set-library-invoke-code! G2a76@set-library-invoke-code!) (set! G2bf8@G2a74@set-library-visit-code! G2a74@set-library-visit-code!) (set! G2bf7@G2a72@set-library-invoke-state! G2a72@set-library-invoke-state!) (set! G2bf6@G2a70@set-library-visit-state! G2a70@set-library-visit-state!) (set! G2bf5@G2a6e@set-library-env! G2a6e@set-library-env!) (set! G2bf4@G2a6c@set-library-subst! G2a6c@set-library-subst!) (set! G2bf3@G2a6a@set-library-inv*! G2a6a@set-library-inv*!) (set! G2bf2@G2a68@set-library-vis*! G2a68@set-library-vis*!) (set! G2bf1@G2a66@set-library-imp*! G2a66@set-library-imp*!) (set! G2bf0@G2a64@set-library-version! G2a64@set-library-version!) (set! G2bef@G2a62@set-library-name! G2a62@set-library-name!) (set! G2bee@G2a60@set-library-id! G2a60@set-library-id!) (set! G2bed@G2a5e@library-source-file-name G2a5e@library-source-file-name) (set! G2bec@G2a5c@library-visible? G2a5c@library-visible?) (set! G2beb@G2a5a@library-invoke-code G2a5a@library-invoke-code) (set! G2bea@G2a58@library-visit-code G2a58@library-visit-code) (set! G2be9@G2a56@library-invoke-state G2a56@library-invoke-state) (set! G2be8@G2a54@library-visit-state G2a54@library-visit-state) (set! G2be7@G2a52@library-env G2a52@library-env) (set! G2be6@G2a50@library-subst G2a50@library-subst) (set! G2be5@G2a4e@library-inv* G2a4e@library-inv*) (set! G2be4@G2a4c@library-vis* G2a4c@library-vis*) (set! G2be3@G2a4a@library-imp* G2a4a@library-imp*) (set! G2be2@G2a48@library-version G2a48@library-version) (set! G2be1@G2a46@library-name G2a46@library-name) (set! G2be0@G2a44@library-id G2a44@library-id) (set! G2bdf@G2a42@make-library G2a42@make-library) (set! G2bde@G2a40@library? G2a40@library?) (set! G2bdd@G2a3b@G2a33 G2a3b@G2a33) (set! G2bdc@G2a39@G2a34 G2a39@G2a34) (set! G2bdb@G2a37@G2a32 G2a37@G2a32) (set! G2bda@G2a31@current-library-collection G2a31@current-library-collection) (set! G2bd9@G2a2f@make-collection G2a2f@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2c18@build-global-define G2c9c@build-lambda G2c9e@build-case-lambda G2ca0@build-let G2ce8@build-sequence G2cea@build-void G2cec@build-letrec G2cee@build-letrec* G2cf0@build-library-letrec* G2cf2@build-receive) (begin (set! G2c18@build-global-define (lambda (G2cf3@x) (G2cea@build-void))) (set! G2c9c@build-lambda (lambda (G2cf5@ae G2cf6@vars G2cf7@exp) (list 'lambda G2cf6@vars G2cf7@exp))) (set! G2c9e@build-case-lambda (lambda (G2cfb@ae G2cfc@vars* G2cfd@exp*) ((lambda (G2d02@build-error G2d04@build-pred G2d06@build-apply G2d08@expand-case-lambda) (begin (set! G2d02@build-error (lambda (G2d37@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2d04@build-pred (lambda (G2d21@ae G2d22@n G2d23@vars) (call-with-values (lambda () ((letrec ((G2d29@f (lambda (G2d2b@vars G2d2c@count) (if (pair? G2d2b@vars) (G2d29@f (cdr G2d2b@vars) (+ G2d2c@count '1)) (if (null? G2d2b@vars) (values G2d2c@count '=) (values G2d2c@count '>=)))))) G2d29@f) G2d23@vars '0)) (lambda (G2d2f@G2d27 G2d30@G2d28) ((lambda (G2d33@pred G2d34@count) (list (list 'primitive G2d33@pred) G2d22@n (list 'quote G2d34@count))) G2d30@G2d28 G2d2f@G2d27))))) (set! G2d06@build-apply (lambda (G2d19@ae G2d1a@g G2d1b@vars G2d1c@exp) (list '(primitive apply) (G2c9c@build-lambda G2d19@ae G2d1b@vars G2d1c@exp) G2d1a@g))) (set! G2d08@expand-case-lambda (lambda (G2d09@ae G2d0a@vars G2d0b@exp*) ((lambda (G2d0f@g G2d10@n) (list 'lambda G2d0f@g (G2ca0@build-let G2d09@ae (list G2d10@n) (list (list '(primitive length) G2d0f@g)) ((letrec ((G2d13@f (lambda (G2d15@vars* G2d16@exp*) (if (null? G2d15@vars*) (G2d02@build-error G2d09@ae) (list 'if (G2d04@build-pred G2d09@ae G2d10@n (car G2d15@vars*)) (G2d06@build-apply G2d09@ae G2d0f@g (car G2d15@vars*) (car G2d16@exp*)) (G2d13@f (cdr G2d15@vars*) (cdr G2d16@exp*))))))) G2d13@f) G2cfc@vars* G2d0b@exp*)))) (gensym) (gensym)))) (if (= (length G2cfd@exp*) '1) (G2c9c@build-lambda G2cfb@ae (car G2cfc@vars*) (car G2cfd@exp*)) (G2d08@expand-case-lambda G2cfb@ae G2cfc@vars* G2cfd@exp*)))) '#f '#f '#f '#f))) (set! G2ca0@build-let (lambda (G2d39@ae G2d3a@lhs* G2d3b@rhs* G2d3c@body) (cons (G2c9c@build-lambda G2d39@ae G2d3a@lhs* G2d3c@body) G2d3b@rhs*))) (set! G2ce8@build-sequence (lambda (G2d41@ae G2d42@exps) ((letrec ((G2d45@loop (lambda (G2d47@exps) (if (null? (cdr G2d47@exps)) (car G2d47@exps) (if (equal? (car G2d47@exps) (G2cea@build-void)) (G2d45@loop (cdr G2d47@exps)) (cons 'begin G2d47@exps)))))) G2d45@loop) G2d42@exps))) (set! G2cea@build-void (lambda () '((primitive void)))) (set! G2cec@build-letrec (lambda (G2d49@ae G2d4a@vars G2d4b@val-exps G2d4c@body-exp) (if (null? G2d4a@vars) G2d4c@body-exp (list 'letrec (map list G2d4a@vars G2d4b@val-exps) G2d4c@body-exp)))) (set! G2cee@build-letrec* (lambda (G2d51@ae G2d52@vars G2d53@val-exps G2d54@body-exp) (if (null? G2d52@vars) G2d54@body-exp (G2ca0@build-let G2d51@ae G2d52@vars (map (lambda (G2d59@x) (list 'quote '#f)) G2d52@vars) (G2ce8@build-sequence G2d51@ae (append (map (lambda (G2d5b@lhs G2d5c@rhs) (list 'set! G2d5b@lhs G2d5c@rhs)) G2d52@vars G2d53@val-exps) (list G2d54@body-exp))))))) (set! G2cf0@build-library-letrec* (lambda (G2d5f@ae G2d60@name G2d61@vars G2d62@locs G2d63@val-exps G2d64@body-exp) (list 'library-letrec* G2d60@name (map list G2d61@vars G2d62@locs G2d63@val-exps) G2d64@body-exp))) (set! G2cf2@build-receive (lambda (G2d6b@ae G2d6c@vars G2d6d@producer G2d6e@body*) (begin (display '"************** in ") (cons 'receive (cons G2d6c@vars (cons G2d6d@producer G2d6e@body*)))))) (begin (set! G2d7c@G2cf2@build-receive G2cf2@build-receive) (set! G2d7b@G2cf0@build-library-letrec* G2cf0@build-library-letrec*) (set! G2d7a@G2cee@build-letrec* G2cee@build-letrec*) (set! G2d79@G2cec@build-letrec G2cec@build-letrec) (set! G2d78@G2cea@build-void G2cea@build-void) (set! G2d77@G2ce8@build-sequence G2ce8@build-sequence) (set! G2d76@G2ca0@build-let G2ca0@build-let) (set! G2d75@G2c9e@build-case-lambda G2c9e@build-case-lambda) (set! G2d74@G2c9c@build-lambda G2c9c@build-lambda) (set! G2d73@G2c18@build-global-define G2c18@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2d89@set-cons G2d8b@set-union G2d90@top-mark* G2d92@top-marked? G2d94@gen-lexical G2d96@gen-global G2d98@gen-label G2d9a@gen-top-level-label G2d9c@gen-define-label+loc G2d9e@gen-define-label G2da4@G2d9f G2da6@G2da1 G2da8@G2da0 G2dad@rib? G2daf@make-rib G2db1@rib-sym* G2db3@rib-mark** G2db5@rib-label* G2db7@rib-sealed/freq G2db9@rib-cache G2dbb@set-rib-sym*! G2dbd@set-rib-mark**! G2dbf@set-rib-label*! G2dc1@set-rib-sealed/freq! G2dc3@set-rib-cache! G2dc5@make-empty-rib G2dc7@make-cache-rib G2dc9@find-label G2dcb@extend-rib! G2dcd@extend-rib/nc! G2dcf@make-rib-map G2dd1@seal-rib! G2dd3@unseal-rib! G2dd5@make-full-rib G2ddb@G2dd6 G2ddd@G2dd8 G2ddf@G2dd7 G2de4@stx? G2de6@make-stx G2de8@stx-expr G2dea@stx-mark* G2dec@stx-subst* G2dee@stx-ae* G2df0@set-stx-expr! G2df2@set-stx-mark*! G2df4@set-stx-subst*! G2df6@set-stx-ae*! G2df8@rp G2dfa@datum->stx G2dfc@gen-mark G2dfe@anti-mark G2e00@anti-mark? G2e02@join-wraps G2e04@mkstx G2e06@add-mark G2e08@add-subst G2e0a@syntax-kind? G2e0c@syntax-vector->list G2e0e@syntax-pair? G2e10@syntax-vector? G2e12@syntax-null? G2e14@syntax-list? G2e16@syntax-car G2e18@syntax-cdr G2e1a@syntax->list G2e1c@id? G2e1e@id->sym G2e20@same-marks? G2e22@bound-id=? G2e24@free-id=? G2e26@valid-bound-ids? G2e28@distinct-bound-ids? G2e2a@bound-id-member? G2e2c@self-evaluating? G2e2e@strip-annotations G2e30@strip G2e32@stx->datum G2e34@same-marks*? G2e36@id->label G2e38@id->real-label G2e3a@label->binding G2e3c@make-binding G2e3e@binding-type G2e40@binding-value G2e42@raise-unbound-error G2e44@syntax-type G2e5b@sanitize-binding G2e5d@make-variable-transformer G2e5f@variable-transformer? G2e61@variable-transformer-procedure G2e63@make-eval-transformer G2fe7@parse-define G2fe9@parse-define-syntax G2feb@scheme-stx-hashtable G2fed@scheme-stx G2fef@lexical-var G2ff1@lexical-mutable? G2ff3@set-lexical-mutable! G2ff5@add-lexical G2ff7@add-lexicals G2ff9@letrec-helper G2ffb@letrec-transformer G2ffd@letrec*-transformer G2fff@fluid-let-syntax-transformer G3001@type-descriptor-transformer G3003@record-type-descriptor-transformer G3005@record-constructor-descriptor-transformer G3007@when-macro G3009@unless-macro G300b@if-transformer G300d@case-macro G300f@quote-transformer G3011@case-lambda-transformer G3013@lambda-transformer G3015@bless G3017@with-syntax-macro G3019@invalid-fmls-error G301b@let-macro G301d@let-values-macro G301f@let*-values-macro G3021@trace-lambda-macro G3023@trace-define-macro G3025@trace-define-syntax-macro G3027@trace-let/rec-syntax G3029@trace-let-syntax-macro G302b@trace-letrec-syntax-macro G302d@guard-macro G302f@define-enumeration-macro G3031@time-macro G3033@delay-macro G3035@assert-macro G3037@endianness-macro G3039@identifier-syntax-macro G303b@do-macro G303d@let*-macro G303f@or-macro G3041@and-macro G3043@cond-macro G3045@do-include G3047@include-macro G3049@include-into-macro G304b@syntax-rules-macro G304d@quasiquote-macro G304f@quasisyntax-macro G3051@define-struct-macro G3053@define-record-type-macro G3055@define-condition-type-macro G3057@incorrect-usage-macro G3059@parameterize-macro G305b@foreign-call-transformer G305d@convert-pattern G305f@syntax-dispatch G3061@ellipsis? G3063@underscore? G3065@verify-literals G3067@syntax-case-transformer G3069@ellipsis-map G306b@syntax-transformer G306d@core-macro-transformer G306f@file-options-macro G3071@symbol-macro G3073@macro-transformer G3075@local-macro-transformer G3077@do-macro-call G3079@chi-macro G307b@chi-local-macro G307d@chi-global-macro G307f@chi-expr* G3081@chi-application G3083@chi-expr G3085@chi-set! G3087@verify-formals G3089@chi-lambda-clause G308b@chi-lambda-clause* G308d@chi-defun G308f@chi-rhs G3091@expand-interaction-rhs*/init* G3093@chi-rhs* G3095@find-bound=? G3097@find-dups G3099@chi-internal G309b@parse-module G30a1@G309c G30a3@G309e G30a5@G309d G30aa@module-interface? G30ac@make-module-interface G30ae@module-interface-first-mark G30b0@module-interface-exp-id-vec G30b2@module-interface-exp-lab-vec G30b4@set-module-interface-first-mark! G30b6@set-module-interface-exp-id-vec! G30b8@set-module-interface-exp-lab-vec! G30ba@module-interface-exp-id* G30bc@chi-internal-module G30be@chi-body* G30c0@expand-transformer G30c2@parse-exports G30c4@parse-library-name G30c6@parse-library G30c8@parse-import-spec* G30ca@make-top-rib G30cc@make-collector G30ce@inv-collector G30d0@vis-collector G30d2@imp-collector G30d4@chi-library-internal G30d6@chi-interaction-expr G30d8@library-body-expander G30da@core-library-expander G30dc@parse-top-level-program G30de@top-level-expander G30e4@G30df G30e6@G30e1 G30e8@G30e0 G30ed@env? G30ef@make-env G30f1@env-names G30f3@env-labels G30f5@env-itc G30f7@set-env-names! G30f9@set-env-labels! G30fb@set-env-itc! G30fd@rp G3103@G30fe G3105@G3100 G3107@G30ff G310c@interaction-env? G310e@make-interaction-env G3110@interaction-env-rib G3112@interaction-env-r G3114@interaction-env-locs G3116@set-interaction-env-rib! G3118@set-interaction-env-r! G311a@set-interaction-env-locs! G311c@rp G311e@interaction-environment-symbols G3120@environment-bindings G3122@parse-binding G3124@environment? G3126@environment-symbols G3128@environment G312a@null-environment G312c@scheme-report-environment G312e@expand G3130@eval G3132@library-expander G3134@boot-library-expand G3136@rev-map-append G3138@build-exports G313a@make-export-subst G313c@make-export-env/macros G313e@generate-temporaries G3140@free-identifier=? G3142@bound-identifier=? G3144@make-source-condition G3146@extract-position-condition G3148@expression-position G314a@assertion-error G314c@syntax-error G314e@extract-trace G3150@syntax-violation* G3152@syntax-violation G3154@identifier? G3156@datum->syntax G3158@syntax->datum G315a@compile-r6rs-top-level G315c@pre-compile-r6rs-top-level G315e@interaction-environment G3160@top-level-context) (begin (set! G2d89@set-cons (lambda (G3161@x G3162@ls) (if (memq G3161@x G3162@ls) G3162@ls (cons G3161@x G3162@ls)))) (set! G2d8b@set-union (lambda (G3165@ls1 G3166@ls2) (if (null? G3165@ls1) G3166@ls2 (if (memq (car G3165@ls1) G3166@ls2) (G2d8b@set-union (cdr G3165@ls1) G3166@ls2) (cons (car G3165@ls1) (G2d8b@set-union (cdr G3165@ls1) G3166@ls2)))))) (set! G2d90@top-mark* '(top)) (set! G2d92@top-marked? (lambda (G3169@m*) (memq 'top G3169@m*))) (set! G2d94@gen-lexical (lambda (G316b@sym) (if (symbol? G316b@sym) (gensym G316b@sym) (if (G2de4@stx? G316b@sym) (G2d94@gen-lexical (G2e1e@id->sym G316b@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G316b@sym))))) (set! G2d96@gen-global (lambda (G316d@x) (G2d94@gen-lexical G316d@x))) (set! G2d98@gen-label (lambda (G316f@_) (gensym))) (set! G2d9a@gen-top-level-label (lambda (G3171@id G3172@rib) ((lambda (G3176@find) (begin (set! G3176@find (lambda (G3181@sym G3182@mark* G3183@sym* G3184@mark** G3185@label*) (if (pair? G3183@sym*) (begin '#f (if (if (eq? G3181@sym (car G3183@sym*)) (begin '#f (G2e20@same-marks? G3182@mark* (car G3184@mark**))) '#f) (car G3185@label*) (G3176@find G3181@sym G3182@mark* (cdr G3183@sym*) (cdr G3184@mark**) (cdr G3185@label*)))) '#f))) ((lambda (G3177@sym G3178@mark*) ((lambda (G317b@sym*) ((lambda (G317d@t) (if G317d@t ((lambda (G317f@label) (if (G2c10@G2aa4@imported-label->binding G317f@label) (gensym) G317f@label)) G317d@t) (gensym))) (if (memq G3177@sym (G2db1@rib-sym* G3172@rib)) (begin '#f (G3176@find G3177@sym G3178@mark* G317b@sym* (G2db3@rib-mark** G3172@rib) (G2db5@rib-label* G3172@rib))) '#f))) (G2db1@rib-sym* G3172@rib))) (G2e1e@id->sym G3171@id) (G2dea@stx-mark* G3171@id)))) '#f))) (set! G2d9c@gen-define-label+loc (lambda (G318b@id G318c@rib) ((lambda (G318f@t) (if G318f@t ((lambda (G3191@env) ((lambda (G3193@label G3194@locs) (values G3193@label ((lambda (G3197@t) (if G3197@t (cdr G3197@t) ((lambda (G3199@loc) (begin (G311a@set-interaction-env-locs! G3191@env (cons (cons G3193@label G3199@loc) G3194@locs)) G3199@loc)) (G2d94@gen-lexical G318b@id)))) (assq G3193@label G3194@locs)))) (G2d9a@gen-top-level-label G318b@id G318c@rib) (G3114@interaction-env-locs G3191@env))) G318f@t) (values (gensym) (G2d94@gen-lexical G318b@id)))) (G3160@top-level-context)))) (set! G2d9e@gen-define-label (lambda (G319b@id G319c@rib) (if (G3160@top-level-context) (G2d9a@gen-top-level-label G319b@id G319c@rib) (gensym)))) (set! G2da4@G2d9f (make-record-type-descriptor 'rib '#f 'G2da2 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2da6@G2da1 '#f) (set! G2da8@G2da0 (make-record-constructor-descriptor G2da4@G2d9f '#f G2da6@G2da1)) (set! G2dad@rib? (record-predicate G2da4@G2d9f)) (set! G2daf@make-rib (record-constructor G2da8@G2da0)) (set! G2db1@rib-sym* (record-accessor G2da4@G2d9f '0)) (set! G2db3@rib-mark** (record-accessor G2da4@G2d9f '1)) (set! G2db5@rib-label* (record-accessor G2da4@G2d9f '2)) (set! G2db7@rib-sealed/freq (record-accessor G2da4@G2d9f '3)) (set! G2db9@rib-cache (record-accessor G2da4@G2d9f '4)) (set! G2dbb@set-rib-sym*! (record-mutator G2da4@G2d9f '0)) (set! G2dbd@set-rib-mark**! (record-mutator G2da4@G2d9f '1)) (set! G2dbf@set-rib-label*! (record-mutator G2da4@G2d9f '2)) (set! G2dc1@set-rib-sealed/freq! (record-mutator G2da4@G2d9f '3)) (set! G2dc3@set-rib-cache! (record-mutator G2da4@G2d9f '4)) (set! G2dc5@make-empty-rib (lambda () (G2daf@make-rib '() '() '() '#f '#f))) (set! G2dc7@make-cache-rib (lambda () (G2daf@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2dc9@find-label (lambda (G319f@rib G31a0@sym G31a1@mark*) ((lambda (G31a5@ht) (if G31a5@ht (begin '#f ((lambda (G31a7@cv) ((lambda (G31a9@t) (if G31a9@t (cdr G31a9@t) '#f)) (if G31a7@cv (begin '#f (assp (lambda (G31ab@m) (G2e20@same-marks? G31a1@mark* G31ab@m)) G31a7@cv)) '#f))) (hashtable-ref G31a5@ht G31a0@sym '#f))) '#f)) (G2db9@rib-cache G319f@rib)))) (set! G2dcb@extend-rib! (lambda (G31ad@rib G31ae@id G31af@label) ((lambda (G31b4@find) (begin (set! G31b4@find (lambda (G31c5@sym G31c6@mark* G31c7@sym* G31c8@mark** G31c9@label*) (if (pair? G31c7@sym*) (begin '#f (if (if (eq? G31c5@sym (car G31c7@sym*)) (begin '#f (G2e20@same-marks? G31c6@mark* (car G31c8@mark**))) '#f) G31c9@label* (G31b4@find G31c5@sym G31c6@mark* (cdr G31c7@sym*) (cdr G31c8@mark**) (cdr G31c9@label*)))) '#f))) (begin (if (G2db7@rib-sealed/freq G31ad@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G31ad@rib) (void)) ((lambda (G31b5@sym G31b6@mark*) ((lambda (G31b9@sym*) ((lambda (G31bb@t) (if G31bb@t ((lambda (G31bd@p) (if (not (eq? G31af@label G31bd@p)) (G3152@syntax-violation '#f '"multiple definitions of identifier" G31ae@id) (void))) G31bb@t) ((lambda (G31bf@t) (if G31bf@t ((lambda (G31c1@p) (if (not (eq? G31af@label (car G31c1@p))) (if (G3160@top-level-context) (set-car! G31c1@p G31af@label) (G3152@syntax-violation '#f '"multiple definitions of identifier" G31ae@id)) (void))) G31bf@t) (begin (if (G2db9@rib-cache G31ad@rib) (hashtable-update! (G2db9@rib-cache G31ad@rib) G31b5@sym (lambda (G31c3@e) (cons (cons G31b6@mark* G31af@label) G31c3@e)) '()) (void)) (G2dbb@set-rib-sym*! G31ad@rib (cons G31b5@sym G31b9@sym*)) (G2dbd@set-rib-mark**! G31ad@rib (cons G31b6@mark* (G2db3@rib-mark** G31ad@rib))) (G2dbf@set-rib-label*! G31ad@rib (cons G31af@label (G2db5@rib-label* G31ad@rib)))))) (if (memq G31b5@sym (G2db1@rib-sym* G31ad@rib)) (begin '#f (G31b4@find G31b5@sym G31b6@mark* G31b9@sym* (G2db3@rib-mark** G31ad@rib) (G2db5@rib-label* G31ad@rib))) '#f)))) (G2dc9@find-label G31ad@rib G31b5@sym G31b6@mark*))) (G2db1@rib-sym* G31ad@rib))) (G2e1e@id->sym G31ae@id) (G2dea@stx-mark* G31ae@id))))) '#f))) (set! G2dcd@extend-rib/nc! (lambda (G31cf@rib G31d0@id G31d1@label) ((lambda (G31d5@sym G31d6@mark*) ((lambda (G31d9@sym*) (begin (if (G2db9@rib-cache G31cf@rib) (hashtable-update! (G2db9@rib-cache G31cf@rib) G31d5@sym (lambda (G31db@e) (cons (cons G31d6@mark* G31d1@label) G31db@e)) '()) (void)) (G2dbb@set-rib-sym*! G31cf@rib (cons G31d5@sym G31d9@sym*)) (G2dbd@set-rib-mark**! G31cf@rib (cons G31d6@mark* (G2db3@rib-mark** G31cf@rib))) (G2dbf@set-rib-label*! G31cf@rib (cons G31d1@label (G2db5@rib-label* G31cf@rib))))) (G2db1@rib-sym* G31cf@rib))) (G2e1e@id->sym G31d0@id) (G2dea@stx-mark* G31d0@id)))) (set! G2dcf@make-rib-map (lambda (G31dd@sym*) ((lambda (G31df@ht) ((letrec ((G31e1@f (lambda (G31e3@i G31e4@sym*) (if (null? G31e4@sym*) G31df@ht (begin (hashtable-update! G31df@ht (car G31e4@sym*) (lambda (G31e7@x) (cons G31e3@i G31e7@x)) '()) (G31e1@f (+ G31e3@i '1) (cdr G31e4@sym*))))))) G31e1@f) '0 G31dd@sym*)) (make-eq-hashtable)))) (set! G2dd1@seal-rib! (lambda (G31e9@rib) ((lambda (G31eb@sym*) (if (not (null? G31eb@sym*)) (begin (G2dbb@set-rib-sym*! G31e9@rib (list->vector G31eb@sym*)) (G2dbd@set-rib-mark**! G31e9@rib (list->vector (G2db3@rib-mark** G31e9@rib))) (G2dbf@set-rib-label*! G31e9@rib (list->vector (G2db5@rib-label* G31e9@rib))) (G2dc1@set-rib-sealed/freq! G31e9@rib (G2dcf@make-rib-map G31eb@sym*))) (void))) (G2db1@rib-sym* G31e9@rib)))) (set! G2dd3@unseal-rib! (lambda (G31ed@rib) (if (G2db7@rib-sealed/freq G31ed@rib) (begin (G2dc1@set-rib-sealed/freq! G31ed@rib '#f) (G2dbb@set-rib-sym*! G31ed@rib (vector->list (G2db1@rib-sym* G31ed@rib))) (G2dbd@set-rib-mark**! G31ed@rib (vector->list (G2db3@rib-mark** G31ed@rib))) (G2dbf@set-rib-label*! G31ed@rib (vector->list (G2db5@rib-label* G31ed@rib)))) (void)))) (set! G2dd5@make-full-rib (lambda (G31ef@id* G31f0@label*) ((lambda (G31f3@r) (begin (G2dd1@seal-rib! G31f3@r) G31f3@r)) (G2daf@make-rib (map G2e1e@id->sym G31ef@id*) (map G2dea@stx-mark* G31ef@id*) G31f0@label* '#f '#f)))) (set! G2ddb@G2dd6 (make-record-type-descriptor 'stx '#f 'G2dd9 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2ddd@G2dd8 '#f) (set! G2ddf@G2dd7 (make-record-constructor-descriptor G2ddb@G2dd6 '#f G2ddd@G2dd8)) (set! G2de4@stx? (record-predicate G2ddb@G2dd6)) (set! G2de6@make-stx (record-constructor G2ddf@G2dd7)) (set! G2de8@stx-expr (record-accessor G2ddb@G2dd6 '0)) (set! G2dea@stx-mark* (record-accessor G2ddb@G2dd6 '1)) (set! G2dec@stx-subst* (record-accessor G2ddb@G2dd6 '2)) (set! G2dee@stx-ae* (record-accessor G2ddb@G2dd6 '3)) (set! G2df0@set-stx-expr! (record-mutator G2ddb@G2dd6 '0)) (set! G2df2@set-stx-mark*! (record-mutator G2ddb@G2dd6 '1)) (set! G2df4@set-stx-subst*! (record-mutator G2ddb@G2dd6 '2)) (set! G2df6@set-stx-ae*! (record-mutator G2ddb@G2dd6 '3)) (set! G2df8@rp (G296b@G287f@make-record-printer 'stx (lambda (G31f5@x G31f6@p G31f7@wr) (begin (display '"#<syntax " G31f6@p) (write (G2e32@stx->datum G31f5@x) G31f6@p) ((lambda (G31fb@expr) (if (G2966@G2875@annotation? G31fb@expr) ((lambda (G31fd@src) (if (pair? G31fd@src) (begin (display '" [" G31f6@p) (display (cdr G31fd@src) G31f6@p) (display '" of " G31f6@p) (display (car G31fd@src) G31f6@p) (display '"]" G31f6@p)) (void))) (G2967@G2877@annotation-source G31fb@expr)) (void))) (G2de8@stx-expr G31f5@x)) (display '">" G31f6@p))))) (set! G2dfa@datum->stx (lambda (G31ff@id G3200@datum) (G2de6@make-stx G3200@datum (G2dea@stx-mark* G31ff@id) (G2dec@stx-subst* G31ff@id) (G2dee@stx-ae* G31ff@id)))) (set! G2dfc@gen-mark (lambda () (string '#\m))) (set! G2dfe@anti-mark '#f) (set! G2e00@anti-mark? not) (set! G2e02@join-wraps (lambda (G3203@m1* G3204@s1* G3205@ae1* G3206@e) ((lambda (G320c@cancel) (begin (set! G320c@cancel (lambda (G3213@ls1 G3214@ls2) ((letrec ((G3217@f (lambda (G3219@x G321a@ls1) (if (null? G321a@ls1) (cdr G3214@ls2) (cons G3219@x (G3217@f (car G321a@ls1) (cdr G321a@ls1))))))) G3217@f) (car G3213@ls1) (cdr G3213@ls1)))) ((lambda (G320d@m2* G320e@s2* G320f@ae2*) (if (if (not (null? G3203@m1*)) (if (not (null? G320d@m2*)) (begin '#f (G2e00@anti-mark? (car G320d@m2*))) '#f) '#f) (values (G320c@cancel G3203@m1* G320d@m2*) (G320c@cancel G3204@s1* G320e@s2*) (G320c@cancel G3205@ae1* G320f@ae2*)) (values (append G3203@m1* G320d@m2*) (append G3204@s1* G320e@s2*) (append G3205@ae1* G320f@ae2*)))) (G2dea@stx-mark* G3206@e) (G2dec@stx-subst* G3206@e) (G2dee@stx-ae* G3206@e)))) '#f))) (set! G2e04@mkstx (lambda (G321d@e G321e@m* G321f@s* G3220@ae*) (if (if (G2de4@stx? G321d@e) (begin '#f (not (G2d92@top-marked? G321e@m*))) '#f) (call-with-values (lambda () (G2e02@join-wraps G321e@m* G321f@s* G3220@ae* G321d@e)) (lambda (G3228@G3225 G3229@G3226 G322a@G3227) ((lambda (G322e@ae* G322f@s* G3230@m*) (G2de6@make-stx (G2de8@stx-expr G321d@e) G3230@m* G322f@s* G322e@ae*)) G322a@G3227 G3229@G3226 G3228@G3225))) (G2de6@make-stx G321d@e G321e@m* G321f@s* G3220@ae*)))) (set! G2e06@add-mark (lambda (G3234@m G3235@e G3236@ae) (G2e04@mkstx G3235@e (list G3234@m) '(shift) (list G3236@ae)))) (set! G2e08@add-subst (lambda (G323a@subst G323b@e) (G2e04@mkstx G323b@e '() (list G323a@subst) '()))) (set! G2e0a@syntax-kind? (lambda (G323e@x G323f@p?) (if (G2de4@stx? G323e@x) (G2e0a@syntax-kind? (G2de8@stx-expr G323e@x) G323f@p?) (if (G2966@G2875@annotation? G323e@x) (G2e0a@syntax-kind? (G2968@G2879@annotation-expression G323e@x) G323f@p?) (G323f@p? G323e@x))))) (set! G2e0c@syntax-vector->list (lambda (G3242@x) (if (G2de4@stx? G3242@x) ((lambda (G3244@ls G3245@m* G3246@s* G3247@ae*) (map (lambda (G324c@x) (G2e04@mkstx G324c@x G3245@m* G3246@s* G3247@ae*)) G3244@ls)) (G2e0c@syntax-vector->list (G2de8@stx-expr G3242@x)) (G2dea@stx-mark* G3242@x) (G2dec@stx-subst* G3242@x) (G2dee@stx-ae* G3242@x)) (if (G2966@G2875@annotation? G3242@x) (G2e0c@syntax-vector->list (G2968@G2879@annotation-expression G3242@x)) (if (vector? G3242@x) (vector->list G3242@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3242@x)))))) (set! G2e0e@syntax-pair? (lambda (G324e@x) (G2e0a@syntax-kind? G324e@x pair?))) (set! G2e10@syntax-vector? (lambda (G3250@x) (G2e0a@syntax-kind? G3250@x vector?))) (set! G2e12@syntax-null? (lambda (G3252@x) (G2e0a@syntax-kind? G3252@x null?))) (set! G2e14@syntax-list? (lambda (G3254@x) ((lambda (G3256@t) (if G3256@t G3256@t (begin '#f (if (G2e0e@syntax-pair? G3254@x) (begin '#f (G2e14@syntax-list? (G2e18@syntax-cdr G3254@x))) '#f)))) (G2e12@syntax-null? G3254@x)))) (set! G2e16@syntax-car (lambda (G3258@x) (if (G2de4@stx? G3258@x) (G2e04@mkstx (G2e16@syntax-car (G2de8@stx-expr G3258@x)) (G2dea@stx-mark* G3258@x) (G2dec@stx-subst* G3258@x) (G2dee@stx-ae* G3258@x)) (if (G2966@G2875@annotation? G3258@x) (G2e16@syntax-car (G2968@G2879@annotation-expression G3258@x)) (if (pair? G3258@x) (car G3258@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3258@x)))))) (set! G2e18@syntax-cdr (lambda (G325a@x) (if (G2de4@stx? G325a@x) (G2e04@mkstx (G2e18@syntax-cdr (G2de8@stx-expr G325a@x)) (G2dea@stx-mark* G325a@x) (G2dec@stx-subst* G325a@x) (G2dee@stx-ae* G325a@x)) (if (G2966@G2875@annotation? G325a@x) (G2e18@syntax-cdr (G2968@G2879@annotation-expression G325a@x)) (if (pair? G325a@x) (cdr G325a@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G325a@x)))))) (set! G2e1a@syntax->list (lambda (G325c@x) (if (G2e0e@syntax-pair? G325c@x) (cons (G2e16@syntax-car G325c@x) (G2e1a@syntax->list (G2e18@syntax-cdr G325c@x))) (if (G2e12@syntax-null? G325c@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G325c@x))))) (set! G2e1c@id? (lambda (G325e@x) (if (G2de4@stx? G325e@x) (begin '#f ((lambda (G3260@expr) (symbol? (if (G2966@G2875@annotation? G3260@expr) (G2965@G2873@annotation-stripped G3260@expr) G3260@expr))) (G2de8@stx-expr G325e@x))) '#f))) (set! G2e1e@id->sym (lambda (G3262@x) (begin (if (not (G2de4@stx? G3262@x)) (error 'id->sym '"BUG in ikarus: not an id" G3262@x) (void)) ((lambda (G3264@expr) ((lambda (G3266@sym) (if (symbol? G3266@sym) G3266@sym (error 'id->sym '"BUG in ikarus: not an id" G3262@x))) (if (G2966@G2875@annotation? G3264@expr) (G2965@G2873@annotation-stripped G3264@expr) G3264@expr))) (G2de8@stx-expr G3262@x))))) (set! G2e20@same-marks? (lambda (G3268@x G3269@y) ((lambda (G326c@t) (if G326c@t G326c@t (begin '#f (if (pair? G3268@x) (if (pair? G3269@y) (if (eq? (car G3268@x) (car G3269@y)) (begin '#f (G2e20@same-marks? (cdr G3268@x) (cdr G3269@y))) '#f) '#f) '#f)))) (if (null? G3268@x) (begin '#f (null? G3269@y)) '#f)))) (set! G2e22@bound-id=? (lambda (G326e@x G326f@y) (if (eq? (G2e1e@id->sym G326e@x) (G2e1e@id->sym G326f@y)) (begin '#f (G2e20@same-marks? (G2dea@stx-mark* G326e@x) (G2dea@stx-mark* G326f@y))) '#f))) (set! G2e24@free-id=? (lambda (G3272@i G3273@j) ((lambda (G3276@t0 G3277@t1) (if ((lambda (G327a@t) (if G327a@t G327a@t (begin '#f G3277@t1))) G3276@t0) (eq? G3276@t0 G3277@t1) (eq? (G2e1e@id->sym G3272@i) (G2e1e@id->sym G3273@j)))) (G2e38@id->real-label G3272@i) (G2e38@id->real-label G3273@j)))) (set! G2e26@valid-bound-ids? (lambda (G327c@id*) (if (for-all G2e1c@id? G327c@id*) (begin '#f (G2e28@distinct-bound-ids? G327c@id*)) '#f))) (set! G2e28@distinct-bound-ids? (lambda (G327e@id*) ((lambda (G3280@t) (if G3280@t G3280@t (begin '#f (if (not (G2e2a@bound-id-member? (car G327e@id*) (cdr G327e@id*))) (begin '#f (G2e28@distinct-bound-ids? (cdr G327e@id*))) '#f)))) (null? G327e@id*)))) (set! G2e2a@bound-id-member? (lambda (G3282@id G3283@id*) (if (pair? G3283@id*) (begin '#f ((lambda (G3286@t) (if G3286@t G3286@t (begin '#f (G2e2a@bound-id-member? G3282@id (cdr G3283@id*))))) (G2e22@bound-id=? G3282@id (car G3283@id*)))) '#f))) (set! G2e2c@self-evaluating? (lambda (G3288@x) ((lambda (G328a@t) (if G328a@t G328a@t ((lambda (G328c@t) (if G328c@t G328c@t ((lambda (G328e@t) (if G328e@t G328e@t ((lambda (G3290@t) (if G3290@t G3290@t ((lambda (G3292@t) (if G3292@t G3292@t (begin '#f (bytevector? G3288@x)))) (regexp? G3288@x)))) (boolean? G3288@x)))) (char? G3288@x)))) (string? G3288@x)))) (number? G3288@x)))) (set! G2e2e@strip-annotations (lambda (G3294@x) (if (pair? G3294@x) (cons (G2e2e@strip-annotations (car G3294@x)) (G2e2e@strip-annotations (cdr G3294@x))) (if (vector? G3294@x) (vector-map G2e2e@strip-annotations G3294@x) (if (G2966@G2875@annotation? G3294@x) (G2965@G2873@annotation-stripped G3294@x) G3294@x))))) (set! G2e30@strip (lambda (G3296@x G3297@m*) (if (G2d92@top-marked? G3297@m*) (if ((lambda (G329a@t) (if G329a@t G329a@t ((lambda (G329c@t) (if G329c@t G329c@t (begin '#f (if (vector? G3296@x) (if (> (vector-length G3296@x) '0) (begin '#f (G2966@G2875@annotation? (vector-ref G3296@x '0))) '#f) '#f)))) (if (pair? G3296@x) (begin '#f (G2966@G2875@annotation? (car G3296@x))) '#f)))) (G2966@G2875@annotation? G3296@x)) (G2e2e@strip-annotations G3296@x) G3296@x) ((letrec ((G329e@f (lambda (G32a0@x) (if (G2de4@stx? G32a0@x) (G2e30@strip (G2de8@stx-expr G32a0@x) (G2dea@stx-mark* G32a0@x)) (if (G2966@G2875@annotation? G32a0@x) (G2965@G2873@annotation-stripped G32a0@x) (if (pair? G32a0@x) ((lambda (G32a2@a G32a3@d) (if (if (eq? G32a2@a (car G32a0@x)) (begin '#f (eq? G32a3@d (cdr G32a0@x))) '#f) G32a0@x (cons G32a2@a G32a3@d))) (G329e@f (car G32a0@x)) (G329e@f (cdr G32a0@x))) (if (vector? G32a0@x) ((lambda (G32a6@old) ((lambda (G32a8@new) (if (for-all eq? G32a6@old G32a8@new) G32a0@x (list->vector G32a8@new))) (map G329e@f G32a6@old))) (vector->list G32a0@x)) G32a0@x))))))) G329e@f) G3296@x)))) (set! G2e32@stx->datum (lambda (G32aa@x) (G2e30@strip G32aa@x '()))) (set! G2e34@same-marks*? (lambda (G32ac@mark* G32ad@mark** G32ae@si) (if (null? G32ae@si) '#f (if (G2e20@same-marks? G32ac@mark* (vector-ref G32ad@mark** (car G32ae@si))) (car G32ae@si) (G2e34@same-marks*? G32ac@mark* G32ad@mark** (cdr G32ae@si)))))) (set! G2e36@id->label (lambda (G32b2@id) ((lambda (G32b4@t) (if G32b4@t G32b4@t (begin '#f ((lambda (G32b6@t) (if G32b6@t ((lambda (G32b8@env) ((lambda (G32ba@rib) (call-with-values (lambda () (G2d9c@gen-define-label+loc G32b2@id G32ba@rib)) (lambda (G32be@G32bc G32bf@G32bd) ((lambda (G32c2@loc_ G32c3@lab) (begin (G2dcb@extend-rib! G32ba@rib G32b2@id G32c3@lab) G32c3@lab)) G32bf@G32bd G32be@G32bc)))) (G3110@interaction-env-rib G32b8@env))) G32b6@t) '#f)) (G3160@top-level-context))))) (G2e38@id->real-label G32b2@id)))) (set! G2e38@id->real-label (lambda (G32c6@id) ((lambda (G32c8@sym) ((letrec ((G32ca@search (lambda (G32cc@subst* G32cd@mark*) (if (null? G32cc@subst*) '#f (if (eq? (car G32cc@subst*) 'shift) (G32ca@search (cdr G32cc@subst*) (cdr G32cd@mark*)) ((lambda (G32d0@rib) ((lambda (G32d2@t) (if G32d2@t ((lambda (G32d4@ht) ((lambda (G32d6@si) ((lambda (G32d8@i) (if G32d8@i (vector-ref (G2db5@rib-label* G32d0@rib) G32d8@i) (G32ca@search (cdr G32cc@subst*) G32cd@mark*))) (if G32d6@si (begin '#f (G2e34@same-marks*? G32cd@mark* (G2db3@rib-mark** G32d0@rib) (reverse G32d6@si))) '#f))) (hashtable-ref G32d4@ht G32c8@sym '#f))) G32d2@t) ((lambda (G32da@t) (if G32da@t G32da@t (begin '#f ((letrec ((G32dc@f (lambda (G32de@sym* G32df@mark** G32e0@label*) (if (null? G32de@sym*) (G32ca@search (cdr G32cc@subst*) G32cd@mark*) (if (if (eq? (car G32de@sym*) G32c8@sym) (begin '#f (G2e20@same-marks? (car G32df@mark**) G32cd@mark*)) '#f) (car G32e0@label*) (G32dc@f (cdr G32de@sym*) (cdr G32df@mark**) (cdr G32e0@label*))))))) G32dc@f) (G2db1@rib-sym* G32d0@rib) (G2db3@rib-mark** G32d0@rib) (G2db5@rib-label* G32d0@rib))))) (G2dc9@find-label G32d0@rib G32c8@sym G32cd@mark*)))) (G2db7@rib-sealed/freq G32d0@rib))) (car G32cc@subst*))))))) G32ca@search) (G2dec@stx-subst* G32c6@id) (G2dea@stx-mark* G32c6@id))) (G2e1e@id->sym G32c6@id)))) (set! G2e3a@label->binding (lambda (G32e4@x G32e5@r) ((lambda (G32e8@t) (if G32e8@t ((lambda (G32ea@b) (if (if (pair? G32ea@b) (begin '#f (eq? (car G32ea@b) '$core-rtd)) '#f) (cons '$rtd (map G3015@bless (cdr G32ea@b))) (if (if (pair? G32ea@b) (begin '#f (eq? (car G32ea@b) 'global-rtd)) '#f) ((lambda (G32ec@lib G32ed@loc) (cons '$rtd (symbol-value G32ed@loc))) (cadr G32ea@b) (cddr G32ea@b)) G32ea@b))) G32e8@t) ((lambda (G32f0@t) (if G32f0@t (cdr G32f0@t) ((lambda (G32f2@t) (if G32f2@t ((lambda (G32f4@env) ((lambda (G32f6@t) (if G32f6@t ((lambda (G32f8@p) (cons* 'lexical (cdr G32f8@p) '#f)) G32f6@t) '(displaced-lexical . #f))) (assq G32e4@x (G3114@interaction-env-locs G32f4@env)))) G32f2@t) '(displaced-lexical . #f))) (G3160@top-level-context)))) (assq G32e4@x G32e5@r)))) (G2c10@G2aa4@imported-label->binding G32e4@x)))) (set! G2e3c@make-binding cons) (set! G2e3e@binding-type car) (set! G2e40@binding-value cdr) (set! G2e42@raise-unbound-error (lambda (G32fa@id) (G3150@syntax-violation* '#f '"unbound identifier" G32fa@id (G4c31@G4bd1@make-undefined-violation)))) (set! G2e44@syntax-type (lambda (G32fc@e G32fd@r) (if (G2e1c@id? G32fc@e) ((lambda (G3300@id) ((lambda (G3302@label) ((lambda (G3304@b) ((lambda (G3306@type) ((lambda () (begin (if (not G3302@label) (G2e42@raise-unbound-error G3300@id) (void)) ((lambda (G3308@t) (if (memv G3308@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G3306@type (G2e40@binding-value G3304@b) G3300@id) (values 'other '#f '#f))) G3306@type))))) (G2e3e@binding-type G3304@b))) (G2e3a@label->binding G3302@label G32fd@r))) (G2e36@id->label G3300@id))) G32fc@e) (if (G2e0e@syntax-pair? G32fc@e) ((lambda (G330a@id) (if (G2e1c@id? G330a@id) ((lambda (G330c@label) ((lambda (G330e@b) ((lambda (G3310@type) ((lambda () (begin (if (not G330c@label) (G2e42@raise-unbound-error G330a@id) (void)) ((lambda (G3312@t) (if (memv G3312@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G3310@type (G2e40@binding-value G330e@b) G330a@id) (values 'call '#f '#f))) G3310@type))))) (G2e3e@binding-type G330e@b))) (G2e3a@label->binding G330c@label G32fd@r))) (G2e36@id->label G330a@id)) (values 'call '#f '#f))) (G2e16@syntax-car G32fc@e)) ((lambda (G3314@d) (if (G2e2c@self-evaluating? G3314@d) (values 'constant G3314@d '#f) (values 'other '#f '#f))) (G2e32@stx->datum G32fc@e)))))) (set! G2e5b@sanitize-binding (lambda (G3316@x G3317@src) (if (procedure? G3316@x) (cons* 'local-macro G3316@x G3317@src) (if (if (pair? G3316@x) (if (eq? (car G3316@x) 'macro!) (begin '#f (procedure? (cdr G3316@x))) '#f) '#f) (cons* 'local-macro! (cdr G3316@x) G3317@src) (if (if (pair? G3316@x) (begin '#f (eq? (car G3316@x) '$rtd)) '#f) G3316@x (assertion-violation 'expand '"invalid transformer" G3316@x)))))) (set! G2e5d@make-variable-transformer (lambda (G331a@x) (if (procedure? G331a@x) (cons 'macro! G331a@x) (assertion-violation 'make-variable-transformer '"not a procedure" G331a@x)))) (set! G2e5f@variable-transformer? (lambda (G331c@x) (if (pair? G331c@x) (if (eq? (car G331c@x) 'macro!) (begin '#f (procedure? (cdr G331c@x))) '#f) '#f))) (set! G2e61@variable-transformer-procedure (lambda (G331e@x) (if (G2e5f@variable-transformer? G331e@x) (cdr G331e@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G331e@x)))) (set! G2e63@make-eval-transformer (lambda (G3320@x) (G2e5b@sanitize-binding (eval-core (G29d2@G297a@expanded->core G3320@x)) G3320@x))) (set! G2fe7@parse-define (lambda (G3322@x) ((lambda (G3324@t) ((lambda (G3326@ls/false) (if (if G3326@ls/false (begin '#f (apply (lambda (G3328@id G3329@fmls G332a@b G332b@b*) (G2e1c@id? G3328@id)) G3326@ls/false)) '#f) (apply (lambda (G3330@id G3331@fmls G3332@b G3333@b*) (begin (G3087@verify-formals G3331@fmls G3322@x) (values G3330@id (cons 'defun (cons G3331@fmls (cons G3332@b G3333@b*)))))) G3326@ls/false) ((lambda (G3338@t) ((lambda (G333a@ls/false) (if (if G333a@ls/false (begin '#f (apply (lambda (G333c@id G333d@val) (G2e1c@id? G333c@id)) G333a@ls/false)) '#f) (apply (lambda (G3340@id G3341@val) (values G3340@id (cons 'expr G3341@val))) G333a@ls/false) ((lambda (G3344@t) ((lambda (G3346@ls/false) (if (if G3346@ls/false (begin '#f (apply (lambda (G3348@id) (G2e1c@id? G3348@id)) G3346@ls/false)) '#f) (apply (lambda (G334a@id) (values G334a@id (cons 'expr (G3015@bless '(void))))) G3346@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3344@t))) (G305f@syntax-dispatch G3344@t '(_ any)))) G3338@t))) (G305f@syntax-dispatch G3338@t '(_ any any)))) G3324@t))) (G305f@syntax-dispatch G3324@t '(_ (any . any) any . each-any)))) G3322@x))) (set! G2fe9@parse-define-syntax (lambda (G334c@x) ((lambda (G334e@t) ((lambda (G3350@ls/false) (if (if G3350@ls/false (begin '#f (apply (lambda (G3352@id G3353@val) (G2e1c@id? G3352@id)) G3350@ls/false)) '#f) (apply (lambda (G3356@id G3357@val) (values G3356@id G3357@val)) G3350@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G334e@t))) (G305f@syntax-dispatch G334e@t '(_ any any)))) G334c@x))) (set! G2feb@scheme-stx-hashtable (make-eq-hashtable)) (set! G2fed@scheme-stx (lambda (G335a@sym) ((lambda (G335c@t) (if G335c@t G335c@t (begin '#f ((lambda (G335e@subst) ((lambda (G3360@stx) ((lambda (G3362@stx) ((lambda () (begin (hashtable-set! G2feb@scheme-stx-hashtable G335a@sym G3362@stx) G3362@stx)))) ((lambda (G3364@t) (if G3364@t ((lambda (G3366@x) ((lambda (G3368@name G3369@label) (G2e08@add-subst (G2daf@make-rib (list G3368@name) (list G2d90@top-mark*) (list G3369@label) '#f '#f) G3360@stx)) (car G3366@x) (cdr G3366@x))) G3364@t) G3360@stx)) (assq G335a@sym G335e@subst)))) (G2de6@make-stx G335a@sym G2d90@top-mark* '() '()))) (G2be6@G2a50@library-subst (G2c0a@G2a98@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G2feb@scheme-stx-hashtable G335a@sym '#f)))) (set! G2fef@lexical-var car) (set! G2ff1@lexical-mutable? cdr) (set! G2ff3@set-lexical-mutable! set-cdr!) (set! G2ff5@add-lexical (lambda (G336c@lab G336d@lex G336e@r) (cons (cons* G336c@lab 'lexical G336d@lex '#f) G336e@r))) (set! G2ff7@add-lexicals (lambda (G3372@lab* G3373@lex* G3374@r) (if (null? G3372@lab*) G3374@r (G2ff7@add-lexicals (cdr G3372@lab*) (cdr G3373@lex*) (G2ff5@add-lexical (car G3372@lab*) (car G3373@lex*) G3374@r))))) (set! G2ff9@letrec-helper (lambda (G3378@e G3379@r G337a@mr G337b@build) ((lambda (G3380@t) ((lambda (G3382@ls/false) (if G3382@ls/false (apply (lambda (G3384@lhs* G3385@rhs* G3386@b G3387@b*) (if (not (G2e26@valid-bound-ids? G3384@lhs*)) (G3019@invalid-fmls-error G3378@e G3384@lhs*) ((lambda (G338c@lex* G338d@lab*) ((lambda (G3390@rib G3391@r) ((lambda (G3394@body G3395@rhs*) (G337b@build '#f G338c@lex* G3395@rhs* G3394@body)) (G3099@chi-internal (G2e08@add-subst G3390@rib (cons G3386@b G3387@b*)) G3391@r G337a@mr) (G307f@chi-expr* (map (lambda (G3398@x) (G2e08@add-subst G3390@rib G3398@x)) G3385@rhs*) G3391@r G337a@mr))) (G2dd5@make-full-rib G3384@lhs* G338d@lab*) (G2ff7@add-lexicals G338d@lab* G338c@lex* G3379@r))) (map G2d94@gen-lexical G3384@lhs*) (map G2d98@gen-label G3384@lhs*)))) G3382@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3380@t))) (G305f@syntax-dispatch G3380@t '(_ #(each (any any)) any . each-any)))) G3378@e))) (set! G2ffb@letrec-transformer (lambda (G339a@e G339b@r G339c@mr) (G2ff9@letrec-helper G339a@e G339b@r G339c@mr G2d79@G2cec@build-letrec))) (set! G2ffd@letrec*-transformer (lambda (G33a0@e G33a1@r G33a2@mr) (G2ff9@letrec-helper G33a0@e G33a1@r G33a2@mr G2d7a@G2cee@build-letrec*))) (set! G2fff@fluid-let-syntax-transformer (lambda (G33a6@e G33a7@r G33a8@mr) ((lambda (G33ad@lookup) (begin (set! G33ad@lookup (lambda (G33c0@x) ((lambda (G33c2@t) (if G33c2@t G33c2@t (begin '#f (G3152@syntax-violation '#f '"unbound identifier" G33a6@e G33c0@x)))) (G2e36@id->label G33c0@x)))) ((lambda (G33ae@t) ((lambda (G33b0@ls/false) (if G33b0@ls/false (apply (lambda (G33b2@lhs* G33b3@rhs* G33b4@b G33b5@b*) (if (not (G2e26@valid-bound-ids? G33b2@lhs*)) (G3019@invalid-fmls-error G33a6@e G33b2@lhs*) ((lambda (G33ba@lab* G33bb@rhs*) (G3099@chi-internal (cons G33b4@b G33b5@b*) (append (map cons G33ba@lab* G33bb@rhs*) G33a7@r) (append (map cons G33ba@lab* G33bb@rhs*) G33a8@mr))) (map G33ad@lookup G33b2@lhs*) (map (lambda (G33be@x) (G2e63@make-eval-transformer (G30c0@expand-transformer G33be@x G33a8@mr))) G33b3@rhs*)))) G33b0@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G33ae@t))) (G305f@syntax-dispatch G33ae@t '(_ #(each (any any)) any . each-any)))) G33a6@e))) '#f))) (set! G3001@type-descriptor-transformer (lambda (G33c4@e G33c5@r G33c6@mr) ((lambda (G33ca@t) ((lambda (G33cc@ls/false) (if (if G33cc@ls/false (begin '#f (apply (lambda (G33ce@id) (G2e1c@id? G33ce@id)) G33cc@ls/false)) '#f) (apply (lambda (G33d0@id) ((lambda (G33d2@lab) ((lambda (G33d4@b) ((lambda (G33d6@type) ((lambda () (begin (if (not G33d2@lab) (G2e42@raise-unbound-error G33d0@id) (void)) (if (not (if (eq? G33d6@type '$rtd) (begin '#f (not (list? (G2e40@binding-value G33d4@b)))) '#f)) (G3152@syntax-violation '#f '"not a record type" G33c4@e) (void)) (list 'quote (G2e40@binding-value G33d4@b)))))) (G2e3e@binding-type G33d4@b))) (G2e3a@label->binding G33d2@lab G33c5@r))) (G2e36@id->label G33d0@id))) G33cc@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G33ca@t))) (G305f@syntax-dispatch G33ca@t '(_ any)))) G33c4@e))) (set! G3003@record-type-descriptor-transformer (lambda (G33d8@e G33d9@r G33da@mr) ((lambda (G33de@t) ((lambda (G33e0@ls/false) (if (if G33e0@ls/false (begin '#f (apply (lambda (G33e2@id) (G2e1c@id? G33e2@id)) G33e0@ls/false)) '#f) (apply (lambda (G33e4@id) ((lambda (G33e6@lab) ((lambda (G33e8@b) ((lambda (G33ea@type) ((lambda () (begin (if (not G33e6@lab) (G2e42@raise-unbound-error G33e4@id) (void)) (if (not (if (eq? G33ea@type '$rtd) (begin '#f (list? (G2e40@binding-value G33e8@b))) '#f)) (G3152@syntax-violation '#f '"not a record type" G33d8@e) (void)) (G3083@chi-expr (car (G2e40@binding-value G33e8@b)) G33d9@r G33da@mr))))) (G2e3e@binding-type G33e8@b))) (G2e3a@label->binding G33e6@lab G33d9@r))) (G2e36@id->label G33e4@id))) G33e0@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G33de@t))) (G305f@syntax-dispatch G33de@t '(_ any)))) G33d8@e))) (set! G3005@record-constructor-descriptor-transformer (lambda (G33ec@e G33ed@r G33ee@mr) ((lambda (G33f2@t) ((lambda (G33f4@ls/false) (if (if G33f4@ls/false (begin '#f (apply (lambda (G33f6@id) (G2e1c@id? G33f6@id)) G33f4@ls/false)) '#f) (apply (lambda (G33f8@id) ((lambda (G33fa@lab) ((lambda (G33fc@b) ((lambda (G33fe@type) ((lambda () (begin (if (not G33fa@lab) (G2e42@raise-unbound-error G33f8@id) (void)) (if (not (if (eq? G33fe@type '$rtd) (begin '#f (list? (G2e40@binding-value G33fc@b))) '#f)) (G3152@syntax-violation '#f '"invalid type" G33ec@e) (void)) (G3083@chi-expr (cadr (G2e40@binding-value G33fc@b)) G33ed@r G33ee@mr))))) (G2e3e@binding-type G33fc@b))) (G2e3a@label->binding G33fa@lab G33ed@r))) (G2e36@id->label G33f8@id))) G33f4@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G33f2@t))) (G305f@syntax-dispatch G33f2@t '(_ any)))) G33ec@e))) (set! G3007@when-macro (lambda (G3400@e) ((lambda (G3402@t) ((lambda (G3404@ls/false) (if G3404@ls/false (apply (lambda (G3406@test G3407@e G3408@e*) (G3015@bless (list 'if G3406@test (cons 'begin (cons G3407@e G3408@e*))))) G3404@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3402@t))) (G305f@syntax-dispatch G3402@t '(_ any any . each-any)))) G3400@e))) (set! G3009@unless-macro (lambda (G340c@e) ((lambda (G340e@t) ((lambda (G3410@ls/false) (if G3410@ls/false (apply (lambda (G3412@test G3413@e G3414@e*) (G3015@bless (list 'if (list 'not G3412@test) (cons 'begin (cons G3413@e G3414@e*))))) G3410@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G340e@t))) (G305f@syntax-dispatch G340e@t '(_ any any . each-any)))) G340c@e))) (set! G300b@if-transformer (lambda (G3418@e G3419@r G341a@mr) ((lambda (G341e@t) ((lambda (G3420@ls/false) (if G3420@ls/false (apply (lambda (G3422@e0 G3423@e1 G3424@e2) (list 'if (G3083@chi-expr G3422@e0 G3419@r G341a@mr) (G3083@chi-expr G3423@e1 G3419@r G341a@mr) (G3083@chi-expr G3424@e2 G3419@r G341a@mr))) G3420@ls/false) ((lambda (G3428@t) ((lambda (G342a@ls/false) (if G342a@ls/false (apply (lambda (G342c@e0 G342d@e1) (list 'if (G3083@chi-expr G342c@e0 G3419@r G341a@mr) (G3083@chi-expr G342d@e1 G3419@r G341a@mr) (G2d78@G2cea@build-void))) G342a@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3428@t))) (G305f@syntax-dispatch G3428@t '(_ any any)))) G341e@t))) (G305f@syntax-dispatch G341e@t '(_ any any any)))) G3418@e))) (set! G300d@case-macro (lambda (G3430@e) ((lambda (G3433@build-last G3435@build-one) (begin (set! G3433@build-last (lambda (G345a@cls) ((lambda (G345c@t) ((lambda (G345e@ls/false) (if G345e@ls/false (apply (lambda (G3460@e G3461@e*) (cons 'begin (cons G3460@e G3461@e*))) G345e@ls/false) ((lambda (G3464@t) ((lambda (G3466@ls/false) (if G3466@ls/false (apply (lambda () (G3435@build-one G345a@cls '(if #f #f))) G3466@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3464@t))) (G305f@syntax-dispatch G3464@t '_))) G345c@t))) (G305f@syntax-dispatch G345c@t '(#(scheme-id else) any . each-any)))) G345a@cls))) (set! G3435@build-one (lambda (G344c@cls G344d@k) ((lambda (G3450@t) ((lambda (G3452@ls/false) (if G3452@ls/false (apply (lambda (G3454@d* G3455@e G3456@e*) (list 'if (list 'memv 't (list 'quote G3454@d*)) (cons 'begin (cons G3455@e G3456@e*)) G344d@k)) G3452@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3450@t))) (G305f@syntax-dispatch G3450@t '(each-any any . each-any)))) G344c@cls))) ((lambda (G3436@t) ((lambda (G3438@ls/false) (if G3438@ls/false (apply (lambda (G343a@expr) (G3015@bless (cons 'let (cons (list (list 't G343a@expr)) '((if #f #f)))))) G3438@ls/false) ((lambda (G343c@t) ((lambda (G343e@ls/false) (if G343e@ls/false (apply (lambda (G3440@expr G3441@cls G3442@cls*) (G3015@bless (list 'let (list (list 't G3440@expr)) ((letrec ((G3446@f (lambda (G3448@cls G3449@cls*) (if (null? G3449@cls*) (G3433@build-last G3448@cls) (G3435@build-one G3448@cls (G3446@f (car G3449@cls*) (cdr G3449@cls*))))))) G3446@f) G3441@cls G3442@cls*)))) G343e@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G343c@t))) (G305f@syntax-dispatch G343c@t '(_ any any . each-any)))) G3436@t))) (G305f@syntax-dispatch G3436@t '(_ any)))) G3430@e))) '#f '#f))) (set! G300f@quote-transformer (lambda (G3468@e G3469@r G346a@mr) ((lambda (G346e@t) ((lambda (G3470@ls/false) (if G3470@ls/false (apply (lambda (G3472@datum) (list 'quote (G2e32@stx->datum G3472@datum))) G3470@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G346e@t))) (G305f@syntax-dispatch G346e@t '(_ any)))) G3468@e))) (set! G3011@case-lambda-transformer (lambda (G3474@e G3475@r G3476@mr) ((lambda (G347a@t) ((lambda (G347c@ls/false) (if G347c@ls/false (apply (lambda (G347e@fmls* G347f@b* G3480@b**) (call-with-values (lambda () (G308b@chi-lambda-clause* G3474@e G347e@fmls* (map cons G347f@b* G3480@b**) G3475@r G3476@mr)) (lambda (G3486@G3484 G3487@G3485) ((lambda (G348a@body* G348b@fmls*) (G2d75@G2c9e@build-case-lambda '#f G348b@fmls* G348a@body*)) G3487@G3485 G3486@G3484)))) G347c@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G347a@t))) (G305f@syntax-dispatch G347a@t '(_ . #(each (any any . each-any)))))) G3474@e))) (set! G3013@lambda-transformer (lambda (G348e@e G348f@r G3490@mr) ((lambda (G3494@t) ((lambda (G3496@ls/false) (if G3496@ls/false (apply (lambda (G3498@fmls G3499@b G349a@b*) (call-with-values (lambda () (G3089@chi-lambda-clause G348e@e G3498@fmls (cons G3499@b G349a@b*) G348f@r G3490@mr)) (lambda (G34a0@G349e G34a1@G349f) ((lambda (G34a4@body G34a5@fmls) (G2d74@G2c9c@build-lambda '#f G34a5@fmls G34a4@body)) G34a1@G349f G34a0@G349e)))) G3496@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3494@t))) (G305f@syntax-dispatch G3494@t '(_ any any . each-any)))) G348e@e))) (set! G3015@bless (lambda (G34a8@x) (G2e04@mkstx ((letrec ((G34aa@f (lambda (G34ac@x) (if (G2de4@stx? G34ac@x) G34ac@x (if (pair? G34ac@x) (cons (G34aa@f (car G34ac@x)) (G34aa@f (cdr G34ac@x))) (if (symbol? G34ac@x) (G2fed@scheme-stx G34ac@x) (if (vector? G34ac@x) (vector-map G34aa@f G34ac@x) G34ac@x))))))) G34aa@f) G34a8@x) '() '() '()))) (set! G3017@with-syntax-macro (lambda (G34ae@e) ((lambda (G34b0@t) ((lambda (G34b2@ls/false) (if G34b2@ls/false (apply (lambda (G34b4@pat* G34b5@expr* G34b6@b G34b7@b*) ((lambda (G34bc@idn*) (begin (G3087@verify-formals (map car G34bc@idn*) G34ae@e) ((lambda (G34be@t*) (G3015@bless (list 'let (map list G34be@t* G34b5@expr*) ((letrec ((G34c0@f (lambda (G34c2@pat* G34c3@t*) (if (null? G34c2@pat*) (cons 'begin (cons '#f (cons G34b6@b G34b7@b*))) (list 'syntax-case (car G34c3@t*) '() (list (car G34c2@pat*) (G34c0@f (cdr G34c2@pat*) (cdr G34c3@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G34c2@pat*)) (car G34c3@t*)))))))) G34c0@f) G34b4@pat* G34be@t*)))) (G313e@generate-temporaries G34b5@expr*)))) ((letrec ((G34c6@f (lambda (G34c8@pat*) (if (null? G34c8@pat*) '() (call-with-values (lambda () (G305d@convert-pattern (car G34c8@pat*) '())) (lambda (G34cc@G34ca G34cd@G34cb) ((lambda (G34d0@idn* G34d1@pat) (append G34d0@idn* (G34c6@f (cdr G34c8@pat*)))) G34cd@G34cb G34cc@G34ca))))))) G34c6@f) G34b4@pat*))) G34b2@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G34b0@t))) (G305f@syntax-dispatch G34b0@t '(_ #(each (any any)) any . each-any)))) G34ae@e))) (set! G3019@invalid-fmls-error (lambda (G34d4@stx G34d5@fmls) ((lambda (G34d8@t) ((lambda (G34da@ls/false) (if G34da@ls/false (apply (lambda (G34dc@id* G34dd@last) ((letrec ((G34e0@f (lambda (G34e2@id*) (if (null? G34e2@id*) (values) (if (not (G2e1c@id? (car G34e2@id*))) (G3152@syntax-violation '#f '"not an identifier" G34d4@stx (car G34e2@id*)) (begin (G34e0@f (cdr G34e2@id*)) (if (G2e2a@bound-id-member? (car G34e2@id*) (cdr G34e2@id*)) (G3152@syntax-violation '#f '"duplicate binding" G34d4@stx (car G34e2@id*)) (void)))))))) G34e0@f) (if (G2e1c@id? G34dd@last) (cons G34dd@last G34dc@id*) (if (G2e12@syntax-null? G34dd@last) G34dc@id* (G3152@syntax-violation '#f '"not an identifier" G34d4@stx G34dd@last))))) G34da@ls/false) ((lambda (G34e4@t) ((lambda (G34e6@ls/false) (if G34e6@ls/false (apply (lambda () (G3152@syntax-violation '#f '"malformed binding form" G34d4@stx G34d5@fmls)) G34e6@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G34e4@t))) (G305f@syntax-dispatch G34e4@t '_))) G34d8@t))) (G305f@syntax-dispatch G34d8@t '#(each+ any () any)))) G34d5@fmls))) (set! G301b@let-macro (lambda (G34e8@stx) ((lambda (G34ea@t) ((lambda (G34ec@ls/false) (if G34ec@ls/false (apply (lambda (G34ee@lhs* G34ef@rhs* G34f0@b G34f1@b*) (if (G2e26@valid-bound-ids? G34ee@lhs*) (G3015@bless (cons (cons 'lambda (cons G34ee@lhs* (cons G34f0@b G34f1@b*))) G34ef@rhs*)) (G3019@invalid-fmls-error G34e8@stx G34ee@lhs*))) G34ec@ls/false) ((lambda (G34f6@t) ((lambda (G34f8@ls/false) (if (if G34f8@ls/false (begin '#f (apply (lambda (G34fa@f G34fb@lhs* G34fc@rhs* G34fd@b G34fe@b*) (G2e1c@id? G34fa@f)) G34f8@ls/false)) '#f) (apply (lambda (G3504@f G3505@lhs* G3506@rhs* G3507@b G3508@b*) (if (G2e26@valid-bound-ids? G3505@lhs*) (G3015@bless (cons (list 'letrec (list (list G3504@f (cons 'lambda (cons G3505@lhs* (cons G3507@b G3508@b*))))) G3504@f) G3506@rhs*)) (G3019@invalid-fmls-error G34e8@stx G3505@lhs*))) G34f8@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G34f6@t))) (G305f@syntax-dispatch G34f6@t '(_ any #(each (any any)) any . each-any)))) G34ea@t))) (G305f@syntax-dispatch G34ea@t '(_ #(each (any any)) any . each-any)))) G34e8@stx))) (set! G301d@let-values-macro (lambda (G350e@stx) ((lambda (G3511@rename G3513@rename*) (begin (set! G3511@rename (lambda (G3573@x G3574@old* G3575@new*) (begin (if (not (G2e1c@id? G3573@x)) (G3152@syntax-violation '#f '"not an indentifier" G350e@stx G3573@x) (void)) (if (G2e2a@bound-id-member? G3573@x G3574@old*) (G3152@syntax-violation '#f '"duplicate binding" G350e@stx G3573@x) (void)) ((lambda (G3579@y) (values G3579@y (cons G3573@x G3574@old*) (cons G3579@y G3575@new*))) (gensym (G3158@syntax->datum G3573@x)))))) (set! G3513@rename* (lambda (G3561@x* G3562@old* G3563@new*) (if (null? G3561@x*) (values '() G3562@old* G3563@new*) (call-with-values (lambda () (G3511@rename (car G3561@x*) G3562@old* G3563@new*)) (lambda (G3567@x G3568@old* G3569@new*) (call-with-values (lambda () (G3513@rename* (cdr G3561@x*) G3568@old* G3569@new*)) (lambda (G356d@x* G356e@old* G356f@new*) (values (cons G3567@x G356d@x*) G356e@old* G356f@new*)))))))) ((lambda (G3514@t) ((lambda (G3516@ls/false) (if G3516@ls/false (apply (lambda (G3518@b G3519@b*) (cons* (G3015@bless 'let) '() G3518@b G3519@b*)) G3516@ls/false) ((lambda (G351c@t) ((lambda (G351e@ls/false) (if G351e@ls/false (apply (lambda (G3520@lhs* G3521@rhs* G3522@b G3523@b*) (G3015@bless ((letrec ((G3528@f (lambda (G352a@lhs* G352b@rhs* G352c@old* G352d@new*) (if (null? G352a@lhs*) (cons 'let (cons (map list G352c@old* G352d@new*) (cons G3522@b G3523@b*))) ((lambda (G3532@t) ((lambda (G3534@ls/false) (if G3534@ls/false (apply (lambda (G3536@x*) (call-with-values (lambda () (G3513@rename* G3536@x* G352c@old* G352d@new*)) (lambda (G353b@G3538 G353c@G3539 G353d@G353a) ((lambda (G3541@new* G3542@old* G3543@y*) (list 'call-with-values (list 'lambda '() (car G352b@rhs*)) (list 'lambda G3543@y* (G3528@f (cdr G352a@lhs*) (cdr G352b@rhs*) G3542@old* G3541@new*)))) G353d@G353a G353c@G3539 G353b@G3538)))) G3534@ls/false) ((lambda (G3547@t) ((lambda (G3549@ls/false) (if G3549@ls/false (apply (lambda (G354b@x* G354c@x) (call-with-values (lambda () (G3511@rename G354c@x G352c@old* G352d@new*)) (lambda (G354f@y G3550@old* G3551@new*) (call-with-values (lambda () (G3513@rename* G354b@x* G3550@old* G3551@new*)) (lambda (G3555@y* G3556@old* G3557@new*) (list 'call-with-values (list 'lambda '() (car G352b@rhs*)) (list 'lambda (append G3555@y* G354f@y) (G3528@f (cdr G352a@lhs*) (cdr G352b@rhs*) G3556@old* G3557@new*)))))))) G3549@ls/false) ((lambda (G355b@t) ((lambda (G355d@ls/false) (if G355d@ls/false (apply (lambda (G355f@others) (G3152@syntax-violation '#f '"malformed bindings" G350e@stx G355f@others)) G355d@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G355b@t))) (G305f@syntax-dispatch G355b@t 'any))) G3547@t))) (G305f@syntax-dispatch G3547@t '#(each+ any () any)))) G3532@t))) (G305f@syntax-dispatch G3532@t 'each-any))) (car G352a@lhs*)))))) G3528@f) G3520@lhs* G3521@rhs* '() '()))) G351e@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G351c@t))) (G305f@syntax-dispatch G351c@t '(_ #(each (any any)) any . each-any)))) G3514@t))) (G305f@syntax-dispatch G3514@t '(_ () any . each-any)))) G350e@stx))) '#f '#f))) (set! G301f@let*-values-macro (lambda (G357b@stx) ((lambda (G357e@check) (begin (set! G357e@check (lambda (G35ad@x*) (if (not (null? G35ad@x*)) ((lambda (G35af@x) (begin (if (not (G2e1c@id? G35af@x)) (G3152@syntax-violation '#f '"not an identifier" G357b@stx G35af@x) (void)) (G357e@check (cdr G35ad@x*)) (if (G2e2a@bound-id-member? G35af@x (cdr G35ad@x*)) (G3152@syntax-violation '#f '"duplicate identifier" G357b@stx G35af@x) (void)))) (car G35ad@x*)) (void)))) ((lambda (G357f@t) ((lambda (G3581@ls/false) (if G3581@ls/false (apply (lambda (G3583@b G3584@b*) (cons* (G3015@bless 'let) '() G3583@b G3584@b*)) G3581@ls/false) ((lambda (G3587@t) ((lambda (G3589@ls/false) (if G3589@ls/false (apply (lambda (G358b@lhs* G358c@rhs* G358d@b G358e@b*) (G3015@bless ((letrec ((G3593@f (lambda (G3595@lhs* G3596@rhs*) (if (null? G3595@lhs*) (cons 'begin (cons G358d@b G358e@b*)) ((lambda (G3599@t) ((lambda (G359b@ls/false) (if G359b@ls/false (apply (lambda (G359d@x*) (begin (G357e@check G359d@x*) (list 'call-with-values (list 'lambda '() (car G3596@rhs*)) (list 'lambda G359d@x* (G3593@f (cdr G3595@lhs*) (cdr G3596@rhs*)))))) G359b@ls/false) ((lambda (G359f@t) ((lambda (G35a1@ls/false) (if G35a1@ls/false (apply (lambda (G35a3@x* G35a4@x) (begin (G357e@check (cons G35a4@x G35a3@x*)) (list 'call-with-values (list 'lambda '() (car G3596@rhs*)) (list 'lambda (append G35a3@x* G35a4@x) (G3593@f (cdr G3595@lhs*) (cdr G3596@rhs*)))))) G35a1@ls/false) ((lambda (G35a7@t) ((lambda (G35a9@ls/false) (if G35a9@ls/false (apply (lambda (G35ab@others) (G3152@syntax-violation '#f '"malformed bindings" G357b@stx G35ab@others)) G35a9@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G35a7@t))) (G305f@syntax-dispatch G35a7@t 'any))) G359f@t))) (G305f@syntax-dispatch G359f@t '#(each+ any () any)))) G3599@t))) (G305f@syntax-dispatch G3599@t 'each-any))) (car G3595@lhs*)))))) G3593@f) G358b@lhs* G358c@rhs*))) G3589@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3587@t))) (G305f@syntax-dispatch G3587@t '(_ #(each (any any)) any . each-any)))) G357f@t))) (G305f@syntax-dispatch G357f@t '(_ () any . each-any)))) G357b@stx))) '#f))) (set! G3021@trace-lambda-macro (lambda (G35b1@stx) ((lambda (G35b3@t) ((lambda (G35b5@ls/false) (if G35b5@ls/false (apply (lambda (G35b7@who G35b8@fmls G35b9@b G35ba@b*) (if (G2e26@valid-bound-ids? G35b8@fmls) (G3015@bless (list 'make-traced-procedure (list 'quote G35b7@who) (cons 'lambda (cons G35b8@fmls (cons G35b9@b G35ba@b*))))) (G3019@invalid-fmls-error G35b1@stx G35b8@fmls))) G35b5@ls/false) ((lambda (G35bf@t) ((lambda (G35c1@ls/false) (if G35c1@ls/false (apply (lambda (G35c3@who G35c4@fmls G35c5@last G35c6@b G35c7@b*) (if (G2e26@valid-bound-ids? (cons G35c5@last G35c4@fmls)) (G3015@bless (list 'make-traced-procedure (list 'quote G35c3@who) (cons 'lambda (cons (append G35c4@fmls G35c5@last) (cons G35c6@b G35c7@b*))))) (G3019@invalid-fmls-error G35b1@stx (append G35c4@fmls G35c5@last)))) G35c1@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G35bf@t))) (G305f@syntax-dispatch G35bf@t '(_ any #(each+ any () any) any . each-any)))) G35b3@t))) (G305f@syntax-dispatch G35b3@t '(_ any each-any any . each-any)))) G35b1@stx))) (set! G3023@trace-define-macro (lambda (G35cd@stx) ((lambda (G35cf@t) ((lambda (G35d1@ls/false) (if G35d1@ls/false (apply (lambda (G35d3@who G35d4@fmls G35d5@b G35d6@b*) (if (G2e26@valid-bound-ids? G35d4@fmls) (G3015@bless (list 'define G35d3@who (list 'make-traced-procedure (list 'quote G35d3@who) (cons 'lambda (cons G35d4@fmls (cons G35d5@b G35d6@b*)))))) (G3019@invalid-fmls-error G35cd@stx G35d4@fmls))) G35d1@ls/false) ((lambda (G35db@t) ((lambda (G35dd@ls/false) (if G35dd@ls/false (apply (lambda (G35df@who G35e0@fmls G35e1@last G35e2@b G35e3@b*) (if (G2e26@valid-bound-ids? (cons G35e1@last G35e0@fmls)) (G3015@bless (list 'define G35df@who (list 'make-traced-procedure (list 'quote G35df@who) (cons 'lambda (cons (append G35e0@fmls G35e1@last) (cons G35e2@b G35e3@b*)))))) (G3019@invalid-fmls-error G35cd@stx (append G35e0@fmls G35e1@last)))) G35dd@ls/false) ((lambda (G35e9@t) ((lambda (G35eb@ls/false) (if G35eb@ls/false (apply (lambda (G35ed@who G35ee@expr) (if (G2e1c@id? G35ed@who) (G3015@bless (list 'define G35ed@who (list 'let (list (list 'v G35ee@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G35ed@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3152@syntax-violation '#f '"invalid name" G35cd@stx))) G35eb@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G35e9@t))) (G305f@syntax-dispatch G35e9@t '(_ any any)))) G35db@t))) (G305f@syntax-dispatch G35db@t '(_ (any . #(each+ any () any)) any . each-any)))) G35cf@t))) (G305f@syntax-dispatch G35cf@t '(_ (any . each-any) any . each-any)))) G35cd@stx))) (set! G3025@trace-define-syntax-macro (lambda (G35f1@stx) ((lambda (G35f3@t) ((lambda (G35f5@ls/false) (if G35f5@ls/false (apply (lambda (G35f7@who G35f8@expr) (if (G2e1c@id? G35f7@who) (G3015@bless (list 'define-syntax G35f7@who (list 'make-traced-macro (list 'quote G35f7@who) G35f8@expr))) (G3152@syntax-violation '#f '"invalid name" G35f1@stx))) G35f5@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G35f3@t))) (G305f@syntax-dispatch G35f3@t '(_ any any)))) G35f1@stx))) (set! G3027@trace-let/rec-syntax (lambda (G35fb@who) (lambda (G35fd@stx) ((lambda (G35ff@t) ((lambda (G3601@ls/false) (if G3601@ls/false (apply (lambda (G3603@lhs* G3604@rhs* G3605@b G3606@b*) (if (G2e26@valid-bound-ids? G3603@lhs*) ((lambda (G360b@rhs*) (G3015@bless (cons G35fb@who (cons (map list G3603@lhs* G360b@rhs*) (cons G3605@b G3606@b*))))) (map (lambda (G360d@lhs G360e@rhs) (list 'make-traced-macro (list 'quote G360d@lhs) G360e@rhs)) G3603@lhs* G3604@rhs*)) (G3019@invalid-fmls-error G35fd@stx G3603@lhs*))) G3601@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G35ff@t))) (G305f@syntax-dispatch G35ff@t '(_ #(each (any any)) any . each-any)))) G35fd@stx)))) (set! G3029@trace-let-syntax-macro (G3027@trace-let/rec-syntax 'let-syntax)) (set! G302b@trace-letrec-syntax-macro (G3027@trace-let/rec-syntax 'letrec-syntax)) (set! G302d@guard-macro (lambda (G3611@x) ((lambda (G3614@gen-clauses) (begin (set! G3614@gen-clauses (lambda (G362b@con G362c@outerk G362d@clause*) ((lambda (G3632@f G3634@f*) (begin (set! G3632@f (lambda (G3665@x G3666@k) ((lambda (G3669@t) ((lambda (G366b@ls/false) (if G366b@ls/false (apply (lambda (G366d@e G366e@p) ((lambda (G3671@t) (list 'let (list (list G3671@t G366d@e)) (list 'if G3671@t (list G366e@p G3671@t) G3666@k))) (gensym))) G366b@ls/false) ((lambda (G3673@t) ((lambda (G3675@ls/false) (if G3675@ls/false (apply (lambda (G3677@e) ((lambda (G3679@t) (list 'let (list (list G3679@t G3677@e)) (list 'if G3679@t G3679@t G3666@k))) (gensym))) G3675@ls/false) ((lambda (G367b@t) ((lambda (G367d@ls/false) (if G367d@ls/false (apply (lambda (G367f@e G3680@v G3681@v*) (list 'if G367f@e (cons 'begin (cons G3680@v G3681@v*)) G3666@k)) G367d@ls/false) ((lambda (G3685@t) ((lambda (G3687@ls/false) (if G3687@ls/false (apply (lambda () (G3152@syntax-violation '#f '"invalid guard clause" G3665@x)) G3687@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3685@t))) (G305f@syntax-dispatch G3685@t '_))) G367b@t))) (G305f@syntax-dispatch G367b@t '(any any . each-any)))) G3673@t))) (G305f@syntax-dispatch G3673@t '(any)))) G3669@t))) (G305f@syntax-dispatch G3669@t '(any #(scheme-id =>) any)))) G3665@x))) (set! G3634@f* (lambda (G363f@x*) ((lambda (G3641@t) ((lambda (G3643@ls/false) (if G3643@ls/false (apply (lambda () (values (list 'raise G362b@con) '#t)) G3643@ls/false) ((lambda (G3645@t) ((lambda (G3647@ls/false) (if G3647@ls/false (apply (lambda (G3649@e G364a@e*) (values (cons 'begin (cons G3649@e G364a@e*)) '#f)) G3647@ls/false) ((lambda (G364d@t) ((lambda (G364f@ls/false) (if G364f@ls/false (apply (lambda (G3651@cls G3652@cls*) (call-with-values (lambda () (G3634@f* G3652@cls*)) (lambda (G3657@G3655 G3658@G3656) ((lambda (G365b@g G365c@e) (values (G3632@f G3651@cls G365c@e) G365b@g)) G3658@G3656 G3657@G3655)))) G364f@ls/false) ((lambda (G365f@t) ((lambda (G3661@ls/false) (if G3661@ls/false (apply (lambda (G3663@others) (G3152@syntax-violation '#f '"invalid guard clause" G3663@others)) G3661@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G365f@t))) (G305f@syntax-dispatch G365f@t 'any))) G364d@t))) (G305f@syntax-dispatch G364d@t '(any . any)))) G3645@t))) (G305f@syntax-dispatch G3645@t '((#(scheme-id else) any . each-any))))) G3641@t))) (G305f@syntax-dispatch G3641@t '()))) G363f@x*))) (call-with-values (lambda () (G3634@f* G362d@clause*)) (lambda (G3637@G3635 G3638@G3636) ((lambda (G363b@raisek G363c@code) (if G363b@raisek (list G362c@outerk G363c@code) G363c@code)) G3638@G3636 G3637@G3635))))) '#f '#f))) ((lambda (G3615@t) ((lambda (G3617@ls/false) (if (if G3617@ls/false (begin '#f (apply (lambda (G3619@con G361a@clause* G361b@b G361c@b*) (G2e1c@id? G3619@con)) G3617@ls/false)) '#f) (apply (lambda (G3621@con G3622@clause* G3623@b G3624@b*) ((lambda (G3629@outerk) (G3015@bless (list 'call/cc (list 'lambda (list G3629@outerk) (list 'with-exception-handler (list 'lambda (list G3621@con) (G3614@gen-clauses G3621@con G3629@outerk G3622@clause*)) (cons 'lambda (cons '() (cons '#f (cons G3623@b G3624@b*))))))))) (gensym))) G3617@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3615@t))) (G305f@syntax-dispatch G3615@t '(_ (any . each-any) any . each-any)))) G3611@x))) '#f))) (set! G302f@define-enumeration-macro (lambda (G3689@stx) ((lambda (G368c@set? G368e@remove-dups) (begin (set! G368c@set? (lambda (G36a5@x) ((lambda (G36a7@t) (if G36a7@t G36a7@t (begin '#f (if (not (memq (car G36a5@x) (cdr G36a5@x))) (begin '#f (G368c@set? (cdr G36a5@x))) '#f)))) (null? G36a5@x)))) (set! G368e@remove-dups (lambda (G36a3@ls) (if (null? G36a3@ls) '() (cons (car G36a3@ls) (G368e@remove-dups (remq (car G36a3@ls) (cdr G36a3@ls))))))) ((lambda (G368f@t) ((lambda (G3691@ls/false) (if (if G3691@ls/false (begin '#f (apply (lambda (G3693@name G3694@id* G3695@maker) (if (G2e1c@id? G3693@name) (if (G2e1c@id? G3695@maker) (begin '#f (for-all G2e1c@id? G3694@id*)) '#f) '#f)) G3691@ls/false)) '#f) (apply (lambda (G3699@name G369a@id* G369b@maker) ((lambda (G369f@name* G36a0@mk) (G3015@bless (list 'begin (list 'define G36a0@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G369f@name*)))) (list 'define-syntax G3699@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G369f@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3699@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G369b@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G369b@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G369f@name*)) (cons 'syntax-violation (cons (list 'quote G369b@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G36a0@mk '('(n* ...)))))))))))) (G368e@remove-dups (G3158@syntax->datum G369a@id*)) (gensym))) G3691@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G368f@t))) (G305f@syntax-dispatch G368f@t '(_ any each-any any)))) G3689@stx))) '#f '#f))) (set! G3031@time-macro (lambda (G36a9@stx) ((lambda (G36ab@t) ((lambda (G36ad@ls/false) (if G36ad@ls/false (apply (lambda (G36af@expr) ((lambda (G36b1@str) (G3015@bless (list 'time-it G36b1@str (list 'lambda '() G36af@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G36b5@G36b3 G36b6@G36b4) ((lambda (G36b9@e G36ba@p) (begin (write (G3158@syntax->datum G36af@expr) G36ba@p) (G36b9@e))) G36b6@G36b4 G36b5@G36b3))))) G36ad@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G36ab@t))) (G305f@syntax-dispatch G36ab@t '(_ any)))) G36a9@stx))) (set! G3033@delay-macro (lambda (G36bd@stx) ((lambda (G36bf@t) ((lambda (G36c1@ls/false) (if G36c1@ls/false (apply (lambda (G36c3@expr) (G3015@bless (list 'make-promise (list 'lambda '() G36c3@expr)))) G36c1@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G36bf@t))) (G305f@syntax-dispatch G36bf@t '(_ any)))) G36bd@stx))) (set! G3035@assert-macro (lambda (G36c5@stx) ((lambda (G36c7@t) ((lambda (G36c9@ls/false) (if G36c9@ls/false (apply (lambda (G36cb@expr) ((lambda (G36cd@pos) (G3015@bless (list 'unless G36cb@expr (list 'assertion-error (list 'quote G36cb@expr) (list 'quote G36cd@pos))))) ((lambda (G36cf@t) (if G36cf@t G36cf@t (begin '#f (G3148@expression-position G36cb@expr)))) (G3148@expression-position G36c5@stx)))) G36c9@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G36c7@t))) (G305f@syntax-dispatch G36c7@t '(_ any)))) G36c5@stx))) (set! G3037@endianness-macro (lambda (G36d1@stx) ((lambda (G36d3@t) ((lambda (G36d5@ls/false) (if G36d5@ls/false (apply (lambda (G36d7@e) ((lambda (G36d9@t) (if (memv G36d9@t '(little)) (G3015@bless ''little) (if (memv G36d9@t '(big)) (G3015@bless ''big) (G3152@syntax-violation '#f '"endianness must be big or little" G36d1@stx)))) (G3158@syntax->datum G36d7@e))) G36d5@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G36d3@t))) (G305f@syntax-dispatch G36d3@t '(_ any)))) G36d1@stx))) (set! G3039@identifier-syntax-macro (lambda (G36db@stx) ((lambda (G36dd@t) ((lambda (G36df@ls/false) (if G36df@ls/false (apply (lambda (G36e1@expr) (G3015@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G36e1@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G36e1@expr) '((syntax (e* ...)))))))))) G36df@ls/false) ((lambda (G36e3@t) ((lambda (G36e5@ls/false) (if (if G36e5@ls/false (begin '#f (apply (lambda (G36e7@id1 G36e8@expr1 G36e9@id2 G36ea@expr2 G36eb@expr3) (if (G2e1c@id? G36e7@id1) (if (G2e1c@id? G36e9@id2) (begin '#f (G2e1c@id? G36ea@expr2)) '#f) '#f)) G36e5@ls/false)) '#f) (apply (lambda (G36f1@id1 G36f2@expr1 G36f3@id2 G36f4@expr2 G36f5@expr3) (G3015@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G36f2@expr1)) (list (list 'set! 'id G36f4@expr2) (list 'syntax G36f5@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G36f2@expr1 '(e* ...))))))))) G36e5@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G36e3@t))) (G305f@syntax-dispatch G36e3@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G36dd@t))) (G305f@syntax-dispatch G36dd@t '(_ any)))) G36db@stx))) (set! G303b@do-macro (lambda (G36fb@stx) ((lambda (G36fe@bind) (begin (set! G36fe@bind (lambda (G3715@x) ((lambda (G3717@t) ((lambda (G3719@ls/false) (if G3719@ls/false (apply (lambda (G371b@x G371c@init) (list G371b@x G371c@init G371b@x)) G3719@ls/false) ((lambda (G371f@t) ((lambda (G3721@ls/false) (if G3721@ls/false (apply (lambda (G3723@x G3724@init G3725@step) (list G3723@x G3724@init G3725@step)) G3721@ls/false) ((lambda (G3729@t) ((lambda (G372b@ls/false) (if G372b@ls/false (apply (lambda () (G3152@syntax-violation '#f '"invalid binding" G36fb@stx)) G372b@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3729@t))) (G305f@syntax-dispatch G3729@t '_))) G371f@t))) (G305f@syntax-dispatch G371f@t '(any any any)))) G3717@t))) (G305f@syntax-dispatch G3717@t '(any any)))) G3715@x))) ((lambda (G36ff@t) ((lambda (G3701@ls/false) (if G3701@ls/false (apply (lambda (G3703@binding* G3704@test G3705@expr* G3706@command*) ((lambda (G370b@t) ((lambda (G370d@ls/false) (if G370d@ls/false (apply (lambda (G370f@x* G3710@init* G3711@step*) (if (G2e26@valid-bound-ids? G370f@x*) (G3015@bless (list 'letrec (list (list 'loop (list 'lambda G370f@x* (list 'if G3704@test (cons 'begin (cons '(if #f #f) G3705@expr*)) (cons 'begin (append G3706@command* (list (cons 'loop G3711@step*)))))))) (cons 'loop G3710@init*))) (G3152@syntax-violation '#f '"invalid bindings" G36fb@stx))) G370d@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G370b@t))) (G305f@syntax-dispatch G370b@t '#(each (any any any))))) (map G36fe@bind G3703@binding*))) G3701@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G36ff@t))) (G305f@syntax-dispatch G36ff@t '(_ each-any (any . each-any) . each-any)))) G36fb@stx))) '#f))) (set! G303d@let*-macro (lambda (G372d@stx) ((lambda (G372f@t) ((lambda (G3731@ls/false) (if (if G3731@ls/false (begin '#f (apply (lambda (G3733@lhs* G3734@rhs* G3735@b G3736@b*) (for-all G2e1c@id? G3733@lhs*)) G3731@ls/false)) '#f) (apply (lambda (G373b@lhs* G373c@rhs* G373d@b G373e@b*) (G3015@bless ((letrec ((G3743@f (lambda (G3745@x*) (if (null? G3745@x*) (cons 'let (cons '() (cons G373d@b G373e@b*))) (list 'let (list (car G3745@x*)) (G3743@f (cdr G3745@x*))))))) G3743@f) (map list G373b@lhs* G373c@rhs*)))) G3731@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G372f@t))) (G305f@syntax-dispatch G372f@t '(_ #(each (any any)) any . each-any)))) G372d@stx))) (set! G303f@or-macro (lambda (G3747@stx) ((lambda (G3749@t) ((lambda (G374b@ls/false) (if G374b@ls/false (apply (lambda () '#f) G374b@ls/false) ((lambda (G374d@t) ((lambda (G374f@ls/false) (if G374f@ls/false (apply (lambda (G3751@e G3752@e*) (G3015@bless ((letrec ((G3755@f (lambda (G3757@e G3758@e*) (if (null? G3758@e*) (list 'begin '#f G3757@e) (list 'let (list (list 't G3757@e)) (list 'if 't 't (G3755@f (car G3758@e*) (cdr G3758@e*)))))))) G3755@f) G3751@e G3752@e*))) G374f@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G374d@t))) (G305f@syntax-dispatch G374d@t '(_ any . each-any)))) G3749@t))) (G305f@syntax-dispatch G3749@t '(_)))) G3747@stx))) (set! G3041@and-macro (lambda (G375b@stx) ((lambda (G375d@t) ((lambda (G375f@ls/false) (if G375f@ls/false (apply (lambda () '#t) G375f@ls/false) ((lambda (G3761@t) ((lambda (G3763@ls/false) (if G3763@ls/false (apply (lambda (G3765@e G3766@e*) (G3015@bless ((letrec ((G3769@f (lambda (G376b@e G376c@e*) (if (null? G376c@e*) (list 'begin '#f G376b@e) (cons 'if (cons G376b@e (cons (G3769@f (car G376c@e*) (cdr G376c@e*)) '(#f)))))))) G3769@f) G3765@e G3766@e*))) G3763@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3761@t))) (G305f@syntax-dispatch G3761@t '(_ any . each-any)))) G375d@t))) (G305f@syntax-dispatch G375d@t '(_)))) G375b@stx))) (set! G3043@cond-macro (lambda (G376f@stx) ((lambda (G3771@t) ((lambda (G3773@ls/false) (if G3773@ls/false (apply (lambda (G3775@cls G3776@cls*) (G3015@bless ((letrec ((G3779@f (lambda (G377b@cls G377c@cls*) (if (null? G377c@cls*) ((lambda (G377f@t) ((lambda (G3781@ls/false) (if G3781@ls/false (apply (lambda (G3783@e G3784@e*) (cons 'begin (cons G3783@e G3784@e*))) G3781@ls/false) ((lambda (G3787@t) ((lambda (G3789@ls/false) (if G3789@ls/false (apply (lambda (G378b@e G378c@p) (list 'let (list (list 't G378b@e)) (list 'if 't (cons G378c@p '(t))))) G3789@ls/false) ((lambda (G378f@t) ((lambda (G3791@ls/false) (if G3791@ls/false (apply (lambda (G3793@e) (cons 'or (cons G3793@e '((if #f #f))))) G3791@ls/false) ((lambda (G3795@t) ((lambda (G3797@ls/false) (if G3797@ls/false (apply (lambda (G3799@e G379a@e*) (list 'if G3799@e (cons 'begin G379a@e*))) G3797@ls/false) ((lambda (G379d@t) ((lambda (G379f@ls/false) (if G379f@ls/false (apply (lambda () (G3152@syntax-violation '#f '"invalid last clause" G376f@stx)) G379f@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G379d@t))) (G305f@syntax-dispatch G379d@t '_))) G3795@t))) (G305f@syntax-dispatch G3795@t '(any . each-any)))) G378f@t))) (G305f@syntax-dispatch G378f@t '(any)))) G3787@t))) (G305f@syntax-dispatch G3787@t '(any #(scheme-id =>) any)))) G377f@t))) (G305f@syntax-dispatch G377f@t '(#(scheme-id else) any . each-any)))) G377b@cls) ((lambda (G37a1@t) ((lambda (G37a3@ls/false) (if G37a3@ls/false (apply (lambda (G37a5@e G37a6@e*) (G3152@syntax-violation '#f '"incorrect position of keyword else" G376f@stx)) G37a3@ls/false) ((lambda (G37a9@t) ((lambda (G37ab@ls/false) (if G37ab@ls/false (apply (lambda (G37ad@e G37ae@p) (list 'let (list (list 't G37ad@e)) (list 'if 't (cons G37ae@p '(t)) (G3779@f (car G377c@cls*) (cdr G377c@cls*))))) G37ab@ls/false) ((lambda (G37b1@t) ((lambda (G37b3@ls/false) (if G37b3@ls/false (apply (lambda (G37b5@e) (list 'or G37b5@e (G3779@f (car G377c@cls*) (cdr G377c@cls*)))) G37b3@ls/false) ((lambda (G37b7@t) ((lambda (G37b9@ls/false) (if G37b9@ls/false (apply (lambda (G37bb@e G37bc@e*) (list 'if G37bb@e (cons 'begin G37bc@e*) (G3779@f (car G377c@cls*) (cdr G377c@cls*)))) G37b9@ls/false) ((lambda (G37bf@t) ((lambda (G37c1@ls/false) (if G37c1@ls/false (apply (lambda () (G3152@syntax-violation '#f '"invalid last clause" G376f@stx)) G37c1@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G37bf@t))) (G305f@syntax-dispatch G37bf@t '_))) G37b7@t))) (G305f@syntax-dispatch G37b7@t '(any . each-any)))) G37b1@t))) (G305f@syntax-dispatch G37b1@t '(any)))) G37a9@t))) (G305f@syntax-dispatch G37a9@t '(any #(scheme-id =>) any)))) G37a1@t))) (G305f@syntax-dispatch G37a1@t '(#(scheme-id else) any . each-any)))) G377b@cls))))) G3779@f) G3775@cls G3776@cls*))) G3773@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3771@t))) (G305f@syntax-dispatch G3771@t '(_ any . each-any)))) G376f@stx))) (set! G3045@do-include (lambda (G37c3@stx G37c4@id G37c5@filename) ((lambda (G37c9@filename) (begin (if (not (if (string? G37c9@filename) (begin '#f (G2e1c@id? G37c4@id)) '#f)) (G3152@syntax-violation '#f '"invalid syntax" G37c3@stx) (void)) (cons (G3015@bless 'begin) (with-input-from-file G37c9@filename (lambda () ((letrec ((G37cb@f (lambda (G37cd@ls) ((lambda (G37cf@x) (if (eof-object? G37cf@x) (reverse G37cd@ls) (G37cb@f (cons (G2dfa@datum->stx G37c4@id G37cf@x) G37cd@ls)))) (G2964@G2871@read-annotated))))) G37cb@f) '())))))) (G2e32@stx->datum G37c5@filename)))) (set! G3047@include-macro (lambda (G37d1@e) ((lambda (G37d3@t) ((lambda (G37d5@ls/false) (if G37d5@ls/false (apply (lambda (G37d7@id G37d8@filename) (G3045@do-include G37d1@e G37d7@id G37d8@filename)) G37d5@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G37d3@t))) (G305f@syntax-dispatch G37d3@t '(any any)))) G37d1@e))) (set! G3049@include-into-macro (lambda (G37db@e) ((lambda (G37dd@t) ((lambda (G37df@ls/false) (if G37df@ls/false (apply (lambda (G37e1@id G37e2@filename) (G3045@do-include G37db@e G37e1@id G37e2@filename)) G37df@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G37dd@t))) (G305f@syntax-dispatch G37dd@t '(_ any any)))) G37db@e))) (set! G304b@syntax-rules-macro (lambda (G37e5@e) ((lambda (G37e7@t) ((lambda (G37e9@ls/false) (if G37e9@ls/false (apply (lambda (G37eb@lits G37ec@pat* G37ed@tmp*) (begin (G3065@verify-literals G37eb@lits G37e5@e) (G3015@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G37eb@lits (map (lambda (G37f1@pat G37f2@tmp) ((lambda (G37f5@t) ((lambda (G37f7@ls/false) (if G37f7@ls/false (apply (lambda (G37f9@rest) (list (cons 'g G37f9@rest) (list 'syntax G37f2@tmp))) G37f7@ls/false) ((lambda (G37fb@t) ((lambda (G37fd@ls/false) (if G37fd@ls/false (apply (lambda () (G3152@syntax-violation '#f '"invalid syntax-rules pattern" G37e5@e G37f1@pat)) G37fd@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G37fb@t))) (G305f@syntax-dispatch G37fb@t '_))) G37f5@t))) (G305f@syntax-dispatch G37f5@t '(_ . any)))) G37f1@pat)) G37ec@pat* G37ed@tmp*)))))))) G37e9@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G37e7@t))) (G305f@syntax-dispatch G37e7@t '(_ each-any . #(each (any any)))))) G37e5@e))) (set! G304d@quasiquote-macro ((lambda () ((lambda (G3800@datum G3829@quasicons* G382b@quasicons G382d@quasiappend G382f@quasivector G3831@vquasi G3833@quasi) (begin (set! G3800@datum (lambda (G390e@x) (list (G2fed@scheme-stx 'quote) (G2e04@mkstx G390e@x '() '() '())))) (set! G3829@quasicons* (lambda (G3906@x G3907@y) ((letrec ((G390a@f (lambda (G390c@x) (if (null? G390c@x) G3907@y (G382b@quasicons (car G390c@x) (G390a@f (cdr G390c@x))))))) G390a@f) G3906@x))) (set! G382b@quasicons (lambda (G38e0@x G38e1@y) ((lambda (G38e4@t) ((lambda (G38e6@ls/false) (if G38e6@ls/false (apply (lambda (G38e8@dy) ((lambda (G38ea@t) ((lambda (G38ec@ls/false) (if G38ec@ls/false (apply (lambda (G38ee@dx) (list (G2fed@scheme-stx 'quote) (cons G38ee@dx G38e8@dy))) G38ec@ls/false) ((lambda (G38f0@t) ((lambda (G38f2@ls/false) (if G38f2@ls/false (apply (lambda () ((lambda (G38f4@t) ((lambda (G38f6@ls/false) (if G38f6@ls/false (apply (lambda () (list (G2fed@scheme-stx 'list) G38e0@x)) G38f6@ls/false) ((lambda (G38f8@t) ((lambda (G38fa@ls/false) (if G38fa@ls/false (apply (lambda () (list (G2fed@scheme-stx 'cons) G38e0@x G38e1@y)) G38fa@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G38f8@t))) (G305f@syntax-dispatch G38f8@t '_))) G38f4@t))) (G305f@syntax-dispatch G38f4@t '()))) G38e8@dy)) G38f2@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G38f0@t))) (G305f@syntax-dispatch G38f0@t '_))) G38ea@t))) (G305f@syntax-dispatch G38ea@t '(#(scheme-id quote) any)))) G38e0@x)) G38e6@ls/false) ((lambda (G38fc@t) ((lambda (G38fe@ls/false) (if G38fe@ls/false (apply (lambda (G3900@stuff) (cons* (G2fed@scheme-stx 'list) G38e0@x G3900@stuff)) G38fe@ls/false) ((lambda (G3902@t) ((lambda (G3904@ls/false) (if G3904@ls/false (apply (lambda () (list (G2fed@scheme-stx 'cons) G38e0@x G38e1@y)) G3904@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3902@t))) (G305f@syntax-dispatch G3902@t '_))) G38fc@t))) (G305f@syntax-dispatch G38fc@t '(#(scheme-id list) . each-any)))) G38e4@t))) (G305f@syntax-dispatch G38e4@t '(#(scheme-id quote) any)))) G38e1@y))) (set! G382d@quasiappend (lambda (G38c6@x G38c7@y) ((lambda (G38ca@ls) (if (null? G38ca@ls) (list (G2fed@scheme-stx 'quote) '()) (if (null? (cdr G38ca@ls)) (car G38ca@ls) (cons* (G2fed@scheme-stx 'append) G38ca@ls)))) ((letrec ((G38cc@f (lambda (G38ce@x) (if (null? G38ce@x) ((lambda (G38d0@t) ((lambda (G38d2@ls/false) (if G38d2@ls/false (apply (lambda () '()) G38d2@ls/false) ((lambda (G38d4@t) ((lambda (G38d6@ls/false) (if G38d6@ls/false (apply (lambda () (list G38c7@y)) G38d6@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G38d4@t))) (G305f@syntax-dispatch G38d4@t '_))) G38d0@t))) (G305f@syntax-dispatch G38d0@t '(#(scheme-id quote) ())))) G38c7@y) ((lambda (G38d8@t) ((lambda (G38da@ls/false) (if G38da@ls/false (apply (lambda () (G38cc@f (cdr G38ce@x))) G38da@ls/false) ((lambda (G38dc@t) ((lambda (G38de@ls/false) (if G38de@ls/false (apply (lambda () (cons (car G38ce@x) (G38cc@f (cdr G38ce@x)))) G38de@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G38dc@t))) (G305f@syntax-dispatch G38dc@t '_))) G38d8@t))) (G305f@syntax-dispatch G38d8@t '(#(scheme-id quote) ())))) (car G38ce@x)))))) G38cc@f) G38c6@x)))) (set! G382f@quasivector (lambda (G3894@x) ((lambda (G3896@pat-x) ((lambda (G3898@t) ((lambda (G389a@ls/false) (if G389a@ls/false (apply (lambda (G389c@x*) (list (G2fed@scheme-stx 'quote) (list->vector G389c@x*))) G389a@ls/false) ((lambda (G389e@t) ((lambda (G38a0@ls/false) (if G38a0@ls/false (apply (lambda () ((letrec ((G38a2@f (lambda (G38a4@x G38a5@k) ((lambda (G38a8@t) ((lambda (G38aa@ls/false) (if G38aa@ls/false (apply (lambda (G38ac@x*) (G38a5@k (map (lambda (G38ae@x) (list (G2fed@scheme-stx 'quote) G38ae@x)) G38ac@x*))) G38aa@ls/false) ((lambda (G38b0@t) ((lambda (G38b2@ls/false) (if G38b2@ls/false (apply (lambda (G38b4@x*) (G38a5@k G38b4@x*)) G38b2@ls/false) ((lambda (G38b6@t) ((lambda (G38b8@ls/false) (if G38b8@ls/false (apply (lambda (G38ba@x G38bb@y) (G38a2@f G38bb@y (lambda (G38be@ls) (G38a5@k (cons G38ba@x G38be@ls))))) G38b8@ls/false) ((lambda (G38c0@t) ((lambda (G38c2@ls/false) (if G38c2@ls/false (apply (lambda () (list (G2fed@scheme-stx 'list->vector) G3896@pat-x)) G38c2@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G38c0@t))) (G305f@syntax-dispatch G38c0@t '_))) G38b6@t))) (G305f@syntax-dispatch G38b6@t '(#(scheme-id cons) any any)))) G38b0@t))) (G305f@syntax-dispatch G38b0@t '(#(scheme-id list) . each-any)))) G38a8@t))) (G305f@syntax-dispatch G38a8@t '(#(scheme-id quote) each-any)))) G38a4@x)))) G38a2@f) G3894@x (lambda (G38c4@ls) (cons* (G2fed@scheme-stx 'vector) G38c4@ls)))) G38a0@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G389e@t))) (G305f@syntax-dispatch G389e@t '_))) G3898@t))) (G305f@syntax-dispatch G3898@t '(#(scheme-id quote) each-any)))) G3896@pat-x)) G3894@x))) (set! G3831@vquasi (lambda (G3872@p G3873@lev) ((lambda (G3876@t) ((lambda (G3878@ls/false) (if G3878@ls/false (apply (lambda (G387a@p G387b@q) ((lambda (G387e@t) ((lambda (G3880@ls/false) (if G3880@ls/false (apply (lambda (G3882@p) (if (= G3873@lev '0) (G3829@quasicons* G3882@p (G3831@vquasi G387b@q G3873@lev)) (G382b@quasicons (G382b@quasicons (G3800@datum 'unquote) (G3833@quasi G3882@p (- G3873@lev '1))) (G3831@vquasi G387b@q G3873@lev)))) G3880@ls/false) ((lambda (G3884@t) ((lambda (G3886@ls/false) (if G3886@ls/false (apply (lambda (G3888@p) (if (= G3873@lev '0) (G382d@quasiappend G3888@p (G3831@vquasi G387b@q G3873@lev)) (G382b@quasicons (G382b@quasicons (G3800@datum 'unquote-splicing) (G3833@quasi G3888@p (- G3873@lev '1))) (G3831@vquasi G387b@q G3873@lev)))) G3886@ls/false) ((lambda (G388a@t) ((lambda (G388c@ls/false) (if G388c@ls/false (apply (lambda (G388e@p) (G382b@quasicons (G3833@quasi G388e@p G3873@lev) (G3831@vquasi G387b@q G3873@lev))) G388c@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G388a@t))) (G305f@syntax-dispatch G388a@t 'any))) G3884@t))) (G305f@syntax-dispatch G3884@t '(#(scheme-id unquote-splicing) . each-any)))) G387e@t))) (G305f@syntax-dispatch G387e@t '(#(scheme-id unquote) . each-any)))) G387a@p)) G3878@ls/false) ((lambda (G3890@t) ((lambda (G3892@ls/false) (if G3892@ls/false (apply (lambda () (list (G2fed@scheme-stx 'quote) '())) G3892@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3890@t))) (G305f@syntax-dispatch G3890@t '()))) G3876@t))) (G305f@syntax-dispatch G3876@t '(any . any)))) G3872@p))) (set! G3833@quasi (lambda (G383c@p G383d@lev) ((lambda (G3840@t) ((lambda (G3842@ls/false) (if G3842@ls/false (apply (lambda (G3844@p) (if (= G383d@lev '0) G3844@p (G382b@quasicons (G3800@datum 'unquote) (G3833@quasi (list G3844@p) (- G383d@lev '1))))) G3842@ls/false) ((lambda (G3846@t) ((lambda (G3848@ls/false) (if G3848@ls/false (apply (lambda (G384a@p G384b@q) (if (= G383d@lev '0) (G3829@quasicons* G384a@p (G3833@quasi G384b@q G383d@lev)) (G382b@quasicons (G382b@quasicons (G3800@datum 'unquote) (G3833@quasi G384a@p (- G383d@lev '1))) (G3833@quasi G384b@q G383d@lev)))) G3848@ls/false) ((lambda (G384e@t) ((lambda (G3850@ls/false) (if G3850@ls/false (apply (lambda (G3852@p G3853@q) (if (= G383d@lev '0) (G382d@quasiappend G3852@p (G3833@quasi G3853@q G383d@lev)) (G382b@quasicons (G382b@quasicons (G3800@datum 'unquote-splicing) (G3833@quasi G3852@p (- G383d@lev '1))) (G3833@quasi G3853@q G383d@lev)))) G3850@ls/false) ((lambda (G3856@t) ((lambda (G3858@ls/false) (if G3858@ls/false (apply (lambda (G385a@p) (G382b@quasicons (G3800@datum 'quasiquote) (G3833@quasi (list G385a@p) (+ G383d@lev '1)))) G3858@ls/false) ((lambda (G385c@t) ((lambda (G385e@ls/false) (if G385e@ls/false (apply (lambda (G3860@p G3861@q) (G382b@quasicons (G3833@quasi G3860@p G383d@lev) (G3833@quasi G3861@q G383d@lev))) G385e@ls/false) ((lambda (G3864@t) ((lambda (G3866@ls/false) (if (if G3866@ls/false (begin '#f (apply (lambda (G3868@x) (not (G2de4@stx? G3868@x))) G3866@ls/false)) '#f) (apply (lambda (G386a@x) (G382f@quasivector (G3831@vquasi G386a@x G383d@lev))) G3866@ls/false) ((lambda (G386c@t) ((lambda (G386e@ls/false) (if G386e@ls/false (apply (lambda (G3870@p) (list (G2fed@scheme-stx 'quote) G3870@p)) G386e@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G386c@t))) (G305f@syntax-dispatch G386c@t 'any))) G3864@t))) (G305f@syntax-dispatch G3864@t '#(vector each-any)))) G385c@t))) (G305f@syntax-dispatch G385c@t '(any . any)))) G3856@t))) (G305f@syntax-dispatch G3856@t '(#(scheme-id quasiquote) any)))) G384e@t))) (G305f@syntax-dispatch G384e@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3846@t))) (G305f@syntax-dispatch G3846@t '((#(scheme-id unquote) . each-any) . any)))) G3840@t))) (G305f@syntax-dispatch G3840@t '(#(scheme-id unquote) any)))) G383c@p))) (lambda (G3834@x) ((lambda (G3836@t) ((lambda (G3838@ls/false) (if G3838@ls/false (apply (lambda (G383a@e) (G3833@quasi G383a@e '0)) G3838@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3836@t))) (G305f@syntax-dispatch G3836@t '(_ any)))) G3834@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G304f@quasisyntax-macro ((lambda () ((lambda (G3911@quasi) (begin (set! G3911@quasi (lambda (G3929@p G392a@lev) ((lambda (G392d@t) ((lambda (G392f@ls/false) (if G392f@ls/false (apply (lambda (G3931@p) (if (= G392a@lev '0) ((lambda (G3933@g) (values (list G3933@g) (list G3931@p) G3933@g)) (gensym)) (call-with-values (lambda () (G3911@quasi G3931@p (- G392a@lev '1))) (lambda (G3938@G3935 G3939@G3936 G393a@G3937) ((lambda (G393e@p G393f@rhs* G3940@lhs*) (values G3940@lhs* G393f@rhs* (list 'unsyntax G393e@p))) G393a@G3937 G3939@G3936 G3938@G3935))))) G392f@ls/false) ((lambda (G3944@t) ((lambda (G3946@ls/false) (if (if G3946@ls/false (begin '#f (apply (lambda () (= G392a@lev '0)) G3946@ls/false)) '#f) (apply (lambda () (G3152@syntax-violation '#f '"incorrect use of unsyntax" G3929@p)) G3946@ls/false) ((lambda (G3948@t) ((lambda (G394a@ls/false) (if G394a@ls/false (apply (lambda (G394c@p* G394d@q) (call-with-values (lambda () (G3911@quasi G394d@q G392a@lev)) (lambda (G3953@G3950 G3954@G3951 G3955@G3952) ((lambda (G3959@q G395a@rhs* G395b@lhs*) (if (= G392a@lev '0) ((lambda (G395f@g*) (values (append G395f@g* G395b@lhs*) (append G394c@p* G395a@rhs*) (append G395f@g* G3959@q))) (map (lambda (G3961@x) (gensym)) G394c@p*)) (call-with-values (lambda () (G3911@quasi G394c@p* (- G392a@lev '1))) (lambda (G3966@G3963 G3967@G3964 G3968@G3965) ((lambda (G396c@p* G396d@rhs2* G396e@lhs2*) (values (append G396e@lhs2* G395b@lhs*) (append G396d@rhs2* G395a@rhs*) (cons (cons 'unsyntax G396c@p*) G3959@q))) G3968@G3965 G3967@G3964 G3966@G3963))))) G3955@G3952 G3954@G3951 G3953@G3950)))) G394a@ls/false) ((lambda (G3972@t) ((lambda (G3974@ls/false) (if G3974@ls/false (apply (lambda (G3976@p* G3977@q) (call-with-values (lambda () (G3911@quasi G3977@q G392a@lev)) (lambda (G397d@G397a G397e@G397b G397f@G397c) ((lambda (G3983@q G3984@rhs* G3985@lhs*) (if (= G392a@lev '0) ((lambda (G3989@g*) (values (append (map (lambda (G398b@g) (cons G398b@g '(...))) G3989@g*) G3985@lhs*) (append G3976@p* G3984@rhs*) (append (apply append (map (lambda (G398d@g) (cons G398d@g '(...))) G3989@g*)) G3983@q))) (map (lambda (G398f@x) (gensym)) G3976@p*)) (call-with-values (lambda () (G3911@quasi G3976@p* (- G392a@lev '1))) (lambda (G3994@G3991 G3995@G3992 G3996@G3993) ((lambda (G399a@p* G399b@rhs2* G399c@lhs2*) (values (append G399c@lhs2* G3985@lhs*) (append G399b@rhs2* G3984@rhs*) (cons (cons 'unsyntax-splicing G399a@p*) G3983@q))) G3996@G3993 G3995@G3992 G3994@G3991))))) G397f@G397c G397e@G397b G397d@G397a)))) G3974@ls/false) ((lambda (G39a0@t) ((lambda (G39a2@ls/false) (if (if G39a2@ls/false (begin '#f (apply (lambda () (= G392a@lev '0)) G39a2@ls/false)) '#f) (apply (lambda () (G3152@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3929@p)) G39a2@ls/false) ((lambda (G39a4@t) ((lambda (G39a6@ls/false) (if G39a6@ls/false (apply (lambda (G39a8@p) (call-with-values (lambda () (G3911@quasi G39a8@p (+ G392a@lev '1))) (lambda (G39ad@G39aa G39ae@G39ab G39af@G39ac) ((lambda (G39b3@p G39b4@rhs* G39b5@lhs*) (values G39b5@lhs* G39b4@rhs* (list 'quasisyntax G39b3@p))) G39af@G39ac G39ae@G39ab G39ad@G39aa)))) G39a6@ls/false) ((lambda (G39b9@t) ((lambda (G39bb@ls/false) (if G39bb@ls/false (apply (lambda (G39bd@p G39be@q) (call-with-values (lambda () (G3911@quasi G39bd@p G392a@lev)) (lambda (G39c7@G39c1 G39c8@G39c2 G39c9@G39c3) (call-with-values (lambda () (G3911@quasi G39be@q G392a@lev)) (lambda (G39cd@G39c4 G39ce@G39c5 G39cf@G39c6) ((lambda (G39d3@q G39d4@rhs2* G39d5@lhs2* G39d6@p G39d7@rhs* G39d8@lhs*) (values (append G39d5@lhs2* G39d8@lhs*) (append G39d4@rhs2* G39d7@rhs*) (cons G39d6@p G39d3@q))) G39cf@G39c6 G39ce@G39c5 G39cd@G39c4 G39c9@G39c3 G39c8@G39c2 G39c7@G39c1)))))) G39bb@ls/false) ((lambda (G39df@t) ((lambda (G39e1@ls/false) (if G39e1@ls/false (apply (lambda (G39e3@x*) (call-with-values (lambda () (G3911@quasi G39e3@x* G392a@lev)) (lambda (G39e8@G39e5 G39e9@G39e6 G39ea@G39e7) ((lambda (G39ee@x* G39ef@rhs* G39f0@lhs*) (values G39f0@lhs* G39ef@rhs* (list->vector G39ee@x*))) G39ea@G39e7 G39e9@G39e6 G39e8@G39e5)))) G39e1@ls/false) ((lambda (G39f4@t) ((lambda (G39f6@ls/false) (if G39f6@ls/false (apply (lambda () (values '() '() G3929@p)) G39f6@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G39f4@t))) (G305f@syntax-dispatch G39f4@t '_))) G39df@t))) (G305f@syntax-dispatch G39df@t '#(vector each-any)))) G39b9@t))) (G305f@syntax-dispatch G39b9@t '(any . any)))) G39a4@t))) (G305f@syntax-dispatch G39a4@t '(#(scheme-id quasisyntax) any)))) G39a0@t))) (G305f@syntax-dispatch G39a0@t '#(scheme-id unsyntax-splicing)))) G3972@t))) (G305f@syntax-dispatch G3972@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3948@t))) (G305f@syntax-dispatch G3948@t '((#(scheme-id unsyntax) . each-any) . any)))) G3944@t))) (G305f@syntax-dispatch G3944@t '#(scheme-id unsyntax)))) G392d@t))) (G305f@syntax-dispatch G392d@t '(#(scheme-id unsyntax) any)))) G3929@p))) (lambda (G3912@x) ((lambda (G3914@t) ((lambda (G3916@ls/false) (if G3916@ls/false (apply (lambda (G3918@e) (call-with-values (lambda () (G3911@quasi G3918@e '0)) (lambda (G391d@G391a G391e@G391b G391f@G391c) ((lambda (G3923@v G3924@rhs* G3925@lhs*) (G3015@bless (list 'syntax-case (cons 'list G3924@rhs*) '() (list G3925@lhs* (list 'syntax G3923@v))))) G391f@G391c G391e@G391b G391d@G391a)))) G3916@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3914@t))) (G305f@syntax-dispatch G3914@t '(_ any)))) G3912@x)))) '#f)))) (set! G3051@define-struct-macro (lambda (G39f8@stx) (G3152@syntax-violation '#f '"define-struct not supported" G39f8@stx))) (set! G3053@define-record-type-macro (lambda (G39fa@x) ((lambda (G39fd@id G39ff@get-record-name G3a01@get-record-constructor-name G3a03@get-record-predicate-name G3a05@get-clause G3a07@foo-rtd-code G3a09@parent-rtd-code G3a0b@parent-rcd-code G3a0d@foo-rcd-code G3a0f@get-protocol-code G3a11@get-fields G3a13@get-mutator-indices G3a15@get-mutators G3a17@get-accessors G3a19@enumerate G3a1b@do-define-record G3a1d@verify-clauses) (begin (set! G39fd@id (lambda (G3bf4@ctxt . G3bf6@str*) (G3156@datum->syntax G3bf4@ctxt (string->symbol (apply string-append (map (lambda (G3bf8@x) (if (symbol? G3bf8@x) (symbol->string G3bf8@x) (if (string? G3bf8@x) G3bf8@x (assertion-violation 'define-record-type '"BUG")))) G3bf6@str*)))))) (set! G39ff@get-record-name (lambda (G3be2@spec) ((lambda (G3be4@t) ((lambda (G3be6@ls/false) (if G3be6@ls/false (apply (lambda (G3be8@foo G3be9@make-foo G3bea@foo?) G3be8@foo) G3be6@ls/false) ((lambda (G3bee@t) ((lambda (G3bf0@ls/false) (if G3bf0@ls/false (apply (lambda (G3bf2@foo) G3bf2@foo) G3bf0@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3bee@t))) (G305f@syntax-dispatch G3bee@t 'any))) G3be4@t))) (G305f@syntax-dispatch G3be4@t '(any any any)))) G3be2@spec))) (set! G3a01@get-record-constructor-name (lambda (G3bce@spec) ((lambda (G3bd0@t) ((lambda (G3bd2@ls/false) (if G3bd2@ls/false (apply (lambda (G3bd4@foo G3bd5@make-foo G3bd6@foo?) G3bd5@make-foo) G3bd2@ls/false) ((lambda (G3bda@t) ((lambda (G3bdc@ls/false) (if (if G3bdc@ls/false (begin '#f (apply (lambda (G3bde@foo) (G2e1c@id? G3bde@foo)) G3bdc@ls/false)) '#f) (apply (lambda (G3be0@foo) (G39fd@id G3be0@foo '"make-" (G2e32@stx->datum G3be0@foo))) G3bdc@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3bda@t))) (G305f@syntax-dispatch G3bda@t 'any))) G3bd0@t))) (G305f@syntax-dispatch G3bd0@t '(any any any)))) G3bce@spec))) (set! G3a03@get-record-predicate-name (lambda (G3bba@spec) ((lambda (G3bbc@t) ((lambda (G3bbe@ls/false) (if G3bbe@ls/false (apply (lambda (G3bc0@foo G3bc1@make-foo G3bc2@foo?) G3bc2@foo?) G3bbe@ls/false) ((lambda (G3bc6@t) ((lambda (G3bc8@ls/false) (if (if G3bc8@ls/false (begin '#f (apply (lambda (G3bca@foo) (G2e1c@id? G3bca@foo)) G3bc8@ls/false)) '#f) (apply (lambda (G3bcc@foo) (G39fd@id G3bcc@foo (G2e32@stx->datum G3bcc@foo) '"?")) G3bc8@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3bc6@t))) (G305f@syntax-dispatch G3bc6@t 'any))) G3bbc@t))) (G305f@syntax-dispatch G3bbc@t '(any any any)))) G3bba@spec))) (set! G3a05@get-clause (lambda (G3ba8@id G3ba9@ls) ((lambda (G3bac@t) ((lambda (G3bae@ls/false) (if G3bae@ls/false (apply (lambda () '#f) G3bae@ls/false) ((lambda (G3bb0@t) ((lambda (G3bb2@ls/false) (if G3bb2@ls/false (apply (lambda (G3bb4@x G3bb5@rest G3bb6@ls) (if (G2e24@free-id=? (G3015@bless G3ba8@id) G3bb4@x) (cons G3bb4@x G3bb5@rest) (G3a05@get-clause G3ba8@id G3bb6@ls))) G3bb2@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3bb0@t))) (G305f@syntax-dispatch G3bb0@t '((any . any) . any)))) G3bac@t))) (G305f@syntax-dispatch G3bac@t '()))) G3ba9@ls))) (set! G3a07@foo-rtd-code (lambda (G3b56@name G3b57@clause* G3b58@parent-rtd-code) ((lambda (G3b5d@convert-field-spec*) (begin (set! G3b5d@convert-field-spec* (lambda (G3b8e@ls) (list->vector (map (lambda (G3b90@x) ((lambda (G3b92@t) ((lambda (G3b94@ls/false) (if G3b94@ls/false (apply (lambda (G3b96@name G3b97@rest) (list 'mutable G3b96@name)) G3b94@ls/false) ((lambda (G3b9a@t) ((lambda (G3b9c@ls/false) (if G3b9c@ls/false (apply (lambda (G3b9e@name G3b9f@rest) (list 'immutable G3b9e@name)) G3b9c@ls/false) ((lambda (G3ba2@t) ((lambda (G3ba4@ls/false) (if G3ba4@ls/false (apply (lambda (G3ba6@name) (list 'immutable G3ba6@name)) G3ba4@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3ba2@t))) (G305f@syntax-dispatch G3ba2@t 'any))) G3b9a@t))) (G305f@syntax-dispatch G3b9a@t '(#(scheme-id immutable) any . any)))) G3b92@t))) (G305f@syntax-dispatch G3b92@t '(#(scheme-id mutable) any . any)))) G3b90@x)) G3b8e@ls)))) ((lambda (G3b5e@uid-code G3b5f@sealed? G3b60@opaque? G3b61@fields) (G3015@bless (list 'make-record-type-descriptor (list 'quote G3b56@name) G3b58@parent-rtd-code G3b5e@uid-code G3b5f@sealed? G3b60@opaque? G3b61@fields))) ((lambda (G3b66@t) ((lambda (G3b68@ls/false) (if G3b68@ls/false (apply (lambda () (list 'quote (gensym))) G3b68@ls/false) ((lambda (G3b6a@t) ((lambda (G3b6c@ls/false) (if G3b6c@ls/false (apply (lambda (G3b6e@uid) (list 'quote G3b6e@uid)) G3b6c@ls/false) ((lambda (G3b70@t) ((lambda (G3b72@ls/false) (if G3b72@ls/false (apply (lambda () '#f) G3b72@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3b70@t))) (G305f@syntax-dispatch G3b70@t '_))) G3b6a@t))) (G305f@syntax-dispatch G3b6a@t '(_ any)))) G3b66@t))) (G305f@syntax-dispatch G3b66@t '(_)))) (G3a05@get-clause 'nongenerative G3b57@clause*)) ((lambda (G3b74@t) ((lambda (G3b76@ls/false) (if G3b76@ls/false (apply (lambda () '#t) G3b76@ls/false) ((lambda (G3b78@t) ((lambda (G3b7a@ls/false) (if G3b7a@ls/false (apply (lambda () '#f) G3b7a@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3b78@t))) (G305f@syntax-dispatch G3b78@t '_))) G3b74@t))) (G305f@syntax-dispatch G3b74@t '(_ #(atom #t))))) (G3a05@get-clause 'sealed G3b57@clause*)) ((lambda (G3b7c@t) ((lambda (G3b7e@ls/false) (if G3b7e@ls/false (apply (lambda () '#t) G3b7e@ls/false) ((lambda (G3b80@t) ((lambda (G3b82@ls/false) (if G3b82@ls/false (apply (lambda () '#f) G3b82@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3b80@t))) (G305f@syntax-dispatch G3b80@t '_))) G3b7c@t))) (G305f@syntax-dispatch G3b7c@t '(_ #(atom #t))))) (G3a05@get-clause 'opaque G3b57@clause*)) ((lambda (G3b84@t) ((lambda (G3b86@ls/false) (if G3b86@ls/false (apply (lambda (G3b88@field-spec*) (list 'quote (G3b5d@convert-field-spec* G3b88@field-spec*))) G3b86@ls/false) ((lambda (G3b8a@t) ((lambda (G3b8c@ls/false) (if G3b8c@ls/false (apply (lambda () ''#()) G3b8c@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3b8a@t))) (G305f@syntax-dispatch G3b8a@t '_))) G3b84@t))) (G305f@syntax-dispatch G3b84@t '(_ . each-any)))) (G3a05@get-clause 'fields G3b57@clause*))))) '#f))) (set! G3a09@parent-rtd-code (lambda (G3b3e@clause*) ((lambda (G3b40@t) ((lambda (G3b42@ls/false) (if G3b42@ls/false (apply (lambda (G3b44@name) (list 'record-type-descriptor G3b44@name)) G3b42@ls/false) ((lambda (G3b46@t) ((lambda (G3b48@ls/false) (if G3b48@ls/false (apply (lambda () ((lambda (G3b4a@t) ((lambda (G3b4c@ls/false) (if G3b4c@ls/false (apply (lambda (G3b4e@rtd G3b4f@rcd) G3b4e@rtd) G3b4c@ls/false) ((lambda (G3b52@t) ((lambda (G3b54@ls/false) (if G3b54@ls/false (apply (lambda () '#f) G3b54@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3b52@t))) (G305f@syntax-dispatch G3b52@t '#(atom #f)))) G3b4a@t))) (G305f@syntax-dispatch G3b4a@t '(_ any any)))) (G3a05@get-clause 'parent-rtd G3b3e@clause*))) G3b48@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3b46@t))) (G305f@syntax-dispatch G3b46@t '#(atom #f)))) G3b40@t))) (G305f@syntax-dispatch G3b40@t '(_ any)))) (G3a05@get-clause 'parent G3b3e@clause*)))) (set! G3a0b@parent-rcd-code (lambda (G3b26@clause*) ((lambda (G3b28@t) ((lambda (G3b2a@ls/false) (if G3b2a@ls/false (apply (lambda (G3b2c@name) (list 'record-constructor-descriptor G3b2c@name)) G3b2a@ls/false) ((lambda (G3b2e@t) ((lambda (G3b30@ls/false) (if G3b30@ls/false (apply (lambda () ((lambda (G3b32@t) ((lambda (G3b34@ls/false) (if G3b34@ls/false (apply (lambda (G3b36@rtd G3b37@rcd) G3b37@rcd) G3b34@ls/false) ((lambda (G3b3a@t) ((lambda (G3b3c@ls/false) (if G3b3c@ls/false (apply (lambda () '#f) G3b3c@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3b3a@t))) (G305f@syntax-dispatch G3b3a@t '#(atom #f)))) G3b32@t))) (G305f@syntax-dispatch G3b32@t '(_ any any)))) (G3a05@get-clause 'parent-rtd G3b26@clause*))) G3b30@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3b2e@t))) (G305f@syntax-dispatch G3b2e@t '#(atom #f)))) G3b28@t))) (G305f@syntax-dispatch G3b28@t '(_ any)))) (G3a05@get-clause 'parent G3b26@clause*)))) (set! G3a0d@foo-rcd-code (lambda (G3b1e@clause* G3b1f@foo-rtd G3b20@protocol G3b21@parent-rcd-code) (list 'make-record-constructor-descriptor G3b1f@foo-rtd G3b21@parent-rcd-code G3b20@protocol))) (set! G3a0f@get-protocol-code (lambda (G3b12@clause*) ((lambda (G3b14@t) ((lambda (G3b16@ls/false) (if G3b16@ls/false (apply (lambda (G3b18@expr) G3b18@expr) G3b16@ls/false) ((lambda (G3b1a@t) ((lambda (G3b1c@ls/false) (if G3b1c@ls/false (apply (lambda () '#f) G3b1c@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3b1a@t))) (G305f@syntax-dispatch G3b1a@t '_))) G3b14@t))) (G305f@syntax-dispatch G3b14@t '(_ any)))) (G3a05@get-clause 'protocol G3b12@clause*)))) (set! G3a11@get-fields (lambda (G3b00@clause*) ((lambda (G3b02@t) ((lambda (G3b04@ls/false) (if G3b04@ls/false (apply (lambda () '()) G3b04@ls/false) ((lambda (G3b06@t) ((lambda (G3b08@ls/false) (if G3b08@ls/false (apply (lambda (G3b0a@f*) G3b0a@f*) G3b08@ls/false) ((lambda (G3b0c@t) ((lambda (G3b0e@ls/false) (if G3b0e@ls/false (apply (lambda (G3b10@rest) (G3a11@get-fields G3b10@rest)) G3b0e@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3b0c@t))) (G305f@syntax-dispatch G3b0c@t '(_ . any)))) G3b06@t))) (G305f@syntax-dispatch G3b06@t '((#(scheme-id fields) . each-any) . _)))) G3b02@t))) (G305f@syntax-dispatch G3b02@t '()))) G3b00@clause*))) (set! G3a13@get-mutator-indices (lambda (G3ae8@fields) ((letrec ((G3aea@f (lambda (G3aec@fields G3aed@i) ((lambda (G3af0@t) ((lambda (G3af2@ls/false) (if G3af2@ls/false (apply (lambda () '()) G3af2@ls/false) ((lambda (G3af4@t) ((lambda (G3af6@ls/false) (if G3af6@ls/false (apply (lambda (G3af8@rest) (cons G3aed@i (G3aea@f G3af8@rest (+ G3aed@i '1)))) G3af6@ls/false) ((lambda (G3afa@t) ((lambda (G3afc@ls/false) (if G3afc@ls/false (apply (lambda (G3afe@rest) (G3aea@f G3afe@rest (+ G3aed@i '1))) G3afc@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3afa@t))) (G305f@syntax-dispatch G3afa@t '(_ . any)))) G3af4@t))) (G305f@syntax-dispatch G3af4@t '((#(scheme-id mutable) . _) . any)))) G3af0@t))) (G305f@syntax-dispatch G3af0@t '()))) G3aec@fields)))) G3aea@f) G3ae8@fields '0))) (set! G3a15@get-mutators (lambda (G3abe@foo G3abf@fields) ((lambda (G3ac3@gen-name) (begin (set! G3ac3@gen-name (lambda (G3ae6@x) (G3156@datum->syntax G3abe@foo (string->symbol (string-append (symbol->string (G3158@syntax->datum G3abe@foo)) '"-" (symbol->string (G3158@syntax->datum G3ae6@x)) '"-set!"))))) ((letrec ((G3ac4@f (lambda (G3ac6@fields) ((lambda (G3ac8@t) ((lambda (G3aca@ls/false) (if G3aca@ls/false (apply (lambda () '()) G3aca@ls/false) ((lambda (G3acc@t) ((lambda (G3ace@ls/false) (if G3ace@ls/false (apply (lambda (G3ad0@name G3ad1@accessor G3ad2@mutator G3ad3@rest) (cons G3ad2@mutator (G3ac4@f G3ad3@rest))) G3ace@ls/false) ((lambda (G3ad8@t) ((lambda (G3ada@ls/false) (if G3ada@ls/false (apply (lambda (G3adc@name G3add@rest) (cons (G3ac3@gen-name G3adc@name) (G3ac4@f G3add@rest))) G3ada@ls/false) ((lambda (G3ae0@t) ((lambda (G3ae2@ls/false) (if G3ae2@ls/false (apply (lambda (G3ae4@rest) (G3ac4@f G3ae4@rest)) G3ae2@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3ae0@t))) (G305f@syntax-dispatch G3ae0@t '(_ . any)))) G3ad8@t))) (G305f@syntax-dispatch G3ad8@t '((#(scheme-id mutable) any) . any)))) G3acc@t))) (G305f@syntax-dispatch G3acc@t '((#(scheme-id mutable) any any any) . any)))) G3ac8@t))) (G305f@syntax-dispatch G3ac8@t '()))) G3ac6@fields)))) G3ac4@f) G3abf@fields))) '#f))) (set! G3a17@get-accessors (lambda (G3a7a@foo G3a7b@fields) ((lambda (G3a7f@gen-name) (begin (set! G3a7f@gen-name (lambda (G3abc@x) (G3156@datum->syntax G3a7a@foo (string->symbol (string-append (symbol->string (G3158@syntax->datum G3a7a@foo)) '"-" (symbol->string (G3158@syntax->datum G3abc@x))))))) (map (lambda (G3a80@field) ((lambda (G3a82@t) ((lambda (G3a84@ls/false) (if (if G3a84@ls/false (begin '#f (apply (lambda (G3a86@name G3a87@accessor G3a88@mutator) (G2e1c@id? G3a87@accessor)) G3a84@ls/false)) '#f) (apply (lambda (G3a8c@name G3a8d@accessor G3a8e@mutator) G3a8d@accessor) G3a84@ls/false) ((lambda (G3a92@t) ((lambda (G3a94@ls/false) (if (if G3a94@ls/false (begin '#f (apply (lambda (G3a96@name G3a97@accessor) (G2e1c@id? G3a97@accessor)) G3a94@ls/false)) '#f) (apply (lambda (G3a9a@name G3a9b@accessor) G3a9b@accessor) G3a94@ls/false) ((lambda (G3a9e@t) ((lambda (G3aa0@ls/false) (if (if G3aa0@ls/false (begin '#f (apply (lambda (G3aa2@name) (G2e1c@id? G3aa2@name)) G3aa0@ls/false)) '#f) (apply (lambda (G3aa4@name) (G3a7f@gen-name G3aa4@name)) G3aa0@ls/false) ((lambda (G3aa6@t) ((lambda (G3aa8@ls/false) (if (if G3aa8@ls/false (begin '#f (apply (lambda (G3aaa@name) (G2e1c@id? G3aaa@name)) G3aa8@ls/false)) '#f) (apply (lambda (G3aac@name) (G3a7f@gen-name G3aac@name)) G3aa8@ls/false) ((lambda (G3aae@t) ((lambda (G3ab0@ls/false) (if (if G3ab0@ls/false (begin '#f (apply (lambda (G3ab2@name) (G2e1c@id? G3ab2@name)) G3ab0@ls/false)) '#f) (apply (lambda (G3ab4@name) (G3a7f@gen-name G3ab4@name)) G3ab0@ls/false) ((lambda (G3ab6@t) ((lambda (G3ab8@ls/false) (if G3ab8@ls/false (apply (lambda (G3aba@others) (G3152@syntax-violation '#f '"invalid field spec" G3a80@field)) G3ab8@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3ab6@t))) (G305f@syntax-dispatch G3ab6@t 'any))) G3aae@t))) (G305f@syntax-dispatch G3aae@t 'any))) G3aa6@t))) (G305f@syntax-dispatch G3aa6@t '(#(scheme-id immutable) any)))) G3a9e@t))) (G305f@syntax-dispatch G3a9e@t '(#(scheme-id mutable) any)))) G3a92@t))) (G305f@syntax-dispatch G3a92@t '(#(scheme-id immutable) any any)))) G3a82@t))) (G305f@syntax-dispatch G3a82@t '(#(scheme-id mutable) any any any)))) G3a80@field)) G3a7b@fields))) '#f))) (set! G3a19@enumerate (lambda (G3a72@ls) ((letrec ((G3a74@f (lambda (G3a76@ls G3a77@i) (if (null? G3a76@ls) '() (cons G3a77@i (G3a74@f (cdr G3a76@ls) (+ G3a77@i '1))))))) G3a74@f) G3a72@ls '0))) (set! G3a1b@do-define-record (lambda (G3a4a@namespec G3a4b@clause*) ((lambda (G3a4e@foo) ((lambda (G3a50@foo-rtd) ((lambda (G3a52@foo-rcd) ((lambda (G3a54@protocol) ((lambda (G3a56@make-foo) ((lambda (G3a58@fields) ((lambda (G3a5a@idx*) ((lambda (G3a5c@foo-x*) ((lambda (G3a5e@set-foo-x!*) ((lambda (G3a60@set-foo-idx*) ((lambda (G3a62@foo?) ((lambda (G3a64@foo-rtd-code) ((lambda (G3a66@foo-rcd-code) ((lambda (G3a68@protocol-code) ((lambda () (G3015@bless (cons 'begin (cons (list 'define G3a50@foo-rtd G3a64@foo-rtd-code) (cons (list 'define G3a54@protocol G3a68@protocol-code) (cons (list 'define G3a52@foo-rcd G3a66@foo-rcd-code) (cons (list 'define-syntax G3a4e@foo (list 'list ''$rtd (list 'syntax G3a50@foo-rtd) (list 'syntax G3a52@foo-rcd))) (cons (list 'define G3a62@foo? (list 'record-predicate G3a50@foo-rtd)) (cons (list 'define G3a56@make-foo (list 'record-constructor G3a52@foo-rcd)) (append (map (lambda (G3a6a@foo-x G3a6b@idx) (list 'define G3a6a@foo-x (list 'record-accessor G3a50@foo-rtd G3a6b@idx))) G3a5c@foo-x* G3a5a@idx*) (map (lambda (G3a6e@set-foo-x! G3a6f@idx) (list 'define G3a6e@set-foo-x! (list 'record-mutator G3a50@foo-rtd G3a6f@idx))) G3a5e@set-foo-x!* G3a60@set-foo-idx*))))))))))))) (G3a0f@get-protocol-code G3a4b@clause*))) (G3a0d@foo-rcd-code G3a4b@clause* G3a50@foo-rtd G3a54@protocol (G3a0b@parent-rcd-code G3a4b@clause*)))) (G3a07@foo-rtd-code G3a4e@foo G3a4b@clause* (G3a09@parent-rtd-code G3a4b@clause*)))) (G3a03@get-record-predicate-name G3a4a@namespec))) (G3a13@get-mutator-indices G3a58@fields))) (G3a15@get-mutators G3a4e@foo G3a58@fields))) (G3a17@get-accessors G3a4e@foo G3a58@fields))) (G3a19@enumerate G3a58@fields))) (G3a11@get-fields G3a4b@clause*))) (G3a01@get-record-constructor-name G3a4a@namespec))) (gensym))) (gensym))) (gensym))) (G39ff@get-record-name G3a4a@namespec)))) (set! G3a1d@verify-clauses (lambda (G3a26@x G3a27@cls*) ((lambda (G3a2b@valid-kwds G3a2d@free-id-member?) (begin (set! G3a2b@valid-kwds (map G3015@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3a2d@free-id-member? (lambda (G3a44@x G3a45@ls) (if (pair? G3a45@ls) (begin '#f ((lambda (G3a48@t) (if G3a48@t G3a48@t (begin '#f (G3a2d@free-id-member? G3a44@x (cdr G3a45@ls))))) (G2e24@free-id=? G3a44@x (car G3a45@ls)))) '#f))) ((letrec ((G3a2e@f (lambda (G3a30@cls* G3a31@seen*) (if (not (null? G3a30@cls*)) ((lambda (G3a34@t) ((lambda (G3a36@ls/false) (if G3a36@ls/false (apply (lambda (G3a38@kwd G3a39@rest) (if ((lambda (G3a3c@t) (if G3a3c@t G3a3c@t (begin '#f (not (G3a2d@free-id-member? G3a38@kwd G3a2b@valid-kwds))))) (not (G2e1c@id? G3a38@kwd))) (G3152@syntax-violation '#f '"not a valid define-record-type keyword" G3a38@kwd) (if (G2e2a@bound-id-member? G3a38@kwd G3a31@seen*) (G3152@syntax-violation '#f '"duplicate use of keyword " G3a26@x G3a38@kwd) (G3a2e@f (cdr G3a30@cls*) (cons G3a38@kwd G3a31@seen*))))) G3a36@ls/false) ((lambda (G3a3e@t) ((lambda (G3a40@ls/false) (if G3a40@ls/false (apply (lambda (G3a42@cls) (G3152@syntax-violation '#f '"malformed define-record-type clause" G3a42@cls)) G3a40@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3a3e@t))) (G305f@syntax-dispatch G3a3e@t 'any))) G3a34@t))) (G305f@syntax-dispatch G3a34@t '(any . any)))) (car G3a30@cls*)) (void))))) G3a2e@f) G3a27@cls* '()))) '#f '#f))) ((lambda (G3a1e@t) ((lambda (G3a20@ls/false) (if G3a20@ls/false (apply (lambda (G3a22@namespec G3a23@clause*) (begin (G3a1d@verify-clauses G39fa@x G3a23@clause*) (G3a1b@do-define-record G3a22@namespec G3a23@clause*))) G3a20@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3a1e@t))) (G305f@syntax-dispatch G3a1e@t '(_ any . each-any)))) G39fa@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3055@define-condition-type-macro (lambda (G3bfa@x) ((lambda (G3bfd@mkname) (begin (set! G3bfd@mkname (lambda (G3c2a@name G3c2b@suffix) (G3156@datum->syntax G3c2a@name (string->symbol (string-append (symbol->string (G3158@syntax->datum G3c2a@name)) G3c2b@suffix))))) ((lambda (G3bfe@t) ((lambda (G3c00@ls/false) (if (if G3c00@ls/false (begin '#f (apply (lambda (G3c02@ctxt G3c03@name G3c04@super G3c05@constructor G3c06@predicate G3c07@field* G3c08@accessor*) (if (G2e1c@id? G3c03@name) (if (G2e1c@id? G3c04@super) (if (G2e1c@id? G3c05@constructor) (if (G2e1c@id? G3c06@predicate) (if (for-all G2e1c@id? G3c07@field*) (begin '#f (for-all G2e1c@id? G3c08@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3c00@ls/false)) '#f) (apply (lambda (G3c10@ctxt G3c11@name G3c12@super G3c13@constructor G3c14@predicate G3c15@field* G3c16@accessor*) ((lambda (G3c1e@aux-accessor*) (G3015@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3c11@name G3c13@constructor (gensym)) (cons (list 'parent G3c12@super) (cons (cons 'fields (map (lambda (G3c20@field G3c21@aux) (list 'immutable G3c20@field G3c21@aux)) G3c15@field* G3c1e@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3c14@predicate (list 'condition-predicate (list 'record-type-descriptor G3c11@name))) (map (lambda (G3c24@accessor G3c25@aux) (list 'define G3c24@accessor (list 'condition-accessor (list 'record-type-descriptor G3c11@name) G3c25@aux))) G3c16@accessor* G3c1e@aux-accessor*)))))) (map (lambda (G3c28@x) (gensym)) G3c16@accessor*))) G3c00@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3bfe@t))) (G305f@syntax-dispatch G3bfe@t '(any any any any any . #(each (any any)))))) G3bfa@x))) '#f))) (set! G3057@incorrect-usage-macro (lambda (G3c2e@e) (G3152@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3c2e@e))) (set! G3059@parameterize-macro (lambda (G3c30@e) ((lambda (G3c32@t) ((lambda (G3c34@ls/false) (if G3c34@ls/false (apply (lambda (G3c36@b G3c37@b*) (G3015@bless (cons 'let (cons '() (cons G3c36@b G3c37@b*))))) G3c34@ls/false) ((lambda (G3c3a@t) ((lambda (G3c3c@ls/false) (if G3c3c@ls/false (apply (lambda (G3c3e@olhs* G3c3f@orhs* G3c40@b G3c41@b*) ((lambda (G3c46@lhs* G3c47@rhs*) (G3015@bless (cons (list 'lambda (append G3c46@lhs* G3c47@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3c4a@lhs G3c4b@rhs) (list 'let (list (list 't (list G3c4a@lhs))) (list G3c4a@lhs G3c4b@rhs) (cons 'set! (cons G3c4b@rhs '(t))))) G3c46@lhs* G3c47@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3c40@b G3c41@b*))) '(swap)))))) (append G3c3e@olhs* G3c3f@orhs*)))) (G313e@generate-temporaries G3c3e@olhs*) (G313e@generate-temporaries G3c3f@orhs*))) G3c3c@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3c3a@t))) (G305f@syntax-dispatch G3c3a@t '(_ #(each (any any)) any . each-any)))) G3c32@t))) (G305f@syntax-dispatch G3c32@t '(_ () any . each-any)))) G3c30@e))) (set! G305b@foreign-call-transformer (lambda (G3c4e@e G3c4f@r G3c50@mr) ((lambda (G3c54@t) ((lambda (G3c56@ls/false) (if G3c56@ls/false (apply (lambda (G3c58@name G3c59@arg*) (cons 'foreign-call (cons (G3083@chi-expr G3c58@name G3c4f@r G3c50@mr) (G307f@chi-expr* G3c59@arg* G3c4f@r G3c50@mr)))) G3c56@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3c54@t))) (G305f@syntax-dispatch G3c54@t '(_ any . each-any)))) G3c4e@e))) (set! G305d@convert-pattern (lambda (G3c5c@pattern G3c5d@keys) ((lambda (G3c61@cvt* G3c63@cvt) (begin (set! G3c61@cvt* (lambda (G3cf2@p* G3cf3@n G3cf4@ids) (if (null? G3cf2@p*) (values '() G3cf4@ids) (call-with-values (lambda () (G3c61@cvt* (cdr G3cf2@p*) G3cf3@n G3cf4@ids)) (lambda (G3cfa@G3cf8 G3cfb@G3cf9) ((lambda (G3cfe@ids G3cff@y) (call-with-values (lambda () (G3c63@cvt (car G3cf2@p*) G3cf3@n G3cfe@ids)) (lambda (G3d04@G3d02 G3d05@G3d03) ((lambda (G3d08@ids G3d09@x) (values (cons G3d09@x G3cff@y) G3d08@ids)) G3d05@G3d03 G3d04@G3d02)))) G3cfb@G3cf9 G3cfa@G3cf8)))))) (set! G3c63@cvt (lambda (G3c64@p G3c65@n G3c66@ids) ((lambda (G3c6a@t) ((lambda (G3c6c@ls/false) (if (if G3c6c@ls/false (begin '#f (apply (lambda (G3c6e@id) (G2e1c@id? G3c6e@id)) G3c6c@ls/false)) '#f) (apply (lambda (G3c70@id) (if (G2e2a@bound-id-member? G3c64@p G3c5d@keys) (values (vector 'free-id G3c64@p) G3c66@ids) (if (G2e24@free-id=? G3c64@p (G2fed@scheme-stx '_)) (values '_ G3c66@ids) (values 'any (cons (cons G3c64@p G3c65@n) G3c66@ids))))) G3c6c@ls/false) ((lambda (G3c72@t) ((lambda (G3c74@ls/false) (if (if G3c74@ls/false (begin '#f (apply (lambda (G3c76@p G3c77@dots) (G3061@ellipsis? G3c77@dots)) G3c74@ls/false)) '#f) (apply (lambda (G3c7a@p G3c7b@dots) (call-with-values (lambda () (G3c63@cvt G3c7a@p (+ G3c65@n '1) G3c66@ids)) (lambda (G3c80@G3c7e G3c81@G3c7f) ((lambda (G3c84@ids G3c85@p) (values (if (eq? G3c85@p 'any) 'each-any (vector 'each G3c85@p)) G3c84@ids)) G3c81@G3c7f G3c80@G3c7e)))) G3c74@ls/false) ((lambda (G3c88@t) ((lambda (G3c8a@ls/false) (if (if G3c8a@ls/false (begin '#f (apply (lambda (G3c8c@x G3c8d@dots G3c8e@ys G3c8f@z) (G3061@ellipsis? G3c8d@dots)) G3c8a@ls/false)) '#f) (apply (lambda (G3c94@x G3c95@dots G3c96@ys G3c97@z) (call-with-values (lambda () (G3c63@cvt G3c97@z G3c65@n G3c66@ids)) (lambda (G3c9e@G3c9c G3c9f@G3c9d) ((lambda (G3ca2@ids G3ca3@z) (call-with-values (lambda () (G3c61@cvt* G3c96@ys G3c65@n G3ca2@ids)) (lambda (G3ca8@G3ca6 G3ca9@G3ca7) ((lambda (G3cac@ids G3cad@ys) (call-with-values (lambda () (G3c63@cvt G3c94@x (+ G3c65@n '1) G3cac@ids)) (lambda (G3cb2@G3cb0 G3cb3@G3cb1) ((lambda (G3cb6@ids G3cb7@x) (values (vector 'each+ G3cb7@x (reverse G3cad@ys) G3ca3@z) G3cb6@ids)) G3cb3@G3cb1 G3cb2@G3cb0)))) G3ca9@G3ca7 G3ca8@G3ca6)))) G3c9f@G3c9d G3c9e@G3c9c)))) G3c8a@ls/false) ((lambda (G3cba@t) ((lambda (G3cbc@ls/false) (if G3cbc@ls/false (apply (lambda (G3cbe@x G3cbf@y) (call-with-values (lambda () (G3c63@cvt G3cbf@y G3c65@n G3c66@ids)) (lambda (G3cc4@G3cc2 G3cc5@G3cc3) ((lambda (G3cc8@ids G3cc9@y) (call-with-values (lambda () (G3c63@cvt G3cbe@x G3c65@n G3cc8@ids)) (lambda (G3cce@G3ccc G3ccf@G3ccd) ((lambda (G3cd2@ids G3cd3@x) (values (cons G3cd3@x G3cc9@y) G3cd2@ids)) G3ccf@G3ccd G3cce@G3ccc)))) G3cc5@G3cc3 G3cc4@G3cc2)))) G3cbc@ls/false) ((lambda (G3cd6@t) ((lambda (G3cd8@ls/false) (if G3cd8@ls/false (apply (lambda () (values '() G3c66@ids)) G3cd8@ls/false) ((lambda (G3cda@t) ((lambda (G3cdc@ls/false) (if (if G3cdc@ls/false (begin '#f (apply (lambda (G3cde@p) (not (G2de4@stx? G3cde@p))) G3cdc@ls/false)) '#f) (apply (lambda (G3ce0@p) (call-with-values (lambda () (G3c63@cvt G3ce0@p G3c65@n G3c66@ids)) (lambda (G3ce4@G3ce2 G3ce5@G3ce3) ((lambda (G3ce8@ids G3ce9@p) (values (vector 'vector G3ce9@p) G3ce8@ids)) G3ce5@G3ce3 G3ce4@G3ce2)))) G3cdc@ls/false) ((lambda (G3cec@t) ((lambda (G3cee@ls/false) (if G3cee@ls/false (apply (lambda (G3cf0@datum) (values (vector 'atom (G2e32@stx->datum G3cf0@datum)) G3c66@ids)) G3cee@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3cec@t))) (G305f@syntax-dispatch G3cec@t 'any))) G3cda@t))) (G305f@syntax-dispatch G3cda@t '#(vector each-any)))) G3cd6@t))) (G305f@syntax-dispatch G3cd6@t '()))) G3cba@t))) (G305f@syntax-dispatch G3cba@t '(any . any)))) G3c88@t))) (G305f@syntax-dispatch G3c88@t '(any any . #(each+ any () any))))) G3c72@t))) (G305f@syntax-dispatch G3c72@t '(any any)))) G3c6a@t))) (G305f@syntax-dispatch G3c6a@t 'any))) G3c64@p))) (G3c63@cvt G3c5c@pattern '0 '()))) '#f '#f))) (set! G305f@syntax-dispatch ((lambda () ((lambda (G3d0d@stx^ G3d0f@match-each G3d11@match-each+ G3d13@match-each-any G3d15@match-empty G3d17@combine G3d19@match* G3d1b@match) (begin (set! G3d0d@stx^ (lambda (G3dd6@e G3dd7@m* G3dd8@s* G3dd9@ae*) (if (if (null? G3dd7@m*) (if (null? G3dd8@s*) (begin '#f (null? G3dd9@ae*)) '#f) '#f) G3dd6@e (G2e04@mkstx G3dd6@e G3dd7@m* G3dd8@s* G3dd9@ae*)))) (set! G3d0f@match-each (lambda (G3db9@e G3dba@p G3dbb@m* G3dbc@s* G3dbd@ae*) (if (pair? G3db9@e) ((lambda (G3dc3@first) (if G3dc3@first (begin '#f ((lambda (G3dc5@rest) (if G3dc5@rest (begin '#f (cons G3dc3@first G3dc5@rest)) '#f)) (G3d0f@match-each (cdr G3db9@e) G3dba@p G3dbb@m* G3dbc@s* G3dbd@ae*))) '#f)) (G3d1b@match (car G3db9@e) G3dba@p G3dbb@m* G3dbc@s* G3dbd@ae* '())) (if (null? G3db9@e) '() (if (G2de4@stx? G3db9@e) (if (not (G2d92@top-marked? G3dbb@m*)) (begin '#f (call-with-values (lambda () (G2e02@join-wraps G3dbb@m* G3dbc@s* G3dbd@ae* G3db9@e)) (lambda (G3dca@G3dc7 G3dcb@G3dc8 G3dcc@G3dc9) ((lambda (G3dd0@ae* G3dd1@s* G3dd2@m*) (G3d0f@match-each (G2de8@stx-expr G3db9@e) G3dba@p G3dd2@m* G3dd1@s* G3dd0@ae*)) G3dcc@G3dc9 G3dcb@G3dc8 G3dca@G3dc7)))) '#f) (if (G2966@G2875@annotation? G3db9@e) (G3d0f@match-each (G2968@G2879@annotation-expression G3db9@e) G3dba@p G3dbb@m* G3dbc@s* G3dbd@ae*) '#f)))))) (set! G3d11@match-each+ (lambda (G3d7f@e G3d80@x-pat G3d81@y-pat G3d82@z-pat G3d83@m* G3d84@s* G3d85@ae* G3d86@r) ((letrec ((G3d8f@f (lambda (G3d91@e G3d92@m* G3d93@s* G3d94@ae*) (if (pair? G3d91@e) (call-with-values (lambda () (G3d8f@f (cdr G3d91@e) G3d92@m* G3d93@s* G3d94@ae*)) (lambda (G3d9c@G3d99 G3d9d@G3d9a G3d9e@G3d9b) ((lambda (G3da2@r G3da3@y-pat G3da4@xr*) (if G3da2@r (if (null? G3da3@y-pat) ((lambda (G3da8@xr) (if G3da8@xr (values (cons G3da8@xr G3da4@xr*) G3da3@y-pat G3da2@r) (values '#f '#f '#f))) (G3d1b@match (car G3d91@e) G3d80@x-pat G3d92@m* G3d93@s* G3d94@ae* '())) (values '() (cdr G3da3@y-pat) (G3d1b@match (car G3d91@e) (car G3da3@y-pat) G3d92@m* G3d93@s* G3d94@ae* G3da2@r))) (values '#f '#f '#f))) G3d9e@G3d9b G3d9d@G3d9a G3d9c@G3d99))) (if (G2de4@stx? G3d91@e) (if (G2d92@top-marked? G3d92@m*) (values '() G3d81@y-pat (G3d1b@match G3d91@e G3d82@z-pat G3d92@m* G3d93@s* G3d94@ae* G3d86@r)) (call-with-values (lambda () (G2e02@join-wraps G3d92@m* G3d93@s* G3d94@ae* G3d91@e)) (lambda (G3dad@G3daa G3dae@G3dab G3daf@G3dac) ((lambda (G3db3@ae* G3db4@s* G3db5@m*) (G3d8f@f (G2de8@stx-expr G3d91@e) G3db5@m* G3db4@s* G3db3@ae*)) G3daf@G3dac G3dae@G3dab G3dad@G3daa)))) (if (G2966@G2875@annotation? G3d91@e) (G3d8f@f (G2968@G2879@annotation-expression G3d91@e) G3d92@m* G3d93@s* G3d94@ae*) (values '() G3d81@y-pat (G3d1b@match G3d91@e G3d82@z-pat G3d92@m* G3d93@s* G3d94@ae* G3d86@r)))))))) G3d8f@f) G3d7f@e G3d83@m* G3d84@s* G3d85@ae*))) (set! G3d13@match-each-any (lambda (G3d66@e G3d67@m* G3d68@s* G3d69@ae*) (if (pair? G3d66@e) ((lambda (G3d6e@l) (if G3d6e@l (begin '#f (cons (G3d0d@stx^ (car G3d66@e) G3d67@m* G3d68@s* G3d69@ae*) G3d6e@l)) '#f)) (G3d13@match-each-any (cdr G3d66@e) G3d67@m* G3d68@s* G3d69@ae*)) (if (null? G3d66@e) '() (if (G2de4@stx? G3d66@e) (if (not (G2d92@top-marked? G3d67@m*)) (begin '#f (call-with-values (lambda () (G2e02@join-wraps G3d67@m* G3d68@s* G3d69@ae* G3d66@e)) (lambda (G3d73@G3d70 G3d74@G3d71 G3d75@G3d72) ((lambda (G3d79@ae* G3d7a@s* G3d7b@m*) (G3d13@match-each-any (G2de8@stx-expr G3d66@e) G3d7b@m* G3d7a@s* G3d79@ae*)) G3d75@G3d72 G3d74@G3d71 G3d73@G3d70)))) '#f) (if (G2966@G2875@annotation? G3d66@e) (G3d13@match-each-any (G2968@G2879@annotation-expression G3d66@e) G3d67@m* G3d68@s* G3d69@ae*) '#f)))))) (set! G3d15@match-empty (lambda (G3d60@p G3d61@r) (if (null? G3d60@p) G3d61@r (if (eq? G3d60@p '_) G3d61@r (if (eq? G3d60@p 'any) (cons '() G3d61@r) (if (pair? G3d60@p) (G3d15@match-empty (car G3d60@p) (G3d15@match-empty (cdr G3d60@p) G3d61@r)) (if (eq? G3d60@p 'each-any) (cons '() G3d61@r) ((lambda (G3d64@t) (if (memv G3d64@t '(each)) (G3d15@match-empty (vector-ref G3d60@p '1) G3d61@r) (if (memv G3d64@t '(each+)) (G3d15@match-empty (vector-ref G3d60@p '1) (G3d15@match-empty (reverse (vector-ref G3d60@p '2)) (G3d15@match-empty (vector-ref G3d60@p '3) G3d61@r))) (if (memv G3d64@t '(free-id atom)) G3d61@r (if (memv G3d64@t '(scheme-id atom)) G3d61@r (if (memv G3d64@t '(vector)) (G3d15@match-empty (vector-ref G3d60@p '1) G3d61@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d60@p))))))) (vector-ref G3d60@p '0))))))))) (set! G3d17@combine (lambda (G3d5c@r* G3d5d@r) (if (null? (car G3d5c@r*)) G3d5d@r (cons (map car G3d5c@r*) (G3d17@combine (map cdr G3d5c@r*) G3d5d@r))))) (set! G3d19@match* (lambda (G3d3b@e G3d3c@p G3d3d@m* G3d3e@s* G3d3f@ae* G3d40@r) (if (null? G3d3c@p) (if (null? G3d3b@e) (begin '#f G3d40@r) '#f) (if (pair? G3d3c@p) (if (pair? G3d3b@e) (begin '#f (G3d1b@match (car G3d3b@e) (car G3d3c@p) G3d3d@m* G3d3e@s* G3d3f@ae* (G3d1b@match (cdr G3d3b@e) (cdr G3d3c@p) G3d3d@m* G3d3e@s* G3d3f@ae* G3d40@r))) '#f) (if (eq? G3d3c@p 'each-any) ((lambda (G3d47@l) (if G3d47@l (begin '#f (cons G3d47@l G3d40@r)) '#f)) (G3d13@match-each-any G3d3b@e G3d3d@m* G3d3e@s* G3d3f@ae*)) ((lambda (G3d49@t) (if (memv G3d49@t '(each)) (if (null? G3d3b@e) (G3d15@match-empty (vector-ref G3d3c@p '1) G3d40@r) ((lambda (G3d4b@r*) (if G3d4b@r* (begin '#f (G3d17@combine G3d4b@r* G3d40@r)) '#f)) (G3d0f@match-each G3d3b@e (vector-ref G3d3c@p '1) G3d3d@m* G3d3e@s* G3d3f@ae*))) (if (memv G3d49@t '(free-id)) (if (symbol? G3d3b@e) (if (G2d92@top-marked? G3d3d@m*) (if (G2e24@free-id=? (G3d0d@stx^ G3d3b@e G3d3d@m* G3d3e@s* G3d3f@ae*) (vector-ref G3d3c@p '1)) (begin '#f G3d40@r) '#f) '#f) '#f) (if (memv G3d49@t '(scheme-id)) (if (symbol? G3d3b@e) (if (G2d92@top-marked? G3d3d@m*) (if (G2e24@free-id=? (G3d0d@stx^ G3d3b@e G3d3d@m* G3d3e@s* G3d3f@ae*) (G2fed@scheme-stx (vector-ref G3d3c@p '1))) (begin '#f G3d40@r) '#f) '#f) '#f) (if (memv G3d49@t '(each+)) (call-with-values (lambda () (G3d11@match-each+ G3d3b@e (vector-ref G3d3c@p '1) (vector-ref G3d3c@p '2) (vector-ref G3d3c@p '3) G3d3d@m* G3d3e@s* G3d3f@ae* G3d40@r)) (lambda (G3d50@G3d4d G3d51@G3d4e G3d52@G3d4f) ((lambda (G3d56@r G3d57@y-pat G3d58@xr*) (if G3d56@r (if (null? G3d57@y-pat) (begin '#f (if (null? G3d58@xr*) (G3d15@match-empty (vector-ref G3d3c@p '1) G3d56@r) (G3d17@combine G3d58@xr* G3d56@r))) '#f) '#f)) G3d52@G3d4f G3d51@G3d4e G3d50@G3d4d))) (if (memv G3d49@t '(atom)) (if (equal? (vector-ref G3d3c@p '1) (G2e30@strip G3d3b@e G3d3d@m*)) (begin '#f G3d40@r) '#f) (if (memv G3d49@t '(vector)) (if (vector? G3d3b@e) (begin '#f (G3d1b@match (vector->list G3d3b@e) (vector-ref G3d3c@p '1) G3d3d@m* G3d3e@s* G3d3f@ae* G3d40@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d3c@p)))))))) (vector-ref G3d3c@p '0))))))) (set! G3d1b@match (lambda (G3d20@e G3d21@p G3d22@m* G3d23@s* G3d24@ae* G3d25@r) (if (not G3d25@r) '#f (if (eq? G3d21@p '_) G3d25@r (if (eq? G3d21@p 'any) (cons (G3d0d@stx^ G3d20@e G3d22@m* G3d23@s* G3d24@ae*) G3d25@r) (if (G2de4@stx? G3d20@e) (if (not (G2d92@top-marked? G3d22@m*)) (begin '#f (call-with-values (lambda () (G2e02@join-wraps G3d22@m* G3d23@s* G3d24@ae* G3d20@e)) (lambda (G3d2f@G3d2c G3d30@G3d2d G3d31@G3d2e) ((lambda (G3d35@ae* G3d36@s* G3d37@m*) (G3d1b@match (G2de8@stx-expr G3d20@e) G3d21@p G3d37@m* G3d36@s* G3d35@ae* G3d25@r)) G3d31@G3d2e G3d30@G3d2d G3d2f@G3d2c)))) '#f) (if (G2966@G2875@annotation? G3d20@e) (G3d1b@match (G2968@G2879@annotation-expression G3d20@e) G3d21@p G3d22@m* G3d23@s* G3d24@ae* G3d25@r) (G3d19@match* G3d20@e G3d21@p G3d22@m* G3d23@s* G3d24@ae* G3d25@r)))))))) (lambda (G3d1c@e G3d1d@p) (G3d1b@match G3d1c@e G3d1d@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3061@ellipsis? (lambda (G3dde@x) (if (G2e1c@id? G3dde@x) (begin '#f (G2e24@free-id=? G3dde@x (G2fed@scheme-stx '...))) '#f))) (set! G3063@underscore? (lambda (G3de0@x) (if (G2e1c@id? G3de0@x) (begin '#f (G2e24@free-id=? G3de0@x (G2fed@scheme-stx '_))) '#f))) (set! G3065@verify-literals (lambda (G3de2@lits G3de3@expr) (for-each (lambda (G3de6@x) (if ((lambda (G3de8@t) (if G3de8@t G3de8@t ((lambda (G3dea@t) (if G3dea@t G3dea@t (begin '#f (G3063@underscore? G3de6@x)))) (G3061@ellipsis? G3de6@x)))) (not (G2e1c@id? G3de6@x))) (G3152@syntax-violation '#f '"invalid literal" G3de3@expr G3de6@x) (void))) G3de2@lits))) (set! G3067@syntax-case-transformer ((lambda () ((lambda (G3ded@build-dispatch-call G3def@invalid-ids-error G3df1@gen-clause G3df3@gen-syntax-case) (begin (set! G3ded@build-dispatch-call (lambda (G3e5c@pvars G3e5d@expr G3e5e@y G3e5f@r G3e60@mr) ((lambda (G3e66@ids G3e67@levels) ((lambda (G3e6a@labels G3e6b@new-vars) ((lambda (G3e6e@body) (list '(primitive apply) (G2d74@G2c9c@build-lambda '#f G3e6b@new-vars G3e6e@body) G3e5e@y)) (G3083@chi-expr (G2e08@add-subst (G2dd5@make-full-rib G3e66@ids G3e6a@labels) G3e5d@expr) (append (map (lambda (G3e70@label G3e71@var G3e72@level) (cons G3e70@label (G2e3c@make-binding 'syntax (cons G3e71@var G3e72@level)))) G3e6a@labels G3e6b@new-vars (map cdr G3e5c@pvars)) G3e5f@r) G3e60@mr))) (map G2d98@gen-label G3e66@ids) (map G2d94@gen-lexical G3e66@ids))) (map car G3e5c@pvars) (map cdr G3e5c@pvars)))) (set! G3def@invalid-ids-error (lambda (G3e50@id* G3e51@e G3e52@class) ((letrec ((G3e56@find (lambda (G3e58@id* G3e59@ok*) (if (null? G3e58@id*) (G3152@syntax-violation '#f '"invalid syntax" G3e51@e) (if (G2e1c@id? (car G3e58@id*)) (if (G2e2a@bound-id-member? (car G3e58@id*) G3e59@ok*) (G314c@syntax-error (car G3e58@id*) '"duplicate " G3e52@class) (G3e56@find (cdr G3e58@id*) (cons (car G3e58@id*) G3e59@ok*))) (G314c@syntax-error (car G3e58@id*) '"invalid " G3e52@class)))))) G3e56@find) G3e50@id* '()))) (set! G3df1@gen-clause (lambda (G3e2a@x G3e2b@keys G3e2c@clauses G3e2d@r G3e2e@mr G3e2f@pat G3e30@fender G3e31@expr) (call-with-values (lambda () (G305d@convert-pattern G3e2f@pat G3e2b@keys)) (lambda (G3e3c@G3e3a G3e3d@G3e3b) ((lambda (G3e40@pvars G3e41@p) (if (not (G2e28@distinct-bound-ids? (map car G3e40@pvars))) (G3def@invalid-ids-error (map car G3e40@pvars) G3e2f@pat '"pattern variable") (if (not (for-all (lambda (G3e44@x) (not (G3061@ellipsis? (car G3e44@x)))) G3e40@pvars)) (G3152@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3e2f@pat) ((lambda (G3e46@y) ((lambda (G3e48@test) ((lambda (G3e4a@conseq) ((lambda (G3e4c@altern) (list (G2d74@G2c9c@build-lambda '#f (list G3e46@y) (list 'if G3e48@test G3e4a@conseq G3e4c@altern)) (list '(primitive syntax-dispatch) G3e2a@x (list 'quote G3e41@p)))) (G3df3@gen-syntax-case G3e2a@x G3e2b@keys G3e2c@clauses G3e2d@r G3e2e@mr))) (G3ded@build-dispatch-call G3e40@pvars G3e31@expr G3e46@y G3e2d@r G3e2e@mr))) (if (eq? G3e30@fender '#t) G3e46@y ((lambda (G3e4e@call) (list 'if G3e46@y G3e4e@call (list 'quote '#f))) (G3ded@build-dispatch-call G3e40@pvars G3e30@fender G3e46@y G3e2d@r G3e2e@mr))))) (G2d94@gen-lexical 'tmp))))) G3e3d@G3e3b G3e3c@G3e3a))))) (set! G3df3@gen-syntax-case (lambda (G3e08@x G3e09@keys G3e0a@clauses G3e0b@r G3e0c@mr) (if (null? G3e0a@clauses) (list '(primitive syntax-error) G3e08@x) ((lambda (G3e12@t) ((lambda (G3e14@ls/false) (if G3e14@ls/false (apply (lambda (G3e16@pat G3e17@expr) (if (if (G2e1c@id? G3e16@pat) (if (not (G2e2a@bound-id-member? G3e16@pat G3e09@keys)) (begin '#f (not (G3061@ellipsis? G3e16@pat))) '#f) '#f) (if (G2e24@free-id=? G3e16@pat (G2fed@scheme-stx '_)) (G3083@chi-expr G3e17@expr G3e0b@r G3e0c@mr) ((lambda (G3e1a@lab G3e1b@lex) ((lambda (G3e1e@body) (list (G2d74@G2c9c@build-lambda '#f (list G3e1b@lex) G3e1e@body) G3e08@x)) (G3083@chi-expr (G2e08@add-subst (G2dd5@make-full-rib (list G3e16@pat) (list G3e1a@lab)) G3e17@expr) (cons (cons G3e1a@lab (G2e3c@make-binding 'syntax (cons G3e1b@lex '0))) G3e0b@r) G3e0c@mr))) (G2d98@gen-label G3e16@pat) (G2d94@gen-lexical G3e16@pat))) (G3df1@gen-clause G3e08@x G3e09@keys (cdr G3e0a@clauses) G3e0b@r G3e0c@mr G3e16@pat '#t G3e17@expr))) G3e14@ls/false) ((lambda (G3e20@t) ((lambda (G3e22@ls/false) (if G3e22@ls/false (apply (lambda (G3e24@pat G3e25@fender G3e26@expr) (G3df1@gen-clause G3e08@x G3e09@keys (cdr G3e0a@clauses) G3e0b@r G3e0c@mr G3e24@pat G3e25@fender G3e26@expr)) G3e22@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3e20@t))) (G305f@syntax-dispatch G3e20@t '(any any any)))) G3e12@t))) (G305f@syntax-dispatch G3e12@t '(any any)))) (car G3e0a@clauses))))) (lambda (G3df4@e G3df5@r G3df6@mr) ((lambda (G3dfa@t) ((lambda (G3dfc@ls/false) (if G3dfc@ls/false (apply (lambda (G3dfe@expr G3dff@keys G3e00@clauses) (begin (G3065@verify-literals G3dff@keys G3df4@e) ((lambda (G3e04@x) ((lambda (G3e06@body) (list (G2d74@G2c9c@build-lambda '#f (list G3e04@x) G3e06@body) (G3083@chi-expr G3dfe@expr G3df5@r G3df6@mr))) (G3df3@gen-syntax-case G3e04@x G3dff@keys G3e00@clauses G3df5@r G3df6@mr))) (G2d94@gen-lexical 'tmp)))) G3dfc@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3dfa@t))) (G305f@syntax-dispatch G3dfa@t '(_ any each-any . each-any)))) G3df4@e)))) '#f '#f '#f '#f)))) (set! G3069@ellipsis-map (lambda (G3e76@proc G3e77@ls . G3e7a@ls*) ((lambda (G3e7d@who) (begin (set! G3e7d@who '...) (begin (if (not (list? G3e77@ls)) (assertion-violation G3e7d@who '"not a list" G3e77@ls) (void)) (if (not (null? G3e7a@ls*)) ((lambda (G3e7e@n) (for-each (lambda (G3e80@x) (begin (if (not (list? G3e80@x)) (assertion-violation G3e7d@who '"not a list" G3e80@x) (void)) (if (not (= (length G3e80@x) G3e7e@n)) (assertion-violation G3e7d@who '"length mismatch" G3e77@ls G3e80@x) (void)))) G3e7a@ls*)) (length G3e77@ls)) (void)) (apply map G3e76@proc G3e77@ls G3e7a@ls*)))) '#f))) (set! G306b@syntax-transformer ((lambda () ((lambda (G3e83@gen-syntax G3e85@gen-ref G3e87@gen-append G3e89@gen-mappend G3e8b@gen-map G3e8d@gen-cons G3e8f@gen-vector G3e91@regen) (begin (set! G3e83@gen-syntax (lambda (G3ef6@src G3ef7@e G3ef8@r G3ef9@maps G3efa@ellipsis? G3efb@vec?) ((lambda (G3f02@t) ((lambda (G3f04@ls/false) (if (if G3f04@ls/false (begin '#f (apply (lambda (G3f06@dots) (G3efa@ellipsis? G3f06@dots)) G3f04@ls/false)) '#f) (apply (lambda (G3f08@dots) (G3152@syntax-violation '#f '"misplaced ellipsis in syntax form" G3ef6@src)) G3f04@ls/false) ((lambda (G3f0a@t) ((lambda (G3f0c@ls/false) (if (if G3f0c@ls/false (begin '#f (apply (lambda (G3f0e@id) (G2e1c@id? G3f0e@id)) G3f0c@ls/false)) '#f) (apply (lambda (G3f10@id) ((lambda (G3f12@label) ((lambda (G3f14@b) ((lambda () (if (eq? (G2e3e@binding-type G3f14@b) 'syntax) (call-with-values (lambda () ((lambda (G3f18@var.lev) (G3e85@gen-ref G3ef6@src (car G3f18@var.lev) (cdr G3f18@var.lev) G3ef9@maps)) (G2e40@binding-value G3f14@b))) (lambda (G3f1a@G3f16 G3f1b@G3f17) ((lambda (G3f1e@maps G3f1f@var) (values (list 'ref G3f1f@var) G3f1e@maps)) G3f1b@G3f17 G3f1a@G3f16))) (values (list 'quote G3ef7@e) G3ef9@maps))))) (G2e3a@label->binding G3f12@label G3ef8@r))) (G2e36@id->label G3ef7@e))) G3f0c@ls/false) ((lambda (G3f22@t) ((lambda (G3f24@ls/false) (if (if G3f24@ls/false (begin '#f (apply (lambda (G3f26@dots G3f27@e) (G3efa@ellipsis? G3f26@dots)) G3f24@ls/false)) '#f) (apply (lambda (G3f2a@dots G3f2b@e) (if G3efb@vec? (G3152@syntax-violation '#f '"misplaced ellipsis in syntax form" G3ef6@src) (G3e83@gen-syntax G3ef6@src G3f2b@e G3ef8@r G3ef9@maps (lambda (G3f2e@x) '#f) '#f))) G3f24@ls/false) ((lambda (G3f30@t) ((lambda (G3f32@ls/false) (if (if G3f32@ls/false (begin '#f (apply (lambda (G3f34@x G3f35@dots G3f36@y) (G3efa@ellipsis? G3f35@dots)) G3f32@ls/false)) '#f) (apply (lambda (G3f3a@x G3f3b@dots G3f3c@y) ((letrec ((G3f40@f (lambda (G3f42@y G3f43@k) ((lambda (G3f46@t) ((lambda (G3f48@ls/false) (if G3f48@ls/false (apply (lambda () (G3f43@k G3ef9@maps)) G3f48@ls/false) ((lambda (G3f4a@t) ((lambda (G3f4c@ls/false) (if (if G3f4c@ls/false (begin '#f (apply (lambda (G3f4e@dots G3f4f@y) (G3efa@ellipsis? G3f4e@dots)) G3f4c@ls/false)) '#f) (apply (lambda (G3f52@dots G3f53@y) (G3f40@f G3f53@y (lambda (G3f56@maps) (call-with-values (lambda () (G3f43@k (cons '() G3f56@maps))) (lambda (G3f5a@G3f58 G3f5b@G3f59) ((lambda (G3f5e@maps G3f5f@x) (if (null? (car G3f5e@maps)) (G3152@syntax-violation '#f '"extra ellipsis in syntax form" G3ef6@src) (values (G3e89@gen-mappend G3f5f@x (car G3f5e@maps)) (cdr G3f5e@maps)))) G3f5b@G3f59 G3f5a@G3f58)))))) G3f4c@ls/false) ((lambda (G3f62@t) ((lambda (G3f64@ls/false) (if G3f64@ls/false (apply (lambda () (call-with-values (lambda () (G3e83@gen-syntax G3ef6@src G3f42@y G3ef8@r G3ef9@maps G3efa@ellipsis? G3efb@vec?)) (lambda (G3f68@G3f66 G3f69@G3f67) ((lambda (G3f6c@maps G3f6d@y) (call-with-values (lambda () (G3f43@k G3f6c@maps)) (lambda (G3f72@G3f70 G3f73@G3f71) ((lambda (G3f76@maps G3f77@x) (values (G3e87@gen-append G3f77@x G3f6d@y) G3f76@maps)) G3f73@G3f71 G3f72@G3f70)))) G3f69@G3f67 G3f68@G3f66)))) G3f64@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3f62@t))) (G305f@syntax-dispatch G3f62@t '_))) G3f4a@t))) (G305f@syntax-dispatch G3f4a@t '(any . any)))) G3f46@t))) (G305f@syntax-dispatch G3f46@t '()))) G3f42@y)))) G3f40@f) G3f3c@y (lambda (G3f7a@maps) (call-with-values (lambda () (G3e83@gen-syntax G3ef6@src G3f3a@x G3ef8@r (cons '() G3f7a@maps) G3efa@ellipsis? '#f)) (lambda (G3f7e@G3f7c G3f7f@G3f7d) ((lambda (G3f82@maps G3f83@x) (if (null? (car G3f82@maps)) (G3152@syntax-violation '#f '"extra ellipsis in syntax form" G3ef6@src) (values (G3e8b@gen-map G3f83@x (car G3f82@maps)) (cdr G3f82@maps)))) G3f7f@G3f7d G3f7e@G3f7c)))))) G3f32@ls/false) ((lambda (G3f86@t) ((lambda (G3f88@ls/false) (if G3f88@ls/false (apply (lambda (G3f8a@x G3f8b@y) (call-with-values (lambda () (G3e83@gen-syntax G3ef6@src G3f8a@x G3ef8@r G3ef9@maps G3efa@ellipsis? '#f)) (lambda (G3f90@G3f8e G3f91@G3f8f) ((lambda (G3f94@maps G3f95@xnew) (call-with-values (lambda () (G3e83@gen-syntax G3ef6@src G3f8b@y G3ef8@r G3f94@maps G3efa@ellipsis? G3efb@vec?)) (lambda (G3f9a@G3f98 G3f9b@G3f99) ((lambda (G3f9e@maps G3f9f@ynew) (values (G3e8d@gen-cons G3ef7@e G3f8a@x G3f8b@y G3f95@xnew G3f9f@ynew) G3f9e@maps)) G3f9b@G3f99 G3f9a@G3f98)))) G3f91@G3f8f G3f90@G3f8e)))) G3f88@ls/false) ((lambda (G3fa2@t) ((lambda (G3fa4@ls/false) (if G3fa4@ls/false (apply (lambda (G3fa6@ls) (call-with-values (lambda () (G3e83@gen-syntax G3ef6@src G3fa6@ls G3ef8@r G3ef9@maps G3efa@ellipsis? '#t)) (lambda (G3faa@G3fa8 G3fab@G3fa9) ((lambda (G3fae@maps G3faf@lsnew) (values (G3e8f@gen-vector G3ef7@e G3fa6@ls G3faf@lsnew) G3fae@maps)) G3fab@G3fa9 G3faa@G3fa8)))) G3fa4@ls/false) ((lambda (G3fb2@t) ((lambda (G3fb4@ls/false) (if G3fb4@ls/false (apply (lambda () (values (list 'quote G3ef7@e) G3ef9@maps)) G3fb4@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3fb2@t))) (G305f@syntax-dispatch G3fb2@t '_))) G3fa2@t))) (G305f@syntax-dispatch G3fa2@t '#(vector each-any)))) G3f86@t))) (G305f@syntax-dispatch G3f86@t '(any . any)))) G3f30@t))) (G305f@syntax-dispatch G3f30@t '(any any . any)))) G3f22@t))) (G305f@syntax-dispatch G3f22@t '(any any)))) G3f0a@t))) (G305f@syntax-dispatch G3f0a@t 'any))) G3f02@t))) (G305f@syntax-dispatch G3f02@t 'any))) G3ef7@e))) (set! G3e85@gen-ref (lambda (G3ede@src G3edf@var G3ee0@level G3ee1@maps) (if (= G3ee0@level '0) (values G3edf@var G3ee1@maps) (if (null? G3ee1@maps) (G3152@syntax-violation '#f '"missing ellipsis in syntax form" G3ede@src) (call-with-values (lambda () (G3e85@gen-ref G3ede@src G3edf@var (- G3ee0@level '1) (cdr G3ee1@maps))) (lambda (G3ee8@G3ee6 G3ee9@G3ee7) ((lambda (G3eec@outer-maps G3eed@outer-var) ((lambda (G3ef0@t) (if G3ef0@t ((lambda (G3ef2@b) (values (cdr G3ef2@b) G3ee1@maps)) G3ef0@t) ((lambda (G3ef4@inner-var) (values G3ef4@inner-var (cons (cons (cons G3eed@outer-var G3ef4@inner-var) (car G3ee1@maps)) G3eec@outer-maps))) (G2d94@gen-lexical 'tmp)))) (assq G3eed@outer-var (car G3ee1@maps)))) G3ee9@G3ee7 G3ee8@G3ee6))))))) (set! G3e87@gen-append (lambda (G3eda@x G3edb@y) (if (equal? G3edb@y ''()) G3eda@x (list 'append G3eda@x G3edb@y)))) (set! G3e89@gen-mappend (lambda (G3ed6@e G3ed7@map-env) (list 'apply '(primitive append) (G3e8b@gen-map G3ed6@e G3ed7@map-env)))) (set! G3e8b@gen-map (lambda (G3ec4@e G3ec5@map-env) ((lambda (G3ec8@formals G3ec9@actuals) (if (eq? (car G3ec4@e) 'ref) (car G3ec9@actuals) (if (for-all (lambda (G3ecc@x) (if (eq? (car G3ecc@x) 'ref) (begin '#f (memq (cadr G3ecc@x) G3ec8@formals)) '#f)) (cdr G3ec4@e)) ((lambda (G3ece@args) (cons 'map (cons (list 'primitive (car G3ec4@e)) G3ece@args))) (map ((lambda (G3ed0@r) (lambda (G3ed2@x) (cdr (assq (cadr G3ed2@x) G3ed0@r)))) (map cons G3ec8@formals G3ec9@actuals)) (cdr G3ec4@e))) (cons* 'map (list 'lambda G3ec8@formals G3ec4@e) G3ec9@actuals)))) (map cdr G3ec5@map-env) (map (lambda (G3ed4@x) (list 'ref (car G3ed4@x))) G3ec5@map-env)))) (set! G3e8d@gen-cons (lambda (G3eb4@e G3eb5@x G3eb6@y G3eb7@xnew G3eb8@ynew) ((lambda (G3ebe@t) (if (memv G3ebe@t '(quote)) (if (eq? (car G3eb7@xnew) 'quote) ((lambda (G3ec0@xnew G3ec1@ynew) (if (if (eq? G3ec0@xnew G3eb5@x) (begin '#f (eq? G3ec1@ynew G3eb6@y)) '#f) (list 'quote G3eb4@e) (list 'quote (cons G3ec0@xnew G3ec1@ynew)))) (cadr G3eb7@xnew) (cadr G3eb8@ynew)) (if (null? (cadr G3eb8@ynew)) (list 'list G3eb7@xnew) (list 'cons G3eb7@xnew G3eb8@ynew))) (if (memv G3ebe@t '(list)) (cons 'list (cons G3eb7@xnew (cdr G3eb8@ynew))) (list 'cons G3eb7@xnew G3eb8@ynew)))) (car G3eb8@ynew)))) (set! G3e8f@gen-vector (lambda (G3eae@e G3eaf@ls G3eb0@lsnew) (if (eq? (car G3eb0@lsnew) 'quote) (if (eq? (cadr G3eb0@lsnew) G3eaf@ls) (list 'quote G3eae@e) (list 'quote (list->vector (cadr G3eb0@lsnew)))) (if (eq? (car G3eb0@lsnew) 'list) (cons 'vector (cdr G3eb0@lsnew)) (list 'list->vector G3eb0@lsnew))))) (set! G3e91@regen (lambda (G3ea8@x) ((lambda (G3eaa@t) (if (memv G3eaa@t '(ref)) (cadr G3ea8@x) (if (memv G3eaa@t '(primitive)) (list 'primitive (cadr G3ea8@x)) (if (memv G3eaa@t '(quote)) (list 'quote (cadr G3ea8@x)) (if (memv G3eaa@t '(lambda)) (G2d74@G2c9c@build-lambda '#f (cadr G3ea8@x) (G3e91@regen (caddr G3ea8@x))) (if (memv G3eaa@t '(map)) ((lambda (G3eac@ls) (cons '(primitive ellipsis-map) G3eac@ls)) (map G3e91@regen (cdr G3ea8@x))) (cons (list 'primitive (car G3ea8@x)) (map G3e91@regen (cdr G3ea8@x))))))))) (car G3ea8@x)))) (lambda (G3e92@e G3e93@r G3e94@mr) ((lambda (G3e98@t) ((lambda (G3e9a@ls/false) (if G3e9a@ls/false (apply (lambda (G3e9c@x) (call-with-values (lambda () (G3e83@gen-syntax G3e92@e G3e9c@x G3e93@r '() G3061@ellipsis? '#f)) (lambda (G3ea0@G3e9e G3ea1@G3e9f) ((lambda (G3ea4@maps G3ea5@e) (G3e91@regen G3ea5@e)) G3ea1@G3e9f G3ea0@G3e9e)))) G3e9a@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3e98@t))) (G305f@syntax-dispatch G3e98@t '(_ any)))) G3e92@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G306d@core-macro-transformer (lambda (G3fb6@name) ((lambda (G3fb8@t) (if (memv G3fb8@t '(quote)) G300f@quote-transformer (if (memv G3fb8@t '(lambda)) G3013@lambda-transformer (if (memv G3fb8@t '(case-lambda)) G3011@case-lambda-transformer (if (memv G3fb8@t '(letrec)) G2ffb@letrec-transformer (if (memv G3fb8@t '(letrec*)) G2ffd@letrec*-transformer (if (memv G3fb8@t '(if)) G300b@if-transformer (if (memv G3fb8@t '(foreign-call)) G305b@foreign-call-transformer (if (memv G3fb8@t '(syntax-case)) G3067@syntax-case-transformer (if (memv G3fb8@t '(syntax)) G306b@syntax-transformer (if (memv G3fb8@t '(type-descriptor)) G3001@type-descriptor-transformer (if (memv G3fb8@t '(record-type-descriptor)) G3003@record-type-descriptor-transformer (if (memv G3fb8@t '(record-constructor-descriptor)) G3005@record-constructor-descriptor-transformer (if (memv G3fb8@t '(fluid-let-syntax)) G2fff@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3fb6@name))))))))))))))) G3fb6@name))) (set! G306f@file-options-macro (lambda (G3fba@x) ((lambda (G3fbd@valid-option?) (begin (set! G3fbd@valid-option? (lambda (G3fc6@x) (if (G2e1c@id? G3fc6@x) (begin '#f (memq (G2e1e@id->sym G3fc6@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3fbe@t) ((lambda (G3fc0@ls/false) (if (if G3fc0@ls/false (begin '#f (apply (lambda (G3fc2@opt*) (if (for-all G3fbd@valid-option? G3fc2@opt*) (begin '#f (G296f@G291f@file-options-spec (map G2e1e@id->sym G3fc2@opt*))) '#f)) G3fc0@ls/false)) '#f) (apply (lambda (G3fc4@opt*) (G3015@bless (list 'quote (G296f@G291f@file-options-spec (map G2e1e@id->sym G3fc4@opt*))))) G3fc0@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3fbe@t))) (G305f@syntax-dispatch G3fbe@t '(_ . each-any)))) G3fba@x))) '#f))) (set! G3071@symbol-macro (lambda (G3fc8@x G3fc9@set) ((lambda (G3fcc@t) ((lambda (G3fce@ls/false) (if (if G3fce@ls/false (begin '#f (apply (lambda (G3fd0@name) (if (G2e1c@id? G3fd0@name) (begin '#f (memq (G2e1e@id->sym G3fd0@name) G3fc9@set)) '#f)) G3fce@ls/false)) '#f) (apply (lambda (G3fd2@name) (G3015@bless (list 'quote G3fd2@name))) G3fce@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G3fcc@t))) (G305f@syntax-dispatch G3fcc@t '(_ any)))) G3fc8@x))) (set! G3073@macro-transformer (lambda (G3fd4@x) (if (procedure? G3fd4@x) G3fd4@x (if (symbol? G3fd4@x) ((lambda (G3fd6@t) (if (memv G3fd6@t '(define-record-type)) G3053@define-record-type-macro (if (memv G3fd6@t '(define-struct)) G3051@define-struct-macro (if (memv G3fd6@t '(include)) G3047@include-macro (if (memv G3fd6@t '(cond)) G3043@cond-macro (if (memv G3fd6@t '(let)) G301b@let-macro (if (memv G3fd6@t '(do)) G303b@do-macro (if (memv G3fd6@t '(or)) G303f@or-macro (if (memv G3fd6@t '(and)) G3041@and-macro (if (memv G3fd6@t '(let*)) G303d@let*-macro (if (memv G3fd6@t '(let-values)) G301d@let-values-macro (if (memv G3fd6@t '(let*-values)) G301f@let*-values-macro (if (memv G3fd6@t '(syntax-rules)) G304b@syntax-rules-macro (if (memv G3fd6@t '(quasiquote)) G304d@quasiquote-macro (if (memv G3fd6@t '(quasisyntax)) G304f@quasisyntax-macro (if (memv G3fd6@t '(with-syntax)) G3017@with-syntax-macro (if (memv G3fd6@t '(when)) G3007@when-macro (if (memv G3fd6@t '(unless)) G3009@unless-macro (if (memv G3fd6@t '(case)) G300d@case-macro (if (memv G3fd6@t '(identifier-syntax)) G3039@identifier-syntax-macro (if (memv G3fd6@t '(time)) G3031@time-macro (if (memv G3fd6@t '(delay)) G3033@delay-macro (if (memv G3fd6@t '(assert)) G3035@assert-macro (if (memv G3fd6@t '(endianness)) G3037@endianness-macro (if (memv G3fd6@t '(guard)) G302d@guard-macro (if (memv G3fd6@t '(define-enumeration)) G302f@define-enumeration-macro (if (memv G3fd6@t '(trace-lambda)) G3021@trace-lambda-macro (if (memv G3fd6@t '(trace-define)) G3023@trace-define-macro (if (memv G3fd6@t '(trace-define-syntax)) G3025@trace-define-syntax-macro (if (memv G3fd6@t '(trace-let-syntax)) G3029@trace-let-syntax-macro (if (memv G3fd6@t '(trace-letrec-syntax)) G302b@trace-letrec-syntax-macro (if (memv G3fd6@t '(define-condition-type)) G3055@define-condition-type-macro (if (memv G3fd6@t '(parameterize)) G3059@parameterize-macro (if (memv G3fd6@t '(include-into)) G3049@include-into-macro (if (memv G3fd6@t '(eol-style)) (lambda (G3fd8@x) (G3071@symbol-macro G3fd8@x '(none lf cr crlf nel crnel ls))) (if (memv G3fd6@t '(error-handling-mode)) (lambda (G3fda@x) (G3071@symbol-macro G3fda@x '(ignore raise replace))) (if (memv G3fd6@t '(buffer-mode)) (lambda (G3fdc@x) (G3071@symbol-macro G3fdc@x '(none line block))) (if (memv G3fd6@t '(file-options)) G306f@file-options-macro (if (memv G3fd6@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G3057@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3fd4@x)))))))))))))))))))))))))))))))))))))))) G3fd4@x) (error 'core-macro-transformer '"BUG: invalid macro" G3fd4@x))))) (set! G3075@local-macro-transformer (lambda (G3fde@x) (car G3fde@x))) (set! G3077@do-macro-call (lambda (G3fe0@transformer G3fe1@expr) ((lambda (G3fe4@out) (begin ((letrec ((G3fe6@f (lambda (G3fe8@x) (if (not (G2de4@stx? G3fe8@x)) (if (pair? G3fe8@x) (begin (G3fe6@f (car G3fe8@x)) (G3fe6@f (cdr G3fe8@x))) (if (vector? G3fe8@x) (vector-for-each G3fe6@f G3fe8@x) (if (symbol? G3fe8@x) (G3152@syntax-violation '#f '"raw symbol encountered in output of macro" G3fe1@expr G3fe8@x) (void)))) (void))))) G3fe6@f) G3fe4@out) (G2e06@add-mark (G2dfc@gen-mark) G3fe4@out G3fe1@expr))) (G3fe0@transformer (G2e06@add-mark G2dfe@anti-mark G3fe1@expr '#f))))) (set! G3079@chi-macro (lambda (G3fea@p G3feb@e) (G3077@do-macro-call (G3073@macro-transformer G3fea@p) G3feb@e))) (set! G307b@chi-local-macro (lambda (G3fee@p G3fef@e) (G3077@do-macro-call (G3075@local-macro-transformer G3fee@p) G3fef@e))) (set! G307d@chi-global-macro (lambda (G3ff2@p G3ff3@e) ((lambda (G3ff6@lib G3ff7@loc) (begin (G2c12@G2aa8@visit-library G3ff6@lib) ((lambda (G3ffa@x) ((lambda (G3ffc@transformer) (G3077@do-macro-call G3ffc@transformer G3ff3@e)) (if (procedure? G3ffa@x) G3ffa@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ffa@x)))) (symbol-value G3ff7@loc)))) (car G3ff2@p) (cdr G3ff2@p)))) (set! G307f@chi-expr* (lambda (G3ffe@e* G3fff@r G4000@mr) (if (null? G3ffe@e*) '() ((lambda (G4004@e) (cons G4004@e (G307f@chi-expr* (cdr G3ffe@e*) G3fff@r G4000@mr))) (G3083@chi-expr (car G3ffe@e*) G3fff@r G4000@mr))))) (set! G3081@chi-application (lambda (G4006@e G4007@r G4008@mr) ((lambda (G400c@t) ((lambda (G400e@ls/false) (if G400e@ls/false (apply (lambda (G4010@rator G4011@rands) ((lambda (G4014@rator) (cons G4014@rator (G307f@chi-expr* G4011@rands G4007@r G4008@mr))) (G3083@chi-expr G4010@rator G4007@r G4008@mr))) G400e@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G400c@t))) (G305f@syntax-dispatch G400c@t '(any . each-any)))) G4006@e))) (set! G3083@chi-expr (lambda (G4016@e G4017@r G4018@mr) (call-with-values (lambda () (G2e44@syntax-type G4016@e G4017@r)) (lambda (G401f@G401c G4020@G401d G4021@G401e) ((lambda (G4025@kwd G4026@value G4027@type) ((lambda (G402b@t) (if (memv G402b@t '(core-macro)) ((lambda (G402d@transformer) (G402d@transformer G4016@e G4017@r G4018@mr)) (G306d@core-macro-transformer G4026@value)) (if (memv G402b@t '(global)) ((lambda (G402f@lib) ((lambda (G4031@loc) ((lambda () (begin ((G30ce@inv-collector) G402f@lib) G4031@loc)))) (cdr G4026@value))) (car G4026@value)) (if (memv G402b@t '(core-prim)) ((lambda (G4033@name) (list 'primitive G4033@name)) G4026@value) (if (memv G402b@t '(call)) (G3081@chi-application G4016@e G4017@r G4018@mr) (if (memv G402b@t '(lexical)) ((lambda (G4035@lex) G4035@lex) (G2fef@lexical-var G4026@value)) (if (memv G402b@t '(global-macro global-macro!)) (G3083@chi-expr (G307d@chi-global-macro G4026@value G4016@e) G4017@r G4018@mr) (if (memv G402b@t '(local-macro local-macro!)) (G3083@chi-expr (G307b@chi-local-macro G4026@value G4016@e) G4017@r G4018@mr) (if (memv G402b@t '(macro macro!)) (G3083@chi-expr (G3079@chi-macro G4026@value G4016@e) G4017@r G4018@mr) (if (memv G402b@t '(constant)) ((lambda (G4037@datum) (list 'quote G4037@datum)) G4026@value) (if (memv G402b@t '(set!)) (G3085@chi-set! G4016@e G4017@r G4018@mr) (if (memv G402b@t '(begin)) ((lambda (G4039@t) ((lambda (G403b@ls/false) (if G403b@ls/false (apply (lambda (G403d@x G403e@x*) (G2d77@G2ce8@build-sequence '#f (G307f@chi-expr* (cons G403d@x G403e@x*) G4017@r G4018@mr))) G403b@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G4039@t))) (G305f@syntax-dispatch G4039@t '(_ any . each-any)))) G4016@e) (if (memv G402b@t '(let-syntax letrec-syntax)) ((lambda (G4041@t) ((lambda (G4043@ls/false) (if (if G4043@ls/false (begin '#f (apply (lambda (G4045@xlhs* G4046@xrhs* G4047@xbody G4048@xbody*) (if (not (G2e26@valid-bound-ids? G4045@xlhs*)) (G3152@syntax-violation '#f '"invalid identifiers" G4016@e) (void))) G4043@ls/false)) '#f) (apply (lambda (G404d@xlhs* G404e@xrhs* G404f@xbody G4050@xbody*) ((lambda (G4055@xlab*) ((lambda (G4057@xrib) ((lambda (G4059@xb*) ((lambda () (G2d77@G2ce8@build-sequence '#f (G307f@chi-expr* (map (lambda (G405b@x) (G2e08@add-subst G4057@xrib G405b@x)) (cons G404f@xbody G4050@xbody*)) (append (map cons G4055@xlab* G4059@xb*) G4017@r) (append (map cons G4055@xlab* G4059@xb*) G4018@mr)))))) (map (lambda (G405d@x) (G2e63@make-eval-transformer (G30c0@expand-transformer (if (eq? G4027@type 'let-syntax) G405d@x (G2e08@add-subst G4057@xrib G405d@x)) G4018@mr))) G404e@xrhs*))) (G2dd5@make-full-rib G404d@xlhs* G4055@xlab*))) (map G2d98@gen-label G404d@xlhs*))) G4043@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G4041@t))) (G305f@syntax-dispatch G4041@t '(_ #(each (any any)) any . each-any)))) G4016@e) (if (memv G402b@t '(displaced-lexical)) (G3152@syntax-violation '#f '"identifier out of context" G4016@e) (if (memv G402b@t '(syntax)) (G3152@syntax-violation '#f '"reference to pattern variable outside a syntax form" G4016@e) (if (memv G402b@t '(define define-syntax module import library)) (G3152@syntax-violation '#f (string-append ((lambda (G405f@t) (if (memv G405f@t '(define)) '"a definition" (if (memv G405f@t '(define-syntax)) '"a define-syntax" (if (memv G405f@t '(module)) '"a module definition" (if (memv G405f@t '(library)) '"a library definition" (if (memv G405f@t '(import)) '"an import declaration" (if (memv G405f@t '(export)) '"an export declaration" '"a non-expression"))))))) G4027@type) '" was found where an expression was expected") G4016@e) (if (memv G402b@t '(mutable)) (G3152@syntax-violation '#f '"attempt to reference an unexportable variable" G4016@e) (G3152@syntax-violation '#f '"invalid expression" G4016@e)))))))))))))))))) G4027@type)) G4021@G401e G4020@G401d G401f@G401c))))) (set! G3085@chi-set! (lambda (G4061@e G4062@r G4063@mr) ((lambda (G4067@t) ((lambda (G4069@ls/false) (if (if G4069@ls/false (begin '#f (apply (lambda (G406b@x G406c@v) (G2e1c@id? G406b@x)) G4069@ls/false)) '#f) (apply (lambda (G406f@x G4070@v) (call-with-values (lambda () (G2e44@syntax-type G406f@x G4062@r)) (lambda (G4076@G4073 G4077@G4074 G4078@G4075) ((lambda (G407c@kwd G407d@value G407e@type) ((lambda (G4082@t) (if (memv G4082@t '(lexical)) (begin (G2ff3@set-lexical-mutable! G407d@value '#t) (list 'set! (G2fef@lexical-var G407d@value) (G3083@chi-expr G4070@v G4062@r G4063@mr))) (if (memv G4082@t '(core-prim)) (G3152@syntax-violation '#f '"cannot modify imported core primitive" G4061@e) (if (memv G4082@t '(global)) (G3152@syntax-violation '#f '"attempt to modify imported binding" G4061@e) (if (memv G4082@t '(global-macro!)) (G3083@chi-expr (G307d@chi-global-macro G407d@value G4061@e) G4062@r G4063@mr) (if (memv G4082@t '(local-macro!)) (G3083@chi-expr (G307b@chi-local-macro G407d@value G4061@e) G4062@r G4063@mr) (if (memv G4082@t '(mutable)) (G3152@syntax-violation '#f '"attempt to assign to an unexportable variable" G4061@e) (G3152@syntax-violation '#f '"invalid syntax" G4061@e)))))))) G407e@type)) G4078@G4075 G4077@G4074 G4076@G4073)))) G4069@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G4067@t))) (G305f@syntax-dispatch G4067@t '(_ any any)))) G4061@e))) (set! G3087@verify-formals (lambda (G4084@fmls G4085@stx) ((lambda (G4088@t) ((lambda (G408a@ls/false) (if G408a@ls/false (apply (lambda (G408c@x*) (if (not (G2e26@valid-bound-ids? G408c@x*)) (G3019@invalid-fmls-error G4085@stx G4084@fmls) (void))) G408a@ls/false) ((lambda (G408e@t) ((lambda (G4090@ls/false) (if G4090@ls/false (apply (lambda (G4092@x* G4093@x) (if (not (G2e26@valid-bound-ids? (cons G4093@x G4092@x*))) (G3019@invalid-fmls-error G4085@stx G4084@fmls) (void))) G4090@ls/false) ((lambda (G4096@t) ((lambda (G4098@ls/false) (if G4098@ls/false (apply (lambda () (G3152@syntax-violation '#f '"invalid syntax" G4085@stx)) G4098@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G4096@t))) (G305f@syntax-dispatch G4096@t '_))) G408e@t))) (G305f@syntax-dispatch G408e@t '#(each+ any () any)))) G4088@t))) (G305f@syntax-dispatch G4088@t 'each-any))) G4084@fmls))) (set! G3089@chi-lambda-clause (lambda (G409a@stx G409b@fmls G409c@body* G409d@r G409e@mr) ((lambda (G40a4@t) ((lambda (G40a6@ls/false) (if G40a6@ls/false (apply (lambda (G40a8@x*) (begin (G3087@verify-formals G409b@fmls G409a@stx) ((lambda (G40aa@lex* G40ab@lab*) (values G40aa@lex* (G3099@chi-internal (G2e08@add-subst (G2dd5@make-full-rib G40a8@x* G40ab@lab*) G409c@body*) (G2ff7@add-lexicals G40ab@lab* G40aa@lex* G409d@r) G409e@mr))) (map G2d94@gen-lexical G40a8@x*) (map G2d98@gen-label G40a8@x*)))) G40a6@ls/false) ((lambda (G40ae@t) ((lambda (G40b0@ls/false) (if G40b0@ls/false (apply (lambda (G40b2@x* G40b3@x) (begin (G3087@verify-formals G409b@fmls G409a@stx) ((lambda (G40b6@lex* G40b7@lab* G40b8@lex G40b9@lab) (values (append G40b6@lex* G40b8@lex) (G3099@chi-internal (G2e08@add-subst (G2dd5@make-full-rib (cons G40b3@x G40b2@x*) (cons G40b9@lab G40b7@lab*)) G409c@body*) (G2ff7@add-lexicals (cons G40b9@lab G40b7@lab*) (cons G40b8@lex G40b6@lex*) G409d@r) G409e@mr))) (map G2d94@gen-lexical G40b2@x*) (map G2d98@gen-label G40b2@x*) (G2d94@gen-lexical G40b3@x) (G2d98@gen-label G40b3@x)))) G40b0@ls/false) ((lambda (G40be@t) ((lambda (G40c0@ls/false) (if G40c0@ls/false (apply (lambda () (G3152@syntax-violation '#f '"invalid syntax" G409b@fmls)) G40c0@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G40be@t))) (G305f@syntax-dispatch G40be@t '_))) G40ae@t))) (G305f@syntax-dispatch G40ae@t '#(each+ any () any)))) G40a4@t))) (G305f@syntax-dispatch G40a4@t 'each-any))) G409b@fmls))) (set! G308b@chi-lambda-clause* (lambda (G40c2@stx G40c3@fmls* G40c4@body** G40c5@r G40c6@mr) (if (null? G40c3@fmls*) (values '() '()) (call-with-values (lambda () (G3089@chi-lambda-clause G40c2@stx (car G40c3@fmls*) (car G40c4@body**) G40c5@r G40c6@mr)) (lambda (G40ce@G40cc G40cf@G40cd) ((lambda (G40d2@b G40d3@a) (call-with-values (lambda () (G308b@chi-lambda-clause* G40c2@stx (cdr G40c3@fmls*) (cdr G40c4@body**) G40c5@r G40c6@mr)) (lambda (G40d8@G40d6 G40d9@G40d7) ((lambda (G40dc@b* G40dd@a*) (values (cons G40d3@a G40dd@a*) (cons G40d2@b G40dc@b*))) G40d9@G40d7 G40d8@G40d6)))) G40cf@G40cd G40ce@G40cc)))))) (set! G308d@chi-defun (lambda (G40e0@x G40e1@r G40e2@mr) ((lambda (G40e6@fmls G40e7@body*) (call-with-values (lambda () (G3089@chi-lambda-clause G40e6@fmls G40e6@fmls G40e7@body* G40e1@r G40e2@mr)) (lambda (G40ec@G40ea G40ed@G40eb) ((lambda (G40f0@body G40f1@fmls) (G2d74@G2c9c@build-lambda '#f G40f1@fmls G40f0@body)) G40ed@G40eb G40ec@G40ea)))) (car G40e0@x) (cdr G40e0@x)))) (set! G308f@chi-rhs (lambda (G40f4@rhs G40f5@r G40f6@mr) ((lambda (G40fa@t) (if (memv G40fa@t '(defun)) (G308d@chi-defun (cdr G40f4@rhs) G40f5@r G40f6@mr) (if (memv G40fa@t '(expr)) ((lambda (G40fc@expr) (G3083@chi-expr G40fc@expr G40f5@r G40f6@mr)) (cdr G40f4@rhs)) (if (memv G40fa@t '(top-expr)) ((lambda (G40fe@expr) (G2d77@G2ce8@build-sequence '#f (list (G3083@chi-expr G40fe@expr G40f5@r G40f6@mr) (G2d78@G2cea@build-void)))) (cdr G40f4@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G40f4@rhs))))) (car G40f4@rhs)))) (set! G3091@expand-interaction-rhs*/init* (lambda (G4100@lhs* G4101@rhs* G4102@init* G4103@r G4104@mr) ((letrec ((G410a@f (lambda (G410c@lhs* G410d@rhs*) (if (null? G410c@lhs*) (map (lambda (G4110@x) (G3083@chi-expr G4110@x G4103@r G4104@mr)) G4102@init*) ((lambda (G4112@lhs G4113@rhs) ((lambda (G4116@t) (if (memv G4116@t '(defun)) ((lambda (G4118@rhs) (cons (list 'set! G4112@lhs G4118@rhs) (G410a@f (cdr G410c@lhs*) (cdr G410d@rhs*)))) (G308d@chi-defun (cdr G4113@rhs) G4103@r G4104@mr)) (if (memv G4116@t '(expr)) ((lambda (G411a@rhs) (cons (list 'set! G4112@lhs G411a@rhs) (G410a@f (cdr G410c@lhs*) (cdr G410d@rhs*)))) (G3083@chi-expr (cdr G4113@rhs) G4103@r G4104@mr)) (if (memv G4116@t '(top-expr)) ((lambda (G411c@e) (cons G411c@e (G410a@f (cdr G410c@lhs*) (cdr G410d@rhs*)))) (G3083@chi-expr (cdr G4113@rhs) G4103@r G4104@mr)) (error 'expand-interaction '"invallid" G4113@rhs))))) (car G4113@rhs))) (car G410c@lhs*) (car G410d@rhs*)))))) G410a@f) G4100@lhs* G4101@rhs*))) (set! G3093@chi-rhs* (lambda (G411e@rhs* G411f@r G4120@mr) ((letrec ((G4124@f (lambda (G4126@ls) (if (null? G4126@ls) '() ((lambda (G4128@a) (cons G4128@a (G4124@f (cdr G4126@ls)))) (G308f@chi-rhs (car G4126@ls) G411f@r G4120@mr)))))) G4124@f) G411e@rhs*))) (set! G3095@find-bound=? (lambda (G412a@x G412b@lhs* G412c@rhs*) (if (null? G412b@lhs*) '#f (if (G2e22@bound-id=? G412a@x (car G412b@lhs*)) (car G412c@rhs*) (G3095@find-bound=? G412a@x (cdr G412b@lhs*) (cdr G412c@rhs*)))))) (set! G3097@find-dups (lambda (G4130@ls) ((letrec ((G4132@f (lambda (G4134@ls G4135@dups) (if (null? G4134@ls) G4135@dups ((lambda (G4138@t) (if G4138@t ((lambda (G413a@x) (G4132@f (cdr G4134@ls) (cons (list (car G4134@ls) G413a@x) G4135@dups))) G4138@t) (G4132@f (cdr G4134@ls) G4135@dups))) (G3095@find-bound=? (car G4134@ls) (cdr G4134@ls) (cdr G4134@ls))))))) G4132@f) G4130@ls '()))) (set! G3099@chi-internal (lambda (G413c@e* G413d@r G413e@mr) ((lambda (G4142@rib) (call-with-values (lambda () (G30be@chi-body* (map (lambda (G414c@x) (G2e08@add-subst G4142@rib G414c@x)) (G2e1a@syntax->list G413c@e*)) G413d@r G413e@mr '() '() '() '() '() G4142@rib '#f)) (lambda (G414e@G4144 G414f@G4145 G4150@G4146 G4151@G4147 G4152@G4148 G4153@G4149 G4154@G414a G4155@G414b) ((lambda (G415e@_exp* G415f@kwd* G4160@mod** G4161@rhs* G4162@lex* G4163@mr G4164@r G4165@e*) (begin (if (null? G4165@e*) (G3152@syntax-violation '#f '"no expression in body" G4165@e*) (void)) ((lambda (G416e@init*) ((lambda (G4170@rhs*) ((lambda () (G2d7a@G2cee@build-letrec* '#f (reverse G4162@lex*) (reverse G4170@rhs*) (G2d77@G2ce8@build-sequence '#f G416e@init*))))) (G3093@chi-rhs* G4161@rhs* G4164@r G4163@mr))) (G307f@chi-expr* (append (apply append (reverse G4160@mod**)) G4165@e*) G4164@r G4163@mr)))) G4155@G414b G4154@G414a G4153@G4149 G4152@G4148 G4151@G4147 G4150@G4146 G414f@G4145 G414e@G4144)))) (G2dc5@make-empty-rib)))) (set! G309b@parse-module (lambda (G4172@e) ((lambda (G4174@t) ((lambda (G4176@ls/false) (if G4176@ls/false (apply (lambda (G4178@export* G4179@b*) (begin (if (not (for-all G2e1c@id? G4178@export*)) (G3152@syntax-violation '#f '"module exports must be identifiers" G4172@e) (void)) (values '#f (list->vector G4178@export*) G4179@b*))) G4176@ls/false) ((lambda (G417c@t) ((lambda (G417e@ls/false) (if G417e@ls/false (apply (lambda (G4180@name G4181@export* G4182@b*) (begin (if (not (G2e1c@id? G4180@name)) (G3152@syntax-violation '#f '"module name must be an identifier" G4172@e) (void)) (if (not (for-all G2e1c@id? G4181@export*)) (G3152@syntax-violation '#f '"module exports must be identifiers" G4172@e) (void)) (values G4180@name (list->vector G4181@export*) G4182@b*))) G417e@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G417c@t))) (G305f@syntax-dispatch G417c@t '(_ any each-any . each-any)))) G4174@t))) (G305f@syntax-dispatch G4174@t '(_ each-any . each-any)))) G4172@e))) (set! G30a1@G309c (make-record-type-descriptor 'module-interface '#f 'G309f '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G30a3@G309e '#f) (set! G30a5@G309d (make-record-constructor-descriptor G30a1@G309c '#f G30a3@G309e)) (set! G30aa@module-interface? (record-predicate G30a1@G309c)) (set! G30ac@make-module-interface (record-constructor G30a5@G309d)) (set! G30ae@module-interface-first-mark (record-accessor G30a1@G309c '0)) (set! G30b0@module-interface-exp-id-vec (record-accessor G30a1@G309c '1)) (set! G30b2@module-interface-exp-lab-vec (record-accessor G30a1@G309c '2)) (set! G30b4@set-module-interface-first-mark! (record-mutator G30a1@G309c '0)) (set! G30b6@set-module-interface-exp-id-vec! (record-mutator G30a1@G309c '1)) (set! G30b8@set-module-interface-exp-lab-vec! (record-mutator G30a1@G309c '2)) (set! G30ba@module-interface-exp-id* (lambda (G4186@iface G4187@id) ((lambda (G418b@diff-marks) (begin (set! G418b@diff-marks (lambda (G4192@ls G4193@x) (begin (if (null? G4192@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4196@a) (if (eq? G4196@a G4193@x) '() (cons G4196@a (G418b@diff-marks (cdr G4192@ls) G4193@x)))) (car G4192@ls))))) ((lambda (G418c@diff G418d@id-vec) (if (null? G418c@diff) G418d@id-vec (vector-map (lambda (G4190@x) (G2de6@make-stx (G2de8@stx-expr G4190@x) (append G418c@diff (G2dea@stx-mark* G4190@x)) '() '())) G418d@id-vec))) (G418b@diff-marks (G2dea@stx-mark* G4187@id) (G30ae@module-interface-first-mark G4186@iface)) (G30b0@module-interface-exp-id-vec G4186@iface)))) '#f))) (set! G30bc@chi-internal-module (lambda (G4198@e G4199@r G419a@mr G419b@lex* G419c@rhs* G419d@mod** G419e@kwd*) (call-with-values (lambda () (G309b@parse-module G4198@e)) (lambda (G41a9@G41a6 G41aa@G41a7 G41ab@G41a8) ((lambda (G41af@e* G41b0@exp-id* G41b1@name) ((lambda (G41b5@rib) ((lambda (G41b7@e*) ((lambda () (call-with-values (lambda () (G30be@chi-body* G41b7@e* G4199@r G419a@mr G419b@lex* G419c@rhs* G419d@mod** G419e@kwd* '() G41b5@rib '#f)) (lambda (G41c1@G41b9 G41c2@G41ba G41c3@G41bb G41c4@G41bc G41c5@G41bd G41c6@G41be G41c7@G41bf G41c8@G41c0) ((lambda (G41d1@_exp* G41d2@kwd* G41d3@mod** G41d4@rhs* G41d5@lex* G41d6@mr G41d7@r G41d8@e*) ((lambda (G41e1@exp-lab* G41e2@mod**) (if (not G41b1@name) (values G41d5@lex* G41d4@rhs* G41b0@exp-id* G41e1@exp-lab* G41d7@r G41d6@mr G41e2@mod** G41d2@kwd*) ((lambda (G41e5@lab G41e6@iface) (values G41d5@lex* G41d4@rhs* (vector G41b1@name) (vector G41e5@lab) (cons (cons G41e5@lab (cons '$module G41e6@iface)) G41d7@r) (cons (cons G41e5@lab (cons '$module G41e6@iface)) G41d6@mr) G41e2@mod** G41d2@kwd*)) (G2d98@gen-label 'module) (G30ac@make-module-interface (car (G2dea@stx-mark* G41b1@name)) (vector-map (lambda (G41e9@x) (G2de6@make-stx (G2de8@stx-expr G41e9@x) (G2dea@stx-mark* G41e9@x) '() '())) G41b0@exp-id*) G41e1@exp-lab*)))) (vector-map (lambda (G41eb@x) ((lambda (G41ed@t) (if G41ed@t G41ed@t (begin '#f (G3152@syntax-violation '#f '"cannot find module export" G41eb@x)))) (G2e36@id->label (G2de6@make-stx (G2e1e@id->sym G41eb@x) (G2dea@stx-mark* G41eb@x) (list G41b5@rib) '())))) G41b0@exp-id*) (cons G41d8@e* G41d3@mod**))) G41c8@G41c0 G41c7@G41bf G41c6@G41be G41c5@G41bd G41c4@G41bc G41c3@G41bb G41c2@G41ba G41c1@G41b9)))))) (map (lambda (G41ef@x) (G2e08@add-subst G41b5@rib G41ef@x)) (G2e1a@syntax->list G41af@e*)))) (G2dc5@make-empty-rib))) G41ab@G41a8 G41aa@G41a7 G41a9@G41a6))))) (set! G30be@chi-body* (lambda (G41f1@e* G41f2@r G41f3@mr G41f4@lex* G41f5@rhs* G41f6@mod** G41f7@kwd* G41f8@exp* G41f9@rib G41fa@top?) (if (null? G41f1@e*) (values G41f1@e* G41f2@r G41f3@mr G41f4@lex* G41f5@rhs* G41f6@mod** G41f7@kwd* G41f8@exp*) ((lambda (G4205@e) (call-with-values (lambda () (G2e44@syntax-type G4205@e G41f2@r)) (lambda (G420a@G4207 G420b@G4208 G420c@G4209) ((lambda (G4210@kwd G4211@value G4212@type) ((lambda (G4216@kwd*) ((lambda (G4218@t) (if (memv G4218@t '(define)) (call-with-values (lambda () (G2fe7@parse-define G4205@e)) (lambda (G421c@G421a G421d@G421b) ((lambda (G4220@rhs G4221@id) (begin (if (G2e2a@bound-id-member? G4221@id G4216@kwd*) (G3152@syntax-violation '#f '"cannot redefine keyword" G4205@e) (void)) (call-with-values (lambda () (G2d9c@gen-define-label+loc G4221@id G41f9@rib)) (lambda (G4226@G4224 G4227@G4225) ((lambda (G422a@lex G422b@lab) (begin (G2dcb@extend-rib! G41f9@rib G4221@id G422b@lab) (G30be@chi-body* (cdr G41f1@e*) (G2ff5@add-lexical G422b@lab G422a@lex G41f2@r) G41f3@mr (cons G422a@lex G41f4@lex*) (cons G4220@rhs G41f5@rhs*) G41f6@mod** G4216@kwd* G41f8@exp* G41f9@rib G41fa@top?))) G4227@G4225 G4226@G4224))))) G421d@G421b G421c@G421a))) (if (memv G4218@t '(define-syntax)) (call-with-values (lambda () (G2fe9@parse-define-syntax G4205@e)) (lambda (G4230@G422e G4231@G422f) ((lambda (G4234@rhs G4235@id) (begin (if (G2e2a@bound-id-member? G4235@id G4216@kwd*) (G3152@syntax-violation '#f '"cannot redefine keyword" G4205@e) (void)) ((lambda (G4238@lab G4239@expanded-rhs) (begin (G2dcb@extend-rib! G41f9@rib G4235@id G4238@lab) ((lambda (G423c@b) (G30be@chi-body* (cdr G41f1@e*) (cons (cons G4238@lab G423c@b) G41f2@r) (cons (cons G4238@lab G423c@b) G41f3@mr) G41f4@lex* G41f5@rhs* G41f6@mod** G4216@kwd* G41f8@exp* G41f9@rib G41fa@top?)) (G2e63@make-eval-transformer G4239@expanded-rhs)))) (G2d9e@gen-define-label G4235@id G41f9@rib) (G30c0@expand-transformer G4234@rhs G41f3@mr)))) G4231@G422f G4230@G422e))) (if (memv G4218@t '(let-syntax letrec-syntax)) ((lambda (G423e@t) ((lambda (G4240@ls/false) (if (if G4240@ls/false (begin '#f (apply (lambda (G4242@xlhs* G4243@xrhs* G4244@xbody*) (if (not (G2e26@valid-bound-ids? G4242@xlhs*)) (G3152@syntax-violation '#f '"invalid identifiers" G4205@e) (void))) G4240@ls/false)) '#f) (apply (lambda (G4248@xlhs* G4249@xrhs* G424a@xbody*) ((lambda (G424e@xlab*) ((lambda (G4250@xrib) ((lambda (G4252@xb*) ((lambda () (G30be@chi-body* (append (map (lambda (G4254@x) (G2e08@add-subst G4250@xrib G4254@x)) G424a@xbody*) (cdr G41f1@e*)) (append (map cons G424e@xlab* G4252@xb*) G41f2@r) (append (map cons G424e@xlab* G4252@xb*) G41f3@mr) G41f4@lex* G41f5@rhs* G41f6@mod** G4216@kwd* G41f8@exp* G41f9@rib G41fa@top?)))) (map (lambda (G4256@x) (G2e63@make-eval-transformer (G30c0@expand-transformer (if (eq? G4212@type 'let-syntax) G4256@x (G2e08@add-subst G4250@xrib G4256@x)) G41f3@mr))) G4249@xrhs*))) (G2dd5@make-full-rib G4248@xlhs* G424e@xlab*))) (map G2d98@gen-label G4248@xlhs*))) G4240@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G423e@t))) (G305f@syntax-dispatch G423e@t '(_ #(each (any any)) . each-any)))) G4205@e) (if (memv G4218@t '(begin)) ((lambda (G4258@t) ((lambda (G425a@ls/false) (if G425a@ls/false (apply (lambda (G425c@x*) (G30be@chi-body* (append G425c@x* (cdr G41f1@e*)) G41f2@r G41f3@mr G41f4@lex* G41f5@rhs* G41f6@mod** G4216@kwd* G41f8@exp* G41f9@rib G41fa@top?)) G425a@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G4258@t))) (G305f@syntax-dispatch G4258@t '(_ . each-any)))) G4205@e) (if (memv G4218@t '(global-macro global-macro!)) (G30be@chi-body* (cons (G2e08@add-subst G41f9@rib (G307d@chi-global-macro G4211@value G4205@e)) (cdr G41f1@e*)) G41f2@r G41f3@mr G41f4@lex* G41f5@rhs* G41f6@mod** G4216@kwd* G41f8@exp* G41f9@rib G41fa@top?) (if (memv G4218@t '(local-macro local-macro!)) (G30be@chi-body* (cons (G2e08@add-subst G41f9@rib (G307b@chi-local-macro G4211@value G4205@e)) (cdr G41f1@e*)) G41f2@r G41f3@mr G41f4@lex* G41f5@rhs* G41f6@mod** G4216@kwd* G41f8@exp* G41f9@rib G41fa@top?) (if (memv G4218@t '(macro macro!)) (G30be@chi-body* (cons (G2e08@add-subst G41f9@rib (G3079@chi-macro G4211@value G4205@e)) (cdr G41f1@e*)) G41f2@r G41f3@mr G41f4@lex* G41f5@rhs* G41f6@mod** G4216@kwd* G41f8@exp* G41f9@rib G41fa@top?) (if (memv G4218@t '(module)) (call-with-values (lambda () (G30bc@chi-internal-module G4205@e G41f2@r G41f3@mr G41f4@lex* G41f5@rhs* G41f6@mod** G4216@kwd*)) (lambda (G4266@G425e G4267@G425f G4268@G4260 G4269@G4261 G426a@G4262 G426b@G4263 G426c@G4264 G426d@G4265) ((lambda (G4276@kwd* G4277@mod** G4278@mr G4279@r G427a@m-exp-lab* G427b@m-exp-id* G427c@rhs* G427d@lex*) (begin (vector-for-each (lambda (G4286@id G4287@lab) (G2dcb@extend-rib! G41f9@rib G4286@id G4287@lab)) G427b@m-exp-id* G427a@m-exp-lab*) (G30be@chi-body* (cdr G41f1@e*) G4279@r G4278@mr G427d@lex* G427c@rhs* G4277@mod** G4276@kwd* G41f8@exp* G41f9@rib G41fa@top?))) G426d@G4265 G426c@G4264 G426b@G4263 G426a@G4262 G4269@G4261 G4268@G4260 G4267@G425f G4266@G425e))) (if (memv G4218@t '(library)) (begin (G3132@library-expander (G2e32@stx->datum G4205@e)) (G30be@chi-body* (cdr G41f1@e*) G41f2@r G41f3@mr G41f4@lex* G41f5@rhs* G41f6@mod** G4216@kwd* G41f8@exp* G41f9@rib G41fa@top?)) (if (memv G4218@t '(export)) ((lambda (G428a@t) ((lambda (G428c@ls/false) (if G428c@ls/false (apply (lambda (G428e@exp-decl*) (G30be@chi-body* (cdr G41f1@e*) G41f2@r G41f3@mr G41f4@lex* G41f5@rhs* G41f6@mod** G4216@kwd* (append G428e@exp-decl* G41f8@exp*) G41f9@rib G41fa@top?)) G428c@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G428a@t))) (G305f@syntax-dispatch G428a@t '(_ . each-any)))) G4205@e) (if (memv G4218@t '(import)) ((lambda () ((lambda (G4291@module-import? G4293@module-import G4295@library-import) (begin (set! G4291@module-import? (lambda (G42dd@e) ((lambda (G42df@t) ((lambda (G42e1@ls/false) (if (if G42e1@ls/false (begin '#f (apply (lambda (G42e3@id) (G2e1c@id? G42e3@id)) G42e1@ls/false)) '#f) (apply (lambda (G42e5@id) '#t) G42e1@ls/false) ((lambda (G42e7@t) ((lambda (G42e9@ls/false) (if G42e9@ls/false (apply (lambda (G42eb@imp*) '#f) G42e9@ls/false) ((lambda (G42ed@t) ((lambda (G42ef@ls/false) (if G42ef@ls/false (apply (lambda () (G3152@syntax-violation '#f '"malformed import form" G42dd@e)) G42ef@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G42ed@t))) (G305f@syntax-dispatch G42ed@t '_))) G42e7@t))) (G305f@syntax-dispatch G42e7@t '(_ . each-any)))) G42df@t))) (G305f@syntax-dispatch G42df@t '(_ any)))) G42dd@e))) (set! G4293@module-import (lambda (G42be@e G42bf@r) ((lambda (G42c2@t) ((lambda (G42c4@ls/false) (if (if G42c4@ls/false (begin '#f (apply (lambda (G42c6@id) (G2e1c@id? G42c6@id)) G42c4@ls/false)) '#f) (apply (lambda (G42c8@id) (call-with-values (lambda () (G2e44@syntax-type G42c8@id G42bf@r)) (lambda (G42cd@G42ca G42ce@G42cb G42cf@G42cc) ((lambda (G42d3@kwd G42d4@value G42d5@type) ((lambda (G42d9@t) (if (memv G42d9@t '($module)) ((lambda (G42db@iface) (values (G30ba@module-interface-exp-id* G42db@iface G42c8@id) (G30b2@module-interface-exp-lab-vec G42db@iface))) G42d4@value) (G3152@syntax-violation '#f '"invalid import" G42be@e))) G42d5@type)) G42cf@G42cc G42ce@G42cb G42cd@G42ca)))) G42c4@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G42c2@t))) (G305f@syntax-dispatch G42c2@t '(_ any)))) G42be@e))) (set! G4295@library-import (lambda (G42a4@e) ((lambda (G42a6@t) ((lambda (G42a8@ls/false) (if G42a8@ls/false (apply (lambda (G42aa@ctxt G42ab@imp*) (call-with-values (lambda () (G30c8@parse-import-spec* (G3158@syntax->datum G42ab@imp*))) (lambda (G42b0@G42ae G42b1@G42af) ((lambda (G42b4@subst-labels G42b5@subst-names) (values (vector-map (lambda (G42b8@name) (G2dfa@datum->stx G42aa@ctxt G42b8@name)) G42b5@subst-names) G42b4@subst-labels)) G42b1@G42af G42b0@G42ae)))) G42a8@ls/false) ((lambda (G42ba@t) ((lambda (G42bc@ls/false) (if G42bc@ls/false (apply (lambda () (G3152@syntax-violation '#f '"invalid import form" G42a4@e)) G42bc@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G42ba@t))) (G305f@syntax-dispatch G42ba@t '_))) G42a6@t))) (G305f@syntax-dispatch G42a6@t '(any . each-any)))) G42a4@e))) (begin (call-with-values (lambda () (if (G4291@module-import? G4205@e) (G4293@module-import G4205@e G41f2@r) (G4295@library-import G4205@e))) (lambda (G4298@G4296 G4299@G4297) ((lambda (G429c@lab* G429d@id*) (vector-for-each (lambda (G42a0@id G42a1@lab) (G2dcb@extend-rib! G41f9@rib G42a0@id G42a1@lab)) G429d@id* G429c@lab*)) G4299@G4297 G4298@G4296))) (G30be@chi-body* (cdr G41f1@e*) G41f2@r G41f3@mr G41f4@lex* G41f5@rhs* G41f6@mod** G4216@kwd* G41f8@exp* G41f9@rib G41fa@top?)))) '#f '#f '#f))) (if G41fa@top? (G30be@chi-body* (cdr G41f1@e*) G41f2@r G41f3@mr (cons (G2d94@gen-lexical 'dummy) G41f4@lex*) (cons (cons 'top-expr G4205@e) G41f5@rhs*) G41f6@mod** G4216@kwd* G41f8@exp* G41f9@rib G41fa@top?) (values G41f1@e* G41f2@r G41f3@mr G41f4@lex* G41f5@rhs* G41f6@mod** G4216@kwd* G41f8@exp*)))))))))))))) G4212@type)) (if (G2e1c@id? G4210@kwd) (cons G4210@kwd G41f7@kwd*) G41f7@kwd*))) G420c@G4209 G420b@G4208 G420a@G4207)))) (car G41f1@e*))))) (set! G30c0@expand-transformer (lambda (G42f1@expr G42f2@r) ((lambda (G42f5@rtc) ((lambda (G42f7@expanded-rhs) (begin (for-each ((lambda (G42f9@mark-visit) (lambda (G42fb@x) (begin (G2c11@G2aa6@invoke-library G42fb@x) (G42f9@mark-visit G42fb@x)))) (G30d0@vis-collector)) (G42f5@rtc)) G42f7@expanded-rhs)) ((lambda (G4301@G42fd@inv-collector G4302@G42fe@vis-collector G4303@G42ff@inv-collector G4304@G4300@vis-collector) ((lambda (G4309@swap) (dynamic-wind G4309@swap (lambda () (G3083@chi-expr G42f1@expr G42f2@r G42f2@r)) G4309@swap)) (lambda () (begin ((lambda (G430b@t) (begin (G4301@G42fd@inv-collector G4303@G42ff@inv-collector) (set! G4303@G42ff@inv-collector G430b@t))) (G4301@G42fd@inv-collector)) ((lambda (G430d@t) (begin (G4302@G42fe@vis-collector G4304@G4300@vis-collector) (set! G4304@G4300@vis-collector G430d@t))) (G4302@G42fe@vis-collector)))))) G30ce@inv-collector G30d0@vis-collector G42f5@rtc (lambda (G430f@x) (values))))) (G30cc@make-collector)))) (set! G30c2@parse-exports (lambda (G4311@exp*) ((letrec ((G4313@f (lambda (G4315@exp* G4316@int* G4317@ext*) (if (null? G4315@exp*) (begin (if (not (G2e26@valid-bound-ids? G4317@ext*)) (G3152@syntax-violation 'export '"invalid exports" (G3097@find-dups G4317@ext*)) (void)) (values (map G3158@syntax->datum G4317@ext*) G4316@int*)) ((lambda (G431b@t) ((lambda (G431d@ls/false) (if G431d@ls/false (apply (lambda (G431f@rename G4320@i* G4321@e*) (begin (if (not (if (eq? (G3158@syntax->datum G431f@rename) 'rename) (if (for-all G2e1c@id? G4320@i*) (begin '#f (for-all G2e1c@id? G4321@e*)) '#f) '#f)) (G3152@syntax-violation 'export '"invalid export specifier" (car G4315@exp*)) (void)) (G4313@f (cdr G4315@exp*) (append G4320@i* G4316@int*) (append G4321@e* G4317@ext*)))) G431d@ls/false) ((lambda (G4325@t) ((lambda (G4327@ls/false) (if G4327@ls/false (apply (lambda (G4329@ie) (begin (if (not (G2e1c@id? G4329@ie)) (G3152@syntax-violation 'export '"invalid export" G4329@ie) (void)) (G4313@f (cdr G4315@exp*) (cons G4329@ie G4316@int*) (cons G4329@ie G4317@ext*)))) G4327@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G4325@t))) (G305f@syntax-dispatch G4325@t 'any))) G431b@t))) (G305f@syntax-dispatch G431b@t '(any . #(each (any any)))))) (car G4315@exp*)))))) G4313@f) G4311@exp* '() '()))) (set! G30c4@parse-library-name (lambda (G432b@spec) ((lambda (G432e@parse) (begin (set! G432e@parse (lambda (G4339@x) ((lambda (G433b@t) ((lambda (G433d@ls/false) (if (if G433d@ls/false (begin '#f (apply (lambda (G433f@v*) (for-all (lambda (G4341@x) ((lambda (G4343@x) (if (integer? G4343@x) (begin '#f (exact? G4343@x)) '#f)) (G3158@syntax->datum G4341@x))) G433f@v*)) G433d@ls/false)) '#f) (apply (lambda (G4345@v*) (values '() (map G3158@syntax->datum G4345@v*))) G433d@ls/false) ((lambda (G4347@t) ((lambda (G4349@ls/false) (if (if G4349@ls/false (begin '#f (apply (lambda (G434b@x G434c@rest) (symbol? (G3158@syntax->datum G434b@x))) G4349@ls/false)) '#f) (apply (lambda (G434f@x G4350@rest) (call-with-values (lambda () (G432e@parse G4350@rest)) (lambda (G4355@G4353 G4356@G4354) ((lambda (G4359@v* G435a@x*) (values (cons (G3158@syntax->datum G434f@x) G435a@x*) G4359@v*)) G4356@G4354 G4355@G4353)))) G4349@ls/false) ((lambda (G435d@t) ((lambda (G435f@ls/false) (if G435f@ls/false (apply (lambda () (values '() '())) G435f@ls/false) ((lambda (G4361@t) ((lambda (G4363@ls/false) (if G4363@ls/false (apply (lambda () (G3152@syntax-violation '#f '"invalid library name" G432b@spec)) G4363@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G4361@t))) (G305f@syntax-dispatch G4361@t '_))) G435d@t))) (G305f@syntax-dispatch G435d@t '()))) G4347@t))) (G305f@syntax-dispatch G4347@t '(any . any)))) G433b@t))) (G305f@syntax-dispatch G433b@t '(each-any)))) G4339@x))) (call-with-values (lambda () (G432e@parse G432b@spec)) (lambda (G4331@G432f G4332@G4330) ((lambda (G4335@ver* G4336@name*) (begin (if (null? G4336@name*) (G3152@syntax-violation '#f '"empty library name" G432b@spec) (void)) (values G4336@name* G4335@ver*))) G4332@G4330 G4331@G432f))))) '#f))) (set! G30c6@parse-library (lambda (G4365@e) ((lambda (G4367@t) ((lambda (G4369@ls/false) (if (if G4369@ls/false (begin '#f (apply (lambda (G436b@library G436c@name* G436d@export G436e@exp* G436f@import G4370@imp* G4371@b*) (if (eq? (G3158@syntax->datum G436d@export) 'export) (if (eq? (G3158@syntax->datum G436f@import) 'import) (begin '#f (eq? (G3158@syntax->datum G436b@library) 'library)) '#f) '#f)) G4369@ls/false)) '#f) (apply (lambda (G4379@library G437a@name* G437b@export G437c@exp* G437d@import G437e@imp* G437f@b*) (values G437a@name* G437c@exp* G437e@imp* G437f@b*)) G4369@ls/false) ((lambda (G4387@t) ((lambda (G4389@ls/false) (if G4389@ls/false (apply (lambda () (G3152@syntax-violation '#f '"malformed library" G4365@e)) G4389@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G4387@t))) (G305f@syntax-dispatch G4387@t '_))) G4367@t))) (G305f@syntax-dispatch G4367@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4365@e))) (set! G30c8@parse-import-spec* ((lambda () ((lambda (G438c@idsyn? G438e@dup-error G4390@merge-substs G4392@exclude* G4394@find* G4396@rem* G4398@remove-dups G439a@parse-library-name G439c@import-library G439e@get-import G43a0@add-imports!) (begin (set! G438c@idsyn? (lambda (G458b@x) (symbol? (G3158@syntax->datum G458b@x)))) (set! G438e@dup-error (lambda (G4589@name) (G3152@syntax-violation 'import '"two imports with different bindings" G4589@name))) (set! G4390@merge-substs (lambda (G4577@s G4578@subst) ((lambda (G457c@insert-to-subst) (begin (set! G457c@insert-to-subst (lambda (G457d@a G457e@subst) ((lambda (G4581@name G4582@label) ((lambda (G4585@t) (if G4585@t ((lambda (G4587@x) (if (eq? (cdr G4587@x) G4582@label) G457e@subst (G438e@dup-error G4581@name))) G4585@t) (cons G457d@a G457e@subst))) (assq G4581@name G457e@subst))) (car G457d@a) (cdr G457d@a)))) (if (null? G4577@s) G4578@subst (G457c@insert-to-subst (car G4577@s) (G4390@merge-substs (cdr G4577@s) G4578@subst))))) '#f))) (set! G4392@exclude* (lambda (G454d@sym* G454e@subst) ((lambda (G4552@exclude) (begin (set! G4552@exclude (lambda (G4567@sym G4568@subst) (if (null? G4568@subst) (G3152@syntax-violation 'import '"cannot rename unbound identifier" G4567@sym) (if (eq? G4567@sym (caar G4568@subst)) (values (cdar G4568@subst) (cdr G4568@subst)) ((lambda (G456b@a) (call-with-values (lambda () (G4552@exclude G4567@sym (cdr G4568@subst))) (lambda (G456f@G456d G4570@G456e) ((lambda (G4573@subst G4574@old) (values G4574@old (cons G456b@a G4573@subst))) G4570@G456e G456f@G456d)))) (car G4568@subst)))))) (if (null? G454d@sym*) (values '() G454e@subst) (call-with-values (lambda () (G4552@exclude (car G454d@sym*) G454e@subst)) (lambda (G4555@G4553 G4556@G4554) ((lambda (G4559@subst G455a@old) (call-with-values (lambda () (G4392@exclude* (cdr G454d@sym*) G4559@subst)) (lambda (G455f@G455d G4560@G455e) ((lambda (G4563@subst G4564@old*) (values (cons G455a@old G4564@old*) G4563@subst)) G4560@G455e G455f@G455d)))) G4556@G4554 G4555@G4553)))))) '#f))) (set! G4394@find* (lambda (G4545@sym* G4546@subst) (map (lambda (G4549@x) ((lambda (G454b@t) (if G454b@t (cdr G454b@t) (G3152@syntax-violation 'import '"cannot find identifier" G4549@x))) (assq G4549@x G4546@subst))) G4545@sym*))) (set! G4396@rem* (lambda (G453d@sym* G453e@subst) ((letrec ((G4541@f (lambda (G4543@subst) (if (null? G4543@subst) '() (if (memq (caar G4543@subst) G453d@sym*) (G4541@f (cdr G4543@subst)) (cons (car G4543@subst) (G4541@f (cdr G4543@subst)))))))) G4541@f) G453e@subst))) (set! G4398@remove-dups (lambda (G453b@ls) (if (null? G453b@ls) '() (if (memq (car G453b@ls) (cdr G453b@ls)) (G4398@remove-dups (cdr G453b@ls)) (cons (car G453b@ls) (G4398@remove-dups (cdr G453b@ls))))))) (set! G439a@parse-library-name (lambda (G4455@spec) ((lambda (G4458@subversion? G445a@subversion-pred G445c@version-pred) (begin (set! G4458@subversion? (lambda (G4537@x) ((lambda (G4539@x) (if (integer? G4539@x) (if (exact? G4539@x) (begin '#f (>= G4539@x '0)) '#f) '#f)) (G3158@syntax->datum G4537@x)))) (set! G445a@subversion-pred (lambda (G44d7@x*) ((lambda (G44d9@t) ((lambda (G44db@ls/false) (if (if G44db@ls/false (begin '#f (apply (lambda (G44dd@n) (G4458@subversion? G44dd@n)) G44db@ls/false)) '#f) (apply (lambda (G44df@n) (lambda (G44e1@x) (= G44e1@x (G3158@syntax->datum G44df@n)))) G44db@ls/false) ((lambda (G44e3@t) ((lambda (G44e5@ls/false) (if (if G44e5@ls/false (begin '#f (apply (lambda (G44e7@p? G44e8@sub*) (eq? (G3158@syntax->datum G44e7@p?) 'and)) G44e5@ls/false)) '#f) (apply (lambda (G44eb@p? G44ec@sub*) ((lambda (G44ef@p*) (lambda (G44f1@x) (for-all (lambda (G44f3@p) (G44f3@p G44f1@x)) G44ef@p*))) (map G445a@subversion-pred G44ec@sub*))) G44e5@ls/false) ((lambda (G44f5@t) ((lambda (G44f7@ls/false) (if (if G44f7@ls/false (begin '#f (apply (lambda (G44f9@p? G44fa@sub*) (eq? (G3158@syntax->datum G44f9@p?) 'or)) G44f7@ls/false)) '#f) (apply (lambda (G44fd@p? G44fe@sub*) ((lambda (G4501@p*) (lambda (G4503@x) (exists (lambda (G4505@p) (G4505@p G4503@x)) G4501@p*))) (map G445a@subversion-pred G44fe@sub*))) G44f7@ls/false) ((lambda (G4507@t) ((lambda (G4509@ls/false) (if (if G4509@ls/false (begin '#f (apply (lambda (G450b@p? G450c@sub) (eq? (G3158@syntax->datum G450b@p?) 'not)) G4509@ls/false)) '#f) (apply (lambda (G450f@p? G4510@sub) ((lambda (G4513@p) (lambda (G4515@x) (not (G4513@p G4515@x)))) (G445a@subversion-pred G4510@sub))) G4509@ls/false) ((lambda (G4517@t) ((lambda (G4519@ls/false) (if (if G4519@ls/false (begin '#f (apply (lambda (G451b@p? G451c@n) (if (eq? (G3158@syntax->datum G451b@p?) '<=) (begin '#f (G4458@subversion? G451c@n)) '#f)) G4519@ls/false)) '#f) (apply (lambda (G451f@p? G4520@n) (lambda (G4523@x) (<= G4523@x (G3158@syntax->datum G4520@n)))) G4519@ls/false) ((lambda (G4525@t) ((lambda (G4527@ls/false) (if (if G4527@ls/false (begin '#f (apply (lambda (G4529@p? G452a@n) (if (eq? (G3158@syntax->datum G4529@p?) '>=) (begin '#f (G4458@subversion? G452a@n)) '#f)) G4527@ls/false)) '#f) (apply (lambda (G452d@p? G452e@n) (lambda (G4531@x) (>= G4531@x (G3158@syntax->datum G452e@n)))) G4527@ls/false) ((lambda (G4533@t) ((lambda (G4535@ls/false) (if G4535@ls/false (apply (lambda () (G3152@syntax-violation 'import '"invalid sub-version spec" G4455@spec G44d7@x*)) G4535@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G4533@t))) (G305f@syntax-dispatch G4533@t '_))) G4525@t))) (G305f@syntax-dispatch G4525@t '(any any)))) G4517@t))) (G305f@syntax-dispatch G4517@t '(any any)))) G4507@t))) (G305f@syntax-dispatch G4507@t '(any any)))) G44f5@t))) (G305f@syntax-dispatch G44f5@t '(any . each-any)))) G44e3@t))) (G305f@syntax-dispatch G44e3@t '(any . each-any)))) G44d9@t))) (G305f@syntax-dispatch G44d9@t 'any))) G44d7@x*))) (set! G445c@version-pred (lambda (G4487@x*) ((lambda (G4489@t) ((lambda (G448b@ls/false) (if G448b@ls/false (apply (lambda () (lambda (G448d@x) '#t)) G448b@ls/false) ((lambda (G448f@t) ((lambda (G4491@ls/false) (if (if G4491@ls/false (begin '#f (apply (lambda (G4493@c G4494@ver*) (eq? (G3158@syntax->datum G4493@c) 'and)) G4491@ls/false)) '#f) (apply (lambda (G4497@c G4498@ver*) ((lambda (G449b@p*) (lambda (G449d@x) (for-all (lambda (G449f@p) (G449f@p G449d@x)) G449b@p*))) (map G445c@version-pred G4498@ver*))) G4491@ls/false) ((lambda (G44a1@t) ((lambda (G44a3@ls/false) (if (if G44a3@ls/false (begin '#f (apply (lambda (G44a5@c G44a6@ver*) (eq? (G3158@syntax->datum G44a5@c) 'or)) G44a3@ls/false)) '#f) (apply (lambda (G44a9@c G44aa@ver*) ((lambda (G44ad@p*) (lambda (G44af@x) (exists (lambda (G44b1@p) (G44b1@p G44af@x)) G44ad@p*))) (map G445c@version-pred G44aa@ver*))) G44a3@ls/false) ((lambda (G44b3@t) ((lambda (G44b5@ls/false) (if (if G44b5@ls/false (begin '#f (apply (lambda (G44b7@c G44b8@ver) (eq? (G3158@syntax->datum G44b7@c) 'not)) G44b5@ls/false)) '#f) (apply (lambda (G44bb@c G44bc@ver) ((lambda (G44bf@p) (lambda (G44c1@x) (not (G44bf@p G44c1@x)))) (G445c@version-pred G44bc@ver))) G44b5@ls/false) ((lambda (G44c3@t) ((lambda (G44c5@ls/false) (if G44c5@ls/false (apply (lambda (G44c7@sub*) ((lambda (G44c9@p*) (lambda (G44cb@x) ((letrec ((G44cd@f (lambda (G44cf@p* G44d0@x) (if (null? G44cf@p*) '#t (if (null? G44d0@x) '#f (if ((car G44cf@p*) (car G44d0@x)) (begin '#f (G44cd@f (cdr G44cf@p*) (cdr G44d0@x))) '#f)))))) G44cd@f) G44c9@p* G44cb@x))) (map G445a@subversion-pred G44c7@sub*))) G44c5@ls/false) ((lambda (G44d3@t) ((lambda (G44d5@ls/false) (if G44d5@ls/false (apply (lambda () (G3152@syntax-violation 'import '"invalid version spec" G4455@spec G4487@x*)) G44d5@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G44d3@t))) (G305f@syntax-dispatch G44d3@t '_))) G44c3@t))) (G305f@syntax-dispatch G44c3@t 'each-any))) G44b3@t))) (G305f@syntax-dispatch G44b3@t '(any any)))) G44a1@t))) (G305f@syntax-dispatch G44a1@t '(any . each-any)))) G448f@t))) (G305f@syntax-dispatch G448f@t '(any . each-any)))) G4489@t))) (G305f@syntax-dispatch G4489@t '()))) G4487@x*))) ((letrec ((G445d@f (lambda (G445f@x) ((lambda (G4461@t) ((lambda (G4463@ls/false) (if G4463@ls/false (apply (lambda (G4465@version-spec*) (values '() (G445c@version-pred G4465@version-spec*))) G4463@ls/false) ((lambda (G4467@t) ((lambda (G4469@ls/false) (if (if G4469@ls/false (begin '#f (apply (lambda (G446b@x G446c@x*) (G438c@idsyn? G446b@x)) G4469@ls/false)) '#f) (apply (lambda (G446f@x G4470@x*) (call-with-values (lambda () (G445d@f G4470@x*)) (lambda (G4475@G4473 G4476@G4474) ((lambda (G4479@pred G447a@name) (values (cons (G3158@syntax->datum G446f@x) G447a@name) G4479@pred)) G4476@G4474 G4475@G4473)))) G4469@ls/false) ((lambda (G447d@t) ((lambda (G447f@ls/false) (if G447f@ls/false (apply (lambda () (values '() (lambda (G4481@x) '#t))) G447f@ls/false) ((lambda (G4483@t) ((lambda (G4485@ls/false) (if G4485@ls/false (apply (lambda () (G3152@syntax-violation '#f '"invalid import spec" G4455@spec)) G4485@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G4483@t))) (G305f@syntax-dispatch G4483@t '_))) G447d@t))) (G305f@syntax-dispatch G447d@t '()))) G4467@t))) (G305f@syntax-dispatch G4467@t '(any . any)))) G4461@t))) (G305f@syntax-dispatch G4461@t '(each-any)))) G445f@x)))) G445d@f) G4455@spec))) '#f '#f '#f))) (set! G439c@import-library (lambda (G4447@spec*) (call-with-values (lambda () (G439a@parse-library-name G4447@spec*)) (lambda (G444b@G4449 G444c@G444a) ((lambda (G444f@pred G4450@name) (begin (if (null? G4450@name) (G3152@syntax-violation 'import '"empty library name" G4447@spec*) (void)) ((lambda (G4453@lib) (begin (if (not G4453@lib) (G3152@syntax-violation 'import '"cannot find library with required name" G4450@name) (void)) (if (not (G444f@pred (G2be2@G2a48@library-version G4453@lib))) (G3152@syntax-violation 'import '"library does not satisfy version specification" G4447@spec* G4453@lib) (void)) ((G30d2@imp-collector) G4453@lib) (G2be6@G2a50@library-subst G4453@lib))) (G2c0a@G2a98@find-library-by-name G4450@name)))) G444c@G444a G444b@G4449))))) (set! G439e@get-import (lambda (G43b9@spec) ((lambda (G43bb@t) ((lambda (G43bd@ls/false) (if (if G43bd@ls/false (begin '#f (apply (lambda (G43bf@x G43c0@x*) (not (memq (G3158@syntax->datum G43bf@x) '(for rename except only prefix library)))) G43bd@ls/false)) '#f) (apply (lambda (G43c3@x G43c4@x*) (G439c@import-library (cons G43c3@x G43c4@x*))) G43bd@ls/false) ((lambda (G43c7@t) ((lambda (G43c9@ls/false) (if (if G43c9@ls/false (begin '#f (apply (lambda (G43cb@rename G43cc@isp G43cd@old* G43ce@new*) (if (eq? (G3158@syntax->datum G43cb@rename) 'rename) (if (for-all G438c@idsyn? G43cd@old*) (begin '#f (for-all G438c@idsyn? G43ce@new*)) '#f) '#f)) G43c9@ls/false)) '#f) (apply (lambda (G43d3@rename G43d4@isp G43d5@old* G43d6@new*) ((lambda (G43db@subst G43dc@old* G43dd@new*) ((lambda (G43e1@old-label*) ((lambda (G43e3@subst) (G4390@merge-substs (map cons G43dd@new* G43e1@old-label*) G43e3@subst)) (G4396@rem* G43dc@old* G43db@subst))) (G4394@find* G43dc@old* G43db@subst))) (G439e@get-import G43d4@isp) (map G3158@syntax->datum G43d5@old*) (map G3158@syntax->datum G43d6@new*))) G43c9@ls/false) ((lambda (G43e5@t) ((lambda (G43e7@ls/false) (if (if G43e7@ls/false (begin '#f (apply (lambda (G43e9@except G43ea@isp G43eb@sym*) (if (eq? (G3158@syntax->datum G43e9@except) 'except) (begin '#f (for-all G438c@idsyn? G43eb@sym*)) '#f)) G43e7@ls/false)) '#f) (apply (lambda (G43ef@except G43f0@isp G43f1@sym*) ((lambda (G43f5@subst) (G4396@rem* (map G3158@syntax->datum G43f1@sym*) G43f5@subst)) (G439e@get-import G43f0@isp))) G43e7@ls/false) ((lambda (G43f7@t) ((lambda (G43f9@ls/false) (if (if G43f9@ls/false (begin '#f (apply (lambda (G43fb@only G43fc@isp G43fd@sym*) (if (eq? (G3158@syntax->datum G43fb@only) 'only) (begin '#f (for-all G438c@idsyn? G43fd@sym*)) '#f)) G43f9@ls/false)) '#f) (apply (lambda (G4401@only G4402@isp G4403@sym*) ((lambda (G4407@subst G4408@sym*) ((lambda (G440b@sym*) ((lambda (G440d@lab*) (map cons G440b@sym* G440d@lab*)) (G4394@find* G440b@sym* G4407@subst))) (G4398@remove-dups G4408@sym*))) (G439e@get-import G4402@isp) (map G3158@syntax->datum G4403@sym*))) G43f9@ls/false) ((lambda (G440f@t) ((lambda (G4411@ls/false) (if (if G4411@ls/false (begin '#f (apply (lambda (G4413@prefix G4414@isp G4415@p) (if (eq? (G3158@syntax->datum G4413@prefix) 'prefix) (begin '#f (G438c@idsyn? G4415@p)) '#f)) G4411@ls/false)) '#f) (apply (lambda (G4419@prefix G441a@isp G441b@p) ((lambda (G441f@subst G4420@prefix) (map (lambda (G4423@x) (cons (string->symbol (string-append G4420@prefix (symbol->string (car G4423@x)))) (cdr G4423@x))) G441f@subst)) (G439e@get-import G441a@isp) (symbol->string (G3158@syntax->datum G441b@p)))) G4411@ls/false) ((lambda (G4425@t) ((lambda (G4427@ls/false) (if (if G4427@ls/false (begin '#f (apply (lambda (G4429@library G442a@spec*) (eq? (G3158@syntax->datum G4429@library) 'library)) G4427@ls/false)) '#f) (apply (lambda (G442d@library G442e@spec*) (G439c@import-library G442e@spec*)) G4427@ls/false) ((lambda (G4431@t) ((lambda (G4433@ls/false) (if (if G4433@ls/false (begin '#f (apply (lambda (G4435@for G4436@isp G4437@rest) (eq? (G3158@syntax->datum G4435@for) 'for)) G4433@ls/false)) '#f) (apply (lambda (G443b@for G443c@isp G443d@rest) (G439e@get-import G443c@isp)) G4433@ls/false) ((lambda (G4441@t) ((lambda (G4443@ls/false) (if G4443@ls/false (apply (lambda (G4445@spec) (G3152@syntax-violation 'import '"invalid import spec" G4445@spec)) G4443@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G4441@t))) (G305f@syntax-dispatch G4441@t 'any))) G4431@t))) (G305f@syntax-dispatch G4431@t '(any any . any)))) G4425@t))) (G305f@syntax-dispatch G4425@t '(any each-any)))) G440f@t))) (G305f@syntax-dispatch G440f@t '(any any any)))) G43f7@t))) (G305f@syntax-dispatch G43f7@t '(any any . each-any)))) G43e5@t))) (G305f@syntax-dispatch G43e5@t '(any any . each-any)))) G43c7@t))) (G305f@syntax-dispatch G43c7@t '(any any . #(each (any any)))))) G43bb@t))) (G305f@syntax-dispatch G43bb@t '(any . each-any)))) G43b9@spec))) (set! G43a0@add-imports! (lambda (G43a9@imp G43aa@h) ((lambda (G43ad@subst) (for-each (lambda (G43af@x) ((lambda (G43b1@name G43b2@label) ((lambda (G43b5@t) (if G43b5@t ((lambda (G43b7@l) (if (not (eq? G43b7@l G43b2@label)) (G438e@dup-error G43b1@name) (void))) G43b5@t) (hashtable-set! G43aa@h G43b1@name G43b2@label))) (hashtable-ref G43aa@h G43b1@name '#f))) (car G43af@x) (cdr G43af@x))) G43ad@subst)) (G439e@get-import G43a9@imp)))) (lambda (G43a1@imp*) ((letrec ((G43a3@f (lambda (G43a5@imp* G43a6@h) (if (null? G43a5@imp*) (hashtable-entries G43a6@h) (begin (G43a0@add-imports! (car G43a5@imp*) G43a6@h) (G43a3@f (cdr G43a5@imp*) G43a6@h)))))) G43a3@f) G43a1@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G30ca@make-top-rib (lambda (G458d@names G458e@labels) ((lambda (G4591@rib) (begin (vector-for-each (lambda (G4593@name G4594@label) (begin (if (not (symbol? G4593@name)) (error 'make-top-rib '"BUG: not a symbol" G4593@name) (void)) (G2dcd@extend-rib/nc! G4591@rib (G2de6@make-stx G4593@name G2d90@top-mark* '() '()) G4594@label))) G458d@names G458e@labels) G4591@rib)) (G2dc7@make-cache-rib)))) (set! G30cc@make-collector (lambda () ((lambda (G4597@ls) (lambda G459b ((lambda (G459c) (if (= G459c '0) (apply (lambda () G4597@ls) G459b) (if (= G459c '1) (apply (lambda (G4599@x) (set! G4597@ls (G2d89@set-cons G4599@x G4597@ls))) G459b) (error 'apply '"invalid arg count")))) (length G459b)))) '()))) (set! G30ce@inv-collector (G296e@G2885@make-parameter (lambda G459d@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G459f@x) (begin (if (not (procedure? G459f@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G459f@x) (void)) G459f@x)))) (set! G30d0@vis-collector (G296e@G2885@make-parameter (lambda G45a1@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G45a3@x) (begin (if (not (procedure? G45a3@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G45a3@x) (void)) G45a3@x)))) (set! G30d2@imp-collector (G296e@G2885@make-parameter (lambda G45a5@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G45a7@x) (begin (if (not (procedure? G45a7@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G45a7@x) (void)) G45a7@x)))) (set! G30d4@chi-library-internal (lambda (G45a9@e* G45aa@rib G45ab@top?) (call-with-values (lambda () (G30be@chi-body* G45a9@e* '() '() '() '() '() '() '() G45aa@rib G45ab@top?)) (lambda (G45b7@G45af G45b8@G45b0 G45b9@G45b1 G45ba@G45b2 G45bb@G45b3 G45bc@G45b4 G45bd@G45b5 G45be@G45b6) ((lambda (G45c7@exp* G45c8@_kwd* G45c9@mod** G45ca@rhs* G45cb@lex* G45cc@mr G45cd@r G45ce@e*) (values (append (apply append (reverse G45c9@mod**)) G45ce@e*) G45cd@r G45cc@mr (reverse G45cb@lex*) (reverse G45ca@rhs*) G45c7@exp*)) G45be@G45b6 G45bd@G45b5 G45bc@G45b4 G45bb@G45b3 G45ba@G45b2 G45b9@G45b1 G45b8@G45b0 G45b7@G45af))))) (set! G30d6@chi-interaction-expr (lambda (G45d7@e G45d8@rib G45d9@r) (call-with-values (lambda () (G30be@chi-body* (list G45d7@e) G45d9@r G45d9@r '() '() '() '() '() G45d8@rib '#t)) (lambda (G45e5@G45dd G45e6@G45de G45e7@G45df G45e8@G45e0 G45e9@G45e1 G45ea@G45e2 G45eb@G45e3 G45ec@G45e4) ((lambda (G45f5@_exp* G45f6@_kwd* G45f7@mod** G45f8@rhs* G45f9@lex* G45fa@mr G45fb@r G45fc@e*) ((lambda (G4605@e*) ((lambda (G4607@e) (values G4607@e G45fb@r)) (if (null? G4605@e*) (G2d78@G2cea@build-void) (if (null? (cdr G4605@e*)) (car G4605@e*) (G2d77@G2ce8@build-sequence '#f G4605@e*))))) (G3091@expand-interaction-rhs*/init* (reverse G45f9@lex*) (reverse G45f8@rhs*) (append (apply append (reverse G45f7@mod**)) G45fc@e*) G45fb@r G45fa@mr))) G45ec@G45e4 G45eb@G45e3 G45ea@G45e2 G45e9@G45e1 G45e8@G45e0 G45e7@G45df G45e6@G45de G45e5@G45dd))))) (set! G30d8@library-body-expander (lambda (G4609@name G460a@main-exp* G460b@imp* G460c@b* G460d@top?) ((lambda (G4614@itc) (begin (set! G4614@itc (G30cc@make-collector)) ((lambda (G4619@G4615@imp-collector G461a@G4616@top-level-context G461b@G4617@imp-collector G461c@G4618@top-level-context) ((lambda (G4621@swap) (dynamic-wind G4621@swap (lambda () (call-with-values (lambda () (G30c8@parse-import-spec* G460b@imp*)) (lambda (G4625@G4623 G4626@G4624) ((lambda (G4629@subst-labels G462a@subst-names) ((lambda (G462d@rib) ((lambda (G4630@wrap) (begin (set! G4630@wrap (lambda (G469c@x) (G2de6@make-stx G469c@x G2d90@top-mark* (list G462d@rib) '()))) ((lambda (G4631@b* G4632@main-exp* G4633@rtc G4634@vtc) ((lambda (G463d@G4639@inv-collector G463e@G463a@vis-collector G463f@G463b@inv-collector G4640@G463c@vis-collector) ((lambda (G4645@swap) (dynamic-wind G4645@swap (lambda () (call-with-values (lambda () (G30d4@chi-library-internal G4631@b* G462d@rib G460d@top?)) (lambda (G464d@G4647 G464e@G4648 G464f@G4649 G4650@G464a G4651@G464b G4652@G464c) ((lambda (G4659@internal-exp* G465a@rhs* G465b@lex* G465c@mr G465d@r G465e@init*) (call-with-values (lambda () (G30c2@parse-exports (append G4632@main-exp* G4659@internal-exp*))) (lambda (G4667@G4665 G4668@G4666) ((lambda (G466b@exp-id* G466c@exp-name*) (begin (G2dd1@seal-rib! G462d@rib) ((lambda (G466f@init*) ((lambda (G4671@rhs*) ((lambda () (begin (G2dd3@unseal-rib! G462d@rib) ((lambda (G4673@loc* G4674@export-subst) ((lambda (G4678@errstr) (begin (set! G4678@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G313c@make-export-env/macros G465b@lex* G4673@loc* G465d@r)) (lambda (G467c@G4679 G467d@G467a G467e@G467b) ((lambda (G4682@macro* G4683@global* G4684@export-env) (begin (for-each (lambda (G4688@s) ((lambda (G468a@name G468b@label) ((lambda (G468e@p) (if G468e@p ((lambda (G4690@b) ((lambda (G4692@type) (if (eq? G4692@type 'mutable) (G3152@syntax-violation 'export G4678@errstr G468a@name) (void))) (car G4690@b))) (cdr G468e@p)) (void))) (assq G468b@label G4684@export-env))) (car G4688@s) (cdr G4688@s))) G4674@export-subst) ((lambda (G4694@invoke-body G4695@invoke-definitions) (values (G4614@itc) (G4633@rtc) (G4634@vtc) (G2d77@G2ce8@build-sequence '#f (append G4695@invoke-definitions (list G4694@invoke-body))) G4682@macro* G4674@export-subst G4684@export-env)) (G2d7a@G2cee@build-letrec* '#f G465b@lex* G4671@rhs* (G3138@build-exports G4683@global* G466f@init*)) (map G2d73@G2c18@build-global-define (map cdr G4683@global*))))) G467e@G467b G467d@G467a G467c@G4679))))) '#f)) (map G2d96@gen-global G465b@lex*) (G313a@make-export-subst G466c@exp-name* G466b@exp-id*)))))) (G3093@chi-rhs* G465a@rhs* G465d@r G465c@mr))) (G307f@chi-expr* G465e@init* G465d@r G465c@mr)))) G4668@G4666 G4667@G4665)))) G4652@G464c G4651@G464b G4650@G464a G464f@G4649 G464e@G4648 G464d@G4647)))) G4645@swap)) (lambda () (begin ((lambda (G4698@t) (begin (G463d@G4639@inv-collector G463f@G463b@inv-collector) (set! G463f@G463b@inv-collector G4698@t))) (G463d@G4639@inv-collector)) ((lambda (G469a@t) (begin (G463e@G463a@vis-collector G4640@G463c@vis-collector) (set! G4640@G463c@vis-collector G469a@t))) (G463e@G463a@vis-collector)))))) G30ce@inv-collector G30d0@vis-collector G4633@rtc G4634@vtc)) (map G4630@wrap G460c@b*) (map G4630@wrap G460a@main-exp*) (G30cc@make-collector) (G30cc@make-collector)))) '#f)) (G30ca@make-top-rib G462a@subst-names G4629@subst-labels))) G4626@G4624 G4625@G4623)))) G4621@swap)) (lambda () (begin ((lambda (G469e@t) (begin (G4619@G4615@imp-collector G461b@G4617@imp-collector) (set! G461b@G4617@imp-collector G469e@t))) (G4619@G4615@imp-collector)) ((lambda (G46a0@t) (begin (G461a@G4616@top-level-context G461c@G4618@top-level-context) (set! G461c@G4618@top-level-context G46a0@t))) (G461a@G4616@top-level-context)))))) G30d2@imp-collector G3160@top-level-context G4614@itc '#f))) '#f))) (set! G30da@core-library-expander (lambda (G46a2@e G46a3@verify-name) (call-with-values (lambda () (G30c6@parse-library G46a2@e)) (lambda (G46aa@G46a6 G46ab@G46a7 G46ac@G46a8 G46ad@G46a9) ((lambda (G46b2@b* G46b3@imp* G46b4@exp* G46b5@name*) (call-with-values (lambda () (G30c4@parse-library-name G46b5@name*)) (lambda (G46bc@G46ba G46bd@G46bb) ((lambda (G46c0@ver G46c1@name) (begin (G46a3@verify-name G46c1@name) (call-with-values (lambda () (G30d8@library-body-expander G46c1@name G46b4@exp* G46b3@imp* G46b2@b* '#f)) (lambda (G46cb@G46c4 G46cc@G46c5 G46cd@G46c6 G46ce@G46c7 G46cf@G46c8 G46d0@G46c9 G46d1@G46ca) ((lambda (G46d9@export-env G46da@export-subst G46db@visit-code G46dc@invoke-code G46dd@visit-req* G46de@invoke-req* G46df@imp*) (values G46c1@name G46c0@ver G46df@imp* G46de@invoke-req* G46dd@visit-req* G46dc@invoke-code G46db@visit-code G46da@export-subst G46d9@export-env)) G46d1@G46ca G46d0@G46c9 G46cf@G46c8 G46ce@G46c7 G46cd@G46c6 G46cc@G46c5 G46cb@G46c4))))) G46bd@G46bb G46bc@G46ba)))) G46ad@G46a9 G46ac@G46a8 G46ab@G46a7 G46aa@G46a6))))) (set! G30dc@parse-top-level-program (lambda (G46e7@e*) ((lambda (G46e9@t) ((lambda (G46eb@ls/false) (if (if G46eb@ls/false (begin '#f (apply (lambda (G46ed@import G46ee@imp* G46ef@b*) (eq? (G3158@syntax->datum G46ed@import) 'import)) G46eb@ls/false)) '#f) (apply (lambda (G46f3@import G46f4@imp* G46f5@b*) (values G46f4@imp* G46f5@b*)) G46eb@ls/false) ((lambda (G46f9@t) ((lambda (G46fb@ls/false) (if (if G46fb@ls/false (begin '#f (apply (lambda (G46fd@import G46fe@x G46ff@y) (eq? (G3158@syntax->datum G46fd@import) 'import)) G46fb@ls/false)) '#f) (apply (lambda (G4703@import G4704@x G4705@y) (G3152@syntax-violation 'expander '"invalid syntax of top-level program" (G2e16@syntax-car G46e7@e*))) G46fb@ls/false) ((lambda (G4709@t) ((lambda (G470b@ls/false) (if G470b@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G470b@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G4709@t))) (G305f@syntax-dispatch G4709@t '_))) G46f9@t))) (G305f@syntax-dispatch G46f9@t '((any . any) . any)))) G46e9@t))) (G305f@syntax-dispatch G46e9@t '((any . each-any) . each-any)))) G46e7@e*))) (set! G30de@top-level-expander (lambda (G470d@e*) (call-with-values (lambda () (G30dc@parse-top-level-program G470d@e*)) (lambda (G4711@G470f G4712@G4710) ((lambda (G4715@b* G4716@imp*) (call-with-values (lambda () (G30d8@library-body-expander '() '() G4716@imp* G4715@b* '#t)) (lambda (G4720@G4719 G4721@G471a G4722@G471b G4723@G471c G4724@G471d G4725@G471e G4726@G471f) ((lambda (G472e@export-env G472f@export-subst G4730@visit-code G4731@invoke-code G4732@visit-req* G4733@invoke-req* G4734@imp*) (values G4733@invoke-req* G4731@invoke-code)) G4726@G471f G4725@G471e G4724@G471d G4723@G471c G4722@G471b G4721@G471a G4720@G4719)))) G4712@G4710 G4711@G470f))))) (set! G30e4@G30df (make-record-type-descriptor 'env '#f 'G30e2 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G30e6@G30e1 '#f) (set! G30e8@G30e0 (make-record-constructor-descriptor G30e4@G30df '#f G30e6@G30e1)) (set! G30ed@env? (record-predicate G30e4@G30df)) (set! G30ef@make-env (record-constructor G30e8@G30e0)) (set! G30f1@env-names (record-accessor G30e4@G30df '0)) (set! G30f3@env-labels (record-accessor G30e4@G30df '1)) (set! G30f5@env-itc (record-accessor G30e4@G30df '2)) (set! G30f7@set-env-names! (record-mutator G30e4@G30df '0)) (set! G30f9@set-env-labels! (record-mutator G30e4@G30df '1)) (set! G30fb@set-env-itc! (record-mutator G30e4@G30df '2)) (set! G30fd@rp (G296b@G287f@make-record-printer 'env (lambda (G473c@x G473d@p G473e@wr) (display '"#<environment>" G473d@p)))) (set! G3103@G30fe (make-record-type-descriptor 'interaction-env '#f 'G3101 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3105@G3100 '#f) (set! G3107@G30ff (make-record-constructor-descriptor G3103@G30fe '#f G3105@G3100)) (set! G310c@interaction-env? (record-predicate G3103@G30fe)) (set! G310e@make-interaction-env (record-constructor G3107@G30ff)) (set! G3110@interaction-env-rib (record-accessor G3103@G30fe '0)) (set! G3112@interaction-env-r (record-accessor G3103@G30fe '1)) (set! G3114@interaction-env-locs (record-accessor G3103@G30fe '2)) (set! G3116@set-interaction-env-rib! (record-mutator G3103@G30fe '0)) (set! G3118@set-interaction-env-r! (record-mutator G3103@G30fe '1)) (set! G311a@set-interaction-env-locs! (record-mutator G3103@G30fe '2)) (set! G311c@rp (G296b@G287f@make-record-printer 'interaction-env (lambda (G4742@x G4743@p G4744@wr) (display '"#<environment>" G4743@p)))) (set! G311e@interaction-environment-symbols (lambda () (G3126@environment-symbols (G315e@interaction-environment)))) (set! G3120@environment-bindings (lambda (G4748@e) (vector->list (vector-map (lambda (G474a@name G474b@label) (G3122@parse-binding (cons G474a@name (G2c10@G2aa4@imported-label->binding G474b@label)))) (G30f1@env-names G4748@e) (G30f3@env-labels G4748@e))))) (set! G3122@parse-binding (lambda (G474e@b) (cons (car G474e@b) ((lambda (G4750@t) (if (memv G4750@t '(core-prim global)) 'procedure (if (memv G4750@t '(core-macro macro global-macro)) 'syntax (if (memv G4750@t '($core-rtd)) 'record (if (eq? (car G474e@b) (cadr G474e@b)) 'syntax 'unknown))))) (cadr G474e@b))))) (set! G3124@environment? (lambda (G4752@x) ((lambda (G4754@t) (if G4754@t G4754@t (begin '#f (G310c@interaction-env? G4752@x)))) (G30ed@env? G4752@x)))) (set! G3126@environment-symbols (lambda (G4756@x) (if (G30ed@env? G4756@x) (vector->list (G30f1@env-names G4756@x)) (if (G310c@interaction-env? G4756@x) (map values (G2db1@rib-sym* (G3110@interaction-env-rib G4756@x))) (assertion-violation 'environment-symbols '"not an environment" G4756@x))))) (set! G3128@environment (lambda G4758@imp* ((lambda (G475a@itc) ((lambda (G475e@G475c@imp-collector G475f@G475d@imp-collector) ((lambda (G4762@swap) (dynamic-wind G4762@swap (lambda () (call-with-values (lambda () (G30c8@parse-import-spec* G4758@imp*)) (lambda (G4766@G4764 G4767@G4765) ((lambda (G476a@subst-labels G476b@subst-names) (G30ef@make-env G476b@subst-names G476a@subst-labels G475a@itc)) G4767@G4765 G4766@G4764)))) G4762@swap)) (lambda () ((lambda (G476e@t) (begin (G475e@G475c@imp-collector G475f@G475d@imp-collector) (set! G475f@G475d@imp-collector G476e@t))) (G475e@G475c@imp-collector))))) G30d2@imp-collector G475a@itc)) (G30cc@make-collector)))) (set! G312a@null-environment (lambda (G4770@n) (begin (if (not (eqv? G4770@n '5)) (assertion-violation 'null-environment '"not 5" G4770@n) (void)) (G3128@environment '(psyntax null-environment-5))))) (set! G312c@scheme-report-environment (lambda (G4772@n) (begin (if (not (eqv? G4772@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4772@n) (void)) (G3128@environment '(psyntax scheme-report-environment-5))))) (set! G312e@expand (lambda (G4774@x G4775@env) (if (G30ed@env? G4775@env) ((lambda (G4778@rib) ((lambda (G477a@x G477b@itc G477c@rtc G477d@vtc) ((lambda (G4782@x) (begin (G2dd1@seal-rib! G4778@rib) (values G4782@x (G477c@rtc)))) ((lambda (G478c@G4784@top-level-context G478d@G4785@inv-collector G478e@G4786@vis-collector G478f@G4787@imp-collector G4790@G4788@top-level-context G4791@G4789@inv-collector G4792@G478a@vis-collector G4793@G478b@imp-collector) ((lambda (G479c@swap) (dynamic-wind G479c@swap (lambda () (G3083@chi-expr G477a@x '() '())) G479c@swap)) (lambda () (begin ((lambda (G479e@t) (begin (G478c@G4784@top-level-context G4790@G4788@top-level-context) (set! G4790@G4788@top-level-context G479e@t))) (G478c@G4784@top-level-context)) ((lambda (G47a0@t) (begin (G478d@G4785@inv-collector G4791@G4789@inv-collector) (set! G4791@G4789@inv-collector G47a0@t))) (G478d@G4785@inv-collector)) ((lambda (G47a2@t) (begin (G478e@G4786@vis-collector G4792@G478a@vis-collector) (set! G4792@G478a@vis-collector G47a2@t))) (G478e@G4786@vis-collector)) ((lambda (G47a4@t) (begin (G478f@G4787@imp-collector G4793@G478b@imp-collector) (set! G4793@G478b@imp-collector G47a4@t))) (G478f@G4787@imp-collector)))))) G3160@top-level-context G30ce@inv-collector G30d0@vis-collector G30d2@imp-collector '#f G477c@rtc G477d@vtc G477b@itc))) (G2de6@make-stx G4774@x G2d90@top-mark* (list G4778@rib) '()) (G30f5@env-itc G4775@env) (G30cc@make-collector) (G30cc@make-collector))) (G30ca@make-top-rib (G30f1@env-names G4775@env) (G30f3@env-labels G4775@env))) (if (G310c@interaction-env? G4775@env) ((lambda (G47a6@rib G47a7@r G47a8@rtc) ((lambda (G47ac@x) (call-with-values (lambda () ((lambda (G47b8@G47b0@top-level-context G47b9@G47b1@inv-collector G47ba@G47b2@vis-collector G47bb@G47b3@imp-collector G47bc@G47b4@top-level-context G47bd@G47b5@inv-collector G47be@G47b6@vis-collector G47bf@G47b7@imp-collector) ((lambda (G47c8@swap) (dynamic-wind G47c8@swap (lambda () (G30d6@chi-interaction-expr G47ac@x G47a6@rib G47a7@r)) G47c8@swap)) (lambda () (begin ((lambda (G47ca@t) (begin (G47b8@G47b0@top-level-context G47bc@G47b4@top-level-context) (set! G47bc@G47b4@top-level-context G47ca@t))) (G47b8@G47b0@top-level-context)) ((lambda (G47cc@t) (begin (G47b9@G47b1@inv-collector G47bd@G47b5@inv-collector) (set! G47bd@G47b5@inv-collector G47cc@t))) (G47b9@G47b1@inv-collector)) ((lambda (G47ce@t) (begin (G47ba@G47b2@vis-collector G47be@G47b6@vis-collector) (set! G47be@G47b6@vis-collector G47ce@t))) (G47ba@G47b2@vis-collector)) ((lambda (G47d0@t) (begin (G47bb@G47b3@imp-collector G47bf@G47b7@imp-collector) (set! G47bf@G47b7@imp-collector G47d0@t))) (G47bb@G47b3@imp-collector)))))) G3160@top-level-context G30ce@inv-collector G30d0@vis-collector G30d2@imp-collector G4775@env G47a8@rtc (G30cc@make-collector) (G30cc@make-collector))) (lambda (G47d2@G47ae G47d3@G47af) ((lambda (G47d6@r^ G47d7@e) (begin (G3118@set-interaction-env-r! G4775@env G47d6@r^) (values G47d7@e (G47a8@rtc)))) G47d3@G47af G47d2@G47ae)))) (G2de6@make-stx G4774@x G2d90@top-mark* (list G47a6@rib) '()))) (G3110@interaction-env-rib G4775@env) (G3112@interaction-env-r G4775@env) (G30cc@make-collector)) (assertion-violation 'expand '"not an environment" G4775@env))))) (set! G3130@eval (lambda (G47da@x G47db@env) (begin (if (not (G3124@environment? G47db@env)) (error 'eval '"not an environment" G47db@env) (void)) (call-with-values (lambda () (G312e@expand G47da@x G47db@env)) (lambda (G47e0@G47de G47e1@G47df) ((lambda (G47e4@invoke-req* G47e5@x) (begin (for-each G2c11@G2aa6@invoke-library G47e4@invoke-req*) (eval-core (G29d2@G297a@expanded->core G47e5@x)))) G47e1@G47df G47e0@G47de)))))) (set! G3132@library-expander (lambda G484d ((lambda (G484e) (if (= G484e '3) (apply (lambda (G47e8@x G47e9@filename G47ea@verify-name) ((lambda (G47ef@build-visit-code G47f1@visit!) (begin (set! G47ef@build-visit-code (lambda (G483b@macro*) (if (null? G483b@macro*) (G2d78@G2cea@build-void) (G2d77@G2ce8@build-sequence '#f (map (lambda (G483d@x) ((lambda (G483f@loc G4840@src) (list 'set! G483f@loc G4840@src)) (car G483d@x) (cddr G483d@x))) G483b@macro*))))) (set! G47f1@visit! (lambda (G4833@macro*) (for-each (lambda (G4835@x) ((lambda (G4837@loc G4838@proc) (set-symbol-value! G4837@loc G4838@proc)) (car G4835@x) (cadr G4835@x))) G4833@macro*))) (call-with-values (lambda () (G30da@core-library-expander G47e8@x G47ea@verify-name)) (lambda (G47fb@G47f2 G47fc@G47f3 G47fd@G47f4 G47fe@G47f5 G47ff@G47f6 G4800@G47f7 G4801@G47f8 G4802@G47f9 G4803@G47fa) ((lambda (G480d@export-env G480e@export-subst G480f@macro* G4810@invoke-code G4811@vis* G4812@inv* G4813@imp* G4814@ver G4815@name) ((lambda (G481f@id G4820@name G4821@ver G4822@imp* G4823@vis* G4824@inv* G4825@visit-proc G4826@invoke-proc G4827@visit-code G4828@invoke-code) (begin (G2c0f@G2aa2@install-library G481f@id G4820@name G4821@ver G4822@imp* G4823@vis* G4824@inv* G480e@export-subst G480d@export-env G4825@visit-proc G4826@invoke-proc G4827@visit-code G4828@invoke-code '#t G47e9@filename) (values G481f@id G4820@name G4821@ver G4822@imp* G4823@vis* G4824@inv* G4828@invoke-code G4827@visit-code G480e@export-subst G480d@export-env))) (gensym) G4815@name G4814@ver (map G2c15@G2aae@library-spec G4813@imp*) (map G2c15@G2aae@library-spec G4811@vis*) (map G2c15@G2aae@library-spec G4812@inv*) (lambda () (G47f1@visit! G480f@macro*)) (lambda () (eval-core (G29d2@G297a@expanded->core G4810@invoke-code))) (G47ef@build-visit-code G480f@macro*) G4810@invoke-code)) G4803@G47fa G4802@G47f9 G4801@G47f8 G4800@G47f7 G47ff@G47f6 G47fe@G47f5 G47fd@G47f4 G47fc@G47f3 G47fb@G47f2))))) '#f '#f)) G484d) (if (= G484e '2) (apply (lambda (G4843@x G4844@filename) (G3132@library-expander G4843@x G4844@filename (lambda (G4847@x) (values)))) G484d) (if (= G484e '1) (apply (lambda (G4849@x) (G3132@library-expander G4849@x '#f (lambda (G484b@x) (values)))) G484d) (error 'apply '"invalid arg count"))))) (length G484d)))) (set! G3134@boot-library-expand (lambda (G484f@x) (call-with-values (lambda () (G3132@library-expander G484f@x)) (lambda (G485b@G4851 G485c@G4852 G485d@G4853 G485e@G4854 G485f@G4855 G4860@G4856 G4861@G4857 G4862@G4858 G4863@G4859 G4864@G485a) ((lambda (G486f@export-env G4870@export-subst G4871@visit-code G4872@invoke-code G4873@inv* G4874@vis* G4875@imp* G4876@ver G4877@name G4878@id) (values G4877@name G4872@invoke-code G4870@export-subst G486f@export-env)) G4864@G485a G4863@G4859 G4862@G4858 G4861@G4857 G4860@G4856 G485f@G4855 G485e@G4854 G485d@G4853 G485c@G4852 G485b@G4851))))) (set! G3136@rev-map-append (lambda (G4883@f G4884@ls G4885@ac) (if (null? G4884@ls) G4885@ac (G3136@rev-map-append G4883@f (cdr G4884@ls) (cons (G4883@f (car G4884@ls)) G4885@ac))))) (set! G3138@build-exports (lambda (G4889@lex*+loc* G488a@init*) (G2d77@G2ce8@build-sequence '#f (cons (G2d78@G2cea@build-void) (G3136@rev-map-append (lambda (G488d@x) (list 'set! (cdr G488d@x) (car G488d@x))) G4889@lex*+loc* G488a@init*))))) (set! G313a@make-export-subst (lambda (G488f@name* G4890@id*) (map (lambda (G4893@name G4894@id) ((lambda (G4897@label) (begin (if (not G4897@label) (G3152@syntax-violation '#f '"cannot export unbound identifier" G4894@id) (void)) (cons G4893@name G4897@label))) (G2e36@id->label G4894@id))) G488f@name* G4890@id*))) (set! G313c@make-export-env/macros (lambda (G4899@lex* G489a@loc* G489b@r) ((lambda (G48a0@lookup) (begin (set! G48a0@lookup (lambda (G48bd@x) ((letrec ((G48bf@f (lambda (G48c1@x G48c2@lex* G48c3@loc*) (if (pair? G48c2@lex*) (if (eq? G48c1@x (car G48c2@lex*)) (car G48c3@loc*) (G48bf@f G48c1@x (cdr G48c2@lex*) (cdr G48c3@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G48bf@f) G48bd@x G4899@lex* G489a@loc*))) ((letrec ((G48a1@f (lambda (G48a3@r G48a4@env G48a5@global* G48a6@macro*) (if (null? G48a3@r) (values G48a4@env G48a5@global* G48a6@macro*) ((lambda (G48ab@x) ((lambda (G48ad@label G48ae@b) ((lambda (G48b1@t) (if (memv G48b1@t '(lexical)) ((lambda (G48b3@v) ((lambda (G48b5@loc G48b6@type) (G48a1@f (cdr G48a3@r) (cons (cons* G48ad@label G48b6@type G48b5@loc) G48a4@env) (cons (cons (G2fef@lexical-var G48b3@v) G48b5@loc) G48a5@global*) G48a6@macro*)) (G48a0@lookup (G2fef@lexical-var G48b3@v)) (if (G2ff1@lexical-mutable? G48b3@v) 'mutable 'global))) (G2e40@binding-value G48ae@b)) (if (memv G48b1@t '(local-macro)) ((lambda (G48b9@loc) (G48a1@f (cdr G48a3@r) (cons (cons* G48ad@label 'global-macro G48b9@loc) G48a4@env) G48a5@global* (cons (cons G48b9@loc (G2e40@binding-value G48ae@b)) G48a6@macro*))) (gensym)) (if (memv G48b1@t '(local-macro!)) ((lambda (G48bb@loc) (G48a1@f (cdr G48a3@r) (cons (cons* G48ad@label 'global-macro! G48bb@loc) G48a4@env) G48a5@global* (cons (cons G48bb@loc (G2e40@binding-value G48ae@b)) G48a6@macro*))) (gensym)) (if (memv G48b1@t '($rtd $module)) (G48a1@f (cdr G48a3@r) (cons G48ab@x G48a4@env) G48a5@global* G48a6@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2e3e@binding-type G48ae@b) (G2e40@binding-value G48ae@b))))))) (G2e3e@binding-type G48ae@b))) (car G48ab@x) (cdr G48ab@x))) (car G48a3@r)))))) G48a1@f) G489b@r '() '() '()))) '#f))) (set! G313e@generate-temporaries (lambda (G48c7@ls) ((lambda (G48c9@t) ((lambda (G48cb@ls/false) (if G48cb@ls/false (apply (lambda (G48cd@ls) (map (lambda (G48cf@x) (G2de6@make-stx ((lambda (G48d1@x) (if ((lambda (G48d3@t) (if G48d3@t G48d3@t (begin '#f (string? G48d1@x)))) (symbol? G48d1@x)) (gensym G48d1@x) (gensym 't))) (G3158@syntax->datum G48cf@x)) G2d90@top-mark* '() '())) G48cd@ls)) G48cb@ls/false) ((lambda (G48d5@t) ((lambda (G48d7@ls/false) (if G48d7@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G48d7@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G48d5@t))) (G305f@syntax-dispatch G48d5@t '_))) G48c9@t))) (G305f@syntax-dispatch G48c9@t 'each-any))) G48c7@ls))) (set! G3140@free-identifier=? (lambda (G48d9@x G48da@y) (if (G2e1c@id? G48d9@x) (if (G2e1c@id? G48da@y) (G2e24@free-id=? G48d9@x G48da@y) (assertion-violation 'free-identifier=? '"not an identifier" G48da@y)) (assertion-violation 'free-identifier=? '"not an identifier" G48d9@x)))) (set! G3142@bound-identifier=? (lambda (G48dd@x G48de@y) (if (G2e1c@id? G48dd@x) (if (G2e1c@id? G48de@y) (G2e22@bound-id=? G48dd@x G48de@y) (assertion-violation 'bound-identifier=? '"not an identifier" G48de@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G48dd@x)))) (set! G3144@make-source-condition (lambda (G48e1@x) ((lambda (G48eb@G48e6 G48ed@G48e8 G48ef@G48e7 G48f4@G48e5 G48f6@make-source-condition G48f8@G48e3 G48fa@G48e4 G48fc@source-condition? G48fe@source-filename G4900@source-character) (begin (set! G48eb@G48e6 (make-record-type-descriptor '&source-information &condition-rtd 'G48e9 '#f '#f '#((immutable file-name) (immutable character)))) (set! G48ed@G48e8 '#f) (set! G48ef@G48e7 (make-record-constructor-descriptor G48eb@G48e6 &condition-rcd G48ed@G48e8)) (set! G48f4@G48e5 (record-predicate G48eb@G48e6)) (set! G48f6@make-source-condition (record-constructor G48ef@G48e7)) (set! G48f8@G48e3 (record-accessor G48eb@G48e6 '0)) (set! G48fa@G48e4 (record-accessor G48eb@G48e6 '1)) (set! G48fc@source-condition? (condition-predicate G48eb@G48e6)) (set! G48fe@source-filename (condition-accessor G48eb@G48e6 G48f8@G48e3)) (set! G4900@source-character (condition-accessor G48eb@G48e6 G48fa@G48e4)) (if (pair? G48e1@x) (G48f6@make-source-condition (car G48e1@x) (cdr G48e1@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3146@extract-position-condition (lambda (G4901@x) (G3144@make-source-condition (G3148@expression-position G4901@x)))) (set! G3148@expression-position (lambda (G4903@x) (if (G2de4@stx? G4903@x) (begin '#f ((lambda (G4905@x) (if (G2966@G2875@annotation? G4905@x) (begin '#f (G2967@G2877@annotation-source G4905@x)) '#f)) (G2de8@stx-expr G4903@x))) '#f))) (set! G314a@assertion-error (lambda (G4907@expr G4908@pos) (raise (condition (G4bff@G4b31@make-assertion-violation) (G4c0d@G4b5f@make-who-condition 'assert) (G4bdf@G4ac9@make-message-condition '"assertion failed") (G4c05@G4b46@make-irritants-condition (list G4907@expr)) (G3144@make-source-condition G4908@pos))))) (set! G314c@syntax-error (lambda (G490b@x . G490d@args) (begin (if (not (for-all string? G490d@args)) (assertion-violation 'syntax-error '"invalid argument" G490d@args) (void)) (raise (condition (G4bdf@G4ac9@make-message-condition (if (null? G490d@args) '"invalid syntax" (apply string-append G490d@args))) (G4c27@G4bb5@make-syntax-violation (G3158@syntax->datum G490b@x) '#f) (G3146@extract-position-condition G490b@x) (G314e@extract-trace G490b@x)))))) (set! G314e@extract-trace (lambda (G490f@x) ((lambda (G4918@G4913 G491a@G4915 G491c@G4914 G4921@G4912 G4923@make-trace G4925@G4911 G4927@trace? G4929@trace-form) (begin (set! G4918@G4913 (make-record-type-descriptor '&trace &condition-rtd 'G4916 '#f '#f '#((immutable form)))) (set! G491a@G4915 '#f) (set! G491c@G4914 (make-record-constructor-descriptor G4918@G4913 &condition-rcd G491a@G4915)) (set! G4921@G4912 (record-predicate G4918@G4913)) (set! G4923@make-trace (record-constructor G491c@G4914)) (set! G4925@G4911 (record-accessor G4918@G4913 '0)) (set! G4927@trace? (condition-predicate G4918@G4913)) (set! G4929@trace-form (condition-accessor G4918@G4913 G4925@G4911)) ((letrec ((G492a@f (lambda (G492c@x) (if (G2de4@stx? G492c@x) (apply condition (G4923@make-trace G492c@x) (map G492a@f (G2dee@stx-ae* G492c@x))) (if (G2966@G2875@annotation? G492c@x) (G4923@make-trace (G2de6@make-stx G492c@x '() '() '())) (condition)))))) G492a@f) G490f@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3150@syntax-violation* (lambda (G492e@who G492f@msg G4930@form G4931@condition-object) (begin (if (not (string? G492f@msg)) (assertion-violation 'syntax-violation '"message is not a string" G492f@msg) (void)) ((lambda (G4936@who) (raise (condition (if G4936@who (G4c0d@G4b5f@make-who-condition G4936@who) (condition)) (G4bdf@G4ac9@make-message-condition G492f@msg) G4931@condition-object (G3146@extract-position-condition G4930@form) (G314e@extract-trace G4930@form)))) (if ((lambda (G4938@t) (if G4938@t G4938@t (begin '#f (symbol? G492e@who)))) (string? G492e@who)) G492e@who (if (not G492e@who) ((lambda (G493a@t) ((lambda (G493c@ls/false) (if (if G493c@ls/false (begin '#f (apply (lambda (G493e@id) (G2e1c@id? G493e@id)) G493c@ls/false)) '#f) (apply (lambda (G4940@id) (G3158@syntax->datum G4940@id)) G493c@ls/false) ((lambda (G4942@t) ((lambda (G4944@ls/false) (if (if G4944@ls/false (begin '#f (apply (lambda (G4946@id G4947@rest) (G2e1c@id? G4946@id)) G4944@ls/false)) '#f) (apply (lambda (G494a@id G494b@rest) (G3158@syntax->datum G494a@id)) G4944@ls/false) ((lambda (G494e@t) ((lambda (G4950@ls/false) (if G4950@ls/false (apply (lambda () '#f) G4950@ls/false) (G3152@syntax-violation '#f '"invalid syntax" G494e@t))) (G305f@syntax-dispatch G494e@t '_))) G4942@t))) (G305f@syntax-dispatch G4942@t '(any . any)))) G493a@t))) (G305f@syntax-dispatch G493a@t 'any))) G4930@form) (assertion-violation 'syntax-violation '"invalid who argument" G492e@who))))))) (set! G3152@syntax-violation (lambda G4960 ((lambda (G4961) (if (= G4961 '3) (apply (lambda (G4952@who G4953@msg G4954@form) (G3152@syntax-violation G4952@who G4953@msg G4954@form '#f)) G4960) (if (= G4961 '4) (apply (lambda (G4958@who G4959@msg G495a@form G495b@subform) (G3150@syntax-violation* G4958@who G4959@msg G495a@form (G4c27@G4bb5@make-syntax-violation (G3158@syntax->datum G495a@form) (G3158@syntax->datum G495b@subform)))) G4960) (error 'apply '"invalid arg count")))) (length G4960)))) (set! G3154@identifier? (lambda (G4962@x) (G2e1c@id? G4962@x))) (set! G3156@datum->syntax (lambda (G4964@id G4965@datum) (if (G2e1c@id? G4964@id) (G2dfa@datum->stx G4964@id G4965@datum) (assertion-violation 'datum->syntax '"not an identifier" G4964@id)))) (set! G3158@syntax->datum (lambda (G4968@x) (G2e32@stx->datum G4968@x))) (set! G315a@compile-r6rs-top-level (lambda (G496a@x*) (call-with-values (lambda () (G30de@top-level-expander G496a@x*)) (lambda (G496e@G496c G496f@G496d) ((lambda (G4972@invoke-code G4973@lib*) (lambda () (begin (for-each G2c11@G2aa6@invoke-library G4973@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G29d2@G297a@expanded->core G4972@invoke-code)) (void)) (eval-core (G29d2@G297a@expanded->core G4972@invoke-code))))) G496f@G496d G496e@G496c))))) (set! G315c@pre-compile-r6rs-top-level (lambda (G4976@x*) (call-with-values (lambda () (G30de@top-level-expander G4976@x*)) (lambda (G497a@G4978 G497b@G4979) ((lambda (G497e@invoke-code G497f@lib*) (begin (for-each G2c11@G2aa6@invoke-library G497f@lib*) (G296c@G2881@compile-core (G29d2@G297a@expanded->core G497e@invoke-code)))) G497b@G4979 G497a@G4978))))) (set! G315e@interaction-environment ((lambda (G4982@the-env) (lambda () ((lambda (G4984@t) (if G4984@t G4984@t (begin '#f ((lambda (G4986@lib G4987@rib) (begin ((lambda (G498a@subst) (begin (G2dbb@set-rib-sym*! G4987@rib (map car G498a@subst)) (G2dbd@set-rib-mark**! G4987@rib (map (lambda (G498c@x) G2d90@top-mark*) G498a@subst)) (G2dbf@set-rib-label*! G4987@rib (map cdr G498a@subst)))) (G2be6@G2a50@library-subst G4986@lib)) ((lambda (G498e@env) (begin (set! G4982@the-env G498e@env) G498e@env)) (G310e@make-interaction-env G4987@rib '() '())))) (G2c0a@G2a98@find-library-by-name '(mosh interaction)) (G2dc7@make-cache-rib))))) G4982@the-env))) '#f)) (set! G3160@top-level-context (G296e@G2885@make-parameter '#f)) (begin (set! G4a9d@G3160@top-level-context G3160@top-level-context) (set! G4a9c@G315e@interaction-environment G315e@interaction-environment) (set! G4a9b@G315c@pre-compile-r6rs-top-level G315c@pre-compile-r6rs-top-level) (set! G4a9a@G315a@compile-r6rs-top-level G315a@compile-r6rs-top-level) (set! G4a99@G3158@syntax->datum G3158@syntax->datum) (set! G4a98@G3156@datum->syntax G3156@datum->syntax) (set! G4a97@G3154@identifier? G3154@identifier?) (set! G4a96@G3152@syntax-violation G3152@syntax-violation) (set! G4a95@G3150@syntax-violation* G3150@syntax-violation*) (set! G4a94@G314e@extract-trace G314e@extract-trace) (set! G4a93@G314c@syntax-error G314c@syntax-error) (set! G4a92@G314a@assertion-error G314a@assertion-error) (set! G4a91@G3148@expression-position G3148@expression-position) (set! G4a90@G3146@extract-position-condition G3146@extract-position-condition) (set! G4a8f@G3144@make-source-condition G3144@make-source-condition) (set! G4a8e@G3142@bound-identifier=? G3142@bound-identifier=?) (set! G4a8d@G3140@free-identifier=? G3140@free-identifier=?) (set! G4a8c@G313e@generate-temporaries G313e@generate-temporaries) (set! G4a8b@G313c@make-export-env/macros G313c@make-export-env/macros) (set! G4a8a@G313a@make-export-subst G313a@make-export-subst) (set! G4a89@G3138@build-exports G3138@build-exports) (set! G4a88@G3136@rev-map-append G3136@rev-map-append) (set! G4a87@G3134@boot-library-expand G3134@boot-library-expand) (set! G4a86@G3132@library-expander G3132@library-expander) (set! G4a85@G3130@eval G3130@eval) (set! G4a84@G312e@expand G312e@expand) (set! G4a83@G312c@scheme-report-environment G312c@scheme-report-environment) (set! G4a82@G312a@null-environment G312a@null-environment) (set! G4a81@G3128@environment G3128@environment) (set! G4a80@G3126@environment-symbols G3126@environment-symbols) (set! G4a7f@G3124@environment? G3124@environment?) (set! G4a7e@G3122@parse-binding G3122@parse-binding) (set! G4a7d@G3120@environment-bindings G3120@environment-bindings) (set! G4a7c@G311e@interaction-environment-symbols G311e@interaction-environment-symbols) (set! G4a7b@G311c@rp G311c@rp) (set! G4a7a@G311a@set-interaction-env-locs! G311a@set-interaction-env-locs!) (set! G4a79@G3118@set-interaction-env-r! G3118@set-interaction-env-r!) (set! G4a78@G3116@set-interaction-env-rib! G3116@set-interaction-env-rib!) (set! G4a77@G3114@interaction-env-locs G3114@interaction-env-locs) (set! G4a76@G3112@interaction-env-r G3112@interaction-env-r) (set! G4a75@G3110@interaction-env-rib G3110@interaction-env-rib) (set! G4a74@G310e@make-interaction-env G310e@make-interaction-env) (set! G4a73@G310c@interaction-env? G310c@interaction-env?) (set! G4a72@G3107@G30ff G3107@G30ff) (set! G4a71@G3105@G3100 G3105@G3100) (set! G4a70@G3103@G30fe G3103@G30fe) (set! G4a6f@G30fd@rp G30fd@rp) (set! G4a6e@G30fb@set-env-itc! G30fb@set-env-itc!) (set! G4a6d@G30f9@set-env-labels! G30f9@set-env-labels!) (set! G4a6c@G30f7@set-env-names! G30f7@set-env-names!) (set! G4a6b@G30f5@env-itc G30f5@env-itc) (set! G4a6a@G30f3@env-labels G30f3@env-labels) (set! G4a69@G30f1@env-names G30f1@env-names) (set! G4a68@G30ef@make-env G30ef@make-env) (set! G4a67@G30ed@env? G30ed@env?) (set! G4a66@G30e8@G30e0 G30e8@G30e0) (set! G4a65@G30e6@G30e1 G30e6@G30e1) (set! G4a64@G30e4@G30df G30e4@G30df) (set! G4a63@G30de@top-level-expander G30de@top-level-expander) (set! G4a62@G30dc@parse-top-level-program G30dc@parse-top-level-program) (set! G4a61@G30da@core-library-expander G30da@core-library-expander) (set! G4a60@G30d8@library-body-expander G30d8@library-body-expander) (set! G4a5f@G30d6@chi-interaction-expr G30d6@chi-interaction-expr) (set! G4a5e@G30d4@chi-library-internal G30d4@chi-library-internal) (set! G4a5d@G30d2@imp-collector G30d2@imp-collector) (set! G4a5c@G30d0@vis-collector G30d0@vis-collector) (set! G4a5b@G30ce@inv-collector G30ce@inv-collector) (set! G4a5a@G30cc@make-collector G30cc@make-collector) (set! G4a59@G30ca@make-top-rib G30ca@make-top-rib) (set! G4a58@G30c8@parse-import-spec* G30c8@parse-import-spec*) (set! G4a57@G30c6@parse-library G30c6@parse-library) (set! G4a56@G30c4@parse-library-name G30c4@parse-library-name) (set! G4a55@G30c2@parse-exports G30c2@parse-exports) (set! G4a54@G30c0@expand-transformer G30c0@expand-transformer) (set! G4a53@G30be@chi-body* G30be@chi-body*) (set! G4a52@G30bc@chi-internal-module G30bc@chi-internal-module) (set! G4a51@G30ba@module-interface-exp-id* G30ba@module-interface-exp-id*) (set! G4a50@G30b8@set-module-interface-exp-lab-vec! G30b8@set-module-interface-exp-lab-vec!) (set! G4a4f@G30b6@set-module-interface-exp-id-vec! G30b6@set-module-interface-exp-id-vec!) (set! G4a4e@G30b4@set-module-interface-first-mark! G30b4@set-module-interface-first-mark!) (set! G4a4d@G30b2@module-interface-exp-lab-vec G30b2@module-interface-exp-lab-vec) (set! G4a4c@G30b0@module-interface-exp-id-vec G30b0@module-interface-exp-id-vec) (set! G4a4b@G30ae@module-interface-first-mark G30ae@module-interface-first-mark) (set! G4a4a@G30ac@make-module-interface G30ac@make-module-interface) (set! G4a49@G30aa@module-interface? G30aa@module-interface?) (set! G4a48@G30a5@G309d G30a5@G309d) (set! G4a47@G30a3@G309e G30a3@G309e) (set! G4a46@G30a1@G309c G30a1@G309c) (set! G4a45@G309b@parse-module G309b@parse-module) (set! G4a44@G3099@chi-internal G3099@chi-internal) (set! G4a43@G3097@find-dups G3097@find-dups) (set! G4a42@G3095@find-bound=? G3095@find-bound=?) (set! G4a41@G3093@chi-rhs* G3093@chi-rhs*) (set! G4a40@G3091@expand-interaction-rhs*/init* G3091@expand-interaction-rhs*/init*) (set! G4a3f@G308f@chi-rhs G308f@chi-rhs) (set! G4a3e@G308d@chi-defun G308d@chi-defun) (set! G4a3d@G308b@chi-lambda-clause* G308b@chi-lambda-clause*) (set! G4a3c@G3089@chi-lambda-clause G3089@chi-lambda-clause) (set! G4a3b@G3087@verify-formals G3087@verify-formals) (set! G4a3a@G3085@chi-set! G3085@chi-set!) (set! G4a39@G3083@chi-expr G3083@chi-expr) (set! G4a38@G3081@chi-application G3081@chi-application) (set! G4a37@G307f@chi-expr* G307f@chi-expr*) (set! G4a36@G307d@chi-global-macro G307d@chi-global-macro) (set! G4a35@G307b@chi-local-macro G307b@chi-local-macro) (set! G4a34@G3079@chi-macro G3079@chi-macro) (set! G4a33@G3077@do-macro-call G3077@do-macro-call) (set! G4a32@G3075@local-macro-transformer G3075@local-macro-transformer) (set! G4a31@G3073@macro-transformer G3073@macro-transformer) (set! G4a30@G3071@symbol-macro G3071@symbol-macro) (set! G4a2f@G306f@file-options-macro G306f@file-options-macro) (set! G4a2e@G306d@core-macro-transformer G306d@core-macro-transformer) (set! G4a2d@G306b@syntax-transformer G306b@syntax-transformer) (set! G4a2c@G3069@ellipsis-map G3069@ellipsis-map) (set! G4a2b@G3067@syntax-case-transformer G3067@syntax-case-transformer) (set! G4a2a@G3065@verify-literals G3065@verify-literals) (set! G4a29@G3063@underscore? G3063@underscore?) (set! G4a28@G3061@ellipsis? G3061@ellipsis?) (set! G4a27@G305f@syntax-dispatch G305f@syntax-dispatch) (set! G4a26@G305d@convert-pattern G305d@convert-pattern) (set! G4a25@G305b@foreign-call-transformer G305b@foreign-call-transformer) (set! G4a24@G3059@parameterize-macro G3059@parameterize-macro) (set! G4a23@G3057@incorrect-usage-macro G3057@incorrect-usage-macro) (set! G4a22@G3055@define-condition-type-macro G3055@define-condition-type-macro) (set! G4a21@G3053@define-record-type-macro G3053@define-record-type-macro) (set! G4a20@G3051@define-struct-macro G3051@define-struct-macro) (set! G4a1f@G304f@quasisyntax-macro G304f@quasisyntax-macro) (set! G4a1e@G304d@quasiquote-macro G304d@quasiquote-macro) (set! G4a1d@G304b@syntax-rules-macro G304b@syntax-rules-macro) (set! G4a1c@G3049@include-into-macro G3049@include-into-macro) (set! G4a1b@G3047@include-macro G3047@include-macro) (set! G4a1a@G3045@do-include G3045@do-include) (set! G4a19@G3043@cond-macro G3043@cond-macro) (set! G4a18@G3041@and-macro G3041@and-macro) (set! G4a17@G303f@or-macro G303f@or-macro) (set! G4a16@G303d@let*-macro G303d@let*-macro) (set! G4a15@G303b@do-macro G303b@do-macro) (set! G4a14@G3039@identifier-syntax-macro G3039@identifier-syntax-macro) (set! G4a13@G3037@endianness-macro G3037@endianness-macro) (set! G4a12@G3035@assert-macro G3035@assert-macro) (set! G4a11@G3033@delay-macro G3033@delay-macro) (set! G4a10@G3031@time-macro G3031@time-macro) (set! G4a0f@G302f@define-enumeration-macro G302f@define-enumeration-macro) (set! G4a0e@G302d@guard-macro G302d@guard-macro) (set! G4a0d@G302b@trace-letrec-syntax-macro G302b@trace-letrec-syntax-macro) (set! G4a0c@G3029@trace-let-syntax-macro G3029@trace-let-syntax-macro) (set! G4a0b@G3027@trace-let/rec-syntax G3027@trace-let/rec-syntax) (set! G4a0a@G3025@trace-define-syntax-macro G3025@trace-define-syntax-macro) (set! G4a09@G3023@trace-define-macro G3023@trace-define-macro) (set! G4a08@G3021@trace-lambda-macro G3021@trace-lambda-macro) (set! G4a07@G301f@let*-values-macro G301f@let*-values-macro) (set! G4a06@G301d@let-values-macro G301d@let-values-macro) (set! G4a05@G301b@let-macro G301b@let-macro) (set! G4a04@G3019@invalid-fmls-error G3019@invalid-fmls-error) (set! G4a03@G3017@with-syntax-macro G3017@with-syntax-macro) (set! G4a02@G3015@bless G3015@bless) (set! G4a01@G3013@lambda-transformer G3013@lambda-transformer) (set! G4a00@G3011@case-lambda-transformer G3011@case-lambda-transformer) (set! G49ff@G300f@quote-transformer G300f@quote-transformer) (set! G49fe@G300d@case-macro G300d@case-macro) (set! G49fd@G300b@if-transformer G300b@if-transformer) (set! G49fc@G3009@unless-macro G3009@unless-macro) (set! G49fb@G3007@when-macro G3007@when-macro) (set! G49fa@G3005@record-constructor-descriptor-transformer G3005@record-constructor-descriptor-transformer) (set! G49f9@G3003@record-type-descriptor-transformer G3003@record-type-descriptor-transformer) (set! G49f8@G3001@type-descriptor-transformer G3001@type-descriptor-transformer) (set! G49f7@G2fff@fluid-let-syntax-transformer G2fff@fluid-let-syntax-transformer) (set! G49f6@G2ffd@letrec*-transformer G2ffd@letrec*-transformer) (set! G49f5@G2ffb@letrec-transformer G2ffb@letrec-transformer) (set! G49f4@G2ff9@letrec-helper G2ff9@letrec-helper) (set! G49f3@G2ff7@add-lexicals G2ff7@add-lexicals) (set! G49f2@G2ff5@add-lexical G2ff5@add-lexical) (set! G49f1@G2ff3@set-lexical-mutable! G2ff3@set-lexical-mutable!) (set! G49f0@G2ff1@lexical-mutable? G2ff1@lexical-mutable?) (set! G49ef@G2fef@lexical-var G2fef@lexical-var) (set! G49ee@G2fed@scheme-stx G2fed@scheme-stx) (set! G49ed@G2feb@scheme-stx-hashtable G2feb@scheme-stx-hashtable) (set! G49ec@G2fe9@parse-define-syntax G2fe9@parse-define-syntax) (set! G49eb@G2fe7@parse-define G2fe7@parse-define) (set! G49ea@G2e63@make-eval-transformer G2e63@make-eval-transformer) (set! G49e9@G2e61@variable-transformer-procedure G2e61@variable-transformer-procedure) (set! G49e8@G2e5f@variable-transformer? G2e5f@variable-transformer?) (set! G49e7@G2e5d@make-variable-transformer G2e5d@make-variable-transformer) (set! G49e6@G2e5b@sanitize-binding G2e5b@sanitize-binding) (set! G49e5@G2e44@syntax-type G2e44@syntax-type) (set! G49e4@G2e42@raise-unbound-error G2e42@raise-unbound-error) (set! G49e3@G2e40@binding-value G2e40@binding-value) (set! G49e2@G2e3e@binding-type G2e3e@binding-type) (set! G49e1@G2e3c@make-binding G2e3c@make-binding) (set! G49e0@G2e3a@label->binding G2e3a@label->binding) (set! G49df@G2e38@id->real-label G2e38@id->real-label) (set! G49de@G2e36@id->label G2e36@id->label) (set! G49dd@G2e34@same-marks*? G2e34@same-marks*?) (set! G49dc@G2e32@stx->datum G2e32@stx->datum) (set! G49db@G2e30@strip G2e30@strip) (set! G49da@G2e2e@strip-annotations G2e2e@strip-annotations) (set! G49d9@G2e2c@self-evaluating? G2e2c@self-evaluating?) (set! G49d8@G2e2a@bound-id-member? G2e2a@bound-id-member?) (set! G49d7@G2e28@distinct-bound-ids? G2e28@distinct-bound-ids?) (set! G49d6@G2e26@valid-bound-ids? G2e26@valid-bound-ids?) (set! G49d5@G2e24@free-id=? G2e24@free-id=?) (set! G49d4@G2e22@bound-id=? G2e22@bound-id=?) (set! G49d3@G2e20@same-marks? G2e20@same-marks?) (set! G49d2@G2e1e@id->sym G2e1e@id->sym) (set! G49d1@G2e1c@id? G2e1c@id?) (set! G49d0@G2e1a@syntax->list G2e1a@syntax->list) (set! G49cf@G2e18@syntax-cdr G2e18@syntax-cdr) (set! G49ce@G2e16@syntax-car G2e16@syntax-car) (set! G49cd@G2e14@syntax-list? G2e14@syntax-list?) (set! G49cc@G2e12@syntax-null? G2e12@syntax-null?) (set! G49cb@G2e10@syntax-vector? G2e10@syntax-vector?) (set! G49ca@G2e0e@syntax-pair? G2e0e@syntax-pair?) (set! G49c9@G2e0c@syntax-vector->list G2e0c@syntax-vector->list) (set! G49c8@G2e0a@syntax-kind? G2e0a@syntax-kind?) (set! G49c7@G2e08@add-subst G2e08@add-subst) (set! G49c6@G2e06@add-mark G2e06@add-mark) (set! G49c5@G2e04@mkstx G2e04@mkstx) (set! G49c4@G2e02@join-wraps G2e02@join-wraps) (set! G49c3@G2e00@anti-mark? G2e00@anti-mark?) (set! G49c2@G2dfe@anti-mark G2dfe@anti-mark) (set! G49c1@G2dfc@gen-mark G2dfc@gen-mark) (set! G49c0@G2dfa@datum->stx G2dfa@datum->stx) (set! G49bf@G2df8@rp G2df8@rp) (set! G49be@G2df6@set-stx-ae*! G2df6@set-stx-ae*!) (set! G49bd@G2df4@set-stx-subst*! G2df4@set-stx-subst*!) (set! G49bc@G2df2@set-stx-mark*! G2df2@set-stx-mark*!) (set! G49bb@G2df0@set-stx-expr! G2df0@set-stx-expr!) (set! G49ba@G2dee@stx-ae* G2dee@stx-ae*) (set! G49b9@G2dec@stx-subst* G2dec@stx-subst*) (set! G49b8@G2dea@stx-mark* G2dea@stx-mark*) (set! G49b7@G2de8@stx-expr G2de8@stx-expr) (set! G49b6@G2de6@make-stx G2de6@make-stx) (set! G49b5@G2de4@stx? G2de4@stx?) (set! G49b4@G2ddf@G2dd7 G2ddf@G2dd7) (set! G49b3@G2ddd@G2dd8 G2ddd@G2dd8) (set! G49b2@G2ddb@G2dd6 G2ddb@G2dd6) (set! G49b1@G2dd5@make-full-rib G2dd5@make-full-rib) (set! G49b0@G2dd3@unseal-rib! G2dd3@unseal-rib!) (set! G49af@G2dd1@seal-rib! G2dd1@seal-rib!) (set! G49ae@G2dcf@make-rib-map G2dcf@make-rib-map) (set! G49ad@G2dcd@extend-rib/nc! G2dcd@extend-rib/nc!) (set! G49ac@G2dcb@extend-rib! G2dcb@extend-rib!) (set! G49ab@G2dc9@find-label G2dc9@find-label) (set! G49aa@G2dc7@make-cache-rib G2dc7@make-cache-rib) (set! G49a9@G2dc5@make-empty-rib G2dc5@make-empty-rib) (set! G49a8@G2dc3@set-rib-cache! G2dc3@set-rib-cache!) (set! G49a7@G2dc1@set-rib-sealed/freq! G2dc1@set-rib-sealed/freq!) (set! G49a6@G2dbf@set-rib-label*! G2dbf@set-rib-label*!) (set! G49a5@G2dbd@set-rib-mark**! G2dbd@set-rib-mark**!) (set! G49a4@G2dbb@set-rib-sym*! G2dbb@set-rib-sym*!) (set! G49a3@G2db9@rib-cache G2db9@rib-cache) (set! G49a2@G2db7@rib-sealed/freq G2db7@rib-sealed/freq) (set! G49a1@G2db5@rib-label* G2db5@rib-label*) (set! G49a0@G2db3@rib-mark** G2db3@rib-mark**) (set! G499f@G2db1@rib-sym* G2db1@rib-sym*) (set! G499e@G2daf@make-rib G2daf@make-rib) (set! G499d@G2dad@rib? G2dad@rib?) (set! G499c@G2da8@G2da0 G2da8@G2da0) (set! G499b@G2da6@G2da1 G2da6@G2da1) (set! G499a@G2da4@G2d9f G2da4@G2d9f) (set! G4999@G2d9e@gen-define-label G2d9e@gen-define-label) (set! G4998@G2d9c@gen-define-label+loc G2d9c@gen-define-label+loc) (set! G4997@G2d9a@gen-top-level-label G2d9a@gen-top-level-label) (set! G4996@G2d98@gen-label G2d98@gen-label) (set! G4995@G2d96@gen-global G2d96@gen-global) (set! G4994@G2d94@gen-lexical G2d94@gen-lexical) (set! G4993@G2d92@top-marked? G2d92@top-marked?) (set! G4992@G2d90@top-mark* G2d90@top-mark*) (set! G4991@G2d8b@set-union G2d8b@set-union) (set! G4990@G2d89@set-cons G2d89@set-cons) (G2c07@G2a92@current-library-expander G3132@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4aa7@G4aa2 G4aa9@G4aa4 G4aab@G4aa3 G4ab0@&condition? G4ab2@make-&condition G4ab4@&condition-rtd G4ab6@&condition-rcd G4abe@G4ab9 G4ac0@G4abb G4ac2@G4aba G4ac7@G4ab8 G4ac9@make-message-condition G4acb@G4ab7 G4acd@message-condition? G4acf@condition-message G4ad6@G4ad1 G4ad8@G4ad3 G4ada@G4ad2 G4adf@G4ad0 G4ae1@make-warning G4ae3@warning? G4aea@G4ae5 G4aec@G4ae7 G4aee@G4ae6 G4af3@G4ae4 G4af5@make-serious-condition G4af7@serious-condition? G4afe@G4af9 G4b00@G4afb G4b02@G4afa G4b07@G4af8 G4b09@make-error G4b0b@error? G4b12@G4b0d G4b14@G4b0f G4b16@G4b0e G4b1b@G4b0c G4b1d@make-violation G4b1f@violation? G4b26@G4b21 G4b28@G4b23 G4b2a@G4b22 G4b2f@G4b20 G4b31@make-assertion-violation G4b33@assertion-violation? G4b3b@G4b36 G4b3d@G4b38 G4b3f@G4b37 G4b44@G4b35 G4b46@make-irritants-condition G4b48@G4b34 G4b4a@irritants-condition? G4b4c@condition-irritants G4b54@G4b4f G4b56@G4b51 G4b58@G4b50 G4b5d@G4b4e G4b5f@make-who-condition G4b61@G4b4d G4b63@who-condition? G4b65@condition-who G4b6c@G4b67 G4b6e@G4b69 G4b70@G4b68 G4b75@G4b66 G4b77@make-non-continuable-violation G4b79@non-continuable-violation? G4b80@G4b7b G4b82@G4b7d G4b84@G4b7c G4b89@G4b7a G4b8b@make-implementation-restriction-violation G4b8d@implementation-restriction-violation? G4b94@G4b8f G4b96@G4b91 G4b98@G4b90 G4b9d@G4b8e G4b9f@make-lexical-violation G4ba1@lexical-violation? G4baa@G4ba5 G4bac@G4ba7 G4bae@G4ba6 G4bb3@G4ba4 G4bb5@make-syntax-violation G4bb7@G4ba2 G4bb9@G4ba3 G4bbb@syntax-violation? G4bbd@syntax-violation-form G4bbf@syntax-violation-subform G4bc6@G4bc1 G4bc8@G4bc3 G4bca@G4bc2 G4bcf@G4bc0 G4bd1@make-undefined-violation G4bd3@undefined-violation?) (begin (set! G4aa7@G4aa2 (make-record-type-descriptor '&condition '#f 'G4aa5 '#f '#f '#())) (set! G4aa9@G4aa4 '#f) (set! G4aab@G4aa3 (make-record-constructor-descriptor G4aa7@G4aa2 '#f G4aa9@G4aa4)) (set! G4ab0@&condition? (record-predicate G4aa7@G4aa2)) (set! G4ab2@make-&condition (record-constructor G4aab@G4aa3)) (set! G4ab4@&condition-rtd G4aa7@G4aa2) (set! G4ab6@&condition-rcd G4aab@G4aa3) (set! G4abe@G4ab9 (make-record-type-descriptor '&message G4aa7@G4aa2 'G4abc '#f '#f '#((immutable message)))) (set! G4ac0@G4abb '#f) (set! G4ac2@G4aba (make-record-constructor-descriptor G4abe@G4ab9 G4aab@G4aa3 G4ac0@G4abb)) (set! G4ac7@G4ab8 (record-predicate G4abe@G4ab9)) (set! G4ac9@make-message-condition (record-constructor G4ac2@G4aba)) (set! G4acb@G4ab7 (record-accessor G4abe@G4ab9 '0)) (set! G4acd@message-condition? (condition-predicate G4abe@G4ab9)) (set! G4acf@condition-message (condition-accessor G4abe@G4ab9 G4acb@G4ab7)) (set! G4ad6@G4ad1 (make-record-type-descriptor '&warning G4aa7@G4aa2 'G4ad4 '#f '#f '#())) (set! G4ad8@G4ad3 '#f) (set! G4ada@G4ad2 (make-record-constructor-descriptor G4ad6@G4ad1 G4aab@G4aa3 G4ad8@G4ad3)) (set! G4adf@G4ad0 (record-predicate G4ad6@G4ad1)) (set! G4ae1@make-warning (record-constructor G4ada@G4ad2)) (set! G4ae3@warning? (condition-predicate G4ad6@G4ad1)) (set! G4aea@G4ae5 (make-record-type-descriptor '&serious G4aa7@G4aa2 'G4ae8 '#f '#f '#())) (set! G4aec@G4ae7 '#f) (set! G4aee@G4ae6 (make-record-constructor-descriptor G4aea@G4ae5 G4aab@G4aa3 G4aec@G4ae7)) (set! G4af3@G4ae4 (record-predicate G4aea@G4ae5)) (set! G4af5@make-serious-condition (record-constructor G4aee@G4ae6)) (set! G4af7@serious-condition? (condition-predicate G4aea@G4ae5)) (set! G4afe@G4af9 (make-record-type-descriptor '&error G4aea@G4ae5 'G4afc '#f '#f '#())) (set! G4b00@G4afb '#f) (set! G4b02@G4afa (make-record-constructor-descriptor G4afe@G4af9 G4aee@G4ae6 G4b00@G4afb)) (set! G4b07@G4af8 (record-predicate G4afe@G4af9)) (set! G4b09@make-error (record-constructor G4b02@G4afa)) (set! G4b0b@error? (condition-predicate G4afe@G4af9)) (set! G4b12@G4b0d (make-record-type-descriptor '&violation G4aea@G4ae5 'G4b10 '#f '#f '#())) (set! G4b14@G4b0f '#f) (set! G4b16@G4b0e (make-record-constructor-descriptor G4b12@G4b0d G4aee@G4ae6 G4b14@G4b0f)) (set! G4b1b@G4b0c (record-predicate G4b12@G4b0d)) (set! G4b1d@make-violation (record-constructor G4b16@G4b0e)) (set! G4b1f@violation? (condition-predicate G4b12@G4b0d)) (set! G4b26@G4b21 (make-record-type-descriptor '&assertion G4b12@G4b0d 'G4b24 '#f '#f '#())) (set! G4b28@G4b23 '#f) (set! G4b2a@G4b22 (make-record-constructor-descriptor G4b26@G4b21 G4b16@G4b0e G4b28@G4b23)) (set! G4b2f@G4b20 (record-predicate G4b26@G4b21)) (set! G4b31@make-assertion-violation (record-constructor G4b2a@G4b22)) (set! G4b33@assertion-violation? (condition-predicate G4b26@G4b21)) (set! G4b3b@G4b36 (make-record-type-descriptor '&irritants G4aa7@G4aa2 'G4b39 '#f '#f '#((immutable irritants)))) (set! G4b3d@G4b38 '#f) (set! G4b3f@G4b37 (make-record-constructor-descriptor G4b3b@G4b36 G4aab@G4aa3 G4b3d@G4b38)) (set! G4b44@G4b35 (record-predicate G4b3b@G4b36)) (set! G4b46@make-irritants-condition (record-constructor G4b3f@G4b37)) (set! G4b48@G4b34 (record-accessor G4b3b@G4b36 '0)) (set! G4b4a@irritants-condition? (condition-predicate G4b3b@G4b36)) (set! G4b4c@condition-irritants (condition-accessor G4b3b@G4b36 G4b48@G4b34)) (set! G4b54@G4b4f (make-record-type-descriptor '&who G4aa7@G4aa2 'G4b52 '#f '#f '#((immutable who)))) (set! G4b56@G4b51 '#f) (set! G4b58@G4b50 (make-record-constructor-descriptor G4b54@G4b4f G4aab@G4aa3 G4b56@G4b51)) (set! G4b5d@G4b4e (record-predicate G4b54@G4b4f)) (set! G4b5f@make-who-condition (record-constructor G4b58@G4b50)) (set! G4b61@G4b4d (record-accessor G4b54@G4b4f '0)) (set! G4b63@who-condition? (condition-predicate G4b54@G4b4f)) (set! G4b65@condition-who (condition-accessor G4b54@G4b4f G4b61@G4b4d)) (set! G4b6c@G4b67 (make-record-type-descriptor '&non-continuable G4b12@G4b0d 'G4b6a '#f '#f '#())) (set! G4b6e@G4b69 '#f) (set! G4b70@G4b68 (make-record-constructor-descriptor G4b6c@G4b67 G4b16@G4b0e G4b6e@G4b69)) (set! G4b75@G4b66 (record-predicate G4b6c@G4b67)) (set! G4b77@make-non-continuable-violation (record-constructor G4b70@G4b68)) (set! G4b79@non-continuable-violation? (condition-predicate G4b6c@G4b67)) (set! G4b80@G4b7b (make-record-type-descriptor '&implementation-restriction G4b12@G4b0d 'G4b7e '#f '#f '#())) (set! G4b82@G4b7d '#f) (set! G4b84@G4b7c (make-record-constructor-descriptor G4b80@G4b7b G4b16@G4b0e G4b82@G4b7d)) (set! G4b89@G4b7a (record-predicate G4b80@G4b7b)) (set! G4b8b@make-implementation-restriction-violation (record-constructor G4b84@G4b7c)) (set! G4b8d@implementation-restriction-violation? (condition-predicate G4b80@G4b7b)) (set! G4b94@G4b8f (make-record-type-descriptor '&lexical G4b12@G4b0d 'G4b92 '#f '#f '#())) (set! G4b96@G4b91 '#f) (set! G4b98@G4b90 (make-record-constructor-descriptor G4b94@G4b8f G4b16@G4b0e G4b96@G4b91)) (set! G4b9d@G4b8e (record-predicate G4b94@G4b8f)) (set! G4b9f@make-lexical-violation (record-constructor G4b98@G4b90)) (set! G4ba1@lexical-violation? (condition-predicate G4b94@G4b8f)) (set! G4baa@G4ba5 (make-record-type-descriptor '&syntax G4b12@G4b0d 'G4ba8 '#f '#f '#((immutable form) (immutable subform)))) (set! G4bac@G4ba7 '#f) (set! G4bae@G4ba6 (make-record-constructor-descriptor G4baa@G4ba5 G4b16@G4b0e G4bac@G4ba7)) (set! G4bb3@G4ba4 (record-predicate G4baa@G4ba5)) (set! G4bb5@make-syntax-violation (record-constructor G4bae@G4ba6)) (set! G4bb7@G4ba2 (record-accessor G4baa@G4ba5 '0)) (set! G4bb9@G4ba3 (record-accessor G4baa@G4ba5 '1)) (set! G4bbb@syntax-violation? (condition-predicate G4baa@G4ba5)) (set! G4bbd@syntax-violation-form (condition-accessor G4baa@G4ba5 G4bb7@G4ba2)) (set! G4bbf@syntax-violation-subform (condition-accessor G4baa@G4ba5 G4bb9@G4ba3)) (set! G4bc6@G4bc1 (make-record-type-descriptor '&undefined G4b12@G4b0d 'G4bc4 '#f '#f '#())) (set! G4bc8@G4bc3 '#f) (set! G4bca@G4bc2 (make-record-constructor-descriptor G4bc6@G4bc1 G4b16@G4b0e G4bc8@G4bc3)) (set! G4bcf@G4bc0 (record-predicate G4bc6@G4bc1)) (set! G4bd1@make-undefined-violation (record-constructor G4bca@G4bc2)) (set! G4bd3@undefined-violation? (condition-predicate G4bc6@G4bc1)) (begin (set! G4c32@G4bd3@undefined-violation? G4bd3@undefined-violation?) (set! G4c31@G4bd1@make-undefined-violation G4bd1@make-undefined-violation) (set! G4c30@G4bcf@G4bc0 G4bcf@G4bc0) (set! G4c2f@G4bca@G4bc2 G4bca@G4bc2) (set! G4c2e@G4bc8@G4bc3 G4bc8@G4bc3) (set! G4c2d@G4bc6@G4bc1 G4bc6@G4bc1) (set! G4c2c@G4bbf@syntax-violation-subform G4bbf@syntax-violation-subform) (set! G4c2b@G4bbd@syntax-violation-form G4bbd@syntax-violation-form) (set! G4c2a@G4bbb@syntax-violation? G4bbb@syntax-violation?) (set! G4c29@G4bb9@G4ba3 G4bb9@G4ba3) (set! G4c28@G4bb7@G4ba2 G4bb7@G4ba2) (set! G4c27@G4bb5@make-syntax-violation G4bb5@make-syntax-violation) (set! G4c26@G4bb3@G4ba4 G4bb3@G4ba4) (set! G4c25@G4bae@G4ba6 G4bae@G4ba6) (set! G4c24@G4bac@G4ba7 G4bac@G4ba7) (set! G4c23@G4baa@G4ba5 G4baa@G4ba5) (set! G4c22@G4ba1@lexical-violation? G4ba1@lexical-violation?) (set! G4c21@G4b9f@make-lexical-violation G4b9f@make-lexical-violation) (set! G4c20@G4b9d@G4b8e G4b9d@G4b8e) (set! G4c1f@G4b98@G4b90 G4b98@G4b90) (set! G4c1e@G4b96@G4b91 G4b96@G4b91) (set! G4c1d@G4b94@G4b8f G4b94@G4b8f) (set! G4c1c@G4b8d@implementation-restriction-violation? G4b8d@implementation-restriction-violation?) (set! G4c1b@G4b8b@make-implementation-restriction-violation G4b8b@make-implementation-restriction-violation) (set! G4c1a@G4b89@G4b7a G4b89@G4b7a) (set! G4c19@G4b84@G4b7c G4b84@G4b7c) (set! G4c18@G4b82@G4b7d G4b82@G4b7d) (set! G4c17@G4b80@G4b7b G4b80@G4b7b) (set! G4c16@G4b79@non-continuable-violation? G4b79@non-continuable-violation?) (set! G4c15@G4b77@make-non-continuable-violation G4b77@make-non-continuable-violation) (set! G4c14@G4b75@G4b66 G4b75@G4b66) (set! G4c13@G4b70@G4b68 G4b70@G4b68) (set! G4c12@G4b6e@G4b69 G4b6e@G4b69) (set! G4c11@G4b6c@G4b67 G4b6c@G4b67) (set! G4c10@G4b65@condition-who G4b65@condition-who) (set! G4c0f@G4b63@who-condition? G4b63@who-condition?) (set! G4c0e@G4b61@G4b4d G4b61@G4b4d) (set! G4c0d@G4b5f@make-who-condition G4b5f@make-who-condition) (set! G4c0c@G4b5d@G4b4e G4b5d@G4b4e) (set! G4c0b@G4b58@G4b50 G4b58@G4b50) (set! G4c0a@G4b56@G4b51 G4b56@G4b51) (set! G4c09@G4b54@G4b4f G4b54@G4b4f) (set! G4c08@G4b4c@condition-irritants G4b4c@condition-irritants) (set! G4c07@G4b4a@irritants-condition? G4b4a@irritants-condition?) (set! G4c06@G4b48@G4b34 G4b48@G4b34) (set! G4c05@G4b46@make-irritants-condition G4b46@make-irritants-condition) (set! G4c04@G4b44@G4b35 G4b44@G4b35) (set! G4c03@G4b3f@G4b37 G4b3f@G4b37) (set! G4c02@G4b3d@G4b38 G4b3d@G4b38) (set! G4c01@G4b3b@G4b36 G4b3b@G4b36) (set! G4c00@G4b33@assertion-violation? G4b33@assertion-violation?) (set! G4bff@G4b31@make-assertion-violation G4b31@make-assertion-violation) (set! G4bfe@G4b2f@G4b20 G4b2f@G4b20) (set! G4bfd@G4b2a@G4b22 G4b2a@G4b22) (set! G4bfc@G4b28@G4b23 G4b28@G4b23) (set! G4bfb@G4b26@G4b21 G4b26@G4b21) (set! G4bfa@G4b1f@violation? G4b1f@violation?) (set! G4bf9@G4b1d@make-violation G4b1d@make-violation) (set! G4bf8@G4b1b@G4b0c G4b1b@G4b0c) (set! G4bf7@G4b16@G4b0e G4b16@G4b0e) (set! G4bf6@G4b14@G4b0f G4b14@G4b0f) (set! G4bf5@G4b12@G4b0d G4b12@G4b0d) (set! G4bf4@G4b0b@error? G4b0b@error?) (set! G4bf3@G4b09@make-error G4b09@make-error) (set! G4bf2@G4b07@G4af8 G4b07@G4af8) (set! G4bf1@G4b02@G4afa G4b02@G4afa) (set! G4bf0@G4b00@G4afb G4b00@G4afb) (set! G4bef@G4afe@G4af9 G4afe@G4af9) (set! G4bee@G4af7@serious-condition? G4af7@serious-condition?) (set! G4bed@G4af5@make-serious-condition G4af5@make-serious-condition) (set! G4bec@G4af3@G4ae4 G4af3@G4ae4) (set! G4beb@G4aee@G4ae6 G4aee@G4ae6) (set! G4bea@G4aec@G4ae7 G4aec@G4ae7) (set! G4be9@G4aea@G4ae5 G4aea@G4ae5) (set! G4be8@G4ae3@warning? G4ae3@warning?) (set! G4be7@G4ae1@make-warning G4ae1@make-warning) (set! G4be6@G4adf@G4ad0 G4adf@G4ad0) (set! G4be5@G4ada@G4ad2 G4ada@G4ad2) (set! G4be4@G4ad8@G4ad3 G4ad8@G4ad3) (set! G4be3@G4ad6@G4ad1 G4ad6@G4ad1) (set! G4be2@G4acf@condition-message G4acf@condition-message) (set! G4be1@G4acd@message-condition? G4acd@message-condition?) (set! G4be0@G4acb@G4ab7 G4acb@G4ab7) (set! G4bdf@G4ac9@make-message-condition G4ac9@make-message-condition) (set! G4bde@G4ac7@G4ab8 G4ac7@G4ab8) (set! G4bdd@G4ac2@G4aba G4ac2@G4aba) (set! G4bdc@G4ac0@G4abb G4ac0@G4abb) (set! G4bdb@G4abe@G4ab9 G4abe@G4ab9) (set! G4bda@G4ab6@&condition-rcd G4ab6@&condition-rcd) (set! G4bd9@G4ab4@&condition-rtd G4ab4@&condition-rtd) (set! G4bd8@G4ab2@make-&condition G4ab2@make-&condition) (set! G4bd7@G4ab0@&condition? G4ab0@&condition?) (set! G4bd6@G4aab@G4aa3 G4aab@G4aa3) (set! G4bd5@G4aa9@G4aa4 G4aa9@G4aa4) (set! G4bd4@G4aa7@G4aa2 G4aa7@G4aa2)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4c3a@G4c35 G4c3c@G4c37 G4c3e@G4c36 G4c43@G4c34 G4c45@make-i/o-error G4c47@i/o-error? G4c4e@G4c49 G4c50@G4c4b G4c52@G4c4a G4c57@G4c48 G4c59@make-i/o-read-error G4c5b@i/o-read-error? G4c62@G4c5d G4c64@G4c5f G4c66@G4c5e G4c6b@G4c5c G4c6d@make-i/o-write-error G4c6f@i/o-write-error? G4c77@G4c72 G4c79@G4c74 G4c7b@G4c73 G4c80@G4c71 G4c82@make-i/o-invalid-position-error G4c84@G4c70 G4c86@i/o-invalid-position-error? G4c88@i/o-error-position G4c90@G4c8b G4c92@G4c8d G4c94@G4c8c G4c99@G4c8a G4c9b@make-i/o-filename-error G4c9d@G4c89 G4c9f@i/o-filename-error? G4ca1@i/o-error-filename G4ca8@G4ca3 G4caa@G4ca5 G4cac@G4ca4 G4cb1@G4ca2 G4cb3@make-i/o-file-protection-error G4cb5@i/o-file-protection-error? G4cbc@G4cb7 G4cbe@G4cb9 G4cc0@G4cb8 G4cc5@G4cb6 G4cc7@make-i/o-file-is-read-only-error G4cc9@i/o-file-is-read-only-error? G4cd0@G4ccb G4cd2@G4ccd G4cd4@G4ccc G4cd9@G4cca G4cdb@make-i/o-file-already-exists-error G4cdd@i/o-file-already-exists-error? G4ce4@G4cdf G4ce6@G4ce1 G4ce8@G4ce0 G4ced@G4cde G4cef@make-i/o-file-does-not-exist-error G4cf1@i/o-file-does-not-exist-error? G4cf9@G4cf4 G4cfb@G4cf6 G4cfd@G4cf5 G4d02@G4cf3 G4d04@make-i/o-port-error G4d06@G4cf2 G4d08@i/o-port-error? G4d0a@i/o-error-port G4d11@G4d0c G4d13@G4d0e G4d15@G4d0d G4d1a@G4d0b G4d1c@make-i/o-decoding-error G4d1e@i/o-decoding-error? G4d26@G4d21 G4d28@G4d23 G4d2a@G4d22 G4d2f@G4d20 G4d31@make-i/o-encoding-error G4d33@G4d1f G4d35@i/o-encoding-error? G4d37@i/o-encoding-error-char) (begin (set! G4c3a@G4c35 (make-record-type-descriptor '&i/o &error-rtd 'G4c38 '#f '#f '#())) (set! G4c3c@G4c37 '#f) (set! G4c3e@G4c36 (make-record-constructor-descriptor G4c3a@G4c35 &error-rcd G4c3c@G4c37)) (set! G4c43@G4c34 (record-predicate G4c3a@G4c35)) (set! G4c45@make-i/o-error (record-constructor G4c3e@G4c36)) (set! G4c47@i/o-error? (condition-predicate G4c3a@G4c35)) (set! G4c4e@G4c49 (make-record-type-descriptor '&i/o-read G4c3a@G4c35 'G4c4c '#f '#f '#())) (set! G4c50@G4c4b '#f) (set! G4c52@G4c4a (make-record-constructor-descriptor G4c4e@G4c49 G4c3e@G4c36 G4c50@G4c4b)) (set! G4c57@G4c48 (record-predicate G4c4e@G4c49)) (set! G4c59@make-i/o-read-error (record-constructor G4c52@G4c4a)) (set! G4c5b@i/o-read-error? (condition-predicate G4c4e@G4c49)) (set! G4c62@G4c5d (make-record-type-descriptor '&i/o-write G4c3a@G4c35 'G4c60 '#f '#f '#())) (set! G4c64@G4c5f '#f) (set! G4c66@G4c5e (make-record-constructor-descriptor G4c62@G4c5d G4c3e@G4c36 G4c64@G4c5f)) (set! G4c6b@G4c5c (record-predicate G4c62@G4c5d)) (set! G4c6d@make-i/o-write-error (record-constructor G4c66@G4c5e)) (set! G4c6f@i/o-write-error? (condition-predicate G4c62@G4c5d)) (set! G4c77@G4c72 (make-record-type-descriptor '&i/o-invalid-position G4c3a@G4c35 'G4c75 '#f '#f '#((immutable position)))) (set! G4c79@G4c74 '#f) (set! G4c7b@G4c73 (make-record-constructor-descriptor G4c77@G4c72 G4c3e@G4c36 G4c79@G4c74)) (set! G4c80@G4c71 (record-predicate G4c77@G4c72)) (set! G4c82@make-i/o-invalid-position-error (record-constructor G4c7b@G4c73)) (set! G4c84@G4c70 (record-accessor G4c77@G4c72 '0)) (set! G4c86@i/o-invalid-position-error? (condition-predicate G4c77@G4c72)) (set! G4c88@i/o-error-position (condition-accessor G4c77@G4c72 G4c84@G4c70)) (set! G4c90@G4c8b (make-record-type-descriptor '&i/o-filename G4c3a@G4c35 'G4c8e '#f '#f '#((immutable filename)))) (set! G4c92@G4c8d '#f) (set! G4c94@G4c8c (make-record-constructor-descriptor G4c90@G4c8b G4c3e@G4c36 G4c92@G4c8d)) (set! G4c99@G4c8a (record-predicate G4c90@G4c8b)) (set! G4c9b@make-i/o-filename-error (record-constructor G4c94@G4c8c)) (set! G4c9d@G4c89 (record-accessor G4c90@G4c8b '0)) (set! G4c9f@i/o-filename-error? (condition-predicate G4c90@G4c8b)) (set! G4ca1@i/o-error-filename (condition-accessor G4c90@G4c8b G4c9d@G4c89)) (set! G4ca8@G4ca3 (make-record-type-descriptor '&i/o-file-protection G4c3a@G4c35 'G4ca6 '#f '#f '#())) (set! G4caa@G4ca5 '#f) (set! G4cac@G4ca4 (make-record-constructor-descriptor G4ca8@G4ca3 G4c3e@G4c36 G4caa@G4ca5)) (set! G4cb1@G4ca2 (record-predicate G4ca8@G4ca3)) (set! G4cb3@make-i/o-file-protection-error (record-constructor G4cac@G4ca4)) (set! G4cb5@i/o-file-protection-error? (condition-predicate G4ca8@G4ca3)) (set! G4cbc@G4cb7 (make-record-type-descriptor '&i/o-file-is-read-only G4ca8@G4ca3 'G4cba '#f '#f '#())) (set! G4cbe@G4cb9 '#f) (set! G4cc0@G4cb8 (make-record-constructor-descriptor G4cbc@G4cb7 G4cac@G4ca4 G4cbe@G4cb9)) (set! G4cc5@G4cb6 (record-predicate G4cbc@G4cb7)) (set! G4cc7@make-i/o-file-is-read-only-error (record-constructor G4cc0@G4cb8)) (set! G4cc9@i/o-file-is-read-only-error? (condition-predicate G4cbc@G4cb7)) (set! G4cd0@G4ccb (make-record-type-descriptor '&i/o-file-already-exists G4c90@G4c8b 'G4cce '#f '#f '#())) (set! G4cd2@G4ccd '#f) (set! G4cd4@G4ccc (make-record-constructor-descriptor G4cd0@G4ccb G4c94@G4c8c G4cd2@G4ccd)) (set! G4cd9@G4cca (record-predicate G4cd0@G4ccb)) (set! G4cdb@make-i/o-file-already-exists-error (record-constructor G4cd4@G4ccc)) (set! G4cdd@i/o-file-already-exists-error? (condition-predicate G4cd0@G4ccb)) (set! G4ce4@G4cdf (make-record-type-descriptor '&i/o-file-does-not-exist G4c90@G4c8b 'G4ce2 '#f '#f '#())) (set! G4ce6@G4ce1 '#f) (set! G4ce8@G4ce0 (make-record-constructor-descriptor G4ce4@G4cdf G4c94@G4c8c G4ce6@G4ce1)) (set! G4ced@G4cde (record-predicate G4ce4@G4cdf)) (set! G4cef@make-i/o-file-does-not-exist-error (record-constructor G4ce8@G4ce0)) (set! G4cf1@i/o-file-does-not-exist-error? (condition-predicate G4ce4@G4cdf)) (set! G4cf9@G4cf4 (make-record-type-descriptor '&i/o-port G4c3a@G4c35 'G4cf7 '#f '#f '#((immutable port)))) (set! G4cfb@G4cf6 '#f) (set! G4cfd@G4cf5 (make-record-constructor-descriptor G4cf9@G4cf4 G4c3e@G4c36 G4cfb@G4cf6)) (set! G4d02@G4cf3 (record-predicate G4cf9@G4cf4)) (set! G4d04@make-i/o-port-error (record-constructor G4cfd@G4cf5)) (set! G4d06@G4cf2 (record-accessor G4cf9@G4cf4 '0)) (set! G4d08@i/o-port-error? (condition-predicate G4cf9@G4cf4)) (set! G4d0a@i/o-error-port (condition-accessor G4cf9@G4cf4 G4d06@G4cf2)) (set! G4d11@G4d0c (make-record-type-descriptor '&i/o-decoding G4cf9@G4cf4 'G4d0f '#f '#f '#())) (set! G4d13@G4d0e '#f) (set! G4d15@G4d0d (make-record-constructor-descriptor G4d11@G4d0c G4cfd@G4cf5 G4d13@G4d0e)) (set! G4d1a@G4d0b (record-predicate G4d11@G4d0c)) (set! G4d1c@make-i/o-decoding-error (record-constructor G4d15@G4d0d)) (set! G4d1e@i/o-decoding-error? (condition-predicate G4d11@G4d0c)) (set! G4d26@G4d21 (make-record-type-descriptor '&i/o-encoding G4cf9@G4cf4 'G4d24 '#f '#f '#((immutable char)))) (set! G4d28@G4d23 '#f) (set! G4d2a@G4d22 (make-record-constructor-descriptor G4d26@G4d21 G4cfd@G4cf5 G4d28@G4d23)) (set! G4d2f@G4d20 (record-predicate G4d26@G4d21)) (set! G4d31@make-i/o-encoding-error (record-constructor G4d2a@G4d22)) (set! G4d33@G4d1f (record-accessor G4d26@G4d21 '0)) (set! G4d35@i/o-encoding-error? (condition-predicate G4d26@G4d21)) (set! G4d37@i/o-encoding-error-char (condition-accessor G4d26@G4d21 G4d33@G4d1f)) (begin (set! G4d87@G4d37@i/o-encoding-error-char G4d37@i/o-encoding-error-char) (set! G4d86@G4d35@i/o-encoding-error? G4d35@i/o-encoding-error?) (set! G4d85@G4d33@G4d1f G4d33@G4d1f) (set! G4d84@G4d31@make-i/o-encoding-error G4d31@make-i/o-encoding-error) (set! G4d83@G4d2f@G4d20 G4d2f@G4d20) (set! G4d82@G4d2a@G4d22 G4d2a@G4d22) (set! G4d81@G4d28@G4d23 G4d28@G4d23) (set! G4d80@G4d26@G4d21 G4d26@G4d21) (set! G4d7f@G4d1e@i/o-decoding-error? G4d1e@i/o-decoding-error?) (set! G4d7e@G4d1c@make-i/o-decoding-error G4d1c@make-i/o-decoding-error) (set! G4d7d@G4d1a@G4d0b G4d1a@G4d0b) (set! G4d7c@G4d15@G4d0d G4d15@G4d0d) (set! G4d7b@G4d13@G4d0e G4d13@G4d0e) (set! G4d7a@G4d11@G4d0c G4d11@G4d0c) (set! G4d79@G4d0a@i/o-error-port G4d0a@i/o-error-port) (set! G4d78@G4d08@i/o-port-error? G4d08@i/o-port-error?) (set! G4d77@G4d06@G4cf2 G4d06@G4cf2) (set! G4d76@G4d04@make-i/o-port-error G4d04@make-i/o-port-error) (set! G4d75@G4d02@G4cf3 G4d02@G4cf3) (set! G4d74@G4cfd@G4cf5 G4cfd@G4cf5) (set! G4d73@G4cfb@G4cf6 G4cfb@G4cf6) (set! G4d72@G4cf9@G4cf4 G4cf9@G4cf4) (set! G4d71@G4cf1@i/o-file-does-not-exist-error? G4cf1@i/o-file-does-not-exist-error?) (set! G4d70@G4cef@make-i/o-file-does-not-exist-error G4cef@make-i/o-file-does-not-exist-error) (set! G4d6f@G4ced@G4cde G4ced@G4cde) (set! G4d6e@G4ce8@G4ce0 G4ce8@G4ce0) (set! G4d6d@G4ce6@G4ce1 G4ce6@G4ce1) (set! G4d6c@G4ce4@G4cdf G4ce4@G4cdf) (set! G4d6b@G4cdd@i/o-file-already-exists-error? G4cdd@i/o-file-already-exists-error?) (set! G4d6a@G4cdb@make-i/o-file-already-exists-error G4cdb@make-i/o-file-already-exists-error) (set! G4d69@G4cd9@G4cca G4cd9@G4cca) (set! G4d68@G4cd4@G4ccc G4cd4@G4ccc) (set! G4d67@G4cd2@G4ccd G4cd2@G4ccd) (set! G4d66@G4cd0@G4ccb G4cd0@G4ccb) (set! G4d65@G4cc9@i/o-file-is-read-only-error? G4cc9@i/o-file-is-read-only-error?) (set! G4d64@G4cc7@make-i/o-file-is-read-only-error G4cc7@make-i/o-file-is-read-only-error) (set! G4d63@G4cc5@G4cb6 G4cc5@G4cb6) (set! G4d62@G4cc0@G4cb8 G4cc0@G4cb8) (set! G4d61@G4cbe@G4cb9 G4cbe@G4cb9) (set! G4d60@G4cbc@G4cb7 G4cbc@G4cb7) (set! G4d5f@G4cb5@i/o-file-protection-error? G4cb5@i/o-file-protection-error?) (set! G4d5e@G4cb3@make-i/o-file-protection-error G4cb3@make-i/o-file-protection-error) (set! G4d5d@G4cb1@G4ca2 G4cb1@G4ca2) (set! G4d5c@G4cac@G4ca4 G4cac@G4ca4) (set! G4d5b@G4caa@G4ca5 G4caa@G4ca5) (set! G4d5a@G4ca8@G4ca3 G4ca8@G4ca3) (set! G4d59@G4ca1@i/o-error-filename G4ca1@i/o-error-filename) (set! G4d58@G4c9f@i/o-filename-error? G4c9f@i/o-filename-error?) (set! G4d57@G4c9d@G4c89 G4c9d@G4c89) (set! G4d56@G4c9b@make-i/o-filename-error G4c9b@make-i/o-filename-error) (set! G4d55@G4c99@G4c8a G4c99@G4c8a) (set! G4d54@G4c94@G4c8c G4c94@G4c8c) (set! G4d53@G4c92@G4c8d G4c92@G4c8d) (set! G4d52@G4c90@G4c8b G4c90@G4c8b) (set! G4d51@G4c88@i/o-error-position G4c88@i/o-error-position) (set! G4d50@G4c86@i/o-invalid-position-error? G4c86@i/o-invalid-position-error?) (set! G4d4f@G4c84@G4c70 G4c84@G4c70) (set! G4d4e@G4c82@make-i/o-invalid-position-error G4c82@make-i/o-invalid-position-error) (set! G4d4d@G4c80@G4c71 G4c80@G4c71) (set! G4d4c@G4c7b@G4c73 G4c7b@G4c73) (set! G4d4b@G4c79@G4c74 G4c79@G4c74) (set! G4d4a@G4c77@G4c72 G4c77@G4c72) (set! G4d49@G4c6f@i/o-write-error? G4c6f@i/o-write-error?) (set! G4d48@G4c6d@make-i/o-write-error G4c6d@make-i/o-write-error) (set! G4d47@G4c6b@G4c5c G4c6b@G4c5c) (set! G4d46@G4c66@G4c5e G4c66@G4c5e) (set! G4d45@G4c64@G4c5f G4c64@G4c5f) (set! G4d44@G4c62@G4c5d G4c62@G4c5d) (set! G4d43@G4c5b@i/o-read-error? G4c5b@i/o-read-error?) (set! G4d42@G4c59@make-i/o-read-error G4c59@make-i/o-read-error) (set! G4d41@G4c57@G4c48 G4c57@G4c48) (set! G4d40@G4c52@G4c4a G4c52@G4c4a) (set! G4d3f@G4c50@G4c4b G4c50@G4c4b) (set! G4d3e@G4c4e@G4c49 G4c4e@G4c49) (set! G4d3d@G4c47@i/o-error? G4c47@i/o-error?) (set! G4d3c@G4c45@make-i/o-error G4c45@make-i/o-error) (set! G4d3b@G4c43@G4c34 G4c43@G4c34) (set! G4d3a@G4c3e@G4c36 G4c3e@G4c36) (set! G4d39@G4c3c@G4c37 G4c3c@G4c37) (set! G4d38@G4c3a@G4c35 G4c3a@G4c35)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G29cf@G2974@current-primitive-locations (lambda (G5151@x) ((lambda (G5153@t) (if G5153@t (cdr G5153@t) '#f)) (assq G5151@x '((syntax-error . G4a93@G314c@syntax-error) (syntax-dispatch . G4a27@G305f@syntax-dispatch) (load . G4e20@G4d96@load) (interaction-environment . G4a9c@G315e@interaction-environment) (make-variable-transformer . G49e7@G2e5d@make-variable-transformer) (identifier? . G4a97@G3154@identifier?) (generate-temporaries . G4a8c@G313e@generate-temporaries) (free-identifier=? . G4a8d@G3140@free-identifier=?) (syntax->datum . G4a99@G3158@syntax->datum) (datum->syntax . G4a98@G3156@datum->syntax) (bound-identifier=? . G4a8e@G3142@bound-identifier=?) (make-i/o-write-error . G4d48@G4c6d@make-i/o-write-error) (make-i/o-read-error . G4d42@G4c59@make-i/o-read-error) (make-i/o-port-error . G4d76@G4d04@make-i/o-port-error) (make-i/o-invalid-position-error . G4d4e@G4c82@make-i/o-invalid-position-error) (make-i/o-filename-error . G4d56@G4c9b@make-i/o-filename-error) (make-i/o-file-protection-error . G4d5e@G4cb3@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4d64@G4cc7@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4d70@G4cef@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4d6a@G4cdb@make-i/o-file-already-exists-error) (make-i/o-error . G4d3c@G4c45@make-i/o-error) (make-i/o-encoding-error . G4d84@G4d31@make-i/o-encoding-error) (make-i/o-decoding-error . G4d7e@G4d1c@make-i/o-decoding-error) (i/o-write-error? . G4d49@G4c6f@i/o-write-error?) (i/o-read-error? . G4d43@G4c5b@i/o-read-error?) (i/o-port-error? . G4d78@G4d08@i/o-port-error?) (i/o-invalid-position-error? . G4d50@G4c86@i/o-invalid-position-error?) (i/o-filename-error? . G4d58@G4c9f@i/o-filename-error?) (i/o-file-protection-error? . G4d5f@G4cb5@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4d65@G4cc9@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4d71@G4cf1@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4d6b@G4cdd@i/o-file-already-exists-error?) (i/o-error? . G4d3d@G4c47@i/o-error?) (i/o-error-port . G4d79@G4d0a@i/o-error-port) (i/o-error-filename . G4d59@G4ca1@i/o-error-filename) (i/o-encoding-error? . G4d86@G4d35@i/o-encoding-error?) (i/o-encoding-error-char . G4d87@G4d37@i/o-encoding-error-char) (i/o-decoding-error? . G4d7f@G4d1e@i/o-decoding-error?) (scheme-report-environment . G4a83@G312c@scheme-report-environment) (null-environment . G4a82@G312a@null-environment) (command-line . G4e1d@G4d90@command-line) (eval . G4a85@G3130@eval) (environment . G4a81@G3128@environment) (who-condition? . G4c0f@G4b63@who-condition?) (warning? . G4be8@G4ae3@warning?) (violation? . G4bfa@G4b1f@violation?) (undefined-violation? . G4c32@G4bd3@undefined-violation?) (syntax-violation? . G4c2a@G4bbb@syntax-violation?) (syntax-violation-subform . G4c2c@G4bbf@syntax-violation-subform) (syntax-violation-form . G4c2b@G4bbd@syntax-violation-form) (syntax-violation . G4a96@G3152@syntax-violation) (serious-condition? . G4bee@G4af7@serious-condition?) (non-continuable-violation? . G4c16@G4b79@non-continuable-violation?) (message-condition? . G4be1@G4acd@message-condition?) (make-who-condition . G4c0d@G4b5f@make-who-condition) (make-warning . G4be7@G4ae1@make-warning) (make-violation . G4bf9@G4b1d@make-violation) (make-undefined-violation . G4c31@G4bd1@make-undefined-violation) (make-syntax-violation . G4c27@G4bb5@make-syntax-violation) (make-serious-condition . G4bed@G4af5@make-serious-condition) (make-non-continuable-violation . G4c15@G4b77@make-non-continuable-violation) (make-message-condition . G4bdf@G4ac9@make-message-condition) (make-lexical-violation . G4c21@G4b9f@make-lexical-violation) (make-irritants-condition . G4c05@G4b46@make-irritants-condition) (make-implementation-restriction-violation . G4c1b@G4b8b@make-implementation-restriction-violation) (make-error . G4bf3@G4b09@make-error) (make-assertion-violation . G4bff@G4b31@make-assertion-violation) (lexical-violation? . G4c22@G4ba1@lexical-violation?) (irritants-condition? . G4c07@G4b4a@irritants-condition?) (implementation-restriction-violation? . G4c1c@G4b8d@implementation-restriction-violation?) (error? . G4bf4@G4b0b@error?) (condition-who . G4c10@G4b65@condition-who) (condition-message . G4be2@G4acf@condition-message) (condition-irritants . G4c08@G4b4c@condition-irritants) (assertion-violation? . G4c00@G4b33@assertion-violation?)))))) (G2c0f@G2aa2@install-library 'G5125 '(mosh interaction) '() '() '() '() '((string-upcase . G50a8) (string-titlecase . G50a7) (string-normalize-nfkd . G50a6) (string-normalize-nfkc . G50a5) (string-normalize-nfd . G50a4) (string-normalize-nfc . G50a3) (string-foldcase . G50a2) (string-downcase . G50a1) (string-ci>? . G50a0) (string-ci>=? . G509f) (string-ci=? . G509e) (string-ci<? . G509d) (string-ci<=? . G509c) (char-whitespace? . G509b) (char-upper-case? . G509a) (char-title-case? . G5099) (char-numeric? . G5098) (char-lower-case? . G5097) (char-general-category . G5096) (char-upcase . G5095) (char-titlecase . G5094) (char-foldcase . G5093) (char-downcase . G5092) (char-ci>? . G5091) (char-ci>=? . G5090) (char-ci=? . G508f) (char-ci<? . G508e) (char-ci<=? . G508d) (char-alphabetic? . G508c) (make-variable-transformer . G2e5c) (identifier? . G3153) (generate-temporaries . G313d) (free-identifier=? . G313f) (syntax->datum . G3157) (datum->syntax . G3155) (bound-identifier=? . G3141) (record-type-descriptor? . G508b) (record-predicate . G508a) (record-mutator . G5089) (record-constructor . G5088) (record-accessor . G5087) (make-record-type-descriptor . G5086) (make-record-constructor-descriptor . G5085) (record? . G5084) (record-type-uid . G5083) (record-type-sealed? . G5082) (record-type-parent . G5081) (record-type-opaque? . G5080) (record-type-name . G507f) (record-type-generative? . G507e) (record-type-field-names . G507d) (record-rtd . G507c) (record-field-mutable? . G507b) (delete-file . G507a) (file-exists? . G5079) (vector-sort! . G5078) (vector-sort . G5077) (list-sort . G5076) (symbol-hash . G5075) (string-ci-hash . G5074) (string-hash . G5073) (equal-hash . G5072) (hashtable-equivalence-function . G5071) (make-hashtable . G5070) (hashtable-hash-function . G506f) (make-eqv-hashtable . G506e) (make-eq-hashtable . G506d) (hashtable? . G506c) (hashtable-update! . G506b) (hashtable-size . G506a) (hashtable-set! . G5069) (hashtable-ref . G5068) (hashtable-mutable? . G5067) (hashtable-keys . G5066) (hashtable-entries . G5065) (hashtable-delete! . G5064) (hashtable-copy . G5063) (hashtable-contains? . G5062) (hashtable-clear! . G5061) (call-with-output-file . G5060) (call-with-input-file . G505f) (write-char . G505e) (write . G505d) (with-output-to-file . G505c) (with-input-from-file . G505b) (read-char . G505a) (read . G5059) (peek-char . G5058) (open-output-file . G5057) (open-input-file . G5056) (newline . G5055) (display . G5054) (close-output-port . G5053) (close-input-port . G5052) (eof-object? . G5051) (eof-object . G5050) (current-error-port . G504f) (current-output-port . G504e) (current-input-port . G504d) (output-port? . G504c) (input-port? . G504b) (utf-8-codec . G504a) (utf-16-codec . G5049) (transcoder-error-handling-mode . G5048) (transcoder-eol-style . G5047) (transcoder-codec . G5046) (transcoded-port . G5045) (textual-port? . G5044) (string->bytevector . G5043) (standard-output-port . G5042) (standard-input-port . G5041) (standard-error-port . G5040) (set-port-position! . G503f) (put-u8 . G503e) (put-string . G503d) (put-datum . G503c) (put-char . G503b) (put-bytevector . G503a) (port? . G5039) (port-transcoder . G5038) (port-position . G5037) (port-has-set-port-position!? . G5036) (port-has-port-position? . G5035) (port-eof? . G5034) (output-port-buffer-mode . G5033) (open-string-output-port . G5032) (open-string-input-port . G5031) (open-file-output-port . G5030) (open-file-input/output-port . G502f) (open-file-input-port . G502e) (open-bytevector-output-port . G502d) (open-bytevector-input-port . G502c) (native-transcoder . G502b) (native-eol-style . G502a) (make-transcoder . G5029) (latin-1-codec . G5028) (make-i/o-write-error . G4c6c) (make-i/o-read-error . G4c58) (make-i/o-port-error . G4d03) (make-i/o-invalid-position-error . G4c81) (make-i/o-filename-error . G4c9a) (make-i/o-file-protection-error . G4cb2) (make-i/o-file-is-read-only-error . G4cc6) (make-i/o-file-does-not-exist-error . G4cee) (make-i/o-file-already-exists-error . G4cda) (make-i/o-error . G4c44) (make-i/o-encoding-error . G4d30) (make-i/o-decoding-error . G4d1b) (make-custom-textual-output-port . G5027) (make-custom-textual-input/output-port . G5026) (make-custom-textual-input-port . G5025) (make-custom-binary-output-port . G5024) (make-custom-binary-input/output-port . G5023) (make-custom-binary-input-port . G5022) (make-bytevector . G5021) (lookahead-u8 . G5020) (lookahead-char . G501f) (i/o-write-error? . G4c6e) (i/o-read-error? . G4c5a) (i/o-port-error? . G4d07) (i/o-invalid-position-error? . G4c85) (i/o-filename-error? . G4c9e) (i/o-file-protection-error? . G4cb4) (i/o-file-is-read-only-error? . G4cc8) (i/o-file-does-not-exist-error? . G4cf0) (i/o-file-already-exists-error? . G4cdc) (i/o-error? . G4c46) (i/o-error-port . G4d09) (i/o-error-filename . G4ca0) (i/o-encoding-error? . G4d34) (i/o-encoding-error-char . G4d36) (i/o-decoding-error? . G4d1d) (get-u8 . G501e) (get-string-n! . G501d) (get-string-n . G501c) (get-string-all . G501b) (get-line . G501a) (get-datum . G5019) (get-char . G5018) (get-bytevector-some . G5017) (get-bytevector-n! . G5016) (get-bytevector-n . G5015) (get-bytevector-all . G5014) (flush-output-port . G5013) (close-port . G5012) (exit . G500b) (command-line . G4d8f) (string-fill! . G500a) (string-set! . G5009) (set-cdr! . G5008) (set-car! . G5007) (remove . G5006) (remv . G5005) (remp . G5004) (remq . G5003) (partition . G5002) (memv . G5001) (memq . G5000) (memp . G4fff) (member . G4ffe) (exists . G4ffd) (for-all . G4ffc) (fold-right . G4ffb) (fold-left . G4ffa) (find . G4ff9) (filter . G4ff8) (cons* . G4ff7) (assv . G4ff6) (assq . G4ff5) (assp . G4ff4) (assoc . G4ff3) (call-with-string-output-port . G4ff2) (call-with-port . G4ff1) (call-with-bytevector-output-port . G4ff0) (bytevector->string . G4fef) (buffer-mode? . G4fee) (binary-port? . G4fed) (with-exception-handler . G4fec) (raise-continuable . G4feb) (raise . G4fea) (eval . G312f) (environment . G3127) (make-enumeration . G4fe9) (enum-set=? . G4fe8) (enum-set-universe . G4fe7) (enum-set-union . G4fe6) (enum-set-subset? . G4fe5) (enum-set-projection . G4fe4) (enum-set-member? . G4fe3) (enum-set-intersection . G4fe2) (enum-set-indexer . G4fe1) (enum-set-difference . G4fe0) (enum-set-constructor . G4fdf) (enum-set-complement . G4fde) (enum-set->list . G4fdd) (who-condition? . G4b62) (warning? . G4ae2) (violation? . G4b1e) (undefined-violation? . G4bd2) (syntax-violation? . G4bba) (syntax-violation-subform . G4bbe) (syntax-violation-form . G4bbc) (syntax-violation . G3151) (simple-conditions . G4fdc) (serious-condition? . G4af6) (non-continuable-violation? . G4b78) (message-condition? . G4acc) (make-who-condition . G4b5e) (make-warning . G4ae0) (make-violation . G4b1c) (make-undefined-violation . G4bd0) (make-syntax-violation . G4bb4) (make-serious-condition . G4af4) (make-non-continuable-violation . G4b76) (make-message-condition . G4ac8) (make-lexical-violation . G4b9e) (make-irritants-condition . G4b45) (make-implementation-restriction-violation . G4b8a) (make-error . G4b08) (make-assertion-violation . G4b30) (lexical-violation? . G4ba0) (irritants-condition? . G4b49) (implementation-restriction-violation? . G4b8c) (error? . G4b0a) (condition-who . G4b64) (condition-predicate . G4fdb) (condition-message . G4ace) (condition-irritants . G4b4b) (condition-accessor . G4fda) (condition . G4fd9) (assertion-violation? . G4b32) (condition? . G4fd8) (utf32->string . G4fd7) (utf16->string . G4fd6) (utf8->string . G4fd5) (uint-list->bytevector . G4fd4) (u8-list->bytevector . G4fd3) (string->utf8 . G4fd2) (string->utf32 . G4fd1) (string->utf16 . G4fd0) (sint-list->bytevector . G4fcf) (native-endianness . G4fce) (bytevector? . G4fcd) (bytevector=? . G4fcc) (bytevector-uint-set! . G4fcb) (bytevector-uint-ref . G4fca) (bytevector-u8-set! . G4fc9) (bytevector-u8-ref . G4fc8) (bytevector-u64-set! . G4fc7) (bytevector-u64-ref . G4fc6) (bytevector-u64-native-set! . G4fc5) (bytevector-u64-native-ref . G4fc4) (bytevector-u32-set! . G4fc3) (bytevector-u32-ref . G4fc2) (bytevector-u32-native-set! . G4fc1) (bytevector-u32-native-ref . G4fc0) (bytevector-u16-set! . G4fbf) (bytevector-u16-ref . G4fbe) (bytevector-u16-native-set! . G4fbd) (bytevector-u16-native-ref . G4fbc) (bytevector-sint-set! . G4fbb) (bytevector-sint-ref . G4fba) (bytevector-s8-set! . G4fb9) (bytevector-s8-ref . G4fb8) (bytevector-s64-set! . G4fb7) (bytevector-s64-ref . G4fb6) (bytevector-s64-native-set! . G4fb5) (bytevector-s64-native-ref . G4fb4) (bytevector-s32-set! . G4fb3) (bytevector-s32-ref . G4fb2) (bytevector-s32-native-set! . G4fb1) (bytevector-s32-native-ref . G4fb0) (bytevector-s16-set! . G4faf) (bytevector-s16-ref . G4fae) (bytevector-s16-native-set! . G4fad) (bytevector-s16-native-ref . G4fac) (bytevector-length . G4fab) (bytevector-ieee-single-ref . G4faa) (bytevector-ieee-single-native-set! . G4fa9) (bytevector-ieee-single-native-ref . G4fa8) (bytevector-ieee-double-ref . G4fa7) (bytevector-ieee-double-native-set! . G4fa6) (bytevector-ieee-double-native-ref . G4fa5) (bytevector-fill! . G4fa4) (bytevector-copy! . G4fa3) (bytevector-copy . G4fa2) (bytevector->uint-list . G4fa1) (bytevector->u8-list . G4fa0) (bytevector->sint-list . G4f9f) (no-nans-violation? . G4f9e) (no-infinities-violation? . G4f9d) (make-no-nans-violation . G4f9c) (make-no-infinities-violation . G4f9b) (real->flonum . G4f9a) (flzero? . G4f99) (fltruncate . G4f98) (fltan . G4f97) (flsqrt . G4f96) (flsin . G4f95) (flround . G4f94) (flpositive? . G4f93) (flonum? . G4f92) (flodd? . G4f91) (flnumerator . G4f90) (flnegative? . G4f8f) (flnan? . G4f8e) (flmod0 . G4f8d) (flmod . G4f8c) (flmin . G4f8b) (flmax . G4f8a) (fllog . G4f89) (flinteger? . G4f88) (flinfinite? . G4f87) (flfloor . G4f86) (flfinite? . G4f85) (flexpt . G4f84) (flexp . G4f83) (fleven? . G4f82) (fldiv0-and-mod0 . G4f81) (fldiv0 . G4f80) (fldiv-and-mod . G4f7f) (fldiv . G4f7e) (fldenominator . G4f7d) (flcos . G4f7c) (flceiling . G4f7b) (flatan . G4f7a) (flasin . G4f79) (flacos . G4f78) (flabs . G4f77) (fl>? . G4f76) (fl>=? . G4f75) (fl=? . G4f74) (fl<? . G4f73) (fl<=? . G4f72) (fl/ . G4f71) (fl- . G4f70) (fl+ . G4f6f) (fl* . G4f6e) (fixnum->flonum . G4f6d) (fxzero? . G4f6c) (fxxor . G4f6b) (fxrotate-bit-field . G4f6a) (fxreverse-bit-field . G4f69) (fxpositive? . G4f68) (fxodd? . G4f67) (fxnot . G4f66) (fxnegative? . G4f65) (fxmod0 . G4f64) (fxmod . G4f63) (fxmin . G4f62) (fxmax . G4f61) (fxlength . G4f60) (fxior . G4f5f) (fxif . G4f5e) (fxfirst-bit-set . G4f5d) (fxeven? . G4f5c) (fxdiv0-and-mod0 . G4f5b) (fxdiv0 . G4f5a) (fxdiv-and-mod . G4f59) (fxdiv . G4f58) (fxcopy-bit-field . G4f57) (fxcopy-bit . G4f56) (fxbit-set? . G4f55) (fxbit-field . G4f54) (fxbit-count . G4f53) (fxarithmetic-shift-right . G4f52) (fxarithmetic-shift-left . G4f51) (fxarithmetic-shift . G4f50) (fxand . G4f4f) (fx>? . G4f4e) (fx>=? . G4f4d) (fx=? . G4f4c) (fx<? . G4f4b) (fx<=? . G4f4a) (fx-/carry . G4f49) (fx- . G4f48) (fx+/carry . G4f47) (fx+ . G4f46) (fx*/carry . G4f45) (fx* . G4f44) (greatest-fixnum . G4f43) (least-fixnum . G4f42) (fixnum-width . G4f41) (fixnum? . G4f40) (bitwise-rotate-bit-field . G4f3f) (bitwise-reverse-bit-field . G4f3e) (bitwise-length . G4f3d) (bitwise-if . G4f3c) (bitwise-first-bit-set . G4f3b) (bitwise-copy-bit-field . G4f3a) (bitwise-copy-bit . G4f39) (bitwise-bit-set? . G4f38) (bitwise-bit-field . G4f37) (bitwise-bit-count . G4f36) (bitwise-xor . G4f35) (bitwise-ior . G4f34) (bitwise-and . G4f33) (bitwise-not . G4f32) (bitwise-arithmetic-shift-right . G4f31) (bitwise-arithmetic-shift-left . G4f30) (bitwise-arithmetic-shift . G4f2f) (zero? . G4f2e) (vector? . G4f2d) (vector-set! . G4f2c) (vector-ref . G4f2b) (vector-map . G4f2a) (vector-length . G4f29) (vector-for-each . G4f28) (vector-fill! . G4f27) (vector->list . G4f26) (vector . G4f25) (values . G4f24) (truncate . G4f23) (tan . G4f22) (symbol? . G4f21) (symbol=? . G4f20) (symbol->string . G4f1f) (substring . G4f1e) (string? . G4f1d) (string>? . G4f1c) (string>=? . G4f1b) (string=? . G4f1a) (string<? . G4f19) (string<=? . G4f18) (string-ref . G4f17) (string-length . G4f16) (string-for-each . G4f15) (string-copy . G4f14) (string-append . G4f13) (string->symbol . G4f12) (string->number . G4f11) (string->list . G4f10) (string . G4f0f) (sqrt . G4f0e) (sin . G4f0d) (round . G4f0c) (reverse . G4f0b) (real? . G4f0a) (real-valued? . G4f09) (real-part . G4f08) (rationalize . G4f07) (rational? . G4f06) (rational-valued? . G4f05) (procedure? . G4f04) (positive? . G4f03) (pair? . G4f02) (odd? . G4f01) (numerator . G4f00) (number? . G4eff) (number->string . G4efe) (null? . G4efd) (not . G4efc) (negative? . G4efb) (nan? . G4efa) (min . G4ef9) (max . G4ef8) (map . G4ef7) (make-vector . G4ef6) (make-string . G4ef5) (make-rectangular . G4ef4) (make-polar . G4ef3) (magnitude . G4ef2) (log . G4ef1) (list? . G4ef0) (list-tail . G4eef) (list-ref . G4eee) (list->vector . G4eed) (list->string . G4eec) (list . G4eeb) (length . G4eea) (lcm . G4ee9) (integer? . G4ee8) (integer-valued? . G4ee7) (integer->char . G4ee6) (infinite? . G4ee5) (inexact? . G4ee4) (inexact . G4ee3) (imag-part . G4ee2) (gcd . G4ee1) (for-each . G4ee0) (floor . G4edf) (finite? . G4ede) (expt . G4edd) (exp . G4edc) (exact? . G4edb) (exact-integer-sqrt . G4eda) (exact . G4ed9) (even? . G4ed8) (error . G4ed7) (eqv? . G4ed6) (equal? . G4ed5) (eq? . G4ed4) (dynamic-wind . G4ed3) (div0-and-mod0 . G4ed2) (mod0 . G4ed1) (div0 . G4ed0) (div-and-mod . G4ecf) (mod . G4ece) (div . G4ecd) (denominator . G4ecc) (cos . G4ecb) (cons . G4eca) (complex? . G4ec9) (char? . G4ec8) (char>? . G4ec7) (char>=? . G4ec6) (char=? . G4ec5) (char<? . G4ec4) (char<=? . G4ec3) (char->integer . G4ec2) (ceiling . G4ec1) (call-with-values . G4ec0) (call/cc . G4ebf) (call-with-current-continuation . G4ebe) (cddddr . G4ebd) (cdddar . G4ebc) (cddadr . G4ebb) (cddaar . G4eba) (cdaddr . G4eb9) (cdadar . G4eb8) (cdaadr . G4eb7) (cdaaar . G4eb6) (cadddr . G4eb5) (caddar . G4eb4) (cadadr . G4eb3) (cadaar . G4eb2) (caaddr . G4eb1) (caadar . G4eb0) (caaadr . G4eaf) (caaaar . G4eae) (cdddr . G4ead) (cddar . G4eac) (cdadr . G4eab) (cdaar . G4eaa) (caddr . G4ea9) (cadar . G4ea8) (caadr . G4ea7) (caaar . G4ea6) (cddr . G4ea5) (cdar . G4ea4) (cadr . G4ea3) (caar . G4ea2) (cdr . G4ea1) (car . G4ea0) (boolean? . G4e9f) (boolean=? . G4e9e) (atan . G4e9d) (assertion-violation . G4e9c) (asin . G4e9b) (apply . G4e9a) (append . G4e99) (angle . G4e98) (acos . G4e97) (abs . G4e96) (/ . G4e95) (* . G4e94) (- . G4e93) (+ . G4e92) (>= . G4e91) (> . G4e90) (= . G4e8f) (<= . G4e8e) (< . G4e8d) (library . G4e8c) (export . G4e8b) (&no-nans . G4e8a) (&no-infinities . G4e89) (&i/o-encoding . G4e88) (&i/o-decoding . G4e87) (&i/o-port . G4e86) (&i/o-file-does-not-exist . G4e85) (&i/o-file-already-exists . G4e84) (&i/o-file-is-read-only . G4e83) (&i/o-file-protection . G4e82) (&i/o-filename . G4e81) (&i/o-invalid-position . G4e80) (&i/o-write . G4e7f) (&i/o-read . G4e7e) (&i/o . G4e7d) (&undefined . G4e7c) (&syntax . G4e7b) (&lexical . G4e7a) (&implementation-restriction . G4e79) (&non-continuable . G4e78) (&who . G4e77) (&irritants . G4e76) (&assertion . G4e75) (&violation . G4e74) (&error . G4e73) (&serious . G4e72) (&warning . G4e71) (&message . G4e70) (&condition . G4e6f) (define-condition-type . G4e6e) (define-enumeration . G4e6d) (define-record-type . G4e6c) (parent-rtd . G4e6b) (nongenerative . G4e6a) (opaque . G4e69) (sealed . G4e68) (protocol . G4e67) (parent . G4e66) (immutable . G4e65) (mutable . G4e64) (fields . G4e63) (error-handling-mode . G4e62) (file-options . G4e61) (buffer-mode . G4e60) (eol-style . G4e5f) (guard . G4e5e) (unsyntax-splicing . G4e5b) (unsyntax . G4e5a) (unquote-splicing . G4e59) (unquote . G4e58) (_ . G4e57) (else . G4e56) (=> . G4e55) (... . G4e54) (assert . G4e53) (endianness . G4e52) (or . G4e4f) (and . G4e4e) (do . G4e4d) (cond . G4e4c) (let* . G4e4b) (let . G4e4a) (let*-values . G4e49) (let-values . G4e48) (identifier-syntax . G4e47) (with-syntax . G4e46) (quasisyntax . G4e45) (quasiquote . G4e44) (syntax-rules . G4e43) (include . G4e42) (record-constructor-descriptor . G4e40) (record-type-descriptor . G4e3f) (case . G4e3e) (unless . G4e3c) (when . G4e3b) (if . G4e3a) (letrec* . G4e39) (letrec . G4e38) (case-lambda . G4e36) (lambda . G4e35) (syntax . G4e34) (syntax-case . G4e33) (quote . G4e32) (letrec-syntax . G4e30) (let-syntax . G4e2f) (set! . G4e2e) (import . G4e2d) (begin . G4e2c) (define-syntax . G4e2a) (define . G4e29)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5126 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4e59) (unquote . G4e58) (delay . G4e51) (or . G4e4f) (and . G4e4e) (do . G4e4d) (cond . G4e4c) (let* . G4e4b) (let . G4e4a) (quasiquote . G4e44) (syntax-rules . G4e43) (case . G4e3e) (if . G4e3a) (letrec . G4e38) (lambda . G4e35) (quote . G4e32) (letrec-syntax . G4e30) (let-syntax . G4e2f) (set! . G4e2e) (begin . G4e2c) (define-syntax . G4e2a) (define . G4e29)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5127 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G50a0) (string-ci>=? . G509f) (string-ci=? . G509e) (string-ci<? . G509d) (string-ci<=? . G509c) (char-whitespace? . G509b) (char-upper-case? . G509a) (char-numeric? . G5098) (char-lower-case? . G5097) (char-upcase . G5095) (char-downcase . G5092) (char-ci>? . G5091) (char-ci>=? . G5090) (char-ci=? . G508f) (char-ci<? . G508e) (char-ci<=? . G508d) (char-alphabetic? . G508c) (call-with-output-file . G5060) (call-with-input-file . G505f) (write-char . G505e) (write . G505d) (with-output-to-file . G505c) (with-input-from-file . G505b) (read-char . G505a) (read . G5059) (peek-char . G5058) (open-output-file . G5057) (open-input-file . G5056) (newline . G5055) (display . G5054) (close-output-port . G5053) (close-input-port . G5052) (eof-object . G5050) (current-output-port . G504e) (current-input-port . G504d) (output-port? . G504c) (input-port? . G504b) (scheme-report-environment . G312b) (quotient . G5011) (null-environment . G3129) (remainder . G5010) (modulo . G500f) (inexact->exact . G500e) (force . G500d) (exact->inexact . G500c) (string-fill! . G500a) (string-set! . G5009) (set-cdr! . G5008) (set-car! . G5007) (memv . G5001) (memq . G5000) (member . G4ffe) (assv . G4ff6) (assq . G4ff5) (assoc . G4ff3) (eval . G312f) (zero? . G4f2e) (vector? . G4f2d) (vector-set! . G4f2c) (vector-ref . G4f2b) (vector-length . G4f29) (vector-fill! . G4f27) (vector->list . G4f26) (vector . G4f25) (values . G4f24) (truncate . G4f23) (tan . G4f22) (symbol? . G4f21) (symbol->string . G4f1f) (substring . G4f1e) (string? . G4f1d) (string>? . G4f1c) (string>=? . G4f1b) (string=? . G4f1a) (string<? . G4f19) (string<=? . G4f18) (string-ref . G4f17) (string-length . G4f16) (string-copy . G4f14) (string-append . G4f13) (string->symbol . G4f12) (string->number . G4f11) (string->list . G4f10) (string . G4f0f) (sqrt . G4f0e) (sin . G4f0d) (round . G4f0c) (reverse . G4f0b) (real? . G4f0a) (real-part . G4f08) (rationalize . G4f07) (rational? . G4f06) (procedure? . G4f04) (positive? . G4f03) (pair? . G4f02) (odd? . G4f01) (numerator . G4f00) (number? . G4eff) (number->string . G4efe) (not . G4efc) (negative? . G4efb) (min . G4ef9) (max . G4ef8) (map . G4ef7) (make-vector . G4ef6) (make-string . G4ef5) (make-rectangular . G4ef4) (make-polar . G4ef3) (magnitude . G4ef2) (log . G4ef1) (list? . G4ef0) (list-tail . G4eef) (list-ref . G4eee) (list->vector . G4eed) (list->string . G4eec) (list . G4eeb) (length . G4eea) (lcm . G4ee9) (integer? . G4ee8) (integer->char . G4ee6) (inexact? . G4ee4) (imag-part . G4ee2) (gcd . G4ee1) (for-each . G4ee0) (floor . G4edf) (expt . G4edd) (exp . G4edc) (exact? . G4edb) (even? . G4ed8) (eqv? . G4ed6) (equal? . G4ed5) (eq? . G4ed4) (dynamic-wind . G4ed3) (denominator . G4ecc) (cos . G4ecb) (cons . G4eca) (complex? . G4ec9) (char? . G4ec8) (char>? . G4ec7) (char>=? . G4ec6) (char=? . G4ec5) (char<? . G4ec4) (char<=? . G4ec3) (char->integer . G4ec2) (ceiling . G4ec1) (call-with-values . G4ec0) (call-with-current-continuation . G4ebe) (cddddr . G4ebd) (cdddar . G4ebc) (cddadr . G4ebb) (cddaar . G4eba) (cdaddr . G4eb9) (cdadar . G4eb8) (cdaadr . G4eb7) (cdaaar . G4eb6) (cadddr . G4eb5) (caddar . G4eb4) (cadadr . G4eb3) (cadaar . G4eb2) (caaddr . G4eb1) (caadar . G4eb0) (caaadr . G4eaf) (caaaar . G4eae) (cdddr . G4ead) (cddar . G4eac) (cdadr . G4eab) (cdaar . G4eaa) (caddr . G4ea9) (cadar . G4ea8) (caadr . G4ea7) (caaar . G4ea6) (cddr . G4ea5) (cdar . G4ea4) (cadr . G4ea3) (caar . G4ea2) (cdr . G4ea1) (car . G4ea0) (boolean? . G4e9f) (atan . G4e9d) (asin . G4e9b) (apply . G4e9a) (append . G4e99) (angle . G4e98) (acos . G4e97) (abs . G4e96) (/ . G4e95) (* . G4e94) (- . G4e93) (+ . G4e92) (>= . G4e91) (> . G4e90) (= . G4e8f) (<= . G4e8e) (< . G4e8d) (unquote-splicing . G4e59) (unquote . G4e58) (delay . G4e51) (or . G4e4f) (and . G4e4e) (do . G4e4d) (cond . G4e4c) (let* . G4e4b) (let . G4e4a) (quasiquote . G4e44) (syntax-rules . G4e43) (case . G4e3e) (if . G4e3a) (letrec . G4e38) (lambda . G4e35) (quote . G4e32) (letrec-syntax . G4e30) (let-syntax . G4e2f) (set! . G4e2e) (begin . G4e2c) (define-syntax . G4e2a) (define . G4e29)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5128 '(psyntax modules) '() '() '() '() '((module . G4e2b)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5129 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G512a '(rnrs) '(6) '() '() '() '((regexp? . G50e5) (string-upcase . G50a8) (string-titlecase . G50a7) (string-normalize-nfkd . G50a6) (string-normalize-nfkc . G50a5) (string-normalize-nfd . G50a4) (string-normalize-nfc . G50a3) (string-foldcase . G50a2) (string-downcase . G50a1) (string-ci>? . G50a0) (string-ci>=? . G509f) (string-ci=? . G509e) (string-ci<? . G509d) (string-ci<=? . G509c) (char-whitespace? . G509b) (char-upper-case? . G509a) (char-title-case? . G5099) (char-numeric? . G5098) (char-lower-case? . G5097) (char-general-category . G5096) (char-upcase . G5095) (char-titlecase . G5094) (char-foldcase . G5093) (char-downcase . G5092) (char-ci>? . G5091) (char-ci>=? . G5090) (char-ci=? . G508f) (char-ci<? . G508e) (char-ci<=? . G508d) (char-alphabetic? . G508c) (make-variable-transformer . G2e5c) (identifier? . G3153) (generate-temporaries . G313d) (free-identifier=? . G313f) (syntax->datum . G3157) (datum->syntax . G3155) (bound-identifier=? . G3141) (record-type-descriptor? . G508b) (record-predicate . G508a) (record-mutator . G5089) (record-constructor . G5088) (record-accessor . G5087) (make-record-type-descriptor . G5086) (make-record-constructor-descriptor . G5085) (record? . G5084) (record-type-uid . G5083) (record-type-sealed? . G5082) (record-type-parent . G5081) (record-type-opaque? . G5080) (record-type-name . G507f) (record-type-generative? . G507e) (record-type-field-names . G507d) (record-rtd . G507c) (record-field-mutable? . G507b) (delete-file . G507a) (file-exists? . G5079) (vector-sort! . G5078) (vector-sort . G5077) (list-sort . G5076) (symbol-hash . G5075) (string-ci-hash . G5074) (string-hash . G5073) (equal-hash . G5072) (hashtable-equivalence-function . G5071) (make-hashtable . G5070) (hashtable-hash-function . G506f) (make-eqv-hashtable . G506e) (make-eq-hashtable . G506d) (hashtable? . G506c) (hashtable-update! . G506b) (hashtable-size . G506a) (hashtable-set! . G5069) (hashtable-ref . G5068) (hashtable-mutable? . G5067) (hashtable-keys . G5066) (hashtable-entries . G5065) (hashtable-delete! . G5064) (hashtable-copy . G5063) (hashtable-contains? . G5062) (hashtable-clear! . G5061) (call-with-output-file . G5060) (call-with-input-file . G505f) (write-char . G505e) (write . G505d) (with-output-to-file . G505c) (with-input-from-file . G505b) (read-char . G505a) (read . G5059) (peek-char . G5058) (open-output-file . G5057) (open-input-file . G5056) (newline . G5055) (display . G5054) (close-output-port . G5053) (close-input-port . G5052) (eof-object? . G5051) (eof-object . G5050) (current-error-port . G504f) (current-output-port . G504e) (current-input-port . G504d) (output-port? . G504c) (input-port? . G504b) (utf-8-codec . G504a) (utf-16-codec . G5049) (transcoder-error-handling-mode . G5048) (transcoder-eol-style . G5047) (transcoder-codec . G5046) (transcoded-port . G5045) (textual-port? . G5044) (string->bytevector . G5043) (standard-output-port . G5042) (standard-input-port . G5041) (standard-error-port . G5040) (set-port-position! . G503f) (put-u8 . G503e) (put-string . G503d) (put-datum . G503c) (put-char . G503b) (put-bytevector . G503a) (port? . G5039) (port-transcoder . G5038) (port-position . G5037) (port-has-set-port-position!? . G5036) (port-has-port-position? . G5035) (port-eof? . G5034) (output-port-buffer-mode . G5033) (open-string-output-port . G5032) (open-string-input-port . G5031) (open-file-output-port . G5030) (open-file-input/output-port . G502f) (open-file-input-port . G502e) (open-bytevector-output-port . G502d) (open-bytevector-input-port . G502c) (native-transcoder . G502b) (native-eol-style . G502a) (make-transcoder . G5029) (latin-1-codec . G5028) (make-i/o-write-error . G4c6c) (make-i/o-read-error . G4c58) (make-i/o-port-error . G4d03) (make-i/o-invalid-position-error . G4c81) (make-i/o-filename-error . G4c9a) (make-i/o-file-protection-error . G4cb2) (make-i/o-file-is-read-only-error . G4cc6) (make-i/o-file-does-not-exist-error . G4cee) (make-i/o-file-already-exists-error . G4cda) (make-i/o-error . G4c44) (make-i/o-encoding-error . G4d30) (make-i/o-decoding-error . G4d1b) (make-custom-textual-output-port . G5027) (make-custom-textual-input/output-port . G5026) (make-custom-textual-input-port . G5025) (make-custom-binary-output-port . G5024) (make-custom-binary-input/output-port . G5023) (make-custom-binary-input-port . G5022) (make-bytevector . G5021) (lookahead-u8 . G5020) (lookahead-char . G501f) (i/o-write-error? . G4c6e) (i/o-read-error? . G4c5a) (i/o-port-error? . G4d07) (i/o-invalid-position-error? . G4c85) (i/o-filename-error? . G4c9e) (i/o-file-protection-error? . G4cb4) (i/o-file-is-read-only-error? . G4cc8) (i/o-file-does-not-exist-error? . G4cf0) (i/o-file-already-exists-error? . G4cdc) (i/o-error? . G4c46) (i/o-error-port . G4d09) (i/o-error-filename . G4ca0) (i/o-encoding-error? . G4d34) (i/o-encoding-error-char . G4d36) (i/o-decoding-error? . G4d1d) (get-u8 . G501e) (get-string-n! . G501d) (get-string-n . G501c) (get-string-all . G501b) (get-line . G501a) (get-datum . G5019) (get-char . G5018) (get-bytevector-some . G5017) (get-bytevector-n! . G5016) (get-bytevector-n . G5015) (get-bytevector-all . G5014) (flush-output-port . G5013) (close-port . G5012) (exit . G500b) (command-line . G4d8f) (remove . G5006) (remv . G5005) (remp . G5004) (remq . G5003) (partition . G5002) (memv . G5001) (memq . G5000) (memp . G4fff) (member . G4ffe) (exists . G4ffd) (for-all . G4ffc) (fold-right . G4ffb) (fold-left . G4ffa) (find . G4ff9) (filter . G4ff8) (cons* . G4ff7) (assv . G4ff6) (assq . G4ff5) (assp . G4ff4) (assoc . G4ff3) (call-with-string-output-port . G4ff2) (call-with-port . G4ff1) (call-with-bytevector-output-port . G4ff0) (bytevector->string . G4fef) (buffer-mode? . G4fee) (binary-port? . G4fed) (with-exception-handler . G4fec) (raise-continuable . G4feb) (raise . G4fea) (make-enumeration . G4fe9) (enum-set=? . G4fe8) (enum-set-universe . G4fe7) (enum-set-union . G4fe6) (enum-set-subset? . G4fe5) (enum-set-projection . G4fe4) (enum-set-member? . G4fe3) (enum-set-intersection . G4fe2) (enum-set-indexer . G4fe1) (enum-set-difference . G4fe0) (enum-set-constructor . G4fdf) (enum-set-complement . G4fde) (enum-set->list . G4fdd) (who-condition? . G4b62) (warning? . G4ae2) (violation? . G4b1e) (undefined-violation? . G4bd2) (syntax-violation? . G4bba) (syntax-violation-subform . G4bbe) (syntax-violation-form . G4bbc) (syntax-violation . G3151) (simple-conditions . G4fdc) (serious-condition? . G4af6) (non-continuable-violation? . G4b78) (message-condition? . G4acc) (make-who-condition . G4b5e) (make-warning . G4ae0) (make-violation . G4b1c) (make-undefined-violation . G4bd0) (make-syntax-violation . G4bb4) (make-serious-condition . G4af4) (make-non-continuable-violation . G4b76) (make-message-condition . G4ac8) (make-lexical-violation . G4b9e) (make-irritants-condition . G4b45) (make-implementation-restriction-violation . G4b8a) (make-error . G4b08) (make-assertion-violation . G4b30) (lexical-violation? . G4ba0) (irritants-condition? . G4b49) (implementation-restriction-violation? . G4b8c) (error? . G4b0a) (condition-who . G4b64) (condition-predicate . G4fdb) (condition-message . G4ace) (condition-irritants . G4b4b) (condition-accessor . G4fda) (condition . G4fd9) (assertion-violation? . G4b32) (condition? . G4fd8) (utf32->string . G4fd7) (utf16->string . G4fd6) (utf8->string . G4fd5) (uint-list->bytevector . G4fd4) (u8-list->bytevector . G4fd3) (string->utf8 . G4fd2) (string->utf32 . G4fd1) (string->utf16 . G4fd0) (sint-list->bytevector . G4fcf) (native-endianness . G4fce) (bytevector? . G4fcd) (bytevector=? . G4fcc) (bytevector-uint-set! . G4fcb) (bytevector-uint-ref . G4fca) (bytevector-u8-set! . G4fc9) (bytevector-u8-ref . G4fc8) (bytevector-u64-set! . G4fc7) (bytevector-u64-ref . G4fc6) (bytevector-u64-native-set! . G4fc5) (bytevector-u64-native-ref . G4fc4) (bytevector-u32-set! . G4fc3) (bytevector-u32-ref . G4fc2) (bytevector-u32-native-set! . G4fc1) (bytevector-u32-native-ref . G4fc0) (bytevector-u16-set! . G4fbf) (bytevector-u16-ref . G4fbe) (bytevector-u16-native-set! . G4fbd) (bytevector-u16-native-ref . G4fbc) (bytevector-sint-set! . G4fbb) (bytevector-sint-ref . G4fba) (bytevector-s8-set! . G4fb9) (bytevector-s8-ref . G4fb8) (bytevector-s64-set! . G4fb7) (bytevector-s64-ref . G4fb6) (bytevector-s64-native-set! . G4fb5) (bytevector-s64-native-ref . G4fb4) (bytevector-s32-set! . G4fb3) (bytevector-s32-ref . G4fb2) (bytevector-s32-native-set! . G4fb1) (bytevector-s32-native-ref . G4fb0) (bytevector-s16-set! . G4faf) (bytevector-s16-ref . G4fae) (bytevector-s16-native-set! . G4fad) (bytevector-s16-native-ref . G4fac) (bytevector-length . G4fab) (bytevector-ieee-single-ref . G4faa) (bytevector-ieee-single-native-set! . G4fa9) (bytevector-ieee-single-native-ref . G4fa8) (bytevector-ieee-double-ref . G4fa7) (bytevector-ieee-double-native-set! . G4fa6) (bytevector-ieee-double-native-ref . G4fa5) (bytevector-fill! . G4fa4) (bytevector-copy! . G4fa3) (bytevector-copy . G4fa2) (bytevector->uint-list . G4fa1) (bytevector->u8-list . G4fa0) (bytevector->sint-list . G4f9f) (no-nans-violation? . G4f9e) (no-infinities-violation? . G4f9d) (make-no-nans-violation . G4f9c) (make-no-infinities-violation . G4f9b) (real->flonum . G4f9a) (flzero? . G4f99) (fltruncate . G4f98) (fltan . G4f97) (flsqrt . G4f96) (flsin . G4f95) (flround . G4f94) (flpositive? . G4f93) (flonum? . G4f92) (flodd? . G4f91) (flnumerator . G4f90) (flnegative? . G4f8f) (flnan? . G4f8e) (flmod0 . G4f8d) (flmod . G4f8c) (flmin . G4f8b) (flmax . G4f8a) (fllog . G4f89) (flinteger? . G4f88) (flinfinite? . G4f87) (flfloor . G4f86) (flfinite? . G4f85) (flexpt . G4f84) (flexp . G4f83) (fleven? . G4f82) (fldiv0-and-mod0 . G4f81) (fldiv0 . G4f80) (fldiv-and-mod . G4f7f) (fldiv . G4f7e) (fldenominator . G4f7d) (flcos . G4f7c) (flceiling . G4f7b) (flatan . G4f7a) (flasin . G4f79) (flacos . G4f78) (flabs . G4f77) (fl>? . G4f76) (fl>=? . G4f75) (fl=? . G4f74) (fl<? . G4f73) (fl<=? . G4f72) (fl/ . G4f71) (fl- . G4f70) (fl+ . G4f6f) (fl* . G4f6e) (fixnum->flonum . G4f6d) (fxzero? . G4f6c) (fxxor . G4f6b) (fxrotate-bit-field . G4f6a) (fxreverse-bit-field . G4f69) (fxpositive? . G4f68) (fxodd? . G4f67) (fxnot . G4f66) (fxnegative? . G4f65) (fxmod0 . G4f64) (fxmod . G4f63) (fxmin . G4f62) (fxmax . G4f61) (fxlength . G4f60) (fxior . G4f5f) (fxif . G4f5e) (fxfirst-bit-set . G4f5d) (fxeven? . G4f5c) (fxdiv0-and-mod0 . G4f5b) (fxdiv0 . G4f5a) (fxdiv-and-mod . G4f59) (fxdiv . G4f58) (fxcopy-bit-field . G4f57) (fxcopy-bit . G4f56) (fxbit-set? . G4f55) (fxbit-field . G4f54) (fxbit-count . G4f53) (fxarithmetic-shift-right . G4f52) (fxarithmetic-shift-left . G4f51) (fxarithmetic-shift . G4f50) (fxand . G4f4f) (fx>? . G4f4e) (fx>=? . G4f4d) (fx=? . G4f4c) (fx<? . G4f4b) (fx<=? . G4f4a) (fx-/carry . G4f49) (fx- . G4f48) (fx+/carry . G4f47) (fx+ . G4f46) (fx*/carry . G4f45) (fx* . G4f44) (greatest-fixnum . G4f43) (least-fixnum . G4f42) (fixnum-width . G4f41) (fixnum? . G4f40) (bitwise-rotate-bit-field . G4f3f) (bitwise-reverse-bit-field . G4f3e) (bitwise-length . G4f3d) (bitwise-if . G4f3c) (bitwise-first-bit-set . G4f3b) (bitwise-copy-bit-field . G4f3a) (bitwise-copy-bit . G4f39) (bitwise-bit-set? . G4f38) (bitwise-bit-field . G4f37) (bitwise-bit-count . G4f36) (bitwise-xor . G4f35) (bitwise-ior . G4f34) (bitwise-and . G4f33) (bitwise-not . G4f32) (bitwise-arithmetic-shift-right . G4f31) (bitwise-arithmetic-shift-left . G4f30) (bitwise-arithmetic-shift . G4f2f) (zero? . G4f2e) (vector? . G4f2d) (vector-set! . G4f2c) (vector-ref . G4f2b) (vector-map . G4f2a) (vector-length . G4f29) (vector-for-each . G4f28) (vector-fill! . G4f27) (vector->list . G4f26) (vector . G4f25) (values . G4f24) (truncate . G4f23) (tan . G4f22) (symbol? . G4f21) (symbol=? . G4f20) (symbol->string . G4f1f) (substring . G4f1e) (string? . G4f1d) (string>? . G4f1c) (string>=? . G4f1b) (string=? . G4f1a) (string<? . G4f19) (string<=? . G4f18) (string-ref . G4f17) (string-length . G4f16) (string-for-each . G4f15) (string-copy . G4f14) (string-append . G4f13) (string->symbol . G4f12) (string->number . G4f11) (string->list . G4f10) (string . G4f0f) (sqrt . G4f0e) (sin . G4f0d) (round . G4f0c) (reverse . G4f0b) (real? . G4f0a) (real-valued? . G4f09) (real-part . G4f08) (rationalize . G4f07) (rational? . G4f06) (rational-valued? . G4f05) (procedure? . G4f04) (positive? . G4f03) (pair? . G4f02) (odd? . G4f01) (numerator . G4f00) (number? . G4eff) (number->string . G4efe) (null? . G4efd) (not . G4efc) (negative? . G4efb) (nan? . G4efa) (min . G4ef9) (max . G4ef8) (map . G4ef7) (make-vector . G4ef6) (make-string . G4ef5) (make-rectangular . G4ef4) (make-polar . G4ef3) (magnitude . G4ef2) (log . G4ef1) (list? . G4ef0) (list-tail . G4eef) (list-ref . G4eee) (list->vector . G4eed) (list->string . G4eec) (list . G4eeb) (length . G4eea) (lcm . G4ee9) (integer? . G4ee8) (integer-valued? . G4ee7) (integer->char . G4ee6) (infinite? . G4ee5) (inexact? . G4ee4) (inexact . G4ee3) (imag-part . G4ee2) (gcd . G4ee1) (for-each . G4ee0) (floor . G4edf) (finite? . G4ede) (expt . G4edd) (exp . G4edc) (exact? . G4edb) (exact-integer-sqrt . G4eda) (exact . G4ed9) (even? . G4ed8) (error . G4ed7) (eqv? . G4ed6) (equal? . G4ed5) (eq? . G4ed4) (dynamic-wind . G4ed3) (div0-and-mod0 . G4ed2) (mod0 . G4ed1) (div0 . G4ed0) (div-and-mod . G4ecf) (mod . G4ece) (div . G4ecd) (denominator . G4ecc) (cos . G4ecb) (cons . G4eca) (complex? . G4ec9) (char? . G4ec8) (char>? . G4ec7) (char>=? . G4ec6) (char=? . G4ec5) (char<? . G4ec4) (char<=? . G4ec3) (char->integer . G4ec2) (ceiling . G4ec1) (call-with-values . G4ec0) (call/cc . G4ebf) (call-with-current-continuation . G4ebe) (cddddr . G4ebd) (cdddar . G4ebc) (cddadr . G4ebb) (cddaar . G4eba) (cdaddr . G4eb9) (cdadar . G4eb8) (cdaadr . G4eb7) (cdaaar . G4eb6) (cadddr . G4eb5) (caddar . G4eb4) (cadadr . G4eb3) (cadaar . G4eb2) (caaddr . G4eb1) (caadar . G4eb0) (caaadr . G4eaf) (caaaar . G4eae) (cdddr . G4ead) (cddar . G4eac) (cdadr . G4eab) (cdaar . G4eaa) (caddr . G4ea9) (cadar . G4ea8) (caadr . G4ea7) (caaar . G4ea6) (cddr . G4ea5) (cdar . G4ea4) (cadr . G4ea3) (caar . G4ea2) (cdr . G4ea1) (car . G4ea0) (boolean? . G4e9f) (boolean=? . G4e9e) (atan . G4e9d) (assertion-violation . G4e9c) (asin . G4e9b) (apply . G4e9a) (append . G4e99) (angle . G4e98) (acos . G4e97) (abs . G4e96) (/ . G4e95) (* . G4e94) (- . G4e93) (+ . G4e92) (>= . G4e91) (> . G4e90) (= . G4e8f) (<= . G4e8e) (< . G4e8d) (&no-nans . G4e8a) (&no-infinities . G4e89) (&i/o-encoding . G4e88) (&i/o-decoding . G4e87) (&i/o-port . G4e86) (&i/o-file-does-not-exist . G4e85) (&i/o-file-already-exists . G4e84) (&i/o-file-is-read-only . G4e83) (&i/o-file-protection . G4e82) (&i/o-filename . G4e81) (&i/o-invalid-position . G4e80) (&i/o-write . G4e7f) (&i/o-read . G4e7e) (&i/o . G4e7d) (&undefined . G4e7c) (&syntax . G4e7b) (&lexical . G4e7a) (&implementation-restriction . G4e79) (&non-continuable . G4e78) (&who . G4e77) (&irritants . G4e76) (&assertion . G4e75) (&violation . G4e74) (&error . G4e73) (&serious . G4e72) (&warning . G4e71) (&message . G4e70) (&condition . G4e6f) (define-condition-type . G4e6e) (define-enumeration . G4e6d) (define-record-type . G4e6c) (parent-rtd . G4e6b) (nongenerative . G4e6a) (opaque . G4e69) (sealed . G4e68) (protocol . G4e67) (parent . G4e66) (immutable . G4e65) (mutable . G4e64) (fields . G4e63) (error-handling-mode . G4e62) (file-options . G4e61) (buffer-mode . G4e60) (eol-style . G4e5f) (guard . G4e5e) (unsyntax-splicing . G4e5b) (unsyntax . G4e5a) (unquote-splicing . G4e59) (unquote . G4e58) (_ . G4e57) (else . G4e56) (=> . G4e55) (... . G4e54) (assert . G4e53) (endianness . G4e52) (or . G4e4f) (and . G4e4e) (do . G4e4d) (cond . G4e4c) (let* . G4e4b) (let . G4e4a) (let*-values . G4e49) (let-values . G4e48) (identifier-syntax . G4e47) (with-syntax . G4e46) (quasisyntax . G4e45) (quasiquote . G4e44) (syntax-rules . G4e43) (record-constructor-descriptor . G4e40) (record-type-descriptor . G4e3f) (case . G4e3e) (unless . G4e3c) (when . G4e3b) (if . G4e3a) (letrec* . G4e39) (letrec . G4e38) (case-lambda . G4e36) (lambda . G4e35) (syntax . G4e34) (syntax-case . G4e33) (quote . G4e32) (letrec-syntax . G4e30) (let-syntax . G4e2f) (set! . G4e2e) (begin . G4e2c) (define-syntax . G4e2a) (define . G4e29)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G512b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G312b) (quotient . G5011) (null-environment . G3129) (remainder . G5010) (modulo . G500f) (inexact->exact . G500e) (force . G500d) (exact->inexact . G500c) (delay . G4e51)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G512c '(rnrs control) '(6) '() '() '() '((do . G4e4d) (unless . G4e3c) (when . G4e3b) (case-lambda . G4e36)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G512d '(rnrs eval) '(6) '() '() '() '((eval . G312f) (environment . G3127)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G512e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G5008) (set-car! . G5007)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G512f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G500a) (string-set! . G5009)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5130 '(rnrs programs) '(6) '() '() '() '((exit . G500b) (command-line . G4d8f)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5131 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2e5c) (identifier? . G3153) (generate-temporaries . G313d) (free-identifier=? . G313f) (syntax->datum . G3157) (datum->syntax . G3155) (bound-identifier=? . G3141) (syntax-violation . G3151) (unsyntax-splicing . G4e5b) (unsyntax . G4e5a) (_ . G4e57) (... . G4e54) (with-syntax . G4e46) (quasisyntax . G4e45) (syntax . G4e34) (syntax-case . G4e33)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5132 '(rnrs files) '(6) '() '() '() '((delete-file . G507a) (file-exists? . G5079) (make-i/o-write-error . G4c6c) (make-i/o-read-error . G4c58) (make-i/o-port-error . G4d03) (make-i/o-invalid-position-error . G4c81) (make-i/o-filename-error . G4c9a) (make-i/o-file-protection-error . G4cb2) (make-i/o-file-is-read-only-error . G4cc6) (make-i/o-file-does-not-exist-error . G4cee) (make-i/o-file-already-exists-error . G4cda) (make-i/o-error . G4c44) (i/o-write-error? . G4c6e) (i/o-read-error? . G4c5a) (i/o-port-error? . G4d07) (i/o-invalid-position-error? . G4c85) (i/o-filename-error? . G4c9e) (i/o-file-protection-error? . G4cb4) (i/o-file-is-read-only-error? . G4cc8) (i/o-file-does-not-exist-error? . G4cf0) (i/o-file-already-exists-error? . G4cdc) (i/o-error? . G4c46) (i/o-error-port . G4d09) (i/o-error-filename . G4ca0) (&i/o-port . G4e86) (&i/o-file-does-not-exist . G4e85) (&i/o-file-already-exists . G4e84) (&i/o-file-is-read-only . G4e83) (&i/o-file-protection . G4e82) (&i/o-filename . G4e81) (&i/o-invalid-position . G4e80) (&i/o-write . G4e7f) (&i/o-read . G4e7e) (&i/o . G4e7d)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5133 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5078) (vector-sort . G5077) (list-sort . G5076)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5134 '(rnrs base) '(6) '() '() '() '((zero? . G4f2e) (vector? . G4f2d) (vector-set! . G4f2c) (vector-ref . G4f2b) (vector-map . G4f2a) (vector-length . G4f29) (vector-for-each . G4f28) (vector-fill! . G4f27) (vector->list . G4f26) (vector . G4f25) (values . G4f24) (truncate . G4f23) (tan . G4f22) (symbol? . G4f21) (symbol=? . G4f20) (symbol->string . G4f1f) (substring . G4f1e) (string? . G4f1d) (string>? . G4f1c) (string>=? . G4f1b) (string=? . G4f1a) (string<? . G4f19) (string<=? . G4f18) (string-ref . G4f17) (string-length . G4f16) (string-for-each . G4f15) (string-copy . G4f14) (string-append . G4f13) (string->symbol . G4f12) (string->number . G4f11) (string->list . G4f10) (string . G4f0f) (sqrt . G4f0e) (sin . G4f0d) (round . G4f0c) (reverse . G4f0b) (real? . G4f0a) (real-valued? . G4f09) (real-part . G4f08) (rationalize . G4f07) (rational? . G4f06) (rational-valued? . G4f05) (procedure? . G4f04) (positive? . G4f03) (pair? . G4f02) (odd? . G4f01) (numerator . G4f00) (number? . G4eff) (number->string . G4efe) (null? . G4efd) (not . G4efc) (negative? . G4efb) (nan? . G4efa) (min . G4ef9) (max . G4ef8) (map . G4ef7) (make-vector . G4ef6) (make-string . G4ef5) (make-rectangular . G4ef4) (make-polar . G4ef3) (magnitude . G4ef2) (log . G4ef1) (list? . G4ef0) (list-tail . G4eef) (list-ref . G4eee) (list->vector . G4eed) (list->string . G4eec) (list . G4eeb) (length . G4eea) (lcm . G4ee9) (integer? . G4ee8) (integer-valued? . G4ee7) (integer->char . G4ee6) (infinite? . G4ee5) (inexact? . G4ee4) (inexact . G4ee3) (imag-part . G4ee2) (gcd . G4ee1) (for-each . G4ee0) (floor . G4edf) (finite? . G4ede) (expt . G4edd) (exp . G4edc) (exact? . G4edb) (exact-integer-sqrt . G4eda) (exact . G4ed9) (even? . G4ed8) (error . G4ed7) (eqv? . G4ed6) (equal? . G4ed5) (eq? . G4ed4) (dynamic-wind . G4ed3) (div0-and-mod0 . G4ed2) (mod0 . G4ed1) (div0 . G4ed0) (div-and-mod . G4ecf) (mod . G4ece) (div . G4ecd) (denominator . G4ecc) (cos . G4ecb) (cons . G4eca) (complex? . G4ec9) (char? . G4ec8) (char>? . G4ec7) (char>=? . G4ec6) (char=? . G4ec5) (char<? . G4ec4) (char<=? . G4ec3) (char->integer . G4ec2) (ceiling . G4ec1) (call-with-values . G4ec0) (call/cc . G4ebf) (call-with-current-continuation . G4ebe) (cddddr . G4ebd) (cdddar . G4ebc) (cddadr . G4ebb) (cddaar . G4eba) (cdaddr . G4eb9) (cdadar . G4eb8) (cdaadr . G4eb7) (cdaaar . G4eb6) (cadddr . G4eb5) (caddar . G4eb4) (cadadr . G4eb3) (cadaar . G4eb2) (caaddr . G4eb1) (caadar . G4eb0) (caaadr . G4eaf) (caaaar . G4eae) (cdddr . G4ead) (cddar . G4eac) (cdadr . G4eab) (cdaar . G4eaa) (caddr . G4ea9) (cadar . G4ea8) (caadr . G4ea7) (caaar . G4ea6) (cddr . G4ea5) (cdar . G4ea4) (cadr . G4ea3) (caar . G4ea2) (cdr . G4ea1) (car . G4ea0) (boolean? . G4e9f) (boolean=? . G4e9e) (atan . G4e9d) (assertion-violation . G4e9c) (asin . G4e9b) (apply . G4e9a) (append . G4e99) (angle . G4e98) (acos . G4e97) (abs . G4e96) (/ . G4e95) (* . G4e94) (- . G4e93) (+ . G4e92) (>= . G4e91) (> . G4e90) (= . G4e8f) (<= . G4e8e) (< . G4e8d) (unquote-splicing . G4e59) (unquote . G4e58) (_ . G4e57) (else . G4e56) (=> . G4e55) (... . G4e54) (assert . G4e53) (or . G4e4f) (and . G4e4e) (cond . G4e4c) (let* . G4e4b) (let . G4e4a) (let*-values . G4e49) (let-values . G4e48) (identifier-syntax . G4e47) (quasiquote . G4e44) (syntax-rules . G4e43) (case . G4e3e) (if . G4e3a) (letrec* . G4e39) (letrec . G4e38) (lambda . G4e35) (quote . G4e32) (letrec-syntax . G4e30) (let-syntax . G4e2f) (set! . G4e2e) (begin . G4e2c) (define-syntax . G4e2a) (define . G4e29)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5135 '(rnrs lists) '(6) '() '() '() '((remove . G5006) (remv . G5005) (remp . G5004) (remq . G5003) (partition . G5002) (memv . G5001) (memq . G5000) (memp . G4fff) (member . G4ffe) (exists . G4ffd) (for-all . G4ffc) (fold-right . G4ffb) (fold-left . G4ffa) (find . G4ff9) (filter . G4ff8) (cons* . G4ff7) (assv . G4ff6) (assq . G4ff5) (assp . G4ff4) (assoc . G4ff3)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5136 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5060) (call-with-input-file . G505f) (write-char . G505e) (write . G505d) (with-output-to-file . G505c) (with-input-from-file . G505b) (read-char . G505a) (read . G5059) (peek-char . G5058) (open-output-file . G5057) (open-input-file . G5056) (newline . G5055) (display . G5054) (close-output-port . G5053) (close-input-port . G5052) (eof-object? . G5051) (eof-object . G5050) (current-error-port . G504f) (current-output-port . G504e) (current-input-port . G504d) (output-port? . G504c) (input-port? . G504b) (make-i/o-write-error . G4c6c) (make-i/o-read-error . G4c58) (make-i/o-port-error . G4d03) (make-i/o-invalid-position-error . G4c81) (make-i/o-filename-error . G4c9a) (make-i/o-file-protection-error . G4cb2) (make-i/o-file-is-read-only-error . G4cc6) (make-i/o-file-does-not-exist-error . G4cee) (make-i/o-file-already-exists-error . G4cda) (make-i/o-error . G4c44) (i/o-write-error? . G4c6e) (i/o-read-error? . G4c5a) (i/o-port-error? . G4d07) (i/o-invalid-position-error? . G4c85) (i/o-filename-error? . G4c9e) (i/o-file-protection-error? . G4cb4) (i/o-file-is-read-only-error? . G4cc8) (i/o-file-does-not-exist-error? . G4cf0) (i/o-file-already-exists-error? . G4cdc) (i/o-error? . G4c46) (i/o-error-port . G4d09) (i/o-error-filename . G4ca0) (&i/o-port . G4e86) (&i/o-file-does-not-exist . G4e85) (&i/o-file-already-exists . G4e84) (&i/o-file-is-read-only . G4e83) (&i/o-file-protection . G4e82) (&i/o-filename . G4e81) (&i/o-invalid-position . G4e80) (&i/o-write . G4e7f) (&i/o-read . G4e7e) (&i/o . G4e7d)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5137 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G5021) (utf32->string . G4fd7) (utf16->string . G4fd6) (utf8->string . G4fd5) (uint-list->bytevector . G4fd4) (u8-list->bytevector . G4fd3) (string->utf8 . G4fd2) (string->utf32 . G4fd1) (string->utf16 . G4fd0) (sint-list->bytevector . G4fcf) (native-endianness . G4fce) (bytevector? . G4fcd) (bytevector=? . G4fcc) (bytevector-uint-set! . G4fcb) (bytevector-uint-ref . G4fca) (bytevector-u8-set! . G4fc9) (bytevector-u8-ref . G4fc8) (bytevector-u64-set! . G4fc7) (bytevector-u64-ref . G4fc6) (bytevector-u64-native-set! . G4fc5) (bytevector-u64-native-ref . G4fc4) (bytevector-u32-set! . G4fc3) (bytevector-u32-ref . G4fc2) (bytevector-u32-native-set! . G4fc1) (bytevector-u32-native-ref . G4fc0) (bytevector-u16-set! . G4fbf) (bytevector-u16-ref . G4fbe) (bytevector-u16-native-set! . G4fbd) (bytevector-u16-native-ref . G4fbc) (bytevector-sint-set! . G4fbb) (bytevector-sint-ref . G4fba) (bytevector-s8-set! . G4fb9) (bytevector-s8-ref . G4fb8) (bytevector-s64-set! . G4fb7) (bytevector-s64-ref . G4fb6) (bytevector-s64-native-set! . G4fb5) (bytevector-s64-native-ref . G4fb4) (bytevector-s32-set! . G4fb3) (bytevector-s32-ref . G4fb2) (bytevector-s32-native-set! . G4fb1) (bytevector-s32-native-ref . G4fb0) (bytevector-s16-set! . G4faf) (bytevector-s16-ref . G4fae) (bytevector-s16-native-set! . G4fad) (bytevector-s16-native-ref . G4fac) (bytevector-length . G4fab) (bytevector-ieee-single-ref . G4faa) (bytevector-ieee-single-native-set! . G4fa9) (bytevector-ieee-single-native-ref . G4fa8) (bytevector-ieee-double-ref . G4fa7) (bytevector-ieee-double-native-set! . G4fa6) (bytevector-ieee-double-native-ref . G4fa5) (bytevector-fill! . G4fa4) (bytevector-copy! . G4fa3) (bytevector-copy . G4fa2) (bytevector->uint-list . G4fa1) (bytevector->u8-list . G4fa0) (bytevector->sint-list . G4f9f) (endianness . G4e52)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5138 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G50a8) (string-titlecase . G50a7) (string-normalize-nfkd . G50a6) (string-normalize-nfkc . G50a5) (string-normalize-nfd . G50a4) (string-normalize-nfc . G50a3) (string-foldcase . G50a2) (string-downcase . G50a1) (string-ci>? . G50a0) (string-ci>=? . G509f) (string-ci=? . G509e) (string-ci<? . G509d) (string-ci<=? . G509c) (char-whitespace? . G509b) (char-upper-case? . G509a) (char-title-case? . G5099) (char-numeric? . G5098) (char-lower-case? . G5097) (char-general-category . G5096) (char-upcase . G5095) (char-titlecase . G5094) (char-foldcase . G5093) (char-downcase . G5092) (char-ci>? . G5091) (char-ci>=? . G5090) (char-ci=? . G508f) (char-ci<? . G508e) (char-ci<=? . G508d) (char-alphabetic? . G508c)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5139 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4fec) (raise-continuable . G4feb) (raise . G4fea) (guard . G4e5e) (else . G4e56) (=> . G4e55)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G513a '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4f3f) (bitwise-reverse-bit-field . G4f3e) (bitwise-length . G4f3d) (bitwise-if . G4f3c) (bitwise-first-bit-set . G4f3b) (bitwise-copy-bit-field . G4f3a) (bitwise-copy-bit . G4f39) (bitwise-bit-set? . G4f38) (bitwise-bit-field . G4f37) (bitwise-bit-count . G4f36) (bitwise-xor . G4f35) (bitwise-ior . G4f34) (bitwise-and . G4f33) (bitwise-not . G4f32) (bitwise-arithmetic-shift-right . G4f31) (bitwise-arithmetic-shift-left . G4f30) (bitwise-arithmetic-shift . G4f2f)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G513b '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f6c) (fxxor . G4f6b) (fxrotate-bit-field . G4f6a) (fxreverse-bit-field . G4f69) (fxpositive? . G4f68) (fxodd? . G4f67) (fxnot . G4f66) (fxnegative? . G4f65) (fxmod0 . G4f64) (fxmod . G4f63) (fxmin . G4f62) (fxmax . G4f61) (fxlength . G4f60) (fxior . G4f5f) (fxif . G4f5e) (fxfirst-bit-set . G4f5d) (fxeven? . G4f5c) (fxdiv0-and-mod0 . G4f5b) (fxdiv0 . G4f5a) (fxdiv-and-mod . G4f59) (fxdiv . G4f58) (fxcopy-bit-field . G4f57) (fxcopy-bit . G4f56) (fxbit-set? . G4f55) (fxbit-field . G4f54) (fxbit-count . G4f53) (fxarithmetic-shift-right . G4f52) (fxarithmetic-shift-left . G4f51) (fxarithmetic-shift . G4f50) (fxand . G4f4f) (fx>? . G4f4e) (fx>=? . G4f4d) (fx=? . G4f4c) (fx<? . G4f4b) (fx<=? . G4f4a) (fx-/carry . G4f49) (fx- . G4f48) (fx+/carry . G4f47) (fx+ . G4f46) (fx*/carry . G4f45) (fx* . G4f44) (greatest-fixnum . G4f43) (least-fixnum . G4f42) (fixnum-width . G4f41) (fixnum? . G4f40)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G513c '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4f9e) (no-infinities-violation? . G4f9d) (make-no-nans-violation . G4f9c) (make-no-infinities-violation . G4f9b) (real->flonum . G4f9a) (flzero? . G4f99) (fltruncate . G4f98) (fltan . G4f97) (flsqrt . G4f96) (flsin . G4f95) (flround . G4f94) (flpositive? . G4f93) (flonum? . G4f92) (flodd? . G4f91) (flnumerator . G4f90) (flnegative? . G4f8f) (flnan? . G4f8e) (flmod0 . G4f8d) (flmod . G4f8c) (flmin . G4f8b) (flmax . G4f8a) (fllog . G4f89) (flinteger? . G4f88) (flinfinite? . G4f87) (flfloor . G4f86) (flfinite? . G4f85) (flexpt . G4f84) (flexp . G4f83) (fleven? . G4f82) (fldiv0-and-mod0 . G4f81) (fldiv0 . G4f80) (fldiv-and-mod . G4f7f) (fldiv . G4f7e) (fldenominator . G4f7d) (flcos . G4f7c) (flceiling . G4f7b) (flatan . G4f7a) (flasin . G4f79) (flacos . G4f78) (flabs . G4f77) (fl>? . G4f76) (fl>=? . G4f75) (fl=? . G4f74) (fl<? . G4f73) (fl<=? . G4f72) (fl/ . G4f71) (fl- . G4f70) (fl+ . G4f6f) (fl* . G4f6e) (fixnum->flonum . G4f6d) (&no-nans . G4e8a) (&no-infinities . G4e89)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G513d '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5075) (string-ci-hash . G5074) (string-hash . G5073) (equal-hash . G5072) (hashtable-equivalence-function . G5071) (make-hashtable . G5070) (hashtable-hash-function . G506f) (make-eqv-hashtable . G506e) (make-eq-hashtable . G506d) (hashtable? . G506c) (hashtable-update! . G506b) (hashtable-size . G506a) (hashtable-set! . G5069) (hashtable-ref . G5068) (hashtable-mutable? . G5067) (hashtable-keys . G5066) (hashtable-entries . G5065) (hashtable-delete! . G5064) (hashtable-copy . G5063) (hashtable-contains? . G5062) (hashtable-clear! . G5061)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G513e '(rnrs io ports) '(6) '() '() '() '((eof-object? . G5051) (eof-object . G5050) (current-error-port . G504f) (current-output-port . G504e) (current-input-port . G504d) (output-port? . G504c) (input-port? . G504b) (utf-8-codec . G504a) (utf-16-codec . G5049) (transcoder-error-handling-mode . G5048) (transcoder-eol-style . G5047) (transcoder-codec . G5046) (transcoded-port . G5045) (textual-port? . G5044) (string->bytevector . G5043) (standard-output-port . G5042) (standard-input-port . G5041) (standard-error-port . G5040) (set-port-position! . G503f) (put-u8 . G503e) (put-string . G503d) (put-datum . G503c) (put-char . G503b) (put-bytevector . G503a) (port? . G5039) (port-transcoder . G5038) (port-position . G5037) (port-has-set-port-position!? . G5036) (port-has-port-position? . G5035) (port-eof? . G5034) (output-port-buffer-mode . G5033) (open-string-output-port . G5032) (open-string-input-port . G5031) (open-file-output-port . G5030) (open-file-input/output-port . G502f) (open-file-input-port . G502e) (open-bytevector-output-port . G502d) (open-bytevector-input-port . G502c) (native-transcoder . G502b) (native-eol-style . G502a) (make-transcoder . G5029) (latin-1-codec . G5028) (make-i/o-write-error . G4c6c) (make-i/o-read-error . G4c58) (make-i/o-port-error . G4d03) (make-i/o-invalid-position-error . G4c81) (make-i/o-filename-error . G4c9a) (make-i/o-file-protection-error . G4cb2) (make-i/o-file-is-read-only-error . G4cc6) (make-i/o-file-does-not-exist-error . G4cee) (make-i/o-file-already-exists-error . G4cda) (make-i/o-error . G4c44) (make-i/o-encoding-error . G4d30) (make-i/o-decoding-error . G4d1b) (make-custom-textual-output-port . G5027) (make-custom-textual-input/output-port . G5026) (make-custom-textual-input-port . G5025) (make-custom-binary-output-port . G5024) (make-custom-binary-input/output-port . G5023) (make-custom-binary-input-port . G5022) (lookahead-u8 . G5020) (lookahead-char . G501f) (i/o-write-error? . G4c6e) (i/o-read-error? . G4c5a) (i/o-port-error? . G4d07) (i/o-invalid-position-error? . G4c85) (i/o-filename-error? . G4c9e) (i/o-file-protection-error? . G4cb4) (i/o-file-is-read-only-error? . G4cc8) (i/o-file-does-not-exist-error? . G4cf0) (i/o-file-already-exists-error? . G4cdc) (i/o-error? . G4c46) (i/o-error-port . G4d09) (i/o-error-filename . G4ca0) (i/o-encoding-error? . G4d34) (i/o-encoding-error-char . G4d36) (i/o-decoding-error? . G4d1d) (get-u8 . G501e) (get-string-n! . G501d) (get-string-n . G501c) (get-string-all . G501b) (get-line . G501a) (get-datum . G5019) (get-char . G5018) (get-bytevector-some . G5017) (get-bytevector-n! . G5016) (get-bytevector-n . G5015) (get-bytevector-all . G5014) (flush-output-port . G5013) (close-port . G5012) (call-with-string-output-port . G4ff2) (call-with-port . G4ff1) (call-with-bytevector-output-port . G4ff0) (bytevector->string . G4fef) (buffer-mode? . G4fee) (binary-port? . G4fed) (&i/o-encoding . G4e88) (&i/o-decoding . G4e87) (&i/o-port . G4e86) (&i/o-file-does-not-exist . G4e85) (&i/o-file-already-exists . G4e84) (&i/o-file-is-read-only . G4e83) (&i/o-file-protection . G4e82) (&i/o-filename . G4e81) (&i/o-invalid-position . G4e80) (&i/o-write . G4e7f) (&i/o-read . G4e7e) (&i/o . G4e7d) (error-handling-mode . G4e62) (file-options . G4e61) (buffer-mode . G4e60) (eol-style . G4e5f)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G513f '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4fe9) (enum-set=? . G4fe8) (enum-set-universe . G4fe7) (enum-set-union . G4fe6) (enum-set-subset? . G4fe5) (enum-set-projection . G4fe4) (enum-set-member? . G4fe3) (enum-set-intersection . G4fe2) (enum-set-indexer . G4fe1) (enum-set-difference . G4fe0) (enum-set-constructor . G4fdf) (enum-set-complement . G4fde) (enum-set->list . G4fdd) (define-enumeration . G4e6d)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5140 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4b62) (warning? . G4ae2) (violation? . G4b1e) (undefined-violation? . G4bd2) (syntax-violation? . G4bba) (syntax-violation-subform . G4bbe) (syntax-violation-form . G4bbc) (syntax-violation . G3151) (simple-conditions . G4fdc) (serious-condition? . G4af6) (non-continuable-violation? . G4b78) (message-condition? . G4acc) (make-who-condition . G4b5e) (make-warning . G4ae0) (make-violation . G4b1c) (make-undefined-violation . G4bd0) (make-syntax-violation . G4bb4) (make-serious-condition . G4af4) (make-non-continuable-violation . G4b76) (make-message-condition . G4ac8) (make-lexical-violation . G4b9e) (make-irritants-condition . G4b45) (make-implementation-restriction-violation . G4b8a) (make-error . G4b08) (make-assertion-violation . G4b30) (lexical-violation? . G4ba0) (irritants-condition? . G4b49) (implementation-restriction-violation? . G4b8c) (error? . G4b0a) (condition-who . G4b64) (condition-predicate . G4fdb) (condition-message . G4ace) (condition-irritants . G4b4b) (condition-accessor . G4fda) (condition . G4fd9) (assertion-violation? . G4b32) (condition? . G4fd8) (&undefined . G4e7c) (&syntax . G4e7b) (&lexical . G4e7a) (&implementation-restriction . G4e79) (&non-continuable . G4e78) (&who . G4e77) (&irritants . G4e76) (&assertion . G4e75) (&violation . G4e74) (&error . G4e73) (&serious . G4e72) (&warning . G4e71) (&message . G4e70) (&condition . G4e6f) (define-condition-type . G4e6e)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5141 '(rnrs records inspection) '(6) '() '() '() '((record? . G5084) (record-type-uid . G5083) (record-type-sealed? . G5082) (record-type-parent . G5081) (record-type-opaque? . G5080) (record-type-name . G507f) (record-type-generative? . G507e) (record-type-field-names . G507d) (record-rtd . G507c) (record-field-mutable? . G507b)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5142 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G508b) (record-predicate . G508a) (record-mutator . G5089) (record-constructor . G5088) (record-accessor . G5087) (make-record-type-descriptor . G5086) (make-record-constructor-descriptor . G5085)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5143 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e6c) (parent-rtd . G4e6b) (nongenerative . G4e6a) (opaque . G4e69) (sealed . G4e68) (protocol . G4e67) (parent . G4e66) (immutable . G4e65) (mutable . G4e64) (fields . G4e63) (record-constructor-descriptor . G4e40) (record-type-descriptor . G4e3f)) '() values values '#f '#f '#t '#f) (G2c0f@G2aa2@install-library 'G5144 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G5124) (&no-nans-rtd . G5123) (&no-infinities-rcd . G5122) (&no-infinities-rtd . G5121) (&i/o-encoding-rcd . G5120) (&i/o-encoding-rtd . G511f) (&i/o-decoding-rcd . G511e) (&i/o-decoding-rtd . G511d) (&i/o-port-rcd . G511c) (&i/o-port-rtd . G511b) (&i/o-file-does-not-exist-rcd . G511a) (&i/o-file-does-not-exist-rtd . G5119) (&i/o-file-already-exists-rcd . G5118) (&i/o-file-already-exists-rtd . G5117) (&i/o-file-is-read-only-rcd . G5116) (&i/o-file-is-read-only-rtd . G5115) (&i/o-file-protection-rcd . G5114) (&i/o-file-protection-rtd . G5113) (&i/o-filename-rcd . G5112) (&i/o-filename-rtd . G5111) (&i/o-invalid-position-rcd . G5110) (&i/o-invalid-position-rtd . G510f) (&i/o-write-rcd . G510e) (&i/o-write-rtd . G510d) (&i/o-read-rcd . G510c) (&i/o-read-rtd . G510b) (&i/o-rcd . G510a) (&i/o-rtd . G5109) (&undefined-rcd . G5108) (&undefined-rtd . G5107) (&syntax-rcd . G5106) (&syntax-rtd . G5105) (&lexical-rcd . G5104) (&lexical-rtd . G5103) (&implementation-restriction-rcd . G5102) (&implementation-restriction-rtd . G5101) (&non-continuable-rcd . G5100) (&non-continuable-rtd . G50ff) (&who-rcd . G50fe) (&who-rtd . G50fd) (&irritants-rcd . G50fc) (&irritants-rtd . G50fb) (&assertion-rcd . G50fa) (&assertion-rtd . G50f9) (&violation-rcd . G50f8) (&violation-rtd . G50f7) (&error-rcd . G50f6) (&error-rtd . G50f5) (&serious-rcd . G50f4) (&serious-rtd . G50f3) (&warning-rcd . G50f2) (&warning-rtd . G50f1) (&message-rcd . G50f0) (&message-rtd . G50ef) (&condition-rcd . G50ee) (&condition-rtd . G50ed) (syntax-error . G314b) (syntax-dispatch . G305e) (pretty-print . G50ec) (eval-core . G50eb) (set-symbol-value! . G50ea) (symbol-value . G50e9) (gensym . G50e8) (void . G50e7) (load . G4d95) (interaction-environment . G315d) (char-ready? . G50e6) (regexp? . G50e5) (read-line . G50e4) (dotted-list? . G50e3) (circular-list? . G50e2) (proper-list? . G50e1) (circular-list . G50e0) (last . G50df) (last-pair . G50de) (not-pair? . G50dd) (split-at! . G50dc) (split-at . G50db) (list= . G50da) (list-copy . G50d9) (list-tabulate . G50d8) (make-list . G50d7) (xcons . G50d6) (tenth . G50d5) (ninth . G50d4) (eighth . G50d3) (seventh . G50d2) (sixth . G50d1) (fifth . G50d0) (drop-right! . G50cf) (drop-right . G50ce) (take-right . G50cd) (take! . G50cc) (drop . G50cb) (take . G50ca) (car+cdr . G50c9) (third . G50c8) (second . G50c7) (first . G50c6) (assoc-ref . G50c5) (alist-cons . G50c4) (print . G50c3) (format . G50c2) (standard-library-path . G50c1) (current-directory . G50c0) (write-to-file . G50bf) (file->list . G50be) (file->string . G50bd) (digit->integer . G50bc) (call-with-string-input-port . G50bb) (call-with-string-io . G50ba) (string-split . G50b9) (bytevector-for-each . G50b8) (string->regexp . G50b7) (rxmatch . G50b6) (regexp-replace-all . G50b5) (hashtable-for-each . G50b4) (readdir . G50b3) (get-environment-variables . G50b2) (get-environment-variable . G50b1) (get-command-line . G50b0) (sys-display . G50af) (source-info . G50ae) (make-compiler-instruction . G50ad) (make-instruction . G50ac) (set-source-info! . G50ab) (fasl-write . G50aa) (receive . G50a9) (string-upcase . G50a8) (string-titlecase . G50a7) (string-normalize-nfkd . G50a6) (string-normalize-nfkc . G50a5) (string-normalize-nfd . G50a4) (string-normalize-nfc . G50a3) (string-foldcase . G50a2) (string-downcase . G50a1) (string-ci>? . G50a0) (string-ci>=? . G509f) (string-ci=? . G509e) (string-ci<? . G509d) (string-ci<=? . G509c) (char-whitespace? . G509b) (char-upper-case? . G509a) (char-title-case? . G5099) (char-numeric? . G5098) (char-lower-case? . G5097) (char-general-category . G5096) (char-upcase . G5095) (char-titlecase . G5094) (char-foldcase . G5093) (char-downcase . G5092) (char-ci>? . G5091) (char-ci>=? . G5090) (char-ci=? . G508f) (char-ci<? . G508e) (char-ci<=? . G508d) (char-alphabetic? . G508c) (make-variable-transformer . G2e5c) (identifier? . G3153) (generate-temporaries . G313d) (free-identifier=? . G313f) (syntax->datum . G3157) (datum->syntax . G3155) (bound-identifier=? . G3141) (record-type-descriptor? . G508b) (record-predicate . G508a) (record-mutator . G5089) (record-constructor . G5088) (record-accessor . G5087) (make-record-type-descriptor . G5086) (make-record-constructor-descriptor . G5085) (record? . G5084) (record-type-uid . G5083) (record-type-sealed? . G5082) (record-type-parent . G5081) (record-type-opaque? . G5080) (record-type-name . G507f) (record-type-generative? . G507e) (record-type-field-names . G507d) (record-rtd . G507c) (record-field-mutable? . G507b) (delete-file . G507a) (file-exists? . G5079) (vector-sort! . G5078) (vector-sort . G5077) (list-sort . G5076) (symbol-hash . G5075) (string-ci-hash . G5074) (string-hash . G5073) (equal-hash . G5072) (hashtable-equivalence-function . G5071) (make-hashtable . G5070) (hashtable-hash-function . G506f) (make-eqv-hashtable . G506e) (make-eq-hashtable . G506d) (hashtable? . G506c) (hashtable-update! . G506b) (hashtable-size . G506a) (hashtable-set! . G5069) (hashtable-ref . G5068) (hashtable-mutable? . G5067) (hashtable-keys . G5066) (hashtable-entries . G5065) (hashtable-delete! . G5064) (hashtable-copy . G5063) (hashtable-contains? . G5062) (hashtable-clear! . G5061) (call-with-output-file . G5060) (call-with-input-file . G505f) (write-char . G505e) (write . G505d) (with-output-to-file . G505c) (with-input-from-file . G505b) (read-char . G505a) (read . G5059) (peek-char . G5058) (open-output-file . G5057) (open-input-file . G5056) (newline . G5055) (display . G5054) (close-output-port . G5053) (close-input-port . G5052) (eof-object? . G5051) (eof-object . G5050) (current-error-port . G504f) (current-output-port . G504e) (current-input-port . G504d) (output-port? . G504c) (input-port? . G504b) (utf-8-codec . G504a) (utf-16-codec . G5049) (transcoder-error-handling-mode . G5048) (transcoder-eol-style . G5047) (transcoder-codec . G5046) (transcoded-port . G5045) (textual-port? . G5044) (string->bytevector . G5043) (standard-output-port . G5042) (standard-input-port . G5041) (standard-error-port . G5040) (set-port-position! . G503f) (put-u8 . G503e) (put-string . G503d) (put-datum . G503c) (put-char . G503b) (put-bytevector . G503a) (port? . G5039) (port-transcoder . G5038) (port-position . G5037) (port-has-set-port-position!? . G5036) (port-has-port-position? . G5035) (port-eof? . G5034) (output-port-buffer-mode . G5033) (open-string-output-port . G5032) (open-string-input-port . G5031) (open-file-output-port . G5030) (open-file-input/output-port . G502f) (open-file-input-port . G502e) (open-bytevector-output-port . G502d) (open-bytevector-input-port . G502c) (native-transcoder . G502b) (native-eol-style . G502a) (make-transcoder . G5029) (latin-1-codec . G5028) (make-i/o-write-error . G4c6c) (make-i/o-read-error . G4c58) (make-i/o-port-error . G4d03) (make-i/o-invalid-position-error . G4c81) (make-i/o-filename-error . G4c9a) (make-i/o-file-protection-error . G4cb2) (make-i/o-file-is-read-only-error . G4cc6) (make-i/o-file-does-not-exist-error . G4cee) (make-i/o-file-already-exists-error . G4cda) (make-i/o-error . G4c44) (make-i/o-encoding-error . G4d30) (make-i/o-decoding-error . G4d1b) (make-custom-textual-output-port . G5027) (make-custom-textual-input/output-port . G5026) (make-custom-textual-input-port . G5025) (make-custom-binary-output-port . G5024) (make-custom-binary-input/output-port . G5023) (make-custom-binary-input-port . G5022) (make-bytevector . G5021) (lookahead-u8 . G5020) (lookahead-char . G501f) (i/o-write-error? . G4c6e) (i/o-read-error? . G4c5a) (i/o-port-error? . G4d07) (i/o-invalid-position-error? . G4c85) (i/o-filename-error? . G4c9e) (i/o-file-protection-error? . G4cb4) (i/o-file-is-read-only-error? . G4cc8) (i/o-file-does-not-exist-error? . G4cf0) (i/o-file-already-exists-error? . G4cdc) (i/o-error? . G4c46) (i/o-error-port . G4d09) (i/o-error-filename . G4ca0) (i/o-encoding-error? . G4d34) (i/o-encoding-error-char . G4d36) (i/o-decoding-error? . G4d1d) (get-u8 . G501e) (get-string-n! . G501d) (get-string-n . G501c) (get-string-all . G501b) (get-line . G501a) (get-datum . G5019) (get-char . G5018) (get-bytevector-some . G5017) (get-bytevector-n! . G5016) (get-bytevector-n . G5015) (get-bytevector-all . G5014) (flush-output-port . G5013) (close-port . G5012) (scheme-report-environment . G312b) (quotient . G5011) (null-environment . G3129) (remainder . G5010) (modulo . G500f) (inexact->exact . G500e) (force . G500d) (exact->inexact . G500c) (exit . G500b) (command-line . G4d8f) (string-fill! . G500a) (string-set! . G5009) (set-cdr! . G5008) (set-car! . G5007) (remove . G5006) (remv . G5005) (remp . G5004) (remq . G5003) (partition . G5002) (memv . G5001) (memq . G5000) (memp . G4fff) (member . G4ffe) (exists . G4ffd) (for-all . G4ffc) (fold-right . G4ffb) (fold-left . G4ffa) (find . G4ff9) (filter . G4ff8) (cons* . G4ff7) (assv . G4ff6) (assq . G4ff5) (assp . G4ff4) (assoc . G4ff3) (call-with-string-output-port . G4ff2) (call-with-port . G4ff1) (call-with-bytevector-output-port . G4ff0) (bytevector->string . G4fef) (buffer-mode? . G4fee) (binary-port? . G4fed) (with-exception-handler . G4fec) (raise-continuable . G4feb) (raise . G4fea) (eval . G312f) (environment . G3127) (make-enumeration . G4fe9) (enum-set=? . G4fe8) (enum-set-universe . G4fe7) (enum-set-union . G4fe6) (enum-set-subset? . G4fe5) (enum-set-projection . G4fe4) (enum-set-member? . G4fe3) (enum-set-intersection . G4fe2) (enum-set-indexer . G4fe1) (enum-set-difference . G4fe0) (enum-set-constructor . G4fdf) (enum-set-complement . G4fde) (enum-set->list . G4fdd) (who-condition? . G4b62) (warning? . G4ae2) (violation? . G4b1e) (undefined-violation? . G4bd2) (syntax-violation? . G4bba) (syntax-violation-subform . G4bbe) (syntax-violation-form . G4bbc) (syntax-violation . G3151) (simple-conditions . G4fdc) (serious-condition? . G4af6) (non-continuable-violation? . G4b78) (message-condition? . G4acc) (make-who-condition . G4b5e) (make-warning . G4ae0) (make-violation . G4b1c) (make-undefined-violation . G4bd0) (make-syntax-violation . G4bb4) (make-serious-condition . G4af4) (make-non-continuable-violation . G4b76) (make-message-condition . G4ac8) (make-lexical-violation . G4b9e) (make-irritants-condition . G4b45) (make-implementation-restriction-violation . G4b8a) (make-error . G4b08) (make-assertion-violation . G4b30) (lexical-violation? . G4ba0) (irritants-condition? . G4b49) (implementation-restriction-violation? . G4b8c) (error? . G4b0a) (condition-who . G4b64) (condition-predicate . G4fdb) (condition-message . G4ace) (condition-irritants . G4b4b) (condition-accessor . G4fda) (condition . G4fd9) (assertion-violation? . G4b32) (condition? . G4fd8) (utf32->string . G4fd7) (utf16->string . G4fd6) (utf8->string . G4fd5) (uint-list->bytevector . G4fd4) (u8-list->bytevector . G4fd3) (string->utf8 . G4fd2) (string->utf32 . G4fd1) (string->utf16 . G4fd0) (sint-list->bytevector . G4fcf) (native-endianness . G4fce) (bytevector? . G4fcd) (bytevector=? . G4fcc) (bytevector-uint-set! . G4fcb) (bytevector-uint-ref . G4fca) (bytevector-u8-set! . G4fc9) (bytevector-u8-ref . G4fc8) (bytevector-u64-set! . G4fc7) (bytevector-u64-ref . G4fc6) (bytevector-u64-native-set! . G4fc5) (bytevector-u64-native-ref . G4fc4) (bytevector-u32-set! . G4fc3) (bytevector-u32-ref . G4fc2) (bytevector-u32-native-set! . G4fc1) (bytevector-u32-native-ref . G4fc0) (bytevector-u16-set! . G4fbf) (bytevector-u16-ref . G4fbe) (bytevector-u16-native-set! . G4fbd) (bytevector-u16-native-ref . G4fbc) (bytevector-sint-set! . G4fbb) (bytevector-sint-ref . G4fba) (bytevector-s8-set! . G4fb9) (bytevector-s8-ref . G4fb8) (bytevector-s64-set! . G4fb7) (bytevector-s64-ref . G4fb6) (bytevector-s64-native-set! . G4fb5) (bytevector-s64-native-ref . G4fb4) (bytevector-s32-set! . G4fb3) (bytevector-s32-ref . G4fb2) (bytevector-s32-native-set! . G4fb1) (bytevector-s32-native-ref . G4fb0) (bytevector-s16-set! . G4faf) (bytevector-s16-ref . G4fae) (bytevector-s16-native-set! . G4fad) (bytevector-s16-native-ref . G4fac) (bytevector-length . G4fab) (bytevector-ieee-single-ref . G4faa) (bytevector-ieee-single-native-set! . G4fa9) (bytevector-ieee-single-native-ref . G4fa8) (bytevector-ieee-double-ref . G4fa7) (bytevector-ieee-double-native-set! . G4fa6) (bytevector-ieee-double-native-ref . G4fa5) (bytevector-fill! . G4fa4) (bytevector-copy! . G4fa3) (bytevector-copy . G4fa2) (bytevector->uint-list . G4fa1) (bytevector->u8-list . G4fa0) (bytevector->sint-list . G4f9f) (no-nans-violation? . G4f9e) (no-infinities-violation? . G4f9d) (make-no-nans-violation . G4f9c) (make-no-infinities-violation . G4f9b) (real->flonum . G4f9a) (flzero? . G4f99) (fltruncate . G4f98) (fltan . G4f97) (flsqrt . G4f96) (flsin . G4f95) (flround . G4f94) (flpositive? . G4f93) (flonum? . G4f92) (flodd? . G4f91) (flnumerator . G4f90) (flnegative? . G4f8f) (flnan? . G4f8e) (flmod0 . G4f8d) (flmod . G4f8c) (flmin . G4f8b) (flmax . G4f8a) (fllog . G4f89) (flinteger? . G4f88) (flinfinite? . G4f87) (flfloor . G4f86) (flfinite? . G4f85) (flexpt . G4f84) (flexp . G4f83) (fleven? . G4f82) (fldiv0-and-mod0 . G4f81) (fldiv0 . G4f80) (fldiv-and-mod . G4f7f) (fldiv . G4f7e) (fldenominator . G4f7d) (flcos . G4f7c) (flceiling . G4f7b) (flatan . G4f7a) (flasin . G4f79) (flacos . G4f78) (flabs . G4f77) (fl>? . G4f76) (fl>=? . G4f75) (fl=? . G4f74) (fl<? . G4f73) (fl<=? . G4f72) (fl/ . G4f71) (fl- . G4f70) (fl+ . G4f6f) (fl* . G4f6e) (fixnum->flonum . G4f6d) (fxzero? . G4f6c) (fxxor . G4f6b) (fxrotate-bit-field . G4f6a) (fxreverse-bit-field . G4f69) (fxpositive? . G4f68) (fxodd? . G4f67) (fxnot . G4f66) (fxnegative? . G4f65) (fxmod0 . G4f64) (fxmod . G4f63) (fxmin . G4f62) (fxmax . G4f61) (fxlength . G4f60) (fxior . G4f5f) (fxif . G4f5e) (fxfirst-bit-set . G4f5d) (fxeven? . G4f5c) (fxdiv0-and-mod0 . G4f5b) (fxdiv0 . G4f5a) (fxdiv-and-mod . G4f59) (fxdiv . G4f58) (fxcopy-bit-field . G4f57) (fxcopy-bit . G4f56) (fxbit-set? . G4f55) (fxbit-field . G4f54) (fxbit-count . G4f53) (fxarithmetic-shift-right . G4f52) (fxarithmetic-shift-left . G4f51) (fxarithmetic-shift . G4f50) (fxand . G4f4f) (fx>? . G4f4e) (fx>=? . G4f4d) (fx=? . G4f4c) (fx<? . G4f4b) (fx<=? . G4f4a) (fx-/carry . G4f49) (fx- . G4f48) (fx+/carry . G4f47) (fx+ . G4f46) (fx*/carry . G4f45) (fx* . G4f44) (greatest-fixnum . G4f43) (least-fixnum . G4f42) (fixnum-width . G4f41) (fixnum? . G4f40) (bitwise-rotate-bit-field . G4f3f) (bitwise-reverse-bit-field . G4f3e) (bitwise-length . G4f3d) (bitwise-if . G4f3c) (bitwise-first-bit-set . G4f3b) (bitwise-copy-bit-field . G4f3a) (bitwise-copy-bit . G4f39) (bitwise-bit-set? . G4f38) (bitwise-bit-field . G4f37) (bitwise-bit-count . G4f36) (bitwise-xor . G4f35) (bitwise-ior . G4f34) (bitwise-and . G4f33) (bitwise-not . G4f32) (bitwise-arithmetic-shift-right . G4f31) (bitwise-arithmetic-shift-left . G4f30) (bitwise-arithmetic-shift . G4f2f) (zero? . G4f2e) (vector? . G4f2d) (vector-set! . G4f2c) (vector-ref . G4f2b) (vector-map . G4f2a) (vector-length . G4f29) (vector-for-each . G4f28) (vector-fill! . G4f27) (vector->list . G4f26) (vector . G4f25) (values . G4f24) (truncate . G4f23) (tan . G4f22) (symbol? . G4f21) (symbol=? . G4f20) (symbol->string . G4f1f) (substring . G4f1e) (string? . G4f1d) (string>? . G4f1c) (string>=? . G4f1b) (string=? . G4f1a) (string<? . G4f19) (string<=? . G4f18) (string-ref . G4f17) (string-length . G4f16) (string-for-each . G4f15) (string-copy . G4f14) (string-append . G4f13) (string->symbol . G4f12) (string->number . G4f11) (string->list . G4f10) (string . G4f0f) (sqrt . G4f0e) (sin . G4f0d) (round . G4f0c) (reverse . G4f0b) (real? . G4f0a) (real-valued? . G4f09) (real-part . G4f08) (rationalize . G4f07) (rational? . G4f06) (rational-valued? . G4f05) (procedure? . G4f04) (positive? . G4f03) (pair? . G4f02) (odd? . G4f01) (numerator . G4f00) (number? . G4eff) (number->string . G4efe) (null? . G4efd) (not . G4efc) (negative? . G4efb) (nan? . G4efa) (min . G4ef9) (max . G4ef8) (map . G4ef7) (make-vector . G4ef6) (make-string . G4ef5) (make-rectangular . G4ef4) (make-polar . G4ef3) (magnitude . G4ef2) (log . G4ef1) (list? . G4ef0) (list-tail . G4eef) (list-ref . G4eee) (list->vector . G4eed) (list->string . G4eec) (list . G4eeb) (length . G4eea) (lcm . G4ee9) (integer? . G4ee8) (integer-valued? . G4ee7) (integer->char . G4ee6) (infinite? . G4ee5) (inexact? . G4ee4) (inexact . G4ee3) (imag-part . G4ee2) (gcd . G4ee1) (for-each . G4ee0) (floor . G4edf) (finite? . G4ede) (expt . G4edd) (exp . G4edc) (exact? . G4edb) (exact-integer-sqrt . G4eda) (exact . G4ed9) (even? . G4ed8) (error . G4ed7) (eqv? . G4ed6) (equal? . G4ed5) (eq? . G4ed4) (dynamic-wind . G4ed3) (div0-and-mod0 . G4ed2) (mod0 . G4ed1) (div0 . G4ed0) (div-and-mod . G4ecf) (mod . G4ece) (div . G4ecd) (denominator . G4ecc) (cos . G4ecb) (cons . G4eca) (complex? . G4ec9) (char? . G4ec8) (char>? . G4ec7) (char>=? . G4ec6) (char=? . G4ec5) (char<? . G4ec4) (char<=? . G4ec3) (char->integer . G4ec2) (ceiling . G4ec1) (call-with-values . G4ec0) (call/cc . G4ebf) (call-with-current-continuation . G4ebe) (cddddr . G4ebd) (cdddar . G4ebc) (cddadr . G4ebb) (cddaar . G4eba) (cdaddr . G4eb9) (cdadar . G4eb8) (cdaadr . G4eb7) (cdaaar . G4eb6) (cadddr . G4eb5) (caddar . G4eb4) (cadadr . G4eb3) (cadaar . G4eb2) (caaddr . G4eb1) (caadar . G4eb0) (caaadr . G4eaf) (caaaar . G4eae) (cdddr . G4ead) (cddar . G4eac) (cdadr . G4eab) (cdaar . G4eaa) (caddr . G4ea9) (cadar . G4ea8) (caadr . G4ea7) (caaar . G4ea6) (cddr . G4ea5) (cdar . G4ea4) (cadr . G4ea3) (caar . G4ea2) (cdr . G4ea1) (car . G4ea0) (boolean? . G4e9f) (boolean=? . G4e9e) (atan . G4e9d) (assertion-violation . G4e9c) (asin . G4e9b) (apply . G4e9a) (append . G4e99) (angle . G4e98) (acos . G4e97) (abs . G4e96) (/ . G4e95) (* . G4e94) (- . G4e93) (+ . G4e92) (>= . G4e91) (> . G4e90) (= . G4e8f) (<= . G4e8e) (< . G4e8d) (library . G4e8c) (export . G4e8b) (&no-nans . G4e8a) (&no-infinities . G4e89) (&i/o-encoding . G4e88) (&i/o-decoding . G4e87) (&i/o-port . G4e86) (&i/o-file-does-not-exist . G4e85) (&i/o-file-already-exists . G4e84) (&i/o-file-is-read-only . G4e83) (&i/o-file-protection . G4e82) (&i/o-filename . G4e81) (&i/o-invalid-position . G4e80) (&i/o-write . G4e7f) (&i/o-read . G4e7e) (&i/o . G4e7d) (&undefined . G4e7c) (&syntax . G4e7b) (&lexical . G4e7a) (&implementation-restriction . G4e79) (&non-continuable . G4e78) (&who . G4e77) (&irritants . G4e76) (&assertion . G4e75) (&violation . G4e74) (&error . G4e73) (&serious . G4e72) (&warning . G4e71) (&message . G4e70) (&condition . G4e6f) (define-condition-type . G4e6e) (define-enumeration . G4e6d) (define-record-type . G4e6c) (parent-rtd . G4e6b) (nongenerative . G4e6a) (opaque . G4e69) (sealed . G4e68) (protocol . G4e67) (parent . G4e66) (immutable . G4e65) (mutable . G4e64) (fields . G4e63) (error-handling-mode . G4e62) (file-options . G4e61) (buffer-mode . G4e60) (eol-style . G4e5f) (guard . G4e5e) (trace-define . G4e5d) (trace-lambda . G4e5c) (unsyntax-splicing . G4e5b) (unsyntax . G4e5a) (unquote-splicing . G4e59) (unquote . G4e58) (_ . G4e57) (else . G4e56) (=> . G4e55) (... . G4e54) (assert . G4e53) (endianness . G4e52) (delay . G4e51) (time . G4e50) (or . G4e4f) (and . G4e4e) (do . G4e4d) (cond . G4e4c) (let* . G4e4b) (let . G4e4a) (let*-values . G4e49) (let-values . G4e48) (identifier-syntax . G4e47) (with-syntax . G4e46) (quasisyntax . G4e45) (quasiquote . G4e44) (syntax-rules . G4e43) (include . G4e42) (define-struct . G4e41) (record-constructor-descriptor . G4e40) (record-type-descriptor . G4e3f) (case . G4e3e) (parameterize . G4e3d) (unless . G4e3c) (when . G4e3b) (if . G4e3a) (letrec* . G4e39) (letrec . G4e38) (type-descriptor . G4e37) (case-lambda . G4e36) (lambda . G4e35) (syntax . G4e34) (syntax-case . G4e33) (quote . G4e32) (foreign-call . G4e31) (letrec-syntax . G4e30) (let-syntax . G4e2f) (set! . G4e2e) (import . G4e2d) (begin . G4e2c) (module . G4e2b) (define-syntax . G4e2a) (define . G4e29)) '((G5124 core-prim . &no-nans-rcd) (G5123 core-prim . &no-nans-rtd) (G5122 core-prim . &no-infinities-rcd) (G5121 core-prim . &no-infinities-rtd) (G5120 core-prim . &i/o-encoding-rcd) (G511f core-prim . &i/o-encoding-rtd) (G511e core-prim . &i/o-decoding-rcd) (G511d core-prim . &i/o-decoding-rtd) (G511c core-prim . &i/o-port-rcd) (G511b core-prim . &i/o-port-rtd) (G511a core-prim . &i/o-file-does-not-exist-rcd) (G5119 core-prim . &i/o-file-does-not-exist-rtd) (G5118 core-prim . &i/o-file-already-exists-rcd) (G5117 core-prim . &i/o-file-already-exists-rtd) (G5116 core-prim . &i/o-file-is-read-only-rcd) (G5115 core-prim . &i/o-file-is-read-only-rtd) (G5114 core-prim . &i/o-file-protection-rcd) (G5113 core-prim . &i/o-file-protection-rtd) (G5112 core-prim . &i/o-filename-rcd) (G5111 core-prim . &i/o-filename-rtd) (G5110 core-prim . &i/o-invalid-position-rcd) (G510f core-prim . &i/o-invalid-position-rtd) (G510e core-prim . &i/o-write-rcd) (G510d core-prim . &i/o-write-rtd) (G510c core-prim . &i/o-read-rcd) (G510b core-prim . &i/o-read-rtd) (G510a core-prim . &i/o-rcd) (G5109 core-prim . &i/o-rtd) (G5108 core-prim . &undefined-rcd) (G5107 core-prim . &undefined-rtd) (G5106 core-prim . &syntax-rcd) (G5105 core-prim . &syntax-rtd) (G5104 core-prim . &lexical-rcd) (G5103 core-prim . &lexical-rtd) (G5102 core-prim . &implementation-restriction-rcd) (G5101 core-prim . &implementation-restriction-rtd) (G5100 core-prim . &non-continuable-rcd) (G50ff core-prim . &non-continuable-rtd) (G50fe core-prim . &who-rcd) (G50fd core-prim . &who-rtd) (G50fc core-prim . &irritants-rcd) (G50fb core-prim . &irritants-rtd) (G50fa core-prim . &assertion-rcd) (G50f9 core-prim . &assertion-rtd) (G50f8 core-prim . &violation-rcd) (G50f7 core-prim . &violation-rtd) (G50f6 core-prim . &error-rcd) (G50f5 core-prim . &error-rtd) (G50f4 core-prim . &serious-rcd) (G50f3 core-prim . &serious-rtd) (G50f2 core-prim . &warning-rcd) (G50f1 core-prim . &warning-rtd) (G50f0 core-prim . &message-rcd) (G50ef core-prim . &message-rtd) (G50ee core-prim . &condition-rcd) (G50ed core-prim . &condition-rtd) (G314b core-prim . syntax-error) (G305e core-prim . syntax-dispatch) (G50ec core-prim . pretty-print) (G50eb core-prim . eval-core) (G50ea core-prim . set-symbol-value!) (G50e9 core-prim . symbol-value) (G50e8 core-prim . gensym) (G50e7 core-prim . void) (G4d95 core-prim . load) (G315d core-prim . interaction-environment) (G50e6 core-prim . char-ready?) (G50e5 core-prim . regexp?) (G50e4 core-prim . read-line) (G50e3 core-prim . dotted-list?) (G50e2 core-prim . circular-list?) (G50e1 core-prim . proper-list?) (G50e0 core-prim . circular-list) (G50df core-prim . last) (G50de core-prim . last-pair) (G50dd core-prim . not-pair?) (G50dc core-prim . split-at!) (G50db core-prim . split-at) (G50da core-prim . list=) (G50d9 core-prim . list-copy) (G50d8 core-prim . list-tabulate) (G50d7 core-prim . make-list) (G50d6 core-prim . xcons) (G50d5 core-prim . tenth) (G50d4 core-prim . ninth) (G50d3 core-prim . eighth) (G50d2 core-prim . seventh) (G50d1 core-prim . sixth) (G50d0 core-prim . fifth) (G50cf core-prim . drop-right!) (G50ce core-prim . drop-right) (G50cd core-prim . take-right) (G50cc core-prim . take!) (G50cb core-prim . drop) (G50ca core-prim . take) (G50c9 core-prim . car+cdr) (G50c8 core-prim . third) (G50c7 core-prim . second) (G50c6 core-prim . first) (G50c5 core-prim . assoc-ref) (G50c4 core-prim . alist-cons) (G50c3 core-prim . print) (G50c2 core-prim . format) (G50c1 core-prim . standard-library-path) (G50c0 core-prim . current-directory) (G50bf core-prim . write-to-file) (G50be core-prim . file->list) (G50bd core-prim . file->string) (G50bc core-prim . digit->integer) (G50bb core-prim . call-with-string-input-port) (G50ba core-prim . call-with-string-io) (G50b9 core-prim . string-split) (G50b8 core-prim . bytevector-for-each) (G50b7 core-prim . string->regexp) (G50b6 core-prim . rxmatch) (G50b5 core-prim . regexp-replace-all) (G50b4 core-prim . hashtable-for-each) (G50b3 core-prim . readdir) (G50b2 core-prim . get-environment-variables) (G50b1 core-prim . get-environment-variable) (G50b0 core-prim . get-command-line) (G50af core-prim . sys-display) (G50ae core-prim . source-info) (G50ad core-prim . make-compiler-instruction) (G50ac core-prim . make-instruction) (G50ab core-prim . set-source-info!) (G50aa core-prim . fasl-write) (G50a9 core-prim . receive) (G50a8 core-prim . string-upcase) (G50a7 core-prim . string-titlecase) (G50a6 core-prim . string-normalize-nfkd) (G50a5 core-prim . string-normalize-nfkc) (G50a4 core-prim . string-normalize-nfd) (G50a3 core-prim . string-normalize-nfc) (G50a2 core-prim . string-foldcase) (G50a1 core-prim . string-downcase) (G50a0 core-prim . string-ci>?) (G509f core-prim . string-ci>=?) (G509e core-prim . string-ci=?) (G509d core-prim . string-ci<?) (G509c core-prim . string-ci<=?) (G509b core-prim . char-whitespace?) (G509a core-prim . char-upper-case?) (G5099 core-prim . char-title-case?) (G5098 core-prim . char-numeric?) (G5097 core-prim . char-lower-case?) (G5096 core-prim . char-general-category) (G5095 core-prim . char-upcase) (G5094 core-prim . char-titlecase) (G5093 core-prim . char-foldcase) (G5092 core-prim . char-downcase) (G5091 core-prim . char-ci>?) (G5090 core-prim . char-ci>=?) (G508f core-prim . char-ci=?) (G508e core-prim . char-ci<?) (G508d core-prim . char-ci<=?) (G508c core-prim . char-alphabetic?) (G2e5c core-prim . make-variable-transformer) (G3153 core-prim . identifier?) (G313d core-prim . generate-temporaries) (G313f core-prim . free-identifier=?) (G3157 core-prim . syntax->datum) (G3155 core-prim . datum->syntax) (G3141 core-prim . bound-identifier=?) (G508b core-prim . record-type-descriptor?) (G508a core-prim . record-predicate) (G5089 core-prim . record-mutator) (G5088 core-prim . record-constructor) (G5087 core-prim . record-accessor) (G5086 core-prim . make-record-type-descriptor) (G5085 core-prim . make-record-constructor-descriptor) (G5084 core-prim . record?) (G5083 core-prim . record-type-uid) (G5082 core-prim . record-type-sealed?) (G5081 core-prim . record-type-parent) (G5080 core-prim . record-type-opaque?) (G507f core-prim . record-type-name) (G507e core-prim . record-type-generative?) (G507d core-prim . record-type-field-names) (G507c core-prim . record-rtd) (G507b core-prim . record-field-mutable?) (G507a core-prim . delete-file) (G5079 core-prim . file-exists?) (G5078 core-prim . vector-sort!) (G5077 core-prim . vector-sort) (G5076 core-prim . list-sort) (G5075 core-prim . symbol-hash) (G5074 core-prim . string-ci-hash) (G5073 core-prim . string-hash) (G5072 core-prim . equal-hash) (G5071 core-prim . hashtable-equivalence-function) (G5070 core-prim . make-hashtable) (G506f core-prim . hashtable-hash-function) (G506e core-prim . make-eqv-hashtable) (G506d core-prim . make-eq-hashtable) (G506c core-prim . hashtable?) (G506b core-prim . hashtable-update!) (G506a core-prim . hashtable-size) (G5069 core-prim . hashtable-set!) (G5068 core-prim . hashtable-ref) (G5067 core-prim . hashtable-mutable?) (G5066 core-prim . hashtable-keys) (G5065 core-prim . hashtable-entries) (G5064 core-prim . hashtable-delete!) (G5063 core-prim . hashtable-copy) (G5062 core-prim . hashtable-contains?) (G5061 core-prim . hashtable-clear!) (G5060 core-prim . call-with-output-file) (G505f core-prim . call-with-input-file) (G505e core-prim . write-char) (G505d core-prim . write) (G505c core-prim . with-output-to-file) (G505b core-prim . with-input-from-file) (G505a core-prim . read-char) (G5059 core-prim . read) (G5058 core-prim . peek-char) (G5057 core-prim . open-output-file) (G5056 core-prim . open-input-file) (G5055 core-prim . newline) (G5054 core-prim . display) (G5053 core-prim . close-output-port) (G5052 core-prim . close-input-port) (G5051 core-prim . eof-object?) (G5050 core-prim . eof-object) (G504f core-prim . current-error-port) (G504e core-prim . current-output-port) (G504d core-prim . current-input-port) (G504c core-prim . output-port?) (G504b core-prim . input-port?) (G504a core-prim . utf-8-codec) (G5049 core-prim . utf-16-codec) (G5048 core-prim . transcoder-error-handling-mode) (G5047 core-prim . transcoder-eol-style) (G5046 core-prim . transcoder-codec) (G5045 core-prim . transcoded-port) (G5044 core-prim . textual-port?) (G5043 core-prim . string->bytevector) (G5042 core-prim . standard-output-port) (G5041 core-prim . standard-input-port) (G5040 core-prim . standard-error-port) (G503f core-prim . set-port-position!) (G503e core-prim . put-u8) (G503d core-prim . put-string) (G503c core-prim . put-datum) (G503b core-prim . put-char) (G503a core-prim . put-bytevector) (G5039 core-prim . port?) (G5038 core-prim . port-transcoder) (G5037 core-prim . port-position) (G5036 core-prim . port-has-set-port-position!?) (G5035 core-prim . port-has-port-position?) (G5034 core-prim . port-eof?) (G5033 core-prim . output-port-buffer-mode) (G5032 core-prim . open-string-output-port) (G5031 core-prim . open-string-input-port) (G5030 core-prim . open-file-output-port) (G502f core-prim . open-file-input/output-port) (G502e core-prim . open-file-input-port) (G502d core-prim . open-bytevector-output-port) (G502c core-prim . open-bytevector-input-port) (G502b core-prim . native-transcoder) (G502a core-prim . native-eol-style) (G5029 core-prim . make-transcoder) (G5028 core-prim . latin-1-codec) (G4c6c core-prim . make-i/o-write-error) (G4c58 core-prim . make-i/o-read-error) (G4d03 core-prim . make-i/o-port-error) (G4c81 core-prim . make-i/o-invalid-position-error) (G4c9a core-prim . make-i/o-filename-error) (G4cb2 core-prim . make-i/o-file-protection-error) (G4cc6 core-prim . make-i/o-file-is-read-only-error) (G4cee core-prim . make-i/o-file-does-not-exist-error) (G4cda core-prim . make-i/o-file-already-exists-error) (G4c44 core-prim . make-i/o-error) (G4d30 core-prim . make-i/o-encoding-error) (G4d1b core-prim . make-i/o-decoding-error) (G5027 core-prim . make-custom-textual-output-port) (G5026 core-prim . make-custom-textual-input/output-port) (G5025 core-prim . make-custom-textual-input-port) (G5024 core-prim . make-custom-binary-output-port) (G5023 core-prim . make-custom-binary-input/output-port) (G5022 core-prim . make-custom-binary-input-port) (G5021 core-prim . make-bytevector) (G5020 core-prim . lookahead-u8) (G501f core-prim . lookahead-char) (G4c6e core-prim . i/o-write-error?) (G4c5a core-prim . i/o-read-error?) (G4d07 core-prim . i/o-port-error?) (G4c85 core-prim . i/o-invalid-position-error?) (G4c9e core-prim . i/o-filename-error?) (G4cb4 core-prim . i/o-file-protection-error?) (G4cc8 core-prim . i/o-file-is-read-only-error?) (G4cf0 core-prim . i/o-file-does-not-exist-error?) (G4cdc core-prim . i/o-file-already-exists-error?) (G4c46 core-prim . i/o-error?) (G4d09 core-prim . i/o-error-port) (G4ca0 core-prim . i/o-error-filename) (G4d34 core-prim . i/o-encoding-error?) (G4d36 core-prim . i/o-encoding-error-char) (G4d1d core-prim . i/o-decoding-error?) (G501e core-prim . get-u8) (G501d core-prim . get-string-n!) (G501c core-prim . get-string-n) (G501b core-prim . get-string-all) (G501a core-prim . get-line) (G5019 core-prim . get-datum) (G5018 core-prim . get-char) (G5017 core-prim . get-bytevector-some) (G5016 core-prim . get-bytevector-n!) (G5015 core-prim . get-bytevector-n) (G5014 core-prim . get-bytevector-all) (G5013 core-prim . flush-output-port) (G5012 core-prim . close-port) (G312b core-prim . scheme-report-environment) (G5011 core-prim . quotient) (G3129 core-prim . null-environment) (G5010 core-prim . remainder) (G500f core-prim . modulo) (G500e core-prim . inexact->exact) (G500d core-prim . force) (G500c core-prim . exact->inexact) (G500b core-prim . exit) (G4d8f core-prim . command-line) (G500a core-prim . string-fill!) (G5009 core-prim . string-set!) (G5008 core-prim . set-cdr!) (G5007 core-prim . set-car!) (G5006 core-prim . remove) (G5005 core-prim . remv) (G5004 core-prim . remp) (G5003 core-prim . remq) (G5002 core-prim . partition) (G5001 core-prim . memv) (G5000 core-prim . memq) (G4fff core-prim . memp) (G4ffe core-prim . member) (G4ffd core-prim . exists) (G4ffc core-prim . for-all) (G4ffb core-prim . fold-right) (G4ffa core-prim . fold-left) (G4ff9 core-prim . find) (G4ff8 core-prim . filter) (G4ff7 core-prim . cons*) (G4ff6 core-prim . assv) (G4ff5 core-prim . assq) (G4ff4 core-prim . assp) (G4ff3 core-prim . assoc) (G4ff2 core-prim . call-with-string-output-port) (G4ff1 core-prim . call-with-port) (G4ff0 core-prim . call-with-bytevector-output-port) (G4fef core-prim . bytevector->string) (G4fee core-prim . buffer-mode?) (G4fed core-prim . binary-port?) (G4fec core-prim . with-exception-handler) (G4feb core-prim . raise-continuable) (G4fea core-prim . raise) (G312f core-prim . eval) (G3127 core-prim . environment) (G4fe9 core-prim . make-enumeration) (G4fe8 core-prim . enum-set=?) (G4fe7 core-prim . enum-set-universe) (G4fe6 core-prim . enum-set-union) (G4fe5 core-prim . enum-set-subset?) (G4fe4 core-prim . enum-set-projection) (G4fe3 core-prim . enum-set-member?) (G4fe2 core-prim . enum-set-intersection) (G4fe1 core-prim . enum-set-indexer) (G4fe0 core-prim . enum-set-difference) (G4fdf core-prim . enum-set-constructor) (G4fde core-prim . enum-set-complement) (G4fdd core-prim . enum-set->list) (G4b62 core-prim . who-condition?) (G4ae2 core-prim . warning?) (G4b1e core-prim . violation?) (G4bd2 core-prim . undefined-violation?) (G4bba core-prim . syntax-violation?) (G4bbe core-prim . syntax-violation-subform) (G4bbc core-prim . syntax-violation-form) (G3151 core-prim . syntax-violation) (G4fdc core-prim . simple-conditions) (G4af6 core-prim . serious-condition?) (G4b78 core-prim . non-continuable-violation?) (G4acc core-prim . message-condition?) (G4b5e core-prim . make-who-condition) (G4ae0 core-prim . make-warning) (G4b1c core-prim . make-violation) (G4bd0 core-prim . make-undefined-violation) (G4bb4 core-prim . make-syntax-violation) (G4af4 core-prim . make-serious-condition) (G4b76 core-prim . make-non-continuable-violation) (G4ac8 core-prim . make-message-condition) (G4b9e core-prim . make-lexical-violation) (G4b45 core-prim . make-irritants-condition) (G4b8a core-prim . make-implementation-restriction-violation) (G4b08 core-prim . make-error) (G4b30 core-prim . make-assertion-violation) (G4ba0 core-prim . lexical-violation?) (G4b49 core-prim . irritants-condition?) (G4b8c core-prim . implementation-restriction-violation?) (G4b0a core-prim . error?) (G4b64 core-prim . condition-who) (G4fdb core-prim . condition-predicate) (G4ace core-prim . condition-message) (G4b4b core-prim . condition-irritants) (G4fda core-prim . condition-accessor) (G4fd9 core-prim . condition) (G4b32 core-prim . assertion-violation?) (G4fd8 core-prim . condition?) (G4fd7 core-prim . utf32->string) (G4fd6 core-prim . utf16->string) (G4fd5 core-prim . utf8->string) (G4fd4 core-prim . uint-list->bytevector) (G4fd3 core-prim . u8-list->bytevector) (G4fd2 core-prim . string->utf8) (G4fd1 core-prim . string->utf32) (G4fd0 core-prim . string->utf16) (G4fcf core-prim . sint-list->bytevector) (G4fce core-prim . native-endianness) (G4fcd core-prim . bytevector?) (G4fcc core-prim . bytevector=?) (G4fcb core-prim . bytevector-uint-set!) (G4fca core-prim . bytevector-uint-ref) (G4fc9 core-prim . bytevector-u8-set!) (G4fc8 core-prim . bytevector-u8-ref) (G4fc7 core-prim . bytevector-u64-set!) (G4fc6 core-prim . bytevector-u64-ref) (G4fc5 core-prim . bytevector-u64-native-set!) (G4fc4 core-prim . bytevector-u64-native-ref) (G4fc3 core-prim . bytevector-u32-set!) (G4fc2 core-prim . bytevector-u32-ref) (G4fc1 core-prim . bytevector-u32-native-set!) (G4fc0 core-prim . bytevector-u32-native-ref) (G4fbf core-prim . bytevector-u16-set!) (G4fbe core-prim . bytevector-u16-ref) (G4fbd core-prim . bytevector-u16-native-set!) (G4fbc core-prim . bytevector-u16-native-ref) (G4fbb core-prim . bytevector-sint-set!) (G4fba core-prim . bytevector-sint-ref) (G4fb9 core-prim . bytevector-s8-set!) (G4fb8 core-prim . bytevector-s8-ref) (G4fb7 core-prim . bytevector-s64-set!) (G4fb6 core-prim . bytevector-s64-ref) (G4fb5 core-prim . bytevector-s64-native-set!) (G4fb4 core-prim . bytevector-s64-native-ref) (G4fb3 core-prim . bytevector-s32-set!) (G4fb2 core-prim . bytevector-s32-ref) (G4fb1 core-prim . bytevector-s32-native-set!) (G4fb0 core-prim . bytevector-s32-native-ref) (G4faf core-prim . bytevector-s16-set!) (G4fae core-prim . bytevector-s16-ref) (G4fad core-prim . bytevector-s16-native-set!) (G4fac core-prim . bytevector-s16-native-ref) (G4fab core-prim . bytevector-length) (G4faa core-prim . bytevector-ieee-single-ref) (G4fa9 core-prim . bytevector-ieee-single-native-set!) (G4fa8 core-prim . bytevector-ieee-single-native-ref) (G4fa7 core-prim . bytevector-ieee-double-ref) (G4fa6 core-prim . bytevector-ieee-double-native-set!) (G4fa5 core-prim . bytevector-ieee-double-native-ref) (G4fa4 core-prim . bytevector-fill!) (G4fa3 core-prim . bytevector-copy!) (G4fa2 core-prim . bytevector-copy) (G4fa1 core-prim . bytevector->uint-list) (G4fa0 core-prim . bytevector->u8-list) (G4f9f core-prim . bytevector->sint-list) (G4f9e core-prim . no-nans-violation?) (G4f9d core-prim . no-infinities-violation?) (G4f9c core-prim . make-no-nans-violation) (G4f9b core-prim . make-no-infinities-violation) (G4f9a core-prim . real->flonum) (G4f99 core-prim . flzero?) (G4f98 core-prim . fltruncate) (G4f97 core-prim . fltan) (G4f96 core-prim . flsqrt) (G4f95 core-prim . flsin) (G4f94 core-prim . flround) (G4f93 core-prim . flpositive?) (G4f92 core-prim . flonum?) (G4f91 core-prim . flodd?) (G4f90 core-prim . flnumerator) (G4f8f core-prim . flnegative?) (G4f8e core-prim . flnan?) (G4f8d core-prim . flmod0) (G4f8c core-prim . flmod) (G4f8b core-prim . flmin) (G4f8a core-prim . flmax) (G4f89 core-prim . fllog) (G4f88 core-prim . flinteger?) (G4f87 core-prim . flinfinite?) (G4f86 core-prim . flfloor) (G4f85 core-prim . flfinite?) (G4f84 core-prim . flexpt) (G4f83 core-prim . flexp) (G4f82 core-prim . fleven?) (G4f81 core-prim . fldiv0-and-mod0) (G4f80 core-prim . fldiv0) (G4f7f core-prim . fldiv-and-mod) (G4f7e core-prim . fldiv) (G4f7d core-prim . fldenominator) (G4f7c core-prim . flcos) (G4f7b core-prim . flceiling) (G4f7a core-prim . flatan) (G4f79 core-prim . flasin) (G4f78 core-prim . flacos) (G4f77 core-prim . flabs) (G4f76 core-prim . fl>?) (G4f75 core-prim . fl>=?) (G4f74 core-prim . fl=?) (G4f73 core-prim . fl<?) (G4f72 core-prim . fl<=?) (G4f71 core-prim . fl/) (G4f70 core-prim . fl-) (G4f6f core-prim . fl+) (G4f6e core-prim . fl*) (G4f6d core-prim . fixnum->flonum) (G4f6c core-prim . fxzero?) (G4f6b core-prim . fxxor) (G4f6a core-prim . fxrotate-bit-field) (G4f69 core-prim . fxreverse-bit-field) (G4f68 core-prim . fxpositive?) (G4f67 core-prim . fxodd?) (G4f66 core-prim . fxnot) (G4f65 core-prim . fxnegative?) (G4f64 core-prim . fxmod0) (G4f63 core-prim . fxmod) (G4f62 core-prim . fxmin) (G4f61 core-prim . fxmax) (G4f60 core-prim . fxlength) (G4f5f core-prim . fxior) (G4f5e core-prim . fxif) (G4f5d core-prim . fxfirst-bit-set) (G4f5c core-prim . fxeven?) (G4f5b core-prim . fxdiv0-and-mod0) (G4f5a core-prim . fxdiv0) (G4f59 core-prim . fxdiv-and-mod) (G4f58 core-prim . fxdiv) (G4f57 core-prim . fxcopy-bit-field) (G4f56 core-prim . fxcopy-bit) (G4f55 core-prim . fxbit-set?) (G4f54 core-prim . fxbit-field) (G4f53 core-prim . fxbit-count) (G4f52 core-prim . fxarithmetic-shift-right) (G4f51 core-prim . fxarithmetic-shift-left) (G4f50 core-prim . fxarithmetic-shift) (G4f4f core-prim . fxand) (G4f4e core-prim . fx>?) (G4f4d core-prim . fx>=?) (G4f4c core-prim . fx=?) (G4f4b core-prim . fx<?) (G4f4a core-prim . fx<=?) (G4f49 core-prim . fx-/carry) (G4f48 core-prim . fx-) (G4f47 core-prim . fx+/carry) (G4f46 core-prim . fx+) (G4f45 core-prim . fx*/carry) (G4f44 core-prim . fx*) (G4f43 core-prim . greatest-fixnum) (G4f42 core-prim . least-fixnum) (G4f41 core-prim . fixnum-width) (G4f40 core-prim . fixnum?) (G4f3f core-prim . bitwise-rotate-bit-field) (G4f3e core-prim . bitwise-reverse-bit-field) (G4f3d core-prim . bitwise-length) (G4f3c core-prim . bitwise-if) (G4f3b core-prim . bitwise-first-bit-set) (G4f3a core-prim . bitwise-copy-bit-field) (G4f39 core-prim . bitwise-copy-bit) (G4f38 core-prim . bitwise-bit-set?) (G4f37 core-prim . bitwise-bit-field) (G4f36 core-prim . bitwise-bit-count) (G4f35 core-prim . bitwise-xor) (G4f34 core-prim . bitwise-ior) (G4f33 core-prim . bitwise-and) (G4f32 core-prim . bitwise-not) (G4f31 core-prim . bitwise-arithmetic-shift-right) (G4f30 core-prim . bitwise-arithmetic-shift-left) (G4f2f core-prim . bitwise-arithmetic-shift) (G4f2e core-prim . zero?) (G4f2d core-prim . vector?) (G4f2c core-prim . vector-set!) (G4f2b core-prim . vector-ref) (G4f2a core-prim . vector-map) (G4f29 core-prim . vector-length) (G4f28 core-prim . vector-for-each) (G4f27 core-prim . vector-fill!) (G4f26 core-prim . vector->list) (G4f25 core-prim . vector) (G4f24 core-prim . values) (G4f23 core-prim . truncate) (G4f22 core-prim . tan) (G4f21 core-prim . symbol?) (G4f20 core-prim . symbol=?) (G4f1f core-prim . symbol->string) (G4f1e core-prim . substring) (G4f1d core-prim . string?) (G4f1c core-prim . string>?) (G4f1b core-prim . string>=?) (G4f1a core-prim . string=?) (G4f19 core-prim . string<?) (G4f18 core-prim . string<=?) (G4f17 core-prim . string-ref) (G4f16 core-prim . string-length) (G4f15 core-prim . string-for-each) (G4f14 core-prim . string-copy) (G4f13 core-prim . string-append) (G4f12 core-prim . string->symbol) (G4f11 core-prim . string->number) (G4f10 core-prim . string->list) (G4f0f core-prim . string) (G4f0e core-prim . sqrt) (G4f0d core-prim . sin) (G4f0c core-prim . round) (G4f0b core-prim . reverse) (G4f0a core-prim . real?) (G4f09 core-prim . real-valued?) (G4f08 core-prim . real-part) (G4f07 core-prim . rationalize) (G4f06 core-prim . rational?) (G4f05 core-prim . rational-valued?) (G4f04 core-prim . procedure?) (G4f03 core-prim . positive?) (G4f02 core-prim . pair?) (G4f01 core-prim . odd?) (G4f00 core-prim . numerator) (G4eff core-prim . number?) (G4efe core-prim . number->string) (G4efd core-prim . null?) (G4efc core-prim . not) (G4efb core-prim . negative?) (G4efa core-prim . nan?) (G4ef9 core-prim . min) (G4ef8 core-prim . max) (G4ef7 core-prim . map) (G4ef6 core-prim . make-vector) (G4ef5 core-prim . make-string) (G4ef4 core-prim . make-rectangular) (G4ef3 core-prim . make-polar) (G4ef2 core-prim . magnitude) (G4ef1 core-prim . log) (G4ef0 core-prim . list?) (G4eef core-prim . list-tail) (G4eee core-prim . list-ref) (G4eed core-prim . list->vector) (G4eec core-prim . list->string) (G4eeb core-prim . list) (G4eea core-prim . length) (G4ee9 core-prim . lcm) (G4ee8 core-prim . integer?) (G4ee7 core-prim . integer-valued?) (G4ee6 core-prim . integer->char) (G4ee5 core-prim . infinite?) (G4ee4 core-prim . inexact?) (G4ee3 core-prim . inexact) (G4ee2 core-prim . imag-part) (G4ee1 core-prim . gcd) (G4ee0 core-prim . for-each) (G4edf core-prim . floor) (G4ede core-prim . finite?) (G4edd core-prim . expt) (G4edc core-prim . exp) (G4edb core-prim . exact?) (G4eda core-prim . exact-integer-sqrt) (G4ed9 core-prim . exact) (G4ed8 core-prim . even?) (G4ed7 core-prim . error) (G4ed6 core-prim . eqv?) (G4ed5 core-prim . equal?) (G4ed4 core-prim . eq?) (G4ed3 core-prim . dynamic-wind) (G4ed2 core-prim . div0-and-mod0) (G4ed1 core-prim . mod0) (G4ed0 core-prim . div0) (G4ecf core-prim . div-and-mod) (G4ece core-prim . mod) (G4ecd core-prim . div) (G4ecc core-prim . denominator) (G4ecb core-prim . cos) (G4eca core-prim . cons) (G4ec9 core-prim . complex?) (G4ec8 core-prim . char?) (G4ec7 core-prim . char>?) (G4ec6 core-prim . char>=?) (G4ec5 core-prim . char=?) (G4ec4 core-prim . char<?) (G4ec3 core-prim . char<=?) (G4ec2 core-prim . char->integer) (G4ec1 core-prim . ceiling) (G4ec0 core-prim . call-with-values) (G4ebf core-prim . call/cc) (G4ebe core-prim . call-with-current-continuation) (G4ebd core-prim . cddddr) (G4ebc core-prim . cdddar) (G4ebb core-prim . cddadr) (G4eba core-prim . cddaar) (G4eb9 core-prim . cdaddr) (G4eb8 core-prim . cdadar) (G4eb7 core-prim . cdaadr) (G4eb6 core-prim . cdaaar) (G4eb5 core-prim . cadddr) (G4eb4 core-prim . caddar) (G4eb3 core-prim . cadadr) (G4eb2 core-prim . cadaar) (G4eb1 core-prim . caaddr) (G4eb0 core-prim . caadar) (G4eaf core-prim . caaadr) (G4eae core-prim . caaaar) (G4ead core-prim . cdddr) (G4eac core-prim . cddar) (G4eab core-prim . cdadr) (G4eaa core-prim . cdaar) (G4ea9 core-prim . caddr) (G4ea8 core-prim . cadar) (G4ea7 core-prim . caadr) (G4ea6 core-prim . caaar) (G4ea5 core-prim . cddr) (G4ea4 core-prim . cdar) (G4ea3 core-prim . cadr) (G4ea2 core-prim . caar) (G4ea1 core-prim . cdr) (G4ea0 core-prim . car) (G4e9f core-prim . boolean?) (G4e9e core-prim . boolean=?) (G4e9d core-prim . atan) (G4e9c core-prim . assertion-violation) (G4e9b core-prim . asin) (G4e9a core-prim . apply) (G4e99 core-prim . append) (G4e98 core-prim . angle) (G4e97 core-prim . acos) (G4e96 core-prim . abs) (G4e95 core-prim . /) (G4e94 core-prim . *) (G4e93 core-prim . -) (G4e92 core-prim . +) (G4e91 core-prim . >=) (G4e90 core-prim . >) (G4e8f core-prim . =) (G4e8e core-prim . <=) (G4e8d core-prim . <) (G4e8c core-prim . library) (G4e8b core-prim . export) (G4e8a $core-rtd &no-nans-rtd &no-nans-rcd) (G4e89 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e88 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e87 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e86 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e85 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e84 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e83 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e82 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e81 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e80 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e7f $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e7e $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e7d $core-rtd &i/o-rtd &i/o-rcd) (G4e7c $core-rtd &undefined-rtd &undefined-rcd) (G4e7b $core-rtd &syntax-rtd &syntax-rcd) (G4e7a $core-rtd &lexical-rtd &lexical-rcd) (G4e79 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e78 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e77 $core-rtd &who-rtd &who-rcd) (G4e76 $core-rtd &irritants-rtd &irritants-rcd) (G4e75 $core-rtd &assertion-rtd &assertion-rcd) (G4e74 $core-rtd &violation-rtd &violation-rcd) (G4e73 $core-rtd &error-rtd &error-rcd) (G4e72 $core-rtd &serious-rtd &serious-rcd) (G4e71 $core-rtd &warning-rtd &warning-rcd) (G4e70 $core-rtd &message-rtd &message-rcd) (G4e6f $core-rtd &condition-rtd &condition-rcd) (G4e6e macro . define-condition-type) (G4e6d macro . define-enumeration) (G4e6c macro . define-record-type) (G4e6b macro . parent-rtd) (G4e6a macro . nongenerative) (G4e69 macro . opaque) (G4e68 macro . sealed) (G4e67 macro . protocol) (G4e66 macro . parent) (G4e65 macro . immutable) (G4e64 macro . mutable) (G4e63 macro . fields) (G4e62 macro . error-handling-mode) (G4e61 macro . file-options) (G4e60 macro . buffer-mode) (G4e5f macro . eol-style) (G4e5e macro . guard) (G4e5d macro . trace-define) (G4e5c macro . trace-lambda) (G4e5b macro . unsyntax-splicing) (G4e5a macro . unsyntax) (G4e59 macro . unquote-splicing) (G4e58 macro . unquote) (G4e57 macro . _) (G4e56 macro . else) (G4e55 macro . =>) (G4e54 macro . ...) (G4e53 macro . assert) (G4e52 macro . endianness) (G4e51 macro . delay) (G4e50 macro . time) (G4e4f macro . or) (G4e4e macro . and) (G4e4d macro . do) (G4e4c macro . cond) (G4e4b macro . let*) (G4e4a macro . let) (G4e49 macro . let*-values) (G4e48 macro . let-values) (G4e47 macro . identifier-syntax) (G4e46 macro . with-syntax) (G4e45 macro . quasisyntax) (G4e44 macro . quasiquote) (G4e43 macro . syntax-rules) (G4e42 macro . include) (G4e41 macro . define-struct) (G4e40 core-macro . record-constructor-descriptor) (G4e3f core-macro . record-type-descriptor) (G4e3e macro . case) (G4e3d macro . parameterize) (G4e3c macro . unless) (G4e3b macro . when) (G4e3a core-macro . if) (G4e39 core-macro . letrec*) (G4e38 core-macro . letrec) (G4e37 core-macro . type-descriptor) (G4e36 core-macro . case-lambda) (G4e35 core-macro . lambda) (G4e34 core-macro . syntax) (G4e33 core-macro . syntax-case) (G4e32 core-macro . quote) (G4e31 core-macro . foreign-call) (G4e30 letrec-syntax) (G4e2f let-syntax) (G4e2e set!) (G4e2d import) (G4e2c begin) (G4e2b module) (G4e2a define-syntax) (G4e29 define)) values values '#f '#f '#f '#f) (G2c0f@G2aa2@install-library 'G5145 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50ec) (eval-core . G50eb) (set-symbol-value! . G50ea) (symbol-value . G50e9) (gensym . G50e8) (void . G50e7)) '() values values '#f '#f '#f '#f) (G2c0f@G2aa2@install-library 'G5146 '(mosh) '() '() '() '() '((symbol-value . G50e9) (standard-library-path . G50c1) (get-command-line . G50b0) (sys-display . G50af) (source-info . G50ae) (make-compiler-instruction . G50ad) (make-instruction . G50ac) (set-source-info! . G50ab) (fasl-write . G50aa) (include . G4e42)) '() values values '#f '#f '#f '#f) (G2c0f@G2aa2@install-library 'G5147 '(mosh backend) '() '() '() '() '((receive . G50a9)) '() values values '#f '#f '#f '#f) (G2c0f@G2aa2@install-library 'G5148 '(mosh file) '() '() '() '() '((read-line . G50e4) (current-directory . G50c0) (write-to-file . G50bf) (file->list . G50be) (file->string . G50bd)) '() values values '#f '#f '#f '#f) (G2c0f@G2aa2@install-library 'G5149 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G50b8)) '() values values '#f '#f '#f '#f) (G2c0f@G2aa2@install-library 'G514a '(mosh number) '() '() '() '() '((digit->integer . G50bc)) '() values values '#f '#f '#f '#f) (G2c0f@G2aa2@install-library 'G514b '(mosh string) '() '() '() '() '((print . G50c3) (format . G50c2) (call-with-string-input-port . G50bb) (call-with-string-io . G50ba) (string-split . G50b9) (string->regexp . G50b7)) '() values values '#f '#f '#f '#f) (G2c0f@G2aa2@install-library 'G514c '(mosh list) '() '() '() '() '((assoc-ref . G50c5)) '() values values '#f '#f '#f '#f) (G2c0f@G2aa2@install-library 'G514d '(mosh regexp) '() '() '() '() '((rxmatch . G50b6) (regexp-replace-all . G50b5)) '() values values '#f '#f '#f '#f) (G2c0f@G2aa2@install-library 'G514e '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G50b4)) '() values values '#f '#f '#f '#f) (G2c0f@G2aa2@install-library 'G514f '(system) '() '() '() '() '((readdir . G50b3) (get-environment-variables . G50b2) (get-environment-variable . G50b1)) '() values values '#f '#f '#f '#f) (G2c0f@G2aa2@install-library 'G5150 '(srfi :1) '() '() '() '() '((dotted-list? . G50e3) (circular-list? . G50e2) (proper-list? . G50e1) (circular-list . G50e0) (last . G50df) (last-pair . G50de) (not-pair? . G50dd) (split-at! . G50dc) (split-at . G50db) (list= . G50da) (list-copy . G50d9) (list-tabulate . G50d8) (make-list . G50d7) (xcons . G50d6) (tenth . G50d5) (ninth . G50d4) (eighth . G50d3) (seventh . G50d2) (sixth . G50d1) (fifth . G50d0) (drop-right! . G50cf) (drop-right . G50ce) (take-right . G50cd) (take! . G50cc) (drop . G50cb) (take . G50ca) (car+cdr . G50c9) (third . G50c8) (second . G50c7) (first . G50c6) (alist-cons . G50c4)) '() values values '#f '#f '#f '#f))
((lambda (G4d8a@for-each-with-index G4d8c@repl G4d8e@trace-printer G4d90@command-line G4d92@local-library-path G4d94@load/args G4d96@load G4d98@ironscheme-build G4d9a@eval-top-level G4d9c@compile-system-libraries G4d9e@compile G4da0@compile->closure G4da2@load-r6rs-top-level G4da4@write-record) (begin (set! G4d8a@for-each-with-index (lambda (G4db9@proc G4dba@lst) (letrec ((G4dbd@loop (lambda (G4dbf@i G4dc0@lst) (if (null? G4dc0@lst) (if '#f '#f (void)) (begin (G4db9@proc G4dbf@i (car G4dc0@lst)) (G4dbd@loop (+ G4dbf@i '1) (cdr G4dc0@lst))))))) (G4dbd@loop '1 G4dba@lst)))) (set! G4d8c@repl (lambda G4dc3@x ((lambda (G4dc6@rec) (begin (set! G4dc6@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4dc8@G4dc7) (with-exception-handler (lambda (G4dca@e) (G4dc8@G4dc7 (if '#t (G4d8a@for-each-with-index (lambda (G4dcc@i G4dcd@x) ((lambda (G4dd0@rtd) (begin (format '#t '"   ~d. ~a" G4dcc@i (record-type-name G4dd0@rtd)) ((lambda (G4dd2@v) ((lambda (G4dd4@t) (if (memv G4dd4@t '(0)) (newline) (if (memv G4dd4@t '(1)) (begin (display '": ") (write ((record-accessor G4dd0@rtd '0) G4dcd@x)) (newline)) (begin (display '":\n") ((letrec ((G4dd6@f (lambda (G4dd8@i) (if (not (= G4dd8@i (vector-length G4dd2@v))) (begin (display '"       ") (display (vector-ref G4dd2@v G4dd8@i)) (display '": ") (write ((record-accessor G4dd0@rtd G4dd8@i) G4dcd@x)) (newline) (G4dd6@f (+ G4dd8@i '1))) (void))))) G4dd6@f) '0))))) (vector-length G4dd2@v))) (record-type-field-names G4dd0@rtd)))) (record-rtd G4dcd@x))) (simple-conditions G4dca@e)) (raise G4dca@e)))) (lambda () (begin '#f ((lambda (G4dda@line) (if (eof-object? G4dda@line) (exit) (write (G4d9a@eval-top-level (call-with-port (open-string-input-port G4dda@line) read))))) (get-line (current-input-port)))))))) (newline) (G4dc6@rec)))) (G4dc6@rec))) '#f))) (set! G4d8e@trace-printer (G296e@G2885@make-parameter write)) (set! G4d90@command-line (G296e@G2885@make-parameter (get-command-line))) (set! G4d92@local-library-path (lambda (G4ddc@filename) (cons '"." (G2bff@G2a82@library-path)))) (set! G4d94@load/args (lambda (G4dde@filename . G4de0@args) (begin (apply G4da2@load-r6rs-top-level G4dde@filename 'load G4de0@args) (void)))) (set! G4d96@load (lambda (G4de2@filename) (begin (apply G4da2@load-r6rs-top-level G4de2@filename 'load (G4d90@command-line)) (void)))) (set! G4d98@ironscheme-build (lambda () (G4d96@load '"ironscheme-buildscript.ss"))) (set! G4d9a@eval-top-level (lambda (G4de4@x) (G4a85@G3130@eval G4de4@x (G4a9c@G315e@interaction-environment)))) (set! G4d9c@compile-system-libraries (lambda () (G4d9a@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d9e@compile (lambda (G4de6@filename) (G4da2@load-r6rs-top-level G4de6@filename 'compile))) (set! G4da0@compile->closure (lambda (G4de8@filename) (G4da2@load-r6rs-top-level G4de8@filename 'closure))) (set! G4da2@load-r6rs-top-level (lambda (G4dea@filename G4deb@how . G4dee@args) ((lambda (G4df2@G4df0@library-path G4df3@G4df1@library-path) ((lambda (G4df6@swap) (dynamic-wind G4df6@swap (lambda () ((lambda (G4df8@x*) ((lambda (G4dfa@t) (if (memv G4dfa@t '(closure)) (G4a9b@G315c@pre-compile-r6rs-top-level G4df8@x*) (if (memv G4dfa@t '(load)) ((lambda (G4dfe@G4dfc@command-line G4dff@G4dfd@command-line) ((lambda (G4e02@swap) (dynamic-wind G4e02@swap (lambda () ((G4a9a@G315a@compile-r6rs-top-level G4df8@x*))) G4e02@swap)) (lambda () ((lambda (G4e04@t) (begin (G4dfe@G4dfc@command-line G4dff@G4dfd@command-line) (set! G4dff@G4dfd@command-line G4e04@t))) (G4dfe@G4dfc@command-line))))) G4d90@command-line (cons G4dea@filename (car G4dee@args))) (if (memv G4dfa@t '(compile)) (begin (G4a9a@G315a@compile-r6rs-top-level G4df8@x*) (G2c03@G2a8a@serialize-all G2969@G287b@serialize-library G29d3@G297c@compile-core-expr)) (if '#f '#f (void)))))) G4deb@how)) (with-input-from-file G4dea@filename (lambda () ((letrec ((G4e06@f (lambda () ((lambda (G4e08@x) (if (eof-object? G4e08@x) '() (cons G4e08@x (G4e06@f)))) (G2964@G2871@read-annotated))))) G4e06@f)))))) G4df6@swap)) (lambda () ((lambda (G4e0a@t) (begin (G4df2@G4df0@library-path G4df3@G4df1@library-path) (set! G4df3@G4df1@library-path G4e0a@t))) (G4df2@G4df0@library-path))))) G2bff@G2a82@library-path (G4d92@local-library-path G4dea@filename)))) (set! G4da4@write-record (lambda (G4e0c@record G4e0d@port) ((lambda (G4e10@rtd) (begin (format G4e0d@port '"    ~a" (record-type-name G4e10@rtd)) ((lambda (G4e12@v) ((lambda (G4e14@t) (if (memv G4e14@t '(0)) (newline) (if (memv G4e14@t '(1)) (begin (display '": " G4e0d@port) (write ((record-accessor G4e10@rtd '0) G4e0c@record) G4e0d@port) (newline G4e0d@port)) (begin (display '":\n") ((letrec ((G4e16@f (lambda (G4e18@i) (if (not (= G4e18@i (vector-length G4e12@v))) (begin (display '"       " G4e0d@port) (display (vector-ref G4e12@v G4e18@i) G4e0d@port) (display '": " G4e0d@port) (write ((record-accessor G4e10@rtd G4e18@i) G4e0c@record) G4e0d@port) (newline G4e0d@port) (G4e16@f (+ G4e18@i '1))) (void))))) G4e16@f) '0))))) (vector-length G4e12@v))) (record-type-field-names G4e10@rtd)))) (record-rtd G4e0c@record)))) (begin (set! G4e27@G4da4@write-record G4da4@write-record) (set! G4e26@G4da2@load-r6rs-top-level G4da2@load-r6rs-top-level) (set! G4e25@G4da0@compile->closure G4da0@compile->closure) (set! G4e24@G4d9e@compile G4d9e@compile) (set! G4e23@G4d9c@compile-system-libraries G4d9c@compile-system-libraries) (set! G4e22@G4d9a@eval-top-level G4d9a@eval-top-level) (set! G4e21@G4d98@ironscheme-build G4d98@ironscheme-build) (set! G4e20@G4d96@load G4d96@load) (set! G4e1f@G4d94@load/args G4d94@load/args) (set! G4e1e@G4d92@local-library-path G4d92@local-library-path) (set! G4e1d@G4d90@command-line G4d90@command-line) (set! G4e1c@G4d8e@trace-printer G4d8e@trace-printer) (set! G4e1b@G4d8c@repl G4d8c@repl) (set! G4e1a@G4d8a@for-each-with-index G4d8a@for-each-with-index) (G2c04@G2a8c@current-precompiled-library-loader G296a@G287d@load-serialized-library) (set-symbol-value! 'load G4d96@load) (set-symbol-value! 'load-r6rs-top-level G4da2@load-r6rs-top-level) (set-symbol-value! 'eval-r6rs G4d9a@eval-top-level) (set-symbol-value! 'int-env-syms G4a7c@G311e@interaction-environment-symbols) (set-symbol-value! 'expanded2core G29d2@G297a@expanded->core) (set-symbol-value! 'trace-printer G4d8e@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2bff@G2a82@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4da5@args G4da6@port) (with-exception-handler (lambda (G4da9@c) (begin (display '" Condition components:\n" G4da6@port) (G4d8a@for-each-with-index (lambda (G4dab@i G4dac@x) ((lambda (G4daf@rtd) (begin (format G4da6@port '"   ~d. ~a" G4dab@i (record-type-name G4daf@rtd)) ((lambda (G4db1@v) ((lambda (G4db3@t) (if (memv G4db3@t '(0)) (newline) (if (memv G4db3@t '(1)) (begin (display '": ") (write ((record-accessor G4daf@rtd '0) G4dac@x)) (newline)) (begin (display '":\n") ((letrec ((G4db5@f (lambda (G4db7@i) (if (not (= G4db7@i (vector-length G4db1@v))) (begin (display '"       ") (display (vector-ref G4db1@v G4db7@i)) (display '": ") (write ((record-accessor G4daf@rtd G4db7@i) G4dac@x)) (newline) (G4db5@f (+ G4db7@i '1))) (void))))) G4db5@f) '0))))) (vector-length G4db1@v))) (record-type-field-names G4daf@rtd)))) (record-rtd G4dac@x))) (simple-conditions G4da9@c)))) (lambda () (if (null? G4da5@args) (G4d8c@repl) (G4da2@load-r6rs-top-level (car G4da5@args) 'load (cdr G4da5@args)))))) (G4d90@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
