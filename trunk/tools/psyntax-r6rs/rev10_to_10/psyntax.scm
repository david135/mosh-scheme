;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G280a@read-annotated G280c@annotation-stripped G280e@annotation? G2810@annotation-source G2812@annotation-expression G2814@scm->fasl G2816@fasl-save G2818@fasl-load G281a@serialize-library G281c@load-serialized-library G281e@make-record-printer G2820@compile-core G2822@read-library-source-file G2824@make-parameter G2888@file-options-spec) (begin (set! G280a@read-annotated read) (set! G280c@annotation-stripped (lambda (G2889@x) (G2812@annotation-expression G2889@x))) (set! G280e@annotation? (lambda (G288b@x) (source-info G288b@x))) (set! G2810@annotation-source (lambda (G288d@x) (source-info G288d@x))) (set! G2812@annotation-expression (lambda (G288f@x) (if (pair? G288f@x) (cons (car G288f@x) (cdr G288f@x)) (display '"line:46\n")))) (set! G2814@scm->fasl (lambda (G2891@filename) (string-append G2891@filename '".fasl"))) (set! G2816@fasl-save (lambda (G2893@filename G2894@obj) (call-with-port (open-file-output-port G2893@filename) (lambda (G2897@port) ((symbol-value 'fasl-write!) G2894@obj G2897@port))))) (set! G2818@fasl-load (lambda (G2899@filename) (call-with-port (open-file-input-port G2899@filename) (symbol-value 'fasl-read!)))) (set! G281a@serialize-library (lambda (G289b@filename G289c@obj) (begin (format '#t '"serialize-library ~a\n..." G289b@filename) ((lambda (G289f@expanded2core) ((lambda (G28a1@compile) ((lambda (G28a3@code) ((lambda (G28a5@pivot) ((lambda (G28a7@visit) ((lambda () (begin (set-car! G28a5@pivot G28a7@visit) ((lambda (G28a9@pivot) ((lambda (G28ab@invoke) ((lambda () (set-car! G28a9@pivot G28ab@invoke)))) (G28a1@compile (G289f@expanded2core (car G28a9@pivot))))) (cdr G28a5@pivot)))))) (G28a1@compile (G289f@expanded2core (car G28a5@pivot))))) (cddddr (cddddr G28a3@code)))) G289c@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (G28ad@fasl-file) (begin (if (file-exists? G28ad@fasl-file) (delete-file G28ad@fasl-file) (void)) ((call/cc (lambda (G28b1@G28af) (lambda () (with-exception-handler (lambda (G28b3@c) ((call/cc (lambda (G28b5@G28b0) (G28b1@G28af (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G289b@filename) (if (file-exists? G28ad@fasl-file) (delete-file G28ad@fasl-file) (void)) '#f) (G28b5@G28b0 (lambda () (raise-continuable G28b3@c)))))))))) (lambda () (begin (G2816@fasl-save G28ad@fasl-file G289c@obj) (display '"OK\n")))))))))) (G2814@scm->fasl G289b@filename))))) (set! G281c@load-serialized-library (lambda (G28b7@filename G28b8@obj) ((lambda (G28bb@fasl-file) (if (and (file-exists? G28bb@fasl-file) ((symbol-value 'file-newer?) G28bb@fasl-file G28b7@filename)) ((lambda (G28bd@expanded2core) ((lambda (G28bf@eval-compiled-core) ((lambda (G28c1@code) ((lambda (G28c3@pivot) ((lambda (G28c5@visit) ((lambda (G28c7@visit-proc) ((lambda () (begin (set-car! G28c3@pivot G28c7@visit-proc) ((lambda (G28c9@pivot) ((lambda (G28cb@invoke) ((lambda () (begin (set-car! G28c9@pivot (lambda () (G28bf@eval-compiled-core G28cb@invoke))) (apply G28b8@obj G28c1@code))))) (car G28c9@pivot))) (cdr G28c3@pivot)) '#t)))) (lambda () (G28bf@eval-compiled-core G28c5@visit)))) (car G28c3@pivot))) (cddddr (cddddr G28c1@code)))) (G2818@fasl-load G28bb@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (G2814@scm->fasl G28b7@filename)))) (set! G281e@make-record-printer (lambda (G28cd@name G28ce@printer) (lambda G28d1@x (begin (display '"record printer") (for-each display G28d1@x))))) (set! G2820@compile-core (lambda G28d3@x (apply error 'comile-core '"not implementated" G28d3@x))) (set! G2822@read-library-source-file (lambda (G28d5@file-name) (with-input-from-file G28d5@file-name G280a@read-annotated))) (set! G2824@make-parameter (lambda G28e5 ((lambda (G28e6) (if (= G28e6 '1) (apply (lambda (G28d7@x) (G2824@make-parameter G28d7@x (lambda (G28d9@x) G28d9@x))) G28e5) (if (= G28e6 '2) (apply (lambda (G28db@x G28dc@fender) ((lambda (G28df@x) (lambda G28e3 ((lambda (G28e4) (if (= G28e4 '0) (apply (lambda () G28df@x) G28e3) (if (= G28e4 '1) (apply (lambda (G28e1@v) (set! G28df@x (G28dc@fender G28e1@v))) G28e3) (error 'apply '"invalid arg count")))) (length G28e3)))) (G28dc@fender G28db@x))) G28e5) (error 'apply '"invalid arg count")))) (length G28e5)))) (set! G2888@file-options-spec (lambda (G28e7@x) G28e7@x)) (begin (set! G28f7@G2888@file-options-spec G2888@file-options-spec) (set! G28f6@G2824@make-parameter G2824@make-parameter) (set! G28f5@G2822@read-library-source-file G2822@read-library-source-file) (set! G28f4@G2820@compile-core G2820@compile-core) (set! G28f3@G281e@make-record-printer G281e@make-record-printer) (set! G28f2@G281c@load-serialized-library G281c@load-serialized-library) (set! G28f1@G281a@serialize-library G281a@serialize-library) (set! G28f0@G2818@fasl-load G2818@fasl-load) (set! G28ef@G2816@fasl-save G2816@fasl-save) (set! G28ee@G2814@scm->fasl G2814@scm->fasl) (set! G28ed@G2812@annotation-expression G2812@annotation-expression) (set! G28ec@G2810@annotation-source G2810@annotation-source) (set! G28eb@G280e@annotation? G280e@annotation?) (set! G28ea@G280c@annotation-stripped G280c@annotation-stripped) (set! G28e9@G280a@read-annotated G280a@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G28fc@current-primitive-locations G28fe@mutable? G2900@rewriter G2902@expanded->core G2904@compile-core-expr G2906@pretty-print G2908@compile-core-expr-to-port) (begin (set! G28fc@current-primitive-locations (G28f6@G2824@make-parameter (lambda (G2909@x) '#f) (lambda (G290b@p) G290b@p))) (set! G28fe@mutable? (lambda (G290d@x) (or (pair? G290d@x) (vector? G290d@x) (hashtable? G290d@x)))) (set! G2900@rewriter (lambda (G290f@quote-hack?) ((lambda (G2912@f) (begin (set! G2912@f (lambda (G2913@x) (if (pair? G2913@x) ((lambda (G2915@t) (if (memv G2915@t '(quote)) (if (and G290f@quote-hack? (G28fe@mutable? (cadr G2913@x))) ((lambda (G2917@g) (begin (set-symbol-value! G2917@g (cadr G2913@x)) G2917@g)) (gensym)) G2913@x) (if (memv G2915@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2919@x) (cons (car G2919@x) (map G2912@f (cdr G2919@x)))) (cdr G2913@x))) (if (memv G2915@t '(lambda)) (cons* 'lambda (cadr G2913@x) (map G2912@f (cddr G2913@x))) (if (memv G2915@t '(letrec)) ((lambda (G291b@bindings G291c@body*) ((lambda (G291f@lhs* G2920@rhs*) (cons* 'letrec (map list G291f@lhs* (map G2912@f G2920@rhs*)) (map G2912@f G291c@body*))) (map car G291b@bindings) (map cadr G291b@bindings))) (cadr G2913@x) (cddr G2913@x)) (if (memv G2915@t '(letrec*)) ((lambda (G2923@bindings G2924@body*) ((lambda (G2927@lhs* G2928@rhs*) (cons* 'letrec* (map list G2927@lhs* (map G2912@f G2928@rhs*)) (map G2912@f G2924@body*))) (map car G2923@bindings) (map cadr G2923@bindings))) (cadr G2913@x) (cddr G2913@x)) (if (memv G2915@t '(library-letrec*)) ((lambda (G292b@name G292c@x) ((lambda (G292f@bindings G2930@body*) ((lambda (G2933@lhs* G2934@lhs** G2935@rhs*) (cons* 'library-letrec* G292b@name (map list G2933@lhs* G2934@lhs** (map G2912@f G2935@rhs*)) (map G2912@f G2930@body*))) (map car G292f@bindings) (map cadr G292f@bindings) (map caddr G292f@bindings))) (cadr G292c@x) (cddr G292c@x))) (cadr G2913@x) (cdr G2913@x)) (if (memv G2915@t '(begin)) (cons 'begin (map G2912@f (cdr G2913@x))) (if (memv G2915@t '(set!)) (list 'set! (cadr G2913@x) (G2912@f (caddr G2913@x))) (if (memv G2915@t '(primitive)) ((lambda (G2939@op) ((lambda (G293b@t) (if G293b@t ((lambda (G293d@loc) G293d@loc) G293b@t) G2939@op)) ((G28fc@current-primitive-locations) G2939@op))) (cadr G2913@x)) (if (memv G2915@t '(define)) G2913@x (if (list? G2913@x) (map G2912@f G2913@x) (error 'rewrite '"invalid form ~s ~s" G2913@x (list? G2913@x)))))))))))))) (car G2913@x)) G2913@x))) G2912@f)) '#f))) (set! G2902@expanded->core (lambda (G293f@x) ((G2900@rewriter '#f) G293f@x))) (set! G2904@compile-core-expr (lambda (G2941@x) ((G2900@rewriter '#f) G2941@x))) (set! G2906@pretty-print write) (set! G2908@compile-core-expr-to-port (lambda (G2943@x G2944@p) (G2906@pretty-print ((G2900@rewriter '#f) G2943@x) G2944@p))) (begin (set! G294d@G2908@compile-core-expr-to-port G2908@compile-core-expr-to-port) (set! G294c@G2906@pretty-print G2906@pretty-print) (set! G294b@G2904@compile-core-expr G2904@compile-core-expr) (set! G294a@G2902@expanded->core G2902@expanded->core) (set! G2949@G2900@rewriter G2900@rewriter) (set! G2948@G28fe@mutable? G28fe@mutable?) (set! G2947@G28fc@current-primitive-locations G28fc@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G299c@make-collection G299e@current-library-collection G29a4@G299f G29a6@G29a1 G29a8@G29a0 G29ab@library? G29ad@make-library G29af@library-id G29b1@library-name G29b3@library-version G29b5@library-imp* G29b7@library-vis* G29b9@library-inv* G29bb@library-subst G29bd@library-env G29bf@library-visit-state G29c1@library-invoke-state G29c3@library-visit-code G29c5@library-invoke-code G29c7@library-visible? G29c9@library-source-file-name G29cb@set-library-id! G29cd@set-library-name! G29cf@set-library-version! G29d1@set-library-imp*! G29d3@set-library-vis*! G29d5@set-library-inv*! G29d7@set-library-subst! G29d9@set-library-env! G29db@set-library-visit-state! G29dd@set-library-invoke-state! G29df@set-library-visit-code! G29e1@set-library-invoke-code! G29e3@set-library-visible?! G29e5@set-library-source-file-name! G29e7@rp G29e9@find-dependencies G29eb@find-library-by G29ed@library-path G29ef@library-extensions G29f1@library-name->file-name G29f3@file-locator G29f5@serialize-all G29f7@current-precompiled-library-loader G29f9@try-load-from-file G29fb@library-loader G29fd@current-library-expander G29ff@external-pending-libraries G2a01@find-external-library G2a03@find-library-by-name G2a05@library-exists? G2a07@find-library-by-spec/die G2a09@label->binding-table G2a0b@install-library-record G2a0d@install-library G2a0f@imported-label->binding G2a11@invoke-library G2a13@visit-library G2a15@invoke-library-by-spec G2a17@installed-libraries G2a19@library-spec) (begin (set! G299c@make-collection (lambda () ((lambda (G2a1a@set) ((lambda (G2a1d@set-cons) (begin (set! G2a1d@set-cons (lambda (G2a22@x G2a23@ls) (if (memq G2a22@x G2a23@ls) G2a23@ls (cons G2a22@x G2a23@ls)))) (lambda G2a20 ((lambda (G2a21) (if (= G2a21 '0) (apply (lambda () G2a1a@set) G2a20) (if (= G2a21 '1) (apply (lambda (G2a1e@x) (set! G2a1a@set (G2a1d@set-cons G2a1e@x G2a1a@set))) G2a20) (error 'apply '"invalid arg count")))) (length G2a20))))) '#f)) '()))) (set! G299e@current-library-collection (G28f6@G2824@make-parameter (G299c@make-collection) (lambda (G2a26@x) (begin (if (not (procedure? G2a26@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a26@x) (void)) G2a26@x)))) (set! G29a4@G299f (make-record-type-descriptor 'library '#f 'G29a2 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29a6@G29a1 '#f) (set! G29a8@G29a0 (make-record-constructor-descriptor G29a4@G299f '#f G29a6@G29a1)) (set! G29ab@library? (record-predicate G29a4@G299f)) (set! G29ad@make-library (record-constructor G29a8@G29a0)) (set! G29af@library-id (record-accessor G29a4@G299f '0)) (set! G29b1@library-name (record-accessor G29a4@G299f '1)) (set! G29b3@library-version (record-accessor G29a4@G299f '2)) (set! G29b5@library-imp* (record-accessor G29a4@G299f '3)) (set! G29b7@library-vis* (record-accessor G29a4@G299f '4)) (set! G29b9@library-inv* (record-accessor G29a4@G299f '5)) (set! G29bb@library-subst (record-accessor G29a4@G299f '6)) (set! G29bd@library-env (record-accessor G29a4@G299f '7)) (set! G29bf@library-visit-state (record-accessor G29a4@G299f '8)) (set! G29c1@library-invoke-state (record-accessor G29a4@G299f '9)) (set! G29c3@library-visit-code (record-accessor G29a4@G299f '10)) (set! G29c5@library-invoke-code (record-accessor G29a4@G299f '11)) (set! G29c7@library-visible? (record-accessor G29a4@G299f '12)) (set! G29c9@library-source-file-name (record-accessor G29a4@G299f '13)) (set! G29cb@set-library-id! (record-mutator G29a4@G299f '0)) (set! G29cd@set-library-name! (record-mutator G29a4@G299f '1)) (set! G29cf@set-library-version! (record-mutator G29a4@G299f '2)) (set! G29d1@set-library-imp*! (record-mutator G29a4@G299f '3)) (set! G29d3@set-library-vis*! (record-mutator G29a4@G299f '4)) (set! G29d5@set-library-inv*! (record-mutator G29a4@G299f '5)) (set! G29d7@set-library-subst! (record-mutator G29a4@G299f '6)) (set! G29d9@set-library-env! (record-mutator G29a4@G299f '7)) (set! G29db@set-library-visit-state! (record-mutator G29a4@G299f '8)) (set! G29dd@set-library-invoke-state! (record-mutator G29a4@G299f '9)) (set! G29df@set-library-visit-code! (record-mutator G29a4@G299f '10)) (set! G29e1@set-library-invoke-code! (record-mutator G29a4@G299f '11)) (set! G29e3@set-library-visible?! (record-mutator G29a4@G299f '12)) (set! G29e5@set-library-source-file-name! (record-mutator G29a4@G299f '13)) (set! G29e7@rp (G28f3@G281e@make-record-printer 'library (lambda (G2a28@x G2a29@p G2a2a@wr) (begin (if (not (G29ab@library? G2a28@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29b3@library-version G2a28@x)) (G29b1@library-name G2a28@x) (append (G29b1@library-name G2a28@x) (list (G29b3@library-version G2a28@x))))) G2a29@p))))) (set! G29e9@find-dependencies (lambda (G2a2e@ls) (if (null? G2a2e@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29eb@find-library-by (lambda (G2a30@pred) ((letrec ((G2a32@f (lambda (G2a34@ls) (if (null? G2a34@ls) '#f (if (G2a30@pred (car G2a34@ls)) (car G2a34@ls) (G2a32@f (cdr G2a34@ls))))))) G2a32@f) ((G299e@current-library-collection))))) (set! G29ed@library-path (G28f6@G2824@make-parameter '(".") (lambda (G2a36@x) (if (and (list? G2a36@x) (for-all string? G2a36@x)) (map (lambda (G2a38@x) G2a38@x) G2a36@x) (assertion-violation 'library-path '"not a list of strings" G2a36@x))))) (set! G29ef@library-extensions (G28f6@G2824@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a3a@x) (if (and (list? G2a3a@x) (for-all string? G2a3a@x)) (map (lambda (G2a3c@x) G2a3c@x) G2a3a@x) (assertion-violation 'library-extensions '"not a list of strings" G2a3a@x))))) (set! G29f1@library-name->file-name (lambda (G2a3e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a42@G2a40 G2a43@G2a41) ((lambda (G2a46@extract G2a47@p) ((lambda (G2a4b@display-hex) (begin (set! G2a4b@display-hex (lambda (G2a54@n) (if (<= '0 G2a54@n '9) (display G2a54@n G2a47@p) (display (integer->char (+ (char->integer '#\A) (- G2a54@n '10))) G2a47@p)))) (begin ((letrec ((G2a4c@f (lambda (G2a4e@ls) (if (not (null? G2a4e@ls)) (begin (display '"/" G2a47@p) (for-each (lambda (G2a50@c) (if (or (char<=? '#\a G2a50@c '#\z) (char<=? '#\A G2a50@c '#\Z) (char<=? '#\0 G2a50@c '#\9) (memv G2a50@c '(#\- #\. #\_ #\~))) (display G2a50@c G2a47@p) (begin (display '"%" G2a47@p) ((lambda (G2a52@n) (begin (G2a4b@display-hex (quotient G2a52@n '16)) (G2a4b@display-hex (remainder G2a52@n '16)))) (char->integer G2a50@c))))) (string->list (symbol->string (car G2a4e@ls)))) (G2a4c@f (cdr G2a4e@ls))) (void))))) G2a4c@f) G2a3e@x) (G2a46@extract)))) '#f)) G2a43@G2a41 G2a42@G2a40))))) (set! G29f3@file-locator (G28f6@G2824@make-parameter (lambda (G2a56@x) ((lambda (G2a58@str) ((letrec ((G2a5a@f (lambda (G2a5c@ls G2a5d@exts G2a5e@failed-list) (if (null? G2a5c@ls) ((lambda () ((lambda (G2a6a@G2a65 G2a6c@G2a67 G2a6e@G2a66 G2a71@G2a64 G2a73@make-library-resolution-condition G2a75@G2a62 G2a77@G2a63 G2a79@library-resolution-condition? G2a7b@condition-library G2a7d@condition-files) (begin (set! G2a6a@G2a65 (make-record-type-descriptor '&library-resolution G4bce@G4921@&condition-rtd 'G2a68 '#f '#f '#((immutable library) (immutable files)))) (set! G2a6c@G2a67 '#f) (set! G2a6e@G2a66 (make-record-constructor-descriptor G2a6a@G2a65 G4bcf@G4923@&condition-rcd G2a6c@G2a67)) (set! G2a71@G2a64 (record-predicate G2a6a@G2a65)) (set! G2a73@make-library-resolution-condition (record-constructor G2a6e@G2a66)) (set! G2a75@G2a62 (record-accessor G2a6a@G2a65 '0)) (set! G2a77@G2a63 (record-accessor G2a6a@G2a65 '1)) (set! G2a79@library-resolution-condition? (condition-predicate G2a6a@G2a65)) (set! G2a7b@condition-library (condition-accessor G2a6a@G2a65 G2a75@G2a62)) (set! G2a7d@condition-files (condition-accessor G2a6a@G2a65 G2a77@G2a63)) (raise (condition (G4bee@G49b7@make-error) (G4c10@G4a11@make-who-condition 'expander) (G4bd4@G4974@make-message-condition '"cannot locate library in library-path") (G2a73@make-library-resolution-condition G2a56@x (reverse G2a5e@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a5d@exts) (G2a5a@f (cdr G2a5c@ls) (G29ef@library-extensions) G2a5e@failed-list) ((lambda (G2a7e@name) (if (file-exists? G2a7e@name) G2a7e@name (G2a5a@f G2a5c@ls (cdr G2a5d@exts) (cons G2a7e@name G2a5e@failed-list)))) (string-append (car G2a5c@ls) G2a58@str (car G2a5d@exts)))))))) G2a5a@f) (G29ed@library-path) (G29ef@library-extensions) '())) (G29f1@library-name->file-name G2a56@x))) (lambda (G2a80@f) (if (procedure? G2a80@f) G2a80@f (assertion-violation 'file-locator '"not a procedure" G2a80@f))))) (set! G29f5@serialize-all (lambda (G2a82@serialize G2a83@compile) ((lambda (G2a87@library-desc) (begin (set! G2a87@library-desc (lambda (G2a8a@x) (list (G29af@library-id G2a8a@x) (G29b1@library-name G2a8a@x)))) (for-each (lambda (G2a88@x) (if (G29c9@library-source-file-name G2a88@x) (G2a82@serialize (G29c9@library-source-file-name G2a88@x) (list (G29af@library-id G2a88@x) (G29b1@library-name G2a88@x) (G29b3@library-version G2a88@x) (map G2a87@library-desc (G29b5@library-imp* G2a88@x)) (map G2a87@library-desc (G29b7@library-vis* G2a88@x)) (map G2a87@library-desc (G29b9@library-inv* G2a88@x)) (G29bb@library-subst G2a88@x) (G29bd@library-env G2a88@x) (G2a83@compile (G29c3@library-visit-code G2a88@x)) (G2a83@compile (G29c5@library-invoke-code G2a88@x)) (G29c7@library-visible? G2a88@x))) (void))) ((G299e@current-library-collection))))) '#f))) (set! G29f7@current-precompiled-library-loader (G28f6@G2824@make-parameter (lambda (G2a8c@filename G2a8d@sk) '#f))) (set! G29f9@try-load-from-file (lambda (G2a90@filename) ((G29f7@current-precompiled-library-loader) G2a90@filename (lambda G2ab6 ((lambda (G2ab7) (if (= G2ab7 '11) (apply (lambda (G2a92@id G2a93@name G2a94@ver G2a95@imp* G2a96@vis* G2a97@inv* G2a98@exp-subst G2a99@exp-env G2a9a@visit-proc G2a9b@invoke-proc G2a9c@visible?) ((letrec ((G2aa8@f (lambda (G2aaa@deps) (if (null? G2aaa@deps) (begin (G2a0d@install-library G2a92@id G2a93@name G2a94@ver G2a95@imp* G2a96@vis* G2a97@inv* G2a98@exp-subst G2a99@exp-env G2a9a@visit-proc G2a9b@invoke-proc '#f '#f G2a9c@visible? '#f) '#t) ((lambda (G2aac@d) ((lambda (G2aae@label G2aaf@dname) ((lambda (G2ab2@l) (if (and (G29ab@library? G2ab2@l) (eq? G2aae@label (G29af@library-id G2ab2@l))) (G2aa8@f (cdr G2aaa@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2a93@name G2aaf@dname G2a90@filename G2ab2@l G2aae@label (G29af@library-id G2ab2@l)) '#f))) (G2a03@find-library-by-name G2aaf@dname))) (car G2aac@d) (cadr G2aac@d))) (car G2aaa@deps)))))) G2aa8@f) (append G2a95@imp* G2a96@vis* G2a97@inv*))) G2ab6) (if (>= G2ab7 '0) (apply (lambda G2ab4@others '#f) G2ab6) (error 'apply '"invalid arg count")))) (length G2ab6)))))) (set! G29fb@library-loader (G28f6@G2824@make-parameter (lambda (G2ab8@x) ((lambda (G2aba@file-name) (if (not G2aba@file-name) (assertion-violation '#f '"cannot file library" G2ab8@x) (or (G29f9@try-load-from-file G2aba@file-name) ((G29fd@current-library-expander) (G28f5@G2822@read-library-source-file G2aba@file-name) G2aba@file-name (lambda (G2abc@name) (if (not (fast-equal? G2abc@name G2ab8@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2ac0@G2abe G2ac1@G2abf) ((lambda (G2ac4@e G2ac5@p) (begin (display '"expected to find library " G2ac5@p) (write G2ab8@x G2ac5@p) (display '" in file " G2ac5@p) (display G2aba@file-name G2ac5@p) (display '", found " G2ac5@p) (write G2abc@name G2ac5@p) (display '" instead" G2ac5@p) (G2ac4@e))) G2ac1@G2abf G2ac0@G2abe)))) (void))))))) ((G29f3@file-locator) G2ab8@x))) (lambda (G2ac8@f) (if (procedure? G2ac8@f) G2ac8@f (assertion-violation 'library-locator '"not a procedure" G2ac8@f))))) (set! G29fd@current-library-expander (G28f6@G2824@make-parameter (lambda (G2aca@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2acc@f) (if (procedure? G2acc@f) G2acc@f (assertion-violation 'library-expander '"not a procedure" G2acc@f))))) (set! G29ff@external-pending-libraries (G28f6@G2824@make-parameter '())) (set! G2a01@find-external-library (lambda (G2ace@name) (begin (if (member G2ace@name (G29ff@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2ace@name) (void)) ((lambda (G2ad2@G2ad0 G2ad3@G2ad1) ((lambda (G2ad6@swap) (dynamic-wind G2ad6@swap (lambda () (begin ((G29fb@library-loader) G2ace@name) (or (G29eb@find-library-by (lambda (G2ad8@x) (fast-equal? (G29b1@library-name G2ad8@x) G2ace@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2ace@name)))) G2ad6@swap)) (lambda () ((lambda (G2ada@t) (begin (G2ad2@G2ad0 G2ad3@G2ad1) (set! G2ad3@G2ad1 G2ada@t))) (G2ad2@G2ad0))))) G29ff@external-pending-libraries (cons G2ace@name (G29ff@external-pending-libraries)))))) (set! G2a03@find-library-by-name (lambda (G2adc@name) (or (G29eb@find-library-by (lambda (G2ade@x) (fast-equal? (G29b1@library-name G2ade@x) G2adc@name))) (G2a01@find-external-library G2adc@name)))) (set! G2a05@library-exists? (lambda (G2ae0@name) (and (G29eb@find-library-by (lambda (G2ae2@x) (fast-equal? (G29b1@library-name G2ae2@x) G2ae0@name))) '#t))) (set! G2a07@find-library-by-spec/die (lambda (G2ae4@spec) ((lambda (G2ae6@id) (or (G29eb@find-library-by (lambda (G2ae8@x) (eq? G2ae6@id (G29af@library-id G2ae8@x)))) (assertion-violation '#f '"cannot find library with required spec" G2ae4@spec))) (car G2ae4@spec)))) (set! G2a09@label->binding-table (make-eq-hashtable)) (set! G2a0b@install-library-record (lambda (G2aea@lib) (begin ((lambda (G2aec@exp-env) (for-each (lambda (G2aee@x) ((lambda (G2af0@label G2af1@binding) ((lambda (G2af4@binding) (hashtable-set! G2a09@label->binding-table G2af0@label G2af4@binding)) ((lambda (G2af6@t) (if (memv G2af6@t '(global)) (cons 'global (cons G2aea@lib (cdr G2af1@binding))) (if (memv G2af6@t '(global-macro)) (cons 'global-macro (cons G2aea@lib (cdr G2af1@binding))) (if (memv G2af6@t '(global-macro!)) (cons 'global-macro! (cons G2aea@lib (cdr G2af1@binding))) G2af1@binding)))) (car G2af1@binding)))) (car G2aee@x) (cdr G2aee@x))) G2aec@exp-env)) (G29bd@library-env G2aea@lib)) ((G299e@current-library-collection) G2aea@lib)))) (set! G2a0d@install-library (lambda (G2af8@id G2af9@name G2afa@ver G2afb@imp* G2afc@vis* G2afd@inv* G2afe@exp-subst G2aff@exp-env G2b00@visit-proc G2b01@invoke-proc G2b02@visit-code G2b03@invoke-code G2b04@visible? G2b05@source-file-name) ((lambda (G2b14@imp-lib* G2b15@vis-lib* G2b16@inv-lib*) (begin (if (not (and (symbol? G2af8@id) (list? G2af9@name) (list? G2afa@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2af8@id G2af9@name G2afa@ver) (void)) (if (G2a05@library-exists? G2af9@name) (assertion-violation 'install-library '"library is already installed" G2af9@name) (void)) ((lambda (G2b1a@lib) (G2a0b@install-library-record G2b1a@lib)) (G29ad@make-library G2af8@id G2af9@name G2afa@ver G2b14@imp-lib* G2b15@vis-lib* G2b16@inv-lib* G2afe@exp-subst G2aff@exp-env G2b00@visit-proc G2b01@invoke-proc G2b02@visit-code G2b03@invoke-code G2b04@visible? G2b05@source-file-name)))) (map G2a07@find-library-by-spec/die G2afb@imp*) (map G2a07@find-library-by-spec/die G2afc@vis*) (map G2a07@find-library-by-spec/die G2afd@inv*)))) (set! G2a0f@imported-label->binding (lambda (G2b1c@lab) (hashtable-ref G2a09@label->binding-table G2b1c@lab '#f))) (set! G2a11@invoke-library (lambda (G2b1e@lib) ((lambda (G2b20@invoke) (if (procedure? G2b20@invoke) (begin (G29dd@set-library-invoke-state! G2b1e@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b1e@lib))) (for-each G2a11@invoke-library (G29b9@library-inv* G2b1e@lib)) (G29dd@set-library-invoke-state! G2b1e@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b1e@lib))) (G2b20@invoke) (G29dd@set-library-invoke-state! G2b1e@lib '#t)) (void))) (G29c1@library-invoke-state G2b1e@lib)))) (set! G2a13@visit-library (lambda (G2b22@lib) ((lambda (G2b24@visit) (if (procedure? G2b24@visit) (begin (G29db@set-library-visit-state! G2b22@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b22@lib))) (for-each G2a11@invoke-library (G29b7@library-vis* G2b22@lib)) (G29db@set-library-visit-state! G2b22@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b22@lib))) (G2b24@visit) (G29db@set-library-visit-state! G2b22@lib '#t)) (void))) (G29bf@library-visit-state G2b22@lib)))) (set! G2a15@invoke-library-by-spec (lambda (G2b26@spec) (G2a11@invoke-library (G2a07@find-library-by-spec/die G2b26@spec)))) (set! G2a17@installed-libraries (lambda G2b2e ((lambda (G2b2f) (if (= G2b2f '1) (apply (lambda (G2b28@all?) ((letrec ((G2b2a@f (lambda (G2b2c@ls) (if (null? G2b2c@ls) '() (if (or G2b28@all? (G29c7@library-visible? (car G2b2c@ls))) (cons (car G2b2c@ls) (G2b2a@f (cdr G2b2c@ls))) (G2b2a@f (cdr G2b2c@ls))))))) G2b2a@f) ((G299e@current-library-collection)))) G2b2e) (if (= G2b2f '0) (apply (lambda () (G2a17@installed-libraries '#f)) G2b2e) (error 'apply '"invalid arg count")))) (length G2b2e)))) (set! G2a19@library-spec (lambda (G2b30@x) (begin (if (not (G29ab@library? G2b30@x)) (assertion-violation 'library-spec '"not a library" G2b30@x) (void)) (list (G29af@library-id G2b30@x) (G29b1@library-name G2b30@x) (G29b3@library-version G2b30@x))))) (begin (set! G2b6e@G2a19@library-spec G2a19@library-spec) (set! G2b6d@G2a17@installed-libraries G2a17@installed-libraries) (set! G2b6c@G2a15@invoke-library-by-spec G2a15@invoke-library-by-spec) (set! G2b6b@G2a13@visit-library G2a13@visit-library) (set! G2b6a@G2a11@invoke-library G2a11@invoke-library) (set! G2b69@G2a0f@imported-label->binding G2a0f@imported-label->binding) (set! G2b68@G2a0d@install-library G2a0d@install-library) (set! G2b67@G2a0b@install-library-record G2a0b@install-library-record) (set! G2b66@G2a09@label->binding-table G2a09@label->binding-table) (set! G2b65@G2a07@find-library-by-spec/die G2a07@find-library-by-spec/die) (set! G2b64@G2a05@library-exists? G2a05@library-exists?) (set! G2b63@G2a03@find-library-by-name G2a03@find-library-by-name) (set! G2b62@G2a01@find-external-library G2a01@find-external-library) (set! G2b61@G29ff@external-pending-libraries G29ff@external-pending-libraries) (set! G2b60@G29fd@current-library-expander G29fd@current-library-expander) (set! G2b5f@G29fb@library-loader G29fb@library-loader) (set! G2b5e@G29f9@try-load-from-file G29f9@try-load-from-file) (set! G2b5d@G29f7@current-precompiled-library-loader G29f7@current-precompiled-library-loader) (set! G2b5c@G29f5@serialize-all G29f5@serialize-all) (set! G2b5b@G29f3@file-locator G29f3@file-locator) (set! G2b5a@G29f1@library-name->file-name G29f1@library-name->file-name) (set! G2b59@G29ef@library-extensions G29ef@library-extensions) (set! G2b58@G29ed@library-path G29ed@library-path) (set! G2b57@G29eb@find-library-by G29eb@find-library-by) (set! G2b56@G29e9@find-dependencies G29e9@find-dependencies) (set! G2b55@G29e7@rp G29e7@rp) (set! G2b54@G29e5@set-library-source-file-name! G29e5@set-library-source-file-name!) (set! G2b53@G29e3@set-library-visible?! G29e3@set-library-visible?!) (set! G2b52@G29e1@set-library-invoke-code! G29e1@set-library-invoke-code!) (set! G2b51@G29df@set-library-visit-code! G29df@set-library-visit-code!) (set! G2b50@G29dd@set-library-invoke-state! G29dd@set-library-invoke-state!) (set! G2b4f@G29db@set-library-visit-state! G29db@set-library-visit-state!) (set! G2b4e@G29d9@set-library-env! G29d9@set-library-env!) (set! G2b4d@G29d7@set-library-subst! G29d7@set-library-subst!) (set! G2b4c@G29d5@set-library-inv*! G29d5@set-library-inv*!) (set! G2b4b@G29d3@set-library-vis*! G29d3@set-library-vis*!) (set! G2b4a@G29d1@set-library-imp*! G29d1@set-library-imp*!) (set! G2b49@G29cf@set-library-version! G29cf@set-library-version!) (set! G2b48@G29cd@set-library-name! G29cd@set-library-name!) (set! G2b47@G29cb@set-library-id! G29cb@set-library-id!) (set! G2b46@G29c9@library-source-file-name G29c9@library-source-file-name) (set! G2b45@G29c7@library-visible? G29c7@library-visible?) (set! G2b44@G29c5@library-invoke-code G29c5@library-invoke-code) (set! G2b43@G29c3@library-visit-code G29c3@library-visit-code) (set! G2b42@G29c1@library-invoke-state G29c1@library-invoke-state) (set! G2b41@G29bf@library-visit-state G29bf@library-visit-state) (set! G2b40@G29bd@library-env G29bd@library-env) (set! G2b3f@G29bb@library-subst G29bb@library-subst) (set! G2b3e@G29b9@library-inv* G29b9@library-inv*) (set! G2b3d@G29b7@library-vis* G29b7@library-vis*) (set! G2b3c@G29b5@library-imp* G29b5@library-imp*) (set! G2b3b@G29b3@library-version G29b3@library-version) (set! G2b3a@G29b1@library-name G29b1@library-name) (set! G2b39@G29af@library-id G29af@library-id) (set! G2b38@G29ad@make-library G29ad@make-library) (set! G2b37@G29ab@library? G29ab@library?) (set! G2b36@G29a8@G29a0 G29a8@G29a0) (set! G2b35@G29a6@G29a1 G29a6@G29a1) (set! G2b34@G29a4@G299f G29a4@G299f) (set! G2b33@G299e@current-library-collection G299e@current-library-collection) (set! G2b32@G299c@make-collection G299c@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b71@build-global-define G2be2@build-lambda G2be4@build-case-lambda G2be6@build-let G2c14@build-sequence G2c16@build-void G2c18@build-letrec G2c1a@build-letrec* G2c1c@build-library-letrec* G2c1e@build-receive) (begin (set! G2b71@build-global-define (lambda (G2c1f@x) (G2c16@build-void))) (set! G2be2@build-lambda (lambda (G2c21@ae G2c22@vars G2c23@exp) (list 'lambda G2c22@vars G2c23@exp))) (set! G2be4@build-case-lambda (lambda (G2c27@ae G2c28@vars* G2c29@exp*) ((lambda (G2c2e@build-error G2c30@build-pred G2c32@build-apply G2c34@expand-case-lambda) (begin (set! G2c2e@build-error (lambda (G2c63@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c30@build-pred (lambda (G2c4d@ae G2c4e@n G2c4f@vars) (call-with-values (lambda () ((letrec ((G2c55@f (lambda (G2c57@vars G2c58@count) (if (pair? G2c57@vars) (G2c55@f (cdr G2c57@vars) (+ G2c58@count '1)) (if (null? G2c57@vars) (values G2c58@count '=) (values G2c58@count '>=)))))) G2c55@f) G2c4f@vars '0)) (lambda (G2c5b@G2c53 G2c5c@G2c54) ((lambda (G2c5f@pred G2c60@count) (list (list 'primitive G2c5f@pred) G2c4e@n (list 'quote G2c60@count))) G2c5c@G2c54 G2c5b@G2c53))))) (set! G2c32@build-apply (lambda (G2c45@ae G2c46@g G2c47@vars G2c48@exp) (list '(primitive apply) (G2be2@build-lambda G2c45@ae G2c47@vars G2c48@exp) G2c46@g))) (set! G2c34@expand-case-lambda (lambda (G2c35@ae G2c36@vars G2c37@exp*) ((lambda (G2c3b@g G2c3c@n) (list 'lambda G2c3b@g (G2be6@build-let G2c35@ae (list G2c3c@n) (list (list '(primitive length) G2c3b@g)) ((letrec ((G2c3f@f (lambda (G2c41@vars* G2c42@exp*) (if (null? G2c41@vars*) (G2c2e@build-error G2c35@ae) (list 'if (G2c30@build-pred G2c35@ae G2c3c@n (car G2c41@vars*)) (G2c32@build-apply G2c35@ae G2c3b@g (car G2c41@vars*) (car G2c42@exp*)) (G2c3f@f (cdr G2c41@vars*) (cdr G2c42@exp*))))))) G2c3f@f) G2c28@vars* G2c37@exp*)))) (gensym) (gensym)))) (if (= (length G2c29@exp*) '1) (G2be2@build-lambda G2c27@ae (car G2c28@vars*) (car G2c29@exp*)) (G2c34@expand-case-lambda G2c27@ae G2c28@vars* G2c29@exp*)))) '#f '#f '#f '#f))) (set! G2be6@build-let (lambda (G2c65@ae G2c66@lhs* G2c67@rhs* G2c68@body) (cons (G2be2@build-lambda G2c65@ae G2c66@lhs* G2c68@body) G2c67@rhs*))) (set! G2c14@build-sequence (lambda (G2c6d@ae G2c6e@exps) ((letrec ((G2c71@loop (lambda (G2c73@exps) (if (null? (cdr G2c73@exps)) (car G2c73@exps) (if (equal? (car G2c73@exps) (G2c16@build-void)) (G2c71@loop (cdr G2c73@exps)) (cons 'begin G2c73@exps)))))) G2c71@loop) G2c6e@exps))) (set! G2c16@build-void (lambda () '((primitive void)))) (set! G2c18@build-letrec (lambda (G2c75@ae G2c76@vars G2c77@val-exps G2c78@body-exp) (if (null? G2c76@vars) G2c78@body-exp (list 'letrec (map list G2c76@vars G2c77@val-exps) G2c78@body-exp)))) (set! G2c1a@build-letrec* (lambda (G2c7d@ae G2c7e@vars G2c7f@val-exps G2c80@body-exp) (if (null? G2c7e@vars) G2c80@body-exp (G2be6@build-let G2c7d@ae G2c7e@vars (map (lambda (G2c85@x) (list 'quote '#f)) G2c7e@vars) (G2c14@build-sequence G2c7d@ae (append (map (lambda (G2c87@lhs G2c88@rhs) (list 'set! G2c87@lhs G2c88@rhs)) G2c7e@vars G2c7f@val-exps) (list G2c80@body-exp))))))) (set! G2c1c@build-library-letrec* (lambda (G2c8b@ae G2c8c@name G2c8d@vars G2c8e@locs G2c8f@val-exps G2c90@body-exp) (list 'library-letrec* G2c8c@name (map list G2c8d@vars G2c8e@locs G2c8f@val-exps) G2c90@body-exp))) (set! G2c1e@build-receive (lambda (G2c97@ae G2c98@vars G2c99@producer G2c9a@body*) (begin (display '"************** in ") (cons 'receive (cons G2c98@vars (cons G2c99@producer G2c9a@body*)))))) (begin (set! G2ca8@G2c1e@build-receive G2c1e@build-receive) (set! G2ca7@G2c1c@build-library-letrec* G2c1c@build-library-letrec*) (set! G2ca6@G2c1a@build-letrec* G2c1a@build-letrec*) (set! G2ca5@G2c18@build-letrec G2c18@build-letrec) (set! G2ca4@G2c16@build-void G2c16@build-void) (set! G2ca3@G2c14@build-sequence G2c14@build-sequence) (set! G2ca2@G2be6@build-let G2be6@build-let) (set! G2ca1@G2be4@build-case-lambda G2be4@build-case-lambda) (set! G2ca0@G2be2@build-lambda G2be2@build-lambda) (set! G2c9f@G2b71@build-global-define G2b71@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cb7@set-cons G2cb9@set-union G2cbe@top-mark* G2cc0@top-marked? G2cc2@gen-lexical G2cc4@gen-global G2cc6@gen-label G2cc8@gen-top-level-label G2cca@gen-define-label+loc G2ccc@gen-define-label G2cd2@G2ccd G2cd4@G2ccf G2cd6@G2cce G2cd9@rib? G2cdb@make-rib G2cdd@rib-sym* G2cdf@rib-mark** G2ce1@rib-label* G2ce3@rib-sealed/freq G2ce5@rib-cache G2ce7@set-rib-sym*! G2ce9@set-rib-mark**! G2ceb@set-rib-label*! G2ced@set-rib-sealed/freq! G2cef@set-rib-cache! G2cf1@make-empty-rib G2cf3@extend-rib! G2cf5@extend-rib/nc! G2cf7@make-rib-map G2cf9@seal-rib! G2cfb@unseal-rib! G2cfd@make-full-rib G2d03@G2cfe G2d05@G2d00 G2d07@G2cff G2d0a@stx? G2d0c@make-stx G2d0e@stx-expr G2d10@stx-mark* G2d12@stx-subst* G2d14@stx-ae* G2d16@set-stx-expr! G2d18@set-stx-mark*! G2d1a@set-stx-subst*! G2d1c@set-stx-ae*! G2d1e@rp G2d20@datum->stx G2d22@gen-mark G2d24@anti-mark G2d26@anti-mark? G2d28@join-wraps G2d2a@mkstx G2d2c@add-mark G2d2e@add-subst G2d30@syntax-kind? G2d32@syntax-vector->list G2d34@syntax-pair? G2d36@syntax-vector? G2d38@syntax-null? G2d3a@syntax-list? G2d3c@syntax-car G2d3e@syntax-cdr G2d40@syntax->list G2d42@id? G2d44@id->sym G2d46@same-marks? G2d48@bound-id=? G2d4a@free-id=? G2d4c@valid-bound-ids? G2d4e@distinct-bound-ids? G2d50@bound-id-member? G2d52@self-evaluating? G2d54@strip-annotations G2d56@strip G2d58@stx->datum G2d5a@same-marks*? G2d5c@id->label G2d5e@id->real-label G2d60@label->binding G2d62@make-binding G2d64@binding-type G2d66@binding-value G2d68@raise-unbound-error G2d6a@syntax-type G2d78@sanitize-binding G2d7a@make-variable-transformer G2d7c@variable-transformer? G2d7e@variable-transformer-procedure G2d80@make-eval-transformer G2eb7@parse-define G2eb9@parse-define-syntax G2ebb@scheme-stx-hashtable G2ebd@scheme-stx G2ebf@lexical-var G2ec1@lexical-mutable? G2ec3@set-lexical-mutable! G2ec5@add-lexical G2ec7@add-lexicals G2ec9@letrec-helper G2ecb@letrec-transformer G2ecd@letrec*-transformer G2ecf@fluid-let-syntax-transformer G2ed1@type-descriptor-transformer G2ed3@record-type-descriptor-transformer G2ed5@record-constructor-descriptor-transformer G2ed7@when-macro G2ed9@unless-macro G2edb@if-transformer G2edd@and-transformer G2edf@or-transformer G2ee1@case-macro G2ee3@quote-transformer G2ee5@case-lambda-transformer G2ee7@lambda-transformer G2ee9@bless G2eeb@with-syntax-macro G2eed@invalid-fmls-error G2eef@let-macro G2ef1@let-values-macro G2ef3@let*-values-macro G2ef5@trace-lambda-macro G2ef7@trace-define-macro G2ef9@trace-define-syntax-macro G2efb@trace-let/rec-syntax G2efd@trace-let-syntax-macro G2eff@trace-letrec-syntax-macro G2f01@guard-macro G2f03@define-enumeration-macro G2f05@time-macro G2f07@delay-macro G2f09@assert-macro G2f0b@endianness-macro G2f0d@identifier-syntax-macro G2f0f@do-macro G2f11@let*-macro G2f13@or-macro G2f15@and-macro G2f17@cond-macro G2f19@do-include G2f1b@include-macro G2f1d@include-into-macro G2f1f@syntax-rules-macro G2f21@quasiquote-macro G2f23@quasisyntax-macro G2f25@define-struct-macro G2f27@define-record-type-macro G2f29@define-condition-type-macro G2f2b@incorrect-usage-macro G2f2d@parameterize-macro G2f2f@foreign-call-transformer G2f31@convert-pattern G2f33@syntax-dispatch G2f35@ellipsis? G2f37@underscore? G2f39@verify-literals G2f3b@syntax-case-transformer G2f3d@ellipsis-map G2f3f@syntax-transformer G2f41@core-macro-transformer G2f43@file-options-macro G2f45@symbol-macro G2f47@macro-transformer G2f49@local-macro-transformer G2f4b@do-macro-call G2f4d@chi-macro G2f4f@chi-local-macro G2f51@chi-global-macro G2f53@chi-expr* G2f55@chi-application G2f57@chi-expr G2f59@chi-set! G2f5b@verify-formals G2f5d@chi-lambda-clause G2f5f@chi-lambda-clause* G2f61@chi-defun G2f63@chi-rhs G2f65@expand-interaction-rhs*/init* G2f67@chi-rhs* G2f69@find-bound=? G2f6b@find-dups G2f6d@chi-internal G2f6f@parse-module G2f75@G2f70 G2f77@G2f72 G2f79@G2f71 G2f7c@module-interface? G2f7e@make-module-interface G2f80@module-interface-first-mark G2f82@module-interface-exp-id-vec G2f84@module-interface-exp-lab-vec G2f86@set-module-interface-first-mark! G2f88@set-module-interface-exp-id-vec! G2f8a@set-module-interface-exp-lab-vec! G2f8c@module-interface-exp-id* G2f8e@chi-internal-module G2f90@chi-body* G2f92@expand-transformer G2f94@parse-exports G2f96@parse-library-name G2f98@parse-library G2f9a@parse-import-spec* G2f9c@make-top-rib G2f9e@make-collector G2fa0@inv-collector G2fa2@vis-collector G2fa4@imp-collector G2fa6@chi-library-internal G2fa8@chi-interaction-expr G2faa@library-body-expander G2fac@core-library-expander G2fae@parse-top-level-program G2fb0@top-level-expander G2fb6@G2fb1 G2fb8@G2fb3 G2fba@G2fb2 G2fbd@env? G2fbf@make-env G2fc1@env-names G2fc3@env-labels G2fc5@env-itc G2fc7@set-env-names! G2fc9@set-env-labels! G2fcb@set-env-itc! G2fcd@rp G2fd3@G2fce G2fd5@G2fd0 G2fd7@G2fcf G2fda@interaction-env? G2fdc@make-interaction-env G2fde@interaction-env-rib G2fe0@interaction-env-r G2fe2@interaction-env-locs G2fe4@set-interaction-env-rib! G2fe6@set-interaction-env-r! G2fe8@set-interaction-env-locs! G2fea@rp G2fec@interaction-environment-symbols G2fee@environment-bindings G2ff0@parse-binding G2ff2@environment? G2ff4@environment-symbols G2ff6@environment G2ff8@null-environment G2ffa@scheme-report-environment G2ffc@expand G2ffe@eval G3000@library-expander G3002@boot-library-expand G3004@rev-map-append G3006@build-exports G3008@make-export-subst G300a@make-export-env/macros G300c@generate-temporaries G300e@free-identifier=? G3010@bound-identifier=? G3012@make-source-condition G3014@extract-position-condition G3016@expression-position G3018@assertion-error G301a@syntax-error G301c@syntax-violation* G301e@syntax-violation G3020@identifier? G3022@datum->syntax G3024@syntax->datum G3026@compile-r6rs-top-level G3028@pre-compile-r6rs-top-level G302a@interaction-environment G302c@top-level-context) (begin (set! G2cb7@set-cons (lambda (G302d@x G302e@ls) (if (memq G302d@x G302e@ls) G302e@ls (cons G302d@x G302e@ls)))) (set! G2cb9@set-union (lambda (G3031@ls1 G3032@ls2) (if (null? G3031@ls1) G3032@ls2 (if (memq (car G3031@ls1) G3032@ls2) (G2cb9@set-union (cdr G3031@ls1) G3032@ls2) (cons (car G3031@ls1) (G2cb9@set-union (cdr G3031@ls1) G3032@ls2)))))) (set! G2cbe@top-mark* '(top)) (set! G2cc0@top-marked? (lambda (G3035@m*) (memq 'top G3035@m*))) (set! G2cc2@gen-lexical (lambda (G3037@sym) (if (symbol? G3037@sym) (gensym G3037@sym) (if (G2d0a@stx? G3037@sym) (G2cc2@gen-lexical (G2d44@id->sym G3037@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3037@sym))))) (set! G2cc4@gen-global (lambda (G3039@x) (G2cc2@gen-lexical G3039@x))) (set! G2cc6@gen-label (lambda (G303b@_) (gensym))) (set! G2cc8@gen-top-level-label (lambda (G303d@id G303e@rib) ((lambda (G3042@find) (begin (set! G3042@find (lambda (G304d@sym G304e@mark* G304f@sym* G3050@mark** G3051@label*) (and (pair? G304f@sym*) (if (and (eq? G304d@sym (car G304f@sym*)) (G2d46@same-marks? G304e@mark* (car G3050@mark**))) (car G3051@label*) (G3042@find G304d@sym G304e@mark* (cdr G304f@sym*) (cdr G3050@mark**) (cdr G3051@label*)))))) ((lambda (G3043@sym G3044@mark*) ((lambda (G3047@sym*) ((lambda (G3049@t) (if G3049@t ((lambda (G304b@label) (if (G2b69@G2a0f@imported-label->binding G304b@label) (gensym) G304b@label)) G3049@t) (gensym))) (and (memq G3043@sym (G2cdd@rib-sym* G303e@rib)) (G3042@find G3043@sym G3044@mark* G3047@sym* (G2cdf@rib-mark** G303e@rib) (G2ce1@rib-label* G303e@rib))))) (G2cdd@rib-sym* G303e@rib))) (G2d44@id->sym G303d@id) (G2d10@stx-mark* G303d@id)))) '#f))) (set! G2cca@gen-define-label+loc (lambda (G3057@id G3058@rib) ((lambda (G305b@t) (if G305b@t ((lambda (G305d@env) ((lambda (G305f@label G3060@locs) (values G305f@label ((lambda (G3063@t) (if G3063@t (cdr G3063@t) ((lambda (G3065@loc) (begin (G2fe8@set-interaction-env-locs! G305d@env (cons (cons G305f@label G3065@loc) G3060@locs)) G3065@loc)) (G2cc2@gen-lexical G3057@id)))) (assq G305f@label G3060@locs)))) (G2cc8@gen-top-level-label G3057@id G3058@rib) (G2fe2@interaction-env-locs G305d@env))) G305b@t) (values (gensym) (G2cc2@gen-lexical G3057@id)))) (G302c@top-level-context)))) (set! G2ccc@gen-define-label (lambda (G3067@id G3068@rib) (if (G302c@top-level-context) (G2cc8@gen-top-level-label G3067@id G3068@rib) (gensym)))) (set! G2cd2@G2ccd (make-record-type-descriptor 'rib '#f 'G2cd0 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2cd4@G2ccf '#f) (set! G2cd6@G2cce (make-record-constructor-descriptor G2cd2@G2ccd '#f G2cd4@G2ccf)) (set! G2cd9@rib? (record-predicate G2cd2@G2ccd)) (set! G2cdb@make-rib (record-constructor G2cd6@G2cce)) (set! G2cdd@rib-sym* (record-accessor G2cd2@G2ccd '0)) (set! G2cdf@rib-mark** (record-accessor G2cd2@G2ccd '1)) (set! G2ce1@rib-label* (record-accessor G2cd2@G2ccd '2)) (set! G2ce3@rib-sealed/freq (record-accessor G2cd2@G2ccd '3)) (set! G2ce5@rib-cache (record-accessor G2cd2@G2ccd '4)) (set! G2ce7@set-rib-sym*! (record-mutator G2cd2@G2ccd '0)) (set! G2ce9@set-rib-mark**! (record-mutator G2cd2@G2ccd '1)) (set! G2ceb@set-rib-label*! (record-mutator G2cd2@G2ccd '2)) (set! G2ced@set-rib-sealed/freq! (record-mutator G2cd2@G2ccd '3)) (set! G2cef@set-rib-cache! (record-mutator G2cd2@G2ccd '4)) (set! G2cf1@make-empty-rib (lambda () (G2cdb@make-rib '() '() '() '#f '#f))) (set! G2cf3@extend-rib! (lambda (G306b@rib G306c@id G306d@label) ((lambda (G3072@find) (begin (set! G3072@find (lambda (G307f@sym G3080@mark* G3081@sym* G3082@mark** G3083@label*) (and (pair? G3081@sym*) (if (and (eq? G307f@sym (car G3081@sym*)) (G2d46@same-marks? G3080@mark* (car G3082@mark**))) G3083@label* (G3072@find G307f@sym G3080@mark* (cdr G3081@sym*) (cdr G3082@mark**) (cdr G3083@label*)))))) (begin (if (G2ce3@rib-sealed/freq G306b@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G306b@rib) (void)) ((lambda (G3073@sym G3074@mark*) ((lambda (G3077@sym*) ((lambda (G3079@t) (if G3079@t ((lambda (G307b@p) (if (not (eq? G306d@label (car G307b@p))) (if (G302c@top-level-context) (set-car! G307b@p G306d@label) (G301e@syntax-violation '#f '"multiple definitions of identifier" G306c@id)) (void))) G3079@t) (begin (if (G2ce5@rib-cache G306b@rib) (hashtable-update! (G2ce5@rib-cache G306b@rib) G3073@sym (lambda (G307d@e) (cons (cons G3074@mark* G306d@label) G307d@e)) '()) (void)) (G2ce7@set-rib-sym*! G306b@rib (cons G3073@sym G3077@sym*)) (G2ce9@set-rib-mark**! G306b@rib (cons G3074@mark* (G2cdf@rib-mark** G306b@rib))) (G2ceb@set-rib-label*! G306b@rib (cons G306d@label (G2ce1@rib-label* G306b@rib)))))) (and (memq G3073@sym (G2cdd@rib-sym* G306b@rib)) (G3072@find G3073@sym G3074@mark* G3077@sym* (G2cdf@rib-mark** G306b@rib) (G2ce1@rib-label* G306b@rib))))) (G2cdd@rib-sym* G306b@rib))) (G2d44@id->sym G306c@id) (G2d10@stx-mark* G306c@id))))) '#f))) (set! G2cf5@extend-rib/nc! (lambda (G3089@rib G308a@id G308b@label) ((lambda (G308f@sym G3090@mark*) ((lambda (G3093@sym*) (begin (if (G2ce5@rib-cache G3089@rib) (hashtable-update! (G2ce5@rib-cache G3089@rib) G308f@sym (lambda (G3095@e) (cons (cons G3090@mark* G308b@label) G3095@e)) '()) (void)) (G2ce7@set-rib-sym*! G3089@rib (cons G308f@sym G3093@sym*)) (G2ce9@set-rib-mark**! G3089@rib (cons G3090@mark* (G2cdf@rib-mark** G3089@rib))) (G2ceb@set-rib-label*! G3089@rib (cons G308b@label (G2ce1@rib-label* G3089@rib))))) (G2cdd@rib-sym* G3089@rib))) (G2d44@id->sym G308a@id) (G2d10@stx-mark* G308a@id)))) (set! G2cf7@make-rib-map (lambda (G3097@sym*) ((lambda (G3099@ht) ((letrec ((G309b@f (lambda (G309d@i G309e@sym*) (if (null? G309e@sym*) G3099@ht (begin (hashtable-update! G3099@ht (car G309e@sym*) (lambda (G30a1@x) (cons G309d@i G30a1@x)) '()) (G309b@f (+ G309d@i '1) (cdr G309e@sym*))))))) G309b@f) '0 G3097@sym*)) (make-eq-hashtable)))) (set! G2cf9@seal-rib! (lambda (G30a3@rib) ((lambda (G30a5@sym*) (if (not (null? G30a5@sym*)) (begin (G2ce7@set-rib-sym*! G30a3@rib (list->vector G30a5@sym*)) (G2ce9@set-rib-mark**! G30a3@rib (list->vector (G2cdf@rib-mark** G30a3@rib))) (G2ceb@set-rib-label*! G30a3@rib (list->vector (G2ce1@rib-label* G30a3@rib))) (G2ced@set-rib-sealed/freq! G30a3@rib (G2cf7@make-rib-map G30a5@sym*))) (void))) (G2cdd@rib-sym* G30a3@rib)))) (set! G2cfb@unseal-rib! (lambda (G30a7@rib) (if (G2ce3@rib-sealed/freq G30a7@rib) (begin (G2ced@set-rib-sealed/freq! G30a7@rib '#f) (G2ce7@set-rib-sym*! G30a7@rib (vector->list (G2cdd@rib-sym* G30a7@rib))) (G2ce9@set-rib-mark**! G30a7@rib (vector->list (G2cdf@rib-mark** G30a7@rib))) (G2ceb@set-rib-label*! G30a7@rib (vector->list (G2ce1@rib-label* G30a7@rib)))) (void)))) (set! G2cfd@make-full-rib (lambda (G30a9@id* G30aa@label*) ((lambda (G30ad@r) (begin (G2cf9@seal-rib! G30ad@r) G30ad@r)) (G2cdb@make-rib (map G2d44@id->sym G30a9@id*) (map G2d10@stx-mark* G30a9@id*) G30aa@label* '#f '#f)))) (set! G2d03@G2cfe (make-record-type-descriptor 'stx '#f 'G2d01 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d05@G2d00 '#f) (set! G2d07@G2cff (make-record-constructor-descriptor G2d03@G2cfe '#f G2d05@G2d00)) (set! G2d0a@stx? (record-predicate G2d03@G2cfe)) (set! G2d0c@make-stx (record-constructor G2d07@G2cff)) (set! G2d0e@stx-expr (record-accessor G2d03@G2cfe '0)) (set! G2d10@stx-mark* (record-accessor G2d03@G2cfe '1)) (set! G2d12@stx-subst* (record-accessor G2d03@G2cfe '2)) (set! G2d14@stx-ae* (record-accessor G2d03@G2cfe '3)) (set! G2d16@set-stx-expr! (record-mutator G2d03@G2cfe '0)) (set! G2d18@set-stx-mark*! (record-mutator G2d03@G2cfe '1)) (set! G2d1a@set-stx-subst*! (record-mutator G2d03@G2cfe '2)) (set! G2d1c@set-stx-ae*! (record-mutator G2d03@G2cfe '3)) (set! G2d1e@rp (G28f3@G281e@make-record-printer 'stx (lambda (G30af@x G30b0@p G30b1@wr) (begin (display '"#<syntax " G30b0@p) (write (G2d58@stx->datum G30af@x) G30b0@p) ((lambda (G30b5@expr) (if (G28eb@G280e@annotation? G30b5@expr) ((lambda (G30b7@src) (if (pair? G30b7@src) (begin (display '" [" G30b0@p) (display (cdr G30b7@src) G30b0@p) (display '" of " G30b0@p) (display (car G30b7@src) G30b0@p) (display '"]" G30b0@p)) (void))) (G28ec@G2810@annotation-source G30b5@expr)) (void))) (G2d0e@stx-expr G30af@x)) (display '">" G30b0@p))))) (set! G2d20@datum->stx (lambda (G30b9@id G30ba@datum) (G2d0c@make-stx G30ba@datum (G2d10@stx-mark* G30b9@id) (G2d12@stx-subst* G30b9@id) (G2d14@stx-ae* G30b9@id)))) (set! G2d22@gen-mark (lambda () (string '#\m))) (set! G2d24@anti-mark '#f) (set! G2d26@anti-mark? not) (set! G2d28@join-wraps (lambda (G30bd@m1* G30be@s1* G30bf@ae1* G30c0@e) ((lambda (G30c6@cancel) (begin (set! G30c6@cancel (lambda (G30cd@ls1 G30ce@ls2) ((letrec ((G30d1@f (lambda (G30d3@x G30d4@ls1) (if (null? G30d4@ls1) (cdr G30ce@ls2) (cons G30d3@x (G30d1@f (car G30d4@ls1) (cdr G30d4@ls1))))))) G30d1@f) (car G30cd@ls1) (cdr G30cd@ls1)))) ((lambda (G30c7@m2* G30c8@s2* G30c9@ae2*) (if (and (not (null? G30bd@m1*)) (not (null? G30c7@m2*)) (G2d26@anti-mark? (car G30c7@m2*))) (values (G30c6@cancel G30bd@m1* G30c7@m2*) (G30c6@cancel G30be@s1* G30c8@s2*) (G30c6@cancel G30bf@ae1* G30c9@ae2*)) (values (append G30bd@m1* G30c7@m2*) (append G30be@s1* G30c8@s2*) (append G30bf@ae1* G30c9@ae2*)))) (G2d10@stx-mark* G30c0@e) (G2d12@stx-subst* G30c0@e) (G2d14@stx-ae* G30c0@e)))) '#f))) (set! G2d2a@mkstx (lambda (G30d7@e G30d8@m* G30d9@s* G30da@ae*) (if (and (G2d0a@stx? G30d7@e) (not (G2cc0@top-marked? G30d8@m*))) (call-with-values (lambda () (G2d28@join-wraps G30d8@m* G30d9@s* G30da@ae* G30d7@e)) (lambda (G30e2@G30df G30e3@G30e0 G30e4@G30e1) ((lambda (G30e8@ae* G30e9@s* G30ea@m*) (G2d0c@make-stx (G2d0e@stx-expr G30d7@e) G30ea@m* G30e9@s* G30e8@ae*)) G30e4@G30e1 G30e3@G30e0 G30e2@G30df))) (G2d0c@make-stx G30d7@e G30d8@m* G30d9@s* G30da@ae*)))) (set! G2d2c@add-mark (lambda (G30ee@m G30ef@e G30f0@ae) (G2d2a@mkstx G30ef@e (list G30ee@m) '(shift) (list G30f0@ae)))) (set! G2d2e@add-subst (lambda (G30f4@subst G30f5@e) (G2d2a@mkstx G30f5@e '() (list G30f4@subst) '()))) (set! G2d30@syntax-kind? (lambda (G30f8@x G30f9@p?) (if (G2d0a@stx? G30f8@x) (G2d30@syntax-kind? (G2d0e@stx-expr G30f8@x) G30f9@p?) (if (G28eb@G280e@annotation? G30f8@x) (G2d30@syntax-kind? (G28ed@G2812@annotation-expression G30f8@x) G30f9@p?) (G30f9@p? G30f8@x))))) (set! G2d32@syntax-vector->list (lambda (G30fc@x) (if (G2d0a@stx? G30fc@x) ((lambda (G30fe@ls G30ff@m* G3100@s* G3101@ae*) (map (lambda (G3106@x) (G2d2a@mkstx G3106@x G30ff@m* G3100@s* G3101@ae*)) G30fe@ls)) (G2d32@syntax-vector->list (G2d0e@stx-expr G30fc@x)) (G2d10@stx-mark* G30fc@x) (G2d12@stx-subst* G30fc@x) (G2d14@stx-ae* G30fc@x)) (if (G28eb@G280e@annotation? G30fc@x) (G2d32@syntax-vector->list (G28ed@G2812@annotation-expression G30fc@x)) (if (vector? G30fc@x) (vector->list G30fc@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G30fc@x)))))) (set! G2d34@syntax-pair? (lambda (G3108@x) (G2d30@syntax-kind? G3108@x pair?))) (set! G2d36@syntax-vector? (lambda (G310a@x) (G2d30@syntax-kind? G310a@x vector?))) (set! G2d38@syntax-null? (lambda (G310c@x) (G2d30@syntax-kind? G310c@x null?))) (set! G2d3a@syntax-list? (lambda (G310e@x) (or (G2d38@syntax-null? G310e@x) (and (G2d34@syntax-pair? G310e@x) (G2d3a@syntax-list? (G2d3e@syntax-cdr G310e@x)))))) (set! G2d3c@syntax-car (lambda (G3110@x) (if (G2d0a@stx? G3110@x) (G2d2a@mkstx (G2d3c@syntax-car (G2d0e@stx-expr G3110@x)) (G2d10@stx-mark* G3110@x) (G2d12@stx-subst* G3110@x) (G2d14@stx-ae* G3110@x)) (if (G28eb@G280e@annotation? G3110@x) (G2d3c@syntax-car (G28ed@G2812@annotation-expression G3110@x)) (if (pair? G3110@x) (car G3110@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3110@x)))))) (set! G2d3e@syntax-cdr (lambda (G3112@x) (if (G2d0a@stx? G3112@x) (G2d2a@mkstx (G2d3e@syntax-cdr (G2d0e@stx-expr G3112@x)) (G2d10@stx-mark* G3112@x) (G2d12@stx-subst* G3112@x) (G2d14@stx-ae* G3112@x)) (if (G28eb@G280e@annotation? G3112@x) (G2d3e@syntax-cdr (G28ed@G2812@annotation-expression G3112@x)) (if (pair? G3112@x) (cdr G3112@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3112@x)))))) (set! G2d40@syntax->list (lambda (G3114@x) (if (G2d34@syntax-pair? G3114@x) (cons (G2d3c@syntax-car G3114@x) (G2d40@syntax->list (G2d3e@syntax-cdr G3114@x))) (if (G2d38@syntax-null? G3114@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3114@x))))) (set! G2d42@id? (lambda (G3116@x) (and (G2d0a@stx? G3116@x) ((lambda (G3118@expr) (symbol? (if (G28eb@G280e@annotation? G3118@expr) (G28ea@G280c@annotation-stripped G3118@expr) G3118@expr))) (G2d0e@stx-expr G3116@x))))) (set! G2d44@id->sym (lambda (G311a@x) (begin (if (not (G2d0a@stx? G311a@x)) (error 'id->sym '"BUG in ikarus: not an id" G311a@x) (void)) ((lambda (G311c@expr) ((lambda (G311e@sym) (if (symbol? G311e@sym) G311e@sym (error 'id->sym '"BUG in ikarus: not an id" G311a@x))) (if (G28eb@G280e@annotation? G311c@expr) (G28ea@G280c@annotation-stripped G311c@expr) G311c@expr))) (G2d0e@stx-expr G311a@x))))) (set! G2d46@same-marks? (lambda (G3120@x G3121@y) (or (and (null? G3120@x) (null? G3121@y)) (and (pair? G3120@x) (pair? G3121@y) (eq? (car G3120@x) (car G3121@y)) (G2d46@same-marks? (cdr G3120@x) (cdr G3121@y)))))) (set! G2d48@bound-id=? (lambda (G3124@x G3125@y) (and (eq? (G2d44@id->sym G3124@x) (G2d44@id->sym G3125@y)) (G2d46@same-marks? (G2d10@stx-mark* G3124@x) (G2d10@stx-mark* G3125@y))))) (set! G2d4a@free-id=? (lambda (G3128@i G3129@j) ((lambda (G312c@t0 G312d@t1) (if (or G312c@t0 G312d@t1) (eq? G312c@t0 G312d@t1) (eq? (G2d44@id->sym G3128@i) (G2d44@id->sym G3129@j)))) (G2d5e@id->real-label G3128@i) (G2d5e@id->real-label G3129@j)))) (set! G2d4c@valid-bound-ids? (lambda (G3130@id*) (and (for-all G2d42@id? G3130@id*) (G2d4e@distinct-bound-ids? G3130@id*)))) (set! G2d4e@distinct-bound-ids? (lambda (G3132@id*) (or (null? G3132@id*) (and (not (G2d50@bound-id-member? (car G3132@id*) (cdr G3132@id*))) (G2d4e@distinct-bound-ids? (cdr G3132@id*)))))) (set! G2d50@bound-id-member? (lambda (G3134@id G3135@id*) (and (pair? G3135@id*) (or (G2d48@bound-id=? G3134@id (car G3135@id*)) (G2d50@bound-id-member? G3134@id (cdr G3135@id*)))))) (set! G2d52@self-evaluating? (lambda (G3138@x) (or (number? G3138@x) (string? G3138@x) (char? G3138@x) (boolean? G3138@x) (regexp? G3138@x) (bytevector? G3138@x)))) (set! G2d54@strip-annotations (lambda (G313a@x) (if (pair? G313a@x) (cons (G2d54@strip-annotations (car G313a@x)) (G2d54@strip-annotations (cdr G313a@x))) (if (vector? G313a@x) (vector-map G2d54@strip-annotations G313a@x) (if (G28eb@G280e@annotation? G313a@x) (G28ea@G280c@annotation-stripped G313a@x) G313a@x))))) (set! G2d56@strip (lambda (G313c@x G313d@m*) (if (G2cc0@top-marked? G313d@m*) (if (or (G28eb@G280e@annotation? G313c@x) (and (pair? G313c@x) (G28eb@G280e@annotation? (car G313c@x))) (and (vector? G313c@x) (> (vector-length G313c@x) '0) (G28eb@G280e@annotation? (vector-ref G313c@x '0)))) (G2d54@strip-annotations G313c@x) G313c@x) ((letrec ((G3140@f (lambda (G3142@x) (if (G2d0a@stx? G3142@x) (G2d56@strip (G2d0e@stx-expr G3142@x) (G2d10@stx-mark* G3142@x)) (if (G28eb@G280e@annotation? G3142@x) (G28ea@G280c@annotation-stripped G3142@x) (if (pair? G3142@x) ((lambda (G3144@a G3145@d) (if (and (eq? G3144@a (car G3142@x)) (eq? G3145@d (cdr G3142@x))) G3142@x (cons G3144@a G3145@d))) (G3140@f (car G3142@x)) (G3140@f (cdr G3142@x))) (if (vector? G3142@x) ((lambda (G3148@old) ((lambda (G314a@new) (if (for-all eq? G3148@old G314a@new) G3142@x (list->vector G314a@new))) (map G3140@f G3148@old))) (vector->list G3142@x)) G3142@x))))))) G3140@f) G313c@x)))) (set! G2d58@stx->datum (lambda (G314c@x) (G2d56@strip G314c@x '()))) (set! G2d5a@same-marks*? (lambda (G314e@mark* G314f@mark** G3150@si) (if (null? G3150@si) '#f (if (G2d46@same-marks? G314e@mark* (vector-ref G314f@mark** (car G3150@si))) (car G3150@si) (G2d5a@same-marks*? G314e@mark* G314f@mark** (cdr G3150@si)))))) (set! G2d5c@id->label (lambda (G3154@id) (or (G2d5e@id->real-label G3154@id) ((lambda (G3156@t) (if G3156@t ((lambda (G3158@env) ((lambda (G315a@rib) (call-with-values (lambda () (G2cca@gen-define-label+loc G3154@id G315a@rib)) (lambda (G315e@G315c G315f@G315d) ((lambda (G3162@loc_ G3163@lab) (begin (G2cf3@extend-rib! G315a@rib G3154@id G3163@lab) G3163@lab)) G315f@G315d G315e@G315c)))) (G2fde@interaction-env-rib G3158@env))) G3156@t) '#f)) (G302c@top-level-context))))) (set! G2d5e@id->real-label (lambda (G3166@id) ((lambda (G3168@sym) ((letrec ((G316a@search (lambda (G316c@subst* G316d@mark*) (if (null? G316c@subst*) '#f (if (eq? (car G316c@subst*) 'shift) (G316a@search (cdr G316c@subst*) (cdr G316d@mark*)) ((lambda (G3170@rib) ((lambda (G3172@t) (if G3172@t ((lambda (G3174@ht) ((lambda (G3176@si) ((lambda (G3178@i) (if G3178@i (vector-ref (G2ce1@rib-label* G3170@rib) G3178@i) (G316a@search (cdr G316c@subst*) G316d@mark*))) (and G3176@si (G2d5a@same-marks*? G316d@mark* (G2cdf@rib-mark** G3170@rib) (reverse G3176@si))))) (hashtable-ref G3174@ht G3168@sym '#f))) G3172@t) ((letrec ((G317a@f (lambda (G317c@sym* G317d@mark** G317e@label*) (if (null? G317c@sym*) (G316a@search (cdr G316c@subst*) G316d@mark*) (if (and (eq? (car G317c@sym*) G3168@sym) (G2d46@same-marks? (car G317d@mark**) G316d@mark*)) (car G317e@label*) (G317a@f (cdr G317c@sym*) (cdr G317d@mark**) (cdr G317e@label*))))))) G317a@f) (G2cdd@rib-sym* G3170@rib) (G2cdf@rib-mark** G3170@rib) (G2ce1@rib-label* G3170@rib)))) (G2ce3@rib-sealed/freq G3170@rib))) (car G316c@subst*))))))) G316a@search) (G2d12@stx-subst* G3166@id) (G2d10@stx-mark* G3166@id))) (G2d44@id->sym G3166@id)))) (set! G2d60@label->binding (lambda (G3182@x G3183@r) ((lambda (G3186@t) (if G3186@t ((lambda (G3188@b) (if (and (pair? G3188@b) (eq? (car G3188@b) '$core-rtd)) (cons '$rtd (map G2ee9@bless (cdr G3188@b))) (if (and (pair? G3188@b) (eq? (car G3188@b) 'global-rtd)) ((lambda (G318a@lib G318b@loc) (cons '$rtd (symbol-value G318b@loc))) (cadr G3188@b) (cddr G3188@b)) G3188@b))) G3186@t) ((lambda (G318e@t) (if G318e@t (cdr G318e@t) ((lambda (G3190@t) (if G3190@t ((lambda (G3192@env) ((lambda (G3194@t) (if G3194@t ((lambda (G3196@p) (cons* 'lexical (cdr G3196@p) '#f)) G3194@t) '(displaced-lexical . #f))) (assq G3182@x (G2fe2@interaction-env-locs G3192@env)))) G3190@t) '(displaced-lexical . #f))) (G302c@top-level-context)))) (assq G3182@x G3183@r)))) (G2b69@G2a0f@imported-label->binding G3182@x)))) (set! G2d62@make-binding cons) (set! G2d64@binding-type car) (set! G2d66@binding-value cdr) (set! G2d68@raise-unbound-error (lambda (G3198@id) (G301c@syntax-violation* '#f '"unbound identifier" G3198@id (G4c3e@G4a88@make-undefined-violation)))) (set! G2d6a@syntax-type (lambda (G319a@e G319b@r) (if (G2d42@id? G319a@e) ((lambda (G319e@id) ((lambda (G31a0@label) ((lambda (G31a2@b) ((lambda (G31a4@type) ((lambda () (begin (if (not G31a0@label) (G2d68@raise-unbound-error G319e@id) (void)) ((lambda (G31a6@t) (if (memv G31a6@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31a4@type (G2d66@binding-value G31a2@b) G319e@id) (values 'other '#f '#f))) G31a4@type))))) (G2d64@binding-type G31a2@b))) (G2d60@label->binding G31a0@label G319b@r))) (G2d5c@id->label G319e@id))) G319a@e) (if (G2d34@syntax-pair? G319a@e) ((lambda (G31a8@id) (if (G2d42@id? G31a8@id) ((lambda (G31aa@label) ((lambda (G31ac@b) ((lambda (G31ae@type) ((lambda () (begin (if (not G31aa@label) (G2d68@raise-unbound-error G31a8@id) (void)) ((lambda (G31b0@t) (if (memv G31b0@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31ae@type (G2d66@binding-value G31ac@b) G31a8@id) (values 'call '#f '#f))) G31ae@type))))) (G2d64@binding-type G31ac@b))) (G2d60@label->binding G31aa@label G319b@r))) (G2d5c@id->label G31a8@id)) (values 'call '#f '#f))) (G2d3c@syntax-car G319a@e)) ((lambda (G31b2@d) (if (G2d52@self-evaluating? G31b2@d) (values 'constant G31b2@d '#f) (values 'other '#f '#f))) (G2d58@stx->datum G319a@e)))))) (set! G2d78@sanitize-binding (lambda (G31b4@x G31b5@src) (if (procedure? G31b4@x) (cons* 'local-macro G31b4@x G31b5@src) (if (and (pair? G31b4@x) (eq? (car G31b4@x) 'macro!) (procedure? (cdr G31b4@x))) (cons* 'local-macro! (cdr G31b4@x) G31b5@src) (if (and (pair? G31b4@x) (eq? (car G31b4@x) '$rtd)) G31b4@x (assertion-violation 'expand '"invalid transformer" G31b4@x)))))) (set! G2d7a@make-variable-transformer (lambda (G31b8@x) (if (procedure? G31b8@x) (cons 'macro! G31b8@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31b8@x)))) (set! G2d7c@variable-transformer? (lambda (G31ba@x) (and (pair? G31ba@x) (eq? (car G31ba@x) 'macro!) (procedure? (cdr G31ba@x))))) (set! G2d7e@variable-transformer-procedure (lambda (G31bc@x) (if (G2d7c@variable-transformer? G31bc@x) (cdr G31bc@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31bc@x)))) (set! G2d80@make-eval-transformer (lambda (G31be@x) (G2d78@sanitize-binding (eval-core (G294a@G2902@expanded->core G31be@x)) G31be@x))) (set! G2eb7@parse-define (lambda (G31c0@x) ((lambda (G31c2@t) ((lambda (G31c4@ls/false) (if (and G31c4@ls/false (apply (lambda (G31c6@id G31c7@fmls G31c8@b G31c9@b*) (G2d42@id? G31c6@id)) G31c4@ls/false)) (apply (lambda (G31ce@id G31cf@fmls G31d0@b G31d1@b*) (begin (G2f5b@verify-formals G31cf@fmls G31c0@x) (values G31ce@id (cons 'defun (cons G31cf@fmls (cons G31d0@b G31d1@b*)))))) G31c4@ls/false) ((lambda (G31d6@t) ((lambda (G31d8@ls/false) (if (and G31d8@ls/false (apply (lambda (G31da@id G31db@val) (G2d42@id? G31da@id)) G31d8@ls/false)) (apply (lambda (G31de@id G31df@val) (values G31de@id (cons 'expr G31df@val))) G31d8@ls/false) ((lambda (G31e2@t) ((lambda (G31e4@ls/false) (if (and G31e4@ls/false (apply (lambda (G31e6@id) (G2d42@id? G31e6@id)) G31e4@ls/false)) (apply (lambda (G31e8@id) (values G31e8@id (cons 'expr (G2ee9@bless '(void))))) G31e4@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G31e2@t))) (G2f33@syntax-dispatch G31e2@t '(_ any)))) G31d6@t))) (G2f33@syntax-dispatch G31d6@t '(_ any any)))) G31c2@t))) (G2f33@syntax-dispatch G31c2@t '(_ (any . any) any . each-any)))) G31c0@x))) (set! G2eb9@parse-define-syntax (lambda (G31ea@x) ((lambda (G31ec@t) ((lambda (G31ee@ls/false) (if (and G31ee@ls/false (apply (lambda (G31f0@id G31f1@val) (G2d42@id? G31f0@id)) G31ee@ls/false)) (apply (lambda (G31f4@id G31f5@val) (values G31f4@id G31f5@val)) G31ee@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G31ec@t))) (G2f33@syntax-dispatch G31ec@t '(_ any any)))) G31ea@x))) (set! G2ebb@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ebd@scheme-stx (lambda (G31f8@sym) (or (hashtable-ref G2ebb@scheme-stx-hashtable G31f8@sym '#f) ((lambda (G31fa@subst) ((lambda (G31fc@stx) ((lambda (G31fe@stx) ((lambda () (begin (hashtable-set! G2ebb@scheme-stx-hashtable G31f8@sym G31fe@stx) G31fe@stx)))) ((lambda (G3200@t) (if G3200@t ((lambda (G3202@x) ((lambda (G3204@name G3205@label) (G2d2e@add-subst (G2cdb@make-rib (list G3204@name) (list G2cbe@top-mark*) (list G3205@label) '#f '#f) G31fc@stx)) (car G3202@x) (cdr G3202@x))) G3200@t) G31fc@stx)) (assq G31f8@sym G31fa@subst)))) (G2d0c@make-stx G31f8@sym G2cbe@top-mark* '() '()))) (G2b3f@G29bb@library-subst (G2b63@G2a03@find-library-by-name '(psyntax system $all))))))) (set! G2ebf@lexical-var car) (set! G2ec1@lexical-mutable? cdr) (set! G2ec3@set-lexical-mutable! set-cdr!) (set! G2ec5@add-lexical (lambda (G3208@lab G3209@lex G320a@r) (cons (cons* G3208@lab 'lexical G3209@lex '#f) G320a@r))) (set! G2ec7@add-lexicals (lambda (G320e@lab* G320f@lex* G3210@r) (if (null? G320e@lab*) G3210@r (G2ec7@add-lexicals (cdr G320e@lab*) (cdr G320f@lex*) (G2ec5@add-lexical (car G320e@lab*) (car G320f@lex*) G3210@r))))) (set! G2ec9@letrec-helper (lambda (G3214@e G3215@r G3216@mr G3217@build) ((lambda (G321c@t) ((lambda (G321e@ls/false) (if G321e@ls/false (apply (lambda (G3220@lhs* G3221@rhs* G3222@b G3223@b*) (if (not (G2d4c@valid-bound-ids? G3220@lhs*)) (G2eed@invalid-fmls-error G3214@e G3220@lhs*) ((lambda (G3228@lex* G3229@lab*) ((lambda (G322c@rib G322d@r) ((lambda (G3230@body G3231@rhs*) (G3217@build '#f G3228@lex* G3231@rhs* G3230@body)) (G2f6d@chi-internal (G2d2e@add-subst G322c@rib (cons G3222@b G3223@b*)) G322d@r G3216@mr) (G2f53@chi-expr* (map (lambda (G3234@x) (G2d2e@add-subst G322c@rib G3234@x)) G3221@rhs*) G322d@r G3216@mr))) (G2cfd@make-full-rib G3220@lhs* G3229@lab*) (G2ec7@add-lexicals G3229@lab* G3228@lex* G3215@r))) (map G2cc2@gen-lexical G3220@lhs*) (map G2cc6@gen-label G3220@lhs*)))) G321e@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G321c@t))) (G2f33@syntax-dispatch G321c@t '(_ #(each (any any)) any . each-any)))) G3214@e))) (set! G2ecb@letrec-transformer (lambda (G3236@e G3237@r G3238@mr) (G2ec9@letrec-helper G3236@e G3237@r G3238@mr G2ca5@G2c18@build-letrec))) (set! G2ecd@letrec*-transformer (lambda (G323c@e G323d@r G323e@mr) (G2ec9@letrec-helper G323c@e G323d@r G323e@mr G2ca6@G2c1a@build-letrec*))) (set! G2ecf@fluid-let-syntax-transformer (lambda (G3242@e G3243@r G3244@mr) ((lambda (G3249@lookup) (begin (set! G3249@lookup (lambda (G325c@x) (or (G2d5c@id->label G325c@x) (G301e@syntax-violation '#f '"unbound identifier" G3242@e G325c@x)))) ((lambda (G324a@t) ((lambda (G324c@ls/false) (if G324c@ls/false (apply (lambda (G324e@lhs* G324f@rhs* G3250@b G3251@b*) (if (not (G2d4c@valid-bound-ids? G324e@lhs*)) (G2eed@invalid-fmls-error G3242@e G324e@lhs*) ((lambda (G3256@lab* G3257@rhs*) (G2f6d@chi-internal (cons G3250@b G3251@b*) (append (map cons G3256@lab* G3257@rhs*) G3243@r) (append (map cons G3256@lab* G3257@rhs*) G3244@mr))) (map G3249@lookup G324e@lhs*) (map (lambda (G325a@x) (G2d80@make-eval-transformer (G2f92@expand-transformer G325a@x G3244@mr))) G324f@rhs*)))) G324c@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G324a@t))) (G2f33@syntax-dispatch G324a@t '(_ #(each (any any)) any . each-any)))) G3242@e))) '#f))) (set! G2ed1@type-descriptor-transformer (lambda (G325e@e G325f@r G3260@mr) ((lambda (G3264@t) ((lambda (G3266@ls/false) (if (and G3266@ls/false (apply (lambda (G3268@id) (G2d42@id? G3268@id)) G3266@ls/false)) (apply (lambda (G326a@id) ((lambda (G326c@lab) ((lambda (G326e@b) ((lambda (G3270@type) ((lambda () (begin (if (not G326c@lab) (G2d68@raise-unbound-error G326a@id) (void)) (if (not (and (eq? G3270@type '$rtd) (not (list? (G2d66@binding-value G326e@b))))) (G301e@syntax-violation '#f '"not a record type" G325e@e) (void)) (list 'quote (G2d66@binding-value G326e@b)))))) (G2d64@binding-type G326e@b))) (G2d60@label->binding G326c@lab G325f@r))) (G2d5c@id->label G326a@id))) G3266@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3264@t))) (G2f33@syntax-dispatch G3264@t '(_ any)))) G325e@e))) (set! G2ed3@record-type-descriptor-transformer (lambda (G3272@e G3273@r G3274@mr) ((lambda (G3278@t) ((lambda (G327a@ls/false) (if (and G327a@ls/false (apply (lambda (G327c@id) (G2d42@id? G327c@id)) G327a@ls/false)) (apply (lambda (G327e@id) ((lambda (G3280@lab) ((lambda (G3282@b) ((lambda (G3284@type) ((lambda () (begin (if (not G3280@lab) (G2d68@raise-unbound-error G327e@id) (void)) (if (not (and (eq? G3284@type '$rtd) (list? (G2d66@binding-value G3282@b)))) (G301e@syntax-violation '#f '"not a record type" G3272@e) (void)) (G2f57@chi-expr (car (G2d66@binding-value G3282@b)) G3273@r G3274@mr))))) (G2d64@binding-type G3282@b))) (G2d60@label->binding G3280@lab G3273@r))) (G2d5c@id->label G327e@id))) G327a@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3278@t))) (G2f33@syntax-dispatch G3278@t '(_ any)))) G3272@e))) (set! G2ed5@record-constructor-descriptor-transformer (lambda (G3286@e G3287@r G3288@mr) ((lambda (G328c@t) ((lambda (G328e@ls/false) (if (and G328e@ls/false (apply (lambda (G3290@id) (G2d42@id? G3290@id)) G328e@ls/false)) (apply (lambda (G3292@id) ((lambda (G3294@lab) ((lambda (G3296@b) ((lambda (G3298@type) ((lambda () (begin (if (not G3294@lab) (G2d68@raise-unbound-error G3292@id) (void)) (if (not (and (eq? G3298@type '$rtd) (list? (G2d66@binding-value G3296@b)))) (G301e@syntax-violation '#f '"invalid type" G3286@e) (void)) (G2f57@chi-expr (cadr (G2d66@binding-value G3296@b)) G3287@r G3288@mr))))) (G2d64@binding-type G3296@b))) (G2d60@label->binding G3294@lab G3287@r))) (G2d5c@id->label G3292@id))) G328e@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G328c@t))) (G2f33@syntax-dispatch G328c@t '(_ any)))) G3286@e))) (set! G2ed7@when-macro (lambda (G329a@e) ((lambda (G329c@t) ((lambda (G329e@ls/false) (if G329e@ls/false (apply (lambda (G32a0@test G32a1@e G32a2@e*) (G2ee9@bless (list 'if G32a0@test (cons 'begin (cons G32a1@e G32a2@e*))))) G329e@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G329c@t))) (G2f33@syntax-dispatch G329c@t '(_ any any . each-any)))) G329a@e))) (set! G2ed9@unless-macro (lambda (G32a6@e) ((lambda (G32a8@t) ((lambda (G32aa@ls/false) (if G32aa@ls/false (apply (lambda (G32ac@test G32ad@e G32ae@e*) (G2ee9@bless (list 'if (list 'not G32ac@test) (cons 'begin (cons G32ad@e G32ae@e*))))) G32aa@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G32a8@t))) (G2f33@syntax-dispatch G32a8@t '(_ any any . each-any)))) G32a6@e))) (set! G2edb@if-transformer (lambda (G32b2@e G32b3@r G32b4@mr) ((lambda (G32b8@t) ((lambda (G32ba@ls/false) (if G32ba@ls/false (apply (lambda (G32bc@e0 G32bd@e1 G32be@e2) (list 'if (G2f57@chi-expr G32bc@e0 G32b3@r G32b4@mr) (G2f57@chi-expr G32bd@e1 G32b3@r G32b4@mr) (G2f57@chi-expr G32be@e2 G32b3@r G32b4@mr))) G32ba@ls/false) ((lambda (G32c2@t) ((lambda (G32c4@ls/false) (if G32c4@ls/false (apply (lambda (G32c6@e0 G32c7@e1) (list 'if (G2f57@chi-expr G32c6@e0 G32b3@r G32b4@mr) (G2f57@chi-expr G32c7@e1 G32b3@r G32b4@mr) (G2ca4@G2c16@build-void))) G32c4@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G32c2@t))) (G2f33@syntax-dispatch G32c2@t '(_ any any)))) G32b8@t))) (G2f33@syntax-dispatch G32b8@t '(_ any any any)))) G32b2@e))) (set! G2edd@and-transformer (lambda (G32ca@e G32cb@r G32cc@mr) ((lambda (G32d0@t) ((lambda (G32d2@ls/false) (if G32d2@ls/false (apply (lambda (G32d4@e*) (cons 'and (G2f53@chi-expr* G32d4@e* G32cb@r G32cc@mr))) G32d2@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G32d0@t))) (G2f33@syntax-dispatch G32d0@t '(_ . each-any)))) G32ca@e))) (set! G2edf@or-transformer (lambda (G32d6@e G32d7@r G32d8@mr) ((lambda (G32dc@t) ((lambda (G32de@ls/false) (if G32de@ls/false (apply (lambda (G32e0@e*) (cons 'or (G2f53@chi-expr* G32e0@e* G32d7@r G32d8@mr))) G32de@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G32dc@t))) (G2f33@syntax-dispatch G32dc@t '(_ . each-any)))) G32d6@e))) (set! G2ee1@case-macro (lambda (G32e2@e) ((lambda (G32e5@build-last G32e7@build-one) (begin (set! G32e5@build-last (lambda (G330c@cls) ((lambda (G330e@t) ((lambda (G3310@ls/false) (if G3310@ls/false (apply (lambda (G3312@e G3313@e*) (cons 'begin (cons G3312@e G3313@e*))) G3310@ls/false) ((lambda (G3316@t) ((lambda (G3318@ls/false) (if G3318@ls/false (apply (lambda () (G32e7@build-one G330c@cls '(if #f #f))) G3318@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3316@t))) (G2f33@syntax-dispatch G3316@t '_))) G330e@t))) (G2f33@syntax-dispatch G330e@t '(#(scheme-id else) any . each-any)))) G330c@cls))) (set! G32e7@build-one (lambda (G32fe@cls G32ff@k) ((lambda (G3302@t) ((lambda (G3304@ls/false) (if G3304@ls/false (apply (lambda (G3306@d* G3307@e G3308@e*) (list 'if (list 'memv 't (list 'quote G3306@d*)) (cons 'begin (cons G3307@e G3308@e*)) G32ff@k)) G3304@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3302@t))) (G2f33@syntax-dispatch G3302@t '(each-any any . each-any)))) G32fe@cls))) ((lambda (G32e8@t) ((lambda (G32ea@ls/false) (if G32ea@ls/false (apply (lambda (G32ec@expr) (G2ee9@bless (cons 'let (cons (list (list 't G32ec@expr)) '((if #f #f)))))) G32ea@ls/false) ((lambda (G32ee@t) ((lambda (G32f0@ls/false) (if G32f0@ls/false (apply (lambda (G32f2@expr G32f3@cls G32f4@cls*) (G2ee9@bless (list 'let (list (list 't G32f2@expr)) ((letrec ((G32f8@f (lambda (G32fa@cls G32fb@cls*) (if (null? G32fb@cls*) (G32e5@build-last G32fa@cls) (G32e7@build-one G32fa@cls (G32f8@f (car G32fb@cls*) (cdr G32fb@cls*))))))) G32f8@f) G32f3@cls G32f4@cls*)))) G32f0@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G32ee@t))) (G2f33@syntax-dispatch G32ee@t '(_ any any . each-any)))) G32e8@t))) (G2f33@syntax-dispatch G32e8@t '(_ any)))) G32e2@e))) '#f '#f))) (set! G2ee3@quote-transformer (lambda (G331a@e G331b@r G331c@mr) ((lambda (G3320@t) ((lambda (G3322@ls/false) (if G3322@ls/false (apply (lambda (G3324@datum) (list 'quote (G2d58@stx->datum G3324@datum))) G3322@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3320@t))) (G2f33@syntax-dispatch G3320@t '(_ any)))) G331a@e))) (set! G2ee5@case-lambda-transformer (lambda (G3326@e G3327@r G3328@mr) ((lambda (G332c@t) ((lambda (G332e@ls/false) (if G332e@ls/false (apply (lambda (G3330@fmls* G3331@b* G3332@b**) (call-with-values (lambda () (G2f5f@chi-lambda-clause* G3326@e G3330@fmls* (map cons G3331@b* G3332@b**) G3327@r G3328@mr)) (lambda (G3338@G3336 G3339@G3337) ((lambda (G333c@body* G333d@fmls*) (G2ca1@G2be4@build-case-lambda '#f G333d@fmls* G333c@body*)) G3339@G3337 G3338@G3336)))) G332e@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G332c@t))) (G2f33@syntax-dispatch G332c@t '(_ . #(each (any any . each-any)))))) G3326@e))) (set! G2ee7@lambda-transformer (lambda (G3340@e G3341@r G3342@mr) ((lambda (G3346@t) ((lambda (G3348@ls/false) (if G3348@ls/false (apply (lambda (G334a@fmls G334b@b G334c@b*) (call-with-values (lambda () (G2f5d@chi-lambda-clause G3340@e G334a@fmls (cons G334b@b G334c@b*) G3341@r G3342@mr)) (lambda (G3352@G3350 G3353@G3351) ((lambda (G3356@body G3357@fmls) (G2ca0@G2be2@build-lambda '#f G3357@fmls G3356@body)) G3353@G3351 G3352@G3350)))) G3348@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3346@t))) (G2f33@syntax-dispatch G3346@t '(_ any any . each-any)))) G3340@e))) (set! G2ee9@bless (lambda (G335a@x) (G2d2a@mkstx ((letrec ((G335c@f (lambda (G335e@x) (if (G2d0a@stx? G335e@x) G335e@x (if (pair? G335e@x) (cons (G335c@f (car G335e@x)) (G335c@f (cdr G335e@x))) (if (symbol? G335e@x) (G2ebd@scheme-stx G335e@x) (if (vector? G335e@x) (vector-map G335c@f G335e@x) G335e@x))))))) G335c@f) G335a@x) '() '() '()))) (set! G2eeb@with-syntax-macro (lambda (G3360@e) ((lambda (G3362@t) ((lambda (G3364@ls/false) (if G3364@ls/false (apply (lambda (G3366@pat* G3367@expr* G3368@b G3369@b*) ((lambda (G336e@idn*) (begin (G2f5b@verify-formals (map car G336e@idn*) G3360@e) ((lambda (G3370@t*) (G2ee9@bless (list 'let (map list G3370@t* G3367@expr*) ((letrec ((G3372@f (lambda (G3374@pat* G3375@t*) (if (null? G3374@pat*) (cons 'begin (cons '#f (cons G3368@b G3369@b*))) (list 'syntax-case (car G3375@t*) '() (list (car G3374@pat*) (G3372@f (cdr G3374@pat*) (cdr G3375@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G3374@pat*)) (car G3375@t*)))))))) G3372@f) G3366@pat* G3370@t*)))) (G300c@generate-temporaries G3367@expr*)))) ((letrec ((G3378@f (lambda (G337a@pat*) (if (null? G337a@pat*) '() (call-with-values (lambda () (G2f31@convert-pattern (car G337a@pat*) '())) (lambda (G337e@G337c G337f@G337d) ((lambda (G3382@idn* G3383@pat) (append G3382@idn* (G3378@f (cdr G337a@pat*)))) G337f@G337d G337e@G337c))))))) G3378@f) G3366@pat*))) G3364@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3362@t))) (G2f33@syntax-dispatch G3362@t '(_ #(each (any any)) any . each-any)))) G3360@e))) (set! G2eed@invalid-fmls-error (lambda (G3386@stx G3387@fmls) ((lambda (G338a@t) ((lambda (G338c@ls/false) (if G338c@ls/false (apply (lambda (G338e@id* G338f@last) ((letrec ((G3392@f (lambda (G3394@id*) (if (null? G3394@id*) (values) (if (not (G2d42@id? (car G3394@id*))) (G301e@syntax-violation '#f '"not an identifier" G3386@stx (car G3394@id*)) (begin (G3392@f (cdr G3394@id*)) (if (G2d50@bound-id-member? (car G3394@id*) (cdr G3394@id*)) (G301e@syntax-violation '#f '"duplicate binding" G3386@stx (car G3394@id*)) (void)))))))) G3392@f) (if (G2d42@id? G338f@last) (cons G338f@last G338e@id*) (if (G2d38@syntax-null? G338f@last) G338e@id* (G301e@syntax-violation '#f '"not an identifier" G3386@stx G338f@last))))) G338c@ls/false) ((lambda (G3396@t) ((lambda (G3398@ls/false) (if G3398@ls/false (apply (lambda () (G301e@syntax-violation '#f '"malformed binding form" G3386@stx G3387@fmls)) G3398@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3396@t))) (G2f33@syntax-dispatch G3396@t '_))) G338a@t))) (G2f33@syntax-dispatch G338a@t '#(each+ any () any)))) G3387@fmls))) (set! G2eef@let-macro (lambda (G339a@stx) ((lambda (G339c@t) ((lambda (G339e@ls/false) (if G339e@ls/false (apply (lambda (G33a0@lhs* G33a1@rhs* G33a2@b G33a3@b*) (if (G2d4c@valid-bound-ids? G33a0@lhs*) (G2ee9@bless (cons (cons 'lambda (cons G33a0@lhs* (cons G33a2@b G33a3@b*))) G33a1@rhs*)) (G2eed@invalid-fmls-error G339a@stx G33a0@lhs*))) G339e@ls/false) ((lambda (G33a8@t) ((lambda (G33aa@ls/false) (if (and G33aa@ls/false (apply (lambda (G33ac@f G33ad@lhs* G33ae@rhs* G33af@b G33b0@b*) (G2d42@id? G33ac@f)) G33aa@ls/false)) (apply (lambda (G33b6@f G33b7@lhs* G33b8@rhs* G33b9@b G33ba@b*) (if (G2d4c@valid-bound-ids? G33b7@lhs*) (G2ee9@bless (cons (list 'letrec (list (list G33b6@f (cons 'lambda (cons G33b7@lhs* (cons G33b9@b G33ba@b*))))) G33b6@f) G33b8@rhs*)) (G2eed@invalid-fmls-error G339a@stx G33b7@lhs*))) G33aa@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G33a8@t))) (G2f33@syntax-dispatch G33a8@t '(_ any #(each (any any)) any . each-any)))) G339c@t))) (G2f33@syntax-dispatch G339c@t '(_ #(each (any any)) any . each-any)))) G339a@stx))) (set! G2ef1@let-values-macro (lambda (G33c0@stx) ((lambda (G33c3@rename G33c5@rename*) (begin (set! G33c3@rename (lambda (G3425@x G3426@old* G3427@new*) (begin (if (not (G2d42@id? G3425@x)) (G301e@syntax-violation '#f '"not an indentifier" G33c0@stx G3425@x) (void)) (if (G2d50@bound-id-member? G3425@x G3426@old*) (G301e@syntax-violation '#f '"duplicate binding" G33c0@stx G3425@x) (void)) ((lambda (G342b@y) (values G342b@y (cons G3425@x G3426@old*) (cons G342b@y G3427@new*))) (gensym (G3024@syntax->datum G3425@x)))))) (set! G33c5@rename* (lambda (G3413@x* G3414@old* G3415@new*) (if (null? G3413@x*) (values '() G3414@old* G3415@new*) (call-with-values (lambda () (G33c3@rename (car G3413@x*) G3414@old* G3415@new*)) (lambda (G3419@x G341a@old* G341b@new*) (call-with-values (lambda () (G33c5@rename* (cdr G3413@x*) G341a@old* G341b@new*)) (lambda (G341f@x* G3420@old* G3421@new*) (values (cons G3419@x G341f@x*) G3420@old* G3421@new*)))))))) ((lambda (G33c6@t) ((lambda (G33c8@ls/false) (if G33c8@ls/false (apply (lambda (G33ca@b G33cb@b*) (cons* (G2ee9@bless 'let) '() G33ca@b G33cb@b*)) G33c8@ls/false) ((lambda (G33ce@t) ((lambda (G33d0@ls/false) (if G33d0@ls/false (apply (lambda (G33d2@lhs* G33d3@rhs* G33d4@b G33d5@b*) (G2ee9@bless ((letrec ((G33da@f (lambda (G33dc@lhs* G33dd@rhs* G33de@old* G33df@new*) (if (null? G33dc@lhs*) (cons 'let (cons (map list G33de@old* G33df@new*) (cons G33d4@b G33d5@b*))) ((lambda (G33e4@t) ((lambda (G33e6@ls/false) (if G33e6@ls/false (apply (lambda (G33e8@x*) (call-with-values (lambda () (G33c5@rename* G33e8@x* G33de@old* G33df@new*)) (lambda (G33ed@G33ea G33ee@G33eb G33ef@G33ec) ((lambda (G33f3@new* G33f4@old* G33f5@y*) (list 'call-with-values (list 'lambda '() (car G33dd@rhs*)) (list 'lambda G33f5@y* (G33da@f (cdr G33dc@lhs*) (cdr G33dd@rhs*) G33f4@old* G33f3@new*)))) G33ef@G33ec G33ee@G33eb G33ed@G33ea)))) G33e6@ls/false) ((lambda (G33f9@t) ((lambda (G33fb@ls/false) (if G33fb@ls/false (apply (lambda (G33fd@x* G33fe@x) (call-with-values (lambda () (G33c3@rename G33fe@x G33de@old* G33df@new*)) (lambda (G3401@y G3402@old* G3403@new*) (call-with-values (lambda () (G33c5@rename* G33fd@x* G3402@old* G3403@new*)) (lambda (G3407@y* G3408@old* G3409@new*) (list 'call-with-values (list 'lambda '() (car G33dd@rhs*)) (list 'lambda (append G3407@y* G3401@y) (G33da@f (cdr G33dc@lhs*) (cdr G33dd@rhs*) G3408@old* G3409@new*)))))))) G33fb@ls/false) ((lambda (G340d@t) ((lambda (G340f@ls/false) (if G340f@ls/false (apply (lambda (G3411@others) (G301e@syntax-violation '#f '"malformed bindings" G33c0@stx G3411@others)) G340f@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G340d@t))) (G2f33@syntax-dispatch G340d@t 'any))) G33f9@t))) (G2f33@syntax-dispatch G33f9@t '#(each+ any () any)))) G33e4@t))) (G2f33@syntax-dispatch G33e4@t 'each-any))) (car G33dc@lhs*)))))) G33da@f) G33d2@lhs* G33d3@rhs* '() '()))) G33d0@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G33ce@t))) (G2f33@syntax-dispatch G33ce@t '(_ #(each (any any)) any . each-any)))) G33c6@t))) (G2f33@syntax-dispatch G33c6@t '(_ () any . each-any)))) G33c0@stx))) '#f '#f))) (set! G2ef3@let*-values-macro (lambda (G342d@stx) ((lambda (G3430@check) (begin (set! G3430@check (lambda (G345f@x*) (if (not (null? G345f@x*)) ((lambda (G3461@x) (begin (if (not (G2d42@id? G3461@x)) (G301e@syntax-violation '#f '"not an identifier" G342d@stx G3461@x) (void)) (G3430@check (cdr G345f@x*)) (if (G2d50@bound-id-member? G3461@x (cdr G345f@x*)) (G301e@syntax-violation '#f '"duplicate identifier" G342d@stx G3461@x) (void)))) (car G345f@x*)) (void)))) ((lambda (G3431@t) ((lambda (G3433@ls/false) (if G3433@ls/false (apply (lambda (G3435@b G3436@b*) (cons* (G2ee9@bless 'let) '() G3435@b G3436@b*)) G3433@ls/false) ((lambda (G3439@t) ((lambda (G343b@ls/false) (if G343b@ls/false (apply (lambda (G343d@lhs* G343e@rhs* G343f@b G3440@b*) (G2ee9@bless ((letrec ((G3445@f (lambda (G3447@lhs* G3448@rhs*) (if (null? G3447@lhs*) (cons 'begin (cons G343f@b G3440@b*)) ((lambda (G344b@t) ((lambda (G344d@ls/false) (if G344d@ls/false (apply (lambda (G344f@x*) (begin (G3430@check G344f@x*) (list 'call-with-values (list 'lambda '() (car G3448@rhs*)) (list 'lambda G344f@x* (G3445@f (cdr G3447@lhs*) (cdr G3448@rhs*)))))) G344d@ls/false) ((lambda (G3451@t) ((lambda (G3453@ls/false) (if G3453@ls/false (apply (lambda (G3455@x* G3456@x) (begin (G3430@check (cons G3456@x G3455@x*)) (list 'call-with-values (list 'lambda '() (car G3448@rhs*)) (list 'lambda (append G3455@x* G3456@x) (G3445@f (cdr G3447@lhs*) (cdr G3448@rhs*)))))) G3453@ls/false) ((lambda (G3459@t) ((lambda (G345b@ls/false) (if G345b@ls/false (apply (lambda (G345d@others) (G301e@syntax-violation '#f '"malformed bindings" G342d@stx G345d@others)) G345b@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3459@t))) (G2f33@syntax-dispatch G3459@t 'any))) G3451@t))) (G2f33@syntax-dispatch G3451@t '#(each+ any () any)))) G344b@t))) (G2f33@syntax-dispatch G344b@t 'each-any))) (car G3447@lhs*)))))) G3445@f) G343d@lhs* G343e@rhs*))) G343b@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3439@t))) (G2f33@syntax-dispatch G3439@t '(_ #(each (any any)) any . each-any)))) G3431@t))) (G2f33@syntax-dispatch G3431@t '(_ () any . each-any)))) G342d@stx))) '#f))) (set! G2ef5@trace-lambda-macro (lambda (G3463@stx) ((lambda (G3465@t) ((lambda (G3467@ls/false) (if G3467@ls/false (apply (lambda (G3469@who G346a@fmls G346b@b G346c@b*) (if (G2d4c@valid-bound-ids? G346a@fmls) (G2ee9@bless (list 'make-traced-procedure (list 'quote G3469@who) (cons 'lambda (cons G346a@fmls (cons G346b@b G346c@b*))))) (G2eed@invalid-fmls-error G3463@stx G346a@fmls))) G3467@ls/false) ((lambda (G3471@t) ((lambda (G3473@ls/false) (if G3473@ls/false (apply (lambda (G3475@who G3476@fmls G3477@last G3478@b G3479@b*) (if (G2d4c@valid-bound-ids? (cons G3477@last G3476@fmls)) (G2ee9@bless (list 'make-traced-procedure (list 'quote G3475@who) (cons 'lambda (cons (append G3476@fmls G3477@last) (cons G3478@b G3479@b*))))) (G2eed@invalid-fmls-error G3463@stx (append G3476@fmls G3477@last)))) G3473@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3471@t))) (G2f33@syntax-dispatch G3471@t '(_ any #(each+ any () any) any . each-any)))) G3465@t))) (G2f33@syntax-dispatch G3465@t '(_ any each-any any . each-any)))) G3463@stx))) (set! G2ef7@trace-define-macro (lambda (G347f@stx) ((lambda (G3481@t) ((lambda (G3483@ls/false) (if G3483@ls/false (apply (lambda (G3485@who G3486@fmls G3487@b G3488@b*) (if (G2d4c@valid-bound-ids? G3486@fmls) (G2ee9@bless (list 'define G3485@who (list 'make-traced-procedure (list 'quote G3485@who) (cons 'lambda (cons G3486@fmls (cons G3487@b G3488@b*)))))) (G2eed@invalid-fmls-error G347f@stx G3486@fmls))) G3483@ls/false) ((lambda (G348d@t) ((lambda (G348f@ls/false) (if G348f@ls/false (apply (lambda (G3491@who G3492@fmls G3493@last G3494@b G3495@b*) (if (G2d4c@valid-bound-ids? (cons G3493@last G3492@fmls)) (G2ee9@bless (list 'define G3491@who (list 'make-traced-procedure (list 'quote G3491@who) (cons 'lambda (cons (append G3492@fmls G3493@last) (cons G3494@b G3495@b*)))))) (G2eed@invalid-fmls-error G347f@stx (append G3492@fmls G3493@last)))) G348f@ls/false) ((lambda (G349b@t) ((lambda (G349d@ls/false) (if G349d@ls/false (apply (lambda (G349f@who G34a0@expr) (if (G2d42@id? G349f@who) (G2ee9@bless (list 'define G349f@who (list 'let (list (list 'v G34a0@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G349f@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G301e@syntax-violation '#f '"invalid name" G347f@stx))) G349d@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G349b@t))) (G2f33@syntax-dispatch G349b@t '(_ any any)))) G348d@t))) (G2f33@syntax-dispatch G348d@t '(_ (any . #(each+ any () any)) any . each-any)))) G3481@t))) (G2f33@syntax-dispatch G3481@t '(_ (any . each-any) any . each-any)))) G347f@stx))) (set! G2ef9@trace-define-syntax-macro (lambda (G34a3@stx) ((lambda (G34a5@t) ((lambda (G34a7@ls/false) (if G34a7@ls/false (apply (lambda (G34a9@who G34aa@expr) (if (G2d42@id? G34a9@who) (G2ee9@bless (list 'define-syntax G34a9@who (list 'make-traced-macro (list 'quote G34a9@who) G34aa@expr))) (G301e@syntax-violation '#f '"invalid name" G34a3@stx))) G34a7@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G34a5@t))) (G2f33@syntax-dispatch G34a5@t '(_ any any)))) G34a3@stx))) (set! G2efb@trace-let/rec-syntax (lambda (G34ad@who) (lambda (G34af@stx) ((lambda (G34b1@t) ((lambda (G34b3@ls/false) (if G34b3@ls/false (apply (lambda (G34b5@lhs* G34b6@rhs* G34b7@b G34b8@b*) (if (G2d4c@valid-bound-ids? G34b5@lhs*) ((lambda (G34bd@rhs*) (G2ee9@bless (cons G34ad@who (cons (map list G34b5@lhs* G34bd@rhs*) (cons G34b7@b G34b8@b*))))) (map (lambda (G34bf@lhs G34c0@rhs) (list 'make-traced-macro (list 'quote G34bf@lhs) G34c0@rhs)) G34b5@lhs* G34b6@rhs*)) (G2eed@invalid-fmls-error G34af@stx G34b5@lhs*))) G34b3@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G34b1@t))) (G2f33@syntax-dispatch G34b1@t '(_ #(each (any any)) any . each-any)))) G34af@stx)))) (set! G2efd@trace-let-syntax-macro (G2efb@trace-let/rec-syntax 'let-syntax)) (set! G2eff@trace-letrec-syntax-macro (G2efb@trace-let/rec-syntax 'letrec-syntax)) (set! G2f01@guard-macro (lambda (G34c3@x) ((lambda (G34c6@gen-clauses) (begin (set! G34c6@gen-clauses (lambda (G34dd@con G34de@outerk G34df@clause*) ((lambda (G34e4@f G34e6@f*) (begin (set! G34e4@f (lambda (G3519@x G351a@k) ((lambda (G351d@t) ((lambda (G351f@ls/false) (if G351f@ls/false (apply (lambda (G3521@e G3522@p) ((lambda (G3525@t) (list 'let (list (list G3525@t G3521@e)) (list 'if G3525@t (list G3522@p G3525@t) G351a@k))) (gensym))) G351f@ls/false) ((lambda (G3527@t) ((lambda (G3529@ls/false) (if G3529@ls/false (apply (lambda (G352b@e) ((lambda (G352d@t) (list 'let (list (list G352d@t G352b@e)) (list 'if G352d@t G352d@t G351a@k))) (gensym))) G3529@ls/false) ((lambda (G352f@t) ((lambda (G3531@ls/false) (if G3531@ls/false (apply (lambda (G3533@e G3534@v G3535@v*) (list 'if G3533@e (cons 'begin (cons G3534@v G3535@v*)) G351a@k)) G3531@ls/false) ((lambda (G3539@t) ((lambda (G353b@ls/false) (if G353b@ls/false (apply (lambda () (G301e@syntax-violation '#f '"invalid guard clause" G3519@x)) G353b@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3539@t))) (G2f33@syntax-dispatch G3539@t '_))) G352f@t))) (G2f33@syntax-dispatch G352f@t '(any any . each-any)))) G3527@t))) (G2f33@syntax-dispatch G3527@t '(any)))) G351d@t))) (G2f33@syntax-dispatch G351d@t '(any #(scheme-id =>) any)))) G3519@x))) (set! G34e6@f* (lambda (G34f1@x*) ((lambda (G34f3@t) ((lambda (G34f5@ls/false) (if G34f5@ls/false (apply (lambda () ((lambda (G34f7@g) (values (list G34f7@g (list 'lambda '() (list 'raise-continuable G34dd@con))) G34f7@g)) (gensym))) G34f5@ls/false) ((lambda (G34f9@t) ((lambda (G34fb@ls/false) (if G34fb@ls/false (apply (lambda (G34fd@e G34fe@e*) (values (cons 'begin (cons G34fd@e G34fe@e*)) '#f)) G34fb@ls/false) ((lambda (G3501@t) ((lambda (G3503@ls/false) (if G3503@ls/false (apply (lambda (G3505@cls G3506@cls*) (call-with-values (lambda () (G34e6@f* G3506@cls*)) (lambda (G350b@G3509 G350c@G350a) ((lambda (G350f@g G3510@e) (values (G34e4@f G3505@cls G3510@e) G350f@g)) G350c@G350a G350b@G3509)))) G3503@ls/false) ((lambda (G3513@t) ((lambda (G3515@ls/false) (if G3515@ls/false (apply (lambda (G3517@others) (G301e@syntax-violation '#f '"invalid guard clause" G3517@others)) G3515@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3513@t))) (G2f33@syntax-dispatch G3513@t 'any))) G3501@t))) (G2f33@syntax-dispatch G3501@t '(any . any)))) G34f9@t))) (G2f33@syntax-dispatch G34f9@t '((#(scheme-id else) any . each-any))))) G34f3@t))) (G2f33@syntax-dispatch G34f3@t '()))) G34f1@x*))) (call-with-values (lambda () (G34e6@f* G34df@clause*)) (lambda (G34e9@G34e7 G34ea@G34e8) ((lambda (G34ed@raisek G34ee@code) (if G34ed@raisek (list (list 'call/cc (list 'lambda (list G34ed@raisek) (list G34de@outerk (list 'lambda '() G34ee@code))))) (list G34de@outerk (list 'lambda '() G34ee@code)))) G34ea@G34e8 G34e9@G34e7))))) '#f '#f))) ((lambda (G34c7@t) ((lambda (G34c9@ls/false) (if (and G34c9@ls/false (apply (lambda (G34cb@con G34cc@clause* G34cd@b G34ce@b*) (G2d42@id? G34cb@con)) G34c9@ls/false)) (apply (lambda (G34d3@con G34d4@clause* G34d5@b G34d6@b*) ((lambda (G34db@outerk) (G2ee9@bless (list (list 'call/cc (list 'lambda (list G34db@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G34d3@con) (G34c6@gen-clauses G34d3@con G34db@outerk G34d4@clause*)) (cons 'lambda (cons '() (cons G34d5@b G34d6@b*)))))))))) (gensym))) G34c9@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G34c7@t))) (G2f33@syntax-dispatch G34c7@t '(_ (any . each-any) any . each-any)))) G34c3@x))) '#f))) (set! G2f03@define-enumeration-macro (lambda (G353d@stx) ((lambda (G3540@set? G3542@remove-dups) (begin (set! G3540@set? (lambda (G3559@x) (or (null? G3559@x) (and (not (memq (car G3559@x) (cdr G3559@x))) (G3540@set? (cdr G3559@x)))))) (set! G3542@remove-dups (lambda (G3557@ls) (if (null? G3557@ls) '() (cons (car G3557@ls) (G3542@remove-dups (remq (car G3557@ls) (cdr G3557@ls))))))) ((lambda (G3543@t) ((lambda (G3545@ls/false) (if (and G3545@ls/false (apply (lambda (G3547@name G3548@id* G3549@maker) (and (G2d42@id? G3547@name) (G2d42@id? G3549@maker) (for-all G2d42@id? G3548@id*))) G3545@ls/false)) (apply (lambda (G354d@name G354e@id* G354f@maker) ((lambda (G3553@name* G3554@mk) (G2ee9@bless (list 'begin (list 'define G3554@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3553@name*)))) (list 'define-syntax G354d@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3553@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G354d@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G354f@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G354f@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3553@name*)) (cons 'syntax-violation (cons (list 'quote G354f@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3554@mk '('(n* ...)))))))))))) (G3542@remove-dups (G3024@syntax->datum G354e@id*)) (gensym))) G3545@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3543@t))) (G2f33@syntax-dispatch G3543@t '(_ any each-any any)))) G353d@stx))) '#f '#f))) (set! G2f05@time-macro (lambda (G355b@stx) ((lambda (G355d@t) ((lambda (G355f@ls/false) (if G355f@ls/false (apply (lambda (G3561@expr) ((lambda (G3563@str) (G2ee9@bless (list 'time-it G3563@str (list 'lambda '() G3561@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3567@G3565 G3568@G3566) ((lambda (G356b@e G356c@p) (begin (write (G3024@syntax->datum G3561@expr) G356c@p) (G356b@e))) G3568@G3566 G3567@G3565))))) G355f@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G355d@t))) (G2f33@syntax-dispatch G355d@t '(_ any)))) G355b@stx))) (set! G2f07@delay-macro (lambda (G356f@stx) ((lambda (G3571@t) ((lambda (G3573@ls/false) (if G3573@ls/false (apply (lambda (G3575@expr) (G2ee9@bless (list 'make-promise (list 'lambda '() G3575@expr)))) G3573@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3571@t))) (G2f33@syntax-dispatch G3571@t '(_ any)))) G356f@stx))) (set! G2f09@assert-macro (lambda (G3577@stx) ((lambda (G3579@t) ((lambda (G357b@ls/false) (if G357b@ls/false (apply (lambda (G357d@expr) ((lambda (G357f@pos) (G2ee9@bless (list 'unless G357d@expr (list 'assertion-error (list 'quote G357d@expr) (list 'quote G357f@pos))))) (or (G3016@expression-position G3577@stx) (G3016@expression-position G357d@expr)))) G357b@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3579@t))) (G2f33@syntax-dispatch G3579@t '(_ any)))) G3577@stx))) (set! G2f0b@endianness-macro (lambda (G3581@stx) ((lambda (G3583@t) ((lambda (G3585@ls/false) (if G3585@ls/false (apply (lambda (G3587@e) ((lambda (G3589@t) (if (memv G3589@t '(little)) (G2ee9@bless ''little) (if (memv G3589@t '(big)) (G2ee9@bless ''big) (G301e@syntax-violation '#f '"endianness must be big or little" G3581@stx)))) (G3024@syntax->datum G3587@e))) G3585@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3583@t))) (G2f33@syntax-dispatch G3583@t '(_ any)))) G3581@stx))) (set! G2f0d@identifier-syntax-macro (lambda (G358b@stx) ((lambda (G358d@t) ((lambda (G358f@ls/false) (if G358f@ls/false (apply (lambda (G3591@expr) (G2ee9@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G3591@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G3591@expr) '((syntax (e* ...)))))))))) G358f@ls/false) ((lambda (G3593@t) ((lambda (G3595@ls/false) (if (and G3595@ls/false (apply (lambda (G3597@id1 G3598@expr1 G3599@id2 G359a@expr2 G359b@expr3) (and (G2d42@id? G3597@id1) (G2d42@id? G3599@id2) (G2d42@id? G359a@expr2))) G3595@ls/false)) (apply (lambda (G35a1@id1 G35a2@expr1 G35a3@id2 G35a4@expr2 G35a5@expr3) (G2ee9@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35a2@expr1)) (list (list 'set! 'id G35a4@expr2) (list 'syntax G35a5@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35a2@expr1 '(e* ...))))))))) G3595@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3593@t))) (G2f33@syntax-dispatch G3593@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G358d@t))) (G2f33@syntax-dispatch G358d@t '(_ any)))) G358b@stx))) (set! G2f0f@do-macro (lambda (G35ab@stx) ((lambda (G35ae@bind) (begin (set! G35ae@bind (lambda (G35c5@x) ((lambda (G35c7@t) ((lambda (G35c9@ls/false) (if G35c9@ls/false (apply (lambda (G35cb@x G35cc@init) (list G35cb@x G35cc@init G35cb@x)) G35c9@ls/false) ((lambda (G35cf@t) ((lambda (G35d1@ls/false) (if G35d1@ls/false (apply (lambda (G35d3@x G35d4@init G35d5@step) (list G35d3@x G35d4@init G35d5@step)) G35d1@ls/false) ((lambda (G35d9@t) ((lambda (G35db@ls/false) (if G35db@ls/false (apply (lambda () (G301e@syntax-violation '#f '"invalid binding" G35ab@stx)) G35db@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G35d9@t))) (G2f33@syntax-dispatch G35d9@t '_))) G35cf@t))) (G2f33@syntax-dispatch G35cf@t '(any any any)))) G35c7@t))) (G2f33@syntax-dispatch G35c7@t '(any any)))) G35c5@x))) ((lambda (G35af@t) ((lambda (G35b1@ls/false) (if G35b1@ls/false (apply (lambda (G35b3@binding* G35b4@test G35b5@expr* G35b6@command*) ((lambda (G35bb@t) ((lambda (G35bd@ls/false) (if G35bd@ls/false (apply (lambda (G35bf@x* G35c0@init* G35c1@step*) (if (G2d4c@valid-bound-ids? G35bf@x*) (G2ee9@bless (list 'letrec (list (list 'loop (list 'lambda G35bf@x* (list 'if G35b4@test (cons 'begin (cons '(if #f #f) G35b5@expr*)) (cons 'begin (append G35b6@command* (list (cons 'loop G35c1@step*)))))))) (cons 'loop G35c0@init*))) (G301e@syntax-violation '#f '"invalid bindings" G35ab@stx))) G35bd@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G35bb@t))) (G2f33@syntax-dispatch G35bb@t '#(each (any any any))))) (map G35ae@bind G35b3@binding*))) G35b1@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G35af@t))) (G2f33@syntax-dispatch G35af@t '(_ each-any (any . each-any) . each-any)))) G35ab@stx))) '#f))) (set! G2f11@let*-macro (lambda (G35dd@stx) ((lambda (G35df@t) ((lambda (G35e1@ls/false) (if (and G35e1@ls/false (apply (lambda (G35e3@lhs* G35e4@rhs* G35e5@b G35e6@b*) (for-all G2d42@id? G35e3@lhs*)) G35e1@ls/false)) (apply (lambda (G35eb@lhs* G35ec@rhs* G35ed@b G35ee@b*) (G2ee9@bless ((letrec ((G35f3@f (lambda (G35f5@x*) (if (null? G35f5@x*) (cons 'let (cons '() (cons G35ed@b G35ee@b*))) (list 'let (list (car G35f5@x*)) (G35f3@f (cdr G35f5@x*))))))) G35f3@f) (map list G35eb@lhs* G35ec@rhs*)))) G35e1@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G35df@t))) (G2f33@syntax-dispatch G35df@t '(_ #(each (any any)) any . each-any)))) G35dd@stx))) (set! G2f13@or-macro (lambda (G35f7@stx) ((lambda (G35f9@t) ((lambda (G35fb@ls/false) (if G35fb@ls/false (apply (lambda () '#f) G35fb@ls/false) ((lambda (G35fd@t) ((lambda (G35ff@ls/false) (if G35ff@ls/false (apply (lambda (G3601@e G3602@e*) (G2ee9@bless ((letrec ((G3605@f (lambda (G3607@e G3608@e*) (if (null? G3608@e*) (list 'begin '#f G3607@e) (list 'let (list (list 't G3607@e)) (list 'if 't 't (G3605@f (car G3608@e*) (cdr G3608@e*)))))))) G3605@f) G3601@e G3602@e*))) G35ff@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G35fd@t))) (G2f33@syntax-dispatch G35fd@t '(_ any . each-any)))) G35f9@t))) (G2f33@syntax-dispatch G35f9@t '(_)))) G35f7@stx))) (set! G2f15@and-macro (lambda (G360b@stx) ((lambda (G360d@t) ((lambda (G360f@ls/false) (if G360f@ls/false (apply (lambda () '#t) G360f@ls/false) ((lambda (G3611@t) ((lambda (G3613@ls/false) (if G3613@ls/false (apply (lambda (G3615@e G3616@e*) (G2ee9@bless ((letrec ((G3619@f (lambda (G361b@e G361c@e*) (if (null? G361c@e*) (list 'begin '#f G361b@e) (cons 'if (cons G361b@e (cons (G3619@f (car G361c@e*) (cdr G361c@e*)) '(#f)))))))) G3619@f) G3615@e G3616@e*))) G3613@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3611@t))) (G2f33@syntax-dispatch G3611@t '(_ any . each-any)))) G360d@t))) (G2f33@syntax-dispatch G360d@t '(_)))) G360b@stx))) (set! G2f17@cond-macro (lambda (G361f@stx) ((lambda (G3621@t) ((lambda (G3623@ls/false) (if G3623@ls/false (apply (lambda (G3625@cls G3626@cls*) (G2ee9@bless ((letrec ((G3629@f (lambda (G362b@cls G362c@cls*) (if (null? G362c@cls*) ((lambda (G362f@t) ((lambda (G3631@ls/false) (if G3631@ls/false (apply (lambda (G3633@e G3634@e*) (cons 'begin (cons G3633@e G3634@e*))) G3631@ls/false) ((lambda (G3637@t) ((lambda (G3639@ls/false) (if G3639@ls/false (apply (lambda (G363b@e G363c@p) (list 'let (list (list 't G363b@e)) (list 'if 't (cons G363c@p '(t))))) G3639@ls/false) ((lambda (G363f@t) ((lambda (G3641@ls/false) (if G3641@ls/false (apply (lambda (G3643@e) (cons 'or (cons G3643@e '((if #f #f))))) G3641@ls/false) ((lambda (G3645@t) ((lambda (G3647@ls/false) (if G3647@ls/false (apply (lambda (G3649@e G364a@e*) (list 'if G3649@e (cons 'begin G364a@e*))) G3647@ls/false) ((lambda (G364d@t) ((lambda (G364f@ls/false) (if G364f@ls/false (apply (lambda () (G301e@syntax-violation '#f '"invalid last clause" G361f@stx)) G364f@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G364d@t))) (G2f33@syntax-dispatch G364d@t '_))) G3645@t))) (G2f33@syntax-dispatch G3645@t '(any . each-any)))) G363f@t))) (G2f33@syntax-dispatch G363f@t '(any)))) G3637@t))) (G2f33@syntax-dispatch G3637@t '(any #(scheme-id =>) any)))) G362f@t))) (G2f33@syntax-dispatch G362f@t '(#(scheme-id else) any . each-any)))) G362b@cls) ((lambda (G3651@t) ((lambda (G3653@ls/false) (if G3653@ls/false (apply (lambda (G3655@e G3656@e*) (G301e@syntax-violation '#f '"incorrect position of keyword else" G361f@stx)) G3653@ls/false) ((lambda (G3659@t) ((lambda (G365b@ls/false) (if G365b@ls/false (apply (lambda (G365d@e G365e@p) (list 'let (list (list 't G365d@e)) (list 'if 't (cons G365e@p '(t)) (G3629@f (car G362c@cls*) (cdr G362c@cls*))))) G365b@ls/false) ((lambda (G3661@t) ((lambda (G3663@ls/false) (if G3663@ls/false (apply (lambda (G3665@e) (list 'or G3665@e (G3629@f (car G362c@cls*) (cdr G362c@cls*)))) G3663@ls/false) ((lambda (G3667@t) ((lambda (G3669@ls/false) (if G3669@ls/false (apply (lambda (G366b@e G366c@e*) (list 'if G366b@e (cons 'begin G366c@e*) (G3629@f (car G362c@cls*) (cdr G362c@cls*)))) G3669@ls/false) ((lambda (G366f@t) ((lambda (G3671@ls/false) (if G3671@ls/false (apply (lambda () (G301e@syntax-violation '#f '"invalid last clause" G361f@stx)) G3671@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G366f@t))) (G2f33@syntax-dispatch G366f@t '_))) G3667@t))) (G2f33@syntax-dispatch G3667@t '(any . each-any)))) G3661@t))) (G2f33@syntax-dispatch G3661@t '(any)))) G3659@t))) (G2f33@syntax-dispatch G3659@t '(any #(scheme-id =>) any)))) G3651@t))) (G2f33@syntax-dispatch G3651@t '(#(scheme-id else) any . each-any)))) G362b@cls))))) G3629@f) G3625@cls G3626@cls*))) G3623@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3621@t))) (G2f33@syntax-dispatch G3621@t '(_ any . each-any)))) G361f@stx))) (set! G2f19@do-include (lambda (G3673@stx G3674@id G3675@filename) ((lambda (G3679@filename) (begin (if (not (and (string? G3679@filename) (G2d42@id? G3674@id))) (G301e@syntax-violation '#f '"invalid syntax" G3673@stx) (void)) (cons (G2ee9@bless 'begin) (with-input-from-file G3679@filename (lambda () ((letrec ((G367b@f (lambda (G367d@ls) ((lambda (G367f@x) (if (eof-object? G367f@x) (reverse G367d@ls) (G367b@f (cons (G2d20@datum->stx G3674@id G367f@x) G367d@ls)))) (G28e9@G280a@read-annotated))))) G367b@f) '())))))) (G2d58@stx->datum G3675@filename)))) (set! G2f1b@include-macro (lambda (G3681@e) ((lambda (G3683@t) ((lambda (G3685@ls/false) (if G3685@ls/false (apply (lambda (G3687@id G3688@filename) (G2f19@do-include G3681@e G3687@id G3688@filename)) G3685@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3683@t))) (G2f33@syntax-dispatch G3683@t '(any any)))) G3681@e))) (set! G2f1d@include-into-macro (lambda (G368b@e) ((lambda (G368d@t) ((lambda (G368f@ls/false) (if G368f@ls/false (apply (lambda (G3691@id G3692@filename) (G2f19@do-include G368b@e G3691@id G3692@filename)) G368f@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G368d@t))) (G2f33@syntax-dispatch G368d@t '(_ any any)))) G368b@e))) (set! G2f1f@syntax-rules-macro (lambda (G3695@e) ((lambda (G3697@t) ((lambda (G3699@ls/false) (if G3699@ls/false (apply (lambda (G369b@lits G369c@pat* G369d@tmp*) (begin (G2f39@verify-literals G369b@lits G3695@e) (G2ee9@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G369b@lits (map (lambda (G36a1@pat G36a2@tmp) ((lambda (G36a5@t) ((lambda (G36a7@ls/false) (if G36a7@ls/false (apply (lambda (G36a9@rest) (list (cons 'g G36a9@rest) (list 'syntax G36a2@tmp))) G36a7@ls/false) ((lambda (G36ab@t) ((lambda (G36ad@ls/false) (if G36ad@ls/false (apply (lambda () (G301e@syntax-violation '#f '"invalid syntax-rules pattern" G3695@e G36a1@pat)) G36ad@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G36ab@t))) (G2f33@syntax-dispatch G36ab@t '_))) G36a5@t))) (G2f33@syntax-dispatch G36a5@t '(_ . any)))) G36a1@pat)) G369c@pat* G369d@tmp*)))))))) G3699@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3697@t))) (G2f33@syntax-dispatch G3697@t '(_ each-any . #(each (any any)))))) G3695@e))) (set! G2f21@quasiquote-macro ((lambda () ((lambda (G36b0@datum G36cc@quasicons* G36ce@quasicons G36d0@quasiappend G36d2@quasivector G36d4@vquasi G36d6@quasi) (begin (set! G36b0@datum (lambda (G37b1@x) (list (G2ebd@scheme-stx 'quote) (G2d2a@mkstx G37b1@x '() '() '())))) (set! G36cc@quasicons* (lambda (G37a9@x G37aa@y) ((letrec ((G37ad@f (lambda (G37af@x) (if (null? G37af@x) G37aa@y (G36ce@quasicons (car G37af@x) (G37ad@f (cdr G37af@x))))))) G37ad@f) G37a9@x))) (set! G36ce@quasicons (lambda (G3783@x G3784@y) ((lambda (G3787@t) ((lambda (G3789@ls/false) (if G3789@ls/false (apply (lambda (G378b@dy) ((lambda (G378d@t) ((lambda (G378f@ls/false) (if G378f@ls/false (apply (lambda (G3791@dx) (list (G2ebd@scheme-stx 'quote) (cons G3791@dx G378b@dy))) G378f@ls/false) ((lambda (G3793@t) ((lambda (G3795@ls/false) (if G3795@ls/false (apply (lambda () ((lambda (G3797@t) ((lambda (G3799@ls/false) (if G3799@ls/false (apply (lambda () (list (G2ebd@scheme-stx 'list) G3783@x)) G3799@ls/false) ((lambda (G379b@t) ((lambda (G379d@ls/false) (if G379d@ls/false (apply (lambda () (list (G2ebd@scheme-stx 'cons) G3783@x G3784@y)) G379d@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G379b@t))) (G2f33@syntax-dispatch G379b@t '_))) G3797@t))) (G2f33@syntax-dispatch G3797@t '()))) G378b@dy)) G3795@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3793@t))) (G2f33@syntax-dispatch G3793@t '_))) G378d@t))) (G2f33@syntax-dispatch G378d@t '(#(scheme-id quote) any)))) G3783@x)) G3789@ls/false) ((lambda (G379f@t) ((lambda (G37a1@ls/false) (if G37a1@ls/false (apply (lambda (G37a3@stuff) (cons* (G2ebd@scheme-stx 'list) G3783@x G37a3@stuff)) G37a1@ls/false) ((lambda (G37a5@t) ((lambda (G37a7@ls/false) (if G37a7@ls/false (apply (lambda () (list (G2ebd@scheme-stx 'cons) G3783@x G3784@y)) G37a7@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G37a5@t))) (G2f33@syntax-dispatch G37a5@t '_))) G379f@t))) (G2f33@syntax-dispatch G379f@t '(#(scheme-id list) . each-any)))) G3787@t))) (G2f33@syntax-dispatch G3787@t '(#(scheme-id quote) any)))) G3784@y))) (set! G36d0@quasiappend (lambda (G3769@x G376a@y) ((lambda (G376d@ls) (if (null? G376d@ls) (list (G2ebd@scheme-stx 'quote) '()) (if (null? (cdr G376d@ls)) (car G376d@ls) (cons* (G2ebd@scheme-stx 'append) G376d@ls)))) ((letrec ((G376f@f (lambda (G3771@x) (if (null? G3771@x) ((lambda (G3773@t) ((lambda (G3775@ls/false) (if G3775@ls/false (apply (lambda () '()) G3775@ls/false) ((lambda (G3777@t) ((lambda (G3779@ls/false) (if G3779@ls/false (apply (lambda () (list G376a@y)) G3779@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3777@t))) (G2f33@syntax-dispatch G3777@t '_))) G3773@t))) (G2f33@syntax-dispatch G3773@t '(#(scheme-id quote) ())))) G376a@y) ((lambda (G377b@t) ((lambda (G377d@ls/false) (if G377d@ls/false (apply (lambda () (G376f@f (cdr G3771@x))) G377d@ls/false) ((lambda (G377f@t) ((lambda (G3781@ls/false) (if G3781@ls/false (apply (lambda () (cons (car G3771@x) (G376f@f (cdr G3771@x)))) G3781@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G377f@t))) (G2f33@syntax-dispatch G377f@t '_))) G377b@t))) (G2f33@syntax-dispatch G377b@t '(#(scheme-id quote) ())))) (car G3771@x)))))) G376f@f) G3769@x)))) (set! G36d2@quasivector (lambda (G3737@x) ((lambda (G3739@pat-x) ((lambda (G373b@t) ((lambda (G373d@ls/false) (if G373d@ls/false (apply (lambda (G373f@x*) (list (G2ebd@scheme-stx 'quote) (list->vector G373f@x*))) G373d@ls/false) ((lambda (G3741@t) ((lambda (G3743@ls/false) (if G3743@ls/false (apply (lambda () ((letrec ((G3745@f (lambda (G3747@x G3748@k) ((lambda (G374b@t) ((lambda (G374d@ls/false) (if G374d@ls/false (apply (lambda (G374f@x*) (G3748@k (map (lambda (G3751@x) (list (G2ebd@scheme-stx 'quote) G3751@x)) G374f@x*))) G374d@ls/false) ((lambda (G3753@t) ((lambda (G3755@ls/false) (if G3755@ls/false (apply (lambda (G3757@x*) (G3748@k G3757@x*)) G3755@ls/false) ((lambda (G3759@t) ((lambda (G375b@ls/false) (if G375b@ls/false (apply (lambda (G375d@x G375e@y) (G3745@f G375e@y (lambda (G3761@ls) (G3748@k (cons G375d@x G3761@ls))))) G375b@ls/false) ((lambda (G3763@t) ((lambda (G3765@ls/false) (if G3765@ls/false (apply (lambda () (list (G2ebd@scheme-stx 'list->vector) G3739@pat-x)) G3765@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3763@t))) (G2f33@syntax-dispatch G3763@t '_))) G3759@t))) (G2f33@syntax-dispatch G3759@t '(#(scheme-id cons) any any)))) G3753@t))) (G2f33@syntax-dispatch G3753@t '(#(scheme-id list) . each-any)))) G374b@t))) (G2f33@syntax-dispatch G374b@t '(#(scheme-id quote) each-any)))) G3747@x)))) G3745@f) G3737@x (lambda (G3767@ls) (cons* (G2ebd@scheme-stx 'vector) G3767@ls)))) G3743@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3741@t))) (G2f33@syntax-dispatch G3741@t '_))) G373b@t))) (G2f33@syntax-dispatch G373b@t '(#(scheme-id quote) each-any)))) G3739@pat-x)) G3737@x))) (set! G36d4@vquasi (lambda (G3715@p G3716@lev) ((lambda (G3719@t) ((lambda (G371b@ls/false) (if G371b@ls/false (apply (lambda (G371d@p G371e@q) ((lambda (G3721@t) ((lambda (G3723@ls/false) (if G3723@ls/false (apply (lambda (G3725@p) (if (= G3716@lev '0) (G36cc@quasicons* G3725@p (G36d4@vquasi G371e@q G3716@lev)) (G36ce@quasicons (G36ce@quasicons (G36b0@datum 'unquote) (G36d6@quasi G3725@p (- G3716@lev '1))) (G36d4@vquasi G371e@q G3716@lev)))) G3723@ls/false) ((lambda (G3727@t) ((lambda (G3729@ls/false) (if G3729@ls/false (apply (lambda (G372b@p) (if (= G3716@lev '0) (G36d0@quasiappend G372b@p (G36d4@vquasi G371e@q G3716@lev)) (G36ce@quasicons (G36ce@quasicons (G36b0@datum 'unquote-splicing) (G36d6@quasi G372b@p (- G3716@lev '1))) (G36d4@vquasi G371e@q G3716@lev)))) G3729@ls/false) ((lambda (G372d@t) ((lambda (G372f@ls/false) (if G372f@ls/false (apply (lambda (G3731@p) (G36ce@quasicons (G36d6@quasi G3731@p G3716@lev) (G36d4@vquasi G371e@q G3716@lev))) G372f@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G372d@t))) (G2f33@syntax-dispatch G372d@t 'any))) G3727@t))) (G2f33@syntax-dispatch G3727@t '(#(scheme-id unquote-splicing) . each-any)))) G3721@t))) (G2f33@syntax-dispatch G3721@t '(#(scheme-id unquote) . each-any)))) G371d@p)) G371b@ls/false) ((lambda (G3733@t) ((lambda (G3735@ls/false) (if G3735@ls/false (apply (lambda () (list (G2ebd@scheme-stx 'quote) '())) G3735@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3733@t))) (G2f33@syntax-dispatch G3733@t '()))) G3719@t))) (G2f33@syntax-dispatch G3719@t '(any . any)))) G3715@p))) (set! G36d6@quasi (lambda (G36df@p G36e0@lev) ((lambda (G36e3@t) ((lambda (G36e5@ls/false) (if G36e5@ls/false (apply (lambda (G36e7@p) (if (= G36e0@lev '0) G36e7@p (G36ce@quasicons (G36b0@datum 'unquote) (G36d6@quasi (list G36e7@p) (- G36e0@lev '1))))) G36e5@ls/false) ((lambda (G36e9@t) ((lambda (G36eb@ls/false) (if G36eb@ls/false (apply (lambda (G36ed@p G36ee@q) (if (= G36e0@lev '0) (G36cc@quasicons* G36ed@p (G36d6@quasi G36ee@q G36e0@lev)) (G36ce@quasicons (G36ce@quasicons (G36b0@datum 'unquote) (G36d6@quasi G36ed@p (- G36e0@lev '1))) (G36d6@quasi G36ee@q G36e0@lev)))) G36eb@ls/false) ((lambda (G36f1@t) ((lambda (G36f3@ls/false) (if G36f3@ls/false (apply (lambda (G36f5@p G36f6@q) (if (= G36e0@lev '0) (G36d0@quasiappend G36f5@p (G36d6@quasi G36f6@q G36e0@lev)) (G36ce@quasicons (G36ce@quasicons (G36b0@datum 'unquote-splicing) (G36d6@quasi G36f5@p (- G36e0@lev '1))) (G36d6@quasi G36f6@q G36e0@lev)))) G36f3@ls/false) ((lambda (G36f9@t) ((lambda (G36fb@ls/false) (if G36fb@ls/false (apply (lambda (G36fd@p) (G36ce@quasicons (G36b0@datum 'quasiquote) (G36d6@quasi (list G36fd@p) (+ G36e0@lev '1)))) G36fb@ls/false) ((lambda (G36ff@t) ((lambda (G3701@ls/false) (if G3701@ls/false (apply (lambda (G3703@p G3704@q) (G36ce@quasicons (G36d6@quasi G3703@p G36e0@lev) (G36d6@quasi G3704@q G36e0@lev))) G3701@ls/false) ((lambda (G3707@t) ((lambda (G3709@ls/false) (if (and G3709@ls/false (apply (lambda (G370b@x) (not (G2d0a@stx? G370b@x))) G3709@ls/false)) (apply (lambda (G370d@x) (G36d2@quasivector (G36d4@vquasi G370d@x G36e0@lev))) G3709@ls/false) ((lambda (G370f@t) ((lambda (G3711@ls/false) (if G3711@ls/false (apply (lambda (G3713@p) (list (G2ebd@scheme-stx 'quote) G3713@p)) G3711@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G370f@t))) (G2f33@syntax-dispatch G370f@t 'any))) G3707@t))) (G2f33@syntax-dispatch G3707@t '#(vector each-any)))) G36ff@t))) (G2f33@syntax-dispatch G36ff@t '(any . any)))) G36f9@t))) (G2f33@syntax-dispatch G36f9@t '(#(scheme-id quasiquote) any)))) G36f1@t))) (G2f33@syntax-dispatch G36f1@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G36e9@t))) (G2f33@syntax-dispatch G36e9@t '((#(scheme-id unquote) . each-any) . any)))) G36e3@t))) (G2f33@syntax-dispatch G36e3@t '(#(scheme-id unquote) any)))) G36df@p))) (lambda (G36d7@x) ((lambda (G36d9@t) ((lambda (G36db@ls/false) (if G36db@ls/false (apply (lambda (G36dd@e) (G36d6@quasi G36dd@e '0)) G36db@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G36d9@t))) (G2f33@syntax-dispatch G36d9@t '(_ any)))) G36d7@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f23@quasisyntax-macro ((lambda () ((lambda (G37b4@quasi) (begin (set! G37b4@quasi (lambda (G37cc@p G37cd@lev) ((lambda (G37d0@t) ((lambda (G37d2@ls/false) (if G37d2@ls/false (apply (lambda (G37d4@p) (if (= G37cd@lev '0) ((lambda (G37d6@g) (values (list G37d6@g) (list G37d4@p) G37d6@g)) (gensym)) (call-with-values (lambda () (G37b4@quasi G37d4@p (- G37cd@lev '1))) (lambda (G37db@G37d8 G37dc@G37d9 G37dd@G37da) ((lambda (G37e1@p G37e2@rhs* G37e3@lhs*) (values G37e3@lhs* G37e2@rhs* (list 'unsyntax G37e1@p))) G37dd@G37da G37dc@G37d9 G37db@G37d8))))) G37d2@ls/false) ((lambda (G37e7@t) ((lambda (G37e9@ls/false) (if (and G37e9@ls/false (apply (lambda () (= G37cd@lev '0)) G37e9@ls/false)) (apply (lambda () (G301e@syntax-violation '#f '"incorrect use of unsyntax" G37cc@p)) G37e9@ls/false) ((lambda (G37eb@t) ((lambda (G37ed@ls/false) (if G37ed@ls/false (apply (lambda (G37ef@p* G37f0@q) (call-with-values (lambda () (G37b4@quasi G37f0@q G37cd@lev)) (lambda (G37f6@G37f3 G37f7@G37f4 G37f8@G37f5) ((lambda (G37fc@q G37fd@rhs* G37fe@lhs*) (if (= G37cd@lev '0) ((lambda (G3802@g*) (values (append G3802@g* G37fe@lhs*) (append G37ef@p* G37fd@rhs*) (append G3802@g* G37fc@q))) (map (lambda (G3804@x) (gensym)) G37ef@p*)) (call-with-values (lambda () (G37b4@quasi G37ef@p* (- G37cd@lev '1))) (lambda (G3809@G3806 G380a@G3807 G380b@G3808) ((lambda (G380f@p* G3810@rhs2* G3811@lhs2*) (values (append G3811@lhs2* G37fe@lhs*) (append G3810@rhs2* G37fd@rhs*) (cons (cons 'unsyntax G380f@p*) G37fc@q))) G380b@G3808 G380a@G3807 G3809@G3806))))) G37f8@G37f5 G37f7@G37f4 G37f6@G37f3)))) G37ed@ls/false) ((lambda (G3815@t) ((lambda (G3817@ls/false) (if G3817@ls/false (apply (lambda (G3819@p* G381a@q) (call-with-values (lambda () (G37b4@quasi G381a@q G37cd@lev)) (lambda (G3820@G381d G3821@G381e G3822@G381f) ((lambda (G3826@q G3827@rhs* G3828@lhs*) (if (= G37cd@lev '0) ((lambda (G382c@g*) (values (append (map (lambda (G382e@g) (cons G382e@g '(...))) G382c@g*) G3828@lhs*) (append G3819@p* G3827@rhs*) (append (apply append (map (lambda (G3830@g) (cons G3830@g '(...))) G382c@g*)) G3826@q))) (map (lambda (G3832@x) (gensym)) G3819@p*)) (call-with-values (lambda () (G37b4@quasi G3819@p* (- G37cd@lev '1))) (lambda (G3837@G3834 G3838@G3835 G3839@G3836) ((lambda (G383d@p* G383e@rhs2* G383f@lhs2*) (values (append G383f@lhs2* G3828@lhs*) (append G383e@rhs2* G3827@rhs*) (cons (cons 'unsyntax-splicing G383d@p*) G3826@q))) G3839@G3836 G3838@G3835 G3837@G3834))))) G3822@G381f G3821@G381e G3820@G381d)))) G3817@ls/false) ((lambda (G3843@t) ((lambda (G3845@ls/false) (if (and G3845@ls/false (apply (lambda () (= G37cd@lev '0)) G3845@ls/false)) (apply (lambda () (G301e@syntax-violation '#f '"incorrect use of unsyntax-splicing" G37cc@p)) G3845@ls/false) ((lambda (G3847@t) ((lambda (G3849@ls/false) (if G3849@ls/false (apply (lambda (G384b@p) (call-with-values (lambda () (G37b4@quasi G384b@p (+ G37cd@lev '1))) (lambda (G3850@G384d G3851@G384e G3852@G384f) ((lambda (G3856@p G3857@rhs* G3858@lhs*) (values G3858@lhs* G3857@rhs* (list 'quasisyntax G3856@p))) G3852@G384f G3851@G384e G3850@G384d)))) G3849@ls/false) ((lambda (G385c@t) ((lambda (G385e@ls/false) (if G385e@ls/false (apply (lambda (G3860@p G3861@q) (call-with-values (lambda () (G37b4@quasi G3860@p G37cd@lev)) (lambda (G386a@G3864 G386b@G3865 G386c@G3866) (call-with-values (lambda () (G37b4@quasi G3861@q G37cd@lev)) (lambda (G3870@G3867 G3871@G3868 G3872@G3869) ((lambda (G3876@q G3877@rhs2* G3878@lhs2* G3879@p G387a@rhs* G387b@lhs*) (values (append G3878@lhs2* G387b@lhs*) (append G3877@rhs2* G387a@rhs*) (cons G3879@p G3876@q))) G3872@G3869 G3871@G3868 G3870@G3867 G386c@G3866 G386b@G3865 G386a@G3864)))))) G385e@ls/false) ((lambda (G3882@t) ((lambda (G3884@ls/false) (if G3884@ls/false (apply (lambda (G3886@x*) (call-with-values (lambda () (G37b4@quasi G3886@x* G37cd@lev)) (lambda (G388b@G3888 G388c@G3889 G388d@G388a) ((lambda (G3891@x* G3892@rhs* G3893@lhs*) (values G3893@lhs* G3892@rhs* (list->vector G3891@x*))) G388d@G388a G388c@G3889 G388b@G3888)))) G3884@ls/false) ((lambda (G3897@t) ((lambda (G3899@ls/false) (if G3899@ls/false (apply (lambda () (values '() '() G37cc@p)) G3899@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3897@t))) (G2f33@syntax-dispatch G3897@t '_))) G3882@t))) (G2f33@syntax-dispatch G3882@t '#(vector each-any)))) G385c@t))) (G2f33@syntax-dispatch G385c@t '(any . any)))) G3847@t))) (G2f33@syntax-dispatch G3847@t '(#(scheme-id quasisyntax) any)))) G3843@t))) (G2f33@syntax-dispatch G3843@t '#(scheme-id unsyntax-splicing)))) G3815@t))) (G2f33@syntax-dispatch G3815@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G37eb@t))) (G2f33@syntax-dispatch G37eb@t '((#(scheme-id unsyntax) . each-any) . any)))) G37e7@t))) (G2f33@syntax-dispatch G37e7@t '#(scheme-id unsyntax)))) G37d0@t))) (G2f33@syntax-dispatch G37d0@t '(#(scheme-id unsyntax) any)))) G37cc@p))) (lambda (G37b5@x) ((lambda (G37b7@t) ((lambda (G37b9@ls/false) (if G37b9@ls/false (apply (lambda (G37bb@e) (call-with-values (lambda () (G37b4@quasi G37bb@e '0)) (lambda (G37c0@G37bd G37c1@G37be G37c2@G37bf) ((lambda (G37c6@v G37c7@rhs* G37c8@lhs*) (G2ee9@bless (list 'syntax-case (cons 'list G37c7@rhs*) '() (list G37c8@lhs* (list 'syntax G37c6@v))))) G37c2@G37bf G37c1@G37be G37c0@G37bd)))) G37b9@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G37b7@t))) (G2f33@syntax-dispatch G37b7@t '(_ any)))) G37b5@x)))) '#f)))) (set! G2f25@define-struct-macro (lambda (G389b@stx) (G301e@syntax-violation '#f '"define-struct not supported" G389b@stx))) (set! G2f27@define-record-type-macro (lambda (G389d@x) ((lambda (G38a0@id G38a2@get-record-name G38a4@get-record-constructor-name G38a6@get-record-predicate-name G38a8@get-clause G38aa@foo-rtd-code G38ac@parent-rtd-code G38ae@parent-rcd-code G38b0@foo-rcd-code G38b2@get-protocol-code G38b4@get-fields G38b6@get-mutator-indices G38b8@get-mutators G38ba@get-accessors G38bc@enumerate G38be@do-define-record G38c0@verify-clauses) (begin (set! G38a0@id (lambda (G3a93@ctxt . G3a95@str*) (G3022@datum->syntax G3a93@ctxt (string->symbol (apply string-append (map (lambda (G3a97@x) (if (symbol? G3a97@x) (symbol->string G3a97@x) (if (string? G3a97@x) G3a97@x (assertion-violation 'define-record-type '"BUG")))) G3a95@str*)))))) (set! G38a2@get-record-name (lambda (G3a81@spec) ((lambda (G3a83@t) ((lambda (G3a85@ls/false) (if G3a85@ls/false (apply (lambda (G3a87@foo G3a88@make-foo G3a89@foo?) G3a87@foo) G3a85@ls/false) ((lambda (G3a8d@t) ((lambda (G3a8f@ls/false) (if G3a8f@ls/false (apply (lambda (G3a91@foo) G3a91@foo) G3a8f@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3a8d@t))) (G2f33@syntax-dispatch G3a8d@t 'any))) G3a83@t))) (G2f33@syntax-dispatch G3a83@t '(any any any)))) G3a81@spec))) (set! G38a4@get-record-constructor-name (lambda (G3a6d@spec) ((lambda (G3a6f@t) ((lambda (G3a71@ls/false) (if G3a71@ls/false (apply (lambda (G3a73@foo G3a74@make-foo G3a75@foo?) G3a74@make-foo) G3a71@ls/false) ((lambda (G3a79@t) ((lambda (G3a7b@ls/false) (if (and G3a7b@ls/false (apply (lambda (G3a7d@foo) (G2d42@id? G3a7d@foo)) G3a7b@ls/false)) (apply (lambda (G3a7f@foo) (G38a0@id G3a7f@foo '"make-" (G2d58@stx->datum G3a7f@foo))) G3a7b@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3a79@t))) (G2f33@syntax-dispatch G3a79@t 'any))) G3a6f@t))) (G2f33@syntax-dispatch G3a6f@t '(any any any)))) G3a6d@spec))) (set! G38a6@get-record-predicate-name (lambda (G3a59@spec) ((lambda (G3a5b@t) ((lambda (G3a5d@ls/false) (if G3a5d@ls/false (apply (lambda (G3a5f@foo G3a60@make-foo G3a61@foo?) G3a61@foo?) G3a5d@ls/false) ((lambda (G3a65@t) ((lambda (G3a67@ls/false) (if (and G3a67@ls/false (apply (lambda (G3a69@foo) (G2d42@id? G3a69@foo)) G3a67@ls/false)) (apply (lambda (G3a6b@foo) (G38a0@id G3a6b@foo (G2d58@stx->datum G3a6b@foo) '"?")) G3a67@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3a65@t))) (G2f33@syntax-dispatch G3a65@t 'any))) G3a5b@t))) (G2f33@syntax-dispatch G3a5b@t '(any any any)))) G3a59@spec))) (set! G38a8@get-clause (lambda (G3a47@id G3a48@ls) ((lambda (G3a4b@t) ((lambda (G3a4d@ls/false) (if G3a4d@ls/false (apply (lambda () '#f) G3a4d@ls/false) ((lambda (G3a4f@t) ((lambda (G3a51@ls/false) (if G3a51@ls/false (apply (lambda (G3a53@x G3a54@rest G3a55@ls) (if (G2d4a@free-id=? (G2ee9@bless G3a47@id) G3a53@x) (cons G3a53@x G3a54@rest) (G38a8@get-clause G3a47@id G3a55@ls))) G3a51@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3a4f@t))) (G2f33@syntax-dispatch G3a4f@t '((any . any) . any)))) G3a4b@t))) (G2f33@syntax-dispatch G3a4b@t '()))) G3a48@ls))) (set! G38aa@foo-rtd-code (lambda (G39f5@name G39f6@clause* G39f7@parent-rtd-code) ((lambda (G39fc@convert-field-spec*) (begin (set! G39fc@convert-field-spec* (lambda (G3a2d@ls) (list->vector (map (lambda (G3a2f@x) ((lambda (G3a31@t) ((lambda (G3a33@ls/false) (if G3a33@ls/false (apply (lambda (G3a35@name G3a36@rest) (list 'mutable G3a35@name)) G3a33@ls/false) ((lambda (G3a39@t) ((lambda (G3a3b@ls/false) (if G3a3b@ls/false (apply (lambda (G3a3d@name G3a3e@rest) (list 'immutable G3a3d@name)) G3a3b@ls/false) ((lambda (G3a41@t) ((lambda (G3a43@ls/false) (if G3a43@ls/false (apply (lambda (G3a45@name) (list 'immutable G3a45@name)) G3a43@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3a41@t))) (G2f33@syntax-dispatch G3a41@t 'any))) G3a39@t))) (G2f33@syntax-dispatch G3a39@t '(#(scheme-id immutable) any . any)))) G3a31@t))) (G2f33@syntax-dispatch G3a31@t '(#(scheme-id mutable) any . any)))) G3a2f@x)) G3a2d@ls)))) ((lambda (G39fd@uid-code G39fe@sealed? G39ff@opaque? G3a00@fields) (G2ee9@bless (list 'make-record-type-descriptor (list 'quote G39f5@name) G39f7@parent-rtd-code G39fd@uid-code G39fe@sealed? G39ff@opaque? G3a00@fields))) ((lambda (G3a05@t) ((lambda (G3a07@ls/false) (if G3a07@ls/false (apply (lambda () (list 'quote (gensym))) G3a07@ls/false) ((lambda (G3a09@t) ((lambda (G3a0b@ls/false) (if G3a0b@ls/false (apply (lambda (G3a0d@uid) (list 'quote G3a0d@uid)) G3a0b@ls/false) ((lambda (G3a0f@t) ((lambda (G3a11@ls/false) (if G3a11@ls/false (apply (lambda () '#f) G3a11@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3a0f@t))) (G2f33@syntax-dispatch G3a0f@t '_))) G3a09@t))) (G2f33@syntax-dispatch G3a09@t '(_ any)))) G3a05@t))) (G2f33@syntax-dispatch G3a05@t '(_)))) (G38a8@get-clause 'nongenerative G39f6@clause*)) ((lambda (G3a13@t) ((lambda (G3a15@ls/false) (if G3a15@ls/false (apply (lambda () '#t) G3a15@ls/false) ((lambda (G3a17@t) ((lambda (G3a19@ls/false) (if G3a19@ls/false (apply (lambda () '#f) G3a19@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3a17@t))) (G2f33@syntax-dispatch G3a17@t '_))) G3a13@t))) (G2f33@syntax-dispatch G3a13@t '(_ #(atom #t))))) (G38a8@get-clause 'sealed G39f6@clause*)) ((lambda (G3a1b@t) ((lambda (G3a1d@ls/false) (if G3a1d@ls/false (apply (lambda () '#t) G3a1d@ls/false) ((lambda (G3a1f@t) ((lambda (G3a21@ls/false) (if G3a21@ls/false (apply (lambda () '#f) G3a21@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3a1f@t))) (G2f33@syntax-dispatch G3a1f@t '_))) G3a1b@t))) (G2f33@syntax-dispatch G3a1b@t '(_ #(atom #t))))) (G38a8@get-clause 'opaque G39f6@clause*)) ((lambda (G3a23@t) ((lambda (G3a25@ls/false) (if G3a25@ls/false (apply (lambda (G3a27@field-spec*) (list 'quote (G39fc@convert-field-spec* G3a27@field-spec*))) G3a25@ls/false) ((lambda (G3a29@t) ((lambda (G3a2b@ls/false) (if G3a2b@ls/false (apply (lambda () ''#()) G3a2b@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3a29@t))) (G2f33@syntax-dispatch G3a29@t '_))) G3a23@t))) (G2f33@syntax-dispatch G3a23@t '(_ . each-any)))) (G38a8@get-clause 'fields G39f6@clause*))))) '#f))) (set! G38ac@parent-rtd-code (lambda (G39dd@clause*) ((lambda (G39df@t) ((lambda (G39e1@ls/false) (if G39e1@ls/false (apply (lambda (G39e3@name) (list 'record-type-descriptor G39e3@name)) G39e1@ls/false) ((lambda (G39e5@t) ((lambda (G39e7@ls/false) (if G39e7@ls/false (apply (lambda () ((lambda (G39e9@t) ((lambda (G39eb@ls/false) (if G39eb@ls/false (apply (lambda (G39ed@rtd G39ee@rcd) G39ed@rtd) G39eb@ls/false) ((lambda (G39f1@t) ((lambda (G39f3@ls/false) (if G39f3@ls/false (apply (lambda () '#f) G39f3@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G39f1@t))) (G2f33@syntax-dispatch G39f1@t '#(atom #f)))) G39e9@t))) (G2f33@syntax-dispatch G39e9@t '(_ any any)))) (G38a8@get-clause 'parent-rtd G39dd@clause*))) G39e7@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G39e5@t))) (G2f33@syntax-dispatch G39e5@t '#(atom #f)))) G39df@t))) (G2f33@syntax-dispatch G39df@t '(_ any)))) (G38a8@get-clause 'parent G39dd@clause*)))) (set! G38ae@parent-rcd-code (lambda (G39c5@clause*) ((lambda (G39c7@t) ((lambda (G39c9@ls/false) (if G39c9@ls/false (apply (lambda (G39cb@name) (list 'record-constructor-descriptor G39cb@name)) G39c9@ls/false) ((lambda (G39cd@t) ((lambda (G39cf@ls/false) (if G39cf@ls/false (apply (lambda () ((lambda (G39d1@t) ((lambda (G39d3@ls/false) (if G39d3@ls/false (apply (lambda (G39d5@rtd G39d6@rcd) G39d6@rcd) G39d3@ls/false) ((lambda (G39d9@t) ((lambda (G39db@ls/false) (if G39db@ls/false (apply (lambda () '#f) G39db@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G39d9@t))) (G2f33@syntax-dispatch G39d9@t '#(atom #f)))) G39d1@t))) (G2f33@syntax-dispatch G39d1@t '(_ any any)))) (G38a8@get-clause 'parent-rtd G39c5@clause*))) G39cf@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G39cd@t))) (G2f33@syntax-dispatch G39cd@t '#(atom #f)))) G39c7@t))) (G2f33@syntax-dispatch G39c7@t '(_ any)))) (G38a8@get-clause 'parent G39c5@clause*)))) (set! G38b0@foo-rcd-code (lambda (G39bd@clause* G39be@foo-rtd G39bf@protocol G39c0@parent-rcd-code) (list 'make-record-constructor-descriptor G39be@foo-rtd G39c0@parent-rcd-code G39bf@protocol))) (set! G38b2@get-protocol-code (lambda (G39b1@clause*) ((lambda (G39b3@t) ((lambda (G39b5@ls/false) (if G39b5@ls/false (apply (lambda (G39b7@expr) G39b7@expr) G39b5@ls/false) ((lambda (G39b9@t) ((lambda (G39bb@ls/false) (if G39bb@ls/false (apply (lambda () '#f) G39bb@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G39b9@t))) (G2f33@syntax-dispatch G39b9@t '_))) G39b3@t))) (G2f33@syntax-dispatch G39b3@t '(_ any)))) (G38a8@get-clause 'protocol G39b1@clause*)))) (set! G38b4@get-fields (lambda (G399f@clause*) ((lambda (G39a1@t) ((lambda (G39a3@ls/false) (if G39a3@ls/false (apply (lambda () '()) G39a3@ls/false) ((lambda (G39a5@t) ((lambda (G39a7@ls/false) (if G39a7@ls/false (apply (lambda (G39a9@f*) G39a9@f*) G39a7@ls/false) ((lambda (G39ab@t) ((lambda (G39ad@ls/false) (if G39ad@ls/false (apply (lambda (G39af@rest) (G38b4@get-fields G39af@rest)) G39ad@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G39ab@t))) (G2f33@syntax-dispatch G39ab@t '(_ . any)))) G39a5@t))) (G2f33@syntax-dispatch G39a5@t '((#(scheme-id fields) . each-any) . _)))) G39a1@t))) (G2f33@syntax-dispatch G39a1@t '()))) G399f@clause*))) (set! G38b6@get-mutator-indices (lambda (G3987@fields) ((letrec ((G3989@f (lambda (G398b@fields G398c@i) ((lambda (G398f@t) ((lambda (G3991@ls/false) (if G3991@ls/false (apply (lambda () '()) G3991@ls/false) ((lambda (G3993@t) ((lambda (G3995@ls/false) (if G3995@ls/false (apply (lambda (G3997@rest) (cons G398c@i (G3989@f G3997@rest (+ G398c@i '1)))) G3995@ls/false) ((lambda (G3999@t) ((lambda (G399b@ls/false) (if G399b@ls/false (apply (lambda (G399d@rest) (G3989@f G399d@rest (+ G398c@i '1))) G399b@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3999@t))) (G2f33@syntax-dispatch G3999@t '(_ . any)))) G3993@t))) (G2f33@syntax-dispatch G3993@t '((#(scheme-id mutable) . _) . any)))) G398f@t))) (G2f33@syntax-dispatch G398f@t '()))) G398b@fields)))) G3989@f) G3987@fields '0))) (set! G38b8@get-mutators (lambda (G395d@foo G395e@fields) ((lambda (G3962@gen-name) (begin (set! G3962@gen-name (lambda (G3985@x) (G3022@datum->syntax G395d@foo (string->symbol (string-append (symbol->string (G3024@syntax->datum G395d@foo)) '"-" (symbol->string (G3024@syntax->datum G3985@x)) '"-set!"))))) ((letrec ((G3963@f (lambda (G3965@fields) ((lambda (G3967@t) ((lambda (G3969@ls/false) (if G3969@ls/false (apply (lambda () '()) G3969@ls/false) ((lambda (G396b@t) ((lambda (G396d@ls/false) (if G396d@ls/false (apply (lambda (G396f@name G3970@accessor G3971@mutator G3972@rest) (cons G3971@mutator (G3963@f G3972@rest))) G396d@ls/false) ((lambda (G3977@t) ((lambda (G3979@ls/false) (if G3979@ls/false (apply (lambda (G397b@name G397c@rest) (cons (G3962@gen-name G397b@name) (G3963@f G397c@rest))) G3979@ls/false) ((lambda (G397f@t) ((lambda (G3981@ls/false) (if G3981@ls/false (apply (lambda (G3983@rest) (G3963@f G3983@rest)) G3981@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G397f@t))) (G2f33@syntax-dispatch G397f@t '(_ . any)))) G3977@t))) (G2f33@syntax-dispatch G3977@t '((#(scheme-id mutable) any) . any)))) G396b@t))) (G2f33@syntax-dispatch G396b@t '((#(scheme-id mutable) any any any) . any)))) G3967@t))) (G2f33@syntax-dispatch G3967@t '()))) G3965@fields)))) G3963@f) G395e@fields))) '#f))) (set! G38ba@get-accessors (lambda (G3919@foo G391a@fields) ((lambda (G391e@gen-name) (begin (set! G391e@gen-name (lambda (G395b@x) (G3022@datum->syntax G3919@foo (string->symbol (string-append (symbol->string (G3024@syntax->datum G3919@foo)) '"-" (symbol->string (G3024@syntax->datum G395b@x))))))) (map (lambda (G391f@field) ((lambda (G3921@t) ((lambda (G3923@ls/false) (if (and G3923@ls/false (apply (lambda (G3925@name G3926@accessor G3927@mutator) (G2d42@id? G3926@accessor)) G3923@ls/false)) (apply (lambda (G392b@name G392c@accessor G392d@mutator) G392c@accessor) G3923@ls/false) ((lambda (G3931@t) ((lambda (G3933@ls/false) (if (and G3933@ls/false (apply (lambda (G3935@name G3936@accessor) (G2d42@id? G3936@accessor)) G3933@ls/false)) (apply (lambda (G3939@name G393a@accessor) G393a@accessor) G3933@ls/false) ((lambda (G393d@t) ((lambda (G393f@ls/false) (if (and G393f@ls/false (apply (lambda (G3941@name) (G2d42@id? G3941@name)) G393f@ls/false)) (apply (lambda (G3943@name) (G391e@gen-name G3943@name)) G393f@ls/false) ((lambda (G3945@t) ((lambda (G3947@ls/false) (if (and G3947@ls/false (apply (lambda (G3949@name) (G2d42@id? G3949@name)) G3947@ls/false)) (apply (lambda (G394b@name) (G391e@gen-name G394b@name)) G3947@ls/false) ((lambda (G394d@t) ((lambda (G394f@ls/false) (if (and G394f@ls/false (apply (lambda (G3951@name) (G2d42@id? G3951@name)) G394f@ls/false)) (apply (lambda (G3953@name) (G391e@gen-name G3953@name)) G394f@ls/false) ((lambda (G3955@t) ((lambda (G3957@ls/false) (if G3957@ls/false (apply (lambda (G3959@others) (G301e@syntax-violation '#f '"invalid field spec" G391f@field)) G3957@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3955@t))) (G2f33@syntax-dispatch G3955@t 'any))) G394d@t))) (G2f33@syntax-dispatch G394d@t 'any))) G3945@t))) (G2f33@syntax-dispatch G3945@t '(#(scheme-id immutable) any)))) G393d@t))) (G2f33@syntax-dispatch G393d@t '(#(scheme-id mutable) any)))) G3931@t))) (G2f33@syntax-dispatch G3931@t '(#(scheme-id immutable) any any)))) G3921@t))) (G2f33@syntax-dispatch G3921@t '(#(scheme-id mutable) any any any)))) G391f@field)) G391a@fields))) '#f))) (set! G38bc@enumerate (lambda (G3911@ls) ((letrec ((G3913@f (lambda (G3915@ls G3916@i) (if (null? G3915@ls) '() (cons G3916@i (G3913@f (cdr G3915@ls) (+ G3916@i '1))))))) G3913@f) G3911@ls '0))) (set! G38be@do-define-record (lambda (G38e9@namespec G38ea@clause*) ((lambda (G38ed@foo) ((lambda (G38ef@foo-rtd) ((lambda (G38f1@foo-rcd) ((lambda (G38f3@protocol) ((lambda (G38f5@make-foo) ((lambda (G38f7@fields) ((lambda (G38f9@idx*) ((lambda (G38fb@foo-x*) ((lambda (G38fd@set-foo-x!*) ((lambda (G38ff@set-foo-idx*) ((lambda (G3901@foo?) ((lambda (G3903@foo-rtd-code) ((lambda (G3905@foo-rcd-code) ((lambda (G3907@protocol-code) ((lambda () (G2ee9@bless (cons 'begin (cons (list 'define G38ef@foo-rtd G3903@foo-rtd-code) (cons (list 'define G38f3@protocol G3907@protocol-code) (cons (list 'define G38f1@foo-rcd G3905@foo-rcd-code) (cons (list 'define-syntax G38ed@foo (list 'list ''$rtd (list 'syntax G38ef@foo-rtd) (list 'syntax G38f1@foo-rcd))) (cons (list 'define G3901@foo? (list 'record-predicate G38ef@foo-rtd)) (cons (list 'define G38f5@make-foo (list 'record-constructor G38f1@foo-rcd)) (append (map (lambda (G3909@foo-x G390a@idx) (list 'define G3909@foo-x (list 'record-accessor G38ef@foo-rtd G390a@idx))) G38fb@foo-x* G38f9@idx*) (map (lambda (G390d@set-foo-x! G390e@idx) (list 'define G390d@set-foo-x! (list 'record-mutator G38ef@foo-rtd G390e@idx))) G38fd@set-foo-x!* G38ff@set-foo-idx*))))))))))))) (G38b2@get-protocol-code G38ea@clause*))) (G38b0@foo-rcd-code G38ea@clause* G38ef@foo-rtd G38f3@protocol (G38ae@parent-rcd-code G38ea@clause*)))) (G38aa@foo-rtd-code G38ed@foo G38ea@clause* (G38ac@parent-rtd-code G38ea@clause*)))) (G38a6@get-record-predicate-name G38e9@namespec))) (G38b6@get-mutator-indices G38f7@fields))) (G38b8@get-mutators G38ed@foo G38f7@fields))) (G38ba@get-accessors G38ed@foo G38f7@fields))) (G38bc@enumerate G38f7@fields))) (G38b4@get-fields G38ea@clause*))) (G38a4@get-record-constructor-name G38e9@namespec))) (gensym))) (gensym))) (gensym))) (G38a2@get-record-name G38e9@namespec)))) (set! G38c0@verify-clauses (lambda (G38c9@x G38ca@cls*) ((lambda (G38ce@valid-kwds G38d0@free-id-member?) (begin (set! G38ce@valid-kwds (map G2ee9@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G38d0@free-id-member? (lambda (G38e5@x G38e6@ls) (and (pair? G38e6@ls) (or (G2d4a@free-id=? G38e5@x (car G38e6@ls)) (G38d0@free-id-member? G38e5@x (cdr G38e6@ls)))))) ((letrec ((G38d1@f (lambda (G38d3@cls* G38d4@seen*) (if (not (null? G38d3@cls*)) ((lambda (G38d7@t) ((lambda (G38d9@ls/false) (if G38d9@ls/false (apply (lambda (G38db@kwd G38dc@rest) (if (or (not (G2d42@id? G38db@kwd)) (not (G38d0@free-id-member? G38db@kwd G38ce@valid-kwds))) (G301e@syntax-violation '#f '"not a valid define-record-type keyword" G38db@kwd) (if (G2d50@bound-id-member? G38db@kwd G38d4@seen*) (G301e@syntax-violation '#f '"duplicate use of keyword " G38c9@x G38db@kwd) (G38d1@f (cdr G38d3@cls*) (cons G38db@kwd G38d4@seen*))))) G38d9@ls/false) ((lambda (G38df@t) ((lambda (G38e1@ls/false) (if G38e1@ls/false (apply (lambda (G38e3@cls) (G301e@syntax-violation '#f '"malformed define-record-type clause" G38e3@cls)) G38e1@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G38df@t))) (G2f33@syntax-dispatch G38df@t 'any))) G38d7@t))) (G2f33@syntax-dispatch G38d7@t '(any . any)))) (car G38d3@cls*)) (void))))) G38d1@f) G38ca@cls* '()))) '#f '#f))) ((lambda (G38c1@t) ((lambda (G38c3@ls/false) (if G38c3@ls/false (apply (lambda (G38c5@namespec G38c6@clause*) (begin (G38c0@verify-clauses G389d@x G38c6@clause*) (G38be@do-define-record G38c5@namespec G38c6@clause*))) G38c3@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G38c1@t))) (G2f33@syntax-dispatch G38c1@t '(_ any . each-any)))) G389d@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f29@define-condition-type-macro (lambda (G3a99@x) ((lambda (G3a9c@mkname) (begin (set! G3a9c@mkname (lambda (G3ac9@name G3aca@suffix) (G3022@datum->syntax G3ac9@name (string->symbol (string-append (symbol->string (G3024@syntax->datum G3ac9@name)) G3aca@suffix))))) ((lambda (G3a9d@t) ((lambda (G3a9f@ls/false) (if (and G3a9f@ls/false (apply (lambda (G3aa1@ctxt G3aa2@name G3aa3@super G3aa4@constructor G3aa5@predicate G3aa6@field* G3aa7@accessor*) (and (G2d42@id? G3aa2@name) (G2d42@id? G3aa3@super) (G2d42@id? G3aa4@constructor) (G2d42@id? G3aa5@predicate) (for-all G2d42@id? G3aa6@field*) (for-all G2d42@id? G3aa7@accessor*))) G3a9f@ls/false)) (apply (lambda (G3aaf@ctxt G3ab0@name G3ab1@super G3ab2@constructor G3ab3@predicate G3ab4@field* G3ab5@accessor*) ((lambda (G3abd@aux-accessor*) (G2ee9@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3ab0@name G3ab2@constructor (gensym)) (cons (list 'parent G3ab1@super) (cons (cons 'fields (map (lambda (G3abf@field G3ac0@aux) (list 'immutable G3abf@field G3ac0@aux)) G3ab4@field* G3abd@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3ab3@predicate (list 'condition-predicate (list 'record-type-descriptor G3ab0@name))) (map (lambda (G3ac3@accessor G3ac4@aux) (list 'define G3ac3@accessor (list 'condition-accessor (list 'record-type-descriptor G3ab0@name) G3ac4@aux))) G3ab5@accessor* G3abd@aux-accessor*)))))) (map (lambda (G3ac7@x) (gensym)) G3ab5@accessor*))) G3a9f@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3a9d@t))) (G2f33@syntax-dispatch G3a9d@t '(any any any any any . #(each (any any)))))) G3a99@x))) '#f))) (set! G2f2b@incorrect-usage-macro (lambda (G3acd@e) (G301e@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3acd@e))) (set! G2f2d@parameterize-macro (lambda (G3acf@e) ((lambda (G3ad1@t) ((lambda (G3ad3@ls/false) (if G3ad3@ls/false (apply (lambda (G3ad5@b G3ad6@b*) (G2ee9@bless (cons 'let (cons '() (cons G3ad5@b G3ad6@b*))))) G3ad3@ls/false) ((lambda (G3ad9@t) ((lambda (G3adb@ls/false) (if G3adb@ls/false (apply (lambda (G3add@olhs* G3ade@orhs* G3adf@b G3ae0@b*) ((lambda (G3ae5@lhs* G3ae6@rhs*) (G2ee9@bless (cons (list 'lambda (append G3ae5@lhs* G3ae6@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3ae9@lhs G3aea@rhs) (list 'let (list (list 't (list G3ae9@lhs))) (list G3ae9@lhs G3aea@rhs) (cons 'set! (cons G3aea@rhs '(t))))) G3ae5@lhs* G3ae6@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3adf@b G3ae0@b*))) '(swap)))))) (append G3add@olhs* G3ade@orhs*)))) (G300c@generate-temporaries G3add@olhs*) (G300c@generate-temporaries G3ade@orhs*))) G3adb@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3ad9@t))) (G2f33@syntax-dispatch G3ad9@t '(_ #(each (any any)) any . each-any)))) G3ad1@t))) (G2f33@syntax-dispatch G3ad1@t '(_ () any . each-any)))) G3acf@e))) (set! G2f2f@foreign-call-transformer (lambda (G3aed@e G3aee@r G3aef@mr) ((lambda (G3af3@t) ((lambda (G3af5@ls/false) (if G3af5@ls/false (apply (lambda (G3af7@name G3af8@arg*) (cons 'foreign-call (cons (G2f57@chi-expr G3af7@name G3aee@r G3aef@mr) (G2f53@chi-expr* G3af8@arg* G3aee@r G3aef@mr)))) G3af5@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3af3@t))) (G2f33@syntax-dispatch G3af3@t '(_ any . each-any)))) G3aed@e))) (set! G2f31@convert-pattern (lambda (G3afb@pattern G3afc@keys) ((lambda (G3b00@cvt* G3b02@cvt) (begin (set! G3b00@cvt* (lambda (G3b91@p* G3b92@n G3b93@ids) (if (null? G3b91@p*) (values '() G3b93@ids) (call-with-values (lambda () (G3b00@cvt* (cdr G3b91@p*) G3b92@n G3b93@ids)) (lambda (G3b99@G3b97 G3b9a@G3b98) ((lambda (G3b9d@ids G3b9e@y) (call-with-values (lambda () (G3b02@cvt (car G3b91@p*) G3b92@n G3b9d@ids)) (lambda (G3ba3@G3ba1 G3ba4@G3ba2) ((lambda (G3ba7@ids G3ba8@x) (values (cons G3ba8@x G3b9e@y) G3ba7@ids)) G3ba4@G3ba2 G3ba3@G3ba1)))) G3b9a@G3b98 G3b99@G3b97)))))) (set! G3b02@cvt (lambda (G3b03@p G3b04@n G3b05@ids) ((lambda (G3b09@t) ((lambda (G3b0b@ls/false) (if (and G3b0b@ls/false (apply (lambda (G3b0d@id) (G2d42@id? G3b0d@id)) G3b0b@ls/false)) (apply (lambda (G3b0f@id) (if (G2d50@bound-id-member? G3b03@p G3afc@keys) (values (vector 'free-id G3b03@p) G3b05@ids) (if (G2d4a@free-id=? G3b03@p (G2ebd@scheme-stx '_)) (values '_ G3b05@ids) (values 'any (cons (cons G3b03@p G3b04@n) G3b05@ids))))) G3b0b@ls/false) ((lambda (G3b11@t) ((lambda (G3b13@ls/false) (if (and G3b13@ls/false (apply (lambda (G3b15@p G3b16@dots) (G2f35@ellipsis? G3b16@dots)) G3b13@ls/false)) (apply (lambda (G3b19@p G3b1a@dots) (call-with-values (lambda () (G3b02@cvt G3b19@p (+ G3b04@n '1) G3b05@ids)) (lambda (G3b1f@G3b1d G3b20@G3b1e) ((lambda (G3b23@ids G3b24@p) (values (if (eq? G3b24@p 'any) 'each-any (vector 'each G3b24@p)) G3b23@ids)) G3b20@G3b1e G3b1f@G3b1d)))) G3b13@ls/false) ((lambda (G3b27@t) ((lambda (G3b29@ls/false) (if (and G3b29@ls/false (apply (lambda (G3b2b@x G3b2c@dots G3b2d@ys G3b2e@z) (G2f35@ellipsis? G3b2c@dots)) G3b29@ls/false)) (apply (lambda (G3b33@x G3b34@dots G3b35@ys G3b36@z) (call-with-values (lambda () (G3b02@cvt G3b36@z G3b04@n G3b05@ids)) (lambda (G3b3d@G3b3b G3b3e@G3b3c) ((lambda (G3b41@ids G3b42@z) (call-with-values (lambda () (G3b00@cvt* G3b35@ys G3b04@n G3b41@ids)) (lambda (G3b47@G3b45 G3b48@G3b46) ((lambda (G3b4b@ids G3b4c@ys) (call-with-values (lambda () (G3b02@cvt G3b33@x (+ G3b04@n '1) G3b4b@ids)) (lambda (G3b51@G3b4f G3b52@G3b50) ((lambda (G3b55@ids G3b56@x) (values (vector 'each+ G3b56@x (reverse G3b4c@ys) G3b42@z) G3b55@ids)) G3b52@G3b50 G3b51@G3b4f)))) G3b48@G3b46 G3b47@G3b45)))) G3b3e@G3b3c G3b3d@G3b3b)))) G3b29@ls/false) ((lambda (G3b59@t) ((lambda (G3b5b@ls/false) (if G3b5b@ls/false (apply (lambda (G3b5d@x G3b5e@y) (call-with-values (lambda () (G3b02@cvt G3b5e@y G3b04@n G3b05@ids)) (lambda (G3b63@G3b61 G3b64@G3b62) ((lambda (G3b67@ids G3b68@y) (call-with-values (lambda () (G3b02@cvt G3b5d@x G3b04@n G3b67@ids)) (lambda (G3b6d@G3b6b G3b6e@G3b6c) ((lambda (G3b71@ids G3b72@x) (values (cons G3b72@x G3b68@y) G3b71@ids)) G3b6e@G3b6c G3b6d@G3b6b)))) G3b64@G3b62 G3b63@G3b61)))) G3b5b@ls/false) ((lambda (G3b75@t) ((lambda (G3b77@ls/false) (if G3b77@ls/false (apply (lambda () (values '() G3b05@ids)) G3b77@ls/false) ((lambda (G3b79@t) ((lambda (G3b7b@ls/false) (if (and G3b7b@ls/false (apply (lambda (G3b7d@p) (not (G2d0a@stx? G3b7d@p))) G3b7b@ls/false)) (apply (lambda (G3b7f@p) (call-with-values (lambda () (G3b02@cvt G3b7f@p G3b04@n G3b05@ids)) (lambda (G3b83@G3b81 G3b84@G3b82) ((lambda (G3b87@ids G3b88@p) (values (vector 'vector G3b88@p) G3b87@ids)) G3b84@G3b82 G3b83@G3b81)))) G3b7b@ls/false) ((lambda (G3b8b@t) ((lambda (G3b8d@ls/false) (if G3b8d@ls/false (apply (lambda (G3b8f@datum) (values (vector 'atom (G2d58@stx->datum G3b8f@datum)) G3b05@ids)) G3b8d@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3b8b@t))) (G2f33@syntax-dispatch G3b8b@t 'any))) G3b79@t))) (G2f33@syntax-dispatch G3b79@t '#(vector each-any)))) G3b75@t))) (G2f33@syntax-dispatch G3b75@t '()))) G3b59@t))) (G2f33@syntax-dispatch G3b59@t '(any . any)))) G3b27@t))) (G2f33@syntax-dispatch G3b27@t '(any any . #(each+ any () any))))) G3b11@t))) (G2f33@syntax-dispatch G3b11@t '(any any)))) G3b09@t))) (G2f33@syntax-dispatch G3b09@t 'any))) G3b03@p))) (G3b02@cvt G3afb@pattern '0 '()))) '#f '#f))) (set! G2f33@syntax-dispatch ((lambda () ((lambda (G3bac@stx^ G3bae@match-each G3bb0@match-each+ G3bb2@match-each-any G3bb4@match-empty G3bb6@combine G3bb8@match* G3bba@match) (begin (set! G3bac@stx^ (lambda (G3c75@e G3c76@m* G3c77@s* G3c78@ae*) (if (and (null? G3c76@m*) (null? G3c77@s*) (null? G3c78@ae*)) G3c75@e (G2d2a@mkstx G3c75@e G3c76@m* G3c77@s* G3c78@ae*)))) (set! G3bae@match-each (lambda (G3c58@e G3c59@p G3c5a@m* G3c5b@s* G3c5c@ae*) (if (pair? G3c58@e) ((lambda (G3c62@first) (and G3c62@first ((lambda (G3c64@rest) (and G3c64@rest (cons G3c62@first G3c64@rest))) (G3bae@match-each (cdr G3c58@e) G3c59@p G3c5a@m* G3c5b@s* G3c5c@ae*)))) (G3bba@match (car G3c58@e) G3c59@p G3c5a@m* G3c5b@s* G3c5c@ae* '())) (if (null? G3c58@e) '() (if (G2d0a@stx? G3c58@e) (and (not (G2cc0@top-marked? G3c5a@m*)) (call-with-values (lambda () (G2d28@join-wraps G3c5a@m* G3c5b@s* G3c5c@ae* G3c58@e)) (lambda (G3c69@G3c66 G3c6a@G3c67 G3c6b@G3c68) ((lambda (G3c6f@ae* G3c70@s* G3c71@m*) (G3bae@match-each (G2d0e@stx-expr G3c58@e) G3c59@p G3c71@m* G3c70@s* G3c6f@ae*)) G3c6b@G3c68 G3c6a@G3c67 G3c69@G3c66)))) (if (G28eb@G280e@annotation? G3c58@e) (G3bae@match-each (G28ed@G2812@annotation-expression G3c58@e) G3c59@p G3c5a@m* G3c5b@s* G3c5c@ae*) '#f)))))) (set! G3bb0@match-each+ (lambda (G3c1e@e G3c1f@x-pat G3c20@y-pat G3c21@z-pat G3c22@m* G3c23@s* G3c24@ae* G3c25@r) ((letrec ((G3c2e@f (lambda (G3c30@e G3c31@m* G3c32@s* G3c33@ae*) (if (pair? G3c30@e) (call-with-values (lambda () (G3c2e@f (cdr G3c30@e) G3c31@m* G3c32@s* G3c33@ae*)) (lambda (G3c3b@G3c38 G3c3c@G3c39 G3c3d@G3c3a) ((lambda (G3c41@r G3c42@y-pat G3c43@xr*) (if G3c41@r (if (null? G3c42@y-pat) ((lambda (G3c47@xr) (if G3c47@xr (values (cons G3c47@xr G3c43@xr*) G3c42@y-pat G3c41@r) (values '#f '#f '#f))) (G3bba@match (car G3c30@e) G3c1f@x-pat G3c31@m* G3c32@s* G3c33@ae* '())) (values '() (cdr G3c42@y-pat) (G3bba@match (car G3c30@e) (car G3c42@y-pat) G3c31@m* G3c32@s* G3c33@ae* G3c41@r))) (values '#f '#f '#f))) G3c3d@G3c3a G3c3c@G3c39 G3c3b@G3c38))) (if (G2d0a@stx? G3c30@e) (if (G2cc0@top-marked? G3c31@m*) (values '() G3c20@y-pat (G3bba@match G3c30@e G3c21@z-pat G3c31@m* G3c32@s* G3c33@ae* G3c25@r)) (call-with-values (lambda () (G2d28@join-wraps G3c31@m* G3c32@s* G3c33@ae* G3c30@e)) (lambda (G3c4c@G3c49 G3c4d@G3c4a G3c4e@G3c4b) ((lambda (G3c52@ae* G3c53@s* G3c54@m*) (G3c2e@f (G2d0e@stx-expr G3c30@e) G3c54@m* G3c53@s* G3c52@ae*)) G3c4e@G3c4b G3c4d@G3c4a G3c4c@G3c49)))) (if (G28eb@G280e@annotation? G3c30@e) (G3c2e@f (G28ed@G2812@annotation-expression G3c30@e) G3c31@m* G3c32@s* G3c33@ae*) (values '() G3c20@y-pat (G3bba@match G3c30@e G3c21@z-pat G3c31@m* G3c32@s* G3c33@ae* G3c25@r)))))))) G3c2e@f) G3c1e@e G3c22@m* G3c23@s* G3c24@ae*))) (set! G3bb2@match-each-any (lambda (G3c05@e G3c06@m* G3c07@s* G3c08@ae*) (if (pair? G3c05@e) ((lambda (G3c0d@l) (and G3c0d@l (cons (G3bac@stx^ (car G3c05@e) G3c06@m* G3c07@s* G3c08@ae*) G3c0d@l))) (G3bb2@match-each-any (cdr G3c05@e) G3c06@m* G3c07@s* G3c08@ae*)) (if (null? G3c05@e) '() (if (G2d0a@stx? G3c05@e) (and (not (G2cc0@top-marked? G3c06@m*)) (call-with-values (lambda () (G2d28@join-wraps G3c06@m* G3c07@s* G3c08@ae* G3c05@e)) (lambda (G3c12@G3c0f G3c13@G3c10 G3c14@G3c11) ((lambda (G3c18@ae* G3c19@s* G3c1a@m*) (G3bb2@match-each-any (G2d0e@stx-expr G3c05@e) G3c1a@m* G3c19@s* G3c18@ae*)) G3c14@G3c11 G3c13@G3c10 G3c12@G3c0f)))) (if (G28eb@G280e@annotation? G3c05@e) (G3bb2@match-each-any (G28ed@G2812@annotation-expression G3c05@e) G3c06@m* G3c07@s* G3c08@ae*) '#f)))))) (set! G3bb4@match-empty (lambda (G3bff@p G3c00@r) (if (null? G3bff@p) G3c00@r (if (eq? G3bff@p '_) G3c00@r (if (eq? G3bff@p 'any) (cons '() G3c00@r) (if (pair? G3bff@p) (G3bb4@match-empty (car G3bff@p) (G3bb4@match-empty (cdr G3bff@p) G3c00@r)) (if (eq? G3bff@p 'each-any) (cons '() G3c00@r) ((lambda (G3c03@t) (if (memv G3c03@t '(each)) (G3bb4@match-empty (vector-ref G3bff@p '1) G3c00@r) (if (memv G3c03@t '(each+)) (G3bb4@match-empty (vector-ref G3bff@p '1) (G3bb4@match-empty (reverse (vector-ref G3bff@p '2)) (G3bb4@match-empty (vector-ref G3bff@p '3) G3c00@r))) (if (memv G3c03@t '(free-id atom)) G3c00@r (if (memv G3c03@t '(scheme-id atom)) G3c00@r (if (memv G3c03@t '(vector)) (G3bb4@match-empty (vector-ref G3bff@p '1) G3c00@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3bff@p))))))) (vector-ref G3bff@p '0))))))))) (set! G3bb6@combine (lambda (G3bfb@r* G3bfc@r) (if (null? (car G3bfb@r*)) G3bfc@r (cons (map car G3bfb@r*) (G3bb6@combine (map cdr G3bfb@r*) G3bfc@r))))) (set! G3bb8@match* (lambda (G3bda@e G3bdb@p G3bdc@m* G3bdd@s* G3bde@ae* G3bdf@r) (if (null? G3bdb@p) (and (null? G3bda@e) G3bdf@r) (if (pair? G3bdb@p) (and (pair? G3bda@e) (G3bba@match (car G3bda@e) (car G3bdb@p) G3bdc@m* G3bdd@s* G3bde@ae* (G3bba@match (cdr G3bda@e) (cdr G3bdb@p) G3bdc@m* G3bdd@s* G3bde@ae* G3bdf@r))) (if (eq? G3bdb@p 'each-any) ((lambda (G3be6@l) (and G3be6@l (cons G3be6@l G3bdf@r))) (G3bb2@match-each-any G3bda@e G3bdc@m* G3bdd@s* G3bde@ae*)) ((lambda (G3be8@t) (if (memv G3be8@t '(each)) (if (null? G3bda@e) (G3bb4@match-empty (vector-ref G3bdb@p '1) G3bdf@r) ((lambda (G3bea@r*) (and G3bea@r* (G3bb6@combine G3bea@r* G3bdf@r))) (G3bae@match-each G3bda@e (vector-ref G3bdb@p '1) G3bdc@m* G3bdd@s* G3bde@ae*))) (if (memv G3be8@t '(free-id)) (and (symbol? G3bda@e) (G2cc0@top-marked? G3bdc@m*) (G2d4a@free-id=? (G3bac@stx^ G3bda@e G3bdc@m* G3bdd@s* G3bde@ae*) (vector-ref G3bdb@p '1)) G3bdf@r) (if (memv G3be8@t '(scheme-id)) (and (symbol? G3bda@e) (G2cc0@top-marked? G3bdc@m*) (G2d4a@free-id=? (G3bac@stx^ G3bda@e G3bdc@m* G3bdd@s* G3bde@ae*) (G2ebd@scheme-stx (vector-ref G3bdb@p '1))) G3bdf@r) (if (memv G3be8@t '(each+)) (call-with-values (lambda () (G3bb0@match-each+ G3bda@e (vector-ref G3bdb@p '1) (vector-ref G3bdb@p '2) (vector-ref G3bdb@p '3) G3bdc@m* G3bdd@s* G3bde@ae* G3bdf@r)) (lambda (G3bef@G3bec G3bf0@G3bed G3bf1@G3bee) ((lambda (G3bf5@r G3bf6@y-pat G3bf7@xr*) (and G3bf5@r (null? G3bf6@y-pat) (if (null? G3bf7@xr*) (G3bb4@match-empty (vector-ref G3bdb@p '1) G3bf5@r) (G3bb6@combine G3bf7@xr* G3bf5@r)))) G3bf1@G3bee G3bf0@G3bed G3bef@G3bec))) (if (memv G3be8@t '(atom)) (and (fast-equal? (vector-ref G3bdb@p '1) (G2d56@strip G3bda@e G3bdc@m*)) G3bdf@r) (if (memv G3be8@t '(vector)) (and (vector? G3bda@e) (G3bba@match (vector->list G3bda@e) (vector-ref G3bdb@p '1) G3bdc@m* G3bdd@s* G3bde@ae* G3bdf@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3bdb@p)))))))) (vector-ref G3bdb@p '0))))))) (set! G3bba@match (lambda (G3bbf@e G3bc0@p G3bc1@m* G3bc2@s* G3bc3@ae* G3bc4@r) (if (not G3bc4@r) '#f (if (eq? G3bc0@p '_) G3bc4@r (if (eq? G3bc0@p 'any) (cons (G3bac@stx^ G3bbf@e G3bc1@m* G3bc2@s* G3bc3@ae*) G3bc4@r) (if (G2d0a@stx? G3bbf@e) (and (not (G2cc0@top-marked? G3bc1@m*)) (call-with-values (lambda () (G2d28@join-wraps G3bc1@m* G3bc2@s* G3bc3@ae* G3bbf@e)) (lambda (G3bce@G3bcb G3bcf@G3bcc G3bd0@G3bcd) ((lambda (G3bd4@ae* G3bd5@s* G3bd6@m*) (G3bba@match (G2d0e@stx-expr G3bbf@e) G3bc0@p G3bd6@m* G3bd5@s* G3bd4@ae* G3bc4@r)) G3bd0@G3bcd G3bcf@G3bcc G3bce@G3bcb)))) (if (G28eb@G280e@annotation? G3bbf@e) (G3bba@match (G28ed@G2812@annotation-expression G3bbf@e) G3bc0@p G3bc1@m* G3bc2@s* G3bc3@ae* G3bc4@r) (G3bb8@match* G3bbf@e G3bc0@p G3bc1@m* G3bc2@s* G3bc3@ae* G3bc4@r)))))))) (lambda (G3bbb@e G3bbc@p) (G3bba@match G3bbb@e G3bbc@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f35@ellipsis? (lambda (G3c7d@x) (and (G2d42@id? G3c7d@x) (G2d4a@free-id=? G3c7d@x (G2ebd@scheme-stx '...))))) (set! G2f37@underscore? (lambda (G3c7f@x) (and (G2d42@id? G3c7f@x) (G2d4a@free-id=? G3c7f@x (G2ebd@scheme-stx '_))))) (set! G2f39@verify-literals (lambda (G3c81@lits G3c82@expr) (for-each (lambda (G3c85@x) (if (or (not (G2d42@id? G3c85@x)) (G2f35@ellipsis? G3c85@x) (G2f37@underscore? G3c85@x)) (G301e@syntax-violation '#f '"invalid literal" G3c82@expr G3c85@x) (void))) G3c81@lits))) (set! G2f3b@syntax-case-transformer ((lambda () ((lambda (G3c88@build-dispatch-call G3c8a@invalid-ids-error G3c8c@gen-clause G3c8e@gen-syntax-case) (begin (set! G3c88@build-dispatch-call (lambda (G3cf7@pvars G3cf8@expr G3cf9@y G3cfa@r G3cfb@mr) ((lambda (G3d01@ids G3d02@levels) ((lambda (G3d05@labels G3d06@new-vars) ((lambda (G3d09@body) (list '(primitive apply) (G2ca0@G2be2@build-lambda '#f G3d06@new-vars G3d09@body) G3cf9@y)) (G2f57@chi-expr (G2d2e@add-subst (G2cfd@make-full-rib G3d01@ids G3d05@labels) G3cf8@expr) (append (map (lambda (G3d0b@label G3d0c@var G3d0d@level) (cons G3d0b@label (G2d62@make-binding 'syntax (cons G3d0c@var G3d0d@level)))) G3d05@labels G3d06@new-vars (map cdr G3cf7@pvars)) G3cfa@r) G3cfb@mr))) (map G2cc6@gen-label G3d01@ids) (map G2cc2@gen-lexical G3d01@ids))) (map car G3cf7@pvars) (map cdr G3cf7@pvars)))) (set! G3c8a@invalid-ids-error (lambda (G3ceb@id* G3cec@e G3ced@class) ((letrec ((G3cf1@find (lambda (G3cf3@id* G3cf4@ok*) (if (null? G3cf3@id*) (G301e@syntax-violation '#f '"invalid syntax" G3cec@e) (if (G2d42@id? (car G3cf3@id*)) (if (G2d50@bound-id-member? (car G3cf3@id*) G3cf4@ok*) (G301a@syntax-error (car G3cf3@id*) '"duplicate " G3ced@class) (G3cf1@find (cdr G3cf3@id*) (cons (car G3cf3@id*) G3cf4@ok*))) (G301a@syntax-error (car G3cf3@id*) '"invalid " G3ced@class)))))) G3cf1@find) G3ceb@id* '()))) (set! G3c8c@gen-clause (lambda (G3cc5@x G3cc6@keys G3cc7@clauses G3cc8@r G3cc9@mr G3cca@pat G3ccb@fender G3ccc@expr) (call-with-values (lambda () (G2f31@convert-pattern G3cca@pat G3cc6@keys)) (lambda (G3cd7@G3cd5 G3cd8@G3cd6) ((lambda (G3cdb@pvars G3cdc@p) (if (not (G2d4e@distinct-bound-ids? (map car G3cdb@pvars))) (G3c8a@invalid-ids-error (map car G3cdb@pvars) G3cca@pat '"pattern variable") (if (not (for-all (lambda (G3cdf@x) (not (G2f35@ellipsis? (car G3cdf@x)))) G3cdb@pvars)) (G301e@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3cca@pat) ((lambda (G3ce1@y) ((lambda (G3ce3@test) ((lambda (G3ce5@conseq) ((lambda (G3ce7@altern) (list (G2ca0@G2be2@build-lambda '#f (list G3ce1@y) (list 'if G3ce3@test G3ce5@conseq G3ce7@altern)) (list '(primitive syntax-dispatch) G3cc5@x (list 'quote G3cdc@p)))) (G3c8e@gen-syntax-case G3cc5@x G3cc6@keys G3cc7@clauses G3cc8@r G3cc9@mr))) (G3c88@build-dispatch-call G3cdb@pvars G3ccc@expr G3ce1@y G3cc8@r G3cc9@mr))) (if (eq? G3ccb@fender '#t) G3ce1@y ((lambda (G3ce9@call) (list 'if G3ce1@y G3ce9@call (list 'quote '#f))) (G3c88@build-dispatch-call G3cdb@pvars G3ccb@fender G3ce1@y G3cc8@r G3cc9@mr))))) (G2cc2@gen-lexical 'tmp))))) G3cd8@G3cd6 G3cd7@G3cd5))))) (set! G3c8e@gen-syntax-case (lambda (G3ca3@x G3ca4@keys G3ca5@clauses G3ca6@r G3ca7@mr) (if (null? G3ca5@clauses) (list '(primitive syntax-error) G3ca3@x) ((lambda (G3cad@t) ((lambda (G3caf@ls/false) (if G3caf@ls/false (apply (lambda (G3cb1@pat G3cb2@expr) (if (and (G2d42@id? G3cb1@pat) (not (G2d50@bound-id-member? G3cb1@pat G3ca4@keys)) (not (G2f35@ellipsis? G3cb1@pat))) (if (G2d4a@free-id=? G3cb1@pat (G2ebd@scheme-stx '_)) (G2f57@chi-expr G3cb2@expr G3ca6@r G3ca7@mr) ((lambda (G3cb5@lab G3cb6@lex) ((lambda (G3cb9@body) (list (G2ca0@G2be2@build-lambda '#f (list G3cb6@lex) G3cb9@body) G3ca3@x)) (G2f57@chi-expr (G2d2e@add-subst (G2cfd@make-full-rib (list G3cb1@pat) (list G3cb5@lab)) G3cb2@expr) (cons (cons G3cb5@lab (G2d62@make-binding 'syntax (cons G3cb6@lex '0))) G3ca6@r) G3ca7@mr))) (G2cc6@gen-label G3cb1@pat) (G2cc2@gen-lexical G3cb1@pat))) (G3c8c@gen-clause G3ca3@x G3ca4@keys (cdr G3ca5@clauses) G3ca6@r G3ca7@mr G3cb1@pat '#t G3cb2@expr))) G3caf@ls/false) ((lambda (G3cbb@t) ((lambda (G3cbd@ls/false) (if G3cbd@ls/false (apply (lambda (G3cbf@pat G3cc0@fender G3cc1@expr) (G3c8c@gen-clause G3ca3@x G3ca4@keys (cdr G3ca5@clauses) G3ca6@r G3ca7@mr G3cbf@pat G3cc0@fender G3cc1@expr)) G3cbd@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3cbb@t))) (G2f33@syntax-dispatch G3cbb@t '(any any any)))) G3cad@t))) (G2f33@syntax-dispatch G3cad@t '(any any)))) (car G3ca5@clauses))))) (lambda (G3c8f@e G3c90@r G3c91@mr) ((lambda (G3c95@t) ((lambda (G3c97@ls/false) (if G3c97@ls/false (apply (lambda (G3c99@expr G3c9a@keys G3c9b@clauses) (begin (G2f39@verify-literals G3c9a@keys G3c8f@e) ((lambda (G3c9f@x) ((lambda (G3ca1@body) (list (G2ca0@G2be2@build-lambda '#f (list G3c9f@x) G3ca1@body) (G2f57@chi-expr G3c99@expr G3c90@r G3c91@mr))) (G3c8e@gen-syntax-case G3c9f@x G3c9a@keys G3c9b@clauses G3c90@r G3c91@mr))) (G2cc2@gen-lexical 'tmp)))) G3c97@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3c95@t))) (G2f33@syntax-dispatch G3c95@t '(_ any each-any . each-any)))) G3c8f@e)))) '#f '#f '#f '#f)))) (set! G2f3d@ellipsis-map (lambda (G3d11@proc G3d12@ls . G3d15@ls*) ((lambda (G3d18@who) (begin (set! G3d18@who '...) (begin (if (not (list? G3d12@ls)) (assertion-violation G3d18@who '"not a list" G3d12@ls) (void)) (if (not (null? G3d15@ls*)) ((lambda (G3d19@n) (for-each (lambda (G3d1b@x) (begin (if (not (list? G3d1b@x)) (assertion-violation G3d18@who '"not a list" G3d1b@x) (void)) (if (not (= (length G3d1b@x) G3d19@n)) (assertion-violation G3d18@who '"length mismatch" G3d12@ls G3d1b@x) (void)))) G3d15@ls*)) (length G3d12@ls)) (void)) (apply map G3d11@proc G3d12@ls G3d15@ls*)))) '#f))) (set! G2f3f@syntax-transformer ((lambda () ((lambda (G3d1e@gen-syntax G3d20@gen-ref G3d22@gen-append G3d24@gen-mappend G3d26@gen-map G3d28@gen-cons G3d2a@gen-vector G3d2c@regen) (begin (set! G3d1e@gen-syntax (lambda (G3d91@src G3d92@e G3d93@r G3d94@maps G3d95@ellipsis? G3d96@vec?) ((lambda (G3d9d@t) ((lambda (G3d9f@ls/false) (if (and G3d9f@ls/false (apply (lambda (G3da1@dots) (G3d95@ellipsis? G3da1@dots)) G3d9f@ls/false)) (apply (lambda (G3da3@dots) (G301e@syntax-violation '#f '"misplaced ellipsis in syntax form" G3d91@src)) G3d9f@ls/false) ((lambda (G3da5@t) ((lambda (G3da7@ls/false) (if (and G3da7@ls/false (apply (lambda (G3da9@id) (G2d42@id? G3da9@id)) G3da7@ls/false)) (apply (lambda (G3dab@id) ((lambda (G3dad@label) ((lambda (G3daf@b) ((lambda () (if (eq? (G2d64@binding-type G3daf@b) 'syntax) (call-with-values (lambda () ((lambda (G3db3@var.lev) (G3d20@gen-ref G3d91@src (car G3db3@var.lev) (cdr G3db3@var.lev) G3d94@maps)) (G2d66@binding-value G3daf@b))) (lambda (G3db5@G3db1 G3db6@G3db2) ((lambda (G3db9@maps G3dba@var) (values (list 'ref G3dba@var) G3db9@maps)) G3db6@G3db2 G3db5@G3db1))) (values (list 'quote G3d92@e) G3d94@maps))))) (G2d60@label->binding G3dad@label G3d93@r))) (G2d5c@id->label G3d92@e))) G3da7@ls/false) ((lambda (G3dbd@t) ((lambda (G3dbf@ls/false) (if (and G3dbf@ls/false (apply (lambda (G3dc1@dots G3dc2@e) (G3d95@ellipsis? G3dc1@dots)) G3dbf@ls/false)) (apply (lambda (G3dc5@dots G3dc6@e) (if G3d96@vec? (G301e@syntax-violation '#f '"misplaced ellipsis in syntax form" G3d91@src) (G3d1e@gen-syntax G3d91@src G3dc6@e G3d93@r G3d94@maps (lambda (G3dc9@x) '#f) '#f))) G3dbf@ls/false) ((lambda (G3dcb@t) ((lambda (G3dcd@ls/false) (if (and G3dcd@ls/false (apply (lambda (G3dcf@x G3dd0@dots G3dd1@y) (G3d95@ellipsis? G3dd0@dots)) G3dcd@ls/false)) (apply (lambda (G3dd5@x G3dd6@dots G3dd7@y) ((letrec ((G3ddb@f (lambda (G3ddd@y G3dde@k) ((lambda (G3de1@t) ((lambda (G3de3@ls/false) (if G3de3@ls/false (apply (lambda () (G3dde@k G3d94@maps)) G3de3@ls/false) ((lambda (G3de5@t) ((lambda (G3de7@ls/false) (if (and G3de7@ls/false (apply (lambda (G3de9@dots G3dea@y) (G3d95@ellipsis? G3de9@dots)) G3de7@ls/false)) (apply (lambda (G3ded@dots G3dee@y) (G3ddb@f G3dee@y (lambda (G3df1@maps) (call-with-values (lambda () (G3dde@k (cons '() G3df1@maps))) (lambda (G3df5@G3df3 G3df6@G3df4) ((lambda (G3df9@maps G3dfa@x) (if (null? (car G3df9@maps)) (G301e@syntax-violation '#f '"extra ellipsis in syntax form" G3d91@src) (values (G3d24@gen-mappend G3dfa@x (car G3df9@maps)) (cdr G3df9@maps)))) G3df6@G3df4 G3df5@G3df3)))))) G3de7@ls/false) ((lambda (G3dfd@t) ((lambda (G3dff@ls/false) (if G3dff@ls/false (apply (lambda () (call-with-values (lambda () (G3d1e@gen-syntax G3d91@src G3ddd@y G3d93@r G3d94@maps G3d95@ellipsis? G3d96@vec?)) (lambda (G3e03@G3e01 G3e04@G3e02) ((lambda (G3e07@maps G3e08@y) (call-with-values (lambda () (G3dde@k G3e07@maps)) (lambda (G3e0d@G3e0b G3e0e@G3e0c) ((lambda (G3e11@maps G3e12@x) (values (G3d22@gen-append G3e12@x G3e08@y) G3e11@maps)) G3e0e@G3e0c G3e0d@G3e0b)))) G3e04@G3e02 G3e03@G3e01)))) G3dff@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3dfd@t))) (G2f33@syntax-dispatch G3dfd@t '_))) G3de5@t))) (G2f33@syntax-dispatch G3de5@t '(any . any)))) G3de1@t))) (G2f33@syntax-dispatch G3de1@t '()))) G3ddd@y)))) G3ddb@f) G3dd7@y (lambda (G3e15@maps) (call-with-values (lambda () (G3d1e@gen-syntax G3d91@src G3dd5@x G3d93@r (cons '() G3e15@maps) G3d95@ellipsis? '#f)) (lambda (G3e19@G3e17 G3e1a@G3e18) ((lambda (G3e1d@maps G3e1e@x) (if (null? (car G3e1d@maps)) (G301e@syntax-violation '#f '"extra ellipsis in syntax form" G3d91@src) (values (G3d26@gen-map G3e1e@x (car G3e1d@maps)) (cdr G3e1d@maps)))) G3e1a@G3e18 G3e19@G3e17)))))) G3dcd@ls/false) ((lambda (G3e21@t) ((lambda (G3e23@ls/false) (if G3e23@ls/false (apply (lambda (G3e25@x G3e26@y) (call-with-values (lambda () (G3d1e@gen-syntax G3d91@src G3e25@x G3d93@r G3d94@maps G3d95@ellipsis? '#f)) (lambda (G3e2b@G3e29 G3e2c@G3e2a) ((lambda (G3e2f@maps G3e30@xnew) (call-with-values (lambda () (G3d1e@gen-syntax G3d91@src G3e26@y G3d93@r G3e2f@maps G3d95@ellipsis? G3d96@vec?)) (lambda (G3e35@G3e33 G3e36@G3e34) ((lambda (G3e39@maps G3e3a@ynew) (values (G3d28@gen-cons G3d92@e G3e25@x G3e26@y G3e30@xnew G3e3a@ynew) G3e39@maps)) G3e36@G3e34 G3e35@G3e33)))) G3e2c@G3e2a G3e2b@G3e29)))) G3e23@ls/false) ((lambda (G3e3d@t) ((lambda (G3e3f@ls/false) (if G3e3f@ls/false (apply (lambda (G3e41@ls) (call-with-values (lambda () (G3d1e@gen-syntax G3d91@src G3e41@ls G3d93@r G3d94@maps G3d95@ellipsis? '#t)) (lambda (G3e45@G3e43 G3e46@G3e44) ((lambda (G3e49@maps G3e4a@lsnew) (values (G3d2a@gen-vector G3d92@e G3e41@ls G3e4a@lsnew) G3e49@maps)) G3e46@G3e44 G3e45@G3e43)))) G3e3f@ls/false) ((lambda (G3e4d@t) ((lambda (G3e4f@ls/false) (if G3e4f@ls/false (apply (lambda () (values (list 'quote G3d92@e) G3d94@maps)) G3e4f@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3e4d@t))) (G2f33@syntax-dispatch G3e4d@t '_))) G3e3d@t))) (G2f33@syntax-dispatch G3e3d@t '#(vector each-any)))) G3e21@t))) (G2f33@syntax-dispatch G3e21@t '(any . any)))) G3dcb@t))) (G2f33@syntax-dispatch G3dcb@t '(any any . any)))) G3dbd@t))) (G2f33@syntax-dispatch G3dbd@t '(any any)))) G3da5@t))) (G2f33@syntax-dispatch G3da5@t 'any))) G3d9d@t))) (G2f33@syntax-dispatch G3d9d@t 'any))) G3d92@e))) (set! G3d20@gen-ref (lambda (G3d79@src G3d7a@var G3d7b@level G3d7c@maps) (if (= G3d7b@level '0) (values G3d7a@var G3d7c@maps) (if (null? G3d7c@maps) (G301e@syntax-violation '#f '"missing ellipsis in syntax form" G3d79@src) (call-with-values (lambda () (G3d20@gen-ref G3d79@src G3d7a@var (- G3d7b@level '1) (cdr G3d7c@maps))) (lambda (G3d83@G3d81 G3d84@G3d82) ((lambda (G3d87@outer-maps G3d88@outer-var) ((lambda (G3d8b@t) (if G3d8b@t ((lambda (G3d8d@b) (values (cdr G3d8d@b) G3d7c@maps)) G3d8b@t) ((lambda (G3d8f@inner-var) (values G3d8f@inner-var (cons (cons (cons G3d88@outer-var G3d8f@inner-var) (car G3d7c@maps)) G3d87@outer-maps))) (G2cc2@gen-lexical 'tmp)))) (assq G3d88@outer-var (car G3d7c@maps)))) G3d84@G3d82 G3d83@G3d81))))))) (set! G3d22@gen-append (lambda (G3d75@x G3d76@y) (if (fast-equal? G3d76@y ''()) G3d75@x (list 'append G3d75@x G3d76@y)))) (set! G3d24@gen-mappend (lambda (G3d71@e G3d72@map-env) (list 'apply '(primitive append) (G3d26@gen-map G3d71@e G3d72@map-env)))) (set! G3d26@gen-map (lambda (G3d5f@e G3d60@map-env) ((lambda (G3d63@formals G3d64@actuals) (if (eq? (car G3d5f@e) 'ref) (car G3d64@actuals) (if (for-all (lambda (G3d67@x) (and (eq? (car G3d67@x) 'ref) (memq (cadr G3d67@x) G3d63@formals))) (cdr G3d5f@e)) ((lambda (G3d69@args) (cons 'map (cons (list 'primitive (car G3d5f@e)) G3d69@args))) (map ((lambda (G3d6b@r) (lambda (G3d6d@x) (cdr (assq (cadr G3d6d@x) G3d6b@r)))) (map cons G3d63@formals G3d64@actuals)) (cdr G3d5f@e))) (cons* 'map (list 'lambda G3d63@formals G3d5f@e) G3d64@actuals)))) (map cdr G3d60@map-env) (map (lambda (G3d6f@x) (list 'ref (car G3d6f@x))) G3d60@map-env)))) (set! G3d28@gen-cons (lambda (G3d4f@e G3d50@x G3d51@y G3d52@xnew G3d53@ynew) ((lambda (G3d59@t) (if (memv G3d59@t '(quote)) (if (eq? (car G3d52@xnew) 'quote) ((lambda (G3d5b@xnew G3d5c@ynew) (if (and (eq? G3d5b@xnew G3d50@x) (eq? G3d5c@ynew G3d51@y)) (list 'quote G3d4f@e) (list 'quote (cons G3d5b@xnew G3d5c@ynew)))) (cadr G3d52@xnew) (cadr G3d53@ynew)) (if (null? (cadr G3d53@ynew)) (list 'list G3d52@xnew) (list 'cons G3d52@xnew G3d53@ynew))) (if (memv G3d59@t '(list)) (cons 'list (cons G3d52@xnew (cdr G3d53@ynew))) (list 'cons G3d52@xnew G3d53@ynew)))) (car G3d53@ynew)))) (set! G3d2a@gen-vector (lambda (G3d49@e G3d4a@ls G3d4b@lsnew) (if (eq? (car G3d4b@lsnew) 'quote) (if (eq? (cadr G3d4b@lsnew) G3d4a@ls) (list 'quote G3d49@e) (list 'quote (list->vector (cadr G3d4b@lsnew)))) (if (eq? (car G3d4b@lsnew) 'list) (cons 'vector (cdr G3d4b@lsnew)) (list 'list->vector G3d4b@lsnew))))) (set! G3d2c@regen (lambda (G3d43@x) ((lambda (G3d45@t) (if (memv G3d45@t '(ref)) (cadr G3d43@x) (if (memv G3d45@t '(primitive)) (list 'primitive (cadr G3d43@x)) (if (memv G3d45@t '(quote)) (list 'quote (cadr G3d43@x)) (if (memv G3d45@t '(lambda)) (G2ca0@G2be2@build-lambda '#f (cadr G3d43@x) (G3d2c@regen (caddr G3d43@x))) (if (memv G3d45@t '(map)) ((lambda (G3d47@ls) (cons '(primitive ellipsis-map) G3d47@ls)) (map G3d2c@regen (cdr G3d43@x))) (cons (list 'primitive (car G3d43@x)) (map G3d2c@regen (cdr G3d43@x))))))))) (car G3d43@x)))) (lambda (G3d2d@e G3d2e@r G3d2f@mr) ((lambda (G3d33@t) ((lambda (G3d35@ls/false) (if G3d35@ls/false (apply (lambda (G3d37@x) (call-with-values (lambda () (G3d1e@gen-syntax G3d2d@e G3d37@x G3d2e@r '() G2f35@ellipsis? '#f)) (lambda (G3d3b@G3d39 G3d3c@G3d3a) ((lambda (G3d3f@maps G3d40@e) (G3d2c@regen G3d40@e)) G3d3c@G3d3a G3d3b@G3d39)))) G3d35@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3d33@t))) (G2f33@syntax-dispatch G3d33@t '(_ any)))) G3d2d@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f41@core-macro-transformer (lambda (G3e51@name) ((lambda (G3e53@t) (if (memv G3e53@t '(quote)) G2ee3@quote-transformer (if (memv G3e53@t '(lambda)) G2ee7@lambda-transformer (if (memv G3e53@t '(case-lambda)) G2ee5@case-lambda-transformer (if (memv G3e53@t '(letrec)) G2ecb@letrec-transformer (if (memv G3e53@t '(letrec*)) G2ecd@letrec*-transformer (if (memv G3e53@t '(if)) G2edb@if-transformer (if (memv G3e53@t '(and)) G2edd@and-transformer (if (memv G3e53@t '(or)) G2edf@or-transformer (if (memv G3e53@t '(foreign-call)) G2f2f@foreign-call-transformer (if (memv G3e53@t '(syntax-case)) G2f3b@syntax-case-transformer (if (memv G3e53@t '(syntax)) G2f3f@syntax-transformer (if (memv G3e53@t '(type-descriptor)) G2ed1@type-descriptor-transformer (if (memv G3e53@t '(record-type-descriptor)) G2ed3@record-type-descriptor-transformer (if (memv G3e53@t '(record-constructor-descriptor)) G2ed5@record-constructor-descriptor-transformer (if (memv G3e53@t '(fluid-let-syntax)) G2ecf@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e51@name))))))))))))))))) G3e51@name))) (set! G2f43@file-options-macro (lambda (G3e55@x) ((lambda (G3e58@valid-option?) (begin (set! G3e58@valid-option? (lambda (G3e61@x) (and (G2d42@id? G3e61@x) (memq (G2d44@id->sym G3e61@x) '(no-fail no-create no-truncate))))) ((lambda (G3e59@t) ((lambda (G3e5b@ls/false) (if (and G3e5b@ls/false (apply (lambda (G3e5d@opt*) (and (for-all G3e58@valid-option? G3e5d@opt*) (G28f7@G2888@file-options-spec (map G2d44@id->sym G3e5d@opt*)))) G3e5b@ls/false)) (apply (lambda (G3e5f@opt*) (G2ee9@bless (list 'quote (G28f7@G2888@file-options-spec (map G2d44@id->sym G3e5f@opt*))))) G3e5b@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3e59@t))) (G2f33@syntax-dispatch G3e59@t '(_ . each-any)))) G3e55@x))) '#f))) (set! G2f45@symbol-macro (lambda (G3e63@x G3e64@set) ((lambda (G3e67@t) ((lambda (G3e69@ls/false) (if (and G3e69@ls/false (apply (lambda (G3e6b@name) (and (G2d42@id? G3e6b@name) (memq (G2d44@id->sym G3e6b@name) G3e64@set))) G3e69@ls/false)) (apply (lambda (G3e6d@name) (G2ee9@bless (list 'quote G3e6d@name))) G3e69@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3e67@t))) (G2f33@syntax-dispatch G3e67@t '(_ any)))) G3e63@x))) (set! G2f47@macro-transformer (lambda (G3e6f@x) (if (procedure? G3e6f@x) G3e6f@x (if (symbol? G3e6f@x) ((lambda (G3e71@t) (if (memv G3e71@t '(define-record-type)) G2f27@define-record-type-macro (if (memv G3e71@t '(define-struct)) G2f25@define-struct-macro (if (memv G3e71@t '(include)) G2f1b@include-macro (if (memv G3e71@t '(cond)) G2f17@cond-macro (if (memv G3e71@t '(let)) G2eef@let-macro (if (memv G3e71@t '(do)) G2f0f@do-macro (if (memv G3e71@t '(or)) G2f13@or-macro (if (memv G3e71@t '(and)) G2f15@and-macro (if (memv G3e71@t '(let*)) G2f11@let*-macro (if (memv G3e71@t '(let-values)) G2ef1@let-values-macro (if (memv G3e71@t '(let*-values)) G2ef3@let*-values-macro (if (memv G3e71@t '(syntax-rules)) G2f1f@syntax-rules-macro (if (memv G3e71@t '(quasiquote)) G2f21@quasiquote-macro (if (memv G3e71@t '(quasisyntax)) G2f23@quasisyntax-macro (if (memv G3e71@t '(with-syntax)) G2eeb@with-syntax-macro (if (memv G3e71@t '(when)) G2ed7@when-macro (if (memv G3e71@t '(unless)) G2ed9@unless-macro (if (memv G3e71@t '(case)) G2ee1@case-macro (if (memv G3e71@t '(identifier-syntax)) G2f0d@identifier-syntax-macro (if (memv G3e71@t '(time)) G2f05@time-macro (if (memv G3e71@t '(delay)) G2f07@delay-macro (if (memv G3e71@t '(assert)) G2f09@assert-macro (if (memv G3e71@t '(endianness)) G2f0b@endianness-macro (if (memv G3e71@t '(guard)) G2f01@guard-macro (if (memv G3e71@t '(define-enumeration)) G2f03@define-enumeration-macro (if (memv G3e71@t '(trace-lambda)) G2ef5@trace-lambda-macro (if (memv G3e71@t '(trace-define)) G2ef7@trace-define-macro (if (memv G3e71@t '(trace-define-syntax)) G2ef9@trace-define-syntax-macro (if (memv G3e71@t '(trace-let-syntax)) G2efd@trace-let-syntax-macro (if (memv G3e71@t '(trace-letrec-syntax)) G2eff@trace-letrec-syntax-macro (if (memv G3e71@t '(define-condition-type)) G2f29@define-condition-type-macro (if (memv G3e71@t '(parameterize)) G2f2d@parameterize-macro (if (memv G3e71@t '(include-into)) G2f1d@include-into-macro (if (memv G3e71@t '(eol-style)) (lambda (G3e73@x) (G2f45@symbol-macro G3e73@x '(none lf cr crlf nel crnel ls))) (if (memv G3e71@t '(error-handling-mode)) (lambda (G3e75@x) (G2f45@symbol-macro G3e75@x '(ignore raise replace))) (if (memv G3e71@t '(buffer-mode)) (lambda (G3e77@x) (G2f45@symbol-macro G3e77@x '(none line block))) (if (memv G3e71@t '(file-options)) G2f43@file-options-macro (if (memv G3e71@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f2b@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3e6f@x)))))))))))))))))))))))))))))))))))))))) G3e6f@x) (error 'core-macro-transformer '"BUG: invalid macro" G3e6f@x))))) (set! G2f49@local-macro-transformer (lambda (G3e79@x) (car G3e79@x))) (set! G2f4b@do-macro-call (lambda (G3e7b@transformer G3e7c@expr) ((lambda (G3e7f@out) (begin ((letrec ((G3e81@f (lambda (G3e83@x) (if (not (G2d0a@stx? G3e83@x)) (if (pair? G3e83@x) (begin (G3e81@f (car G3e83@x)) (G3e81@f (cdr G3e83@x))) (if (vector? G3e83@x) (vector-for-each G3e81@f G3e83@x) (if (symbol? G3e83@x) (G301e@syntax-violation '#f '"raw symbol encountered in output of macro" G3e7c@expr G3e83@x) (void)))) (void))))) G3e81@f) G3e7f@out) (G2d2c@add-mark (G2d22@gen-mark) G3e7f@out G3e7c@expr))) (G3e7b@transformer (G2d2c@add-mark G2d24@anti-mark G3e7c@expr '#f))))) (set! G2f4d@chi-macro (lambda (G3e85@p G3e86@e) (G2f4b@do-macro-call (G2f47@macro-transformer G3e85@p) G3e86@e))) (set! G2f4f@chi-local-macro (lambda (G3e89@p G3e8a@e) (G2f4b@do-macro-call (G2f49@local-macro-transformer G3e89@p) G3e8a@e))) (set! G2f51@chi-global-macro (lambda (G3e8d@p G3e8e@e) ((lambda (G3e91@lib G3e92@loc) (begin (G2b6b@G2a13@visit-library G3e91@lib) ((lambda (G3e95@x) ((lambda (G3e97@transformer) (G2f4b@do-macro-call G3e97@transformer G3e8e@e)) (if (procedure? G3e95@x) G3e95@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3e95@x)))) (symbol-value G3e92@loc)))) (car G3e8d@p) (cdr G3e8d@p)))) (set! G2f53@chi-expr* (lambda (G3e99@e* G3e9a@r G3e9b@mr) (if (null? G3e99@e*) '() ((lambda (G3e9f@e) (cons G3e9f@e (G2f53@chi-expr* (cdr G3e99@e*) G3e9a@r G3e9b@mr))) (G2f57@chi-expr (car G3e99@e*) G3e9a@r G3e9b@mr))))) (set! G2f55@chi-application (lambda (G3ea1@e G3ea2@r G3ea3@mr) ((lambda (G3ea7@t) ((lambda (G3ea9@ls/false) (if G3ea9@ls/false (apply (lambda (G3eab@rator G3eac@rands) ((lambda (G3eaf@rator) (cons G3eaf@rator (G2f53@chi-expr* G3eac@rands G3ea2@r G3ea3@mr))) (G2f57@chi-expr G3eab@rator G3ea2@r G3ea3@mr))) G3ea9@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3ea7@t))) (G2f33@syntax-dispatch G3ea7@t '(any . each-any)))) G3ea1@e))) (set! G2f57@chi-expr (lambda (G3eb1@e G3eb2@r G3eb3@mr) (call-with-values (lambda () (G2d6a@syntax-type G3eb1@e G3eb2@r)) (lambda (G3eba@G3eb7 G3ebb@G3eb8 G3ebc@G3eb9) ((lambda (G3ec0@kwd G3ec1@value G3ec2@type) ((lambda (G3ec6@t) (if (memv G3ec6@t '(core-macro)) ((lambda (G3ec8@transformer) (G3ec8@transformer G3eb1@e G3eb2@r G3eb3@mr)) (G2f41@core-macro-transformer G3ec1@value)) (if (memv G3ec6@t '(global)) ((lambda (G3eca@lib) ((lambda (G3ecc@loc) ((lambda () (begin ((G2fa0@inv-collector) G3eca@lib) G3ecc@loc)))) (cdr G3ec1@value))) (car G3ec1@value)) (if (memv G3ec6@t '(core-prim)) ((lambda (G3ece@name) (list 'primitive G3ece@name)) G3ec1@value) (if (memv G3ec6@t '(call)) (G2f55@chi-application G3eb1@e G3eb2@r G3eb3@mr) (if (memv G3ec6@t '(lexical)) ((lambda (G3ed0@lex) G3ed0@lex) (G2ebf@lexical-var G3ec1@value)) (if (memv G3ec6@t '(global-macro global-macro!)) (G2f57@chi-expr (G2f51@chi-global-macro G3ec1@value G3eb1@e) G3eb2@r G3eb3@mr) (if (memv G3ec6@t '(local-macro local-macro!)) (G2f57@chi-expr (G2f4f@chi-local-macro G3ec1@value G3eb1@e) G3eb2@r G3eb3@mr) (if (memv G3ec6@t '(macro macro!)) (G2f57@chi-expr (G2f4d@chi-macro G3ec1@value G3eb1@e) G3eb2@r G3eb3@mr) (if (memv G3ec6@t '(constant)) ((lambda (G3ed2@datum) (list 'quote G3ed2@datum)) G3ec1@value) (if (memv G3ec6@t '(set!)) (G2f59@chi-set! G3eb1@e G3eb2@r G3eb3@mr) (if (memv G3ec6@t '(begin)) ((lambda (G3ed4@t) ((lambda (G3ed6@ls/false) (if G3ed6@ls/false (apply (lambda (G3ed8@x G3ed9@x*) (G2ca3@G2c14@build-sequence '#f (G2f53@chi-expr* (cons G3ed8@x G3ed9@x*) G3eb2@r G3eb3@mr))) G3ed6@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3ed4@t))) (G2f33@syntax-dispatch G3ed4@t '(_ any . each-any)))) G3eb1@e) (if (memv G3ec6@t '(let-syntax letrec-syntax)) ((lambda (G3edc@t) ((lambda (G3ede@ls/false) (if (and G3ede@ls/false (apply (lambda (G3ee0@xlhs* G3ee1@xrhs* G3ee2@xbody G3ee3@xbody*) (if (not (G2d4c@valid-bound-ids? G3ee0@xlhs*)) (G301e@syntax-violation '#f '"invalid identifiers" G3eb1@e) (void))) G3ede@ls/false)) (apply (lambda (G3ee8@xlhs* G3ee9@xrhs* G3eea@xbody G3eeb@xbody*) ((lambda (G3ef0@xlab*) ((lambda (G3ef2@xrib) ((lambda (G3ef4@xb*) ((lambda () (G2ca3@G2c14@build-sequence '#f (G2f53@chi-expr* (map (lambda (G3ef6@x) (G2d2e@add-subst G3ef2@xrib G3ef6@x)) (cons G3eea@xbody G3eeb@xbody*)) (append (map cons G3ef0@xlab* G3ef4@xb*) G3eb2@r) (append (map cons G3ef0@xlab* G3ef4@xb*) G3eb3@mr)))))) (map (lambda (G3ef8@x) (G2d80@make-eval-transformer (G2f92@expand-transformer (if (eq? G3ec2@type 'let-syntax) G3ef8@x (G2d2e@add-subst G3ef2@xrib G3ef8@x)) G3eb3@mr))) G3ee9@xrhs*))) (G2cfd@make-full-rib G3ee8@xlhs* G3ef0@xlab*))) (map G2cc6@gen-label G3ee8@xlhs*))) G3ede@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3edc@t))) (G2f33@syntax-dispatch G3edc@t '(_ #(each (any any)) any . each-any)))) G3eb1@e) (if (memv G3ec6@t '(displaced-lexical)) (G301e@syntax-violation '#f '"identifier out of context" G3eb1@e) (if (memv G3ec6@t '(syntax)) (G301e@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3eb1@e) (if (memv G3ec6@t '(define define-syntax module import library)) (G301e@syntax-violation '#f (string-append ((lambda (G3efa@t) (if (memv G3efa@t '(define)) '"a definition" (if (memv G3efa@t '(define-syntax)) '"a define-syntax" (if (memv G3efa@t '(module)) '"a module definition" (if (memv G3efa@t '(library)) '"a library definition" (if (memv G3efa@t '(import)) '"an import declaration" (if (memv G3efa@t '(export)) '"an export declaration" '"a non-expression"))))))) G3ec2@type) '" was found where an expression was expected") G3eb1@e) (if (memv G3ec6@t '(mutable)) (G301e@syntax-violation '#f '"attempt to reference an unexportable variable" G3eb1@e) (G301e@syntax-violation '#f '"invalid expression" G3eb1@e)))))))))))))))))) G3ec2@type)) G3ebc@G3eb9 G3ebb@G3eb8 G3eba@G3eb7))))) (set! G2f59@chi-set! (lambda (G3efc@e G3efd@r G3efe@mr) ((lambda (G3f02@t) ((lambda (G3f04@ls/false) (if (and G3f04@ls/false (apply (lambda (G3f06@x G3f07@v) (G2d42@id? G3f06@x)) G3f04@ls/false)) (apply (lambda (G3f0a@x G3f0b@v) (call-with-values (lambda () (G2d6a@syntax-type G3f0a@x G3efd@r)) (lambda (G3f11@G3f0e G3f12@G3f0f G3f13@G3f10) ((lambda (G3f17@kwd G3f18@value G3f19@type) ((lambda (G3f1d@t) (if (memv G3f1d@t '(lexical)) (begin (G2ec3@set-lexical-mutable! G3f18@value '#t) (list 'set! (G2ebf@lexical-var G3f18@value) (G2f57@chi-expr G3f0b@v G3efd@r G3efe@mr))) (if (memv G3f1d@t '(core-prim)) (G301e@syntax-violation '#f '"cannot modify imported core primitive" G3efc@e) (if (memv G3f1d@t '(global)) (G301e@syntax-violation '#f '"attempt to modify imported binding" G3efc@e) (if (memv G3f1d@t '(global-macro!)) (G2f57@chi-expr (G2f51@chi-global-macro G3f18@value G3efc@e) G3efd@r G3efe@mr) (if (memv G3f1d@t '(local-macro!)) (G2f57@chi-expr (G2f4f@chi-local-macro G3f18@value G3efc@e) G3efd@r G3efe@mr) (if (memv G3f1d@t '(mutable)) (G301e@syntax-violation '#f '"attempt to assign to an unexportable variable" G3efc@e) (G301e@syntax-violation '#f '"invalid syntax" G3efc@e)))))))) G3f19@type)) G3f13@G3f10 G3f12@G3f0f G3f11@G3f0e)))) G3f04@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3f02@t))) (G2f33@syntax-dispatch G3f02@t '(_ any any)))) G3efc@e))) (set! G2f5b@verify-formals (lambda (G3f1f@fmls G3f20@stx) ((lambda (G3f23@t) ((lambda (G3f25@ls/false) (if G3f25@ls/false (apply (lambda (G3f27@x*) (if (not (G2d4c@valid-bound-ids? G3f27@x*)) (G2eed@invalid-fmls-error G3f20@stx G3f1f@fmls) (void))) G3f25@ls/false) ((lambda (G3f29@t) ((lambda (G3f2b@ls/false) (if G3f2b@ls/false (apply (lambda (G3f2d@x* G3f2e@x) (if (not (G2d4c@valid-bound-ids? (cons G3f2e@x G3f2d@x*))) (G2eed@invalid-fmls-error G3f20@stx G3f1f@fmls) (void))) G3f2b@ls/false) ((lambda (G3f31@t) ((lambda (G3f33@ls/false) (if G3f33@ls/false (apply (lambda () (G301e@syntax-violation '#f '"invalid syntax" G3f20@stx)) G3f33@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3f31@t))) (G2f33@syntax-dispatch G3f31@t '_))) G3f29@t))) (G2f33@syntax-dispatch G3f29@t '#(each+ any () any)))) G3f23@t))) (G2f33@syntax-dispatch G3f23@t 'each-any))) G3f1f@fmls))) (set! G2f5d@chi-lambda-clause (lambda (G3f35@stx G3f36@fmls G3f37@body* G3f38@r G3f39@mr) ((lambda (G3f3f@t) ((lambda (G3f41@ls/false) (if G3f41@ls/false (apply (lambda (G3f43@x*) (begin (G2f5b@verify-formals G3f36@fmls G3f35@stx) ((lambda (G3f45@lex* G3f46@lab*) (values G3f45@lex* (G2f6d@chi-internal (G2d2e@add-subst (G2cfd@make-full-rib G3f43@x* G3f46@lab*) G3f37@body*) (G2ec7@add-lexicals G3f46@lab* G3f45@lex* G3f38@r) G3f39@mr))) (map G2cc2@gen-lexical G3f43@x*) (map G2cc6@gen-label G3f43@x*)))) G3f41@ls/false) ((lambda (G3f49@t) ((lambda (G3f4b@ls/false) (if G3f4b@ls/false (apply (lambda (G3f4d@x* G3f4e@x) (begin (G2f5b@verify-formals G3f36@fmls G3f35@stx) ((lambda (G3f51@lex* G3f52@lab* G3f53@lex G3f54@lab) (values (append G3f51@lex* G3f53@lex) (G2f6d@chi-internal (G2d2e@add-subst (G2cfd@make-full-rib (cons G3f4e@x G3f4d@x*) (cons G3f54@lab G3f52@lab*)) G3f37@body*) (G2ec7@add-lexicals (cons G3f54@lab G3f52@lab*) (cons G3f53@lex G3f51@lex*) G3f38@r) G3f39@mr))) (map G2cc2@gen-lexical G3f4d@x*) (map G2cc6@gen-label G3f4d@x*) (G2cc2@gen-lexical G3f4e@x) (G2cc6@gen-label G3f4e@x)))) G3f4b@ls/false) ((lambda (G3f59@t) ((lambda (G3f5b@ls/false) (if G3f5b@ls/false (apply (lambda () (G301e@syntax-violation '#f '"invalid syntax" G3f36@fmls)) G3f5b@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G3f59@t))) (G2f33@syntax-dispatch G3f59@t '_))) G3f49@t))) (G2f33@syntax-dispatch G3f49@t '#(each+ any () any)))) G3f3f@t))) (G2f33@syntax-dispatch G3f3f@t 'each-any))) G3f36@fmls))) (set! G2f5f@chi-lambda-clause* (lambda (G3f5d@stx G3f5e@fmls* G3f5f@body** G3f60@r G3f61@mr) (if (null? G3f5e@fmls*) (values '() '()) (call-with-values (lambda () (G2f5d@chi-lambda-clause G3f5d@stx (car G3f5e@fmls*) (car G3f5f@body**) G3f60@r G3f61@mr)) (lambda (G3f69@G3f67 G3f6a@G3f68) ((lambda (G3f6d@b G3f6e@a) (call-with-values (lambda () (G2f5f@chi-lambda-clause* G3f5d@stx (cdr G3f5e@fmls*) (cdr G3f5f@body**) G3f60@r G3f61@mr)) (lambda (G3f73@G3f71 G3f74@G3f72) ((lambda (G3f77@b* G3f78@a*) (values (cons G3f6e@a G3f78@a*) (cons G3f6d@b G3f77@b*))) G3f74@G3f72 G3f73@G3f71)))) G3f6a@G3f68 G3f69@G3f67)))))) (set! G2f61@chi-defun (lambda (G3f7b@x G3f7c@r G3f7d@mr) ((lambda (G3f81@fmls G3f82@body*) (call-with-values (lambda () (G2f5d@chi-lambda-clause G3f81@fmls G3f81@fmls G3f82@body* G3f7c@r G3f7d@mr)) (lambda (G3f87@G3f85 G3f88@G3f86) ((lambda (G3f8b@body G3f8c@fmls) (G2ca0@G2be2@build-lambda '#f G3f8c@fmls G3f8b@body)) G3f88@G3f86 G3f87@G3f85)))) (car G3f7b@x) (cdr G3f7b@x)))) (set! G2f63@chi-rhs (lambda (G3f8f@rhs G3f90@r G3f91@mr) ((lambda (G3f95@t) (if (memv G3f95@t '(defun)) (G2f61@chi-defun (cdr G3f8f@rhs) G3f90@r G3f91@mr) (if (memv G3f95@t '(expr)) ((lambda (G3f97@expr) (G2f57@chi-expr G3f97@expr G3f90@r G3f91@mr)) (cdr G3f8f@rhs)) (if (memv G3f95@t '(top-expr)) ((lambda (G3f99@expr) (G2ca3@G2c14@build-sequence '#f (list (G2f57@chi-expr G3f99@expr G3f90@r G3f91@mr) (G2ca4@G2c16@build-void)))) (cdr G3f8f@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3f8f@rhs))))) (car G3f8f@rhs)))) (set! G2f65@expand-interaction-rhs*/init* (lambda (G3f9b@lhs* G3f9c@rhs* G3f9d@init* G3f9e@r G3f9f@mr) ((letrec ((G3fa5@f (lambda (G3fa7@lhs* G3fa8@rhs*) (if (null? G3fa7@lhs*) (map (lambda (G3fab@x) (G2f57@chi-expr G3fab@x G3f9e@r G3f9f@mr)) G3f9d@init*) ((lambda (G3fad@lhs G3fae@rhs) ((lambda (G3fb1@t) (if (memv G3fb1@t '(defun)) ((lambda (G3fb3@rhs) (cons (list 'set! G3fad@lhs G3fb3@rhs) (G3fa5@f (cdr G3fa7@lhs*) (cdr G3fa8@rhs*)))) (G2f61@chi-defun (cdr G3fae@rhs) G3f9e@r G3f9f@mr)) (if (memv G3fb1@t '(expr)) ((lambda (G3fb5@rhs) (cons (list 'set! G3fad@lhs G3fb5@rhs) (G3fa5@f (cdr G3fa7@lhs*) (cdr G3fa8@rhs*)))) (G2f57@chi-expr (cdr G3fae@rhs) G3f9e@r G3f9f@mr)) (if (memv G3fb1@t '(top-expr)) ((lambda (G3fb7@e) (cons G3fb7@e (G3fa5@f (cdr G3fa7@lhs*) (cdr G3fa8@rhs*)))) (G2f57@chi-expr (cdr G3fae@rhs) G3f9e@r G3f9f@mr)) (error 'expand-interaction '"invallid" G3fae@rhs))))) (car G3fae@rhs))) (car G3fa7@lhs*) (car G3fa8@rhs*)))))) G3fa5@f) G3f9b@lhs* G3f9c@rhs*))) (set! G2f67@chi-rhs* (lambda (G3fb9@rhs* G3fba@r G3fbb@mr) ((letrec ((G3fbf@f (lambda (G3fc1@ls) (if (null? G3fc1@ls) '() ((lambda (G3fc3@a) (cons G3fc3@a (G3fbf@f (cdr G3fc1@ls)))) (G2f63@chi-rhs (car G3fc1@ls) G3fba@r G3fbb@mr)))))) G3fbf@f) G3fb9@rhs*))) (set! G2f69@find-bound=? (lambda (G3fc5@x G3fc6@lhs* G3fc7@rhs*) (if (null? G3fc6@lhs*) '#f (if (G2d48@bound-id=? G3fc5@x (car G3fc6@lhs*)) (car G3fc7@rhs*) (G2f69@find-bound=? G3fc5@x (cdr G3fc6@lhs*) (cdr G3fc7@rhs*)))))) (set! G2f6b@find-dups (lambda (G3fcb@ls) ((letrec ((G3fcd@f (lambda (G3fcf@ls G3fd0@dups) (if (null? G3fcf@ls) G3fd0@dups ((lambda (G3fd3@t) (if G3fd3@t ((lambda (G3fd5@x) (G3fcd@f (cdr G3fcf@ls) (cons (list (car G3fcf@ls) G3fd5@x) G3fd0@dups))) G3fd3@t) (G3fcd@f (cdr G3fcf@ls) G3fd0@dups))) (G2f69@find-bound=? (car G3fcf@ls) (cdr G3fcf@ls) (cdr G3fcf@ls))))))) G3fcd@f) G3fcb@ls '()))) (set! G2f6d@chi-internal (lambda (G3fd7@e* G3fd8@r G3fd9@mr) ((lambda (G3fdd@rib) (call-with-values (lambda () (G2f90@chi-body* (map (lambda (G3fe7@x) (G2d2e@add-subst G3fdd@rib G3fe7@x)) (G2d40@syntax->list G3fd7@e*)) G3fd8@r G3fd9@mr '() '() '() '() '() G3fdd@rib '#f)) (lambda (G3fe9@G3fdf G3fea@G3fe0 G3feb@G3fe1 G3fec@G3fe2 G3fed@G3fe3 G3fee@G3fe4 G3fef@G3fe5 G3ff0@G3fe6) ((lambda (G3ff9@_exp* G3ffa@kwd* G3ffb@mod** G3ffc@rhs* G3ffd@lex* G3ffe@mr G3fff@r G4000@e*) (begin (if (null? G4000@e*) (G301e@syntax-violation '#f '"no expression in body" G4000@e*) (void)) ((lambda (G4009@init*) ((lambda (G400b@rhs*) ((lambda () (G2ca6@G2c1a@build-letrec* '#f (reverse G3ffd@lex*) (reverse G400b@rhs*) (G2ca3@G2c14@build-sequence '#f G4009@init*))))) (G2f67@chi-rhs* G3ffc@rhs* G3fff@r G3ffe@mr))) (G2f53@chi-expr* (append (apply append (reverse G3ffb@mod**)) G4000@e*) G3fff@r G3ffe@mr)))) G3ff0@G3fe6 G3fef@G3fe5 G3fee@G3fe4 G3fed@G3fe3 G3fec@G3fe2 G3feb@G3fe1 G3fea@G3fe0 G3fe9@G3fdf)))) (G2cf1@make-empty-rib)))) (set! G2f6f@parse-module (lambda (G400d@e) ((lambda (G400f@t) ((lambda (G4011@ls/false) (if G4011@ls/false (apply (lambda (G4013@export* G4014@b*) (begin (if (not (for-all G2d42@id? G4013@export*)) (G301e@syntax-violation '#f '"module exports must be identifiers" G400d@e) (void)) (values '#f (list->vector G4013@export*) G4014@b*))) G4011@ls/false) ((lambda (G4017@t) ((lambda (G4019@ls/false) (if G4019@ls/false (apply (lambda (G401b@name G401c@export* G401d@b*) (begin (if (not (G2d42@id? G401b@name)) (G301e@syntax-violation '#f '"module name must be an identifier" G400d@e) (void)) (if (not (for-all G2d42@id? G401c@export*)) (G301e@syntax-violation '#f '"module exports must be identifiers" G400d@e) (void)) (values G401b@name (list->vector G401c@export*) G401d@b*))) G4019@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G4017@t))) (G2f33@syntax-dispatch G4017@t '(_ any each-any . each-any)))) G400f@t))) (G2f33@syntax-dispatch G400f@t '(_ each-any . each-any)))) G400d@e))) (set! G2f75@G2f70 (make-record-type-descriptor 'module-interface '#f 'G2f73 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2f77@G2f72 '#f) (set! G2f79@G2f71 (make-record-constructor-descriptor G2f75@G2f70 '#f G2f77@G2f72)) (set! G2f7c@module-interface? (record-predicate G2f75@G2f70)) (set! G2f7e@make-module-interface (record-constructor G2f79@G2f71)) (set! G2f80@module-interface-first-mark (record-accessor G2f75@G2f70 '0)) (set! G2f82@module-interface-exp-id-vec (record-accessor G2f75@G2f70 '1)) (set! G2f84@module-interface-exp-lab-vec (record-accessor G2f75@G2f70 '2)) (set! G2f86@set-module-interface-first-mark! (record-mutator G2f75@G2f70 '0)) (set! G2f88@set-module-interface-exp-id-vec! (record-mutator G2f75@G2f70 '1)) (set! G2f8a@set-module-interface-exp-lab-vec! (record-mutator G2f75@G2f70 '2)) (set! G2f8c@module-interface-exp-id* (lambda (G4021@iface G4022@id) ((lambda (G4026@diff-marks) (begin (set! G4026@diff-marks (lambda (G402d@ls G402e@x) (begin (if (null? G402d@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4031@a) (if (eq? G4031@a G402e@x) '() (cons G4031@a (G4026@diff-marks (cdr G402d@ls) G402e@x)))) (car G402d@ls))))) ((lambda (G4027@diff G4028@id-vec) (if (null? G4027@diff) G4028@id-vec (vector-map (lambda (G402b@x) (G2d0c@make-stx (G2d0e@stx-expr G402b@x) (append G4027@diff (G2d10@stx-mark* G402b@x)) '() '())) G4028@id-vec))) (G4026@diff-marks (G2d10@stx-mark* G4022@id) (G2f80@module-interface-first-mark G4021@iface)) (G2f82@module-interface-exp-id-vec G4021@iface)))) '#f))) (set! G2f8e@chi-internal-module (lambda (G4033@e G4034@r G4035@mr G4036@lex* G4037@rhs* G4038@mod** G4039@kwd*) (call-with-values (lambda () (G2f6f@parse-module G4033@e)) (lambda (G4044@G4041 G4045@G4042 G4046@G4043) ((lambda (G404a@e* G404b@exp-id* G404c@name) ((lambda (G4050@rib) ((lambda (G4052@e*) ((lambda () (call-with-values (lambda () (G2f90@chi-body* G4052@e* G4034@r G4035@mr G4036@lex* G4037@rhs* G4038@mod** G4039@kwd* '() G4050@rib '#f)) (lambda (G405c@G4054 G405d@G4055 G405e@G4056 G405f@G4057 G4060@G4058 G4061@G4059 G4062@G405a G4063@G405b) ((lambda (G406c@_exp* G406d@kwd* G406e@mod** G406f@rhs* G4070@lex* G4071@mr G4072@r G4073@e*) ((lambda (G407c@exp-lab* G407d@mod**) (if (not G404c@name) (values G4070@lex* G406f@rhs* G404b@exp-id* G407c@exp-lab* G4072@r G4071@mr G407d@mod** G406d@kwd*) ((lambda (G4080@lab G4081@iface) (values G4070@lex* G406f@rhs* (vector G404c@name) (vector G4080@lab) (cons (cons G4080@lab (cons '$module G4081@iface)) G4072@r) (cons (cons G4080@lab (cons '$module G4081@iface)) G4071@mr) G407d@mod** G406d@kwd*)) (G2cc6@gen-label 'module) (G2f7e@make-module-interface (car (G2d10@stx-mark* G404c@name)) (vector-map (lambda (G4084@x) (G2d0c@make-stx (G2d0e@stx-expr G4084@x) (G2d10@stx-mark* G4084@x) '() '())) G404b@exp-id*) G407c@exp-lab*)))) (vector-map (lambda (G4086@x) (or (G2d5c@id->label (G2d0c@make-stx (G2d44@id->sym G4086@x) (G2d10@stx-mark* G4086@x) (list G4050@rib) '())) (G301e@syntax-violation '#f '"cannot find module export" G4086@x))) G404b@exp-id*) (cons G4073@e* G406e@mod**))) G4063@G405b G4062@G405a G4061@G4059 G4060@G4058 G405f@G4057 G405e@G4056 G405d@G4055 G405c@G4054)))))) (map (lambda (G4088@x) (G2d2e@add-subst G4050@rib G4088@x)) (G2d40@syntax->list G404a@e*)))) (G2cf1@make-empty-rib))) G4046@G4043 G4045@G4042 G4044@G4041))))) (set! G2f90@chi-body* (lambda (G408a@e* G408b@r G408c@mr G408d@lex* G408e@rhs* G408f@mod** G4090@kwd* G4091@exp* G4092@rib G4093@top?) (if (null? G408a@e*) (values G408a@e* G408b@r G408c@mr G408d@lex* G408e@rhs* G408f@mod** G4090@kwd* G4091@exp*) ((lambda (G409e@e) (call-with-values (lambda () (G2d6a@syntax-type G409e@e G408b@r)) (lambda (G40a3@G40a0 G40a4@G40a1 G40a5@G40a2) ((lambda (G40a9@kwd G40aa@value G40ab@type) ((lambda (G40af@kwd*) ((lambda (G40b1@t) (if (memv G40b1@t '(define)) (call-with-values (lambda () (G2eb7@parse-define G409e@e)) (lambda (G40b5@G40b3 G40b6@G40b4) ((lambda (G40b9@rhs G40ba@id) (begin (if (G2d50@bound-id-member? G40ba@id G40af@kwd*) (G301e@syntax-violation '#f '"cannot redefine keyword" G409e@e) (void)) (call-with-values (lambda () (G2cca@gen-define-label+loc G40ba@id G4092@rib)) (lambda (G40bf@G40bd G40c0@G40be) ((lambda (G40c3@lex G40c4@lab) (begin (G2cf3@extend-rib! G4092@rib G40ba@id G40c4@lab) (G2f90@chi-body* (cdr G408a@e*) (G2ec5@add-lexical G40c4@lab G40c3@lex G408b@r) G408c@mr (cons G40c3@lex G408d@lex*) (cons G40b9@rhs G408e@rhs*) G408f@mod** G40af@kwd* G4091@exp* G4092@rib G4093@top?))) G40c0@G40be G40bf@G40bd))))) G40b6@G40b4 G40b5@G40b3))) (if (memv G40b1@t '(define-syntax)) (call-with-values (lambda () (G2eb9@parse-define-syntax G409e@e)) (lambda (G40c9@G40c7 G40ca@G40c8) ((lambda (G40cd@rhs G40ce@id) (begin (if (G2d50@bound-id-member? G40ce@id G40af@kwd*) (G301e@syntax-violation '#f '"cannot redefine keyword" G409e@e) (void)) ((lambda (G40d1@lab G40d2@expanded-rhs) (begin (G2cf3@extend-rib! G4092@rib G40ce@id G40d1@lab) ((lambda (G40d5@b) (G2f90@chi-body* (cdr G408a@e*) (cons (cons G40d1@lab G40d5@b) G408b@r) (cons (cons G40d1@lab G40d5@b) G408c@mr) G408d@lex* G408e@rhs* G408f@mod** G40af@kwd* G4091@exp* G4092@rib G4093@top?)) (G2d80@make-eval-transformer G40d2@expanded-rhs)))) (G2ccc@gen-define-label G40ce@id G4092@rib) (G2f92@expand-transformer G40cd@rhs G408c@mr)))) G40ca@G40c8 G40c9@G40c7))) (if (memv G40b1@t '(let-syntax letrec-syntax)) ((lambda (G40d7@t) ((lambda (G40d9@ls/false) (if (and G40d9@ls/false (apply (lambda (G40db@xlhs* G40dc@xrhs* G40dd@xbody*) (if (not (G2d4c@valid-bound-ids? G40db@xlhs*)) (G301e@syntax-violation '#f '"invalid identifiers" G409e@e) (void))) G40d9@ls/false)) (apply (lambda (G40e1@xlhs* G40e2@xrhs* G40e3@xbody*) ((lambda (G40e7@xlab*) ((lambda (G40e9@xrib) ((lambda (G40eb@xb*) ((lambda () (G2f90@chi-body* (append (map (lambda (G40ed@x) (G2d2e@add-subst G40e9@xrib G40ed@x)) G40e3@xbody*) (cdr G408a@e*)) (append (map cons G40e7@xlab* G40eb@xb*) G408b@r) (append (map cons G40e7@xlab* G40eb@xb*) G408c@mr) G408d@lex* G408e@rhs* G408f@mod** G40af@kwd* G4091@exp* G4092@rib G4093@top?)))) (map (lambda (G40ef@x) (G2d80@make-eval-transformer (G2f92@expand-transformer (if (eq? G40ab@type 'let-syntax) G40ef@x (G2d2e@add-subst G40e9@xrib G40ef@x)) G408c@mr))) G40e2@xrhs*))) (G2cfd@make-full-rib G40e1@xlhs* G40e7@xlab*))) (map G2cc6@gen-label G40e1@xlhs*))) G40d9@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G40d7@t))) (G2f33@syntax-dispatch G40d7@t '(_ #(each (any any)) . each-any)))) G409e@e) (if (memv G40b1@t '(begin)) ((lambda (G40f1@t) ((lambda (G40f3@ls/false) (if G40f3@ls/false (apply (lambda (G40f5@x*) (G2f90@chi-body* (append G40f5@x* (cdr G408a@e*)) G408b@r G408c@mr G408d@lex* G408e@rhs* G408f@mod** G40af@kwd* G4091@exp* G4092@rib G4093@top?)) G40f3@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G40f1@t))) (G2f33@syntax-dispatch G40f1@t '(_ . each-any)))) G409e@e) (if (memv G40b1@t '(global-macro global-macro!)) (G2f90@chi-body* (cons (G2d2e@add-subst G4092@rib (G2f51@chi-global-macro G40aa@value G409e@e)) (cdr G408a@e*)) G408b@r G408c@mr G408d@lex* G408e@rhs* G408f@mod** G40af@kwd* G4091@exp* G4092@rib G4093@top?) (if (memv G40b1@t '(local-macro local-macro!)) (G2f90@chi-body* (cons (G2d2e@add-subst G4092@rib (G2f4f@chi-local-macro G40aa@value G409e@e)) (cdr G408a@e*)) G408b@r G408c@mr G408d@lex* G408e@rhs* G408f@mod** G40af@kwd* G4091@exp* G4092@rib G4093@top?) (if (memv G40b1@t '(macro macro!)) (G2f90@chi-body* (cons (G2d2e@add-subst G4092@rib (G2f4d@chi-macro G40aa@value G409e@e)) (cdr G408a@e*)) G408b@r G408c@mr G408d@lex* G408e@rhs* G408f@mod** G40af@kwd* G4091@exp* G4092@rib G4093@top?) (if (memv G40b1@t '(module)) (call-with-values (lambda () (G2f8e@chi-internal-module G409e@e G408b@r G408c@mr G408d@lex* G408e@rhs* G408f@mod** G40af@kwd*)) (lambda (G40ff@G40f7 G4100@G40f8 G4101@G40f9 G4102@G40fa G4103@G40fb G4104@G40fc G4105@G40fd G4106@G40fe) ((lambda (G410f@kwd* G4110@mod** G4111@mr G4112@r G4113@m-exp-lab* G4114@m-exp-id* G4115@rhs* G4116@lex*) (begin (vector-for-each (lambda (G411f@id G4120@lab) (G2cf3@extend-rib! G4092@rib G411f@id G4120@lab)) G4114@m-exp-id* G4113@m-exp-lab*) (G2f90@chi-body* (cdr G408a@e*) G4112@r G4111@mr G4116@lex* G4115@rhs* G4110@mod** G410f@kwd* G4091@exp* G4092@rib G4093@top?))) G4106@G40fe G4105@G40fd G4104@G40fc G4103@G40fb G4102@G40fa G4101@G40f9 G4100@G40f8 G40ff@G40f7))) (if (memv G40b1@t '(library)) (begin (G3000@library-expander (G2d58@stx->datum G409e@e)) (G2f90@chi-body* (cdr G408a@e*) G408b@r G408c@mr G408d@lex* G408e@rhs* G408f@mod** G40af@kwd* G4091@exp* G4092@rib G4093@top?)) (if (memv G40b1@t '(export)) ((lambda (G4123@t) ((lambda (G4125@ls/false) (if G4125@ls/false (apply (lambda (G4127@exp-decl*) (G2f90@chi-body* (cdr G408a@e*) G408b@r G408c@mr G408d@lex* G408e@rhs* G408f@mod** G40af@kwd* (append G4127@exp-decl* G4091@exp*) G4092@rib G4093@top?)) G4125@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G4123@t))) (G2f33@syntax-dispatch G4123@t '(_ . each-any)))) G409e@e) (if (memv G40b1@t '(import)) ((lambda () ((lambda (G412a@module-import? G412c@module-import G412e@library-import) (begin (set! G412a@module-import? (lambda (G4176@e) ((lambda (G4178@t) ((lambda (G417a@ls/false) (if (and G417a@ls/false (apply (lambda (G417c@id) (G2d42@id? G417c@id)) G417a@ls/false)) (apply (lambda (G417e@id) '#t) G417a@ls/false) ((lambda (G4180@t) ((lambda (G4182@ls/false) (if G4182@ls/false (apply (lambda (G4184@imp*) '#f) G4182@ls/false) ((lambda (G4186@t) ((lambda (G4188@ls/false) (if G4188@ls/false (apply (lambda () (G301e@syntax-violation '#f '"malformed import form" G4176@e)) G4188@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G4186@t))) (G2f33@syntax-dispatch G4186@t '_))) G4180@t))) (G2f33@syntax-dispatch G4180@t '(_ . each-any)))) G4178@t))) (G2f33@syntax-dispatch G4178@t '(_ any)))) G4176@e))) (set! G412c@module-import (lambda (G4157@e G4158@r) ((lambda (G415b@t) ((lambda (G415d@ls/false) (if (and G415d@ls/false (apply (lambda (G415f@id) (G2d42@id? G415f@id)) G415d@ls/false)) (apply (lambda (G4161@id) (call-with-values (lambda () (G2d6a@syntax-type G4161@id G4158@r)) (lambda (G4166@G4163 G4167@G4164 G4168@G4165) ((lambda (G416c@kwd G416d@value G416e@type) ((lambda (G4172@t) (if (memv G4172@t '($module)) ((lambda (G4174@iface) (values (G2f8c@module-interface-exp-id* G4174@iface G4161@id) (G2f84@module-interface-exp-lab-vec G4174@iface))) G416d@value) (G301e@syntax-violation '#f '"invalid import" G4157@e))) G416e@type)) G4168@G4165 G4167@G4164 G4166@G4163)))) G415d@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G415b@t))) (G2f33@syntax-dispatch G415b@t '(_ any)))) G4157@e))) (set! G412e@library-import (lambda (G413d@e) ((lambda (G413f@t) ((lambda (G4141@ls/false) (if G4141@ls/false (apply (lambda (G4143@ctxt G4144@imp*) (call-with-values (lambda () (G2f9a@parse-import-spec* (G3024@syntax->datum G4144@imp*))) (lambda (G4149@G4147 G414a@G4148) ((lambda (G414d@subst-labels G414e@subst-names) (values (vector-map (lambda (G4151@name) (G2d20@datum->stx G4143@ctxt G4151@name)) G414e@subst-names) G414d@subst-labels)) G414a@G4148 G4149@G4147)))) G4141@ls/false) ((lambda (G4153@t) ((lambda (G4155@ls/false) (if G4155@ls/false (apply (lambda () (G301e@syntax-violation '#f '"invalid import form" G413d@e)) G4155@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G4153@t))) (G2f33@syntax-dispatch G4153@t '_))) G413f@t))) (G2f33@syntax-dispatch G413f@t '(any . each-any)))) G413d@e))) (begin (call-with-values (lambda () (if (G412a@module-import? G409e@e) (G412c@module-import G409e@e G408b@r) (G412e@library-import G409e@e))) (lambda (G4131@G412f G4132@G4130) ((lambda (G4135@lab* G4136@id*) (vector-for-each (lambda (G4139@id G413a@lab) (G2cf3@extend-rib! G4092@rib G4139@id G413a@lab)) G4136@id* G4135@lab*)) G4132@G4130 G4131@G412f))) (G2f90@chi-body* (cdr G408a@e*) G408b@r G408c@mr G408d@lex* G408e@rhs* G408f@mod** G40af@kwd* G4091@exp* G4092@rib G4093@top?)))) '#f '#f '#f))) (if G4093@top? (G2f90@chi-body* (cdr G408a@e*) G408b@r G408c@mr (cons (G2cc2@gen-lexical 'dummy) G408d@lex*) (cons (cons 'top-expr G409e@e) G408e@rhs*) G408f@mod** G40af@kwd* G4091@exp* G4092@rib G4093@top?) (values G408a@e* G408b@r G408c@mr G408d@lex* G408e@rhs* G408f@mod** G40af@kwd* G4091@exp*)))))))))))))) G40ab@type)) (if (G2d42@id? G40a9@kwd) (cons G40a9@kwd G4090@kwd*) G4090@kwd*))) G40a5@G40a2 G40a4@G40a1 G40a3@G40a0)))) (car G408a@e*))))) (set! G2f92@expand-transformer (lambda (G418a@expr G418b@r) ((lambda (G418e@rtc) ((lambda (G4190@expanded-rhs) (begin (for-each ((lambda (G4192@mark-visit) (lambda (G4194@x) (begin (G2b6a@G2a11@invoke-library G4194@x) (G4192@mark-visit G4194@x)))) (G2fa2@vis-collector)) (G418e@rtc)) G4190@expanded-rhs)) ((lambda (G419a@G4196 G419b@G4197 G419c@G4198 G419d@G4199) ((lambda (G41a2@swap) (dynamic-wind G41a2@swap (lambda () (G2f57@chi-expr G418a@expr G418b@r G418b@r)) G41a2@swap)) (lambda () (begin ((lambda (G41a4@t) (begin (G419a@G4196 G419c@G4198) (set! G419c@G4198 G41a4@t))) (G419a@G4196)) ((lambda (G41a6@t) (begin (G419b@G4197 G419d@G4199) (set! G419d@G4199 G41a6@t))) (G419b@G4197)))))) G2fa0@inv-collector G2fa2@vis-collector G418e@rtc (lambda (G41a8@x) (values))))) (G2f9e@make-collector)))) (set! G2f94@parse-exports (lambda (G41aa@exp*) ((letrec ((G41ac@f (lambda (G41ae@exp* G41af@int* G41b0@ext*) (if (null? G41ae@exp*) (begin (if (not (G2d4c@valid-bound-ids? G41b0@ext*)) (G301e@syntax-violation 'export '"invalid exports" (G2f6b@find-dups G41b0@ext*)) (void)) (values (map G3024@syntax->datum G41b0@ext*) G41af@int*)) ((lambda (G41b4@t) ((lambda (G41b6@ls/false) (if G41b6@ls/false (apply (lambda (G41b8@rename G41b9@i* G41ba@e*) (begin (if (not (and (eq? (G3024@syntax->datum G41b8@rename) 'rename) (for-all G2d42@id? G41b9@i*) (for-all G2d42@id? G41ba@e*))) (G301e@syntax-violation 'export '"invalid export specifier" (car G41ae@exp*)) (void)) (G41ac@f (cdr G41ae@exp*) (append G41b9@i* G41af@int*) (append G41ba@e* G41b0@ext*)))) G41b6@ls/false) ((lambda (G41be@t) ((lambda (G41c0@ls/false) (if G41c0@ls/false (apply (lambda (G41c2@ie) (begin (if (not (G2d42@id? G41c2@ie)) (G301e@syntax-violation 'export '"invalid export" G41c2@ie) (void)) (G41ac@f (cdr G41ae@exp*) (cons G41c2@ie G41af@int*) (cons G41c2@ie G41b0@ext*)))) G41c0@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G41be@t))) (G2f33@syntax-dispatch G41be@t 'any))) G41b4@t))) (G2f33@syntax-dispatch G41b4@t '(any . #(each (any any)))))) (car G41ae@exp*)))))) G41ac@f) G41aa@exp* '() '()))) (set! G2f96@parse-library-name (lambda (G41c4@spec) ((lambda (G41c7@parse) (begin (set! G41c7@parse (lambda (G41d2@x) ((lambda (G41d4@t) ((lambda (G41d6@ls/false) (if (and G41d6@ls/false (apply (lambda (G41d8@v*) (for-all (lambda (G41da@x) ((lambda (G41dc@x) (and (integer? G41dc@x) (exact? G41dc@x))) (G3024@syntax->datum G41da@x))) G41d8@v*)) G41d6@ls/false)) (apply (lambda (G41de@v*) (values '() (map G3024@syntax->datum G41de@v*))) G41d6@ls/false) ((lambda (G41e0@t) ((lambda (G41e2@ls/false) (if (and G41e2@ls/false (apply (lambda (G41e4@x G41e5@rest) (symbol? (G3024@syntax->datum G41e4@x))) G41e2@ls/false)) (apply (lambda (G41e8@x G41e9@rest) (call-with-values (lambda () (G41c7@parse G41e9@rest)) (lambda (G41ee@G41ec G41ef@G41ed) ((lambda (G41f2@v* G41f3@x*) (values (cons (G3024@syntax->datum G41e8@x) G41f3@x*) G41f2@v*)) G41ef@G41ed G41ee@G41ec)))) G41e2@ls/false) ((lambda (G41f6@t) ((lambda (G41f8@ls/false) (if G41f8@ls/false (apply (lambda () (values '() '())) G41f8@ls/false) ((lambda (G41fa@t) ((lambda (G41fc@ls/false) (if G41fc@ls/false (apply (lambda () (G301e@syntax-violation '#f '"invalid library name" G41c4@spec)) G41fc@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G41fa@t))) (G2f33@syntax-dispatch G41fa@t '_))) G41f6@t))) (G2f33@syntax-dispatch G41f6@t '()))) G41e0@t))) (G2f33@syntax-dispatch G41e0@t '(any . any)))) G41d4@t))) (G2f33@syntax-dispatch G41d4@t '(each-any)))) G41d2@x))) (call-with-values (lambda () (G41c7@parse G41c4@spec)) (lambda (G41ca@G41c8 G41cb@G41c9) ((lambda (G41ce@ver* G41cf@name*) (begin (if (null? G41cf@name*) (G301e@syntax-violation '#f '"empty library name" G41c4@spec) (void)) (values G41cf@name* G41ce@ver*))) G41cb@G41c9 G41ca@G41c8))))) '#f))) (set! G2f98@parse-library (lambda (G41fe@e) ((lambda (G4200@t) ((lambda (G4202@ls/false) (if (and G4202@ls/false (apply (lambda (G4204@library G4205@name* G4206@export G4207@exp* G4208@import G4209@imp* G420a@b*) (and (eq? (G3024@syntax->datum G4206@export) 'export) (eq? (G3024@syntax->datum G4208@import) 'import) (eq? (G3024@syntax->datum G4204@library) 'library))) G4202@ls/false)) (apply (lambda (G4212@library G4213@name* G4214@export G4215@exp* G4216@import G4217@imp* G4218@b*) (values G4213@name* G4215@exp* G4217@imp* G4218@b*)) G4202@ls/false) ((lambda (G4220@t) ((lambda (G4222@ls/false) (if G4222@ls/false (apply (lambda () (G301e@syntax-violation '#f '"malformed library" G41fe@e)) G4222@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G4220@t))) (G2f33@syntax-dispatch G4220@t '_))) G4200@t))) (G2f33@syntax-dispatch G4200@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G41fe@e))) (set! G2f9a@parse-import-spec* ((lambda () ((lambda (G4225@idsyn? G4227@dup-error G4229@merge-substs G422b@exclude* G422d@find* G422f@rem* G4231@remove-dups G4233@parse-library-name G4235@import-library G4237@get-import G4239@add-imports!) (begin (set! G4225@idsyn? (lambda (G4424@x) (symbol? (G3024@syntax->datum G4424@x)))) (set! G4227@dup-error (lambda (G4422@name) (G301e@syntax-violation 'import '"two imports with different bindings" G4422@name))) (set! G4229@merge-substs (lambda (G4410@s G4411@subst) ((lambda (G4415@insert-to-subst) (begin (set! G4415@insert-to-subst (lambda (G4416@a G4417@subst) ((lambda (G441a@name G441b@label) ((lambda (G441e@t) (if G441e@t ((lambda (G4420@x) (if (eq? (cdr G4420@x) G441b@label) G4417@subst (G4227@dup-error G441a@name))) G441e@t) (cons G4416@a G4417@subst))) (assq G441a@name G4417@subst))) (car G4416@a) (cdr G4416@a)))) (if (null? G4410@s) G4411@subst (G4415@insert-to-subst (car G4410@s) (G4229@merge-substs (cdr G4410@s) G4411@subst))))) '#f))) (set! G422b@exclude* (lambda (G43e6@sym* G43e7@subst) ((lambda (G43eb@exclude) (begin (set! G43eb@exclude (lambda (G4400@sym G4401@subst) (if (null? G4401@subst) (G301e@syntax-violation 'import '"cannot rename unbound identifier" G4400@sym) (if (eq? G4400@sym (caar G4401@subst)) (values (cdar G4401@subst) (cdr G4401@subst)) ((lambda (G4404@a) (call-with-values (lambda () (G43eb@exclude G4400@sym (cdr G4401@subst))) (lambda (G4408@G4406 G4409@G4407) ((lambda (G440c@subst G440d@old) (values G440d@old (cons G4404@a G440c@subst))) G4409@G4407 G4408@G4406)))) (car G4401@subst)))))) (if (null? G43e6@sym*) (values '() G43e7@subst) (call-with-values (lambda () (G43eb@exclude (car G43e6@sym*) G43e7@subst)) (lambda (G43ee@G43ec G43ef@G43ed) ((lambda (G43f2@subst G43f3@old) (call-with-values (lambda () (G422b@exclude* (cdr G43e6@sym*) G43f2@subst)) (lambda (G43f8@G43f6 G43f9@G43f7) ((lambda (G43fc@subst G43fd@old*) (values (cons G43f3@old G43fd@old*) G43fc@subst)) G43f9@G43f7 G43f8@G43f6)))) G43ef@G43ed G43ee@G43ec)))))) '#f))) (set! G422d@find* (lambda (G43de@sym* G43df@subst) (map (lambda (G43e2@x) ((lambda (G43e4@t) (if G43e4@t (cdr G43e4@t) (G301e@syntax-violation 'import '"cannot find identifier" G43e2@x))) (assq G43e2@x G43df@subst))) G43de@sym*))) (set! G422f@rem* (lambda (G43d6@sym* G43d7@subst) ((letrec ((G43da@f (lambda (G43dc@subst) (if (null? G43dc@subst) '() (if (memq (caar G43dc@subst) G43d6@sym*) (G43da@f (cdr G43dc@subst)) (cons (car G43dc@subst) (G43da@f (cdr G43dc@subst)))))))) G43da@f) G43d7@subst))) (set! G4231@remove-dups (lambda (G43d4@ls) (if (null? G43d4@ls) '() (if (memq (car G43d4@ls) (cdr G43d4@ls)) (G4231@remove-dups (cdr G43d4@ls)) (cons (car G43d4@ls) (G4231@remove-dups (cdr G43d4@ls))))))) (set! G4233@parse-library-name (lambda (G42ee@spec) ((lambda (G42f1@subversion? G42f3@subversion-pred G42f5@version-pred) (begin (set! G42f1@subversion? (lambda (G43d0@x) ((lambda (G43d2@x) (and (integer? G43d2@x) (exact? G43d2@x) (>= G43d2@x '0))) (G3024@syntax->datum G43d0@x)))) (set! G42f3@subversion-pred (lambda (G4370@x*) ((lambda (G4372@t) ((lambda (G4374@ls/false) (if (and G4374@ls/false (apply (lambda (G4376@n) (G42f1@subversion? G4376@n)) G4374@ls/false)) (apply (lambda (G4378@n) (lambda (G437a@x) (= G437a@x (G3024@syntax->datum G4378@n)))) G4374@ls/false) ((lambda (G437c@t) ((lambda (G437e@ls/false) (if (and G437e@ls/false (apply (lambda (G4380@p? G4381@sub*) (eq? (G3024@syntax->datum G4380@p?) 'and)) G437e@ls/false)) (apply (lambda (G4384@p? G4385@sub*) ((lambda (G4388@p*) (lambda (G438a@x) (for-all (lambda (G438c@p) (G438c@p G438a@x)) G4388@p*))) (map G42f3@subversion-pred G4385@sub*))) G437e@ls/false) ((lambda (G438e@t) ((lambda (G4390@ls/false) (if (and G4390@ls/false (apply (lambda (G4392@p? G4393@sub*) (eq? (G3024@syntax->datum G4392@p?) 'or)) G4390@ls/false)) (apply (lambda (G4396@p? G4397@sub*) ((lambda (G439a@p*) (lambda (G439c@x) (exists (lambda (G439e@p) (G439e@p G439c@x)) G439a@p*))) (map G42f3@subversion-pred G4397@sub*))) G4390@ls/false) ((lambda (G43a0@t) ((lambda (G43a2@ls/false) (if (and G43a2@ls/false (apply (lambda (G43a4@p? G43a5@sub) (eq? (G3024@syntax->datum G43a4@p?) 'not)) G43a2@ls/false)) (apply (lambda (G43a8@p? G43a9@sub) ((lambda (G43ac@p) (lambda (G43ae@x) (not (G43ac@p G43ae@x)))) (G42f3@subversion-pred G43a9@sub))) G43a2@ls/false) ((lambda (G43b0@t) ((lambda (G43b2@ls/false) (if (and G43b2@ls/false (apply (lambda (G43b4@p? G43b5@n) (and (eq? (G3024@syntax->datum G43b4@p?) '<=) (G42f1@subversion? G43b5@n))) G43b2@ls/false)) (apply (lambda (G43b8@p? G43b9@n) (lambda (G43bc@x) (<= G43bc@x (G3024@syntax->datum G43b9@n)))) G43b2@ls/false) ((lambda (G43be@t) ((lambda (G43c0@ls/false) (if (and G43c0@ls/false (apply (lambda (G43c2@p? G43c3@n) (and (eq? (G3024@syntax->datum G43c2@p?) '>=) (G42f1@subversion? G43c3@n))) G43c0@ls/false)) (apply (lambda (G43c6@p? G43c7@n) (lambda (G43ca@x) (>= G43ca@x (G3024@syntax->datum G43c7@n)))) G43c0@ls/false) ((lambda (G43cc@t) ((lambda (G43ce@ls/false) (if G43ce@ls/false (apply (lambda () (G301e@syntax-violation 'import '"invalid sub-version spec" G42ee@spec G4370@x*)) G43ce@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G43cc@t))) (G2f33@syntax-dispatch G43cc@t '_))) G43be@t))) (G2f33@syntax-dispatch G43be@t '(any any)))) G43b0@t))) (G2f33@syntax-dispatch G43b0@t '(any any)))) G43a0@t))) (G2f33@syntax-dispatch G43a0@t '(any any)))) G438e@t))) (G2f33@syntax-dispatch G438e@t '(any . each-any)))) G437c@t))) (G2f33@syntax-dispatch G437c@t '(any . each-any)))) G4372@t))) (G2f33@syntax-dispatch G4372@t 'any))) G4370@x*))) (set! G42f5@version-pred (lambda (G4320@x*) ((lambda (G4322@t) ((lambda (G4324@ls/false) (if G4324@ls/false (apply (lambda () (lambda (G4326@x) '#t)) G4324@ls/false) ((lambda (G4328@t) ((lambda (G432a@ls/false) (if (and G432a@ls/false (apply (lambda (G432c@c G432d@ver*) (eq? (G3024@syntax->datum G432c@c) 'and)) G432a@ls/false)) (apply (lambda (G4330@c G4331@ver*) ((lambda (G4334@p*) (lambda (G4336@x) (for-all (lambda (G4338@p) (G4338@p G4336@x)) G4334@p*))) (map G42f5@version-pred G4331@ver*))) G432a@ls/false) ((lambda (G433a@t) ((lambda (G433c@ls/false) (if (and G433c@ls/false (apply (lambda (G433e@c G433f@ver*) (eq? (G3024@syntax->datum G433e@c) 'or)) G433c@ls/false)) (apply (lambda (G4342@c G4343@ver*) ((lambda (G4346@p*) (lambda (G4348@x) (exists (lambda (G434a@p) (G434a@p G4348@x)) G4346@p*))) (map G42f5@version-pred G4343@ver*))) G433c@ls/false) ((lambda (G434c@t) ((lambda (G434e@ls/false) (if (and G434e@ls/false (apply (lambda (G4350@c G4351@ver) (eq? (G3024@syntax->datum G4350@c) 'not)) G434e@ls/false)) (apply (lambda (G4354@c G4355@ver) ((lambda (G4358@p) (lambda (G435a@x) (not (G4358@p G435a@x)))) (G42f5@version-pred G4355@ver))) G434e@ls/false) ((lambda (G435c@t) ((lambda (G435e@ls/false) (if G435e@ls/false (apply (lambda (G4360@sub*) ((lambda (G4362@p*) (lambda (G4364@x) ((letrec ((G4366@f (lambda (G4368@p* G4369@x) (if (null? G4368@p*) '#t (if (null? G4369@x) '#f (and ((car G4368@p*) (car G4369@x)) (G4366@f (cdr G4368@p*) (cdr G4369@x)))))))) G4366@f) G4362@p* G4364@x))) (map G42f3@subversion-pred G4360@sub*))) G435e@ls/false) ((lambda (G436c@t) ((lambda (G436e@ls/false) (if G436e@ls/false (apply (lambda () (G301e@syntax-violation 'import '"invalid version spec" G42ee@spec G4320@x*)) G436e@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G436c@t))) (G2f33@syntax-dispatch G436c@t '_))) G435c@t))) (G2f33@syntax-dispatch G435c@t 'each-any))) G434c@t))) (G2f33@syntax-dispatch G434c@t '(any any)))) G433a@t))) (G2f33@syntax-dispatch G433a@t '(any . each-any)))) G4328@t))) (G2f33@syntax-dispatch G4328@t '(any . each-any)))) G4322@t))) (G2f33@syntax-dispatch G4322@t '()))) G4320@x*))) ((letrec ((G42f6@f (lambda (G42f8@x) ((lambda (G42fa@t) ((lambda (G42fc@ls/false) (if G42fc@ls/false (apply (lambda (G42fe@version-spec*) (values '() (G42f5@version-pred G42fe@version-spec*))) G42fc@ls/false) ((lambda (G4300@t) ((lambda (G4302@ls/false) (if (and G4302@ls/false (apply (lambda (G4304@x G4305@x*) (G4225@idsyn? G4304@x)) G4302@ls/false)) (apply (lambda (G4308@x G4309@x*) (call-with-values (lambda () (G42f6@f G4309@x*)) (lambda (G430e@G430c G430f@G430d) ((lambda (G4312@pred G4313@name) (values (cons (G3024@syntax->datum G4308@x) G4313@name) G4312@pred)) G430f@G430d G430e@G430c)))) G4302@ls/false) ((lambda (G4316@t) ((lambda (G4318@ls/false) (if G4318@ls/false (apply (lambda () (values '() (lambda (G431a@x) '#t))) G4318@ls/false) ((lambda (G431c@t) ((lambda (G431e@ls/false) (if G431e@ls/false (apply (lambda () (G301e@syntax-violation '#f '"invalid import spec" G42ee@spec)) G431e@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G431c@t))) (G2f33@syntax-dispatch G431c@t '_))) G4316@t))) (G2f33@syntax-dispatch G4316@t '()))) G4300@t))) (G2f33@syntax-dispatch G4300@t '(any . any)))) G42fa@t))) (G2f33@syntax-dispatch G42fa@t '(each-any)))) G42f8@x)))) G42f6@f) G42ee@spec))) '#f '#f '#f))) (set! G4235@import-library (lambda (G42e0@spec*) (call-with-values (lambda () (G4233@parse-library-name G42e0@spec*)) (lambda (G42e4@G42e2 G42e5@G42e3) ((lambda (G42e8@pred G42e9@name) (begin (if (null? G42e9@name) (G301e@syntax-violation 'import '"empty library name" G42e0@spec*) (void)) ((lambda (G42ec@lib) (begin (if (not G42ec@lib) (G301e@syntax-violation 'import '"cannot find library with required name" G42e9@name) (void)) (if (not (G42e8@pred (G2b3b@G29b3@library-version G42ec@lib))) (G301e@syntax-violation 'import '"library does not satisfy version specification" G42e0@spec* G42ec@lib) (void)) ((G2fa4@imp-collector) G42ec@lib) (G2b3f@G29bb@library-subst G42ec@lib))) (G2b63@G2a03@find-library-by-name G42e9@name)))) G42e5@G42e3 G42e4@G42e2))))) (set! G4237@get-import (lambda (G4252@spec) ((lambda (G4254@t) ((lambda (G4256@ls/false) (if (and G4256@ls/false (apply (lambda (G4258@x G4259@x*) (not (memq (G3024@syntax->datum G4258@x) '(for rename except only prefix library)))) G4256@ls/false)) (apply (lambda (G425c@x G425d@x*) (G4235@import-library (cons G425c@x G425d@x*))) G4256@ls/false) ((lambda (G4260@t) ((lambda (G4262@ls/false) (if (and G4262@ls/false (apply (lambda (G4264@rename G4265@isp G4266@old* G4267@new*) (and (eq? (G3024@syntax->datum G4264@rename) 'rename) (for-all G4225@idsyn? G4266@old*) (for-all G4225@idsyn? G4267@new*))) G4262@ls/false)) (apply (lambda (G426c@rename G426d@isp G426e@old* G426f@new*) ((lambda (G4274@subst G4275@old* G4276@new*) ((lambda (G427a@old-label*) ((lambda (G427c@subst) (G4229@merge-substs (map cons G4276@new* G427a@old-label*) G427c@subst)) (G422f@rem* G4275@old* G4274@subst))) (G422d@find* G4275@old* G4274@subst))) (G4237@get-import G426d@isp) (map G3024@syntax->datum G426e@old*) (map G3024@syntax->datum G426f@new*))) G4262@ls/false) ((lambda (G427e@t) ((lambda (G4280@ls/false) (if (and G4280@ls/false (apply (lambda (G4282@except G4283@isp G4284@sym*) (and (eq? (G3024@syntax->datum G4282@except) 'except) (for-all G4225@idsyn? G4284@sym*))) G4280@ls/false)) (apply (lambda (G4288@except G4289@isp G428a@sym*) ((lambda (G428e@subst) (G422f@rem* (map G3024@syntax->datum G428a@sym*) G428e@subst)) (G4237@get-import G4289@isp))) G4280@ls/false) ((lambda (G4290@t) ((lambda (G4292@ls/false) (if (and G4292@ls/false (apply (lambda (G4294@only G4295@isp G4296@sym*) (and (eq? (G3024@syntax->datum G4294@only) 'only) (for-all G4225@idsyn? G4296@sym*))) G4292@ls/false)) (apply (lambda (G429a@only G429b@isp G429c@sym*) ((lambda (G42a0@subst G42a1@sym*) ((lambda (G42a4@sym*) ((lambda (G42a6@lab*) (map cons G42a4@sym* G42a6@lab*)) (G422d@find* G42a4@sym* G42a0@subst))) (G4231@remove-dups G42a1@sym*))) (G4237@get-import G429b@isp) (map G3024@syntax->datum G429c@sym*))) G4292@ls/false) ((lambda (G42a8@t) ((lambda (G42aa@ls/false) (if (and G42aa@ls/false (apply (lambda (G42ac@prefix G42ad@isp G42ae@p) (and (eq? (G3024@syntax->datum G42ac@prefix) 'prefix) (G4225@idsyn? G42ae@p))) G42aa@ls/false)) (apply (lambda (G42b2@prefix G42b3@isp G42b4@p) ((lambda (G42b8@subst G42b9@prefix) (map (lambda (G42bc@x) (cons (string->symbol (string-append G42b9@prefix (symbol->string (car G42bc@x)))) (cdr G42bc@x))) G42b8@subst)) (G4237@get-import G42b3@isp) (symbol->string (G3024@syntax->datum G42b4@p)))) G42aa@ls/false) ((lambda (G42be@t) ((lambda (G42c0@ls/false) (if (and G42c0@ls/false (apply (lambda (G42c2@library G42c3@spec*) (eq? (G3024@syntax->datum G42c2@library) 'library)) G42c0@ls/false)) (apply (lambda (G42c6@library G42c7@spec*) (G4235@import-library G42c7@spec*)) G42c0@ls/false) ((lambda (G42ca@t) ((lambda (G42cc@ls/false) (if (and G42cc@ls/false (apply (lambda (G42ce@for G42cf@isp G42d0@rest) (eq? (G3024@syntax->datum G42ce@for) 'for)) G42cc@ls/false)) (apply (lambda (G42d4@for G42d5@isp G42d6@rest) (G4237@get-import G42d5@isp)) G42cc@ls/false) ((lambda (G42da@t) ((lambda (G42dc@ls/false) (if G42dc@ls/false (apply (lambda (G42de@spec) (G301e@syntax-violation 'import '"invalid import spec" G42de@spec)) G42dc@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G42da@t))) (G2f33@syntax-dispatch G42da@t 'any))) G42ca@t))) (G2f33@syntax-dispatch G42ca@t '(any any . any)))) G42be@t))) (G2f33@syntax-dispatch G42be@t '(any each-any)))) G42a8@t))) (G2f33@syntax-dispatch G42a8@t '(any any any)))) G4290@t))) (G2f33@syntax-dispatch G4290@t '(any any . each-any)))) G427e@t))) (G2f33@syntax-dispatch G427e@t '(any any . each-any)))) G4260@t))) (G2f33@syntax-dispatch G4260@t '(any any . #(each (any any)))))) G4254@t))) (G2f33@syntax-dispatch G4254@t '(any . each-any)))) G4252@spec))) (set! G4239@add-imports! (lambda (G4242@imp G4243@h) ((lambda (G4246@subst) (for-each (lambda (G4248@x) ((lambda (G424a@name G424b@label) ((lambda (G424e@t) (if G424e@t ((lambda (G4250@l) (if (not (eq? G4250@l G424b@label)) (G4227@dup-error G424a@name) (void))) G424e@t) (hashtable-set! G4243@h G424a@name G424b@label))) (hashtable-ref G4243@h G424a@name '#f))) (car G4248@x) (cdr G4248@x))) G4246@subst)) (G4237@get-import G4242@imp)))) (lambda (G423a@imp*) ((letrec ((G423c@f (lambda (G423e@imp* G423f@h) (if (null? G423e@imp*) (hashtable-entries G423f@h) (begin (G4239@add-imports! (car G423e@imp*) G423f@h) (G423c@f (cdr G423e@imp*) G423f@h)))))) G423c@f) G423a@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f9c@make-top-rib (lambda (G4426@names G4427@labels) ((lambda (G442a@rib) (begin (vector-for-each (lambda (G442c@name G442d@label) (begin (if (not (symbol? G442c@name)) (error 'make-top-rib '"BUG: not a symbol" G442c@name) (void)) (G2cf5@extend-rib/nc! G442a@rib (G2d0c@make-stx G442c@name G2cbe@top-mark* '() '()) G442d@label))) G4426@names G4427@labels) G442a@rib)) (G2cf1@make-empty-rib)))) (set! G2f9e@make-collector (lambda () ((lambda (G4430@ls) (lambda G4434 ((lambda (G4435) (if (= G4435 '0) (apply (lambda () G4430@ls) G4434) (if (= G4435 '1) (apply (lambda (G4432@x) (set! G4430@ls (G2cb7@set-cons G4432@x G4430@ls))) G4434) (error 'apply '"invalid arg count")))) (length G4434)))) '()))) (set! G2fa0@inv-collector (G28f6@G2824@make-parameter (lambda G4436@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4438@x) (begin (if (not (procedure? G4438@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4438@x) (void)) G4438@x)))) (set! G2fa2@vis-collector (G28f6@G2824@make-parameter (lambda G443a@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G443c@x) (begin (if (not (procedure? G443c@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G443c@x) (void)) G443c@x)))) (set! G2fa4@imp-collector (G28f6@G2824@make-parameter (lambda G443e@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4440@x) (begin (if (not (procedure? G4440@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4440@x) (void)) G4440@x)))) (set! G2fa6@chi-library-internal (lambda (G4442@e* G4443@rib G4444@top?) (call-with-values (lambda () (G2f90@chi-body* G4442@e* '() '() '() '() '() '() '() G4443@rib G4444@top?)) (lambda (G4450@G4448 G4451@G4449 G4452@G444a G4453@G444b G4454@G444c G4455@G444d G4456@G444e G4457@G444f) ((lambda (G4460@exp* G4461@_kwd* G4462@mod** G4463@rhs* G4464@lex* G4465@mr G4466@r G4467@e*) (values (append (apply append (reverse G4462@mod**)) G4467@e*) G4466@r G4465@mr (reverse G4464@lex*) (reverse G4463@rhs*) G4460@exp*)) G4457@G444f G4456@G444e G4455@G444d G4454@G444c G4453@G444b G4452@G444a G4451@G4449 G4450@G4448))))) (set! G2fa8@chi-interaction-expr (lambda (G4470@e G4471@rib G4472@r) (call-with-values (lambda () (G2f90@chi-body* (list G4470@e) G4472@r G4472@r '() '() '() '() '() G4471@rib '#t)) (lambda (G447e@G4476 G447f@G4477 G4480@G4478 G4481@G4479 G4482@G447a G4483@G447b G4484@G447c G4485@G447d) ((lambda (G448e@_exp* G448f@_kwd* G4490@mod** G4491@rhs* G4492@lex* G4493@mr G4494@r G4495@e*) ((lambda (G449e@e*) ((lambda (G44a0@e) (values G44a0@e G4494@r)) (if (null? G449e@e*) (G2ca4@G2c16@build-void) (if (null? (cdr G449e@e*)) (car G449e@e*) (G2ca3@G2c14@build-sequence '#f G449e@e*))))) (G2f65@expand-interaction-rhs*/init* (reverse G4492@lex*) (reverse G4491@rhs*) (append (apply append (reverse G4490@mod**)) G4495@e*) G4494@r G4493@mr))) G4485@G447d G4484@G447c G4483@G447b G4482@G447a G4481@G4479 G4480@G4478 G447f@G4477 G447e@G4476))))) (set! G2faa@library-body-expander (lambda (G44a2@name G44a3@main-exp* G44a4@imp* G44a5@b* G44a6@top?) ((lambda (G44ad@itc) (begin (set! G44ad@itc (G2f9e@make-collector)) ((lambda (G44b2@G44ae G44b3@G44af G44b4@G44b0 G44b5@G44b1) ((lambda (G44ba@swap) (dynamic-wind G44ba@swap (lambda () (call-with-values (lambda () (G2f9a@parse-import-spec* G44a4@imp*)) (lambda (G44be@G44bc G44bf@G44bd) ((lambda (G44c2@subst-labels G44c3@subst-names) ((lambda (G44c6@rib) ((lambda (G44c9@wrap) (begin (set! G44c9@wrap (lambda (G4535@x) (G2d0c@make-stx G4535@x G2cbe@top-mark* (list G44c6@rib) '()))) ((lambda (G44ca@b* G44cb@main-exp* G44cc@rtc G44cd@vtc) ((lambda (G44d6@G44d2 G44d7@G44d3 G44d8@G44d4 G44d9@G44d5) ((lambda (G44de@swap) (dynamic-wind G44de@swap (lambda () (call-with-values (lambda () (G2fa6@chi-library-internal G44ca@b* G44c6@rib G44a6@top?)) (lambda (G44e6@G44e0 G44e7@G44e1 G44e8@G44e2 G44e9@G44e3 G44ea@G44e4 G44eb@G44e5) ((lambda (G44f2@internal-exp* G44f3@rhs* G44f4@lex* G44f5@mr G44f6@r G44f7@init*) (call-with-values (lambda () (G2f94@parse-exports (append G44cb@main-exp* G44f2@internal-exp*))) (lambda (G4500@G44fe G4501@G44ff) ((lambda (G4504@exp-id* G4505@exp-name*) (begin (G2cf9@seal-rib! G44c6@rib) ((lambda (G4508@init*) ((lambda (G450a@rhs*) ((lambda () (begin (G2cfb@unseal-rib! G44c6@rib) ((lambda (G450c@loc* G450d@export-subst) ((lambda (G4511@errstr) (begin (set! G4511@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G300a@make-export-env/macros G44f4@lex* G450c@loc* G44f6@r)) (lambda (G4515@G4512 G4516@G4513 G4517@G4514) ((lambda (G451b@macro* G451c@global* G451d@export-env) (begin (for-each (lambda (G4521@s) ((lambda (G4523@name G4524@label) ((lambda (G4527@p) (if G4527@p ((lambda (G4529@b) ((lambda (G452b@type) (if (eq? G452b@type 'mutable) (G301e@syntax-violation 'export G4511@errstr G4523@name) (void))) (car G4529@b))) (cdr G4527@p)) (void))) (assq G4524@label G451d@export-env))) (car G4521@s) (cdr G4521@s))) G450d@export-subst) ((lambda (G452d@invoke-body G452e@invoke-definitions) (values (G44ad@itc) (G44cc@rtc) (G44cd@vtc) (G2ca3@G2c14@build-sequence '#f (append G452e@invoke-definitions (list G452d@invoke-body))) G451b@macro* G450d@export-subst G451d@export-env)) (G2ca6@G2c1a@build-letrec* '#f G44f4@lex* G450a@rhs* (G3006@build-exports G451c@global* G4508@init*)) (map G2c9f@G2b71@build-global-define (map cdr G451c@global*))))) G4517@G4514 G4516@G4513 G4515@G4512))))) '#f)) (map G2cc4@gen-global G44f4@lex*) (G3008@make-export-subst G4505@exp-name* G4504@exp-id*)))))) (G2f67@chi-rhs* G44f3@rhs* G44f6@r G44f5@mr))) (G2f53@chi-expr* G44f7@init* G44f6@r G44f5@mr)))) G4501@G44ff G4500@G44fe)))) G44eb@G44e5 G44ea@G44e4 G44e9@G44e3 G44e8@G44e2 G44e7@G44e1 G44e6@G44e0)))) G44de@swap)) (lambda () (begin ((lambda (G4531@t) (begin (G44d6@G44d2 G44d8@G44d4) (set! G44d8@G44d4 G4531@t))) (G44d6@G44d2)) ((lambda (G4533@t) (begin (G44d7@G44d3 G44d9@G44d5) (set! G44d9@G44d5 G4533@t))) (G44d7@G44d3)))))) G2fa0@inv-collector G2fa2@vis-collector G44cc@rtc G44cd@vtc)) (map G44c9@wrap G44a5@b*) (map G44c9@wrap G44a3@main-exp*) (G2f9e@make-collector) (G2f9e@make-collector)))) '#f)) (G2f9c@make-top-rib G44c3@subst-names G44c2@subst-labels))) G44bf@G44bd G44be@G44bc)))) G44ba@swap)) (lambda () (begin ((lambda (G4537@t) (begin (G44b2@G44ae G44b4@G44b0) (set! G44b4@G44b0 G4537@t))) (G44b2@G44ae)) ((lambda (G4539@t) (begin (G44b3@G44af G44b5@G44b1) (set! G44b5@G44b1 G4539@t))) (G44b3@G44af)))))) G2fa4@imp-collector G302c@top-level-context G44ad@itc '#f))) '#f))) (set! G2fac@core-library-expander (lambda (G453b@e G453c@verify-name) (call-with-values (lambda () (G2f98@parse-library G453b@e)) (lambda (G4543@G453f G4544@G4540 G4545@G4541 G4546@G4542) ((lambda (G454b@b* G454c@imp* G454d@exp* G454e@name*) (call-with-values (lambda () (G2f96@parse-library-name G454e@name*)) (lambda (G4555@G4553 G4556@G4554) ((lambda (G4559@ver G455a@name) (begin (G453c@verify-name G455a@name) (call-with-values (lambda () (G2faa@library-body-expander G455a@name G454d@exp* G454c@imp* G454b@b* '#f)) (lambda (G4564@G455d G4565@G455e G4566@G455f G4567@G4560 G4568@G4561 G4569@G4562 G456a@G4563) ((lambda (G4572@export-env G4573@export-subst G4574@visit-code G4575@invoke-code G4576@visit-req* G4577@invoke-req* G4578@imp*) (values G455a@name G4559@ver G4578@imp* G4577@invoke-req* G4576@visit-req* G4575@invoke-code G4574@visit-code G4573@export-subst G4572@export-env)) G456a@G4563 G4569@G4562 G4568@G4561 G4567@G4560 G4566@G455f G4565@G455e G4564@G455d))))) G4556@G4554 G4555@G4553)))) G4546@G4542 G4545@G4541 G4544@G4540 G4543@G453f))))) (set! G2fae@parse-top-level-program (lambda (G4580@e*) ((lambda (G4582@t) ((lambda (G4584@ls/false) (if (and G4584@ls/false (apply (lambda (G4586@import G4587@imp* G4588@b*) (eq? (G3024@syntax->datum G4586@import) 'import)) G4584@ls/false)) (apply (lambda (G458c@import G458d@imp* G458e@b*) (values G458d@imp* G458e@b*)) G4584@ls/false) ((lambda (G4592@t) ((lambda (G4594@ls/false) (if (and G4594@ls/false (apply (lambda (G4596@import G4597@x G4598@y) (eq? (G3024@syntax->datum G4596@import) 'import)) G4594@ls/false)) (apply (lambda (G459c@import G459d@x G459e@y) (G301e@syntax-violation 'expander '"invalid syntax of top-level program" (G2d3c@syntax-car G4580@e*))) G4594@ls/false) ((lambda (G45a2@t) ((lambda (G45a4@ls/false) (if G45a4@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45a4@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G45a2@t))) (G2f33@syntax-dispatch G45a2@t '_))) G4592@t))) (G2f33@syntax-dispatch G4592@t '((any . any) . any)))) G4582@t))) (G2f33@syntax-dispatch G4582@t '((any . each-any) . each-any)))) G4580@e*))) (set! G2fb0@top-level-expander (lambda (G45a6@e*) (call-with-values (lambda () (G2fae@parse-top-level-program G45a6@e*)) (lambda (G45aa@G45a8 G45ab@G45a9) ((lambda (G45ae@b* G45af@imp*) (call-with-values (lambda () (G2faa@library-body-expander '() '() G45af@imp* G45ae@b* '#t)) (lambda (G45b9@G45b2 G45ba@G45b3 G45bb@G45b4 G45bc@G45b5 G45bd@G45b6 G45be@G45b7 G45bf@G45b8) ((lambda (G45c7@export-env G45c8@export-subst G45c9@visit-code G45ca@invoke-code G45cb@visit-req* G45cc@invoke-req* G45cd@imp*) (values G45cc@invoke-req* G45ca@invoke-code)) G45bf@G45b8 G45be@G45b7 G45bd@G45b6 G45bc@G45b5 G45bb@G45b4 G45ba@G45b3 G45b9@G45b2)))) G45ab@G45a9 G45aa@G45a8))))) (set! G2fb6@G2fb1 (make-record-type-descriptor 'env '#f 'G2fb4 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fb8@G2fb3 '#f) (set! G2fba@G2fb2 (make-record-constructor-descriptor G2fb6@G2fb1 '#f G2fb8@G2fb3)) (set! G2fbd@env? (record-predicate G2fb6@G2fb1)) (set! G2fbf@make-env (record-constructor G2fba@G2fb2)) (set! G2fc1@env-names (record-accessor G2fb6@G2fb1 '0)) (set! G2fc3@env-labels (record-accessor G2fb6@G2fb1 '1)) (set! G2fc5@env-itc (record-accessor G2fb6@G2fb1 '2)) (set! G2fc7@set-env-names! (record-mutator G2fb6@G2fb1 '0)) (set! G2fc9@set-env-labels! (record-mutator G2fb6@G2fb1 '1)) (set! G2fcb@set-env-itc! (record-mutator G2fb6@G2fb1 '2)) (set! G2fcd@rp (G28f3@G281e@make-record-printer 'env (lambda (G45d5@x G45d6@p G45d7@wr) (display '"#<environment>" G45d6@p)))) (set! G2fd3@G2fce (make-record-type-descriptor 'interaction-env '#f 'G2fd1 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2fd5@G2fd0 '#f) (set! G2fd7@G2fcf (make-record-constructor-descriptor G2fd3@G2fce '#f G2fd5@G2fd0)) (set! G2fda@interaction-env? (record-predicate G2fd3@G2fce)) (set! G2fdc@make-interaction-env (record-constructor G2fd7@G2fcf)) (set! G2fde@interaction-env-rib (record-accessor G2fd3@G2fce '0)) (set! G2fe0@interaction-env-r (record-accessor G2fd3@G2fce '1)) (set! G2fe2@interaction-env-locs (record-accessor G2fd3@G2fce '2)) (set! G2fe4@set-interaction-env-rib! (record-mutator G2fd3@G2fce '0)) (set! G2fe6@set-interaction-env-r! (record-mutator G2fd3@G2fce '1)) (set! G2fe8@set-interaction-env-locs! (record-mutator G2fd3@G2fce '2)) (set! G2fea@rp (G28f3@G281e@make-record-printer 'interaction-env (lambda (G45db@x G45dc@p G45dd@wr) (display '"#<environment>" G45dc@p)))) (set! G2fec@interaction-environment-symbols (lambda () (G2ff4@environment-symbols (G302a@interaction-environment)))) (set! G2fee@environment-bindings (lambda (G45e1@e) (vector->list (vector-map (lambda (G45e3@name G45e4@label) (G2ff0@parse-binding (cons G45e3@name (G2b69@G2a0f@imported-label->binding G45e4@label)))) (G2fc1@env-names G45e1@e) (G2fc3@env-labels G45e1@e))))) (set! G2ff0@parse-binding (lambda (G45e7@b) (cons (car G45e7@b) ((lambda (G45e9@t) (if (memv G45e9@t '(core-prim global)) 'procedure (if (memv G45e9@t '(core-macro macro global-macro)) 'syntax (if (memv G45e9@t '($core-rtd)) 'record (if (eq? (car G45e7@b) (cadr G45e7@b)) 'syntax 'unknown))))) (cadr G45e7@b))))) (set! G2ff2@environment? (lambda (G45eb@x) (or (G2fbd@env? G45eb@x) (G2fda@interaction-env? G45eb@x)))) (set! G2ff4@environment-symbols (lambda (G45ed@x) (if (G2fbd@env? G45ed@x) (vector->list (G2fc1@env-names G45ed@x)) (if (G2fda@interaction-env? G45ed@x) (map values (G2cdd@rib-sym* (G2fde@interaction-env-rib G45ed@x))) (assertion-violation 'environment-symbols '"not an environment" G45ed@x))))) (set! G2ff6@environment (lambda G45ef@imp* ((lambda (G45f1@itc) ((lambda (G45f5@G45f3 G45f6@G45f4) ((lambda (G45f9@swap) (dynamic-wind G45f9@swap (lambda () (call-with-values (lambda () (G2f9a@parse-import-spec* G45ef@imp*)) (lambda (G45fd@G45fb G45fe@G45fc) ((lambda (G4601@subst-labels G4602@subst-names) (G2fbf@make-env G4602@subst-names G4601@subst-labels G45f1@itc)) G45fe@G45fc G45fd@G45fb)))) G45f9@swap)) (lambda () ((lambda (G4605@t) (begin (G45f5@G45f3 G45f6@G45f4) (set! G45f6@G45f4 G4605@t))) (G45f5@G45f3))))) G2fa4@imp-collector G45f1@itc)) (G2f9e@make-collector)))) (set! G2ff8@null-environment (lambda (G4607@n) (begin (if (not (eqv? G4607@n '5)) (assertion-violation 'null-environment '"not 5" G4607@n) (void)) (G2ff6@environment '(psyntax null-environment-5))))) (set! G2ffa@scheme-report-environment (lambda (G4609@n) (begin (if (not (eqv? G4609@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4609@n) (void)) (G2ff6@environment '(psyntax scheme-report-environment-5))))) (set! G2ffc@expand (lambda (G460b@x G460c@env) (if (G2fbd@env? G460c@env) ((lambda (G460f@rib) ((lambda (G4611@x G4612@itc G4613@rtc G4614@vtc) ((lambda (G4619@x) (begin (G2cf9@seal-rib! G460f@rib) (values G4619@x (G4613@rtc)))) ((lambda (G4623@G461b G4624@G461c G4625@G461d G4626@G461e G4627@G461f G4628@G4620 G4629@G4621 G462a@G4622) ((lambda (G4633@swap) (dynamic-wind G4633@swap (lambda () (G2f57@chi-expr G4611@x '() '())) G4633@swap)) (lambda () (begin ((lambda (G4635@t) (begin (G4623@G461b G4627@G461f) (set! G4627@G461f G4635@t))) (G4623@G461b)) ((lambda (G4637@t) (begin (G4624@G461c G4628@G4620) (set! G4628@G4620 G4637@t))) (G4624@G461c)) ((lambda (G4639@t) (begin (G4625@G461d G4629@G4621) (set! G4629@G4621 G4639@t))) (G4625@G461d)) ((lambda (G463b@t) (begin (G4626@G461e G462a@G4622) (set! G462a@G4622 G463b@t))) (G4626@G461e)))))) G302c@top-level-context G2fa0@inv-collector G2fa2@vis-collector G2fa4@imp-collector '#f G4613@rtc G4614@vtc G4612@itc))) (G2d0c@make-stx G460b@x G2cbe@top-mark* (list G460f@rib) '()) (G2fc5@env-itc G460c@env) (G2f9e@make-collector) (G2f9e@make-collector))) (G2f9c@make-top-rib (G2fc1@env-names G460c@env) (G2fc3@env-labels G460c@env))) (if (G2fda@interaction-env? G460c@env) ((lambda (G463d@rib G463e@r G463f@rtc) ((lambda (G4643@x) (call-with-values (lambda () ((lambda (G464f@G4647 G4650@G4648 G4651@G4649 G4652@G464a G4653@G464b G4654@G464c G4655@G464d G4656@G464e) ((lambda (G465f@swap) (dynamic-wind G465f@swap (lambda () (G2fa8@chi-interaction-expr G4643@x G463d@rib G463e@r)) G465f@swap)) (lambda () (begin ((lambda (G4661@t) (begin (G464f@G4647 G4653@G464b) (set! G4653@G464b G4661@t))) (G464f@G4647)) ((lambda (G4663@t) (begin (G4650@G4648 G4654@G464c) (set! G4654@G464c G4663@t))) (G4650@G4648)) ((lambda (G4665@t) (begin (G4651@G4649 G4655@G464d) (set! G4655@G464d G4665@t))) (G4651@G4649)) ((lambda (G4667@t) (begin (G4652@G464a G4656@G464e) (set! G4656@G464e G4667@t))) (G4652@G464a)))))) G302c@top-level-context G2fa0@inv-collector G2fa2@vis-collector G2fa4@imp-collector G460c@env G463f@rtc (G2f9e@make-collector) (G2f9e@make-collector))) (lambda (G4669@G4645 G466a@G4646) ((lambda (G466d@r^ G466e@e) (begin (G2fe6@set-interaction-env-r! G460c@env G466d@r^) (values G466e@e (G463f@rtc)))) G466a@G4646 G4669@G4645)))) (G2d0c@make-stx G460b@x G2cbe@top-mark* (list G463d@rib) '()))) (G2fde@interaction-env-rib G460c@env) (G2fe0@interaction-env-r G460c@env) (G2f9e@make-collector)) (assertion-violation 'expand '"not an environment" G460c@env))))) (set! G2ffe@eval (lambda (G4671@x G4672@env) (begin (if (not (G2ff2@environment? G4672@env)) (error 'eval '"not an environment" G4672@env) (void)) (call-with-values (lambda () (G2ffc@expand G4671@x G4672@env)) (lambda (G4677@G4675 G4678@G4676) ((lambda (G467b@invoke-req* G467c@x) (begin (for-each G2b6a@G2a11@invoke-library G467b@invoke-req*) (eval-core (G294a@G2902@expanded->core G467c@x)))) G4678@G4676 G4677@G4675)))))) (set! G3000@library-expander (lambda G46e4 ((lambda (G46e5) (if (= G46e5 '3) (apply (lambda (G467f@x G4680@filename G4681@verify-name) ((lambda (G4686@build-visit-code G4688@visit!) (begin (set! G4686@build-visit-code (lambda (G46d2@macro*) (if (null? G46d2@macro*) (G2ca4@G2c16@build-void) (G2ca3@G2c14@build-sequence '#f (map (lambda (G46d4@x) ((lambda (G46d6@loc G46d7@src) (list 'set! G46d6@loc G46d7@src)) (car G46d4@x) (cddr G46d4@x))) G46d2@macro*))))) (set! G4688@visit! (lambda (G46ca@macro*) (for-each (lambda (G46cc@x) ((lambda (G46ce@loc G46cf@proc) (set-symbol-value! G46ce@loc G46cf@proc)) (car G46cc@x) (cadr G46cc@x))) G46ca@macro*))) (call-with-values (lambda () (G2fac@core-library-expander G467f@x G4681@verify-name)) (lambda (G4692@G4689 G4693@G468a G4694@G468b G4695@G468c G4696@G468d G4697@G468e G4698@G468f G4699@G4690 G469a@G4691) ((lambda (G46a4@export-env G46a5@export-subst G46a6@macro* G46a7@invoke-code G46a8@vis* G46a9@inv* G46aa@imp* G46ab@ver G46ac@name) ((lambda (G46b6@id G46b7@name G46b8@ver G46b9@imp* G46ba@vis* G46bb@inv* G46bc@visit-proc G46bd@invoke-proc G46be@visit-code G46bf@invoke-code) (begin (G2b68@G2a0d@install-library G46b6@id G46b7@name G46b8@ver G46b9@imp* G46ba@vis* G46bb@inv* G46a5@export-subst G46a4@export-env G46bc@visit-proc G46bd@invoke-proc G46be@visit-code G46bf@invoke-code '#t G4680@filename) (values G46b6@id G46b7@name G46b8@ver G46b9@imp* G46ba@vis* G46bb@inv* G46bf@invoke-code G46be@visit-code G46a5@export-subst G46a4@export-env))) (gensym) G46ac@name G46ab@ver (map G2b6e@G2a19@library-spec G46aa@imp*) (map G2b6e@G2a19@library-spec G46a8@vis*) (map G2b6e@G2a19@library-spec G46a9@inv*) (lambda () (G4688@visit! G46a6@macro*)) (lambda () (eval-core (G294a@G2902@expanded->core G46a7@invoke-code))) (G4686@build-visit-code G46a6@macro*) G46a7@invoke-code)) G469a@G4691 G4699@G4690 G4698@G468f G4697@G468e G4696@G468d G4695@G468c G4694@G468b G4693@G468a G4692@G4689))))) '#f '#f)) G46e4) (if (= G46e5 '2) (apply (lambda (G46da@x G46db@filename) (G3000@library-expander G46da@x G46db@filename (lambda (G46de@x) (values)))) G46e4) (if (= G46e5 '1) (apply (lambda (G46e0@x) (G3000@library-expander G46e0@x '#f (lambda (G46e2@x) (values)))) G46e4) (error 'apply '"invalid arg count"))))) (length G46e4)))) (set! G3002@boot-library-expand (lambda (G46e6@x) (call-with-values (lambda () (G3000@library-expander G46e6@x)) (lambda (G46f2@G46e8 G46f3@G46e9 G46f4@G46ea G46f5@G46eb G46f6@G46ec G46f7@G46ed G46f8@G46ee G46f9@G46ef G46fa@G46f0 G46fb@G46f1) ((lambda (G4706@export-env G4707@export-subst G4708@visit-code G4709@invoke-code G470a@inv* G470b@vis* G470c@imp* G470d@ver G470e@name G470f@id) (values G470e@name G4709@invoke-code G4707@export-subst G4706@export-env)) G46fb@G46f1 G46fa@G46f0 G46f9@G46ef G46f8@G46ee G46f7@G46ed G46f6@G46ec G46f5@G46eb G46f4@G46ea G46f3@G46e9 G46f2@G46e8))))) (set! G3004@rev-map-append (lambda (G471a@f G471b@ls G471c@ac) (if (null? G471b@ls) G471c@ac (G3004@rev-map-append G471a@f (cdr G471b@ls) (cons (G471a@f (car G471b@ls)) G471c@ac))))) (set! G3006@build-exports (lambda (G4720@lex*+loc* G4721@init*) (G2ca3@G2c14@build-sequence '#f (cons (G2ca4@G2c16@build-void) (G3004@rev-map-append (lambda (G4724@x) (list 'set! (cdr G4724@x) (car G4724@x))) G4720@lex*+loc* G4721@init*))))) (set! G3008@make-export-subst (lambda (G4726@name* G4727@id*) (map (lambda (G472a@name G472b@id) ((lambda (G472e@label) (begin (if (not G472e@label) (G301e@syntax-violation '#f '"cannot export unbound identifier" G472b@id) (void)) (cons G472a@name G472e@label))) (G2d5c@id->label G472b@id))) G4726@name* G4727@id*))) (set! G300a@make-export-env/macros (lambda (G4730@lex* G4731@loc* G4732@r) ((lambda (G4737@lookup) (begin (set! G4737@lookup (lambda (G4754@x) ((letrec ((G4756@f (lambda (G4758@x G4759@lex* G475a@loc*) (if (pair? G4759@lex*) (if (eq? G4758@x (car G4759@lex*)) (car G475a@loc*) (G4756@f G4758@x (cdr G4759@lex*) (cdr G475a@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4756@f) G4754@x G4730@lex* G4731@loc*))) ((letrec ((G4738@f (lambda (G473a@r G473b@env G473c@global* G473d@macro*) (if (null? G473a@r) (values G473b@env G473c@global* G473d@macro*) ((lambda (G4742@x) ((lambda (G4744@label G4745@b) ((lambda (G4748@t) (if (memv G4748@t '(lexical)) ((lambda (G474a@v) ((lambda (G474c@loc G474d@type) (G4738@f (cdr G473a@r) (cons (cons* G4744@label G474d@type G474c@loc) G473b@env) (cons (cons (G2ebf@lexical-var G474a@v) G474c@loc) G473c@global*) G473d@macro*)) (G4737@lookup (G2ebf@lexical-var G474a@v)) (if (G2ec1@lexical-mutable? G474a@v) 'mutable 'global))) (G2d66@binding-value G4745@b)) (if (memv G4748@t '(local-macro)) ((lambda (G4750@loc) (G4738@f (cdr G473a@r) (cons (cons* G4744@label 'global-macro G4750@loc) G473b@env) G473c@global* (cons (cons G4750@loc (G2d66@binding-value G4745@b)) G473d@macro*))) (gensym)) (if (memv G4748@t '(local-macro!)) ((lambda (G4752@loc) (G4738@f (cdr G473a@r) (cons (cons* G4744@label 'global-macro! G4752@loc) G473b@env) G473c@global* (cons (cons G4752@loc (G2d66@binding-value G4745@b)) G473d@macro*))) (gensym)) (if (memv G4748@t '($rtd $module)) (G4738@f (cdr G473a@r) (cons G4742@x G473b@env) G473c@global* G473d@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d64@binding-type G4745@b) (G2d66@binding-value G4745@b))))))) (G2d64@binding-type G4745@b))) (car G4742@x) (cdr G4742@x))) (car G473a@r)))))) G4738@f) G4732@r '() '() '()))) '#f))) (set! G300c@generate-temporaries (lambda (G475e@ls) ((lambda (G4760@t) ((lambda (G4762@ls/false) (if G4762@ls/false (apply (lambda (G4764@ls) (map (lambda (G4766@x) (G2d0c@make-stx ((lambda (G4768@x) (if (or (symbol? G4768@x) (string? G4768@x)) (gensym G4768@x) (gensym 't))) (G3024@syntax->datum G4766@x)) G2cbe@top-mark* '() '())) G4764@ls)) G4762@ls/false) ((lambda (G476a@t) ((lambda (G476c@ls/false) (if G476c@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G476c@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G476a@t))) (G2f33@syntax-dispatch G476a@t '_))) G4760@t))) (G2f33@syntax-dispatch G4760@t 'each-any))) G475e@ls))) (set! G300e@free-identifier=? (lambda (G476e@x G476f@y) (if (G2d42@id? G476e@x) (if (G2d42@id? G476f@y) (G2d4a@free-id=? G476e@x G476f@y) (assertion-violation 'free-identifier=? '"not an identifier" G476f@y)) (assertion-violation 'free-identifier=? '"not an identifier" G476e@x)))) (set! G3010@bound-identifier=? (lambda (G4772@x G4773@y) (if (G2d42@id? G4772@x) (if (G2d42@id? G4773@y) (G2d48@bound-id=? G4772@x G4773@y) (assertion-violation 'bound-identifier=? '"not an identifier" G4773@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G4772@x)))) (set! G3012@make-source-condition (lambda (G4776@x) ((lambda (G4780@G477b G4782@G477d G4784@G477c G4787@G477a G4789@make-source-condition G478b@G4778 G478d@G4779 G478f@source-condition? G4791@source-filename G4793@source-character) (begin (set! G4780@G477b (make-record-type-descriptor '&source-information G4bce@G4921@&condition-rtd 'G477e '#f '#f '#((immutable file-name) (immutable character)))) (set! G4782@G477d '#f) (set! G4784@G477c (make-record-constructor-descriptor G4780@G477b G4bcf@G4923@&condition-rcd G4782@G477d)) (set! G4787@G477a (record-predicate G4780@G477b)) (set! G4789@make-source-condition (record-constructor G4784@G477c)) (set! G478b@G4778 (record-accessor G4780@G477b '0)) (set! G478d@G4779 (record-accessor G4780@G477b '1)) (set! G478f@source-condition? (condition-predicate G4780@G477b)) (set! G4791@source-filename (condition-accessor G4780@G477b G478b@G4778)) (set! G4793@source-character (condition-accessor G4780@G477b G478d@G4779)) (if (pair? G4776@x) (G4789@make-source-condition (car G4776@x) (cdr G4776@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3014@extract-position-condition (lambda (G4794@x) (G3012@make-source-condition (G3016@expression-position G4794@x)))) (set! G3016@expression-position (lambda (G4796@x) (and (G2d0a@stx? G4796@x) ((lambda (G4798@x) (and (G28eb@G280e@annotation? G4798@x) (G28ec@G2810@annotation-source G4798@x))) (G2d0e@stx-expr G4796@x))))) (set! G3018@assertion-error (lambda (G479a@expr G479b@pos) (raise (condition (G4bfe@G49e1@make-assertion-violation) (G4c10@G4a11@make-who-condition 'assert) (G4bd4@G4974@make-message-condition '"assertion failed") (G4c06@G49f7@make-irritants-condition (list G479a@expr)) (G3012@make-source-condition G479b@pos))))) (set! G301a@syntax-error (lambda (G479e@x . G47a0@args) (begin (if (not (for-all string? G47a0@args)) (assertion-violation 'syntax-error '"invalid argument" G47a0@args) (void)) (raise (condition (G4bd4@G4974@make-message-condition (if (null? G47a0@args) '"invalid syntax" (apply string-append G47a0@args))) (G4c32@G4a6b@make-syntax-violation (G3024@syntax->datum G479e@x) '#f) (G3014@extract-position-condition G479e@x)))))) (set! G301c@syntax-violation* (lambda (G47a2@who G47a3@msg G47a4@form G47a5@condition-object) (begin (if (not (string? G47a3@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47a3@msg) (void)) ((lambda (G47aa@who) (raise (condition (if G47aa@who (G4c10@G4a11@make-who-condition G47aa@who) (condition)) (G4bd4@G4974@make-message-condition G47a3@msg) G47a5@condition-object (G3014@extract-position-condition G47a4@form)))) (if (or (string? G47a2@who) (symbol? G47a2@who)) G47a2@who (if (not G47a2@who) ((lambda (G47ac@t) ((lambda (G47ae@ls/false) (if (and G47ae@ls/false (apply (lambda (G47b0@id) (G2d42@id? G47b0@id)) G47ae@ls/false)) (apply (lambda (G47b2@id) (G3024@syntax->datum G47b2@id)) G47ae@ls/false) ((lambda (G47b4@t) ((lambda (G47b6@ls/false) (if (and G47b6@ls/false (apply (lambda (G47b8@id G47b9@rest) (G2d42@id? G47b8@id)) G47b6@ls/false)) (apply (lambda (G47bc@id G47bd@rest) (G3024@syntax->datum G47bc@id)) G47b6@ls/false) ((lambda (G47c0@t) ((lambda (G47c2@ls/false) (if G47c2@ls/false (apply (lambda () '#f) G47c2@ls/false) (G301e@syntax-violation '#f '"invalid syntax" G47c0@t))) (G2f33@syntax-dispatch G47c0@t '_))) G47b4@t))) (G2f33@syntax-dispatch G47b4@t '(any . any)))) G47ac@t))) (G2f33@syntax-dispatch G47ac@t 'any))) G47a4@form) (assertion-violation 'syntax-violation '"invalid who argument" G47a2@who))))))) (set! G301e@syntax-violation (lambda G47d2 ((lambda (G47d3) (if (= G47d3 '3) (apply (lambda (G47c4@who G47c5@msg G47c6@form) (G301e@syntax-violation G47c4@who G47c5@msg G47c6@form '#f)) G47d2) (if (= G47d3 '4) (apply (lambda (G47ca@who G47cb@msg G47cc@form G47cd@subform) (G301c@syntax-violation* G47ca@who G47cb@msg G47cc@form (G4c32@G4a6b@make-syntax-violation (G3024@syntax->datum G47cc@form) (G3024@syntax->datum G47cd@subform)))) G47d2) (error 'apply '"invalid arg count")))) (length G47d2)))) (set! G3020@identifier? (lambda (G47d4@x) (G2d42@id? G47d4@x))) (set! G3022@datum->syntax (lambda (G47d6@id G47d7@datum) (if (G2d42@id? G47d6@id) (G2d20@datum->stx G47d6@id G47d7@datum) (assertion-violation 'datum->syntax '"not an identifier" G47d6@id)))) (set! G3024@syntax->datum (lambda (G47da@x) (G2d58@stx->datum G47da@x))) (set! G3026@compile-r6rs-top-level (lambda (G47dc@x*) (call-with-values (lambda () (G2fb0@top-level-expander G47dc@x*)) (lambda (G47e0@G47de G47e1@G47df) ((lambda (G47e4@invoke-code G47e5@lib*) (lambda () (begin (for-each G2b6a@G2a11@invoke-library G47e5@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G294a@G2902@expanded->core G47e4@invoke-code)) (void)) (eval-core (G294a@G2902@expanded->core G47e4@invoke-code))))) G47e1@G47df G47e0@G47de))))) (set! G3028@pre-compile-r6rs-top-level (lambda (G47e8@x*) (call-with-values (lambda () (G2fb0@top-level-expander G47e8@x*)) (lambda (G47ec@G47ea G47ed@G47eb) ((lambda (G47f0@invoke-code G47f1@lib*) (begin (for-each G2b6a@G2a11@invoke-library G47f1@lib*) (G28f4@G2820@compile-core (G294a@G2902@expanded->core G47f0@invoke-code)))) G47ed@G47eb G47ec@G47ea))))) (set! G302a@interaction-environment ((lambda (G47f4@the-env) (lambda () (or G47f4@the-env ((lambda (G47f6@lib G47f7@rib) (begin ((lambda (G47fa@subst) (begin (G2ce7@set-rib-sym*! G47f7@rib (map car G47fa@subst)) (G2ce9@set-rib-mark**! G47f7@rib (map (lambda (G47fc@x) G2cbe@top-mark*) G47fa@subst)) (G2ceb@set-rib-label*! G47f7@rib (map cdr G47fa@subst)))) (G2b3f@G29bb@library-subst G47f6@lib)) ((lambda (G47fe@env) (begin (set! G47f4@the-env G47fe@env) G47fe@env)) (G2fdc@make-interaction-env G47f7@rib '() '())))) (G2b63@G2a03@find-library-by-name '(mosh interaction)) (G2cf1@make-empty-rib))))) '#f)) (set! G302c@top-level-context (G28f6@G2824@make-parameter '#f)) (begin (set! G490c@G302c@top-level-context G302c@top-level-context) (set! G490b@G302a@interaction-environment G302a@interaction-environment) (set! G490a@G3028@pre-compile-r6rs-top-level G3028@pre-compile-r6rs-top-level) (set! G4909@G3026@compile-r6rs-top-level G3026@compile-r6rs-top-level) (set! G4908@G3024@syntax->datum G3024@syntax->datum) (set! G4907@G3022@datum->syntax G3022@datum->syntax) (set! G4906@G3020@identifier? G3020@identifier?) (set! G4905@G301e@syntax-violation G301e@syntax-violation) (set! G4904@G301c@syntax-violation* G301c@syntax-violation*) (set! G4903@G301a@syntax-error G301a@syntax-error) (set! G4902@G3018@assertion-error G3018@assertion-error) (set! G4901@G3016@expression-position G3016@expression-position) (set! G4900@G3014@extract-position-condition G3014@extract-position-condition) (set! G48ff@G3012@make-source-condition G3012@make-source-condition) (set! G48fe@G3010@bound-identifier=? G3010@bound-identifier=?) (set! G48fd@G300e@free-identifier=? G300e@free-identifier=?) (set! G48fc@G300c@generate-temporaries G300c@generate-temporaries) (set! G48fb@G300a@make-export-env/macros G300a@make-export-env/macros) (set! G48fa@G3008@make-export-subst G3008@make-export-subst) (set! G48f9@G3006@build-exports G3006@build-exports) (set! G48f8@G3004@rev-map-append G3004@rev-map-append) (set! G48f7@G3002@boot-library-expand G3002@boot-library-expand) (set! G48f6@G3000@library-expander G3000@library-expander) (set! G48f5@G2ffe@eval G2ffe@eval) (set! G48f4@G2ffc@expand G2ffc@expand) (set! G48f3@G2ffa@scheme-report-environment G2ffa@scheme-report-environment) (set! G48f2@G2ff8@null-environment G2ff8@null-environment) (set! G48f1@G2ff6@environment G2ff6@environment) (set! G48f0@G2ff4@environment-symbols G2ff4@environment-symbols) (set! G48ef@G2ff2@environment? G2ff2@environment?) (set! G48ee@G2ff0@parse-binding G2ff0@parse-binding) (set! G48ed@G2fee@environment-bindings G2fee@environment-bindings) (set! G48ec@G2fec@interaction-environment-symbols G2fec@interaction-environment-symbols) (set! G48eb@G2fea@rp G2fea@rp) (set! G48ea@G2fe8@set-interaction-env-locs! G2fe8@set-interaction-env-locs!) (set! G48e9@G2fe6@set-interaction-env-r! G2fe6@set-interaction-env-r!) (set! G48e8@G2fe4@set-interaction-env-rib! G2fe4@set-interaction-env-rib!) (set! G48e7@G2fe2@interaction-env-locs G2fe2@interaction-env-locs) (set! G48e6@G2fe0@interaction-env-r G2fe0@interaction-env-r) (set! G48e5@G2fde@interaction-env-rib G2fde@interaction-env-rib) (set! G48e4@G2fdc@make-interaction-env G2fdc@make-interaction-env) (set! G48e3@G2fda@interaction-env? G2fda@interaction-env?) (set! G48e2@G2fd7@G2fcf G2fd7@G2fcf) (set! G48e1@G2fd5@G2fd0 G2fd5@G2fd0) (set! G48e0@G2fd3@G2fce G2fd3@G2fce) (set! G48df@G2fcd@rp G2fcd@rp) (set! G48de@G2fcb@set-env-itc! G2fcb@set-env-itc!) (set! G48dd@G2fc9@set-env-labels! G2fc9@set-env-labels!) (set! G48dc@G2fc7@set-env-names! G2fc7@set-env-names!) (set! G48db@G2fc5@env-itc G2fc5@env-itc) (set! G48da@G2fc3@env-labels G2fc3@env-labels) (set! G48d9@G2fc1@env-names G2fc1@env-names) (set! G48d8@G2fbf@make-env G2fbf@make-env) (set! G48d7@G2fbd@env? G2fbd@env?) (set! G48d6@G2fba@G2fb2 G2fba@G2fb2) (set! G48d5@G2fb8@G2fb3 G2fb8@G2fb3) (set! G48d4@G2fb6@G2fb1 G2fb6@G2fb1) (set! G48d3@G2fb0@top-level-expander G2fb0@top-level-expander) (set! G48d2@G2fae@parse-top-level-program G2fae@parse-top-level-program) (set! G48d1@G2fac@core-library-expander G2fac@core-library-expander) (set! G48d0@G2faa@library-body-expander G2faa@library-body-expander) (set! G48cf@G2fa8@chi-interaction-expr G2fa8@chi-interaction-expr) (set! G48ce@G2fa6@chi-library-internal G2fa6@chi-library-internal) (set! G48cd@G2fa4@imp-collector G2fa4@imp-collector) (set! G48cc@G2fa2@vis-collector G2fa2@vis-collector) (set! G48cb@G2fa0@inv-collector G2fa0@inv-collector) (set! G48ca@G2f9e@make-collector G2f9e@make-collector) (set! G48c9@G2f9c@make-top-rib G2f9c@make-top-rib) (set! G48c8@G2f9a@parse-import-spec* G2f9a@parse-import-spec*) (set! G48c7@G2f98@parse-library G2f98@parse-library) (set! G48c6@G2f96@parse-library-name G2f96@parse-library-name) (set! G48c5@G2f94@parse-exports G2f94@parse-exports) (set! G48c4@G2f92@expand-transformer G2f92@expand-transformer) (set! G48c3@G2f90@chi-body* G2f90@chi-body*) (set! G48c2@G2f8e@chi-internal-module G2f8e@chi-internal-module) (set! G48c1@G2f8c@module-interface-exp-id* G2f8c@module-interface-exp-id*) (set! G48c0@G2f8a@set-module-interface-exp-lab-vec! G2f8a@set-module-interface-exp-lab-vec!) (set! G48bf@G2f88@set-module-interface-exp-id-vec! G2f88@set-module-interface-exp-id-vec!) (set! G48be@G2f86@set-module-interface-first-mark! G2f86@set-module-interface-first-mark!) (set! G48bd@G2f84@module-interface-exp-lab-vec G2f84@module-interface-exp-lab-vec) (set! G48bc@G2f82@module-interface-exp-id-vec G2f82@module-interface-exp-id-vec) (set! G48bb@G2f80@module-interface-first-mark G2f80@module-interface-first-mark) (set! G48ba@G2f7e@make-module-interface G2f7e@make-module-interface) (set! G48b9@G2f7c@module-interface? G2f7c@module-interface?) (set! G48b8@G2f79@G2f71 G2f79@G2f71) (set! G48b7@G2f77@G2f72 G2f77@G2f72) (set! G48b6@G2f75@G2f70 G2f75@G2f70) (set! G48b5@G2f6f@parse-module G2f6f@parse-module) (set! G48b4@G2f6d@chi-internal G2f6d@chi-internal) (set! G48b3@G2f6b@find-dups G2f6b@find-dups) (set! G48b2@G2f69@find-bound=? G2f69@find-bound=?) (set! G48b1@G2f67@chi-rhs* G2f67@chi-rhs*) (set! G48b0@G2f65@expand-interaction-rhs*/init* G2f65@expand-interaction-rhs*/init*) (set! G48af@G2f63@chi-rhs G2f63@chi-rhs) (set! G48ae@G2f61@chi-defun G2f61@chi-defun) (set! G48ad@G2f5f@chi-lambda-clause* G2f5f@chi-lambda-clause*) (set! G48ac@G2f5d@chi-lambda-clause G2f5d@chi-lambda-clause) (set! G48ab@G2f5b@verify-formals G2f5b@verify-formals) (set! G48aa@G2f59@chi-set! G2f59@chi-set!) (set! G48a9@G2f57@chi-expr G2f57@chi-expr) (set! G48a8@G2f55@chi-application G2f55@chi-application) (set! G48a7@G2f53@chi-expr* G2f53@chi-expr*) (set! G48a6@G2f51@chi-global-macro G2f51@chi-global-macro) (set! G48a5@G2f4f@chi-local-macro G2f4f@chi-local-macro) (set! G48a4@G2f4d@chi-macro G2f4d@chi-macro) (set! G48a3@G2f4b@do-macro-call G2f4b@do-macro-call) (set! G48a2@G2f49@local-macro-transformer G2f49@local-macro-transformer) (set! G48a1@G2f47@macro-transformer G2f47@macro-transformer) (set! G48a0@G2f45@symbol-macro G2f45@symbol-macro) (set! G489f@G2f43@file-options-macro G2f43@file-options-macro) (set! G489e@G2f41@core-macro-transformer G2f41@core-macro-transformer) (set! G489d@G2f3f@syntax-transformer G2f3f@syntax-transformer) (set! G489c@G2f3d@ellipsis-map G2f3d@ellipsis-map) (set! G489b@G2f3b@syntax-case-transformer G2f3b@syntax-case-transformer) (set! G489a@G2f39@verify-literals G2f39@verify-literals) (set! G4899@G2f37@underscore? G2f37@underscore?) (set! G4898@G2f35@ellipsis? G2f35@ellipsis?) (set! G4897@G2f33@syntax-dispatch G2f33@syntax-dispatch) (set! G4896@G2f31@convert-pattern G2f31@convert-pattern) (set! G4895@G2f2f@foreign-call-transformer G2f2f@foreign-call-transformer) (set! G4894@G2f2d@parameterize-macro G2f2d@parameterize-macro) (set! G4893@G2f2b@incorrect-usage-macro G2f2b@incorrect-usage-macro) (set! G4892@G2f29@define-condition-type-macro G2f29@define-condition-type-macro) (set! G4891@G2f27@define-record-type-macro G2f27@define-record-type-macro) (set! G4890@G2f25@define-struct-macro G2f25@define-struct-macro) (set! G488f@G2f23@quasisyntax-macro G2f23@quasisyntax-macro) (set! G488e@G2f21@quasiquote-macro G2f21@quasiquote-macro) (set! G488d@G2f1f@syntax-rules-macro G2f1f@syntax-rules-macro) (set! G488c@G2f1d@include-into-macro G2f1d@include-into-macro) (set! G488b@G2f1b@include-macro G2f1b@include-macro) (set! G488a@G2f19@do-include G2f19@do-include) (set! G4889@G2f17@cond-macro G2f17@cond-macro) (set! G4888@G2f15@and-macro G2f15@and-macro) (set! G4887@G2f13@or-macro G2f13@or-macro) (set! G4886@G2f11@let*-macro G2f11@let*-macro) (set! G4885@G2f0f@do-macro G2f0f@do-macro) (set! G4884@G2f0d@identifier-syntax-macro G2f0d@identifier-syntax-macro) (set! G4883@G2f0b@endianness-macro G2f0b@endianness-macro) (set! G4882@G2f09@assert-macro G2f09@assert-macro) (set! G4881@G2f07@delay-macro G2f07@delay-macro) (set! G4880@G2f05@time-macro G2f05@time-macro) (set! G487f@G2f03@define-enumeration-macro G2f03@define-enumeration-macro) (set! G487e@G2f01@guard-macro G2f01@guard-macro) (set! G487d@G2eff@trace-letrec-syntax-macro G2eff@trace-letrec-syntax-macro) (set! G487c@G2efd@trace-let-syntax-macro G2efd@trace-let-syntax-macro) (set! G487b@G2efb@trace-let/rec-syntax G2efb@trace-let/rec-syntax) (set! G487a@G2ef9@trace-define-syntax-macro G2ef9@trace-define-syntax-macro) (set! G4879@G2ef7@trace-define-macro G2ef7@trace-define-macro) (set! G4878@G2ef5@trace-lambda-macro G2ef5@trace-lambda-macro) (set! G4877@G2ef3@let*-values-macro G2ef3@let*-values-macro) (set! G4876@G2ef1@let-values-macro G2ef1@let-values-macro) (set! G4875@G2eef@let-macro G2eef@let-macro) (set! G4874@G2eed@invalid-fmls-error G2eed@invalid-fmls-error) (set! G4873@G2eeb@with-syntax-macro G2eeb@with-syntax-macro) (set! G4872@G2ee9@bless G2ee9@bless) (set! G4871@G2ee7@lambda-transformer G2ee7@lambda-transformer) (set! G4870@G2ee5@case-lambda-transformer G2ee5@case-lambda-transformer) (set! G486f@G2ee3@quote-transformer G2ee3@quote-transformer) (set! G486e@G2ee1@case-macro G2ee1@case-macro) (set! G486d@G2edf@or-transformer G2edf@or-transformer) (set! G486c@G2edd@and-transformer G2edd@and-transformer) (set! G486b@G2edb@if-transformer G2edb@if-transformer) (set! G486a@G2ed9@unless-macro G2ed9@unless-macro) (set! G4869@G2ed7@when-macro G2ed7@when-macro) (set! G4868@G2ed5@record-constructor-descriptor-transformer G2ed5@record-constructor-descriptor-transformer) (set! G4867@G2ed3@record-type-descriptor-transformer G2ed3@record-type-descriptor-transformer) (set! G4866@G2ed1@type-descriptor-transformer G2ed1@type-descriptor-transformer) (set! G4865@G2ecf@fluid-let-syntax-transformer G2ecf@fluid-let-syntax-transformer) (set! G4864@G2ecd@letrec*-transformer G2ecd@letrec*-transformer) (set! G4863@G2ecb@letrec-transformer G2ecb@letrec-transformer) (set! G4862@G2ec9@letrec-helper G2ec9@letrec-helper) (set! G4861@G2ec7@add-lexicals G2ec7@add-lexicals) (set! G4860@G2ec5@add-lexical G2ec5@add-lexical) (set! G485f@G2ec3@set-lexical-mutable! G2ec3@set-lexical-mutable!) (set! G485e@G2ec1@lexical-mutable? G2ec1@lexical-mutable?) (set! G485d@G2ebf@lexical-var G2ebf@lexical-var) (set! G485c@G2ebd@scheme-stx G2ebd@scheme-stx) (set! G485b@G2ebb@scheme-stx-hashtable G2ebb@scheme-stx-hashtable) (set! G485a@G2eb9@parse-define-syntax G2eb9@parse-define-syntax) (set! G4859@G2eb7@parse-define G2eb7@parse-define) (set! G4858@G2d80@make-eval-transformer G2d80@make-eval-transformer) (set! G4857@G2d7e@variable-transformer-procedure G2d7e@variable-transformer-procedure) (set! G4856@G2d7c@variable-transformer? G2d7c@variable-transformer?) (set! G4855@G2d7a@make-variable-transformer G2d7a@make-variable-transformer) (set! G4854@G2d78@sanitize-binding G2d78@sanitize-binding) (set! G4853@G2d6a@syntax-type G2d6a@syntax-type) (set! G4852@G2d68@raise-unbound-error G2d68@raise-unbound-error) (set! G4851@G2d66@binding-value G2d66@binding-value) (set! G4850@G2d64@binding-type G2d64@binding-type) (set! G484f@G2d62@make-binding G2d62@make-binding) (set! G484e@G2d60@label->binding G2d60@label->binding) (set! G484d@G2d5e@id->real-label G2d5e@id->real-label) (set! G484c@G2d5c@id->label G2d5c@id->label) (set! G484b@G2d5a@same-marks*? G2d5a@same-marks*?) (set! G484a@G2d58@stx->datum G2d58@stx->datum) (set! G4849@G2d56@strip G2d56@strip) (set! G4848@G2d54@strip-annotations G2d54@strip-annotations) (set! G4847@G2d52@self-evaluating? G2d52@self-evaluating?) (set! G4846@G2d50@bound-id-member? G2d50@bound-id-member?) (set! G4845@G2d4e@distinct-bound-ids? G2d4e@distinct-bound-ids?) (set! G4844@G2d4c@valid-bound-ids? G2d4c@valid-bound-ids?) (set! G4843@G2d4a@free-id=? G2d4a@free-id=?) (set! G4842@G2d48@bound-id=? G2d48@bound-id=?) (set! G4841@G2d46@same-marks? G2d46@same-marks?) (set! G4840@G2d44@id->sym G2d44@id->sym) (set! G483f@G2d42@id? G2d42@id?) (set! G483e@G2d40@syntax->list G2d40@syntax->list) (set! G483d@G2d3e@syntax-cdr G2d3e@syntax-cdr) (set! G483c@G2d3c@syntax-car G2d3c@syntax-car) (set! G483b@G2d3a@syntax-list? G2d3a@syntax-list?) (set! G483a@G2d38@syntax-null? G2d38@syntax-null?) (set! G4839@G2d36@syntax-vector? G2d36@syntax-vector?) (set! G4838@G2d34@syntax-pair? G2d34@syntax-pair?) (set! G4837@G2d32@syntax-vector->list G2d32@syntax-vector->list) (set! G4836@G2d30@syntax-kind? G2d30@syntax-kind?) (set! G4835@G2d2e@add-subst G2d2e@add-subst) (set! G4834@G2d2c@add-mark G2d2c@add-mark) (set! G4833@G2d2a@mkstx G2d2a@mkstx) (set! G4832@G2d28@join-wraps G2d28@join-wraps) (set! G4831@G2d26@anti-mark? G2d26@anti-mark?) (set! G4830@G2d24@anti-mark G2d24@anti-mark) (set! G482f@G2d22@gen-mark G2d22@gen-mark) (set! G482e@G2d20@datum->stx G2d20@datum->stx) (set! G482d@G2d1e@rp G2d1e@rp) (set! G482c@G2d1c@set-stx-ae*! G2d1c@set-stx-ae*!) (set! G482b@G2d1a@set-stx-subst*! G2d1a@set-stx-subst*!) (set! G482a@G2d18@set-stx-mark*! G2d18@set-stx-mark*!) (set! G4829@G2d16@set-stx-expr! G2d16@set-stx-expr!) (set! G4828@G2d14@stx-ae* G2d14@stx-ae*) (set! G4827@G2d12@stx-subst* G2d12@stx-subst*) (set! G4826@G2d10@stx-mark* G2d10@stx-mark*) (set! G4825@G2d0e@stx-expr G2d0e@stx-expr) (set! G4824@G2d0c@make-stx G2d0c@make-stx) (set! G4823@G2d0a@stx? G2d0a@stx?) (set! G4822@G2d07@G2cff G2d07@G2cff) (set! G4821@G2d05@G2d00 G2d05@G2d00) (set! G4820@G2d03@G2cfe G2d03@G2cfe) (set! G481f@G2cfd@make-full-rib G2cfd@make-full-rib) (set! G481e@G2cfb@unseal-rib! G2cfb@unseal-rib!) (set! G481d@G2cf9@seal-rib! G2cf9@seal-rib!) (set! G481c@G2cf7@make-rib-map G2cf7@make-rib-map) (set! G481b@G2cf5@extend-rib/nc! G2cf5@extend-rib/nc!) (set! G481a@G2cf3@extend-rib! G2cf3@extend-rib!) (set! G4819@G2cf1@make-empty-rib G2cf1@make-empty-rib) (set! G4818@G2cef@set-rib-cache! G2cef@set-rib-cache!) (set! G4817@G2ced@set-rib-sealed/freq! G2ced@set-rib-sealed/freq!) (set! G4816@G2ceb@set-rib-label*! G2ceb@set-rib-label*!) (set! G4815@G2ce9@set-rib-mark**! G2ce9@set-rib-mark**!) (set! G4814@G2ce7@set-rib-sym*! G2ce7@set-rib-sym*!) (set! G4813@G2ce5@rib-cache G2ce5@rib-cache) (set! G4812@G2ce3@rib-sealed/freq G2ce3@rib-sealed/freq) (set! G4811@G2ce1@rib-label* G2ce1@rib-label*) (set! G4810@G2cdf@rib-mark** G2cdf@rib-mark**) (set! G480f@G2cdd@rib-sym* G2cdd@rib-sym*) (set! G480e@G2cdb@make-rib G2cdb@make-rib) (set! G480d@G2cd9@rib? G2cd9@rib?) (set! G480c@G2cd6@G2cce G2cd6@G2cce) (set! G480b@G2cd4@G2ccf G2cd4@G2ccf) (set! G480a@G2cd2@G2ccd G2cd2@G2ccd) (set! G4809@G2ccc@gen-define-label G2ccc@gen-define-label) (set! G4808@G2cca@gen-define-label+loc G2cca@gen-define-label+loc) (set! G4807@G2cc8@gen-top-level-label G2cc8@gen-top-level-label) (set! G4806@G2cc6@gen-label G2cc6@gen-label) (set! G4805@G2cc4@gen-global G2cc4@gen-global) (set! G4804@G2cc2@gen-lexical G2cc2@gen-lexical) (set! G4803@G2cc0@top-marked? G2cc0@top-marked?) (set! G4802@G2cbe@top-mark* G2cbe@top-mark*) (set! G4801@G2cb9@set-union G2cb9@set-union) (set! G4800@G2cb7@set-cons G2cb7@set-cons) (G2b60@G29fd@current-library-expander G3000@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4916@G4911 G4918@G4913 G491a@G4912 G491d@&condition? G491f@make-&condition G4921@&condition-rtd G4923@&condition-rcd G496b@G4966 G496d@G4968 G496f@G4967 G4972@p? G4974@make-message-condition G4976@G4965 G4978@message-condition? G497a@condition-message G497c@&message-rtd G497e@&message-rcd G4984@G497f G4986@G4981 G4988@G4980 G498b@p? G498d@make-warning G498f@warning? G4991@&warning-rtd G4993@&warning-rcd G4999@G4994 G499b@G4996 G499d@G4995 G49a0@p? G49a2@make-serious-condition G49a4@serious-condition? G49a6@&serious-rtd G49a8@&serious-rcd G49ae@G49a9 G49b0@G49ab G49b2@G49aa G49b5@p? G49b7@make-error G49b9@error? G49bb@&error-rtd G49bd@&error-rcd G49c3@G49be G49c5@G49c0 G49c7@G49bf G49ca@p? G49cc@make-violation G49ce@violation? G49d0@&violation-rtd G49d2@&violation-rcd G49d8@G49d3 G49da@G49d5 G49dc@G49d4 G49df@p? G49e1@make-assertion-violation G49e3@assertion-violation? G49e5@&assertion-rtd G49e7@&assertion-rcd G49ee@G49e9 G49f0@G49eb G49f2@G49ea G49f5@p? G49f7@make-irritants-condition G49f9@G49e8 G49fb@irritants-condition? G49fd@condition-irritants G49ff@&irritants-rtd G4a01@&irritants-rcd G4a08@G4a03 G4a0a@G4a05 G4a0c@G4a04 G4a0f@p? G4a11@make-who-condition G4a13@G4a02 G4a15@who-condition? G4a17@condition-who G4a19@&who-rtd G4a1b@&who-rcd G4a21@G4a1c G4a23@G4a1e G4a25@G4a1d G4a28@p? G4a2a@make-non-continuable-violation G4a2c@non-continuable-violation? G4a2e@&non-continuable-rtd G4a30@&non-continuable-rcd G4a36@G4a31 G4a38@G4a33 G4a3a@G4a32 G4a3d@p? G4a3f@make-implementation-restriction-violation G4a41@implementation-restriction-violation? G4a43@&implementation-restriction-rtd G4a45@&implementation-restriction-rcd G4a4b@G4a46 G4a4d@G4a48 G4a4f@G4a47 G4a52@p? G4a54@make-lexical-violation G4a56@lexical-violation? G4a58@&lexical-rtd G4a5a@&lexical-rcd G4a62@G4a5d G4a64@G4a5f G4a66@G4a5e G4a69@p? G4a6b@make-syntax-violation G4a6d@G4a5b G4a6f@G4a5c G4a71@syntax-violation? G4a73@syntax-violation-form G4a75@syntax-violation-subform G4a77@&syntax-rtd G4a79@&syntax-rcd G4a7f@G4a7a G4a81@G4a7c G4a83@G4a7b G4a86@p? G4a88@make-undefined-violation G4a8a@undefined-violation? G4a8c@&undefined-rtd G4a8e@&undefined-rcd G4a94@G4a8f G4a96@G4a91 G4a98@G4a90 G4a9b@p? G4a9d@make-i/o-error G4a9f@i/o-error? G4aa1@&i/o-rtd G4aa3@&i/o-rcd G4aa9@G4aa4 G4aab@G4aa6 G4aad@G4aa5 G4ab0@p? G4ab2@make-i/o-read-error G4ab4@i/o-read-error? G4ab6@&i/o-read-rtd G4ab8@&i/o-read-rcd G4abe@G4ab9 G4ac0@G4abb G4ac2@G4aba G4ac5@p? G4ac7@make-i/o-write-error G4ac9@i/o-write-error? G4acb@&i/o-write-rtd G4acd@&i/o-write-rcd G4ad4@G4acf G4ad6@G4ad1 G4ad8@G4ad0 G4adb@p? G4add@make-i/o-invalid-position-error G4adf@G4ace G4ae1@i/o-invalid-position-error? G4ae3@i/o-error-position G4ae5@&i/o-invalid-position-rtd G4ae7@&i/o-invalid-position-rcd G4aee@G4ae9 G4af0@G4aeb G4af2@G4aea G4af5@p? G4af7@make-i/o-filename-error G4af9@G4ae8 G4afb@i/o-filename-error? G4afd@i/o-error-filename G4aff@&i/o-filename-rtd G4b01@&i/o-filename-rcd G4b07@G4b02 G4b09@G4b04 G4b0b@G4b03 G4b0e@p? G4b10@make-i/o-file-protection-error G4b12@i/o-file-protection-error? G4b14@&i/o-file-protection-rtd G4b16@&i/o-file-protection-rcd G4b1c@G4b17 G4b1e@G4b19 G4b20@G4b18 G4b23@p? G4b25@make-i/o-file-is-read-only-error G4b27@i/o-file-is-read-only-error? G4b29@&i/o-file-is-read-only-rtd G4b2b@&i/o-file-is-read-only-rcd G4b31@G4b2c G4b33@G4b2e G4b35@G4b2d G4b38@p? G4b3a@make-i/o-file-already-exists-error G4b3c@i/o-file-already-exists-error? G4b3e@&i/o-file-already-exists-rtd G4b40@&i/o-file-already-exists-rcd G4b46@G4b41 G4b48@G4b43 G4b4a@G4b42 G4b4d@p? G4b4f@make-i/o-file-does-not-exist-error G4b51@i/o-file-does-not-exist-error? G4b53@&i/o-file-does-not-exist-rtd G4b55@&i/o-file-does-not-exist-rcd G4b5c@G4b57 G4b5e@G4b59 G4b60@G4b58 G4b63@p? G4b65@make-i/o-port-error G4b67@G4b56 G4b69@i/o-port-error? G4b6b@i/o-error-port G4b6d@&i/o-port-rtd G4b6f@&i/o-port-rcd G4b75@G4b70 G4b77@G4b72 G4b79@G4b71 G4b7c@p? G4b7e@make-i/o-decoding-error G4b80@i/o-decoding-error? G4b82@&i/o-decoding-rtd G4b84@&i/o-decoding-rcd G4b8b@G4b86 G4b8d@G4b88 G4b8f@G4b87 G4b92@p? G4b94@make-i/o-encoding-error G4b96@G4b85 G4b98@i/o-encoding-error? G4b9a@i/o-encoding-error-char G4b9c@&i/o-encoding-rtd G4b9e@&i/o-encoding-rcd G4ba4@G4b9f G4ba6@G4ba1 G4ba8@G4ba0 G4bab@p? G4bad@make-no-infinities-violation G4baf@no-infinities-violation? G4bb1@&no-infinities-rtd G4bb3@&no-infinities-rcd G4bb9@G4bb4 G4bbb@G4bb6 G4bbd@G4bb5 G4bc0@p? G4bc2@make-no-nans-violation G4bc4@no-nans-violation? G4bc6@&no-nans-rtd G4bc8@&no-nans-rcd) (begin (set! G4916@G4911 (make-record-type-descriptor '&condition '#f 'G4914 '#f '#f '#())) (set! G4918@G4913 '#f) (set! G491a@G4912 (make-record-constructor-descriptor G4916@G4911 '#f G4918@G4913)) (set! G491d@&condition? (record-predicate G4916@G4911)) (set! G491f@make-&condition (record-constructor G491a@G4912)) (set! G4921@&condition-rtd G4916@G4911) (set! G4923@&condition-rcd G491a@G4912) (set! G496b@G4966 (make-record-type-descriptor '&message G4916@G4911 'G4969 '#f '#f '#((immutable message)))) (set! G496d@G4968 '#f) (set! G496f@G4967 (make-record-constructor-descriptor G496b@G4966 G491a@G4912 G496d@G4968)) (set! G4972@p? (record-predicate G496b@G4966)) (set! G4974@make-message-condition (record-constructor G496f@G4967)) (set! G4976@G4965 (record-accessor G496b@G4966 '0)) (set! G4978@message-condition? (condition-predicate G496b@G4966)) (set! G497a@condition-message (condition-accessor G496b@G4966 G4976@G4965)) (set! G497c@&message-rtd G496b@G4966) (set! G497e@&message-rcd G496f@G4967) (set! G4984@G497f (make-record-type-descriptor '&warning G4916@G4911 'G4982 '#f '#f '#())) (set! G4986@G4981 '#f) (set! G4988@G4980 (make-record-constructor-descriptor G4984@G497f G491a@G4912 G4986@G4981)) (set! G498b@p? (record-predicate G4984@G497f)) (set! G498d@make-warning (record-constructor G4988@G4980)) (set! G498f@warning? (condition-predicate G4984@G497f)) (set! G4991@&warning-rtd G4984@G497f) (set! G4993@&warning-rcd G4988@G4980) (set! G4999@G4994 (make-record-type-descriptor '&serious G4916@G4911 'G4997 '#f '#f '#())) (set! G499b@G4996 '#f) (set! G499d@G4995 (make-record-constructor-descriptor G4999@G4994 G491a@G4912 G499b@G4996)) (set! G49a0@p? (record-predicate G4999@G4994)) (set! G49a2@make-serious-condition (record-constructor G499d@G4995)) (set! G49a4@serious-condition? (condition-predicate G4999@G4994)) (set! G49a6@&serious-rtd G4999@G4994) (set! G49a8@&serious-rcd G499d@G4995) (set! G49ae@G49a9 (make-record-type-descriptor '&error G4999@G4994 'G49ac '#f '#f '#())) (set! G49b0@G49ab '#f) (set! G49b2@G49aa (make-record-constructor-descriptor G49ae@G49a9 G499d@G4995 G49b0@G49ab)) (set! G49b5@p? (record-predicate G49ae@G49a9)) (set! G49b7@make-error (record-constructor G49b2@G49aa)) (set! G49b9@error? (condition-predicate G49ae@G49a9)) (set! G49bb@&error-rtd G49ae@G49a9) (set! G49bd@&error-rcd G49b2@G49aa) (set! G49c3@G49be (make-record-type-descriptor '&violation G4999@G4994 'G49c1 '#f '#f '#())) (set! G49c5@G49c0 '#f) (set! G49c7@G49bf (make-record-constructor-descriptor G49c3@G49be G499d@G4995 G49c5@G49c0)) (set! G49ca@p? (record-predicate G49c3@G49be)) (set! G49cc@make-violation (record-constructor G49c7@G49bf)) (set! G49ce@violation? (condition-predicate G49c3@G49be)) (set! G49d0@&violation-rtd G49c3@G49be) (set! G49d2@&violation-rcd G49c7@G49bf) (set! G49d8@G49d3 (make-record-type-descriptor '&assertion G49c3@G49be 'G49d6 '#f '#f '#())) (set! G49da@G49d5 '#f) (set! G49dc@G49d4 (make-record-constructor-descriptor G49d8@G49d3 G49c7@G49bf G49da@G49d5)) (set! G49df@p? (record-predicate G49d8@G49d3)) (set! G49e1@make-assertion-violation (record-constructor G49dc@G49d4)) (set! G49e3@assertion-violation? (condition-predicate G49d8@G49d3)) (set! G49e5@&assertion-rtd G49d8@G49d3) (set! G49e7@&assertion-rcd G49dc@G49d4) (set! G49ee@G49e9 (make-record-type-descriptor '&irritants G4916@G4911 'G49ec '#f '#f '#((immutable irritants)))) (set! G49f0@G49eb '#f) (set! G49f2@G49ea (make-record-constructor-descriptor G49ee@G49e9 G491a@G4912 G49f0@G49eb)) (set! G49f5@p? (record-predicate G49ee@G49e9)) (set! G49f7@make-irritants-condition (record-constructor G49f2@G49ea)) (set! G49f9@G49e8 (record-accessor G49ee@G49e9 '0)) (set! G49fb@irritants-condition? (condition-predicate G49ee@G49e9)) (set! G49fd@condition-irritants (condition-accessor G49ee@G49e9 G49f9@G49e8)) (set! G49ff@&irritants-rtd G49ee@G49e9) (set! G4a01@&irritants-rcd G49f2@G49ea) (set! G4a08@G4a03 (make-record-type-descriptor '&who G4916@G4911 'G4a06 '#f '#f '#((immutable who)))) (set! G4a0a@G4a05 '#f) (set! G4a0c@G4a04 (make-record-constructor-descriptor G4a08@G4a03 G491a@G4912 G4a0a@G4a05)) (set! G4a0f@p? (record-predicate G4a08@G4a03)) (set! G4a11@make-who-condition (record-constructor G4a0c@G4a04)) (set! G4a13@G4a02 (record-accessor G4a08@G4a03 '0)) (set! G4a15@who-condition? (condition-predicate G4a08@G4a03)) (set! G4a17@condition-who (condition-accessor G4a08@G4a03 G4a13@G4a02)) (set! G4a19@&who-rtd G4a08@G4a03) (set! G4a1b@&who-rcd G4a0c@G4a04) (set! G4a21@G4a1c (make-record-type-descriptor '&non-continuable G49c3@G49be 'G4a1f '#f '#f '#())) (set! G4a23@G4a1e '#f) (set! G4a25@G4a1d (make-record-constructor-descriptor G4a21@G4a1c G49c7@G49bf G4a23@G4a1e)) (set! G4a28@p? (record-predicate G4a21@G4a1c)) (set! G4a2a@make-non-continuable-violation (record-constructor G4a25@G4a1d)) (set! G4a2c@non-continuable-violation? (condition-predicate G4a21@G4a1c)) (set! G4a2e@&non-continuable-rtd G4a21@G4a1c) (set! G4a30@&non-continuable-rcd G4a25@G4a1d) (set! G4a36@G4a31 (make-record-type-descriptor '&implementation-restriction G49c3@G49be 'G4a34 '#f '#f '#())) (set! G4a38@G4a33 '#f) (set! G4a3a@G4a32 (make-record-constructor-descriptor G4a36@G4a31 G49c7@G49bf G4a38@G4a33)) (set! G4a3d@p? (record-predicate G4a36@G4a31)) (set! G4a3f@make-implementation-restriction-violation (record-constructor G4a3a@G4a32)) (set! G4a41@implementation-restriction-violation? (condition-predicate G4a36@G4a31)) (set! G4a43@&implementation-restriction-rtd G4a36@G4a31) (set! G4a45@&implementation-restriction-rcd G4a3a@G4a32) (set! G4a4b@G4a46 (make-record-type-descriptor '&lexical G49c3@G49be 'G4a49 '#f '#f '#())) (set! G4a4d@G4a48 '#f) (set! G4a4f@G4a47 (make-record-constructor-descriptor G4a4b@G4a46 G49c7@G49bf G4a4d@G4a48)) (set! G4a52@p? (record-predicate G4a4b@G4a46)) (set! G4a54@make-lexical-violation (record-constructor G4a4f@G4a47)) (set! G4a56@lexical-violation? (condition-predicate G4a4b@G4a46)) (set! G4a58@&lexical-rtd G4a4b@G4a46) (set! G4a5a@&lexical-rcd G4a4f@G4a47) (set! G4a62@G4a5d (make-record-type-descriptor '&syntax G49c3@G49be 'G4a60 '#f '#f '#((immutable form) (immutable subform)))) (set! G4a64@G4a5f '#f) (set! G4a66@G4a5e (make-record-constructor-descriptor G4a62@G4a5d G49c7@G49bf G4a64@G4a5f)) (set! G4a69@p? (record-predicate G4a62@G4a5d)) (set! G4a6b@make-syntax-violation (record-constructor G4a66@G4a5e)) (set! G4a6d@G4a5b (record-accessor G4a62@G4a5d '0)) (set! G4a6f@G4a5c (record-accessor G4a62@G4a5d '1)) (set! G4a71@syntax-violation? (condition-predicate G4a62@G4a5d)) (set! G4a73@syntax-violation-form (condition-accessor G4a62@G4a5d G4a6d@G4a5b)) (set! G4a75@syntax-violation-subform (condition-accessor G4a62@G4a5d G4a6f@G4a5c)) (set! G4a77@&syntax-rtd G4a62@G4a5d) (set! G4a79@&syntax-rcd G4a66@G4a5e) (set! G4a7f@G4a7a (make-record-type-descriptor '&undefined G49c3@G49be 'G4a7d '#f '#f '#())) (set! G4a81@G4a7c '#f) (set! G4a83@G4a7b (make-record-constructor-descriptor G4a7f@G4a7a G49c7@G49bf G4a81@G4a7c)) (set! G4a86@p? (record-predicate G4a7f@G4a7a)) (set! G4a88@make-undefined-violation (record-constructor G4a83@G4a7b)) (set! G4a8a@undefined-violation? (condition-predicate G4a7f@G4a7a)) (set! G4a8c@&undefined-rtd G4a7f@G4a7a) (set! G4a8e@&undefined-rcd G4a83@G4a7b) (set! G4a94@G4a8f (make-record-type-descriptor '&i/o G49ae@G49a9 'G4a92 '#f '#f '#())) (set! G4a96@G4a91 '#f) (set! G4a98@G4a90 (make-record-constructor-descriptor G4a94@G4a8f G49b2@G49aa G4a96@G4a91)) (set! G4a9b@p? (record-predicate G4a94@G4a8f)) (set! G4a9d@make-i/o-error (record-constructor G4a98@G4a90)) (set! G4a9f@i/o-error? (condition-predicate G4a94@G4a8f)) (set! G4aa1@&i/o-rtd G4a94@G4a8f) (set! G4aa3@&i/o-rcd G4a98@G4a90) (set! G4aa9@G4aa4 (make-record-type-descriptor '&i/o-read G4a94@G4a8f 'G4aa7 '#f '#f '#())) (set! G4aab@G4aa6 '#f) (set! G4aad@G4aa5 (make-record-constructor-descriptor G4aa9@G4aa4 G4a98@G4a90 G4aab@G4aa6)) (set! G4ab0@p? (record-predicate G4aa9@G4aa4)) (set! G4ab2@make-i/o-read-error (record-constructor G4aad@G4aa5)) (set! G4ab4@i/o-read-error? (condition-predicate G4aa9@G4aa4)) (set! G4ab6@&i/o-read-rtd G4aa9@G4aa4) (set! G4ab8@&i/o-read-rcd G4aad@G4aa5) (set! G4abe@G4ab9 (make-record-type-descriptor '&i/o-write G4a94@G4a8f 'G4abc '#f '#f '#())) (set! G4ac0@G4abb '#f) (set! G4ac2@G4aba (make-record-constructor-descriptor G4abe@G4ab9 G4a98@G4a90 G4ac0@G4abb)) (set! G4ac5@p? (record-predicate G4abe@G4ab9)) (set! G4ac7@make-i/o-write-error (record-constructor G4ac2@G4aba)) (set! G4ac9@i/o-write-error? (condition-predicate G4abe@G4ab9)) (set! G4acb@&i/o-write-rtd G4abe@G4ab9) (set! G4acd@&i/o-write-rcd G4ac2@G4aba) (set! G4ad4@G4acf (make-record-type-descriptor '&i/o-invalid-position G4a94@G4a8f 'G4ad2 '#f '#f '#((immutable position)))) (set! G4ad6@G4ad1 '#f) (set! G4ad8@G4ad0 (make-record-constructor-descriptor G4ad4@G4acf G4a98@G4a90 G4ad6@G4ad1)) (set! G4adb@p? (record-predicate G4ad4@G4acf)) (set! G4add@make-i/o-invalid-position-error (record-constructor G4ad8@G4ad0)) (set! G4adf@G4ace (record-accessor G4ad4@G4acf '0)) (set! G4ae1@i/o-invalid-position-error? (condition-predicate G4ad4@G4acf)) (set! G4ae3@i/o-error-position (condition-accessor G4ad4@G4acf G4adf@G4ace)) (set! G4ae5@&i/o-invalid-position-rtd G4ad4@G4acf) (set! G4ae7@&i/o-invalid-position-rcd G4ad8@G4ad0) (set! G4aee@G4ae9 (make-record-type-descriptor '&i/o-filename G4a94@G4a8f 'G4aec '#f '#f '#((immutable filename)))) (set! G4af0@G4aeb '#f) (set! G4af2@G4aea (make-record-constructor-descriptor G4aee@G4ae9 G4a98@G4a90 G4af0@G4aeb)) (set! G4af5@p? (record-predicate G4aee@G4ae9)) (set! G4af7@make-i/o-filename-error (record-constructor G4af2@G4aea)) (set! G4af9@G4ae8 (record-accessor G4aee@G4ae9 '0)) (set! G4afb@i/o-filename-error? (condition-predicate G4aee@G4ae9)) (set! G4afd@i/o-error-filename (condition-accessor G4aee@G4ae9 G4af9@G4ae8)) (set! G4aff@&i/o-filename-rtd G4aee@G4ae9) (set! G4b01@&i/o-filename-rcd G4af2@G4aea) (set! G4b07@G4b02 (make-record-type-descriptor '&i/o-file-protection G4aee@G4ae9 'G4b05 '#f '#f '#())) (set! G4b09@G4b04 '#f) (set! G4b0b@G4b03 (make-record-constructor-descriptor G4b07@G4b02 G4af2@G4aea G4b09@G4b04)) (set! G4b0e@p? (record-predicate G4b07@G4b02)) (set! G4b10@make-i/o-file-protection-error (record-constructor G4b0b@G4b03)) (set! G4b12@i/o-file-protection-error? (condition-predicate G4b07@G4b02)) (set! G4b14@&i/o-file-protection-rtd G4b07@G4b02) (set! G4b16@&i/o-file-protection-rcd G4b0b@G4b03) (set! G4b1c@G4b17 (make-record-type-descriptor '&i/o-file-is-read-only G4b07@G4b02 'G4b1a '#f '#f '#())) (set! G4b1e@G4b19 '#f) (set! G4b20@G4b18 (make-record-constructor-descriptor G4b1c@G4b17 G4b0b@G4b03 G4b1e@G4b19)) (set! G4b23@p? (record-predicate G4b1c@G4b17)) (set! G4b25@make-i/o-file-is-read-only-error (record-constructor G4b20@G4b18)) (set! G4b27@i/o-file-is-read-only-error? (condition-predicate G4b1c@G4b17)) (set! G4b29@&i/o-file-is-read-only-rtd G4b1c@G4b17) (set! G4b2b@&i/o-file-is-read-only-rcd G4b20@G4b18) (set! G4b31@G4b2c (make-record-type-descriptor '&i/o-file-already-exists G4aee@G4ae9 'G4b2f '#f '#f '#())) (set! G4b33@G4b2e '#f) (set! G4b35@G4b2d (make-record-constructor-descriptor G4b31@G4b2c G4af2@G4aea G4b33@G4b2e)) (set! G4b38@p? (record-predicate G4b31@G4b2c)) (set! G4b3a@make-i/o-file-already-exists-error (record-constructor G4b35@G4b2d)) (set! G4b3c@i/o-file-already-exists-error? (condition-predicate G4b31@G4b2c)) (set! G4b3e@&i/o-file-already-exists-rtd G4b31@G4b2c) (set! G4b40@&i/o-file-already-exists-rcd G4b35@G4b2d) (set! G4b46@G4b41 (make-record-type-descriptor '&i/o-file-does-not-exist G4aee@G4ae9 'G4b44 '#f '#f '#())) (set! G4b48@G4b43 '#f) (set! G4b4a@G4b42 (make-record-constructor-descriptor G4b46@G4b41 G4af2@G4aea G4b48@G4b43)) (set! G4b4d@p? (record-predicate G4b46@G4b41)) (set! G4b4f@make-i/o-file-does-not-exist-error (record-constructor G4b4a@G4b42)) (set! G4b51@i/o-file-does-not-exist-error? (condition-predicate G4b46@G4b41)) (set! G4b53@&i/o-file-does-not-exist-rtd G4b46@G4b41) (set! G4b55@&i/o-file-does-not-exist-rcd G4b4a@G4b42) (set! G4b5c@G4b57 (make-record-type-descriptor '&i/o-port G4a94@G4a8f 'G4b5a '#f '#f '#((immutable port)))) (set! G4b5e@G4b59 '#f) (set! G4b60@G4b58 (make-record-constructor-descriptor G4b5c@G4b57 G4a98@G4a90 G4b5e@G4b59)) (set! G4b63@p? (record-predicate G4b5c@G4b57)) (set! G4b65@make-i/o-port-error (record-constructor G4b60@G4b58)) (set! G4b67@G4b56 (record-accessor G4b5c@G4b57 '0)) (set! G4b69@i/o-port-error? (condition-predicate G4b5c@G4b57)) (set! G4b6b@i/o-error-port (condition-accessor G4b5c@G4b57 G4b67@G4b56)) (set! G4b6d@&i/o-port-rtd G4b5c@G4b57) (set! G4b6f@&i/o-port-rcd G4b60@G4b58) (set! G4b75@G4b70 (make-record-type-descriptor '&i/o-decoding G4b5c@G4b57 'G4b73 '#f '#f '#())) (set! G4b77@G4b72 '#f) (set! G4b79@G4b71 (make-record-constructor-descriptor G4b75@G4b70 G4b60@G4b58 G4b77@G4b72)) (set! G4b7c@p? (record-predicate G4b75@G4b70)) (set! G4b7e@make-i/o-decoding-error (record-constructor G4b79@G4b71)) (set! G4b80@i/o-decoding-error? (condition-predicate G4b75@G4b70)) (set! G4b82@&i/o-decoding-rtd G4b75@G4b70) (set! G4b84@&i/o-decoding-rcd G4b79@G4b71) (set! G4b8b@G4b86 (make-record-type-descriptor '&i/o-encoding G4b5c@G4b57 'G4b89 '#f '#f '#((immutable char)))) (set! G4b8d@G4b88 '#f) (set! G4b8f@G4b87 (make-record-constructor-descriptor G4b8b@G4b86 G4b60@G4b58 G4b8d@G4b88)) (set! G4b92@p? (record-predicate G4b8b@G4b86)) (set! G4b94@make-i/o-encoding-error (record-constructor G4b8f@G4b87)) (set! G4b96@G4b85 (record-accessor G4b8b@G4b86 '0)) (set! G4b98@i/o-encoding-error? (condition-predicate G4b8b@G4b86)) (set! G4b9a@i/o-encoding-error-char (condition-accessor G4b8b@G4b86 G4b96@G4b85)) (set! G4b9c@&i/o-encoding-rtd G4b8b@G4b86) (set! G4b9e@&i/o-encoding-rcd G4b8f@G4b87) (set! G4ba4@G4b9f (make-record-type-descriptor '&no-infinities G4a36@G4a31 'G4ba2 '#f '#f '#())) (set! G4ba6@G4ba1 '#f) (set! G4ba8@G4ba0 (make-record-constructor-descriptor G4ba4@G4b9f G4a3a@G4a32 G4ba6@G4ba1)) (set! G4bab@p? (record-predicate G4ba4@G4b9f)) (set! G4bad@make-no-infinities-violation (record-constructor G4ba8@G4ba0)) (set! G4baf@no-infinities-violation? (condition-predicate G4ba4@G4b9f)) (set! G4bb1@&no-infinities-rtd G4ba4@G4b9f) (set! G4bb3@&no-infinities-rcd G4ba8@G4ba0) (set! G4bb9@G4bb4 (make-record-type-descriptor '&no-nans G4a36@G4a31 'G4bb7 '#f '#f '#())) (set! G4bbb@G4bb6 '#f) (set! G4bbd@G4bb5 (make-record-constructor-descriptor G4bb9@G4bb4 G4a3a@G4a32 G4bbb@G4bb6)) (set! G4bc0@p? (record-predicate G4bb9@G4bb4)) (set! G4bc2@make-no-nans-violation (record-constructor G4bbd@G4bb5)) (set! G4bc4@no-nans-violation? (condition-predicate G4bb9@G4bb4)) (set! G4bc6@&no-nans-rtd G4bb9@G4bb4) (set! G4bc8@&no-nans-rcd G4bbd@G4bb5) (begin (set! G4cb9@G4bc8@&no-nans-rcd G4bc8@&no-nans-rcd) (set! G4cb8@G4bc6@&no-nans-rtd G4bc6@&no-nans-rtd) (set! G4cb7@G4bc4@no-nans-violation? G4bc4@no-nans-violation?) (set! G4cb6@G4bc2@make-no-nans-violation G4bc2@make-no-nans-violation) (set! G4cb5@G4bc0@p? G4bc0@p?) (set! G4cb4@G4bbd@G4bb5 G4bbd@G4bb5) (set! G4cb3@G4bbb@G4bb6 G4bbb@G4bb6) (set! G4cb2@G4bb9@G4bb4 G4bb9@G4bb4) (set! G4cb1@G4bb3@&no-infinities-rcd G4bb3@&no-infinities-rcd) (set! G4cb0@G4bb1@&no-infinities-rtd G4bb1@&no-infinities-rtd) (set! G4caf@G4baf@no-infinities-violation? G4baf@no-infinities-violation?) (set! G4cae@G4bad@make-no-infinities-violation G4bad@make-no-infinities-violation) (set! G4cad@G4bab@p? G4bab@p?) (set! G4cac@G4ba8@G4ba0 G4ba8@G4ba0) (set! G4cab@G4ba6@G4ba1 G4ba6@G4ba1) (set! G4caa@G4ba4@G4b9f G4ba4@G4b9f) (set! G4ca9@G4b9e@&i/o-encoding-rcd G4b9e@&i/o-encoding-rcd) (set! G4ca8@G4b9c@&i/o-encoding-rtd G4b9c@&i/o-encoding-rtd) (set! G4ca7@G4b9a@i/o-encoding-error-char G4b9a@i/o-encoding-error-char) (set! G4ca6@G4b98@i/o-encoding-error? G4b98@i/o-encoding-error?) (set! G4ca5@G4b96@G4b85 G4b96@G4b85) (set! G4ca4@G4b94@make-i/o-encoding-error G4b94@make-i/o-encoding-error) (set! G4ca3@G4b92@p? G4b92@p?) (set! G4ca2@G4b8f@G4b87 G4b8f@G4b87) (set! G4ca1@G4b8d@G4b88 G4b8d@G4b88) (set! G4ca0@G4b8b@G4b86 G4b8b@G4b86) (set! G4c9f@G4b84@&i/o-decoding-rcd G4b84@&i/o-decoding-rcd) (set! G4c9e@G4b82@&i/o-decoding-rtd G4b82@&i/o-decoding-rtd) (set! G4c9d@G4b80@i/o-decoding-error? G4b80@i/o-decoding-error?) (set! G4c9c@G4b7e@make-i/o-decoding-error G4b7e@make-i/o-decoding-error) (set! G4c9b@G4b7c@p? G4b7c@p?) (set! G4c9a@G4b79@G4b71 G4b79@G4b71) (set! G4c99@G4b77@G4b72 G4b77@G4b72) (set! G4c98@G4b75@G4b70 G4b75@G4b70) (set! G4c97@G4b6f@&i/o-port-rcd G4b6f@&i/o-port-rcd) (set! G4c96@G4b6d@&i/o-port-rtd G4b6d@&i/o-port-rtd) (set! G4c95@G4b6b@i/o-error-port G4b6b@i/o-error-port) (set! G4c94@G4b69@i/o-port-error? G4b69@i/o-port-error?) (set! G4c93@G4b67@G4b56 G4b67@G4b56) (set! G4c92@G4b65@make-i/o-port-error G4b65@make-i/o-port-error) (set! G4c91@G4b63@p? G4b63@p?) (set! G4c90@G4b60@G4b58 G4b60@G4b58) (set! G4c8f@G4b5e@G4b59 G4b5e@G4b59) (set! G4c8e@G4b5c@G4b57 G4b5c@G4b57) (set! G4c8d@G4b55@&i/o-file-does-not-exist-rcd G4b55@&i/o-file-does-not-exist-rcd) (set! G4c8c@G4b53@&i/o-file-does-not-exist-rtd G4b53@&i/o-file-does-not-exist-rtd) (set! G4c8b@G4b51@i/o-file-does-not-exist-error? G4b51@i/o-file-does-not-exist-error?) (set! G4c8a@G4b4f@make-i/o-file-does-not-exist-error G4b4f@make-i/o-file-does-not-exist-error) (set! G4c89@G4b4d@p? G4b4d@p?) (set! G4c88@G4b4a@G4b42 G4b4a@G4b42) (set! G4c87@G4b48@G4b43 G4b48@G4b43) (set! G4c86@G4b46@G4b41 G4b46@G4b41) (set! G4c85@G4b40@&i/o-file-already-exists-rcd G4b40@&i/o-file-already-exists-rcd) (set! G4c84@G4b3e@&i/o-file-already-exists-rtd G4b3e@&i/o-file-already-exists-rtd) (set! G4c83@G4b3c@i/o-file-already-exists-error? G4b3c@i/o-file-already-exists-error?) (set! G4c82@G4b3a@make-i/o-file-already-exists-error G4b3a@make-i/o-file-already-exists-error) (set! G4c81@G4b38@p? G4b38@p?) (set! G4c80@G4b35@G4b2d G4b35@G4b2d) (set! G4c7f@G4b33@G4b2e G4b33@G4b2e) (set! G4c7e@G4b31@G4b2c G4b31@G4b2c) (set! G4c7d@G4b2b@&i/o-file-is-read-only-rcd G4b2b@&i/o-file-is-read-only-rcd) (set! G4c7c@G4b29@&i/o-file-is-read-only-rtd G4b29@&i/o-file-is-read-only-rtd) (set! G4c7b@G4b27@i/o-file-is-read-only-error? G4b27@i/o-file-is-read-only-error?) (set! G4c7a@G4b25@make-i/o-file-is-read-only-error G4b25@make-i/o-file-is-read-only-error) (set! G4c79@G4b23@p? G4b23@p?) (set! G4c78@G4b20@G4b18 G4b20@G4b18) (set! G4c77@G4b1e@G4b19 G4b1e@G4b19) (set! G4c76@G4b1c@G4b17 G4b1c@G4b17) (set! G4c75@G4b16@&i/o-file-protection-rcd G4b16@&i/o-file-protection-rcd) (set! G4c74@G4b14@&i/o-file-protection-rtd G4b14@&i/o-file-protection-rtd) (set! G4c73@G4b12@i/o-file-protection-error? G4b12@i/o-file-protection-error?) (set! G4c72@G4b10@make-i/o-file-protection-error G4b10@make-i/o-file-protection-error) (set! G4c71@G4b0e@p? G4b0e@p?) (set! G4c70@G4b0b@G4b03 G4b0b@G4b03) (set! G4c6f@G4b09@G4b04 G4b09@G4b04) (set! G4c6e@G4b07@G4b02 G4b07@G4b02) (set! G4c6d@G4b01@&i/o-filename-rcd G4b01@&i/o-filename-rcd) (set! G4c6c@G4aff@&i/o-filename-rtd G4aff@&i/o-filename-rtd) (set! G4c6b@G4afd@i/o-error-filename G4afd@i/o-error-filename) (set! G4c6a@G4afb@i/o-filename-error? G4afb@i/o-filename-error?) (set! G4c69@G4af9@G4ae8 G4af9@G4ae8) (set! G4c68@G4af7@make-i/o-filename-error G4af7@make-i/o-filename-error) (set! G4c67@G4af5@p? G4af5@p?) (set! G4c66@G4af2@G4aea G4af2@G4aea) (set! G4c65@G4af0@G4aeb G4af0@G4aeb) (set! G4c64@G4aee@G4ae9 G4aee@G4ae9) (set! G4c63@G4ae7@&i/o-invalid-position-rcd G4ae7@&i/o-invalid-position-rcd) (set! G4c62@G4ae5@&i/o-invalid-position-rtd G4ae5@&i/o-invalid-position-rtd) (set! G4c61@G4ae3@i/o-error-position G4ae3@i/o-error-position) (set! G4c60@G4ae1@i/o-invalid-position-error? G4ae1@i/o-invalid-position-error?) (set! G4c5f@G4adf@G4ace G4adf@G4ace) (set! G4c5e@G4add@make-i/o-invalid-position-error G4add@make-i/o-invalid-position-error) (set! G4c5d@G4adb@p? G4adb@p?) (set! G4c5c@G4ad8@G4ad0 G4ad8@G4ad0) (set! G4c5b@G4ad6@G4ad1 G4ad6@G4ad1) (set! G4c5a@G4ad4@G4acf G4ad4@G4acf) (set! G4c59@G4acd@&i/o-write-rcd G4acd@&i/o-write-rcd) (set! G4c58@G4acb@&i/o-write-rtd G4acb@&i/o-write-rtd) (set! G4c57@G4ac9@i/o-write-error? G4ac9@i/o-write-error?) (set! G4c56@G4ac7@make-i/o-write-error G4ac7@make-i/o-write-error) (set! G4c55@G4ac5@p? G4ac5@p?) (set! G4c54@G4ac2@G4aba G4ac2@G4aba) (set! G4c53@G4ac0@G4abb G4ac0@G4abb) (set! G4c52@G4abe@G4ab9 G4abe@G4ab9) (set! G4c51@G4ab8@&i/o-read-rcd G4ab8@&i/o-read-rcd) (set! G4c50@G4ab6@&i/o-read-rtd G4ab6@&i/o-read-rtd) (set! G4c4f@G4ab4@i/o-read-error? G4ab4@i/o-read-error?) (set! G4c4e@G4ab2@make-i/o-read-error G4ab2@make-i/o-read-error) (set! G4c4d@G4ab0@p? G4ab0@p?) (set! G4c4c@G4aad@G4aa5 G4aad@G4aa5) (set! G4c4b@G4aab@G4aa6 G4aab@G4aa6) (set! G4c4a@G4aa9@G4aa4 G4aa9@G4aa4) (set! G4c49@G4aa3@&i/o-rcd G4aa3@&i/o-rcd) (set! G4c48@G4aa1@&i/o-rtd G4aa1@&i/o-rtd) (set! G4c47@G4a9f@i/o-error? G4a9f@i/o-error?) (set! G4c46@G4a9d@make-i/o-error G4a9d@make-i/o-error) (set! G4c45@G4a9b@p? G4a9b@p?) (set! G4c44@G4a98@G4a90 G4a98@G4a90) (set! G4c43@G4a96@G4a91 G4a96@G4a91) (set! G4c42@G4a94@G4a8f G4a94@G4a8f) (set! G4c41@G4a8e@&undefined-rcd G4a8e@&undefined-rcd) (set! G4c40@G4a8c@&undefined-rtd G4a8c@&undefined-rtd) (set! G4c3f@G4a8a@undefined-violation? G4a8a@undefined-violation?) (set! G4c3e@G4a88@make-undefined-violation G4a88@make-undefined-violation) (set! G4c3d@G4a86@p? G4a86@p?) (set! G4c3c@G4a83@G4a7b G4a83@G4a7b) (set! G4c3b@G4a81@G4a7c G4a81@G4a7c) (set! G4c3a@G4a7f@G4a7a G4a7f@G4a7a) (set! G4c39@G4a79@&syntax-rcd G4a79@&syntax-rcd) (set! G4c38@G4a77@&syntax-rtd G4a77@&syntax-rtd) (set! G4c37@G4a75@syntax-violation-subform G4a75@syntax-violation-subform) (set! G4c36@G4a73@syntax-violation-form G4a73@syntax-violation-form) (set! G4c35@G4a71@syntax-violation? G4a71@syntax-violation?) (set! G4c34@G4a6f@G4a5c G4a6f@G4a5c) (set! G4c33@G4a6d@G4a5b G4a6d@G4a5b) (set! G4c32@G4a6b@make-syntax-violation G4a6b@make-syntax-violation) (set! G4c31@G4a69@p? G4a69@p?) (set! G4c30@G4a66@G4a5e G4a66@G4a5e) (set! G4c2f@G4a64@G4a5f G4a64@G4a5f) (set! G4c2e@G4a62@G4a5d G4a62@G4a5d) (set! G4c2d@G4a5a@&lexical-rcd G4a5a@&lexical-rcd) (set! G4c2c@G4a58@&lexical-rtd G4a58@&lexical-rtd) (set! G4c2b@G4a56@lexical-violation? G4a56@lexical-violation?) (set! G4c2a@G4a54@make-lexical-violation G4a54@make-lexical-violation) (set! G4c29@G4a52@p? G4a52@p?) (set! G4c28@G4a4f@G4a47 G4a4f@G4a47) (set! G4c27@G4a4d@G4a48 G4a4d@G4a48) (set! G4c26@G4a4b@G4a46 G4a4b@G4a46) (set! G4c25@G4a45@&implementation-restriction-rcd G4a45@&implementation-restriction-rcd) (set! G4c24@G4a43@&implementation-restriction-rtd G4a43@&implementation-restriction-rtd) (set! G4c23@G4a41@implementation-restriction-violation? G4a41@implementation-restriction-violation?) (set! G4c22@G4a3f@make-implementation-restriction-violation G4a3f@make-implementation-restriction-violation) (set! G4c21@G4a3d@p? G4a3d@p?) (set! G4c20@G4a3a@G4a32 G4a3a@G4a32) (set! G4c1f@G4a38@G4a33 G4a38@G4a33) (set! G4c1e@G4a36@G4a31 G4a36@G4a31) (set! G4c1d@G4a30@&non-continuable-rcd G4a30@&non-continuable-rcd) (set! G4c1c@G4a2e@&non-continuable-rtd G4a2e@&non-continuable-rtd) (set! G4c1b@G4a2c@non-continuable-violation? G4a2c@non-continuable-violation?) (set! G4c1a@G4a2a@make-non-continuable-violation G4a2a@make-non-continuable-violation) (set! G4c19@G4a28@p? G4a28@p?) (set! G4c18@G4a25@G4a1d G4a25@G4a1d) (set! G4c17@G4a23@G4a1e G4a23@G4a1e) (set! G4c16@G4a21@G4a1c G4a21@G4a1c) (set! G4c15@G4a1b@&who-rcd G4a1b@&who-rcd) (set! G4c14@G4a19@&who-rtd G4a19@&who-rtd) (set! G4c13@G4a17@condition-who G4a17@condition-who) (set! G4c12@G4a15@who-condition? G4a15@who-condition?) (set! G4c11@G4a13@G4a02 G4a13@G4a02) (set! G4c10@G4a11@make-who-condition G4a11@make-who-condition) (set! G4c0f@G4a0f@p? G4a0f@p?) (set! G4c0e@G4a0c@G4a04 G4a0c@G4a04) (set! G4c0d@G4a0a@G4a05 G4a0a@G4a05) (set! G4c0c@G4a08@G4a03 G4a08@G4a03) (set! G4c0b@G4a01@&irritants-rcd G4a01@&irritants-rcd) (set! G4c0a@G49ff@&irritants-rtd G49ff@&irritants-rtd) (set! G4c09@G49fd@condition-irritants G49fd@condition-irritants) (set! G4c08@G49fb@irritants-condition? G49fb@irritants-condition?) (set! G4c07@G49f9@G49e8 G49f9@G49e8) (set! G4c06@G49f7@make-irritants-condition G49f7@make-irritants-condition) (set! G4c05@G49f5@p? G49f5@p?) (set! G4c04@G49f2@G49ea G49f2@G49ea) (set! G4c03@G49f0@G49eb G49f0@G49eb) (set! G4c02@G49ee@G49e9 G49ee@G49e9) (set! G4c01@G49e7@&assertion-rcd G49e7@&assertion-rcd) (set! G4c00@G49e5@&assertion-rtd G49e5@&assertion-rtd) (set! G4bff@G49e3@assertion-violation? G49e3@assertion-violation?) (set! G4bfe@G49e1@make-assertion-violation G49e1@make-assertion-violation) (set! G4bfd@G49df@p? G49df@p?) (set! G4bfc@G49dc@G49d4 G49dc@G49d4) (set! G4bfb@G49da@G49d5 G49da@G49d5) (set! G4bfa@G49d8@G49d3 G49d8@G49d3) (set! G4bf9@G49d2@&violation-rcd G49d2@&violation-rcd) (set! G4bf8@G49d0@&violation-rtd G49d0@&violation-rtd) (set! G4bf7@G49ce@violation? G49ce@violation?) (set! G4bf6@G49cc@make-violation G49cc@make-violation) (set! G4bf5@G49ca@p? G49ca@p?) (set! G4bf4@G49c7@G49bf G49c7@G49bf) (set! G4bf3@G49c5@G49c0 G49c5@G49c0) (set! G4bf2@G49c3@G49be G49c3@G49be) (set! G4bf1@G49bd@&error-rcd G49bd@&error-rcd) (set! G4bf0@G49bb@&error-rtd G49bb@&error-rtd) (set! G4bef@G49b9@error? G49b9@error?) (set! G4bee@G49b7@make-error G49b7@make-error) (set! G4bed@G49b5@p? G49b5@p?) (set! G4bec@G49b2@G49aa G49b2@G49aa) (set! G4beb@G49b0@G49ab G49b0@G49ab) (set! G4bea@G49ae@G49a9 G49ae@G49a9) (set! G4be9@G49a8@&serious-rcd G49a8@&serious-rcd) (set! G4be8@G49a6@&serious-rtd G49a6@&serious-rtd) (set! G4be7@G49a4@serious-condition? G49a4@serious-condition?) (set! G4be6@G49a2@make-serious-condition G49a2@make-serious-condition) (set! G4be5@G49a0@p? G49a0@p?) (set! G4be4@G499d@G4995 G499d@G4995) (set! G4be3@G499b@G4996 G499b@G4996) (set! G4be2@G4999@G4994 G4999@G4994) (set! G4be1@G4993@&warning-rcd G4993@&warning-rcd) (set! G4be0@G4991@&warning-rtd G4991@&warning-rtd) (set! G4bdf@G498f@warning? G498f@warning?) (set! G4bde@G498d@make-warning G498d@make-warning) (set! G4bdd@G498b@p? G498b@p?) (set! G4bdc@G4988@G4980 G4988@G4980) (set! G4bdb@G4986@G4981 G4986@G4981) (set! G4bda@G4984@G497f G4984@G497f) (set! G4bd9@G497e@&message-rcd G497e@&message-rcd) (set! G4bd8@G497c@&message-rtd G497c@&message-rtd) (set! G4bd7@G497a@condition-message G497a@condition-message) (set! G4bd6@G4978@message-condition? G4978@message-condition?) (set! G4bd5@G4976@G4965 G4976@G4965) (set! G4bd4@G4974@make-message-condition G4974@make-message-condition) (set! G4bd3@G4972@p? G4972@p?) (set! G4bd2@G496f@G4967 G496f@G4967) (set! G4bd1@G496d@G4968 G496d@G4968) (set! G4bd0@G496b@G4966 G496b@G4966) (set! G4bcf@G4923@&condition-rcd G4923@&condition-rcd) (set! G4bce@G4921@&condition-rtd G4921@&condition-rtd) (set! G4bcd@G491f@make-&condition G491f@make-&condition) (set! G4bcc@G491d@&condition? G491d@&condition?) (set! G4bcb@G491a@G4912 G491a@G4912) (set! G4bca@G4918@G4913 G4918@G4913) (set! G4bc9@G4916@G4911 G4916@G4911)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2947@G28fc@current-primitive-locations (lambda (G5099@x) ((lambda (G509b@t) (if G509b@t (cdr G509b@t) '#f)) (assq G5099@x '((&no-nans-rcd . G4cb9@G4bc8@&no-nans-rcd) (&no-nans-rtd . G4cb8@G4bc6@&no-nans-rtd) (&no-infinities-rcd . G4cb1@G4bb3@&no-infinities-rcd) (&no-infinities-rtd . G4cb0@G4bb1@&no-infinities-rtd) (&i/o-encoding-rcd . G4ca9@G4b9e@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4ca8@G4b9c@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4c9f@G4b84@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4c9e@G4b82@&i/o-decoding-rtd) (&i/o-port-rcd . G4c97@G4b6f@&i/o-port-rcd) (&i/o-port-rtd . G4c96@G4b6d@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4c8d@G4b55@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4c8c@G4b53@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4c85@G4b40@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4c84@G4b3e@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4c7d@G4b2b@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4c7c@G4b29@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4c75@G4b16@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4c74@G4b14@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4c6d@G4b01@&i/o-filename-rcd) (&i/o-filename-rtd . G4c6c@G4aff@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4c63@G4ae7@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4c62@G4ae5@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4c59@G4acd@&i/o-write-rcd) (&i/o-write-rtd . G4c58@G4acb@&i/o-write-rtd) (&i/o-read-rcd . G4c51@G4ab8@&i/o-read-rcd) (&i/o-read-rtd . G4c50@G4ab6@&i/o-read-rtd) (&i/o-rcd . G4c49@G4aa3@&i/o-rcd) (&i/o-rtd . G4c48@G4aa1@&i/o-rtd) (&undefined-rcd . G4c41@G4a8e@&undefined-rcd) (&undefined-rtd . G4c40@G4a8c@&undefined-rtd) (&syntax-rcd . G4c39@G4a79@&syntax-rcd) (&syntax-rtd . G4c38@G4a77@&syntax-rtd) (&lexical-rcd . G4c2d@G4a5a@&lexical-rcd) (&lexical-rtd . G4c2c@G4a58@&lexical-rtd) (&implementation-restriction-rcd . G4c25@G4a45@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c24@G4a43@&implementation-restriction-rtd) (&non-continuable-rcd . G4c1d@G4a30@&non-continuable-rcd) (&non-continuable-rtd . G4c1c@G4a2e@&non-continuable-rtd) (&who-rcd . G4c15@G4a1b@&who-rcd) (&who-rtd . G4c14@G4a19@&who-rtd) (&irritants-rcd . G4c0b@G4a01@&irritants-rcd) (&irritants-rtd . G4c0a@G49ff@&irritants-rtd) (&assertion-rcd . G4c01@G49e7@&assertion-rcd) (&assertion-rtd . G4c00@G49e5@&assertion-rtd) (&violation-rcd . G4bf9@G49d2@&violation-rcd) (&violation-rtd . G4bf8@G49d0@&violation-rtd) (&error-rcd . G4bf1@G49bd@&error-rcd) (&error-rtd . G4bf0@G49bb@&error-rtd) (&serious-rcd . G4be9@G49a8@&serious-rcd) (&serious-rtd . G4be8@G49a6@&serious-rtd) (&warning-rcd . G4be1@G4993@&warning-rcd) (&warning-rtd . G4be0@G4991@&warning-rtd) (&message-rcd . G4bd9@G497e@&message-rcd) (&message-rtd . G4bd8@G497c@&message-rtd) (&condition-rcd . G4bcf@G4923@&condition-rcd) (&condition-rtd . G4bce@G4921@&condition-rtd) (syntax-error . G4903@G301a@syntax-error) (syntax-dispatch . G4897@G2f33@syntax-dispatch) (load . G4d8b@G4ccf@load) (interaction-environment . G490b@G302a@interaction-environment) (make-parameter . G28f6@G2824@make-parameter) (make-variable-transformer . G4855@G2d7a@make-variable-transformer) (identifier? . G4906@G3020@identifier?) (generate-temporaries . G48fc@G300c@generate-temporaries) (free-identifier=? . G48fd@G300e@free-identifier=?) (syntax->datum . G4908@G3024@syntax->datum) (datum->syntax . G4907@G3022@datum->syntax) (bound-identifier=? . G48fe@G3010@bound-identifier=?) (make-i/o-write-error . G4c56@G4ac7@make-i/o-write-error) (make-i/o-read-error . G4c4e@G4ab2@make-i/o-read-error) (make-i/o-port-error . G4c92@G4b65@make-i/o-port-error) (make-i/o-invalid-position-error . G4c5e@G4add@make-i/o-invalid-position-error) (make-i/o-filename-error . G4c68@G4af7@make-i/o-filename-error) (make-i/o-file-protection-error . G4c72@G4b10@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4c7a@G4b25@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4c8a@G4b4f@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4c82@G4b3a@make-i/o-file-already-exists-error) (make-i/o-error . G4c46@G4a9d@make-i/o-error) (make-i/o-encoding-error . G4ca4@G4b94@make-i/o-encoding-error) (make-i/o-decoding-error . G4c9c@G4b7e@make-i/o-decoding-error) (i/o-write-error? . G4c57@G4ac9@i/o-write-error?) (i/o-read-error? . G4c4f@G4ab4@i/o-read-error?) (i/o-port-error? . G4c94@G4b69@i/o-port-error?) (i/o-invalid-position-error? . G4c60@G4ae1@i/o-invalid-position-error?) (i/o-filename-error? . G4c6a@G4afb@i/o-filename-error?) (i/o-file-protection-error? . G4c73@G4b12@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4c7b@G4b27@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4c8b@G4b51@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4c83@G4b3c@i/o-file-already-exists-error?) (i/o-error? . G4c47@G4a9f@i/o-error?) (i/o-error-position . G4c61@G4ae3@i/o-error-position) (i/o-error-port . G4c95@G4b6b@i/o-error-port) (i/o-error-filename . G4c6b@G4afd@i/o-error-filename) (i/o-encoding-error? . G4ca6@G4b98@i/o-encoding-error?) (i/o-encoding-error-char . G4ca7@G4b9a@i/o-encoding-error-char) (i/o-decoding-error? . G4c9d@G4b80@i/o-decoding-error?) (scheme-report-environment . G48f3@G2ffa@scheme-report-environment) (null-environment . G48f2@G2ff8@null-environment) (command-line . G4d88@G4cc9@command-line) (eval . G48f5@G2ffe@eval) (environment . G48f1@G2ff6@environment) (who-condition? . G4c12@G4a15@who-condition?) (warning? . G4bdf@G498f@warning?) (violation? . G4bf7@G49ce@violation?) (undefined-violation? . G4c3f@G4a8a@undefined-violation?) (syntax-violation? . G4c35@G4a71@syntax-violation?) (syntax-violation-subform . G4c37@G4a75@syntax-violation-subform) (syntax-violation-form . G4c36@G4a73@syntax-violation-form) (syntax-violation . G4905@G301e@syntax-violation) (serious-condition? . G4be7@G49a4@serious-condition?) (non-continuable-violation? . G4c1b@G4a2c@non-continuable-violation?) (message-condition? . G4bd6@G4978@message-condition?) (make-who-condition . G4c10@G4a11@make-who-condition) (make-warning . G4bde@G498d@make-warning) (make-violation . G4bf6@G49cc@make-violation) (make-undefined-violation . G4c3e@G4a88@make-undefined-violation) (make-syntax-violation . G4c32@G4a6b@make-syntax-violation) (make-serious-condition . G4be6@G49a2@make-serious-condition) (make-non-continuable-violation . G4c1a@G4a2a@make-non-continuable-violation) (make-message-condition . G4bd4@G4974@make-message-condition) (make-lexical-violation . G4c2a@G4a54@make-lexical-violation) (make-irritants-condition . G4c06@G49f7@make-irritants-condition) (make-implementation-restriction-violation . G4c22@G4a3f@make-implementation-restriction-violation) (make-error . G4bee@G49b7@make-error) (make-assertion-violation . G4bfe@G49e1@make-assertion-violation) (lexical-violation? . G4c2b@G4a56@lexical-violation?) (irritants-condition? . G4c08@G49fb@irritants-condition?) (implementation-restriction-violation? . G4c23@G4a41@implementation-restriction-violation?) (error? . G4bef@G49b9@error?) (condition-who . G4c13@G4a17@condition-who) (condition-message . G4bd7@G497a@condition-message) (condition-irritants . G4c09@G49fd@condition-irritants) (assertion-violation? . G4bff@G49e3@assertion-violation?) (no-nans-violation? . G4cb7@G4bc4@no-nans-violation?) (no-infinities-violation? . G4caf@G4baf@no-infinities-violation?) (make-no-nans-violation . G4cb6@G4bc2@make-no-nans-violation) (make-no-infinities-violation . G4cae@G4bad@make-no-infinities-violation)))))) (G2b68@G2a0d@install-library 'G5075 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G5049) (format . G5044) (string-split . G503a) (call-process . G5034) (set-current-directory! . G5030) (expand-path . G502f) (current-directory . G502e) (%spawn . G502d) (%waitpid . G502c) (%ffi-supported? . G502b) (%ffi-pointer-ref . G502a) (%ffi-pointer->string . G5029) (%ffi-call->string-or-zero . G5028) (%ffi-call->double . G5027) (%ffi-call->void* . G5026) (%ffi-call->void . G5025) (%ffi-call->int . G5024) (%ffi-lookup . G5023) (%ffi-open . G5022) (%fork . G5021) (%pipe . G5020) (p . G501f) (string-upcase . G5011) (string-titlecase . G5010) (string-normalize-nfkd . G500f) (string-normalize-nfkc . G500e) (string-normalize-nfd . G500d) (string-normalize-nfc . G500c) (string-foldcase . G500b) (string-downcase . G500a) (string-ci>? . G5009) (string-ci>=? . G5008) (string-ci=? . G5007) (string-ci<? . G5006) (string-ci<=? . G5005) (char-whitespace? . G5004) (char-upper-case? . G5003) (char-title-case? . G5002) (char-numeric? . G5001) (char-lower-case? . G5000) (char-general-category . G4fff) (char-upcase . G4ffe) (char-titlecase . G4ffd) (char-foldcase . G4ffc) (char-downcase . G4ffb) (char-ci>? . G4ffa) (char-ci>=? . G4ff9) (char-ci=? . G4ff8) (char-ci<? . G4ff7) (char-ci<=? . G4ff6) (char-alphabetic? . G4ff5) (make-variable-transformer . G2d79) (identifier? . G301f) (generate-temporaries . G300b) (free-identifier=? . G300d) (syntax->datum . G3023) (datum->syntax . G3021) (bound-identifier=? . G300f) (record-type-descriptor? . G4ff4) (record-predicate . G4ff3) (record-mutator . G4ff2) (record-constructor . G4ff1) (record-accessor . G4ff0) (make-record-type-descriptor . G4fef) (make-record-constructor-descriptor . G4fee) (record? . G4fed) (record-type-uid . G4fec) (record-type-sealed? . G4feb) (record-type-parent . G4fea) (record-type-opaque? . G4fe9) (record-type-name . G4fe8) (record-type-generative? . G4fe7) (record-type-field-names . G4fe6) (record-rtd . G4fe5) (record-field-mutable? . G4fe4) (delete-file . G4fe3) (file-exists? . G4fe2) (vector-sort! . G4fe1) (vector-sort . G4fe0) (list-sort . G4fdf) (symbol-hash . G4fde) (string-ci-hash . G4fdd) (string-hash . G4fdc) (equal-hash . G4fdb) (hashtable-equivalence-function . G4fda) (make-hashtable . G4fd9) (hashtable-hash-function . G4fd8) (make-eqv-hashtable . G4fd7) (make-eq-hashtable . G4fd6) (hashtable? . G4fd5) (hashtable-update! . G4fd4) (hashtable-size . G4fd3) (hashtable-set! . G4fd2) (hashtable-ref . G4fd1) (hashtable-mutable? . G4fd0) (hashtable-keys . G4fcf) (hashtable-entries . G4fce) (hashtable-delete! . G4fcd) (hashtable-copy . G4fcc) (hashtable-contains? . G4fcb) (hashtable-clear! . G4fca) (call-with-output-file . G4fc9) (call-with-input-file . G4fc8) (write-char . G4fc7) (write . G4fc6) (with-output-to-file . G4fc5) (with-input-from-file . G4fc4) (read-char . G4fc3) (read . G4fc2) (peek-char . G4fc1) (open-output-file . G4fc0) (open-input-file . G4fbf) (newline . G4fbe) (display . G4fbd) (close-output-port . G4fbc) (close-input-port . G4fbb) (eof-object? . G4fba) (eof-object . G4fb9) (current-error-port . G4fb8) (current-output-port . G4fb7) (current-input-port . G4fb6) (output-port? . G4fb5) (input-port? . G4fb4) (utf-8-codec . G4fb3) (utf-16-codec . G4fb2) (transcoder-error-handling-mode . G4fb1) (transcoder-eol-style . G4fb0) (transcoder-codec . G4faf) (transcoded-port . G4fae) (textual-port? . G4fad) (string->bytevector . G4fac) (standard-output-port . G4fab) (standard-input-port . G4faa) (standard-error-port . G4fa9) (set-port-position! . G4fa8) (put-u8 . G4fa7) (put-string . G4fa6) (put-datum . G4fa5) (put-char . G4fa4) (put-bytevector . G4fa3) (port? . G4fa2) (port-transcoder . G4fa1) (port-position . G4fa0) (port-has-set-port-position!? . G4f9f) (port-has-port-position? . G4f9e) (port-eof? . G4f9d) (output-port-buffer-mode . G4f9c) (open-string-output-port . G4f9b) (open-string-input-port . G4f9a) (open-file-output-port . G4f99) (open-file-input/output-port . G4f98) (open-file-input-port . G4f97) (open-bytevector-output-port . G4f96) (open-bytevector-input-port . G4f95) (native-transcoder . G4f94) (native-eol-style . G4f93) (make-transcoder . G4f92) (latin-1-codec . G4f91) (make-i/o-write-error . G4ac6) (make-i/o-read-error . G4ab1) (make-i/o-port-error . G4b64) (make-i/o-invalid-position-error . G4adc) (make-i/o-filename-error . G4af6) (make-i/o-file-protection-error . G4b0f) (make-i/o-file-is-read-only-error . G4b24) (make-i/o-file-does-not-exist-error . G4b4e) (make-i/o-file-already-exists-error . G4b39) (make-i/o-error . G4a9c) (make-i/o-encoding-error . G4b93) (make-i/o-decoding-error . G4b7d) (make-custom-textual-output-port . G4f90) (make-custom-textual-input/output-port . G4f8f) (make-custom-textual-input-port . G4f8e) (make-custom-binary-output-port . G4f8d) (make-custom-binary-input/output-port . G4f8c) (make-custom-binary-input-port . G4f8b) (make-bytevector . G4f8a) (lookahead-u8 . G4f89) (lookahead-char . G4f88) (i/o-write-error? . G4ac8) (i/o-read-error? . G4ab3) (i/o-port-error? . G4b68) (i/o-invalid-position-error? . G4ae0) (i/o-filename-error? . G4afa) (i/o-file-protection-error? . G4b11) (i/o-file-is-read-only-error? . G4b26) (i/o-file-does-not-exist-error? . G4b50) (i/o-file-already-exists-error? . G4b3b) (i/o-error? . G4a9e) (i/o-error-position . G4ae2) (i/o-error-port . G4b6a) (i/o-error-filename . G4afc) (i/o-encoding-error? . G4b97) (i/o-encoding-error-char . G4b99) (i/o-decoding-error? . G4b7f) (get-u8 . G4f87) (get-string-n! . G4f86) (get-string-n . G4f85) (get-string-all . G4f84) (get-line . G4f83) (get-datum . G4f82) (get-char . G4f81) (get-bytevector-some . G4f80) (get-bytevector-n! . G4f7f) (get-bytevector-n . G4f7e) (get-bytevector-all . G4f7d) (flush-output-port . G4f7c) (close-port . G4f7b) (exit . G4f73) (command-line . G4cc8) (string-fill! . G4f72) (string-set! . G4f71) (set-cdr! . G4f70) (set-car! . G4f6f) (remove . G4f6e) (remv . G4f6d) (remp . G4f6c) (remq . G4f6b) (partition . G4f6a) (memv . G4f69) (memq . G4f68) (memp . G4f67) (member . G4f66) (exists . G4f65) (for-all . G4f64) (fold-right . G4f63) (fold-left . G4f62) (find . G4f61) (filter . G4f60) (cons* . G4f5f) (assv . G4f5e) (assq . G4f5d) (assp . G4f5c) (assoc . G4f5b) (call-with-string-output-port . G4f5a) (call-with-port . G4f59) (call-with-bytevector-output-port . G4f58) (bytevector->string . G4f57) (buffer-mode? . G4f56) (binary-port? . G4f55) (with-exception-handler . G4f54) (raise-continuable . G4f53) (raise . G4f52) (eval . G2ffd) (environment . G2ff5) (make-enumeration . G4f51) (enum-set=? . G4f50) (enum-set-universe . G4f4f) (enum-set-union . G4f4e) (enum-set-subset? . G4f4d) (enum-set-projection . G4f4c) (enum-set-member? . G4f4b) (enum-set-intersection . G4f4a) (enum-set-indexer . G4f49) (enum-set-difference . G4f48) (enum-set-constructor . G4f47) (enum-set-complement . G4f46) (enum-set->list . G4f45) (who-condition? . G4a14) (warning? . G498e) (violation? . G49cd) (undefined-violation? . G4a89) (syntax-violation? . G4a70) (syntax-violation-subform . G4a74) (syntax-violation-form . G4a72) (syntax-violation . G301d) (simple-conditions . G4f44) (serious-condition? . G49a3) (non-continuable-violation? . G4a2b) (message-condition? . G4977) (make-who-condition . G4a10) (make-warning . G498c) (make-violation . G49cb) (make-undefined-violation . G4a87) (make-syntax-violation . G4a6a) (make-serious-condition . G49a1) (make-non-continuable-violation . G4a29) (make-message-condition . G4973) (make-lexical-violation . G4a53) (make-irritants-condition . G49f6) (make-implementation-restriction-violation . G4a3e) (make-error . G49b6) (make-assertion-violation . G49e0) (lexical-violation? . G4a55) (irritants-condition? . G49fa) (implementation-restriction-violation? . G4a40) (error? . G49b8) (condition-who . G4a16) (condition-predicate . G4f43) (condition-message . G4979) (condition-irritants . G49fc) (condition-accessor . G4f42) (condition . G4f41) (assertion-violation? . G49e2) (condition? . G4f40) (utf32->string . G4f3f) (utf16->string . G4f3e) (utf8->string . G4f3d) (uint-list->bytevector . G4f3c) (u8-list->bytevector . G4f3b) (string->utf8 . G4f3a) (string->utf32 . G4f39) (string->utf16 . G4f38) (sint-list->bytevector . G4f37) (native-endianness . G4f36) (bytevector? . G4f35) (bytevector=? . G4f34) (bytevector-uint-set! . G4f33) (bytevector-uint-ref . G4f32) (bytevector-u8-set! . G4f31) (bytevector-u8-ref . G4f30) (bytevector-u64-set! . G4f2f) (bytevector-u64-ref . G4f2e) (bytevector-u64-native-set! . G4f2d) (bytevector-u64-native-ref . G4f2c) (bytevector-u32-set! . G4f2b) (bytevector-u32-ref . G4f2a) (bytevector-u32-native-set! . G4f29) (bytevector-u32-native-ref . G4f28) (bytevector-u16-set! . G4f27) (bytevector-u16-ref . G4f26) (bytevector-u16-native-set! . G4f25) (bytevector-u16-native-ref . G4f24) (bytevector-sint-set! . G4f23) (bytevector-sint-ref . G4f22) (bytevector-s8-set! . G4f21) (bytevector-s8-ref . G4f20) (bytevector-s64-set! . G4f1f) (bytevector-s64-ref . G4f1e) (bytevector-s64-native-set! . G4f1d) (bytevector-s64-native-ref . G4f1c) (bytevector-s32-set! . G4f1b) (bytevector-s32-ref . G4f1a) (bytevector-s32-native-set! . G4f19) (bytevector-s32-native-ref . G4f18) (bytevector-s16-set! . G4f17) (bytevector-s16-ref . G4f16) (bytevector-s16-native-set! . G4f15) (bytevector-s16-native-ref . G4f14) (bytevector-length . G4f13) (bytevector-ieee-single-ref . G4f12) (bytevector-ieee-single-set! . G4f11) (bytevector-ieee-single-native-set! . G4f10) (bytevector-ieee-single-native-ref . G4f0f) (bytevector-ieee-double-set! . G4f0e) (bytevector-ieee-double-ref . G4f0d) (bytevector-ieee-double-native-set! . G4f0c) (bytevector-ieee-double-native-ref . G4f0b) (bytevector-fill! . G4f0a) (bytevector-copy! . G4f09) (bytevector-copy . G4f08) (bytevector->uint-list . G4f07) (bytevector->u8-list . G4f06) (bytevector->sint-list . G4f05) (no-nans-violation? . G4bc3) (no-infinities-violation? . G4bae) (make-no-nans-violation . G4bc1) (make-no-infinities-violation . G4bac) (real->flonum . G4f04) (flzero? . G4f03) (fltruncate . G4f02) (fltan . G4f01) (flsqrt . G4f00) (flsin . G4eff) (flround . G4efe) (flpositive? . G4efd) (flonum? . G4efc) (flodd? . G4efb) (flnumerator . G4efa) (flnegative? . G4ef9) (flnan? . G4ef8) (flmod0 . G4ef7) (flmod . G4ef6) (flmin . G4ef5) (flmax . G4ef4) (fllog . G4ef3) (flinteger? . G4ef2) (flinfinite? . G4ef1) (flfloor . G4ef0) (flfinite? . G4eef) (flexpt . G4eee) (flexp . G4eed) (fleven? . G4eec) (fldiv0-and-mod0 . G4eeb) (fldiv0 . G4eea) (fldiv-and-mod . G4ee9) (fldiv . G4ee8) (fldenominator . G4ee7) (flcos . G4ee6) (flceiling . G4ee5) (flatan . G4ee4) (flasin . G4ee3) (flacos . G4ee2) (flabs . G4ee1) (fl>? . G4ee0) (fl>=? . G4edf) (fl=? . G4ede) (fl<? . G4edd) (fl<=? . G4edc) (fl/ . G4edb) (fl- . G4eda) (fl+ . G4ed9) (fl* . G4ed8) (fixnum->flonum . G4ed7) (fxzero? . G4ed6) (fxxor . G4ed5) (fxrotate-bit-field . G4ed4) (fxreverse-bit-field . G4ed3) (fxpositive? . G4ed2) (fxodd? . G4ed1) (fxnot . G4ed0) (fxnegative? . G4ecf) (fxmod0 . G4ece) (fxmod . G4ecd) (fxmin . G4ecc) (fxmax . G4ecb) (fxlength . G4eca) (fxior . G4ec9) (fxif . G4ec8) (fxfirst-bit-set . G4ec7) (fxeven? . G4ec6) (fxdiv0-and-mod0 . G4ec5) (fxdiv0 . G4ec4) (fxdiv-and-mod . G4ec3) (fxdiv . G4ec2) (fxcopy-bit-field . G4ec1) (fxcopy-bit . G4ec0) (fxbit-set? . G4ebf) (fxbit-field . G4ebe) (fxbit-count . G4ebd) (fxarithmetic-shift-right . G4ebc) (fxarithmetic-shift-left . G4ebb) (fxarithmetic-shift . G4eba) (fxand . G4eb9) (fx>? . G4eb8) (fx>=? . G4eb7) (fx=? . G4eb6) (fx<? . G4eb5) (fx<=? . G4eb4) (fx-/carry . G4eb3) (fx- . G4eb2) (fx+/carry . G4eb1) (fx+ . G4eb0) (fx*/carry . G4eaf) (fx* . G4eae) (greatest-fixnum . G4ead) (least-fixnum . G4eac) (fixnum-width . G4eab) (fixnum? . G4eaa) (bitwise-rotate-bit-field . G4ea9) (bitwise-reverse-bit-field . G4ea8) (bitwise-length . G4ea7) (bitwise-if . G4ea6) (bitwise-first-bit-set . G4ea5) (bitwise-copy-bit-field . G4ea4) (bitwise-copy-bit . G4ea3) (bitwise-bit-set? . G4ea2) (bitwise-bit-field . G4ea1) (bitwise-bit-count . G4ea0) (bitwise-xor . G4e9f) (bitwise-ior . G4e9e) (bitwise-and . G4e9d) (bitwise-not . G4e9c) (bitwise-arithmetic-shift-right . G4e9b) (bitwise-arithmetic-shift-left . G4e9a) (bitwise-arithmetic-shift . G4e99) (zero? . G4e98) (vector? . G4e97) (vector-set! . G4e96) (vector-ref . G4e95) (vector-map . G4e94) (vector-length . G4e93) (vector-for-each . G4e92) (vector-fill! . G4e91) (vector->list . G4e90) (vector . G4e8f) (values . G4e8e) (truncate . G4e8d) (tan . G4e8c) (symbol? . G4e8b) (symbol=? . G4e8a) (symbol->string . G4e89) (substring . G4e88) (string? . G4e87) (string>? . G4e86) (string>=? . G4e85) (string=? . G4e84) (string<? . G4e83) (string<=? . G4e82) (string-ref . G4e81) (string-length . G4e80) (string-for-each . G4e7f) (string-copy . G4e7e) (string-append . G4e7d) (string->symbol . G4e7c) (string->number . G4e7b) (string->list . G4e7a) (string . G4e79) (sqrt . G4e78) (sin . G4e77) (round . G4e76) (reverse . G4e75) (real? . G4e74) (real-valued? . G4e73) (real-part . G4e72) (rationalize . G4e71) (rational? . G4e70) (rational-valued? . G4e6f) (procedure? . G4e6e) (positive? . G4e6d) (pair? . G4e6c) (odd? . G4e6b) (numerator . G4e6a) (number? . G4e69) (number->string . G4e68) (null? . G4e67) (not . G4e66) (negative? . G4e65) (nan? . G4e64) (min . G4e63) (max . G4e62) (map . G4e61) (make-vector . G4e60) (make-string . G4e5f) (make-rectangular . G4e5e) (make-polar . G4e5d) (magnitude . G4e5c) (log . G4e5b) (list? . G4e5a) (list-tail . G4e59) (list-ref . G4e58) (list->vector . G4e57) (list->string . G4e56) (list . G4e55) (length . G4e54) (lcm . G4e53) (integer? . G4e52) (integer-valued? . G4e51) (integer->char . G4e50) (infinite? . G4e4f) (inexact? . G4e4e) (inexact . G4e4d) (imag-part . G4e4c) (gcd . G4e4b) (for-each . G4e4a) (floor . G4e49) (finite? . G4e48) (expt . G4e47) (exp . G4e46) (exact? . G4e45) (exact-integer-sqrt . G4e44) (exact . G4e43) (even? . G4e42) (error . G4e41) (eqv? . G4e40) (equal? . G4e3f) (eq? . G4e3e) (dynamic-wind . G4e3d) (div0-and-mod0 . G4e3c) (mod0 . G4e3b) (div0 . G4e3a) (div-and-mod . G4e39) (mod . G4e38) (div . G4e37) (denominator . G4e36) (cos . G4e35) (cons . G4e34) (complex? . G4e33) (char? . G4e32) (char>? . G4e31) (char>=? . G4e30) (char=? . G4e2f) (char<? . G4e2e) (char<=? . G4e2d) (char->integer . G4e2c) (ceiling . G4e2b) (call-with-values . G4e2a) (call/cc . G4e29) (call-with-current-continuation . G4e28) (cddddr . G4e27) (cdddar . G4e26) (cddadr . G4e25) (cddaar . G4e24) (cdaddr . G4e23) (cdadar . G4e22) (cdaadr . G4e21) (cdaaar . G4e20) (cadddr . G4e1f) (caddar . G4e1e) (cadadr . G4e1d) (cadaar . G4e1c) (caaddr . G4e1b) (caadar . G4e1a) (caaadr . G4e19) (caaaar . G4e18) (cdddr . G4e17) (cddar . G4e16) (cdadr . G4e15) (cdaar . G4e14) (caddr . G4e13) (cadar . G4e12) (caadr . G4e11) (caaar . G4e10) (cddr . G4e0f) (cdar . G4e0e) (cadr . G4e0d) (caar . G4e0c) (cdr . G4e0b) (car . G4e0a) (boolean? . G4e09) (boolean=? . G4e08) (atan . G4e07) (assertion-violation . G4e06) (asin . G4e05) (apply . G4e04) (append . G4e03) (angle . G4e02) (acos . G4e01) (abs . G4e00) (/ . G4dff) (* . G4dfe) (- . G4dfd) (+ . G4dfc) (>= . G4dfb) (> . G4dfa) (= . G4df9) (<= . G4df8) (< . G4df7) (library . G4df6) (&no-nans . G4df5) (&no-infinities . G4df4) (&i/o-encoding . G4df3) (&i/o-decoding . G4df2) (&i/o-port . G4df1) (&i/o-file-does-not-exist . G4df0) (&i/o-file-already-exists . G4def) (&i/o-file-is-read-only . G4dee) (&i/o-file-protection . G4ded) (&i/o-filename . G4dec) (&i/o-invalid-position . G4deb) (&i/o-write . G4dea) (&i/o-read . G4de9) (&i/o . G4de8) (&undefined . G4de7) (&syntax . G4de6) (&lexical . G4de5) (&implementation-restriction . G4de4) (&non-continuable . G4de3) (&who . G4de2) (&irritants . G4de1) (&assertion . G4de0) (&violation . G4ddf) (&error . G4dde) (&serious . G4ddd) (&warning . G4ddc) (&message . G4ddb) (&condition . G4dda) (define-condition-type . G4dd9) (define-enumeration . G4dd8) (define-record-type . G4dd7) (parent-rtd . G4dd6) (nongenerative . G4dd5) (opaque . G4dd4) (sealed . G4dd3) (protocol . G4dd2) (parent . G4dd1) (immutable . G4dd0) (mutable . G4dcf) (fields . G4dce) (error-handling-mode . G4dcd) (file-options . G4dcc) (buffer-mode . G4dcb) (eol-style . G4dca) (guard . G4dc9) (unsyntax-splicing . G4dc6) (unsyntax . G4dc5) (unquote-splicing . G4dc4) (unquote . G4dc3) (_ . G4dc2) (else . G4dc1) (=> . G4dc0) (... . G4dbf) (assert . G4dbe) (endianness . G4dbd) (do . G4dba) (cond . G4db9) (let* . G4db8) (let . G4db7) (let*-values . G4db6) (let-values . G4db5) (identifier-syntax . G4db4) (with-syntax . G4db3) (quasisyntax . G4db2) (quasiquote . G4db1) (syntax-rules . G4db0) (include . G4daf) (record-constructor-descriptor . G4dad) (record-type-descriptor . G4dac) (case . G4dab) (unless . G4da9) (when . G4da8) (or . G4da7) (and . G4da6) (if . G4da5) (letrec* . G4da4) (letrec . G4da3) (case-lambda . G4da1) (lambda . G4da0) (syntax . G4d9f) (syntax-case . G4d9e) (quote . G4d9d) (letrec-syntax . G4d9b) (let-syntax . G4d9a) (set! . G4d99) (import . G4d98) (begin . G4d97) (define-syntax . G4d95) (define . G4d94)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5076 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4f74) (unquote-splicing . G4dc4) (unquote . G4dc3) (_ . G4dc2) (else . G4dc1) (=> . G4dc0) (... . G4dbf) (delay . G4dbc) (do . G4dba) (cond . G4db9) (let* . G4db8) (let . G4db7) (quasiquote . G4db1) (syntax-rules . G4db0) (case . G4dab) (or . G4da7) (and . G4da6) (if . G4da5) (letrec . G4da3) (lambda . G4da0) (quote . G4d9d) (letrec-syntax . G4d9b) (let-syntax . G4d9a) (set! . G4d99) (begin . G4d97) (define-syntax . G4d95) (define . G4d94)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5077 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5009) (string-ci>=? . G5008) (string-ci=? . G5007) (string-ci<? . G5006) (string-ci<=? . G5005) (char-whitespace? . G5004) (char-upper-case? . G5003) (char-numeric? . G5001) (char-lower-case? . G5000) (char-upcase . G4ffe) (char-downcase . G4ffb) (char-ci>? . G4ffa) (char-ci>=? . G4ff9) (char-ci=? . G4ff8) (char-ci<? . G4ff7) (char-ci<=? . G4ff6) (char-alphabetic? . G4ff5) (call-with-output-file . G4fc9) (call-with-input-file . G4fc8) (write-char . G4fc7) (write . G4fc6) (with-output-to-file . G4fc5) (with-input-from-file . G4fc4) (read-char . G4fc3) (read . G4fc2) (peek-char . G4fc1) (open-output-file . G4fc0) (open-input-file . G4fbf) (newline . G4fbe) (display . G4fbd) (close-output-port . G4fbc) (close-input-port . G4fbb) (eof-object . G4fb9) (current-output-port . G4fb7) (current-input-port . G4fb6) (output-port? . G4fb5) (input-port? . G4fb4) (scheme-report-environment . G2ff9) (quotient . G4f7a) (null-environment . G2ff7) (remainder . G4f79) (modulo . G4f78) (inexact->exact . G4f77) (force . G4f76) (exact->inexact . G4f75) (make-promise . G4f74) (string-fill! . G4f72) (string-set! . G4f71) (set-cdr! . G4f70) (set-car! . G4f6f) (memv . G4f69) (memq . G4f68) (member . G4f66) (assv . G4f5e) (assq . G4f5d) (assoc . G4f5b) (eval . G2ffd) (zero? . G4e98) (vector? . G4e97) (vector-set! . G4e96) (vector-ref . G4e95) (vector-length . G4e93) (vector-fill! . G4e91) (vector->list . G4e90) (vector . G4e8f) (values . G4e8e) (truncate . G4e8d) (tan . G4e8c) (symbol? . G4e8b) (symbol->string . G4e89) (substring . G4e88) (string? . G4e87) (string>? . G4e86) (string>=? . G4e85) (string=? . G4e84) (string<? . G4e83) (string<=? . G4e82) (string-ref . G4e81) (string-length . G4e80) (string-copy . G4e7e) (string-append . G4e7d) (string->symbol . G4e7c) (string->number . G4e7b) (string->list . G4e7a) (string . G4e79) (sqrt . G4e78) (sin . G4e77) (round . G4e76) (reverse . G4e75) (real? . G4e74) (real-part . G4e72) (rationalize . G4e71) (rational? . G4e70) (procedure? . G4e6e) (positive? . G4e6d) (pair? . G4e6c) (odd? . G4e6b) (numerator . G4e6a) (number? . G4e69) (number->string . G4e68) (not . G4e66) (negative? . G4e65) (min . G4e63) (max . G4e62) (map . G4e61) (make-vector . G4e60) (make-string . G4e5f) (make-rectangular . G4e5e) (make-polar . G4e5d) (magnitude . G4e5c) (log . G4e5b) (list? . G4e5a) (list-tail . G4e59) (list-ref . G4e58) (list->vector . G4e57) (list->string . G4e56) (list . G4e55) (length . G4e54) (lcm . G4e53) (integer? . G4e52) (integer->char . G4e50) (inexact? . G4e4e) (imag-part . G4e4c) (gcd . G4e4b) (for-each . G4e4a) (floor . G4e49) (expt . G4e47) (exp . G4e46) (exact? . G4e45) (even? . G4e42) (eqv? . G4e40) (equal? . G4e3f) (eq? . G4e3e) (dynamic-wind . G4e3d) (denominator . G4e36) (cos . G4e35) (cons . G4e34) (complex? . G4e33) (char? . G4e32) (char>? . G4e31) (char>=? . G4e30) (char=? . G4e2f) (char<? . G4e2e) (char<=? . G4e2d) (char->integer . G4e2c) (ceiling . G4e2b) (call-with-values . G4e2a) (call-with-current-continuation . G4e28) (cddddr . G4e27) (cdddar . G4e26) (cddadr . G4e25) (cddaar . G4e24) (cdaddr . G4e23) (cdadar . G4e22) (cdaadr . G4e21) (cdaaar . G4e20) (cadddr . G4e1f) (caddar . G4e1e) (cadadr . G4e1d) (cadaar . G4e1c) (caaddr . G4e1b) (caadar . G4e1a) (caaadr . G4e19) (caaaar . G4e18) (cdddr . G4e17) (cddar . G4e16) (cdadr . G4e15) (cdaar . G4e14) (caddr . G4e13) (cadar . G4e12) (caadr . G4e11) (caaar . G4e10) (cddr . G4e0f) (cdar . G4e0e) (cadr . G4e0d) (caar . G4e0c) (cdr . G4e0b) (car . G4e0a) (boolean? . G4e09) (atan . G4e07) (asin . G4e05) (apply . G4e04) (append . G4e03) (angle . G4e02) (acos . G4e01) (abs . G4e00) (/ . G4dff) (* . G4dfe) (- . G4dfd) (+ . G4dfc) (>= . G4dfb) (> . G4dfa) (= . G4df9) (<= . G4df8) (< . G4df7) (unquote-splicing . G4dc4) (unquote . G4dc3) (else . G4dc1) (=> . G4dc0) (... . G4dbf) (delay . G4dbc) (do . G4dba) (cond . G4db9) (let* . G4db8) (let . G4db7) (quasiquote . G4db1) (syntax-rules . G4db0) (case . G4dab) (or . G4da7) (and . G4da6) (if . G4da5) (letrec . G4da3) (lambda . G4da0) (quote . G4d9d) (letrec-syntax . G4d9b) (let-syntax . G4d9a) (set! . G4d99) (begin . G4d97) (define-syntax . G4d95) (define . G4d94)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5078 '(psyntax modules) '() '() '() '() '((module . G4d96)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5079 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G507a '(rnrs) '(6) '() '() '() '((regexp? . G506d) (string-upcase . G5011) (string-titlecase . G5010) (string-normalize-nfkd . G500f) (string-normalize-nfkc . G500e) (string-normalize-nfd . G500d) (string-normalize-nfc . G500c) (string-foldcase . G500b) (string-downcase . G500a) (string-ci>? . G5009) (string-ci>=? . G5008) (string-ci=? . G5007) (string-ci<? . G5006) (string-ci<=? . G5005) (char-whitespace? . G5004) (char-upper-case? . G5003) (char-title-case? . G5002) (char-numeric? . G5001) (char-lower-case? . G5000) (char-general-category . G4fff) (char-upcase . G4ffe) (char-titlecase . G4ffd) (char-foldcase . G4ffc) (char-downcase . G4ffb) (char-ci>? . G4ffa) (char-ci>=? . G4ff9) (char-ci=? . G4ff8) (char-ci<? . G4ff7) (char-ci<=? . G4ff6) (char-alphabetic? . G4ff5) (make-variable-transformer . G2d79) (identifier? . G301f) (generate-temporaries . G300b) (free-identifier=? . G300d) (syntax->datum . G3023) (datum->syntax . G3021) (bound-identifier=? . G300f) (record-type-descriptor? . G4ff4) (record-predicate . G4ff3) (record-mutator . G4ff2) (record-constructor . G4ff1) (record-accessor . G4ff0) (make-record-type-descriptor . G4fef) (make-record-constructor-descriptor . G4fee) (record? . G4fed) (record-type-uid . G4fec) (record-type-sealed? . G4feb) (record-type-parent . G4fea) (record-type-opaque? . G4fe9) (record-type-name . G4fe8) (record-type-generative? . G4fe7) (record-type-field-names . G4fe6) (record-rtd . G4fe5) (record-field-mutable? . G4fe4) (delete-file . G4fe3) (file-exists? . G4fe2) (vector-sort! . G4fe1) (vector-sort . G4fe0) (list-sort . G4fdf) (symbol-hash . G4fde) (string-ci-hash . G4fdd) (string-hash . G4fdc) (equal-hash . G4fdb) (hashtable-equivalence-function . G4fda) (make-hashtable . G4fd9) (hashtable-hash-function . G4fd8) (make-eqv-hashtable . G4fd7) (make-eq-hashtable . G4fd6) (hashtable? . G4fd5) (hashtable-update! . G4fd4) (hashtable-size . G4fd3) (hashtable-set! . G4fd2) (hashtable-ref . G4fd1) (hashtable-mutable? . G4fd0) (hashtable-keys . G4fcf) (hashtable-entries . G4fce) (hashtable-delete! . G4fcd) (hashtable-copy . G4fcc) (hashtable-contains? . G4fcb) (hashtable-clear! . G4fca) (call-with-output-file . G4fc9) (call-with-input-file . G4fc8) (write-char . G4fc7) (write . G4fc6) (with-output-to-file . G4fc5) (with-input-from-file . G4fc4) (read-char . G4fc3) (read . G4fc2) (peek-char . G4fc1) (open-output-file . G4fc0) (open-input-file . G4fbf) (newline . G4fbe) (display . G4fbd) (close-output-port . G4fbc) (close-input-port . G4fbb) (eof-object? . G4fba) (eof-object . G4fb9) (current-error-port . G4fb8) (current-output-port . G4fb7) (current-input-port . G4fb6) (output-port? . G4fb5) (input-port? . G4fb4) (utf-8-codec . G4fb3) (utf-16-codec . G4fb2) (transcoder-error-handling-mode . G4fb1) (transcoder-eol-style . G4fb0) (transcoder-codec . G4faf) (transcoded-port . G4fae) (textual-port? . G4fad) (string->bytevector . G4fac) (standard-output-port . G4fab) (standard-input-port . G4faa) (standard-error-port . G4fa9) (set-port-position! . G4fa8) (put-u8 . G4fa7) (put-string . G4fa6) (put-datum . G4fa5) (put-char . G4fa4) (put-bytevector . G4fa3) (port? . G4fa2) (port-transcoder . G4fa1) (port-position . G4fa0) (port-has-set-port-position!? . G4f9f) (port-has-port-position? . G4f9e) (port-eof? . G4f9d) (output-port-buffer-mode . G4f9c) (open-string-output-port . G4f9b) (open-string-input-port . G4f9a) (open-file-output-port . G4f99) (open-file-input/output-port . G4f98) (open-file-input-port . G4f97) (open-bytevector-output-port . G4f96) (open-bytevector-input-port . G4f95) (native-transcoder . G4f94) (native-eol-style . G4f93) (make-transcoder . G4f92) (latin-1-codec . G4f91) (make-i/o-write-error . G4ac6) (make-i/o-read-error . G4ab1) (make-i/o-port-error . G4b64) (make-i/o-invalid-position-error . G4adc) (make-i/o-filename-error . G4af6) (make-i/o-file-protection-error . G4b0f) (make-i/o-file-is-read-only-error . G4b24) (make-i/o-file-does-not-exist-error . G4b4e) (make-i/o-file-already-exists-error . G4b39) (make-i/o-error . G4a9c) (make-i/o-encoding-error . G4b93) (make-i/o-decoding-error . G4b7d) (make-custom-textual-output-port . G4f90) (make-custom-textual-input/output-port . G4f8f) (make-custom-textual-input-port . G4f8e) (make-custom-binary-output-port . G4f8d) (make-custom-binary-input/output-port . G4f8c) (make-custom-binary-input-port . G4f8b) (make-bytevector . G4f8a) (lookahead-u8 . G4f89) (lookahead-char . G4f88) (i/o-write-error? . G4ac8) (i/o-read-error? . G4ab3) (i/o-port-error? . G4b68) (i/o-invalid-position-error? . G4ae0) (i/o-filename-error? . G4afa) (i/o-file-protection-error? . G4b11) (i/o-file-is-read-only-error? . G4b26) (i/o-file-does-not-exist-error? . G4b50) (i/o-file-already-exists-error? . G4b3b) (i/o-error? . G4a9e) (i/o-error-position . G4ae2) (i/o-error-port . G4b6a) (i/o-error-filename . G4afc) (i/o-encoding-error? . G4b97) (i/o-encoding-error-char . G4b99) (i/o-decoding-error? . G4b7f) (get-u8 . G4f87) (get-string-n! . G4f86) (get-string-n . G4f85) (get-string-all . G4f84) (get-line . G4f83) (get-datum . G4f82) (get-char . G4f81) (get-bytevector-some . G4f80) (get-bytevector-n! . G4f7f) (get-bytevector-n . G4f7e) (get-bytevector-all . G4f7d) (flush-output-port . G4f7c) (close-port . G4f7b) (exit . G4f73) (command-line . G4cc8) (remove . G4f6e) (remv . G4f6d) (remp . G4f6c) (remq . G4f6b) (partition . G4f6a) (memv . G4f69) (memq . G4f68) (memp . G4f67) (member . G4f66) (exists . G4f65) (for-all . G4f64) (fold-right . G4f63) (fold-left . G4f62) (find . G4f61) (filter . G4f60) (cons* . G4f5f) (assv . G4f5e) (assq . G4f5d) (assp . G4f5c) (assoc . G4f5b) (call-with-string-output-port . G4f5a) (call-with-port . G4f59) (call-with-bytevector-output-port . G4f58) (bytevector->string . G4f57) (buffer-mode? . G4f56) (binary-port? . G4f55) (with-exception-handler . G4f54) (raise-continuable . G4f53) (raise . G4f52) (make-enumeration . G4f51) (enum-set=? . G4f50) (enum-set-universe . G4f4f) (enum-set-union . G4f4e) (enum-set-subset? . G4f4d) (enum-set-projection . G4f4c) (enum-set-member? . G4f4b) (enum-set-intersection . G4f4a) (enum-set-indexer . G4f49) (enum-set-difference . G4f48) (enum-set-constructor . G4f47) (enum-set-complement . G4f46) (enum-set->list . G4f45) (who-condition? . G4a14) (warning? . G498e) (violation? . G49cd) (undefined-violation? . G4a89) (syntax-violation? . G4a70) (syntax-violation-subform . G4a74) (syntax-violation-form . G4a72) (syntax-violation . G301d) (simple-conditions . G4f44) (serious-condition? . G49a3) (non-continuable-violation? . G4a2b) (message-condition? . G4977) (make-who-condition . G4a10) (make-warning . G498c) (make-violation . G49cb) (make-undefined-violation . G4a87) (make-syntax-violation . G4a6a) (make-serious-condition . G49a1) (make-non-continuable-violation . G4a29) (make-message-condition . G4973) (make-lexical-violation . G4a53) (make-irritants-condition . G49f6) (make-implementation-restriction-violation . G4a3e) (make-error . G49b6) (make-assertion-violation . G49e0) (lexical-violation? . G4a55) (irritants-condition? . G49fa) (implementation-restriction-violation? . G4a40) (error? . G49b8) (condition-who . G4a16) (condition-predicate . G4f43) (condition-message . G4979) (condition-irritants . G49fc) (condition-accessor . G4f42) (condition . G4f41) (assertion-violation? . G49e2) (condition? . G4f40) (utf32->string . G4f3f) (utf16->string . G4f3e) (utf8->string . G4f3d) (uint-list->bytevector . G4f3c) (u8-list->bytevector . G4f3b) (string->utf8 . G4f3a) (string->utf32 . G4f39) (string->utf16 . G4f38) (sint-list->bytevector . G4f37) (native-endianness . G4f36) (bytevector? . G4f35) (bytevector=? . G4f34) (bytevector-uint-set! . G4f33) (bytevector-uint-ref . G4f32) (bytevector-u8-set! . G4f31) (bytevector-u8-ref . G4f30) (bytevector-u64-set! . G4f2f) (bytevector-u64-ref . G4f2e) (bytevector-u64-native-set! . G4f2d) (bytevector-u64-native-ref . G4f2c) (bytevector-u32-set! . G4f2b) (bytevector-u32-ref . G4f2a) (bytevector-u32-native-set! . G4f29) (bytevector-u32-native-ref . G4f28) (bytevector-u16-set! . G4f27) (bytevector-u16-ref . G4f26) (bytevector-u16-native-set! . G4f25) (bytevector-u16-native-ref . G4f24) (bytevector-sint-set! . G4f23) (bytevector-sint-ref . G4f22) (bytevector-s8-set! . G4f21) (bytevector-s8-ref . G4f20) (bytevector-s64-set! . G4f1f) (bytevector-s64-ref . G4f1e) (bytevector-s64-native-set! . G4f1d) (bytevector-s64-native-ref . G4f1c) (bytevector-s32-set! . G4f1b) (bytevector-s32-ref . G4f1a) (bytevector-s32-native-set! . G4f19) (bytevector-s32-native-ref . G4f18) (bytevector-s16-set! . G4f17) (bytevector-s16-ref . G4f16) (bytevector-s16-native-set! . G4f15) (bytevector-s16-native-ref . G4f14) (bytevector-length . G4f13) (bytevector-ieee-single-ref . G4f12) (bytevector-ieee-single-set! . G4f11) (bytevector-ieee-single-native-set! . G4f10) (bytevector-ieee-single-native-ref . G4f0f) (bytevector-ieee-double-set! . G4f0e) (bytevector-ieee-double-ref . G4f0d) (bytevector-ieee-double-native-set! . G4f0c) (bytevector-ieee-double-native-ref . G4f0b) (bytevector-fill! . G4f0a) (bytevector-copy! . G4f09) (bytevector-copy . G4f08) (bytevector->uint-list . G4f07) (bytevector->u8-list . G4f06) (bytevector->sint-list . G4f05) (no-nans-violation? . G4bc3) (no-infinities-violation? . G4bae) (make-no-nans-violation . G4bc1) (make-no-infinities-violation . G4bac) (real->flonum . G4f04) (flzero? . G4f03) (fltruncate . G4f02) (fltan . G4f01) (flsqrt . G4f00) (flsin . G4eff) (flround . G4efe) (flpositive? . G4efd) (flonum? . G4efc) (flodd? . G4efb) (flnumerator . G4efa) (flnegative? . G4ef9) (flnan? . G4ef8) (flmod0 . G4ef7) (flmod . G4ef6) (flmin . G4ef5) (flmax . G4ef4) (fllog . G4ef3) (flinteger? . G4ef2) (flinfinite? . G4ef1) (flfloor . G4ef0) (flfinite? . G4eef) (flexpt . G4eee) (flexp . G4eed) (fleven? . G4eec) (fldiv0-and-mod0 . G4eeb) (fldiv0 . G4eea) (fldiv-and-mod . G4ee9) (fldiv . G4ee8) (fldenominator . G4ee7) (flcos . G4ee6) (flceiling . G4ee5) (flatan . G4ee4) (flasin . G4ee3) (flacos . G4ee2) (flabs . G4ee1) (fl>? . G4ee0) (fl>=? . G4edf) (fl=? . G4ede) (fl<? . G4edd) (fl<=? . G4edc) (fl/ . G4edb) (fl- . G4eda) (fl+ . G4ed9) (fl* . G4ed8) (fixnum->flonum . G4ed7) (fxzero? . G4ed6) (fxxor . G4ed5) (fxrotate-bit-field . G4ed4) (fxreverse-bit-field . G4ed3) (fxpositive? . G4ed2) (fxodd? . G4ed1) (fxnot . G4ed0) (fxnegative? . G4ecf) (fxmod0 . G4ece) (fxmod . G4ecd) (fxmin . G4ecc) (fxmax . G4ecb) (fxlength . G4eca) (fxior . G4ec9) (fxif . G4ec8) (fxfirst-bit-set . G4ec7) (fxeven? . G4ec6) (fxdiv0-and-mod0 . G4ec5) (fxdiv0 . G4ec4) (fxdiv-and-mod . G4ec3) (fxdiv . G4ec2) (fxcopy-bit-field . G4ec1) (fxcopy-bit . G4ec0) (fxbit-set? . G4ebf) (fxbit-field . G4ebe) (fxbit-count . G4ebd) (fxarithmetic-shift-right . G4ebc) (fxarithmetic-shift-left . G4ebb) (fxarithmetic-shift . G4eba) (fxand . G4eb9) (fx>? . G4eb8) (fx>=? . G4eb7) (fx=? . G4eb6) (fx<? . G4eb5) (fx<=? . G4eb4) (fx-/carry . G4eb3) (fx- . G4eb2) (fx+/carry . G4eb1) (fx+ . G4eb0) (fx*/carry . G4eaf) (fx* . G4eae) (greatest-fixnum . G4ead) (least-fixnum . G4eac) (fixnum-width . G4eab) (fixnum? . G4eaa) (bitwise-rotate-bit-field . G4ea9) (bitwise-reverse-bit-field . G4ea8) (bitwise-length . G4ea7) (bitwise-if . G4ea6) (bitwise-first-bit-set . G4ea5) (bitwise-copy-bit-field . G4ea4) (bitwise-copy-bit . G4ea3) (bitwise-bit-set? . G4ea2) (bitwise-bit-field . G4ea1) (bitwise-bit-count . G4ea0) (bitwise-xor . G4e9f) (bitwise-ior . G4e9e) (bitwise-and . G4e9d) (bitwise-not . G4e9c) (bitwise-arithmetic-shift-right . G4e9b) (bitwise-arithmetic-shift-left . G4e9a) (bitwise-arithmetic-shift . G4e99) (zero? . G4e98) (vector? . G4e97) (vector-set! . G4e96) (vector-ref . G4e95) (vector-map . G4e94) (vector-length . G4e93) (vector-for-each . G4e92) (vector-fill! . G4e91) (vector->list . G4e90) (vector . G4e8f) (values . G4e8e) (truncate . G4e8d) (tan . G4e8c) (symbol? . G4e8b) (symbol=? . G4e8a) (symbol->string . G4e89) (substring . G4e88) (string? . G4e87) (string>? . G4e86) (string>=? . G4e85) (string=? . G4e84) (string<? . G4e83) (string<=? . G4e82) (string-ref . G4e81) (string-length . G4e80) (string-for-each . G4e7f) (string-copy . G4e7e) (string-append . G4e7d) (string->symbol . G4e7c) (string->number . G4e7b) (string->list . G4e7a) (string . G4e79) (sqrt . G4e78) (sin . G4e77) (round . G4e76) (reverse . G4e75) (real? . G4e74) (real-valued? . G4e73) (real-part . G4e72) (rationalize . G4e71) (rational? . G4e70) (rational-valued? . G4e6f) (procedure? . G4e6e) (positive? . G4e6d) (pair? . G4e6c) (odd? . G4e6b) (numerator . G4e6a) (number? . G4e69) (number->string . G4e68) (null? . G4e67) (not . G4e66) (negative? . G4e65) (nan? . G4e64) (min . G4e63) (max . G4e62) (map . G4e61) (make-vector . G4e60) (make-string . G4e5f) (make-rectangular . G4e5e) (make-polar . G4e5d) (magnitude . G4e5c) (log . G4e5b) (list? . G4e5a) (list-tail . G4e59) (list-ref . G4e58) (list->vector . G4e57) (list->string . G4e56) (list . G4e55) (length . G4e54) (lcm . G4e53) (integer? . G4e52) (integer-valued? . G4e51) (integer->char . G4e50) (infinite? . G4e4f) (inexact? . G4e4e) (inexact . G4e4d) (imag-part . G4e4c) (gcd . G4e4b) (for-each . G4e4a) (floor . G4e49) (finite? . G4e48) (expt . G4e47) (exp . G4e46) (exact? . G4e45) (exact-integer-sqrt . G4e44) (exact . G4e43) (even? . G4e42) (error . G4e41) (eqv? . G4e40) (equal? . G4e3f) (eq? . G4e3e) (dynamic-wind . G4e3d) (div0-and-mod0 . G4e3c) (mod0 . G4e3b) (div0 . G4e3a) (div-and-mod . G4e39) (mod . G4e38) (div . G4e37) (denominator . G4e36) (cos . G4e35) (cons . G4e34) (complex? . G4e33) (char? . G4e32) (char>? . G4e31) (char>=? . G4e30) (char=? . G4e2f) (char<? . G4e2e) (char<=? . G4e2d) (char->integer . G4e2c) (ceiling . G4e2b) (call-with-values . G4e2a) (call/cc . G4e29) (call-with-current-continuation . G4e28) (cddddr . G4e27) (cdddar . G4e26) (cddadr . G4e25) (cddaar . G4e24) (cdaddr . G4e23) (cdadar . G4e22) (cdaadr . G4e21) (cdaaar . G4e20) (cadddr . G4e1f) (caddar . G4e1e) (cadadr . G4e1d) (cadaar . G4e1c) (caaddr . G4e1b) (caadar . G4e1a) (caaadr . G4e19) (caaaar . G4e18) (cdddr . G4e17) (cddar . G4e16) (cdadr . G4e15) (cdaar . G4e14) (caddr . G4e13) (cadar . G4e12) (caadr . G4e11) (caaar . G4e10) (cddr . G4e0f) (cdar . G4e0e) (cadr . G4e0d) (caar . G4e0c) (cdr . G4e0b) (car . G4e0a) (boolean? . G4e09) (boolean=? . G4e08) (atan . G4e07) (assertion-violation . G4e06) (asin . G4e05) (apply . G4e04) (append . G4e03) (angle . G4e02) (acos . G4e01) (abs . G4e00) (/ . G4dff) (* . G4dfe) (- . G4dfd) (+ . G4dfc) (>= . G4dfb) (> . G4dfa) (= . G4df9) (<= . G4df8) (< . G4df7) (&no-nans . G4df5) (&no-infinities . G4df4) (&i/o-encoding . G4df3) (&i/o-decoding . G4df2) (&i/o-port . G4df1) (&i/o-file-does-not-exist . G4df0) (&i/o-file-already-exists . G4def) (&i/o-file-is-read-only . G4dee) (&i/o-file-protection . G4ded) (&i/o-filename . G4dec) (&i/o-invalid-position . G4deb) (&i/o-write . G4dea) (&i/o-read . G4de9) (&i/o . G4de8) (&undefined . G4de7) (&syntax . G4de6) (&lexical . G4de5) (&implementation-restriction . G4de4) (&non-continuable . G4de3) (&who . G4de2) (&irritants . G4de1) (&assertion . G4de0) (&violation . G4ddf) (&error . G4dde) (&serious . G4ddd) (&warning . G4ddc) (&message . G4ddb) (&condition . G4dda) (define-condition-type . G4dd9) (define-enumeration . G4dd8) (define-record-type . G4dd7) (parent-rtd . G4dd6) (nongenerative . G4dd5) (opaque . G4dd4) (sealed . G4dd3) (protocol . G4dd2) (parent . G4dd1) (immutable . G4dd0) (mutable . G4dcf) (fields . G4dce) (error-handling-mode . G4dcd) (file-options . G4dcc) (buffer-mode . G4dcb) (eol-style . G4dca) (guard . G4dc9) (unsyntax-splicing . G4dc6) (unsyntax . G4dc5) (unquote-splicing . G4dc4) (unquote . G4dc3) (_ . G4dc2) (else . G4dc1) (=> . G4dc0) (... . G4dbf) (assert . G4dbe) (endianness . G4dbd) (do . G4dba) (cond . G4db9) (let* . G4db8) (let . G4db7) (let*-values . G4db6) (let-values . G4db5) (identifier-syntax . G4db4) (with-syntax . G4db3) (quasisyntax . G4db2) (quasiquote . G4db1) (syntax-rules . G4db0) (record-constructor-descriptor . G4dad) (record-type-descriptor . G4dac) (case . G4dab) (unless . G4da9) (when . G4da8) (or . G4da7) (and . G4da6) (if . G4da5) (letrec* . G4da4) (letrec . G4da3) (case-lambda . G4da1) (lambda . G4da0) (syntax . G4d9f) (syntax-case . G4d9e) (quote . G4d9d) (letrec-syntax . G4d9b) (let-syntax . G4d9a) (set! . G4d99) (begin . G4d97) (define-syntax . G4d95) (define . G4d94)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G507b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G2ff9) (quotient . G4f7a) (null-environment . G2ff7) (remainder . G4f79) (modulo . G4f78) (inexact->exact . G4f77) (force . G4f76) (exact->inexact . G4f75) (make-promise . G4f74) (delay . G4dbc)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G507c '(rnrs control) '(6) '() '() '() '((do . G4dba) (unless . G4da9) (when . G4da8) (case-lambda . G4da1)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G507d '(rnrs eval) '(6) '() '() '() '((eval . G2ffd) (environment . G2ff5)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G507e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4f70) (set-car! . G4f6f)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G507f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4f72) (string-set! . G4f71)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5080 '(rnrs programs) '(6) '() '() '() '((exit . G4f73) (command-line . G4cc8)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5081 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d79) (identifier? . G301f) (generate-temporaries . G300b) (free-identifier=? . G300d) (syntax->datum . G3023) (datum->syntax . G3021) (bound-identifier=? . G300f) (syntax-violation . G301d) (unsyntax-splicing . G4dc6) (unsyntax . G4dc5) (_ . G4dc2) (... . G4dbf) (with-syntax . G4db3) (quasisyntax . G4db2) (syntax . G4d9f) (syntax-case . G4d9e)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5082 '(rnrs files) '(6) '() '() '() '((delete-file . G4fe3) (file-exists? . G4fe2) (make-i/o-write-error . G4ac6) (make-i/o-read-error . G4ab1) (make-i/o-port-error . G4b64) (make-i/o-invalid-position-error . G4adc) (make-i/o-filename-error . G4af6) (make-i/o-file-protection-error . G4b0f) (make-i/o-file-is-read-only-error . G4b24) (make-i/o-file-does-not-exist-error . G4b4e) (make-i/o-file-already-exists-error . G4b39) (make-i/o-error . G4a9c) (i/o-write-error? . G4ac8) (i/o-read-error? . G4ab3) (i/o-port-error? . G4b68) (i/o-invalid-position-error? . G4ae0) (i/o-filename-error? . G4afa) (i/o-file-protection-error? . G4b11) (i/o-file-is-read-only-error? . G4b26) (i/o-file-does-not-exist-error? . G4b50) (i/o-file-already-exists-error? . G4b3b) (i/o-error? . G4a9e) (i/o-error-position . G4ae2) (i/o-error-port . G4b6a) (i/o-error-filename . G4afc) (&i/o-port . G4df1) (&i/o-file-does-not-exist . G4df0) (&i/o-file-already-exists . G4def) (&i/o-file-is-read-only . G4dee) (&i/o-file-protection . G4ded) (&i/o-filename . G4dec) (&i/o-invalid-position . G4deb) (&i/o-write . G4dea) (&i/o-read . G4de9) (&i/o . G4de8)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5083 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G4fe1) (vector-sort . G4fe0) (list-sort . G4fdf)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5084 '(rnrs base) '(6) '() '() '() '((zero? . G4e98) (vector? . G4e97) (vector-set! . G4e96) (vector-ref . G4e95) (vector-map . G4e94) (vector-length . G4e93) (vector-for-each . G4e92) (vector-fill! . G4e91) (vector->list . G4e90) (vector . G4e8f) (values . G4e8e) (truncate . G4e8d) (tan . G4e8c) (symbol? . G4e8b) (symbol=? . G4e8a) (symbol->string . G4e89) (substring . G4e88) (string? . G4e87) (string>? . G4e86) (string>=? . G4e85) (string=? . G4e84) (string<? . G4e83) (string<=? . G4e82) (string-ref . G4e81) (string-length . G4e80) (string-for-each . G4e7f) (string-copy . G4e7e) (string-append . G4e7d) (string->symbol . G4e7c) (string->number . G4e7b) (string->list . G4e7a) (string . G4e79) (sqrt . G4e78) (sin . G4e77) (round . G4e76) (reverse . G4e75) (real? . G4e74) (real-valued? . G4e73) (real-part . G4e72) (rationalize . G4e71) (rational? . G4e70) (rational-valued? . G4e6f) (procedure? . G4e6e) (positive? . G4e6d) (pair? . G4e6c) (odd? . G4e6b) (numerator . G4e6a) (number? . G4e69) (number->string . G4e68) (null? . G4e67) (not . G4e66) (negative? . G4e65) (nan? . G4e64) (min . G4e63) (max . G4e62) (map . G4e61) (make-vector . G4e60) (make-string . G4e5f) (make-rectangular . G4e5e) (make-polar . G4e5d) (magnitude . G4e5c) (log . G4e5b) (list? . G4e5a) (list-tail . G4e59) (list-ref . G4e58) (list->vector . G4e57) (list->string . G4e56) (list . G4e55) (length . G4e54) (lcm . G4e53) (integer? . G4e52) (integer-valued? . G4e51) (integer->char . G4e50) (infinite? . G4e4f) (inexact? . G4e4e) (inexact . G4e4d) (imag-part . G4e4c) (gcd . G4e4b) (for-each . G4e4a) (floor . G4e49) (finite? . G4e48) (expt . G4e47) (exp . G4e46) (exact? . G4e45) (exact-integer-sqrt . G4e44) (exact . G4e43) (even? . G4e42) (error . G4e41) (eqv? . G4e40) (equal? . G4e3f) (eq? . G4e3e) (dynamic-wind . G4e3d) (div0-and-mod0 . G4e3c) (mod0 . G4e3b) (div0 . G4e3a) (div-and-mod . G4e39) (mod . G4e38) (div . G4e37) (denominator . G4e36) (cos . G4e35) (cons . G4e34) (complex? . G4e33) (char? . G4e32) (char>? . G4e31) (char>=? . G4e30) (char=? . G4e2f) (char<? . G4e2e) (char<=? . G4e2d) (char->integer . G4e2c) (ceiling . G4e2b) (call-with-values . G4e2a) (call/cc . G4e29) (call-with-current-continuation . G4e28) (cddddr . G4e27) (cdddar . G4e26) (cddadr . G4e25) (cddaar . G4e24) (cdaddr . G4e23) (cdadar . G4e22) (cdaadr . G4e21) (cdaaar . G4e20) (cadddr . G4e1f) (caddar . G4e1e) (cadadr . G4e1d) (cadaar . G4e1c) (caaddr . G4e1b) (caadar . G4e1a) (caaadr . G4e19) (caaaar . G4e18) (cdddr . G4e17) (cddar . G4e16) (cdadr . G4e15) (cdaar . G4e14) (caddr . G4e13) (cadar . G4e12) (caadr . G4e11) (caaar . G4e10) (cddr . G4e0f) (cdar . G4e0e) (cadr . G4e0d) (caar . G4e0c) (cdr . G4e0b) (car . G4e0a) (boolean? . G4e09) (boolean=? . G4e08) (atan . G4e07) (assertion-violation . G4e06) (asin . G4e05) (apply . G4e04) (append . G4e03) (angle . G4e02) (acos . G4e01) (abs . G4e00) (/ . G4dff) (* . G4dfe) (- . G4dfd) (+ . G4dfc) (>= . G4dfb) (> . G4dfa) (= . G4df9) (<= . G4df8) (< . G4df7) (unquote-splicing . G4dc4) (unquote . G4dc3) (_ . G4dc2) (else . G4dc1) (=> . G4dc0) (... . G4dbf) (assert . G4dbe) (cond . G4db9) (let* . G4db8) (let . G4db7) (let*-values . G4db6) (let-values . G4db5) (identifier-syntax . G4db4) (quasiquote . G4db1) (syntax-rules . G4db0) (case . G4dab) (or . G4da7) (and . G4da6) (if . G4da5) (letrec* . G4da4) (letrec . G4da3) (lambda . G4da0) (quote . G4d9d) (letrec-syntax . G4d9b) (let-syntax . G4d9a) (set! . G4d99) (begin . G4d97) (define-syntax . G4d95) (define . G4d94)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5085 '(rnrs lists) '(6) '() '() '() '((remove . G4f6e) (remv . G4f6d) (remp . G4f6c) (remq . G4f6b) (partition . G4f6a) (memv . G4f69) (memq . G4f68) (memp . G4f67) (member . G4f66) (exists . G4f65) (for-all . G4f64) (fold-right . G4f63) (fold-left . G4f62) (find . G4f61) (filter . G4f60) (cons* . G4f5f) (assv . G4f5e) (assq . G4f5d) (assp . G4f5c) (assoc . G4f5b)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5086 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4fc9) (call-with-input-file . G4fc8) (write-char . G4fc7) (write . G4fc6) (with-output-to-file . G4fc5) (with-input-from-file . G4fc4) (read-char . G4fc3) (read . G4fc2) (peek-char . G4fc1) (open-output-file . G4fc0) (open-input-file . G4fbf) (newline . G4fbe) (display . G4fbd) (close-output-port . G4fbc) (close-input-port . G4fbb) (eof-object? . G4fba) (eof-object . G4fb9) (current-error-port . G4fb8) (current-output-port . G4fb7) (current-input-port . G4fb6) (output-port? . G4fb5) (input-port? . G4fb4) (make-i/o-write-error . G4ac6) (make-i/o-read-error . G4ab1) (make-i/o-port-error . G4b64) (make-i/o-invalid-position-error . G4adc) (make-i/o-filename-error . G4af6) (make-i/o-file-protection-error . G4b0f) (make-i/o-file-is-read-only-error . G4b24) (make-i/o-file-does-not-exist-error . G4b4e) (make-i/o-file-already-exists-error . G4b39) (make-i/o-error . G4a9c) (i/o-write-error? . G4ac8) (i/o-read-error? . G4ab3) (i/o-port-error? . G4b68) (i/o-invalid-position-error? . G4ae0) (i/o-filename-error? . G4afa) (i/o-file-protection-error? . G4b11) (i/o-file-is-read-only-error? . G4b26) (i/o-file-does-not-exist-error? . G4b50) (i/o-file-already-exists-error? . G4b3b) (i/o-error? . G4a9e) (i/o-error-position . G4ae2) (i/o-error-port . G4b6a) (i/o-error-filename . G4afc) (&i/o-port . G4df1) (&i/o-file-does-not-exist . G4df0) (&i/o-file-already-exists . G4def) (&i/o-file-is-read-only . G4dee) (&i/o-file-protection . G4ded) (&i/o-filename . G4dec) (&i/o-invalid-position . G4deb) (&i/o-write . G4dea) (&i/o-read . G4de9) (&i/o . G4de8)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5087 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4f8a) (utf32->string . G4f3f) (utf16->string . G4f3e) (utf8->string . G4f3d) (uint-list->bytevector . G4f3c) (u8-list->bytevector . G4f3b) (string->utf8 . G4f3a) (string->utf32 . G4f39) (string->utf16 . G4f38) (sint-list->bytevector . G4f37) (native-endianness . G4f36) (bytevector? . G4f35) (bytevector=? . G4f34) (bytevector-uint-set! . G4f33) (bytevector-uint-ref . G4f32) (bytevector-u8-set! . G4f31) (bytevector-u8-ref . G4f30) (bytevector-u64-set! . G4f2f) (bytevector-u64-ref . G4f2e) (bytevector-u64-native-set! . G4f2d) (bytevector-u64-native-ref . G4f2c) (bytevector-u32-set! . G4f2b) (bytevector-u32-ref . G4f2a) (bytevector-u32-native-set! . G4f29) (bytevector-u32-native-ref . G4f28) (bytevector-u16-set! . G4f27) (bytevector-u16-ref . G4f26) (bytevector-u16-native-set! . G4f25) (bytevector-u16-native-ref . G4f24) (bytevector-sint-set! . G4f23) (bytevector-sint-ref . G4f22) (bytevector-s8-set! . G4f21) (bytevector-s8-ref . G4f20) (bytevector-s64-set! . G4f1f) (bytevector-s64-ref . G4f1e) (bytevector-s64-native-set! . G4f1d) (bytevector-s64-native-ref . G4f1c) (bytevector-s32-set! . G4f1b) (bytevector-s32-ref . G4f1a) (bytevector-s32-native-set! . G4f19) (bytevector-s32-native-ref . G4f18) (bytevector-s16-set! . G4f17) (bytevector-s16-ref . G4f16) (bytevector-s16-native-set! . G4f15) (bytevector-s16-native-ref . G4f14) (bytevector-length . G4f13) (bytevector-ieee-single-ref . G4f12) (bytevector-ieee-single-set! . G4f11) (bytevector-ieee-single-native-set! . G4f10) (bytevector-ieee-single-native-ref . G4f0f) (bytevector-ieee-double-set! . G4f0e) (bytevector-ieee-double-ref . G4f0d) (bytevector-ieee-double-native-set! . G4f0c) (bytevector-ieee-double-native-ref . G4f0b) (bytevector-fill! . G4f0a) (bytevector-copy! . G4f09) (bytevector-copy . G4f08) (bytevector->uint-list . G4f07) (bytevector->u8-list . G4f06) (bytevector->sint-list . G4f05) (endianness . G4dbd)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5088 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5011) (string-titlecase . G5010) (string-normalize-nfkd . G500f) (string-normalize-nfkc . G500e) (string-normalize-nfd . G500d) (string-normalize-nfc . G500c) (string-foldcase . G500b) (string-downcase . G500a) (string-ci>? . G5009) (string-ci>=? . G5008) (string-ci=? . G5007) (string-ci<? . G5006) (string-ci<=? . G5005) (char-whitespace? . G5004) (char-upper-case? . G5003) (char-title-case? . G5002) (char-numeric? . G5001) (char-lower-case? . G5000) (char-general-category . G4fff) (char-upcase . G4ffe) (char-titlecase . G4ffd) (char-foldcase . G4ffc) (char-downcase . G4ffb) (char-ci>? . G4ffa) (char-ci>=? . G4ff9) (char-ci=? . G4ff8) (char-ci<? . G4ff7) (char-ci<=? . G4ff6) (char-alphabetic? . G4ff5)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5089 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f54) (raise-continuable . G4f53) (raise . G4f52) (guard . G4dc9) (else . G4dc1) (=> . G4dc0)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G508a '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4ea9) (bitwise-reverse-bit-field . G4ea8) (bitwise-length . G4ea7) (bitwise-if . G4ea6) (bitwise-first-bit-set . G4ea5) (bitwise-copy-bit-field . G4ea4) (bitwise-copy-bit . G4ea3) (bitwise-bit-set? . G4ea2) (bitwise-bit-field . G4ea1) (bitwise-bit-count . G4ea0) (bitwise-xor . G4e9f) (bitwise-ior . G4e9e) (bitwise-and . G4e9d) (bitwise-not . G4e9c) (bitwise-arithmetic-shift-right . G4e9b) (bitwise-arithmetic-shift-left . G4e9a) (bitwise-arithmetic-shift . G4e99)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G508b '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4ed6) (fxxor . G4ed5) (fxrotate-bit-field . G4ed4) (fxreverse-bit-field . G4ed3) (fxpositive? . G4ed2) (fxodd? . G4ed1) (fxnot . G4ed0) (fxnegative? . G4ecf) (fxmod0 . G4ece) (fxmod . G4ecd) (fxmin . G4ecc) (fxmax . G4ecb) (fxlength . G4eca) (fxior . G4ec9) (fxif . G4ec8) (fxfirst-bit-set . G4ec7) (fxeven? . G4ec6) (fxdiv0-and-mod0 . G4ec5) (fxdiv0 . G4ec4) (fxdiv-and-mod . G4ec3) (fxdiv . G4ec2) (fxcopy-bit-field . G4ec1) (fxcopy-bit . G4ec0) (fxbit-set? . G4ebf) (fxbit-field . G4ebe) (fxbit-count . G4ebd) (fxarithmetic-shift-right . G4ebc) (fxarithmetic-shift-left . G4ebb) (fxarithmetic-shift . G4eba) (fxand . G4eb9) (fx>? . G4eb8) (fx>=? . G4eb7) (fx=? . G4eb6) (fx<? . G4eb5) (fx<=? . G4eb4) (fx-/carry . G4eb3) (fx- . G4eb2) (fx+/carry . G4eb1) (fx+ . G4eb0) (fx*/carry . G4eaf) (fx* . G4eae) (greatest-fixnum . G4ead) (least-fixnum . G4eac) (fixnum-width . G4eab) (fixnum? . G4eaa)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G508c '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4bc3) (no-infinities-violation? . G4bae) (make-no-nans-violation . G4bc1) (make-no-infinities-violation . G4bac) (real->flonum . G4f04) (flzero? . G4f03) (fltruncate . G4f02) (fltan . G4f01) (flsqrt . G4f00) (flsin . G4eff) (flround . G4efe) (flpositive? . G4efd) (flonum? . G4efc) (flodd? . G4efb) (flnumerator . G4efa) (flnegative? . G4ef9) (flnan? . G4ef8) (flmod0 . G4ef7) (flmod . G4ef6) (flmin . G4ef5) (flmax . G4ef4) (fllog . G4ef3) (flinteger? . G4ef2) (flinfinite? . G4ef1) (flfloor . G4ef0) (flfinite? . G4eef) (flexpt . G4eee) (flexp . G4eed) (fleven? . G4eec) (fldiv0-and-mod0 . G4eeb) (fldiv0 . G4eea) (fldiv-and-mod . G4ee9) (fldiv . G4ee8) (fldenominator . G4ee7) (flcos . G4ee6) (flceiling . G4ee5) (flatan . G4ee4) (flasin . G4ee3) (flacos . G4ee2) (flabs . G4ee1) (fl>? . G4ee0) (fl>=? . G4edf) (fl=? . G4ede) (fl<? . G4edd) (fl<=? . G4edc) (fl/ . G4edb) (fl- . G4eda) (fl+ . G4ed9) (fl* . G4ed8) (fixnum->flonum . G4ed7) (&no-nans . G4df5) (&no-infinities . G4df4)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G508d '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4fde) (string-ci-hash . G4fdd) (string-hash . G4fdc) (equal-hash . G4fdb) (hashtable-equivalence-function . G4fda) (make-hashtable . G4fd9) (hashtable-hash-function . G4fd8) (make-eqv-hashtable . G4fd7) (make-eq-hashtable . G4fd6) (hashtable? . G4fd5) (hashtable-update! . G4fd4) (hashtable-size . G4fd3) (hashtable-set! . G4fd2) (hashtable-ref . G4fd1) (hashtable-mutable? . G4fd0) (hashtable-keys . G4fcf) (hashtable-entries . G4fce) (hashtable-delete! . G4fcd) (hashtable-copy . G4fcc) (hashtable-contains? . G4fcb) (hashtable-clear! . G4fca)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G508e '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4fba) (eof-object . G4fb9) (current-error-port . G4fb8) (current-output-port . G4fb7) (current-input-port . G4fb6) (output-port? . G4fb5) (input-port? . G4fb4) (utf-8-codec . G4fb3) (utf-16-codec . G4fb2) (transcoder-error-handling-mode . G4fb1) (transcoder-eol-style . G4fb0) (transcoder-codec . G4faf) (transcoded-port . G4fae) (textual-port? . G4fad) (string->bytevector . G4fac) (standard-output-port . G4fab) (standard-input-port . G4faa) (standard-error-port . G4fa9) (set-port-position! . G4fa8) (put-u8 . G4fa7) (put-string . G4fa6) (put-datum . G4fa5) (put-char . G4fa4) (put-bytevector . G4fa3) (port? . G4fa2) (port-transcoder . G4fa1) (port-position . G4fa0) (port-has-set-port-position!? . G4f9f) (port-has-port-position? . G4f9e) (port-eof? . G4f9d) (output-port-buffer-mode . G4f9c) (open-string-output-port . G4f9b) (open-string-input-port . G4f9a) (open-file-output-port . G4f99) (open-file-input/output-port . G4f98) (open-file-input-port . G4f97) (open-bytevector-output-port . G4f96) (open-bytevector-input-port . G4f95) (native-transcoder . G4f94) (native-eol-style . G4f93) (make-transcoder . G4f92) (latin-1-codec . G4f91) (make-i/o-write-error . G4ac6) (make-i/o-read-error . G4ab1) (make-i/o-port-error . G4b64) (make-i/o-invalid-position-error . G4adc) (make-i/o-filename-error . G4af6) (make-i/o-file-protection-error . G4b0f) (make-i/o-file-is-read-only-error . G4b24) (make-i/o-file-does-not-exist-error . G4b4e) (make-i/o-file-already-exists-error . G4b39) (make-i/o-error . G4a9c) (make-i/o-encoding-error . G4b93) (make-i/o-decoding-error . G4b7d) (make-custom-textual-output-port . G4f90) (make-custom-textual-input/output-port . G4f8f) (make-custom-textual-input-port . G4f8e) (make-custom-binary-output-port . G4f8d) (make-custom-binary-input/output-port . G4f8c) (make-custom-binary-input-port . G4f8b) (lookahead-u8 . G4f89) (lookahead-char . G4f88) (i/o-write-error? . G4ac8) (i/o-read-error? . G4ab3) (i/o-port-error? . G4b68) (i/o-invalid-position-error? . G4ae0) (i/o-filename-error? . G4afa) (i/o-file-protection-error? . G4b11) (i/o-file-is-read-only-error? . G4b26) (i/o-file-does-not-exist-error? . G4b50) (i/o-file-already-exists-error? . G4b3b) (i/o-error? . G4a9e) (i/o-error-position . G4ae2) (i/o-error-port . G4b6a) (i/o-error-filename . G4afc) (i/o-encoding-error? . G4b97) (i/o-encoding-error-char . G4b99) (i/o-decoding-error? . G4b7f) (get-u8 . G4f87) (get-string-n! . G4f86) (get-string-n . G4f85) (get-string-all . G4f84) (get-line . G4f83) (get-datum . G4f82) (get-char . G4f81) (get-bytevector-some . G4f80) (get-bytevector-n! . G4f7f) (get-bytevector-n . G4f7e) (get-bytevector-all . G4f7d) (flush-output-port . G4f7c) (close-port . G4f7b) (call-with-string-output-port . G4f5a) (call-with-port . G4f59) (call-with-bytevector-output-port . G4f58) (bytevector->string . G4f57) (buffer-mode? . G4f56) (binary-port? . G4f55) (&i/o-encoding . G4df3) (&i/o-decoding . G4df2) (&i/o-port . G4df1) (&i/o-file-does-not-exist . G4df0) (&i/o-file-already-exists . G4def) (&i/o-file-is-read-only . G4dee) (&i/o-file-protection . G4ded) (&i/o-filename . G4dec) (&i/o-invalid-position . G4deb) (&i/o-write . G4dea) (&i/o-read . G4de9) (&i/o . G4de8) (error-handling-mode . G4dcd) (file-options . G4dcc) (buffer-mode . G4dcb) (eol-style . G4dca)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G508f '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f51) (enum-set=? . G4f50) (enum-set-universe . G4f4f) (enum-set-union . G4f4e) (enum-set-subset? . G4f4d) (enum-set-projection . G4f4c) (enum-set-member? . G4f4b) (enum-set-intersection . G4f4a) (enum-set-indexer . G4f49) (enum-set-difference . G4f48) (enum-set-constructor . G4f47) (enum-set-complement . G4f46) (enum-set->list . G4f45) (define-enumeration . G4dd8)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5090 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a14) (warning? . G498e) (violation? . G49cd) (undefined-violation? . G4a89) (syntax-violation? . G4a70) (syntax-violation-subform . G4a74) (syntax-violation-form . G4a72) (syntax-violation . G301d) (simple-conditions . G4f44) (serious-condition? . G49a3) (non-continuable-violation? . G4a2b) (message-condition? . G4977) (make-who-condition . G4a10) (make-warning . G498c) (make-violation . G49cb) (make-undefined-violation . G4a87) (make-syntax-violation . G4a6a) (make-serious-condition . G49a1) (make-non-continuable-violation . G4a29) (make-message-condition . G4973) (make-lexical-violation . G4a53) (make-irritants-condition . G49f6) (make-implementation-restriction-violation . G4a3e) (make-error . G49b6) (make-assertion-violation . G49e0) (lexical-violation? . G4a55) (irritants-condition? . G49fa) (implementation-restriction-violation? . G4a40) (error? . G49b8) (condition-who . G4a16) (condition-predicate . G4f43) (condition-message . G4979) (condition-irritants . G49fc) (condition-accessor . G4f42) (condition . G4f41) (assertion-violation? . G49e2) (condition? . G4f40) (&undefined . G4de7) (&syntax . G4de6) (&lexical . G4de5) (&implementation-restriction . G4de4) (&non-continuable . G4de3) (&who . G4de2) (&irritants . G4de1) (&assertion . G4de0) (&violation . G4ddf) (&error . G4dde) (&serious . G4ddd) (&warning . G4ddc) (&message . G4ddb) (&condition . G4dda) (define-condition-type . G4dd9)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5091 '(rnrs records inspection) '(6) '() '() '() '((record? . G4fed) (record-type-uid . G4fec) (record-type-sealed? . G4feb) (record-type-parent . G4fea) (record-type-opaque? . G4fe9) (record-type-name . G4fe8) (record-type-generative? . G4fe7) (record-type-field-names . G4fe6) (record-rtd . G4fe5) (record-field-mutable? . G4fe4)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5092 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G4ff4) (record-predicate . G4ff3) (record-mutator . G4ff2) (record-constructor . G4ff1) (record-accessor . G4ff0) (make-record-type-descriptor . G4fef) (make-record-constructor-descriptor . G4fee)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5093 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4dd7) (parent-rtd . G4dd6) (nongenerative . G4dd5) (opaque . G4dd4) (sealed . G4dd3) (protocol . G4dd2) (parent . G4dd1) (immutable . G4dd0) (mutable . G4dcf) (fields . G4dce) (record-constructor-descriptor . G4dad) (record-type-descriptor . G4dac)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G5094 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4bc7) (&no-nans-rtd . G4bc5) (&no-infinities-rcd . G4bb2) (&no-infinities-rtd . G4bb0) (&i/o-encoding-rcd . G4b9d) (&i/o-encoding-rtd . G4b9b) (&i/o-decoding-rcd . G4b83) (&i/o-decoding-rtd . G4b81) (&i/o-port-rcd . G4b6e) (&i/o-port-rtd . G4b6c) (&i/o-file-does-not-exist-rcd . G4b54) (&i/o-file-does-not-exist-rtd . G4b52) (&i/o-file-already-exists-rcd . G4b3f) (&i/o-file-already-exists-rtd . G4b3d) (&i/o-file-is-read-only-rcd . G4b2a) (&i/o-file-is-read-only-rtd . G4b28) (&i/o-file-protection-rcd . G4b15) (&i/o-file-protection-rtd . G4b13) (&i/o-filename-rcd . G4b00) (&i/o-filename-rtd . G4afe) (&i/o-invalid-position-rcd . G4ae6) (&i/o-invalid-position-rtd . G4ae4) (&i/o-write-rcd . G4acc) (&i/o-write-rtd . G4aca) (&i/o-read-rcd . G4ab7) (&i/o-read-rtd . G4ab5) (&i/o-rcd . G4aa2) (&i/o-rtd . G4aa0) (&undefined-rcd . G4a8d) (&undefined-rtd . G4a8b) (&syntax-rcd . G4a78) (&syntax-rtd . G4a76) (&lexical-rcd . G4a59) (&lexical-rtd . G4a57) (&implementation-restriction-rcd . G4a44) (&implementation-restriction-rtd . G4a42) (&non-continuable-rcd . G4a2f) (&non-continuable-rtd . G4a2d) (&who-rcd . G4a1a) (&who-rtd . G4a18) (&irritants-rcd . G4a00) (&irritants-rtd . G49fe) (&assertion-rcd . G49e6) (&assertion-rtd . G49e4) (&violation-rcd . G49d1) (&violation-rtd . G49cf) (&error-rcd . G49bc) (&error-rtd . G49ba) (&serious-rcd . G49a7) (&serious-rtd . G49a5) (&warning-rcd . G4992) (&warning-rtd . G4990) (&message-rcd . G497d) (&message-rtd . G497b) (&condition-rcd . G4922) (&condition-rtd . G4920) (syntax-error . G3019) (syntax-dispatch . G2f32) (pretty-print . G5074) (eval-core . G5073) (set-symbol-value! . G5072) (symbol-value . G5071) (gensym . G5070) (void . G506f) (load . G4cce) (interaction-environment . G3029) (char-ready? . G506e) (regexp? . G506d) (read-line . G506c) (dotted-list? . G506b) (circular-list? . G506a) (proper-list? . G5069) (circular-list . G5068) (last . G5067) (last-pair . G5066) (not-pair? . G5065) (split-at! . G5064) (split-at . G5063) (list= . G5062) (list-copy . G5061) (list-tabulate . G5060) (make-list . G505f) (xcons . G505e) (tenth . G505d) (ninth . G505c) (eighth . G505b) (seventh . G505a) (sixth . G5059) (fifth . G5058) (drop-right! . G5057) (drop-right . G5056) (take-right . G5055) (take! . G5054) (drop . G5053) (take . G5052) (car+cdr . G5051) (fourth . G5050) (third . G504f) (second . G504e) (first . G504d) (iota . G504c) (every . G504b) (ungensym . G504a) (alist->eq-hash-table . G5049) (assoc-ref . G5048) (alist-cons . G5047) (append-map . G5046) (print . G5045) (format . G5044) (standard-library-path . G5043) (file-newer? . G5042) (stat-mtime . G5041) (write-to-file . G5040) (file->list . G503f) (file->string . G503e) (digit->integer . G503d) (call-with-string-input-port . G503c) (call-with-string-io . G503b) (string-split . G503a) (bytevector-for-each . G5039) (string->regexp . G5038) (rxmatch . G5037) (regexp-replace-all . G5036) (hashtable-for-each . G5035) (call-process . G5034) (local-tz-offset . G5033) (microseconds . G5032) (readdir . G5031) (set-current-directory! . G5030) (expand-path . G502f) (current-directory . G502e) (%spawn . G502d) (%waitpid . G502c) (%ffi-supported? . G502b) (%ffi-pointer-ref . G502a) (%ffi-pointer->string . G5029) (%ffi-call->string-or-zero . G5028) (%ffi-call->double . G5027) (%ffi-call->void* . G5026) (%ffi-call->void . G5025) (%ffi-call->int . G5024) (%ffi-lookup . G5023) (%ffi-open . G5022) (%fork . G5021) (%pipe . G5020) (p . G501f) (get-environment-variables . G501e) (get-environment-variable . G501d) (get-timeofday . G501c) (get-command-line . G501b) (sys-display . G501a) (source-info . G5019) (make-compiler-instruction . G5018) (make-instruction . G5017) (set-source-info! . G5016) (bignum? . G5015) (fast-equal? . G5014) (fasl-read . G5013) (fasl-write . G5012) (make-parameter . G2823) (string-upcase . G5011) (string-titlecase . G5010) (string-normalize-nfkd . G500f) (string-normalize-nfkc . G500e) (string-normalize-nfd . G500d) (string-normalize-nfc . G500c) (string-foldcase . G500b) (string-downcase . G500a) (string-ci>? . G5009) (string-ci>=? . G5008) (string-ci=? . G5007) (string-ci<? . G5006) (string-ci<=? . G5005) (char-whitespace? . G5004) (char-upper-case? . G5003) (char-title-case? . G5002) (char-numeric? . G5001) (char-lower-case? . G5000) (char-general-category . G4fff) (char-upcase . G4ffe) (char-titlecase . G4ffd) (char-foldcase . G4ffc) (char-downcase . G4ffb) (char-ci>? . G4ffa) (char-ci>=? . G4ff9) (char-ci=? . G4ff8) (char-ci<? . G4ff7) (char-ci<=? . G4ff6) (char-alphabetic? . G4ff5) (make-variable-transformer . G2d79) (identifier? . G301f) (generate-temporaries . G300b) (free-identifier=? . G300d) (syntax->datum . G3023) (datum->syntax . G3021) (bound-identifier=? . G300f) (record-type-descriptor? . G4ff4) (record-predicate . G4ff3) (record-mutator . G4ff2) (record-constructor . G4ff1) (record-accessor . G4ff0) (make-record-type-descriptor . G4fef) (make-record-constructor-descriptor . G4fee) (record? . G4fed) (record-type-uid . G4fec) (record-type-sealed? . G4feb) (record-type-parent . G4fea) (record-type-opaque? . G4fe9) (record-type-name . G4fe8) (record-type-generative? . G4fe7) (record-type-field-names . G4fe6) (record-rtd . G4fe5) (record-field-mutable? . G4fe4) (delete-file . G4fe3) (file-exists? . G4fe2) (vector-sort! . G4fe1) (vector-sort . G4fe0) (list-sort . G4fdf) (symbol-hash . G4fde) (string-ci-hash . G4fdd) (string-hash . G4fdc) (equal-hash . G4fdb) (hashtable-equivalence-function . G4fda) (make-hashtable . G4fd9) (hashtable-hash-function . G4fd8) (make-eqv-hashtable . G4fd7) (make-eq-hashtable . G4fd6) (hashtable? . G4fd5) (hashtable-update! . G4fd4) (hashtable-size . G4fd3) (hashtable-set! . G4fd2) (hashtable-ref . G4fd1) (hashtable-mutable? . G4fd0) (hashtable-keys . G4fcf) (hashtable-entries . G4fce) (hashtable-delete! . G4fcd) (hashtable-copy . G4fcc) (hashtable-contains? . G4fcb) (hashtable-clear! . G4fca) (call-with-output-file . G4fc9) (call-with-input-file . G4fc8) (write-char . G4fc7) (write . G4fc6) (with-output-to-file . G4fc5) (with-input-from-file . G4fc4) (read-char . G4fc3) (read . G4fc2) (peek-char . G4fc1) (open-output-file . G4fc0) (open-input-file . G4fbf) (newline . G4fbe) (display . G4fbd) (close-output-port . G4fbc) (close-input-port . G4fbb) (eof-object? . G4fba) (eof-object . G4fb9) (current-error-port . G4fb8) (current-output-port . G4fb7) (current-input-port . G4fb6) (output-port? . G4fb5) (input-port? . G4fb4) (utf-8-codec . G4fb3) (utf-16-codec . G4fb2) (transcoder-error-handling-mode . G4fb1) (transcoder-eol-style . G4fb0) (transcoder-codec . G4faf) (transcoded-port . G4fae) (textual-port? . G4fad) (string->bytevector . G4fac) (standard-output-port . G4fab) (standard-input-port . G4faa) (standard-error-port . G4fa9) (set-port-position! . G4fa8) (put-u8 . G4fa7) (put-string . G4fa6) (put-datum . G4fa5) (put-char . G4fa4) (put-bytevector . G4fa3) (port? . G4fa2) (port-transcoder . G4fa1) (port-position . G4fa0) (port-has-set-port-position!? . G4f9f) (port-has-port-position? . G4f9e) (port-eof? . G4f9d) (output-port-buffer-mode . G4f9c) (open-string-output-port . G4f9b) (open-string-input-port . G4f9a) (open-file-output-port . G4f99) (open-file-input/output-port . G4f98) (open-file-input-port . G4f97) (open-bytevector-output-port . G4f96) (open-bytevector-input-port . G4f95) (native-transcoder . G4f94) (native-eol-style . G4f93) (make-transcoder . G4f92) (latin-1-codec . G4f91) (make-i/o-write-error . G4ac6) (make-i/o-read-error . G4ab1) (make-i/o-port-error . G4b64) (make-i/o-invalid-position-error . G4adc) (make-i/o-filename-error . G4af6) (make-i/o-file-protection-error . G4b0f) (make-i/o-file-is-read-only-error . G4b24) (make-i/o-file-does-not-exist-error . G4b4e) (make-i/o-file-already-exists-error . G4b39) (make-i/o-error . G4a9c) (make-i/o-encoding-error . G4b93) (make-i/o-decoding-error . G4b7d) (make-custom-textual-output-port . G4f90) (make-custom-textual-input/output-port . G4f8f) (make-custom-textual-input-port . G4f8e) (make-custom-binary-output-port . G4f8d) (make-custom-binary-input/output-port . G4f8c) (make-custom-binary-input-port . G4f8b) (make-bytevector . G4f8a) (lookahead-u8 . G4f89) (lookahead-char . G4f88) (i/o-write-error? . G4ac8) (i/o-read-error? . G4ab3) (i/o-port-error? . G4b68) (i/o-invalid-position-error? . G4ae0) (i/o-filename-error? . G4afa) (i/o-file-protection-error? . G4b11) (i/o-file-is-read-only-error? . G4b26) (i/o-file-does-not-exist-error? . G4b50) (i/o-file-already-exists-error? . G4b3b) (i/o-error? . G4a9e) (i/o-error-position . G4ae2) (i/o-error-port . G4b6a) (i/o-error-filename . G4afc) (i/o-encoding-error? . G4b97) (i/o-encoding-error-char . G4b99) (i/o-decoding-error? . G4b7f) (get-u8 . G4f87) (get-string-n! . G4f86) (get-string-n . G4f85) (get-string-all . G4f84) (get-line . G4f83) (get-datum . G4f82) (get-char . G4f81) (get-bytevector-some . G4f80) (get-bytevector-n! . G4f7f) (get-bytevector-n . G4f7e) (get-bytevector-all . G4f7d) (flush-output-port . G4f7c) (close-port . G4f7b) (scheme-report-environment . G2ff9) (quotient . G4f7a) (null-environment . G2ff7) (remainder . G4f79) (modulo . G4f78) (inexact->exact . G4f77) (force . G4f76) (exact->inexact . G4f75) (make-promise . G4f74) (exit . G4f73) (command-line . G4cc8) (string-fill! . G4f72) (string-set! . G4f71) (set-cdr! . G4f70) (set-car! . G4f6f) (remove . G4f6e) (remv . G4f6d) (remp . G4f6c) (remq . G4f6b) (partition . G4f6a) (memv . G4f69) (memq . G4f68) (memp . G4f67) (member . G4f66) (exists . G4f65) (for-all . G4f64) (fold-right . G4f63) (fold-left . G4f62) (find . G4f61) (filter . G4f60) (cons* . G4f5f) (assv . G4f5e) (assq . G4f5d) (assp . G4f5c) (assoc . G4f5b) (call-with-string-output-port . G4f5a) (call-with-port . G4f59) (call-with-bytevector-output-port . G4f58) (bytevector->string . G4f57) (buffer-mode? . G4f56) (binary-port? . G4f55) (with-exception-handler . G4f54) (raise-continuable . G4f53) (raise . G4f52) (eval . G2ffd) (environment . G2ff5) (make-enumeration . G4f51) (enum-set=? . G4f50) (enum-set-universe . G4f4f) (enum-set-union . G4f4e) (enum-set-subset? . G4f4d) (enum-set-projection . G4f4c) (enum-set-member? . G4f4b) (enum-set-intersection . G4f4a) (enum-set-indexer . G4f49) (enum-set-difference . G4f48) (enum-set-constructor . G4f47) (enum-set-complement . G4f46) (enum-set->list . G4f45) (who-condition? . G4a14) (warning? . G498e) (violation? . G49cd) (undefined-violation? . G4a89) (syntax-violation? . G4a70) (syntax-violation-subform . G4a74) (syntax-violation-form . G4a72) (syntax-violation . G301d) (simple-conditions . G4f44) (serious-condition? . G49a3) (non-continuable-violation? . G4a2b) (message-condition? . G4977) (make-who-condition . G4a10) (make-warning . G498c) (make-violation . G49cb) (make-undefined-violation . G4a87) (make-syntax-violation . G4a6a) (make-serious-condition . G49a1) (make-non-continuable-violation . G4a29) (make-message-condition . G4973) (make-lexical-violation . G4a53) (make-irritants-condition . G49f6) (make-implementation-restriction-violation . G4a3e) (make-error . G49b6) (make-assertion-violation . G49e0) (lexical-violation? . G4a55) (irritants-condition? . G49fa) (implementation-restriction-violation? . G4a40) (error? . G49b8) (condition-who . G4a16) (condition-predicate . G4f43) (condition-message . G4979) (condition-irritants . G49fc) (condition-accessor . G4f42) (condition . G4f41) (assertion-violation? . G49e2) (condition? . G4f40) (utf32->string . G4f3f) (utf16->string . G4f3e) (utf8->string . G4f3d) (uint-list->bytevector . G4f3c) (u8-list->bytevector . G4f3b) (string->utf8 . G4f3a) (string->utf32 . G4f39) (string->utf16 . G4f38) (sint-list->bytevector . G4f37) (native-endianness . G4f36) (bytevector? . G4f35) (bytevector=? . G4f34) (bytevector-uint-set! . G4f33) (bytevector-uint-ref . G4f32) (bytevector-u8-set! . G4f31) (bytevector-u8-ref . G4f30) (bytevector-u64-set! . G4f2f) (bytevector-u64-ref . G4f2e) (bytevector-u64-native-set! . G4f2d) (bytevector-u64-native-ref . G4f2c) (bytevector-u32-set! . G4f2b) (bytevector-u32-ref . G4f2a) (bytevector-u32-native-set! . G4f29) (bytevector-u32-native-ref . G4f28) (bytevector-u16-set! . G4f27) (bytevector-u16-ref . G4f26) (bytevector-u16-native-set! . G4f25) (bytevector-u16-native-ref . G4f24) (bytevector-sint-set! . G4f23) (bytevector-sint-ref . G4f22) (bytevector-s8-set! . G4f21) (bytevector-s8-ref . G4f20) (bytevector-s64-set! . G4f1f) (bytevector-s64-ref . G4f1e) (bytevector-s64-native-set! . G4f1d) (bytevector-s64-native-ref . G4f1c) (bytevector-s32-set! . G4f1b) (bytevector-s32-ref . G4f1a) (bytevector-s32-native-set! . G4f19) (bytevector-s32-native-ref . G4f18) (bytevector-s16-set! . G4f17) (bytevector-s16-ref . G4f16) (bytevector-s16-native-set! . G4f15) (bytevector-s16-native-ref . G4f14) (bytevector-length . G4f13) (bytevector-ieee-single-ref . G4f12) (bytevector-ieee-single-set! . G4f11) (bytevector-ieee-single-native-set! . G4f10) (bytevector-ieee-single-native-ref . G4f0f) (bytevector-ieee-double-set! . G4f0e) (bytevector-ieee-double-ref . G4f0d) (bytevector-ieee-double-native-set! . G4f0c) (bytevector-ieee-double-native-ref . G4f0b) (bytevector-fill! . G4f0a) (bytevector-copy! . G4f09) (bytevector-copy . G4f08) (bytevector->uint-list . G4f07) (bytevector->u8-list . G4f06) (bytevector->sint-list . G4f05) (no-nans-violation? . G4bc3) (no-infinities-violation? . G4bae) (make-no-nans-violation . G4bc1) (make-no-infinities-violation . G4bac) (real->flonum . G4f04) (flzero? . G4f03) (fltruncate . G4f02) (fltan . G4f01) (flsqrt . G4f00) (flsin . G4eff) (flround . G4efe) (flpositive? . G4efd) (flonum? . G4efc) (flodd? . G4efb) (flnumerator . G4efa) (flnegative? . G4ef9) (flnan? . G4ef8) (flmod0 . G4ef7) (flmod . G4ef6) (flmin . G4ef5) (flmax . G4ef4) (fllog . G4ef3) (flinteger? . G4ef2) (flinfinite? . G4ef1) (flfloor . G4ef0) (flfinite? . G4eef) (flexpt . G4eee) (flexp . G4eed) (fleven? . G4eec) (fldiv0-and-mod0 . G4eeb) (fldiv0 . G4eea) (fldiv-and-mod . G4ee9) (fldiv . G4ee8) (fldenominator . G4ee7) (flcos . G4ee6) (flceiling . G4ee5) (flatan . G4ee4) (flasin . G4ee3) (flacos . G4ee2) (flabs . G4ee1) (fl>? . G4ee0) (fl>=? . G4edf) (fl=? . G4ede) (fl<? . G4edd) (fl<=? . G4edc) (fl/ . G4edb) (fl- . G4eda) (fl+ . G4ed9) (fl* . G4ed8) (fixnum->flonum . G4ed7) (fxzero? . G4ed6) (fxxor . G4ed5) (fxrotate-bit-field . G4ed4) (fxreverse-bit-field . G4ed3) (fxpositive? . G4ed2) (fxodd? . G4ed1) (fxnot . G4ed0) (fxnegative? . G4ecf) (fxmod0 . G4ece) (fxmod . G4ecd) (fxmin . G4ecc) (fxmax . G4ecb) (fxlength . G4eca) (fxior . G4ec9) (fxif . G4ec8) (fxfirst-bit-set . G4ec7) (fxeven? . G4ec6) (fxdiv0-and-mod0 . G4ec5) (fxdiv0 . G4ec4) (fxdiv-and-mod . G4ec3) (fxdiv . G4ec2) (fxcopy-bit-field . G4ec1) (fxcopy-bit . G4ec0) (fxbit-set? . G4ebf) (fxbit-field . G4ebe) (fxbit-count . G4ebd) (fxarithmetic-shift-right . G4ebc) (fxarithmetic-shift-left . G4ebb) (fxarithmetic-shift . G4eba) (fxand . G4eb9) (fx>? . G4eb8) (fx>=? . G4eb7) (fx=? . G4eb6) (fx<? . G4eb5) (fx<=? . G4eb4) (fx-/carry . G4eb3) (fx- . G4eb2) (fx+/carry . G4eb1) (fx+ . G4eb0) (fx*/carry . G4eaf) (fx* . G4eae) (greatest-fixnum . G4ead) (least-fixnum . G4eac) (fixnum-width . G4eab) (fixnum? . G4eaa) (bitwise-rotate-bit-field . G4ea9) (bitwise-reverse-bit-field . G4ea8) (bitwise-length . G4ea7) (bitwise-if . G4ea6) (bitwise-first-bit-set . G4ea5) (bitwise-copy-bit-field . G4ea4) (bitwise-copy-bit . G4ea3) (bitwise-bit-set? . G4ea2) (bitwise-bit-field . G4ea1) (bitwise-bit-count . G4ea0) (bitwise-xor . G4e9f) (bitwise-ior . G4e9e) (bitwise-and . G4e9d) (bitwise-not . G4e9c) (bitwise-arithmetic-shift-right . G4e9b) (bitwise-arithmetic-shift-left . G4e9a) (bitwise-arithmetic-shift . G4e99) (zero? . G4e98) (vector? . G4e97) (vector-set! . G4e96) (vector-ref . G4e95) (vector-map . G4e94) (vector-length . G4e93) (vector-for-each . G4e92) (vector-fill! . G4e91) (vector->list . G4e90) (vector . G4e8f) (values . G4e8e) (truncate . G4e8d) (tan . G4e8c) (symbol? . G4e8b) (symbol=? . G4e8a) (symbol->string . G4e89) (substring . G4e88) (string? . G4e87) (string>? . G4e86) (string>=? . G4e85) (string=? . G4e84) (string<? . G4e83) (string<=? . G4e82) (string-ref . G4e81) (string-length . G4e80) (string-for-each . G4e7f) (string-copy . G4e7e) (string-append . G4e7d) (string->symbol . G4e7c) (string->number . G4e7b) (string->list . G4e7a) (string . G4e79) (sqrt . G4e78) (sin . G4e77) (round . G4e76) (reverse . G4e75) (real? . G4e74) (real-valued? . G4e73) (real-part . G4e72) (rationalize . G4e71) (rational? . G4e70) (rational-valued? . G4e6f) (procedure? . G4e6e) (positive? . G4e6d) (pair? . G4e6c) (odd? . G4e6b) (numerator . G4e6a) (number? . G4e69) (number->string . G4e68) (null? . G4e67) (not . G4e66) (negative? . G4e65) (nan? . G4e64) (min . G4e63) (max . G4e62) (map . G4e61) (make-vector . G4e60) (make-string . G4e5f) (make-rectangular . G4e5e) (make-polar . G4e5d) (magnitude . G4e5c) (log . G4e5b) (list? . G4e5a) (list-tail . G4e59) (list-ref . G4e58) (list->vector . G4e57) (list->string . G4e56) (list . G4e55) (length . G4e54) (lcm . G4e53) (integer? . G4e52) (integer-valued? . G4e51) (integer->char . G4e50) (infinite? . G4e4f) (inexact? . G4e4e) (inexact . G4e4d) (imag-part . G4e4c) (gcd . G4e4b) (for-each . G4e4a) (floor . G4e49) (finite? . G4e48) (expt . G4e47) (exp . G4e46) (exact? . G4e45) (exact-integer-sqrt . G4e44) (exact . G4e43) (even? . G4e42) (error . G4e41) (eqv? . G4e40) (equal? . G4e3f) (eq? . G4e3e) (dynamic-wind . G4e3d) (div0-and-mod0 . G4e3c) (mod0 . G4e3b) (div0 . G4e3a) (div-and-mod . G4e39) (mod . G4e38) (div . G4e37) (denominator . G4e36) (cos . G4e35) (cons . G4e34) (complex? . G4e33) (char? . G4e32) (char>? . G4e31) (char>=? . G4e30) (char=? . G4e2f) (char<? . G4e2e) (char<=? . G4e2d) (char->integer . G4e2c) (ceiling . G4e2b) (call-with-values . G4e2a) (call/cc . G4e29) (call-with-current-continuation . G4e28) (cddddr . G4e27) (cdddar . G4e26) (cddadr . G4e25) (cddaar . G4e24) (cdaddr . G4e23) (cdadar . G4e22) (cdaadr . G4e21) (cdaaar . G4e20) (cadddr . G4e1f) (caddar . G4e1e) (cadadr . G4e1d) (cadaar . G4e1c) (caaddr . G4e1b) (caadar . G4e1a) (caaadr . G4e19) (caaaar . G4e18) (cdddr . G4e17) (cddar . G4e16) (cdadr . G4e15) (cdaar . G4e14) (caddr . G4e13) (cadar . G4e12) (caadr . G4e11) (caaar . G4e10) (cddr . G4e0f) (cdar . G4e0e) (cadr . G4e0d) (caar . G4e0c) (cdr . G4e0b) (car . G4e0a) (boolean? . G4e09) (boolean=? . G4e08) (atan . G4e07) (assertion-violation . G4e06) (asin . G4e05) (apply . G4e04) (append . G4e03) (angle . G4e02) (acos . G4e01) (abs . G4e00) (/ . G4dff) (* . G4dfe) (- . G4dfd) (+ . G4dfc) (>= . G4dfb) (> . G4dfa) (= . G4df9) (<= . G4df8) (< . G4df7) (library . G4df6) (&no-nans . G4df5) (&no-infinities . G4df4) (&i/o-encoding . G4df3) (&i/o-decoding . G4df2) (&i/o-port . G4df1) (&i/o-file-does-not-exist . G4df0) (&i/o-file-already-exists . G4def) (&i/o-file-is-read-only . G4dee) (&i/o-file-protection . G4ded) (&i/o-filename . G4dec) (&i/o-invalid-position . G4deb) (&i/o-write . G4dea) (&i/o-read . G4de9) (&i/o . G4de8) (&undefined . G4de7) (&syntax . G4de6) (&lexical . G4de5) (&implementation-restriction . G4de4) (&non-continuable . G4de3) (&who . G4de2) (&irritants . G4de1) (&assertion . G4de0) (&violation . G4ddf) (&error . G4dde) (&serious . G4ddd) (&warning . G4ddc) (&message . G4ddb) (&condition . G4dda) (define-condition-type . G4dd9) (define-enumeration . G4dd8) (define-record-type . G4dd7) (parent-rtd . G4dd6) (nongenerative . G4dd5) (opaque . G4dd4) (sealed . G4dd3) (protocol . G4dd2) (parent . G4dd1) (immutable . G4dd0) (mutable . G4dcf) (fields . G4dce) (error-handling-mode . G4dcd) (file-options . G4dcc) (buffer-mode . G4dcb) (eol-style . G4dca) (guard . G4dc9) (trace-define . G4dc8) (trace-lambda . G4dc7) (unsyntax-splicing . G4dc6) (unsyntax . G4dc5) (unquote-splicing . G4dc4) (unquote . G4dc3) (_ . G4dc2) (else . G4dc1) (=> . G4dc0) (... . G4dbf) (assert . G4dbe) (endianness . G4dbd) (delay . G4dbc) (time . G4dbb) (do . G4dba) (cond . G4db9) (let* . G4db8) (let . G4db7) (let*-values . G4db6) (let-values . G4db5) (identifier-syntax . G4db4) (with-syntax . G4db3) (quasisyntax . G4db2) (quasiquote . G4db1) (syntax-rules . G4db0) (include . G4daf) (define-struct . G4dae) (record-constructor-descriptor . G4dad) (record-type-descriptor . G4dac) (case . G4dab) (parameterize . G4daa) (unless . G4da9) (when . G4da8) (or . G4da7) (and . G4da6) (if . G4da5) (letrec* . G4da4) (letrec . G4da3) (type-descriptor . G4da2) (case-lambda . G4da1) (lambda . G4da0) (syntax . G4d9f) (syntax-case . G4d9e) (quote . G4d9d) (foreign-call . G4d9c) (letrec-syntax . G4d9b) (let-syntax . G4d9a) (set! . G4d99) (import . G4d98) (begin . G4d97) (module . G4d96) (define-syntax . G4d95) (define . G4d94)) '((G4bc7 core-prim . &no-nans-rcd) (G4bc5 core-prim . &no-nans-rtd) (G4bb2 core-prim . &no-infinities-rcd) (G4bb0 core-prim . &no-infinities-rtd) (G4b9d core-prim . &i/o-encoding-rcd) (G4b9b core-prim . &i/o-encoding-rtd) (G4b83 core-prim . &i/o-decoding-rcd) (G4b81 core-prim . &i/o-decoding-rtd) (G4b6e core-prim . &i/o-port-rcd) (G4b6c core-prim . &i/o-port-rtd) (G4b54 core-prim . &i/o-file-does-not-exist-rcd) (G4b52 core-prim . &i/o-file-does-not-exist-rtd) (G4b3f core-prim . &i/o-file-already-exists-rcd) (G4b3d core-prim . &i/o-file-already-exists-rtd) (G4b2a core-prim . &i/o-file-is-read-only-rcd) (G4b28 core-prim . &i/o-file-is-read-only-rtd) (G4b15 core-prim . &i/o-file-protection-rcd) (G4b13 core-prim . &i/o-file-protection-rtd) (G4b00 core-prim . &i/o-filename-rcd) (G4afe core-prim . &i/o-filename-rtd) (G4ae6 core-prim . &i/o-invalid-position-rcd) (G4ae4 core-prim . &i/o-invalid-position-rtd) (G4acc core-prim . &i/o-write-rcd) (G4aca core-prim . &i/o-write-rtd) (G4ab7 core-prim . &i/o-read-rcd) (G4ab5 core-prim . &i/o-read-rtd) (G4aa2 core-prim . &i/o-rcd) (G4aa0 core-prim . &i/o-rtd) (G4a8d core-prim . &undefined-rcd) (G4a8b core-prim . &undefined-rtd) (G4a78 core-prim . &syntax-rcd) (G4a76 core-prim . &syntax-rtd) (G4a59 core-prim . &lexical-rcd) (G4a57 core-prim . &lexical-rtd) (G4a44 core-prim . &implementation-restriction-rcd) (G4a42 core-prim . &implementation-restriction-rtd) (G4a2f core-prim . &non-continuable-rcd) (G4a2d core-prim . &non-continuable-rtd) (G4a1a core-prim . &who-rcd) (G4a18 core-prim . &who-rtd) (G4a00 core-prim . &irritants-rcd) (G49fe core-prim . &irritants-rtd) (G49e6 core-prim . &assertion-rcd) (G49e4 core-prim . &assertion-rtd) (G49d1 core-prim . &violation-rcd) (G49cf core-prim . &violation-rtd) (G49bc core-prim . &error-rcd) (G49ba core-prim . &error-rtd) (G49a7 core-prim . &serious-rcd) (G49a5 core-prim . &serious-rtd) (G4992 core-prim . &warning-rcd) (G4990 core-prim . &warning-rtd) (G497d core-prim . &message-rcd) (G497b core-prim . &message-rtd) (G4922 core-prim . &condition-rcd) (G4920 core-prim . &condition-rtd) (G3019 core-prim . syntax-error) (G2f32 core-prim . syntax-dispatch) (G5074 core-prim . pretty-print) (G5073 core-prim . eval-core) (G5072 core-prim . set-symbol-value!) (G5071 core-prim . symbol-value) (G5070 core-prim . gensym) (G506f core-prim . void) (G4cce core-prim . load) (G3029 core-prim . interaction-environment) (G506e core-prim . char-ready?) (G506d core-prim . regexp?) (G506c core-prim . read-line) (G506b core-prim . dotted-list?) (G506a core-prim . circular-list?) (G5069 core-prim . proper-list?) (G5068 core-prim . circular-list) (G5067 core-prim . last) (G5066 core-prim . last-pair) (G5065 core-prim . not-pair?) (G5064 core-prim . split-at!) (G5063 core-prim . split-at) (G5062 core-prim . list=) (G5061 core-prim . list-copy) (G5060 core-prim . list-tabulate) (G505f core-prim . make-list) (G505e core-prim . xcons) (G505d core-prim . tenth) (G505c core-prim . ninth) (G505b core-prim . eighth) (G505a core-prim . seventh) (G5059 core-prim . sixth) (G5058 core-prim . fifth) (G5057 core-prim . drop-right!) (G5056 core-prim . drop-right) (G5055 core-prim . take-right) (G5054 core-prim . take!) (G5053 core-prim . drop) (G5052 core-prim . take) (G5051 core-prim . car+cdr) (G5050 core-prim . fourth) (G504f core-prim . third) (G504e core-prim . second) (G504d core-prim . first) (G504c core-prim . iota) (G504b core-prim . every) (G504a core-prim . ungensym) (G5049 core-prim . alist->eq-hash-table) (G5048 core-prim . assoc-ref) (G5047 core-prim . alist-cons) (G5046 core-prim . append-map) (G5045 core-prim . print) (G5044 core-prim . format) (G5043 core-prim . standard-library-path) (G5042 core-prim . file-newer?) (G5041 core-prim . stat-mtime) (G5040 core-prim . write-to-file) (G503f core-prim . file->list) (G503e core-prim . file->string) (G503d core-prim . digit->integer) (G503c core-prim . call-with-string-input-port) (G503b core-prim . call-with-string-io) (G503a core-prim . string-split) (G5039 core-prim . bytevector-for-each) (G5038 core-prim . string->regexp) (G5037 core-prim . rxmatch) (G5036 core-prim . regexp-replace-all) (G5035 core-prim . hashtable-for-each) (G5034 core-prim . call-process) (G5033 core-prim . local-tz-offset) (G5032 core-prim . microseconds) (G5031 core-prim . readdir) (G5030 core-prim . set-current-directory!) (G502f core-prim . expand-path) (G502e core-prim . current-directory) (G502d core-prim . %spawn) (G502c core-prim . %waitpid) (G502b core-prim . %ffi-supported?) (G502a core-prim . %ffi-pointer-ref) (G5029 core-prim . %ffi-pointer->string) (G5028 core-prim . %ffi-call->string-or-zero) (G5027 core-prim . %ffi-call->double) (G5026 core-prim . %ffi-call->void*) (G5025 core-prim . %ffi-call->void) (G5024 core-prim . %ffi-call->int) (G5023 core-prim . %ffi-lookup) (G5022 core-prim . %ffi-open) (G5021 core-prim . %fork) (G5020 core-prim . %pipe) (G501f core-prim . p) (G501e core-prim . get-environment-variables) (G501d core-prim . get-environment-variable) (G501c core-prim . get-timeofday) (G501b core-prim . get-command-line) (G501a core-prim . sys-display) (G5019 core-prim . source-info) (G5018 core-prim . make-compiler-instruction) (G5017 core-prim . make-instruction) (G5016 core-prim . set-source-info!) (G5015 core-prim . bignum?) (G5014 core-prim . fast-equal?) (G5013 core-prim . fasl-read) (G5012 core-prim . fasl-write) (G2823 core-prim . make-parameter) (G5011 core-prim . string-upcase) (G5010 core-prim . string-titlecase) (G500f core-prim . string-normalize-nfkd) (G500e core-prim . string-normalize-nfkc) (G500d core-prim . string-normalize-nfd) (G500c core-prim . string-normalize-nfc) (G500b core-prim . string-foldcase) (G500a core-prim . string-downcase) (G5009 core-prim . string-ci>?) (G5008 core-prim . string-ci>=?) (G5007 core-prim . string-ci=?) (G5006 core-prim . string-ci<?) (G5005 core-prim . string-ci<=?) (G5004 core-prim . char-whitespace?) (G5003 core-prim . char-upper-case?) (G5002 core-prim . char-title-case?) (G5001 core-prim . char-numeric?) (G5000 core-prim . char-lower-case?) (G4fff core-prim . char-general-category) (G4ffe core-prim . char-upcase) (G4ffd core-prim . char-titlecase) (G4ffc core-prim . char-foldcase) (G4ffb core-prim . char-downcase) (G4ffa core-prim . char-ci>?) (G4ff9 core-prim . char-ci>=?) (G4ff8 core-prim . char-ci=?) (G4ff7 core-prim . char-ci<?) (G4ff6 core-prim . char-ci<=?) (G4ff5 core-prim . char-alphabetic?) (G2d79 core-prim . make-variable-transformer) (G301f core-prim . identifier?) (G300b core-prim . generate-temporaries) (G300d core-prim . free-identifier=?) (G3023 core-prim . syntax->datum) (G3021 core-prim . datum->syntax) (G300f core-prim . bound-identifier=?) (G4ff4 core-prim . record-type-descriptor?) (G4ff3 core-prim . record-predicate) (G4ff2 core-prim . record-mutator) (G4ff1 core-prim . record-constructor) (G4ff0 core-prim . record-accessor) (G4fef core-prim . make-record-type-descriptor) (G4fee core-prim . make-record-constructor-descriptor) (G4fed core-prim . record?) (G4fec core-prim . record-type-uid) (G4feb core-prim . record-type-sealed?) (G4fea core-prim . record-type-parent) (G4fe9 core-prim . record-type-opaque?) (G4fe8 core-prim . record-type-name) (G4fe7 core-prim . record-type-generative?) (G4fe6 core-prim . record-type-field-names) (G4fe5 core-prim . record-rtd) (G4fe4 core-prim . record-field-mutable?) (G4fe3 core-prim . delete-file) (G4fe2 core-prim . file-exists?) (G4fe1 core-prim . vector-sort!) (G4fe0 core-prim . vector-sort) (G4fdf core-prim . list-sort) (G4fde core-prim . symbol-hash) (G4fdd core-prim . string-ci-hash) (G4fdc core-prim . string-hash) (G4fdb core-prim . equal-hash) (G4fda core-prim . hashtable-equivalence-function) (G4fd9 core-prim . make-hashtable) (G4fd8 core-prim . hashtable-hash-function) (G4fd7 core-prim . make-eqv-hashtable) (G4fd6 core-prim . make-eq-hashtable) (G4fd5 core-prim . hashtable?) (G4fd4 core-prim . hashtable-update!) (G4fd3 core-prim . hashtable-size) (G4fd2 core-prim . hashtable-set!) (G4fd1 core-prim . hashtable-ref) (G4fd0 core-prim . hashtable-mutable?) (G4fcf core-prim . hashtable-keys) (G4fce core-prim . hashtable-entries) (G4fcd core-prim . hashtable-delete!) (G4fcc core-prim . hashtable-copy) (G4fcb core-prim . hashtable-contains?) (G4fca core-prim . hashtable-clear!) (G4fc9 core-prim . call-with-output-file) (G4fc8 core-prim . call-with-input-file) (G4fc7 core-prim . write-char) (G4fc6 core-prim . write) (G4fc5 core-prim . with-output-to-file) (G4fc4 core-prim . with-input-from-file) (G4fc3 core-prim . read-char) (G4fc2 core-prim . read) (G4fc1 core-prim . peek-char) (G4fc0 core-prim . open-output-file) (G4fbf core-prim . open-input-file) (G4fbe core-prim . newline) (G4fbd core-prim . display) (G4fbc core-prim . close-output-port) (G4fbb core-prim . close-input-port) (G4fba core-prim . eof-object?) (G4fb9 core-prim . eof-object) (G4fb8 core-prim . current-error-port) (G4fb7 core-prim . current-output-port) (G4fb6 core-prim . current-input-port) (G4fb5 core-prim . output-port?) (G4fb4 core-prim . input-port?) (G4fb3 core-prim . utf-8-codec) (G4fb2 core-prim . utf-16-codec) (G4fb1 core-prim . transcoder-error-handling-mode) (G4fb0 core-prim . transcoder-eol-style) (G4faf core-prim . transcoder-codec) (G4fae core-prim . transcoded-port) (G4fad core-prim . textual-port?) (G4fac core-prim . string->bytevector) (G4fab core-prim . standard-output-port) (G4faa core-prim . standard-input-port) (G4fa9 core-prim . standard-error-port) (G4fa8 core-prim . set-port-position!) (G4fa7 core-prim . put-u8) (G4fa6 core-prim . put-string) (G4fa5 core-prim . put-datum) (G4fa4 core-prim . put-char) (G4fa3 core-prim . put-bytevector) (G4fa2 core-prim . port?) (G4fa1 core-prim . port-transcoder) (G4fa0 core-prim . port-position) (G4f9f core-prim . port-has-set-port-position!?) (G4f9e core-prim . port-has-port-position?) (G4f9d core-prim . port-eof?) (G4f9c core-prim . output-port-buffer-mode) (G4f9b core-prim . open-string-output-port) (G4f9a core-prim . open-string-input-port) (G4f99 core-prim . open-file-output-port) (G4f98 core-prim . open-file-input/output-port) (G4f97 core-prim . open-file-input-port) (G4f96 core-prim . open-bytevector-output-port) (G4f95 core-prim . open-bytevector-input-port) (G4f94 core-prim . native-transcoder) (G4f93 core-prim . native-eol-style) (G4f92 core-prim . make-transcoder) (G4f91 core-prim . latin-1-codec) (G4ac6 core-prim . make-i/o-write-error) (G4ab1 core-prim . make-i/o-read-error) (G4b64 core-prim . make-i/o-port-error) (G4adc core-prim . make-i/o-invalid-position-error) (G4af6 core-prim . make-i/o-filename-error) (G4b0f core-prim . make-i/o-file-protection-error) (G4b24 core-prim . make-i/o-file-is-read-only-error) (G4b4e core-prim . make-i/o-file-does-not-exist-error) (G4b39 core-prim . make-i/o-file-already-exists-error) (G4a9c core-prim . make-i/o-error) (G4b93 core-prim . make-i/o-encoding-error) (G4b7d core-prim . make-i/o-decoding-error) (G4f90 core-prim . make-custom-textual-output-port) (G4f8f core-prim . make-custom-textual-input/output-port) (G4f8e core-prim . make-custom-textual-input-port) (G4f8d core-prim . make-custom-binary-output-port) (G4f8c core-prim . make-custom-binary-input/output-port) (G4f8b core-prim . make-custom-binary-input-port) (G4f8a core-prim . make-bytevector) (G4f89 core-prim . lookahead-u8) (G4f88 core-prim . lookahead-char) (G4ac8 core-prim . i/o-write-error?) (G4ab3 core-prim . i/o-read-error?) (G4b68 core-prim . i/o-port-error?) (G4ae0 core-prim . i/o-invalid-position-error?) (G4afa core-prim . i/o-filename-error?) (G4b11 core-prim . i/o-file-protection-error?) (G4b26 core-prim . i/o-file-is-read-only-error?) (G4b50 core-prim . i/o-file-does-not-exist-error?) (G4b3b core-prim . i/o-file-already-exists-error?) (G4a9e core-prim . i/o-error?) (G4ae2 core-prim . i/o-error-position) (G4b6a core-prim . i/o-error-port) (G4afc core-prim . i/o-error-filename) (G4b97 core-prim . i/o-encoding-error?) (G4b99 core-prim . i/o-encoding-error-char) (G4b7f core-prim . i/o-decoding-error?) (G4f87 core-prim . get-u8) (G4f86 core-prim . get-string-n!) (G4f85 core-prim . get-string-n) (G4f84 core-prim . get-string-all) (G4f83 core-prim . get-line) (G4f82 core-prim . get-datum) (G4f81 core-prim . get-char) (G4f80 core-prim . get-bytevector-some) (G4f7f core-prim . get-bytevector-n!) (G4f7e core-prim . get-bytevector-n) (G4f7d core-prim . get-bytevector-all) (G4f7c core-prim . flush-output-port) (G4f7b core-prim . close-port) (G2ff9 core-prim . scheme-report-environment) (G4f7a core-prim . quotient) (G2ff7 core-prim . null-environment) (G4f79 core-prim . remainder) (G4f78 core-prim . modulo) (G4f77 core-prim . inexact->exact) (G4f76 core-prim . force) (G4f75 core-prim . exact->inexact) (G4f74 core-prim . make-promise) (G4f73 core-prim . exit) (G4cc8 core-prim . command-line) (G4f72 core-prim . string-fill!) (G4f71 core-prim . string-set!) (G4f70 core-prim . set-cdr!) (G4f6f core-prim . set-car!) (G4f6e core-prim . remove) (G4f6d core-prim . remv) (G4f6c core-prim . remp) (G4f6b core-prim . remq) (G4f6a core-prim . partition) (G4f69 core-prim . memv) (G4f68 core-prim . memq) (G4f67 core-prim . memp) (G4f66 core-prim . member) (G4f65 core-prim . exists) (G4f64 core-prim . for-all) (G4f63 core-prim . fold-right) (G4f62 core-prim . fold-left) (G4f61 core-prim . find) (G4f60 core-prim . filter) (G4f5f core-prim . cons*) (G4f5e core-prim . assv) (G4f5d core-prim . assq) (G4f5c core-prim . assp) (G4f5b core-prim . assoc) (G4f5a core-prim . call-with-string-output-port) (G4f59 core-prim . call-with-port) (G4f58 core-prim . call-with-bytevector-output-port) (G4f57 core-prim . bytevector->string) (G4f56 core-prim . buffer-mode?) (G4f55 core-prim . binary-port?) (G4f54 core-prim . with-exception-handler) (G4f53 core-prim . raise-continuable) (G4f52 core-prim . raise) (G2ffd core-prim . eval) (G2ff5 core-prim . environment) (G4f51 core-prim . make-enumeration) (G4f50 core-prim . enum-set=?) (G4f4f core-prim . enum-set-universe) (G4f4e core-prim . enum-set-union) (G4f4d core-prim . enum-set-subset?) (G4f4c core-prim . enum-set-projection) (G4f4b core-prim . enum-set-member?) (G4f4a core-prim . enum-set-intersection) (G4f49 core-prim . enum-set-indexer) (G4f48 core-prim . enum-set-difference) (G4f47 core-prim . enum-set-constructor) (G4f46 core-prim . enum-set-complement) (G4f45 core-prim . enum-set->list) (G4a14 core-prim . who-condition?) (G498e core-prim . warning?) (G49cd core-prim . violation?) (G4a89 core-prim . undefined-violation?) (G4a70 core-prim . syntax-violation?) (G4a74 core-prim . syntax-violation-subform) (G4a72 core-prim . syntax-violation-form) (G301d core-prim . syntax-violation) (G4f44 core-prim . simple-conditions) (G49a3 core-prim . serious-condition?) (G4a2b core-prim . non-continuable-violation?) (G4977 core-prim . message-condition?) (G4a10 core-prim . make-who-condition) (G498c core-prim . make-warning) (G49cb core-prim . make-violation) (G4a87 core-prim . make-undefined-violation) (G4a6a core-prim . make-syntax-violation) (G49a1 core-prim . make-serious-condition) (G4a29 core-prim . make-non-continuable-violation) (G4973 core-prim . make-message-condition) (G4a53 core-prim . make-lexical-violation) (G49f6 core-prim . make-irritants-condition) (G4a3e core-prim . make-implementation-restriction-violation) (G49b6 core-prim . make-error) (G49e0 core-prim . make-assertion-violation) (G4a55 core-prim . lexical-violation?) (G49fa core-prim . irritants-condition?) (G4a40 core-prim . implementation-restriction-violation?) (G49b8 core-prim . error?) (G4a16 core-prim . condition-who) (G4f43 core-prim . condition-predicate) (G4979 core-prim . condition-message) (G49fc core-prim . condition-irritants) (G4f42 core-prim . condition-accessor) (G4f41 core-prim . condition) (G49e2 core-prim . assertion-violation?) (G4f40 core-prim . condition?) (G4f3f core-prim . utf32->string) (G4f3e core-prim . utf16->string) (G4f3d core-prim . utf8->string) (G4f3c core-prim . uint-list->bytevector) (G4f3b core-prim . u8-list->bytevector) (G4f3a core-prim . string->utf8) (G4f39 core-prim . string->utf32) (G4f38 core-prim . string->utf16) (G4f37 core-prim . sint-list->bytevector) (G4f36 core-prim . native-endianness) (G4f35 core-prim . bytevector?) (G4f34 core-prim . bytevector=?) (G4f33 core-prim . bytevector-uint-set!) (G4f32 core-prim . bytevector-uint-ref) (G4f31 core-prim . bytevector-u8-set!) (G4f30 core-prim . bytevector-u8-ref) (G4f2f core-prim . bytevector-u64-set!) (G4f2e core-prim . bytevector-u64-ref) (G4f2d core-prim . bytevector-u64-native-set!) (G4f2c core-prim . bytevector-u64-native-ref) (G4f2b core-prim . bytevector-u32-set!) (G4f2a core-prim . bytevector-u32-ref) (G4f29 core-prim . bytevector-u32-native-set!) (G4f28 core-prim . bytevector-u32-native-ref) (G4f27 core-prim . bytevector-u16-set!) (G4f26 core-prim . bytevector-u16-ref) (G4f25 core-prim . bytevector-u16-native-set!) (G4f24 core-prim . bytevector-u16-native-ref) (G4f23 core-prim . bytevector-sint-set!) (G4f22 core-prim . bytevector-sint-ref) (G4f21 core-prim . bytevector-s8-set!) (G4f20 core-prim . bytevector-s8-ref) (G4f1f core-prim . bytevector-s64-set!) (G4f1e core-prim . bytevector-s64-ref) (G4f1d core-prim . bytevector-s64-native-set!) (G4f1c core-prim . bytevector-s64-native-ref) (G4f1b core-prim . bytevector-s32-set!) (G4f1a core-prim . bytevector-s32-ref) (G4f19 core-prim . bytevector-s32-native-set!) (G4f18 core-prim . bytevector-s32-native-ref) (G4f17 core-prim . bytevector-s16-set!) (G4f16 core-prim . bytevector-s16-ref) (G4f15 core-prim . bytevector-s16-native-set!) (G4f14 core-prim . bytevector-s16-native-ref) (G4f13 core-prim . bytevector-length) (G4f12 core-prim . bytevector-ieee-single-ref) (G4f11 core-prim . bytevector-ieee-single-set!) (G4f10 core-prim . bytevector-ieee-single-native-set!) (G4f0f core-prim . bytevector-ieee-single-native-ref) (G4f0e core-prim . bytevector-ieee-double-set!) (G4f0d core-prim . bytevector-ieee-double-ref) (G4f0c core-prim . bytevector-ieee-double-native-set!) (G4f0b core-prim . bytevector-ieee-double-native-ref) (G4f0a core-prim . bytevector-fill!) (G4f09 core-prim . bytevector-copy!) (G4f08 core-prim . bytevector-copy) (G4f07 core-prim . bytevector->uint-list) (G4f06 core-prim . bytevector->u8-list) (G4f05 core-prim . bytevector->sint-list) (G4bc3 core-prim . no-nans-violation?) (G4bae core-prim . no-infinities-violation?) (G4bc1 core-prim . make-no-nans-violation) (G4bac core-prim . make-no-infinities-violation) (G4f04 core-prim . real->flonum) (G4f03 core-prim . flzero?) (G4f02 core-prim . fltruncate) (G4f01 core-prim . fltan) (G4f00 core-prim . flsqrt) (G4eff core-prim . flsin) (G4efe core-prim . flround) (G4efd core-prim . flpositive?) (G4efc core-prim . flonum?) (G4efb core-prim . flodd?) (G4efa core-prim . flnumerator) (G4ef9 core-prim . flnegative?) (G4ef8 core-prim . flnan?) (G4ef7 core-prim . flmod0) (G4ef6 core-prim . flmod) (G4ef5 core-prim . flmin) (G4ef4 core-prim . flmax) (G4ef3 core-prim . fllog) (G4ef2 core-prim . flinteger?) (G4ef1 core-prim . flinfinite?) (G4ef0 core-prim . flfloor) (G4eef core-prim . flfinite?) (G4eee core-prim . flexpt) (G4eed core-prim . flexp) (G4eec core-prim . fleven?) (G4eeb core-prim . fldiv0-and-mod0) (G4eea core-prim . fldiv0) (G4ee9 core-prim . fldiv-and-mod) (G4ee8 core-prim . fldiv) (G4ee7 core-prim . fldenominator) (G4ee6 core-prim . flcos) (G4ee5 core-prim . flceiling) (G4ee4 core-prim . flatan) (G4ee3 core-prim . flasin) (G4ee2 core-prim . flacos) (G4ee1 core-prim . flabs) (G4ee0 core-prim . fl>?) (G4edf core-prim . fl>=?) (G4ede core-prim . fl=?) (G4edd core-prim . fl<?) (G4edc core-prim . fl<=?) (G4edb core-prim . fl/) (G4eda core-prim . fl-) (G4ed9 core-prim . fl+) (G4ed8 core-prim . fl*) (G4ed7 core-prim . fixnum->flonum) (G4ed6 core-prim . fxzero?) (G4ed5 core-prim . fxxor) (G4ed4 core-prim . fxrotate-bit-field) (G4ed3 core-prim . fxreverse-bit-field) (G4ed2 core-prim . fxpositive?) (G4ed1 core-prim . fxodd?) (G4ed0 core-prim . fxnot) (G4ecf core-prim . fxnegative?) (G4ece core-prim . fxmod0) (G4ecd core-prim . fxmod) (G4ecc core-prim . fxmin) (G4ecb core-prim . fxmax) (G4eca core-prim . fxlength) (G4ec9 core-prim . fxior) (G4ec8 core-prim . fxif) (G4ec7 core-prim . fxfirst-bit-set) (G4ec6 core-prim . fxeven?) (G4ec5 core-prim . fxdiv0-and-mod0) (G4ec4 core-prim . fxdiv0) (G4ec3 core-prim . fxdiv-and-mod) (G4ec2 core-prim . fxdiv) (G4ec1 core-prim . fxcopy-bit-field) (G4ec0 core-prim . fxcopy-bit) (G4ebf core-prim . fxbit-set?) (G4ebe core-prim . fxbit-field) (G4ebd core-prim . fxbit-count) (G4ebc core-prim . fxarithmetic-shift-right) (G4ebb core-prim . fxarithmetic-shift-left) (G4eba core-prim . fxarithmetic-shift) (G4eb9 core-prim . fxand) (G4eb8 core-prim . fx>?) (G4eb7 core-prim . fx>=?) (G4eb6 core-prim . fx=?) (G4eb5 core-prim . fx<?) (G4eb4 core-prim . fx<=?) (G4eb3 core-prim . fx-/carry) (G4eb2 core-prim . fx-) (G4eb1 core-prim . fx+/carry) (G4eb0 core-prim . fx+) (G4eaf core-prim . fx*/carry) (G4eae core-prim . fx*) (G4ead core-prim . greatest-fixnum) (G4eac core-prim . least-fixnum) (G4eab core-prim . fixnum-width) (G4eaa core-prim . fixnum?) (G4ea9 core-prim . bitwise-rotate-bit-field) (G4ea8 core-prim . bitwise-reverse-bit-field) (G4ea7 core-prim . bitwise-length) (G4ea6 core-prim . bitwise-if) (G4ea5 core-prim . bitwise-first-bit-set) (G4ea4 core-prim . bitwise-copy-bit-field) (G4ea3 core-prim . bitwise-copy-bit) (G4ea2 core-prim . bitwise-bit-set?) (G4ea1 core-prim . bitwise-bit-field) (G4ea0 core-prim . bitwise-bit-count) (G4e9f core-prim . bitwise-xor) (G4e9e core-prim . bitwise-ior) (G4e9d core-prim . bitwise-and) (G4e9c core-prim . bitwise-not) (G4e9b core-prim . bitwise-arithmetic-shift-right) (G4e9a core-prim . bitwise-arithmetic-shift-left) (G4e99 core-prim . bitwise-arithmetic-shift) (G4e98 core-prim . zero?) (G4e97 core-prim . vector?) (G4e96 core-prim . vector-set!) (G4e95 core-prim . vector-ref) (G4e94 core-prim . vector-map) (G4e93 core-prim . vector-length) (G4e92 core-prim . vector-for-each) (G4e91 core-prim . vector-fill!) (G4e90 core-prim . vector->list) (G4e8f core-prim . vector) (G4e8e core-prim . values) (G4e8d core-prim . truncate) (G4e8c core-prim . tan) (G4e8b core-prim . symbol?) (G4e8a core-prim . symbol=?) (G4e89 core-prim . symbol->string) (G4e88 core-prim . substring) (G4e87 core-prim . string?) (G4e86 core-prim . string>?) (G4e85 core-prim . string>=?) (G4e84 core-prim . string=?) (G4e83 core-prim . string<?) (G4e82 core-prim . string<=?) (G4e81 core-prim . string-ref) (G4e80 core-prim . string-length) (G4e7f core-prim . string-for-each) (G4e7e core-prim . string-copy) (G4e7d core-prim . string-append) (G4e7c core-prim . string->symbol) (G4e7b core-prim . string->number) (G4e7a core-prim . string->list) (G4e79 core-prim . string) (G4e78 core-prim . sqrt) (G4e77 core-prim . sin) (G4e76 core-prim . round) (G4e75 core-prim . reverse) (G4e74 core-prim . real?) (G4e73 core-prim . real-valued?) (G4e72 core-prim . real-part) (G4e71 core-prim . rationalize) (G4e70 core-prim . rational?) (G4e6f core-prim . rational-valued?) (G4e6e core-prim . procedure?) (G4e6d core-prim . positive?) (G4e6c core-prim . pair?) (G4e6b core-prim . odd?) (G4e6a core-prim . numerator) (G4e69 core-prim . number?) (G4e68 core-prim . number->string) (G4e67 core-prim . null?) (G4e66 core-prim . not) (G4e65 core-prim . negative?) (G4e64 core-prim . nan?) (G4e63 core-prim . min) (G4e62 core-prim . max) (G4e61 core-prim . map) (G4e60 core-prim . make-vector) (G4e5f core-prim . make-string) (G4e5e core-prim . make-rectangular) (G4e5d core-prim . make-polar) (G4e5c core-prim . magnitude) (G4e5b core-prim . log) (G4e5a core-prim . list?) (G4e59 core-prim . list-tail) (G4e58 core-prim . list-ref) (G4e57 core-prim . list->vector) (G4e56 core-prim . list->string) (G4e55 core-prim . list) (G4e54 core-prim . length) (G4e53 core-prim . lcm) (G4e52 core-prim . integer?) (G4e51 core-prim . integer-valued?) (G4e50 core-prim . integer->char) (G4e4f core-prim . infinite?) (G4e4e core-prim . inexact?) (G4e4d core-prim . inexact) (G4e4c core-prim . imag-part) (G4e4b core-prim . gcd) (G4e4a core-prim . for-each) (G4e49 core-prim . floor) (G4e48 core-prim . finite?) (G4e47 core-prim . expt) (G4e46 core-prim . exp) (G4e45 core-prim . exact?) (G4e44 core-prim . exact-integer-sqrt) (G4e43 core-prim . exact) (G4e42 core-prim . even?) (G4e41 core-prim . error) (G4e40 core-prim . eqv?) (G4e3f core-prim . equal?) (G4e3e core-prim . eq?) (G4e3d core-prim . dynamic-wind) (G4e3c core-prim . div0-and-mod0) (G4e3b core-prim . mod0) (G4e3a core-prim . div0) (G4e39 core-prim . div-and-mod) (G4e38 core-prim . mod) (G4e37 core-prim . div) (G4e36 core-prim . denominator) (G4e35 core-prim . cos) (G4e34 core-prim . cons) (G4e33 core-prim . complex?) (G4e32 core-prim . char?) (G4e31 core-prim . char>?) (G4e30 core-prim . char>=?) (G4e2f core-prim . char=?) (G4e2e core-prim . char<?) (G4e2d core-prim . char<=?) (G4e2c core-prim . char->integer) (G4e2b core-prim . ceiling) (G4e2a core-prim . call-with-values) (G4e29 core-prim . call/cc) (G4e28 core-prim . call-with-current-continuation) (G4e27 core-prim . cddddr) (G4e26 core-prim . cdddar) (G4e25 core-prim . cddadr) (G4e24 core-prim . cddaar) (G4e23 core-prim . cdaddr) (G4e22 core-prim . cdadar) (G4e21 core-prim . cdaadr) (G4e20 core-prim . cdaaar) (G4e1f core-prim . cadddr) (G4e1e core-prim . caddar) (G4e1d core-prim . cadadr) (G4e1c core-prim . cadaar) (G4e1b core-prim . caaddr) (G4e1a core-prim . caadar) (G4e19 core-prim . caaadr) (G4e18 core-prim . caaaar) (G4e17 core-prim . cdddr) (G4e16 core-prim . cddar) (G4e15 core-prim . cdadr) (G4e14 core-prim . cdaar) (G4e13 core-prim . caddr) (G4e12 core-prim . cadar) (G4e11 core-prim . caadr) (G4e10 core-prim . caaar) (G4e0f core-prim . cddr) (G4e0e core-prim . cdar) (G4e0d core-prim . cadr) (G4e0c core-prim . caar) (G4e0b core-prim . cdr) (G4e0a core-prim . car) (G4e09 core-prim . boolean?) (G4e08 core-prim . boolean=?) (G4e07 core-prim . atan) (G4e06 core-prim . assertion-violation) (G4e05 core-prim . asin) (G4e04 core-prim . apply) (G4e03 core-prim . append) (G4e02 core-prim . angle) (G4e01 core-prim . acos) (G4e00 core-prim . abs) (G4dff core-prim . /) (G4dfe core-prim . *) (G4dfd core-prim . -) (G4dfc core-prim . +) (G4dfb core-prim . >=) (G4dfa core-prim . >) (G4df9 core-prim . =) (G4df8 core-prim . <=) (G4df7 core-prim . <) (G4df6 core-prim . library) (G4df5 $core-rtd &no-nans-rtd &no-nans-rcd) (G4df4 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4df3 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4df2 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4df1 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4df0 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4def $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4dee $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4ded $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4dec $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4deb $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4dea $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4de9 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4de8 $core-rtd &i/o-rtd &i/o-rcd) (G4de7 $core-rtd &undefined-rtd &undefined-rcd) (G4de6 $core-rtd &syntax-rtd &syntax-rcd) (G4de5 $core-rtd &lexical-rtd &lexical-rcd) (G4de4 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4de3 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4de2 $core-rtd &who-rtd &who-rcd) (G4de1 $core-rtd &irritants-rtd &irritants-rcd) (G4de0 $core-rtd &assertion-rtd &assertion-rcd) (G4ddf $core-rtd &violation-rtd &violation-rcd) (G4dde $core-rtd &error-rtd &error-rcd) (G4ddd $core-rtd &serious-rtd &serious-rcd) (G4ddc $core-rtd &warning-rtd &warning-rcd) (G4ddb $core-rtd &message-rtd &message-rcd) (G4dda $core-rtd &condition-rtd &condition-rcd) (G4dd9 macro . define-condition-type) (G4dd8 macro . define-enumeration) (G4dd7 macro . define-record-type) (G4dd6 macro . parent-rtd) (G4dd5 macro . nongenerative) (G4dd4 macro . opaque) (G4dd3 macro . sealed) (G4dd2 macro . protocol) (G4dd1 macro . parent) (G4dd0 macro . immutable) (G4dcf macro . mutable) (G4dce macro . fields) (G4dcd macro . error-handling-mode) (G4dcc macro . file-options) (G4dcb macro . buffer-mode) (G4dca macro . eol-style) (G4dc9 macro . guard) (G4dc8 macro . trace-define) (G4dc7 macro . trace-lambda) (G4dc6 macro . unsyntax-splicing) (G4dc5 macro . unsyntax) (G4dc4 macro . unquote-splicing) (G4dc3 macro . unquote) (G4dc2 macro . _) (G4dc1 macro . else) (G4dc0 macro . =>) (G4dbf macro . ...) (G4dbe macro . assert) (G4dbd macro . endianness) (G4dbc macro . delay) (G4dbb macro . time) (G4dba macro . do) (G4db9 macro . cond) (G4db8 macro . let*) (G4db7 macro . let) (G4db6 macro . let*-values) (G4db5 macro . let-values) (G4db4 macro . identifier-syntax) (G4db3 macro . with-syntax) (G4db2 macro . quasisyntax) (G4db1 macro . quasiquote) (G4db0 macro . syntax-rules) (G4daf macro . include) (G4dae macro . define-struct) (G4dad core-macro . record-constructor-descriptor) (G4dac core-macro . record-type-descriptor) (G4dab macro . case) (G4daa macro . parameterize) (G4da9 macro . unless) (G4da8 macro . when) (G4da7 core-macro . or) (G4da6 core-macro . and) (G4da5 core-macro . if) (G4da4 core-macro . letrec*) (G4da3 core-macro . letrec) (G4da2 core-macro . type-descriptor) (G4da1 core-macro . case-lambda) (G4da0 core-macro . lambda) (G4d9f core-macro . syntax) (G4d9e core-macro . syntax-case) (G4d9d core-macro . quote) (G4d9c core-macro . foreign-call) (G4d9b letrec-syntax) (G4d9a let-syntax) (G4d99 set!) (G4d98 import) (G4d97 begin) (G4d96 module) (G4d95 define-syntax) (G4d94 define)) values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G5095 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G5074) (eval-core . G5073) (set-symbol-value! . G5072) (symbol-value . G5071) (gensym . G5070) (void . G506f)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G5096 '(mosh) '() '() '() '() '((set-symbol-value! . G5072) (symbol-value . G5071) (read-line . G506c) (ungensym . G504a) (alist->eq-hash-table . G5049) (assoc-ref . G5048) (print . G5045) (format . G5044) (standard-library-path . G5043) (file-newer? . G5042) (stat-mtime . G5041) (write-to-file . G5040) (file->list . G503f) (file->string . G503e) (digit->integer . G503d) (call-with-string-input-port . G503c) (call-with-string-io . G503b) (string-split . G503a) (bytevector-for-each . G5039) (string->regexp . G5038) (rxmatch . G5037) (regexp-replace-all . G5036) (hashtable-for-each . G5035) (readdir . G5031) (set-current-directory! . G5030) (expand-path . G502f) (current-directory . G502e) (p . G501f) (get-timeofday . G501c) (get-command-line . G501b) (sys-display . G501a) (source-info . G5019) (make-compiler-instruction . G5018) (make-instruction . G5017) (set-source-info! . G5016) (bignum? . G5015) (fast-equal? . G5014) (fasl-read . G5013) (fasl-write . G5012) (include . G4daf)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G5097 '(system) '() '() '() '() '((call-process . G5034) (local-tz-offset . G5033) (microseconds . G5032) (expand-path . G502f) (%spawn . G502d) (%waitpid . G502c) (%ffi-supported? . G502b) (%ffi-pointer-ref . G502a) (%ffi-pointer->string . G5029) (%ffi-call->string-or-zero . G5028) (%ffi-call->double . G5027) (%ffi-call->void* . G5026) (%ffi-call->void . G5025) (%ffi-call->int . G5024) (%ffi-lookup . G5023) (%ffi-open . G5022) (%fork . G5021) (%pipe . G5020) (get-environment-variables . G501e) (get-environment-variable . G501d) (make-parameter . G2823) (parameterize . G4daa)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G5098 '(srfi :1) '() '() '() '() '((dotted-list? . G506b) (circular-list? . G506a) (proper-list? . G5069) (circular-list . G5068) (last . G5067) (last-pair . G5066) (not-pair? . G5065) (split-at! . G5064) (split-at . G5063) (list= . G5062) (list-copy . G5061) (list-tabulate . G5060) (make-list . G505f) (xcons . G505e) (tenth . G505d) (ninth . G505c) (eighth . G505b) (seventh . G505a) (sixth . G5059) (fifth . G5058) (drop-right! . G5057) (drop-right . G5056) (take-right . G5055) (take! . G5054) (drop . G5053) (take . G5052) (car+cdr . G5051) (fourth . G5050) (third . G504f) (second . G504e) (first . G504d) (iota . G504c) (every . G504b) (alist-cons . G5047) (append-map . G5046)) '() values values '#f '#f '#f '#f))
((lambda (G4cbd@add-library-path! G4cbf@parse-and-add-library-path G4cc1@for-each-with-index G4cc3@conditioon-printer G4cc5@repl G4cc7@trace-printer G4cc9@command-line G4ccb@local-library-path G4ccd@load/args G4ccf@load G4cd1@ironscheme-build G4cd3@eval-top-level G4cd5@compile-system-libraries G4cd7@compile G4cd9@compile->closure G4cdb@pre-compile-r6rs-file G4cdd@load-r6rs-top-level) (begin (set! G4cbd@add-library-path! (lambda (G4cf8@path) (G2b58@G29ed@library-path (append (G2b58@G29ed@library-path) (list G4cf8@path))))) (set! G4cbf@parse-and-add-library-path (lambda (G4cfa@paths G4cfb@message) ((lambda (G4cfe@t) (if G4cfe@t ((lambda (G4d00@paths) (for-each (lambda (G4d02@path) (if (file-exists? G4d02@path) (G4cbd@add-library-path! (expand-path G4d02@path)) (format (current-error-port) G4cfb@message G4d02@path))) (reverse (string-split G4d00@paths '#\:)))) G4cfe@t) (void))) G4cfa@paths))) (set! G4cc1@for-each-with-index (lambda (G4d04@proc G4d05@lst) (letrec ((G4d08@loop (lambda (G4d0a@i G4d0b@lst) (if (null? G4d0b@lst) (if '#f '#f (void)) (begin (G4d04@proc G4d0a@i (car G4d0b@lst)) (G4d08@loop (+ G4d0a@i '1) (cdr G4d0b@lst))))))) (G4d08@loop '1 G4d05@lst)))) (set! G4cc3@conditioon-printer (lambda (G4d0e@e G4d0f@port) ((lambda (G4d13@ref) (begin (set! G4d13@ref (lambda (G4d22@rtd G4d23@i G4d24@x) ((lambda (G4d28@val) (if (symbol? G4d28@val) (ungensym G4d28@val) G4d28@val)) ((record-accessor G4d22@rtd G4d23@i) G4d24@x)))) (begin (display '" Condition components:\n" G4d0f@port) (G4cc1@for-each-with-index (lambda (G4d14@i G4d15@x) ((lambda (G4d18@rtd) (begin (format G4d0f@port '"   ~d. ~a" G4d14@i (record-type-name G4d18@rtd)) ((lambda (G4d1a@v) ((lambda (G4d1c@t) (if (memv G4d1c@t '(0)) (newline G4d0f@port) (if (memv G4d1c@t '(1)) (begin (display '": " G4d0f@port) (write (G4d13@ref G4d18@rtd '0 G4d15@x) G4d0f@port) (newline G4d0f@port)) (begin (display '":\n" G4d0f@port) ((letrec ((G4d1e@f (lambda (G4d20@i) (if (not (= G4d20@i (vector-length G4d1a@v))) (begin (display '"       " G4d0f@port) (display (vector-ref G4d1a@v G4d20@i) G4d0f@port) (display '": " G4d0f@port) (write (G4d13@ref G4d18@rtd G4d20@i G4d15@x) G4d0f@port) (newline G4d0f@port) (G4d1e@f (+ G4d20@i '1))) (void))))) G4d1e@f) '0))))) (vector-length G4d1a@v))) (record-type-field-names G4d18@rtd)))) (record-rtd G4d15@x))) (simple-conditions G4d0e@e))))) '#f))) (set! G4cc5@repl (lambda G4d2a@x ((lambda (G4d2d@rec) (begin (set! G4d2d@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d30@G4d2e) (lambda () (with-exception-handler (lambda (G4d32@e) ((call/cc (lambda (G4d34@G4d2f) (G4d30@G4d2e (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? G4d32@e) (G4cc3@conditioon-printer G4d32@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" G4d32@e))) (G4d34@G4d2f (lambda () (raise-continuable G4d32@e)))))))))) (lambda () ((letrec ((G4d36@loop (lambda (G4d38@line G4d39@accum) ((lambda (G4d3d@parentheses-ok? G4d3f@eval-string-print) (begin (set! G4d3d@parentheses-ok? (lambda (G4d44@text) ((letrec ((G4d46@loop (lambda (G4d48@chars G4d49@p0 G4d4a@p1) (if (null? G4d48@chars) (= '0 G4d49@p0 G4d4a@p1) ((lambda (G4d4e@t) (if (memv G4d4e@t '(#\()) (G4d46@loop (cdr G4d48@chars) (+ G4d49@p0 '1) G4d4a@p1) (if (memv G4d4e@t '(#\))) (G4d46@loop (cdr G4d48@chars) (- G4d49@p0 '1) G4d4a@p1) (if (memv G4d4e@t '(#\[)) (G4d46@loop (cdr G4d48@chars) G4d49@p0 (+ G4d4a@p1 '1)) (if (memv G4d4e@t '(#\])) (G4d46@loop (cdr G4d48@chars) G4d49@p0 (- G4d4a@p1 '1)) (G4d46@loop (cdr G4d48@chars) G4d49@p0 G4d4a@p1)))))) (car G4d48@chars)))))) G4d46@loop) (string->list G4d44@text) '0 '0))) (set! G4d3f@eval-string-print (lambda (G4d42@text) (if (not (or (string=? '"\n" G4d42@text) (= '0 (string-length G4d42@text)))) (write (G4cd3@eval-top-level (call-with-port (open-string-input-port G4d42@text) read))) (void)))) (if (eof-object? G4d38@line) (begin (G4d3f@eval-string-print G4d39@accum) (exit)) ((lambda (G4d40@current) (if (G4d3d@parentheses-ok? G4d40@current) (G4d3f@eval-string-print G4d40@current) (G4d36@loop (get-line (current-input-port)) G4d40@current))) (string-append G4d39@accum G4d38@line))))) '#f '#f)))) G4d36@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d2d@rec)))) (G4d2d@rec))) '#f))) (set! G4cc7@trace-printer (G28f6@G2824@make-parameter write)) (set! G4cc9@command-line (G28f6@G2824@make-parameter (get-command-line))) (set! G4ccb@local-library-path (lambda (G4d50@filename) (cons (expand-path '".") (G2b58@G29ed@library-path)))) (set! G4ccd@load/args (lambda (G4d52@filename . G4d54@args) (begin (apply G4cdd@load-r6rs-top-level G4d52@filename 'load G4d54@args) (void)))) (set! G4ccf@load (lambda (G4d56@filename) (begin (apply G4cdd@load-r6rs-top-level G4d56@filename 'load (G4cc9@command-line)) (void)))) (set! G4cd1@ironscheme-build (lambda () (G4ccf@load '"ironscheme-buildscript.ss"))) (set! G4cd3@eval-top-level (lambda (G4d58@x) (G48f5@G2ffe@eval G4d58@x (G490b@G302a@interaction-environment)))) (set! G4cd5@compile-system-libraries (lambda () (G4cd3@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4cd7@compile (lambda (G4d5a@filename) (G4cdd@load-r6rs-top-level G4d5a@filename 'compile))) (set! G4cd9@compile->closure (lambda (G4d5c@filename) (G4cdd@load-r6rs-top-level G4d5c@filename 'closure))) (set! G4cdb@pre-compile-r6rs-file (lambda (G4d5e@filename) (G4cdd@load-r6rs-top-level G4d5e@filename 'compile))) (set! G4cdd@load-r6rs-top-level (lambda (G4d60@filename G4d61@how . G4d64@args) ((lambda (G4d68@G4d66 G4d69@G4d67) ((lambda (G4d6c@swap) (dynamic-wind G4d6c@swap (lambda () ((lambda (G4d6e@x*) ((lambda (G4d70@t) (if (memv G4d70@t '(closure)) (G490a@G3028@pre-compile-r6rs-top-level G4d6e@x*) (if (memv G4d70@t '(load)) ((lambda (G4d74@G4d72 G4d75@G4d73) ((lambda (G4d78@swap) (dynamic-wind G4d78@swap (lambda () ((G4909@G3026@compile-r6rs-top-level G4d6e@x*))) G4d78@swap)) (lambda () ((lambda (G4d7a@t) (begin (G4d74@G4d72 G4d75@G4d73) (set! G4d75@G4d73 G4d7a@t))) (G4d74@G4d72))))) G4cc9@command-line (cons G4d60@filename (car G4d64@args))) (if (memv G4d70@t '(compile)) (begin (G4909@G3026@compile-r6rs-top-level G4d6e@x*) (G2b5c@G29f5@serialize-all G28f1@G281a@serialize-library G294b@G2904@compile-core-expr)) (if '#f '#f (void)))))) G4d61@how)) (with-input-from-file G4d60@filename (lambda () ((letrec ((G4d7c@f (lambda () ((lambda (G4d7e@x) (if (eof-object? G4d7e@x) '() (cons G4d7e@x (G4d7c@f)))) (G28e9@G280a@read-annotated))))) G4d7c@f)))))) G4d6c@swap)) (lambda () ((lambda (G4d80@t) (begin (G4d68@G4d66 G4d69@G4d67) (set! G4d69@G4d67 G4d80@t))) (G4d68@G4d66))))) G2b58@G29ed@library-path (G4ccb@local-library-path G4d60@filename)))) (begin (set! G4d92@G4cdd@load-r6rs-top-level G4cdd@load-r6rs-top-level) (set! G4d91@G4cdb@pre-compile-r6rs-file G4cdb@pre-compile-r6rs-file) (set! G4d90@G4cd9@compile->closure G4cd9@compile->closure) (set! G4d8f@G4cd7@compile G4cd7@compile) (set! G4d8e@G4cd5@compile-system-libraries G4cd5@compile-system-libraries) (set! G4d8d@G4cd3@eval-top-level G4cd3@eval-top-level) (set! G4d8c@G4cd1@ironscheme-build G4cd1@ironscheme-build) (set! G4d8b@G4ccf@load G4ccf@load) (set! G4d8a@G4ccd@load/args G4ccd@load/args) (set! G4d89@G4ccb@local-library-path G4ccb@local-library-path) (set! G4d88@G4cc9@command-line G4cc9@command-line) (set! G4d87@G4cc7@trace-printer G4cc7@trace-printer) (set! G4d86@G4cc5@repl G4cc5@repl) (set! G4d85@G4cc3@conditioon-printer G4cc3@conditioon-printer) (set! G4d84@G4cc1@for-each-with-index G4cc1@for-each-with-index) (set! G4d83@G4cbf@parse-and-add-library-path G4cbf@parse-and-add-library-path) (set! G4d82@G4cbd@add-library-path! G4cbd@add-library-path!) (G2b5d@G29f7@current-precompiled-library-loader G28f2@G281c@load-serialized-library) (set-symbol-value! 'load G4ccf@load) (set-symbol-value! 'pre-compile-r6rs-file G4cdb@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4cd3@eval-top-level) (set-symbol-value! 'int-env-syms G48ec@G2fec@interaction-environment-symbols) (set-symbol-value! 'expanded2core G294a@G2902@expanded->core) (set-symbol-value! 'trace-printer G4cc7@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4cde@c) (condition (G4c1a@G4a2a@make-non-continuable-violation) (G4c10@G4a11@make-who-condition 'raise) (G4bd4@G4974@make-message-condition '"returned from non-continuable exception") (G4c06@G49f7@make-irritants-condition (list G4cde@c))))) (G4cbf@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4cbf@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2b58@G29ed@library-path (append (G2b58@G29ed@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4ce0@prefix) (G2b59@G29ef@library-extensions (G4ce0@prefix '".mosh" (G2b59@G29ef@library-extensions)))) (lambda (G4ce2@ext G4ce3@ls) (append (map (lambda (G4ce6@x) (string-append G4ce2@ext G4ce6@x)) G4ce3@ls) G4ce3@ls))) ((lambda (G4ce8@args G4ce9@port) ((lambda (G4ced@ref) (begin (set! G4ced@ref (lambda (G4cf0@rtd G4cf1@i G4cf2@x) ((lambda (G4cf6@val) (if (symbol? G4cf6@val) (ungensym G4cf6@val) G4cf6@val)) ((record-accessor G4cf0@rtd G4cf1@i) G4cf2@x)))) (with-exception-handler (lambda (G4cee@c) (if (condition? G4cee@c) (G4cc3@conditioon-printer G4cee@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" G4cee@c))) (lambda () (if (null? G4ce8@args) (G4cc5@repl) (G4cdd@load-r6rs-top-level (car G4ce8@args) 'load (cdr G4ce8@args))))))) '#f)) (G4cc9@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
